
stm32f4-stdperiph.elf:     file format elf32-littlearm


Disassembly of section .text:

08000188 <TIM2_timer_start>:
/**
 * @brief  millisecond
 * @param  none
 * @retval None
 */
void TIM2_timer_start(void) {
 8000188:	b530      	push	{r4, r5, lr}
 800018a:	b089      	sub	sp, #36	; 0x24
	// TIM_TimeBaseInitTypeDef's order is {uint16_t TIM_Prescaler, uint16_t TIM_CounterMode, uint16_t TIM_Period, uint16_t TIM_ClockDivision, uint8_t TIM_RepetitionCounter}
	TIM_TimeBaseInitTypeDef TimeBaseStructure;
//			= { 84, TIM_CounterMode_Up, 999, TIM_CKD_DIV1, 0 };

	RCC_ClocksTypeDef RCC_Clocks;
	RCC_GetClocksFreq(&RCC_Clocks);
 800018c:	a804      	add	r0, sp, #16
 800018e:	f001 fac9 	bl	8001724 <RCC_GetClocksFreq>
	TimeBaseStructure.TIM_Prescaler = (RCC_Clocks.SYSCLK_Frequency>>1)/1000000L ;
 8000192:	9b04      	ldr	r3, [sp, #16]
 8000194:	4a1d      	ldr	r2, [pc, #116]	; (800020c <TIM2_timer_start+0x84>)
 8000196:	085b      	lsrs	r3, r3, #1
 8000198:	fbb3 f3f2 	udiv	r3, r3, r2
	TimeBaseStructure.TIM_Period = 1000 - 1;
	TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
	TimeBaseStructure.TIM_RepetitionCounter = 0;

	//Supply APB1 Clock
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 800019c:	2001      	movs	r0, #1
//			= { 84, TIM_CounterMode_Up, 999, TIM_CKD_DIV1, 0 };

	RCC_ClocksTypeDef RCC_Clocks;
	RCC_GetClocksFreq(&RCC_Clocks);
	TimeBaseStructure.TIM_Prescaler = (RCC_Clocks.SYSCLK_Frequency>>1)/1000000L ;
	TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 800019e:	2400      	movs	r4, #0
	TimeBaseStructure.TIM_Period = 1000 - 1;
	TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
	TimeBaseStructure.TIM_RepetitionCounter = 0;

	//Supply APB1 Clock
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 80001a0:	4601      	mov	r1, r0
	TIM_TimeBaseInitTypeDef TimeBaseStructure;
//			= { 84, TIM_CounterMode_Up, 999, TIM_CKD_DIV1, 0 };

	RCC_ClocksTypeDef RCC_Clocks;
	RCC_GetClocksFreq(&RCC_Clocks);
	TimeBaseStructure.TIM_Prescaler = (RCC_Clocks.SYSCLK_Frequency>>1)/1000000L ;
 80001a2:	f8ad 3004 	strh.w	r3, [sp, #4]
	TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
	TimeBaseStructure.TIM_Period = 1000 - 1;
 80001a6:	f240 33e7 	movw	r3, #999	; 0x3e7
 80001aa:	9302      	str	r3, [sp, #8]
//			= { 84, TIM_CounterMode_Up, 999, TIM_CKD_DIV1, 0 };

	RCC_ClocksTypeDef RCC_Clocks;
	RCC_GetClocksFreq(&RCC_Clocks);
	TimeBaseStructure.TIM_Prescaler = (RCC_Clocks.SYSCLK_Frequency>>1)/1000000L ;
	TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80001ac:	f8ad 4006 	strh.w	r4, [sp, #6]
	TimeBaseStructure.TIM_Period = 1000 - 1;
	TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 80001b0:	f8ad 400c 	strh.w	r4, [sp, #12]
	TimeBaseStructure.TIM_RepetitionCounter = 0;
 80001b4:	f88d 400e 	strb.w	r4, [sp, #14]

	//Supply APB1 Clock
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 80001b8:	f001 fb48 	bl	800184c <RCC_APB1PeriphClockCmd>

	/* Time base configuration */
	TIM_TimeBaseInit(TIM2, &TimeBaseStructure);
 80001bc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80001c0:	a901      	add	r1, sp, #4
 80001c2:	f001 fea5 	bl	8001f10 <TIM_TimeBaseInit>
//  TIM_SelectOnePulseMode(TIM2, TIM_OPMode_Repetitive);
	TIM_SetCounter(TIM2, 0);
 80001c6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80001ca:	4621      	mov	r1, r4
 80001cc:	f001 fef2 	bl	8001fb4 <TIM_SetCounter>
	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);
 80001d0:	2101      	movs	r1, #1
 80001d2:	460a      	mov	r2, r1
 80001d4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80001d8:	f002 fa51 	bl	800267e <TIM_ITConfig>

	NVIC_InitTypeDef NVIC_InitStructure;
	/* Enable the TIM2 gloabal Interrupt */
	NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 80001dc:	2501      	movs	r5, #1
	TIM_SetCounter(TIM2, 0);
	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);

	NVIC_InitTypeDef NVIC_InitStructure;
	/* Enable the TIM2 gloabal Interrupt */
	NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
 80001de:	231c      	movs	r3, #28
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
 80001e0:	4668      	mov	r0, sp
	TIM_SetCounter(TIM2, 0);
	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);

	NVIC_InitTypeDef NVIC_InitStructure;
	/* Enable the TIM2 gloabal Interrupt */
	NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
 80001e2:	f88d 3000 	strb.w	r3, [sp]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80001e6:	f88d 4001 	strb.w	r4, [sp, #1]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 80001ea:	f88d 5002 	strb.w	r5, [sp, #2]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80001ee:	f88d 5003 	strb.w	r5, [sp, #3]
	NVIC_Init(&NVIC_InitStructure);
 80001f2:	f000 fea1 	bl	8000f38 <NVIC_Init>

	/* TIM enable counter */
	TIM_Cmd(TIM2, ENABLE);
 80001f6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80001fa:	4629      	mov	r1, r5
 80001fc:	f001 ff1d 	bl	800203a <TIM_Cmd>

	__counter_micros = 0;
 8000200:	4b03      	ldr	r3, [pc, #12]	; (8000210 <TIM2_timer_start+0x88>)
 8000202:	601c      	str	r4, [r3, #0]
	__counter_millis = 0;
 8000204:	4b03      	ldr	r3, [pc, #12]	; (8000214 <TIM2_timer_start+0x8c>)
 8000206:	601c      	str	r4, [r3, #0]
}
 8000208:	b009      	add	sp, #36	; 0x24
 800020a:	bd30      	pop	{r4, r5, pc}
 800020c:	000f4240 	.word	0x000f4240
 8000210:	20000664 	.word	0x20000664
 8000214:	20000668 	.word	0x20000668

08000218 <micros>:

uint32_t micros(void) {
	return __counter_micros + TIM_GetCounter(TIM2 );
 8000218:	4b04      	ldr	r3, [pc, #16]	; (800022c <micros+0x14>)

	__counter_micros = 0;
	__counter_millis = 0;
}

uint32_t micros(void) {
 800021a:	b510      	push	{r4, lr}
	return __counter_micros + TIM_GetCounter(TIM2 );
 800021c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000220:	681c      	ldr	r4, [r3, #0]
 8000222:	f001 fecb 	bl	8001fbc <TIM_GetCounter>
}
 8000226:	1900      	adds	r0, r0, r4
 8000228:	bd10      	pop	{r4, pc}
 800022a:	bf00      	nop
 800022c:	20000664 	.word	0x20000664

08000230 <millis>:

uint32_t millis(void) {
	return __counter_millis;
 8000230:	4b01      	ldr	r3, [pc, #4]	; (8000238 <millis+0x8>)
 8000232:	6818      	ldr	r0, [r3, #0]
}
 8000234:	4770      	bx	lr
 8000236:	bf00      	nop
 8000238:	20000668 	.word	0x20000668

0800023c <delay_ms>:
uint32_t micros(void) {
	return __counter_micros + TIM_GetCounter(TIM2 );
}

uint32_t millis(void) {
	return __counter_millis;
 800023c:	4b06      	ldr	r3, [pc, #24]	; (8000258 <delay_ms+0x1c>)
 800023e:	681a      	ldr	r2, [r3, #0]
}

void delay_ms(uint32_t w) {
	uint32_t wtill = millis() + w;
 8000240:	1880      	adds	r0, r0, r2
uint32_t micros(void) {
	return __counter_micros + TIM_GetCounter(TIM2 );
}

uint32_t millis(void) {
	return __counter_millis;
 8000242:	681a      	ldr	r2, [r3, #0]
}

void delay_ms(uint32_t w) {
	uint32_t wtill = millis() + w;
	if ( wtill < millis() ) {
 8000244:	4290      	cmp	r0, r2
 8000246:	d202      	bcs.n	800024e <delay_ms+0x12>
uint32_t micros(void) {
	return __counter_micros + TIM_GetCounter(TIM2 );
}

uint32_t millis(void) {
	return __counter_millis;
 8000248:	681a      	ldr	r2, [r3, #0]
}

void delay_ms(uint32_t w) {
	uint32_t wtill = millis() + w;
	if ( wtill < millis() ) {
		while ( millis() >= wtill );
 800024a:	4282      	cmp	r2, r0
 800024c:	d2fc      	bcs.n	8000248 <delay_ms+0xc>
uint32_t micros(void) {
	return __counter_micros + TIM_GetCounter(TIM2 );
}

uint32_t millis(void) {
	return __counter_millis;
 800024e:	4a02      	ldr	r2, [pc, #8]	; (8000258 <delay_ms+0x1c>)
 8000250:	6813      	ldr	r3, [r2, #0]
void delay_ms(uint32_t w) {
	uint32_t wtill = millis() + w;
	if ( wtill < millis() ) {
		while ( millis() >= wtill );
	}
	while (millis() < wtill)
 8000252:	4283      	cmp	r3, r0
 8000254:	d3fc      	bcc.n	8000250 <delay_ms+0x14>
		;
}
 8000256:	4770      	bx	lr
 8000258:	20000668 	.word	0x20000668

0800025c <delay_us>:

void delay_us(uint32_t w) {
 800025c:	b510      	push	{r4, lr}
 800025e:	4604      	mov	r4, r0
	uint32_t wtill = micros() + w;
 8000260:	f7ff ffda 	bl	8000218 <micros>
 8000264:	1904      	adds	r4, r0, r4
	if ( wtill < micros() ) {
 8000266:	f7ff ffd7 	bl	8000218 <micros>
 800026a:	4284      	cmp	r4, r0
 800026c:	d203      	bcs.n	8000276 <delay_us+0x1a>
		// overflow
		while ( micros() >= wtill );
 800026e:	f7ff ffd3 	bl	8000218 <micros>
 8000272:	42a0      	cmp	r0, r4
 8000274:	d2fb      	bcs.n	800026e <delay_us+0x12>
	}
	while (micros() < wtill)
 8000276:	f7ff ffcf 	bl	8000218 <micros>
 800027a:	42a0      	cmp	r0, r4
 800027c:	d3fb      	bcc.n	8000276 <delay_us+0x1a>
		;
}
 800027e:	bd10      	pop	{r4, pc}

08000280 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void) {
 8000280:	b508      	push	{r3, lr}
	if (TIM_GetITStatus(TIM2, TIM_IT_Update ) != RESET) {
 8000282:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000286:	2101      	movs	r1, #1
 8000288:	f002 fa0d 	bl	80026a6 <TIM_GetITStatus>
 800028c:	b168      	cbz	r0, 80002aa <TIM2_IRQHandler+0x2a>
		TIM_ClearITPendingBit(TIM2, TIM_IT_Update );
 800028e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000292:	2101      	movs	r1, #1
 8000294:	f002 fa12 	bl	80026bc <TIM_ClearITPendingBit>
		__counter_micros += 1000;
 8000298:	4b04      	ldr	r3, [pc, #16]	; (80002ac <TIM2_IRQHandler+0x2c>)
 800029a:	681a      	ldr	r2, [r3, #0]
 800029c:	f502 727a 	add.w	r2, r2, #1000	; 0x3e8
 80002a0:	601a      	str	r2, [r3, #0]
		__counter_millis += 1;
 80002a2:	4b03      	ldr	r3, [pc, #12]	; (80002b0 <TIM2_IRQHandler+0x30>)
 80002a4:	681a      	ldr	r2, [r3, #0]
 80002a6:	3201      	adds	r2, #1
 80002a8:	601a      	str	r2, [r3, #0]
 80002aa:	bd08      	pop	{r3, pc}
 80002ac:	20000664 	.word	0x20000664
 80002b0:	20000668 	.word	0x20000668

080002b4 <PinPort>:
		GPIO_Pin_10, GPIO_Pin_11, GPIO_Pin_12, GPIO_Pin_13, GPIO_Pin_14,
		GPIO_Pin_15, GPIO_Pin_All };

GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}
 80002b4:	4b02      	ldr	r3, [pc, #8]	; (80002c0 <PinPort+0xc>)
		GPIO_Pin_4, GPIO_Pin_5, GPIO_Pin_6, GPIO_Pin_7, GPIO_Pin_8, GPIO_Pin_9,
		GPIO_Pin_10, GPIO_Pin_11, GPIO_Pin_12, GPIO_Pin_13, GPIO_Pin_14,
		GPIO_Pin_15, GPIO_Pin_All };

GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
 80002b6:	f3c0 2003 	ubfx	r0, r0, #8, #4
}
 80002ba:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80002be:	4770      	bx	lr
 80002c0:	20000000 	.word	0x20000000

080002c4 <PinBit>:

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 80002c4:	2301      	movs	r3, #1
 80002c6:	f000 000f 	and.w	r0, r0, #15
 80002ca:	fa03 f000 	lsl.w	r0, r3, r0
}
 80002ce:	b280      	uxth	r0, r0
 80002d0:	4770      	bx	lr

080002d2 <PinSource>:

uint8_t PinSource(GPIOPin portpin) {
	return portpin & 0x0f;
}
 80002d2:	f000 000f 	and.w	r0, r0, #15
 80002d6:	4770      	bx	lr

080002d8 <pinMode>:

void pinMode(GPIOPin portpin, GPIOMode_TypeDef mode) {
 80002d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);
 80002da:	4c11      	ldr	r4, [pc, #68]	; (8000320 <pinMode+0x48>)
 80002dc:	f3c0 2503 	ubfx	r5, r0, #8, #4
 80002e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2

uint8_t PinSource(GPIOPin portpin) {
	return portpin & 0x0f;
}

void pinMode(GPIOPin portpin, GPIOMode_TypeDef mode) {
 80002e4:	460f      	mov	r7, r1
 80002e6:	4606      	mov	r6, r0

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);
 80002e8:	2101      	movs	r1, #1
 80002ea:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80002ec:	f001 fa8a 	bl	8001804 <RCC_AHB1PeriphClockCmd>
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 80002f0:	f006 060f 	and.w	r6, r6, #15
 80002f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000

uint8_t PinSource(GPIOPin portpin) {
	return portpin & 0x0f;
}

void pinMode(GPIOPin portpin, GPIOMode_TypeDef mode) {
 80002f8:	fa03 f606 	lsl.w	r6, r3, r6

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);

	GPIO_InitStructure.GPIO_Pin = PinBit(portpin);
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80002fc:	2300      	movs	r3, #0

uint8_t PinSource(GPIOPin portpin) {
	return portpin & 0x0f;
}

void pinMode(GPIOPin portpin, GPIOMode_TypeDef mode) {
 80002fe:	0c36      	lsrs	r6, r6, #16

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);

	GPIO_InitStructure.GPIO_Pin = PinBit(portpin);
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000300:	f88d 3006 	strb.w	r3, [sp, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000304:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	//
	GPIO_Init(Port[portpin>>8 & 0x0f], &GPIO_InitStructure);
 8000308:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);

	GPIO_InitStructure.GPIO_Pin = PinBit(portpin);
 800030c:	9600      	str	r6, [sp, #0]
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800030e:	2302      	movs	r3, #2
	//
	GPIO_Init(Port[portpin>>8 & 0x0f], &GPIO_InitStructure);
 8000310:	4669      	mov	r1, sp
	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);

	GPIO_InitStructure.GPIO_Pin = PinBit(portpin);
	GPIO_InitStructure.GPIO_Mode = mode;
 8000312:	f88d 7004 	strb.w	r7, [sp, #4]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000316:	f88d 3005 	strb.w	r3, [sp, #5]
	//
	GPIO_Init(Port[portpin>>8 & 0x0f], &GPIO_InitStructure);
 800031a:	f000 fecf 	bl	80010bc <GPIO_Init>
}
 800031e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8000320:	20000000 	.word	0x20000000

08000324 <digitalWrite>:

void digitalWrite(GPIOPin portpin, uint8_t bit) {
 8000324:	0a02      	lsrs	r2, r0, #8
 8000326:	4b0b      	ldr	r3, [pc, #44]	; (8000354 <digitalWrite+0x30>)
	if (bit) {
		//? Bit_SET : Bit_RESET ));
		GPIO_SetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
 8000328:	f002 020f 	and.w	r2, r2, #15
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 800032c:	f000 000f 	and.w	r0, r0, #15
	//
	GPIO_Init(Port[portpin>>8 & 0x0f], &GPIO_InitStructure);
}

void digitalWrite(GPIOPin portpin, uint8_t bit) {
	if (bit) {
 8000330:	b139      	cbz	r1, 8000342 <digitalWrite+0x1e>
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 8000332:	2101      	movs	r1, #1
 8000334:	fa01 f100 	lsl.w	r1, r1, r0
}

void digitalWrite(GPIOPin portpin, uint8_t bit) {
	if (bit) {
		//? Bit_SET : Bit_RESET ));
		GPIO_SetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
 8000338:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800033c:	b289      	uxth	r1, r1
 800033e:	f000 bf2f 	b.w	80011a0 <GPIO_SetBits>
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 8000342:	2101      	movs	r1, #1
 8000344:	fa01 f100 	lsl.w	r1, r1, r0
void digitalWrite(GPIOPin portpin, uint8_t bit) {
	if (bit) {
		//? Bit_SET : Bit_RESET ));
		GPIO_SetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
	} else {
		GPIO_ResetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
 8000348:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800034c:	b289      	uxth	r1, r1
 800034e:	f000 bf29 	b.w	80011a4 <GPIO_ResetBits>
 8000352:	bf00      	nop
 8000354:	20000000 	.word	0x20000000

08000358 <digitalRead>:
	}
}

uint8_t digitalRead(GPIOPin portpin) {
	GPIO_TypeDef * port = Port[portpin>>8 & 0x0f];
 8000358:	f3c0 2103 	ubfx	r1, r0, #8, #4
 800035c:	4a0d      	ldr	r2, [pc, #52]	; (8000394 <digitalRead+0x3c>)
	} else {
		GPIO_ResetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
	}
}

uint8_t digitalRead(GPIOPin portpin) {
 800035e:	b508      	push	{r3, lr}
 8000360:	4603      	mov	r3, r0
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 8000362:	f003 030f 	and.w	r3, r3, #15
		GPIO_ResetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
	}
}

uint8_t digitalRead(GPIOPin portpin) {
	GPIO_TypeDef * port = Port[portpin>>8 & 0x0f];
 8000366:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 800036a:	2101      	movs	r1, #1
 800036c:	fa01 f303 	lsl.w	r3, r1, r3
	}
}

uint8_t digitalRead(GPIOPin portpin) {
	GPIO_TypeDef * port = Port[portpin>>8 & 0x0f];
	uint8_t mode = (port->MODER) >> (PinBit(portpin) * 2);
 8000370:	6802      	ldr	r2, [r0, #0]
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 8000372:	b299      	uxth	r1, r3
	}
}

uint8_t digitalRead(GPIOPin portpin) {
	GPIO_TypeDef * port = Port[portpin>>8 & 0x0f];
	uint8_t mode = (port->MODER) >> (PinBit(portpin) * 2);
 8000374:	004b      	lsls	r3, r1, #1
 8000376:	fa22 f303 	lsr.w	r3, r2, r3
	if (mode == GPIO_Mode_OUT)
 800037a:	b2db      	uxtb	r3, r3
 800037c:	2b01      	cmp	r3, #1
 800037e:	d102      	bne.n	8000386 <digitalRead+0x2e>
		return (GPIO_ReadOutputDataBit(port, PinBit(portpin)) ? SET : RESET);
 8000380:	f000 ff05 	bl	800118e <GPIO_ReadOutputDataBit>
 8000384:	e001      	b.n	800038a <digitalRead+0x32>
	return (GPIO_ReadInputDataBit(port, PinBit(portpin)) ? SET : RESET);
 8000386:	f000 fef9 	bl	800117c <GPIO_ReadInputDataBit>
 800038a:	3000      	adds	r0, #0
 800038c:	bf18      	it	ne
 800038e:	2001      	movne	r0, #1
}
 8000390:	bd08      	pop	{r3, pc}
 8000392:	bf00      	nop
 8000394:	20000000 	.word	0x20000000

08000398 <GPIOMode>:

void GPIOMode(GPIO_TypeDef * port, uint16_t pinbit, GPIOMode_TypeDef mode,
              GPIOSpeed_TypeDef clk, GPIOOType_TypeDef otype, GPIOPuPd_TypeDef pupd) {
 8000398:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800039a:	461d      	mov	r5, r3
	if ( port == GPIOB ) {
 800039c:	4b1f      	ldr	r3, [pc, #124]	; (800041c <GPIOMode+0x84>)
		return (GPIO_ReadOutputDataBit(port, PinBit(portpin)) ? SET : RESET);
	return (GPIO_ReadInputDataBit(port, PinBit(portpin)) ? SET : RESET);
}

void GPIOMode(GPIO_TypeDef * port, uint16_t pinbit, GPIOMode_TypeDef mode,
              GPIOSpeed_TypeDef clk, GPIOOType_TypeDef otype, GPIOPuPd_TypeDef pupd) {
 800039e:	4604      	mov	r4, r0
	if ( port == GPIOB ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 80003a0:	2002      	movs	r0, #2
	return (GPIO_ReadInputDataBit(port, PinBit(portpin)) ? SET : RESET);
}

void GPIOMode(GPIO_TypeDef * port, uint16_t pinbit, GPIOMode_TypeDef mode,
              GPIOSpeed_TypeDef clk, GPIOOType_TypeDef otype, GPIOPuPd_TypeDef pupd) {
	if ( port == GPIOB ) {
 80003a2:	429c      	cmp	r4, r3
		return (GPIO_ReadOutputDataBit(port, PinBit(portpin)) ? SET : RESET);
	return (GPIO_ReadInputDataBit(port, PinBit(portpin)) ? SET : RESET);
}

void GPIOMode(GPIO_TypeDef * port, uint16_t pinbit, GPIOMode_TypeDef mode,
              GPIOSpeed_TypeDef clk, GPIOOType_TypeDef otype, GPIOPuPd_TypeDef pupd) {
 80003a4:	460f      	mov	r7, r1
 80003a6:	4616      	mov	r6, r2
	if ( port == GPIOB ) {
 80003a8:	d01c      	beq.n	80003e4 <GPIOMode+0x4c>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
	} else if ( port == GPIOC ) {
 80003aa:	4b1d      	ldr	r3, [pc, #116]	; (8000420 <GPIOMode+0x88>)
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 80003ac:	2004      	movs	r0, #4

void GPIOMode(GPIO_TypeDef * port, uint16_t pinbit, GPIOMode_TypeDef mode,
              GPIOSpeed_TypeDef clk, GPIOOType_TypeDef otype, GPIOPuPd_TypeDef pupd) {
	if ( port == GPIOB ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
	} else if ( port == GPIOC ) {
 80003ae:	429c      	cmp	r4, r3
 80003b0:	d018      	beq.n	80003e4 <GPIOMode+0x4c>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
	} else if ( port == GPIOD ) {
 80003b2:	4b1c      	ldr	r3, [pc, #112]	; (8000424 <GPIOMode+0x8c>)
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 80003b4:	2008      	movs	r0, #8
              GPIOSpeed_TypeDef clk, GPIOOType_TypeDef otype, GPIOPuPd_TypeDef pupd) {
	if ( port == GPIOB ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
	} else if ( port == GPIOC ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
	} else if ( port == GPIOD ) {
 80003b6:	429c      	cmp	r4, r3
 80003b8:	d014      	beq.n	80003e4 <GPIOMode+0x4c>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
	} else if ( port == GPIOE ) {
 80003ba:	4b1b      	ldr	r3, [pc, #108]	; (8000428 <GPIOMode+0x90>)
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 80003bc:	2010      	movs	r0, #16
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
	} else if ( port == GPIOC ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
	} else if ( port == GPIOD ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
	} else if ( port == GPIOE ) {
 80003be:	429c      	cmp	r4, r3
 80003c0:	d010      	beq.n	80003e4 <GPIOMode+0x4c>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
	} else if ( port == GPIOF ) {
 80003c2:	4b1a      	ldr	r3, [pc, #104]	; (800042c <GPIOMode+0x94>)
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 80003c4:	2020      	movs	r0, #32
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
	} else if ( port == GPIOD ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
	} else if ( port == GPIOE ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
	} else if ( port == GPIOF ) {
 80003c6:	429c      	cmp	r4, r3
 80003c8:	d00c      	beq.n	80003e4 <GPIOMode+0x4c>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOF, ENABLE);
	} else if ( port == GPIOG ) {
 80003ca:	4b19      	ldr	r3, [pc, #100]	; (8000430 <GPIOMode+0x98>)
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 80003cc:	2040      	movs	r0, #64	; 0x40
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
	} else if ( port == GPIOE ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
	} else if ( port == GPIOF ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOF, ENABLE);
	} else if ( port == GPIOG ) {
 80003ce:	429c      	cmp	r4, r3
 80003d0:	d008      	beq.n	80003e4 <GPIOMode+0x4c>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOG, ENABLE);
	} else if ( port == GPIOH ) {
 80003d2:	4b18      	ldr	r3, [pc, #96]	; (8000434 <GPIOMode+0x9c>)
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 80003d4:	2080      	movs	r0, #128	; 0x80
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
	} else if ( port == GPIOF ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOF, ENABLE);
	} else if ( port == GPIOG ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOG, ENABLE);
	} else if ( port == GPIOH ) {
 80003d6:	429c      	cmp	r4, r3
 80003d8:	d004      	beq.n	80003e4 <GPIOMode+0x4c>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOH, ENABLE);
	} else if ( port == GPIOI ) {
 80003da:	4b17      	ldr	r3, [pc, #92]	; (8000438 <GPIOMode+0xa0>)
 80003dc:	429c      	cmp	r4, r3
 80003de:	d103      	bne.n	80003e8 <GPIOMode+0x50>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 80003e0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80003e4:	2101      	movs	r1, #1
 80003e6:	e004      	b.n	80003f2 <GPIOMode+0x5a>
	} else if ( port == GPIOA ) {
 80003e8:	4b14      	ldr	r3, [pc, #80]	; (800043c <GPIOMode+0xa4>)
 80003ea:	429c      	cmp	r4, r3
 80003ec:	d103      	bne.n	80003f6 <GPIOMode+0x5e>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 80003ee:	2001      	movs	r0, #1
 80003f0:	4601      	mov	r1, r0
 80003f2:	f001 fa07 	bl	8001804 <RCC_AHB1PeriphClockCmd>

	GPIO_InitTypeDef GPIO_InitStructure;
        
	GPIO_InitStructure.GPIO_Pin = pinbit;
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = otype;
 80003f6:	f89d 3020 	ldrb.w	r3, [sp, #32]
	}
	// assumes port is already waked up.

	GPIO_InitTypeDef GPIO_InitStructure;
        
	GPIO_InitStructure.GPIO_Pin = pinbit;
 80003fa:	9700      	str	r7, [sp, #0]
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = otype;
 80003fc:	f88d 3006 	strb.w	r3, [sp, #6]
	GPIO_InitStructure.GPIO_PuPd = pupd;
 8000400:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
	// assumes port is already waked up.

	GPIO_InitTypeDef GPIO_InitStructure;
        
	GPIO_InitStructure.GPIO_Pin = pinbit;
	GPIO_InitStructure.GPIO_Mode = mode;
 8000404:	f88d 6004 	strb.w	r6, [sp, #4]
	GPIO_InitStructure.GPIO_OType = otype;
	GPIO_InitStructure.GPIO_PuPd = pupd;
	GPIO_InitStructure.GPIO_Speed = clk;
	//
	GPIO_Init(port, &GPIO_InitStructure);
 8000408:	4620      	mov	r0, r4
 800040a:	4669      	mov	r1, sp
	GPIO_InitTypeDef GPIO_InitStructure;
        
	GPIO_InitStructure.GPIO_Pin = pinbit;
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = otype;
	GPIO_InitStructure.GPIO_PuPd = pupd;
 800040c:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_InitStructure.GPIO_Speed = clk;
 8000410:	f88d 5005 	strb.w	r5, [sp, #5]
	//
	GPIO_Init(port, &GPIO_InitStructure);
 8000414:	f000 fe52 	bl	80010bc <GPIO_Init>
}
 8000418:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800041a:	bf00      	nop
 800041c:	40020400 	.word	0x40020400
 8000420:	40020800 	.word	0x40020800
 8000424:	40020c00 	.word	0x40020c00
 8000428:	40021000 	.word	0x40021000
 800042c:	40021400 	.word	0x40021400
 8000430:	40021800 	.word	0x40021800
 8000434:	40021c00 	.word	0x40021c00
 8000438:	40022000 	.word	0x40022000
 800043c:	40020000 	.word	0x40020000

08000440 <GPIOWrite>:


inline void GPIOWrite(GPIO_TypeDef * port, uint16_t bits) {
	GPIO_Write(port, bits);
 8000440:	f000 beb7 	b.w	80011b2 <GPIO_Write>

08000444 <i2c_begin>:
} CommDirection;

//I2C_Status i2c1_status;
//CommDirection i2c1_direction;

boolean i2c_begin(I2CBus * wirex, uint32_t clkspeed) {
 8000444:	b5f0      	push	{r4, r5, r6, r7, lr}
//	GPIO_InitTypeDef GPIO_InitStructure;
	I2C_InitTypeDef I2C_InitStructure;

	wirex->I2Cx = I2C1;
 8000446:	4b37      	ldr	r3, [pc, #220]	; (8000524 <i2c_begin+0xe0>)
 8000448:	6003      	str	r3, [r0, #0]
	wirex->sda = PB9;
 800044a:	f240 2309 	movw	r3, #521	; 0x209
} CommDirection;

//I2C_Status i2c1_status;
//CommDirection i2c1_direction;

boolean i2c_begin(I2CBus * wirex, uint32_t clkspeed) {
 800044e:	4604      	mov	r4, r0
//	GPIO_InitTypeDef GPIO_InitStructure;
	I2C_InitTypeDef I2C_InitStructure;

	wirex->I2Cx = I2C1;
	wirex->sda = PB9;
 8000450:	8083      	strh	r3, [r0, #4]
	wirex->scl = PB8;
 8000452:	f44f 7302 	mov.w	r3, #520	; 0x208
} CommDirection;

//I2C_Status i2c1_status;
//CommDirection i2c1_direction;

boolean i2c_begin(I2CBus * wirex, uint32_t clkspeed) {
 8000456:	b087      	sub	sp, #28
//	GPIO_InitTypeDef GPIO_InitStructure;
	I2C_InitTypeDef I2C_InitStructure;

	wirex->I2Cx = I2C1;
	wirex->sda = PB9;
	wirex->scl = PB8;
 8000458:	80c3      	strh	r3, [r0, #6]
} CommDirection;

//I2C_Status i2c1_status;
//CommDirection i2c1_direction;

boolean i2c_begin(I2CBus * wirex, uint32_t clkspeed) {
 800045a:	460d      	mov	r5, r1
	wirex->I2Cx = I2C1;
	wirex->sda = PB9;
	wirex->scl = PB8;

	/* I2C Periph clock enable */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE); //  RCC_APB1PeriphClockCmd(I2C1_RCC, ENABLE);
 800045c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000460:	2101      	movs	r1, #1
 8000462:	f001 f9f3 	bl	800184c <RCC_APB1PeriphClockCmd>
	/* GPIO Periph clock enable */
	//RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE); // PB5 (SMBA), PB6 (SCL), PB9 (SDA)  // RCC_APB2PeriphClockCmd(I2C1_GPIO_RCC, ENABLE);
	GPIOMode(PinPort(wirex->scl), PinBit(wirex->scl), GPIO_Mode_AF, GPIO_Speed_50MHz,
 8000466:	88e0      	ldrh	r0, [r4, #6]
 8000468:	f7ff ff24 	bl	80002b4 <PinPort>
 800046c:	4607      	mov	r7, r0
 800046e:	88e0      	ldrh	r0, [r4, #6]
 8000470:	f7ff ff28 	bl	80002c4 <PinBit>
 8000474:	2601      	movs	r6, #1
 8000476:	2202      	movs	r2, #2
 8000478:	4601      	mov	r1, r0
 800047a:	4613      	mov	r3, r2
 800047c:	4638      	mov	r0, r7
 800047e:	9600      	str	r6, [sp, #0]
 8000480:	9601      	str	r6, [sp, #4]
 8000482:	f7ff ff89 	bl	8000398 <GPIOMode>
			GPIO_OType_OD, GPIO_PuPd_UP);
	GPIOMode(PinPort(wirex->sda), PinBit(wirex->sda), GPIO_Mode_AF, GPIO_Speed_50MHz,
 8000486:	88a0      	ldrh	r0, [r4, #4]
 8000488:	f7ff ff14 	bl	80002b4 <PinPort>
 800048c:	4607      	mov	r7, r0
 800048e:	88a0      	ldrh	r0, [r4, #4]
 8000490:	f7ff ff18 	bl	80002c4 <PinBit>
 8000494:	2202      	movs	r2, #2
 8000496:	4613      	mov	r3, r2
 8000498:	4601      	mov	r1, r0
 800049a:	9600      	str	r6, [sp, #0]
 800049c:	9601      	str	r6, [sp, #4]
 800049e:	4638      	mov	r0, r7
 80004a0:	f7ff ff7a 	bl	8000398 <GPIOMode>
			GPIO_OType_OD, GPIO_PuPd_UP);

	/* Configure I2C pins: SCL and SDA */
	GPIO_PinAFConfig(PinPort(wirex->scl), PinSource(wirex->scl), GPIO_AF_I2C1 );
 80004a4:	88e0      	ldrh	r0, [r4, #6]
 80004a6:	f7ff ff05 	bl	80002b4 <PinPort>
 80004aa:	4606      	mov	r6, r0
 80004ac:	88e0      	ldrh	r0, [r4, #6]
 80004ae:	f7ff ff10 	bl	80002d2 <PinSource>
 80004b2:	2204      	movs	r2, #4
 80004b4:	4601      	mov	r1, r0
 80004b6:	4630      	mov	r0, r6
 80004b8:	f000 fe81 	bl	80011be <GPIO_PinAFConfig>
	GPIO_PinAFConfig(PinPort(wirex->sda), PinSource(wirex->sda), GPIO_AF_I2C1 );
 80004bc:	88a0      	ldrh	r0, [r4, #4]
 80004be:	f7ff fef9 	bl	80002b4 <PinPort>
 80004c2:	4606      	mov	r6, r0
 80004c4:	88a0      	ldrh	r0, [r4, #4]
 80004c6:	f7ff ff04 	bl	80002d2 <PinSource>
 80004ca:	2204      	movs	r2, #4
 80004cc:	4601      	mov	r1, r0
 80004ce:	4630      	mov	r0, r6
 80004d0:	f000 fe75 	bl	80011be <GPIO_PinAFConfig>

	//#if defined (REMAP_I2C1)
//Remap_I2C1_Configuration();
//#endif
	switch (clkspeed) {
 80004d4:	4b14      	ldr	r3, [pc, #80]	; (8000528 <i2c_begin+0xe4>)
 80004d6:	429d      	cmp	r5, r3
 80004d8:	d004      	beq.n	80004e4 <i2c_begin+0xa0>
 80004da:	4a14      	ldr	r2, [pc, #80]	; (800052c <i2c_begin+0xe8>)
	case 100000:
	case 400000:
		break;
	default:
		clkspeed = 100000;
 80004dc:	4295      	cmp	r5, r2
 80004de:	bf0c      	ite	eq
 80004e0:	4615      	moveq	r5, r2
 80004e2:	461d      	movne	r5, r3
		break;
	}
	/* I2C configuration */
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 80004e4:	2300      	movs	r3, #0
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
	I2C_InitStructure.I2C_ClockSpeed = clkspeed;
 80004e6:	a906      	add	r1, sp, #24
	default:
		clkspeed = 100000;
		break;
	}
	/* I2C configuration */
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 80004e8:	461e      	mov	r6, r3
 80004ea:	f8ad 300c 	strh.w	r3, [sp, #12]
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
 80004ee:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 80004f2:	f8ad 300e 	strh.w	r3, [sp, #14]
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 80004f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004fa:	f8ad 3012 	strh.w	r3, [sp, #18]
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
	I2C_InitStructure.I2C_ClockSpeed = clkspeed;
 80004fe:	f841 5d10 	str.w	r5, [r1, #-16]!
	}
	/* I2C configuration */
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8000502:	f44f 4380 	mov.w	r3, #16384	; 0x4000
	I2C_InitStructure.I2C_ClockSpeed = clkspeed;

	/* Apply I2C configuration after enabling it */
	I2C_Init(wirex->I2Cx, &I2C_InitStructure);
 8000506:	6820      	ldr	r0, [r4, #0]
	}
	/* I2C configuration */
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8000508:	f8ad 3014 	strh.w	r3, [sp, #20]
	I2C_InitStructure.I2C_ClockSpeed = clkspeed;

	/* Apply I2C configuration after enabling it */
	I2C_Init(wirex->I2Cx, &I2C_InitStructure);
 800050c:	f000 fe9c 	bl	8001248 <I2C_Init>
	/* I2C Peripheral Enable */
	I2C_Cmd(wirex->I2Cx, ENABLE);
 8000510:	6820      	ldr	r0, [r4, #0]
 8000512:	2101      	movs	r1, #1
 8000514:	f000 ff0a 	bl	800132c <I2C_Cmd>

	wirex->status = NOT_READY;
 8000518:	20ff      	movs	r0, #255	; 0xff
 800051a:	7260      	strb	r0, [r4, #9]
	wirex->mode = I2C_MODE_NOTDEFINED;
 800051c:	72a6      	strb	r6, [r4, #10]

	return true;
}
 800051e:	b007      	add	sp, #28
 8000520:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000522:	bf00      	nop
 8000524:	40005400 	.word	0x40005400
 8000528:	000186a0 	.word	0x000186a0
 800052c:	00061a80 	.word	0x00061a80

08000530 <i2c_start>:
}

boolean i2c_start(I2CBus * wirex, uint8_t addr) {
	uint16_t wc;
	//
	wirex->status = NOT_READY;
 8000530:	23ff      	movs	r3, #255	; 0xff
	wirex->mode = I2C_MODE_NOTDEFINED;

	return true;
}

boolean i2c_start(I2CBus * wirex, uint8_t addr) {
 8000532:	b570      	push	{r4, r5, r6, lr}
 8000534:	4604      	mov	r4, r0
 8000536:	460e      	mov	r6, r1
	uint16_t wc;
	//
	wirex->status = NOT_READY;
 8000538:	7243      	strb	r3, [r0, #9]
	for(wc = 5; I2C_GetFlagStatus(wirex->I2Cx, I2C_FLAG_BUSY ); wc--) {
 800053a:	2506      	movs	r5, #6
 800053c:	e008      	b.n	8000550 <i2c_start+0x20>
 800053e:	3d01      	subs	r5, #1
 8000540:	b2ad      	uxth	r5, r5
		if (wc == 0)
 8000542:	b90d      	cbnz	r5, 8000548 <i2c_start+0x18>
			return false;
 8000544:	2000      	movs	r0, #0
 8000546:	bd70      	pop	{r4, r5, r6, pc}
		delay_us(667);
 8000548:	f240 209b 	movw	r0, #667	; 0x29b
 800054c:	f7ff fe86 	bl	800025c <delay_us>

boolean i2c_start(I2CBus * wirex, uint8_t addr) {
	uint16_t wc;
	//
	wirex->status = NOT_READY;
	for(wc = 5; I2C_GetFlagStatus(wirex->I2Cx, I2C_FLAG_BUSY ); wc--) {
 8000550:	6820      	ldr	r0, [r4, #0]
 8000552:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8000556:	f000 ffff 	bl	8001558 <I2C_GetFlagStatus>
 800055a:	2800      	cmp	r0, #0
 800055c:	d1ef      	bne.n	800053e <i2c_start+0xe>
		if (wc == 0)
			return false;
		delay_us(667);
	}
	wirex->status = READY;
 800055e:	7260      	strb	r0, [r4, #9]

	/* Send STRAT condition */
	I2C_GenerateSTART(wirex->I2Cx, ENABLE);
 8000560:	2101      	movs	r1, #1
 8000562:	6820      	ldr	r0, [r4, #0]
 8000564:	f000 feee 	bl	8001344 <I2C_GenerateSTART>
	/* Test on EV5 and clear it */
	for (wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_MODE_SELECT ); wc--) {
 8000568:	2506      	movs	r5, #6
 800056a:	e007      	b.n	800057c <i2c_start+0x4c>
 800056c:	3d01      	subs	r5, #1
 800056e:	b2ad      	uxth	r5, r5
		if (wc == 0)
 8000570:	2d00      	cmp	r5, #0
 8000572:	d0e7      	beq.n	8000544 <i2c_start+0x14>
			return false;
		delay_us(667);
 8000574:	f240 209b 	movw	r0, #667	; 0x29b
 8000578:	f7ff fe70 	bl	800025c <delay_us>
	wirex->status = READY;

	/* Send STRAT condition */
	I2C_GenerateSTART(wirex->I2Cx, ENABLE);
	/* Test on EV5 and clear it */
	for (wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_MODE_SELECT ); wc--) {
 800057c:	6820      	ldr	r0, [r4, #0]
 800057e:	4911      	ldr	r1, [pc, #68]	; (80005c4 <i2c_start+0x94>)
 8000580:	f000 ffd6 	bl	8001530 <I2C_CheckEvent>
 8000584:	2800      	cmp	r0, #0
 8000586:	d0f1      	beq.n	800056c <i2c_start+0x3c>
		if (wc == 0)
			return false;
		delay_us(667);
	}
	wirex->status = START_ISSUED;
 8000588:	2301      	movs	r3, #1

	/* Send address for write */
	I2C_Send7bitAddress(wirex->I2Cx, addr << 1, I2C_Direction_Transmitter);
 800058a:	fa06 f103 	lsl.w	r1, r6, r3
	for (wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_MODE_SELECT ); wc--) {
		if (wc == 0)
			return false;
		delay_us(667);
	}
	wirex->status = START_ISSUED;
 800058e:	7263      	strb	r3, [r4, #9]

	/* Send address for write */
	I2C_Send7bitAddress(wirex->I2Cx, addr << 1, I2C_Direction_Transmitter);
 8000590:	6820      	ldr	r0, [r4, #0]
 8000592:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 8000596:	2200      	movs	r2, #0
 8000598:	f000 feec 	bl	8001374 <I2C_Send7bitAddress>
 800059c:	2506      	movs	r5, #6
 800059e:	e007      	b.n	80005b0 <i2c_start+0x80>
 80005a0:	3d01      	subs	r5, #1
 80005a2:	b2ad      	uxth	r5, r5
	/* Test on EV6 and clear it */
	for (wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED ); wc--) {
		if (wc == 0)
 80005a4:	2d00      	cmp	r5, #0
 80005a6:	d0cd      	beq.n	8000544 <i2c_start+0x14>
			return false;
		delay_us(667);
 80005a8:	f240 209b 	movw	r0, #667	; 0x29b
 80005ac:	f7ff fe56 	bl	800025c <delay_us>
	wirex->status = START_ISSUED;

	/* Send address for write */
	I2C_Send7bitAddress(wirex->I2Cx, addr << 1, I2C_Direction_Transmitter);
	/* Test on EV6 and clear it */
	for (wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED ); wc--) {
 80005b0:	6820      	ldr	r0, [r4, #0]
 80005b2:	4905      	ldr	r1, [pc, #20]	; (80005c8 <i2c_start+0x98>)
 80005b4:	f000 ffbc 	bl	8001530 <I2C_CheckEvent>
 80005b8:	2800      	cmp	r0, #0
 80005ba:	d0f1      	beq.n	80005a0 <i2c_start+0x70>
		if (wc == 0)
			return false;
		delay_us(667);
	}
	wirex->status = DST_ADDRESS_SENT;
 80005bc:	2302      	movs	r3, #2
 80005be:	7263      	strb	r3, [r4, #9]
	return true;
 80005c0:	20ff      	movs	r0, #255	; 0xff
 80005c2:	bd70      	pop	{r4, r5, r6, pc}
 80005c4:	00030001 	.word	0x00030001
 80005c8:	00070082 	.word	0x00070082

080005cc <i2c_receive>:
	wirex->mode = I2C_MODE_NOTDEFINED;

	return true;
}

boolean i2c_receive(I2CBus * wirex, uint8_t addr, uint8_t req, uint8_t * recv, uint16_t lim) {
 80005cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80005d0:	461d      	mov	r5, r3
	uint16_t i;
	uint16_t wc;

	wirex->mode = I2C_MODE_MASTERRECEIVER;
 80005d2:	2302      	movs	r3, #2
 80005d4:	7283      	strb	r3, [r0, #10]
	wirex->mode = I2C_MODE_NOTDEFINED;

	return true;
}

boolean i2c_receive(I2CBus * wirex, uint8_t addr, uint8_t req, uint8_t * recv, uint16_t lim) {
 80005d6:	4604      	mov	r4, r0
 80005d8:	4688      	mov	r8, r1
 80005da:	4616      	mov	r6, r2
 80005dc:	f8bd 7018 	ldrh.w	r7, [sp, #24]
	uint16_t i;
	uint16_t wc;

	wirex->mode = I2C_MODE_MASTERRECEIVER;
	//
	if ( !i2c_start(wirex, addr) )
 80005e0:	f7ff ffa6 	bl	8000530 <i2c_start>
 80005e4:	b910      	cbnz	r0, 80005ec <i2c_receive+0x20>
		return false;
 80005e6:	2000      	movs	r0, #0
 80005e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	/* Send the EEPROM's internal address to read from: MSB of the address first */
	I2C_SendData(wirex->I2Cx, req);
 80005ec:	4631      	mov	r1, r6
 80005ee:	6820      	ldr	r0, [r4, #0]
 80005f0:	f000 ff42 	bl	8001478 <I2C_SendData>
	wirex->status = BYTE_TRANSMITTING;
 80005f4:	2304      	movs	r3, #4
 80005f6:	7263      	strb	r3, [r4, #9]
	/* Test on EV8 and clear it */

	for (wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED ); wc--) {
 80005f8:	2606      	movs	r6, #6
 80005fa:	e007      	b.n	800060c <i2c_receive+0x40>
 80005fc:	3e01      	subs	r6, #1
 80005fe:	b2b6      	uxth	r6, r6
		if (wc == 0)
 8000600:	2e00      	cmp	r6, #0
 8000602:	d0f0      	beq.n	80005e6 <i2c_receive+0x1a>
			return false;
		delay_us(667);
 8000604:	f240 209b 	movw	r0, #667	; 0x29b
 8000608:	f7ff fe28 	bl	800025c <delay_us>
	/* Send the EEPROM's internal address to read from: MSB of the address first */
	I2C_SendData(wirex->I2Cx, req);
	wirex->status = BYTE_TRANSMITTING;
	/* Test on EV8 and clear it */

	for (wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED ); wc--) {
 800060c:	6820      	ldr	r0, [r4, #0]
 800060e:	4941      	ldr	r1, [pc, #260]	; (8000714 <i2c_receive+0x148>)
 8000610:	f000 ff8e 	bl	8001530 <I2C_CheckEvent>
 8000614:	2800      	cmp	r0, #0
 8000616:	d0f1      	beq.n	80005fc <i2c_receive+0x30>
		if (wc == 0)
			return false;
		delay_us(667);
	}
	wirex->status = TRANSMISSION_COMPLETED;
 8000618:	2606      	movs	r6, #6
 800061a:	7266      	strb	r6, [r4, #9]

	/* Send STRAT condition a second time */
	I2C_GenerateSTART(wirex->I2Cx, ENABLE);
 800061c:	6820      	ldr	r0, [r4, #0]
 800061e:	2101      	movs	r1, #1
 8000620:	f000 fe90 	bl	8001344 <I2C_GenerateSTART>
	/* Test on EV5 and clear it */
	for (wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_MODE_SELECT ); wc--) {
 8000624:	e007      	b.n	8000636 <i2c_receive+0x6a>
 8000626:	3e01      	subs	r6, #1
 8000628:	b2b6      	uxth	r6, r6
		if (wc == 0)
 800062a:	2e00      	cmp	r6, #0
 800062c:	d0db      	beq.n	80005e6 <i2c_receive+0x1a>
			return false;
		delay_us(667);
 800062e:	f240 209b 	movw	r0, #667	; 0x29b
 8000632:	f7ff fe13 	bl	800025c <delay_us>
	wirex->status = TRANSMISSION_COMPLETED;

	/* Send STRAT condition a second time */
	I2C_GenerateSTART(wirex->I2Cx, ENABLE);
	/* Test on EV5 and clear it */
	for (wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_MODE_SELECT ); wc--) {
 8000636:	6820      	ldr	r0, [r4, #0]
 8000638:	4937      	ldr	r1, [pc, #220]	; (8000718 <i2c_receive+0x14c>)
 800063a:	f000 ff79 	bl	8001530 <I2C_CheckEvent>
 800063e:	2800      	cmp	r0, #0
 8000640:	d0f1      	beq.n	8000626 <i2c_receive+0x5a>
		if (wc == 0)
			return false;
		delay_us(667);
	}
	wirex->status = RESTART_ISSUED;
 8000642:	2307      	movs	r3, #7

	/* Send EEPROM address for read */
	I2C_Send7bitAddress(wirex->I2Cx, addr << 1, I2C_Direction_Receiver );
 8000644:	ea4f 0148 	mov.w	r1, r8, lsl #1
	for (wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_MODE_SELECT ); wc--) {
		if (wc == 0)
			return false;
		delay_us(667);
	}
	wirex->status = RESTART_ISSUED;
 8000648:	7263      	strb	r3, [r4, #9]

	/* Send EEPROM address for read */
	I2C_Send7bitAddress(wirex->I2Cx, addr << 1, I2C_Direction_Receiver );
 800064a:	6820      	ldr	r0, [r4, #0]
 800064c:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 8000650:	2201      	movs	r2, #1
 8000652:	f000 fe8f 	bl	8001374 <I2C_Send7bitAddress>
	/* Test on EV6 and clear it */
	for (wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED ); wc--) {
 8000656:	2606      	movs	r6, #6
 8000658:	e007      	b.n	800066a <i2c_receive+0x9e>
 800065a:	3e01      	subs	r6, #1
 800065c:	b2b6      	uxth	r6, r6
		if (wc == 0)
 800065e:	2e00      	cmp	r6, #0
 8000660:	d0c1      	beq.n	80005e6 <i2c_receive+0x1a>
			return false;
		delay_us(667);
 8000662:	f240 209b 	movw	r0, #667	; 0x29b
 8000666:	f7ff fdf9 	bl	800025c <delay_us>
	wirex->status = RESTART_ISSUED;

	/* Send EEPROM address for read */
	I2C_Send7bitAddress(wirex->I2Cx, addr << 1, I2C_Direction_Receiver );
	/* Test on EV6 and clear it */
	for (wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED ); wc--) {
 800066a:	6820      	ldr	r0, [r4, #0]
 800066c:	492b      	ldr	r1, [pc, #172]	; (800071c <i2c_receive+0x150>)
 800066e:	f000 ff5f 	bl	8001530 <I2C_CheckEvent>
 8000672:	2800      	cmp	r0, #0
 8000674:	d0f1      	beq.n	800065a <i2c_receive+0x8e>
		if (wc == 0)
			return false;
		delay_us(667);
	}
	wirex->status = SRC_ADDRESS_SENT;
 8000676:	2303      	movs	r3, #3
 8000678:	7263      	strb	r3, [r4, #9]
	wirex->mode = I2C_MODE_NOTDEFINED;

	return true;
}

boolean i2c_receive(I2CBus * wirex, uint8_t addr, uint8_t req, uint8_t * recv, uint16_t lim) {
 800067a:	f1c5 0801 	rsb	r8, r5, #1
		if (wc == 0)
			return false;
		delay_us(667);
	}
	wirex->status = SRC_ADDRESS_SENT;
	for (i = 1; i < lim; i++) {
 800067e:	e018      	b.n	80006b2 <i2c_receive+0xe6>
		wirex->status = RECEIVE_BYTE_READY;
 8000680:	2308      	movs	r3, #8
 8000682:	7263      	strb	r3, [r4, #9]
		for(wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED ); wc--) {
 8000684:	2606      	movs	r6, #6
 8000686:	e007      	b.n	8000698 <i2c_receive+0xcc>
 8000688:	3e01      	subs	r6, #1
 800068a:	b2b6      	uxth	r6, r6
			if (wc == 0)
 800068c:	2e00      	cmp	r6, #0
 800068e:	d0aa      	beq.n	80005e6 <i2c_receive+0x1a>
				return false;
			delay_us(667);
 8000690:	f240 209b 	movw	r0, #667	; 0x29b
 8000694:	f7ff fde2 	bl	800025c <delay_us>
		delay_us(667);
	}
	wirex->status = SRC_ADDRESS_SENT;
	for (i = 1; i < lim; i++) {
		wirex->status = RECEIVE_BYTE_READY;
		for(wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED ); wc--) {
 8000698:	6820      	ldr	r0, [r4, #0]
 800069a:	4921      	ldr	r1, [pc, #132]	; (8000720 <i2c_receive+0x154>)
 800069c:	f000 ff48 	bl	8001530 <I2C_CheckEvent>
 80006a0:	2800      	cmp	r0, #0
 80006a2:	d0f1      	beq.n	8000688 <i2c_receive+0xbc>
				return false;
			delay_us(667);

		}
		/* Read a byte from the EEPROM */
		*recv++ = I2C_ReceiveData(wirex->I2Cx );
 80006a4:	6820      	ldr	r0, [r4, #0]
 80006a6:	f000 fee9 	bl	800147c <I2C_ReceiveData>
		wirex->status = BYTE_RECEIVED;
 80006aa:	2309      	movs	r3, #9
				return false;
			delay_us(667);

		}
		/* Read a byte from the EEPROM */
		*recv++ = I2C_ReceiveData(wirex->I2Cx );
 80006ac:	f805 0b01 	strb.w	r0, [r5], #1
		wirex->status = BYTE_RECEIVED;
 80006b0:	7263      	strb	r3, [r4, #9]
		if (wc == 0)
			return false;
		delay_us(667);
	}
	wirex->status = SRC_ADDRESS_SENT;
	for (i = 1; i < lim; i++) {
 80006b2:	eb08 0305 	add.w	r3, r8, r5
 80006b6:	b29b      	uxth	r3, r3
 80006b8:	42bb      	cmp	r3, r7
 80006ba:	d3e1      	bcc.n	8000680 <i2c_receive+0xb4>
		}
		/* Read a byte from the EEPROM */
		*recv++ = I2C_ReceiveData(wirex->I2Cx );
		wirex->status = BYTE_RECEIVED;
	}
	wirex->status = BEFORELAST_BYTE_RECEIVED;
 80006bc:	230a      	movs	r3, #10
 80006be:	7263      	strb	r3, [r4, #9]

	/* Disable Acknowledgement */
	I2C_AcknowledgeConfig(wirex->I2Cx, DISABLE);
 80006c0:	6820      	ldr	r0, [r4, #0]
 80006c2:	2100      	movs	r1, #0
 80006c4:	f000 fe5e 	bl	8001384 <I2C_AcknowledgeConfig>
	/* Send STOP Condition */
	I2C_GenerateSTOP(wirex->I2Cx, ENABLE);
 80006c8:	6820      	ldr	r0, [r4, #0]
 80006ca:	2101      	movs	r1, #1
 80006cc:	f000 fe46 	bl	800135c <I2C_GenerateSTOP>
	wirex->status = LAST_BYTE_READY;
 80006d0:	230b      	movs	r3, #11
 80006d2:	7263      	strb	r3, [r4, #9]

	for(wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED ); wc--) {
 80006d4:	2606      	movs	r6, #6
 80006d6:	e007      	b.n	80006e8 <i2c_receive+0x11c>
 80006d8:	3e01      	subs	r6, #1
 80006da:	b2b6      	uxth	r6, r6
		if (wc == 0)
 80006dc:	2e00      	cmp	r6, #0
 80006de:	d082      	beq.n	80005e6 <i2c_receive+0x1a>
			return false;
		delay_us(667);
 80006e0:	f240 209b 	movw	r0, #667	; 0x29b
 80006e4:	f7ff fdba 	bl	800025c <delay_us>
	I2C_AcknowledgeConfig(wirex->I2Cx, DISABLE);
	/* Send STOP Condition */
	I2C_GenerateSTOP(wirex->I2Cx, ENABLE);
	wirex->status = LAST_BYTE_READY;

	for(wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED ); wc--) {
 80006e8:	6820      	ldr	r0, [r4, #0]
 80006ea:	490d      	ldr	r1, [pc, #52]	; (8000720 <i2c_receive+0x154>)
 80006ec:	f000 ff20 	bl	8001530 <I2C_CheckEvent>
 80006f0:	2800      	cmp	r0, #0
 80006f2:	d0f1      	beq.n	80006d8 <i2c_receive+0x10c>
		if (wc == 0)
			return false;
		delay_us(667);
	}
	/* Read a byte from the EEPROM */
	*recv = I2C_ReceiveData(wirex->I2Cx );
 80006f4:	6820      	ldr	r0, [r4, #0]
 80006f6:	f000 fec1 	bl	800147c <I2C_ReceiveData>
	wirex->status = RECEIVE_BYTE_COMPLETED;
 80006fa:	230c      	movs	r3, #12
		if (wc == 0)
			return false;
		delay_us(667);
	}
	/* Read a byte from the EEPROM */
	*recv = I2C_ReceiveData(wirex->I2Cx );
 80006fc:	7028      	strb	r0, [r5, #0]
	wirex->status = RECEIVE_BYTE_COMPLETED;

	/* Enable Acknowledgement to be ready for another reception */
	I2C_AcknowledgeConfig(wirex->I2Cx, ENABLE);
 80006fe:	6820      	ldr	r0, [r4, #0]
			return false;
		delay_us(667);
	}
	/* Read a byte from the EEPROM */
	*recv = I2C_ReceiveData(wirex->I2Cx );
	wirex->status = RECEIVE_BYTE_COMPLETED;
 8000700:	7263      	strb	r3, [r4, #9]

	/* Enable Acknowledgement to be ready for another reception */
	I2C_AcknowledgeConfig(wirex->I2Cx, ENABLE);
 8000702:	2101      	movs	r1, #1
 8000704:	f000 fe3e 	bl	8001384 <I2C_AcknowledgeConfig>
	wirex->status = NOT_READY;
 8000708:	20ff      	movs	r0, #255	; 0xff
	wirex->mode = I2C_MODE_NOTDEFINED;
 800070a:	2300      	movs	r3, #0
	*recv = I2C_ReceiveData(wirex->I2Cx );
	wirex->status = RECEIVE_BYTE_COMPLETED;

	/* Enable Acknowledgement to be ready for another reception */
	I2C_AcknowledgeConfig(wirex->I2Cx, ENABLE);
	wirex->status = NOT_READY;
 800070c:	7260      	strb	r0, [r4, #9]
	wirex->mode = I2C_MODE_NOTDEFINED;
 800070e:	72a3      	strb	r3, [r4, #10]

	return true;
}
 8000710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000714:	00070084 	.word	0x00070084
 8000718:	00030001 	.word	0x00030001
 800071c:	00030002 	.word	0x00030002
 8000720:	00030040 	.word	0x00030040

08000724 <i2c_transmit>:
	wirex->mode = I2C_MODE_NOTDEFINED;

	return true;
}

boolean i2c_transmit(I2CBus * wirex, uint8_t addr, uint8_t * data, uint16_t length) {
 8000724:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000728:	461f      	mov	r7, r3
	uint16_t i;
	uint16_t wc;

	wirex->mode = I2C_MODE_MASTERTRANSMITTER;
 800072a:	2301      	movs	r3, #1
 800072c:	7283      	strb	r3, [r0, #10]
	wirex->mode = I2C_MODE_NOTDEFINED;

	return true;
}

boolean i2c_transmit(I2CBus * wirex, uint8_t addr, uint8_t * data, uint16_t length) {
 800072e:	4604      	mov	r4, r0
 8000730:	4690      	mov	r8, r2
	uint16_t i;
	uint16_t wc;

	wirex->mode = I2C_MODE_MASTERTRANSMITTER;
	//
	if ( !i2c_start(wirex, addr) )
 8000732:	f7ff fefd 	bl	8000530 <i2c_start>
 8000736:	b9e8      	cbnz	r0, 8000774 <i2c_transmit+0x50>
		return false;
 8000738:	2000      	movs	r0, #0
 800073a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

	for (i=0; i<length; i++ ) {
		I2C_SendData(wirex->I2Cx, data[i]);
 800073e:	6820      	ldr	r0, [r4, #0]
 8000740:	f818 1005 	ldrb.w	r1, [r8, r5]
 8000744:	f000 fe98 	bl	8001478 <I2C_SendData>
		wirex->status = BYTE_TRANSMITTING;
		// Test on EV8 and clear it
		for(wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED); wc--) {
 8000748:	2606      	movs	r6, #6
	if ( !i2c_start(wirex, addr) )
		return false;

	for (i=0; i<length; i++ ) {
		I2C_SendData(wirex->I2Cx, data[i]);
		wirex->status = BYTE_TRANSMITTING;
 800074a:	f884 9009 	strb.w	r9, [r4, #9]
		// Test on EV8 and clear it
		for(wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED); wc--) {
 800074e:	e007      	b.n	8000760 <i2c_transmit+0x3c>
 8000750:	3e01      	subs	r6, #1
 8000752:	b2b6      	uxth	r6, r6
			if (wc == 0)
 8000754:	2e00      	cmp	r6, #0
 8000756:	d0ef      	beq.n	8000738 <i2c_transmit+0x14>
				return false;
			delay_us(667);
 8000758:	f240 209b 	movw	r0, #667	; 0x29b
 800075c:	f7ff fd7e 	bl	800025c <delay_us>

	for (i=0; i<length; i++ ) {
		I2C_SendData(wirex->I2Cx, data[i]);
		wirex->status = BYTE_TRANSMITTING;
		// Test on EV8 and clear it
		for(wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED); wc--) {
 8000760:	6820      	ldr	r0, [r4, #0]
 8000762:	490d      	ldr	r1, [pc, #52]	; (8000798 <i2c_transmit+0x74>)
 8000764:	f000 fee4 	bl	8001530 <I2C_CheckEvent>
 8000768:	2800      	cmp	r0, #0
 800076a:	d0f1      	beq.n	8000750 <i2c_transmit+0x2c>
			if (wc == 0)
				return false;
			delay_us(667);
		}
		wirex->status = BYTE_TRANSMITTED;
 800076c:	2305      	movs	r3, #5
 800076e:	7263      	strb	r3, [r4, #9]
 8000770:	3501      	adds	r5, #1
 8000772:	e002      	b.n	800077a <i2c_transmit+0x56>
	uint16_t i;
	uint16_t wc;

	wirex->mode = I2C_MODE_MASTERTRANSMITTER;
	//
	if ( !i2c_start(wirex, addr) )
 8000774:	2500      	movs	r5, #0
		return false;

	for (i=0; i<length; i++ ) {
		I2C_SendData(wirex->I2Cx, data[i]);
		wirex->status = BYTE_TRANSMITTING;
 8000776:	f04f 0904 	mov.w	r9, #4
	wirex->mode = I2C_MODE_MASTERTRANSMITTER;
	//
	if ( !i2c_start(wirex, addr) )
		return false;

	for (i=0; i<length; i++ ) {
 800077a:	b2ab      	uxth	r3, r5
 800077c:	42bb      	cmp	r3, r7
 800077e:	d3de      	bcc.n	800073e <i2c_transmit+0x1a>
			delay_us(667);
		}
		wirex->status = BYTE_TRANSMITTED;
	}

	wirex->status = TRANSMISSION_COMPLETED;
 8000780:	2306      	movs	r3, #6
 8000782:	7263      	strb	r3, [r4, #9]

	// generate stop condition
	I2C_GenerateSTOP(wirex->I2Cx, ENABLE);
 8000784:	6820      	ldr	r0, [r4, #0]
 8000786:	2101      	movs	r1, #1
 8000788:	f000 fde8 	bl	800135c <I2C_GenerateSTOP>
	wirex->status = NOT_READY;
 800078c:	20ff      	movs	r0, #255	; 0xff
	wirex->mode = I2C_MODE_NOTDEFINED;
 800078e:	2300      	movs	r3, #0

	wirex->status = TRANSMISSION_COMPLETED;

	// generate stop condition
	I2C_GenerateSTOP(wirex->I2Cx, ENABLE);
	wirex->status = NOT_READY;
 8000790:	7260      	strb	r0, [r4, #9]
	wirex->mode = I2C_MODE_NOTDEFINED;
 8000792:	72a3      	strb	r3, [r4, #10]

	return true;
}
 8000794:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000798:	00070084 	.word	0x00070084

0800079c <spi_begin>:
#include "spi.h"

//SPI_TypeDef * spix[] = { SPI1, SPI2, SPI3 };

void spi_begin(SPI_TypeDef * SPIx, GPIOPin sck, GPIOPin miso, GPIOPin mosi,
		GPIOPin nss) {
 800079c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80007a0:	4698      	mov	r8, r3
//	GPIOPin sck, miso, mosi, nss;

	/* PCLK2 = HCLK/2 */
	//RCC_PCLK2Config(RCC_HCLK_Div2);
//	SPIx = spix[spibus];
	if (SPIx == SPI1) {
 80007a2:	4b57      	ldr	r3, [pc, #348]	; (8000900 <spi_begin+0x164>)
#include "spi.h"

//SPI_TypeDef * spix[] = { SPI1, SPI2, SPI3 };

void spi_begin(SPI_TypeDef * SPIx, GPIOPin sck, GPIOPin miso, GPIOPin mosi,
		GPIOPin nss) {
 80007a4:	b08b      	sub	sp, #44	; 0x2c
//	GPIOPin sck, miso, mosi, nss;

	/* PCLK2 = HCLK/2 */
	//RCC_PCLK2Config(RCC_HCLK_Div2);
//	SPIx = spix[spibus];
	if (SPIx == SPI1) {
 80007a6:	4298      	cmp	r0, r3
#include "spi.h"

//SPI_TypeDef * spix[] = { SPI1, SPI2, SPI3 };

void spi_begin(SPI_TypeDef * SPIx, GPIOPin sck, GPIOPin miso, GPIOPin mosi,
		GPIOPin nss) {
 80007a8:	4607      	mov	r7, r0
 80007aa:	468a      	mov	sl, r1
 80007ac:	4691      	mov	r9, r2
 80007ae:	f8bd b050 	ldrh.w	fp, [sp, #80]	; 0x50
//	GPIOPin sck, miso, mosi, nss;

	/* PCLK2 = HCLK/2 */
	//RCC_PCLK2Config(RCC_HCLK_Div2);
//	SPIx = spix[spibus];
	if (SPIx == SPI1) {
 80007b2:	d105      	bne.n	80007c0 <spi_begin+0x24>
//	case SPI1Bus:
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
 80007b4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80007b8:	2101      	movs	r1, #1
 80007ba:	f001 f853 	bl	8001864 <RCC_APB2PeriphClockCmd>
 80007be:	e007      	b.n	80007d0 <spi_begin+0x34>
//		 sck = PA5; // PB3
//		 miso = PA6; // PB4
//		 mosi = PA7; // PB5
//		 nss = PA4; // PA15
//		break;
	} else if ( SPIx == SPI2 ) {
 80007c0:	4b50      	ldr	r3, [pc, #320]	; (8000904 <spi_begin+0x168>)
 80007c2:	4298      	cmp	r0, r3
 80007c4:	d106      	bne.n	80007d4 <spi_begin+0x38>
//	case SPI2Bus:
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE);
 80007c6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80007ca:	2101      	movs	r1, #1
 80007cc:	f001 f83e 	bl	800184c <RCC_APB1PeriphClockCmd>
		af = GPIO_AF_SPI2;
 80007d0:	2605      	movs	r6, #5
 80007d2:	e005      	b.n	80007e0 <spi_begin+0x44>
		// PB12, 13, 14, 15
//		break;
	} else {
//	case SPI3Bus:
//	default:
		RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 80007d4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80007d8:	2101      	movs	r1, #1
 80007da:	f001 f873 	bl	80018c4 <RCC_APB1PeriphResetCmd>
		af = GPIO_AF_SPI3;
 80007de:	2606      	movs	r6, #6
//		 mosi = PB5;
//		 nss = PA15; // PA4;
//		break;
	}

	GPIOMode(PinPort(sck), PinBit(sck), GPIO_Mode_AF, GPIO_Speed_25MHz,
 80007e0:	4650      	mov	r0, sl
 80007e2:	f7ff fd67 	bl	80002b4 <PinPort>
 80007e6:	4603      	mov	r3, r0
 80007e8:	4650      	mov	r0, sl
 80007ea:	9303      	str	r3, [sp, #12]
 80007ec:	f7ff fd6a 	bl	80002c4 <PinBit>
 80007f0:	9b03      	ldr	r3, [sp, #12]
 80007f2:	2401      	movs	r4, #1
 80007f4:	2500      	movs	r5, #0
 80007f6:	4601      	mov	r1, r0
 80007f8:	2202      	movs	r2, #2
 80007fa:	4618      	mov	r0, r3
 80007fc:	9500      	str	r5, [sp, #0]
 80007fe:	4623      	mov	r3, r4
 8000800:	9401      	str	r4, [sp, #4]
 8000802:	f7ff fdc9 	bl	8000398 <GPIOMode>
			GPIO_OType_PP, GPIO_PuPd_UP);
	GPIOMode(PinPort(miso), PinBit(miso), GPIO_Mode_AF, GPIO_Speed_25MHz,
 8000806:	4648      	mov	r0, r9
 8000808:	f7ff fd54 	bl	80002b4 <PinPort>
 800080c:	4603      	mov	r3, r0
 800080e:	4648      	mov	r0, r9
 8000810:	9303      	str	r3, [sp, #12]
 8000812:	f7ff fd57 	bl	80002c4 <PinBit>
 8000816:	9b03      	ldr	r3, [sp, #12]
 8000818:	9500      	str	r5, [sp, #0]
 800081a:	4601      	mov	r1, r0
 800081c:	2202      	movs	r2, #2
 800081e:	4618      	mov	r0, r3
 8000820:	9401      	str	r4, [sp, #4]
 8000822:	4623      	mov	r3, r4
 8000824:	f7ff fdb8 	bl	8000398 <GPIOMode>
			GPIO_OType_PP, GPIO_PuPd_UP);
	GPIOMode(PinPort(mosi), PinBit(mosi), GPIO_Mode_AF, GPIO_Speed_25MHz,
 8000828:	4640      	mov	r0, r8
 800082a:	f7ff fd43 	bl	80002b4 <PinPort>
 800082e:	4603      	mov	r3, r0
 8000830:	4640      	mov	r0, r8
 8000832:	9303      	str	r3, [sp, #12]
 8000834:	f7ff fd46 	bl	80002c4 <PinBit>
 8000838:	9b03      	ldr	r3, [sp, #12]
 800083a:	9500      	str	r5, [sp, #0]
 800083c:	4601      	mov	r1, r0
 800083e:	2202      	movs	r2, #2
 8000840:	4618      	mov	r0, r3
 8000842:	9401      	str	r4, [sp, #4]
 8000844:	4623      	mov	r3, r4
 8000846:	f7ff fda7 	bl	8000398 <GPIOMode>
			GPIO_OType_PP, GPIO_PuPd_UP);
	GPIO_PinAFConfig(PinPort(sck), PinSource(sck), af);
 800084a:	4650      	mov	r0, sl
 800084c:	f7ff fd32 	bl	80002b4 <PinPort>
 8000850:	4603      	mov	r3, r0
 8000852:	4650      	mov	r0, sl
 8000854:	9303      	str	r3, [sp, #12]
 8000856:	f7ff fd3c 	bl	80002d2 <PinSource>
 800085a:	9b03      	ldr	r3, [sp, #12]
 800085c:	4601      	mov	r1, r0
 800085e:	4632      	mov	r2, r6
 8000860:	4618      	mov	r0, r3
 8000862:	f000 fcac 	bl	80011be <GPIO_PinAFConfig>
	GPIO_PinAFConfig(PinPort(miso), PinSource(miso), af);
 8000866:	4648      	mov	r0, r9
 8000868:	f7ff fd24 	bl	80002b4 <PinPort>
 800086c:	4682      	mov	sl, r0
 800086e:	4648      	mov	r0, r9
 8000870:	f7ff fd2f 	bl	80002d2 <PinSource>
 8000874:	4632      	mov	r2, r6
 8000876:	4601      	mov	r1, r0
 8000878:	4650      	mov	r0, sl
 800087a:	f000 fca0 	bl	80011be <GPIO_PinAFConfig>
	GPIO_PinAFConfig(PinPort(mosi), PinSource(mosi), af);
 800087e:	4640      	mov	r0, r8
 8000880:	f7ff fd18 	bl	80002b4 <PinPort>
 8000884:	4681      	mov	r9, r0
 8000886:	4640      	mov	r0, r8
 8000888:	f7ff fd23 	bl	80002d2 <PinSource>
 800088c:	4632      	mov	r2, r6
 800088e:	4601      	mov	r1, r0
 8000890:	4648      	mov	r0, r9
 8000892:	f000 fc94 	bl	80011be <GPIO_PinAFConfig>
	// nSS by software
	GPIOMode(PinPort(nss), PinBit(nss), GPIO_Mode_OUT, GPIO_Speed_25MHz,
 8000896:	4658      	mov	r0, fp
 8000898:	f7ff fd0c 	bl	80002b4 <PinPort>
 800089c:	4606      	mov	r6, r0
 800089e:	4658      	mov	r0, fp
 80008a0:	f7ff fd10 	bl	80002c4 <PinBit>
 80008a4:	4622      	mov	r2, r4
 80008a6:	4623      	mov	r3, r4
 80008a8:	4601      	mov	r1, r0
 80008aa:	9500      	str	r5, [sp, #0]
 80008ac:	4630      	mov	r0, r6
 80008ae:	9401      	str	r4, [sp, #4]
 80008b0:	f7ff fd72 	bl	8000398 <GPIOMode>
			GPIO_OType_PP, GPIO_PuPd_UP);
	digitalWrite(nss, HIGH);
 80008b4:	4658      	mov	r0, fp
 80008b6:	4621      	mov	r1, r4
 80008b8:	f7ff fd34 	bl	8000324 <digitalWrite>
	//GPIO_PinAFConfig(PinPort(nss), PinSource(nss), af);

	SPI_InitStruct.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
	SPI_InitStruct.SPI_Mode = SPI_Mode_Master;
 80008bc:	f44f 7382 	mov.w	r3, #260	; 0x104
 80008c0:	f8ad 3016 	strh.w	r3, [sp, #22]
	SPI_InitStruct.SPI_DataSize = SPI_DataSize_8b;
	SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;
	SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
	SPI_InitStruct.SPI_NSS = SPI_NSS_Soft;
 80008c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008c8:	f8ad 301e 	strh.w	r3, [sp, #30]
	SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_8;
	SPI_InitStruct.SPI_FirstBit = SPI_FirstBit_MSB;
	SPI_InitStruct.SPI_CRCPolynomial = SPI_CRC_Rx;

	SPI_Init(SPIx, &SPI_InitStruct);
 80008cc:	4638      	mov	r0, r7
	SPI_InitStruct.SPI_Mode = SPI_Mode_Master;
	SPI_InitStruct.SPI_DataSize = SPI_DataSize_8b;
	SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;
	SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
	SPI_InitStruct.SPI_NSS = SPI_NSS_Soft;
	SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_8;
 80008ce:	2310      	movs	r3, #16
	SPI_InitStruct.SPI_FirstBit = SPI_FirstBit_MSB;
	SPI_InitStruct.SPI_CRCPolynomial = SPI_CRC_Rx;

	SPI_Init(SPIx, &SPI_InitStruct);
 80008d0:	a905      	add	r1, sp, #20
	GPIOMode(PinPort(nss), PinBit(nss), GPIO_Mode_OUT, GPIO_Speed_25MHz,
			GPIO_OType_PP, GPIO_PuPd_UP);
	digitalWrite(nss, HIGH);
	//GPIO_PinAFConfig(PinPort(nss), PinSource(nss), af);

	SPI_InitStruct.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 80008d2:	f8ad 5014 	strh.w	r5, [sp, #20]
	SPI_InitStruct.SPI_Mode = SPI_Mode_Master;
	SPI_InitStruct.SPI_DataSize = SPI_DataSize_8b;
 80008d6:	f8ad 5018 	strh.w	r5, [sp, #24]
	SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;
 80008da:	f8ad 501a 	strh.w	r5, [sp, #26]
	SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
 80008de:	f8ad 501c 	strh.w	r5, [sp, #28]
	SPI_InitStruct.SPI_NSS = SPI_NSS_Soft;
	SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_8;
 80008e2:	f8ad 3020 	strh.w	r3, [sp, #32]
	SPI_InitStruct.SPI_FirstBit = SPI_FirstBit_MSB;
 80008e6:	f8ad 5022 	strh.w	r5, [sp, #34]	; 0x22
	SPI_InitStruct.SPI_CRCPolynomial = SPI_CRC_Rx;
 80008ea:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24

	SPI_Init(SPIx, &SPI_InitStruct);
 80008ee:	f001 f8bd 	bl	8001a6c <SPI_Init>

	SPI_Cmd(SPIx, ENABLE);
 80008f2:	4638      	mov	r0, r7
 80008f4:	4621      	mov	r1, r4
 80008f6:	f001 f952 	bl	8001b9e <SPI_Cmd>
	 *              - Enable or disable the SS output using the SPI_SSOutputCmd() function
	 *
	 *          10. To use the CRC Hardware calculation feature refer to the Peripheral
	 *              CRC hardware Calculation subsection.
	 */
}
 80008fa:	b00b      	add	sp, #44	; 0x2c
 80008fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000900:	40013000 	.word	0x40013000
 8000904:	40003800 	.word	0x40003800

08000908 <spi_transfer>:

void spi_transfer(SPI_TypeDef * SPIx, /*SPIBus spibus,*/ uint8_t * data, uint16_t nbytes) {
 8000908:	b570      	push	{r4, r5, r6, lr}
 800090a:	4604      	mov	r4, r0
 800090c:	4615      	mov	r5, r2
 800090e:	1e4e      	subs	r6, r1, #1
//	SPI_TypeDef * SPIx = spix[spibus];
	uint8_t rcvdata;

	for (; nbytes; nbytes--) {
 8000910:	e016      	b.n	8000940 <spi_transfer+0x38>
		/* Wait for SPIx Tx buffer empty */
		while (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_TXE ) == RESET)
 8000912:	4620      	mov	r0, r4
 8000914:	2102      	movs	r1, #2
 8000916:	f001 f9f5 	bl	8001d04 <SPI_I2S_GetFlagStatus>
 800091a:	2800      	cmp	r0, #0
 800091c:	d0f9      	beq.n	8000912 <spi_transfer+0xa>
			;
		SPI_I2S_SendData(SPIx, (uint16_t) *data);
 800091e:	4620      	mov	r0, r4
 8000920:	7871      	ldrb	r1, [r6, #1]
 8000922:	f001 f9b9 	bl	8001c98 <SPI_I2S_SendData>
		/* Wait for SPIx data reception */
		while (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_RXNE ) == RESET)
 8000926:	4620      	mov	r0, r4
 8000928:	2101      	movs	r1, #1
 800092a:	f001 f9eb 	bl	8001d04 <SPI_I2S_GetFlagStatus>
 800092e:	2800      	cmp	r0, #0
 8000930:	d0f9      	beq.n	8000926 <spi_transfer+0x1e>
			;
		/* Read SPIy received data */
		rcvdata = SPI_I2S_ReceiveData(SPIx);
 8000932:	4620      	mov	r0, r4
 8000934:	f001 f9ad 	bl	8001c92 <SPI_I2S_ReceiveData>

void spi_transfer(SPI_TypeDef * SPIx, /*SPIBus spibus,*/ uint8_t * data, uint16_t nbytes) {
//	SPI_TypeDef * SPIx = spix[spibus];
	uint8_t rcvdata;

	for (; nbytes; nbytes--) {
 8000938:	3d01      	subs	r5, #1
		SPI_I2S_SendData(SPIx, (uint16_t) *data);
		/* Wait for SPIx data reception */
		while (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_RXNE ) == RESET)
			;
		/* Read SPIy received data */
		rcvdata = SPI_I2S_ReceiveData(SPIx);
 800093a:	f806 0f01 	strb.w	r0, [r6, #1]!

void spi_transfer(SPI_TypeDef * SPIx, /*SPIBus spibus,*/ uint8_t * data, uint16_t nbytes) {
//	SPI_TypeDef * SPIx = spix[spibus];
	uint8_t rcvdata;

	for (; nbytes; nbytes--) {
 800093e:	b2ad      	uxth	r5, r5
 8000940:	2d00      	cmp	r5, #0
 8000942:	d1e6      	bne.n	8000912 <spi_transfer+0xa>
		/* Read SPIy received data */
		rcvdata = SPI_I2S_ReceiveData(SPIx);
		*data = rcvdata;
		data++;
	}
}
 8000944:	bd70      	pop	{r4, r5, r6, pc}
 8000946:	bf00      	nop

08000948 <SysTick_Handler>:
#include "systick.h"

volatile uint32_t _systick_counter;

void SysTick_Handler(void) {
	_systick_counter++; /* increment timeTicks counter */
 8000948:	4b02      	ldr	r3, [pc, #8]	; (8000954 <SysTick_Handler+0xc>)
 800094a:	681a      	ldr	r2, [r3, #0]
 800094c:	3201      	adds	r2, #1
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	20000690 	.word	0x20000690

08000958 <SysTick_delay>:
}

void SysTick_delay(const uint32_t dlyTicks) {
	uint32_t currTicks = _systick_counter;
 8000958:	4b03      	ldr	r3, [pc, #12]	; (8000968 <SysTick_delay+0x10>)
 800095a:	6819      	ldr	r1, [r3, #0]

	while ((_systick_counter - currTicks) < dlyTicks)
 800095c:	681a      	ldr	r2, [r3, #0]
 800095e:	1a52      	subs	r2, r2, r1
 8000960:	4282      	cmp	r2, r0
 8000962:	d3fb      	bcc.n	800095c <SysTick_delay+0x4>
		;
}
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	20000690 	.word	0x20000690

0800096c <SysTick_Start>:

void SysTick_Start(void) {
 800096c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	RCC_ClocksTypeDef RCC_Clocks;
	  /* SysTick end of count event each 1ms */
	  RCC_GetClocksFreq(&RCC_Clocks);
 800096e:	4668      	mov	r0, sp
 8000970:	f000 fed8 	bl	8001724 <RCC_GetClocksFreq>
	  SysTick_Config(RCC_Clocks.HCLK_Frequency / 1000);
 8000974:	9b01      	ldr	r3, [sp, #4]
 8000976:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800097a:	fbb3 f3f2 	udiv	r3, r3, r2
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 800097e:	1e5a      	subs	r2, r3, #1
 8000980:	4b05      	ldr	r3, [pc, #20]	; (8000998 <SysTick_Start+0x2c>)
 8000982:	605a      	str	r2, [r3, #4]
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000984:	4a05      	ldr	r2, [pc, #20]	; (800099c <SysTick_Start+0x30>)
 8000986:	21f0      	movs	r1, #240	; 0xf0
 8000988:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000990:	2207      	movs	r2, #7
 8000992:	601a      	str	r2, [r3, #0]
		// Handle Error
		while (1)
			;
	}
*/
}
 8000994:	b005      	add	sp, #20
 8000996:	bd00      	pop	{pc}
 8000998:	e000e010 	.word	0xe000e010
 800099c:	e000ed00 	.word	0xe000ed00

080009a0 <SysTick_count>:

uint32_t SysTick_count() {
	return _systick_counter;
 80009a0:	4b01      	ldr	r3, [pc, #4]	; (80009a8 <SysTick_count+0x8>)
 80009a2:	6818      	ldr	r0, [r3, #0]
}
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	20000690 	.word	0x20000690

080009ac <buffer_clear>:

Serial Serial1, Serial2, Serial3, Serial4, Serial5, Serial6;
USARTRing rxring[6], txring[6];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 80009ac:	2300      	movs	r3, #0
 80009ae:	f8a0 3100 	strh.w	r3, [r0, #256]	; 0x100
	r->tail = 0;
 80009b2:	f8a0 3102 	strh.w	r3, [r0, #258]	; 0x102
	r->count = 0;
 80009b6:	f8a0 3104 	strh.w	r3, [r0, #260]	; 0x104
 80009ba:	4770      	bx	lr

080009bc <buffer_count>:
}

uint16_t buffer_count(USARTRing * r) {
	return r->count;
}
 80009bc:	f8b0 0104 	ldrh.w	r0, [r0, #260]	; 0x104
 80009c0:	4770      	bx	lr

080009c2 <buffer_is_full>:

uint8_t buffer_is_full(USARTRing * r) {
	if ((r->head == r->tail) && (r->count > 0)) {
 80009c2:	f9b0 2100 	ldrsh.w	r2, [r0, #256]	; 0x100
 80009c6:	f9b0 3102 	ldrsh.w	r3, [r0, #258]	; 0x102
 80009ca:	429a      	cmp	r2, r3
 80009cc:	d105      	bne.n	80009da <buffer_is_full+0x18>
 80009ce:	f8b0 0104 	ldrh.w	r0, [r0, #260]	; 0x104
		return 1;
 80009d2:	3000      	adds	r0, #0
 80009d4:	bf18      	it	ne
 80009d6:	2001      	movne	r0, #1
 80009d8:	4770      	bx	lr
	}
	return 0;
 80009da:	2000      	movs	r0, #0
}
 80009dc:	4770      	bx	lr

080009de <buffer_enque>:

uint16_t buffer_enque(USARTRing * r, uint16_t w) {
 80009de:	b538      	push	{r3, r4, r5, lr}
 80009e0:	4604      	mov	r4, r0
 80009e2:	460d      	mov	r5, r1
	if (buffer_is_full(r))
 80009e4:	f7ff ffed 	bl	80009c2 <buffer_is_full>
 80009e8:	b9b0      	cbnz	r0, 8000a18 <buffer_enque+0x3a>
		return 0xffff;
	r->buf[r->head++] = w;
 80009ea:	f8b4 3100 	ldrh.w	r3, [r4, #256]	; 0x100
 80009ee:	b21a      	sxth	r2, r3
 80009f0:	3301      	adds	r3, #1
 80009f2:	f824 5012 	strh.w	r5, [r4, r2, lsl #1]
	r->count++;
 80009f6:	f8b4 2104 	ldrh.w	r2, [r4, #260]	; 0x104
 80009fa:	3201      	adds	r2, #1
 80009fc:	f8a4 2104 	strh.w	r2, [r4, #260]	; 0x104
	r->head %= USART_BUFFER_SIZE;
 8000a00:	b21a      	sxth	r2, r3
 8000a02:	4b07      	ldr	r3, [pc, #28]	; (8000a20 <buffer_enque+0x42>)
 8000a04:	4013      	ands	r3, r2
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	da03      	bge.n	8000a12 <buffer_enque+0x34>
 8000a0a:	3b01      	subs	r3, #1
 8000a0c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000a10:	3301      	adds	r3, #1
 8000a12:	f8a4 3100 	strh.w	r3, [r4, #256]	; 0x100
 8000a16:	e001      	b.n	8000a1c <buffer_enque+0x3e>
	return 0;
}

uint16_t buffer_enque(USARTRing * r, uint16_t w) {
	if (buffer_is_full(r))
		return 0xffff;
 8000a18:	f64f 75ff 	movw	r5, #65535	; 0xffff
	r->buf[r->head++] = w;
	r->count++;
	r->head %= USART_BUFFER_SIZE;
	return w;
}
 8000a1c:	4628      	mov	r0, r5
 8000a1e:	bd38      	pop	{r3, r4, r5, pc}
 8000a20:	8000007f 	.word	0x8000007f

08000a24 <buffer_deque>:
	r->tail = 0;
	r->count = 0;
}

uint16_t buffer_count(USARTRing * r) {
	return r->count;
 8000a24:	f8b0 1104 	ldrh.w	r1, [r0, #260]	; 0x104
	r->count++;
	r->head %= USART_BUFFER_SIZE;
	return w;
}

uint16_t buffer_deque(USARTRing * r) {
 8000a28:	4602      	mov	r2, r0
	uint16_t w;
	if (buffer_count(r) == 0)
 8000a2a:	b1a1      	cbz	r1, 8000a56 <buffer_deque+0x32>
		return 0xffff;
	w = r->buf[r->tail++];
 8000a2c:	f8b0 3102 	ldrh.w	r3, [r0, #258]	; 0x102
	r->count--;
 8000a30:	3901      	subs	r1, #1

uint16_t buffer_deque(USARTRing * r) {
	uint16_t w;
	if (buffer_count(r) == 0)
		return 0xffff;
	w = r->buf[r->tail++];
 8000a32:	b218      	sxth	r0, r3
 8000a34:	3301      	adds	r3, #1
	r->count--;
 8000a36:	f8a2 1104 	strh.w	r1, [r2, #260]	; 0x104
	r->tail %= USART_BUFFER_SIZE;
 8000a3a:	b219      	sxth	r1, r3
 8000a3c:	4b07      	ldr	r3, [pc, #28]	; (8000a5c <buffer_deque+0x38>)

uint16_t buffer_deque(USARTRing * r) {
	uint16_t w;
	if (buffer_count(r) == 0)
		return 0xffff;
	w = r->buf[r->tail++];
 8000a3e:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
	r->count--;
	r->tail %= USART_BUFFER_SIZE;
 8000a42:	400b      	ands	r3, r1
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	da03      	bge.n	8000a50 <buffer_deque+0x2c>
 8000a48:	3b01      	subs	r3, #1
 8000a4a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000a4e:	3301      	adds	r3, #1
 8000a50:	f8a2 3102 	strh.w	r3, [r2, #258]	; 0x102
	return w;
 8000a54:	4770      	bx	lr
}

uint16_t buffer_deque(USARTRing * r) {
	uint16_t w;
	if (buffer_count(r) == 0)
		return 0xffff;
 8000a56:	f64f 70ff 	movw	r0, #65535	; 0xffff
	w = r->buf[r->tail++];
	r->count--;
	r->tail %= USART_BUFFER_SIZE;
	return w;
}
 8000a5a:	4770      	bx	lr
 8000a5c:	8000007f 	.word	0x8000007f

08000a60 <buffer_peek>:

uint16_t buffer_peek(USARTRing * r) {
	if (buffer_count(r) == 0)
 8000a60:	f8b0 3104 	ldrh.w	r3, [r0, #260]	; 0x104
 8000a64:	b123      	cbz	r3, 8000a70 <buffer_peek+0x10>
		return 0xffff;
	return r->buf[r->tail];
 8000a66:	f9b0 3102 	ldrsh.w	r3, [r0, #258]	; 0x102
 8000a6a:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8000a6e:	4770      	bx	lr
	return w;
}

uint16_t buffer_peek(USARTRing * r) {
	if (buffer_count(r) == 0)
		return 0xffff;
 8000a70:	f64f 70ff 	movw	r0, #65535	; 0xffff
	return r->buf[r->tail];
}
 8000a74:	4770      	bx	lr

08000a76 <usart_begin>:

void usart_begin(Serial * usx, GPIOPin rx, GPIOPin tx, uint32_t baud) {
 8000a76:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a7a:	469a      	mov	sl, r3
	NVIC_InitTypeDef NVIC_InitStructure; // this is used to configure the NVIC (nested vector interrupt controller)
	//
	uint8_t af = GPIO_AF_USART1;
	IRQn_Type irq = USART1_IRQn;

	if (usx == &Serial1) {
 8000a7c:	4b70      	ldr	r3, [pc, #448]	; (8000c40 <usart_begin+0x1ca>)
 8000a7e:	4298      	cmp	r0, r3
	if (buffer_count(r) == 0)
		return 0xffff;
	return r->buf[r->tail];
}

void usart_begin(Serial * usx, GPIOPin rx, GPIOPin tx, uint32_t baud) {
 8000a80:	b089      	sub	sp, #36	; 0x24
 8000a82:	4604      	mov	r4, r0
 8000a84:	4689      	mov	r9, r1
 8000a86:	4690      	mov	r8, r2
	NVIC_InitTypeDef NVIC_InitStructure; // this is used to configure the NVIC (nested vector interrupt controller)
	//
	uint8_t af = GPIO_AF_USART1;
	IRQn_Type irq = USART1_IRQn;

	if (usx == &Serial1) {
 8000a88:	d10d      	bne.n	8000aa6 <usart_begin+0x30>
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 8000a8a:	2010      	movs	r0, #16
 8000a8c:	2101      	movs	r1, #1
 8000a8e:	f000 fee9 	bl	8001864 <RCC_APB2PeriphClockCmd>
		af = GPIO_AF_USART1;
		irq = USART1_IRQn;
		usx->usid = USART1Serial;
 8000a92:	2300      	movs	r3, #0
 8000a94:	7023      	strb	r3, [r4, #0]
		usx->USARTx = USART1;
 8000a96:	4b6b      	ldr	r3, [pc, #428]	; (8000c44 <usart_begin+0x1ce>)
 8000a98:	6063      	str	r3, [r4, #4]
		usx->rxring = &rxring[USART1Serial];
 8000a9a:	4b6b      	ldr	r3, [pc, #428]	; (8000c48 <usart_begin+0x1d2>)
 8000a9c:	60a3      	str	r3, [r4, #8]
		usx->txring = &txring[USART1Serial];
 8000a9e:	4b6b      	ldr	r3, [pc, #428]	; (8000c4c <usart_begin+0x1d6>)
	IRQn_Type irq = USART1_IRQn;

	if (usx == &Serial1) {
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
		af = GPIO_AF_USART1;
		irq = USART1_IRQn;
 8000aa0:	2725      	movs	r7, #37	; 0x25
		usx->usid = USART1Serial;
		usx->USARTx = USART1;
		usx->rxring = &rxring[USART1Serial];
		usx->txring = &txring[USART1Serial];
 8000aa2:	60e3      	str	r3, [r4, #12]
 8000aa4:	e010      	b.n	8000ac8 <usart_begin+0x52>
	} else if (usx == &Serial2) {
 8000aa6:	4b6a      	ldr	r3, [pc, #424]	; (8000c50 <usart_begin+0x1da>)
 8000aa8:	4298      	cmp	r0, r3
 8000aaa:	d10f      	bne.n	8000acc <usart_begin+0x56>
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 8000aac:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000ab0:	2101      	movs	r1, #1
 8000ab2:	f000 fecb 	bl	800184c <RCC_APB1PeriphClockCmd>
		af = GPIO_AF_USART2;
		irq = USART2_IRQn;
		usx->usid = USART2Serial;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	7023      	strb	r3, [r4, #0]
		usx->USARTx = USART2;
 8000aba:	4b66      	ldr	r3, [pc, #408]	; (8000c54 <usart_begin+0x1de>)
 8000abc:	6063      	str	r3, [r4, #4]
		usx->rxring = &rxring[USART2Serial];
 8000abe:	4b66      	ldr	r3, [pc, #408]	; (8000c58 <usart_begin+0x1e2>)
 8000ac0:	60a3      	str	r3, [r4, #8]
		usx->txring = &txring[USART2Serial];
 8000ac2:	4b66      	ldr	r3, [pc, #408]	; (8000c5c <usart_begin+0x1e6>)
		usx->rxring = &rxring[USART1Serial];
		usx->txring = &txring[USART1Serial];
	} else if (usx == &Serial2) {
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
		af = GPIO_AF_USART2;
		irq = USART2_IRQn;
 8000ac4:	2726      	movs	r7, #38	; 0x26
		usx->usid = USART2Serial;
		usx->USARTx = USART2;
		usx->rxring = &rxring[USART2Serial];
		usx->txring = &txring[USART2Serial];
 8000ac6:	60e3      	str	r3, [r4, #12]
		usx->USARTx = USART1;
		usx->rxring = &rxring[USART1Serial];
		usx->txring = &txring[USART1Serial];
	} else if (usx == &Serial2) {
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
		af = GPIO_AF_USART2;
 8000ac8:	2607      	movs	r6, #7
 8000aca:	e043      	b.n	8000b54 <usart_begin+0xde>
		irq = USART2_IRQn;
		usx->usid = USART2Serial;
		usx->USARTx = USART2;
		usx->rxring = &rxring[USART2Serial];
		usx->txring = &txring[USART2Serial];
	} else if (usx == &Serial3) {
 8000acc:	4b64      	ldr	r3, [pc, #400]	; (8000c60 <usart_begin+0x1ea>)
 8000ace:	4298      	cmp	r0, r3
 8000ad0:	d10e      	bne.n	8000af0 <usart_begin+0x7a>
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
 8000ad2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000ad6:	2101      	movs	r1, #1
 8000ad8:	f000 feb8 	bl	800184c <RCC_APB1PeriphClockCmd>
		af = GPIO_AF_USART3;
		irq = USART3_IRQn;
		usx->usid = USART3Serial;
 8000adc:	2302      	movs	r3, #2
 8000ade:	7023      	strb	r3, [r4, #0]
		usx->USARTx = USART3;
 8000ae0:	4b60      	ldr	r3, [pc, #384]	; (8000c64 <usart_begin+0x1ee>)
 8000ae2:	6063      	str	r3, [r4, #4]
		usx->rxring = &rxring[USART3Serial];
 8000ae4:	4b60      	ldr	r3, [pc, #384]	; (8000c68 <usart_begin+0x1f2>)
 8000ae6:	60a3      	str	r3, [r4, #8]
		usx->txring = &txring[USART3Serial];
 8000ae8:	4b60      	ldr	r3, [pc, #384]	; (8000c6c <usart_begin+0x1f6>)
		usx->rxring = &rxring[USART2Serial];
		usx->txring = &txring[USART2Serial];
	} else if (usx == &Serial3) {
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
		af = GPIO_AF_USART3;
		irq = USART3_IRQn;
 8000aea:	2727      	movs	r7, #39	; 0x27
		usx->usid = USART3Serial;
		usx->USARTx = USART3;
		usx->rxring = &rxring[USART3Serial];
		usx->txring = &txring[USART3Serial];
 8000aec:	60e3      	str	r3, [r4, #12]
 8000aee:	e7eb      	b.n	8000ac8 <usart_begin+0x52>
	} else if (usx == &Serial4) {
 8000af0:	4b5f      	ldr	r3, [pc, #380]	; (8000c70 <usart_begin+0x1fa>)
 8000af2:	4298      	cmp	r0, r3
 8000af4:	d10e      	bne.n	8000b14 <usart_begin+0x9e>
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART4, ENABLE);
 8000af6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000afa:	2101      	movs	r1, #1
 8000afc:	f000 fea6 	bl	800184c <RCC_APB1PeriphClockCmd>
		af = GPIO_AF_UART4;
		irq = UART4_IRQn;
		usx->usid = UART4Serial;
 8000b00:	2303      	movs	r3, #3
 8000b02:	7023      	strb	r3, [r4, #0]
		usx->USARTx = UART4;
 8000b04:	4b5b      	ldr	r3, [pc, #364]	; (8000c74 <usart_begin+0x1fe>)
 8000b06:	6063      	str	r3, [r4, #4]
		usx->rxring = &rxring[UART4Serial];
 8000b08:	4b5b      	ldr	r3, [pc, #364]	; (8000c78 <usart_begin+0x202>)
 8000b0a:	60a3      	str	r3, [r4, #8]
		usx->txring = &txring[UART4Serial];
 8000b0c:	4b5b      	ldr	r3, [pc, #364]	; (8000c7c <usart_begin+0x206>)
		usx->rxring = &rxring[USART3Serial];
		usx->txring = &txring[USART3Serial];
	} else if (usx == &Serial4) {
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART4, ENABLE);
		af = GPIO_AF_UART4;
		irq = UART4_IRQn;
 8000b0e:	2734      	movs	r7, #52	; 0x34
		usx->usid = UART4Serial;
		usx->USARTx = UART4;
		usx->rxring = &rxring[UART4Serial];
		usx->txring = &txring[UART4Serial];
 8000b10:	60e3      	str	r3, [r4, #12]
 8000b12:	e01e      	b.n	8000b52 <usart_begin+0xdc>
	} else if (usx == &Serial5) {
 8000b14:	4b5a      	ldr	r3, [pc, #360]	; (8000c80 <usart_begin+0x20a>)
 8000b16:	4298      	cmp	r0, r3
 8000b18:	d10e      	bne.n	8000b38 <usart_begin+0xc2>
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART5, ENABLE);
 8000b1a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000b1e:	2101      	movs	r1, #1
 8000b20:	f000 fe94 	bl	800184c <RCC_APB1PeriphClockCmd>
		af = GPIO_AF_UART5;
		irq = UART5_IRQn;
		usx->usid = UART5Serial;
 8000b24:	2304      	movs	r3, #4
 8000b26:	7023      	strb	r3, [r4, #0]
		usx->USARTx = UART5;
 8000b28:	4b56      	ldr	r3, [pc, #344]	; (8000c84 <usart_begin+0x20e>)
 8000b2a:	6063      	str	r3, [r4, #4]
		usx->rxring = &rxring[UART5Serial];
 8000b2c:	4b56      	ldr	r3, [pc, #344]	; (8000c88 <usart_begin+0x212>)
 8000b2e:	60a3      	str	r3, [r4, #8]
		usx->txring = &txring[UART5Serial];
 8000b30:	4b56      	ldr	r3, [pc, #344]	; (8000c8c <usart_begin+0x216>)
		usx->rxring = &rxring[UART4Serial];
		usx->txring = &txring[UART4Serial];
	} else if (usx == &Serial5) {
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART5, ENABLE);
		af = GPIO_AF_UART5;
		irq = UART5_IRQn;
 8000b32:	2735      	movs	r7, #53	; 0x35
		usx->usid = UART5Serial;
		usx->USARTx = UART5;
		usx->rxring = &rxring[UART5Serial];
		usx->txring = &txring[UART5Serial];
 8000b34:	60e3      	str	r3, [r4, #12]
 8000b36:	e00c      	b.n	8000b52 <usart_begin+0xdc>
	} else { // Serial6
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART6, ENABLE);
 8000b38:	2020      	movs	r0, #32
 8000b3a:	2101      	movs	r1, #1
 8000b3c:	f000 fe92 	bl	8001864 <RCC_APB2PeriphClockCmd>
		af = GPIO_AF_USART6;
		irq = USART6_IRQn;
		usx->usid = USART6Serial;
 8000b40:	2305      	movs	r3, #5
 8000b42:	7023      	strb	r3, [r4, #0]
		usx->USARTx = USART6;
 8000b44:	4b52      	ldr	r3, [pc, #328]	; (8000c90 <usart_begin+0x21a>)
 8000b46:	6063      	str	r3, [r4, #4]
		usx->rxring = &rxring[USART6Serial];
 8000b48:	4b52      	ldr	r3, [pc, #328]	; (8000c94 <usart_begin+0x21e>)
 8000b4a:	60a3      	str	r3, [r4, #8]
		usx->txring = &txring[USART6Serial];
 8000b4c:	4b52      	ldr	r3, [pc, #328]	; (8000c98 <usart_begin+0x222>)
		usx->rxring = &rxring[UART5Serial];
		usx->txring = &txring[UART5Serial];
	} else { // Serial6
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART6, ENABLE);
		af = GPIO_AF_USART6;
		irq = USART6_IRQn;
 8000b4e:	2747      	movs	r7, #71	; 0x47
		usx->usid = USART6Serial;
		usx->USARTx = USART6;
		usx->rxring = &rxring[USART6Serial];
		usx->txring = &txring[USART6Serial];
 8000b50:	60e3      	str	r3, [r4, #12]
		usx->USARTx = UART5;
		usx->rxring = &rxring[UART5Serial];
		usx->txring = &txring[UART5Serial];
	} else { // Serial6
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART6, ENABLE);
		af = GPIO_AF_USART6;
 8000b52:	2608      	movs	r6, #8
		usx->USARTx = USART6;
		usx->rxring = &rxring[USART6Serial];
		usx->txring = &txring[USART6Serial];
	}

	GPIOMode(PinPort(rx), PinBit(rx), GPIO_Mode_AF, GPIO_Speed_50MHz,
 8000b54:	4648      	mov	r0, r9
 8000b56:	f7ff fbad 	bl	80002b4 <PinPort>
 8000b5a:	4683      	mov	fp, r0
 8000b5c:	4648      	mov	r0, r9
 8000b5e:	f7ff fbb1 	bl	80002c4 <PinBit>
 8000b62:	2500      	movs	r5, #0
 8000b64:	2202      	movs	r2, #2
 8000b66:	4601      	mov	r1, r0
 8000b68:	4613      	mov	r3, r2
 8000b6a:	4658      	mov	r0, fp
 8000b6c:	9500      	str	r5, [sp, #0]
 8000b6e:	9501      	str	r5, [sp, #4]
 8000b70:	f7ff fc12 	bl	8000398 <GPIOMode>
			GPIO_OType_PP, GPIO_PuPd_NOPULL);
	GPIOMode(PinPort(tx), PinBit(tx), GPIO_Mode_AF, GPIO_Speed_50MHz,
 8000b74:	4640      	mov	r0, r8
 8000b76:	f7ff fb9d 	bl	80002b4 <PinPort>
 8000b7a:	4683      	mov	fp, r0
 8000b7c:	4640      	mov	r0, r8
 8000b7e:	f7ff fba1 	bl	80002c4 <PinBit>
 8000b82:	2202      	movs	r2, #2
 8000b84:	4613      	mov	r3, r2
 8000b86:	4601      	mov	r1, r0
 8000b88:	9500      	str	r5, [sp, #0]
 8000b8a:	4658      	mov	r0, fp
 8000b8c:	9501      	str	r5, [sp, #4]
 8000b8e:	f7ff fc03 	bl	8000398 <GPIOMode>
			GPIO_OType_PP, GPIO_PuPd_NOPULL);

	GPIO_PinAFConfig(PinPort(rx), PinSource(rx), af);
 8000b92:	4648      	mov	r0, r9
 8000b94:	f7ff fb8e 	bl	80002b4 <PinPort>
 8000b98:	4683      	mov	fp, r0
 8000b9a:	4648      	mov	r0, r9
 8000b9c:	f7ff fb99 	bl	80002d2 <PinSource>
 8000ba0:	4632      	mov	r2, r6
 8000ba2:	4601      	mov	r1, r0
 8000ba4:	4658      	mov	r0, fp
 8000ba6:	f000 fb0a 	bl	80011be <GPIO_PinAFConfig>
	GPIO_PinAFConfig(PinPort(tx), PinSource(tx), af);
 8000baa:	4640      	mov	r0, r8
 8000bac:	f7ff fb82 	bl	80002b4 <PinPort>
 8000bb0:	4681      	mov	r9, r0
 8000bb2:	4640      	mov	r0, r8
 8000bb4:	f7ff fb8d 	bl	80002d2 <PinSource>
 8000bb8:	4632      	mov	r2, r6
 8000bba:	4601      	mov	r1, r0
 8000bbc:	4648      	mov	r0, r9
 8000bbe:	f000 fafe 	bl	80011be <GPIO_PinAFConfig>
	USART_InitStruct.USART_BaudRate = baud;	// the baudrate is set to the value we passed into this init function
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
	USART_InitStruct.USART_StopBits = USART_StopBits_1;	// we want 1 stop bit (standard)
	USART_InitStruct.USART_Parity = USART_Parity_No;// we don't want a parity bit (standard)
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver
 8000bc2:	230c      	movs	r3, #12

	USART_Init(usx->USARTx, &USART_InitStruct); // again all the properties are passed to the USART_Init function which takes care of all the bit setting
 8000bc4:	6860      	ldr	r0, [r4, #4]
	USART_InitStruct.USART_BaudRate = baud;	// the baudrate is set to the value we passed into this init function
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
	USART_InitStruct.USART_StopBits = USART_StopBits_1;	// we want 1 stop bit (standard)
	USART_InitStruct.USART_Parity = USART_Parity_No;// we don't want a parity bit (standard)
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver
 8000bc6:	f8ad 301a 	strh.w	r3, [sp, #26]

	USART_Init(usx->USARTx, &USART_InitStruct); // again all the properties are passed to the USART_Init function which takes care of all the bit setting
 8000bca:	a904      	add	r1, sp, #16
			GPIO_OType_PP, GPIO_PuPd_NOPULL);

	GPIO_PinAFConfig(PinPort(rx), PinSource(rx), af);
	GPIO_PinAFConfig(PinPort(tx), PinSource(tx), af);

	USART_InitStruct.USART_BaudRate = baud;	// the baudrate is set to the value we passed into this init function
 8000bcc:	f8cd a010 	str.w	sl, [sp, #16]
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
 8000bd0:	f8ad 5014 	strh.w	r5, [sp, #20]
	USART_InitStruct.USART_StopBits = USART_StopBits_1;	// we want 1 stop bit (standard)
 8000bd4:	f8ad 5016 	strh.w	r5, [sp, #22]
	USART_InitStruct.USART_Parity = USART_Parity_No;// we don't want a parity bit (standard)
 8000bd8:	f8ad 5018 	strh.w	r5, [sp, #24]
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
 8000bdc:	f8ad 501c 	strh.w	r5, [sp, #28]
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver

	USART_Init(usx->USARTx, &USART_InitStruct); // again all the properties are passed to the USART_Init function which takes care of all the bit setting
 8000be0:	f001 fe80 	bl	80028e4 <USART_Init>

	USART_ITConfig(usx->USARTx, USART_IT_RXNE, ENABLE); // enable the USART3 receive interrupt
 8000be4:	6860      	ldr	r0, [r4, #4]
 8000be6:	2201      	movs	r2, #1
 8000be8:	f240 5125 	movw	r1, #1317	; 0x525
 8000bec:	f001 ffb5 	bl	8002b5a <USART_ITConfig>
	USART_ITConfig(usx->USARTx, USART_IT_TXE, DISABLE);
 8000bf0:	6860      	ldr	r0, [r4, #4]
 8000bf2:	f240 7127 	movw	r1, #1831	; 0x727
 8000bf6:	462a      	mov	r2, r5
 8000bf8:	f001 ffaf 	bl	8002b5a <USART_ITConfig>

	NVIC_InitStructure.NVIC_IRQChannel = irq;
	// we want to configure the USART3 interrupts
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0; // this sets the priority group of the USART3 interrupts
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0; // this sets the subpriority inside the group
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;	// the USART3 interrupts are globally enabled
 8000bfc:	2601      	movs	r6, #1
	NVIC_Init(&NVIC_InitStructure);	// the properties are passed to the NVIC_Init function which takes care of the low level stuff
 8000bfe:	a803      	add	r0, sp, #12
	USART_Init(usx->USARTx, &USART_InitStruct); // again all the properties are passed to the USART_Init function which takes care of all the bit setting

	USART_ITConfig(usx->USARTx, USART_IT_RXNE, ENABLE); // enable the USART3 receive interrupt
	USART_ITConfig(usx->USARTx, USART_IT_TXE, DISABLE);

	NVIC_InitStructure.NVIC_IRQChannel = irq;
 8000c00:	f88d 700c 	strb.w	r7, [sp, #12]
	// we want to configure the USART3 interrupts
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0; // this sets the priority group of the USART3 interrupts
 8000c04:	f88d 500d 	strb.w	r5, [sp, #13]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0; // this sets the subpriority inside the group
 8000c08:	f88d 500e 	strb.w	r5, [sp, #14]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;	// the USART3 interrupts are globally enabled
 8000c0c:	f88d 600f 	strb.w	r6, [sp, #15]
	NVIC_Init(&NVIC_InitStructure);	// the properties are passed to the NVIC_Init function which takes care of the low level stuff
 8000c10:	f000 f992 	bl	8000f38 <NVIC_Init>
	//
	buffer_clear(usx->rxring); //&rxring[usx->usid]);
 8000c14:	68a3      	ldr	r3, [r4, #8]
	buffer_clear(usx->txring); //&txring[usx->usid]);
	// finally this enables the complete USART3 peripheral
	USART_Cmd(usx->USARTx, ENABLE);
 8000c16:	6860      	ldr	r0, [r4, #4]

Serial Serial1, Serial2, Serial3, Serial4, Serial5, Serial6;
USARTRing rxring[6], txring[6];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 8000c18:	f8a3 5100 	strh.w	r5, [r3, #256]	; 0x100
	r->tail = 0;
 8000c1c:	f8a3 5102 	strh.w	r5, [r3, #258]	; 0x102
	r->count = 0;
 8000c20:	f8a3 5104 	strh.w	r5, [r3, #260]	; 0x104
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0; // this sets the subpriority inside the group
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;	// the USART3 interrupts are globally enabled
	NVIC_Init(&NVIC_InitStructure);	// the properties are passed to the NVIC_Init function which takes care of the low level stuff
	//
	buffer_clear(usx->rxring); //&rxring[usx->usid]);
	buffer_clear(usx->txring); //&txring[usx->usid]);
 8000c24:	68e3      	ldr	r3, [r4, #12]
	// finally this enables the complete USART3 peripheral
	USART_Cmd(usx->USARTx, ENABLE);
 8000c26:	4631      	mov	r1, r6

Serial Serial1, Serial2, Serial3, Serial4, Serial5, Serial6;
USARTRing rxring[6], txring[6];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 8000c28:	f8a3 5100 	strh.w	r5, [r3, #256]	; 0x100
	r->tail = 0;
 8000c2c:	f8a3 5102 	strh.w	r5, [r3, #258]	; 0x102
	r->count = 0;
 8000c30:	f8a3 5104 	strh.w	r5, [r3, #260]	; 0x104
	NVIC_Init(&NVIC_InitStructure);	// the properties are passed to the NVIC_Init function which takes care of the low level stuff
	//
	buffer_clear(usx->rxring); //&rxring[usx->usid]);
	buffer_clear(usx->txring); //&txring[usx->usid]);
	// finally this enables the complete USART3 peripheral
	USART_Cmd(usx->USARTx, ENABLE);
 8000c34:	f001 fed1 	bl	80029da <USART_Cmd>
}
 8000c38:	b009      	add	sp, #36	; 0x24
 8000c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c3e:	bf00      	nop
 8000c40:	20000cc8 	.word	0x20000cc8
 8000c44:	40011000 	.word	0x40011000
 8000c48:	20000cf8 	.word	0x20000cf8
 8000c4c:	200006a4 	.word	0x200006a4
 8000c50:	2000132c 	.word	0x2000132c
 8000c54:	40004400 	.word	0x40004400
 8000c58:	20000dfe 	.word	0x20000dfe
 8000c5c:	200007aa 	.word	0x200007aa
 8000c60:	20000cd8 	.word	0x20000cd8
 8000c64:	40004800 	.word	0x40004800
 8000c68:	20000f04 	.word	0x20000f04
 8000c6c:	200008b0 	.word	0x200008b0
 8000c70:	2000131c 	.word	0x2000131c
 8000c74:	40004c00 	.word	0x40004c00
 8000c78:	2000100a 	.word	0x2000100a
 8000c7c:	200009b6 	.word	0x200009b6
 8000c80:	20000694 	.word	0x20000694
 8000c84:	40005000 	.word	0x40005000
 8000c88:	20001110 	.word	0x20001110
 8000c8c:	20000abc 	.word	0x20000abc
 8000c90:	40011400 	.word	0x40011400
 8000c94:	20001216 	.word	0x20001216
 8000c98:	20000bc2 	.word	0x20000bc2

08000c9c <usart_bare_write>:

void usart_bare_write(Serial * usx, const uint16_t w) {
 8000c9c:	b538      	push	{r3, r4, r5, lr}
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	460d      	mov	r5, r1
	while (USART_GetFlagStatus(usx->USARTx, USART_FLAG_TXE ) == RESET)
 8000ca2:	6860      	ldr	r0, [r4, #4]
 8000ca4:	2180      	movs	r1, #128	; 0x80
 8000ca6:	f001 ff71 	bl	8002b8c <USART_GetFlagStatus>
 8000caa:	2800      	cmp	r0, #0
 8000cac:	d0f9      	beq.n	8000ca2 <usart_bare_write+0x6>
		;
	USART_SendData(usx->USARTx, w);
 8000cae:	6860      	ldr	r0, [r4, #4]
 8000cb0:	4629      	mov	r1, r5
//	while (USART_GetFlagStatus(USART3, USART_FLAG_TC ) == RESET) ;
}
 8000cb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
}

void usart_bare_write(Serial * usx, const uint16_t w) {
	while (USART_GetFlagStatus(usx->USARTx, USART_FLAG_TXE ) == RESET)
		;
	USART_SendData(usx->USARTx, w);
 8000cb6:	f001 bebc 	b.w	8002a32 <USART_SendData>

08000cba <usart_write>:
//	while (USART_GetFlagStatus(USART3, USART_FLAG_TC ) == RESET) ;
}

void usart_write(Serial * usx, const uint16_t w) {
 8000cba:	b570      	push	{r4, r5, r6, lr}
 8000cbc:	4604      	mov	r4, r0
 8000cbe:	460e      	mov	r6, r1
	uint16_t waitcount = 3;
	while (buffer_is_full(usx->txring) && (waitcount > 0) ) {
 8000cc0:	2504      	movs	r5, #4
 8000cc2:	e003      	b.n	8000ccc <usart_write+0x12>
		delay_us(667);
 8000cc4:	f240 209b 	movw	r0, #667	; 0x29b
 8000cc8:	f7ff fac8 	bl	800025c <delay_us>
//	while (USART_GetFlagStatus(USART3, USART_FLAG_TC ) == RESET) ;
}

void usart_write(Serial * usx, const uint16_t w) {
	uint16_t waitcount = 3;
	while (buffer_is_full(usx->txring) && (waitcount > 0) ) {
 8000ccc:	68e0      	ldr	r0, [r4, #12]
 8000cce:	f7ff fe78 	bl	80009c2 <buffer_is_full>
 8000cd2:	b118      	cbz	r0, 8000cdc <usart_write+0x22>
 8000cd4:	3d01      	subs	r5, #1
 8000cd6:	b2ad      	uxth	r5, r5
 8000cd8:	2d00      	cmp	r5, #0
 8000cda:	d1f3      	bne.n	8000cc4 <usart_write+0xa>
		delay_us(667);
		waitcount--;
	}
	USART_ITConfig(usx->USARTx, USART_IT_TXE, DISABLE);
 8000cdc:	2200      	movs	r2, #0
 8000cde:	6860      	ldr	r0, [r4, #4]
 8000ce0:	f240 7127 	movw	r1, #1831	; 0x727
 8000ce4:	f001 ff39 	bl	8002b5a <USART_ITConfig>
	buffer_enque(usx->txring, w); //&txring[usx->usid], w);
 8000ce8:	4631      	mov	r1, r6
 8000cea:	68e0      	ldr	r0, [r4, #12]
 8000cec:	f7ff fe77 	bl	80009de <buffer_enque>
	USART_ITConfig(usx->USARTx, USART_IT_TXE, ENABLE);
 8000cf0:	6860      	ldr	r0, [r4, #4]
 8000cf2:	f240 7127 	movw	r1, #1831	; 0x727
 8000cf6:	2201      	movs	r2, #1
}
 8000cf8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		delay_us(667);
		waitcount--;
	}
	USART_ITConfig(usx->USARTx, USART_IT_TXE, DISABLE);
	buffer_enque(usx->txring, w); //&txring[usx->usid], w);
	USART_ITConfig(usx->USARTx, USART_IT_TXE, ENABLE);
 8000cfc:	f001 bf2d 	b.w	8002b5a <USART_ITConfig>

08000d00 <usart_print>:
}

void usart_print(Serial * usx, const char * s) {
 8000d00:	b538      	push	{r3, r4, r5, lr}
 8000d02:	4605      	mov	r5, r0
 8000d04:	1e4c      	subs	r4, r1, #1
	while (*s)
 8000d06:	e002      	b.n	8000d0e <usart_print+0xe>
		usart_write(usx, (uint16_t) *s++);
 8000d08:	4628      	mov	r0, r5
 8000d0a:	f7ff ffd6 	bl	8000cba <usart_write>
	buffer_enque(usx->txring, w); //&txring[usx->usid], w);
	USART_ITConfig(usx->USARTx, USART_IT_TXE, ENABLE);
}

void usart_print(Serial * usx, const char * s) {
	while (*s)
 8000d0e:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8000d12:	2900      	cmp	r1, #0
 8000d14:	d1f8      	bne.n	8000d08 <usart_print+0x8>
		usart_write(usx, (uint16_t) *s++);
}
 8000d16:	bd38      	pop	{r3, r4, r5, pc}

08000d18 <usart_bare_read>:

uint16_t usart_bare_read(USART_TypeDef * USARTx /*usartx[usx]*/) {
	return USART_ReceiveData(USARTx);
 8000d18:	f001 be8f 	b.w	8002a3a <USART_ReceiveData>

08000d1c <usart_read>:
}

uint16_t usart_read(Serial * usx) {
 8000d1c:	b508      	push	{r3, lr}
	uint16_t w = buffer_deque(usx->rxring); //&rxring[usx->usid]);
 8000d1e:	6880      	ldr	r0, [r0, #8]
 8000d20:	f7ff fe80 	bl	8000a24 <buffer_deque>
	if (w == 0xffff)
		return 0; // buffer is empty
	return w;
}
 8000d24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d28:	4298      	cmp	r0, r3
 8000d2a:	bf08      	it	eq
 8000d2c:	2000      	moveq	r0, #0
 8000d2e:	bd08      	pop	{r3, pc}

08000d30 <usart_flush>:

void usart_flush(Serial * usx) {
 8000d30:	b538      	push	{r3, r4, r5, lr}
 8000d32:	4604      	mov	r4, r0
	uint32_t wtill = millis() + 100;
 8000d34:	f7ff fa7c 	bl	8000230 <millis>
 8000d38:	f100 0564 	add.w	r5, r0, #100	; 0x64
	while (buffer_count(usx->txring) > 0) {
 8000d3c:	e00c      	b.n	8000d58 <usart_flush+0x28>
		if (millis() > wtill)
 8000d3e:	f7ff fa77 	bl	8000230 <millis>
 8000d42:	42a8      	cmp	r0, r5
 8000d44:	d908      	bls.n	8000d58 <usart_flush+0x28>
	 USART_SendData(usx->USARTx, buffer_deque(usx->txring)); //&txring[usx->usid]));
	 while (USART_GetFlagStatus(usx->USARTx, USART_FLAG_TC ) == RESET);
	 }
	 USART_ClearITPendingBit(usx->USARTx, USART_IT_TXE );
	 */
	buffer_clear(usx->rxring); //&txring[usx->usid]);
 8000d46:	68a3      	ldr	r3, [r4, #8]

Serial Serial1, Serial2, Serial3, Serial4, Serial5, Serial6;
USARTRing rxring[6], txring[6];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 8000d48:	2200      	movs	r2, #0
 8000d4a:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
	r->tail = 0;
 8000d4e:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
	r->count = 0;
 8000d52:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
 8000d56:	bd38      	pop	{r3, r4, r5, pc}
}

uint16_t buffer_count(USARTRing * r) {
	return r->count;
 8000d58:	68e3      	ldr	r3, [r4, #12]
	return w;
}

void usart_flush(Serial * usx) {
	uint32_t wtill = millis() + 100;
	while (buffer_count(usx->txring) > 0) {
 8000d5a:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d1ed      	bne.n	8000d3e <usart_flush+0xe>
 8000d62:	e7f0      	b.n	8000d46 <usart_flush+0x16>

08000d64 <usart_peek>:
}

uint16_t usart_peek(Serial * usx) {
//	if ( buffer_count(&(usx->rxring)) == 0 )
//		return 0xffff;
	return buffer_peek(usx->rxring); //	rxring[usx->usid].buf[rxring[usx->usid].tail];
 8000d64:	6880      	ldr	r0, [r0, #8]
 8000d66:	f7ff be7b 	b.w	8000a60 <buffer_peek>

08000d6a <usart_available>:
	r->tail = 0;
	r->count = 0;
}

uint16_t buffer_count(USARTRing * r) {
	return r->count;
 8000d6a:	6883      	ldr	r3, [r0, #8]
}

uint16_t usart_available(Serial * usx) {
	return buffer_count(usx->rxring);
	//return buffer_count(&rxring[usx->usid]);
}
 8000d6c:	f8b3 0104 	ldrh.w	r0, [r3, #260]	; 0x104
 8000d70:	4770      	bx	lr

08000d72 <USART1_IRQHandler>:

// this is the interrupt request handler (IRQ) for ALL USART3 interrupts

void USART1_IRQHandler(void) {
 8000d72:	b510      	push	{r4, lr}
	if (USART_GetITStatus(USART1, USART_IT_RXNE )) {
 8000d74:	4818      	ldr	r0, [pc, #96]	; (8000dd8 <USART1_IRQHandler+0x66>)
 8000d76:	f240 5125 	movw	r1, #1317	; 0x525
 8000d7a:	f001 ff10 	bl	8002b9e <USART_GetITStatus>
 8000d7e:	b140      	cbz	r0, 8000d92 <USART1_IRQHandler+0x20>
		buffer_enque(Serial1.rxring,
 8000d80:	4b16      	ldr	r3, [pc, #88]	; (8000ddc <USART1_IRQHandler+0x6a>)
 8000d82:	4815      	ldr	r0, [pc, #84]	; (8000dd8 <USART1_IRQHandler+0x66>)
 8000d84:	689c      	ldr	r4, [r3, #8]
 8000d86:	f001 fe58 	bl	8002a3a <USART_ReceiveData>
 8000d8a:	4601      	mov	r1, r0
 8000d8c:	4620      	mov	r0, r4
 8000d8e:	f7ff fe26 	bl	80009de <buffer_enque>
		//&rxring[USART1Serial],
				USART_ReceiveData(USART1 ));
	}

	if (USART_GetITStatus(USART1, USART_IT_TXE )) {
 8000d92:	4811      	ldr	r0, [pc, #68]	; (8000dd8 <USART1_IRQHandler+0x66>)
 8000d94:	f240 7127 	movw	r1, #1831	; 0x727
 8000d98:	f001 ff01 	bl	8002b9e <USART_GetITStatus>
 8000d9c:	2800      	cmp	r0, #0
 8000d9e:	d019      	beq.n	8000dd4 <USART1_IRQHandler+0x62>
		if (Serial1.rxring->count
 8000da0:	4b0e      	ldr	r3, [pc, #56]	; (8000ddc <USART1_IRQHandler+0x6a>)
 8000da2:	689a      	ldr	r2, [r3, #8]
 8000da4:	f8b2 2104 	ldrh.w	r2, [r2, #260]	; 0x104
 8000da8:	b95a      	cbnz	r2, 8000dc2 <USART1_IRQHandler+0x50>
		//txring[USART1Serial].count
				== 0) {
			USART_ITConfig(USART1, USART_IT_TXE, (FunctionalState) DISABLE);
 8000daa:	480b      	ldr	r0, [pc, #44]	; (8000dd8 <USART1_IRQHandler+0x66>)
 8000dac:	f240 7127 	movw	r1, #1831	; 0x727
 8000db0:	f001 fed3 	bl	8002b5a <USART_ITConfig>
			USART_ClearITPendingBit(USART1, USART_IT_TXE );
 8000db4:	4808      	ldr	r0, [pc, #32]	; (8000dd8 <USART1_IRQHandler+0x66>)
 8000db6:	f240 7127 	movw	r1, #1831	; 0x727
		} else {
			USART_SendData(USART1, buffer_deque(Serial1.txring)); // &txring[USART1Serial]) );
		}
	}
}
 8000dba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (USART_GetITStatus(USART1, USART_IT_TXE )) {
		if (Serial1.rxring->count
		//txring[USART1Serial].count
				== 0) {
			USART_ITConfig(USART1, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART1, USART_IT_TXE );
 8000dbe:	f001 bf0e 	b.w	8002bde <USART_ClearITPendingBit>
		} else {
			USART_SendData(USART1, buffer_deque(Serial1.txring)); // &txring[USART1Serial]) );
 8000dc2:	68d8      	ldr	r0, [r3, #12]
 8000dc4:	f7ff fe2e 	bl	8000a24 <buffer_deque>
 8000dc8:	4601      	mov	r1, r0
 8000dca:	4803      	ldr	r0, [pc, #12]	; (8000dd8 <USART1_IRQHandler+0x66>)
		}
	}
}
 8000dcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		//txring[USART1Serial].count
				== 0) {
			USART_ITConfig(USART1, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART1, USART_IT_TXE );
		} else {
			USART_SendData(USART1, buffer_deque(Serial1.txring)); // &txring[USART1Serial]) );
 8000dd0:	f001 be2f 	b.w	8002a32 <USART_SendData>
 8000dd4:	bd10      	pop	{r4, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40011000 	.word	0x40011000
 8000ddc:	20000cc8 	.word	0x20000cc8

08000de0 <USART2_IRQHandler>:
		}
	}
}

void USART2_IRQHandler(void) {
 8000de0:	b510      	push	{r4, lr}
	if (USART_GetITStatus(USART2, USART_IT_RXNE )) {
 8000de2:	4818      	ldr	r0, [pc, #96]	; (8000e44 <USART2_IRQHandler+0x64>)
 8000de4:	f240 5125 	movw	r1, #1317	; 0x525
 8000de8:	f001 fed9 	bl	8002b9e <USART_GetITStatus>
 8000dec:	b140      	cbz	r0, 8000e00 <USART2_IRQHandler+0x20>
		buffer_enque(Serial2.rxring //&rxring[USART2Serial]/
 8000dee:	4b16      	ldr	r3, [pc, #88]	; (8000e48 <USART2_IRQHandler+0x68>)
 8000df0:	4814      	ldr	r0, [pc, #80]	; (8000e44 <USART2_IRQHandler+0x64>)
 8000df2:	689c      	ldr	r4, [r3, #8]
 8000df4:	f001 fe21 	bl	8002a3a <USART_ReceiveData>
 8000df8:	4601      	mov	r1, r0
 8000dfa:	4620      	mov	r0, r4
 8000dfc:	f7ff fdef 	bl	80009de <buffer_enque>
				, USART_ReceiveData(USART2 ));
	}
	if (USART_GetITStatus(USART2, USART_IT_TXE )) {
 8000e00:	4810      	ldr	r0, [pc, #64]	; (8000e44 <USART2_IRQHandler+0x64>)
 8000e02:	f240 7127 	movw	r1, #1831	; 0x727
 8000e06:	f001 feca 	bl	8002b9e <USART_GetITStatus>
 8000e0a:	2800      	cmp	r0, #0
 8000e0c:	d018      	beq.n	8000e40 <USART2_IRQHandler+0x60>
		if (Serial2.txring->count //txring[USART2Serial].count
 8000e0e:	4b0e      	ldr	r3, [pc, #56]	; (8000e48 <USART2_IRQHandler+0x68>)
 8000e10:	68d8      	ldr	r0, [r3, #12]
 8000e12:	f8b0 2104 	ldrh.w	r2, [r0, #260]	; 0x104
 8000e16:	b95a      	cbnz	r2, 8000e30 <USART2_IRQHandler+0x50>
		== 0) {
			USART_ITConfig(USART2, USART_IT_TXE, (FunctionalState) DISABLE);
 8000e18:	480a      	ldr	r0, [pc, #40]	; (8000e44 <USART2_IRQHandler+0x64>)
 8000e1a:	f240 7127 	movw	r1, #1831	; 0x727
 8000e1e:	f001 fe9c 	bl	8002b5a <USART_ITConfig>
			USART_ClearITPendingBit(USART2, USART_IT_TXE );
 8000e22:	4808      	ldr	r0, [pc, #32]	; (8000e44 <USART2_IRQHandler+0x64>)
 8000e24:	f240 7127 	movw	r1, #1831	; 0x727
		} else {
			USART_SendData(USART2, buffer_deque(Serial2.txring)); //&txring[USART2Serial]));
		}
	}
}
 8000e28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	}
	if (USART_GetITStatus(USART2, USART_IT_TXE )) {
		if (Serial2.txring->count //txring[USART2Serial].count
		== 0) {
			USART_ITConfig(USART2, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART2, USART_IT_TXE );
 8000e2c:	f001 bed7 	b.w	8002bde <USART_ClearITPendingBit>
		} else {
			USART_SendData(USART2, buffer_deque(Serial2.txring)); //&txring[USART2Serial]));
 8000e30:	f7ff fdf8 	bl	8000a24 <buffer_deque>
 8000e34:	4601      	mov	r1, r0
 8000e36:	4803      	ldr	r0, [pc, #12]	; (8000e44 <USART2_IRQHandler+0x64>)
		}
	}
}
 8000e38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if (Serial2.txring->count //txring[USART2Serial].count
		== 0) {
			USART_ITConfig(USART2, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART2, USART_IT_TXE );
		} else {
			USART_SendData(USART2, buffer_deque(Serial2.txring)); //&txring[USART2Serial]));
 8000e3c:	f001 bdf9 	b.w	8002a32 <USART_SendData>
 8000e40:	bd10      	pop	{r4, pc}
 8000e42:	bf00      	nop
 8000e44:	40004400 	.word	0x40004400
 8000e48:	2000132c 	.word	0x2000132c

08000e4c <USART3_IRQHandler>:
		}
	}
}

void USART3_IRQHandler(void) {
 8000e4c:	b510      	push	{r4, lr}
	if (USART_GetITStatus(USART3, USART_IT_RXNE )) {
 8000e4e:	4818      	ldr	r0, [pc, #96]	; (8000eb0 <USART3_IRQHandler+0x64>)
 8000e50:	f240 5125 	movw	r1, #1317	; 0x525
 8000e54:	f001 fea3 	bl	8002b9e <USART_GetITStatus>
 8000e58:	b140      	cbz	r0, 8000e6c <USART3_IRQHandler+0x20>
		buffer_enque(Serial3.rxring /*&rxring[USART3Serial]*/,
 8000e5a:	4b16      	ldr	r3, [pc, #88]	; (8000eb4 <USART3_IRQHandler+0x68>)
 8000e5c:	4814      	ldr	r0, [pc, #80]	; (8000eb0 <USART3_IRQHandler+0x64>)
 8000e5e:	689c      	ldr	r4, [r3, #8]
 8000e60:	f001 fdeb 	bl	8002a3a <USART_ReceiveData>
 8000e64:	4601      	mov	r1, r0
 8000e66:	4620      	mov	r0, r4
 8000e68:	f7ff fdb9 	bl	80009de <buffer_enque>
				USART_ReceiveData(USART3 ));
	}

	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
 8000e6c:	4810      	ldr	r0, [pc, #64]	; (8000eb0 <USART3_IRQHandler+0x64>)
 8000e6e:	f240 7127 	movw	r1, #1831	; 0x727
 8000e72:	f001 fe94 	bl	8002b9e <USART_GetITStatus>
 8000e76:	2800      	cmp	r0, #0
 8000e78:	d018      	beq.n	8000eac <USART3_IRQHandler+0x60>
		if (Serial3.txring->count == 0) {
 8000e7a:	4b0e      	ldr	r3, [pc, #56]	; (8000eb4 <USART3_IRQHandler+0x68>)
 8000e7c:	68d8      	ldr	r0, [r3, #12]
 8000e7e:	f8b0 2104 	ldrh.w	r2, [r0, #260]	; 0x104
 8000e82:	b95a      	cbnz	r2, 8000e9c <USART3_IRQHandler+0x50>
			USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) DISABLE);
 8000e84:	480a      	ldr	r0, [pc, #40]	; (8000eb0 <USART3_IRQHandler+0x64>)
 8000e86:	f240 7127 	movw	r1, #1831	; 0x727
 8000e8a:	f001 fe66 	bl	8002b5a <USART_ITConfig>
			USART_ClearITPendingBit(USART3, USART_IT_TXE );
 8000e8e:	4808      	ldr	r0, [pc, #32]	; (8000eb0 <USART3_IRQHandler+0x64>)
 8000e90:	f240 7127 	movw	r1, #1831	; 0x727
		} else {
			USART_SendData(USART3,
					buffer_deque(Serial3.txring /*&txring[USART3Serial]*/));
		}
	}
}
 8000e94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	}

	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
		if (Serial3.txring->count == 0) {
			USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART3, USART_IT_TXE );
 8000e98:	f001 bea1 	b.w	8002bde <USART_ClearITPendingBit>
		} else {
			USART_SendData(USART3,
 8000e9c:	f7ff fdc2 	bl	8000a24 <buffer_deque>
 8000ea0:	4601      	mov	r1, r0
 8000ea2:	4803      	ldr	r0, [pc, #12]	; (8000eb0 <USART3_IRQHandler+0x64>)
					buffer_deque(Serial3.txring /*&txring[USART3Serial]*/));
		}
	}
}
 8000ea4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
		if (Serial3.txring->count == 0) {
			USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART3, USART_IT_TXE );
		} else {
			USART_SendData(USART3,
 8000ea8:	f001 bdc3 	b.w	8002a32 <USART_SendData>
 8000eac:	bd10      	pop	{r4, pc}
 8000eae:	bf00      	nop
 8000eb0:	40004800 	.word	0x40004800
 8000eb4:	20000cd8 	.word	0x20000cd8

08000eb8 <UART4_IRQHandler>:
					buffer_deque(Serial3.txring /*&txring[USART3Serial]*/));
		}
	}
}

void UART4_IRQHandler(void) {
 8000eb8:	b510      	push	{r4, lr}
	if (USART_GetITStatus(UART4, USART_IT_RXNE )) {
 8000eba:	4818      	ldr	r0, [pc, #96]	; (8000f1c <UART4_IRQHandler+0x64>)
 8000ebc:	f240 5125 	movw	r1, #1317	; 0x525
 8000ec0:	f001 fe6d 	bl	8002b9e <USART_GetITStatus>
 8000ec4:	b140      	cbz	r0, 8000ed8 <UART4_IRQHandler+0x20>
		buffer_enque(Serial4.rxring, USART_ReceiveData(UART4 ));
 8000ec6:	4b16      	ldr	r3, [pc, #88]	; (8000f20 <UART4_IRQHandler+0x68>)
 8000ec8:	4814      	ldr	r0, [pc, #80]	; (8000f1c <UART4_IRQHandler+0x64>)
 8000eca:	689c      	ldr	r4, [r3, #8]
 8000ecc:	f001 fdb5 	bl	8002a3a <USART_ReceiveData>
 8000ed0:	4601      	mov	r1, r0
 8000ed2:	4620      	mov	r0, r4
 8000ed4:	f7ff fd83 	bl	80009de <buffer_enque>
	}

	if (USART_GetITStatus(UART4, USART_IT_TXE )) {
 8000ed8:	4810      	ldr	r0, [pc, #64]	; (8000f1c <UART4_IRQHandler+0x64>)
 8000eda:	f240 7127 	movw	r1, #1831	; 0x727
 8000ede:	f001 fe5e 	bl	8002b9e <USART_GetITStatus>
 8000ee2:	2800      	cmp	r0, #0
 8000ee4:	d018      	beq.n	8000f18 <UART4_IRQHandler+0x60>
		if (Serial4.txring->count == 0) {
 8000ee6:	4b0e      	ldr	r3, [pc, #56]	; (8000f20 <UART4_IRQHandler+0x68>)
 8000ee8:	68d8      	ldr	r0, [r3, #12]
 8000eea:	f8b0 2104 	ldrh.w	r2, [r0, #260]	; 0x104
 8000eee:	b95a      	cbnz	r2, 8000f08 <UART4_IRQHandler+0x50>
			USART_ITConfig(UART4, USART_IT_TXE, (FunctionalState) DISABLE);
 8000ef0:	480a      	ldr	r0, [pc, #40]	; (8000f1c <UART4_IRQHandler+0x64>)
 8000ef2:	f240 7127 	movw	r1, #1831	; 0x727
 8000ef6:	f001 fe30 	bl	8002b5a <USART_ITConfig>
			USART_ClearITPendingBit(UART4, USART_IT_TXE );
 8000efa:	4808      	ldr	r0, [pc, #32]	; (8000f1c <UART4_IRQHandler+0x64>)
 8000efc:	f240 7127 	movw	r1, #1831	; 0x727
		} else {
			USART_SendData(UART4, buffer_deque(Serial4.txring));
		}
	}
}
 8000f00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	}

	if (USART_GetITStatus(UART4, USART_IT_TXE )) {
		if (Serial4.txring->count == 0) {
			USART_ITConfig(UART4, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(UART4, USART_IT_TXE );
 8000f04:	f001 be6b 	b.w	8002bde <USART_ClearITPendingBit>
		} else {
			USART_SendData(UART4, buffer_deque(Serial4.txring));
 8000f08:	f7ff fd8c 	bl	8000a24 <buffer_deque>
 8000f0c:	4601      	mov	r1, r0
 8000f0e:	4803      	ldr	r0, [pc, #12]	; (8000f1c <UART4_IRQHandler+0x64>)
		}
	}
}
 8000f10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (USART_GetITStatus(UART4, USART_IT_TXE )) {
		if (Serial4.txring->count == 0) {
			USART_ITConfig(UART4, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(UART4, USART_IT_TXE );
		} else {
			USART_SendData(UART4, buffer_deque(Serial4.txring));
 8000f14:	f001 bd8d 	b.w	8002a32 <USART_SendData>
 8000f18:	bd10      	pop	{r4, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40004c00 	.word	0x40004c00
 8000f20:	2000131c 	.word	0x2000131c

08000f24 <NVIC_PriorityGroupConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8000f24:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8000f28:	4b02      	ldr	r3, [pc, #8]	; (8000f34 <NVIC_PriorityGroupConfig+0x10>)
 8000f2a:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8000f2e:	60d8      	str	r0, [r3, #12]
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	e000ed00 	.word	0xe000ed00

08000f38 <NVIC_Init>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000f38:	78c3      	ldrb	r3, [r0, #3]
 8000f3a:	b30b      	cbz	r3, 8000f80 <NVIC_Init+0x48>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000f3c:	4b16      	ldr	r3, [pc, #88]	; (8000f98 <NVIC_Init+0x60>)
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000f3e:	7841      	ldrb	r1, [r0, #1]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000f40:	68db      	ldr	r3, [r3, #12]
 8000f42:	43db      	mvns	r3, r3
 8000f44:	f3c3 2302 	ubfx	r3, r3, #8, #3
    tmppre = (0x4 - tmppriority);
 8000f48:	f1c3 0204 	rsb	r2, r3, #4
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000f4c:	b2d2      	uxtb	r2, r2
 8000f4e:	fa01 f202 	lsl.w	r2, r1, r2
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
 8000f52:	210f      	movs	r1, #15
 8000f54:	fa41 f303 	asr.w	r3, r1, r3

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000f58:	7881      	ldrb	r1, [r0, #2]
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000f5a:	b2d2      	uxtb	r2, r2
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000f5c:	400b      	ands	r3, r1
 8000f5e:	431a      	orrs	r2, r3
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000f60:	7803      	ldrb	r3, [r0, #0]
 8000f62:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000f66:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
        
    tmppriority = tmppriority << 0x04;
 8000f6a:	0112      	lsls	r2, r2, #4
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000f6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000f70:	7803      	ldrb	r3, [r0, #0]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000f72:	2201      	movs	r2, #1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000f74:	0959      	lsrs	r1, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000f76:	f003 031f 	and.w	r3, r3, #31
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	e007      	b.n	8000f90 <NVIC_Init+0x58>
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000f80:	7803      	ldrb	r3, [r0, #0]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000f82:	2201      	movs	r2, #1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000f84:	0959      	lsrs	r1, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000f86:	f003 031f 	and.w	r3, r3, #31
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000f8e:	3120      	adds	r1, #32
 8000f90:	4a02      	ldr	r2, [pc, #8]	; (8000f9c <NVIC_Init+0x64>)
 8000f92:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8000f96:	4770      	bx	lr
 8000f98:	e000ed00 	.word	0xe000ed00
 8000f9c:	e000e100 	.word	0xe000e100

08000fa0 <NVIC_SetVectorTable>:
{ 
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 8000fa0:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
 8000fa4:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 8000fa8:	4b01      	ldr	r3, [pc, #4]	; (8000fb0 <NVIC_SetVectorTable+0x10>)
 8000faa:	4308      	orrs	r0, r1
 8000fac:	6098      	str	r0, [r3, #8]
 8000fae:	4770      	bx	lr
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT: Low Power Sleep on Exit.
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
 8000fb4:	4b04      	ldr	r3, [pc, #16]	; (8000fc8 <NVIC_SystemLPConfig+0x14>)
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
  {
    SCB->SCR |= LowPowerMode;
 8000fb6:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 8000fb8:	b109      	cbz	r1, 8000fbe <NVIC_SystemLPConfig+0xa>
  {
    SCB->SCR |= LowPowerMode;
 8000fba:	4310      	orrs	r0, r2
 8000fbc:	e001      	b.n	8000fc2 <NVIC_SystemLPConfig+0xe>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 8000fbe:	ea22 0000 	bic.w	r0, r2, r0
 8000fc2:	6118      	str	r0, [r3, #16]
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
 8000fcc:	4b04      	ldr	r3, [pc, #16]	; (8000fe0 <SysTick_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8000fce:	681a      	ldr	r2, [r3, #0]
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 8000fd0:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8000fd2:	bf0c      	ite	eq
 8000fd4:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 8000fd8:	f022 0204 	bicne.w	r2, r2, #4
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	4770      	bx	lr
 8000fe0:	e000e010 	.word	0xe000e010

08000fe4 <GPIO_DeInit>:
  * @note   By default, The GPIO pins are configured in input floating mode (except JTAG pins).
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 8000fe4:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
 8000fe6:	4b2c      	ldr	r3, [pc, #176]	; (8001098 <GPIO_DeInit+0xb4>)
 8000fe8:	4298      	cmp	r0, r3
 8000fea:	d105      	bne.n	8000ff8 <GPIO_DeInit+0x14>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8000fec:	2001      	movs	r0, #1
 8000fee:	4601      	mov	r1, r0
 8000ff0:	f000 fc44 	bl	800187c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 8000ff4:	2001      	movs	r0, #1
 8000ff6:	e048      	b.n	800108a <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOB)
 8000ff8:	4b28      	ldr	r3, [pc, #160]	; (800109c <GPIO_DeInit+0xb8>)
 8000ffa:	4298      	cmp	r0, r3
 8000ffc:	d105      	bne.n	800100a <GPIO_DeInit+0x26>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8000ffe:	2002      	movs	r0, #2
 8001000:	2101      	movs	r1, #1
 8001002:	f000 fc3b 	bl	800187c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 8001006:	2002      	movs	r0, #2
 8001008:	e03f      	b.n	800108a <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOC)
 800100a:	4b25      	ldr	r3, [pc, #148]	; (80010a0 <GPIO_DeInit+0xbc>)
 800100c:	4298      	cmp	r0, r3
 800100e:	d105      	bne.n	800101c <GPIO_DeInit+0x38>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8001010:	2004      	movs	r0, #4
 8001012:	2101      	movs	r1, #1
 8001014:	f000 fc32 	bl	800187c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 8001018:	2004      	movs	r0, #4
 800101a:	e036      	b.n	800108a <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOD)
 800101c:	4b21      	ldr	r3, [pc, #132]	; (80010a4 <GPIO_DeInit+0xc0>)
 800101e:	4298      	cmp	r0, r3
 8001020:	d105      	bne.n	800102e <GPIO_DeInit+0x4a>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8001022:	2008      	movs	r0, #8
 8001024:	2101      	movs	r1, #1
 8001026:	f000 fc29 	bl	800187c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 800102a:	2008      	movs	r0, #8
 800102c:	e02d      	b.n	800108a <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOE)
 800102e:	4b1e      	ldr	r3, [pc, #120]	; (80010a8 <GPIO_DeInit+0xc4>)
 8001030:	4298      	cmp	r0, r3
 8001032:	d105      	bne.n	8001040 <GPIO_DeInit+0x5c>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 8001034:	2010      	movs	r0, #16
 8001036:	2101      	movs	r1, #1
 8001038:	f000 fc20 	bl	800187c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 800103c:	2010      	movs	r0, #16
 800103e:	e024      	b.n	800108a <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOF)
 8001040:	4b1a      	ldr	r3, [pc, #104]	; (80010ac <GPIO_DeInit+0xc8>)
 8001042:	4298      	cmp	r0, r3
 8001044:	d105      	bne.n	8001052 <GPIO_DeInit+0x6e>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 8001046:	2020      	movs	r0, #32
 8001048:	2101      	movs	r1, #1
 800104a:	f000 fc17 	bl	800187c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 800104e:	2020      	movs	r0, #32
 8001050:	e01b      	b.n	800108a <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOG)
 8001052:	4b17      	ldr	r3, [pc, #92]	; (80010b0 <GPIO_DeInit+0xcc>)
 8001054:	4298      	cmp	r0, r3
 8001056:	d105      	bne.n	8001064 <GPIO_DeInit+0x80>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 8001058:	2040      	movs	r0, #64	; 0x40
 800105a:	2101      	movs	r1, #1
 800105c:	f000 fc0e 	bl	800187c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 8001060:	2040      	movs	r0, #64	; 0x40
 8001062:	e012      	b.n	800108a <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOH)
 8001064:	4b13      	ldr	r3, [pc, #76]	; (80010b4 <GPIO_DeInit+0xd0>)
 8001066:	4298      	cmp	r0, r3
 8001068:	d105      	bne.n	8001076 <GPIO_DeInit+0x92>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 800106a:	2080      	movs	r0, #128	; 0x80
 800106c:	2101      	movs	r1, #1
 800106e:	f000 fc05 	bl	800187c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 8001072:	2080      	movs	r0, #128	; 0x80
 8001074:	e009      	b.n	800108a <GPIO_DeInit+0xa6>
  }
  else
  {
    if (GPIOx == GPIOI)
 8001076:	4b10      	ldr	r3, [pc, #64]	; (80010b8 <GPIO_DeInit+0xd4>)
 8001078:	4298      	cmp	r0, r3
 800107a:	d10b      	bne.n	8001094 <GPIO_DeInit+0xb0>
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 800107c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001080:	2101      	movs	r1, #1
 8001082:	f000 fbfb 	bl	800187c <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 8001086:	f44f 7080 	mov.w	r0, #256	; 0x100
 800108a:	2100      	movs	r1, #0
    }
  }
}
 800108c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (GPIOx == GPIOI)
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 8001090:	f000 bbf4 	b.w	800187c <RCC_AHB1PeriphResetCmd>
 8001094:	bd08      	pop	{r3, pc}
 8001096:	bf00      	nop
 8001098:	40020000 	.word	0x40020000
 800109c:	40020400 	.word	0x40020400
 80010a0:	40020800 	.word	0x40020800
 80010a4:	40020c00 	.word	0x40020c00
 80010a8:	40021000 	.word	0x40021000
 80010ac:	40021400 	.word	0x40021400
 80010b0:	40021800 	.word	0x40021800
 80010b4:	40021c00 	.word	0x40021c00
 80010b8:	40022000 	.word	0x40022000

080010bc <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80010bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
  {
    pos = ((uint32_t)0x01) << pinpos;
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80010c0:	680f      	ldr	r7, [r1, #0]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80010c2:	2300      	movs	r3, #0
  {
    pos = ((uint32_t)0x01) << pinpos;
 80010c4:	f04f 0c01 	mov.w	ip, #1
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80010c8:	f04f 0803 	mov.w	r8, #3

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
  {
    pos = ((uint32_t)0x01) << pinpos;
 80010cc:	fa0c f203 	lsl.w	r2, ip, r3
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80010d0:	ea02 0507 	and.w	r5, r2, r7

    if (currentpin == pos)
 80010d4:	4295      	cmp	r5, r2
 80010d6:	d131      	bne.n	800113c <GPIO_Init+0x80>
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
 80010d8:	005a      	lsls	r2, r3, #1
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80010da:	6806      	ldr	r6, [r0, #0]
 80010dc:	fa08 f402 	lsl.w	r4, r8, r2
 80010e0:	43e4      	mvns	r4, r4
 80010e2:	4026      	ands	r6, r4
 80010e4:	6006      	str	r6, [r0, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80010e6:	790e      	ldrb	r6, [r1, #4]
 80010e8:	f8d0 9000 	ldr.w	r9, [r0]
 80010ec:	fa06 fa02 	lsl.w	sl, r6, r2

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80010f0:	3e01      	subs	r6, #1
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80010f2:	ea4a 0909 	orr.w	r9, sl, r9

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80010f6:	2e01      	cmp	r6, #1
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80010f8:	f8c0 9000 	str.w	r9, [r0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80010fc:	d815      	bhi.n	800112a <GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80010fe:	6886      	ldr	r6, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8001100:	f891 9005 	ldrb.w	r9, [r1, #5]
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8001104:	4026      	ands	r6, r4
 8001106:	6086      	str	r6, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8001108:	6886      	ldr	r6, [r0, #8]
 800110a:	fa09 f902 	lsl.w	r9, r9, r2
 800110e:	ea49 0606 	orr.w	r6, r9, r6
 8001112:	6086      	str	r6, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8001114:	6846      	ldr	r6, [r0, #4]
 8001116:	ea26 0505 	bic.w	r5, r6, r5
 800111a:	6045      	str	r5, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800111c:	798d      	ldrb	r5, [r1, #6]
 800111e:	6846      	ldr	r6, [r0, #4]
 8001120:	fa05 f503 	lsl.w	r5, r5, r3
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
}
 8001124:	b2ad      	uxth	r5, r5
        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8001126:	4335      	orrs	r5, r6
 8001128:	6045      	str	r5, [r0, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 800112a:	68c5      	ldr	r5, [r0, #12]
 800112c:	402c      	ands	r4, r5
 800112e:	60c4      	str	r4, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8001130:	79cd      	ldrb	r5, [r1, #7]
 8001132:	68c4      	ldr	r4, [r0, #12]
 8001134:	fa05 f202 	lsl.w	r2, r5, r2
 8001138:	4322      	orrs	r2, r4
 800113a:	60c2      	str	r2, [r0, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800113c:	3301      	adds	r3, #1
 800113e:	2b10      	cmp	r3, #16
 8001140:	d1c4      	bne.n	80010cc <GPIO_Init+0x10>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8001142:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08001146 <GPIO_StructInit>:
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8001146:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800114a:	6003      	str	r3, [r0, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 800114c:	2300      	movs	r3, #0
 800114e:	7103      	strb	r3, [r0, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8001150:	7143      	strb	r3, [r0, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 8001152:	7183      	strb	r3, [r0, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001154:	71c3      	strb	r3, [r0, #7]
 8001156:	4770      	bx	lr

08001158 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001158:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0x00010000;
 800115a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800115e:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
 8001160:	9b01      	ldr	r3, [sp, #4]
 8001162:	430b      	orrs	r3, r1
 8001164:	9301      	str	r3, [sp, #4]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8001166:	9b01      	ldr	r3, [sp, #4]
 8001168:	61c3      	str	r3, [r0, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 800116a:	61c1      	str	r1, [r0, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 800116c:	9b01      	ldr	r3, [sp, #4]
 800116e:	61c3      	str	r3, [r0, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8001170:	69c3      	ldr	r3, [r0, #28]
 8001172:	9301      	str	r3, [sp, #4]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8001174:	69c3      	ldr	r3, [r0, #28]
 8001176:	9301      	str	r3, [sp, #4]
}
 8001178:	b002      	add	sp, #8
 800117a:	4770      	bx	lr

0800117c <GPIO_ReadInputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 800117c:	6903      	ldr	r3, [r0, #16]
 800117e:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 8001180:	bf0c      	ite	eq
 8001182:	2000      	moveq	r0, #0
 8001184:	2001      	movne	r0, #1
 8001186:	4770      	bx	lr

08001188 <GPIO_ReadInputData>:
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 8001188:	6900      	ldr	r0, [r0, #16]
}
 800118a:	b280      	uxth	r0, r0
 800118c:	4770      	bx	lr

0800118e <GPIO_ReadOutputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 800118e:	6943      	ldr	r3, [r0, #20]
 8001190:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 8001192:	bf0c      	ite	eq
 8001194:	2000      	moveq	r0, #0
 8001196:	2001      	movne	r0, #1
 8001198:	4770      	bx	lr

0800119a <GPIO_ReadOutputData>:
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
 800119a:	6940      	ldr	r0, [r0, #20]
}
 800119c:	b280      	uxth	r0, r0
 800119e:	4770      	bx	lr

080011a0 <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 80011a0:	8301      	strh	r1, [r0, #24]
 80011a2:	4770      	bx	lr

080011a4 <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 80011a4:	8341      	strh	r1, [r0, #26]
 80011a6:	4770      	bx	lr

080011a8 <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 80011a8:	b10a      	cbz	r2, 80011ae <GPIO_WriteBit+0x6>
  {
    GPIOx->BSRRL = GPIO_Pin;
 80011aa:	8301      	strh	r1, [r0, #24]
 80011ac:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 80011ae:	8341      	strh	r1, [r0, #26]
 80011b0:	4770      	bx	lr

080011b2 <GPIO_Write>:
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 80011b2:	6141      	str	r1, [r0, #20]
 80011b4:	4770      	bx	lr

080011b6 <GPIO_ToggleBits>:
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 80011b6:	6943      	ldr	r3, [r0, #20]
 80011b8:	4059      	eors	r1, r3
 80011ba:	6141      	str	r1, [r0, #20]
 80011bc:	4770      	bx	lr

080011be <GPIO_PinAFConfig>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80011be:	f001 0307 	and.w	r3, r1, #7
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80011c2:	08c9      	lsrs	r1, r1, #3
 80011c4:	3108      	adds	r1, #8
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80011c6:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80011c8:	009b      	lsls	r3, r3, #2
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80011ca:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
 80011ce:	240f      	movs	r4, #15
 80011d0:	fa04 f403 	lsl.w	r4, r4, r3
 80011d4:	ea25 0404 	bic.w	r4, r5, r4
 80011d8:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80011dc:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80011e0:	fa02 f203 	lsl.w	r2, r2, r3
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80011e4:	4314      	orrs	r4, r2
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80011e6:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
 80011ea:	bd30      	pop	{r4, r5, pc}

080011ec <I2C_DeInit>:
  * @brief  Deinitialize the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 80011ec:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 80011ee:	4b13      	ldr	r3, [pc, #76]	; (800123c <I2C_DeInit+0x50>)
 80011f0:	4298      	cmp	r0, r3
 80011f2:	d107      	bne.n	8001204 <I2C_DeInit+0x18>
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 80011f4:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80011f8:	2101      	movs	r1, #1
 80011fa:	f000 fb63 	bl	80018c4 <RCC_APB1PeriphResetCmd>
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
 80011fe:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001202:	e014      	b.n	800122e <I2C_DeInit+0x42>
  }
  else if (I2Cx == I2C2)
 8001204:	4b0e      	ldr	r3, [pc, #56]	; (8001240 <I2C_DeInit+0x54>)
 8001206:	4298      	cmp	r0, r3
 8001208:	d107      	bne.n	800121a <I2C_DeInit+0x2e>
  {
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 800120a:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800120e:	2101      	movs	r1, #1
 8001210:	f000 fb58 	bl	80018c4 <RCC_APB1PeriphResetCmd>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
 8001214:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001218:	e009      	b.n	800122e <I2C_DeInit+0x42>
  }
  else 
  {
    if (I2Cx == I2C3)
 800121a:	4b0a      	ldr	r3, [pc, #40]	; (8001244 <I2C_DeInit+0x58>)
 800121c:	4298      	cmp	r0, r3
 800121e:	d10b      	bne.n	8001238 <I2C_DeInit+0x4c>
    {
      /* Enable I2C3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
 8001220:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001224:	2101      	movs	r1, #1
 8001226:	f000 fb4d 	bl	80018c4 <RCC_APB1PeriphResetCmd>
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 800122a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800122e:	2100      	movs	r1, #0
    }
  }
}
 8001230:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if (I2Cx == I2C3)
    {
      /* Enable I2C3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 8001234:	f000 bb46 	b.w	80018c4 <RCC_APB1PeriphResetCmd>
 8001238:	bd08      	pop	{r3, pc}
 800123a:	bf00      	nop
 800123c:	40005400 	.word	0x40005400
 8001240:	40005800 	.word	0x40005800
 8001244:	40005c00 	.word	0x40005c00

08001248 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8001248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800124a:	b085      	sub	sp, #20
 800124c:	4604      	mov	r4, r0
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 800124e:	8886      	ldrh	r6, [r0, #4]
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 8001250:	4668      	mov	r0, sp
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8001252:	460d      	mov	r5, r1
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 8001254:	f000 fa66 	bl	8001724 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 8001258:	9902      	ldr	r1, [sp, #8]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 800125a:	482b      	ldr	r0, [pc, #172]	; (8001308 <I2C_Init+0xc0>)
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 800125c:	682b      	ldr	r3, [r5, #0]

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 800125e:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
 8001262:	0436      	lsls	r6, r6, #16
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
  pclk1 = rcc_clocks.PCLK1_Frequency;
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 8001264:	fbb1 f0f0 	udiv	r0, r1, r0

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 8001268:	0c36      	lsrs	r6, r6, #16
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
  pclk1 = rcc_clocks.PCLK1_Frequency;
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 800126a:	b287      	uxth	r7, r0
  tmpreg |= freqrange;
 800126c:	433e      	orrs	r6, r7
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 800126e:	80a6      	strh	r6, [r4, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8001270:	8822      	ldrh	r2, [r4, #0]
 8001272:	f022 0201 	bic.w	r2, r2, #1
 8001276:	0412      	lsls	r2, r2, #16
 8001278:	0c12      	lsrs	r2, r2, #16
 800127a:	8022      	strh	r2, [r4, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 800127c:	4a23      	ldr	r2, [pc, #140]	; (800130c <I2C_Init+0xc4>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d809      	bhi.n	8001296 <I2C_Init+0x4e>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	fbb1 f3f3 	udiv	r3, r1, r3
 8001288:	b29b      	uxth	r3, r3
      result = 0x04;  
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 800128a:	3701      	adds	r7, #1
 800128c:	8427      	strh	r7, [r4, #32]
    {
      /* Set minimum allowed value */
      result = 0x04;  
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 800128e:	2b03      	cmp	r3, #3
 8001290:	bf98      	it	ls
 8001292:	2304      	movls	r3, #4
 8001294:	e01f      	b.n	80012d6 <I2C_Init+0x8e>
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 8001296:	88ee      	ldrh	r6, [r5, #6]
 8001298:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 800129c:	4296      	cmp	r6, r2
 800129e:	d104      	bne.n	80012aa <I2C_Init+0x62>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 80012a0:	2203      	movs	r2, #3
 80012a2:	4353      	muls	r3, r2
 80012a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80012a8:	e005      	b.n	80012b6 <I2C_Init+0x6e>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 80012aa:	2219      	movs	r2, #25
 80012ac:	4353      	muls	r3, r2
 80012ae:	fbb1 f3f3 	udiv	r3, r1, r3
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 80012b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012b6:	b29b      	uxth	r3, r3
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 80012b8:	051a      	lsls	r2, r3, #20
      result |= (uint16_t)0x0001;  
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 80012ba:	f44f 7296 	mov.w	r2, #300	; 0x12c

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 80012be:	bf08      	it	eq
 80012c0:	f043 0301 	orreq.w	r3, r3, #1
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 80012c4:	4350      	muls	r0, r2
 80012c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012ca:	fb90 f0f2 	sdiv	r0, r0, r2
 80012ce:	3001      	adds	r0, #1
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 80012d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 80012d4:	8420      	strh	r0, [r4, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 80012d6:	83a3      	strh	r3, [r4, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 80012d8:	8823      	ldrh	r3, [r4, #0]
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 80012da:	8969      	ldrh	r1, [r5, #10]
 80012dc:	88aa      	ldrh	r2, [r5, #4]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 80012de:	b29b      	uxth	r3, r3
 80012e0:	f043 0301 	orr.w	r3, r3, #1
 80012e4:	8023      	strh	r3, [r4, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 80012e6:	8823      	ldrh	r3, [r4, #0]
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 80012e8:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 80012ec:	f023 0302 	bic.w	r3, r3, #2
 80012f0:	041b      	lsls	r3, r3, #16
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 80012f2:	430a      	orrs	r2, r1

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 80012f4:	0c1b      	lsrs	r3, r3, #16
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 80012f6:	4313      	orrs	r3, r2
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 80012f8:	8023      	strh	r3, [r4, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 80012fa:	892a      	ldrh	r2, [r5, #8]
 80012fc:	89ab      	ldrh	r3, [r5, #12]
 80012fe:	4313      	orrs	r3, r2
 8001300:	8123      	strh	r3, [r4, #8]
}
 8001302:	b005      	add	sp, #20
 8001304:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001306:	bf00      	nop
 8001308:	000f4240 	.word	0x000f4240
 800130c:	000186a0 	.word	0x000186a0

08001310 <I2C_StructInit>:
  */
void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
{
/*---------------- Reset I2C init structure parameters values ----------------*/
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
 8001310:	f241 3388 	movw	r3, #5000	; 0x1388
 8001314:	6003      	str	r3, [r0, #0]
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 8001316:	2300      	movs	r3, #0
 8001318:	8083      	strh	r3, [r0, #4]
  /* Initialize the I2C_DutyCycle member */
  I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 800131a:	f64b 72ff 	movw	r2, #49151	; 0xbfff
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
 800131e:	8103      	strh	r3, [r0, #8]
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
 8001320:	8143      	strh	r3, [r0, #10]
  /* Initialize the I2C_AcknowledgedAddress member */
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8001322:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
  /* Initialize the I2C_DutyCycle member */
  I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 8001326:	80c2      	strh	r2, [r0, #6]
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
  /* Initialize the I2C_AcknowledgedAddress member */
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8001328:	8183      	strh	r3, [r0, #12]
 800132a:	4770      	bx	lr

0800132c <I2C_Cmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 800132c:	8803      	ldrh	r3, [r0, #0]
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800132e:	b119      	cbz	r1, 8001338 <I2C_Cmd+0xc>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 8001330:	b29b      	uxth	r3, r3
 8001332:	f043 0301 	orr.w	r3, r3, #1
 8001336:	e003      	b.n	8001340 <I2C_Cmd+0x14>
  }
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8001338:	f023 0301 	bic.w	r3, r3, #1
 800133c:	041b      	lsls	r3, r3, #16
 800133e:	0c1b      	lsrs	r3, r3, #16
 8001340:	8003      	strh	r3, [r0, #0]
 8001342:	4770      	bx	lr

08001344 <I2C_GenerateSTART>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 8001344:	8803      	ldrh	r3, [r0, #0]
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001346:	b119      	cbz	r1, 8001350 <I2C_GenerateSTART+0xc>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 8001348:	b29b      	uxth	r3, r3
 800134a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800134e:	e003      	b.n	8001358 <I2C_GenerateSTART+0x14>
  }
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 8001350:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001354:	041b      	lsls	r3, r3, #16
 8001356:	0c1b      	lsrs	r3, r3, #16
 8001358:	8003      	strh	r3, [r0, #0]
 800135a:	4770      	bx	lr

0800135c <I2C_GenerateSTOP>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 800135c:	8803      	ldrh	r3, [r0, #0]
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800135e:	b119      	cbz	r1, 8001368 <I2C_GenerateSTOP+0xc>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 8001360:	b29b      	uxth	r3, r3
 8001362:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001366:	e003      	b.n	8001370 <I2C_GenerateSTOP+0x14>
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 8001368:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800136c:	041b      	lsls	r3, r3, #16
 800136e:	0c1b      	lsrs	r3, r3, #16
 8001370:	8003      	strh	r3, [r0, #0]
 8001372:	4770      	bx	lr

08001374 <I2C_Send7bitAddress>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 8001374:	b112      	cbz	r2, 800137c <I2C_Send7bitAddress+0x8>
  {
    /* Set the address bit0 for read */
    Address |= I2C_OAR1_ADD0;
 8001376:	f041 0101 	orr.w	r1, r1, #1
 800137a:	e001      	b.n	8001380 <I2C_Send7bitAddress+0xc>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 800137c:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
  }
  /* Send the address */
  I2Cx->DR = Address;
 8001380:	8201      	strh	r1, [r0, #16]
 8001382:	4770      	bx	lr

08001384 <I2C_AcknowledgeConfig>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 8001384:	8803      	ldrh	r3, [r0, #0]
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001386:	b119      	cbz	r1, 8001390 <I2C_AcknowledgeConfig+0xc>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 8001388:	b29b      	uxth	r3, r3
 800138a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800138e:	e003      	b.n	8001398 <I2C_AcknowledgeConfig+0x14>
  }
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 8001390:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001394:	041b      	lsls	r3, r3, #16
 8001396:	0c1b      	lsrs	r3, r3, #16
 8001398:	8003      	strh	r3, [r0, #0]
 800139a:	4770      	bx	lr

0800139c <I2C_OwnAddress2Config>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Get the old register value */
  tmpreg = I2Cx->OAR2;
 800139c:	8983      	ldrh	r3, [r0, #12]
 800139e:	b29b      	uxth	r3, r3

  /* Reset I2Cx Own address2 bit [7:1] */
  tmpreg &= (uint16_t)~((uint16_t)I2C_OAR2_ADD2);

  /* Set I2Cx Own address2 */
  tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
 80013a0:	f001 01fe 	and.w	r1, r1, #254	; 0xfe

  /* Get the old register value */
  tmpreg = I2Cx->OAR2;

  /* Reset I2Cx Own address2 bit [7:1] */
  tmpreg &= (uint16_t)~((uint16_t)I2C_OAR2_ADD2);
 80013a4:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe

  /* Set I2Cx Own address2 */
  tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
 80013a8:	430b      	orrs	r3, r1

  /* Store the new register value */
  I2Cx->OAR2 = tmpreg;
 80013aa:	8183      	strh	r3, [r0, #12]
 80013ac:	4770      	bx	lr

080013ae <I2C_DualAddressCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable dual addressing mode */
    I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
 80013ae:	8983      	ldrh	r3, [r0, #12]
void I2C_DualAddressCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80013b0:	b119      	cbz	r1, 80013ba <I2C_DualAddressCmd+0xc>
  {
    /* Enable dual addressing mode */
    I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	f043 0301 	orr.w	r3, r3, #1
 80013b8:	e003      	b.n	80013c2 <I2C_DualAddressCmd+0x14>
  }
  else
  {
    /* Disable dual addressing mode */
    I2Cx->OAR2 &= (uint16_t)~((uint16_t)I2C_OAR2_ENDUAL);
 80013ba:	f023 0301 	bic.w	r3, r3, #1
 80013be:	041b      	lsls	r3, r3, #16
 80013c0:	0c1b      	lsrs	r3, r3, #16
 80013c2:	8183      	strh	r3, [r0, #12]
 80013c4:	4770      	bx	lr

080013c6 <I2C_GeneralCallCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable generall call */
    I2Cx->CR1 |= I2C_CR1_ENGC;
 80013c6:	8803      	ldrh	r3, [r0, #0]
void I2C_GeneralCallCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80013c8:	b119      	cbz	r1, 80013d2 <I2C_GeneralCallCmd+0xc>
  {
    /* Enable generall call */
    I2Cx->CR1 |= I2C_CR1_ENGC;
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013d0:	e003      	b.n	80013da <I2C_GeneralCallCmd+0x14>
  }
  else
  {
    /* Disable generall call */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENGC);
 80013d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80013d6:	041b      	lsls	r3, r3, #16
 80013d8:	0c1b      	lsrs	r3, r3, #16
 80013da:	8003      	strh	r3, [r0, #0]
 80013dc:	4770      	bx	lr

080013de <I2C_SoftwareResetCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Peripheral under reset */
    I2Cx->CR1 |= I2C_CR1_SWRST;
 80013de:	8803      	ldrh	r3, [r0, #0]
void I2C_SoftwareResetCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80013e0:	b121      	cbz	r1, 80013ec <I2C_SoftwareResetCmd+0xe>
  {
    /* Peripheral under reset */
    I2Cx->CR1 |= I2C_CR1_SWRST;
 80013e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80013e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80013ea:	e001      	b.n	80013f0 <I2C_SoftwareResetCmd+0x12>
  }
  else
  {
    /* Peripheral not under reset */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_SWRST);
 80013ec:	045b      	lsls	r3, r3, #17
 80013ee:	0c5b      	lsrs	r3, r3, #17
 80013f0:	8003      	strh	r3, [r0, #0]
 80013f2:	4770      	bx	lr

080013f4 <I2C_StretchClockCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState == DISABLE)
  {
    /* Enable the selected I2C Clock stretching */
    I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 80013f4:	8803      	ldrh	r3, [r0, #0]
void I2C_StretchClockCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState == DISABLE)
 80013f6:	b919      	cbnz	r1, 8001400 <I2C_StretchClockCmd+0xc>
  {
    /* Enable the selected I2C Clock stretching */
    I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013fe:	e003      	b.n	8001408 <I2C_StretchClockCmd+0x14>
  }
  else
  {
    /* Disable the selected I2C Clock stretching */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_NOSTRETCH);
 8001400:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001404:	041b      	lsls	r3, r3, #16
 8001406:	0c1b      	lsrs	r3, r3, #16
 8001408:	8003      	strh	r3, [r0, #0]
 800140a:	4770      	bx	lr

0800140c <I2C_FastModeDutyCycleConfig>:
void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
  if (I2C_DutyCycle != I2C_DutyCycle_16_9)
 800140c:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
  {
    /* I2C fast mode Tlow/Thigh=2 */
    I2Cx->CCR &= I2C_DutyCycle_2;
 8001410:	8b83      	ldrh	r3, [r0, #28]
void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
  if (I2C_DutyCycle != I2C_DutyCycle_16_9)
 8001412:	d004      	beq.n	800141e <I2C_FastModeDutyCycleConfig+0x12>
  {
    /* I2C fast mode Tlow/Thigh=2 */
    I2Cx->CCR &= I2C_DutyCycle_2;
 8001414:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001418:	041b      	lsls	r3, r3, #16
 800141a:	0c1b      	lsrs	r3, r3, #16
 800141c:	e002      	b.n	8001424 <I2C_FastModeDutyCycleConfig+0x18>
  }
  else
  {
    /* I2C fast mode Tlow/Thigh=16/9 */
    I2Cx->CCR |= I2C_DutyCycle_16_9;
 800141e:	b29b      	uxth	r3, r3
 8001420:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001424:	8383      	strh	r3, [r0, #28]
 8001426:	4770      	bx	lr

08001428 <I2C_NACKPositionConfig>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_NACK_POSITION(I2C_NACKPosition));
  
  /* Check the input parameter */
  if (I2C_NACKPosition == I2C_NACKPosition_Next)
 8001428:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
  {
    /* Next byte in shift register is the last received byte */
    I2Cx->CR1 |= I2C_NACKPosition_Next;
 800142c:	8803      	ldrh	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_NACK_POSITION(I2C_NACKPosition));
  
  /* Check the input parameter */
  if (I2C_NACKPosition == I2C_NACKPosition_Next)
 800142e:	d103      	bne.n	8001438 <I2C_NACKPositionConfig+0x10>
  {
    /* Next byte in shift register is the last received byte */
    I2Cx->CR1 |= I2C_NACKPosition_Next;
 8001430:	b29b      	uxth	r3, r3
 8001432:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001436:	e003      	b.n	8001440 <I2C_NACKPositionConfig+0x18>
  }
  else
  {
    /* Current byte in shift register is the last received byte */
    I2Cx->CR1 &= I2C_NACKPosition_Current;
 8001438:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800143c:	041b      	lsls	r3, r3, #16
 800143e:	0c1b      	lsrs	r3, r3, #16
 8001440:	8003      	strh	r3, [r0, #0]
 8001442:	4770      	bx	lr

08001444 <I2C_SMBusAlertConfig>:
void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
 8001444:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
  {
    /* Drive the SMBusAlert pin Low */
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
 8001448:	8803      	ldrh	r3, [r0, #0]
void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
 800144a:	d103      	bne.n	8001454 <I2C_SMBusAlertConfig+0x10>
  {
    /* Drive the SMBusAlert pin Low */
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
 800144c:	b29b      	uxth	r3, r3
 800144e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001452:	e003      	b.n	800145c <I2C_SMBusAlertConfig+0x18>
  }
  else
  {
    /* Drive the SMBusAlert pin High  */
    I2Cx->CR1 &= I2C_SMBusAlert_High;
 8001454:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001458:	041b      	lsls	r3, r3, #16
 800145a:	0c1b      	lsrs	r3, r3, #16
 800145c:	8003      	strh	r3, [r0, #0]
 800145e:	4770      	bx	lr

08001460 <I2C_ARPCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C ARP */
    I2Cx->CR1 |= I2C_CR1_ENARP;
 8001460:	8803      	ldrh	r3, [r0, #0]
void I2C_ARPCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001462:	b119      	cbz	r1, 800146c <I2C_ARPCmd+0xc>
  {
    /* Enable the selected I2C ARP */
    I2Cx->CR1 |= I2C_CR1_ENARP;
 8001464:	b29b      	uxth	r3, r3
 8001466:	f043 0310 	orr.w	r3, r3, #16
 800146a:	e003      	b.n	8001474 <I2C_ARPCmd+0x14>
  }
  else
  {
    /* Disable the selected I2C ARP */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENARP);
 800146c:	f023 0310 	bic.w	r3, r3, #16
 8001470:	041b      	lsls	r3, r3, #16
 8001472:	0c1b      	lsrs	r3, r3, #16
 8001474:	8003      	strh	r3, [r0, #0]
 8001476:	4770      	bx	lr

08001478 <I2C_SendData>:
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 8001478:	8201      	strh	r1, [r0, #16]
 800147a:	4770      	bx	lr

0800147c <I2C_ReceiveData>:
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 800147c:	8a00      	ldrh	r0, [r0, #16]
}
 800147e:	b2c0      	uxtb	r0, r0
 8001480:	4770      	bx	lr

08001482 <I2C_TransmitPEC>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C PEC transmission */
    I2Cx->CR1 |= I2C_CR1_PEC;
 8001482:	8803      	ldrh	r3, [r0, #0]
void I2C_TransmitPEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001484:	b119      	cbz	r1, 800148e <I2C_TransmitPEC+0xc>
  {
    /* Enable the selected I2C PEC transmission */
    I2Cx->CR1 |= I2C_CR1_PEC;
 8001486:	b29b      	uxth	r3, r3
 8001488:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800148c:	e003      	b.n	8001496 <I2C_TransmitPEC+0x14>
  }
  else
  {
    /* Disable the selected I2C PEC transmission */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PEC);
 800148e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001492:	041b      	lsls	r3, r3, #16
 8001494:	0c1b      	lsrs	r3, r3, #16
 8001496:	8003      	strh	r3, [r0, #0]
 8001498:	4770      	bx	lr

0800149a <I2C_PECPositionConfig>:
void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
 800149a:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
  {
    /* Next byte in shift register is PEC */
    I2Cx->CR1 |= I2C_PECPosition_Next;
 800149e:	8803      	ldrh	r3, [r0, #0]
void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
 80014a0:	d103      	bne.n	80014aa <I2C_PECPositionConfig+0x10>
  {
    /* Next byte in shift register is PEC */
    I2Cx->CR1 |= I2C_PECPosition_Next;
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014a8:	e003      	b.n	80014b2 <I2C_PECPositionConfig+0x18>
  }
  else
  {
    /* Current byte in shift register is PEC */
    I2Cx->CR1 &= I2C_PECPosition_Current;
 80014aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80014ae:	041b      	lsls	r3, r3, #16
 80014b0:	0c1b      	lsrs	r3, r3, #16
 80014b2:	8003      	strh	r3, [r0, #0]
 80014b4:	4770      	bx	lr

080014b6 <I2C_CalculatePEC>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C PEC calculation */
    I2Cx->CR1 |= I2C_CR1_ENPEC;
 80014b6:	8803      	ldrh	r3, [r0, #0]
void I2C_CalculatePEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80014b8:	b119      	cbz	r1, 80014c2 <I2C_CalculatePEC+0xc>
  {
    /* Enable the selected I2C PEC calculation */
    I2Cx->CR1 |= I2C_CR1_ENPEC;
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	f043 0320 	orr.w	r3, r3, #32
 80014c0:	e003      	b.n	80014ca <I2C_CalculatePEC+0x14>
  }
  else
  {
    /* Disable the selected I2C PEC calculation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENPEC);
 80014c2:	f023 0320 	bic.w	r3, r3, #32
 80014c6:	041b      	lsls	r3, r3, #16
 80014c8:	0c1b      	lsrs	r3, r3, #16
 80014ca:	8003      	strh	r3, [r0, #0]
 80014cc:	4770      	bx	lr

080014ce <I2C_GetPEC>:
uint8_t I2C_GetPEC(I2C_TypeDef* I2Cx)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the selected I2C PEC value */
  return ((I2Cx->SR2) >> 8);
 80014ce:	8b00      	ldrh	r0, [r0, #24]
}
 80014d0:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80014d4:	4770      	bx	lr

080014d6 <I2C_DMACmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR2 |= I2C_CR2_DMAEN;
 80014d6:	8883      	ldrh	r3, [r0, #4]
void I2C_DMACmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80014d8:	b119      	cbz	r1, 80014e2 <I2C_DMACmd+0xc>
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR2 |= I2C_CR2_DMAEN;
 80014da:	b29b      	uxth	r3, r3
 80014dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014e0:	e003      	b.n	80014ea <I2C_DMACmd+0x14>
  }
  else
  {
    /* Disable the selected I2C DMA requests */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_DMAEN);
 80014e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80014e6:	041b      	lsls	r3, r3, #16
 80014e8:	0c1b      	lsrs	r3, r3, #16
 80014ea:	8083      	strh	r3, [r0, #4]
 80014ec:	4770      	bx	lr

080014ee <I2C_DMALastTransferCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Next DMA transfer is the last transfer */
    I2Cx->CR2 |= I2C_CR2_LAST;
 80014ee:	8883      	ldrh	r3, [r0, #4]
void I2C_DMALastTransferCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80014f0:	b119      	cbz	r1, 80014fa <I2C_DMALastTransferCmd+0xc>
  {
    /* Next DMA transfer is the last transfer */
    I2Cx->CR2 |= I2C_CR2_LAST;
 80014f2:	b29b      	uxth	r3, r3
 80014f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014f8:	e003      	b.n	8001502 <I2C_DMALastTransferCmd+0x14>
  }
  else
  {
    /* Next DMA transfer is not the last transfer */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_LAST);
 80014fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80014fe:	041b      	lsls	r3, r3, #16
 8001500:	0c1b      	lsrs	r3, r3, #16
 8001502:	8083      	strh	r3, [r0, #4]
 8001504:	4770      	bx	lr

08001506 <I2C_ReadRegister>:
  *            @arg I2C_Register_CCR:   CCR register.
  *            @arg I2C_Register_TRISE: TRISE register.
  * @retval The value of the read register.
  */
uint16_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register)
{
 8001506:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 8001508:	2300      	movs	r3, #0
 800150a:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_REGISTER(I2C_Register));

  tmp = (uint32_t) I2Cx;
 800150c:	9001      	str	r0, [sp, #4]
  tmp += I2C_Register;
 800150e:	9b01      	ldr	r3, [sp, #4]
 8001510:	18c9      	adds	r1, r1, r3
 8001512:	9101      	str	r1, [sp, #4]

  /* Return the selected register value */
  return (*(__IO uint16_t *) tmp);
 8001514:	9b01      	ldr	r3, [sp, #4]
 8001516:	8818      	ldrh	r0, [r3, #0]
}
 8001518:	b280      	uxth	r0, r0
 800151a:	b002      	add	sp, #8
 800151c:	4770      	bx	lr

0800151e <I2C_ITConfig>:
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 800151e:	8883      	ldrh	r3, [r0, #4]
 8001520:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
 8001522:	b10a      	cbz	r2, 8001528 <I2C_ITConfig+0xa>
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 8001524:	4319      	orrs	r1, r3
 8001526:	e001      	b.n	800152c <I2C_ITConfig+0xe>
  }
  else
  {
    /* Disable the selected I2C interrupts */
    I2Cx->CR2 &= (uint16_t)~I2C_IT;
 8001528:	ea23 0101 	bic.w	r1, r3, r1
 800152c:	8081      	strh	r1, [r0, #4]
 800152e:	4770      	bx	lr

08001530 <I2C_CheckEvent>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8001530:	8a83      	ldrh	r3, [r0, #20]
  flag2 = I2Cx->SR2;
 8001532:	8b00      	ldrh	r0, [r0, #24]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8001534:	b29b      	uxth	r3, r3
  flag2 = I2Cx->SR2;
  flag2 = flag2 << 16;

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 8001536:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800153a:	4008      	ands	r0, r1

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 800153c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
  }
  /* Return status */
  return status;
}
 8001540:	1a43      	subs	r3, r0, r1
 8001542:	4258      	negs	r0, r3
 8001544:	4158      	adcs	r0, r3
 8001546:	4770      	bx	lr

08001548 <I2C_GetLastEvent>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8001548:	8a83      	ldrh	r3, [r0, #20]
  flag2 = I2Cx->SR2;
 800154a:	8b00      	ldrh	r0, [r0, #24]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 800154c:	b29b      	uxth	r3, r3
  flag2 = I2Cx->SR2;
  flag2 = flag2 << 16;

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 800154e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16

  /* Return status */
  return lastevent;
}
 8001552:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8001556:	4770      	bx	lr

08001558 <I2C_GetFlagStatus>:
  *                                Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8001558:	b082      	sub	sp, #8
  FlagStatus bitstatus = RESET;
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 800155a:	2300      	movs	r3, #0
 800155c:	9300      	str	r3, [sp, #0]
 800155e:	9301      	str	r3, [sp, #4]

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 8001560:	0f0b      	lsrs	r3, r1, #28
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 8001562:	9001      	str	r0, [sp, #4]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 8001564:	9300      	str	r3, [sp, #0]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
  
  if(i2creg != 0)
 8001566:	9b00      	ldr	r3, [sp, #0]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 8001568:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
  
  if(i2creg != 0)
 800156c:	b113      	cbz	r3, 8001574 <I2C_GetFlagStatus+0x1c>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 800156e:	9b01      	ldr	r3, [sp, #4]
 8001570:	3314      	adds	r3, #20
 8001572:	e002      	b.n	800157a <I2C_GetFlagStatus+0x22>
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 8001574:	9b01      	ldr	r3, [sp, #4]
    i2cxbase += 0x14;
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 8001576:	0c09      	lsrs	r1, r1, #16
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 8001578:	3318      	adds	r3, #24
 800157a:	9301      	str	r3, [sp, #4]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 800157c:	9b01      	ldr	r3, [sp, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4219      	tst	r1, r3
    bitstatus = RESET;
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
}
 8001582:	bf0c      	ite	eq
 8001584:	2000      	moveq	r0, #0
 8001586:	2001      	movne	r0, #1
 8001588:	b002      	add	sp, #8
 800158a:	4770      	bx	lr

0800158c <I2C_ClearFlag>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));
  /* Get the I2C flag position */
  flagpos = I2C_FLAG & FLAG_MASK;
  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 800158c:	43c9      	mvns	r1, r1
 800158e:	8281      	strh	r1, [r0, #20]
 8001590:	4770      	bx	lr

08001592 <I2C_GetITStatus>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 8001592:	8883      	ldrh	r3, [r0, #4]
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_MASK;

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 8001594:	8a80      	ldrh	r0, [r0, #20]
 8001596:	b280      	uxth	r0, r0
 8001598:	4008      	ands	r0, r1
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 800159a:	b29b      	uxth	r3, r3
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_MASK;

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 800159c:	d006      	beq.n	80015ac <I2C_GetITStatus+0x1a>
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 800159e:	f001 61e0 	and.w	r1, r1, #117440512	; 0x7000000
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_MASK;

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 80015a2:	ea13 4111 	ands.w	r1, r3, r1, lsr #16
  {
    /* I2C_IT is set */
    bitstatus = SET;
 80015a6:	bf0c      	ite	eq
 80015a8:	2000      	moveq	r0, #0
 80015aa:	2001      	movne	r0, #1
    /* I2C_IT is reset */
    bitstatus = RESET;
  }
  /* Return the I2C_IT status */
  return  bitstatus;
}
 80015ac:	4770      	bx	lr

080015ae <I2C_ClearITPendingBit>:

  /* Get the I2C flag position */
  flagpos = I2C_IT & FLAG_MASK;

  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 80015ae:	43c9      	mvns	r1, r1
 80015b0:	8281      	strh	r1, [r0, #20]
 80015b2:	4770      	bx	lr

080015b4 <RCC_DeInit>:
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80015b4:	4b0a      	ldr	r3, [pc, #40]	; (80015e0 <RCC_DeInit+0x2c>)
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	f042 0201 	orr.w	r2, r2, #1
 80015bc:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80015be:	2200      	movs	r2, #0
 80015c0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80015c2:	6819      	ldr	r1, [r3, #0]
 80015c4:	f021 7184 	bic.w	r1, r1, #17301504	; 0x1080000
 80015c8:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80015cc:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80015ce:	4905      	ldr	r1, [pc, #20]	; (80015e4 <RCC_DeInit+0x30>)
 80015d0:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80015d2:	6819      	ldr	r1, [r3, #0]
 80015d4:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 80015d8:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80015da:	60da      	str	r2, [r3, #12]
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	40023800 	.word	0x40023800
 80015e4:	24003010 	.word	0x24003010

080015e8 <RCC_HSEConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 80015e8:	4b02      	ldr	r3, [pc, #8]	; (80015f4 <RCC_HSEConfig+0xc>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 80015ee:	7018      	strb	r0, [r3, #0]
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	40023802 	.word	0x40023802

080015f8 <RCC_AdjustHSICalibrationValue>:
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
 80015f8:	4b03      	ldr	r3, [pc, #12]	; (8001608 <RCC_AdjustHSICalibrationValue+0x10>)
 80015fa:	681a      	ldr	r2, [r3, #0]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 80015fc:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 8001600:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3

  /* Store the new value */
  RCC->CR = tmpreg;
 8001604:	6018      	str	r0, [r3, #0]
 8001606:	4770      	bx	lr
 8001608:	40023800 	.word	0x40023800

0800160c <RCC_HSICmd>:
void RCC_HSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 800160c:	4b01      	ldr	r3, [pc, #4]	; (8001614 <RCC_HSICmd+0x8>)
 800160e:	6018      	str	r0, [r3, #0]
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	42470000 	.word	0x42470000

08001618 <RCC_LSEConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8001618:	4b06      	ldr	r3, [pc, #24]	; (8001634 <RCC_LSEConfig+0x1c>)
 800161a:	2200      	movs	r2, #0

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 800161c:	2801      	cmp	r0, #1
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 800161e:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8001620:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 8001622:	d002      	beq.n	800162a <RCC_LSEConfig+0x12>
 8001624:	2804      	cmp	r0, #4
 8001626:	d104      	bne.n	8001632 <RCC_LSEConfig+0x1a>
 8001628:	e001      	b.n	800162e <RCC_LSEConfig+0x16>
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 800162a:	7018      	strb	r0, [r3, #0]
      break;
 800162c:	4770      	bx	lr
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 800162e:	2205      	movs	r2, #5
 8001630:	701a      	strb	r2, [r3, #0]
 8001632:	4770      	bx	lr
 8001634:	40023870 	.word	0x40023870

08001638 <RCC_LSICmd>:
void RCC_LSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 8001638:	4b01      	ldr	r3, [pc, #4]	; (8001640 <RCC_LSICmd+0x8>)
 800163a:	6018      	str	r0, [r3, #0]
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	42470e80 	.word	0x42470e80

08001644 <RCC_PLLConfig>:
  *         correctly.
  *   
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
{
 8001644:	b510      	push	{r4, lr}
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 8001646:	9c02      	ldr	r4, [sp, #8]
 8001648:	4301      	orrs	r1, r0
 800164a:	ea41 1282 	orr.w	r2, r1, r2, lsl #6
 800164e:	085b      	lsrs	r3, r3, #1
 8001650:	3b01      	subs	r3, #1
 8001652:	ea42 6404 	orr.w	r4, r2, r4, lsl #24
 8001656:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800165a:	4b01      	ldr	r3, [pc, #4]	; (8001660 <RCC_PLLConfig+0x1c>)
 800165c:	605c      	str	r4, [r3, #4]
 800165e:	bd10      	pop	{r4, pc}
 8001660:	40023800 	.word	0x40023800

08001664 <RCC_PLLCmd>:
  */
void RCC_PLLCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 8001664:	4b01      	ldr	r3, [pc, #4]	; (800166c <RCC_PLLCmd+0x8>)
 8001666:	6018      	str	r0, [r3, #0]
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	42470060 	.word	0x42470060

08001670 <RCC_PLLI2SConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
 8001670:	0180      	lsls	r0, r0, #6
 8001672:	4b03      	ldr	r3, [pc, #12]	; (8001680 <RCC_PLLI2SConfig+0x10>)
 8001674:	ea40 7101 	orr.w	r1, r0, r1, lsl #28
 8001678:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	40023800 	.word	0x40023800

08001684 <RCC_PLLI2SCmd>:
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 8001684:	4b01      	ldr	r3, [pc, #4]	; (800168c <RCC_PLLI2SCmd+0x8>)
 8001686:	6018      	str	r0, [r3, #0]
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	42470068 	.word	0x42470068

08001690 <RCC_ClockSecuritySystemCmd>:
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 8001690:	4b01      	ldr	r3, [pc, #4]	; (8001698 <RCC_ClockSecuritySystemCmd+0x8>)
 8001692:	6018      	str	r0, [r3, #0]
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	4247004c 	.word	0x4247004c

0800169c <RCC_MCO1Config>:
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
 800169c:	4b03      	ldr	r3, [pc, #12]	; (80016ac <RCC_MCO1Config+0x10>)
 800169e:	689a      	ldr	r2, [r3, #8]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
 80016a0:	f022 62ec 	bic.w	r2, r2, #123731968	; 0x7600000

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 80016a4:	4310      	orrs	r0, r2
 80016a6:	4301      	orrs	r1, r0

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 80016a8:	6099      	str	r1, [r3, #8]
 80016aa:	4770      	bx	lr
 80016ac:	40023800 	.word	0x40023800

080016b0 <RCC_MCO2Config>:
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
 80016b0:	4b03      	ldr	r3, [pc, #12]	; (80016c0 <RCC_MCO2Config+0x10>)
 80016b2:	689a      	ldr	r2, [r3, #8]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
 80016b4:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 80016b8:	4310      	orrs	r0, r2
 80016ba:	4301      	orrs	r1, r0

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 80016bc:	6099      	str	r1, [r3, #8]
 80016be:	4770      	bx	lr
 80016c0:	40023800 	.word	0x40023800

080016c4 <RCC_SYSCLKConfig>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 80016c4:	4b03      	ldr	r3, [pc, #12]	; (80016d4 <RCC_SYSCLKConfig+0x10>)
 80016c6:	689a      	ldr	r2, [r3, #8]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 80016c8:	f022 0203 	bic.w	r2, r2, #3

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 80016cc:	4310      	orrs	r0, r2

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80016ce:	6098      	str	r0, [r3, #8]
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	40023800 	.word	0x40023800

080016d8 <RCC_GetSYSCLKSource>:
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 80016d8:	4b02      	ldr	r3, [pc, #8]	; (80016e4 <RCC_GetSYSCLKSource+0xc>)
 80016da:	6898      	ldr	r0, [r3, #8]
}
 80016dc:	f000 000c 	and.w	r0, r0, #12
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	40023800 	.word	0x40023800

080016e8 <RCC_HCLKConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 80016e8:	4b03      	ldr	r3, [pc, #12]	; (80016f8 <RCC_HCLKConfig+0x10>)
 80016ea:	689a      	ldr	r2, [r3, #8]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 80016ec:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 80016f0:	4310      	orrs	r0, r2

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80016f2:	6098      	str	r0, [r3, #8]
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	40023800 	.word	0x40023800

080016fc <RCC_PCLK1Config>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 80016fc:	4b03      	ldr	r3, [pc, #12]	; (800170c <RCC_PCLK1Config+0x10>)
 80016fe:	689a      	ldr	r2, [r3, #8]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 8001700:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8001704:	4310      	orrs	r0, r2

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001706:	6098      	str	r0, [r3, #8]
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	40023800 	.word	0x40023800

08001710 <RCC_PCLK2Config>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8001710:	4b03      	ldr	r3, [pc, #12]	; (8001720 <RCC_PCLK2Config+0x10>)
 8001712:	689a      	ldr	r2, [r3, #8]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 8001714:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 8001718:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800171c:	6098      	str	r0, [r3, #8]
 800171e:	4770      	bx	lr
 8001720:	40023800 	.word	0x40023800

08001724 <RCC_GetClocksFreq>:
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001724:	4b1e      	ldr	r3, [pc, #120]	; (80017a0 <RCC_GetClocksFreq+0x7c>)
 8001726:	689a      	ldr	r2, [r3, #8]
 8001728:	f002 020c 	and.w	r2, r2, #12

  switch (tmp)
 800172c:	2a04      	cmp	r2, #4
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 800172e:	b510      	push	{r4, lr}
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;

  switch (tmp)
 8001730:	d003      	beq.n	800173a <RCC_GetClocksFreq+0x16>
 8001732:	2a08      	cmp	r2, #8
 8001734:	d003      	beq.n	800173e <RCC_GetClocksFreq+0x1a>
 8001736:	4b1b      	ldr	r3, [pc, #108]	; (80017a4 <RCC_GetClocksFreq+0x80>)
 8001738:	e018      	b.n	800176c <RCC_GetClocksFreq+0x48>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 800173a:	4b1b      	ldr	r3, [pc, #108]	; (80017a8 <RCC_GetClocksFreq+0x84>)
 800173c:	e016      	b.n	800176c <RCC_GetClocksFreq+0x48>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800173e:	6859      	ldr	r1, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001740:	685a      	ldr	r2, [r3, #4]
      
      if (pllsource != 0)
 8001742:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001746:	6859      	ldr	r1, [r3, #4]
 8001748:	bf14      	ite	ne
 800174a:	4b17      	ldrne	r3, [pc, #92]	; (80017a8 <RCC_GetClocksFreq+0x84>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800174c:	4b15      	ldreq	r3, [pc, #84]	; (80017a4 <RCC_GetClocksFreq+0x80>)

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800174e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8001752:	fbb3 f3f2 	udiv	r3, r3, r2
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001756:	4a12      	ldr	r2, [pc, #72]	; (80017a0 <RCC_GetClocksFreq+0x7c>)
 8001758:	6852      	ldr	r2, [r2, #4]
 800175a:	f3c2 4201 	ubfx	r2, r2, #16, #2
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800175e:	f3c1 1188 	ubfx	r1, r1, #6, #9
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001762:	3201      	adds	r2, #1
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8001764:	434b      	muls	r3, r1
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001766:	0052      	lsls	r2, r2, #1
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8001768:	fbb3 f3f2 	udiv	r3, r3, r2
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 800176c:	490c      	ldr	r1, [pc, #48]	; (80017a0 <RCC_GetClocksFreq+0x7c>)
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 800176e:	6003      	str	r3, [r0, #0]
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8001770:	688b      	ldr	r3, [r1, #8]
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];
 8001772:	4a0e      	ldr	r2, [pc, #56]	; (80017ac <RCC_GetClocksFreq+0x88>)
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
  tmp = tmp >> 4;
 8001774:	f3c3 1303 	ubfx	r3, r3, #4, #4
  presc = APBAHBPrescTable[tmp];
 8001778:	5cd4      	ldrb	r4, [r2, r3]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 800177a:	6803      	ldr	r3, [r0, #0]
 800177c:	fa23 f304 	lsr.w	r3, r3, r4
 8001780:	6043      	str	r3, [r0, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8001782:	688c      	ldr	r4, [r1, #8]
  tmp = tmp >> 10;
 8001784:	f3c4 2482 	ubfx	r4, r4, #10, #3
  presc = APBAHBPrescTable[tmp];
 8001788:	5d14      	ldrb	r4, [r2, r4]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800178a:	fa23 f404 	lsr.w	r4, r3, r4
 800178e:	6084      	str	r4, [r0, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8001790:	6889      	ldr	r1, [r1, #8]
  tmp = tmp >> 13;
 8001792:	f3c1 3142 	ubfx	r1, r1, #13, #3
  presc = APBAHBPrescTable[tmp];
 8001796:	5c52      	ldrb	r2, [r2, r1]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001798:	fa23 f302 	lsr.w	r3, r3, r2
 800179c:	60c3      	str	r3, [r0, #12]
 800179e:	bd10      	pop	{r4, pc}
 80017a0:	40023800 	.word	0x40023800
 80017a4:	00f42400 	.word	0x00f42400
 80017a8:	007a1200 	.word	0x007a1200
 80017ac:	20000074 	.word	0x20000074

080017b0 <RCC_RTCCLKConfig>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 80017b0:	f400 7340 	and.w	r3, r0, #768	; 0x300
 80017b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80017b8:	4b08      	ldr	r3, [pc, #32]	; (80017dc <RCC_RTCCLKConfig+0x2c>)
 80017ba:	d108      	bne.n	80017ce <RCC_RTCCLKConfig+0x1e>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 80017bc:	6899      	ldr	r1, [r3, #8]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 80017be:	f020 4270 	bic.w	r2, r0, #4026531840	; 0xf0000000
  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
 80017c2:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 80017c6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80017ca:	430a      	orrs	r2, r1

    /* Store the new value */
    RCC->CFGR = tmpreg;
 80017cc:	609a      	str	r2, [r3, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 80017ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80017d0:	0500      	lsls	r0, r0, #20
 80017d2:	ea42 5010 	orr.w	r0, r2, r0, lsr #20
 80017d6:	6718      	str	r0, [r3, #112]	; 0x70
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	40023800 	.word	0x40023800

080017e0 <RCC_RTCCLKCmd>:
void RCC_RTCCLKCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 80017e0:	4b01      	ldr	r3, [pc, #4]	; (80017e8 <RCC_RTCCLKCmd+0x8>)
 80017e2:	6018      	str	r0, [r3, #0]
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	42470e3c 	.word	0x42470e3c

080017ec <RCC_BackupResetCmd>:
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 80017ec:	4b01      	ldr	r3, [pc, #4]	; (80017f4 <RCC_BackupResetCmd+0x8>)
 80017ee:	6018      	str	r0, [r3, #0]
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	42470e40 	.word	0x42470e40

080017f8 <RCC_I2SCLKConfig>:
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 80017f8:	4b01      	ldr	r3, [pc, #4]	; (8001800 <RCC_I2SCLKConfig+0x8>)
 80017fa:	6018      	str	r0, [r3, #0]
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	4247015c 	.word	0x4247015c

08001804 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8001804:	4b04      	ldr	r3, [pc, #16]	; (8001818 <RCC_AHB1PeriphClockCmd+0x14>)
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8001806:	6b1a      	ldr	r2, [r3, #48]	; 0x30
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001808:	b109      	cbz	r1, 800180e <RCC_AHB1PeriphClockCmd+0xa>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800180a:	4310      	orrs	r0, r2
 800180c:	e001      	b.n	8001812 <RCC_AHB1PeriphClockCmd+0xe>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 800180e:	ea22 0000 	bic.w	r0, r2, r0
 8001812:	6318      	str	r0, [r3, #48]	; 0x30
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	40023800 	.word	0x40023800

0800181c <RCC_AHB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 800181c:	4b04      	ldr	r3, [pc, #16]	; (8001830 <RCC_AHB2PeriphClockCmd+0x14>)
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 800181e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001820:	b109      	cbz	r1, 8001826 <RCC_AHB2PeriphClockCmd+0xa>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 8001822:	4310      	orrs	r0, r2
 8001824:	e001      	b.n	800182a <RCC_AHB2PeriphClockCmd+0xe>
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
 8001826:	ea22 0000 	bic.w	r0, r2, r0
 800182a:	6358      	str	r0, [r3, #52]	; 0x34
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	40023800 	.word	0x40023800

08001834 <RCC_AHB3PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 8001834:	4b04      	ldr	r3, [pc, #16]	; (8001848 <RCC_AHB3PeriphClockCmd+0x14>)
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 8001836:	6b9a      	ldr	r2, [r3, #56]	; 0x38
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001838:	b109      	cbz	r1, 800183e <RCC_AHB3PeriphClockCmd+0xa>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 800183a:	4310      	orrs	r0, r2
 800183c:	e001      	b.n	8001842 <RCC_AHB3PeriphClockCmd+0xe>
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
 800183e:	ea22 0000 	bic.w	r0, r2, r0
 8001842:	6398      	str	r0, [r3, #56]	; 0x38
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	40023800 	.word	0x40023800

0800184c <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800184c:	4b04      	ldr	r3, [pc, #16]	; (8001860 <RCC_APB1PeriphClockCmd+0x14>)
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800184e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001850:	b109      	cbz	r1, 8001856 <RCC_APB1PeriphClockCmd+0xa>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001852:	4310      	orrs	r0, r2
 8001854:	e001      	b.n	800185a <RCC_APB1PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001856:	ea22 0000 	bic.w	r0, r2, r0
 800185a:	6418      	str	r0, [r3, #64]	; 0x40
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	40023800 	.word	0x40023800

08001864 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001864:	4b04      	ldr	r3, [pc, #16]	; (8001878 <RCC_APB2PeriphClockCmd+0x14>)
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001866:	6c5a      	ldr	r2, [r3, #68]	; 0x44
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001868:	b109      	cbz	r1, 800186e <RCC_APB2PeriphClockCmd+0xa>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800186a:	4310      	orrs	r0, r2
 800186c:	e001      	b.n	8001872 <RCC_APB2PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 800186e:	ea22 0000 	bic.w	r0, r2, r0
 8001872:	6458      	str	r0, [r3, #68]	; 0x44
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	40023800 	.word	0x40023800

0800187c <RCC_AHB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 800187c:	4b04      	ldr	r3, [pc, #16]	; (8001890 <RCC_AHB1PeriphResetCmd+0x14>)
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 800187e:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001880:	b109      	cbz	r1, 8001886 <RCC_AHB1PeriphResetCmd+0xa>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 8001882:	4310      	orrs	r0, r2
 8001884:	e001      	b.n	800188a <RCC_AHB1PeriphResetCmd+0xe>
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 8001886:	ea22 0000 	bic.w	r0, r2, r0
 800188a:	6118      	str	r0, [r3, #16]
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	40023800 	.word	0x40023800

08001894 <RCC_AHB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 8001894:	4b04      	ldr	r3, [pc, #16]	; (80018a8 <RCC_AHB2PeriphResetCmd+0x14>)
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 8001896:	695a      	ldr	r2, [r3, #20]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001898:	b109      	cbz	r1, 800189e <RCC_AHB2PeriphResetCmd+0xa>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 800189a:	4310      	orrs	r0, r2
 800189c:	e001      	b.n	80018a2 <RCC_AHB2PeriphResetCmd+0xe>
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 800189e:	ea22 0000 	bic.w	r0, r2, r0
 80018a2:	6158      	str	r0, [r3, #20]
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	40023800 	.word	0x40023800

080018ac <RCC_AHB3PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 80018ac:	4b04      	ldr	r3, [pc, #16]	; (80018c0 <RCC_AHB3PeriphResetCmd+0x14>)
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 80018ae:	699a      	ldr	r2, [r3, #24]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80018b0:	b109      	cbz	r1, 80018b6 <RCC_AHB3PeriphResetCmd+0xa>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 80018b2:	4310      	orrs	r0, r2
 80018b4:	e001      	b.n	80018ba <RCC_AHB3PeriphResetCmd+0xe>
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
 80018b6:	ea22 0000 	bic.w	r0, r2, r0
 80018ba:	6198      	str	r0, [r3, #24]
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	40023800 	.word	0x40023800

080018c4 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80018c4:	4b04      	ldr	r3, [pc, #16]	; (80018d8 <RCC_APB1PeriphResetCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 80018c6:	6a1a      	ldr	r2, [r3, #32]
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80018c8:	b109      	cbz	r1, 80018ce <RCC_APB1PeriphResetCmd+0xa>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 80018ca:	4310      	orrs	r0, r2
 80018cc:	e001      	b.n	80018d2 <RCC_APB1PeriphResetCmd+0xe>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 80018ce:	ea22 0000 	bic.w	r0, r2, r0
 80018d2:	6218      	str	r0, [r3, #32]
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	40023800 	.word	0x40023800

080018dc <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80018dc:	4b04      	ldr	r3, [pc, #16]	; (80018f0 <RCC_APB2PeriphResetCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 80018de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80018e0:	b109      	cbz	r1, 80018e6 <RCC_APB2PeriphResetCmd+0xa>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 80018e2:	4310      	orrs	r0, r2
 80018e4:	e001      	b.n	80018ea <RCC_APB2PeriphResetCmd+0xe>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 80018e6:	ea22 0000 	bic.w	r0, r2, r0
 80018ea:	6258      	str	r0, [r3, #36]	; 0x24
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	40023800 	.word	0x40023800

080018f4 <RCC_AHB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80018f4:	4b04      	ldr	r3, [pc, #16]	; (8001908 <RCC_AHB1PeriphClockLPModeCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 80018f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80018f8:	b109      	cbz	r1, 80018fe <RCC_AHB1PeriphClockLPModeCmd+0xa>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 80018fa:	4310      	orrs	r0, r2
 80018fc:	e001      	b.n	8001902 <RCC_AHB1PeriphClockLPModeCmd+0xe>
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
 80018fe:	ea22 0000 	bic.w	r0, r2, r0
 8001902:	6518      	str	r0, [r3, #80]	; 0x50
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	40023800 	.word	0x40023800

0800190c <RCC_AHB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 800190c:	4b04      	ldr	r3, [pc, #16]	; (8001920 <RCC_AHB2PeriphClockLPModeCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 800190e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001910:	b109      	cbz	r1, 8001916 <RCC_AHB2PeriphClockLPModeCmd+0xa>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 8001912:	4310      	orrs	r0, r2
 8001914:	e001      	b.n	800191a <RCC_AHB2PeriphClockLPModeCmd+0xe>
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
 8001916:	ea22 0000 	bic.w	r0, r2, r0
 800191a:	6558      	str	r0, [r3, #84]	; 0x54
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	40023800 	.word	0x40023800

08001924 <RCC_AHB3PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 8001924:	4b04      	ldr	r3, [pc, #16]	; (8001938 <RCC_AHB3PeriphClockLPModeCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 8001926:	6d9a      	ldr	r2, [r3, #88]	; 0x58
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001928:	b109      	cbz	r1, 800192e <RCC_AHB3PeriphClockLPModeCmd+0xa>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 800192a:	4310      	orrs	r0, r2
 800192c:	e001      	b.n	8001932 <RCC_AHB3PeriphClockLPModeCmd+0xe>
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
 800192e:	ea22 0000 	bic.w	r0, r2, r0
 8001932:	6598      	str	r0, [r3, #88]	; 0x58
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	40023800 	.word	0x40023800

0800193c <RCC_APB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800193c:	4b04      	ldr	r3, [pc, #16]	; (8001950 <RCC_APB1PeriphClockLPModeCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 800193e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001940:	b109      	cbz	r1, 8001946 <RCC_APB1PeriphClockLPModeCmd+0xa>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 8001942:	4310      	orrs	r0, r2
 8001944:	e001      	b.n	800194a <RCC_APB1PeriphClockLPModeCmd+0xe>
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
 8001946:	ea22 0000 	bic.w	r0, r2, r0
 800194a:	6618      	str	r0, [r3, #96]	; 0x60
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	40023800 	.word	0x40023800

08001954 <RCC_APB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001954:	4b04      	ldr	r3, [pc, #16]	; (8001968 <RCC_APB2PeriphClockLPModeCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 8001956:	6e5a      	ldr	r2, [r3, #100]	; 0x64
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001958:	b109      	cbz	r1, 800195e <RCC_APB2PeriphClockLPModeCmd+0xa>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 800195a:	4310      	orrs	r0, r2
 800195c:	e001      	b.n	8001962 <RCC_APB2PeriphClockLPModeCmd+0xe>
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
 800195e:	ea22 0000 	bic.w	r0, r2, r0
 8001962:	6658      	str	r0, [r3, #100]	; 0x64
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	40023800 	.word	0x40023800

0800196c <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
 800196c:	4b04      	ldr	r3, [pc, #16]	; (8001980 <RCC_ITConfig+0x14>)
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 800196e:	781a      	ldrb	r2, [r3, #0]
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001970:	b109      	cbz	r1, 8001976 <RCC_ITConfig+0xa>
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8001972:	4310      	orrs	r0, r2
 8001974:	e001      	b.n	800197a <RCC_ITConfig+0xe>
  }
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 8001976:	ea22 0000 	bic.w	r0, r2, r0
 800197a:	7018      	strb	r0, [r3, #0]
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	4002380d 	.word	0x4002380d

08001984 <RCC_GetFlagStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8001984:	0943      	lsrs	r3, r0, #5
  if (tmp == 1)               /* The flag to check is in CR register */
 8001986:	2b01      	cmp	r3, #1
 8001988:	4a07      	ldr	r2, [pc, #28]	; (80019a8 <RCC_GetFlagStatus+0x24>)
 800198a:	d101      	bne.n	8001990 <RCC_GetFlagStatus+0xc>
  {
    statusreg = RCC->CR;
 800198c:	6813      	ldr	r3, [r2, #0]
 800198e:	e003      	b.n	8001998 <RCC_GetFlagStatus+0x14>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8001990:	2b02      	cmp	r3, #2
  {
    statusreg = RCC->BDCR;
 8001992:	bf0c      	ite	eq
 8001994:	6f13      	ldreq	r3, [r2, #112]	; 0x70
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8001996:	6f53      	ldrne	r3, [r2, #116]	; 0x74
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8001998:	f000 001f 	and.w	r0, r0, #31
 800199c:	fa23 f000 	lsr.w	r0, r3, r0
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
}
 80019a0:	f000 0001 	and.w	r0, r0, #1
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	40023800 	.word	0x40023800

080019ac <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 80019ac:	b507      	push	{r0, r1, r2, lr}
  __IO uint32_t startupcounter = 0;
 80019ae:	2300      	movs	r3, #0
 80019b0:	9301      	str	r3, [sp, #4]
  ErrorStatus status = ERROR;
  FlagStatus hsestatus = RESET;
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 80019b2:	2031      	movs	r0, #49	; 0x31
 80019b4:	f7ff ffe6 	bl	8001984 <RCC_GetFlagStatus>
    startupcounter++;
 80019b8:	9b01      	ldr	r3, [sp, #4]
 80019ba:	3301      	adds	r3, #1
 80019bc:	9301      	str	r3, [sp, #4]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 80019be:	9b01      	ldr	r3, [sp, #4]
 80019c0:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80019c4:	d001      	beq.n	80019ca <RCC_WaitForHSEStartUp+0x1e>
 80019c6:	2800      	cmp	r0, #0
 80019c8:	d0f3      	beq.n	80019b2 <RCC_WaitForHSEStartUp+0x6>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 80019ca:	2031      	movs	r0, #49	; 0x31
 80019cc:	f7ff ffda 	bl	8001984 <RCC_GetFlagStatus>
  else
  {
    status = ERROR;
  }
  return (status);
}
 80019d0:	3000      	adds	r0, #0
 80019d2:	bf18      	it	ne
 80019d4:	2001      	movne	r0, #1
 80019d6:	bd0e      	pop	{r1, r2, r3, pc}

080019d8 <RCC_ClearFlag>:
  * @retval None
  */
void RCC_ClearFlag(void)
{
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 80019d8:	4b02      	ldr	r3, [pc, #8]	; (80019e4 <RCC_ClearFlag+0xc>)
 80019da:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80019dc:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80019e0:	675a      	str	r2, [r3, #116]	; 0x74
 80019e2:	4770      	bx	lr
 80019e4:	40023800 	.word	0x40023800

080019e8 <RCC_GetITStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 80019e8:	4b03      	ldr	r3, [pc, #12]	; (80019f8 <RCC_GetITStatus+0x10>)
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	4218      	tst	r0, r3
  {
    bitstatus = RESET;
  }
  /* Return the RCC_IT status */
  return  bitstatus;
}
 80019ee:	bf0c      	ite	eq
 80019f0:	2000      	moveq	r0, #0
 80019f2:	2001      	movne	r0, #1
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	40023800 	.word	0x40023800

080019fc <RCC_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 80019fc:	4b01      	ldr	r3, [pc, #4]	; (8001a04 <RCC_ClearITPendingBit+0x8>)
 80019fe:	7018      	strb	r0, [r3, #0]
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	4002380e 	.word	0x4002380e

08001a08 <SPI_I2S_DeInit>:
  *         is managed by the I2S peripheral clock).
  *             
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 8001a08:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 8001a0a:	4b15      	ldr	r3, [pc, #84]	; (8001a60 <SPI_I2S_DeInit+0x58>)
 8001a0c:	4298      	cmp	r0, r3
 8001a0e:	d10b      	bne.n	8001a28 <SPI_I2S_DeInit+0x20>
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 8001a10:	2101      	movs	r1, #1
 8001a12:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001a16:	f7ff ff61 	bl	80018dc <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 8001a1a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001a1e:	2100      	movs	r1, #0
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
    }
  }
}
 8001a20:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  if (SPIx == SPI1)
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 8001a24:	f7ff bf5a 	b.w	80018dc <RCC_APB2PeriphResetCmd>
  }
  else if (SPIx == SPI2)
 8001a28:	4b0e      	ldr	r3, [pc, #56]	; (8001a64 <SPI_I2S_DeInit+0x5c>)
 8001a2a:	4298      	cmp	r0, r3
 8001a2c:	d107      	bne.n	8001a3e <SPI_I2S_DeInit+0x36>
  {
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 8001a2e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001a32:	2101      	movs	r1, #1
 8001a34:	f7ff ff46 	bl	80018c4 <RCC_APB1PeriphResetCmd>
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 8001a38:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001a3c:	e009      	b.n	8001a52 <SPI_I2S_DeInit+0x4a>
    }
  else
  {
    if (SPIx == SPI3)
 8001a3e:	4b0a      	ldr	r3, [pc, #40]	; (8001a68 <SPI_I2S_DeInit+0x60>)
 8001a40:	4298      	cmp	r0, r3
 8001a42:	d10b      	bne.n	8001a5c <SPI_I2S_DeInit+0x54>
    {
      /* Enable SPI3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 8001a44:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001a48:	2101      	movs	r1, #1
 8001a4a:	f7ff ff3b 	bl	80018c4 <RCC_APB1PeriphResetCmd>
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 8001a4e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001a52:	2100      	movs	r1, #0
    }
  }
}
 8001a54:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if (SPIx == SPI3)
    {
      /* Enable SPI3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 8001a58:	f7ff bf34 	b.w	80018c4 <RCC_APB1PeriphResetCmd>
 8001a5c:	bd08      	pop	{r3, pc}
 8001a5e:	bf00      	nop
 8001a60:	40013000 	.word	0x40013000
 8001a64:	40003800 	.word	0x40003800
 8001a68:	40003c00 	.word	0x40003c00

08001a6c <SPI_Init>:
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001a6c:	880b      	ldrh	r3, [r1, #0]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8001a6e:	8802      	ldrh	r2, [r0, #0]
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8001a70:	b510      	push	{r4, lr}
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001a72:	884c      	ldrh	r4, [r1, #2]
 8001a74:	4323      	orrs	r3, r4
 8001a76:	888c      	ldrh	r4, [r1, #4]
 8001a78:	4323      	orrs	r3, r4
 8001a7a:	88cc      	ldrh	r4, [r1, #6]
 8001a7c:	4323      	orrs	r3, r4
 8001a7e:	890c      	ldrh	r4, [r1, #8]
 8001a80:	4323      	orrs	r3, r4
 8001a82:	894c      	ldrh	r4, [r1, #10]
 8001a84:	4323      	orrs	r3, r4
 8001a86:	898c      	ldrh	r4, [r1, #12]
 8001a88:	4323      	orrs	r3, r4
 8001a8a:	89cc      	ldrh	r4, [r1, #14]

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8001a8c:	f402 5241 	and.w	r2, r2, #12352	; 0x3040
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001a90:	4323      	orrs	r3, r4
 8001a92:	4313      	orrs	r3, r2
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8001a94:	8003      	strh	r3, [r0, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 8001a96:	8b83      	ldrh	r3, [r0, #28]
 8001a98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001a9c:	041b      	lsls	r3, r3, #16
 8001a9e:	0c1b      	lsrs	r3, r3, #16
 8001aa0:	8383      	strh	r3, [r0, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8001aa2:	8a0b      	ldrh	r3, [r1, #16]
 8001aa4:	8203      	strh	r3, [r0, #16]
 8001aa6:	bd10      	pop	{r4, pc}

08001aa8 <I2S_Init>:
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 8001aa8:	8b83      	ldrh	r3, [r0, #28]
 8001aaa:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001aae:	f023 030f 	bic.w	r3, r3, #15
 8001ab2:	041b      	lsls	r3, r3, #16
 8001ab4:	0c1b      	lsrs	r3, r3, #16
 8001ab6:	8383      	strh	r3, [r0, #28]
  SPIx->I2SPR = 0x0002;
 8001ab8:	2302      	movs	r3, #2
 8001aba:	8403      	strh	r3, [r0, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 8001abc:	688b      	ldr	r3, [r1, #8]
 8001abe:	2b02      	cmp	r3, #2
  *         to the value of the the source clock frequency (in Hz).
  *  
  * @retval None
  */
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
 8001ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
  SPIx->I2SPR = 0x0002;
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 8001ac2:	8b85      	ldrh	r5, [r0, #28]
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 8001ac4:	d038      	beq.n	8001b38 <I2S_Init+0x90>
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 8001ac6:	4a29      	ldr	r2, [pc, #164]	; (8001b6c <I2S_Init+0xc4>)
  }
  /* If the requested audio frequency is not the default, compute the prescaler */
  else
  {
    /* Check the frame length (For the Prescaler computing) *******************/
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 8001ac8:	888e      	ldrh	r6, [r1, #4]
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 8001aca:	6894      	ldr	r4, [r2, #8]
  {
    /* Check the frame length (For the Prescaler computing) *******************/
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
    {
      /* Packet length is 16 bits */
      packetlength = 1;
 8001acc:	2e00      	cmp	r6, #0
 8001ace:	bf14      	ite	ne
 8001ad0:	2602      	movne	r6, #2
 8001ad2:	2601      	moveq	r6, #1
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 8001ad4:	0224      	lsls	r4, r4, #8
 8001ad6:	d503      	bpl.n	8001ae0 <I2S_Init+0x38>
    {
      RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
 8001ad8:	6894      	ldr	r4, [r2, #8]
 8001ada:	f424 0400 	bic.w	r4, r4, #8388608	; 0x800000
 8001ade:	6094      	str	r4, [r2, #8]
    }    
    
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 8001ae0:	f8d2 4084 	ldr.w	r4, [r2, #132]	; 0x84
                      (RCC_PLLI2SCFGR_PLLI2SN >> 6));
    
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
 8001ae4:	f8d2 7084 	ldr.w	r7, [r2, #132]	; 0x84
                      (RCC_PLLI2SCFGR_PLLI2SR >> 28));
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
 8001ae8:	6852      	ldr	r2, [r2, #4]
    
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 8001aea:	f8df c084 	ldr.w	ip, [pc, #132]	; 8001b70 <I2S_Init+0xc8>
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
                      (RCC_PLLI2SCFGR_PLLI2SR >> 28));
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
 8001aee:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 8001af2:	fbbc f2f2 	udiv	r2, ip, r2
    {
      RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
    }    
    
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 8001af6:	f3c4 1488 	ubfx	r4, r4, #6, #9
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
    
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 8001afa:	4354      	muls	r4, r2
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
                      (RCC_PLLI2SCFGR_PLLI2SN >> 6));
    
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
 8001afc:	f3c7 7202 	ubfx	r2, r7, #28, #3
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
    
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 8001b00:	fbb4 f4f2 	udiv	r4, r4, r2
  #endif /* I2S_EXTERNAL_CLOCK_VAL */
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 8001b04:	88ca      	ldrh	r2, [r1, #6]
 8001b06:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8001b0a:	f04f 020a 	mov.w	r2, #10
 8001b0e:	d101      	bne.n	8001b14 <I2S_Init+0x6c>
    {
      /* MCLK output is enabled */
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8001b10:	0a24      	lsrs	r4, r4, #8
 8001b12:	e002      	b.n	8001b1a <I2S_Init+0x72>
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8001b14:	0176      	lsls	r6, r6, #5
 8001b16:	fbb4 f4f6 	udiv	r4, r4, r6
 8001b1a:	4362      	muls	r2, r4
 8001b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b20:	3305      	adds	r3, #5
    }
    
    /* Remove the flatting point */
    tmp = tmp / 10;  
 8001b22:	220a      	movs	r2, #10
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8001b24:	b29b      	uxth	r3, r3
    }
    
    /* Remove the flatting point */
    tmp = tmp / 10;  
 8001b26:	fbb3 f3f2 	udiv	r3, r3, r2
      
    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 8001b2a:	f003 0201 	and.w	r2, r3, #1
   
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
 8001b2e:	0212      	lsls	r2, r2, #8
      
    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 8001b30:	f3c3 034f 	ubfx	r3, r3, #1, #16
   
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
 8001b34:	b292      	uxth	r2, r2
 8001b36:	e000      	b.n	8001b3a <I2S_Init+0x92>
  tmpreg = SPIx->I2SCFGR;
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
  {
    i2sodd = (uint16_t)0;
 8001b38:	2200      	movs	r2, #0
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 8001b3a:	1e9c      	subs	r4, r3, #2
 8001b3c:	b2a4      	uxth	r4, r4
  {
    /* Set the default values */
    i2sdiv = 2;
    i2sodd = 0;
 8001b3e:	2cfe      	cmp	r4, #254	; 0xfe
 8001b40:	bf28      	it	cs
 8001b42:	2200      	movcs	r2, #0
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 8001b44:	88cc      	ldrh	r4, [r1, #6]
  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
  {
    /* Set the default values */
    i2sdiv = 2;
    i2sodd = 0;
 8001b46:	bf28      	it	cs
 8001b48:	2302      	movcs	r3, #2
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 8001b4a:	4313      	orrs	r3, r2
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8001b4c:	880a      	ldrh	r2, [r1, #0]
    i2sdiv = 2;
    i2sodd = 0;
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 8001b4e:	4323      	orrs	r3, r4
 8001b50:	8403      	strh	r3, [r0, #32]
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8001b52:	ea45 0302 	orr.w	r3, r5, r2

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 8001b56:	884a      	ldrh	r2, [r1, #2]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8001b58:	f443 6300 	orr.w	r3, r3, #2048	; 0x800

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	888a      	ldrh	r2, [r1, #4]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	898a      	ldrh	r2, [r1, #12]
 8001b64:	4313      	orrs	r3, r2
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  SPIx->I2SCFGR = tmpreg;
 8001b66:	8383      	strh	r3, [r0, #28]
 8001b68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	40023800 	.word	0x40023800
 8001b70:	007a1200 	.word	0x007a1200

08001b74 <SPI_StructInit>:
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8001b74:	2300      	movs	r3, #0
 8001b76:	8003      	strh	r3, [r0, #0]
  /* initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 8001b78:	8043      	strh	r3, [r0, #2]
  /* initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 8001b7a:	8083      	strh	r3, [r0, #4]
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 8001b7c:	80c3      	strh	r3, [r0, #6]
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 8001b7e:	8103      	strh	r3, [r0, #8]
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 8001b80:	8143      	strh	r3, [r0, #10]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 8001b82:	8183      	strh	r3, [r0, #12]
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 8001b84:	81c3      	strh	r3, [r0, #14]
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 8001b86:	2307      	movs	r3, #7
 8001b88:	8203      	strh	r3, [r0, #16]
 8001b8a:	4770      	bx	lr

08001b8c <I2S_StructInit>:
  */
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
{
/*--------------- Reset I2S init structure parameters values -----------------*/
  /* Initialize the I2S_Mode member */
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 8001b8c:	2300      	movs	r3, #0
  
  /* Initialize the I2S_MCLKOutput member */
  I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
  
  /* Initialize the I2S_AudioFreq member */
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 8001b8e:	2202      	movs	r2, #2
  */
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
{
/*--------------- Reset I2S init structure parameters values -----------------*/
  /* Initialize the I2S_Mode member */
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 8001b90:	8003      	strh	r3, [r0, #0]
  
  /* Initialize the I2S_Standard member */
  I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
 8001b92:	8043      	strh	r3, [r0, #2]
  
  /* Initialize the I2S_DataFormat member */
  I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
 8001b94:	8083      	strh	r3, [r0, #4]
  
  /* Initialize the I2S_MCLKOutput member */
  I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
 8001b96:	80c3      	strh	r3, [r0, #6]
  
  /* Initialize the I2S_AudioFreq member */
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 8001b98:	6082      	str	r2, [r0, #8]
  
  /* Initialize the I2S_CPOL member */
  I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
 8001b9a:	8183      	strh	r3, [r0, #12]
 8001b9c:	4770      	bx	lr

08001b9e <SPI_Cmd>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8001b9e:	8803      	ldrh	r3, [r0, #0]
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001ba0:	b119      	cbz	r1, 8001baa <SPI_Cmd+0xc>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ba8:	e003      	b.n	8001bb2 <SPI_Cmd+0x14>
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 8001baa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001bae:	041b      	lsls	r3, r3, #16
 8001bb0:	0c1b      	lsrs	r3, r3, #16
 8001bb2:	8003      	strh	r3, [r0, #0]
 8001bb4:	4770      	bx	lr

08001bb6 <I2S_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 8001bb6:	8b83      	ldrh	r3, [r0, #28]
{
  /* Check the parameters */
  assert_param(IS_SPI_23_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001bb8:	b119      	cbz	r1, 8001bc2 <I2S_Cmd+0xc>
  {
    /* Enable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bc0:	e003      	b.n	8001bca <I2S_Cmd+0x14>
  }
  else
  {
    /* Disable the selected SPI peripheral in I2S mode */
    SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
 8001bc2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001bc6:	041b      	lsls	r3, r3, #16
 8001bc8:	0c1b      	lsrs	r3, r3, #16
 8001bca:	8383      	strh	r3, [r0, #28]
 8001bcc:	4770      	bx	lr

08001bce <SPI_DataSizeConfig>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DATASIZE(SPI_DataSize));
  /* Clear DFF bit */
  SPIx->CR1 &= (uint16_t)~SPI_DataSize_16b;
 8001bce:	8803      	ldrh	r3, [r0, #0]
 8001bd0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001bd4:	041b      	lsls	r3, r3, #16
 8001bd6:	0c1b      	lsrs	r3, r3, #16
 8001bd8:	8003      	strh	r3, [r0, #0]
  /* Set new DFF bit value */
  SPIx->CR1 |= SPI_DataSize;
 8001bda:	8803      	ldrh	r3, [r0, #0]
 8001bdc:	b29b      	uxth	r3, r3
 8001bde:	4319      	orrs	r1, r3
 8001be0:	8001      	strh	r1, [r0, #0]
 8001be2:	4770      	bx	lr

08001be4 <SPI_BiDirectionalLineConfig>:
void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
 8001be4:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
  {
    /* Set the Tx only mode */
    SPIx->CR1 |= SPI_Direction_Tx;
 8001be8:	8803      	ldrh	r3, [r0, #0]
void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
 8001bea:	d103      	bne.n	8001bf4 <SPI_BiDirectionalLineConfig+0x10>
  {
    /* Set the Tx only mode */
    SPIx->CR1 |= SPI_Direction_Tx;
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bf2:	e003      	b.n	8001bfc <SPI_BiDirectionalLineConfig+0x18>
  }
  else
  {
    /* Set the Rx only mode */
    SPIx->CR1 &= SPI_Direction_Rx;
 8001bf4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001bf8:	041b      	lsls	r3, r3, #16
 8001bfa:	0c1b      	lsrs	r3, r3, #16
 8001bfc:	8003      	strh	r3, [r0, #0]
 8001bfe:	4770      	bx	lr

08001c00 <SPI_NSSInternalSoftwareConfig>:
void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 8001c00:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8001c04:	4299      	cmp	r1, r3
  {
    /* Set NSS pin internally by software */
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 8001c06:	8803      	ldrh	r3, [r0, #0]
void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 8001c08:	d003      	beq.n	8001c12 <SPI_NSSInternalSoftwareConfig+0x12>
  {
    /* Set NSS pin internally by software */
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c10:	e003      	b.n	8001c1a <SPI_NSSInternalSoftwareConfig+0x1a>
  }
  else
  {
    /* Reset NSS pin internally by software */
    SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 8001c12:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c16:	041b      	lsls	r3, r3, #16
 8001c18:	0c1b      	lsrs	r3, r3, #16
 8001c1a:	8003      	strh	r3, [r0, #0]
 8001c1c:	4770      	bx	lr

08001c1e <SPI_SSOutputCmd>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
 8001c1e:	8883      	ldrh	r3, [r0, #4]
void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001c20:	b119      	cbz	r1, 8001c2a <SPI_SSOutputCmd+0xc>
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	f043 0304 	orr.w	r3, r3, #4
 8001c28:	e003      	b.n	8001c32 <SPI_SSOutputCmd+0x14>
  }
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_SSOE);
 8001c2a:	f023 0304 	bic.w	r3, r3, #4
 8001c2e:	041b      	lsls	r3, r3, #16
 8001c30:	0c1b      	lsrs	r3, r3, #16
 8001c32:	8083      	strh	r3, [r0, #4]
 8001c34:	4770      	bx	lr

08001c36 <SPI_TIModeCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TI mode for the selected SPI peripheral */
    SPIx->CR2 |= SPI_CR2_FRF;
 8001c36:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001c38:	b119      	cbz	r1, 8001c42 <SPI_TIModeCmd+0xc>
  {
    /* Enable the TI mode for the selected SPI peripheral */
    SPIx->CR2 |= SPI_CR2_FRF;
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	f043 0310 	orr.w	r3, r3, #16
 8001c40:	e003      	b.n	8001c4a <SPI_TIModeCmd+0x14>
  }
  else
  {
    /* Disable the TI mode for the selected SPI peripheral */
    SPIx->CR2 &= (uint16_t)~SPI_CR2_FRF;
 8001c42:	f023 0310 	bic.w	r3, r3, #16
 8001c46:	041b      	lsls	r3, r3, #16
 8001c48:	0c1b      	lsrs	r3, r3, #16
 8001c4a:	8083      	strh	r3, [r0, #4]
 8001c4c:	4770      	bx	lr

08001c4e <I2S_FullDuplexConfig>:
  assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 8001c4e:	8b83      	ldrh	r3, [r0, #28]
 8001c50:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001c54:	f023 030f 	bic.w	r3, r3, #15
 8001c58:	041b      	lsls	r3, r3, #16
 8001c5a:	0c1b      	lsrs	r3, r3, #16
 8001c5c:	8383      	strh	r3, [r0, #28]
  I2Sxext->I2SPR = 0x0002;
 8001c5e:	2302      	movs	r3, #2
 8001c60:	8403      	strh	r3, [r0, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 8001c62:	880b      	ldrh	r3, [r1, #0]
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
  I2Sxext->I2SPR = 0x0002;
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
 8001c64:	8b82      	ldrh	r2, [r0, #28]
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 8001c66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  * @note   The I2S full duplex extension can be configured in slave mode only.    
  *  
  * @retval None
  */
void I2S_FullDuplexConfig(SPI_TypeDef* I2Sxext, I2S_InitTypeDef* I2S_InitStruct)
{
 8001c6a:	b510      	push	{r4, lr}
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 8001c6c:	d102      	bne.n	8001c74 <I2S_FullDuplexConfig+0x26>
  {
    tmp = I2S_Mode_SlaveRx;
 8001c6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c72:	e002      	b.n	8001c7a <I2S_FullDuplexConfig+0x2c>
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d0fa      	beq.n	8001c6e <I2S_FullDuplexConfig+0x20>
  }
  else
  {
    if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterRx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveRx))
    {
      tmp = I2S_Mode_SlaveTx;
 8001c78:	2300      	movs	r3, #0
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8001c7a:	884c      	ldrh	r4, [r1, #2]
 8001c7c:	4322      	orrs	r2, r4
    }
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8001c7e:	888c      	ldrh	r4, [r1, #4]
 8001c80:	8989      	ldrh	r1, [r1, #12]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8001c82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    }
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8001c86:	4322      	orrs	r2, r4
 8001c88:	430a      	orrs	r2, r1
 8001c8a:	b292      	uxth	r2, r2
 8001c8c:	4313      	orrs	r3, r2
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  I2Sxext->I2SCFGR = tmpreg;
 8001c8e:	8383      	strh	r3, [r0, #28]
 8001c90:	bd10      	pop	{r4, pc}

08001c92 <SPI_I2S_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 8001c92:	8980      	ldrh	r0, [r0, #12]
}
 8001c94:	b280      	uxth	r0, r0
 8001c96:	4770      	bx	lr

08001c98 <SPI_I2S_SendData>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8001c98:	8181      	strh	r1, [r0, #12]
 8001c9a:	4770      	bx	lr

08001c9c <SPI_CalculateCRC>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI CRC calculation */
    SPIx->CR1 |= SPI_CR1_CRCEN;
 8001c9c:	8803      	ldrh	r3, [r0, #0]
void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001c9e:	b119      	cbz	r1, 8001ca8 <SPI_CalculateCRC+0xc>
  {
    /* Enable the selected SPI CRC calculation */
    SPIx->CR1 |= SPI_CR1_CRCEN;
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ca6:	e003      	b.n	8001cb0 <SPI_CalculateCRC+0x14>
  }
  else
  {
    /* Disable the selected SPI CRC calculation */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCEN);
 8001ca8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001cac:	041b      	lsls	r3, r3, #16
 8001cae:	0c1b      	lsrs	r3, r3, #16
 8001cb0:	8003      	strh	r3, [r0, #0]
 8001cb2:	4770      	bx	lr

08001cb4 <SPI_TransmitCRC>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Enable the selected SPI CRC transmission */
  SPIx->CR1 |= SPI_CR1_CRCNEXT;
 8001cb4:	8803      	ldrh	r3, [r0, #0]
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001cbc:	8003      	strh	r3, [r0, #0]
 8001cbe:	4770      	bx	lr

08001cc0 <SPI_GetCRC>:
{
  uint16_t crcreg = 0;
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_CRC(SPI_CRC));
  if (SPI_CRC != SPI_CRC_Rx)
 8001cc0:	2901      	cmp	r1, #1
  {
    /* Get the Tx CRC register */
    crcreg = SPIx->TXCRCR;
 8001cc2:	bf14      	ite	ne
 8001cc4:	8b00      	ldrhne	r0, [r0, #24]
  }
  else
  {
    /* Get the Rx CRC register */
    crcreg = SPIx->RXCRCR;
 8001cc6:	8a80      	ldrheq	r0, [r0, #20]
 8001cc8:	b280      	uxth	r0, r0
  }
  /* Return the selected CRC register */
  return crcreg;
}
 8001cca:	4770      	bx	lr

08001ccc <SPI_GetCRCPolynomial>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the CRC polynomial register */
  return SPIx->CRCPR;
 8001ccc:	8a00      	ldrh	r0, [r0, #16]
}
 8001cce:	b280      	uxth	r0, r0
 8001cd0:	4770      	bx	lr

08001cd2 <SPI_I2S_DMACmd>:
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 8001cd2:	8883      	ldrh	r3, [r0, #4]
 8001cd4:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
 8001cd6:	b10a      	cbz	r2, 8001cdc <SPI_I2S_DMACmd+0xa>
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 8001cd8:	4319      	orrs	r1, r3
 8001cda:	e001      	b.n	8001ce0 <SPI_I2S_DMACmd+0xe>
  }
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 8001cdc:	ea23 0101 	bic.w	r1, r3, r1
 8001ce0:	8081      	strh	r1, [r0, #4]
 8001ce2:	4770      	bx	lr

08001ce4 <SPI_I2S_ITConfig>:

  /* Get the SPI IT index */
  itpos = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 8001ce4:	0909      	lsrs	r1, r1, #4
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	fa03 f301 	lsl.w	r3, r3, r1
 8001cec:	b29b      	uxth	r3, r3

  if (NewState != DISABLE)
 8001cee:	b11a      	cbz	r2, 8001cf8 <SPI_I2S_ITConfig+0x14>
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 8001cf0:	8882      	ldrh	r2, [r0, #4]
 8001cf2:	b292      	uxth	r2, r2
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	e003      	b.n	8001d00 <SPI_I2S_ITConfig+0x1c>
  }
  else
  {
    /* Disable the selected SPI interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
 8001cf8:	8882      	ldrh	r2, [r0, #4]
 8001cfa:	b292      	uxth	r2, r2
 8001cfc:	ea22 0303 	bic.w	r3, r2, r3
 8001d00:	8083      	strh	r3, [r0, #4]
 8001d02:	4770      	bx	lr

08001d04 <SPI_I2S_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8001d04:	8903      	ldrh	r3, [r0, #8]
 8001d06:	4219      	tst	r1, r3
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
}
 8001d08:	bf0c      	ite	eq
 8001d0a:	2000      	moveq	r0, #0
 8001d0c:	2001      	movne	r0, #1
 8001d0e:	4770      	bx	lr

08001d10 <SPI_I2S_ClearFlag>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));
    
  /* Clear the selected SPI CRC Error (CRCERR) flag */
  SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
 8001d10:	43c9      	mvns	r1, r1
 8001d12:	8101      	strh	r1, [r0, #8]
 8001d14:	4770      	bx	lr

08001d16 <SPI_I2S_GetITStatus>:
  *            @arg I2S_IT_UDR: Underrun interrupt.  
  *            @arg SPI_I2S_IT_TIFRFE: Format Error interrupt.  
  * @retval The new state of SPI_I2S_IT (SET or RESET).
  */
ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
{
 8001d16:	b510      	push	{r4, lr}

  /* Set the IT mask */
  itmask = 0x01 << itmask;

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 8001d18:	8884      	ldrh	r4, [r0, #4]

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8001d1a:	8900      	ldrh	r0, [r0, #8]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));

  /* Get the SPI_I2S_IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	f001 020f 	and.w	r2, r1, #15

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8001d22:	b280      	uxth	r0, r0
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));

  /* Get the SPI_I2S_IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 8001d24:	fa03 f202 	lsl.w	r2, r3, r2

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8001d28:	4010      	ands	r0, r2

  /* Set the IT mask */
  itmask = 0x01 << itmask;

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 8001d2a:	b2a4      	uxth	r4, r4

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8001d2c:	d006      	beq.n	8001d3c <SPI_I2S_GetITStatus+0x26>

  /* Get the SPI_I2S_IT IT mask */
  itmask = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = 0x01 << itmask;
 8001d2e:	0909      	lsrs	r1, r1, #4
 8001d30:	fa03 f301 	lsl.w	r3, r3, r1

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8001d34:	421c      	tst	r4, r3
  {
    /* SPI_I2S_IT is set */
    bitstatus = SET;
 8001d36:	bf0c      	ite	eq
 8001d38:	2000      	moveq	r0, #0
 8001d3a:	2001      	movne	r0, #1
    /* SPI_I2S_IT is reset */
    bitstatus = RESET;
  }
  /* Return the SPI_I2S_IT status */
  return bitstatus;
}
 8001d3c:	bd10      	pop	{r4, pc}

08001d3e <SPI_I2S_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_IT(SPI_I2S_IT));

  /* Get the SPI_I2S IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 8001d3e:	f001 010f 	and.w	r1, r1, #15
 8001d42:	2301      	movs	r3, #1
 8001d44:	fa03 f301 	lsl.w	r3, r3, r1

  /* Clear the selected SPI CRC Error (CRCERR) interrupt pending bit */
  SPIx->SR = (uint16_t)~itpos;
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	8103      	strh	r3, [r0, #8]
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop

08001d50 <TI1_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8001d50:	b530      	push	{r4, r5, lr}
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8001d52:	8c04      	ldrh	r4, [r0, #32]
 8001d54:	f024 0401 	bic.w	r4, r4, #1
 8001d58:	0424      	lsls	r4, r4, #16
 8001d5a:	0c24      	lsrs	r4, r4, #16
 8001d5c:	8404      	strh	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001d5e:	8b05      	ldrh	r5, [r0, #24]
  tmpccer = TIMx->CCER;
 8001d60:	8c04      	ldrh	r4, [r0, #32]
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;
 8001d62:	b2ad      	uxth	r5, r5
  tmpccer = TIMx->CCER;
 8001d64:	b2a4      	uxth	r4, r4

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 8001d66:	f025 05f3 	bic.w	r5, r5, #243	; 0xf3
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001d6a:	f024 040a 	bic.w	r4, r4, #10
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8001d6e:	432a      	orrs	r2, r5

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8001d70:	f044 0401 	orr.w	r4, r4, #1
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8001d74:	ea42 1303 	orr.w	r3, r2, r3, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8001d78:	4321      	orrs	r1, r4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001d7a:	8303      	strh	r3, [r0, #24]
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8001d7c:	461d      	mov	r5, r3
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
  TIMx->CCER = tmpccer;
 8001d7e:	8401      	strh	r1, [r0, #32]
 8001d80:	bd30      	pop	{r4, r5, pc}

08001d82 <TI2_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8001d82:	b530      	push	{r4, r5, lr}
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8001d84:	8c04      	ldrh	r4, [r0, #32]
 8001d86:	f024 0410 	bic.w	r4, r4, #16
 8001d8a:	0424      	lsls	r4, r4, #16
 8001d8c:	0c24      	lsrs	r4, r4, #16
 8001d8e:	8404      	strh	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001d90:	8b04      	ldrh	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8001d92:	8c05      	ldrh	r5, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8001d94:	f424 7440 	bic.w	r4, r4, #768	; 0x300
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
 8001d98:	b2ad      	uxth	r5, r5
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8001d9a:	0524      	lsls	r4, r4, #20
 8001d9c:	0d24      	lsrs	r4, r4, #20
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001d9e:	f025 05a0 	bic.w	r5, r5, #160	; 0xa0
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8001da2:	f045 0510 	orr.w	r5, r5, #16
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8001da6:	ea44 2202 	orr.w	r2, r4, r2, lsl #8
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8001daa:	ea45 1101 	orr.w	r1, r5, r1, lsl #4
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8001dae:	ea42 3303 	orr.w	r3, r2, r3, lsl #12
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001db2:	8303      	strh	r3, [r0, #24]
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8001db4:	460d      	mov	r5, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
  TIMx->CCER = tmpccer;
 8001db6:	8401      	strh	r1, [r0, #32]
 8001db8:	bd30      	pop	{r4, r5, pc}

08001dba <TIM_DeInit>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval None

  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 8001dba:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
 8001dbc:	4b47      	ldr	r3, [pc, #284]	; (8001edc <TIM_DeInit+0x122>)
 8001dbe:	4298      	cmp	r0, r3
 8001dc0:	d105      	bne.n	8001dce <TIM_DeInit+0x14>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 8001dc2:	2001      	movs	r0, #1
 8001dc4:	4601      	mov	r1, r0
 8001dc6:	f7ff fd89 	bl	80018dc <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 8001dca:	2001      	movs	r0, #1
 8001dcc:	e03d      	b.n	8001e4a <TIM_DeInit+0x90>
  } 
  else if (TIMx == TIM2) 
 8001dce:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001dd2:	d105      	bne.n	8001de0 <TIM_DeInit+0x26>
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 8001dd4:	2001      	movs	r0, #1
 8001dd6:	4601      	mov	r1, r0
 8001dd8:	f7ff fd74 	bl	80018c4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 8001ddc:	2001      	movs	r0, #1
 8001dde:	e076      	b.n	8001ece <TIM_DeInit+0x114>
  }  
  else if (TIMx == TIM3)
 8001de0:	4b3f      	ldr	r3, [pc, #252]	; (8001ee0 <TIM_DeInit+0x126>)
 8001de2:	4298      	cmp	r0, r3
 8001de4:	d105      	bne.n	8001df2 <TIM_DeInit+0x38>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 8001de6:	2002      	movs	r0, #2
 8001de8:	2101      	movs	r1, #1
 8001dea:	f7ff fd6b 	bl	80018c4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 8001dee:	2002      	movs	r0, #2
 8001df0:	e06d      	b.n	8001ece <TIM_DeInit+0x114>
  }  
  else if (TIMx == TIM4)
 8001df2:	4b3c      	ldr	r3, [pc, #240]	; (8001ee4 <TIM_DeInit+0x12a>)
 8001df4:	4298      	cmp	r0, r3
 8001df6:	d105      	bne.n	8001e04 <TIM_DeInit+0x4a>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 8001df8:	2004      	movs	r0, #4
 8001dfa:	2101      	movs	r1, #1
 8001dfc:	f7ff fd62 	bl	80018c4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 8001e00:	2004      	movs	r0, #4
 8001e02:	e064      	b.n	8001ece <TIM_DeInit+0x114>
  }  
  else if (TIMx == TIM5)
 8001e04:	4b38      	ldr	r3, [pc, #224]	; (8001ee8 <TIM_DeInit+0x12e>)
 8001e06:	4298      	cmp	r0, r3
 8001e08:	d105      	bne.n	8001e16 <TIM_DeInit+0x5c>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 8001e0a:	2008      	movs	r0, #8
 8001e0c:	2101      	movs	r1, #1
 8001e0e:	f7ff fd59 	bl	80018c4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 8001e12:	2008      	movs	r0, #8
 8001e14:	e05b      	b.n	8001ece <TIM_DeInit+0x114>
  }  
  else if (TIMx == TIM6)  
 8001e16:	4b35      	ldr	r3, [pc, #212]	; (8001eec <TIM_DeInit+0x132>)
 8001e18:	4298      	cmp	r0, r3
 8001e1a:	d105      	bne.n	8001e28 <TIM_DeInit+0x6e>
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 8001e1c:	2010      	movs	r0, #16
 8001e1e:	2101      	movs	r1, #1
 8001e20:	f7ff fd50 	bl	80018c4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 8001e24:	2010      	movs	r0, #16
 8001e26:	e052      	b.n	8001ece <TIM_DeInit+0x114>
  }  
  else if (TIMx == TIM7)
 8001e28:	4b31      	ldr	r3, [pc, #196]	; (8001ef0 <TIM_DeInit+0x136>)
 8001e2a:	4298      	cmp	r0, r3
 8001e2c:	d105      	bne.n	8001e3a <TIM_DeInit+0x80>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 8001e2e:	2020      	movs	r0, #32
 8001e30:	2101      	movs	r1, #1
 8001e32:	f7ff fd47 	bl	80018c4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 8001e36:	2020      	movs	r0, #32
 8001e38:	e049      	b.n	8001ece <TIM_DeInit+0x114>
  }  
  else if (TIMx == TIM8)
 8001e3a:	4b2e      	ldr	r3, [pc, #184]	; (8001ef4 <TIM_DeInit+0x13a>)
 8001e3c:	4298      	cmp	r0, r3
 8001e3e:	d109      	bne.n	8001e54 <TIM_DeInit+0x9a>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 8001e40:	2002      	movs	r0, #2
 8001e42:	2101      	movs	r1, #1
 8001e44:	f7ff fd4a 	bl	80018dc <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 8001e48:	2002      	movs	r0, #2
 8001e4a:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8001e4c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
  }  
  else if (TIMx == TIM8)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 8001e50:	f7ff bd44 	b.w	80018dc <RCC_APB2PeriphResetCmd>
  }  
  else if (TIMx == TIM9)
 8001e54:	4b28      	ldr	r3, [pc, #160]	; (8001ef8 <TIM_DeInit+0x13e>)
 8001e56:	4298      	cmp	r0, r3
 8001e58:	d107      	bne.n	8001e6a <TIM_DeInit+0xb0>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
 8001e5a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001e5e:	2101      	movs	r1, #1
 8001e60:	f7ff fd3c 	bl	80018dc <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 8001e64:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001e68:	e7ef      	b.n	8001e4a <TIM_DeInit+0x90>
   }  
  else if (TIMx == TIM10)
 8001e6a:	4b24      	ldr	r3, [pc, #144]	; (8001efc <TIM_DeInit+0x142>)
 8001e6c:	4298      	cmp	r0, r3
 8001e6e:	d107      	bne.n	8001e80 <TIM_DeInit+0xc6>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
 8001e70:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001e74:	2101      	movs	r1, #1
 8001e76:	f7ff fd31 	bl	80018dc <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 8001e7a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001e7e:	e7e4      	b.n	8001e4a <TIM_DeInit+0x90>
  }  
  else if (TIMx == TIM11) 
 8001e80:	4b1f      	ldr	r3, [pc, #124]	; (8001f00 <TIM_DeInit+0x146>)
 8001e82:	4298      	cmp	r0, r3
 8001e84:	d107      	bne.n	8001e96 <TIM_DeInit+0xdc>
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
 8001e86:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001e8a:	2101      	movs	r1, #1
 8001e8c:	f7ff fd26 	bl	80018dc <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 8001e90:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001e94:	e7d9      	b.n	8001e4a <TIM_DeInit+0x90>
  }  
  else if (TIMx == TIM12)
 8001e96:	4b1b      	ldr	r3, [pc, #108]	; (8001f04 <TIM_DeInit+0x14a>)
 8001e98:	4298      	cmp	r0, r3
 8001e9a:	d105      	bne.n	8001ea8 <TIM_DeInit+0xee>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
 8001e9c:	2040      	movs	r0, #64	; 0x40
 8001e9e:	2101      	movs	r1, #1
 8001ea0:	f7ff fd10 	bl	80018c4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 8001ea4:	2040      	movs	r0, #64	; 0x40
 8001ea6:	e012      	b.n	8001ece <TIM_DeInit+0x114>
  }  
  else if (TIMx == TIM13) 
 8001ea8:	4b17      	ldr	r3, [pc, #92]	; (8001f08 <TIM_DeInit+0x14e>)
 8001eaa:	4298      	cmp	r0, r3
 8001eac:	d105      	bne.n	8001eba <TIM_DeInit+0x100>
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
 8001eae:	2080      	movs	r0, #128	; 0x80
 8001eb0:	2101      	movs	r1, #1
 8001eb2:	f7ff fd07 	bl	80018c4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 8001eb6:	2080      	movs	r0, #128	; 0x80
 8001eb8:	e009      	b.n	8001ece <TIM_DeInit+0x114>
  }  
  else
  { 
    if (TIMx == TIM14) 
 8001eba:	4b14      	ldr	r3, [pc, #80]	; (8001f0c <TIM_DeInit+0x152>)
 8001ebc:	4298      	cmp	r0, r3
 8001ebe:	d10b      	bne.n	8001ed8 <TIM_DeInit+0x11e>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 8001ec0:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001ec4:	2101      	movs	r1, #1
 8001ec6:	f7ff fcfd 	bl	80018c4 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 8001eca:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001ece:	2100      	movs	r1, #0
    }   
  }
}
 8001ed0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  { 
    if (TIMx == TIM14) 
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 8001ed4:	f7ff bcf6 	b.w	80018c4 <RCC_APB1PeriphResetCmd>
 8001ed8:	bd08      	pop	{r3, pc}
 8001eda:	bf00      	nop
 8001edc:	40010000 	.word	0x40010000
 8001ee0:	40000400 	.word	0x40000400
 8001ee4:	40000800 	.word	0x40000800
 8001ee8:	40000c00 	.word	0x40000c00
 8001eec:	40001000 	.word	0x40001000
 8001ef0:	40001400 	.word	0x40001400
 8001ef4:	40010400 	.word	0x40010400
 8001ef8:	40014000 	.word	0x40014000
 8001efc:	40014400 	.word	0x40014400
 8001f00:	40014800 	.word	0x40014800
 8001f04:	40001800 	.word	0x40001800
 8001f08:	40001c00 	.word	0x40001c00
 8001f0c:	40002000 	.word	0x40002000

08001f10 <TIM_TimeBaseInit>:
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8001f10:	4a1c      	ldr	r2, [pc, #112]	; (8001f84 <TIM_TimeBaseInit+0x74>)
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8001f12:	8803      	ldrh	r3, [r0, #0]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8001f14:	4290      	cmp	r0, r2
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8001f16:	b29b      	uxth	r3, r3

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8001f18:	d012      	beq.n	8001f40 <TIM_TimeBaseInit+0x30>
 8001f1a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f1e:	4290      	cmp	r0, r2
 8001f20:	d00e      	beq.n	8001f40 <TIM_TimeBaseInit+0x30>
 8001f22:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001f26:	d00b      	beq.n	8001f40 <TIM_TimeBaseInit+0x30>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8001f28:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 8001f2c:	4290      	cmp	r0, r2
 8001f2e:	d007      	beq.n	8001f40 <TIM_TimeBaseInit+0x30>
 8001f30:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f34:	4290      	cmp	r0, r2
 8001f36:	d003      	beq.n	8001f40 <TIM_TimeBaseInit+0x30>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8001f38:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f3c:	4290      	cmp	r0, r2
 8001f3e:	d103      	bne.n	8001f48 <TIM_TimeBaseInit+0x38>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8001f40:	884a      	ldrh	r2, [r1, #2]
  if((TIMx == TIM1) || (TIMx == TIM8)||
     (TIMx == TIM2) || (TIMx == TIM3)||
     (TIMx == TIM4) || (TIMx == TIM5)) 
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8001f42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8001f46:	4313      	orrs	r3, r2
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8001f48:	4a0f      	ldr	r2, [pc, #60]	; (8001f88 <TIM_TimeBaseInit+0x78>)
 8001f4a:	4290      	cmp	r0, r2
 8001f4c:	d008      	beq.n	8001f60 <TIM_TimeBaseInit+0x50>
 8001f4e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f52:	4290      	cmp	r0, r2
 8001f54:	d004      	beq.n	8001f60 <TIM_TimeBaseInit+0x50>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8001f56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8001f5a:	890a      	ldrh	r2, [r1, #8]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8001f5c:	b29b      	uxth	r3, r3
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8001f5e:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 8001f60:	8003      	strh	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8001f62:	684b      	ldr	r3, [r1, #4]
 8001f64:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8001f66:	880b      	ldrh	r3, [r1, #0]
 8001f68:	8503      	strh	r3, [r0, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8001f6a:	4b06      	ldr	r3, [pc, #24]	; (8001f84 <TIM_TimeBaseInit+0x74>)
 8001f6c:	4298      	cmp	r0, r3
 8001f6e:	d003      	beq.n	8001f78 <TIM_TimeBaseInit+0x68>
 8001f70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f74:	4298      	cmp	r0, r3
 8001f76:	d101      	bne.n	8001f7c <TIM_TimeBaseInit+0x6c>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8001f78:	7a8b      	ldrb	r3, [r1, #10]
 8001f7a:	8603      	strh	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	8283      	strh	r3, [r0, #20]
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	40010000 	.word	0x40010000
 8001f88:	40001000 	.word	0x40001000

08001f8c <TIM_TimeBaseStructInit>:
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 8001f8c:	f04f 33ff 	mov.w	r3, #4294967295
 8001f90:	6043      	str	r3, [r0, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 8001f92:	2300      	movs	r3, #0
 8001f94:	8003      	strh	r3, [r0, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 8001f96:	8103      	strh	r3, [r0, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 8001f98:	8043      	strh	r3, [r0, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 8001f9a:	7283      	strb	r3, [r0, #10]
 8001f9c:	4770      	bx	lr

08001f9e <TIM_PrescalerConfig>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
 8001f9e:	8501      	strh	r1, [r0, #40]	; 0x28
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
 8001fa0:	8282      	strh	r2, [r0, #20]
 8001fa2:	4770      	bx	lr

08001fa4 <TIM_CounterModeConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));

  tmpcr1 = TIMx->CR1;
 8001fa4:	8803      	ldrh	r3, [r0, #0]

  /* Reset the CMS and DIR Bits */
  tmpcr1 &= (uint16_t)~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001faa:	041b      	lsls	r3, r3, #16
 8001fac:	0c1b      	lsrs	r3, r3, #16

  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
 8001fae:	4319      	orrs	r1, r3

  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
 8001fb0:	8001      	strh	r1, [r0, #0]
 8001fb2:	4770      	bx	lr

08001fb4 <TIM_SetCounter>:
{
  /* Check the parameters */
   assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 8001fb4:	6241      	str	r1, [r0, #36]	; 0x24
 8001fb6:	4770      	bx	lr

08001fb8 <TIM_SetAutoreload>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 8001fb8:	62c1      	str	r1, [r0, #44]	; 0x2c
 8001fba:	4770      	bx	lr

08001fbc <TIM_GetCounter>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Counter Register value */
  return TIMx->CNT;
 8001fbc:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
 8001fbe:	4770      	bx	lr

08001fc0 <TIM_GetPrescaler>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Prescaler Register value */
  return TIMx->PSC;
 8001fc0:	8d00      	ldrh	r0, [r0, #40]	; 0x28
}
 8001fc2:	b280      	uxth	r0, r0
 8001fc4:	4770      	bx	lr

08001fc6 <TIM_UpdateDisableConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 8001fc6:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001fc8:	b119      	cbz	r1, 8001fd2 <TIM_UpdateDisableConfig+0xc>
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	f043 0302 	orr.w	r3, r3, #2
 8001fd0:	e003      	b.n	8001fda <TIM_UpdateDisableConfig+0x14>
  }
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_UDIS;
 8001fd2:	f023 0302 	bic.w	r3, r3, #2
 8001fd6:	041b      	lsls	r3, r3, #16
 8001fd8:	0c1b      	lsrs	r3, r3, #16
 8001fda:	8003      	strh	r3, [r0, #0]
 8001fdc:	4770      	bx	lr

08001fde <TIM_UpdateRequestConfig>:
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 8001fde:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
 8001fe0:	b119      	cbz	r1, 8001fea <TIM_UpdateRequestConfig+0xc>
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	f043 0304 	orr.w	r3, r3, #4
 8001fe8:	e003      	b.n	8001ff2 <TIM_UpdateRequestConfig+0x14>
  }
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_URS;
 8001fea:	f023 0304 	bic.w	r3, r3, #4
 8001fee:	041b      	lsls	r3, r3, #16
 8001ff0:	0c1b      	lsrs	r3, r3, #16
 8001ff2:	8003      	strh	r3, [r0, #0]
 8001ff4:	4770      	bx	lr

08001ff6 <TIM_ARRPreloadConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 8001ff6:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001ff8:	b119      	cbz	r1, 8002002 <TIM_ARRPreloadConfig+0xc>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002000:	e003      	b.n	800200a <TIM_ARRPreloadConfig+0x14>
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 8002002:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002006:	041b      	lsls	r3, r3, #16
 8002008:	0c1b      	lsrs	r3, r3, #16
 800200a:	8003      	strh	r3, [r0, #0]
 800200c:	4770      	bx	lr

0800200e <TIM_SelectOnePulseMode>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));

  /* Reset the OPM Bit */
  TIMx->CR1 &= (uint16_t)~TIM_CR1_OPM;
 800200e:	8803      	ldrh	r3, [r0, #0]
 8002010:	f023 0308 	bic.w	r3, r3, #8
 8002014:	041b      	lsls	r3, r3, #16
 8002016:	0c1b      	lsrs	r3, r3, #16
 8002018:	8003      	strh	r3, [r0, #0]

  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
 800201a:	8803      	ldrh	r3, [r0, #0]
 800201c:	b29b      	uxth	r3, r3
 800201e:	4319      	orrs	r1, r3
 8002020:	8001      	strh	r1, [r0, #0]
 8002022:	4770      	bx	lr

08002024 <TIM_SetClockDivision>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));

  /* Reset the CKD Bits */
  TIMx->CR1 &= (uint16_t)(~TIM_CR1_CKD);
 8002024:	8803      	ldrh	r3, [r0, #0]
 8002026:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800202a:	041b      	lsls	r3, r3, #16
 800202c:	0c1b      	lsrs	r3, r3, #16
 800202e:	8003      	strh	r3, [r0, #0]

  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
 8002030:	8803      	ldrh	r3, [r0, #0]
 8002032:	b29b      	uxth	r3, r3
 8002034:	4319      	orrs	r1, r3
 8002036:	8001      	strh	r1, [r0, #0]
 8002038:	4770      	bx	lr

0800203a <TIM_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 800203a:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800203c:	b119      	cbz	r1, 8002046 <TIM_Cmd+0xc>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 800203e:	b29b      	uxth	r3, r3
 8002040:	f043 0301 	orr.w	r3, r3, #1
 8002044:	e003      	b.n	800204e <TIM_Cmd+0x14>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8002046:	f023 0301 	bic.w	r3, r3, #1
 800204a:	041b      	lsls	r3, r3, #16
 800204c:	0c1b      	lsrs	r3, r3, #16
 800204e:	8003      	strh	r3, [r0, #0]
 8002050:	4770      	bx	lr

08002052 <TIM_OC1Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8002052:	8c03      	ldrh	r3, [r0, #32]
 8002054:	f023 0301 	bic.w	r3, r3, #1
 8002058:	041b      	lsls	r3, r3, #16
 800205a:	0c1b      	lsrs	r3, r3, #16
 800205c:	8403      	strh	r3, [r0, #32]
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800205e:	b570      	push	{r4, r5, r6, lr}

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002060:	8c03      	ldrh	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002062:	8884      	ldrh	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002064:	8b02      	ldrh	r2, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8002066:	880d      	ldrh	r5, [r1, #0]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8002068:	884e      	ldrh	r6, [r1, #2]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 800206a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 800206e:	0412      	lsls	r2, r2, #16
 8002070:	0c12      	lsrs	r2, r2, #16
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8002072:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8002074:	898d      	ldrh	r5, [r1, #12]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 8002076:	f023 0302 	bic.w	r3, r3, #2
 800207a:	041b      	lsls	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 800207c:	4335      	orrs	r5, r6
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 800207e:	0c1b      	lsrs	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8002080:	b2ad      	uxth	r5, r5
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8002082:	432b      	orrs	r3, r5
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002084:	4d0e      	ldr	r5, [pc, #56]	; (80020c0 <TIM_OC1Init+0x6e>)
 8002086:	42a8      	cmp	r0, r5
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002088:	b2a4      	uxth	r4, r4
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800208a:	d003      	beq.n	8002094 <TIM_OC1Init+0x42>
 800208c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002090:	42a8      	cmp	r0, r5
 8002092:	d10e      	bne.n	80020b2 <TIM_OC1Init+0x60>
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8002094:	89cd      	ldrh	r5, [r1, #14]
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 8002096:	8a4e      	ldrh	r6, [r1, #18]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 8002098:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 800209c:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 800209e:	888d      	ldrh	r5, [r1, #4]
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 80020a0:	f023 0304 	bic.w	r3, r3, #4
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 80020a4:	432b      	orrs	r3, r5
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 80020a6:	8a0d      	ldrh	r5, [r1, #16]
 80020a8:	4335      	orrs	r5, r6
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 80020aa:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 80020ae:	b2ad      	uxth	r5, r5
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 80020b0:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80020b2:	8084      	strh	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80020b4:	8302      	strh	r2, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 80020b6:	688a      	ldr	r2, [r1, #8]
 80020b8:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020ba:	8403      	strh	r3, [r0, #32]
 80020bc:	bd70      	pop	{r4, r5, r6, pc}
 80020be:	bf00      	nop
 80020c0:	40010000 	.word	0x40010000

080020c4 <TIM_OC2Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 80020c4:	8c03      	ldrh	r3, [r0, #32]
 80020c6:	f023 0310 	bic.w	r3, r3, #16
 80020ca:	041b      	lsls	r3, r3, #16
 80020cc:	0c1b      	lsrs	r3, r3, #16
 80020ce:	8403      	strh	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 80020d0:	8c03      	ldrh	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80020d2:	8882      	ldrh	r2, [r0, #4]
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80020d4:	b530      	push	{r4, r5, lr}
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80020d6:	8b04      	ldrh	r4, [r0, #24]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80020d8:	880d      	ldrh	r5, [r1, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 80020da:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
 80020de:	0424      	lsls	r4, r4, #16
 80020e0:	0c24      	lsrs	r4, r4, #16
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 80020e2:	f023 0320 	bic.w	r3, r3, #32
 80020e6:	041b      	lsls	r3, r3, #16
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80020e8:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 80020ec:	898d      	ldrh	r5, [r1, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 80020ee:	0c1b      	lsrs	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 80020f0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 80020f4:	884d      	ldrh	r5, [r1, #2]
 80020f6:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80020fa:	4d12      	ldr	r5, [pc, #72]	; (8002144 <TIM_OC2Init+0x80>)
 80020fc:	42a8      	cmp	r0, r5
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80020fe:	b292      	uxth	r2, r2
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8002100:	b29b      	uxth	r3, r3
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002102:	d003      	beq.n	800210c <TIM_OC2Init+0x48>
 8002104:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002108:	42a8      	cmp	r0, r5
 800210a:	d115      	bne.n	8002138 <TIM_OC2Init+0x74>
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 800210c:	89cd      	ldrh	r5, [r1, #14]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 800210e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002112:	b29b      	uxth	r3, r3
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 8002114:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
 8002118:	f64f 75bf 	movw	r5, #65471	; 0xffbf
 800211c:	401d      	ands	r5, r3
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 800211e:	888b      	ldrh	r3, [r1, #4]
 8002120:	ea45 1303 	orr.w	r3, r5, r3, lsl #4
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 8002124:	8a0d      	ldrh	r5, [r1, #16]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
 8002126:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 800212a:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 800212e:	8a4d      	ldrh	r5, [r1, #18]
 8002130:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8002134:	b29b      	uxth	r3, r3
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8002136:	b292      	uxth	r2, r2
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002138:	8082      	strh	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 800213a:	688a      	ldr	r2, [r1, #8]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800213c:	8304      	strh	r4, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 800213e:	6382      	str	r2, [r0, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002140:	8403      	strh	r3, [r0, #32]
 8002142:	bd30      	pop	{r4, r5, pc}
 8002144:	40010000 	.word	0x40010000

08002148 <TIM_OC3Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8002148:	8c03      	ldrh	r3, [r0, #32]
 800214a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800214e:	041b      	lsls	r3, r3, #16
 8002150:	0c1b      	lsrs	r3, r3, #16
 8002152:	8403      	strh	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002154:	8c03      	ldrh	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002156:	8882      	ldrh	r2, [r0, #4]
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8002158:	b530      	push	{r4, r5, lr}
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800215a:	8b84      	ldrh	r4, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 800215c:	880d      	ldrh	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 800215e:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 8002162:	0424      	lsls	r4, r4, #16
 8002164:	0c24      	lsrs	r4, r4, #16
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 8002166:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800216a:	041b      	lsls	r3, r3, #16
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 800216c:	432c      	orrs	r4, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 800216e:	898d      	ldrh	r5, [r1, #12]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 8002170:	0c1b      	lsrs	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 8002172:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8002176:	884d      	ldrh	r5, [r1, #2]
 8002178:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800217c:	4d12      	ldr	r5, [pc, #72]	; (80021c8 <TIM_OC3Init+0x80>)
 800217e:	42a8      	cmp	r0, r5
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002180:	b292      	uxth	r2, r2
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8002182:	b29b      	uxth	r3, r3
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002184:	d003      	beq.n	800218e <TIM_OC3Init+0x46>
 8002186:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800218a:	42a8      	cmp	r0, r5
 800218c:	d115      	bne.n	80021ba <TIM_OC3Init+0x72>
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 800218e:	89cd      	ldrh	r5, [r1, #14]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 8002190:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002194:	b29b      	uxth	r3, r3
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8002196:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 800219a:	f64f 35ff 	movw	r5, #64511	; 0xfbff
 800219e:	401d      	ands	r5, r3
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 80021a0:	888b      	ldrh	r3, [r1, #4]
 80021a2:	ea45 2303 	orr.w	r3, r5, r3, lsl #8
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 80021a6:	8a0d      	ldrh	r5, [r1, #16]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 80021a8:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 80021ac:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 80021b0:	8a4d      	ldrh	r5, [r1, #18]
 80021b2:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 80021b6:	b29b      	uxth	r3, r3
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 80021b8:	b292      	uxth	r2, r2
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80021ba:	8082      	strh	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 80021bc:	688a      	ldr	r2, [r1, #8]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80021be:	8384      	strh	r4, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 80021c0:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80021c2:	8403      	strh	r3, [r0, #32]
 80021c4:	bd30      	pop	{r4, r5, pc}
 80021c6:	bf00      	nop
 80021c8:	40010000 	.word	0x40010000

080021cc <TIM_OC4Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 80021cc:	8c03      	ldrh	r3, [r0, #32]
 80021ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80021d2:	041b      	lsls	r3, r3, #16
 80021d4:	0c1b      	lsrs	r3, r3, #16
 80021d6:	8403      	strh	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021d8:	8c03      	ldrh	r3, [r0, #32]
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80021da:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021dc:	8884      	ldrh	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80021de:	8b82      	ldrh	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80021e0:	880d      	ldrh	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 80021e2:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 80021e6:	0412      	lsls	r2, r2, #16
 80021e8:	0c12      	lsrs	r2, r2, #16
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 80021ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80021ee:	041b      	lsls	r3, r3, #16
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80021f0:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 80021f4:	898d      	ldrh	r5, [r1, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 80021f6:	0c1b      	lsrs	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 80021f8:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 80021fc:	884d      	ldrh	r5, [r1, #2]
 80021fe:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002202:	4d0a      	ldr	r5, [pc, #40]	; (800222c <TIM_OC4Init+0x60>)
 8002204:	42a8      	cmp	r0, r5
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002206:	b2a4      	uxth	r4, r4
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002208:	d003      	beq.n	8002212 <TIM_OC4Init+0x46>
 800220a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800220e:	42a8      	cmp	r0, r5
 8002210:	d105      	bne.n	800221e <TIM_OC4Init+0x52>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8002212:	8a0d      	ldrh	r5, [r1, #16]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 8002214:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8002218:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 800221c:	b2a4      	uxth	r4, r4
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800221e:	8084      	strh	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8002220:	8382      	strh	r2, [r0, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8002222:	688a      	ldr	r2, [r1, #8]
 8002224:	6402      	str	r2, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002226:	8403      	strh	r3, [r0, #32]
 8002228:	bd30      	pop	{r4, r5, pc}
 800222a:	bf00      	nop
 800222c:	40010000 	.word	0x40010000

08002230 <TIM_OCStructInit>:
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 8002230:	2300      	movs	r3, #0
 8002232:	8003      	strh	r3, [r0, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 8002234:	8043      	strh	r3, [r0, #2]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 8002236:	8083      	strh	r3, [r0, #4]
  TIM_OCInitStruct->TIM_Pulse = 0x00000000;
 8002238:	6083      	str	r3, [r0, #8]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 800223a:	8183      	strh	r3, [r0, #12]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 800223c:	81c3      	strh	r3, [r0, #14]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 800223e:	8203      	strh	r3, [r0, #16]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 8002240:	8243      	strh	r3, [r0, #18]
 8002242:	4770      	bx	lr

08002244 <TIM_SelectOCxM>:
  *            @arg TIM_ForcedAction_Active
  *            @arg TIM_ForcedAction_InActive
  * @retval None
  */
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
{
 8002244:	b530      	push	{r4, r5, lr}
  tmp += CCMR_OFFSET;

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 8002246:	8c05      	ldrh	r5, [r0, #32]
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
  tmp += CCMR_OFFSET;

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;
 8002248:	2401      	movs	r4, #1

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 800224a:	b2ad      	uxth	r5, r5
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
  tmp += CCMR_OFFSET;

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;
 800224c:	fa04 f401 	lsl.w	r4, r4, r1

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 8002250:	ea25 0404 	bic.w	r4, r5, r4
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
  tmp += CCMR_OFFSET;
 8002254:	f100 0318 	add.w	r3, r0, #24

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 8002258:	8404      	strh	r4, [r0, #32]

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 800225a:	b109      	cbz	r1, 8002260 <TIM_SelectOCxM+0x1c>
 800225c:	2908      	cmp	r1, #8
 800225e:	d107      	bne.n	8002270 <TIM_SelectOCxM+0x2c>
  {
    tmp += (TIM_Channel>>1);
 8002260:	0849      	lsrs	r1, r1, #1

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC13M_MASK;
 8002262:	f64f 708f 	movw	r0, #65423	; 0xff8f
 8002266:	58cc      	ldr	r4, [r1, r3]
 8002268:	4020      	ands	r0, r4
 800226a:	50c8      	str	r0, [r1, r3]
   
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
 800226c:	58c8      	ldr	r0, [r1, r3]
 800226e:	e00a      	b.n	8002286 <TIM_SelectOCxM+0x42>
  }
  else
  {
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
 8002270:	3904      	subs	r1, #4
 8002272:	f3c1 014e 	ubfx	r1, r1, #1, #15

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC24M_MASK;
 8002276:	f648 70ff 	movw	r0, #36863	; 0x8fff
 800227a:	58cc      	ldr	r4, [r1, r3]
 800227c:	4020      	ands	r0, r4
 800227e:	50c8      	str	r0, [r1, r3]
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 8002280:	0212      	lsls	r2, r2, #8
 8002282:	58c8      	ldr	r0, [r1, r3]
 8002284:	b292      	uxth	r2, r2
 8002286:	4302      	orrs	r2, r0
 8002288:	50ca      	str	r2, [r1, r3]
 800228a:	bd30      	pop	{r4, r5, pc}

0800228c <TIM_SetCompare1>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 800228c:	6341      	str	r1, [r0, #52]	; 0x34
 800228e:	4770      	bx	lr

08002290 <TIM_SetCompare2>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 8002290:	6381      	str	r1, [r0, #56]	; 0x38
 8002292:	4770      	bx	lr

08002294 <TIM_SetCompare3>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 8002294:	63c1      	str	r1, [r0, #60]	; 0x3c
 8002296:	4770      	bx	lr

08002298 <TIM_SetCompare4>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
 8002298:	6401      	str	r1, [r0, #64]	; 0x40
 800229a:	4770      	bx	lr

0800229c <TIM_ForcedOC1Config>:
  uint16_t tmpccmr1 = 0;

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 800229c:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1M;
 800229e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022a2:	041b      	lsls	r3, r3, #16
 80022a4:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
 80022a6:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80022a8:	8301      	strh	r1, [r0, #24]
 80022aa:	4770      	bx	lr

080022ac <TIM_ForcedOC2Config>:
  uint16_t tmpccmr1 = 0;

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 80022ac:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2M;
 80022ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022b2:	041b      	lsls	r3, r3, #16
 80022b4:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
 80022b6:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80022ba:	8301      	strh	r1, [r0, #24]
 80022bc:	4770      	bx	lr

080022be <TIM_ForcedOC3Config>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));

  tmpccmr2 = TIMx->CCMR2;
 80022be:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC1M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3M;
 80022c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022c4:	041b      	lsls	r3, r3, #16
 80022c6:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
 80022c8:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80022ca:	8381      	strh	r1, [r0, #28]
 80022cc:	4770      	bx	lr

080022ce <TIM_ForcedOC4Config>:
  uint16_t tmpccmr2 = 0;

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
 80022ce:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC2M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4M;
 80022d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022d4:	041b      	lsls	r3, r3, #16
 80022d6:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
 80022d8:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80022dc:	8381      	strh	r1, [r0, #28]
 80022de:	4770      	bx	lr

080022e0 <TIM_OC1PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 80022e0:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC1PE);
 80022e2:	f023 0308 	bic.w	r3, r3, #8
 80022e6:	041b      	lsls	r3, r3, #16
 80022e8:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 80022ea:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80022ec:	8301      	strh	r1, [r0, #24]
 80022ee:	4770      	bx	lr

080022f0 <TIM_OC2PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 80022f0:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2PE);
 80022f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80022f6:	041b      	lsls	r3, r3, #16
 80022f8:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 80022fa:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80022fe:	8301      	strh	r1, [r0, #24]
 8002300:	4770      	bx	lr

08002302 <TIM_OC3PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8002302:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 8002304:	f023 0308 	bic.w	r3, r3, #8
 8002308:	041b      	lsls	r3, r3, #16
 800230a:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 800230c:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800230e:	8381      	strh	r1, [r0, #28]
 8002310:	4770      	bx	lr

08002312 <TIM_OC4PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8002312:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
 8002314:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002318:	041b      	lsls	r3, r3, #16
 800231a:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 800231c:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8002320:	8381      	strh	r1, [r0, #28]
 8002322:	4770      	bx	lr

08002324 <TIM_OC1FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8002324:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1FE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1FE;
 8002326:	f023 0304 	bic.w	r3, r3, #4
 800232a:	041b      	lsls	r3, r3, #16
 800232c:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
 800232e:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8002330:	8301      	strh	r1, [r0, #24]
 8002332:	4770      	bx	lr

08002334 <TIM_OC2FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8002334:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2FE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2FE);
 8002336:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800233a:	041b      	lsls	r3, r3, #16
 800233c:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
 800233e:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8002342:	8301      	strh	r1, [r0, #24]
 8002344:	4770      	bx	lr

08002346 <TIM_OC3FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 8002346:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC3FE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3FE;
 8002348:	f023 0304 	bic.w	r3, r3, #4
 800234c:	041b      	lsls	r3, r3, #16
 800234e:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
 8002350:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 8002352:	8381      	strh	r1, [r0, #28]
 8002354:	4770      	bx	lr

08002356 <TIM_OC4FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 8002356:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC4FE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4FE);
 8002358:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800235c:	041b      	lsls	r3, r3, #16
 800235e:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
 8002360:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 8002364:	8381      	strh	r1, [r0, #28]
 8002366:	4770      	bx	lr

08002368 <TIM_ClearOC1Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 8002368:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1CE;
 800236a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800236e:	041b      	lsls	r3, r3, #16
 8002370:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
 8002372:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8002374:	8301      	strh	r1, [r0, #24]
 8002376:	4770      	bx	lr

08002378 <TIM_ClearOC2Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 8002378:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2CE;

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
 800237a:	0209      	lsls	r1, r1, #8
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;

  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2CE;
 800237c:	045b      	lsls	r3, r3, #17

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
 800237e:	ea41 4353 	orr.w	r3, r1, r3, lsr #17

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8002382:	8303      	strh	r3, [r0, #24]
 8002384:	4770      	bx	lr

08002386 <TIM_ClearOC3Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 8002386:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC3CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3CE;
 8002388:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800238c:	041b      	lsls	r3, r3, #16
 800238e:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
 8002390:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8002392:	8381      	strh	r1, [r0, #28]
 8002394:	4770      	bx	lr

08002396 <TIM_ClearOC4Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 8002396:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4CE;

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
 8002398:	0209      	lsls	r1, r1, #8
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;

  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4CE;
 800239a:	045b      	lsls	r3, r3, #17

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
 800239c:	ea41 4353 	orr.w	r3, r1, r3, lsr #17

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80023a0:	8383      	strh	r3, [r0, #28]
 80023a2:	4770      	bx	lr

080023a4 <TIM_OC1PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 80023a4:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC1P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC1P);
 80023a6:	f023 0302 	bic.w	r3, r3, #2
 80023aa:	041b      	lsls	r3, r3, #16
 80023ac:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= TIM_OCPolarity;
 80023ae:	4319      	orrs	r1, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80023b0:	8401      	strh	r1, [r0, #32]
 80023b2:	4770      	bx	lr

080023b4 <TIM_OC1NPolarityConfig>:
  uint16_t tmpccer = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
 80023b4:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC1NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 80023b6:	f023 0308 	bic.w	r3, r3, #8
 80023ba:	041b      	lsls	r3, r3, #16
 80023bc:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= TIM_OCNPolarity;
 80023be:	4319      	orrs	r1, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80023c0:	8401      	strh	r1, [r0, #32]
 80023c2:	4770      	bx	lr

080023c4 <TIM_OC2PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 80023c4:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC2P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC2P);
 80023c6:	f023 0320 	bic.w	r3, r3, #32
 80023ca:	041b      	lsls	r3, r3, #16
 80023cc:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
 80023ce:	ea43 1101 	orr.w	r1, r3, r1, lsl #4

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80023d2:	8401      	strh	r1, [r0, #32]
 80023d4:	4770      	bx	lr

080023d6 <TIM_OC2NPolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
 80023d6:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC2NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 80023d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80023dc:	041b      	lsls	r3, r3, #16
 80023de:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
 80023e0:	ea43 1101 	orr.w	r1, r3, r1, lsl #4

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80023e4:	8401      	strh	r1, [r0, #32]
 80023e6:	4770      	bx	lr

080023e8 <TIM_OC3PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 80023e8:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC3P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 80023ea:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80023ee:	041b      	lsls	r3, r3, #16
 80023f0:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
 80023f2:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80023f6:	8401      	strh	r1, [r0, #32]
 80023f8:	4770      	bx	lr

080023fa <TIM_OC3NPolarityConfig>:
 
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
 80023fa:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC3NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 80023fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002400:	041b      	lsls	r3, r3, #16
 8002402:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
 8002404:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8002408:	8401      	strh	r1, [r0, #32]
 800240a:	4770      	bx	lr

0800240c <TIM_OC4PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 800240c:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC4P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 800240e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002412:	041b      	lsls	r3, r3, #16
 8002414:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
 8002416:	ea43 3101 	orr.w	r1, r3, r1, lsl #12

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800241a:	8401      	strh	r1, [r0, #32]
 800241c:	4770      	bx	lr

0800241e <TIM_CCxCmd>:
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
 800241e:	b510      	push	{r4, lr}
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 8002420:	8c04      	ldrh	r4, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;
 8002422:	2301      	movs	r3, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 8002424:	b2a4      	uxth	r4, r4
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;
 8002426:	fa03 f301 	lsl.w	r3, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 800242a:	ea24 0303 	bic.w	r3, r4, r3
 800242e:	8403      	strh	r3, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
 8002430:	8c03      	ldrh	r3, [r0, #32]
 8002432:	fa02 f201 	lsl.w	r2, r2, r1
 8002436:	4313      	orrs	r3, r2
 8002438:	8403      	strh	r3, [r0, #32]
 800243a:	bd10      	pop	{r4, pc}

0800243c <TIM_CCxNCmd>:
  * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
  * @retval None
  */
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
{
 800243c:	b510      	push	{r4, lr}
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_SET << TIM_Channel;

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 800243e:	8c04      	ldrh	r4, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_SET << TIM_Channel;
 8002440:	2304      	movs	r3, #4

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 8002442:	b2a4      	uxth	r4, r4
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_SET << TIM_Channel;
 8002444:	fa03 f301 	lsl.w	r3, r3, r1

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 8002448:	ea24 0303 	bic.w	r3, r4, r3
 800244c:	8403      	strh	r3, [r0, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
 800244e:	8c03      	ldrh	r3, [r0, #32]
 8002450:	fa02 f201 	lsl.w	r2, r2, r1
 8002454:	4313      	orrs	r3, r2
 8002456:	8403      	strh	r3, [r0, #32]
 8002458:	bd10      	pop	{r4, pc}

0800245a <TIM_ICStructInit>:
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 800245a:	2300      	movs	r3, #0
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 800245c:	2201      	movs	r2, #1
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 800245e:	8003      	strh	r3, [r0, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 8002460:	8043      	strh	r3, [r0, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 8002462:	8082      	strh	r2, [r0, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 8002464:	80c3      	strh	r3, [r0, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
 8002466:	8103      	strh	r3, [r0, #8]
 8002468:	4770      	bx	lr

0800246a <TIM_GetCapture1>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 800246a:	6b40      	ldr	r0, [r0, #52]	; 0x34
}
 800246c:	4770      	bx	lr

0800246e <TIM_GetCapture2>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 800246e:	6b80      	ldr	r0, [r0, #56]	; 0x38
}
 8002470:	4770      	bx	lr

08002472 <TIM_GetCapture3>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 

  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
 8002472:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
}
 8002474:	4770      	bx	lr

08002476 <TIM_GetCapture4>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
 8002476:	6c00      	ldr	r0, [r0, #64]	; 0x40
}
 8002478:	4770      	bx	lr

0800247a <TIM_SetIC1Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
 800247a:	8b03      	ldrh	r3, [r0, #24]
 800247c:	f023 030c 	bic.w	r3, r3, #12
 8002480:	041b      	lsls	r3, r3, #16
 8002482:	0c1b      	lsrs	r3, r3, #16
 8002484:	8303      	strh	r3, [r0, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8002486:	8b03      	ldrh	r3, [r0, #24]
 8002488:	b29b      	uxth	r3, r3
 800248a:	4319      	orrs	r1, r3
 800248c:	8301      	strh	r1, [r0, #24]
 800248e:	4770      	bx	lr

08002490 <TIM_SetIC2Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
 8002490:	8b03      	ldrh	r3, [r0, #24]
 8002492:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002496:	041b      	lsls	r3, r3, #16
 8002498:	0c1b      	lsrs	r3, r3, #16
 800249a:	8303      	strh	r3, [r0, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 800249c:	8b03      	ldrh	r3, [r0, #24]
 800249e:	b29b      	uxth	r3, r3
 80024a0:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 80024a4:	8301      	strh	r1, [r0, #24]
 80024a6:	4770      	bx	lr

080024a8 <TIM_PWMIConfig>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 80024a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024aa:	460c      	mov	r4, r1

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 80024ac:	8849      	ldrh	r1, [r1, #2]
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 80024ae:	88a2      	ldrh	r2, [r4, #4]
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 80024b0:	f8b4 e000 	ldrh.w	lr, [r4]
 80024b4:	8923      	ldrh	r3, [r4, #8]
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 80024b6:	4605      	mov	r5, r0
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
 80024b8:	2900      	cmp	r1, #0
 80024ba:	bf0c      	ite	eq
 80024bc:	2702      	moveq	r7, #2
 80024be:	2700      	movne	r7, #0
    icoppositepolarity = TIM_ICPolarity_Rising;
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
 80024c0:	2a01      	cmp	r2, #1
 80024c2:	bf14      	ite	ne
 80024c4:	2601      	movne	r6, #1
 80024c6:	2602      	moveq	r6, #2
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 80024c8:	f1be 0f00 	cmp.w	lr, #0
 80024cc:	d111      	bne.n	80024f2 <TIM_PWMIConfig+0x4a>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 80024ce:	f7ff fc3f 	bl	8001d50 <TI1_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80024d2:	4628      	mov	r0, r5
 80024d4:	88e1      	ldrh	r1, [r4, #6]
 80024d6:	f7ff ffd0 	bl	800247a <TIM_SetIC1Prescaler>
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 80024da:	4628      	mov	r0, r5
 80024dc:	4639      	mov	r1, r7
 80024de:	4632      	mov	r2, r6
 80024e0:	8923      	ldrh	r3, [r4, #8]
 80024e2:	f7ff fc4e 	bl	8001d82 <TI2_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80024e6:	88e1      	ldrh	r1, [r4, #6]
 80024e8:	4628      	mov	r0, r5
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 80024ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80024ee:	f7ff bfcf 	b.w	8002490 <TIM_SetIC2Prescaler>
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 80024f2:	f7ff fc46 	bl	8001d82 <TI2_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80024f6:	4628      	mov	r0, r5
 80024f8:	88e1      	ldrh	r1, [r4, #6]
 80024fa:	f7ff ffc9 	bl	8002490 <TIM_SetIC2Prescaler>
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 80024fe:	4628      	mov	r0, r5
 8002500:	4639      	mov	r1, r7
 8002502:	4632      	mov	r2, r6
 8002504:	8923      	ldrh	r3, [r4, #8]
 8002506:	f7ff fc23 	bl	8001d50 <TI1_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800250a:	88e1      	ldrh	r1, [r4, #6]
 800250c:	4628      	mov	r0, r5
  }
}
 800250e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002512:	f7ff bfb2 	b.w	800247a <TIM_SetIC1Prescaler>

08002516 <TIM_SetIC3Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC3PSC;
 8002516:	8b83      	ldrh	r3, [r0, #28]
 8002518:	f023 030c 	bic.w	r3, r3, #12
 800251c:	041b      	lsls	r3, r3, #16
 800251e:	0c1b      	lsrs	r3, r3, #16
 8002520:	8383      	strh	r3, [r0, #28]

  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 8002522:	8b83      	ldrh	r3, [r0, #28]
 8002524:	b29b      	uxth	r3, r3
 8002526:	4319      	orrs	r1, r3
 8002528:	8381      	strh	r1, [r0, #28]
 800252a:	4770      	bx	lr

0800252c <TIM_SetIC4Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC4PSC;
 800252c:	8b83      	ldrh	r3, [r0, #28]
 800252e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002532:	041b      	lsls	r3, r3, #16
 8002534:	0c1b      	lsrs	r3, r3, #16
 8002536:	8383      	strh	r3, [r0, #28]

  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 8002538:	8b83      	ldrh	r3, [r0, #28]
 800253a:	b29b      	uxth	r3, r3
 800253c:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8002540:	8381      	strh	r1, [r0, #28]
 8002542:	4770      	bx	lr

08002544 <TIM_ICInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8002544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002546:	460d      	mov	r5, r1
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8002548:	880b      	ldrh	r3, [r1, #0]
 800254a:	88aa      	ldrh	r2, [r5, #4]
 800254c:	8849      	ldrh	r1, [r1, #2]
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 800254e:	4604      	mov	r4, r0
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8002550:	b943      	cbnz	r3, 8002564 <TIM_ICInit+0x20>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8002552:	892b      	ldrh	r3, [r5, #8]
 8002554:	f7ff fbfc 	bl	8001d50 <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002558:	88e9      	ldrh	r1, [r5, #6]
 800255a:	4620      	mov	r0, r4
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 800255c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002560:	f7ff bf8b 	b.w	800247a <TIM_SetIC1Prescaler>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 8002564:	2b04      	cmp	r3, #4
 8002566:	d108      	bne.n	800257a <TIM_ICInit+0x36>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_LIST2_PERIPH(TIMx));
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8002568:	892b      	ldrh	r3, [r5, #8]
 800256a:	f7ff fc0a 	bl	8001d82 <TI2_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800256e:	88e9      	ldrh	r1, [r5, #6]
 8002570:	4620      	mov	r0, r4
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8002572:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    assert_param(IS_TIM_LIST2_PERIPH(TIMx));
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002576:	f7ff bf8b 	b.w	8002490 <TIM_SetIC2Prescaler>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 800257a:	2b08      	cmp	r3, #8
 800257c:	f8b5 c008 	ldrh.w	ip, [r5, #8]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8002580:	8c07      	ldrh	r7, [r0, #32]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 8002582:	d11e      	bne.n	80025c2 <TIM_ICInit+0x7e>
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8002584:	f427 7780 	bic.w	r7, r7, #256	; 0x100
 8002588:	043f      	lsls	r7, r7, #16
 800258a:	0c3f      	lsrs	r7, r7, #16
 800258c:	8407      	strh	r7, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 800258e:	8b86      	ldrh	r6, [r0, #28]
  tmpccer = TIMx->CCER;
 8002590:	8c03      	ldrh	r3, [r0, #32]
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
  tmpccmr2 = TIMx->CCMR2;
 8002592:	b2b6      	uxth	r6, r6
  tmpccer = TIMx->CCER;
 8002594:	b29b      	uxth	r3, r3
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
 8002596:	f026 06f3 	bic.w	r6, r6, #243	; 0xf3
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800259a:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 800259e:	ea46 1c0c 	orr.w	ip, r6, ip, lsl #4

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 80025a2:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 80025a6:	fa1f fc8c 	uxth.w	ip, ip

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 80025aa:	b289      	uxth	r1, r1
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 80025ac:	ea4c 0202 	orr.w	r2, ip, r2

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 80025b0:	f441 7180 	orr.w	r1, r1, #256	; 0x100

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80025b4:	8382      	strh	r2, [r0, #28]
  TIMx->CCER = tmpccer;
 80025b6:	8401      	strh	r1, [r0, #32]
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80025b8:	88e9      	ldrh	r1, [r5, #6]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 80025ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80025be:	f7ff bfaa 	b.w	8002516 <TIM_SetIC3Prescaler>
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 80025c2:	f427 5780 	bic.w	r7, r7, #4096	; 0x1000
 80025c6:	043f      	lsls	r7, r7, #16
 80025c8:	0c3f      	lsrs	r7, r7, #16
 80025ca:	8407      	strh	r7, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 80025cc:	8b86      	ldrh	r6, [r0, #28]
  tmpccer = TIMx->CCER;
 80025ce:	8c03      	ldrh	r3, [r0, #32]
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80025d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80025d4:	045b      	lsls	r3, r3, #17
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 80025d6:	f426 7640 	bic.w	r6, r6, #768	; 0x300
 80025da:	0536      	lsls	r6, r6, #20
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80025dc:	0c5b      	lsrs	r3, r3, #17
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 80025de:	0d36      	lsrs	r6, r6, #20
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 80025e0:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 80025e4:	ea46 2602 	orr.w	r6, r6, r2, lsl #8
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 80025e8:	b29b      	uxth	r3, r3
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80025ea:	88e9      	ldrh	r1, [r5, #6]
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 80025ec:	ea46 3c0c 	orr.w	ip, r6, ip, lsl #12

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 80025f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80025f4:	f8a0 c01c 	strh.w	ip, [r0, #28]
  TIMx->CCER = tmpccer ;
 80025f8:	8403      	strh	r3, [r0, #32]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 80025fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80025fe:	f7ff bf95 	b.w	800252c <TIM_SetIC4Prescaler>

08002602 <TIM_BDTRConfig>:
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8002602:	884a      	ldrh	r2, [r1, #2]
 8002604:	880b      	ldrh	r3, [r1, #0]
 8002606:	4313      	orrs	r3, r2
 8002608:	888a      	ldrh	r2, [r1, #4]
 800260a:	4313      	orrs	r3, r2
 800260c:	88ca      	ldrh	r2, [r1, #6]
 800260e:	4313      	orrs	r3, r2
 8002610:	890a      	ldrh	r2, [r1, #8]
 8002612:	4313      	orrs	r3, r2
 8002614:	894a      	ldrh	r2, [r1, #10]
 8002616:	4313      	orrs	r3, r2
 8002618:	898a      	ldrh	r2, [r1, #12]
 800261a:	4313      	orrs	r3, r2
 800261c:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 8002620:	4770      	bx	lr

08002622 <TIM_BDTRStructInit>:
  * @retval None
  */
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
 8002622:	2300      	movs	r3, #0
 8002624:	8003      	strh	r3, [r0, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
 8002626:	8043      	strh	r3, [r0, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 8002628:	8083      	strh	r3, [r0, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
 800262a:	80c3      	strh	r3, [r0, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
 800262c:	8103      	strh	r3, [r0, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
 800262e:	8143      	strh	r3, [r0, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 8002630:	8183      	strh	r3, [r0, #12]
 8002632:	4770      	bx	lr

08002634 <TIM_CtrlPWMOutputs>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8002634:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002638:	b121      	cbz	r1, 8002644 <TIM_CtrlPWMOutputs+0x10>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 800263a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800263e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002642:	e001      	b.n	8002648 <TIM_CtrlPWMOutputs+0x14>
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
 8002644:	045b      	lsls	r3, r3, #17
 8002646:	0c5b      	lsrs	r3, r3, #17
 8002648:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 800264c:	4770      	bx	lr

0800264e <TIM_SelectCOM>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 800264e:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002650:	b119      	cbz	r1, 800265a <TIM_SelectCOM+0xc>
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 8002652:	b29b      	uxth	r3, r3
 8002654:	f043 0304 	orr.w	r3, r3, #4
 8002658:	e003      	b.n	8002662 <TIM_SelectCOM+0x14>
  }
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCUS;
 800265a:	f023 0304 	bic.w	r3, r3, #4
 800265e:	041b      	lsls	r3, r3, #16
 8002660:	0c1b      	lsrs	r3, r3, #16
 8002662:	8083      	strh	r3, [r0, #4]
 8002664:	4770      	bx	lr

08002666 <TIM_CCPreloadControl>:
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 8002666:	8883      	ldrh	r3, [r0, #4]
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002668:	b119      	cbz	r1, 8002672 <TIM_CCPreloadControl+0xc>
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 800266a:	b29b      	uxth	r3, r3
 800266c:	f043 0301 	orr.w	r3, r3, #1
 8002670:	e003      	b.n	800267a <TIM_CCPreloadControl+0x14>
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCPC;
 8002672:	f023 0301 	bic.w	r3, r3, #1
 8002676:	041b      	lsls	r3, r3, #16
 8002678:	0c1b      	lsrs	r3, r3, #16
 800267a:	8083      	strh	r3, [r0, #4]
 800267c:	4770      	bx	lr

0800267e <TIM_ITConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 800267e:	8983      	ldrh	r3, [r0, #12]
 8002680:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002682:	b10a      	cbz	r2, 8002688 <TIM_ITConfig+0xa>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8002684:	4319      	orrs	r1, r3
 8002686:	e001      	b.n	800268c <TIM_ITConfig+0xe>
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8002688:	ea23 0101 	bic.w	r1, r3, r1
 800268c:	8181      	strh	r1, [r0, #12]
 800268e:	4770      	bx	lr

08002690 <TIM_GenerateEvent>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
 
  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
 8002690:	8281      	strh	r1, [r0, #20]
 8002692:	4770      	bx	lr

08002694 <TIM_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));

  
  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
 8002694:	8a03      	ldrh	r3, [r0, #16]
 8002696:	4219      	tst	r1, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8002698:	bf0c      	ite	eq
 800269a:	2000      	moveq	r0, #0
 800269c:	2001      	movne	r0, #1
 800269e:	4770      	bx	lr

080026a0 <TIM_ClearFlag>:
{  
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
 80026a0:	43c9      	mvns	r1, r1
 80026a2:	8201      	strh	r1, [r0, #16]
 80026a4:	4770      	bx	lr

080026a6 <TIM_GetITStatus>:
  uint16_t itstatus = 0x0, itenable = 0x0;
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 80026a6:	8a03      	ldrh	r3, [r0, #16]
  
  itenable = TIMx->DIER & TIM_IT;
 80026a8:	8982      	ldrh	r2, [r0, #12]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 80026aa:	ea11 0003 	ands.w	r0, r1, r3
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
  
  itenable = TIMx->DIER & TIM_IT;
 80026ae:	b292      	uxth	r2, r2
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 80026b0:	d003      	beq.n	80026ba <TIM_GetITStatus+0x14>
 80026b2:	4211      	tst	r1, r2
  {
    bitstatus = SET;
 80026b4:	bf0c      	ite	eq
 80026b6:	2000      	moveq	r0, #0
 80026b8:	2001      	movne	r0, #1
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 80026ba:	4770      	bx	lr

080026bc <TIM_ClearITPendingBit>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 80026bc:	43c9      	mvns	r1, r1
 80026be:	8201      	strh	r1, [r0, #16]
 80026c0:	4770      	bx	lr

080026c2 <TIM_DMAConfig>:
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase)); 
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));

  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
 80026c2:	430a      	orrs	r2, r1
 80026c4:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
 80026c8:	4770      	bx	lr

080026ca <TIM_DMACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 80026ca:	8983      	ldrh	r3, [r0, #12]
 80026cc:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx)); 
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80026ce:	b10a      	cbz	r2, 80026d4 <TIM_DMACmd+0xa>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 80026d0:	4319      	orrs	r1, r3
 80026d2:	e001      	b.n	80026d8 <TIM_DMACmd+0xe>
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 80026d4:	ea23 0101 	bic.w	r1, r3, r1
 80026d8:	8181      	strh	r1, [r0, #12]
 80026da:	4770      	bx	lr

080026dc <TIM_SelectCCDMA>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 80026dc:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80026de:	b119      	cbz	r1, 80026e8 <TIM_SelectCCDMA+0xc>
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	f043 0308 	orr.w	r3, r3, #8
 80026e6:	e003      	b.n	80026f0 <TIM_SelectCCDMA+0x14>
  }
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCDS;
 80026e8:	f023 0308 	bic.w	r3, r3, #8
 80026ec:	041b      	lsls	r3, r3, #16
 80026ee:	0c1b      	lsrs	r3, r3, #16
 80026f0:	8083      	strh	r3, [r0, #4]
 80026f2:	4770      	bx	lr

080026f4 <TIM_InternalClockConfig>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  (uint16_t)~TIM_SMCR_SMS;
 80026f4:	8903      	ldrh	r3, [r0, #8]
 80026f6:	f023 0307 	bic.w	r3, r3, #7
 80026fa:	041b      	lsls	r3, r3, #16
 80026fc:	0c1b      	lsrs	r3, r3, #16
 80026fe:	8103      	strh	r3, [r0, #8]
 8002700:	4770      	bx	lr

08002702 <TIM_ITRxExternalClockConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002702:	8903      	ldrh	r3, [r0, #8]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 8002704:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002708:	041b      	lsls	r3, r3, #16
 800270a:	0c1b      	lsrs	r3, r3, #16

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 800270c:	4319      	orrs	r1, r3

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800270e:	8101      	strh	r1, [r0, #8]

  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);

  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 8002710:	8903      	ldrh	r3, [r0, #8]
 8002712:	b29b      	uxth	r3, r3
 8002714:	f043 0307 	orr.w	r3, r3, #7
 8002718:	8103      	strh	r3, [r0, #8]
 800271a:	4770      	bx	lr

0800271c <TIM_TIxExternalClockConfig>:
  *          This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
 800271c:	b538      	push	{r3, r4, r5, lr}
 800271e:	460d      	mov	r5, r1
 8002720:	4611      	mov	r1, r2
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 8002722:	2201      	movs	r2, #1
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 8002724:	2d60      	cmp	r5, #96	; 0x60
  *          This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
 8002726:	4604      	mov	r4, r0
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 8002728:	d102      	bne.n	8002730 <TIM_TIxExternalClockConfig+0x14>
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 800272a:	f7ff fb2a 	bl	8001d82 <TI2_Config>
 800272e:	e001      	b.n	8002734 <TIM_TIxExternalClockConfig+0x18>
  }
  else
  {
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 8002730:	f7ff fb0e 	bl	8001d50 <TI1_Config>
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002734:	8923      	ldrh	r3, [r4, #8]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 8002736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800273a:	041b      	lsls	r3, r3, #16
 800273c:	0c1b      	lsrs	r3, r3, #16

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 800273e:	432b      	orrs	r3, r5

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002740:	8123      	strh	r3, [r4, #8]
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
  }
  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 8002742:	8923      	ldrh	r3, [r4, #8]
 8002744:	b29b      	uxth	r3, r3
 8002746:	f043 0307 	orr.w	r3, r3, #7
 800274a:	8123      	strh	r3, [r4, #8]
 800274c:	bd38      	pop	{r3, r4, r5, pc}

0800274e <TIM_SelectInputTrigger>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800274e:	8903      	ldrh	r3, [r0, #8]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 8002750:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002754:	041b      	lsls	r3, r3, #16
 8002756:	0c1b      	lsrs	r3, r3, #16

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 8002758:	4319      	orrs	r1, r3

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800275a:	8101      	strh	r1, [r0, #8]
 800275c:	4770      	bx	lr

0800275e <TIM_SelectOutputTrigger>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
 800275e:	8883      	ldrh	r3, [r0, #4]
 8002760:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002764:	041b      	lsls	r3, r3, #16
 8002766:	0c1b      	lsrs	r3, r3, #16
 8002768:	8083      	strh	r3, [r0, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 800276a:	8883      	ldrh	r3, [r0, #4]
 800276c:	b29b      	uxth	r3, r3
 800276e:	4319      	orrs	r1, r3
 8002770:	8081      	strh	r1, [r0, #4]
 8002772:	4770      	bx	lr

08002774 <TIM_SelectSlaveMode>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));

  /* Reset the SMS Bits */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_SMS;
 8002774:	8903      	ldrh	r3, [r0, #8]
 8002776:	f023 0307 	bic.w	r3, r3, #7
 800277a:	041b      	lsls	r3, r3, #16
 800277c:	0c1b      	lsrs	r3, r3, #16
 800277e:	8103      	strh	r3, [r0, #8]

  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
 8002780:	8903      	ldrh	r3, [r0, #8]
 8002782:	b29b      	uxth	r3, r3
 8002784:	4319      	orrs	r1, r3
 8002786:	8101      	strh	r1, [r0, #8]
 8002788:	4770      	bx	lr

0800278a <TIM_SelectMasterSlaveMode>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));

  /* Reset the MSM Bit */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_MSM;
 800278a:	8903      	ldrh	r3, [r0, #8]
 800278c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002790:	041b      	lsls	r3, r3, #16
 8002792:	0c1b      	lsrs	r3, r3, #16
 8002794:	8103      	strh	r3, [r0, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
 8002796:	8903      	ldrh	r3, [r0, #8]
 8002798:	b29b      	uxth	r3, r3
 800279a:	4319      	orrs	r1, r3
 800279c:	8101      	strh	r1, [r0, #8]
 800279e:	4770      	bx	lr

080027a0 <TIM_ETRConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                   uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 80027a0:	b510      	push	{r4, lr}
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
 80027a2:	8904      	ldrh	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
 80027a4:	b2e4      	uxtb	r4, r4

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 80027a6:	4321      	orrs	r1, r4
 80027a8:	430a      	orrs	r2, r1
 80027aa:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 80027ae:	461c      	mov	r4, r3

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027b0:	8103      	strh	r3, [r0, #8]
 80027b2:	bd10      	pop	{r4, pc}

080027b4 <TIM_ETRClockMode2Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 80027b4:	b510      	push	{r4, lr}
 80027b6:	4604      	mov	r4, r0
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 80027b8:	f7ff fff2 	bl	80027a0 <TIM_ETRConfig>

  /* Enable the External clock mode2 */
  TIMx->SMCR |= TIM_SMCR_ECE;
 80027bc:	8923      	ldrh	r3, [r4, #8]
 80027be:	b29b      	uxth	r3, r3
 80027c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027c4:	8123      	strh	r3, [r4, #8]
 80027c6:	bd10      	pop	{r4, pc}

080027c8 <TIM_ETRClockMode1Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                            uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 80027c8:	b510      	push	{r4, lr}
 80027ca:	4604      	mov	r4, r0
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 80027cc:	f7ff ffe8 	bl	80027a0 <TIM_ETRConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80027d0:	8923      	ldrh	r3, [r4, #8]

  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;

  /* Select the Trigger selection : ETRF */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 80027d2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80027d6:	041b      	lsls	r3, r3, #16
 80027d8:	0c1b      	lsrs	r3, r3, #16
  tmpsmcr |= TIM_TS_ETRF;
 80027da:	f043 0377 	orr.w	r3, r3, #119	; 0x77

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027de:	8123      	strh	r3, [r4, #8]
 80027e0:	bd10      	pop	{r4, pc}

080027e2 <TIM_EncoderInterfaceConfig>:
  *            @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
 80027e2:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80027e4:	8905      	ldrh	r5, [r0, #8]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 80027e6:	8b04      	ldrh	r4, [r0, #24]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027e8:	8c06      	ldrh	r6, [r0, #32]
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 80027ea:	f424 7440 	bic.w	r4, r4, #768	; 0x300
 80027ee:	f024 0403 	bic.w	r4, r4, #3

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027f2:	b2b6      	uxth	r6, r6

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 80027f4:	f025 0507 	bic.w	r5, r5, #7
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 80027f8:	0424      	lsls	r4, r4, #16
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
 80027fa:	f026 0622 	bic.w	r6, r6, #34	; 0x22

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 80027fe:	042d      	lsls	r5, r5, #16
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 8002800:	0c24      	lsrs	r4, r4, #16
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 8002802:	4332      	orrs	r2, r6

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 8002804:	0c2d      	lsrs	r5, r5, #16
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 8002806:	f444 7480 	orr.w	r4, r4, #256	; 0x100

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 800280a:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
  tmpsmcr |= TIM_EncoderMode;
 800280e:	4329      	orrs	r1, r5

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 8002810:	f044 0401 	orr.w	r4, r4, #1
  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002814:	8101      	strh	r1, [r0, #8]
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 8002816:	461e      	mov	r6, r3

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8002818:	8304      	strh	r4, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800281a:	8403      	strh	r3, [r0, #32]
 800281c:	bd70      	pop	{r4, r5, r6, pc}

0800281e <TIM_SelectHallSensor>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 800281e:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002820:	b119      	cbz	r1, 800282a <TIM_SelectHallSensor+0xc>
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 8002822:	b29b      	uxth	r3, r3
 8002824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002828:	e003      	b.n	8002832 <TIM_SelectHallSensor+0x14>
  }
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_TI1S;
 800282a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800282e:	041b      	lsls	r3, r3, #16
 8002830:	0c1b      	lsrs	r3, r3, #16
 8002832:	8083      	strh	r3, [r0, #4]
 8002834:	4770      	bx	lr

08002836 <TIM_RemapConfig>:
 /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_REMAP(TIM_Remap));

  /* Set the Timer remapping configuration */
  TIMx->OR =  TIM_Remap;
 8002836:	f8a0 1050 	strh.w	r1, [r0, #80]	; 0x50
 800283a:	4770      	bx	lr

0800283c <USART_DeInit>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 800283c:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 800283e:	4b23      	ldr	r3, [pc, #140]	; (80028cc <USART_DeInit+0x90>)
 8002840:	4298      	cmp	r0, r3
 8002842:	d105      	bne.n	8002850 <USART_DeInit+0x14>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 8002844:	2010      	movs	r0, #16
 8002846:	2101      	movs	r1, #1
 8002848:	f7ff f848 	bl	80018dc <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 800284c:	2010      	movs	r0, #16
 800284e:	e037      	b.n	80028c0 <USART_DeInit+0x84>
  }
  else if (USARTx == USART2)
 8002850:	4b1f      	ldr	r3, [pc, #124]	; (80028d0 <USART_DeInit+0x94>)
 8002852:	4298      	cmp	r0, r3
 8002854:	d107      	bne.n	8002866 <USART_DeInit+0x2a>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 8002856:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800285a:	2101      	movs	r1, #1
 800285c:	f7ff f832 	bl	80018c4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 8002860:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002864:	e009      	b.n	800287a <USART_DeInit+0x3e>
  }
  else if (USARTx == USART3)
 8002866:	4b1b      	ldr	r3, [pc, #108]	; (80028d4 <USART_DeInit+0x98>)
 8002868:	4298      	cmp	r0, r3
 800286a:	d10b      	bne.n	8002884 <USART_DeInit+0x48>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 800286c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002870:	2101      	movs	r1, #1
 8002872:	f7ff f827 	bl	80018c4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 8002876:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800287a:	2100      	movs	r1, #0
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
    }
  }
}
 800287c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
  }
  else if (USARTx == USART3)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 8002880:	f7ff b820 	b.w	80018c4 <RCC_APB1PeriphResetCmd>
  }    
  else if (USARTx == UART4)
 8002884:	4b14      	ldr	r3, [pc, #80]	; (80028d8 <USART_DeInit+0x9c>)
 8002886:	4298      	cmp	r0, r3
 8002888:	d107      	bne.n	800289a <USART_DeInit+0x5e>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 800288a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800288e:	2101      	movs	r1, #1
 8002890:	f7ff f818 	bl	80018c4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 8002894:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002898:	e7ef      	b.n	800287a <USART_DeInit+0x3e>
  }
  else if (USARTx == UART5)
 800289a:	4b10      	ldr	r3, [pc, #64]	; (80028dc <USART_DeInit+0xa0>)
 800289c:	4298      	cmp	r0, r3
 800289e:	d107      	bne.n	80028b0 <USART_DeInit+0x74>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 80028a0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80028a4:	2101      	movs	r1, #1
 80028a6:	f7ff f80d 	bl	80018c4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 80028aa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80028ae:	e7e4      	b.n	800287a <USART_DeInit+0x3e>
  }     
  else
  {
    if (USARTx == USART6)
 80028b0:	4b0b      	ldr	r3, [pc, #44]	; (80028e0 <USART_DeInit+0xa4>)
 80028b2:	4298      	cmp	r0, r3
 80028b4:	d109      	bne.n	80028ca <USART_DeInit+0x8e>
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
 80028b6:	2020      	movs	r0, #32
 80028b8:	2101      	movs	r1, #1
 80028ba:	f7ff f80f 	bl	80018dc <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 80028be:	2020      	movs	r0, #32
 80028c0:	2100      	movs	r1, #0
    }
  }
}
 80028c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (USARTx == USART6)
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 80028c6:	f7ff b809 	b.w	80018dc <RCC_APB2PeriphResetCmd>
 80028ca:	bd08      	pop	{r3, pc}
 80028cc:	40011000 	.word	0x40011000
 80028d0:	40004400 	.word	0x40004400
 80028d4:	40004800 	.word	0x40004800
 80028d8:	40004c00 	.word	0x40004c00
 80028dc:	40005000 	.word	0x40005000
 80028e0:	40011400 	.word	0x40011400

080028e4 <USART_Init>:
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80028e4:	8a03      	ldrh	r3, [r0, #16]
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80028e6:	88ca      	ldrh	r2, [r1, #6]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80028e8:	b29b      	uxth	r3, r3

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80028ea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80028ee:	b530      	push	{r4, r5, lr}
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80028f0:	4313      	orrs	r3, r2
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80028f2:	460d      	mov	r5, r1
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80028f4:	8203      	strh	r3, [r0, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80028f6:	8983      	ldrh	r3, [r0, #12]

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80028f8:	8909      	ldrh	r1, [r1, #8]
 80028fa:	88aa      	ldrh	r2, [r5, #4]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 80028fc:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8002900:	430a      	orrs	r2, r1
 8002902:	8969      	ldrh	r1, [r5, #10]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8002904:	f023 030c 	bic.w	r3, r3, #12
 8002908:	041b      	lsls	r3, r3, #16

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800290a:	430a      	orrs	r2, r1

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 800290c:	0c1b      	lsrs	r3, r3, #16

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800290e:	b292      	uxth	r2, r2
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8002910:	4313      	orrs	r3, r2
 8002912:	8183      	strh	r3, [r0, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8002914:	8a83      	ldrh	r3, [r0, #20]
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8002916:	89aa      	ldrh	r2, [r5, #12]

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8002918:	b29b      	uxth	r3, r3

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 800291a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 800291e:	4313      	orrs	r3, r2
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8002920:	b085      	sub	sp, #20
  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8002922:	8283      	strh	r3, [r0, #20]
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8002924:	4604      	mov	r4, r0
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8002926:	4668      	mov	r0, sp
 8002928:	f7fe fefc 	bl	8001724 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 800292c:	4b19      	ldr	r3, [pc, #100]	; (8002994 <USART_Init+0xb0>)
 800292e:	429c      	cmp	r4, r3
 8002930:	d003      	beq.n	800293a <USART_Init+0x56>
 8002932:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002936:	429c      	cmp	r4, r3
 8002938:	d101      	bne.n	800293e <USART_Init+0x5a>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 800293a:	9b03      	ldr	r3, [sp, #12]
 800293c:	e000      	b.n	8002940 <USART_Init+0x5c>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 800293e:	9b02      	ldr	r3, [sp, #8]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8002940:	89a2      	ldrh	r2, [r4, #12]
 8002942:	b212      	sxth	r2, r2
 8002944:	2a00      	cmp	r2, #0
 8002946:	f04f 0119 	mov.w	r1, #25
 800294a:	682a      	ldr	r2, [r5, #0]
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 800294c:	fb01 f103 	mul.w	r1, r1, r3
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8002950:	da01      	bge.n	8002956 <USART_Init+0x72>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8002952:	0052      	lsls	r2, r2, #1
 8002954:	e000      	b.n	8002958 <USART_Init+0x74>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8002956:	0092      	lsls	r2, r2, #2
  }
  tmpreg = (integerdivider / 100) << 4;
 8002958:	2364      	movs	r3, #100	; 0x64
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 800295a:	fbb1 f1f2 	udiv	r1, r1, r2
  }
  tmpreg = (integerdivider / 100) << 4;
 800295e:	fbb1 f2f3 	udiv	r2, r1, r3
 8002962:	0112      	lsls	r2, r2, #4

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8002964:	0910      	lsrs	r0, r2, #4
 8002966:	fb03 1110 	mls	r1, r3, r0, r1

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800296a:	89a0      	ldrh	r0, [r4, #12]
 800296c:	b200      	sxth	r0, r0
 800296e:	2800      	cmp	r0, #0
 8002970:	da06      	bge.n	8002980 <USART_Init+0x9c>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8002972:	00c9      	lsls	r1, r1, #3
 8002974:	3132      	adds	r1, #50	; 0x32
 8002976:	fbb1 f3f3 	udiv	r3, r1, r3
 800297a:	f003 0307 	and.w	r3, r3, #7
 800297e:	e005      	b.n	800298c <USART_Init+0xa8>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8002980:	0109      	lsls	r1, r1, #4
 8002982:	3132      	adds	r1, #50	; 0x32
 8002984:	fbb1 f3f3 	udiv	r3, r1, r3
 8002988:	f003 030f 	and.w	r3, r3, #15
 800298c:	431a      	orrs	r2, r3
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 800298e:	8122      	strh	r2, [r4, #8]
}
 8002990:	b005      	add	sp, #20
 8002992:	bd30      	pop	{r4, r5, pc}
 8002994:	40011000 	.word	0x40011000

08002998 <USART_StructInit>:
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 8002998:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800299c:	6003      	str	r3, [r0, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
  USART_InitStruct->USART_Parity = USART_Parity_No ;
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800299e:	220c      	movs	r2, #12
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 80029a0:	2300      	movs	r3, #0
 80029a2:	8083      	strh	r3, [r0, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 80029a4:	80c3      	strh	r3, [r0, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 80029a6:	8103      	strh	r3, [r0, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 80029a8:	8142      	strh	r2, [r0, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 80029aa:	8183      	strh	r3, [r0, #12]
 80029ac:	4770      	bx	lr

080029ae <USART_ClockInit>:
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 80029ae:	880b      	ldrh	r3, [r1, #0]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80029b0:	8a02      	ldrh	r2, [r0, #16]
  *         contains the configuration information for the specified  USART peripheral.
  * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 80029b2:	b510      	push	{r4, lr}
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 80029b4:	884c      	ldrh	r4, [r1, #2]
 80029b6:	4323      	orrs	r3, r4
 80029b8:	888c      	ldrh	r4, [r1, #4]
 80029ba:	88c9      	ldrh	r1, [r1, #6]
 80029bc:	4323      	orrs	r3, r4
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80029be:	b292      	uxth	r2, r2
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 80029c0:	430b      	orrs	r3, r1
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 80029c2:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 80029c6:	b29b      	uxth	r3, r3
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80029c8:	4313      	orrs	r3, r2
 80029ca:	8203      	strh	r3, [r0, #16]
 80029cc:	bd10      	pop	{r4, pc}

080029ce <USART_ClockStructInit>:
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 80029ce:	2300      	movs	r3, #0
 80029d0:	8003      	strh	r3, [r0, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 80029d2:	8043      	strh	r3, [r0, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 80029d4:	8083      	strh	r3, [r0, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 80029d6:	80c3      	strh	r3, [r0, #6]
 80029d8:	4770      	bx	lr

080029da <USART_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 80029da:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80029dc:	b119      	cbz	r1, 80029e6 <USART_Cmd+0xc>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 80029de:	b29b      	uxth	r3, r3
 80029e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80029e4:	e003      	b.n	80029ee <USART_Cmd+0x14>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 80029e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80029ea:	041b      	lsls	r3, r3, #16
 80029ec:	0c1b      	lsrs	r3, r3, #16
 80029ee:	8183      	strh	r3, [r0, #12]
 80029f0:	4770      	bx	lr

080029f2 <USART_SetPrescaler>:
{ 
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= USART_GTPR_GT;
 80029f2:	8b03      	ldrh	r3, [r0, #24]
 80029f4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80029f8:	8303      	strh	r3, [r0, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 80029fa:	8b03      	ldrh	r3, [r0, #24]
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	4319      	orrs	r1, r3
 8002a00:	8301      	strh	r1, [r0, #24]
 8002a02:	4770      	bx	lr

08002a04 <USART_OverSampling8Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 8002a04:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002a06:	b121      	cbz	r1, 8002a12 <USART_OverSampling8Cmd+0xe>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 8002a08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a10:	e001      	b.n	8002a16 <USART_OverSampling8Cmd+0x12>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
 8002a12:	045b      	lsls	r3, r3, #17
 8002a14:	0c5b      	lsrs	r3, r3, #17
 8002a16:	8183      	strh	r3, [r0, #12]
 8002a18:	4770      	bx	lr

08002a1a <USART_OneBitMethodCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 8002a1a:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002a1c:	b119      	cbz	r1, 8002a26 <USART_OneBitMethodCmd+0xc>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a24:	e003      	b.n	8002a2e <USART_OneBitMethodCmd+0x14>
  }
  else
  {
    /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
 8002a26:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a2a:	041b      	lsls	r3, r3, #16
 8002a2c:	0c1b      	lsrs	r3, r3, #16
 8002a2e:	8283      	strh	r3, [r0, #20]
 8002a30:	4770      	bx	lr

08002a32 <USART_SendData>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8002a32:	05c9      	lsls	r1, r1, #23
 8002a34:	0dc9      	lsrs	r1, r1, #23
 8002a36:	8081      	strh	r1, [r0, #4]
 8002a38:	4770      	bx	lr

08002a3a <USART_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8002a3a:	8880      	ldrh	r0, [r0, #4]
 8002a3c:	05c0      	lsls	r0, r0, #23
}
 8002a3e:	0dc0      	lsrs	r0, r0, #23
 8002a40:	4770      	bx	lr

08002a42 <USART_SetAddress>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
 8002a42:	8a03      	ldrh	r3, [r0, #16]
 8002a44:	f023 030f 	bic.w	r3, r3, #15
 8002a48:	041b      	lsls	r3, r3, #16
 8002a4a:	0c1b      	lsrs	r3, r3, #16
 8002a4c:	8203      	strh	r3, [r0, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
 8002a4e:	8a03      	ldrh	r3, [r0, #16]
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	4319      	orrs	r1, r3
 8002a54:	8201      	strh	r1, [r0, #16]
 8002a56:	4770      	bx	lr

08002a58 <USART_ReceiverWakeUpCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 8002a58:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
 8002a5a:	b119      	cbz	r1, 8002a64 <USART_ReceiverWakeUpCmd+0xc>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	f043 0302 	orr.w	r3, r3, #2
 8002a62:	e003      	b.n	8002a6c <USART_ReceiverWakeUpCmd+0x14>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
 8002a64:	f023 0302 	bic.w	r3, r3, #2
 8002a68:	041b      	lsls	r3, r3, #16
 8002a6a:	0c1b      	lsrs	r3, r3, #16
 8002a6c:	8183      	strh	r3, [r0, #12]
 8002a6e:	4770      	bx	lr

08002a70 <USART_WakeUpConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
 8002a70:	8983      	ldrh	r3, [r0, #12]
 8002a72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a76:	041b      	lsls	r3, r3, #16
 8002a78:	0c1b      	lsrs	r3, r3, #16
 8002a7a:	8183      	strh	r3, [r0, #12]
  USARTx->CR1 |= USART_WakeUp;
 8002a7c:	8983      	ldrh	r3, [r0, #12]
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	4319      	orrs	r1, r3
 8002a82:	8181      	strh	r1, [r0, #12]
 8002a84:	4770      	bx	lr

08002a86 <USART_LINBreakDetectLengthConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
 8002a86:	8a03      	ldrh	r3, [r0, #16]
 8002a88:	f023 0320 	bic.w	r3, r3, #32
 8002a8c:	041b      	lsls	r3, r3, #16
 8002a8e:	0c1b      	lsrs	r3, r3, #16
 8002a90:	8203      	strh	r3, [r0, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 8002a92:	8a03      	ldrh	r3, [r0, #16]
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	4319      	orrs	r1, r3
 8002a98:	8201      	strh	r1, [r0, #16]
 8002a9a:	4770      	bx	lr

08002a9c <USART_LINCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 8002a9c:	8a03      	ldrh	r3, [r0, #16]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002a9e:	b119      	cbz	r1, 8002aa8 <USART_LINCmd+0xc>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002aa6:	e003      	b.n	8002ab0 <USART_LINCmd+0x14>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
 8002aa8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002aac:	041b      	lsls	r3, r3, #16
 8002aae:	0c1b      	lsrs	r3, r3, #16
 8002ab0:	8203      	strh	r3, [r0, #16]
 8002ab2:	4770      	bx	lr

08002ab4 <USART_SendBreak>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= USART_CR1_SBK;
 8002ab4:	8983      	ldrh	r3, [r0, #12]
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	f043 0301 	orr.w	r3, r3, #1
 8002abc:	8183      	strh	r3, [r0, #12]
 8002abe:	4770      	bx	lr

08002ac0 <USART_HalfDuplexCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 8002ac0:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002ac2:	b119      	cbz	r1, 8002acc <USART_HalfDuplexCmd+0xc>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	f043 0308 	orr.w	r3, r3, #8
 8002aca:	e003      	b.n	8002ad4 <USART_HalfDuplexCmd+0x14>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
 8002acc:	f023 0308 	bic.w	r3, r3, #8
 8002ad0:	041b      	lsls	r3, r3, #16
 8002ad2:	0c1b      	lsrs	r3, r3, #16
 8002ad4:	8283      	strh	r3, [r0, #20]
 8002ad6:	4770      	bx	lr

08002ad8 <USART_SetGuardTime>:
{    
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= USART_GTPR_PSC;
 8002ad8:	8b03      	ldrh	r3, [r0, #24]
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	8303      	strh	r3, [r0, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 8002ade:	8b03      	ldrh	r3, [r0, #24]
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8002ae6:	8301      	strh	r1, [r0, #24]
 8002ae8:	4770      	bx	lr

08002aea <USART_SmartCardCmd>:
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 8002aea:	8a83      	ldrh	r3, [r0, #20]
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002aec:	b119      	cbz	r1, 8002af6 <USART_SmartCardCmd+0xc>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	f043 0320 	orr.w	r3, r3, #32
 8002af4:	e003      	b.n	8002afe <USART_SmartCardCmd+0x14>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
 8002af6:	f023 0320 	bic.w	r3, r3, #32
 8002afa:	041b      	lsls	r3, r3, #16
 8002afc:	0c1b      	lsrs	r3, r3, #16
 8002afe:	8283      	strh	r3, [r0, #20]
 8002b00:	4770      	bx	lr

08002b02 <USART_SmartCardNACKCmd>:
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 8002b02:	8a83      	ldrh	r3, [r0, #20]
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002b04:	b119      	cbz	r1, 8002b0e <USART_SmartCardNACKCmd+0xc>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	f043 0310 	orr.w	r3, r3, #16
 8002b0c:	e003      	b.n	8002b16 <USART_SmartCardNACKCmd+0x14>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
 8002b0e:	f023 0310 	bic.w	r3, r3, #16
 8002b12:	041b      	lsls	r3, r3, #16
 8002b14:	0c1b      	lsrs	r3, r3, #16
 8002b16:	8283      	strh	r3, [r0, #20]
 8002b18:	4770      	bx	lr

08002b1a <USART_IrDAConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
 8002b1a:	8a83      	ldrh	r3, [r0, #20]
 8002b1c:	f023 0304 	bic.w	r3, r3, #4
 8002b20:	041b      	lsls	r3, r3, #16
 8002b22:	0c1b      	lsrs	r3, r3, #16
 8002b24:	8283      	strh	r3, [r0, #20]
  USARTx->CR3 |= USART_IrDAMode;
 8002b26:	8a83      	ldrh	r3, [r0, #20]
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	4319      	orrs	r1, r3
 8002b2c:	8281      	strh	r1, [r0, #20]
 8002b2e:	4770      	bx	lr

08002b30 <USART_IrDACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 8002b30:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 8002b32:	b119      	cbz	r1, 8002b3c <USART_IrDACmd+0xc>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	f043 0302 	orr.w	r3, r3, #2
 8002b3a:	e003      	b.n	8002b44 <USART_IrDACmd+0x14>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
 8002b3c:	f023 0302 	bic.w	r3, r3, #2
 8002b40:	041b      	lsls	r3, r3, #16
 8002b42:	0c1b      	lsrs	r3, r3, #16
 8002b44:	8283      	strh	r3, [r0, #20]
 8002b46:	4770      	bx	lr

08002b48 <USART_DMACmd>:

  if (NewState != DISABLE)
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8002b48:	8a83      	ldrh	r3, [r0, #20]
 8002b4a:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 8002b4c:	b10a      	cbz	r2, 8002b52 <USART_DMACmd+0xa>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8002b4e:	4319      	orrs	r1, r3
 8002b50:	e001      	b.n	8002b56 <USART_DMACmd+0xe>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 8002b52:	ea23 0101 	bic.w	r1, r3, r1
 8002b56:	8281      	strh	r1, [r0, #20]
 8002b58:	4770      	bx	lr

08002b5a <USART_ITConfig>:
  } 
    
  usartxbase = (uint32_t)USARTx;

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8002b5a:	f3c1 1342 	ubfx	r3, r1, #5, #3
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8002b5e:	b510      	push	{r4, lr}
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
 8002b60:	2401      	movs	r4, #1
 8002b62:	f001 011f 	and.w	r1, r1, #31
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8002b66:	42a3      	cmp	r3, r4
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
 8002b68:	fa04 f101 	lsl.w	r1, r4, r1
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8002b6c:	d101      	bne.n	8002b72 <USART_ITConfig+0x18>
  {
    usartxbase += 0x0C;
 8002b6e:	300c      	adds	r0, #12
 8002b70:	e004      	b.n	8002b7c <USART_ITConfig+0x22>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d101      	bne.n	8002b7a <USART_ITConfig+0x20>
  {
    usartxbase += 0x10;
 8002b76:	3010      	adds	r0, #16
 8002b78:	e000      	b.n	8002b7c <USART_ITConfig+0x22>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8002b7a:	3014      	adds	r0, #20
  }
  if (NewState != DISABLE)
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8002b7c:	6803      	ldr	r3, [r0, #0]
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
  }
  if (NewState != DISABLE)
 8002b7e:	b10a      	cbz	r2, 8002b84 <USART_ITConfig+0x2a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8002b80:	4319      	orrs	r1, r3
 8002b82:	e001      	b.n	8002b88 <USART_ITConfig+0x2e>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8002b84:	ea23 0101 	bic.w	r1, r3, r1
 8002b88:	6001      	str	r1, [r0, #0]
 8002b8a:	bd10      	pop	{r4, pc}

08002b8c <USART_GetFlagStatus>:
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8002b8c:	8803      	ldrh	r3, [r0, #0]
 8002b8e:	4219      	tst	r1, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8002b90:	bf0c      	ite	eq
 8002b92:	2000      	moveq	r0, #0
 8002b94:	2001      	movne	r0, #1
 8002b96:	4770      	bx	lr

08002b98 <USART_ClearFlag>:
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
       
  USARTx->SR = (uint16_t)~USART_FLAG;
 8002b98:	43c9      	mvns	r1, r1
 8002b9a:	8001      	strh	r1, [r0, #0]
 8002b9c:	4770      	bx	lr

08002b9e <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8002b9e:	b510      	push	{r4, lr}
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8002ba0:	f3c1 1442 	ubfx	r4, r1, #5, #3
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	f001 031f 	and.w	r3, r1, #31
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8002baa:	2c01      	cmp	r4, #1
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
 8002bac:	fa02 f203 	lsl.w	r2, r2, r3
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8002bb0:	d101      	bne.n	8002bb6 <USART_GetITStatus+0x18>
  {
    itmask &= USARTx->CR1;
 8002bb2:	8983      	ldrh	r3, [r0, #12]
 8002bb4:	e003      	b.n	8002bbe <USART_GetITStatus+0x20>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8002bb6:	2c02      	cmp	r4, #2
  {
    itmask &= USARTx->CR2;
 8002bb8:	bf0c      	ite	eq
 8002bba:	8a03      	ldrheq	r3, [r0, #16]
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8002bbc:	8a83      	ldrhne	r3, [r0, #20]
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	4013      	ands	r3, r2
  }
  
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
  bitpos &= USARTx->SR;
 8002bc2:	8802      	ldrh	r2, [r0, #0]
 8002bc4:	b292      	uxth	r2, r2
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8002bc6:	b143      	cbz	r3, 8002bda <USART_GetITStatus+0x3c>
  {
    itmask &= USARTx->CR3;
  }
  
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	0a09      	lsrs	r1, r1, #8
 8002bcc:	fa03 f101 	lsl.w	r1, r3, r1
  bitpos &= USARTx->SR;
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8002bd0:	4211      	tst	r1, r2
  {
    bitstatus = SET;
 8002bd2:	bf0c      	ite	eq
 8002bd4:	2000      	moveq	r0, #0
 8002bd6:	2001      	movne	r0, #1
 8002bd8:	bd10      	pop	{r4, pc}
  }
  else
  {
    bitstatus = RESET;
 8002bda:	4618      	mov	r0, r3
  }
  
  return bitstatus;  
}
 8002bdc:	bd10      	pop	{r4, pc}

08002bde <USART_ClearITPendingBit>:
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 8002bde:	0a09      	lsrs	r1, r1, #8
 8002be0:	2301      	movs	r3, #1
 8002be2:	fa03 f301 	lsl.w	r3, r3, r1
  USARTx->SR = (uint16_t)~itmask;
 8002be6:	43db      	mvns	r3, r3
 8002be8:	8003      	strh	r3, [r0, #0]
 8002bea:	4770      	bx	lr

08002bec <ST7032i_init>:
void ST7032i_command(ST7032i * lcd, byte value);
size_t ST7032i_write(ST7032i * lcd, byte value);

//
void ST7032i_init(ST7032i * lcd, I2CBus * wx) {
	lcd->_numlines = 2;
 8002bec:	2302      	movs	r3, #2
 8002bee:	7103      	strb	r3, [r0, #4]
	lcd->_numcolumns = 16;
 8002bf0:	2310      	movs	r3, #16
 8002bf2:	7143      	strb	r3, [r0, #5]
	lcd->_position = 0;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	7183      	strb	r3, [r0, #6]
	lcd->i2c_address = DEFAULT_I2C_ADDRESS;
 8002bf8:	233e      	movs	r3, #62	; 0x3e
 8002bfa:	7343      	strb	r3, [r0, #13]
	lcd->contrast = DEFAULTCONTRAST;
 8002bfc:	232a      	movs	r3, #42	; 0x2a
 8002bfe:	7303      	strb	r3, [r0, #12]
	lcd->pin_bklight = PIN_NOT_DEFINED;
 8002c00:	23ff      	movs	r3, #255	; 0xff
 8002c02:	81c3      	strh	r3, [r0, #14]

	lcd->wirex = wx;
 8002c04:	6081      	str	r1, [r0, #8]
 8002c06:	4770      	bx	lr

08002c08 <ST7032i_command>:
		pinMode(lcd->pin_bklight, OUTPUT);
	}
}
//

void ST7032i_command(ST7032i * lcd, uint8_t value) {
 8002c08:	b507      	push	{r0, r1, r2, lr}
 8002c0a:	4603      	mov	r3, r0
	uint8_t buf[2];
	buf[0] = (byte) 0x00;
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f88d 2004 	strb.w	r2, [sp, #4]
	buf[1] = value;
 8002c12:	f88d 1005 	strb.w	r1, [sp, #5]
	i2c_transmit(lcd->wirex, lcd->i2c_address, buf, 2);
 8002c16:	aa01      	add	r2, sp, #4
 8002c18:	7b59      	ldrb	r1, [r3, #13]
 8002c1a:	6880      	ldr	r0, [r0, #8]
 8002c1c:	2302      	movs	r3, #2
 8002c1e:	f7fd fd81 	bl	8000724 <i2c_transmit>
	delay_us(CMDDELAY);
 8002c22:	2032      	movs	r0, #50	; 0x32
 8002c24:	f7fd fb1a 	bl	800025c <delay_us>
}
 8002c28:	bd0e      	pop	{r1, r2, r3, pc}

08002c2a <ST7032i_write>:

//
size_t ST7032i_write(ST7032i * lcd, uint8_t value) {
 8002c2a:	b507      	push	{r0, r1, r2, lr}
 8002c2c:	4603      	mov	r3, r0
	uint8_t buf[2];
	buf[0] = 0b01000000;
 8002c2e:	2240      	movs	r2, #64	; 0x40
 8002c30:	f88d 2004 	strb.w	r2, [sp, #4]
	buf[1] = value & 0xff;
 8002c34:	f88d 1005 	strb.w	r1, [sp, #5]
	i2c_transmit(lcd->wirex,lcd->i2c_address, buf, 2);
 8002c38:	aa01      	add	r2, sp, #4
 8002c3a:	7b59      	ldrb	r1, [r3, #13]
 8002c3c:	6880      	ldr	r0, [r0, #8]
 8002c3e:	2302      	movs	r3, #2
 8002c40:	f7fd fd70 	bl	8000724 <i2c_transmit>
	delay_us(CMDDELAY);
 8002c44:	2032      	movs	r0, #50	; 0x32
 8002c46:	f7fd fb09 	bl	800025c <delay_us>
	return 1; // assume success
}
 8002c4a:	2001      	movs	r0, #1
 8002c4c:	bd0e      	pop	{r1, r2, r3, pc}

08002c4e <ST7032i_print>:
	lcd->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
	// set the entry mode
	ST7032i_command(lcd, LCD_ENTRYMODESET | lcd->_displaymode);
}

size_t ST7032i_print(ST7032i * lcd, const char * str) {
 8002c4e:	b570      	push	{r4, r5, r6, lr}
 8002c50:	4606      	mov	r6, r0
 8002c52:	460d      	mov	r5, r1
	uint16_t i;
	for (i = 0; str[i]; i++)
 8002c54:	2400      	movs	r4, #0
 8002c56:	e004      	b.n	8002c62 <ST7032i_print+0x14>
		ST7032i_write(lcd, str[i]);
 8002c58:	4630      	mov	r0, r6
 8002c5a:	f7ff ffe6 	bl	8002c2a <ST7032i_write>
	ST7032i_command(lcd, LCD_ENTRYMODESET | lcd->_displaymode);
}

size_t ST7032i_print(ST7032i * lcd, const char * str) {
	uint16_t i;
	for (i = 0; str[i]; i++)
 8002c5e:	3401      	adds	r4, #1
 8002c60:	b2a4      	uxth	r4, r4
 8002c62:	5d29      	ldrb	r1, [r5, r4]
 8002c64:	2900      	cmp	r1, #0
 8002c66:	d1f7      	bne.n	8002c58 <ST7032i_print+0xa>
		ST7032i_write(lcd, str[i]);
	return i; // assume success
}
 8002c68:	4620      	mov	r0, r4
 8002c6a:	bd70      	pop	{r4, r5, r6, pc}

08002c6c <ST7032i_setContrast>:

void ST7032i_setContrast(ST7032i * lcd, byte val) {
	lcd->contrast = 0x7f & val;
 8002c6c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	for (i = 0; str[i]; i++)
		ST7032i_write(lcd, str[i]);
	return i; // assume success
}

void ST7032i_setContrast(ST7032i * lcd, byte val) {
 8002c70:	b510      	push	{r4, lr}
 8002c72:	4604      	mov	r4, r0
	lcd->contrast = 0x7f & val;
 8002c74:	7301      	strb	r1, [r0, #12]
	ST7032i_command(lcd, 0b00111000); //function set
 8002c76:	2138      	movs	r1, #56	; 0x38
 8002c78:	f7ff ffc6 	bl	8002c08 <ST7032i_command>
	ST7032i_command(lcd, 0b00111001); // function set
 8002c7c:	2139      	movs	r1, #57	; 0x39
 8002c7e:	4620      	mov	r0, r4
 8002c80:	f7ff ffc2 	bl	8002c08 <ST7032i_command>
	delay_ms(2);
 8002c84:	2002      	movs	r0, #2
 8002c86:	f7fd fad9 	bl	800023c <delay_ms>
	ST7032i_command(lcd, 0b01110000 | (lcd->contrast & 0xf)); // contrast Low 4 bits
 8002c8a:	7b21      	ldrb	r1, [r4, #12]
 8002c8c:	f001 010f 	and.w	r1, r1, #15
 8002c90:	4620      	mov	r0, r4
 8002c92:	f041 0170 	orr.w	r1, r1, #112	; 0x70
 8002c96:	f7ff ffb7 	bl	8002c08 <ST7032i_command>
	delay_ms(2);
 8002c9a:	2002      	movs	r0, #2
 8002c9c:	f7fd face 	bl	800023c <delay_ms>
	ST7032i_command(lcd, 0b01011100 | ((lcd->contrast >> 4) & 0x3)); // contast High/icon/power
 8002ca0:	7b21      	ldrb	r1, [r4, #12]
 8002ca2:	f3c1 1101 	ubfx	r1, r1, #4, #2
 8002ca6:	4620      	mov	r0, r4
 8002ca8:	f041 015c 	orr.w	r1, r1, #92	; 0x5c
 8002cac:	f7ff ffac 	bl	8002c08 <ST7032i_command>
	ST7032i_command(lcd, 0b00111000); // function set
 8002cb0:	4620      	mov	r0, r4
 8002cb2:	2138      	movs	r1, #56	; 0x38
 8002cb4:	f7ff ffa8 	bl	8002c08 <ST7032i_command>
	delay_ms(2);
 8002cb8:	2002      	movs	r0, #2
}
 8002cba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	delay_ms(2);
	ST7032i_command(lcd, 0b01110000 | (lcd->contrast & 0xf)); // contrast Low 4 bits
	delay_ms(2);
	ST7032i_command(lcd, 0b01011100 | ((lcd->contrast >> 4) & 0x3)); // contast High/icon/power
	ST7032i_command(lcd, 0b00111000); // function set
	delay_ms(2);
 8002cbe:	f7fd babd 	b.w	800023c <delay_ms>

08002cc2 <ST7032i_clear>:
}

/* ------------------ */

void ST7032i_clear(ST7032i * lcd) {
 8002cc2:	b508      	push	{r3, lr}
	ST7032i_command(lcd, LCD_CLEARDISPLAY); // clear display, set cursor position to zero
 8002cc4:	2101      	movs	r1, #1
 8002cc6:	f7ff ff9f 	bl	8002c08 <ST7032i_command>
	delay_ms(200);  // this command takes a long time!
 8002cca:	20c8      	movs	r0, #200	; 0xc8
}
 8002ccc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* ------------------ */

void ST7032i_clear(ST7032i * lcd) {
	ST7032i_command(lcd, LCD_CLEARDISPLAY); // clear display, set cursor position to zero
	delay_ms(200);  // this command takes a long time!
 8002cd0:	f7fd bab4 	b.w	800023c <delay_ms>

08002cd4 <ST7032i_home>:
}

void ST7032i_home(ST7032i * lcd) {
 8002cd4:	b508      	push	{r3, lr}
	ST7032i_command(lcd, LCD_RETURNHOME);  // set cursor position to zero
 8002cd6:	2102      	movs	r1, #2
 8002cd8:	f7ff ff96 	bl	8002c08 <ST7032i_command>
	delay_ms(200);  // this command takes a long time!
 8002cdc:	20c8      	movs	r0, #200	; 0xc8
}
 8002cde:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	delay_ms(200);  // this command takes a long time!
}

void ST7032i_home(ST7032i * lcd) {
	ST7032i_command(lcd, LCD_RETURNHOME);  // set cursor position to zero
	delay_ms(200);  // this command takes a long time!
 8002ce2:	f7fd baab 	b.w	800023c <delay_ms>

08002ce6 <ST7032i_setCursor>:
}

void ST7032i_setCursor(ST7032i * lcd, uint8_t c, uint8_t r) {
 8002ce6:	b5f0      	push	{r4, r5, r6, r7, lr}
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8002ce8:	4b10      	ldr	r3, [pc, #64]	; (8002d2c <ST7032i_setCursor+0x46>)
void ST7032i_home(ST7032i * lcd) {
	ST7032i_command(lcd, LCD_RETURNHOME);  // set cursor position to zero
	delay_ms(200);  // this command takes a long time!
}

void ST7032i_setCursor(ST7032i * lcd, uint8_t c, uint8_t r) {
 8002cea:	4605      	mov	r5, r0
 8002cec:	4614      	mov	r4, r2
 8002cee:	460e      	mov	r6, r1
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8002cf0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
void ST7032i_home(ST7032i * lcd) {
	ST7032i_command(lcd, LCD_RETURNHOME);  // set cursor position to zero
	delay_ms(200);  // this command takes a long time!
}

void ST7032i_setCursor(ST7032i * lcd, uint8_t c, uint8_t r) {
 8002cf2:	b085      	sub	sp, #20
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8002cf4:	af04      	add	r7, sp, #16
 8002cf6:	e907 000f 	stmdb	r7, {r0, r1, r2, r3}
	if (r >= lcd->_numlines) {
 8002cfa:	792b      	ldrb	r3, [r5, #4]
 8002cfc:	429c      	cmp	r4, r3
 8002cfe:	d304      	bcc.n	8002d0a <ST7032i_setCursor+0x24>
		r %= lcd->_numlines;    // we count rows starting w/ 0
 8002d00:	fbb4 f2f3 	udiv	r2, r4, r3
 8002d04:	fb03 4412 	mls	r4, r3, r2, r4
 8002d08:	b2e4      	uxtb	r4, r4
	}
	lcd->_position = c + row_offsets[r];
 8002d0a:	ab04      	add	r3, sp, #16
 8002d0c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
	ST7032i_command(lcd, LCD_SETDDRAMADDR | lcd->_position);
 8002d10:	4628      	mov	r0, r5
void ST7032i_setCursor(ST7032i * lcd, uint8_t c, uint8_t r) {
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
	if (r >= lcd->_numlines) {
		r %= lcd->_numlines;    // we count rows starting w/ 0
	}
	lcd->_position = c + row_offsets[r];
 8002d12:	f854 1c10 	ldr.w	r1, [r4, #-16]
 8002d16:	1871      	adds	r1, r6, r1
 8002d18:	b2c9      	uxtb	r1, r1
 8002d1a:	71a9      	strb	r1, [r5, #6]
	ST7032i_command(lcd, LCD_SETDDRAMADDR | lcd->_position);
 8002d1c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
}
 8002d20:	b005      	add	sp, #20
 8002d22:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
	if (r >= lcd->_numlines) {
		r %= lcd->_numlines;    // we count rows starting w/ 0
	}
	lcd->_position = c + row_offsets[r];
	ST7032i_command(lcd, LCD_SETDDRAMADDR | lcd->_position);
 8002d26:	f7ff bf6f 	b.w	8002c08 <ST7032i_command>
 8002d2a:	bf00      	nop
 8002d2c:	08009708 	.word	0x08009708

08002d30 <ST7032i_noDisplay>:
}

// LCD_DISPLAYON, LCD_BLINKON, LCD_CURSORON
void ST7032i_noDisplay(ST7032i * this) {
	this->_displaycontrol &= ~LCD_DISPLAYON;
 8002d30:	7841      	ldrb	r1, [r0, #1]
 8002d32:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
 8002d36:	7041      	strb	r1, [r0, #1]
	ST7032i_command(this, LCD_DISPLAYCONTROL | this->_displaycontrol);
 8002d38:	f041 0108 	orr.w	r1, r1, #8
 8002d3c:	f7ff bf64 	b.w	8002c08 <ST7032i_command>

08002d40 <ST7032i_display>:
}

void ST7032i_display(ST7032i * this) {
	this->_displaycontrol |= LCD_DISPLAYON;
 8002d40:	7841      	ldrb	r1, [r0, #1]
 8002d42:	f041 0204 	orr.w	r2, r1, #4
	ST7032i_command(this, LCD_DISPLAYCONTROL | this->_displaycontrol);
 8002d46:	f041 010c 	orr.w	r1, r1, #12
	this->_displaycontrol &= ~LCD_DISPLAYON;
	ST7032i_command(this, LCD_DISPLAYCONTROL | this->_displaycontrol);
}

void ST7032i_display(ST7032i * this) {
	this->_displaycontrol |= LCD_DISPLAYON;
 8002d4a:	7042      	strb	r2, [r0, #1]
	ST7032i_command(this, LCD_DISPLAYCONTROL | this->_displaycontrol);
 8002d4c:	f7ff bf5c 	b.w	8002c08 <ST7032i_command>

08002d50 <ST7032i_begin>:
	i2c_transmit(lcd->wirex,lcd->i2c_address, buf, 2);
	delay_us(CMDDELAY);
	return 1; // assume success
}

void ST7032i_begin(ST7032i * lcd) {
 8002d50:	b510      	push	{r4, lr}
//	delay(40);
	ST7032i_command(lcd, 0b00111000); //function set
 8002d52:	2138      	movs	r1, #56	; 0x38
	i2c_transmit(lcd->wirex,lcd->i2c_address, buf, 2);
	delay_us(CMDDELAY);
	return 1; // assume success
}

void ST7032i_begin(ST7032i * lcd) {
 8002d54:	4604      	mov	r4, r0
//	delay(40);
	ST7032i_command(lcd, 0b00111000); //function set
 8002d56:	f7ff ff57 	bl	8002c08 <ST7032i_command>
	ST7032i_command(lcd, 0b00111001); // function set
 8002d5a:	2139      	movs	r1, #57	; 0x39
 8002d5c:	4620      	mov	r0, r4
 8002d5e:	f7ff ff53 	bl	8002c08 <ST7032i_command>
	delay_ms(2);
 8002d62:	2002      	movs	r0, #2
 8002d64:	f7fd fa6a 	bl	800023c <delay_ms>

	ST7032i_command(lcd, 0b00010100); // interval osc
 8002d68:	4620      	mov	r0, r4
 8002d6a:	2114      	movs	r1, #20
 8002d6c:	f7ff ff4c 	bl	8002c08 <ST7032i_command>
	ST7032i_command(lcd, 0b01110000 | (lcd->contrast & 0xf)); // contrast Low 4 bits
 8002d70:	7b21      	ldrb	r1, [r4, #12]
 8002d72:	f001 010f 	and.w	r1, r1, #15
 8002d76:	4620      	mov	r0, r4
 8002d78:	f041 0170 	orr.w	r1, r1, #112	; 0x70
 8002d7c:	f7ff ff44 	bl	8002c08 <ST7032i_command>
	delay_ms(2);
 8002d80:	2002      	movs	r0, #2
 8002d82:	f7fd fa5b 	bl	800023c <delay_ms>

	ST7032i_command(lcd, 0b01011100 | ((lcd->contrast >> 4) & 0x3)); // contast High/icon/power
 8002d86:	7b21      	ldrb	r1, [r4, #12]
 8002d88:	f3c1 1101 	ubfx	r1, r1, #4, #2
 8002d8c:	4620      	mov	r0, r4
 8002d8e:	f041 015c 	orr.w	r1, r1, #92	; 0x5c
 8002d92:	f7ff ff39 	bl	8002c08 <ST7032i_command>
	ST7032i_command(lcd, 0b01101100); // follower control
 8002d96:	216c      	movs	r1, #108	; 0x6c
 8002d98:	4620      	mov	r0, r4
 8002d9a:	f7ff ff35 	bl	8002c08 <ST7032i_command>
	delay_ms(300);
 8002d9e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002da2:	f7fd fa4b 	bl	800023c <delay_ms>

	ST7032i_command(lcd, 0b00111000); // function set
 8002da6:	4620      	mov	r0, r4
 8002da8:	2138      	movs	r1, #56	; 0x38
 8002daa:	f7ff ff2d 	bl	8002c08 <ST7032i_command>
	ST7032i_command(lcd, 0b00001100); // Display On
 8002dae:	210c      	movs	r1, #12
 8002db0:	4620      	mov	r0, r4
 8002db2:	f7ff ff29 	bl	8002c08 <ST7032i_command>
	delay_ms(2);
 8002db6:	2002      	movs	r0, #2
 8002db8:	f7fd fa40 	bl	800023c <delay_ms>

	ST7032i_command(lcd, 0b00000001); // Clear Display
 8002dbc:	2101      	movs	r1, #1
 8002dbe:	4620      	mov	r0, r4
 8002dc0:	f7ff ff22 	bl	8002c08 <ST7032i_command>
	delay_ms(2); // Clear Display needs additional wait
 8002dc4:	2002      	movs	r0, #2
 8002dc6:	f7fd fa39 	bl	800023c <delay_ms>
	ST7032i_command(lcd, 0b00000010); // home, but does not work
 8002dca:	2102      	movs	r1, #2
 8002dcc:	4620      	mov	r0, r4
 8002dce:	f7ff ff1b 	bl	8002c08 <ST7032i_command>
	delay_ms(2);
 8002dd2:	2002      	movs	r0, #2
 8002dd4:	f7fd fa32 	bl	800023c <delay_ms>

	// finally, set # lines, font size, etc.
	ST7032i_command(lcd, LCD_FUNCTIONSET | lcd->_displayfunction);
 8002dd8:	7821      	ldrb	r1, [r4, #0]
 8002dda:	4620      	mov	r0, r4
 8002ddc:	f041 0120 	orr.w	r1, r1, #32
 8002de0:	f7ff ff12 	bl	8002c08 <ST7032i_command>

	// turn the display on with no cursor or blinking default
	lcd->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8002de4:	2304      	movs	r3, #4
 8002de6:	7063      	strb	r3, [r4, #1]
	ST7032i_display(lcd);
 8002de8:	4620      	mov	r0, r4
 8002dea:	f7ff ffa9 	bl	8002d40 <ST7032i_display>

	// clear it off
	ST7032i_clear(lcd);
 8002dee:	4620      	mov	r0, r4
 8002df0:	f7ff ff67 	bl	8002cc2 <ST7032i_clear>
	ST7032i_home(lcd);
 8002df4:	4620      	mov	r0, r4
 8002df6:	f7ff ff6d 	bl	8002cd4 <ST7032i_home>

	// Initialize to default text direction (for romance languages)
	lcd->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8002dfa:	2302      	movs	r3, #2
	// set the entry mode
	ST7032i_command(lcd, LCD_ENTRYMODESET | lcd->_displaymode);
 8002dfc:	4620      	mov	r0, r4
 8002dfe:	2106      	movs	r1, #6
	// clear it off
	ST7032i_clear(lcd);
	ST7032i_home(lcd);

	// Initialize to default text direction (for romance languages)
	lcd->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8002e00:	70a3      	strb	r3, [r4, #2]
	// set the entry mode
	ST7032i_command(lcd, LCD_ENTRYMODESET | lcd->_displaymode);
}
 8002e02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ST7032i_home(lcd);

	// Initialize to default text direction (for romance languages)
	lcd->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
	// set the entry mode
	ST7032i_command(lcd, LCD_ENTRYMODESET | lcd->_displaymode);
 8002e06:	f7ff beff 	b.w	8002c08 <ST7032i_command>

08002e0a <ST7032i_noBlink>:
	this->_displaycontrol |= LCD_DISPLAYON;
	ST7032i_command(this, LCD_DISPLAYCONTROL | this->_displaycontrol);
}

void ST7032i_noBlink(ST7032i * this) {
	this->_displaycontrol &= ~LCD_BLINKON;
 8002e0a:	7841      	ldrb	r1, [r0, #1]
 8002e0c:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 8002e10:	7041      	strb	r1, [r0, #1]
	ST7032i_command(this, LCD_DISPLAYCONTROL | this->_displaycontrol);
 8002e12:	f041 0108 	orr.w	r1, r1, #8
 8002e16:	f7ff bef7 	b.w	8002c08 <ST7032i_command>

08002e1a <ST7032i_blink>:
}

void ST7032i_blink(ST7032i * this) {
	this->_displaycontrol |= LCD_BLINKON;
 8002e1a:	7841      	ldrb	r1, [r0, #1]
 8002e1c:	f041 0201 	orr.w	r2, r1, #1
	ST7032i_command(this, LCD_DISPLAYCONTROL | this->_displaycontrol);
 8002e20:	f041 0109 	orr.w	r1, r1, #9
	this->_displaycontrol &= ~LCD_BLINKON;
	ST7032i_command(this, LCD_DISPLAYCONTROL | this->_displaycontrol);
}

void ST7032i_blink(ST7032i * this) {
	this->_displaycontrol |= LCD_BLINKON;
 8002e24:	7042      	strb	r2, [r0, #1]
	ST7032i_command(this, LCD_DISPLAYCONTROL | this->_displaycontrol);
 8002e26:	f7ff beef 	b.w	8002c08 <ST7032i_command>

08002e2a <ST7032i_noCursor>:
}

void ST7032i_noCursor(ST7032i * this) {
	this->_displaycontrol &= ~LCD_CURSORON;
 8002e2a:	7841      	ldrb	r1, [r0, #1]
 8002e2c:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
 8002e30:	7041      	strb	r1, [r0, #1]
	ST7032i_command(this, LCD_DISPLAYCONTROL | this->_displaycontrol);
 8002e32:	f041 0108 	orr.w	r1, r1, #8
 8002e36:	f7ff bee7 	b.w	8002c08 <ST7032i_command>

08002e3a <ST7032i_showCursor>:
}

void ST7032i_showCursor(ST7032i * this) {
	this->_displaycontrol |= LCD_CURSORON;
 8002e3a:	7841      	ldrb	r1, [r0, #1]
 8002e3c:	f041 0202 	orr.w	r2, r1, #2
	ST7032i_command(this, LCD_DISPLAYCONTROL | this->_displaycontrol);
 8002e40:	f041 010a 	orr.w	r1, r1, #10
	this->_displaycontrol &= ~LCD_CURSORON;
	ST7032i_command(this, LCD_DISPLAYCONTROL | this->_displaycontrol);
}

void ST7032i_showCursor(ST7032i * this) {
	this->_displaycontrol |= LCD_CURSORON;
 8002e44:	7042      	strb	r2, [r0, #1]
	ST7032i_command(this, LCD_DISPLAYCONTROL | this->_displaycontrol);
 8002e46:	f7ff bedf 	b.w	8002c08 <ST7032i_command>

08002e4a <ST7032i_scrollDisplayLeft>:
}

void ST7032i_scrollDisplayLeft(ST7032i * this) {
	ST7032i_command(this, LCD_CURSORSHIFT | LCD_DISPLAYMOVE | LCD_MOVELEFT);
 8002e4a:	2118      	movs	r1, #24
 8002e4c:	f7ff bedc 	b.w	8002c08 <ST7032i_command>

08002e50 <ST7032i_scrollDisplayRight>:
}

void ST7032i_scrollDisplayRight(ST7032i * this) {
	ST7032i_command(this, LCD_CURSORSHIFT | LCD_DISPLAYMOVE | LCD_MOVERIGHT);
 8002e50:	211c      	movs	r1, #28
 8002e52:	f7ff bed9 	b.w	8002c08 <ST7032i_command>

08002e56 <ST7032i_leftToRight>:
}

void ST7032i_leftToRight(ST7032i * this) {
	this->_displaymode |= LCD_ENTRYLEFT;
 8002e56:	7881      	ldrb	r1, [r0, #2]
 8002e58:	f041 0202 	orr.w	r2, r1, #2
	ST7032i_command(this, LCD_ENTRYMODESET | this->_displaymode);
 8002e5c:	f041 0106 	orr.w	r1, r1, #6
void ST7032i_scrollDisplayRight(ST7032i * this) {
	ST7032i_command(this, LCD_CURSORSHIFT | LCD_DISPLAYMOVE | LCD_MOVERIGHT);
}

void ST7032i_leftToRight(ST7032i * this) {
	this->_displaymode |= LCD_ENTRYLEFT;
 8002e60:	7082      	strb	r2, [r0, #2]
	ST7032i_command(this, LCD_ENTRYMODESET | this->_displaymode);
 8002e62:	f7ff bed1 	b.w	8002c08 <ST7032i_command>

08002e66 <ST7032i_rightToLeft>:
}

void ST7032i_rightToLeft(ST7032i * this) {
	this->_displaymode &= ~LCD_ENTRYLEFT;
 8002e66:	7881      	ldrb	r1, [r0, #2]
 8002e68:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
 8002e6c:	7081      	strb	r1, [r0, #2]
	ST7032i_command(this, LCD_ENTRYMODESET | this->_displaymode);
 8002e6e:	f041 0104 	orr.w	r1, r1, #4
 8002e72:	f7ff bec9 	b.w	8002c08 <ST7032i_command>

08002e76 <ST7032i_autoscroll>:
}

void ST7032i_autoscroll(ST7032i * this) {
	this->_displaymode |= LCD_ENTRYSHIFTINCREMENT;
 8002e76:	7881      	ldrb	r1, [r0, #2]
 8002e78:	f041 0201 	orr.w	r2, r1, #1
	ST7032i_command(this, LCD_ENTRYMODESET | this->_displaymode);
 8002e7c:	f041 0105 	orr.w	r1, r1, #5
	this->_displaymode &= ~LCD_ENTRYLEFT;
	ST7032i_command(this, LCD_ENTRYMODESET | this->_displaymode);
}

void ST7032i_autoscroll(ST7032i * this) {
	this->_displaymode |= LCD_ENTRYSHIFTINCREMENT;
 8002e80:	7082      	strb	r2, [r0, #2]
	ST7032i_command(this, LCD_ENTRYMODESET | this->_displaymode);
 8002e82:	f7ff bec1 	b.w	8002c08 <ST7032i_command>

08002e86 <ST7032i_noAutoscroll>:
}

void ST7032i_noAutoscroll(ST7032i * this) {
	this->_displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
 8002e86:	7881      	ldrb	r1, [r0, #2]
 8002e88:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 8002e8c:	7081      	strb	r1, [r0, #2]
	ST7032i_command(this, LCD_ENTRYMODESET | this->_displaymode);
 8002e8e:	f041 0104 	orr.w	r1, r1, #4
 8002e92:	f7ff beb9 	b.w	8002c08 <ST7032i_command>

08002e96 <ST7032i_createChar>:
}

void ST7032i_createChar(ST7032i * this, uint8_t location, uint8_t charmap[]) {
	int i;
	location &= 0x7; // we only have 8 locations 0-7
	ST7032i_command(this, LCD_SETCGRAMADDR | (location << 3));
 8002e96:	f001 0107 	and.w	r1, r1, #7
 8002e9a:	00c9      	lsls	r1, r1, #3
void ST7032i_noAutoscroll(ST7032i * this) {
	this->_displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
	ST7032i_command(this, LCD_ENTRYMODESET | this->_displaymode);
}

void ST7032i_createChar(ST7032i * this, uint8_t location, uint8_t charmap[]) {
 8002e9c:	b570      	push	{r4, r5, r6, lr}
	int i;
	location &= 0x7; // we only have 8 locations 0-7
	ST7032i_command(this, LCD_SETCGRAMADDR | (location << 3));
 8002e9e:	f041 0140 	orr.w	r1, r1, #64	; 0x40
void ST7032i_noAutoscroll(ST7032i * this) {
	this->_displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
	ST7032i_command(this, LCD_ENTRYMODESET | this->_displaymode);
}

void ST7032i_createChar(ST7032i * this, uint8_t location, uint8_t charmap[]) {
 8002ea2:	4606      	mov	r6, r0
 8002ea4:	4615      	mov	r5, r2
	int i;
	location &= 0x7; // we only have 8 locations 0-7
	ST7032i_command(this, LCD_SETCGRAMADDR | (location << 3));
 8002ea6:	f7ff feaf 	bl	8002c08 <ST7032i_command>
	for (i = 0; i < 8; i++) {
 8002eaa:	2400      	movs	r4, #0
		ST7032i_write(this, charmap[i]);
 8002eac:	5d29      	ldrb	r1, [r5, r4]
 8002eae:	4630      	mov	r0, r6

void ST7032i_createChar(ST7032i * this, uint8_t location, uint8_t charmap[]) {
	int i;
	location &= 0x7; // we only have 8 locations 0-7
	ST7032i_command(this, LCD_SETCGRAMADDR | (location << 3));
	for (i = 0; i < 8; i++) {
 8002eb0:	3401      	adds	r4, #1
		ST7032i_write(this, charmap[i]);
 8002eb2:	f7ff feba 	bl	8002c2a <ST7032i_write>

void ST7032i_createChar(ST7032i * this, uint8_t location, uint8_t charmap[]) {
	int i;
	location &= 0x7; // we only have 8 locations 0-7
	ST7032i_command(this, LCD_SETCGRAMADDR | (location << 3));
	for (i = 0; i < 8; i++) {
 8002eb6:	2c08      	cmp	r4, #8
 8002eb8:	d1f8      	bne.n	8002eac <ST7032i_createChar+0x16>
		ST7032i_write(this, charmap[i]);
	}
}
 8002eba:	bd70      	pop	{r4, r5, r6, pc}

08002ebc <_close>:
	}
}

int _close(int file) {
	return -1;
}
 8002ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ec0:	4770      	bx	lr

08002ec2 <_execve>:
/*
 execve
 Transfer control to a new process. Minimal implementation (for a system without processes):
 */
int _execve(char *name, char **argv, char **env) {
	errno = ENOMEM;
 8002ec2:	4b03      	ldr	r3, [pc, #12]	; (8002ed0 <_execve+0xe>)
 8002ec4:	220c      	movs	r2, #12
 8002ec6:	601a      	str	r2, [r3, #0]
	return -1;
}
 8002ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	2000134c 	.word	0x2000134c

08002ed4 <_fork>:
 fork
 Create a new process. Minimal implementation (for a system without processes):
 */

int _fork() {
	errno = EAGAIN;
 8002ed4:	4b02      	ldr	r3, [pc, #8]	; (8002ee0 <_fork+0xc>)
 8002ed6:	220b      	movs	r2, #11
 8002ed8:	601a      	str	r2, [r3, #0]
	return -1;
}
 8002eda:	f04f 30ff 	mov.w	r0, #4294967295
 8002ede:	4770      	bx	lr
 8002ee0:	2000134c 	.word	0x2000134c

08002ee4 <_fstat>:
 Status of an open file. For consistency with other minimal implementations in these examples,
 all files are regarded as character special devices.
 The `sys/stat.h' header file required is distributed in the `include' subdirectory for this C library.
 */
int _fstat(int file, struct stat *st) {
	st->st_mode = S_IFCHR;
 8002ee4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ee8:	604b      	str	r3, [r1, #4]
	return 0;
}
 8002eea:	2000      	movs	r0, #0
 8002eec:	4770      	bx	lr

08002eee <_getpid>:
 Process-ID; this is sometimes used to generate strings unlikely to conflict with other processes. Minimal implementation, for a system without processes:
 */

int _getpid() {
	return 1;
}
 8002eee:	2001      	movs	r0, #1
 8002ef0:	4770      	bx	lr

08002ef2 <_isatty>:
/*
 isatty
 Query whether output stream is a terminal. For consistency with the other minimal implementations,
 */
int _isatty(int file) {
	switch (file) {
 8002ef2:	2802      	cmp	r0, #2
 8002ef4:	d904      	bls.n	8002f00 <_isatty+0xe>
	case STDERR_FILENO:
	case STDIN_FILENO:
		return 1;
	default:
		//errno = ENOTTY;
		errno = EBADF;
 8002ef6:	4b03      	ldr	r3, [pc, #12]	; (8002f04 <_isatty+0x12>)
 8002ef8:	2209      	movs	r2, #9
 8002efa:	601a      	str	r2, [r3, #0]
		return 0;
 8002efc:	2000      	movs	r0, #0
 8002efe:	4770      	bx	lr
int _isatty(int file) {
	switch (file) {
	case STDOUT_FILENO:
	case STDERR_FILENO:
	case STDIN_FILENO:
		return 1;
 8002f00:	2001      	movs	r0, #1
	default:
		//errno = ENOTTY;
		errno = EBADF;
		return 0;
	}
}
 8002f02:	4770      	bx	lr
 8002f04:	2000134c 	.word	0x2000134c

08002f08 <_kill>:
/*
 kill
 Send a signal. Minimal implementation:
 */
int _kill(int pid, int sig) {
	errno = EINVAL;
 8002f08:	4b02      	ldr	r3, [pc, #8]	; (8002f14 <_kill+0xc>)
 8002f0a:	2216      	movs	r2, #22
 8002f0c:	601a      	str	r2, [r3, #0]
	return (-1);
}
 8002f0e:	f04f 30ff 	mov.w	r0, #4294967295
 8002f12:	4770      	bx	lr
 8002f14:	2000134c 	.word	0x2000134c

08002f18 <_link>:
 link
 Establish a new name for an existing file. Minimal implementation:
 */

int _link(char *old, char *new) {
	errno = EMLINK;
 8002f18:	4b02      	ldr	r3, [pc, #8]	; (8002f24 <_link+0xc>)
 8002f1a:	221f      	movs	r2, #31
 8002f1c:	601a      	str	r2, [r3, #0]
	return -1;
}
 8002f1e:	f04f 30ff 	mov.w	r0, #4294967295
 8002f22:	4770      	bx	lr
 8002f24:	2000134c 	.word	0x2000134c

08002f28 <_lseek>:
 lseek
 Set position in a file. Minimal implementation:
 */
int _lseek(int file, int ptr, int dir) {
	return 0;
}
 8002f28:	2000      	movs	r0, #0
 8002f2a:	4770      	bx	lr

08002f2c <_read>:
 read
 Read a character to a file. `libc' subroutines will use this system routine for input from all files, including stdin
 Returns -1 on error or blocks until the number of characters have been read.
 */

int _read(int file, char *ptr, int len) {
 8002f2c:	b530      	push	{r4, r5, lr}
	int n;
	int num = 0;
	switch (file) {
 8002f2e:	b150      	cbz	r0, 8002f46 <_read+0x1a>
 8002f30:	e010      	b.n	8002f54 <_read+0x28>
	case STDIN_FILENO:
		for (n = 0; n < len; n++) {
#if   STDIN_USART == 1
			while ((USART1->SR & USART_FLAG_RXNE) == (uint16_t)RESET) {}
 8002f32:	881d      	ldrh	r5, [r3, #0]
 8002f34:	f005 0520 	and.w	r5, r5, #32
 8002f38:	b2ad      	uxth	r5, r5
 8002f3a:	2d00      	cmp	r5, #0
 8002f3c:	d0f9      	beq.n	8002f32 <_read+0x6>
			char c = (char)(USART1->DR & (uint16_t)0x01FF);
 8002f3e:	88a5      	ldrh	r5, [r4, #4]
 8002f40:	540d      	strb	r5, [r1, r0]
int _read(int file, char *ptr, int len) {
	int n;
	int num = 0;
	switch (file) {
	case STDIN_FILENO:
		for (n = 0; n < len; n++) {
 8002f42:	3001      	adds	r0, #1
 8002f44:	e001      	b.n	8002f4a <_read+0x1e>
#if   STDIN_USART == 1
			while ((USART1->SR & USART_FLAG_RXNE) == (uint16_t)RESET) {}
 8002f46:	4b06      	ldr	r3, [pc, #24]	; (8002f60 <_read+0x34>)
 8002f48:	461c      	mov	r4, r3
int _read(int file, char *ptr, int len) {
	int n;
	int num = 0;
	switch (file) {
	case STDIN_FILENO:
		for (n = 0; n < len; n++) {
 8002f4a:	4290      	cmp	r0, r2
 8002f4c:	dbf1      	blt.n	8002f32 <_read+0x6>
 8002f4e:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8002f52:	bd30      	pop	{r4, r5, pc}
					*ptr++ = c;
					num++;
				}
				break;
				default:
				errno = EBADF;
 8002f54:	4b03      	ldr	r3, [pc, #12]	; (8002f64 <_read+0x38>)
 8002f56:	2209      	movs	r2, #9
 8002f58:	601a      	str	r2, [r3, #0]
				return -1;
 8002f5a:	f04f 30ff 	mov.w	r0, #4294967295
			}
	return num;
}
 8002f5e:	bd30      	pop	{r4, r5, pc}
 8002f60:	40011000 	.word	0x40011000
 8002f64:	2000134c 	.word	0x2000134c

08002f68 <_stat>:
 Status of a file (by name). Minimal implementation:
 int    _EXFUN(stat,( const char *__path, struct stat *__sbuf ));
 */

int _stat(const char *filepath, struct stat *st) {
	st->st_mode = S_IFCHR;
 8002f68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f6c:	604b      	str	r3, [r1, #4]
	return 0;
}
 8002f6e:	2000      	movs	r0, #0
 8002f70:	4770      	bx	lr

08002f72 <_times>:
 Timing information for current process. Minimal implementation:
 */

clock_t _times(struct tms *buf) {
	return -1;
}
 8002f72:	f04f 30ff 	mov.w	r0, #4294967295
 8002f76:	4770      	bx	lr

08002f78 <_unlink>:
/*
 unlink
 Remove a file's directory entry. Minimal implementation:
 */
int _unlink(char *name) {
	errno = ENOENT;
 8002f78:	4b02      	ldr	r3, [pc, #8]	; (8002f84 <_unlink+0xc>)
 8002f7a:	2202      	movs	r2, #2
 8002f7c:	601a      	str	r2, [r3, #0]
	return -1;
}
 8002f7e:	f04f 30ff 	mov.w	r0, #4294967295
 8002f82:	4770      	bx	lr
 8002f84:	2000134c 	.word	0x2000134c

08002f88 <_wait>:
/*
 wait
 Wait for a child process. Minimal implementation:
 */
int _wait(int *status) {
	errno = ECHILD;
 8002f88:	4b02      	ldr	r3, [pc, #8]	; (8002f94 <_wait+0xc>)
 8002f8a:	220a      	movs	r2, #10
 8002f8c:	601a      	str	r2, [r3, #0]
	return -1;
}
 8002f8e:	f04f 30ff 	mov.w	r0, #4294967295
 8002f92:	4770      	bx	lr
 8002f94:	2000134c 	.word	0x2000134c

08002f98 <_write>:
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
 8002f98:	2801      	cmp	r0, #1
/*
 write
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
 8002f9a:	b530      	push	{r4, r5, lr}
	int n;
	switch (file) {
 8002f9c:	d00c      	beq.n	8002fb8 <_write+0x20>
 8002f9e:	2802      	cmp	r0, #2
 8002fa0:	d120      	bne.n	8002fe4 <_write+0x4c>
 8002fa2:	e019      	b.n	8002fd8 <_write+0x40>
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
#if STDOUT_USART == 1
			while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 8002fa4:	8805      	ldrh	r5, [r0, #0]
 8002fa6:	f005 0540 	and.w	r5, r5, #64	; 0x40
 8002faa:	b2ad      	uxth	r5, r5
 8002fac:	2d00      	cmp	r5, #0
 8002fae:	d0f9      	beq.n	8002fa4 <_write+0xc>
			USART1->DR = (*ptr++ & (uint16_t)0x01FF);
 8002fb0:	5ccd      	ldrb	r5, [r1, r3]
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
 8002fb2:	3301      	adds	r3, #1
#if STDOUT_USART == 1
			while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
			USART1->DR = (*ptr++ & (uint16_t)0x01FF);
 8002fb4:	80a5      	strh	r5, [r4, #4]
 8002fb6:	e002      	b.n	8002fbe <_write+0x26>
	int n;
	switch (file) {
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
#if STDOUT_USART == 1
			while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 8002fb8:	480e      	ldr	r0, [pc, #56]	; (8002ff4 <_write+0x5c>)
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
 8002fba:	2300      	movs	r3, #0
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
#if STDOUT_USART == 1
			while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 8002fbc:	4604      	mov	r4, r0
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	dbf0      	blt.n	8002fa4 <_write+0xc>
 8002fc2:	e014      	b.n	8002fee <_write+0x56>
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
#if STDERR_USART == 1
					while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 8002fc4:	8805      	ldrh	r5, [r0, #0]
 8002fc6:	f005 0540 	and.w	r5, r5, #64	; 0x40
 8002fca:	b2ad      	uxth	r5, r5
 8002fcc:	2d00      	cmp	r5, #0
 8002fce:	d0f9      	beq.n	8002fc4 <_write+0x2c>
					USART1->DR = (*ptr++ & (uint16_t)0x01FF);
 8002fd0:	5ccd      	ldrb	r5, [r1, r3]
					USART3->DR = (*ptr++ & (uint16_t)0x01FF);
#endif
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
 8002fd2:	3301      	adds	r3, #1
#if STDERR_USART == 1
					while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
					USART1->DR = (*ptr++ & (uint16_t)0x01FF);
 8002fd4:	80a5      	strh	r5, [r4, #4]
 8002fd6:	e002      	b.n	8002fde <_write+0x46>
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
#if STDERR_USART == 1
					while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 8002fd8:	4806      	ldr	r0, [pc, #24]	; (8002ff4 <_write+0x5c>)
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
 8002fda:	2300      	movs	r3, #0
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
#if STDERR_USART == 1
					while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 8002fdc:	4604      	mov	r4, r0
					USART3->DR = (*ptr++ & (uint16_t)0x01FF);
#endif
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	dbf0      	blt.n	8002fc4 <_write+0x2c>
 8002fe2:	e004      	b.n	8002fee <_write+0x56>
					USART3->DR = (*ptr++ & (uint16_t)0x01FF);
#endif
				}
				break;
				default:
				errno = EBADF;
 8002fe4:	4b04      	ldr	r3, [pc, #16]	; (8002ff8 <_write+0x60>)
 8002fe6:	2209      	movs	r2, #9
 8002fe8:	601a      	str	r2, [r3, #0]
				return -1;
 8002fea:	f04f 32ff 	mov.w	r2, #4294967295
			}
	return len;
}
 8002fee:	4610      	mov	r0, r2
 8002ff0:	bd30      	pop	{r4, r5, pc}
 8002ff2:	bf00      	nop
 8002ff4:	40011000 	.word	0x40011000
 8002ff8:	2000134c 	.word	0x2000134c

08002ffc <_sbrk>:
/*
 sbrk
 Increase program data space.
 Malloc and related functions depend on this
 */
caddr_t _sbrk(int incr) {
 8002ffc:	b508      	push	{r3, lr}

	extern char _ebss; // Defined by the linker
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0) {
 8002ffe:	4b0d      	ldr	r3, [pc, #52]	; (8003034 <_sbrk+0x38>)
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	b90a      	cbnz	r2, 8003008 <_sbrk+0xc>
		heap_end = &_ebss;
 8003004:	4a0c      	ldr	r2, [pc, #48]	; (8003038 <_sbrk+0x3c>)
 8003006:	601a      	str	r2, [r3, #0]
	}
	prev_heap_end = heap_end;
 8003008:	681b      	ldr	r3, [r3, #0]
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __get_MSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 800300a:	f3ef 8208 	mrs	r2, MSP

	char * stack = (char*) __get_MSP();
	if (heap_end + incr > stack) {
 800300e:	1818      	adds	r0, r3, r0
 8003010:	4290      	cmp	r0, r2
 8003012:	d90a      	bls.n	800302a <_sbrk+0x2e>
		_write(STDERR_FILENO, "Heap and stack collision\n", 25);
 8003014:	2219      	movs	r2, #25
 8003016:	2002      	movs	r0, #2
 8003018:	4908      	ldr	r1, [pc, #32]	; (800303c <_sbrk+0x40>)
 800301a:	f7ff ffbd 	bl	8002f98 <_write>
		errno = ENOMEM;
 800301e:	4b08      	ldr	r3, [pc, #32]	; (8003040 <_sbrk+0x44>)
 8003020:	220c      	movs	r2, #12
 8003022:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8003024:	f04f 33ff 	mov.w	r3, #4294967295
 8003028:	e001      	b.n	800302e <_sbrk+0x32>
		//abort ();
	}

	heap_end += incr;
 800302a:	4a02      	ldr	r2, [pc, #8]	; (8003034 <_sbrk+0x38>)
 800302c:	6010      	str	r0, [r2, #0]
	return (caddr_t) prev_heap_end;

}
 800302e:	4618      	mov	r0, r3
 8003030:	bd08      	pop	{r3, pc}
 8003032:	bf00      	nop
 8003034:	2000061c 	.word	0x2000061c
 8003038:	20001350 	.word	0x20001350
 800303c:	08009987 	.word	0x08009987
 8003040:	2000134c 	.word	0x2000134c

08003044 <_exit>:
char *__env[1] = { 0 };
char **environ = __env;

int _write(int file, char *ptr, int len);

void _exit(int status) {
 8003044:	b508      	push	{r3, lr}
	_write(1, "exit", 4);
 8003046:	2001      	movs	r0, #1
 8003048:	4902      	ldr	r1, [pc, #8]	; (8003054 <_exit+0x10>)
 800304a:	2204      	movs	r2, #4
 800304c:	f7ff ffa4 	bl	8002f98 <_write>
 8003050:	e7fe      	b.n	8003050 <_exit+0xc>
 8003052:	bf00      	nop
 8003054:	080099a1 	.word	0x080099a1
 8003058:	08009a14 	.word	0x08009a14
 800305c:	20000000 	.word	0x20000000
 8003060:	2000061c 	.word	0x2000061c
 8003064:	2000061c 	.word	0x2000061c
 8003068:	20001350 	.word	0x20001350

0800306c <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800306c:	4770      	bx	lr

0800306e <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800306e:	e7fe      	b.n	800306e <HardFault_Handler>

08003070 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8003070:	e7fe      	b.n	8003070 <MemManage_Handler>

08003072 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8003072:	e7fe      	b.n	8003072 <BusFault_Handler>

08003074 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8003074:	e7fe      	b.n	8003074 <UsageFault_Handler>

08003076 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8003076:	4770      	bx	lr

08003078 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8003078:	4770      	bx	lr

0800307a <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800307a:	4770      	bx	lr

0800307c <SystemInit>:
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800307c:	4b34      	ldr	r3, [pc, #208]	; (8003150 <SystemInit+0xd4>)
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	f042 0201 	orr.w	r2, r2, #1
 8003084:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003086:	2200      	movs	r2, #0
 8003088:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800308a:	6819      	ldr	r1, [r3, #0]
 800308c:	f021 7184 	bic.w	r1, r1, #17301504	; 0x1080000
 8003090:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8003094:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003096:	492f      	ldr	r1, [pc, #188]	; (8003154 <SystemInit+0xd8>)
 8003098:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800309a:	6819      	ldr	r1, [r3, #0]
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800309c:	b082      	sub	sp, #8

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800309e:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 80030a2:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80030a4:	60da      	str	r2, [r3, #12]
static void SetSysClock(void)
{
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80030a6:	9200      	str	r2, [sp, #0]
 80030a8:	9201      	str	r2, [sp, #4]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80030b0:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80030b8:	9201      	str	r2, [sp, #4]
    StartUpCounter++;
 80030ba:	9a00      	ldr	r2, [sp, #0]
 80030bc:	3201      	adds	r2, #1
 80030be:	9200      	str	r2, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80030c0:	9a01      	ldr	r2, [sp, #4]
 80030c2:	b91a      	cbnz	r2, 80030cc <SystemInit+0x50>
 80030c4:	9a00      	ldr	r2, [sp, #0]
 80030c6:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 80030ca:	d1f2      	bne.n	80030b2 <SystemInit+0x36>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80030cc:	4b20      	ldr	r3, [pc, #128]	; (8003150 <SystemInit+0xd4>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
 80030d4:	bf18      	it	ne
 80030d6:	2301      	movne	r3, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80030d8:	9301      	str	r3, [sp, #4]
  }

  if (HSEStatus == (uint32_t)0x01)
 80030da:	9b01      	ldr	r3, [sp, #4]
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d004      	beq.n	80030ea <SystemInit+0x6e>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80030e0:	4b1d      	ldr	r3, [pc, #116]	; (8003158 <SystemInit+0xdc>)
 80030e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80030e6:	609a      	str	r2, [r3, #8]
 80030e8:	e02f      	b.n	800314a <SystemInit+0xce>
  }

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80030ea:	4b19      	ldr	r3, [pc, #100]	; (8003150 <SystemInit+0xd4>)
 80030ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030ee:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80030f2:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80030f4:	4a19      	ldr	r2, [pc, #100]	; (800315c <SystemInit+0xe0>)
 80030f6:	6811      	ldr	r1, [r2, #0]
 80030f8:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80030fc:	6011      	str	r1, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80030fe:	689a      	ldr	r2, [r3, #8]
 8003100:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8003102:	689a      	ldr	r2, [r3, #8]
 8003104:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003108:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 800310a:	689a      	ldr	r2, [r3, #8]
 800310c:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 8003110:	609a      	str	r2, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8003112:	4a13      	ldr	r2, [pc, #76]	; (8003160 <SystemInit+0xe4>)
 8003114:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800311c:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800311e:	6819      	ldr	r1, [r3, #0]
 8003120:	4a0b      	ldr	r2, [pc, #44]	; (8003150 <SystemInit+0xd4>)
 8003122:	0189      	lsls	r1, r1, #6
 8003124:	d5fb      	bpl.n	800311e <SystemInit+0xa2>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8003126:	4b0f      	ldr	r3, [pc, #60]	; (8003164 <SystemInit+0xe8>)
 8003128:	f240 6105 	movw	r1, #1541	; 0x605
 800312c:	6019      	str	r1, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800312e:	6893      	ldr	r3, [r2, #8]
 8003130:	f023 0303 	bic.w	r3, r3, #3
 8003134:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8003136:	6893      	ldr	r3, [r2, #8]
 8003138:	f043 0302 	orr.w	r3, r3, #2
 800313c:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 800313e:	6893      	ldr	r3, [r2, #8]
 8003140:	f003 030c 	and.w	r3, r3, #12
 8003144:	2b08      	cmp	r3, #8
 8003146:	d1fa      	bne.n	800313e <SystemInit+0xc2>
 8003148:	e7ca      	b.n	80030e0 <SystemInit+0x64>
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif
}
 800314a:	b002      	add	sp, #8
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	40023800 	.word	0x40023800
 8003154:	24003010 	.word	0x24003010
 8003158:	e000ed00 	.word	0xe000ed00
 800315c:	40007000 	.word	0x40007000
 8003160:	07405408 	.word	0x07405408
 8003164:	40023c00 	.word	0x40023c00

08003168 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8003168:	4b18      	ldr	r3, [pc, #96]	; (80031cc <SystemCoreClockUpdate+0x64>)
 800316a:	4a19      	ldr	r2, [pc, #100]	; (80031d0 <SystemCoreClockUpdate+0x68>)
 800316c:	6899      	ldr	r1, [r3, #8]
 800316e:	f001 010c 	and.w	r1, r1, #12

  switch (tmp)
 8003172:	2904      	cmp	r1, #4
 8003174:	d003      	beq.n	800317e <SystemCoreClockUpdate+0x16>
 8003176:	2908      	cmp	r1, #8
 8003178:	d003      	beq.n	8003182 <SystemCoreClockUpdate+0x1a>
 800317a:	4b16      	ldr	r3, [pc, #88]	; (80031d4 <SystemCoreClockUpdate+0x6c>)
 800317c:	e019      	b.n	80031b2 <SystemCoreClockUpdate+0x4a>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800317e:	4b16      	ldr	r3, [pc, #88]	; (80031d8 <SystemCoreClockUpdate+0x70>)
 8003180:	e017      	b.n	80031b2 <SystemCoreClockUpdate+0x4a>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8003182:	6859      	ldr	r1, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003184:	685a      	ldr	r2, [r3, #4]
      
      if (pllsource != 0)
 8003186:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800318a:	6859      	ldr	r1, [r3, #4]
 800318c:	bf14      	ite	ne
 800318e:	4b12      	ldrne	r3, [pc, #72]	; (80031d8 <SystemCoreClockUpdate+0x70>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8003190:	4b10      	ldreq	r3, [pc, #64]	; (80031d4 <SystemCoreClockUpdate+0x6c>)

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003192:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8003196:	fbb3 f3f2 	udiv	r3, r3, r2
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800319a:	4a0c      	ldr	r2, [pc, #48]	; (80031cc <SystemCoreClockUpdate+0x64>)
 800319c:	6852      	ldr	r2, [r2, #4]
 800319e:	f3c2 4201 	ubfx	r2, r2, #16, #2
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80031a2:	f3c1 1188 	ubfx	r1, r1, #6, #9
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80031a6:	3201      	adds	r2, #1
 80031a8:	0052      	lsls	r2, r2, #1
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80031aa:	434b      	muls	r3, r1
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
      SystemCoreClock = pllvco/pllp;
 80031ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80031b0:	4a07      	ldr	r2, [pc, #28]	; (80031d0 <SystemCoreClockUpdate+0x68>)
 80031b2:	6013      	str	r3, [r2, #0]
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80031b4:	4b05      	ldr	r3, [pc, #20]	; (80031cc <SystemCoreClockUpdate+0x64>)
 80031b6:	689a      	ldr	r2, [r3, #8]
 80031b8:	4b05      	ldr	r3, [pc, #20]	; (80031d0 <SystemCoreClockUpdate+0x68>)
 80031ba:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80031be:	189a      	adds	r2, r3, r2
 80031c0:	7911      	ldrb	r1, [r2, #4]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	fa22 f201 	lsr.w	r2, r2, r1
 80031c8:	601a      	str	r2, [r3, #0]
 80031ca:	4770      	bx	lr
 80031cc:	40023800 	.word	0x40023800
 80031d0:	20000088 	.word	0x20000088
 80031d4:	00f42400 	.word	0x00f42400
 80031d8:	007a1200 	.word	0x007a1200

080031dc <cleanup_glue>:
 80031dc:	b538      	push	{r3, r4, r5, lr}
 80031de:	460c      	mov	r4, r1
 80031e0:	6809      	ldr	r1, [r1, #0]
 80031e2:	4605      	mov	r5, r0
 80031e4:	b109      	cbz	r1, 80031ea <cleanup_glue+0xe>
 80031e6:	f7ff fff9 	bl	80031dc <cleanup_glue>
 80031ea:	4628      	mov	r0, r5
 80031ec:	4621      	mov	r1, r4
 80031ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80031f2:	f002 bbeb 	b.w	80059cc <_free_r>
 80031f6:	bf00      	nop

080031f8 <_reclaim_reent>:
 80031f8:	f240 039c 	movw	r3, #156	; 0x9c
 80031fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003200:	b570      	push	{r4, r5, r6, lr}
 8003202:	4605      	mov	r5, r0
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4298      	cmp	r0, r3
 8003208:	d047      	beq.n	800329a <_reclaim_reent+0xa2>
 800320a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800320c:	b1eb      	cbz	r3, 800324a <_reclaim_reent+0x52>
 800320e:	68da      	ldr	r2, [r3, #12]
 8003210:	b1b2      	cbz	r2, 8003240 <_reclaim_reent+0x48>
 8003212:	2300      	movs	r3, #0
 8003214:	461e      	mov	r6, r3
 8003216:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800321a:	b141      	cbz	r1, 800322e <_reclaim_reent+0x36>
 800321c:	680c      	ldr	r4, [r1, #0]
 800321e:	4628      	mov	r0, r5
 8003220:	f002 fbd4 	bl	80059cc <_free_r>
 8003224:	4621      	mov	r1, r4
 8003226:	2c00      	cmp	r4, #0
 8003228:	d1f8      	bne.n	800321c <_reclaim_reent+0x24>
 800322a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800322c:	68da      	ldr	r2, [r3, #12]
 800322e:	3601      	adds	r6, #1
 8003230:	2e20      	cmp	r6, #32
 8003232:	4633      	mov	r3, r6
 8003234:	d1ef      	bne.n	8003216 <_reclaim_reent+0x1e>
 8003236:	4628      	mov	r0, r5
 8003238:	4611      	mov	r1, r2
 800323a:	f002 fbc7 	bl	80059cc <_free_r>
 800323e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003240:	6819      	ldr	r1, [r3, #0]
 8003242:	b111      	cbz	r1, 800324a <_reclaim_reent+0x52>
 8003244:	4628      	mov	r0, r5
 8003246:	f002 fbc1 	bl	80059cc <_free_r>
 800324a:	6969      	ldr	r1, [r5, #20]
 800324c:	b111      	cbz	r1, 8003254 <_reclaim_reent+0x5c>
 800324e:	4628      	mov	r0, r5
 8003250:	f002 fbbc 	bl	80059cc <_free_r>
 8003254:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8003256:	b111      	cbz	r1, 800325e <_reclaim_reent+0x66>
 8003258:	4628      	mov	r0, r5
 800325a:	f002 fbb7 	bl	80059cc <_free_r>
 800325e:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8003260:	b111      	cbz	r1, 8003268 <_reclaim_reent+0x70>
 8003262:	4628      	mov	r0, r5
 8003264:	f002 fbb2 	bl	80059cc <_free_r>
 8003268:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 800326a:	b111      	cbz	r1, 8003272 <_reclaim_reent+0x7a>
 800326c:	4628      	mov	r0, r5
 800326e:	f002 fbad 	bl	80059cc <_free_r>
 8003272:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8003274:	b111      	cbz	r1, 800327c <_reclaim_reent+0x84>
 8003276:	4628      	mov	r0, r5
 8003278:	f002 fba8 	bl	80059cc <_free_r>
 800327c:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800327e:	b12b      	cbz	r3, 800328c <_reclaim_reent+0x94>
 8003280:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8003284:	b111      	cbz	r1, 800328c <_reclaim_reent+0x94>
 8003286:	4628      	mov	r0, r5
 8003288:	f002 fba0 	bl	80059cc <_free_r>
 800328c:	6b69      	ldr	r1, [r5, #52]	; 0x34
 800328e:	b111      	cbz	r1, 8003296 <_reclaim_reent+0x9e>
 8003290:	4628      	mov	r0, r5
 8003292:	f002 fb9b 	bl	80059cc <_free_r>
 8003296:	69ab      	ldr	r3, [r5, #24]
 8003298:	b903      	cbnz	r3, 800329c <_reclaim_reent+0xa4>
 800329a:	bd70      	pop	{r4, r5, r6, pc}
 800329c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800329e:	4628      	mov	r0, r5
 80032a0:	4798      	blx	r3
 80032a2:	f8d5 10d8 	ldr.w	r1, [r5, #216]	; 0xd8
 80032a6:	2900      	cmp	r1, #0
 80032a8:	d0f7      	beq.n	800329a <_reclaim_reent+0xa2>
 80032aa:	4628      	mov	r0, r5
 80032ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80032b0:	f7ff bf94 	b.w	80031dc <cleanup_glue>

080032b4 <_wrapup_reent>:
 80032b4:	b570      	push	{r4, r5, r6, lr}
 80032b6:	4606      	mov	r6, r0
 80032b8:	b198      	cbz	r0, 80032e2 <_wrapup_reent+0x2e>
 80032ba:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 80032bc:	b15b      	cbz	r3, 80032d6 <_wrapup_reent+0x22>
 80032be:	685d      	ldr	r5, [r3, #4]
 80032c0:	1e6c      	subs	r4, r5, #1
 80032c2:	d408      	bmi.n	80032d6 <_wrapup_reent+0x22>
 80032c4:	3502      	adds	r5, #2
 80032c6:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 80032ca:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80032ce:	3c01      	subs	r4, #1
 80032d0:	4798      	blx	r3
 80032d2:	1c63      	adds	r3, r4, #1
 80032d4:	d1f9      	bne.n	80032ca <_wrapup_reent+0x16>
 80032d6:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80032d8:	b113      	cbz	r3, 80032e0 <_wrapup_reent+0x2c>
 80032da:	4630      	mov	r0, r6
 80032dc:	4798      	blx	r3
 80032de:	bd70      	pop	{r4, r5, r6, pc}
 80032e0:	bd70      	pop	{r4, r5, r6, pc}
 80032e2:	f240 039c 	movw	r3, #156	; 0x9c
 80032e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80032ea:	681e      	ldr	r6, [r3, #0]
 80032ec:	e7e5      	b.n	80032ba <_wrapup_reent+0x6>
 80032ee:	bf00      	nop

080032f0 <_sprintf_r>:
 80032f0:	b40c      	push	{r2, r3}
 80032f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032f4:	b09d      	sub	sp, #116	; 0x74
 80032f6:	ac22      	add	r4, sp, #136	; 0x88
 80032f8:	460e      	mov	r6, r1
 80032fa:	a902      	add	r1, sp, #8
 80032fc:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 8003300:	f854 2b04 	ldr.w	r2, [r4], #4
 8003304:	f44f 7702 	mov.w	r7, #520	; 0x208
 8003308:	9504      	str	r5, [sp, #16]
 800330a:	4623      	mov	r3, r4
 800330c:	9507      	str	r5, [sp, #28]
 800330e:	9602      	str	r6, [sp, #8]
 8003310:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8003314:	f8ad 7014 	strh.w	r7, [sp, #20]
 8003318:	9606      	str	r6, [sp, #24]
 800331a:	f8ad 5016 	strh.w	r5, [sp, #22]
 800331e:	9401      	str	r4, [sp, #4]
 8003320:	f000 f830 	bl	8003384 <_svfprintf_r>
 8003324:	9b02      	ldr	r3, [sp, #8]
 8003326:	2200      	movs	r2, #0
 8003328:	701a      	strb	r2, [r3, #0]
 800332a:	b01d      	add	sp, #116	; 0x74
 800332c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8003330:	b002      	add	sp, #8
 8003332:	4770      	bx	lr

08003334 <sprintf>:
 8003334:	b40e      	push	{r1, r2, r3}
 8003336:	f240 039c 	movw	r3, #156	; 0x9c
 800333a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800333c:	b09c      	sub	sp, #112	; 0x70
 800333e:	ac21      	add	r4, sp, #132	; 0x84
 8003340:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003344:	4606      	mov	r6, r0
 8003346:	a902      	add	r1, sp, #8
 8003348:	f854 2b04 	ldr.w	r2, [r4], #4
 800334c:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 8003350:	6818      	ldr	r0, [r3, #0]
 8003352:	f44f 7702 	mov.w	r7, #520	; 0x208
 8003356:	4623      	mov	r3, r4
 8003358:	9504      	str	r5, [sp, #16]
 800335a:	9507      	str	r5, [sp, #28]
 800335c:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8003360:	9602      	str	r6, [sp, #8]
 8003362:	f8ad 7014 	strh.w	r7, [sp, #20]
 8003366:	9606      	str	r6, [sp, #24]
 8003368:	f8ad 5016 	strh.w	r5, [sp, #22]
 800336c:	9401      	str	r4, [sp, #4]
 800336e:	f000 f809 	bl	8003384 <_svfprintf_r>
 8003372:	9b02      	ldr	r3, [sp, #8]
 8003374:	2200      	movs	r2, #0
 8003376:	701a      	strb	r2, [r3, #0]
 8003378:	b01c      	add	sp, #112	; 0x70
 800337a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800337e:	b003      	add	sp, #12
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop

08003384 <_svfprintf_r>:
 8003384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003388:	b0c9      	sub	sp, #292	; 0x124
 800338a:	4689      	mov	r9, r1
 800338c:	4614      	mov	r4, r2
 800338e:	9311      	str	r3, [sp, #68]	; 0x44
 8003390:	2600      	movs	r6, #0
 8003392:	900f      	str	r0, [sp, #60]	; 0x3c
 8003394:	f002 fc20 	bl	8005bd8 <_localeconv_r>
 8003398:	2700      	movs	r7, #0
 800339a:	e9cd 671e 	strd	r6, r7, [sp, #120]	; 0x78
 800339e:	6800      	ldr	r0, [r0, #0]
 80033a0:	901c      	str	r0, [sp, #112]	; 0x70
 80033a2:	f003 fdc1 	bl	8006f28 <strlen>
 80033a6:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80033aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ae:	b21b      	sxth	r3, r3
 80033b0:	901d      	str	r0, [sp, #116]	; 0x74
 80033b2:	b123      	cbz	r3, 80033be <_svfprintf_r+0x3a>
 80033b4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	f001 80dd 	beq.w	8004578 <_svfprintf_r+0x11f4>
 80033be:	f10d 0be0 	add.w	fp, sp, #224	; 0xe0
 80033c2:	f649 15b4 	movw	r5, #39348	; 0x99b4
 80033c6:	46d8      	mov	r8, fp
 80033c8:	f649 16b0 	movw	r6, #39344	; 0x99b0
 80033cc:	f649 17ac 	movw	r7, #39340	; 0x99ac
 80033d0:	940a      	str	r4, [sp, #40]	; 0x28
 80033d2:	f649 14a8 	movw	r4, #39336	; 0x99a8
 80033d6:	2300      	movs	r3, #0
 80033d8:	f6c0 0500 	movt	r5, #2048	; 0x800
 80033dc:	f6c0 0600 	movt	r6, #2048	; 0x800
 80033e0:	f6c0 0700 	movt	r7, #2048	; 0x800
 80033e4:	f6c0 0400 	movt	r4, #2048	; 0x800
 80033e8:	9312      	str	r3, [sp, #72]	; 0x48
 80033ea:	931a      	str	r3, [sp, #104]	; 0x68
 80033ec:	9320      	str	r3, [sp, #128]	; 0x80
 80033ee:	930c      	str	r3, [sp, #48]	; 0x30
 80033f0:	9518      	str	r5, [sp, #96]	; 0x60
 80033f2:	9619      	str	r6, [sp, #100]	; 0x64
 80033f4:	9716      	str	r7, [sp, #88]	; 0x58
 80033f6:	9417      	str	r4, [sp, #92]	; 0x5c
 80033f8:	f8cd b0ac 	str.w	fp, [sp, #172]	; 0xac
 80033fc:	932d      	str	r3, [sp, #180]	; 0xb4
 80033fe:	932c      	str	r3, [sp, #176]	; 0xb0
 8003400:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8003404:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8003406:	782b      	ldrb	r3, [r5, #0]
 8003408:	2b25      	cmp	r3, #37	; 0x25
 800340a:	bf18      	it	ne
 800340c:	2b00      	cmpne	r3, #0
 800340e:	f000 80b9 	beq.w	8003584 <_svfprintf_r+0x200>
 8003412:	1c6a      	adds	r2, r5, #1
 8003414:	4616      	mov	r6, r2
 8003416:	3201      	adds	r2, #1
 8003418:	7833      	ldrb	r3, [r6, #0]
 800341a:	2b25      	cmp	r3, #37	; 0x25
 800341c:	bf18      	it	ne
 800341e:	2b00      	cmpne	r3, #0
 8003420:	d1f8      	bne.n	8003414 <_svfprintf_r+0x90>
 8003422:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8003424:	1b37      	subs	r7, r6, r4
 8003426:	d010      	beq.n	800344a <_svfprintf_r+0xc6>
 8003428:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 800342a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800342c:	3401      	adds	r4, #1
 800342e:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 8003430:	2c07      	cmp	r4, #7
 8003432:	e888 0081 	stmia.w	r8, {r0, r7}
 8003436:	443d      	add	r5, r7
 8003438:	942c      	str	r4, [sp, #176]	; 0xb0
 800343a:	bfd8      	it	le
 800343c:	f108 0808 	addle.w	r8, r8, #8
 8003440:	952d      	str	r5, [sp, #180]	; 0xb4
 8003442:	dc7e      	bgt.n	8003542 <_svfprintf_r+0x1be>
 8003444:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8003446:	19e4      	adds	r4, r4, r7
 8003448:	940c      	str	r4, [sp, #48]	; 0x30
 800344a:	7833      	ldrb	r3, [r6, #0]
 800344c:	2b00      	cmp	r3, #0
 800344e:	f000 87d3 	beq.w	80043f8 <_svfprintf_r+0x1074>
 8003452:	1c75      	adds	r5, r6, #1
 8003454:	7877      	ldrb	r7, [r6, #1]
 8003456:	2300      	movs	r3, #0
 8003458:	f04f 39ff 	mov.w	r9, #4294967295
 800345c:	930d      	str	r3, [sp, #52]	; 0x34
 800345e:	2020      	movs	r0, #32
 8003460:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
 8003464:	212b      	movs	r1, #43	; 0x2b
 8003466:	9308      	str	r3, [sp, #32]
 8003468:	462b      	mov	r3, r5
 800346a:	950a      	str	r5, [sp, #40]	; 0x28
 800346c:	3301      	adds	r3, #1
 800346e:	f1a7 0220 	sub.w	r2, r7, #32
 8003472:	2a58      	cmp	r2, #88	; 0x58
 8003474:	f200 8248 	bhi.w	8003908 <_svfprintf_r+0x584>
 8003478:	e8df f012 	tbh	[pc, r2, lsl #1]
 800347c:	024602ec 	.word	0x024602ec
 8003480:	02db0246 	.word	0x02db0246
 8003484:	02460246 	.word	0x02460246
 8003488:	02460246 	.word	0x02460246
 800348c:	02460246 	.word	0x02460246
 8003490:	008602e1 	.word	0x008602e1
 8003494:	005d0246 	.word	0x005d0246
 8003498:	0246008a 	.word	0x0246008a
 800349c:	00af00a9 	.word	0x00af00a9
 80034a0:	00af00af 	.word	0x00af00af
 80034a4:	00af00af 	.word	0x00af00af
 80034a8:	00af00af 	.word	0x00af00af
 80034ac:	00af00af 	.word	0x00af00af
 80034b0:	02460246 	.word	0x02460246
 80034b4:	02460246 	.word	0x02460246
 80034b8:	02460246 	.word	0x02460246
 80034bc:	02460246 	.word	0x02460246
 80034c0:	02460246 	.word	0x02460246
 80034c4:	018400c0 	.word	0x018400c0
 80034c8:	01840246 	.word	0x01840246
 80034cc:	02460246 	.word	0x02460246
 80034d0:	02460246 	.word	0x02460246
 80034d4:	024601bc 	.word	0x024601bc
 80034d8:	01c20246 	.word	0x01c20246
 80034dc:	02460246 	.word	0x02460246
 80034e0:	02460246 	.word	0x02460246
 80034e4:	01df0246 	.word	0x01df0246
 80034e8:	02460246 	.word	0x02460246
 80034ec:	024601ec 	.word	0x024601ec
 80034f0:	02460246 	.word	0x02460246
 80034f4:	02460246 	.word	0x02460246
 80034f8:	02460246 	.word	0x02460246
 80034fc:	02460246 	.word	0x02460246
 8003500:	02710246 	.word	0x02710246
 8003504:	01840258 	.word	0x01840258
 8003508:	01840184 	.word	0x01840184
 800350c:	0258026b 	.word	0x0258026b
 8003510:	02460246 	.word	0x02460246
 8003514:	0246023c 	.word	0x0246023c
 8003518:	028502b5 	.word	0x028502b5
 800351c:	020b029a 	.word	0x020b029a
 8003520:	02110246 	.word	0x02110246
 8003524:	02c70246 	.word	0x02c70246
 8003528:	02460246 	.word	0x02460246
 800352c:	02f5      	.short	0x02f5
 800352e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8003530:	9211      	str	r2, [sp, #68]	; 0x44
 8003532:	4276      	negs	r6, r6
 8003534:	960d      	str	r6, [sp, #52]	; 0x34
 8003536:	9f08      	ldr	r7, [sp, #32]
 8003538:	f047 0704 	orr.w	r7, r7, #4
 800353c:	9708      	str	r7, [sp, #32]
 800353e:	781f      	ldrb	r7, [r3, #0]
 8003540:	e794      	b.n	800346c <_svfprintf_r+0xe8>
 8003542:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8003544:	aa2b      	add	r2, sp, #172	; 0xac
 8003546:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003548:	f003 fd1e 	bl	8006f88 <__ssprint_r>
 800354c:	b948      	cbnz	r0, 8003562 <_svfprintf_r+0x1de>
 800354e:	46d8      	mov	r8, fp
 8003550:	e778      	b.n	8003444 <_svfprintf_r+0xc0>
 8003552:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8003554:	aa2b      	add	r2, sp, #172	; 0xac
 8003556:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003558:	f003 fd16 	bl	8006f88 <__ssprint_r>
 800355c:	2800      	cmp	r0, #0
 800355e:	f000 8370 	beq.w	8003c42 <_svfprintf_r+0x8be>
 8003562:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8003566:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800356a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800356c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003570:	b21b      	sxth	r3, r3
 8003572:	2b00      	cmp	r3, #0
 8003574:	bf18      	it	ne
 8003576:	f04f 34ff 	movne.w	r4, #4294967295
 800357a:	940c      	str	r4, [sp, #48]	; 0x30
 800357c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800357e:	b049      	add	sp, #292	; 0x124
 8003580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003584:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8003586:	e760      	b.n	800344a <_svfprintf_r+0xc6>
 8003588:	f88d 108b 	strb.w	r1, [sp, #139]	; 0x8b
 800358c:	781f      	ldrb	r7, [r3, #0]
 800358e:	e76d      	b.n	800346c <_svfprintf_r+0xe8>
 8003590:	461c      	mov	r4, r3
 8003592:	f814 7b01 	ldrb.w	r7, [r4], #1
 8003596:	2f2a      	cmp	r7, #42	; 0x2a
 8003598:	f001 8166 	beq.w	8004868 <_svfprintf_r+0x14e4>
 800359c:	f1a7 0230 	sub.w	r2, r7, #48	; 0x30
 80035a0:	2a09      	cmp	r2, #9
 80035a2:	bf84      	itt	hi
 80035a4:	4623      	movhi	r3, r4
 80035a6:	f04f 0900 	movhi.w	r9, #0
 80035aa:	f63f af60 	bhi.w	800346e <_svfprintf_r+0xea>
 80035ae:	f04f 0900 	mov.w	r9, #0
 80035b2:	f814 7b01 	ldrb.w	r7, [r4], #1
 80035b6:	eb09 0989 	add.w	r9, r9, r9, lsl #2
 80035ba:	eb02 0949 	add.w	r9, r2, r9, lsl #1
 80035be:	f1a7 0230 	sub.w	r2, r7, #48	; 0x30
 80035c2:	2a09      	cmp	r2, #9
 80035c4:	4623      	mov	r3, r4
 80035c6:	d9f4      	bls.n	80035b2 <_svfprintf_r+0x22e>
 80035c8:	ea49 79e9 	orr.w	r9, r9, r9, asr #31
 80035cc:	e74f      	b.n	800346e <_svfprintf_r+0xea>
 80035ce:	9e08      	ldr	r6, [sp, #32]
 80035d0:	f046 0680 	orr.w	r6, r6, #128	; 0x80
 80035d4:	9608      	str	r6, [sp, #32]
 80035d6:	781f      	ldrb	r7, [r3, #0]
 80035d8:	e748      	b.n	800346c <_svfprintf_r+0xe8>
 80035da:	461c      	mov	r4, r3
 80035dc:	2200      	movs	r2, #0
 80035de:	f1a7 0630 	sub.w	r6, r7, #48	; 0x30
 80035e2:	f814 7b01 	ldrb.w	r7, [r4], #1
 80035e6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80035ea:	f1a7 0530 	sub.w	r5, r7, #48	; 0x30
 80035ee:	4623      	mov	r3, r4
 80035f0:	2d09      	cmp	r5, #9
 80035f2:	eb06 0242 	add.w	r2, r6, r2, lsl #1
 80035f6:	d9f2      	bls.n	80035de <_svfprintf_r+0x25a>
 80035f8:	920d      	str	r2, [sp, #52]	; 0x34
 80035fa:	e738      	b.n	800346e <_svfprintf_r+0xea>
 80035fc:	9c08      	ldr	r4, [sp, #32]
 80035fe:	930a      	str	r3, [sp, #40]	; 0x28
 8003600:	f044 0410 	orr.w	r4, r4, #16
 8003604:	9408      	str	r4, [sp, #32]
 8003606:	9d08      	ldr	r5, [sp, #32]
 8003608:	06ad      	lsls	r5, r5, #26
 800360a:	f140 8194 	bpl.w	8003936 <_svfprintf_r+0x5b2>
 800360e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8003610:	1df3      	adds	r3, r6, #7
 8003612:	f023 0307 	bic.w	r3, r3, #7
 8003616:	f103 0408 	add.w	r4, r3, #8
 800361a:	9411      	str	r4, [sp, #68]	; 0x44
 800361c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003620:	4614      	mov	r4, r2
 8003622:	461d      	mov	r5, r3
 8003624:	2a00      	cmp	r2, #0
 8003626:	f173 0600 	sbcs.w	r6, r3, #0
 800362a:	f2c0 85ff 	blt.w	800422c <_svfprintf_r+0xea8>
 800362e:	ea54 0005 	orrs.w	r0, r4, r5
 8003632:	f04f 0301 	mov.w	r3, #1
 8003636:	bf0c      	ite	eq
 8003638:	2200      	moveq	r2, #0
 800363a:	2201      	movne	r2, #1
 800363c:	f1b9 0f00 	cmp.w	r9, #0
 8003640:	bfa2      	ittt	ge
 8003642:	9e08      	ldrge	r6, [sp, #32]
 8003644:	f026 0680 	bicge.w	r6, r6, #128	; 0x80
 8003648:	9608      	strge	r6, [sp, #32]
 800364a:	f1b9 0f00 	cmp.w	r9, #0
 800364e:	bf18      	it	ne
 8003650:	f042 0201 	orrne.w	r2, r2, #1
 8003654:	2a00      	cmp	r2, #0
 8003656:	f000 835c 	beq.w	8003d12 <_svfprintf_r+0x98e>
 800365a:	2b01      	cmp	r3, #1
 800365c:	f000 849f 	beq.w	8003f9e <_svfprintf_r+0xc1a>
 8003660:	2b02      	cmp	r3, #2
 8003662:	f000 847a 	beq.w	8003f5a <_svfprintf_r+0xbd6>
 8003666:	f10d 00df 	add.w	r0, sp, #223	; 0xdf
 800366a:	46bc      	mov	ip, r7
 800366c:	08e1      	lsrs	r1, r4, #3
 800366e:	2607      	movs	r6, #7
 8003670:	ea04 0206 	and.w	r2, r4, r6
 8003674:	ea41 7145 	orr.w	r1, r1, r5, lsl #29
 8003678:	08ee      	lsrs	r6, r5, #3
 800367a:	460c      	mov	r4, r1
 800367c:	4635      	mov	r5, r6
 800367e:	4603      	mov	r3, r0
 8003680:	3230      	adds	r2, #48	; 0x30
 8003682:	3801      	subs	r0, #1
 8003684:	ea54 0705 	orrs.w	r7, r4, r5
 8003688:	b2d2      	uxtb	r2, r2
 800368a:	701a      	strb	r2, [r3, #0]
 800368c:	d1ee      	bne.n	800366c <_svfprintf_r+0x2e8>
 800368e:	9c08      	ldr	r4, [sp, #32]
 8003690:	4667      	mov	r7, ip
 8003692:	9314      	str	r3, [sp, #80]	; 0x50
 8003694:	07e4      	lsls	r4, r4, #31
 8003696:	f100 85bd 	bmi.w	8004214 <_svfprintf_r+0xe90>
 800369a:	ebc3 050b 	rsb	r5, r3, fp
 800369e:	950e      	str	r5, [sp, #56]	; 0x38
 80036a0:	f89d 308b 	ldrb.w	r3, [sp, #139]	; 0x8b
 80036a4:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80036a6:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 80036aa:	454e      	cmp	r6, r9
 80036ac:	bfb8      	it	lt
 80036ae:	464e      	movlt	r6, r9
 80036b0:	f04f 0900 	mov.w	r9, #0
 80036b4:	960b      	str	r6, [sp, #44]	; 0x2c
 80036b6:	f8cd 906c 	str.w	r9, [sp, #108]	; 0x6c
 80036ba:	b12b      	cbz	r3, 80036c8 <_svfprintf_r+0x344>
 80036bc:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80036c0:	f109 0901 	add.w	r9, r9, #1
 80036c4:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
 80036c8:	9b08      	ldr	r3, [sp, #32]
 80036ca:	f013 0302 	ands.w	r3, r3, #2
 80036ce:	9313      	str	r3, [sp, #76]	; 0x4c
 80036d0:	d002      	beq.n	80036d8 <_svfprintf_r+0x354>
 80036d2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80036d4:	3402      	adds	r4, #2
 80036d6:	940b      	str	r4, [sp, #44]	; 0x2c
 80036d8:	9d08      	ldr	r5, [sp, #32]
 80036da:	f015 0584 	ands.w	r5, r5, #132	; 0x84
 80036de:	9515      	str	r5, [sp, #84]	; 0x54
 80036e0:	f040 81d7 	bne.w	8003a92 <_svfprintf_r+0x70e>
 80036e4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80036e6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80036e8:	1b66      	subs	r6, r4, r5
 80036ea:	2e00      	cmp	r6, #0
 80036ec:	f340 81d1 	ble.w	8003a92 <_svfprintf_r+0x70e>
 80036f0:	2e10      	cmp	r6, #16
 80036f2:	f249 7a18 	movw	sl, #38680	; 0x9718
 80036f6:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 80036f8:	f6c0 0a00 	movt	sl, #2048	; 0x800
 80036fc:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 80036fe:	dd28      	ble.n	8003752 <_svfprintf_r+0x3ce>
 8003700:	9721      	str	r7, [sp, #132]	; 0x84
 8003702:	f04f 0910 	mov.w	r9, #16
 8003706:	4657      	mov	r7, sl
 8003708:	46b2      	mov	sl, r6
 800370a:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 800370c:	e004      	b.n	8003718 <_svfprintf_r+0x394>
 800370e:	f1aa 0a10 	sub.w	sl, sl, #16
 8003712:	f1ba 0f10 	cmp.w	sl, #16
 8003716:	dd19      	ble.n	800374c <_svfprintf_r+0x3c8>
 8003718:	3401      	adds	r4, #1
 800371a:	3510      	adds	r5, #16
 800371c:	2c07      	cmp	r4, #7
 800371e:	e888 0280 	stmia.w	r8, {r7, r9}
 8003722:	942c      	str	r4, [sp, #176]	; 0xb0
 8003724:	f108 0808 	add.w	r8, r8, #8
 8003728:	952d      	str	r5, [sp, #180]	; 0xb4
 800372a:	ddf0      	ble.n	800370e <_svfprintf_r+0x38a>
 800372c:	4630      	mov	r0, r6
 800372e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003730:	aa2b      	add	r2, sp, #172	; 0xac
 8003732:	46d8      	mov	r8, fp
 8003734:	f003 fc28 	bl	8006f88 <__ssprint_r>
 8003738:	2800      	cmp	r0, #0
 800373a:	f47f af12 	bne.w	8003562 <_svfprintf_r+0x1de>
 800373e:	f1aa 0a10 	sub.w	sl, sl, #16
 8003742:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 8003744:	f1ba 0f10 	cmp.w	sl, #16
 8003748:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 800374a:	dce5      	bgt.n	8003718 <_svfprintf_r+0x394>
 800374c:	4656      	mov	r6, sl
 800374e:	46ba      	mov	sl, r7
 8003750:	9f21      	ldr	r7, [sp, #132]	; 0x84
 8003752:	3401      	adds	r4, #1
 8003754:	f8c8 a000 	str.w	sl, [r8]
 8003758:	2c07      	cmp	r4, #7
 800375a:	f8c8 6004 	str.w	r6, [r8, #4]
 800375e:	4435      	add	r5, r6
 8003760:	942c      	str	r4, [sp, #176]	; 0xb0
 8003762:	952d      	str	r5, [sp, #180]	; 0xb4
 8003764:	bfd8      	it	le
 8003766:	f108 0808 	addle.w	r8, r8, #8
 800376a:	f340 8193 	ble.w	8003a94 <_svfprintf_r+0x710>
 800376e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8003770:	aa2b      	add	r2, sp, #172	; 0xac
 8003772:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003774:	f003 fc08 	bl	8006f88 <__ssprint_r>
 8003778:	2800      	cmp	r0, #0
 800377a:	f47f aef2 	bne.w	8003562 <_svfprintf_r+0x1de>
 800377e:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 8003780:	46d8      	mov	r8, fp
 8003782:	e187      	b.n	8003a94 <_svfprintf_r+0x710>
 8003784:	9c08      	ldr	r4, [sp, #32]
 8003786:	930a      	str	r3, [sp, #40]	; 0x28
 8003788:	0721      	lsls	r1, r4, #28
 800378a:	f140 857c 	bpl.w	8004286 <_svfprintf_r+0xf02>
 800378e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8003790:	1de9      	adds	r1, r5, #7
 8003792:	f021 0107 	bic.w	r1, r1, #7
 8003796:	f101 0608 	add.w	r6, r1, #8
 800379a:	9611      	str	r6, [sp, #68]	; 0x44
 800379c:	680e      	ldr	r6, [r1, #0]
 800379e:	684d      	ldr	r5, [r1, #4]
 80037a0:	4630      	mov	r0, r6
 80037a2:	4629      	mov	r1, r5
 80037a4:	e9cd 011e 	strd	r0, r1, [sp, #120]	; 0x78
 80037a8:	4630      	mov	r0, r6
 80037aa:	4629      	mov	r1, r5
 80037ac:	f003 fa92 	bl	8006cd4 <__fpclassifyd>
 80037b0:	2801      	cmp	r0, #1
 80037b2:	4630      	mov	r0, r6
 80037b4:	f040 854b 	bne.w	800424e <_svfprintf_r+0xeca>
 80037b8:	2200      	movs	r2, #0
 80037ba:	2300      	movs	r3, #0
 80037bc:	4629      	mov	r1, r5
 80037be:	f005 fa0b 	bl	8008bd8 <__aeabi_dcmplt>
 80037c2:	2800      	cmp	r0, #0
 80037c4:	f040 8765 	bne.w	8004692 <_svfprintf_r+0x130e>
 80037c8:	f89d 308b 	ldrb.w	r3, [sp, #139]	; 0x8b
 80037cc:	2403      	movs	r4, #3
 80037ce:	9e16      	ldr	r6, [sp, #88]	; 0x58
 80037d0:	940b      	str	r4, [sp, #44]	; 0x2c
 80037d2:	2500      	movs	r5, #0
 80037d4:	9c08      	ldr	r4, [sp, #32]
 80037d6:	f8dd 905c 	ldr.w	r9, [sp, #92]	; 0x5c
 80037da:	9510      	str	r5, [sp, #64]	; 0x40
 80037dc:	f024 0480 	bic.w	r4, r4, #128	; 0x80
 80037e0:	2f47      	cmp	r7, #71	; 0x47
 80037e2:	bfd8      	it	le
 80037e4:	464e      	movle	r6, r9
 80037e6:	2503      	movs	r5, #3
 80037e8:	9614      	str	r6, [sp, #80]	; 0x50
 80037ea:	2600      	movs	r6, #0
 80037ec:	9408      	str	r4, [sp, #32]
 80037ee:	950e      	str	r5, [sp, #56]	; 0x38
 80037f0:	961b      	str	r6, [sp, #108]	; 0x6c
 80037f2:	e762      	b.n	80036ba <_svfprintf_r+0x336>
 80037f4:	9f08      	ldr	r7, [sp, #32]
 80037f6:	f047 0708 	orr.w	r7, r7, #8
 80037fa:	9708      	str	r7, [sp, #32]
 80037fc:	781f      	ldrb	r7, [r3, #0]
 80037fe:	e635      	b.n	800346c <_svfprintf_r+0xe8>
 8003800:	9c08      	ldr	r4, [sp, #32]
 8003802:	930a      	str	r3, [sp, #40]	; 0x28
 8003804:	f044 0410 	orr.w	r4, r4, #16
 8003808:	9408      	str	r4, [sp, #32]
 800380a:	9d08      	ldr	r5, [sp, #32]
 800380c:	f015 0320 	ands.w	r3, r5, #32
 8003810:	f000 80bf 	beq.w	8003992 <_svfprintf_r+0x60e>
 8003814:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8003816:	2300      	movs	r3, #0
 8003818:	1df2      	adds	r2, r6, #7
 800381a:	f022 0207 	bic.w	r2, r2, #7
 800381e:	f102 0408 	add.w	r4, r2, #8
 8003822:	9411      	str	r4, [sp, #68]	; 0x44
 8003824:	e9d2 4500 	ldrd	r4, r5, [r2]
 8003828:	ea54 0605 	orrs.w	r6, r4, r5
 800382c:	bf0c      	ite	eq
 800382e:	2200      	moveq	r2, #0
 8003830:	2201      	movne	r2, #1
 8003832:	2100      	movs	r1, #0
 8003834:	f88d 108b 	strb.w	r1, [sp, #139]	; 0x8b
 8003838:	e700      	b.n	800363c <_svfprintf_r+0x2b8>
 800383a:	9c08      	ldr	r4, [sp, #32]
 800383c:	930a      	str	r3, [sp, #40]	; 0x28
 800383e:	f044 0410 	orr.w	r4, r4, #16
 8003842:	9408      	str	r4, [sp, #32]
 8003844:	9d08      	ldr	r5, [sp, #32]
 8003846:	06ad      	lsls	r5, r5, #26
 8003848:	f140 80e4 	bpl.w	8003a14 <_svfprintf_r+0x690>
 800384c:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800384e:	2301      	movs	r3, #1
 8003850:	1df2      	adds	r2, r6, #7
 8003852:	e7e2      	b.n	800381a <_svfprintf_r+0x496>
 8003854:	9d08      	ldr	r5, [sp, #32]
 8003856:	f649 14b8 	movw	r4, #39352	; 0x99b8
 800385a:	f6c0 0400 	movt	r4, #2048	; 0x800
 800385e:	930a      	str	r3, [sp, #40]	; 0x28
 8003860:	06a9      	lsls	r1, r5, #26
 8003862:	941a      	str	r4, [sp, #104]	; 0x68
 8003864:	f140 8109 	bpl.w	8003a7a <_svfprintf_r+0x6f6>
 8003868:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800386a:	1df3      	adds	r3, r6, #7
 800386c:	f023 0307 	bic.w	r3, r3, #7
 8003870:	f103 0408 	add.w	r4, r3, #8
 8003874:	9411      	str	r4, [sp, #68]	; 0x44
 8003876:	e9d3 4500 	ldrd	r4, r5, [r3]
 800387a:	9e08      	ldr	r6, [sp, #32]
 800387c:	07f6      	lsls	r6, r6, #31
 800387e:	f100 83db 	bmi.w	8004038 <_svfprintf_r+0xcb4>
 8003882:	ea54 0005 	orrs.w	r0, r4, r5
 8003886:	f04f 0302 	mov.w	r3, #2
 800388a:	bf0c      	ite	eq
 800388c:	2200      	moveq	r2, #0
 800388e:	2201      	movne	r2, #1
 8003890:	e7cf      	b.n	8003832 <_svfprintf_r+0x4ae>
 8003892:	9f08      	ldr	r7, [sp, #32]
 8003894:	f047 0720 	orr.w	r7, r7, #32
 8003898:	9708      	str	r7, [sp, #32]
 800389a:	781f      	ldrb	r7, [r3, #0]
 800389c:	e5e6      	b.n	800346c <_svfprintf_r+0xe8>
 800389e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80038a0:	2400      	movs	r4, #0
 80038a2:	f88d 408b 	strb.w	r4, [sp, #139]	; 0x8b
 80038a6:	930a      	str	r3, [sp, #40]	; 0x28
 80038a8:	6836      	ldr	r6, [r6, #0]
 80038aa:	9614      	str	r6, [sp, #80]	; 0x50
 80038ac:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80038ae:	1d35      	adds	r5, r6, #4
 80038b0:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80038b2:	2e00      	cmp	r6, #0
 80038b4:	f000 86dc 	beq.w	8004670 <_svfprintf_r+0x12ec>
 80038b8:	f1b9 0f00 	cmp.w	r9, #0
 80038bc:	9814      	ldr	r0, [sp, #80]	; 0x50
 80038be:	f2c0 86a8 	blt.w	8004612 <_svfprintf_r+0x128e>
 80038c2:	4621      	mov	r1, r4
 80038c4:	464a      	mov	r2, r9
 80038c6:	f002 fc75 	bl	80061b4 <memchr>
 80038ca:	2800      	cmp	r0, #0
 80038cc:	f000 8741 	beq.w	8004752 <_svfprintf_r+0x13ce>
 80038d0:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80038d2:	9410      	str	r4, [sp, #64]	; 0x40
 80038d4:	1b80      	subs	r0, r0, r6
 80038d6:	900e      	str	r0, [sp, #56]	; 0x38
 80038d8:	4548      	cmp	r0, r9
 80038da:	f340 85a2 	ble.w	8004422 <_svfprintf_r+0x109e>
 80038de:	9511      	str	r5, [sp, #68]	; 0x44
 80038e0:	ea29 74e9 	bic.w	r4, r9, r9, asr #31
 80038e4:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80038e6:	940b      	str	r4, [sp, #44]	; 0x2c
 80038e8:	f89d 308b 	ldrb.w	r3, [sp, #139]	; 0x8b
 80038ec:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80038f0:	951b      	str	r5, [sp, #108]	; 0x6c
 80038f2:	e6e2      	b.n	80036ba <_svfprintf_r+0x336>
 80038f4:	781f      	ldrb	r7, [r3, #0]
 80038f6:	461a      	mov	r2, r3
 80038f8:	2f6c      	cmp	r7, #108	; 0x6c
 80038fa:	f000 858a 	beq.w	8004412 <_svfprintf_r+0x108e>
 80038fe:	9e08      	ldr	r6, [sp, #32]
 8003900:	f046 0610 	orr.w	r6, r6, #16
 8003904:	9608      	str	r6, [sp, #32]
 8003906:	e5b1      	b.n	800346c <_svfprintf_r+0xe8>
 8003908:	930a      	str	r3, [sp, #40]	; 0x28
 800390a:	2f00      	cmp	r7, #0
 800390c:	f000 8574 	beq.w	80043f8 <_svfprintf_r+0x1074>
 8003910:	2401      	movs	r4, #1
 8003912:	2300      	movs	r3, #0
 8003914:	ad2e      	add	r5, sp, #184	; 0xb8
 8003916:	940b      	str	r4, [sp, #44]	; 0x2c
 8003918:	f88d 70b8 	strb.w	r7, [sp, #184]	; 0xb8
 800391c:	940e      	str	r4, [sp, #56]	; 0x38
 800391e:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
 8003922:	9514      	str	r5, [sp, #80]	; 0x50
 8003924:	2500      	movs	r5, #0
 8003926:	9510      	str	r5, [sp, #64]	; 0x40
 8003928:	951b      	str	r5, [sp, #108]	; 0x6c
 800392a:	e6cd      	b.n	80036c8 <_svfprintf_r+0x344>
 800392c:	9d08      	ldr	r5, [sp, #32]
 800392e:	930a      	str	r3, [sp, #40]	; 0x28
 8003930:	06ad      	lsls	r5, r5, #26
 8003932:	f53f ae6c 	bmi.w	800360e <_svfprintf_r+0x28a>
 8003936:	9d08      	ldr	r5, [sp, #32]
 8003938:	06ec      	lsls	r4, r5, #27
 800393a:	f140 84ad 	bpl.w	8004298 <_svfprintf_r+0xf14>
 800393e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8003940:	3604      	adds	r6, #4
 8003942:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8003946:	9611      	str	r6, [sp, #68]	; 0x44
 8003948:	461c      	mov	r4, r3
 800394a:	461a      	mov	r2, r3
 800394c:	17dd      	asrs	r5, r3, #31
 800394e:	462b      	mov	r3, r5
 8003950:	e668      	b.n	8003624 <_svfprintf_r+0x2a0>
 8003952:	9c08      	ldr	r4, [sp, #32]
 8003954:	f044 0440 	orr.w	r4, r4, #64	; 0x40
 8003958:	9408      	str	r4, [sp, #32]
 800395a:	781f      	ldrb	r7, [r3, #0]
 800395c:	e586      	b.n	800346c <_svfprintf_r+0xe8>
 800395e:	930a      	str	r3, [sp, #40]	; 0x28
 8003960:	f04f 0901 	mov.w	r9, #1
 8003964:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003966:	2200      	movs	r2, #0
 8003968:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800396a:	ae2e      	add	r6, sp, #184	; 0xb8
 800396c:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	3404      	adds	r4, #4
 8003974:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8003978:	9411      	str	r4, [sp, #68]	; 0x44
 800397a:	f88d 208b 	strb.w	r2, [sp, #139]	; 0x8b
 800397e:	9614      	str	r6, [sp, #80]	; 0x50
 8003980:	f88d 30b8 	strb.w	r3, [sp, #184]	; 0xb8
 8003984:	e7ce      	b.n	8003924 <_svfprintf_r+0x5a0>
 8003986:	9d08      	ldr	r5, [sp, #32]
 8003988:	930a      	str	r3, [sp, #40]	; 0x28
 800398a:	f015 0320 	ands.w	r3, r5, #32
 800398e:	f47f af41 	bne.w	8003814 <_svfprintf_r+0x490>
 8003992:	9c08      	ldr	r4, [sp, #32]
 8003994:	f014 0210 	ands.w	r2, r4, #16
 8003998:	f000 848c 	beq.w	80042b4 <_svfprintf_r+0xf30>
 800399c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800399e:	1d2e      	adds	r6, r5, #4
 80039a0:	9611      	str	r6, [sp, #68]	; 0x44
 80039a2:	682a      	ldr	r2, [r5, #0]
 80039a4:	4614      	mov	r4, r2
 80039a6:	3200      	adds	r2, #0
 80039a8:	bf18      	it	ne
 80039aa:	2201      	movne	r2, #1
 80039ac:	2500      	movs	r5, #0
 80039ae:	e740      	b.n	8003832 <_svfprintf_r+0x4ae>
 80039b0:	930a      	str	r3, [sp, #40]	; 0x28
 80039b2:	2778      	movs	r7, #120	; 0x78
 80039b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80039b6:	f649 16cc 	movw	r6, #39372	; 0x99cc
 80039ba:	9d08      	ldr	r5, [sp, #32]
 80039bc:	f6c0 0600 	movt	r6, #2048	; 0x800
 80039c0:	1d1c      	adds	r4, r3, #4
 80039c2:	9411      	str	r4, [sp, #68]	; 0x44
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	f045 0502 	orr.w	r5, r5, #2
 80039ca:	9508      	str	r5, [sp, #32]
 80039cc:	2500      	movs	r5, #0
 80039ce:	2330      	movs	r3, #48	; 0x30
 80039d0:	4614      	mov	r4, r2
 80039d2:	1b52      	subs	r2, r2, r5
 80039d4:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
 80039d8:	bf18      	it	ne
 80039da:	2201      	movne	r2, #1
 80039dc:	f88d 708d 	strb.w	r7, [sp, #141]	; 0x8d
 80039e0:	961a      	str	r6, [sp, #104]	; 0x68
 80039e2:	2302      	movs	r3, #2
 80039e4:	e725      	b.n	8003832 <_svfprintf_r+0x4ae>
 80039e6:	9f08      	ldr	r7, [sp, #32]
 80039e8:	930a      	str	r3, [sp, #40]	; 0x28
 80039ea:	06ba      	lsls	r2, r7, #26
 80039ec:	f140 8480 	bpl.w	80042f0 <_svfprintf_r+0xf6c>
 80039f0:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
 80039f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80039f6:	f109 0904 	add.w	r9, r9, #4
 80039fa:	f859 3c04 	ldr.w	r3, [r9, #-4]
 80039fe:	17d1      	asrs	r1, r2, #31
 8003a00:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
 8003a04:	601a      	str	r2, [r3, #0]
 8003a06:	6059      	str	r1, [r3, #4]
 8003a08:	e4fc      	b.n	8003404 <_svfprintf_r+0x80>
 8003a0a:	9d08      	ldr	r5, [sp, #32]
 8003a0c:	930a      	str	r3, [sp, #40]	; 0x28
 8003a0e:	06ad      	lsls	r5, r5, #26
 8003a10:	f53f af1c 	bmi.w	800384c <_svfprintf_r+0x4c8>
 8003a14:	9c08      	ldr	r4, [sp, #32]
 8003a16:	06e4      	lsls	r4, r4, #27
 8003a18:	f140 8485 	bpl.w	8004326 <_svfprintf_r+0xfa2>
 8003a1c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8003a1e:	1d2e      	adds	r6, r5, #4
 8003a20:	9611      	str	r6, [sp, #68]	; 0x44
 8003a22:	682a      	ldr	r2, [r5, #0]
 8003a24:	2301      	movs	r3, #1
 8003a26:	4614      	mov	r4, r2
 8003a28:	3200      	adds	r2, #0
 8003a2a:	bf18      	it	ne
 8003a2c:	2201      	movne	r2, #1
 8003a2e:	2500      	movs	r5, #0
 8003a30:	e6ff      	b.n	8003832 <_svfprintf_r+0x4ae>
 8003a32:	9f08      	ldr	r7, [sp, #32]
 8003a34:	f047 0701 	orr.w	r7, r7, #1
 8003a38:	9708      	str	r7, [sp, #32]
 8003a3a:	781f      	ldrb	r7, [r3, #0]
 8003a3c:	e516      	b.n	800346c <_svfprintf_r+0xe8>
 8003a3e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8003a40:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8003a42:	6824      	ldr	r4, [r4, #0]
 8003a44:	1d2a      	adds	r2, r5, #4
 8003a46:	2c00      	cmp	r4, #0
 8003a48:	940d      	str	r4, [sp, #52]	; 0x34
 8003a4a:	f6ff ad70 	blt.w	800352e <_svfprintf_r+0x1aa>
 8003a4e:	781f      	ldrb	r7, [r3, #0]
 8003a50:	9211      	str	r2, [sp, #68]	; 0x44
 8003a52:	e50b      	b.n	800346c <_svfprintf_r+0xe8>
 8003a54:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
 8003a58:	2a00      	cmp	r2, #0
 8003a5a:	f040 83f5 	bne.w	8004248 <_svfprintf_r+0xec4>
 8003a5e:	f88d 008b 	strb.w	r0, [sp, #139]	; 0x8b
 8003a62:	781f      	ldrb	r7, [r3, #0]
 8003a64:	e502      	b.n	800346c <_svfprintf_r+0xe8>
 8003a66:	9d08      	ldr	r5, [sp, #32]
 8003a68:	f649 16cc 	movw	r6, #39372	; 0x99cc
 8003a6c:	f6c0 0600 	movt	r6, #2048	; 0x800
 8003a70:	930a      	str	r3, [sp, #40]	; 0x28
 8003a72:	06a9      	lsls	r1, r5, #26
 8003a74:	961a      	str	r6, [sp, #104]	; 0x68
 8003a76:	f53f aef7 	bmi.w	8003868 <_svfprintf_r+0x4e4>
 8003a7a:	9d08      	ldr	r5, [sp, #32]
 8003a7c:	06ea      	lsls	r2, r5, #27
 8003a7e:	f140 842b 	bpl.w	80042d8 <_svfprintf_r+0xf54>
 8003a82:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8003a84:	2500      	movs	r5, #0
 8003a86:	3604      	adds	r6, #4
 8003a88:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8003a8c:	9611      	str	r6, [sp, #68]	; 0x44
 8003a8e:	461c      	mov	r4, r3
 8003a90:	e6f3      	b.n	800387a <_svfprintf_r+0x4f6>
 8003a92:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 8003a94:	f89d 308b 	ldrb.w	r3, [sp, #139]	; 0x8b
 8003a98:	b18b      	cbz	r3, 8003abe <_svfprintf_r+0x73a>
 8003a9a:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8003a9c:	f10d 038b 	add.w	r3, sp, #139	; 0x8b
 8003aa0:	f8c8 3000 	str.w	r3, [r8]
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	3401      	adds	r4, #1
 8003aa8:	f8c8 3004 	str.w	r3, [r8, #4]
 8003aac:	2c07      	cmp	r4, #7
 8003aae:	441d      	add	r5, r3
 8003ab0:	942c      	str	r4, [sp, #176]	; 0xb0
 8003ab2:	bfd8      	it	le
 8003ab4:	f108 0808 	addle.w	r8, r8, #8
 8003ab8:	952d      	str	r5, [sp, #180]	; 0xb4
 8003aba:	f300 81e6 	bgt.w	8003e8a <_svfprintf_r+0xb06>
 8003abe:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8003ac0:	b186      	cbz	r6, 8003ae4 <_svfprintf_r+0x760>
 8003ac2:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8003ac4:	ab23      	add	r3, sp, #140	; 0x8c
 8003ac6:	f8c8 3000 	str.w	r3, [r8]
 8003aca:	2302      	movs	r3, #2
 8003acc:	3401      	adds	r4, #1
 8003ace:	f8c8 3004 	str.w	r3, [r8, #4]
 8003ad2:	2c07      	cmp	r4, #7
 8003ad4:	441d      	add	r5, r3
 8003ad6:	942c      	str	r4, [sp, #176]	; 0xb0
 8003ad8:	bfd8      	it	le
 8003ada:	f108 0808 	addle.w	r8, r8, #8
 8003ade:	952d      	str	r5, [sp, #180]	; 0xb4
 8003ae0:	f300 81de 	bgt.w	8003ea0 <_svfprintf_r+0xb1c>
 8003ae4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003ae6:	2b80      	cmp	r3, #128	; 0x80
 8003ae8:	f000 8127 	beq.w	8003d3a <_svfprintf_r+0x9b6>
 8003aec:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8003aee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003af0:	ebc3 0904 	rsb	r9, r3, r4
 8003af4:	f1b9 0f00 	cmp.w	r9, #0
 8003af8:	dd42      	ble.n	8003b80 <_svfprintf_r+0x7fc>
 8003afa:	f1b9 0f10 	cmp.w	r9, #16
 8003afe:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8003b00:	bfd8      	it	le
 8003b02:	4e98      	ldrle	r6, [pc, #608]	; (8003d64 <_svfprintf_r+0x9e0>)
 8003b04:	dd27      	ble.n	8003b56 <_svfprintf_r+0x7d2>
 8003b06:	4e97      	ldr	r6, [pc, #604]	; (8003d64 <_svfprintf_r+0x9e0>)
 8003b08:	f04f 0a10 	mov.w	sl, #16
 8003b0c:	9710      	str	r7, [sp, #64]	; 0x40
 8003b0e:	4637      	mov	r7, r6
 8003b10:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8003b12:	e004      	b.n	8003b1e <_svfprintf_r+0x79a>
 8003b14:	f1a9 0910 	sub.w	r9, r9, #16
 8003b18:	f1b9 0f10 	cmp.w	r9, #16
 8003b1c:	dd19      	ble.n	8003b52 <_svfprintf_r+0x7ce>
 8003b1e:	3401      	adds	r4, #1
 8003b20:	3510      	adds	r5, #16
 8003b22:	2c07      	cmp	r4, #7
 8003b24:	e888 0480 	stmia.w	r8, {r7, sl}
 8003b28:	942c      	str	r4, [sp, #176]	; 0xb0
 8003b2a:	f108 0808 	add.w	r8, r8, #8
 8003b2e:	952d      	str	r5, [sp, #180]	; 0xb4
 8003b30:	ddf0      	ble.n	8003b14 <_svfprintf_r+0x790>
 8003b32:	4630      	mov	r0, r6
 8003b34:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003b36:	aa2b      	add	r2, sp, #172	; 0xac
 8003b38:	46d8      	mov	r8, fp
 8003b3a:	f003 fa25 	bl	8006f88 <__ssprint_r>
 8003b3e:	2800      	cmp	r0, #0
 8003b40:	f47f ad0f 	bne.w	8003562 <_svfprintf_r+0x1de>
 8003b44:	f1a9 0910 	sub.w	r9, r9, #16
 8003b48:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 8003b4a:	f1b9 0f10 	cmp.w	r9, #16
 8003b4e:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8003b50:	dce5      	bgt.n	8003b1e <_svfprintf_r+0x79a>
 8003b52:	463e      	mov	r6, r7
 8003b54:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8003b56:	3401      	adds	r4, #1
 8003b58:	e888 0240 	stmia.w	r8, {r6, r9}
 8003b5c:	2c07      	cmp	r4, #7
 8003b5e:	444d      	add	r5, r9
 8003b60:	942c      	str	r4, [sp, #176]	; 0xb0
 8003b62:	bfd8      	it	le
 8003b64:	f108 0808 	addle.w	r8, r8, #8
 8003b68:	952d      	str	r5, [sp, #180]	; 0xb4
 8003b6a:	dd09      	ble.n	8003b80 <_svfprintf_r+0x7fc>
 8003b6c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8003b6e:	aa2b      	add	r2, sp, #172	; 0xac
 8003b70:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003b72:	f003 fa09 	bl	8006f88 <__ssprint_r>
 8003b76:	2800      	cmp	r0, #0
 8003b78:	f47f acf3 	bne.w	8003562 <_svfprintf_r+0x1de>
 8003b7c:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 8003b7e:	46d8      	mov	r8, fp
 8003b80:	9e08      	ldr	r6, [sp, #32]
 8003b82:	05f1      	lsls	r1, r6, #23
 8003b84:	d462      	bmi.n	8003c4c <_svfprintf_r+0x8c8>
 8003b86:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8003b88:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8003b8a:	3401      	adds	r4, #1
 8003b8c:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8003b8e:	2c07      	cmp	r4, #7
 8003b90:	443d      	add	r5, r7
 8003b92:	e888 00c0 	stmia.w	r8, {r6, r7}
 8003b96:	952d      	str	r5, [sp, #180]	; 0xb4
 8003b98:	942c      	str	r4, [sp, #176]	; 0xb0
 8003b9a:	f300 8167 	bgt.w	8003e6c <_svfprintf_r+0xae8>
 8003b9e:	f108 0808 	add.w	r8, r8, #8
 8003ba2:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003ba6:	f019 0f04 	tst.w	r9, #4
 8003baa:	d03f      	beq.n	8003c2c <_svfprintf_r+0x8a8>
 8003bac:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8003bae:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8003bb0:	1be6      	subs	r6, r4, r7
 8003bb2:	2e00      	cmp	r6, #0
 8003bb4:	dd3a      	ble.n	8003c2c <_svfprintf_r+0x8a8>
 8003bb6:	2e10      	cmp	r6, #16
 8003bb8:	f249 7a18 	movw	sl, #38680	; 0x9718
 8003bbc:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8003bbe:	f6c0 0a00 	movt	sl, #2048	; 0x800
 8003bc2:	dd20      	ble.n	8003c06 <_svfprintf_r+0x882>
 8003bc4:	2710      	movs	r7, #16
 8003bc6:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 8003bca:	e002      	b.n	8003bd2 <_svfprintf_r+0x84e>
 8003bcc:	3e10      	subs	r6, #16
 8003bce:	2e10      	cmp	r6, #16
 8003bd0:	dd19      	ble.n	8003c06 <_svfprintf_r+0x882>
 8003bd2:	3401      	adds	r4, #1
 8003bd4:	3510      	adds	r5, #16
 8003bd6:	2c07      	cmp	r4, #7
 8003bd8:	f8c8 a000 	str.w	sl, [r8]
 8003bdc:	f8c8 7004 	str.w	r7, [r8, #4]
 8003be0:	f108 0808 	add.w	r8, r8, #8
 8003be4:	942c      	str	r4, [sp, #176]	; 0xb0
 8003be6:	952d      	str	r5, [sp, #180]	; 0xb4
 8003be8:	ddf0      	ble.n	8003bcc <_svfprintf_r+0x848>
 8003bea:	4648      	mov	r0, r9
 8003bec:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003bee:	aa2b      	add	r2, sp, #172	; 0xac
 8003bf0:	46d8      	mov	r8, fp
 8003bf2:	f003 f9c9 	bl	8006f88 <__ssprint_r>
 8003bf6:	2800      	cmp	r0, #0
 8003bf8:	f47f acb3 	bne.w	8003562 <_svfprintf_r+0x1de>
 8003bfc:	3e10      	subs	r6, #16
 8003bfe:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 8003c00:	2e10      	cmp	r6, #16
 8003c02:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8003c04:	dce5      	bgt.n	8003bd2 <_svfprintf_r+0x84e>
 8003c06:	3401      	adds	r4, #1
 8003c08:	f8c8 a000 	str.w	sl, [r8]
 8003c0c:	2c07      	cmp	r4, #7
 8003c0e:	f8c8 6004 	str.w	r6, [r8, #4]
 8003c12:	4435      	add	r5, r6
 8003c14:	942c      	str	r4, [sp, #176]	; 0xb0
 8003c16:	952d      	str	r5, [sp, #180]	; 0xb4
 8003c18:	dd08      	ble.n	8003c2c <_svfprintf_r+0x8a8>
 8003c1a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8003c1c:	aa2b      	add	r2, sp, #172	; 0xac
 8003c1e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003c20:	f003 f9b2 	bl	8006f88 <__ssprint_r>
 8003c24:	2800      	cmp	r0, #0
 8003c26:	f47f ac9c 	bne.w	8003562 <_svfprintf_r+0x1de>
 8003c2a:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 8003c2c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8003c2e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8003c30:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8003c32:	42b7      	cmp	r7, r6
 8003c34:	bfac      	ite	ge
 8003c36:	19e4      	addge	r4, r4, r7
 8003c38:	19a4      	addlt	r4, r4, r6
 8003c3a:	940c      	str	r4, [sp, #48]	; 0x30
 8003c3c:	2d00      	cmp	r5, #0
 8003c3e:	f47f ac88 	bne.w	8003552 <_svfprintf_r+0x1ce>
 8003c42:	2300      	movs	r3, #0
 8003c44:	46d8      	mov	r8, fp
 8003c46:	932c      	str	r3, [sp, #176]	; 0xb0
 8003c48:	f7ff bbdc 	b.w	8003404 <_svfprintf_r+0x80>
 8003c4c:	2f65      	cmp	r7, #101	; 0x65
 8003c4e:	f340 80c3 	ble.w	8003dd8 <_svfprintf_r+0xa54>
 8003c52:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
 8003c56:	2200      	movs	r2, #0
 8003c58:	2300      	movs	r3, #0
 8003c5a:	f004 ffb3 	bl	8008bc4 <__aeabi_dcmpeq>
 8003c5e:	2800      	cmp	r0, #0
 8003c60:	f000 8129 	beq.w	8003eb6 <_svfprintf_r+0xb32>
 8003c64:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8003c66:	f649 13e8 	movw	r3, #39400	; 0x99e8
 8003c6a:	f6c0 0300 	movt	r3, #2048	; 0x800
 8003c6e:	f8c8 3000 	str.w	r3, [r8]
 8003c72:	3401      	adds	r4, #1
 8003c74:	2301      	movs	r3, #1
 8003c76:	2c07      	cmp	r4, #7
 8003c78:	f8c8 3004 	str.w	r3, [r8, #4]
 8003c7c:	441d      	add	r5, r3
 8003c7e:	942c      	str	r4, [sp, #176]	; 0xb0
 8003c80:	952d      	str	r5, [sp, #180]	; 0xb4
 8003c82:	bfd8      	it	le
 8003c84:	f108 0808 	addle.w	r8, r8, #8
 8003c88:	f300 8355 	bgt.w	8004336 <_svfprintf_r+0xfb2>
 8003c8c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8003c8e:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8003c90:	42bb      	cmp	r3, r7
 8003c92:	db04      	blt.n	8003c9e <_svfprintf_r+0x91a>
 8003c94:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003c98:	f019 0f01 	tst.w	r9, #1
 8003c9c:	d081      	beq.n	8003ba2 <_svfprintf_r+0x81e>
 8003c9e:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8003ca0:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8003ca2:	3401      	adds	r4, #1
 8003ca4:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8003ca6:	2c07      	cmp	r4, #7
 8003ca8:	4435      	add	r5, r6
 8003caa:	f8c8 6004 	str.w	r6, [r8, #4]
 8003cae:	f8c8 7000 	str.w	r7, [r8]
 8003cb2:	bfd8      	it	le
 8003cb4:	f108 0808 	addle.w	r8, r8, #8
 8003cb8:	952d      	str	r5, [sp, #180]	; 0xb4
 8003cba:	942c      	str	r4, [sp, #176]	; 0xb0
 8003cbc:	f300 8448 	bgt.w	8004550 <_svfprintf_r+0x11cc>
 8003cc0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8003cc2:	1e67      	subs	r7, r4, #1
 8003cc4:	2f00      	cmp	r7, #0
 8003cc6:	f77f af6c 	ble.w	8003ba2 <_svfprintf_r+0x81e>
 8003cca:	2f10      	cmp	r7, #16
 8003ccc:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8003cce:	f340 81c6 	ble.w	800405e <_svfprintf_r+0xcda>
 8003cd2:	f04f 0910 	mov.w	r9, #16
 8003cd6:	4e23      	ldr	r6, [pc, #140]	; (8003d64 <_svfprintf_r+0x9e0>)
 8003cd8:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 8003cdc:	e003      	b.n	8003ce6 <_svfprintf_r+0x962>
 8003cde:	3f10      	subs	r7, #16
 8003ce0:	2f10      	cmp	r7, #16
 8003ce2:	f340 81bd 	ble.w	8004060 <_svfprintf_r+0xcdc>
 8003ce6:	3401      	adds	r4, #1
 8003ce8:	3510      	adds	r5, #16
 8003cea:	2c07      	cmp	r4, #7
 8003cec:	e888 0240 	stmia.w	r8, {r6, r9}
 8003cf0:	942c      	str	r4, [sp, #176]	; 0xb0
 8003cf2:	f108 0808 	add.w	r8, r8, #8
 8003cf6:	952d      	str	r5, [sp, #180]	; 0xb4
 8003cf8:	ddf1      	ble.n	8003cde <_svfprintf_r+0x95a>
 8003cfa:	4650      	mov	r0, sl
 8003cfc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003cfe:	aa2b      	add	r2, sp, #172	; 0xac
 8003d00:	46d8      	mov	r8, fp
 8003d02:	f003 f941 	bl	8006f88 <__ssprint_r>
 8003d06:	2800      	cmp	r0, #0
 8003d08:	f47f ac2b 	bne.w	8003562 <_svfprintf_r+0x1de>
 8003d0c:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 8003d0e:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8003d10:	e7e5      	b.n	8003cde <_svfprintf_r+0x95a>
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	f040 80b5 	bne.w	8003e82 <_svfprintf_r+0xafe>
 8003d18:	9c08      	ldr	r4, [sp, #32]
 8003d1a:	07e0      	lsls	r0, r4, #31
 8003d1c:	bf5c      	itt	pl
 8003d1e:	930e      	strpl	r3, [sp, #56]	; 0x38
 8003d20:	f8cd b050 	strpl.w	fp, [sp, #80]	; 0x50
 8003d24:	f57f acbc 	bpl.w	80036a0 <_svfprintf_r+0x31c>
 8003d28:	ab48      	add	r3, sp, #288	; 0x120
 8003d2a:	2230      	movs	r2, #48	; 0x30
 8003d2c:	f803 2d41 	strb.w	r2, [r3, #-65]!
 8003d30:	ebc3 050b 	rsb	r5, r3, fp
 8003d34:	9314      	str	r3, [sp, #80]	; 0x50
 8003d36:	950e      	str	r5, [sp, #56]	; 0x38
 8003d38:	e4b2      	b.n	80036a0 <_svfprintf_r+0x31c>
 8003d3a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8003d3c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8003d3e:	ebc6 0904 	rsb	r9, r6, r4
 8003d42:	f1b9 0f00 	cmp.w	r9, #0
 8003d46:	f77f aed1 	ble.w	8003aec <_svfprintf_r+0x768>
 8003d4a:	f1b9 0f10 	cmp.w	r9, #16
 8003d4e:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8003d50:	bfd8      	it	le
 8003d52:	4e04      	ldrle	r6, [pc, #16]	; (8003d64 <_svfprintf_r+0x9e0>)
 8003d54:	dd29      	ble.n	8003daa <_svfprintf_r+0xa26>
 8003d56:	4e03      	ldr	r6, [pc, #12]	; (8003d64 <_svfprintf_r+0x9e0>)
 8003d58:	f04f 0a10 	mov.w	sl, #16
 8003d5c:	9713      	str	r7, [sp, #76]	; 0x4c
 8003d5e:	4637      	mov	r7, r6
 8003d60:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8003d62:	e006      	b.n	8003d72 <_svfprintf_r+0x9ee>
 8003d64:	08009728 	.word	0x08009728
 8003d68:	f1a9 0910 	sub.w	r9, r9, #16
 8003d6c:	f1b9 0f10 	cmp.w	r9, #16
 8003d70:	dd19      	ble.n	8003da6 <_svfprintf_r+0xa22>
 8003d72:	3401      	adds	r4, #1
 8003d74:	3510      	adds	r5, #16
 8003d76:	2c07      	cmp	r4, #7
 8003d78:	e888 0480 	stmia.w	r8, {r7, sl}
 8003d7c:	942c      	str	r4, [sp, #176]	; 0xb0
 8003d7e:	f108 0808 	add.w	r8, r8, #8
 8003d82:	952d      	str	r5, [sp, #180]	; 0xb4
 8003d84:	ddf0      	ble.n	8003d68 <_svfprintf_r+0x9e4>
 8003d86:	4630      	mov	r0, r6
 8003d88:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003d8a:	aa2b      	add	r2, sp, #172	; 0xac
 8003d8c:	46d8      	mov	r8, fp
 8003d8e:	f003 f8fb 	bl	8006f88 <__ssprint_r>
 8003d92:	2800      	cmp	r0, #0
 8003d94:	f47f abe5 	bne.w	8003562 <_svfprintf_r+0x1de>
 8003d98:	f1a9 0910 	sub.w	r9, r9, #16
 8003d9c:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 8003d9e:	f1b9 0f10 	cmp.w	r9, #16
 8003da2:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8003da4:	dce5      	bgt.n	8003d72 <_svfprintf_r+0x9ee>
 8003da6:	463e      	mov	r6, r7
 8003da8:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8003daa:	3401      	adds	r4, #1
 8003dac:	e888 0240 	stmia.w	r8, {r6, r9}
 8003db0:	2c07      	cmp	r4, #7
 8003db2:	444d      	add	r5, r9
 8003db4:	942c      	str	r4, [sp, #176]	; 0xb0
 8003db6:	bfd8      	it	le
 8003db8:	f108 0808 	addle.w	r8, r8, #8
 8003dbc:	952d      	str	r5, [sp, #180]	; 0xb4
 8003dbe:	f77f ae95 	ble.w	8003aec <_svfprintf_r+0x768>
 8003dc2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8003dc4:	aa2b      	add	r2, sp, #172	; 0xac
 8003dc6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003dc8:	f003 f8de 	bl	8006f88 <__ssprint_r>
 8003dcc:	2800      	cmp	r0, #0
 8003dce:	f47f abc8 	bne.w	8003562 <_svfprintf_r+0x1de>
 8003dd2:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 8003dd4:	46d8      	mov	r8, fp
 8003dd6:	e689      	b.n	8003aec <_svfprintf_r+0x768>
 8003dd8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8003dda:	2c01      	cmp	r4, #1
 8003ddc:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8003dde:	f340 81cd 	ble.w	800417c <_svfprintf_r+0xdf8>
 8003de2:	3401      	adds	r4, #1
 8003de4:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8003de6:	3501      	adds	r5, #1
 8003de8:	2301      	movs	r3, #1
 8003dea:	2c07      	cmp	r4, #7
 8003dec:	f8c8 3004 	str.w	r3, [r8, #4]
 8003df0:	f8c8 6000 	str.w	r6, [r8]
 8003df4:	bfd8      	it	le
 8003df6:	f108 0808 	addle.w	r8, r8, #8
 8003dfa:	952d      	str	r5, [sp, #180]	; 0xb4
 8003dfc:	942c      	str	r4, [sp, #176]	; 0xb0
 8003dfe:	f300 81cf 	bgt.w	80041a0 <_svfprintf_r+0xe1c>
 8003e02:	3401      	adds	r4, #1
 8003e04:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8003e06:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8003e08:	2c07      	cmp	r4, #7
 8003e0a:	4435      	add	r5, r6
 8003e0c:	f8c8 6004 	str.w	r6, [r8, #4]
 8003e10:	f8c8 7000 	str.w	r7, [r8]
 8003e14:	bfd8      	it	le
 8003e16:	f108 0808 	addle.w	r8, r8, #8
 8003e1a:	942c      	str	r4, [sp, #176]	; 0xb0
 8003e1c:	952d      	str	r5, [sp, #180]	; 0xb4
 8003e1e:	f300 81cb 	bgt.w	80041b8 <_svfprintf_r+0xe34>
 8003e22:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
 8003e26:	2200      	movs	r2, #0
 8003e28:	2300      	movs	r3, #0
 8003e2a:	f004 fecb 	bl	8008bc4 <__aeabi_dcmpeq>
 8003e2e:	2800      	cmp	r0, #0
 8003e30:	f040 80c4 	bne.w	8003fbc <_svfprintf_r+0xc38>
 8003e34:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8003e36:	3401      	adds	r4, #1
 8003e38:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8003e3a:	1e7b      	subs	r3, r7, #1
 8003e3c:	f8c8 3004 	str.w	r3, [r8, #4]
 8003e40:	1c72      	adds	r2, r6, #1
 8003e42:	2c07      	cmp	r4, #7
 8003e44:	f8c8 2000 	str.w	r2, [r8]
 8003e48:	441d      	add	r5, r3
 8003e4a:	942c      	str	r4, [sp, #176]	; 0xb0
 8003e4c:	952d      	str	r5, [sp, #180]	; 0xb4
 8003e4e:	f300 80e7 	bgt.w	8004020 <_svfprintf_r+0xc9c>
 8003e52:	f108 0808 	add.w	r8, r8, #8
 8003e56:	3401      	adds	r4, #1
 8003e58:	9f20      	ldr	r7, [sp, #128]	; 0x80
 8003e5a:	2c07      	cmp	r4, #7
 8003e5c:	ab27      	add	r3, sp, #156	; 0x9c
 8003e5e:	443d      	add	r5, r7
 8003e60:	e888 0088 	stmia.w	r8, {r3, r7}
 8003e64:	952d      	str	r5, [sp, #180]	; 0xb4
 8003e66:	942c      	str	r4, [sp, #176]	; 0xb0
 8003e68:	f77f ae99 	ble.w	8003b9e <_svfprintf_r+0x81a>
 8003e6c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8003e6e:	aa2b      	add	r2, sp, #172	; 0xac
 8003e70:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003e72:	f003 f889 	bl	8006f88 <__ssprint_r>
 8003e76:	2800      	cmp	r0, #0
 8003e78:	f47f ab73 	bne.w	8003562 <_svfprintf_r+0x1de>
 8003e7c:	46d8      	mov	r8, fp
 8003e7e:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 8003e80:	e68f      	b.n	8003ba2 <_svfprintf_r+0x81e>
 8003e82:	920e      	str	r2, [sp, #56]	; 0x38
 8003e84:	f8cd b050 	str.w	fp, [sp, #80]	; 0x50
 8003e88:	e40a      	b.n	80036a0 <_svfprintf_r+0x31c>
 8003e8a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8003e8c:	aa2b      	add	r2, sp, #172	; 0xac
 8003e8e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003e90:	f003 f87a 	bl	8006f88 <__ssprint_r>
 8003e94:	2800      	cmp	r0, #0
 8003e96:	f47f ab64 	bne.w	8003562 <_svfprintf_r+0x1de>
 8003e9a:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 8003e9c:	46d8      	mov	r8, fp
 8003e9e:	e60e      	b.n	8003abe <_svfprintf_r+0x73a>
 8003ea0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8003ea2:	aa2b      	add	r2, sp, #172	; 0xac
 8003ea4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003ea6:	f003 f86f 	bl	8006f88 <__ssprint_r>
 8003eaa:	2800      	cmp	r0, #0
 8003eac:	f47f ab59 	bne.w	8003562 <_svfprintf_r+0x1de>
 8003eb0:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 8003eb2:	46d8      	mov	r8, fp
 8003eb4:	e616      	b.n	8003ae4 <_svfprintf_r+0x760>
 8003eb6:	9f24      	ldr	r7, [sp, #144]	; 0x90
 8003eb8:	2f00      	cmp	r7, #0
 8003eba:	f340 8247 	ble.w	800434c <_svfprintf_r+0xfc8>
 8003ebe:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8003ec0:	f8dd 906c 	ldr.w	r9, [sp, #108]	; 0x6c
 8003ec4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8003ec6:	454e      	cmp	r6, r9
 8003ec8:	bfa8      	it	ge
 8003eca:	464e      	movge	r6, r9
 8003ecc:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8003ece:	2e00      	cmp	r6, #0
 8003ed0:	eb04 0a07 	add.w	sl, r4, r7
 8003ed4:	dd0f      	ble.n	8003ef6 <_svfprintf_r+0xb72>
 8003ed6:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8003ed8:	19ad      	adds	r5, r5, r6
 8003eda:	9814      	ldr	r0, [sp, #80]	; 0x50
 8003edc:	3401      	adds	r4, #1
 8003ede:	f8c8 6004 	str.w	r6, [r8, #4]
 8003ee2:	2c07      	cmp	r4, #7
 8003ee4:	f8c8 0000 	str.w	r0, [r8]
 8003ee8:	bfd8      	it	le
 8003eea:	f108 0808 	addle.w	r8, r8, #8
 8003eee:	952d      	str	r5, [sp, #180]	; 0xb4
 8003ef0:	942c      	str	r4, [sp, #176]	; 0xb0
 8003ef2:	f300 839c 	bgt.w	800462e <_svfprintf_r+0x12aa>
 8003ef6:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8003ef8:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 8003efc:	1ba7      	subs	r7, r4, r6
 8003efe:	2f00      	cmp	r7, #0
 8003f00:	f340 80d3 	ble.w	80040aa <_svfprintf_r+0xd26>
 8003f04:	2f10      	cmp	r7, #16
 8003f06:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8003f08:	bfd8      	it	le
 8003f0a:	4eb1      	ldrle	r6, [pc, #708]	; (80041d0 <_svfprintf_r+0xe4c>)
 8003f0c:	f340 80b8 	ble.w	8004080 <_svfprintf_r+0xcfc>
 8003f10:	4eaf      	ldr	r6, [pc, #700]	; (80041d0 <_svfprintf_r+0xe4c>)
 8003f12:	f04f 0910 	mov.w	r9, #16
 8003f16:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8003f1a:	46ba      	mov	sl, r7
 8003f1c:	4637      	mov	r7, r6
 8003f1e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8003f20:	e005      	b.n	8003f2e <_svfprintf_r+0xbaa>
 8003f22:	f1aa 0a10 	sub.w	sl, sl, #16
 8003f26:	f1ba 0f10 	cmp.w	sl, #16
 8003f2a:	f340 80a5 	ble.w	8004078 <_svfprintf_r+0xcf4>
 8003f2e:	3401      	adds	r4, #1
 8003f30:	3510      	adds	r5, #16
 8003f32:	2c07      	cmp	r4, #7
 8003f34:	e888 0280 	stmia.w	r8, {r7, r9}
 8003f38:	942c      	str	r4, [sp, #176]	; 0xb0
 8003f3a:	f108 0808 	add.w	r8, r8, #8
 8003f3e:	952d      	str	r5, [sp, #180]	; 0xb4
 8003f40:	ddef      	ble.n	8003f22 <_svfprintf_r+0xb9e>
 8003f42:	4630      	mov	r0, r6
 8003f44:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003f46:	aa2b      	add	r2, sp, #172	; 0xac
 8003f48:	46d8      	mov	r8, fp
 8003f4a:	f003 f81d 	bl	8006f88 <__ssprint_r>
 8003f4e:	2800      	cmp	r0, #0
 8003f50:	f47f ab07 	bne.w	8003562 <_svfprintf_r+0x1de>
 8003f54:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 8003f56:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8003f58:	e7e3      	b.n	8003f22 <_svfprintf_r+0xb9e>
 8003f5a:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8003f5c:	f10d 01df 	add.w	r1, sp, #223	; 0xdf
 8003f60:	46c2      	mov	sl, r8
 8003f62:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
 8003f66:	f04f 080f 	mov.w	r8, #15
 8003f6a:	0923      	lsrs	r3, r4, #4
 8003f6c:	ea04 0208 	and.w	r2, r4, r8
 8003f70:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 8003f74:	18b2      	adds	r2, r6, r2
 8003f76:	ea4f 1c15 	mov.w	ip, r5, lsr #4
 8003f7a:	461c      	mov	r4, r3
 8003f7c:	4665      	mov	r5, ip
 8003f7e:	7812      	ldrb	r2, [r2, #0]
 8003f80:	4608      	mov	r0, r1
 8003f82:	3901      	subs	r1, #1
 8003f84:	ea54 0905 	orrs.w	r9, r4, r5
 8003f88:	7002      	strb	r2, [r0, #0]
 8003f8a:	d1ec      	bne.n	8003f66 <_svfprintf_r+0xbe2>
 8003f8c:	ebc0 030b 	rsb	r3, r0, fp
 8003f90:	9014      	str	r0, [sp, #80]	; 0x50
 8003f92:	46d0      	mov	r8, sl
 8003f94:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8003f98:	930e      	str	r3, [sp, #56]	; 0x38
 8003f9a:	f7ff bb81 	b.w	80036a0 <_svfprintf_r+0x31c>
 8003f9e:	2d00      	cmp	r5, #0
 8003fa0:	bf08      	it	eq
 8003fa2:	2c0a      	cmpeq	r4, #10
 8003fa4:	f080 8116 	bcs.w	80041d4 <_svfprintf_r+0xe50>
 8003fa8:	ab48      	add	r3, sp, #288	; 0x120
 8003faa:	3430      	adds	r4, #48	; 0x30
 8003fac:	f803 4d41 	strb.w	r4, [r3, #-65]!
 8003fb0:	ebc3 050b 	rsb	r5, r3, fp
 8003fb4:	9314      	str	r3, [sp, #80]	; 0x50
 8003fb6:	950e      	str	r5, [sp, #56]	; 0x38
 8003fb8:	f7ff bb72 	b.w	80036a0 <_svfprintf_r+0x31c>
 8003fbc:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8003fbe:	1e77      	subs	r7, r6, #1
 8003fc0:	2f00      	cmp	r7, #0
 8003fc2:	f77f af48 	ble.w	8003e56 <_svfprintf_r+0xad2>
 8003fc6:	2f10      	cmp	r7, #16
 8003fc8:	4e81      	ldr	r6, [pc, #516]	; (80041d0 <_svfprintf_r+0xe4c>)
 8003fca:	bfc4      	itt	gt
 8003fcc:	f04f 0910 	movgt.w	r9, #16
 8003fd0:	f8dd a03c 	ldrgt.w	sl, [sp, #60]	; 0x3c
 8003fd4:	dc03      	bgt.n	8003fde <_svfprintf_r+0xc5a>
 8003fd6:	e01a      	b.n	800400e <_svfprintf_r+0xc8a>
 8003fd8:	3f10      	subs	r7, #16
 8003fda:	2f10      	cmp	r7, #16
 8003fdc:	dd17      	ble.n	800400e <_svfprintf_r+0xc8a>
 8003fde:	3401      	adds	r4, #1
 8003fe0:	3510      	adds	r5, #16
 8003fe2:	2c07      	cmp	r4, #7
 8003fe4:	e888 0240 	stmia.w	r8, {r6, r9}
 8003fe8:	942c      	str	r4, [sp, #176]	; 0xb0
 8003fea:	f108 0808 	add.w	r8, r8, #8
 8003fee:	952d      	str	r5, [sp, #180]	; 0xb4
 8003ff0:	ddf2      	ble.n	8003fd8 <_svfprintf_r+0xc54>
 8003ff2:	4650      	mov	r0, sl
 8003ff4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003ff6:	aa2b      	add	r2, sp, #172	; 0xac
 8003ff8:	46d8      	mov	r8, fp
 8003ffa:	f002 ffc5 	bl	8006f88 <__ssprint_r>
 8003ffe:	2800      	cmp	r0, #0
 8004000:	f47f aaaf 	bne.w	8003562 <_svfprintf_r+0x1de>
 8004004:	3f10      	subs	r7, #16
 8004006:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 8004008:	2f10      	cmp	r7, #16
 800400a:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 800400c:	dce7      	bgt.n	8003fde <_svfprintf_r+0xc5a>
 800400e:	3401      	adds	r4, #1
 8004010:	e888 00c0 	stmia.w	r8, {r6, r7}
 8004014:	2c07      	cmp	r4, #7
 8004016:	443d      	add	r5, r7
 8004018:	942c      	str	r4, [sp, #176]	; 0xb0
 800401a:	952d      	str	r5, [sp, #180]	; 0xb4
 800401c:	f77f af19 	ble.w	8003e52 <_svfprintf_r+0xace>
 8004020:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004022:	aa2b      	add	r2, sp, #172	; 0xac
 8004024:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004026:	f002 ffaf 	bl	8006f88 <__ssprint_r>
 800402a:	2800      	cmp	r0, #0
 800402c:	f47f aa99 	bne.w	8003562 <_svfprintf_r+0x1de>
 8004030:	46d8      	mov	r8, fp
 8004032:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 8004034:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8004036:	e70e      	b.n	8003e56 <_svfprintf_r+0xad2>
 8004038:	2200      	movs	r2, #0
 800403a:	2302      	movs	r3, #2
 800403c:	ea54 0105 	orrs.w	r1, r4, r5
 8004040:	f43f abf7 	beq.w	8003832 <_svfprintf_r+0x4ae>
 8004044:	9e08      	ldr	r6, [sp, #32]
 8004046:	2330      	movs	r3, #48	; 0x30
 8004048:	f88d 708d 	strb.w	r7, [sp, #141]	; 0x8d
 800404c:	2201      	movs	r2, #1
 800404e:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
 8004052:	f046 0602 	orr.w	r6, r6, #2
 8004056:	2302      	movs	r3, #2
 8004058:	9608      	str	r6, [sp, #32]
 800405a:	f7ff bbea 	b.w	8003832 <_svfprintf_r+0x4ae>
 800405e:	4e5c      	ldr	r6, [pc, #368]	; (80041d0 <_svfprintf_r+0xe4c>)
 8004060:	3401      	adds	r4, #1
 8004062:	f8c8 6000 	str.w	r6, [r8]
 8004066:	2c07      	cmp	r4, #7
 8004068:	f8c8 7004 	str.w	r7, [r8, #4]
 800406c:	443d      	add	r5, r7
 800406e:	942c      	str	r4, [sp, #176]	; 0xb0
 8004070:	952d      	str	r5, [sp, #180]	; 0xb4
 8004072:	f77f ad94 	ble.w	8003b9e <_svfprintf_r+0x81a>
 8004076:	e6f9      	b.n	8003e6c <_svfprintf_r+0xae8>
 8004078:	463e      	mov	r6, r7
 800407a:	4657      	mov	r7, sl
 800407c:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 8004080:	3401      	adds	r4, #1
 8004082:	e888 00c0 	stmia.w	r8, {r6, r7}
 8004086:	2c07      	cmp	r4, #7
 8004088:	443d      	add	r5, r7
 800408a:	942c      	str	r4, [sp, #176]	; 0xb0
 800408c:	bfd8      	it	le
 800408e:	f108 0808 	addle.w	r8, r8, #8
 8004092:	952d      	str	r5, [sp, #180]	; 0xb4
 8004094:	dd09      	ble.n	80040aa <_svfprintf_r+0xd26>
 8004096:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004098:	aa2b      	add	r2, sp, #172	; 0xac
 800409a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800409c:	f002 ff74 	bl	8006f88 <__ssprint_r>
 80040a0:	2800      	cmp	r0, #0
 80040a2:	f47f aa5e 	bne.w	8003562 <_svfprintf_r+0x1de>
 80040a6:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 80040a8:	46d8      	mov	r8, fp
 80040aa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80040ac:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80040ae:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80040b0:	f8dd 906c 	ldr.w	r9, [sp, #108]	; 0x6c
 80040b4:	42a3      	cmp	r3, r4
 80040b6:	eb06 0709 	add.w	r7, r6, r9
 80040ba:	db42      	blt.n	8004142 <_svfprintf_r+0xdbe>
 80040bc:	9e08      	ldr	r6, [sp, #32]
 80040be:	07f2      	lsls	r2, r6, #31
 80040c0:	d43f      	bmi.n	8004142 <_svfprintf_r+0xdbe>
 80040c2:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80040c4:	ebc7 060a 	rsb	r6, r7, sl
 80040c8:	1ae3      	subs	r3, r4, r3
 80040ca:	42b3      	cmp	r3, r6
 80040cc:	bfb8      	it	lt
 80040ce:	461e      	movlt	r6, r3
 80040d0:	2e00      	cmp	r6, #0
 80040d2:	dd0e      	ble.n	80040f2 <_svfprintf_r+0xd6e>
 80040d4:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 80040d6:	19ad      	adds	r5, r5, r6
 80040d8:	f8c8 7000 	str.w	r7, [r8]
 80040dc:	3401      	adds	r4, #1
 80040de:	f8c8 6004 	str.w	r6, [r8, #4]
 80040e2:	2c07      	cmp	r4, #7
 80040e4:	952d      	str	r5, [sp, #180]	; 0xb4
 80040e6:	942c      	str	r4, [sp, #176]	; 0xb0
 80040e8:	bfd8      	it	le
 80040ea:	f108 0808 	addle.w	r8, r8, #8
 80040ee:	f300 82a9 	bgt.w	8004644 <_svfprintf_r+0x12c0>
 80040f2:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 80040f6:	1b9f      	subs	r7, r3, r6
 80040f8:	2f00      	cmp	r7, #0
 80040fa:	f77f ad52 	ble.w	8003ba2 <_svfprintf_r+0x81e>
 80040fe:	2f10      	cmp	r7, #16
 8004100:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8004102:	ddac      	ble.n	800405e <_svfprintf_r+0xcda>
 8004104:	f04f 0910 	mov.w	r9, #16
 8004108:	4e31      	ldr	r6, [pc, #196]	; (80041d0 <_svfprintf_r+0xe4c>)
 800410a:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 800410e:	e002      	b.n	8004116 <_svfprintf_r+0xd92>
 8004110:	3f10      	subs	r7, #16
 8004112:	2f10      	cmp	r7, #16
 8004114:	dda4      	ble.n	8004060 <_svfprintf_r+0xcdc>
 8004116:	3401      	adds	r4, #1
 8004118:	3510      	adds	r5, #16
 800411a:	2c07      	cmp	r4, #7
 800411c:	e888 0240 	stmia.w	r8, {r6, r9}
 8004120:	942c      	str	r4, [sp, #176]	; 0xb0
 8004122:	f108 0808 	add.w	r8, r8, #8
 8004126:	952d      	str	r5, [sp, #180]	; 0xb4
 8004128:	ddf2      	ble.n	8004110 <_svfprintf_r+0xd8c>
 800412a:	4650      	mov	r0, sl
 800412c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800412e:	aa2b      	add	r2, sp, #172	; 0xac
 8004130:	46d8      	mov	r8, fp
 8004132:	f002 ff29 	bl	8006f88 <__ssprint_r>
 8004136:	2800      	cmp	r0, #0
 8004138:	f47f aa13 	bne.w	8003562 <_svfprintf_r+0x1de>
 800413c:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 800413e:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8004140:	e7e6      	b.n	8004110 <_svfprintf_r+0xd8c>
 8004142:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8004144:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8004146:	19ad      	adds	r5, r5, r6
 8004148:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800414a:	3401      	adds	r4, #1
 800414c:	2c07      	cmp	r4, #7
 800414e:	f8c8 6000 	str.w	r6, [r8]
 8004152:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8004154:	f8c8 6004 	str.w	r6, [r8, #4]
 8004158:	bfd8      	it	le
 800415a:	f108 0808 	addle.w	r8, r8, #8
 800415e:	952d      	str	r5, [sp, #180]	; 0xb4
 8004160:	942c      	str	r4, [sp, #176]	; 0xb0
 8004162:	ddae      	ble.n	80040c2 <_svfprintf_r+0xd3e>
 8004164:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004166:	aa2b      	add	r2, sp, #172	; 0xac
 8004168:	9909      	ldr	r1, [sp, #36]	; 0x24
 800416a:	f002 ff0d 	bl	8006f88 <__ssprint_r>
 800416e:	2800      	cmp	r0, #0
 8004170:	f47f a9f7 	bne.w	8003562 <_svfprintf_r+0x1de>
 8004174:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004176:	46d8      	mov	r8, fp
 8004178:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 800417a:	e7a2      	b.n	80040c2 <_svfprintf_r+0xd3e>
 800417c:	9e08      	ldr	r6, [sp, #32]
 800417e:	07f3      	lsls	r3, r6, #31
 8004180:	f53f ae2f 	bmi.w	8003de2 <_svfprintf_r+0xa5e>
 8004184:	3401      	adds	r4, #1
 8004186:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8004188:	3501      	adds	r5, #1
 800418a:	2301      	movs	r3, #1
 800418c:	2c07      	cmp	r4, #7
 800418e:	f8c8 3004 	str.w	r3, [r8, #4]
 8004192:	f8c8 6000 	str.w	r6, [r8]
 8004196:	952d      	str	r5, [sp, #180]	; 0xb4
 8004198:	942c      	str	r4, [sp, #176]	; 0xb0
 800419a:	f77f ae5a 	ble.w	8003e52 <_svfprintf_r+0xace>
 800419e:	e73f      	b.n	8004020 <_svfprintf_r+0xc9c>
 80041a0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80041a2:	aa2b      	add	r2, sp, #172	; 0xac
 80041a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80041a6:	f002 feef 	bl	8006f88 <__ssprint_r>
 80041aa:	2800      	cmp	r0, #0
 80041ac:	f47f a9d9 	bne.w	8003562 <_svfprintf_r+0x1de>
 80041b0:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 80041b2:	46d8      	mov	r8, fp
 80041b4:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 80041b6:	e624      	b.n	8003e02 <_svfprintf_r+0xa7e>
 80041b8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80041ba:	aa2b      	add	r2, sp, #172	; 0xac
 80041bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80041be:	f002 fee3 	bl	8006f88 <__ssprint_r>
 80041c2:	2800      	cmp	r0, #0
 80041c4:	f47f a9cd 	bne.w	8003562 <_svfprintf_r+0x1de>
 80041c8:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 80041ca:	46d8      	mov	r8, fp
 80041cc:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 80041ce:	e628      	b.n	8003e22 <_svfprintf_r+0xa9e>
 80041d0:	08009728 	.word	0x08009728
 80041d4:	f10d 06df 	add.w	r6, sp, #223	; 0xdf
 80041d8:	4620      	mov	r0, r4
 80041da:	4629      	mov	r1, r5
 80041dc:	220a      	movs	r2, #10
 80041de:	2300      	movs	r3, #0
 80041e0:	f004 fd4a 	bl	8008c78 <__aeabi_uldivmod>
 80041e4:	46b2      	mov	sl, r6
 80041e6:	4620      	mov	r0, r4
 80041e8:	4629      	mov	r1, r5
 80041ea:	2300      	movs	r3, #0
 80041ec:	3e01      	subs	r6, #1
 80041ee:	f102 0430 	add.w	r4, r2, #48	; 0x30
 80041f2:	220a      	movs	r2, #10
 80041f4:	f88a 4000 	strb.w	r4, [sl]
 80041f8:	f004 fd3e 	bl	8008c78 <__aeabi_uldivmod>
 80041fc:	4604      	mov	r4, r0
 80041fe:	460d      	mov	r5, r1
 8004200:	ea54 0005 	orrs.w	r0, r4, r5
 8004204:	d1e8      	bne.n	80041d8 <_svfprintf_r+0xe54>
 8004206:	ebca 030b 	rsb	r3, sl, fp
 800420a:	f8cd a050 	str.w	sl, [sp, #80]	; 0x50
 800420e:	930e      	str	r3, [sp, #56]	; 0x38
 8004210:	f7ff ba46 	b.w	80036a0 <_svfprintf_r+0x31c>
 8004214:	2a30      	cmp	r2, #48	; 0x30
 8004216:	f000 8223 	beq.w	8004660 <_svfprintf_r+0x12dc>
 800421a:	ebc0 040b 	rsb	r4, r0, fp
 800421e:	2230      	movs	r2, #48	; 0x30
 8004220:	9014      	str	r0, [sp, #80]	; 0x50
 8004222:	940e      	str	r4, [sp, #56]	; 0x38
 8004224:	f803 2c01 	strb.w	r2, [r3, #-1]
 8004228:	f7ff ba3a 	b.w	80036a0 <_svfprintf_r+0x31c>
 800422c:	4264      	negs	r4, r4
 800422e:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8004232:	232d      	movs	r3, #45	; 0x2d
 8004234:	ea54 0105 	orrs.w	r1, r4, r5
 8004238:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
 800423c:	bf0c      	ite	eq
 800423e:	2200      	moveq	r2, #0
 8004240:	2201      	movne	r2, #1
 8004242:	2301      	movs	r3, #1
 8004244:	f7ff b9fa 	b.w	800363c <_svfprintf_r+0x2b8>
 8004248:	781f      	ldrb	r7, [r3, #0]
 800424a:	f7ff b90f 	b.w	800346c <_svfprintf_r+0xe8>
 800424e:	4629      	mov	r1, r5
 8004250:	f002 fd40 	bl	8006cd4 <__fpclassifyd>
 8004254:	2800      	cmp	r0, #0
 8004256:	f040 80ff 	bne.w	8004458 <_svfprintf_r+0x10d4>
 800425a:	9e08      	ldr	r6, [sp, #32]
 800425c:	f04f 0903 	mov.w	r9, #3
 8004260:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8004262:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8004264:	f026 0680 	bic.w	r6, r6, #128	; 0x80
 8004268:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
 800426c:	2f47      	cmp	r7, #71	; 0x47
 800426e:	bfd8      	it	le
 8004270:	462c      	movle	r4, r5
 8004272:	9010      	str	r0, [sp, #64]	; 0x40
 8004274:	9414      	str	r4, [sp, #80]	; 0x50
 8004276:	9608      	str	r6, [sp, #32]
 8004278:	f89d 308b 	ldrb.w	r3, [sp, #139]	; 0x8b
 800427c:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8004280:	901b      	str	r0, [sp, #108]	; 0x6c
 8004282:	f7ff ba1a 	b.w	80036ba <_svfprintf_r+0x336>
 8004286:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8004288:	1de1      	adds	r1, r4, #7
 800428a:	f021 0107 	bic.w	r1, r1, #7
 800428e:	f101 0508 	add.w	r5, r1, #8
 8004292:	9511      	str	r5, [sp, #68]	; 0x44
 8004294:	f7ff ba82 	b.w	800379c <_svfprintf_r+0x418>
 8004298:	9c08      	ldr	r4, [sp, #32]
 800429a:	0660      	lsls	r0, r4, #25
 800429c:	f140 814e 	bpl.w	800453c <_svfprintf_r+0x11b8>
 80042a0:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80042a2:	3604      	adds	r6, #4
 80042a4:	f936 4c04 	ldrsh.w	r4, [r6, #-4]
 80042a8:	9611      	str	r6, [sp, #68]	; 0x44
 80042aa:	4622      	mov	r2, r4
 80042ac:	17e5      	asrs	r5, r4, #31
 80042ae:	462b      	mov	r3, r5
 80042b0:	f7ff b9b8 	b.w	8003624 <_svfprintf_r+0x2a0>
 80042b4:	9c08      	ldr	r4, [sp, #32]
 80042b6:	f014 0340 	ands.w	r3, r4, #64	; 0x40
 80042ba:	f000 80c2 	beq.w	8004442 <_svfprintf_r+0x10be>
 80042be:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80042c0:	4613      	mov	r3, r2
 80042c2:	8834      	ldrh	r4, [r6, #0]
 80042c4:	2500      	movs	r5, #0
 80042c6:	3604      	adds	r6, #4
 80042c8:	ea54 0005 	orrs.w	r0, r4, r5
 80042cc:	9611      	str	r6, [sp, #68]	; 0x44
 80042ce:	bf0c      	ite	eq
 80042d0:	2200      	moveq	r2, #0
 80042d2:	2201      	movne	r2, #1
 80042d4:	f7ff baad 	b.w	8003832 <_svfprintf_r+0x4ae>
 80042d8:	9c08      	ldr	r4, [sp, #32]
 80042da:	0663      	lsls	r3, r4, #25
 80042dc:	f140 8144 	bpl.w	8004568 <_svfprintf_r+0x11e4>
 80042e0:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80042e2:	2500      	movs	r5, #0
 80042e4:	3604      	adds	r6, #4
 80042e6:	f836 4c04 	ldrh.w	r4, [r6, #-4]
 80042ea:	9611      	str	r6, [sp, #68]	; 0x44
 80042ec:	f7ff bac5 	b.w	800387a <_svfprintf_r+0x4f6>
 80042f0:	9c08      	ldr	r4, [sp, #32]
 80042f2:	06e3      	lsls	r3, r4, #27
 80042f4:	d40e      	bmi.n	8004314 <_svfprintf_r+0xf90>
 80042f6:	9f08      	ldr	r7, [sp, #32]
 80042f8:	067e      	lsls	r6, r7, #25
 80042fa:	d50b      	bpl.n	8004314 <_svfprintf_r+0xf90>
 80042fc:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
 8004300:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8004302:	f109 0904 	add.w	r9, r9, #4
 8004306:	f859 3c04 	ldr.w	r3, [r9, #-4]
 800430a:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
 800430e:	801c      	strh	r4, [r3, #0]
 8004310:	f7ff b878 	b.w	8003404 <_svfprintf_r+0x80>
 8004314:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8004316:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8004318:	3504      	adds	r5, #4
 800431a:	f855 3c04 	ldr.w	r3, [r5, #-4]
 800431e:	9511      	str	r5, [sp, #68]	; 0x44
 8004320:	601e      	str	r6, [r3, #0]
 8004322:	f7ff b86f 	b.w	8003404 <_svfprintf_r+0x80>
 8004326:	9c08      	ldr	r4, [sp, #32]
 8004328:	0660      	lsls	r0, r4, #25
 800432a:	f140 8084 	bpl.w	8004436 <_svfprintf_r+0x10b2>
 800432e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8004330:	2301      	movs	r3, #1
 8004332:	8834      	ldrh	r4, [r6, #0]
 8004334:	e7c6      	b.n	80042c4 <_svfprintf_r+0xf40>
 8004336:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004338:	aa2b      	add	r2, sp, #172	; 0xac
 800433a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800433c:	f002 fe24 	bl	8006f88 <__ssprint_r>
 8004340:	2800      	cmp	r0, #0
 8004342:	f47f a90e 	bne.w	8003562 <_svfprintf_r+0x1de>
 8004346:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 8004348:	46d8      	mov	r8, fp
 800434a:	e49f      	b.n	8003c8c <_svfprintf_r+0x908>
 800434c:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 800434e:	f649 13e8 	movw	r3, #39400	; 0x99e8
 8004352:	f6c0 0300 	movt	r3, #2048	; 0x800
 8004356:	f8c8 3000 	str.w	r3, [r8]
 800435a:	3401      	adds	r4, #1
 800435c:	2301      	movs	r3, #1
 800435e:	2c07      	cmp	r4, #7
 8004360:	f8c8 3004 	str.w	r3, [r8, #4]
 8004364:	441d      	add	r5, r3
 8004366:	942c      	str	r4, [sp, #176]	; 0xb0
 8004368:	952d      	str	r5, [sp, #180]	; 0xb4
 800436a:	bfd8      	it	le
 800436c:	f108 0808 	addle.w	r8, r8, #8
 8004370:	f300 8112 	bgt.w	8004598 <_svfprintf_r+0x1214>
 8004374:	b93f      	cbnz	r7, 8004386 <_svfprintf_r+0x1002>
 8004376:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8004378:	b92e      	cbnz	r6, 8004386 <_svfprintf_r+0x1002>
 800437a:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800437e:	f019 0f01 	tst.w	r9, #1
 8004382:	f43f ac0e 	beq.w	8003ba2 <_svfprintf_r+0x81e>
 8004386:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8004388:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 800438a:	19ad      	adds	r5, r5, r6
 800438c:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800438e:	3401      	adds	r4, #1
 8004390:	2c07      	cmp	r4, #7
 8004392:	f8c8 6000 	str.w	r6, [r8]
 8004396:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8004398:	f8c8 6004 	str.w	r6, [r8, #4]
 800439c:	bfd8      	it	le
 800439e:	f108 0808 	addle.w	r8, r8, #8
 80043a2:	952d      	str	r5, [sp, #180]	; 0xb4
 80043a4:	942c      	str	r4, [sp, #176]	; 0xb0
 80043a6:	f300 8122 	bgt.w	80045ee <_svfprintf_r+0x126a>
 80043aa:	427f      	negs	r7, r7
 80043ac:	2f00      	cmp	r7, #0
 80043ae:	f340 8118 	ble.w	80045e2 <_svfprintf_r+0x125e>
 80043b2:	2f10      	cmp	r7, #16
 80043b4:	4ead      	ldr	r6, [pc, #692]	; (800466c <_svfprintf_r+0x12e8>)
 80043b6:	bfc4      	itt	gt
 80043b8:	f04f 0910 	movgt.w	r9, #16
 80043bc:	f8dd a03c 	ldrgt.w	sl, [sp, #60]	; 0x3c
 80043c0:	dc04      	bgt.n	80043cc <_svfprintf_r+0x1048>
 80043c2:	e0f8      	b.n	80045b6 <_svfprintf_r+0x1232>
 80043c4:	3f10      	subs	r7, #16
 80043c6:	2f10      	cmp	r7, #16
 80043c8:	f340 80f5 	ble.w	80045b6 <_svfprintf_r+0x1232>
 80043cc:	3401      	adds	r4, #1
 80043ce:	3510      	adds	r5, #16
 80043d0:	2c07      	cmp	r4, #7
 80043d2:	e888 0240 	stmia.w	r8, {r6, r9}
 80043d6:	942c      	str	r4, [sp, #176]	; 0xb0
 80043d8:	f108 0808 	add.w	r8, r8, #8
 80043dc:	952d      	str	r5, [sp, #180]	; 0xb4
 80043de:	ddf1      	ble.n	80043c4 <_svfprintf_r+0x1040>
 80043e0:	4650      	mov	r0, sl
 80043e2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80043e4:	aa2b      	add	r2, sp, #172	; 0xac
 80043e6:	46d8      	mov	r8, fp
 80043e8:	f002 fdce 	bl	8006f88 <__ssprint_r>
 80043ec:	2800      	cmp	r0, #0
 80043ee:	f47f a8b8 	bne.w	8003562 <_svfprintf_r+0x1de>
 80043f2:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 80043f4:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 80043f6:	e7e5      	b.n	80043c4 <_svfprintf_r+0x1040>
 80043f8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80043fa:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80043fe:	2b00      	cmp	r3, #0
 8004400:	f43f a8b1 	beq.w	8003566 <_svfprintf_r+0x1e2>
 8004404:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004406:	4649      	mov	r1, r9
 8004408:	aa2b      	add	r2, sp, #172	; 0xac
 800440a:	f002 fdbd 	bl	8006f88 <__ssprint_r>
 800440e:	f7ff b8aa 	b.w	8003566 <_svfprintf_r+0x1e2>
 8004412:	9d08      	ldr	r5, [sp, #32]
 8004414:	3301      	adds	r3, #1
 8004416:	7857      	ldrb	r7, [r2, #1]
 8004418:	f045 0520 	orr.w	r5, r5, #32
 800441c:	9508      	str	r5, [sp, #32]
 800441e:	f7ff b825 	b.w	800346c <_svfprintf_r+0xe8>
 8004422:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8004424:	f89d 308b 	ldrb.w	r3, [sp, #139]	; 0x8b
 8004428:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 800442c:	9511      	str	r5, [sp, #68]	; 0x44
 800442e:	960b      	str	r6, [sp, #44]	; 0x2c
 8004430:	941b      	str	r4, [sp, #108]	; 0x6c
 8004432:	f7ff b942 	b.w	80036ba <_svfprintf_r+0x336>
 8004436:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8004438:	1d25      	adds	r5, r4, #4
 800443a:	9511      	str	r5, [sp, #68]	; 0x44
 800443c:	6822      	ldr	r2, [r4, #0]
 800443e:	f7ff baf1 	b.w	8003a24 <_svfprintf_r+0x6a0>
 8004442:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8004444:	1d25      	adds	r5, r4, #4
 8004446:	9511      	str	r5, [sp, #68]	; 0x44
 8004448:	6822      	ldr	r2, [r4, #0]
 800444a:	4614      	mov	r4, r2
 800444c:	3200      	adds	r2, #0
 800444e:	bf18      	it	ne
 8004450:	2201      	movne	r2, #1
 8004452:	2500      	movs	r5, #0
 8004454:	f7ff b9ed 	b.w	8003832 <_svfprintf_r+0x4ae>
 8004458:	f1b9 3fff 	cmp.w	r9, #4294967295
 800445c:	f027 0a20 	bic.w	sl, r7, #32
 8004460:	bf08      	it	eq
 8004462:	f04f 0906 	moveq.w	r9, #6
 8004466:	d007      	beq.n	8004478 <_svfprintf_r+0x10f4>
 8004468:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800446c:	d104      	bne.n	8004478 <_svfprintf_r+0x10f4>
 800446e:	f1b9 0f00 	cmp.w	r9, #0
 8004472:	bf08      	it	eq
 8004474:	f04f 0901 	moveq.w	r9, #1
 8004478:	9c08      	ldr	r4, [sp, #32]
 800447a:	2d00      	cmp	r5, #0
 800447c:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 8004480:	9413      	str	r4, [sp, #76]	; 0x4c
 8004482:	f2c0 80c1 	blt.w	8004608 <_svfprintf_r+0x1284>
 8004486:	2400      	movs	r4, #0
 8004488:	9410      	str	r4, [sp, #64]	; 0x40
 800448a:	f1ba 0246 	subs.w	r2, sl, #70	; 0x46
 800448e:	4251      	negs	r1, r2
 8004490:	4151      	adcs	r1, r2
 8004492:	2900      	cmp	r1, #0
 8004494:	f040 8102 	bne.w	800469c <_svfprintf_r+0x1318>
 8004498:	f1ba 0f45 	cmp.w	sl, #69	; 0x45
 800449c:	f040 8172 	bne.w	8004784 <_svfprintf_r+0x1400>
 80044a0:	f109 0401 	add.w	r4, r9, #1
 80044a4:	2102      	movs	r1, #2
 80044a6:	9401      	str	r4, [sp, #4]
 80044a8:	4632      	mov	r2, r6
 80044aa:	9100      	str	r1, [sp, #0]
 80044ac:	462b      	mov	r3, r5
 80044ae:	a924      	add	r1, sp, #144	; 0x90
 80044b0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80044b2:	9102      	str	r1, [sp, #8]
 80044b4:	a925      	add	r1, sp, #148	; 0x94
 80044b6:	9103      	str	r1, [sp, #12]
 80044b8:	a926      	add	r1, sp, #152	; 0x98
 80044ba:	9104      	str	r1, [sp, #16]
 80044bc:	f000 fa9c 	bl	80049f8 <_dtoa_r>
 80044c0:	1904      	adds	r4, r0, r4
 80044c2:	9014      	str	r0, [sp, #80]	; 0x50
 80044c4:	4630      	mov	r0, r6
 80044c6:	2200      	movs	r2, #0
 80044c8:	2300      	movs	r3, #0
 80044ca:	4629      	mov	r1, r5
 80044cc:	f004 fb7a 	bl	8008bc4 <__aeabi_dcmpeq>
 80044d0:	b950      	cbnz	r0, 80044e8 <_svfprintf_r+0x1164>
 80044d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80044d4:	429c      	cmp	r4, r3
 80044d6:	bf98      	it	ls
 80044d8:	461c      	movls	r4, r3
 80044da:	d905      	bls.n	80044e8 <_svfprintf_r+0x1164>
 80044dc:	2230      	movs	r2, #48	; 0x30
 80044de:	f803 2b01 	strb.w	r2, [r3], #1
 80044e2:	42a3      	cmp	r3, r4
 80044e4:	9326      	str	r3, [sp, #152]	; 0x98
 80044e6:	d1fa      	bne.n	80044de <_svfprintf_r+0x115a>
 80044e8:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80044ea:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80044ee:	ebc5 0404 	rsb	r4, r5, r4
 80044f2:	9412      	str	r4, [sp, #72]	; 0x48
 80044f4:	f000 8100 	beq.w	80046f8 <_svfprintf_r+0x1374>
 80044f8:	2f65      	cmp	r7, #101	; 0x65
 80044fa:	f340 81dd 	ble.w	80048b8 <_svfprintf_r+0x1534>
 80044fe:	2f66      	cmp	r7, #102	; 0x66
 8004500:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004502:	f000 8170 	beq.w	80047e6 <_svfprintf_r+0x1462>
 8004506:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8004508:	42a2      	cmp	r2, r4
 800450a:	f2c0 812e 	blt.w	800476a <_svfprintf_r+0x13e6>
 800450e:	9d08      	ldr	r5, [sp, #32]
 8004510:	07e9      	lsls	r1, r5, #31
 8004512:	f100 817f 	bmi.w	8004814 <_svfprintf_r+0x1490>
 8004516:	2767      	movs	r7, #103	; 0x67
 8004518:	ea22 76e2 	bic.w	r6, r2, r2, asr #31
 800451c:	920e      	str	r2, [sp, #56]	; 0x38
 800451e:	960b      	str	r6, [sp, #44]	; 0x2c
 8004520:	921b      	str	r2, [sp, #108]	; 0x6c
 8004522:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8004524:	2c00      	cmp	r4, #0
 8004526:	f000 80de 	beq.w	80046e6 <_svfprintf_r+0x1362>
 800452a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800452c:	232d      	movs	r3, #45	; 0x2d
 800452e:	2600      	movs	r6, #0
 8004530:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
 8004534:	9610      	str	r6, [sp, #64]	; 0x40
 8004536:	9508      	str	r5, [sp, #32]
 8004538:	f7ff b8c0 	b.w	80036bc <_svfprintf_r+0x338>
 800453c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800453e:	1d25      	adds	r5, r4, #4
 8004540:	9511      	str	r5, [sp, #68]	; 0x44
 8004542:	6823      	ldr	r3, [r4, #0]
 8004544:	461c      	mov	r4, r3
 8004546:	461a      	mov	r2, r3
 8004548:	17dd      	asrs	r5, r3, #31
 800454a:	462b      	mov	r3, r5
 800454c:	f7ff b86a 	b.w	8003624 <_svfprintf_r+0x2a0>
 8004550:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004552:	aa2b      	add	r2, sp, #172	; 0xac
 8004554:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004556:	f002 fd17 	bl	8006f88 <__ssprint_r>
 800455a:	2800      	cmp	r0, #0
 800455c:	f47f a801 	bne.w	8003562 <_svfprintf_r+0x1de>
 8004560:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 8004562:	46d8      	mov	r8, fp
 8004564:	f7ff bbac 	b.w	8003cc0 <_svfprintf_r+0x93c>
 8004568:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800456a:	1d25      	adds	r5, r4, #4
 800456c:	9511      	str	r5, [sp, #68]	; 0x44
 800456e:	6823      	ldr	r3, [r4, #0]
 8004570:	2500      	movs	r5, #0
 8004572:	461c      	mov	r4, r3
 8004574:	f7ff b981 	b.w	800387a <_svfprintf_r+0x4f6>
 8004578:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800457a:	2140      	movs	r1, #64	; 0x40
 800457c:	f001 fb4e 	bl	8005c1c <_malloc_r>
 8004580:	f8c9 0000 	str.w	r0, [r9]
 8004584:	f8c9 0010 	str.w	r0, [r9, #16]
 8004588:	2800      	cmp	r0, #0
 800458a:	f000 8188 	beq.w	800489e <_svfprintf_r+0x151a>
 800458e:	2340      	movs	r3, #64	; 0x40
 8004590:	f8c9 3014 	str.w	r3, [r9, #20]
 8004594:	f7fe bf13 	b.w	80033be <_svfprintf_r+0x3a>
 8004598:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800459a:	aa2b      	add	r2, sp, #172	; 0xac
 800459c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800459e:	f002 fcf3 	bl	8006f88 <__ssprint_r>
 80045a2:	2800      	cmp	r0, #0
 80045a4:	f47e afdd 	bne.w	8003562 <_svfprintf_r+0x1de>
 80045a8:	9f24      	ldr	r7, [sp, #144]	; 0x90
 80045aa:	46d8      	mov	r8, fp
 80045ac:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 80045ae:	2f00      	cmp	r7, #0
 80045b0:	f47f aee9 	bne.w	8004386 <_svfprintf_r+0x1002>
 80045b4:	e6df      	b.n	8004376 <_svfprintf_r+0xff2>
 80045b6:	3401      	adds	r4, #1
 80045b8:	e888 00c0 	stmia.w	r8, {r6, r7}
 80045bc:	2c07      	cmp	r4, #7
 80045be:	443d      	add	r5, r7
 80045c0:	942c      	str	r4, [sp, #176]	; 0xb0
 80045c2:	bfd8      	it	le
 80045c4:	f108 0808 	addle.w	r8, r8, #8
 80045c8:	952d      	str	r5, [sp, #180]	; 0xb4
 80045ca:	dd0a      	ble.n	80045e2 <_svfprintf_r+0x125e>
 80045cc:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80045ce:	aa2b      	add	r2, sp, #172	; 0xac
 80045d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80045d2:	f002 fcd9 	bl	8006f88 <__ssprint_r>
 80045d6:	2800      	cmp	r0, #0
 80045d8:	f47e afc3 	bne.w	8003562 <_svfprintf_r+0x1de>
 80045dc:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 80045de:	46d8      	mov	r8, fp
 80045e0:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 80045e2:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80045e4:	3401      	adds	r4, #1
 80045e6:	9f12      	ldr	r7, [sp, #72]	; 0x48
 80045e8:	f8c8 6000 	str.w	r6, [r8]
 80045ec:	e53b      	b.n	8004066 <_svfprintf_r+0xce2>
 80045ee:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80045f0:	aa2b      	add	r2, sp, #172	; 0xac
 80045f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80045f4:	f002 fcc8 	bl	8006f88 <__ssprint_r>
 80045f8:	2800      	cmp	r0, #0
 80045fa:	f47e afb2 	bne.w	8003562 <_svfprintf_r+0x1de>
 80045fe:	9f24      	ldr	r7, [sp, #144]	; 0x90
 8004600:	46d8      	mov	r8, fp
 8004602:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 8004604:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8004606:	e6d0      	b.n	80043aa <_svfprintf_r+0x1026>
 8004608:	242d      	movs	r4, #45	; 0x2d
 800460a:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 800460e:	9410      	str	r4, [sp, #64]	; 0x40
 8004610:	e73b      	b.n	800448a <_svfprintf_r+0x1106>
 8004612:	9410      	str	r4, [sp, #64]	; 0x40
 8004614:	f002 fc88 	bl	8006f28 <strlen>
 8004618:	f89d 308b 	ldrb.w	r3, [sp, #139]	; 0x8b
 800461c:	9511      	str	r5, [sp, #68]	; 0x44
 800461e:	941b      	str	r4, [sp, #108]	; 0x6c
 8004620:	ea20 79e0 	bic.w	r9, r0, r0, asr #31
 8004624:	900e      	str	r0, [sp, #56]	; 0x38
 8004626:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
 800462a:	f7ff b846 	b.w	80036ba <_svfprintf_r+0x336>
 800462e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004630:	aa2b      	add	r2, sp, #172	; 0xac
 8004632:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004634:	f002 fca8 	bl	8006f88 <__ssprint_r>
 8004638:	2800      	cmp	r0, #0
 800463a:	f47e af92 	bne.w	8003562 <_svfprintf_r+0x1de>
 800463e:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 8004640:	46d8      	mov	r8, fp
 8004642:	e458      	b.n	8003ef6 <_svfprintf_r+0xb72>
 8004644:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004646:	aa2b      	add	r2, sp, #172	; 0xac
 8004648:	9909      	ldr	r1, [sp, #36]	; 0x24
 800464a:	f002 fc9d 	bl	8006f88 <__ssprint_r>
 800464e:	2800      	cmp	r0, #0
 8004650:	f47e af87 	bne.w	8003562 <_svfprintf_r+0x1de>
 8004654:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004656:	46d8      	mov	r8, fp
 8004658:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800465a:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 800465c:	1afb      	subs	r3, r7, r3
 800465e:	e548      	b.n	80040f2 <_svfprintf_r+0xd6e>
 8004660:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8004662:	ebc6 060b 	rsb	r6, r6, fp
 8004666:	960e      	str	r6, [sp, #56]	; 0x38
 8004668:	f7ff b81a 	b.w	80036a0 <_svfprintf_r+0x31c>
 800466c:	08009728 	.word	0x08009728
 8004670:	f1b9 0f06 	cmp.w	r9, #6
 8004674:	bf34      	ite	cc
 8004676:	464b      	movcc	r3, r9
 8004678:	2306      	movcs	r3, #6
 800467a:	f649 14e0 	movw	r4, #39392	; 0x99e0
 800467e:	ea23 76e3 	bic.w	r6, r3, r3, asr #31
 8004682:	f6c0 0400 	movt	r4, #2048	; 0x800
 8004686:	930e      	str	r3, [sp, #56]	; 0x38
 8004688:	960b      	str	r6, [sp, #44]	; 0x2c
 800468a:	9511      	str	r5, [sp, #68]	; 0x44
 800468c:	9414      	str	r4, [sp, #80]	; 0x50
 800468e:	f7ff b949 	b.w	8003924 <_svfprintf_r+0x5a0>
 8004692:	232d      	movs	r3, #45	; 0x2d
 8004694:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
 8004698:	f7ff b898 	b.w	80037cc <_svfprintf_r+0x448>
 800469c:	2003      	movs	r0, #3
 800469e:	9000      	str	r0, [sp, #0]
 80046a0:	4632      	mov	r2, r6
 80046a2:	a824      	add	r0, sp, #144	; 0x90
 80046a4:	462b      	mov	r3, r5
 80046a6:	9002      	str	r0, [sp, #8]
 80046a8:	ac26      	add	r4, sp, #152	; 0x98
 80046aa:	a825      	add	r0, sp, #148	; 0x94
 80046ac:	f8cd 9004 	str.w	r9, [sp, #4]
 80046b0:	9003      	str	r0, [sp, #12]
 80046b2:	9404      	str	r4, [sp, #16]
 80046b4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80046b6:	9107      	str	r1, [sp, #28]
 80046b8:	f000 f99e 	bl	80049f8 <_dtoa_r>
 80046bc:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80046c0:	9907      	ldr	r1, [sp, #28]
 80046c2:	9014      	str	r0, [sp, #80]	; 0x50
 80046c4:	d102      	bne.n	80046cc <_svfprintf_r+0x1348>
 80046c6:	9c08      	ldr	r4, [sp, #32]
 80046c8:	07e3      	lsls	r3, r4, #31
 80046ca:	d512      	bpl.n	80046f2 <_svfprintf_r+0x136e>
 80046cc:	9814      	ldr	r0, [sp, #80]	; 0x50
 80046ce:	eb00 0409 	add.w	r4, r0, r9
 80046d2:	2900      	cmp	r1, #0
 80046d4:	f43f aef6 	beq.w	80044c4 <_svfprintf_r+0x1140>
 80046d8:	7803      	ldrb	r3, [r0, #0]
 80046da:	2b30      	cmp	r3, #48	; 0x30
 80046dc:	f000 80a2 	beq.w	8004824 <_svfprintf_r+0x14a0>
 80046e0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80046e2:	18e4      	adds	r4, r4, r3
 80046e4:	e6ee      	b.n	80044c4 <_svfprintf_r+0x1140>
 80046e6:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80046e8:	f89d 308b 	ldrb.w	r3, [sp, #139]	; 0x8b
 80046ec:	9608      	str	r6, [sp, #32]
 80046ee:	f7fe bfe4 	b.w	80036ba <_svfprintf_r+0x336>
 80046f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80046f4:	1a1b      	subs	r3, r3, r0
 80046f6:	9312      	str	r3, [sp, #72]	; 0x48
 80046f8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80046fa:	1cdd      	adds	r5, r3, #3
 80046fc:	461a      	mov	r2, r3
 80046fe:	db02      	blt.n	8004706 <_svfprintf_r+0x1382>
 8004700:	4599      	cmp	r9, r3
 8004702:	f6bf af00 	bge.w	8004506 <_svfprintf_r+0x1182>
 8004706:	3f02      	subs	r7, #2
 8004708:	3b01      	subs	r3, #1
 800470a:	f88d 709c 	strb.w	r7, [sp, #156]	; 0x9c
 800470e:	2b00      	cmp	r3, #0
 8004710:	9324      	str	r3, [sp, #144]	; 0x90
 8004712:	f2c0 80b7 	blt.w	8004884 <_svfprintf_r+0x1500>
 8004716:	222b      	movs	r2, #43	; 0x2b
 8004718:	f88d 209d 	strb.w	r2, [sp, #157]	; 0x9d
 800471c:	2b09      	cmp	r3, #9
 800471e:	dc33      	bgt.n	8004788 <_svfprintf_r+0x1404>
 8004720:	2230      	movs	r2, #48	; 0x30
 8004722:	f88d 209e 	strb.w	r2, [sp, #158]	; 0x9e
 8004726:	aa28      	add	r2, sp, #160	; 0xa0
 8004728:	3330      	adds	r3, #48	; 0x30
 800472a:	f88d 309f 	strb.w	r3, [sp, #159]	; 0x9f
 800472e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8004730:	ab27      	add	r3, sp, #156	; 0x9c
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	9320      	str	r3, [sp, #128]	; 0x80
 8004736:	2c01      	cmp	r4, #1
 8004738:	4423      	add	r3, r4
 800473a:	930e      	str	r3, [sp, #56]	; 0x38
 800473c:	f340 8089 	ble.w	8004852 <_svfprintf_r+0x14ce>
 8004740:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004742:	2400      	movs	r4, #0
 8004744:	941b      	str	r4, [sp, #108]	; 0x6c
 8004746:	3301      	adds	r3, #1
 8004748:	930e      	str	r3, [sp, #56]	; 0x38
 800474a:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 800474e:	950b      	str	r5, [sp, #44]	; 0x2c
 8004750:	e6e7      	b.n	8004522 <_svfprintf_r+0x119e>
 8004752:	ea29 74e9 	bic.w	r4, r9, r9, asr #31
 8004756:	9010      	str	r0, [sp, #64]	; 0x40
 8004758:	940b      	str	r4, [sp, #44]	; 0x2c
 800475a:	f89d 308b 	ldrb.w	r3, [sp, #139]	; 0x8b
 800475e:	9511      	str	r5, [sp, #68]	; 0x44
 8004760:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8004764:	901b      	str	r0, [sp, #108]	; 0x6c
 8004766:	f7fe bfa8 	b.w	80036ba <_svfprintf_r+0x336>
 800476a:	2a00      	cmp	r2, #0
 800476c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800476e:	bfd4      	ite	le
 8004770:	f1c2 0302 	rsble	r3, r2, #2
 8004774:	2301      	movgt	r3, #1
 8004776:	191b      	adds	r3, r3, r4
 8004778:	2767      	movs	r7, #103	; 0x67
 800477a:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 800477e:	930e      	str	r3, [sp, #56]	; 0x38
 8004780:	950b      	str	r5, [sp, #44]	; 0x2c
 8004782:	e6cd      	b.n	8004520 <_svfprintf_r+0x119c>
 8004784:	2002      	movs	r0, #2
 8004786:	e78a      	b.n	800469e <_svfprintf_r+0x131a>
 8004788:	f246 6067 	movw	r0, #26215	; 0x6667
 800478c:	f10d 05aa 	add.w	r5, sp, #170	; 0xaa
 8004790:	f2c6 6066 	movt	r0, #26214	; 0x6666
 8004794:	fb80 6403 	smull	r6, r4, r0, r3
 8004798:	17d9      	asrs	r1, r3, #31
 800479a:	462a      	mov	r2, r5
 800479c:	3d01      	subs	r5, #1
 800479e:	ebc1 01a4 	rsb	r1, r1, r4, asr #2
 80047a2:	eb01 0481 	add.w	r4, r1, r1, lsl #2
 80047a6:	eba3 0444 	sub.w	r4, r3, r4, lsl #1
 80047aa:	460b      	mov	r3, r1
 80047ac:	2b09      	cmp	r3, #9
 80047ae:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80047b2:	7011      	strb	r1, [r2, #0]
 80047b4:	dcee      	bgt.n	8004794 <_svfprintf_r+0x1410>
 80047b6:	f10d 00ab 	add.w	r0, sp, #171	; 0xab
 80047ba:	3330      	adds	r3, #48	; 0x30
 80047bc:	42a8      	cmp	r0, r5
 80047be:	4619      	mov	r1, r3
 80047c0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80047c4:	d975      	bls.n	80048b2 <_svfprintf_r+0x152e>
 80047c6:	f10d 049d 	add.w	r4, sp, #157	; 0x9d
 80047ca:	4613      	mov	r3, r2
 80047cc:	e001      	b.n	80047d2 <_svfprintf_r+0x144e>
 80047ce:	f813 1b01 	ldrb.w	r1, [r3], #1
 80047d2:	4283      	cmp	r3, r0
 80047d4:	f804 1f01 	strb.w	r1, [r4, #1]!
 80047d8:	d1f9      	bne.n	80047ce <_svfprintf_r+0x144a>
 80047da:	f50d 7990 	add.w	r9, sp, #288	; 0x120
 80047de:	ebc2 0249 	rsb	r2, r2, r9, lsl #1
 80047e2:	3af6      	subs	r2, #246	; 0xf6
 80047e4:	e7a3      	b.n	800472e <_svfprintf_r+0x13aa>
 80047e6:	2a00      	cmp	r2, #0
 80047e8:	dd29      	ble.n	800483e <_svfprintf_r+0x14ba>
 80047ea:	f1b9 0f00 	cmp.w	r9, #0
 80047ee:	d108      	bne.n	8004802 <_svfprintf_r+0x147e>
 80047f0:	9e08      	ldr	r6, [sp, #32]
 80047f2:	07f4      	lsls	r4, r6, #31
 80047f4:	d405      	bmi.n	8004802 <_svfprintf_r+0x147e>
 80047f6:	ea22 79e2 	bic.w	r9, r2, r2, asr #31
 80047fa:	920e      	str	r2, [sp, #56]	; 0x38
 80047fc:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
 8004800:	e68e      	b.n	8004520 <_svfprintf_r+0x119c>
 8004802:	f109 0901 	add.w	r9, r9, #1
 8004806:	eb02 0309 	add.w	r3, r2, r9
 800480a:	930e      	str	r3, [sp, #56]	; 0x38
 800480c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8004810:	940b      	str	r4, [sp, #44]	; 0x2c
 8004812:	e685      	b.n	8004520 <_svfprintf_r+0x119c>
 8004814:	1c57      	adds	r7, r2, #1
 8004816:	970e      	str	r7, [sp, #56]	; 0x38
 8004818:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800481a:	2767      	movs	r7, #103	; 0x67
 800481c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004820:	930b      	str	r3, [sp, #44]	; 0x2c
 8004822:	e67d      	b.n	8004520 <_svfprintf_r+0x119c>
 8004824:	4630      	mov	r0, r6
 8004826:	2200      	movs	r2, #0
 8004828:	2300      	movs	r3, #0
 800482a:	4629      	mov	r1, r5
 800482c:	f004 f9ca 	bl	8008bc4 <__aeabi_dcmpeq>
 8004830:	2800      	cmp	r0, #0
 8004832:	f47f af55 	bne.w	80046e0 <_svfprintf_r+0x135c>
 8004836:	f1c9 0301 	rsb	r3, r9, #1
 800483a:	9324      	str	r3, [sp, #144]	; 0x90
 800483c:	e751      	b.n	80046e2 <_svfprintf_r+0x135e>
 800483e:	f1b9 0f00 	cmp.w	r9, #0
 8004842:	d124      	bne.n	800488e <_svfprintf_r+0x150a>
 8004844:	9d08      	ldr	r5, [sp, #32]
 8004846:	07e8      	lsls	r0, r5, #31
 8004848:	d421      	bmi.n	800488e <_svfprintf_r+0x150a>
 800484a:	2601      	movs	r6, #1
 800484c:	960b      	str	r6, [sp, #44]	; 0x2c
 800484e:	960e      	str	r6, [sp, #56]	; 0x38
 8004850:	e666      	b.n	8004520 <_svfprintf_r+0x119c>
 8004852:	9d08      	ldr	r5, [sp, #32]
 8004854:	f015 0301 	ands.w	r3, r5, #1
 8004858:	f47f af72 	bne.w	8004740 <_svfprintf_r+0x13bc>
 800485c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800485e:	931b      	str	r3, [sp, #108]	; 0x6c
 8004860:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 8004864:	960b      	str	r6, [sp, #44]	; 0x2c
 8004866:	e65c      	b.n	8004522 <_svfprintf_r+0x119e>
 8004868:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800486a:	785f      	ldrb	r7, [r3, #1]
 800486c:	4623      	mov	r3, r4
 800486e:	1d2a      	adds	r2, r5, #4
 8004870:	9211      	str	r2, [sp, #68]	; 0x44
 8004872:	f8d5 9000 	ldr.w	r9, [r5]
 8004876:	f1b9 0f00 	cmp.w	r9, #0
 800487a:	bfb8      	it	lt
 800487c:	f04f 39ff 	movlt.w	r9, #4294967295
 8004880:	f7fe bdf4 	b.w	800346c <_svfprintf_r+0xe8>
 8004884:	222d      	movs	r2, #45	; 0x2d
 8004886:	425b      	negs	r3, r3
 8004888:	f88d 209d 	strb.w	r2, [sp, #157]	; 0x9d
 800488c:	e746      	b.n	800471c <_svfprintf_r+0x1398>
 800488e:	f109 0602 	add.w	r6, r9, #2
 8004892:	960e      	str	r6, [sp, #56]	; 0x38
 8004894:	ea26 79e6 	bic.w	r9, r6, r6, asr #31
 8004898:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
 800489c:	e640      	b.n	8004520 <_svfprintf_r+0x119c>
 800489e:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 80048a2:	f04f 37ff 	mov.w	r7, #4294967295
 80048a6:	230c      	movs	r3, #12
 80048a8:	970c      	str	r7, [sp, #48]	; 0x30
 80048aa:	f8c8 3000 	str.w	r3, [r8]
 80048ae:	f7fe be65 	b.w	800357c <_svfprintf_r+0x1f8>
 80048b2:	f10d 029e 	add.w	r2, sp, #158	; 0x9e
 80048b6:	e73a      	b.n	800472e <_svfprintf_r+0x13aa>
 80048b8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80048ba:	e725      	b.n	8004708 <_svfprintf_r+0x1384>
 80048bc:	0000      	movs	r0, r0
	...

080048c0 <quorem>:
 80048c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048c4:	4681      	mov	r9, r0
 80048c6:	6903      	ldr	r3, [r0, #16]
 80048c8:	b083      	sub	sp, #12
 80048ca:	690d      	ldr	r5, [r1, #16]
 80048cc:	2000      	movs	r0, #0
 80048ce:	9101      	str	r1, [sp, #4]
 80048d0:	429d      	cmp	r5, r3
 80048d2:	f300 808e 	bgt.w	80049f2 <quorem+0x132>
 80048d6:	1cea      	adds	r2, r5, #3
 80048d8:	f101 0414 	add.w	r4, r1, #20
 80048dc:	3d01      	subs	r5, #1
 80048de:	f109 0814 	add.w	r8, r9, #20
 80048e2:	0092      	lsls	r2, r2, #2
 80048e4:	188b      	adds	r3, r1, r2
 80048e6:	444a      	add	r2, r9
 80048e8:	1d1f      	adds	r7, r3, #4
 80048ea:	6859      	ldr	r1, [r3, #4]
 80048ec:	6850      	ldr	r0, [r2, #4]
 80048ee:	3101      	adds	r1, #1
 80048f0:	f003 fc0a 	bl	8008108 <__aeabi_uidiv>
 80048f4:	4606      	mov	r6, r0
 80048f6:	2800      	cmp	r0, #0
 80048f8:	d041      	beq.n	800497e <quorem+0xbe>
 80048fa:	f04f 0e00 	mov.w	lr, #0
 80048fe:	4642      	mov	r2, r8
 8004900:	4623      	mov	r3, r4
 8004902:	4670      	mov	r0, lr
 8004904:	46a2      	mov	sl, r4
 8004906:	f853 1b04 	ldr.w	r1, [r3], #4
 800490a:	6814      	ldr	r4, [r2, #0]
 800490c:	fa1f fc81 	uxth.w	ip, r1
 8004910:	ea4f 4b11 	mov.w	fp, r1, lsr #16
 8004914:	b2a1      	uxth	r1, r4
 8004916:	fb06 ec0c 	mla	ip, r6, ip, lr
 800491a:	1809      	adds	r1, r1, r0
 800491c:	fb06 fe0b 	mul.w	lr, r6, fp
 8004920:	eb0e 4e1c 	add.w	lr, lr, ip, lsr #16
 8004924:	fa1f fc8c 	uxth.w	ip, ip
 8004928:	ebcc 0101 	rsb	r1, ip, r1
 800492c:	fa1f f08e 	uxth.w	r0, lr
 8004930:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8004934:	ebc0 4014 	rsb	r0, r0, r4, lsr #16
 8004938:	fa1f fc81 	uxth.w	ip, r1
 800493c:	eb00 4021 	add.w	r0, r0, r1, asr #16
 8004940:	ea4c 4100 	orr.w	r1, ip, r0, lsl #16
 8004944:	1400      	asrs	r0, r0, #16
 8004946:	429f      	cmp	r7, r3
 8004948:	f842 1b04 	str.w	r1, [r2], #4
 800494c:	d2db      	bcs.n	8004906 <quorem+0x46>
 800494e:	1d2b      	adds	r3, r5, #4
 8004950:	4654      	mov	r4, sl
 8004952:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8004956:	685a      	ldr	r2, [r3, #4]
 8004958:	b98a      	cbnz	r2, 800497e <quorem+0xbe>
 800495a:	1d1a      	adds	r2, r3, #4
 800495c:	4598      	cmp	r8, r3
 800495e:	d20c      	bcs.n	800497a <quorem+0xba>
 8004960:	f852 2c04 	ldr.w	r2, [r2, #-4]
 8004964:	b94a      	cbnz	r2, 800497a <quorem+0xba>
 8004966:	3b04      	subs	r3, #4
 8004968:	e001      	b.n	800496e <quorem+0xae>
 800496a:	6812      	ldr	r2, [r2, #0]
 800496c:	b92a      	cbnz	r2, 800497a <quorem+0xba>
 800496e:	3d01      	subs	r5, #1
 8004970:	4598      	cmp	r8, r3
 8004972:	461a      	mov	r2, r3
 8004974:	f1a3 0304 	sub.w	r3, r3, #4
 8004978:	d3f7      	bcc.n	800496a <quorem+0xaa>
 800497a:	f8c9 5010 	str.w	r5, [r9, #16]
 800497e:	4648      	mov	r0, r9
 8004980:	9901      	ldr	r1, [sp, #4]
 8004982:	f001 ffa1 	bl	80068c8 <__mcmp>
 8004986:	2800      	cmp	r0, #0
 8004988:	db32      	blt.n	80049f0 <quorem+0x130>
 800498a:	3601      	adds	r6, #1
 800498c:	4643      	mov	r3, r8
 800498e:	f04f 0c00 	mov.w	ip, #0
 8004992:	f854 0b04 	ldr.w	r0, [r4], #4
 8004996:	6819      	ldr	r1, [r3, #0]
 8004998:	fa1f fa80 	uxth.w	sl, r0
 800499c:	0c00      	lsrs	r0, r0, #16
 800499e:	b28a      	uxth	r2, r1
 80049a0:	ebc0 4111 	rsb	r1, r0, r1, lsr #16
 80049a4:	ebca 0202 	rsb	r2, sl, r2
 80049a8:	42a7      	cmp	r7, r4
 80049aa:	4494      	add	ip, r2
 80049ac:	eb01 422c 	add.w	r2, r1, ip, asr #16
 80049b0:	fa1f fc8c 	uxth.w	ip, ip
 80049b4:	ea4c 4102 	orr.w	r1, ip, r2, lsl #16
 80049b8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80049bc:	f843 1b04 	str.w	r1, [r3], #4
 80049c0:	d2e7      	bcs.n	8004992 <quorem+0xd2>
 80049c2:	1d2b      	adds	r3, r5, #4
 80049c4:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 80049c8:	685a      	ldr	r2, [r3, #4]
 80049ca:	b98a      	cbnz	r2, 80049f0 <quorem+0x130>
 80049cc:	1d1a      	adds	r2, r3, #4
 80049ce:	4598      	cmp	r8, r3
 80049d0:	d20c      	bcs.n	80049ec <quorem+0x12c>
 80049d2:	f852 2c04 	ldr.w	r2, [r2, #-4]
 80049d6:	b94a      	cbnz	r2, 80049ec <quorem+0x12c>
 80049d8:	3b04      	subs	r3, #4
 80049da:	e001      	b.n	80049e0 <quorem+0x120>
 80049dc:	6812      	ldr	r2, [r2, #0]
 80049de:	b92a      	cbnz	r2, 80049ec <quorem+0x12c>
 80049e0:	3d01      	subs	r5, #1
 80049e2:	4598      	cmp	r8, r3
 80049e4:	461a      	mov	r2, r3
 80049e6:	f1a3 0304 	sub.w	r3, r3, #4
 80049ea:	d3f7      	bcc.n	80049dc <quorem+0x11c>
 80049ec:	f8c9 5010 	str.w	r5, [r9, #16]
 80049f0:	4630      	mov	r0, r6
 80049f2:	b003      	add	sp, #12
 80049f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080049f8 <_dtoa_r>:
 80049f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049fc:	b09f      	sub	sp, #124	; 0x7c
 80049fe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004a00:	4606      	mov	r6, r0
 8004a02:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004a06:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 8004a08:	2d00      	cmp	r5, #0
 8004a0a:	f000 82ac 	beq.w	8004f66 <_dtoa_r+0x56e>
 8004a0e:	682b      	ldr	r3, [r5, #0]
 8004a10:	b15b      	cbz	r3, 8004a2a <_dtoa_r+0x32>
 8004a12:	686a      	ldr	r2, [r5, #4]
 8004a14:	2501      	movs	r5, #1
 8004a16:	4619      	mov	r1, r3
 8004a18:	fa05 f502 	lsl.w	r5, r5, r2
 8004a1c:	609d      	str	r5, [r3, #8]
 8004a1e:	605a      	str	r2, [r3, #4]
 8004a20:	f001 fd06 	bl	8006430 <_Bfree>
 8004a24:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004a26:	2200      	movs	r2, #0
 8004a28:	601a      	str	r2, [r3, #0]
 8004a2a:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004a2e:	f1b9 0f00 	cmp.w	r9, #0
 8004a32:	db39      	blt.n	8004aa8 <_dtoa_r+0xb0>
 8004a34:	2300      	movs	r3, #0
 8004a36:	6023      	str	r3, [r4, #0]
 8004a38:	2300      	movs	r3, #0
 8004a3a:	461a      	mov	r2, r3
 8004a3c:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 8004a40:	f6c7 72f0 	movt	r2, #32752	; 0x7ff0
 8004a44:	ea09 0303 	and.w	r3, r9, r3
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d017      	beq.n	8004a7c <_dtoa_r+0x84>
 8004a4c:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8004a50:	2200      	movs	r2, #0
 8004a52:	2300      	movs	r3, #0
 8004a54:	4620      	mov	r0, r4
 8004a56:	4629      	mov	r1, r5
 8004a58:	f004 f8b4 	bl	8008bc4 <__aeabi_dcmpeq>
 8004a5c:	2800      	cmp	r0, #0
 8004a5e:	d02a      	beq.n	8004ab6 <_dtoa_r+0xbe>
 8004a60:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8004a62:	2301      	movs	r3, #1
 8004a64:	6013      	str	r3, [r2, #0]
 8004a66:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	f000 80dc 	beq.w	8004c26 <_dtoa_r+0x22e>
 8004a6e:	4bae      	ldr	r3, [pc, #696]	; (8004d28 <_dtoa_r+0x330>)
 8004a70:	1e58      	subs	r0, r3, #1
 8004a72:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8004a74:	600b      	str	r3, [r1, #0]
 8004a76:	b01f      	add	sp, #124	; 0x7c
 8004a78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a7c:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8004a7e:	f649 10f8 	movw	r0, #39416	; 0x99f8
 8004a82:	9a04      	ldr	r2, [sp, #16]
 8004a84:	f242 730f 	movw	r3, #9999	; 0x270f
 8004a88:	f6c0 0000 	movt	r0, #2048	; 0x800
 8004a8c:	600b      	str	r3, [r1, #0]
 8004a8e:	2a00      	cmp	r2, #0
 8004a90:	f000 80a8 	beq.w	8004be4 <_dtoa_r+0x1ec>
 8004a94:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d0ed      	beq.n	8004a76 <_dtoa_r+0x7e>
 8004a9a:	78c3      	ldrb	r3, [r0, #3]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	f000 80b0 	beq.w	8004c02 <_dtoa_r+0x20a>
 8004aa2:	f100 0308 	add.w	r3, r0, #8
 8004aa6:	e7e4      	b.n	8004a72 <_dtoa_r+0x7a>
 8004aa8:	f029 4900 	bic.w	r9, r9, #2147483648	; 0x80000000
 8004aac:	2301      	movs	r3, #1
 8004aae:	f8cd 9014 	str.w	r9, [sp, #20]
 8004ab2:	6023      	str	r3, [r4, #0]
 8004ab4:	e7c0      	b.n	8004a38 <_dtoa_r+0x40>
 8004ab6:	ab1d      	add	r3, sp, #116	; 0x74
 8004ab8:	4630      	mov	r0, r6
 8004aba:	9300      	str	r3, [sp, #0]
 8004abc:	4622      	mov	r2, r4
 8004abe:	ab1c      	add	r3, sp, #112	; 0x70
 8004ac0:	9301      	str	r3, [sp, #4]
 8004ac2:	462b      	mov	r3, r5
 8004ac4:	f3c9 570a 	ubfx	r7, r9, #20, #11
 8004ac8:	f002 f80c 	bl	8006ae4 <__d2b>
 8004acc:	4683      	mov	fp, r0
 8004ace:	2f00      	cmp	r7, #0
 8004ad0:	f040 8099 	bne.w	8004c06 <_dtoa_r+0x20e>
 8004ad4:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8004ad8:	f46f 6382 	mvn.w	r3, #1040	; 0x410
 8004adc:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 8004ade:	4447      	add	r7, r8
 8004ae0:	429f      	cmp	r7, r3
 8004ae2:	f2c0 8265 	blt.w	8004fb0 <_dtoa_r+0x5b8>
 8004ae6:	9804      	ldr	r0, [sp, #16]
 8004ae8:	f64f 430e 	movw	r3, #64526	; 0xfc0e
 8004aec:	f6cf 73ff 	movt	r3, #65535	; 0xffff
 8004af0:	f207 4212 	addw	r2, r7, #1042	; 0x412
 8004af4:	1bdb      	subs	r3, r3, r7
 8004af6:	fa20 f202 	lsr.w	r2, r0, r2
 8004afa:	fa09 f003 	lsl.w	r0, r9, r3
 8004afe:	4310      	orrs	r0, r2
 8004b00:	f003 fd82 	bl	8008608 <__aeabi_ui2d>
 8004b04:	3f01      	subs	r7, #1
 8004b06:	2201      	movs	r2, #1
 8004b08:	921a      	str	r2, [sp, #104]	; 0x68
 8004b0a:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004b0e:	2300      	movs	r3, #0
 8004b10:	2200      	movs	r2, #0
 8004b12:	f6c3 73f8 	movt	r3, #16376	; 0x3ff8
 8004b16:	f003 fc39 	bl	800838c <__aeabi_dsub>
 8004b1a:	a37d      	add	r3, pc, #500	; (adr r3, 8004d10 <_dtoa_r+0x318>)
 8004b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b20:	f003 fde8 	bl	80086f4 <__aeabi_dmul>
 8004b24:	a37c      	add	r3, pc, #496	; (adr r3, 8004d18 <_dtoa_r+0x320>)
 8004b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b2a:	f003 fc31 	bl	8008390 <__adddf3>
 8004b2e:	4604      	mov	r4, r0
 8004b30:	4638      	mov	r0, r7
 8004b32:	460d      	mov	r5, r1
 8004b34:	f003 fd78 	bl	8008628 <__aeabi_i2d>
 8004b38:	a379      	add	r3, pc, #484	; (adr r3, 8004d20 <_dtoa_r+0x328>)
 8004b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b3e:	f003 fdd9 	bl	80086f4 <__aeabi_dmul>
 8004b42:	4602      	mov	r2, r0
 8004b44:	460b      	mov	r3, r1
 8004b46:	4620      	mov	r0, r4
 8004b48:	4629      	mov	r1, r5
 8004b4a:	f003 fc21 	bl	8008390 <__adddf3>
 8004b4e:	4604      	mov	r4, r0
 8004b50:	460d      	mov	r5, r1
 8004b52:	f004 f869 	bl	8008c28 <__aeabi_d2iz>
 8004b56:	4629      	mov	r1, r5
 8004b58:	2200      	movs	r2, #0
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	9009      	str	r0, [sp, #36]	; 0x24
 8004b5e:	4620      	mov	r0, r4
 8004b60:	f004 f83a 	bl	8008bd8 <__aeabi_dcmplt>
 8004b64:	2800      	cmp	r0, #0
 8004b66:	f040 8210 	bne.w	8004f8a <_dtoa_r+0x592>
 8004b6a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004b6c:	2816      	cmp	r0, #22
 8004b6e:	f200 81f7 	bhi.w	8004f60 <_dtoa_r+0x568>
 8004b72:	f249 7150 	movw	r1, #38736	; 0x9750
 8004b76:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b7a:	f6c0 0100 	movt	r1, #2048	; 0x800
 8004b7e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8004b82:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004b86:	f004 f845 	bl	8008c14 <__aeabi_dcmpgt>
 8004b8a:	2800      	cmp	r0, #0
 8004b8c:	f000 8219 	beq.w	8004fc2 <_dtoa_r+0x5ca>
 8004b90:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004b92:	2200      	movs	r2, #0
 8004b94:	9214      	str	r2, [sp, #80]	; 0x50
 8004b96:	3901      	subs	r1, #1
 8004b98:	9109      	str	r1, [sp, #36]	; 0x24
 8004b9a:	ebc7 0708 	rsb	r7, r7, r8
 8004b9e:	3f01      	subs	r7, #1
 8004ba0:	f100 8201 	bmi.w	8004fa6 <_dtoa_r+0x5ae>
 8004ba4:	2100      	movs	r1, #0
 8004ba6:	970b      	str	r7, [sp, #44]	; 0x2c
 8004ba8:	9110      	str	r1, [sp, #64]	; 0x40
 8004baa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004bac:	2a00      	cmp	r2, #0
 8004bae:	f2c0 81e3 	blt.w	8004f78 <_dtoa_r+0x580>
 8004bb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004bb4:	2000      	movs	r0, #0
 8004bb6:	9213      	str	r2, [sp, #76]	; 0x4c
 8004bb8:	189b      	adds	r3, r3, r2
 8004bba:	9011      	str	r0, [sp, #68]	; 0x44
 8004bbc:	930b      	str	r3, [sp, #44]	; 0x2c
 8004bbe:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8004bc0:	2909      	cmp	r1, #9
 8004bc2:	d835      	bhi.n	8004c30 <_dtoa_r+0x238>
 8004bc4:	2401      	movs	r4, #1
 8004bc6:	2905      	cmp	r1, #5
 8004bc8:	dd02      	ble.n	8004bd0 <_dtoa_r+0x1d8>
 8004bca:	2400      	movs	r4, #0
 8004bcc:	3904      	subs	r1, #4
 8004bce:	9128      	str	r1, [sp, #160]	; 0xa0
 8004bd0:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8004bd2:	1e93      	subs	r3, r2, #2
 8004bd4:	2b03      	cmp	r3, #3
 8004bd6:	d82d      	bhi.n	8004c34 <_dtoa_r+0x23c>
 8004bd8:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004bdc:	03720375 	.word	0x03720375
 8004be0:	035d0233 	.word	0x035d0233
 8004be4:	f649 12ec 	movw	r2, #39404	; 0x99ec
 8004be8:	f649 13f8 	movw	r3, #39416	; 0x99f8
 8004bec:	f3c9 0013 	ubfx	r0, r9, #0, #20
 8004bf0:	f6c0 0200 	movt	r2, #2048	; 0x800
 8004bf4:	f6c0 0300 	movt	r3, #2048	; 0x800
 8004bf8:	2800      	cmp	r0, #0
 8004bfa:	bf0c      	ite	eq
 8004bfc:	4610      	moveq	r0, r2
 8004bfe:	4618      	movne	r0, r3
 8004c00:	e748      	b.n	8004a94 <_dtoa_r+0x9c>
 8004c02:	1cc3      	adds	r3, r0, #3
 8004c04:	e735      	b.n	8004a72 <_dtoa_r+0x7a>
 8004c06:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004c10:	4620      	mov	r0, r4
 8004c12:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8004c16:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
 8004c1a:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8004c1e:	f443 1140 	orr.w	r1, r3, #3145728	; 0x300000
 8004c22:	921a      	str	r2, [sp, #104]	; 0x68
 8004c24:	e773      	b.n	8004b0e <_dtoa_r+0x116>
 8004c26:	f649 10e8 	movw	r0, #39400	; 0x99e8
 8004c2a:	f6c0 0000 	movt	r0, #2048	; 0x800
 8004c2e:	e722      	b.n	8004a76 <_dtoa_r+0x7e>
 8004c30:	2300      	movs	r3, #0
 8004c32:	9328      	str	r3, [sp, #160]	; 0xa0
 8004c34:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004c36:	2300      	movs	r3, #0
 8004c38:	4619      	mov	r1, r3
 8004c3a:	4630      	mov	r0, r6
 8004c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8004c40:	9329      	str	r3, [sp, #164]	; 0xa4
 8004c42:	6063      	str	r3, [r4, #4]
 8004c44:	2301      	movs	r3, #1
 8004c46:	920c      	str	r2, [sp, #48]	; 0x30
 8004c48:	9312      	str	r3, [sp, #72]	; 0x48
 8004c4a:	f001 fbbb 	bl	80063c4 <_Balloc>
 8004c4e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004c50:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004c52:	9115      	str	r1, [sp, #84]	; 0x54
 8004c54:	6020      	str	r0, [r4, #0]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	930d      	str	r3, [sp, #52]	; 0x34
 8004c5a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	f2c0 80c5 	blt.w	8004dec <_dtoa_r+0x3f4>
 8004c62:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004c64:	290e      	cmp	r1, #14
 8004c66:	f300 80c1 	bgt.w	8004dec <_dtoa_r+0x3f4>
 8004c6a:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8004c6c:	f249 7350 	movw	r3, #38736	; 0x9750
 8004c70:	f6c0 0300 	movt	r3, #2048	; 0x800
 8004c74:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004c76:	0fc2      	lsrs	r2, r0, #31
 8004c78:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004c7a:	2900      	cmp	r1, #0
 8004c7c:	bfcc      	ite	gt
 8004c7e:	2200      	movgt	r2, #0
 8004c80:	f002 0201 	andle.w	r2, r2, #1
 8004c84:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8004c88:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004c8c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004c90:	2a00      	cmp	r2, #0
 8004c92:	f040 8465 	bne.w	8005560 <_dtoa_r+0xb68>
 8004c96:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	460b      	mov	r3, r1
 8004c9e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8004ca0:	4620      	mov	r0, r4
 8004ca2:	4629      	mov	r1, r5
 8004ca4:	f003 fe50 	bl	8008948 <__aeabi_ddiv>
 8004ca8:	f003 ffbe 	bl	8008c28 <__aeabi_d2iz>
 8004cac:	4680      	mov	r8, r0
 8004cae:	f003 fcbb 	bl	8008628 <__aeabi_i2d>
 8004cb2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004cb6:	f003 fd1d 	bl	80086f4 <__aeabi_dmul>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	460b      	mov	r3, r1
 8004cbe:	4620      	mov	r0, r4
 8004cc0:	4629      	mov	r1, r5
 8004cc2:	f003 fb63 	bl	800838c <__aeabi_dsub>
 8004cc6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004cc8:	f108 0330 	add.w	r3, r8, #48	; 0x30
 8004ccc:	f807 3b01 	strb.w	r3, [r7], #1
 8004cd0:	2a01      	cmp	r2, #1
 8004cd2:	4604      	mov	r4, r0
 8004cd4:	460d      	mov	r5, r1
 8004cd6:	d05c      	beq.n	8004d92 <_dtoa_r+0x39a>
 8004cd8:	2300      	movs	r3, #0
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8004ce0:	f003 fd08 	bl	80086f4 <__aeabi_dmul>
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	4604      	mov	r4, r0
 8004cea:	460d      	mov	r5, r1
 8004cec:	f003 ff6a 	bl	8008bc4 <__aeabi_dcmpeq>
 8004cf0:	2800      	cmp	r0, #0
 8004cf2:	f040 8124 	bne.w	8004f3e <_dtoa_r+0x546>
 8004cf6:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004cf8:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004cfa:	960a      	str	r6, [sp, #40]	; 0x28
 8004cfc:	f100 0902 	add.w	r9, r0, #2
 8004d00:	eb00 0a01 	add.w	sl, r0, r1
 8004d04:	f8cd b010 	str.w	fp, [sp, #16]
 8004d08:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 8004d0c:	e019      	b.n	8004d42 <_dtoa_r+0x34a>
 8004d0e:	bf00      	nop
 8004d10:	636f4361 	.word	0x636f4361
 8004d14:	3fd287a7 	.word	0x3fd287a7
 8004d18:	8b60c8b3 	.word	0x8b60c8b3
 8004d1c:	3fc68a28 	.word	0x3fc68a28
 8004d20:	509f79fb 	.word	0x509f79fb
 8004d24:	3fd34413 	.word	0x3fd34413
 8004d28:	080099e9 	.word	0x080099e9
 8004d2c:	f003 fce2 	bl	80086f4 <__aeabi_dmul>
 8004d30:	2200      	movs	r2, #0
 8004d32:	2300      	movs	r3, #0
 8004d34:	4604      	mov	r4, r0
 8004d36:	460d      	mov	r5, r1
 8004d38:	f003 ff44 	bl	8008bc4 <__aeabi_dcmpeq>
 8004d3c:	2800      	cmp	r0, #0
 8004d3e:	f040 852c 	bne.w	800579a <_dtoa_r+0xda2>
 8004d42:	4632      	mov	r2, r6
 8004d44:	463b      	mov	r3, r7
 8004d46:	4620      	mov	r0, r4
 8004d48:	4629      	mov	r1, r5
 8004d4a:	f003 fdfd 	bl	8008948 <__aeabi_ddiv>
 8004d4e:	46cb      	mov	fp, r9
 8004d50:	f003 ff6a 	bl	8008c28 <__aeabi_d2iz>
 8004d54:	4680      	mov	r8, r0
 8004d56:	f003 fc67 	bl	8008628 <__aeabi_i2d>
 8004d5a:	4632      	mov	r2, r6
 8004d5c:	463b      	mov	r3, r7
 8004d5e:	f003 fcc9 	bl	80086f4 <__aeabi_dmul>
 8004d62:	4602      	mov	r2, r0
 8004d64:	460b      	mov	r3, r1
 8004d66:	4620      	mov	r0, r4
 8004d68:	4629      	mov	r1, r5
 8004d6a:	f003 fb0f 	bl	800838c <__aeabi_dsub>
 8004d6e:	2300      	movs	r3, #0
 8004d70:	2200      	movs	r2, #0
 8004d72:	45d1      	cmp	r9, sl
 8004d74:	f108 0e30 	add.w	lr, r8, #48	; 0x30
 8004d78:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8004d7c:	f809 ec01 	strb.w	lr, [r9, #-1]
 8004d80:	f109 0901 	add.w	r9, r9, #1
 8004d84:	4604      	mov	r4, r0
 8004d86:	460d      	mov	r5, r1
 8004d88:	d1d0      	bne.n	8004d2c <_dtoa_r+0x334>
 8004d8a:	465f      	mov	r7, fp
 8004d8c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8004d8e:	f8dd b010 	ldr.w	fp, [sp, #16]
 8004d92:	4622      	mov	r2, r4
 8004d94:	462b      	mov	r3, r5
 8004d96:	4620      	mov	r0, r4
 8004d98:	4629      	mov	r1, r5
 8004d9a:	f003 faf9 	bl	8008390 <__adddf3>
 8004d9e:	4604      	mov	r4, r0
 8004da0:	460d      	mov	r5, r1
 8004da2:	4622      	mov	r2, r4
 8004da4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004da8:	462b      	mov	r3, r5
 8004daa:	f003 ff15 	bl	8008bd8 <__aeabi_dcmplt>
 8004dae:	2800      	cmp	r0, #0
 8004db0:	f000 8540 	beq.w	8005834 <_dtoa_r+0xe3c>
 8004db4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004db6:	f817 ac01 	ldrb.w	sl, [r7, #-1]
 8004dba:	921b      	str	r2, [sp, #108]	; 0x6c
 8004dbc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004dbe:	e002      	b.n	8004dc6 <_dtoa_r+0x3ce>
 8004dc0:	f813 ac01 	ldrb.w	sl, [r3, #-1]
 8004dc4:	461f      	mov	r7, r3
 8004dc6:	1e7b      	subs	r3, r7, #1
 8004dc8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004dcc:	f040 851a 	bne.w	8005804 <_dtoa_r+0xe0c>
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d1f5      	bne.n	8004dc0 <_dtoa_r+0x3c8>
 8004dd4:	920d      	str	r2, [sp, #52]	; 0x34
 8004dd6:	f04f 0a31 	mov.w	sl, #49	; 0x31
 8004dda:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004ddc:	2230      	movs	r2, #48	; 0x30
 8004dde:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8004de0:	700a      	strb	r2, [r1, #0]
 8004de2:	3001      	adds	r0, #1
 8004de4:	9009      	str	r0, [sp, #36]	; 0x24
 8004de6:	f883 a000 	strb.w	sl, [r3]
 8004dea:	e0a8      	b.n	8004f3e <_dtoa_r+0x546>
 8004dec:	9812      	ldr	r0, [sp, #72]	; 0x48
 8004dee:	2800      	cmp	r0, #0
 8004df0:	f040 80e9 	bne.w	8004fc6 <_dtoa_r+0x5ce>
 8004df4:	ac10      	add	r4, sp, #64	; 0x40
 8004df6:	e894 0430 	ldmia.w	r4, {r4, r5, sl}
 8004dfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	bfc8      	it	gt
 8004e00:	2c00      	cmpgt	r4, #0
 8004e02:	dd09      	ble.n	8004e18 <_dtoa_r+0x420>
 8004e04:	42a3      	cmp	r3, r4
 8004e06:	bfa8      	it	ge
 8004e08:	4623      	movge	r3, r4
 8004e0a:	9810      	ldr	r0, [sp, #64]	; 0x40
 8004e0c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004e0e:	1ae4      	subs	r4, r4, r3
 8004e10:	1ac0      	subs	r0, r0, r3
 8004e12:	9010      	str	r0, [sp, #64]	; 0x40
 8004e14:	1ac9      	subs	r1, r1, r3
 8004e16:	910b      	str	r1, [sp, #44]	; 0x2c
 8004e18:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004e1a:	2a00      	cmp	r2, #0
 8004e1c:	dd1a      	ble.n	8004e54 <_dtoa_r+0x45c>
 8004e1e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	f000 8457 	beq.w	80056d4 <_dtoa_r+0xcdc>
 8004e26:	2d00      	cmp	r5, #0
 8004e28:	dd10      	ble.n	8004e4c <_dtoa_r+0x454>
 8004e2a:	4651      	mov	r1, sl
 8004e2c:	462a      	mov	r2, r5
 8004e2e:	4630      	mov	r0, r6
 8004e30:	f001 fc9e 	bl	8006770 <__pow5mult>
 8004e34:	465a      	mov	r2, fp
 8004e36:	4682      	mov	sl, r0
 8004e38:	4630      	mov	r0, r6
 8004e3a:	4651      	mov	r1, sl
 8004e3c:	f001 fbfa 	bl	8006634 <__multiply>
 8004e40:	4659      	mov	r1, fp
 8004e42:	4607      	mov	r7, r0
 8004e44:	4630      	mov	r0, r6
 8004e46:	f001 faf3 	bl	8006430 <_Bfree>
 8004e4a:	46bb      	mov	fp, r7
 8004e4c:	9811      	ldr	r0, [sp, #68]	; 0x44
 8004e4e:	1b42      	subs	r2, r0, r5
 8004e50:	f040 847a 	bne.w	8005748 <_dtoa_r+0xd50>
 8004e54:	2101      	movs	r1, #1
 8004e56:	4630      	mov	r0, r6
 8004e58:	f001 fbe2 	bl	8006620 <__i2b>
 8004e5c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8004e5e:	2900      	cmp	r1, #0
 8004e60:	4680      	mov	r8, r0
 8004e62:	dd05      	ble.n	8004e70 <_dtoa_r+0x478>
 8004e64:	4641      	mov	r1, r8
 8004e66:	4630      	mov	r0, r6
 8004e68:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004e6a:	f001 fc81 	bl	8006770 <__pow5mult>
 8004e6e:	4680      	mov	r8, r0
 8004e70:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8004e72:	2a01      	cmp	r2, #1
 8004e74:	f340 80cc 	ble.w	8005010 <_dtoa_r+0x618>
 8004e78:	2500      	movs	r5, #0
 8004e7a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004e7c:	2001      	movs	r0, #1
 8004e7e:	2a00      	cmp	r2, #0
 8004e80:	f040 8364 	bne.w	800554c <_dtoa_r+0xb54>
 8004e84:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004e86:	1843      	adds	r3, r0, r1
 8004e88:	f013 031f 	ands.w	r3, r3, #31
 8004e8c:	f000 8296 	beq.w	80053bc <_dtoa_r+0x9c4>
 8004e90:	f1c3 0220 	rsb	r2, r3, #32
 8004e94:	2a04      	cmp	r2, #4
 8004e96:	f340 853e 	ble.w	8005916 <_dtoa_r+0xf1e>
 8004e9a:	f1c3 031c 	rsb	r3, r3, #28
 8004e9e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004ea0:	18e4      	adds	r4, r4, r3
 8004ea2:	18c9      	adds	r1, r1, r3
 8004ea4:	18d2      	adds	r2, r2, r3
 8004ea6:	910b      	str	r1, [sp, #44]	; 0x2c
 8004ea8:	9210      	str	r2, [sp, #64]	; 0x40
 8004eaa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004eac:	2a00      	cmp	r2, #0
 8004eae:	dd04      	ble.n	8004eba <_dtoa_r+0x4c2>
 8004eb0:	4659      	mov	r1, fp
 8004eb2:	4630      	mov	r0, r6
 8004eb4:	f001 fcae 	bl	8006814 <__lshift>
 8004eb8:	4683      	mov	fp, r0
 8004eba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	dd05      	ble.n	8004ecc <_dtoa_r+0x4d4>
 8004ec0:	4641      	mov	r1, r8
 8004ec2:	4630      	mov	r0, r6
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	f001 fca5 	bl	8006814 <__lshift>
 8004eca:	4680      	mov	r8, r0
 8004ecc:	9814      	ldr	r0, [sp, #80]	; 0x50
 8004ece:	2800      	cmp	r0, #0
 8004ed0:	f040 831f 	bne.w	8005512 <_dtoa_r+0xb1a>
 8004ed4:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8004ed6:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004ed8:	2a02      	cmp	r2, #2
 8004eda:	bfd4      	ite	le
 8004edc:	2300      	movle	r3, #0
 8004ede:	2301      	movgt	r3, #1
 8004ee0:	2800      	cmp	r0, #0
 8004ee2:	bfc8      	it	gt
 8004ee4:	2300      	movgt	r3, #0
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	f000 8223 	beq.w	8005332 <_dtoa_r+0x93a>
 8004eec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	f040 8219 	bne.w	8005326 <_dtoa_r+0x92e>
 8004ef4:	4641      	mov	r1, r8
 8004ef6:	2205      	movs	r2, #5
 8004ef8:	4630      	mov	r0, r6
 8004efa:	f001 fab5 	bl	8006468 <__multadd>
 8004efe:	4680      	mov	r8, r0
 8004f00:	4658      	mov	r0, fp
 8004f02:	4641      	mov	r1, r8
 8004f04:	f001 fce0 	bl	80068c8 <__mcmp>
 8004f08:	2800      	cmp	r0, #0
 8004f0a:	f340 820c 	ble.w	8005326 <_dtoa_r+0x92e>
 8004f0e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8004f10:	2500      	movs	r5, #0
 8004f12:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004f14:	2331      	movs	r3, #49	; 0x31
 8004f16:	3101      	adds	r1, #1
 8004f18:	f807 3b01 	strb.w	r3, [r7], #1
 8004f1c:	9109      	str	r1, [sp, #36]	; 0x24
 8004f1e:	4630      	mov	r0, r6
 8004f20:	4641      	mov	r1, r8
 8004f22:	f001 fa85 	bl	8006430 <_Bfree>
 8004f26:	f1ba 0f00 	cmp.w	sl, #0
 8004f2a:	d008      	beq.n	8004f3e <_dtoa_r+0x546>
 8004f2c:	4555      	cmp	r5, sl
 8004f2e:	bf18      	it	ne
 8004f30:	2d00      	cmpne	r5, #0
 8004f32:	f040 8253 	bne.w	80053dc <_dtoa_r+0x9e4>
 8004f36:	4630      	mov	r0, r6
 8004f38:	4651      	mov	r1, sl
 8004f3a:	f001 fa79 	bl	8006430 <_Bfree>
 8004f3e:	4659      	mov	r1, fp
 8004f40:	4630      	mov	r0, r6
 8004f42:	f001 fa75 	bl	8006430 <_Bfree>
 8004f46:	2200      	movs	r2, #0
 8004f48:	703a      	strb	r2, [r7, #0]
 8004f4a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8004f4c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004f4e:	1c4b      	adds	r3, r1, #1
 8004f50:	6013      	str	r3, [r2, #0]
 8004f52:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	f000 8246 	beq.w	80053e6 <_dtoa_r+0x9ee>
 8004f5a:	601f      	str	r7, [r3, #0]
 8004f5c:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004f5e:	e58a      	b.n	8004a76 <_dtoa_r+0x7e>
 8004f60:	2301      	movs	r3, #1
 8004f62:	9314      	str	r3, [sp, #80]	; 0x50
 8004f64:	e619      	b.n	8004b9a <_dtoa_r+0x1a2>
 8004f66:	2010      	movs	r0, #16
 8004f68:	f000 fe48 	bl	8005bfc <malloc>
 8004f6c:	6270      	str	r0, [r6, #36]	; 0x24
 8004f6e:	6045      	str	r5, [r0, #4]
 8004f70:	6085      	str	r5, [r0, #8]
 8004f72:	6005      	str	r5, [r0, #0]
 8004f74:	60c5      	str	r5, [r0, #12]
 8004f76:	e558      	b.n	8004a2a <_dtoa_r+0x32>
 8004f78:	9910      	ldr	r1, [sp, #64]	; 0x40
 8004f7a:	2000      	movs	r0, #0
 8004f7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f7e:	9013      	str	r0, [sp, #76]	; 0x4c
 8004f80:	1a89      	subs	r1, r1, r2
 8004f82:	4253      	negs	r3, r2
 8004f84:	9110      	str	r1, [sp, #64]	; 0x40
 8004f86:	9311      	str	r3, [sp, #68]	; 0x44
 8004f88:	e619      	b.n	8004bbe <_dtoa_r+0x1c6>
 8004f8a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004f8c:	f003 fb4c 	bl	8008628 <__aeabi_i2d>
 8004f90:	4622      	mov	r2, r4
 8004f92:	462b      	mov	r3, r5
 8004f94:	f003 fe16 	bl	8008bc4 <__aeabi_dcmpeq>
 8004f98:	2800      	cmp	r0, #0
 8004f9a:	f47f ade6 	bne.w	8004b6a <_dtoa_r+0x172>
 8004f9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fa0:	3b01      	subs	r3, #1
 8004fa2:	9309      	str	r3, [sp, #36]	; 0x24
 8004fa4:	e5e1      	b.n	8004b6a <_dtoa_r+0x172>
 8004fa6:	427f      	negs	r7, r7
 8004fa8:	2000      	movs	r0, #0
 8004faa:	9710      	str	r7, [sp, #64]	; 0x40
 8004fac:	900b      	str	r0, [sp, #44]	; 0x2c
 8004fae:	e5fc      	b.n	8004baa <_dtoa_r+0x1b2>
 8004fb0:	f64f 30ee 	movw	r0, #64494	; 0xfbee
 8004fb4:	9904      	ldr	r1, [sp, #16]
 8004fb6:	f6cf 70ff 	movt	r0, #65535	; 0xffff
 8004fba:	1bc0      	subs	r0, r0, r7
 8004fbc:	fa01 f000 	lsl.w	r0, r1, r0
 8004fc0:	e59e      	b.n	8004b00 <_dtoa_r+0x108>
 8004fc2:	9014      	str	r0, [sp, #80]	; 0x50
 8004fc4:	e5e9      	b.n	8004b9a <_dtoa_r+0x1a2>
 8004fc6:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8004fc8:	2901      	cmp	r1, #1
 8004fca:	f340 83de 	ble.w	800578a <_dtoa_r+0xd92>
 8004fce:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004fd0:	9911      	ldr	r1, [sp, #68]	; 0x44
 8004fd2:	1e43      	subs	r3, r0, #1
 8004fd4:	4299      	cmp	r1, r3
 8004fd6:	bfa8      	it	ge
 8004fd8:	ebc3 0501 	rsbge	r5, r3, r1
 8004fdc:	da06      	bge.n	8004fec <_dtoa_r+0x5f4>
 8004fde:	9811      	ldr	r0, [sp, #68]	; 0x44
 8004fe0:	2500      	movs	r5, #0
 8004fe2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8004fe4:	1a1a      	subs	r2, r3, r0
 8004fe6:	9311      	str	r3, [sp, #68]	; 0x44
 8004fe8:	1889      	adds	r1, r1, r2
 8004fea:	9113      	str	r1, [sp, #76]	; 0x4c
 8004fec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004fee:	2a00      	cmp	r2, #0
 8004ff0:	f2c0 83f8 	blt.w	80057e4 <_dtoa_r+0xdec>
 8004ff4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8004ff6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004ff8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004ffa:	4630      	mov	r0, r6
 8004ffc:	2101      	movs	r1, #1
 8004ffe:	18d2      	adds	r2, r2, r3
 8005000:	9210      	str	r2, [sp, #64]	; 0x40
 8005002:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005004:	18d2      	adds	r2, r2, r3
 8005006:	920b      	str	r2, [sp, #44]	; 0x2c
 8005008:	f001 fb0a 	bl	8006620 <__i2b>
 800500c:	4682      	mov	sl, r0
 800500e:	e6f4      	b.n	8004dfa <_dtoa_r+0x402>
 8005010:	9b04      	ldr	r3, [sp, #16]
 8005012:	2b00      	cmp	r3, #0
 8005014:	f47f af30 	bne.w	8004e78 <_dtoa_r+0x480>
 8005018:	9b05      	ldr	r3, [sp, #20]
 800501a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800501e:	2a00      	cmp	r2, #0
 8005020:	f040 843d 	bne.w	800589e <_dtoa_r+0xea6>
 8005024:	2500      	movs	r5, #0
 8005026:	f6c7 75f0 	movt	r5, #32752	; 0x7ff0
 800502a:	401d      	ands	r5, r3
 800502c:	2d00      	cmp	r5, #0
 800502e:	f43f af24 	beq.w	8004e7a <_dtoa_r+0x482>
 8005032:	9810      	ldr	r0, [sp, #64]	; 0x40
 8005034:	2501      	movs	r5, #1
 8005036:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005038:	3001      	adds	r0, #1
 800503a:	9010      	str	r0, [sp, #64]	; 0x40
 800503c:	3101      	adds	r1, #1
 800503e:	910b      	str	r1, [sp, #44]	; 0x2c
 8005040:	e71b      	b.n	8004e7a <_dtoa_r+0x482>
 8005042:	2101      	movs	r1, #1
 8005044:	9112      	str	r1, [sp, #72]	; 0x48
 8005046:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8005048:	2800      	cmp	r0, #0
 800504a:	f340 833e 	ble.w	80056ca <_dtoa_r+0xcd2>
 800504e:	4682      	mov	sl, r0
 8005050:	280e      	cmp	r0, #14
 8005052:	bf8c      	ite	hi
 8005054:	2400      	movhi	r4, #0
 8005056:	f004 0401 	andls.w	r4, r4, #1
 800505a:	9015      	str	r0, [sp, #84]	; 0x54
 800505c:	900c      	str	r0, [sp, #48]	; 0x30
 800505e:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8005060:	2300      	movs	r3, #0
 8005062:	f1ba 0f17 	cmp.w	sl, #23
 8005066:	606b      	str	r3, [r5, #4]
 8005068:	d909      	bls.n	800507e <_dtoa_r+0x686>
 800506a:	2201      	movs	r2, #1
 800506c:	2304      	movs	r3, #4
 800506e:	005b      	lsls	r3, r3, #1
 8005070:	4610      	mov	r0, r2
 8005072:	f103 0114 	add.w	r1, r3, #20
 8005076:	3201      	adds	r2, #1
 8005078:	4551      	cmp	r1, sl
 800507a:	d9f8      	bls.n	800506e <_dtoa_r+0x676>
 800507c:	6068      	str	r0, [r5, #4]
 800507e:	4630      	mov	r0, r6
 8005080:	6869      	ldr	r1, [r5, #4]
 8005082:	f001 f99f 	bl	80063c4 <_Balloc>
 8005086:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005088:	6028      	str	r0, [r5, #0]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	930d      	str	r3, [sp, #52]	; 0x34
 800508e:	2c00      	cmp	r4, #0
 8005090:	f43f ade3 	beq.w	8004c5a <_dtoa_r+0x262>
 8005094:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005096:	2900      	cmp	r1, #0
 8005098:	f340 81a8 	ble.w	80053ec <_dtoa_r+0x9f4>
 800509c:	f001 020f 	and.w	r2, r1, #15
 80050a0:	f249 7350 	movw	r3, #38736	; 0x9750
 80050a4:	f6c0 0300 	movt	r3, #2048	; 0x800
 80050a8:	110f      	asrs	r7, r1, #4
 80050aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80050ae:	06fa      	lsls	r2, r7, #27
 80050b0:	e9d3 4500 	ldrd	r4, r5, [r3]
 80050b4:	f140 818b 	bpl.w	80053ce <_dtoa_r+0x9d6>
 80050b8:	f649 0340 	movw	r3, #38976	; 0x9840
 80050bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80050c0:	f6c0 0300 	movt	r3, #2048	; 0x800
 80050c4:	f007 070f 	and.w	r7, r7, #15
 80050c8:	f04f 0803 	mov.w	r8, #3
 80050cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80050d0:	f003 fc3a 	bl	8008948 <__aeabi_ddiv>
 80050d4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80050d8:	b19f      	cbz	r7, 8005102 <_dtoa_r+0x70a>
 80050da:	f649 0940 	movw	r9, #38976	; 0x9840
 80050de:	f6c0 0900 	movt	r9, #2048	; 0x800
 80050e2:	07fb      	lsls	r3, r7, #31
 80050e4:	4620      	mov	r0, r4
 80050e6:	4629      	mov	r1, r5
 80050e8:	d507      	bpl.n	80050fa <_dtoa_r+0x702>
 80050ea:	e9d9 2300 	ldrd	r2, r3, [r9]
 80050ee:	f108 0801 	add.w	r8, r8, #1
 80050f2:	f003 faff 	bl	80086f4 <__aeabi_dmul>
 80050f6:	4604      	mov	r4, r0
 80050f8:	460d      	mov	r5, r1
 80050fa:	107f      	asrs	r7, r7, #1
 80050fc:	f109 0908 	add.w	r9, r9, #8
 8005100:	d1ef      	bne.n	80050e2 <_dtoa_r+0x6ea>
 8005102:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005106:	4622      	mov	r2, r4
 8005108:	462b      	mov	r3, r5
 800510a:	f003 fc1d 	bl	8008948 <__aeabi_ddiv>
 800510e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8005112:	9914      	ldr	r1, [sp, #80]	; 0x50
 8005114:	b151      	cbz	r1, 800512c <_dtoa_r+0x734>
 8005116:	2300      	movs	r3, #0
 8005118:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800511c:	2200      	movs	r2, #0
 800511e:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 8005122:	f003 fd59 	bl	8008bd8 <__aeabi_dcmplt>
 8005126:	2800      	cmp	r0, #0
 8005128:	f040 82dc 	bne.w	80056e4 <_dtoa_r+0xcec>
 800512c:	4640      	mov	r0, r8
 800512e:	f003 fa7b 	bl	8008628 <__aeabi_i2d>
 8005132:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8005136:	f003 fadd 	bl	80086f4 <__aeabi_dmul>
 800513a:	2300      	movs	r3, #0
 800513c:	2200      	movs	r2, #0
 800513e:	f2c4 031c 	movt	r3, #16412	; 0x401c
 8005142:	f003 f925 	bl	8008390 <__adddf3>
 8005146:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005148:	4604      	mov	r4, r0
 800514a:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800514e:	2a00      	cmp	r2, #0
 8005150:	f000 80cc 	beq.w	80052ec <_dtoa_r+0x8f4>
 8005154:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005156:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 800515a:	931b      	str	r3, [sp, #108]	; 0x6c
 800515c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800515e:	2800      	cmp	r0, #0
 8005160:	f000 817a 	beq.w	8005458 <_dtoa_r+0xa60>
 8005164:	f249 7350 	movw	r3, #38736	; 0x9750
 8005168:	2100      	movs	r1, #0
 800516a:	f6c0 0300 	movt	r3, #2048	; 0x800
 800516e:	2000      	movs	r0, #0
 8005170:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8005174:	f6c3 71e0 	movt	r1, #16352	; 0x3fe0
 8005178:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800517a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800517e:	f003 fbe3 	bl	8008948 <__aeabi_ddiv>
 8005182:	4622      	mov	r2, r4
 8005184:	462b      	mov	r3, r5
 8005186:	f003 f901 	bl	800838c <__aeabi_dsub>
 800518a:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
 800518e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005192:	f003 fd49 	bl	8008c28 <__aeabi_d2iz>
 8005196:	4680      	mov	r8, r0
 8005198:	f003 fa46 	bl	8008628 <__aeabi_i2d>
 800519c:	f108 0830 	add.w	r8, r8, #48	; 0x30
 80051a0:	fa5f fa88 	uxtb.w	sl, r8
 80051a4:	4602      	mov	r2, r0
 80051a6:	460b      	mov	r3, r1
 80051a8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80051ac:	f003 f8ee 	bl	800838c <__aeabi_dsub>
 80051b0:	f807 ab01 	strb.w	sl, [r7], #1
 80051b4:	4604      	mov	r4, r0
 80051b6:	460d      	mov	r5, r1
 80051b8:	4622      	mov	r2, r4
 80051ba:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 80051be:	462b      	mov	r3, r5
 80051c0:	f003 fd28 	bl	8008c14 <__aeabi_dcmpgt>
 80051c4:	2800      	cmp	r0, #0
 80051c6:	f040 839e 	bne.w	8005906 <_dtoa_r+0xf0e>
 80051ca:	2100      	movs	r1, #0
 80051cc:	4622      	mov	r2, r4
 80051ce:	462b      	mov	r3, r5
 80051d0:	2000      	movs	r0, #0
 80051d2:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 80051d6:	f003 f8d9 	bl	800838c <__aeabi_dsub>
 80051da:	4602      	mov	r2, r0
 80051dc:	460b      	mov	r3, r1
 80051de:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 80051e2:	f003 fd17 	bl	8008c14 <__aeabi_dcmpgt>
 80051e6:	2800      	cmp	r0, #0
 80051e8:	f040 838a 	bne.w	8005900 <_dtoa_r+0xf08>
 80051ec:	f1b9 0f01 	cmp.w	r9, #1
 80051f0:	f77f ad33 	ble.w	8004c5a <_dtoa_r+0x262>
 80051f4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80051f6:	46b8      	mov	r8, r7
 80051f8:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80051fc:	4489      	add	r9, r1
 80051fe:	9618      	str	r6, [sp, #96]	; 0x60
 8005200:	46cb      	mov	fp, r9
 8005202:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8005206:	e00f      	b.n	8005228 <_dtoa_r+0x830>
 8005208:	2100      	movs	r1, #0
 800520a:	2000      	movs	r0, #0
 800520c:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 8005210:	f003 f8bc 	bl	800838c <__aeabi_dsub>
 8005214:	4632      	mov	r2, r6
 8005216:	463b      	mov	r3, r7
 8005218:	f003 fcde 	bl	8008bd8 <__aeabi_dcmplt>
 800521c:	2800      	cmp	r0, #0
 800521e:	f040 82e5 	bne.w	80057ec <_dtoa_r+0xdf4>
 8005222:	45d8      	cmp	r8, fp
 8005224:	f000 82e9 	beq.w	80057fa <_dtoa_r+0xe02>
 8005228:	2300      	movs	r3, #0
 800522a:	2200      	movs	r2, #0
 800522c:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8005230:	4630      	mov	r0, r6
 8005232:	4639      	mov	r1, r7
 8005234:	f003 fa5e 	bl	80086f4 <__aeabi_dmul>
 8005238:	2300      	movs	r3, #0
 800523a:	2200      	movs	r2, #0
 800523c:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8005240:	4606      	mov	r6, r0
 8005242:	460f      	mov	r7, r1
 8005244:	4620      	mov	r0, r4
 8005246:	4629      	mov	r1, r5
 8005248:	f003 fa54 	bl	80086f4 <__aeabi_dmul>
 800524c:	460d      	mov	r5, r1
 800524e:	4604      	mov	r4, r0
 8005250:	f003 fcea 	bl	8008c28 <__aeabi_d2iz>
 8005254:	4681      	mov	r9, r0
 8005256:	f003 f9e7 	bl	8008628 <__aeabi_i2d>
 800525a:	f109 0930 	add.w	r9, r9, #48	; 0x30
 800525e:	fa5f fa89 	uxtb.w	sl, r9
 8005262:	4602      	mov	r2, r0
 8005264:	460b      	mov	r3, r1
 8005266:	4620      	mov	r0, r4
 8005268:	4629      	mov	r1, r5
 800526a:	f003 f88f 	bl	800838c <__aeabi_dsub>
 800526e:	4632      	mov	r2, r6
 8005270:	463b      	mov	r3, r7
 8005272:	f808 ab01 	strb.w	sl, [r8], #1
 8005276:	46c1      	mov	r9, r8
 8005278:	4604      	mov	r4, r0
 800527a:	460d      	mov	r5, r1
 800527c:	f003 fcac 	bl	8008bd8 <__aeabi_dcmplt>
 8005280:	4622      	mov	r2, r4
 8005282:	462b      	mov	r3, r5
 8005284:	2800      	cmp	r0, #0
 8005286:	d0bf      	beq.n	8005208 <_dtoa_r+0x810>
 8005288:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800528a:	4647      	mov	r7, r8
 800528c:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 8005290:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8005292:	9009      	str	r0, [sp, #36]	; 0x24
 8005294:	e653      	b.n	8004f3e <_dtoa_r+0x546>
 8005296:	2201      	movs	r2, #1
 8005298:	9212      	str	r2, [sp, #72]	; 0x48
 800529a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800529c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800529e:	189a      	adds	r2, r3, r2
 80052a0:	9215      	str	r2, [sp, #84]	; 0x54
 80052a2:	f102 0a01 	add.w	sl, r2, #1
 80052a6:	f1ba 0f00 	cmp.w	sl, #0
 80052aa:	f340 8202 	ble.w	80056b2 <_dtoa_r+0xcba>
 80052ae:	f1ba 0f0e 	cmp.w	sl, #14
 80052b2:	bf8c      	ite	hi
 80052b4:	2400      	movhi	r4, #0
 80052b6:	f004 0401 	andls.w	r4, r4, #1
 80052ba:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80052be:	e6ce      	b.n	800505e <_dtoa_r+0x666>
 80052c0:	2100      	movs	r1, #0
 80052c2:	9112      	str	r1, [sp, #72]	; 0x48
 80052c4:	e7e9      	b.n	800529a <_dtoa_r+0x8a2>
 80052c6:	2300      	movs	r3, #0
 80052c8:	9312      	str	r3, [sp, #72]	; 0x48
 80052ca:	e6bc      	b.n	8005046 <_dtoa_r+0x64e>
 80052cc:	4640      	mov	r0, r8
 80052ce:	f003 f9ab 	bl	8008628 <__aeabi_i2d>
 80052d2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80052d6:	f003 fa0d 	bl	80086f4 <__aeabi_dmul>
 80052da:	2300      	movs	r3, #0
 80052dc:	2200      	movs	r2, #0
 80052de:	f2c4 031c 	movt	r3, #16412	; 0x401c
 80052e2:	f003 f855 	bl	8008390 <__adddf3>
 80052e6:	4604      	mov	r4, r0
 80052e8:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 80052ec:	2300      	movs	r3, #0
 80052ee:	2200      	movs	r2, #0
 80052f0:	f2c4 0314 	movt	r3, #16404	; 0x4014
 80052f4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80052f8:	f003 f848 	bl	800838c <__aeabi_dsub>
 80052fc:	4622      	mov	r2, r4
 80052fe:	462b      	mov	r3, r5
 8005300:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8005304:	f003 fc86 	bl	8008c14 <__aeabi_dcmpgt>
 8005308:	4680      	mov	r8, r0
 800530a:	2800      	cmp	r0, #0
 800530c:	f040 80a0 	bne.w	8005450 <_dtoa_r+0xa58>
 8005310:	4622      	mov	r2, r4
 8005312:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005316:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800531a:	f003 fc5d 	bl	8008bd8 <__aeabi_dcmplt>
 800531e:	2800      	cmp	r0, #0
 8005320:	f43f ac9b 	beq.w	8004c5a <_dtoa_r+0x262>
 8005324:	46c2      	mov	sl, r8
 8005326:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8005328:	2500      	movs	r5, #0
 800532a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800532c:	43c0      	mvns	r0, r0
 800532e:	9009      	str	r0, [sp, #36]	; 0x24
 8005330:	e5f5      	b.n	8004f1e <_dtoa_r+0x526>
 8005332:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005334:	2a00      	cmp	r2, #0
 8005336:	f040 813e 	bne.w	80055b6 <_dtoa_r+0xbbe>
 800533a:	2400      	movs	r4, #0
 800533c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800533e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8005340:	e002      	b.n	8005348 <_dtoa_r+0x950>
 8005342:	f001 f891 	bl	8006468 <__multadd>
 8005346:	4683      	mov	fp, r0
 8005348:	4641      	mov	r1, r8
 800534a:	4658      	mov	r0, fp
 800534c:	f7ff fab8 	bl	80048c0 <quorem>
 8005350:	220a      	movs	r2, #10
 8005352:	2300      	movs	r3, #0
 8005354:	4659      	mov	r1, fp
 8005356:	f100 0c30 	add.w	ip, r0, #48	; 0x30
 800535a:	f807 c004 	strb.w	ip, [r7, r4]
 800535e:	3401      	adds	r4, #1
 8005360:	4630      	mov	r0, r6
 8005362:	42ac      	cmp	r4, r5
 8005364:	dbed      	blt.n	8005342 <_dtoa_r+0x94a>
 8005366:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8005368:	2500      	movs	r5, #0
 800536a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800536c:	2801      	cmp	r0, #1
 800536e:	bfac      	ite	ge
 8005370:	183f      	addge	r7, r7, r0
 8005372:	3701      	addlt	r7, #1
 8005374:	4659      	mov	r1, fp
 8005376:	2201      	movs	r2, #1
 8005378:	4630      	mov	r0, r6
 800537a:	f8cd c00c 	str.w	ip, [sp, #12]
 800537e:	f001 fa49 	bl	8006814 <__lshift>
 8005382:	4641      	mov	r1, r8
 8005384:	4683      	mov	fp, r0
 8005386:	f001 fa9f 	bl	80068c8 <__mcmp>
 800538a:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800538e:	2800      	cmp	r0, #0
 8005390:	f340 823f 	ble.w	8005812 <_dtoa_r+0xe1a>
 8005394:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005398:	990d      	ldr	r1, [sp, #52]	; 0x34
 800539a:	e002      	b.n	80053a2 <_dtoa_r+0x9aa>
 800539c:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 80053a0:	461f      	mov	r7, r3
 80053a2:	1e7b      	subs	r3, r7, #1
 80053a4:	2a39      	cmp	r2, #57	; 0x39
 80053a6:	f040 826f 	bne.w	8005888 <_dtoa_r+0xe90>
 80053aa:	428b      	cmp	r3, r1
 80053ac:	d1f6      	bne.n	800539c <_dtoa_r+0x9a4>
 80053ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80053b0:	2331      	movs	r3, #49	; 0x31
 80053b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80053b4:	7013      	strb	r3, [r2, #0]
 80053b6:	3101      	adds	r1, #1
 80053b8:	9109      	str	r1, [sp, #36]	; 0x24
 80053ba:	e5b0      	b.n	8004f1e <_dtoa_r+0x526>
 80053bc:	231c      	movs	r3, #28
 80053be:	9810      	ldr	r0, [sp, #64]	; 0x40
 80053c0:	18e4      	adds	r4, r4, r3
 80053c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80053c4:	18c0      	adds	r0, r0, r3
 80053c6:	9010      	str	r0, [sp, #64]	; 0x40
 80053c8:	18c9      	adds	r1, r1, r3
 80053ca:	910b      	str	r1, [sp, #44]	; 0x2c
 80053cc:	e56d      	b.n	8004eaa <_dtoa_r+0x4b2>
 80053ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80053d2:	f04f 0802 	mov.w	r8, #2
 80053d6:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80053da:	e67d      	b.n	80050d8 <_dtoa_r+0x6e0>
 80053dc:	4630      	mov	r0, r6
 80053de:	4629      	mov	r1, r5
 80053e0:	f001 f826 	bl	8006430 <_Bfree>
 80053e4:	e5a7      	b.n	8004f36 <_dtoa_r+0x53e>
 80053e6:	980d      	ldr	r0, [sp, #52]	; 0x34
 80053e8:	f7ff bb45 	b.w	8004a76 <_dtoa_r+0x7e>
 80053ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053ee:	425c      	negs	r4, r3
 80053f0:	2c00      	cmp	r4, #0
 80053f2:	f000 81a2 	beq.w	800573a <_dtoa_r+0xd42>
 80053f6:	f004 020f 	and.w	r2, r4, #15
 80053fa:	f249 7350 	movw	r3, #38736	; 0x9750
 80053fe:	f6c0 0300 	movt	r3, #2048	; 0x800
 8005402:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005406:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800540a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800540e:	f003 f971 	bl	80086f4 <__aeabi_dmul>
 8005412:	1124      	asrs	r4, r4, #4
 8005414:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8005418:	f000 8268 	beq.w	80058ec <_dtoa_r+0xef4>
 800541c:	f649 0540 	movw	r5, #38976	; 0x9840
 8005420:	f04f 0802 	mov.w	r8, #2
 8005424:	f6c0 0500 	movt	r5, #2048	; 0x800
 8005428:	4602      	mov	r2, r0
 800542a:	460b      	mov	r3, r1
 800542c:	07e7      	lsls	r7, r4, #31
 800542e:	4610      	mov	r0, r2
 8005430:	4619      	mov	r1, r3
 8005432:	d507      	bpl.n	8005444 <_dtoa_r+0xa4c>
 8005434:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005438:	f108 0801 	add.w	r8, r8, #1
 800543c:	f003 f95a 	bl	80086f4 <__aeabi_dmul>
 8005440:	4602      	mov	r2, r0
 8005442:	460b      	mov	r3, r1
 8005444:	3508      	adds	r5, #8
 8005446:	1064      	asrs	r4, r4, #1
 8005448:	d1f0      	bne.n	800542c <_dtoa_r+0xa34>
 800544a:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800544e:	e660      	b.n	8005112 <_dtoa_r+0x71a>
 8005450:	f04f 0800 	mov.w	r8, #0
 8005454:	46c2      	mov	sl, r8
 8005456:	e55a      	b.n	8004f0e <_dtoa_r+0x516>
 8005458:	f109 32ff 	add.w	r2, r9, #4294967295
 800545c:	9216      	str	r2, [sp, #88]	; 0x58
 800545e:	9816      	ldr	r0, [sp, #88]	; 0x58
 8005460:	f249 7150 	movw	r1, #38736	; 0x9750
 8005464:	f6c0 0100 	movt	r1, #2048	; 0x800
 8005468:	4622      	mov	r2, r4
 800546a:	462b      	mov	r3, r5
 800546c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800546e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8005472:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005476:	f003 f93d 	bl	80086f4 <__aeabi_dmul>
 800547a:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
 800547e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005482:	f003 fbd1 	bl	8008c28 <__aeabi_d2iz>
 8005486:	4680      	mov	r8, r0
 8005488:	f003 f8ce 	bl	8008628 <__aeabi_i2d>
 800548c:	f108 0830 	add.w	r8, r8, #48	; 0x30
 8005490:	4602      	mov	r2, r0
 8005492:	460b      	mov	r3, r1
 8005494:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005498:	f002 ff78 	bl	800838c <__aeabi_dsub>
 800549c:	f1b9 0f01 	cmp.w	r9, #1
 80054a0:	f807 8b01 	strb.w	r8, [r7], #1
 80054a4:	4604      	mov	r4, r0
 80054a6:	460d      	mov	r5, r1
 80054a8:	d020      	beq.n	80054ec <_dtoa_r+0xaf4>
 80054aa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80054ac:	1e53      	subs	r3, r2, #1
 80054ae:	4690      	mov	r8, r2
 80054b0:	4499      	add	r9, r3
 80054b2:	2300      	movs	r3, #0
 80054b4:	2200      	movs	r2, #0
 80054b6:	f2c4 0324 	movt	r3, #16420	; 0x4024
 80054ba:	f003 f91b 	bl	80086f4 <__aeabi_dmul>
 80054be:	460d      	mov	r5, r1
 80054c0:	4604      	mov	r4, r0
 80054c2:	f003 fbb1 	bl	8008c28 <__aeabi_d2iz>
 80054c6:	4682      	mov	sl, r0
 80054c8:	f003 f8ae 	bl	8008628 <__aeabi_i2d>
 80054cc:	f10a 0a30 	add.w	sl, sl, #48	; 0x30
 80054d0:	4602      	mov	r2, r0
 80054d2:	460b      	mov	r3, r1
 80054d4:	4620      	mov	r0, r4
 80054d6:	4629      	mov	r1, r5
 80054d8:	f002 ff58 	bl	800838c <__aeabi_dsub>
 80054dc:	f808 af01 	strb.w	sl, [r8, #1]!
 80054e0:	45c8      	cmp	r8, r9
 80054e2:	d1e6      	bne.n	80054b2 <_dtoa_r+0xaba>
 80054e4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80054e6:	4604      	mov	r4, r0
 80054e8:	460d      	mov	r5, r1
 80054ea:	18ff      	adds	r7, r7, r3
 80054ec:	2300      	movs	r3, #0
 80054ee:	2200      	movs	r2, #0
 80054f0:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
 80054f4:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 80054f8:	f002 ff4a 	bl	8008390 <__adddf3>
 80054fc:	4622      	mov	r2, r4
 80054fe:	462b      	mov	r3, r5
 8005500:	f003 fb6a 	bl	8008bd8 <__aeabi_dcmplt>
 8005504:	2800      	cmp	r0, #0
 8005506:	f000 8126 	beq.w	8005756 <_dtoa_r+0xd5e>
 800550a:	f817 ac01 	ldrb.w	sl, [r7, #-1]
 800550e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005510:	e459      	b.n	8004dc6 <_dtoa_r+0x3ce>
 8005512:	4658      	mov	r0, fp
 8005514:	4641      	mov	r1, r8
 8005516:	f001 f9d7 	bl	80068c8 <__mcmp>
 800551a:	2800      	cmp	r0, #0
 800551c:	f6bf acda 	bge.w	8004ed4 <_dtoa_r+0x4dc>
 8005520:	4659      	mov	r1, fp
 8005522:	220a      	movs	r2, #10
 8005524:	4630      	mov	r0, r6
 8005526:	2300      	movs	r3, #0
 8005528:	f000 ff9e 	bl	8006468 <__multadd>
 800552c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800552e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005530:	3901      	subs	r1, #1
 8005532:	9109      	str	r1, [sp, #36]	; 0x24
 8005534:	4683      	mov	fp, r0
 8005536:	bb52      	cbnz	r2, 800558e <_dtoa_r+0xb96>
 8005538:	9815      	ldr	r0, [sp, #84]	; 0x54
 800553a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800553c:	2800      	cmp	r0, #0
 800553e:	dc03      	bgt.n	8005548 <_dtoa_r+0xb50>
 8005540:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8005542:	2902      	cmp	r1, #2
 8005544:	f300 81ec 	bgt.w	8005920 <_dtoa_r+0xf28>
 8005548:	920c      	str	r2, [sp, #48]	; 0x30
 800554a:	e6f6      	b.n	800533a <_dtoa_r+0x942>
 800554c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8005550:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8005554:	6918      	ldr	r0, [r3, #16]
 8005556:	f001 f817 	bl	8006588 <__hi0bits>
 800555a:	f1c0 0020 	rsb	r0, r0, #32
 800555e:	e491      	b.n	8004e84 <_dtoa_r+0x48c>
 8005560:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005562:	2b00      	cmp	r3, #0
 8005564:	f040 8163 	bne.w	800582e <_dtoa_r+0xe36>
 8005568:	2300      	movs	r3, #0
 800556a:	2200      	movs	r2, #0
 800556c:	f2c4 0314 	movt	r3, #16404	; 0x4014
 8005570:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005574:	f003 f8be 	bl	80086f4 <__aeabi_dmul>
 8005578:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800557c:	f003 fb40 	bl	8008c00 <__aeabi_dcmpge>
 8005580:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8005584:	46c2      	mov	sl, r8
 8005586:	2800      	cmp	r0, #0
 8005588:	f47f aecd 	bne.w	8005326 <_dtoa_r+0x92e>
 800558c:	e4bf      	b.n	8004f0e <_dtoa_r+0x516>
 800558e:	2300      	movs	r3, #0
 8005590:	4651      	mov	r1, sl
 8005592:	220a      	movs	r2, #10
 8005594:	4630      	mov	r0, r6
 8005596:	f000 ff67 	bl	8006468 <__multadd>
 800559a:	9915      	ldr	r1, [sp, #84]	; 0x54
 800559c:	2900      	cmp	r1, #0
 800559e:	bfcc      	ite	gt
 80055a0:	2300      	movgt	r3, #0
 80055a2:	2301      	movle	r3, #1
 80055a4:	4682      	mov	sl, r0
 80055a6:	9828      	ldr	r0, [sp, #160]	; 0xa0
 80055a8:	2802      	cmp	r0, #2
 80055aa:	bfd8      	it	le
 80055ac:	2300      	movle	r3, #0
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	f040 81ad 	bne.w	800590e <_dtoa_r+0xf16>
 80055b4:	910c      	str	r1, [sp, #48]	; 0x30
 80055b6:	2c00      	cmp	r4, #0
 80055b8:	dd05      	ble.n	80055c6 <_dtoa_r+0xbce>
 80055ba:	4651      	mov	r1, sl
 80055bc:	4630      	mov	r0, r6
 80055be:	4622      	mov	r2, r4
 80055c0:	f001 f928 	bl	8006814 <__lshift>
 80055c4:	4682      	mov	sl, r0
 80055c6:	46d1      	mov	r9, sl
 80055c8:	2d00      	cmp	r5, #0
 80055ca:	f040 8147 	bne.w	800585c <_dtoa_r+0xe64>
 80055ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80055d0:	4655      	mov	r5, sl
 80055d2:	980c      	ldr	r0, [sp, #48]	; 0x30
 80055d4:	9904      	ldr	r1, [sp, #16]
 80055d6:	1c5c      	adds	r4, r3, #1
 80055d8:	1818      	adds	r0, r3, r0
 80055da:	900c      	str	r0, [sp, #48]	; 0x30
 80055dc:	f001 0101 	and.w	r1, r1, #1
 80055e0:	910a      	str	r1, [sp, #40]	; 0x28
 80055e2:	4641      	mov	r1, r8
 80055e4:	4658      	mov	r0, fp
 80055e6:	f7ff f96b 	bl	80048c0 <quorem>
 80055ea:	4629      	mov	r1, r5
 80055ec:	4607      	mov	r7, r0
 80055ee:	4658      	mov	r0, fp
 80055f0:	f001 f96a 	bl	80068c8 <__mcmp>
 80055f4:	464a      	mov	r2, r9
 80055f6:	4641      	mov	r1, r8
 80055f8:	4682      	mov	sl, r0
 80055fa:	4630      	mov	r0, r6
 80055fc:	f001 f982 	bl	8006904 <__mdiff>
 8005600:	1e63      	subs	r3, r4, #1
 8005602:	930b      	str	r3, [sp, #44]	; 0x2c
 8005604:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005608:	9304      	str	r3, [sp, #16]
 800560a:	68c3      	ldr	r3, [r0, #12]
 800560c:	4602      	mov	r2, r0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d03d      	beq.n	800568e <_dtoa_r+0xc96>
 8005612:	2301      	movs	r3, #1
 8005614:	4630      	mov	r0, r6
 8005616:	4611      	mov	r1, r2
 8005618:	9303      	str	r3, [sp, #12]
 800561a:	f000 ff09 	bl	8006430 <_Bfree>
 800561e:	9b03      	ldr	r3, [sp, #12]
 8005620:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8005622:	4318      	orrs	r0, r3
 8005624:	d103      	bne.n	800562e <_dtoa_r+0xc36>
 8005626:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005628:	2900      	cmp	r1, #0
 800562a:	f000 8154 	beq.w	80058d6 <_dtoa_r+0xede>
 800562e:	f1ba 0f00 	cmp.w	sl, #0
 8005632:	f2c0 80b8 	blt.w	80057a6 <_dtoa_r+0xdae>
 8005636:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8005638:	ea5a 0202 	orrs.w	r2, sl, r2
 800563c:	d103      	bne.n	8005646 <_dtoa_r+0xc4e>
 800563e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005640:	2800      	cmp	r0, #0
 8005642:	f000 80b0 	beq.w	80057a6 <_dtoa_r+0xdae>
 8005646:	2b00      	cmp	r3, #0
 8005648:	f300 812c 	bgt.w	80058a4 <_dtoa_r+0xeac>
 800564c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800564e:	4627      	mov	r7, r4
 8005650:	9a04      	ldr	r2, [sp, #16]
 8005652:	429c      	cmp	r4, r3
 8005654:	f804 2c01 	strb.w	r2, [r4, #-1]
 8005658:	f000 8131 	beq.w	80058be <_dtoa_r+0xec6>
 800565c:	4659      	mov	r1, fp
 800565e:	220a      	movs	r2, #10
 8005660:	2300      	movs	r3, #0
 8005662:	4630      	mov	r0, r6
 8005664:	f000 ff00 	bl	8006468 <__multadd>
 8005668:	454d      	cmp	r5, r9
 800566a:	4683      	mov	fp, r0
 800566c:	d017      	beq.n	800569e <_dtoa_r+0xca6>
 800566e:	4629      	mov	r1, r5
 8005670:	220a      	movs	r2, #10
 8005672:	2300      	movs	r3, #0
 8005674:	4630      	mov	r0, r6
 8005676:	f000 fef7 	bl	8006468 <__multadd>
 800567a:	4649      	mov	r1, r9
 800567c:	220a      	movs	r2, #10
 800567e:	2300      	movs	r3, #0
 8005680:	3401      	adds	r4, #1
 8005682:	4605      	mov	r5, r0
 8005684:	4630      	mov	r0, r6
 8005686:	f000 feef 	bl	8006468 <__multadd>
 800568a:	4681      	mov	r9, r0
 800568c:	e7a9      	b.n	80055e2 <_dtoa_r+0xbea>
 800568e:	4611      	mov	r1, r2
 8005690:	4658      	mov	r0, fp
 8005692:	9203      	str	r2, [sp, #12]
 8005694:	f001 f918 	bl	80068c8 <__mcmp>
 8005698:	9a03      	ldr	r2, [sp, #12]
 800569a:	4603      	mov	r3, r0
 800569c:	e7ba      	b.n	8005614 <_dtoa_r+0xc1c>
 800569e:	4629      	mov	r1, r5
 80056a0:	4630      	mov	r0, r6
 80056a2:	220a      	movs	r2, #10
 80056a4:	2300      	movs	r3, #0
 80056a6:	f000 fedf 	bl	8006468 <__multadd>
 80056aa:	3401      	adds	r4, #1
 80056ac:	4605      	mov	r5, r0
 80056ae:	4681      	mov	r9, r0
 80056b0:	e797      	b.n	80055e2 <_dtoa_r+0xbea>
 80056b2:	f1ba 0f0e 	cmp.w	sl, #14
 80056b6:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80056ba:	bf8c      	ite	hi
 80056bc:	2300      	movhi	r3, #0
 80056be:	2301      	movls	r3, #1
 80056c0:	6a75      	ldr	r5, [r6, #36]	; 0x24
 80056c2:	401c      	ands	r4, r3
 80056c4:	2300      	movs	r3, #0
 80056c6:	606b      	str	r3, [r5, #4]
 80056c8:	e4d9      	b.n	800507e <_dtoa_r+0x686>
 80056ca:	2301      	movs	r3, #1
 80056cc:	9315      	str	r3, [sp, #84]	; 0x54
 80056ce:	930c      	str	r3, [sp, #48]	; 0x30
 80056d0:	9329      	str	r3, [sp, #164]	; 0xa4
 80056d2:	e7f5      	b.n	80056c0 <_dtoa_r+0xcc8>
 80056d4:	4659      	mov	r1, fp
 80056d6:	4630      	mov	r0, r6
 80056d8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80056da:	f001 f849 	bl	8006770 <__pow5mult>
 80056de:	4683      	mov	fp, r0
 80056e0:	f7ff bbb8 	b.w	8004e54 <_dtoa_r+0x45c>
 80056e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80056e6:	2a00      	cmp	r2, #0
 80056e8:	f43f adf0 	beq.w	80052cc <_dtoa_r+0x8d4>
 80056ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	f77f aab3 	ble.w	8004c5a <_dtoa_r+0x262>
 80056f4:	2300      	movs	r3, #0
 80056f6:	2200      	movs	r2, #0
 80056f8:	f2c4 0324 	movt	r3, #16420	; 0x4024
 80056fc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005700:	f002 fff8 	bl	80086f4 <__aeabi_dmul>
 8005704:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8005708:	f108 0001 	add.w	r0, r8, #1
 800570c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800570e:	3901      	subs	r1, #1
 8005710:	911b      	str	r1, [sp, #108]	; 0x6c
 8005712:	f002 ff89 	bl	8008628 <__aeabi_i2d>
 8005716:	4602      	mov	r2, r0
 8005718:	460b      	mov	r3, r1
 800571a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800571e:	f002 ffe9 	bl	80086f4 <__aeabi_dmul>
 8005722:	2300      	movs	r3, #0
 8005724:	2200      	movs	r2, #0
 8005726:	f2c4 031c 	movt	r3, #16412	; 0x401c
 800572a:	f002 fe31 	bl	8008390 <__adddf3>
 800572e:	f8dd 9054 	ldr.w	r9, [sp, #84]	; 0x54
 8005732:	4604      	mov	r4, r0
 8005734:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8005738:	e510      	b.n	800515c <_dtoa_r+0x764>
 800573a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800573e:	f04f 0802 	mov.w	r8, #2
 8005742:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8005746:	e4e4      	b.n	8005112 <_dtoa_r+0x71a>
 8005748:	4659      	mov	r1, fp
 800574a:	4630      	mov	r0, r6
 800574c:	f001 f810 	bl	8006770 <__pow5mult>
 8005750:	4683      	mov	fp, r0
 8005752:	f7ff bb7f 	b.w	8004e54 <_dtoa_r+0x45c>
 8005756:	2100      	movs	r1, #0
 8005758:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800575c:	2000      	movs	r0, #0
 800575e:	f6c3 71e0 	movt	r1, #16352	; 0x3fe0
 8005762:	f002 fe13 	bl	800838c <__aeabi_dsub>
 8005766:	4622      	mov	r2, r4
 8005768:	462b      	mov	r3, r5
 800576a:	f003 fa53 	bl	8008c14 <__aeabi_dcmpgt>
 800576e:	2800      	cmp	r0, #0
 8005770:	f43f aa73 	beq.w	8004c5a <_dtoa_r+0x262>
 8005774:	463b      	mov	r3, r7
 8005776:	461f      	mov	r7, r3
 8005778:	3b01      	subs	r3, #1
 800577a:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800577e:	2a30      	cmp	r2, #48	; 0x30
 8005780:	d0f9      	beq.n	8005776 <_dtoa_r+0xd7e>
 8005782:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8005784:	9109      	str	r1, [sp, #36]	; 0x24
 8005786:	f7ff bbda 	b.w	8004f3e <_dtoa_r+0x546>
 800578a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800578c:	2a00      	cmp	r2, #0
 800578e:	d07f      	beq.n	8005890 <_dtoa_r+0xe98>
 8005790:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005794:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8005796:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8005798:	e42e      	b.n	8004ff8 <_dtoa_r+0x600>
 800579a:	465f      	mov	r7, fp
 800579c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800579e:	f8dd b010 	ldr.w	fp, [sp, #16]
 80057a2:	f7ff bbcc 	b.w	8004f3e <_dtoa_r+0x546>
 80057a6:	f8dd c010 	ldr.w	ip, [sp, #16]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	4664      	mov	r4, ip
 80057ae:	dd13      	ble.n	80057d8 <_dtoa_r+0xde0>
 80057b0:	4659      	mov	r1, fp
 80057b2:	2201      	movs	r2, #1
 80057b4:	4630      	mov	r0, r6
 80057b6:	f8cd c00c 	str.w	ip, [sp, #12]
 80057ba:	f001 f82b 	bl	8006814 <__lshift>
 80057be:	4641      	mov	r1, r8
 80057c0:	4683      	mov	fp, r0
 80057c2:	f001 f881 	bl	80068c8 <__mcmp>
 80057c6:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80057ca:	2800      	cmp	r0, #0
 80057cc:	f340 8091 	ble.w	80058f2 <_dtoa_r+0xefa>
 80057d0:	2c39      	cmp	r4, #57	; 0x39
 80057d2:	f107 0c31 	add.w	ip, r7, #49	; 0x31
 80057d6:	d076      	beq.n	80058c6 <_dtoa_r+0xece>
 80057d8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80057da:	46ca      	mov	sl, r9
 80057dc:	f807 cb01 	strb.w	ip, [r7], #1
 80057e0:	f7ff bb9d 	b.w	8004f1e <_dtoa_r+0x526>
 80057e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80057e6:	1a9c      	subs	r4, r3, r2
 80057e8:	2300      	movs	r3, #0
 80057ea:	e405      	b.n	8004ff8 <_dtoa_r+0x600>
 80057ec:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 80057f0:	464f      	mov	r7, r9
 80057f2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80057f4:	9e18      	ldr	r6, [sp, #96]	; 0x60
 80057f6:	f7ff bae6 	b.w	8004dc6 <_dtoa_r+0x3ce>
 80057fa:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 80057fe:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8005800:	f7ff ba2b 	b.w	8004c5a <_dtoa_r+0x262>
 8005804:	920d      	str	r2, [sp, #52]	; 0x34
 8005806:	f10a 0a01 	add.w	sl, sl, #1
 800580a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800580c:	9209      	str	r2, [sp, #36]	; 0x24
 800580e:	f7ff baea 	b.w	8004de6 <_dtoa_r+0x3ee>
 8005812:	d103      	bne.n	800581c <_dtoa_r+0xe24>
 8005814:	f01c 0f01 	tst.w	ip, #1
 8005818:	f47f adbc 	bne.w	8005394 <_dtoa_r+0x99c>
 800581c:	463b      	mov	r3, r7
 800581e:	461f      	mov	r7, r3
 8005820:	3b01      	subs	r3, #1
 8005822:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005826:	2a30      	cmp	r2, #48	; 0x30
 8005828:	d0f9      	beq.n	800581e <_dtoa_r+0xe26>
 800582a:	f7ff bb78 	b.w	8004f1e <_dtoa_r+0x526>
 800582e:	f04f 0800 	mov.w	r8, #0
 8005832:	e577      	b.n	8005324 <_dtoa_r+0x92c>
 8005834:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005838:	4622      	mov	r2, r4
 800583a:	462b      	mov	r3, r5
 800583c:	f003 f9c2 	bl	8008bc4 <__aeabi_dcmpeq>
 8005840:	2800      	cmp	r0, #0
 8005842:	f43f ab7c 	beq.w	8004f3e <_dtoa_r+0x546>
 8005846:	f018 0f01 	tst.w	r8, #1
 800584a:	f43f ab78 	beq.w	8004f3e <_dtoa_r+0x546>
 800584e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005850:	f817 ac01 	ldrb.w	sl, [r7, #-1]
 8005854:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005856:	931b      	str	r3, [sp, #108]	; 0x6c
 8005858:	f7ff bab5 	b.w	8004dc6 <_dtoa_r+0x3ce>
 800585c:	f8da 1004 	ldr.w	r1, [sl, #4]
 8005860:	4630      	mov	r0, r6
 8005862:	f000 fdaf 	bl	80063c4 <_Balloc>
 8005866:	f8da 3010 	ldr.w	r3, [sl, #16]
 800586a:	f10a 010c 	add.w	r1, sl, #12
 800586e:	1c9a      	adds	r2, r3, #2
 8005870:	0092      	lsls	r2, r2, #2
 8005872:	4604      	mov	r4, r0
 8005874:	300c      	adds	r0, #12
 8005876:	f000 fce7 	bl	8006248 <memcpy>
 800587a:	4630      	mov	r0, r6
 800587c:	4621      	mov	r1, r4
 800587e:	2201      	movs	r2, #1
 8005880:	f000 ffc8 	bl	8006814 <__lshift>
 8005884:	4681      	mov	r9, r0
 8005886:	e6a2      	b.n	80055ce <_dtoa_r+0xbd6>
 8005888:	3201      	adds	r2, #1
 800588a:	701a      	strb	r2, [r3, #0]
 800588c:	f7ff bb47 	b.w	8004f1e <_dtoa_r+0x526>
 8005890:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8005892:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8005894:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8005896:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800589a:	f7ff bbad 	b.w	8004ff8 <_dtoa_r+0x600>
 800589e:	9d04      	ldr	r5, [sp, #16]
 80058a0:	f7ff baeb 	b.w	8004e7a <_dtoa_r+0x482>
 80058a4:	f8dd c010 	ldr.w	ip, [sp, #16]
 80058a8:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 80058ac:	d00b      	beq.n	80058c6 <_dtoa_r+0xece>
 80058ae:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80058b0:	f10c 0c01 	add.w	ip, ip, #1
 80058b4:	46ca      	mov	sl, r9
 80058b6:	f807 cb01 	strb.w	ip, [r7], #1
 80058ba:	f7ff bb30 	b.w	8004f1e <_dtoa_r+0x526>
 80058be:	f8dd c010 	ldr.w	ip, [sp, #16]
 80058c2:	46ca      	mov	sl, r9
 80058c4:	e556      	b.n	8005374 <_dtoa_r+0x97c>
 80058c6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80058c8:	2339      	movs	r3, #57	; 0x39
 80058ca:	46ca      	mov	sl, r9
 80058cc:	461a      	mov	r2, r3
 80058ce:	990d      	ldr	r1, [sp, #52]	; 0x34
 80058d0:	f807 3b01 	strb.w	r3, [r7], #1
 80058d4:	e565      	b.n	80053a2 <_dtoa_r+0x9aa>
 80058d6:	f8dd c010 	ldr.w	ip, [sp, #16]
 80058da:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 80058de:	d0f2      	beq.n	80058c6 <_dtoa_r+0xece>
 80058e0:	f1ba 0f00 	cmp.w	sl, #0
 80058e4:	bfc8      	it	gt
 80058e6:	f107 0c31 	addgt.w	ip, r7, #49	; 0x31
 80058ea:	e775      	b.n	80057d8 <_dtoa_r+0xde0>
 80058ec:	f04f 0802 	mov.w	r8, #2
 80058f0:	e40f      	b.n	8005112 <_dtoa_r+0x71a>
 80058f2:	f47f af71 	bne.w	80057d8 <_dtoa_r+0xde0>
 80058f6:	f01c 0f01 	tst.w	ip, #1
 80058fa:	f43f af6d 	beq.w	80057d8 <_dtoa_r+0xde0>
 80058fe:	e767      	b.n	80057d0 <_dtoa_r+0xdd8>
 8005900:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005902:	f7ff ba60 	b.w	8004dc6 <_dtoa_r+0x3ce>
 8005906:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005908:	9309      	str	r3, [sp, #36]	; 0x24
 800590a:	f7ff bb18 	b.w	8004f3e <_dtoa_r+0x546>
 800590e:	9915      	ldr	r1, [sp, #84]	; 0x54
 8005910:	910c      	str	r1, [sp, #48]	; 0x30
 8005912:	f7ff baeb 	b.w	8004eec <_dtoa_r+0x4f4>
 8005916:	f43f aac8 	beq.w	8004eaa <_dtoa_r+0x4b2>
 800591a:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
 800591e:	e54e      	b.n	80053be <_dtoa_r+0x9c6>
 8005920:	920c      	str	r2, [sp, #48]	; 0x30
 8005922:	f7ff bae3 	b.w	8004eec <_dtoa_r+0x4f4>
 8005926:	bf00      	nop

08005928 <_malloc_trim_r>:
 8005928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800592a:	f240 240c 	movw	r4, #524	; 0x20c
 800592e:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8005932:	460f      	mov	r7, r1
 8005934:	4605      	mov	r5, r0
 8005936:	f000 fd41 	bl	80063bc <__malloc_lock>
 800593a:	68a3      	ldr	r3, [r4, #8]
 800593c:	685e      	ldr	r6, [r3, #4]
 800593e:	f026 0603 	bic.w	r6, r6, #3
 8005942:	f606 73ef 	addw	r3, r6, #4079	; 0xfef
 8005946:	1bdf      	subs	r7, r3, r7
 8005948:	0b3f      	lsrs	r7, r7, #12
 800594a:	3f01      	subs	r7, #1
 800594c:	033f      	lsls	r7, r7, #12
 800594e:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
 8005952:	db07      	blt.n	8005964 <_malloc_trim_r+0x3c>
 8005954:	2100      	movs	r1, #0
 8005956:	4628      	mov	r0, r5
 8005958:	f001 f9e4 	bl	8006d24 <_sbrk_r>
 800595c:	68a3      	ldr	r3, [r4, #8]
 800595e:	199b      	adds	r3, r3, r6
 8005960:	4298      	cmp	r0, r3
 8005962:	d004      	beq.n	800596e <_malloc_trim_r+0x46>
 8005964:	4628      	mov	r0, r5
 8005966:	f000 fd2b 	bl	80063c0 <__malloc_unlock>
 800596a:	2000      	movs	r0, #0
 800596c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800596e:	4279      	negs	r1, r7
 8005970:	4628      	mov	r0, r5
 8005972:	f001 f9d7 	bl	8006d24 <_sbrk_r>
 8005976:	3001      	adds	r0, #1
 8005978:	d010      	beq.n	800599c <_malloc_trim_r+0x74>
 800597a:	f240 6334 	movw	r3, #1588	; 0x634
 800597e:	68a1      	ldr	r1, [r4, #8]
 8005980:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005984:	1bf6      	subs	r6, r6, r7
 8005986:	4628      	mov	r0, r5
 8005988:	f046 0601 	orr.w	r6, r6, #1
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	604e      	str	r6, [r1, #4]
 8005990:	1bd7      	subs	r7, r2, r7
 8005992:	601f      	str	r7, [r3, #0]
 8005994:	f000 fd14 	bl	80063c0 <__malloc_unlock>
 8005998:	2001      	movs	r0, #1
 800599a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800599c:	2100      	movs	r1, #0
 800599e:	4628      	mov	r0, r5
 80059a0:	f001 f9c0 	bl	8006d24 <_sbrk_r>
 80059a4:	68a3      	ldr	r3, [r4, #8]
 80059a6:	1ac2      	subs	r2, r0, r3
 80059a8:	2a0f      	cmp	r2, #15
 80059aa:	dddb      	ble.n	8005964 <_malloc_trim_r+0x3c>
 80059ac:	f240 6414 	movw	r4, #1556	; 0x614
 80059b0:	f240 6134 	movw	r1, #1588	; 0x634
 80059b4:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80059b8:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80059bc:	f042 0201 	orr.w	r2, r2, #1
 80059c0:	605a      	str	r2, [r3, #4]
 80059c2:	6823      	ldr	r3, [r4, #0]
 80059c4:	1ac0      	subs	r0, r0, r3
 80059c6:	6008      	str	r0, [r1, #0]
 80059c8:	e7cc      	b.n	8005964 <_malloc_trim_r+0x3c>
 80059ca:	bf00      	nop

080059cc <_free_r>:
 80059cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059d0:	460e      	mov	r6, r1
 80059d2:	4680      	mov	r8, r0
 80059d4:	2900      	cmp	r1, #0
 80059d6:	d05c      	beq.n	8005a92 <_free_r+0xc6>
 80059d8:	f000 fcf0 	bl	80063bc <__malloc_lock>
 80059dc:	f240 250c 	movw	r5, #524	; 0x20c
 80059e0:	f856 1c04 	ldr.w	r1, [r6, #-4]
 80059e4:	f2c2 0500 	movt	r5, #8192	; 0x2000
 80059e8:	f1a6 0408 	sub.w	r4, r6, #8
 80059ec:	f021 0301 	bic.w	r3, r1, #1
 80059f0:	68af      	ldr	r7, [r5, #8]
 80059f2:	18e2      	adds	r2, r4, r3
 80059f4:	4297      	cmp	r7, r2
 80059f6:	6850      	ldr	r0, [r2, #4]
 80059f8:	f020 0003 	bic.w	r0, r0, #3
 80059fc:	d067      	beq.n	8005ace <_free_r+0x102>
 80059fe:	f011 0101 	ands.w	r1, r1, #1
 8005a02:	6050      	str	r0, [r2, #4]
 8005a04:	d035      	beq.n	8005a72 <_free_r+0xa6>
 8005a06:	2100      	movs	r1, #0
 8005a08:	1816      	adds	r6, r2, r0
 8005a0a:	6876      	ldr	r6, [r6, #4]
 8005a0c:	f016 0f01 	tst.w	r6, #1
 8005a10:	d106      	bne.n	8005a20 <_free_r+0x54>
 8005a12:	181b      	adds	r3, r3, r0
 8005a14:	6890      	ldr	r0, [r2, #8]
 8005a16:	2900      	cmp	r1, #0
 8005a18:	d04d      	beq.n	8005ab6 <_free_r+0xea>
 8005a1a:	68d2      	ldr	r2, [r2, #12]
 8005a1c:	60c2      	str	r2, [r0, #12]
 8005a1e:	6090      	str	r0, [r2, #8]
 8005a20:	f043 0201 	orr.w	r2, r3, #1
 8005a24:	50e3      	str	r3, [r4, r3]
 8005a26:	6062      	str	r2, [r4, #4]
 8005a28:	b9f1      	cbnz	r1, 8005a68 <_free_r+0x9c>
 8005a2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a2e:	d332      	bcc.n	8005a96 <_free_r+0xca>
 8005a30:	0a5a      	lsrs	r2, r3, #9
 8005a32:	2a04      	cmp	r2, #4
 8005a34:	d86c      	bhi.n	8005b10 <_free_r+0x144>
 8005a36:	0998      	lsrs	r0, r3, #6
 8005a38:	3038      	adds	r0, #56	; 0x38
 8005a3a:	0041      	lsls	r1, r0, #1
 8005a3c:	eb05 0581 	add.w	r5, r5, r1, lsl #2
 8005a40:	f240 210c 	movw	r1, #524	; 0x20c
 8005a44:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8005a48:	68aa      	ldr	r2, [r5, #8]
 8005a4a:	42aa      	cmp	r2, r5
 8005a4c:	d06b      	beq.n	8005b26 <_free_r+0x15a>
 8005a4e:	6851      	ldr	r1, [r2, #4]
 8005a50:	f021 0103 	bic.w	r1, r1, #3
 8005a54:	428b      	cmp	r3, r1
 8005a56:	d202      	bcs.n	8005a5e <_free_r+0x92>
 8005a58:	6892      	ldr	r2, [r2, #8]
 8005a5a:	4295      	cmp	r5, r2
 8005a5c:	d1f7      	bne.n	8005a4e <_free_r+0x82>
 8005a5e:	68d3      	ldr	r3, [r2, #12]
 8005a60:	60e3      	str	r3, [r4, #12]
 8005a62:	60a2      	str	r2, [r4, #8]
 8005a64:	60d4      	str	r4, [r2, #12]
 8005a66:	609c      	str	r4, [r3, #8]
 8005a68:	4640      	mov	r0, r8
 8005a6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a6e:	f000 bca7 	b.w	80063c0 <__malloc_unlock>
 8005a72:	f856 6c08 	ldr.w	r6, [r6, #-8]
 8005a76:	f105 0c08 	add.w	ip, r5, #8
 8005a7a:	1ba4      	subs	r4, r4, r6
 8005a7c:	199b      	adds	r3, r3, r6
 8005a7e:	68a6      	ldr	r6, [r4, #8]
 8005a80:	4566      	cmp	r6, ip
 8005a82:	d043      	beq.n	8005b0c <_free_r+0x140>
 8005a84:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8005a88:	f8c6 c00c 	str.w	ip, [r6, #12]
 8005a8c:	f8cc 6008 	str.w	r6, [ip, #8]
 8005a90:	e7ba      	b.n	8005a08 <_free_r+0x3c>
 8005a92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a96:	08db      	lsrs	r3, r3, #3
 8005a98:	2101      	movs	r1, #1
 8005a9a:	6868      	ldr	r0, [r5, #4]
 8005a9c:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 8005aa0:	109b      	asrs	r3, r3, #2
 8005aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8005aa6:	60e2      	str	r2, [r4, #12]
 8005aa8:	6891      	ldr	r1, [r2, #8]
 8005aaa:	4318      	orrs	r0, r3
 8005aac:	6068      	str	r0, [r5, #4]
 8005aae:	60a1      	str	r1, [r4, #8]
 8005ab0:	60cc      	str	r4, [r1, #12]
 8005ab2:	6094      	str	r4, [r2, #8]
 8005ab4:	e7d8      	b.n	8005a68 <_free_r+0x9c>
 8005ab6:	4e29      	ldr	r6, [pc, #164]	; (8005b5c <_free_r+0x190>)
 8005ab8:	42b0      	cmp	r0, r6
 8005aba:	d1ae      	bne.n	8005a1a <_free_r+0x4e>
 8005abc:	616c      	str	r4, [r5, #20]
 8005abe:	f043 0201 	orr.w	r2, r3, #1
 8005ac2:	612c      	str	r4, [r5, #16]
 8005ac4:	60e0      	str	r0, [r4, #12]
 8005ac6:	60a0      	str	r0, [r4, #8]
 8005ac8:	6062      	str	r2, [r4, #4]
 8005aca:	50e3      	str	r3, [r4, r3]
 8005acc:	e7cc      	b.n	8005a68 <_free_r+0x9c>
 8005ace:	18c0      	adds	r0, r0, r3
 8005ad0:	07cb      	lsls	r3, r1, #31
 8005ad2:	d407      	bmi.n	8005ae4 <_free_r+0x118>
 8005ad4:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8005ad8:	1ae4      	subs	r4, r4, r3
 8005ada:	18c0      	adds	r0, r0, r3
 8005adc:	68a2      	ldr	r2, [r4, #8]
 8005ade:	68e3      	ldr	r3, [r4, #12]
 8005ae0:	60d3      	str	r3, [r2, #12]
 8005ae2:	609a      	str	r2, [r3, #8]
 8005ae4:	f240 6218 	movw	r2, #1560	; 0x618
 8005ae8:	f040 0301 	orr.w	r3, r0, #1
 8005aec:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8005af0:	6063      	str	r3, [r4, #4]
 8005af2:	60ac      	str	r4, [r5, #8]
 8005af4:	6813      	ldr	r3, [r2, #0]
 8005af6:	4298      	cmp	r0, r3
 8005af8:	d3b6      	bcc.n	8005a68 <_free_r+0x9c>
 8005afa:	f240 6330 	movw	r3, #1584	; 0x630
 8005afe:	4640      	mov	r0, r8
 8005b00:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005b04:	6819      	ldr	r1, [r3, #0]
 8005b06:	f7ff ff0f 	bl	8005928 <_malloc_trim_r>
 8005b0a:	e7ad      	b.n	8005a68 <_free_r+0x9c>
 8005b0c:	2101      	movs	r1, #1
 8005b0e:	e77b      	b.n	8005a08 <_free_r+0x3c>
 8005b10:	f102 005b 	add.w	r0, r2, #91	; 0x5b
 8005b14:	0041      	lsls	r1, r0, #1
 8005b16:	2a14      	cmp	r2, #20
 8005b18:	d990      	bls.n	8005a3c <_free_r+0x70>
 8005b1a:	2a54      	cmp	r2, #84	; 0x54
 8005b1c:	d80c      	bhi.n	8005b38 <_free_r+0x16c>
 8005b1e:	0b18      	lsrs	r0, r3, #12
 8005b20:	306e      	adds	r0, #110	; 0x6e
 8005b22:	0041      	lsls	r1, r0, #1
 8005b24:	e78a      	b.n	8005a3c <_free_r+0x70>
 8005b26:	2601      	movs	r6, #1
 8005b28:	684d      	ldr	r5, [r1, #4]
 8005b2a:	1080      	asrs	r0, r0, #2
 8005b2c:	4613      	mov	r3, r2
 8005b2e:	fa06 f000 	lsl.w	r0, r6, r0
 8005b32:	4305      	orrs	r5, r0
 8005b34:	604d      	str	r5, [r1, #4]
 8005b36:	e793      	b.n	8005a60 <_free_r+0x94>
 8005b38:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8005b3c:	d803      	bhi.n	8005b46 <_free_r+0x17a>
 8005b3e:	0bd8      	lsrs	r0, r3, #15
 8005b40:	3077      	adds	r0, #119	; 0x77
 8005b42:	0041      	lsls	r1, r0, #1
 8005b44:	e77a      	b.n	8005a3c <_free_r+0x70>
 8005b46:	f240 5154 	movw	r1, #1364	; 0x554
 8005b4a:	428a      	cmp	r2, r1
 8005b4c:	d803      	bhi.n	8005b56 <_free_r+0x18a>
 8005b4e:	0c98      	lsrs	r0, r3, #18
 8005b50:	307c      	adds	r0, #124	; 0x7c
 8005b52:	0041      	lsls	r1, r0, #1
 8005b54:	e772      	b.n	8005a3c <_free_r+0x70>
 8005b56:	21fc      	movs	r1, #252	; 0xfc
 8005b58:	207e      	movs	r0, #126	; 0x7e
 8005b5a:	e76f      	b.n	8005a3c <_free_r+0x70>
 8005b5c:	20000214 	.word	0x20000214

08005b60 <_setlocale_r>:
 8005b60:	b510      	push	{r4, lr}
 8005b62:	4614      	mov	r4, r2
 8005b64:	b13a      	cbz	r2, 8005b76 <_setlocale_r+0x16>
 8005b66:	f649 2100 	movw	r1, #39424	; 0x9a00
 8005b6a:	4610      	mov	r0, r2
 8005b6c:	f6c0 0100 	movt	r1, #2048	; 0x800
 8005b70:	f001 f8ec 	bl	8006d4c <strcmp>
 8005b74:	b920      	cbnz	r0, 8005b80 <_setlocale_r+0x20>
 8005b76:	f649 10fc 	movw	r0, #39420	; 0x99fc
 8005b7a:	f6c0 0000 	movt	r0, #2048	; 0x800
 8005b7e:	bd10      	pop	{r4, pc}
 8005b80:	f649 11fc 	movw	r1, #39420	; 0x99fc
 8005b84:	4620      	mov	r0, r4
 8005b86:	f6c0 0100 	movt	r1, #2048	; 0x800
 8005b8a:	f001 f8df 	bl	8006d4c <strcmp>
 8005b8e:	2800      	cmp	r0, #0
 8005b90:	d0f1      	beq.n	8005b76 <_setlocale_r+0x16>
 8005b92:	f649 11c8 	movw	r1, #39368	; 0x99c8
 8005b96:	4620      	mov	r0, r4
 8005b98:	f6c0 0100 	movt	r1, #2048	; 0x800
 8005b9c:	f001 f8d6 	bl	8006d4c <strcmp>
 8005ba0:	f649 13fc 	movw	r3, #39420	; 0x99fc
 8005ba4:	f6c0 0300 	movt	r3, #2048	; 0x800
 8005ba8:	2800      	cmp	r0, #0
 8005baa:	bf0c      	ite	eq
 8005bac:	4618      	moveq	r0, r3
 8005bae:	2000      	movne	r0, #0
 8005bb0:	bd10      	pop	{r4, pc}
 8005bb2:	bf00      	nop

08005bb4 <__locale_charset>:
 8005bb4:	f240 1090 	movw	r0, #400	; 0x190
 8005bb8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8005bbc:	4770      	bx	lr
 8005bbe:	bf00      	nop

08005bc0 <__locale_mb_cur_max>:
 8005bc0:	f240 1390 	movw	r3, #400	; 0x190
 8005bc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005bc8:	6a18      	ldr	r0, [r3, #32]
 8005bca:	4770      	bx	lr

08005bcc <__locale_msgcharset>:
 8005bcc:	4800      	ldr	r0, [pc, #0]	; (8005bd0 <__locale_msgcharset+0x4>)
 8005bce:	4770      	bx	lr
 8005bd0:	200001b4 	.word	0x200001b4

08005bd4 <__locale_cjk_lang>:
 8005bd4:	2000      	movs	r0, #0
 8005bd6:	4770      	bx	lr

08005bd8 <_localeconv_r>:
 8005bd8:	4800      	ldr	r0, [pc, #0]	; (8005bdc <_localeconv_r+0x4>)
 8005bda:	4770      	bx	lr
 8005bdc:	200001d4 	.word	0x200001d4

08005be0 <setlocale>:
 8005be0:	f240 039c 	movw	r3, #156	; 0x9c
 8005be4:	460a      	mov	r2, r1
 8005be6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005bea:	4601      	mov	r1, r0
 8005bec:	6818      	ldr	r0, [r3, #0]
 8005bee:	f7ff bfb7 	b.w	8005b60 <_setlocale_r>
 8005bf2:	bf00      	nop

08005bf4 <localeconv>:
 8005bf4:	4800      	ldr	r0, [pc, #0]	; (8005bf8 <localeconv+0x4>)
 8005bf6:	4770      	bx	lr
 8005bf8:	200001d4 	.word	0x200001d4

08005bfc <malloc>:
 8005bfc:	f240 039c 	movw	r3, #156	; 0x9c
 8005c00:	4601      	mov	r1, r0
 8005c02:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005c06:	6818      	ldr	r0, [r3, #0]
 8005c08:	f000 b808 	b.w	8005c1c <_malloc_r>

08005c0c <free>:
 8005c0c:	f240 039c 	movw	r3, #156	; 0x9c
 8005c10:	4601      	mov	r1, r0
 8005c12:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005c16:	6818      	ldr	r0, [r3, #0]
 8005c18:	f7ff bed8 	b.w	80059cc <_free_r>

08005c1c <_malloc_r>:
 8005c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c20:	f101 040b 	add.w	r4, r1, #11
 8005c24:	2c16      	cmp	r4, #22
 8005c26:	b083      	sub	sp, #12
 8005c28:	4607      	mov	r7, r0
 8005c2a:	d930      	bls.n	8005c8e <_malloc_r+0x72>
 8005c2c:	f024 0407 	bic.w	r4, r4, #7
 8005c30:	0fe3      	lsrs	r3, r4, #31
 8005c32:	428c      	cmp	r4, r1
 8005c34:	bf2c      	ite	cs
 8005c36:	4619      	movcs	r1, r3
 8005c38:	f043 0101 	orrcc.w	r1, r3, #1
 8005c3c:	2900      	cmp	r1, #0
 8005c3e:	d12f      	bne.n	8005ca0 <_malloc_r+0x84>
 8005c40:	4638      	mov	r0, r7
 8005c42:	f000 fbbb 	bl	80063bc <__malloc_lock>
 8005c46:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8005c4a:	d22e      	bcs.n	8005caa <_malloc_r+0x8e>
 8005c4c:	ea4f 0cd4 	mov.w	ip, r4, lsr #3
 8005c50:	f240 260c 	movw	r6, #524	; 0x20c
 8005c54:	f2c2 0600 	movt	r6, #8192	; 0x2000
 8005c58:	eb06 02cc 	add.w	r2, r6, ip, lsl #3
 8005c5c:	68d3      	ldr	r3, [r2, #12]
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	f000 8211 	beq.w	8006086 <_malloc_r+0x46a>
 8005c64:	6859      	ldr	r1, [r3, #4]
 8005c66:	f103 0808 	add.w	r8, r3, #8
 8005c6a:	68da      	ldr	r2, [r3, #12]
 8005c6c:	4638      	mov	r0, r7
 8005c6e:	f021 0403 	bic.w	r4, r1, #3
 8005c72:	6899      	ldr	r1, [r3, #8]
 8005c74:	191b      	adds	r3, r3, r4
 8005c76:	685c      	ldr	r4, [r3, #4]
 8005c78:	60ca      	str	r2, [r1, #12]
 8005c7a:	f044 0401 	orr.w	r4, r4, #1
 8005c7e:	6091      	str	r1, [r2, #8]
 8005c80:	605c      	str	r4, [r3, #4]
 8005c82:	f000 fb9d 	bl	80063c0 <__malloc_unlock>
 8005c86:	4640      	mov	r0, r8
 8005c88:	b003      	add	sp, #12
 8005c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c8e:	2300      	movs	r3, #0
 8005c90:	2410      	movs	r4, #16
 8005c92:	428c      	cmp	r4, r1
 8005c94:	bf2c      	ite	cs
 8005c96:	4619      	movcs	r1, r3
 8005c98:	f043 0101 	orrcc.w	r1, r3, #1
 8005c9c:	2900      	cmp	r1, #0
 8005c9e:	d0cf      	beq.n	8005c40 <_malloc_r+0x24>
 8005ca0:	230c      	movs	r3, #12
 8005ca2:	f04f 0800 	mov.w	r8, #0
 8005ca6:	603b      	str	r3, [r7, #0]
 8005ca8:	e7ed      	b.n	8005c86 <_malloc_r+0x6a>
 8005caa:	ea5f 2c54 	movs.w	ip, r4, lsr #9
 8005cae:	bf04      	itt	eq
 8005cb0:	ea4f 0cd4 	moveq.w	ip, r4, lsr #3
 8005cb4:	ea4f 054c 	moveq.w	r5, ip, lsl #1
 8005cb8:	f040 808f 	bne.w	8005dda <_malloc_r+0x1be>
 8005cbc:	f240 260c 	movw	r6, #524	; 0x20c
 8005cc0:	f2c2 0600 	movt	r6, #8192	; 0x2000
 8005cc4:	eb06 0585 	add.w	r5, r6, r5, lsl #2
 8005cc8:	68eb      	ldr	r3, [r5, #12]
 8005cca:	429d      	cmp	r5, r3
 8005ccc:	d106      	bne.n	8005cdc <_malloc_r+0xc0>
 8005cce:	e00d      	b.n	8005cec <_malloc_r+0xd0>
 8005cd0:	2a00      	cmp	r2, #0
 8005cd2:	f280 8155 	bge.w	8005f80 <_malloc_r+0x364>
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	429d      	cmp	r5, r3
 8005cda:	d007      	beq.n	8005cec <_malloc_r+0xd0>
 8005cdc:	6859      	ldr	r1, [r3, #4]
 8005cde:	f021 0103 	bic.w	r1, r1, #3
 8005ce2:	1b0a      	subs	r2, r1, r4
 8005ce4:	2a0f      	cmp	r2, #15
 8005ce6:	ddf3      	ble.n	8005cd0 <_malloc_r+0xb4>
 8005ce8:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005cec:	f10c 0c01 	add.w	ip, ip, #1
 8005cf0:	f240 220c 	movw	r2, #524	; 0x20c
 8005cf4:	6933      	ldr	r3, [r6, #16]
 8005cf6:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8005cfa:	f102 0e08 	add.w	lr, r2, #8
 8005cfe:	4573      	cmp	r3, lr
 8005d00:	bf08      	it	eq
 8005d02:	f8d2 9004 	ldreq.w	r9, [r2, #4]
 8005d06:	d022      	beq.n	8005d4e <_malloc_r+0x132>
 8005d08:	6858      	ldr	r0, [r3, #4]
 8005d0a:	f020 0003 	bic.w	r0, r0, #3
 8005d0e:	1b01      	subs	r1, r0, r4
 8005d10:	290f      	cmp	r1, #15
 8005d12:	f300 8184 	bgt.w	800601e <_malloc_r+0x402>
 8005d16:	2900      	cmp	r1, #0
 8005d18:	f8c2 e014 	str.w	lr, [r2, #20]
 8005d1c:	f8c2 e010 	str.w	lr, [r2, #16]
 8005d20:	da66      	bge.n	8005df0 <_malloc_r+0x1d4>
 8005d22:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8005d26:	f080 814e 	bcs.w	8005fc6 <_malloc_r+0x3aa>
 8005d2a:	08c1      	lsrs	r1, r0, #3
 8005d2c:	f04f 0801 	mov.w	r8, #1
 8005d30:	eb02 00c1 	add.w	r0, r2, r1, lsl #3
 8005d34:	1089      	asrs	r1, r1, #2
 8005d36:	fa08 f801 	lsl.w	r8, r8, r1
 8005d3a:	6851      	ldr	r1, [r2, #4]
 8005d3c:	6885      	ldr	r5, [r0, #8]
 8005d3e:	60d8      	str	r0, [r3, #12]
 8005d40:	ea48 0901 	orr.w	r9, r8, r1
 8005d44:	f8c2 9004 	str.w	r9, [r2, #4]
 8005d48:	609d      	str	r5, [r3, #8]
 8005d4a:	60eb      	str	r3, [r5, #12]
 8005d4c:	6083      	str	r3, [r0, #8]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	ea4f 03ac 	mov.w	r3, ip, asr #2
 8005d54:	fa02 f303 	lsl.w	r3, r2, r3
 8005d58:	454b      	cmp	r3, r9
 8005d5a:	d854      	bhi.n	8005e06 <_malloc_r+0x1ea>
 8005d5c:	ea19 0f03 	tst.w	r9, r3
 8005d60:	d10d      	bne.n	8005d7e <_malloc_r+0x162>
 8005d62:	4093      	lsls	r3, r2
 8005d64:	f02c 0c03 	bic.w	ip, ip, #3
 8005d68:	ea19 0f03 	tst.w	r9, r3
 8005d6c:	f10c 0c04 	add.w	ip, ip, #4
 8005d70:	d105      	bne.n	8005d7e <_malloc_r+0x162>
 8005d72:	005b      	lsls	r3, r3, #1
 8005d74:	f10c 0c04 	add.w	ip, ip, #4
 8005d78:	ea19 0f03 	tst.w	r9, r3
 8005d7c:	d0f9      	beq.n	8005d72 <_malloc_r+0x156>
 8005d7e:	eb06 09cc 	add.w	r9, r6, ip, lsl #3
 8005d82:	46e0      	mov	r8, ip
 8005d84:	4648      	mov	r0, r9
 8005d86:	68c2      	ldr	r2, [r0, #12]
 8005d88:	4290      	cmp	r0, r2
 8005d8a:	d107      	bne.n	8005d9c <_malloc_r+0x180>
 8005d8c:	e15b      	b.n	8006046 <_malloc_r+0x42a>
 8005d8e:	2900      	cmp	r1, #0
 8005d90:	f280 8183 	bge.w	800609a <_malloc_r+0x47e>
 8005d94:	68d2      	ldr	r2, [r2, #12]
 8005d96:	4290      	cmp	r0, r2
 8005d98:	f000 8155 	beq.w	8006046 <_malloc_r+0x42a>
 8005d9c:	6855      	ldr	r5, [r2, #4]
 8005d9e:	f025 0503 	bic.w	r5, r5, #3
 8005da2:	1b29      	subs	r1, r5, r4
 8005da4:	290f      	cmp	r1, #15
 8005da6:	ddf2      	ble.n	8005d8e <_malloc_r+0x172>
 8005da8:	4690      	mov	r8, r2
 8005daa:	1913      	adds	r3, r2, r4
 8005dac:	68d5      	ldr	r5, [r2, #12]
 8005dae:	f044 0001 	orr.w	r0, r4, #1
 8005db2:	f858 4f08 	ldr.w	r4, [r8, #8]!
 8005db6:	f041 0c01 	orr.w	ip, r1, #1
 8005dba:	6050      	str	r0, [r2, #4]
 8005dbc:	4638      	mov	r0, r7
 8005dbe:	f8c3 c004 	str.w	ip, [r3, #4]
 8005dc2:	60e5      	str	r5, [r4, #12]
 8005dc4:	60ac      	str	r4, [r5, #8]
 8005dc6:	6173      	str	r3, [r6, #20]
 8005dc8:	6133      	str	r3, [r6, #16]
 8005dca:	f8c3 e00c 	str.w	lr, [r3, #12]
 8005dce:	f8c3 e008 	str.w	lr, [r3, #8]
 8005dd2:	5059      	str	r1, [r3, r1]
 8005dd4:	f000 faf4 	bl	80063c0 <__malloc_unlock>
 8005dd8:	e755      	b.n	8005c86 <_malloc_r+0x6a>
 8005dda:	f1bc 0f04 	cmp.w	ip, #4
 8005dde:	f200 80de 	bhi.w	8005f9e <_malloc_r+0x382>
 8005de2:	ea4f 1c94 	mov.w	ip, r4, lsr #6
 8005de6:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
 8005dea:	ea4f 054c 	mov.w	r5, ip, lsl #1
 8005dee:	e765      	b.n	8005cbc <_malloc_r+0xa0>
 8005df0:	181a      	adds	r2, r3, r0
 8005df2:	f103 0808 	add.w	r8, r3, #8
 8005df6:	4638      	mov	r0, r7
 8005df8:	6853      	ldr	r3, [r2, #4]
 8005dfa:	f043 0301 	orr.w	r3, r3, #1
 8005dfe:	6053      	str	r3, [r2, #4]
 8005e00:	f000 fade 	bl	80063c0 <__malloc_unlock>
 8005e04:	e73f      	b.n	8005c86 <_malloc_r+0x6a>
 8005e06:	68b5      	ldr	r5, [r6, #8]
 8005e08:	686b      	ldr	r3, [r5, #4]
 8005e0a:	f023 0a03 	bic.w	sl, r3, #3
 8005e0e:	4554      	cmp	r4, sl
 8005e10:	d804      	bhi.n	8005e1c <_malloc_r+0x200>
 8005e12:	ebc4 030a 	rsb	r3, r4, sl
 8005e16:	2b0f      	cmp	r3, #15
 8005e18:	f300 80a4 	bgt.w	8005f64 <_malloc_r+0x348>
 8005e1c:	f240 6930 	movw	r9, #1584	; 0x630
 8005e20:	f8d6 1408 	ldr.w	r1, [r6, #1032]	; 0x408
 8005e24:	f2c2 0900 	movt	r9, #8192	; 0x2000
 8005e28:	eb05 020a 	add.w	r2, r5, sl
 8005e2c:	3101      	adds	r1, #1
 8005e2e:	f8d9 3000 	ldr.w	r3, [r9]
 8005e32:	4423      	add	r3, r4
 8005e34:	bf08      	it	eq
 8005e36:	f103 0b10 	addeq.w	fp, r3, #16
 8005e3a:	d006      	beq.n	8005e4a <_malloc_r+0x22e>
 8005e3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e40:	330f      	adds	r3, #15
 8005e42:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005e46:	f023 0b0f 	bic.w	fp, r3, #15
 8005e4a:	4638      	mov	r0, r7
 8005e4c:	4659      	mov	r1, fp
 8005e4e:	9201      	str	r2, [sp, #4]
 8005e50:	f000 ff68 	bl	8006d24 <_sbrk_r>
 8005e54:	9a01      	ldr	r2, [sp, #4]
 8005e56:	1c41      	adds	r1, r0, #1
 8005e58:	4680      	mov	r8, r0
 8005e5a:	f000 8168 	beq.w	800612e <_malloc_r+0x512>
 8005e5e:	4282      	cmp	r2, r0
 8005e60:	f200 8131 	bhi.w	80060c6 <_malloc_r+0x4aa>
 8005e64:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8005e68:	4542      	cmp	r2, r8
 8005e6a:	445b      	add	r3, fp
 8005e6c:	f8c9 3004 	str.w	r3, [r9, #4]
 8005e70:	f000 8166 	beq.w	8006140 <_malloc_r+0x524>
 8005e74:	f8d6 1408 	ldr.w	r1, [r6, #1032]	; 0x408
 8005e78:	f240 200c 	movw	r0, #524	; 0x20c
 8005e7c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8005e80:	3101      	adds	r1, #1
 8005e82:	bf17      	itett	ne
 8005e84:	ebc2 0208 	rsbne	r2, r2, r8
 8005e88:	f8c0 8408 	streq.w	r8, [r0, #1032]	; 0x408
 8005e8c:	189b      	addne	r3, r3, r2
 8005e8e:	f8c9 3004 	strne.w	r3, [r9, #4]
 8005e92:	f018 0307 	ands.w	r3, r8, #7
 8005e96:	4638      	mov	r0, r7
 8005e98:	bf1f      	itttt	ne
 8005e9a:	f1c3 0208 	rsbne	r2, r3, #8
 8005e9e:	f5c3 5380 	rsbne	r3, r3, #4096	; 0x1000
 8005ea2:	4490      	addne	r8, r2
 8005ea4:	f103 0208 	addne.w	r2, r3, #8
 8005ea8:	eb08 030b 	add.w	r3, r8, fp
 8005eac:	bf08      	it	eq
 8005eae:	f44f 5280 	moveq.w	r2, #4096	; 0x1000
 8005eb2:	051b      	lsls	r3, r3, #20
 8005eb4:	0d1b      	lsrs	r3, r3, #20
 8005eb6:	ebc3 0b02 	rsb	fp, r3, r2
 8005eba:	4659      	mov	r1, fp
 8005ebc:	f000 ff32 	bl	8006d24 <_sbrk_r>
 8005ec0:	1c43      	adds	r3, r0, #1
 8005ec2:	f000 8149 	beq.w	8006158 <_malloc_r+0x53c>
 8005ec6:	ebc8 0100 	rsb	r1, r8, r0
 8005eca:	4459      	add	r1, fp
 8005ecc:	f041 0101 	orr.w	r1, r1, #1
 8005ed0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8005ed4:	42b5      	cmp	r5, r6
 8005ed6:	f240 6230 	movw	r2, #1584	; 0x630
 8005eda:	f8c6 8008 	str.w	r8, [r6, #8]
 8005ede:	445b      	add	r3, fp
 8005ee0:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8005ee4:	f8c8 1004 	str.w	r1, [r8, #4]
 8005ee8:	f8c9 3004 	str.w	r3, [r9, #4]
 8005eec:	d018      	beq.n	8005f20 <_malloc_r+0x304>
 8005eee:	f1ba 0f0f 	cmp.w	sl, #15
 8005ef2:	f240 810b 	bls.w	800610c <_malloc_r+0x4f0>
 8005ef6:	f1aa 000c 	sub.w	r0, sl, #12
 8005efa:	6869      	ldr	r1, [r5, #4]
 8005efc:	f020 0007 	bic.w	r0, r0, #7
 8005f00:	f04f 0c05 	mov.w	ip, #5
 8005f04:	eb05 0e00 	add.w	lr, r5, r0
 8005f08:	280f      	cmp	r0, #15
 8005f0a:	f001 0101 	and.w	r1, r1, #1
 8005f0e:	ea40 0101 	orr.w	r1, r0, r1
 8005f12:	6069      	str	r1, [r5, #4]
 8005f14:	f8ce c004 	str.w	ip, [lr, #4]
 8005f18:	f8ce c008 	str.w	ip, [lr, #8]
 8005f1c:	f200 8120 	bhi.w	8006160 <_malloc_r+0x544>
 8005f20:	f240 6230 	movw	r2, #1584	; 0x630
 8005f24:	f8d9 102c 	ldr.w	r1, [r9, #44]	; 0x2c
 8005f28:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8005f2c:	68b5      	ldr	r5, [r6, #8]
 8005f2e:	428b      	cmp	r3, r1
 8005f30:	f8d9 1030 	ldr.w	r1, [r9, #48]	; 0x30
 8005f34:	bf88      	it	hi
 8005f36:	62d3      	strhi	r3, [r2, #44]	; 0x2c
 8005f38:	f240 6230 	movw	r2, #1584	; 0x630
 8005f3c:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8005f40:	428b      	cmp	r3, r1
 8005f42:	bf88      	it	hi
 8005f44:	6313      	strhi	r3, [r2, #48]	; 0x30
 8005f46:	686a      	ldr	r2, [r5, #4]
 8005f48:	f022 0203 	bic.w	r2, r2, #3
 8005f4c:	4294      	cmp	r4, r2
 8005f4e:	ebc4 0302 	rsb	r3, r4, r2
 8005f52:	d801      	bhi.n	8005f58 <_malloc_r+0x33c>
 8005f54:	2b0f      	cmp	r3, #15
 8005f56:	dc05      	bgt.n	8005f64 <_malloc_r+0x348>
 8005f58:	4638      	mov	r0, r7
 8005f5a:	f04f 0800 	mov.w	r8, #0
 8005f5e:	f000 fa2f 	bl	80063c0 <__malloc_unlock>
 8005f62:	e690      	b.n	8005c86 <_malloc_r+0x6a>
 8005f64:	192a      	adds	r2, r5, r4
 8005f66:	f043 0301 	orr.w	r3, r3, #1
 8005f6a:	f044 0401 	orr.w	r4, r4, #1
 8005f6e:	4638      	mov	r0, r7
 8005f70:	606c      	str	r4, [r5, #4]
 8005f72:	f105 0808 	add.w	r8, r5, #8
 8005f76:	6053      	str	r3, [r2, #4]
 8005f78:	60b2      	str	r2, [r6, #8]
 8005f7a:	f000 fa21 	bl	80063c0 <__malloc_unlock>
 8005f7e:	e682      	b.n	8005c86 <_malloc_r+0x6a>
 8005f80:	1859      	adds	r1, r3, r1
 8005f82:	68da      	ldr	r2, [r3, #12]
 8005f84:	689c      	ldr	r4, [r3, #8]
 8005f86:	4638      	mov	r0, r7
 8005f88:	684d      	ldr	r5, [r1, #4]
 8005f8a:	f103 0808 	add.w	r8, r3, #8
 8005f8e:	f045 0501 	orr.w	r5, r5, #1
 8005f92:	60e2      	str	r2, [r4, #12]
 8005f94:	6094      	str	r4, [r2, #8]
 8005f96:	604d      	str	r5, [r1, #4]
 8005f98:	f000 fa12 	bl	80063c0 <__malloc_unlock>
 8005f9c:	e673      	b.n	8005c86 <_malloc_r+0x6a>
 8005f9e:	f1bc 0f14 	cmp.w	ip, #20
 8005fa2:	bf9c      	itt	ls
 8005fa4:	f10c 0c5b 	addls.w	ip, ip, #91	; 0x5b
 8005fa8:	ea4f 054c 	movls.w	r5, ip, lsl #1
 8005fac:	f67f ae86 	bls.w	8005cbc <_malloc_r+0xa0>
 8005fb0:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
 8005fb4:	f200 8093 	bhi.w	80060de <_malloc_r+0x4c2>
 8005fb8:	ea4f 3c14 	mov.w	ip, r4, lsr #12
 8005fbc:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
 8005fc0:	ea4f 054c 	mov.w	r5, ip, lsl #1
 8005fc4:	e67a      	b.n	8005cbc <_malloc_r+0xa0>
 8005fc6:	0a42      	lsrs	r2, r0, #9
 8005fc8:	2a04      	cmp	r2, #4
 8005fca:	d975      	bls.n	80060b8 <_malloc_r+0x49c>
 8005fcc:	2a14      	cmp	r2, #20
 8005fce:	bf9c      	itt	ls
 8005fd0:	f102 095b 	addls.w	r9, r2, #91	; 0x5b
 8005fd4:	ea4f 0549 	movls.w	r5, r9, lsl #1
 8005fd8:	d908      	bls.n	8005fec <_malloc_r+0x3d0>
 8005fda:	2a54      	cmp	r2, #84	; 0x54
 8005fdc:	f200 80c9 	bhi.w	8006172 <_malloc_r+0x556>
 8005fe0:	ea4f 3910 	mov.w	r9, r0, lsr #12
 8005fe4:	f109 096e 	add.w	r9, r9, #110	; 0x6e
 8005fe8:	ea4f 0549 	mov.w	r5, r9, lsl #1
 8005fec:	eb06 0585 	add.w	r5, r6, r5, lsl #2
 8005ff0:	f240 280c 	movw	r8, #524	; 0x20c
 8005ff4:	f2c2 0800 	movt	r8, #8192	; 0x2000
 8005ff8:	68aa      	ldr	r2, [r5, #8]
 8005ffa:	42aa      	cmp	r2, r5
 8005ffc:	d079      	beq.n	80060f2 <_malloc_r+0x4d6>
 8005ffe:	6851      	ldr	r1, [r2, #4]
 8006000:	f021 0103 	bic.w	r1, r1, #3
 8006004:	4288      	cmp	r0, r1
 8006006:	d202      	bcs.n	800600e <_malloc_r+0x3f2>
 8006008:	6892      	ldr	r2, [r2, #8]
 800600a:	4295      	cmp	r5, r2
 800600c:	d1f7      	bne.n	8005ffe <_malloc_r+0x3e2>
 800600e:	68d0      	ldr	r0, [r2, #12]
 8006010:	f8d6 9004 	ldr.w	r9, [r6, #4]
 8006014:	60d8      	str	r0, [r3, #12]
 8006016:	609a      	str	r2, [r3, #8]
 8006018:	60d3      	str	r3, [r2, #12]
 800601a:	6083      	str	r3, [r0, #8]
 800601c:	e697      	b.n	8005d4e <_malloc_r+0x132>
 800601e:	191d      	adds	r5, r3, r4
 8006020:	f041 0601 	orr.w	r6, r1, #1
 8006024:	6155      	str	r5, [r2, #20]
 8006026:	f044 0401 	orr.w	r4, r4, #1
 800602a:	6115      	str	r5, [r2, #16]
 800602c:	4638      	mov	r0, r7
 800602e:	605c      	str	r4, [r3, #4]
 8006030:	f103 0808 	add.w	r8, r3, #8
 8006034:	f8c5 e00c 	str.w	lr, [r5, #12]
 8006038:	f8c5 e008 	str.w	lr, [r5, #8]
 800603c:	606e      	str	r6, [r5, #4]
 800603e:	5069      	str	r1, [r5, r1]
 8006040:	f000 f9be 	bl	80063c0 <__malloc_unlock>
 8006044:	e61f      	b.n	8005c86 <_malloc_r+0x6a>
 8006046:	f108 0801 	add.w	r8, r8, #1
 800604a:	3008      	adds	r0, #8
 800604c:	f018 0f03 	tst.w	r8, #3
 8006050:	f47f ae99 	bne.w	8005d86 <_malloc_r+0x16a>
 8006054:	464a      	mov	r2, r9
 8006056:	f01c 0f03 	tst.w	ip, #3
 800605a:	f1a2 0108 	sub.w	r1, r2, #8
 800605e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006062:	f000 809e 	beq.w	80061a2 <_malloc_r+0x586>
 8006066:	6812      	ldr	r2, [r2, #0]
 8006068:	428a      	cmp	r2, r1
 800606a:	d0f4      	beq.n	8006056 <_malloc_r+0x43a>
 800606c:	6872      	ldr	r2, [r6, #4]
 800606e:	005b      	lsls	r3, r3, #1
 8006070:	4293      	cmp	r3, r2
 8006072:	f63f aec8 	bhi.w	8005e06 <_malloc_r+0x1ea>
 8006076:	2b00      	cmp	r3, #0
 8006078:	f43f aec5 	beq.w	8005e06 <_malloc_r+0x1ea>
 800607c:	421a      	tst	r2, r3
 800607e:	f000 8095 	beq.w	80061ac <_malloc_r+0x590>
 8006082:	46c4      	mov	ip, r8
 8006084:	e67b      	b.n	8005d7e <_malloc_r+0x162>
 8006086:	f103 0208 	add.w	r2, r3, #8
 800608a:	695b      	ldr	r3, [r3, #20]
 800608c:	429a      	cmp	r2, r3
 800608e:	bf08      	it	eq
 8006090:	f10c 0c02 	addeq.w	ip, ip, #2
 8006094:	f43f ae2c 	beq.w	8005cf0 <_malloc_r+0xd4>
 8006098:	e5e4      	b.n	8005c64 <_malloc_r+0x48>
 800609a:	4690      	mov	r8, r2
 800609c:	1955      	adds	r5, r2, r5
 800609e:	68d3      	ldr	r3, [r2, #12]
 80060a0:	4638      	mov	r0, r7
 80060a2:	f858 2f08 	ldr.w	r2, [r8, #8]!
 80060a6:	6869      	ldr	r1, [r5, #4]
 80060a8:	60d3      	str	r3, [r2, #12]
 80060aa:	f041 0101 	orr.w	r1, r1, #1
 80060ae:	609a      	str	r2, [r3, #8]
 80060b0:	6069      	str	r1, [r5, #4]
 80060b2:	f000 f985 	bl	80063c0 <__malloc_unlock>
 80060b6:	e5e6      	b.n	8005c86 <_malloc_r+0x6a>
 80060b8:	ea4f 1990 	mov.w	r9, r0, lsr #6
 80060bc:	f109 0938 	add.w	r9, r9, #56	; 0x38
 80060c0:	ea4f 0549 	mov.w	r5, r9, lsl #1
 80060c4:	e792      	b.n	8005fec <_malloc_r+0x3d0>
 80060c6:	42b5      	cmp	r5, r6
 80060c8:	f240 230c 	movw	r3, #524	; 0x20c
 80060cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80060d0:	f43f aec8 	beq.w	8005e64 <_malloc_r+0x248>
 80060d4:	689d      	ldr	r5, [r3, #8]
 80060d6:	686a      	ldr	r2, [r5, #4]
 80060d8:	f022 0203 	bic.w	r2, r2, #3
 80060dc:	e736      	b.n	8005f4c <_malloc_r+0x330>
 80060de:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
 80060e2:	d819      	bhi.n	8006118 <_malloc_r+0x4fc>
 80060e4:	ea4f 3cd4 	mov.w	ip, r4, lsr #15
 80060e8:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
 80060ec:	ea4f 054c 	mov.w	r5, ip, lsl #1
 80060f0:	e5e4      	b.n	8005cbc <_malloc_r+0xa0>
 80060f2:	2501      	movs	r5, #1
 80060f4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80060f8:	ea4f 09a9 	mov.w	r9, r9, asr #2
 80060fc:	4610      	mov	r0, r2
 80060fe:	fa05 f509 	lsl.w	r5, r5, r9
 8006102:	ea45 0901 	orr.w	r9, r5, r1
 8006106:	f8c8 9004 	str.w	r9, [r8, #4]
 800610a:	e783      	b.n	8006014 <_malloc_r+0x3f8>
 800610c:	2301      	movs	r3, #1
 800610e:	4645      	mov	r5, r8
 8006110:	f8c8 3004 	str.w	r3, [r8, #4]
 8006114:	2200      	movs	r2, #0
 8006116:	e719      	b.n	8005f4c <_malloc_r+0x330>
 8006118:	f240 5354 	movw	r3, #1364	; 0x554
 800611c:	459c      	cmp	ip, r3
 800611e:	d80b      	bhi.n	8006138 <_malloc_r+0x51c>
 8006120:	ea4f 4c94 	mov.w	ip, r4, lsr #18
 8006124:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
 8006128:	ea4f 054c 	mov.w	r5, ip, lsl #1
 800612c:	e5c6      	b.n	8005cbc <_malloc_r+0xa0>
 800612e:	68b5      	ldr	r5, [r6, #8]
 8006130:	686a      	ldr	r2, [r5, #4]
 8006132:	f022 0203 	bic.w	r2, r2, #3
 8006136:	e709      	b.n	8005f4c <_malloc_r+0x330>
 8006138:	25fc      	movs	r5, #252	; 0xfc
 800613a:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
 800613e:	e5bd      	b.n	8005cbc <_malloc_r+0xa0>
 8006140:	0511      	lsls	r1, r2, #20
 8006142:	0d09      	lsrs	r1, r1, #20
 8006144:	2900      	cmp	r1, #0
 8006146:	f47f ae95 	bne.w	8005e74 <_malloc_r+0x258>
 800614a:	68b2      	ldr	r2, [r6, #8]
 800614c:	eb0b 010a 	add.w	r1, fp, sl
 8006150:	f041 0101 	orr.w	r1, r1, #1
 8006154:	6051      	str	r1, [r2, #4]
 8006156:	e6e3      	b.n	8005f20 <_malloc_r+0x304>
 8006158:	2101      	movs	r1, #1
 800615a:	f04f 0b00 	mov.w	fp, #0
 800615e:	e6b7      	b.n	8005ed0 <_malloc_r+0x2b4>
 8006160:	4638      	mov	r0, r7
 8006162:	f105 0108 	add.w	r1, r5, #8
 8006166:	9201      	str	r2, [sp, #4]
 8006168:	f7ff fc30 	bl	80059cc <_free_r>
 800616c:	9a01      	ldr	r2, [sp, #4]
 800616e:	6853      	ldr	r3, [r2, #4]
 8006170:	e6d6      	b.n	8005f20 <_malloc_r+0x304>
 8006172:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8006176:	d806      	bhi.n	8006186 <_malloc_r+0x56a>
 8006178:	ea4f 39d0 	mov.w	r9, r0, lsr #15
 800617c:	f109 0977 	add.w	r9, r9, #119	; 0x77
 8006180:	ea4f 0549 	mov.w	r5, r9, lsl #1
 8006184:	e732      	b.n	8005fec <_malloc_r+0x3d0>
 8006186:	f240 5154 	movw	r1, #1364	; 0x554
 800618a:	25fc      	movs	r5, #252	; 0xfc
 800618c:	428a      	cmp	r2, r1
 800618e:	f04f 097e 	mov.w	r9, #126	; 0x7e
 8006192:	bf9e      	ittt	ls
 8006194:	ea4f 4990 	movls.w	r9, r0, lsr #18
 8006198:	f109 097c 	addls.w	r9, r9, #124	; 0x7c
 800619c:	ea4f 0549 	movls.w	r5, r9, lsl #1
 80061a0:	e724      	b.n	8005fec <_malloc_r+0x3d0>
 80061a2:	6872      	ldr	r2, [r6, #4]
 80061a4:	ea22 0203 	bic.w	r2, r2, r3
 80061a8:	6072      	str	r2, [r6, #4]
 80061aa:	e760      	b.n	800606e <_malloc_r+0x452>
 80061ac:	005b      	lsls	r3, r3, #1
 80061ae:	f108 0804 	add.w	r8, r8, #4
 80061b2:	e763      	b.n	800607c <_malloc_r+0x460>

080061b4 <memchr>:
 80061b4:	0783      	lsls	r3, r0, #30
 80061b6:	b2c9      	uxtb	r1, r1
 80061b8:	b470      	push	{r4, r5, r6}
 80061ba:	d040      	beq.n	800623e <memchr+0x8a>
 80061bc:	1e54      	subs	r4, r2, #1
 80061be:	2a00      	cmp	r2, #0
 80061c0:	d03f      	beq.n	8006242 <memchr+0x8e>
 80061c2:	7803      	ldrb	r3, [r0, #0]
 80061c4:	428b      	cmp	r3, r1
 80061c6:	d021      	beq.n	800620c <memchr+0x58>
 80061c8:	1c43      	adds	r3, r0, #1
 80061ca:	e004      	b.n	80061d6 <memchr+0x22>
 80061cc:	b304      	cbz	r4, 8006210 <memchr+0x5c>
 80061ce:	7802      	ldrb	r2, [r0, #0]
 80061d0:	3c01      	subs	r4, #1
 80061d2:	428a      	cmp	r2, r1
 80061d4:	d01a      	beq.n	800620c <memchr+0x58>
 80061d6:	f013 0f03 	tst.w	r3, #3
 80061da:	4618      	mov	r0, r3
 80061dc:	f103 0301 	add.w	r3, r3, #1
 80061e0:	d1f4      	bne.n	80061cc <memchr+0x18>
 80061e2:	2c03      	cmp	r4, #3
 80061e4:	d816      	bhi.n	8006214 <memchr+0x60>
 80061e6:	1e65      	subs	r5, r4, #1
 80061e8:	b194      	cbz	r4, 8006210 <memchr+0x5c>
 80061ea:	7803      	ldrb	r3, [r0, #0]
 80061ec:	428b      	cmp	r3, r1
 80061ee:	d00d      	beq.n	800620c <memchr+0x58>
 80061f0:	1c42      	adds	r2, r0, #1
 80061f2:	2300      	movs	r3, #0
 80061f4:	e002      	b.n	80061fc <memchr+0x48>
 80061f6:	7804      	ldrb	r4, [r0, #0]
 80061f8:	428c      	cmp	r4, r1
 80061fa:	d007      	beq.n	800620c <memchr+0x58>
 80061fc:	429d      	cmp	r5, r3
 80061fe:	4610      	mov	r0, r2
 8006200:	f103 0301 	add.w	r3, r3, #1
 8006204:	f102 0201 	add.w	r2, r2, #1
 8006208:	d1f5      	bne.n	80061f6 <memchr+0x42>
 800620a:	2000      	movs	r0, #0
 800620c:	bc70      	pop	{r4, r5, r6}
 800620e:	4770      	bx	lr
 8006210:	4620      	mov	r0, r4
 8006212:	e7fb      	b.n	800620c <memchr+0x58>
 8006214:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
 8006218:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
 800621c:	4602      	mov	r2, r0
 800621e:	3004      	adds	r0, #4
 8006220:	6813      	ldr	r3, [r2, #0]
 8006222:	4073      	eors	r3, r6
 8006224:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
 8006228:	ea25 0303 	bic.w	r3, r5, r3
 800622c:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 8006230:	d103      	bne.n	800623a <memchr+0x86>
 8006232:	3c04      	subs	r4, #4
 8006234:	2c03      	cmp	r4, #3
 8006236:	d8f1      	bhi.n	800621c <memchr+0x68>
 8006238:	e7d5      	b.n	80061e6 <memchr+0x32>
 800623a:	4610      	mov	r0, r2
 800623c:	e7d3      	b.n	80061e6 <memchr+0x32>
 800623e:	4614      	mov	r4, r2
 8006240:	e7cf      	b.n	80061e2 <memchr+0x2e>
 8006242:	4610      	mov	r0, r2
 8006244:	e7e2      	b.n	800620c <memchr+0x58>
 8006246:	bf00      	nop

08006248 <memcpy>:
 8006248:	2a03      	cmp	r2, #3
 800624a:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800624e:	d809      	bhi.n	8006264 <memcpy+0x1c>
 8006250:	b12a      	cbz	r2, 800625e <memcpy+0x16>
 8006252:	2300      	movs	r3, #0
 8006254:	5ccc      	ldrb	r4, [r1, r3]
 8006256:	54c4      	strb	r4, [r0, r3]
 8006258:	3301      	adds	r3, #1
 800625a:	4293      	cmp	r3, r2
 800625c:	d1fa      	bne.n	8006254 <memcpy+0xc>
 800625e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006262:	4770      	bx	lr
 8006264:	0783      	lsls	r3, r0, #30
 8006266:	4402      	add	r2, r0
 8006268:	d00e      	beq.n	8006288 <memcpy+0x40>
 800626a:	1c44      	adds	r4, r0, #1
 800626c:	1c4d      	adds	r5, r1, #1
 800626e:	f815 7c01 	ldrb.w	r7, [r5, #-1]
 8006272:	f004 0603 	and.w	r6, r4, #3
 8006276:	4623      	mov	r3, r4
 8006278:	3401      	adds	r4, #1
 800627a:	4629      	mov	r1, r5
 800627c:	3501      	adds	r5, #1
 800627e:	f804 7c02 	strb.w	r7, [r4, #-2]
 8006282:	2e00      	cmp	r6, #0
 8006284:	d1f3      	bne.n	800626e <memcpy+0x26>
 8006286:	e000      	b.n	800628a <memcpy+0x42>
 8006288:	4603      	mov	r3, r0
 800628a:	f011 0403 	ands.w	r4, r1, #3
 800628e:	d06d      	beq.n	800636c <memcpy+0x124>
 8006290:	1ad7      	subs	r7, r2, r3
 8006292:	1b0d      	subs	r5, r1, r4
 8006294:	2f03      	cmp	r7, #3
 8006296:	682e      	ldr	r6, [r5, #0]
 8006298:	dd19      	ble.n	80062ce <memcpy+0x86>
 800629a:	f1c4 0c04 	rsb	ip, r4, #4
 800629e:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 80062a2:	1d1c      	adds	r4, r3, #4
 80062a4:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80062a8:	f855 7f04 	ldr.w	r7, [r5, #4]!
 80062ac:	ebc4 0902 	rsb	r9, r4, r2
 80062b0:	4623      	mov	r3, r4
 80062b2:	3104      	adds	r1, #4
 80062b4:	3404      	adds	r4, #4
 80062b6:	f1b9 0f03 	cmp.w	r9, #3
 80062ba:	fa26 fa08 	lsr.w	sl, r6, r8
 80062be:	fa07 fb0c 	lsl.w	fp, r7, ip
 80062c2:	463e      	mov	r6, r7
 80062c4:	ea4b 070a 	orr.w	r7, fp, sl
 80062c8:	f844 7c08 	str.w	r7, [r4, #-8]
 80062cc:	dcec      	bgt.n	80062a8 <memcpy+0x60>
 80062ce:	429a      	cmp	r2, r3
 80062d0:	d9c5      	bls.n	800625e <memcpy+0x16>
 80062d2:	3301      	adds	r3, #1
 80062d4:	3101      	adds	r1, #1
 80062d6:	3201      	adds	r2, #1
 80062d8:	f811 4c01 	ldrb.w	r4, [r1, #-1]
 80062dc:	3301      	adds	r3, #1
 80062de:	3101      	adds	r1, #1
 80062e0:	4293      	cmp	r3, r2
 80062e2:	f803 4c02 	strb.w	r4, [r3, #-2]
 80062e6:	d1f7      	bne.n	80062d8 <memcpy+0x90>
 80062e8:	e7b9      	b.n	800625e <memcpy+0x16>
 80062ea:	680c      	ldr	r4, [r1, #0]
 80062ec:	3340      	adds	r3, #64	; 0x40
 80062ee:	3140      	adds	r1, #64	; 0x40
 80062f0:	f843 4c40 	str.w	r4, [r3, #-64]
 80062f4:	f851 4c3c 	ldr.w	r4, [r1, #-60]
 80062f8:	f843 4c3c 	str.w	r4, [r3, #-60]
 80062fc:	f851 4c38 	ldr.w	r4, [r1, #-56]
 8006300:	f843 4c38 	str.w	r4, [r3, #-56]
 8006304:	f851 4c34 	ldr.w	r4, [r1, #-52]
 8006308:	f843 4c34 	str.w	r4, [r3, #-52]
 800630c:	f851 4c30 	ldr.w	r4, [r1, #-48]
 8006310:	f843 4c30 	str.w	r4, [r3, #-48]
 8006314:	f851 4c2c 	ldr.w	r4, [r1, #-44]
 8006318:	f843 4c2c 	str.w	r4, [r3, #-44]
 800631c:	f851 4c28 	ldr.w	r4, [r1, #-40]
 8006320:	f843 4c28 	str.w	r4, [r3, #-40]
 8006324:	f851 4c24 	ldr.w	r4, [r1, #-36]
 8006328:	f843 4c24 	str.w	r4, [r3, #-36]
 800632c:	f851 4c20 	ldr.w	r4, [r1, #-32]
 8006330:	f843 4c20 	str.w	r4, [r3, #-32]
 8006334:	f851 4c1c 	ldr.w	r4, [r1, #-28]
 8006338:	f843 4c1c 	str.w	r4, [r3, #-28]
 800633c:	f851 4c18 	ldr.w	r4, [r1, #-24]
 8006340:	f843 4c18 	str.w	r4, [r3, #-24]
 8006344:	f851 4c14 	ldr.w	r4, [r1, #-20]
 8006348:	f843 4c14 	str.w	r4, [r3, #-20]
 800634c:	f851 4c10 	ldr.w	r4, [r1, #-16]
 8006350:	f843 4c10 	str.w	r4, [r3, #-16]
 8006354:	f851 4c0c 	ldr.w	r4, [r1, #-12]
 8006358:	f843 4c0c 	str.w	r4, [r3, #-12]
 800635c:	f851 4c08 	ldr.w	r4, [r1, #-8]
 8006360:	f843 4c08 	str.w	r4, [r3, #-8]
 8006364:	f851 4c04 	ldr.w	r4, [r1, #-4]
 8006368:	f843 4c04 	str.w	r4, [r3, #-4]
 800636c:	1ad4      	subs	r4, r2, r3
 800636e:	2c3f      	cmp	r4, #63	; 0x3f
 8006370:	dcbb      	bgt.n	80062ea <memcpy+0xa2>
 8006372:	e011      	b.n	8006398 <memcpy+0x150>
 8006374:	680c      	ldr	r4, [r1, #0]
 8006376:	3310      	adds	r3, #16
 8006378:	3110      	adds	r1, #16
 800637a:	f843 4c10 	str.w	r4, [r3, #-16]
 800637e:	f851 4c0c 	ldr.w	r4, [r1, #-12]
 8006382:	f843 4c0c 	str.w	r4, [r3, #-12]
 8006386:	f851 4c08 	ldr.w	r4, [r1, #-8]
 800638a:	f843 4c08 	str.w	r4, [r3, #-8]
 800638e:	f851 4c04 	ldr.w	r4, [r1, #-4]
 8006392:	f843 4c04 	str.w	r4, [r3, #-4]
 8006396:	1ad4      	subs	r4, r2, r3
 8006398:	2c0f      	cmp	r4, #15
 800639a:	dceb      	bgt.n	8006374 <memcpy+0x12c>
 800639c:	2c03      	cmp	r4, #3
 800639e:	dd96      	ble.n	80062ce <memcpy+0x86>
 80063a0:	1d1c      	adds	r4, r3, #4
 80063a2:	1d0d      	adds	r5, r1, #4
 80063a4:	f855 7c04 	ldr.w	r7, [r5, #-4]
 80063a8:	1b16      	subs	r6, r2, r4
 80063aa:	4623      	mov	r3, r4
 80063ac:	4629      	mov	r1, r5
 80063ae:	3404      	adds	r4, #4
 80063b0:	3504      	adds	r5, #4
 80063b2:	2e03      	cmp	r6, #3
 80063b4:	f844 7c08 	str.w	r7, [r4, #-8]
 80063b8:	dcf4      	bgt.n	80063a4 <memcpy+0x15c>
 80063ba:	e788      	b.n	80062ce <memcpy+0x86>

080063bc <__malloc_lock>:
 80063bc:	4770      	bx	lr
 80063be:	bf00      	nop

080063c0 <__malloc_unlock>:
 80063c0:	4770      	bx	lr
 80063c2:	bf00      	nop

080063c4 <_Balloc>:
 80063c4:	b570      	push	{r4, r5, r6, lr}
 80063c6:	4606      	mov	r6, r0
 80063c8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80063ca:	460d      	mov	r5, r1
 80063cc:	b15c      	cbz	r4, 80063e6 <_Balloc+0x22>
 80063ce:	68e2      	ldr	r2, [r4, #12]
 80063d0:	b19a      	cbz	r2, 80063fa <_Balloc+0x36>
 80063d2:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80063d6:	b1e0      	cbz	r0, 8006412 <_Balloc+0x4e>
 80063d8:	6801      	ldr	r1, [r0, #0]
 80063da:	f842 1025 	str.w	r1, [r2, r5, lsl #2]
 80063de:	2200      	movs	r2, #0
 80063e0:	6102      	str	r2, [r0, #16]
 80063e2:	60c2      	str	r2, [r0, #12]
 80063e4:	bd70      	pop	{r4, r5, r6, pc}
 80063e6:	2010      	movs	r0, #16
 80063e8:	f7ff fc08 	bl	8005bfc <malloc>
 80063ec:	2300      	movs	r3, #0
 80063ee:	4604      	mov	r4, r0
 80063f0:	6270      	str	r0, [r6, #36]	; 0x24
 80063f2:	6043      	str	r3, [r0, #4]
 80063f4:	6083      	str	r3, [r0, #8]
 80063f6:	6003      	str	r3, [r0, #0]
 80063f8:	60c3      	str	r3, [r0, #12]
 80063fa:	2221      	movs	r2, #33	; 0x21
 80063fc:	4630      	mov	r0, r6
 80063fe:	2104      	movs	r1, #4
 8006400:	f001 fba0 	bl	8007b44 <_calloc_r>
 8006404:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006406:	60e0      	str	r0, [r4, #12]
 8006408:	68da      	ldr	r2, [r3, #12]
 800640a:	2a00      	cmp	r2, #0
 800640c:	d1e1      	bne.n	80063d2 <_Balloc+0xe>
 800640e:	2000      	movs	r0, #0
 8006410:	bd70      	pop	{r4, r5, r6, pc}
 8006412:	2301      	movs	r3, #1
 8006414:	4630      	mov	r0, r6
 8006416:	4619      	mov	r1, r3
 8006418:	fa03 f405 	lsl.w	r4, r3, r5
 800641c:	1d62      	adds	r2, r4, #5
 800641e:	0092      	lsls	r2, r2, #2
 8006420:	f001 fb90 	bl	8007b44 <_calloc_r>
 8006424:	2800      	cmp	r0, #0
 8006426:	d0f2      	beq.n	800640e <_Balloc+0x4a>
 8006428:	6045      	str	r5, [r0, #4]
 800642a:	6084      	str	r4, [r0, #8]
 800642c:	e7d7      	b.n	80063de <_Balloc+0x1a>
 800642e:	bf00      	nop

08006430 <_Bfree>:
 8006430:	b530      	push	{r4, r5, lr}
 8006432:	4604      	mov	r4, r0
 8006434:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006436:	b083      	sub	sp, #12
 8006438:	b155      	cbz	r5, 8006450 <_Bfree+0x20>
 800643a:	b139      	cbz	r1, 800644c <_Bfree+0x1c>
 800643c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800643e:	684a      	ldr	r2, [r1, #4]
 8006440:	68db      	ldr	r3, [r3, #12]
 8006442:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8006446:	6008      	str	r0, [r1, #0]
 8006448:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800644c:	b003      	add	sp, #12
 800644e:	bd30      	pop	{r4, r5, pc}
 8006450:	2010      	movs	r0, #16
 8006452:	9101      	str	r1, [sp, #4]
 8006454:	f7ff fbd2 	bl	8005bfc <malloc>
 8006458:	9901      	ldr	r1, [sp, #4]
 800645a:	6260      	str	r0, [r4, #36]	; 0x24
 800645c:	6045      	str	r5, [r0, #4]
 800645e:	6085      	str	r5, [r0, #8]
 8006460:	6005      	str	r5, [r0, #0]
 8006462:	60c5      	str	r5, [r0, #12]
 8006464:	e7e9      	b.n	800643a <_Bfree+0xa>
 8006466:	bf00      	nop

08006468 <__multadd>:
 8006468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800646c:	4688      	mov	r8, r1
 800646e:	f8d1 a010 	ldr.w	sl, [r1, #16]
 8006472:	b082      	sub	sp, #8
 8006474:	4681      	mov	r9, r0
 8006476:	f101 0514 	add.w	r5, r1, #20
 800647a:	2400      	movs	r4, #0
 800647c:	682f      	ldr	r7, [r5, #0]
 800647e:	3401      	adds	r4, #1
 8006480:	b2be      	uxth	r6, r7
 8006482:	0c3f      	lsrs	r7, r7, #16
 8006484:	fb02 3606 	mla	r6, r2, r6, r3
 8006488:	fb02 f307 	mul.w	r3, r2, r7
 800648c:	eb03 4316 	add.w	r3, r3, r6, lsr #16
 8006490:	b2b6      	uxth	r6, r6
 8006492:	eb06 4603 	add.w	r6, r6, r3, lsl #16
 8006496:	0c1b      	lsrs	r3, r3, #16
 8006498:	45a2      	cmp	sl, r4
 800649a:	f845 6b04 	str.w	r6, [r5], #4
 800649e:	dced      	bgt.n	800647c <__multadd+0x14>
 80064a0:	b153      	cbz	r3, 80064b8 <__multadd+0x50>
 80064a2:	f8d8 2008 	ldr.w	r2, [r8, #8]
 80064a6:	4592      	cmp	sl, r2
 80064a8:	da0a      	bge.n	80064c0 <__multadd+0x58>
 80064aa:	eb08 028a 	add.w	r2, r8, sl, lsl #2
 80064ae:	f10a 0101 	add.w	r1, sl, #1
 80064b2:	f8c8 1010 	str.w	r1, [r8, #16]
 80064b6:	6153      	str	r3, [r2, #20]
 80064b8:	4640      	mov	r0, r8
 80064ba:	b002      	add	sp, #8
 80064bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064c0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80064c4:	4648      	mov	r0, r9
 80064c6:	9301      	str	r3, [sp, #4]
 80064c8:	3101      	adds	r1, #1
 80064ca:	f7ff ff7b 	bl	80063c4 <_Balloc>
 80064ce:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80064d2:	f108 010c 	add.w	r1, r8, #12
 80064d6:	3202      	adds	r2, #2
 80064d8:	0092      	lsls	r2, r2, #2
 80064da:	4604      	mov	r4, r0
 80064dc:	300c      	adds	r0, #12
 80064de:	f7ff feb3 	bl	8006248 <memcpy>
 80064e2:	4641      	mov	r1, r8
 80064e4:	4648      	mov	r0, r9
 80064e6:	46a0      	mov	r8, r4
 80064e8:	f7ff ffa2 	bl	8006430 <_Bfree>
 80064ec:	9b01      	ldr	r3, [sp, #4]
 80064ee:	e7dc      	b.n	80064aa <__multadd+0x42>

080064f0 <__s2b>:
 80064f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064f4:	f648 6539 	movw	r5, #36409	; 0x8e39
 80064f8:	461f      	mov	r7, r3
 80064fa:	f6c3 05e3 	movt	r5, #14563	; 0x38e3
 80064fe:	3308      	adds	r3, #8
 8006500:	4606      	mov	r6, r0
 8006502:	460c      	mov	r4, r1
 8006504:	4690      	mov	r8, r2
 8006506:	fb85 1003 	smull	r1, r0, r5, r3
 800650a:	17db      	asrs	r3, r3, #31
 800650c:	ebc3 0060 	rsb	r0, r3, r0, asr #1
 8006510:	2801      	cmp	r0, #1
 8006512:	dd37      	ble.n	8006584 <__s2b+0x94>
 8006514:	2501      	movs	r5, #1
 8006516:	2100      	movs	r1, #0
 8006518:	006d      	lsls	r5, r5, #1
 800651a:	3101      	adds	r1, #1
 800651c:	42a8      	cmp	r0, r5
 800651e:	dcfb      	bgt.n	8006518 <__s2b+0x28>
 8006520:	4630      	mov	r0, r6
 8006522:	f7ff ff4f 	bl	80063c4 <_Balloc>
 8006526:	9b08      	ldr	r3, [sp, #32]
 8006528:	6143      	str	r3, [r0, #20]
 800652a:	2301      	movs	r3, #1
 800652c:	f1b8 0f09 	cmp.w	r8, #9
 8006530:	4601      	mov	r1, r0
 8006532:	6103      	str	r3, [r0, #16]
 8006534:	dd22      	ble.n	800657c <__s2b+0x8c>
 8006536:	f104 0909 	add.w	r9, r4, #9
 800653a:	4444      	add	r4, r8
 800653c:	464d      	mov	r5, r9
 800653e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006542:	220a      	movs	r2, #10
 8006544:	4630      	mov	r0, r6
 8006546:	3b30      	subs	r3, #48	; 0x30
 8006548:	f7ff ff8e 	bl	8006468 <__multadd>
 800654c:	42a5      	cmp	r5, r4
 800654e:	4601      	mov	r1, r0
 8006550:	d1f5      	bne.n	800653e <__s2b+0x4e>
 8006552:	eb09 0408 	add.w	r4, r9, r8
 8006556:	3c08      	subs	r4, #8
 8006558:	4547      	cmp	r7, r8
 800655a:	dd0c      	ble.n	8006576 <__s2b+0x86>
 800655c:	ebc8 0707 	rsb	r7, r8, r7
 8006560:	19e7      	adds	r7, r4, r7
 8006562:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006566:	220a      	movs	r2, #10
 8006568:	4630      	mov	r0, r6
 800656a:	3b30      	subs	r3, #48	; 0x30
 800656c:	f7ff ff7c 	bl	8006468 <__multadd>
 8006570:	42bc      	cmp	r4, r7
 8006572:	4601      	mov	r1, r0
 8006574:	d1f5      	bne.n	8006562 <__s2b+0x72>
 8006576:	4608      	mov	r0, r1
 8006578:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800657c:	340a      	adds	r4, #10
 800657e:	f04f 0809 	mov.w	r8, #9
 8006582:	e7e9      	b.n	8006558 <__s2b+0x68>
 8006584:	2100      	movs	r1, #0
 8006586:	e7cb      	b.n	8006520 <__s2b+0x30>

08006588 <__hi0bits>:
 8006588:	4603      	mov	r3, r0
 800658a:	2000      	movs	r0, #0
 800658c:	0c1a      	lsrs	r2, r3, #16
 800658e:	d101      	bne.n	8006594 <__hi0bits+0xc>
 8006590:	041b      	lsls	r3, r3, #16
 8006592:	2010      	movs	r0, #16
 8006594:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006598:	d101      	bne.n	800659e <__hi0bits+0x16>
 800659a:	3008      	adds	r0, #8
 800659c:	021b      	lsls	r3, r3, #8
 800659e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80065a2:	d101      	bne.n	80065a8 <__hi0bits+0x20>
 80065a4:	3004      	adds	r0, #4
 80065a6:	011b      	lsls	r3, r3, #4
 80065a8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80065ac:	d101      	bne.n	80065b2 <__hi0bits+0x2a>
 80065ae:	3002      	adds	r0, #2
 80065b0:	009b      	lsls	r3, r3, #2
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	db02      	blt.n	80065bc <__hi0bits+0x34>
 80065b6:	005b      	lsls	r3, r3, #1
 80065b8:	d401      	bmi.n	80065be <__hi0bits+0x36>
 80065ba:	2020      	movs	r0, #32
 80065bc:	4770      	bx	lr
 80065be:	3001      	adds	r0, #1
 80065c0:	4770      	bx	lr
 80065c2:	bf00      	nop

080065c4 <__lo0bits>:
 80065c4:	6803      	ldr	r3, [r0, #0]
 80065c6:	4602      	mov	r2, r0
 80065c8:	f013 0007 	ands.w	r0, r3, #7
 80065cc:	d007      	beq.n	80065de <__lo0bits+0x1a>
 80065ce:	07d9      	lsls	r1, r3, #31
 80065d0:	d41f      	bmi.n	8006612 <__lo0bits+0x4e>
 80065d2:	0798      	lsls	r0, r3, #30
 80065d4:	d41f      	bmi.n	8006616 <__lo0bits+0x52>
 80065d6:	089b      	lsrs	r3, r3, #2
 80065d8:	2002      	movs	r0, #2
 80065da:	6013      	str	r3, [r2, #0]
 80065dc:	4770      	bx	lr
 80065de:	b299      	uxth	r1, r3
 80065e0:	b909      	cbnz	r1, 80065e6 <__lo0bits+0x22>
 80065e2:	0c1b      	lsrs	r3, r3, #16
 80065e4:	2010      	movs	r0, #16
 80065e6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80065ea:	d101      	bne.n	80065f0 <__lo0bits+0x2c>
 80065ec:	3008      	adds	r0, #8
 80065ee:	0a1b      	lsrs	r3, r3, #8
 80065f0:	0719      	lsls	r1, r3, #28
 80065f2:	d101      	bne.n	80065f8 <__lo0bits+0x34>
 80065f4:	3004      	adds	r0, #4
 80065f6:	091b      	lsrs	r3, r3, #4
 80065f8:	0799      	lsls	r1, r3, #30
 80065fa:	d101      	bne.n	8006600 <__lo0bits+0x3c>
 80065fc:	3002      	adds	r0, #2
 80065fe:	089b      	lsrs	r3, r3, #2
 8006600:	07d9      	lsls	r1, r3, #31
 8006602:	d404      	bmi.n	800660e <__lo0bits+0x4a>
 8006604:	085b      	lsrs	r3, r3, #1
 8006606:	d101      	bne.n	800660c <__lo0bits+0x48>
 8006608:	2020      	movs	r0, #32
 800660a:	4770      	bx	lr
 800660c:	3001      	adds	r0, #1
 800660e:	6013      	str	r3, [r2, #0]
 8006610:	4770      	bx	lr
 8006612:	2000      	movs	r0, #0
 8006614:	4770      	bx	lr
 8006616:	085b      	lsrs	r3, r3, #1
 8006618:	2001      	movs	r0, #1
 800661a:	6013      	str	r3, [r2, #0]
 800661c:	4770      	bx	lr
 800661e:	bf00      	nop

08006620 <__i2b>:
 8006620:	b510      	push	{r4, lr}
 8006622:	460c      	mov	r4, r1
 8006624:	2101      	movs	r1, #1
 8006626:	f7ff fecd 	bl	80063c4 <_Balloc>
 800662a:	2201      	movs	r2, #1
 800662c:	6144      	str	r4, [r0, #20]
 800662e:	6102      	str	r2, [r0, #16]
 8006630:	bd10      	pop	{r4, pc}
 8006632:	bf00      	nop

08006634 <__multiply>:
 8006634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006638:	460c      	mov	r4, r1
 800663a:	690e      	ldr	r6, [r1, #16]
 800663c:	b085      	sub	sp, #20
 800663e:	6915      	ldr	r5, [r2, #16]
 8006640:	4617      	mov	r7, r2
 8006642:	42ae      	cmp	r6, r5
 8006644:	da04      	bge.n	8006650 <__multiply+0x1c>
 8006646:	4632      	mov	r2, r6
 8006648:	463c      	mov	r4, r7
 800664a:	462e      	mov	r6, r5
 800664c:	460f      	mov	r7, r1
 800664e:	4615      	mov	r5, r2
 8006650:	68a3      	ldr	r3, [r4, #8]
 8006652:	eb06 0805 	add.w	r8, r6, r5
 8006656:	6861      	ldr	r1, [r4, #4]
 8006658:	4598      	cmp	r8, r3
 800665a:	bfc8      	it	gt
 800665c:	3101      	addgt	r1, #1
 800665e:	f7ff feb1 	bl	80063c4 <_Balloc>
 8006662:	eb00 0988 	add.w	r9, r0, r8, lsl #2
 8006666:	f100 0314 	add.w	r3, r0, #20
 800666a:	f109 0914 	add.w	r9, r9, #20
 800666e:	9001      	str	r0, [sp, #4]
 8006670:	2000      	movs	r0, #0
 8006672:	454b      	cmp	r3, r9
 8006674:	d203      	bcs.n	800667e <__multiply+0x4a>
 8006676:	f843 0b04 	str.w	r0, [r3], #4
 800667a:	4599      	cmp	r9, r3
 800667c:	d8fb      	bhi.n	8006676 <__multiply+0x42>
 800667e:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8006682:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8006686:	3714      	adds	r7, #20
 8006688:	3514      	adds	r5, #20
 800668a:	3414      	adds	r4, #20
 800668c:	3614      	adds	r6, #20
 800668e:	42af      	cmp	r7, r5
 8006690:	d257      	bcs.n	8006742 <__multiply+0x10e>
 8006692:	9a01      	ldr	r2, [sp, #4]
 8006694:	f8cd 9008 	str.w	r9, [sp, #8]
 8006698:	46a9      	mov	r9, r5
 800669a:	f8cd 800c 	str.w	r8, [sp, #12]
 800669e:	f102 0c18 	add.w	ip, r2, #24
 80066a2:	46a0      	mov	r8, r4
 80066a4:	f857 4b04 	ldr.w	r4, [r7], #4
 80066a8:	b2a0      	uxth	r0, r4
 80066aa:	b1f0      	cbz	r0, 80066ea <__multiply+0xb6>
 80066ac:	4642      	mov	r2, r8
 80066ae:	f1ac 0304 	sub.w	r3, ip, #4
 80066b2:	2400      	movs	r4, #0
 80066b4:	f852 1b04 	ldr.w	r1, [r2], #4
 80066b8:	681d      	ldr	r5, [r3, #0]
 80066ba:	fa1f fa81 	uxth.w	sl, r1
 80066be:	0c09      	lsrs	r1, r1, #16
 80066c0:	fa1f fb85 	uxth.w	fp, r5
 80066c4:	0c2d      	lsrs	r5, r5, #16
 80066c6:	fb00 ba0a 	mla	sl, r0, sl, fp
 80066ca:	fb00 5101 	mla	r1, r0, r1, r5
 80066ce:	4454      	add	r4, sl
 80066d0:	eb01 4114 	add.w	r1, r1, r4, lsr #16
 80066d4:	b2a4      	uxth	r4, r4
 80066d6:	ea44 4501 	orr.w	r5, r4, r1, lsl #16
 80066da:	0c0c      	lsrs	r4, r1, #16
 80066dc:	4296      	cmp	r6, r2
 80066de:	f843 5b04 	str.w	r5, [r3], #4
 80066e2:	d8e7      	bhi.n	80066b4 <__multiply+0x80>
 80066e4:	601c      	str	r4, [r3, #0]
 80066e6:	f857 4c04 	ldr.w	r4, [r7, #-4]
 80066ea:	0c24      	lsrs	r4, r4, #16
 80066ec:	d021      	beq.n	8006732 <__multiply+0xfe>
 80066ee:	f85c 1c04 	ldr.w	r1, [ip, #-4]
 80066f2:	4642      	mov	r2, r8
 80066f4:	4663      	mov	r3, ip
 80066f6:	2500      	movs	r5, #0
 80066f8:	4608      	mov	r0, r1
 80066fa:	f8b2 a000 	ldrh.w	sl, [r2]
 80066fe:	0c00      	lsrs	r0, r0, #16
 8006700:	b289      	uxth	r1, r1
 8006702:	469b      	mov	fp, r3
 8006704:	fb04 000a 	mla	r0, r4, sl, r0
 8006708:	1945      	adds	r5, r0, r5
 800670a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800670e:	f843 1c04 	str.w	r1, [r3, #-4]
 8006712:	f853 0b04 	ldr.w	r0, [r3], #4
 8006716:	f852 1b04 	ldr.w	r1, [r2], #4
 800671a:	fa1f fa80 	uxth.w	sl, r0
 800671e:	0c09      	lsrs	r1, r1, #16
 8006720:	fb04 a101 	mla	r1, r4, r1, sl
 8006724:	eb01 4115 	add.w	r1, r1, r5, lsr #16
 8006728:	0c0d      	lsrs	r5, r1, #16
 800672a:	4296      	cmp	r6, r2
 800672c:	d8e5      	bhi.n	80066fa <__multiply+0xc6>
 800672e:	f8cb 1000 	str.w	r1, [fp]
 8006732:	45b9      	cmp	r9, r7
 8006734:	f10c 0c04 	add.w	ip, ip, #4
 8006738:	d8b4      	bhi.n	80066a4 <__multiply+0x70>
 800673a:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800673e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006742:	f1b8 0f00 	cmp.w	r8, #0
 8006746:	dd0b      	ble.n	8006760 <__multiply+0x12c>
 8006748:	f859 3c04 	ldr.w	r3, [r9, #-4]
 800674c:	f1a9 0904 	sub.w	r9, r9, #4
 8006750:	b11b      	cbz	r3, 800675a <__multiply+0x126>
 8006752:	e005      	b.n	8006760 <__multiply+0x12c>
 8006754:	f859 3d04 	ldr.w	r3, [r9, #-4]!
 8006758:	b913      	cbnz	r3, 8006760 <__multiply+0x12c>
 800675a:	f1b8 0801 	subs.w	r8, r8, #1
 800675e:	d1f9      	bne.n	8006754 <__multiply+0x120>
 8006760:	9b01      	ldr	r3, [sp, #4]
 8006762:	4618      	mov	r0, r3
 8006764:	f8c3 8010 	str.w	r8, [r3, #16]
 8006768:	b005      	add	sp, #20
 800676a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800676e:	bf00      	nop

08006770 <__pow5mult>:
 8006770:	f012 0303 	ands.w	r3, r2, #3
 8006774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006778:	4614      	mov	r4, r2
 800677a:	4680      	mov	r8, r0
 800677c:	460f      	mov	r7, r1
 800677e:	d128      	bne.n	80067d2 <__pow5mult+0x62>
 8006780:	10a4      	asrs	r4, r4, #2
 8006782:	d01a      	beq.n	80067ba <__pow5mult+0x4a>
 8006784:	f8d8 5024 	ldr.w	r5, [r8, #36]	; 0x24
 8006788:	2d00      	cmp	r5, #0
 800678a:	d02e      	beq.n	80067ea <__pow5mult+0x7a>
 800678c:	68ae      	ldr	r6, [r5, #8]
 800678e:	b92e      	cbnz	r6, 800679c <__pow5mult+0x2c>
 8006790:	e036      	b.n	8006800 <__pow5mult+0x90>
 8006792:	1064      	asrs	r4, r4, #1
 8006794:	d011      	beq.n	80067ba <__pow5mult+0x4a>
 8006796:	6835      	ldr	r5, [r6, #0]
 8006798:	b195      	cbz	r5, 80067c0 <__pow5mult+0x50>
 800679a:	462e      	mov	r6, r5
 800679c:	07e0      	lsls	r0, r4, #31
 800679e:	d5f8      	bpl.n	8006792 <__pow5mult+0x22>
 80067a0:	4639      	mov	r1, r7
 80067a2:	4632      	mov	r2, r6
 80067a4:	4640      	mov	r0, r8
 80067a6:	f7ff ff45 	bl	8006634 <__multiply>
 80067aa:	4639      	mov	r1, r7
 80067ac:	4605      	mov	r5, r0
 80067ae:	4640      	mov	r0, r8
 80067b0:	f7ff fe3e 	bl	8006430 <_Bfree>
 80067b4:	1064      	asrs	r4, r4, #1
 80067b6:	462f      	mov	r7, r5
 80067b8:	d1ed      	bne.n	8006796 <__pow5mult+0x26>
 80067ba:	4638      	mov	r0, r7
 80067bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067c0:	4631      	mov	r1, r6
 80067c2:	4632      	mov	r2, r6
 80067c4:	4640      	mov	r0, r8
 80067c6:	f7ff ff35 	bl	8006634 <__multiply>
 80067ca:	6030      	str	r0, [r6, #0]
 80067cc:	4606      	mov	r6, r0
 80067ce:	6005      	str	r5, [r0, #0]
 80067d0:	e7e4      	b.n	800679c <__pow5mult+0x2c>
 80067d2:	f249 7240 	movw	r2, #38720	; 0x9740
 80067d6:	1e5d      	subs	r5, r3, #1
 80067d8:	f6c0 0200 	movt	r2, #2048	; 0x800
 80067dc:	2300      	movs	r3, #0
 80067de:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 80067e2:	f7ff fe41 	bl	8006468 <__multadd>
 80067e6:	4607      	mov	r7, r0
 80067e8:	e7ca      	b.n	8006780 <__pow5mult+0x10>
 80067ea:	2010      	movs	r0, #16
 80067ec:	f7ff fa06 	bl	8005bfc <malloc>
 80067f0:	2300      	movs	r3, #0
 80067f2:	4605      	mov	r5, r0
 80067f4:	f8c8 0024 	str.w	r0, [r8, #36]	; 0x24
 80067f8:	6043      	str	r3, [r0, #4]
 80067fa:	6083      	str	r3, [r0, #8]
 80067fc:	6003      	str	r3, [r0, #0]
 80067fe:	60c3      	str	r3, [r0, #12]
 8006800:	4640      	mov	r0, r8
 8006802:	f240 2171 	movw	r1, #625	; 0x271
 8006806:	f7ff ff0b 	bl	8006620 <__i2b>
 800680a:	2300      	movs	r3, #0
 800680c:	60a8      	str	r0, [r5, #8]
 800680e:	4606      	mov	r6, r0
 8006810:	6003      	str	r3, [r0, #0]
 8006812:	e7c3      	b.n	800679c <__pow5mult+0x2c>

08006814 <__lshift>:
 8006814:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006818:	4693      	mov	fp, r2
 800681a:	690a      	ldr	r2, [r1, #16]
 800681c:	460f      	mov	r7, r1
 800681e:	ea4f 156b 	mov.w	r5, fp, asr #5
 8006822:	688b      	ldr	r3, [r1, #8]
 8006824:	eb05 0a02 	add.w	sl, r5, r2
 8006828:	4681      	mov	r9, r0
 800682a:	f10a 0601 	add.w	r6, sl, #1
 800682e:	6849      	ldr	r1, [r1, #4]
 8006830:	429e      	cmp	r6, r3
 8006832:	dd03      	ble.n	800683c <__lshift+0x28>
 8006834:	005b      	lsls	r3, r3, #1
 8006836:	3101      	adds	r1, #1
 8006838:	429e      	cmp	r6, r3
 800683a:	dcfb      	bgt.n	8006834 <__lshift+0x20>
 800683c:	4648      	mov	r0, r9
 800683e:	f7ff fdc1 	bl	80063c4 <_Balloc>
 8006842:	2d00      	cmp	r5, #0
 8006844:	4680      	mov	r8, r0
 8006846:	f100 0414 	add.w	r4, r0, #20
 800684a:	dd0a      	ble.n	8006862 <__lshift+0x4e>
 800684c:	2300      	movs	r3, #0
 800684e:	461a      	mov	r2, r3
 8006850:	3301      	adds	r3, #1
 8006852:	f844 2b04 	str.w	r2, [r4], #4
 8006856:	42ab      	cmp	r3, r5
 8006858:	d1fa      	bne.n	8006850 <__lshift+0x3c>
 800685a:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 800685e:	f103 0414 	add.w	r4, r3, #20
 8006862:	6938      	ldr	r0, [r7, #16]
 8006864:	f107 0514 	add.w	r5, r7, #20
 8006868:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 800686c:	3014      	adds	r0, #20
 800686e:	f01b 0b1f 	ands.w	fp, fp, #31
 8006872:	d01c      	beq.n	80068ae <__lshift+0x9a>
 8006874:	f1cb 0320 	rsb	r3, fp, #32
 8006878:	2200      	movs	r2, #0
 800687a:	6829      	ldr	r1, [r5, #0]
 800687c:	fa01 f10b 	lsl.w	r1, r1, fp
 8006880:	430a      	orrs	r2, r1
 8006882:	f844 2b04 	str.w	r2, [r4], #4
 8006886:	f855 2b04 	ldr.w	r2, [r5], #4
 800688a:	42a8      	cmp	r0, r5
 800688c:	fa22 f203 	lsr.w	r2, r2, r3
 8006890:	d8f3      	bhi.n	800687a <__lshift+0x66>
 8006892:	6022      	str	r2, [r4, #0]
 8006894:	b10a      	cbz	r2, 800689a <__lshift+0x86>
 8006896:	f10a 0602 	add.w	r6, sl, #2
 800689a:	4648      	mov	r0, r9
 800689c:	3e01      	subs	r6, #1
 800689e:	4639      	mov	r1, r7
 80068a0:	f8c8 6010 	str.w	r6, [r8, #16]
 80068a4:	f7ff fdc4 	bl	8006430 <_Bfree>
 80068a8:	4640      	mov	r0, r8
 80068aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80068b2:	42a8      	cmp	r0, r5
 80068b4:	f844 3b04 	str.w	r3, [r4], #4
 80068b8:	d9ef      	bls.n	800689a <__lshift+0x86>
 80068ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80068be:	42a8      	cmp	r0, r5
 80068c0:	f844 3b04 	str.w	r3, [r4], #4
 80068c4:	d8f3      	bhi.n	80068ae <__lshift+0x9a>
 80068c6:	e7e8      	b.n	800689a <__lshift+0x86>

080068c8 <__mcmp>:
 80068c8:	4603      	mov	r3, r0
 80068ca:	690a      	ldr	r2, [r1, #16]
 80068cc:	6900      	ldr	r0, [r0, #16]
 80068ce:	b430      	push	{r4, r5}
 80068d0:	1a80      	subs	r0, r0, r2
 80068d2:	d10f      	bne.n	80068f4 <__mcmp+0x2c>
 80068d4:	3204      	adds	r2, #4
 80068d6:	f103 0514 	add.w	r5, r3, #20
 80068da:	0092      	lsls	r2, r2, #2
 80068dc:	189b      	adds	r3, r3, r2
 80068de:	1889      	adds	r1, r1, r2
 80068e0:	3304      	adds	r3, #4
 80068e2:	3104      	adds	r1, #4
 80068e4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80068e8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80068ec:	42a2      	cmp	r2, r4
 80068ee:	d103      	bne.n	80068f8 <__mcmp+0x30>
 80068f0:	429d      	cmp	r5, r3
 80068f2:	d3f7      	bcc.n	80068e4 <__mcmp+0x1c>
 80068f4:	bc30      	pop	{r4, r5}
 80068f6:	4770      	bx	lr
 80068f8:	4294      	cmp	r4, r2
 80068fa:	bf94      	ite	ls
 80068fc:	2001      	movls	r0, #1
 80068fe:	f04f 30ff 	movhi.w	r0, #4294967295
 8006902:	e7f7      	b.n	80068f4 <__mcmp+0x2c>

08006904 <__mdiff>:
 8006904:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006908:	468b      	mov	fp, r1
 800690a:	4604      	mov	r4, r0
 800690c:	4611      	mov	r1, r2
 800690e:	4658      	mov	r0, fp
 8006910:	4691      	mov	r9, r2
 8006912:	f7ff ffd9 	bl	80068c8 <__mcmp>
 8006916:	1e05      	subs	r5, r0, #0
 8006918:	d061      	beq.n	80069de <__mdiff+0xda>
 800691a:	bfbc      	itt	lt
 800691c:	465b      	movlt	r3, fp
 800691e:	46cb      	movlt	fp, r9
 8006920:	4620      	mov	r0, r4
 8006922:	bfb8      	it	lt
 8006924:	4699      	movlt	r9, r3
 8006926:	f8db 1004 	ldr.w	r1, [fp, #4]
 800692a:	bfac      	ite	ge
 800692c:	f04f 0800 	movge.w	r8, #0
 8006930:	f04f 0801 	movlt.w	r8, #1
 8006934:	f7ff fd46 	bl	80063c4 <_Balloc>
 8006938:	f8db 7010 	ldr.w	r7, [fp, #16]
 800693c:	f109 0514 	add.w	r5, r9, #20
 8006940:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006944:	f10b 0614 	add.w	r6, fp, #20
 8006948:	2400      	movs	r4, #0
 800694a:	eb0b 0c87 	add.w	ip, fp, r7, lsl #2
 800694e:	eb09 0983 	add.w	r9, r9, r3, lsl #2
 8006952:	f10c 0c14 	add.w	ip, ip, #20
 8006956:	f109 0914 	add.w	r9, r9, #20
 800695a:	f100 0a14 	add.w	sl, r0, #20
 800695e:	f8c0 800c 	str.w	r8, [r0, #12]
 8006962:	f856 8b04 	ldr.w	r8, [r6], #4
 8006966:	4653      	mov	r3, sl
 8006968:	f855 ab04 	ldr.w	sl, [r5], #4
 800696c:	4632      	mov	r2, r6
 800696e:	fa1f f188 	uxth.w	r1, r8
 8006972:	1909      	adds	r1, r1, r4
 8006974:	fa1f fb8a 	uxth.w	fp, sl
 8006978:	ebcb 0101 	rsb	r1, fp, r1
 800697c:	ea4f 441a 	mov.w	r4, sl, lsr #16
 8006980:	ebc4 4418 	rsb	r4, r4, r8, lsr #16
 8006984:	eb04 4421 	add.w	r4, r4, r1, asr #16
 8006988:	b289      	uxth	r1, r1
 800698a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800698e:	1424      	asrs	r4, r4, #16
 8006990:	45a9      	cmp	r9, r5
 8006992:	f843 1b04 	str.w	r1, [r3], #4
 8006996:	469a      	mov	sl, r3
 8006998:	d8e3      	bhi.n	8006962 <__mdiff+0x5e>
 800699a:	45b4      	cmp	ip, r6
 800699c:	4698      	mov	r8, r3
 800699e:	d914      	bls.n	80069ca <__mdiff+0xc6>
 80069a0:	f852 5b04 	ldr.w	r5, [r2], #4
 80069a4:	b2a9      	uxth	r1, r5
 80069a6:	0c2d      	lsrs	r5, r5, #16
 80069a8:	190c      	adds	r4, r1, r4
 80069aa:	eb05 4524 	add.w	r5, r5, r4, asr #16
 80069ae:	b2a4      	uxth	r4, r4
 80069b0:	ea44 4105 	orr.w	r1, r4, r5, lsl #16
 80069b4:	142c      	asrs	r4, r5, #16
 80069b6:	4594      	cmp	ip, r2
 80069b8:	f843 1b04 	str.w	r1, [r3], #4
 80069bc:	d8f0      	bhi.n	80069a0 <__mdiff+0x9c>
 80069be:	43f3      	mvns	r3, r6
 80069c0:	4463      	add	r3, ip
 80069c2:	f023 0303 	bic.w	r3, r3, #3
 80069c6:	3304      	adds	r3, #4
 80069c8:	4443      	add	r3, r8
 80069ca:	3b04      	subs	r3, #4
 80069cc:	b921      	cbnz	r1, 80069d8 <__mdiff+0xd4>
 80069ce:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80069d2:	3f01      	subs	r7, #1
 80069d4:	2a00      	cmp	r2, #0
 80069d6:	d0fa      	beq.n	80069ce <__mdiff+0xca>
 80069d8:	6107      	str	r7, [r0, #16]
 80069da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069de:	4620      	mov	r0, r4
 80069e0:	4629      	mov	r1, r5
 80069e2:	f7ff fcef 	bl	80063c4 <_Balloc>
 80069e6:	2301      	movs	r3, #1
 80069e8:	6145      	str	r5, [r0, #20]
 80069ea:	6103      	str	r3, [r0, #16]
 80069ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080069f0 <__ulp>:
 80069f0:	2300      	movs	r3, #0
 80069f2:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 80069f6:	400b      	ands	r3, r1
 80069f8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	dd02      	ble.n	8006a06 <__ulp+0x16>
 8006a00:	4619      	mov	r1, r3
 8006a02:	2000      	movs	r0, #0
 8006a04:	4770      	bx	lr
 8006a06:	425b      	negs	r3, r3
 8006a08:	2100      	movs	r1, #0
 8006a0a:	151b      	asrs	r3, r3, #20
 8006a0c:	2b13      	cmp	r3, #19
 8006a0e:	dd0b      	ble.n	8006a28 <__ulp+0x38>
 8006a10:	2b32      	cmp	r3, #50	; 0x32
 8006a12:	dd02      	ble.n	8006a1a <__ulp+0x2a>
 8006a14:	2301      	movs	r3, #1
 8006a16:	4618      	mov	r0, r3
 8006a18:	4770      	bx	lr
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	f1c3 0333 	rsb	r3, r3, #51	; 0x33
 8006a20:	fa02 f303 	lsl.w	r3, r2, r3
 8006a24:	4618      	mov	r0, r3
 8006a26:	4770      	bx	lr
 8006a28:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006a2c:	2000      	movs	r0, #0
 8006a2e:	fa42 f103 	asr.w	r1, r2, r3
 8006a32:	4770      	bx	lr

08006a34 <__b2d>:
 8006a34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a38:	f100 0814 	add.w	r8, r0, #20
 8006a3c:	6906      	ldr	r6, [r0, #16]
 8006a3e:	4689      	mov	r9, r1
 8006a40:	3604      	adds	r6, #4
 8006a42:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8006a46:	4634      	mov	r4, r6
 8006a48:	4637      	mov	r7, r6
 8006a4a:	f854 5b04 	ldr.w	r5, [r4], #4
 8006a4e:	4628      	mov	r0, r5
 8006a50:	f7ff fd9a 	bl	8006588 <__hi0bits>
 8006a54:	280a      	cmp	r0, #10
 8006a56:	f1c0 0320 	rsb	r3, r0, #32
 8006a5a:	f8c9 3000 	str.w	r3, [r9]
 8006a5e:	dc18      	bgt.n	8006a92 <__b2d+0x5e>
 8006a60:	45b0      	cmp	r8, r6
 8006a62:	f1c0 010b 	rsb	r1, r0, #11
 8006a66:	fa25 f701 	lsr.w	r7, r5, r1
 8006a6a:	bf38      	it	cc
 8006a6c:	f854 4c08 	ldrcc.w	r4, [r4, #-8]
 8006a70:	f047 577f 	orr.w	r7, r7, #1069547520	; 0x3fc00000
 8006a74:	f447 1340 	orr.w	r3, r7, #3145728	; 0x300000
 8006a78:	bf34      	ite	cc
 8006a7a:	fa24 f101 	lsrcc.w	r1, r4, r1
 8006a7e:	2100      	movcs	r1, #0
 8006a80:	3015      	adds	r0, #21
 8006a82:	fa05 f500 	lsl.w	r5, r5, r0
 8006a86:	ea41 0205 	orr.w	r2, r1, r5
 8006a8a:	4610      	mov	r0, r2
 8006a8c:	4619      	mov	r1, r3
 8006a8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a92:	2100      	movs	r1, #0
 8006a94:	45b0      	cmp	r8, r6
 8006a96:	d202      	bcs.n	8006a9e <__b2d+0x6a>
 8006a98:	f854 1c08 	ldr.w	r1, [r4, #-8]
 8006a9c:	1f37      	subs	r7, r6, #4
 8006a9e:	f1b0 040b 	subs.w	r4, r0, #11
 8006aa2:	d018      	beq.n	8006ad6 <__b2d+0xa2>
 8006aa4:	fa05 f504 	lsl.w	r5, r5, r4
 8006aa8:	f1c0 002b 	rsb	r0, r0, #43	; 0x2b
 8006aac:	4547      	cmp	r7, r8
 8006aae:	f045 557f 	orr.w	r5, r5, #1069547520	; 0x3fc00000
 8006ab2:	fa21 f600 	lsr.w	r6, r1, r0
 8006ab6:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006aba:	ea45 0306 	orr.w	r3, r5, r6
 8006abe:	bf88      	it	hi
 8006ac0:	f857 5c04 	ldrhi.w	r5, [r7, #-4]
 8006ac4:	fa01 f104 	lsl.w	r1, r1, r4
 8006ac8:	bf8c      	ite	hi
 8006aca:	fa25 f000 	lsrhi.w	r0, r5, r0
 8006ace:	2000      	movls	r0, #0
 8006ad0:	ea40 0201 	orr.w	r2, r0, r1
 8006ad4:	e7d9      	b.n	8006a8a <__b2d+0x56>
 8006ad6:	f045 557f 	orr.w	r5, r5, #1069547520	; 0x3fc00000
 8006ada:	460a      	mov	r2, r1
 8006adc:	f445 1340 	orr.w	r3, r5, #3145728	; 0x300000
 8006ae0:	e7d3      	b.n	8006a8a <__b2d+0x56>
 8006ae2:	bf00      	nop

08006ae4 <__d2b>:
 8006ae4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006ae8:	b083      	sub	sp, #12
 8006aea:	2101      	movs	r1, #1
 8006aec:	461d      	mov	r5, r3
 8006aee:	4614      	mov	r4, r2
 8006af0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8006af2:	f7ff fc67 	bl	80063c4 <_Balloc>
 8006af6:	f3c5 560a 	ubfx	r6, r5, #20, #11
 8006afa:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
 8006afe:	46a9      	mov	r9, r5
 8006b00:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006b04:	4680      	mov	r8, r0
 8006b06:	b10e      	cbz	r6, 8006b0c <__d2b+0x28>
 8006b08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b0c:	9301      	str	r3, [sp, #4]
 8006b0e:	2c00      	cmp	r4, #0
 8006b10:	d024      	beq.n	8006b5c <__d2b+0x78>
 8006b12:	a802      	add	r0, sp, #8
 8006b14:	f840 4d08 	str.w	r4, [r0, #-8]!
 8006b18:	4668      	mov	r0, sp
 8006b1a:	f7ff fd53 	bl	80065c4 <__lo0bits>
 8006b1e:	9b01      	ldr	r3, [sp, #4]
 8006b20:	2800      	cmp	r0, #0
 8006b22:	d131      	bne.n	8006b88 <__d2b+0xa4>
 8006b24:	9a00      	ldr	r2, [sp, #0]
 8006b26:	f8c8 2014 	str.w	r2, [r8, #20]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	bf0c      	ite	eq
 8006b2e:	2401      	moveq	r4, #1
 8006b30:	2402      	movne	r4, #2
 8006b32:	f8c8 3018 	str.w	r3, [r8, #24]
 8006b36:	f8c8 4010 	str.w	r4, [r8, #16]
 8006b3a:	b9e6      	cbnz	r6, 8006b76 <__d2b+0x92>
 8006b3c:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8006b40:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006b44:	6038      	str	r0, [r7, #0]
 8006b46:	6918      	ldr	r0, [r3, #16]
 8006b48:	f7ff fd1e 	bl	8006588 <__hi0bits>
 8006b4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b4e:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 8006b52:	6018      	str	r0, [r3, #0]
 8006b54:	4640      	mov	r0, r8
 8006b56:	b003      	add	sp, #12
 8006b58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006b5c:	a801      	add	r0, sp, #4
 8006b5e:	f7ff fd31 	bl	80065c4 <__lo0bits>
 8006b62:	2301      	movs	r3, #1
 8006b64:	461c      	mov	r4, r3
 8006b66:	f8c8 3010 	str.w	r3, [r8, #16]
 8006b6a:	9b01      	ldr	r3, [sp, #4]
 8006b6c:	f8c8 3014 	str.w	r3, [r8, #20]
 8006b70:	3020      	adds	r0, #32
 8006b72:	2e00      	cmp	r6, #0
 8006b74:	d0e2      	beq.n	8006b3c <__d2b+0x58>
 8006b76:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006b78:	f2a6 4933 	subw	r9, r6, #1075	; 0x433
 8006b7c:	f1c0 0335 	rsb	r3, r0, #53	; 0x35
 8006b80:	4448      	add	r0, r9
 8006b82:	6038      	str	r0, [r7, #0]
 8006b84:	6013      	str	r3, [r2, #0]
 8006b86:	e7e5      	b.n	8006b54 <__d2b+0x70>
 8006b88:	f1c0 0120 	rsb	r1, r0, #32
 8006b8c:	9a00      	ldr	r2, [sp, #0]
 8006b8e:	fa03 f101 	lsl.w	r1, r3, r1
 8006b92:	fa23 f300 	lsr.w	r3, r3, r0
 8006b96:	430a      	orrs	r2, r1
 8006b98:	9301      	str	r3, [sp, #4]
 8006b9a:	f8c8 2014 	str.w	r2, [r8, #20]
 8006b9e:	e7c4      	b.n	8006b2a <__d2b+0x46>

08006ba0 <__ratio>:
 8006ba0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006ba4:	b083      	sub	sp, #12
 8006ba6:	4688      	mov	r8, r1
 8006ba8:	4669      	mov	r1, sp
 8006baa:	4606      	mov	r6, r0
 8006bac:	f7ff ff42 	bl	8006a34 <__b2d>
 8006bb0:	460d      	mov	r5, r1
 8006bb2:	4604      	mov	r4, r0
 8006bb4:	a901      	add	r1, sp, #4
 8006bb6:	4640      	mov	r0, r8
 8006bb8:	f7ff ff3c 	bl	8006a34 <__b2d>
 8006bbc:	462f      	mov	r7, r5
 8006bbe:	460b      	mov	r3, r1
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8006bc6:	4699      	mov	r9, r3
 8006bc8:	6930      	ldr	r0, [r6, #16]
 8006bca:	4626      	mov	r6, r4
 8006bcc:	4690      	mov	r8, r2
 8006bce:	ebc1 0e00 	rsb	lr, r1, r0
 8006bd2:	e89d 0003 	ldmia.w	sp, {r0, r1}
 8006bd6:	1a40      	subs	r0, r0, r1
 8006bd8:	eb00 114e 	add.w	r1, r0, lr, lsl #5
 8006bdc:	2900      	cmp	r1, #0
 8006bde:	bfc9      	itett	gt
 8006be0:	eb05 5701 	addgt.w	r7, r5, r1, lsl #20
 8006be4:	eba3 5901 	suble.w	r9, r3, r1, lsl #20
 8006be8:	4624      	movgt	r4, r4
 8006bea:	463d      	movgt	r5, r7
 8006bec:	bfdc      	itt	le
 8006bee:	4612      	movle	r2, r2
 8006bf0:	464b      	movle	r3, r9
 8006bf2:	4620      	mov	r0, r4
 8006bf4:	4629      	mov	r1, r5
 8006bf6:	f001 fea7 	bl	8008948 <__aeabi_ddiv>
 8006bfa:	b003      	add	sp, #12
 8006bfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08006c00 <_mprec_log10>:
 8006c00:	2817      	cmp	r0, #23
 8006c02:	b510      	push	{r4, lr}
 8006c04:	4604      	mov	r4, r0
 8006c06:	dd0c      	ble.n	8006c22 <_mprec_log10+0x22>
 8006c08:	2100      	movs	r1, #0
 8006c0a:	2000      	movs	r0, #0
 8006c0c:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 8006c10:	2300      	movs	r3, #0
 8006c12:	2200      	movs	r2, #0
 8006c14:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8006c18:	f001 fd6c 	bl	80086f4 <__aeabi_dmul>
 8006c1c:	3c01      	subs	r4, #1
 8006c1e:	d1f7      	bne.n	8006c10 <_mprec_log10+0x10>
 8006c20:	bd10      	pop	{r4, pc}
 8006c22:	f249 7340 	movw	r3, #38720	; 0x9740
 8006c26:	f6c0 0300 	movt	r3, #2048	; 0x800
 8006c2a:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8006c2e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8006c32:	bd10      	pop	{r4, pc}

08006c34 <__copybits>:
 8006c34:	b470      	push	{r4, r5, r6}
 8006c36:	3901      	subs	r1, #1
 8006c38:	6915      	ldr	r5, [r2, #16]
 8006c3a:	f102 0314 	add.w	r3, r2, #20
 8006c3e:	114e      	asrs	r6, r1, #5
 8006c40:	3601      	adds	r6, #1
 8006c42:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8006c46:	3514      	adds	r5, #20
 8006c48:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8006c4c:	42ab      	cmp	r3, r5
 8006c4e:	d20c      	bcs.n	8006c6a <__copybits+0x36>
 8006c50:	4601      	mov	r1, r0
 8006c52:	f853 4b04 	ldr.w	r4, [r3], #4
 8006c56:	429d      	cmp	r5, r3
 8006c58:	f841 4b04 	str.w	r4, [r1], #4
 8006c5c:	d8f9      	bhi.n	8006c52 <__copybits+0x1e>
 8006c5e:	1aab      	subs	r3, r5, r2
 8006c60:	3b15      	subs	r3, #21
 8006c62:	f023 0303 	bic.w	r3, r3, #3
 8006c66:	3304      	adds	r3, #4
 8006c68:	18c0      	adds	r0, r0, r3
 8006c6a:	4286      	cmp	r6, r0
 8006c6c:	d904      	bls.n	8006c78 <__copybits+0x44>
 8006c6e:	2300      	movs	r3, #0
 8006c70:	f840 3b04 	str.w	r3, [r0], #4
 8006c74:	4286      	cmp	r6, r0
 8006c76:	d8fb      	bhi.n	8006c70 <__copybits+0x3c>
 8006c78:	bc70      	pop	{r4, r5, r6}
 8006c7a:	4770      	bx	lr

08006c7c <__any_on>:
 8006c7c:	b430      	push	{r4, r5}
 8006c7e:	114b      	asrs	r3, r1, #5
 8006c80:	6904      	ldr	r4, [r0, #16]
 8006c82:	f100 0214 	add.w	r2, r0, #20
 8006c86:	429c      	cmp	r4, r3
 8006c88:	bfb8      	it	lt
 8006c8a:	4623      	movlt	r3, r4
 8006c8c:	db00      	blt.n	8006c90 <__any_on+0x14>
 8006c8e:	dc11      	bgt.n	8006cb4 <__any_on+0x38>
 8006c90:	3304      	adds	r3, #4
 8006c92:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8006c96:	1d03      	adds	r3, r0, #4
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d218      	bcs.n	8006cce <__any_on+0x52>
 8006c9c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8006ca0:	b92b      	cbnz	r3, 8006cae <__any_on+0x32>
 8006ca2:	4282      	cmp	r2, r0
 8006ca4:	d213      	bcs.n	8006cce <__any_on+0x52>
 8006ca6:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d0f9      	beq.n	8006ca2 <__any_on+0x26>
 8006cae:	2001      	movs	r0, #1
 8006cb0:	bc30      	pop	{r4, r5}
 8006cb2:	4770      	bx	lr
 8006cb4:	f011 011f 	ands.w	r1, r1, #31
 8006cb8:	d0ea      	beq.n	8006c90 <__any_on+0x14>
 8006cba:	eb00 0483 	add.w	r4, r0, r3, lsl #2
 8006cbe:	6964      	ldr	r4, [r4, #20]
 8006cc0:	fa24 f501 	lsr.w	r5, r4, r1
 8006cc4:	fa05 f101 	lsl.w	r1, r5, r1
 8006cc8:	42a1      	cmp	r1, r4
 8006cca:	d1f0      	bne.n	8006cae <__any_on+0x32>
 8006ccc:	e7e0      	b.n	8006c90 <__any_on+0x14>
 8006cce:	2000      	movs	r0, #0
 8006cd0:	e7ee      	b.n	8006cb0 <__any_on+0x34>
 8006cd2:	bf00      	nop

08006cd4 <__fpclassifyd>:
 8006cd4:	ea50 0201 	orrs.w	r2, r0, r1
 8006cd8:	d101      	bne.n	8006cde <__fpclassifyd+0xa>
 8006cda:	2002      	movs	r0, #2
 8006cdc:	4770      	bx	lr
 8006cde:	f1d0 0201 	rsbs	r2, r0, #1
 8006ce2:	bf38      	it	cc
 8006ce4:	2200      	movcc	r2, #0
 8006ce6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8006cea:	bf08      	it	eq
 8006cec:	2800      	cmpeq	r0, #0
 8006cee:	d0f4      	beq.n	8006cda <__fpclassifyd+0x6>
 8006cf0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006cf4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006cf8:	f5a3 1080 	sub.w	r0, r3, #1048576	; 0x100000
 8006cfc:	f6c7 71df 	movt	r1, #32735	; 0x7fdf
 8006d00:	4288      	cmp	r0, r1
 8006d02:	d801      	bhi.n	8006d08 <__fpclassifyd+0x34>
 8006d04:	2004      	movs	r0, #4
 8006d06:	4770      	bx	lr
 8006d08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d0c:	d201      	bcs.n	8006d12 <__fpclassifyd+0x3e>
 8006d0e:	2003      	movs	r0, #3
 8006d10:	4770      	bx	lr
 8006d12:	2000      	movs	r0, #0
 8006d14:	f6c7 70f0 	movt	r0, #32752	; 0x7ff0
 8006d18:	4283      	cmp	r3, r0
 8006d1a:	bf14      	ite	ne
 8006d1c:	2000      	movne	r0, #0
 8006d1e:	f002 0001 	andeq.w	r0, r2, #1
 8006d22:	4770      	bx	lr

08006d24 <_sbrk_r>:
 8006d24:	b538      	push	{r3, r4, r5, lr}
 8006d26:	f241 344c 	movw	r4, #4940	; 0x134c
 8006d2a:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8006d2e:	4605      	mov	r5, r0
 8006d30:	4608      	mov	r0, r1
 8006d32:	2300      	movs	r3, #0
 8006d34:	6023      	str	r3, [r4, #0]
 8006d36:	f7fc f961 	bl	8002ffc <_sbrk>
 8006d3a:	1c43      	adds	r3, r0, #1
 8006d3c:	d000      	beq.n	8006d40 <_sbrk_r+0x1c>
 8006d3e:	bd38      	pop	{r3, r4, r5, pc}
 8006d40:	6823      	ldr	r3, [r4, #0]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d0fb      	beq.n	8006d3e <_sbrk_r+0x1a>
 8006d46:	602b      	str	r3, [r5, #0]
 8006d48:	bd38      	pop	{r3, r4, r5, pc}
 8006d4a:	bf00      	nop

08006d4c <strcmp>:
 8006d4c:	ea80 0201 	eor.w	r2, r0, r1
 8006d50:	f012 0f03 	tst.w	r2, #3
 8006d54:	f040 803a 	bne.w	8006dcc <strcmp_unaligned>
 8006d58:	f010 0203 	ands.w	r2, r0, #3
 8006d5c:	f020 0003 	bic.w	r0, r0, #3
 8006d60:	f021 0103 	bic.w	r1, r1, #3
 8006d64:	f850 cb04 	ldr.w	ip, [r0], #4
 8006d68:	bf08      	it	eq
 8006d6a:	f851 3b04 	ldreq.w	r3, [r1], #4
 8006d6e:	d00d      	beq.n	8006d8c <strcmp+0x40>
 8006d70:	f082 0203 	eor.w	r2, r2, #3
 8006d74:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8006d78:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8006d7c:	fa23 f202 	lsr.w	r2, r3, r2
 8006d80:	f851 3b04 	ldr.w	r3, [r1], #4
 8006d84:	ea4c 0c02 	orr.w	ip, ip, r2
 8006d88:	ea43 0302 	orr.w	r3, r3, r2
 8006d8c:	f1ac 3201 	sub.w	r2, ip, #16843009	; 0x1010101
 8006d90:	459c      	cmp	ip, r3
 8006d92:	bf01      	itttt	eq
 8006d94:	ea22 020c 	biceq.w	r2, r2, ip
 8006d98:	f012 3f80 	tsteq.w	r2, #2155905152	; 0x80808080
 8006d9c:	f850 cb04 	ldreq.w	ip, [r0], #4
 8006da0:	f851 3b04 	ldreq.w	r3, [r1], #4
 8006da4:	d0f2      	beq.n	8006d8c <strcmp+0x40>
 8006da6:	ea4f 600c 	mov.w	r0, ip, lsl #24
 8006daa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8006dae:	2801      	cmp	r0, #1
 8006db0:	bf28      	it	cs
 8006db2:	ebb0 6f03 	cmpcs.w	r0, r3, lsl #24
 8006db6:	bf08      	it	eq
 8006db8:	0a1b      	lsreq	r3, r3, #8
 8006dba:	d0f4      	beq.n	8006da6 <strcmp+0x5a>
 8006dbc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8006dc0:	ea4f 6010 	mov.w	r0, r0, lsr #24
 8006dc4:	eba0 0003 	sub.w	r0, r0, r3
 8006dc8:	4770      	bx	lr
 8006dca:	bf00      	nop

08006dcc <strcmp_unaligned>:
 8006dcc:	f010 0f03 	tst.w	r0, #3
 8006dd0:	d00a      	beq.n	8006de8 <strcmp_unaligned+0x1c>
 8006dd2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006dd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006dda:	2a01      	cmp	r2, #1
 8006ddc:	bf28      	it	cs
 8006dde:	429a      	cmpcs	r2, r3
 8006de0:	d0f4      	beq.n	8006dcc <strcmp_unaligned>
 8006de2:	eba2 0003 	sub.w	r0, r2, r3
 8006de6:	4770      	bx	lr
 8006de8:	f84d 5d04 	str.w	r5, [sp, #-4]!
 8006dec:	f84d 4d04 	str.w	r4, [sp, #-4]!
 8006df0:	f04f 0201 	mov.w	r2, #1
 8006df4:	ea42 2202 	orr.w	r2, r2, r2, lsl #8
 8006df8:	ea42 4202 	orr.w	r2, r2, r2, lsl #16
 8006dfc:	f001 0c03 	and.w	ip, r1, #3
 8006e00:	f021 0103 	bic.w	r1, r1, #3
 8006e04:	f850 4b04 	ldr.w	r4, [r0], #4
 8006e08:	f851 5b04 	ldr.w	r5, [r1], #4
 8006e0c:	f1bc 0f02 	cmp.w	ip, #2
 8006e10:	d026      	beq.n	8006e60 <strcmp_unaligned+0x94>
 8006e12:	d84b      	bhi.n	8006eac <strcmp_unaligned+0xe0>
 8006e14:	f024 4c7f 	bic.w	ip, r4, #4278190080	; 0xff000000
 8006e18:	ebbc 2f15 	cmp.w	ip, r5, lsr #8
 8006e1c:	eba4 0302 	sub.w	r3, r4, r2
 8006e20:	ea23 0304 	bic.w	r3, r3, r4
 8006e24:	d10d      	bne.n	8006e42 <strcmp_unaligned+0x76>
 8006e26:	ea13 13c2 	ands.w	r3, r3, r2, lsl #7
 8006e2a:	bf08      	it	eq
 8006e2c:	f851 5b04 	ldreq.w	r5, [r1], #4
 8006e30:	d10a      	bne.n	8006e48 <strcmp_unaligned+0x7c>
 8006e32:	ea8c 0c04 	eor.w	ip, ip, r4
 8006e36:	ebbc 6f05 	cmp.w	ip, r5, lsl #24
 8006e3a:	d10c      	bne.n	8006e56 <strcmp_unaligned+0x8a>
 8006e3c:	f850 4b04 	ldr.w	r4, [r0], #4
 8006e40:	e7e8      	b.n	8006e14 <strcmp_unaligned+0x48>
 8006e42:	ea4f 2515 	mov.w	r5, r5, lsr #8
 8006e46:	e05c      	b.n	8006f02 <strcmp_unaligned+0x136>
 8006e48:	f033 437f 	bics.w	r3, r3, #4278190080	; 0xff000000
 8006e4c:	d152      	bne.n	8006ef4 <strcmp_unaligned+0x128>
 8006e4e:	780d      	ldrb	r5, [r1, #0]
 8006e50:	ea4f 6c14 	mov.w	ip, r4, lsr #24
 8006e54:	e055      	b.n	8006f02 <strcmp_unaligned+0x136>
 8006e56:	ea4f 6c14 	mov.w	ip, r4, lsr #24
 8006e5a:	f005 05ff 	and.w	r5, r5, #255	; 0xff
 8006e5e:	e050      	b.n	8006f02 <strcmp_unaligned+0x136>
 8006e60:	ea4f 4c04 	mov.w	ip, r4, lsl #16
 8006e64:	eba4 0302 	sub.w	r3, r4, r2
 8006e68:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006e6c:	ea23 0304 	bic.w	r3, r3, r4
 8006e70:	ebbc 4f15 	cmp.w	ip, r5, lsr #16
 8006e74:	d117      	bne.n	8006ea6 <strcmp_unaligned+0xda>
 8006e76:	ea13 13c2 	ands.w	r3, r3, r2, lsl #7
 8006e7a:	bf08      	it	eq
 8006e7c:	f851 5b04 	ldreq.w	r5, [r1], #4
 8006e80:	d107      	bne.n	8006e92 <strcmp_unaligned+0xc6>
 8006e82:	ea8c 0c04 	eor.w	ip, ip, r4
 8006e86:	ebbc 4f05 	cmp.w	ip, r5, lsl #16
 8006e8a:	d108      	bne.n	8006e9e <strcmp_unaligned+0xd2>
 8006e8c:	f850 4b04 	ldr.w	r4, [r0], #4
 8006e90:	e7e6      	b.n	8006e60 <strcmp_unaligned+0x94>
 8006e92:	041b      	lsls	r3, r3, #16
 8006e94:	d12e      	bne.n	8006ef4 <strcmp_unaligned+0x128>
 8006e96:	880d      	ldrh	r5, [r1, #0]
 8006e98:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8006e9c:	e031      	b.n	8006f02 <strcmp_unaligned+0x136>
 8006e9e:	ea4f 4505 	mov.w	r5, r5, lsl #16
 8006ea2:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8006ea6:	ea4f 4515 	mov.w	r5, r5, lsr #16
 8006eaa:	e02a      	b.n	8006f02 <strcmp_unaligned+0x136>
 8006eac:	f004 0cff 	and.w	ip, r4, #255	; 0xff
 8006eb0:	ebbc 6f15 	cmp.w	ip, r5, lsr #24
 8006eb4:	eba4 0302 	sub.w	r3, r4, r2
 8006eb8:	ea23 0304 	bic.w	r3, r3, r4
 8006ebc:	d10d      	bne.n	8006eda <strcmp_unaligned+0x10e>
 8006ebe:	ea13 13c2 	ands.w	r3, r3, r2, lsl #7
 8006ec2:	bf08      	it	eq
 8006ec4:	f851 5b04 	ldreq.w	r5, [r1], #4
 8006ec8:	d10a      	bne.n	8006ee0 <strcmp_unaligned+0x114>
 8006eca:	ea8c 0c04 	eor.w	ip, ip, r4
 8006ece:	ebbc 2f05 	cmp.w	ip, r5, lsl #8
 8006ed2:	d10a      	bne.n	8006eea <strcmp_unaligned+0x11e>
 8006ed4:	f850 4b04 	ldr.w	r4, [r0], #4
 8006ed8:	e7e8      	b.n	8006eac <strcmp_unaligned+0xe0>
 8006eda:	ea4f 6515 	mov.w	r5, r5, lsr #24
 8006ede:	e010      	b.n	8006f02 <strcmp_unaligned+0x136>
 8006ee0:	f014 0fff 	tst.w	r4, #255	; 0xff
 8006ee4:	d006      	beq.n	8006ef4 <strcmp_unaligned+0x128>
 8006ee6:	f851 5b04 	ldr.w	r5, [r1], #4
 8006eea:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 8006eee:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 8006ef2:	e006      	b.n	8006f02 <strcmp_unaligned+0x136>
 8006ef4:	f04f 0000 	mov.w	r0, #0
 8006ef8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006efc:	f85d 5b04 	ldr.w	r5, [sp], #4
 8006f00:	4770      	bx	lr
 8006f02:	f00c 02ff 	and.w	r2, ip, #255	; 0xff
 8006f06:	f005 00ff 	and.w	r0, r5, #255	; 0xff
 8006f0a:	2801      	cmp	r0, #1
 8006f0c:	bf28      	it	cs
 8006f0e:	4290      	cmpcs	r0, r2
 8006f10:	bf04      	itt	eq
 8006f12:	ea4f 2c1c 	moveq.w	ip, ip, lsr #8
 8006f16:	0a2d      	lsreq	r5, r5, #8
 8006f18:	d0f3      	beq.n	8006f02 <strcmp_unaligned+0x136>
 8006f1a:	eba2 0000 	sub.w	r0, r2, r0
 8006f1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f22:	f85d 5b04 	ldr.w	r5, [sp], #4
 8006f26:	4770      	bx	lr

08006f28 <strlen>:
 8006f28:	f020 0103 	bic.w	r1, r0, #3
 8006f2c:	f010 0003 	ands.w	r0, r0, #3
 8006f30:	f1c0 0000 	rsb	r0, r0, #0
 8006f34:	f851 3b04 	ldr.w	r3, [r1], #4
 8006f38:	f100 0c04 	add.w	ip, r0, #4
 8006f3c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8006f40:	f06f 0200 	mvn.w	r2, #0
 8006f44:	bf1c      	itt	ne
 8006f46:	fa22 f20c 	lsrne.w	r2, r2, ip
 8006f4a:	4313      	orrne	r3, r2
 8006f4c:	f04f 0c01 	mov.w	ip, #1
 8006f50:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 8006f54:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 8006f58:	eba3 020c 	sub.w	r2, r3, ip
 8006f5c:	ea22 0203 	bic.w	r2, r2, r3
 8006f60:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 8006f64:	bf04      	itt	eq
 8006f66:	f851 3b04 	ldreq.w	r3, [r1], #4
 8006f6a:	3004      	addeq	r0, #4
 8006f6c:	d0f4      	beq.n	8006f58 <strlen+0x30>
 8006f6e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006f72:	bf1f      	itttt	ne
 8006f74:	3001      	addne	r0, #1
 8006f76:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
 8006f7a:	3001      	addne	r0, #1
 8006f7c:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
 8006f80:	bf18      	it	ne
 8006f82:	3001      	addne	r0, #1
 8006f84:	4770      	bx	lr
 8006f86:	bf00      	nop

08006f88 <__ssprint_r>:
 8006f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f8c:	b083      	sub	sp, #12
 8006f8e:	6894      	ldr	r4, [r2, #8]
 8006f90:	4692      	mov	sl, r2
 8006f92:	9001      	str	r0, [sp, #4]
 8006f94:	460d      	mov	r5, r1
 8006f96:	6817      	ldr	r7, [r2, #0]
 8006f98:	2c00      	cmp	r4, #0
 8006f9a:	d075      	beq.n	8007088 <__ssprint_r+0x100>
 8006f9c:	f04f 0b00 	mov.w	fp, #0
 8006fa0:	6808      	ldr	r0, [r1, #0]
 8006fa2:	688b      	ldr	r3, [r1, #8]
 8006fa4:	465c      	mov	r4, fp
 8006fa6:	2c00      	cmp	r4, #0
 8006fa8:	d04c      	beq.n	8007044 <__ssprint_r+0xbc>
 8006faa:	429c      	cmp	r4, r3
 8006fac:	461e      	mov	r6, r3
 8006fae:	4698      	mov	r8, r3
 8006fb0:	d34e      	bcc.n	8007050 <__ssprint_r+0xc8>
 8006fb2:	f8b5 e00c 	ldrh.w	lr, [r5, #12]
 8006fb6:	f41e 6f90 	tst.w	lr, #1152	; 0x480
 8006fba:	d033      	beq.n	8007024 <__ssprint_r+0x9c>
 8006fbc:	696b      	ldr	r3, [r5, #20]
 8006fbe:	1c62      	adds	r2, r4, #1
 8006fc0:	6929      	ldr	r1, [r5, #16]
 8006fc2:	f40e 6e80 	and.w	lr, lr, #1024	; 0x400
 8006fc6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006fca:	1a46      	subs	r6, r0, r1
 8006fcc:	1990      	adds	r0, r2, r6
 8006fce:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8006fd2:	ea4f 0963 	mov.w	r9, r3, asr #1
 8006fd6:	4581      	cmp	r9, r0
 8006fd8:	464a      	mov	r2, r9
 8006fda:	bf38      	it	cc
 8006fdc:	4681      	movcc	r9, r0
 8006fde:	fa0f f08e 	sxth.w	r0, lr
 8006fe2:	bf38      	it	cc
 8006fe4:	464a      	movcc	r2, r9
 8006fe6:	2800      	cmp	r0, #0
 8006fe8:	d035      	beq.n	8007056 <__ssprint_r+0xce>
 8006fea:	9801      	ldr	r0, [sp, #4]
 8006fec:	4611      	mov	r1, r2
 8006fee:	f7fe fe15 	bl	8005c1c <_malloc_r>
 8006ff2:	4680      	mov	r8, r0
 8006ff4:	2800      	cmp	r0, #0
 8006ff6:	d038      	beq.n	800706a <__ssprint_r+0xe2>
 8006ff8:	4632      	mov	r2, r6
 8006ffa:	6929      	ldr	r1, [r5, #16]
 8006ffc:	f7ff f924 	bl	8006248 <memcpy>
 8007000:	89aa      	ldrh	r2, [r5, #12]
 8007002:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8007006:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800700a:	81aa      	strh	r2, [r5, #12]
 800700c:	eb08 0006 	add.w	r0, r8, r6
 8007010:	ebc6 0209 	rsb	r2, r6, r9
 8007014:	f8c5 8010 	str.w	r8, [r5, #16]
 8007018:	4626      	mov	r6, r4
 800701a:	46a0      	mov	r8, r4
 800701c:	6028      	str	r0, [r5, #0]
 800701e:	f8c5 9014 	str.w	r9, [r5, #20]
 8007022:	60aa      	str	r2, [r5, #8]
 8007024:	4642      	mov	r2, r8
 8007026:	4659      	mov	r1, fp
 8007028:	f000 fdbc 	bl	8007ba4 <memmove>
 800702c:	f8da 2008 	ldr.w	r2, [sl, #8]
 8007030:	68ab      	ldr	r3, [r5, #8]
 8007032:	6828      	ldr	r0, [r5, #0]
 8007034:	1b14      	subs	r4, r2, r4
 8007036:	1b9b      	subs	r3, r3, r6
 8007038:	60ab      	str	r3, [r5, #8]
 800703a:	4440      	add	r0, r8
 800703c:	6028      	str	r0, [r5, #0]
 800703e:	f8ca 4008 	str.w	r4, [sl, #8]
 8007042:	b30c      	cbz	r4, 8007088 <__ssprint_r+0x100>
 8007044:	f8d7 b000 	ldr.w	fp, [r7]
 8007048:	3708      	adds	r7, #8
 800704a:	f857 4c04 	ldr.w	r4, [r7, #-4]
 800704e:	e7aa      	b.n	8006fa6 <__ssprint_r+0x1e>
 8007050:	4626      	mov	r6, r4
 8007052:	46a0      	mov	r8, r4
 8007054:	e7e6      	b.n	8007024 <__ssprint_r+0x9c>
 8007056:	9801      	ldr	r0, [sp, #4]
 8007058:	f000 fe70 	bl	8007d3c <_realloc_r>
 800705c:	4680      	mov	r8, r0
 800705e:	2800      	cmp	r0, #0
 8007060:	d1d4      	bne.n	800700c <__ssprint_r+0x84>
 8007062:	9801      	ldr	r0, [sp, #4]
 8007064:	6929      	ldr	r1, [r5, #16]
 8007066:	f7fe fcb1 	bl	80059cc <_free_r>
 800706a:	9a01      	ldr	r2, [sp, #4]
 800706c:	230c      	movs	r3, #12
 800706e:	f04f 30ff 	mov.w	r0, #4294967295
 8007072:	6013      	str	r3, [r2, #0]
 8007074:	2300      	movs	r3, #0
 8007076:	89aa      	ldrh	r2, [r5, #12]
 8007078:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800707c:	81aa      	strh	r2, [r5, #12]
 800707e:	f8ca 3008 	str.w	r3, [sl, #8]
 8007082:	f8ca 3004 	str.w	r3, [sl, #4]
 8007086:	e002      	b.n	800708e <__ssprint_r+0x106>
 8007088:	4620      	mov	r0, r4
 800708a:	f8ca 4004 	str.w	r4, [sl, #4]
 800708e:	b003      	add	sp, #12
 8007090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007094 <_svfiprintf_r>:
 8007094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007098:	b0b3      	sub	sp, #204	; 0xcc
 800709a:	930b      	str	r3, [sp, #44]	; 0x2c
 800709c:	898b      	ldrh	r3, [r1, #12]
 800709e:	9104      	str	r1, [sp, #16]
 80070a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070a4:	900a      	str	r0, [sp, #40]	; 0x28
 80070a6:	b21b      	sxth	r3, r3
 80070a8:	b11b      	cbz	r3, 80070b2 <_svfiprintf_r+0x1e>
 80070aa:	690b      	ldr	r3, [r1, #16]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	f000 8510 	beq.w	8007ad2 <_svfiprintf_r+0xa3e>
 80070b2:	f10d 0687 	add.w	r6, sp, #135	; 0x87
 80070b6:	9602      	str	r6, [sp, #8]
 80070b8:	9e02      	ldr	r6, [sp, #8]
 80070ba:	af22      	add	r7, sp, #136	; 0x88
 80070bc:	4615      	mov	r5, r2
 80070be:	46b8      	mov	r8, r7
 80070c0:	9703      	str	r7, [sp, #12]
 80070c2:	1bbf      	subs	r7, r7, r6
 80070c4:	f649 0668 	movw	r6, #39016	; 0x9868
 80070c8:	2300      	movs	r3, #0
 80070ca:	f6c0 0600 	movt	r6, #2048	; 0x800
 80070ce:	930e      	str	r3, [sp, #56]	; 0x38
 80070d0:	9306      	str	r3, [sp, #24]
 80070d2:	9711      	str	r7, [sp, #68]	; 0x44
 80070d4:	960d      	str	r6, [sp, #52]	; 0x34
 80070d6:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
 80070da:	9317      	str	r3, [sp, #92]	; 0x5c
 80070dc:	9316      	str	r3, [sp, #88]	; 0x58
 80070de:	782b      	ldrb	r3, [r5, #0]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	bf18      	it	ne
 80070e4:	2b25      	cmpne	r3, #37	; 0x25
 80070e6:	f000 834d 	beq.w	8007784 <_svfiprintf_r+0x6f0>
 80070ea:	1c6a      	adds	r2, r5, #1
 80070ec:	4614      	mov	r4, r2
 80070ee:	3201      	adds	r2, #1
 80070f0:	7823      	ldrb	r3, [r4, #0]
 80070f2:	2b25      	cmp	r3, #37	; 0x25
 80070f4:	bf18      	it	ne
 80070f6:	2b00      	cmpne	r3, #0
 80070f8:	d1f8      	bne.n	80070ec <_svfiprintf_r+0x58>
 80070fa:	1b66      	subs	r6, r4, r5
 80070fc:	d010      	beq.n	8007120 <_svfiprintf_r+0x8c>
 80070fe:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007100:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8007102:	3201      	adds	r2, #1
 8007104:	e888 0060 	stmia.w	r8, {r5, r6}
 8007108:	2a07      	cmp	r2, #7
 800710a:	4431      	add	r1, r6
 800710c:	9216      	str	r2, [sp, #88]	; 0x58
 800710e:	bfd8      	it	le
 8007110:	f108 0808 	addle.w	r8, r8, #8
 8007114:	9117      	str	r1, [sp, #92]	; 0x5c
 8007116:	f300 83c3 	bgt.w	80078a0 <_svfiprintf_r+0x80c>
 800711a:	9f06      	ldr	r7, [sp, #24]
 800711c:	19bf      	adds	r7, r7, r6
 800711e:	9706      	str	r7, [sp, #24]
 8007120:	7823      	ldrb	r3, [r4, #0]
 8007122:	2b00      	cmp	r3, #0
 8007124:	f000 8341 	beq.w	80077aa <_svfiprintf_r+0x716>
 8007128:	2300      	movs	r3, #0
 800712a:	1c65      	adds	r5, r4, #1
 800712c:	461a      	mov	r2, r3
 800712e:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
 8007132:	f04f 37ff 	mov.w	r7, #4294967295
 8007136:	7863      	ldrb	r3, [r4, #1]
 8007138:	4614      	mov	r4, r2
 800713a:	9209      	str	r2, [sp, #36]	; 0x24
 800713c:	3501      	adds	r5, #1
 800713e:	f1a3 0120 	sub.w	r1, r3, #32
 8007142:	2958      	cmp	r1, #88	; 0x58
 8007144:	f200 8235 	bhi.w	80075b2 <_svfiprintf_r+0x51e>
 8007148:	e8df f011 	tbh	[pc, r1, lsl #1]
 800714c:	02330179 	.word	0x02330179
 8007150:	01750233 	.word	0x01750233
 8007154:	02330233 	.word	0x02330233
 8007158:	02330233 	.word	0x02330233
 800715c:	02330233 	.word	0x02330233
 8007160:	019400d7 	.word	0x019400d7
 8007164:	00e40233 	.word	0x00e40233
 8007168:	02330197 	.word	0x02330197
 800716c:	017f0190 	.word	0x017f0190
 8007170:	017f017f 	.word	0x017f017f
 8007174:	017f017f 	.word	0x017f017f
 8007178:	017f017f 	.word	0x017f017f
 800717c:	017f017f 	.word	0x017f017f
 8007180:	02330233 	.word	0x02330233
 8007184:	02330233 	.word	0x02330233
 8007188:	02330233 	.word	0x02330233
 800718c:	02330233 	.word	0x02330233
 8007190:	02330233 	.word	0x02330233
 8007194:	02330059 	.word	0x02330059
 8007198:	02330233 	.word	0x02330233
 800719c:	02330233 	.word	0x02330233
 80071a0:	02330233 	.word	0x02330233
 80071a4:	02330233 	.word	0x02330233
 80071a8:	00cd0233 	.word	0x00cd0233
 80071ac:	02330233 	.word	0x02330233
 80071b0:	02330233 	.word	0x02330233
 80071b4:	00b40233 	.word	0x00b40233
 80071b8:	02330233 	.word	0x02330233
 80071bc:	02330157 	.word	0x02330157
 80071c0:	02330233 	.word	0x02330233
 80071c4:	02330233 	.word	0x02330233
 80071c8:	02330233 	.word	0x02330233
 80071cc:	02330233 	.word	0x02330233
 80071d0:	00e80233 	.word	0x00e80233
 80071d4:	0233005b 	.word	0x0233005b
 80071d8:	02330233 	.word	0x02330233
 80071dc:	005b0204 	.word	0x005b0204
 80071e0:	02330233 	.word	0x02330233
 80071e4:	023301f7 	.word	0x023301f7
 80071e8:	00cf0208 	.word	0x00cf0208
 80071ec:	01b301b7 	.word	0x01b301b7
 80071f0:	01d10233 	.word	0x01d10233
 80071f4:	00b60233 	.word	0x00b60233
 80071f8:	02330233 	.word	0x02330233
 80071fc:	021b      	.short	0x021b
 80071fe:	f044 0410 	orr.w	r4, r4, #16
 8007202:	06a1      	lsls	r1, r4, #26
 8007204:	f88d 204f 	strb.w	r2, [sp, #79]	; 0x4f
 8007208:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800720a:	f140 83ca 	bpl.w	80079a2 <_svfiprintf_r+0x90e>
 800720e:	1df3      	adds	r3, r6, #7
 8007210:	f023 0307 	bic.w	r3, r3, #7
 8007214:	f103 0608 	add.w	r6, r3, #8
 8007218:	960b      	str	r6, [sp, #44]	; 0x2c
 800721a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800721e:	4692      	mov	sl, r2
 8007220:	469b      	mov	fp, r3
 8007222:	2a00      	cmp	r2, #0
 8007224:	f173 0000 	sbcs.w	r0, r3, #0
 8007228:	f2c0 8424 	blt.w	8007a74 <_svfiprintf_r+0x9e0>
 800722c:	ea5a 010b 	orrs.w	r1, sl, fp
 8007230:	f89d 904f 	ldrb.w	r9, [sp, #79]	; 0x4f
 8007234:	bf0c      	ite	eq
 8007236:	2600      	moveq	r6, #0
 8007238:	2601      	movne	r6, #1
 800723a:	2301      	movs	r3, #1
 800723c:	2f00      	cmp	r7, #0
 800723e:	bfa8      	it	ge
 8007240:	f024 0480 	bicge.w	r4, r4, #128	; 0x80
 8007244:	2f00      	cmp	r7, #0
 8007246:	bf18      	it	ne
 8007248:	f046 0601 	orrne.w	r6, r6, #1
 800724c:	2e00      	cmp	r6, #0
 800724e:	f000 829b 	beq.w	8007788 <_svfiprintf_r+0x6f4>
 8007252:	2b01      	cmp	r3, #1
 8007254:	f000 8348 	beq.w	80078e8 <_svfiprintf_r+0x854>
 8007258:	2b02      	cmp	r3, #2
 800725a:	f000 836c 	beq.w	8007936 <_svfiprintf_r+0x8a2>
 800725e:	f10d 0087 	add.w	r0, sp, #135	; 0x87
 8007262:	46bc      	mov	ip, r7
 8007264:	ea4f 01da 	mov.w	r1, sl, lsr #3
 8007268:	2607      	movs	r6, #7
 800726a:	ea41 714b 	orr.w	r1, r1, fp, lsl #29
 800726e:	ea4f 03db 	mov.w	r3, fp, lsr #3
 8007272:	ea0a 0206 	and.w	r2, sl, r6
 8007276:	469b      	mov	fp, r3
 8007278:	468a      	mov	sl, r1
 800727a:	4606      	mov	r6, r0
 800727c:	3230      	adds	r2, #48	; 0x30
 800727e:	3801      	subs	r0, #1
 8007280:	ea5a 070b 	orrs.w	r7, sl, fp
 8007284:	b2d2      	uxtb	r2, r2
 8007286:	7032      	strb	r2, [r6, #0]
 8007288:	d1ec      	bne.n	8007264 <_svfiprintf_r+0x1d0>
 800728a:	07e1      	lsls	r1, r4, #31
 800728c:	4667      	mov	r7, ip
 800728e:	4633      	mov	r3, r6
 8007290:	f100 83af 	bmi.w	80079f2 <_svfiprintf_r+0x95e>
 8007294:	9b03      	ldr	r3, [sp, #12]
 8007296:	1b9b      	subs	r3, r3, r6
 8007298:	9305      	str	r3, [sp, #20]
 800729a:	9707      	str	r7, [sp, #28]
 800729c:	f8dd b014 	ldr.w	fp, [sp, #20]
 80072a0:	9f07      	ldr	r7, [sp, #28]
 80072a2:	45bb      	cmp	fp, r7
 80072a4:	bfb8      	it	lt
 80072a6:	46bb      	movlt	fp, r7
 80072a8:	f1b9 0f00 	cmp.w	r9, #0
 80072ac:	d047      	beq.n	800733e <_svfiprintf_r+0x2aa>
 80072ae:	f10b 0b01 	add.w	fp, fp, #1
 80072b2:	e044      	b.n	800733e <_svfiprintf_r+0x2aa>
 80072b4:	f044 0410 	orr.w	r4, r4, #16
 80072b8:	06a2      	lsls	r2, r4, #26
 80072ba:	f140 8360 	bpl.w	800797e <_svfiprintf_r+0x8ea>
 80072be:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80072c0:	2301      	movs	r3, #1
 80072c2:	1df2      	adds	r2, r6, #7
 80072c4:	f022 0207 	bic.w	r2, r2, #7
 80072c8:	f102 0608 	add.w	r6, r2, #8
 80072cc:	960b      	str	r6, [sp, #44]	; 0x2c
 80072ce:	e9d2 ab00 	ldrd	sl, fp, [r2]
 80072d2:	ea5a 000b 	orrs.w	r0, sl, fp
 80072d6:	bf0c      	ite	eq
 80072d8:	2600      	moveq	r6, #0
 80072da:	2601      	movne	r6, #1
 80072dc:	f04f 0900 	mov.w	r9, #0
 80072e0:	f88d 904f 	strb.w	r9, [sp, #79]	; 0x4f
 80072e4:	e7aa      	b.n	800723c <_svfiprintf_r+0x1a8>
 80072e6:	f044 0410 	orr.w	r4, r4, #16
 80072ea:	f014 0320 	ands.w	r3, r4, #32
 80072ee:	f000 833b 	beq.w	8007968 <_svfiprintf_r+0x8d4>
 80072f2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80072f4:	2300      	movs	r3, #0
 80072f6:	1df2      	adds	r2, r6, #7
 80072f8:	e7e4      	b.n	80072c4 <_svfiprintf_r+0x230>
 80072fa:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80072fc:	6836      	ldr	r6, [r6, #0]
 80072fe:	9609      	str	r6, [sp, #36]	; 0x24
 8007300:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007302:	1d31      	adds	r1, r6, #4
 8007304:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007306:	2e00      	cmp	r6, #0
 8007308:	f280 8365 	bge.w	80079d6 <_svfiprintf_r+0x942>
 800730c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800730e:	910b      	str	r1, [sp, #44]	; 0x2c
 8007310:	4276      	negs	r6, r6
 8007312:	9609      	str	r6, [sp, #36]	; 0x24
 8007314:	f044 0404 	orr.w	r4, r4, #4
 8007318:	782b      	ldrb	r3, [r5, #0]
 800731a:	e70f      	b.n	800713c <_svfiprintf_r+0xa8>
 800731c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800731e:	ae18      	add	r6, sp, #96	; 0x60
 8007320:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8007322:	f04f 0b01 	mov.w	fp, #1
 8007326:	2200      	movs	r2, #0
 8007328:	f8cd b014 	str.w	fp, [sp, #20]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	3704      	adds	r7, #4
 8007330:	f88d 204f 	strb.w	r2, [sp, #79]	; 0x4f
 8007334:	970b      	str	r7, [sp, #44]	; 0x2c
 8007336:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 800733a:	2300      	movs	r3, #0
 800733c:	9307      	str	r3, [sp, #28]
 800733e:	f014 0302 	ands.w	r3, r4, #2
 8007342:	9308      	str	r3, [sp, #32]
 8007344:	bf18      	it	ne
 8007346:	f10b 0b02 	addne.w	fp, fp, #2
 800734a:	f014 0784 	ands.w	r7, r4, #132	; 0x84
 800734e:	970c      	str	r7, [sp, #48]	; 0x30
 8007350:	f040 813f 	bne.w	80075d2 <_svfiprintf_r+0x53e>
 8007354:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007356:	ebcb 0a07 	rsb	sl, fp, r7
 800735a:	f1ba 0f00 	cmp.w	sl, #0
 800735e:	f340 8138 	ble.w	80075d2 <_svfiprintf_r+0x53e>
 8007362:	f1ba 0f10 	cmp.w	sl, #16
 8007366:	f649 0968 	movw	r9, #39016	; 0x9868
 800736a:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800736c:	f6c0 0900 	movt	r9, #2048	; 0x800
 8007370:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007372:	dd29      	ble.n	80073c8 <_svfiprintf_r+0x334>
 8007374:	950f      	str	r5, [sp, #60]	; 0x3c
 8007376:	2710      	movs	r7, #16
 8007378:	9410      	str	r4, [sp, #64]	; 0x40
 800737a:	4655      	mov	r5, sl
 800737c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800737e:	46ca      	mov	sl, r9
 8007380:	46b1      	mov	r9, r6
 8007382:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8007384:	e002      	b.n	800738c <_svfiprintf_r+0x2f8>
 8007386:	3d10      	subs	r5, #16
 8007388:	2d10      	cmp	r5, #16
 800738a:	dd18      	ble.n	80073be <_svfiprintf_r+0x32a>
 800738c:	3201      	adds	r2, #1
 800738e:	3110      	adds	r1, #16
 8007390:	2a07      	cmp	r2, #7
 8007392:	e888 00c0 	stmia.w	r8, {r6, r7}
 8007396:	9216      	str	r2, [sp, #88]	; 0x58
 8007398:	f108 0808 	add.w	r8, r8, #8
 800739c:	9117      	str	r1, [sp, #92]	; 0x5c
 800739e:	ddf2      	ble.n	8007386 <_svfiprintf_r+0x2f2>
 80073a0:	4620      	mov	r0, r4
 80073a2:	9904      	ldr	r1, [sp, #16]
 80073a4:	aa15      	add	r2, sp, #84	; 0x54
 80073a6:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 80073aa:	f7ff fded 	bl	8006f88 <__ssprint_r>
 80073ae:	2800      	cmp	r0, #0
 80073b0:	f040 8202 	bne.w	80077b8 <_svfiprintf_r+0x724>
 80073b4:	3d10      	subs	r5, #16
 80073b6:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80073b8:	2d10      	cmp	r5, #16
 80073ba:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80073bc:	dce6      	bgt.n	800738c <_svfiprintf_r+0x2f8>
 80073be:	464e      	mov	r6, r9
 80073c0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80073c2:	46d1      	mov	r9, sl
 80073c4:	46aa      	mov	sl, r5
 80073c6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80073c8:	3201      	adds	r2, #1
 80073ca:	e888 0600 	stmia.w	r8, {r9, sl}
 80073ce:	2a07      	cmp	r2, #7
 80073d0:	4451      	add	r1, sl
 80073d2:	9216      	str	r2, [sp, #88]	; 0x58
 80073d4:	bfd8      	it	le
 80073d6:	f108 0808 	addle.w	r8, r8, #8
 80073da:	9117      	str	r1, [sp, #92]	; 0x5c
 80073dc:	f340 80fb 	ble.w	80075d6 <_svfiprintf_r+0x542>
 80073e0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80073e2:	aa15      	add	r2, sp, #84	; 0x54
 80073e4:	9904      	ldr	r1, [sp, #16]
 80073e6:	f7ff fdcf 	bl	8006f88 <__ssprint_r>
 80073ea:	2800      	cmp	r0, #0
 80073ec:	f040 81e4 	bne.w	80077b8 <_svfiprintf_r+0x724>
 80073f0:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80073f2:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 80073f6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80073f8:	e0ed      	b.n	80075d6 <_svfiprintf_r+0x542>
 80073fa:	06a0      	lsls	r0, r4, #26
 80073fc:	f649 16b8 	movw	r6, #39352	; 0x99b8
 8007400:	f6c0 0600 	movt	r6, #2048	; 0x800
 8007404:	f88d 204f 	strb.w	r2, [sp, #79]	; 0x4f
 8007408:	960e      	str	r6, [sp, #56]	; 0x38
 800740a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800740c:	f140 80c4 	bpl.w	8007598 <_svfiprintf_r+0x504>
 8007410:	1df2      	adds	r2, r6, #7
 8007412:	f022 0207 	bic.w	r2, r2, #7
 8007416:	f102 0608 	add.w	r6, r2, #8
 800741a:	960b      	str	r6, [sp, #44]	; 0x2c
 800741c:	e9d2 ab00 	ldrd	sl, fp, [r2]
 8007420:	07e0      	lsls	r0, r4, #31
 8007422:	f100 82cb 	bmi.w	80079bc <_svfiprintf_r+0x928>
 8007426:	ea5a 000b 	orrs.w	r0, sl, fp
 800742a:	f04f 0302 	mov.w	r3, #2
 800742e:	bf0c      	ite	eq
 8007430:	2600      	moveq	r6, #0
 8007432:	2601      	movne	r6, #1
 8007434:	e752      	b.n	80072dc <_svfiprintf_r+0x248>
 8007436:	f044 0401 	orr.w	r4, r4, #1
 800743a:	782b      	ldrb	r3, [r5, #0]
 800743c:	e67e      	b.n	800713c <_svfiprintf_r+0xa8>
 800743e:	782b      	ldrb	r3, [r5, #0]
 8007440:	2a00      	cmp	r2, #0
 8007442:	f47f ae7b 	bne.w	800713c <_svfiprintf_r+0xa8>
 8007446:	2220      	movs	r2, #32
 8007448:	e678      	b.n	800713c <_svfiprintf_r+0xa8>
 800744a:	4628      	mov	r0, r5
 800744c:	2100      	movs	r1, #0
 800744e:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 8007452:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007456:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800745a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800745e:	4605      	mov	r5, r0
 8007460:	2e09      	cmp	r6, #9
 8007462:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8007466:	d9f2      	bls.n	800744e <_svfiprintf_r+0x3ba>
 8007468:	9109      	str	r1, [sp, #36]	; 0x24
 800746a:	e668      	b.n	800713e <_svfiprintf_r+0xaa>
 800746c:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8007470:	782b      	ldrb	r3, [r5, #0]
 8007472:	e663      	b.n	800713c <_svfiprintf_r+0xa8>
 8007474:	782b      	ldrb	r3, [r5, #0]
 8007476:	222b      	movs	r2, #43	; 0x2b
 8007478:	e660      	b.n	800713c <_svfiprintf_r+0xa8>
 800747a:	4628      	mov	r0, r5
 800747c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007480:	2b2a      	cmp	r3, #42	; 0x2a
 8007482:	f000 8349 	beq.w	8007b18 <_svfiprintf_r+0xa84>
 8007486:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800748a:	2700      	movs	r7, #0
 800748c:	2909      	cmp	r1, #9
 800748e:	4605      	mov	r5, r0
 8007490:	f63f ae55 	bhi.w	800713e <_svfiprintf_r+0xaa>
 8007494:	2700      	movs	r7, #0
 8007496:	f810 3b01 	ldrb.w	r3, [r0], #1
 800749a:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 800749e:	eb01 0747 	add.w	r7, r1, r7, lsl #1
 80074a2:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80074a6:	2909      	cmp	r1, #9
 80074a8:	4605      	mov	r5, r0
 80074aa:	d9f4      	bls.n	8007496 <_svfiprintf_r+0x402>
 80074ac:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
 80074b0:	e645      	b.n	800713e <_svfiprintf_r+0xaa>
 80074b2:	f044 0420 	orr.w	r4, r4, #32
 80074b6:	782b      	ldrb	r3, [r5, #0]
 80074b8:	e640      	b.n	800713c <_svfiprintf_r+0xa8>
 80074ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074bc:	f04f 0b00 	mov.w	fp, #0
 80074c0:	f649 11cc 	movw	r1, #39372	; 0x99cc
 80074c4:	f044 0402 	orr.w	r4, r4, #2
 80074c8:	1d18      	adds	r0, r3, #4
 80074ca:	f6c0 0100 	movt	r1, #2048	; 0x800
 80074ce:	681e      	ldr	r6, [r3, #0]
 80074d0:	2330      	movs	r3, #48	; 0x30
 80074d2:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
 80074d6:	2378      	movs	r3, #120	; 0x78
 80074d8:	46b2      	mov	sl, r6
 80074da:	ebb6 060b 	subs.w	r6, r6, fp
 80074de:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
 80074e2:	bf18      	it	ne
 80074e4:	2601      	movne	r6, #1
 80074e6:	900b      	str	r0, [sp, #44]	; 0x2c
 80074e8:	2302      	movs	r3, #2
 80074ea:	910e      	str	r1, [sp, #56]	; 0x38
 80074ec:	e6f6      	b.n	80072dc <_svfiprintf_r+0x248>
 80074ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80074f0:	f04f 0b00 	mov.w	fp, #0
 80074f4:	f88d b04f 	strb.w	fp, [sp, #79]	; 0x4f
 80074f8:	f102 0a04 	add.w	sl, r2, #4
 80074fc:	6816      	ldr	r6, [r2, #0]
 80074fe:	2e00      	cmp	r6, #0
 8007500:	f000 82f5 	beq.w	8007aee <_svfiprintf_r+0xa5a>
 8007504:	2f00      	cmp	r7, #0
 8007506:	4630      	mov	r0, r6
 8007508:	f2c0 82d2 	blt.w	8007ab0 <_svfiprintf_r+0xa1c>
 800750c:	4659      	mov	r1, fp
 800750e:	463a      	mov	r2, r7
 8007510:	f7fe fe50 	bl	80061b4 <memchr>
 8007514:	2800      	cmp	r0, #0
 8007516:	f000 82f7 	beq.w	8007b08 <_svfiprintf_r+0xa74>
 800751a:	1b80      	subs	r0, r0, r6
 800751c:	f89d 904f 	ldrb.w	r9, [sp, #79]	; 0x4f
 8007520:	42b8      	cmp	r0, r7
 8007522:	9005      	str	r0, [sp, #20]
 8007524:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 8007528:	bfc4      	itt	gt
 800752a:	9705      	strgt	r7, [sp, #20]
 800752c:	f8cd b01c 	strgt.w	fp, [sp, #28]
 8007530:	f73f aeb4 	bgt.w	800729c <_svfiprintf_r+0x208>
 8007534:	f8cd b01c 	str.w	fp, [sp, #28]
 8007538:	e6b0      	b.n	800729c <_svfiprintf_r+0x208>
 800753a:	782b      	ldrb	r3, [r5, #0]
 800753c:	4629      	mov	r1, r5
 800753e:	2b6c      	cmp	r3, #108	; 0x6c
 8007540:	bf18      	it	ne
 8007542:	f044 0410 	orrne.w	r4, r4, #16
 8007546:	f47f adf9 	bne.w	800713c <_svfiprintf_r+0xa8>
 800754a:	3501      	adds	r5, #1
 800754c:	f044 0420 	orr.w	r4, r4, #32
 8007550:	784b      	ldrb	r3, [r1, #1]
 8007552:	e5f3      	b.n	800713c <_svfiprintf_r+0xa8>
 8007554:	f044 0440 	orr.w	r4, r4, #64	; 0x40
 8007558:	782b      	ldrb	r3, [r5, #0]
 800755a:	e5ef      	b.n	800713c <_svfiprintf_r+0xa8>
 800755c:	06a6      	lsls	r6, r4, #26
 800755e:	f88d 204f 	strb.w	r2, [sp, #79]	; 0x4f
 8007562:	f100 829a 	bmi.w	8007a9a <_svfiprintf_r+0xa06>
 8007566:	06e0      	lsls	r0, r4, #27
 8007568:	f100 82aa 	bmi.w	8007ac0 <_svfiprintf_r+0xa2c>
 800756c:	0661      	lsls	r1, r4, #25
 800756e:	f140 82a7 	bpl.w	8007ac0 <_svfiprintf_r+0xa2c>
 8007572:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8007574:	9e06      	ldr	r6, [sp, #24]
 8007576:	3704      	adds	r7, #4
 8007578:	f857 3c04 	ldr.w	r3, [r7, #-4]
 800757c:	970b      	str	r7, [sp, #44]	; 0x2c
 800757e:	801e      	strh	r6, [r3, #0]
 8007580:	e5ad      	b.n	80070de <_svfiprintf_r+0x4a>
 8007582:	06a0      	lsls	r0, r4, #26
 8007584:	f649 16cc 	movw	r6, #39372	; 0x99cc
 8007588:	f6c0 0600 	movt	r6, #2048	; 0x800
 800758c:	f88d 204f 	strb.w	r2, [sp, #79]	; 0x4f
 8007590:	960e      	str	r6, [sp, #56]	; 0x38
 8007592:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007594:	f53f af3c 	bmi.w	8007410 <_svfiprintf_r+0x37c>
 8007598:	06e1      	lsls	r1, r4, #27
 800759a:	f100 8257 	bmi.w	8007a4c <_svfiprintf_r+0x9b8>
 800759e:	0662      	lsls	r2, r4, #25
 80075a0:	f140 8254 	bpl.w	8007a4c <_svfiprintf_r+0x9b8>
 80075a4:	f8b6 a000 	ldrh.w	sl, [r6]
 80075a8:	f04f 0b00 	mov.w	fp, #0
 80075ac:	3604      	adds	r6, #4
 80075ae:	960b      	str	r6, [sp, #44]	; 0x2c
 80075b0:	e736      	b.n	8007420 <_svfiprintf_r+0x38c>
 80075b2:	f88d 204f 	strb.w	r2, [sp, #79]	; 0x4f
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	f000 80f7 	beq.w	80077aa <_svfiprintf_r+0x716>
 80075bc:	f04f 0b01 	mov.w	fp, #1
 80075c0:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 80075c4:	f8cd b014 	str.w	fp, [sp, #20]
 80075c8:	2300      	movs	r3, #0
 80075ca:	ae18      	add	r6, sp, #96	; 0x60
 80075cc:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
 80075d0:	e6b3      	b.n	800733a <_svfiprintf_r+0x2a6>
 80075d2:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80075d4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80075d6:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
 80075da:	b183      	cbz	r3, 80075fe <_svfiprintf_r+0x56a>
 80075dc:	3201      	adds	r2, #1
 80075de:	f10d 034f 	add.w	r3, sp, #79	; 0x4f
 80075e2:	f8c8 3000 	str.w	r3, [r8]
 80075e6:	2301      	movs	r3, #1
 80075e8:	2a07      	cmp	r2, #7
 80075ea:	f8c8 3004 	str.w	r3, [r8, #4]
 80075ee:	4419      	add	r1, r3
 80075f0:	9216      	str	r2, [sp, #88]	; 0x58
 80075f2:	9117      	str	r1, [sp, #92]	; 0x5c
 80075f4:	bfd8      	it	le
 80075f6:	f108 0808 	addle.w	r8, r8, #8
 80075fa:	f300 815b 	bgt.w	80078b4 <_svfiprintf_r+0x820>
 80075fe:	9b08      	ldr	r3, [sp, #32]
 8007600:	b17b      	cbz	r3, 8007622 <_svfiprintf_r+0x58e>
 8007602:	3201      	adds	r2, #1
 8007604:	ab14      	add	r3, sp, #80	; 0x50
 8007606:	f8c8 3000 	str.w	r3, [r8]
 800760a:	2302      	movs	r3, #2
 800760c:	2a07      	cmp	r2, #7
 800760e:	f8c8 3004 	str.w	r3, [r8, #4]
 8007612:	4419      	add	r1, r3
 8007614:	9216      	str	r2, [sp, #88]	; 0x58
 8007616:	9117      	str	r1, [sp, #92]	; 0x5c
 8007618:	bfd8      	it	le
 800761a:	f108 0808 	addle.w	r8, r8, #8
 800761e:	f300 8156 	bgt.w	80078ce <_svfiprintf_r+0x83a>
 8007622:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8007624:	2f80      	cmp	r7, #128	; 0x80
 8007626:	f000 80d6 	beq.w	80077d6 <_svfiprintf_r+0x742>
 800762a:	9807      	ldr	r0, [sp, #28]
 800762c:	9b05      	ldr	r3, [sp, #20]
 800762e:	1ac7      	subs	r7, r0, r3
 8007630:	2f00      	cmp	r7, #0
 8007632:	dd48      	ble.n	80076c6 <_svfiprintf_r+0x632>
 8007634:	2f10      	cmp	r7, #16
 8007636:	f8df 9508 	ldr.w	r9, [pc, #1288]	; 8007b40 <_svfiprintf_r+0xaac>
 800763a:	dd2c      	ble.n	8007696 <_svfiprintf_r+0x602>
 800763c:	464b      	mov	r3, r9
 800763e:	9507      	str	r5, [sp, #28]
 8007640:	9408      	str	r4, [sp, #32]
 8007642:	46b1      	mov	r9, r6
 8007644:	f04f 0a10 	mov.w	sl, #16
 8007648:	463e      	mov	r6, r7
 800764a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800764c:	461f      	mov	r7, r3
 800764e:	9d04      	ldr	r5, [sp, #16]
 8007650:	e002      	b.n	8007658 <_svfiprintf_r+0x5c4>
 8007652:	3e10      	subs	r6, #16
 8007654:	2e10      	cmp	r6, #16
 8007656:	dd18      	ble.n	800768a <_svfiprintf_r+0x5f6>
 8007658:	3201      	adds	r2, #1
 800765a:	3110      	adds	r1, #16
 800765c:	2a07      	cmp	r2, #7
 800765e:	e888 0480 	stmia.w	r8, {r7, sl}
 8007662:	9216      	str	r2, [sp, #88]	; 0x58
 8007664:	f108 0808 	add.w	r8, r8, #8
 8007668:	9117      	str	r1, [sp, #92]	; 0x5c
 800766a:	ddf2      	ble.n	8007652 <_svfiprintf_r+0x5be>
 800766c:	4620      	mov	r0, r4
 800766e:	4629      	mov	r1, r5
 8007670:	aa15      	add	r2, sp, #84	; 0x54
 8007672:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 8007676:	f7ff fc87 	bl	8006f88 <__ssprint_r>
 800767a:	2800      	cmp	r0, #0
 800767c:	f040 809c 	bne.w	80077b8 <_svfiprintf_r+0x724>
 8007680:	3e10      	subs	r6, #16
 8007682:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8007684:	2e10      	cmp	r6, #16
 8007686:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007688:	dce6      	bgt.n	8007658 <_svfiprintf_r+0x5c4>
 800768a:	463b      	mov	r3, r7
 800768c:	9d07      	ldr	r5, [sp, #28]
 800768e:	9c08      	ldr	r4, [sp, #32]
 8007690:	4637      	mov	r7, r6
 8007692:	464e      	mov	r6, r9
 8007694:	4699      	mov	r9, r3
 8007696:	3201      	adds	r2, #1
 8007698:	f8c8 9000 	str.w	r9, [r8]
 800769c:	2a07      	cmp	r2, #7
 800769e:	f8c8 7004 	str.w	r7, [r8, #4]
 80076a2:	4439      	add	r1, r7
 80076a4:	9216      	str	r2, [sp, #88]	; 0x58
 80076a6:	9117      	str	r1, [sp, #92]	; 0x5c
 80076a8:	bfd8      	it	le
 80076aa:	f108 0808 	addle.w	r8, r8, #8
 80076ae:	dd0a      	ble.n	80076c6 <_svfiprintf_r+0x632>
 80076b0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80076b2:	aa15      	add	r2, sp, #84	; 0x54
 80076b4:	9904      	ldr	r1, [sp, #16]
 80076b6:	f7ff fc67 	bl	8006f88 <__ssprint_r>
 80076ba:	2800      	cmp	r0, #0
 80076bc:	d17c      	bne.n	80077b8 <_svfiprintf_r+0x724>
 80076be:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80076c0:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 80076c4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80076c6:	3201      	adds	r2, #1
 80076c8:	9b05      	ldr	r3, [sp, #20]
 80076ca:	2a07      	cmp	r2, #7
 80076cc:	f8c8 6000 	str.w	r6, [r8]
 80076d0:	4419      	add	r1, r3
 80076d2:	9216      	str	r2, [sp, #88]	; 0x58
 80076d4:	f8c8 3004 	str.w	r3, [r8, #4]
 80076d8:	bfd8      	it	le
 80076da:	f108 0808 	addle.w	r8, r8, #8
 80076de:	9117      	str	r1, [sp, #92]	; 0x5c
 80076e0:	f300 80c7 	bgt.w	8007872 <_svfiprintf_r+0x7de>
 80076e4:	0763      	lsls	r3, r4, #29
 80076e6:	d539      	bpl.n	800775c <_svfiprintf_r+0x6c8>
 80076e8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80076ea:	ebcb 0406 	rsb	r4, fp, r6
 80076ee:	2c00      	cmp	r4, #0
 80076f0:	dd34      	ble.n	800775c <_svfiprintf_r+0x6c8>
 80076f2:	2c10      	cmp	r4, #16
 80076f4:	f649 0968 	movw	r9, #39016	; 0x9868
 80076f8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80076fa:	f6c0 0900 	movt	r9, #2048	; 0x800
 80076fe:	dd22      	ble.n	8007746 <_svfiprintf_r+0x6b2>
 8007700:	9505      	str	r5, [sp, #20]
 8007702:	2610      	movs	r6, #16
 8007704:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8007706:	f8dd a010 	ldr.w	sl, [sp, #16]
 800770a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800770c:	e002      	b.n	8007714 <_svfiprintf_r+0x680>
 800770e:	3c10      	subs	r4, #16
 8007710:	2c10      	cmp	r4, #16
 8007712:	dd17      	ble.n	8007744 <_svfiprintf_r+0x6b0>
 8007714:	3201      	adds	r2, #1
 8007716:	3110      	adds	r1, #16
 8007718:	2a07      	cmp	r2, #7
 800771a:	e888 0060 	stmia.w	r8, {r5, r6}
 800771e:	9216      	str	r2, [sp, #88]	; 0x58
 8007720:	f108 0808 	add.w	r8, r8, #8
 8007724:	9117      	str	r1, [sp, #92]	; 0x5c
 8007726:	ddf2      	ble.n	800770e <_svfiprintf_r+0x67a>
 8007728:	4638      	mov	r0, r7
 800772a:	4651      	mov	r1, sl
 800772c:	aa15      	add	r2, sp, #84	; 0x54
 800772e:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 8007732:	f7ff fc29 	bl	8006f88 <__ssprint_r>
 8007736:	2800      	cmp	r0, #0
 8007738:	d13e      	bne.n	80077b8 <_svfiprintf_r+0x724>
 800773a:	3c10      	subs	r4, #16
 800773c:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800773e:	2c10      	cmp	r4, #16
 8007740:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007742:	dce7      	bgt.n	8007714 <_svfiprintf_r+0x680>
 8007744:	9d05      	ldr	r5, [sp, #20]
 8007746:	3201      	adds	r2, #1
 8007748:	1861      	adds	r1, r4, r1
 800774a:	2a07      	cmp	r2, #7
 800774c:	f8c8 9000 	str.w	r9, [r8]
 8007750:	f8c8 4004 	str.w	r4, [r8, #4]
 8007754:	9216      	str	r2, [sp, #88]	; 0x58
 8007756:	9117      	str	r1, [sp, #92]	; 0x5c
 8007758:	f300 8141 	bgt.w	80079de <_svfiprintf_r+0x94a>
 800775c:	9f06      	ldr	r7, [sp, #24]
 800775e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007760:	45b3      	cmp	fp, r6
 8007762:	bfac      	ite	ge
 8007764:	445f      	addge	r7, fp
 8007766:	19bf      	addlt	r7, r7, r6
 8007768:	9706      	str	r7, [sp, #24]
 800776a:	2900      	cmp	r1, #0
 800776c:	f040 808c 	bne.w	8007888 <_svfiprintf_r+0x7f4>
 8007770:	2300      	movs	r3, #0
 8007772:	9316      	str	r3, [sp, #88]	; 0x58
 8007774:	782b      	ldrb	r3, [r5, #0]
 8007776:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 800777a:	2b00      	cmp	r3, #0
 800777c:	bf18      	it	ne
 800777e:	2b25      	cmpne	r3, #37	; 0x25
 8007780:	f47f acb3 	bne.w	80070ea <_svfiprintf_r+0x56>
 8007784:	462c      	mov	r4, r5
 8007786:	e4cb      	b.n	8007120 <_svfiprintf_r+0x8c>
 8007788:	2b00      	cmp	r3, #0
 800778a:	f040 8086 	bne.w	800789a <_svfiprintf_r+0x806>
 800778e:	07e2      	lsls	r2, r4, #31
 8007790:	bf5c      	itt	pl
 8007792:	9305      	strpl	r3, [sp, #20]
 8007794:	ae22      	addpl	r6, sp, #136	; 0x88
 8007796:	f57f ad80 	bpl.w	800729a <_svfiprintf_r+0x206>
 800779a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800779c:	2330      	movs	r3, #48	; 0x30
 800779e:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
 80077a2:	9605      	str	r6, [sp, #20]
 80077a4:	f10d 0687 	add.w	r6, sp, #135	; 0x87
 80077a8:	e577      	b.n	800729a <_svfiprintf_r+0x206>
 80077aa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80077ac:	b123      	cbz	r3, 80077b8 <_svfiprintf_r+0x724>
 80077ae:	980a      	ldr	r0, [sp, #40]	; 0x28
 80077b0:	aa15      	add	r2, sp, #84	; 0x54
 80077b2:	9904      	ldr	r1, [sp, #16]
 80077b4:	f7ff fbe8 	bl	8006f88 <__ssprint_r>
 80077b8:	9e04      	ldr	r6, [sp, #16]
 80077ba:	9f06      	ldr	r7, [sp, #24]
 80077bc:	89b3      	ldrh	r3, [r6, #12]
 80077be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077c2:	b21b      	sxth	r3, r3
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	bf18      	it	ne
 80077c8:	f04f 37ff 	movne.w	r7, #4294967295
 80077cc:	9706      	str	r7, [sp, #24]
 80077ce:	9806      	ldr	r0, [sp, #24]
 80077d0:	b033      	add	sp, #204	; 0xcc
 80077d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077d6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80077d8:	ebcb 0a07 	rsb	sl, fp, r7
 80077dc:	f1ba 0f00 	cmp.w	sl, #0
 80077e0:	f77f af23 	ble.w	800762a <_svfiprintf_r+0x596>
 80077e4:	f1ba 0f10 	cmp.w	sl, #16
 80077e8:	f8df 9354 	ldr.w	r9, [pc, #852]	; 8007b40 <_svfiprintf_r+0xaac>
 80077ec:	dd29      	ble.n	8007842 <_svfiprintf_r+0x7ae>
 80077ee:	4653      	mov	r3, sl
 80077f0:	9508      	str	r5, [sp, #32]
 80077f2:	46b2      	mov	sl, r6
 80077f4:	464d      	mov	r5, r9
 80077f6:	2710      	movs	r7, #16
 80077f8:	46a1      	mov	r9, r4
 80077fa:	461e      	mov	r6, r3
 80077fc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80077fe:	e002      	b.n	8007806 <_svfiprintf_r+0x772>
 8007800:	3e10      	subs	r6, #16
 8007802:	2e10      	cmp	r6, #16
 8007804:	dd17      	ble.n	8007836 <_svfiprintf_r+0x7a2>
 8007806:	3201      	adds	r2, #1
 8007808:	3110      	adds	r1, #16
 800780a:	2a07      	cmp	r2, #7
 800780c:	e888 00a0 	stmia.w	r8, {r5, r7}
 8007810:	9216      	str	r2, [sp, #88]	; 0x58
 8007812:	f108 0808 	add.w	r8, r8, #8
 8007816:	9117      	str	r1, [sp, #92]	; 0x5c
 8007818:	ddf2      	ble.n	8007800 <_svfiprintf_r+0x76c>
 800781a:	4620      	mov	r0, r4
 800781c:	9904      	ldr	r1, [sp, #16]
 800781e:	aa15      	add	r2, sp, #84	; 0x54
 8007820:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 8007824:	f7ff fbb0 	bl	8006f88 <__ssprint_r>
 8007828:	2800      	cmp	r0, #0
 800782a:	d1c5      	bne.n	80077b8 <_svfiprintf_r+0x724>
 800782c:	3e10      	subs	r6, #16
 800782e:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8007830:	2e10      	cmp	r6, #16
 8007832:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007834:	dce7      	bgt.n	8007806 <_svfiprintf_r+0x772>
 8007836:	4633      	mov	r3, r6
 8007838:	464c      	mov	r4, r9
 800783a:	46a9      	mov	r9, r5
 800783c:	9d08      	ldr	r5, [sp, #32]
 800783e:	4656      	mov	r6, sl
 8007840:	469a      	mov	sl, r3
 8007842:	3201      	adds	r2, #1
 8007844:	e888 0600 	stmia.w	r8, {r9, sl}
 8007848:	2a07      	cmp	r2, #7
 800784a:	4451      	add	r1, sl
 800784c:	9216      	str	r2, [sp, #88]	; 0x58
 800784e:	bfd8      	it	le
 8007850:	f108 0808 	addle.w	r8, r8, #8
 8007854:	9117      	str	r1, [sp, #92]	; 0x5c
 8007856:	f77f aee8 	ble.w	800762a <_svfiprintf_r+0x596>
 800785a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800785c:	aa15      	add	r2, sp, #84	; 0x54
 800785e:	9904      	ldr	r1, [sp, #16]
 8007860:	f7ff fb92 	bl	8006f88 <__ssprint_r>
 8007864:	2800      	cmp	r0, #0
 8007866:	d1a7      	bne.n	80077b8 <_svfiprintf_r+0x724>
 8007868:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800786a:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 800786e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007870:	e6db      	b.n	800762a <_svfiprintf_r+0x596>
 8007872:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007874:	aa15      	add	r2, sp, #84	; 0x54
 8007876:	9904      	ldr	r1, [sp, #16]
 8007878:	f7ff fb86 	bl	8006f88 <__ssprint_r>
 800787c:	2800      	cmp	r0, #0
 800787e:	d19b      	bne.n	80077b8 <_svfiprintf_r+0x724>
 8007880:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8007882:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 8007886:	e72d      	b.n	80076e4 <_svfiprintf_r+0x650>
 8007888:	980a      	ldr	r0, [sp, #40]	; 0x28
 800788a:	aa15      	add	r2, sp, #84	; 0x54
 800788c:	9904      	ldr	r1, [sp, #16]
 800788e:	f7ff fb7b 	bl	8006f88 <__ssprint_r>
 8007892:	2800      	cmp	r0, #0
 8007894:	f43f af6c 	beq.w	8007770 <_svfiprintf_r+0x6dc>
 8007898:	e78e      	b.n	80077b8 <_svfiprintf_r+0x724>
 800789a:	9605      	str	r6, [sp, #20]
 800789c:	ae22      	add	r6, sp, #136	; 0x88
 800789e:	e4fc      	b.n	800729a <_svfiprintf_r+0x206>
 80078a0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80078a2:	aa15      	add	r2, sp, #84	; 0x54
 80078a4:	9904      	ldr	r1, [sp, #16]
 80078a6:	f7ff fb6f 	bl	8006f88 <__ssprint_r>
 80078aa:	2800      	cmp	r0, #0
 80078ac:	d184      	bne.n	80077b8 <_svfiprintf_r+0x724>
 80078ae:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 80078b2:	e432      	b.n	800711a <_svfiprintf_r+0x86>
 80078b4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80078b6:	aa15      	add	r2, sp, #84	; 0x54
 80078b8:	9904      	ldr	r1, [sp, #16]
 80078ba:	f7ff fb65 	bl	8006f88 <__ssprint_r>
 80078be:	2800      	cmp	r0, #0
 80078c0:	f47f af7a 	bne.w	80077b8 <_svfiprintf_r+0x724>
 80078c4:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80078c6:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 80078ca:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80078cc:	e697      	b.n	80075fe <_svfiprintf_r+0x56a>
 80078ce:	980a      	ldr	r0, [sp, #40]	; 0x28
 80078d0:	aa15      	add	r2, sp, #84	; 0x54
 80078d2:	9904      	ldr	r1, [sp, #16]
 80078d4:	f7ff fb58 	bl	8006f88 <__ssprint_r>
 80078d8:	2800      	cmp	r0, #0
 80078da:	f47f af6d 	bne.w	80077b8 <_svfiprintf_r+0x724>
 80078de:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80078e0:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 80078e4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80078e6:	e69c      	b.n	8007622 <_svfiprintf_r+0x58e>
 80078e8:	f1bb 0f00 	cmp.w	fp, #0
 80078ec:	bf08      	it	eq
 80078ee:	f1ba 0f0a 	cmpeq.w	sl, #10
 80078f2:	f0c0 8089 	bcc.w	8007a08 <_svfiprintf_r+0x974>
 80078f6:	f10d 0687 	add.w	r6, sp, #135	; 0x87
 80078fa:	9405      	str	r4, [sp, #20]
 80078fc:	4650      	mov	r0, sl
 80078fe:	4659      	mov	r1, fp
 8007900:	220a      	movs	r2, #10
 8007902:	2300      	movs	r3, #0
 8007904:	f001 f9b8 	bl	8008c78 <__aeabi_uldivmod>
 8007908:	4634      	mov	r4, r6
 800790a:	4650      	mov	r0, sl
 800790c:	4659      	mov	r1, fp
 800790e:	2300      	movs	r3, #0
 8007910:	3e01      	subs	r6, #1
 8007912:	f102 0e30 	add.w	lr, r2, #48	; 0x30
 8007916:	220a      	movs	r2, #10
 8007918:	f884 e000 	strb.w	lr, [r4]
 800791c:	f001 f9ac 	bl	8008c78 <__aeabi_uldivmod>
 8007920:	4682      	mov	sl, r0
 8007922:	468b      	mov	fp, r1
 8007924:	ea5a 000b 	orrs.w	r0, sl, fp
 8007928:	d1e8      	bne.n	80078fc <_svfiprintf_r+0x868>
 800792a:	9b03      	ldr	r3, [sp, #12]
 800792c:	4626      	mov	r6, r4
 800792e:	9c05      	ldr	r4, [sp, #20]
 8007930:	1b9b      	subs	r3, r3, r6
 8007932:	9305      	str	r3, [sp, #20]
 8007934:	e4b1      	b.n	800729a <_svfiprintf_r+0x206>
 8007936:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007938:	f10d 0187 	add.w	r1, sp, #135	; 0x87
 800793c:	9705      	str	r7, [sp, #20]
 800793e:	260f      	movs	r6, #15
 8007940:	ea4f 131a 	mov.w	r3, sl, lsr #4
 8007944:	ea0a 0206 	and.w	r2, sl, r6
 8007948:	ea43 730b 	orr.w	r3, r3, fp, lsl #28
 800794c:	1882      	adds	r2, r0, r2
 800794e:	ea4f 1c1b 	mov.w	ip, fp, lsr #4
 8007952:	469a      	mov	sl, r3
 8007954:	46e3      	mov	fp, ip
 8007956:	7812      	ldrb	r2, [r2, #0]
 8007958:	460e      	mov	r6, r1
 800795a:	3901      	subs	r1, #1
 800795c:	ea5a 070b 	orrs.w	r7, sl, fp
 8007960:	7032      	strb	r2, [r6, #0]
 8007962:	d1ec      	bne.n	800793e <_svfiprintf_r+0x8aa>
 8007964:	9f05      	ldr	r7, [sp, #20]
 8007966:	e495      	b.n	8007294 <_svfiprintf_r+0x200>
 8007968:	f014 0210 	ands.w	r2, r4, #16
 800796c:	d155      	bne.n	8007a1a <_svfiprintf_r+0x986>
 800796e:	f014 0340 	ands.w	r3, r4, #64	; 0x40
 8007972:	d052      	beq.n	8007a1a <_svfiprintf_r+0x986>
 8007974:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007976:	4613      	mov	r3, r2
 8007978:	f8b6 a000 	ldrh.w	sl, [r6]
 800797c:	e007      	b.n	800798e <_svfiprintf_r+0x8fa>
 800797e:	06e3      	lsls	r3, r4, #27
 8007980:	d457      	bmi.n	8007a32 <_svfiprintf_r+0x99e>
 8007982:	0666      	lsls	r6, r4, #25
 8007984:	d555      	bpl.n	8007a32 <_svfiprintf_r+0x99e>
 8007986:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007988:	2301      	movs	r3, #1
 800798a:	f8b6 a000 	ldrh.w	sl, [r6]
 800798e:	f04f 0b00 	mov.w	fp, #0
 8007992:	3604      	adds	r6, #4
 8007994:	ea5a 000b 	orrs.w	r0, sl, fp
 8007998:	960b      	str	r6, [sp, #44]	; 0x2c
 800799a:	bf0c      	ite	eq
 800799c:	2600      	moveq	r6, #0
 800799e:	2601      	movne	r6, #1
 80079a0:	e49c      	b.n	80072dc <_svfiprintf_r+0x248>
 80079a2:	06e2      	lsls	r2, r4, #27
 80079a4:	d459      	bmi.n	8007a5a <_svfiprintf_r+0x9c6>
 80079a6:	0663      	lsls	r3, r4, #25
 80079a8:	d557      	bpl.n	8007a5a <_svfiprintf_r+0x9c6>
 80079aa:	f9b6 a000 	ldrsh.w	sl, [r6]
 80079ae:	3604      	adds	r6, #4
 80079b0:	960b      	str	r6, [sp, #44]	; 0x2c
 80079b2:	4652      	mov	r2, sl
 80079b4:	ea4f 7bea 	mov.w	fp, sl, asr #31
 80079b8:	465b      	mov	r3, fp
 80079ba:	e432      	b.n	8007222 <_svfiprintf_r+0x18e>
 80079bc:	ea5a 010b 	orrs.w	r1, sl, fp
 80079c0:	d068      	beq.n	8007a94 <_svfiprintf_r+0xa00>
 80079c2:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
 80079c6:	f044 0402 	orr.w	r4, r4, #2
 80079ca:	2330      	movs	r3, #48	; 0x30
 80079cc:	2601      	movs	r6, #1
 80079ce:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
 80079d2:	2302      	movs	r3, #2
 80079d4:	e482      	b.n	80072dc <_svfiprintf_r+0x248>
 80079d6:	782b      	ldrb	r3, [r5, #0]
 80079d8:	910b      	str	r1, [sp, #44]	; 0x2c
 80079da:	f7ff bbaf 	b.w	800713c <_svfiprintf_r+0xa8>
 80079de:	980a      	ldr	r0, [sp, #40]	; 0x28
 80079e0:	aa15      	add	r2, sp, #84	; 0x54
 80079e2:	9904      	ldr	r1, [sp, #16]
 80079e4:	f7ff fad0 	bl	8006f88 <__ssprint_r>
 80079e8:	2800      	cmp	r0, #0
 80079ea:	f47f aee5 	bne.w	80077b8 <_svfiprintf_r+0x724>
 80079ee:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80079f0:	e6b4      	b.n	800775c <_svfiprintf_r+0x6c8>
 80079f2:	2a30      	cmp	r2, #48	; 0x30
 80079f4:	f43f ac4e 	beq.w	8007294 <_svfiprintf_r+0x200>
 80079f8:	4606      	mov	r6, r0
 80079fa:	9803      	ldr	r0, [sp, #12]
 80079fc:	2230      	movs	r2, #48	; 0x30
 80079fe:	f803 2c01 	strb.w	r2, [r3, #-1]
 8007a02:	1b80      	subs	r0, r0, r6
 8007a04:	9005      	str	r0, [sp, #20]
 8007a06:	e448      	b.n	800729a <_svfiprintf_r+0x206>
 8007a08:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8007a0a:	f10a 0a30 	add.w	sl, sl, #48	; 0x30
 8007a0e:	f88d a087 	strb.w	sl, [sp, #135]	; 0x87
 8007a12:	9605      	str	r6, [sp, #20]
 8007a14:	f10d 0687 	add.w	r6, sp, #135	; 0x87
 8007a18:	e43f      	b.n	800729a <_svfiprintf_r+0x206>
 8007a1a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007a1c:	f04f 0b00 	mov.w	fp, #0
 8007a20:	3104      	adds	r1, #4
 8007a22:	f851 6c04 	ldr.w	r6, [r1, #-4]
 8007a26:	910b      	str	r1, [sp, #44]	; 0x2c
 8007a28:	46b2      	mov	sl, r6
 8007a2a:	3600      	adds	r6, #0
 8007a2c:	bf18      	it	ne
 8007a2e:	2601      	movne	r6, #1
 8007a30:	e454      	b.n	80072dc <_svfiprintf_r+0x248>
 8007a32:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007a34:	2301      	movs	r3, #1
 8007a36:	f04f 0b00 	mov.w	fp, #0
 8007a3a:	3104      	adds	r1, #4
 8007a3c:	f851 6c04 	ldr.w	r6, [r1, #-4]
 8007a40:	910b      	str	r1, [sp, #44]	; 0x2c
 8007a42:	46b2      	mov	sl, r6
 8007a44:	3600      	adds	r6, #0
 8007a46:	bf18      	it	ne
 8007a48:	2601      	movne	r6, #1
 8007a4a:	e447      	b.n	80072dc <_svfiprintf_r+0x248>
 8007a4c:	6832      	ldr	r2, [r6, #0]
 8007a4e:	f04f 0b00 	mov.w	fp, #0
 8007a52:	3604      	adds	r6, #4
 8007a54:	960b      	str	r6, [sp, #44]	; 0x2c
 8007a56:	4692      	mov	sl, r2
 8007a58:	e4e2      	b.n	8007420 <_svfiprintf_r+0x38c>
 8007a5a:	6833      	ldr	r3, [r6, #0]
 8007a5c:	3604      	adds	r6, #4
 8007a5e:	960b      	str	r6, [sp, #44]	; 0x2c
 8007a60:	461a      	mov	r2, r3
 8007a62:	469a      	mov	sl, r3
 8007a64:	ea4f 7be3 	mov.w	fp, r3, asr #31
 8007a68:	465b      	mov	r3, fp
 8007a6a:	2a00      	cmp	r2, #0
 8007a6c:	f173 0000 	sbcs.w	r0, r3, #0
 8007a70:	f6bf abdc 	bge.w	800722c <_svfiprintf_r+0x198>
 8007a74:	f1da 0a00 	rsbs	sl, sl, #0
 8007a78:	eb6b 0b4b 	sbc.w	fp, fp, fp, lsl #1
 8007a7c:	f04f 092d 	mov.w	r9, #45	; 0x2d
 8007a80:	ea5a 020b 	orrs.w	r2, sl, fp
 8007a84:	f88d 904f 	strb.w	r9, [sp, #79]	; 0x4f
 8007a88:	bf0c      	ite	eq
 8007a8a:	2600      	moveq	r6, #0
 8007a8c:	2601      	movne	r6, #1
 8007a8e:	2301      	movs	r3, #1
 8007a90:	f7ff bbd4 	b.w	800723c <_svfiprintf_r+0x1a8>
 8007a94:	2600      	movs	r6, #0
 8007a96:	2302      	movs	r3, #2
 8007a98:	e420      	b.n	80072dc <_svfiprintf_r+0x248>
 8007a9a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007a9c:	9a06      	ldr	r2, [sp, #24]
 8007a9e:	3604      	adds	r6, #4
 8007aa0:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007aa4:	17d1      	asrs	r1, r2, #31
 8007aa6:	960b      	str	r6, [sp, #44]	; 0x2c
 8007aa8:	601a      	str	r2, [r3, #0]
 8007aaa:	6059      	str	r1, [r3, #4]
 8007aac:	f7ff bb17 	b.w	80070de <_svfiprintf_r+0x4a>
 8007ab0:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 8007ab4:	f7ff fa38 	bl	8006f28 <strlen>
 8007ab8:	f89d 904f 	ldrb.w	r9, [sp, #79]	; 0x4f
 8007abc:	9005      	str	r0, [sp, #20]
 8007abe:	e539      	b.n	8007534 <_svfiprintf_r+0x4a0>
 8007ac0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8007ac2:	9e06      	ldr	r6, [sp, #24]
 8007ac4:	3704      	adds	r7, #4
 8007ac6:	f857 3c04 	ldr.w	r3, [r7, #-4]
 8007aca:	970b      	str	r7, [sp, #44]	; 0x2c
 8007acc:	601e      	str	r6, [r3, #0]
 8007ace:	f7ff bb06 	b.w	80070de <_svfiprintf_r+0x4a>
 8007ad2:	2140      	movs	r1, #64	; 0x40
 8007ad4:	9201      	str	r2, [sp, #4]
 8007ad6:	f7fe f8a1 	bl	8005c1c <_malloc_r>
 8007ada:	9e04      	ldr	r6, [sp, #16]
 8007adc:	9a01      	ldr	r2, [sp, #4]
 8007ade:	6030      	str	r0, [r6, #0]
 8007ae0:	6130      	str	r0, [r6, #16]
 8007ae2:	b328      	cbz	r0, 8007b30 <_svfiprintf_r+0xa9c>
 8007ae4:	9e04      	ldr	r6, [sp, #16]
 8007ae6:	2340      	movs	r3, #64	; 0x40
 8007ae8:	6173      	str	r3, [r6, #20]
 8007aea:	f7ff bae2 	b.w	80070b2 <_svfiprintf_r+0x1e>
 8007aee:	2f06      	cmp	r7, #6
 8007af0:	bf28      	it	cs
 8007af2:	2706      	movcs	r7, #6
 8007af4:	f649 16e0 	movw	r6, #39392	; 0x99e0
 8007af8:	9705      	str	r7, [sp, #20]
 8007afa:	ea27 7be7 	bic.w	fp, r7, r7, asr #31
 8007afe:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 8007b02:	f6c0 0600 	movt	r6, #2048	; 0x800
 8007b06:	e418      	b.n	800733a <_svfiprintf_r+0x2a6>
 8007b08:	f89d 904f 	ldrb.w	r9, [sp, #79]	; 0x4f
 8007b0c:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 8007b10:	9705      	str	r7, [sp, #20]
 8007b12:	9007      	str	r0, [sp, #28]
 8007b14:	f7ff bbc2 	b.w	800729c <_svfiprintf_r+0x208>
 8007b18:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007b1a:	786b      	ldrb	r3, [r5, #1]
 8007b1c:	4605      	mov	r5, r0
 8007b1e:	1d31      	adds	r1, r6, #4
 8007b20:	910b      	str	r1, [sp, #44]	; 0x2c
 8007b22:	6837      	ldr	r7, [r6, #0]
 8007b24:	2f00      	cmp	r7, #0
 8007b26:	bfb8      	it	lt
 8007b28:	f04f 37ff 	movlt.w	r7, #4294967295
 8007b2c:	f7ff bb06 	b.w	800713c <_svfiprintf_r+0xa8>
 8007b30:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8007b32:	f04f 37ff 	mov.w	r7, #4294967295
 8007b36:	230c      	movs	r3, #12
 8007b38:	9706      	str	r7, [sp, #24]
 8007b3a:	6033      	str	r3, [r6, #0]
 8007b3c:	e647      	b.n	80077ce <_svfiprintf_r+0x73a>
 8007b3e:	bf00      	nop
 8007b40:	08009878 	.word	0x08009878

08007b44 <_calloc_r>:
 8007b44:	b510      	push	{r4, lr}
 8007b46:	fb01 f102 	mul.w	r1, r1, r2
 8007b4a:	f7fe f867 	bl	8005c1c <_malloc_r>
 8007b4e:	4604      	mov	r4, r0
 8007b50:	b170      	cbz	r0, 8007b70 <_calloc_r+0x2c>
 8007b52:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8007b56:	f022 0203 	bic.w	r2, r2, #3
 8007b5a:	3a04      	subs	r2, #4
 8007b5c:	2a24      	cmp	r2, #36	; 0x24
 8007b5e:	d81c      	bhi.n	8007b9a <_calloc_r+0x56>
 8007b60:	2a13      	cmp	r2, #19
 8007b62:	bf98      	it	ls
 8007b64:	4603      	movls	r3, r0
 8007b66:	d805      	bhi.n	8007b74 <_calloc_r+0x30>
 8007b68:	2200      	movs	r2, #0
 8007b6a:	601a      	str	r2, [r3, #0]
 8007b6c:	605a      	str	r2, [r3, #4]
 8007b6e:	609a      	str	r2, [r3, #8]
 8007b70:	4620      	mov	r0, r4
 8007b72:	bd10      	pop	{r4, pc}
 8007b74:	2100      	movs	r1, #0
 8007b76:	2a1b      	cmp	r2, #27
 8007b78:	6001      	str	r1, [r0, #0]
 8007b7a:	bf98      	it	ls
 8007b7c:	f100 0308 	addls.w	r3, r0, #8
 8007b80:	6041      	str	r1, [r0, #4]
 8007b82:	d9f1      	bls.n	8007b68 <_calloc_r+0x24>
 8007b84:	2a24      	cmp	r2, #36	; 0x24
 8007b86:	6081      	str	r1, [r0, #8]
 8007b88:	60c1      	str	r1, [r0, #12]
 8007b8a:	bf11      	iteee	ne
 8007b8c:	f100 0310 	addne.w	r3, r0, #16
 8007b90:	6101      	streq	r1, [r0, #16]
 8007b92:	f100 0318 	addeq.w	r3, r0, #24
 8007b96:	6141      	streq	r1, [r0, #20]
 8007b98:	e7e6      	b.n	8007b68 <_calloc_r+0x24>
 8007b9a:	2100      	movs	r1, #0
 8007b9c:	f000 f868 	bl	8007c70 <memset>
 8007ba0:	4620      	mov	r0, r4
 8007ba2:	bd10      	pop	{r4, pc}

08007ba4 <memmove>:
 8007ba4:	4288      	cmp	r0, r1
 8007ba6:	b4f0      	push	{r4, r5, r6, r7}
 8007ba8:	d911      	bls.n	8007bce <memmove+0x2a>
 8007baa:	188c      	adds	r4, r1, r2
 8007bac:	42a0      	cmp	r0, r4
 8007bae:	d20e      	bcs.n	8007bce <memmove+0x2a>
 8007bb0:	1885      	adds	r5, r0, r2
 8007bb2:	1e53      	subs	r3, r2, #1
 8007bb4:	b14a      	cbz	r2, 8007bca <memmove+0x26>
 8007bb6:	4621      	mov	r1, r4
 8007bb8:	462a      	mov	r2, r5
 8007bba:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
 8007bbe:	3b01      	subs	r3, #1
 8007bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bc4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007bc8:	d1f7      	bne.n	8007bba <memmove+0x16>
 8007bca:	bcf0      	pop	{r4, r5, r6, r7}
 8007bcc:	4770      	bx	lr
 8007bce:	2a0f      	cmp	r2, #15
 8007bd0:	d947      	bls.n	8007c62 <memmove+0xbe>
 8007bd2:	ea41 0300 	orr.w	r3, r1, r0
 8007bd6:	079b      	lsls	r3, r3, #30
 8007bd8:	d145      	bne.n	8007c66 <memmove+0xc2>
 8007bda:	460c      	mov	r4, r1
 8007bdc:	4603      	mov	r3, r0
 8007bde:	4615      	mov	r5, r2
 8007be0:	6826      	ldr	r6, [r4, #0]
 8007be2:	3310      	adds	r3, #16
 8007be4:	3410      	adds	r4, #16
 8007be6:	3d10      	subs	r5, #16
 8007be8:	2d0f      	cmp	r5, #15
 8007bea:	f843 6c10 	str.w	r6, [r3, #-16]
 8007bee:	f854 6c0c 	ldr.w	r6, [r4, #-12]
 8007bf2:	f843 6c0c 	str.w	r6, [r3, #-12]
 8007bf6:	f854 6c08 	ldr.w	r6, [r4, #-8]
 8007bfa:	f843 6c08 	str.w	r6, [r3, #-8]
 8007bfe:	f854 6c04 	ldr.w	r6, [r4, #-4]
 8007c02:	f843 6c04 	str.w	r6, [r3, #-4]
 8007c06:	d8eb      	bhi.n	8007be0 <memmove+0x3c>
 8007c08:	f1a2 0510 	sub.w	r5, r2, #16
 8007c0c:	f002 040f 	and.w	r4, r2, #15
 8007c10:	f025 050f 	bic.w	r5, r5, #15
 8007c14:	3510      	adds	r5, #16
 8007c16:	2c03      	cmp	r4, #3
 8007c18:	eb00 0305 	add.w	r3, r0, r5
 8007c1c:	4429      	add	r1, r5
 8007c1e:	d924      	bls.n	8007c6a <memmove+0xc6>
 8007c20:	f1a4 0c04 	sub.w	ip, r4, #4
 8007c24:	461d      	mov	r5, r3
 8007c26:	460c      	mov	r4, r1
 8007c28:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
 8007c2c:	eb01 078c 	add.w	r7, r1, ip, lsl #2
 8007c30:	3704      	adds	r7, #4
 8007c32:	f854 6b04 	ldr.w	r6, [r4], #4
 8007c36:	42bc      	cmp	r4, r7
 8007c38:	f845 6b04 	str.w	r6, [r5], #4
 8007c3c:	d1f9      	bne.n	8007c32 <memmove+0x8e>
 8007c3e:	f10c 0401 	add.w	r4, ip, #1
 8007c42:	f002 0203 	and.w	r2, r2, #3
 8007c46:	00a4      	lsls	r4, r4, #2
 8007c48:	1909      	adds	r1, r1, r4
 8007c4a:	191b      	adds	r3, r3, r4
 8007c4c:	2a00      	cmp	r2, #0
 8007c4e:	d0bc      	beq.n	8007bca <memmove+0x26>
 8007c50:	3901      	subs	r1, #1
 8007c52:	189a      	adds	r2, r3, r2
 8007c54:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007c58:	f803 4b01 	strb.w	r4, [r3], #1
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d1f9      	bne.n	8007c54 <memmove+0xb0>
 8007c60:	e7b3      	b.n	8007bca <memmove+0x26>
 8007c62:	4603      	mov	r3, r0
 8007c64:	e7f2      	b.n	8007c4c <memmove+0xa8>
 8007c66:	4603      	mov	r3, r0
 8007c68:	e7f2      	b.n	8007c50 <memmove+0xac>
 8007c6a:	4622      	mov	r2, r4
 8007c6c:	e7ee      	b.n	8007c4c <memmove+0xa8>
 8007c6e:	bf00      	nop

08007c70 <memset>:
 8007c70:	2a03      	cmp	r2, #3
 8007c72:	b2c9      	uxtb	r1, r1
 8007c74:	b470      	push	{r4, r5, r6}
 8007c76:	d808      	bhi.n	8007c8a <memset+0x1a>
 8007c78:	b12a      	cbz	r2, 8007c86 <memset+0x16>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	1812      	adds	r2, r2, r0
 8007c7e:	f803 1b01 	strb.w	r1, [r3], #1
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d1fb      	bne.n	8007c7e <memset+0xe>
 8007c86:	bc70      	pop	{r4, r5, r6}
 8007c88:	4770      	bx	lr
 8007c8a:	0783      	lsls	r3, r0, #30
 8007c8c:	4402      	add	r2, r0
 8007c8e:	d009      	beq.n	8007ca4 <memset+0x34>
 8007c90:	1c44      	adds	r4, r0, #1
 8007c92:	f004 0503 	and.w	r5, r4, #3
 8007c96:	4623      	mov	r3, r4
 8007c98:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007c9c:	3401      	adds	r4, #1
 8007c9e:	2d00      	cmp	r5, #0
 8007ca0:	d1f7      	bne.n	8007c92 <memset+0x22>
 8007ca2:	e000      	b.n	8007ca6 <memset+0x36>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	1ad5      	subs	r5, r2, r3
 8007ca8:	eb01 2401 	add.w	r4, r1, r1, lsl #8
 8007cac:	2d3f      	cmp	r5, #63	; 0x3f
 8007cae:	eb04 4404 	add.w	r4, r4, r4, lsl #16
 8007cb2:	dd2c      	ble.n	8007d0e <memset+0x9e>
 8007cb4:	601c      	str	r4, [r3, #0]
 8007cb6:	3340      	adds	r3, #64	; 0x40
 8007cb8:	1ad5      	subs	r5, r2, r3
 8007cba:	f843 4c3c 	str.w	r4, [r3, #-60]
 8007cbe:	2d3f      	cmp	r5, #63	; 0x3f
 8007cc0:	f843 4c38 	str.w	r4, [r3, #-56]
 8007cc4:	f843 4c34 	str.w	r4, [r3, #-52]
 8007cc8:	f843 4c30 	str.w	r4, [r3, #-48]
 8007ccc:	f843 4c2c 	str.w	r4, [r3, #-44]
 8007cd0:	f843 4c28 	str.w	r4, [r3, #-40]
 8007cd4:	f843 4c24 	str.w	r4, [r3, #-36]
 8007cd8:	f843 4c20 	str.w	r4, [r3, #-32]
 8007cdc:	f843 4c1c 	str.w	r4, [r3, #-28]
 8007ce0:	f843 4c18 	str.w	r4, [r3, #-24]
 8007ce4:	f843 4c14 	str.w	r4, [r3, #-20]
 8007ce8:	f843 4c10 	str.w	r4, [r3, #-16]
 8007cec:	f843 4c0c 	str.w	r4, [r3, #-12]
 8007cf0:	f843 4c08 	str.w	r4, [r3, #-8]
 8007cf4:	f843 4c04 	str.w	r4, [r3, #-4]
 8007cf8:	dcdc      	bgt.n	8007cb4 <memset+0x44>
 8007cfa:	e008      	b.n	8007d0e <memset+0x9e>
 8007cfc:	601c      	str	r4, [r3, #0]
 8007cfe:	3310      	adds	r3, #16
 8007d00:	1ad5      	subs	r5, r2, r3
 8007d02:	f843 4c0c 	str.w	r4, [r3, #-12]
 8007d06:	f843 4c08 	str.w	r4, [r3, #-8]
 8007d0a:	f843 4c04 	str.w	r4, [r3, #-4]
 8007d0e:	2d0f      	cmp	r5, #15
 8007d10:	dcf4      	bgt.n	8007cfc <memset+0x8c>
 8007d12:	2d03      	cmp	r5, #3
 8007d14:	dd08      	ble.n	8007d28 <memset+0xb8>
 8007d16:	1d1d      	adds	r5, r3, #4
 8007d18:	1b56      	subs	r6, r2, r5
 8007d1a:	f845 4c04 	str.w	r4, [r5, #-4]
 8007d1e:	2e03      	cmp	r6, #3
 8007d20:	462b      	mov	r3, r5
 8007d22:	f105 0504 	add.w	r5, r5, #4
 8007d26:	dcf7      	bgt.n	8007d18 <memset+0xa8>
 8007d28:	429a      	cmp	r2, r3
 8007d2a:	d9ac      	bls.n	8007c86 <memset+0x16>
 8007d2c:	3301      	adds	r3, #1
 8007d2e:	3201      	adds	r2, #1
 8007d30:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007d34:	3301      	adds	r3, #1
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d1fa      	bne.n	8007d30 <memset+0xc0>
 8007d3a:	e7a4      	b.n	8007c86 <memset+0x16>

08007d3c <_realloc_r>:
 8007d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d40:	460c      	mov	r4, r1
 8007d42:	b083      	sub	sp, #12
 8007d44:	4681      	mov	r9, r0
 8007d46:	4617      	mov	r7, r2
 8007d48:	2900      	cmp	r1, #0
 8007d4a:	f000 811c 	beq.w	8007f86 <_realloc_r+0x24a>
 8007d4e:	f107 050b 	add.w	r5, r7, #11
 8007d52:	f7fe fb33 	bl	80063bc <__malloc_lock>
 8007d56:	f854 2c04 	ldr.w	r2, [r4, #-4]
 8007d5a:	2d16      	cmp	r5, #22
 8007d5c:	f1a4 0a08 	sub.w	sl, r4, #8
 8007d60:	f022 0603 	bic.w	r6, r2, #3
 8007d64:	d875      	bhi.n	8007e52 <_realloc_r+0x116>
 8007d66:	2110      	movs	r1, #16
 8007d68:	2300      	movs	r3, #0
 8007d6a:	460d      	mov	r5, r1
 8007d6c:	42bd      	cmp	r5, r7
 8007d6e:	bf38      	it	cc
 8007d70:	f043 0301 	orrcc.w	r3, r3, #1
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	f040 810c 	bne.w	8007f92 <_realloc_r+0x256>
 8007d7a:	428e      	cmp	r6, r1
 8007d7c:	da6e      	bge.n	8007e5c <_realloc_r+0x120>
 8007d7e:	f240 2b0c 	movw	fp, #524	; 0x20c
 8007d82:	eb0a 0006 	add.w	r0, sl, r6
 8007d86:	f2c2 0b00 	movt	fp, #8192	; 0x2000
 8007d8a:	f8db e008 	ldr.w	lr, [fp, #8]
 8007d8e:	4586      	cmp	lr, r0
 8007d90:	f000 8104 	beq.w	8007f9c <_realloc_r+0x260>
 8007d94:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8007d98:	f02c 0801 	bic.w	r8, ip, #1
 8007d9c:	4480      	add	r8, r0
 8007d9e:	f8d8 8004 	ldr.w	r8, [r8, #4]
 8007da2:	f018 0f01 	tst.w	r8, #1
 8007da6:	bf1c      	itt	ne
 8007da8:	469c      	movne	ip, r3
 8007daa:	4660      	movne	r0, ip
 8007dac:	d06f      	beq.n	8007e8e <_realloc_r+0x152>
 8007dae:	07d3      	lsls	r3, r2, #31
 8007db0:	f100 80c3 	bmi.w	8007f3a <_realloc_r+0x1fe>
 8007db4:	f854 3c08 	ldr.w	r3, [r4, #-8]
 8007db8:	ebc3 030a 	rsb	r3, r3, sl
 8007dbc:	685a      	ldr	r2, [r3, #4]
 8007dbe:	f022 0203 	bic.w	r2, r2, #3
 8007dc2:	1992      	adds	r2, r2, r6
 8007dc4:	9201      	str	r2, [sp, #4]
 8007dc6:	2800      	cmp	r0, #0
 8007dc8:	d06c      	beq.n	8007ea4 <_realloc_r+0x168>
 8007dca:	4570      	cmp	r0, lr
 8007dcc:	f000 8137 	beq.w	800803e <_realloc_r+0x302>
 8007dd0:	eb0c 0802 	add.w	r8, ip, r2
 8007dd4:	4588      	cmp	r8, r1
 8007dd6:	db65      	blt.n	8007ea4 <_realloc_r+0x168>
 8007dd8:	68c1      	ldr	r1, [r0, #12]
 8007dda:	461f      	mov	r7, r3
 8007ddc:	6880      	ldr	r0, [r0, #8]
 8007dde:	1f32      	subs	r2, r6, #4
 8007de0:	2a24      	cmp	r2, #36	; 0x24
 8007de2:	6088      	str	r0, [r1, #8]
 8007de4:	60c1      	str	r1, [r0, #12]
 8007de6:	f857 0f08 	ldr.w	r0, [r7, #8]!
 8007dea:	68d9      	ldr	r1, [r3, #12]
 8007dec:	60c1      	str	r1, [r0, #12]
 8007dee:	6088      	str	r0, [r1, #8]
 8007df0:	f200 8178 	bhi.w	80080e4 <_realloc_r+0x3a8>
 8007df4:	2a13      	cmp	r2, #19
 8007df6:	bf9c      	itt	ls
 8007df8:	4639      	movls	r1, r7
 8007dfa:	4620      	movls	r0, r4
 8007dfc:	d91f      	bls.n	8007e3e <_realloc_r+0x102>
 8007dfe:	6821      	ldr	r1, [r4, #0]
 8007e00:	2a1b      	cmp	r2, #27
 8007e02:	bf98      	it	ls
 8007e04:	f104 0008 	addls.w	r0, r4, #8
 8007e08:	6099      	str	r1, [r3, #8]
 8007e0a:	6861      	ldr	r1, [r4, #4]
 8007e0c:	60d9      	str	r1, [r3, #12]
 8007e0e:	bf98      	it	ls
 8007e10:	f103 0110 	addls.w	r1, r3, #16
 8007e14:	d913      	bls.n	8007e3e <_realloc_r+0x102>
 8007e16:	68a1      	ldr	r1, [r4, #8]
 8007e18:	2a24      	cmp	r2, #36	; 0x24
 8007e1a:	bf14      	ite	ne
 8007e1c:	f104 0010 	addne.w	r0, r4, #16
 8007e20:	f104 0018 	addeq.w	r0, r4, #24
 8007e24:	6119      	str	r1, [r3, #16]
 8007e26:	68e1      	ldr	r1, [r4, #12]
 8007e28:	6159      	str	r1, [r3, #20]
 8007e2a:	bf11      	iteee	ne
 8007e2c:	f103 0118 	addne.w	r1, r3, #24
 8007e30:	6922      	ldreq	r2, [r4, #16]
 8007e32:	f103 0120 	addeq.w	r1, r3, #32
 8007e36:	619a      	streq	r2, [r3, #24]
 8007e38:	bf04      	itt	eq
 8007e3a:	6962      	ldreq	r2, [r4, #20]
 8007e3c:	61da      	streq	r2, [r3, #28]
 8007e3e:	6802      	ldr	r2, [r0, #0]
 8007e40:	463c      	mov	r4, r7
 8007e42:	600a      	str	r2, [r1, #0]
 8007e44:	469a      	mov	sl, r3
 8007e46:	6842      	ldr	r2, [r0, #4]
 8007e48:	604a      	str	r2, [r1, #4]
 8007e4a:	6882      	ldr	r2, [r0, #8]
 8007e4c:	608a      	str	r2, [r1, #8]
 8007e4e:	685a      	ldr	r2, [r3, #4]
 8007e50:	e005      	b.n	8007e5e <_realloc_r+0x122>
 8007e52:	f025 0507 	bic.w	r5, r5, #7
 8007e56:	4629      	mov	r1, r5
 8007e58:	0feb      	lsrs	r3, r5, #31
 8007e5a:	e787      	b.n	8007d6c <_realloc_r+0x30>
 8007e5c:	46b0      	mov	r8, r6
 8007e5e:	ebc5 0308 	rsb	r3, r5, r8
 8007e62:	2b0f      	cmp	r3, #15
 8007e64:	d855      	bhi.n	8007f12 <_realloc_r+0x1d6>
 8007e66:	eb0a 0308 	add.w	r3, sl, r8
 8007e6a:	f002 0201 	and.w	r2, r2, #1
 8007e6e:	ea42 0208 	orr.w	r2, r2, r8
 8007e72:	f8ca 2004 	str.w	r2, [sl, #4]
 8007e76:	685a      	ldr	r2, [r3, #4]
 8007e78:	f042 0201 	orr.w	r2, r2, #1
 8007e7c:	605a      	str	r2, [r3, #4]
 8007e7e:	4648      	mov	r0, r9
 8007e80:	4627      	mov	r7, r4
 8007e82:	f7fe fa9d 	bl	80063c0 <__malloc_unlock>
 8007e86:	4638      	mov	r0, r7
 8007e88:	b003      	add	sp, #12
 8007e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e8e:	f02c 0c03 	bic.w	ip, ip, #3
 8007e92:	eb0c 0806 	add.w	r8, ip, r6
 8007e96:	4588      	cmp	r8, r1
 8007e98:	db89      	blt.n	8007dae <_realloc_r+0x72>
 8007e9a:	68c3      	ldr	r3, [r0, #12]
 8007e9c:	6881      	ldr	r1, [r0, #8]
 8007e9e:	60cb      	str	r3, [r1, #12]
 8007ea0:	6099      	str	r1, [r3, #8]
 8007ea2:	e7dc      	b.n	8007e5e <_realloc_r+0x122>
 8007ea4:	9a01      	ldr	r2, [sp, #4]
 8007ea6:	428a      	cmp	r2, r1
 8007ea8:	db47      	blt.n	8007f3a <_realloc_r+0x1fe>
 8007eaa:	461f      	mov	r7, r3
 8007eac:	68d9      	ldr	r1, [r3, #12]
 8007eae:	1f32      	subs	r2, r6, #4
 8007eb0:	f857 0f08 	ldr.w	r0, [r7, #8]!
 8007eb4:	2a24      	cmp	r2, #36	; 0x24
 8007eb6:	60c1      	str	r1, [r0, #12]
 8007eb8:	6088      	str	r0, [r1, #8]
 8007eba:	f200 80b1 	bhi.w	8008020 <_realloc_r+0x2e4>
 8007ebe:	2a13      	cmp	r2, #19
 8007ec0:	bf9c      	itt	ls
 8007ec2:	4639      	movls	r1, r7
 8007ec4:	4620      	movls	r0, r4
 8007ec6:	d91f      	bls.n	8007f08 <_realloc_r+0x1cc>
 8007ec8:	6821      	ldr	r1, [r4, #0]
 8007eca:	2a1b      	cmp	r2, #27
 8007ecc:	bf98      	it	ls
 8007ece:	f104 0008 	addls.w	r0, r4, #8
 8007ed2:	6099      	str	r1, [r3, #8]
 8007ed4:	6861      	ldr	r1, [r4, #4]
 8007ed6:	60d9      	str	r1, [r3, #12]
 8007ed8:	bf98      	it	ls
 8007eda:	f103 0110 	addls.w	r1, r3, #16
 8007ede:	d913      	bls.n	8007f08 <_realloc_r+0x1cc>
 8007ee0:	68a1      	ldr	r1, [r4, #8]
 8007ee2:	2a24      	cmp	r2, #36	; 0x24
 8007ee4:	bf14      	ite	ne
 8007ee6:	f104 0010 	addne.w	r0, r4, #16
 8007eea:	f104 0018 	addeq.w	r0, r4, #24
 8007eee:	6119      	str	r1, [r3, #16]
 8007ef0:	68e1      	ldr	r1, [r4, #12]
 8007ef2:	6159      	str	r1, [r3, #20]
 8007ef4:	bf11      	iteee	ne
 8007ef6:	f103 0118 	addne.w	r1, r3, #24
 8007efa:	6922      	ldreq	r2, [r4, #16]
 8007efc:	f103 0120 	addeq.w	r1, r3, #32
 8007f00:	619a      	streq	r2, [r3, #24]
 8007f02:	bf04      	itt	eq
 8007f04:	6962      	ldreq	r2, [r4, #20]
 8007f06:	61da      	streq	r2, [r3, #28]
 8007f08:	6802      	ldr	r2, [r0, #0]
 8007f0a:	463c      	mov	r4, r7
 8007f0c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007f10:	e797      	b.n	8007e42 <_realloc_r+0x106>
 8007f12:	eb0a 0105 	add.w	r1, sl, r5
 8007f16:	f002 0201 	and.w	r2, r2, #1
 8007f1a:	18ce      	adds	r6, r1, r3
 8007f1c:	4315      	orrs	r5, r2
 8007f1e:	f043 0301 	orr.w	r3, r3, #1
 8007f22:	f8ca 5004 	str.w	r5, [sl, #4]
 8007f26:	604b      	str	r3, [r1, #4]
 8007f28:	4648      	mov	r0, r9
 8007f2a:	6873      	ldr	r3, [r6, #4]
 8007f2c:	3108      	adds	r1, #8
 8007f2e:	f043 0301 	orr.w	r3, r3, #1
 8007f32:	6073      	str	r3, [r6, #4]
 8007f34:	f7fd fd4a 	bl	80059cc <_free_r>
 8007f38:	e7a1      	b.n	8007e7e <_realloc_r+0x142>
 8007f3a:	4639      	mov	r1, r7
 8007f3c:	4648      	mov	r0, r9
 8007f3e:	f7fd fe6d 	bl	8005c1c <_malloc_r>
 8007f42:	4607      	mov	r7, r0
 8007f44:	b1d8      	cbz	r0, 8007f7e <_realloc_r+0x242>
 8007f46:	f854 2c04 	ldr.w	r2, [r4, #-4]
 8007f4a:	f1a0 0108 	sub.w	r1, r0, #8
 8007f4e:	f022 0301 	bic.w	r3, r2, #1
 8007f52:	4453      	add	r3, sl
 8007f54:	4299      	cmp	r1, r3
 8007f56:	f000 80bf 	beq.w	80080d8 <_realloc_r+0x39c>
 8007f5a:	1f32      	subs	r2, r6, #4
 8007f5c:	2a24      	cmp	r2, #36	; 0x24
 8007f5e:	d86a      	bhi.n	8008036 <_realloc_r+0x2fa>
 8007f60:	2a13      	cmp	r2, #19
 8007f62:	bf9c      	itt	ls
 8007f64:	4603      	movls	r3, r0
 8007f66:	4622      	movls	r2, r4
 8007f68:	d839      	bhi.n	8007fde <_realloc_r+0x2a2>
 8007f6a:	6811      	ldr	r1, [r2, #0]
 8007f6c:	6019      	str	r1, [r3, #0]
 8007f6e:	6851      	ldr	r1, [r2, #4]
 8007f70:	6059      	str	r1, [r3, #4]
 8007f72:	6892      	ldr	r2, [r2, #8]
 8007f74:	609a      	str	r2, [r3, #8]
 8007f76:	4648      	mov	r0, r9
 8007f78:	4621      	mov	r1, r4
 8007f7a:	f7fd fd27 	bl	80059cc <_free_r>
 8007f7e:	4648      	mov	r0, r9
 8007f80:	f7fe fa1e 	bl	80063c0 <__malloc_unlock>
 8007f84:	e77f      	b.n	8007e86 <_realloc_r+0x14a>
 8007f86:	4611      	mov	r1, r2
 8007f88:	b003      	add	sp, #12
 8007f8a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f8e:	f7fd be45 	b.w	8005c1c <_malloc_r>
 8007f92:	230c      	movs	r3, #12
 8007f94:	2700      	movs	r7, #0
 8007f96:	f8c9 3000 	str.w	r3, [r9]
 8007f9a:	e774      	b.n	8007e86 <_realloc_r+0x14a>
 8007f9c:	f8de 3004 	ldr.w	r3, [lr, #4]
 8007fa0:	f105 0010 	add.w	r0, r5, #16
 8007fa4:	f023 0c03 	bic.w	ip, r3, #3
 8007fa8:	eb0c 0306 	add.w	r3, ip, r6
 8007fac:	4283      	cmp	r3, r0
 8007fae:	bfb8      	it	lt
 8007fb0:	4670      	movlt	r0, lr
 8007fb2:	f6ff aefc 	blt.w	8007dae <_realloc_r+0x72>
 8007fb6:	eb0a 0205 	add.w	r2, sl, r5
 8007fba:	1b5b      	subs	r3, r3, r5
 8007fbc:	f043 0301 	orr.w	r3, r3, #1
 8007fc0:	4648      	mov	r0, r9
 8007fc2:	6053      	str	r3, [r2, #4]
 8007fc4:	4627      	mov	r7, r4
 8007fc6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8007fca:	f8cb 2008 	str.w	r2, [fp, #8]
 8007fce:	f003 0301 	and.w	r3, r3, #1
 8007fd2:	431d      	orrs	r5, r3
 8007fd4:	f844 5c04 	str.w	r5, [r4, #-4]
 8007fd8:	f7fe f9f2 	bl	80063c0 <__malloc_unlock>
 8007fdc:	e753      	b.n	8007e86 <_realloc_r+0x14a>
 8007fde:	6823      	ldr	r3, [r4, #0]
 8007fe0:	2a1b      	cmp	r2, #27
 8007fe2:	bf98      	it	ls
 8007fe4:	f104 0208 	addls.w	r2, r4, #8
 8007fe8:	6003      	str	r3, [r0, #0]
 8007fea:	6863      	ldr	r3, [r4, #4]
 8007fec:	6043      	str	r3, [r0, #4]
 8007fee:	bf98      	it	ls
 8007ff0:	f100 0308 	addls.w	r3, r0, #8
 8007ff4:	d9b9      	bls.n	8007f6a <_realloc_r+0x22e>
 8007ff6:	68a3      	ldr	r3, [r4, #8]
 8007ff8:	2a24      	cmp	r2, #36	; 0x24
 8007ffa:	bf14      	ite	ne
 8007ffc:	f104 0210 	addne.w	r2, r4, #16
 8008000:	f104 0218 	addeq.w	r2, r4, #24
 8008004:	6083      	str	r3, [r0, #8]
 8008006:	68e3      	ldr	r3, [r4, #12]
 8008008:	60c3      	str	r3, [r0, #12]
 800800a:	bf11      	iteee	ne
 800800c:	f100 0310 	addne.w	r3, r0, #16
 8008010:	6921      	ldreq	r1, [r4, #16]
 8008012:	f100 0318 	addeq.w	r3, r0, #24
 8008016:	6101      	streq	r1, [r0, #16]
 8008018:	bf04      	itt	eq
 800801a:	6961      	ldreq	r1, [r4, #20]
 800801c:	6141      	streq	r1, [r0, #20]
 800801e:	e7a4      	b.n	8007f6a <_realloc_r+0x22e>
 8008020:	4621      	mov	r1, r4
 8008022:	4638      	mov	r0, r7
 8008024:	9300      	str	r3, [sp, #0]
 8008026:	f7ff fdbd 	bl	8007ba4 <memmove>
 800802a:	e89d 0108 	ldmia.w	sp, {r3, r8}
 800802e:	463c      	mov	r4, r7
 8008030:	469a      	mov	sl, r3
 8008032:	685a      	ldr	r2, [r3, #4]
 8008034:	e713      	b.n	8007e5e <_realloc_r+0x122>
 8008036:	4621      	mov	r1, r4
 8008038:	f7ff fdb4 	bl	8007ba4 <memmove>
 800803c:	e79b      	b.n	8007f76 <_realloc_r+0x23a>
 800803e:	9801      	ldr	r0, [sp, #4]
 8008040:	f105 0210 	add.w	r2, r5, #16
 8008044:	eb0c 0800 	add.w	r8, ip, r0
 8008048:	4590      	cmp	r8, r2
 800804a:	f6ff af2b 	blt.w	8007ea4 <_realloc_r+0x168>
 800804e:	461f      	mov	r7, r3
 8008050:	68d9      	ldr	r1, [r3, #12]
 8008052:	1f32      	subs	r2, r6, #4
 8008054:	f857 0f08 	ldr.w	r0, [r7, #8]!
 8008058:	2a24      	cmp	r2, #36	; 0x24
 800805a:	60c1      	str	r1, [r0, #12]
 800805c:	6088      	str	r0, [r1, #8]
 800805e:	d84b      	bhi.n	80080f8 <_realloc_r+0x3bc>
 8008060:	2a13      	cmp	r2, #19
 8008062:	bf9c      	itt	ls
 8008064:	463a      	movls	r2, r7
 8008066:	4621      	movls	r1, r4
 8008068:	d91f      	bls.n	80080aa <_realloc_r+0x36e>
 800806a:	6821      	ldr	r1, [r4, #0]
 800806c:	2a1b      	cmp	r2, #27
 800806e:	bf98      	it	ls
 8008070:	f103 0210 	addls.w	r2, r3, #16
 8008074:	6099      	str	r1, [r3, #8]
 8008076:	6861      	ldr	r1, [r4, #4]
 8008078:	60d9      	str	r1, [r3, #12]
 800807a:	bf98      	it	ls
 800807c:	f104 0108 	addls.w	r1, r4, #8
 8008080:	d913      	bls.n	80080aa <_realloc_r+0x36e>
 8008082:	68a1      	ldr	r1, [r4, #8]
 8008084:	2a24      	cmp	r2, #36	; 0x24
 8008086:	bf14      	ite	ne
 8008088:	f103 0218 	addne.w	r2, r3, #24
 800808c:	f103 0220 	addeq.w	r2, r3, #32
 8008090:	6119      	str	r1, [r3, #16]
 8008092:	68e1      	ldr	r1, [r4, #12]
 8008094:	6159      	str	r1, [r3, #20]
 8008096:	bf11      	iteee	ne
 8008098:	f104 0110 	addne.w	r1, r4, #16
 800809c:	6920      	ldreq	r0, [r4, #16]
 800809e:	f104 0118 	addeq.w	r1, r4, #24
 80080a2:	6198      	streq	r0, [r3, #24]
 80080a4:	bf04      	itt	eq
 80080a6:	6960      	ldreq	r0, [r4, #20]
 80080a8:	61d8      	streq	r0, [r3, #28]
 80080aa:	6808      	ldr	r0, [r1, #0]
 80080ac:	6010      	str	r0, [r2, #0]
 80080ae:	6848      	ldr	r0, [r1, #4]
 80080b0:	6050      	str	r0, [r2, #4]
 80080b2:	6889      	ldr	r1, [r1, #8]
 80080b4:	6091      	str	r1, [r2, #8]
 80080b6:	195a      	adds	r2, r3, r5
 80080b8:	ebc5 0108 	rsb	r1, r5, r8
 80080bc:	f041 0101 	orr.w	r1, r1, #1
 80080c0:	4648      	mov	r0, r9
 80080c2:	6051      	str	r1, [r2, #4]
 80080c4:	6859      	ldr	r1, [r3, #4]
 80080c6:	f8cb 2008 	str.w	r2, [fp, #8]
 80080ca:	f001 0101 	and.w	r1, r1, #1
 80080ce:	430d      	orrs	r5, r1
 80080d0:	605d      	str	r5, [r3, #4]
 80080d2:	f7fe f975 	bl	80063c0 <__malloc_unlock>
 80080d6:	e6d6      	b.n	8007e86 <_realloc_r+0x14a>
 80080d8:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80080dc:	f023 0803 	bic.w	r8, r3, #3
 80080e0:	44b0      	add	r8, r6
 80080e2:	e6bc      	b.n	8007e5e <_realloc_r+0x122>
 80080e4:	4621      	mov	r1, r4
 80080e6:	4638      	mov	r0, r7
 80080e8:	9300      	str	r3, [sp, #0]
 80080ea:	f7ff fd5b 	bl	8007ba4 <memmove>
 80080ee:	9b00      	ldr	r3, [sp, #0]
 80080f0:	463c      	mov	r4, r7
 80080f2:	469a      	mov	sl, r3
 80080f4:	685a      	ldr	r2, [r3, #4]
 80080f6:	e6b2      	b.n	8007e5e <_realloc_r+0x122>
 80080f8:	4638      	mov	r0, r7
 80080fa:	4621      	mov	r1, r4
 80080fc:	9300      	str	r3, [sp, #0]
 80080fe:	f7ff fd51 	bl	8007ba4 <memmove>
 8008102:	9b00      	ldr	r3, [sp, #0]
 8008104:	e7d7      	b.n	80080b6 <_realloc_r+0x37a>
 8008106:	bf00      	nop

08008108 <__aeabi_uidiv>:
 8008108:	1e4a      	subs	r2, r1, #1
 800810a:	bf08      	it	eq
 800810c:	4770      	bxeq	lr
 800810e:	f0c0 8124 	bcc.w	800835a <__aeabi_uidiv+0x252>
 8008112:	4288      	cmp	r0, r1
 8008114:	f240 8116 	bls.w	8008344 <__aeabi_uidiv+0x23c>
 8008118:	4211      	tst	r1, r2
 800811a:	f000 8117 	beq.w	800834c <__aeabi_uidiv+0x244>
 800811e:	fab0 f380 	clz	r3, r0
 8008122:	fab1 f281 	clz	r2, r1
 8008126:	eba2 0303 	sub.w	r3, r2, r3
 800812a:	f1c3 031f 	rsb	r3, r3, #31
 800812e:	a204      	add	r2, pc, #16	; (adr r2, 8008140 <__aeabi_uidiv+0x38>)
 8008130:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8008134:	f04f 0200 	mov.w	r2, #0
 8008138:	469f      	mov	pc, r3
 800813a:	bf00      	nop
 800813c:	f3af 8000 	nop.w
 8008140:	ebb0 7fc1 	cmp.w	r0, r1, lsl #31
 8008144:	bf00      	nop
 8008146:	eb42 0202 	adc.w	r2, r2, r2
 800814a:	bf28      	it	cs
 800814c:	eba0 70c1 	subcs.w	r0, r0, r1, lsl #31
 8008150:	ebb0 7f81 	cmp.w	r0, r1, lsl #30
 8008154:	bf00      	nop
 8008156:	eb42 0202 	adc.w	r2, r2, r2
 800815a:	bf28      	it	cs
 800815c:	eba0 7081 	subcs.w	r0, r0, r1, lsl #30
 8008160:	ebb0 7f41 	cmp.w	r0, r1, lsl #29
 8008164:	bf00      	nop
 8008166:	eb42 0202 	adc.w	r2, r2, r2
 800816a:	bf28      	it	cs
 800816c:	eba0 7041 	subcs.w	r0, r0, r1, lsl #29
 8008170:	ebb0 7f01 	cmp.w	r0, r1, lsl #28
 8008174:	bf00      	nop
 8008176:	eb42 0202 	adc.w	r2, r2, r2
 800817a:	bf28      	it	cs
 800817c:	eba0 7001 	subcs.w	r0, r0, r1, lsl #28
 8008180:	ebb0 6fc1 	cmp.w	r0, r1, lsl #27
 8008184:	bf00      	nop
 8008186:	eb42 0202 	adc.w	r2, r2, r2
 800818a:	bf28      	it	cs
 800818c:	eba0 60c1 	subcs.w	r0, r0, r1, lsl #27
 8008190:	ebb0 6f81 	cmp.w	r0, r1, lsl #26
 8008194:	bf00      	nop
 8008196:	eb42 0202 	adc.w	r2, r2, r2
 800819a:	bf28      	it	cs
 800819c:	eba0 6081 	subcs.w	r0, r0, r1, lsl #26
 80081a0:	ebb0 6f41 	cmp.w	r0, r1, lsl #25
 80081a4:	bf00      	nop
 80081a6:	eb42 0202 	adc.w	r2, r2, r2
 80081aa:	bf28      	it	cs
 80081ac:	eba0 6041 	subcs.w	r0, r0, r1, lsl #25
 80081b0:	ebb0 6f01 	cmp.w	r0, r1, lsl #24
 80081b4:	bf00      	nop
 80081b6:	eb42 0202 	adc.w	r2, r2, r2
 80081ba:	bf28      	it	cs
 80081bc:	eba0 6001 	subcs.w	r0, r0, r1, lsl #24
 80081c0:	ebb0 5fc1 	cmp.w	r0, r1, lsl #23
 80081c4:	bf00      	nop
 80081c6:	eb42 0202 	adc.w	r2, r2, r2
 80081ca:	bf28      	it	cs
 80081cc:	eba0 50c1 	subcs.w	r0, r0, r1, lsl #23
 80081d0:	ebb0 5f81 	cmp.w	r0, r1, lsl #22
 80081d4:	bf00      	nop
 80081d6:	eb42 0202 	adc.w	r2, r2, r2
 80081da:	bf28      	it	cs
 80081dc:	eba0 5081 	subcs.w	r0, r0, r1, lsl #22
 80081e0:	ebb0 5f41 	cmp.w	r0, r1, lsl #21
 80081e4:	bf00      	nop
 80081e6:	eb42 0202 	adc.w	r2, r2, r2
 80081ea:	bf28      	it	cs
 80081ec:	eba0 5041 	subcs.w	r0, r0, r1, lsl #21
 80081f0:	ebb0 5f01 	cmp.w	r0, r1, lsl #20
 80081f4:	bf00      	nop
 80081f6:	eb42 0202 	adc.w	r2, r2, r2
 80081fa:	bf28      	it	cs
 80081fc:	eba0 5001 	subcs.w	r0, r0, r1, lsl #20
 8008200:	ebb0 4fc1 	cmp.w	r0, r1, lsl #19
 8008204:	bf00      	nop
 8008206:	eb42 0202 	adc.w	r2, r2, r2
 800820a:	bf28      	it	cs
 800820c:	eba0 40c1 	subcs.w	r0, r0, r1, lsl #19
 8008210:	ebb0 4f81 	cmp.w	r0, r1, lsl #18
 8008214:	bf00      	nop
 8008216:	eb42 0202 	adc.w	r2, r2, r2
 800821a:	bf28      	it	cs
 800821c:	eba0 4081 	subcs.w	r0, r0, r1, lsl #18
 8008220:	ebb0 4f41 	cmp.w	r0, r1, lsl #17
 8008224:	bf00      	nop
 8008226:	eb42 0202 	adc.w	r2, r2, r2
 800822a:	bf28      	it	cs
 800822c:	eba0 4041 	subcs.w	r0, r0, r1, lsl #17
 8008230:	ebb0 4f01 	cmp.w	r0, r1, lsl #16
 8008234:	bf00      	nop
 8008236:	eb42 0202 	adc.w	r2, r2, r2
 800823a:	bf28      	it	cs
 800823c:	eba0 4001 	subcs.w	r0, r0, r1, lsl #16
 8008240:	ebb0 3fc1 	cmp.w	r0, r1, lsl #15
 8008244:	bf00      	nop
 8008246:	eb42 0202 	adc.w	r2, r2, r2
 800824a:	bf28      	it	cs
 800824c:	eba0 30c1 	subcs.w	r0, r0, r1, lsl #15
 8008250:	ebb0 3f81 	cmp.w	r0, r1, lsl #14
 8008254:	bf00      	nop
 8008256:	eb42 0202 	adc.w	r2, r2, r2
 800825a:	bf28      	it	cs
 800825c:	eba0 3081 	subcs.w	r0, r0, r1, lsl #14
 8008260:	ebb0 3f41 	cmp.w	r0, r1, lsl #13
 8008264:	bf00      	nop
 8008266:	eb42 0202 	adc.w	r2, r2, r2
 800826a:	bf28      	it	cs
 800826c:	eba0 3041 	subcs.w	r0, r0, r1, lsl #13
 8008270:	ebb0 3f01 	cmp.w	r0, r1, lsl #12
 8008274:	bf00      	nop
 8008276:	eb42 0202 	adc.w	r2, r2, r2
 800827a:	bf28      	it	cs
 800827c:	eba0 3001 	subcs.w	r0, r0, r1, lsl #12
 8008280:	ebb0 2fc1 	cmp.w	r0, r1, lsl #11
 8008284:	bf00      	nop
 8008286:	eb42 0202 	adc.w	r2, r2, r2
 800828a:	bf28      	it	cs
 800828c:	eba0 20c1 	subcs.w	r0, r0, r1, lsl #11
 8008290:	ebb0 2f81 	cmp.w	r0, r1, lsl #10
 8008294:	bf00      	nop
 8008296:	eb42 0202 	adc.w	r2, r2, r2
 800829a:	bf28      	it	cs
 800829c:	eba0 2081 	subcs.w	r0, r0, r1, lsl #10
 80082a0:	ebb0 2f41 	cmp.w	r0, r1, lsl #9
 80082a4:	bf00      	nop
 80082a6:	eb42 0202 	adc.w	r2, r2, r2
 80082aa:	bf28      	it	cs
 80082ac:	eba0 2041 	subcs.w	r0, r0, r1, lsl #9
 80082b0:	ebb0 2f01 	cmp.w	r0, r1, lsl #8
 80082b4:	bf00      	nop
 80082b6:	eb42 0202 	adc.w	r2, r2, r2
 80082ba:	bf28      	it	cs
 80082bc:	eba0 2001 	subcs.w	r0, r0, r1, lsl #8
 80082c0:	ebb0 1fc1 	cmp.w	r0, r1, lsl #7
 80082c4:	bf00      	nop
 80082c6:	eb42 0202 	adc.w	r2, r2, r2
 80082ca:	bf28      	it	cs
 80082cc:	eba0 10c1 	subcs.w	r0, r0, r1, lsl #7
 80082d0:	ebb0 1f81 	cmp.w	r0, r1, lsl #6
 80082d4:	bf00      	nop
 80082d6:	eb42 0202 	adc.w	r2, r2, r2
 80082da:	bf28      	it	cs
 80082dc:	eba0 1081 	subcs.w	r0, r0, r1, lsl #6
 80082e0:	ebb0 1f41 	cmp.w	r0, r1, lsl #5
 80082e4:	bf00      	nop
 80082e6:	eb42 0202 	adc.w	r2, r2, r2
 80082ea:	bf28      	it	cs
 80082ec:	eba0 1041 	subcs.w	r0, r0, r1, lsl #5
 80082f0:	ebb0 1f01 	cmp.w	r0, r1, lsl #4
 80082f4:	bf00      	nop
 80082f6:	eb42 0202 	adc.w	r2, r2, r2
 80082fa:	bf28      	it	cs
 80082fc:	eba0 1001 	subcs.w	r0, r0, r1, lsl #4
 8008300:	ebb0 0fc1 	cmp.w	r0, r1, lsl #3
 8008304:	bf00      	nop
 8008306:	eb42 0202 	adc.w	r2, r2, r2
 800830a:	bf28      	it	cs
 800830c:	eba0 00c1 	subcs.w	r0, r0, r1, lsl #3
 8008310:	ebb0 0f81 	cmp.w	r0, r1, lsl #2
 8008314:	bf00      	nop
 8008316:	eb42 0202 	adc.w	r2, r2, r2
 800831a:	bf28      	it	cs
 800831c:	eba0 0081 	subcs.w	r0, r0, r1, lsl #2
 8008320:	ebb0 0f41 	cmp.w	r0, r1, lsl #1
 8008324:	bf00      	nop
 8008326:	eb42 0202 	adc.w	r2, r2, r2
 800832a:	bf28      	it	cs
 800832c:	eba0 0041 	subcs.w	r0, r0, r1, lsl #1
 8008330:	ebb0 0f01 	cmp.w	r0, r1
 8008334:	bf00      	nop
 8008336:	eb42 0202 	adc.w	r2, r2, r2
 800833a:	bf28      	it	cs
 800833c:	eba0 0001 	subcs.w	r0, r0, r1
 8008340:	4610      	mov	r0, r2
 8008342:	4770      	bx	lr
 8008344:	bf0c      	ite	eq
 8008346:	2001      	moveq	r0, #1
 8008348:	2000      	movne	r0, #0
 800834a:	4770      	bx	lr
 800834c:	fab1 f281 	clz	r2, r1
 8008350:	f1c2 021f 	rsb	r2, r2, #31
 8008354:	fa20 f002 	lsr.w	r0, r0, r2
 8008358:	4770      	bx	lr
 800835a:	b108      	cbz	r0, 8008360 <__aeabi_uidiv+0x258>
 800835c:	f04f 30ff 	mov.w	r0, #4294967295
 8008360:	f000 b80e 	b.w	8008380 <__aeabi_idiv0>

08008364 <__aeabi_uidivmod>:
 8008364:	2900      	cmp	r1, #0
 8008366:	d0f8      	beq.n	800835a <__aeabi_uidiv+0x252>
 8008368:	e92d 4003 	stmdb	sp!, {r0, r1, lr}
 800836c:	f7ff fecc 	bl	8008108 <__aeabi_uidiv>
 8008370:	e8bd 4006 	ldmia.w	sp!, {r1, r2, lr}
 8008374:	fb02 f300 	mul.w	r3, r2, r0
 8008378:	eba1 0103 	sub.w	r1, r1, r3
 800837c:	4770      	bx	lr
 800837e:	bf00      	nop

08008380 <__aeabi_idiv0>:
 8008380:	4770      	bx	lr
 8008382:	bf00      	nop

08008384 <__aeabi_drsub>:
 8008384:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8008388:	e002      	b.n	8008390 <__adddf3>
 800838a:	bf00      	nop

0800838c <__aeabi_dsub>:
 800838c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08008390 <__adddf3>:
 8008390:	b530      	push	{r4, r5, lr}
 8008392:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8008396:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800839a:	ea94 0f05 	teq	r4, r5
 800839e:	bf08      	it	eq
 80083a0:	ea90 0f02 	teqeq	r0, r2
 80083a4:	bf1f      	itttt	ne
 80083a6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80083aa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80083ae:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80083b2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80083b6:	f000 80e2 	beq.w	800857e <__adddf3+0x1ee>
 80083ba:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80083be:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80083c2:	bfb8      	it	lt
 80083c4:	426d      	neglt	r5, r5
 80083c6:	dd0c      	ble.n	80083e2 <__adddf3+0x52>
 80083c8:	442c      	add	r4, r5
 80083ca:	ea80 0202 	eor.w	r2, r0, r2
 80083ce:	ea81 0303 	eor.w	r3, r1, r3
 80083d2:	ea82 0000 	eor.w	r0, r2, r0
 80083d6:	ea83 0101 	eor.w	r1, r3, r1
 80083da:	ea80 0202 	eor.w	r2, r0, r2
 80083de:	ea81 0303 	eor.w	r3, r1, r3
 80083e2:	2d36      	cmp	r5, #54	; 0x36
 80083e4:	bf88      	it	hi
 80083e6:	bd30      	pophi	{r4, r5, pc}
 80083e8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80083ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80083f0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80083f4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80083f8:	d002      	beq.n	8008400 <__adddf3+0x70>
 80083fa:	4240      	negs	r0, r0
 80083fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008400:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8008404:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008408:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800840c:	d002      	beq.n	8008414 <__adddf3+0x84>
 800840e:	4252      	negs	r2, r2
 8008410:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008414:	ea94 0f05 	teq	r4, r5
 8008418:	f000 80a7 	beq.w	800856a <__adddf3+0x1da>
 800841c:	f1a4 0401 	sub.w	r4, r4, #1
 8008420:	f1d5 0e20 	rsbs	lr, r5, #32
 8008424:	db0d      	blt.n	8008442 <__adddf3+0xb2>
 8008426:	fa02 fc0e 	lsl.w	ip, r2, lr
 800842a:	fa22 f205 	lsr.w	r2, r2, r5
 800842e:	1880      	adds	r0, r0, r2
 8008430:	f141 0100 	adc.w	r1, r1, #0
 8008434:	fa03 f20e 	lsl.w	r2, r3, lr
 8008438:	1880      	adds	r0, r0, r2
 800843a:	fa43 f305 	asr.w	r3, r3, r5
 800843e:	4159      	adcs	r1, r3
 8008440:	e00e      	b.n	8008460 <__adddf3+0xd0>
 8008442:	f1a5 0520 	sub.w	r5, r5, #32
 8008446:	f10e 0e20 	add.w	lr, lr, #32
 800844a:	2a01      	cmp	r2, #1
 800844c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8008450:	bf28      	it	cs
 8008452:	f04c 0c02 	orrcs.w	ip, ip, #2
 8008456:	fa43 f305 	asr.w	r3, r3, r5
 800845a:	18c0      	adds	r0, r0, r3
 800845c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8008460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8008464:	d507      	bpl.n	8008476 <__adddf3+0xe6>
 8008466:	f04f 0e00 	mov.w	lr, #0
 800846a:	f1dc 0c00 	rsbs	ip, ip, #0
 800846e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8008472:	eb6e 0101 	sbc.w	r1, lr, r1
 8008476:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800847a:	d31b      	bcc.n	80084b4 <__adddf3+0x124>
 800847c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8008480:	d30c      	bcc.n	800849c <__adddf3+0x10c>
 8008482:	0849      	lsrs	r1, r1, #1
 8008484:	ea5f 0030 	movs.w	r0, r0, rrx
 8008488:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800848c:	f104 0401 	add.w	r4, r4, #1
 8008490:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8008494:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8008498:	f080 809a 	bcs.w	80085d0 <__adddf3+0x240>
 800849c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80084a0:	bf08      	it	eq
 80084a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80084a6:	f150 0000 	adcs.w	r0, r0, #0
 80084aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80084ae:	ea41 0105 	orr.w	r1, r1, r5
 80084b2:	bd30      	pop	{r4, r5, pc}
 80084b4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80084b8:	4140      	adcs	r0, r0
 80084ba:	eb41 0101 	adc.w	r1, r1, r1
 80084be:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80084c2:	f1a4 0401 	sub.w	r4, r4, #1
 80084c6:	d1e9      	bne.n	800849c <__adddf3+0x10c>
 80084c8:	f091 0f00 	teq	r1, #0
 80084cc:	bf04      	itt	eq
 80084ce:	4601      	moveq	r1, r0
 80084d0:	2000      	moveq	r0, #0
 80084d2:	fab1 f381 	clz	r3, r1
 80084d6:	bf08      	it	eq
 80084d8:	3320      	addeq	r3, #32
 80084da:	f1a3 030b 	sub.w	r3, r3, #11
 80084de:	f1b3 0220 	subs.w	r2, r3, #32
 80084e2:	da0c      	bge.n	80084fe <__adddf3+0x16e>
 80084e4:	320c      	adds	r2, #12
 80084e6:	dd08      	ble.n	80084fa <__adddf3+0x16a>
 80084e8:	f102 0c14 	add.w	ip, r2, #20
 80084ec:	f1c2 020c 	rsb	r2, r2, #12
 80084f0:	fa01 f00c 	lsl.w	r0, r1, ip
 80084f4:	fa21 f102 	lsr.w	r1, r1, r2
 80084f8:	e00c      	b.n	8008514 <__adddf3+0x184>
 80084fa:	f102 0214 	add.w	r2, r2, #20
 80084fe:	bfd8      	it	le
 8008500:	f1c2 0c20 	rsble	ip, r2, #32
 8008504:	fa01 f102 	lsl.w	r1, r1, r2
 8008508:	fa20 fc0c 	lsr.w	ip, r0, ip
 800850c:	bfdc      	itt	le
 800850e:	ea41 010c 	orrle.w	r1, r1, ip
 8008512:	4090      	lslle	r0, r2
 8008514:	1ae4      	subs	r4, r4, r3
 8008516:	bfa2      	ittt	ge
 8008518:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800851c:	4329      	orrge	r1, r5
 800851e:	bd30      	popge	{r4, r5, pc}
 8008520:	ea6f 0404 	mvn.w	r4, r4
 8008524:	3c1f      	subs	r4, #31
 8008526:	da1c      	bge.n	8008562 <__adddf3+0x1d2>
 8008528:	340c      	adds	r4, #12
 800852a:	dc0e      	bgt.n	800854a <__adddf3+0x1ba>
 800852c:	f104 0414 	add.w	r4, r4, #20
 8008530:	f1c4 0220 	rsb	r2, r4, #32
 8008534:	fa20 f004 	lsr.w	r0, r0, r4
 8008538:	fa01 f302 	lsl.w	r3, r1, r2
 800853c:	ea40 0003 	orr.w	r0, r0, r3
 8008540:	fa21 f304 	lsr.w	r3, r1, r4
 8008544:	ea45 0103 	orr.w	r1, r5, r3
 8008548:	bd30      	pop	{r4, r5, pc}
 800854a:	f1c4 040c 	rsb	r4, r4, #12
 800854e:	f1c4 0220 	rsb	r2, r4, #32
 8008552:	fa20 f002 	lsr.w	r0, r0, r2
 8008556:	fa01 f304 	lsl.w	r3, r1, r4
 800855a:	ea40 0003 	orr.w	r0, r0, r3
 800855e:	4629      	mov	r1, r5
 8008560:	bd30      	pop	{r4, r5, pc}
 8008562:	fa21 f004 	lsr.w	r0, r1, r4
 8008566:	4629      	mov	r1, r5
 8008568:	bd30      	pop	{r4, r5, pc}
 800856a:	f094 0f00 	teq	r4, #0
 800856e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8008572:	bf06      	itte	eq
 8008574:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8008578:	3401      	addeq	r4, #1
 800857a:	3d01      	subne	r5, #1
 800857c:	e74e      	b.n	800841c <__adddf3+0x8c>
 800857e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8008582:	bf18      	it	ne
 8008584:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008588:	d029      	beq.n	80085de <__adddf3+0x24e>
 800858a:	ea94 0f05 	teq	r4, r5
 800858e:	bf08      	it	eq
 8008590:	ea90 0f02 	teqeq	r0, r2
 8008594:	d005      	beq.n	80085a2 <__adddf3+0x212>
 8008596:	ea54 0c00 	orrs.w	ip, r4, r0
 800859a:	bf04      	itt	eq
 800859c:	4619      	moveq	r1, r3
 800859e:	4610      	moveq	r0, r2
 80085a0:	bd30      	pop	{r4, r5, pc}
 80085a2:	ea91 0f03 	teq	r1, r3
 80085a6:	bf1e      	ittt	ne
 80085a8:	2100      	movne	r1, #0
 80085aa:	2000      	movne	r0, #0
 80085ac:	bd30      	popne	{r4, r5, pc}
 80085ae:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80085b2:	d105      	bne.n	80085c0 <__adddf3+0x230>
 80085b4:	0040      	lsls	r0, r0, #1
 80085b6:	4149      	adcs	r1, r1
 80085b8:	bf28      	it	cs
 80085ba:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80085be:	bd30      	pop	{r4, r5, pc}
 80085c0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80085c4:	bf3c      	itt	cc
 80085c6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80085ca:	bd30      	popcc	{r4, r5, pc}
 80085cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80085d0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80085d4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80085d8:	f04f 0000 	mov.w	r0, #0
 80085dc:	bd30      	pop	{r4, r5, pc}
 80085de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80085e2:	bf1a      	itte	ne
 80085e4:	4619      	movne	r1, r3
 80085e6:	4610      	movne	r0, r2
 80085e8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80085ec:	bf1c      	itt	ne
 80085ee:	460b      	movne	r3, r1
 80085f0:	4602      	movne	r2, r0
 80085f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80085f6:	bf06      	itte	eq
 80085f8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80085fc:	ea91 0f03 	teqeq	r1, r3
 8008600:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8008604:	bd30      	pop	{r4, r5, pc}
 8008606:	bf00      	nop

08008608 <__aeabi_ui2d>:
 8008608:	f090 0f00 	teq	r0, #0
 800860c:	bf04      	itt	eq
 800860e:	2100      	moveq	r1, #0
 8008610:	4770      	bxeq	lr
 8008612:	b530      	push	{r4, r5, lr}
 8008614:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008618:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800861c:	f04f 0500 	mov.w	r5, #0
 8008620:	f04f 0100 	mov.w	r1, #0
 8008624:	e750      	b.n	80084c8 <__adddf3+0x138>
 8008626:	bf00      	nop

08008628 <__aeabi_i2d>:
 8008628:	f090 0f00 	teq	r0, #0
 800862c:	bf04      	itt	eq
 800862e:	2100      	moveq	r1, #0
 8008630:	4770      	bxeq	lr
 8008632:	b530      	push	{r4, r5, lr}
 8008634:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008638:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800863c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8008640:	bf48      	it	mi
 8008642:	4240      	negmi	r0, r0
 8008644:	f04f 0100 	mov.w	r1, #0
 8008648:	e73e      	b.n	80084c8 <__adddf3+0x138>
 800864a:	bf00      	nop

0800864c <__aeabi_f2d>:
 800864c:	0042      	lsls	r2, r0, #1
 800864e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8008652:	ea4f 0131 	mov.w	r1, r1, rrx
 8008656:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800865a:	bf1f      	itttt	ne
 800865c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8008660:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8008664:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8008668:	4770      	bxne	lr
 800866a:	f092 0f00 	teq	r2, #0
 800866e:	bf14      	ite	ne
 8008670:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8008674:	4770      	bxeq	lr
 8008676:	b530      	push	{r4, r5, lr}
 8008678:	f44f 7460 	mov.w	r4, #896	; 0x380
 800867c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8008680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008684:	e720      	b.n	80084c8 <__adddf3+0x138>
 8008686:	bf00      	nop

08008688 <__aeabi_ul2d>:
 8008688:	ea50 0201 	orrs.w	r2, r0, r1
 800868c:	bf08      	it	eq
 800868e:	4770      	bxeq	lr
 8008690:	b530      	push	{r4, r5, lr}
 8008692:	f04f 0500 	mov.w	r5, #0
 8008696:	e00a      	b.n	80086ae <__aeabi_l2d+0x16>

08008698 <__aeabi_l2d>:
 8008698:	ea50 0201 	orrs.w	r2, r0, r1
 800869c:	bf08      	it	eq
 800869e:	4770      	bxeq	lr
 80086a0:	b530      	push	{r4, r5, lr}
 80086a2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80086a6:	d502      	bpl.n	80086ae <__aeabi_l2d+0x16>
 80086a8:	4240      	negs	r0, r0
 80086aa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80086ae:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80086b2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80086b6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80086ba:	f43f aedc 	beq.w	8008476 <__adddf3+0xe6>
 80086be:	f04f 0203 	mov.w	r2, #3
 80086c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80086c6:	bf18      	it	ne
 80086c8:	3203      	addne	r2, #3
 80086ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80086ce:	bf18      	it	ne
 80086d0:	3203      	addne	r2, #3
 80086d2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80086d6:	f1c2 0320 	rsb	r3, r2, #32
 80086da:	fa00 fc03 	lsl.w	ip, r0, r3
 80086de:	fa20 f002 	lsr.w	r0, r0, r2
 80086e2:	fa01 fe03 	lsl.w	lr, r1, r3
 80086e6:	ea40 000e 	orr.w	r0, r0, lr
 80086ea:	fa21 f102 	lsr.w	r1, r1, r2
 80086ee:	4414      	add	r4, r2
 80086f0:	e6c1      	b.n	8008476 <__adddf3+0xe6>
 80086f2:	bf00      	nop

080086f4 <__aeabi_dmul>:
 80086f4:	b570      	push	{r4, r5, r6, lr}
 80086f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80086fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80086fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008702:	bf1d      	ittte	ne
 8008704:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8008708:	ea94 0f0c 	teqne	r4, ip
 800870c:	ea95 0f0c 	teqne	r5, ip
 8008710:	f000 f8de 	bleq	80088d0 <__aeabi_dmul+0x1dc>
 8008714:	442c      	add	r4, r5
 8008716:	ea81 0603 	eor.w	r6, r1, r3
 800871a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800871e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8008722:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8008726:	bf18      	it	ne
 8008728:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800872c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008730:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008734:	d038      	beq.n	80087a8 <__aeabi_dmul+0xb4>
 8008736:	fba0 ce02 	umull	ip, lr, r0, r2
 800873a:	f04f 0500 	mov.w	r5, #0
 800873e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8008742:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8008746:	fbe0 e503 	umlal	lr, r5, r0, r3
 800874a:	f04f 0600 	mov.w	r6, #0
 800874e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8008752:	f09c 0f00 	teq	ip, #0
 8008756:	bf18      	it	ne
 8008758:	f04e 0e01 	orrne.w	lr, lr, #1
 800875c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8008760:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8008764:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8008768:	d204      	bcs.n	8008774 <__aeabi_dmul+0x80>
 800876a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800876e:	416d      	adcs	r5, r5
 8008770:	eb46 0606 	adc.w	r6, r6, r6
 8008774:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8008778:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800877c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8008780:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8008784:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8008788:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800878c:	bf88      	it	hi
 800878e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8008792:	d81e      	bhi.n	80087d2 <__aeabi_dmul+0xde>
 8008794:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8008798:	bf08      	it	eq
 800879a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800879e:	f150 0000 	adcs.w	r0, r0, #0
 80087a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80087a6:	bd70      	pop	{r4, r5, r6, pc}
 80087a8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80087ac:	ea46 0101 	orr.w	r1, r6, r1
 80087b0:	ea40 0002 	orr.w	r0, r0, r2
 80087b4:	ea81 0103 	eor.w	r1, r1, r3
 80087b8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80087bc:	bfc2      	ittt	gt
 80087be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80087c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80087c6:	bd70      	popgt	{r4, r5, r6, pc}
 80087c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80087cc:	f04f 0e00 	mov.w	lr, #0
 80087d0:	3c01      	subs	r4, #1
 80087d2:	f300 80ab 	bgt.w	800892c <__aeabi_dmul+0x238>
 80087d6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80087da:	bfde      	ittt	le
 80087dc:	2000      	movle	r0, #0
 80087de:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80087e2:	bd70      	pople	{r4, r5, r6, pc}
 80087e4:	f1c4 0400 	rsb	r4, r4, #0
 80087e8:	3c20      	subs	r4, #32
 80087ea:	da35      	bge.n	8008858 <__aeabi_dmul+0x164>
 80087ec:	340c      	adds	r4, #12
 80087ee:	dc1b      	bgt.n	8008828 <__aeabi_dmul+0x134>
 80087f0:	f104 0414 	add.w	r4, r4, #20
 80087f4:	f1c4 0520 	rsb	r5, r4, #32
 80087f8:	fa00 f305 	lsl.w	r3, r0, r5
 80087fc:	fa20 f004 	lsr.w	r0, r0, r4
 8008800:	fa01 f205 	lsl.w	r2, r1, r5
 8008804:	ea40 0002 	orr.w	r0, r0, r2
 8008808:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800880c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008810:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008814:	fa21 f604 	lsr.w	r6, r1, r4
 8008818:	eb42 0106 	adc.w	r1, r2, r6
 800881c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008820:	bf08      	it	eq
 8008822:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008826:	bd70      	pop	{r4, r5, r6, pc}
 8008828:	f1c4 040c 	rsb	r4, r4, #12
 800882c:	f1c4 0520 	rsb	r5, r4, #32
 8008830:	fa00 f304 	lsl.w	r3, r0, r4
 8008834:	fa20 f005 	lsr.w	r0, r0, r5
 8008838:	fa01 f204 	lsl.w	r2, r1, r4
 800883c:	ea40 0002 	orr.w	r0, r0, r2
 8008840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008844:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008848:	f141 0100 	adc.w	r1, r1, #0
 800884c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008850:	bf08      	it	eq
 8008852:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008856:	bd70      	pop	{r4, r5, r6, pc}
 8008858:	f1c4 0520 	rsb	r5, r4, #32
 800885c:	fa00 f205 	lsl.w	r2, r0, r5
 8008860:	ea4e 0e02 	orr.w	lr, lr, r2
 8008864:	fa20 f304 	lsr.w	r3, r0, r4
 8008868:	fa01 f205 	lsl.w	r2, r1, r5
 800886c:	ea43 0302 	orr.w	r3, r3, r2
 8008870:	fa21 f004 	lsr.w	r0, r1, r4
 8008874:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008878:	fa21 f204 	lsr.w	r2, r1, r4
 800887c:	ea20 0002 	bic.w	r0, r0, r2
 8008880:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8008884:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008888:	bf08      	it	eq
 800888a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800888e:	bd70      	pop	{r4, r5, r6, pc}
 8008890:	f094 0f00 	teq	r4, #0
 8008894:	d10f      	bne.n	80088b6 <__aeabi_dmul+0x1c2>
 8008896:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800889a:	0040      	lsls	r0, r0, #1
 800889c:	eb41 0101 	adc.w	r1, r1, r1
 80088a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80088a4:	bf08      	it	eq
 80088a6:	3c01      	subeq	r4, #1
 80088a8:	d0f7      	beq.n	800889a <__aeabi_dmul+0x1a6>
 80088aa:	ea41 0106 	orr.w	r1, r1, r6
 80088ae:	f095 0f00 	teq	r5, #0
 80088b2:	bf18      	it	ne
 80088b4:	4770      	bxne	lr
 80088b6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80088ba:	0052      	lsls	r2, r2, #1
 80088bc:	eb43 0303 	adc.w	r3, r3, r3
 80088c0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80088c4:	bf08      	it	eq
 80088c6:	3d01      	subeq	r5, #1
 80088c8:	d0f7      	beq.n	80088ba <__aeabi_dmul+0x1c6>
 80088ca:	ea43 0306 	orr.w	r3, r3, r6
 80088ce:	4770      	bx	lr
 80088d0:	ea94 0f0c 	teq	r4, ip
 80088d4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80088d8:	bf18      	it	ne
 80088da:	ea95 0f0c 	teqne	r5, ip
 80088de:	d00c      	beq.n	80088fa <__aeabi_dmul+0x206>
 80088e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80088e4:	bf18      	it	ne
 80088e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80088ea:	d1d1      	bne.n	8008890 <__aeabi_dmul+0x19c>
 80088ec:	ea81 0103 	eor.w	r1, r1, r3
 80088f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80088f4:	f04f 0000 	mov.w	r0, #0
 80088f8:	bd70      	pop	{r4, r5, r6, pc}
 80088fa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80088fe:	bf06      	itte	eq
 8008900:	4610      	moveq	r0, r2
 8008902:	4619      	moveq	r1, r3
 8008904:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008908:	d019      	beq.n	800893e <__aeabi_dmul+0x24a>
 800890a:	ea94 0f0c 	teq	r4, ip
 800890e:	d102      	bne.n	8008916 <__aeabi_dmul+0x222>
 8008910:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8008914:	d113      	bne.n	800893e <__aeabi_dmul+0x24a>
 8008916:	ea95 0f0c 	teq	r5, ip
 800891a:	d105      	bne.n	8008928 <__aeabi_dmul+0x234>
 800891c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8008920:	bf1c      	itt	ne
 8008922:	4610      	movne	r0, r2
 8008924:	4619      	movne	r1, r3
 8008926:	d10a      	bne.n	800893e <__aeabi_dmul+0x24a>
 8008928:	ea81 0103 	eor.w	r1, r1, r3
 800892c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008930:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8008934:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008938:	f04f 0000 	mov.w	r0, #0
 800893c:	bd70      	pop	{r4, r5, r6, pc}
 800893e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8008942:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8008946:	bd70      	pop	{r4, r5, r6, pc}

08008948 <__aeabi_ddiv>:
 8008948:	b570      	push	{r4, r5, r6, lr}
 800894a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800894e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8008952:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008956:	bf1d      	ittte	ne
 8008958:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800895c:	ea94 0f0c 	teqne	r4, ip
 8008960:	ea95 0f0c 	teqne	r5, ip
 8008964:	f000 f8a7 	bleq	8008ab6 <__aeabi_ddiv+0x16e>
 8008968:	eba4 0405 	sub.w	r4, r4, r5
 800896c:	ea81 0e03 	eor.w	lr, r1, r3
 8008970:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008974:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8008978:	f000 8088 	beq.w	8008a8c <__aeabi_ddiv+0x144>
 800897c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008980:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8008984:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8008988:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800898c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8008990:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8008994:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8008998:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800899c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80089a0:	429d      	cmp	r5, r3
 80089a2:	bf08      	it	eq
 80089a4:	4296      	cmpeq	r6, r2
 80089a6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80089aa:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80089ae:	d202      	bcs.n	80089b6 <__aeabi_ddiv+0x6e>
 80089b0:	085b      	lsrs	r3, r3, #1
 80089b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80089b6:	1ab6      	subs	r6, r6, r2
 80089b8:	eb65 0503 	sbc.w	r5, r5, r3
 80089bc:	085b      	lsrs	r3, r3, #1
 80089be:	ea4f 0232 	mov.w	r2, r2, rrx
 80089c2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80089c6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80089ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80089ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80089d2:	bf22      	ittt	cs
 80089d4:	1ab6      	subcs	r6, r6, r2
 80089d6:	4675      	movcs	r5, lr
 80089d8:	ea40 000c 	orrcs.w	r0, r0, ip
 80089dc:	085b      	lsrs	r3, r3, #1
 80089de:	ea4f 0232 	mov.w	r2, r2, rrx
 80089e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80089e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80089ea:	bf22      	ittt	cs
 80089ec:	1ab6      	subcs	r6, r6, r2
 80089ee:	4675      	movcs	r5, lr
 80089f0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80089f4:	085b      	lsrs	r3, r3, #1
 80089f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80089fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80089fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008a02:	bf22      	ittt	cs
 8008a04:	1ab6      	subcs	r6, r6, r2
 8008a06:	4675      	movcs	r5, lr
 8008a08:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008a0c:	085b      	lsrs	r3, r3, #1
 8008a0e:	ea4f 0232 	mov.w	r2, r2, rrx
 8008a12:	ebb6 0e02 	subs.w	lr, r6, r2
 8008a16:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008a1a:	bf22      	ittt	cs
 8008a1c:	1ab6      	subcs	r6, r6, r2
 8008a1e:	4675      	movcs	r5, lr
 8008a20:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008a24:	ea55 0e06 	orrs.w	lr, r5, r6
 8008a28:	d018      	beq.n	8008a5c <__aeabi_ddiv+0x114>
 8008a2a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8008a2e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8008a32:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8008a36:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8008a3a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8008a3e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8008a42:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8008a46:	d1c0      	bne.n	80089ca <__aeabi_ddiv+0x82>
 8008a48:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008a4c:	d10b      	bne.n	8008a66 <__aeabi_ddiv+0x11e>
 8008a4e:	ea41 0100 	orr.w	r1, r1, r0
 8008a52:	f04f 0000 	mov.w	r0, #0
 8008a56:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8008a5a:	e7b6      	b.n	80089ca <__aeabi_ddiv+0x82>
 8008a5c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008a60:	bf04      	itt	eq
 8008a62:	4301      	orreq	r1, r0
 8008a64:	2000      	moveq	r0, #0
 8008a66:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8008a6a:	bf88      	it	hi
 8008a6c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8008a70:	f63f aeaf 	bhi.w	80087d2 <__aeabi_dmul+0xde>
 8008a74:	ebb5 0c03 	subs.w	ip, r5, r3
 8008a78:	bf04      	itt	eq
 8008a7a:	ebb6 0c02 	subseq.w	ip, r6, r2
 8008a7e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008a82:	f150 0000 	adcs.w	r0, r0, #0
 8008a86:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8008a8a:	bd70      	pop	{r4, r5, r6, pc}
 8008a8c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8008a90:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8008a94:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8008a98:	bfc2      	ittt	gt
 8008a9a:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008a9e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008aa2:	bd70      	popgt	{r4, r5, r6, pc}
 8008aa4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008aa8:	f04f 0e00 	mov.w	lr, #0
 8008aac:	3c01      	subs	r4, #1
 8008aae:	e690      	b.n	80087d2 <__aeabi_dmul+0xde>
 8008ab0:	ea45 0e06 	orr.w	lr, r5, r6
 8008ab4:	e68d      	b.n	80087d2 <__aeabi_dmul+0xde>
 8008ab6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8008aba:	ea94 0f0c 	teq	r4, ip
 8008abe:	bf08      	it	eq
 8008ac0:	ea95 0f0c 	teqeq	r5, ip
 8008ac4:	f43f af3b 	beq.w	800893e <__aeabi_dmul+0x24a>
 8008ac8:	ea94 0f0c 	teq	r4, ip
 8008acc:	d10a      	bne.n	8008ae4 <__aeabi_ddiv+0x19c>
 8008ace:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008ad2:	f47f af34 	bne.w	800893e <__aeabi_dmul+0x24a>
 8008ad6:	ea95 0f0c 	teq	r5, ip
 8008ada:	f47f af25 	bne.w	8008928 <__aeabi_dmul+0x234>
 8008ade:	4610      	mov	r0, r2
 8008ae0:	4619      	mov	r1, r3
 8008ae2:	e72c      	b.n	800893e <__aeabi_dmul+0x24a>
 8008ae4:	ea95 0f0c 	teq	r5, ip
 8008ae8:	d106      	bne.n	8008af8 <__aeabi_ddiv+0x1b0>
 8008aea:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008aee:	f43f aefd 	beq.w	80088ec <__aeabi_dmul+0x1f8>
 8008af2:	4610      	mov	r0, r2
 8008af4:	4619      	mov	r1, r3
 8008af6:	e722      	b.n	800893e <__aeabi_dmul+0x24a>
 8008af8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008afc:	bf18      	it	ne
 8008afe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008b02:	f47f aec5 	bne.w	8008890 <__aeabi_dmul+0x19c>
 8008b06:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8008b0a:	f47f af0d 	bne.w	8008928 <__aeabi_dmul+0x234>
 8008b0e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8008b12:	f47f aeeb 	bne.w	80088ec <__aeabi_dmul+0x1f8>
 8008b16:	e712      	b.n	800893e <__aeabi_dmul+0x24a>

08008b18 <__gedf2>:
 8008b18:	f04f 3cff 	mov.w	ip, #4294967295
 8008b1c:	e006      	b.n	8008b2c <__cmpdf2+0x4>
 8008b1e:	bf00      	nop

08008b20 <__ledf2>:
 8008b20:	f04f 0c01 	mov.w	ip, #1
 8008b24:	e002      	b.n	8008b2c <__cmpdf2+0x4>
 8008b26:	bf00      	nop

08008b28 <__cmpdf2>:
 8008b28:	f04f 0c01 	mov.w	ip, #1
 8008b2c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8008b30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008b34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008b38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008b3c:	bf18      	it	ne
 8008b3e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8008b42:	d01b      	beq.n	8008b7c <__cmpdf2+0x54>
 8008b44:	b001      	add	sp, #4
 8008b46:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8008b4a:	bf0c      	ite	eq
 8008b4c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8008b50:	ea91 0f03 	teqne	r1, r3
 8008b54:	bf02      	ittt	eq
 8008b56:	ea90 0f02 	teqeq	r0, r2
 8008b5a:	2000      	moveq	r0, #0
 8008b5c:	4770      	bxeq	lr
 8008b5e:	f110 0f00 	cmn.w	r0, #0
 8008b62:	ea91 0f03 	teq	r1, r3
 8008b66:	bf58      	it	pl
 8008b68:	4299      	cmppl	r1, r3
 8008b6a:	bf08      	it	eq
 8008b6c:	4290      	cmpeq	r0, r2
 8008b6e:	bf2c      	ite	cs
 8008b70:	17d8      	asrcs	r0, r3, #31
 8008b72:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8008b76:	f040 0001 	orr.w	r0, r0, #1
 8008b7a:	4770      	bx	lr
 8008b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008b84:	d102      	bne.n	8008b8c <__cmpdf2+0x64>
 8008b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8008b8a:	d107      	bne.n	8008b9c <__cmpdf2+0x74>
 8008b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008b94:	d1d6      	bne.n	8008b44 <__cmpdf2+0x1c>
 8008b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8008b9a:	d0d3      	beq.n	8008b44 <__cmpdf2+0x1c>
 8008b9c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8008ba0:	4770      	bx	lr
 8008ba2:	bf00      	nop

08008ba4 <__aeabi_cdrcmple>:
 8008ba4:	4684      	mov	ip, r0
 8008ba6:	4610      	mov	r0, r2
 8008ba8:	4662      	mov	r2, ip
 8008baa:	468c      	mov	ip, r1
 8008bac:	4619      	mov	r1, r3
 8008bae:	4663      	mov	r3, ip
 8008bb0:	e000      	b.n	8008bb4 <__aeabi_cdcmpeq>
 8008bb2:	bf00      	nop

08008bb4 <__aeabi_cdcmpeq>:
 8008bb4:	b501      	push	{r0, lr}
 8008bb6:	f7ff ffb7 	bl	8008b28 <__cmpdf2>
 8008bba:	2800      	cmp	r0, #0
 8008bbc:	bf48      	it	mi
 8008bbe:	f110 0f00 	cmnmi.w	r0, #0
 8008bc2:	bd01      	pop	{r0, pc}

08008bc4 <__aeabi_dcmpeq>:
 8008bc4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008bc8:	f7ff fff4 	bl	8008bb4 <__aeabi_cdcmpeq>
 8008bcc:	bf0c      	ite	eq
 8008bce:	2001      	moveq	r0, #1
 8008bd0:	2000      	movne	r0, #0
 8008bd2:	f85d fb08 	ldr.w	pc, [sp], #8
 8008bd6:	bf00      	nop

08008bd8 <__aeabi_dcmplt>:
 8008bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008bdc:	f7ff ffea 	bl	8008bb4 <__aeabi_cdcmpeq>
 8008be0:	bf34      	ite	cc
 8008be2:	2001      	movcc	r0, #1
 8008be4:	2000      	movcs	r0, #0
 8008be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8008bea:	bf00      	nop

08008bec <__aeabi_dcmple>:
 8008bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008bf0:	f7ff ffe0 	bl	8008bb4 <__aeabi_cdcmpeq>
 8008bf4:	bf94      	ite	ls
 8008bf6:	2001      	movls	r0, #1
 8008bf8:	2000      	movhi	r0, #0
 8008bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8008bfe:	bf00      	nop

08008c00 <__aeabi_dcmpge>:
 8008c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008c04:	f7ff ffce 	bl	8008ba4 <__aeabi_cdrcmple>
 8008c08:	bf94      	ite	ls
 8008c0a:	2001      	movls	r0, #1
 8008c0c:	2000      	movhi	r0, #0
 8008c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008c12:	bf00      	nop

08008c14 <__aeabi_dcmpgt>:
 8008c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008c18:	f7ff ffc4 	bl	8008ba4 <__aeabi_cdrcmple>
 8008c1c:	bf34      	ite	cc
 8008c1e:	2001      	movcc	r0, #1
 8008c20:	2000      	movcs	r0, #0
 8008c22:	f85d fb08 	ldr.w	pc, [sp], #8
 8008c26:	bf00      	nop

08008c28 <__aeabi_d2iz>:
 8008c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008c2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8008c30:	d215      	bcs.n	8008c5e <__aeabi_d2iz+0x36>
 8008c32:	d511      	bpl.n	8008c58 <__aeabi_d2iz+0x30>
 8008c34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8008c38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8008c3c:	d912      	bls.n	8008c64 <__aeabi_d2iz+0x3c>
 8008c3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008c42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008c46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8008c4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008c4e:	fa23 f002 	lsr.w	r0, r3, r2
 8008c52:	bf18      	it	ne
 8008c54:	4240      	negne	r0, r0
 8008c56:	4770      	bx	lr
 8008c58:	f04f 0000 	mov.w	r0, #0
 8008c5c:	4770      	bx	lr
 8008c5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008c62:	d105      	bne.n	8008c70 <__aeabi_d2iz+0x48>
 8008c64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8008c68:	bf08      	it	eq
 8008c6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8008c6e:	4770      	bx	lr
 8008c70:	f04f 0000 	mov.w	r0, #0
 8008c74:	4770      	bx	lr
 8008c76:	bf00      	nop

08008c78 <__aeabi_uldivmod>:
 8008c78:	b94b      	cbnz	r3, 8008c8e <__aeabi_uldivmod+0x16>
 8008c7a:	b942      	cbnz	r2, 8008c8e <__aeabi_uldivmod+0x16>
 8008c7c:	2900      	cmp	r1, #0
 8008c7e:	bf08      	it	eq
 8008c80:	2800      	cmpeq	r0, #0
 8008c82:	d002      	beq.n	8008c8a <__aeabi_uldivmod+0x12>
 8008c84:	f04f 31ff 	mov.w	r1, #4294967295
 8008c88:	4608      	mov	r0, r1
 8008c8a:	f7ff bb79 	b.w	8008380 <__aeabi_idiv0>
 8008c8e:	b082      	sub	sp, #8
 8008c90:	46ec      	mov	ip, sp
 8008c92:	e92d 5000 	stmdb	sp!, {ip, lr}
 8008c96:	f000 f81d 	bl	8008cd4 <__gnu_uldivmod_helper>
 8008c9a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008c9e:	b002      	add	sp, #8
 8008ca0:	bc0c      	pop	{r2, r3}
 8008ca2:	4770      	bx	lr

08008ca4 <__gnu_ldivmod_helper>:
 8008ca4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ca8:	4690      	mov	r8, r2
 8008caa:	4699      	mov	r9, r3
 8008cac:	4606      	mov	r6, r0
 8008cae:	460f      	mov	r7, r1
 8008cb0:	f000 f828 	bl	8008d04 <__divdi3>
 8008cb4:	9b08      	ldr	r3, [sp, #32]
 8008cb6:	fba8 4500 	umull	r4, r5, r8, r0
 8008cba:	fb08 f801 	mul.w	r8, r8, r1
 8008cbe:	fb00 8209 	mla	r2, r0, r9, r8
 8008cc2:	1955      	adds	r5, r2, r5
 8008cc4:	1b34      	subs	r4, r6, r4
 8008cc6:	eb67 0505 	sbc.w	r5, r7, r5
 8008cca:	e9c3 4500 	strd	r4, r5, [r3]
 8008cce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008cd2:	bf00      	nop

08008cd4 <__gnu_uldivmod_helper>:
 8008cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cd8:	4690      	mov	r8, r2
 8008cda:	4606      	mov	r6, r0
 8008cdc:	460f      	mov	r7, r1
 8008cde:	461d      	mov	r5, r3
 8008ce0:	f000 f9c6 	bl	8009070 <__udivdi3>
 8008ce4:	fb00 f305 	mul.w	r3, r0, r5
 8008ce8:	fba0 4508 	umull	r4, r5, r0, r8
 8008cec:	fb08 3801 	mla	r8, r8, r1, r3
 8008cf0:	9b06      	ldr	r3, [sp, #24]
 8008cf2:	4445      	add	r5, r8
 8008cf4:	1b34      	subs	r4, r6, r4
 8008cf6:	eb67 0505 	sbc.w	r5, r7, r5
 8008cfa:	e9c3 4500 	strd	r4, r5, [r3]
 8008cfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d02:	bf00      	nop

08008d04 <__divdi3>:
 8008d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d08:	2500      	movs	r5, #0
 8008d0a:	2900      	cmp	r1, #0
 8008d0c:	b085      	sub	sp, #20
 8008d0e:	461c      	mov	r4, r3
 8008d10:	f2c0 8149 	blt.w	8008fa6 <__divdi3+0x2a2>
 8008d14:	2c00      	cmp	r4, #0
 8008d16:	f2c0 8141 	blt.w	8008f9c <__divdi3+0x298>
 8008d1a:	468c      	mov	ip, r1
 8008d1c:	460f      	mov	r7, r1
 8008d1e:	4682      	mov	sl, r0
 8008d20:	4691      	mov	r9, r2
 8008d22:	4614      	mov	r4, r2
 8008d24:	4606      	mov	r6, r0
 8008d26:	4619      	mov	r1, r3
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d14b      	bne.n	8008dc4 <__divdi3+0xc0>
 8008d2c:	4562      	cmp	r2, ip
 8008d2e:	d959      	bls.n	8008de4 <__divdi3+0xe0>
 8008d30:	fab2 f382 	clz	r3, r2
 8008d34:	b143      	cbz	r3, 8008d48 <__divdi3+0x44>
 8008d36:	f1c3 0220 	rsb	r2, r3, #32
 8008d3a:	fa0c f703 	lsl.w	r7, ip, r3
 8008d3e:	fa20 f202 	lsr.w	r2, r0, r2
 8008d42:	409c      	lsls	r4, r3
 8008d44:	4317      	orrs	r7, r2
 8008d46:	409e      	lsls	r6, r3
 8008d48:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008d4c:	4638      	mov	r0, r7
 8008d4e:	4641      	mov	r1, r8
 8008d50:	fa1f f984 	uxth.w	r9, r4
 8008d54:	f7ff f9d8 	bl	8008108 <__aeabi_uidiv>
 8008d58:	4641      	mov	r1, r8
 8008d5a:	4682      	mov	sl, r0
 8008d5c:	4638      	mov	r0, r7
 8008d5e:	f7ff fb01 	bl	8008364 <__aeabi_uidivmod>
 8008d62:	0c33      	lsrs	r3, r6, #16
 8008d64:	fb09 f00a 	mul.w	r0, r9, sl
 8008d68:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8008d6c:	4288      	cmp	r0, r1
 8008d6e:	d90a      	bls.n	8008d86 <__divdi3+0x82>
 8008d70:	1909      	adds	r1, r1, r4
 8008d72:	f10a 32ff 	add.w	r2, sl, #4294967295
 8008d76:	d205      	bcs.n	8008d84 <__divdi3+0x80>
 8008d78:	4288      	cmp	r0, r1
 8008d7a:	bf84      	itt	hi
 8008d7c:	f1aa 0a02 	subhi.w	sl, sl, #2
 8008d80:	1909      	addhi	r1, r1, r4
 8008d82:	d800      	bhi.n	8008d86 <__divdi3+0x82>
 8008d84:	4692      	mov	sl, r2
 8008d86:	ebc0 0b01 	rsb	fp, r0, r1
 8008d8a:	4641      	mov	r1, r8
 8008d8c:	4658      	mov	r0, fp
 8008d8e:	b2b6      	uxth	r6, r6
 8008d90:	f7ff f9ba 	bl	8008108 <__aeabi_uidiv>
 8008d94:	4641      	mov	r1, r8
 8008d96:	4607      	mov	r7, r0
 8008d98:	4658      	mov	r0, fp
 8008d9a:	f7ff fae3 	bl	8008364 <__aeabi_uidivmod>
 8008d9e:	fb09 f907 	mul.w	r9, r9, r7
 8008da2:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
 8008da6:	4589      	cmp	r9, r1
 8008da8:	d907      	bls.n	8008dba <__divdi3+0xb6>
 8008daa:	1e7b      	subs	r3, r7, #1
 8008dac:	190c      	adds	r4, r1, r4
 8008dae:	f080 8157 	bcs.w	8009060 <__divdi3+0x35c>
 8008db2:	3f02      	subs	r7, #2
 8008db4:	45a1      	cmp	r9, r4
 8008db6:	f240 8153 	bls.w	8009060 <__divdi3+0x35c>
 8008dba:	ea47 400a 	orr.w	r0, r7, sl, lsl #16
 8008dbe:	f04f 0800 	mov.w	r8, #0
 8008dc2:	e004      	b.n	8008dce <__divdi3+0xca>
 8008dc4:	4563      	cmp	r3, ip
 8008dc6:	d958      	bls.n	8008e7a <__divdi3+0x176>
 8008dc8:	f04f 0800 	mov.w	r8, #0
 8008dcc:	4640      	mov	r0, r8
 8008dce:	4602      	mov	r2, r0
 8008dd0:	4643      	mov	r3, r8
 8008dd2:	b115      	cbz	r5, 8008dda <__divdi3+0xd6>
 8008dd4:	4252      	negs	r2, r2
 8008dd6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008dda:	4610      	mov	r0, r2
 8008ddc:	4619      	mov	r1, r3
 8008dde:	b005      	add	sp, #20
 8008de0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008de4:	b922      	cbnz	r2, 8008df0 <__divdi3+0xec>
 8008de6:	2001      	movs	r0, #1
 8008de8:	4611      	mov	r1, r2
 8008dea:	f7ff f98d 	bl	8008108 <__aeabi_uidiv>
 8008dee:	4604      	mov	r4, r0
 8008df0:	fab4 f384 	clz	r3, r4
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	f040 80dc 	bne.w	8008fb2 <__divdi3+0x2ae>
 8008dfa:	1b3f      	subs	r7, r7, r4
 8008dfc:	ea4f 4914 	mov.w	r9, r4, lsr #16
 8008e00:	fa1f fa84 	uxth.w	sl, r4
 8008e04:	f04f 0801 	mov.w	r8, #1
 8008e08:	4649      	mov	r1, r9
 8008e0a:	4638      	mov	r0, r7
 8008e0c:	f7ff f97c 	bl	8008108 <__aeabi_uidiv>
 8008e10:	4649      	mov	r1, r9
 8008e12:	4683      	mov	fp, r0
 8008e14:	4638      	mov	r0, r7
 8008e16:	f7ff faa5 	bl	8008364 <__aeabi_uidivmod>
 8008e1a:	0c33      	lsrs	r3, r6, #16
 8008e1c:	fb0a f00b 	mul.w	r0, sl, fp
 8008e20:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8008e24:	4288      	cmp	r0, r1
 8008e26:	d90b      	bls.n	8008e40 <__divdi3+0x13c>
 8008e28:	1909      	adds	r1, r1, r4
 8008e2a:	f10b 33ff 	add.w	r3, fp, #4294967295
 8008e2e:	f080 8115 	bcs.w	800905c <__divdi3+0x358>
 8008e32:	4288      	cmp	r0, r1
 8008e34:	bf84      	itt	hi
 8008e36:	f1ab 0b02 	subhi.w	fp, fp, #2
 8008e3a:	1909      	addhi	r1, r1, r4
 8008e3c:	f240 810e 	bls.w	800905c <__divdi3+0x358>
 8008e40:	1a0b      	subs	r3, r1, r0
 8008e42:	4649      	mov	r1, r9
 8008e44:	4618      	mov	r0, r3
 8008e46:	9301      	str	r3, [sp, #4]
 8008e48:	f7ff f95e 	bl	8008108 <__aeabi_uidiv>
 8008e4c:	9b01      	ldr	r3, [sp, #4]
 8008e4e:	4649      	mov	r1, r9
 8008e50:	b2b6      	uxth	r6, r6
 8008e52:	4607      	mov	r7, r0
 8008e54:	4618      	mov	r0, r3
 8008e56:	f7ff fa85 	bl	8008364 <__aeabi_uidivmod>
 8008e5a:	fb0a fa07 	mul.w	sl, sl, r7
 8008e5e:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
 8008e62:	458a      	cmp	sl, r1
 8008e64:	d906      	bls.n	8008e74 <__divdi3+0x170>
 8008e66:	1e7b      	subs	r3, r7, #1
 8008e68:	190c      	adds	r4, r1, r4
 8008e6a:	d202      	bcs.n	8008e72 <__divdi3+0x16e>
 8008e6c:	3f02      	subs	r7, #2
 8008e6e:	45a2      	cmp	sl, r4
 8008e70:	d800      	bhi.n	8008e74 <__divdi3+0x170>
 8008e72:	461f      	mov	r7, r3
 8008e74:	ea47 400b 	orr.w	r0, r7, fp, lsl #16
 8008e78:	e7a9      	b.n	8008dce <__divdi3+0xca>
 8008e7a:	fab3 f483 	clz	r4, r3
 8008e7e:	2c00      	cmp	r4, #0
 8008e80:	f000 80e4 	beq.w	800904c <__divdi3+0x348>
 8008e84:	f1c4 0320 	rsb	r3, r4, #32
 8008e88:	fa01 f104 	lsl.w	r1, r1, r4
 8008e8c:	fa22 fa03 	lsr.w	sl, r2, r3
 8008e90:	fa2c fb03 	lsr.w	fp, ip, r3
 8008e94:	ea4a 0a01 	orr.w	sl, sl, r1
 8008e98:	fa20 f803 	lsr.w	r8, r0, r3
 8008e9c:	fa0c fc04 	lsl.w	ip, ip, r4
 8008ea0:	4658      	mov	r0, fp
 8008ea2:	ea4f 471a 	mov.w	r7, sl, lsr #16
 8008ea6:	ea48 080c 	orr.w	r8, r8, ip
 8008eaa:	4639      	mov	r1, r7
 8008eac:	fa02 f904 	lsl.w	r9, r2, r4
 8008eb0:	f8cd 900c 	str.w	r9, [sp, #12]
 8008eb4:	f7ff f928 	bl	8008108 <__aeabi_uidiv>
 8008eb8:	4639      	mov	r1, r7
 8008eba:	4681      	mov	r9, r0
 8008ebc:	4658      	mov	r0, fp
 8008ebe:	f7ff fa51 	bl	8008364 <__aeabi_uidivmod>
 8008ec2:	fa1f fc8a 	uxth.w	ip, sl
 8008ec6:	ea4f 4318 	mov.w	r3, r8, lsr #16
 8008eca:	fb0c f009 	mul.w	r0, ip, r9
 8008ece:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008ed2:	4298      	cmp	r0, r3
 8008ed4:	d90c      	bls.n	8008ef0 <__divdi3+0x1ec>
 8008ed6:	eb13 030a 	adds.w	r3, r3, sl
 8008eda:	f109 31ff 	add.w	r1, r9, #4294967295
 8008ede:	f080 80c3 	bcs.w	8009068 <__divdi3+0x364>
 8008ee2:	4298      	cmp	r0, r3
 8008ee4:	bf84      	itt	hi
 8008ee6:	f1a9 0902 	subhi.w	r9, r9, #2
 8008eea:	4453      	addhi	r3, sl
 8008eec:	f240 80bc 	bls.w	8009068 <__divdi3+0x364>
 8008ef0:	1a1b      	subs	r3, r3, r0
 8008ef2:	4639      	mov	r1, r7
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f8cd c008 	str.w	ip, [sp, #8]
 8008efa:	9301      	str	r3, [sp, #4]
 8008efc:	f7ff f904 	bl	8008108 <__aeabi_uidiv>
 8008f00:	9b01      	ldr	r3, [sp, #4]
 8008f02:	4639      	mov	r1, r7
 8008f04:	fa1f f888 	uxth.w	r8, r8
 8008f08:	4683      	mov	fp, r0
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f7ff fa2a 	bl	8008364 <__aeabi_uidivmod>
 8008f10:	f8dd c008 	ldr.w	ip, [sp, #8]
 8008f14:	fb0c f30b 	mul.w	r3, ip, fp
 8008f18:	ea48 4101 	orr.w	r1, r8, r1, lsl #16
 8008f1c:	428b      	cmp	r3, r1
 8008f1e:	d90c      	bls.n	8008f3a <__divdi3+0x236>
 8008f20:	eb11 010a 	adds.w	r1, r1, sl
 8008f24:	f10b 30ff 	add.w	r0, fp, #4294967295
 8008f28:	f080 809c 	bcs.w	8009064 <__divdi3+0x360>
 8008f2c:	428b      	cmp	r3, r1
 8008f2e:	bf84      	itt	hi
 8008f30:	f1ab 0b02 	subhi.w	fp, fp, #2
 8008f34:	4451      	addhi	r1, sl
 8008f36:	f240 8095 	bls.w	8009064 <__divdi3+0x360>
 8008f3a:	9f03      	ldr	r7, [sp, #12]
 8008f3c:	ea4b 4009 	orr.w	r0, fp, r9, lsl #16
 8008f40:	1ac9      	subs	r1, r1, r3
 8008f42:	fa1f fc80 	uxth.w	ip, r0
 8008f46:	b2ba      	uxth	r2, r7
 8008f48:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8008f4c:	0c07      	lsrs	r7, r0, #16
 8008f4e:	fb02 f80c 	mul.w	r8, r2, ip
 8008f52:	fb02 f207 	mul.w	r2, r2, r7
 8008f56:	fb09 230c 	mla	r3, r9, ip, r2
 8008f5a:	fb09 f907 	mul.w	r9, r9, r7
 8008f5e:	eb03 4318 	add.w	r3, r3, r8, lsr #16
 8008f62:	429a      	cmp	r2, r3
 8008f64:	bf88      	it	hi
 8008f66:	f509 3980 	addhi.w	r9, r9, #65536	; 0x10000
 8008f6a:	eb09 4913 	add.w	r9, r9, r3, lsr #16
 8008f6e:	4549      	cmp	r1, r9
 8008f70:	d310      	bcc.n	8008f94 <__divdi3+0x290>
 8008f72:	fa1f f888 	uxth.w	r8, r8
 8008f76:	bf14      	ite	ne
 8008f78:	2200      	movne	r2, #0
 8008f7a:	2201      	moveq	r2, #1
 8008f7c:	fa06 f404 	lsl.w	r4, r6, r4
 8008f80:	eb08 4303 	add.w	r3, r8, r3, lsl #16
 8008f84:	429c      	cmp	r4, r3
 8008f86:	bf2c      	ite	cs
 8008f88:	2300      	movcs	r3, #0
 8008f8a:	f002 0301 	andcc.w	r3, r2, #1
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	f43f af15 	beq.w	8008dbe <__divdi3+0xba>
 8008f94:	3801      	subs	r0, #1
 8008f96:	f04f 0800 	mov.w	r8, #0
 8008f9a:	e718      	b.n	8008dce <__divdi3+0xca>
 8008f9c:	4252      	negs	r2, r2
 8008f9e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008fa2:	43ed      	mvns	r5, r5
 8008fa4:	e6b9      	b.n	8008d1a <__divdi3+0x16>
 8008fa6:	4240      	negs	r0, r0
 8008fa8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008fac:	f04f 35ff 	mov.w	r5, #4294967295
 8008fb0:	e6b0      	b.n	8008d14 <__divdi3+0x10>
 8008fb2:	409c      	lsls	r4, r3
 8008fb4:	f1c3 0b20 	rsb	fp, r3, #32
 8008fb8:	fa27 f80b 	lsr.w	r8, r7, fp
 8008fbc:	fa07 f703 	lsl.w	r7, r7, r3
 8008fc0:	ea4f 4914 	mov.w	r9, r4, lsr #16
 8008fc4:	4640      	mov	r0, r8
 8008fc6:	4649      	mov	r1, r9
 8008fc8:	fa26 fb0b 	lsr.w	fp, r6, fp
 8008fcc:	409e      	lsls	r6, r3
 8008fce:	f7ff f89b 	bl	8008108 <__aeabi_uidiv>
 8008fd2:	4649      	mov	r1, r9
 8008fd4:	fa1f fa84 	uxth.w	sl, r4
 8008fd8:	ea4b 0b07 	orr.w	fp, fp, r7
 8008fdc:	4603      	mov	r3, r0
 8008fde:	4640      	mov	r0, r8
 8008fe0:	9301      	str	r3, [sp, #4]
 8008fe2:	f7ff f9bf 	bl	8008364 <__aeabi_uidivmod>
 8008fe6:	9b01      	ldr	r3, [sp, #4]
 8008fe8:	ea4f 421b 	mov.w	r2, fp, lsr #16
 8008fec:	fb0a f003 	mul.w	r0, sl, r3
 8008ff0:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
 8008ff4:	4288      	cmp	r0, r1
 8008ff6:	d906      	bls.n	8009006 <__divdi3+0x302>
 8008ff8:	1e5a      	subs	r2, r3, #1
 8008ffa:	1909      	adds	r1, r1, r4
 8008ffc:	d236      	bcs.n	800906c <__divdi3+0x368>
 8008ffe:	4288      	cmp	r0, r1
 8009000:	d934      	bls.n	800906c <__divdi3+0x368>
 8009002:	3b02      	subs	r3, #2
 8009004:	1909      	adds	r1, r1, r4
 8009006:	1a0f      	subs	r7, r1, r0
 8009008:	4649      	mov	r1, r9
 800900a:	4638      	mov	r0, r7
 800900c:	9301      	str	r3, [sp, #4]
 800900e:	f7ff f87b 	bl	8008108 <__aeabi_uidiv>
 8009012:	4649      	mov	r1, r9
 8009014:	fa1f fb8b 	uxth.w	fp, fp
 8009018:	4680      	mov	r8, r0
 800901a:	4638      	mov	r0, r7
 800901c:	f7ff f9a2 	bl	8008364 <__aeabi_uidivmod>
 8009020:	9b01      	ldr	r3, [sp, #4]
 8009022:	fb0a f708 	mul.w	r7, sl, r8
 8009026:	ea4b 4101 	orr.w	r1, fp, r1, lsl #16
 800902a:	428f      	cmp	r7, r1
 800902c:	d90a      	bls.n	8009044 <__divdi3+0x340>
 800902e:	1909      	adds	r1, r1, r4
 8009030:	f108 32ff 	add.w	r2, r8, #4294967295
 8009034:	d205      	bcs.n	8009042 <__divdi3+0x33e>
 8009036:	428f      	cmp	r7, r1
 8009038:	bf84      	itt	hi
 800903a:	f1a8 0802 	subhi.w	r8, r8, #2
 800903e:	1909      	addhi	r1, r1, r4
 8009040:	d800      	bhi.n	8009044 <__divdi3+0x340>
 8009042:	4690      	mov	r8, r2
 8009044:	1bcf      	subs	r7, r1, r7
 8009046:	ea48 4803 	orr.w	r8, r8, r3, lsl #16
 800904a:	e6dd      	b.n	8008e08 <__divdi3+0x104>
 800904c:	2001      	movs	r0, #1
 800904e:	4563      	cmp	r3, ip
 8009050:	bf28      	it	cs
 8009052:	4552      	cmpcs	r2, sl
 8009054:	46a0      	mov	r8, r4
 8009056:	f67f aeba 	bls.w	8008dce <__divdi3+0xca>
 800905a:	e6b5      	b.n	8008dc8 <__divdi3+0xc4>
 800905c:	469b      	mov	fp, r3
 800905e:	e6ef      	b.n	8008e40 <__divdi3+0x13c>
 8009060:	461f      	mov	r7, r3
 8009062:	e6aa      	b.n	8008dba <__divdi3+0xb6>
 8009064:	4683      	mov	fp, r0
 8009066:	e768      	b.n	8008f3a <__divdi3+0x236>
 8009068:	4689      	mov	r9, r1
 800906a:	e741      	b.n	8008ef0 <__divdi3+0x1ec>
 800906c:	4613      	mov	r3, r2
 800906e:	e7ca      	b.n	8009006 <__divdi3+0x302>

08009070 <__udivdi3>:
 8009070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009074:	4606      	mov	r6, r0
 8009076:	b083      	sub	sp, #12
 8009078:	460d      	mov	r5, r1
 800907a:	4614      	mov	r4, r2
 800907c:	4607      	mov	r7, r0
 800907e:	4688      	mov	r8, r1
 8009080:	2b00      	cmp	r3, #0
 8009082:	d14a      	bne.n	800911a <__udivdi3+0xaa>
 8009084:	428a      	cmp	r2, r1
 8009086:	d955      	bls.n	8009134 <__udivdi3+0xc4>
 8009088:	fab2 f382 	clz	r3, r2
 800908c:	b14b      	cbz	r3, 80090a2 <__udivdi3+0x32>
 800908e:	f1c3 0220 	rsb	r2, r3, #32
 8009092:	fa01 f803 	lsl.w	r8, r1, r3
 8009096:	fa20 f202 	lsr.w	r2, r0, r2
 800909a:	409c      	lsls	r4, r3
 800909c:	ea42 0808 	orr.w	r8, r2, r8
 80090a0:	409f      	lsls	r7, r3
 80090a2:	0c25      	lsrs	r5, r4, #16
 80090a4:	4640      	mov	r0, r8
 80090a6:	4629      	mov	r1, r5
 80090a8:	fa1f fa84 	uxth.w	sl, r4
 80090ac:	f7ff f82c 	bl	8008108 <__aeabi_uidiv>
 80090b0:	4629      	mov	r1, r5
 80090b2:	4681      	mov	r9, r0
 80090b4:	4640      	mov	r0, r8
 80090b6:	f7ff f955 	bl	8008364 <__aeabi_uidivmod>
 80090ba:	0c3b      	lsrs	r3, r7, #16
 80090bc:	fb0a f009 	mul.w	r0, sl, r9
 80090c0:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80090c4:	4288      	cmp	r0, r1
 80090c6:	d90a      	bls.n	80090de <__udivdi3+0x6e>
 80090c8:	1909      	adds	r1, r1, r4
 80090ca:	f109 32ff 	add.w	r2, r9, #4294967295
 80090ce:	d205      	bcs.n	80090dc <__udivdi3+0x6c>
 80090d0:	4288      	cmp	r0, r1
 80090d2:	bf84      	itt	hi
 80090d4:	f1a9 0902 	subhi.w	r9, r9, #2
 80090d8:	1909      	addhi	r1, r1, r4
 80090da:	d800      	bhi.n	80090de <__udivdi3+0x6e>
 80090dc:	4691      	mov	r9, r2
 80090de:	ebc0 0801 	rsb	r8, r0, r1
 80090e2:	4629      	mov	r1, r5
 80090e4:	4640      	mov	r0, r8
 80090e6:	b2bf      	uxth	r7, r7
 80090e8:	f7ff f80e 	bl	8008108 <__aeabi_uidiv>
 80090ec:	4629      	mov	r1, r5
 80090ee:	4606      	mov	r6, r0
 80090f0:	4640      	mov	r0, r8
 80090f2:	f7ff f937 	bl	8008364 <__aeabi_uidivmod>
 80090f6:	fb0a fa06 	mul.w	sl, sl, r6
 80090fa:	ea47 4101 	orr.w	r1, r7, r1, lsl #16
 80090fe:	458a      	cmp	sl, r1
 8009100:	d907      	bls.n	8009112 <__udivdi3+0xa2>
 8009102:	1e73      	subs	r3, r6, #1
 8009104:	190c      	adds	r4, r1, r4
 8009106:	f080 8122 	bcs.w	800934e <__udivdi3+0x2de>
 800910a:	3e02      	subs	r6, #2
 800910c:	45a2      	cmp	sl, r4
 800910e:	f240 811e 	bls.w	800934e <__udivdi3+0x2de>
 8009112:	ea46 4009 	orr.w	r0, r6, r9, lsl #16
 8009116:	2600      	movs	r6, #0
 8009118:	e058      	b.n	80091cc <__udivdi3+0x15c>
 800911a:	428b      	cmp	r3, r1
 800911c:	d854      	bhi.n	80091c8 <__udivdi3+0x158>
 800911e:	fab3 f483 	clz	r4, r3
 8009122:	2c00      	cmp	r4, #0
 8009124:	d156      	bne.n	80091d4 <__udivdi3+0x164>
 8009126:	428b      	cmp	r3, r1
 8009128:	bf28      	it	cs
 800912a:	4282      	cmpcs	r2, r0
 800912c:	d84c      	bhi.n	80091c8 <__udivdi3+0x158>
 800912e:	4626      	mov	r6, r4
 8009130:	2001      	movs	r0, #1
 8009132:	e04b      	b.n	80091cc <__udivdi3+0x15c>
 8009134:	b922      	cbnz	r2, 8009140 <__udivdi3+0xd0>
 8009136:	2001      	movs	r0, #1
 8009138:	4611      	mov	r1, r2
 800913a:	f7fe ffe5 	bl	8008108 <__aeabi_uidiv>
 800913e:	4604      	mov	r4, r0
 8009140:	fab4 f384 	clz	r3, r4
 8009144:	2b00      	cmp	r3, #0
 8009146:	f040 80b9 	bne.w	80092bc <__udivdi3+0x24c>
 800914a:	1b2d      	subs	r5, r5, r4
 800914c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009150:	fa1f fa84 	uxth.w	sl, r4
 8009154:	2601      	movs	r6, #1
 8009156:	4641      	mov	r1, r8
 8009158:	4628      	mov	r0, r5
 800915a:	f7fe ffd5 	bl	8008108 <__aeabi_uidiv>
 800915e:	4641      	mov	r1, r8
 8009160:	4681      	mov	r9, r0
 8009162:	4628      	mov	r0, r5
 8009164:	f7ff f8fe 	bl	8008364 <__aeabi_uidivmod>
 8009168:	0c3b      	lsrs	r3, r7, #16
 800916a:	fb0a f009 	mul.w	r0, sl, r9
 800916e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8009172:	4288      	cmp	r0, r1
 8009174:	d90b      	bls.n	800918e <__udivdi3+0x11e>
 8009176:	1909      	adds	r1, r1, r4
 8009178:	f109 33ff 	add.w	r3, r9, #4294967295
 800917c:	f080 80e9 	bcs.w	8009352 <__udivdi3+0x2e2>
 8009180:	4288      	cmp	r0, r1
 8009182:	bf84      	itt	hi
 8009184:	f1a9 0902 	subhi.w	r9, r9, #2
 8009188:	1909      	addhi	r1, r1, r4
 800918a:	f240 80e2 	bls.w	8009352 <__udivdi3+0x2e2>
 800918e:	ebc0 0b01 	rsb	fp, r0, r1
 8009192:	4641      	mov	r1, r8
 8009194:	4658      	mov	r0, fp
 8009196:	b2bf      	uxth	r7, r7
 8009198:	f7fe ffb6 	bl	8008108 <__aeabi_uidiv>
 800919c:	4641      	mov	r1, r8
 800919e:	4605      	mov	r5, r0
 80091a0:	4658      	mov	r0, fp
 80091a2:	f7ff f8df 	bl	8008364 <__aeabi_uidivmod>
 80091a6:	fb0a fa05 	mul.w	sl, sl, r5
 80091aa:	ea47 4101 	orr.w	r1, r7, r1, lsl #16
 80091ae:	458a      	cmp	sl, r1
 80091b0:	d907      	bls.n	80091c2 <__udivdi3+0x152>
 80091b2:	1e6b      	subs	r3, r5, #1
 80091b4:	190c      	adds	r4, r1, r4
 80091b6:	f080 80ce 	bcs.w	8009356 <__udivdi3+0x2e6>
 80091ba:	3d02      	subs	r5, #2
 80091bc:	45a2      	cmp	sl, r4
 80091be:	f240 80ca 	bls.w	8009356 <__udivdi3+0x2e6>
 80091c2:	ea45 4009 	orr.w	r0, r5, r9, lsl #16
 80091c6:	e001      	b.n	80091cc <__udivdi3+0x15c>
 80091c8:	2600      	movs	r6, #0
 80091ca:	4630      	mov	r0, r6
 80091cc:	4631      	mov	r1, r6
 80091ce:	b003      	add	sp, #12
 80091d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091d4:	f1c4 0120 	rsb	r1, r4, #32
 80091d8:	fa03 f304 	lsl.w	r3, r3, r4
 80091dc:	fa22 f801 	lsr.w	r8, r2, r1
 80091e0:	fa25 f701 	lsr.w	r7, r5, r1
 80091e4:	ea48 0803 	orr.w	r8, r8, r3
 80091e8:	fa20 f101 	lsr.w	r1, r0, r1
 80091ec:	fa05 f504 	lsl.w	r5, r5, r4
 80091f0:	4638      	mov	r0, r7
 80091f2:	ea4f 4918 	mov.w	r9, r8, lsr #16
 80091f6:	430d      	orrs	r5, r1
 80091f8:	4649      	mov	r1, r9
 80091fa:	fa02 f204 	lsl.w	r2, r2, r4
 80091fe:	9201      	str	r2, [sp, #4]
 8009200:	f7fe ff82 	bl	8008108 <__aeabi_uidiv>
 8009204:	4649      	mov	r1, r9
 8009206:	4682      	mov	sl, r0
 8009208:	4638      	mov	r0, r7
 800920a:	f7ff f8ab 	bl	8008364 <__aeabi_uidivmod>
 800920e:	fa1f f288 	uxth.w	r2, r8
 8009212:	0c2f      	lsrs	r7, r5, #16
 8009214:	fb02 f00a 	mul.w	r0, r2, sl
 8009218:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800921c:	42b8      	cmp	r0, r7
 800921e:	d906      	bls.n	800922e <__udivdi3+0x1be>
 8009220:	eb17 0708 	adds.w	r7, r7, r8
 8009224:	f10a 31ff 	add.w	r1, sl, #4294967295
 8009228:	f0c0 809f 	bcc.w	800936a <__udivdi3+0x2fa>
 800922c:	468a      	mov	sl, r1
 800922e:	1a3f      	subs	r7, r7, r0
 8009230:	4649      	mov	r1, r9
 8009232:	4638      	mov	r0, r7
 8009234:	9200      	str	r2, [sp, #0]
 8009236:	f7fe ff67 	bl	8008108 <__aeabi_uidiv>
 800923a:	4649      	mov	r1, r9
 800923c:	b2ad      	uxth	r5, r5
 800923e:	4683      	mov	fp, r0
 8009240:	4638      	mov	r0, r7
 8009242:	f7ff f88f 	bl	8008364 <__aeabi_uidivmod>
 8009246:	9a00      	ldr	r2, [sp, #0]
 8009248:	fb02 f70b 	mul.w	r7, r2, fp
 800924c:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
 8009250:	428f      	cmp	r7, r1
 8009252:	d905      	bls.n	8009260 <__udivdi3+0x1f0>
 8009254:	eb11 0108 	adds.w	r1, r1, r8
 8009258:	f10b 32ff 	add.w	r2, fp, #4294967295
 800925c:	d37d      	bcc.n	800935a <__udivdi3+0x2ea>
 800925e:	4693      	mov	fp, r2
 8009260:	9b01      	ldr	r3, [sp, #4]
 8009262:	ea4b 400a 	orr.w	r0, fp, sl, lsl #16
 8009266:	1bc9      	subs	r1, r1, r7
 8009268:	ea4f 4c10 	mov.w	ip, r0, lsr #16
 800926c:	b29d      	uxth	r5, r3
 800926e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009272:	b283      	uxth	r3, r0
 8009274:	fb05 f203 	mul.w	r2, r5, r3
 8009278:	fb05 f50c 	mul.w	r5, r5, ip
 800927c:	fb0a 5303 	mla	r3, sl, r3, r5
 8009280:	fb0a fa0c 	mul.w	sl, sl, ip
 8009284:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8009288:	429d      	cmp	r5, r3
 800928a:	bf88      	it	hi
 800928c:	f50a 3a80 	addhi.w	sl, sl, #65536	; 0x10000
 8009290:	eb0a 4a13 	add.w	sl, sl, r3, lsr #16
 8009294:	4551      	cmp	r1, sl
 8009296:	d30e      	bcc.n	80092b6 <__udivdi3+0x246>
 8009298:	b292      	uxth	r2, r2
 800929a:	bf14      	ite	ne
 800929c:	2100      	movne	r1, #0
 800929e:	2101      	moveq	r1, #1
 80092a0:	fa06 f604 	lsl.w	r6, r6, r4
 80092a4:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 80092a8:	429e      	cmp	r6, r3
 80092aa:	bf2c      	ite	cs
 80092ac:	2600      	movcs	r6, #0
 80092ae:	f001 0601 	andcc.w	r6, r1, #1
 80092b2:	2e00      	cmp	r6, #0
 80092b4:	d08a      	beq.n	80091cc <__udivdi3+0x15c>
 80092b6:	3801      	subs	r0, #1
 80092b8:	2600      	movs	r6, #0
 80092ba:	e787      	b.n	80091cc <__udivdi3+0x15c>
 80092bc:	409c      	lsls	r4, r3
 80092be:	f1c3 0220 	rsb	r2, r3, #32
 80092c2:	fa25 fa02 	lsr.w	sl, r5, r2
 80092c6:	fa26 f902 	lsr.w	r9, r6, r2
 80092ca:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80092ce:	4650      	mov	r0, sl
 80092d0:	4641      	mov	r1, r8
 80092d2:	fa05 f503 	lsl.w	r5, r5, r3
 80092d6:	fa06 f703 	lsl.w	r7, r6, r3
 80092da:	f7fe ff15 	bl	8008108 <__aeabi_uidiv>
 80092de:	4641      	mov	r1, r8
 80092e0:	ea49 0905 	orr.w	r9, r9, r5
 80092e4:	4683      	mov	fp, r0
 80092e6:	4650      	mov	r0, sl
 80092e8:	f7ff f83c 	bl	8008364 <__aeabi_uidivmod>
 80092ec:	fa1f fa84 	uxth.w	sl, r4
 80092f0:	ea4f 4319 	mov.w	r3, r9, lsr #16
 80092f4:	fb0a f00b 	mul.w	r0, sl, fp
 80092f8:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80092fc:	4288      	cmp	r0, r1
 80092fe:	d909      	bls.n	8009314 <__udivdi3+0x2a4>
 8009300:	1909      	adds	r1, r1, r4
 8009302:	f10b 33ff 	add.w	r3, fp, #4294967295
 8009306:	d238      	bcs.n	800937a <__udivdi3+0x30a>
 8009308:	4288      	cmp	r0, r1
 800930a:	bf84      	itt	hi
 800930c:	f1ab 0b02 	subhi.w	fp, fp, #2
 8009310:	1909      	addhi	r1, r1, r4
 8009312:	d932      	bls.n	800937a <__udivdi3+0x30a>
 8009314:	1a0d      	subs	r5, r1, r0
 8009316:	4641      	mov	r1, r8
 8009318:	4628      	mov	r0, r5
 800931a:	fa1f f989 	uxth.w	r9, r9
 800931e:	f7fe fef3 	bl	8008108 <__aeabi_uidiv>
 8009322:	4641      	mov	r1, r8
 8009324:	4606      	mov	r6, r0
 8009326:	4628      	mov	r0, r5
 8009328:	f7ff f81c 	bl	8008364 <__aeabi_uidivmod>
 800932c:	fb0a f506 	mul.w	r5, sl, r6
 8009330:	ea49 4101 	orr.w	r1, r9, r1, lsl #16
 8009334:	428d      	cmp	r5, r1
 8009336:	d906      	bls.n	8009346 <__udivdi3+0x2d6>
 8009338:	1e73      	subs	r3, r6, #1
 800933a:	1909      	adds	r1, r1, r4
 800933c:	d21f      	bcs.n	800937e <__udivdi3+0x30e>
 800933e:	428d      	cmp	r5, r1
 8009340:	d91d      	bls.n	800937e <__udivdi3+0x30e>
 8009342:	3e02      	subs	r6, #2
 8009344:	1909      	adds	r1, r1, r4
 8009346:	1b4d      	subs	r5, r1, r5
 8009348:	ea46 460b 	orr.w	r6, r6, fp, lsl #16
 800934c:	e703      	b.n	8009156 <__udivdi3+0xe6>
 800934e:	461e      	mov	r6, r3
 8009350:	e6df      	b.n	8009112 <__udivdi3+0xa2>
 8009352:	4699      	mov	r9, r3
 8009354:	e71b      	b.n	800918e <__udivdi3+0x11e>
 8009356:	461d      	mov	r5, r3
 8009358:	e733      	b.n	80091c2 <__udivdi3+0x152>
 800935a:	428f      	cmp	r7, r1
 800935c:	bf84      	itt	hi
 800935e:	f1ab 0b02 	subhi.w	fp, fp, #2
 8009362:	4441      	addhi	r1, r8
 8009364:	f63f af7c 	bhi.w	8009260 <__udivdi3+0x1f0>
 8009368:	e779      	b.n	800925e <__udivdi3+0x1ee>
 800936a:	42b8      	cmp	r0, r7
 800936c:	bf84      	itt	hi
 800936e:	f1aa 0a02 	subhi.w	sl, sl, #2
 8009372:	4447      	addhi	r7, r8
 8009374:	f63f af5b 	bhi.w	800922e <__udivdi3+0x1be>
 8009378:	e758      	b.n	800922c <__udivdi3+0x1bc>
 800937a:	469b      	mov	fp, r3
 800937c:	e7ca      	b.n	8009314 <__udivdi3+0x2a4>
 800937e:	461e      	mov	r6, r3
 8009380:	e7e1      	b.n	8009346 <__udivdi3+0x2d6>
 8009382:	bf00      	nop

08009384 <main>:
#include "ST7032i.h"


ST7032i lcd;

int main(void) {
 8009384:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009388:	b09f      	sub	sp, #124	; 0x7c
	uint16_t bits;
	uint32_t intval = 40;
	uint32_t tnow;
	char tmp[92];

	TIM2_timer_start();
 800938a:	f7f6 fefd 	bl	8000188 <TIM2_timer_start>

	usart_begin(&Serial2, PA3, PA2, 19200);
 800938e:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
 8009392:	f44f 7281 	mov.w	r2, #258	; 0x102
 8009396:	48b6      	ldr	r0, [pc, #728]	; (8009670 <main+0x2ec>)
 8009398:	f240 1103 	movw	r1, #259	; 0x103
 800939c:	f7f7 fb6b 	bl	8000a76 <usart_begin>
	usart_print(&Serial2,
 80093a0:	48b3      	ldr	r0, [pc, #716]	; (8009670 <main+0x2ec>)
 80093a2:	49b4      	ldr	r1, [pc, #720]	; (8009674 <main+0x2f0>)
 80093a4:	f7f7 fcac 	bl	8000d00 <usart_print>
			"Happy are those who know they are spiritually poor; \n");
	usart_print(&Serial2, "The kingdom of heaven belongs to them!\n");
 80093a8:	48b1      	ldr	r0, [pc, #708]	; (8009670 <main+0x2ec>)
 80093aa:	49b3      	ldr	r1, [pc, #716]	; (8009678 <main+0x2f4>)
 80093ac:	f7f7 fca8 	bl	8000d00 <usart_print>
	usart_print(&Serial2, "How many eyes does Mississipi river have?\n");
 80093b0:	48af      	ldr	r0, [pc, #700]	; (8009670 <main+0x2ec>)
 80093b2:	49b2      	ldr	r1, [pc, #712]	; (800967c <main+0x2f8>)
 80093b4:	f7f7 fca4 	bl	8000d00 <usart_print>
	usart_print(&Serial2, "Quick brown fox jumped over the lazy dog!\n");
 80093b8:	49b1      	ldr	r1, [pc, #708]	; (8009680 <main+0x2fc>)
 80093ba:	48ad      	ldr	r0, [pc, #692]	; (8009670 <main+0x2ec>)
 80093bc:	f7f7 fca0 	bl	8000d00 <usart_print>
	usart_flush(&Serial2);
 80093c0:	48ab      	ldr	r0, [pc, #684]	; (8009670 <main+0x2ec>)
 80093c2:	f7f7 fcb5 	bl	8000d30 <usart_flush>

	RCC_ClocksTypeDef RCC_Clocks;
	RCC_GetClocksFreq(&RCC_Clocks);
 80093c6:	a803      	add	r0, sp, #12
 80093c8:	f7f8 f9ac 	bl	8001724 <RCC_GetClocksFreq>

	sprintf(tmp, "SYSCLK = %ld, ", RCC_Clocks.SYSCLK_Frequency);
 80093cc:	9a03      	ldr	r2, [sp, #12]
 80093ce:	49ad      	ldr	r1, [pc, #692]	; (8009684 <main+0x300>)
 80093d0:	a807      	add	r0, sp, #28
 80093d2:	f7f9 ffaf 	bl	8003334 <sprintf>
	usart_print(&Serial2, tmp);
 80093d6:	48a6      	ldr	r0, [pc, #664]	; (8009670 <main+0x2ec>)
 80093d8:	a907      	add	r1, sp, #28
 80093da:	f7f7 fc91 	bl	8000d00 <usart_print>
	sprintf(tmp, "HCLK = %ld, ", RCC_Clocks.HCLK_Frequency);
 80093de:	9a04      	ldr	r2, [sp, #16]
 80093e0:	49a9      	ldr	r1, [pc, #676]	; (8009688 <main+0x304>)
 80093e2:	a807      	add	r0, sp, #28
 80093e4:	f7f9 ffa6 	bl	8003334 <sprintf>
	usart_print(&Serial2, tmp);
 80093e8:	48a1      	ldr	r0, [pc, #644]	; (8009670 <main+0x2ec>)
 80093ea:	a907      	add	r1, sp, #28
 80093ec:	f7f7 fc88 	bl	8000d00 <usart_print>
	sprintf(tmp, "PCLK1 = %ld, ", RCC_Clocks.PCLK1_Frequency);
 80093f0:	9a05      	ldr	r2, [sp, #20]
 80093f2:	49a6      	ldr	r1, [pc, #664]	; (800968c <main+0x308>)
 80093f4:	a807      	add	r0, sp, #28
 80093f6:	f7f9 ff9d 	bl	8003334 <sprintf>
	usart_print(&Serial2, tmp);
 80093fa:	489d      	ldr	r0, [pc, #628]	; (8009670 <main+0x2ec>)
 80093fc:	a907      	add	r1, sp, #28
 80093fe:	f7f7 fc7f 	bl	8000d00 <usart_print>
	sprintf(tmp, "PCLK2 = %ld\r\n", RCC_Clocks.PCLK2_Frequency);
 8009402:	9a06      	ldr	r2, [sp, #24]
 8009404:	49a2      	ldr	r1, [pc, #648]	; (8009690 <main+0x30c>)
 8009406:	a807      	add	r0, sp, #28
 8009408:	f7f9 ff94 	bl	8003334 <sprintf>
	usart_print(&Serial2, tmp);
 800940c:	a907      	add	r1, sp, #28
 800940e:	4898      	ldr	r0, [pc, #608]	; (8009670 <main+0x2ec>)
 8009410:	f7f7 fc76 	bl	8000d00 <usart_print>
//	usart_flush(USART2Serial);

	GPIOMode(PinPort(PD12),
 8009414:	f240 400c 	movw	r0, #1036	; 0x40c
 8009418:	f7f6 ff4c 	bl	80002b4 <PinPort>
 800941c:	4604      	mov	r4, r0
			(PinBit(PD12) | PinBit(PD13) | PinBit(PD14) | PinBit(PD15)), OUTPUT,
 800941e:	f240 400c 	movw	r0, #1036	; 0x40c
 8009422:	f7f6 ff4f 	bl	80002c4 <PinBit>
 8009426:	4605      	mov	r5, r0
 8009428:	f240 400d 	movw	r0, #1037	; 0x40d
 800942c:	f7f6 ff4a 	bl	80002c4 <PinBit>
	usart_print(&Serial2, tmp);
	sprintf(tmp, "PCLK2 = %ld\r\n", RCC_Clocks.PCLK2_Frequency);
	usart_print(&Serial2, tmp);
//	usart_flush(USART2Serial);

	GPIOMode(PinPort(PD12),
 8009430:	4328      	orrs	r0, r5
 8009432:	b285      	uxth	r5, r0
			(PinBit(PD12) | PinBit(PD13) | PinBit(PD14) | PinBit(PD15)), OUTPUT,
 8009434:	f240 400e 	movw	r0, #1038	; 0x40e
 8009438:	f7f6 ff44 	bl	80002c4 <PinBit>
	usart_print(&Serial2, tmp);
	sprintf(tmp, "PCLK2 = %ld\r\n", RCC_Clocks.PCLK2_Frequency);
	usart_print(&Serial2, tmp);
//	usart_flush(USART2Serial);

	GPIOMode(PinPort(PD12),
 800943c:	4328      	orrs	r0, r5
 800943e:	b285      	uxth	r5, r0
			(PinBit(PD12) | PinBit(PD13) | PinBit(PD14) | PinBit(PD15)), OUTPUT,
 8009440:	f240 400f 	movw	r0, #1039	; 0x40f
 8009444:	f7f6 ff3e 	bl	80002c4 <PinBit>
	usart_print(&Serial2, tmp);
	sprintf(tmp, "PCLK2 = %ld\r\n", RCC_Clocks.PCLK2_Frequency);
	usart_print(&Serial2, tmp);
//	usart_flush(USART2Serial);

	GPIOMode(PinPort(PD12),
 8009448:	2300      	movs	r3, #0
 800944a:	ea45 0100 	orr.w	r1, r5, r0
 800944e:	2201      	movs	r2, #1
 8009450:	4620      	mov	r0, r4
 8009452:	9300      	str	r3, [sp, #0]
			(PinBit(PD12) | PinBit(PD13) | PinBit(PD14) | PinBit(PD15)), OUTPUT,
			FASTSPEED, PUSHPULL, NOPULL);
	spi_begin(SPI2, PB13, PB14, PB15, PB12);
 8009454:	f44f 7403 	mov.w	r4, #524	; 0x20c
	usart_print(&Serial2, tmp);
	sprintf(tmp, "PCLK2 = %ld\r\n", RCC_Clocks.PCLK2_Frequency);
	usart_print(&Serial2, tmp);
//	usart_flush(USART2Serial);

	GPIOMode(PinPort(PD12),
 8009458:	9301      	str	r3, [sp, #4]
 800945a:	b289      	uxth	r1, r1
 800945c:	2302      	movs	r3, #2
 800945e:	f7f6 ff9b 	bl	8000398 <GPIOMode>
			(PinBit(PD12) | PinBit(PD13) | PinBit(PD14) | PinBit(PD15)), OUTPUT,
			FASTSPEED, PUSHPULL, NOPULL);
	spi_begin(SPI2, PB13, PB14, PB15, PB12);
 8009462:	f240 230f 	movw	r3, #527	; 0x20f
 8009466:	f240 220e 	movw	r2, #526	; 0x20e
 800946a:	9400      	str	r4, [sp, #0]
 800946c:	4889      	ldr	r0, [pc, #548]	; (8009694 <main+0x310>)
 800946e:	f240 210d 	movw	r1, #525	; 0x20d
 8009472:	f7f7 f993 	bl	800079c <spi_begin>
	digitalWrite(PB12, HIGH);
 8009476:	4620      	mov	r0, r4
 8009478:	2101      	movs	r1, #1
 800947a:	f7f6 ff53 	bl	8000324 <digitalWrite>

	i2c_begin(&Wire1, 100000);
 800947e:	4986      	ldr	r1, [pc, #536]	; (8009698 <main+0x314>)
 8009480:	4886      	ldr	r0, [pc, #536]	; (800969c <main+0x318>)
 8009482:	f7f6 ffdf 	bl	8000444 <i2c_begin>
	ST7032i_init(&lcd, &Wire1);
 8009486:	4985      	ldr	r1, [pc, #532]	; (800969c <main+0x318>)
 8009488:	4885      	ldr	r0, [pc, #532]	; (80096a0 <main+0x31c>)
 800948a:	f7f9 fbaf 	bl	8002bec <ST7032i_init>
	ST7032i_begin(&lcd);
 800948e:	4884      	ldr	r0, [pc, #528]	; (80096a0 <main+0x31c>)
 8009490:	f7f9 fc5e 	bl	8002d50 <ST7032i_begin>
	ST7032i_setContrast(&lcd, 46);
 8009494:	212e      	movs	r1, #46	; 0x2e
 8009496:	4882      	ldr	r0, [pc, #520]	; (80096a0 <main+0x31c>)
 8009498:	f7f9 fbe8 	bl	8002c6c <ST7032i_setContrast>
	ST7032i_print(&lcd, "Hi there!");       // Classic Hello World!
 800949c:	4981      	ldr	r1, [pc, #516]	; (80096a4 <main+0x320>)
 800949e:	4880      	ldr	r0, [pc, #512]	; (80096a0 <main+0x31c>)
 80094a0:	f7f9 fbd5 	bl	8002c4e <ST7032i_print>

	bits = GPIO_ReadOutputData(GPIOD );
 80094a4:	4880      	ldr	r0, [pc, #512]	; (80096a8 <main+0x324>)
 80094a6:	f7f7 fe78 	bl	800119a <GPIO_ReadOutputData>
 80094aa:	4604      	mov	r4, r0
	GPIOWrite(GPIOD, PinBit(PD13) | (bits & 0x0fff));
 80094ac:	f240 400d 	movw	r0, #1037	; 0x40d
 80094b0:	f7f6 ff08 	bl	80002c4 <PinBit>
 80094b4:	0524      	lsls	r4, r4, #20
 80094b6:	ea40 5114 	orr.w	r1, r0, r4, lsr #20
 80094ba:	b289      	uxth	r1, r1
 80094bc:	487a      	ldr	r0, [pc, #488]	; (80096a8 <main+0x324>)
 80094be:	f7f6 ffbf 	bl	8000440 <GPIOWrite>
	delay_ms(intval);
 80094c2:	2028      	movs	r0, #40	; 0x28
 80094c4:	f7f6 feba 	bl	800023c <delay_ms>
	tnow = millis() / 1000;
 80094c8:	f7f6 feb2 	bl	8000230 <millis>
 80094cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80094d0:	fbb0 f4f3 	udiv	r4, r0, r3
	while (tnow == millis() / 1000)
 80094d4:	461d      	mov	r5, r3
 80094d6:	f7f6 feab 	bl	8000230 <millis>
 80094da:	fbb0 f0f5 	udiv	r0, r0, r5
 80094de:	4284      	cmp	r4, r0
 80094e0:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
 80094e4:	d0f7      	beq.n	80094d6 <main+0x152>
		;
	tnow = millis() / 1000;
 80094e6:	f7f6 fea3 	bl	8000230 <millis>
			bits |= PinBit(PD13);
			break;
		}
		GPIOWrite(GPIOD, bits);

		while (tnow == millis() / 1000);
 80094ea:	46b9      	mov	r9, r7
	GPIOWrite(GPIOD, PinBit(PD13) | (bits & 0x0fff));
	delay_ms(intval);
	tnow = millis() / 1000;
	while (tnow == millis() / 1000)
		;
	tnow = millis() / 1000;
 80094ec:	fbb0 f6f7 	udiv	r6, r0, r7
		GPIOWrite(GPIOD, bits);

		while (tnow == millis() / 1000);
		tnow = millis() / 1000;

		sprintf(tmp, "%04ld", millis());
 80094f0:	ad07      	add	r5, sp, #28
	while (tnow == millis() / 1000)
		;
	tnow = millis() / 1000;

	while (1) {
		bits = GPIO_ReadOutputData(GPIOD );
 80094f2:	486d      	ldr	r0, [pc, #436]	; (80096a8 <main+0x324>)
 80094f4:	f7f7 fe51 	bl	800119a <GPIO_ReadOutputData>
 80094f8:	4604      	mov	r4, r0

		GPIOWrite(GPIOD, PinBit(PD13) | (bits & 0x0fff));
 80094fa:	f240 400d 	movw	r0, #1037	; 0x40d
 80094fe:	f7f6 fee1 	bl	80002c4 <PinBit>
 8009502:	0524      	lsls	r4, r4, #20
 8009504:	0d24      	lsrs	r4, r4, #20
 8009506:	ea44 0100 	orr.w	r1, r4, r0
 800950a:	b289      	uxth	r1, r1
 800950c:	4866      	ldr	r0, [pc, #408]	; (80096a8 <main+0x324>)
 800950e:	f7f6 ff97 	bl	8000440 <GPIOWrite>
		delay_ms(intval);
 8009512:	2028      	movs	r0, #40	; 0x28
 8009514:	f7f6 fe92 	bl	800023c <delay_ms>
		GPIOWrite(GPIOD, PinBit(PD14) | (bits & 0x0fff));
 8009518:	f240 400e 	movw	r0, #1038	; 0x40e
 800951c:	f7f6 fed2 	bl	80002c4 <PinBit>
 8009520:	ea44 0100 	orr.w	r1, r4, r0
 8009524:	b289      	uxth	r1, r1
 8009526:	4860      	ldr	r0, [pc, #384]	; (80096a8 <main+0x324>)
 8009528:	f7f6 ff8a 	bl	8000440 <GPIOWrite>
		delay_ms(intval);
 800952c:	2028      	movs	r0, #40	; 0x28
 800952e:	f7f6 fe85 	bl	800023c <delay_ms>
		GPIOWrite(GPIOD, PinBit(PD15) | (bits & 0x0fff));
 8009532:	f240 400f 	movw	r0, #1039	; 0x40f
 8009536:	f7f6 fec5 	bl	80002c4 <PinBit>
 800953a:	ea44 0100 	orr.w	r1, r4, r0
 800953e:	b289      	uxth	r1, r1
 8009540:	4859      	ldr	r0, [pc, #356]	; (80096a8 <main+0x324>)
 8009542:	f7f6 ff7d 	bl	8000440 <GPIOWrite>
		delay_ms(intval);
 8009546:	2028      	movs	r0, #40	; 0x28
 8009548:	f7f6 fe78 	bl	800023c <delay_ms>
		GPIOWrite(GPIOD, PinBit(PD12) | (bits & 0x0fff));
 800954c:	f240 400c 	movw	r0, #1036	; 0x40c
 8009550:	f7f6 feb8 	bl	80002c4 <PinBit>
 8009554:	ea44 0100 	orr.w	r1, r4, r0
 8009558:	b289      	uxth	r1, r1
 800955a:	4853      	ldr	r0, [pc, #332]	; (80096a8 <main+0x324>)
 800955c:	f7f6 ff70 	bl	8000440 <GPIOWrite>
		delay_ms(intval);
 8009560:	2028      	movs	r0, #40	; 0x28
 8009562:	f7f6 fe6b 	bl	800023c <delay_ms>
		//
		bits &= 0x0fff;
		switch ((tnow % 60) / 15) {
 8009566:	233c      	movs	r3, #60	; 0x3c
 8009568:	fbb6 f2f3 	udiv	r2, r6, r3
 800956c:	fb03 6312 	mls	r3, r3, r2, r6
 8009570:	220f      	movs	r2, #15
 8009572:	fbb3 f3f2 	udiv	r3, r3, r2
 8009576:	2b02      	cmp	r3, #2
 8009578:	d00a      	beq.n	8009590 <main+0x20c>
 800957a:	2b03      	cmp	r3, #3
 800957c:	d002      	beq.n	8009584 <main+0x200>
 800957e:	2b01      	cmp	r3, #1
 8009580:	d112      	bne.n	80095a8 <main+0x224>
 8009582:	e00b      	b.n	800959c <main+0x218>
		case 3:
			bits |= PinBit(PD12);
 8009584:	f240 400c 	movw	r0, #1036	; 0x40c
 8009588:	f7f6 fe9c 	bl	80002c4 <PinBit>
 800958c:	4320      	orrs	r0, r4
 800958e:	b284      	uxth	r4, r0
		case 2:
			bits |= PinBit(PD15);
 8009590:	f240 400f 	movw	r0, #1039	; 0x40f
 8009594:	f7f6 fe96 	bl	80002c4 <PinBit>
 8009598:	4320      	orrs	r0, r4
 800959a:	b284      	uxth	r4, r0
		case 1:
			bits |= PinBit(PD14);
 800959c:	f240 400e 	movw	r0, #1038	; 0x40e
 80095a0:	f7f6 fe90 	bl	80002c4 <PinBit>
 80095a4:	4320      	orrs	r0, r4
 80095a6:	b284      	uxth	r4, r0
		case 0:
		default:
			bits |= PinBit(PD13);
 80095a8:	f240 400d 	movw	r0, #1037	; 0x40d
 80095ac:	f7f6 fe8a 	bl	80002c4 <PinBit>
 80095b0:	ea40 0104 	orr.w	r1, r0, r4
			break;
		}
		GPIOWrite(GPIOD, bits);
 80095b4:	b289      	uxth	r1, r1
 80095b6:	483c      	ldr	r0, [pc, #240]	; (80096a8 <main+0x324>)
 80095b8:	f7f6 ff42 	bl	8000440 <GPIOWrite>

		while (tnow == millis() / 1000);
 80095bc:	f7f6 fe38 	bl	8000230 <millis>
 80095c0:	fbb0 f0f7 	udiv	r0, r0, r7
 80095c4:	4286      	cmp	r6, r0
 80095c6:	d0f9      	beq.n	80095bc <main+0x238>
		tnow = millis() / 1000;
 80095c8:	f7f6 fe32 	bl	8000230 <millis>
 80095cc:	fbb0 f6f9 	udiv	r6, r0, r9

		sprintf(tmp, "%04ld", millis());
 80095d0:	f7f6 fe2e 	bl	8000230 <millis>
 80095d4:	4935      	ldr	r1, [pc, #212]	; (80096ac <main+0x328>)
 80095d6:	4602      	mov	r2, r0
 80095d8:	4628      	mov	r0, r5
 80095da:	f7f9 feab 	bl	8003334 <sprintf>
		usart_print(&Serial2, tmp);
 80095de:	4824      	ldr	r0, [pc, #144]	; (8009670 <main+0x2ec>)
 80095e0:	4629      	mov	r1, r5
 80095e2:	f7f7 fb8d 	bl	8000d00 <usart_print>
		usart_print(&Serial2, "\n");
 80095e6:	4822      	ldr	r0, [pc, #136]	; (8009670 <main+0x2ec>)
 80095e8:	4931      	ldr	r1, [pc, #196]	; (80096b0 <main+0x32c>)
 80095ea:	f7f7 fb89 	bl	8000d00 <usart_print>

		ST7032i_setCursor(&lcd, 0, 1);
 80095ee:	2201      	movs	r2, #1
 80095f0:	482b      	ldr	r0, [pc, #172]	; (80096a0 <main+0x31c>)
 80095f2:	2100      	movs	r1, #0
 80095f4:	f7f9 fb77 	bl	8002ce6 <ST7032i_setCursor>
		ST7032i_print(&lcd, tmp);
 80095f8:	4629      	mov	r1, r5
 80095fa:	4829      	ldr	r0, [pc, #164]	; (80096a0 <main+0x31c>)
 80095fc:	f7f9 fb27 	bl	8002c4e <ST7032i_print>

		digitalWrite(PB12, LOW);
 8009600:	f44f 7003 	mov.w	r0, #524	; 0x20c
 8009604:	2100      	movs	r1, #0
 8009606:	f7f6 fe8d 	bl	8000324 <digitalWrite>
		spi_transfer(SPI2, (uint8_t *) tmp, 8);
 800960a:	4822      	ldr	r0, [pc, #136]	; (8009694 <main+0x310>)
 800960c:	4629      	mov	r1, r5
 800960e:	2208      	movs	r2, #8
 8009610:	f7f7 f97a 	bl	8000908 <spi_transfer>
		digitalWrite(PB12, HIGH);
 8009614:	f44f 7003 	mov.w	r0, #524	; 0x20c
 8009618:	2101      	movs	r1, #1
 800961a:	f7f6 fe83 	bl	8000324 <digitalWrite>
		/*
		 dval = (uint32) (100.0f + 64*sinf( (count % (uint32)(3.14159 * 2 * 32))/32.0f));
		 usart3.println(dval);
		 */
		uint16_t i = 0;
		if (usart_available(&Serial2) > 0) {
 800961e:	4814      	ldr	r0, [pc, #80]	; (8009670 <main+0x2ec>)
 8009620:	f7f7 fba3 	bl	8000d6a <usart_available>
 8009624:	b930      	cbnz	r0, 8009634 <main+0x2b0>
 8009626:	e764      	b.n	80094f2 <main+0x16e>
			while (usart_available(&Serial2) > 0 && i < 92) {
				tmp[i++] = (char) usart_read(&Serial2);
 8009628:	4811      	ldr	r0, [pc, #68]	; (8009670 <main+0x2ec>)
 800962a:	f7f7 fb77 	bl	8000d1c <usart_read>
 800962e:	5528      	strb	r0, [r5, r4]
 8009630:	3401      	adds	r4, #1
 8009632:	e000      	b.n	8009636 <main+0x2b2>
		/*
		 dval = (uint32) (100.0f + 64*sinf( (count % (uint32)(3.14159 * 2 * 32))/32.0f));
		 usart3.println(dval);
		 */
		uint16_t i = 0;
		if (usart_available(&Serial2) > 0) {
 8009634:	2400      	movs	r4, #0
			while (usart_available(&Serial2) > 0 && i < 92) {
 8009636:	480e      	ldr	r0, [pc, #56]	; (8009670 <main+0x2ec>)
 8009638:	fa1f f884 	uxth.w	r8, r4
 800963c:	f7f7 fb95 	bl	8000d6a <usart_available>
 8009640:	b110      	cbz	r0, 8009648 <main+0x2c4>
 8009642:	2c5c      	cmp	r4, #92	; 0x5c
 8009644:	d1f0      	bne.n	8009628 <main+0x2a4>
 8009646:	46a0      	mov	r8, r4
				tmp[i++] = (char) usart_read(&Serial2);
			}
			tmp[i] = 0;
 8009648:	aa1e      	add	r2, sp, #120	; 0x78
 800964a:	eb02 0308 	add.w	r3, r2, r8
			usart_print(&Serial2, "> ");
 800964e:	4808      	ldr	r0, [pc, #32]	; (8009670 <main+0x2ec>)
 8009650:	4918      	ldr	r1, [pc, #96]	; (80096b4 <main+0x330>)
		uint16_t i = 0;
		if (usart_available(&Serial2) > 0) {
			while (usart_available(&Serial2) > 0 && i < 92) {
				tmp[i++] = (char) usart_read(&Serial2);
			}
			tmp[i] = 0;
 8009652:	2200      	movs	r2, #0
 8009654:	f803 2c5c 	strb.w	r2, [r3, #-92]
			usart_print(&Serial2, "> ");
 8009658:	f7f7 fb52 	bl	8000d00 <usart_print>
			usart_print(&Serial2, tmp);
 800965c:	4629      	mov	r1, r5
 800965e:	4804      	ldr	r0, [pc, #16]	; (8009670 <main+0x2ec>)
 8009660:	f7f7 fb4e 	bl	8000d00 <usart_print>
			usart_print(&Serial2, "\n");
 8009664:	4802      	ldr	r0, [pc, #8]	; (8009670 <main+0x2ec>)
 8009666:	4912      	ldr	r1, [pc, #72]	; (80096b0 <main+0x32c>)
 8009668:	f7f7 fb4a 	bl	8000d00 <usart_print>
 800966c:	e741      	b.n	80094f2 <main+0x16e>
 800966e:	bf00      	nop
 8009670:	2000132c 	.word	0x2000132c
 8009674:	08009888 	.word	0x08009888
 8009678:	080098be 	.word	0x080098be
 800967c:	080098e6 	.word	0x080098e6
 8009680:	08009911 	.word	0x08009911
 8009684:	0800993c 	.word	0x0800993c
 8009688:	0800994b 	.word	0x0800994b
 800968c:	08009958 	.word	0x08009958
 8009690:	08009966 	.word	0x08009966
 8009694:	40003800 	.word	0x40003800
 8009698:	000186a0 	.word	0x000186a0
 800969c:	2000066c 	.word	0x2000066c
 80096a0:	2000133c 	.word	0x2000133c
 80096a4:	08009974 	.word	0x08009974
 80096a8:	40020c00 	.word	0x40020c00
 80096ac:	0800997e 	.word	0x0800997e
 80096b0:	08009972 	.word	0x08009972
 80096b4:	08009984 	.word	0x08009984

080096b8 <Reset_Handler>:
 80096b8:	2100      	movs	r1, #0
 80096ba:	f000 b804 	b.w	80096c6 <LoopCopyDataInit>

080096be <CopyDataInit>:
 80096be:	4b0c      	ldr	r3, [pc, #48]	; (80096f0 <LoopFillZerobss+0x12>)
 80096c0:	585b      	ldr	r3, [r3, r1]
 80096c2:	5043      	str	r3, [r0, r1]
 80096c4:	3104      	adds	r1, #4

080096c6 <LoopCopyDataInit>:
 80096c6:	480b      	ldr	r0, [pc, #44]	; (80096f4 <LoopFillZerobss+0x16>)
 80096c8:	4b0b      	ldr	r3, [pc, #44]	; (80096f8 <LoopFillZerobss+0x1a>)
 80096ca:	1842      	adds	r2, r0, r1
 80096cc:	429a      	cmp	r2, r3
 80096ce:	f4ff aff6 	bcc.w	80096be <CopyDataInit>
 80096d2:	4a0a      	ldr	r2, [pc, #40]	; (80096fc <LoopFillZerobss+0x1e>)
 80096d4:	f000 b803 	b.w	80096de <LoopFillZerobss>

080096d8 <FillZerobss>:
 80096d8:	2300      	movs	r3, #0
 80096da:	f842 3b04 	str.w	r3, [r2], #4

080096de <LoopFillZerobss>:
 80096de:	4b08      	ldr	r3, [pc, #32]	; (8009700 <LoopFillZerobss+0x22>)
 80096e0:	429a      	cmp	r2, r3
 80096e2:	f4ff aff9 	bcc.w	80096d8 <FillZerobss>
 80096e6:	f7f9 fcc9 	bl	800307c <SystemInit>
 80096ea:	f7ff fe4b 	bl	8009384 <main>
 80096ee:	4770      	bx	lr
 80096f0:	08009a14 	.word	0x08009a14
 80096f4:	20000000 	.word	0x20000000
 80096f8:	2000061c 	.word	0x2000061c
 80096fc:	2000061c 	.word	0x2000061c
 8009700:	20001350 	.word	0x20001350

08009704 <ADC_IRQHandler>:
 8009704:	f7ff bffe 	b.w	8009704 <ADC_IRQHandler>
 8009708:	00000000 	.word	0x00000000
 800970c:	00000040 	.word	0x00000040
 8009710:	00000014 	.word	0x00000014
 8009714:	00000054 	.word	0x00000054

08009718 <blanks.6735>:
 8009718:	20202020 20202020 20202020 20202020                     

08009728 <zeroes.6736>:
 8009728:	30303030 30303030 30303030 30303030     0000000000000000

08009738 <_global_impure_ptr>:
 8009738:	200000a0 00000000                       ... ....

08009740 <p05.5261>:
 8009740:	00000005 00000019 0000007d 00000000     ........}.......

08009750 <__mprec_tens>:
 8009750:	00000000 3ff00000 00000000 40240000     .......?......$@
 8009760:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
 8009770:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
 8009780:	00000000 412e8480 00000000 416312d0     .......A......cA
 8009790:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
 80097a0:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
 80097b0:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
 80097c0:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
 80097d0:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
 80097e0:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
 80097f0:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
 8009800:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
 8009810:	79d99db4 44ea7843                       ...yCx.D

08009818 <__mprec_tinytens>:
 8009818:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
 8009828:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
 8009838:	64ac6f43 0ac80628                       Co.d(...

08009840 <__mprec_bigtens>:
 8009840:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
 8009850:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
 8009860:	7f73bf3c 75154fdd                       <.s..O.u

08009868 <blanks.6679>:
 8009868:	20202020 20202020 20202020 20202020                     

08009878 <zeroes.6680>:
 8009878:	30303030 30303030 30303030 30303030     0000000000000000
 8009888:	70706148 72612079 68742065 2065736f     Happy are those 
 8009898:	206f6877 776f6e6b 65687420 72612079     who know they ar
 80098a8:	70732065 74697269 6c6c6175 6f702079     e spiritually po
 80098b8:	203b726f 6854000a 696b2065 6f64676e     or; ..The kingdo
 80098c8:	666f206d 61656820 206e6576 6f6c6562     m of heaven belo
 80098d8:	2073676e 74206f74 216d6568 6f48000a     ngs to them!..Ho
 80098e8:	616d2077 6520796e 20736579 73656f64     w many eyes does
 80098f8:	73694d20 73736973 20697069 65766972      Mississipi rive
 8009908:	61682072 0a3f6576 69755100 62206b63     r have?..Quick b
 8009918:	6e776f72 786f6620 6d756a20 20646570     rown fox jumped 
 8009928:	7265766f 65687420 7a616c20 6f642079     over the lazy do
 8009938:	000a2167 43535953 3d204b4c 646c2520     g!..SYSCLK = %ld
 8009948:	4800202c 204b4c43 6c25203d 00202c64     , .HCLK = %ld, .
 8009958:	4b4c4350 203d2031 2c646c25 43500020     PCLK1 = %ld, .PC
 8009968:	20324b4c 6c25203d 000a0d64 74206948     LK2 = %ld...Hi t
 8009978:	65726568 30250021 00646c34 4800203e     here!.%04ld.> .H
 8009988:	20706165 20646e61 63617473 6f63206b     eap and stack co
 8009998:	73696c6c 0a6e6f69 69786500 00000074     llision..exit...
 80099a8:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
 80099b8:	33323130 37363534 42413938 46454443     0123456789ABCDEF
 80099c8:	00000000 33323130 37363534 62613938     ....0123456789ab
 80099d8:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
 80099e8:	00000030 69666e49 7974696e 00000000     0...Infinity....
 80099f8:	004e614e 00000043 49534f50 00000058     NaN.C...POSIX...
 8009a08:	0000002e                                ....
