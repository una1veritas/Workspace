
stm32f4-stdperiph.elf:     file format elf32-littlearm


Disassembly of section .text:

08000188 <NVIC_PriorityGroupConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8000188:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 800018c:	4b02      	ldr	r3, [pc, #8]	; (8000198 <NVIC_PriorityGroupConfig+0x10>)
 800018e:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8000192:	60d8      	str	r0, [r3, #12]
}
 8000194:	4770      	bx	lr
 8000196:	bf00      	nop
 8000198:	e000ed00 	.word	0xe000ed00

0800019c <NVIC_Init>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 800019c:	78c3      	ldrb	r3, [r0, #3]
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 800019e:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80001a0:	b30b      	cbz	r3, 80001e6 <NVIC_Init+0x4a>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80001a2:	4b17      	ldr	r3, [pc, #92]	; (8000200 <NVIC_Init+0x64>)
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80001a4:	7842      	ldrb	r2, [r0, #1]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80001a6:	68db      	ldr	r3, [r3, #12]
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 80001a8:	7884      	ldrb	r4, [r0, #2]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80001aa:	43db      	mvns	r3, r3
 80001ac:	f3c3 2302 	ubfx	r3, r3, #8, #3
    tmppre = (0x4 - tmppriority);
 80001b0:	f1c3 0104 	rsb	r1, r3, #4
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80001b4:	b2c9      	uxtb	r1, r1
 80001b6:	fa12 f101 	lsls.w	r1, r2, r1
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
 80001ba:	220f      	movs	r2, #15
 80001bc:	411a      	asrs	r2, r3
    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80001be:	7803      	ldrb	r3, [r0, #0]
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80001c0:	b2c9      	uxtb	r1, r1
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 80001c2:	4022      	ands	r2, r4
 80001c4:	430a      	orrs	r2, r1
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80001c6:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80001ca:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
        
    tmppriority = tmppriority << 0x04;
 80001ce:	0112      	lsls	r2, r2, #4
 80001d0:	b2d2      	uxtb	r2, r2
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80001d2:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80001d6:	7803      	ldrb	r3, [r0, #0]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80001d8:	2201      	movs	r2, #1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80001da:	0959      	lsrs	r1, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80001dc:	f003 031f 	and.w	r3, r3, #31
 80001e0:	fa12 f303 	lsls.w	r3, r2, r3
 80001e4:	e007      	b.n	80001f6 <NVIC_Init+0x5a>
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80001e6:	7803      	ldrb	r3, [r0, #0]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80001e8:	2201      	movs	r2, #1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80001ea:	0959      	lsrs	r1, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80001ec:	f003 031f 	and.w	r3, r3, #31
 80001f0:	fa12 f303 	lsls.w	r3, r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80001f4:	3120      	adds	r1, #32
 80001f6:	4a03      	ldr	r2, [pc, #12]	; (8000204 <NVIC_Init+0x68>)
 80001f8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80001fc:	bd10      	pop	{r4, pc}
 80001fe:	bf00      	nop
 8000200:	e000ed00 	.word	0xe000ed00
 8000204:	e000e100 	.word	0xe000e100

08000208 <NVIC_SetVectorTable>:
{ 
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 8000208:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
 800020c:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 8000210:	4b01      	ldr	r3, [pc, #4]	; (8000218 <NVIC_SetVectorTable+0x10>)
 8000212:	4301      	orrs	r1, r0
 8000214:	6099      	str	r1, [r3, #8]
}
 8000216:	4770      	bx	lr
 8000218:	e000ed00 	.word	0xe000ed00

0800021c <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT: Low Power Sleep on Exit.
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
 800021c:	4b04      	ldr	r3, [pc, #16]	; (8000230 <NVIC_SystemLPConfig+0x14>)
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
  {
    SCB->SCR |= LowPowerMode;
 800021e:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 8000220:	b109      	cbz	r1, 8000226 <NVIC_SystemLPConfig+0xa>
  {
    SCB->SCR |= LowPowerMode;
 8000222:	4310      	orrs	r0, r2
 8000224:	e001      	b.n	800022a <NVIC_SystemLPConfig+0xe>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 8000226:	ea22 0000 	bic.w	r0, r2, r0
 800022a:	6118      	str	r0, [r3, #16]
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop
 8000230:	e000ed00 	.word	0xe000ed00

08000234 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
 8000234:	4b04      	ldr	r3, [pc, #16]	; (8000248 <SysTick_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8000236:	681a      	ldr	r2, [r3, #0]
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 8000238:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 800023a:	bf0c      	ite	eq
 800023c:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 8000240:	f022 0204 	bicne.w	r2, r2, #4
 8000244:	601a      	str	r2, [r3, #0]
 8000246:	4770      	bx	lr
 8000248:	e000e010 	.word	0xe000e010

0800024c <GPIO_DeInit>:
  * @note   By default, The GPIO pins are configured in input floating mode (except JTAG pins).
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 800024c:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
 800024e:	4b2c      	ldr	r3, [pc, #176]	; (8000300 <GPIO_DeInit+0xb4>)
 8000250:	4298      	cmp	r0, r3
 8000252:	d105      	bne.n	8000260 <GPIO_DeInit+0x14>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8000254:	2001      	movs	r0, #1
 8000256:	4601      	mov	r1, r0
 8000258:	f000 fc48 	bl	8000aec <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 800025c:	2001      	movs	r0, #1
 800025e:	e048      	b.n	80002f2 <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOB)
 8000260:	4b28      	ldr	r3, [pc, #160]	; (8000304 <GPIO_DeInit+0xb8>)
 8000262:	4298      	cmp	r0, r3
 8000264:	d105      	bne.n	8000272 <GPIO_DeInit+0x26>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8000266:	2002      	movs	r0, #2
 8000268:	2101      	movs	r1, #1
 800026a:	f000 fc3f 	bl	8000aec <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 800026e:	2002      	movs	r0, #2
 8000270:	e03f      	b.n	80002f2 <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOC)
 8000272:	4b25      	ldr	r3, [pc, #148]	; (8000308 <GPIO_DeInit+0xbc>)
 8000274:	4298      	cmp	r0, r3
 8000276:	d105      	bne.n	8000284 <GPIO_DeInit+0x38>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8000278:	2004      	movs	r0, #4
 800027a:	2101      	movs	r1, #1
 800027c:	f000 fc36 	bl	8000aec <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 8000280:	2004      	movs	r0, #4
 8000282:	e036      	b.n	80002f2 <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOD)
 8000284:	4b21      	ldr	r3, [pc, #132]	; (800030c <GPIO_DeInit+0xc0>)
 8000286:	4298      	cmp	r0, r3
 8000288:	d105      	bne.n	8000296 <GPIO_DeInit+0x4a>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 800028a:	2008      	movs	r0, #8
 800028c:	2101      	movs	r1, #1
 800028e:	f000 fc2d 	bl	8000aec <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 8000292:	2008      	movs	r0, #8
 8000294:	e02d      	b.n	80002f2 <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOE)
 8000296:	4b1e      	ldr	r3, [pc, #120]	; (8000310 <GPIO_DeInit+0xc4>)
 8000298:	4298      	cmp	r0, r3
 800029a:	d105      	bne.n	80002a8 <GPIO_DeInit+0x5c>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 800029c:	2010      	movs	r0, #16
 800029e:	2101      	movs	r1, #1
 80002a0:	f000 fc24 	bl	8000aec <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 80002a4:	2010      	movs	r0, #16
 80002a6:	e024      	b.n	80002f2 <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOF)
 80002a8:	4b1a      	ldr	r3, [pc, #104]	; (8000314 <GPIO_DeInit+0xc8>)
 80002aa:	4298      	cmp	r0, r3
 80002ac:	d105      	bne.n	80002ba <GPIO_DeInit+0x6e>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 80002ae:	2020      	movs	r0, #32
 80002b0:	2101      	movs	r1, #1
 80002b2:	f000 fc1b 	bl	8000aec <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 80002b6:	2020      	movs	r0, #32
 80002b8:	e01b      	b.n	80002f2 <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOG)
 80002ba:	4b17      	ldr	r3, [pc, #92]	; (8000318 <GPIO_DeInit+0xcc>)
 80002bc:	4298      	cmp	r0, r3
 80002be:	d105      	bne.n	80002cc <GPIO_DeInit+0x80>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 80002c0:	2040      	movs	r0, #64	; 0x40
 80002c2:	2101      	movs	r1, #1
 80002c4:	f000 fc12 	bl	8000aec <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 80002c8:	2040      	movs	r0, #64	; 0x40
 80002ca:	e012      	b.n	80002f2 <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOH)
 80002cc:	4b13      	ldr	r3, [pc, #76]	; (800031c <GPIO_DeInit+0xd0>)
 80002ce:	4298      	cmp	r0, r3
 80002d0:	d105      	bne.n	80002de <GPIO_DeInit+0x92>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 80002d2:	2080      	movs	r0, #128	; 0x80
 80002d4:	2101      	movs	r1, #1
 80002d6:	f000 fc09 	bl	8000aec <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 80002da:	2080      	movs	r0, #128	; 0x80
 80002dc:	e009      	b.n	80002f2 <GPIO_DeInit+0xa6>
  }
  else
  {
    if (GPIOx == GPIOI)
 80002de:	4b10      	ldr	r3, [pc, #64]	; (8000320 <GPIO_DeInit+0xd4>)
 80002e0:	4298      	cmp	r0, r3
 80002e2:	d10b      	bne.n	80002fc <GPIO_DeInit+0xb0>
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 80002e4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80002e8:	2101      	movs	r1, #1
 80002ea:	f000 fbff 	bl	8000aec <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 80002ee:	f44f 7080 	mov.w	r0, #256	; 0x100
 80002f2:	2100      	movs	r1, #0
    }
  }
}
 80002f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (GPIOx == GPIOI)
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 80002f8:	f000 bbf8 	b.w	8000aec <RCC_AHB1PeriphResetCmd>
 80002fc:	bd08      	pop	{r3, pc}
 80002fe:	bf00      	nop
 8000300:	40020000 	.word	0x40020000
 8000304:	40020400 	.word	0x40020400
 8000308:	40020800 	.word	0x40020800
 800030c:	40020c00 	.word	0x40020c00
 8000310:	40021000 	.word	0x40021000
 8000314:	40021400 	.word	0x40021400
 8000318:	40021800 	.word	0x40021800
 800031c:	40021c00 	.word	0x40021c00
 8000320:	40022000 	.word	0x40022000

08000324 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
  {
    pos = ((uint32_t)0x01) << pinpos;
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000328:	2300      	movs	r3, #0
 800032a:	f8d1 8000 	ldr.w	r8, [r1]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800032e:	461a      	mov	r2, r3
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000330:	f04f 0c01 	mov.w	ip, #1
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000334:	2703      	movs	r7, #3

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000336:	fa0c f402 	lsl.w	r4, ip, r2
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800033a:	ea04 0508 	and.w	r5, r4, r8

    if (currentpin == pos)
 800033e:	42a5      	cmp	r5, r4
 8000340:	d12e      	bne.n	80003a0 <GPIO_Init+0x7c>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000342:	6806      	ldr	r6, [r0, #0]
 8000344:	fa17 f403 	lsls.w	r4, r7, r3
 8000348:	43e4      	mvns	r4, r4
 800034a:	4026      	ands	r6, r4
 800034c:	6006      	str	r6, [r0, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800034e:	790e      	ldrb	r6, [r1, #4]
 8000350:	f8d0 9000 	ldr.w	r9, [r0]
 8000354:	fa06 fa03 	lsl.w	sl, r6, r3

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000358:	3e01      	subs	r6, #1
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800035a:	ea4a 0909 	orr.w	r9, sl, r9

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800035e:	2e01      	cmp	r6, #1
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000360:	f8c0 9000 	str.w	r9, [r0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000364:	d814      	bhi.n	8000390 <GPIO_Init+0x6c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000366:	6886      	ldr	r6, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000368:	f891 9005 	ldrb.w	r9, [r1, #5]
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800036c:	4026      	ands	r6, r4
 800036e:	6086      	str	r6, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000370:	6886      	ldr	r6, [r0, #8]
 8000372:	fa09 f903 	lsl.w	r9, r9, r3
 8000376:	ea49 0606 	orr.w	r6, r9, r6
 800037a:	6086      	str	r6, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 800037c:	6846      	ldr	r6, [r0, #4]
 800037e:	ea26 0505 	bic.w	r5, r6, r5
 8000382:	6045      	str	r5, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000384:	798d      	ldrb	r5, [r1, #6]
 8000386:	6846      	ldr	r6, [r0, #4]
 8000388:	4095      	lsls	r5, r2
 800038a:	b2ad      	uxth	r5, r5
 800038c:	4335      	orrs	r5, r6
 800038e:	6045      	str	r5, [r0, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000390:	68c5      	ldr	r5, [r0, #12]
 8000392:	402c      	ands	r4, r5
 8000394:	60c4      	str	r4, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000396:	79cc      	ldrb	r4, [r1, #7]
 8000398:	68c5      	ldr	r5, [r0, #12]
 800039a:	409c      	lsls	r4, r3
 800039c:	432c      	orrs	r4, r5
 800039e:	60c4      	str	r4, [r0, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80003a0:	3201      	adds	r2, #1
 80003a2:	3302      	adds	r3, #2
 80003a4:	2a10      	cmp	r2, #16
 80003a6:	d1c6      	bne.n	8000336 <GPIO_Init+0x12>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080003ac <GPIO_StructInit>:
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 80003ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80003b0:	6003      	str	r3, [r0, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 80003b2:	2300      	movs	r3, #0
 80003b4:	7103      	strb	r3, [r0, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 80003b6:	7143      	strb	r3, [r0, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 80003b8:	7183      	strb	r3, [r0, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 80003ba:	71c3      	strb	r3, [r0, #7]
}
 80003bc:	4770      	bx	lr

080003be <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80003be:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0x00010000;
 80003c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003c4:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
 80003c6:	9b01      	ldr	r3, [sp, #4]
 80003c8:	430b      	orrs	r3, r1
 80003ca:	9301      	str	r3, [sp, #4]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 80003cc:	9b01      	ldr	r3, [sp, #4]
 80003ce:	61c3      	str	r3, [r0, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 80003d0:	61c1      	str	r1, [r0, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 80003d2:	9b01      	ldr	r3, [sp, #4]
 80003d4:	61c3      	str	r3, [r0, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 80003d6:	69c3      	ldr	r3, [r0, #28]
 80003d8:	9301      	str	r3, [sp, #4]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 80003da:	69c3      	ldr	r3, [r0, #28]
 80003dc:	9301      	str	r3, [sp, #4]
}
 80003de:	b002      	add	sp, #8
 80003e0:	4770      	bx	lr

080003e2 <GPIO_ReadInputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80003e2:	6903      	ldr	r3, [r0, #16]
  {
    bitstatus = (uint8_t)Bit_SET;
 80003e4:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 80003e6:	bf0c      	ite	eq
 80003e8:	2000      	moveq	r0, #0
 80003ea:	2001      	movne	r0, #1
 80003ec:	4770      	bx	lr

080003ee <GPIO_ReadInputData>:
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 80003ee:	6900      	ldr	r0, [r0, #16]
}
 80003f0:	b280      	uxth	r0, r0
 80003f2:	4770      	bx	lr

080003f4 <GPIO_ReadOutputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80003f4:	6943      	ldr	r3, [r0, #20]
  {
    bitstatus = (uint8_t)Bit_SET;
 80003f6:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 80003f8:	bf0c      	ite	eq
 80003fa:	2000      	moveq	r0, #0
 80003fc:	2001      	movne	r0, #1
 80003fe:	4770      	bx	lr

08000400 <GPIO_ReadOutputData>:
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
 8000400:	6940      	ldr	r0, [r0, #20]
}
 8000402:	b280      	uxth	r0, r0
 8000404:	4770      	bx	lr

08000406 <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8000406:	8301      	strh	r1, [r0, #24]
}
 8000408:	4770      	bx	lr

0800040a <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 800040a:	8341      	strh	r1, [r0, #26]
}
 800040c:	4770      	bx	lr

0800040e <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 800040e:	b10a      	cbz	r2, 8000414 <GPIO_WriteBit+0x6>
  {
    GPIOx->BSRRL = GPIO_Pin;
 8000410:	8301      	strh	r1, [r0, #24]
 8000412:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 8000414:	8341      	strh	r1, [r0, #26]
 8000416:	4770      	bx	lr

08000418 <GPIO_Write>:
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 8000418:	6141      	str	r1, [r0, #20]
}
 800041a:	4770      	bx	lr

0800041c <GPIO_ToggleBits>:
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 800041c:	6943      	ldr	r3, [r0, #20]
 800041e:	404b      	eors	r3, r1
 8000420:	6143      	str	r3, [r0, #20]
}
 8000422:	4770      	bx	lr

08000424 <GPIO_PinAFConfig>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000424:	f001 0307 	and.w	r3, r1, #7
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000428:	08c9      	lsrs	r1, r1, #3
 800042a:	3108      	adds	r1, #8
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 800042c:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800042e:	009b      	lsls	r3, r3, #2
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000430:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
 8000434:	240f      	movs	r4, #15
 8000436:	409c      	lsls	r4, r3
 8000438:	ea25 0404 	bic.w	r4, r5, r4
 800043c:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000440:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000444:	fa12 f303 	lsls.w	r3, r2, r3
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000448:	431c      	orrs	r4, r3
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 800044a:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
}
 800044e:	bd30      	pop	{r4, r5, pc}

08000450 <I2C_DeInit>:
  * @brief  Deinitialize the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 8000450:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 8000452:	4b13      	ldr	r3, [pc, #76]	; (80004a0 <I2C_DeInit+0x50>)
 8000454:	4298      	cmp	r0, r3
 8000456:	d107      	bne.n	8000468 <I2C_DeInit+0x18>
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 8000458:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800045c:	2101      	movs	r1, #1
 800045e:	f000 fb69 	bl	8000b34 <RCC_APB1PeriphResetCmd>
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
 8000462:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000466:	e014      	b.n	8000492 <I2C_DeInit+0x42>
  }
  else if (I2Cx == I2C2)
 8000468:	4b0e      	ldr	r3, [pc, #56]	; (80004a4 <I2C_DeInit+0x54>)
 800046a:	4298      	cmp	r0, r3
 800046c:	d107      	bne.n	800047e <I2C_DeInit+0x2e>
  {
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 800046e:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000472:	2101      	movs	r1, #1
 8000474:	f000 fb5e 	bl	8000b34 <RCC_APB1PeriphResetCmd>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
 8000478:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800047c:	e009      	b.n	8000492 <I2C_DeInit+0x42>
  }
  else 
  {
    if (I2Cx == I2C3)
 800047e:	4b0a      	ldr	r3, [pc, #40]	; (80004a8 <I2C_DeInit+0x58>)
 8000480:	4298      	cmp	r0, r3
 8000482:	d10b      	bne.n	800049c <I2C_DeInit+0x4c>
    {
      /* Enable I2C3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
 8000484:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000488:	2101      	movs	r1, #1
 800048a:	f000 fb53 	bl	8000b34 <RCC_APB1PeriphResetCmd>
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 800048e:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000492:	2100      	movs	r1, #0
    }
  }
}
 8000494:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if (I2Cx == I2C3)
    {
      /* Enable I2C3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 8000498:	f000 bb4c 	b.w	8000b34 <RCC_APB1PeriphResetCmd>
 800049c:	bd08      	pop	{r3, pc}
 800049e:	bf00      	nop
 80004a0:	40005400 	.word	0x40005400
 80004a4:	40005800 	.word	0x40005800
 80004a8:	40005c00 	.word	0x40005c00

080004ac <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 80004ac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80004ae:	4604      	mov	r4, r0
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 80004b0:	8886      	ldrh	r6, [r0, #4]
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 80004b2:	4668      	mov	r0, sp
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 80004b4:	460d      	mov	r5, r1
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 80004b6:	f000 fa6d 	bl	8000994 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 80004ba:	9902      	ldr	r1, [sp, #8]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 80004bc:	482c      	ldr	r0, [pc, #176]	; (8000570 <I2C_Init+0xc4>)
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 80004be:	682b      	ldr	r3, [r5, #0]

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 80004c0:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
 80004c4:	0436      	lsls	r6, r6, #16
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
  pclk1 = rcc_clocks.PCLK1_Frequency;
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 80004c6:	fbb1 f0f0 	udiv	r0, r1, r0

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 80004ca:	0c36      	lsrs	r6, r6, #16
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
  pclk1 = rcc_clocks.PCLK1_Frequency;
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 80004cc:	b280      	uxth	r0, r0
  tmpreg |= freqrange;
 80004ce:	4306      	orrs	r6, r0
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 80004d0:	80a6      	strh	r6, [r4, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 80004d2:	8822      	ldrh	r2, [r4, #0]
 80004d4:	f022 0201 	bic.w	r2, r2, #1
 80004d8:	0412      	lsls	r2, r2, #16
 80004da:	0c12      	lsrs	r2, r2, #16
 80004dc:	8022      	strh	r2, [r4, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 80004de:	4a25      	ldr	r2, [pc, #148]	; (8000574 <I2C_Init+0xc8>)
 80004e0:	4293      	cmp	r3, r2
 80004e2:	d80a      	bhi.n	80004fa <I2C_Init+0x4e>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 80004e4:	005b      	lsls	r3, r3, #1
 80004e6:	fbb1 f3f3 	udiv	r3, r1, r3
      result = 0x04;  
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 80004ea:	3001      	adds	r0, #1

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 80004ec:	b29b      	uxth	r3, r3
      result = 0x04;  
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 80004ee:	b280      	uxth	r0, r0
 80004f0:	8420      	strh	r0, [r4, #32]
    {
      /* Set minimum allowed value */
      result = 0x04;  
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 80004f2:	2b03      	cmp	r3, #3
 80004f4:	bf98      	it	ls
 80004f6:	2304      	movls	r3, #4
 80004f8:	e021      	b.n	800053e <I2C_Init+0x92>
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 80004fa:	88ee      	ldrh	r6, [r5, #6]
 80004fc:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 8000500:	4296      	cmp	r6, r2
 8000502:	d105      	bne.n	8000510 <I2C_Init+0x64>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 8000504:	2203      	movs	r2, #3
 8000506:	4353      	muls	r3, r2
 8000508:	fbb1 f3f3 	udiv	r3, r1, r3
 800050c:	b29b      	uxth	r3, r3
 800050e:	e006      	b.n	800051e <I2C_Init+0x72>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 8000510:	2219      	movs	r2, #25
 8000512:	4353      	muls	r3, r2
 8000514:	fbb1 f3f3 	udiv	r3, r1, r3
 8000518:	b29b      	uxth	r3, r3
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 800051a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 800051e:	051a      	lsls	r2, r3, #20
      result |= (uint16_t)0x0001;  
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8000520:	f44f 7296 	mov.w	r2, #300	; 0x12c

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 8000524:	bf08      	it	eq
 8000526:	f043 0301 	orreq.w	r3, r3, #1
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 800052a:	4350      	muls	r0, r2
 800052c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000530:	fb90 f0f2 	sdiv	r0, r0, r2
 8000534:	3001      	adds	r0, #1
 8000536:	b280      	uxth	r0, r0
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 8000538:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 800053c:	8420      	strh	r0, [r4, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 800053e:	83a3      	strh	r3, [r4, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 8000540:	8823      	ldrh	r3, [r4, #0]
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8000542:	8969      	ldrh	r1, [r5, #10]
 8000544:	88aa      	ldrh	r2, [r5, #4]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 8000546:	b29b      	uxth	r3, r3
 8000548:	f043 0301 	orr.w	r3, r3, #1
 800054c:	8023      	strh	r3, [r4, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 800054e:	8823      	ldrh	r3, [r4, #0]
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 8000550:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 8000554:	f023 0302 	bic.w	r3, r3, #2
 8000558:	041b      	lsls	r3, r3, #16
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 800055a:	430a      	orrs	r2, r1

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 800055c:	0c1b      	lsrs	r3, r3, #16
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 800055e:	4313      	orrs	r3, r2
 8000560:	b29b      	uxth	r3, r3
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 8000562:	8023      	strh	r3, [r4, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 8000564:	892a      	ldrh	r2, [r5, #8]
 8000566:	89ab      	ldrh	r3, [r5, #12]
 8000568:	4313      	orrs	r3, r2
 800056a:	b29b      	uxth	r3, r3
 800056c:	8123      	strh	r3, [r4, #8]
}
 800056e:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
 8000570:	000f4240 	.word	0x000f4240
 8000574:	000186a0 	.word	0x000186a0

08000578 <I2C_StructInit>:
  */
void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
{
/*---------------- Reset I2C init structure parameters values ----------------*/
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
 8000578:	f241 3388 	movw	r3, #5000	; 0x1388
 800057c:	6003      	str	r3, [r0, #0]
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 800057e:	2300      	movs	r3, #0
 8000580:	8083      	strh	r3, [r0, #4]
  /* Initialize the I2C_DutyCycle member */
  I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 8000582:	f64b 72ff 	movw	r2, #49151	; 0xbfff
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
 8000586:	8103      	strh	r3, [r0, #8]
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
 8000588:	8143      	strh	r3, [r0, #10]
  /* Initialize the I2C_AcknowledgedAddress member */
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 800058a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
  /* Initialize the I2C_DutyCycle member */
  I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 800058e:	80c2      	strh	r2, [r0, #6]
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
  /* Initialize the I2C_AcknowledgedAddress member */
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8000590:	8183      	strh	r3, [r0, #12]
}
 8000592:	4770      	bx	lr

08000594 <I2C_Cmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 8000594:	8803      	ldrh	r3, [r0, #0]
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000596:	b119      	cbz	r1, 80005a0 <I2C_Cmd+0xc>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 8000598:	b29b      	uxth	r3, r3
 800059a:	f043 0301 	orr.w	r3, r3, #1
 800059e:	e003      	b.n	80005a8 <I2C_Cmd+0x14>
  }
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 80005a0:	f023 0301 	bic.w	r3, r3, #1
 80005a4:	041b      	lsls	r3, r3, #16
 80005a6:	0c1b      	lsrs	r3, r3, #16
 80005a8:	8003      	strh	r3, [r0, #0]
 80005aa:	4770      	bx	lr

080005ac <I2C_GenerateSTART>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 80005ac:	8803      	ldrh	r3, [r0, #0]
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80005ae:	b119      	cbz	r1, 80005b8 <I2C_GenerateSTART+0xc>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 80005b0:	b29b      	uxth	r3, r3
 80005b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005b6:	e003      	b.n	80005c0 <I2C_GenerateSTART+0x14>
  }
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 80005b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80005bc:	041b      	lsls	r3, r3, #16
 80005be:	0c1b      	lsrs	r3, r3, #16
 80005c0:	8003      	strh	r3, [r0, #0]
 80005c2:	4770      	bx	lr

080005c4 <I2C_GenerateSTOP>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 80005c4:	8803      	ldrh	r3, [r0, #0]
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80005c6:	b119      	cbz	r1, 80005d0 <I2C_GenerateSTOP+0xc>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 80005c8:	b29b      	uxth	r3, r3
 80005ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005ce:	e003      	b.n	80005d8 <I2C_GenerateSTOP+0x14>
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 80005d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80005d4:	041b      	lsls	r3, r3, #16
 80005d6:	0c1b      	lsrs	r3, r3, #16
 80005d8:	8003      	strh	r3, [r0, #0]
 80005da:	4770      	bx	lr

080005dc <I2C_Send7bitAddress>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 80005dc:	b112      	cbz	r2, 80005e4 <I2C_Send7bitAddress+0x8>
  {
    /* Set the address bit0 for read */
    Address |= I2C_OAR1_ADD0;
 80005de:	f041 0101 	orr.w	r1, r1, #1
 80005e2:	e001      	b.n	80005e8 <I2C_Send7bitAddress+0xc>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 80005e4:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
  }
  /* Send the address */
  I2Cx->DR = Address;
 80005e8:	8201      	strh	r1, [r0, #16]
}
 80005ea:	4770      	bx	lr

080005ec <I2C_AcknowledgeConfig>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 80005ec:	8803      	ldrh	r3, [r0, #0]
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80005ee:	b119      	cbz	r1, 80005f8 <I2C_AcknowledgeConfig+0xc>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 80005f0:	b29b      	uxth	r3, r3
 80005f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005f6:	e003      	b.n	8000600 <I2C_AcknowledgeConfig+0x14>
  }
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 80005f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80005fc:	041b      	lsls	r3, r3, #16
 80005fe:	0c1b      	lsrs	r3, r3, #16
 8000600:	8003      	strh	r3, [r0, #0]
 8000602:	4770      	bx	lr

08000604 <I2C_OwnAddress2Config>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Get the old register value */
  tmpreg = I2Cx->OAR2;
 8000604:	8983      	ldrh	r3, [r0, #12]
 8000606:	b29b      	uxth	r3, r3

  /* Reset I2Cx Own address2 bit [7:1] */
  tmpreg &= (uint16_t)~((uint16_t)I2C_OAR2_ADD2);

  /* Set I2Cx Own address2 */
  tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
 8000608:	f001 01fe 	and.w	r1, r1, #254	; 0xfe

  /* Get the old register value */
  tmpreg = I2Cx->OAR2;

  /* Reset I2Cx Own address2 bit [7:1] */
  tmpreg &= (uint16_t)~((uint16_t)I2C_OAR2_ADD2);
 800060c:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe

  /* Set I2Cx Own address2 */
  tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
 8000610:	430b      	orrs	r3, r1

  /* Store the new register value */
  I2Cx->OAR2 = tmpreg;
 8000612:	8183      	strh	r3, [r0, #12]
}
 8000614:	4770      	bx	lr

08000616 <I2C_DualAddressCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable dual addressing mode */
    I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
 8000616:	8983      	ldrh	r3, [r0, #12]
void I2C_DualAddressCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000618:	b119      	cbz	r1, 8000622 <I2C_DualAddressCmd+0xc>
  {
    /* Enable dual addressing mode */
    I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
 800061a:	b29b      	uxth	r3, r3
 800061c:	f043 0301 	orr.w	r3, r3, #1
 8000620:	e003      	b.n	800062a <I2C_DualAddressCmd+0x14>
  }
  else
  {
    /* Disable dual addressing mode */
    I2Cx->OAR2 &= (uint16_t)~((uint16_t)I2C_OAR2_ENDUAL);
 8000622:	f023 0301 	bic.w	r3, r3, #1
 8000626:	041b      	lsls	r3, r3, #16
 8000628:	0c1b      	lsrs	r3, r3, #16
 800062a:	8183      	strh	r3, [r0, #12]
 800062c:	4770      	bx	lr

0800062e <I2C_GeneralCallCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable generall call */
    I2Cx->CR1 |= I2C_CR1_ENGC;
 800062e:	8803      	ldrh	r3, [r0, #0]
void I2C_GeneralCallCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000630:	b119      	cbz	r1, 800063a <I2C_GeneralCallCmd+0xc>
  {
    /* Enable generall call */
    I2Cx->CR1 |= I2C_CR1_ENGC;
 8000632:	b29b      	uxth	r3, r3
 8000634:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000638:	e003      	b.n	8000642 <I2C_GeneralCallCmd+0x14>
  }
  else
  {
    /* Disable generall call */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENGC);
 800063a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800063e:	041b      	lsls	r3, r3, #16
 8000640:	0c1b      	lsrs	r3, r3, #16
 8000642:	8003      	strh	r3, [r0, #0]
 8000644:	4770      	bx	lr

08000646 <I2C_SoftwareResetCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Peripheral under reset */
    I2Cx->CR1 |= I2C_CR1_SWRST;
 8000646:	8803      	ldrh	r3, [r0, #0]
void I2C_SoftwareResetCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000648:	b129      	cbz	r1, 8000656 <I2C_SoftwareResetCmd+0x10>
  {
    /* Peripheral under reset */
    I2Cx->CR1 |= I2C_CR1_SWRST;
 800064a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800064e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000652:	b29b      	uxth	r3, r3
 8000654:	e001      	b.n	800065a <I2C_SoftwareResetCmd+0x14>
  }
  else
  {
    /* Peripheral not under reset */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_SWRST);
 8000656:	045b      	lsls	r3, r3, #17
 8000658:	0c5b      	lsrs	r3, r3, #17
 800065a:	8003      	strh	r3, [r0, #0]
 800065c:	4770      	bx	lr

0800065e <I2C_StretchClockCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState == DISABLE)
  {
    /* Enable the selected I2C Clock stretching */
    I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 800065e:	8803      	ldrh	r3, [r0, #0]
void I2C_StretchClockCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState == DISABLE)
 8000660:	b919      	cbnz	r1, 800066a <I2C_StretchClockCmd+0xc>
  {
    /* Enable the selected I2C Clock stretching */
    I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 8000662:	b29b      	uxth	r3, r3
 8000664:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000668:	e003      	b.n	8000672 <I2C_StretchClockCmd+0x14>
  }
  else
  {
    /* Disable the selected I2C Clock stretching */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_NOSTRETCH);
 800066a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800066e:	041b      	lsls	r3, r3, #16
 8000670:	0c1b      	lsrs	r3, r3, #16
 8000672:	8003      	strh	r3, [r0, #0]
 8000674:	4770      	bx	lr

08000676 <I2C_FastModeDutyCycleConfig>:
void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
  if (I2C_DutyCycle != I2C_DutyCycle_16_9)
 8000676:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
  {
    /* I2C fast mode Tlow/Thigh=2 */
    I2Cx->CCR &= I2C_DutyCycle_2;
 800067a:	8b83      	ldrh	r3, [r0, #28]
void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
  if (I2C_DutyCycle != I2C_DutyCycle_16_9)
 800067c:	d004      	beq.n	8000688 <I2C_FastModeDutyCycleConfig+0x12>
  {
    /* I2C fast mode Tlow/Thigh=2 */
    I2Cx->CCR &= I2C_DutyCycle_2;
 800067e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000682:	041b      	lsls	r3, r3, #16
 8000684:	0c1b      	lsrs	r3, r3, #16
 8000686:	e002      	b.n	800068e <I2C_FastModeDutyCycleConfig+0x18>
  }
  else
  {
    /* I2C fast mode Tlow/Thigh=16/9 */
    I2Cx->CCR |= I2C_DutyCycle_16_9;
 8000688:	b29b      	uxth	r3, r3
 800068a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800068e:	8383      	strh	r3, [r0, #28]
 8000690:	4770      	bx	lr

08000692 <I2C_NACKPositionConfig>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_NACK_POSITION(I2C_NACKPosition));
  
  /* Check the input parameter */
  if (I2C_NACKPosition == I2C_NACKPosition_Next)
 8000692:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
  {
    /* Next byte in shift register is the last received byte */
    I2Cx->CR1 |= I2C_NACKPosition_Next;
 8000696:	8803      	ldrh	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_NACK_POSITION(I2C_NACKPosition));
  
  /* Check the input parameter */
  if (I2C_NACKPosition == I2C_NACKPosition_Next)
 8000698:	d103      	bne.n	80006a2 <I2C_NACKPositionConfig+0x10>
  {
    /* Next byte in shift register is the last received byte */
    I2Cx->CR1 |= I2C_NACKPosition_Next;
 800069a:	b29b      	uxth	r3, r3
 800069c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80006a0:	e003      	b.n	80006aa <I2C_NACKPositionConfig+0x18>
  }
  else
  {
    /* Current byte in shift register is the last received byte */
    I2Cx->CR1 &= I2C_NACKPosition_Current;
 80006a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80006a6:	041b      	lsls	r3, r3, #16
 80006a8:	0c1b      	lsrs	r3, r3, #16
 80006aa:	8003      	strh	r3, [r0, #0]
 80006ac:	4770      	bx	lr

080006ae <I2C_SMBusAlertConfig>:
void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
 80006ae:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
  {
    /* Drive the SMBusAlert pin Low */
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
 80006b2:	8803      	ldrh	r3, [r0, #0]
void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
 80006b4:	d103      	bne.n	80006be <I2C_SMBusAlertConfig+0x10>
  {
    /* Drive the SMBusAlert pin Low */
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
 80006b6:	b29b      	uxth	r3, r3
 80006b8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80006bc:	e003      	b.n	80006c6 <I2C_SMBusAlertConfig+0x18>
  }
  else
  {
    /* Drive the SMBusAlert pin High  */
    I2Cx->CR1 &= I2C_SMBusAlert_High;
 80006be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80006c2:	041b      	lsls	r3, r3, #16
 80006c4:	0c1b      	lsrs	r3, r3, #16
 80006c6:	8003      	strh	r3, [r0, #0]
 80006c8:	4770      	bx	lr

080006ca <I2C_ARPCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C ARP */
    I2Cx->CR1 |= I2C_CR1_ENARP;
 80006ca:	8803      	ldrh	r3, [r0, #0]
void I2C_ARPCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80006cc:	b119      	cbz	r1, 80006d6 <I2C_ARPCmd+0xc>
  {
    /* Enable the selected I2C ARP */
    I2Cx->CR1 |= I2C_CR1_ENARP;
 80006ce:	b29b      	uxth	r3, r3
 80006d0:	f043 0310 	orr.w	r3, r3, #16
 80006d4:	e003      	b.n	80006de <I2C_ARPCmd+0x14>
  }
  else
  {
    /* Disable the selected I2C ARP */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENARP);
 80006d6:	f023 0310 	bic.w	r3, r3, #16
 80006da:	041b      	lsls	r3, r3, #16
 80006dc:	0c1b      	lsrs	r3, r3, #16
 80006de:	8003      	strh	r3, [r0, #0]
 80006e0:	4770      	bx	lr

080006e2 <I2C_SendData>:
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 80006e2:	8201      	strh	r1, [r0, #16]
}
 80006e4:	4770      	bx	lr

080006e6 <I2C_ReceiveData>:
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 80006e6:	8a00      	ldrh	r0, [r0, #16]
}
 80006e8:	b2c0      	uxtb	r0, r0
 80006ea:	4770      	bx	lr

080006ec <I2C_TransmitPEC>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C PEC transmission */
    I2Cx->CR1 |= I2C_CR1_PEC;
 80006ec:	8803      	ldrh	r3, [r0, #0]
void I2C_TransmitPEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80006ee:	b119      	cbz	r1, 80006f8 <I2C_TransmitPEC+0xc>
  {
    /* Enable the selected I2C PEC transmission */
    I2Cx->CR1 |= I2C_CR1_PEC;
 80006f0:	b29b      	uxth	r3, r3
 80006f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006f6:	e003      	b.n	8000700 <I2C_TransmitPEC+0x14>
  }
  else
  {
    /* Disable the selected I2C PEC transmission */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PEC);
 80006f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80006fc:	041b      	lsls	r3, r3, #16
 80006fe:	0c1b      	lsrs	r3, r3, #16
 8000700:	8003      	strh	r3, [r0, #0]
 8000702:	4770      	bx	lr

08000704 <I2C_PECPositionConfig>:
void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
 8000704:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
  {
    /* Next byte in shift register is PEC */
    I2Cx->CR1 |= I2C_PECPosition_Next;
 8000708:	8803      	ldrh	r3, [r0, #0]
void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
 800070a:	d103      	bne.n	8000714 <I2C_PECPositionConfig+0x10>
  {
    /* Next byte in shift register is PEC */
    I2Cx->CR1 |= I2C_PECPosition_Next;
 800070c:	b29b      	uxth	r3, r3
 800070e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000712:	e003      	b.n	800071c <I2C_PECPositionConfig+0x18>
  }
  else
  {
    /* Current byte in shift register is PEC */
    I2Cx->CR1 &= I2C_PECPosition_Current;
 8000714:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000718:	041b      	lsls	r3, r3, #16
 800071a:	0c1b      	lsrs	r3, r3, #16
 800071c:	8003      	strh	r3, [r0, #0]
 800071e:	4770      	bx	lr

08000720 <I2C_CalculatePEC>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C PEC calculation */
    I2Cx->CR1 |= I2C_CR1_ENPEC;
 8000720:	8803      	ldrh	r3, [r0, #0]
void I2C_CalculatePEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000722:	b119      	cbz	r1, 800072c <I2C_CalculatePEC+0xc>
  {
    /* Enable the selected I2C PEC calculation */
    I2Cx->CR1 |= I2C_CR1_ENPEC;
 8000724:	b29b      	uxth	r3, r3
 8000726:	f043 0320 	orr.w	r3, r3, #32
 800072a:	e003      	b.n	8000734 <I2C_CalculatePEC+0x14>
  }
  else
  {
    /* Disable the selected I2C PEC calculation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENPEC);
 800072c:	f023 0320 	bic.w	r3, r3, #32
 8000730:	041b      	lsls	r3, r3, #16
 8000732:	0c1b      	lsrs	r3, r3, #16
 8000734:	8003      	strh	r3, [r0, #0]
 8000736:	4770      	bx	lr

08000738 <I2C_GetPEC>:
uint8_t I2C_GetPEC(I2C_TypeDef* I2Cx)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the selected I2C PEC value */
  return ((I2Cx->SR2) >> 8);
 8000738:	8b00      	ldrh	r0, [r0, #24]
}
 800073a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800073e:	4770      	bx	lr

08000740 <I2C_DMACmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR2 |= I2C_CR2_DMAEN;
 8000740:	8883      	ldrh	r3, [r0, #4]
void I2C_DMACmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000742:	b119      	cbz	r1, 800074c <I2C_DMACmd+0xc>
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR2 |= I2C_CR2_DMAEN;
 8000744:	b29b      	uxth	r3, r3
 8000746:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800074a:	e003      	b.n	8000754 <I2C_DMACmd+0x14>
  }
  else
  {
    /* Disable the selected I2C DMA requests */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_DMAEN);
 800074c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000750:	041b      	lsls	r3, r3, #16
 8000752:	0c1b      	lsrs	r3, r3, #16
 8000754:	8083      	strh	r3, [r0, #4]
 8000756:	4770      	bx	lr

08000758 <I2C_DMALastTransferCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Next DMA transfer is the last transfer */
    I2Cx->CR2 |= I2C_CR2_LAST;
 8000758:	8883      	ldrh	r3, [r0, #4]
void I2C_DMALastTransferCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800075a:	b119      	cbz	r1, 8000764 <I2C_DMALastTransferCmd+0xc>
  {
    /* Next DMA transfer is the last transfer */
    I2Cx->CR2 |= I2C_CR2_LAST;
 800075c:	b29b      	uxth	r3, r3
 800075e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000762:	e003      	b.n	800076c <I2C_DMALastTransferCmd+0x14>
  }
  else
  {
    /* Next DMA transfer is not the last transfer */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_LAST);
 8000764:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000768:	041b      	lsls	r3, r3, #16
 800076a:	0c1b      	lsrs	r3, r3, #16
 800076c:	8083      	strh	r3, [r0, #4]
 800076e:	4770      	bx	lr

08000770 <I2C_ReadRegister>:
  *            @arg I2C_Register_CCR:   CCR register.
  *            @arg I2C_Register_TRISE: TRISE register.
  * @retval The value of the read register.
  */
uint16_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register)
{
 8000770:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 8000772:	2300      	movs	r3, #0
 8000774:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_REGISTER(I2C_Register));

  tmp = (uint32_t) I2Cx;
 8000776:	9001      	str	r0, [sp, #4]
  tmp += I2C_Register;
 8000778:	9b01      	ldr	r3, [sp, #4]
 800077a:	18cb      	adds	r3, r1, r3
 800077c:	9301      	str	r3, [sp, #4]

  /* Return the selected register value */
  return (*(__IO uint16_t *) tmp);
 800077e:	9b01      	ldr	r3, [sp, #4]
 8000780:	8818      	ldrh	r0, [r3, #0]
}
 8000782:	b280      	uxth	r0, r0
 8000784:	b002      	add	sp, #8
 8000786:	4770      	bx	lr

08000788 <I2C_ITConfig>:
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 8000788:	8883      	ldrh	r3, [r0, #4]
 800078a:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
 800078c:	b10a      	cbz	r2, 8000792 <I2C_ITConfig+0xa>
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 800078e:	4319      	orrs	r1, r3
 8000790:	e001      	b.n	8000796 <I2C_ITConfig+0xe>
  }
  else
  {
    /* Disable the selected I2C interrupts */
    I2Cx->CR2 &= (uint16_t)~I2C_IT;
 8000792:	ea23 0101 	bic.w	r1, r3, r1
 8000796:	8081      	strh	r1, [r0, #4]
 8000798:	4770      	bx	lr

0800079a <I2C_CheckEvent>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 800079a:	8a83      	ldrh	r3, [r0, #20]
  flag2 = I2Cx->SR2;
 800079c:	8b00      	ldrh	r0, [r0, #24]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 800079e:	b29b      	uxth	r3, r3
  flag2 = I2Cx->SR2;
  flag2 = flag2 << 16;

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 80007a0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80007a4:	4008      	ands	r0, r1

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 80007a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
  }
  /* Return status */
  return status;
}
 80007aa:	1a43      	subs	r3, r0, r1
 80007ac:	4258      	negs	r0, r3
 80007ae:	eb40 0003 	adc.w	r0, r0, r3
 80007b2:	4770      	bx	lr

080007b4 <I2C_GetLastEvent>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 80007b4:	8a83      	ldrh	r3, [r0, #20]
  flag2 = I2Cx->SR2;
 80007b6:	8b00      	ldrh	r0, [r0, #24]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 80007b8:	b29b      	uxth	r3, r3
  flag2 = I2Cx->SR2;
  flag2 = flag2 << 16;

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 80007ba:	ea43 4000 	orr.w	r0, r3, r0, lsl #16

  /* Return status */
  return lastevent;
}
 80007be:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80007c2:	4770      	bx	lr

080007c4 <I2C_GetFlagStatus>:
  *                                Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 80007c4:	b082      	sub	sp, #8
  FlagStatus bitstatus = RESET;
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 80007c6:	2300      	movs	r3, #0
 80007c8:	9300      	str	r3, [sp, #0]
 80007ca:	9301      	str	r3, [sp, #4]

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 80007cc:	0f0b      	lsrs	r3, r1, #28
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 80007ce:	9001      	str	r0, [sp, #4]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 80007d0:	9300      	str	r3, [sp, #0]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
  
  if(i2creg != 0)
 80007d2:	9b00      	ldr	r3, [sp, #0]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 80007d4:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
  
  if(i2creg != 0)
 80007d8:	b113      	cbz	r3, 80007e0 <I2C_GetFlagStatus+0x1c>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 80007da:	9b01      	ldr	r3, [sp, #4]
 80007dc:	3314      	adds	r3, #20
 80007de:	e002      	b.n	80007e6 <I2C_GetFlagStatus+0x22>
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 80007e0:	9b01      	ldr	r3, [sp, #4]
    i2cxbase += 0x14;
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 80007e2:	0c09      	lsrs	r1, r1, #16
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 80007e4:	3318      	adds	r3, #24
 80007e6:	9301      	str	r3, [sp, #4]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 80007e8:	9b01      	ldr	r3, [sp, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 80007ec:	4219      	tst	r1, r3
    bitstatus = RESET;
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
}
 80007ee:	bf0c      	ite	eq
 80007f0:	2000      	moveq	r0, #0
 80007f2:	2001      	movne	r0, #1
 80007f4:	b002      	add	sp, #8
 80007f6:	4770      	bx	lr

080007f8 <I2C_ClearFlag>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));
  /* Get the I2C flag position */
  flagpos = I2C_FLAG & FLAG_MASK;
  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 80007f8:	43c9      	mvns	r1, r1
 80007fa:	b289      	uxth	r1, r1
 80007fc:	8281      	strh	r1, [r0, #20]
}
 80007fe:	4770      	bx	lr

08000800 <I2C_GetITStatus>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 8000800:	8883      	ldrh	r3, [r0, #4]
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_MASK;

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 8000802:	8a80      	ldrh	r0, [r0, #20]
 8000804:	b280      	uxth	r0, r0
 8000806:	4008      	ands	r0, r1
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 8000808:	b29b      	uxth	r3, r3
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_MASK;

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 800080a:	d006      	beq.n	800081a <I2C_GetITStatus+0x1a>
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 800080c:	f001 61e0 	and.w	r1, r1, #117440512	; 0x7000000
  *            @arg I2C_IT_ADDR: Address sent flag (Master mode) "ADSL"
  *                              Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_IT_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_IT (SET or RESET).
  */
ITStatus I2C_GetITStatus(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
 8000810:	ea13 4111 	ands.w	r1, r3, r1, lsr #16

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
  {
    /* I2C_IT is set */
    bitstatus = SET;
 8000814:	bf0c      	ite	eq
 8000816:	2000      	moveq	r0, #0
 8000818:	2001      	movne	r0, #1
    /* I2C_IT is reset */
    bitstatus = RESET;
  }
  /* Return the I2C_IT status */
  return  bitstatus;
}
 800081a:	4770      	bx	lr

0800081c <I2C_ClearITPendingBit>:

  /* Get the I2C flag position */
  flagpos = I2C_IT & FLAG_MASK;

  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 800081c:	43c9      	mvns	r1, r1
 800081e:	b289      	uxth	r1, r1
 8000820:	8281      	strh	r1, [r0, #20]
}
 8000822:	4770      	bx	lr

08000824 <RCC_DeInit>:
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000824:	4b0a      	ldr	r3, [pc, #40]	; (8000850 <RCC_DeInit+0x2c>)
 8000826:	681a      	ldr	r2, [r3, #0]
 8000828:	f042 0201 	orr.w	r2, r2, #1
 800082c:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800082e:	2200      	movs	r2, #0
 8000830:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000832:	6819      	ldr	r1, [r3, #0]
 8000834:	f021 7184 	bic.w	r1, r1, #17301504	; 0x1080000
 8000838:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800083c:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800083e:	4905      	ldr	r1, [pc, #20]	; (8000854 <RCC_DeInit+0x30>)
 8000840:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000842:	6819      	ldr	r1, [r3, #0]
 8000844:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8000848:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800084a:	60da      	str	r2, [r3, #12]
}
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	40023800 	.word	0x40023800
 8000854:	24003010 	.word	0x24003010

08000858 <RCC_HSEConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 8000858:	4b02      	ldr	r3, [pc, #8]	; (8000864 <RCC_HSEConfig+0xc>)
 800085a:	2200      	movs	r2, #0
 800085c:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 800085e:	7018      	strb	r0, [r3, #0]
}
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	40023802 	.word	0x40023802

08000868 <RCC_AdjustHSICalibrationValue>:
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
 8000868:	4b03      	ldr	r3, [pc, #12]	; (8000878 <RCC_AdjustHSICalibrationValue+0x10>)
 800086a:	681a      	ldr	r2, [r3, #0]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 800086c:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 8000870:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3

  /* Store the new value */
  RCC->CR = tmpreg;
 8000874:	601a      	str	r2, [r3, #0]
}
 8000876:	4770      	bx	lr
 8000878:	40023800 	.word	0x40023800

0800087c <RCC_HSICmd>:
void RCC_HSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 800087c:	4b01      	ldr	r3, [pc, #4]	; (8000884 <RCC_HSICmd+0x8>)
 800087e:	6018      	str	r0, [r3, #0]
}
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	42470000 	.word	0x42470000

08000888 <RCC_LSEConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8000888:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <RCC_LSEConfig+0x1c>)
 800088a:	2200      	movs	r2, #0

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 800088c:	2801      	cmp	r0, #1
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 800088e:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8000890:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 8000892:	d002      	beq.n	800089a <RCC_LSEConfig+0x12>
 8000894:	2804      	cmp	r0, #4
 8000896:	d104      	bne.n	80008a2 <RCC_LSEConfig+0x1a>
 8000898:	e001      	b.n	800089e <RCC_LSEConfig+0x16>
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 800089a:	7018      	strb	r0, [r3, #0]
      break;
 800089c:	4770      	bx	lr
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 800089e:	2205      	movs	r2, #5
 80008a0:	701a      	strb	r2, [r3, #0]
 80008a2:	4770      	bx	lr
 80008a4:	40023870 	.word	0x40023870

080008a8 <RCC_LSICmd>:
void RCC_LSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 80008a8:	4b01      	ldr	r3, [pc, #4]	; (80008b0 <RCC_LSICmd+0x8>)
 80008aa:	6018      	str	r0, [r3, #0]
}
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	42470e80 	.word	0x42470e80

080008b4 <RCC_PLLConfig>:
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 80008b4:	4301      	orrs	r1, r0
 80008b6:	ea41 1282 	orr.w	r2, r1, r2, lsl #6
 80008ba:	9900      	ldr	r1, [sp, #0]
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	3b01      	subs	r3, #1
 80008c0:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80008c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008c8:	4b01      	ldr	r3, [pc, #4]	; (80008d0 <RCC_PLLConfig+0x1c>)
 80008ca:	6059      	str	r1, [r3, #4]
                 (PLLQ << 24);
}
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	40023800 	.word	0x40023800

080008d4 <RCC_PLLCmd>:
  */
void RCC_PLLCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 80008d4:	4b01      	ldr	r3, [pc, #4]	; (80008dc <RCC_PLLCmd+0x8>)
 80008d6:	6018      	str	r0, [r3, #0]
}
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	42470060 	.word	0x42470060

080008e0 <RCC_PLLI2SConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
 80008e0:	0180      	lsls	r0, r0, #6
 80008e2:	4b03      	ldr	r3, [pc, #12]	; (80008f0 <RCC_PLLI2SConfig+0x10>)
 80008e4:	ea40 7101 	orr.w	r1, r0, r1, lsl #28
 80008e8:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
}
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	40023800 	.word	0x40023800

080008f4 <RCC_PLLI2SCmd>:
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 80008f4:	4b01      	ldr	r3, [pc, #4]	; (80008fc <RCC_PLLI2SCmd+0x8>)
 80008f6:	6018      	str	r0, [r3, #0]
}
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	42470068 	.word	0x42470068

08000900 <RCC_ClockSecuritySystemCmd>:
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 8000900:	4b01      	ldr	r3, [pc, #4]	; (8000908 <RCC_ClockSecuritySystemCmd+0x8>)
 8000902:	6018      	str	r0, [r3, #0]
}
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	4247004c 	.word	0x4247004c

0800090c <RCC_MCO1Config>:
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
 800090c:	4b03      	ldr	r3, [pc, #12]	; (800091c <RCC_MCO1Config+0x10>)
 800090e:	689a      	ldr	r2, [r3, #8]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
 8000910:	f022 62ec 	bic.w	r2, r2, #123731968	; 0x7600000

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 8000914:	4302      	orrs	r2, r0
 8000916:	430a      	orrs	r2, r1

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 8000918:	609a      	str	r2, [r3, #8]
}
 800091a:	4770      	bx	lr
 800091c:	40023800 	.word	0x40023800

08000920 <RCC_MCO2Config>:
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
 8000920:	4b03      	ldr	r3, [pc, #12]	; (8000930 <RCC_MCO2Config+0x10>)
 8000922:	689a      	ldr	r2, [r3, #8]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
 8000924:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 8000928:	4302      	orrs	r2, r0
 800092a:	430a      	orrs	r2, r1

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 800092c:	609a      	str	r2, [r3, #8]
}
 800092e:	4770      	bx	lr
 8000930:	40023800 	.word	0x40023800

08000934 <RCC_SYSCLKConfig>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 8000934:	4b03      	ldr	r3, [pc, #12]	; (8000944 <RCC_SYSCLKConfig+0x10>)
 8000936:	689a      	ldr	r2, [r3, #8]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 8000938:	f022 0203 	bic.w	r2, r2, #3

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 800093c:	4302      	orrs	r2, r0

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800093e:	609a      	str	r2, [r3, #8]
}
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	40023800 	.word	0x40023800

08000948 <RCC_GetSYSCLKSource>:
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 8000948:	4b02      	ldr	r3, [pc, #8]	; (8000954 <RCC_GetSYSCLKSource+0xc>)
 800094a:	6898      	ldr	r0, [r3, #8]
}
 800094c:	f000 000c 	and.w	r0, r0, #12
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	40023800 	.word	0x40023800

08000958 <RCC_HCLKConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 8000958:	4b03      	ldr	r3, [pc, #12]	; (8000968 <RCC_HCLKConfig+0x10>)
 800095a:	689a      	ldr	r2, [r3, #8]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 800095c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8000960:	4302      	orrs	r2, r0

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000962:	609a      	str	r2, [r3, #8]
}
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	40023800 	.word	0x40023800

0800096c <RCC_PCLK1Config>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 800096c:	4b03      	ldr	r3, [pc, #12]	; (800097c <RCC_PCLK1Config+0x10>)
 800096e:	689a      	ldr	r2, [r3, #8]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 8000970:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8000974:	4302      	orrs	r2, r0

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000976:	609a      	str	r2, [r3, #8]
}
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	40023800 	.word	0x40023800

08000980 <RCC_PCLK2Config>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8000980:	4b03      	ldr	r3, [pc, #12]	; (8000990 <RCC_PCLK2Config+0x10>)
 8000982:	689a      	ldr	r2, [r3, #8]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 8000984:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 8000988:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800098c:	609a      	str	r2, [r3, #8]
}
 800098e:	4770      	bx	lr
 8000990:	40023800 	.word	0x40023800

08000994 <RCC_GetClocksFreq>:
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000994:	4b1e      	ldr	r3, [pc, #120]	; (8000a10 <RCC_GetClocksFreq+0x7c>)
 8000996:	689a      	ldr	r2, [r3, #8]
 8000998:	f002 020c 	and.w	r2, r2, #12

  switch (tmp)
 800099c:	2a04      	cmp	r2, #4
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 800099e:	b510      	push	{r4, lr}
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;

  switch (tmp)
 80009a0:	d003      	beq.n	80009aa <RCC_GetClocksFreq+0x16>
 80009a2:	2a08      	cmp	r2, #8
 80009a4:	d003      	beq.n	80009ae <RCC_GetClocksFreq+0x1a>
 80009a6:	4b1b      	ldr	r3, [pc, #108]	; (8000a14 <RCC_GetClocksFreq+0x80>)
 80009a8:	e018      	b.n	80009dc <RCC_GetClocksFreq+0x48>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80009aa:	4b1b      	ldr	r3, [pc, #108]	; (8000a18 <RCC_GetClocksFreq+0x84>)
 80009ac:	e016      	b.n	80009dc <RCC_GetClocksFreq+0x48>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80009ae:	6859      	ldr	r1, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80009b0:	685a      	ldr	r2, [r3, #4]
      
      if (pllsource != 0)
 80009b2:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80009b6:	6859      	ldr	r1, [r3, #4]
 80009b8:	bf14      	ite	ne
 80009ba:	4b17      	ldrne	r3, [pc, #92]	; (8000a18 <RCC_GetClocksFreq+0x84>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80009bc:	4b15      	ldreq	r3, [pc, #84]	; (8000a14 <RCC_GetClocksFreq+0x80>)

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80009be:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80009c2:	fbb3 f3f2 	udiv	r3, r3, r2
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80009c6:	4a12      	ldr	r2, [pc, #72]	; (8000a10 <RCC_GetClocksFreq+0x7c>)
 80009c8:	6852      	ldr	r2, [r2, #4]
 80009ca:	f3c2 4201 	ubfx	r2, r2, #16, #2
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80009ce:	f3c1 1188 	ubfx	r1, r1, #6, #9
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80009d2:	3201      	adds	r2, #1
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80009d4:	434b      	muls	r3, r1
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80009d6:	0052      	lsls	r2, r2, #1
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 80009d8:	fbb3 f3f2 	udiv	r3, r3, r2
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80009dc:	490c      	ldr	r1, [pc, #48]	; (8000a10 <RCC_GetClocksFreq+0x7c>)
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 80009de:	6003      	str	r3, [r0, #0]
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80009e0:	688b      	ldr	r3, [r1, #8]
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];
 80009e2:	4a0e      	ldr	r2, [pc, #56]	; (8000a1c <RCC_GetClocksFreq+0x88>)
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80009e4:	6804      	ldr	r4, [r0, #0]
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
  tmp = tmp >> 4;
 80009e6:	f3c3 1303 	ubfx	r3, r3, #4, #4
  presc = APBAHBPrescTable[tmp];
 80009ea:	5cd3      	ldrb	r3, [r2, r3]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80009ec:	fa34 f303 	lsrs.w	r3, r4, r3
 80009f0:	6043      	str	r3, [r0, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80009f2:	688c      	ldr	r4, [r1, #8]
  tmp = tmp >> 10;
 80009f4:	f3c4 2482 	ubfx	r4, r4, #10, #3
  presc = APBAHBPrescTable[tmp];
 80009f8:	5d14      	ldrb	r4, [r2, r4]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80009fa:	fa33 f404 	lsrs.w	r4, r3, r4
 80009fe:	6084      	str	r4, [r0, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000a00:	6889      	ldr	r1, [r1, #8]
  tmp = tmp >> 13;
 8000a02:	f3c1 3142 	ubfx	r1, r1, #13, #3
  presc = APBAHBPrescTable[tmp];
 8000a06:	5c52      	ldrb	r2, [r2, r1]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000a08:	40d3      	lsrs	r3, r2
 8000a0a:	60c3      	str	r3, [r0, #12]
}
 8000a0c:	bd10      	pop	{r4, pc}
 8000a0e:	bf00      	nop
 8000a10:	40023800 	.word	0x40023800
 8000a14:	00f42400 	.word	0x00f42400
 8000a18:	007a1200 	.word	0x007a1200
 8000a1c:	20000000 	.word	0x20000000

08000a20 <RCC_RTCCLKConfig>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 8000a20:	f400 7340 	and.w	r3, r0, #768	; 0x300
 8000a24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000a28:	4b08      	ldr	r3, [pc, #32]	; (8000a4c <RCC_RTCCLKConfig+0x2c>)
 8000a2a:	d108      	bne.n	8000a3e <RCC_RTCCLKConfig+0x1e>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 8000a2c:	6899      	ldr	r1, [r3, #8]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8000a2e:	f020 4270 	bic.w	r2, r0, #4026531840	; 0xf0000000
  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
 8000a32:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8000a36:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000a3a:	430a      	orrs	r2, r1

    /* Store the new value */
    RCC->CFGR = tmpreg;
 8000a3c:	609a      	str	r2, [r3, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 8000a3e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000a40:	0500      	lsls	r0, r0, #20
 8000a42:	ea42 5010 	orr.w	r0, r2, r0, lsr #20
 8000a46:	6718      	str	r0, [r3, #112]	; 0x70
}
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	40023800 	.word	0x40023800

08000a50 <RCC_RTCCLKCmd>:
void RCC_RTCCLKCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 8000a50:	4b01      	ldr	r3, [pc, #4]	; (8000a58 <RCC_RTCCLKCmd+0x8>)
 8000a52:	6018      	str	r0, [r3, #0]
}
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	42470e3c 	.word	0x42470e3c

08000a5c <RCC_BackupResetCmd>:
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 8000a5c:	4b01      	ldr	r3, [pc, #4]	; (8000a64 <RCC_BackupResetCmd+0x8>)
 8000a5e:	6018      	str	r0, [r3, #0]
}
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	42470e40 	.word	0x42470e40

08000a68 <RCC_I2SCLKConfig>:
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 8000a68:	4b01      	ldr	r3, [pc, #4]	; (8000a70 <RCC_I2SCLKConfig+0x8>)
 8000a6a:	6018      	str	r0, [r3, #0]
}
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	4247015c 	.word	0x4247015c

08000a74 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000a74:	4b04      	ldr	r3, [pc, #16]	; (8000a88 <RCC_AHB1PeriphClockCmd+0x14>)
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000a76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000a78:	b109      	cbz	r1, 8000a7e <RCC_AHB1PeriphClockCmd+0xa>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000a7a:	4310      	orrs	r0, r2
 8000a7c:	e001      	b.n	8000a82 <RCC_AHB1PeriphClockCmd+0xe>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000a7e:	ea22 0000 	bic.w	r0, r2, r0
 8000a82:	6318      	str	r0, [r3, #48]	; 0x30
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	40023800 	.word	0x40023800

08000a8c <RCC_AHB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 8000a8c:	4b04      	ldr	r3, [pc, #16]	; (8000aa0 <RCC_AHB2PeriphClockCmd+0x14>)
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 8000a8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000a90:	b109      	cbz	r1, 8000a96 <RCC_AHB2PeriphClockCmd+0xa>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 8000a92:	4310      	orrs	r0, r2
 8000a94:	e001      	b.n	8000a9a <RCC_AHB2PeriphClockCmd+0xe>
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
 8000a96:	ea22 0000 	bic.w	r0, r2, r0
 8000a9a:	6358      	str	r0, [r3, #52]	; 0x34
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	40023800 	.word	0x40023800

08000aa4 <RCC_AHB3PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 8000aa4:	4b04      	ldr	r3, [pc, #16]	; (8000ab8 <RCC_AHB3PeriphClockCmd+0x14>)
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 8000aa6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000aa8:	b109      	cbz	r1, 8000aae <RCC_AHB3PeriphClockCmd+0xa>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 8000aaa:	4310      	orrs	r0, r2
 8000aac:	e001      	b.n	8000ab2 <RCC_AHB3PeriphClockCmd+0xe>
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
 8000aae:	ea22 0000 	bic.w	r0, r2, r0
 8000ab2:	6398      	str	r0, [r3, #56]	; 0x38
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	40023800 	.word	0x40023800

08000abc <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000abc:	4b04      	ldr	r3, [pc, #16]	; (8000ad0 <RCC_APB1PeriphClockCmd+0x14>)
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000abe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000ac0:	b109      	cbz	r1, 8000ac6 <RCC_APB1PeriphClockCmd+0xa>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000ac2:	4310      	orrs	r0, r2
 8000ac4:	e001      	b.n	8000aca <RCC_APB1PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000ac6:	ea22 0000 	bic.w	r0, r2, r0
 8000aca:	6418      	str	r0, [r3, #64]	; 0x40
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	40023800 	.word	0x40023800

08000ad4 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000ad4:	4b04      	ldr	r3, [pc, #16]	; (8000ae8 <RCC_APB2PeriphClockCmd+0x14>)
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000ad6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000ad8:	b109      	cbz	r1, 8000ade <RCC_APB2PeriphClockCmd+0xa>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000ada:	4310      	orrs	r0, r2
 8000adc:	e001      	b.n	8000ae2 <RCC_APB2PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000ade:	ea22 0000 	bic.w	r0, r2, r0
 8000ae2:	6458      	str	r0, [r3, #68]	; 0x44
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	40023800 	.word	0x40023800

08000aec <RCC_AHB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000aec:	4b04      	ldr	r3, [pc, #16]	; (8000b00 <RCC_AHB1PeriphResetCmd+0x14>)
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 8000aee:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000af0:	b109      	cbz	r1, 8000af6 <RCC_AHB1PeriphResetCmd+0xa>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 8000af2:	4310      	orrs	r0, r2
 8000af4:	e001      	b.n	8000afa <RCC_AHB1PeriphResetCmd+0xe>
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 8000af6:	ea22 0000 	bic.w	r0, r2, r0
 8000afa:	6118      	str	r0, [r3, #16]
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	40023800 	.word	0x40023800

08000b04 <RCC_AHB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 8000b04:	4b04      	ldr	r3, [pc, #16]	; (8000b18 <RCC_AHB2PeriphResetCmd+0x14>)
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 8000b06:	695a      	ldr	r2, [r3, #20]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000b08:	b109      	cbz	r1, 8000b0e <RCC_AHB2PeriphResetCmd+0xa>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 8000b0a:	4310      	orrs	r0, r2
 8000b0c:	e001      	b.n	8000b12 <RCC_AHB2PeriphResetCmd+0xe>
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 8000b0e:	ea22 0000 	bic.w	r0, r2, r0
 8000b12:	6158      	str	r0, [r3, #20]
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	40023800 	.word	0x40023800

08000b1c <RCC_AHB3PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 8000b1c:	4b04      	ldr	r3, [pc, #16]	; (8000b30 <RCC_AHB3PeriphResetCmd+0x14>)
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 8000b1e:	699a      	ldr	r2, [r3, #24]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000b20:	b109      	cbz	r1, 8000b26 <RCC_AHB3PeriphResetCmd+0xa>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 8000b22:	4310      	orrs	r0, r2
 8000b24:	e001      	b.n	8000b2a <RCC_AHB3PeriphResetCmd+0xe>
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
 8000b26:	ea22 0000 	bic.w	r0, r2, r0
 8000b2a:	6198      	str	r0, [r3, #24]
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	40023800 	.word	0x40023800

08000b34 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000b34:	4b04      	ldr	r3, [pc, #16]	; (8000b48 <RCC_APB1PeriphResetCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8000b36:	6a1a      	ldr	r2, [r3, #32]
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000b38:	b109      	cbz	r1, 8000b3e <RCC_APB1PeriphResetCmd+0xa>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8000b3a:	4310      	orrs	r0, r2
 8000b3c:	e001      	b.n	8000b42 <RCC_APB1PeriphResetCmd+0xe>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8000b3e:	ea22 0000 	bic.w	r0, r2, r0
 8000b42:	6218      	str	r0, [r3, #32]
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	40023800 	.word	0x40023800

08000b4c <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000b4c:	4b04      	ldr	r3, [pc, #16]	; (8000b60 <RCC_APB2PeriphResetCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8000b4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000b50:	b109      	cbz	r1, 8000b56 <RCC_APB2PeriphResetCmd+0xa>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8000b52:	4310      	orrs	r0, r2
 8000b54:	e001      	b.n	8000b5a <RCC_APB2PeriphResetCmd+0xe>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8000b56:	ea22 0000 	bic.w	r0, r2, r0
 8000b5a:	6258      	str	r0, [r3, #36]	; 0x24
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	40023800 	.word	0x40023800

08000b64 <RCC_AHB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000b64:	4b04      	ldr	r3, [pc, #16]	; (8000b78 <RCC_AHB1PeriphClockLPModeCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 8000b66:	6d1a      	ldr	r2, [r3, #80]	; 0x50
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000b68:	b109      	cbz	r1, 8000b6e <RCC_AHB1PeriphClockLPModeCmd+0xa>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 8000b6a:	4310      	orrs	r0, r2
 8000b6c:	e001      	b.n	8000b72 <RCC_AHB1PeriphClockLPModeCmd+0xe>
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
 8000b6e:	ea22 0000 	bic.w	r0, r2, r0
 8000b72:	6518      	str	r0, [r3, #80]	; 0x50
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	40023800 	.word	0x40023800

08000b7c <RCC_AHB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 8000b7c:	4b04      	ldr	r3, [pc, #16]	; (8000b90 <RCC_AHB2PeriphClockLPModeCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 8000b7e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000b80:	b109      	cbz	r1, 8000b86 <RCC_AHB2PeriphClockLPModeCmd+0xa>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 8000b82:	4310      	orrs	r0, r2
 8000b84:	e001      	b.n	8000b8a <RCC_AHB2PeriphClockLPModeCmd+0xe>
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
 8000b86:	ea22 0000 	bic.w	r0, r2, r0
 8000b8a:	6558      	str	r0, [r3, #84]	; 0x54
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	40023800 	.word	0x40023800

08000b94 <RCC_AHB3PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 8000b94:	4b04      	ldr	r3, [pc, #16]	; (8000ba8 <RCC_AHB3PeriphClockLPModeCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 8000b96:	6d9a      	ldr	r2, [r3, #88]	; 0x58
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000b98:	b109      	cbz	r1, 8000b9e <RCC_AHB3PeriphClockLPModeCmd+0xa>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 8000b9a:	4310      	orrs	r0, r2
 8000b9c:	e001      	b.n	8000ba2 <RCC_AHB3PeriphClockLPModeCmd+0xe>
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
 8000b9e:	ea22 0000 	bic.w	r0, r2, r0
 8000ba2:	6598      	str	r0, [r3, #88]	; 0x58
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	40023800 	.word	0x40023800

08000bac <RCC_APB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000bac:	4b04      	ldr	r3, [pc, #16]	; (8000bc0 <RCC_APB1PeriphClockLPModeCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 8000bae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000bb0:	b109      	cbz	r1, 8000bb6 <RCC_APB1PeriphClockLPModeCmd+0xa>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 8000bb2:	4310      	orrs	r0, r2
 8000bb4:	e001      	b.n	8000bba <RCC_APB1PeriphClockLPModeCmd+0xe>
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
 8000bb6:	ea22 0000 	bic.w	r0, r2, r0
 8000bba:	6618      	str	r0, [r3, #96]	; 0x60
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	40023800 	.word	0x40023800

08000bc4 <RCC_APB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000bc4:	4b04      	ldr	r3, [pc, #16]	; (8000bd8 <RCC_APB2PeriphClockLPModeCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 8000bc6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000bc8:	b109      	cbz	r1, 8000bce <RCC_APB2PeriphClockLPModeCmd+0xa>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 8000bca:	4310      	orrs	r0, r2
 8000bcc:	e001      	b.n	8000bd2 <RCC_APB2PeriphClockLPModeCmd+0xe>
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
 8000bce:	ea22 0000 	bic.w	r0, r2, r0
 8000bd2:	6658      	str	r0, [r3, #100]	; 0x64
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	40023800 	.word	0x40023800

08000bdc <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
 8000bdc:	4b04      	ldr	r3, [pc, #16]	; (8000bf0 <RCC_ITConfig+0x14>)
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8000bde:	781a      	ldrb	r2, [r3, #0]
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000be0:	b109      	cbz	r1, 8000be6 <RCC_ITConfig+0xa>
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8000be2:	4310      	orrs	r0, r2
 8000be4:	e001      	b.n	8000bea <RCC_ITConfig+0xe>
  }
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 8000be6:	ea22 0000 	bic.w	r0, r2, r0
 8000bea:	7018      	strb	r0, [r3, #0]
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	4002380d 	.word	0x4002380d

08000bf4 <RCC_GetFlagStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8000bf4:	0943      	lsrs	r3, r0, #5
  if (tmp == 1)               /* The flag to check is in CR register */
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	4a07      	ldr	r2, [pc, #28]	; (8000c18 <RCC_GetFlagStatus+0x24>)
 8000bfa:	d101      	bne.n	8000c00 <RCC_GetFlagStatus+0xc>
  {
    statusreg = RCC->CR;
 8000bfc:	6813      	ldr	r3, [r2, #0]
 8000bfe:	e003      	b.n	8000c08 <RCC_GetFlagStatus+0x14>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8000c00:	2b02      	cmp	r3, #2
  {
    statusreg = RCC->BDCR;
 8000c02:	bf0c      	ite	eq
 8000c04:	6f13      	ldreq	r3, [r2, #112]	; 0x70
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8000c06:	6f53      	ldrne	r3, [r2, #116]	; 0x74
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 8000c08:	f000 001f 	and.w	r0, r0, #31
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8000c0c:	fa33 f000 	lsrs.w	r0, r3, r0
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
}
 8000c10:	f000 0001 	and.w	r0, r0, #1
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	40023800 	.word	0x40023800

08000c1c <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8000c1c:	b507      	push	{r0, r1, r2, lr}
  __IO uint32_t startupcounter = 0;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	9301      	str	r3, [sp, #4]
  ErrorStatus status = ERROR;
  FlagStatus hsestatus = RESET;
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 8000c22:	2031      	movs	r0, #49	; 0x31
 8000c24:	f7ff ffe6 	bl	8000bf4 <RCC_GetFlagStatus>
    startupcounter++;
 8000c28:	9b01      	ldr	r3, [sp, #4]
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	9301      	str	r3, [sp, #4]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 8000c2e:	9b01      	ldr	r3, [sp, #4]
 8000c30:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000c34:	d001      	beq.n	8000c3a <RCC_WaitForHSEStartUp+0x1e>
 8000c36:	2800      	cmp	r0, #0
 8000c38:	d0f3      	beq.n	8000c22 <RCC_WaitForHSEStartUp+0x6>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 8000c3a:	2031      	movs	r0, #49	; 0x31
 8000c3c:	f7ff ffda 	bl	8000bf4 <RCC_GetFlagStatus>
  else
  {
    status = ERROR;
  }
  return (status);
}
 8000c40:	3000      	adds	r0, #0
 8000c42:	bf18      	it	ne
 8000c44:	2001      	movne	r0, #1
 8000c46:	bd0e      	pop	{r1, r2, r3, pc}

08000c48 <RCC_ClearFlag>:
  * @retval None
  */
void RCC_ClearFlag(void)
{
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 8000c48:	4b02      	ldr	r3, [pc, #8]	; (8000c54 <RCC_ClearFlag+0xc>)
 8000c4a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8000c4c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000c50:	675a      	str	r2, [r3, #116]	; 0x74
}
 8000c52:	4770      	bx	lr
 8000c54:	40023800 	.word	0x40023800

08000c58 <RCC_GetITStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 8000c58:	4b03      	ldr	r3, [pc, #12]	; (8000c68 <RCC_GetITStatus+0x10>)
 8000c5a:	68db      	ldr	r3, [r3, #12]
  {
    bitstatus = SET;
 8000c5c:	4218      	tst	r0, r3
  {
    bitstatus = RESET;
  }
  /* Return the RCC_IT status */
  return  bitstatus;
}
 8000c5e:	bf0c      	ite	eq
 8000c60:	2000      	moveq	r0, #0
 8000c62:	2001      	movne	r0, #1
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	40023800 	.word	0x40023800

08000c6c <RCC_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 8000c6c:	4b01      	ldr	r3, [pc, #4]	; (8000c74 <RCC_ClearITPendingBit+0x8>)
 8000c6e:	7018      	strb	r0, [r3, #0]
}
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	4002380e 	.word	0x4002380e

08000c78 <SPI_I2S_DeInit>:
  *         is managed by the I2S peripheral clock).
  *             
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 8000c78:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 8000c7a:	4b15      	ldr	r3, [pc, #84]	; (8000cd0 <SPI_I2S_DeInit+0x58>)
 8000c7c:	4298      	cmp	r0, r3
 8000c7e:	d10b      	bne.n	8000c98 <SPI_I2S_DeInit+0x20>
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 8000c80:	2101      	movs	r1, #1
 8000c82:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000c86:	f7ff ff61 	bl	8000b4c <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 8000c8a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000c8e:	2100      	movs	r1, #0
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
    }
  }
}
 8000c90:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  if (SPIx == SPI1)
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 8000c94:	f7ff bf5a 	b.w	8000b4c <RCC_APB2PeriphResetCmd>
  }
  else if (SPIx == SPI2)
 8000c98:	4b0e      	ldr	r3, [pc, #56]	; (8000cd4 <SPI_I2S_DeInit+0x5c>)
 8000c9a:	4298      	cmp	r0, r3
 8000c9c:	d107      	bne.n	8000cae <SPI_I2S_DeInit+0x36>
  {
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 8000c9e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000ca2:	2101      	movs	r1, #1
 8000ca4:	f7ff ff46 	bl	8000b34 <RCC_APB1PeriphResetCmd>
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 8000ca8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000cac:	e009      	b.n	8000cc2 <SPI_I2S_DeInit+0x4a>
    }
  else
  {
    if (SPIx == SPI3)
 8000cae:	4b0a      	ldr	r3, [pc, #40]	; (8000cd8 <SPI_I2S_DeInit+0x60>)
 8000cb0:	4298      	cmp	r0, r3
 8000cb2:	d10b      	bne.n	8000ccc <SPI_I2S_DeInit+0x54>
    {
      /* Enable SPI3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 8000cb4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000cb8:	2101      	movs	r1, #1
 8000cba:	f7ff ff3b 	bl	8000b34 <RCC_APB1PeriphResetCmd>
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 8000cbe:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000cc2:	2100      	movs	r1, #0
    }
  }
}
 8000cc4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if (SPIx == SPI3)
    {
      /* Enable SPI3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 8000cc8:	f7ff bf34 	b.w	8000b34 <RCC_APB1PeriphResetCmd>
 8000ccc:	bd08      	pop	{r3, pc}
 8000cce:	bf00      	nop
 8000cd0:	40013000 	.word	0x40013000
 8000cd4:	40003800 	.word	0x40003800
 8000cd8:	40003c00 	.word	0x40003c00

08000cdc <SPI_Init>:
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000cdc:	880b      	ldrh	r3, [r1, #0]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8000cde:	8802      	ldrh	r2, [r0, #0]
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8000ce0:	b510      	push	{r4, lr}
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000ce2:	884c      	ldrh	r4, [r1, #2]
 8000ce4:	4323      	orrs	r3, r4
 8000ce6:	888c      	ldrh	r4, [r1, #4]
 8000ce8:	4323      	orrs	r3, r4
 8000cea:	88cc      	ldrh	r4, [r1, #6]
 8000cec:	4323      	orrs	r3, r4
 8000cee:	890c      	ldrh	r4, [r1, #8]
 8000cf0:	4323      	orrs	r3, r4
 8000cf2:	894c      	ldrh	r4, [r1, #10]
 8000cf4:	4323      	orrs	r3, r4
 8000cf6:	898c      	ldrh	r4, [r1, #12]
 8000cf8:	4323      	orrs	r3, r4
 8000cfa:	89cc      	ldrh	r4, [r1, #14]

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8000cfc:	f402 5241 	and.w	r2, r2, #12352	; 0x3040
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000d00:	4323      	orrs	r3, r4
 8000d02:	4313      	orrs	r3, r2
 8000d04:	b29b      	uxth	r3, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8000d06:	8003      	strh	r3, [r0, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 8000d08:	8b83      	ldrh	r3, [r0, #28]
 8000d0a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000d0e:	041b      	lsls	r3, r3, #16
 8000d10:	0c1b      	lsrs	r3, r3, #16
 8000d12:	8383      	strh	r3, [r0, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8000d14:	8a0b      	ldrh	r3, [r1, #16]
 8000d16:	8203      	strh	r3, [r0, #16]
}
 8000d18:	bd10      	pop	{r4, pc}

08000d1a <I2S_Init>:
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 8000d1a:	8b83      	ldrh	r3, [r0, #28]
 8000d1c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8000d20:	f023 030f 	bic.w	r3, r3, #15
 8000d24:	041b      	lsls	r3, r3, #16
 8000d26:	0c1b      	lsrs	r3, r3, #16
 8000d28:	8383      	strh	r3, [r0, #28]
  SPIx->I2SPR = 0x0002;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	8403      	strh	r3, [r0, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 8000d2e:	688b      	ldr	r3, [r1, #8]
  *         to the value of the the source clock frequency (in Hz).
  *  
  * @retval None
  */
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
 8000d30:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
  SPIx->I2SPR = 0x0002;
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 8000d32:	8b85      	ldrh	r5, [r0, #28]
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 8000d34:	2b02      	cmp	r3, #2
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
  SPIx->I2SPR = 0x0002;
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 8000d36:	b2ad      	uxth	r5, r5
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 8000d38:	d038      	beq.n	8000dac <I2S_Init+0x92>
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 8000d3a:	4a29      	ldr	r2, [pc, #164]	; (8000de0 <I2S_Init+0xc6>)
  }
  /* If the requested audio frequency is not the default, compute the prescaler */
  else
  {
    /* Check the frame length (For the Prescaler computing) *******************/
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 8000d3c:	888e      	ldrh	r6, [r1, #4]
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 8000d3e:	6894      	ldr	r4, [r2, #8]
  {
    /* Check the frame length (For the Prescaler computing) *******************/
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
    {
      /* Packet length is 16 bits */
      packetlength = 1;
 8000d40:	2e00      	cmp	r6, #0
 8000d42:	bf14      	ite	ne
 8000d44:	2602      	movne	r6, #2
 8000d46:	2601      	moveq	r6, #1
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 8000d48:	0224      	lsls	r4, r4, #8
 8000d4a:	d503      	bpl.n	8000d54 <I2S_Init+0x3a>
    {
      RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
 8000d4c:	6894      	ldr	r4, [r2, #8]
 8000d4e:	f424 0400 	bic.w	r4, r4, #8388608	; 0x800000
 8000d52:	6094      	str	r4, [r2, #8]
    }    
    
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 8000d54:	f8d2 4084 	ldr.w	r4, [r2, #132]	; 0x84
                      (RCC_PLLI2SCFGR_PLLI2SN >> 6));
    
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
 8000d58:	f8d2 7084 	ldr.w	r7, [r2, #132]	; 0x84
                      (RCC_PLLI2SCFGR_PLLI2SR >> 28));
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
 8000d5c:	6852      	ldr	r2, [r2, #4]
    
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 8000d5e:	f8df c084 	ldr.w	ip, [pc, #132]	; 8000de4 <I2S_Init+0xca>
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
                      (RCC_PLLI2SCFGR_PLLI2SR >> 28));
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
 8000d62:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 8000d66:	fbbc f2f2 	udiv	r2, ip, r2
    {
      RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
    }    
    
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 8000d6a:	f3c4 1488 	ubfx	r4, r4, #6, #9
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
    
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 8000d6e:	4354      	muls	r4, r2
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
                      (RCC_PLLI2SCFGR_PLLI2SN >> 6));
    
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
 8000d70:	f3c7 7202 	ubfx	r2, r7, #28, #3
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
    
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 8000d74:	fbb4 f4f2 	udiv	r4, r4, r2
  #endif /* I2S_EXTERNAL_CLOCK_VAL */
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 8000d78:	88ca      	ldrh	r2, [r1, #6]
 8000d7a:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8000d7e:	f04f 020a 	mov.w	r2, #10
 8000d82:	d101      	bne.n	8000d88 <I2S_Init+0x6e>
    {
      /* MCLK output is enabled */
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8000d84:	0a24      	lsrs	r4, r4, #8
 8000d86:	e002      	b.n	8000d8e <I2S_Init+0x74>
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8000d88:	0176      	lsls	r6, r6, #5
 8000d8a:	fbb4 f4f6 	udiv	r4, r4, r6
 8000d8e:	4362      	muls	r2, r4
 8000d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d94:	3305      	adds	r3, #5
    }
    
    /* Remove the flatting point */
    tmp = tmp / 10;  
 8000d96:	220a      	movs	r2, #10
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8000d98:	b29b      	uxth	r3, r3
    }
    
    /* Remove the flatting point */
    tmp = tmp / 10;  
 8000d9a:	fbb3 f3f2 	udiv	r3, r3, r2
      
    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 8000d9e:	f003 0201 	and.w	r2, r3, #1
   
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
 8000da2:	0212      	lsls	r2, r2, #8
      
    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 8000da4:	f3c3 034f 	ubfx	r3, r3, #1, #16
   
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
 8000da8:	b292      	uxth	r2, r2
 8000daa:	e000      	b.n	8000dae <I2S_Init+0x94>
  tmpreg = SPIx->I2SCFGR;
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
  {
    i2sodd = (uint16_t)0;
 8000dac:	2200      	movs	r2, #0
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 8000dae:	1e9c      	subs	r4, r3, #2
 8000db0:	b2a4      	uxth	r4, r4
  {
    /* Set the default values */
    i2sdiv = 2;
    i2sodd = 0;
 8000db2:	2cfe      	cmp	r4, #254	; 0xfe
 8000db4:	bf28      	it	cs
 8000db6:	2200      	movcs	r2, #0
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 8000db8:	88cc      	ldrh	r4, [r1, #6]
  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
  {
    /* Set the default values */
    i2sdiv = 2;
    i2sodd = 0;
 8000dba:	bf28      	it	cs
 8000dbc:	2302      	movcs	r3, #2
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	4323      	orrs	r3, r4
 8000dc2:	b29b      	uxth	r3, r3
 8000dc4:	8403      	strh	r3, [r0, #32]
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8000dc6:	880b      	ldrh	r3, [r1, #0]

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 8000dc8:	884a      	ldrh	r2, [r1, #2]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8000dca:	432b      	orrs	r3, r5
 8000dcc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	888a      	ldrh	r2, [r1, #4]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	898a      	ldrh	r2, [r1, #12]
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	b29b      	uxth	r3, r3
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  SPIx->I2SCFGR = tmpreg;
 8000ddc:	8383      	strh	r3, [r0, #28]
}
 8000dde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000de0:	40023800 	.word	0x40023800
 8000de4:	007a1200 	.word	0x007a1200

08000de8 <SPI_StructInit>:
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8000de8:	2300      	movs	r3, #0
 8000dea:	8003      	strh	r3, [r0, #0]
  /* initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 8000dec:	8043      	strh	r3, [r0, #2]
  /* initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 8000dee:	8083      	strh	r3, [r0, #4]
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 8000df0:	80c3      	strh	r3, [r0, #6]
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 8000df2:	8103      	strh	r3, [r0, #8]
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 8000df4:	8143      	strh	r3, [r0, #10]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 8000df6:	8183      	strh	r3, [r0, #12]
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 8000df8:	81c3      	strh	r3, [r0, #14]
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 8000dfa:	2307      	movs	r3, #7
 8000dfc:	8203      	strh	r3, [r0, #16]
}
 8000dfe:	4770      	bx	lr

08000e00 <I2S_StructInit>:
  */
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
{
/*--------------- Reset I2S init structure parameters values -----------------*/
  /* Initialize the I2S_Mode member */
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 8000e00:	2300      	movs	r3, #0
  
  /* Initialize the I2S_MCLKOutput member */
  I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
  
  /* Initialize the I2S_AudioFreq member */
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 8000e02:	2202      	movs	r2, #2
  */
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
{
/*--------------- Reset I2S init structure parameters values -----------------*/
  /* Initialize the I2S_Mode member */
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 8000e04:	8003      	strh	r3, [r0, #0]
  
  /* Initialize the I2S_Standard member */
  I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
 8000e06:	8043      	strh	r3, [r0, #2]
  
  /* Initialize the I2S_DataFormat member */
  I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
 8000e08:	8083      	strh	r3, [r0, #4]
  
  /* Initialize the I2S_MCLKOutput member */
  I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
 8000e0a:	80c3      	strh	r3, [r0, #6]
  
  /* Initialize the I2S_AudioFreq member */
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 8000e0c:	6082      	str	r2, [r0, #8]
  
  /* Initialize the I2S_CPOL member */
  I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
 8000e0e:	8183      	strh	r3, [r0, #12]
}
 8000e10:	4770      	bx	lr

08000e12 <SPI_Cmd>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8000e12:	8803      	ldrh	r3, [r0, #0]
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000e14:	b119      	cbz	r1, 8000e1e <SPI_Cmd+0xc>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8000e16:	b29b      	uxth	r3, r3
 8000e18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e1c:	e003      	b.n	8000e26 <SPI_Cmd+0x14>
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 8000e1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000e22:	041b      	lsls	r3, r3, #16
 8000e24:	0c1b      	lsrs	r3, r3, #16
 8000e26:	8003      	strh	r3, [r0, #0]
 8000e28:	4770      	bx	lr

08000e2a <I2S_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 8000e2a:	8b83      	ldrh	r3, [r0, #28]
{
  /* Check the parameters */
  assert_param(IS_SPI_23_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000e2c:	b119      	cbz	r1, 8000e36 <I2S_Cmd+0xc>
  {
    /* Enable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 8000e2e:	b29b      	uxth	r3, r3
 8000e30:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e34:	e003      	b.n	8000e3e <I2S_Cmd+0x14>
  }
  else
  {
    /* Disable the selected SPI peripheral in I2S mode */
    SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
 8000e36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000e3a:	041b      	lsls	r3, r3, #16
 8000e3c:	0c1b      	lsrs	r3, r3, #16
 8000e3e:	8383      	strh	r3, [r0, #28]
 8000e40:	4770      	bx	lr

08000e42 <SPI_DataSizeConfig>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DATASIZE(SPI_DataSize));
  /* Clear DFF bit */
  SPIx->CR1 &= (uint16_t)~SPI_DataSize_16b;
 8000e42:	8803      	ldrh	r3, [r0, #0]
 8000e44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000e48:	041b      	lsls	r3, r3, #16
 8000e4a:	0c1b      	lsrs	r3, r3, #16
 8000e4c:	8003      	strh	r3, [r0, #0]
  /* Set new DFF bit value */
  SPIx->CR1 |= SPI_DataSize;
 8000e4e:	8803      	ldrh	r3, [r0, #0]
 8000e50:	b29b      	uxth	r3, r3
 8000e52:	430b      	orrs	r3, r1
 8000e54:	8003      	strh	r3, [r0, #0]
}
 8000e56:	4770      	bx	lr

08000e58 <SPI_BiDirectionalLineConfig>:
void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
 8000e58:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
  {
    /* Set the Tx only mode */
    SPIx->CR1 |= SPI_Direction_Tx;
 8000e5c:	8803      	ldrh	r3, [r0, #0]
void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
 8000e5e:	d103      	bne.n	8000e68 <SPI_BiDirectionalLineConfig+0x10>
  {
    /* Set the Tx only mode */
    SPIx->CR1 |= SPI_Direction_Tx;
 8000e60:	b29b      	uxth	r3, r3
 8000e62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e66:	e003      	b.n	8000e70 <SPI_BiDirectionalLineConfig+0x18>
  }
  else
  {
    /* Set the Rx only mode */
    SPIx->CR1 &= SPI_Direction_Rx;
 8000e68:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000e6c:	041b      	lsls	r3, r3, #16
 8000e6e:	0c1b      	lsrs	r3, r3, #16
 8000e70:	8003      	strh	r3, [r0, #0]
 8000e72:	4770      	bx	lr

08000e74 <SPI_NSSInternalSoftwareConfig>:
void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 8000e74:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8000e78:	4299      	cmp	r1, r3
  {
    /* Set NSS pin internally by software */
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 8000e7a:	8803      	ldrh	r3, [r0, #0]
void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 8000e7c:	d003      	beq.n	8000e86 <SPI_NSSInternalSoftwareConfig+0x12>
  {
    /* Set NSS pin internally by software */
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 8000e7e:	b29b      	uxth	r3, r3
 8000e80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e84:	e003      	b.n	8000e8e <SPI_NSSInternalSoftwareConfig+0x1a>
  }
  else
  {
    /* Reset NSS pin internally by software */
    SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 8000e86:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000e8a:	041b      	lsls	r3, r3, #16
 8000e8c:	0c1b      	lsrs	r3, r3, #16
 8000e8e:	8003      	strh	r3, [r0, #0]
 8000e90:	4770      	bx	lr

08000e92 <SPI_SSOutputCmd>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
 8000e92:	8883      	ldrh	r3, [r0, #4]
void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000e94:	b119      	cbz	r1, 8000e9e <SPI_SSOutputCmd+0xc>
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
 8000e96:	b29b      	uxth	r3, r3
 8000e98:	f043 0304 	orr.w	r3, r3, #4
 8000e9c:	e003      	b.n	8000ea6 <SPI_SSOutputCmd+0x14>
  }
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_SSOE);
 8000e9e:	f023 0304 	bic.w	r3, r3, #4
 8000ea2:	041b      	lsls	r3, r3, #16
 8000ea4:	0c1b      	lsrs	r3, r3, #16
 8000ea6:	8083      	strh	r3, [r0, #4]
 8000ea8:	4770      	bx	lr

08000eaa <SPI_TIModeCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TI mode for the selected SPI peripheral */
    SPIx->CR2 |= SPI_CR2_FRF;
 8000eaa:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000eac:	b119      	cbz	r1, 8000eb6 <SPI_TIModeCmd+0xc>
  {
    /* Enable the TI mode for the selected SPI peripheral */
    SPIx->CR2 |= SPI_CR2_FRF;
 8000eae:	b29b      	uxth	r3, r3
 8000eb0:	f043 0310 	orr.w	r3, r3, #16
 8000eb4:	e003      	b.n	8000ebe <SPI_TIModeCmd+0x14>
  }
  else
  {
    /* Disable the TI mode for the selected SPI peripheral */
    SPIx->CR2 &= (uint16_t)~SPI_CR2_FRF;
 8000eb6:	f023 0310 	bic.w	r3, r3, #16
 8000eba:	041b      	lsls	r3, r3, #16
 8000ebc:	0c1b      	lsrs	r3, r3, #16
 8000ebe:	8083      	strh	r3, [r0, #4]
 8000ec0:	4770      	bx	lr

08000ec2 <I2S_FullDuplexConfig>:
  assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 8000ec2:	8b83      	ldrh	r3, [r0, #28]
 8000ec4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8000ec8:	f023 030f 	bic.w	r3, r3, #15
 8000ecc:	041b      	lsls	r3, r3, #16
 8000ece:	0c1b      	lsrs	r3, r3, #16
 8000ed0:	8383      	strh	r3, [r0, #28]
  I2Sxext->I2SPR = 0x0002;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	8403      	strh	r3, [r0, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 8000ed6:	880b      	ldrh	r3, [r1, #0]
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
  I2Sxext->I2SPR = 0x0002;
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
 8000ed8:	8b82      	ldrh	r2, [r0, #28]
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 8000eda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  * @note   The I2S full duplex extension can be configured in slave mode only.    
  *  
  * @retval None
  */
void I2S_FullDuplexConfig(SPI_TypeDef* I2Sxext, I2S_InitTypeDef* I2S_InitStruct)
{
 8000ede:	b510      	push	{r4, lr}
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
  I2Sxext->I2SPR = 0x0002;
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
 8000ee0:	b292      	uxth	r2, r2
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 8000ee2:	d005      	beq.n	8000ef0 <I2S_FullDuplexConfig+0x2e>
  {
    tmp = I2S_Mode_SlaveRx;
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	bf0c      	ite	eq
 8000ee8:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8000eec:	2300      	movne	r3, #0
 8000eee:	e001      	b.n	8000ef4 <I2S_FullDuplexConfig+0x32>
 8000ef0:	f44f 7380 	mov.w	r3, #256	; 0x100
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8000ef4:	884c      	ldrh	r4, [r1, #2]
 8000ef6:	4322      	orrs	r2, r4
    }
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8000ef8:	888c      	ldrh	r4, [r1, #4]
 8000efa:	8989      	ldrh	r1, [r1, #12]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8000efc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    }
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8000f00:	4322      	orrs	r2, r4
 8000f02:	430a      	orrs	r2, r1
 8000f04:	b292      	uxth	r2, r2
 8000f06:	4313      	orrs	r3, r2
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  I2Sxext->I2SCFGR = tmpreg;
 8000f08:	8383      	strh	r3, [r0, #28]
}
 8000f0a:	bd10      	pop	{r4, pc}

08000f0c <SPI_I2S_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 8000f0c:	8980      	ldrh	r0, [r0, #12]
}
 8000f0e:	b280      	uxth	r0, r0
 8000f10:	4770      	bx	lr

08000f12 <SPI_I2S_SendData>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8000f12:	8181      	strh	r1, [r0, #12]
}
 8000f14:	4770      	bx	lr

08000f16 <SPI_CalculateCRC>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI CRC calculation */
    SPIx->CR1 |= SPI_CR1_CRCEN;
 8000f16:	8803      	ldrh	r3, [r0, #0]
void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000f18:	b119      	cbz	r1, 8000f22 <SPI_CalculateCRC+0xc>
  {
    /* Enable the selected SPI CRC calculation */
    SPIx->CR1 |= SPI_CR1_CRCEN;
 8000f1a:	b29b      	uxth	r3, r3
 8000f1c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f20:	e003      	b.n	8000f2a <SPI_CalculateCRC+0x14>
  }
  else
  {
    /* Disable the selected SPI CRC calculation */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCEN);
 8000f22:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000f26:	041b      	lsls	r3, r3, #16
 8000f28:	0c1b      	lsrs	r3, r3, #16
 8000f2a:	8003      	strh	r3, [r0, #0]
 8000f2c:	4770      	bx	lr

08000f2e <SPI_TransmitCRC>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Enable the selected SPI CRC transmission */
  SPIx->CR1 |= SPI_CR1_CRCNEXT;
 8000f2e:	8803      	ldrh	r3, [r0, #0]
 8000f30:	b29b      	uxth	r3, r3
 8000f32:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f36:	8003      	strh	r3, [r0, #0]
}
 8000f38:	4770      	bx	lr

08000f3a <SPI_GetCRC>:
{
  uint16_t crcreg = 0;
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_CRC(SPI_CRC));
  if (SPI_CRC != SPI_CRC_Rx)
 8000f3a:	2901      	cmp	r1, #1
 8000f3c:	d002      	beq.n	8000f44 <SPI_GetCRC+0xa>
  {
    /* Get the Tx CRC register */
    crcreg = SPIx->TXCRCR;
 8000f3e:	8b00      	ldrh	r0, [r0, #24]
 8000f40:	b280      	uxth	r0, r0
 8000f42:	4770      	bx	lr
  }
  else
  {
    /* Get the Rx CRC register */
    crcreg = SPIx->RXCRCR;
 8000f44:	8a80      	ldrh	r0, [r0, #20]
 8000f46:	b280      	uxth	r0, r0
  }
  /* Return the selected CRC register */
  return crcreg;
}
 8000f48:	4770      	bx	lr

08000f4a <SPI_GetCRCPolynomial>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the CRC polynomial register */
  return SPIx->CRCPR;
 8000f4a:	8a00      	ldrh	r0, [r0, #16]
}
 8000f4c:	b280      	uxth	r0, r0
 8000f4e:	4770      	bx	lr

08000f50 <SPI_I2S_DMACmd>:
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 8000f50:	8883      	ldrh	r3, [r0, #4]
 8000f52:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
 8000f54:	b10a      	cbz	r2, 8000f5a <SPI_I2S_DMACmd+0xa>
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 8000f56:	4319      	orrs	r1, r3
 8000f58:	e001      	b.n	8000f5e <SPI_I2S_DMACmd+0xe>
  }
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 8000f5a:	ea23 0101 	bic.w	r1, r3, r1
 8000f5e:	8081      	strh	r1, [r0, #4]
 8000f60:	4770      	bx	lr

08000f62 <SPI_I2S_ITConfig>:

  /* Get the SPI IT index */
  itpos = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 8000f62:	0909      	lsrs	r1, r1, #4
 8000f64:	2301      	movs	r3, #1
 8000f66:	408b      	lsls	r3, r1
 8000f68:	b29b      	uxth	r3, r3

  if (NewState != DISABLE)
 8000f6a:	b11a      	cbz	r2, 8000f74 <SPI_I2S_ITConfig+0x12>
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 8000f6c:	8882      	ldrh	r2, [r0, #4]
 8000f6e:	b292      	uxth	r2, r2
 8000f70:	4313      	orrs	r3, r2
 8000f72:	e003      	b.n	8000f7c <SPI_I2S_ITConfig+0x1a>
  }
  else
  {
    /* Disable the selected SPI interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
 8000f74:	8882      	ldrh	r2, [r0, #4]
 8000f76:	b292      	uxth	r2, r2
 8000f78:	ea22 0303 	bic.w	r3, r2, r3
 8000f7c:	8083      	strh	r3, [r0, #4]
 8000f7e:	4770      	bx	lr

08000f80 <SPI_I2S_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8000f80:	8903      	ldrh	r3, [r0, #8]
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8000f82:	4219      	tst	r1, r3
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
}
 8000f84:	bf0c      	ite	eq
 8000f86:	2000      	moveq	r0, #0
 8000f88:	2001      	movne	r0, #1
 8000f8a:	4770      	bx	lr

08000f8c <SPI_I2S_ClearFlag>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));
    
  /* Clear the selected SPI CRC Error (CRCERR) flag */
  SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
 8000f8c:	43c9      	mvns	r1, r1
 8000f8e:	b289      	uxth	r1, r1
 8000f90:	8101      	strh	r1, [r0, #8]
}
 8000f92:	4770      	bx	lr

08000f94 <SPI_I2S_GetITStatus>:
  *            @arg I2S_IT_UDR: Underrun interrupt.  
  *            @arg SPI_I2S_IT_TIFRFE: Format Error interrupt.  
  * @retval The new state of SPI_I2S_IT (SET or RESET).
  */
ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
{
 8000f94:	b510      	push	{r4, lr}

  /* Set the IT mask */
  itmask = 0x01 << itmask;

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 8000f96:	8884      	ldrh	r4, [r0, #4]

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8000f98:	8900      	ldrh	r0, [r0, #8]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));

  /* Get the SPI_I2S_IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	f001 020f 	and.w	r2, r1, #15

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8000fa0:	b280      	uxth	r0, r0
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));

  /* Get the SPI_I2S_IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 8000fa2:	fa13 f202 	lsls.w	r2, r3, r2

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8000fa6:	4010      	ands	r0, r2

  /* Set the IT mask */
  itmask = 0x01 << itmask;

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 8000fa8:	b2a4      	uxth	r4, r4

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8000faa:	d005      	beq.n	8000fb8 <SPI_I2S_GetITStatus+0x24>

  /* Get the SPI_I2S_IT IT mask */
  itmask = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = 0x01 << itmask;
 8000fac:	0909      	lsrs	r1, r1, #4
 8000fae:	408b      	lsls	r3, r1
  *            @arg SPI_IT_CRCERR: CRC Error interrupt.
  *            @arg I2S_IT_UDR: Underrun interrupt.  
  *            @arg SPI_I2S_IT_TIFRFE: Format Error interrupt.  
  * @retval The new state of SPI_I2S_IT (SET or RESET).
  */
ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
 8000fb0:	421c      	tst	r4, r3

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
  {
    /* SPI_I2S_IT is set */
    bitstatus = SET;
 8000fb2:	bf0c      	ite	eq
 8000fb4:	2000      	moveq	r0, #0
 8000fb6:	2001      	movne	r0, #1
    /* SPI_I2S_IT is reset */
    bitstatus = RESET;
  }
  /* Return the SPI_I2S_IT status */
  return bitstatus;
}
 8000fb8:	bd10      	pop	{r4, pc}

08000fba <SPI_I2S_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_IT(SPI_I2S_IT));

  /* Get the SPI_I2S IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 8000fba:	f001 010f 	and.w	r1, r1, #15
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	408b      	lsls	r3, r1

  /* Clear the selected SPI CRC Error (CRCERR) interrupt pending bit */
  SPIx->SR = (uint16_t)~itpos;
 8000fc2:	43db      	mvns	r3, r3
 8000fc4:	b29b      	uxth	r3, r3
 8000fc6:	8103      	strh	r3, [r0, #8]
}
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop

08000fcc <TI1_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8000fcc:	b530      	push	{r4, r5, lr}
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8000fce:	8c04      	ldrh	r4, [r0, #32]
 8000fd0:	f024 0401 	bic.w	r4, r4, #1
 8000fd4:	0424      	lsls	r4, r4, #16
 8000fd6:	0c24      	lsrs	r4, r4, #16
 8000fd8:	8404      	strh	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000fda:	8b05      	ldrh	r5, [r0, #24]
  tmpccer = TIMx->CCER;
 8000fdc:	8c04      	ldrh	r4, [r0, #32]
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;
 8000fde:	b2ad      	uxth	r5, r5
  tmpccer = TIMx->CCER;
 8000fe0:	b2a4      	uxth	r4, r4

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 8000fe2:	f025 05f3 	bic.w	r5, r5, #243	; 0xf3
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8000fe6:	4315      	orrs	r5, r2

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000fe8:	f024 040a 	bic.w	r4, r4, #10
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8000fec:	ea45 1503 	orr.w	r5, r5, r3, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8000ff0:	f044 0401 	orr.w	r4, r4, #1
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8000ff4:	b2ad      	uxth	r5, r5

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8000ff6:	430c      	orrs	r4, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8000ff8:	8305      	strh	r5, [r0, #24]
  TIMx->CCER = tmpccer;
 8000ffa:	8404      	strh	r4, [r0, #32]
}
 8000ffc:	bd30      	pop	{r4, r5, pc}

08000ffe <TI2_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8000ffe:	b530      	push	{r4, r5, lr}
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8001000:	8c04      	ldrh	r4, [r0, #32]
 8001002:	f024 0410 	bic.w	r4, r4, #16
 8001006:	0424      	lsls	r4, r4, #16
 8001008:	0c24      	lsrs	r4, r4, #16
 800100a:	8404      	strh	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800100c:	8b04      	ldrh	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 800100e:	8c05      	ldrh	r5, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8001010:	f424 7440 	bic.w	r4, r4, #768	; 0x300
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
 8001014:	b2ad      	uxth	r5, r5
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8001016:	0524      	lsls	r4, r4, #20
 8001018:	0d24      	lsrs	r4, r4, #20
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800101a:	f025 05a0 	bic.w	r5, r5, #160	; 0xa0
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 800101e:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8001022:	f045 0510 	orr.w	r5, r5, #16
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8001026:	ea44 3403 	orr.w	r4, r4, r3, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 800102a:	ea45 1501 	orr.w	r5, r5, r1, lsl #4
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 800102e:	b2a4      	uxth	r4, r4

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8001030:	b2ad      	uxth	r5, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001032:	8304      	strh	r4, [r0, #24]
  TIMx->CCER = tmpccer;
 8001034:	8405      	strh	r5, [r0, #32]
}
 8001036:	bd30      	pop	{r4, r5, pc}

08001038 <TIM_DeInit>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval None

  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 8001038:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
 800103a:	4b47      	ldr	r3, [pc, #284]	; (8001158 <TIM_DeInit+0x120>)
 800103c:	4298      	cmp	r0, r3
 800103e:	d105      	bne.n	800104c <TIM_DeInit+0x14>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 8001040:	2001      	movs	r0, #1
 8001042:	4601      	mov	r1, r0
 8001044:	f7ff fd82 	bl	8000b4c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 8001048:	2001      	movs	r0, #1
 800104a:	e03d      	b.n	80010c8 <TIM_DeInit+0x90>
  } 
  else if (TIMx == TIM2) 
 800104c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001050:	d105      	bne.n	800105e <TIM_DeInit+0x26>
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 8001052:	2001      	movs	r0, #1
 8001054:	4601      	mov	r1, r0
 8001056:	f7ff fd6d 	bl	8000b34 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 800105a:	2001      	movs	r0, #1
 800105c:	e076      	b.n	800114c <TIM_DeInit+0x114>
  }  
  else if (TIMx == TIM3)
 800105e:	4b3f      	ldr	r3, [pc, #252]	; (800115c <TIM_DeInit+0x124>)
 8001060:	4298      	cmp	r0, r3
 8001062:	d105      	bne.n	8001070 <TIM_DeInit+0x38>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 8001064:	2002      	movs	r0, #2
 8001066:	2101      	movs	r1, #1
 8001068:	f7ff fd64 	bl	8000b34 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 800106c:	2002      	movs	r0, #2
 800106e:	e06d      	b.n	800114c <TIM_DeInit+0x114>
  }  
  else if (TIMx == TIM4)
 8001070:	4b3b      	ldr	r3, [pc, #236]	; (8001160 <TIM_DeInit+0x128>)
 8001072:	4298      	cmp	r0, r3
 8001074:	d105      	bne.n	8001082 <TIM_DeInit+0x4a>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 8001076:	2004      	movs	r0, #4
 8001078:	2101      	movs	r1, #1
 800107a:	f7ff fd5b 	bl	8000b34 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 800107e:	2004      	movs	r0, #4
 8001080:	e064      	b.n	800114c <TIM_DeInit+0x114>
  }  
  else if (TIMx == TIM5)
 8001082:	4b38      	ldr	r3, [pc, #224]	; (8001164 <TIM_DeInit+0x12c>)
 8001084:	4298      	cmp	r0, r3
 8001086:	d105      	bne.n	8001094 <TIM_DeInit+0x5c>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 8001088:	2008      	movs	r0, #8
 800108a:	2101      	movs	r1, #1
 800108c:	f7ff fd52 	bl	8000b34 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 8001090:	2008      	movs	r0, #8
 8001092:	e05b      	b.n	800114c <TIM_DeInit+0x114>
  }  
  else if (TIMx == TIM6)  
 8001094:	4b34      	ldr	r3, [pc, #208]	; (8001168 <TIM_DeInit+0x130>)
 8001096:	4298      	cmp	r0, r3
 8001098:	d105      	bne.n	80010a6 <TIM_DeInit+0x6e>
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 800109a:	2010      	movs	r0, #16
 800109c:	2101      	movs	r1, #1
 800109e:	f7ff fd49 	bl	8000b34 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 80010a2:	2010      	movs	r0, #16
 80010a4:	e052      	b.n	800114c <TIM_DeInit+0x114>
  }  
  else if (TIMx == TIM7)
 80010a6:	4b31      	ldr	r3, [pc, #196]	; (800116c <TIM_DeInit+0x134>)
 80010a8:	4298      	cmp	r0, r3
 80010aa:	d105      	bne.n	80010b8 <TIM_DeInit+0x80>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 80010ac:	2020      	movs	r0, #32
 80010ae:	2101      	movs	r1, #1
 80010b0:	f7ff fd40 	bl	8000b34 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 80010b4:	2020      	movs	r0, #32
 80010b6:	e049      	b.n	800114c <TIM_DeInit+0x114>
  }  
  else if (TIMx == TIM8)
 80010b8:	4b2d      	ldr	r3, [pc, #180]	; (8001170 <TIM_DeInit+0x138>)
 80010ba:	4298      	cmp	r0, r3
 80010bc:	d109      	bne.n	80010d2 <TIM_DeInit+0x9a>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 80010be:	2002      	movs	r0, #2
 80010c0:	2101      	movs	r1, #1
 80010c2:	f7ff fd43 	bl	8000b4c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 80010c6:	2002      	movs	r0, #2
 80010c8:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 80010ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
  }  
  else if (TIMx == TIM8)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 80010ce:	f7ff bd3d 	b.w	8000b4c <RCC_APB2PeriphResetCmd>
  }  
  else if (TIMx == TIM9)
 80010d2:	4b28      	ldr	r3, [pc, #160]	; (8001174 <TIM_DeInit+0x13c>)
 80010d4:	4298      	cmp	r0, r3
 80010d6:	d107      	bne.n	80010e8 <TIM_DeInit+0xb0>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
 80010d8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80010dc:	2101      	movs	r1, #1
 80010de:	f7ff fd35 	bl	8000b4c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 80010e2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80010e6:	e7ef      	b.n	80010c8 <TIM_DeInit+0x90>
   }  
  else if (TIMx == TIM10)
 80010e8:	4b23      	ldr	r3, [pc, #140]	; (8001178 <TIM_DeInit+0x140>)
 80010ea:	4298      	cmp	r0, r3
 80010ec:	d107      	bne.n	80010fe <TIM_DeInit+0xc6>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
 80010ee:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80010f2:	2101      	movs	r1, #1
 80010f4:	f7ff fd2a 	bl	8000b4c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 80010f8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80010fc:	e7e4      	b.n	80010c8 <TIM_DeInit+0x90>
  }  
  else if (TIMx == TIM11) 
 80010fe:	4b1f      	ldr	r3, [pc, #124]	; (800117c <TIM_DeInit+0x144>)
 8001100:	4298      	cmp	r0, r3
 8001102:	d107      	bne.n	8001114 <TIM_DeInit+0xdc>
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
 8001104:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001108:	2101      	movs	r1, #1
 800110a:	f7ff fd1f 	bl	8000b4c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 800110e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001112:	e7d9      	b.n	80010c8 <TIM_DeInit+0x90>
  }  
  else if (TIMx == TIM12)
 8001114:	4b1a      	ldr	r3, [pc, #104]	; (8001180 <TIM_DeInit+0x148>)
 8001116:	4298      	cmp	r0, r3
 8001118:	d105      	bne.n	8001126 <TIM_DeInit+0xee>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
 800111a:	2040      	movs	r0, #64	; 0x40
 800111c:	2101      	movs	r1, #1
 800111e:	f7ff fd09 	bl	8000b34 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 8001122:	2040      	movs	r0, #64	; 0x40
 8001124:	e012      	b.n	800114c <TIM_DeInit+0x114>
  }  
  else if (TIMx == TIM13) 
 8001126:	4b17      	ldr	r3, [pc, #92]	; (8001184 <TIM_DeInit+0x14c>)
 8001128:	4298      	cmp	r0, r3
 800112a:	d105      	bne.n	8001138 <TIM_DeInit+0x100>
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
 800112c:	2080      	movs	r0, #128	; 0x80
 800112e:	2101      	movs	r1, #1
 8001130:	f7ff fd00 	bl	8000b34 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 8001134:	2080      	movs	r0, #128	; 0x80
 8001136:	e009      	b.n	800114c <TIM_DeInit+0x114>
  }  
  else
  { 
    if (TIMx == TIM14) 
 8001138:	4b13      	ldr	r3, [pc, #76]	; (8001188 <TIM_DeInit+0x150>)
 800113a:	4298      	cmp	r0, r3
 800113c:	d10b      	bne.n	8001156 <TIM_DeInit+0x11e>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 800113e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001142:	2101      	movs	r1, #1
 8001144:	f7ff fcf6 	bl	8000b34 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 8001148:	f44f 7080 	mov.w	r0, #256	; 0x100
 800114c:	2100      	movs	r1, #0
    }   
  }
}
 800114e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  { 
    if (TIMx == TIM14) 
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 8001152:	f7ff bcef 	b.w	8000b34 <RCC_APB1PeriphResetCmd>
 8001156:	bd08      	pop	{r3, pc}
 8001158:	40010000 	.word	0x40010000
 800115c:	40000400 	.word	0x40000400
 8001160:	40000800 	.word	0x40000800
 8001164:	40000c00 	.word	0x40000c00
 8001168:	40001000 	.word	0x40001000
 800116c:	40001400 	.word	0x40001400
 8001170:	40010400 	.word	0x40010400
 8001174:	40014000 	.word	0x40014000
 8001178:	40014400 	.word	0x40014400
 800117c:	40014800 	.word	0x40014800
 8001180:	40001800 	.word	0x40001800
 8001184:	40001c00 	.word	0x40001c00
 8001188:	40002000 	.word	0x40002000

0800118c <TIM_TimeBaseInit>:
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  

  if((TIMx == TIM1) || (TIMx == TIM8)||
 800118c:	4a1c      	ldr	r2, [pc, #112]	; (8001200 <TIM_TimeBaseInit+0x74>)
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 800118e:	8803      	ldrh	r3, [r0, #0]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8001190:	4290      	cmp	r0, r2
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8001192:	b29b      	uxth	r3, r3

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8001194:	d012      	beq.n	80011bc <TIM_TimeBaseInit+0x30>
 8001196:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800119a:	4290      	cmp	r0, r2
 800119c:	d00e      	beq.n	80011bc <TIM_TimeBaseInit+0x30>
 800119e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80011a2:	d00b      	beq.n	80011bc <TIM_TimeBaseInit+0x30>
     (TIMx == TIM2) || (TIMx == TIM3)||
 80011a4:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 80011a8:	4290      	cmp	r0, r2
 80011aa:	d007      	beq.n	80011bc <TIM_TimeBaseInit+0x30>
 80011ac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011b0:	4290      	cmp	r0, r2
 80011b2:	d003      	beq.n	80011bc <TIM_TimeBaseInit+0x30>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 80011b4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011b8:	4290      	cmp	r0, r2
 80011ba:	d103      	bne.n	80011c4 <TIM_TimeBaseInit+0x38>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80011bc:	884a      	ldrh	r2, [r1, #2]
  if((TIMx == TIM1) || (TIMx == TIM8)||
     (TIMx == TIM2) || (TIMx == TIM3)||
     (TIMx == TIM4) || (TIMx == TIM5)) 
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 80011be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80011c2:	4313      	orrs	r3, r2
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 80011c4:	4a0f      	ldr	r2, [pc, #60]	; (8001204 <TIM_TimeBaseInit+0x78>)
 80011c6:	4290      	cmp	r0, r2
 80011c8:	d008      	beq.n	80011dc <TIM_TimeBaseInit+0x50>
 80011ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011ce:	4290      	cmp	r0, r2
 80011d0:	d004      	beq.n	80011dc <TIM_TimeBaseInit+0x50>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 80011d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80011d6:	890a      	ldrh	r2, [r1, #8]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 80011d8:	b29b      	uxth	r3, r3
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80011da:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 80011dc:	8003      	strh	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80011de:	684b      	ldr	r3, [r1, #4]
 80011e0:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80011e2:	880b      	ldrh	r3, [r1, #0]
 80011e4:	8503      	strh	r3, [r0, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 80011e6:	4b06      	ldr	r3, [pc, #24]	; (8001200 <TIM_TimeBaseInit+0x74>)
 80011e8:	4298      	cmp	r0, r3
 80011ea:	d003      	beq.n	80011f4 <TIM_TimeBaseInit+0x68>
 80011ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80011f0:	4298      	cmp	r0, r3
 80011f2:	d101      	bne.n	80011f8 <TIM_TimeBaseInit+0x6c>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 80011f4:	7a8b      	ldrb	r3, [r1, #10]
 80011f6:	8603      	strh	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 80011f8:	2301      	movs	r3, #1
 80011fa:	8283      	strh	r3, [r0, #20]
}
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	40010000 	.word	0x40010000
 8001204:	40001000 	.word	0x40001000

08001208 <TIM_TimeBaseStructInit>:
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 8001208:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800120c:	6043      	str	r3, [r0, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 800120e:	2300      	movs	r3, #0
 8001210:	8003      	strh	r3, [r0, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 8001212:	8103      	strh	r3, [r0, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 8001214:	8043      	strh	r3, [r0, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 8001216:	7283      	strb	r3, [r0, #10]
}
 8001218:	4770      	bx	lr

0800121a <TIM_PrescalerConfig>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
 800121a:	8501      	strh	r1, [r0, #40]	; 0x28
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
 800121c:	8282      	strh	r2, [r0, #20]
}
 800121e:	4770      	bx	lr

08001220 <TIM_CounterModeConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));

  tmpcr1 = TIMx->CR1;
 8001220:	8803      	ldrh	r3, [r0, #0]

  /* Reset the CMS and DIR Bits */
  tmpcr1 &= (uint16_t)~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001226:	041b      	lsls	r3, r3, #16
 8001228:	0c1b      	lsrs	r3, r3, #16

  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
 800122a:	430b      	orrs	r3, r1

  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
 800122c:	8003      	strh	r3, [r0, #0]
}
 800122e:	4770      	bx	lr

08001230 <TIM_SetCounter>:
{
  /* Check the parameters */
   assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 8001230:	6241      	str	r1, [r0, #36]	; 0x24
}
 8001232:	4770      	bx	lr

08001234 <TIM_SetAutoreload>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 8001234:	62c1      	str	r1, [r0, #44]	; 0x2c
}
 8001236:	4770      	bx	lr

08001238 <TIM_GetCounter>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Counter Register value */
  return TIMx->CNT;
 8001238:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
 800123a:	4770      	bx	lr

0800123c <TIM_GetPrescaler>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Prescaler Register value */
  return TIMx->PSC;
 800123c:	8d00      	ldrh	r0, [r0, #40]	; 0x28
}
 800123e:	b280      	uxth	r0, r0
 8001240:	4770      	bx	lr

08001242 <TIM_UpdateDisableConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 8001242:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001244:	b119      	cbz	r1, 800124e <TIM_UpdateDisableConfig+0xc>
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 8001246:	b29b      	uxth	r3, r3
 8001248:	f043 0302 	orr.w	r3, r3, #2
 800124c:	e003      	b.n	8001256 <TIM_UpdateDisableConfig+0x14>
  }
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_UDIS;
 800124e:	f023 0302 	bic.w	r3, r3, #2
 8001252:	041b      	lsls	r3, r3, #16
 8001254:	0c1b      	lsrs	r3, r3, #16
 8001256:	8003      	strh	r3, [r0, #0]
 8001258:	4770      	bx	lr

0800125a <TIM_UpdateRequestConfig>:
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 800125a:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
 800125c:	b119      	cbz	r1, 8001266 <TIM_UpdateRequestConfig+0xc>
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 800125e:	b29b      	uxth	r3, r3
 8001260:	f043 0304 	orr.w	r3, r3, #4
 8001264:	e003      	b.n	800126e <TIM_UpdateRequestConfig+0x14>
  }
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_URS;
 8001266:	f023 0304 	bic.w	r3, r3, #4
 800126a:	041b      	lsls	r3, r3, #16
 800126c:	0c1b      	lsrs	r3, r3, #16
 800126e:	8003      	strh	r3, [r0, #0]
 8001270:	4770      	bx	lr

08001272 <TIM_ARRPreloadConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 8001272:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001274:	b119      	cbz	r1, 800127e <TIM_ARRPreloadConfig+0xc>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 8001276:	b29b      	uxth	r3, r3
 8001278:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800127c:	e003      	b.n	8001286 <TIM_ARRPreloadConfig+0x14>
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 800127e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001282:	041b      	lsls	r3, r3, #16
 8001284:	0c1b      	lsrs	r3, r3, #16
 8001286:	8003      	strh	r3, [r0, #0]
 8001288:	4770      	bx	lr

0800128a <TIM_SelectOnePulseMode>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));

  /* Reset the OPM Bit */
  TIMx->CR1 &= (uint16_t)~TIM_CR1_OPM;
 800128a:	8803      	ldrh	r3, [r0, #0]
 800128c:	f023 0308 	bic.w	r3, r3, #8
 8001290:	041b      	lsls	r3, r3, #16
 8001292:	0c1b      	lsrs	r3, r3, #16
 8001294:	8003      	strh	r3, [r0, #0]

  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
 8001296:	8803      	ldrh	r3, [r0, #0]
 8001298:	b29b      	uxth	r3, r3
 800129a:	430b      	orrs	r3, r1
 800129c:	8003      	strh	r3, [r0, #0]
}
 800129e:	4770      	bx	lr

080012a0 <TIM_SetClockDivision>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));

  /* Reset the CKD Bits */
  TIMx->CR1 &= (uint16_t)(~TIM_CR1_CKD);
 80012a0:	8803      	ldrh	r3, [r0, #0]
 80012a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80012a6:	041b      	lsls	r3, r3, #16
 80012a8:	0c1b      	lsrs	r3, r3, #16
 80012aa:	8003      	strh	r3, [r0, #0]

  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
 80012ac:	8803      	ldrh	r3, [r0, #0]
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	430b      	orrs	r3, r1
 80012b2:	8003      	strh	r3, [r0, #0]
}
 80012b4:	4770      	bx	lr

080012b6 <TIM_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80012b6:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80012b8:	b119      	cbz	r1, 80012c2 <TIM_Cmd+0xc>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	f043 0301 	orr.w	r3, r3, #1
 80012c0:	e003      	b.n	80012ca <TIM_Cmd+0x14>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 80012c2:	f023 0301 	bic.w	r3, r3, #1
 80012c6:	041b      	lsls	r3, r3, #16
 80012c8:	0c1b      	lsrs	r3, r3, #16
 80012ca:	8003      	strh	r3, [r0, #0]
 80012cc:	4770      	bx	lr

080012ce <TIM_OC1Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 80012ce:	8c03      	ldrh	r3, [r0, #32]
 80012d0:	f023 0301 	bic.w	r3, r3, #1
 80012d4:	041b      	lsls	r3, r3, #16
 80012d6:	0c1b      	lsrs	r3, r3, #16
 80012d8:	8403      	strh	r3, [r0, #32]
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80012da:	b570      	push	{r4, r5, r6, lr}

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80012dc:	8c03      	ldrh	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80012de:	8884      	ldrh	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80012e0:	8b02      	ldrh	r2, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80012e2:	880d      	ldrh	r5, [r1, #0]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 80012e4:	884e      	ldrh	r6, [r1, #2]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 80012e6:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 80012ea:	0412      	lsls	r2, r2, #16
 80012ec:	0c12      	lsrs	r2, r2, #16
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80012ee:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 80012f0:	898d      	ldrh	r5, [r1, #12]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 80012f2:	f023 0302 	bic.w	r3, r3, #2
 80012f6:	041b      	lsls	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 80012f8:	4335      	orrs	r5, r6
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 80012fa:	0c1b      	lsrs	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 80012fc:	b2ad      	uxth	r5, r5
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 80012fe:	432b      	orrs	r3, r5
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001300:	4d0e      	ldr	r5, [pc, #56]	; (800133c <TIM_OC1Init+0x6e>)
 8001302:	42a8      	cmp	r0, r5
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001304:	b2a4      	uxth	r4, r4
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001306:	d003      	beq.n	8001310 <TIM_OC1Init+0x42>
 8001308:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800130c:	42a8      	cmp	r0, r5
 800130e:	d10e      	bne.n	800132e <TIM_OC1Init+0x60>
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8001310:	89cd      	ldrh	r5, [r1, #14]
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 8001312:	8a4e      	ldrh	r6, [r1, #18]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 8001314:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8001318:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 800131a:	888d      	ldrh	r5, [r1, #4]
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 800131c:	f023 0304 	bic.w	r3, r3, #4
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8001320:	432b      	orrs	r3, r5
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 8001322:	8a0d      	ldrh	r5, [r1, #16]
 8001324:	4335      	orrs	r5, r6
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 8001326:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 800132a:	b2ad      	uxth	r5, r5
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 800132c:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800132e:	8084      	strh	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001330:	8302      	strh	r2, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 8001332:	688a      	ldr	r2, [r1, #8]
 8001334:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001336:	8403      	strh	r3, [r0, #32]
}
 8001338:	bd70      	pop	{r4, r5, r6, pc}
 800133a:	bf00      	nop
 800133c:	40010000 	.word	0x40010000

08001340 <TIM_OC2Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8001340:	8c03      	ldrh	r3, [r0, #32]
 8001342:	f023 0310 	bic.w	r3, r3, #16
 8001346:	041b      	lsls	r3, r3, #16
 8001348:	0c1b      	lsrs	r3, r3, #16
 800134a:	8403      	strh	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 800134c:	8c03      	ldrh	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800134e:	8882      	ldrh	r2, [r0, #4]
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8001350:	b530      	push	{r4, r5, lr}
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001352:	8b04      	ldrh	r4, [r0, #24]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8001354:	880d      	ldrh	r5, [r1, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 8001356:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
 800135a:	0424      	lsls	r4, r4, #16
 800135c:	0c24      	lsrs	r4, r4, #16
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 800135e:	f023 0320 	bic.w	r3, r3, #32
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8001362:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 8001366:	041b      	lsls	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 8001368:	898d      	ldrh	r5, [r1, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 800136a:	0c1b      	lsrs	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 800136c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8001370:	884d      	ldrh	r5, [r1, #2]
 8001372:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001376:	4d13      	ldr	r5, [pc, #76]	; (80013c4 <TIM_OC2Init+0x84>)
 8001378:	42a8      	cmp	r0, r5
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800137a:	b292      	uxth	r2, r2
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 800137c:	b2a4      	uxth	r4, r4
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 800137e:	b29b      	uxth	r3, r3
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001380:	d003      	beq.n	800138a <TIM_OC2Init+0x4a>
 8001382:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001386:	42a8      	cmp	r0, r5
 8001388:	d115      	bne.n	80013b6 <TIM_OC2Init+0x76>
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 800138a:	89cd      	ldrh	r5, [r1, #14]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 800138c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001390:	b29b      	uxth	r3, r3
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 8001392:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
 8001396:	f64f 75bf 	movw	r5, #65471	; 0xffbf
 800139a:	401d      	ands	r5, r3
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 800139c:	888b      	ldrh	r3, [r1, #4]
 800139e:	ea45 1303 	orr.w	r3, r5, r3, lsl #4
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 80013a2:	8a0d      	ldrh	r5, [r1, #16]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
 80013a4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 80013a8:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 80013ac:	8a4d      	ldrh	r5, [r1, #18]
 80013ae:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 80013b2:	b29b      	uxth	r3, r3
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 80013b4:	b292      	uxth	r2, r2
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80013b6:	8082      	strh	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 80013b8:	688a      	ldr	r2, [r1, #8]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80013ba:	8304      	strh	r4, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 80013bc:	6382      	str	r2, [r0, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80013be:	8403      	strh	r3, [r0, #32]
}
 80013c0:	bd30      	pop	{r4, r5, pc}
 80013c2:	bf00      	nop
 80013c4:	40010000 	.word	0x40010000

080013c8 <TIM_OC3Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 80013c8:	8c03      	ldrh	r3, [r0, #32]
 80013ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013ce:	041b      	lsls	r3, r3, #16
 80013d0:	0c1b      	lsrs	r3, r3, #16
 80013d2:	8403      	strh	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80013d4:	8c03      	ldrh	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80013d6:	8882      	ldrh	r2, [r0, #4]
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80013d8:	b530      	push	{r4, r5, lr}
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80013da:	8b84      	ldrh	r4, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80013dc:	880d      	ldrh	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 80013de:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 80013e2:	0424      	lsls	r4, r4, #16
 80013e4:	0c24      	lsrs	r4, r4, #16
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 80013e6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80013ea:	041b      	lsls	r3, r3, #16
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80013ec:	432c      	orrs	r4, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 80013ee:	898d      	ldrh	r5, [r1, #12]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 80013f0:	0c1b      	lsrs	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 80013f2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 80013f6:	884d      	ldrh	r5, [r1, #2]
 80013f8:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80013fc:	4d12      	ldr	r5, [pc, #72]	; (8001448 <TIM_OC3Init+0x80>)
 80013fe:	42a8      	cmp	r0, r5
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001400:	b292      	uxth	r2, r2
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8001402:	b29b      	uxth	r3, r3
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001404:	d003      	beq.n	800140e <TIM_OC3Init+0x46>
 8001406:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800140a:	42a8      	cmp	r0, r5
 800140c:	d115      	bne.n	800143a <TIM_OC3Init+0x72>
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 800140e:	89cd      	ldrh	r5, [r1, #14]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 8001410:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001414:	b29b      	uxth	r3, r3
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8001416:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 800141a:	f64f 35ff 	movw	r5, #64511	; 0xfbff
 800141e:	401d      	ands	r5, r3
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8001420:	888b      	ldrh	r3, [r1, #4]
 8001422:	ea45 2303 	orr.w	r3, r5, r3, lsl #8
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8001426:	8a0d      	ldrh	r5, [r1, #16]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 8001428:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 800142c:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8001430:	8a4d      	ldrh	r5, [r1, #18]
 8001432:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8001436:	b29b      	uxth	r3, r3
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8001438:	b292      	uxth	r2, r2
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800143a:	8082      	strh	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 800143c:	688a      	ldr	r2, [r1, #8]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800143e:	8384      	strh	r4, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8001440:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001442:	8403      	strh	r3, [r0, #32]
}
 8001444:	bd30      	pop	{r4, r5, pc}
 8001446:	bf00      	nop
 8001448:	40010000 	.word	0x40010000

0800144c <TIM_OC4Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 800144c:	8c03      	ldrh	r3, [r0, #32]
 800144e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001452:	041b      	lsls	r3, r3, #16
 8001454:	0c1b      	lsrs	r3, r3, #16
 8001456:	8403      	strh	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001458:	8c03      	ldrh	r3, [r0, #32]
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800145a:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800145c:	8884      	ldrh	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800145e:	8b82      	ldrh	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8001460:	880d      	ldrh	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 8001462:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8001466:	0412      	lsls	r2, r2, #16
 8001468:	0c12      	lsrs	r2, r2, #16
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 800146a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 800146e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 8001472:	041b      	lsls	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8001474:	898d      	ldrh	r5, [r1, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 8001476:	0c1b      	lsrs	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8001478:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 800147c:	884d      	ldrh	r5, [r1, #2]
 800147e:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001482:	4d0b      	ldr	r5, [pc, #44]	; (80014b0 <TIM_OC4Init+0x64>)
 8001484:	42a8      	cmp	r0, r5
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001486:	b2a4      	uxth	r4, r4
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8001488:	b292      	uxth	r2, r2
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 800148a:	b29b      	uxth	r3, r3
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 800148c:	d003      	beq.n	8001496 <TIM_OC4Init+0x4a>
 800148e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001492:	42a8      	cmp	r0, r5
 8001494:	d105      	bne.n	80014a2 <TIM_OC4Init+0x56>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8001496:	8a0d      	ldrh	r5, [r1, #16]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 8001498:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 800149c:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 80014a0:	b2a4      	uxth	r4, r4
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80014a2:	8084      	strh	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 80014a4:	8382      	strh	r2, [r0, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 80014a6:	688a      	ldr	r2, [r1, #8]
 80014a8:	6402      	str	r2, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80014aa:	8403      	strh	r3, [r0, #32]
}
 80014ac:	bd30      	pop	{r4, r5, pc}
 80014ae:	bf00      	nop
 80014b0:	40010000 	.word	0x40010000

080014b4 <TIM_OCStructInit>:
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 80014b4:	2300      	movs	r3, #0
 80014b6:	8003      	strh	r3, [r0, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 80014b8:	8043      	strh	r3, [r0, #2]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 80014ba:	8083      	strh	r3, [r0, #4]
  TIM_OCInitStruct->TIM_Pulse = 0x00000000;
 80014bc:	6083      	str	r3, [r0, #8]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 80014be:	8183      	strh	r3, [r0, #12]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 80014c0:	81c3      	strh	r3, [r0, #14]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 80014c2:	8203      	strh	r3, [r0, #16]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 80014c4:	8243      	strh	r3, [r0, #18]
}
 80014c6:	4770      	bx	lr

080014c8 <TIM_SelectOCxM>:
  *            @arg TIM_ForcedAction_Active
  *            @arg TIM_ForcedAction_InActive
  * @retval None
  */
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
{
 80014c8:	b530      	push	{r4, r5, lr}
  tmp += CCMR_OFFSET;

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 80014ca:	8c05      	ldrh	r5, [r0, #32]
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
  tmp += CCMR_OFFSET;

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;
 80014cc:	2401      	movs	r4, #1

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 80014ce:	b2ad      	uxth	r5, r5
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
  tmp += CCMR_OFFSET;

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;
 80014d0:	408c      	lsls	r4, r1

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 80014d2:	ea25 0404 	bic.w	r4, r5, r4
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
  tmp += CCMR_OFFSET;
 80014d6:	f100 0318 	add.w	r3, r0, #24

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 80014da:	8404      	strh	r4, [r0, #32]

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 80014dc:	b109      	cbz	r1, 80014e2 <TIM_SelectOCxM+0x1a>
 80014de:	2908      	cmp	r1, #8
 80014e0:	d107      	bne.n	80014f2 <TIM_SelectOCxM+0x2a>
  {
    tmp += (TIM_Channel>>1);
 80014e2:	0849      	lsrs	r1, r1, #1

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC13M_MASK;
 80014e4:	f64f 708f 	movw	r0, #65423	; 0xff8f
 80014e8:	58cc      	ldr	r4, [r1, r3]
 80014ea:	4020      	ands	r0, r4
 80014ec:	50c8      	str	r0, [r1, r3]
   
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
 80014ee:	58c8      	ldr	r0, [r1, r3]
 80014f0:	e00a      	b.n	8001508 <TIM_SelectOCxM+0x40>
  }
  else
  {
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
 80014f2:	3904      	subs	r1, #4
 80014f4:	f3c1 014e 	ubfx	r1, r1, #1, #15

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC24M_MASK;
 80014f8:	f648 70ff 	movw	r0, #36863	; 0x8fff
 80014fc:	58cc      	ldr	r4, [r1, r3]
 80014fe:	4020      	ands	r0, r4
 8001500:	50c8      	str	r0, [r1, r3]
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 8001502:	0212      	lsls	r2, r2, #8
 8001504:	58c8      	ldr	r0, [r1, r3]
 8001506:	b292      	uxth	r2, r2
 8001508:	4302      	orrs	r2, r0
 800150a:	50ca      	str	r2, [r1, r3]
 800150c:	bd30      	pop	{r4, r5, pc}

0800150e <TIM_SetCompare1>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 800150e:	6341      	str	r1, [r0, #52]	; 0x34
}
 8001510:	4770      	bx	lr

08001512 <TIM_SetCompare2>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 8001512:	6381      	str	r1, [r0, #56]	; 0x38
}
 8001514:	4770      	bx	lr

08001516 <TIM_SetCompare3>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 8001516:	63c1      	str	r1, [r0, #60]	; 0x3c
}
 8001518:	4770      	bx	lr

0800151a <TIM_SetCompare4>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
 800151a:	6401      	str	r1, [r0, #64]	; 0x40
}
 800151c:	4770      	bx	lr

0800151e <TIM_ForcedOC1Config>:
  uint16_t tmpccmr1 = 0;

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 800151e:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1M;
 8001520:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001524:	041b      	lsls	r3, r3, #16
 8001526:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
 8001528:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800152a:	8303      	strh	r3, [r0, #24]
}
 800152c:	4770      	bx	lr

0800152e <TIM_ForcedOC2Config>:
  uint16_t tmpccmr1 = 0;

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 800152e:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2M;
 8001530:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001534:	041b      	lsls	r3, r3, #16
 8001536:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
 8001538:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800153c:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800153e:	8303      	strh	r3, [r0, #24]
}
 8001540:	4770      	bx	lr

08001542 <TIM_ForcedOC3Config>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));

  tmpccmr2 = TIMx->CCMR2;
 8001542:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC1M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3M;
 8001544:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001548:	041b      	lsls	r3, r3, #16
 800154a:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
 800154c:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800154e:	8383      	strh	r3, [r0, #28]
}
 8001550:	4770      	bx	lr

08001552 <TIM_ForcedOC4Config>:
  uint16_t tmpccmr2 = 0;

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
 8001552:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC2M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4M;
 8001554:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001558:	041b      	lsls	r3, r3, #16
 800155a:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
 800155c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001560:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8001562:	8383      	strh	r3, [r0, #28]
}
 8001564:	4770      	bx	lr

08001566 <TIM_OC1PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8001566:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC1PE);
 8001568:	f023 0308 	bic.w	r3, r3, #8
 800156c:	041b      	lsls	r3, r3, #16
 800156e:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 8001570:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8001572:	8303      	strh	r3, [r0, #24]
}
 8001574:	4770      	bx	lr

08001576 <TIM_OC2PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8001576:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2PE);
 8001578:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800157c:	041b      	lsls	r3, r3, #16
 800157e:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 8001580:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001584:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8001586:	8303      	strh	r3, [r0, #24]
}
 8001588:	4770      	bx	lr

0800158a <TIM_OC3PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 800158a:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 800158c:	f023 0308 	bic.w	r3, r3, #8
 8001590:	041b      	lsls	r3, r3, #16
 8001592:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 8001594:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8001596:	8383      	strh	r3, [r0, #28]
}
 8001598:	4770      	bx	lr

0800159a <TIM_OC4PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 800159a:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
 800159c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80015a0:	041b      	lsls	r3, r3, #16
 80015a2:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 80015a4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80015a8:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80015aa:	8383      	strh	r3, [r0, #28]
}
 80015ac:	4770      	bx	lr

080015ae <TIM_OC1FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 80015ae:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1FE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1FE;
 80015b0:	f023 0304 	bic.w	r3, r3, #4
 80015b4:	041b      	lsls	r3, r3, #16
 80015b6:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
 80015b8:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 80015ba:	8303      	strh	r3, [r0, #24]
}
 80015bc:	4770      	bx	lr

080015be <TIM_OC2FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 80015be:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2FE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2FE);
 80015c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80015c4:	041b      	lsls	r3, r3, #16
 80015c6:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
 80015c8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80015cc:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 80015ce:	8303      	strh	r3, [r0, #24]
}
 80015d0:	4770      	bx	lr

080015d2 <TIM_OC3FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 80015d2:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC3FE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3FE;
 80015d4:	f023 0304 	bic.w	r3, r3, #4
 80015d8:	041b      	lsls	r3, r3, #16
 80015da:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
 80015dc:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 80015de:	8383      	strh	r3, [r0, #28]
}
 80015e0:	4770      	bx	lr

080015e2 <TIM_OC4FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 80015e2:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC4FE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4FE);
 80015e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80015e8:	041b      	lsls	r3, r3, #16
 80015ea:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
 80015ec:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80015f0:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 80015f2:	8383      	strh	r3, [r0, #28]
}
 80015f4:	4770      	bx	lr

080015f6 <TIM_ClearOC1Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 80015f6:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1CE;
 80015f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80015fc:	041b      	lsls	r3, r3, #16
 80015fe:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
 8001600:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8001602:	8303      	strh	r3, [r0, #24]
}
 8001604:	4770      	bx	lr

08001606 <TIM_ClearOC2Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 8001606:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2CE;

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
 8001608:	0209      	lsls	r1, r1, #8
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;

  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2CE;
 800160a:	045b      	lsls	r3, r3, #17

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
 800160c:	ea41 4353 	orr.w	r3, r1, r3, lsr #17
 8001610:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8001612:	8303      	strh	r3, [r0, #24]
}
 8001614:	4770      	bx	lr

08001616 <TIM_ClearOC3Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 8001616:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC3CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3CE;
 8001618:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800161c:	041b      	lsls	r3, r3, #16
 800161e:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
 8001620:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8001622:	8383      	strh	r3, [r0, #28]
}
 8001624:	4770      	bx	lr

08001626 <TIM_ClearOC4Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 8001626:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4CE;

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
 8001628:	0209      	lsls	r1, r1, #8
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;

  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4CE;
 800162a:	045b      	lsls	r3, r3, #17

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
 800162c:	ea41 4353 	orr.w	r3, r1, r3, lsr #17
 8001630:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8001632:	8383      	strh	r3, [r0, #28]
}
 8001634:	4770      	bx	lr

08001636 <TIM_OC1PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8001636:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC1P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC1P);
 8001638:	f023 0302 	bic.w	r3, r3, #2
 800163c:	041b      	lsls	r3, r3, #16
 800163e:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= TIM_OCPolarity;
 8001640:	430b      	orrs	r3, r1

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8001642:	8403      	strh	r3, [r0, #32]
}
 8001644:	4770      	bx	lr

08001646 <TIM_OC1NPolarityConfig>:
  uint16_t tmpccer = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
 8001646:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC1NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 8001648:	f023 0308 	bic.w	r3, r3, #8
 800164c:	041b      	lsls	r3, r3, #16
 800164e:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= TIM_OCNPolarity;
 8001650:	430b      	orrs	r3, r1

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8001652:	8403      	strh	r3, [r0, #32]
}
 8001654:	4770      	bx	lr

08001656 <TIM_OC2PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8001656:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC2P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC2P);
 8001658:	f023 0320 	bic.w	r3, r3, #32
 800165c:	041b      	lsls	r3, r3, #16
 800165e:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
 8001660:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8001664:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8001666:	8403      	strh	r3, [r0, #32]
}
 8001668:	4770      	bx	lr

0800166a <TIM_OC2NPolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
 800166a:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC2NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 800166c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001670:	041b      	lsls	r3, r3, #16
 8001672:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
 8001674:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8001678:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800167a:	8403      	strh	r3, [r0, #32]
}
 800167c:	4770      	bx	lr

0800167e <TIM_OC3PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 800167e:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC3P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 8001680:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001684:	041b      	lsls	r3, r3, #16
 8001686:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
 8001688:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800168c:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800168e:	8403      	strh	r3, [r0, #32]
}
 8001690:	4770      	bx	lr

08001692 <TIM_OC3NPolarityConfig>:
 
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
 8001692:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC3NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 8001694:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001698:	041b      	lsls	r3, r3, #16
 800169a:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
 800169c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80016a0:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80016a2:	8403      	strh	r3, [r0, #32]
}
 80016a4:	4770      	bx	lr

080016a6 <TIM_OC4PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 80016a6:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC4P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 80016a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80016ac:	041b      	lsls	r3, r3, #16
 80016ae:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
 80016b0:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 80016b4:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80016b6:	8403      	strh	r3, [r0, #32]
}
 80016b8:	4770      	bx	lr

080016ba <TIM_CCxCmd>:
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
 80016ba:	b510      	push	{r4, lr}
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 80016bc:	8c04      	ldrh	r4, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;
 80016be:	2301      	movs	r3, #1
 80016c0:	408b      	lsls	r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 80016c2:	b2a4      	uxth	r4, r4
 80016c4:	ea24 0303 	bic.w	r3, r4, r3
 80016c8:	8403      	strh	r3, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
 80016ca:	8c03      	ldrh	r3, [r0, #32]
 80016cc:	fa12 f101 	lsls.w	r1, r2, r1
 80016d0:	430b      	orrs	r3, r1
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	8403      	strh	r3, [r0, #32]
}
 80016d6:	bd10      	pop	{r4, pc}

080016d8 <TIM_CCxNCmd>:
  * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
  * @retval None
  */
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
{
 80016d8:	b510      	push	{r4, lr}
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_SET << TIM_Channel;

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 80016da:	8c04      	ldrh	r4, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_SET << TIM_Channel;
 80016dc:	2304      	movs	r3, #4
 80016de:	408b      	lsls	r3, r1

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 80016e0:	b2a4      	uxth	r4, r4
 80016e2:	ea24 0303 	bic.w	r3, r4, r3
 80016e6:	8403      	strh	r3, [r0, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
 80016e8:	8c03      	ldrh	r3, [r0, #32]
 80016ea:	fa12 f101 	lsls.w	r1, r2, r1
 80016ee:	430b      	orrs	r3, r1
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	8403      	strh	r3, [r0, #32]
}
 80016f4:	bd10      	pop	{r4, pc}

080016f6 <TIM_ICStructInit>:
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 80016f6:	2300      	movs	r3, #0
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 80016f8:	2201      	movs	r2, #1
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 80016fa:	8003      	strh	r3, [r0, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 80016fc:	8043      	strh	r3, [r0, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 80016fe:	8082      	strh	r2, [r0, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 8001700:	80c3      	strh	r3, [r0, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
 8001702:	8103      	strh	r3, [r0, #8]
}
 8001704:	4770      	bx	lr

08001706 <TIM_GetCapture1>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 8001706:	6b40      	ldr	r0, [r0, #52]	; 0x34
}
 8001708:	4770      	bx	lr

0800170a <TIM_GetCapture2>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 800170a:	6b80      	ldr	r0, [r0, #56]	; 0x38
}
 800170c:	4770      	bx	lr

0800170e <TIM_GetCapture3>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 

  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
 800170e:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
}
 8001710:	4770      	bx	lr

08001712 <TIM_GetCapture4>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
 8001712:	6c00      	ldr	r0, [r0, #64]	; 0x40
}
 8001714:	4770      	bx	lr

08001716 <TIM_SetIC1Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
 8001716:	8b03      	ldrh	r3, [r0, #24]
 8001718:	f023 030c 	bic.w	r3, r3, #12
 800171c:	041b      	lsls	r3, r3, #16
 800171e:	0c1b      	lsrs	r3, r3, #16
 8001720:	8303      	strh	r3, [r0, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8001722:	8b03      	ldrh	r3, [r0, #24]
 8001724:	b29b      	uxth	r3, r3
 8001726:	430b      	orrs	r3, r1
 8001728:	8303      	strh	r3, [r0, #24]
}
 800172a:	4770      	bx	lr

0800172c <TIM_SetIC2Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
 800172c:	8b03      	ldrh	r3, [r0, #24]
 800172e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001732:	041b      	lsls	r3, r3, #16
 8001734:	0c1b      	lsrs	r3, r3, #16
 8001736:	8303      	strh	r3, [r0, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8001738:	8b03      	ldrh	r3, [r0, #24]
 800173a:	b29b      	uxth	r3, r3
 800173c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001740:	b29b      	uxth	r3, r3
 8001742:	8303      	strh	r3, [r0, #24]
}
 8001744:	4770      	bx	lr

08001746 <TIM_PWMIConfig>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8001746:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001748:	460c      	mov	r4, r1

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 800174a:	8849      	ldrh	r1, [r1, #2]
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 800174c:	88a2      	ldrh	r2, [r4, #4]
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 800174e:	f8b4 e000 	ldrh.w	lr, [r4]
 8001752:	8923      	ldrh	r3, [r4, #8]
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8001754:	4605      	mov	r5, r0
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
 8001756:	2900      	cmp	r1, #0
 8001758:	bf0c      	ite	eq
 800175a:	2702      	moveq	r7, #2
 800175c:	2700      	movne	r7, #0
    icoppositepolarity = TIM_ICPolarity_Rising;
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
 800175e:	2a01      	cmp	r2, #1
 8001760:	bf14      	ite	ne
 8001762:	2601      	movne	r6, #1
 8001764:	2602      	moveq	r6, #2
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8001766:	f1be 0f00 	cmp.w	lr, #0
 800176a:	d110      	bne.n	800178e <TIM_PWMIConfig+0x48>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 800176c:	f7ff fc2e 	bl	8000fcc <TI1_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8001770:	4628      	mov	r0, r5
 8001772:	88e1      	ldrh	r1, [r4, #6]
 8001774:	f7ff ffcf 	bl	8001716 <TIM_SetIC1Prescaler>
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 8001778:	4628      	mov	r0, r5
 800177a:	4639      	mov	r1, r7
 800177c:	4632      	mov	r2, r6
 800177e:	8923      	ldrh	r3, [r4, #8]
 8001780:	f7ff fc3d 	bl	8000ffe <TI2_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8001784:	88e1      	ldrh	r1, [r4, #6]
 8001786:	4628      	mov	r0, r5
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8001788:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800178c:	e7ce      	b.n	800172c <TIM_SetIC2Prescaler>
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 800178e:	f7ff fc36 	bl	8000ffe <TI2_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8001792:	4628      	mov	r0, r5
 8001794:	88e1      	ldrh	r1, [r4, #6]
 8001796:	f7ff ffc9 	bl	800172c <TIM_SetIC2Prescaler>
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 800179a:	4628      	mov	r0, r5
 800179c:	4639      	mov	r1, r7
 800179e:	4632      	mov	r2, r6
 80017a0:	8923      	ldrh	r3, [r4, #8]
 80017a2:	f7ff fc13 	bl	8000fcc <TI1_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80017a6:	88e1      	ldrh	r1, [r4, #6]
 80017a8:	4628      	mov	r0, r5
  }
}
 80017aa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80017ae:	e7b2      	b.n	8001716 <TIM_SetIC1Prescaler>

080017b0 <TIM_SetIC3Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC3PSC;
 80017b0:	8b83      	ldrh	r3, [r0, #28]
 80017b2:	f023 030c 	bic.w	r3, r3, #12
 80017b6:	041b      	lsls	r3, r3, #16
 80017b8:	0c1b      	lsrs	r3, r3, #16
 80017ba:	8383      	strh	r3, [r0, #28]

  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 80017bc:	8b83      	ldrh	r3, [r0, #28]
 80017be:	b29b      	uxth	r3, r3
 80017c0:	430b      	orrs	r3, r1
 80017c2:	8383      	strh	r3, [r0, #28]
}
 80017c4:	4770      	bx	lr

080017c6 <TIM_SetIC4Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC4PSC;
 80017c6:	8b83      	ldrh	r3, [r0, #28]
 80017c8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80017cc:	041b      	lsls	r3, r3, #16
 80017ce:	0c1b      	lsrs	r3, r3, #16
 80017d0:	8383      	strh	r3, [r0, #28]

  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 80017d2:	8b83      	ldrh	r3, [r0, #28]
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80017da:	b29b      	uxth	r3, r3
 80017dc:	8383      	strh	r3, [r0, #28]
}
 80017de:	4770      	bx	lr

080017e0 <TIM_ICInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 80017e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017e2:	460d      	mov	r5, r1
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 80017e4:	880b      	ldrh	r3, [r1, #0]
 80017e6:	88aa      	ldrh	r2, [r5, #4]
 80017e8:	8849      	ldrh	r1, [r1, #2]
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 80017ea:	4604      	mov	r4, r0
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 80017ec:	b93b      	cbnz	r3, 80017fe <TIM_ICInit+0x1e>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 80017ee:	892b      	ldrh	r3, [r5, #8]
 80017f0:	f7ff fbec 	bl	8000fcc <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80017f4:	88e9      	ldrh	r1, [r5, #6]
 80017f6:	4620      	mov	r0, r4
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 80017f8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80017fc:	e78b      	b.n	8001716 <TIM_SetIC1Prescaler>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 80017fe:	2b04      	cmp	r3, #4
 8001800:	d107      	bne.n	8001812 <TIM_ICInit+0x32>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_LIST2_PERIPH(TIMx));
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8001802:	892b      	ldrh	r3, [r5, #8]
 8001804:	f7ff fbfb 	bl	8000ffe <TI2_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8001808:	88e9      	ldrh	r1, [r5, #6]
 800180a:	4620      	mov	r0, r4
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 800180c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    assert_param(IS_TIM_LIST2_PERIPH(TIMx));
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8001810:	e78c      	b.n	800172c <TIM_SetIC2Prescaler>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 8001812:	2b08      	cmp	r3, #8
 8001814:	f8b5 c008 	ldrh.w	ip, [r5, #8]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8001818:	8c07      	ldrh	r7, [r0, #32]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 800181a:	d11d      	bne.n	8001858 <TIM_ICInit+0x78>
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 800181c:	f427 7780 	bic.w	r7, r7, #256	; 0x100
 8001820:	043f      	lsls	r7, r7, #16
 8001822:	0c3f      	lsrs	r7, r7, #16
 8001824:	8407      	strh	r7, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8001826:	8b86      	ldrh	r6, [r0, #28]
  tmpccer = TIMx->CCER;
 8001828:	8c03      	ldrh	r3, [r0, #32]
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
  tmpccmr2 = TIMx->CCMR2;
 800182a:	b2b6      	uxth	r6, r6
  tmpccer = TIMx->CCER;
 800182c:	b29b      	uxth	r3, r3
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
 800182e:	f026 06f3 	bic.w	r6, r6, #243	; 0xf3
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8001832:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8001836:	ea46 1c0c 	orr.w	ip, r6, ip, lsl #4

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 800183a:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 800183e:	fa1f fc8c 	uxth.w	ip, ip

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 8001842:	b289      	uxth	r1, r1
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8001844:	ea4c 0202 	orr.w	r2, ip, r2

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 8001848:	f441 7180 	orr.w	r1, r1, #256	; 0x100

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800184c:	8382      	strh	r2, [r0, #28]
  TIMx->CCER = tmpccer;
 800184e:	8401      	strh	r1, [r0, #32]
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8001850:	88e9      	ldrh	r1, [r5, #6]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8001852:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8001856:	e7ab      	b.n	80017b0 <TIM_SetIC3Prescaler>
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8001858:	f427 5780 	bic.w	r7, r7, #4096	; 0x1000
 800185c:	043f      	lsls	r7, r7, #16
 800185e:	0c3f      	lsrs	r7, r7, #16
 8001860:	8407      	strh	r7, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8001862:	8b86      	ldrh	r6, [r0, #28]
  tmpccer = TIMx->CCER;
 8001864:	8c03      	ldrh	r3, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8001866:	f426 7640 	bic.w	r6, r6, #768	; 0x300
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800186a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 800186e:	0536      	lsls	r6, r6, #20
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8001870:	045b      	lsls	r3, r3, #17
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8001872:	0d36      	lsrs	r6, r6, #20
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8001874:	0c5b      	lsrs	r3, r3, #17
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 8001876:	ea46 2202 	orr.w	r2, r6, r2, lsl #8
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 800187a:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 800187e:	ea42 320c 	orr.w	r2, r2, ip, lsl #12

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 8001882:	b29b      	uxth	r3, r3
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8001884:	88e9      	ldrh	r1, [r5, #6]
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 8001886:	b292      	uxth	r2, r2

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 8001888:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800188c:	8382      	strh	r2, [r0, #28]
  TIMx->CCER = tmpccer ;
 800188e:	8403      	strh	r3, [r0, #32]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8001890:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8001894:	e797      	b.n	80017c6 <TIM_SetIC4Prescaler>

08001896 <TIM_BDTRConfig>:
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8001896:	884a      	ldrh	r2, [r1, #2]
 8001898:	880b      	ldrh	r3, [r1, #0]
 800189a:	4313      	orrs	r3, r2
 800189c:	888a      	ldrh	r2, [r1, #4]
 800189e:	4313      	orrs	r3, r2
 80018a0:	88ca      	ldrh	r2, [r1, #6]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	890a      	ldrh	r2, [r1, #8]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	894a      	ldrh	r2, [r1, #10]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	898a      	ldrh	r2, [r1, #12]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
}
 80018b6:	4770      	bx	lr

080018b8 <TIM_BDTRStructInit>:
  * @retval None
  */
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
 80018b8:	2300      	movs	r3, #0
 80018ba:	8003      	strh	r3, [r0, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
 80018bc:	8043      	strh	r3, [r0, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 80018be:	8083      	strh	r3, [r0, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
 80018c0:	80c3      	strh	r3, [r0, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
 80018c2:	8103      	strh	r3, [r0, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
 80018c4:	8143      	strh	r3, [r0, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 80018c6:	8183      	strh	r3, [r0, #12]
}
 80018c8:	4770      	bx	lr

080018ca <TIM_CtrlPWMOutputs>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 80018ca:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80018ce:	b129      	cbz	r1, 80018dc <TIM_CtrlPWMOutputs+0x12>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 80018d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80018d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80018d8:	b29b      	uxth	r3, r3
 80018da:	e001      	b.n	80018e0 <TIM_CtrlPWMOutputs+0x16>
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
 80018dc:	045b      	lsls	r3, r3, #17
 80018de:	0c5b      	lsrs	r3, r3, #17
 80018e0:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 80018e4:	4770      	bx	lr

080018e6 <TIM_SelectCOM>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 80018e6:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80018e8:	b119      	cbz	r1, 80018f2 <TIM_SelectCOM+0xc>
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	f043 0304 	orr.w	r3, r3, #4
 80018f0:	e003      	b.n	80018fa <TIM_SelectCOM+0x14>
  }
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCUS;
 80018f2:	f023 0304 	bic.w	r3, r3, #4
 80018f6:	041b      	lsls	r3, r3, #16
 80018f8:	0c1b      	lsrs	r3, r3, #16
 80018fa:	8083      	strh	r3, [r0, #4]
 80018fc:	4770      	bx	lr

080018fe <TIM_CCPreloadControl>:
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 80018fe:	8883      	ldrh	r3, [r0, #4]
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001900:	b119      	cbz	r1, 800190a <TIM_CCPreloadControl+0xc>
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 8001902:	b29b      	uxth	r3, r3
 8001904:	f043 0301 	orr.w	r3, r3, #1
 8001908:	e003      	b.n	8001912 <TIM_CCPreloadControl+0x14>
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCPC;
 800190a:	f023 0301 	bic.w	r3, r3, #1
 800190e:	041b      	lsls	r3, r3, #16
 8001910:	0c1b      	lsrs	r3, r3, #16
 8001912:	8083      	strh	r3, [r0, #4]
 8001914:	4770      	bx	lr

08001916 <TIM_ITConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8001916:	8983      	ldrh	r3, [r0, #12]
 8001918:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800191a:	b10a      	cbz	r2, 8001920 <TIM_ITConfig+0xa>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 800191c:	4319      	orrs	r1, r3
 800191e:	e001      	b.n	8001924 <TIM_ITConfig+0xe>
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8001920:	ea23 0101 	bic.w	r1, r3, r1
 8001924:	8181      	strh	r1, [r0, #12]
 8001926:	4770      	bx	lr

08001928 <TIM_GenerateEvent>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
 
  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
 8001928:	8281      	strh	r1, [r0, #20]
}
 800192a:	4770      	bx	lr

0800192c <TIM_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));

  
  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
 800192c:	8a03      	ldrh	r3, [r0, #16]
  {
    bitstatus = SET;
 800192e:	4219      	tst	r1, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8001930:	bf0c      	ite	eq
 8001932:	2000      	moveq	r0, #0
 8001934:	2001      	movne	r0, #1
 8001936:	4770      	bx	lr

08001938 <TIM_ClearFlag>:
{  
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
 8001938:	43c9      	mvns	r1, r1
 800193a:	b289      	uxth	r1, r1
 800193c:	8201      	strh	r1, [r0, #16]
}
 800193e:	4770      	bx	lr

08001940 <TIM_GetITStatus>:
  uint16_t itstatus = 0x0, itenable = 0x0;
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8001940:	8a03      	ldrh	r3, [r0, #16]
  
  itenable = TIMx->DIER & TIM_IT;
 8001942:	8982      	ldrh	r2, [r0, #12]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8001944:	ea11 0003 	ands.w	r0, r1, r3
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
  
  itenable = TIMx->DIER & TIM_IT;
 8001948:	b292      	uxth	r2, r2
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 800194a:	d003      	beq.n	8001954 <TIM_GetITStatus+0x14>
  {
    bitstatus = SET;
 800194c:	4211      	tst	r1, r2
 800194e:	bf0c      	ite	eq
 8001950:	2000      	moveq	r0, #0
 8001952:	2001      	movne	r0, #1
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8001954:	4770      	bx	lr

08001956 <TIM_ClearITPendingBit>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8001956:	43c9      	mvns	r1, r1
 8001958:	b289      	uxth	r1, r1
 800195a:	8201      	strh	r1, [r0, #16]
}
 800195c:	4770      	bx	lr

0800195e <TIM_DMAConfig>:
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase)); 
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));

  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
 800195e:	430a      	orrs	r2, r1
 8001960:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
}
 8001964:	4770      	bx	lr

08001966 <TIM_DMACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 8001966:	8983      	ldrh	r3, [r0, #12]
 8001968:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx)); 
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800196a:	b10a      	cbz	r2, 8001970 <TIM_DMACmd+0xa>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 800196c:	4319      	orrs	r1, r3
 800196e:	e001      	b.n	8001974 <TIM_DMACmd+0xe>
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 8001970:	ea23 0101 	bic.w	r1, r3, r1
 8001974:	8181      	strh	r1, [r0, #12]
 8001976:	4770      	bx	lr

08001978 <TIM_SelectCCDMA>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 8001978:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800197a:	b119      	cbz	r1, 8001984 <TIM_SelectCCDMA+0xc>
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 800197c:	b29b      	uxth	r3, r3
 800197e:	f043 0308 	orr.w	r3, r3, #8
 8001982:	e003      	b.n	800198c <TIM_SelectCCDMA+0x14>
  }
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCDS;
 8001984:	f023 0308 	bic.w	r3, r3, #8
 8001988:	041b      	lsls	r3, r3, #16
 800198a:	0c1b      	lsrs	r3, r3, #16
 800198c:	8083      	strh	r3, [r0, #4]
 800198e:	4770      	bx	lr

08001990 <TIM_InternalClockConfig>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  (uint16_t)~TIM_SMCR_SMS;
 8001990:	8903      	ldrh	r3, [r0, #8]
 8001992:	f023 0307 	bic.w	r3, r3, #7
 8001996:	041b      	lsls	r3, r3, #16
 8001998:	0c1b      	lsrs	r3, r3, #16
 800199a:	8103      	strh	r3, [r0, #8]
}
 800199c:	4770      	bx	lr

0800199e <TIM_ITRxExternalClockConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800199e:	8903      	ldrh	r3, [r0, #8]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 80019a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019a4:	041b      	lsls	r3, r3, #16
 80019a6:	0c1b      	lsrs	r3, r3, #16

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 80019a8:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80019aa:	8103      	strh	r3, [r0, #8]

  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);

  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 80019ac:	8903      	ldrh	r3, [r0, #8]
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	f043 0307 	orr.w	r3, r3, #7
 80019b4:	8103      	strh	r3, [r0, #8]
}
 80019b6:	4770      	bx	lr

080019b8 <TIM_TIxExternalClockConfig>:
  *          This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
 80019b8:	b538      	push	{r3, r4, r5, lr}
 80019ba:	460d      	mov	r5, r1
 80019bc:	4611      	mov	r1, r2
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 80019be:	2201      	movs	r2, #1
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 80019c0:	2d60      	cmp	r5, #96	; 0x60
  *          This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
 80019c2:	4604      	mov	r4, r0
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 80019c4:	d102      	bne.n	80019cc <TIM_TIxExternalClockConfig+0x14>
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 80019c6:	f7ff fb1a 	bl	8000ffe <TI2_Config>
 80019ca:	e001      	b.n	80019d0 <TIM_TIxExternalClockConfig+0x18>
  }
  else
  {
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 80019cc:	f7ff fafe 	bl	8000fcc <TI1_Config>
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80019d0:	8923      	ldrh	r3, [r4, #8]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 80019d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019d6:	041b      	lsls	r3, r3, #16
 80019d8:	0c1b      	lsrs	r3, r3, #16

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 80019da:	431d      	orrs	r5, r3

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80019dc:	8125      	strh	r5, [r4, #8]
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
  }
  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 80019de:	8923      	ldrh	r3, [r4, #8]
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	f043 0307 	orr.w	r3, r3, #7
 80019e6:	8123      	strh	r3, [r4, #8]
}
 80019e8:	bd38      	pop	{r3, r4, r5, pc}

080019ea <TIM_SelectInputTrigger>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80019ea:	8903      	ldrh	r3, [r0, #8]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 80019ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019f0:	041b      	lsls	r3, r3, #16
 80019f2:	0c1b      	lsrs	r3, r3, #16

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 80019f4:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80019f6:	8103      	strh	r3, [r0, #8]
}
 80019f8:	4770      	bx	lr

080019fa <TIM_SelectOutputTrigger>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
 80019fa:	8883      	ldrh	r3, [r0, #4]
 80019fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a00:	041b      	lsls	r3, r3, #16
 8001a02:	0c1b      	lsrs	r3, r3, #16
 8001a04:	8083      	strh	r3, [r0, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 8001a06:	8883      	ldrh	r3, [r0, #4]
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	430b      	orrs	r3, r1
 8001a0c:	8083      	strh	r3, [r0, #4]
}
 8001a0e:	4770      	bx	lr

08001a10 <TIM_SelectSlaveMode>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));

  /* Reset the SMS Bits */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_SMS;
 8001a10:	8903      	ldrh	r3, [r0, #8]
 8001a12:	f023 0307 	bic.w	r3, r3, #7
 8001a16:	041b      	lsls	r3, r3, #16
 8001a18:	0c1b      	lsrs	r3, r3, #16
 8001a1a:	8103      	strh	r3, [r0, #8]

  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
 8001a1c:	8903      	ldrh	r3, [r0, #8]
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	430b      	orrs	r3, r1
 8001a22:	8103      	strh	r3, [r0, #8]
}
 8001a24:	4770      	bx	lr

08001a26 <TIM_SelectMasterSlaveMode>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));

  /* Reset the MSM Bit */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_MSM;
 8001a26:	8903      	ldrh	r3, [r0, #8]
 8001a28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a2c:	041b      	lsls	r3, r3, #16
 8001a2e:	0c1b      	lsrs	r3, r3, #16
 8001a30:	8103      	strh	r3, [r0, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
 8001a32:	8903      	ldrh	r3, [r0, #8]
 8001a34:	b29b      	uxth	r3, r3
 8001a36:	430b      	orrs	r3, r1
 8001a38:	8103      	strh	r3, [r0, #8]
}
 8001a3a:	4770      	bx	lr

08001a3c <TIM_ETRConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                   uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 8001a3c:	b510      	push	{r4, lr}
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
 8001a3e:	8904      	ldrh	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
 8001a40:	b2e4      	uxtb	r4, r4

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 8001a42:	430c      	orrs	r4, r1
 8001a44:	4314      	orrs	r4, r2
 8001a46:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 8001a4a:	b2a4      	uxth	r4, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001a4c:	8104      	strh	r4, [r0, #8]
}
 8001a4e:	bd10      	pop	{r4, pc}

08001a50 <TIM_ETRClockMode2Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 8001a50:	b510      	push	{r4, lr}
 8001a52:	4604      	mov	r4, r0
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 8001a54:	f7ff fff2 	bl	8001a3c <TIM_ETRConfig>

  /* Enable the External clock mode2 */
  TIMx->SMCR |= TIM_SMCR_ECE;
 8001a58:	8923      	ldrh	r3, [r4, #8]
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a60:	8123      	strh	r3, [r4, #8]
}
 8001a62:	bd10      	pop	{r4, pc}

08001a64 <TIM_ETRClockMode1Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                            uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 8001a64:	b510      	push	{r4, lr}
 8001a66:	4604      	mov	r4, r0
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 8001a68:	f7ff ffe8 	bl	8001a3c <TIM_ETRConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001a6c:	8923      	ldrh	r3, [r4, #8]

  /* Reset the SMS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;

  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;
 8001a6e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001a72:	041b      	lsls	r3, r3, #16
 8001a74:	0c1b      	lsrs	r3, r3, #16

  /* Select the Trigger selection : ETRF */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
  tmpsmcr |= TIM_TS_ETRF;
 8001a76:	f043 0377 	orr.w	r3, r3, #119	; 0x77

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001a7a:	8123      	strh	r3, [r4, #8]
}
 8001a7c:	bd10      	pop	{r4, pc}

08001a7e <TIM_EncoderInterfaceConfig>:
  *            @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
 8001a7e:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001a80:	8904      	ldrh	r4, [r0, #8]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8001a82:	8b06      	ldrh	r6, [r0, #24]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001a84:	8c05      	ldrh	r5, [r0, #32]
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 8001a86:	f426 7640 	bic.w	r6, r6, #768	; 0x300

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001a8a:	b2ad      	uxth	r5, r5
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 8001a8c:	f026 0603 	bic.w	r6, r6, #3

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 8001a90:	f024 0407 	bic.w	r4, r4, #7
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 8001a94:	0436      	lsls	r6, r6, #16
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
 8001a96:	f025 0522 	bic.w	r5, r5, #34	; 0x22

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 8001a9a:	0424      	lsls	r4, r4, #16
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 8001a9c:	0c36      	lsrs	r6, r6, #16
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 8001a9e:	4315      	orrs	r5, r2

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 8001aa0:	0c24      	lsrs	r4, r4, #16
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 8001aa2:	f446 7680 	orr.w	r6, r6, #256	; 0x100

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 8001aa6:	ea45 1503 	orr.w	r5, r5, r3, lsl #4
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
  tmpsmcr |= TIM_EncoderMode;
 8001aaa:	4321      	orrs	r1, r4

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 8001aac:	f046 0601 	orr.w	r6, r6, #1

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 8001ab0:	b2ad      	uxth	r5, r5

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001ab2:	8101      	strh	r1, [r0, #8]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8001ab4:	8306      	strh	r6, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001ab6:	8405      	strh	r5, [r0, #32]
}
 8001ab8:	bd70      	pop	{r4, r5, r6, pc}

08001aba <TIM_SelectHallSensor>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 8001aba:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001abc:	b119      	cbz	r1, 8001ac6 <TIM_SelectHallSensor+0xc>
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ac4:	e003      	b.n	8001ace <TIM_SelectHallSensor+0x14>
  }
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_TI1S;
 8001ac6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001aca:	041b      	lsls	r3, r3, #16
 8001acc:	0c1b      	lsrs	r3, r3, #16
 8001ace:	8083      	strh	r3, [r0, #4]
 8001ad0:	4770      	bx	lr

08001ad2 <TIM_RemapConfig>:
 /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_REMAP(TIM_Remap));

  /* Set the Timer remapping configuration */
  TIMx->OR =  TIM_Remap;
 8001ad2:	f8a0 1050 	strh.w	r1, [r0, #80]	; 0x50
}
 8001ad6:	4770      	bx	lr

08001ad8 <USART_DeInit>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 8001ad8:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 8001ada:	4b23      	ldr	r3, [pc, #140]	; (8001b68 <USART_DeInit+0x90>)
 8001adc:	4298      	cmp	r0, r3
 8001ade:	d105      	bne.n	8001aec <USART_DeInit+0x14>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 8001ae0:	2010      	movs	r0, #16
 8001ae2:	2101      	movs	r1, #1
 8001ae4:	f7ff f832 	bl	8000b4c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 8001ae8:	2010      	movs	r0, #16
 8001aea:	e037      	b.n	8001b5c <USART_DeInit+0x84>
  }
  else if (USARTx == USART2)
 8001aec:	4b1f      	ldr	r3, [pc, #124]	; (8001b6c <USART_DeInit+0x94>)
 8001aee:	4298      	cmp	r0, r3
 8001af0:	d107      	bne.n	8001b02 <USART_DeInit+0x2a>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 8001af2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001af6:	2101      	movs	r1, #1
 8001af8:	f7ff f81c 	bl	8000b34 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 8001afc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001b00:	e009      	b.n	8001b16 <USART_DeInit+0x3e>
  }
  else if (USARTx == USART3)
 8001b02:	4b1b      	ldr	r3, [pc, #108]	; (8001b70 <USART_DeInit+0x98>)
 8001b04:	4298      	cmp	r0, r3
 8001b06:	d10b      	bne.n	8001b20 <USART_DeInit+0x48>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 8001b08:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001b0c:	2101      	movs	r1, #1
 8001b0e:	f7ff f811 	bl	8000b34 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 8001b12:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001b16:	2100      	movs	r1, #0
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
    }
  }
}
 8001b18:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
  }
  else if (USARTx == USART3)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 8001b1c:	f7ff b80a 	b.w	8000b34 <RCC_APB1PeriphResetCmd>
  }    
  else if (USARTx == UART4)
 8001b20:	4b14      	ldr	r3, [pc, #80]	; (8001b74 <USART_DeInit+0x9c>)
 8001b22:	4298      	cmp	r0, r3
 8001b24:	d107      	bne.n	8001b36 <USART_DeInit+0x5e>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 8001b26:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001b2a:	2101      	movs	r1, #1
 8001b2c:	f7ff f802 	bl	8000b34 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 8001b30:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001b34:	e7ef      	b.n	8001b16 <USART_DeInit+0x3e>
  }
  else if (USARTx == UART5)
 8001b36:	4b10      	ldr	r3, [pc, #64]	; (8001b78 <USART_DeInit+0xa0>)
 8001b38:	4298      	cmp	r0, r3
 8001b3a:	d107      	bne.n	8001b4c <USART_DeInit+0x74>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 8001b3c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001b40:	2101      	movs	r1, #1
 8001b42:	f7fe fff7 	bl	8000b34 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 8001b46:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001b4a:	e7e4      	b.n	8001b16 <USART_DeInit+0x3e>
  }     
  else
  {
    if (USARTx == USART6)
 8001b4c:	4b0b      	ldr	r3, [pc, #44]	; (8001b7c <USART_DeInit+0xa4>)
 8001b4e:	4298      	cmp	r0, r3
 8001b50:	d109      	bne.n	8001b66 <USART_DeInit+0x8e>
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
 8001b52:	2020      	movs	r0, #32
 8001b54:	2101      	movs	r1, #1
 8001b56:	f7fe fff9 	bl	8000b4c <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 8001b5a:	2020      	movs	r0, #32
 8001b5c:	2100      	movs	r1, #0
    }
  }
}
 8001b5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (USARTx == USART6)
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 8001b62:	f7fe bff3 	b.w	8000b4c <RCC_APB2PeriphResetCmd>
 8001b66:	bd08      	pop	{r3, pc}
 8001b68:	40011000 	.word	0x40011000
 8001b6c:	40004400 	.word	0x40004400
 8001b70:	40004800 	.word	0x40004800
 8001b74:	40004c00 	.word	0x40004c00
 8001b78:	40005000 	.word	0x40005000
 8001b7c:	40011400 	.word	0x40011400

08001b80 <USART_Init>:
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8001b80:	8a03      	ldrh	r3, [r0, #16]
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8001b82:	88ca      	ldrh	r2, [r1, #6]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8001b84:	b29b      	uxth	r3, r3

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8001b86:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8001b8a:	b530      	push	{r4, r5, lr}
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8001b8c:	4313      	orrs	r3, r2
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8001b8e:	460d      	mov	r5, r1
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8001b90:	8203      	strh	r3, [r0, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8001b92:	8983      	ldrh	r3, [r0, #12]

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8001b94:	8909      	ldrh	r1, [r1, #8]
 8001b96:	88aa      	ldrh	r2, [r5, #4]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8001b98:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8001b9c:	430a      	orrs	r2, r1
 8001b9e:	8969      	ldrh	r1, [r5, #10]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8001ba0:	f023 030c 	bic.w	r3, r3, #12
 8001ba4:	041b      	lsls	r3, r3, #16

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8001ba6:	430a      	orrs	r2, r1

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8001ba8:	0c1b      	lsrs	r3, r3, #16

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8001baa:	b292      	uxth	r2, r2
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8001bac:	4313      	orrs	r3, r2
 8001bae:	8183      	strh	r3, [r0, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8001bb0:	8a83      	ldrh	r3, [r0, #20]
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8001bb2:	89aa      	ldrh	r2, [r5, #12]

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8001bb4:	b29b      	uxth	r3, r3

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8001bb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8001bba:	4313      	orrs	r3, r2
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8001bbc:	b085      	sub	sp, #20
  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8001bbe:	8283      	strh	r3, [r0, #20]
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8001bc0:	4604      	mov	r4, r0
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8001bc2:	4668      	mov	r0, sp
 8001bc4:	f7fe fee6 	bl	8000994 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8001bc8:	4b1a      	ldr	r3, [pc, #104]	; (8001c34 <USART_Init+0xb4>)
 8001bca:	429c      	cmp	r4, r3
 8001bcc:	d003      	beq.n	8001bd6 <USART_Init+0x56>
 8001bce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001bd2:	429c      	cmp	r4, r3
 8001bd4:	d101      	bne.n	8001bda <USART_Init+0x5a>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8001bd6:	9b03      	ldr	r3, [sp, #12]
 8001bd8:	e000      	b.n	8001bdc <USART_Init+0x5c>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8001bda:	9b02      	ldr	r3, [sp, #8]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8001bdc:	89a2      	ldrh	r2, [r4, #12]
 8001bde:	b212      	sxth	r2, r2
 8001be0:	2a00      	cmp	r2, #0
 8001be2:	f04f 0119 	mov.w	r1, #25
 8001be6:	682a      	ldr	r2, [r5, #0]
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8001be8:	fb01 f103 	mul.w	r1, r1, r3
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8001bec:	da01      	bge.n	8001bf2 <USART_Init+0x72>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8001bee:	0052      	lsls	r2, r2, #1
 8001bf0:	e000      	b.n	8001bf4 <USART_Init+0x74>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8001bf2:	0092      	lsls	r2, r2, #2
  }
  tmpreg = (integerdivider / 100) << 4;
 8001bf4:	2364      	movs	r3, #100	; 0x64
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8001bf6:	fbb1 f1f2 	udiv	r1, r1, r2
  }
  tmpreg = (integerdivider / 100) << 4;
 8001bfa:	fbb1 f2f3 	udiv	r2, r1, r3
 8001bfe:	0112      	lsls	r2, r2, #4

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8001c00:	0910      	lsrs	r0, r2, #4
 8001c02:	fb03 1110 	mls	r1, r3, r0, r1

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8001c06:	89a0      	ldrh	r0, [r4, #12]
 8001c08:	b200      	sxth	r0, r0
 8001c0a:	2800      	cmp	r0, #0
 8001c0c:	da06      	bge.n	8001c1c <USART_Init+0x9c>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8001c0e:	00c9      	lsls	r1, r1, #3
 8001c10:	3132      	adds	r1, #50	; 0x32
 8001c12:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c16:	f003 0307 	and.w	r3, r3, #7
 8001c1a:	e005      	b.n	8001c28 <USART_Init+0xa8>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8001c1c:	0109      	lsls	r1, r1, #4
 8001c1e:	3132      	adds	r1, #50	; 0x32
 8001c20:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c24:	f003 030f 	and.w	r3, r3, #15
 8001c28:	431a      	orrs	r2, r3
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8001c2a:	b292      	uxth	r2, r2
 8001c2c:	8122      	strh	r2, [r4, #8]
}
 8001c2e:	b005      	add	sp, #20
 8001c30:	bd30      	pop	{r4, r5, pc}
 8001c32:	bf00      	nop
 8001c34:	40011000 	.word	0x40011000

08001c38 <USART_StructInit>:
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 8001c38:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001c3c:	6003      	str	r3, [r0, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
  USART_InitStruct->USART_Parity = USART_Parity_No ;
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8001c3e:	220c      	movs	r2, #12
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 8001c40:	2300      	movs	r3, #0
 8001c42:	8083      	strh	r3, [r0, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 8001c44:	80c3      	strh	r3, [r0, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 8001c46:	8103      	strh	r3, [r0, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8001c48:	8142      	strh	r2, [r0, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 8001c4a:	8183      	strh	r3, [r0, #12]
}
 8001c4c:	4770      	bx	lr

08001c4e <USART_ClockInit>:
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8001c4e:	880b      	ldrh	r3, [r1, #0]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8001c50:	8a02      	ldrh	r2, [r0, #16]
  *         contains the configuration information for the specified  USART peripheral.
  * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 8001c52:	b510      	push	{r4, lr}
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8001c54:	884c      	ldrh	r4, [r1, #2]
 8001c56:	4323      	orrs	r3, r4
 8001c58:	888c      	ldrh	r4, [r1, #4]
 8001c5a:	88c9      	ldrh	r1, [r1, #6]
 8001c5c:	4323      	orrs	r3, r4
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8001c5e:	b292      	uxth	r2, r2
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8001c60:	430b      	orrs	r3, r1
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 8001c62:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8001c66:	b29b      	uxth	r3, r3
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	8203      	strh	r3, [r0, #16]
}
 8001c6c:	bd10      	pop	{r4, pc}

08001c6e <USART_ClockStructInit>:
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	8003      	strh	r3, [r0, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 8001c72:	8043      	strh	r3, [r0, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 8001c74:	8083      	strh	r3, [r0, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 8001c76:	80c3      	strh	r3, [r0, #6]
}
 8001c78:	4770      	bx	lr

08001c7a <USART_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8001c7a:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001c7c:	b119      	cbz	r1, 8001c86 <USART_Cmd+0xc>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c84:	e003      	b.n	8001c8e <USART_Cmd+0x14>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8001c86:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001c8a:	041b      	lsls	r3, r3, #16
 8001c8c:	0c1b      	lsrs	r3, r3, #16
 8001c8e:	8183      	strh	r3, [r0, #12]
 8001c90:	4770      	bx	lr

08001c92 <USART_SetPrescaler>:
{ 
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= USART_GTPR_GT;
 8001c92:	8b03      	ldrh	r3, [r0, #24]
 8001c94:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001c98:	8303      	strh	r3, [r0, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 8001c9a:	8b03      	ldrh	r3, [r0, #24]
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	430b      	orrs	r3, r1
 8001ca0:	8303      	strh	r3, [r0, #24]
}
 8001ca2:	4770      	bx	lr

08001ca4 <USART_OverSampling8Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 8001ca4:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001ca6:	b129      	cbz	r1, 8001cb4 <USART_OverSampling8Cmd+0x10>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 8001ca8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001cac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	e001      	b.n	8001cb8 <USART_OverSampling8Cmd+0x14>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
 8001cb4:	045b      	lsls	r3, r3, #17
 8001cb6:	0c5b      	lsrs	r3, r3, #17
 8001cb8:	8183      	strh	r3, [r0, #12]
 8001cba:	4770      	bx	lr

08001cbc <USART_OneBitMethodCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 8001cbc:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001cbe:	b119      	cbz	r1, 8001cc8 <USART_OneBitMethodCmd+0xc>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001cc6:	e003      	b.n	8001cd0 <USART_OneBitMethodCmd+0x14>
  }
  else
  {
    /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
 8001cc8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001ccc:	041b      	lsls	r3, r3, #16
 8001cce:	0c1b      	lsrs	r3, r3, #16
 8001cd0:	8283      	strh	r3, [r0, #20]
 8001cd2:	4770      	bx	lr

08001cd4 <USART_SendData>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8001cd4:	05c9      	lsls	r1, r1, #23
 8001cd6:	0dc9      	lsrs	r1, r1, #23
 8001cd8:	8081      	strh	r1, [r0, #4]
}
 8001cda:	4770      	bx	lr

08001cdc <USART_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8001cdc:	8880      	ldrh	r0, [r0, #4]
 8001cde:	05c0      	lsls	r0, r0, #23
}
 8001ce0:	0dc0      	lsrs	r0, r0, #23
 8001ce2:	4770      	bx	lr

08001ce4 <USART_SetAddress>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
 8001ce4:	8a03      	ldrh	r3, [r0, #16]
 8001ce6:	f023 030f 	bic.w	r3, r3, #15
 8001cea:	041b      	lsls	r3, r3, #16
 8001cec:	0c1b      	lsrs	r3, r3, #16
 8001cee:	8203      	strh	r3, [r0, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
 8001cf0:	8a03      	ldrh	r3, [r0, #16]
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	430b      	orrs	r3, r1
 8001cf6:	8203      	strh	r3, [r0, #16]
}
 8001cf8:	4770      	bx	lr

08001cfa <USART_ReceiverWakeUpCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 8001cfa:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
 8001cfc:	b119      	cbz	r1, 8001d06 <USART_ReceiverWakeUpCmd+0xc>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	f043 0302 	orr.w	r3, r3, #2
 8001d04:	e003      	b.n	8001d0e <USART_ReceiverWakeUpCmd+0x14>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
 8001d06:	f023 0302 	bic.w	r3, r3, #2
 8001d0a:	041b      	lsls	r3, r3, #16
 8001d0c:	0c1b      	lsrs	r3, r3, #16
 8001d0e:	8183      	strh	r3, [r0, #12]
 8001d10:	4770      	bx	lr

08001d12 <USART_WakeUpConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
 8001d12:	8983      	ldrh	r3, [r0, #12]
 8001d14:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001d18:	041b      	lsls	r3, r3, #16
 8001d1a:	0c1b      	lsrs	r3, r3, #16
 8001d1c:	8183      	strh	r3, [r0, #12]
  USARTx->CR1 |= USART_WakeUp;
 8001d1e:	8983      	ldrh	r3, [r0, #12]
 8001d20:	b29b      	uxth	r3, r3
 8001d22:	430b      	orrs	r3, r1
 8001d24:	8183      	strh	r3, [r0, #12]
}
 8001d26:	4770      	bx	lr

08001d28 <USART_LINBreakDetectLengthConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
 8001d28:	8a03      	ldrh	r3, [r0, #16]
 8001d2a:	f023 0320 	bic.w	r3, r3, #32
 8001d2e:	041b      	lsls	r3, r3, #16
 8001d30:	0c1b      	lsrs	r3, r3, #16
 8001d32:	8203      	strh	r3, [r0, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 8001d34:	8a03      	ldrh	r3, [r0, #16]
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	430b      	orrs	r3, r1
 8001d3a:	8203      	strh	r3, [r0, #16]
}
 8001d3c:	4770      	bx	lr

08001d3e <USART_LINCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 8001d3e:	8a03      	ldrh	r3, [r0, #16]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001d40:	b119      	cbz	r1, 8001d4a <USART_LINCmd+0xc>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d48:	e003      	b.n	8001d52 <USART_LINCmd+0x14>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
 8001d4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d4e:	041b      	lsls	r3, r3, #16
 8001d50:	0c1b      	lsrs	r3, r3, #16
 8001d52:	8203      	strh	r3, [r0, #16]
 8001d54:	4770      	bx	lr

08001d56 <USART_SendBreak>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= USART_CR1_SBK;
 8001d56:	8983      	ldrh	r3, [r0, #12]
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	f043 0301 	orr.w	r3, r3, #1
 8001d5e:	8183      	strh	r3, [r0, #12]
}
 8001d60:	4770      	bx	lr

08001d62 <USART_HalfDuplexCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 8001d62:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001d64:	b119      	cbz	r1, 8001d6e <USART_HalfDuplexCmd+0xc>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	f043 0308 	orr.w	r3, r3, #8
 8001d6c:	e003      	b.n	8001d76 <USART_HalfDuplexCmd+0x14>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
 8001d6e:	f023 0308 	bic.w	r3, r3, #8
 8001d72:	041b      	lsls	r3, r3, #16
 8001d74:	0c1b      	lsrs	r3, r3, #16
 8001d76:	8283      	strh	r3, [r0, #20]
 8001d78:	4770      	bx	lr

08001d7a <USART_SetGuardTime>:
{    
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= USART_GTPR_PSC;
 8001d7a:	8b03      	ldrh	r3, [r0, #24]
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	8303      	strh	r3, [r0, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 8001d80:	8b03      	ldrh	r3, [r0, #24]
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001d88:	8303      	strh	r3, [r0, #24]
}
 8001d8a:	4770      	bx	lr

08001d8c <USART_SmartCardCmd>:
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 8001d8c:	8a83      	ldrh	r3, [r0, #20]
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001d8e:	b119      	cbz	r1, 8001d98 <USART_SmartCardCmd+0xc>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	f043 0320 	orr.w	r3, r3, #32
 8001d96:	e003      	b.n	8001da0 <USART_SmartCardCmd+0x14>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
 8001d98:	f023 0320 	bic.w	r3, r3, #32
 8001d9c:	041b      	lsls	r3, r3, #16
 8001d9e:	0c1b      	lsrs	r3, r3, #16
 8001da0:	8283      	strh	r3, [r0, #20]
 8001da2:	4770      	bx	lr

08001da4 <USART_SmartCardNACKCmd>:
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 8001da4:	8a83      	ldrh	r3, [r0, #20]
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001da6:	b119      	cbz	r1, 8001db0 <USART_SmartCardNACKCmd+0xc>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	f043 0310 	orr.w	r3, r3, #16
 8001dae:	e003      	b.n	8001db8 <USART_SmartCardNACKCmd+0x14>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
 8001db0:	f023 0310 	bic.w	r3, r3, #16
 8001db4:	041b      	lsls	r3, r3, #16
 8001db6:	0c1b      	lsrs	r3, r3, #16
 8001db8:	8283      	strh	r3, [r0, #20]
 8001dba:	4770      	bx	lr

08001dbc <USART_IrDAConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
 8001dbc:	8a83      	ldrh	r3, [r0, #20]
 8001dbe:	f023 0304 	bic.w	r3, r3, #4
 8001dc2:	041b      	lsls	r3, r3, #16
 8001dc4:	0c1b      	lsrs	r3, r3, #16
 8001dc6:	8283      	strh	r3, [r0, #20]
  USARTx->CR3 |= USART_IrDAMode;
 8001dc8:	8a83      	ldrh	r3, [r0, #20]
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	430b      	orrs	r3, r1
 8001dce:	8283      	strh	r3, [r0, #20]
}
 8001dd0:	4770      	bx	lr

08001dd2 <USART_IrDACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 8001dd2:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 8001dd4:	b119      	cbz	r1, 8001dde <USART_IrDACmd+0xc>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	f043 0302 	orr.w	r3, r3, #2
 8001ddc:	e003      	b.n	8001de6 <USART_IrDACmd+0x14>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
 8001dde:	f023 0302 	bic.w	r3, r3, #2
 8001de2:	041b      	lsls	r3, r3, #16
 8001de4:	0c1b      	lsrs	r3, r3, #16
 8001de6:	8283      	strh	r3, [r0, #20]
 8001de8:	4770      	bx	lr

08001dea <USART_DMACmd>:

  if (NewState != DISABLE)
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8001dea:	8a83      	ldrh	r3, [r0, #20]
 8001dec:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 8001dee:	b10a      	cbz	r2, 8001df4 <USART_DMACmd+0xa>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8001df0:	4319      	orrs	r1, r3
 8001df2:	e001      	b.n	8001df8 <USART_DMACmd+0xe>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 8001df4:	ea23 0101 	bic.w	r1, r3, r1
 8001df8:	8281      	strh	r1, [r0, #20]
 8001dfa:	4770      	bx	lr

08001dfc <USART_ITConfig>:
  } 
    
  usartxbase = (uint32_t)USARTx;

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8001dfc:	f3c1 1342 	ubfx	r3, r1, #5, #3
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8001e00:	b510      	push	{r4, lr}

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8001e02:	f001 011f 	and.w	r1, r1, #31
  itmask = (((uint32_t)0x01) << itpos);
 8001e06:	2401      	movs	r4, #1
 8001e08:	fa14 f101 	lsls.w	r1, r4, r1
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8001e0c:	42a3      	cmp	r3, r4
 8001e0e:	d101      	bne.n	8001e14 <USART_ITConfig+0x18>
  {
    usartxbase += 0x0C;
 8001e10:	300c      	adds	r0, #12
 8001e12:	e004      	b.n	8001e1e <USART_ITConfig+0x22>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d101      	bne.n	8001e1c <USART_ITConfig+0x20>
  {
    usartxbase += 0x10;
 8001e18:	3010      	adds	r0, #16
 8001e1a:	e000      	b.n	8001e1e <USART_ITConfig+0x22>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8001e1c:	3014      	adds	r0, #20
  }
  if (NewState != DISABLE)
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8001e1e:	6803      	ldr	r3, [r0, #0]
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
  }
  if (NewState != DISABLE)
 8001e20:	b10a      	cbz	r2, 8001e26 <USART_ITConfig+0x2a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8001e22:	4319      	orrs	r1, r3
 8001e24:	e001      	b.n	8001e2a <USART_ITConfig+0x2e>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8001e26:	ea23 0101 	bic.w	r1, r3, r1
 8001e2a:	6001      	str	r1, [r0, #0]
 8001e2c:	bd10      	pop	{r4, pc}

08001e2e <USART_GetFlagStatus>:
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8001e2e:	8803      	ldrh	r3, [r0, #0]
  {
    bitstatus = SET;
 8001e30:	4219      	tst	r1, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8001e32:	bf0c      	ite	eq
 8001e34:	2000      	moveq	r0, #0
 8001e36:	2001      	movne	r0, #1
 8001e38:	4770      	bx	lr

08001e3a <USART_ClearFlag>:
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
       
  USARTx->SR = (uint16_t)~USART_FLAG;
 8001e3a:	43c9      	mvns	r1, r1
 8001e3c:	b289      	uxth	r1, r1
 8001e3e:	8001      	strh	r1, [r0, #0]
}
 8001e40:	4770      	bx	lr

08001e42 <USART_GetITStatus>:
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
 8001e42:	2201      	movs	r2, #1
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8001e44:	b510      	push	{r4, lr}
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8001e46:	f001 031f 	and.w	r3, r1, #31
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8001e4a:	f3c1 1442 	ubfx	r4, r1, #5, #3
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
 8001e4e:	409a      	lsls	r2, r3
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8001e50:	2c01      	cmp	r4, #1
 8001e52:	d101      	bne.n	8001e58 <USART_GetITStatus+0x16>
  {
    itmask &= USARTx->CR1;
 8001e54:	8983      	ldrh	r3, [r0, #12]
 8001e56:	e003      	b.n	8001e60 <USART_GetITStatus+0x1e>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8001e58:	2c02      	cmp	r4, #2
  {
    itmask &= USARTx->CR2;
 8001e5a:	bf0c      	ite	eq
 8001e5c:	8a03      	ldrheq	r3, [r0, #16]
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8001e5e:	8a83      	ldrhne	r3, [r0, #20]
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	4013      	ands	r3, r2
  }
  
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
  bitpos &= USARTx->SR;
 8001e64:	8802      	ldrh	r2, [r0, #0]
 8001e66:	b292      	uxth	r2, r2
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8001e68:	b143      	cbz	r3, 8001e7c <USART_GetITStatus+0x3a>
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
  }
  
  bitpos = USART_IT >> 0x08;
 8001e6a:	0a09      	lsrs	r1, r1, #8
  bitpos = (uint32_t)0x01 << bitpos;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	fa13 f101 	lsls.w	r1, r3, r1
  *            @arg USART_IT_NE:   Noise Error interrupt
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
 8001e72:	4211      	tst	r1, r2
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
  bitpos &= USARTx->SR;
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
  {
    bitstatus = SET;
 8001e74:	bf0c      	ite	eq
 8001e76:	2000      	moveq	r0, #0
 8001e78:	2001      	movne	r0, #1
 8001e7a:	bd10      	pop	{r4, pc}
  }
  else
  {
    bitstatus = RESET;
 8001e7c:	4618      	mov	r0, r3
  }
  
  return bitstatus;  
}
 8001e7e:	bd10      	pop	{r4, pc}

08001e80 <USART_ClearITPendingBit>:
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 8001e80:	0a09      	lsrs	r1, r1, #8
 8001e82:	2301      	movs	r3, #1
 8001e84:	408b      	lsls	r3, r1
  USARTx->SR = (uint16_t)~itmask;
 8001e86:	43db      	mvns	r3, r3
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	8003      	strh	r3, [r0, #0]
}
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop

08001e90 <ST7032i_init>:
void ST7032i_command(ST7032i * lcd, byte value);
size_t ST7032i_write(ST7032i * lcd, byte value);

//
void ST7032i_init(ST7032i * lcd, I2CBus * wx) {
	lcd->_numlines = 2;
 8001e90:	2302      	movs	r3, #2
 8001e92:	7103      	strb	r3, [r0, #4]
	lcd->_numcolumns = 16;
 8001e94:	2310      	movs	r3, #16
 8001e96:	7143      	strb	r3, [r0, #5]
	lcd->_position = 0;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	7183      	strb	r3, [r0, #6]
	lcd->i2c_address = DEFAULT_I2C_ADDRESS;
 8001e9c:	233e      	movs	r3, #62	; 0x3e
 8001e9e:	7343      	strb	r3, [r0, #13]
	lcd->contrast = DEFAULTCONTRAST;
 8001ea0:	232a      	movs	r3, #42	; 0x2a
 8001ea2:	7303      	strb	r3, [r0, #12]
	lcd->pin_bklight = PIN_NOT_DEFINED;
 8001ea4:	23ff      	movs	r3, #255	; 0xff
 8001ea6:	81c3      	strh	r3, [r0, #14]

	lcd->wirex = wx;
 8001ea8:	6081      	str	r1, [r0, #8]
	 }
	 */
	if (lcd->pin_bklight != PIN_NOT_DEFINED) {
		pinMode(lcd->pin_bklight, OUTPUT);
	}
}
 8001eaa:	4770      	bx	lr

08001eac <ST7032i_command>:
//

void ST7032i_command(ST7032i * lcd, uint8_t value) {
 8001eac:	b507      	push	{r0, r1, r2, lr}
 8001eae:	4603      	mov	r3, r0
	uint8_t buf[2];
	buf[0] = (byte) 0x00;
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f88d 2004 	strb.w	r2, [sp, #4]
	buf[1] = value;
 8001eb6:	f88d 1005 	strb.w	r1, [sp, #5]
	i2c_transmit(lcd->wirex, lcd->i2c_address, buf, 2);
 8001eba:	aa01      	add	r2, sp, #4
 8001ebc:	7b59      	ldrb	r1, [r3, #13]
 8001ebe:	6880      	ldr	r0, [r0, #8]
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	f000 fc25 	bl	8002710 <i2c_transmit>
	delay_us(CMDDELAY);
 8001ec6:	2032      	movs	r0, #50	; 0x32
 8001ec8:	f000 f9a8 	bl	800221c <delay_us>
}
 8001ecc:	bd0e      	pop	{r1, r2, r3, pc}

08001ece <ST7032i_write>:

//
size_t ST7032i_write(ST7032i * lcd, uint8_t value) {
 8001ece:	b507      	push	{r0, r1, r2, lr}
 8001ed0:	4603      	mov	r3, r0
	uint8_t buf[2];
	buf[0] = 0b01000000;
 8001ed2:	2240      	movs	r2, #64	; 0x40
 8001ed4:	f88d 2004 	strb.w	r2, [sp, #4]
	buf[1] = value & 0xff;
 8001ed8:	f88d 1005 	strb.w	r1, [sp, #5]
	i2c_transmit(lcd->wirex,lcd->i2c_address, buf, 2);
 8001edc:	aa01      	add	r2, sp, #4
 8001ede:	7b59      	ldrb	r1, [r3, #13]
 8001ee0:	6880      	ldr	r0, [r0, #8]
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	f000 fc14 	bl	8002710 <i2c_transmit>
	delay_us(CMDDELAY);
 8001ee8:	2032      	movs	r0, #50	; 0x32
 8001eea:	f000 f997 	bl	800221c <delay_us>
	return 1; // assume success
}
 8001eee:	2001      	movs	r0, #1
 8001ef0:	bd0e      	pop	{r1, r2, r3, pc}

08001ef2 <ST7032i_print>:
	lcd->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
	// set the entry mode
	ST7032i_command(lcd, LCD_ENTRYMODESET | lcd->_displaymode);
}

size_t ST7032i_print(ST7032i * lcd, const char * str) {
 8001ef2:	b570      	push	{r4, r5, r6, lr}
 8001ef4:	4606      	mov	r6, r0
 8001ef6:	460d      	mov	r5, r1
	uint16_t i;
	for (i = 0; str[i]; i++)
 8001ef8:	2400      	movs	r4, #0
 8001efa:	e004      	b.n	8001f06 <ST7032i_print+0x14>
		ST7032i_write(lcd, str[i]);
 8001efc:	4630      	mov	r0, r6
 8001efe:	f7ff ffe6 	bl	8001ece <ST7032i_write>
	ST7032i_command(lcd, LCD_ENTRYMODESET | lcd->_displaymode);
}

size_t ST7032i_print(ST7032i * lcd, const char * str) {
	uint16_t i;
	for (i = 0; str[i]; i++)
 8001f02:	3401      	adds	r4, #1
 8001f04:	b2a4      	uxth	r4, r4
 8001f06:	5d29      	ldrb	r1, [r5, r4]
 8001f08:	2900      	cmp	r1, #0
 8001f0a:	d1f7      	bne.n	8001efc <ST7032i_print+0xa>
		ST7032i_write(lcd, str[i]);
	return i; // assume success
}
 8001f0c:	4620      	mov	r0, r4
 8001f0e:	bd70      	pop	{r4, r5, r6, pc}

08001f10 <ST7032i_setContrast>:

void ST7032i_setContrast(ST7032i * lcd, byte val) {
	lcd->contrast = 0x7f & val;
 8001f10:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	for (i = 0; str[i]; i++)
		ST7032i_write(lcd, str[i]);
	return i; // assume success
}

void ST7032i_setContrast(ST7032i * lcd, byte val) {
 8001f14:	b510      	push	{r4, lr}
 8001f16:	4604      	mov	r4, r0
	lcd->contrast = 0x7f & val;
 8001f18:	7301      	strb	r1, [r0, #12]
	ST7032i_command(lcd, 0b00111000); //function set
 8001f1a:	2138      	movs	r1, #56	; 0x38
 8001f1c:	f7ff ffc6 	bl	8001eac <ST7032i_command>
	ST7032i_command(lcd, 0b00111001); // function set
 8001f20:	2139      	movs	r1, #57	; 0x39
 8001f22:	4620      	mov	r0, r4
 8001f24:	f7ff ffc2 	bl	8001eac <ST7032i_command>
	delay_ms(2);
 8001f28:	2002      	movs	r0, #2
 8001f2a:	f000 f967 	bl	80021fc <delay_ms>
	ST7032i_command(lcd, 0b01110000 | (lcd->contrast & 0xf)); // contrast Low 4 bits
 8001f2e:	7b21      	ldrb	r1, [r4, #12]
 8001f30:	f001 010f 	and.w	r1, r1, #15
 8001f34:	4620      	mov	r0, r4
 8001f36:	f041 0170 	orr.w	r1, r1, #112	; 0x70
 8001f3a:	f7ff ffb7 	bl	8001eac <ST7032i_command>
	delay_ms(2);
 8001f3e:	2002      	movs	r0, #2
 8001f40:	f000 f95c 	bl	80021fc <delay_ms>
	ST7032i_command(lcd, 0b01011100 | ((lcd->contrast >> 4) & 0x3)); // contast High/icon/power
 8001f44:	7b21      	ldrb	r1, [r4, #12]
 8001f46:	f3c1 1101 	ubfx	r1, r1, #4, #2
 8001f4a:	4620      	mov	r0, r4
 8001f4c:	f041 015c 	orr.w	r1, r1, #92	; 0x5c
 8001f50:	f7ff ffac 	bl	8001eac <ST7032i_command>
	ST7032i_command(lcd, 0b00111000); // function set
 8001f54:	4620      	mov	r0, r4
 8001f56:	2138      	movs	r1, #56	; 0x38
 8001f58:	f7ff ffa8 	bl	8001eac <ST7032i_command>
	delay_ms(2);
 8001f5c:	2002      	movs	r0, #2
}
 8001f5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	delay_ms(2);
	ST7032i_command(lcd, 0b01110000 | (lcd->contrast & 0xf)); // contrast Low 4 bits
	delay_ms(2);
	ST7032i_command(lcd, 0b01011100 | ((lcd->contrast >> 4) & 0x3)); // contast High/icon/power
	ST7032i_command(lcd, 0b00111000); // function set
	delay_ms(2);
 8001f62:	f000 b94b 	b.w	80021fc <delay_ms>

08001f66 <ST7032i_clear>:
}

/* ------------------ */

void ST7032i_clear(ST7032i * lcd) {
 8001f66:	b508      	push	{r3, lr}
	ST7032i_command(lcd, LCD_CLEARDISPLAY); // clear display, set cursor position to zero
 8001f68:	2101      	movs	r1, #1
 8001f6a:	f7ff ff9f 	bl	8001eac <ST7032i_command>
	delay_ms(200);  // this command takes a long time!
 8001f6e:	20c8      	movs	r0, #200	; 0xc8
}
 8001f70:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* ------------------ */

void ST7032i_clear(ST7032i * lcd) {
	ST7032i_command(lcd, LCD_CLEARDISPLAY); // clear display, set cursor position to zero
	delay_ms(200);  // this command takes a long time!
 8001f74:	f000 b942 	b.w	80021fc <delay_ms>

08001f78 <ST7032i_home>:
}

void ST7032i_home(ST7032i * lcd) {
 8001f78:	b508      	push	{r3, lr}
	ST7032i_command(lcd, LCD_RETURNHOME);  // set cursor position to zero
 8001f7a:	2102      	movs	r1, #2
 8001f7c:	f7ff ff96 	bl	8001eac <ST7032i_command>
	delay_ms(200);  // this command takes a long time!
 8001f80:	20c8      	movs	r0, #200	; 0xc8
}
 8001f82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	delay_ms(200);  // this command takes a long time!
}

void ST7032i_home(ST7032i * lcd) {
	ST7032i_command(lcd, LCD_RETURNHOME);  // set cursor position to zero
	delay_ms(200);  // this command takes a long time!
 8001f86:	f000 b939 	b.w	80021fc <delay_ms>

08001f8a <ST7032i_setCursor>:
}

void ST7032i_setCursor(ST7032i * lcd, uint8_t c, uint8_t r) {
 8001f8a:	b5f0      	push	{r4, r5, r6, r7, lr}
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8001f8c:	4b0f      	ldr	r3, [pc, #60]	; (8001fcc <ST7032i_setCursor+0x42>)
void ST7032i_home(ST7032i * lcd) {
	ST7032i_command(lcd, LCD_RETURNHOME);  // set cursor position to zero
	delay_ms(200);  // this command takes a long time!
}

void ST7032i_setCursor(ST7032i * lcd, uint8_t c, uint8_t r) {
 8001f8e:	4605      	mov	r5, r0
 8001f90:	4614      	mov	r4, r2
 8001f92:	460e      	mov	r6, r1
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8001f94:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
void ST7032i_home(ST7032i * lcd) {
	ST7032i_command(lcd, LCD_RETURNHOME);  // set cursor position to zero
	delay_ms(200);  // this command takes a long time!
}

void ST7032i_setCursor(ST7032i * lcd, uint8_t c, uint8_t r) {
 8001f96:	b085      	sub	sp, #20
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8001f98:	af04      	add	r7, sp, #16
 8001f9a:	e907 000f 	stmdb	r7, {r0, r1, r2, r3}
	if (r >= lcd->_numlines) {
 8001f9e:	792b      	ldrb	r3, [r5, #4]
 8001fa0:	429c      	cmp	r4, r3
 8001fa2:	d304      	bcc.n	8001fae <ST7032i_setCursor+0x24>
		r %= lcd->_numlines;    // we count rows starting w/ 0
 8001fa4:	fbb4 f2f3 	udiv	r2, r4, r3
 8001fa8:	fb03 4412 	mls	r4, r3, r2, r4
 8001fac:	b2e4      	uxtb	r4, r4
	}
	lcd->_position = c + row_offsets[r];
 8001fae:	ab04      	add	r3, sp, #16
 8001fb0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
	ST7032i_command(lcd, LCD_SETDDRAMADDR | lcd->_position);
 8001fb4:	4628      	mov	r0, r5
void ST7032i_setCursor(ST7032i * lcd, uint8_t c, uint8_t r) {
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
	if (r >= lcd->_numlines) {
		r %= lcd->_numlines;    // we count rows starting w/ 0
	}
	lcd->_position = c + row_offsets[r];
 8001fb6:	f854 1c10 	ldr.w	r1, [r4, #-16]
 8001fba:	1876      	adds	r6, r6, r1
 8001fbc:	b2f1      	uxtb	r1, r6
 8001fbe:	71a9      	strb	r1, [r5, #6]
	ST7032i_command(lcd, LCD_SETDDRAMADDR | lcd->_position);
 8001fc0:	f041 0180 	orr.w	r1, r1, #128	; 0x80
}
 8001fc4:	b005      	add	sp, #20
 8001fc6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
	if (r >= lcd->_numlines) {
		r %= lcd->_numlines;    // we count rows starting w/ 0
	}
	lcd->_position = c + row_offsets[r];
	ST7032i_command(lcd, LCD_SETDDRAMADDR | lcd->_position);
 8001fca:	e76f      	b.n	8001eac <ST7032i_command>
 8001fcc:	08008628 	.word	0x08008628

08001fd0 <ST7032i_noDisplay>:
}

// LCD_DISPLAYON, LCD_BLINKON, LCD_CURSORON
void ST7032i_noDisplay(ST7032i * this) {
	this->_displaycontrol &= ~LCD_DISPLAYON;
 8001fd0:	7841      	ldrb	r1, [r0, #1]
 8001fd2:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
 8001fd6:	7041      	strb	r1, [r0, #1]
	ST7032i_command(this, LCD_DISPLAYCONTROL | this->_displaycontrol);
 8001fd8:	f041 0108 	orr.w	r1, r1, #8
 8001fdc:	e766      	b.n	8001eac <ST7032i_command>

08001fde <ST7032i_display>:
}

void ST7032i_display(ST7032i * this) {
	this->_displaycontrol |= LCD_DISPLAYON;
 8001fde:	7841      	ldrb	r1, [r0, #1]
 8001fe0:	f041 0104 	orr.w	r1, r1, #4
 8001fe4:	7041      	strb	r1, [r0, #1]
	ST7032i_command(this, LCD_DISPLAYCONTROL | this->_displaycontrol);
 8001fe6:	f041 0108 	orr.w	r1, r1, #8
 8001fea:	e75f      	b.n	8001eac <ST7032i_command>

08001fec <ST7032i_begin>:
	i2c_transmit(lcd->wirex,lcd->i2c_address, buf, 2);
	delay_us(CMDDELAY);
	return 1; // assume success
}

void ST7032i_begin(ST7032i * lcd) {
 8001fec:	b510      	push	{r4, lr}
//	delay(40);
	ST7032i_command(lcd, 0b00111000); //function set
 8001fee:	2138      	movs	r1, #56	; 0x38
	i2c_transmit(lcd->wirex,lcd->i2c_address, buf, 2);
	delay_us(CMDDELAY);
	return 1; // assume success
}

void ST7032i_begin(ST7032i * lcd) {
 8001ff0:	4604      	mov	r4, r0
//	delay(40);
	ST7032i_command(lcd, 0b00111000); //function set
 8001ff2:	f7ff ff5b 	bl	8001eac <ST7032i_command>
	ST7032i_command(lcd, 0b00111001); // function set
 8001ff6:	2139      	movs	r1, #57	; 0x39
 8001ff8:	4620      	mov	r0, r4
 8001ffa:	f7ff ff57 	bl	8001eac <ST7032i_command>
	delay_ms(2);
 8001ffe:	2002      	movs	r0, #2
 8002000:	f000 f8fc 	bl	80021fc <delay_ms>

	ST7032i_command(lcd, 0b00010100); // interval osc
 8002004:	4620      	mov	r0, r4
 8002006:	2114      	movs	r1, #20
 8002008:	f7ff ff50 	bl	8001eac <ST7032i_command>
	ST7032i_command(lcd, 0b01110000 | (lcd->contrast & 0xf)); // contrast Low 4 bits
 800200c:	7b21      	ldrb	r1, [r4, #12]
 800200e:	f001 010f 	and.w	r1, r1, #15
 8002012:	4620      	mov	r0, r4
 8002014:	f041 0170 	orr.w	r1, r1, #112	; 0x70
 8002018:	f7ff ff48 	bl	8001eac <ST7032i_command>
	delay_ms(2);
 800201c:	2002      	movs	r0, #2
 800201e:	f000 f8ed 	bl	80021fc <delay_ms>

	ST7032i_command(lcd, 0b01011100 | ((lcd->contrast >> 4) & 0x3)); // contast High/icon/power
 8002022:	7b21      	ldrb	r1, [r4, #12]
 8002024:	f3c1 1101 	ubfx	r1, r1, #4, #2
 8002028:	4620      	mov	r0, r4
 800202a:	f041 015c 	orr.w	r1, r1, #92	; 0x5c
 800202e:	f7ff ff3d 	bl	8001eac <ST7032i_command>
	ST7032i_command(lcd, 0b01101100); // follower control
 8002032:	216c      	movs	r1, #108	; 0x6c
 8002034:	4620      	mov	r0, r4
 8002036:	f7ff ff39 	bl	8001eac <ST7032i_command>
	delay_ms(300);
 800203a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800203e:	f000 f8dd 	bl	80021fc <delay_ms>

	ST7032i_command(lcd, 0b00111000); // function set
 8002042:	4620      	mov	r0, r4
 8002044:	2138      	movs	r1, #56	; 0x38
 8002046:	f7ff ff31 	bl	8001eac <ST7032i_command>
	ST7032i_command(lcd, 0b00001100); // Display On
 800204a:	210c      	movs	r1, #12
 800204c:	4620      	mov	r0, r4
 800204e:	f7ff ff2d 	bl	8001eac <ST7032i_command>
	delay_ms(2);
 8002052:	2002      	movs	r0, #2
 8002054:	f000 f8d2 	bl	80021fc <delay_ms>

	ST7032i_command(lcd, 0b00000001); // Clear Display
 8002058:	2101      	movs	r1, #1
 800205a:	4620      	mov	r0, r4
 800205c:	f7ff ff26 	bl	8001eac <ST7032i_command>
	delay_ms(2); // Clear Display needs additional wait
 8002060:	2002      	movs	r0, #2
 8002062:	f000 f8cb 	bl	80021fc <delay_ms>
	ST7032i_command(lcd, 0b00000010); // home, but does not work
 8002066:	2102      	movs	r1, #2
 8002068:	4620      	mov	r0, r4
 800206a:	f7ff ff1f 	bl	8001eac <ST7032i_command>
	delay_ms(2);
 800206e:	2002      	movs	r0, #2
 8002070:	f000 f8c4 	bl	80021fc <delay_ms>

	// finally, set # lines, font size, etc.
	ST7032i_command(lcd, LCD_FUNCTIONSET | lcd->_displayfunction);
 8002074:	7821      	ldrb	r1, [r4, #0]
 8002076:	4620      	mov	r0, r4
 8002078:	f041 0120 	orr.w	r1, r1, #32
 800207c:	f7ff ff16 	bl	8001eac <ST7032i_command>

	// turn the display on with no cursor or blinking default
	lcd->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8002080:	2304      	movs	r3, #4
 8002082:	7063      	strb	r3, [r4, #1]
	ST7032i_display(lcd);
 8002084:	4620      	mov	r0, r4
 8002086:	f7ff ffaa 	bl	8001fde <ST7032i_display>

	// clear it off
	ST7032i_clear(lcd);
 800208a:	4620      	mov	r0, r4
 800208c:	f7ff ff6b 	bl	8001f66 <ST7032i_clear>
	ST7032i_home(lcd);
 8002090:	4620      	mov	r0, r4
 8002092:	f7ff ff71 	bl	8001f78 <ST7032i_home>

	// Initialize to default text direction (for romance languages)
	lcd->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8002096:	2302      	movs	r3, #2
	// set the entry mode
	ST7032i_command(lcd, LCD_ENTRYMODESET | lcd->_displaymode);
 8002098:	4620      	mov	r0, r4
 800209a:	2106      	movs	r1, #6
	// clear it off
	ST7032i_clear(lcd);
	ST7032i_home(lcd);

	// Initialize to default text direction (for romance languages)
	lcd->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 800209c:	70a3      	strb	r3, [r4, #2]
	// set the entry mode
	ST7032i_command(lcd, LCD_ENTRYMODESET | lcd->_displaymode);
}
 800209e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ST7032i_home(lcd);

	// Initialize to default text direction (for romance languages)
	lcd->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
	// set the entry mode
	ST7032i_command(lcd, LCD_ENTRYMODESET | lcd->_displaymode);
 80020a2:	e703      	b.n	8001eac <ST7032i_command>

080020a4 <ST7032i_noBlink>:
	this->_displaycontrol |= LCD_DISPLAYON;
	ST7032i_command(this, LCD_DISPLAYCONTROL | this->_displaycontrol);
}

void ST7032i_noBlink(ST7032i * this) {
	this->_displaycontrol &= ~LCD_BLINKON;
 80020a4:	7841      	ldrb	r1, [r0, #1]
 80020a6:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 80020aa:	7041      	strb	r1, [r0, #1]
	ST7032i_command(this, LCD_DISPLAYCONTROL | this->_displaycontrol);
 80020ac:	f041 0108 	orr.w	r1, r1, #8
 80020b0:	e6fc      	b.n	8001eac <ST7032i_command>

080020b2 <ST7032i_blink>:
}

void ST7032i_blink(ST7032i * this) {
	this->_displaycontrol |= LCD_BLINKON;
 80020b2:	7841      	ldrb	r1, [r0, #1]
 80020b4:	f041 0101 	orr.w	r1, r1, #1
 80020b8:	7041      	strb	r1, [r0, #1]
	ST7032i_command(this, LCD_DISPLAYCONTROL | this->_displaycontrol);
 80020ba:	f041 0108 	orr.w	r1, r1, #8
 80020be:	e6f5      	b.n	8001eac <ST7032i_command>

080020c0 <ST7032i_noCursor>:
}

void ST7032i_noCursor(ST7032i * this) {
	this->_displaycontrol &= ~LCD_CURSORON;
 80020c0:	7841      	ldrb	r1, [r0, #1]
 80020c2:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
 80020c6:	7041      	strb	r1, [r0, #1]
	ST7032i_command(this, LCD_DISPLAYCONTROL | this->_displaycontrol);
 80020c8:	f041 0108 	orr.w	r1, r1, #8
 80020cc:	e6ee      	b.n	8001eac <ST7032i_command>

080020ce <ST7032i_showCursor>:
}

void ST7032i_showCursor(ST7032i * this) {
	this->_displaycontrol |= LCD_CURSORON;
 80020ce:	7841      	ldrb	r1, [r0, #1]
 80020d0:	f041 0102 	orr.w	r1, r1, #2
 80020d4:	7041      	strb	r1, [r0, #1]
	ST7032i_command(this, LCD_DISPLAYCONTROL | this->_displaycontrol);
 80020d6:	f041 0108 	orr.w	r1, r1, #8
 80020da:	e6e7      	b.n	8001eac <ST7032i_command>

080020dc <ST7032i_scrollDisplayLeft>:
}

void ST7032i_scrollDisplayLeft(ST7032i * this) {
	ST7032i_command(this, LCD_CURSORSHIFT | LCD_DISPLAYMOVE | LCD_MOVELEFT);
 80020dc:	2118      	movs	r1, #24
 80020de:	e6e5      	b.n	8001eac <ST7032i_command>

080020e0 <ST7032i_scrollDisplayRight>:
}

void ST7032i_scrollDisplayRight(ST7032i * this) {
	ST7032i_command(this, LCD_CURSORSHIFT | LCD_DISPLAYMOVE | LCD_MOVERIGHT);
 80020e0:	211c      	movs	r1, #28
 80020e2:	e6e3      	b.n	8001eac <ST7032i_command>

080020e4 <ST7032i_leftToRight>:
}

void ST7032i_leftToRight(ST7032i * this) {
	this->_displaymode |= LCD_ENTRYLEFT;
 80020e4:	7881      	ldrb	r1, [r0, #2]
 80020e6:	f041 0102 	orr.w	r1, r1, #2
 80020ea:	7081      	strb	r1, [r0, #2]
	ST7032i_command(this, LCD_ENTRYMODESET | this->_displaymode);
 80020ec:	f041 0104 	orr.w	r1, r1, #4
 80020f0:	e6dc      	b.n	8001eac <ST7032i_command>

080020f2 <ST7032i_rightToLeft>:
}

void ST7032i_rightToLeft(ST7032i * this) {
	this->_displaymode &= ~LCD_ENTRYLEFT;
 80020f2:	7881      	ldrb	r1, [r0, #2]
 80020f4:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
 80020f8:	7081      	strb	r1, [r0, #2]
	ST7032i_command(this, LCD_ENTRYMODESET | this->_displaymode);
 80020fa:	f041 0104 	orr.w	r1, r1, #4
 80020fe:	e6d5      	b.n	8001eac <ST7032i_command>

08002100 <ST7032i_autoscroll>:
}

void ST7032i_autoscroll(ST7032i * this) {
	this->_displaymode |= LCD_ENTRYSHIFTINCREMENT;
 8002100:	7881      	ldrb	r1, [r0, #2]
 8002102:	f041 0101 	orr.w	r1, r1, #1
 8002106:	7081      	strb	r1, [r0, #2]
	ST7032i_command(this, LCD_ENTRYMODESET | this->_displaymode);
 8002108:	f041 0104 	orr.w	r1, r1, #4
 800210c:	e6ce      	b.n	8001eac <ST7032i_command>

0800210e <ST7032i_noAutoscroll>:
}

void ST7032i_noAutoscroll(ST7032i * this) {
	this->_displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
 800210e:	7881      	ldrb	r1, [r0, #2]
 8002110:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 8002114:	7081      	strb	r1, [r0, #2]
	ST7032i_command(this, LCD_ENTRYMODESET | this->_displaymode);
 8002116:	f041 0104 	orr.w	r1, r1, #4
 800211a:	e6c7      	b.n	8001eac <ST7032i_command>

0800211c <ST7032i_createChar>:
}

void ST7032i_createChar(ST7032i * this, uint8_t location, uint8_t charmap[]) {
	int i;
	location &= 0x7; // we only have 8 locations 0-7
	ST7032i_command(this, LCD_SETCGRAMADDR | (location << 3));
 800211c:	f001 0107 	and.w	r1, r1, #7
 8002120:	00c9      	lsls	r1, r1, #3
void ST7032i_noAutoscroll(ST7032i * this) {
	this->_displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
	ST7032i_command(this, LCD_ENTRYMODESET | this->_displaymode);
}

void ST7032i_createChar(ST7032i * this, uint8_t location, uint8_t charmap[]) {
 8002122:	b570      	push	{r4, r5, r6, lr}
	int i;
	location &= 0x7; // we only have 8 locations 0-7
	ST7032i_command(this, LCD_SETCGRAMADDR | (location << 3));
 8002124:	f041 0140 	orr.w	r1, r1, #64	; 0x40
void ST7032i_noAutoscroll(ST7032i * this) {
	this->_displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
	ST7032i_command(this, LCD_ENTRYMODESET | this->_displaymode);
}

void ST7032i_createChar(ST7032i * this, uint8_t location, uint8_t charmap[]) {
 8002128:	4604      	mov	r4, r0
 800212a:	4616      	mov	r6, r2
	int i;
	location &= 0x7; // we only have 8 locations 0-7
	ST7032i_command(this, LCD_SETCGRAMADDR | (location << 3));
 800212c:	f7ff febe 	bl	8001eac <ST7032i_command>
	for (i = 0; i < 8; i++) {
 8002130:	2500      	movs	r5, #0
		ST7032i_write(this, charmap[i]);
 8002132:	5d71      	ldrb	r1, [r6, r5]
 8002134:	4620      	mov	r0, r4

void ST7032i_createChar(ST7032i * this, uint8_t location, uint8_t charmap[]) {
	int i;
	location &= 0x7; // we only have 8 locations 0-7
	ST7032i_command(this, LCD_SETCGRAMADDR | (location << 3));
	for (i = 0; i < 8; i++) {
 8002136:	3501      	adds	r5, #1
		ST7032i_write(this, charmap[i]);
 8002138:	f7ff fec9 	bl	8001ece <ST7032i_write>

void ST7032i_createChar(ST7032i * this, uint8_t location, uint8_t charmap[]) {
	int i;
	location &= 0x7; // we only have 8 locations 0-7
	ST7032i_command(this, LCD_SETCGRAMADDR | (location << 3));
	for (i = 0; i < 8; i++) {
 800213c:	2d08      	cmp	r5, #8
 800213e:	d1f8      	bne.n	8002132 <ST7032i_createChar+0x16>
		ST7032i_write(this, charmap[i]);
	}
}
 8002140:	bd70      	pop	{r4, r5, r6, pc}
 8002142:	bf00      	nop

08002144 <TIM2_timer_start>:
/**
 * @brief  millisecond
 * @param  none
 * @retval None
 */
void TIM2_timer_start(void) {
 8002144:	b530      	push	{r4, r5, lr}
 8002146:	b089      	sub	sp, #36	; 0x24
	// TIM_TimeBaseInitTypeDef's order is {uint16_t TIM_Prescaler, uint16_t TIM_CounterMode, uint16_t TIM_Period, uint16_t TIM_ClockDivision, uint8_t TIM_RepetitionCounter}
	TIM_TimeBaseInitTypeDef TimeBaseStructure;
//			= { 84, TIM_CounterMode_Up, 999, TIM_CKD_DIV1, 0 };

	RCC_ClocksTypeDef RCC_Clocks;
	RCC_GetClocksFreq(&RCC_Clocks);
 8002148:	4668      	mov	r0, sp
 800214a:	f7fe fc23 	bl	8000994 <RCC_GetClocksFreq>
	TimeBaseStructure.TIM_Prescaler = (RCC_Clocks.SYSCLK_Frequency>>1)/1000000L ;
 800214e:	9b00      	ldr	r3, [sp, #0]
 8002150:	4a1e      	ldr	r2, [pc, #120]	; (80021cc <TIM2_timer_start+0x88>)
 8002152:	085b      	lsrs	r3, r3, #1
 8002154:	fbb3 f3f2 	udiv	r3, r3, r2
	TimeBaseStructure.TIM_Period = 1000 - 1;
	TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
	TimeBaseStructure.TIM_RepetitionCounter = 0;

	//Supply APB1 Clock
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8002158:	2001      	movs	r0, #1
//			= { 84, TIM_CounterMode_Up, 999, TIM_CKD_DIV1, 0 };

	RCC_ClocksTypeDef RCC_Clocks;
	RCC_GetClocksFreq(&RCC_Clocks);
	TimeBaseStructure.TIM_Prescaler = (RCC_Clocks.SYSCLK_Frequency>>1)/1000000L ;
	TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 800215a:	2400      	movs	r4, #0
	TimeBaseStructure.TIM_Period = 1000 - 1;
	TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
	TimeBaseStructure.TIM_RepetitionCounter = 0;

	//Supply APB1 Clock
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 800215c:	4601      	mov	r1, r0
	TIM_TimeBaseInitTypeDef TimeBaseStructure;
//			= { 84, TIM_CounterMode_Up, 999, TIM_CKD_DIV1, 0 };

	RCC_ClocksTypeDef RCC_Clocks;
	RCC_GetClocksFreq(&RCC_Clocks);
	TimeBaseStructure.TIM_Prescaler = (RCC_Clocks.SYSCLK_Frequency>>1)/1000000L ;
 800215e:	f8ad 3010 	strh.w	r3, [sp, #16]
	TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
	TimeBaseStructure.TIM_Period = 1000 - 1;
 8002162:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002166:	9305      	str	r3, [sp, #20]
//			= { 84, TIM_CounterMode_Up, 999, TIM_CKD_DIV1, 0 };

	RCC_ClocksTypeDef RCC_Clocks;
	RCC_GetClocksFreq(&RCC_Clocks);
	TimeBaseStructure.TIM_Prescaler = (RCC_Clocks.SYSCLK_Frequency>>1)/1000000L ;
	TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8002168:	f8ad 4012 	strh.w	r4, [sp, #18]
	TimeBaseStructure.TIM_Period = 1000 - 1;
	TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 800216c:	f8ad 4018 	strh.w	r4, [sp, #24]
	TimeBaseStructure.TIM_RepetitionCounter = 0;
 8002170:	f88d 401a 	strb.w	r4, [sp, #26]

	//Supply APB1 Clock
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8002174:	f7fe fca2 	bl	8000abc <RCC_APB1PeriphClockCmd>

	/* Time base configuration */
	TIM_TimeBaseInit(TIM2, &TimeBaseStructure);
 8002178:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800217c:	a904      	add	r1, sp, #16
 800217e:	f7ff f805 	bl	800118c <TIM_TimeBaseInit>
//  TIM_SelectOnePulseMode(TIM2, TIM_OPMode_Repetitive);
	TIM_SetCounter(TIM2, 0);
 8002182:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002186:	4621      	mov	r1, r4
 8002188:	f7ff f852 	bl	8001230 <TIM_SetCounter>
	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);
 800218c:	2101      	movs	r1, #1
 800218e:	460a      	mov	r2, r1
 8002190:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002194:	f7ff fbbf 	bl	8001916 <TIM_ITConfig>

	NVIC_InitTypeDef NVIC_InitStructure;
	/* Enable the TIM2 gloabal Interrupt */
	NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
 8002198:	231c      	movs	r3, #28
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
 800219a:	eb0d 0003 	add.w	r0, sp, r3

	NVIC_InitTypeDef NVIC_InitStructure;
	/* Enable the TIM2 gloabal Interrupt */
	NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 800219e:	2501      	movs	r5, #1
	TIM_SetCounter(TIM2, 0);
	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);

	NVIC_InitTypeDef NVIC_InitStructure;
	/* Enable the TIM2 gloabal Interrupt */
	NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
 80021a0:	f88d 301c 	strb.w	r3, [sp, #28]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80021a4:	f88d 401d 	strb.w	r4, [sp, #29]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 80021a8:	f88d 501e 	strb.w	r5, [sp, #30]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80021ac:	f88d 501f 	strb.w	r5, [sp, #31]
	NVIC_Init(&NVIC_InitStructure);
 80021b0:	f7fd fff4 	bl	800019c <NVIC_Init>

	/* TIM enable counter */
	TIM_Cmd(TIM2, ENABLE);
 80021b4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80021b8:	4629      	mov	r1, r5
 80021ba:	f7ff f87c 	bl	80012b6 <TIM_Cmd>

	__counter_micros = 0;
 80021be:	4b04      	ldr	r3, [pc, #16]	; (80021d0 <TIM2_timer_start+0x8c>)
 80021c0:	601c      	str	r4, [r3, #0]
	__counter_millis = 0;
 80021c2:	4b04      	ldr	r3, [pc, #16]	; (80021d4 <TIM2_timer_start+0x90>)
 80021c4:	601c      	str	r4, [r3, #0]
}
 80021c6:	b009      	add	sp, #36	; 0x24
 80021c8:	bd30      	pop	{r4, r5, pc}
 80021ca:	bf00      	nop
 80021cc:	000f4240 	.word	0x000f4240
 80021d0:	200009a4 	.word	0x200009a4
 80021d4:	200009a8 	.word	0x200009a8

080021d8 <micros>:

uint32_t micros(void) {
	return __counter_micros + TIM_GetCounter(TIM2 );
 80021d8:	4b04      	ldr	r3, [pc, #16]	; (80021ec <micros+0x14>)

	__counter_micros = 0;
	__counter_millis = 0;
}

uint32_t micros(void) {
 80021da:	b510      	push	{r4, lr}
	return __counter_micros + TIM_GetCounter(TIM2 );
 80021dc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80021e0:	681c      	ldr	r4, [r3, #0]
 80021e2:	f7ff f829 	bl	8001238 <TIM_GetCounter>
}
 80021e6:	1900      	adds	r0, r0, r4
 80021e8:	bd10      	pop	{r4, pc}
 80021ea:	bf00      	nop
 80021ec:	200009a4 	.word	0x200009a4

080021f0 <millis>:

uint32_t millis(void) {
	return __counter_millis;
 80021f0:	4b01      	ldr	r3, [pc, #4]	; (80021f8 <millis+0x8>)
 80021f2:	6818      	ldr	r0, [r3, #0]
}
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	200009a8 	.word	0x200009a8

080021fc <delay_ms>:
uint32_t micros(void) {
	return __counter_micros + TIM_GetCounter(TIM2 );
}

uint32_t millis(void) {
	return __counter_millis;
 80021fc:	4b06      	ldr	r3, [pc, #24]	; (8002218 <delay_ms+0x1c>)
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	6819      	ldr	r1, [r3, #0]
}

void delay_ms(uint32_t w) {
	uint32_t wtill = millis() + w;
 8002202:	1882      	adds	r2, r0, r2
	if ( wtill < millis() ) {
 8002204:	428a      	cmp	r2, r1
 8002206:	d202      	bcs.n	800220e <delay_ms+0x12>
uint32_t micros(void) {
	return __counter_micros + TIM_GetCounter(TIM2 );
}

uint32_t millis(void) {
	return __counter_millis;
 8002208:	6819      	ldr	r1, [r3, #0]
}

void delay_ms(uint32_t w) {
	uint32_t wtill = millis() + w;
	if ( wtill < millis() ) {
		while ( millis() >= wtill );
 800220a:	4291      	cmp	r1, r2
 800220c:	d2fc      	bcs.n	8002208 <delay_ms+0xc>
uint32_t micros(void) {
	return __counter_micros + TIM_GetCounter(TIM2 );
}

uint32_t millis(void) {
	return __counter_millis;
 800220e:	4b02      	ldr	r3, [pc, #8]	; (8002218 <delay_ms+0x1c>)
 8002210:	6819      	ldr	r1, [r3, #0]
void delay_ms(uint32_t w) {
	uint32_t wtill = millis() + w;
	if ( wtill < millis() ) {
		while ( millis() >= wtill );
	}
	while (millis() < wtill)
 8002212:	4291      	cmp	r1, r2
 8002214:	d3fc      	bcc.n	8002210 <delay_ms+0x14>
		;
}
 8002216:	4770      	bx	lr
 8002218:	200009a8 	.word	0x200009a8

0800221c <delay_us>:

void delay_us(uint32_t w) {
 800221c:	b510      	push	{r4, lr}
 800221e:	4604      	mov	r4, r0
	uint32_t wtill = micros() + w;
 8002220:	f7ff ffda 	bl	80021d8 <micros>
 8002224:	1904      	adds	r4, r0, r4
	if ( wtill < micros() ) {
 8002226:	f7ff ffd7 	bl	80021d8 <micros>
 800222a:	4284      	cmp	r4, r0
 800222c:	d203      	bcs.n	8002236 <delay_us+0x1a>
		// overflow
		while ( micros() >= wtill );
 800222e:	f7ff ffd3 	bl	80021d8 <micros>
 8002232:	42a0      	cmp	r0, r4
 8002234:	d2fb      	bcs.n	800222e <delay_us+0x12>
	}
	while (micros() < wtill)
 8002236:	f7ff ffcf 	bl	80021d8 <micros>
 800223a:	42a0      	cmp	r0, r4
 800223c:	d3fb      	bcc.n	8002236 <delay_us+0x1a>
		;
}
 800223e:	bd10      	pop	{r4, pc}

08002240 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void) {
 8002240:	b508      	push	{r3, lr}
	if (TIM_GetITStatus(TIM2, TIM_IT_Update ) != RESET) {
 8002242:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002246:	2101      	movs	r1, #1
 8002248:	f7ff fb7a 	bl	8001940 <TIM_GetITStatus>
 800224c:	b168      	cbz	r0, 800226a <TIM2_IRQHandler+0x2a>
		TIM_ClearITPendingBit(TIM2, TIM_IT_Update );
 800224e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002252:	2101      	movs	r1, #1
 8002254:	f7ff fb7f 	bl	8001956 <TIM_ClearITPendingBit>
		__counter_micros += 1000;
 8002258:	4b04      	ldr	r3, [pc, #16]	; (800226c <TIM2_IRQHandler+0x2c>)
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	f502 727a 	add.w	r2, r2, #1000	; 0x3e8
 8002260:	601a      	str	r2, [r3, #0]
		__counter_millis += 1;
 8002262:	4b03      	ldr	r3, [pc, #12]	; (8002270 <TIM2_IRQHandler+0x30>)
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	3201      	adds	r2, #1
 8002268:	601a      	str	r2, [r3, #0]
 800226a:	bd08      	pop	{r3, pc}
 800226c:	200009a4 	.word	0x200009a4
 8002270:	200009a8 	.word	0x200009a8

08002274 <PinPort>:
		GPIO_Pin_10, GPIO_Pin_11, GPIO_Pin_12, GPIO_Pin_13, GPIO_Pin_14,
		GPIO_Pin_15, GPIO_Pin_All };

GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}
 8002274:	4b02      	ldr	r3, [pc, #8]	; (8002280 <PinPort+0xc>)
		GPIO_Pin_4, GPIO_Pin_5, GPIO_Pin_6, GPIO_Pin_7, GPIO_Pin_8, GPIO_Pin_9,
		GPIO_Pin_10, GPIO_Pin_11, GPIO_Pin_12, GPIO_Pin_13, GPIO_Pin_14,
		GPIO_Pin_15, GPIO_Pin_All };

GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
 8002276:	f3c0 2003 	ubfx	r0, r0, #8, #4
}
 800227a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800227e:	4770      	bx	lr
 8002280:	20000010 	.word	0x20000010

08002284 <PinBit>:

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 8002284:	2301      	movs	r3, #1
 8002286:	f000 000f 	and.w	r0, r0, #15
 800228a:	fa13 f000 	lsls.w	r0, r3, r0
}
 800228e:	b280      	uxth	r0, r0
 8002290:	4770      	bx	lr

08002292 <PinSource>:

uint8_t PinSource(GPIOPin portpin) {
	return portpin & 0x0f;
}
 8002292:	f000 000f 	and.w	r0, r0, #15
 8002296:	4770      	bx	lr

08002298 <pinMode>:

void pinMode(GPIOPin portpin, GPIOMode_TypeDef mode) {
 8002298:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);
 800229a:	4c11      	ldr	r4, [pc, #68]	; (80022e0 <pinMode+0x48>)
 800229c:	f3c0 2503 	ubfx	r5, r0, #8, #4
 80022a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2

uint8_t PinSource(GPIOPin portpin) {
	return portpin & 0x0f;
}

void pinMode(GPIOPin portpin, GPIOMode_TypeDef mode) {
 80022a4:	460f      	mov	r7, r1
 80022a6:	4606      	mov	r6, r0

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);
 80022a8:	2101      	movs	r1, #1
 80022aa:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80022ac:	f7fe fbe2 	bl	8000a74 <RCC_AHB1PeriphClockCmd>
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 80022b0:	f006 060f 	and.w	r6, r6, #15
 80022b4:	2301      	movs	r3, #1
 80022b6:	fa13 f606 	lsls.w	r6, r3, r6

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);

	GPIO_InitStructure.GPIO_Pin = PinBit(portpin);
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80022ba:	2300      	movs	r3, #0

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);

	GPIO_InitStructure.GPIO_Pin = PinBit(portpin);
 80022bc:	b2b6      	uxth	r6, r6
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80022be:	f88d 3006 	strb.w	r3, [sp, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80022c2:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	//
	GPIO_Init(Port[portpin>>8 & 0x0f], &GPIO_InitStructure);
 80022c6:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);

	GPIO_InitStructure.GPIO_Pin = PinBit(portpin);
 80022ca:	9600      	str	r6, [sp, #0]
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80022cc:	2302      	movs	r3, #2
	//
	GPIO_Init(Port[portpin>>8 & 0x0f], &GPIO_InitStructure);
 80022ce:	4669      	mov	r1, sp
	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);

	GPIO_InitStructure.GPIO_Pin = PinBit(portpin);
	GPIO_InitStructure.GPIO_Mode = mode;
 80022d0:	f88d 7004 	strb.w	r7, [sp, #4]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80022d4:	f88d 3005 	strb.w	r3, [sp, #5]
	//
	GPIO_Init(Port[portpin>>8 & 0x0f], &GPIO_InitStructure);
 80022d8:	f7fe f824 	bl	8000324 <GPIO_Init>
}
 80022dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80022de:	bf00      	nop
 80022e0:	20000010 	.word	0x20000010

080022e4 <digitalWrite>:

void digitalWrite(GPIOPin portpin, uint8_t bit) {
 80022e4:	0a02      	lsrs	r2, r0, #8
 80022e6:	4b0a      	ldr	r3, [pc, #40]	; (8002310 <digitalWrite+0x2c>)
	if (bit) {
		//? Bit_SET : Bit_RESET ));
		GPIO_SetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
 80022e8:	f002 020f 	and.w	r2, r2, #15
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 80022ec:	f000 000f 	and.w	r0, r0, #15
	//
	GPIO_Init(Port[portpin>>8 & 0x0f], &GPIO_InitStructure);
}

void digitalWrite(GPIOPin portpin, uint8_t bit) {
	if (bit) {
 80022f0:	b131      	cbz	r1, 8002300 <digitalWrite+0x1c>
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 80022f2:	2101      	movs	r1, #1
 80022f4:	4081      	lsls	r1, r0
}

void digitalWrite(GPIOPin portpin, uint8_t bit) {
	if (bit) {
		//? Bit_SET : Bit_RESET ));
		GPIO_SetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
 80022f6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80022fa:	b289      	uxth	r1, r1
 80022fc:	f7fe b883 	b.w	8000406 <GPIO_SetBits>
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 8002300:	2101      	movs	r1, #1
 8002302:	4081      	lsls	r1, r0
void digitalWrite(GPIOPin portpin, uint8_t bit) {
	if (bit) {
		//? Bit_SET : Bit_RESET ));
		GPIO_SetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
	} else {
		GPIO_ResetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
 8002304:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8002308:	b289      	uxth	r1, r1
 800230a:	f7fe b87e 	b.w	800040a <GPIO_ResetBits>
 800230e:	bf00      	nop
 8002310:	20000010 	.word	0x20000010

08002314 <digitalRead>:
	}
}

uint8_t digitalRead(GPIOPin portpin) {
	GPIO_TypeDef * port = Port[portpin>>8 & 0x0f];
 8002314:	f3c0 2203 	ubfx	r2, r0, #8, #4
	} else {
		GPIO_ResetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
	}
}

uint8_t digitalRead(GPIOPin portpin) {
 8002318:	b508      	push	{r3, lr}
	GPIO_TypeDef * port = Port[portpin>>8 & 0x0f];
 800231a:	4b0f      	ldr	r3, [pc, #60]	; (8002358 <digitalRead+0x44>)
	} else {
		GPIO_ResetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
	}
}

uint8_t digitalRead(GPIOPin portpin) {
 800231c:	4601      	mov	r1, r0
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 800231e:	f001 010f 	and.w	r1, r1, #15
		GPIO_ResetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
	}
}

uint8_t digitalRead(GPIOPin portpin) {
	GPIO_TypeDef * port = Port[portpin>>8 & 0x0f];
 8002322:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 8002326:	2301      	movs	r3, #1
 8002328:	fa13 f101 	lsls.w	r1, r3, r1
	}
}

uint8_t digitalRead(GPIOPin portpin) {
	GPIO_TypeDef * port = Port[portpin>>8 & 0x0f];
	uint8_t mode = (port->MODER) >> (PinBit(portpin) * 2);
 800232c:	6802      	ldr	r2, [r0, #0]
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 800232e:	b289      	uxth	r1, r1
	}
}

uint8_t digitalRead(GPIOPin portpin) {
	GPIO_TypeDef * port = Port[portpin>>8 & 0x0f];
	uint8_t mode = (port->MODER) >> (PinBit(portpin) * 2);
 8002330:	fa11 f303 	lsls.w	r3, r1, r3
 8002334:	fa32 f303 	lsrs.w	r3, r2, r3
	if (mode == GPIO_Mode_OUT)
 8002338:	b2db      	uxtb	r3, r3
 800233a:	2b01      	cmp	r3, #1
 800233c:	d105      	bne.n	800234a <digitalRead+0x36>
		return (GPIO_ReadOutputDataBit(port, PinBit(portpin)) ? SET : RESET);
 800233e:	f7fe f859 	bl	80003f4 <GPIO_ReadOutputDataBit>
 8002342:	3000      	adds	r0, #0
 8002344:	bf18      	it	ne
 8002346:	2001      	movne	r0, #1
 8002348:	bd08      	pop	{r3, pc}
	return (GPIO_ReadInputDataBit(port, PinBit(portpin)) ? SET : RESET);
 800234a:	f7fe f84a 	bl	80003e2 <GPIO_ReadInputDataBit>
 800234e:	3000      	adds	r0, #0
 8002350:	bf18      	it	ne
 8002352:	2001      	movne	r0, #1
}
 8002354:	bd08      	pop	{r3, pc}
 8002356:	bf00      	nop
 8002358:	20000010 	.word	0x20000010

0800235c <GPIOMode>:

void GPIOMode(GPIO_TypeDef * port, uint16_t pinbit, GPIOMode_TypeDef mode,
              GPIOSpeed_TypeDef clk, GPIOOType_TypeDef otype, GPIOPuPd_TypeDef pupd) {
 800235c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800235e:	461f      	mov	r7, r3
	if ( port == GPIOB ) {
 8002360:	4b22      	ldr	r3, [pc, #136]	; (80023ec <GPIOMode+0x90>)
 8002362:	4298      	cmp	r0, r3
		return (GPIO_ReadOutputDataBit(port, PinBit(portpin)) ? SET : RESET);
	return (GPIO_ReadInputDataBit(port, PinBit(portpin)) ? SET : RESET);
}

void GPIOMode(GPIO_TypeDef * port, uint16_t pinbit, GPIOMode_TypeDef mode,
              GPIOSpeed_TypeDef clk, GPIOOType_TypeDef otype, GPIOPuPd_TypeDef pupd) {
 8002364:	4604      	mov	r4, r0
 8002366:	460d      	mov	r5, r1
 8002368:	4616      	mov	r6, r2
	if ( port == GPIOB ) {
 800236a:	d101      	bne.n	8002370 <GPIOMode+0x14>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 800236c:	2002      	movs	r0, #2
 800236e:	e022      	b.n	80023b6 <GPIOMode+0x5a>
	} else if ( port == GPIOC ) {
 8002370:	4b1f      	ldr	r3, [pc, #124]	; (80023f0 <GPIOMode+0x94>)
 8002372:	4298      	cmp	r0, r3
 8002374:	d101      	bne.n	800237a <GPIOMode+0x1e>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8002376:	2004      	movs	r0, #4
 8002378:	e01d      	b.n	80023b6 <GPIOMode+0x5a>
	} else if ( port == GPIOD ) {
 800237a:	4b1e      	ldr	r3, [pc, #120]	; (80023f4 <GPIOMode+0x98>)
 800237c:	4298      	cmp	r0, r3
 800237e:	d101      	bne.n	8002384 <GPIOMode+0x28>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8002380:	2008      	movs	r0, #8
 8002382:	e018      	b.n	80023b6 <GPIOMode+0x5a>
	} else if ( port == GPIOE ) {
 8002384:	4b1c      	ldr	r3, [pc, #112]	; (80023f8 <GPIOMode+0x9c>)
 8002386:	4298      	cmp	r0, r3
 8002388:	d101      	bne.n	800238e <GPIOMode+0x32>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 800238a:	2010      	movs	r0, #16
 800238c:	e013      	b.n	80023b6 <GPIOMode+0x5a>
	} else if ( port == GPIOF ) {
 800238e:	4b1b      	ldr	r3, [pc, #108]	; (80023fc <GPIOMode+0xa0>)
 8002390:	4298      	cmp	r0, r3
 8002392:	d101      	bne.n	8002398 <GPIOMode+0x3c>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 8002394:	2020      	movs	r0, #32
 8002396:	e00e      	b.n	80023b6 <GPIOMode+0x5a>
	} else if ( port == GPIOG ) {
 8002398:	4b19      	ldr	r3, [pc, #100]	; (8002400 <GPIOMode+0xa4>)
 800239a:	4298      	cmp	r0, r3
 800239c:	d101      	bne.n	80023a2 <GPIOMode+0x46>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 800239e:	2040      	movs	r0, #64	; 0x40
 80023a0:	e009      	b.n	80023b6 <GPIOMode+0x5a>
	} else if ( port == GPIOH ) {
 80023a2:	4b18      	ldr	r3, [pc, #96]	; (8002404 <GPIOMode+0xa8>)
 80023a4:	4298      	cmp	r0, r3
 80023a6:	d101      	bne.n	80023ac <GPIOMode+0x50>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 80023a8:	2080      	movs	r0, #128	; 0x80
 80023aa:	e004      	b.n	80023b6 <GPIOMode+0x5a>
	} else if ( port == GPIOI ) {
 80023ac:	4b16      	ldr	r3, [pc, #88]	; (8002408 <GPIOMode+0xac>)
 80023ae:	4298      	cmp	r0, r3
 80023b0:	d103      	bne.n	80023ba <GPIOMode+0x5e>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 80023b2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80023b6:	2101      	movs	r1, #1
 80023b8:	e004      	b.n	80023c4 <GPIOMode+0x68>
	} else if ( port == GPIOA ) {
 80023ba:	4b14      	ldr	r3, [pc, #80]	; (800240c <GPIOMode+0xb0>)
 80023bc:	4298      	cmp	r0, r3
 80023be:	d103      	bne.n	80023c8 <GPIOMode+0x6c>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 80023c0:	2001      	movs	r0, #1
 80023c2:	4601      	mov	r1, r0
 80023c4:	f7fe fb56 	bl	8000a74 <RCC_AHB1PeriphClockCmd>

	GPIO_InitTypeDef GPIO_InitStructure;
        
	GPIO_InitStructure.GPIO_Pin = pinbit;
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = otype;
 80023c8:	f89d 3020 	ldrb.w	r3, [sp, #32]
	}
	// assumes port is already waked up.

	GPIO_InitTypeDef GPIO_InitStructure;
        
	GPIO_InitStructure.GPIO_Pin = pinbit;
 80023cc:	9500      	str	r5, [sp, #0]
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = otype;
 80023ce:	f88d 3006 	strb.w	r3, [sp, #6]
	GPIO_InitStructure.GPIO_PuPd = pupd;
 80023d2:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
	// assumes port is already waked up.

	GPIO_InitTypeDef GPIO_InitStructure;
        
	GPIO_InitStructure.GPIO_Pin = pinbit;
	GPIO_InitStructure.GPIO_Mode = mode;
 80023d6:	f88d 6004 	strb.w	r6, [sp, #4]
	GPIO_InitStructure.GPIO_OType = otype;
	GPIO_InitStructure.GPIO_PuPd = pupd;
	GPIO_InitStructure.GPIO_Speed = clk;
	//
	GPIO_Init(port, &GPIO_InitStructure);
 80023da:	4620      	mov	r0, r4
 80023dc:	4669      	mov	r1, sp
	GPIO_InitTypeDef GPIO_InitStructure;
        
	GPIO_InitStructure.GPIO_Pin = pinbit;
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = otype;
	GPIO_InitStructure.GPIO_PuPd = pupd;
 80023de:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_InitStructure.GPIO_Speed = clk;
 80023e2:	f88d 7005 	strb.w	r7, [sp, #5]
	//
	GPIO_Init(port, &GPIO_InitStructure);
 80023e6:	f7fd ff9d 	bl	8000324 <GPIO_Init>
}
 80023ea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80023ec:	40020400 	.word	0x40020400
 80023f0:	40020800 	.word	0x40020800
 80023f4:	40020c00 	.word	0x40020c00
 80023f8:	40021000 	.word	0x40021000
 80023fc:	40021400 	.word	0x40021400
 8002400:	40021800 	.word	0x40021800
 8002404:	40021c00 	.word	0x40021c00
 8002408:	40022000 	.word	0x40022000
 800240c:	40020000 	.word	0x40020000

08002410 <GPIOWrite>:


inline void GPIOWrite(GPIO_TypeDef * port, uint16_t bits) {
	GPIO_Write(port, bits);
 8002410:	f7fe b802 	b.w	8000418 <GPIO_Write>

08002414 <i2c_begin>:
} CommDirection;

//I2C_Status i2c1_status;
//CommDirection i2c1_direction;

boolean i2c_begin(I2CBus * wirex, uint32_t clkspeed) {
 8002414:	b5f0      	push	{r4, r5, r6, r7, lr}
//	GPIO_InitTypeDef GPIO_InitStructure;
	I2C_InitTypeDef I2C_InitStructure;

	wirex->I2Cx = I2C1;
 8002416:	4b37      	ldr	r3, [pc, #220]	; (80024f4 <i2c_begin+0xe0>)
 8002418:	6003      	str	r3, [r0, #0]
	wirex->sda = PB9;
 800241a:	f240 2309 	movw	r3, #521	; 0x209
} CommDirection;

//I2C_Status i2c1_status;
//CommDirection i2c1_direction;

boolean i2c_begin(I2CBus * wirex, uint32_t clkspeed) {
 800241e:	4604      	mov	r4, r0
//	GPIO_InitTypeDef GPIO_InitStructure;
	I2C_InitTypeDef I2C_InitStructure;

	wirex->I2Cx = I2C1;
	wirex->sda = PB9;
 8002420:	8083      	strh	r3, [r0, #4]
	wirex->scl = PB8;
 8002422:	f44f 7302 	mov.w	r3, #520	; 0x208
} CommDirection;

//I2C_Status i2c1_status;
//CommDirection i2c1_direction;

boolean i2c_begin(I2CBus * wirex, uint32_t clkspeed) {
 8002426:	b087      	sub	sp, #28
//	GPIO_InitTypeDef GPIO_InitStructure;
	I2C_InitTypeDef I2C_InitStructure;

	wirex->I2Cx = I2C1;
	wirex->sda = PB9;
	wirex->scl = PB8;
 8002428:	80c3      	strh	r3, [r0, #6]
} CommDirection;

//I2C_Status i2c1_status;
//CommDirection i2c1_direction;

boolean i2c_begin(I2CBus * wirex, uint32_t clkspeed) {
 800242a:	460d      	mov	r5, r1
	wirex->I2Cx = I2C1;
	wirex->sda = PB9;
	wirex->scl = PB8;

	/* I2C Periph clock enable */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE); //  RCC_APB1PeriphClockCmd(I2C1_RCC, ENABLE);
 800242c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002430:	2101      	movs	r1, #1
 8002432:	f7fe fb43 	bl	8000abc <RCC_APB1PeriphClockCmd>
	/* GPIO Periph clock enable */
	//RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE); // PB5 (SMBA), PB6 (SCL), PB9 (SDA)  // RCC_APB2PeriphClockCmd(I2C1_GPIO_RCC, ENABLE);
	GPIOMode(PinPort(wirex->scl), PinBit(wirex->scl), GPIO_Mode_AF, GPIO_Speed_50MHz,
 8002436:	88e0      	ldrh	r0, [r4, #6]
 8002438:	f7ff ff1c 	bl	8002274 <PinPort>
 800243c:	4607      	mov	r7, r0
 800243e:	88e0      	ldrh	r0, [r4, #6]
 8002440:	f7ff ff20 	bl	8002284 <PinBit>
 8002444:	2202      	movs	r2, #2
 8002446:	2601      	movs	r6, #1
 8002448:	4601      	mov	r1, r0
 800244a:	4613      	mov	r3, r2
 800244c:	4638      	mov	r0, r7
 800244e:	9600      	str	r6, [sp, #0]
 8002450:	9601      	str	r6, [sp, #4]
 8002452:	f7ff ff83 	bl	800235c <GPIOMode>
			GPIO_OType_OD, GPIO_PuPd_UP);
	GPIOMode(PinPort(wirex->sda), PinBit(wirex->sda), GPIO_Mode_AF, GPIO_Speed_50MHz,
 8002456:	88a0      	ldrh	r0, [r4, #4]
 8002458:	f7ff ff0c 	bl	8002274 <PinPort>
 800245c:	4607      	mov	r7, r0
 800245e:	88a0      	ldrh	r0, [r4, #4]
 8002460:	f7ff ff10 	bl	8002284 <PinBit>
 8002464:	2202      	movs	r2, #2
 8002466:	4613      	mov	r3, r2
 8002468:	4601      	mov	r1, r0
 800246a:	4638      	mov	r0, r7
 800246c:	9600      	str	r6, [sp, #0]
 800246e:	9601      	str	r6, [sp, #4]
 8002470:	f7ff ff74 	bl	800235c <GPIOMode>
			GPIO_OType_OD, GPIO_PuPd_UP);

	/* Configure I2C pins: SCL and SDA */
	GPIO_PinAFConfig(PinPort(wirex->scl), PinSource(wirex->scl), GPIO_AF_I2C1 );
 8002474:	88e0      	ldrh	r0, [r4, #6]
 8002476:	f7ff fefd 	bl	8002274 <PinPort>
 800247a:	4606      	mov	r6, r0
 800247c:	88e0      	ldrh	r0, [r4, #6]
 800247e:	f7ff ff08 	bl	8002292 <PinSource>
 8002482:	2204      	movs	r2, #4
 8002484:	4601      	mov	r1, r0
 8002486:	4630      	mov	r0, r6
 8002488:	f7fd ffcc 	bl	8000424 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(PinPort(wirex->sda), PinSource(wirex->sda), GPIO_AF_I2C1 );
 800248c:	88a0      	ldrh	r0, [r4, #4]
 800248e:	f7ff fef1 	bl	8002274 <PinPort>
 8002492:	4606      	mov	r6, r0
 8002494:	88a0      	ldrh	r0, [r4, #4]
 8002496:	f7ff fefc 	bl	8002292 <PinSource>
 800249a:	2204      	movs	r2, #4
 800249c:	4601      	mov	r1, r0
 800249e:	4630      	mov	r0, r6
 80024a0:	f7fd ffc0 	bl	8000424 <GPIO_PinAFConfig>

	//#if defined (REMAP_I2C1)
//Remap_I2C1_Configuration();
//#endif
	switch (clkspeed) {
 80024a4:	4b14      	ldr	r3, [pc, #80]	; (80024f8 <i2c_begin+0xe4>)
 80024a6:	429d      	cmp	r5, r3
 80024a8:	d004      	beq.n	80024b4 <i2c_begin+0xa0>
 80024aa:	4a14      	ldr	r2, [pc, #80]	; (80024fc <i2c_begin+0xe8>)
	case 100000:
	case 400000:
		break;
	default:
		clkspeed = 100000;
 80024ac:	4295      	cmp	r5, r2
 80024ae:	bf0c      	ite	eq
 80024b0:	4615      	moveq	r5, r2
 80024b2:	461d      	movne	r5, r3
		break;
	}
	/* I2C configuration */
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 80024b4:	2300      	movs	r3, #0
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
	I2C_InitStructure.I2C_ClockSpeed = clkspeed;
 80024b6:	a906      	add	r1, sp, #24
	default:
		clkspeed = 100000;
		break;
	}
	/* I2C configuration */
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 80024b8:	461e      	mov	r6, r3
 80024ba:	f8ad 300c 	strh.w	r3, [sp, #12]
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
 80024be:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 80024c2:	f8ad 300e 	strh.w	r3, [sp, #14]
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 80024c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024ca:	f8ad 3012 	strh.w	r3, [sp, #18]
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
	I2C_InitStructure.I2C_ClockSpeed = clkspeed;
 80024ce:	f841 5d10 	str.w	r5, [r1, #-16]!
	}
	/* I2C configuration */
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 80024d2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
	I2C_InitStructure.I2C_ClockSpeed = clkspeed;

	/* Apply I2C configuration after enabling it */
	I2C_Init(wirex->I2Cx, &I2C_InitStructure);
 80024d6:	6820      	ldr	r0, [r4, #0]
	}
	/* I2C configuration */
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 80024d8:	f8ad 3014 	strh.w	r3, [sp, #20]
	I2C_InitStructure.I2C_ClockSpeed = clkspeed;

	/* Apply I2C configuration after enabling it */
	I2C_Init(wirex->I2Cx, &I2C_InitStructure);
 80024dc:	f7fd ffe6 	bl	80004ac <I2C_Init>
	/* I2C Peripheral Enable */
	I2C_Cmd(wirex->I2Cx, ENABLE);
 80024e0:	6820      	ldr	r0, [r4, #0]
 80024e2:	2101      	movs	r1, #1
 80024e4:	f7fe f856 	bl	8000594 <I2C_Cmd>

	wirex->status = NOT_READY;
 80024e8:	20ff      	movs	r0, #255	; 0xff
 80024ea:	7260      	strb	r0, [r4, #9]
	wirex->mode = I2C_MODE_NOTDEFINED;
 80024ec:	72a6      	strb	r6, [r4, #10]

	return true;
}
 80024ee:	b007      	add	sp, #28
 80024f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024f2:	bf00      	nop
 80024f4:	40005400 	.word	0x40005400
 80024f8:	000186a0 	.word	0x000186a0
 80024fc:	00061a80 	.word	0x00061a80

08002500 <i2c_start>:
}

boolean i2c_start(I2CBus * wirex, uint8_t addr) {
	uint16_t wc;
	//
	wirex->status = NOT_READY;
 8002500:	23ff      	movs	r3, #255	; 0xff
	wirex->mode = I2C_MODE_NOTDEFINED;

	return true;
}

boolean i2c_start(I2CBus * wirex, uint8_t addr) {
 8002502:	b570      	push	{r4, r5, r6, lr}
 8002504:	4604      	mov	r4, r0
 8002506:	460e      	mov	r6, r1
	uint16_t wc;
	//
	wirex->status = NOT_READY;
 8002508:	7243      	strb	r3, [r0, #9]
	for(wc = 5; I2C_GetFlagStatus(wirex->I2Cx, I2C_FLAG_BUSY ); wc--) {
 800250a:	2506      	movs	r5, #6
 800250c:	e007      	b.n	800251e <i2c_start+0x1e>
 800250e:	3d01      	subs	r5, #1
 8002510:	b2ad      	uxth	r5, r5
		if (wc == 0)
 8002512:	2d00      	cmp	r5, #0
 8002514:	d03a      	beq.n	800258c <i2c_start+0x8c>
			return false;
		delay_us(667);
 8002516:	f240 209b 	movw	r0, #667	; 0x29b
 800251a:	f7ff fe7f 	bl	800221c <delay_us>

boolean i2c_start(I2CBus * wirex, uint8_t addr) {
	uint16_t wc;
	//
	wirex->status = NOT_READY;
	for(wc = 5; I2C_GetFlagStatus(wirex->I2Cx, I2C_FLAG_BUSY ); wc--) {
 800251e:	6820      	ldr	r0, [r4, #0]
 8002520:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8002524:	f7fe f94e 	bl	80007c4 <I2C_GetFlagStatus>
 8002528:	2800      	cmp	r0, #0
 800252a:	d1f0      	bne.n	800250e <i2c_start+0xe>
		if (wc == 0)
			return false;
		delay_us(667);
	}
	wirex->status = READY;
 800252c:	7260      	strb	r0, [r4, #9]

	/* Send STRAT condition */
	I2C_GenerateSTART(wirex->I2Cx, ENABLE);
 800252e:	2101      	movs	r1, #1
 8002530:	6820      	ldr	r0, [r4, #0]
 8002532:	f7fe f83b 	bl	80005ac <I2C_GenerateSTART>
	/* Test on EV5 and clear it */
	for (wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_MODE_SELECT ); wc--) {
 8002536:	2506      	movs	r5, #6
 8002538:	e006      	b.n	8002548 <i2c_start+0x48>
 800253a:	3d01      	subs	r5, #1
 800253c:	b2ad      	uxth	r5, r5
		if (wc == 0)
 800253e:	b32d      	cbz	r5, 800258c <i2c_start+0x8c>
			return false;
		delay_us(667);
 8002540:	f240 209b 	movw	r0, #667	; 0x29b
 8002544:	f7ff fe6a 	bl	800221c <delay_us>
	wirex->status = READY;

	/* Send STRAT condition */
	I2C_GenerateSTART(wirex->I2Cx, ENABLE);
	/* Test on EV5 and clear it */
	for (wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_MODE_SELECT ); wc--) {
 8002548:	6820      	ldr	r0, [r4, #0]
 800254a:	4911      	ldr	r1, [pc, #68]	; (8002590 <i2c_start+0x90>)
 800254c:	f7fe f925 	bl	800079a <I2C_CheckEvent>
 8002550:	2800      	cmp	r0, #0
 8002552:	d0f2      	beq.n	800253a <i2c_start+0x3a>
		if (wc == 0)
			return false;
		delay_us(667);
	}
	wirex->status = START_ISSUED;
 8002554:	2301      	movs	r3, #1

	/* Send address for write */
	I2C_Send7bitAddress(wirex->I2Cx, addr << 1, I2C_Direction_Transmitter);
 8002556:	fa16 f103 	lsls.w	r1, r6, r3
	for (wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_MODE_SELECT ); wc--) {
		if (wc == 0)
			return false;
		delay_us(667);
	}
	wirex->status = START_ISSUED;
 800255a:	7263      	strb	r3, [r4, #9]

	/* Send address for write */
	I2C_Send7bitAddress(wirex->I2Cx, addr << 1, I2C_Direction_Transmitter);
 800255c:	6820      	ldr	r0, [r4, #0]
 800255e:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 8002562:	2200      	movs	r2, #0
 8002564:	f7fe f83a 	bl	80005dc <I2C_Send7bitAddress>
 8002568:	2506      	movs	r5, #6
 800256a:	e006      	b.n	800257a <i2c_start+0x7a>
 800256c:	3d01      	subs	r5, #1
 800256e:	b2ad      	uxth	r5, r5
	/* Test on EV6 and clear it */
	for (wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED ); wc--) {
		if (wc == 0)
 8002570:	b165      	cbz	r5, 800258c <i2c_start+0x8c>
			return false;
		delay_us(667);
 8002572:	f240 209b 	movw	r0, #667	; 0x29b
 8002576:	f7ff fe51 	bl	800221c <delay_us>
	wirex->status = START_ISSUED;

	/* Send address for write */
	I2C_Send7bitAddress(wirex->I2Cx, addr << 1, I2C_Direction_Transmitter);
	/* Test on EV6 and clear it */
	for (wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED ); wc--) {
 800257a:	6820      	ldr	r0, [r4, #0]
 800257c:	4905      	ldr	r1, [pc, #20]	; (8002594 <i2c_start+0x94>)
 800257e:	f7fe f90c 	bl	800079a <I2C_CheckEvent>
 8002582:	2800      	cmp	r0, #0
 8002584:	d0f2      	beq.n	800256c <i2c_start+0x6c>
		if (wc == 0)
			return false;
		delay_us(667);
	}
	wirex->status = DST_ADDRESS_SENT;
 8002586:	2302      	movs	r3, #2
 8002588:	7263      	strb	r3, [r4, #9]
	return true;
 800258a:	25ff      	movs	r5, #255	; 0xff

}
 800258c:	4628      	mov	r0, r5
 800258e:	bd70      	pop	{r4, r5, r6, pc}
 8002590:	00030001 	.word	0x00030001
 8002594:	00070082 	.word	0x00070082

08002598 <i2c_receive>:
	wirex->mode = I2C_MODE_NOTDEFINED;

	return true;
}

boolean i2c_receive(I2CBus * wirex, uint8_t addr, uint8_t req, uint8_t * recv, uint16_t lim) {
 8002598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800259c:	461e      	mov	r6, r3
	uint16_t i;
	uint16_t wc;

	wirex->mode = I2C_MODE_MASTERRECEIVER;
 800259e:	2302      	movs	r3, #2
 80025a0:	7283      	strb	r3, [r0, #10]
	wirex->mode = I2C_MODE_NOTDEFINED;

	return true;
}

boolean i2c_receive(I2CBus * wirex, uint8_t addr, uint8_t req, uint8_t * recv, uint16_t lim) {
 80025a2:	4604      	mov	r4, r0
 80025a4:	460d      	mov	r5, r1
 80025a6:	4690      	mov	r8, r2
 80025a8:	f8bd 7020 	ldrh.w	r7, [sp, #32]
	uint16_t i;
	uint16_t wc;

	wirex->mode = I2C_MODE_MASTERRECEIVER;
	//
	if ( !i2c_start(wirex, addr) )
 80025ac:	f7ff ffa8 	bl	8002500 <i2c_start>
 80025b0:	2800      	cmp	r0, #0
 80025b2:	f000 809e 	beq.w	80026f2 <i2c_receive+0x15a>
		return false;

	/* Send the EEPROM's internal address to read from: MSB of the address first */
	I2C_SendData(wirex->I2Cx, req);
 80025b6:	4641      	mov	r1, r8
 80025b8:	6820      	ldr	r0, [r4, #0]
 80025ba:	f7fe f892 	bl	80006e2 <I2C_SendData>
	wirex->status = BYTE_TRANSMITTING;
 80025be:	2304      	movs	r3, #4
 80025c0:	7263      	strb	r3, [r4, #9]
	/* Test on EV8 and clear it */

	for (wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED ); wc--) {
 80025c2:	f04f 0806 	mov.w	r8, #6
 80025c6:	e00b      	b.n	80025e0 <i2c_receive+0x48>
 80025c8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80025cc:	fa1f f888 	uxth.w	r8, r8
		if (wc == 0)
 80025d0:	f1b8 0f00 	cmp.w	r8, #0
 80025d4:	f000 808f 	beq.w	80026f6 <i2c_receive+0x15e>
			return false;
		delay_us(667);
 80025d8:	f240 209b 	movw	r0, #667	; 0x29b
 80025dc:	f7ff fe1e 	bl	800221c <delay_us>
	/* Send the EEPROM's internal address to read from: MSB of the address first */
	I2C_SendData(wirex->I2Cx, req);
	wirex->status = BYTE_TRANSMITTING;
	/* Test on EV8 and clear it */

	for (wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED ); wc--) {
 80025e0:	6820      	ldr	r0, [r4, #0]
 80025e2:	4947      	ldr	r1, [pc, #284]	; (8002700 <i2c_receive+0x168>)
 80025e4:	f7fe f8d9 	bl	800079a <I2C_CheckEvent>
 80025e8:	2800      	cmp	r0, #0
 80025ea:	d0ed      	beq.n	80025c8 <i2c_receive+0x30>
		if (wc == 0)
			return false;
		delay_us(667);
	}
	wirex->status = TRANSMISSION_COMPLETED;
 80025ec:	f04f 0806 	mov.w	r8, #6
 80025f0:	f884 8009 	strb.w	r8, [r4, #9]

	/* Send STRAT condition a second time */
	I2C_GenerateSTART(wirex->I2Cx, ENABLE);
 80025f4:	6820      	ldr	r0, [r4, #0]
 80025f6:	2101      	movs	r1, #1
 80025f8:	f7fd ffd8 	bl	80005ac <I2C_GenerateSTART>
	/* Test on EV5 and clear it */
	for (wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_MODE_SELECT ); wc--) {
 80025fc:	e00a      	b.n	8002614 <i2c_receive+0x7c>
 80025fe:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8002602:	fa1f f888 	uxth.w	r8, r8
		if (wc == 0)
 8002606:	f1b8 0f00 	cmp.w	r8, #0
 800260a:	d074      	beq.n	80026f6 <i2c_receive+0x15e>
			return false;
		delay_us(667);
 800260c:	f240 209b 	movw	r0, #667	; 0x29b
 8002610:	f7ff fe04 	bl	800221c <delay_us>
	wirex->status = TRANSMISSION_COMPLETED;

	/* Send STRAT condition a second time */
	I2C_GenerateSTART(wirex->I2Cx, ENABLE);
	/* Test on EV5 and clear it */
	for (wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_MODE_SELECT ); wc--) {
 8002614:	6820      	ldr	r0, [r4, #0]
 8002616:	493b      	ldr	r1, [pc, #236]	; (8002704 <i2c_receive+0x16c>)
 8002618:	f7fe f8bf 	bl	800079a <I2C_CheckEvent>
 800261c:	2800      	cmp	r0, #0
 800261e:	d0ee      	beq.n	80025fe <i2c_receive+0x66>
		if (wc == 0)
			return false;
		delay_us(667);
	}
	wirex->status = RESTART_ISSUED;
 8002620:	2307      	movs	r3, #7

	/* Send EEPROM address for read */
	I2C_Send7bitAddress(wirex->I2Cx, addr << 1, I2C_Direction_Receiver );
 8002622:	0069      	lsls	r1, r5, #1
	for (wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_MODE_SELECT ); wc--) {
		if (wc == 0)
			return false;
		delay_us(667);
	}
	wirex->status = RESTART_ISSUED;
 8002624:	7263      	strb	r3, [r4, #9]

	/* Send EEPROM address for read */
	I2C_Send7bitAddress(wirex->I2Cx, addr << 1, I2C_Direction_Receiver );
 8002626:	6820      	ldr	r0, [r4, #0]
 8002628:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 800262c:	2201      	movs	r2, #1
 800262e:	f7fd ffd5 	bl	80005dc <I2C_Send7bitAddress>
	/* Test on EV6 and clear it */
	for (wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED ); wc--) {
 8002632:	2506      	movs	r5, #6
 8002634:	e007      	b.n	8002646 <i2c_receive+0xae>
 8002636:	3d01      	subs	r5, #1
 8002638:	b2ad      	uxth	r5, r5
		if (wc == 0)
 800263a:	2d00      	cmp	r5, #0
 800263c:	d05c      	beq.n	80026f8 <i2c_receive+0x160>
			return false;
		delay_us(667);
 800263e:	f240 209b 	movw	r0, #667	; 0x29b
 8002642:	f7ff fdeb 	bl	800221c <delay_us>
	wirex->status = RESTART_ISSUED;

	/* Send EEPROM address for read */
	I2C_Send7bitAddress(wirex->I2Cx, addr << 1, I2C_Direction_Receiver );
	/* Test on EV6 and clear it */
	for (wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED ); wc--) {
 8002646:	6820      	ldr	r0, [r4, #0]
 8002648:	492f      	ldr	r1, [pc, #188]	; (8002708 <i2c_receive+0x170>)
 800264a:	f7fe f8a6 	bl	800079a <I2C_CheckEvent>
 800264e:	2800      	cmp	r0, #0
 8002650:	d0f1      	beq.n	8002636 <i2c_receive+0x9e>
		if (wc == 0)
			return false;
		delay_us(667);
	}
	wirex->status = SRC_ADDRESS_SENT;
 8002652:	2303      	movs	r3, #3
 8002654:	7263      	strb	r3, [r4, #9]
	for (i = 1; i < lim; i++) {
 8002656:	f04f 0801 	mov.w	r8, #1
		wirex->status = RECEIVE_BYTE_READY;
 800265a:	f04f 0908 	mov.w	r9, #8
		if (wc == 0)
			return false;
		delay_us(667);
	}
	wirex->status = SRC_ADDRESS_SENT;
	for (i = 1; i < lim; i++) {
 800265e:	e01c      	b.n	800269a <i2c_receive+0x102>
		wirex->status = RECEIVE_BYTE_READY;
 8002660:	f884 9009 	strb.w	r9, [r4, #9]
		for(wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED ); wc--) {
 8002664:	2506      	movs	r5, #6
 8002666:	e007      	b.n	8002678 <i2c_receive+0xe0>
 8002668:	3d01      	subs	r5, #1
 800266a:	b2ad      	uxth	r5, r5
			if (wc == 0)
 800266c:	2d00      	cmp	r5, #0
 800266e:	d043      	beq.n	80026f8 <i2c_receive+0x160>
				return false;
			delay_us(667);
 8002670:	f240 209b 	movw	r0, #667	; 0x29b
 8002674:	f7ff fdd2 	bl	800221c <delay_us>
		delay_us(667);
	}
	wirex->status = SRC_ADDRESS_SENT;
	for (i = 1; i < lim; i++) {
		wirex->status = RECEIVE_BYTE_READY;
		for(wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED ); wc--) {
 8002678:	6820      	ldr	r0, [r4, #0]
 800267a:	4924      	ldr	r1, [pc, #144]	; (800270c <i2c_receive+0x174>)
 800267c:	f7fe f88d 	bl	800079a <I2C_CheckEvent>
 8002680:	2800      	cmp	r0, #0
 8002682:	d0f1      	beq.n	8002668 <i2c_receive+0xd0>
				return false;
			delay_us(667);

		}
		/* Read a byte from the EEPROM */
		*recv++ = I2C_ReceiveData(wirex->I2Cx );
 8002684:	6820      	ldr	r0, [r4, #0]
 8002686:	f7fe f82e 	bl	80006e6 <I2C_ReceiveData>
		if (wc == 0)
			return false;
		delay_us(667);
	}
	wirex->status = SRC_ADDRESS_SENT;
	for (i = 1; i < lim; i++) {
 800268a:	f108 0801 	add.w	r8, r8, #1
			delay_us(667);

		}
		/* Read a byte from the EEPROM */
		*recv++ = I2C_ReceiveData(wirex->I2Cx );
		wirex->status = BYTE_RECEIVED;
 800268e:	2309      	movs	r3, #9
				return false;
			delay_us(667);

		}
		/* Read a byte from the EEPROM */
		*recv++ = I2C_ReceiveData(wirex->I2Cx );
 8002690:	f806 0b01 	strb.w	r0, [r6], #1
		if (wc == 0)
			return false;
		delay_us(667);
	}
	wirex->status = SRC_ADDRESS_SENT;
	for (i = 1; i < lim; i++) {
 8002694:	fa1f f888 	uxth.w	r8, r8
			delay_us(667);

		}
		/* Read a byte from the EEPROM */
		*recv++ = I2C_ReceiveData(wirex->I2Cx );
		wirex->status = BYTE_RECEIVED;
 8002698:	7263      	strb	r3, [r4, #9]
		if (wc == 0)
			return false;
		delay_us(667);
	}
	wirex->status = SRC_ADDRESS_SENT;
	for (i = 1; i < lim; i++) {
 800269a:	45b8      	cmp	r8, r7
 800269c:	d3e0      	bcc.n	8002660 <i2c_receive+0xc8>
		}
		/* Read a byte from the EEPROM */
		*recv++ = I2C_ReceiveData(wirex->I2Cx );
		wirex->status = BYTE_RECEIVED;
	}
	wirex->status = BEFORELAST_BYTE_RECEIVED;
 800269e:	230a      	movs	r3, #10
 80026a0:	7263      	strb	r3, [r4, #9]

	/* Disable Acknowledgement */
	I2C_AcknowledgeConfig(wirex->I2Cx, DISABLE);
 80026a2:	6820      	ldr	r0, [r4, #0]
 80026a4:	2100      	movs	r1, #0
 80026a6:	f7fd ffa1 	bl	80005ec <I2C_AcknowledgeConfig>
	/* Send STOP Condition */
	I2C_GenerateSTOP(wirex->I2Cx, ENABLE);
 80026aa:	6820      	ldr	r0, [r4, #0]
 80026ac:	2101      	movs	r1, #1
 80026ae:	f7fd ff89 	bl	80005c4 <I2C_GenerateSTOP>
	wirex->status = LAST_BYTE_READY;
 80026b2:	230b      	movs	r3, #11
 80026b4:	7263      	strb	r3, [r4, #9]

	for(wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED ); wc--) {
 80026b6:	2506      	movs	r5, #6
 80026b8:	e006      	b.n	80026c8 <i2c_receive+0x130>
 80026ba:	3d01      	subs	r5, #1
 80026bc:	b2ad      	uxth	r5, r5
		if (wc == 0)
 80026be:	b1dd      	cbz	r5, 80026f8 <i2c_receive+0x160>
			return false;
		delay_us(667);
 80026c0:	f240 209b 	movw	r0, #667	; 0x29b
 80026c4:	f7ff fdaa 	bl	800221c <delay_us>
	I2C_AcknowledgeConfig(wirex->I2Cx, DISABLE);
	/* Send STOP Condition */
	I2C_GenerateSTOP(wirex->I2Cx, ENABLE);
	wirex->status = LAST_BYTE_READY;

	for(wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED ); wc--) {
 80026c8:	6820      	ldr	r0, [r4, #0]
 80026ca:	4910      	ldr	r1, [pc, #64]	; (800270c <i2c_receive+0x174>)
 80026cc:	f7fe f865 	bl	800079a <I2C_CheckEvent>
 80026d0:	2800      	cmp	r0, #0
 80026d2:	d0f2      	beq.n	80026ba <i2c_receive+0x122>
		if (wc == 0)
			return false;
		delay_us(667);
	}
	/* Read a byte from the EEPROM */
	*recv = I2C_ReceiveData(wirex->I2Cx );
 80026d4:	6820      	ldr	r0, [r4, #0]
 80026d6:	f7fe f806 	bl	80006e6 <I2C_ReceiveData>
	wirex->status = RECEIVE_BYTE_COMPLETED;
 80026da:	230c      	movs	r3, #12
		if (wc == 0)
			return false;
		delay_us(667);
	}
	/* Read a byte from the EEPROM */
	*recv = I2C_ReceiveData(wirex->I2Cx );
 80026dc:	7030      	strb	r0, [r6, #0]
	wirex->status = RECEIVE_BYTE_COMPLETED;

	/* Enable Acknowledgement to be ready for another reception */
	I2C_AcknowledgeConfig(wirex->I2Cx, ENABLE);
 80026de:	6820      	ldr	r0, [r4, #0]
			return false;
		delay_us(667);
	}
	/* Read a byte from the EEPROM */
	*recv = I2C_ReceiveData(wirex->I2Cx );
	wirex->status = RECEIVE_BYTE_COMPLETED;
 80026e0:	7263      	strb	r3, [r4, #9]

	/* Enable Acknowledgement to be ready for another reception */
	I2C_AcknowledgeConfig(wirex->I2Cx, ENABLE);
 80026e2:	2101      	movs	r1, #1
 80026e4:	f7fd ff82 	bl	80005ec <I2C_AcknowledgeConfig>
	wirex->status = NOT_READY;
 80026e8:	25ff      	movs	r5, #255	; 0xff
	wirex->mode = I2C_MODE_NOTDEFINED;
 80026ea:	2300      	movs	r3, #0
	*recv = I2C_ReceiveData(wirex->I2Cx );
	wirex->status = RECEIVE_BYTE_COMPLETED;

	/* Enable Acknowledgement to be ready for another reception */
	I2C_AcknowledgeConfig(wirex->I2Cx, ENABLE);
	wirex->status = NOT_READY;
 80026ec:	7265      	strb	r5, [r4, #9]
	wirex->mode = I2C_MODE_NOTDEFINED;
 80026ee:	72a3      	strb	r3, [r4, #10]

	return true;
 80026f0:	e002      	b.n	80026f8 <i2c_receive+0x160>
	uint16_t wc;

	wirex->mode = I2C_MODE_MASTERRECEIVER;
	//
	if ( !i2c_start(wirex, addr) )
		return false;
 80026f2:	4605      	mov	r5, r0
 80026f4:	e000      	b.n	80026f8 <i2c_receive+0x160>
	/* Send STRAT condition a second time */
	I2C_GenerateSTART(wirex->I2Cx, ENABLE);
	/* Test on EV5 and clear it */
	for (wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_MODE_SELECT ); wc--) {
		if (wc == 0)
			return false;
 80026f6:	4645      	mov	r5, r8
	I2C_AcknowledgeConfig(wirex->I2Cx, ENABLE);
	wirex->status = NOT_READY;
	wirex->mode = I2C_MODE_NOTDEFINED;

	return true;
}
 80026f8:	4628      	mov	r0, r5
 80026fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80026fe:	bf00      	nop
 8002700:	00070084 	.word	0x00070084
 8002704:	00030001 	.word	0x00030001
 8002708:	00030002 	.word	0x00030002
 800270c:	00030040 	.word	0x00030040

08002710 <i2c_transmit>:
	wirex->mode = I2C_MODE_NOTDEFINED;

	return true;
}

boolean i2c_transmit(I2CBus * wirex, uint8_t addr, uint8_t * data, uint16_t length) {
 8002710:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002714:	4699      	mov	r9, r3
	uint16_t i;
	uint16_t wc;

	wirex->mode = I2C_MODE_MASTERTRANSMITTER;
 8002716:	2301      	movs	r3, #1
 8002718:	7283      	strb	r3, [r0, #10]
	wirex->mode = I2C_MODE_NOTDEFINED;

	return true;
}

boolean i2c_transmit(I2CBus * wirex, uint8_t addr, uint8_t * data, uint16_t length) {
 800271a:	4604      	mov	r4, r0
 800271c:	4615      	mov	r5, r2
	uint16_t i;
	uint16_t wc;

	wirex->mode = I2C_MODE_MASTERTRANSMITTER;
	//
	if ( !i2c_start(wirex, addr) )
 800271e:	f7ff feef 	bl	8002500 <i2c_start>
 8002722:	b358      	cbz	r0, 800277c <i2c_transmit+0x6c>
 8002724:	2700      	movs	r7, #0
		return false;

	for (i=0; i<length; i++ ) {
		I2C_SendData(wirex->I2Cx, data[i]);
		wirex->status = BYTE_TRANSMITTING;
 8002726:	f04f 0804 	mov.w	r8, #4
 800272a:	e017      	b.n	800275c <i2c_transmit+0x4c>
	//
	if ( !i2c_start(wirex, addr) )
		return false;

	for (i=0; i<length; i++ ) {
		I2C_SendData(wirex->I2Cx, data[i]);
 800272c:	6820      	ldr	r0, [r4, #0]
 800272e:	5de9      	ldrb	r1, [r5, r7]
 8002730:	f7fd ffd7 	bl	80006e2 <I2C_SendData>
		wirex->status = BYTE_TRANSMITTING;
		// Test on EV8 and clear it
		for(wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED); wc--) {
 8002734:	2606      	movs	r6, #6
	if ( !i2c_start(wirex, addr) )
		return false;

	for (i=0; i<length; i++ ) {
		I2C_SendData(wirex->I2Cx, data[i]);
		wirex->status = BYTE_TRANSMITTING;
 8002736:	f884 8009 	strb.w	r8, [r4, #9]
		// Test on EV8 and clear it
		for(wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED); wc--) {
 800273a:	e006      	b.n	800274a <i2c_transmit+0x3a>
 800273c:	3e01      	subs	r6, #1
 800273e:	b2b6      	uxth	r6, r6
			if (wc == 0)
 8002740:	b1de      	cbz	r6, 800277a <i2c_transmit+0x6a>
				return false;
			delay_us(667);
 8002742:	f240 209b 	movw	r0, #667	; 0x29b
 8002746:	f7ff fd69 	bl	800221c <delay_us>

	for (i=0; i<length; i++ ) {
		I2C_SendData(wirex->I2Cx, data[i]);
		wirex->status = BYTE_TRANSMITTING;
		// Test on EV8 and clear it
		for(wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED); wc--) {
 800274a:	6820      	ldr	r0, [r4, #0]
 800274c:	490c      	ldr	r1, [pc, #48]	; (8002780 <i2c_transmit+0x70>)
 800274e:	f7fe f824 	bl	800079a <I2C_CheckEvent>
 8002752:	2800      	cmp	r0, #0
 8002754:	d0f2      	beq.n	800273c <i2c_transmit+0x2c>
			if (wc == 0)
				return false;
			delay_us(667);
		}
		wirex->status = BYTE_TRANSMITTED;
 8002756:	2305      	movs	r3, #5
 8002758:	7263      	strb	r3, [r4, #9]
 800275a:	3701      	adds	r7, #1
	wirex->mode = I2C_MODE_MASTERTRANSMITTER;
	//
	if ( !i2c_start(wirex, addr) )
		return false;

	for (i=0; i<length; i++ ) {
 800275c:	b2bb      	uxth	r3, r7
 800275e:	454b      	cmp	r3, r9
 8002760:	d3e4      	bcc.n	800272c <i2c_transmit+0x1c>
			delay_us(667);
		}
		wirex->status = BYTE_TRANSMITTED;
	}

	wirex->status = TRANSMISSION_COMPLETED;
 8002762:	2306      	movs	r3, #6
 8002764:	7263      	strb	r3, [r4, #9]

	// generate stop condition
	I2C_GenerateSTOP(wirex->I2Cx, ENABLE);
 8002766:	6820      	ldr	r0, [r4, #0]
 8002768:	2101      	movs	r1, #1
 800276a:	f7fd ff2b 	bl	80005c4 <I2C_GenerateSTOP>
	wirex->status = NOT_READY;
 800276e:	20ff      	movs	r0, #255	; 0xff
	wirex->mode = I2C_MODE_NOTDEFINED;
 8002770:	2300      	movs	r3, #0

	wirex->status = TRANSMISSION_COMPLETED;

	// generate stop condition
	I2C_GenerateSTOP(wirex->I2Cx, ENABLE);
	wirex->status = NOT_READY;
 8002772:	7260      	strb	r0, [r4, #9]
	wirex->mode = I2C_MODE_NOTDEFINED;
 8002774:	72a3      	strb	r3, [r4, #10]

	return true;
 8002776:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		I2C_SendData(wirex->I2Cx, data[i]);
		wirex->status = BYTE_TRANSMITTING;
		// Test on EV8 and clear it
		for(wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED); wc--) {
			if (wc == 0)
				return false;
 800277a:	4630      	mov	r0, r6
	I2C_GenerateSTOP(wirex->I2Cx, ENABLE);
	wirex->status = NOT_READY;
	wirex->mode = I2C_MODE_NOTDEFINED;

	return true;
}
 800277c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002780:	00070084 	.word	0x00070084

08002784 <spi_begin>:
#include "spi.h"

//SPI_TypeDef * spix[] = { SPI1, SPI2, SPI3 };

void spi_begin(SPI_TypeDef * SPIx, GPIOPin sck, GPIOPin miso, GPIOPin mosi,
		GPIOPin nss) {
 8002784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002788:	4699      	mov	r9, r3
//	GPIOPin sck, miso, mosi, nss;

	/* PCLK2 = HCLK/2 */
	//RCC_PCLK2Config(RCC_HCLK_Div2);
//	SPIx = spix[spibus];
	if (SPIx == SPI1) {
 800278a:	4b57      	ldr	r3, [pc, #348]	; (80028e8 <spi_begin+0x164>)
#include "spi.h"

//SPI_TypeDef * spix[] = { SPI1, SPI2, SPI3 };

void spi_begin(SPI_TypeDef * SPIx, GPIOPin sck, GPIOPin miso, GPIOPin mosi,
		GPIOPin nss) {
 800278c:	b08b      	sub	sp, #44	; 0x2c
//	GPIOPin sck, miso, mosi, nss;

	/* PCLK2 = HCLK/2 */
	//RCC_PCLK2Config(RCC_HCLK_Div2);
//	SPIx = spix[spibus];
	if (SPIx == SPI1) {
 800278e:	4298      	cmp	r0, r3
#include "spi.h"

//SPI_TypeDef * spix[] = { SPI1, SPI2, SPI3 };

void spi_begin(SPI_TypeDef * SPIx, GPIOPin sck, GPIOPin miso, GPIOPin mosi,
		GPIOPin nss) {
 8002790:	4682      	mov	sl, r0
 8002792:	460f      	mov	r7, r1
 8002794:	4690      	mov	r8, r2
 8002796:	f8bd b050 	ldrh.w	fp, [sp, #80]	; 0x50
//	GPIOPin sck, miso, mosi, nss;

	/* PCLK2 = HCLK/2 */
	//RCC_PCLK2Config(RCC_HCLK_Div2);
//	SPIx = spix[spibus];
	if (SPIx == SPI1) {
 800279a:	d105      	bne.n	80027a8 <spi_begin+0x24>
//	case SPI1Bus:
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
 800279c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80027a0:	2101      	movs	r1, #1
 80027a2:	f7fe f997 	bl	8000ad4 <RCC_APB2PeriphClockCmd>
 80027a6:	e007      	b.n	80027b8 <spi_begin+0x34>
//		 sck = PA5; // PB3
//		 miso = PA6; // PB4
//		 mosi = PA7; // PB5
//		 nss = PA4; // PA15
//		break;
	} else if ( SPIx == SPI2 ) {
 80027a8:	4b50      	ldr	r3, [pc, #320]	; (80028ec <spi_begin+0x168>)
 80027aa:	4298      	cmp	r0, r3
 80027ac:	d106      	bne.n	80027bc <spi_begin+0x38>
//	case SPI2Bus:
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE);
 80027ae:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80027b2:	2101      	movs	r1, #1
 80027b4:	f7fe f982 	bl	8000abc <RCC_APB1PeriphClockCmd>
		af = GPIO_AF_SPI2;
 80027b8:	2605      	movs	r6, #5
 80027ba:	e005      	b.n	80027c8 <spi_begin+0x44>
		// PB12, 13, 14, 15
//		break;
	} else {
//	case SPI3Bus:
//	default:
		RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 80027bc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80027c0:	2101      	movs	r1, #1
 80027c2:	f7fe f9b7 	bl	8000b34 <RCC_APB1PeriphResetCmd>
		af = GPIO_AF_SPI3;
 80027c6:	2606      	movs	r6, #6
//		 mosi = PB5;
//		 nss = PA15; // PA4;
//		break;
	}

	GPIOMode(PinPort(sck), PinBit(sck), GPIO_Mode_AF, GPIO_Speed_25MHz,
 80027c8:	4638      	mov	r0, r7
 80027ca:	f7ff fd53 	bl	8002274 <PinPort>
 80027ce:	4603      	mov	r3, r0
 80027d0:	4638      	mov	r0, r7
 80027d2:	9303      	str	r3, [sp, #12]
 80027d4:	f7ff fd56 	bl	8002284 <PinBit>
 80027d8:	9b03      	ldr	r3, [sp, #12]
 80027da:	2401      	movs	r4, #1
 80027dc:	2500      	movs	r5, #0
 80027de:	4601      	mov	r1, r0
 80027e0:	2202      	movs	r2, #2
 80027e2:	4618      	mov	r0, r3
 80027e4:	4623      	mov	r3, r4
 80027e6:	9500      	str	r5, [sp, #0]
 80027e8:	9401      	str	r4, [sp, #4]
 80027ea:	f7ff fdb7 	bl	800235c <GPIOMode>
			GPIO_OType_PP, GPIO_PuPd_UP);
	GPIOMode(PinPort(miso), PinBit(miso), GPIO_Mode_AF, GPIO_Speed_25MHz,
 80027ee:	4640      	mov	r0, r8
 80027f0:	f7ff fd40 	bl	8002274 <PinPort>
 80027f4:	4603      	mov	r3, r0
 80027f6:	4640      	mov	r0, r8
 80027f8:	9303      	str	r3, [sp, #12]
 80027fa:	f7ff fd43 	bl	8002284 <PinBit>
 80027fe:	9b03      	ldr	r3, [sp, #12]
 8002800:	9500      	str	r5, [sp, #0]
 8002802:	4601      	mov	r1, r0
 8002804:	2202      	movs	r2, #2
 8002806:	4618      	mov	r0, r3
 8002808:	4623      	mov	r3, r4
 800280a:	9401      	str	r4, [sp, #4]
 800280c:	f7ff fda6 	bl	800235c <GPIOMode>
			GPIO_OType_PP, GPIO_PuPd_UP);
	GPIOMode(PinPort(mosi), PinBit(mosi), GPIO_Mode_AF, GPIO_Speed_25MHz,
 8002810:	4648      	mov	r0, r9
 8002812:	f7ff fd2f 	bl	8002274 <PinPort>
 8002816:	4603      	mov	r3, r0
 8002818:	4648      	mov	r0, r9
 800281a:	9303      	str	r3, [sp, #12]
 800281c:	f7ff fd32 	bl	8002284 <PinBit>
 8002820:	9b03      	ldr	r3, [sp, #12]
 8002822:	9500      	str	r5, [sp, #0]
 8002824:	4601      	mov	r1, r0
 8002826:	2202      	movs	r2, #2
 8002828:	4618      	mov	r0, r3
 800282a:	4623      	mov	r3, r4
 800282c:	9401      	str	r4, [sp, #4]
 800282e:	f7ff fd95 	bl	800235c <GPIOMode>
			GPIO_OType_PP, GPIO_PuPd_UP);
	GPIO_PinAFConfig(PinPort(sck), PinSource(sck), af);
 8002832:	4638      	mov	r0, r7
 8002834:	f7ff fd1e 	bl	8002274 <PinPort>
 8002838:	4603      	mov	r3, r0
 800283a:	4638      	mov	r0, r7
 800283c:	9303      	str	r3, [sp, #12]
 800283e:	f7ff fd28 	bl	8002292 <PinSource>
 8002842:	9b03      	ldr	r3, [sp, #12]
 8002844:	4601      	mov	r1, r0
 8002846:	4632      	mov	r2, r6
 8002848:	4618      	mov	r0, r3
 800284a:	f7fd fdeb 	bl	8000424 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(PinPort(miso), PinSource(miso), af);
 800284e:	4640      	mov	r0, r8
 8002850:	f7ff fd10 	bl	8002274 <PinPort>
 8002854:	4607      	mov	r7, r0
 8002856:	4640      	mov	r0, r8
 8002858:	f7ff fd1b 	bl	8002292 <PinSource>
 800285c:	4632      	mov	r2, r6
 800285e:	4601      	mov	r1, r0
 8002860:	4638      	mov	r0, r7
 8002862:	f7fd fddf 	bl	8000424 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(PinPort(mosi), PinSource(mosi), af);
 8002866:	4648      	mov	r0, r9
 8002868:	f7ff fd04 	bl	8002274 <PinPort>
 800286c:	4607      	mov	r7, r0
 800286e:	4648      	mov	r0, r9
 8002870:	f7ff fd0f 	bl	8002292 <PinSource>
 8002874:	4632      	mov	r2, r6
 8002876:	4601      	mov	r1, r0
 8002878:	4638      	mov	r0, r7
 800287a:	f7fd fdd3 	bl	8000424 <GPIO_PinAFConfig>
	// nSS by software
	GPIOMode(PinPort(nss), PinBit(nss), GPIO_Mode_OUT, GPIO_Speed_25MHz,
 800287e:	4658      	mov	r0, fp
 8002880:	f7ff fcf8 	bl	8002274 <PinPort>
 8002884:	4606      	mov	r6, r0
 8002886:	4658      	mov	r0, fp
 8002888:	f7ff fcfc 	bl	8002284 <PinBit>
 800288c:	4622      	mov	r2, r4
 800288e:	4623      	mov	r3, r4
 8002890:	4601      	mov	r1, r0
 8002892:	4630      	mov	r0, r6
 8002894:	9500      	str	r5, [sp, #0]
 8002896:	9401      	str	r4, [sp, #4]
 8002898:	f7ff fd60 	bl	800235c <GPIOMode>
			GPIO_OType_PP, GPIO_PuPd_UP);
	digitalWrite(nss, HIGH);
 800289c:	4658      	mov	r0, fp
 800289e:	4621      	mov	r1, r4
 80028a0:	f7ff fd20 	bl	80022e4 <digitalWrite>
	//GPIO_PinAFConfig(PinPort(nss), PinSource(nss), af);

	SPI_InitStruct.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
	SPI_InitStruct.SPI_Mode = SPI_Mode_Master;
 80028a4:	f44f 7382 	mov.w	r3, #260	; 0x104
 80028a8:	f8ad 3016 	strh.w	r3, [sp, #22]
	SPI_InitStruct.SPI_DataSize = SPI_DataSize_8b;
	SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;
	SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
	SPI_InitStruct.SPI_NSS = SPI_NSS_Soft;
 80028ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028b0:	f8ad 301e 	strh.w	r3, [sp, #30]
	SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_8;
	SPI_InitStruct.SPI_FirstBit = SPI_FirstBit_MSB;
	SPI_InitStruct.SPI_CRCPolynomial = SPI_CRC_Rx;

	SPI_Init(SPIx, &SPI_InitStruct);
 80028b4:	4650      	mov	r0, sl
	SPI_InitStruct.SPI_Mode = SPI_Mode_Master;
	SPI_InitStruct.SPI_DataSize = SPI_DataSize_8b;
	SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;
	SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
	SPI_InitStruct.SPI_NSS = SPI_NSS_Soft;
	SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_8;
 80028b6:	2310      	movs	r3, #16
	SPI_InitStruct.SPI_FirstBit = SPI_FirstBit_MSB;
	SPI_InitStruct.SPI_CRCPolynomial = SPI_CRC_Rx;

	SPI_Init(SPIx, &SPI_InitStruct);
 80028b8:	a905      	add	r1, sp, #20
	GPIOMode(PinPort(nss), PinBit(nss), GPIO_Mode_OUT, GPIO_Speed_25MHz,
			GPIO_OType_PP, GPIO_PuPd_UP);
	digitalWrite(nss, HIGH);
	//GPIO_PinAFConfig(PinPort(nss), PinSource(nss), af);

	SPI_InitStruct.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 80028ba:	f8ad 5014 	strh.w	r5, [sp, #20]
	SPI_InitStruct.SPI_Mode = SPI_Mode_Master;
	SPI_InitStruct.SPI_DataSize = SPI_DataSize_8b;
 80028be:	f8ad 5018 	strh.w	r5, [sp, #24]
	SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;
 80028c2:	f8ad 501a 	strh.w	r5, [sp, #26]
	SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
 80028c6:	f8ad 501c 	strh.w	r5, [sp, #28]
	SPI_InitStruct.SPI_NSS = SPI_NSS_Soft;
	SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_8;
 80028ca:	f8ad 3020 	strh.w	r3, [sp, #32]
	SPI_InitStruct.SPI_FirstBit = SPI_FirstBit_MSB;
 80028ce:	f8ad 5022 	strh.w	r5, [sp, #34]	; 0x22
	SPI_InitStruct.SPI_CRCPolynomial = SPI_CRC_Rx;
 80028d2:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24

	SPI_Init(SPIx, &SPI_InitStruct);
 80028d6:	f7fe fa01 	bl	8000cdc <SPI_Init>

	SPI_Cmd(SPIx, ENABLE);
 80028da:	4650      	mov	r0, sl
 80028dc:	4621      	mov	r1, r4
 80028de:	f7fe fa98 	bl	8000e12 <SPI_Cmd>
	 *              - Enable or disable the SS output using the SPI_SSOutputCmd() function
	 *
	 *          10. To use the CRC Hardware calculation feature refer to the Peripheral
	 *              CRC hardware Calculation subsection.
	 */
}
 80028e2:	b00b      	add	sp, #44	; 0x2c
 80028e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80028e8:	40013000 	.word	0x40013000
 80028ec:	40003800 	.word	0x40003800

080028f0 <spi_transfer>:

void spi_transfer(SPI_TypeDef * SPIx, /*SPIBus spibus,*/ uint8_t * data, uint16_t nbytes) {
 80028f0:	b570      	push	{r4, r5, r6, lr}
 80028f2:	4604      	mov	r4, r0
 80028f4:	4616      	mov	r6, r2
 80028f6:	460d      	mov	r5, r1
//	SPI_TypeDef * SPIx = spix[spibus];
	uint8_t rcvdata;

	for (; nbytes; nbytes--) {
 80028f8:	e017      	b.n	800292a <spi_transfer+0x3a>
		/* Wait for SPIx Tx buffer empty */
		while (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_TXE ) == RESET)
 80028fa:	4620      	mov	r0, r4
 80028fc:	2102      	movs	r1, #2
 80028fe:	f7fe fb3f 	bl	8000f80 <SPI_I2S_GetFlagStatus>
 8002902:	2800      	cmp	r0, #0
 8002904:	d0f9      	beq.n	80028fa <spi_transfer+0xa>
			;
		SPI_I2S_SendData(SPIx, (uint16_t) *data);
 8002906:	4620      	mov	r0, r4
 8002908:	f815 1b01 	ldrb.w	r1, [r5], #1
 800290c:	f7fe fb01 	bl	8000f12 <SPI_I2S_SendData>
		/* Wait for SPIx data reception */
		while (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_RXNE ) == RESET)
 8002910:	4620      	mov	r0, r4
 8002912:	2101      	movs	r1, #1
 8002914:	f7fe fb34 	bl	8000f80 <SPI_I2S_GetFlagStatus>
 8002918:	2800      	cmp	r0, #0
 800291a:	d0f9      	beq.n	8002910 <spi_transfer+0x20>
			;
		/* Read SPIy received data */
		rcvdata = SPI_I2S_ReceiveData(SPIx);
 800291c:	4620      	mov	r0, r4
 800291e:	f7fe faf5 	bl	8000f0c <SPI_I2S_ReceiveData>

void spi_transfer(SPI_TypeDef * SPIx, /*SPIBus spibus,*/ uint8_t * data, uint16_t nbytes) {
//	SPI_TypeDef * SPIx = spix[spibus];
	uint8_t rcvdata;

	for (; nbytes; nbytes--) {
 8002922:	3e01      	subs	r6, #1
		SPI_I2S_SendData(SPIx, (uint16_t) *data);
		/* Wait for SPIx data reception */
		while (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_RXNE ) == RESET)
			;
		/* Read SPIy received data */
		rcvdata = SPI_I2S_ReceiveData(SPIx);
 8002924:	f805 0c01 	strb.w	r0, [r5, #-1]

void spi_transfer(SPI_TypeDef * SPIx, /*SPIBus spibus,*/ uint8_t * data, uint16_t nbytes) {
//	SPI_TypeDef * SPIx = spix[spibus];
	uint8_t rcvdata;

	for (; nbytes; nbytes--) {
 8002928:	b2b6      	uxth	r6, r6
 800292a:	2e00      	cmp	r6, #0
 800292c:	d1e5      	bne.n	80028fa <spi_transfer+0xa>
		/* Read SPIy received data */
		rcvdata = SPI_I2S_ReceiveData(SPIx);
		*data = rcvdata;
		data++;
	}
}
 800292e:	bd70      	pop	{r4, r5, r6, pc}

08002930 <SysTick_Handler>:
#include "systick.h"

volatile uint32_t _systick_counter;

void SysTick_Handler(void) {
	_systick_counter++; /* increment timeTicks counter */
 8002930:	4b02      	ldr	r3, [pc, #8]	; (800293c <SysTick_Handler+0xc>)
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	3201      	adds	r2, #1
 8002936:	601a      	str	r2, [r3, #0]
}
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	200009d0 	.word	0x200009d0

08002940 <SysTick_delay>:

void SysTick_delay(const uint32_t dlyTicks) {
	uint32_t currTicks = _systick_counter;
 8002940:	4b03      	ldr	r3, [pc, #12]	; (8002950 <SysTick_delay+0x10>)
 8002942:	681a      	ldr	r2, [r3, #0]

	while ((_systick_counter - currTicks) < dlyTicks)
 8002944:	6819      	ldr	r1, [r3, #0]
 8002946:	1a89      	subs	r1, r1, r2
 8002948:	4281      	cmp	r1, r0
 800294a:	d3fb      	bcc.n	8002944 <SysTick_delay+0x4>
		;
}
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	200009d0 	.word	0x200009d0

08002954 <SysTick_Start>:

void SysTick_Start(void) {
 8002954:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	RCC_ClocksTypeDef RCC_Clocks;
	  /* SysTick end of count event each 1ms */
	  RCC_GetClocksFreq(&RCC_Clocks);
 8002956:	4668      	mov	r0, sp
 8002958:	f7fe f81c 	bl	8000994 <RCC_GetClocksFreq>
	  SysTick_Config(RCC_Clocks.HCLK_Frequency / 1000);
 800295c:	9a01      	ldr	r2, [sp, #4]
 800295e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002962:	fbb2 f2f3 	udiv	r2, r2, r3
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8002966:	4b06      	ldr	r3, [pc, #24]	; (8002980 <SysTick_Start+0x2c>)
 8002968:	3a01      	subs	r2, #1
 800296a:	605a      	str	r2, [r3, #4]
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 800296c:	4a05      	ldr	r2, [pc, #20]	; (8002984 <SysTick_Start+0x30>)
 800296e:	21f0      	movs	r1, #240	; 0xf0
 8002970:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8002974:	2200      	movs	r2, #0
 8002976:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002978:	2207      	movs	r2, #7
 800297a:	601a      	str	r2, [r3, #0]
		// Handle Error
		while (1)
			;
	}
*/
}
 800297c:	b005      	add	sp, #20
 800297e:	bd00      	pop	{pc}
 8002980:	e000e010 	.word	0xe000e010
 8002984:	e000ed00 	.word	0xe000ed00

08002988 <SysTick_count>:

uint32_t SysTick_count() {
	return _systick_counter;
 8002988:	4b01      	ldr	r3, [pc, #4]	; (8002990 <SysTick_count+0x8>)
 800298a:	6818      	ldr	r0, [r3, #0]
}
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	200009d0 	.word	0x200009d0

08002994 <buffer_clear>:

Serial Serial1, Serial2, Serial3, Serial4, Serial5, Serial6;
USARTRing rxring[6], txring[6];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 8002994:	2300      	movs	r3, #0
 8002996:	f8a0 3100 	strh.w	r3, [r0, #256]	; 0x100
	r->tail = 0;
 800299a:	f8a0 3102 	strh.w	r3, [r0, #258]	; 0x102
	r->count = 0;
 800299e:	f8a0 3104 	strh.w	r3, [r0, #260]	; 0x104
}
 80029a2:	4770      	bx	lr

080029a4 <buffer_count>:

uint16_t buffer_count(USARTRing * r) {
	return r->count;
}
 80029a4:	f8b0 0104 	ldrh.w	r0, [r0, #260]	; 0x104
 80029a8:	4770      	bx	lr

080029aa <buffer_is_full>:

uint8_t buffer_is_full(USARTRing * r) {
	if ((r->head == r->tail) && (r->count > 0)) {
 80029aa:	f9b0 2100 	ldrsh.w	r2, [r0, #256]	; 0x100
 80029ae:	f9b0 3102 	ldrsh.w	r3, [r0, #258]	; 0x102
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d105      	bne.n	80029c2 <buffer_is_full+0x18>

uint16_t buffer_count(USARTRing * r) {
	return r->count;
}

uint8_t buffer_is_full(USARTRing * r) {
 80029b6:	f8b0 0104 	ldrh.w	r0, [r0, #260]	; 0x104
	if ((r->head == r->tail) && (r->count > 0)) {
		return 1;
 80029ba:	3000      	adds	r0, #0
 80029bc:	bf18      	it	ne
 80029be:	2001      	movne	r0, #1
 80029c0:	4770      	bx	lr
	}
	return 0;
 80029c2:	2000      	movs	r0, #0
}
 80029c4:	4770      	bx	lr

080029c6 <buffer_enque>:

uint16_t buffer_enque(USARTRing * r, uint16_t w) {
 80029c6:	b538      	push	{r3, r4, r5, lr}
 80029c8:	4604      	mov	r4, r0
 80029ca:	460d      	mov	r5, r1
	if (buffer_is_full(r))
 80029cc:	f7ff ffed 	bl	80029aa <buffer_is_full>
 80029d0:	b9b0      	cbnz	r0, 8002a00 <buffer_enque+0x3a>
		return 0xffff;
	r->buf[r->head++] = w;
 80029d2:	f8b4 3100 	ldrh.w	r3, [r4, #256]	; 0x100
 80029d6:	b21a      	sxth	r2, r3
 80029d8:	3301      	adds	r3, #1
 80029da:	f824 5012 	strh.w	r5, [r4, r2, lsl #1]
	r->count++;
 80029de:	f8b4 2104 	ldrh.w	r2, [r4, #260]	; 0x104
 80029e2:	3201      	adds	r2, #1
 80029e4:	f8a4 2104 	strh.w	r2, [r4, #260]	; 0x104
	r->head %= USART_BUFFER_SIZE;
 80029e8:	b21a      	sxth	r2, r3
 80029ea:	4b07      	ldr	r3, [pc, #28]	; (8002a08 <buffer_enque+0x42>)
 80029ec:	4013      	ands	r3, r2
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	da03      	bge.n	80029fa <buffer_enque+0x34>
 80029f2:	3b01      	subs	r3, #1
 80029f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80029f8:	3301      	adds	r3, #1
 80029fa:	f8a4 3100 	strh.w	r3, [r4, #256]	; 0x100
 80029fe:	e001      	b.n	8002a04 <buffer_enque+0x3e>
	return 0;
}

uint16_t buffer_enque(USARTRing * r, uint16_t w) {
	if (buffer_is_full(r))
		return 0xffff;
 8002a00:	f64f 75ff 	movw	r5, #65535	; 0xffff
	r->buf[r->head++] = w;
	r->count++;
	r->head %= USART_BUFFER_SIZE;
	return w;
}
 8002a04:	4628      	mov	r0, r5
 8002a06:	bd38      	pop	{r3, r4, r5, pc}
 8002a08:	8000007f 	.word	0x8000007f

08002a0c <buffer_deque>:
	r->tail = 0;
	r->count = 0;
}

uint16_t buffer_count(USARTRing * r) {
	return r->count;
 8002a0c:	f8b0 1104 	ldrh.w	r1, [r0, #260]	; 0x104
	r->count++;
	r->head %= USART_BUFFER_SIZE;
	return w;
}

uint16_t buffer_deque(USARTRing * r) {
 8002a10:	4602      	mov	r2, r0
	uint16_t w;
	if (buffer_count(r) == 0)
 8002a12:	b1a1      	cbz	r1, 8002a3e <buffer_deque+0x32>
		return 0xffff;
	w = r->buf[r->tail++];
 8002a14:	f8b0 3102 	ldrh.w	r3, [r0, #258]	; 0x102
	r->count--;
 8002a18:	3901      	subs	r1, #1

uint16_t buffer_deque(USARTRing * r) {
	uint16_t w;
	if (buffer_count(r) == 0)
		return 0xffff;
	w = r->buf[r->tail++];
 8002a1a:	b218      	sxth	r0, r3
 8002a1c:	3301      	adds	r3, #1
	r->count--;
 8002a1e:	f8a2 1104 	strh.w	r1, [r2, #260]	; 0x104
	r->tail %= USART_BUFFER_SIZE;
 8002a22:	b219      	sxth	r1, r3
 8002a24:	4b07      	ldr	r3, [pc, #28]	; (8002a44 <buffer_deque+0x38>)

uint16_t buffer_deque(USARTRing * r) {
	uint16_t w;
	if (buffer_count(r) == 0)
		return 0xffff;
	w = r->buf[r->tail++];
 8002a26:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
	r->count--;
	r->tail %= USART_BUFFER_SIZE;
 8002a2a:	400b      	ands	r3, r1
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	da03      	bge.n	8002a38 <buffer_deque+0x2c>
 8002a30:	3b01      	subs	r3, #1
 8002a32:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002a36:	3301      	adds	r3, #1
 8002a38:	f8a2 3102 	strh.w	r3, [r2, #258]	; 0x102
 8002a3c:	4770      	bx	lr
}

uint16_t buffer_deque(USARTRing * r) {
	uint16_t w;
	if (buffer_count(r) == 0)
		return 0xffff;
 8002a3e:	f64f 70ff 	movw	r0, #65535	; 0xffff
	w = r->buf[r->tail++];
	r->count--;
	r->tail %= USART_BUFFER_SIZE;
	return w;
}
 8002a42:	4770      	bx	lr
 8002a44:	8000007f 	.word	0x8000007f

08002a48 <buffer_peek>:

uint16_t buffer_peek(USARTRing * r) {
	if (buffer_count(r) == 0)
 8002a48:	f8b0 3104 	ldrh.w	r3, [r0, #260]	; 0x104
 8002a4c:	b123      	cbz	r3, 8002a58 <buffer_peek+0x10>
		return 0xffff;
	return r->buf[r->tail];
 8002a4e:	f9b0 3102 	ldrsh.w	r3, [r0, #258]	; 0x102
 8002a52:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8002a56:	4770      	bx	lr
	return w;
}

uint16_t buffer_peek(USARTRing * r) {
	if (buffer_count(r) == 0)
		return 0xffff;
 8002a58:	f64f 70ff 	movw	r0, #65535	; 0xffff
	return r->buf[r->tail];
}
 8002a5c:	4770      	bx	lr

08002a5e <usart_begin>:

void usart_begin(Serial * usx, GPIOPin rx, GPIOPin tx, uint32_t baud) {
 8002a5e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a62:	469a      	mov	sl, r3
	NVIC_InitTypeDef NVIC_InitStructure; // this is used to configure the NVIC (nested vector interrupt controller)
	//
	uint8_t af = GPIO_AF_USART1;
	IRQn_Type irq = USART1_IRQn;

	if (usx == &Serial1) {
 8002a64:	4b70      	ldr	r3, [pc, #448]	; (8002c28 <usart_begin+0x1ca>)
 8002a66:	4298      	cmp	r0, r3
	if (buffer_count(r) == 0)
		return 0xffff;
	return r->buf[r->tail];
}

void usart_begin(Serial * usx, GPIOPin rx, GPIOPin tx, uint32_t baud) {
 8002a68:	b089      	sub	sp, #36	; 0x24
 8002a6a:	4604      	mov	r4, r0
 8002a6c:	4688      	mov	r8, r1
 8002a6e:	4691      	mov	r9, r2
	NVIC_InitTypeDef NVIC_InitStructure; // this is used to configure the NVIC (nested vector interrupt controller)
	//
	uint8_t af = GPIO_AF_USART1;
	IRQn_Type irq = USART1_IRQn;

	if (usx == &Serial1) {
 8002a70:	d10d      	bne.n	8002a8e <usart_begin+0x30>
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 8002a72:	2010      	movs	r0, #16
 8002a74:	2101      	movs	r1, #1
 8002a76:	f7fe f82d 	bl	8000ad4 <RCC_APB2PeriphClockCmd>
		af = GPIO_AF_USART1;
		irq = USART1_IRQn;
		usx->usid = USART1Serial;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	7023      	strb	r3, [r4, #0]
		usx->USARTx = USART1;
 8002a7e:	4b6b      	ldr	r3, [pc, #428]	; (8002c2c <usart_begin+0x1ce>)
 8002a80:	6063      	str	r3, [r4, #4]
		usx->rxring = &rxring[USART1Serial];
 8002a82:	4b6b      	ldr	r3, [pc, #428]	; (8002c30 <usart_begin+0x1d2>)
 8002a84:	60a3      	str	r3, [r4, #8]
		usx->txring = &txring[USART1Serial];
 8002a86:	4b6b      	ldr	r3, [pc, #428]	; (8002c34 <usart_begin+0x1d6>)
	IRQn_Type irq = USART1_IRQn;

	if (usx == &Serial1) {
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
		af = GPIO_AF_USART1;
		irq = USART1_IRQn;
 8002a88:	2725      	movs	r7, #37	; 0x25
		usx->usid = USART1Serial;
		usx->USARTx = USART1;
		usx->rxring = &rxring[USART1Serial];
		usx->txring = &txring[USART1Serial];
 8002a8a:	60e3      	str	r3, [r4, #12]
 8002a8c:	e010      	b.n	8002ab0 <usart_begin+0x52>
	} else if (usx == &Serial2) {
 8002a8e:	4b6a      	ldr	r3, [pc, #424]	; (8002c38 <usart_begin+0x1da>)
 8002a90:	4298      	cmp	r0, r3
 8002a92:	d10f      	bne.n	8002ab4 <usart_begin+0x56>
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 8002a94:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002a98:	2101      	movs	r1, #1
 8002a9a:	f7fe f80f 	bl	8000abc <RCC_APB1PeriphClockCmd>
		af = GPIO_AF_USART2;
		irq = USART2_IRQn;
		usx->usid = USART2Serial;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	7023      	strb	r3, [r4, #0]
		usx->USARTx = USART2;
 8002aa2:	4b66      	ldr	r3, [pc, #408]	; (8002c3c <usart_begin+0x1de>)
 8002aa4:	6063      	str	r3, [r4, #4]
		usx->rxring = &rxring[USART2Serial];
 8002aa6:	4b66      	ldr	r3, [pc, #408]	; (8002c40 <usart_begin+0x1e2>)
 8002aa8:	60a3      	str	r3, [r4, #8]
		usx->txring = &txring[USART2Serial];
 8002aaa:	4b66      	ldr	r3, [pc, #408]	; (8002c44 <usart_begin+0x1e6>)
		usx->rxring = &rxring[USART1Serial];
		usx->txring = &txring[USART1Serial];
	} else if (usx == &Serial2) {
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
		af = GPIO_AF_USART2;
		irq = USART2_IRQn;
 8002aac:	2726      	movs	r7, #38	; 0x26
		usx->usid = USART2Serial;
		usx->USARTx = USART2;
		usx->rxring = &rxring[USART2Serial];
		usx->txring = &txring[USART2Serial];
 8002aae:	60e3      	str	r3, [r4, #12]
		usx->USARTx = USART1;
		usx->rxring = &rxring[USART1Serial];
		usx->txring = &txring[USART1Serial];
	} else if (usx == &Serial2) {
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
		af = GPIO_AF_USART2;
 8002ab0:	2607      	movs	r6, #7
 8002ab2:	e043      	b.n	8002b3c <usart_begin+0xde>
		irq = USART2_IRQn;
		usx->usid = USART2Serial;
		usx->USARTx = USART2;
		usx->rxring = &rxring[USART2Serial];
		usx->txring = &txring[USART2Serial];
	} else if (usx == &Serial3) {
 8002ab4:	4b64      	ldr	r3, [pc, #400]	; (8002c48 <usart_begin+0x1ea>)
 8002ab6:	4298      	cmp	r0, r3
 8002ab8:	d10e      	bne.n	8002ad8 <usart_begin+0x7a>
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
 8002aba:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002abe:	2101      	movs	r1, #1
 8002ac0:	f7fd fffc 	bl	8000abc <RCC_APB1PeriphClockCmd>
		af = GPIO_AF_USART3;
		irq = USART3_IRQn;
		usx->usid = USART3Serial;
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	7023      	strb	r3, [r4, #0]
		usx->USARTx = USART3;
 8002ac8:	4b60      	ldr	r3, [pc, #384]	; (8002c4c <usart_begin+0x1ee>)
 8002aca:	6063      	str	r3, [r4, #4]
		usx->rxring = &rxring[USART3Serial];
 8002acc:	4b60      	ldr	r3, [pc, #384]	; (8002c50 <usart_begin+0x1f2>)
 8002ace:	60a3      	str	r3, [r4, #8]
		usx->txring = &txring[USART3Serial];
 8002ad0:	4b60      	ldr	r3, [pc, #384]	; (8002c54 <usart_begin+0x1f6>)
		usx->rxring = &rxring[USART2Serial];
		usx->txring = &txring[USART2Serial];
	} else if (usx == &Serial3) {
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
		af = GPIO_AF_USART3;
		irq = USART3_IRQn;
 8002ad2:	2727      	movs	r7, #39	; 0x27
		usx->usid = USART3Serial;
		usx->USARTx = USART3;
		usx->rxring = &rxring[USART3Serial];
		usx->txring = &txring[USART3Serial];
 8002ad4:	60e3      	str	r3, [r4, #12]
 8002ad6:	e7eb      	b.n	8002ab0 <usart_begin+0x52>
	} else if (usx == &Serial4) {
 8002ad8:	4b5f      	ldr	r3, [pc, #380]	; (8002c58 <usart_begin+0x1fa>)
 8002ada:	4298      	cmp	r0, r3
 8002adc:	d10e      	bne.n	8002afc <usart_begin+0x9e>
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART4, ENABLE);
 8002ade:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002ae2:	2101      	movs	r1, #1
 8002ae4:	f7fd ffea 	bl	8000abc <RCC_APB1PeriphClockCmd>
		af = GPIO_AF_UART4;
		irq = UART4_IRQn;
		usx->usid = UART4Serial;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	7023      	strb	r3, [r4, #0]
		usx->USARTx = UART4;
 8002aec:	4b5b      	ldr	r3, [pc, #364]	; (8002c5c <usart_begin+0x1fe>)
 8002aee:	6063      	str	r3, [r4, #4]
		usx->rxring = &rxring[UART4Serial];
 8002af0:	4b5b      	ldr	r3, [pc, #364]	; (8002c60 <usart_begin+0x202>)
 8002af2:	60a3      	str	r3, [r4, #8]
		usx->txring = &txring[UART4Serial];
 8002af4:	4b5b      	ldr	r3, [pc, #364]	; (8002c64 <usart_begin+0x206>)
		usx->rxring = &rxring[USART3Serial];
		usx->txring = &txring[USART3Serial];
	} else if (usx == &Serial4) {
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART4, ENABLE);
		af = GPIO_AF_UART4;
		irq = UART4_IRQn;
 8002af6:	2734      	movs	r7, #52	; 0x34
		usx->usid = UART4Serial;
		usx->USARTx = UART4;
		usx->rxring = &rxring[UART4Serial];
		usx->txring = &txring[UART4Serial];
 8002af8:	60e3      	str	r3, [r4, #12]
 8002afa:	e01e      	b.n	8002b3a <usart_begin+0xdc>
	} else if (usx == &Serial5) {
 8002afc:	4b5a      	ldr	r3, [pc, #360]	; (8002c68 <usart_begin+0x20a>)
 8002afe:	4298      	cmp	r0, r3
 8002b00:	d10e      	bne.n	8002b20 <usart_begin+0xc2>
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART5, ENABLE);
 8002b02:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002b06:	2101      	movs	r1, #1
 8002b08:	f7fd ffd8 	bl	8000abc <RCC_APB1PeriphClockCmd>
		af = GPIO_AF_UART5;
		irq = UART5_IRQn;
		usx->usid = UART5Serial;
 8002b0c:	2304      	movs	r3, #4
 8002b0e:	7023      	strb	r3, [r4, #0]
		usx->USARTx = UART5;
 8002b10:	4b56      	ldr	r3, [pc, #344]	; (8002c6c <usart_begin+0x20e>)
 8002b12:	6063      	str	r3, [r4, #4]
		usx->rxring = &rxring[UART5Serial];
 8002b14:	4b56      	ldr	r3, [pc, #344]	; (8002c70 <usart_begin+0x212>)
 8002b16:	60a3      	str	r3, [r4, #8]
		usx->txring = &txring[UART5Serial];
 8002b18:	4b56      	ldr	r3, [pc, #344]	; (8002c74 <usart_begin+0x216>)
		usx->rxring = &rxring[UART4Serial];
		usx->txring = &txring[UART4Serial];
	} else if (usx == &Serial5) {
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART5, ENABLE);
		af = GPIO_AF_UART5;
		irq = UART5_IRQn;
 8002b1a:	2735      	movs	r7, #53	; 0x35
		usx->usid = UART5Serial;
		usx->USARTx = UART5;
		usx->rxring = &rxring[UART5Serial];
		usx->txring = &txring[UART5Serial];
 8002b1c:	60e3      	str	r3, [r4, #12]
 8002b1e:	e00c      	b.n	8002b3a <usart_begin+0xdc>
	} else { // Serial6
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART6, ENABLE);
 8002b20:	2020      	movs	r0, #32
 8002b22:	2101      	movs	r1, #1
 8002b24:	f7fd ffd6 	bl	8000ad4 <RCC_APB2PeriphClockCmd>
		af = GPIO_AF_USART6;
		irq = USART6_IRQn;
		usx->usid = USART6Serial;
 8002b28:	2305      	movs	r3, #5
 8002b2a:	7023      	strb	r3, [r4, #0]
		usx->USARTx = USART6;
 8002b2c:	4b52      	ldr	r3, [pc, #328]	; (8002c78 <usart_begin+0x21a>)
 8002b2e:	6063      	str	r3, [r4, #4]
		usx->rxring = &rxring[USART6Serial];
 8002b30:	4b52      	ldr	r3, [pc, #328]	; (8002c7c <usart_begin+0x21e>)
 8002b32:	60a3      	str	r3, [r4, #8]
		usx->txring = &txring[USART6Serial];
 8002b34:	4b52      	ldr	r3, [pc, #328]	; (8002c80 <usart_begin+0x222>)
		usx->rxring = &rxring[UART5Serial];
		usx->txring = &txring[UART5Serial];
	} else { // Serial6
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART6, ENABLE);
		af = GPIO_AF_USART6;
		irq = USART6_IRQn;
 8002b36:	2747      	movs	r7, #71	; 0x47
		usx->usid = USART6Serial;
		usx->USARTx = USART6;
		usx->rxring = &rxring[USART6Serial];
		usx->txring = &txring[USART6Serial];
 8002b38:	60e3      	str	r3, [r4, #12]
		usx->USARTx = UART5;
		usx->rxring = &rxring[UART5Serial];
		usx->txring = &txring[UART5Serial];
	} else { // Serial6
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART6, ENABLE);
		af = GPIO_AF_USART6;
 8002b3a:	2608      	movs	r6, #8
		usx->USARTx = USART6;
		usx->rxring = &rxring[USART6Serial];
		usx->txring = &txring[USART6Serial];
	}

	GPIOMode(PinPort(rx), PinBit(rx), GPIO_Mode_AF, GPIO_Speed_50MHz,
 8002b3c:	4640      	mov	r0, r8
 8002b3e:	f7ff fb99 	bl	8002274 <PinPort>
 8002b42:	4683      	mov	fp, r0
 8002b44:	4640      	mov	r0, r8
 8002b46:	f7ff fb9d 	bl	8002284 <PinBit>
 8002b4a:	2202      	movs	r2, #2
 8002b4c:	2500      	movs	r5, #0
 8002b4e:	4601      	mov	r1, r0
 8002b50:	4613      	mov	r3, r2
 8002b52:	4658      	mov	r0, fp
 8002b54:	9500      	str	r5, [sp, #0]
 8002b56:	9501      	str	r5, [sp, #4]
 8002b58:	f7ff fc00 	bl	800235c <GPIOMode>
			GPIO_OType_PP, GPIO_PuPd_NOPULL);
	GPIOMode(PinPort(tx), PinBit(tx), GPIO_Mode_AF, GPIO_Speed_50MHz,
 8002b5c:	4648      	mov	r0, r9
 8002b5e:	f7ff fb89 	bl	8002274 <PinPort>
 8002b62:	4683      	mov	fp, r0
 8002b64:	4648      	mov	r0, r9
 8002b66:	f7ff fb8d 	bl	8002284 <PinBit>
 8002b6a:	2202      	movs	r2, #2
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	4601      	mov	r1, r0
 8002b70:	4658      	mov	r0, fp
 8002b72:	9500      	str	r5, [sp, #0]
 8002b74:	9501      	str	r5, [sp, #4]
 8002b76:	f7ff fbf1 	bl	800235c <GPIOMode>
			GPIO_OType_PP, GPIO_PuPd_NOPULL);

	GPIO_PinAFConfig(PinPort(rx), PinSource(rx), af);
 8002b7a:	4640      	mov	r0, r8
 8002b7c:	f7ff fb7a 	bl	8002274 <PinPort>
 8002b80:	4683      	mov	fp, r0
 8002b82:	4640      	mov	r0, r8
 8002b84:	f7ff fb85 	bl	8002292 <PinSource>
 8002b88:	4632      	mov	r2, r6
 8002b8a:	4601      	mov	r1, r0
 8002b8c:	4658      	mov	r0, fp
 8002b8e:	f7fd fc49 	bl	8000424 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(PinPort(tx), PinSource(tx), af);
 8002b92:	4648      	mov	r0, r9
 8002b94:	f7ff fb6e 	bl	8002274 <PinPort>
 8002b98:	4680      	mov	r8, r0
 8002b9a:	4648      	mov	r0, r9
 8002b9c:	f7ff fb79 	bl	8002292 <PinSource>
 8002ba0:	4632      	mov	r2, r6
 8002ba2:	4601      	mov	r1, r0
 8002ba4:	4640      	mov	r0, r8
 8002ba6:	f7fd fc3d 	bl	8000424 <GPIO_PinAFConfig>
	USART_InitStruct.USART_BaudRate = baud;	// the baudrate is set to the value we passed into this init function
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
	USART_InitStruct.USART_StopBits = USART_StopBits_1;	// we want 1 stop bit (standard)
	USART_InitStruct.USART_Parity = USART_Parity_No;// we don't want a parity bit (standard)
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver
 8002baa:	230c      	movs	r3, #12

	USART_Init(usx->USARTx, &USART_InitStruct); // again all the properties are passed to the USART_Init function which takes care of all the bit setting
 8002bac:	eb0d 0103 	add.w	r1, sp, r3
 8002bb0:	6860      	ldr	r0, [r4, #4]
	USART_InitStruct.USART_BaudRate = baud;	// the baudrate is set to the value we passed into this init function
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
	USART_InitStruct.USART_StopBits = USART_StopBits_1;	// we want 1 stop bit (standard)
	USART_InitStruct.USART_Parity = USART_Parity_No;// we don't want a parity bit (standard)
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver
 8002bb2:	f8ad 3016 	strh.w	r3, [sp, #22]
			GPIO_OType_PP, GPIO_PuPd_NOPULL);

	GPIO_PinAFConfig(PinPort(rx), PinSource(rx), af);
	GPIO_PinAFConfig(PinPort(tx), PinSource(tx), af);

	USART_InitStruct.USART_BaudRate = baud;	// the baudrate is set to the value we passed into this init function
 8002bb6:	f8cd a00c 	str.w	sl, [sp, #12]
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
 8002bba:	f8ad 5010 	strh.w	r5, [sp, #16]
	USART_InitStruct.USART_StopBits = USART_StopBits_1;	// we want 1 stop bit (standard)
 8002bbe:	f8ad 5012 	strh.w	r5, [sp, #18]
	USART_InitStruct.USART_Parity = USART_Parity_No;// we don't want a parity bit (standard)
 8002bc2:	f8ad 5014 	strh.w	r5, [sp, #20]
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
 8002bc6:	f8ad 5018 	strh.w	r5, [sp, #24]
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver

	USART_Init(usx->USARTx, &USART_InitStruct); // again all the properties are passed to the USART_Init function which takes care of all the bit setting
 8002bca:	f7fe ffd9 	bl	8001b80 <USART_Init>

	USART_ITConfig(usx->USARTx, USART_IT_RXNE, ENABLE); // enable the USART3 receive interrupt
 8002bce:	6860      	ldr	r0, [r4, #4]
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	f240 5125 	movw	r1, #1317	; 0x525
 8002bd6:	f7ff f911 	bl	8001dfc <USART_ITConfig>
	USART_ITConfig(usx->USARTx, USART_IT_TXE, DISABLE);
 8002bda:	6860      	ldr	r0, [r4, #4]
 8002bdc:	f240 7127 	movw	r1, #1831	; 0x727
 8002be0:	462a      	mov	r2, r5
 8002be2:	f7ff f90b 	bl	8001dfc <USART_ITConfig>

	NVIC_InitStructure.NVIC_IRQChannel = irq;
	// we want to configure the USART3 interrupts
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0; // this sets the priority group of the USART3 interrupts
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0; // this sets the subpriority inside the group
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;	// the USART3 interrupts are globally enabled
 8002be6:	2601      	movs	r6, #1
	NVIC_Init(&NVIC_InitStructure);	// the properties are passed to the NVIC_Init function which takes care of the low level stuff
 8002be8:	a807      	add	r0, sp, #28
	USART_Init(usx->USARTx, &USART_InitStruct); // again all the properties are passed to the USART_Init function which takes care of all the bit setting

	USART_ITConfig(usx->USARTx, USART_IT_RXNE, ENABLE); // enable the USART3 receive interrupt
	USART_ITConfig(usx->USARTx, USART_IT_TXE, DISABLE);

	NVIC_InitStructure.NVIC_IRQChannel = irq;
 8002bea:	f88d 701c 	strb.w	r7, [sp, #28]
	// we want to configure the USART3 interrupts
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0; // this sets the priority group of the USART3 interrupts
 8002bee:	f88d 501d 	strb.w	r5, [sp, #29]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0; // this sets the subpriority inside the group
 8002bf2:	f88d 501e 	strb.w	r5, [sp, #30]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;	// the USART3 interrupts are globally enabled
 8002bf6:	f88d 601f 	strb.w	r6, [sp, #31]
	NVIC_Init(&NVIC_InitStructure);	// the properties are passed to the NVIC_Init function which takes care of the low level stuff
 8002bfa:	f7fd facf 	bl	800019c <NVIC_Init>
	//
	buffer_clear(usx->rxring); //&rxring[usx->usid]);
 8002bfe:	68a3      	ldr	r3, [r4, #8]
	buffer_clear(usx->txring); //&txring[usx->usid]);
	// finally this enables the complete USART3 peripheral
	USART_Cmd(usx->USARTx, ENABLE);
 8002c00:	6860      	ldr	r0, [r4, #4]

Serial Serial1, Serial2, Serial3, Serial4, Serial5, Serial6;
USARTRing rxring[6], txring[6];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 8002c02:	f8a3 5100 	strh.w	r5, [r3, #256]	; 0x100
	r->tail = 0;
 8002c06:	f8a3 5102 	strh.w	r5, [r3, #258]	; 0x102
	r->count = 0;
 8002c0a:	f8a3 5104 	strh.w	r5, [r3, #260]	; 0x104
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0; // this sets the subpriority inside the group
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;	// the USART3 interrupts are globally enabled
	NVIC_Init(&NVIC_InitStructure);	// the properties are passed to the NVIC_Init function which takes care of the low level stuff
	//
	buffer_clear(usx->rxring); //&rxring[usx->usid]);
	buffer_clear(usx->txring); //&txring[usx->usid]);
 8002c0e:	68e3      	ldr	r3, [r4, #12]
	// finally this enables the complete USART3 peripheral
	USART_Cmd(usx->USARTx, ENABLE);
 8002c10:	4631      	mov	r1, r6

Serial Serial1, Serial2, Serial3, Serial4, Serial5, Serial6;
USARTRing rxring[6], txring[6];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 8002c12:	f8a3 5100 	strh.w	r5, [r3, #256]	; 0x100
	r->tail = 0;
 8002c16:	f8a3 5102 	strh.w	r5, [r3, #258]	; 0x102
	r->count = 0;
 8002c1a:	f8a3 5104 	strh.w	r5, [r3, #260]	; 0x104
	NVIC_Init(&NVIC_InitStructure);	// the properties are passed to the NVIC_Init function which takes care of the low level stuff
	//
	buffer_clear(usx->rxring); //&rxring[usx->usid]);
	buffer_clear(usx->txring); //&txring[usx->usid]);
	// finally this enables the complete USART3 peripheral
	USART_Cmd(usx->USARTx, ENABLE);
 8002c1e:	f7ff f82c 	bl	8001c7a <USART_Cmd>
}
 8002c22:	b009      	add	sp, #36	; 0x24
 8002c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c28:	20001008 	.word	0x20001008
 8002c2c:	40011000 	.word	0x40011000
 8002c30:	20001038 	.word	0x20001038
 8002c34:	200009e4 	.word	0x200009e4
 8002c38:	2000166c 	.word	0x2000166c
 8002c3c:	40004400 	.word	0x40004400
 8002c40:	2000113e 	.word	0x2000113e
 8002c44:	20000aea 	.word	0x20000aea
 8002c48:	20001018 	.word	0x20001018
 8002c4c:	40004800 	.word	0x40004800
 8002c50:	20001244 	.word	0x20001244
 8002c54:	20000bf0 	.word	0x20000bf0
 8002c58:	2000165c 	.word	0x2000165c
 8002c5c:	40004c00 	.word	0x40004c00
 8002c60:	2000134a 	.word	0x2000134a
 8002c64:	20000cf6 	.word	0x20000cf6
 8002c68:	200009d4 	.word	0x200009d4
 8002c6c:	40005000 	.word	0x40005000
 8002c70:	20001450 	.word	0x20001450
 8002c74:	20000dfc 	.word	0x20000dfc
 8002c78:	40011400 	.word	0x40011400
 8002c7c:	20001556 	.word	0x20001556
 8002c80:	20000f02 	.word	0x20000f02

08002c84 <usart_bare_write>:

void usart_bare_write(Serial * usx, const uint16_t w) {
 8002c84:	b538      	push	{r3, r4, r5, lr}
 8002c86:	4604      	mov	r4, r0
 8002c88:	460d      	mov	r5, r1
	while (USART_GetFlagStatus(usx->USARTx, USART_FLAG_TXE ) == RESET)
 8002c8a:	6860      	ldr	r0, [r4, #4]
 8002c8c:	2180      	movs	r1, #128	; 0x80
 8002c8e:	f7ff f8ce 	bl	8001e2e <USART_GetFlagStatus>
 8002c92:	2800      	cmp	r0, #0
 8002c94:	d0f9      	beq.n	8002c8a <usart_bare_write+0x6>
		;
	USART_SendData(usx->USARTx, w);
 8002c96:	6860      	ldr	r0, [r4, #4]
 8002c98:	4629      	mov	r1, r5
//	while (USART_GetFlagStatus(USART3, USART_FLAG_TC ) == RESET) ;
}
 8002c9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
}

void usart_bare_write(Serial * usx, const uint16_t w) {
	while (USART_GetFlagStatus(usx->USARTx, USART_FLAG_TXE ) == RESET)
		;
	USART_SendData(usx->USARTx, w);
 8002c9e:	f7ff b819 	b.w	8001cd4 <USART_SendData>

08002ca2 <usart_write>:
//	while (USART_GetFlagStatus(USART3, USART_FLAG_TC ) == RESET) ;
}

void usart_write(Serial * usx, const uint16_t w) {
 8002ca2:	b570      	push	{r4, r5, r6, lr}
 8002ca4:	4604      	mov	r4, r0
 8002ca6:	460d      	mov	r5, r1
	uint16_t waitcount = 3;
	while (buffer_is_full(usx->txring) && (waitcount > 0) ) {
 8002ca8:	2604      	movs	r6, #4
 8002caa:	e003      	b.n	8002cb4 <usart_write+0x12>
		delay_us(667);
 8002cac:	f240 209b 	movw	r0, #667	; 0x29b
 8002cb0:	f7ff fab4 	bl	800221c <delay_us>
//	while (USART_GetFlagStatus(USART3, USART_FLAG_TC ) == RESET) ;
}

void usart_write(Serial * usx, const uint16_t w) {
	uint16_t waitcount = 3;
	while (buffer_is_full(usx->txring) && (waitcount > 0) ) {
 8002cb4:	68e0      	ldr	r0, [r4, #12]
 8002cb6:	f7ff fe78 	bl	80029aa <buffer_is_full>
 8002cba:	b118      	cbz	r0, 8002cc4 <usart_write+0x22>
 8002cbc:	3e01      	subs	r6, #1
 8002cbe:	b2b6      	uxth	r6, r6
 8002cc0:	2e00      	cmp	r6, #0
 8002cc2:	d1f3      	bne.n	8002cac <usart_write+0xa>
		delay_us(667);
		waitcount--;
	}
	USART_ITConfig(usx->USARTx, USART_IT_TXE, DISABLE);
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	6860      	ldr	r0, [r4, #4]
 8002cc8:	f240 7127 	movw	r1, #1831	; 0x727
 8002ccc:	f7ff f896 	bl	8001dfc <USART_ITConfig>
	buffer_enque(usx->txring, w); //&txring[usx->usid], w);
 8002cd0:	4629      	mov	r1, r5
 8002cd2:	68e0      	ldr	r0, [r4, #12]
 8002cd4:	f7ff fe77 	bl	80029c6 <buffer_enque>
	USART_ITConfig(usx->USARTx, USART_IT_TXE, ENABLE);
 8002cd8:	6860      	ldr	r0, [r4, #4]
 8002cda:	f240 7127 	movw	r1, #1831	; 0x727
 8002cde:	2201      	movs	r2, #1
}
 8002ce0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		delay_us(667);
		waitcount--;
	}
	USART_ITConfig(usx->USARTx, USART_IT_TXE, DISABLE);
	buffer_enque(usx->txring, w); //&txring[usx->usid], w);
	USART_ITConfig(usx->USARTx, USART_IT_TXE, ENABLE);
 8002ce4:	f7ff b88a 	b.w	8001dfc <USART_ITConfig>

08002ce8 <usart_print>:
}

void usart_print(Serial * usx, const char * s) {
 8002ce8:	b538      	push	{r3, r4, r5, lr}
 8002cea:	4605      	mov	r5, r0
 8002cec:	460c      	mov	r4, r1
	while (*s)
 8002cee:	e002      	b.n	8002cf6 <usart_print+0xe>
		usart_write(usx, (uint16_t) *s++);
 8002cf0:	4628      	mov	r0, r5
 8002cf2:	f7ff ffd6 	bl	8002ca2 <usart_write>
	buffer_enque(usx->txring, w); //&txring[usx->usid], w);
	USART_ITConfig(usx->USARTx, USART_IT_TXE, ENABLE);
}

void usart_print(Serial * usx, const char * s) {
	while (*s)
 8002cf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002cfa:	2900      	cmp	r1, #0
 8002cfc:	d1f8      	bne.n	8002cf0 <usart_print+0x8>
		usart_write(usx, (uint16_t) *s++);
}
 8002cfe:	bd38      	pop	{r3, r4, r5, pc}

08002d00 <usart_bare_read>:

uint16_t usart_bare_read(USART_TypeDef * USARTx /*usartx[usx]*/) {
	return USART_ReceiveData(USARTx);
 8002d00:	f7fe bfec 	b.w	8001cdc <USART_ReceiveData>

08002d04 <usart_read>:
}

uint16_t usart_read(Serial * usx) {
 8002d04:	b508      	push	{r3, lr}
	uint16_t w = buffer_deque(usx->rxring); //&rxring[usx->usid]);
 8002d06:	6880      	ldr	r0, [r0, #8]
 8002d08:	f7ff fe80 	bl	8002a0c <buffer_deque>
	if (w == 0xffff)
		return 0; // buffer is empty
	return w;
}
 8002d0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d10:	4298      	cmp	r0, r3
 8002d12:	bf08      	it	eq
 8002d14:	2000      	moveq	r0, #0
 8002d16:	bd08      	pop	{r3, pc}

08002d18 <usart_flush>:

void usart_flush(Serial * usx) {
 8002d18:	b538      	push	{r3, r4, r5, lr}
 8002d1a:	4604      	mov	r4, r0
	uint32_t wtill = millis() + 100;
 8002d1c:	f7ff fa68 	bl	80021f0 <millis>
 8002d20:	f100 0564 	add.w	r5, r0, #100	; 0x64
	while (buffer_count(usx->txring) > 0) {
 8002d24:	e003      	b.n	8002d2e <usart_flush+0x16>
		if (millis() > wtill)
 8002d26:	f7ff fa63 	bl	80021f0 <millis>
 8002d2a:	42a8      	cmp	r0, r5
 8002d2c:	d804      	bhi.n	8002d38 <usart_flush+0x20>
	r->tail = 0;
	r->count = 0;
}

uint16_t buffer_count(USARTRing * r) {
	return r->count;
 8002d2e:	68e3      	ldr	r3, [r4, #12]
	return w;
}

void usart_flush(Serial * usx) {
	uint32_t wtill = millis() + 100;
	while (buffer_count(usx->txring) > 0) {
 8002d30:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d1f6      	bne.n	8002d26 <usart_flush+0xe>
	 USART_SendData(usx->USARTx, buffer_deque(usx->txring)); //&txring[usx->usid]));
	 while (USART_GetFlagStatus(usx->USARTx, USART_FLAG_TC ) == RESET);
	 }
	 USART_ClearITPendingBit(usx->USARTx, USART_IT_TXE );
	 */
	buffer_clear(usx->rxring); //&txring[usx->usid]);
 8002d38:	68a3      	ldr	r3, [r4, #8]

Serial Serial1, Serial2, Serial3, Serial4, Serial5, Serial6;
USARTRing rxring[6], txring[6];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
	r->tail = 0;
 8002d40:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
	r->count = 0;
 8002d44:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
	 while (USART_GetFlagStatus(usx->USARTx, USART_FLAG_TC ) == RESET);
	 }
	 USART_ClearITPendingBit(usx->USARTx, USART_IT_TXE );
	 */
	buffer_clear(usx->rxring); //&txring[usx->usid]);
}
 8002d48:	bd38      	pop	{r3, r4, r5, pc}

08002d4a <usart_peek>:

uint16_t usart_peek(Serial * usx) {
//	if ( buffer_count(&(usx->rxring)) == 0 )
//		return 0xffff;
	return buffer_peek(usx->rxring); //	rxring[usx->usid].buf[rxring[usx->usid].tail];
 8002d4a:	6883      	ldr	r3, [r0, #8]
	r->tail %= USART_BUFFER_SIZE;
	return w;
}

uint16_t buffer_peek(USARTRing * r) {
	if (buffer_count(r) == 0)
 8002d4c:	f8b3 2104 	ldrh.w	r2, [r3, #260]	; 0x104
 8002d50:	b122      	cbz	r2, 8002d5c <usart_peek+0x12>
		return 0xffff;
	return r->buf[r->tail];
 8002d52:	f9b3 2102 	ldrsh.w	r2, [r3, #258]	; 0x102
 8002d56:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8002d5a:	4770      	bx	lr
	return w;
}

uint16_t buffer_peek(USARTRing * r) {
	if (buffer_count(r) == 0)
		return 0xffff;
 8002d5c:	f64f 70ff 	movw	r0, #65535	; 0xffff

uint16_t usart_peek(Serial * usx) {
//	if ( buffer_count(&(usx->rxring)) == 0 )
//		return 0xffff;
	return buffer_peek(usx->rxring); //	rxring[usx->usid].buf[rxring[usx->usid].tail];
}
 8002d60:	4770      	bx	lr

08002d62 <usart_available>:
	r->tail = 0;
	r->count = 0;
}

uint16_t buffer_count(USARTRing * r) {
	return r->count;
 8002d62:	6883      	ldr	r3, [r0, #8]
}

uint16_t usart_available(Serial * usx) {
	return buffer_count(usx->rxring);
	//return buffer_count(&rxring[usx->usid]);
}
 8002d64:	f8b3 0104 	ldrh.w	r0, [r3, #260]	; 0x104
 8002d68:	4770      	bx	lr

08002d6a <USART1_IRQHandler>:

// this is the interrupt request handler (IRQ) for ALL USART3 interrupts

void USART1_IRQHandler(void) {
 8002d6a:	b510      	push	{r4, lr}
	if (USART_GetITStatus(USART1, USART_IT_RXNE )) {
 8002d6c:	4818      	ldr	r0, [pc, #96]	; (8002dd0 <USART1_IRQHandler+0x66>)
 8002d6e:	f240 5125 	movw	r1, #1317	; 0x525
 8002d72:	f7ff f866 	bl	8001e42 <USART_GetITStatus>
 8002d76:	b140      	cbz	r0, 8002d8a <USART1_IRQHandler+0x20>
		buffer_enque(Serial1.rxring,
 8002d78:	4b16      	ldr	r3, [pc, #88]	; (8002dd4 <USART1_IRQHandler+0x6a>)
 8002d7a:	4815      	ldr	r0, [pc, #84]	; (8002dd0 <USART1_IRQHandler+0x66>)
 8002d7c:	689c      	ldr	r4, [r3, #8]
 8002d7e:	f7fe ffad 	bl	8001cdc <USART_ReceiveData>
 8002d82:	4601      	mov	r1, r0
 8002d84:	4620      	mov	r0, r4
 8002d86:	f7ff fe1e 	bl	80029c6 <buffer_enque>
		//&rxring[USART1Serial],
				USART_ReceiveData(USART1 ));
	}

	if (USART_GetITStatus(USART1, USART_IT_TXE )) {
 8002d8a:	4811      	ldr	r0, [pc, #68]	; (8002dd0 <USART1_IRQHandler+0x66>)
 8002d8c:	f240 7127 	movw	r1, #1831	; 0x727
 8002d90:	f7ff f857 	bl	8001e42 <USART_GetITStatus>
 8002d94:	2800      	cmp	r0, #0
 8002d96:	d019      	beq.n	8002dcc <USART1_IRQHandler+0x62>
		if (Serial1.rxring->count
 8002d98:	4b0e      	ldr	r3, [pc, #56]	; (8002dd4 <USART1_IRQHandler+0x6a>)
 8002d9a:	689a      	ldr	r2, [r3, #8]
 8002d9c:	f8b2 2104 	ldrh.w	r2, [r2, #260]	; 0x104
 8002da0:	b95a      	cbnz	r2, 8002dba <USART1_IRQHandler+0x50>
		//txring[USART1Serial].count
				== 0) {
			USART_ITConfig(USART1, USART_IT_TXE, (FunctionalState) DISABLE);
 8002da2:	480b      	ldr	r0, [pc, #44]	; (8002dd0 <USART1_IRQHandler+0x66>)
 8002da4:	f240 7127 	movw	r1, #1831	; 0x727
 8002da8:	f7ff f828 	bl	8001dfc <USART_ITConfig>
			USART_ClearITPendingBit(USART1, USART_IT_TXE );
 8002dac:	4808      	ldr	r0, [pc, #32]	; (8002dd0 <USART1_IRQHandler+0x66>)
 8002dae:	f240 7127 	movw	r1, #1831	; 0x727
		} else {
			USART_SendData(USART1, buffer_deque(Serial1.txring)); // &txring[USART1Serial]) );
		}
	}
}
 8002db2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (USART_GetITStatus(USART1, USART_IT_TXE )) {
		if (Serial1.rxring->count
		//txring[USART1Serial].count
				== 0) {
			USART_ITConfig(USART1, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART1, USART_IT_TXE );
 8002db6:	f7ff b863 	b.w	8001e80 <USART_ClearITPendingBit>
		} else {
			USART_SendData(USART1, buffer_deque(Serial1.txring)); // &txring[USART1Serial]) );
 8002dba:	68d8      	ldr	r0, [r3, #12]
 8002dbc:	f7ff fe26 	bl	8002a0c <buffer_deque>
 8002dc0:	4601      	mov	r1, r0
 8002dc2:	4803      	ldr	r0, [pc, #12]	; (8002dd0 <USART1_IRQHandler+0x66>)
		}
	}
}
 8002dc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		//txring[USART1Serial].count
				== 0) {
			USART_ITConfig(USART1, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART1, USART_IT_TXE );
		} else {
			USART_SendData(USART1, buffer_deque(Serial1.txring)); // &txring[USART1Serial]) );
 8002dc8:	f7fe bf84 	b.w	8001cd4 <USART_SendData>
 8002dcc:	bd10      	pop	{r4, pc}
 8002dce:	bf00      	nop
 8002dd0:	40011000 	.word	0x40011000
 8002dd4:	20001008 	.word	0x20001008

08002dd8 <USART2_IRQHandler>:
		}
	}
}

void USART2_IRQHandler(void) {
 8002dd8:	b510      	push	{r4, lr}
	if (USART_GetITStatus(USART2, USART_IT_RXNE )) {
 8002dda:	4818      	ldr	r0, [pc, #96]	; (8002e3c <USART2_IRQHandler+0x64>)
 8002ddc:	f240 5125 	movw	r1, #1317	; 0x525
 8002de0:	f7ff f82f 	bl	8001e42 <USART_GetITStatus>
 8002de4:	b140      	cbz	r0, 8002df8 <USART2_IRQHandler+0x20>
		buffer_enque(Serial2.rxring //&rxring[USART2Serial]/
 8002de6:	4b16      	ldr	r3, [pc, #88]	; (8002e40 <USART2_IRQHandler+0x68>)
 8002de8:	4814      	ldr	r0, [pc, #80]	; (8002e3c <USART2_IRQHandler+0x64>)
 8002dea:	689c      	ldr	r4, [r3, #8]
 8002dec:	f7fe ff76 	bl	8001cdc <USART_ReceiveData>
 8002df0:	4601      	mov	r1, r0
 8002df2:	4620      	mov	r0, r4
 8002df4:	f7ff fde7 	bl	80029c6 <buffer_enque>
				, USART_ReceiveData(USART2 ));
	}
	if (USART_GetITStatus(USART2, USART_IT_TXE )) {
 8002df8:	4810      	ldr	r0, [pc, #64]	; (8002e3c <USART2_IRQHandler+0x64>)
 8002dfa:	f240 7127 	movw	r1, #1831	; 0x727
 8002dfe:	f7ff f820 	bl	8001e42 <USART_GetITStatus>
 8002e02:	2800      	cmp	r0, #0
 8002e04:	d018      	beq.n	8002e38 <USART2_IRQHandler+0x60>
		if (Serial2.txring->count //txring[USART2Serial].count
 8002e06:	4b0e      	ldr	r3, [pc, #56]	; (8002e40 <USART2_IRQHandler+0x68>)
 8002e08:	68d8      	ldr	r0, [r3, #12]
 8002e0a:	f8b0 2104 	ldrh.w	r2, [r0, #260]	; 0x104
 8002e0e:	b95a      	cbnz	r2, 8002e28 <USART2_IRQHandler+0x50>
		== 0) {
			USART_ITConfig(USART2, USART_IT_TXE, (FunctionalState) DISABLE);
 8002e10:	480a      	ldr	r0, [pc, #40]	; (8002e3c <USART2_IRQHandler+0x64>)
 8002e12:	f240 7127 	movw	r1, #1831	; 0x727
 8002e16:	f7fe fff1 	bl	8001dfc <USART_ITConfig>
			USART_ClearITPendingBit(USART2, USART_IT_TXE );
 8002e1a:	4808      	ldr	r0, [pc, #32]	; (8002e3c <USART2_IRQHandler+0x64>)
 8002e1c:	f240 7127 	movw	r1, #1831	; 0x727
		} else {
			USART_SendData(USART2, buffer_deque(Serial2.txring)); //&txring[USART2Serial]));
		}
	}
}
 8002e20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	}
	if (USART_GetITStatus(USART2, USART_IT_TXE )) {
		if (Serial2.txring->count //txring[USART2Serial].count
		== 0) {
			USART_ITConfig(USART2, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART2, USART_IT_TXE );
 8002e24:	f7ff b82c 	b.w	8001e80 <USART_ClearITPendingBit>
		} else {
			USART_SendData(USART2, buffer_deque(Serial2.txring)); //&txring[USART2Serial]));
 8002e28:	f7ff fdf0 	bl	8002a0c <buffer_deque>
 8002e2c:	4601      	mov	r1, r0
 8002e2e:	4803      	ldr	r0, [pc, #12]	; (8002e3c <USART2_IRQHandler+0x64>)
		}
	}
}
 8002e30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if (Serial2.txring->count //txring[USART2Serial].count
		== 0) {
			USART_ITConfig(USART2, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART2, USART_IT_TXE );
		} else {
			USART_SendData(USART2, buffer_deque(Serial2.txring)); //&txring[USART2Serial]));
 8002e34:	f7fe bf4e 	b.w	8001cd4 <USART_SendData>
 8002e38:	bd10      	pop	{r4, pc}
 8002e3a:	bf00      	nop
 8002e3c:	40004400 	.word	0x40004400
 8002e40:	2000166c 	.word	0x2000166c

08002e44 <USART3_IRQHandler>:
		}
	}
}

void USART3_IRQHandler(void) {
 8002e44:	b510      	push	{r4, lr}
	if (USART_GetITStatus(USART3, USART_IT_RXNE )) {
 8002e46:	4818      	ldr	r0, [pc, #96]	; (8002ea8 <USART3_IRQHandler+0x64>)
 8002e48:	f240 5125 	movw	r1, #1317	; 0x525
 8002e4c:	f7fe fff9 	bl	8001e42 <USART_GetITStatus>
 8002e50:	b140      	cbz	r0, 8002e64 <USART3_IRQHandler+0x20>
		buffer_enque(Serial3.rxring /*&rxring[USART3Serial]*/,
 8002e52:	4b16      	ldr	r3, [pc, #88]	; (8002eac <USART3_IRQHandler+0x68>)
 8002e54:	4814      	ldr	r0, [pc, #80]	; (8002ea8 <USART3_IRQHandler+0x64>)
 8002e56:	689c      	ldr	r4, [r3, #8]
 8002e58:	f7fe ff40 	bl	8001cdc <USART_ReceiveData>
 8002e5c:	4601      	mov	r1, r0
 8002e5e:	4620      	mov	r0, r4
 8002e60:	f7ff fdb1 	bl	80029c6 <buffer_enque>
				USART_ReceiveData(USART3 ));
	}

	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
 8002e64:	4810      	ldr	r0, [pc, #64]	; (8002ea8 <USART3_IRQHandler+0x64>)
 8002e66:	f240 7127 	movw	r1, #1831	; 0x727
 8002e6a:	f7fe ffea 	bl	8001e42 <USART_GetITStatus>
 8002e6e:	2800      	cmp	r0, #0
 8002e70:	d018      	beq.n	8002ea4 <USART3_IRQHandler+0x60>
		if (Serial3.txring->count == 0) {
 8002e72:	4b0e      	ldr	r3, [pc, #56]	; (8002eac <USART3_IRQHandler+0x68>)
 8002e74:	68d8      	ldr	r0, [r3, #12]
 8002e76:	f8b0 2104 	ldrh.w	r2, [r0, #260]	; 0x104
 8002e7a:	b95a      	cbnz	r2, 8002e94 <USART3_IRQHandler+0x50>
			USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) DISABLE);
 8002e7c:	480a      	ldr	r0, [pc, #40]	; (8002ea8 <USART3_IRQHandler+0x64>)
 8002e7e:	f240 7127 	movw	r1, #1831	; 0x727
 8002e82:	f7fe ffbb 	bl	8001dfc <USART_ITConfig>
			USART_ClearITPendingBit(USART3, USART_IT_TXE );
 8002e86:	4808      	ldr	r0, [pc, #32]	; (8002ea8 <USART3_IRQHandler+0x64>)
 8002e88:	f240 7127 	movw	r1, #1831	; 0x727
		} else {
			USART_SendData(USART3,
					buffer_deque(Serial3.txring /*&txring[USART3Serial]*/));
		}
	}
}
 8002e8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	}

	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
		if (Serial3.txring->count == 0) {
			USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART3, USART_IT_TXE );
 8002e90:	f7fe bff6 	b.w	8001e80 <USART_ClearITPendingBit>
		} else {
			USART_SendData(USART3,
 8002e94:	f7ff fdba 	bl	8002a0c <buffer_deque>
 8002e98:	4601      	mov	r1, r0
 8002e9a:	4803      	ldr	r0, [pc, #12]	; (8002ea8 <USART3_IRQHandler+0x64>)
					buffer_deque(Serial3.txring /*&txring[USART3Serial]*/));
		}
	}
}
 8002e9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
		if (Serial3.txring->count == 0) {
			USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART3, USART_IT_TXE );
		} else {
			USART_SendData(USART3,
 8002ea0:	f7fe bf18 	b.w	8001cd4 <USART_SendData>
 8002ea4:	bd10      	pop	{r4, pc}
 8002ea6:	bf00      	nop
 8002ea8:	40004800 	.word	0x40004800
 8002eac:	20001018 	.word	0x20001018

08002eb0 <UART4_IRQHandler>:
					buffer_deque(Serial3.txring /*&txring[USART3Serial]*/));
		}
	}
}

void UART4_IRQHandler(void) {
 8002eb0:	b510      	push	{r4, lr}
	if (USART_GetITStatus(UART4, USART_IT_RXNE )) {
 8002eb2:	4818      	ldr	r0, [pc, #96]	; (8002f14 <UART4_IRQHandler+0x64>)
 8002eb4:	f240 5125 	movw	r1, #1317	; 0x525
 8002eb8:	f7fe ffc3 	bl	8001e42 <USART_GetITStatus>
 8002ebc:	b140      	cbz	r0, 8002ed0 <UART4_IRQHandler+0x20>
		buffer_enque(Serial4.rxring, USART_ReceiveData(UART4 ));
 8002ebe:	4b16      	ldr	r3, [pc, #88]	; (8002f18 <UART4_IRQHandler+0x68>)
 8002ec0:	4814      	ldr	r0, [pc, #80]	; (8002f14 <UART4_IRQHandler+0x64>)
 8002ec2:	689c      	ldr	r4, [r3, #8]
 8002ec4:	f7fe ff0a 	bl	8001cdc <USART_ReceiveData>
 8002ec8:	4601      	mov	r1, r0
 8002eca:	4620      	mov	r0, r4
 8002ecc:	f7ff fd7b 	bl	80029c6 <buffer_enque>
	}

	if (USART_GetITStatus(UART4, USART_IT_TXE )) {
 8002ed0:	4810      	ldr	r0, [pc, #64]	; (8002f14 <UART4_IRQHandler+0x64>)
 8002ed2:	f240 7127 	movw	r1, #1831	; 0x727
 8002ed6:	f7fe ffb4 	bl	8001e42 <USART_GetITStatus>
 8002eda:	2800      	cmp	r0, #0
 8002edc:	d018      	beq.n	8002f10 <UART4_IRQHandler+0x60>
		if (Serial4.txring->count == 0) {
 8002ede:	4b0e      	ldr	r3, [pc, #56]	; (8002f18 <UART4_IRQHandler+0x68>)
 8002ee0:	68d8      	ldr	r0, [r3, #12]
 8002ee2:	f8b0 2104 	ldrh.w	r2, [r0, #260]	; 0x104
 8002ee6:	b95a      	cbnz	r2, 8002f00 <UART4_IRQHandler+0x50>
			USART_ITConfig(UART4, USART_IT_TXE, (FunctionalState) DISABLE);
 8002ee8:	480a      	ldr	r0, [pc, #40]	; (8002f14 <UART4_IRQHandler+0x64>)
 8002eea:	f240 7127 	movw	r1, #1831	; 0x727
 8002eee:	f7fe ff85 	bl	8001dfc <USART_ITConfig>
			USART_ClearITPendingBit(UART4, USART_IT_TXE );
 8002ef2:	4808      	ldr	r0, [pc, #32]	; (8002f14 <UART4_IRQHandler+0x64>)
 8002ef4:	f240 7127 	movw	r1, #1831	; 0x727
		} else {
			USART_SendData(UART4, buffer_deque(Serial4.txring));
		}
	}
}
 8002ef8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	}

	if (USART_GetITStatus(UART4, USART_IT_TXE )) {
		if (Serial4.txring->count == 0) {
			USART_ITConfig(UART4, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(UART4, USART_IT_TXE );
 8002efc:	f7fe bfc0 	b.w	8001e80 <USART_ClearITPendingBit>
		} else {
			USART_SendData(UART4, buffer_deque(Serial4.txring));
 8002f00:	f7ff fd84 	bl	8002a0c <buffer_deque>
 8002f04:	4601      	mov	r1, r0
 8002f06:	4803      	ldr	r0, [pc, #12]	; (8002f14 <UART4_IRQHandler+0x64>)
		}
	}
}
 8002f08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (USART_GetITStatus(UART4, USART_IT_TXE )) {
		if (Serial4.txring->count == 0) {
			USART_ITConfig(UART4, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(UART4, USART_IT_TXE );
		} else {
			USART_SendData(UART4, buffer_deque(Serial4.txring));
 8002f0c:	f7fe bee2 	b.w	8001cd4 <USART_SendData>
 8002f10:	bd10      	pop	{r4, pc}
 8002f12:	bf00      	nop
 8002f14:	40004c00 	.word	0x40004c00
 8002f18:	2000165c 	.word	0x2000165c

08002f1c <_close>:
	}
}

int _close(int file) {
	return -1;
}
 8002f1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f20:	4770      	bx	lr

08002f22 <_execve>:
/*
 execve
 Transfer control to a new process. Minimal implementation (for a system without processes):
 */
int _execve(char *name, char **argv, char **env) {
	errno = ENOMEM;
 8002f22:	4b03      	ldr	r3, [pc, #12]	; (8002f30 <_execve+0xe>)
 8002f24:	220c      	movs	r2, #12
 8002f26:	601a      	str	r2, [r3, #0]
	return -1;
}
 8002f28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	2000168c 	.word	0x2000168c

08002f34 <_fork>:
 fork
 Create a new process. Minimal implementation (for a system without processes):
 */

int _fork() {
	errno = EAGAIN;
 8002f34:	4b02      	ldr	r3, [pc, #8]	; (8002f40 <_fork+0xc>)
 8002f36:	220b      	movs	r2, #11
 8002f38:	601a      	str	r2, [r3, #0]
	return -1;
}
 8002f3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f3e:	4770      	bx	lr
 8002f40:	2000168c 	.word	0x2000168c

08002f44 <_fstat>:
 Status of an open file. For consistency with other minimal implementations in these examples,
 all files are regarded as character special devices.
 The `sys/stat.h' header file required is distributed in the `include' subdirectory for this C library.
 */
int _fstat(int file, struct stat *st) {
	st->st_mode = S_IFCHR;
 8002f44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f48:	604b      	str	r3, [r1, #4]
	return 0;
}
 8002f4a:	2000      	movs	r0, #0
 8002f4c:	4770      	bx	lr

08002f4e <_getpid>:
 Process-ID; this is sometimes used to generate strings unlikely to conflict with other processes. Minimal implementation, for a system without processes:
 */

int _getpid() {
	return 1;
}
 8002f4e:	2001      	movs	r0, #1
 8002f50:	4770      	bx	lr

08002f52 <_isatty>:
/*
 isatty
 Query whether output stream is a terminal. For consistency with the other minimal implementations,
 */
int _isatty(int file) {
	switch (file) {
 8002f52:	2802      	cmp	r0, #2
 8002f54:	d904      	bls.n	8002f60 <_isatty+0xe>
	case STDERR_FILENO:
	case STDIN_FILENO:
		return 1;
	default:
		//errno = ENOTTY;
		errno = EBADF;
 8002f56:	4b03      	ldr	r3, [pc, #12]	; (8002f64 <_isatty+0x12>)
 8002f58:	2209      	movs	r2, #9
 8002f5a:	601a      	str	r2, [r3, #0]
		return 0;
 8002f5c:	2000      	movs	r0, #0
 8002f5e:	4770      	bx	lr
int _isatty(int file) {
	switch (file) {
	case STDOUT_FILENO:
	case STDERR_FILENO:
	case STDIN_FILENO:
		return 1;
 8002f60:	2001      	movs	r0, #1
	default:
		//errno = ENOTTY;
		errno = EBADF;
		return 0;
	}
}
 8002f62:	4770      	bx	lr
 8002f64:	2000168c 	.word	0x2000168c

08002f68 <_kill>:
/*
 kill
 Send a signal. Minimal implementation:
 */
int _kill(int pid, int sig) {
	errno = EINVAL;
 8002f68:	4b02      	ldr	r3, [pc, #8]	; (8002f74 <_kill+0xc>)
 8002f6a:	2216      	movs	r2, #22
 8002f6c:	601a      	str	r2, [r3, #0]
	return (-1);
}
 8002f6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f72:	4770      	bx	lr
 8002f74:	2000168c 	.word	0x2000168c

08002f78 <_link>:
 link
 Establish a new name for an existing file. Minimal implementation:
 */

int _link(char *old, char *new) {
	errno = EMLINK;
 8002f78:	4b02      	ldr	r3, [pc, #8]	; (8002f84 <_link+0xc>)
 8002f7a:	221f      	movs	r2, #31
 8002f7c:	601a      	str	r2, [r3, #0]
	return -1;
}
 8002f7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f82:	4770      	bx	lr
 8002f84:	2000168c 	.word	0x2000168c

08002f88 <_lseek>:
 lseek
 Set position in a file. Minimal implementation:
 */
int _lseek(int file, int ptr, int dir) {
	return 0;
}
 8002f88:	2000      	movs	r0, #0
 8002f8a:	4770      	bx	lr

08002f8c <_read>:
 read
 Read a character to a file. `libc' subroutines will use this system routine for input from all files, including stdin
 Returns -1 on error or blocks until the number of characters have been read.
 */

int _read(int file, char *ptr, int len) {
 8002f8c:	b530      	push	{r4, r5, lr}
	int n;
	int num = 0;
	switch (file) {
 8002f8e:	b138      	cbz	r0, 8002fa0 <_read+0x14>
 8002f90:	e00d      	b.n	8002fae <_read+0x22>
	case STDIN_FILENO:
		for (n = 0; n < len; n++) {
#if   STDIN_USART == 1
			while ((USART1->SR & USART_FLAG_RXNE) == (uint16_t)RESET) {}
 8002f92:	881d      	ldrh	r5, [r3, #0]
 8002f94:	06ad      	lsls	r5, r5, #26
 8002f96:	d5fc      	bpl.n	8002f92 <_read+0x6>
			char c = (char)(USART1->DR & (uint16_t)0x01FF);
 8002f98:	88a5      	ldrh	r5, [r4, #4]
 8002f9a:	540d      	strb	r5, [r1, r0]
int _read(int file, char *ptr, int len) {
	int n;
	int num = 0;
	switch (file) {
	case STDIN_FILENO:
		for (n = 0; n < len; n++) {
 8002f9c:	3001      	adds	r0, #1
 8002f9e:	e001      	b.n	8002fa4 <_read+0x18>
#if   STDIN_USART == 1
			while ((USART1->SR & USART_FLAG_RXNE) == (uint16_t)RESET) {}
 8002fa0:	4b06      	ldr	r3, [pc, #24]	; (8002fbc <_read+0x30>)
 8002fa2:	461c      	mov	r4, r3
int _read(int file, char *ptr, int len) {
	int n;
	int num = 0;
	switch (file) {
	case STDIN_FILENO:
		for (n = 0; n < len; n++) {
 8002fa4:	4290      	cmp	r0, r2
 8002fa6:	dbf4      	blt.n	8002f92 <_read+0x6>
 8002fa8:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8002fac:	bd30      	pop	{r4, r5, pc}
					*ptr++ = c;
					num++;
				}
				break;
				default:
				errno = EBADF;
 8002fae:	4b04      	ldr	r3, [pc, #16]	; (8002fc0 <_read+0x34>)
 8002fb0:	2209      	movs	r2, #9
 8002fb2:	601a      	str	r2, [r3, #0]
				return -1;
 8002fb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			}
	return num;
}
 8002fb8:	bd30      	pop	{r4, r5, pc}
 8002fba:	bf00      	nop
 8002fbc:	40011000 	.word	0x40011000
 8002fc0:	2000168c 	.word	0x2000168c

08002fc4 <_stat>:
 Status of a file (by name). Minimal implementation:
 int    _EXFUN(stat,( const char *__path, struct stat *__sbuf ));
 */

int _stat(const char *filepath, struct stat *st) {
	st->st_mode = S_IFCHR;
 8002fc4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002fc8:	604b      	str	r3, [r1, #4]
	return 0;
}
 8002fca:	2000      	movs	r0, #0
 8002fcc:	4770      	bx	lr

08002fce <_times>:
 Timing information for current process. Minimal implementation:
 */

clock_t _times(struct tms *buf) {
	return -1;
}
 8002fce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002fd2:	4770      	bx	lr

08002fd4 <_unlink>:
/*
 unlink
 Remove a file's directory entry. Minimal implementation:
 */
int _unlink(char *name) {
	errno = ENOENT;
 8002fd4:	4b02      	ldr	r3, [pc, #8]	; (8002fe0 <_unlink+0xc>)
 8002fd6:	2202      	movs	r2, #2
 8002fd8:	601a      	str	r2, [r3, #0]
	return -1;
}
 8002fda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002fde:	4770      	bx	lr
 8002fe0:	2000168c 	.word	0x2000168c

08002fe4 <_wait>:
/*
 wait
 Wait for a child process. Minimal implementation:
 */
int _wait(int *status) {
	errno = ECHILD;
 8002fe4:	4b02      	ldr	r3, [pc, #8]	; (8002ff0 <_wait+0xc>)
 8002fe6:	220a      	movs	r2, #10
 8002fe8:	601a      	str	r2, [r3, #0]
	return -1;
}
 8002fea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002fee:	4770      	bx	lr
 8002ff0:	2000168c 	.word	0x2000168c

08002ff4 <_write>:
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
 8002ff4:	2801      	cmp	r0, #1
/*
 write
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
 8002ff6:	b530      	push	{r4, r5, lr}
	int n;
	switch (file) {
 8002ff8:	d009      	beq.n	800300e <_write+0x1a>
 8002ffa:	2802      	cmp	r0, #2
 8002ffc:	d11a      	bne.n	8003034 <_write+0x40>
 8002ffe:	e013      	b.n	8003028 <_write+0x34>
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
#if STDOUT_USART == 1
			while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 8003000:	8805      	ldrh	r5, [r0, #0]
 8003002:	066d      	lsls	r5, r5, #25
 8003004:	d5fc      	bpl.n	8003000 <_write+0xc>
			USART1->DR = (*ptr++ & (uint16_t)0x01FF);
 8003006:	5ccd      	ldrb	r5, [r1, r3]
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
 8003008:	3301      	adds	r3, #1
#if STDOUT_USART == 1
			while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
			USART1->DR = (*ptr++ & (uint16_t)0x01FF);
 800300a:	80a5      	strh	r5, [r4, #4]
 800300c:	e002      	b.n	8003014 <_write+0x20>
	int n;
	switch (file) {
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
#if STDOUT_USART == 1
			while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 800300e:	480d      	ldr	r0, [pc, #52]	; (8003044 <_write+0x50>)
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
 8003010:	2300      	movs	r3, #0
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
#if STDOUT_USART == 1
			while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 8003012:	4604      	mov	r4, r0
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
 8003014:	4293      	cmp	r3, r2
 8003016:	dbf3      	blt.n	8003000 <_write+0xc>
 8003018:	e011      	b.n	800303e <_write+0x4a>
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
#if STDERR_USART == 1
					while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 800301a:	8805      	ldrh	r5, [r0, #0]
 800301c:	066d      	lsls	r5, r5, #25
 800301e:	d5fc      	bpl.n	800301a <_write+0x26>
					USART1->DR = (*ptr++ & (uint16_t)0x01FF);
 8003020:	5ccd      	ldrb	r5, [r1, r3]
					USART3->DR = (*ptr++ & (uint16_t)0x01FF);
#endif
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
 8003022:	3301      	adds	r3, #1
#if STDERR_USART == 1
					while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
					USART1->DR = (*ptr++ & (uint16_t)0x01FF);
 8003024:	80a5      	strh	r5, [r4, #4]
 8003026:	e002      	b.n	800302e <_write+0x3a>
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
#if STDERR_USART == 1
					while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 8003028:	4806      	ldr	r0, [pc, #24]	; (8003044 <_write+0x50>)
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
 800302a:	2300      	movs	r3, #0
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
#if STDERR_USART == 1
					while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 800302c:	4604      	mov	r4, r0
					USART3->DR = (*ptr++ & (uint16_t)0x01FF);
#endif
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
 800302e:	4293      	cmp	r3, r2
 8003030:	dbf3      	blt.n	800301a <_write+0x26>
 8003032:	e004      	b.n	800303e <_write+0x4a>
					USART3->DR = (*ptr++ & (uint16_t)0x01FF);
#endif
				}
				break;
				default:
				errno = EBADF;
 8003034:	4b04      	ldr	r3, [pc, #16]	; (8003048 <_write+0x54>)
 8003036:	2209      	movs	r2, #9
 8003038:	601a      	str	r2, [r3, #0]
				return -1;
 800303a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
			}
	return len;
}
 800303e:	4610      	mov	r0, r2
 8003040:	bd30      	pop	{r4, r5, pc}
 8003042:	bf00      	nop
 8003044:	40011000 	.word	0x40011000
 8003048:	2000168c 	.word	0x2000168c

0800304c <_sbrk>:
/*
 sbrk
 Increase program data space.
 Malloc and related functions depend on this
 */
caddr_t _sbrk(int incr) {
 800304c:	b508      	push	{r3, lr}

	extern char _ebss; // Defined by the linker
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0) {
 800304e:	4b0d      	ldr	r3, [pc, #52]	; (8003084 <_sbrk+0x38>)
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	b90a      	cbnz	r2, 8003058 <_sbrk+0xc>
		heap_end = &_ebss;
 8003054:	4a0c      	ldr	r2, [pc, #48]	; (8003088 <_sbrk+0x3c>)
 8003056:	601a      	str	r2, [r3, #0]
	}
	prev_heap_end = heap_end;
 8003058:	681b      	ldr	r3, [r3, #0]
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __get_MSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 800305a:	f3ef 8208 	mrs	r2, MSP

	char * stack = (char*) __get_MSP();
	if (heap_end + incr > stack) {
 800305e:	1818      	adds	r0, r3, r0
 8003060:	4290      	cmp	r0, r2
 8003062:	d90a      	bls.n	800307a <_sbrk+0x2e>
		_write(STDERR_FILENO, "Heap and stack collision\n", 25);
 8003064:	2219      	movs	r2, #25
 8003066:	2002      	movs	r0, #2
 8003068:	4908      	ldr	r1, [pc, #32]	; (800308c <_sbrk+0x40>)
 800306a:	f7ff ffc3 	bl	8002ff4 <_write>
		errno = ENOMEM;
 800306e:	4b08      	ldr	r3, [pc, #32]	; (8003090 <_sbrk+0x44>)
 8003070:	220c      	movs	r2, #12
 8003072:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8003074:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003078:	e001      	b.n	800307e <_sbrk+0x32>
		//abort ();
	}

	heap_end += incr;
 800307a:	4a02      	ldr	r2, [pc, #8]	; (8003084 <_sbrk+0x38>)
 800307c:	6010      	str	r0, [r2, #0]
	return (caddr_t) prev_heap_end;

}
 800307e:	4618      	mov	r0, r3
 8003080:	bd08      	pop	{r3, pc}
 8003082:	bf00      	nop
 8003084:	2000095c 	.word	0x2000095c
 8003088:	20001690 	.word	0x20001690
 800308c:	080088a7 	.word	0x080088a7
 8003090:	2000168c 	.word	0x2000168c

08003094 <_exit>:
char *__env[1] = { 0 };
char **environ = __env;

int _write(int file, char *ptr, int len);

void _exit(int status) {
 8003094:	b508      	push	{r3, lr}
	_write(1, "exit", 4);
 8003096:	2001      	movs	r0, #1
 8003098:	4902      	ldr	r1, [pc, #8]	; (80030a4 <_exit+0x10>)
 800309a:	2204      	movs	r2, #4
 800309c:	f7ff ffaa 	bl	8002ff4 <_write>
 80030a0:	e7fe      	b.n	80030a0 <_exit+0xc>
 80030a2:	bf00      	nop
 80030a4:	080088c1 	.word	0x080088c1
 80030a8:	0800892c 	.word	0x0800892c
 80030ac:	20000000 	.word	0x20000000
 80030b0:	2000095c 	.word	0x2000095c
 80030b4:	2000095c 	.word	0x2000095c
 80030b8:	20001690 	.word	0x20001690

080030bc <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 80030bc:	4770      	bx	lr

080030be <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80030be:	e7fe      	b.n	80030be <HardFault_Handler>

080030c0 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80030c0:	e7fe      	b.n	80030c0 <MemManage_Handler>

080030c2 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80030c2:	e7fe      	b.n	80030c2 <BusFault_Handler>

080030c4 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80030c4:	e7fe      	b.n	80030c4 <UsageFault_Handler>

080030c6 <SVC_Handler>:
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
}
 80030c6:	4770      	bx	lr

080030c8 <DebugMon_Handler>:
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
}
 80030c8:	4770      	bx	lr

080030ca <PendSV_Handler>:
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
}
 80030ca:	4770      	bx	lr

080030cc <SystemInit>:
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80030cc:	4b33      	ldr	r3, [pc, #204]	; (800319c <SystemInit+0xd0>)
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	f042 0201 	orr.w	r2, r2, #1
 80030d4:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80030d6:	2200      	movs	r2, #0
 80030d8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80030da:	6819      	ldr	r1, [r3, #0]
 80030dc:	f021 7184 	bic.w	r1, r1, #17301504	; 0x1080000
 80030e0:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80030e4:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80030e6:	492e      	ldr	r1, [pc, #184]	; (80031a0 <SystemInit+0xd4>)
 80030e8:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80030ea:	6819      	ldr	r1, [r3, #0]
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80030ec:	b082      	sub	sp, #8

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80030ee:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 80030f2:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80030f4:	60da      	str	r2, [r3, #12]
static void SetSysClock(void)
{
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80030f6:	9200      	str	r2, [sp, #0]
 80030f8:	9201      	str	r2, [sp, #4]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003100:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8003108:	9201      	str	r2, [sp, #4]
    StartUpCounter++;
 800310a:	9a00      	ldr	r2, [sp, #0]
 800310c:	3201      	adds	r2, #1
 800310e:	9200      	str	r2, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8003110:	9a01      	ldr	r2, [sp, #4]
 8003112:	b91a      	cbnz	r2, 800311c <SystemInit+0x50>
 8003114:	9a00      	ldr	r2, [sp, #0]
 8003116:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 800311a:	d1f2      	bne.n	8003102 <SystemInit+0x36>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800311c:	4b1f      	ldr	r3, [pc, #124]	; (800319c <SystemInit+0xd0>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
 8003124:	bf18      	it	ne
 8003126:	2301      	movne	r3, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8003128:	9301      	str	r3, [sp, #4]
  }

  if (HSEStatus == (uint32_t)0x01)
 800312a:	9b01      	ldr	r3, [sp, #4]
 800312c:	2b01      	cmp	r3, #1
 800312e:	d12e      	bne.n	800318e <SystemInit+0xc2>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8003130:	4b1a      	ldr	r3, [pc, #104]	; (800319c <SystemInit+0xd0>)
 8003132:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003134:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003138:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 800313a:	4a1a      	ldr	r2, [pc, #104]	; (80031a4 <SystemInit+0xd8>)
 800313c:	6811      	ldr	r1, [r2, #0]
 800313e:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8003142:	6011      	str	r1, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8003144:	689a      	ldr	r2, [r3, #8]
 8003146:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8003148:	689a      	ldr	r2, [r3, #8]
 800314a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800314e:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8003150:	689a      	ldr	r2, [r3, #8]
 8003152:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 8003156:	609a      	str	r2, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8003158:	4a13      	ldr	r2, [pc, #76]	; (80031a8 <SystemInit+0xdc>)
 800315a:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003162:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8003164:	6819      	ldr	r1, [r3, #0]
 8003166:	4a0d      	ldr	r2, [pc, #52]	; (800319c <SystemInit+0xd0>)
 8003168:	0189      	lsls	r1, r1, #6
 800316a:	d5fb      	bpl.n	8003164 <SystemInit+0x98>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 800316c:	4b0f      	ldr	r3, [pc, #60]	; (80031ac <SystemInit+0xe0>)
 800316e:	f240 6105 	movw	r1, #1541	; 0x605
 8003172:	6019      	str	r1, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8003174:	6893      	ldr	r3, [r2, #8]
 8003176:	f023 0303 	bic.w	r3, r3, #3
 800317a:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 800317c:	6893      	ldr	r3, [r2, #8]
 800317e:	f043 0302 	orr.w	r3, r3, #2
 8003182:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8003184:	6893      	ldr	r3, [r2, #8]
 8003186:	f003 030c 	and.w	r3, r3, #12
 800318a:	2b08      	cmp	r3, #8
 800318c:	d1fa      	bne.n	8003184 <SystemInit+0xb8>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800318e:	4b08      	ldr	r3, [pc, #32]	; (80031b0 <SystemInit+0xe4>)
 8003190:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003194:	609a      	str	r2, [r3, #8]
#endif
}
 8003196:	b002      	add	sp, #8
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop
 800319c:	40023800 	.word	0x40023800
 80031a0:	24003010 	.word	0x24003010
 80031a4:	40007000 	.word	0x40007000
 80031a8:	07405419 	.word	0x07405419
 80031ac:	40023c00 	.word	0x40023c00
 80031b0:	e000ed00 	.word	0xe000ed00

080031b4 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80031b4:	4b18      	ldr	r3, [pc, #96]	; (8003218 <SystemCoreClockUpdate+0x64>)
 80031b6:	4a19      	ldr	r2, [pc, #100]	; (800321c <SystemCoreClockUpdate+0x68>)
 80031b8:	6899      	ldr	r1, [r3, #8]
 80031ba:	f001 010c 	and.w	r1, r1, #12

  switch (tmp)
 80031be:	2904      	cmp	r1, #4
 80031c0:	d003      	beq.n	80031ca <SystemCoreClockUpdate+0x16>
 80031c2:	2908      	cmp	r1, #8
 80031c4:	d003      	beq.n	80031ce <SystemCoreClockUpdate+0x1a>
 80031c6:	4b16      	ldr	r3, [pc, #88]	; (8003220 <SystemCoreClockUpdate+0x6c>)
 80031c8:	e019      	b.n	80031fe <SystemCoreClockUpdate+0x4a>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80031ca:	4b16      	ldr	r3, [pc, #88]	; (8003224 <SystemCoreClockUpdate+0x70>)
 80031cc:	e017      	b.n	80031fe <SystemCoreClockUpdate+0x4a>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80031ce:	6859      	ldr	r1, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031d0:	685a      	ldr	r2, [r3, #4]
      
      if (pllsource != 0)
 80031d2:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80031d6:	6859      	ldr	r1, [r3, #4]
 80031d8:	bf14      	ite	ne
 80031da:	4b12      	ldrne	r3, [pc, #72]	; (8003224 <SystemCoreClockUpdate+0x70>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80031dc:	4b10      	ldreq	r3, [pc, #64]	; (8003220 <SystemCoreClockUpdate+0x6c>)

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031de:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80031e2:	fbb3 f3f2 	udiv	r3, r3, r2
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80031e6:	4a0c      	ldr	r2, [pc, #48]	; (8003218 <SystemCoreClockUpdate+0x64>)
 80031e8:	6852      	ldr	r2, [r2, #4]
 80031ea:	f3c2 4201 	ubfx	r2, r2, #16, #2
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80031ee:	f3c1 1188 	ubfx	r1, r1, #6, #9
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80031f2:	3201      	adds	r2, #1
 80031f4:	0052      	lsls	r2, r2, #1
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80031f6:	434b      	muls	r3, r1
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
      SystemCoreClock = pllvco/pllp;
 80031f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80031fc:	4a07      	ldr	r2, [pc, #28]	; (800321c <SystemCoreClockUpdate+0x68>)
 80031fe:	6013      	str	r3, [r2, #0]
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8003200:	4b05      	ldr	r3, [pc, #20]	; (8003218 <SystemCoreClockUpdate+0x64>)
 8003202:	689a      	ldr	r2, [r3, #8]
 8003204:	4b05      	ldr	r3, [pc, #20]	; (800321c <SystemCoreClockUpdate+0x68>)
 8003206:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800320a:	189a      	adds	r2, r3, r2
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 800320c:	6819      	ldr	r1, [r3, #0]
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800320e:	7912      	ldrb	r2, [r2, #4]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8003210:	fa31 f202 	lsrs.w	r2, r1, r2
 8003214:	601a      	str	r2, [r3, #0]
}
 8003216:	4770      	bx	lr
 8003218:	40023800 	.word	0x40023800
 800321c:	20000088 	.word	0x20000088
 8003220:	00f42400 	.word	0x00f42400
 8003224:	007a1200 	.word	0x007a1200

08003228 <cleanup_glue>:
 8003228:	b538      	push	{r3, r4, r5, lr}
 800322a:	460c      	mov	r4, r1
 800322c:	6809      	ldr	r1, [r1, #0]
 800322e:	4605      	mov	r5, r0
 8003230:	b109      	cbz	r1, 8003236 <cleanup_glue+0xe>
 8003232:	f7ff fff9 	bl	8003228 <cleanup_glue>
 8003236:	4628      	mov	r0, r5
 8003238:	4621      	mov	r1, r4
 800323a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800323e:	f002 ba17 	b.w	8005670 <_free_r>
 8003242:	bf00      	nop

08003244 <_reclaim_reent>:
 8003244:	4b22      	ldr	r3, [pc, #136]	; (80032d0 <_reclaim_reent+0x8c>)
 8003246:	b570      	push	{r4, r5, r6, lr}
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4605      	mov	r5, r0
 800324c:	4298      	cmp	r0, r3
 800324e:	d032      	beq.n	80032b6 <_reclaim_reent+0x72>
 8003250:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8003252:	b1ab      	cbz	r3, 8003280 <_reclaim_reent+0x3c>
 8003254:	2200      	movs	r2, #0
 8003256:	4616      	mov	r6, r2
 8003258:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800325c:	b909      	cbnz	r1, 8003262 <_reclaim_reent+0x1e>
 800325e:	e007      	b.n	8003270 <_reclaim_reent+0x2c>
 8003260:	4621      	mov	r1, r4
 8003262:	680c      	ldr	r4, [r1, #0]
 8003264:	4628      	mov	r0, r5
 8003266:	f002 fa03 	bl	8005670 <_free_r>
 800326a:	2c00      	cmp	r4, #0
 800326c:	d1f8      	bne.n	8003260 <_reclaim_reent+0x1c>
 800326e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8003270:	3601      	adds	r6, #1
 8003272:	2e20      	cmp	r6, #32
 8003274:	4632      	mov	r2, r6
 8003276:	d1ef      	bne.n	8003258 <_reclaim_reent+0x14>
 8003278:	4628      	mov	r0, r5
 800327a:	4619      	mov	r1, r3
 800327c:	f002 f9f8 	bl	8005670 <_free_r>
 8003280:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8003282:	b111      	cbz	r1, 800328a <_reclaim_reent+0x46>
 8003284:	4628      	mov	r0, r5
 8003286:	f002 f9f3 	bl	8005670 <_free_r>
 800328a:	f8d5 1148 	ldr.w	r1, [r5, #328]	; 0x148
 800328e:	b159      	cbz	r1, 80032a8 <_reclaim_reent+0x64>
 8003290:	f505 76a6 	add.w	r6, r5, #332	; 0x14c
 8003294:	42b1      	cmp	r1, r6
 8003296:	d101      	bne.n	800329c <_reclaim_reent+0x58>
 8003298:	e006      	b.n	80032a8 <_reclaim_reent+0x64>
 800329a:	4621      	mov	r1, r4
 800329c:	680c      	ldr	r4, [r1, #0]
 800329e:	4628      	mov	r0, r5
 80032a0:	f002 f9e6 	bl	8005670 <_free_r>
 80032a4:	42a6      	cmp	r6, r4
 80032a6:	d1f8      	bne.n	800329a <_reclaim_reent+0x56>
 80032a8:	6d69      	ldr	r1, [r5, #84]	; 0x54
 80032aa:	b111      	cbz	r1, 80032b2 <_reclaim_reent+0x6e>
 80032ac:	4628      	mov	r0, r5
 80032ae:	f002 f9df 	bl	8005670 <_free_r>
 80032b2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80032b4:	b903      	cbnz	r3, 80032b8 <_reclaim_reent+0x74>
 80032b6:	bd70      	pop	{r4, r5, r6, pc}
 80032b8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80032ba:	4628      	mov	r0, r5
 80032bc:	4798      	blx	r3
 80032be:	f8d5 12e0 	ldr.w	r1, [r5, #736]	; 0x2e0
 80032c2:	2900      	cmp	r1, #0
 80032c4:	d0f7      	beq.n	80032b6 <_reclaim_reent+0x72>
 80032c6:	4628      	mov	r0, r5
 80032c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80032cc:	e7ac      	b.n	8003228 <cleanup_glue>
 80032ce:	bf00      	nop
 80032d0:	200000a0 	.word	0x200000a0

080032d4 <_wrapup_reent>:
 80032d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032d6:	4607      	mov	r7, r0
 80032d8:	b1b0      	cbz	r0, 8003308 <_wrapup_reent+0x34>
 80032da:	f8d7 6148 	ldr.w	r6, [r7, #328]	; 0x148
 80032de:	b176      	cbz	r6, 80032fe <_wrapup_reent+0x2a>
 80032e0:	6875      	ldr	r5, [r6, #4]
 80032e2:	1e6c      	subs	r4, r5, #1
 80032e4:	d408      	bmi.n	80032f8 <_wrapup_reent+0x24>
 80032e6:	3502      	adds	r5, #2
 80032e8:	eb06 0585 	add.w	r5, r6, r5, lsl #2
 80032ec:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80032f0:	3c01      	subs	r4, #1
 80032f2:	4798      	blx	r3
 80032f4:	1c63      	adds	r3, r4, #1
 80032f6:	d1f9      	bne.n	80032ec <_wrapup_reent+0x18>
 80032f8:	6836      	ldr	r6, [r6, #0]
 80032fa:	2e00      	cmp	r6, #0
 80032fc:	d1f0      	bne.n	80032e0 <_wrapup_reent+0xc>
 80032fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003300:	b10b      	cbz	r3, 8003306 <_wrapup_reent+0x32>
 8003302:	4638      	mov	r0, r7
 8003304:	4798      	blx	r3
 8003306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003308:	4b01      	ldr	r3, [pc, #4]	; (8003310 <_wrapup_reent+0x3c>)
 800330a:	681f      	ldr	r7, [r3, #0]
 800330c:	e7e5      	b.n	80032da <_wrapup_reent+0x6>
 800330e:	bf00      	nop
 8003310:	200000a0 	.word	0x200000a0

08003314 <_sprintf_r>:
 8003314:	b40c      	push	{r2, r3}
 8003316:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003318:	b09d      	sub	sp, #116	; 0x74
 800331a:	ac22      	add	r4, sp, #136	; 0x88
 800331c:	f854 2b04 	ldr.w	r2, [r4], #4
 8003320:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 8003324:	460e      	mov	r6, r1
 8003326:	4623      	mov	r3, r4
 8003328:	9503      	str	r5, [sp, #12]
 800332a:	9506      	str	r5, [sp, #24]
 800332c:	a901      	add	r1, sp, #4
 800332e:	f44f 7702 	mov.w	r7, #520	; 0x208
 8003332:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8003336:	f8ad 7010 	strh.w	r7, [sp, #16]
 800333a:	9601      	str	r6, [sp, #4]
 800333c:	9605      	str	r6, [sp, #20]
 800333e:	f8ad 5012 	strh.w	r5, [sp, #18]
 8003342:	941b      	str	r4, [sp, #108]	; 0x6c
 8003344:	f000 f830 	bl	80033a8 <_svfprintf_r>
 8003348:	9b01      	ldr	r3, [sp, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	701a      	strb	r2, [r3, #0]
 800334e:	b01d      	add	sp, #116	; 0x74
 8003350:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8003354:	b002      	add	sp, #8
 8003356:	4770      	bx	lr

08003358 <sprintf>:
 8003358:	b40e      	push	{r1, r2, r3}
 800335a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800335c:	b09c      	sub	sp, #112	; 0x70
 800335e:	ac21      	add	r4, sp, #132	; 0x84
 8003360:	f854 2b04 	ldr.w	r2, [r4], #4
 8003364:	f240 03a0 	movw	r3, #160	; 0xa0
 8003368:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 800336c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003370:	4606      	mov	r6, r0
 8003372:	9503      	str	r5, [sp, #12]
 8003374:	9506      	str	r5, [sp, #24]
 8003376:	6818      	ldr	r0, [r3, #0]
 8003378:	a901      	add	r1, sp, #4
 800337a:	4623      	mov	r3, r4
 800337c:	f44f 7702 	mov.w	r7, #520	; 0x208
 8003380:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8003384:	f8ad 7010 	strh.w	r7, [sp, #16]
 8003388:	9601      	str	r6, [sp, #4]
 800338a:	9605      	str	r6, [sp, #20]
 800338c:	f8ad 5012 	strh.w	r5, [sp, #18]
 8003390:	941b      	str	r4, [sp, #108]	; 0x6c
 8003392:	f000 f809 	bl	80033a8 <_svfprintf_r>
 8003396:	9b01      	ldr	r3, [sp, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	701a      	strb	r2, [r3, #0]
 800339c:	b01c      	add	sp, #112	; 0x70
 800339e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80033a2:	b003      	add	sp, #12
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop

080033a8 <_svfprintf_r>:
 80033a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033ac:	b0c5      	sub	sp, #276	; 0x114
 80033ae:	468a      	mov	sl, r1
 80033b0:	4614      	mov	r4, r2
 80033b2:	930e      	str	r3, [sp, #56]	; 0x38
 80033b4:	900f      	str	r0, [sp, #60]	; 0x3c
 80033b6:	f002 fa51 	bl	800585c <_localeconv_r>
 80033ba:	6800      	ldr	r0, [r0, #0]
 80033bc:	2100      	movs	r1, #0
 80033be:	9017      	str	r0, [sp, #92]	; 0x5c
 80033c0:	2000      	movs	r0, #0
 80033c2:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
 80033c6:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80033c8:	f003 fb10 	bl	80069ec <strlen>
 80033cc:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 80033d0:	901a      	str	r0, [sp, #104]	; 0x68
 80033d2:	061a      	lsls	r2, r3, #24
 80033d4:	d504      	bpl.n	80033e0 <_svfprintf_r+0x38>
 80033d6:	f8da 3010 	ldr.w	r3, [sl, #16]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	f001 8001 	beq.w	80043e2 <_svfprintf_r+0x103a>
 80033e0:	2300      	movs	r3, #0
 80033e2:	f10d 00e3 	add.w	r0, sp, #227	; 0xe3
 80033e6:	f10d 0be4 	add.w	fp, sp, #228	; 0xe4
 80033ea:	a91f      	add	r1, sp, #124	; 0x7c
 80033ec:	9310      	str	r3, [sp, #64]	; 0x40
 80033ee:	933b      	str	r3, [sp, #236]	; 0xec
 80033f0:	933a      	str	r3, [sp, #232]	; 0xe8
 80033f2:	931c      	str	r3, [sp, #112]	; 0x70
 80033f4:	931b      	str	r3, [sp, #108]	; 0x6c
 80033f6:	930c      	str	r3, [sp, #48]	; 0x30
 80033f8:	ebc0 030b 	rsb	r3, r0, fp
 80033fc:	9007      	str	r0, [sp, #28]
 80033fe:	9139      	str	r1, [sp, #228]	; 0xe4
 8003400:	9409      	str	r4, [sp, #36]	; 0x24
 8003402:	460e      	mov	r6, r1
 8003404:	931d      	str	r3, [sp, #116]	; 0x74
 8003406:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003408:	7803      	ldrb	r3, [r0, #0]
 800340a:	2b00      	cmp	r3, #0
 800340c:	bf18      	it	ne
 800340e:	2b25      	cmpne	r3, #37	; 0x25
 8003410:	f000 80ae 	beq.w	8003570 <_svfprintf_r+0x1c8>
 8003414:	4607      	mov	r7, r0
 8003416:	f817 3f01 	ldrb.w	r3, [r7, #1]!
 800341a:	2b25      	cmp	r3, #37	; 0x25
 800341c:	bf18      	it	ne
 800341e:	2b00      	cmpne	r3, #0
 8003420:	d1f9      	bne.n	8003416 <_svfprintf_r+0x6e>
 8003422:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003424:	ebb7 0801 	subs.w	r8, r7, r1
 8003428:	d00d      	beq.n	8003446 <_svfprintf_r+0x9e>
 800342a:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 800342c:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 800342e:	3401      	adds	r4, #1
 8003430:	4445      	add	r5, r8
 8003432:	2c07      	cmp	r4, #7
 8003434:	e886 0102 	stmia.w	r6, {r1, r8}
 8003438:	953b      	str	r5, [sp, #236]	; 0xec
 800343a:	943a      	str	r4, [sp, #232]	; 0xe8
 800343c:	dc7c      	bgt.n	8003538 <_svfprintf_r+0x190>
 800343e:	3608      	adds	r6, #8
 8003440:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003442:	4442      	add	r2, r8
 8003444:	920c      	str	r2, [sp, #48]	; 0x30
 8003446:	783b      	ldrb	r3, [r7, #0]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d07d      	beq.n	8003548 <_svfprintf_r+0x1a0>
 800344c:	3701      	adds	r7, #1
 800344e:	9709      	str	r7, [sp, #36]	; 0x24
 8003450:	2300      	movs	r3, #0
 8003452:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003454:	930b      	str	r3, [sp, #44]	; 0x2c
 8003456:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
 800345a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800345e:	9308      	str	r3, [sp, #32]
 8003460:	2720      	movs	r7, #32
 8003462:	252b      	movs	r5, #43	; 0x2b
 8003464:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003468:	f1a3 0220 	sub.w	r2, r3, #32
 800346c:	2a58      	cmp	r2, #88	; 0x58
 800346e:	f200 823a 	bhi.w	80038e6 <_svfprintf_r+0x53e>
 8003472:	e8df f012 	tbh	[pc, r2, lsl #1]
 8003476:	024b      	.short	0x024b
 8003478:	02380238 	.word	0x02380238
 800347c:	02380253 	.word	0x02380253
 8003480:	02380238 	.word	0x02380238
 8003484:	02380238 	.word	0x02380238
 8003488:	02580238 	.word	0x02580238
 800348c:	0238007f 	.word	0x0238007f
 8003490:	0082005c 	.word	0x0082005c
 8003494:	009d0238 	.word	0x009d0238
 8003498:	00a200a2 	.word	0x00a200a2
 800349c:	00a200a2 	.word	0x00a200a2
 80034a0:	00a200a2 	.word	0x00a200a2
 80034a4:	00a200a2 	.word	0x00a200a2
 80034a8:	023800a2 	.word	0x023800a2
 80034ac:	02380238 	.word	0x02380238
 80034b0:	02380238 	.word	0x02380238
 80034b4:	02380238 	.word	0x02380238
 80034b8:	02380238 	.word	0x02380238
 80034bc:	00b50238 	.word	0x00b50238
 80034c0:	02380154 	.word	0x02380154
 80034c4:	02380154 	.word	0x02380154
 80034c8:	02380238 	.word	0x02380238
 80034cc:	018a0238 	.word	0x018a0238
 80034d0:	02380238 	.word	0x02380238
 80034d4:	0238018f 	.word	0x0238018f
 80034d8:	02380238 	.word	0x02380238
 80034dc:	02380238 	.word	0x02380238
 80034e0:	023801a6 	.word	0x023801a6
 80034e4:	01b90238 	.word	0x01b90238
 80034e8:	02380238 	.word	0x02380238
 80034ec:	02380238 	.word	0x02380238
 80034f0:	02380238 	.word	0x02380238
 80034f4:	02380238 	.word	0x02380238
 80034f8:	02380238 	.word	0x02380238
 80034fc:	02770292 	.word	0x02770292
 8003500:	01540154 	.word	0x01540154
 8003504:	028d0154 	.word	0x028d0154
 8003508:	02380277 	.word	0x02380277
 800350c:	02120238 	.word	0x02120238
 8003510:	02170238 	.word	0x02170238
 8003514:	02a40223 	.word	0x02a40223
 8003518:	023801dd 	.word	0x023801dd
 800351c:	023801e2 	.word	0x023801e2
 8003520:	02380263 	.word	0x02380263
 8003524:	02c70238 	.word	0x02c70238
 8003528:	4252      	negs	r2, r2
 800352a:	920b      	str	r2, [sp, #44]	; 0x2c
 800352c:	930e      	str	r3, [sp, #56]	; 0x38
 800352e:	9b08      	ldr	r3, [sp, #32]
 8003530:	f043 0304 	orr.w	r3, r3, #4
 8003534:	9308      	str	r3, [sp, #32]
 8003536:	e795      	b.n	8003464 <_svfprintf_r+0xbc>
 8003538:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800353a:	4651      	mov	r1, sl
 800353c:	465a      	mov	r2, fp
 800353e:	f003 fa85 	bl	8006a4c <__ssprint_r>
 8003542:	b940      	cbnz	r0, 8003556 <_svfprintf_r+0x1ae>
 8003544:	ae1f      	add	r6, sp, #124	; 0x7c
 8003546:	e77b      	b.n	8003440 <_svfprintf_r+0x98>
 8003548:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 800354a:	b123      	cbz	r3, 8003556 <_svfprintf_r+0x1ae>
 800354c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800354e:	4651      	mov	r1, sl
 8003550:	aa39      	add	r2, sp, #228	; 0xe4
 8003552:	f003 fa7b 	bl	8006a4c <__ssprint_r>
 8003556:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800355a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800355e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003560:	bf18      	it	ne
 8003562:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 8003566:	930c      	str	r3, [sp, #48]	; 0x30
 8003568:	980c      	ldr	r0, [sp, #48]	; 0x30
 800356a:	b045      	add	sp, #276	; 0x114
 800356c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003570:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8003572:	e768      	b.n	8003446 <_svfprintf_r+0x9e>
 8003574:	f88d 510f 	strb.w	r5, [sp, #271]	; 0x10f
 8003578:	e774      	b.n	8003464 <_svfprintf_r+0xbc>
 800357a:	f810 3b01 	ldrb.w	r3, [r0], #1
 800357e:	2b2a      	cmp	r3, #42	; 0x2a
 8003580:	f001 8040 	beq.w	8004604 <_svfprintf_r+0x125c>
 8003584:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003588:	2400      	movs	r4, #0
 800358a:	2a09      	cmp	r2, #9
 800358c:	f63f af6c 	bhi.w	8003468 <_svfprintf_r+0xc0>
 8003590:	4601      	mov	r1, r0
 8003592:	2400      	movs	r4, #0
 8003594:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003598:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800359c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80035a0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80035a4:	2a09      	cmp	r2, #9
 80035a6:	4608      	mov	r0, r1
 80035a8:	d9f4      	bls.n	8003594 <_svfprintf_r+0x1ec>
 80035aa:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
 80035ae:	e75b      	b.n	8003468 <_svfprintf_r+0xc0>
 80035b0:	9a08      	ldr	r2, [sp, #32]
 80035b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80035b6:	9208      	str	r2, [sp, #32]
 80035b8:	e754      	b.n	8003464 <_svfprintf_r+0xbc>
 80035ba:	4601      	mov	r1, r0
 80035bc:	2200      	movs	r2, #0
 80035be:	46b4      	mov	ip, r6
 80035c0:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 80035c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80035c8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80035cc:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80035d0:	2e09      	cmp	r6, #9
 80035d2:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80035d6:	4608      	mov	r0, r1
 80035d8:	d9f2      	bls.n	80035c0 <_svfprintf_r+0x218>
 80035da:	4666      	mov	r6, ip
 80035dc:	920b      	str	r2, [sp, #44]	; 0x2c
 80035de:	e743      	b.n	8003468 <_svfprintf_r+0xc0>
 80035e0:	9315      	str	r3, [sp, #84]	; 0x54
 80035e2:	9b08      	ldr	r3, [sp, #32]
 80035e4:	9009      	str	r0, [sp, #36]	; 0x24
 80035e6:	f043 0310 	orr.w	r3, r3, #16
 80035ea:	9308      	str	r3, [sp, #32]
 80035ec:	9808      	ldr	r0, [sp, #32]
 80035ee:	06c3      	lsls	r3, r0, #27
 80035f0:	f100 81be 	bmi.w	8003970 <_svfprintf_r+0x5c8>
 80035f4:	9a08      	ldr	r2, [sp, #32]
 80035f6:	0655      	lsls	r5, r2, #25
 80035f8:	f140 81ba 	bpl.w	8003970 <_svfprintf_r+0x5c8>
 80035fc:	980e      	ldr	r0, [sp, #56]	; 0x38
 80035fe:	f9b0 3000 	ldrsh.w	r3, [r0]
 8003602:	3004      	adds	r0, #4
 8003604:	2b00      	cmp	r3, #0
 8003606:	900e      	str	r0, [sp, #56]	; 0x38
 8003608:	f2c0 81b9 	blt.w	800397e <_svfprintf_r+0x5d6>
 800360c:	bf0c      	ite	eq
 800360e:	2100      	moveq	r1, #0
 8003610:	2101      	movne	r1, #1
 8003612:	2201      	movs	r2, #1
 8003614:	2c00      	cmp	r4, #0
 8003616:	bfa2      	ittt	ge
 8003618:	9808      	ldrge	r0, [sp, #32]
 800361a:	f020 0080 	bicge.w	r0, r0, #128	; 0x80
 800361e:	9008      	strge	r0, [sp, #32]
 8003620:	2c00      	cmp	r4, #0
 8003622:	bf18      	it	ne
 8003624:	f041 0101 	orrne.w	r1, r1, #1
 8003628:	2900      	cmp	r1, #0
 800362a:	f000 8323 	beq.w	8003c74 <_svfprintf_r+0x8cc>
 800362e:	2a01      	cmp	r2, #1
 8003630:	f000 845e 	beq.w	8003ef0 <_svfprintf_r+0xb48>
 8003634:	2a02      	cmp	r2, #2
 8003636:	bf18      	it	ne
 8003638:	465a      	movne	r2, fp
 800363a:	d102      	bne.n	8003642 <_svfprintf_r+0x29a>
 800363c:	f000 bc47 	b.w	8003ece <_svfprintf_r+0xb26>
 8003640:	4602      	mov	r2, r0
 8003642:	f003 0107 	and.w	r1, r3, #7
 8003646:	3130      	adds	r1, #48	; 0x30
 8003648:	1e50      	subs	r0, r2, #1
 800364a:	08db      	lsrs	r3, r3, #3
 800364c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003650:	d1f6      	bne.n	8003640 <_svfprintf_r+0x298>
 8003652:	9b08      	ldr	r3, [sp, #32]
 8003654:	9011      	str	r0, [sp, #68]	; 0x44
 8003656:	07dd      	lsls	r5, r3, #31
 8003658:	d507      	bpl.n	800366a <_svfprintf_r+0x2c2>
 800365a:	2930      	cmp	r1, #48	; 0x30
 800365c:	f000 8727 	beq.w	80044ae <_svfprintf_r+0x1106>
 8003660:	1e90      	subs	r0, r2, #2
 8003662:	2330      	movs	r3, #48	; 0x30
 8003664:	9011      	str	r0, [sp, #68]	; 0x44
 8003666:	f802 3c02 	strb.w	r3, [r2, #-2]
 800366a:	ebc0 030b 	rsb	r3, r0, fp
 800366e:	930d      	str	r3, [sp, #52]	; 0x34
 8003670:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003672:	2000      	movs	r0, #0
 8003674:	42a3      	cmp	r3, r4
 8003676:	bfb8      	it	lt
 8003678:	4623      	movlt	r3, r4
 800367a:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 800367e:	930a      	str	r3, [sp, #40]	; 0x28
 8003680:	9412      	str	r4, [sp, #72]	; 0x48
 8003682:	9016      	str	r0, [sp, #88]	; 0x58
 8003684:	b111      	cbz	r1, 800368c <_svfprintf_r+0x2e4>
 8003686:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003688:	3301      	adds	r3, #1
 800368a:	930a      	str	r3, [sp, #40]	; 0x28
 800368c:	9b08      	ldr	r3, [sp, #32]
 800368e:	f013 0302 	ands.w	r3, r3, #2
 8003692:	9313      	str	r3, [sp, #76]	; 0x4c
 8003694:	d002      	beq.n	800369c <_svfprintf_r+0x2f4>
 8003696:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003698:	3002      	adds	r0, #2
 800369a:	900a      	str	r0, [sp, #40]	; 0x28
 800369c:	9b08      	ldr	r3, [sp, #32]
 800369e:	f013 0384 	ands.w	r3, r3, #132	; 0x84
 80036a2:	9314      	str	r3, [sp, #80]	; 0x50
 80036a4:	f040 81bb 	bne.w	8003a1e <_svfprintf_r+0x676>
 80036a8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80036aa:	990a      	ldr	r1, [sp, #40]	; 0x28
 80036ac:	1a47      	subs	r7, r0, r1
 80036ae:	2f00      	cmp	r7, #0
 80036b0:	f340 81b5 	ble.w	8003a1e <_svfprintf_r+0x676>
 80036b4:	2f10      	cmp	r7, #16
 80036b6:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80036b8:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80036ba:	f8df 8344 	ldr.w	r8, [pc, #836]	; 8003a00 <_svfprintf_r+0x658>
 80036be:	dd22      	ble.n	8003706 <_svfprintf_r+0x35e>
 80036c0:	4623      	mov	r3, r4
 80036c2:	f04f 0910 	mov.w	r9, #16
 80036c6:	4644      	mov	r4, r8
 80036c8:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 80036cc:	e003      	b.n	80036d6 <_svfprintf_r+0x32e>
 80036ce:	3f10      	subs	r7, #16
 80036d0:	3608      	adds	r6, #8
 80036d2:	2f10      	cmp	r7, #16
 80036d4:	dd15      	ble.n	8003702 <_svfprintf_r+0x35a>
 80036d6:	3301      	adds	r3, #1
 80036d8:	3510      	adds	r5, #16
 80036da:	2b07      	cmp	r3, #7
 80036dc:	e886 0210 	stmia.w	r6, {r4, r9}
 80036e0:	953b      	str	r5, [sp, #236]	; 0xec
 80036e2:	933a      	str	r3, [sp, #232]	; 0xe8
 80036e4:	ddf3      	ble.n	80036ce <_svfprintf_r+0x326>
 80036e6:	4640      	mov	r0, r8
 80036e8:	4651      	mov	r1, sl
 80036ea:	465a      	mov	r2, fp
 80036ec:	f003 f9ae 	bl	8006a4c <__ssprint_r>
 80036f0:	2800      	cmp	r0, #0
 80036f2:	f47f af30 	bne.w	8003556 <_svfprintf_r+0x1ae>
 80036f6:	3f10      	subs	r7, #16
 80036f8:	2f10      	cmp	r7, #16
 80036fa:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80036fc:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 80036fe:	ae1f      	add	r6, sp, #124	; 0x7c
 8003700:	dce9      	bgt.n	80036d6 <_svfprintf_r+0x32e>
 8003702:	46a0      	mov	r8, r4
 8003704:	461c      	mov	r4, r3
 8003706:	3401      	adds	r4, #1
 8003708:	19ed      	adds	r5, r5, r7
 800370a:	2c07      	cmp	r4, #7
 800370c:	f8c6 8000 	str.w	r8, [r6]
 8003710:	6077      	str	r7, [r6, #4]
 8003712:	953b      	str	r5, [sp, #236]	; 0xec
 8003714:	943a      	str	r4, [sp, #232]	; 0xe8
 8003716:	f300 8413 	bgt.w	8003f40 <_svfprintf_r+0xb98>
 800371a:	3608      	adds	r6, #8
 800371c:	e180      	b.n	8003a20 <_svfprintf_r+0x678>
 800371e:	9009      	str	r0, [sp, #36]	; 0x24
 8003720:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003722:	9315      	str	r3, [sp, #84]	; 0x54
 8003724:	1dc3      	adds	r3, r0, #7
 8003726:	f023 0307 	bic.w	r3, r3, #7
 800372a:	f8d3 8000 	ldr.w	r8, [r3]
 800372e:	685d      	ldr	r5, [r3, #4]
 8003730:	3308      	adds	r3, #8
 8003732:	930e      	str	r3, [sp, #56]	; 0x38
 8003734:	4642      	mov	r2, r8
 8003736:	462b      	mov	r3, r5
 8003738:	4629      	mov	r1, r5
 800373a:	4640      	mov	r0, r8
 800373c:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
 8003740:	f003 f81c 	bl	800677c <__fpclassifyd>
 8003744:	2801      	cmp	r0, #1
 8003746:	4629      	mov	r1, r5
 8003748:	4640      	mov	r0, r8
 800374a:	f040 84ce 	bne.w	80040ea <_svfprintf_r+0xd42>
 800374e:	2200      	movs	r2, #0
 8003750:	2300      	movs	r3, #0
 8003752:	f004 fd4f 	bl	80081f4 <__aeabi_dcmplt>
 8003756:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 800375a:	b110      	cbz	r0, 8003762 <_svfprintf_r+0x3ba>
 800375c:	212d      	movs	r1, #45	; 0x2d
 800375e:	f88d 110f 	strb.w	r1, [sp, #271]	; 0x10f
 8003762:	2303      	movs	r3, #3
 8003764:	930a      	str	r3, [sp, #40]	; 0x28
 8003766:	2300      	movs	r3, #0
 8003768:	9312      	str	r3, [sp, #72]	; 0x48
 800376a:	4aa1      	ldr	r2, [pc, #644]	; (80039f0 <_svfprintf_r+0x648>)
 800376c:	4ba1      	ldr	r3, [pc, #644]	; (80039f4 <_svfprintf_r+0x64c>)
 800376e:	9815      	ldr	r0, [sp, #84]	; 0x54
 8003770:	2847      	cmp	r0, #71	; 0x47
 8003772:	bfd8      	it	le
 8003774:	461a      	movle	r2, r3
 8003776:	9211      	str	r2, [sp, #68]	; 0x44
 8003778:	9a08      	ldr	r2, [sp, #32]
 800377a:	2303      	movs	r3, #3
 800377c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003780:	930d      	str	r3, [sp, #52]	; 0x34
 8003782:	2300      	movs	r3, #0
 8003784:	9208      	str	r2, [sp, #32]
 8003786:	9316      	str	r3, [sp, #88]	; 0x58
 8003788:	e77c      	b.n	8003684 <_svfprintf_r+0x2dc>
 800378a:	9b08      	ldr	r3, [sp, #32]
 800378c:	f043 0308 	orr.w	r3, r3, #8
 8003790:	9308      	str	r3, [sp, #32]
 8003792:	e667      	b.n	8003464 <_svfprintf_r+0xbc>
 8003794:	9908      	ldr	r1, [sp, #32]
 8003796:	9009      	str	r0, [sp, #36]	; 0x24
 8003798:	f041 0110 	orr.w	r1, r1, #16
 800379c:	9108      	str	r1, [sp, #32]
 800379e:	9a08      	ldr	r2, [sp, #32]
 80037a0:	9315      	str	r3, [sp, #84]	; 0x54
 80037a2:	f012 0110 	ands.w	r1, r2, #16
 80037a6:	f000 8090 	beq.w	80038ca <_svfprintf_r+0x522>
 80037aa:	980e      	ldr	r0, [sp, #56]	; 0x38
 80037ac:	2200      	movs	r2, #0
 80037ae:	6803      	ldr	r3, [r0, #0]
 80037b0:	1a99      	subs	r1, r3, r2
 80037b2:	bf18      	it	ne
 80037b4:	2101      	movne	r1, #1
 80037b6:	3004      	adds	r0, #4
 80037b8:	900e      	str	r0, [sp, #56]	; 0x38
 80037ba:	2000      	movs	r0, #0
 80037bc:	f88d 010f 	strb.w	r0, [sp, #271]	; 0x10f
 80037c0:	e728      	b.n	8003614 <_svfprintf_r+0x26c>
 80037c2:	9908      	ldr	r1, [sp, #32]
 80037c4:	9009      	str	r0, [sp, #36]	; 0x24
 80037c6:	f041 0110 	orr.w	r1, r1, #16
 80037ca:	9108      	str	r1, [sp, #32]
 80037cc:	9a08      	ldr	r2, [sp, #32]
 80037ce:	9315      	str	r3, [sp, #84]	; 0x54
 80037d0:	06d0      	lsls	r0, r2, #27
 80037d2:	f140 80b9 	bpl.w	8003948 <_svfprintf_r+0x5a0>
 80037d6:	980e      	ldr	r0, [sp, #56]	; 0x38
 80037d8:	2201      	movs	r2, #1
 80037da:	6803      	ldr	r3, [r0, #0]
 80037dc:	1c19      	adds	r1, r3, #0
 80037de:	bf18      	it	ne
 80037e0:	2101      	movne	r1, #1
 80037e2:	3004      	adds	r0, #4
 80037e4:	900e      	str	r0, [sp, #56]	; 0x38
 80037e6:	e7e8      	b.n	80037ba <_svfprintf_r+0x412>
 80037e8:	4a83      	ldr	r2, [pc, #524]	; (80039f8 <_svfprintf_r+0x650>)
 80037ea:	9315      	str	r3, [sp, #84]	; 0x54
 80037ec:	9b08      	ldr	r3, [sp, #32]
 80037ee:	921c      	str	r2, [sp, #112]	; 0x70
 80037f0:	06da      	lsls	r2, r3, #27
 80037f2:	9009      	str	r0, [sp, #36]	; 0x24
 80037f4:	f100 810e 	bmi.w	8003a14 <_svfprintf_r+0x66c>
 80037f8:	9908      	ldr	r1, [sp, #32]
 80037fa:	064b      	lsls	r3, r1, #25
 80037fc:	f140 810a 	bpl.w	8003a14 <_svfprintf_r+0x66c>
 8003800:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003802:	8813      	ldrh	r3, [r2, #0]
 8003804:	3204      	adds	r2, #4
 8003806:	920e      	str	r2, [sp, #56]	; 0x38
 8003808:	1c19      	adds	r1, r3, #0
 800380a:	9a08      	ldr	r2, [sp, #32]
 800380c:	bf18      	it	ne
 800380e:	2101      	movne	r1, #1
 8003810:	420a      	tst	r2, r1
 8003812:	f000 83ca 	beq.w	8003faa <_svfprintf_r+0xc02>
 8003816:	9908      	ldr	r1, [sp, #32]
 8003818:	9815      	ldr	r0, [sp, #84]	; 0x54
 800381a:	2230      	movs	r2, #48	; 0x30
 800381c:	f041 0102 	orr.w	r1, r1, #2
 8003820:	f88d 210c 	strb.w	r2, [sp, #268]	; 0x10c
 8003824:	9108      	str	r1, [sp, #32]
 8003826:	f88d 010d 	strb.w	r0, [sp, #269]	; 0x10d
 800382a:	2101      	movs	r1, #1
 800382c:	2202      	movs	r2, #2
 800382e:	e7c4      	b.n	80037ba <_svfprintf_r+0x412>
 8003830:	9b08      	ldr	r3, [sp, #32]
 8003832:	f043 0310 	orr.w	r3, r3, #16
 8003836:	9308      	str	r3, [sp, #32]
 8003838:	e614      	b.n	8003464 <_svfprintf_r+0xbc>
 800383a:	9315      	str	r3, [sp, #84]	; 0x54
 800383c:	2500      	movs	r5, #0
 800383e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003840:	f88d 510f 	strb.w	r5, [sp, #271]	; 0x10f
 8003844:	9009      	str	r0, [sp, #36]	; 0x24
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	980e      	ldr	r0, [sp, #56]	; 0x38
 800384a:	9311      	str	r3, [sp, #68]	; 0x44
 800384c:	1d07      	adds	r7, r0, #4
 800384e:	2b00      	cmp	r3, #0
 8003850:	f000 8640 	beq.w	80044d4 <_svfprintf_r+0x112c>
 8003854:	2c00      	cmp	r4, #0
 8003856:	9811      	ldr	r0, [sp, #68]	; 0x44
 8003858:	f2c0 85f7 	blt.w	800444a <_svfprintf_r+0x10a2>
 800385c:	4629      	mov	r1, r5
 800385e:	4622      	mov	r2, r4
 8003860:	f002 fab0 	bl	8005dc4 <memchr>
 8003864:	2800      	cmp	r0, #0
 8003866:	f000 8664 	beq.w	8004532 <_svfprintf_r+0x118a>
 800386a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800386c:	9512      	str	r5, [sp, #72]	; 0x48
 800386e:	1a40      	subs	r0, r0, r1
 8003870:	42a0      	cmp	r0, r4
 8003872:	900d      	str	r0, [sp, #52]	; 0x34
 8003874:	bfd5      	itete	le
 8003876:	9b0d      	ldrle	r3, [sp, #52]	; 0x34
 8003878:	ea24 72e4 	bicgt.w	r2, r4, r4, asr #31
 800387c:	ea23 73e3 	bicle.w	r3, r3, r3, asr #31
 8003880:	920a      	strgt	r2, [sp, #40]	; 0x28
 8003882:	bfc3      	ittte	gt
 8003884:	f89d 110f 	ldrbgt.w	r1, [sp, #271]	; 0x10f
 8003888:	970e      	strgt	r7, [sp, #56]	; 0x38
 800388a:	940d      	strgt	r4, [sp, #52]	; 0x34
 800388c:	930a      	strle	r3, [sp, #40]	; 0x28
 800388e:	bfdc      	itt	le
 8003890:	f89d 110f 	ldrble.w	r1, [sp, #271]	; 0x10f
 8003894:	970e      	strle	r7, [sp, #56]	; 0x38
 8003896:	9516      	str	r5, [sp, #88]	; 0x58
 8003898:	e6f4      	b.n	8003684 <_svfprintf_r+0x2dc>
 800389a:	9a08      	ldr	r2, [sp, #32]
 800389c:	f042 0210 	orr.w	r2, r2, #16
 80038a0:	9208      	str	r2, [sp, #32]
 80038a2:	e5df      	b.n	8003464 <_svfprintf_r+0xbc>
 80038a4:	9009      	str	r0, [sp, #36]	; 0x24
 80038a6:	9808      	ldr	r0, [sp, #32]
 80038a8:	06c3      	lsls	r3, r0, #27
 80038aa:	f140 843d 	bpl.w	8004128 <_svfprintf_r+0xd80>
 80038ae:	990e      	ldr	r1, [sp, #56]	; 0x38
 80038b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80038b2:	680b      	ldr	r3, [r1, #0]
 80038b4:	3104      	adds	r1, #4
 80038b6:	910e      	str	r1, [sp, #56]	; 0x38
 80038b8:	601a      	str	r2, [r3, #0]
 80038ba:	e5a4      	b.n	8003406 <_svfprintf_r+0x5e>
 80038bc:	9a08      	ldr	r2, [sp, #32]
 80038be:	9009      	str	r0, [sp, #36]	; 0x24
 80038c0:	f012 0110 	ands.w	r1, r2, #16
 80038c4:	9315      	str	r3, [sp, #84]	; 0x54
 80038c6:	f47f af70 	bne.w	80037aa <_svfprintf_r+0x402>
 80038ca:	9b08      	ldr	r3, [sp, #32]
 80038cc:	f013 0240 	ands.w	r2, r3, #64	; 0x40
 80038d0:	f000 8435 	beq.w	800413e <_svfprintf_r+0xd96>
 80038d4:	980e      	ldr	r0, [sp, #56]	; 0x38
 80038d6:	460a      	mov	r2, r1
 80038d8:	8803      	ldrh	r3, [r0, #0]
 80038da:	1c19      	adds	r1, r3, #0
 80038dc:	bf18      	it	ne
 80038de:	2101      	movne	r1, #1
 80038e0:	3004      	adds	r0, #4
 80038e2:	900e      	str	r0, [sp, #56]	; 0x38
 80038e4:	e769      	b.n	80037ba <_svfprintf_r+0x412>
 80038e6:	9009      	str	r0, [sp, #36]	; 0x24
 80038e8:	9315      	str	r3, [sp, #84]	; 0x54
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	f43f ae2c 	beq.w	8003548 <_svfprintf_r+0x1a0>
 80038f0:	2101      	movs	r1, #1
 80038f2:	f88d 30bc 	strb.w	r3, [sp, #188]	; 0xbc
 80038f6:	aa2f      	add	r2, sp, #188	; 0xbc
 80038f8:	2300      	movs	r3, #0
 80038fa:	910a      	str	r1, [sp, #40]	; 0x28
 80038fc:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
 8003900:	910d      	str	r1, [sp, #52]	; 0x34
 8003902:	9211      	str	r2, [sp, #68]	; 0x44
 8003904:	2300      	movs	r3, #0
 8003906:	9312      	str	r3, [sp, #72]	; 0x48
 8003908:	9316      	str	r3, [sp, #88]	; 0x58
 800390a:	e6bf      	b.n	800368c <_svfprintf_r+0x2e4>
 800390c:	f89d 310f 	ldrb.w	r3, [sp, #271]	; 0x10f
 8003910:	2b00      	cmp	r3, #0
 8003912:	f47f ada7 	bne.w	8003464 <_svfprintf_r+0xbc>
 8003916:	f88d 710f 	strb.w	r7, [sp, #271]	; 0x10f
 800391a:	e5a3      	b.n	8003464 <_svfprintf_r+0xbc>
 800391c:	9a08      	ldr	r2, [sp, #32]
 800391e:	f042 0201 	orr.w	r2, r2, #1
 8003922:	9208      	str	r2, [sp, #32]
 8003924:	e59e      	b.n	8003464 <_svfprintf_r+0xbc>
 8003926:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003928:	990e      	ldr	r1, [sp, #56]	; 0x38
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	930b      	str	r3, [sp, #44]	; 0x2c
 800392e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003930:	1d0b      	adds	r3, r1, #4
 8003932:	2a00      	cmp	r2, #0
 8003934:	f6ff adf8 	blt.w	8003528 <_svfprintf_r+0x180>
 8003938:	930e      	str	r3, [sp, #56]	; 0x38
 800393a:	e593      	b.n	8003464 <_svfprintf_r+0xbc>
 800393c:	9a08      	ldr	r2, [sp, #32]
 800393e:	9009      	str	r0, [sp, #36]	; 0x24
 8003940:	06d0      	lsls	r0, r2, #27
 8003942:	9315      	str	r3, [sp, #84]	; 0x54
 8003944:	f53f af47 	bmi.w	80037d6 <_svfprintf_r+0x42e>
 8003948:	9908      	ldr	r1, [sp, #32]
 800394a:	0649      	lsls	r1, r1, #25
 800394c:	f140 83e8 	bpl.w	8004120 <_svfprintf_r+0xd78>
 8003950:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003952:	8813      	ldrh	r3, [r2, #0]
 8003954:	2201      	movs	r2, #1
 8003956:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003958:	1c19      	adds	r1, r3, #0
 800395a:	bf18      	it	ne
 800395c:	2101      	movne	r1, #1
 800395e:	3004      	adds	r0, #4
 8003960:	900e      	str	r0, [sp, #56]	; 0x38
 8003962:	e72a      	b.n	80037ba <_svfprintf_r+0x412>
 8003964:	9009      	str	r0, [sp, #36]	; 0x24
 8003966:	9808      	ldr	r0, [sp, #32]
 8003968:	9315      	str	r3, [sp, #84]	; 0x54
 800396a:	06c3      	lsls	r3, r0, #27
 800396c:	f57f ae42 	bpl.w	80035f4 <_svfprintf_r+0x24c>
 8003970:	990e      	ldr	r1, [sp, #56]	; 0x38
 8003972:	680b      	ldr	r3, [r1, #0]
 8003974:	3104      	adds	r1, #4
 8003976:	2b00      	cmp	r3, #0
 8003978:	910e      	str	r1, [sp, #56]	; 0x38
 800397a:	f6bf ae47 	bge.w	800360c <_svfprintf_r+0x264>
 800397e:	425b      	negs	r3, r3
 8003980:	222d      	movs	r2, #45	; 0x2d
 8003982:	1c19      	adds	r1, r3, #0
 8003984:	f88d 210f 	strb.w	r2, [sp, #271]	; 0x10f
 8003988:	bf18      	it	ne
 800398a:	2101      	movne	r1, #1
 800398c:	2201      	movs	r2, #1
 800398e:	e641      	b.n	8003614 <_svfprintf_r+0x26c>
 8003990:	9908      	ldr	r1, [sp, #32]
 8003992:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8003996:	9108      	str	r1, [sp, #32]
 8003998:	e564      	b.n	8003464 <_svfprintf_r+0xbc>
 800399a:	9315      	str	r3, [sp, #84]	; 0x54
 800399c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800399e:	990e      	ldr	r1, [sp, #56]	; 0x38
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	9009      	str	r0, [sp, #36]	; 0x24
 80039a4:	3104      	adds	r1, #4
 80039a6:	2001      	movs	r0, #1
 80039a8:	f88d 30bc 	strb.w	r3, [sp, #188]	; 0xbc
 80039ac:	aa2f      	add	r2, sp, #188	; 0xbc
 80039ae:	2300      	movs	r3, #0
 80039b0:	900a      	str	r0, [sp, #40]	; 0x28
 80039b2:	910e      	str	r1, [sp, #56]	; 0x38
 80039b4:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
 80039b8:	900d      	str	r0, [sp, #52]	; 0x34
 80039ba:	9211      	str	r2, [sp, #68]	; 0x44
 80039bc:	e7a2      	b.n	8003904 <_svfprintf_r+0x55c>
 80039be:	9a08      	ldr	r2, [sp, #32]
 80039c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80039c2:	990e      	ldr	r1, [sp, #56]	; 0x38
 80039c4:	f042 0202 	orr.w	r2, r2, #2
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	9208      	str	r2, [sp, #32]
 80039cc:	2230      	movs	r2, #48	; 0x30
 80039ce:	3104      	adds	r1, #4
 80039d0:	f88d 210c 	strb.w	r2, [sp, #268]	; 0x10c
 80039d4:	4a09      	ldr	r2, [pc, #36]	; (80039fc <_svfprintf_r+0x654>)
 80039d6:	9009      	str	r0, [sp, #36]	; 0x24
 80039d8:	910e      	str	r1, [sp, #56]	; 0x38
 80039da:	2078      	movs	r0, #120	; 0x78
 80039dc:	1c19      	adds	r1, r3, #0
 80039de:	bf18      	it	ne
 80039e0:	2101      	movne	r1, #1
 80039e2:	921c      	str	r2, [sp, #112]	; 0x70
 80039e4:	f88d 010d 	strb.w	r0, [sp, #269]	; 0x10d
 80039e8:	2202      	movs	r2, #2
 80039ea:	9015      	str	r0, [sp, #84]	; 0x54
 80039ec:	e6e5      	b.n	80037ba <_svfprintf_r+0x412>
 80039ee:	bf00      	nop
 80039f0:	080088cc 	.word	0x080088cc
 80039f4:	080088c8 	.word	0x080088c8
 80039f8:	080088d8 	.word	0x080088d8
 80039fc:	080088ec 	.word	0x080088ec
 8003a00:	08008638 	.word	0x08008638
 8003a04:	9315      	str	r3, [sp, #84]	; 0x54
 8003a06:	9b08      	ldr	r3, [sp, #32]
 8003a08:	49a4      	ldr	r1, [pc, #656]	; (8003c9c <_svfprintf_r+0x8f4>)
 8003a0a:	06da      	lsls	r2, r3, #27
 8003a0c:	9009      	str	r0, [sp, #36]	; 0x24
 8003a0e:	911c      	str	r1, [sp, #112]	; 0x70
 8003a10:	f57f aef2 	bpl.w	80037f8 <_svfprintf_r+0x450>
 8003a14:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003a16:	6803      	ldr	r3, [r0, #0]
 8003a18:	3004      	adds	r0, #4
 8003a1a:	900e      	str	r0, [sp, #56]	; 0x38
 8003a1c:	e6f4      	b.n	8003808 <_svfprintf_r+0x460>
 8003a1e:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003a20:	f89d 310f 	ldrb.w	r3, [sp, #271]	; 0x10f
 8003a24:	b16b      	cbz	r3, 8003a42 <_svfprintf_r+0x69a>
 8003a26:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003a28:	f20d 130f 	addw	r3, sp, #271	; 0x10f
 8003a2c:	3401      	adds	r4, #1
 8003a2e:	6033      	str	r3, [r6, #0]
 8003a30:	3501      	adds	r5, #1
 8003a32:	2301      	movs	r3, #1
 8003a34:	2c07      	cmp	r4, #7
 8003a36:	6073      	str	r3, [r6, #4]
 8003a38:	953b      	str	r5, [sp, #236]	; 0xec
 8003a3a:	943a      	str	r4, [sp, #232]	; 0xe8
 8003a3c:	f300 81f4 	bgt.w	8003e28 <_svfprintf_r+0xa80>
 8003a40:	3608      	adds	r6, #8
 8003a42:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003a44:	b163      	cbz	r3, 8003a60 <_svfprintf_r+0x6b8>
 8003a46:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003a48:	ab43      	add	r3, sp, #268	; 0x10c
 8003a4a:	3401      	adds	r4, #1
 8003a4c:	6033      	str	r3, [r6, #0]
 8003a4e:	3502      	adds	r5, #2
 8003a50:	2302      	movs	r3, #2
 8003a52:	2c07      	cmp	r4, #7
 8003a54:	6073      	str	r3, [r6, #4]
 8003a56:	953b      	str	r5, [sp, #236]	; 0xec
 8003a58:	943a      	str	r4, [sp, #232]	; 0xe8
 8003a5a:	f300 81da 	bgt.w	8003e12 <_svfprintf_r+0xa6a>
 8003a5e:	3608      	adds	r6, #8
 8003a60:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003a62:	2b80      	cmp	r3, #128	; 0x80
 8003a64:	f000 8122 	beq.w	8003cac <_svfprintf_r+0x904>
 8003a68:	9812      	ldr	r0, [sp, #72]	; 0x48
 8003a6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003a6c:	1ac7      	subs	r7, r0, r3
 8003a6e:	2f00      	cmp	r7, #0
 8003a70:	dd32      	ble.n	8003ad8 <_svfprintf_r+0x730>
 8003a72:	2f10      	cmp	r7, #16
 8003a74:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003a76:	f8df 822c 	ldr.w	r8, [pc, #556]	; 8003ca4 <_svfprintf_r+0x8fc>
 8003a7a:	dd22      	ble.n	8003ac2 <_svfprintf_r+0x71a>
 8003a7c:	4623      	mov	r3, r4
 8003a7e:	f04f 0910 	mov.w	r9, #16
 8003a82:	4644      	mov	r4, r8
 8003a84:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8003a88:	e003      	b.n	8003a92 <_svfprintf_r+0x6ea>
 8003a8a:	3f10      	subs	r7, #16
 8003a8c:	3608      	adds	r6, #8
 8003a8e:	2f10      	cmp	r7, #16
 8003a90:	dd15      	ble.n	8003abe <_svfprintf_r+0x716>
 8003a92:	3301      	adds	r3, #1
 8003a94:	3510      	adds	r5, #16
 8003a96:	2b07      	cmp	r3, #7
 8003a98:	e886 0210 	stmia.w	r6, {r4, r9}
 8003a9c:	953b      	str	r5, [sp, #236]	; 0xec
 8003a9e:	933a      	str	r3, [sp, #232]	; 0xe8
 8003aa0:	ddf3      	ble.n	8003a8a <_svfprintf_r+0x6e2>
 8003aa2:	4640      	mov	r0, r8
 8003aa4:	4651      	mov	r1, sl
 8003aa6:	465a      	mov	r2, fp
 8003aa8:	f002 ffd0 	bl	8006a4c <__ssprint_r>
 8003aac:	2800      	cmp	r0, #0
 8003aae:	f47f ad52 	bne.w	8003556 <_svfprintf_r+0x1ae>
 8003ab2:	3f10      	subs	r7, #16
 8003ab4:	2f10      	cmp	r7, #16
 8003ab6:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003ab8:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8003aba:	ae1f      	add	r6, sp, #124	; 0x7c
 8003abc:	dce9      	bgt.n	8003a92 <_svfprintf_r+0x6ea>
 8003abe:	46a0      	mov	r8, r4
 8003ac0:	461c      	mov	r4, r3
 8003ac2:	3401      	adds	r4, #1
 8003ac4:	19ed      	adds	r5, r5, r7
 8003ac6:	2c07      	cmp	r4, #7
 8003ac8:	f8c6 8000 	str.w	r8, [r6]
 8003acc:	6077      	str	r7, [r6, #4]
 8003ace:	953b      	str	r5, [sp, #236]	; 0xec
 8003ad0:	943a      	str	r4, [sp, #232]	; 0xe8
 8003ad2:	f300 8193 	bgt.w	8003dfc <_svfprintf_r+0xa54>
 8003ad6:	3608      	adds	r6, #8
 8003ad8:	9908      	ldr	r1, [sp, #32]
 8003ada:	05ca      	lsls	r2, r1, #23
 8003adc:	d472      	bmi.n	8003bc4 <_svfprintf_r+0x81c>
 8003ade:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003ae0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003ae2:	3401      	adds	r4, #1
 8003ae4:	9811      	ldr	r0, [sp, #68]	; 0x44
 8003ae6:	18ed      	adds	r5, r5, r3
 8003ae8:	2c07      	cmp	r4, #7
 8003aea:	e886 0009 	stmia.w	r6, {r0, r3}
 8003aee:	953b      	str	r5, [sp, #236]	; 0xec
 8003af0:	943a      	str	r4, [sp, #232]	; 0xe8
 8003af2:	dc5c      	bgt.n	8003bae <_svfprintf_r+0x806>
 8003af4:	3608      	adds	r6, #8
 8003af6:	9908      	ldr	r1, [sp, #32]
 8003af8:	074b      	lsls	r3, r1, #29
 8003afa:	d53e      	bpl.n	8003b7a <_svfprintf_r+0x7d2>
 8003afc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003afe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003b00:	1ad7      	subs	r7, r2, r3
 8003b02:	2f00      	cmp	r7, #0
 8003b04:	dd39      	ble.n	8003b7a <_svfprintf_r+0x7d2>
 8003b06:	2f10      	cmp	r7, #16
 8003b08:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003b0a:	f8df 819c 	ldr.w	r8, [pc, #412]	; 8003ca8 <_svfprintf_r+0x900>
 8003b0e:	dd22      	ble.n	8003b56 <_svfprintf_r+0x7ae>
 8003b10:	4623      	mov	r3, r4
 8003b12:	f04f 0910 	mov.w	r9, #16
 8003b16:	4644      	mov	r4, r8
 8003b18:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8003b1c:	e003      	b.n	8003b26 <_svfprintf_r+0x77e>
 8003b1e:	3f10      	subs	r7, #16
 8003b20:	3608      	adds	r6, #8
 8003b22:	2f10      	cmp	r7, #16
 8003b24:	dd15      	ble.n	8003b52 <_svfprintf_r+0x7aa>
 8003b26:	3301      	adds	r3, #1
 8003b28:	3510      	adds	r5, #16
 8003b2a:	2b07      	cmp	r3, #7
 8003b2c:	e886 0210 	stmia.w	r6, {r4, r9}
 8003b30:	953b      	str	r5, [sp, #236]	; 0xec
 8003b32:	933a      	str	r3, [sp, #232]	; 0xe8
 8003b34:	ddf3      	ble.n	8003b1e <_svfprintf_r+0x776>
 8003b36:	4640      	mov	r0, r8
 8003b38:	4651      	mov	r1, sl
 8003b3a:	465a      	mov	r2, fp
 8003b3c:	f002 ff86 	bl	8006a4c <__ssprint_r>
 8003b40:	2800      	cmp	r0, #0
 8003b42:	f47f ad08 	bne.w	8003556 <_svfprintf_r+0x1ae>
 8003b46:	3f10      	subs	r7, #16
 8003b48:	2f10      	cmp	r7, #16
 8003b4a:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003b4c:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8003b4e:	ae1f      	add	r6, sp, #124	; 0x7c
 8003b50:	dce9      	bgt.n	8003b26 <_svfprintf_r+0x77e>
 8003b52:	46a0      	mov	r8, r4
 8003b54:	461c      	mov	r4, r3
 8003b56:	3401      	adds	r4, #1
 8003b58:	197d      	adds	r5, r7, r5
 8003b5a:	2c07      	cmp	r4, #7
 8003b5c:	f8c6 8000 	str.w	r8, [r6]
 8003b60:	6077      	str	r7, [r6, #4]
 8003b62:	953b      	str	r5, [sp, #236]	; 0xec
 8003b64:	943a      	str	r4, [sp, #232]	; 0xe8
 8003b66:	dd08      	ble.n	8003b7a <_svfprintf_r+0x7d2>
 8003b68:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8003b6a:	4651      	mov	r1, sl
 8003b6c:	465a      	mov	r2, fp
 8003b6e:	f002 ff6d 	bl	8006a4c <__ssprint_r>
 8003b72:	2800      	cmp	r0, #0
 8003b74:	f47f acef 	bne.w	8003556 <_svfprintf_r+0x1ae>
 8003b78:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003b7a:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003b7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003b7e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003b80:	428a      	cmp	r2, r1
 8003b82:	bfac      	ite	ge
 8003b84:	1880      	addge	r0, r0, r2
 8003b86:	1840      	addlt	r0, r0, r1
 8003b88:	900c      	str	r0, [sp, #48]	; 0x30
 8003b8a:	2d00      	cmp	r5, #0
 8003b8c:	f040 8128 	bne.w	8003de0 <_svfprintf_r+0xa38>
 8003b90:	2300      	movs	r3, #0
 8003b92:	933a      	str	r3, [sp, #232]	; 0xe8
 8003b94:	ae1f      	add	r6, sp, #124	; 0x7c
 8003b96:	e436      	b.n	8003406 <_svfprintf_r+0x5e>
 8003b98:	46a0      	mov	r8, r4
 8003b9a:	461c      	mov	r4, r3
 8003b9c:	3401      	adds	r4, #1
 8003b9e:	19ed      	adds	r5, r5, r7
 8003ba0:	2c07      	cmp	r4, #7
 8003ba2:	f8c6 8000 	str.w	r8, [r6]
 8003ba6:	6077      	str	r7, [r6, #4]
 8003ba8:	953b      	str	r5, [sp, #236]	; 0xec
 8003baa:	943a      	str	r4, [sp, #232]	; 0xe8
 8003bac:	dda2      	ble.n	8003af4 <_svfprintf_r+0x74c>
 8003bae:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8003bb0:	4651      	mov	r1, sl
 8003bb2:	465a      	mov	r2, fp
 8003bb4:	f002 ff4a 	bl	8006a4c <__ssprint_r>
 8003bb8:	2800      	cmp	r0, #0
 8003bba:	f47f accc 	bne.w	8003556 <_svfprintf_r+0x1ae>
 8003bbe:	ae1f      	add	r6, sp, #124	; 0x7c
 8003bc0:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003bc2:	e798      	b.n	8003af6 <_svfprintf_r+0x74e>
 8003bc4:	9915      	ldr	r1, [sp, #84]	; 0x54
 8003bc6:	2965      	cmp	r1, #101	; 0x65
 8003bc8:	f340 80aa 	ble.w	8003d20 <_svfprintf_r+0x978>
 8003bcc:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	f004 fb04 	bl	80081e0 <__aeabi_dcmpeq>
 8003bd8:	2800      	cmp	r0, #0
 8003bda:	f000 8130 	beq.w	8003e3e <_svfprintf_r+0xa96>
 8003bde:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003be0:	4b2f      	ldr	r3, [pc, #188]	; (8003ca0 <_svfprintf_r+0x8f8>)
 8003be2:	3401      	adds	r4, #1
 8003be4:	6033      	str	r3, [r6, #0]
 8003be6:	3501      	adds	r5, #1
 8003be8:	2301      	movs	r3, #1
 8003bea:	2c07      	cmp	r4, #7
 8003bec:	6073      	str	r3, [r6, #4]
 8003bee:	953b      	str	r5, [sp, #236]	; 0xec
 8003bf0:	943a      	str	r4, [sp, #232]	; 0xe8
 8003bf2:	f300 82b5 	bgt.w	8004160 <_svfprintf_r+0xdb8>
 8003bf6:	3608      	adds	r6, #8
 8003bf8:	9b40      	ldr	r3, [sp, #256]	; 0x100
 8003bfa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	dc03      	bgt.n	8003c08 <_svfprintf_r+0x860>
 8003c00:	9b08      	ldr	r3, [sp, #32]
 8003c02:	07db      	lsls	r3, r3, #31
 8003c04:	f57f af77 	bpl.w	8003af6 <_svfprintf_r+0x74e>
 8003c08:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003c0a:	981a      	ldr	r0, [sp, #104]	; 0x68
 8003c0c:	3401      	adds	r4, #1
 8003c0e:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8003c10:	182d      	adds	r5, r5, r0
 8003c12:	2c07      	cmp	r4, #7
 8003c14:	6031      	str	r1, [r6, #0]
 8003c16:	6070      	str	r0, [r6, #4]
 8003c18:	953b      	str	r5, [sp, #236]	; 0xec
 8003c1a:	943a      	str	r4, [sp, #232]	; 0xe8
 8003c1c:	f300 82fd 	bgt.w	800421a <_svfprintf_r+0xe72>
 8003c20:	3608      	adds	r6, #8
 8003c22:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003c24:	1e57      	subs	r7, r2, #1
 8003c26:	2f00      	cmp	r7, #0
 8003c28:	f77f af65 	ble.w	8003af6 <_svfprintf_r+0x74e>
 8003c2c:	2f10      	cmp	r7, #16
 8003c2e:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003c30:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8003ca4 <_svfprintf_r+0x8fc>
 8003c34:	ddb2      	ble.n	8003b9c <_svfprintf_r+0x7f4>
 8003c36:	4623      	mov	r3, r4
 8003c38:	f04f 0910 	mov.w	r9, #16
 8003c3c:	4644      	mov	r4, r8
 8003c3e:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8003c42:	e003      	b.n	8003c4c <_svfprintf_r+0x8a4>
 8003c44:	3608      	adds	r6, #8
 8003c46:	3f10      	subs	r7, #16
 8003c48:	2f10      	cmp	r7, #16
 8003c4a:	dda5      	ble.n	8003b98 <_svfprintf_r+0x7f0>
 8003c4c:	3301      	adds	r3, #1
 8003c4e:	3510      	adds	r5, #16
 8003c50:	2b07      	cmp	r3, #7
 8003c52:	e886 0210 	stmia.w	r6, {r4, r9}
 8003c56:	953b      	str	r5, [sp, #236]	; 0xec
 8003c58:	933a      	str	r3, [sp, #232]	; 0xe8
 8003c5a:	ddf3      	ble.n	8003c44 <_svfprintf_r+0x89c>
 8003c5c:	4640      	mov	r0, r8
 8003c5e:	4651      	mov	r1, sl
 8003c60:	465a      	mov	r2, fp
 8003c62:	f002 fef3 	bl	8006a4c <__ssprint_r>
 8003c66:	2800      	cmp	r0, #0
 8003c68:	f47f ac75 	bne.w	8003556 <_svfprintf_r+0x1ae>
 8003c6c:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003c6e:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8003c70:	ae1f      	add	r6, sp, #124	; 0x7c
 8003c72:	e7e8      	b.n	8003c46 <_svfprintf_r+0x89e>
 8003c74:	2a00      	cmp	r2, #0
 8003c76:	f040 80bd 	bne.w	8003df4 <_svfprintf_r+0xa4c>
 8003c7a:	9808      	ldr	r0, [sp, #32]
 8003c7c:	07c1      	lsls	r1, r0, #31
 8003c7e:	bf5c      	itt	pl
 8003c80:	920d      	strpl	r2, [sp, #52]	; 0x34
 8003c82:	f8cd b044 	strpl.w	fp, [sp, #68]	; 0x44
 8003c86:	f57f acf3 	bpl.w	8003670 <_svfprintf_r+0x2c8>
 8003c8a:	991d      	ldr	r1, [sp, #116]	; 0x74
 8003c8c:	2330      	movs	r3, #48	; 0x30
 8003c8e:	f10d 02e3 	add.w	r2, sp, #227	; 0xe3
 8003c92:	f88d 30e3 	strb.w	r3, [sp, #227]	; 0xe3
 8003c96:	910d      	str	r1, [sp, #52]	; 0x34
 8003c98:	9211      	str	r2, [sp, #68]	; 0x44
 8003c9a:	e4e9      	b.n	8003670 <_svfprintf_r+0x2c8>
 8003c9c:	080088ec 	.word	0x080088ec
 8003ca0:	08008908 	.word	0x08008908
 8003ca4:	08008648 	.word	0x08008648
 8003ca8:	08008638 	.word	0x08008638
 8003cac:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003cae:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003cb0:	1a47      	subs	r7, r0, r1
 8003cb2:	2f00      	cmp	r7, #0
 8003cb4:	f77f aed8 	ble.w	8003a68 <_svfprintf_r+0x6c0>
 8003cb8:	2f10      	cmp	r7, #16
 8003cba:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003cbc:	f8df 86d4 	ldr.w	r8, [pc, #1748]	; 8004394 <_svfprintf_r+0xfec>
 8003cc0:	dd22      	ble.n	8003d08 <_svfprintf_r+0x960>
 8003cc2:	4623      	mov	r3, r4
 8003cc4:	f04f 0910 	mov.w	r9, #16
 8003cc8:	4644      	mov	r4, r8
 8003cca:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8003cce:	e003      	b.n	8003cd8 <_svfprintf_r+0x930>
 8003cd0:	3f10      	subs	r7, #16
 8003cd2:	3608      	adds	r6, #8
 8003cd4:	2f10      	cmp	r7, #16
 8003cd6:	dd15      	ble.n	8003d04 <_svfprintf_r+0x95c>
 8003cd8:	3301      	adds	r3, #1
 8003cda:	3510      	adds	r5, #16
 8003cdc:	2b07      	cmp	r3, #7
 8003cde:	e886 0210 	stmia.w	r6, {r4, r9}
 8003ce2:	953b      	str	r5, [sp, #236]	; 0xec
 8003ce4:	933a      	str	r3, [sp, #232]	; 0xe8
 8003ce6:	ddf3      	ble.n	8003cd0 <_svfprintf_r+0x928>
 8003ce8:	4640      	mov	r0, r8
 8003cea:	4651      	mov	r1, sl
 8003cec:	465a      	mov	r2, fp
 8003cee:	f002 fead 	bl	8006a4c <__ssprint_r>
 8003cf2:	2800      	cmp	r0, #0
 8003cf4:	f47f ac2f 	bne.w	8003556 <_svfprintf_r+0x1ae>
 8003cf8:	3f10      	subs	r7, #16
 8003cfa:	2f10      	cmp	r7, #16
 8003cfc:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003cfe:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8003d00:	ae1f      	add	r6, sp, #124	; 0x7c
 8003d02:	dce9      	bgt.n	8003cd8 <_svfprintf_r+0x930>
 8003d04:	46a0      	mov	r8, r4
 8003d06:	461c      	mov	r4, r3
 8003d08:	3401      	adds	r4, #1
 8003d0a:	19ed      	adds	r5, r5, r7
 8003d0c:	2c07      	cmp	r4, #7
 8003d0e:	f8c6 8000 	str.w	r8, [r6]
 8003d12:	6077      	str	r7, [r6, #4]
 8003d14:	953b      	str	r5, [sp, #236]	; 0xec
 8003d16:	943a      	str	r4, [sp, #232]	; 0xe8
 8003d18:	f300 81dc 	bgt.w	80040d4 <_svfprintf_r+0xd2c>
 8003d1c:	3608      	adds	r6, #8
 8003d1e:	e6a3      	b.n	8003a68 <_svfprintf_r+0x6c0>
 8003d20:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003d22:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003d24:	3501      	adds	r5, #1
 8003d26:	3401      	adds	r4, #1
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	f340 81a2 	ble.w	8004072 <_svfprintf_r+0xcca>
 8003d2e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8003d30:	2301      	movs	r3, #1
 8003d32:	2c07      	cmp	r4, #7
 8003d34:	6031      	str	r1, [r6, #0]
 8003d36:	6073      	str	r3, [r6, #4]
 8003d38:	953b      	str	r5, [sp, #236]	; 0xec
 8003d3a:	943a      	str	r4, [sp, #232]	; 0xe8
 8003d3c:	f300 81be 	bgt.w	80040bc <_svfprintf_r+0xd14>
 8003d40:	3608      	adds	r6, #8
 8003d42:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8003d44:	3401      	adds	r4, #1
 8003d46:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003d48:	18ad      	adds	r5, r5, r2
 8003d4a:	2c07      	cmp	r4, #7
 8003d4c:	6033      	str	r3, [r6, #0]
 8003d4e:	6072      	str	r2, [r6, #4]
 8003d50:	953b      	str	r5, [sp, #236]	; 0xec
 8003d52:	943a      	str	r4, [sp, #232]	; 0xe8
 8003d54:	f300 81a6 	bgt.w	80040a4 <_svfprintf_r+0xcfc>
 8003d58:	3608      	adds	r6, #8
 8003d5a:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 8003d5e:	2200      	movs	r2, #0
 8003d60:	2300      	movs	r3, #0
 8003d62:	f004 fa3d 	bl	80081e0 <__aeabi_dcmpeq>
 8003d66:	2800      	cmp	r0, #0
 8003d68:	f040 80f5 	bne.w	8003f56 <_svfprintf_r+0xbae>
 8003d6c:	9810      	ldr	r0, [sp, #64]	; 0x40
 8003d6e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8003d70:	1e42      	subs	r2, r0, #1
 8003d72:	3401      	adds	r4, #1
 8003d74:	1c4b      	adds	r3, r1, #1
 8003d76:	18ad      	adds	r5, r5, r2
 8003d78:	2c07      	cmp	r4, #7
 8003d7a:	6033      	str	r3, [r6, #0]
 8003d7c:	6072      	str	r2, [r6, #4]
 8003d7e:	953b      	str	r5, [sp, #236]	; 0xec
 8003d80:	943a      	str	r4, [sp, #232]	; 0xe8
 8003d82:	dc21      	bgt.n	8003dc8 <_svfprintf_r+0xa20>
 8003d84:	3608      	adds	r6, #8
 8003d86:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8003d88:	3401      	adds	r4, #1
 8003d8a:	182d      	adds	r5, r5, r0
 8003d8c:	ab3c      	add	r3, sp, #240	; 0xf0
 8003d8e:	2c07      	cmp	r4, #7
 8003d90:	6033      	str	r3, [r6, #0]
 8003d92:	6070      	str	r0, [r6, #4]
 8003d94:	953b      	str	r5, [sp, #236]	; 0xec
 8003d96:	943a      	str	r4, [sp, #232]	; 0xe8
 8003d98:	f77f aeac 	ble.w	8003af4 <_svfprintf_r+0x74c>
 8003d9c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8003d9e:	4651      	mov	r1, sl
 8003da0:	465a      	mov	r2, fp
 8003da2:	f002 fe53 	bl	8006a4c <__ssprint_r>
 8003da6:	2800      	cmp	r0, #0
 8003da8:	f47f abd5 	bne.w	8003556 <_svfprintf_r+0x1ae>
 8003dac:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003dae:	ae1f      	add	r6, sp, #124	; 0x7c
 8003db0:	e6a1      	b.n	8003af6 <_svfprintf_r+0x74e>
 8003db2:	46a0      	mov	r8, r4
 8003db4:	461c      	mov	r4, r3
 8003db6:	3401      	adds	r4, #1
 8003db8:	19ed      	adds	r5, r5, r7
 8003dba:	2c07      	cmp	r4, #7
 8003dbc:	f8c6 8000 	str.w	r8, [r6]
 8003dc0:	6077      	str	r7, [r6, #4]
 8003dc2:	953b      	str	r5, [sp, #236]	; 0xec
 8003dc4:	943a      	str	r4, [sp, #232]	; 0xe8
 8003dc6:	dddd      	ble.n	8003d84 <_svfprintf_r+0x9dc>
 8003dc8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8003dca:	4651      	mov	r1, sl
 8003dcc:	465a      	mov	r2, fp
 8003dce:	f002 fe3d 	bl	8006a4c <__ssprint_r>
 8003dd2:	2800      	cmp	r0, #0
 8003dd4:	f47f abbf 	bne.w	8003556 <_svfprintf_r+0x1ae>
 8003dd8:	ae1f      	add	r6, sp, #124	; 0x7c
 8003dda:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003ddc:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003dde:	e7d2      	b.n	8003d86 <_svfprintf_r+0x9de>
 8003de0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8003de2:	4651      	mov	r1, sl
 8003de4:	465a      	mov	r2, fp
 8003de6:	f002 fe31 	bl	8006a4c <__ssprint_r>
 8003dea:	2800      	cmp	r0, #0
 8003dec:	f43f aed0 	beq.w	8003b90 <_svfprintf_r+0x7e8>
 8003df0:	f7ff bbb1 	b.w	8003556 <_svfprintf_r+0x1ae>
 8003df4:	910d      	str	r1, [sp, #52]	; 0x34
 8003df6:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8003dfa:	e439      	b.n	8003670 <_svfprintf_r+0x2c8>
 8003dfc:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8003dfe:	4651      	mov	r1, sl
 8003e00:	465a      	mov	r2, fp
 8003e02:	f002 fe23 	bl	8006a4c <__ssprint_r>
 8003e06:	2800      	cmp	r0, #0
 8003e08:	f47f aba5 	bne.w	8003556 <_svfprintf_r+0x1ae>
 8003e0c:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003e0e:	ae1f      	add	r6, sp, #124	; 0x7c
 8003e10:	e662      	b.n	8003ad8 <_svfprintf_r+0x730>
 8003e12:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8003e14:	4651      	mov	r1, sl
 8003e16:	465a      	mov	r2, fp
 8003e18:	f002 fe18 	bl	8006a4c <__ssprint_r>
 8003e1c:	2800      	cmp	r0, #0
 8003e1e:	f47f ab9a 	bne.w	8003556 <_svfprintf_r+0x1ae>
 8003e22:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003e24:	ae1f      	add	r6, sp, #124	; 0x7c
 8003e26:	e61b      	b.n	8003a60 <_svfprintf_r+0x6b8>
 8003e28:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8003e2a:	4651      	mov	r1, sl
 8003e2c:	465a      	mov	r2, fp
 8003e2e:	f002 fe0d 	bl	8006a4c <__ssprint_r>
 8003e32:	2800      	cmp	r0, #0
 8003e34:	f47f ab8f 	bne.w	8003556 <_svfprintf_r+0x1ae>
 8003e38:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003e3a:	ae1f      	add	r6, sp, #124	; 0x7c
 8003e3c:	e601      	b.n	8003a42 <_svfprintf_r+0x69a>
 8003e3e:	9f40      	ldr	r7, [sp, #256]	; 0x100
 8003e40:	2f00      	cmp	r7, #0
 8003e42:	f340 8198 	ble.w	8004176 <_svfprintf_r+0xdce>
 8003e46:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8003e48:	9916      	ldr	r1, [sp, #88]	; 0x58
 8003e4a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8003e4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003e4e:	428f      	cmp	r7, r1
 8003e50:	bfa8      	it	ge
 8003e52:	460f      	movge	r7, r1
 8003e54:	18d2      	adds	r2, r2, r3
 8003e56:	2f00      	cmp	r7, #0
 8003e58:	920d      	str	r2, [sp, #52]	; 0x34
 8003e5a:	dd0b      	ble.n	8003e74 <_svfprintf_r+0xacc>
 8003e5c:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003e5e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003e60:	3401      	adds	r4, #1
 8003e62:	19ed      	adds	r5, r5, r7
 8003e64:	2c07      	cmp	r4, #7
 8003e66:	e886 0088 	stmia.w	r6, {r3, r7}
 8003e6a:	953b      	str	r5, [sp, #236]	; 0xec
 8003e6c:	943a      	str	r4, [sp, #232]	; 0xe8
 8003e6e:	f300 82f9 	bgt.w	8004464 <_svfprintf_r+0x10bc>
 8003e72:	3608      	adds	r6, #8
 8003e74:	9816      	ldr	r0, [sp, #88]	; 0x58
 8003e76:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
 8003e7a:	1bc7      	subs	r7, r0, r7
 8003e7c:	2f00      	cmp	r7, #0
 8003e7e:	f340 80a0 	ble.w	8003fc2 <_svfprintf_r+0xc1a>
 8003e82:	2f10      	cmp	r7, #16
 8003e84:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003e86:	f8df 850c 	ldr.w	r8, [pc, #1292]	; 8004394 <_svfprintf_r+0xfec>
 8003e8a:	f340 815d 	ble.w	8004148 <_svfprintf_r+0xda0>
 8003e8e:	4623      	mov	r3, r4
 8003e90:	f04f 0910 	mov.w	r9, #16
 8003e94:	4644      	mov	r4, r8
 8003e96:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8003e9a:	e004      	b.n	8003ea6 <_svfprintf_r+0xafe>
 8003e9c:	3608      	adds	r6, #8
 8003e9e:	3f10      	subs	r7, #16
 8003ea0:	2f10      	cmp	r7, #16
 8003ea2:	f340 814f 	ble.w	8004144 <_svfprintf_r+0xd9c>
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	3510      	adds	r5, #16
 8003eaa:	2b07      	cmp	r3, #7
 8003eac:	e886 0210 	stmia.w	r6, {r4, r9}
 8003eb0:	953b      	str	r5, [sp, #236]	; 0xec
 8003eb2:	933a      	str	r3, [sp, #232]	; 0xe8
 8003eb4:	ddf2      	ble.n	8003e9c <_svfprintf_r+0xaf4>
 8003eb6:	4640      	mov	r0, r8
 8003eb8:	4651      	mov	r1, sl
 8003eba:	465a      	mov	r2, fp
 8003ebc:	f002 fdc6 	bl	8006a4c <__ssprint_r>
 8003ec0:	2800      	cmp	r0, #0
 8003ec2:	f47f ab48 	bne.w	8003556 <_svfprintf_r+0x1ae>
 8003ec6:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003ec8:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8003eca:	ae1f      	add	r6, sp, #124	; 0x7c
 8003ecc:	e7e7      	b.n	8003e9e <_svfprintf_r+0xaf6>
 8003ece:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8003ed0:	f10d 01e3 	add.w	r1, sp, #227	; 0xe3
 8003ed4:	f003 020f 	and.w	r2, r3, #15
 8003ed8:	5ca8      	ldrb	r0, [r5, r2]
 8003eda:	460a      	mov	r2, r1
 8003edc:	7008      	strb	r0, [r1, #0]
 8003ede:	3901      	subs	r1, #1
 8003ee0:	091b      	lsrs	r3, r3, #4
 8003ee2:	d1f7      	bne.n	8003ed4 <_svfprintf_r+0xb2c>
 8003ee4:	ebc2 030b 	rsb	r3, r2, fp
 8003ee8:	9211      	str	r2, [sp, #68]	; 0x44
 8003eea:	930d      	str	r3, [sp, #52]	; 0x34
 8003eec:	f7ff bbc0 	b.w	8003670 <_svfprintf_r+0x2c8>
 8003ef0:	2b09      	cmp	r3, #9
 8003ef2:	bf82      	ittt	hi
 8003ef4:	f64c 45cd 	movwhi	r5, #52429	; 0xcccd
 8003ef8:	f10d 00e3 	addhi.w	r0, sp, #227	; 0xe3
 8003efc:	f6cc 45cc 	movthi	r5, #52428	; 0xcccc
 8003f00:	d809      	bhi.n	8003f16 <_svfprintf_r+0xb6e>
 8003f02:	981d      	ldr	r0, [sp, #116]	; 0x74
 8003f04:	3330      	adds	r3, #48	; 0x30
 8003f06:	f10d 01e3 	add.w	r1, sp, #227	; 0xe3
 8003f0a:	f88d 30e3 	strb.w	r3, [sp, #227]	; 0xe3
 8003f0e:	900d      	str	r0, [sp, #52]	; 0x34
 8003f10:	9111      	str	r1, [sp, #68]	; 0x44
 8003f12:	f7ff bbad 	b.w	8003670 <_svfprintf_r+0x2c8>
 8003f16:	fba5 1203 	umull	r1, r2, r5, r3
 8003f1a:	08d2      	lsrs	r2, r2, #3
 8003f1c:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8003f20:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 8003f24:	4601      	mov	r1, r0
 8003f26:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8003f2a:	7008      	strb	r0, [r1, #0]
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	1e48      	subs	r0, r1, #1
 8003f30:	2a00      	cmp	r2, #0
 8003f32:	d1f0      	bne.n	8003f16 <_svfprintf_r+0xb6e>
 8003f34:	ebc1 030b 	rsb	r3, r1, fp
 8003f38:	9111      	str	r1, [sp, #68]	; 0x44
 8003f3a:	930d      	str	r3, [sp, #52]	; 0x34
 8003f3c:	f7ff bb98 	b.w	8003670 <_svfprintf_r+0x2c8>
 8003f40:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8003f42:	4651      	mov	r1, sl
 8003f44:	465a      	mov	r2, fp
 8003f46:	f002 fd81 	bl	8006a4c <__ssprint_r>
 8003f4a:	2800      	cmp	r0, #0
 8003f4c:	f47f ab03 	bne.w	8003556 <_svfprintf_r+0x1ae>
 8003f50:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003f52:	ae1f      	add	r6, sp, #124	; 0x7c
 8003f54:	e564      	b.n	8003a20 <_svfprintf_r+0x678>
 8003f56:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003f58:	1e57      	subs	r7, r2, #1
 8003f5a:	2f00      	cmp	r7, #0
 8003f5c:	f77f af13 	ble.w	8003d86 <_svfprintf_r+0x9de>
 8003f60:	2f10      	cmp	r7, #16
 8003f62:	f8df 8430 	ldr.w	r8, [pc, #1072]	; 8004394 <_svfprintf_r+0xfec>
 8003f66:	f77f af26 	ble.w	8003db6 <_svfprintf_r+0xa0e>
 8003f6a:	4623      	mov	r3, r4
 8003f6c:	f04f 0910 	mov.w	r9, #16
 8003f70:	4644      	mov	r4, r8
 8003f72:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8003f76:	e004      	b.n	8003f82 <_svfprintf_r+0xbda>
 8003f78:	3608      	adds	r6, #8
 8003f7a:	3f10      	subs	r7, #16
 8003f7c:	2f10      	cmp	r7, #16
 8003f7e:	f77f af18 	ble.w	8003db2 <_svfprintf_r+0xa0a>
 8003f82:	3301      	adds	r3, #1
 8003f84:	3510      	adds	r5, #16
 8003f86:	2b07      	cmp	r3, #7
 8003f88:	e886 0210 	stmia.w	r6, {r4, r9}
 8003f8c:	953b      	str	r5, [sp, #236]	; 0xec
 8003f8e:	933a      	str	r3, [sp, #232]	; 0xe8
 8003f90:	ddf2      	ble.n	8003f78 <_svfprintf_r+0xbd0>
 8003f92:	4640      	mov	r0, r8
 8003f94:	4651      	mov	r1, sl
 8003f96:	465a      	mov	r2, fp
 8003f98:	f002 fd58 	bl	8006a4c <__ssprint_r>
 8003f9c:	2800      	cmp	r0, #0
 8003f9e:	f47f aada 	bne.w	8003556 <_svfprintf_r+0x1ae>
 8003fa2:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003fa4:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8003fa6:	ae1f      	add	r6, sp, #124	; 0x7c
 8003fa8:	e7e7      	b.n	8003f7a <_svfprintf_r+0xbd2>
 8003faa:	2202      	movs	r2, #2
 8003fac:	e405      	b.n	80037ba <_svfprintf_r+0x412>
 8003fae:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8003fb0:	4651      	mov	r1, sl
 8003fb2:	465a      	mov	r2, fp
 8003fb4:	f002 fd4a 	bl	8006a4c <__ssprint_r>
 8003fb8:	2800      	cmp	r0, #0
 8003fba:	f47f aacc 	bne.w	8003556 <_svfprintf_r+0x1ae>
 8003fbe:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003fc0:	ae1f      	add	r6, sp, #124	; 0x7c
 8003fc2:	9b40      	ldr	r3, [sp, #256]	; 0x100
 8003fc4:	9910      	ldr	r1, [sp, #64]	; 0x40
 8003fc6:	4299      	cmp	r1, r3
 8003fc8:	dc45      	bgt.n	8004056 <_svfprintf_r+0xcae>
 8003fca:	9a08      	ldr	r2, [sp, #32]
 8003fcc:	07d1      	lsls	r1, r2, #31
 8003fce:	d442      	bmi.n	8004056 <_svfprintf_r+0xcae>
 8003fd0:	9811      	ldr	r0, [sp, #68]	; 0x44
 8003fd2:	9916      	ldr	r1, [sp, #88]	; 0x58
 8003fd4:	1842      	adds	r2, r0, r1
 8003fd6:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003fd8:	9910      	ldr	r1, [sp, #64]	; 0x40
 8003fda:	1a87      	subs	r7, r0, r2
 8003fdc:	1acb      	subs	r3, r1, r3
 8003fde:	42bb      	cmp	r3, r7
 8003fe0:	bfb8      	it	lt
 8003fe2:	461f      	movlt	r7, r3
 8003fe4:	2f00      	cmp	r7, #0
 8003fe6:	dd0a      	ble.n	8003ffe <_svfprintf_r+0xc56>
 8003fe8:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003fea:	19ed      	adds	r5, r5, r7
 8003fec:	3401      	adds	r4, #1
 8003fee:	2c07      	cmp	r4, #7
 8003ff0:	e886 0084 	stmia.w	r6, {r2, r7}
 8003ff4:	953b      	str	r5, [sp, #236]	; 0xec
 8003ff6:	943a      	str	r4, [sp, #232]	; 0xe8
 8003ff8:	f300 824b 	bgt.w	8004492 <_svfprintf_r+0x10ea>
 8003ffc:	3608      	adds	r6, #8
 8003ffe:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
 8004002:	1bdf      	subs	r7, r3, r7
 8004004:	2f00      	cmp	r7, #0
 8004006:	f77f ad76 	ble.w	8003af6 <_svfprintf_r+0x74e>
 800400a:	2f10      	cmp	r7, #16
 800400c:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 800400e:	f8df 8384 	ldr.w	r8, [pc, #900]	; 8004394 <_svfprintf_r+0xfec>
 8004012:	f77f adc3 	ble.w	8003b9c <_svfprintf_r+0x7f4>
 8004016:	4623      	mov	r3, r4
 8004018:	f04f 0910 	mov.w	r9, #16
 800401c:	4644      	mov	r4, r8
 800401e:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8004022:	e004      	b.n	800402e <_svfprintf_r+0xc86>
 8004024:	3608      	adds	r6, #8
 8004026:	3f10      	subs	r7, #16
 8004028:	2f10      	cmp	r7, #16
 800402a:	f77f adb5 	ble.w	8003b98 <_svfprintf_r+0x7f0>
 800402e:	3301      	adds	r3, #1
 8004030:	3510      	adds	r5, #16
 8004032:	2b07      	cmp	r3, #7
 8004034:	e886 0210 	stmia.w	r6, {r4, r9}
 8004038:	953b      	str	r5, [sp, #236]	; 0xec
 800403a:	933a      	str	r3, [sp, #232]	; 0xe8
 800403c:	ddf2      	ble.n	8004024 <_svfprintf_r+0xc7c>
 800403e:	4640      	mov	r0, r8
 8004040:	4651      	mov	r1, sl
 8004042:	465a      	mov	r2, fp
 8004044:	f002 fd02 	bl	8006a4c <__ssprint_r>
 8004048:	2800      	cmp	r0, #0
 800404a:	f47f aa84 	bne.w	8003556 <_svfprintf_r+0x1ae>
 800404e:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004050:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8004052:	ae1f      	add	r6, sp, #124	; 0x7c
 8004054:	e7e7      	b.n	8004026 <_svfprintf_r+0xc7e>
 8004056:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8004058:	981a      	ldr	r0, [sp, #104]	; 0x68
 800405a:	3401      	adds	r4, #1
 800405c:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800405e:	182d      	adds	r5, r5, r0
 8004060:	2c07      	cmp	r4, #7
 8004062:	6031      	str	r1, [r6, #0]
 8004064:	6070      	str	r0, [r6, #4]
 8004066:	953b      	str	r5, [sp, #236]	; 0xec
 8004068:	943a      	str	r4, [sp, #232]	; 0xe8
 800406a:	f300 8206 	bgt.w	800447a <_svfprintf_r+0x10d2>
 800406e:	3608      	adds	r6, #8
 8004070:	e7ae      	b.n	8003fd0 <_svfprintf_r+0xc28>
 8004072:	9808      	ldr	r0, [sp, #32]
 8004074:	07c2      	lsls	r2, r0, #31
 8004076:	f53f ae5a 	bmi.w	8003d2e <_svfprintf_r+0x986>
 800407a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800407c:	6033      	str	r3, [r6, #0]
 800407e:	2301      	movs	r3, #1
 8004080:	2c07      	cmp	r4, #7
 8004082:	6073      	str	r3, [r6, #4]
 8004084:	953b      	str	r5, [sp, #236]	; 0xec
 8004086:	943a      	str	r4, [sp, #232]	; 0xe8
 8004088:	f77f ae7c 	ble.w	8003d84 <_svfprintf_r+0x9dc>
 800408c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800408e:	4651      	mov	r1, sl
 8004090:	465a      	mov	r2, fp
 8004092:	f002 fcdb 	bl	8006a4c <__ssprint_r>
 8004096:	2800      	cmp	r0, #0
 8004098:	f47f aa5d 	bne.w	8003556 <_svfprintf_r+0x1ae>
 800409c:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 800409e:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80040a0:	ae1f      	add	r6, sp, #124	; 0x7c
 80040a2:	e670      	b.n	8003d86 <_svfprintf_r+0x9de>
 80040a4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80040a6:	4651      	mov	r1, sl
 80040a8:	465a      	mov	r2, fp
 80040aa:	f002 fccf 	bl	8006a4c <__ssprint_r>
 80040ae:	2800      	cmp	r0, #0
 80040b0:	f47f aa51 	bne.w	8003556 <_svfprintf_r+0x1ae>
 80040b4:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80040b6:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80040b8:	ae1f      	add	r6, sp, #124	; 0x7c
 80040ba:	e64e      	b.n	8003d5a <_svfprintf_r+0x9b2>
 80040bc:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80040be:	4651      	mov	r1, sl
 80040c0:	465a      	mov	r2, fp
 80040c2:	f002 fcc3 	bl	8006a4c <__ssprint_r>
 80040c6:	2800      	cmp	r0, #0
 80040c8:	f47f aa45 	bne.w	8003556 <_svfprintf_r+0x1ae>
 80040cc:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80040ce:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80040d0:	ae1f      	add	r6, sp, #124	; 0x7c
 80040d2:	e636      	b.n	8003d42 <_svfprintf_r+0x99a>
 80040d4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80040d6:	4651      	mov	r1, sl
 80040d8:	465a      	mov	r2, fp
 80040da:	f002 fcb7 	bl	8006a4c <__ssprint_r>
 80040de:	2800      	cmp	r0, #0
 80040e0:	f47f aa39 	bne.w	8003556 <_svfprintf_r+0x1ae>
 80040e4:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80040e6:	ae1f      	add	r6, sp, #124	; 0x7c
 80040e8:	e4be      	b.n	8003a68 <_svfprintf_r+0x6c0>
 80040ea:	f002 fb47 	bl	800677c <__fpclassifyd>
 80040ee:	2800      	cmp	r0, #0
 80040f0:	f040 809e 	bne.w	8004230 <_svfprintf_r+0xe88>
 80040f4:	2103      	movs	r1, #3
 80040f6:	9012      	str	r0, [sp, #72]	; 0x48
 80040f8:	4ba3      	ldr	r3, [pc, #652]	; (8004388 <_svfprintf_r+0xfe0>)
 80040fa:	4aa4      	ldr	r2, [pc, #656]	; (800438c <_svfprintf_r+0xfe4>)
 80040fc:	9815      	ldr	r0, [sp, #84]	; 0x54
 80040fe:	910a      	str	r1, [sp, #40]	; 0x28
 8004100:	9908      	ldr	r1, [sp, #32]
 8004102:	2847      	cmp	r0, #71	; 0x47
 8004104:	bfd8      	it	le
 8004106:	461a      	movle	r2, r3
 8004108:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800410a:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800410e:	9211      	str	r2, [sp, #68]	; 0x44
 8004110:	2203      	movs	r2, #3
 8004112:	9108      	str	r1, [sp, #32]
 8004114:	920d      	str	r2, [sp, #52]	; 0x34
 8004116:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 800411a:	9316      	str	r3, [sp, #88]	; 0x58
 800411c:	f7ff bab2 	b.w	8003684 <_svfprintf_r+0x2dc>
 8004120:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004122:	2201      	movs	r2, #1
 8004124:	680b      	ldr	r3, [r1, #0]
 8004126:	e416      	b.n	8003956 <_svfprintf_r+0x5ae>
 8004128:	9b08      	ldr	r3, [sp, #32]
 800412a:	065f      	lsls	r7, r3, #25
 800412c:	d56d      	bpl.n	800420a <_svfprintf_r+0xe62>
 800412e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8004130:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004132:	6803      	ldr	r3, [r0, #0]
 8004134:	3004      	adds	r0, #4
 8004136:	900e      	str	r0, [sp, #56]	; 0x38
 8004138:	8019      	strh	r1, [r3, #0]
 800413a:	f7ff b964 	b.w	8003406 <_svfprintf_r+0x5e>
 800413e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004140:	680b      	ldr	r3, [r1, #0]
 8004142:	e408      	b.n	8003956 <_svfprintf_r+0x5ae>
 8004144:	46a0      	mov	r8, r4
 8004146:	461c      	mov	r4, r3
 8004148:	3401      	adds	r4, #1
 800414a:	19ed      	adds	r5, r5, r7
 800414c:	2c07      	cmp	r4, #7
 800414e:	f8c6 8000 	str.w	r8, [r6]
 8004152:	6077      	str	r7, [r6, #4]
 8004154:	953b      	str	r5, [sp, #236]	; 0xec
 8004156:	943a      	str	r4, [sp, #232]	; 0xe8
 8004158:	f73f af29 	bgt.w	8003fae <_svfprintf_r+0xc06>
 800415c:	3608      	adds	r6, #8
 800415e:	e730      	b.n	8003fc2 <_svfprintf_r+0xc1a>
 8004160:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004162:	4651      	mov	r1, sl
 8004164:	465a      	mov	r2, fp
 8004166:	f002 fc71 	bl	8006a4c <__ssprint_r>
 800416a:	2800      	cmp	r0, #0
 800416c:	f47f a9f3 	bne.w	8003556 <_svfprintf_r+0x1ae>
 8004170:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004172:	ae1f      	add	r6, sp, #124	; 0x7c
 8004174:	e540      	b.n	8003bf8 <_svfprintf_r+0x850>
 8004176:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8004178:	4b85      	ldr	r3, [pc, #532]	; (8004390 <_svfprintf_r+0xfe8>)
 800417a:	3401      	adds	r4, #1
 800417c:	6033      	str	r3, [r6, #0]
 800417e:	3501      	adds	r5, #1
 8004180:	2301      	movs	r3, #1
 8004182:	2c07      	cmp	r4, #7
 8004184:	6073      	str	r3, [r6, #4]
 8004186:	953b      	str	r5, [sp, #236]	; 0xec
 8004188:	943a      	str	r4, [sp, #232]	; 0xe8
 800418a:	f300 813a 	bgt.w	8004402 <_svfprintf_r+0x105a>
 800418e:	3608      	adds	r6, #8
 8004190:	b92f      	cbnz	r7, 800419e <_svfprintf_r+0xdf6>
 8004192:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004194:	b91b      	cbnz	r3, 800419e <_svfprintf_r+0xdf6>
 8004196:	9808      	ldr	r0, [sp, #32]
 8004198:	07c0      	lsls	r0, r0, #31
 800419a:	f57f acac 	bpl.w	8003af6 <_svfprintf_r+0x74e>
 800419e:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80041a0:	991a      	ldr	r1, [sp, #104]	; 0x68
 80041a2:	3401      	adds	r4, #1
 80041a4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80041a6:	186d      	adds	r5, r5, r1
 80041a8:	2c07      	cmp	r4, #7
 80041aa:	6032      	str	r2, [r6, #0]
 80041ac:	6071      	str	r1, [r6, #4]
 80041ae:	953b      	str	r5, [sp, #236]	; 0xec
 80041b0:	943a      	str	r4, [sp, #232]	; 0xe8
 80041b2:	f300 81c9 	bgt.w	8004548 <_svfprintf_r+0x11a0>
 80041b6:	3608      	adds	r6, #8
 80041b8:	427f      	negs	r7, r7
 80041ba:	2f00      	cmp	r7, #0
 80041bc:	f340 8142 	ble.w	8004444 <_svfprintf_r+0x109c>
 80041c0:	2f10      	cmp	r7, #16
 80041c2:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 8004394 <_svfprintf_r+0xfec>
 80041c6:	f340 817a 	ble.w	80044be <_svfprintf_r+0x1116>
 80041ca:	4623      	mov	r3, r4
 80041cc:	f04f 0910 	mov.w	r9, #16
 80041d0:	4644      	mov	r4, r8
 80041d2:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 80041d6:	e004      	b.n	80041e2 <_svfprintf_r+0xe3a>
 80041d8:	3608      	adds	r6, #8
 80041da:	3f10      	subs	r7, #16
 80041dc:	2f10      	cmp	r7, #16
 80041de:	f340 816c 	ble.w	80044ba <_svfprintf_r+0x1112>
 80041e2:	3301      	adds	r3, #1
 80041e4:	3510      	adds	r5, #16
 80041e6:	2b07      	cmp	r3, #7
 80041e8:	e886 0210 	stmia.w	r6, {r4, r9}
 80041ec:	953b      	str	r5, [sp, #236]	; 0xec
 80041ee:	933a      	str	r3, [sp, #232]	; 0xe8
 80041f0:	ddf2      	ble.n	80041d8 <_svfprintf_r+0xe30>
 80041f2:	4640      	mov	r0, r8
 80041f4:	4651      	mov	r1, sl
 80041f6:	465a      	mov	r2, fp
 80041f8:	f002 fc28 	bl	8006a4c <__ssprint_r>
 80041fc:	2800      	cmp	r0, #0
 80041fe:	f47f a9aa 	bne.w	8003556 <_svfprintf_r+0x1ae>
 8004202:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004204:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8004206:	ae1f      	add	r6, sp, #124	; 0x7c
 8004208:	e7e7      	b.n	80041da <_svfprintf_r+0xe32>
 800420a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800420c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800420e:	6813      	ldr	r3, [r2, #0]
 8004210:	3204      	adds	r2, #4
 8004212:	920e      	str	r2, [sp, #56]	; 0x38
 8004214:	6018      	str	r0, [r3, #0]
 8004216:	f7ff b8f6 	b.w	8003406 <_svfprintf_r+0x5e>
 800421a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800421c:	4651      	mov	r1, sl
 800421e:	465a      	mov	r2, fp
 8004220:	f002 fc14 	bl	8006a4c <__ssprint_r>
 8004224:	2800      	cmp	r0, #0
 8004226:	f47f a996 	bne.w	8003556 <_svfprintf_r+0x1ae>
 800422a:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 800422c:	ae1f      	add	r6, sp, #124	; 0x7c
 800422e:	e4f8      	b.n	8003c22 <_svfprintf_r+0x87a>
 8004230:	1c60      	adds	r0, r4, #1
 8004232:	f000 80f2 	beq.w	800441a <_svfprintf_r+0x1072>
 8004236:	9915      	ldr	r1, [sp, #84]	; 0x54
 8004238:	2967      	cmp	r1, #103	; 0x67
 800423a:	bf18      	it	ne
 800423c:	2947      	cmpne	r1, #71	; 0x47
 800423e:	bf14      	ite	ne
 8004240:	2300      	movne	r3, #0
 8004242:	2301      	moveq	r3, #1
 8004244:	bf18      	it	ne
 8004246:	930a      	strne	r3, [sp, #40]	; 0x28
 8004248:	d104      	bne.n	8004254 <_svfprintf_r+0xeac>
 800424a:	2c00      	cmp	r4, #0
 800424c:	f000 81a4 	beq.w	8004598 <_svfprintf_r+0x11f0>
 8004250:	2201      	movs	r2, #1
 8004252:	920a      	str	r2, [sp, #40]	; 0x28
 8004254:	9808      	ldr	r0, [sp, #32]
 8004256:	2d00      	cmp	r5, #0
 8004258:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 800425c:	9008      	str	r0, [sp, #32]
 800425e:	f2c0 8180 	blt.w	8004562 <_svfprintf_r+0x11ba>
 8004262:	2200      	movs	r2, #0
 8004264:	9212      	str	r2, [sp, #72]	; 0x48
 8004266:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004268:	9815      	ldr	r0, [sp, #84]	; 0x54
 800426a:	f1a3 0166 	sub.w	r1, r3, #102	; 0x66
 800426e:	424b      	negs	r3, r1
 8004270:	eb43 0301 	adc.w	r3, r3, r1
 8004274:	469c      	mov	ip, r3
 8004276:	2846      	cmp	r0, #70	; 0x46
 8004278:	bf08      	it	eq
 800427a:	f04c 0c01 	orreq.w	ip, ip, #1
 800427e:	930d      	str	r3, [sp, #52]	; 0x34
 8004280:	46a1      	mov	r9, r4
 8004282:	2103      	movs	r1, #3
 8004284:	f1bc 0f00 	cmp.w	ip, #0
 8004288:	d107      	bne.n	800429a <_svfprintf_r+0xef2>
 800428a:	2865      	cmp	r0, #101	; 0x65
 800428c:	bf18      	it	ne
 800428e:	2845      	cmpne	r0, #69	; 0x45
 8004290:	bf0c      	ite	eq
 8004292:	f104 0901 	addeq.w	r9, r4, #1
 8004296:	46a1      	movne	r9, r4
 8004298:	2102      	movs	r1, #2
 800429a:	e88d 0202 	stmia.w	sp, {r1, r9}
 800429e:	a940      	add	r1, sp, #256	; 0x100
 80042a0:	9102      	str	r1, [sp, #8]
 80042a2:	a941      	add	r1, sp, #260	; 0x104
 80042a4:	9103      	str	r1, [sp, #12]
 80042a6:	4642      	mov	r2, r8
 80042a8:	a942      	add	r1, sp, #264	; 0x108
 80042aa:	462b      	mov	r3, r5
 80042ac:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80042ae:	9104      	str	r1, [sp, #16]
 80042b0:	f8cd c018 	str.w	ip, [sp, #24]
 80042b4:	f000 fa64 	bl	8004780 <_dtoa_r>
 80042b8:	9915      	ldr	r1, [sp, #84]	; 0x54
 80042ba:	9011      	str	r0, [sp, #68]	; 0x44
 80042bc:	2947      	cmp	r1, #71	; 0x47
 80042be:	bf18      	it	ne
 80042c0:	2967      	cmpne	r1, #103	; 0x67
 80042c2:	f8dd c018 	ldr.w	ip, [sp, #24]
 80042c6:	d104      	bne.n	80042d2 <_svfprintf_r+0xf2a>
 80042c8:	9a08      	ldr	r2, [sp, #32]
 80042ca:	07d2      	lsls	r2, r2, #31
 80042cc:	bf58      	it	pl
 80042ce:	9f42      	ldrpl	r7, [sp, #264]	; 0x108
 80042d0:	d515      	bpl.n	80042fe <_svfprintf_r+0xf56>
 80042d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80042d4:	eb03 0709 	add.w	r7, r3, r9
 80042d8:	f1bc 0f00 	cmp.w	ip, #0
 80042dc:	d005      	beq.n	80042ea <_svfprintf_r+0xf42>
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	2b30      	cmp	r3, #48	; 0x30
 80042e2:	f000 815c 	beq.w	800459e <_svfprintf_r+0x11f6>
 80042e6:	9b40      	ldr	r3, [sp, #256]	; 0x100
 80042e8:	18ff      	adds	r7, r7, r3
 80042ea:	4640      	mov	r0, r8
 80042ec:	4629      	mov	r1, r5
 80042ee:	2200      	movs	r2, #0
 80042f0:	2300      	movs	r3, #0
 80042f2:	f003 ff75 	bl	80081e0 <__aeabi_dcmpeq>
 80042f6:	2800      	cmp	r0, #0
 80042f8:	f000 810e 	beq.w	8004518 <_svfprintf_r+0x1170>
 80042fc:	9742      	str	r7, [sp, #264]	; 0x108
 80042fe:	9811      	ldr	r0, [sp, #68]	; 0x44
 8004300:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004302:	1a3f      	subs	r7, r7, r0
 8004304:	9710      	str	r7, [sp, #64]	; 0x40
 8004306:	2900      	cmp	r1, #0
 8004308:	f000 80f0 	beq.w	80044ec <_svfprintf_r+0x1144>
 800430c:	9940      	ldr	r1, [sp, #256]	; 0x100
 800430e:	1ccb      	adds	r3, r1, #3
 8004310:	db02      	blt.n	8004318 <_svfprintf_r+0xf70>
 8004312:	428c      	cmp	r4, r1
 8004314:	f280 80f1 	bge.w	80044fa <_svfprintf_r+0x1152>
 8004318:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800431a:	3a02      	subs	r2, #2
 800431c:	9215      	str	r2, [sp, #84]	; 0x54
 800431e:	3901      	subs	r1, #1
 8004320:	9815      	ldr	r0, [sp, #84]	; 0x54
 8004322:	2900      	cmp	r1, #0
 8004324:	9140      	str	r1, [sp, #256]	; 0x100
 8004326:	f88d 00f0 	strb.w	r0, [sp, #240]	; 0xf0
 800432a:	f2c0 8154 	blt.w	80045d6 <_svfprintf_r+0x122e>
 800432e:	232b      	movs	r3, #43	; 0x2b
 8004330:	f88d 30f1 	strb.w	r3, [sp, #241]	; 0xf1
 8004334:	2909      	cmp	r1, #9
 8004336:	f340 8119 	ble.w	800456c <_svfprintf_r+0x11c4>
 800433a:	f10d 07ff 	add.w	r7, sp, #255	; 0xff
 800433e:	f246 6467 	movw	r4, #26215	; 0x6667
 8004342:	4638      	mov	r0, r7
 8004344:	f2c6 6466 	movt	r4, #26214	; 0x6666
 8004348:	fb84 3201 	smull	r3, r2, r4, r1
 800434c:	17cb      	asrs	r3, r1, #31
 800434e:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 8004352:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8004356:	eba1 0242 	sub.w	r2, r1, r2, lsl #1
 800435a:	3230      	adds	r2, #48	; 0x30
 800435c:	2b09      	cmp	r3, #9
 800435e:	4605      	mov	r5, r0
 8004360:	4619      	mov	r1, r3
 8004362:	f800 2d01 	strb.w	r2, [r0, #-1]!
 8004366:	dcef      	bgt.n	8004348 <_svfprintf_r+0xfa0>
 8004368:	3130      	adds	r1, #48	; 0x30
 800436a:	1eaa      	subs	r2, r5, #2
 800436c:	b2c9      	uxtb	r1, r1
 800436e:	42ba      	cmp	r2, r7
 8004370:	f805 1c02 	strb.w	r1, [r5, #-2]
 8004374:	bf28      	it	cs
 8004376:	f10d 01f2 	addcs.w	r1, sp, #242	; 0xf2
 800437a:	d214      	bcs.n	80043a6 <_svfprintf_r+0xffe>
 800437c:	f10d 03f2 	add.w	r3, sp, #242	; 0xf2
 8004380:	f10d 00fe 	add.w	r0, sp, #254	; 0xfe
 8004384:	e00a      	b.n	800439c <_svfprintf_r+0xff4>
 8004386:	bf00      	nop
 8004388:	080088d0 	.word	0x080088d0
 800438c:	080088d4 	.word	0x080088d4
 8004390:	08008908 	.word	0x08008908
 8004394:	08008648 	.word	0x08008648
 8004398:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800439c:	f803 1b01 	strb.w	r1, [r3], #1
 80043a0:	4282      	cmp	r2, r0
 80043a2:	4619      	mov	r1, r3
 80043a4:	d1f8      	bne.n	8004398 <_svfprintf_r+0xff0>
 80043a6:	9810      	ldr	r0, [sp, #64]	; 0x40
 80043a8:	ab3c      	add	r3, sp, #240	; 0xf0
 80043aa:	1acb      	subs	r3, r1, r3
 80043ac:	931b      	str	r3, [sp, #108]	; 0x6c
 80043ae:	2801      	cmp	r0, #1
 80043b0:	4403      	add	r3, r0
 80043b2:	930d      	str	r3, [sp, #52]	; 0x34
 80043b4:	f340 811b 	ble.w	80045ee <_svfprintf_r+0x1246>
 80043b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80043ba:	2100      	movs	r1, #0
 80043bc:	3301      	adds	r3, #1
 80043be:	ea23 70e3 	bic.w	r0, r3, r3, asr #31
 80043c2:	930d      	str	r3, [sp, #52]	; 0x34
 80043c4:	900a      	str	r0, [sp, #40]	; 0x28
 80043c6:	9116      	str	r1, [sp, #88]	; 0x58
 80043c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80043ca:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	f43f a958 	beq.w	8003684 <_svfprintf_r+0x2dc>
 80043d4:	232d      	movs	r3, #45	; 0x2d
 80043d6:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
 80043da:	2300      	movs	r3, #0
 80043dc:	9312      	str	r3, [sp, #72]	; 0x48
 80043de:	f7ff b952 	b.w	8003686 <_svfprintf_r+0x2de>
 80043e2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80043e4:	2140      	movs	r1, #64	; 0x40
 80043e6:	f001 fa4d 	bl	8005884 <_malloc_r>
 80043ea:	f8ca 0000 	str.w	r0, [sl]
 80043ee:	f8ca 0010 	str.w	r0, [sl, #16]
 80043f2:	2800      	cmp	r0, #0
 80043f4:	f000 8121 	beq.w	800463a <_svfprintf_r+0x1292>
 80043f8:	2340      	movs	r3, #64	; 0x40
 80043fa:	f8ca 3014 	str.w	r3, [sl, #20]
 80043fe:	f7fe bfef 	b.w	80033e0 <_svfprintf_r+0x38>
 8004402:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004404:	4651      	mov	r1, sl
 8004406:	465a      	mov	r2, fp
 8004408:	f002 fb20 	bl	8006a4c <__ssprint_r>
 800440c:	2800      	cmp	r0, #0
 800440e:	f47f a8a2 	bne.w	8003556 <_svfprintf_r+0x1ae>
 8004412:	9f40      	ldr	r7, [sp, #256]	; 0x100
 8004414:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004416:	ae1f      	add	r6, sp, #124	; 0x7c
 8004418:	e6ba      	b.n	8004190 <_svfprintf_r+0xde8>
 800441a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800441c:	2847      	cmp	r0, #71	; 0x47
 800441e:	bf18      	it	ne
 8004420:	2867      	cmpne	r0, #103	; 0x67
 8004422:	bf14      	ite	ne
 8004424:	2000      	movne	r0, #0
 8004426:	2001      	moveq	r0, #1
 8004428:	900a      	str	r0, [sp, #40]	; 0x28
 800442a:	2406      	movs	r4, #6
 800442c:	e712      	b.n	8004254 <_svfprintf_r+0xeac>
 800442e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004430:	4651      	mov	r1, sl
 8004432:	465a      	mov	r2, fp
 8004434:	f002 fb0a 	bl	8006a4c <__ssprint_r>
 8004438:	2800      	cmp	r0, #0
 800443a:	f47f a88c 	bne.w	8003556 <_svfprintf_r+0x1ae>
 800443e:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004440:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8004442:	ae1f      	add	r6, sp, #124	; 0x7c
 8004444:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004446:	f7ff bb4c 	b.w	8003ae2 <_svfprintf_r+0x73a>
 800444a:	f002 facf 	bl	80069ec <strlen>
 800444e:	900d      	str	r0, [sp, #52]	; 0x34
 8004450:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8004454:	9512      	str	r5, [sp, #72]	; 0x48
 8004456:	900a      	str	r0, [sp, #40]	; 0x28
 8004458:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 800445c:	970e      	str	r7, [sp, #56]	; 0x38
 800445e:	9516      	str	r5, [sp, #88]	; 0x58
 8004460:	f7ff b910 	b.w	8003684 <_svfprintf_r+0x2dc>
 8004464:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004466:	4651      	mov	r1, sl
 8004468:	465a      	mov	r2, fp
 800446a:	f002 faef 	bl	8006a4c <__ssprint_r>
 800446e:	2800      	cmp	r0, #0
 8004470:	f47f a871 	bne.w	8003556 <_svfprintf_r+0x1ae>
 8004474:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004476:	ae1f      	add	r6, sp, #124	; 0x7c
 8004478:	e4fc      	b.n	8003e74 <_svfprintf_r+0xacc>
 800447a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800447c:	4651      	mov	r1, sl
 800447e:	465a      	mov	r2, fp
 8004480:	f002 fae4 	bl	8006a4c <__ssprint_r>
 8004484:	2800      	cmp	r0, #0
 8004486:	f47f a866 	bne.w	8003556 <_svfprintf_r+0x1ae>
 800448a:	9b40      	ldr	r3, [sp, #256]	; 0x100
 800448c:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 800448e:	ae1f      	add	r6, sp, #124	; 0x7c
 8004490:	e59e      	b.n	8003fd0 <_svfprintf_r+0xc28>
 8004492:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004494:	4651      	mov	r1, sl
 8004496:	465a      	mov	r2, fp
 8004498:	f002 fad8 	bl	8006a4c <__ssprint_r>
 800449c:	2800      	cmp	r0, #0
 800449e:	f47f a85a 	bne.w	8003556 <_svfprintf_r+0x1ae>
 80044a2:	9b40      	ldr	r3, [sp, #256]	; 0x100
 80044a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80044a6:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	ae1f      	add	r6, sp, #124	; 0x7c
 80044ac:	e5a7      	b.n	8003ffe <_svfprintf_r+0xc56>
 80044ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80044b0:	ebc3 030b 	rsb	r3, r3, fp
 80044b4:	930d      	str	r3, [sp, #52]	; 0x34
 80044b6:	f7ff b8db 	b.w	8003670 <_svfprintf_r+0x2c8>
 80044ba:	46a0      	mov	r8, r4
 80044bc:	461c      	mov	r4, r3
 80044be:	3401      	adds	r4, #1
 80044c0:	19ed      	adds	r5, r5, r7
 80044c2:	2c07      	cmp	r4, #7
 80044c4:	f8c6 8000 	str.w	r8, [r6]
 80044c8:	6077      	str	r7, [r6, #4]
 80044ca:	953b      	str	r5, [sp, #236]	; 0xec
 80044cc:	943a      	str	r4, [sp, #232]	; 0xe8
 80044ce:	dcae      	bgt.n	800442e <_svfprintf_r+0x1086>
 80044d0:	3608      	adds	r6, #8
 80044d2:	e7b7      	b.n	8004444 <_svfprintf_r+0x109c>
 80044d4:	2c06      	cmp	r4, #6
 80044d6:	bf28      	it	cs
 80044d8:	2406      	movcs	r4, #6
 80044da:	4a5f      	ldr	r2, [pc, #380]	; (8004658 <_svfprintf_r+0x12b0>)
 80044dc:	ea24 71e4 	bic.w	r1, r4, r4, asr #31
 80044e0:	940d      	str	r4, [sp, #52]	; 0x34
 80044e2:	910a      	str	r1, [sp, #40]	; 0x28
 80044e4:	970e      	str	r7, [sp, #56]	; 0x38
 80044e6:	9211      	str	r2, [sp, #68]	; 0x44
 80044e8:	f7ff ba0c 	b.w	8003904 <_svfprintf_r+0x55c>
 80044ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80044ee:	2b65      	cmp	r3, #101	; 0x65
 80044f0:	dd6f      	ble.n	80045d2 <_svfprintf_r+0x122a>
 80044f2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80044f4:	9940      	ldr	r1, [sp, #256]	; 0x100
 80044f6:	2a00      	cmp	r2, #0
 80044f8:	d15e      	bne.n	80045b8 <_svfprintf_r+0x1210>
 80044fa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80044fc:	428a      	cmp	r2, r1
 80044fe:	dc3d      	bgt.n	800457c <_svfprintf_r+0x11d4>
 8004500:	9b08      	ldr	r3, [sp, #32]
 8004502:	07da      	lsls	r2, r3, #31
 8004504:	d56c      	bpl.n	80045e0 <_svfprintf_r+0x1238>
 8004506:	1c4b      	adds	r3, r1, #1
 8004508:	ea23 70e3 	bic.w	r0, r3, r3, asr #31
 800450c:	2267      	movs	r2, #103	; 0x67
 800450e:	930d      	str	r3, [sp, #52]	; 0x34
 8004510:	900a      	str	r0, [sp, #40]	; 0x28
 8004512:	9215      	str	r2, [sp, #84]	; 0x54
 8004514:	9116      	str	r1, [sp, #88]	; 0x58
 8004516:	e757      	b.n	80043c8 <_svfprintf_r+0x1020>
 8004518:	9b42      	ldr	r3, [sp, #264]	; 0x108
 800451a:	429f      	cmp	r7, r3
 800451c:	bf98      	it	ls
 800451e:	461f      	movls	r7, r3
 8004520:	f67f aeed 	bls.w	80042fe <_svfprintf_r+0xf56>
 8004524:	2230      	movs	r2, #48	; 0x30
 8004526:	f803 2b01 	strb.w	r2, [r3], #1
 800452a:	42bb      	cmp	r3, r7
 800452c:	9342      	str	r3, [sp, #264]	; 0x108
 800452e:	d1fa      	bne.n	8004526 <_svfprintf_r+0x117e>
 8004530:	e6e5      	b.n	80042fe <_svfprintf_r+0xf56>
 8004532:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
 8004536:	9012      	str	r0, [sp, #72]	; 0x48
 8004538:	930a      	str	r3, [sp, #40]	; 0x28
 800453a:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 800453e:	970e      	str	r7, [sp, #56]	; 0x38
 8004540:	940d      	str	r4, [sp, #52]	; 0x34
 8004542:	9016      	str	r0, [sp, #88]	; 0x58
 8004544:	f7ff b89e 	b.w	8003684 <_svfprintf_r+0x2dc>
 8004548:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800454a:	4651      	mov	r1, sl
 800454c:	465a      	mov	r2, fp
 800454e:	f002 fa7d 	bl	8006a4c <__ssprint_r>
 8004552:	2800      	cmp	r0, #0
 8004554:	f47e afff 	bne.w	8003556 <_svfprintf_r+0x1ae>
 8004558:	9f40      	ldr	r7, [sp, #256]	; 0x100
 800455a:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 800455c:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 800455e:	ae1f      	add	r6, sp, #124	; 0x7c
 8004560:	e62a      	b.n	80041b8 <_svfprintf_r+0xe10>
 8004562:	212d      	movs	r1, #45	; 0x2d
 8004564:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8004568:	9112      	str	r1, [sp, #72]	; 0x48
 800456a:	e67c      	b.n	8004266 <_svfprintf_r+0xebe>
 800456c:	3130      	adds	r1, #48	; 0x30
 800456e:	2330      	movs	r3, #48	; 0x30
 8004570:	f88d 10f3 	strb.w	r1, [sp, #243]	; 0xf3
 8004574:	f88d 30f2 	strb.w	r3, [sp, #242]	; 0xf2
 8004578:	a93d      	add	r1, sp, #244	; 0xf4
 800457a:	e714      	b.n	80043a6 <_svfprintf_r+0xffe>
 800457c:	2900      	cmp	r1, #0
 800457e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8004580:	bfd4      	ite	le
 8004582:	f1c1 0302 	rsble	r3, r1, #2
 8004586:	2301      	movgt	r3, #1
 8004588:	181b      	adds	r3, r3, r0
 800458a:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 800458e:	930d      	str	r3, [sp, #52]	; 0x34
 8004590:	2367      	movs	r3, #103	; 0x67
 8004592:	920a      	str	r2, [sp, #40]	; 0x28
 8004594:	9315      	str	r3, [sp, #84]	; 0x54
 8004596:	e7bd      	b.n	8004514 <_svfprintf_r+0x116c>
 8004598:	2401      	movs	r4, #1
 800459a:	940a      	str	r4, [sp, #40]	; 0x28
 800459c:	e65a      	b.n	8004254 <_svfprintf_r+0xeac>
 800459e:	4640      	mov	r0, r8
 80045a0:	4629      	mov	r1, r5
 80045a2:	2200      	movs	r2, #0
 80045a4:	2300      	movs	r3, #0
 80045a6:	f003 fe1b 	bl	80081e0 <__aeabi_dcmpeq>
 80045aa:	2800      	cmp	r0, #0
 80045ac:	f47f ae9b 	bne.w	80042e6 <_svfprintf_r+0xf3e>
 80045b0:	f1c9 0301 	rsb	r3, r9, #1
 80045b4:	9340      	str	r3, [sp, #256]	; 0x100
 80045b6:	e697      	b.n	80042e8 <_svfprintf_r+0xf40>
 80045b8:	2900      	cmp	r1, #0
 80045ba:	dd38      	ble.n	800462e <_svfprintf_r+0x1286>
 80045bc:	bb74      	cbnz	r4, 800461c <_svfprintf_r+0x1274>
 80045be:	9b08      	ldr	r3, [sp, #32]
 80045c0:	07dd      	lsls	r5, r3, #31
 80045c2:	d42b      	bmi.n	800461c <_svfprintf_r+0x1274>
 80045c4:	ea21 70e1 	bic.w	r0, r1, r1, asr #31
 80045c8:	2266      	movs	r2, #102	; 0x66
 80045ca:	900a      	str	r0, [sp, #40]	; 0x28
 80045cc:	910d      	str	r1, [sp, #52]	; 0x34
 80045ce:	9215      	str	r2, [sp, #84]	; 0x54
 80045d0:	e7a0      	b.n	8004514 <_svfprintf_r+0x116c>
 80045d2:	9940      	ldr	r1, [sp, #256]	; 0x100
 80045d4:	e6a3      	b.n	800431e <_svfprintf_r+0xf76>
 80045d6:	232d      	movs	r3, #45	; 0x2d
 80045d8:	4249      	negs	r1, r1
 80045da:	f88d 30f1 	strb.w	r3, [sp, #241]	; 0xf1
 80045de:	e6a9      	b.n	8004334 <_svfprintf_r+0xf8c>
 80045e0:	ea21 70e1 	bic.w	r0, r1, r1, asr #31
 80045e4:	2267      	movs	r2, #103	; 0x67
 80045e6:	900a      	str	r0, [sp, #40]	; 0x28
 80045e8:	910d      	str	r1, [sp, #52]	; 0x34
 80045ea:	9215      	str	r2, [sp, #84]	; 0x54
 80045ec:	e792      	b.n	8004514 <_svfprintf_r+0x116c>
 80045ee:	9908      	ldr	r1, [sp, #32]
 80045f0:	f011 0301 	ands.w	r3, r1, #1
 80045f4:	f47f aee0 	bne.w	80043b8 <_svfprintf_r+0x1010>
 80045f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80045fa:	9316      	str	r3, [sp, #88]	; 0x58
 80045fc:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8004600:	920a      	str	r2, [sp, #40]	; 0x28
 8004602:	e6e1      	b.n	80043c8 <_svfprintf_r+0x1020>
 8004604:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004606:	680c      	ldr	r4, [r1, #0]
 8004608:	1d0b      	adds	r3, r1, #4
 800460a:	2c00      	cmp	r4, #0
 800460c:	bfbc      	itt	lt
 800460e:	930e      	strlt	r3, [sp, #56]	; 0x38
 8004610:	f04f 34ff 	movlt.w	r4, #4294967295	; 0xffffffff
 8004614:	f6bf a990 	bge.w	8003938 <_svfprintf_r+0x590>
 8004618:	f7fe bf24 	b.w	8003464 <_svfprintf_r+0xbc>
 800461c:	3401      	adds	r4, #1
 800461e:	190c      	adds	r4, r1, r4
 8004620:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
 8004624:	2066      	movs	r0, #102	; 0x66
 8004626:	940d      	str	r4, [sp, #52]	; 0x34
 8004628:	930a      	str	r3, [sp, #40]	; 0x28
 800462a:	9015      	str	r0, [sp, #84]	; 0x54
 800462c:	e772      	b.n	8004514 <_svfprintf_r+0x116c>
 800462e:	b914      	cbnz	r4, 8004636 <_svfprintf_r+0x128e>
 8004630:	9a08      	ldr	r2, [sp, #32]
 8004632:	07d0      	lsls	r0, r2, #31
 8004634:	d509      	bpl.n	800464a <_svfprintf_r+0x12a2>
 8004636:	3402      	adds	r4, #2
 8004638:	e7f2      	b.n	8004620 <_svfprintf_r+0x1278>
 800463a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800463c:	230c      	movs	r3, #12
 800463e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004642:	600b      	str	r3, [r1, #0]
 8004644:	920c      	str	r2, [sp, #48]	; 0x30
 8004646:	f7fe bf8f 	b.w	8003568 <_svfprintf_r+0x1c0>
 800464a:	2001      	movs	r0, #1
 800464c:	2266      	movs	r2, #102	; 0x66
 800464e:	900a      	str	r0, [sp, #40]	; 0x28
 8004650:	9215      	str	r2, [sp, #84]	; 0x54
 8004652:	900d      	str	r0, [sp, #52]	; 0x34
 8004654:	e75e      	b.n	8004514 <_svfprintf_r+0x116c>
 8004656:	bf00      	nop
 8004658:	08008900 	.word	0x08008900
 800465c:	00000000 	.word	0x00000000

08004660 <quorem>:
 8004660:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004664:	690d      	ldr	r5, [r1, #16]
 8004666:	6903      	ldr	r3, [r0, #16]
 8004668:	4681      	mov	r9, r0
 800466a:	429d      	cmp	r5, r3
 800466c:	f300 8085 	bgt.w	800477a <quorem+0x11a>
 8004670:	1ceb      	adds	r3, r5, #3
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	18cf      	adds	r7, r1, r3
 8004676:	687e      	ldr	r6, [r7, #4]
 8004678:	18c3      	adds	r3, r0, r3
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	3601      	adds	r6, #1
 800467e:	fbb3 f6f6 	udiv	r6, r3, r6
 8004682:	f101 0414 	add.w	r4, r1, #20
 8004686:	3d01      	subs	r5, #1
 8004688:	3704      	adds	r7, #4
 800468a:	f100 0814 	add.w	r8, r0, #20
 800468e:	2e00      	cmp	r6, #0
 8004690:	d03d      	beq.n	800470e <quorem+0xae>
 8004692:	f04f 0e00 	mov.w	lr, #0
 8004696:	4642      	mov	r2, r8
 8004698:	4623      	mov	r3, r4
 800469a:	46f3      	mov	fp, lr
 800469c:	f853 cb04 	ldr.w	ip, [r3], #4
 80046a0:	6810      	ldr	r0, [r2, #0]
 80046a2:	fa1f fa8c 	uxth.w	sl, ip
 80046a6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80046aa:	fb06 ea0a 	mla	sl, r6, sl, lr
 80046ae:	fb06 fe0c 	mul.w	lr, r6, ip
 80046b2:	fa1f fc80 	uxth.w	ip, r0
 80046b6:	eb0e 4e1a 	add.w	lr, lr, sl, lsr #16
 80046ba:	44e3      	add	fp, ip
 80046bc:	fa1f fc8a 	uxth.w	ip, sl
 80046c0:	fa1f fa8e 	uxth.w	sl, lr
 80046c4:	ebcc 0c0b 	rsb	ip, ip, fp
 80046c8:	ebca 4010 	rsb	r0, sl, r0, lsr #16
 80046cc:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80046d0:	fa1f fc8c 	uxth.w	ip, ip
 80046d4:	ea4c 4c00 	orr.w	ip, ip, r0, lsl #16
 80046d8:	429f      	cmp	r7, r3
 80046da:	f842 cb04 	str.w	ip, [r2], #4
 80046de:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 80046e2:	ea4f 4b20 	mov.w	fp, r0, asr #16
 80046e6:	d2d9      	bcs.n	800469c <quorem+0x3c>
 80046e8:	1d2a      	adds	r2, r5, #4
 80046ea:	eb09 0382 	add.w	r3, r9, r2, lsl #2
 80046ee:	6858      	ldr	r0, [r3, #4]
 80046f0:	b968      	cbnz	r0, 800470e <quorem+0xae>
 80046f2:	4598      	cmp	r8, r3
 80046f4:	d209      	bcs.n	800470a <quorem+0xaa>
 80046f6:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 80046fa:	b112      	cbz	r2, 8004702 <quorem+0xa2>
 80046fc:	e005      	b.n	800470a <quorem+0xaa>
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	b91a      	cbnz	r2, 800470a <quorem+0xaa>
 8004702:	3b04      	subs	r3, #4
 8004704:	3d01      	subs	r5, #1
 8004706:	4598      	cmp	r8, r3
 8004708:	d3f9      	bcc.n	80046fe <quorem+0x9e>
 800470a:	f8c9 5010 	str.w	r5, [r9, #16]
 800470e:	4648      	mov	r0, r9
 8004710:	f001 fe3a 	bl	8006388 <__mcmp>
 8004714:	2800      	cmp	r0, #0
 8004716:	db2d      	blt.n	8004774 <quorem+0x114>
 8004718:	3601      	adds	r6, #1
 800471a:	4643      	mov	r3, r8
 800471c:	f04f 0c00 	mov.w	ip, #0
 8004720:	f854 2b04 	ldr.w	r2, [r4], #4
 8004724:	6818      	ldr	r0, [r3, #0]
 8004726:	b291      	uxth	r1, r2
 8004728:	fa1f fa80 	uxth.w	sl, r0
 800472c:	0c12      	lsrs	r2, r2, #16
 800472e:	ebc1 010a 	rsb	r1, r1, sl
 8004732:	4461      	add	r1, ip
 8004734:	ebc2 4210 	rsb	r2, r2, r0, lsr #16
 8004738:	eb02 4221 	add.w	r2, r2, r1, asr #16
 800473c:	b289      	uxth	r1, r1
 800473e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004742:	42a7      	cmp	r7, r4
 8004744:	f843 1b04 	str.w	r1, [r3], #4
 8004748:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800474c:	d2e8      	bcs.n	8004720 <quorem+0xc0>
 800474e:	1d2a      	adds	r2, r5, #4
 8004750:	eb09 0382 	add.w	r3, r9, r2, lsl #2
 8004754:	6859      	ldr	r1, [r3, #4]
 8004756:	b969      	cbnz	r1, 8004774 <quorem+0x114>
 8004758:	4598      	cmp	r8, r3
 800475a:	d209      	bcs.n	8004770 <quorem+0x110>
 800475c:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 8004760:	b112      	cbz	r2, 8004768 <quorem+0x108>
 8004762:	e005      	b.n	8004770 <quorem+0x110>
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	b91a      	cbnz	r2, 8004770 <quorem+0x110>
 8004768:	3b04      	subs	r3, #4
 800476a:	3d01      	subs	r5, #1
 800476c:	4598      	cmp	r8, r3
 800476e:	d3f9      	bcc.n	8004764 <quorem+0x104>
 8004770:	f8c9 5010 	str.w	r5, [r9, #16]
 8004774:	4630      	mov	r0, r6
 8004776:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800477a:	2000      	movs	r0, #0
 800477c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004780 <_dtoa_r>:
 8004780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004784:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004786:	b09d      	sub	sp, #116	; 0x74
 8004788:	4607      	mov	r7, r0
 800478a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800478c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004790:	b141      	cbz	r1, 80047a4 <_dtoa_r+0x24>
 8004792:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004794:	2201      	movs	r2, #1
 8004796:	409a      	lsls	r2, r3
 8004798:	604b      	str	r3, [r1, #4]
 800479a:	608a      	str	r2, [r1, #8]
 800479c:	f001 fbbe 	bl	8005f1c <_Bfree>
 80047a0:	2300      	movs	r3, #0
 80047a2:	643b      	str	r3, [r7, #64]	; 0x40
 80047a4:	9d03      	ldr	r5, [sp, #12]
 80047a6:	2d00      	cmp	r5, #0
 80047a8:	f2c0 80df 	blt.w	800496a <_dtoa_r+0x1ea>
 80047ac:	2300      	movs	r3, #0
 80047ae:	6023      	str	r3, [r4, #0]
 80047b0:	2300      	movs	r3, #0
 80047b2:	461a      	mov	r2, r3
 80047b4:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 80047b8:	f6c7 72f0 	movt	r2, #32752	; 0x7ff0
 80047bc:	402b      	ands	r3, r5
 80047be:	4293      	cmp	r3, r2
 80047c0:	f000 80bf 	beq.w	8004942 <_dtoa_r+0x1c2>
 80047c4:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80047c8:	2200      	movs	r2, #0
 80047ca:	4640      	mov	r0, r8
 80047cc:	4649      	mov	r1, r9
 80047ce:	2300      	movs	r3, #0
 80047d0:	2401      	movs	r4, #1
 80047d2:	f003 fd05 	bl	80081e0 <__aeabi_dcmpeq>
 80047d6:	b978      	cbnz	r0, 80047f8 <_dtoa_r+0x78>
 80047d8:	f014 0fff 	tst.w	r4, #255	; 0xff
 80047dc:	d110      	bne.n	8004800 <_dtoa_r+0x80>
 80047de:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 80047e0:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 80047e2:	2301      	movs	r3, #1
 80047e4:	602b      	str	r3, [r5, #0]
 80047e6:	4d78      	ldr	r5, [pc, #480]	; (80049c8 <_dtoa_r+0x248>)
 80047e8:	b114      	cbz	r4, 80047f0 <_dtoa_r+0x70>
 80047ea:	4d78      	ldr	r5, [pc, #480]	; (80049cc <_dtoa_r+0x24c>)
 80047ec:	6025      	str	r5, [r4, #0]
 80047ee:	3d01      	subs	r5, #1
 80047f0:	4628      	mov	r0, r5
 80047f2:	b01d      	add	sp, #116	; 0x74
 80047f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047f8:	2400      	movs	r4, #0
 80047fa:	f014 0fff 	tst.w	r4, #255	; 0xff
 80047fe:	d0ee      	beq.n	80047de <_dtoa_r+0x5e>
 8004800:	a91b      	add	r1, sp, #108	; 0x6c
 8004802:	9100      	str	r1, [sp, #0]
 8004804:	4638      	mov	r0, r7
 8004806:	a91a      	add	r1, sp, #104	; 0x68
 8004808:	4642      	mov	r2, r8
 800480a:	464b      	mov	r3, r9
 800480c:	9101      	str	r1, [sp, #4]
 800480e:	f001 febd 	bl	800658c <__d2b>
 8004812:	f3c5 540a 	ubfx	r4, r5, #20, #11
 8004816:	900a      	str	r0, [sp, #40]	; 0x28
 8004818:	2c00      	cmp	r4, #0
 800481a:	f040 80b5 	bne.w	8004988 <_dtoa_r+0x208>
 800481e:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8004820:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8004822:	f46f 6382 	mvn.w	r3, #1040	; 0x410
 8004826:	1934      	adds	r4, r6, r4
 8004828:	429c      	cmp	r4, r3
 800482a:	f2c0 8284 	blt.w	8004d36 <_dtoa_r+0x5b6>
 800482e:	f64f 430e 	movw	r3, #64526	; 0xfc0e
 8004832:	f6cf 73ff 	movt	r3, #65535	; 0xffff
 8004836:	9902      	ldr	r1, [sp, #8]
 8004838:	1b1b      	subs	r3, r3, r4
 800483a:	f204 4212 	addw	r2, r4, #1042	; 0x412
 800483e:	fa15 f303 	lsls.w	r3, r5, r3
 8004842:	fa31 f002 	lsrs.w	r0, r1, r2
 8004846:	4318      	orrs	r0, r3
 8004848:	f003 f9ec 	bl	8007c24 <__aeabi_ui2d>
 800484c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004850:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004852:	2501      	movs	r5, #1
 8004854:	f1a3 73f8 	sub.w	r3, r3, #32505856	; 0x1f00000
 8004858:	930d      	str	r3, [sp, #52]	; 0x34
 800485a:	3c01      	subs	r4, #1
 800485c:	9516      	str	r5, [sp, #88]	; 0x58
 800485e:	2300      	movs	r3, #0
 8004860:	2200      	movs	r2, #0
 8004862:	f6c3 73f8 	movt	r3, #16376	; 0x3ff8
 8004866:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800486a:	f003 f89d 	bl	80079a8 <__aeabi_dsub>
 800486e:	a350      	add	r3, pc, #320	; (adr r3, 80049b0 <_dtoa_r+0x230>)
 8004870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004874:	f003 fa4c 	bl	8007d10 <__aeabi_dmul>
 8004878:	a34f      	add	r3, pc, #316	; (adr r3, 80049b8 <_dtoa_r+0x238>)
 800487a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800487e:	f003 f895 	bl	80079ac <__adddf3>
 8004882:	4680      	mov	r8, r0
 8004884:	4620      	mov	r0, r4
 8004886:	4689      	mov	r9, r1
 8004888:	f003 f9dc 	bl	8007c44 <__aeabi_i2d>
 800488c:	a34c      	add	r3, pc, #304	; (adr r3, 80049c0 <_dtoa_r+0x240>)
 800488e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004892:	f003 fa3d 	bl	8007d10 <__aeabi_dmul>
 8004896:	4602      	mov	r2, r0
 8004898:	460b      	mov	r3, r1
 800489a:	4640      	mov	r0, r8
 800489c:	4649      	mov	r1, r9
 800489e:	f003 f885 	bl	80079ac <__adddf3>
 80048a2:	4680      	mov	r8, r0
 80048a4:	4689      	mov	r9, r1
 80048a6:	f003 fccd 	bl	8008244 <__aeabi_d2iz>
 80048aa:	4649      	mov	r1, r9
 80048ac:	9007      	str	r0, [sp, #28]
 80048ae:	2200      	movs	r2, #0
 80048b0:	4640      	mov	r0, r8
 80048b2:	2300      	movs	r3, #0
 80048b4:	f003 fc9e 	bl	80081f4 <__aeabi_dcmplt>
 80048b8:	b150      	cbz	r0, 80048d0 <_dtoa_r+0x150>
 80048ba:	9807      	ldr	r0, [sp, #28]
 80048bc:	f003 f9c2 	bl	8007c44 <__aeabi_i2d>
 80048c0:	4642      	mov	r2, r8
 80048c2:	464b      	mov	r3, r9
 80048c4:	f003 fc8c 	bl	80081e0 <__aeabi_dcmpeq>
 80048c8:	b910      	cbnz	r0, 80048d0 <_dtoa_r+0x150>
 80048ca:	9d07      	ldr	r5, [sp, #28]
 80048cc:	3d01      	subs	r5, #1
 80048ce:	9507      	str	r5, [sp, #28]
 80048d0:	9d07      	ldr	r5, [sp, #28]
 80048d2:	2d16      	cmp	r5, #22
 80048d4:	f200 815f 	bhi.w	8004b96 <_dtoa_r+0x416>
 80048d8:	493d      	ldr	r1, [pc, #244]	; (80049d0 <_dtoa_r+0x250>)
 80048da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80048de:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 80048e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80048e6:	f003 fca3 	bl	8008230 <__aeabi_dcmpgt>
 80048ea:	2800      	cmp	r0, #0
 80048ec:	f000 822c 	beq.w	8004d48 <_dtoa_r+0x5c8>
 80048f0:	9d07      	ldr	r5, [sp, #28]
 80048f2:	3d01      	subs	r5, #1
 80048f4:	9507      	str	r5, [sp, #28]
 80048f6:	2500      	movs	r5, #0
 80048f8:	9514      	str	r5, [sp, #80]	; 0x50
 80048fa:	1b34      	subs	r4, r6, r4
 80048fc:	3c01      	subs	r4, #1
 80048fe:	f100 8215 	bmi.w	8004d2c <_dtoa_r+0x5ac>
 8004902:	2500      	movs	r5, #0
 8004904:	940b      	str	r4, [sp, #44]	; 0x2c
 8004906:	950f      	str	r5, [sp, #60]	; 0x3c
 8004908:	9c07      	ldr	r4, [sp, #28]
 800490a:	2c00      	cmp	r4, #0
 800490c:	f2c0 8205 	blt.w	8004d1a <_dtoa_r+0x59a>
 8004910:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8004912:	9413      	str	r4, [sp, #76]	; 0x4c
 8004914:	192d      	adds	r5, r5, r4
 8004916:	2400      	movs	r4, #0
 8004918:	950b      	str	r5, [sp, #44]	; 0x2c
 800491a:	9410      	str	r4, [sp, #64]	; 0x40
 800491c:	9d26      	ldr	r5, [sp, #152]	; 0x98
 800491e:	2d09      	cmp	r5, #9
 8004920:	d85c      	bhi.n	80049dc <_dtoa_r+0x25c>
 8004922:	2401      	movs	r4, #1
 8004924:	2d05      	cmp	r5, #5
 8004926:	dd02      	ble.n	800492e <_dtoa_r+0x1ae>
 8004928:	3d04      	subs	r5, #4
 800492a:	9526      	str	r5, [sp, #152]	; 0x98
 800492c:	2400      	movs	r4, #0
 800492e:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8004930:	1eab      	subs	r3, r5, #2
 8004932:	2b03      	cmp	r3, #3
 8004934:	d854      	bhi.n	80049e0 <_dtoa_r+0x260>
 8004936:	e8df f013 	tbh	[pc, r3, lsl #1]
 800493a:	0387      	.short	0x0387
 800493c:	02490372 	.word	0x02490372
 8004940:	038a      	.short	0x038a
 8004942:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 8004944:	9802      	ldr	r0, [sp, #8]
 8004946:	f242 730f 	movw	r3, #9999	; 0x270f
 800494a:	6023      	str	r3, [r4, #0]
 800494c:	b198      	cbz	r0, 8004976 <_dtoa_r+0x1f6>
 800494e:	4d21      	ldr	r5, [pc, #132]	; (80049d4 <_dtoa_r+0x254>)
 8004950:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8004952:	2c00      	cmp	r4, #0
 8004954:	f43f af4c 	beq.w	80047f0 <_dtoa_r+0x70>
 8004958:	78eb      	ldrb	r3, [r5, #3]
 800495a:	2b00      	cmp	r3, #0
 800495c:	f000 8119 	beq.w	8004b92 <_dtoa_r+0x412>
 8004960:	f105 0308 	add.w	r3, r5, #8
 8004964:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8004966:	6023      	str	r3, [r4, #0]
 8004968:	e742      	b.n	80047f0 <_dtoa_r+0x70>
 800496a:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
 800496e:	2301      	movs	r3, #1
 8004970:	6023      	str	r3, [r4, #0]
 8004972:	9503      	str	r5, [sp, #12]
 8004974:	e71c      	b.n	80047b0 <_dtoa_r+0x30>
 8004976:	4b17      	ldr	r3, [pc, #92]	; (80049d4 <_dtoa_r+0x254>)
 8004978:	4a17      	ldr	r2, [pc, #92]	; (80049d8 <_dtoa_r+0x258>)
 800497a:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800497e:	2d00      	cmp	r5, #0
 8004980:	bf0c      	ite	eq
 8004982:	4615      	moveq	r5, r2
 8004984:	461d      	movne	r5, r3
 8004986:	e7e3      	b.n	8004950 <_dtoa_r+0x1d0>
 8004988:	4649      	mov	r1, r9
 800498a:	4640      	mov	r0, r8
 800498c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004990:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004992:	2500      	movs	r5, #0
 8004994:	f021 437f 	bic.w	r3, r1, #4278190080	; 0xff000000
 8004998:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800499c:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80049a0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80049a4:	930d      	str	r3, [sp, #52]	; 0x34
 80049a6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80049aa:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 80049ac:	9516      	str	r5, [sp, #88]	; 0x58
 80049ae:	e756      	b.n	800485e <_dtoa_r+0xde>
 80049b0:	636f4361 	.word	0x636f4361
 80049b4:	3fd287a7 	.word	0x3fd287a7
 80049b8:	8b60c8b3 	.word	0x8b60c8b3
 80049bc:	3fc68a28 	.word	0x3fc68a28
 80049c0:	509f79fb 	.word	0x509f79fb
 80049c4:	3fd34413 	.word	0x3fd34413
 80049c8:	08008908 	.word	0x08008908
 80049cc:	08008909 	.word	0x08008909
 80049d0:	08008670 	.word	0x08008670
 80049d4:	08008918 	.word	0x08008918
 80049d8:	0800890c 	.word	0x0800890c
 80049dc:	2400      	movs	r4, #0
 80049de:	9426      	str	r4, [sp, #152]	; 0x98
 80049e0:	2400      	movs	r4, #0
 80049e2:	647c      	str	r4, [r7, #68]	; 0x44
 80049e4:	4638      	mov	r0, r7
 80049e6:	4621      	mov	r1, r4
 80049e8:	f001 fa72 	bl	8005ed0 <_Balloc>
 80049ec:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80049f0:	950e      	str	r5, [sp, #56]	; 0x38
 80049f2:	2501      	movs	r5, #1
 80049f4:	9512      	str	r5, [sp, #72]	; 0x48
 80049f6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80049fa:	9009      	str	r0, [sp, #36]	; 0x24
 80049fc:	6438      	str	r0, [r7, #64]	; 0x40
 80049fe:	9515      	str	r5, [sp, #84]	; 0x54
 8004a00:	9427      	str	r4, [sp, #156]	; 0x9c
 8004a02:	9c07      	ldr	r4, [sp, #28]
 8004a04:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004a06:	2c0e      	cmp	r4, #14
 8004a08:	bfcc      	ite	gt
 8004a0a:	2500      	movgt	r5, #0
 8004a0c:	2501      	movle	r5, #1
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	bfb8      	it	lt
 8004a12:	2500      	movlt	r5, #0
 8004a14:	2d00      	cmp	r5, #0
 8004a16:	f000 80c3 	beq.w	8004ba0 <_dtoa_r+0x420>
 8004a1a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8004a1c:	4b5f      	ldr	r3, [pc, #380]	; (8004b9c <_dtoa_r+0x41c>)
 8004a1e:	0fe5      	lsrs	r5, r4, #31
 8004a20:	9c07      	ldr	r4, [sp, #28]
 8004a22:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004a26:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8004a28:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004a2c:	2c00      	cmp	r4, #0
 8004a2e:	bfcc      	ite	gt
 8004a30:	2500      	movgt	r5, #0
 8004a32:	f005 0501 	andle.w	r5, r5, #1
 8004a36:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004a3a:	2d00      	cmp	r5, #0
 8004a3c:	f040 81ac 	bne.w	8004d98 <_dtoa_r+0x618>
 8004a40:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8004a44:	4602      	mov	r2, r0
 8004a46:	460b      	mov	r3, r1
 8004a48:	4640      	mov	r0, r8
 8004a4a:	4649      	mov	r1, r9
 8004a4c:	f003 fa8a 	bl	8007f64 <__aeabi_ddiv>
 8004a50:	f003 fbf8 	bl	8008244 <__aeabi_d2iz>
 8004a54:	4606      	mov	r6, r0
 8004a56:	f003 f8f5 	bl	8007c44 <__aeabi_i2d>
 8004a5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004a5e:	f003 f957 	bl	8007d10 <__aeabi_dmul>
 8004a62:	460b      	mov	r3, r1
 8004a64:	4602      	mov	r2, r0
 8004a66:	4649      	mov	r1, r9
 8004a68:	4640      	mov	r0, r8
 8004a6a:	f002 ff9d 	bl	80079a8 <__aeabi_dsub>
 8004a6e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8004a70:	f106 0330 	add.w	r3, r6, #48	; 0x30
 8004a74:	f804 3b01 	strb.w	r3, [r4], #1
 8004a78:	9411      	str	r4, [sp, #68]	; 0x44
 8004a7a:	46a0      	mov	r8, r4
 8004a7c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8004a7e:	4682      	mov	sl, r0
 8004a80:	2c01      	cmp	r4, #1
 8004a82:	468b      	mov	fp, r1
 8004a84:	d04c      	beq.n	8004b20 <_dtoa_r+0x3a0>
 8004a86:	2300      	movs	r3, #0
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8004a8e:	f003 f93f 	bl	8007d10 <__aeabi_dmul>
 8004a92:	2200      	movs	r2, #0
 8004a94:	2300      	movs	r3, #0
 8004a96:	4682      	mov	sl, r0
 8004a98:	468b      	mov	fp, r1
 8004a9a:	2401      	movs	r4, #1
 8004a9c:	f003 fba0 	bl	80081e0 <__aeabi_dcmpeq>
 8004aa0:	b100      	cbz	r0, 8004aa4 <_dtoa_r+0x324>
 8004aa2:	462c      	mov	r4, r5
 8004aa4:	f014 0fff 	tst.w	r4, #255	; 0xff
 8004aa8:	f000 8573 	beq.w	8005592 <_dtoa_r+0xe12>
 8004aac:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8004aae:	980e      	ldr	r0, [sp, #56]	; 0x38
 8004ab0:	1ca5      	adds	r5, r4, #2
 8004ab2:	eb04 0900 	add.w	r9, r4, r0
 8004ab6:	e00d      	b.n	8004ad4 <_dtoa_r+0x354>
 8004ab8:	f003 f92a 	bl	8007d10 <__aeabi_dmul>
 8004abc:	2200      	movs	r2, #0
 8004abe:	2300      	movs	r3, #0
 8004ac0:	4682      	mov	sl, r0
 8004ac2:	468b      	mov	fp, r1
 8004ac4:	f003 fb8c 	bl	80081e0 <__aeabi_dcmpeq>
 8004ac8:	b100      	cbz	r0, 8004acc <_dtoa_r+0x34c>
 8004aca:	2400      	movs	r4, #0
 8004acc:	f014 0fff 	tst.w	r4, #255	; 0xff
 8004ad0:	f000 8426 	beq.w	8005320 <_dtoa_r+0xba0>
 8004ad4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ad8:	4650      	mov	r0, sl
 8004ada:	4659      	mov	r1, fp
 8004adc:	f003 fa42 	bl	8007f64 <__aeabi_ddiv>
 8004ae0:	f003 fbb0 	bl	8008244 <__aeabi_d2iz>
 8004ae4:	4606      	mov	r6, r0
 8004ae6:	f003 f8ad 	bl	8007c44 <__aeabi_i2d>
 8004aea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004aee:	f003 f90f 	bl	8007d10 <__aeabi_dmul>
 8004af2:	4602      	mov	r2, r0
 8004af4:	460b      	mov	r3, r1
 8004af6:	4650      	mov	r0, sl
 8004af8:	4659      	mov	r1, fp
 8004afa:	f002 ff55 	bl	80079a8 <__aeabi_dsub>
 8004afe:	f106 0430 	add.w	r4, r6, #48	; 0x30
 8004b02:	2300      	movs	r3, #0
 8004b04:	2200      	movs	r2, #0
 8004b06:	454d      	cmp	r5, r9
 8004b08:	f805 4c01 	strb.w	r4, [r5, #-1]
 8004b0c:	46a8      	mov	r8, r5
 8004b0e:	4682      	mov	sl, r0
 8004b10:	468b      	mov	fp, r1
 8004b12:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8004b16:	f04f 0401 	mov.w	r4, #1
 8004b1a:	f105 0501 	add.w	r5, r5, #1
 8004b1e:	d1cb      	bne.n	8004ab8 <_dtoa_r+0x338>
 8004b20:	4652      	mov	r2, sl
 8004b22:	465b      	mov	r3, fp
 8004b24:	4650      	mov	r0, sl
 8004b26:	4659      	mov	r1, fp
 8004b28:	f002 ff40 	bl	80079ac <__adddf3>
 8004b2c:	4604      	mov	r4, r0
 8004b2e:	460d      	mov	r5, r1
 8004b30:	4622      	mov	r2, r4
 8004b32:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004b36:	462b      	mov	r3, r5
 8004b38:	f003 fb5c 	bl	80081f4 <__aeabi_dcmplt>
 8004b3c:	b958      	cbnz	r0, 8004b56 <_dtoa_r+0x3d6>
 8004b3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004b42:	4622      	mov	r2, r4
 8004b44:	462b      	mov	r3, r5
 8004b46:	f003 fb4b 	bl	80081e0 <__aeabi_dcmpeq>
 8004b4a:	2800      	cmp	r0, #0
 8004b4c:	f000 83e8 	beq.w	8005320 <_dtoa_r+0xba0>
 8004b50:	07f3      	lsls	r3, r6, #31
 8004b52:	f140 83e5 	bpl.w	8005320 <_dtoa_r+0xba0>
 8004b56:	9c07      	ldr	r4, [sp, #28]
 8004b58:	f818 6c01 	ldrb.w	r6, [r8, #-1]
 8004b5c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004b5e:	9417      	str	r4, [sp, #92]	; 0x5c
 8004b60:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004b62:	e003      	b.n	8004b6c <_dtoa_r+0x3ec>
 8004b64:	f818 6c02 	ldrb.w	r6, [r8, #-2]
 8004b68:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8004b6c:	2e39      	cmp	r6, #57	; 0x39
 8004b6e:	4643      	mov	r3, r8
 8004b70:	f040 848c 	bne.w	800548c <_dtoa_r+0xd0c>
 8004b74:	4590      	cmp	r8, r2
 8004b76:	d1f5      	bne.n	8004b64 <_dtoa_r+0x3e4>
 8004b78:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8004b7a:	9309      	str	r3, [sp, #36]	; 0x24
 8004b7c:	3401      	adds	r4, #1
 8004b7e:	9407      	str	r4, [sp, #28]
 8004b80:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8004b82:	2330      	movs	r3, #48	; 0x30
 8004b84:	f804 3c01 	strb.w	r3, [r4, #-1]
 8004b88:	2231      	movs	r2, #49	; 0x31
 8004b8a:	4623      	mov	r3, r4
 8004b8c:	f803 2c01 	strb.w	r2, [r3, #-1]
 8004b90:	e0b1      	b.n	8004cf6 <_dtoa_r+0x576>
 8004b92:	1ceb      	adds	r3, r5, #3
 8004b94:	e6e6      	b.n	8004964 <_dtoa_r+0x1e4>
 8004b96:	2501      	movs	r5, #1
 8004b98:	9514      	str	r5, [sp, #80]	; 0x50
 8004b9a:	e6ae      	b.n	80048fa <_dtoa_r+0x17a>
 8004b9c:	08008670 	.word	0x08008670
 8004ba0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8004ba2:	2c00      	cmp	r4, #0
 8004ba4:	f040 80d3 	bne.w	8004d4e <_dtoa_r+0x5ce>
 8004ba8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004baa:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8004bac:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
 8004bb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	bfc8      	it	gt
 8004bb6:	2c00      	cmpgt	r4, #0
 8004bb8:	dd09      	ble.n	8004bce <_dtoa_r+0x44e>
 8004bba:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004bbc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004bbe:	42a3      	cmp	r3, r4
 8004bc0:	bfa8      	it	ge
 8004bc2:	4623      	movge	r3, r4
 8004bc4:	1ac0      	subs	r0, r0, r3
 8004bc6:	1ac9      	subs	r1, r1, r3
 8004bc8:	900f      	str	r0, [sp, #60]	; 0x3c
 8004bca:	1ae4      	subs	r4, r4, r3
 8004bcc:	910b      	str	r1, [sp, #44]	; 0x2c
 8004bce:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004bd0:	2a00      	cmp	r2, #0
 8004bd2:	dd1a      	ble.n	8004c0a <_dtoa_r+0x48a>
 8004bd4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	f000 8420 	beq.w	800541c <_dtoa_r+0xc9c>
 8004bdc:	2d00      	cmp	r5, #0
 8004bde:	dd10      	ble.n	8004c02 <_dtoa_r+0x482>
 8004be0:	4651      	mov	r1, sl
 8004be2:	462a      	mov	r2, r5
 8004be4:	4638      	mov	r0, r7
 8004be6:	f001 fb23 	bl	8006230 <__pow5mult>
 8004bea:	4682      	mov	sl, r0
 8004bec:	4651      	mov	r1, sl
 8004bee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004bf0:	4638      	mov	r0, r7
 8004bf2:	f001 fa83 	bl	80060fc <__multiply>
 8004bf6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004bf8:	4606      	mov	r6, r0
 8004bfa:	4638      	mov	r0, r7
 8004bfc:	f001 f98e 	bl	8005f1c <_Bfree>
 8004c00:	960a      	str	r6, [sp, #40]	; 0x28
 8004c02:	9810      	ldr	r0, [sp, #64]	; 0x40
 8004c04:	1b42      	subs	r2, r0, r5
 8004c06:	f040 842c 	bne.w	8005462 <_dtoa_r+0xce2>
 8004c0a:	2101      	movs	r1, #1
 8004c0c:	4638      	mov	r0, r7
 8004c0e:	f001 fa6b 	bl	80060e8 <__i2b>
 8004c12:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8004c14:	4606      	mov	r6, r0
 8004c16:	2d00      	cmp	r5, #0
 8004c18:	dd05      	ble.n	8004c26 <_dtoa_r+0x4a6>
 8004c1a:	4631      	mov	r1, r6
 8004c1c:	4638      	mov	r0, r7
 8004c1e:	462a      	mov	r2, r5
 8004c20:	f001 fb06 	bl	8006230 <__pow5mult>
 8004c24:	4606      	mov	r6, r0
 8004c26:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8004c28:	2d01      	cmp	r5, #1
 8004c2a:	f340 8213 	ble.w	8005054 <_dtoa_r+0x8d4>
 8004c2e:	2500      	movs	r5, #0
 8004c30:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8004c32:	2301      	movs	r3, #1
 8004c34:	2800      	cmp	r0, #0
 8004c36:	f040 838f 	bne.w	8005358 <_dtoa_r+0xbd8>
 8004c3a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004c3c:	185b      	adds	r3, r3, r1
 8004c3e:	f013 031f 	ands.w	r3, r3, #31
 8004c42:	f000 82cf 	beq.w	80051e4 <_dtoa_r+0xa64>
 8004c46:	f1c3 0220 	rsb	r2, r3, #32
 8004c4a:	2a04      	cmp	r2, #4
 8004c4c:	f340 84bd 	ble.w	80055ca <_dtoa_r+0xe4a>
 8004c50:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004c52:	f1c3 031c 	rsb	r3, r3, #28
 8004c56:	18d2      	adds	r2, r2, r3
 8004c58:	18c9      	adds	r1, r1, r3
 8004c5a:	920f      	str	r2, [sp, #60]	; 0x3c
 8004c5c:	18e4      	adds	r4, r4, r3
 8004c5e:	910b      	str	r1, [sp, #44]	; 0x2c
 8004c60:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004c62:	2a00      	cmp	r2, #0
 8004c64:	dd04      	ble.n	8004c70 <_dtoa_r+0x4f0>
 8004c66:	4638      	mov	r0, r7
 8004c68:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004c6a:	f001 fb2d 	bl	80062c8 <__lshift>
 8004c6e:	900a      	str	r0, [sp, #40]	; 0x28
 8004c70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	dd05      	ble.n	8004c82 <_dtoa_r+0x502>
 8004c76:	4631      	mov	r1, r6
 8004c78:	4638      	mov	r0, r7
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	f001 fb24 	bl	80062c8 <__lshift>
 8004c80:	4606      	mov	r6, r0
 8004c82:	9814      	ldr	r0, [sp, #80]	; 0x50
 8004c84:	2800      	cmp	r0, #0
 8004c86:	f040 834f 	bne.w	8005328 <_dtoa_r+0xba8>
 8004c8a:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004c8c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004c8e:	2900      	cmp	r1, #0
 8004c90:	bfcc      	ite	gt
 8004c92:	2300      	movgt	r3, #0
 8004c94:	2301      	movle	r3, #1
 8004c96:	2a02      	cmp	r2, #2
 8004c98:	bfd8      	it	le
 8004c9a:	2300      	movle	r3, #0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	f000 822a 	beq.w	80050f6 <_dtoa_r+0x976>
 8004ca2:	2900      	cmp	r1, #0
 8004ca4:	f040 808c 	bne.w	8004dc0 <_dtoa_r+0x640>
 8004ca8:	4631      	mov	r1, r6
 8004caa:	2205      	movs	r2, #5
 8004cac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004cae:	4638      	mov	r0, r7
 8004cb0:	f001 f93e 	bl	8005f30 <__multadd>
 8004cb4:	4606      	mov	r6, r0
 8004cb6:	4631      	mov	r1, r6
 8004cb8:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004cba:	f001 fb65 	bl	8006388 <__mcmp>
 8004cbe:	2800      	cmp	r0, #0
 8004cc0:	dd7e      	ble.n	8004dc0 <_dtoa_r+0x640>
 8004cc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cc4:	9c07      	ldr	r4, [sp, #28]
 8004cc6:	2231      	movs	r2, #49	; 0x31
 8004cc8:	3401      	adds	r4, #1
 8004cca:	f803 2b01 	strb.w	r2, [r3], #1
 8004cce:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004cd0:	9407      	str	r4, [sp, #28]
 8004cd2:	9309      	str	r3, [sp, #36]	; 0x24
 8004cd4:	2400      	movs	r4, #0
 8004cd6:	4638      	mov	r0, r7
 8004cd8:	4631      	mov	r1, r6
 8004cda:	f001 f91f 	bl	8005f1c <_Bfree>
 8004cde:	f1ba 0f00 	cmp.w	sl, #0
 8004ce2:	d008      	beq.n	8004cf6 <_dtoa_r+0x576>
 8004ce4:	4554      	cmp	r4, sl
 8004ce6:	bf18      	it	ne
 8004ce8:	2c00      	cmpne	r4, #0
 8004cea:	f040 8276 	bne.w	80051da <_dtoa_r+0xa5a>
 8004cee:	4638      	mov	r0, r7
 8004cf0:	4651      	mov	r1, sl
 8004cf2:	f001 f913 	bl	8005f1c <_Bfree>
 8004cf6:	4638      	mov	r0, r7
 8004cf8:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004cfa:	f001 f90f 	bl	8005f1c <_Bfree>
 8004cfe:	9c07      	ldr	r4, [sp, #28]
 8004d00:	2200      	movs	r2, #0
 8004d02:	1c63      	adds	r3, r4, #1
 8004d04:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8004d06:	7022      	strb	r2, [r4, #0]
 8004d08:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 8004d0a:	6023      	str	r3, [r4, #0]
 8004d0c:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8004d0e:	2c00      	cmp	r4, #0
 8004d10:	f43f ad6e 	beq.w	80047f0 <_dtoa_r+0x70>
 8004d14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004d16:	6020      	str	r0, [r4, #0]
 8004d18:	e56a      	b.n	80047f0 <_dtoa_r+0x70>
 8004d1a:	9c07      	ldr	r4, [sp, #28]
 8004d1c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8004d1e:	1b2d      	subs	r5, r5, r4
 8004d20:	950f      	str	r5, [sp, #60]	; 0x3c
 8004d22:	4265      	negs	r5, r4
 8004d24:	2400      	movs	r4, #0
 8004d26:	9510      	str	r5, [sp, #64]	; 0x40
 8004d28:	9413      	str	r4, [sp, #76]	; 0x4c
 8004d2a:	e5f7      	b.n	800491c <_dtoa_r+0x19c>
 8004d2c:	4264      	negs	r4, r4
 8004d2e:	940f      	str	r4, [sp, #60]	; 0x3c
 8004d30:	2400      	movs	r4, #0
 8004d32:	940b      	str	r4, [sp, #44]	; 0x2c
 8004d34:	e5e8      	b.n	8004908 <_dtoa_r+0x188>
 8004d36:	f64f 30ee 	movw	r0, #64494	; 0xfbee
 8004d3a:	f6cf 70ff 	movt	r0, #65535	; 0xffff
 8004d3e:	9a02      	ldr	r2, [sp, #8]
 8004d40:	1b00      	subs	r0, r0, r4
 8004d42:	fa12 f000 	lsls.w	r0, r2, r0
 8004d46:	e57f      	b.n	8004848 <_dtoa_r+0xc8>
 8004d48:	2500      	movs	r5, #0
 8004d4a:	9514      	str	r5, [sp, #80]	; 0x50
 8004d4c:	e5d5      	b.n	80048fa <_dtoa_r+0x17a>
 8004d4e:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8004d50:	2c01      	cmp	r4, #1
 8004d52:	f340 8390 	ble.w	8005476 <_dtoa_r+0xcf6>
 8004d56:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8004d58:	1e62      	subs	r2, r4, #1
 8004d5a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8004d5c:	4294      	cmp	r4, r2
 8004d5e:	bfb7      	itett	lt
 8004d60:	9c10      	ldrlt	r4, [sp, #64]	; 0x40
 8004d62:	ebc2 0504 	rsbge	r5, r2, r4
 8004d66:	ebc4 0302 	rsblt	r3, r4, r2
 8004d6a:	9c13      	ldrlt	r4, [sp, #76]	; 0x4c
 8004d6c:	bfbe      	ittt	lt
 8004d6e:	9210      	strlt	r2, [sp, #64]	; 0x40
 8004d70:	18e4      	addlt	r4, r4, r3
 8004d72:	9413      	strlt	r4, [sp, #76]	; 0x4c
 8004d74:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8004d76:	2c00      	cmp	r4, #0
 8004d78:	f2c0 8390 	blt.w	800549c <_dtoa_r+0xd1c>
 8004d7c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8004d7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d80:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004d82:	4638      	mov	r0, r7
 8004d84:	18d2      	adds	r2, r2, r3
 8004d86:	920f      	str	r2, [sp, #60]	; 0x3c
 8004d88:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004d8a:	2101      	movs	r1, #1
 8004d8c:	18d2      	adds	r2, r2, r3
 8004d8e:	920b      	str	r2, [sp, #44]	; 0x2c
 8004d90:	f001 f9aa 	bl	80060e8 <__i2b>
 8004d94:	4682      	mov	sl, r0
 8004d96:	e70b      	b.n	8004bb0 <_dtoa_r+0x430>
 8004d98:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8004d9a:	2d00      	cmp	r5, #0
 8004d9c:	f040 8368 	bne.w	8005470 <_dtoa_r+0xcf0>
 8004da0:	2300      	movs	r3, #0
 8004da2:	2200      	movs	r2, #0
 8004da4:	f2c4 0314 	movt	r3, #16404	; 0x4014
 8004da8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004dac:	f002 ffb0 	bl	8007d10 <__aeabi_dmul>
 8004db0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004db4:	f003 fa32 	bl	800821c <__aeabi_dcmpge>
 8004db8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8004dba:	46b2      	mov	sl, r6
 8004dbc:	2800      	cmp	r0, #0
 8004dbe:	d080      	beq.n	8004cc2 <_dtoa_r+0x542>
 8004dc0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8004dc2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004dc4:	43e4      	mvns	r4, r4
 8004dc6:	9407      	str	r4, [sp, #28]
 8004dc8:	2400      	movs	r4, #0
 8004dca:	e784      	b.n	8004cd6 <_dtoa_r+0x556>
 8004dcc:	2501      	movs	r5, #1
 8004dce:	9512      	str	r5, [sp, #72]	; 0x48
 8004dd0:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 8004dd2:	2d00      	cmp	r5, #0
 8004dd4:	f340 82d4 	ble.w	8005380 <_dtoa_r+0xc00>
 8004dd8:	46a9      	mov	r9, r5
 8004dda:	2d0e      	cmp	r5, #14
 8004ddc:	bf8c      	ite	hi
 8004dde:	2400      	movhi	r4, #0
 8004de0:	f004 0401 	andls.w	r4, r4, #1
 8004de4:	9515      	str	r5, [sp, #84]	; 0x54
 8004de6:	950e      	str	r5, [sp, #56]	; 0x38
 8004de8:	2100      	movs	r1, #0
 8004dea:	f1b9 0f17 	cmp.w	r9, #23
 8004dee:	6479      	str	r1, [r7, #68]	; 0x44
 8004df0:	d909      	bls.n	8004e06 <_dtoa_r+0x686>
 8004df2:	2201      	movs	r2, #1
 8004df4:	2304      	movs	r3, #4
 8004df6:	005b      	lsls	r3, r3, #1
 8004df8:	f103 0014 	add.w	r0, r3, #20
 8004dfc:	4611      	mov	r1, r2
 8004dfe:	3201      	adds	r2, #1
 8004e00:	4548      	cmp	r0, r9
 8004e02:	d9f8      	bls.n	8004df6 <_dtoa_r+0x676>
 8004e04:	6479      	str	r1, [r7, #68]	; 0x44
 8004e06:	4638      	mov	r0, r7
 8004e08:	f001 f862 	bl	8005ed0 <_Balloc>
 8004e0c:	9009      	str	r0, [sp, #36]	; 0x24
 8004e0e:	6438      	str	r0, [r7, #64]	; 0x40
 8004e10:	2c00      	cmp	r4, #0
 8004e12:	f43f adf6 	beq.w	8004a02 <_dtoa_r+0x282>
 8004e16:	9c07      	ldr	r4, [sp, #28]
 8004e18:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 8004e1c:	2c00      	cmp	r4, #0
 8004e1e:	4652      	mov	r2, sl
 8004e20:	465b      	mov	r3, fp
 8004e22:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8004e26:	f340 81f8 	ble.w	800521a <_dtoa_r+0xa9a>
 8004e2a:	4b97      	ldr	r3, [pc, #604]	; (8005088 <_dtoa_r+0x908>)
 8004e2c:	f004 020f 	and.w	r2, r4, #15
 8004e30:	1124      	asrs	r4, r4, #4
 8004e32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004e36:	2602      	movs	r6, #2
 8004e38:	06e2      	lsls	r2, r4, #27
 8004e3a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004e3e:	d50b      	bpl.n	8004e58 <_dtoa_r+0x6d8>
 8004e40:	4b92      	ldr	r3, [pc, #584]	; (800508c <_dtoa_r+0x90c>)
 8004e42:	4650      	mov	r0, sl
 8004e44:	4659      	mov	r1, fp
 8004e46:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004e4a:	f003 f88b 	bl	8007f64 <__aeabi_ddiv>
 8004e4e:	f004 040f 	and.w	r4, r4, #15
 8004e52:	4682      	mov	sl, r0
 8004e54:	468b      	mov	fp, r1
 8004e56:	2603      	movs	r6, #3
 8004e58:	b174      	cbz	r4, 8004e78 <_dtoa_r+0x6f8>
 8004e5a:	4d8c      	ldr	r5, [pc, #560]	; (800508c <_dtoa_r+0x90c>)
 8004e5c:	4640      	mov	r0, r8
 8004e5e:	4649      	mov	r1, r9
 8004e60:	07e3      	lsls	r3, r4, #31
 8004e62:	d504      	bpl.n	8004e6e <_dtoa_r+0x6ee>
 8004e64:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004e68:	f002 ff52 	bl	8007d10 <__aeabi_dmul>
 8004e6c:	3601      	adds	r6, #1
 8004e6e:	3508      	adds	r5, #8
 8004e70:	1064      	asrs	r4, r4, #1
 8004e72:	d1f5      	bne.n	8004e60 <_dtoa_r+0x6e0>
 8004e74:	4680      	mov	r8, r0
 8004e76:	4689      	mov	r9, r1
 8004e78:	4650      	mov	r0, sl
 8004e7a:	4659      	mov	r1, fp
 8004e7c:	4642      	mov	r2, r8
 8004e7e:	464b      	mov	r3, r9
 8004e80:	f003 f870 	bl	8007f64 <__aeabi_ddiv>
 8004e84:	4682      	mov	sl, r0
 8004e86:	468b      	mov	fp, r1
 8004e88:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8004e8a:	2c00      	cmp	r4, #0
 8004e8c:	f000 8100 	beq.w	8005090 <_dtoa_r+0x910>
 8004e90:	2300      	movs	r3, #0
 8004e92:	4650      	mov	r0, sl
 8004e94:	4659      	mov	r1, fp
 8004e96:	2200      	movs	r2, #0
 8004e98:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 8004e9c:	2401      	movs	r4, #1
 8004e9e:	f003 f9a9 	bl	80081f4 <__aeabi_dcmplt>
 8004ea2:	b900      	cbnz	r0, 8004ea6 <_dtoa_r+0x726>
 8004ea4:	2400      	movs	r4, #0
 8004ea6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8004ea8:	2d00      	cmp	r5, #0
 8004eaa:	bfd4      	ite	le
 8004eac:	2400      	movle	r4, #0
 8004eae:	f004 0401 	andgt.w	r4, r4, #1
 8004eb2:	2c00      	cmp	r4, #0
 8004eb4:	f000 80ec 	beq.w	8005090 <_dtoa_r+0x910>
 8004eb8:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8004eba:	2c00      	cmp	r4, #0
 8004ebc:	f340 819b 	ble.w	80051f6 <_dtoa_r+0xa76>
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8004ec8:	4650      	mov	r0, sl
 8004eca:	4659      	mov	r1, fp
 8004ecc:	f002 ff20 	bl	8007d10 <__aeabi_dmul>
 8004ed0:	4682      	mov	sl, r0
 8004ed2:	1c70      	adds	r0, r6, #1
 8004ed4:	468b      	mov	fp, r1
 8004ed6:	f002 feb5 	bl	8007c44 <__aeabi_i2d>
 8004eda:	4602      	mov	r2, r0
 8004edc:	460b      	mov	r3, r1
 8004ede:	4650      	mov	r0, sl
 8004ee0:	4659      	mov	r1, fp
 8004ee2:	f002 ff15 	bl	8007d10 <__aeabi_dmul>
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f2c4 031c 	movt	r3, #16412	; 0x401c
 8004eee:	f002 fd5d 	bl	80079ac <__adddf3>
 8004ef2:	9d07      	ldr	r5, [sp, #28]
 8004ef4:	4680      	mov	r8, r0
 8004ef6:	3d01      	subs	r5, #1
 8004ef8:	9517      	str	r5, [sp, #92]	; 0x5c
 8004efa:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8004efc:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 8004f00:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8004f02:	2c00      	cmp	r4, #0
 8004f04:	f000 81b0 	beq.w	8005268 <_dtoa_r+0xae8>
 8004f08:	4b5f      	ldr	r3, [pc, #380]	; (8005088 <_dtoa_r+0x908>)
 8004f0a:	2100      	movs	r1, #0
 8004f0c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8004f10:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004f14:	2000      	movs	r0, #0
 8004f16:	f6c3 71e0 	movt	r1, #16352	; 0x3fe0
 8004f1a:	f003 f823 	bl	8007f64 <__aeabi_ddiv>
 8004f1e:	4642      	mov	r2, r8
 8004f20:	464b      	mov	r3, r9
 8004f22:	f002 fd41 	bl	80079a8 <__aeabi_dsub>
 8004f26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f2a:	4659      	mov	r1, fp
 8004f2c:	4650      	mov	r0, sl
 8004f2e:	f003 f989 	bl	8008244 <__aeabi_d2iz>
 8004f32:	4606      	mov	r6, r0
 8004f34:	f002 fe86 	bl	8007c44 <__aeabi_i2d>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	460b      	mov	r3, r1
 8004f3c:	4650      	mov	r0, sl
 8004f3e:	4659      	mov	r1, fp
 8004f40:	f002 fd32 	bl	80079a8 <__aeabi_dsub>
 8004f44:	3630      	adds	r6, #48	; 0x30
 8004f46:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8004f48:	4682      	mov	sl, r0
 8004f4a:	468b      	mov	fp, r1
 8004f4c:	b2f6      	uxtb	r6, r6
 8004f4e:	f804 6b01 	strb.w	r6, [r4], #1
 8004f52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f56:	4652      	mov	r2, sl
 8004f58:	465b      	mov	r3, fp
 8004f5a:	9411      	str	r4, [sp, #68]	; 0x44
 8004f5c:	46a0      	mov	r8, r4
 8004f5e:	f003 f967 	bl	8008230 <__aeabi_dcmpgt>
 8004f62:	2800      	cmp	r0, #0
 8004f64:	f040 831f 	bne.w	80055a6 <_dtoa_r+0xe26>
 8004f68:	2100      	movs	r1, #0
 8004f6a:	4652      	mov	r2, sl
 8004f6c:	465b      	mov	r3, fp
 8004f6e:	2000      	movs	r0, #0
 8004f70:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 8004f74:	f002 fd18 	bl	80079a8 <__aeabi_dsub>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	460b      	mov	r3, r1
 8004f7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f80:	f003 f956 	bl	8008230 <__aeabi_dcmpgt>
 8004f84:	2800      	cmp	r0, #0
 8004f86:	f040 827e 	bne.w	8005486 <_dtoa_r+0xd06>
 8004f8a:	2d01      	cmp	r5, #1
 8004f8c:	f340 8133 	ble.w	80051f6 <_dtoa_r+0xa76>
 8004f90:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004f92:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8004f94:	1945      	adds	r5, r0, r5
 8004f96:	e00f      	b.n	8004fb8 <_dtoa_r+0x838>
 8004f98:	2100      	movs	r1, #0
 8004f9a:	2000      	movs	r0, #0
 8004f9c:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 8004fa0:	f002 fd02 	bl	80079a8 <__aeabi_dsub>
 8004fa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004fa8:	f003 f924 	bl	80081f4 <__aeabi_dcmplt>
 8004fac:	2800      	cmp	r0, #0
 8004fae:	f040 826a 	bne.w	8005486 <_dtoa_r+0xd06>
 8004fb2:	42ac      	cmp	r4, r5
 8004fb4:	f000 811f 	beq.w	80051f6 <_dtoa_r+0xa76>
 8004fb8:	2300      	movs	r3, #0
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8004fc0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004fc4:	f002 fea4 	bl	8007d10 <__aeabi_dmul>
 8004fc8:	2300      	movs	r3, #0
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8004fd0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004fd4:	4650      	mov	r0, sl
 8004fd6:	4659      	mov	r1, fp
 8004fd8:	f002 fe9a 	bl	8007d10 <__aeabi_dmul>
 8004fdc:	4680      	mov	r8, r0
 8004fde:	4689      	mov	r9, r1
 8004fe0:	f003 f930 	bl	8008244 <__aeabi_d2iz>
 8004fe4:	4606      	mov	r6, r0
 8004fe6:	f002 fe2d 	bl	8007c44 <__aeabi_i2d>
 8004fea:	4602      	mov	r2, r0
 8004fec:	460b      	mov	r3, r1
 8004fee:	4640      	mov	r0, r8
 8004ff0:	4649      	mov	r1, r9
 8004ff2:	f002 fcd9 	bl	80079a8 <__aeabi_dsub>
 8004ff6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004ffa:	3630      	adds	r6, #48	; 0x30
 8004ffc:	b2f6      	uxtb	r6, r6
 8004ffe:	f804 6b01 	strb.w	r6, [r4], #1
 8005002:	4682      	mov	sl, r0
 8005004:	468b      	mov	fp, r1
 8005006:	f003 f8f5 	bl	80081f4 <__aeabi_dcmplt>
 800500a:	46a0      	mov	r8, r4
 800500c:	4652      	mov	r2, sl
 800500e:	465b      	mov	r3, fp
 8005010:	2800      	cmp	r0, #0
 8005012:	d0c1      	beq.n	8004f98 <_dtoa_r+0x818>
 8005014:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8005016:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005018:	9007      	str	r0, [sp, #28]
 800501a:	9409      	str	r4, [sp, #36]	; 0x24
 800501c:	e66b      	b.n	8004cf6 <_dtoa_r+0x576>
 800501e:	2500      	movs	r5, #0
 8005020:	9512      	str	r5, [sp, #72]	; 0x48
 8005022:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 8005024:	9807      	ldr	r0, [sp, #28]
 8005026:	182d      	adds	r5, r5, r0
 8005028:	f105 0901 	add.w	r9, r5, #1
 800502c:	f1b9 0f00 	cmp.w	r9, #0
 8005030:	9515      	str	r5, [sp, #84]	; 0x54
 8005032:	f340 819a 	ble.w	800536a <_dtoa_r+0xbea>
 8005036:	f1b9 0f0e 	cmp.w	r9, #14
 800503a:	bf8c      	ite	hi
 800503c:	2400      	movhi	r4, #0
 800503e:	f004 0401 	andls.w	r4, r4, #1
 8005042:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005046:	e6cf      	b.n	8004de8 <_dtoa_r+0x668>
 8005048:	2500      	movs	r5, #0
 800504a:	9512      	str	r5, [sp, #72]	; 0x48
 800504c:	e6c0      	b.n	8004dd0 <_dtoa_r+0x650>
 800504e:	2501      	movs	r5, #1
 8005050:	9512      	str	r5, [sp, #72]	; 0x48
 8005052:	e7e6      	b.n	8005022 <_dtoa_r+0x8a2>
 8005054:	9802      	ldr	r0, [sp, #8]
 8005056:	2800      	cmp	r0, #0
 8005058:	f47f ade9 	bne.w	8004c2e <_dtoa_r+0x4ae>
 800505c:	9a03      	ldr	r2, [sp, #12]
 800505e:	9d02      	ldr	r5, [sp, #8]
 8005060:	f3c2 0313 	ubfx	r3, r2, #0, #20
 8005064:	2b00      	cmp	r3, #0
 8005066:	f47f ade3 	bne.w	8004c30 <_dtoa_r+0x4b0>
 800506a:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 800506e:	4013      	ands	r3, r2
 8005070:	461d      	mov	r5, r3
 8005072:	2b00      	cmp	r3, #0
 8005074:	f43f addc 	beq.w	8004c30 <_dtoa_r+0x4b0>
 8005078:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800507a:	3501      	adds	r5, #1
 800507c:	950f      	str	r5, [sp, #60]	; 0x3c
 800507e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8005080:	3501      	adds	r5, #1
 8005082:	950b      	str	r5, [sp, #44]	; 0x2c
 8005084:	2501      	movs	r5, #1
 8005086:	e5d3      	b.n	8004c30 <_dtoa_r+0x4b0>
 8005088:	08008670 	.word	0x08008670
 800508c:	08008760 	.word	0x08008760
 8005090:	4630      	mov	r0, r6
 8005092:	f002 fdd7 	bl	8007c44 <__aeabi_i2d>
 8005096:	4652      	mov	r2, sl
 8005098:	465b      	mov	r3, fp
 800509a:	f002 fe39 	bl	8007d10 <__aeabi_dmul>
 800509e:	2300      	movs	r3, #0
 80050a0:	2200      	movs	r2, #0
 80050a2:	f2c4 031c 	movt	r3, #16412	; 0x401c
 80050a6:	f002 fc81 	bl	80079ac <__adddf3>
 80050aa:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80050ac:	f1a1 7450 	sub.w	r4, r1, #54525952	; 0x3400000
 80050b0:	4680      	mov	r8, r0
 80050b2:	46a1      	mov	r9, r4
 80050b4:	2d00      	cmp	r5, #0
 80050b6:	f040 80ac 	bne.w	8005212 <_dtoa_r+0xa92>
 80050ba:	2300      	movs	r3, #0
 80050bc:	2200      	movs	r2, #0
 80050be:	f2c4 0314 	movt	r3, #16404	; 0x4014
 80050c2:	4650      	mov	r0, sl
 80050c4:	4659      	mov	r1, fp
 80050c6:	f002 fc6f 	bl	80079a8 <__aeabi_dsub>
 80050ca:	4642      	mov	r2, r8
 80050cc:	4623      	mov	r3, r4
 80050ce:	4682      	mov	sl, r0
 80050d0:	468b      	mov	fp, r1
 80050d2:	f003 f8ad 	bl	8008230 <__aeabi_dcmpgt>
 80050d6:	2800      	cmp	r0, #0
 80050d8:	f040 80c3 	bne.w	8005262 <_dtoa_r+0xae2>
 80050dc:	4642      	mov	r2, r8
 80050de:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
 80050e2:	4650      	mov	r0, sl
 80050e4:	4659      	mov	r1, fp
 80050e6:	f003 f885 	bl	80081f4 <__aeabi_dcmplt>
 80050ea:	2800      	cmp	r0, #0
 80050ec:	f000 8083 	beq.w	80051f6 <_dtoa_r+0xa76>
 80050f0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80050f2:	46b2      	mov	sl, r6
 80050f4:	e664      	b.n	8004dc0 <_dtoa_r+0x640>
 80050f6:	9812      	ldr	r0, [sp, #72]	; 0x48
 80050f8:	2800      	cmp	r0, #0
 80050fa:	f000 8146 	beq.w	800538a <_dtoa_r+0xc0a>
 80050fe:	2c00      	cmp	r4, #0
 8005100:	dd05      	ble.n	800510e <_dtoa_r+0x98e>
 8005102:	4651      	mov	r1, sl
 8005104:	4638      	mov	r0, r7
 8005106:	4622      	mov	r2, r4
 8005108:	f001 f8de 	bl	80062c8 <__lshift>
 800510c:	4682      	mov	sl, r0
 800510e:	46d0      	mov	r8, sl
 8005110:	2d00      	cmp	r5, #0
 8005112:	f040 81ff 	bne.w	8005514 <_dtoa_r+0xd94>
 8005116:	9902      	ldr	r1, [sp, #8]
 8005118:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800511a:	f001 0101 	and.w	r1, r1, #1
 800511e:	4654      	mov	r4, sl
 8005120:	910b      	str	r1, [sp, #44]	; 0x2c
 8005122:	4631      	mov	r1, r6
 8005124:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005126:	f7ff fa9b 	bl	8004660 <quorem>
 800512a:	4621      	mov	r1, r4
 800512c:	9002      	str	r0, [sp, #8]
 800512e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005130:	f001 f92a 	bl	8006388 <__mcmp>
 8005134:	4642      	mov	r2, r8
 8005136:	4681      	mov	r9, r0
 8005138:	4631      	mov	r1, r6
 800513a:	4638      	mov	r0, r7
 800513c:	f001 f944 	bl	80063c8 <__mdiff>
 8005140:	9a02      	ldr	r2, [sp, #8]
 8005142:	68c3      	ldr	r3, [r0, #12]
 8005144:	3230      	adds	r2, #48	; 0x30
 8005146:	4682      	mov	sl, r0
 8005148:	9208      	str	r2, [sp, #32]
 800514a:	f04f 0b01 	mov.w	fp, #1
 800514e:	2b00      	cmp	r3, #0
 8005150:	d03d      	beq.n	80051ce <_dtoa_r+0xa4e>
 8005152:	4638      	mov	r0, r7
 8005154:	4651      	mov	r1, sl
 8005156:	f000 fee1 	bl	8005f1c <_Bfree>
 800515a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800515c:	ea5b 0303 	orrs.w	r3, fp, r3
 8005160:	d103      	bne.n	800516a <_dtoa_r+0x9ea>
 8005162:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005164:	2800      	cmp	r0, #0
 8005166:	f000 820b 	beq.w	8005580 <_dtoa_r+0xe00>
 800516a:	f1b9 0f00 	cmp.w	r9, #0
 800516e:	f2c0 819d 	blt.w	80054ac <_dtoa_r+0xd2c>
 8005172:	9826      	ldr	r0, [sp, #152]	; 0x98
 8005174:	ea59 0000 	orrs.w	r0, r9, r0
 8005178:	d103      	bne.n	8005182 <_dtoa_r+0xa02>
 800517a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800517c:	2900      	cmp	r1, #0
 800517e:	f000 8195 	beq.w	80054ac <_dtoa_r+0xd2c>
 8005182:	f1bb 0f00 	cmp.w	fp, #0
 8005186:	f300 81e6 	bgt.w	8005556 <_dtoa_r+0xdd6>
 800518a:	9a08      	ldr	r2, [sp, #32]
 800518c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800518e:	f805 2b01 	strb.w	r2, [r5], #1
 8005192:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005194:	1a2b      	subs	r3, r5, r0
 8005196:	428b      	cmp	r3, r1
 8005198:	46ab      	mov	fp, r5
 800519a:	f000 81d8 	beq.w	800554e <_dtoa_r+0xdce>
 800519e:	220a      	movs	r2, #10
 80051a0:	2300      	movs	r3, #0
 80051a2:	4638      	mov	r0, r7
 80051a4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80051a6:	f000 fec3 	bl	8005f30 <__multadd>
 80051aa:	4544      	cmp	r4, r8
 80051ac:	900a      	str	r0, [sp, #40]	; 0x28
 80051ae:	d027      	beq.n	8005200 <_dtoa_r+0xa80>
 80051b0:	4621      	mov	r1, r4
 80051b2:	220a      	movs	r2, #10
 80051b4:	2300      	movs	r3, #0
 80051b6:	4638      	mov	r0, r7
 80051b8:	f000 feba 	bl	8005f30 <__multadd>
 80051bc:	4641      	mov	r1, r8
 80051be:	4604      	mov	r4, r0
 80051c0:	220a      	movs	r2, #10
 80051c2:	4638      	mov	r0, r7
 80051c4:	2300      	movs	r3, #0
 80051c6:	f000 feb3 	bl	8005f30 <__multadd>
 80051ca:	4680      	mov	r8, r0
 80051cc:	e7a9      	b.n	8005122 <_dtoa_r+0x9a2>
 80051ce:	980a      	ldr	r0, [sp, #40]	; 0x28
 80051d0:	4651      	mov	r1, sl
 80051d2:	f001 f8d9 	bl	8006388 <__mcmp>
 80051d6:	4683      	mov	fp, r0
 80051d8:	e7bb      	b.n	8005152 <_dtoa_r+0x9d2>
 80051da:	4638      	mov	r0, r7
 80051dc:	4621      	mov	r1, r4
 80051de:	f000 fe9d 	bl	8005f1c <_Bfree>
 80051e2:	e584      	b.n	8004cee <_dtoa_r+0x56e>
 80051e4:	231c      	movs	r3, #28
 80051e6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80051e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80051ea:	18c0      	adds	r0, r0, r3
 80051ec:	18c9      	adds	r1, r1, r3
 80051ee:	900f      	str	r0, [sp, #60]	; 0x3c
 80051f0:	18e4      	adds	r4, r4, r3
 80051f2:	910b      	str	r1, [sp, #44]	; 0x2c
 80051f4:	e534      	b.n	8004c60 <_dtoa_r+0x4e0>
 80051f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80051fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80051fe:	e400      	b.n	8004a02 <_dtoa_r+0x282>
 8005200:	4621      	mov	r1, r4
 8005202:	4638      	mov	r0, r7
 8005204:	220a      	movs	r2, #10
 8005206:	2300      	movs	r3, #0
 8005208:	f000 fe92 	bl	8005f30 <__multadd>
 800520c:	4604      	mov	r4, r0
 800520e:	4680      	mov	r8, r0
 8005210:	e787      	b.n	8005122 <_dtoa_r+0x9a2>
 8005212:	9c07      	ldr	r4, [sp, #28]
 8005214:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8005216:	9417      	str	r4, [sp, #92]	; 0x5c
 8005218:	e672      	b.n	8004f00 <_dtoa_r+0x780>
 800521a:	9d07      	ldr	r5, [sp, #28]
 800521c:	426c      	negs	r4, r5
 800521e:	2c00      	cmp	r4, #0
 8005220:	f000 80fa 	beq.w	8005418 <_dtoa_r+0xc98>
 8005224:	4b9f      	ldr	r3, [pc, #636]	; (80054a4 <_dtoa_r+0xd24>)
 8005226:	f004 020f 	and.w	r2, r4, #15
 800522a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800522e:	4650      	mov	r0, sl
 8005230:	4659      	mov	r1, fp
 8005232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005236:	f002 fd6b 	bl	8007d10 <__aeabi_dmul>
 800523a:	1124      	asrs	r4, r4, #4
 800523c:	4682      	mov	sl, r0
 800523e:	468b      	mov	fp, r1
 8005240:	f000 80ea 	beq.w	8005418 <_dtoa_r+0xc98>
 8005244:	4d98      	ldr	r5, [pc, #608]	; (80054a8 <_dtoa_r+0xd28>)
 8005246:	2602      	movs	r6, #2
 8005248:	07e2      	lsls	r2, r4, #31
 800524a:	d504      	bpl.n	8005256 <_dtoa_r+0xad6>
 800524c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005250:	f002 fd5e 	bl	8007d10 <__aeabi_dmul>
 8005254:	3601      	adds	r6, #1
 8005256:	3508      	adds	r5, #8
 8005258:	1064      	asrs	r4, r4, #1
 800525a:	d1f5      	bne.n	8005248 <_dtoa_r+0xac8>
 800525c:	4682      	mov	sl, r0
 800525e:	468b      	mov	fp, r1
 8005260:	e612      	b.n	8004e88 <_dtoa_r+0x708>
 8005262:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8005264:	46b2      	mov	sl, r6
 8005266:	e52c      	b.n	8004cc2 <_dtoa_r+0x542>
 8005268:	498e      	ldr	r1, [pc, #568]	; (80054a4 <_dtoa_r+0xd24>)
 800526a:	1e6c      	subs	r4, r5, #1
 800526c:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8005270:	4642      	mov	r2, r8
 8005272:	464b      	mov	r3, r9
 8005274:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005278:	9402      	str	r4, [sp, #8]
 800527a:	f002 fd49 	bl	8007d10 <__aeabi_dmul>
 800527e:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
 8005282:	4659      	mov	r1, fp
 8005284:	4650      	mov	r0, sl
 8005286:	f002 ffdd 	bl	8008244 <__aeabi_d2iz>
 800528a:	4604      	mov	r4, r0
 800528c:	f002 fcda 	bl	8007c44 <__aeabi_i2d>
 8005290:	460b      	mov	r3, r1
 8005292:	4602      	mov	r2, r0
 8005294:	4659      	mov	r1, fp
 8005296:	4650      	mov	r0, sl
 8005298:	f002 fb86 	bl	80079a8 <__aeabi_dsub>
 800529c:	4682      	mov	sl, r0
 800529e:	9809      	ldr	r0, [sp, #36]	; 0x24
 80052a0:	f104 0330 	add.w	r3, r4, #48	; 0x30
 80052a4:	f800 3b01 	strb.w	r3, [r0], #1
 80052a8:	2d01      	cmp	r5, #1
 80052aa:	468b      	mov	fp, r1
 80052ac:	9011      	str	r0, [sp, #68]	; 0x44
 80052ae:	4680      	mov	r8, r0
 80052b0:	d021      	beq.n	80052f6 <_dtoa_r+0xb76>
 80052b2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80052b4:	4650      	mov	r0, sl
 80052b6:	1e66      	subs	r6, r4, #1
 80052b8:	1976      	adds	r6, r6, r5
 80052ba:	2300      	movs	r3, #0
 80052bc:	2200      	movs	r2, #0
 80052be:	f2c4 0324 	movt	r3, #16420	; 0x4024
 80052c2:	f002 fd25 	bl	8007d10 <__aeabi_dmul>
 80052c6:	4689      	mov	r9, r1
 80052c8:	4680      	mov	r8, r0
 80052ca:	f002 ffbb 	bl	8008244 <__aeabi_d2iz>
 80052ce:	4605      	mov	r5, r0
 80052d0:	f002 fcb8 	bl	8007c44 <__aeabi_i2d>
 80052d4:	3530      	adds	r5, #48	; 0x30
 80052d6:	4602      	mov	r2, r0
 80052d8:	460b      	mov	r3, r1
 80052da:	4640      	mov	r0, r8
 80052dc:	4649      	mov	r1, r9
 80052de:	f002 fb63 	bl	80079a8 <__aeabi_dsub>
 80052e2:	f804 5f01 	strb.w	r5, [r4, #1]!
 80052e6:	42b4      	cmp	r4, r6
 80052e8:	d1e7      	bne.n	80052ba <_dtoa_r+0xb3a>
 80052ea:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80052ec:	9c02      	ldr	r4, [sp, #8]
 80052ee:	4682      	mov	sl, r0
 80052f0:	468b      	mov	fp, r1
 80052f2:	eb05 0804 	add.w	r8, r5, r4
 80052f6:	2300      	movs	r3, #0
 80052f8:	2200      	movs	r2, #0
 80052fa:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
 80052fe:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 8005302:	f002 fb53 	bl	80079ac <__adddf3>
 8005306:	4602      	mov	r2, r0
 8005308:	460b      	mov	r3, r1
 800530a:	4650      	mov	r0, sl
 800530c:	4659      	mov	r1, fp
 800530e:	f002 ff8f 	bl	8008230 <__aeabi_dcmpgt>
 8005312:	2800      	cmp	r0, #0
 8005314:	f000 808a 	beq.w	800542c <_dtoa_r+0xcac>
 8005318:	f818 6c01 	ldrb.w	r6, [r8, #-1]
 800531c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800531e:	e41f      	b.n	8004b60 <_dtoa_r+0x3e0>
 8005320:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005322:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8005326:	e4e6      	b.n	8004cf6 <_dtoa_r+0x576>
 8005328:	980a      	ldr	r0, [sp, #40]	; 0x28
 800532a:	4631      	mov	r1, r6
 800532c:	f001 f82c 	bl	8006388 <__mcmp>
 8005330:	2800      	cmp	r0, #0
 8005332:	f6bf acaa 	bge.w	8004c8a <_dtoa_r+0x50a>
 8005336:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005338:	220a      	movs	r2, #10
 800533a:	4638      	mov	r0, r7
 800533c:	2300      	movs	r3, #0
 800533e:	f000 fdf7 	bl	8005f30 <__multadd>
 8005342:	9907      	ldr	r1, [sp, #28]
 8005344:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005346:	3901      	subs	r1, #1
 8005348:	900a      	str	r0, [sp, #40]	; 0x28
 800534a:	9107      	str	r1, [sp, #28]
 800534c:	2a00      	cmp	r2, #0
 800534e:	f040 8131 	bne.w	80055b4 <_dtoa_r+0xe34>
 8005352:	9815      	ldr	r0, [sp, #84]	; 0x54
 8005354:	900e      	str	r0, [sp, #56]	; 0x38
 8005356:	e498      	b.n	8004c8a <_dtoa_r+0x50a>
 8005358:	6933      	ldr	r3, [r6, #16]
 800535a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800535e:	6918      	ldr	r0, [r3, #16]
 8005360:	f000 fe76 	bl	8006050 <__hi0bits>
 8005364:	f1c0 0320 	rsb	r3, r0, #32
 8005368:	e467      	b.n	8004c3a <_dtoa_r+0x4ba>
 800536a:	f1b9 0f0e 	cmp.w	r9, #14
 800536e:	bf8c      	ite	hi
 8005370:	2300      	movhi	r3, #0
 8005372:	2301      	movls	r3, #1
 8005374:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005378:	2100      	movs	r1, #0
 800537a:	6479      	str	r1, [r7, #68]	; 0x44
 800537c:	401c      	ands	r4, r3
 800537e:	e542      	b.n	8004e06 <_dtoa_r+0x686>
 8005380:	2301      	movs	r3, #1
 8005382:	9315      	str	r3, [sp, #84]	; 0x54
 8005384:	930e      	str	r3, [sp, #56]	; 0x38
 8005386:	9327      	str	r3, [sp, #156]	; 0x9c
 8005388:	e7f6      	b.n	8005378 <_dtoa_r+0xbf8>
 800538a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800538c:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 8005390:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8005394:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005396:	e006      	b.n	80053a6 <_dtoa_r+0xc26>
 8005398:	4659      	mov	r1, fp
 800539a:	4638      	mov	r0, r7
 800539c:	220a      	movs	r2, #10
 800539e:	2300      	movs	r3, #0
 80053a0:	f000 fdc6 	bl	8005f30 <__multadd>
 80053a4:	4683      	mov	fp, r0
 80053a6:	4631      	mov	r1, r6
 80053a8:	4658      	mov	r0, fp
 80053aa:	f7ff f959 	bl	8004660 <quorem>
 80053ae:	3030      	adds	r0, #48	; 0x30
 80053b0:	5528      	strb	r0, [r5, r4]
 80053b2:	3401      	adds	r4, #1
 80053b4:	45a0      	cmp	r8, r4
 80053b6:	dcef      	bgt.n	8005398 <_dtoa_r+0xc18>
 80053b8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80053ba:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80053be:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80053c2:	4681      	mov	r9, r0
 80053c4:	2c01      	cmp	r4, #1
 80053c6:	bfac      	ite	ge
 80053c8:	44a3      	addge	fp, r4
 80053ca:	f10b 0b01 	addlt.w	fp, fp, #1
 80053ce:	2400      	movs	r4, #0
 80053d0:	2201      	movs	r2, #1
 80053d2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80053d4:	4638      	mov	r0, r7
 80053d6:	f000 ff77 	bl	80062c8 <__lshift>
 80053da:	4631      	mov	r1, r6
 80053dc:	900a      	str	r0, [sp, #40]	; 0x28
 80053de:	f000 ffd3 	bl	8006388 <__mcmp>
 80053e2:	2800      	cmp	r0, #0
 80053e4:	f340 8080 	ble.w	80054e8 <_dtoa_r+0xd68>
 80053e8:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
 80053ec:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80053ee:	1c6a      	adds	r2, r5, #1
 80053f0:	e003      	b.n	80053fa <_dtoa_r+0xc7a>
 80053f2:	f81b 3c02 	ldrb.w	r3, [fp, #-2]
 80053f6:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80053fa:	2b39      	cmp	r3, #57	; 0x39
 80053fc:	f040 8082 	bne.w	8005504 <_dtoa_r+0xd84>
 8005400:	4593      	cmp	fp, r2
 8005402:	d1f6      	bne.n	80053f2 <_dtoa_r+0xc72>
 8005404:	9807      	ldr	r0, [sp, #28]
 8005406:	2331      	movs	r3, #49	; 0x31
 8005408:	3001      	adds	r0, #1
 800540a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800540c:	9007      	str	r0, [sp, #28]
 800540e:	f80b 3c01 	strb.w	r3, [fp, #-1]
 8005412:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8005416:	e45e      	b.n	8004cd6 <_dtoa_r+0x556>
 8005418:	2602      	movs	r6, #2
 800541a:	e535      	b.n	8004e88 <_dtoa_r+0x708>
 800541c:	4638      	mov	r0, r7
 800541e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005420:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005422:	f000 ff05 	bl	8006230 <__pow5mult>
 8005426:	900a      	str	r0, [sp, #40]	; 0x28
 8005428:	f7ff bbef 	b.w	8004c0a <_dtoa_r+0x48a>
 800542c:	2100      	movs	r1, #0
 800542e:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8005432:	2000      	movs	r0, #0
 8005434:	f6c3 71e0 	movt	r1, #16352	; 0x3fe0
 8005438:	f002 fab6 	bl	80079a8 <__aeabi_dsub>
 800543c:	4602      	mov	r2, r0
 800543e:	460b      	mov	r3, r1
 8005440:	4650      	mov	r0, sl
 8005442:	4659      	mov	r1, fp
 8005444:	f002 fed6 	bl	80081f4 <__aeabi_dcmplt>
 8005448:	2800      	cmp	r0, #0
 800544a:	f43f aed4 	beq.w	80051f6 <_dtoa_r+0xa76>
 800544e:	4642      	mov	r2, r8
 8005450:	f818 3d01 	ldrb.w	r3, [r8, #-1]!
 8005454:	2b30      	cmp	r3, #48	; 0x30
 8005456:	d0fa      	beq.n	800544e <_dtoa_r+0xcce>
 8005458:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 800545a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800545c:	9407      	str	r4, [sp, #28]
 800545e:	9209      	str	r2, [sp, #36]	; 0x24
 8005460:	e449      	b.n	8004cf6 <_dtoa_r+0x576>
 8005462:	4638      	mov	r0, r7
 8005464:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005466:	f000 fee3 	bl	8006230 <__pow5mult>
 800546a:	900a      	str	r0, [sp, #40]	; 0x28
 800546c:	f7ff bbcd 	b.w	8004c0a <_dtoa_r+0x48a>
 8005470:	2600      	movs	r6, #0
 8005472:	46b2      	mov	sl, r6
 8005474:	e4a4      	b.n	8004dc0 <_dtoa_r+0x640>
 8005476:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8005478:	2d00      	cmp	r5, #0
 800547a:	d062      	beq.n	8005542 <_dtoa_r+0xdc2>
 800547c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005480:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005482:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8005484:	e47c      	b.n	8004d80 <_dtoa_r+0x600>
 8005486:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005488:	f7ff bb6a 	b.w	8004b60 <_dtoa_r+0x3e0>
 800548c:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 800548e:	1c72      	adds	r2, r6, #1
 8005490:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8005494:	b2d2      	uxtb	r2, r2
 8005496:	9407      	str	r4, [sp, #28]
 8005498:	f7ff bb78 	b.w	8004b8c <_dtoa_r+0x40c>
 800549c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800549e:	2300      	movs	r3, #0
 80054a0:	1b04      	subs	r4, r0, r4
 80054a2:	e46d      	b.n	8004d80 <_dtoa_r+0x600>
 80054a4:	08008670 	.word	0x08008670
 80054a8:	08008760 	.word	0x08008760
 80054ac:	f1bb 0f00 	cmp.w	fp, #0
 80054b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80054b4:	dd10      	ble.n	80054d8 <_dtoa_r+0xd58>
 80054b6:	2201      	movs	r2, #1
 80054b8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80054ba:	4638      	mov	r0, r7
 80054bc:	f000 ff04 	bl	80062c8 <__lshift>
 80054c0:	4631      	mov	r1, r6
 80054c2:	900a      	str	r0, [sp, #40]	; 0x28
 80054c4:	f000 ff60 	bl	8006388 <__mcmp>
 80054c8:	2800      	cmp	r0, #0
 80054ca:	dd67      	ble.n	800559c <_dtoa_r+0xe1c>
 80054cc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80054d0:	d050      	beq.n	8005574 <_dtoa_r+0xdf4>
 80054d2:	9b02      	ldr	r3, [sp, #8]
 80054d4:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80054d8:	462b      	mov	r3, r5
 80054da:	f803 9b01 	strb.w	r9, [r3], #1
 80054de:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80054e0:	46c2      	mov	sl, r8
 80054e2:	9309      	str	r3, [sp, #36]	; 0x24
 80054e4:	f7ff bbf7 	b.w	8004cd6 <_dtoa_r+0x556>
 80054e8:	d103      	bne.n	80054f2 <_dtoa_r+0xd72>
 80054ea:	f019 0f01 	tst.w	r9, #1
 80054ee:	f47f af7b 	bne.w	80053e8 <_dtoa_r+0xc68>
 80054f2:	465a      	mov	r2, fp
 80054f4:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
 80054f8:	2b30      	cmp	r3, #48	; 0x30
 80054fa:	d0fa      	beq.n	80054f2 <_dtoa_r+0xd72>
 80054fc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80054fe:	9209      	str	r2, [sp, #36]	; 0x24
 8005500:	f7ff bbe9 	b.w	8004cd6 <_dtoa_r+0x556>
 8005504:	3301      	adds	r3, #1
 8005506:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005508:	f80b 3c01 	strb.w	r3, [fp, #-1]
 800550c:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8005510:	f7ff bbe1 	b.w	8004cd6 <_dtoa_r+0x556>
 8005514:	f8da 1004 	ldr.w	r1, [sl, #4]
 8005518:	4638      	mov	r0, r7
 800551a:	f000 fcd9 	bl	8005ed0 <_Balloc>
 800551e:	f8da 2010 	ldr.w	r2, [sl, #16]
 8005522:	4604      	mov	r4, r0
 8005524:	3202      	adds	r2, #2
 8005526:	0092      	lsls	r2, r2, #2
 8005528:	f10a 010c 	add.w	r1, sl, #12
 800552c:	f100 000c 	add.w	r0, r0, #12
 8005530:	f000 fc86 	bl	8005e40 <memcpy>
 8005534:	4638      	mov	r0, r7
 8005536:	4621      	mov	r1, r4
 8005538:	2201      	movs	r2, #1
 800553a:	f000 fec5 	bl	80062c8 <__lshift>
 800553e:	4680      	mov	r8, r0
 8005540:	e5e9      	b.n	8005116 <_dtoa_r+0x996>
 8005542:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8005544:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005546:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800554a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800554c:	e418      	b.n	8004d80 <_dtoa_r+0x600>
 800554e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005552:	46c2      	mov	sl, r8
 8005554:	e73c      	b.n	80053d0 <_dtoa_r+0xc50>
 8005556:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800555a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800555e:	d009      	beq.n	8005574 <_dtoa_r+0xdf4>
 8005560:	462b      	mov	r3, r5
 8005562:	f109 0901 	add.w	r9, r9, #1
 8005566:	f803 9b01 	strb.w	r9, [r3], #1
 800556a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800556c:	46c2      	mov	sl, r8
 800556e:	9309      	str	r3, [sp, #36]	; 0x24
 8005570:	f7ff bbb1 	b.w	8004cd6 <_dtoa_r+0x556>
 8005574:	2339      	movs	r3, #57	; 0x39
 8005576:	46ab      	mov	fp, r5
 8005578:	f80b 3b01 	strb.w	r3, [fp], #1
 800557c:	46c2      	mov	sl, r8
 800557e:	e735      	b.n	80053ec <_dtoa_r+0xc6c>
 8005580:	464b      	mov	r3, r9
 8005582:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005586:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800558a:	d0f3      	beq.n	8005574 <_dtoa_r+0xdf4>
 800558c:	2b00      	cmp	r3, #0
 800558e:	dca0      	bgt.n	80054d2 <_dtoa_r+0xd52>
 8005590:	e7a2      	b.n	80054d8 <_dtoa_r+0xd58>
 8005592:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8005594:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005596:	9409      	str	r4, [sp, #36]	; 0x24
 8005598:	f7ff bbad 	b.w	8004cf6 <_dtoa_r+0x576>
 800559c:	d19c      	bne.n	80054d8 <_dtoa_r+0xd58>
 800559e:	f019 0f01 	tst.w	r9, #1
 80055a2:	d099      	beq.n	80054d8 <_dtoa_r+0xd58>
 80055a4:	e792      	b.n	80054cc <_dtoa_r+0xd4c>
 80055a6:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80055a8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80055aa:	9407      	str	r4, [sp, #28]
 80055ac:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80055ae:	9409      	str	r4, [sp, #36]	; 0x24
 80055b0:	f7ff bba1 	b.w	8004cf6 <_dtoa_r+0x576>
 80055b4:	4651      	mov	r1, sl
 80055b6:	2300      	movs	r3, #0
 80055b8:	4638      	mov	r0, r7
 80055ba:	220a      	movs	r2, #10
 80055bc:	f000 fcb8 	bl	8005f30 <__multadd>
 80055c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80055c2:	4682      	mov	sl, r0
 80055c4:	930e      	str	r3, [sp, #56]	; 0x38
 80055c6:	f7ff bb60 	b.w	8004c8a <_dtoa_r+0x50a>
 80055ca:	f43f ab49 	beq.w	8004c60 <_dtoa_r+0x4e0>
 80055ce:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
 80055d2:	e608      	b.n	80051e6 <_dtoa_r+0xa66>
 80055d4:	f3af 8000 	nop.w

080055d8 <_malloc_trim_r>:
 80055d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055da:	4d22      	ldr	r5, [pc, #136]	; (8005664 <_malloc_trim_r+0x8c>)
 80055dc:	460f      	mov	r7, r1
 80055de:	4604      	mov	r4, r0
 80055e0:	f000 fc72 	bl	8005ec8 <__malloc_lock>
 80055e4:	68ab      	ldr	r3, [r5, #8]
 80055e6:	4620      	mov	r0, r4
 80055e8:	685e      	ldr	r6, [r3, #4]
 80055ea:	f026 0603 	bic.w	r6, r6, #3
 80055ee:	f606 73ef 	addw	r3, r6, #4079	; 0xfef
 80055f2:	1bdf      	subs	r7, r3, r7
 80055f4:	0b3f      	lsrs	r7, r7, #12
 80055f6:	3f01      	subs	r7, #1
 80055f8:	033f      	lsls	r7, r7, #12
 80055fa:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
 80055fe:	db07      	blt.n	8005610 <_malloc_trim_r+0x38>
 8005600:	2100      	movs	r1, #0
 8005602:	f001 f8f3 	bl	80067ec <_sbrk_r>
 8005606:	68ab      	ldr	r3, [r5, #8]
 8005608:	199b      	adds	r3, r3, r6
 800560a:	4298      	cmp	r0, r3
 800560c:	4620      	mov	r0, r4
 800560e:	d003      	beq.n	8005618 <_malloc_trim_r+0x40>
 8005610:	f000 fc5c 	bl	8005ecc <__malloc_unlock>
 8005614:	2000      	movs	r0, #0
 8005616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005618:	4279      	negs	r1, r7
 800561a:	f001 f8e7 	bl	80067ec <_sbrk_r>
 800561e:	3001      	adds	r0, #1
 8005620:	d00d      	beq.n	800563e <_malloc_trim_r+0x66>
 8005622:	4b11      	ldr	r3, [pc, #68]	; (8005668 <_malloc_trim_r+0x90>)
 8005624:	68aa      	ldr	r2, [r5, #8]
 8005626:	6819      	ldr	r1, [r3, #0]
 8005628:	1bf6      	subs	r6, r6, r7
 800562a:	f046 0601 	orr.w	r6, r6, #1
 800562e:	1bcf      	subs	r7, r1, r7
 8005630:	4620      	mov	r0, r4
 8005632:	6056      	str	r6, [r2, #4]
 8005634:	601f      	str	r7, [r3, #0]
 8005636:	f000 fc49 	bl	8005ecc <__malloc_unlock>
 800563a:	2001      	movs	r0, #1
 800563c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800563e:	2100      	movs	r1, #0
 8005640:	4620      	mov	r0, r4
 8005642:	f001 f8d3 	bl	80067ec <_sbrk_r>
 8005646:	68ab      	ldr	r3, [r5, #8]
 8005648:	1ac2      	subs	r2, r0, r3
 800564a:	2a0f      	cmp	r2, #15
 800564c:	dd07      	ble.n	800565e <_malloc_trim_r+0x86>
 800564e:	4907      	ldr	r1, [pc, #28]	; (800566c <_malloc_trim_r+0x94>)
 8005650:	f042 0201 	orr.w	r2, r2, #1
 8005654:	6809      	ldr	r1, [r1, #0]
 8005656:	605a      	str	r2, [r3, #4]
 8005658:	1a40      	subs	r0, r0, r1
 800565a:	4903      	ldr	r1, [pc, #12]	; (8005668 <_malloc_trim_r+0x90>)
 800565c:	6008      	str	r0, [r1, #0]
 800565e:	4620      	mov	r0, r4
 8005660:	e7d6      	b.n	8005610 <_malloc_trim_r+0x38>
 8005662:	bf00      	nop
 8005664:	2000054c 	.word	0x2000054c
 8005668:	20000974 	.word	0x20000974
 800566c:	20000954 	.word	0x20000954

08005670 <_free_r>:
 8005670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005674:	460d      	mov	r5, r1
 8005676:	4604      	mov	r4, r0
 8005678:	2900      	cmp	r1, #0
 800567a:	d06f      	beq.n	800575c <_free_r+0xec>
 800567c:	f000 fc24 	bl	8005ec8 <__malloc_lock>
 8005680:	f855 0c04 	ldr.w	r0, [r5, #-4]
 8005684:	4e57      	ldr	r6, [pc, #348]	; (80057e4 <_free_r+0x174>)
 8005686:	f1a5 0108 	sub.w	r1, r5, #8
 800568a:	f020 0301 	bic.w	r3, r0, #1
 800568e:	18ca      	adds	r2, r1, r3
 8005690:	f8d6 c008 	ldr.w	ip, [r6, #8]
 8005694:	6857      	ldr	r7, [r2, #4]
 8005696:	4594      	cmp	ip, r2
 8005698:	f027 0703 	bic.w	r7, r7, #3
 800569c:	d07b      	beq.n	8005796 <_free_r+0x126>
 800569e:	f010 0001 	ands.w	r0, r0, #1
 80056a2:	6057      	str	r7, [r2, #4]
 80056a4:	d049      	beq.n	800573a <_free_r+0xca>
 80056a6:	2000      	movs	r0, #0
 80056a8:	19d5      	adds	r5, r2, r7
 80056aa:	686d      	ldr	r5, [r5, #4]
 80056ac:	f015 0f01 	tst.w	r5, #1
 80056b0:	d106      	bne.n	80056c0 <_free_r+0x50>
 80056b2:	19db      	adds	r3, r3, r7
 80056b4:	6895      	ldr	r5, [r2, #8]
 80056b6:	2800      	cmp	r0, #0
 80056b8:	d061      	beq.n	800577e <_free_r+0x10e>
 80056ba:	68d2      	ldr	r2, [r2, #12]
 80056bc:	60ea      	str	r2, [r5, #12]
 80056be:	6095      	str	r5, [r2, #8]
 80056c0:	f043 0201 	orr.w	r2, r3, #1
 80056c4:	604a      	str	r2, [r1, #4]
 80056c6:	50cb      	str	r3, [r1, r3]
 80056c8:	bb90      	cbnz	r0, 8005730 <_free_r+0xc0>
 80056ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056ce:	d347      	bcc.n	8005760 <_free_r+0xf0>
 80056d0:	099d      	lsrs	r5, r3, #6
 80056d2:	3538      	adds	r5, #56	; 0x38
 80056d4:	0a5a      	lsrs	r2, r3, #9
 80056d6:	00e8      	lsls	r0, r5, #3
 80056d8:	2a04      	cmp	r2, #4
 80056da:	d916      	bls.n	800570a <_free_r+0x9a>
 80056dc:	f102 055b 	add.w	r5, r2, #91	; 0x5b
 80056e0:	00e8      	lsls	r0, r5, #3
 80056e2:	2a14      	cmp	r2, #20
 80056e4:	d911      	bls.n	800570a <_free_r+0x9a>
 80056e6:	0b1d      	lsrs	r5, r3, #12
 80056e8:	356e      	adds	r5, #110	; 0x6e
 80056ea:	00e8      	lsls	r0, r5, #3
 80056ec:	2a54      	cmp	r2, #84	; 0x54
 80056ee:	d90c      	bls.n	800570a <_free_r+0x9a>
 80056f0:	0bdd      	lsrs	r5, r3, #15
 80056f2:	3577      	adds	r5, #119	; 0x77
 80056f4:	00e8      	lsls	r0, r5, #3
 80056f6:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80056fa:	d906      	bls.n	800570a <_free_r+0x9a>
 80056fc:	f240 5054 	movw	r0, #1364	; 0x554
 8005700:	4282      	cmp	r2, r0
 8005702:	d86b      	bhi.n	80057dc <_free_r+0x16c>
 8005704:	0c9d      	lsrs	r5, r3, #18
 8005706:	357c      	adds	r5, #124	; 0x7c
 8005708:	00e8      	lsls	r0, r5, #3
 800570a:	1986      	adds	r6, r0, r6
 800570c:	68b2      	ldr	r2, [r6, #8]
 800570e:	4835      	ldr	r0, [pc, #212]	; (80057e4 <_free_r+0x174>)
 8005710:	42b2      	cmp	r2, r6
 8005712:	d103      	bne.n	800571c <_free_r+0xac>
 8005714:	e05a      	b.n	80057cc <_free_r+0x15c>
 8005716:	6892      	ldr	r2, [r2, #8]
 8005718:	4296      	cmp	r6, r2
 800571a:	d004      	beq.n	8005726 <_free_r+0xb6>
 800571c:	6850      	ldr	r0, [r2, #4]
 800571e:	f020 0003 	bic.w	r0, r0, #3
 8005722:	4283      	cmp	r3, r0
 8005724:	d3f7      	bcc.n	8005716 <_free_r+0xa6>
 8005726:	68d3      	ldr	r3, [r2, #12]
 8005728:	60cb      	str	r3, [r1, #12]
 800572a:	608a      	str	r2, [r1, #8]
 800572c:	60d1      	str	r1, [r2, #12]
 800572e:	6099      	str	r1, [r3, #8]
 8005730:	4620      	mov	r0, r4
 8005732:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005736:	f000 bbc9 	b.w	8005ecc <__malloc_unlock>
 800573a:	f855 cc08 	ldr.w	ip, [r5, #-8]
 800573e:	f106 0808 	add.w	r8, r6, #8
 8005742:	ebcc 0101 	rsb	r1, ip, r1
 8005746:	688d      	ldr	r5, [r1, #8]
 8005748:	4463      	add	r3, ip
 800574a:	4545      	cmp	r5, r8
 800574c:	d03c      	beq.n	80057c8 <_free_r+0x158>
 800574e:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8005752:	f8c5 c00c 	str.w	ip, [r5, #12]
 8005756:	f8cc 5008 	str.w	r5, [ip, #8]
 800575a:	e7a5      	b.n	80056a8 <_free_r+0x38>
 800575c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005760:	08db      	lsrs	r3, r3, #3
 8005762:	109a      	asrs	r2, r3, #2
 8005764:	2001      	movs	r0, #1
 8005766:	4090      	lsls	r0, r2
 8005768:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800576c:	6875      	ldr	r5, [r6, #4]
 800576e:	689a      	ldr	r2, [r3, #8]
 8005770:	4328      	orrs	r0, r5
 8005772:	60cb      	str	r3, [r1, #12]
 8005774:	608a      	str	r2, [r1, #8]
 8005776:	6070      	str	r0, [r6, #4]
 8005778:	6099      	str	r1, [r3, #8]
 800577a:	60d1      	str	r1, [r2, #12]
 800577c:	e7d8      	b.n	8005730 <_free_r+0xc0>
 800577e:	4f1a      	ldr	r7, [pc, #104]	; (80057e8 <_free_r+0x178>)
 8005780:	42bd      	cmp	r5, r7
 8005782:	d19a      	bne.n	80056ba <_free_r+0x4a>
 8005784:	f043 0201 	orr.w	r2, r3, #1
 8005788:	6171      	str	r1, [r6, #20]
 800578a:	6131      	str	r1, [r6, #16]
 800578c:	60cd      	str	r5, [r1, #12]
 800578e:	608d      	str	r5, [r1, #8]
 8005790:	604a      	str	r2, [r1, #4]
 8005792:	50cb      	str	r3, [r1, r3]
 8005794:	e7cc      	b.n	8005730 <_free_r+0xc0>
 8005796:	07c2      	lsls	r2, r0, #31
 8005798:	443b      	add	r3, r7
 800579a:	d407      	bmi.n	80057ac <_free_r+0x13c>
 800579c:	f855 5c08 	ldr.w	r5, [r5, #-8]
 80057a0:	1b49      	subs	r1, r1, r5
 80057a2:	68ca      	ldr	r2, [r1, #12]
 80057a4:	6888      	ldr	r0, [r1, #8]
 80057a6:	195b      	adds	r3, r3, r5
 80057a8:	60c2      	str	r2, [r0, #12]
 80057aa:	6090      	str	r0, [r2, #8]
 80057ac:	4a0f      	ldr	r2, [pc, #60]	; (80057ec <_free_r+0x17c>)
 80057ae:	f043 0001 	orr.w	r0, r3, #1
 80057b2:	6812      	ldr	r2, [r2, #0]
 80057b4:	6048      	str	r0, [r1, #4]
 80057b6:	4293      	cmp	r3, r2
 80057b8:	60b1      	str	r1, [r6, #8]
 80057ba:	d3b9      	bcc.n	8005730 <_free_r+0xc0>
 80057bc:	4b0c      	ldr	r3, [pc, #48]	; (80057f0 <_free_r+0x180>)
 80057be:	4620      	mov	r0, r4
 80057c0:	6819      	ldr	r1, [r3, #0]
 80057c2:	f7ff ff09 	bl	80055d8 <_malloc_trim_r>
 80057c6:	e7b3      	b.n	8005730 <_free_r+0xc0>
 80057c8:	2001      	movs	r0, #1
 80057ca:	e76d      	b.n	80056a8 <_free_r+0x38>
 80057cc:	10ad      	asrs	r5, r5, #2
 80057ce:	2601      	movs	r6, #1
 80057d0:	40ae      	lsls	r6, r5
 80057d2:	6845      	ldr	r5, [r0, #4]
 80057d4:	4613      	mov	r3, r2
 80057d6:	4335      	orrs	r5, r6
 80057d8:	6045      	str	r5, [r0, #4]
 80057da:	e7a5      	b.n	8005728 <_free_r+0xb8>
 80057dc:	f44f 707c 	mov.w	r0, #1008	; 0x3f0
 80057e0:	257e      	movs	r5, #126	; 0x7e
 80057e2:	e792      	b.n	800570a <_free_r+0x9a>
 80057e4:	2000054c 	.word	0x2000054c
 80057e8:	20000554 	.word	0x20000554
 80057ec:	20000958 	.word	0x20000958
 80057f0:	20000970 	.word	0x20000970

080057f4 <_setlocale_r>:
 80057f4:	b510      	push	{r4, lr}
 80057f6:	4614      	mov	r4, r2
 80057f8:	b122      	cbz	r2, 8005804 <_setlocale_r+0x10>
 80057fa:	4610      	mov	r0, r2
 80057fc:	490b      	ldr	r1, [pc, #44]	; (800582c <_setlocale_r+0x38>)
 80057fe:	f001 f807 	bl	8006810 <strcmp>
 8005802:	b908      	cbnz	r0, 8005808 <_setlocale_r+0x14>
 8005804:	480a      	ldr	r0, [pc, #40]	; (8005830 <_setlocale_r+0x3c>)
 8005806:	bd10      	pop	{r4, pc}
 8005808:	4620      	mov	r0, r4
 800580a:	4909      	ldr	r1, [pc, #36]	; (8005830 <_setlocale_r+0x3c>)
 800580c:	f001 f800 	bl	8006810 <strcmp>
 8005810:	b908      	cbnz	r0, 8005816 <_setlocale_r+0x22>
 8005812:	4807      	ldr	r0, [pc, #28]	; (8005830 <_setlocale_r+0x3c>)
 8005814:	bd10      	pop	{r4, pc}
 8005816:	4620      	mov	r0, r4
 8005818:	4906      	ldr	r1, [pc, #24]	; (8005834 <_setlocale_r+0x40>)
 800581a:	f000 fff9 	bl	8006810 <strcmp>
 800581e:	4b04      	ldr	r3, [pc, #16]	; (8005830 <_setlocale_r+0x3c>)
 8005820:	2800      	cmp	r0, #0
 8005822:	bf0c      	ite	eq
 8005824:	4618      	moveq	r0, r3
 8005826:	2000      	movne	r0, #0
 8005828:	bd10      	pop	{r4, pc}
 800582a:	bf00      	nop
 800582c:	08008920 	.word	0x08008920
 8005830:	0800891c 	.word	0x0800891c
 8005834:	080088e8 	.word	0x080088e8

08005838 <__locale_charset>:
 8005838:	f240 40d0 	movw	r0, #1232	; 0x4d0
 800583c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8005840:	4770      	bx	lr
 8005842:	bf00      	nop

08005844 <__locale_mb_cur_max>:
 8005844:	f240 43d0 	movw	r3, #1232	; 0x4d0
 8005848:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800584c:	6a18      	ldr	r0, [r3, #32]
 800584e:	4770      	bx	lr

08005850 <__locale_msgcharset>:
 8005850:	4800      	ldr	r0, [pc, #0]	; (8005854 <__locale_msgcharset+0x4>)
 8005852:	4770      	bx	lr
 8005854:	200004f4 	.word	0x200004f4

08005858 <__locale_cjk_lang>:
 8005858:	2000      	movs	r0, #0
 800585a:	4770      	bx	lr

0800585c <_localeconv_r>:
 800585c:	4800      	ldr	r0, [pc, #0]	; (8005860 <_localeconv_r+0x4>)
 800585e:	4770      	bx	lr
 8005860:	20000514 	.word	0x20000514

08005864 <setlocale>:
 8005864:	b410      	push	{r4}
 8005866:	f240 03a0 	movw	r3, #160	; 0xa0
 800586a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800586e:	4604      	mov	r4, r0
 8005870:	6818      	ldr	r0, [r3, #0]
 8005872:	460a      	mov	r2, r1
 8005874:	4621      	mov	r1, r4
 8005876:	bc10      	pop	{r4}
 8005878:	e7bc      	b.n	80057f4 <_setlocale_r>
 800587a:	bf00      	nop

0800587c <localeconv>:
 800587c:	4800      	ldr	r0, [pc, #0]	; (8005880 <localeconv+0x4>)
 800587e:	4770      	bx	lr
 8005880:	20000514 	.word	0x20000514

08005884 <_malloc_r>:
 8005884:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005888:	f101 040b 	add.w	r4, r1, #11
 800588c:	2c16      	cmp	r4, #22
 800588e:	4605      	mov	r5, r0
 8005890:	d92a      	bls.n	80058e8 <_malloc_r+0x64>
 8005892:	f024 0407 	bic.w	r4, r4, #7
 8005896:	0fe3      	lsrs	r3, r4, #31
 8005898:	428c      	cmp	r4, r1
 800589a:	bf2c      	ite	cs
 800589c:	4619      	movcs	r1, r3
 800589e:	f043 0101 	orrcc.w	r1, r3, #1
 80058a2:	bb51      	cbnz	r1, 80058fa <_malloc_r+0x76>
 80058a4:	4628      	mov	r0, r5
 80058a6:	f000 fb0f 	bl	8005ec8 <__malloc_lock>
 80058aa:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 80058ae:	d22a      	bcs.n	8005906 <_malloc_r+0x82>
 80058b0:	4e7d      	ldr	r6, [pc, #500]	; (8005aa8 <_malloc_r+0x224>)
 80058b2:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
 80058b6:	eb06 03ce 	add.w	r3, r6, lr, lsl #3
 80058ba:	68df      	ldr	r7, [r3, #12]
 80058bc:	429f      	cmp	r7, r3
 80058be:	f000 8221 	beq.w	8005d04 <_malloc_r+0x480>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	68fa      	ldr	r2, [r7, #12]
 80058c6:	f023 0303 	bic.w	r3, r3, #3
 80058ca:	18fb      	adds	r3, r7, r3
 80058cc:	6858      	ldr	r0, [r3, #4]
 80058ce:	68b9      	ldr	r1, [r7, #8]
 80058d0:	f040 0001 	orr.w	r0, r0, #1
 80058d4:	6058      	str	r0, [r3, #4]
 80058d6:	60ca      	str	r2, [r1, #12]
 80058d8:	6091      	str	r1, [r2, #8]
 80058da:	4628      	mov	r0, r5
 80058dc:	f000 faf6 	bl	8005ecc <__malloc_unlock>
 80058e0:	3708      	adds	r7, #8
 80058e2:	4638      	mov	r0, r7
 80058e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058e8:	2300      	movs	r3, #0
 80058ea:	2410      	movs	r4, #16
 80058ec:	428c      	cmp	r4, r1
 80058ee:	bf2c      	ite	cs
 80058f0:	4619      	movcs	r1, r3
 80058f2:	f043 0101 	orrcc.w	r1, r3, #1
 80058f6:	2900      	cmp	r1, #0
 80058f8:	d0d4      	beq.n	80058a4 <_malloc_r+0x20>
 80058fa:	230c      	movs	r3, #12
 80058fc:	2700      	movs	r7, #0
 80058fe:	602b      	str	r3, [r5, #0]
 8005900:	4638      	mov	r0, r7
 8005902:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005906:	ea5f 2e54 	movs.w	lr, r4, lsr #9
 800590a:	bf04      	itt	eq
 800590c:	ea4f 0ed4 	moveq.w	lr, r4, lsr #3
 8005910:	ea4f 01ce 	moveq.w	r1, lr, lsl #3
 8005914:	f040 8081 	bne.w	8005a1a <_malloc_r+0x196>
 8005918:	4e63      	ldr	r6, [pc, #396]	; (8005aa8 <_malloc_r+0x224>)
 800591a:	1871      	adds	r1, r6, r1
 800591c:	68cf      	ldr	r7, [r1, #12]
 800591e:	42b9      	cmp	r1, r7
 8005920:	d106      	bne.n	8005930 <_malloc_r+0xac>
 8005922:	e00d      	b.n	8005940 <_malloc_r+0xbc>
 8005924:	2b00      	cmp	r3, #0
 8005926:	f280 8169 	bge.w	8005bfc <_malloc_r+0x378>
 800592a:	68ff      	ldr	r7, [r7, #12]
 800592c:	42b9      	cmp	r1, r7
 800592e:	d007      	beq.n	8005940 <_malloc_r+0xbc>
 8005930:	687a      	ldr	r2, [r7, #4]
 8005932:	f022 0203 	bic.w	r2, r2, #3
 8005936:	1b13      	subs	r3, r2, r4
 8005938:	2b0f      	cmp	r3, #15
 800593a:	ddf3      	ble.n	8005924 <_malloc_r+0xa0>
 800593c:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 8005940:	f10e 0e01 	add.w	lr, lr, #1
 8005944:	4a58      	ldr	r2, [pc, #352]	; (8005aa8 <_malloc_r+0x224>)
 8005946:	6937      	ldr	r7, [r6, #16]
 8005948:	f102 0c08 	add.w	ip, r2, #8
 800594c:	4567      	cmp	r7, ip
 800594e:	bf08      	it	eq
 8005950:	6851      	ldreq	r1, [r2, #4]
 8005952:	d022      	beq.n	800599a <_malloc_r+0x116>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f023 0303 	bic.w	r3, r3, #3
 800595a:	1b19      	subs	r1, r3, r4
 800595c:	290f      	cmp	r1, #15
 800595e:	f300 81a0 	bgt.w	8005ca2 <_malloc_r+0x41e>
 8005962:	2900      	cmp	r1, #0
 8005964:	f8c2 c014 	str.w	ip, [r2, #20]
 8005968:	f8c2 c010 	str.w	ip, [r2, #16]
 800596c:	f280 808f 	bge.w	8005a8e <_malloc_r+0x20a>
 8005970:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005974:	f080 8161 	bcs.w	8005c3a <_malloc_r+0x3b6>
 8005978:	08db      	lsrs	r3, r3, #3
 800597a:	1099      	asrs	r1, r3, #2
 800597c:	f04f 0801 	mov.w	r8, #1
 8005980:	fa08 f801 	lsl.w	r8, r8, r1
 8005984:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005988:	6851      	ldr	r1, [r2, #4]
 800598a:	6898      	ldr	r0, [r3, #8]
 800598c:	ea48 0101 	orr.w	r1, r8, r1
 8005990:	60fb      	str	r3, [r7, #12]
 8005992:	60b8      	str	r0, [r7, #8]
 8005994:	6051      	str	r1, [r2, #4]
 8005996:	609f      	str	r7, [r3, #8]
 8005998:	60c7      	str	r7, [r0, #12]
 800599a:	2001      	movs	r0, #1
 800599c:	ea4f 03ae 	mov.w	r3, lr, asr #2
 80059a0:	4098      	lsls	r0, r3
 80059a2:	4288      	cmp	r0, r1
 80059a4:	f200 8082 	bhi.w	8005aac <_malloc_r+0x228>
 80059a8:	4201      	tst	r1, r0
 80059aa:	d106      	bne.n	80059ba <_malloc_r+0x136>
 80059ac:	f02e 0e03 	bic.w	lr, lr, #3
 80059b0:	0040      	lsls	r0, r0, #1
 80059b2:	4201      	tst	r1, r0
 80059b4:	f10e 0e04 	add.w	lr, lr, #4
 80059b8:	d0fa      	beq.n	80059b0 <_malloc_r+0x12c>
 80059ba:	eb06 09ce 	add.w	r9, r6, lr, lsl #3
 80059be:	464f      	mov	r7, r9
 80059c0:	46f0      	mov	r8, lr
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	429f      	cmp	r7, r3
 80059c6:	d107      	bne.n	80059d8 <_malloc_r+0x154>
 80059c8:	e17e      	b.n	8005cc8 <_malloc_r+0x444>
 80059ca:	2a00      	cmp	r2, #0
 80059cc:	f280 81a4 	bge.w	8005d18 <_malloc_r+0x494>
 80059d0:	68db      	ldr	r3, [r3, #12]
 80059d2:	429f      	cmp	r7, r3
 80059d4:	f000 8178 	beq.w	8005cc8 <_malloc_r+0x444>
 80059d8:	6859      	ldr	r1, [r3, #4]
 80059da:	f021 0103 	bic.w	r1, r1, #3
 80059de:	1b0a      	subs	r2, r1, r4
 80059e0:	2a0f      	cmp	r2, #15
 80059e2:	ddf2      	ble.n	80059ca <_malloc_r+0x146>
 80059e4:	461f      	mov	r7, r3
 80059e6:	68d8      	ldr	r0, [r3, #12]
 80059e8:	f857 ef08 	ldr.w	lr, [r7, #8]!
 80059ec:	1919      	adds	r1, r3, r4
 80059ee:	f044 0801 	orr.w	r8, r4, #1
 80059f2:	f042 0401 	orr.w	r4, r2, #1
 80059f6:	f8ce 000c 	str.w	r0, [lr, #12]
 80059fa:	f8c0 e008 	str.w	lr, [r0, #8]
 80059fe:	f8c3 8004 	str.w	r8, [r3, #4]
 8005a02:	6171      	str	r1, [r6, #20]
 8005a04:	6131      	str	r1, [r6, #16]
 8005a06:	f8c1 c00c 	str.w	ip, [r1, #12]
 8005a0a:	f8c1 c008 	str.w	ip, [r1, #8]
 8005a0e:	604c      	str	r4, [r1, #4]
 8005a10:	508a      	str	r2, [r1, r2]
 8005a12:	4628      	mov	r0, r5
 8005a14:	f000 fa5a 	bl	8005ecc <__malloc_unlock>
 8005a18:	e763      	b.n	80058e2 <_malloc_r+0x5e>
 8005a1a:	f1be 0f04 	cmp.w	lr, #4
 8005a1e:	bf9e      	ittt	ls
 8005a20:	ea4f 1e94 	movls.w	lr, r4, lsr #6
 8005a24:	f10e 0e38 	addls.w	lr, lr, #56	; 0x38
 8005a28:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 8005a2c:	f67f af74 	bls.w	8005918 <_malloc_r+0x94>
 8005a30:	f1be 0f14 	cmp.w	lr, #20
 8005a34:	bf9c      	itt	ls
 8005a36:	f10e 0e5b 	addls.w	lr, lr, #91	; 0x5b
 8005a3a:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 8005a3e:	f67f af6b 	bls.w	8005918 <_malloc_r+0x94>
 8005a42:	f1be 0f54 	cmp.w	lr, #84	; 0x54
 8005a46:	bf9e      	ittt	ls
 8005a48:	ea4f 3e14 	movls.w	lr, r4, lsr #12
 8005a4c:	f10e 0e6e 	addls.w	lr, lr, #110	; 0x6e
 8005a50:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 8005a54:	f67f af60 	bls.w	8005918 <_malloc_r+0x94>
 8005a58:	f5be 7faa 	cmp.w	lr, #340	; 0x154
 8005a5c:	bf9e      	ittt	ls
 8005a5e:	ea4f 3ed4 	movls.w	lr, r4, lsr #15
 8005a62:	f10e 0e77 	addls.w	lr, lr, #119	; 0x77
 8005a66:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 8005a6a:	f67f af55 	bls.w	8005918 <_malloc_r+0x94>
 8005a6e:	f240 5354 	movw	r3, #1364	; 0x554
 8005a72:	459e      	cmp	lr, r3
 8005a74:	bf9d      	ittte	ls
 8005a76:	ea4f 4e94 	movls.w	lr, r4, lsr #18
 8005a7a:	f10e 0e7c 	addls.w	lr, lr, #124	; 0x7c
 8005a7e:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 8005a82:	f44f 717c 	movhi.w	r1, #1008	; 0x3f0
 8005a86:	bf88      	it	hi
 8005a88:	f04f 0e7e 	movhi.w	lr, #126	; 0x7e
 8005a8c:	e744      	b.n	8005918 <_malloc_r+0x94>
 8005a8e:	18fb      	adds	r3, r7, r3
 8005a90:	685a      	ldr	r2, [r3, #4]
 8005a92:	4628      	mov	r0, r5
 8005a94:	f042 0201 	orr.w	r2, r2, #1
 8005a98:	605a      	str	r2, [r3, #4]
 8005a9a:	3708      	adds	r7, #8
 8005a9c:	f000 fa16 	bl	8005ecc <__malloc_unlock>
 8005aa0:	4638      	mov	r0, r7
 8005aa2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005aa6:	bf00      	nop
 8005aa8:	2000054c 	.word	0x2000054c
 8005aac:	68b7      	ldr	r7, [r6, #8]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f023 0803 	bic.w	r8, r3, #3
 8005ab4:	4544      	cmp	r4, r8
 8005ab6:	ebc4 0208 	rsb	r2, r4, r8
 8005aba:	bf94      	ite	ls
 8005abc:	2300      	movls	r3, #0
 8005abe:	2301      	movhi	r3, #1
 8005ac0:	2a0f      	cmp	r2, #15
 8005ac2:	bfd8      	it	le
 8005ac4:	f043 0301 	orrle.w	r3, r3, #1
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	f000 80a7 	beq.w	8005c1c <_malloc_r+0x398>
 8005ace:	4bb9      	ldr	r3, [pc, #740]	; (8005db4 <_malloc_r+0x530>)
 8005ad0:	f8df a2e4 	ldr.w	sl, [pc, #740]	; 8005db8 <_malloc_r+0x534>
 8005ad4:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8005ad8:	f8da 3000 	ldr.w	r3, [sl]
 8005adc:	3201      	adds	r2, #1
 8005ade:	4423      	add	r3, r4
 8005ae0:	bf08      	it	eq
 8005ae2:	f103 0b10 	addeq.w	fp, r3, #16
 8005ae6:	d006      	beq.n	8005af6 <_malloc_r+0x272>
 8005ae8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005aec:	330f      	adds	r3, #15
 8005aee:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005af2:	f023 0b0f 	bic.w	fp, r3, #15
 8005af6:	4628      	mov	r0, r5
 8005af8:	4659      	mov	r1, fp
 8005afa:	f000 fe77 	bl	80067ec <_sbrk_r>
 8005afe:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005b02:	4681      	mov	r9, r0
 8005b04:	f000 8130 	beq.w	8005d68 <_malloc_r+0x4e4>
 8005b08:	eb07 0208 	add.w	r2, r7, r8
 8005b0c:	4282      	cmp	r2, r0
 8005b0e:	f200 8112 	bhi.w	8005d36 <_malloc_r+0x4b2>
 8005b12:	f8da 3004 	ldr.w	r3, [sl, #4]
 8005b16:	454a      	cmp	r2, r9
 8005b18:	445b      	add	r3, fp
 8005b1a:	f8ca 3004 	str.w	r3, [sl, #4]
 8005b1e:	f000 8128 	beq.w	8005d72 <_malloc_r+0x4ee>
 8005b22:	f8d6 1408 	ldr.w	r1, [r6, #1032]	; 0x408
 8005b26:	4628      	mov	r0, r5
 8005b28:	3101      	adds	r1, #1
 8005b2a:	bf15      	itete	ne
 8005b2c:	ebc2 0209 	rsbne	r2, r2, r9
 8005b30:	4ba0      	ldreq	r3, [pc, #640]	; (8005db4 <_malloc_r+0x530>)
 8005b32:	189b      	addne	r3, r3, r2
 8005b34:	f8c3 9408 	streq.w	r9, [r3, #1032]	; 0x408
 8005b38:	bf18      	it	ne
 8005b3a:	f8ca 3004 	strne.w	r3, [sl, #4]
 8005b3e:	f019 0307 	ands.w	r3, r9, #7
 8005b42:	bf1f      	itttt	ne
 8005b44:	f1c3 0208 	rsbne	r2, r3, #8
 8005b48:	4491      	addne	r9, r2
 8005b4a:	f5c3 5380 	rsbne	r3, r3, #4096	; 0x1000
 8005b4e:	f103 0208 	addne.w	r2, r3, #8
 8005b52:	eb09 030b 	add.w	r3, r9, fp
 8005b56:	bf08      	it	eq
 8005b58:	f44f 5280 	moveq.w	r2, #4096	; 0x1000
 8005b5c:	051b      	lsls	r3, r3, #20
 8005b5e:	0d1b      	lsrs	r3, r3, #20
 8005b60:	ebc3 0b02 	rsb	fp, r3, r2
 8005b64:	4659      	mov	r1, fp
 8005b66:	f000 fe41 	bl	80067ec <_sbrk_r>
 8005b6a:	1c43      	adds	r3, r0, #1
 8005b6c:	f000 8115 	beq.w	8005d9a <_malloc_r+0x516>
 8005b70:	ebc9 0200 	rsb	r2, r9, r0
 8005b74:	445a      	add	r2, fp
 8005b76:	f042 0201 	orr.w	r2, r2, #1
 8005b7a:	f8da 3004 	ldr.w	r3, [sl, #4]
 8005b7e:	42b7      	cmp	r7, r6
 8005b80:	445b      	add	r3, fp
 8005b82:	f8c6 9008 	str.w	r9, [r6, #8]
 8005b86:	f8ca 3004 	str.w	r3, [sl, #4]
 8005b8a:	f8c9 2004 	str.w	r2, [r9, #4]
 8005b8e:	d015      	beq.n	8005bbc <_malloc_r+0x338>
 8005b90:	f1b8 0f0f 	cmp.w	r8, #15
 8005b94:	f240 80e2 	bls.w	8005d5c <_malloc_r+0x4d8>
 8005b98:	6879      	ldr	r1, [r7, #4]
 8005b9a:	f1a8 020c 	sub.w	r2, r8, #12
 8005b9e:	f022 0207 	bic.w	r2, r2, #7
 8005ba2:	f001 0e01 	and.w	lr, r1, #1
 8005ba6:	2005      	movs	r0, #5
 8005ba8:	18b9      	adds	r1, r7, r2
 8005baa:	ea42 0e0e 	orr.w	lr, r2, lr
 8005bae:	2a0f      	cmp	r2, #15
 8005bb0:	f8c7 e004 	str.w	lr, [r7, #4]
 8005bb4:	6048      	str	r0, [r1, #4]
 8005bb6:	6088      	str	r0, [r1, #8]
 8005bb8:	f200 80e7 	bhi.w	8005d8a <_malloc_r+0x506>
 8005bbc:	f8da 202c 	ldr.w	r2, [sl, #44]	; 0x2c
 8005bc0:	68b7      	ldr	r7, [r6, #8]
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	bf84      	itt	hi
 8005bc6:	4a7c      	ldrhi	r2, [pc, #496]	; (8005db8 <_malloc_r+0x534>)
 8005bc8:	62d3      	strhi	r3, [r2, #44]	; 0x2c
 8005bca:	f8da 2030 	ldr.w	r2, [sl, #48]	; 0x30
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	bf84      	itt	hi
 8005bd2:	4a79      	ldrhi	r2, [pc, #484]	; (8005db8 <_malloc_r+0x534>)
 8005bd4:	6313      	strhi	r3, [r2, #48]	; 0x30
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f023 0303 	bic.w	r3, r3, #3
 8005bdc:	429c      	cmp	r4, r3
 8005bde:	ebc4 0203 	rsb	r2, r4, r3
 8005be2:	bf94      	ite	ls
 8005be4:	2300      	movls	r3, #0
 8005be6:	2301      	movhi	r3, #1
 8005be8:	2a0f      	cmp	r2, #15
 8005bea:	bfd8      	it	le
 8005bec:	f043 0301 	orrle.w	r3, r3, #1
 8005bf0:	b1a3      	cbz	r3, 8005c1c <_malloc_r+0x398>
 8005bf2:	4628      	mov	r0, r5
 8005bf4:	f000 f96a 	bl	8005ecc <__malloc_unlock>
 8005bf8:	2700      	movs	r7, #0
 8005bfa:	e672      	b.n	80058e2 <_malloc_r+0x5e>
 8005bfc:	18ba      	adds	r2, r7, r2
 8005bfe:	6850      	ldr	r0, [r2, #4]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	68b9      	ldr	r1, [r7, #8]
 8005c04:	f040 0001 	orr.w	r0, r0, #1
 8005c08:	6050      	str	r0, [r2, #4]
 8005c0a:	60cb      	str	r3, [r1, #12]
 8005c0c:	4628      	mov	r0, r5
 8005c0e:	6099      	str	r1, [r3, #8]
 8005c10:	3708      	adds	r7, #8
 8005c12:	f000 f95b 	bl	8005ecc <__malloc_unlock>
 8005c16:	4638      	mov	r0, r7
 8005c18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c1c:	193b      	adds	r3, r7, r4
 8005c1e:	f042 0201 	orr.w	r2, r2, #1
 8005c22:	f044 0401 	orr.w	r4, r4, #1
 8005c26:	607c      	str	r4, [r7, #4]
 8005c28:	4628      	mov	r0, r5
 8005c2a:	605a      	str	r2, [r3, #4]
 8005c2c:	3708      	adds	r7, #8
 8005c2e:	60b3      	str	r3, [r6, #8]
 8005c30:	f000 f94c 	bl	8005ecc <__malloc_unlock>
 8005c34:	4638      	mov	r0, r7
 8005c36:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c3a:	0999      	lsrs	r1, r3, #6
 8005c3c:	3138      	adds	r1, #56	; 0x38
 8005c3e:	0a5a      	lsrs	r2, r3, #9
 8005c40:	00c8      	lsls	r0, r1, #3
 8005c42:	2a04      	cmp	r2, #4
 8005c44:	d917      	bls.n	8005c76 <_malloc_r+0x3f2>
 8005c46:	f102 015b 	add.w	r1, r2, #91	; 0x5b
 8005c4a:	00c8      	lsls	r0, r1, #3
 8005c4c:	2a14      	cmp	r2, #20
 8005c4e:	d912      	bls.n	8005c76 <_malloc_r+0x3f2>
 8005c50:	0b19      	lsrs	r1, r3, #12
 8005c52:	316e      	adds	r1, #110	; 0x6e
 8005c54:	00c8      	lsls	r0, r1, #3
 8005c56:	2a54      	cmp	r2, #84	; 0x54
 8005c58:	d90d      	bls.n	8005c76 <_malloc_r+0x3f2>
 8005c5a:	0bd9      	lsrs	r1, r3, #15
 8005c5c:	3177      	adds	r1, #119	; 0x77
 8005c5e:	00c8      	lsls	r0, r1, #3
 8005c60:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8005c64:	d907      	bls.n	8005c76 <_malloc_r+0x3f2>
 8005c66:	f240 5154 	movw	r1, #1364	; 0x554
 8005c6a:	428a      	cmp	r2, r1
 8005c6c:	f200 809e 	bhi.w	8005dac <_malloc_r+0x528>
 8005c70:	0c99      	lsrs	r1, r3, #18
 8005c72:	317c      	adds	r1, #124	; 0x7c
 8005c74:	00c8      	lsls	r0, r1, #3
 8005c76:	1830      	adds	r0, r6, r0
 8005c78:	6882      	ldr	r2, [r0, #8]
 8005c7a:	f8df 8138 	ldr.w	r8, [pc, #312]	; 8005db4 <_malloc_r+0x530>
 8005c7e:	4282      	cmp	r2, r0
 8005c80:	d103      	bne.n	8005c8a <_malloc_r+0x406>
 8005c82:	e061      	b.n	8005d48 <_malloc_r+0x4c4>
 8005c84:	6892      	ldr	r2, [r2, #8]
 8005c86:	4290      	cmp	r0, r2
 8005c88:	d004      	beq.n	8005c94 <_malloc_r+0x410>
 8005c8a:	6851      	ldr	r1, [r2, #4]
 8005c8c:	f021 0103 	bic.w	r1, r1, #3
 8005c90:	428b      	cmp	r3, r1
 8005c92:	d3f7      	bcc.n	8005c84 <_malloc_r+0x400>
 8005c94:	68d3      	ldr	r3, [r2, #12]
 8005c96:	6871      	ldr	r1, [r6, #4]
 8005c98:	60fb      	str	r3, [r7, #12]
 8005c9a:	60ba      	str	r2, [r7, #8]
 8005c9c:	60d7      	str	r7, [r2, #12]
 8005c9e:	609f      	str	r7, [r3, #8]
 8005ca0:	e67b      	b.n	800599a <_malloc_r+0x116>
 8005ca2:	193b      	adds	r3, r7, r4
 8005ca4:	f041 0001 	orr.w	r0, r1, #1
 8005ca8:	f044 0401 	orr.w	r4, r4, #1
 8005cac:	607c      	str	r4, [r7, #4]
 8005cae:	6153      	str	r3, [r2, #20]
 8005cb0:	6113      	str	r3, [r2, #16]
 8005cb2:	6058      	str	r0, [r3, #4]
 8005cb4:	f8c3 c00c 	str.w	ip, [r3, #12]
 8005cb8:	f8c3 c008 	str.w	ip, [r3, #8]
 8005cbc:	5059      	str	r1, [r3, r1]
 8005cbe:	4628      	mov	r0, r5
 8005cc0:	f000 f904 	bl	8005ecc <__malloc_unlock>
 8005cc4:	3708      	adds	r7, #8
 8005cc6:	e60c      	b.n	80058e2 <_malloc_r+0x5e>
 8005cc8:	f108 0801 	add.w	r8, r8, #1
 8005ccc:	3708      	adds	r7, #8
 8005cce:	f018 0f03 	tst.w	r8, #3
 8005cd2:	f47f ae76 	bne.w	80059c2 <_malloc_r+0x13e>
 8005cd6:	464b      	mov	r3, r9
 8005cd8:	f01e 0f03 	tst.w	lr, #3
 8005cdc:	f1a3 0208 	sub.w	r2, r3, #8
 8005ce0:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 8005ce4:	d05d      	beq.n	8005da2 <_malloc_r+0x51e>
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d0f5      	beq.n	8005cd8 <_malloc_r+0x454>
 8005cec:	6873      	ldr	r3, [r6, #4]
 8005cee:	0040      	lsls	r0, r0, #1
 8005cf0:	4298      	cmp	r0, r3
 8005cf2:	f63f aedb 	bhi.w	8005aac <_malloc_r+0x228>
 8005cf6:	2800      	cmp	r0, #0
 8005cf8:	f43f aed8 	beq.w	8005aac <_malloc_r+0x228>
 8005cfc:	4218      	tst	r0, r3
 8005cfe:	d05d      	beq.n	8005dbc <_malloc_r+0x538>
 8005d00:	46c6      	mov	lr, r8
 8005d02:	e65a      	b.n	80059ba <_malloc_r+0x136>
 8005d04:	f107 0308 	add.w	r3, r7, #8
 8005d08:	697f      	ldr	r7, [r7, #20]
 8005d0a:	42bb      	cmp	r3, r7
 8005d0c:	bf08      	it	eq
 8005d0e:	f10e 0e02 	addeq.w	lr, lr, #2
 8005d12:	f43f ae17 	beq.w	8005944 <_malloc_r+0xc0>
 8005d16:	e5d4      	b.n	80058c2 <_malloc_r+0x3e>
 8005d18:	1859      	adds	r1, r3, r1
 8005d1a:	6848      	ldr	r0, [r1, #4]
 8005d1c:	461f      	mov	r7, r3
 8005d1e:	f857 2f08 	ldr.w	r2, [r7, #8]!
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	f040 0001 	orr.w	r0, r0, #1
 8005d28:	6048      	str	r0, [r1, #4]
 8005d2a:	60d3      	str	r3, [r2, #12]
 8005d2c:	609a      	str	r2, [r3, #8]
 8005d2e:	4628      	mov	r0, r5
 8005d30:	f000 f8cc 	bl	8005ecc <__malloc_unlock>
 8005d34:	e5d5      	b.n	80058e2 <_malloc_r+0x5e>
 8005d36:	42b7      	cmp	r7, r6
 8005d38:	f43f aeeb 	beq.w	8005b12 <_malloc_r+0x28e>
 8005d3c:	4b1d      	ldr	r3, [pc, #116]	; (8005db4 <_malloc_r+0x530>)
 8005d3e:	689f      	ldr	r7, [r3, #8]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f023 0303 	bic.w	r3, r3, #3
 8005d46:	e749      	b.n	8005bdc <_malloc_r+0x358>
 8005d48:	1089      	asrs	r1, r1, #2
 8005d4a:	2001      	movs	r0, #1
 8005d4c:	4088      	lsls	r0, r1
 8005d4e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005d52:	4613      	mov	r3, r2
 8005d54:	4301      	orrs	r1, r0
 8005d56:	f8c8 1004 	str.w	r1, [r8, #4]
 8005d5a:	e79d      	b.n	8005c98 <_malloc_r+0x414>
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	f8c9 3004 	str.w	r3, [r9, #4]
 8005d62:	464f      	mov	r7, r9
 8005d64:	2300      	movs	r3, #0
 8005d66:	e739      	b.n	8005bdc <_malloc_r+0x358>
 8005d68:	68b7      	ldr	r7, [r6, #8]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f023 0303 	bic.w	r3, r3, #3
 8005d70:	e734      	b.n	8005bdc <_malloc_r+0x358>
 8005d72:	0511      	lsls	r1, r2, #20
 8005d74:	0d09      	lsrs	r1, r1, #20
 8005d76:	2900      	cmp	r1, #0
 8005d78:	f47f aed3 	bne.w	8005b22 <_malloc_r+0x29e>
 8005d7c:	68b2      	ldr	r2, [r6, #8]
 8005d7e:	eb0b 0108 	add.w	r1, fp, r8
 8005d82:	f041 0101 	orr.w	r1, r1, #1
 8005d86:	6051      	str	r1, [r2, #4]
 8005d88:	e718      	b.n	8005bbc <_malloc_r+0x338>
 8005d8a:	4628      	mov	r0, r5
 8005d8c:	f107 0108 	add.w	r1, r7, #8
 8005d90:	f7ff fc6e 	bl	8005670 <_free_r>
 8005d94:	4b08      	ldr	r3, [pc, #32]	; (8005db8 <_malloc_r+0x534>)
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	e710      	b.n	8005bbc <_malloc_r+0x338>
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f04f 0b00 	mov.w	fp, #0
 8005da0:	e6eb      	b.n	8005b7a <_malloc_r+0x2f6>
 8005da2:	6873      	ldr	r3, [r6, #4]
 8005da4:	ea23 0300 	bic.w	r3, r3, r0
 8005da8:	6073      	str	r3, [r6, #4]
 8005daa:	e7a0      	b.n	8005cee <_malloc_r+0x46a>
 8005dac:	f44f 707c 	mov.w	r0, #1008	; 0x3f0
 8005db0:	217e      	movs	r1, #126	; 0x7e
 8005db2:	e760      	b.n	8005c76 <_malloc_r+0x3f2>
 8005db4:	2000054c 	.word	0x2000054c
 8005db8:	20000970 	.word	0x20000970
 8005dbc:	0040      	lsls	r0, r0, #1
 8005dbe:	f108 0804 	add.w	r8, r8, #4
 8005dc2:	e79b      	b.n	8005cfc <_malloc_r+0x478>

08005dc4 <memchr>:
 8005dc4:	0783      	lsls	r3, r0, #30
 8005dc6:	b470      	push	{r4, r5, r6}
 8005dc8:	b2c9      	uxtb	r1, r1
 8005dca:	d00f      	beq.n	8005dec <memchr+0x28>
 8005dcc:	2a00      	cmp	r2, #0
 8005dce:	d033      	beq.n	8005e38 <memchr+0x74>
 8005dd0:	7803      	ldrb	r3, [r0, #0]
 8005dd2:	3a01      	subs	r2, #1
 8005dd4:	428b      	cmp	r3, r1
 8005dd6:	d106      	bne.n	8005de6 <memchr+0x22>
 8005dd8:	e01d      	b.n	8005e16 <memchr+0x52>
 8005dda:	2a00      	cmp	r2, #0
 8005ddc:	d02c      	beq.n	8005e38 <memchr+0x74>
 8005dde:	7803      	ldrb	r3, [r0, #0]
 8005de0:	3a01      	subs	r2, #1
 8005de2:	428b      	cmp	r3, r1
 8005de4:	d017      	beq.n	8005e16 <memchr+0x52>
 8005de6:	3001      	adds	r0, #1
 8005de8:	0783      	lsls	r3, r0, #30
 8005dea:	d1f6      	bne.n	8005dda <memchr+0x16>
 8005dec:	2a03      	cmp	r2, #3
 8005dee:	bf84      	itt	hi
 8005df0:	ea41 2601 	orrhi.w	r6, r1, r1, lsl #8
 8005df4:	ea46 4606 	orrhi.w	r6, r6, r6, lsl #16
 8005df8:	d80f      	bhi.n	8005e1a <memchr+0x56>
 8005dfa:	b1ea      	cbz	r2, 8005e38 <memchr+0x74>
 8005dfc:	7803      	ldrb	r3, [r0, #0]
 8005dfe:	3a01      	subs	r2, #1
 8005e00:	428b      	cmp	r3, r1
 8005e02:	4402      	add	r2, r0
 8005e04:	d104      	bne.n	8005e10 <memchr+0x4c>
 8005e06:	e006      	b.n	8005e16 <memchr+0x52>
 8005e08:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8005e0c:	428b      	cmp	r3, r1
 8005e0e:	d002      	beq.n	8005e16 <memchr+0x52>
 8005e10:	4290      	cmp	r0, r2
 8005e12:	d1f9      	bne.n	8005e08 <memchr+0x44>
 8005e14:	2000      	movs	r0, #0
 8005e16:	bc70      	pop	{r4, r5, r6}
 8005e18:	4770      	bx	lr
 8005e1a:	6803      	ldr	r3, [r0, #0]
 8005e1c:	4604      	mov	r4, r0
 8005e1e:	4073      	eors	r3, r6
 8005e20:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
 8005e24:	ea25 0303 	bic.w	r3, r5, r3
 8005e28:	3004      	adds	r0, #4
 8005e2a:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 8005e2e:	d105      	bne.n	8005e3c <memchr+0x78>
 8005e30:	3a04      	subs	r2, #4
 8005e32:	2a03      	cmp	r2, #3
 8005e34:	d8f1      	bhi.n	8005e1a <memchr+0x56>
 8005e36:	e7e0      	b.n	8005dfa <memchr+0x36>
 8005e38:	4610      	mov	r0, r2
 8005e3a:	e7ec      	b.n	8005e16 <memchr+0x52>
 8005e3c:	4620      	mov	r0, r4
 8005e3e:	e7dc      	b.n	8005dfa <memchr+0x36>

08005e40 <memcpy>:
 8005e40:	2a0f      	cmp	r2, #15
 8005e42:	b4f0      	push	{r4, r5, r6, r7}
 8005e44:	bf98      	it	ls
 8005e46:	4603      	movls	r3, r0
 8005e48:	d931      	bls.n	8005eae <memcpy+0x6e>
 8005e4a:	ea41 0300 	orr.w	r3, r1, r0
 8005e4e:	079b      	lsls	r3, r3, #30
 8005e50:	d137      	bne.n	8005ec2 <memcpy+0x82>
 8005e52:	460c      	mov	r4, r1
 8005e54:	4603      	mov	r3, r0
 8005e56:	4615      	mov	r5, r2
 8005e58:	6826      	ldr	r6, [r4, #0]
 8005e5a:	3d10      	subs	r5, #16
 8005e5c:	601e      	str	r6, [r3, #0]
 8005e5e:	6866      	ldr	r6, [r4, #4]
 8005e60:	605e      	str	r6, [r3, #4]
 8005e62:	68a6      	ldr	r6, [r4, #8]
 8005e64:	609e      	str	r6, [r3, #8]
 8005e66:	68e6      	ldr	r6, [r4, #12]
 8005e68:	3410      	adds	r4, #16
 8005e6a:	60de      	str	r6, [r3, #12]
 8005e6c:	3310      	adds	r3, #16
 8005e6e:	2d0f      	cmp	r5, #15
 8005e70:	d8f2      	bhi.n	8005e58 <memcpy+0x18>
 8005e72:	f1a2 0410 	sub.w	r4, r2, #16
 8005e76:	f024 040f 	bic.w	r4, r4, #15
 8005e7a:	f002 020f 	and.w	r2, r2, #15
 8005e7e:	3410      	adds	r4, #16
 8005e80:	2a03      	cmp	r2, #3
 8005e82:	eb00 0304 	add.w	r3, r0, r4
 8005e86:	4421      	add	r1, r4
 8005e88:	d911      	bls.n	8005eae <memcpy+0x6e>
 8005e8a:	1f0e      	subs	r6, r1, #4
 8005e8c:	461d      	mov	r5, r3
 8005e8e:	4614      	mov	r4, r2
 8005e90:	f856 7f04 	ldr.w	r7, [r6, #4]!
 8005e94:	3c04      	subs	r4, #4
 8005e96:	2c03      	cmp	r4, #3
 8005e98:	f845 7b04 	str.w	r7, [r5], #4
 8005e9c:	d8f8      	bhi.n	8005e90 <memcpy+0x50>
 8005e9e:	1f14      	subs	r4, r2, #4
 8005ea0:	f024 0403 	bic.w	r4, r4, #3
 8005ea4:	3404      	adds	r4, #4
 8005ea6:	f002 0203 	and.w	r2, r2, #3
 8005eaa:	1909      	adds	r1, r1, r4
 8005eac:	191b      	adds	r3, r3, r4
 8005eae:	b132      	cbz	r2, 8005ebe <memcpy+0x7e>
 8005eb0:	3901      	subs	r1, #1
 8005eb2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005eb6:	3a01      	subs	r2, #1
 8005eb8:	f803 4b01 	strb.w	r4, [r3], #1
 8005ebc:	d1f9      	bne.n	8005eb2 <memcpy+0x72>
 8005ebe:	bcf0      	pop	{r4, r5, r6, r7}
 8005ec0:	4770      	bx	lr
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	e7f4      	b.n	8005eb0 <memcpy+0x70>
 8005ec6:	bf00      	nop

08005ec8 <__malloc_lock>:
 8005ec8:	4770      	bx	lr
 8005eca:	bf00      	nop

08005ecc <__malloc_unlock>:
 8005ecc:	4770      	bx	lr
 8005ece:	bf00      	nop

08005ed0 <_Balloc>:
 8005ed0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8005ed2:	b570      	push	{r4, r5, r6, lr}
 8005ed4:	4605      	mov	r5, r0
 8005ed6:	460c      	mov	r4, r1
 8005ed8:	b14b      	cbz	r3, 8005eee <_Balloc+0x1e>
 8005eda:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8005ede:	b178      	cbz	r0, 8005f00 <_Balloc+0x30>
 8005ee0:	6802      	ldr	r2, [r0, #0]
 8005ee2:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	6103      	str	r3, [r0, #16]
 8005eea:	60c3      	str	r3, [r0, #12]
 8005eec:	bd70      	pop	{r4, r5, r6, pc}
 8005eee:	2104      	movs	r1, #4
 8005ef0:	2221      	movs	r2, #33	; 0x21
 8005ef2:	f001 fa7d 	bl	80073f0 <_calloc_r>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	64e8      	str	r0, [r5, #76]	; 0x4c
 8005efa:	2800      	cmp	r0, #0
 8005efc:	d1ed      	bne.n	8005eda <_Balloc+0xa>
 8005efe:	bd70      	pop	{r4, r5, r6, pc}
 8005f00:	2101      	movs	r1, #1
 8005f02:	fa11 f604 	lsls.w	r6, r1, r4
 8005f06:	1d72      	adds	r2, r6, #5
 8005f08:	4628      	mov	r0, r5
 8005f0a:	0092      	lsls	r2, r2, #2
 8005f0c:	f001 fa70 	bl	80073f0 <_calloc_r>
 8005f10:	2800      	cmp	r0, #0
 8005f12:	d0f4      	beq.n	8005efe <_Balloc+0x2e>
 8005f14:	6044      	str	r4, [r0, #4]
 8005f16:	6086      	str	r6, [r0, #8]
 8005f18:	e7e5      	b.n	8005ee6 <_Balloc+0x16>
 8005f1a:	bf00      	nop

08005f1c <_Bfree>:
 8005f1c:	b131      	cbz	r1, 8005f2c <_Bfree+0x10>
 8005f1e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8005f20:	684a      	ldr	r2, [r1, #4]
 8005f22:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8005f26:	6008      	str	r0, [r1, #0]
 8005f28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005f2c:	4770      	bx	lr
 8005f2e:	bf00      	nop

08005f30 <__multadd>:
 8005f30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f32:	460d      	mov	r5, r1
 8005f34:	690c      	ldr	r4, [r1, #16]
 8005f36:	4606      	mov	r6, r0
 8005f38:	b083      	sub	sp, #12
 8005f3a:	f101 0014 	add.w	r0, r1, #20
 8005f3e:	2100      	movs	r1, #0
 8005f40:	6807      	ldr	r7, [r0, #0]
 8005f42:	3101      	adds	r1, #1
 8005f44:	fa1f fc87 	uxth.w	ip, r7
 8005f48:	0c3f      	lsrs	r7, r7, #16
 8005f4a:	fb02 330c 	mla	r3, r2, ip, r3
 8005f4e:	fb02 fc07 	mul.w	ip, r2, r7
 8005f52:	b29f      	uxth	r7, r3
 8005f54:	eb0c 4313 	add.w	r3, ip, r3, lsr #16
 8005f58:	eb07 4703 	add.w	r7, r7, r3, lsl #16
 8005f5c:	0c1b      	lsrs	r3, r3, #16
 8005f5e:	428c      	cmp	r4, r1
 8005f60:	f840 7b04 	str.w	r7, [r0], #4
 8005f64:	dcec      	bgt.n	8005f40 <__multadd+0x10>
 8005f66:	b13b      	cbz	r3, 8005f78 <__multadd+0x48>
 8005f68:	68aa      	ldr	r2, [r5, #8]
 8005f6a:	4294      	cmp	r4, r2
 8005f6c:	da07      	bge.n	8005f7e <__multadd+0x4e>
 8005f6e:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 8005f72:	3401      	adds	r4, #1
 8005f74:	6153      	str	r3, [r2, #20]
 8005f76:	612c      	str	r4, [r5, #16]
 8005f78:	4628      	mov	r0, r5
 8005f7a:	b003      	add	sp, #12
 8005f7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f7e:	6869      	ldr	r1, [r5, #4]
 8005f80:	4630      	mov	r0, r6
 8005f82:	3101      	adds	r1, #1
 8005f84:	9301      	str	r3, [sp, #4]
 8005f86:	f7ff ffa3 	bl	8005ed0 <_Balloc>
 8005f8a:	692a      	ldr	r2, [r5, #16]
 8005f8c:	f105 010c 	add.w	r1, r5, #12
 8005f90:	3202      	adds	r2, #2
 8005f92:	4607      	mov	r7, r0
 8005f94:	0092      	lsls	r2, r2, #2
 8005f96:	f100 000c 	add.w	r0, r0, #12
 8005f9a:	f7ff ff51 	bl	8005e40 <memcpy>
 8005f9e:	6869      	ldr	r1, [r5, #4]
 8005fa0:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 8005fa2:	9b01      	ldr	r3, [sp, #4]
 8005fa4:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 8005fa8:	6028      	str	r0, [r5, #0]
 8005faa:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 8005fae:	463d      	mov	r5, r7
 8005fb0:	e7dd      	b.n	8005f6e <__multadd+0x3e>
 8005fb2:	bf00      	nop

08005fb4 <__s2b>:
 8005fb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fb8:	461e      	mov	r6, r3
 8005fba:	f648 6339 	movw	r3, #36409	; 0x8e39
 8005fbe:	f106 0408 	add.w	r4, r6, #8
 8005fc2:	f6c3 03e3 	movt	r3, #14563	; 0x38e3
 8005fc6:	fb83 5304 	smull	r5, r3, r3, r4
 8005fca:	17e4      	asrs	r4, r4, #31
 8005fcc:	ebc4 0363 	rsb	r3, r4, r3, asr #1
 8005fd0:	460f      	mov	r7, r1
 8005fd2:	2100      	movs	r1, #0
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	4604      	mov	r4, r0
 8005fd8:	4690      	mov	r8, r2
 8005fda:	dd05      	ble.n	8005fe8 <__s2b+0x34>
 8005fdc:	2201      	movs	r2, #1
 8005fde:	2100      	movs	r1, #0
 8005fe0:	0052      	lsls	r2, r2, #1
 8005fe2:	3101      	adds	r1, #1
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	dcfb      	bgt.n	8005fe0 <__s2b+0x2c>
 8005fe8:	4620      	mov	r0, r4
 8005fea:	f7ff ff71 	bl	8005ed0 <_Balloc>
 8005fee:	9b08      	ldr	r3, [sp, #32]
 8005ff0:	4601      	mov	r1, r0
 8005ff2:	6143      	str	r3, [r0, #20]
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	f1b8 0f09 	cmp.w	r8, #9
 8005ffa:	6103      	str	r3, [r0, #16]
 8005ffc:	dd23      	ble.n	8006046 <__s2b+0x92>
 8005ffe:	f107 0909 	add.w	r9, r7, #9
 8006002:	464d      	mov	r5, r9
 8006004:	4447      	add	r7, r8
 8006006:	f815 3b01 	ldrb.w	r3, [r5], #1
 800600a:	220a      	movs	r2, #10
 800600c:	3b30      	subs	r3, #48	; 0x30
 800600e:	4620      	mov	r0, r4
 8006010:	f7ff ff8e 	bl	8005f30 <__multadd>
 8006014:	42bd      	cmp	r5, r7
 8006016:	4601      	mov	r1, r0
 8006018:	d1f5      	bne.n	8006006 <__s2b+0x52>
 800601a:	eb09 0708 	add.w	r7, r9, r8
 800601e:	3f08      	subs	r7, #8
 8006020:	4546      	cmp	r6, r8
 8006022:	dd0d      	ble.n	8006040 <__s2b+0x8c>
 8006024:	ebc8 0707 	rsb	r7, r8, r7
 8006028:	f817 3008 	ldrb.w	r3, [r7, r8]
 800602c:	220a      	movs	r2, #10
 800602e:	3b30      	subs	r3, #48	; 0x30
 8006030:	4620      	mov	r0, r4
 8006032:	f7ff ff7d 	bl	8005f30 <__multadd>
 8006036:	f108 0801 	add.w	r8, r8, #1
 800603a:	45b0      	cmp	r8, r6
 800603c:	4601      	mov	r1, r0
 800603e:	d1f3      	bne.n	8006028 <__s2b+0x74>
 8006040:	4608      	mov	r0, r1
 8006042:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006046:	370a      	adds	r7, #10
 8006048:	f04f 0809 	mov.w	r8, #9
 800604c:	e7e8      	b.n	8006020 <__s2b+0x6c>
 800604e:	bf00      	nop

08006050 <__hi0bits>:
 8006050:	4603      	mov	r3, r0
 8006052:	2000      	movs	r0, #0
 8006054:	0c1a      	lsrs	r2, r3, #16
 8006056:	d101      	bne.n	800605c <__hi0bits+0xc>
 8006058:	041b      	lsls	r3, r3, #16
 800605a:	2010      	movs	r0, #16
 800605c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006060:	d101      	bne.n	8006066 <__hi0bits+0x16>
 8006062:	3008      	adds	r0, #8
 8006064:	021b      	lsls	r3, r3, #8
 8006066:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800606a:	d101      	bne.n	8006070 <__hi0bits+0x20>
 800606c:	3004      	adds	r0, #4
 800606e:	011b      	lsls	r3, r3, #4
 8006070:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006074:	d101      	bne.n	800607a <__hi0bits+0x2a>
 8006076:	3002      	adds	r0, #2
 8006078:	009b      	lsls	r3, r3, #2
 800607a:	2b00      	cmp	r3, #0
 800607c:	db02      	blt.n	8006084 <__hi0bits+0x34>
 800607e:	005b      	lsls	r3, r3, #1
 8006080:	d401      	bmi.n	8006086 <__hi0bits+0x36>
 8006082:	2020      	movs	r0, #32
 8006084:	4770      	bx	lr
 8006086:	3001      	adds	r0, #1
 8006088:	4770      	bx	lr
 800608a:	bf00      	nop

0800608c <__lo0bits>:
 800608c:	6803      	ldr	r3, [r0, #0]
 800608e:	4602      	mov	r2, r0
 8006090:	f013 0007 	ands.w	r0, r3, #7
 8006094:	d007      	beq.n	80060a6 <__lo0bits+0x1a>
 8006096:	07d9      	lsls	r1, r3, #31
 8006098:	d41f      	bmi.n	80060da <__lo0bits+0x4e>
 800609a:	0798      	lsls	r0, r3, #30
 800609c:	d41f      	bmi.n	80060de <__lo0bits+0x52>
 800609e:	089b      	lsrs	r3, r3, #2
 80060a0:	6013      	str	r3, [r2, #0]
 80060a2:	2002      	movs	r0, #2
 80060a4:	4770      	bx	lr
 80060a6:	b299      	uxth	r1, r3
 80060a8:	b909      	cbnz	r1, 80060ae <__lo0bits+0x22>
 80060aa:	0c1b      	lsrs	r3, r3, #16
 80060ac:	2010      	movs	r0, #16
 80060ae:	f013 0fff 	tst.w	r3, #255	; 0xff
 80060b2:	d101      	bne.n	80060b8 <__lo0bits+0x2c>
 80060b4:	3008      	adds	r0, #8
 80060b6:	0a1b      	lsrs	r3, r3, #8
 80060b8:	0719      	lsls	r1, r3, #28
 80060ba:	d101      	bne.n	80060c0 <__lo0bits+0x34>
 80060bc:	3004      	adds	r0, #4
 80060be:	091b      	lsrs	r3, r3, #4
 80060c0:	0799      	lsls	r1, r3, #30
 80060c2:	d101      	bne.n	80060c8 <__lo0bits+0x3c>
 80060c4:	3002      	adds	r0, #2
 80060c6:	089b      	lsrs	r3, r3, #2
 80060c8:	07d9      	lsls	r1, r3, #31
 80060ca:	d404      	bmi.n	80060d6 <__lo0bits+0x4a>
 80060cc:	085b      	lsrs	r3, r3, #1
 80060ce:	d101      	bne.n	80060d4 <__lo0bits+0x48>
 80060d0:	2020      	movs	r0, #32
 80060d2:	4770      	bx	lr
 80060d4:	3001      	adds	r0, #1
 80060d6:	6013      	str	r3, [r2, #0]
 80060d8:	4770      	bx	lr
 80060da:	2000      	movs	r0, #0
 80060dc:	4770      	bx	lr
 80060de:	085b      	lsrs	r3, r3, #1
 80060e0:	6013      	str	r3, [r2, #0]
 80060e2:	2001      	movs	r0, #1
 80060e4:	4770      	bx	lr
 80060e6:	bf00      	nop

080060e8 <__i2b>:
 80060e8:	b510      	push	{r4, lr}
 80060ea:	460c      	mov	r4, r1
 80060ec:	2101      	movs	r1, #1
 80060ee:	f7ff feef 	bl	8005ed0 <_Balloc>
 80060f2:	2201      	movs	r2, #1
 80060f4:	6144      	str	r4, [r0, #20]
 80060f6:	6102      	str	r2, [r0, #16]
 80060f8:	bd10      	pop	{r4, pc}
 80060fa:	bf00      	nop

080060fc <__multiply>:
 80060fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006100:	690f      	ldr	r7, [r1, #16]
 8006102:	6916      	ldr	r6, [r2, #16]
 8006104:	b085      	sub	sp, #20
 8006106:	42b7      	cmp	r7, r6
 8006108:	460d      	mov	r5, r1
 800610a:	4692      	mov	sl, r2
 800610c:	da04      	bge.n	8006118 <__multiply+0x1c>
 800610e:	463a      	mov	r2, r7
 8006110:	4655      	mov	r5, sl
 8006112:	4637      	mov	r7, r6
 8006114:	468a      	mov	sl, r1
 8006116:	4616      	mov	r6, r2
 8006118:	68ab      	ldr	r3, [r5, #8]
 800611a:	6869      	ldr	r1, [r5, #4]
 800611c:	19bc      	adds	r4, r7, r6
 800611e:	429c      	cmp	r4, r3
 8006120:	bfc8      	it	gt
 8006122:	3101      	addgt	r1, #1
 8006124:	f7ff fed4 	bl	8005ed0 <_Balloc>
 8006128:	1d21      	adds	r1, r4, #4
 800612a:	eb00 0b81 	add.w	fp, r0, r1, lsl #2
 800612e:	f100 0914 	add.w	r9, r0, #20
 8006132:	f10b 0b04 	add.w	fp, fp, #4
 8006136:	45d9      	cmp	r9, fp
 8006138:	9000      	str	r0, [sp, #0]
 800613a:	9101      	str	r1, [sp, #4]
 800613c:	d205      	bcs.n	800614a <__multiply+0x4e>
 800613e:	464b      	mov	r3, r9
 8006140:	2200      	movs	r2, #0
 8006142:	f843 2b04 	str.w	r2, [r3], #4
 8006146:	459b      	cmp	fp, r3
 8006148:	d8fb      	bhi.n	8006142 <__multiply+0x46>
 800614a:	eb0a 0686 	add.w	r6, sl, r6, lsl #2
 800614e:	eb05 0787 	add.w	r7, r5, r7, lsl #2
 8006152:	f10a 0a14 	add.w	sl, sl, #20
 8006156:	f106 0814 	add.w	r8, r6, #20
 800615a:	3514      	adds	r5, #20
 800615c:	3714      	adds	r7, #20
 800615e:	45c2      	cmp	sl, r8
 8006160:	d250      	bcs.n	8006204 <__multiply+0x108>
 8006162:	f8cd b008 	str.w	fp, [sp, #8]
 8006166:	9403      	str	r4, [sp, #12]
 8006168:	46ab      	mov	fp, r5
 800616a:	f85a 5b04 	ldr.w	r5, [sl], #4
 800616e:	b2ac      	uxth	r4, r5
 8006170:	b1ec      	cbz	r4, 80061ae <__multiply+0xb2>
 8006172:	465a      	mov	r2, fp
 8006174:	464b      	mov	r3, r9
 8006176:	2500      	movs	r5, #0
 8006178:	6819      	ldr	r1, [r3, #0]
 800617a:	f852 0b04 	ldr.w	r0, [r2], #4
 800617e:	b28e      	uxth	r6, r1
 8006180:	1975      	adds	r5, r6, r5
 8006182:	0c09      	lsrs	r1, r1, #16
 8006184:	b286      	uxth	r6, r0
 8006186:	0c00      	lsrs	r0, r0, #16
 8006188:	fb04 5506 	mla	r5, r4, r6, r5
 800618c:	fb04 1000 	mla	r0, r4, r0, r1
 8006190:	b2ae      	uxth	r6, r5
 8006192:	eb00 4515 	add.w	r5, r0, r5, lsr #16
 8006196:	ea46 4605 	orr.w	r6, r6, r5, lsl #16
 800619a:	0c2d      	lsrs	r5, r5, #16
 800619c:	4297      	cmp	r7, r2
 800619e:	469c      	mov	ip, r3
 80061a0:	f843 6b04 	str.w	r6, [r3], #4
 80061a4:	d8e8      	bhi.n	8006178 <__multiply+0x7c>
 80061a6:	f8cc 5004 	str.w	r5, [ip, #4]
 80061aa:	f85a 5c04 	ldr.w	r5, [sl, #-4]
 80061ae:	0c2d      	lsrs	r5, r5, #16
 80061b0:	d021      	beq.n	80061f6 <__multiply+0xfa>
 80061b2:	f8d9 6000 	ldr.w	r6, [r9]
 80061b6:	465b      	mov	r3, fp
 80061b8:	4630      	mov	r0, r6
 80061ba:	4649      	mov	r1, r9
 80061bc:	f04f 0c00 	mov.w	ip, #0
 80061c0:	e000      	b.n	80061c4 <__multiply+0xc8>
 80061c2:	4611      	mov	r1, r2
 80061c4:	881a      	ldrh	r2, [r3, #0]
 80061c6:	eb0c 4c10 	add.w	ip, ip, r0, lsr #16
 80061ca:	fb05 cc02 	mla	ip, r5, r2, ip
 80061ce:	b2b6      	uxth	r6, r6
 80061d0:	ea46 460c 	orr.w	r6, r6, ip, lsl #16
 80061d4:	460a      	mov	r2, r1
 80061d6:	f842 6b04 	str.w	r6, [r2], #4
 80061da:	f853 6b04 	ldr.w	r6, [r3], #4
 80061de:	6848      	ldr	r0, [r1, #4]
 80061e0:	0c36      	lsrs	r6, r6, #16
 80061e2:	b284      	uxth	r4, r0
 80061e4:	fb05 4606 	mla	r6, r5, r6, r4
 80061e8:	429f      	cmp	r7, r3
 80061ea:	eb06 461c 	add.w	r6, r6, ip, lsr #16
 80061ee:	ea4f 4c16 	mov.w	ip, r6, lsr #16
 80061f2:	d8e6      	bhi.n	80061c2 <__multiply+0xc6>
 80061f4:	604e      	str	r6, [r1, #4]
 80061f6:	45d0      	cmp	r8, sl
 80061f8:	f109 0904 	add.w	r9, r9, #4
 80061fc:	d8b5      	bhi.n	800616a <__multiply+0x6e>
 80061fe:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006202:	9c03      	ldr	r4, [sp, #12]
 8006204:	2c00      	cmp	r4, #0
 8006206:	dd0c      	ble.n	8006222 <__multiply+0x126>
 8006208:	e89d 0006 	ldmia.w	sp, {r1, r2}
 800620c:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 8006210:	b93b      	cbnz	r3, 8006222 <__multiply+0x126>
 8006212:	f1ab 0b04 	sub.w	fp, fp, #4
 8006216:	e002      	b.n	800621e <__multiply+0x122>
 8006218:	f85b 3d04 	ldr.w	r3, [fp, #-4]!
 800621c:	b90b      	cbnz	r3, 8006222 <__multiply+0x126>
 800621e:	3c01      	subs	r4, #1
 8006220:	d1fa      	bne.n	8006218 <__multiply+0x11c>
 8006222:	9a00      	ldr	r2, [sp, #0]
 8006224:	6114      	str	r4, [r2, #16]
 8006226:	4610      	mov	r0, r2
 8006228:	b005      	add	sp, #20
 800622a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800622e:	bf00      	nop

08006230 <__pow5mult>:
 8006230:	f012 0303 	ands.w	r3, r2, #3
 8006234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006238:	4615      	mov	r5, r2
 800623a:	4604      	mov	r4, r0
 800623c:	4688      	mov	r8, r1
 800623e:	d12d      	bne.n	800629c <__pow5mult+0x6c>
 8006240:	10ad      	asrs	r5, r5, #2
 8006242:	d01d      	beq.n	8006280 <__pow5mult+0x50>
 8006244:	6ca7      	ldr	r7, [r4, #72]	; 0x48
 8006246:	b92f      	cbnz	r7, 8006254 <__pow5mult+0x24>
 8006248:	e031      	b.n	80062ae <__pow5mult+0x7e>
 800624a:	106d      	asrs	r5, r5, #1
 800624c:	d018      	beq.n	8006280 <__pow5mult+0x50>
 800624e:	683e      	ldr	r6, [r7, #0]
 8006250:	b1ce      	cbz	r6, 8006286 <__pow5mult+0x56>
 8006252:	4637      	mov	r7, r6
 8006254:	07e8      	lsls	r0, r5, #31
 8006256:	d5f8      	bpl.n	800624a <__pow5mult+0x1a>
 8006258:	4641      	mov	r1, r8
 800625a:	463a      	mov	r2, r7
 800625c:	4620      	mov	r0, r4
 800625e:	f7ff ff4d 	bl	80060fc <__multiply>
 8006262:	f1b8 0f00 	cmp.w	r8, #0
 8006266:	d017      	beq.n	8006298 <__pow5mult+0x68>
 8006268:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800626c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800626e:	106d      	asrs	r5, r5, #1
 8006270:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006274:	f8c8 1000 	str.w	r1, [r8]
 8006278:	f843 8022 	str.w	r8, [r3, r2, lsl #2]
 800627c:	4680      	mov	r8, r0
 800627e:	d1e6      	bne.n	800624e <__pow5mult+0x1e>
 8006280:	4640      	mov	r0, r8
 8006282:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006286:	4639      	mov	r1, r7
 8006288:	463a      	mov	r2, r7
 800628a:	4620      	mov	r0, r4
 800628c:	f7ff ff36 	bl	80060fc <__multiply>
 8006290:	6038      	str	r0, [r7, #0]
 8006292:	6006      	str	r6, [r0, #0]
 8006294:	4607      	mov	r7, r0
 8006296:	e7dd      	b.n	8006254 <__pow5mult+0x24>
 8006298:	4680      	mov	r8, r0
 800629a:	e7d6      	b.n	800624a <__pow5mult+0x1a>
 800629c:	4a09      	ldr	r2, [pc, #36]	; (80062c4 <__pow5mult+0x94>)
 800629e:	3b01      	subs	r3, #1
 80062a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80062a4:	2300      	movs	r3, #0
 80062a6:	f7ff fe43 	bl	8005f30 <__multadd>
 80062aa:	4680      	mov	r8, r0
 80062ac:	e7c8      	b.n	8006240 <__pow5mult+0x10>
 80062ae:	4620      	mov	r0, r4
 80062b0:	f240 2171 	movw	r1, #625	; 0x271
 80062b4:	f7ff ff18 	bl	80060e8 <__i2b>
 80062b8:	2300      	movs	r3, #0
 80062ba:	64a0      	str	r0, [r4, #72]	; 0x48
 80062bc:	4607      	mov	r7, r0
 80062be:	6003      	str	r3, [r0, #0]
 80062c0:	e7c8      	b.n	8006254 <__pow5mult+0x24>
 80062c2:	bf00      	nop
 80062c4:	08008660 	.word	0x08008660

080062c8 <__lshift>:
 80062c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062cc:	690b      	ldr	r3, [r1, #16]
 80062ce:	ea4f 1762 	mov.w	r7, r2, asr #5
 80062d2:	eb07 0b03 	add.w	fp, r7, r3
 80062d6:	688b      	ldr	r3, [r1, #8]
 80062d8:	f10b 0501 	add.w	r5, fp, #1
 80062dc:	429d      	cmp	r5, r3
 80062de:	460c      	mov	r4, r1
 80062e0:	4691      	mov	r9, r2
 80062e2:	4606      	mov	r6, r0
 80062e4:	6849      	ldr	r1, [r1, #4]
 80062e6:	dd03      	ble.n	80062f0 <__lshift+0x28>
 80062e8:	005b      	lsls	r3, r3, #1
 80062ea:	3101      	adds	r1, #1
 80062ec:	429d      	cmp	r5, r3
 80062ee:	dcfb      	bgt.n	80062e8 <__lshift+0x20>
 80062f0:	4630      	mov	r0, r6
 80062f2:	f7ff fded 	bl	8005ed0 <_Balloc>
 80062f6:	2f00      	cmp	r7, #0
 80062f8:	f100 0314 	add.w	r3, r0, #20
 80062fc:	dd09      	ble.n	8006312 <__lshift+0x4a>
 80062fe:	2200      	movs	r2, #0
 8006300:	4611      	mov	r1, r2
 8006302:	3201      	adds	r2, #1
 8006304:	42ba      	cmp	r2, r7
 8006306:	f843 1b04 	str.w	r1, [r3], #4
 800630a:	d1fa      	bne.n	8006302 <__lshift+0x3a>
 800630c:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 8006310:	3314      	adds	r3, #20
 8006312:	6922      	ldr	r2, [r4, #16]
 8006314:	f019 091f 	ands.w	r9, r9, #31
 8006318:	eb04 0c82 	add.w	ip, r4, r2, lsl #2
 800631c:	f104 0114 	add.w	r1, r4, #20
 8006320:	f10c 0c14 	add.w	ip, ip, #20
 8006324:	d022      	beq.n	800636c <__lshift+0xa4>
 8006326:	f1c9 0a20 	rsb	sl, r9, #32
 800632a:	2200      	movs	r2, #0
 800632c:	e000      	b.n	8006330 <__lshift+0x68>
 800632e:	463b      	mov	r3, r7
 8006330:	f8d1 8000 	ldr.w	r8, [r1]
 8006334:	461f      	mov	r7, r3
 8006336:	fa08 f809 	lsl.w	r8, r8, r9
 800633a:	ea48 0202 	orr.w	r2, r8, r2
 800633e:	f847 2b04 	str.w	r2, [r7], #4
 8006342:	f851 2b04 	ldr.w	r2, [r1], #4
 8006346:	458c      	cmp	ip, r1
 8006348:	fa22 f20a 	lsr.w	r2, r2, sl
 800634c:	d8ef      	bhi.n	800632e <__lshift+0x66>
 800634e:	605a      	str	r2, [r3, #4]
 8006350:	b10a      	cbz	r2, 8006356 <__lshift+0x8e>
 8006352:	f10b 0502 	add.w	r5, fp, #2
 8006356:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 8006358:	6862      	ldr	r2, [r4, #4]
 800635a:	3d01      	subs	r5, #1
 800635c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006360:	6105      	str	r5, [r0, #16]
 8006362:	6021      	str	r1, [r4, #0]
 8006364:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006368:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800636c:	f851 2b04 	ldr.w	r2, [r1], #4
 8006370:	458c      	cmp	ip, r1
 8006372:	f843 2b04 	str.w	r2, [r3], #4
 8006376:	d9ee      	bls.n	8006356 <__lshift+0x8e>
 8006378:	f851 2b04 	ldr.w	r2, [r1], #4
 800637c:	458c      	cmp	ip, r1
 800637e:	f843 2b04 	str.w	r2, [r3], #4
 8006382:	d8f3      	bhi.n	800636c <__lshift+0xa4>
 8006384:	e7e7      	b.n	8006356 <__lshift+0x8e>
 8006386:	bf00      	nop

08006388 <__mcmp>:
 8006388:	4603      	mov	r3, r0
 800638a:	690a      	ldr	r2, [r1, #16]
 800638c:	6900      	ldr	r0, [r0, #16]
 800638e:	b430      	push	{r4, r5}
 8006390:	1a80      	subs	r0, r0, r2
 8006392:	d111      	bne.n	80063b8 <__mcmp+0x30>
 8006394:	3204      	adds	r2, #4
 8006396:	0094      	lsls	r4, r2, #2
 8006398:	191a      	adds	r2, r3, r4
 800639a:	1909      	adds	r1, r1, r4
 800639c:	3314      	adds	r3, #20
 800639e:	3204      	adds	r2, #4
 80063a0:	3104      	adds	r1, #4
 80063a2:	f852 5c04 	ldr.w	r5, [r2, #-4]
 80063a6:	f851 4c04 	ldr.w	r4, [r1, #-4]
 80063aa:	3a04      	subs	r2, #4
 80063ac:	42a5      	cmp	r5, r4
 80063ae:	f1a1 0104 	sub.w	r1, r1, #4
 80063b2:	d103      	bne.n	80063bc <__mcmp+0x34>
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d3f4      	bcc.n	80063a2 <__mcmp+0x1a>
 80063b8:	bc30      	pop	{r4, r5}
 80063ba:	4770      	bx	lr
 80063bc:	bf38      	it	cc
 80063be:	f04f 30ff 	movcc.w	r0, #4294967295	; 0xffffffff
 80063c2:	d3f9      	bcc.n	80063b8 <__mcmp+0x30>
 80063c4:	2001      	movs	r0, #1
 80063c6:	e7f7      	b.n	80063b8 <__mcmp+0x30>

080063c8 <__mdiff>:
 80063c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063cc:	460c      	mov	r4, r1
 80063ce:	4606      	mov	r6, r0
 80063d0:	4611      	mov	r1, r2
 80063d2:	4620      	mov	r0, r4
 80063d4:	4615      	mov	r5, r2
 80063d6:	f7ff ffd7 	bl	8006388 <__mcmp>
 80063da:	1e07      	subs	r7, r0, #0
 80063dc:	d059      	beq.n	8006492 <__mdiff+0xca>
 80063de:	db53      	blt.n	8006488 <__mdiff+0xc0>
 80063e0:	2700      	movs	r7, #0
 80063e2:	4630      	mov	r0, r6
 80063e4:	6861      	ldr	r1, [r4, #4]
 80063e6:	f7ff fd73 	bl	8005ed0 <_Balloc>
 80063ea:	f8d4 c010 	ldr.w	ip, [r4, #16]
 80063ee:	692a      	ldr	r2, [r5, #16]
 80063f0:	eb04 038c 	add.w	r3, r4, ip, lsl #2
 80063f4:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 80063f8:	60c7      	str	r7, [r0, #12]
 80063fa:	f108 0814 	add.w	r8, r8, #20
 80063fe:	f103 0714 	add.w	r7, r3, #20
 8006402:	3414      	adds	r4, #20
 8006404:	3514      	adds	r5, #20
 8006406:	f100 0914 	add.w	r9, r0, #20
 800640a:	2600      	movs	r6, #0
 800640c:	f854 3b04 	ldr.w	r3, [r4], #4
 8006410:	f855 2b04 	ldr.w	r2, [r5], #4
 8006414:	b299      	uxth	r1, r3
 8006416:	1989      	adds	r1, r1, r6
 8006418:	fa1f fa82 	uxth.w	sl, r2
 800641c:	0c12      	lsrs	r2, r2, #16
 800641e:	ebc2 4613 	rsb	r6, r2, r3, lsr #16
 8006422:	ebca 0101 	rsb	r1, sl, r1
 8006426:	eb06 4621 	add.w	r6, r6, r1, asr #16
 800642a:	b289      	uxth	r1, r1
 800642c:	464b      	mov	r3, r9
 800642e:	ea41 4106 	orr.w	r1, r1, r6, lsl #16
 8006432:	f843 1b04 	str.w	r1, [r3], #4
 8006436:	1436      	asrs	r6, r6, #16
 8006438:	45a8      	cmp	r8, r5
 800643a:	4622      	mov	r2, r4
 800643c:	4699      	mov	r9, r3
 800643e:	d8e5      	bhi.n	800640c <__mdiff+0x44>
 8006440:	42a7      	cmp	r7, r4
 8006442:	4698      	mov	r8, r3
 8006444:	d914      	bls.n	8006470 <__mdiff+0xa8>
 8006446:	f852 5b04 	ldr.w	r5, [r2], #4
 800644a:	b2a9      	uxth	r1, r5
 800644c:	198e      	adds	r6, r1, r6
 800644e:	0c2d      	lsrs	r5, r5, #16
 8006450:	eb05 4526 	add.w	r5, r5, r6, asr #16
 8006454:	b2b6      	uxth	r6, r6
 8006456:	ea46 4105 	orr.w	r1, r6, r5, lsl #16
 800645a:	142e      	asrs	r6, r5, #16
 800645c:	4297      	cmp	r7, r2
 800645e:	f843 1b04 	str.w	r1, [r3], #4
 8006462:	d8f0      	bhi.n	8006446 <__mdiff+0x7e>
 8006464:	43e3      	mvns	r3, r4
 8006466:	19db      	adds	r3, r3, r7
 8006468:	f023 0303 	bic.w	r3, r3, #3
 800646c:	3304      	adds	r3, #4
 800646e:	4443      	add	r3, r8
 8006470:	b931      	cbnz	r1, 8006480 <__mdiff+0xb8>
 8006472:	3b04      	subs	r3, #4
 8006474:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006478:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800647c:	2a00      	cmp	r2, #0
 800647e:	d0f9      	beq.n	8006474 <__mdiff+0xac>
 8006480:	f8c0 c010 	str.w	ip, [r0, #16]
 8006484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006488:	4623      	mov	r3, r4
 800648a:	2701      	movs	r7, #1
 800648c:	462c      	mov	r4, r5
 800648e:	461d      	mov	r5, r3
 8006490:	e7a7      	b.n	80063e2 <__mdiff+0x1a>
 8006492:	4630      	mov	r0, r6
 8006494:	4639      	mov	r1, r7
 8006496:	f7ff fd1b 	bl	8005ed0 <_Balloc>
 800649a:	2301      	movs	r3, #1
 800649c:	6103      	str	r3, [r0, #16]
 800649e:	6147      	str	r7, [r0, #20]
 80064a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080064a4 <__ulp>:
 80064a4:	2300      	movs	r3, #0
 80064a6:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 80064aa:	400b      	ands	r3, r1
 80064ac:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	dd02      	ble.n	80064ba <__ulp+0x16>
 80064b4:	4619      	mov	r1, r3
 80064b6:	2000      	movs	r0, #0
 80064b8:	4770      	bx	lr
 80064ba:	425b      	negs	r3, r3
 80064bc:	151b      	asrs	r3, r3, #20
 80064be:	2100      	movs	r1, #0
 80064c0:	2b13      	cmp	r3, #19
 80064c2:	dd0b      	ble.n	80064dc <__ulp+0x38>
 80064c4:	2b32      	cmp	r3, #50	; 0x32
 80064c6:	dd02      	ble.n	80064ce <__ulp+0x2a>
 80064c8:	2301      	movs	r3, #1
 80064ca:	4618      	mov	r0, r3
 80064cc:	4770      	bx	lr
 80064ce:	2201      	movs	r2, #1
 80064d0:	f1c3 0333 	rsb	r3, r3, #51	; 0x33
 80064d4:	fa12 f303 	lsls.w	r3, r2, r3
 80064d8:	4618      	mov	r0, r3
 80064da:	4770      	bx	lr
 80064dc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80064e0:	fa52 f103 	asrs.w	r1, r2, r3
 80064e4:	2000      	movs	r0, #0
 80064e6:	4770      	bx	lr

080064e8 <__b2d>:
 80064e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ea:	6904      	ldr	r4, [r0, #16]
 80064ec:	4603      	mov	r3, r0
 80064ee:	3404      	adds	r4, #4
 80064f0:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
 80064f4:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 80064f8:	4628      	mov	r0, r5
 80064fa:	460f      	mov	r7, r1
 80064fc:	f103 0614 	add.w	r6, r3, #20
 8006500:	f7ff fda6 	bl	8006050 <__hi0bits>
 8006504:	f1c0 0320 	rsb	r3, r0, #32
 8006508:	280a      	cmp	r0, #10
 800650a:	603b      	str	r3, [r7, #0]
 800650c:	4623      	mov	r3, r4
 800650e:	dc14      	bgt.n	800653a <__b2d+0x52>
 8006510:	f1c0 010b 	rsb	r1, r0, #11
 8006514:	fa35 f701 	lsrs.w	r7, r5, r1
 8006518:	42a6      	cmp	r6, r4
 800651a:	f047 577f 	orr.w	r7, r7, #1069547520	; 0x3fc00000
 800651e:	f447 1340 	orr.w	r3, r7, #3145728	; 0x300000
 8006522:	d22e      	bcs.n	8006582 <__b2d+0x9a>
 8006524:	f854 4c04 	ldr.w	r4, [r4, #-4]
 8006528:	fa34 f101 	lsrs.w	r1, r4, r1
 800652c:	3015      	adds	r0, #21
 800652e:	4085      	lsls	r5, r0
 8006530:	ea41 0205 	orr.w	r2, r1, r5
 8006534:	4610      	mov	r0, r2
 8006536:	4619      	mov	r1, r3
 8006538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800653a:	2100      	movs	r1, #0
 800653c:	42a6      	cmp	r6, r4
 800653e:	d202      	bcs.n	8006546 <__b2d+0x5e>
 8006540:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8006544:	3c04      	subs	r4, #4
 8006546:	f1b0 070b 	subs.w	r7, r0, #11
 800654a:	bf02      	ittt	eq
 800654c:	f045 557f 	orreq.w	r5, r5, #1069547520	; 0x3fc00000
 8006550:	f445 1340 	orreq.w	r3, r5, #3145728	; 0x300000
 8006554:	460a      	moveq	r2, r1
 8006556:	d0ed      	beq.n	8006534 <__b2d+0x4c>
 8006558:	40bd      	lsls	r5, r7
 800655a:	f1c0 002b 	rsb	r0, r0, #43	; 0x2b
 800655e:	fa21 fc00 	lsr.w	ip, r1, r0
 8006562:	f045 557f 	orr.w	r5, r5, #1069547520	; 0x3fc00000
 8006566:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800656a:	42b4      	cmp	r4, r6
 800656c:	ea45 030c 	orr.w	r3, r5, ip
 8006570:	d909      	bls.n	8006586 <__b2d+0x9e>
 8006572:	f854 4c04 	ldr.w	r4, [r4, #-4]
 8006576:	fa34 f000 	lsrs.w	r0, r4, r0
 800657a:	40b9      	lsls	r1, r7
 800657c:	ea40 0201 	orr.w	r2, r0, r1
 8006580:	e7d8      	b.n	8006534 <__b2d+0x4c>
 8006582:	2100      	movs	r1, #0
 8006584:	e7d2      	b.n	800652c <__b2d+0x44>
 8006586:	2000      	movs	r0, #0
 8006588:	e7f7      	b.n	800657a <__b2d+0x92>
 800658a:	bf00      	nop

0800658c <__d2b>:
 800658c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006590:	2101      	movs	r1, #1
 8006592:	b083      	sub	sp, #12
 8006594:	461d      	mov	r5, r3
 8006596:	4614      	mov	r4, r2
 8006598:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800659a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800659c:	f7ff fc98 	bl	8005ed0 <_Balloc>
 80065a0:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
 80065a4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80065a8:	f3c5 590a 	ubfx	r9, r5, #20, #11
 80065ac:	4680      	mov	r8, r0
 80065ae:	9301      	str	r3, [sp, #4]
 80065b0:	f1b9 0f00 	cmp.w	r9, #0
 80065b4:	d002      	beq.n	80065bc <__d2b+0x30>
 80065b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80065ba:	9301      	str	r3, [sp, #4]
 80065bc:	2c00      	cmp	r4, #0
 80065be:	d025      	beq.n	800660c <__d2b+0x80>
 80065c0:	a802      	add	r0, sp, #8
 80065c2:	f840 4d08 	str.w	r4, [r0, #-8]!
 80065c6:	4668      	mov	r0, sp
 80065c8:	f7ff fd60 	bl	800608c <__lo0bits>
 80065cc:	9b01      	ldr	r3, [sp, #4]
 80065ce:	2800      	cmp	r0, #0
 80065d0:	d132      	bne.n	8006638 <__d2b+0xac>
 80065d2:	9a00      	ldr	r2, [sp, #0]
 80065d4:	f8c8 2014 	str.w	r2, [r8, #20]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	bf0c      	ite	eq
 80065dc:	2401      	moveq	r4, #1
 80065de:	2402      	movne	r4, #2
 80065e0:	f8c8 3018 	str.w	r3, [r8, #24]
 80065e4:	f8c8 4010 	str.w	r4, [r8, #16]
 80065e8:	f1b9 0f00 	cmp.w	r9, #0
 80065ec:	d11b      	bne.n	8006626 <__d2b+0x9a>
 80065ee:	f2a0 4332 	subw	r3, r0, #1074	; 0x432
 80065f2:	eb08 0284 	add.w	r2, r8, r4, lsl #2
 80065f6:	6910      	ldr	r0, [r2, #16]
 80065f8:	603b      	str	r3, [r7, #0]
 80065fa:	f7ff fd29 	bl	8006050 <__hi0bits>
 80065fe:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 8006602:	6030      	str	r0, [r6, #0]
 8006604:	4640      	mov	r0, r8
 8006606:	b003      	add	sp, #12
 8006608:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800660c:	a801      	add	r0, sp, #4
 800660e:	f7ff fd3d 	bl	800608c <__lo0bits>
 8006612:	9b01      	ldr	r3, [sp, #4]
 8006614:	2401      	movs	r4, #1
 8006616:	f8c8 3014 	str.w	r3, [r8, #20]
 800661a:	f8c8 4010 	str.w	r4, [r8, #16]
 800661e:	3020      	adds	r0, #32
 8006620:	f1b9 0f00 	cmp.w	r9, #0
 8006624:	d0e3      	beq.n	80065ee <__d2b+0x62>
 8006626:	f2a9 4933 	subw	r9, r9, #1075	; 0x433
 800662a:	eb09 0300 	add.w	r3, r9, r0
 800662e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006632:	603b      	str	r3, [r7, #0]
 8006634:	6030      	str	r0, [r6, #0]
 8006636:	e7e5      	b.n	8006604 <__d2b+0x78>
 8006638:	f1c0 0220 	rsb	r2, r0, #32
 800663c:	fa13 f202 	lsls.w	r2, r3, r2
 8006640:	40c3      	lsrs	r3, r0
 8006642:	9900      	ldr	r1, [sp, #0]
 8006644:	9301      	str	r3, [sp, #4]
 8006646:	430a      	orrs	r2, r1
 8006648:	f8c8 2014 	str.w	r2, [r8, #20]
 800664c:	e7c4      	b.n	80065d8 <__d2b+0x4c>
 800664e:	bf00      	nop

08006650 <__ratio>:
 8006650:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006654:	b083      	sub	sp, #12
 8006656:	460d      	mov	r5, r1
 8006658:	4669      	mov	r1, sp
 800665a:	4604      	mov	r4, r0
 800665c:	f7ff ff44 	bl	80064e8 <__b2d>
 8006660:	4689      	mov	r9, r1
 8006662:	4680      	mov	r8, r0
 8006664:	a901      	add	r1, sp, #4
 8006666:	4628      	mov	r0, r5
 8006668:	f7ff ff3e 	bl	80064e8 <__b2d>
 800666c:	692a      	ldr	r2, [r5, #16]
 800666e:	6924      	ldr	r4, [r4, #16]
 8006670:	460f      	mov	r7, r1
 8006672:	1aa4      	subs	r4, r4, r2
 8006674:	e89d 000a 	ldmia.w	sp, {r1, r3}
 8006678:	1acb      	subs	r3, r1, r3
 800667a:	eb03 1444 	add.w	r4, r3, r4, lsl #5
 800667e:	2c00      	cmp	r4, #0
 8006680:	4606      	mov	r6, r0
 8006682:	464b      	mov	r3, r9
 8006684:	4639      	mov	r1, r7
 8006686:	bfcb      	itete	gt
 8006688:	eb09 5304 	addgt.w	r3, r9, r4, lsl #20
 800668c:	eba7 5104 	suble.w	r1, r7, r4, lsl #20
 8006690:	4699      	movgt	r9, r3
 8006692:	460f      	movle	r7, r1
 8006694:	bfcc      	ite	gt
 8006696:	46c0      	nopgt			; (mov r8, r8)
 8006698:	4636      	movle	r6, r6
 800669a:	4640      	mov	r0, r8
 800669c:	4649      	mov	r1, r9
 800669e:	4632      	mov	r2, r6
 80066a0:	463b      	mov	r3, r7
 80066a2:	f001 fc5f 	bl	8007f64 <__aeabi_ddiv>
 80066a6:	b003      	add	sp, #12
 80066a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080066ac <_mprec_log10>:
 80066ac:	b510      	push	{r4, lr}
 80066ae:	4604      	mov	r4, r0
 80066b0:	2100      	movs	r1, #0
 80066b2:	2000      	movs	r0, #0
 80066b4:	2c17      	cmp	r4, #23
 80066b6:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 80066ba:	dd08      	ble.n	80066ce <_mprec_log10+0x22>
 80066bc:	2300      	movs	r3, #0
 80066be:	2200      	movs	r2, #0
 80066c0:	f2c4 0324 	movt	r3, #16420	; 0x4024
 80066c4:	f001 fb24 	bl	8007d10 <__aeabi_dmul>
 80066c8:	3c01      	subs	r4, #1
 80066ca:	d1f7      	bne.n	80066bc <_mprec_log10+0x10>
 80066cc:	bd10      	pop	{r4, pc}
 80066ce:	4b03      	ldr	r3, [pc, #12]	; (80066dc <_mprec_log10+0x30>)
 80066d0:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80066d4:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 80066d8:	bd10      	pop	{r4, pc}
 80066da:	bf00      	nop
 80066dc:	08008660 	.word	0x08008660

080066e0 <__copybits>:
 80066e0:	6913      	ldr	r3, [r2, #16]
 80066e2:	3901      	subs	r1, #1
 80066e4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80066e8:	1149      	asrs	r1, r1, #5
 80066ea:	b470      	push	{r4, r5, r6}
 80066ec:	3314      	adds	r3, #20
 80066ee:	f102 0414 	add.w	r4, r2, #20
 80066f2:	3101      	adds	r1, #1
 80066f4:	429c      	cmp	r4, r3
 80066f6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80066fa:	d20c      	bcs.n	8006716 <__copybits+0x36>
 80066fc:	4605      	mov	r5, r0
 80066fe:	f854 6b04 	ldr.w	r6, [r4], #4
 8006702:	42a3      	cmp	r3, r4
 8006704:	f845 6b04 	str.w	r6, [r5], #4
 8006708:	d8f9      	bhi.n	80066fe <__copybits+0x1e>
 800670a:	1a9b      	subs	r3, r3, r2
 800670c:	3b15      	subs	r3, #21
 800670e:	f023 0303 	bic.w	r3, r3, #3
 8006712:	3304      	adds	r3, #4
 8006714:	18c0      	adds	r0, r0, r3
 8006716:	4281      	cmp	r1, r0
 8006718:	d904      	bls.n	8006724 <__copybits+0x44>
 800671a:	2300      	movs	r3, #0
 800671c:	f840 3b04 	str.w	r3, [r0], #4
 8006720:	4281      	cmp	r1, r0
 8006722:	d8fb      	bhi.n	800671c <__copybits+0x3c>
 8006724:	bc70      	pop	{r4, r5, r6}
 8006726:	4770      	bx	lr

08006728 <__any_on>:
 8006728:	6902      	ldr	r2, [r0, #16]
 800672a:	114b      	asrs	r3, r1, #5
 800672c:	429a      	cmp	r2, r3
 800672e:	b410      	push	{r4}
 8006730:	db01      	blt.n	8006736 <__any_on+0xe>
 8006732:	461a      	mov	r2, r3
 8006734:	dc13      	bgt.n	800675e <__any_on+0x36>
 8006736:	3204      	adds	r2, #4
 8006738:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 800673c:	f100 0114 	add.w	r1, r0, #20
 8006740:	1d1c      	adds	r4, r3, #4
 8006742:	42a1      	cmp	r1, r4
 8006744:	d218      	bcs.n	8006778 <__any_on+0x50>
 8006746:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800674a:	b92a      	cbnz	r2, 8006758 <__any_on+0x30>
 800674c:	4299      	cmp	r1, r3
 800674e:	d213      	bcs.n	8006778 <__any_on+0x50>
 8006750:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006754:	2a00      	cmp	r2, #0
 8006756:	d0f9      	beq.n	800674c <__any_on+0x24>
 8006758:	2001      	movs	r0, #1
 800675a:	bc10      	pop	{r4}
 800675c:	4770      	bx	lr
 800675e:	f011 011f 	ands.w	r1, r1, #31
 8006762:	d0e8      	beq.n	8006736 <__any_on+0xe>
 8006764:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8006768:	695b      	ldr	r3, [r3, #20]
 800676a:	fa33 f401 	lsrs.w	r4, r3, r1
 800676e:	fa14 f101 	lsls.w	r1, r4, r1
 8006772:	4299      	cmp	r1, r3
 8006774:	d1f0      	bne.n	8006758 <__any_on+0x30>
 8006776:	e7de      	b.n	8006736 <__any_on+0xe>
 8006778:	2000      	movs	r0, #0
 800677a:	e7ee      	b.n	800675a <__any_on+0x32>

0800677c <__fpclassifyd>:
 800677c:	ea50 0201 	orrs.w	r2, r0, r1
 8006780:	b410      	push	{r4}
 8006782:	460b      	mov	r3, r1
 8006784:	d102      	bne.n	800678c <__fpclassifyd+0x10>
 8006786:	2002      	movs	r0, #2
 8006788:	bc10      	pop	{r4}
 800678a:	4770      	bx	lr
 800678c:	f1d0 0101 	rsbs	r1, r0, #1
 8006790:	bf38      	it	cc
 8006792:	2100      	movcc	r1, #0
 8006794:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006798:	bf08      	it	eq
 800679a:	2800      	cmpeq	r0, #0
 800679c:	d0f3      	beq.n	8006786 <__fpclassifyd+0xa>
 800679e:	f103 44ff 	add.w	r4, r3, #2139095040	; 0x7f800000
 80067a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80067a6:	f504 04e0 	add.w	r4, r4, #7340032	; 0x700000
 80067aa:	f6c7 72df 	movt	r2, #32735	; 0x7fdf
 80067ae:	f5a3 1080 	sub.w	r0, r3, #1048576	; 0x100000
 80067b2:	4290      	cmp	r0, r2
 80067b4:	bf88      	it	hi
 80067b6:	4294      	cmphi	r4, r2
 80067b8:	d801      	bhi.n	80067be <__fpclassifyd+0x42>
 80067ba:	2004      	movs	r0, #4
 80067bc:	e7e4      	b.n	8006788 <__fpclassifyd+0xc>
 80067be:	f103 4200 	add.w	r2, r3, #2147483648	; 0x80000000
 80067c2:	2003      	movs	r0, #3
 80067c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067c8:	bf28      	it	cs
 80067ca:	f5b2 1f80 	cmpcs.w	r2, #1048576	; 0x100000
 80067ce:	d3db      	bcc.n	8006788 <__fpclassifyd+0xc>
 80067d0:	2200      	movs	r2, #0
 80067d2:	f6c7 72f0 	movt	r2, #32752	; 0x7ff0
 80067d6:	f513 1f80 	cmn.w	r3, #1048576	; 0x100000
 80067da:	bf18      	it	ne
 80067dc:	4293      	cmpne	r3, r2
 80067de:	bf14      	ite	ne
 80067e0:	2300      	movne	r3, #0
 80067e2:	2301      	moveq	r3, #1
 80067e4:	ea01 0003 	and.w	r0, r1, r3
 80067e8:	e7ce      	b.n	8006788 <__fpclassifyd+0xc>
 80067ea:	bf00      	nop

080067ec <_sbrk_r>:
 80067ec:	b538      	push	{r3, r4, r5, lr}
 80067ee:	4c07      	ldr	r4, [pc, #28]	; (800680c <_sbrk_r+0x20>)
 80067f0:	2300      	movs	r3, #0
 80067f2:	4605      	mov	r5, r0
 80067f4:	4608      	mov	r0, r1
 80067f6:	6023      	str	r3, [r4, #0]
 80067f8:	f7fc fc28 	bl	800304c <_sbrk>
 80067fc:	1c43      	adds	r3, r0, #1
 80067fe:	d000      	beq.n	8006802 <_sbrk_r+0x16>
 8006800:	bd38      	pop	{r3, r4, r5, pc}
 8006802:	6823      	ldr	r3, [r4, #0]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d0fb      	beq.n	8006800 <_sbrk_r+0x14>
 8006808:	602b      	str	r3, [r5, #0]
 800680a:	bd38      	pop	{r3, r4, r5, pc}
 800680c:	2000168c 	.word	0x2000168c

08006810 <strcmp>:
 8006810:	ea80 0201 	eor.w	r2, r0, r1
 8006814:	f012 0f03 	tst.w	r2, #3
 8006818:	d13a      	bne.n	8006890 <strcmp_unaligned>
 800681a:	f010 0203 	ands.w	r2, r0, #3
 800681e:	f020 0003 	bic.w	r0, r0, #3
 8006822:	f021 0103 	bic.w	r1, r1, #3
 8006826:	f850 cb04 	ldr.w	ip, [r0], #4
 800682a:	bf08      	it	eq
 800682c:	f851 3b04 	ldreq.w	r3, [r1], #4
 8006830:	d00d      	beq.n	800684e <strcmp+0x3e>
 8006832:	f082 0203 	eor.w	r2, r2, #3
 8006836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800683a:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800683e:	fa23 f202 	lsr.w	r2, r3, r2
 8006842:	f851 3b04 	ldr.w	r3, [r1], #4
 8006846:	ea4c 0c02 	orr.w	ip, ip, r2
 800684a:	ea43 0302 	orr.w	r3, r3, r2
 800684e:	bf00      	nop
 8006850:	f1ac 3201 	sub.w	r2, ip, #16843009	; 0x1010101
 8006854:	459c      	cmp	ip, r3
 8006856:	bf01      	itttt	eq
 8006858:	ea22 020c 	biceq.w	r2, r2, ip
 800685c:	f012 3f80 	tsteq.w	r2, #2155905152	; 0x80808080
 8006860:	f850 cb04 	ldreq.w	ip, [r0], #4
 8006864:	f851 3b04 	ldreq.w	r3, [r1], #4
 8006868:	d0f2      	beq.n	8006850 <strcmp+0x40>
 800686a:	ea4f 600c 	mov.w	r0, ip, lsl #24
 800686e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8006872:	2801      	cmp	r0, #1
 8006874:	bf28      	it	cs
 8006876:	ebb0 6f03 	cmpcs.w	r0, r3, lsl #24
 800687a:	bf08      	it	eq
 800687c:	0a1b      	lsreq	r3, r3, #8
 800687e:	d0f4      	beq.n	800686a <strcmp+0x5a>
 8006880:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8006884:	ea4f 6010 	mov.w	r0, r0, lsr #24
 8006888:	eba0 0003 	sub.w	r0, r0, r3
 800688c:	4770      	bx	lr
 800688e:	bf00      	nop

08006890 <strcmp_unaligned>:
 8006890:	f010 0f03 	tst.w	r0, #3
 8006894:	d00a      	beq.n	80068ac <strcmp_unaligned+0x1c>
 8006896:	f810 2b01 	ldrb.w	r2, [r0], #1
 800689a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800689e:	2a01      	cmp	r2, #1
 80068a0:	bf28      	it	cs
 80068a2:	429a      	cmpcs	r2, r3
 80068a4:	d0f4      	beq.n	8006890 <strcmp_unaligned>
 80068a6:	eba2 0003 	sub.w	r0, r2, r3
 80068aa:	4770      	bx	lr
 80068ac:	f84d 5d04 	str.w	r5, [sp, #-4]!
 80068b0:	f84d 4d04 	str.w	r4, [sp, #-4]!
 80068b4:	f04f 0201 	mov.w	r2, #1
 80068b8:	ea42 2202 	orr.w	r2, r2, r2, lsl #8
 80068bc:	ea42 4202 	orr.w	r2, r2, r2, lsl #16
 80068c0:	f001 0c03 	and.w	ip, r1, #3
 80068c4:	f021 0103 	bic.w	r1, r1, #3
 80068c8:	f850 4b04 	ldr.w	r4, [r0], #4
 80068cc:	f851 5b04 	ldr.w	r5, [r1], #4
 80068d0:	f1bc 0f02 	cmp.w	ip, #2
 80068d4:	d026      	beq.n	8006924 <strcmp_unaligned+0x94>
 80068d6:	d84b      	bhi.n	8006970 <strcmp_unaligned+0xe0>
 80068d8:	f024 4c7f 	bic.w	ip, r4, #4278190080	; 0xff000000
 80068dc:	ebbc 2f15 	cmp.w	ip, r5, lsr #8
 80068e0:	eba4 0302 	sub.w	r3, r4, r2
 80068e4:	ea23 0304 	bic.w	r3, r3, r4
 80068e8:	d10d      	bne.n	8006906 <strcmp_unaligned+0x76>
 80068ea:	ea13 13c2 	ands.w	r3, r3, r2, lsl #7
 80068ee:	bf08      	it	eq
 80068f0:	f851 5b04 	ldreq.w	r5, [r1], #4
 80068f4:	d10a      	bne.n	800690c <strcmp_unaligned+0x7c>
 80068f6:	ea8c 0c04 	eor.w	ip, ip, r4
 80068fa:	ebbc 6f05 	cmp.w	ip, r5, lsl #24
 80068fe:	d10c      	bne.n	800691a <strcmp_unaligned+0x8a>
 8006900:	f850 4b04 	ldr.w	r4, [r0], #4
 8006904:	e7e8      	b.n	80068d8 <strcmp_unaligned+0x48>
 8006906:	ea4f 2515 	mov.w	r5, r5, lsr #8
 800690a:	e05c      	b.n	80069c6 <strcmp_unaligned+0x136>
 800690c:	f033 437f 	bics.w	r3, r3, #4278190080	; 0xff000000
 8006910:	d152      	bne.n	80069b8 <strcmp_unaligned+0x128>
 8006912:	780d      	ldrb	r5, [r1, #0]
 8006914:	ea4f 6c14 	mov.w	ip, r4, lsr #24
 8006918:	e055      	b.n	80069c6 <strcmp_unaligned+0x136>
 800691a:	ea4f 6c14 	mov.w	ip, r4, lsr #24
 800691e:	f005 05ff 	and.w	r5, r5, #255	; 0xff
 8006922:	e050      	b.n	80069c6 <strcmp_unaligned+0x136>
 8006924:	ea4f 4c04 	mov.w	ip, r4, lsl #16
 8006928:	eba4 0302 	sub.w	r3, r4, r2
 800692c:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006930:	ea23 0304 	bic.w	r3, r3, r4
 8006934:	ebbc 4f15 	cmp.w	ip, r5, lsr #16
 8006938:	d117      	bne.n	800696a <strcmp_unaligned+0xda>
 800693a:	ea13 13c2 	ands.w	r3, r3, r2, lsl #7
 800693e:	bf08      	it	eq
 8006940:	f851 5b04 	ldreq.w	r5, [r1], #4
 8006944:	d107      	bne.n	8006956 <strcmp_unaligned+0xc6>
 8006946:	ea8c 0c04 	eor.w	ip, ip, r4
 800694a:	ebbc 4f05 	cmp.w	ip, r5, lsl #16
 800694e:	d108      	bne.n	8006962 <strcmp_unaligned+0xd2>
 8006950:	f850 4b04 	ldr.w	r4, [r0], #4
 8006954:	e7e6      	b.n	8006924 <strcmp_unaligned+0x94>
 8006956:	041b      	lsls	r3, r3, #16
 8006958:	d12e      	bne.n	80069b8 <strcmp_unaligned+0x128>
 800695a:	880d      	ldrh	r5, [r1, #0]
 800695c:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8006960:	e031      	b.n	80069c6 <strcmp_unaligned+0x136>
 8006962:	ea4f 4505 	mov.w	r5, r5, lsl #16
 8006966:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800696a:	ea4f 4515 	mov.w	r5, r5, lsr #16
 800696e:	e02a      	b.n	80069c6 <strcmp_unaligned+0x136>
 8006970:	f004 0cff 	and.w	ip, r4, #255	; 0xff
 8006974:	ebbc 6f15 	cmp.w	ip, r5, lsr #24
 8006978:	eba4 0302 	sub.w	r3, r4, r2
 800697c:	ea23 0304 	bic.w	r3, r3, r4
 8006980:	d10d      	bne.n	800699e <strcmp_unaligned+0x10e>
 8006982:	ea13 13c2 	ands.w	r3, r3, r2, lsl #7
 8006986:	bf08      	it	eq
 8006988:	f851 5b04 	ldreq.w	r5, [r1], #4
 800698c:	d10a      	bne.n	80069a4 <strcmp_unaligned+0x114>
 800698e:	ea8c 0c04 	eor.w	ip, ip, r4
 8006992:	ebbc 2f05 	cmp.w	ip, r5, lsl #8
 8006996:	d10a      	bne.n	80069ae <strcmp_unaligned+0x11e>
 8006998:	f850 4b04 	ldr.w	r4, [r0], #4
 800699c:	e7e8      	b.n	8006970 <strcmp_unaligned+0xe0>
 800699e:	ea4f 6515 	mov.w	r5, r5, lsr #24
 80069a2:	e010      	b.n	80069c6 <strcmp_unaligned+0x136>
 80069a4:	f014 0fff 	tst.w	r4, #255	; 0xff
 80069a8:	d006      	beq.n	80069b8 <strcmp_unaligned+0x128>
 80069aa:	f851 5b04 	ldr.w	r5, [r1], #4
 80069ae:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 80069b2:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 80069b6:	e006      	b.n	80069c6 <strcmp_unaligned+0x136>
 80069b8:	f04f 0000 	mov.w	r0, #0
 80069bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80069c0:	f85d 5b04 	ldr.w	r5, [sp], #4
 80069c4:	4770      	bx	lr
 80069c6:	f00c 02ff 	and.w	r2, ip, #255	; 0xff
 80069ca:	f005 00ff 	and.w	r0, r5, #255	; 0xff
 80069ce:	2801      	cmp	r0, #1
 80069d0:	bf28      	it	cs
 80069d2:	4290      	cmpcs	r0, r2
 80069d4:	bf04      	itt	eq
 80069d6:	ea4f 2c1c 	moveq.w	ip, ip, lsr #8
 80069da:	0a2d      	lsreq	r5, r5, #8
 80069dc:	d0f3      	beq.n	80069c6 <strcmp_unaligned+0x136>
 80069de:	eba2 0000 	sub.w	r0, r2, r0
 80069e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80069e6:	f85d 5b04 	ldr.w	r5, [sp], #4
 80069ea:	4770      	bx	lr

080069ec <strlen>:
 80069ec:	f020 0103 	bic.w	r1, r0, #3
 80069f0:	f010 0003 	ands.w	r0, r0, #3
 80069f4:	f1c0 0000 	rsb	r0, r0, #0
 80069f8:	f851 3b04 	ldr.w	r3, [r1], #4
 80069fc:	f100 0c04 	add.w	ip, r0, #4
 8006a00:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8006a04:	f06f 0200 	mvn.w	r2, #0
 8006a08:	bf1c      	itt	ne
 8006a0a:	fa22 f20c 	lsrne.w	r2, r2, ip
 8006a0e:	4313      	orrne	r3, r2
 8006a10:	f04f 0c01 	mov.w	ip, #1
 8006a14:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 8006a18:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 8006a1c:	eba3 020c 	sub.w	r2, r3, ip
 8006a20:	ea22 0203 	bic.w	r2, r2, r3
 8006a24:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 8006a28:	bf04      	itt	eq
 8006a2a:	f851 3b04 	ldreq.w	r3, [r1], #4
 8006a2e:	3004      	addeq	r0, #4
 8006a30:	d0f4      	beq.n	8006a1c <strlen+0x30>
 8006a32:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006a36:	bf1f      	itttt	ne
 8006a38:	3001      	addne	r0, #1
 8006a3a:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
 8006a3e:	3001      	addne	r0, #1
 8006a40:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
 8006a44:	bf18      	it	ne
 8006a46:	3001      	addne	r0, #1
 8006a48:	4770      	bx	lr
 8006a4a:	bf00      	nop

08006a4c <__ssprint_r>:
 8006a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a50:	6894      	ldr	r4, [r2, #8]
 8006a52:	b083      	sub	sp, #12
 8006a54:	4691      	mov	r9, r2
 8006a56:	9001      	str	r0, [sp, #4]
 8006a58:	460d      	mov	r5, r1
 8006a5a:	6817      	ldr	r7, [r2, #0]
 8006a5c:	2c00      	cmp	r4, #0
 8006a5e:	d06c      	beq.n	8006b3a <__ssprint_r+0xee>
 8006a60:	f04f 0a00 	mov.w	sl, #0
 8006a64:	6808      	ldr	r0, [r1, #0]
 8006a66:	688b      	ldr	r3, [r1, #8]
 8006a68:	4654      	mov	r4, sl
 8006a6a:	2c00      	cmp	r4, #0
 8006a6c:	d048      	beq.n	8006b00 <__ssprint_r+0xb4>
 8006a6e:	429c      	cmp	r4, r3
 8006a70:	461e      	mov	r6, r3
 8006a72:	4698      	mov	r8, r3
 8006a74:	bf3c      	itt	cc
 8006a76:	4626      	movcc	r6, r4
 8006a78:	46a0      	movcc	r8, r4
 8006a7a:	d331      	bcc.n	8006ae0 <__ssprint_r+0x94>
 8006a7c:	89ab      	ldrh	r3, [r5, #12]
 8006a7e:	f413 6f90 	tst.w	r3, #1152	; 0x480
 8006a82:	d02d      	beq.n	8006ae0 <__ssprint_r+0x94>
 8006a84:	696e      	ldr	r6, [r5, #20]
 8006a86:	6929      	ldr	r1, [r5, #16]
 8006a88:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8006a8c:	ebc1 0800 	rsb	r8, r1, r0
 8006a90:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 8006a94:	1c60      	adds	r0, r4, #1
 8006a96:	1076      	asrs	r6, r6, #1
 8006a98:	4440      	add	r0, r8
 8006a9a:	4286      	cmp	r6, r0
 8006a9c:	4632      	mov	r2, r6
 8006a9e:	bf3c      	itt	cc
 8006aa0:	4606      	movcc	r6, r0
 8006aa2:	4632      	movcc	r2, r6
 8006aa4:	055b      	lsls	r3, r3, #21
 8006aa6:	9801      	ldr	r0, [sp, #4]
 8006aa8:	d52f      	bpl.n	8006b0a <__ssprint_r+0xbe>
 8006aaa:	4611      	mov	r1, r2
 8006aac:	f7fe feea 	bl	8005884 <_malloc_r>
 8006ab0:	4683      	mov	fp, r0
 8006ab2:	2800      	cmp	r0, #0
 8006ab4:	d032      	beq.n	8006b1c <__ssprint_r+0xd0>
 8006ab6:	6929      	ldr	r1, [r5, #16]
 8006ab8:	4642      	mov	r2, r8
 8006aba:	f7ff f9c1 	bl	8005e40 <memcpy>
 8006abe:	89ab      	ldrh	r3, [r5, #12]
 8006ac0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006ac4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ac8:	81ab      	strh	r3, [r5, #12]
 8006aca:	ebc8 0306 	rsb	r3, r8, r6
 8006ace:	eb0b 0008 	add.w	r0, fp, r8
 8006ad2:	616e      	str	r6, [r5, #20]
 8006ad4:	f8c5 b010 	str.w	fp, [r5, #16]
 8006ad8:	6028      	str	r0, [r5, #0]
 8006ada:	4626      	mov	r6, r4
 8006adc:	60ab      	str	r3, [r5, #8]
 8006ade:	46a0      	mov	r8, r4
 8006ae0:	4642      	mov	r2, r8
 8006ae2:	4651      	mov	r1, sl
 8006ae4:	f000 fcb4 	bl	8007450 <memmove>
 8006ae8:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8006aec:	68ab      	ldr	r3, [r5, #8]
 8006aee:	6828      	ldr	r0, [r5, #0]
 8006af0:	1b9b      	subs	r3, r3, r6
 8006af2:	4440      	add	r0, r8
 8006af4:	1b14      	subs	r4, r2, r4
 8006af6:	60ab      	str	r3, [r5, #8]
 8006af8:	6028      	str	r0, [r5, #0]
 8006afa:	f8c9 4008 	str.w	r4, [r9, #8]
 8006afe:	b1e4      	cbz	r4, 8006b3a <__ssprint_r+0xee>
 8006b00:	f8d7 a000 	ldr.w	sl, [r7]
 8006b04:	687c      	ldr	r4, [r7, #4]
 8006b06:	3708      	adds	r7, #8
 8006b08:	e7af      	b.n	8006a6a <__ssprint_r+0x1e>
 8006b0a:	f000 fd43 	bl	8007594 <_realloc_r>
 8006b0e:	4683      	mov	fp, r0
 8006b10:	2800      	cmp	r0, #0
 8006b12:	d1da      	bne.n	8006aca <__ssprint_r+0x7e>
 8006b14:	9801      	ldr	r0, [sp, #4]
 8006b16:	6929      	ldr	r1, [r5, #16]
 8006b18:	f7fe fdaa 	bl	8005670 <_free_r>
 8006b1c:	9a01      	ldr	r2, [sp, #4]
 8006b1e:	230c      	movs	r3, #12
 8006b20:	6013      	str	r3, [r2, #0]
 8006b22:	89aa      	ldrh	r2, [r5, #12]
 8006b24:	2300      	movs	r3, #0
 8006b26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b2a:	81aa      	strh	r2, [r5, #12]
 8006b2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b30:	f8c9 3008 	str.w	r3, [r9, #8]
 8006b34:	f8c9 3004 	str.w	r3, [r9, #4]
 8006b38:	e002      	b.n	8006b40 <__ssprint_r+0xf4>
 8006b3a:	f8c9 4004 	str.w	r4, [r9, #4]
 8006b3e:	4620      	mov	r0, r4
 8006b40:	b003      	add	sp, #12
 8006b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b46:	bf00      	nop

08006b48 <_svfiprintf_r>:
 8006b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b4c:	468a      	mov	sl, r1
 8006b4e:	8989      	ldrh	r1, [r1, #12]
 8006b50:	b0ad      	sub	sp, #180	; 0xb4
 8006b52:	0609      	lsls	r1, r1, #24
 8006b54:	9007      	str	r0, [sp, #28]
 8006b56:	9305      	str	r3, [sp, #20]
 8006b58:	d504      	bpl.n	8006b64 <_svfiprintf_r+0x1c>
 8006b5a:	f8da 3010 	ldr.w	r3, [sl, #16]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	f000 8420 	beq.w	80073a4 <_svfiprintf_r+0x85c>
 8006b64:	2300      	movs	r3, #0
 8006b66:	f10d 009f 	add.w	r0, sp, #159	; 0x9f
 8006b6a:	f10d 08a0 	add.w	r8, sp, #160	; 0xa0
 8006b6e:	a90e      	add	r1, sp, #56	; 0x38
 8006b70:	930c      	str	r3, [sp, #48]	; 0x30
 8006b72:	932a      	str	r3, [sp, #168]	; 0xa8
 8006b74:	9329      	str	r3, [sp, #164]	; 0xa4
 8006b76:	9304      	str	r3, [sp, #16]
 8006b78:	ebc0 0308 	rsb	r3, r0, r8
 8006b7c:	9001      	str	r0, [sp, #4]
 8006b7e:	9128      	str	r1, [sp, #160]	; 0xa0
 8006b80:	4617      	mov	r7, r2
 8006b82:	460c      	mov	r4, r1
 8006b84:	930d      	str	r3, [sp, #52]	; 0x34
 8006b86:	783b      	ldrb	r3, [r7, #0]
 8006b88:	463d      	mov	r5, r7
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	bf18      	it	ne
 8006b8e:	2b25      	cmpne	r3, #37	; 0x25
 8006b90:	d016      	beq.n	8006bc0 <_svfiprintf_r+0x78>
 8006b92:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8006b96:	2b25      	cmp	r3, #37	; 0x25
 8006b98:	bf18      	it	ne
 8006b9a:	2b00      	cmpne	r3, #0
 8006b9c:	d1f9      	bne.n	8006b92 <_svfiprintf_r+0x4a>
 8006b9e:	1bee      	subs	r6, r5, r7
 8006ba0:	d00e      	beq.n	8006bc0 <_svfiprintf_r+0x78>
 8006ba2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8006ba4:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8006ba6:	3301      	adds	r3, #1
 8006ba8:	1992      	adds	r2, r2, r6
 8006baa:	2b07      	cmp	r3, #7
 8006bac:	6027      	str	r7, [r4, #0]
 8006bae:	6066      	str	r6, [r4, #4]
 8006bb0:	922a      	str	r2, [sp, #168]	; 0xa8
 8006bb2:	9329      	str	r3, [sp, #164]	; 0xa4
 8006bb4:	f300 832a 	bgt.w	800720c <_svfiprintf_r+0x6c4>
 8006bb8:	3408      	adds	r4, #8
 8006bba:	9b04      	ldr	r3, [sp, #16]
 8006bbc:	199b      	adds	r3, r3, r6
 8006bbe:	9304      	str	r3, [sp, #16]
 8006bc0:	782b      	ldrb	r3, [r5, #0]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	f000 82c5 	beq.w	8007152 <_svfiprintf_r+0x60a>
 8006bc8:	2200      	movs	r2, #0
 8006bca:	1c6f      	adds	r7, r5, #1
 8006bcc:	4613      	mov	r3, r2
 8006bce:	f88d 20af 	strb.w	r2, [sp, #175]	; 0xaf
 8006bd2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006bd6:	9206      	str	r2, [sp, #24]
 8006bd8:	4693      	mov	fp, r2
 8006bda:	f817 2b01 	ldrb.w	r2, [r7], #1
 8006bde:	f1a2 0120 	sub.w	r1, r2, #32
 8006be2:	2958      	cmp	r1, #88	; 0x58
 8006be4:	f200 8178 	bhi.w	8006ed8 <_svfiprintf_r+0x390>
 8006be8:	e8df f011 	tbh	[pc, r1, lsl #1]
 8006bec:	01760172 	.word	0x01760172
 8006bf0:	016f0176 	.word	0x016f0176
 8006bf4:	01760176 	.word	0x01760176
 8006bf8:	01760176 	.word	0x01760176
 8006bfc:	01760176 	.word	0x01760176
 8006c00:	01d800af 	.word	0x01d800af
 8006c04:	00ba0176 	.word	0x00ba0176
 8006c08:	017601da 	.word	0x017601da
 8006c0c:	01c401d5 	.word	0x01c401d5
 8006c10:	01c401c4 	.word	0x01c401c4
 8006c14:	01c401c4 	.word	0x01c401c4
 8006c18:	01c401c4 	.word	0x01c401c4
 8006c1c:	01c401c4 	.word	0x01c401c4
 8006c20:	01760176 	.word	0x01760176
 8006c24:	01760176 	.word	0x01760176
 8006c28:	01760176 	.word	0x01760176
 8006c2c:	01760176 	.word	0x01760176
 8006c30:	01760176 	.word	0x01760176
 8006c34:	017601a7 	.word	0x017601a7
 8006c38:	01760176 	.word	0x01760176
 8006c3c:	01760176 	.word	0x01760176
 8006c40:	01760176 	.word	0x01760176
 8006c44:	01760176 	.word	0x01760176
 8006c48:	005c0176 	.word	0x005c0176
 8006c4c:	01760176 	.word	0x01760176
 8006c50:	01760176 	.word	0x01760176
 8006c54:	00a00176 	.word	0x00a00176
 8006c58:	01760176 	.word	0x01760176
 8006c5c:	0176016a 	.word	0x0176016a
 8006c60:	01760176 	.word	0x01760176
 8006c64:	01760176 	.word	0x01760176
 8006c68:	01760176 	.word	0x01760176
 8006c6c:	01760176 	.word	0x01760176
 8006c70:	01170176 	.word	0x01170176
 8006c74:	01760105 	.word	0x01760105
 8006c78:	01760176 	.word	0x01760176
 8006c7c:	01050102 	.word	0x01050102
 8006c80:	01760176 	.word	0x01760176
 8006c84:	01760059 	.word	0x01760059
 8006c88:	005e00d1 	.word	0x005e00d1
 8006c8c:	005900bd 	.word	0x005900bd
 8006c90:	01870176 	.word	0x01870176
 8006c94:	00a20176 	.word	0x00a20176
 8006c98:	01760176 	.word	0x01760176
 8006c9c:	00e2      	.short	0x00e2
 8006c9e:	f04b 0b10 	orr.w	fp, fp, #16
 8006ca2:	e79a      	b.n	8006bda <_svfiprintf_r+0x92>
 8006ca4:	f04b 0b10 	orr.w	fp, fp, #16
 8006ca8:	f01b 0210 	ands.w	r2, fp, #16
 8006cac:	f000 8312 	beq.w	80072d4 <_svfiprintf_r+0x78c>
 8006cb0:	9805      	ldr	r0, [sp, #20]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	6803      	ldr	r3, [r0, #0]
 8006cb6:	1a99      	subs	r1, r3, r2
 8006cb8:	bf18      	it	ne
 8006cba:	2101      	movne	r1, #1
 8006cbc:	3004      	adds	r0, #4
 8006cbe:	9005      	str	r0, [sp, #20]
 8006cc0:	2000      	movs	r0, #0
 8006cc2:	f88d 00af 	strb.w	r0, [sp, #175]	; 0xaf
 8006cc6:	2d00      	cmp	r5, #0
 8006cc8:	bfa8      	it	ge
 8006cca:	f02b 0b80 	bicge.w	fp, fp, #128	; 0x80
 8006cce:	2d00      	cmp	r5, #0
 8006cd0:	bf18      	it	ne
 8006cd2:	f041 0101 	orrne.w	r1, r1, #1
 8006cd6:	2900      	cmp	r1, #0
 8006cd8:	f000 8228 	beq.w	800712c <_svfiprintf_r+0x5e4>
 8006cdc:	2a01      	cmp	r2, #1
 8006cde:	f000 82cf 	beq.w	8007280 <_svfiprintf_r+0x738>
 8006ce2:	2a02      	cmp	r2, #2
 8006ce4:	bf18      	it	ne
 8006ce6:	4642      	movne	r2, r8
 8006ce8:	d101      	bne.n	8006cee <_svfiprintf_r+0x1a6>
 8006cea:	e2b9      	b.n	8007260 <_svfiprintf_r+0x718>
 8006cec:	4602      	mov	r2, r0
 8006cee:	f003 0107 	and.w	r1, r3, #7
 8006cf2:	3130      	adds	r1, #48	; 0x30
 8006cf4:	1e50      	subs	r0, r2, #1
 8006cf6:	08db      	lsrs	r3, r3, #3
 8006cf8:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006cfc:	d1f6      	bne.n	8006cec <_svfiprintf_r+0x1a4>
 8006cfe:	f01b 0f01 	tst.w	fp, #1
 8006d02:	9009      	str	r0, [sp, #36]	; 0x24
 8006d04:	f040 8318 	bne.w	8007338 <_svfiprintf_r+0x7f0>
 8006d08:	ebc0 0308 	rsb	r3, r0, r8
 8006d0c:	9303      	str	r3, [sp, #12]
 8006d0e:	9508      	str	r5, [sp, #32]
 8006d10:	9803      	ldr	r0, [sp, #12]
 8006d12:	9908      	ldr	r1, [sp, #32]
 8006d14:	f89d 30af 	ldrb.w	r3, [sp, #175]	; 0xaf
 8006d18:	4288      	cmp	r0, r1
 8006d1a:	bfb8      	it	lt
 8006d1c:	4608      	movlt	r0, r1
 8006d1e:	9002      	str	r0, [sp, #8]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	f000 808b 	beq.w	8006e3c <_svfiprintf_r+0x2f4>
 8006d26:	3001      	adds	r0, #1
 8006d28:	9002      	str	r0, [sp, #8]
 8006d2a:	e087      	b.n	8006e3c <_svfiprintf_r+0x2f4>
 8006d2c:	f04b 0b10 	orr.w	fp, fp, #16
 8006d30:	f01b 0f10 	tst.w	fp, #16
 8006d34:	f000 82c0 	beq.w	80072b8 <_svfiprintf_r+0x770>
 8006d38:	9805      	ldr	r0, [sp, #20]
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	6803      	ldr	r3, [r0, #0]
 8006d3e:	1c19      	adds	r1, r3, #0
 8006d40:	bf18      	it	ne
 8006d42:	2101      	movne	r1, #1
 8006d44:	3004      	adds	r0, #4
 8006d46:	9005      	str	r0, [sp, #20]
 8006d48:	e7ba      	b.n	8006cc0 <_svfiprintf_r+0x178>
 8006d4a:	9805      	ldr	r0, [sp, #20]
 8006d4c:	9905      	ldr	r1, [sp, #20]
 8006d4e:	6800      	ldr	r0, [r0, #0]
 8006d50:	1d0a      	adds	r2, r1, #4
 8006d52:	2800      	cmp	r0, #0
 8006d54:	9006      	str	r0, [sp, #24]
 8006d56:	f280 82df 	bge.w	8007318 <_svfiprintf_r+0x7d0>
 8006d5a:	4240      	negs	r0, r0
 8006d5c:	9006      	str	r0, [sp, #24]
 8006d5e:	9205      	str	r2, [sp, #20]
 8006d60:	f04b 0b04 	orr.w	fp, fp, #4
 8006d64:	e739      	b.n	8006bda <_svfiprintf_r+0x92>
 8006d66:	9b05      	ldr	r3, [sp, #20]
 8006d68:	2230      	movs	r2, #48	; 0x30
 8006d6a:	9905      	ldr	r1, [sp, #20]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
 8006d72:	2278      	movs	r2, #120	; 0x78
 8006d74:	3104      	adds	r1, #4
 8006d76:	f88d 20ad 	strb.w	r2, [sp, #173]	; 0xad
 8006d7a:	4aaf      	ldr	r2, [pc, #700]	; (8007038 <_svfiprintf_r+0x4f0>)
 8006d7c:	9105      	str	r1, [sp, #20]
 8006d7e:	1c19      	adds	r1, r3, #0
 8006d80:	bf18      	it	ne
 8006d82:	2101      	movne	r1, #1
 8006d84:	920c      	str	r2, [sp, #48]	; 0x30
 8006d86:	f04b 0b02 	orr.w	fp, fp, #2
 8006d8a:	2202      	movs	r2, #2
 8006d8c:	e798      	b.n	8006cc0 <_svfiprintf_r+0x178>
 8006d8e:	f01b 0f10 	tst.w	fp, #16
 8006d92:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 8006d96:	f040 82db 	bne.w	8007350 <_svfiprintf_r+0x808>
 8006d9a:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8006d9e:	f000 82f9 	beq.w	8007394 <_svfiprintf_r+0x84c>
 8006da2:	9a05      	ldr	r2, [sp, #20]
 8006da4:	9804      	ldr	r0, [sp, #16]
 8006da6:	6813      	ldr	r3, [r2, #0]
 8006da8:	3204      	adds	r2, #4
 8006daa:	9205      	str	r2, [sp, #20]
 8006dac:	8018      	strh	r0, [r3, #0]
 8006dae:	e6ea      	b.n	8006b86 <_svfiprintf_r+0x3e>
 8006db0:	49a1      	ldr	r1, [pc, #644]	; (8007038 <_svfiprintf_r+0x4f0>)
 8006db2:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 8006db6:	910c      	str	r1, [sp, #48]	; 0x30
 8006db8:	f01b 0f10 	tst.w	fp, #16
 8006dbc:	d103      	bne.n	8006dc6 <_svfiprintf_r+0x27e>
 8006dbe:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8006dc2:	f040 82d1 	bne.w	8007368 <_svfiprintf_r+0x820>
 8006dc6:	9805      	ldr	r0, [sp, #20]
 8006dc8:	6803      	ldr	r3, [r0, #0]
 8006dca:	3004      	adds	r0, #4
 8006dcc:	9005      	str	r0, [sp, #20]
 8006dce:	1c19      	adds	r1, r3, #0
 8006dd0:	bf18      	it	ne
 8006dd2:	2101      	movne	r1, #1
 8006dd4:	ea1b 0f01 	tst.w	fp, r1
 8006dd8:	f000 8286 	beq.w	80072e8 <_svfiprintf_r+0x7a0>
 8006ddc:	2130      	movs	r1, #48	; 0x30
 8006dde:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
 8006de2:	f88d 20ad 	strb.w	r2, [sp, #173]	; 0xad
 8006de6:	f04b 0b02 	orr.w	fp, fp, #2
 8006dea:	2101      	movs	r1, #1
 8006dec:	2202      	movs	r2, #2
 8006dee:	e767      	b.n	8006cc0 <_svfiprintf_r+0x178>
 8006df0:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
 8006df4:	e6f1      	b.n	8006bda <_svfiprintf_r+0x92>
 8006df6:	f01b 0f10 	tst.w	fp, #16
 8006dfa:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 8006dfe:	f000 80a4 	beq.w	8006f4a <_svfiprintf_r+0x402>
 8006e02:	9805      	ldr	r0, [sp, #20]
 8006e04:	6803      	ldr	r3, [r0, #0]
 8006e06:	3004      	adds	r0, #4
 8006e08:	9005      	str	r0, [sp, #20]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	f2c0 80a9 	blt.w	8006f62 <_svfiprintf_r+0x41a>
 8006e10:	bf0c      	ite	eq
 8006e12:	2100      	moveq	r1, #0
 8006e14:	2101      	movne	r1, #1
 8006e16:	2201      	movs	r2, #1
 8006e18:	e755      	b.n	8006cc6 <_svfiprintf_r+0x17e>
 8006e1a:	9b05      	ldr	r3, [sp, #20]
 8006e1c:	9905      	ldr	r1, [sp, #20]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	2001      	movs	r0, #1
 8006e22:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
 8006e26:	2300      	movs	r3, #0
 8006e28:	3104      	adds	r1, #4
 8006e2a:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 8006e2e:	ab1e      	add	r3, sp, #120	; 0x78
 8006e30:	9002      	str	r0, [sp, #8]
 8006e32:	9105      	str	r1, [sp, #20]
 8006e34:	9003      	str	r0, [sp, #12]
 8006e36:	9309      	str	r3, [sp, #36]	; 0x24
 8006e38:	2300      	movs	r3, #0
 8006e3a:	9308      	str	r3, [sp, #32]
 8006e3c:	f01b 0302 	ands.w	r3, fp, #2
 8006e40:	930a      	str	r3, [sp, #40]	; 0x28
 8006e42:	d002      	beq.n	8006e4a <_svfiprintf_r+0x302>
 8006e44:	9b02      	ldr	r3, [sp, #8]
 8006e46:	3302      	adds	r3, #2
 8006e48:	9302      	str	r3, [sp, #8]
 8006e4a:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
 8006e4e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e50:	f040 80c1 	bne.w	8006fd6 <_svfiprintf_r+0x48e>
 8006e54:	9b06      	ldr	r3, [sp, #24]
 8006e56:	9802      	ldr	r0, [sp, #8]
 8006e58:	1a1d      	subs	r5, r3, r0
 8006e5a:	2d00      	cmp	r5, #0
 8006e5c:	f340 80bb 	ble.w	8006fd6 <_svfiprintf_r+0x48e>
 8006e60:	2d10      	cmp	r5, #16
 8006e62:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8006e64:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8006e66:	4e75      	ldr	r6, [pc, #468]	; (800703c <_svfiprintf_r+0x4f4>)
 8006e68:	dd1f      	ble.n	8006eaa <_svfiprintf_r+0x362>
 8006e6a:	4621      	mov	r1, r4
 8006e6c:	f04f 0910 	mov.w	r9, #16
 8006e70:	9c07      	ldr	r4, [sp, #28]
 8006e72:	e002      	b.n	8006e7a <_svfiprintf_r+0x332>
 8006e74:	3d10      	subs	r5, #16
 8006e76:	2d10      	cmp	r5, #16
 8006e78:	dd16      	ble.n	8006ea8 <_svfiprintf_r+0x360>
 8006e7a:	3301      	adds	r3, #1
 8006e7c:	3210      	adds	r2, #16
 8006e7e:	e881 0240 	stmia.w	r1, {r6, r9}
 8006e82:	3108      	adds	r1, #8
 8006e84:	2b07      	cmp	r3, #7
 8006e86:	922a      	str	r2, [sp, #168]	; 0xa8
 8006e88:	9329      	str	r3, [sp, #164]	; 0xa4
 8006e8a:	ddf3      	ble.n	8006e74 <_svfiprintf_r+0x32c>
 8006e8c:	4620      	mov	r0, r4
 8006e8e:	4651      	mov	r1, sl
 8006e90:	4642      	mov	r2, r8
 8006e92:	f7ff fddb 	bl	8006a4c <__ssprint_r>
 8006e96:	2800      	cmp	r0, #0
 8006e98:	f040 8162 	bne.w	8007160 <_svfiprintf_r+0x618>
 8006e9c:	3d10      	subs	r5, #16
 8006e9e:	2d10      	cmp	r5, #16
 8006ea0:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8006ea2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8006ea4:	a90e      	add	r1, sp, #56	; 0x38
 8006ea6:	dce8      	bgt.n	8006e7a <_svfiprintf_r+0x332>
 8006ea8:	460c      	mov	r4, r1
 8006eaa:	3301      	adds	r3, #1
 8006eac:	1952      	adds	r2, r2, r5
 8006eae:	2b07      	cmp	r3, #7
 8006eb0:	6026      	str	r6, [r4, #0]
 8006eb2:	6065      	str	r5, [r4, #4]
 8006eb4:	922a      	str	r2, [sp, #168]	; 0xa8
 8006eb6:	9329      	str	r3, [sp, #164]	; 0xa4
 8006eb8:	f300 8218 	bgt.w	80072ec <_svfiprintf_r+0x7a4>
 8006ebc:	3408      	adds	r4, #8
 8006ebe:	e08c      	b.n	8006fda <_svfiprintf_r+0x492>
 8006ec0:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 8006ec4:	4b5e      	ldr	r3, [pc, #376]	; (8007040 <_svfiprintf_r+0x4f8>)
 8006ec6:	930c      	str	r3, [sp, #48]	; 0x30
 8006ec8:	e776      	b.n	8006db8 <_svfiprintf_r+0x270>
 8006eca:	f04b 0b01 	orr.w	fp, fp, #1
 8006ece:	e684      	b.n	8006bda <_svfiprintf_r+0x92>
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	bf08      	it	eq
 8006ed4:	2320      	moveq	r3, #32
 8006ed6:	e680      	b.n	8006bda <_svfiprintf_r+0x92>
 8006ed8:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 8006edc:	2a00      	cmp	r2, #0
 8006ede:	f000 8138 	beq.w	8007152 <_svfiprintf_r+0x60a>
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	9302      	str	r3, [sp, #8]
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 8006eec:	2301      	movs	r3, #1
 8006eee:	9303      	str	r3, [sp, #12]
 8006ef0:	ab1e      	add	r3, sp, #120	; 0x78
 8006ef2:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 8006ef6:	9309      	str	r3, [sp, #36]	; 0x24
 8006ef8:	e79e      	b.n	8006e38 <_svfiprintf_r+0x2f0>
 8006efa:	9b05      	ldr	r3, [sp, #20]
 8006efc:	2600      	movs	r6, #0
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f88d 60af 	strb.w	r6, [sp, #175]	; 0xaf
 8006f04:	9309      	str	r3, [sp, #36]	; 0x24
 8006f06:	9b05      	ldr	r3, [sp, #20]
 8006f08:	3304      	adds	r3, #4
 8006f0a:	9305      	str	r3, [sp, #20]
 8006f0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	f000 8257 	beq.w	80073c2 <_svfiprintf_r+0x87a>
 8006f14:	2d00      	cmp	r5, #0
 8006f16:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f18:	f2c0 822b 	blt.w	8007372 <_svfiprintf_r+0x82a>
 8006f1c:	4631      	mov	r1, r6
 8006f1e:	462a      	mov	r2, r5
 8006f20:	f7fe ff50 	bl	8005dc4 <memchr>
 8006f24:	2800      	cmp	r0, #0
 8006f26:	f000 8256 	beq.w	80073d6 <_svfiprintf_r+0x88e>
 8006f2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f2c:	9608      	str	r6, [sp, #32]
 8006f2e:	1ac0      	subs	r0, r0, r3
 8006f30:	42a8      	cmp	r0, r5
 8006f32:	9003      	str	r0, [sp, #12]
 8006f34:	bfc8      	it	gt
 8006f36:	9503      	strgt	r5, [sp, #12]
 8006f38:	e6ea      	b.n	8006d10 <_svfiprintf_r+0x1c8>
 8006f3a:	f04b 0b10 	orr.w	fp, fp, #16
 8006f3e:	f01b 0f10 	tst.w	fp, #16
 8006f42:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 8006f46:	f47f af5c 	bne.w	8006e02 <_svfiprintf_r+0x2ba>
 8006f4a:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8006f4e:	f000 8206 	beq.w	800735e <_svfiprintf_r+0x816>
 8006f52:	9905      	ldr	r1, [sp, #20]
 8006f54:	f9b1 3000 	ldrsh.w	r3, [r1]
 8006f58:	3104      	adds	r1, #4
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	9105      	str	r1, [sp, #20]
 8006f5e:	f6bf af57 	bge.w	8006e10 <_svfiprintf_r+0x2c8>
 8006f62:	425b      	negs	r3, r3
 8006f64:	222d      	movs	r2, #45	; 0x2d
 8006f66:	1c19      	adds	r1, r3, #0
 8006f68:	f88d 20af 	strb.w	r2, [sp, #175]	; 0xaf
 8006f6c:	bf18      	it	ne
 8006f6e:	2101      	movne	r1, #1
 8006f70:	2201      	movs	r2, #1
 8006f72:	e6a8      	b.n	8006cc6 <_svfiprintf_r+0x17e>
 8006f74:	4638      	mov	r0, r7
 8006f76:	2100      	movs	r1, #0
 8006f78:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 8006f7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f80:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8006f84:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8006f88:	2e09      	cmp	r6, #9
 8006f8a:	eb07 0141 	add.w	r1, r7, r1, lsl #1
 8006f8e:	4607      	mov	r7, r0
 8006f90:	d9f2      	bls.n	8006f78 <_svfiprintf_r+0x430>
 8006f92:	9106      	str	r1, [sp, #24]
 8006f94:	e623      	b.n	8006bde <_svfiprintf_r+0x96>
 8006f96:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 8006f9a:	e61e      	b.n	8006bda <_svfiprintf_r+0x92>
 8006f9c:	232b      	movs	r3, #43	; 0x2b
 8006f9e:	e61c      	b.n	8006bda <_svfiprintf_r+0x92>
 8006fa0:	f817 2b01 	ldrb.w	r2, [r7], #1
 8006fa4:	2a2a      	cmp	r2, #42	; 0x2a
 8006fa6:	f000 81ad 	beq.w	8007304 <_svfiprintf_r+0x7bc>
 8006faa:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006fae:	2500      	movs	r5, #0
 8006fb0:	2909      	cmp	r1, #9
 8006fb2:	f63f ae14 	bhi.w	8006bde <_svfiprintf_r+0x96>
 8006fb6:	4638      	mov	r0, r7
 8006fb8:	2500      	movs	r5, #0
 8006fba:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006fbe:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8006fc2:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 8006fc6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006fca:	2909      	cmp	r1, #9
 8006fcc:	4607      	mov	r7, r0
 8006fce:	d9f4      	bls.n	8006fba <_svfiprintf_r+0x472>
 8006fd0:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 8006fd4:	e603      	b.n	8006bde <_svfiprintf_r+0x96>
 8006fd6:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8006fd8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8006fda:	f89d 10af 	ldrb.w	r1, [sp, #175]	; 0xaf
 8006fde:	b161      	cbz	r1, 8006ffa <_svfiprintf_r+0x4b2>
 8006fe0:	3301      	adds	r3, #1
 8006fe2:	f10d 01af 	add.w	r1, sp, #175	; 0xaf
 8006fe6:	3201      	adds	r2, #1
 8006fe8:	6021      	str	r1, [r4, #0]
 8006fea:	2101      	movs	r1, #1
 8006fec:	2b07      	cmp	r3, #7
 8006fee:	6061      	str	r1, [r4, #4]
 8006ff0:	922a      	str	r2, [sp, #168]	; 0xa8
 8006ff2:	9329      	str	r3, [sp, #164]	; 0xa4
 8006ff4:	f300 811e 	bgt.w	8007234 <_svfiprintf_r+0x6ec>
 8006ff8:	3408      	adds	r4, #8
 8006ffa:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006ffc:	b159      	cbz	r1, 8007016 <_svfiprintf_r+0x4ce>
 8006ffe:	3301      	adds	r3, #1
 8007000:	a92b      	add	r1, sp, #172	; 0xac
 8007002:	3202      	adds	r2, #2
 8007004:	6021      	str	r1, [r4, #0]
 8007006:	2102      	movs	r1, #2
 8007008:	2b07      	cmp	r3, #7
 800700a:	6061      	str	r1, [r4, #4]
 800700c:	922a      	str	r2, [sp, #168]	; 0xa8
 800700e:	9329      	str	r3, [sp, #164]	; 0xa4
 8007010:	f300 811b 	bgt.w	800724a <_svfiprintf_r+0x702>
 8007014:	3408      	adds	r4, #8
 8007016:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007018:	2880      	cmp	r0, #128	; 0x80
 800701a:	f000 80ae 	beq.w	800717a <_svfiprintf_r+0x632>
 800701e:	9808      	ldr	r0, [sp, #32]
 8007020:	9903      	ldr	r1, [sp, #12]
 8007022:	1a45      	subs	r5, r0, r1
 8007024:	2d00      	cmp	r5, #0
 8007026:	dd33      	ble.n	8007090 <_svfiprintf_r+0x548>
 8007028:	2d10      	cmp	r5, #16
 800702a:	4e06      	ldr	r6, [pc, #24]	; (8007044 <_svfiprintf_r+0x4fc>)
 800702c:	dd26      	ble.n	800707c <_svfiprintf_r+0x534>
 800702e:	4621      	mov	r1, r4
 8007030:	f04f 0910 	mov.w	r9, #16
 8007034:	9c07      	ldr	r4, [sp, #28]
 8007036:	e00a      	b.n	800704e <_svfiprintf_r+0x506>
 8007038:	080088ec 	.word	0x080088ec
 800703c:	08008788 	.word	0x08008788
 8007040:	080088d8 	.word	0x080088d8
 8007044:	08008798 	.word	0x08008798
 8007048:	3d10      	subs	r5, #16
 800704a:	2d10      	cmp	r5, #16
 800704c:	dd15      	ble.n	800707a <_svfiprintf_r+0x532>
 800704e:	3301      	adds	r3, #1
 8007050:	3210      	adds	r2, #16
 8007052:	e881 0240 	stmia.w	r1, {r6, r9}
 8007056:	3108      	adds	r1, #8
 8007058:	2b07      	cmp	r3, #7
 800705a:	922a      	str	r2, [sp, #168]	; 0xa8
 800705c:	9329      	str	r3, [sp, #164]	; 0xa4
 800705e:	ddf3      	ble.n	8007048 <_svfiprintf_r+0x500>
 8007060:	4620      	mov	r0, r4
 8007062:	4651      	mov	r1, sl
 8007064:	4642      	mov	r2, r8
 8007066:	f7ff fcf1 	bl	8006a4c <__ssprint_r>
 800706a:	2800      	cmp	r0, #0
 800706c:	d178      	bne.n	8007160 <_svfiprintf_r+0x618>
 800706e:	3d10      	subs	r5, #16
 8007070:	2d10      	cmp	r5, #16
 8007072:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8007074:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007076:	a90e      	add	r1, sp, #56	; 0x38
 8007078:	dce9      	bgt.n	800704e <_svfiprintf_r+0x506>
 800707a:	460c      	mov	r4, r1
 800707c:	3301      	adds	r3, #1
 800707e:	1952      	adds	r2, r2, r5
 8007080:	2b07      	cmp	r3, #7
 8007082:	6026      	str	r6, [r4, #0]
 8007084:	6065      	str	r5, [r4, #4]
 8007086:	922a      	str	r2, [sp, #168]	; 0xa8
 8007088:	9329      	str	r3, [sp, #164]	; 0xa4
 800708a:	f300 80c8 	bgt.w	800721e <_svfiprintf_r+0x6d6>
 800708e:	3408      	adds	r4, #8
 8007090:	9903      	ldr	r1, [sp, #12]
 8007092:	3301      	adds	r3, #1
 8007094:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007096:	1852      	adds	r2, r2, r1
 8007098:	2b07      	cmp	r3, #7
 800709a:	e884 0003 	stmia.w	r4, {r0, r1}
 800709e:	922a      	str	r2, [sp, #168]	; 0xa8
 80070a0:	9329      	str	r3, [sp, #164]	; 0xa4
 80070a2:	bfd8      	it	le
 80070a4:	f104 0108 	addle.w	r1, r4, #8
 80070a8:	f300 809a 	bgt.w	80071e0 <_svfiprintf_r+0x698>
 80070ac:	f01b 0f04 	tst.w	fp, #4
 80070b0:	d02e      	beq.n	8007110 <_svfiprintf_r+0x5c8>
 80070b2:	9b06      	ldr	r3, [sp, #24]
 80070b4:	9802      	ldr	r0, [sp, #8]
 80070b6:	1a1d      	subs	r5, r3, r0
 80070b8:	2d00      	cmp	r5, #0
 80070ba:	dd29      	ble.n	8007110 <_svfiprintf_r+0x5c8>
 80070bc:	2d10      	cmp	r5, #16
 80070be:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80070c0:	4e96      	ldr	r6, [pc, #600]	; (800731c <_svfiprintf_r+0x7d4>)
 80070c2:	dd1c      	ble.n	80070fe <_svfiprintf_r+0x5b6>
 80070c4:	2410      	movs	r4, #16
 80070c6:	f8dd 901c 	ldr.w	r9, [sp, #28]
 80070ca:	e002      	b.n	80070d2 <_svfiprintf_r+0x58a>
 80070cc:	3d10      	subs	r5, #16
 80070ce:	2d10      	cmp	r5, #16
 80070d0:	dd15      	ble.n	80070fe <_svfiprintf_r+0x5b6>
 80070d2:	3301      	adds	r3, #1
 80070d4:	3210      	adds	r2, #16
 80070d6:	600e      	str	r6, [r1, #0]
 80070d8:	604c      	str	r4, [r1, #4]
 80070da:	3108      	adds	r1, #8
 80070dc:	2b07      	cmp	r3, #7
 80070de:	922a      	str	r2, [sp, #168]	; 0xa8
 80070e0:	9329      	str	r3, [sp, #164]	; 0xa4
 80070e2:	ddf3      	ble.n	80070cc <_svfiprintf_r+0x584>
 80070e4:	4648      	mov	r0, r9
 80070e6:	4651      	mov	r1, sl
 80070e8:	4642      	mov	r2, r8
 80070ea:	f7ff fcaf 	bl	8006a4c <__ssprint_r>
 80070ee:	2800      	cmp	r0, #0
 80070f0:	d136      	bne.n	8007160 <_svfiprintf_r+0x618>
 80070f2:	3d10      	subs	r5, #16
 80070f4:	2d10      	cmp	r5, #16
 80070f6:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80070f8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80070fa:	a90e      	add	r1, sp, #56	; 0x38
 80070fc:	dce9      	bgt.n	80070d2 <_svfiprintf_r+0x58a>
 80070fe:	3301      	adds	r3, #1
 8007100:	18aa      	adds	r2, r5, r2
 8007102:	2b07      	cmp	r3, #7
 8007104:	600e      	str	r6, [r1, #0]
 8007106:	604d      	str	r5, [r1, #4]
 8007108:	922a      	str	r2, [sp, #168]	; 0xa8
 800710a:	9329      	str	r3, [sp, #164]	; 0xa4
 800710c:	f300 810a 	bgt.w	8007324 <_svfiprintf_r+0x7dc>
 8007110:	9b04      	ldr	r3, [sp, #16]
 8007112:	9902      	ldr	r1, [sp, #8]
 8007114:	9806      	ldr	r0, [sp, #24]
 8007116:	4281      	cmp	r1, r0
 8007118:	bfac      	ite	ge
 800711a:	185b      	addge	r3, r3, r1
 800711c:	181b      	addlt	r3, r3, r0
 800711e:	9304      	str	r3, [sp, #16]
 8007120:	2a00      	cmp	r2, #0
 8007122:	d167      	bne.n	80071f4 <_svfiprintf_r+0x6ac>
 8007124:	2300      	movs	r3, #0
 8007126:	9329      	str	r3, [sp, #164]	; 0xa4
 8007128:	ac0e      	add	r4, sp, #56	; 0x38
 800712a:	e52c      	b.n	8006b86 <_svfiprintf_r+0x3e>
 800712c:	2a00      	cmp	r2, #0
 800712e:	d169      	bne.n	8007204 <_svfiprintf_r+0x6bc>
 8007130:	f01b 0f01 	tst.w	fp, #1
 8007134:	bf04      	itt	eq
 8007136:	9203      	streq	r2, [sp, #12]
 8007138:	f8cd 8024 	streq.w	r8, [sp, #36]	; 0x24
 800713c:	f43f ade7 	beq.w	8006d0e <_svfiprintf_r+0x1c6>
 8007140:	2330      	movs	r3, #48	; 0x30
 8007142:	f88d 309f 	strb.w	r3, [sp, #159]	; 0x9f
 8007146:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007148:	9303      	str	r3, [sp, #12]
 800714a:	f10d 039f 	add.w	r3, sp, #159	; 0x9f
 800714e:	9309      	str	r3, [sp, #36]	; 0x24
 8007150:	e5dd      	b.n	8006d0e <_svfiprintf_r+0x1c6>
 8007152:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8007154:	b123      	cbz	r3, 8007160 <_svfiprintf_r+0x618>
 8007156:	9807      	ldr	r0, [sp, #28]
 8007158:	4651      	mov	r1, sl
 800715a:	aa28      	add	r2, sp, #160	; 0xa0
 800715c:	f7ff fc76 	bl	8006a4c <__ssprint_r>
 8007160:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8007164:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007168:	9b04      	ldr	r3, [sp, #16]
 800716a:	bf18      	it	ne
 800716c:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 8007170:	9304      	str	r3, [sp, #16]
 8007172:	9804      	ldr	r0, [sp, #16]
 8007174:	b02d      	add	sp, #180	; 0xb4
 8007176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800717a:	9906      	ldr	r1, [sp, #24]
 800717c:	9802      	ldr	r0, [sp, #8]
 800717e:	1a0d      	subs	r5, r1, r0
 8007180:	2d00      	cmp	r5, #0
 8007182:	f77f af4c 	ble.w	800701e <_svfiprintf_r+0x4d6>
 8007186:	2d10      	cmp	r5, #16
 8007188:	4e65      	ldr	r6, [pc, #404]	; (8007320 <_svfiprintf_r+0x7d8>)
 800718a:	dd1e      	ble.n	80071ca <_svfiprintf_r+0x682>
 800718c:	4621      	mov	r1, r4
 800718e:	f04f 0910 	mov.w	r9, #16
 8007192:	9c07      	ldr	r4, [sp, #28]
 8007194:	e002      	b.n	800719c <_svfiprintf_r+0x654>
 8007196:	3d10      	subs	r5, #16
 8007198:	2d10      	cmp	r5, #16
 800719a:	dd15      	ble.n	80071c8 <_svfiprintf_r+0x680>
 800719c:	3301      	adds	r3, #1
 800719e:	3210      	adds	r2, #16
 80071a0:	e881 0240 	stmia.w	r1, {r6, r9}
 80071a4:	3108      	adds	r1, #8
 80071a6:	2b07      	cmp	r3, #7
 80071a8:	922a      	str	r2, [sp, #168]	; 0xa8
 80071aa:	9329      	str	r3, [sp, #164]	; 0xa4
 80071ac:	ddf3      	ble.n	8007196 <_svfiprintf_r+0x64e>
 80071ae:	4620      	mov	r0, r4
 80071b0:	4651      	mov	r1, sl
 80071b2:	4642      	mov	r2, r8
 80071b4:	f7ff fc4a 	bl	8006a4c <__ssprint_r>
 80071b8:	2800      	cmp	r0, #0
 80071ba:	d1d1      	bne.n	8007160 <_svfiprintf_r+0x618>
 80071bc:	3d10      	subs	r5, #16
 80071be:	2d10      	cmp	r5, #16
 80071c0:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80071c2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80071c4:	a90e      	add	r1, sp, #56	; 0x38
 80071c6:	dce9      	bgt.n	800719c <_svfiprintf_r+0x654>
 80071c8:	460c      	mov	r4, r1
 80071ca:	3301      	adds	r3, #1
 80071cc:	1952      	adds	r2, r2, r5
 80071ce:	2b07      	cmp	r3, #7
 80071d0:	6026      	str	r6, [r4, #0]
 80071d2:	6065      	str	r5, [r4, #4]
 80071d4:	922a      	str	r2, [sp, #168]	; 0xa8
 80071d6:	9329      	str	r3, [sp, #164]	; 0xa4
 80071d8:	f300 80d0 	bgt.w	800737c <_svfiprintf_r+0x834>
 80071dc:	3408      	adds	r4, #8
 80071de:	e71e      	b.n	800701e <_svfiprintf_r+0x4d6>
 80071e0:	9807      	ldr	r0, [sp, #28]
 80071e2:	4651      	mov	r1, sl
 80071e4:	4642      	mov	r2, r8
 80071e6:	f7ff fc31 	bl	8006a4c <__ssprint_r>
 80071ea:	2800      	cmp	r0, #0
 80071ec:	d1b8      	bne.n	8007160 <_svfiprintf_r+0x618>
 80071ee:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80071f0:	a90e      	add	r1, sp, #56	; 0x38
 80071f2:	e75b      	b.n	80070ac <_svfiprintf_r+0x564>
 80071f4:	9807      	ldr	r0, [sp, #28]
 80071f6:	4651      	mov	r1, sl
 80071f8:	4642      	mov	r2, r8
 80071fa:	f7ff fc27 	bl	8006a4c <__ssprint_r>
 80071fe:	2800      	cmp	r0, #0
 8007200:	d090      	beq.n	8007124 <_svfiprintf_r+0x5dc>
 8007202:	e7ad      	b.n	8007160 <_svfiprintf_r+0x618>
 8007204:	9103      	str	r1, [sp, #12]
 8007206:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 800720a:	e580      	b.n	8006d0e <_svfiprintf_r+0x1c6>
 800720c:	9807      	ldr	r0, [sp, #28]
 800720e:	4651      	mov	r1, sl
 8007210:	4642      	mov	r2, r8
 8007212:	f7ff fc1b 	bl	8006a4c <__ssprint_r>
 8007216:	2800      	cmp	r0, #0
 8007218:	d1a2      	bne.n	8007160 <_svfiprintf_r+0x618>
 800721a:	ac0e      	add	r4, sp, #56	; 0x38
 800721c:	e4cd      	b.n	8006bba <_svfiprintf_r+0x72>
 800721e:	9807      	ldr	r0, [sp, #28]
 8007220:	4651      	mov	r1, sl
 8007222:	4642      	mov	r2, r8
 8007224:	f7ff fc12 	bl	8006a4c <__ssprint_r>
 8007228:	2800      	cmp	r0, #0
 800722a:	d199      	bne.n	8007160 <_svfiprintf_r+0x618>
 800722c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800722e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007230:	ac0e      	add	r4, sp, #56	; 0x38
 8007232:	e72d      	b.n	8007090 <_svfiprintf_r+0x548>
 8007234:	9807      	ldr	r0, [sp, #28]
 8007236:	4651      	mov	r1, sl
 8007238:	4642      	mov	r2, r8
 800723a:	f7ff fc07 	bl	8006a4c <__ssprint_r>
 800723e:	2800      	cmp	r0, #0
 8007240:	d18e      	bne.n	8007160 <_svfiprintf_r+0x618>
 8007242:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8007244:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007246:	ac0e      	add	r4, sp, #56	; 0x38
 8007248:	e6d7      	b.n	8006ffa <_svfiprintf_r+0x4b2>
 800724a:	9807      	ldr	r0, [sp, #28]
 800724c:	4651      	mov	r1, sl
 800724e:	4642      	mov	r2, r8
 8007250:	f7ff fbfc 	bl	8006a4c <__ssprint_r>
 8007254:	2800      	cmp	r0, #0
 8007256:	d183      	bne.n	8007160 <_svfiprintf_r+0x618>
 8007258:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800725a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800725c:	ac0e      	add	r4, sp, #56	; 0x38
 800725e:	e6da      	b.n	8007016 <_svfiprintf_r+0x4ce>
 8007260:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007262:	f10d 029f 	add.w	r2, sp, #159	; 0x9f
 8007266:	f003 010f 	and.w	r1, r3, #15
 800726a:	5c70      	ldrb	r0, [r6, r1]
 800726c:	4611      	mov	r1, r2
 800726e:	7010      	strb	r0, [r2, #0]
 8007270:	3a01      	subs	r2, #1
 8007272:	091b      	lsrs	r3, r3, #4
 8007274:	d1f7      	bne.n	8007266 <_svfiprintf_r+0x71e>
 8007276:	ebc1 0308 	rsb	r3, r1, r8
 800727a:	9109      	str	r1, [sp, #36]	; 0x24
 800727c:	9303      	str	r3, [sp, #12]
 800727e:	e546      	b.n	8006d0e <_svfiprintf_r+0x1c6>
 8007280:	2b09      	cmp	r3, #9
 8007282:	bf82      	ittt	hi
 8007284:	f64c 46cd 	movwhi	r6, #52429	; 0xcccd
 8007288:	f10d 019f 	addhi.w	r1, sp, #159	; 0x9f
 800728c:	f6cc 46cc 	movthi	r6, #52428	; 0xcccc
 8007290:	d801      	bhi.n	8007296 <_svfiprintf_r+0x74e>
 8007292:	3330      	adds	r3, #48	; 0x30
 8007294:	e755      	b.n	8007142 <_svfiprintf_r+0x5fa>
 8007296:	fba6 0203 	umull	r0, r2, r6, r3
 800729a:	08d2      	lsrs	r2, r2, #3
 800729c:	eb02 0082 	add.w	r0, r2, r2, lsl #2
 80072a0:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
 80072a4:	4608      	mov	r0, r1
 80072a6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80072aa:	7001      	strb	r1, [r0, #0]
 80072ac:	4613      	mov	r3, r2
 80072ae:	1e41      	subs	r1, r0, #1
 80072b0:	2a00      	cmp	r2, #0
 80072b2:	d1f0      	bne.n	8007296 <_svfiprintf_r+0x74e>
 80072b4:	9009      	str	r0, [sp, #36]	; 0x24
 80072b6:	e527      	b.n	8006d08 <_svfiprintf_r+0x1c0>
 80072b8:	9905      	ldr	r1, [sp, #20]
 80072ba:	f01b 0f40 	tst.w	fp, #64	; 0x40
 80072be:	bf14      	ite	ne
 80072c0:	880b      	ldrhne	r3, [r1, #0]
 80072c2:	680b      	ldreq	r3, [r1, #0]
 80072c4:	2201      	movs	r2, #1
 80072c6:	9805      	ldr	r0, [sp, #20]
 80072c8:	1c19      	adds	r1, r3, #0
 80072ca:	bf18      	it	ne
 80072cc:	2101      	movne	r1, #1
 80072ce:	3004      	adds	r0, #4
 80072d0:	9005      	str	r0, [sp, #20]
 80072d2:	e4f5      	b.n	8006cc0 <_svfiprintf_r+0x178>
 80072d4:	f01b 0140 	ands.w	r1, fp, #64	; 0x40
 80072d8:	bf0b      	itete	eq
 80072da:	9a05      	ldreq	r2, [sp, #20]
 80072dc:	9905      	ldrne	r1, [sp, #20]
 80072de:	6813      	ldreq	r3, [r2, #0]
 80072e0:	880b      	ldrhne	r3, [r1, #0]
 80072e2:	bf08      	it	eq
 80072e4:	460a      	moveq	r2, r1
 80072e6:	e7ee      	b.n	80072c6 <_svfiprintf_r+0x77e>
 80072e8:	2202      	movs	r2, #2
 80072ea:	e4e9      	b.n	8006cc0 <_svfiprintf_r+0x178>
 80072ec:	9807      	ldr	r0, [sp, #28]
 80072ee:	4651      	mov	r1, sl
 80072f0:	4642      	mov	r2, r8
 80072f2:	f7ff fbab 	bl	8006a4c <__ssprint_r>
 80072f6:	2800      	cmp	r0, #0
 80072f8:	f47f af32 	bne.w	8007160 <_svfiprintf_r+0x618>
 80072fc:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80072fe:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007300:	ac0e      	add	r4, sp, #56	; 0x38
 8007302:	e66a      	b.n	8006fda <_svfiprintf_r+0x492>
 8007304:	9a05      	ldr	r2, [sp, #20]
 8007306:	6815      	ldr	r5, [r2, #0]
 8007308:	3204      	adds	r2, #4
 800730a:	2d00      	cmp	r5, #0
 800730c:	bfbc      	itt	lt
 800730e:	9205      	strlt	r2, [sp, #20]
 8007310:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
 8007314:	f6ff ac61 	blt.w	8006bda <_svfiprintf_r+0x92>
 8007318:	9205      	str	r2, [sp, #20]
 800731a:	e45e      	b.n	8006bda <_svfiprintf_r+0x92>
 800731c:	08008788 	.word	0x08008788
 8007320:	08008798 	.word	0x08008798
 8007324:	9807      	ldr	r0, [sp, #28]
 8007326:	4651      	mov	r1, sl
 8007328:	4642      	mov	r2, r8
 800732a:	f7ff fb8f 	bl	8006a4c <__ssprint_r>
 800732e:	2800      	cmp	r0, #0
 8007330:	f47f af16 	bne.w	8007160 <_svfiprintf_r+0x618>
 8007334:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8007336:	e6eb      	b.n	8007110 <_svfiprintf_r+0x5c8>
 8007338:	2930      	cmp	r1, #48	; 0x30
 800733a:	d004      	beq.n	8007346 <_svfiprintf_r+0x7fe>
 800733c:	1e93      	subs	r3, r2, #2
 800733e:	9309      	str	r3, [sp, #36]	; 0x24
 8007340:	2330      	movs	r3, #48	; 0x30
 8007342:	f802 3c02 	strb.w	r3, [r2, #-2]
 8007346:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007348:	ebc3 0308 	rsb	r3, r3, r8
 800734c:	9303      	str	r3, [sp, #12]
 800734e:	e4de      	b.n	8006d0e <_svfiprintf_r+0x1c6>
 8007350:	9805      	ldr	r0, [sp, #20]
 8007352:	9904      	ldr	r1, [sp, #16]
 8007354:	6803      	ldr	r3, [r0, #0]
 8007356:	3004      	adds	r0, #4
 8007358:	9005      	str	r0, [sp, #20]
 800735a:	6019      	str	r1, [r3, #0]
 800735c:	e413      	b.n	8006b86 <_svfiprintf_r+0x3e>
 800735e:	9a05      	ldr	r2, [sp, #20]
 8007360:	6813      	ldr	r3, [r2, #0]
 8007362:	3204      	adds	r2, #4
 8007364:	9205      	str	r2, [sp, #20]
 8007366:	e550      	b.n	8006e0a <_svfiprintf_r+0x2c2>
 8007368:	9905      	ldr	r1, [sp, #20]
 800736a:	880b      	ldrh	r3, [r1, #0]
 800736c:	3104      	adds	r1, #4
 800736e:	9105      	str	r1, [sp, #20]
 8007370:	e52d      	b.n	8006dce <_svfiprintf_r+0x286>
 8007372:	f7ff fb3b 	bl	80069ec <strlen>
 8007376:	9608      	str	r6, [sp, #32]
 8007378:	9003      	str	r0, [sp, #12]
 800737a:	e4c9      	b.n	8006d10 <_svfiprintf_r+0x1c8>
 800737c:	9807      	ldr	r0, [sp, #28]
 800737e:	4651      	mov	r1, sl
 8007380:	4642      	mov	r2, r8
 8007382:	f7ff fb63 	bl	8006a4c <__ssprint_r>
 8007386:	2800      	cmp	r0, #0
 8007388:	f47f aeea 	bne.w	8007160 <_svfiprintf_r+0x618>
 800738c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800738e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007390:	ac0e      	add	r4, sp, #56	; 0x38
 8007392:	e644      	b.n	800701e <_svfiprintf_r+0x4d6>
 8007394:	9905      	ldr	r1, [sp, #20]
 8007396:	9a04      	ldr	r2, [sp, #16]
 8007398:	680b      	ldr	r3, [r1, #0]
 800739a:	3104      	adds	r1, #4
 800739c:	9105      	str	r1, [sp, #20]
 800739e:	601a      	str	r2, [r3, #0]
 80073a0:	f7ff bbf1 	b.w	8006b86 <_svfiprintf_r+0x3e>
 80073a4:	2140      	movs	r1, #64	; 0x40
 80073a6:	9200      	str	r2, [sp, #0]
 80073a8:	f7fe fa6c 	bl	8005884 <_malloc_r>
 80073ac:	9a00      	ldr	r2, [sp, #0]
 80073ae:	f8ca 0000 	str.w	r0, [sl]
 80073b2:	f8ca 0010 	str.w	r0, [sl, #16]
 80073b6:	b188      	cbz	r0, 80073dc <_svfiprintf_r+0x894>
 80073b8:	2340      	movs	r3, #64	; 0x40
 80073ba:	f8ca 3014 	str.w	r3, [sl, #20]
 80073be:	f7ff bbd1 	b.w	8006b64 <_svfiprintf_r+0x1c>
 80073c2:	2d06      	cmp	r5, #6
 80073c4:	bf28      	it	cs
 80073c6:	2506      	movcs	r5, #6
 80073c8:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 80073cc:	9302      	str	r3, [sp, #8]
 80073ce:	4b07      	ldr	r3, [pc, #28]	; (80073ec <_svfiprintf_r+0x8a4>)
 80073d0:	9503      	str	r5, [sp, #12]
 80073d2:	9309      	str	r3, [sp, #36]	; 0x24
 80073d4:	e530      	b.n	8006e38 <_svfiprintf_r+0x2f0>
 80073d6:	9503      	str	r5, [sp, #12]
 80073d8:	9008      	str	r0, [sp, #32]
 80073da:	e499      	b.n	8006d10 <_svfiprintf_r+0x1c8>
 80073dc:	9807      	ldr	r0, [sp, #28]
 80073de:	230c      	movs	r3, #12
 80073e0:	6003      	str	r3, [r0, #0]
 80073e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80073e6:	9304      	str	r3, [sp, #16]
 80073e8:	e6c3      	b.n	8007172 <_svfiprintf_r+0x62a>
 80073ea:	bf00      	nop
 80073ec:	08008900 	.word	0x08008900

080073f0 <_calloc_r>:
 80073f0:	b510      	push	{r4, lr}
 80073f2:	fb01 f102 	mul.w	r1, r1, r2
 80073f6:	f7fe fa45 	bl	8005884 <_malloc_r>
 80073fa:	4604      	mov	r4, r0
 80073fc:	b300      	cbz	r0, 8007440 <_calloc_r+0x50>
 80073fe:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8007402:	f022 0203 	bic.w	r2, r2, #3
 8007406:	3a04      	subs	r2, #4
 8007408:	2a24      	cmp	r2, #36	; 0x24
 800740a:	d81b      	bhi.n	8007444 <_calloc_r+0x54>
 800740c:	2a13      	cmp	r2, #19
 800740e:	bf98      	it	ls
 8007410:	4602      	movls	r2, r0
 8007412:	d911      	bls.n	8007438 <_calloc_r+0x48>
 8007414:	2300      	movs	r3, #0
 8007416:	2a1b      	cmp	r2, #27
 8007418:	6003      	str	r3, [r0, #0]
 800741a:	6043      	str	r3, [r0, #4]
 800741c:	bf98      	it	ls
 800741e:	f100 0208 	addls.w	r2, r0, #8
 8007422:	d909      	bls.n	8007438 <_calloc_r+0x48>
 8007424:	2a24      	cmp	r2, #36	; 0x24
 8007426:	6083      	str	r3, [r0, #8]
 8007428:	60c3      	str	r3, [r0, #12]
 800742a:	bf11      	iteee	ne
 800742c:	f100 0210 	addne.w	r2, r0, #16
 8007430:	6103      	streq	r3, [r0, #16]
 8007432:	6143      	streq	r3, [r0, #20]
 8007434:	f100 0218 	addeq.w	r2, r0, #24
 8007438:	2300      	movs	r3, #0
 800743a:	6013      	str	r3, [r2, #0]
 800743c:	6053      	str	r3, [r2, #4]
 800743e:	6093      	str	r3, [r2, #8]
 8007440:	4620      	mov	r0, r4
 8007442:	bd10      	pop	{r4, pc}
 8007444:	2100      	movs	r1, #0
 8007446:	f000 f85b 	bl	8007500 <memset>
 800744a:	4620      	mov	r0, r4
 800744c:	bd10      	pop	{r4, pc}
 800744e:	bf00      	nop

08007450 <memmove>:
 8007450:	4288      	cmp	r0, r1
 8007452:	b4f0      	push	{r4, r5, r6, r7}
 8007454:	d912      	bls.n	800747c <memmove+0x2c>
 8007456:	188d      	adds	r5, r1, r2
 8007458:	42a8      	cmp	r0, r5
 800745a:	d20f      	bcs.n	800747c <memmove+0x2c>
 800745c:	b162      	cbz	r2, 8007478 <memmove+0x28>
 800745e:	4251      	negs	r1, r2
 8007460:	4613      	mov	r3, r2
 8007462:	1882      	adds	r2, r0, r2
 8007464:	186d      	adds	r5, r5, r1
 8007466:	1852      	adds	r2, r2, r1
 8007468:	18e9      	adds	r1, r5, r3
 800746a:	f811 4c01 	ldrb.w	r4, [r1, #-1]
 800746e:	18d1      	adds	r1, r2, r3
 8007470:	3b01      	subs	r3, #1
 8007472:	f801 4c01 	strb.w	r4, [r1, #-1]
 8007476:	d1f7      	bne.n	8007468 <memmove+0x18>
 8007478:	bcf0      	pop	{r4, r5, r6, r7}
 800747a:	4770      	bx	lr
 800747c:	2a0f      	cmp	r2, #15
 800747e:	bf98      	it	ls
 8007480:	4603      	movls	r3, r0
 8007482:	d931      	bls.n	80074e8 <memmove+0x98>
 8007484:	ea41 0300 	orr.w	r3, r1, r0
 8007488:	079b      	lsls	r3, r3, #30
 800748a:	d137      	bne.n	80074fc <memmove+0xac>
 800748c:	460c      	mov	r4, r1
 800748e:	4603      	mov	r3, r0
 8007490:	4615      	mov	r5, r2
 8007492:	6826      	ldr	r6, [r4, #0]
 8007494:	3d10      	subs	r5, #16
 8007496:	601e      	str	r6, [r3, #0]
 8007498:	6866      	ldr	r6, [r4, #4]
 800749a:	605e      	str	r6, [r3, #4]
 800749c:	68a6      	ldr	r6, [r4, #8]
 800749e:	609e      	str	r6, [r3, #8]
 80074a0:	68e6      	ldr	r6, [r4, #12]
 80074a2:	3410      	adds	r4, #16
 80074a4:	60de      	str	r6, [r3, #12]
 80074a6:	3310      	adds	r3, #16
 80074a8:	2d0f      	cmp	r5, #15
 80074aa:	d8f2      	bhi.n	8007492 <memmove+0x42>
 80074ac:	f1a2 0410 	sub.w	r4, r2, #16
 80074b0:	f024 040f 	bic.w	r4, r4, #15
 80074b4:	f002 020f 	and.w	r2, r2, #15
 80074b8:	3410      	adds	r4, #16
 80074ba:	2a03      	cmp	r2, #3
 80074bc:	eb00 0304 	add.w	r3, r0, r4
 80074c0:	4421      	add	r1, r4
 80074c2:	d911      	bls.n	80074e8 <memmove+0x98>
 80074c4:	1f0e      	subs	r6, r1, #4
 80074c6:	461d      	mov	r5, r3
 80074c8:	4614      	mov	r4, r2
 80074ca:	f856 7f04 	ldr.w	r7, [r6, #4]!
 80074ce:	3c04      	subs	r4, #4
 80074d0:	2c03      	cmp	r4, #3
 80074d2:	f845 7b04 	str.w	r7, [r5], #4
 80074d6:	d8f8      	bhi.n	80074ca <memmove+0x7a>
 80074d8:	1f14      	subs	r4, r2, #4
 80074da:	f024 0403 	bic.w	r4, r4, #3
 80074de:	3404      	adds	r4, #4
 80074e0:	f002 0203 	and.w	r2, r2, #3
 80074e4:	1909      	adds	r1, r1, r4
 80074e6:	191b      	adds	r3, r3, r4
 80074e8:	2a00      	cmp	r2, #0
 80074ea:	d0c5      	beq.n	8007478 <memmove+0x28>
 80074ec:	3901      	subs	r1, #1
 80074ee:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80074f2:	3a01      	subs	r2, #1
 80074f4:	f803 4b01 	strb.w	r4, [r3], #1
 80074f8:	d1f9      	bne.n	80074ee <memmove+0x9e>
 80074fa:	e7bd      	b.n	8007478 <memmove+0x28>
 80074fc:	4603      	mov	r3, r0
 80074fe:	e7f5      	b.n	80074ec <memmove+0x9c>

08007500 <memset>:
 8007500:	f010 0f03 	tst.w	r0, #3
 8007504:	b470      	push	{r4, r5, r6}
 8007506:	4603      	mov	r3, r0
 8007508:	d042      	beq.n	8007590 <memset+0x90>
 800750a:	2a00      	cmp	r2, #0
 800750c:	d03e      	beq.n	800758c <memset+0x8c>
 800750e:	3a01      	subs	r2, #1
 8007510:	b2cd      	uxtb	r5, r1
 8007512:	e003      	b.n	800751c <memset+0x1c>
 8007514:	1e54      	subs	r4, r2, #1
 8007516:	2a00      	cmp	r2, #0
 8007518:	d038      	beq.n	800758c <memset+0x8c>
 800751a:	4622      	mov	r2, r4
 800751c:	f803 5b01 	strb.w	r5, [r3], #1
 8007520:	f013 0f03 	tst.w	r3, #3
 8007524:	461c      	mov	r4, r3
 8007526:	d1f5      	bne.n	8007514 <memset+0x14>
 8007528:	2a03      	cmp	r2, #3
 800752a:	d929      	bls.n	8007580 <memset+0x80>
 800752c:	b2cd      	uxtb	r5, r1
 800752e:	2a0f      	cmp	r2, #15
 8007530:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8007534:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8007538:	bf84      	itt	hi
 800753a:	4623      	movhi	r3, r4
 800753c:	4616      	movhi	r6, r2
 800753e:	d911      	bls.n	8007564 <memset+0x64>
 8007540:	3e10      	subs	r6, #16
 8007542:	601d      	str	r5, [r3, #0]
 8007544:	605d      	str	r5, [r3, #4]
 8007546:	609d      	str	r5, [r3, #8]
 8007548:	60dd      	str	r5, [r3, #12]
 800754a:	3310      	adds	r3, #16
 800754c:	2e0f      	cmp	r6, #15
 800754e:	d8f7      	bhi.n	8007540 <memset+0x40>
 8007550:	f1a2 0310 	sub.w	r3, r2, #16
 8007554:	f023 030f 	bic.w	r3, r3, #15
 8007558:	f002 020f 	and.w	r2, r2, #15
 800755c:	3310      	adds	r3, #16
 800755e:	2a03      	cmp	r2, #3
 8007560:	441c      	add	r4, r3
 8007562:	d90d      	bls.n	8007580 <memset+0x80>
 8007564:	4626      	mov	r6, r4
 8007566:	4613      	mov	r3, r2
 8007568:	3b04      	subs	r3, #4
 800756a:	2b03      	cmp	r3, #3
 800756c:	f846 5b04 	str.w	r5, [r6], #4
 8007570:	d8fa      	bhi.n	8007568 <memset+0x68>
 8007572:	1f13      	subs	r3, r2, #4
 8007574:	f023 0303 	bic.w	r3, r3, #3
 8007578:	3304      	adds	r3, #4
 800757a:	f002 0203 	and.w	r2, r2, #3
 800757e:	18e4      	adds	r4, r4, r3
 8007580:	b2c9      	uxtb	r1, r1
 8007582:	b11a      	cbz	r2, 800758c <memset+0x8c>
 8007584:	3a01      	subs	r2, #1
 8007586:	f804 1b01 	strb.w	r1, [r4], #1
 800758a:	d1fb      	bne.n	8007584 <memset+0x84>
 800758c:	bc70      	pop	{r4, r5, r6}
 800758e:	4770      	bx	lr
 8007590:	4604      	mov	r4, r0
 8007592:	e7c9      	b.n	8007528 <memset+0x28>

08007594 <_realloc_r>:
 8007594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007598:	460c      	mov	r4, r1
 800759a:	b083      	sub	sp, #12
 800759c:	4607      	mov	r7, r0
 800759e:	4690      	mov	r8, r2
 80075a0:	2900      	cmp	r1, #0
 80075a2:	f000 8137 	beq.w	8007814 <_realloc_r+0x280>
 80075a6:	f108 050b 	add.w	r5, r8, #11
 80075aa:	f7fe fc8d 	bl	8005ec8 <__malloc_lock>
 80075ae:	2d16      	cmp	r5, #22
 80075b0:	f854 1c04 	ldr.w	r1, [r4, #-4]
 80075b4:	f200 809b 	bhi.w	80076ee <_realloc_r+0x15a>
 80075b8:	2210      	movs	r2, #16
 80075ba:	2600      	movs	r6, #0
 80075bc:	4615      	mov	r5, r2
 80075be:	4545      	cmp	r5, r8
 80075c0:	bf38      	it	cc
 80075c2:	f046 0601 	orrcc.w	r6, r6, #1
 80075c6:	2e00      	cmp	r6, #0
 80075c8:	f040 812a 	bne.w	8007820 <_realloc_r+0x28c>
 80075cc:	f021 0a03 	bic.w	sl, r1, #3
 80075d0:	4592      	cmp	sl, r2
 80075d2:	f1a4 0b08 	sub.w	fp, r4, #8
 80075d6:	bfa8      	it	ge
 80075d8:	4656      	movge	r6, sl
 80075da:	da71      	bge.n	80076c0 <_realloc_r+0x12c>
 80075dc:	4ba3      	ldr	r3, [pc, #652]	; (800786c <_realloc_r+0x2d8>)
 80075de:	eb0b 000a 	add.w	r0, fp, sl
 80075e2:	f8d3 c008 	ldr.w	ip, [r3, #8]
 80075e6:	4584      	cmp	ip, r0
 80075e8:	f000 811f 	beq.w	800782a <_realloc_r+0x296>
 80075ec:	f8d0 e004 	ldr.w	lr, [r0, #4]
 80075f0:	f02e 0901 	bic.w	r9, lr, #1
 80075f4:	4481      	add	r9, r0
 80075f6:	f8d9 9004 	ldr.w	r9, [r9, #4]
 80075fa:	f019 0f01 	tst.w	r9, #1
 80075fe:	bf1c      	itt	ne
 8007600:	46b6      	movne	lr, r6
 8007602:	4670      	movne	r0, lr
 8007604:	d078      	beq.n	80076f8 <_realloc_r+0x164>
 8007606:	07c9      	lsls	r1, r1, #31
 8007608:	f100 8094 	bmi.w	8007734 <_realloc_r+0x1a0>
 800760c:	f854 1c08 	ldr.w	r1, [r4, #-8]
 8007610:	ebc1 090b 	rsb	r9, r1, fp
 8007614:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007618:	f021 0103 	bic.w	r1, r1, #3
 800761c:	2800      	cmp	r0, #0
 800761e:	f000 80b2 	beq.w	8007786 <_realloc_r+0x1f2>
 8007622:	4560      	cmp	r0, ip
 8007624:	eb01 0c0a 	add.w	ip, r1, sl
 8007628:	eb0e 060c 	add.w	r6, lr, ip
 800762c:	f000 8154 	beq.w	80078d8 <_realloc_r+0x344>
 8007630:	42b2      	cmp	r2, r6
 8007632:	f300 80aa 	bgt.w	800778a <_realloc_r+0x1f6>
 8007636:	68c3      	ldr	r3, [r0, #12]
 8007638:	6882      	ldr	r2, [r0, #8]
 800763a:	46c8      	mov	r8, r9
 800763c:	609a      	str	r2, [r3, #8]
 800763e:	60d3      	str	r3, [r2, #12]
 8007640:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8007644:	f858 1f08 	ldr.w	r1, [r8, #8]!
 8007648:	f1aa 0204 	sub.w	r2, sl, #4
 800764c:	2a24      	cmp	r2, #36	; 0x24
 800764e:	60cb      	str	r3, [r1, #12]
 8007650:	6099      	str	r1, [r3, #8]
 8007652:	f200 817e 	bhi.w	8007952 <_realloc_r+0x3be>
 8007656:	2a13      	cmp	r2, #19
 8007658:	bf9c      	itt	ls
 800765a:	4643      	movls	r3, r8
 800765c:	4622      	movls	r2, r4
 800765e:	d925      	bls.n	80076ac <_realloc_r+0x118>
 8007660:	6823      	ldr	r3, [r4, #0]
 8007662:	2a1b      	cmp	r2, #27
 8007664:	f8c9 3008 	str.w	r3, [r9, #8]
 8007668:	6863      	ldr	r3, [r4, #4]
 800766a:	bf98      	it	ls
 800766c:	f104 0208 	addls.w	r2, r4, #8
 8007670:	f8c9 300c 	str.w	r3, [r9, #12]
 8007674:	bf98      	it	ls
 8007676:	f109 0310 	addls.w	r3, r9, #16
 800767a:	d917      	bls.n	80076ac <_realloc_r+0x118>
 800767c:	68a3      	ldr	r3, [r4, #8]
 800767e:	2a24      	cmp	r2, #36	; 0x24
 8007680:	f8c9 3010 	str.w	r3, [r9, #16]
 8007684:	68e3      	ldr	r3, [r4, #12]
 8007686:	bf18      	it	ne
 8007688:	f104 0210 	addne.w	r2, r4, #16
 800768c:	f8c9 3014 	str.w	r3, [r9, #20]
 8007690:	bf09      	itett	eq
 8007692:	6922      	ldreq	r2, [r4, #16]
 8007694:	f109 0318 	addne.w	r3, r9, #24
 8007698:	f8c9 2018 	streq.w	r2, [r9, #24]
 800769c:	6961      	ldreq	r1, [r4, #20]
 800769e:	bf02      	ittt	eq
 80076a0:	f109 0320 	addeq.w	r3, r9, #32
 80076a4:	f104 0218 	addeq.w	r2, r4, #24
 80076a8:	f8c9 101c 	streq.w	r1, [r9, #28]
 80076ac:	6811      	ldr	r1, [r2, #0]
 80076ae:	4644      	mov	r4, r8
 80076b0:	6019      	str	r1, [r3, #0]
 80076b2:	6851      	ldr	r1, [r2, #4]
 80076b4:	46cb      	mov	fp, r9
 80076b6:	6059      	str	r1, [r3, #4]
 80076b8:	6892      	ldr	r2, [r2, #8]
 80076ba:	609a      	str	r2, [r3, #8]
 80076bc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80076c0:	1b72      	subs	r2, r6, r5
 80076c2:	2a0f      	cmp	r2, #15
 80076c4:	f001 0101 	and.w	r1, r1, #1
 80076c8:	d821      	bhi.n	800770e <_realloc_r+0x17a>
 80076ca:	4331      	orrs	r1, r6
 80076cc:	f8cb 1004 	str.w	r1, [fp, #4]
 80076d0:	44b3      	add	fp, r6
 80076d2:	f8db 3004 	ldr.w	r3, [fp, #4]
 80076d6:	f043 0301 	orr.w	r3, r3, #1
 80076da:	f8cb 3004 	str.w	r3, [fp, #4]
 80076de:	4638      	mov	r0, r7
 80076e0:	f7fe fbf4 	bl	8005ecc <__malloc_unlock>
 80076e4:	46a0      	mov	r8, r4
 80076e6:	4640      	mov	r0, r8
 80076e8:	b003      	add	sp, #12
 80076ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076ee:	f025 0507 	bic.w	r5, r5, #7
 80076f2:	462a      	mov	r2, r5
 80076f4:	0fee      	lsrs	r6, r5, #31
 80076f6:	e762      	b.n	80075be <_realloc_r+0x2a>
 80076f8:	f02e 0e03 	bic.w	lr, lr, #3
 80076fc:	eb0e 060a 	add.w	r6, lr, sl
 8007700:	42b2      	cmp	r2, r6
 8007702:	dc80      	bgt.n	8007606 <_realloc_r+0x72>
 8007704:	68c3      	ldr	r3, [r0, #12]
 8007706:	6882      	ldr	r2, [r0, #8]
 8007708:	60d3      	str	r3, [r2, #12]
 800770a:	609a      	str	r2, [r3, #8]
 800770c:	e7d8      	b.n	80076c0 <_realloc_r+0x12c>
 800770e:	eb0b 0305 	add.w	r3, fp, r5
 8007712:	f042 0001 	orr.w	r0, r2, #1
 8007716:	430d      	orrs	r5, r1
 8007718:	f8cb 5004 	str.w	r5, [fp, #4]
 800771c:	189a      	adds	r2, r3, r2
 800771e:	6058      	str	r0, [r3, #4]
 8007720:	6851      	ldr	r1, [r2, #4]
 8007722:	4638      	mov	r0, r7
 8007724:	f041 0101 	orr.w	r1, r1, #1
 8007728:	6051      	str	r1, [r2, #4]
 800772a:	f103 0108 	add.w	r1, r3, #8
 800772e:	f7fd ff9f 	bl	8005670 <_free_r>
 8007732:	e7d4      	b.n	80076de <_realloc_r+0x14a>
 8007734:	4641      	mov	r1, r8
 8007736:	4638      	mov	r0, r7
 8007738:	f7fe f8a4 	bl	8005884 <_malloc_r>
 800773c:	4680      	mov	r8, r0
 800773e:	b1f0      	cbz	r0, 800777e <_realloc_r+0x1ea>
 8007740:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8007744:	f1a0 0208 	sub.w	r2, r0, #8
 8007748:	f021 0301 	bic.w	r3, r1, #1
 800774c:	445b      	add	r3, fp
 800774e:	429a      	cmp	r2, r3
 8007750:	f000 80f9 	beq.w	8007946 <_realloc_r+0x3b2>
 8007754:	f1aa 0204 	sub.w	r2, sl, #4
 8007758:	2a24      	cmp	r2, #36	; 0x24
 800775a:	f200 80b9 	bhi.w	80078d0 <_realloc_r+0x33c>
 800775e:	2a13      	cmp	r2, #19
 8007760:	bf9c      	itt	ls
 8007762:	4603      	movls	r3, r0
 8007764:	4622      	movls	r2, r4
 8007766:	f200 8083 	bhi.w	8007870 <_realloc_r+0x2dc>
 800776a:	6811      	ldr	r1, [r2, #0]
 800776c:	6019      	str	r1, [r3, #0]
 800776e:	6851      	ldr	r1, [r2, #4]
 8007770:	6059      	str	r1, [r3, #4]
 8007772:	6892      	ldr	r2, [r2, #8]
 8007774:	609a      	str	r2, [r3, #8]
 8007776:	4638      	mov	r0, r7
 8007778:	4621      	mov	r1, r4
 800777a:	f7fd ff79 	bl	8005670 <_free_r>
 800777e:	4638      	mov	r0, r7
 8007780:	f7fe fba4 	bl	8005ecc <__malloc_unlock>
 8007784:	e7af      	b.n	80076e6 <_realloc_r+0x152>
 8007786:	eb01 0c0a 	add.w	ip, r1, sl
 800778a:	4562      	cmp	r2, ip
 800778c:	dcd2      	bgt.n	8007734 <_realloc_r+0x1a0>
 800778e:	464e      	mov	r6, r9
 8007790:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8007794:	f856 1f08 	ldr.w	r1, [r6, #8]!
 8007798:	f1aa 0204 	sub.w	r2, sl, #4
 800779c:	2a24      	cmp	r2, #36	; 0x24
 800779e:	60cb      	str	r3, [r1, #12]
 80077a0:	6099      	str	r1, [r3, #8]
 80077a2:	f200 8087 	bhi.w	80078b4 <_realloc_r+0x320>
 80077a6:	2a13      	cmp	r2, #19
 80077a8:	bf9c      	itt	ls
 80077aa:	4633      	movls	r3, r6
 80077ac:	4622      	movls	r2, r4
 80077ae:	d925      	bls.n	80077fc <_realloc_r+0x268>
 80077b0:	6823      	ldr	r3, [r4, #0]
 80077b2:	2a1b      	cmp	r2, #27
 80077b4:	f8c9 3008 	str.w	r3, [r9, #8]
 80077b8:	6863      	ldr	r3, [r4, #4]
 80077ba:	bf98      	it	ls
 80077bc:	f104 0208 	addls.w	r2, r4, #8
 80077c0:	f8c9 300c 	str.w	r3, [r9, #12]
 80077c4:	bf98      	it	ls
 80077c6:	f109 0310 	addls.w	r3, r9, #16
 80077ca:	d917      	bls.n	80077fc <_realloc_r+0x268>
 80077cc:	68a3      	ldr	r3, [r4, #8]
 80077ce:	2a24      	cmp	r2, #36	; 0x24
 80077d0:	f8c9 3010 	str.w	r3, [r9, #16]
 80077d4:	68e3      	ldr	r3, [r4, #12]
 80077d6:	bf18      	it	ne
 80077d8:	f104 0210 	addne.w	r2, r4, #16
 80077dc:	f8c9 3014 	str.w	r3, [r9, #20]
 80077e0:	bf09      	itett	eq
 80077e2:	6922      	ldreq	r2, [r4, #16]
 80077e4:	f109 0318 	addne.w	r3, r9, #24
 80077e8:	f8c9 2018 	streq.w	r2, [r9, #24]
 80077ec:	6961      	ldreq	r1, [r4, #20]
 80077ee:	bf02      	ittt	eq
 80077f0:	f109 0320 	addeq.w	r3, r9, #32
 80077f4:	f104 0218 	addeq.w	r2, r4, #24
 80077f8:	f8c9 101c 	streq.w	r1, [r9, #28]
 80077fc:	6811      	ldr	r1, [r2, #0]
 80077fe:	4634      	mov	r4, r6
 8007800:	6019      	str	r1, [r3, #0]
 8007802:	6851      	ldr	r1, [r2, #4]
 8007804:	4666      	mov	r6, ip
 8007806:	6059      	str	r1, [r3, #4]
 8007808:	6892      	ldr	r2, [r2, #8]
 800780a:	46cb      	mov	fp, r9
 800780c:	609a      	str	r2, [r3, #8]
 800780e:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007812:	e755      	b.n	80076c0 <_realloc_r+0x12c>
 8007814:	4611      	mov	r1, r2
 8007816:	b003      	add	sp, #12
 8007818:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800781c:	f7fe b832 	b.w	8005884 <_malloc_r>
 8007820:	230c      	movs	r3, #12
 8007822:	603b      	str	r3, [r7, #0]
 8007824:	f04f 0800 	mov.w	r8, #0
 8007828:	e75d      	b.n	80076e6 <_realloc_r+0x152>
 800782a:	f8dc 6004 	ldr.w	r6, [ip, #4]
 800782e:	f105 0910 	add.w	r9, r5, #16
 8007832:	f026 0e03 	bic.w	lr, r6, #3
 8007836:	eb0e 000a 	add.w	r0, lr, sl
 800783a:	4548      	cmp	r0, r9
 800783c:	bfb8      	it	lt
 800783e:	4660      	movlt	r0, ip
 8007840:	f6ff aee1 	blt.w	8007606 <_realloc_r+0x72>
 8007844:	1b41      	subs	r1, r0, r5
 8007846:	eb0b 0205 	add.w	r2, fp, r5
 800784a:	f041 0101 	orr.w	r1, r1, #1
 800784e:	6051      	str	r1, [r2, #4]
 8007850:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8007854:	4638      	mov	r0, r7
 8007856:	f001 0101 	and.w	r1, r1, #1
 800785a:	430d      	orrs	r5, r1
 800785c:	f844 5c04 	str.w	r5, [r4, #-4]
 8007860:	609a      	str	r2, [r3, #8]
 8007862:	46a0      	mov	r8, r4
 8007864:	f7fe fb32 	bl	8005ecc <__malloc_unlock>
 8007868:	e73d      	b.n	80076e6 <_realloc_r+0x152>
 800786a:	bf00      	nop
 800786c:	2000054c 	.word	0x2000054c
 8007870:	6823      	ldr	r3, [r4, #0]
 8007872:	2a1b      	cmp	r2, #27
 8007874:	6003      	str	r3, [r0, #0]
 8007876:	6863      	ldr	r3, [r4, #4]
 8007878:	bf98      	it	ls
 800787a:	f104 0208 	addls.w	r2, r4, #8
 800787e:	6043      	str	r3, [r0, #4]
 8007880:	bf98      	it	ls
 8007882:	f100 0308 	addls.w	r3, r0, #8
 8007886:	f67f af70 	bls.w	800776a <_realloc_r+0x1d6>
 800788a:	68a3      	ldr	r3, [r4, #8]
 800788c:	2a24      	cmp	r2, #36	; 0x24
 800788e:	6083      	str	r3, [r0, #8]
 8007890:	68e3      	ldr	r3, [r4, #12]
 8007892:	bf18      	it	ne
 8007894:	f104 0210 	addne.w	r2, r4, #16
 8007898:	60c3      	str	r3, [r0, #12]
 800789a:	bf09      	itett	eq
 800789c:	6922      	ldreq	r2, [r4, #16]
 800789e:	f100 0310 	addne.w	r3, r0, #16
 80078a2:	6102      	streq	r2, [r0, #16]
 80078a4:	6961      	ldreq	r1, [r4, #20]
 80078a6:	bf02      	ittt	eq
 80078a8:	f100 0318 	addeq.w	r3, r0, #24
 80078ac:	f104 0218 	addeq.w	r2, r4, #24
 80078b0:	6141      	streq	r1, [r0, #20]
 80078b2:	e75a      	b.n	800776a <_realloc_r+0x1d6>
 80078b4:	4621      	mov	r1, r4
 80078b6:	4630      	mov	r0, r6
 80078b8:	f8cd c004 	str.w	ip, [sp, #4]
 80078bc:	f7ff fdc8 	bl	8007450 <memmove>
 80078c0:	f8dd c004 	ldr.w	ip, [sp, #4]
 80078c4:	4634      	mov	r4, r6
 80078c6:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80078ca:	4666      	mov	r6, ip
 80078cc:	46cb      	mov	fp, r9
 80078ce:	e6f7      	b.n	80076c0 <_realloc_r+0x12c>
 80078d0:	4621      	mov	r1, r4
 80078d2:	f7ff fdbd 	bl	8007450 <memmove>
 80078d6:	e74e      	b.n	8007776 <_realloc_r+0x1e2>
 80078d8:	f105 0110 	add.w	r1, r5, #16
 80078dc:	428e      	cmp	r6, r1
 80078de:	f6ff af54 	blt.w	800778a <_realloc_r+0x1f6>
 80078e2:	46c8      	mov	r8, r9
 80078e4:	f8d9 100c 	ldr.w	r1, [r9, #12]
 80078e8:	f858 0f08 	ldr.w	r0, [r8, #8]!
 80078ec:	f1aa 0204 	sub.w	r2, sl, #4
 80078f0:	2a24      	cmp	r2, #36	; 0x24
 80078f2:	60c1      	str	r1, [r0, #12]
 80078f4:	6088      	str	r0, [r1, #8]
 80078f6:	d835      	bhi.n	8007964 <_realloc_r+0x3d0>
 80078f8:	2a13      	cmp	r2, #19
 80078fa:	bf98      	it	ls
 80078fc:	4642      	movls	r2, r8
 80078fe:	d90a      	bls.n	8007916 <_realloc_r+0x382>
 8007900:	6821      	ldr	r1, [r4, #0]
 8007902:	2a1b      	cmp	r2, #27
 8007904:	f8c9 1008 	str.w	r1, [r9, #8]
 8007908:	6861      	ldr	r1, [r4, #4]
 800790a:	f8c9 100c 	str.w	r1, [r9, #12]
 800790e:	d830      	bhi.n	8007972 <_realloc_r+0x3de>
 8007910:	f109 0210 	add.w	r2, r9, #16
 8007914:	3408      	adds	r4, #8
 8007916:	6821      	ldr	r1, [r4, #0]
 8007918:	6011      	str	r1, [r2, #0]
 800791a:	6861      	ldr	r1, [r4, #4]
 800791c:	6051      	str	r1, [r2, #4]
 800791e:	68a1      	ldr	r1, [r4, #8]
 8007920:	6091      	str	r1, [r2, #8]
 8007922:	1b71      	subs	r1, r6, r5
 8007924:	eb09 0205 	add.w	r2, r9, r5
 8007928:	f041 0101 	orr.w	r1, r1, #1
 800792c:	6051      	str	r1, [r2, #4]
 800792e:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007932:	4638      	mov	r0, r7
 8007934:	f001 0101 	and.w	r1, r1, #1
 8007938:	430d      	orrs	r5, r1
 800793a:	f8c9 5004 	str.w	r5, [r9, #4]
 800793e:	609a      	str	r2, [r3, #8]
 8007940:	f7fe fac4 	bl	8005ecc <__malloc_unlock>
 8007944:	e6cf      	b.n	80076e6 <_realloc_r+0x152>
 8007946:	f850 6c04 	ldr.w	r6, [r0, #-4]
 800794a:	f026 0603 	bic.w	r6, r6, #3
 800794e:	4456      	add	r6, sl
 8007950:	e6b6      	b.n	80076c0 <_realloc_r+0x12c>
 8007952:	4621      	mov	r1, r4
 8007954:	4640      	mov	r0, r8
 8007956:	f7ff fd7b 	bl	8007450 <memmove>
 800795a:	4644      	mov	r4, r8
 800795c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007960:	46cb      	mov	fp, r9
 8007962:	e6ad      	b.n	80076c0 <_realloc_r+0x12c>
 8007964:	4640      	mov	r0, r8
 8007966:	4621      	mov	r1, r4
 8007968:	9301      	str	r3, [sp, #4]
 800796a:	f7ff fd71 	bl	8007450 <memmove>
 800796e:	9b01      	ldr	r3, [sp, #4]
 8007970:	e7d7      	b.n	8007922 <_realloc_r+0x38e>
 8007972:	68a1      	ldr	r1, [r4, #8]
 8007974:	2a24      	cmp	r2, #36	; 0x24
 8007976:	f8c9 1010 	str.w	r1, [r9, #16]
 800797a:	68e1      	ldr	r1, [r4, #12]
 800797c:	f8c9 1014 	str.w	r1, [r9, #20]
 8007980:	d003      	beq.n	800798a <_realloc_r+0x3f6>
 8007982:	f109 0218 	add.w	r2, r9, #24
 8007986:	3410      	adds	r4, #16
 8007988:	e7c5      	b.n	8007916 <_realloc_r+0x382>
 800798a:	6921      	ldr	r1, [r4, #16]
 800798c:	f109 0220 	add.w	r2, r9, #32
 8007990:	f8c9 1018 	str.w	r1, [r9, #24]
 8007994:	6961      	ldr	r1, [r4, #20]
 8007996:	3418      	adds	r4, #24
 8007998:	f8c9 101c 	str.w	r1, [r9, #28]
 800799c:	e7bb      	b.n	8007916 <_realloc_r+0x382>
 800799e:	bf00      	nop

080079a0 <__aeabi_drsub>:
 80079a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80079a4:	e002      	b.n	80079ac <__adddf3>
 80079a6:	bf00      	nop

080079a8 <__aeabi_dsub>:
 80079a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080079ac <__adddf3>:
 80079ac:	b530      	push	{r4, r5, lr}
 80079ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80079b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80079b6:	ea94 0f05 	teq	r4, r5
 80079ba:	bf08      	it	eq
 80079bc:	ea90 0f02 	teqeq	r0, r2
 80079c0:	bf1f      	itttt	ne
 80079c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80079c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80079ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80079ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80079d2:	f000 80e2 	beq.w	8007b9a <__adddf3+0x1ee>
 80079d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80079da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80079de:	bfb8      	it	lt
 80079e0:	426d      	neglt	r5, r5
 80079e2:	dd0c      	ble.n	80079fe <__adddf3+0x52>
 80079e4:	442c      	add	r4, r5
 80079e6:	ea80 0202 	eor.w	r2, r0, r2
 80079ea:	ea81 0303 	eor.w	r3, r1, r3
 80079ee:	ea82 0000 	eor.w	r0, r2, r0
 80079f2:	ea83 0101 	eor.w	r1, r3, r1
 80079f6:	ea80 0202 	eor.w	r2, r0, r2
 80079fa:	ea81 0303 	eor.w	r3, r1, r3
 80079fe:	2d36      	cmp	r5, #54	; 0x36
 8007a00:	bf88      	it	hi
 8007a02:	bd30      	pophi	{r4, r5, pc}
 8007a04:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8007a08:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8007a0c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8007a10:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8007a14:	d002      	beq.n	8007a1c <__adddf3+0x70>
 8007a16:	4240      	negs	r0, r0
 8007a18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8007a1c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8007a20:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8007a24:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8007a28:	d002      	beq.n	8007a30 <__adddf3+0x84>
 8007a2a:	4252      	negs	r2, r2
 8007a2c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8007a30:	ea94 0f05 	teq	r4, r5
 8007a34:	f000 80a7 	beq.w	8007b86 <__adddf3+0x1da>
 8007a38:	f1a4 0401 	sub.w	r4, r4, #1
 8007a3c:	f1d5 0e20 	rsbs	lr, r5, #32
 8007a40:	db0d      	blt.n	8007a5e <__adddf3+0xb2>
 8007a42:	fa02 fc0e 	lsl.w	ip, r2, lr
 8007a46:	fa22 f205 	lsr.w	r2, r2, r5
 8007a4a:	1880      	adds	r0, r0, r2
 8007a4c:	f141 0100 	adc.w	r1, r1, #0
 8007a50:	fa03 f20e 	lsl.w	r2, r3, lr
 8007a54:	1880      	adds	r0, r0, r2
 8007a56:	fa43 f305 	asr.w	r3, r3, r5
 8007a5a:	4159      	adcs	r1, r3
 8007a5c:	e00e      	b.n	8007a7c <__adddf3+0xd0>
 8007a5e:	f1a5 0520 	sub.w	r5, r5, #32
 8007a62:	f10e 0e20 	add.w	lr, lr, #32
 8007a66:	2a01      	cmp	r2, #1
 8007a68:	fa03 fc0e 	lsl.w	ip, r3, lr
 8007a6c:	bf28      	it	cs
 8007a6e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8007a72:	fa43 f305 	asr.w	r3, r3, r5
 8007a76:	18c0      	adds	r0, r0, r3
 8007a78:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8007a7c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8007a80:	d507      	bpl.n	8007a92 <__adddf3+0xe6>
 8007a82:	f04f 0e00 	mov.w	lr, #0
 8007a86:	f1dc 0c00 	rsbs	ip, ip, #0
 8007a8a:	eb7e 0000 	sbcs.w	r0, lr, r0
 8007a8e:	eb6e 0101 	sbc.w	r1, lr, r1
 8007a92:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8007a96:	d31b      	bcc.n	8007ad0 <__adddf3+0x124>
 8007a98:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8007a9c:	d30c      	bcc.n	8007ab8 <__adddf3+0x10c>
 8007a9e:	0849      	lsrs	r1, r1, #1
 8007aa0:	ea5f 0030 	movs.w	r0, r0, rrx
 8007aa4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8007aa8:	f104 0401 	add.w	r4, r4, #1
 8007aac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8007ab0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8007ab4:	f080 809a 	bcs.w	8007bec <__adddf3+0x240>
 8007ab8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8007abc:	bf08      	it	eq
 8007abe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8007ac2:	f150 0000 	adcs.w	r0, r0, #0
 8007ac6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8007aca:	ea41 0105 	orr.w	r1, r1, r5
 8007ace:	bd30      	pop	{r4, r5, pc}
 8007ad0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8007ad4:	4140      	adcs	r0, r0
 8007ad6:	eb41 0101 	adc.w	r1, r1, r1
 8007ada:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8007ade:	f1a4 0401 	sub.w	r4, r4, #1
 8007ae2:	d1e9      	bne.n	8007ab8 <__adddf3+0x10c>
 8007ae4:	f091 0f00 	teq	r1, #0
 8007ae8:	bf04      	itt	eq
 8007aea:	4601      	moveq	r1, r0
 8007aec:	2000      	moveq	r0, #0
 8007aee:	fab1 f381 	clz	r3, r1
 8007af2:	bf08      	it	eq
 8007af4:	3320      	addeq	r3, #32
 8007af6:	f1a3 030b 	sub.w	r3, r3, #11
 8007afa:	f1b3 0220 	subs.w	r2, r3, #32
 8007afe:	da0c      	bge.n	8007b1a <__adddf3+0x16e>
 8007b00:	320c      	adds	r2, #12
 8007b02:	dd08      	ble.n	8007b16 <__adddf3+0x16a>
 8007b04:	f102 0c14 	add.w	ip, r2, #20
 8007b08:	f1c2 020c 	rsb	r2, r2, #12
 8007b0c:	fa01 f00c 	lsl.w	r0, r1, ip
 8007b10:	fa21 f102 	lsr.w	r1, r1, r2
 8007b14:	e00c      	b.n	8007b30 <__adddf3+0x184>
 8007b16:	f102 0214 	add.w	r2, r2, #20
 8007b1a:	bfd8      	it	le
 8007b1c:	f1c2 0c20 	rsble	ip, r2, #32
 8007b20:	fa01 f102 	lsl.w	r1, r1, r2
 8007b24:	fa20 fc0c 	lsr.w	ip, r0, ip
 8007b28:	bfdc      	itt	le
 8007b2a:	ea41 010c 	orrle.w	r1, r1, ip
 8007b2e:	4090      	lslle	r0, r2
 8007b30:	1ae4      	subs	r4, r4, r3
 8007b32:	bfa2      	ittt	ge
 8007b34:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8007b38:	4329      	orrge	r1, r5
 8007b3a:	bd30      	popge	{r4, r5, pc}
 8007b3c:	ea6f 0404 	mvn.w	r4, r4
 8007b40:	3c1f      	subs	r4, #31
 8007b42:	da1c      	bge.n	8007b7e <__adddf3+0x1d2>
 8007b44:	340c      	adds	r4, #12
 8007b46:	dc0e      	bgt.n	8007b66 <__adddf3+0x1ba>
 8007b48:	f104 0414 	add.w	r4, r4, #20
 8007b4c:	f1c4 0220 	rsb	r2, r4, #32
 8007b50:	fa20 f004 	lsr.w	r0, r0, r4
 8007b54:	fa01 f302 	lsl.w	r3, r1, r2
 8007b58:	ea40 0003 	orr.w	r0, r0, r3
 8007b5c:	fa21 f304 	lsr.w	r3, r1, r4
 8007b60:	ea45 0103 	orr.w	r1, r5, r3
 8007b64:	bd30      	pop	{r4, r5, pc}
 8007b66:	f1c4 040c 	rsb	r4, r4, #12
 8007b6a:	f1c4 0220 	rsb	r2, r4, #32
 8007b6e:	fa20 f002 	lsr.w	r0, r0, r2
 8007b72:	fa01 f304 	lsl.w	r3, r1, r4
 8007b76:	ea40 0003 	orr.w	r0, r0, r3
 8007b7a:	4629      	mov	r1, r5
 8007b7c:	bd30      	pop	{r4, r5, pc}
 8007b7e:	fa21 f004 	lsr.w	r0, r1, r4
 8007b82:	4629      	mov	r1, r5
 8007b84:	bd30      	pop	{r4, r5, pc}
 8007b86:	f094 0f00 	teq	r4, #0
 8007b8a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8007b8e:	bf06      	itte	eq
 8007b90:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8007b94:	3401      	addeq	r4, #1
 8007b96:	3d01      	subne	r5, #1
 8007b98:	e74e      	b.n	8007a38 <__adddf3+0x8c>
 8007b9a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8007b9e:	bf18      	it	ne
 8007ba0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8007ba4:	d029      	beq.n	8007bfa <__adddf3+0x24e>
 8007ba6:	ea94 0f05 	teq	r4, r5
 8007baa:	bf08      	it	eq
 8007bac:	ea90 0f02 	teqeq	r0, r2
 8007bb0:	d005      	beq.n	8007bbe <__adddf3+0x212>
 8007bb2:	ea54 0c00 	orrs.w	ip, r4, r0
 8007bb6:	bf04      	itt	eq
 8007bb8:	4619      	moveq	r1, r3
 8007bba:	4610      	moveq	r0, r2
 8007bbc:	bd30      	pop	{r4, r5, pc}
 8007bbe:	ea91 0f03 	teq	r1, r3
 8007bc2:	bf1e      	ittt	ne
 8007bc4:	2100      	movne	r1, #0
 8007bc6:	2000      	movne	r0, #0
 8007bc8:	bd30      	popne	{r4, r5, pc}
 8007bca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8007bce:	d105      	bne.n	8007bdc <__adddf3+0x230>
 8007bd0:	0040      	lsls	r0, r0, #1
 8007bd2:	4149      	adcs	r1, r1
 8007bd4:	bf28      	it	cs
 8007bd6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8007bda:	bd30      	pop	{r4, r5, pc}
 8007bdc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8007be0:	bf3c      	itt	cc
 8007be2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8007be6:	bd30      	popcc	{r4, r5, pc}
 8007be8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8007bec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8007bf0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007bf4:	f04f 0000 	mov.w	r0, #0
 8007bf8:	bd30      	pop	{r4, r5, pc}
 8007bfa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8007bfe:	bf1a      	itte	ne
 8007c00:	4619      	movne	r1, r3
 8007c02:	4610      	movne	r0, r2
 8007c04:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8007c08:	bf1c      	itt	ne
 8007c0a:	460b      	movne	r3, r1
 8007c0c:	4602      	movne	r2, r0
 8007c0e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8007c12:	bf06      	itte	eq
 8007c14:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8007c18:	ea91 0f03 	teqeq	r1, r3
 8007c1c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8007c20:	bd30      	pop	{r4, r5, pc}
 8007c22:	bf00      	nop

08007c24 <__aeabi_ui2d>:
 8007c24:	f090 0f00 	teq	r0, #0
 8007c28:	bf04      	itt	eq
 8007c2a:	2100      	moveq	r1, #0
 8007c2c:	4770      	bxeq	lr
 8007c2e:	b530      	push	{r4, r5, lr}
 8007c30:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8007c34:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8007c38:	f04f 0500 	mov.w	r5, #0
 8007c3c:	f04f 0100 	mov.w	r1, #0
 8007c40:	e750      	b.n	8007ae4 <__adddf3+0x138>
 8007c42:	bf00      	nop

08007c44 <__aeabi_i2d>:
 8007c44:	f090 0f00 	teq	r0, #0
 8007c48:	bf04      	itt	eq
 8007c4a:	2100      	moveq	r1, #0
 8007c4c:	4770      	bxeq	lr
 8007c4e:	b530      	push	{r4, r5, lr}
 8007c50:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8007c54:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8007c58:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8007c5c:	bf48      	it	mi
 8007c5e:	4240      	negmi	r0, r0
 8007c60:	f04f 0100 	mov.w	r1, #0
 8007c64:	e73e      	b.n	8007ae4 <__adddf3+0x138>
 8007c66:	bf00      	nop

08007c68 <__aeabi_f2d>:
 8007c68:	0042      	lsls	r2, r0, #1
 8007c6a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8007c6e:	ea4f 0131 	mov.w	r1, r1, rrx
 8007c72:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8007c76:	bf1f      	itttt	ne
 8007c78:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8007c7c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8007c80:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8007c84:	4770      	bxne	lr
 8007c86:	f092 0f00 	teq	r2, #0
 8007c8a:	bf14      	ite	ne
 8007c8c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8007c90:	4770      	bxeq	lr
 8007c92:	b530      	push	{r4, r5, lr}
 8007c94:	f44f 7460 	mov.w	r4, #896	; 0x380
 8007c98:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8007c9c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007ca0:	e720      	b.n	8007ae4 <__adddf3+0x138>
 8007ca2:	bf00      	nop

08007ca4 <__aeabi_ul2d>:
 8007ca4:	ea50 0201 	orrs.w	r2, r0, r1
 8007ca8:	bf08      	it	eq
 8007caa:	4770      	bxeq	lr
 8007cac:	b530      	push	{r4, r5, lr}
 8007cae:	f04f 0500 	mov.w	r5, #0
 8007cb2:	e00a      	b.n	8007cca <__aeabi_l2d+0x16>

08007cb4 <__aeabi_l2d>:
 8007cb4:	ea50 0201 	orrs.w	r2, r0, r1
 8007cb8:	bf08      	it	eq
 8007cba:	4770      	bxeq	lr
 8007cbc:	b530      	push	{r4, r5, lr}
 8007cbe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8007cc2:	d502      	bpl.n	8007cca <__aeabi_l2d+0x16>
 8007cc4:	4240      	negs	r0, r0
 8007cc6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8007cca:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8007cce:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8007cd2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8007cd6:	f43f aedc 	beq.w	8007a92 <__adddf3+0xe6>
 8007cda:	f04f 0203 	mov.w	r2, #3
 8007cde:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8007ce2:	bf18      	it	ne
 8007ce4:	3203      	addne	r2, #3
 8007ce6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8007cea:	bf18      	it	ne
 8007cec:	3203      	addne	r2, #3
 8007cee:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8007cf2:	f1c2 0320 	rsb	r3, r2, #32
 8007cf6:	fa00 fc03 	lsl.w	ip, r0, r3
 8007cfa:	fa20 f002 	lsr.w	r0, r0, r2
 8007cfe:	fa01 fe03 	lsl.w	lr, r1, r3
 8007d02:	ea40 000e 	orr.w	r0, r0, lr
 8007d06:	fa21 f102 	lsr.w	r1, r1, r2
 8007d0a:	4414      	add	r4, r2
 8007d0c:	e6c1      	b.n	8007a92 <__adddf3+0xe6>
 8007d0e:	bf00      	nop

08007d10 <__aeabi_dmul>:
 8007d10:	b570      	push	{r4, r5, r6, lr}
 8007d12:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8007d16:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8007d1a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8007d1e:	bf1d      	ittte	ne
 8007d20:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8007d24:	ea94 0f0c 	teqne	r4, ip
 8007d28:	ea95 0f0c 	teqne	r5, ip
 8007d2c:	f000 f8de 	bleq	8007eec <__aeabi_dmul+0x1dc>
 8007d30:	442c      	add	r4, r5
 8007d32:	ea81 0603 	eor.w	r6, r1, r3
 8007d36:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8007d3a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8007d3e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8007d42:	bf18      	it	ne
 8007d44:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8007d48:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007d4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007d50:	d038      	beq.n	8007dc4 <__aeabi_dmul+0xb4>
 8007d52:	fba0 ce02 	umull	ip, lr, r0, r2
 8007d56:	f04f 0500 	mov.w	r5, #0
 8007d5a:	fbe1 e502 	umlal	lr, r5, r1, r2
 8007d5e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8007d62:	fbe0 e503 	umlal	lr, r5, r0, r3
 8007d66:	f04f 0600 	mov.w	r6, #0
 8007d6a:	fbe1 5603 	umlal	r5, r6, r1, r3
 8007d6e:	f09c 0f00 	teq	ip, #0
 8007d72:	bf18      	it	ne
 8007d74:	f04e 0e01 	orrne.w	lr, lr, #1
 8007d78:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8007d7c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8007d80:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8007d84:	d204      	bcs.n	8007d90 <__aeabi_dmul+0x80>
 8007d86:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8007d8a:	416d      	adcs	r5, r5
 8007d8c:	eb46 0606 	adc.w	r6, r6, r6
 8007d90:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8007d94:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8007d98:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8007d9c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8007da0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8007da4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8007da8:	bf88      	it	hi
 8007daa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8007dae:	d81e      	bhi.n	8007dee <__aeabi_dmul+0xde>
 8007db0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8007db4:	bf08      	it	eq
 8007db6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8007dba:	f150 0000 	adcs.w	r0, r0, #0
 8007dbe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8007dc2:	bd70      	pop	{r4, r5, r6, pc}
 8007dc4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8007dc8:	ea46 0101 	orr.w	r1, r6, r1
 8007dcc:	ea40 0002 	orr.w	r0, r0, r2
 8007dd0:	ea81 0103 	eor.w	r1, r1, r3
 8007dd4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8007dd8:	bfc2      	ittt	gt
 8007dda:	ebd4 050c 	rsbsgt	r5, r4, ip
 8007dde:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8007de2:	bd70      	popgt	{r4, r5, r6, pc}
 8007de4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007de8:	f04f 0e00 	mov.w	lr, #0
 8007dec:	3c01      	subs	r4, #1
 8007dee:	f300 80ab 	bgt.w	8007f48 <__aeabi_dmul+0x238>
 8007df2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8007df6:	bfde      	ittt	le
 8007df8:	2000      	movle	r0, #0
 8007dfa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8007dfe:	bd70      	pople	{r4, r5, r6, pc}
 8007e00:	f1c4 0400 	rsb	r4, r4, #0
 8007e04:	3c20      	subs	r4, #32
 8007e06:	da35      	bge.n	8007e74 <__aeabi_dmul+0x164>
 8007e08:	340c      	adds	r4, #12
 8007e0a:	dc1b      	bgt.n	8007e44 <__aeabi_dmul+0x134>
 8007e0c:	f104 0414 	add.w	r4, r4, #20
 8007e10:	f1c4 0520 	rsb	r5, r4, #32
 8007e14:	fa00 f305 	lsl.w	r3, r0, r5
 8007e18:	fa20 f004 	lsr.w	r0, r0, r4
 8007e1c:	fa01 f205 	lsl.w	r2, r1, r5
 8007e20:	ea40 0002 	orr.w	r0, r0, r2
 8007e24:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8007e28:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007e2c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8007e30:	fa21 f604 	lsr.w	r6, r1, r4
 8007e34:	eb42 0106 	adc.w	r1, r2, r6
 8007e38:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8007e3c:	bf08      	it	eq
 8007e3e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8007e42:	bd70      	pop	{r4, r5, r6, pc}
 8007e44:	f1c4 040c 	rsb	r4, r4, #12
 8007e48:	f1c4 0520 	rsb	r5, r4, #32
 8007e4c:	fa00 f304 	lsl.w	r3, r0, r4
 8007e50:	fa20 f005 	lsr.w	r0, r0, r5
 8007e54:	fa01 f204 	lsl.w	r2, r1, r4
 8007e58:	ea40 0002 	orr.w	r0, r0, r2
 8007e5c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8007e60:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8007e64:	f141 0100 	adc.w	r1, r1, #0
 8007e68:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8007e6c:	bf08      	it	eq
 8007e6e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8007e72:	bd70      	pop	{r4, r5, r6, pc}
 8007e74:	f1c4 0520 	rsb	r5, r4, #32
 8007e78:	fa00 f205 	lsl.w	r2, r0, r5
 8007e7c:	ea4e 0e02 	orr.w	lr, lr, r2
 8007e80:	fa20 f304 	lsr.w	r3, r0, r4
 8007e84:	fa01 f205 	lsl.w	r2, r1, r5
 8007e88:	ea43 0302 	orr.w	r3, r3, r2
 8007e8c:	fa21 f004 	lsr.w	r0, r1, r4
 8007e90:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8007e94:	fa21 f204 	lsr.w	r2, r1, r4
 8007e98:	ea20 0002 	bic.w	r0, r0, r2
 8007e9c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8007ea0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8007ea4:	bf08      	it	eq
 8007ea6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8007eaa:	bd70      	pop	{r4, r5, r6, pc}
 8007eac:	f094 0f00 	teq	r4, #0
 8007eb0:	d10f      	bne.n	8007ed2 <__aeabi_dmul+0x1c2>
 8007eb2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8007eb6:	0040      	lsls	r0, r0, #1
 8007eb8:	eb41 0101 	adc.w	r1, r1, r1
 8007ebc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8007ec0:	bf08      	it	eq
 8007ec2:	3c01      	subeq	r4, #1
 8007ec4:	d0f7      	beq.n	8007eb6 <__aeabi_dmul+0x1a6>
 8007ec6:	ea41 0106 	orr.w	r1, r1, r6
 8007eca:	f095 0f00 	teq	r5, #0
 8007ece:	bf18      	it	ne
 8007ed0:	4770      	bxne	lr
 8007ed2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8007ed6:	0052      	lsls	r2, r2, #1
 8007ed8:	eb43 0303 	adc.w	r3, r3, r3
 8007edc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8007ee0:	bf08      	it	eq
 8007ee2:	3d01      	subeq	r5, #1
 8007ee4:	d0f7      	beq.n	8007ed6 <__aeabi_dmul+0x1c6>
 8007ee6:	ea43 0306 	orr.w	r3, r3, r6
 8007eea:	4770      	bx	lr
 8007eec:	ea94 0f0c 	teq	r4, ip
 8007ef0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8007ef4:	bf18      	it	ne
 8007ef6:	ea95 0f0c 	teqne	r5, ip
 8007efa:	d00c      	beq.n	8007f16 <__aeabi_dmul+0x206>
 8007efc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8007f00:	bf18      	it	ne
 8007f02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8007f06:	d1d1      	bne.n	8007eac <__aeabi_dmul+0x19c>
 8007f08:	ea81 0103 	eor.w	r1, r1, r3
 8007f0c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8007f10:	f04f 0000 	mov.w	r0, #0
 8007f14:	bd70      	pop	{r4, r5, r6, pc}
 8007f16:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8007f1a:	bf06      	itte	eq
 8007f1c:	4610      	moveq	r0, r2
 8007f1e:	4619      	moveq	r1, r3
 8007f20:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8007f24:	d019      	beq.n	8007f5a <__aeabi_dmul+0x24a>
 8007f26:	ea94 0f0c 	teq	r4, ip
 8007f2a:	d102      	bne.n	8007f32 <__aeabi_dmul+0x222>
 8007f2c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8007f30:	d113      	bne.n	8007f5a <__aeabi_dmul+0x24a>
 8007f32:	ea95 0f0c 	teq	r5, ip
 8007f36:	d105      	bne.n	8007f44 <__aeabi_dmul+0x234>
 8007f38:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8007f3c:	bf1c      	itt	ne
 8007f3e:	4610      	movne	r0, r2
 8007f40:	4619      	movne	r1, r3
 8007f42:	d10a      	bne.n	8007f5a <__aeabi_dmul+0x24a>
 8007f44:	ea81 0103 	eor.w	r1, r1, r3
 8007f48:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8007f4c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8007f50:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007f54:	f04f 0000 	mov.w	r0, #0
 8007f58:	bd70      	pop	{r4, r5, r6, pc}
 8007f5a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8007f5e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8007f62:	bd70      	pop	{r4, r5, r6, pc}

08007f64 <__aeabi_ddiv>:
 8007f64:	b570      	push	{r4, r5, r6, lr}
 8007f66:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8007f6a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8007f6e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8007f72:	bf1d      	ittte	ne
 8007f74:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8007f78:	ea94 0f0c 	teqne	r4, ip
 8007f7c:	ea95 0f0c 	teqne	r5, ip
 8007f80:	f000 f8a7 	bleq	80080d2 <__aeabi_ddiv+0x16e>
 8007f84:	eba4 0405 	sub.w	r4, r4, r5
 8007f88:	ea81 0e03 	eor.w	lr, r1, r3
 8007f8c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8007f90:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8007f94:	f000 8088 	beq.w	80080a8 <__aeabi_ddiv+0x144>
 8007f98:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8007f9c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8007fa0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8007fa4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8007fa8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8007fac:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8007fb0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8007fb4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8007fb8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8007fbc:	429d      	cmp	r5, r3
 8007fbe:	bf08      	it	eq
 8007fc0:	4296      	cmpeq	r6, r2
 8007fc2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8007fc6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8007fca:	d202      	bcs.n	8007fd2 <__aeabi_ddiv+0x6e>
 8007fcc:	085b      	lsrs	r3, r3, #1
 8007fce:	ea4f 0232 	mov.w	r2, r2, rrx
 8007fd2:	1ab6      	subs	r6, r6, r2
 8007fd4:	eb65 0503 	sbc.w	r5, r5, r3
 8007fd8:	085b      	lsrs	r3, r3, #1
 8007fda:	ea4f 0232 	mov.w	r2, r2, rrx
 8007fde:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8007fe2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8007fe6:	ebb6 0e02 	subs.w	lr, r6, r2
 8007fea:	eb75 0e03 	sbcs.w	lr, r5, r3
 8007fee:	bf22      	ittt	cs
 8007ff0:	1ab6      	subcs	r6, r6, r2
 8007ff2:	4675      	movcs	r5, lr
 8007ff4:	ea40 000c 	orrcs.w	r0, r0, ip
 8007ff8:	085b      	lsrs	r3, r3, #1
 8007ffa:	ea4f 0232 	mov.w	r2, r2, rrx
 8007ffe:	ebb6 0e02 	subs.w	lr, r6, r2
 8008002:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008006:	bf22      	ittt	cs
 8008008:	1ab6      	subcs	r6, r6, r2
 800800a:	4675      	movcs	r5, lr
 800800c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008010:	085b      	lsrs	r3, r3, #1
 8008012:	ea4f 0232 	mov.w	r2, r2, rrx
 8008016:	ebb6 0e02 	subs.w	lr, r6, r2
 800801a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800801e:	bf22      	ittt	cs
 8008020:	1ab6      	subcs	r6, r6, r2
 8008022:	4675      	movcs	r5, lr
 8008024:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008028:	085b      	lsrs	r3, r3, #1
 800802a:	ea4f 0232 	mov.w	r2, r2, rrx
 800802e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008032:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008036:	bf22      	ittt	cs
 8008038:	1ab6      	subcs	r6, r6, r2
 800803a:	4675      	movcs	r5, lr
 800803c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008040:	ea55 0e06 	orrs.w	lr, r5, r6
 8008044:	d018      	beq.n	8008078 <__aeabi_ddiv+0x114>
 8008046:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800804a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800804e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8008052:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8008056:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800805a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800805e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8008062:	d1c0      	bne.n	8007fe6 <__aeabi_ddiv+0x82>
 8008064:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008068:	d10b      	bne.n	8008082 <__aeabi_ddiv+0x11e>
 800806a:	ea41 0100 	orr.w	r1, r1, r0
 800806e:	f04f 0000 	mov.w	r0, #0
 8008072:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8008076:	e7b6      	b.n	8007fe6 <__aeabi_ddiv+0x82>
 8008078:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800807c:	bf04      	itt	eq
 800807e:	4301      	orreq	r1, r0
 8008080:	2000      	moveq	r0, #0
 8008082:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8008086:	bf88      	it	hi
 8008088:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800808c:	f63f aeaf 	bhi.w	8007dee <__aeabi_dmul+0xde>
 8008090:	ebb5 0c03 	subs.w	ip, r5, r3
 8008094:	bf04      	itt	eq
 8008096:	ebb6 0c02 	subseq.w	ip, r6, r2
 800809a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800809e:	f150 0000 	adcs.w	r0, r0, #0
 80080a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80080a6:	bd70      	pop	{r4, r5, r6, pc}
 80080a8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80080ac:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80080b0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80080b4:	bfc2      	ittt	gt
 80080b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80080ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80080be:	bd70      	popgt	{r4, r5, r6, pc}
 80080c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80080c4:	f04f 0e00 	mov.w	lr, #0
 80080c8:	3c01      	subs	r4, #1
 80080ca:	e690      	b.n	8007dee <__aeabi_dmul+0xde>
 80080cc:	ea45 0e06 	orr.w	lr, r5, r6
 80080d0:	e68d      	b.n	8007dee <__aeabi_dmul+0xde>
 80080d2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80080d6:	ea94 0f0c 	teq	r4, ip
 80080da:	bf08      	it	eq
 80080dc:	ea95 0f0c 	teqeq	r5, ip
 80080e0:	f43f af3b 	beq.w	8007f5a <__aeabi_dmul+0x24a>
 80080e4:	ea94 0f0c 	teq	r4, ip
 80080e8:	d10a      	bne.n	8008100 <__aeabi_ddiv+0x19c>
 80080ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80080ee:	f47f af34 	bne.w	8007f5a <__aeabi_dmul+0x24a>
 80080f2:	ea95 0f0c 	teq	r5, ip
 80080f6:	f47f af25 	bne.w	8007f44 <__aeabi_dmul+0x234>
 80080fa:	4610      	mov	r0, r2
 80080fc:	4619      	mov	r1, r3
 80080fe:	e72c      	b.n	8007f5a <__aeabi_dmul+0x24a>
 8008100:	ea95 0f0c 	teq	r5, ip
 8008104:	d106      	bne.n	8008114 <__aeabi_ddiv+0x1b0>
 8008106:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800810a:	f43f aefd 	beq.w	8007f08 <__aeabi_dmul+0x1f8>
 800810e:	4610      	mov	r0, r2
 8008110:	4619      	mov	r1, r3
 8008112:	e722      	b.n	8007f5a <__aeabi_dmul+0x24a>
 8008114:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008118:	bf18      	it	ne
 800811a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800811e:	f47f aec5 	bne.w	8007eac <__aeabi_dmul+0x19c>
 8008122:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8008126:	f47f af0d 	bne.w	8007f44 <__aeabi_dmul+0x234>
 800812a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800812e:	f47f aeeb 	bne.w	8007f08 <__aeabi_dmul+0x1f8>
 8008132:	e712      	b.n	8007f5a <__aeabi_dmul+0x24a>

08008134 <__gedf2>:
 8008134:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8008138:	e006      	b.n	8008148 <__cmpdf2+0x4>
 800813a:	bf00      	nop

0800813c <__ledf2>:
 800813c:	f04f 0c01 	mov.w	ip, #1
 8008140:	e002      	b.n	8008148 <__cmpdf2+0x4>
 8008142:	bf00      	nop

08008144 <__cmpdf2>:
 8008144:	f04f 0c01 	mov.w	ip, #1
 8008148:	f84d cd04 	str.w	ip, [sp, #-4]!
 800814c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008150:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008154:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008158:	bf18      	it	ne
 800815a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800815e:	d01b      	beq.n	8008198 <__cmpdf2+0x54>
 8008160:	b001      	add	sp, #4
 8008162:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8008166:	bf0c      	ite	eq
 8008168:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800816c:	ea91 0f03 	teqne	r1, r3
 8008170:	bf02      	ittt	eq
 8008172:	ea90 0f02 	teqeq	r0, r2
 8008176:	2000      	moveq	r0, #0
 8008178:	4770      	bxeq	lr
 800817a:	f110 0f00 	cmn.w	r0, #0
 800817e:	ea91 0f03 	teq	r1, r3
 8008182:	bf58      	it	pl
 8008184:	4299      	cmppl	r1, r3
 8008186:	bf08      	it	eq
 8008188:	4290      	cmpeq	r0, r2
 800818a:	bf2c      	ite	cs
 800818c:	17d8      	asrcs	r0, r3, #31
 800818e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8008192:	f040 0001 	orr.w	r0, r0, #1
 8008196:	4770      	bx	lr
 8008198:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800819c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80081a0:	d102      	bne.n	80081a8 <__cmpdf2+0x64>
 80081a2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80081a6:	d107      	bne.n	80081b8 <__cmpdf2+0x74>
 80081a8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80081ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80081b0:	d1d6      	bne.n	8008160 <__cmpdf2+0x1c>
 80081b2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80081b6:	d0d3      	beq.n	8008160 <__cmpdf2+0x1c>
 80081b8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80081bc:	4770      	bx	lr
 80081be:	bf00      	nop

080081c0 <__aeabi_cdrcmple>:
 80081c0:	4684      	mov	ip, r0
 80081c2:	4610      	mov	r0, r2
 80081c4:	4662      	mov	r2, ip
 80081c6:	468c      	mov	ip, r1
 80081c8:	4619      	mov	r1, r3
 80081ca:	4663      	mov	r3, ip
 80081cc:	e000      	b.n	80081d0 <__aeabi_cdcmpeq>
 80081ce:	bf00      	nop

080081d0 <__aeabi_cdcmpeq>:
 80081d0:	b501      	push	{r0, lr}
 80081d2:	f7ff ffb7 	bl	8008144 <__cmpdf2>
 80081d6:	2800      	cmp	r0, #0
 80081d8:	bf48      	it	mi
 80081da:	f110 0f00 	cmnmi.w	r0, #0
 80081de:	bd01      	pop	{r0, pc}

080081e0 <__aeabi_dcmpeq>:
 80081e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80081e4:	f7ff fff4 	bl	80081d0 <__aeabi_cdcmpeq>
 80081e8:	bf0c      	ite	eq
 80081ea:	2001      	moveq	r0, #1
 80081ec:	2000      	movne	r0, #0
 80081ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80081f2:	bf00      	nop

080081f4 <__aeabi_dcmplt>:
 80081f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80081f8:	f7ff ffea 	bl	80081d0 <__aeabi_cdcmpeq>
 80081fc:	bf34      	ite	cc
 80081fe:	2001      	movcc	r0, #1
 8008200:	2000      	movcs	r0, #0
 8008202:	f85d fb08 	ldr.w	pc, [sp], #8
 8008206:	bf00      	nop

08008208 <__aeabi_dcmple>:
 8008208:	f84d ed08 	str.w	lr, [sp, #-8]!
 800820c:	f7ff ffe0 	bl	80081d0 <__aeabi_cdcmpeq>
 8008210:	bf94      	ite	ls
 8008212:	2001      	movls	r0, #1
 8008214:	2000      	movhi	r0, #0
 8008216:	f85d fb08 	ldr.w	pc, [sp], #8
 800821a:	bf00      	nop

0800821c <__aeabi_dcmpge>:
 800821c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008220:	f7ff ffce 	bl	80081c0 <__aeabi_cdrcmple>
 8008224:	bf94      	ite	ls
 8008226:	2001      	movls	r0, #1
 8008228:	2000      	movhi	r0, #0
 800822a:	f85d fb08 	ldr.w	pc, [sp], #8
 800822e:	bf00      	nop

08008230 <__aeabi_dcmpgt>:
 8008230:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008234:	f7ff ffc4 	bl	80081c0 <__aeabi_cdrcmple>
 8008238:	bf34      	ite	cc
 800823a:	2001      	movcc	r0, #1
 800823c:	2000      	movcs	r0, #0
 800823e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008242:	bf00      	nop

08008244 <__aeabi_d2iz>:
 8008244:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008248:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800824c:	d215      	bcs.n	800827a <__aeabi_d2iz+0x36>
 800824e:	d511      	bpl.n	8008274 <__aeabi_d2iz+0x30>
 8008250:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8008254:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8008258:	d912      	bls.n	8008280 <__aeabi_d2iz+0x3c>
 800825a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800825e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008262:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8008266:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800826a:	fa23 f002 	lsr.w	r0, r3, r2
 800826e:	bf18      	it	ne
 8008270:	4240      	negne	r0, r0
 8008272:	4770      	bx	lr
 8008274:	f04f 0000 	mov.w	r0, #0
 8008278:	4770      	bx	lr
 800827a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800827e:	d105      	bne.n	800828c <__aeabi_d2iz+0x48>
 8008280:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8008284:	bf08      	it	eq
 8008286:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800828a:	4770      	bx	lr
 800828c:	f04f 0000 	mov.w	r0, #0
 8008290:	4770      	bx	lr
 8008292:	bf00      	nop

08008294 <main>:
#include "ST7032i.h"


ST7032i lcd;

int main(void) {
 8008294:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008298:	b09f      	sub	sp, #124	; 0x7c
	uint16_t bits;
	uint32_t intval = 40;
	uint32_t tnow;
	char tmp[92];

	TIM2_timer_start();
 800829a:	f7f9 ff53 	bl	8002144 <TIM2_timer_start>

	usart_begin(&Serial3, PB11, PB10, 19200);
 800829e:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
 80082a2:	f240 220a 	movw	r2, #522	; 0x20a
 80082a6:	48bc      	ldr	r0, [pc, #752]	; (8008598 <main+0x304>)
 80082a8:	f240 210b 	movw	r1, #523	; 0x20b
 80082ac:	f7fa fbd7 	bl	8002a5e <usart_begin>
	usart_print(&Serial3,
 80082b0:	48b9      	ldr	r0, [pc, #740]	; (8008598 <main+0x304>)
 80082b2:	49ba      	ldr	r1, [pc, #744]	; (800859c <main+0x308>)
 80082b4:	f7fa fd18 	bl	8002ce8 <usart_print>
			"Happy are those who know they are spiritually poor; \n");
	usart_print(&Serial3, "The kingdom of heaven belongs to them!\n");
 80082b8:	48b7      	ldr	r0, [pc, #732]	; (8008598 <main+0x304>)
 80082ba:	49b9      	ldr	r1, [pc, #740]	; (80085a0 <main+0x30c>)
 80082bc:	f7fa fd14 	bl	8002ce8 <usart_print>
	usart_print(&Serial3, "How many eyes does Mississipi river have?\n");
 80082c0:	48b5      	ldr	r0, [pc, #724]	; (8008598 <main+0x304>)
 80082c2:	49b8      	ldr	r1, [pc, #736]	; (80085a4 <main+0x310>)
 80082c4:	f7fa fd10 	bl	8002ce8 <usart_print>
	usart_print(&Serial3, "Quick brown fox jumped over the lazy dog!\n");
 80082c8:	49b7      	ldr	r1, [pc, #732]	; (80085a8 <main+0x314>)
 80082ca:	48b3      	ldr	r0, [pc, #716]	; (8008598 <main+0x304>)
 80082cc:	f7fa fd0c 	bl	8002ce8 <usart_print>
	usart_flush(&Serial3);
 80082d0:	48b1      	ldr	r0, [pc, #708]	; (8008598 <main+0x304>)
 80082d2:	f7fa fd21 	bl	8002d18 <usart_flush>

	RCC_ClocksTypeDef RCC_Clocks;
	RCC_GetClocksFreq(&RCC_Clocks);
 80082d6:	a81a      	add	r0, sp, #104	; 0x68
 80082d8:	f7f8 fb5c 	bl	8000994 <RCC_GetClocksFreq>

	sprintf(tmp, "SYSCLK = %ld, ", RCC_Clocks.SYSCLK_Frequency);
 80082dc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80082de:	49b3      	ldr	r1, [pc, #716]	; (80085ac <main+0x318>)
 80082e0:	a803      	add	r0, sp, #12
 80082e2:	f7fb f839 	bl	8003358 <sprintf>
	usart_print(&Serial3, tmp);
 80082e6:	48ac      	ldr	r0, [pc, #688]	; (8008598 <main+0x304>)
 80082e8:	a903      	add	r1, sp, #12
 80082ea:	f7fa fcfd 	bl	8002ce8 <usart_print>
	sprintf(tmp, "HCLK = %ld, ", RCC_Clocks.HCLK_Frequency);
 80082ee:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80082f0:	49af      	ldr	r1, [pc, #700]	; (80085b0 <main+0x31c>)
 80082f2:	a803      	add	r0, sp, #12
 80082f4:	f7fb f830 	bl	8003358 <sprintf>
	usart_print(&Serial3, tmp);
 80082f8:	48a7      	ldr	r0, [pc, #668]	; (8008598 <main+0x304>)
 80082fa:	a903      	add	r1, sp, #12
 80082fc:	f7fa fcf4 	bl	8002ce8 <usart_print>
	sprintf(tmp, "PCLK1 = %ld, ", RCC_Clocks.PCLK1_Frequency);
 8008300:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008302:	49ac      	ldr	r1, [pc, #688]	; (80085b4 <main+0x320>)
 8008304:	a803      	add	r0, sp, #12
 8008306:	f7fb f827 	bl	8003358 <sprintf>
	usart_print(&Serial3, tmp);
 800830a:	48a3      	ldr	r0, [pc, #652]	; (8008598 <main+0x304>)
 800830c:	a903      	add	r1, sp, #12
 800830e:	f7fa fceb 	bl	8002ce8 <usart_print>
	sprintf(tmp, "PCLK2 = %ld\r\n", RCC_Clocks.PCLK2_Frequency);
 8008312:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008314:	49a8      	ldr	r1, [pc, #672]	; (80085b8 <main+0x324>)
 8008316:	a803      	add	r0, sp, #12
 8008318:	f7fb f81e 	bl	8003358 <sprintf>
	usart_print(&Serial3, tmp);
 800831c:	a903      	add	r1, sp, #12
 800831e:	489e      	ldr	r0, [pc, #632]	; (8008598 <main+0x304>)
 8008320:	f7fa fce2 	bl	8002ce8 <usart_print>
//	usart_flush(USART2Serial);

	GPIOMode(PinPort(PD12),
 8008324:	f240 400c 	movw	r0, #1036	; 0x40c
 8008328:	f7f9 ffa4 	bl	8002274 <PinPort>
 800832c:	4604      	mov	r4, r0
			(PinBit(PD12) | PinBit(PD13) | PinBit(PD14) | PinBit(PD15)), OUTPUT,
 800832e:	f240 400c 	movw	r0, #1036	; 0x40c
 8008332:	f7f9 ffa7 	bl	8002284 <PinBit>
 8008336:	4605      	mov	r5, r0
 8008338:	f240 400d 	movw	r0, #1037	; 0x40d
 800833c:	f7f9 ffa2 	bl	8002284 <PinBit>
	usart_print(&Serial3, tmp);
	sprintf(tmp, "PCLK2 = %ld\r\n", RCC_Clocks.PCLK2_Frequency);
	usart_print(&Serial3, tmp);
//	usart_flush(USART2Serial);

	GPIOMode(PinPort(PD12),
 8008340:	4305      	orrs	r5, r0
			(PinBit(PD12) | PinBit(PD13) | PinBit(PD14) | PinBit(PD15)), OUTPUT,
 8008342:	f240 400e 	movw	r0, #1038	; 0x40e
 8008346:	f7f9 ff9d 	bl	8002284 <PinBit>
	usart_print(&Serial3, tmp);
	sprintf(tmp, "PCLK2 = %ld\r\n", RCC_Clocks.PCLK2_Frequency);
	usart_print(&Serial3, tmp);
//	usart_flush(USART2Serial);

	GPIOMode(PinPort(PD12),
 800834a:	b2ad      	uxth	r5, r5
 800834c:	4305      	orrs	r5, r0
			(PinBit(PD12) | PinBit(PD13) | PinBit(PD14) | PinBit(PD15)), OUTPUT,
 800834e:	f240 400f 	movw	r0, #1039	; 0x40f
 8008352:	f7f9 ff97 	bl	8002284 <PinBit>
	usart_print(&Serial3, tmp);
	sprintf(tmp, "PCLK2 = %ld\r\n", RCC_Clocks.PCLK2_Frequency);
	usart_print(&Serial3, tmp);
//	usart_flush(USART2Serial);

	GPIOMode(PinPort(PD12),
 8008356:	b2ad      	uxth	r5, r5
 8008358:	2300      	movs	r3, #0
 800835a:	ea45 0100 	orr.w	r1, r5, r0
 800835e:	2201      	movs	r2, #1
 8008360:	4620      	mov	r0, r4
 8008362:	9300      	str	r3, [sp, #0]
 8008364:	9301      	str	r3, [sp, #4]
 8008366:	b289      	uxth	r1, r1
 8008368:	2302      	movs	r3, #2
 800836a:	f7f9 fff7 	bl	800235c <GPIOMode>
			(PinBit(PD12) | PinBit(PD13) | PinBit(PD14) | PinBit(PD15)), OUTPUT,
			FASTSPEED, PUSHPULL, NOPULL);
	spi_begin(SPI2, PB13, PB14, PB15, PB12);
 800836e:	f44f 7403 	mov.w	r4, #524	; 0x20c
 8008372:	f240 220e 	movw	r2, #526	; 0x20e
 8008376:	f240 230f 	movw	r3, #527	; 0x20f
 800837a:	4890      	ldr	r0, [pc, #576]	; (80085bc <main+0x328>)
 800837c:	9400      	str	r4, [sp, #0]
 800837e:	f240 210d 	movw	r1, #525	; 0x20d
 8008382:	f7fa f9ff 	bl	8002784 <spi_begin>
	digitalWrite(PB12, HIGH);
 8008386:	4620      	mov	r0, r4
 8008388:	2101      	movs	r1, #1
 800838a:	f7f9 ffab 	bl	80022e4 <digitalWrite>

	i2c_begin(&Wire1, 100000);
 800838e:	498c      	ldr	r1, [pc, #560]	; (80085c0 <main+0x32c>)
 8008390:	488c      	ldr	r0, [pc, #560]	; (80085c4 <main+0x330>)
 8008392:	f7fa f83f 	bl	8002414 <i2c_begin>
	ST7032i_init(&lcd, &Wire1);
 8008396:	498b      	ldr	r1, [pc, #556]	; (80085c4 <main+0x330>)
 8008398:	488b      	ldr	r0, [pc, #556]	; (80085c8 <main+0x334>)
 800839a:	f7f9 fd79 	bl	8001e90 <ST7032i_init>
	ST7032i_begin(&lcd);
 800839e:	488a      	ldr	r0, [pc, #552]	; (80085c8 <main+0x334>)
 80083a0:	f7f9 fe24 	bl	8001fec <ST7032i_begin>
	ST7032i_setContrast(&lcd, 46);
 80083a4:	212e      	movs	r1, #46	; 0x2e
 80083a6:	4888      	ldr	r0, [pc, #544]	; (80085c8 <main+0x334>)
 80083a8:	f7f9 fdb2 	bl	8001f10 <ST7032i_setContrast>
	ST7032i_print(&lcd, "Hi there!");       // Classic Hello World!
 80083ac:	4987      	ldr	r1, [pc, #540]	; (80085cc <main+0x338>)
 80083ae:	4886      	ldr	r0, [pc, #536]	; (80085c8 <main+0x334>)
 80083b0:	f7f9 fd9f 	bl	8001ef2 <ST7032i_print>

	bits = GPIO_ReadOutputData(GPIOD );
 80083b4:	4886      	ldr	r0, [pc, #536]	; (80085d0 <main+0x33c>)
 80083b6:	f7f8 f823 	bl	8000400 <GPIO_ReadOutputData>
 80083ba:	4604      	mov	r4, r0
	GPIOWrite(GPIOD, PinBit(PD13) | (bits & 0x0fff));
 80083bc:	f240 400d 	movw	r0, #1037	; 0x40d
 80083c0:	f7f9 ff60 	bl	8002284 <PinBit>
 80083c4:	0524      	lsls	r4, r4, #20
 80083c6:	ea40 5114 	orr.w	r1, r0, r4, lsr #20
 80083ca:	b289      	uxth	r1, r1
 80083cc:	4880      	ldr	r0, [pc, #512]	; (80085d0 <main+0x33c>)
 80083ce:	f7fa f81f 	bl	8002410 <GPIOWrite>
	delay_ms(intval);
 80083d2:	2028      	movs	r0, #40	; 0x28
 80083d4:	f7f9 ff12 	bl	80021fc <delay_ms>
	tnow = millis() / 1000;
 80083d8:	f7f9 ff0a 	bl	80021f0 <millis>
 80083dc:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80083e0:	fbb0 f5f4 	udiv	r5, r0, r4
	while (tnow == millis() / 1000)
 80083e4:	f7f9 ff04 	bl	80021f0 <millis>
 80083e8:	fbb0 f0f4 	udiv	r0, r0, r4
 80083ec:	4285      	cmp	r5, r0
 80083ee:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 80083f2:	d0f7      	beq.n	80083e4 <main+0x150>
		;
	tnow = millis() / 1000;
 80083f4:	f7f9 fefc 	bl	80021f0 <millis>
			bits |= PinBit(PD13);
			break;
		}
		GPIOWrite(GPIOD, bits);

		while (tnow == millis() / 1000);
 80083f8:	4637      	mov	r7, r6
	GPIOWrite(GPIOD, PinBit(PD13) | (bits & 0x0fff));
	delay_ms(intval);
	tnow = millis() / 1000;
	while (tnow == millis() / 1000)
		;
	tnow = millis() / 1000;
 80083fa:	fbb0 f5f6 	udiv	r5, r0, r6
		GPIOWrite(GPIOD, bits);

		while (tnow == millis() / 1000);
		tnow = millis() / 1000;

		sprintf(tmp, "%04ld", millis());
 80083fe:	ac03      	add	r4, sp, #12
	while (tnow == millis() / 1000)
		;
	tnow = millis() / 1000;

	while (1) {
		bits = GPIO_ReadOutputData(GPIOD );
 8008400:	4873      	ldr	r0, [pc, #460]	; (80085d0 <main+0x33c>)
 8008402:	f7f7 fffd 	bl	8000400 <GPIO_ReadOutputData>
 8008406:	4680      	mov	r8, r0

		GPIOWrite(GPIOD, PinBit(PD13) | (bits & 0x0fff));
 8008408:	f240 400d 	movw	r0, #1037	; 0x40d
 800840c:	f7f9 ff3a 	bl	8002284 <PinBit>
 8008410:	ea4f 5808 	mov.w	r8, r8, lsl #20
 8008414:	ea4f 5818 	mov.w	r8, r8, lsr #20
 8008418:	ea48 0100 	orr.w	r1, r8, r0
 800841c:	b289      	uxth	r1, r1
 800841e:	486c      	ldr	r0, [pc, #432]	; (80085d0 <main+0x33c>)
 8008420:	f7f9 fff6 	bl	8002410 <GPIOWrite>
		delay_ms(intval);
 8008424:	2028      	movs	r0, #40	; 0x28
 8008426:	f7f9 fee9 	bl	80021fc <delay_ms>
		GPIOWrite(GPIOD, PinBit(PD14) | (bits & 0x0fff));
 800842a:	f240 400e 	movw	r0, #1038	; 0x40e
 800842e:	f7f9 ff29 	bl	8002284 <PinBit>
 8008432:	ea48 0100 	orr.w	r1, r8, r0
 8008436:	b289      	uxth	r1, r1
 8008438:	4865      	ldr	r0, [pc, #404]	; (80085d0 <main+0x33c>)
 800843a:	f7f9 ffe9 	bl	8002410 <GPIOWrite>
		delay_ms(intval);
 800843e:	2028      	movs	r0, #40	; 0x28
 8008440:	f7f9 fedc 	bl	80021fc <delay_ms>
		GPIOWrite(GPIOD, PinBit(PD15) | (bits & 0x0fff));
 8008444:	f240 400f 	movw	r0, #1039	; 0x40f
 8008448:	f7f9 ff1c 	bl	8002284 <PinBit>
 800844c:	ea48 0100 	orr.w	r1, r8, r0
 8008450:	b289      	uxth	r1, r1
 8008452:	485f      	ldr	r0, [pc, #380]	; (80085d0 <main+0x33c>)
 8008454:	f7f9 ffdc 	bl	8002410 <GPIOWrite>
		delay_ms(intval);
 8008458:	2028      	movs	r0, #40	; 0x28
 800845a:	f7f9 fecf 	bl	80021fc <delay_ms>
		GPIOWrite(GPIOD, PinBit(PD12) | (bits & 0x0fff));
 800845e:	f240 400c 	movw	r0, #1036	; 0x40c
 8008462:	f7f9 ff0f 	bl	8002284 <PinBit>
 8008466:	ea48 0100 	orr.w	r1, r8, r0
 800846a:	b289      	uxth	r1, r1
 800846c:	4858      	ldr	r0, [pc, #352]	; (80085d0 <main+0x33c>)
 800846e:	f7f9 ffcf 	bl	8002410 <GPIOWrite>
		delay_ms(intval);
 8008472:	2028      	movs	r0, #40	; 0x28
 8008474:	f7f9 fec2 	bl	80021fc <delay_ms>
		//
		bits &= 0x0fff;
		switch ((tnow % 60) / 15) {
 8008478:	233c      	movs	r3, #60	; 0x3c
 800847a:	fbb5 f2f3 	udiv	r2, r5, r3
 800847e:	fb03 5312 	mls	r3, r3, r2, r5
 8008482:	220f      	movs	r2, #15
 8008484:	fbb3 f3f2 	udiv	r3, r3, r2
 8008488:	2b02      	cmp	r3, #2
 800848a:	d00c      	beq.n	80084a6 <main+0x212>
 800848c:	2b03      	cmp	r3, #3
 800848e:	d002      	beq.n	8008496 <main+0x202>
 8008490:	2b01      	cmp	r3, #1
 8008492:	d118      	bne.n	80084c6 <main+0x232>
 8008494:	e00f      	b.n	80084b6 <main+0x222>
		case 3:
			bits |= PinBit(PD12);
 8008496:	f240 400c 	movw	r0, #1036	; 0x40c
 800849a:	f7f9 fef3 	bl	8002284 <PinBit>
 800849e:	ea40 0808 	orr.w	r8, r0, r8
 80084a2:	fa1f f888 	uxth.w	r8, r8
		case 2:
			bits |= PinBit(PD15);
 80084a6:	f240 400f 	movw	r0, #1039	; 0x40f
 80084aa:	f7f9 feeb 	bl	8002284 <PinBit>
 80084ae:	ea40 0808 	orr.w	r8, r0, r8
 80084b2:	fa1f f888 	uxth.w	r8, r8
		case 1:
			bits |= PinBit(PD14);
 80084b6:	f240 400e 	movw	r0, #1038	; 0x40e
 80084ba:	f7f9 fee3 	bl	8002284 <PinBit>
 80084be:	ea40 0808 	orr.w	r8, r0, r8
 80084c2:	fa1f f888 	uxth.w	r8, r8
		case 0:
		default:
			bits |= PinBit(PD13);
 80084c6:	f240 400d 	movw	r0, #1037	; 0x40d
 80084ca:	f7f9 fedb 	bl	8002284 <PinBit>
 80084ce:	ea40 0808 	orr.w	r8, r0, r8
			break;
		}
		GPIOWrite(GPIOD, bits);
 80084d2:	fa1f f188 	uxth.w	r1, r8
 80084d6:	483e      	ldr	r0, [pc, #248]	; (80085d0 <main+0x33c>)
 80084d8:	f7f9 ff9a 	bl	8002410 <GPIOWrite>

		while (tnow == millis() / 1000);
 80084dc:	f7f9 fe88 	bl	80021f0 <millis>
 80084e0:	fbb0 f0f6 	udiv	r0, r0, r6
 80084e4:	4285      	cmp	r5, r0
 80084e6:	d0f9      	beq.n	80084dc <main+0x248>
		tnow = millis() / 1000;
 80084e8:	f7f9 fe82 	bl	80021f0 <millis>
 80084ec:	fbb0 f5f7 	udiv	r5, r0, r7

		sprintf(tmp, "%04ld", millis());
 80084f0:	f7f9 fe7e 	bl	80021f0 <millis>
 80084f4:	4937      	ldr	r1, [pc, #220]	; (80085d4 <main+0x340>)
 80084f6:	4602      	mov	r2, r0
 80084f8:	4620      	mov	r0, r4
 80084fa:	f7fa ff2d 	bl	8003358 <sprintf>
		usart_print(&Serial3, tmp);
 80084fe:	4826      	ldr	r0, [pc, #152]	; (8008598 <main+0x304>)
 8008500:	4621      	mov	r1, r4
 8008502:	f7fa fbf1 	bl	8002ce8 <usart_print>
		usart_print(&Serial3, "\n");
 8008506:	4824      	ldr	r0, [pc, #144]	; (8008598 <main+0x304>)
 8008508:	4933      	ldr	r1, [pc, #204]	; (80085d8 <main+0x344>)
 800850a:	f7fa fbed 	bl	8002ce8 <usart_print>

		ST7032i_setCursor(&lcd, 0, 1);
 800850e:	2201      	movs	r2, #1
 8008510:	482d      	ldr	r0, [pc, #180]	; (80085c8 <main+0x334>)
 8008512:	2100      	movs	r1, #0
 8008514:	f7f9 fd39 	bl	8001f8a <ST7032i_setCursor>
		ST7032i_print(&lcd, tmp);
 8008518:	4621      	mov	r1, r4
 800851a:	482b      	ldr	r0, [pc, #172]	; (80085c8 <main+0x334>)
 800851c:	f7f9 fce9 	bl	8001ef2 <ST7032i_print>

		digitalWrite(PB12, LOW);
 8008520:	f44f 7003 	mov.w	r0, #524	; 0x20c
 8008524:	2100      	movs	r1, #0
 8008526:	f7f9 fedd 	bl	80022e4 <digitalWrite>
		spi_transfer(SPI2, (uint8_t *) tmp, 8);
 800852a:	4824      	ldr	r0, [pc, #144]	; (80085bc <main+0x328>)
 800852c:	4621      	mov	r1, r4
 800852e:	2208      	movs	r2, #8
 8008530:	f7fa f9de 	bl	80028f0 <spi_transfer>
		digitalWrite(PB12, HIGH);
 8008534:	f44f 7003 	mov.w	r0, #524	; 0x20c
 8008538:	2101      	movs	r1, #1
 800853a:	f7f9 fed3 	bl	80022e4 <digitalWrite>
		/*
		 dval = (uint32) (100.0f + 64*sinf( (count % (uint32)(3.14159 * 2 * 32))/32.0f));
		 usart3.println(dval);
		 */
		uint16_t i = 0;
		if (usart_available(&Serial3) > 0) {
 800853e:	4816      	ldr	r0, [pc, #88]	; (8008598 <main+0x304>)
 8008540:	f7fa fc0f 	bl	8002d62 <usart_available>
 8008544:	b940      	cbnz	r0, 8008558 <main+0x2c4>
 8008546:	e75b      	b.n	8008400 <main+0x16c>
			while (usart_available(&Serial3) > 0 && i < 92) {
				tmp[i++] = (char) usart_read(&Serial3);
 8008548:	4813      	ldr	r0, [pc, #76]	; (8008598 <main+0x304>)
 800854a:	f7fa fbdb 	bl	8002d04 <usart_read>
 800854e:	f804 0008 	strb.w	r0, [r4, r8]
 8008552:	f108 0801 	add.w	r8, r8, #1
 8008556:	e001      	b.n	800855c <main+0x2c8>
		/*
		 dval = (uint32) (100.0f + 64*sinf( (count % (uint32)(3.14159 * 2 * 32))/32.0f));
		 usart3.println(dval);
		 */
		uint16_t i = 0;
		if (usart_available(&Serial3) > 0) {
 8008558:	f04f 0800 	mov.w	r8, #0
			while (usart_available(&Serial3) > 0 && i < 92) {
 800855c:	480e      	ldr	r0, [pc, #56]	; (8008598 <main+0x304>)
				tmp[i++] = (char) usart_read(&Serial3);
 800855e:	fa1f f988 	uxth.w	r9, r8
		 dval = (uint32) (100.0f + 64*sinf( (count % (uint32)(3.14159 * 2 * 32))/32.0f));
		 usart3.println(dval);
		 */
		uint16_t i = 0;
		if (usart_available(&Serial3) > 0) {
			while (usart_available(&Serial3) > 0 && i < 92) {
 8008562:	f7fa fbfe 	bl	8002d62 <usart_available>
 8008566:	b118      	cbz	r0, 8008570 <main+0x2dc>
 8008568:	f1b8 0f5c 	cmp.w	r8, #92	; 0x5c
 800856c:	d1ec      	bne.n	8008548 <main+0x2b4>
 800856e:	46c1      	mov	r9, r8
				tmp[i++] = (char) usart_read(&Serial3);
			}
			tmp[i] = 0;
 8008570:	aa1e      	add	r2, sp, #120	; 0x78
 8008572:	eb02 0309 	add.w	r3, r2, r9
 8008576:	2200      	movs	r2, #0
 8008578:	f803 2c6c 	strb.w	r2, [r3, #-108]
			usart_print(&Serial3, "> ");
 800857c:	4806      	ldr	r0, [pc, #24]	; (8008598 <main+0x304>)
 800857e:	4917      	ldr	r1, [pc, #92]	; (80085dc <main+0x348>)
 8008580:	f7fa fbb2 	bl	8002ce8 <usart_print>
			usart_print(&Serial3, tmp);
 8008584:	4621      	mov	r1, r4
 8008586:	4804      	ldr	r0, [pc, #16]	; (8008598 <main+0x304>)
 8008588:	f7fa fbae 	bl	8002ce8 <usart_print>
			usart_print(&Serial3, "\n");
 800858c:	4802      	ldr	r0, [pc, #8]	; (8008598 <main+0x304>)
 800858e:	4912      	ldr	r1, [pc, #72]	; (80085d8 <main+0x344>)
 8008590:	f7fa fbaa 	bl	8002ce8 <usart_print>
 8008594:	e734      	b.n	8008400 <main+0x16c>
 8008596:	bf00      	nop
 8008598:	20001018 	.word	0x20001018
 800859c:	080087a8 	.word	0x080087a8
 80085a0:	080087de 	.word	0x080087de
 80085a4:	08008806 	.word	0x08008806
 80085a8:	08008831 	.word	0x08008831
 80085ac:	0800885c 	.word	0x0800885c
 80085b0:	0800886b 	.word	0x0800886b
 80085b4:	08008878 	.word	0x08008878
 80085b8:	08008886 	.word	0x08008886
 80085bc:	40003800 	.word	0x40003800
 80085c0:	000186a0 	.word	0x000186a0
 80085c4:	200009ac 	.word	0x200009ac
 80085c8:	2000167c 	.word	0x2000167c
 80085cc:	08008894 	.word	0x08008894
 80085d0:	40020c00 	.word	0x40020c00
 80085d4:	0800889e 	.word	0x0800889e
 80085d8:	08008892 	.word	0x08008892
 80085dc:	080088a4 	.word	0x080088a4

080085e0 <Reset_Handler>:
 80085e0:	2100      	movs	r1, #0
 80085e2:	e003      	b.n	80085ec <LoopCopyDataInit>

080085e4 <CopyDataInit>:
 80085e4:	4b0a      	ldr	r3, [pc, #40]	; (8008610 <LoopFillZerobss+0x10>)
 80085e6:	585b      	ldr	r3, [r3, r1]
 80085e8:	5043      	str	r3, [r0, r1]
 80085ea:	3104      	adds	r1, #4

080085ec <LoopCopyDataInit>:
 80085ec:	4809      	ldr	r0, [pc, #36]	; (8008614 <LoopFillZerobss+0x14>)
 80085ee:	4b0a      	ldr	r3, [pc, #40]	; (8008618 <LoopFillZerobss+0x18>)
 80085f0:	1842      	adds	r2, r0, r1
 80085f2:	429a      	cmp	r2, r3
 80085f4:	d3f6      	bcc.n	80085e4 <CopyDataInit>
 80085f6:	4a09      	ldr	r2, [pc, #36]	; (800861c <LoopFillZerobss+0x1c>)
 80085f8:	e002      	b.n	8008600 <LoopFillZerobss>

080085fa <FillZerobss>:
 80085fa:	2300      	movs	r3, #0
 80085fc:	f842 3b04 	str.w	r3, [r2], #4

08008600 <LoopFillZerobss>:
 8008600:	4b07      	ldr	r3, [pc, #28]	; (8008620 <LoopFillZerobss+0x20>)
 8008602:	429a      	cmp	r2, r3
 8008604:	d3f9      	bcc.n	80085fa <FillZerobss>
 8008606:	f7fa fd61 	bl	80030cc <SystemInit>
 800860a:	f7ff fe43 	bl	8008294 <main>
 800860e:	4770      	bx	lr
 8008610:	0800892c 	.word	0x0800892c
 8008614:	20000000 	.word	0x20000000
 8008618:	2000095c 	.word	0x2000095c
 800861c:	2000095c 	.word	0x2000095c
 8008620:	20001690 	.word	0x20001690

08008624 <ADC_IRQHandler>:
 8008624:	e7fe      	b.n	8008624 <ADC_IRQHandler>
 8008626:	0000      	movs	r0, r0
 8008628:	00000000 	.word	0x00000000
 800862c:	00000040 	.word	0x00000040
 8008630:	00000014 	.word	0x00000014
 8008634:	00000054 	.word	0x00000054

08008638 <blanks.3927>:
 8008638:	20202020 20202020 20202020 20202020                     

08008648 <zeroes.3928>:
 8008648:	30303030 30303030 30303030 30303030     0000000000000000

08008658 <_global_impure_ptr>:
 8008658:	200000a8 00000000                       ... ....

08008660 <p05.2449>:
 8008660:	00000005 00000019 0000007d 00000000     ........}.......

08008670 <__mprec_tens>:
 8008670:	00000000 3ff00000 00000000 40240000     .......?......$@
 8008680:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
 8008690:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
 80086a0:	00000000 412e8480 00000000 416312d0     .......A......cA
 80086b0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
 80086c0:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
 80086d0:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
 80086e0:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
 80086f0:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
 8008700:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
 8008710:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
 8008720:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
 8008730:	79d99db4 44ea7843                       ...yCx.D

08008738 <__mprec_tinytens>:
 8008738:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
 8008748:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
 8008758:	64ac6f43 0ac80628                       Co.d(...

08008760 <__mprec_bigtens>:
 8008760:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
 8008770:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
 8008780:	7f73bf3c 75154fdd                       <.s..O.u

08008788 <blanks.3871>:
 8008788:	20202020 20202020 20202020 20202020                     

08008798 <zeroes.3872>:
 8008798:	30303030 30303030 30303030 30303030     0000000000000000
 80087a8:	70706148 72612079 68742065 2065736f     Happy are those 
 80087b8:	206f6877 776f6e6b 65687420 72612079     who know they ar
 80087c8:	70732065 74697269 6c6c6175 6f702079     e spiritually po
 80087d8:	203b726f 6854000a 696b2065 6f64676e     or; ..The kingdo
 80087e8:	666f206d 61656820 206e6576 6f6c6562     m of heaven belo
 80087f8:	2073676e 74206f74 216d6568 6f48000a     ngs to them!..Ho
 8008808:	616d2077 6520796e 20736579 73656f64     w many eyes does
 8008818:	73694d20 73736973 20697069 65766972      Mississipi rive
 8008828:	61682072 0a3f6576 69755100 62206b63     r have?..Quick b
 8008838:	6e776f72 786f6620 6d756a20 20646570     rown fox jumped 
 8008848:	7265766f 65687420 7a616c20 6f642079     over the lazy do
 8008858:	000a2167 43535953 3d204b4c 646c2520     g!..SYSCLK = %ld
 8008868:	4800202c 204b4c43 6c25203d 00202c64     , .HCLK = %ld, .
 8008878:	4b4c4350 203d2031 2c646c25 43500020     PCLK1 = %ld, .PC
 8008888:	20324b4c 6c25203d 000a0d64 74206948     LK2 = %ld...Hi t
 8008898:	65726568 30250021 00646c34 4800203e     here!.%04ld.> .H
 80088a8:	20706165 20646e61 63617473 6f63206b     eap and stack co
 80088b8:	73696c6c 0a6e6f69 69786500 00000074     llision..exit...
 80088c8:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
 80088d8:	33323130 37363534 42413938 46454443     0123456789ABCDEF
 80088e8:	00000000 33323130 37363534 62613938     ....0123456789ab
 80088f8:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
 8008908:	00000030 69666e49 7974696e 00000000     0...Infinity....
 8008918:	004e614e 00000043 49534f50 00000058     NaN.C...POSIX...
 8008928:	0000002e                                ....
