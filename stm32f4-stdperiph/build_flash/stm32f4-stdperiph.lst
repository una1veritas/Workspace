
stm32f4-stdperiph.elf:     file format elf32-littlearm


Disassembly of section .text:

08000188 <TIM2_timer_start>:
/**
 * @brief  millisecond
 * @param  none
 * @retval None
 */
void TIM2_timer_start(void) {
 8000188:	b570      	push	{r4, r5, r6, lr}
 800018a:	b088      	sub	sp, #32
	// TIM_TimeBaseInitTypeDef's order is {uint16_t TIM_Prescaler, uint16_t TIM_CounterMode, uint16_t TIM_Period, uint16_t TIM_ClockDivision, uint8_t TIM_RepetitionCounter}
	TIM_TimeBaseInitTypeDef TimeBaseStructure;
//			= { 84, TIM_CounterMode_Up, 999, TIM_CKD_DIV1, 0 };

	RCC_ClocksTypeDef RCC_Clocks;
	RCC_GetClocksFreq(&RCC_Clocks);
 800018c:	4668      	mov	r0, sp
 800018e:	f004 fdcb 	bl	8004d28 <RCC_GetClocksFreq>
	TimeBaseStructure.TIM_Prescaler = (RCC_Clocks.SYSCLK_Frequency>>1)/1000000L ;
 8000192:	9b00      	ldr	r3, [sp, #0]
 8000194:	f64d 6283 	movw	r2, #56963	; 0xde83
 8000198:	f2c4 321b 	movt	r2, #17179	; 0x431b
 800019c:	085b      	lsrs	r3, r3, #1
 800019e:	fba2 1303 	umull	r1, r3, r2, r3
	TimeBaseStructure.TIM_Period = 1000 - 1;
	TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
	TimeBaseStructure.TIM_RepetitionCounter = 0;

	//Supply APB1 Clock
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 80001a2:	2001      	movs	r0, #1
	TIM_TimeBaseInitTypeDef TimeBaseStructure;
//			= { 84, TIM_CounterMode_Up, 999, TIM_CKD_DIV1, 0 };

	RCC_ClocksTypeDef RCC_Clocks;
	RCC_GetClocksFreq(&RCC_Clocks);
	TimeBaseStructure.TIM_Prescaler = (RCC_Clocks.SYSCLK_Frequency>>1)/1000000L ;
 80001a4:	0c9b      	lsrs	r3, r3, #18
	TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80001a6:	2400      	movs	r4, #0
	TimeBaseStructure.TIM_Period = 1000 - 1;
	TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
	TimeBaseStructure.TIM_RepetitionCounter = 0;

	//Supply APB1 Clock
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 80001a8:	4601      	mov	r1, r0
	TIM_TimeBaseInitTypeDef TimeBaseStructure;
//			= { 84, TIM_CounterMode_Up, 999, TIM_CKD_DIV1, 0 };

	RCC_ClocksTypeDef RCC_Clocks;
	RCC_GetClocksFreq(&RCC_Clocks);
	TimeBaseStructure.TIM_Prescaler = (RCC_Clocks.SYSCLK_Frequency>>1)/1000000L ;
 80001aa:	f8ad 3010 	strh.w	r3, [sp, #16]
	TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
	TimeBaseStructure.TIM_Period = 1000 - 1;
 80001ae:	f240 33e7 	movw	r3, #999	; 0x3e7
 80001b2:	9305      	str	r3, [sp, #20]
//			= { 84, TIM_CounterMode_Up, 999, TIM_CKD_DIV1, 0 };

	RCC_ClocksTypeDef RCC_Clocks;
	RCC_GetClocksFreq(&RCC_Clocks);
	TimeBaseStructure.TIM_Prescaler = (RCC_Clocks.SYSCLK_Frequency>>1)/1000000L ;
	TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80001b4:	f8ad 4012 	strh.w	r4, [sp, #18]
	TimeBaseStructure.TIM_Period = 1000 - 1;
	TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 80001b8:	f8ad 4018 	strh.w	r4, [sp, #24]
	TimeBaseStructure.TIM_RepetitionCounter = 0;
 80001bc:	f88d 401a 	strb.w	r4, [sp, #26]

	//Supply APB1 Clock
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 80001c0:	f004 fe60 	bl	8004e84 <RCC_APB1PeriphClockCmd>

	/* Time base configuration */
	TIM_TimeBaseInit(TIM2, &TimeBaseStructure);
 80001c4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80001c8:	a904      	add	r1, sp, #16
 80001ca:	f006 fa41 	bl	8006650 <TIM_TimeBaseInit>
//  TIM_SelectOnePulseMode(TIM2, TIM_OPMode_Repetitive);
	TIM_SetCounter(TIM2, 0);
 80001ce:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80001d2:	4621      	mov	r1, r4
 80001d4:	f006 fa9e 	bl	8006714 <TIM_SetCounter>
	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);
 80001d8:	2101      	movs	r1, #1
 80001da:	460a      	mov	r2, r1
 80001dc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80001e0:	f006 ff2c 	bl	800703c <TIM_ITConfig>

	NVIC_InitTypeDef NVIC_InitStructure;
	/* Enable the TIM2 gloabal Interrupt */
	NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 80001e4:	2601      	movs	r6, #1
	TIM_SetCounter(TIM2, 0);
	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);

	NVIC_InitTypeDef NVIC_InitStructure;
	/* Enable the TIM2 gloabal Interrupt */
	NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
 80001e6:	231c      	movs	r3, #28
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
 80001e8:	a807      	add	r0, sp, #28
	TIM_SetCounter(TIM2, 0);
	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);

	NVIC_InitTypeDef NVIC_InitStructure;
	/* Enable the TIM2 gloabal Interrupt */
	NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
 80001ea:	f88d 301c 	strb.w	r3, [sp, #28]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80001ee:	f88d 401d 	strb.w	r4, [sp, #29]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 80001f2:	f88d 601e 	strb.w	r6, [sp, #30]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80001f6:	f88d 601f 	strb.w	r6, [sp, #31]
	NVIC_Init(&NVIC_InitStructure);
 80001fa:	f000 ff77 	bl	80010ec <NVIC_Init>

	/* TIM enable counter */
	TIM_Cmd(TIM2, ENABLE);
 80001fe:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000202:	4631      	mov	r1, r6
 8000204:	f006 fad2 	bl	80067ac <TIM_Cmd>

	__counter_micros = 0;
 8000208:	f640 12a4 	movw	r2, #2468	; 0x9a4
	__counter_millis = 0;
 800020c:	f640 13a8 	movw	r3, #2472	; 0x9a8
	NVIC_Init(&NVIC_InitStructure);

	/* TIM enable counter */
	TIM_Cmd(TIM2, ENABLE);

	__counter_micros = 0;
 8000210:	f2c2 0200 	movt	r2, #8192	; 0x2000
	__counter_millis = 0;
 8000214:	f2c2 0300 	movt	r3, #8192	; 0x2000
	NVIC_Init(&NVIC_InitStructure);

	/* TIM enable counter */
	TIM_Cmd(TIM2, ENABLE);

	__counter_micros = 0;
 8000218:	6014      	str	r4, [r2, #0]
//			= { 84, TIM_CounterMode_Up, 999, TIM_CKD_DIV1, 0 };

	RCC_ClocksTypeDef RCC_Clocks;
	RCC_GetClocksFreq(&RCC_Clocks);
	TimeBaseStructure.TIM_Prescaler = (RCC_Clocks.SYSCLK_Frequency>>1)/1000000L ;
	TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 800021a:	4625      	mov	r5, r4

	/* TIM enable counter */
	TIM_Cmd(TIM2, ENABLE);

	__counter_micros = 0;
	__counter_millis = 0;
 800021c:	601c      	str	r4, [r3, #0]
}
 800021e:	b008      	add	sp, #32
 8000220:	bd70      	pop	{r4, r5, r6, pc}
 8000222:	bf00      	nop

08000224 <micros>:

uint32_t micros(void) {
 8000224:	b508      	push	{r3, lr}
	return __counter_micros + TIM_GetCounter(TIM2 );
 8000226:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800022a:	f006 fa77 	bl	800671c <TIM_GetCounter>
 800022e:	f640 13a4 	movw	r3, #2468	; 0x9a4
 8000232:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000236:	681b      	ldr	r3, [r3, #0]
}
 8000238:	18c0      	adds	r0, r0, r3
 800023a:	bd08      	pop	{r3, pc}

0800023c <millis>:

uint32_t millis(void) {
	return __counter_millis;
 800023c:	f640 13a8 	movw	r3, #2472	; 0x9a8
 8000240:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000244:	6818      	ldr	r0, [r3, #0]
}
 8000246:	4770      	bx	lr

08000248 <delay_ms>:
uint32_t micros(void) {
	return __counter_micros + TIM_GetCounter(TIM2 );
}

uint32_t millis(void) {
	return __counter_millis;
 8000248:	4b06      	ldr	r3, [pc, #24]	; (8000264 <delay_ms+0x1c>)
 800024a:	6819      	ldr	r1, [r3, #0]
 800024c:	681a      	ldr	r2, [r3, #0]
}

void delay_ms(uint32_t w) {
	uint32_t wtill = millis() + w;
 800024e:	1841      	adds	r1, r0, r1
	if ( wtill < millis() ) {
 8000250:	4291      	cmp	r1, r2
 8000252:	d202      	bcs.n	800025a <delay_ms+0x12>
uint32_t micros(void) {
	return __counter_micros + TIM_GetCounter(TIM2 );
}

uint32_t millis(void) {
	return __counter_millis;
 8000254:	681a      	ldr	r2, [r3, #0]
}

void delay_ms(uint32_t w) {
	uint32_t wtill = millis() + w;
	if ( wtill < millis() ) {
		while ( millis() >= wtill );
 8000256:	4291      	cmp	r1, r2
 8000258:	d9fc      	bls.n	8000254 <delay_ms+0xc>
uint32_t micros(void) {
	return __counter_micros + TIM_GetCounter(TIM2 );
}

uint32_t millis(void) {
	return __counter_millis;
 800025a:	681a      	ldr	r2, [r3, #0]
void delay_ms(uint32_t w) {
	uint32_t wtill = millis() + w;
	if ( wtill < millis() ) {
		while ( millis() >= wtill );
	}
	while (millis() < wtill)
 800025c:	4291      	cmp	r1, r2
 800025e:	d8fc      	bhi.n	800025a <delay_ms+0x12>
		;
}
 8000260:	4770      	bx	lr
 8000262:	bf00      	nop
 8000264:	200009a8 	.word	0x200009a8

08000268 <delay_us>:

void delay_us(uint32_t w) {
 8000268:	b510      	push	{r4, lr}
 800026a:	4604      	mov	r4, r0
	uint32_t wtill = micros() + w;
 800026c:	f7ff ffda 	bl	8000224 <micros>
 8000270:	1904      	adds	r4, r0, r4
	if ( wtill < micros() ) {
 8000272:	f7ff ffd7 	bl	8000224 <micros>
 8000276:	4284      	cmp	r4, r0
 8000278:	d203      	bcs.n	8000282 <delay_us+0x1a>
		// overflow
		while ( micros() >= wtill );
 800027a:	f7ff ffd3 	bl	8000224 <micros>
 800027e:	4284      	cmp	r4, r0
 8000280:	d9fb      	bls.n	800027a <delay_us+0x12>
	}
	while (micros() < wtill)
 8000282:	f7ff ffcf 	bl	8000224 <micros>
 8000286:	4284      	cmp	r4, r0
 8000288:	d8fb      	bhi.n	8000282 <delay_us+0x1a>
		;
}
 800028a:	bd10      	pop	{r4, pc}

0800028c <TIM2_IRQHandler>:

void TIM2_IRQHandler(void) {
 800028c:	b508      	push	{r3, lr}
	if (TIM_GetITStatus(TIM2, TIM_IT_Update ) != RESET) {
 800028e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000292:	2101      	movs	r1, #1
 8000294:	f006 fee8 	bl	8007068 <TIM_GetITStatus>
 8000298:	b168      	cbz	r0, 80002b6 <TIM2_IRQHandler+0x2a>
		TIM_ClearITPendingBit(TIM2, TIM_IT_Update );
 800029a:	2101      	movs	r1, #1
 800029c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80002a0:	f006 feee 	bl	8007080 <TIM_ClearITPendingBit>
		__counter_micros += 1000;
 80002a4:	4a04      	ldr	r2, [pc, #16]	; (80002b8 <TIM2_IRQHandler+0x2c>)
		__counter_millis += 1;
 80002a6:	4b05      	ldr	r3, [pc, #20]	; (80002bc <TIM2_IRQHandler+0x30>)
}

void TIM2_IRQHandler(void) {
	if (TIM_GetITStatus(TIM2, TIM_IT_Update ) != RESET) {
		TIM_ClearITPendingBit(TIM2, TIM_IT_Update );
		__counter_micros += 1000;
 80002a8:	6811      	ldr	r1, [r2, #0]
 80002aa:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
 80002ae:	6011      	str	r1, [r2, #0]
		__counter_millis += 1;
 80002b0:	681a      	ldr	r2, [r3, #0]
 80002b2:	3201      	adds	r2, #1
 80002b4:	601a      	str	r2, [r3, #0]
 80002b6:	bd08      	pop	{r3, pc}
 80002b8:	200009a4 	.word	0x200009a4
 80002bc:	200009a8 	.word	0x200009a8

080002c0 <PinPort>:
		GPIO_Pin_4, GPIO_Pin_5, GPIO_Pin_6, GPIO_Pin_7, GPIO_Pin_8, GPIO_Pin_9,
		GPIO_Pin_10, GPIO_Pin_11, GPIO_Pin_12, GPIO_Pin_13, GPIO_Pin_14,
		GPIO_Pin_15, GPIO_Pin_All };

GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
 80002c0:	f240 0300 	movw	r3, #0
 80002c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80002c8:	f3c0 2003 	ubfx	r0, r0, #8, #4
}
 80002cc:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80002d0:	4770      	bx	lr
 80002d2:	bf00      	nop

080002d4 <PinBit>:

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 80002d4:	2301      	movs	r3, #1
 80002d6:	f000 000f 	and.w	r0, r0, #15
 80002da:	fa13 f000 	lsls.w	r0, r3, r0
}
 80002de:	b280      	uxth	r0, r0
 80002e0:	4770      	bx	lr
 80002e2:	bf00      	nop

080002e4 <PinSource>:

uint8_t PinSource(GPIOPin portpin) {
	return portpin & 0x0f;
}
 80002e4:	f000 000f 	and.w	r0, r0, #15
 80002e8:	4770      	bx	lr
 80002ea:	bf00      	nop

080002ec <pinMode>:

void pinMode(GPIOPin portpin, GPIOMode_TypeDef mode) {
 80002ec:	b5f0      	push	{r4, r5, r6, r7, lr}

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);
 80002ee:	f240 0400 	movw	r4, #0
 80002f2:	f3c0 2503 	ubfx	r5, r0, #8, #4
 80002f6:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80002fa:	eb04 0385 	add.w	r3, r4, r5, lsl #2

uint8_t PinSource(GPIOPin portpin) {
	return portpin & 0x0f;
}

void pinMode(GPIOPin portpin, GPIOMode_TypeDef mode) {
 80002fe:	b083      	sub	sp, #12
 8000300:	460f      	mov	r7, r1
 8000302:	4606      	mov	r6, r0

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);
 8000304:	2101      	movs	r1, #1
 8000306:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000308:	f004 fd92 	bl	8004e30 <RCC_AHB1PeriphClockCmd>
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 800030c:	f006 060f 	and.w	r6, r6, #15
 8000310:	2301      	movs	r3, #1
 8000312:	fa13 f606 	lsls.w	r6, r3, r6

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);

	GPIO_InitStructure.GPIO_Pin = PinBit(portpin);
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000316:	2300      	movs	r3, #0

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);

	GPIO_InitStructure.GPIO_Pin = PinBit(portpin);
 8000318:	b2b6      	uxth	r6, r6
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800031a:	f88d 3006 	strb.w	r3, [sp, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800031e:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	//
	GPIO_Init(Port[portpin>>8 & 0x0f], &GPIO_InitStructure);
 8000322:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);

	GPIO_InitStructure.GPIO_Pin = PinBit(portpin);
 8000326:	9600      	str	r6, [sp, #0]
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000328:	2302      	movs	r3, #2
	//
	GPIO_Init(Port[portpin>>8 & 0x0f], &GPIO_InitStructure);
 800032a:	4669      	mov	r1, sp
	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);

	GPIO_InitStructure.GPIO_Pin = PinBit(portpin);
	GPIO_InitStructure.GPIO_Mode = mode;
 800032c:	f88d 7004 	strb.w	r7, [sp, #4]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000330:	f88d 3005 	strb.w	r3, [sp, #5]
	//
	GPIO_Init(Port[portpin>>8 & 0x0f], &GPIO_InitStructure);
 8000334:	f003 fdb2 	bl	8003e9c <GPIO_Init>
}
 8000338:	b003      	add	sp, #12
 800033a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800033c <digitalWrite>:

void digitalWrite(GPIOPin portpin, uint8_t bit) {
	if (bit) {
		//? Bit_SET : Bit_RESET ));
		GPIO_SetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
 800033c:	f3c0 2203 	ubfx	r2, r0, #8, #4
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 8000340:	f000 000f 	and.w	r0, r0, #15
	//
	GPIO_Init(Port[portpin>>8 & 0x0f], &GPIO_InitStructure);
}

void digitalWrite(GPIOPin portpin, uint8_t bit) {
	if (bit) {
 8000344:	b939      	cbnz	r1, 8000356 <digitalWrite+0x1a>
		//? Bit_SET : Bit_RESET ));
		GPIO_SetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
	} else {
		GPIO_ResetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
 8000346:	4b08      	ldr	r3, [pc, #32]	; (8000368 <digitalWrite+0x2c>)
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 8000348:	2101      	movs	r1, #1
 800034a:	4081      	lsls	r1, r0
void digitalWrite(GPIOPin portpin, uint8_t bit) {
	if (bit) {
		//? Bit_SET : Bit_RESET ));
		GPIO_SetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
	} else {
		GPIO_ResetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
 800034c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000350:	b289      	uxth	r1, r1
 8000352:	f003 be31 	b.w	8003fb8 <GPIO_ResetBits>
}

void digitalWrite(GPIOPin portpin, uint8_t bit) {
	if (bit) {
		//? Bit_SET : Bit_RESET ));
		GPIO_SetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
 8000356:	4b04      	ldr	r3, [pc, #16]	; (8000368 <digitalWrite+0x2c>)
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 8000358:	2101      	movs	r1, #1
 800035a:	4081      	lsls	r1, r0
}

void digitalWrite(GPIOPin portpin, uint8_t bit) {
	if (bit) {
		//? Bit_SET : Bit_RESET ));
		GPIO_SetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
 800035c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000360:	b289      	uxth	r1, r1
 8000362:	f003 be27 	b.w	8003fb4 <GPIO_SetBits>
 8000366:	bf00      	nop
 8000368:	20000000 	.word	0x20000000

0800036c <digitalRead>:
		GPIO_ResetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
	}
}

uint8_t digitalRead(GPIOPin portpin) {
	GPIO_TypeDef * port = Port[portpin>>8 & 0x0f];
 800036c:	f3c0 2203 	ubfx	r2, r0, #8, #4
	} else {
		GPIO_ResetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
	}
}

uint8_t digitalRead(GPIOPin portpin) {
 8000370:	b508      	push	{r3, lr}
	GPIO_TypeDef * port = Port[portpin>>8 & 0x0f];
 8000372:	4b0e      	ldr	r3, [pc, #56]	; (80003ac <digitalRead+0x40>)
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 8000374:	f000 010f 	and.w	r1, r0, #15
		GPIO_ResetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
	}
}

uint8_t digitalRead(GPIOPin portpin) {
	GPIO_TypeDef * port = Port[portpin>>8 & 0x0f];
 8000378:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 800037c:	2301      	movs	r3, #1
 800037e:	fa13 f101 	lsls.w	r1, r3, r1
	}
}

uint8_t digitalRead(GPIOPin portpin) {
	GPIO_TypeDef * port = Port[portpin>>8 & 0x0f];
	uint8_t mode = (port->MODER) >> (PinBit(portpin) * 2);
 8000382:	6802      	ldr	r2, [r0, #0]
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 8000384:	b289      	uxth	r1, r1
	}
}

uint8_t digitalRead(GPIOPin portpin) {
	GPIO_TypeDef * port = Port[portpin>>8 & 0x0f];
	uint8_t mode = (port->MODER) >> (PinBit(portpin) * 2);
 8000386:	fa11 f303 	lsls.w	r3, r1, r3
 800038a:	fa32 f303 	lsrs.w	r3, r2, r3
	if (mode == GPIO_Mode_OUT)
 800038e:	b2db      	uxtb	r3, r3
 8000390:	2b01      	cmp	r3, #1
 8000392:	d005      	beq.n	80003a0 <digitalRead+0x34>
		return (GPIO_ReadOutputDataBit(port, PinBit(portpin)) ? SET : RESET);
	return (GPIO_ReadInputDataBit(port, PinBit(portpin)) ? SET : RESET);
 8000394:	f003 fdfa 	bl	8003f8c <GPIO_ReadInputDataBit>
 8000398:	3000      	adds	r0, #0
 800039a:	bf18      	it	ne
 800039c:	2001      	movne	r0, #1
}
 800039e:	bd08      	pop	{r3, pc}

uint8_t digitalRead(GPIOPin portpin) {
	GPIO_TypeDef * port = Port[portpin>>8 & 0x0f];
	uint8_t mode = (port->MODER) >> (PinBit(portpin) * 2);
	if (mode == GPIO_Mode_OUT)
		return (GPIO_ReadOutputDataBit(port, PinBit(portpin)) ? SET : RESET);
 80003a0:	f003 fdfe 	bl	8003fa0 <GPIO_ReadOutputDataBit>
 80003a4:	3000      	adds	r0, #0
 80003a6:	bf18      	it	ne
 80003a8:	2001      	movne	r0, #1
 80003aa:	bd08      	pop	{r3, pc}
 80003ac:	20000000 	.word	0x20000000

080003b0 <GPIOMode>:
	return (GPIO_ReadInputDataBit(port, PinBit(portpin)) ? SET : RESET);
}

void GPIOMode(GPIO_TypeDef * port, uint16_t pinbit, GPIOMode_TypeDef mode,
              GPIOSpeed_TypeDef clk, GPIOOType_TypeDef otype, GPIOPuPd_TypeDef pupd) {
 80003b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if ( port == GPIOB ) {
 80003b4:	f44f 6680 	mov.w	r6, #1024	; 0x400
 80003b8:	f2c4 0602 	movt	r6, #16386	; 0x4002
 80003bc:	42b0      	cmp	r0, r6
		return (GPIO_ReadOutputDataBit(port, PinBit(portpin)) ? SET : RESET);
	return (GPIO_ReadInputDataBit(port, PinBit(portpin)) ? SET : RESET);
}

void GPIOMode(GPIO_TypeDef * port, uint16_t pinbit, GPIOMode_TypeDef mode,
              GPIOSpeed_TypeDef clk, GPIOOType_TypeDef otype, GPIOPuPd_TypeDef pupd) {
 80003be:	b082      	sub	sp, #8
 80003c0:	4604      	mov	r4, r0
 80003c2:	460d      	mov	r5, r1
 80003c4:	4617      	mov	r7, r2
 80003c6:	4698      	mov	r8, r3
	if ( port == GPIOB ) {
 80003c8:	d047      	beq.n	800045a <GPIOMode+0xaa>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
	} else if ( port == GPIOC ) {
 80003ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80003ce:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80003d2:	4298      	cmp	r0, r3
 80003d4:	d046      	beq.n	8000464 <GPIOMode+0xb4>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
	} else if ( port == GPIOD ) {
 80003d6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80003da:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80003de:	4298      	cmp	r0, r3
 80003e0:	d045      	beq.n	800046e <GPIOMode+0xbe>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
	} else if ( port == GPIOE ) {
 80003e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003e6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80003ea:	4298      	cmp	r0, r3
 80003ec:	d044      	beq.n	8000478 <GPIOMode+0xc8>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
	} else if ( port == GPIOF ) {
 80003ee:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80003f2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d043      	beq.n	8000482 <GPIOMode+0xd2>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOF, ENABLE);
	} else if ( port == GPIOG ) {
 80003fa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80003fe:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000402:	4298      	cmp	r0, r3
 8000404:	d042      	beq.n	800048c <GPIOMode+0xdc>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOG, ENABLE);
	} else if ( port == GPIOH ) {
 8000406:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800040a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800040e:	4298      	cmp	r0, r3
 8000410:	d041      	beq.n	8000496 <GPIOMode+0xe6>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOH, ENABLE);
	} else if ( port == GPIOI ) {
 8000412:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000416:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800041a:	4298      	cmp	r0, r3
 800041c:	d040      	beq.n	80004a0 <GPIOMode+0xf0>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOI, ENABLE);
	} else if ( port == GPIOA ) {
 800041e:	2300      	movs	r3, #0
 8000420:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000424:	4298      	cmp	r0, r3
 8000426:	d013      	beq.n	8000450 <GPIOMode+0xa0>

	GPIO_InitTypeDef GPIO_InitStructure;
        
	GPIO_InitStructure.GPIO_Pin = pinbit;
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = otype;
 8000428:	f89d 3020 	ldrb.w	r3, [sp, #32]
	}
	// assumes port is already waked up.

	GPIO_InitTypeDef GPIO_InitStructure;
        
	GPIO_InitStructure.GPIO_Pin = pinbit;
 800042c:	9500      	str	r5, [sp, #0]
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = otype;
 800042e:	f88d 3006 	strb.w	r3, [sp, #6]
	GPIO_InitStructure.GPIO_PuPd = pupd;
 8000432:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
	// assumes port is already waked up.

	GPIO_InitTypeDef GPIO_InitStructure;
        
	GPIO_InitStructure.GPIO_Pin = pinbit;
	GPIO_InitStructure.GPIO_Mode = mode;
 8000436:	f88d 7004 	strb.w	r7, [sp, #4]
	GPIO_InitStructure.GPIO_OType = otype;
	GPIO_InitStructure.GPIO_PuPd = pupd;
	GPIO_InitStructure.GPIO_Speed = clk;
	//
	GPIO_Init(port, &GPIO_InitStructure);
 800043a:	4620      	mov	r0, r4
 800043c:	4669      	mov	r1, sp
	GPIO_InitTypeDef GPIO_InitStructure;
        
	GPIO_InitStructure.GPIO_Pin = pinbit;
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = otype;
	GPIO_InitStructure.GPIO_PuPd = pupd;
 800043e:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_InitStructure.GPIO_Speed = clk;
 8000442:	f88d 8005 	strb.w	r8, [sp, #5]
	//
	GPIO_Init(port, &GPIO_InitStructure);
 8000446:	f003 fd29 	bl	8003e9c <GPIO_Init>
}
 800044a:	b002      	add	sp, #8
 800044c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if ( port == GPIOH ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOH, ENABLE);
	} else if ( port == GPIOI ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOI, ENABLE);
	} else if ( port == GPIOA ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8000450:	2001      	movs	r0, #1
 8000452:	4601      	mov	r1, r0
 8000454:	f004 fcec 	bl	8004e30 <RCC_AHB1PeriphClockCmd>
 8000458:	e7e6      	b.n	8000428 <GPIOMode+0x78>
}

void GPIOMode(GPIO_TypeDef * port, uint16_t pinbit, GPIOMode_TypeDef mode,
              GPIOSpeed_TypeDef clk, GPIOOType_TypeDef otype, GPIOPuPd_TypeDef pupd) {
	if ( port == GPIOB ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 800045a:	2002      	movs	r0, #2
 800045c:	2101      	movs	r1, #1
 800045e:	f004 fce7 	bl	8004e30 <RCC_AHB1PeriphClockCmd>
 8000462:	e7e1      	b.n	8000428 <GPIOMode+0x78>
	} else if ( port == GPIOC ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8000464:	2004      	movs	r0, #4
 8000466:	2101      	movs	r1, #1
 8000468:	f004 fce2 	bl	8004e30 <RCC_AHB1PeriphClockCmd>
 800046c:	e7dc      	b.n	8000428 <GPIOMode+0x78>
	} else if ( port == GPIOD ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 800046e:	2008      	movs	r0, #8
 8000470:	2101      	movs	r1, #1
 8000472:	f004 fcdd 	bl	8004e30 <RCC_AHB1PeriphClockCmd>
 8000476:	e7d7      	b.n	8000428 <GPIOMode+0x78>
	} else if ( port == GPIOE ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 8000478:	2010      	movs	r0, #16
 800047a:	2101      	movs	r1, #1
 800047c:	f004 fcd8 	bl	8004e30 <RCC_AHB1PeriphClockCmd>
 8000480:	e7d2      	b.n	8000428 <GPIOMode+0x78>
	} else if ( port == GPIOF ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 8000482:	2020      	movs	r0, #32
 8000484:	2101      	movs	r1, #1
 8000486:	f004 fcd3 	bl	8004e30 <RCC_AHB1PeriphClockCmd>
 800048a:	e7cd      	b.n	8000428 <GPIOMode+0x78>
	} else if ( port == GPIOG ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 800048c:	2040      	movs	r0, #64	; 0x40
 800048e:	2101      	movs	r1, #1
 8000490:	f004 fcce 	bl	8004e30 <RCC_AHB1PeriphClockCmd>
 8000494:	e7c8      	b.n	8000428 <GPIOMode+0x78>
	} else if ( port == GPIOH ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 8000496:	2080      	movs	r0, #128	; 0x80
 8000498:	2101      	movs	r1, #1
 800049a:	f004 fcc9 	bl	8004e30 <RCC_AHB1PeriphClockCmd>
 800049e:	e7c3      	b.n	8000428 <GPIOMode+0x78>
	} else if ( port == GPIOI ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 80004a0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80004a4:	2101      	movs	r1, #1
 80004a6:	f004 fcc3 	bl	8004e30 <RCC_AHB1PeriphClockCmd>
 80004aa:	e7bd      	b.n	8000428 <GPIOMode+0x78>

080004ac <GPIOWrite>:
	GPIO_Init(port, &GPIO_InitStructure);
}


inline void GPIOWrite(GPIO_TypeDef * port, uint16_t bits) {
	GPIO_Write(port, bits);
 80004ac:	f003 bd8c 	b.w	8003fc8 <GPIO_Write>

080004b0 <i2c_begin>:
} CommDirection;

//I2C_Status i2c1_status;
//CommDirection i2c1_direction;

boolean i2c_begin(I2CBus * wirex, uint32_t clkspeed) {
 80004b0:	b5f0      	push	{r4, r5, r6, r7, lr}
//	GPIO_InitTypeDef GPIO_InitStructure;
	I2C_InitTypeDef I2C_InitStructure;

	wirex->I2Cx = I2C1;
 80004b2:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
} CommDirection;

//I2C_Status i2c1_status;
//CommDirection i2c1_direction;

boolean i2c_begin(I2CBus * wirex, uint32_t clkspeed) {
 80004b6:	4604      	mov	r4, r0
//	GPIO_InitTypeDef GPIO_InitStructure;
	I2C_InitTypeDef I2C_InitStructure;

	wirex->I2Cx = I2C1;
 80004b8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80004bc:	6023      	str	r3, [r4, #0]
	wirex->sda = PB9;
 80004be:	f240 2309 	movw	r3, #521	; 0x209
 80004c2:	80a3      	strh	r3, [r4, #4]
	wirex->scl = PB8;
 80004c4:	f44f 7302 	mov.w	r3, #520	; 0x208
} CommDirection;

//I2C_Status i2c1_status;
//CommDirection i2c1_direction;

boolean i2c_begin(I2CBus * wirex, uint32_t clkspeed) {
 80004c8:	b087      	sub	sp, #28
//	GPIO_InitTypeDef GPIO_InitStructure;
	I2C_InitTypeDef I2C_InitStructure;

	wirex->I2Cx = I2C1;
	wirex->sda = PB9;
	wirex->scl = PB8;
 80004ca:	80e3      	strh	r3, [r4, #6]

	/* I2C Periph clock enable */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE); //  RCC_APB1PeriphClockCmd(I2C1_RCC, ENABLE);
 80004cc:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
} CommDirection;

//I2C_Status i2c1_status;
//CommDirection i2c1_direction;

boolean i2c_begin(I2CBus * wirex, uint32_t clkspeed) {
 80004d0:	460e      	mov	r6, r1
	wirex->I2Cx = I2C1;
	wirex->sda = PB9;
	wirex->scl = PB8;

	/* I2C Periph clock enable */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE); //  RCC_APB1PeriphClockCmd(I2C1_RCC, ENABLE);
 80004d2:	2101      	movs	r1, #1
 80004d4:	f004 fcd6 	bl	8004e84 <RCC_APB1PeriphClockCmd>
	/* GPIO Periph clock enable */
	//RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE); // PB5 (SMBA), PB6 (SCL), PB9 (SDA)  // RCC_APB2PeriphClockCmd(I2C1_GPIO_RCC, ENABLE);
	GPIOMode(PinPort(wirex->scl), PinBit(wirex->scl), GPIO_Mode_AF, GPIO_Speed_50MHz,
 80004d8:	88e0      	ldrh	r0, [r4, #6]
 80004da:	f7ff fef1 	bl	80002c0 <PinPort>
 80004de:	4607      	mov	r7, r0
 80004e0:	88e0      	ldrh	r0, [r4, #6]
 80004e2:	f7ff fef7 	bl	80002d4 <PinBit>
 80004e6:	2202      	movs	r2, #2
 80004e8:	2501      	movs	r5, #1
 80004ea:	4601      	mov	r1, r0
 80004ec:	4613      	mov	r3, r2
 80004ee:	4638      	mov	r0, r7
 80004f0:	9500      	str	r5, [sp, #0]
 80004f2:	9501      	str	r5, [sp, #4]
 80004f4:	f7ff ff5c 	bl	80003b0 <GPIOMode>
			GPIO_OType_OD, GPIO_PuPd_UP);
	GPIOMode(PinPort(wirex->sda), PinBit(wirex->sda), GPIO_Mode_AF, GPIO_Speed_50MHz,
 80004f8:	88a0      	ldrh	r0, [r4, #4]
 80004fa:	f7ff fee1 	bl	80002c0 <PinPort>
 80004fe:	4607      	mov	r7, r0
 8000500:	88a0      	ldrh	r0, [r4, #4]
 8000502:	f7ff fee7 	bl	80002d4 <PinBit>
 8000506:	2202      	movs	r2, #2
 8000508:	4613      	mov	r3, r2
 800050a:	4601      	mov	r1, r0
 800050c:	4638      	mov	r0, r7
 800050e:	9500      	str	r5, [sp, #0]
 8000510:	9501      	str	r5, [sp, #4]
 8000512:	f7ff ff4d 	bl	80003b0 <GPIOMode>
			GPIO_OType_OD, GPIO_PuPd_UP);

	/* Configure I2C pins: SCL and SDA */
	GPIO_PinAFConfig(PinPort(wirex->scl), PinSource(wirex->scl), GPIO_AF_I2C1 );
 8000516:	88e0      	ldrh	r0, [r4, #6]
 8000518:	f7ff fed2 	bl	80002c0 <PinPort>
 800051c:	4607      	mov	r7, r0
 800051e:	88e0      	ldrh	r0, [r4, #6]
 8000520:	f7ff fee0 	bl	80002e4 <PinSource>
 8000524:	2204      	movs	r2, #4
 8000526:	4601      	mov	r1, r0
 8000528:	4638      	mov	r0, r7
 800052a:	f003 fd53 	bl	8003fd4 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(PinPort(wirex->sda), PinSource(wirex->sda), GPIO_AF_I2C1 );
 800052e:	88a0      	ldrh	r0, [r4, #4]
 8000530:	f7ff fec6 	bl	80002c0 <PinPort>
 8000534:	4607      	mov	r7, r0
 8000536:	88a0      	ldrh	r0, [r4, #4]
 8000538:	f7ff fed4 	bl	80002e4 <PinSource>
 800053c:	2204      	movs	r2, #4
 800053e:	4601      	mov	r1, r0
 8000540:	4638      	mov	r0, r7
 8000542:	f003 fd47 	bl	8003fd4 <GPIO_PinAFConfig>

	//#if defined (REMAP_I2C1)
//Remap_I2C1_Configuration();
//#endif
	switch (clkspeed) {
 8000546:	f248 63a0 	movw	r3, #34464	; 0x86a0
 800054a:	f365 431f 	bfi	r3, r5, #16, #16
 800054e:	429e      	cmp	r6, r3
 8000550:	d00b      	beq.n	800056a <i2c_begin+0xba>
 8000552:	f44f 53d4 	mov.w	r3, #6784	; 0x1a80
	case 100000:
	case 400000:
		break;
	default:
		clkspeed = 100000;
 8000556:	f248 62a0 	movw	r2, #34464	; 0x86a0
	GPIO_PinAFConfig(PinPort(wirex->sda), PinSource(wirex->sda), GPIO_AF_I2C1 );

	//#if defined (REMAP_I2C1)
//Remap_I2C1_Configuration();
//#endif
	switch (clkspeed) {
 800055a:	f2c0 0306 	movt	r3, #6
	case 100000:
	case 400000:
		break;
	default:
		clkspeed = 100000;
 800055e:	f365 421f 	bfi	r2, r5, #16, #16
 8000562:	429e      	cmp	r6, r3
 8000564:	bf0c      	ite	eq
 8000566:	461e      	moveq	r6, r3
 8000568:	4616      	movne	r6, r2
	/* I2C configuration */
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
	I2C_InitStructure.I2C_ClockSpeed = clkspeed;
 800056a:	a906      	add	r1, sp, #24
		clkspeed = 100000;
		break;
	}
	/* I2C configuration */
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
 800056c:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8000570:	f8ad 300e 	strh.w	r3, [sp, #14]
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 8000574:	f44f 6380 	mov.w	r3, #1024	; 0x400
	default:
		clkspeed = 100000;
		break;
	}
	/* I2C configuration */
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 8000578:	2500      	movs	r5, #0
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
	I2C_InitStructure.I2C_ClockSpeed = clkspeed;
 800057a:	f841 6d10 	str.w	r6, [r1, #-16]!

	/* Apply I2C configuration after enabling it */
	I2C_Init(wirex->I2Cx, &I2C_InitStructure);
 800057e:	6820      	ldr	r0, [r4, #0]
		break;
	}
	/* I2C configuration */
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 8000580:	f8ad 3012 	strh.w	r3, [sp, #18]
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8000584:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000588:	f8ad 3014 	strh.w	r3, [sp, #20]
	default:
		clkspeed = 100000;
		break;
	}
	/* I2C configuration */
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 800058c:	f8ad 500c 	strh.w	r5, [sp, #12]
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
	I2C_InitStructure.I2C_ClockSpeed = clkspeed;

	/* Apply I2C configuration after enabling it */
	I2C_Init(wirex->I2Cx, &I2C_InitStructure);
 8000590:	f004 f842 	bl	8004618 <I2C_Init>
	/* I2C Peripheral Enable */
	I2C_Cmd(wirex->I2Cx, ENABLE);
 8000594:	6820      	ldr	r0, [r4, #0]
 8000596:	2101      	movs	r1, #1
 8000598:	f004 f8bc 	bl	8004714 <I2C_Cmd>

	wirex->status = NOT_READY;
 800059c:	20ff      	movs	r0, #255	; 0xff
 800059e:	7260      	strb	r0, [r4, #9]
	wirex->mode = I2C_MODE_NOTDEFINED;
 80005a0:	72a5      	strb	r5, [r4, #10]

	return true;
}
 80005a2:	b007      	add	sp, #28
 80005a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005a6:	bf00      	nop

080005a8 <i2c_start>:
}

boolean i2c_start(I2CBus * wirex, uint8_t addr) {
	uint16_t wc;
	//
	wirex->status = NOT_READY;
 80005a8:	23ff      	movs	r3, #255	; 0xff
	wirex->mode = I2C_MODE_NOTDEFINED;

	return true;
}

boolean i2c_start(I2CBus * wirex, uint8_t addr) {
 80005aa:	b570      	push	{r4, r5, r6, lr}
 80005ac:	4604      	mov	r4, r0
 80005ae:	460e      	mov	r6, r1
	uint16_t wc;
	//
	wirex->status = NOT_READY;
 80005b0:	7243      	strb	r3, [r0, #9]
	for(wc = 5; I2C_GetFlagStatus(wirex->I2Cx, I2C_FLAG_BUSY ); wc--) {
 80005b2:	2506      	movs	r5, #6
 80005b4:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80005b8:	6820      	ldr	r0, [r4, #0]
 80005ba:	f004 f9eb 	bl	8004994 <I2C_GetFlagStatus>
 80005be:	3d01      	subs	r5, #1
 80005c0:	4603      	mov	r3, r0
 80005c2:	b2ad      	uxth	r5, r5
		if (wc == 0)
			return false;
		delay_us(667);
 80005c4:	f240 209b 	movw	r0, #667	; 0x29b

boolean i2c_start(I2CBus * wirex, uint8_t addr) {
	uint16_t wc;
	//
	wirex->status = NOT_READY;
	for(wc = 5; I2C_GetFlagStatus(wirex->I2Cx, I2C_FLAG_BUSY ); wc--) {
 80005c8:	b12b      	cbz	r3, 80005d6 <i2c_start+0x2e>
		if (wc == 0)
 80005ca:	b115      	cbz	r5, 80005d2 <i2c_start+0x2a>
			return false;
		delay_us(667);
 80005cc:	f7ff fe4c 	bl	8000268 <delay_us>
 80005d0:	e7f0      	b.n	80005b4 <i2c_start+0xc>
	uint16_t wc;
	//
	wirex->status = NOT_READY;
	for(wc = 5; I2C_GetFlagStatus(wirex->I2Cx, I2C_FLAG_BUSY ); wc--) {
		if (wc == 0)
			return false;
 80005d2:	4628      	mov	r0, r5
 80005d4:	bd70      	pop	{r4, r5, r6, pc}
		delay_us(667);
	}
	wirex->status = READY;
 80005d6:	7263      	strb	r3, [r4, #9]

	/* Send STRAT condition */
	I2C_GenerateSTART(wirex->I2Cx, ENABLE);
 80005d8:	6820      	ldr	r0, [r4, #0]
 80005da:	2101      	movs	r1, #1
 80005dc:	f004 f8a8 	bl	8004730 <I2C_GenerateSTART>
	/* Test on EV5 and clear it */
	for (wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_MODE_SELECT ); wc--) {
 80005e0:	2506      	movs	r5, #6
 80005e2:	2101      	movs	r1, #1
 80005e4:	f2c0 0103 	movt	r1, #3
 80005e8:	6820      	ldr	r0, [r4, #0]
 80005ea:	f004 f9bd 	bl	8004968 <I2C_CheckEvent>
 80005ee:	3d01      	subs	r5, #1
 80005f0:	b2ad      	uxth	r5, r5
 80005f2:	b938      	cbnz	r0, 8000604 <i2c_start+0x5c>
		if (wc == 0)
			return false;
		delay_us(667);
 80005f4:	f240 209b 	movw	r0, #667	; 0x29b

	/* Send STRAT condition */
	I2C_GenerateSTART(wirex->I2Cx, ENABLE);
	/* Test on EV5 and clear it */
	for (wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_MODE_SELECT ); wc--) {
		if (wc == 0)
 80005f8:	b115      	cbz	r5, 8000600 <i2c_start+0x58>
			return false;
		delay_us(667);
 80005fa:	f7ff fe35 	bl	8000268 <delay_us>
 80005fe:	e7f0      	b.n	80005e2 <i2c_start+0x3a>
	/* Send STRAT condition */
	I2C_GenerateSTART(wirex->I2Cx, ENABLE);
	/* Test on EV5 and clear it */
	for (wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_MODE_SELECT ); wc--) {
		if (wc == 0)
			return false;
 8000600:	4628      	mov	r0, r5
		delay_us(667);
	}
	wirex->status = DST_ADDRESS_SENT;
	return true;

}
 8000602:	bd70      	pop	{r4, r5, r6, pc}
	for (wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_MODE_SELECT ); wc--) {
		if (wc == 0)
			return false;
		delay_us(667);
	}
	wirex->status = START_ISSUED;
 8000604:	2301      	movs	r3, #1

	/* Send address for write */
	I2C_Send7bitAddress(wirex->I2Cx, addr << 1, I2C_Direction_Transmitter);
 8000606:	0071      	lsls	r1, r6, #1
	for (wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_MODE_SELECT ); wc--) {
		if (wc == 0)
			return false;
		delay_us(667);
	}
	wirex->status = START_ISSUED;
 8000608:	7263      	strb	r3, [r4, #9]

	/* Send address for write */
	I2C_Send7bitAddress(wirex->I2Cx, addr << 1, I2C_Direction_Transmitter);
 800060a:	6820      	ldr	r0, [r4, #0]
 800060c:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 8000610:	2200      	movs	r2, #0
 8000612:	f004 f8a9 	bl	8004768 <I2C_Send7bitAddress>
 8000616:	2506      	movs	r5, #6
	/* Test on EV6 and clear it */
	for (wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED ); wc--) {
 8000618:	2182      	movs	r1, #130	; 0x82
 800061a:	f2c0 0107 	movt	r1, #7
 800061e:	6820      	ldr	r0, [r4, #0]
 8000620:	f004 f9a2 	bl	8004968 <I2C_CheckEvent>
		delay_us(667);
	}
	wirex->status = START_ISSUED;

	/* Send address for write */
	I2C_Send7bitAddress(wirex->I2Cx, addr << 1, I2C_Direction_Transmitter);
 8000624:	3d01      	subs	r5, #1
 8000626:	b2ad      	uxth	r5, r5
	/* Test on EV6 and clear it */
	for (wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED ); wc--) {
 8000628:	b930      	cbnz	r0, 8000638 <i2c_start+0x90>
		if (wc == 0)
			return false;
		delay_us(667);
 800062a:	f240 209b 	movw	r0, #667	; 0x29b

	/* Send address for write */
	I2C_Send7bitAddress(wirex->I2Cx, addr << 1, I2C_Direction_Transmitter);
	/* Test on EV6 and clear it */
	for (wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED ); wc--) {
		if (wc == 0)
 800062e:	2d00      	cmp	r5, #0
 8000630:	d0cf      	beq.n	80005d2 <i2c_start+0x2a>
			return false;
		delay_us(667);
 8000632:	f7ff fe19 	bl	8000268 <delay_us>
 8000636:	e7ef      	b.n	8000618 <i2c_start+0x70>
	}
	wirex->status = DST_ADDRESS_SENT;
 8000638:	2302      	movs	r3, #2
 800063a:	7263      	strb	r3, [r4, #9]
	return true;
 800063c:	20ff      	movs	r0, #255	; 0xff
 800063e:	bd70      	pop	{r4, r5, r6, pc}

08000640 <i2c_receive>:
	wirex->mode = I2C_MODE_NOTDEFINED;

	return true;
}

boolean i2c_receive(I2CBus * wirex, uint8_t addr, uint8_t req, uint8_t * recv, uint16_t lim) {
 8000640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint16_t i;
	uint16_t wc;

	wirex->mode = I2C_MODE_MASTERRECEIVER;
 8000644:	2502      	movs	r5, #2
 8000646:	7285      	strb	r5, [r0, #10]
	wirex->mode = I2C_MODE_NOTDEFINED;

	return true;
}

boolean i2c_receive(I2CBus * wirex, uint8_t addr, uint8_t req, uint8_t * recv, uint16_t lim) {
 8000648:	4604      	mov	r4, r0
 800064a:	460d      	mov	r5, r1
 800064c:	4616      	mov	r6, r2
 800064e:	461f      	mov	r7, r3
 8000650:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	uint16_t i;
	uint16_t wc;

	wirex->mode = I2C_MODE_MASTERRECEIVER;
	//
	if ( !i2c_start(wirex, addr) )
 8000654:	f7ff ffa8 	bl	80005a8 <i2c_start>
 8000658:	b908      	cbnz	r0, 800065e <i2c_receive+0x1e>
	I2C_AcknowledgeConfig(wirex->I2Cx, ENABLE);
	wirex->status = NOT_READY;
	wirex->mode = I2C_MODE_NOTDEFINED;

	return true;
}
 800065a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	//
	if ( !i2c_start(wirex, addr) )
		return false;

	/* Send the EEPROM's internal address to read from: MSB of the address first */
	I2C_SendData(wirex->I2Cx, req);
 800065e:	4631      	mov	r1, r6
 8000660:	6820      	ldr	r0, [r4, #0]
 8000662:	f004 f919 	bl	8004898 <I2C_SendData>
	wirex->status = BYTE_TRANSMITTING;
 8000666:	2304      	movs	r3, #4
 8000668:	7263      	strb	r3, [r4, #9]
	/* Test on EV8 and clear it */

	for (wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED ); wc--) {
 800066a:	2606      	movs	r6, #6
 800066c:	2184      	movs	r1, #132	; 0x84
 800066e:	f2c0 0107 	movt	r1, #7
 8000672:	6820      	ldr	r0, [r4, #0]
 8000674:	f004 f978 	bl	8004968 <I2C_CheckEvent>
 8000678:	3e01      	subs	r6, #1
 800067a:	b2b6      	uxth	r6, r6
 800067c:	b940      	cbnz	r0, 8000690 <i2c_receive+0x50>
		if (wc == 0)
			return false;
		delay_us(667);
 800067e:	f240 209b 	movw	r0, #667	; 0x29b
	I2C_SendData(wirex->I2Cx, req);
	wirex->status = BYTE_TRANSMITTING;
	/* Test on EV8 and clear it */

	for (wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED ); wc--) {
		if (wc == 0)
 8000682:	b116      	cbz	r6, 800068a <i2c_receive+0x4a>
			return false;
		delay_us(667);
 8000684:	f7ff fdf0 	bl	8000268 <delay_us>
 8000688:	e7f0      	b.n	800066c <i2c_receive+0x2c>
	wirex->status = SRC_ADDRESS_SENT;
	for (i = 1; i < lim; i++) {
		wirex->status = RECEIVE_BYTE_READY;
		for(wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED ); wc--) {
			if (wc == 0)
				return false;
 800068a:	4630      	mov	r0, r6
 800068c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED ); wc--) {
		if (wc == 0)
			return false;
		delay_us(667);
	}
	wirex->status = TRANSMISSION_COMPLETED;
 8000690:	2606      	movs	r6, #6
 8000692:	7266      	strb	r6, [r4, #9]

	/* Send STRAT condition a second time */
	I2C_GenerateSTART(wirex->I2Cx, ENABLE);
 8000694:	6820      	ldr	r0, [r4, #0]
 8000696:	2101      	movs	r1, #1
 8000698:	f004 f84a 	bl	8004730 <I2C_GenerateSTART>
	/* Test on EV5 and clear it */
	for (wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_MODE_SELECT ); wc--) {
 800069c:	2101      	movs	r1, #1
 800069e:	f2c0 0103 	movt	r1, #3
 80006a2:	6820      	ldr	r0, [r4, #0]
 80006a4:	f004 f960 	bl	8004968 <I2C_CheckEvent>
 80006a8:	3e01      	subs	r6, #1
 80006aa:	b2b6      	uxth	r6, r6
 80006ac:	b930      	cbnz	r0, 80006bc <i2c_receive+0x7c>
		if (wc == 0)
			return false;
		delay_us(667);
 80006ae:	f240 209b 	movw	r0, #667	; 0x29b

	/* Send STRAT condition a second time */
	I2C_GenerateSTART(wirex->I2Cx, ENABLE);
	/* Test on EV5 and clear it */
	for (wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_MODE_SELECT ); wc--) {
		if (wc == 0)
 80006b2:	2e00      	cmp	r6, #0
 80006b4:	d0e9      	beq.n	800068a <i2c_receive+0x4a>
			return false;
		delay_us(667);
 80006b6:	f7ff fdd7 	bl	8000268 <delay_us>
 80006ba:	e7ef      	b.n	800069c <i2c_receive+0x5c>
	}
	wirex->status = RESTART_ISSUED;
 80006bc:	2307      	movs	r3, #7

	/* Send EEPROM address for read */
	I2C_Send7bitAddress(wirex->I2Cx, addr << 1, I2C_Direction_Receiver );
 80006be:	0069      	lsls	r1, r5, #1
	for (wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_MODE_SELECT ); wc--) {
		if (wc == 0)
			return false;
		delay_us(667);
	}
	wirex->status = RESTART_ISSUED;
 80006c0:	7263      	strb	r3, [r4, #9]

	/* Send EEPROM address for read */
	I2C_Send7bitAddress(wirex->I2Cx, addr << 1, I2C_Direction_Receiver );
 80006c2:	6820      	ldr	r0, [r4, #0]
 80006c4:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 80006c8:	2201      	movs	r2, #1
 80006ca:	f004 f84d 	bl	8004768 <I2C_Send7bitAddress>
	/* Test on EV6 and clear it */
	for (wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED ); wc--) {
 80006ce:	2606      	movs	r6, #6
 80006d0:	2102      	movs	r1, #2
 80006d2:	f2c0 0103 	movt	r1, #3
 80006d6:	6820      	ldr	r0, [r4, #0]
 80006d8:	f004 f946 	bl	8004968 <I2C_CheckEvent>
 80006dc:	3e01      	subs	r6, #1
 80006de:	b2b6      	uxth	r6, r6
 80006e0:	b930      	cbnz	r0, 80006f0 <i2c_receive+0xb0>
		if (wc == 0)
			return false;
		delay_us(667);
 80006e2:	f240 209b 	movw	r0, #667	; 0x29b

	/* Send EEPROM address for read */
	I2C_Send7bitAddress(wirex->I2Cx, addr << 1, I2C_Direction_Receiver );
	/* Test on EV6 and clear it */
	for (wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED ); wc--) {
		if (wc == 0)
 80006e6:	2e00      	cmp	r6, #0
 80006e8:	d0cf      	beq.n	800068a <i2c_receive+0x4a>
			return false;
		delay_us(667);
 80006ea:	f7ff fdbd 	bl	8000268 <delay_us>
 80006ee:	e7ef      	b.n	80006d0 <i2c_receive+0x90>
	}
	wirex->status = SRC_ADDRESS_SENT;
 80006f0:	2303      	movs	r3, #3
	for (i = 1; i < lim; i++) {
 80006f2:	f1b8 0f01 	cmp.w	r8, #1
	for (wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED ); wc--) {
		if (wc == 0)
			return false;
		delay_us(667);
	}
	wirex->status = SRC_ADDRESS_SENT;
 80006f6:	7263      	strb	r3, [r4, #9]
	for (i = 1; i < lim; i++) {
 80006f8:	d926      	bls.n	8000748 <i2c_receive+0x108>
	wirex->mode = I2C_MODE_NOTDEFINED;

	return true;
}

boolean i2c_receive(I2CBus * wirex, uint8_t addr, uint8_t req, uint8_t * recv, uint16_t lim) {
 80006fa:	f1a8 0802 	sub.w	r8, r8, #2
 80006fe:	1c7b      	adds	r3, r7, #1
 8000700:	fa13 fa88 	uxtah	sl, r3, r8
		if (wc == 0)
			return false;
		delay_us(667);
	}
	wirex->status = SRC_ADDRESS_SENT;
	for (i = 1; i < lim; i++) {
 8000704:	463d      	mov	r5, r7
		wirex->status = RECEIVE_BYTE_READY;
 8000706:	f04f 0808 	mov.w	r8, #8
			delay_us(667);

		}
		/* Read a byte from the EEPROM */
		*recv++ = I2C_ReceiveData(wirex->I2Cx );
		wirex->status = BYTE_RECEIVED;
 800070a:	f04f 0909 	mov.w	r9, #9
			return false;
		delay_us(667);
	}
	wirex->status = SRC_ADDRESS_SENT;
	for (i = 1; i < lim; i++) {
		wirex->status = RECEIVE_BYTE_READY;
 800070e:	f884 8009 	strb.w	r8, [r4, #9]
		for(wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED ); wc--) {
 8000712:	2606      	movs	r6, #6
 8000714:	2140      	movs	r1, #64	; 0x40
 8000716:	f2c0 0103 	movt	r1, #3
 800071a:	6820      	ldr	r0, [r4, #0]
 800071c:	f004 f924 	bl	8004968 <I2C_CheckEvent>
 8000720:	3e01      	subs	r6, #1
 8000722:	b2b6      	uxth	r6, r6
 8000724:	b930      	cbnz	r0, 8000734 <i2c_receive+0xf4>
			if (wc == 0)
				return false;
			delay_us(667);
 8000726:	f240 209b 	movw	r0, #667	; 0x29b
	}
	wirex->status = SRC_ADDRESS_SENT;
	for (i = 1; i < lim; i++) {
		wirex->status = RECEIVE_BYTE_READY;
		for(wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED ); wc--) {
			if (wc == 0)
 800072a:	2e00      	cmp	r6, #0
 800072c:	d0ad      	beq.n	800068a <i2c_receive+0x4a>
				return false;
			delay_us(667);
 800072e:	f7ff fd9b 	bl	8000268 <delay_us>
 8000732:	e7ef      	b.n	8000714 <i2c_receive+0xd4>

		}
		/* Read a byte from the EEPROM */
		*recv++ = I2C_ReceiveData(wirex->I2Cx );
 8000734:	6820      	ldr	r0, [r4, #0]
 8000736:	f004 f8b1 	bl	800489c <I2C_ReceiveData>
 800073a:	f805 0b01 	strb.w	r0, [r5], #1
		if (wc == 0)
			return false;
		delay_us(667);
	}
	wirex->status = SRC_ADDRESS_SENT;
	for (i = 1; i < lim; i++) {
 800073e:	4555      	cmp	r5, sl
			delay_us(667);

		}
		/* Read a byte from the EEPROM */
		*recv++ = I2C_ReceiveData(wirex->I2Cx );
		wirex->status = BYTE_RECEIVED;
 8000740:	f884 9009 	strb.w	r9, [r4, #9]
				return false;
			delay_us(667);

		}
		/* Read a byte from the EEPROM */
		*recv++ = I2C_ReceiveData(wirex->I2Cx );
 8000744:	462f      	mov	r7, r5
		if (wc == 0)
			return false;
		delay_us(667);
	}
	wirex->status = SRC_ADDRESS_SENT;
	for (i = 1; i < lim; i++) {
 8000746:	d1e2      	bne.n	800070e <i2c_receive+0xce>
		}
		/* Read a byte from the EEPROM */
		*recv++ = I2C_ReceiveData(wirex->I2Cx );
		wirex->status = BYTE_RECEIVED;
	}
	wirex->status = BEFORELAST_BYTE_RECEIVED;
 8000748:	230a      	movs	r3, #10
 800074a:	7263      	strb	r3, [r4, #9]

	/* Disable Acknowledgement */
	I2C_AcknowledgeConfig(wirex->I2Cx, DISABLE);
 800074c:	6820      	ldr	r0, [r4, #0]
 800074e:	2100      	movs	r1, #0
 8000750:	f004 f814 	bl	800477c <I2C_AcknowledgeConfig>
	/* Send STOP Condition */
	I2C_GenerateSTOP(wirex->I2Cx, ENABLE);
 8000754:	6820      	ldr	r0, [r4, #0]
 8000756:	2101      	movs	r1, #1
 8000758:	f003 fff8 	bl	800474c <I2C_GenerateSTOP>
	wirex->status = LAST_BYTE_READY;
 800075c:	230b      	movs	r3, #11
 800075e:	7263      	strb	r3, [r4, #9]

	for(wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED ); wc--) {
 8000760:	2506      	movs	r5, #6
 8000762:	e001      	b.n	8000768 <i2c_receive+0x128>
		if (wc == 0)
			return false;
		delay_us(667);
 8000764:	f7ff fd80 	bl	8000268 <delay_us>
	I2C_AcknowledgeConfig(wirex->I2Cx, DISABLE);
	/* Send STOP Condition */
	I2C_GenerateSTOP(wirex->I2Cx, ENABLE);
	wirex->status = LAST_BYTE_READY;

	for(wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED ); wc--) {
 8000768:	2140      	movs	r1, #64	; 0x40
 800076a:	f2c0 0103 	movt	r1, #3
 800076e:	6820      	ldr	r0, [r4, #0]
 8000770:	f004 f8fa 	bl	8004968 <I2C_CheckEvent>
 8000774:	3d01      	subs	r5, #1
 8000776:	b2ad      	uxth	r5, r5
 8000778:	b928      	cbnz	r0, 8000786 <i2c_receive+0x146>
		if (wc == 0)
			return false;
		delay_us(667);
 800077a:	f240 209b 	movw	r0, #667	; 0x29b
	/* Send STOP Condition */
	I2C_GenerateSTOP(wirex->I2Cx, ENABLE);
	wirex->status = LAST_BYTE_READY;

	for(wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED ); wc--) {
		if (wc == 0)
 800077e:	2d00      	cmp	r5, #0
 8000780:	d1f0      	bne.n	8000764 <i2c_receive+0x124>
			return false;
 8000782:	4628      	mov	r0, r5
 8000784:	e769      	b.n	800065a <i2c_receive+0x1a>
		delay_us(667);
	}
	/* Read a byte from the EEPROM */
	*recv = I2C_ReceiveData(wirex->I2Cx );
 8000786:	6820      	ldr	r0, [r4, #0]
 8000788:	f004 f888 	bl	800489c <I2C_ReceiveData>
	wirex->status = RECEIVE_BYTE_COMPLETED;
 800078c:	230c      	movs	r3, #12
		if (wc == 0)
			return false;
		delay_us(667);
	}
	/* Read a byte from the EEPROM */
	*recv = I2C_ReceiveData(wirex->I2Cx );
 800078e:	7038      	strb	r0, [r7, #0]
	wirex->status = RECEIVE_BYTE_COMPLETED;

	/* Enable Acknowledgement to be ready for another reception */
	I2C_AcknowledgeConfig(wirex->I2Cx, ENABLE);
 8000790:	6820      	ldr	r0, [r4, #0]
			return false;
		delay_us(667);
	}
	/* Read a byte from the EEPROM */
	*recv = I2C_ReceiveData(wirex->I2Cx );
	wirex->status = RECEIVE_BYTE_COMPLETED;
 8000792:	7263      	strb	r3, [r4, #9]

	/* Enable Acknowledgement to be ready for another reception */
	I2C_AcknowledgeConfig(wirex->I2Cx, ENABLE);
 8000794:	2101      	movs	r1, #1
 8000796:	f003 fff1 	bl	800477c <I2C_AcknowledgeConfig>
	wirex->status = NOT_READY;
 800079a:	20ff      	movs	r0, #255	; 0xff
	wirex->mode = I2C_MODE_NOTDEFINED;
 800079c:	2300      	movs	r3, #0
	*recv = I2C_ReceiveData(wirex->I2Cx );
	wirex->status = RECEIVE_BYTE_COMPLETED;

	/* Enable Acknowledgement to be ready for another reception */
	I2C_AcknowledgeConfig(wirex->I2Cx, ENABLE);
	wirex->status = NOT_READY;
 800079e:	7260      	strb	r0, [r4, #9]
	wirex->mode = I2C_MODE_NOTDEFINED;
 80007a0:	72a3      	strb	r3, [r4, #10]

	return true;
 80007a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007a6:	bf00      	nop

080007a8 <i2c_transmit>:
	wirex->mode = I2C_MODE_NOTDEFINED;

	return true;
}

boolean i2c_transmit(I2CBus * wirex, uint8_t addr, uint8_t * data, uint16_t length) {
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint16_t i;
	uint16_t wc;

	wirex->mode = I2C_MODE_MASTERTRANSMITTER;
 80007ac:	2501      	movs	r5, #1
 80007ae:	7285      	strb	r5, [r0, #10]
	wirex->mode = I2C_MODE_NOTDEFINED;

	return true;
}

boolean i2c_transmit(I2CBus * wirex, uint8_t addr, uint8_t * data, uint16_t length) {
 80007b0:	4604      	mov	r4, r0
 80007b2:	4615      	mov	r5, r2
 80007b4:	4698      	mov	r8, r3
	uint16_t i;
	uint16_t wc;

	wirex->mode = I2C_MODE_MASTERTRANSMITTER;
	//
	if ( !i2c_start(wirex, addr) )
 80007b6:	f7ff fef7 	bl	80005a8 <i2c_start>
 80007ba:	b1f0      	cbz	r0, 80007fa <i2c_transmit+0x52>
		return false;

	for (i=0; i<length; i++ ) {
 80007bc:	f1b8 0f00 	cmp.w	r8, #0
 80007c0:	d023      	beq.n	800080a <i2c_transmit+0x62>
 80007c2:	2700      	movs	r7, #0
		I2C_SendData(wirex->I2Cx, data[i]);
		wirex->status = BYTE_TRANSMITTING;
 80007c4:	f04f 0904 	mov.w	r9, #4
		for(wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED); wc--) {
			if (wc == 0)
				return false;
			delay_us(667);
		}
		wirex->status = BYTE_TRANSMITTED;
 80007c8:	f04f 0a05 	mov.w	sl, #5
	//
	if ( !i2c_start(wirex, addr) )
		return false;

	for (i=0; i<length; i++ ) {
		I2C_SendData(wirex->I2Cx, data[i]);
 80007cc:	6820      	ldr	r0, [r4, #0]
 80007ce:	5de9      	ldrb	r1, [r5, r7]
 80007d0:	f004 f862 	bl	8004898 <I2C_SendData>
		wirex->status = BYTE_TRANSMITTING;
		// Test on EV8 and clear it
		for(wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED); wc--) {
 80007d4:	2606      	movs	r6, #6
	if ( !i2c_start(wirex, addr) )
		return false;

	for (i=0; i<length; i++ ) {
		I2C_SendData(wirex->I2Cx, data[i]);
		wirex->status = BYTE_TRANSMITTING;
 80007d6:	f884 9009 	strb.w	r9, [r4, #9]
		// Test on EV8 and clear it
		for(wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED); wc--) {
 80007da:	2184      	movs	r1, #132	; 0x84
 80007dc:	f2c0 0107 	movt	r1, #7
 80007e0:	6820      	ldr	r0, [r4, #0]
 80007e2:	f004 f8c1 	bl	8004968 <I2C_CheckEvent>
 80007e6:	3e01      	subs	r6, #1
 80007e8:	b2b6      	uxth	r6, r6
 80007ea:	b940      	cbnz	r0, 80007fe <i2c_transmit+0x56>
			if (wc == 0)
				return false;
			delay_us(667);
 80007ec:	f240 209b 	movw	r0, #667	; 0x29b
	for (i=0; i<length; i++ ) {
		I2C_SendData(wirex->I2Cx, data[i]);
		wirex->status = BYTE_TRANSMITTING;
		// Test on EV8 and clear it
		for(wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED); wc--) {
			if (wc == 0)
 80007f0:	b116      	cbz	r6, 80007f8 <i2c_transmit+0x50>
				return false;
			delay_us(667);
 80007f2:	f7ff fd39 	bl	8000268 <delay_us>
 80007f6:	e7f0      	b.n	80007da <i2c_transmit+0x32>
		I2C_SendData(wirex->I2Cx, data[i]);
		wirex->status = BYTE_TRANSMITTING;
		// Test on EV8 and clear it
		for(wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED); wc--) {
			if (wc == 0)
				return false;
 80007f8:	4630      	mov	r0, r6
	I2C_GenerateSTOP(wirex->I2Cx, ENABLE);
	wirex->status = NOT_READY;
	wirex->mode = I2C_MODE_NOTDEFINED;

	return true;
}
 80007fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for(wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED); wc--) {
			if (wc == 0)
				return false;
			delay_us(667);
		}
		wirex->status = BYTE_TRANSMITTED;
 80007fe:	3701      	adds	r7, #1
	wirex->mode = I2C_MODE_MASTERTRANSMITTER;
	//
	if ( !i2c_start(wirex, addr) )
		return false;

	for (i=0; i<length; i++ ) {
 8000800:	b2bb      	uxth	r3, r7
 8000802:	4543      	cmp	r3, r8
		for(wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED); wc--) {
			if (wc == 0)
				return false;
			delay_us(667);
		}
		wirex->status = BYTE_TRANSMITTED;
 8000804:	f884 a009 	strb.w	sl, [r4, #9]
	wirex->mode = I2C_MODE_MASTERTRANSMITTER;
	//
	if ( !i2c_start(wirex, addr) )
		return false;

	for (i=0; i<length; i++ ) {
 8000808:	d3e0      	bcc.n	80007cc <i2c_transmit+0x24>
			delay_us(667);
		}
		wirex->status = BYTE_TRANSMITTED;
	}

	wirex->status = TRANSMISSION_COMPLETED;
 800080a:	2306      	movs	r3, #6
 800080c:	7263      	strb	r3, [r4, #9]

	// generate stop condition
	I2C_GenerateSTOP(wirex->I2Cx, ENABLE);
 800080e:	6820      	ldr	r0, [r4, #0]
 8000810:	2101      	movs	r1, #1
 8000812:	f003 ff9b 	bl	800474c <I2C_GenerateSTOP>
	wirex->status = NOT_READY;
 8000816:	20ff      	movs	r0, #255	; 0xff
	wirex->mode = I2C_MODE_NOTDEFINED;
 8000818:	2300      	movs	r3, #0

	wirex->status = TRANSMISSION_COMPLETED;

	// generate stop condition
	I2C_GenerateSTOP(wirex->I2Cx, ENABLE);
	wirex->status = NOT_READY;
 800081a:	7260      	strb	r0, [r4, #9]
	wirex->mode = I2C_MODE_NOTDEFINED;
 800081c:	72a3      	strb	r3, [r4, #10]

	return true;
 800081e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000822:	bf00      	nop

08000824 <spi_begin>:
#include "spi.h"

//SPI_TypeDef * spix[] = { SPI1, SPI2, SPI3 };

void spi_begin(SPI_TypeDef * SPIx, GPIOPin sck, GPIOPin miso, GPIOPin mosi,
		GPIOPin nss) {
 8000824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
//	GPIOPin sck, miso, mosi, nss;

	/* PCLK2 = HCLK/2 */
	//RCC_PCLK2Config(RCC_HCLK_Div2);
//	SPIx = spix[spibus];
	if (SPIx == SPI1) {
 8000828:	f44f 5440 	mov.w	r4, #12288	; 0x3000
#include "spi.h"

//SPI_TypeDef * spix[] = { SPI1, SPI2, SPI3 };

void spi_begin(SPI_TypeDef * SPIx, GPIOPin sck, GPIOPin miso, GPIOPin mosi,
		GPIOPin nss) {
 800082c:	b08b      	sub	sp, #44	; 0x2c
//	GPIOPin sck, miso, mosi, nss;

	/* PCLK2 = HCLK/2 */
	//RCC_PCLK2Config(RCC_HCLK_Div2);
//	SPIx = spix[spibus];
	if (SPIx == SPI1) {
 800082e:	f2c4 0401 	movt	r4, #16385	; 0x4001
 8000832:	42a0      	cmp	r0, r4
#include "spi.h"

//SPI_TypeDef * spix[] = { SPI1, SPI2, SPI3 };

void spi_begin(SPI_TypeDef * SPIx, GPIOPin sck, GPIOPin miso, GPIOPin mosi,
		GPIOPin nss) {
 8000834:	4681      	mov	r9, r0
 8000836:	460f      	mov	r7, r1
 8000838:	4616      	mov	r6, r2
 800083a:	4698      	mov	r8, r3
 800083c:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
//	GPIOPin sck, miso, mosi, nss;

	/* PCLK2 = HCLK/2 */
	//RCC_PCLK2Config(RCC_HCLK_Div2);
//	SPIx = spix[spibus];
	if (SPIx == SPI1) {
 8000840:	f000 80ac 	beq.w	800099c <spi_begin+0x178>
//		 sck = PA5; // PB3
//		 miso = PA6; // PB4
//		 mosi = PA7; // PB5
//		 nss = PA4; // PA15
//		break;
	} else if ( SPIx == SPI2 ) {
 8000844:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000848:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800084c:	4298      	cmp	r0, r3
 800084e:	f000 809d 	beq.w	800098c <spi_begin+0x168>
		// PB12, 13, 14, 15
//		break;
	} else {
//	case SPI3Bus:
//	default:
		RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 8000852:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000856:	2101      	movs	r1, #1
 8000858:	f004 fb5a 	bl	8004f10 <RCC_APB1PeriphResetCmd>
		af = GPIO_AF_SPI3;
 800085c:	f04f 0b06 	mov.w	fp, #6
//		 mosi = PB5;
//		 nss = PA15; // PA4;
//		break;
	}

	GPIOMode(PinPort(sck), PinBit(sck), GPIO_Mode_AF, GPIO_Speed_25MHz,
 8000860:	4638      	mov	r0, r7
 8000862:	f7ff fd2d 	bl	80002c0 <PinPort>
 8000866:	4684      	mov	ip, r0
 8000868:	4638      	mov	r0, r7
 800086a:	f8cd c00c 	str.w	ip, [sp, #12]
 800086e:	f7ff fd31 	bl	80002d4 <PinBit>
 8000872:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8000876:	2401      	movs	r4, #1
 8000878:	2500      	movs	r5, #0
 800087a:	4601      	mov	r1, r0
 800087c:	2202      	movs	r2, #2
 800087e:	4623      	mov	r3, r4
 8000880:	4660      	mov	r0, ip
 8000882:	9500      	str	r5, [sp, #0]
 8000884:	9401      	str	r4, [sp, #4]
 8000886:	f7ff fd93 	bl	80003b0 <GPIOMode>
			GPIO_OType_PP, GPIO_PuPd_UP);
	GPIOMode(PinPort(miso), PinBit(miso), GPIO_Mode_AF, GPIO_Speed_25MHz,
 800088a:	4630      	mov	r0, r6
 800088c:	f7ff fd18 	bl	80002c0 <PinPort>
 8000890:	4684      	mov	ip, r0
 8000892:	4630      	mov	r0, r6
 8000894:	f8cd c00c 	str.w	ip, [sp, #12]
 8000898:	f7ff fd1c 	bl	80002d4 <PinBit>
 800089c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80008a0:	9500      	str	r5, [sp, #0]
 80008a2:	4601      	mov	r1, r0
 80008a4:	2202      	movs	r2, #2
 80008a6:	4623      	mov	r3, r4
 80008a8:	4660      	mov	r0, ip
 80008aa:	9401      	str	r4, [sp, #4]
 80008ac:	f7ff fd80 	bl	80003b0 <GPIOMode>
			GPIO_OType_PP, GPIO_PuPd_UP);
	GPIOMode(PinPort(mosi), PinBit(mosi), GPIO_Mode_AF, GPIO_Speed_25MHz,
 80008b0:	4640      	mov	r0, r8
 80008b2:	f7ff fd05 	bl	80002c0 <PinPort>
 80008b6:	4684      	mov	ip, r0
 80008b8:	4640      	mov	r0, r8
 80008ba:	f8cd c00c 	str.w	ip, [sp, #12]
 80008be:	f7ff fd09 	bl	80002d4 <PinBit>
 80008c2:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80008c6:	9500      	str	r5, [sp, #0]
 80008c8:	4601      	mov	r1, r0
 80008ca:	2202      	movs	r2, #2
 80008cc:	4660      	mov	r0, ip
 80008ce:	4623      	mov	r3, r4
 80008d0:	9401      	str	r4, [sp, #4]
 80008d2:	f7ff fd6d 	bl	80003b0 <GPIOMode>
			GPIO_OType_PP, GPIO_PuPd_UP);
	GPIO_PinAFConfig(PinPort(sck), PinSource(sck), af);
 80008d6:	4638      	mov	r0, r7
 80008d8:	f7ff fcf2 	bl	80002c0 <PinPort>
 80008dc:	4603      	mov	r3, r0
 80008de:	4638      	mov	r0, r7
 80008e0:	9303      	str	r3, [sp, #12]
 80008e2:	f7ff fcff 	bl	80002e4 <PinSource>
 80008e6:	9b03      	ldr	r3, [sp, #12]
 80008e8:	4601      	mov	r1, r0
 80008ea:	465a      	mov	r2, fp
 80008ec:	4618      	mov	r0, r3
 80008ee:	f003 fb71 	bl	8003fd4 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(PinPort(miso), PinSource(miso), af);
 80008f2:	4630      	mov	r0, r6
 80008f4:	f7ff fce4 	bl	80002c0 <PinPort>
 80008f8:	4607      	mov	r7, r0
 80008fa:	4630      	mov	r0, r6
 80008fc:	f7ff fcf2 	bl	80002e4 <PinSource>
 8000900:	465a      	mov	r2, fp
 8000902:	4601      	mov	r1, r0
 8000904:	4638      	mov	r0, r7
 8000906:	f003 fb65 	bl	8003fd4 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(PinPort(mosi), PinSource(mosi), af);
 800090a:	4640      	mov	r0, r8
 800090c:	f7ff fcd8 	bl	80002c0 <PinPort>
 8000910:	4606      	mov	r6, r0
 8000912:	4640      	mov	r0, r8
 8000914:	f7ff fce6 	bl	80002e4 <PinSource>
 8000918:	465a      	mov	r2, fp
 800091a:	4601      	mov	r1, r0
 800091c:	4630      	mov	r0, r6
 800091e:	f003 fb59 	bl	8003fd4 <GPIO_PinAFConfig>
	// nSS by software
	GPIOMode(PinPort(nss), PinBit(nss), GPIO_Mode_OUT, GPIO_Speed_25MHz,
 8000922:	4650      	mov	r0, sl
 8000924:	f7ff fccc 	bl	80002c0 <PinPort>
 8000928:	4606      	mov	r6, r0
 800092a:	4650      	mov	r0, sl
 800092c:	f7ff fcd2 	bl	80002d4 <PinBit>
 8000930:	4622      	mov	r2, r4
 8000932:	4623      	mov	r3, r4
 8000934:	4601      	mov	r1, r0
 8000936:	4630      	mov	r0, r6
 8000938:	9500      	str	r5, [sp, #0]
 800093a:	9401      	str	r4, [sp, #4]
 800093c:	f7ff fd38 	bl	80003b0 <GPIOMode>
			GPIO_OType_PP, GPIO_PuPd_UP);
	digitalWrite(nss, HIGH);
 8000940:	4650      	mov	r0, sl
 8000942:	4621      	mov	r1, r4
 8000944:	f7ff fcfa 	bl	800033c <digitalWrite>
	//GPIO_PinAFConfig(PinPort(nss), PinSource(nss), af);

	SPI_InitStruct.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
	SPI_InitStruct.SPI_Mode = SPI_Mode_Master;
 8000948:	f44f 7382 	mov.w	r3, #260	; 0x104
 800094c:	f8ad 3016 	strh.w	r3, [sp, #22]
	SPI_InitStruct.SPI_DataSize = SPI_DataSize_8b;
	SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;
	SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
	SPI_InitStruct.SPI_NSS = SPI_NSS_Soft;
 8000950:	f44f 7300 	mov.w	r3, #512	; 0x200
	SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_8;
	SPI_InitStruct.SPI_FirstBit = SPI_FirstBit_MSB;
	SPI_InitStruct.SPI_CRCPolynomial = SPI_CRC_Rx;

	SPI_Init(SPIx, &SPI_InitStruct);
 8000954:	4648      	mov	r0, r9
 8000956:	a905      	add	r1, sp, #20
	SPI_InitStruct.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
	SPI_InitStruct.SPI_Mode = SPI_Mode_Master;
	SPI_InitStruct.SPI_DataSize = SPI_DataSize_8b;
	SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;
	SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
	SPI_InitStruct.SPI_NSS = SPI_NSS_Soft;
 8000958:	f8ad 301e 	strh.w	r3, [sp, #30]
	SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_8;
 800095c:	2310      	movs	r3, #16
	GPIOMode(PinPort(nss), PinBit(nss), GPIO_Mode_OUT, GPIO_Speed_25MHz,
			GPIO_OType_PP, GPIO_PuPd_UP);
	digitalWrite(nss, HIGH);
	//GPIO_PinAFConfig(PinPort(nss), PinSource(nss), af);

	SPI_InitStruct.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 800095e:	f8ad 5014 	strh.w	r5, [sp, #20]
	SPI_InitStruct.SPI_Mode = SPI_Mode_Master;
	SPI_InitStruct.SPI_DataSize = SPI_DataSize_8b;
 8000962:	f8ad 5018 	strh.w	r5, [sp, #24]
	SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;
 8000966:	f8ad 501a 	strh.w	r5, [sp, #26]
	SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
 800096a:	f8ad 501c 	strh.w	r5, [sp, #28]
	SPI_InitStruct.SPI_NSS = SPI_NSS_Soft;
	SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_8;
 800096e:	f8ad 3020 	strh.w	r3, [sp, #32]
	SPI_InitStruct.SPI_FirstBit = SPI_FirstBit_MSB;
 8000972:	f8ad 5022 	strh.w	r5, [sp, #34]	; 0x22
	SPI_InitStruct.SPI_CRCPolynomial = SPI_CRC_Rx;
 8000976:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24

	SPI_Init(SPIx, &SPI_InitStruct);
 800097a:	f005 fb93 	bl	80060a4 <SPI_Init>

	SPI_Cmd(SPIx, ENABLE);
 800097e:	4648      	mov	r0, r9
 8000980:	4621      	mov	r1, r4
 8000982:	f005 fc43 	bl	800620c <SPI_Cmd>
	 *              - Enable or disable the SS output using the SPI_SSOutputCmd() function
	 *
	 *          10. To use the CRC Hardware calculation feature refer to the Peripheral
	 *              CRC hardware Calculation subsection.
	 */
}
 8000986:	b00b      	add	sp, #44	; 0x2c
 8000988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
//		 mosi = PA7; // PB5
//		 nss = PA4; // PA15
//		break;
	} else if ( SPIx == SPI2 ) {
//	case SPI2Bus:
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE);
 800098c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000990:	2101      	movs	r1, #1
 8000992:	f004 fa77 	bl	8004e84 <RCC_APB1PeriphClockCmd>
		af = GPIO_AF_SPI2;
 8000996:	f04f 0b05 	mov.w	fp, #5
 800099a:	e761      	b.n	8000860 <spi_begin+0x3c>
	/* PCLK2 = HCLK/2 */
	//RCC_PCLK2Config(RCC_HCLK_Div2);
//	SPIx = spix[spibus];
	if (SPIx == SPI1) {
//	case SPI1Bus:
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
 800099c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80009a0:	2101      	movs	r1, #1
 80009a2:	f004 fa7d 	bl	8004ea0 <RCC_APB2PeriphClockCmd>
		af = GPIO_AF_SPI1;
 80009a6:	f04f 0b05 	mov.w	fp, #5
 80009aa:	e759      	b.n	8000860 <spi_begin+0x3c>

080009ac <spi_transfer>:
	 *          10. To use the CRC Hardware calculation feature refer to the Peripheral
	 *              CRC hardware Calculation subsection.
	 */
}

void spi_transfer(SPI_TypeDef * SPIx, /*SPIBus spibus,*/ uint8_t * data, uint16_t nbytes) {
 80009ac:	b570      	push	{r4, r5, r6, lr}
//	SPI_TypeDef * SPIx = spix[spibus];
	uint8_t rcvdata;

	for (; nbytes; nbytes--) {
 80009ae:	4615      	mov	r5, r2
	 *          10. To use the CRC Hardware calculation feature refer to the Peripheral
	 *              CRC hardware Calculation subsection.
	 */
}

void spi_transfer(SPI_TypeDef * SPIx, /*SPIBus spibus,*/ uint8_t * data, uint16_t nbytes) {
 80009b0:	4604      	mov	r4, r0
//	SPI_TypeDef * SPIx = spix[spibus];
	uint8_t rcvdata;

	for (; nbytes; nbytes--) {
 80009b2:	b1ca      	cbz	r2, 80009e8 <spi_transfer+0x3c>
	 *          10. To use the CRC Hardware calculation feature refer to the Peripheral
	 *              CRC hardware Calculation subsection.
	 */
}

void spi_transfer(SPI_TypeDef * SPIx, /*SPIBus spibus,*/ uint8_t * data, uint16_t nbytes) {
 80009b4:	1e4e      	subs	r6, r1, #1
//	SPI_TypeDef * SPIx = spix[spibus];
	uint8_t rcvdata;

	for (; nbytes; nbytes--) {
		/* Wait for SPIx Tx buffer empty */
		while (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_TXE ) == RESET)
 80009b6:	4620      	mov	r0, r4
 80009b8:	2102      	movs	r1, #2
 80009ba:	f005 fcf3 	bl	80063a4 <SPI_I2S_GetFlagStatus>
 80009be:	2800      	cmp	r0, #0
 80009c0:	d0f9      	beq.n	80009b6 <spi_transfer+0xa>
			;
		SPI_I2S_SendData(SPIx, (uint16_t) *data);
 80009c2:	4620      	mov	r0, r4
 80009c4:	7871      	ldrb	r1, [r6, #1]
 80009c6:	f005 fcb1 	bl	800632c <SPI_I2S_SendData>
		/* Wait for SPIx data reception */
		while (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_RXNE ) == RESET)
 80009ca:	4620      	mov	r0, r4
 80009cc:	2101      	movs	r1, #1
 80009ce:	f005 fce9 	bl	80063a4 <SPI_I2S_GetFlagStatus>
 80009d2:	2800      	cmp	r0, #0
 80009d4:	d0f9      	beq.n	80009ca <spi_transfer+0x1e>
			;
		/* Read SPIy received data */
		rcvdata = SPI_I2S_ReceiveData(SPIx);
 80009d6:	4620      	mov	r0, r4
 80009d8:	f005 fca4 	bl	8006324 <SPI_I2S_ReceiveData>

void spi_transfer(SPI_TypeDef * SPIx, /*SPIBus spibus,*/ uint8_t * data, uint16_t nbytes) {
//	SPI_TypeDef * SPIx = spix[spibus];
	uint8_t rcvdata;

	for (; nbytes; nbytes--) {
 80009dc:	3d01      	subs	r5, #1
 80009de:	b2ad      	uxth	r5, r5
		SPI_I2S_SendData(SPIx, (uint16_t) *data);
		/* Wait for SPIx data reception */
		while (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_RXNE ) == RESET)
			;
		/* Read SPIy received data */
		rcvdata = SPI_I2S_ReceiveData(SPIx);
 80009e0:	f806 0f01 	strb.w	r0, [r6, #1]!

void spi_transfer(SPI_TypeDef * SPIx, /*SPIBus spibus,*/ uint8_t * data, uint16_t nbytes) {
//	SPI_TypeDef * SPIx = spix[spibus];
	uint8_t rcvdata;

	for (; nbytes; nbytes--) {
 80009e4:	2d00      	cmp	r5, #0
 80009e6:	d1e6      	bne.n	80009b6 <spi_transfer+0xa>
 80009e8:	bd70      	pop	{r4, r5, r6, pc}
 80009ea:	bf00      	nop

080009ec <SysTick_Handler>:
#include "systick.h"

volatile uint32_t _systick_counter;

void SysTick_Handler(void) {
	_systick_counter++; /* increment timeTicks counter */
 80009ec:	f640 13d0 	movw	r3, #2512	; 0x9d0
 80009f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80009f4:	681a      	ldr	r2, [r3, #0]
 80009f6:	3201      	adds	r2, #1
 80009f8:	601a      	str	r2, [r3, #0]
}
 80009fa:	4770      	bx	lr

080009fc <SysTick_delay>:

void SysTick_delay(const uint32_t dlyTicks) {
	uint32_t currTicks = _systick_counter;
 80009fc:	4b03      	ldr	r3, [pc, #12]	; (8000a0c <SysTick_delay+0x10>)
 80009fe:	681a      	ldr	r2, [r3, #0]

	while ((_systick_counter - currTicks) < dlyTicks)
 8000a00:	6819      	ldr	r1, [r3, #0]
 8000a02:	1a89      	subs	r1, r1, r2
 8000a04:	4281      	cmp	r1, r0
 8000a06:	d3fb      	bcc.n	8000a00 <SysTick_delay+0x4>
		;
}
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	200009d0 	.word	0x200009d0

08000a10 <SysTick_Start>:

void SysTick_Start(void) {
 8000a10:	b500      	push	{lr}
 8000a12:	b085      	sub	sp, #20
	RCC_ClocksTypeDef RCC_Clocks;
	  /* SysTick end of count event each 1ms */
	  RCC_GetClocksFreq(&RCC_Clocks);
 8000a14:	4668      	mov	r0, sp
 8000a16:	f004 f987 	bl	8004d28 <RCC_GetClocksFreq>
	  SysTick_Config(RCC_Clocks.HCLK_Frequency / 1000);
 8000a1a:	9901      	ldr	r1, [sp, #4]
 8000a1c:	f644 53d3 	movw	r3, #19923	; 0x4dd3
 8000a20:	f2c1 0362 	movt	r3, #4194	; 0x1062
 8000a24:	fba3 2101 	umull	r2, r1, r3, r1
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8000a28:	f24e 0310 	movw	r3, #57360	; 0xe010
 8000a2c:	f2ce 0300 	movt	r3, #57344	; 0xe000
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000a30:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 8000a34:	0989      	lsrs	r1, r1, #6
 8000a36:	f2ce 0200 	movt	r2, #57344	; 0xe000
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8000a3a:	3901      	subs	r1, #1
 8000a3c:	6059      	str	r1, [r3, #4]
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000a3e:	21f0      	movs	r1, #240	; 0xf0
 8000a40:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8000a44:	2200      	movs	r2, #0
 8000a46:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a48:	2207      	movs	r2, #7
 8000a4a:	601a      	str	r2, [r3, #0]
		// Handle Error
		while (1)
			;
	}
*/
}
 8000a4c:	b005      	add	sp, #20
 8000a4e:	bd00      	pop	{pc}

08000a50 <SysTick_count>:

uint32_t SysTick_count() {
	return _systick_counter;
 8000a50:	f640 13d0 	movw	r3, #2512	; 0x9d0
 8000a54:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000a58:	6818      	ldr	r0, [r3, #0]
}
 8000a5a:	4770      	bx	lr

08000a5c <buffer_clear>:

Serial Serial1, Serial2, Serial3, Serial4, Serial5, Serial6;
USARTRing rxring[6], txring[6];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	f8a0 3100 	strh.w	r3, [r0, #256]	; 0x100
	r->tail = 0;
 8000a62:	f8a0 3102 	strh.w	r3, [r0, #258]	; 0x102
	r->count = 0;
 8000a66:	f8a0 3104 	strh.w	r3, [r0, #260]	; 0x104
}
 8000a6a:	4770      	bx	lr

08000a6c <buffer_count>:

uint16_t buffer_count(USARTRing * r) {
	return r->count;
}
 8000a6c:	f8b0 0104 	ldrh.w	r0, [r0, #260]	; 0x104
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop

08000a74 <buffer_is_full>:

uint8_t buffer_is_full(USARTRing * r) {
	if ((r->head == r->tail) && (r->count > 0)) {
 8000a74:	f9b0 2100 	ldrsh.w	r2, [r0, #256]	; 0x100
 8000a78:	f9b0 3102 	ldrsh.w	r3, [r0, #258]	; 0x102
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	d001      	beq.n	8000a84 <buffer_is_full+0x10>
		return 1;
	}
	return 0;
 8000a80:	2000      	movs	r0, #0
}
 8000a82:	4770      	bx	lr

uint16_t buffer_count(USARTRing * r) {
	return r->count;
}

uint8_t buffer_is_full(USARTRing * r) {
 8000a84:	f8b0 0104 	ldrh.w	r0, [r0, #260]	; 0x104
	if ((r->head == r->tail) && (r->count > 0)) {
		return 1;
 8000a88:	3000      	adds	r0, #0
 8000a8a:	bf18      	it	ne
 8000a8c:	2001      	movne	r0, #1
 8000a8e:	4770      	bx	lr

08000a90 <buffer_enque>:
	}
	return 0;
}

uint16_t buffer_enque(USARTRing * r, uint16_t w) {
 8000a90:	4603      	mov	r3, r0
uint16_t buffer_count(USARTRing * r) {
	return r->count;
}

uint8_t buffer_is_full(USARTRing * r) {
	if ((r->head == r->tail) && (r->count > 0)) {
 8000a92:	f8b0 0100 	ldrh.w	r0, [r0, #256]	; 0x100
		return 1;
	}
	return 0;
}

uint16_t buffer_enque(USARTRing * r, uint16_t w) {
 8000a96:	b430      	push	{r4, r5}
uint16_t buffer_count(USARTRing * r) {
	return r->count;
}

uint8_t buffer_is_full(USARTRing * r) {
	if ((r->head == r->tail) && (r->count > 0)) {
 8000a98:	f9b3 4102 	ldrsh.w	r4, [r3, #258]	; 0x102
 8000a9c:	b202      	sxth	r2, r0
 8000a9e:	4294      	cmp	r4, r2
 8000aa0:	d013      	beq.n	8000aca <buffer_enque+0x3a>
}

uint16_t buffer_enque(USARTRing * r, uint16_t w) {
	if (buffer_is_full(r))
		return 0xffff;
	r->buf[r->head++] = w;
 8000aa2:	3001      	adds	r0, #1
	r->count++;
	r->head %= USART_BUFFER_SIZE;
 8000aa4:	b200      	sxth	r0, r0
 8000aa6:	17c4      	asrs	r4, r0, #31
 8000aa8:	0e64      	lsrs	r4, r4, #25

uint16_t buffer_enque(USARTRing * r, uint16_t w) {
	if (buffer_is_full(r))
		return 0xffff;
	r->buf[r->head++] = w;
	r->count++;
 8000aaa:	f8b3 5104 	ldrh.w	r5, [r3, #260]	; 0x104
}

uint16_t buffer_enque(USARTRing * r, uint16_t w) {
	if (buffer_is_full(r))
		return 0xffff;
	r->buf[r->head++] = w;
 8000aae:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	r->count++;
	r->head %= USART_BUFFER_SIZE;
 8000ab2:	1900      	adds	r0, r0, r4
 8000ab4:	f000 007f 	and.w	r0, r0, #127	; 0x7f

uint16_t buffer_enque(USARTRing * r, uint16_t w) {
	if (buffer_is_full(r))
		return 0xffff;
	r->buf[r->head++] = w;
	r->count++;
 8000ab8:	1c6a      	adds	r2, r5, #1
	r->head %= USART_BUFFER_SIZE;
 8000aba:	1b04      	subs	r4, r0, r4

uint16_t buffer_enque(USARTRing * r, uint16_t w) {
	if (buffer_is_full(r))
		return 0xffff;
	r->buf[r->head++] = w;
	r->count++;
 8000abc:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
	r->head %= USART_BUFFER_SIZE;
 8000ac0:	f8a3 4100 	strh.w	r4, [r3, #256]	; 0x100
	return w;
}
 8000ac4:	4608      	mov	r0, r1
 8000ac6:	bc30      	pop	{r4, r5}
 8000ac8:	4770      	bx	lr
uint16_t buffer_count(USARTRing * r) {
	return r->count;
}

uint8_t buffer_is_full(USARTRing * r) {
	if ((r->head == r->tail) && (r->count > 0)) {
 8000aca:	f8b3 4104 	ldrh.w	r4, [r3, #260]	; 0x104
 8000ace:	2c00      	cmp	r4, #0
 8000ad0:	d0e7      	beq.n	8000aa2 <buffer_enque+0x12>
	return 0;
}

uint16_t buffer_enque(USARTRing * r, uint16_t w) {
	if (buffer_is_full(r))
		return 0xffff;
 8000ad2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000ad6:	e7f5      	b.n	8000ac4 <buffer_enque+0x34>

08000ad8 <buffer_deque>:
	r->tail = 0;
	r->count = 0;
}

uint16_t buffer_count(USARTRing * r) {
	return r->count;
 8000ad8:	f8b0 2104 	ldrh.w	r2, [r0, #260]	; 0x104
	r->count++;
	r->head %= USART_BUFFER_SIZE;
	return w;
}

uint16_t buffer_deque(USARTRing * r) {
 8000adc:	4603      	mov	r3, r0
 8000ade:	b410      	push	{r4}
	uint16_t w;
	if (buffer_count(r) == 0)
		return 0xffff;
 8000ae0:	f64f 70ff 	movw	r0, #65535	; 0xffff
	return w;
}

uint16_t buffer_deque(USARTRing * r) {
	uint16_t w;
	if (buffer_count(r) == 0)
 8000ae4:	b90a      	cbnz	r2, 8000aea <buffer_deque+0x12>
		return 0xffff;
	w = r->buf[r->tail++];
	r->count--;
	r->tail %= USART_BUFFER_SIZE;
	return w;
}
 8000ae6:	bc10      	pop	{r4}
 8000ae8:	4770      	bx	lr

uint16_t buffer_deque(USARTRing * r) {
	uint16_t w;
	if (buffer_count(r) == 0)
		return 0xffff;
	w = r->buf[r->tail++];
 8000aea:	f8b3 0102 	ldrh.w	r0, [r3, #258]	; 0x102
 8000aee:	1c44      	adds	r4, r0, #1
	r->count--;
	r->tail %= USART_BUFFER_SIZE;
 8000af0:	b224      	sxth	r4, r4
 8000af2:	17e1      	asrs	r1, r4, #31
 8000af4:	0e49      	lsrs	r1, r1, #25
 8000af6:	1864      	adds	r4, r4, r1

uint16_t buffer_deque(USARTRing * r) {
	uint16_t w;
	if (buffer_count(r) == 0)
		return 0xffff;
	w = r->buf[r->tail++];
 8000af8:	b200      	sxth	r0, r0
	r->count--;
	r->tail %= USART_BUFFER_SIZE;
 8000afa:	f004 047f 	and.w	r4, r4, #127	; 0x7f
uint16_t buffer_deque(USARTRing * r) {
	uint16_t w;
	if (buffer_count(r) == 0)
		return 0xffff;
	w = r->buf[r->tail++];
	r->count--;
 8000afe:	3a01      	subs	r2, #1
	r->tail %= USART_BUFFER_SIZE;
 8000b00:	1a61      	subs	r1, r4, r1

uint16_t buffer_deque(USARTRing * r) {
	uint16_t w;
	if (buffer_count(r) == 0)
		return 0xffff;
	w = r->buf[r->tail++];
 8000b02:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
	r->count--;
 8000b06:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
	r->tail %= USART_BUFFER_SIZE;
 8000b0a:	f8a3 1102 	strh.w	r1, [r3, #258]	; 0x102
 8000b0e:	e7ea      	b.n	8000ae6 <buffer_deque+0xe>

08000b10 <buffer_peek>:
	return w;
}

uint16_t buffer_peek(USARTRing * r) {
	if (buffer_count(r) == 0)
 8000b10:	f8b0 3104 	ldrh.w	r3, [r0, #260]	; 0x104
 8000b14:	b913      	cbnz	r3, 8000b1c <buffer_peek+0xc>
		return 0xffff;
 8000b16:	f64f 70ff 	movw	r0, #65535	; 0xffff
	return r->buf[r->tail];
}
 8000b1a:	4770      	bx	lr
}

uint16_t buffer_peek(USARTRing * r) {
	if (buffer_count(r) == 0)
		return 0xffff;
	return r->buf[r->tail];
 8000b1c:	f9b0 3102 	ldrsh.w	r3, [r0, #258]	; 0x102
 8000b20:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <usart_begin>:
}

void usart_begin(Serial * usx, GPIOPin rx, GPIOPin tx, uint32_t baud) {
 8000b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b2c:	469a      	mov	sl, r3
	NVIC_InitTypeDef NVIC_InitStructure; // this is used to configure the NVIC (nested vector interrupt controller)
	//
	uint8_t af = GPIO_AF_USART1;
	IRQn_Type irq = USART1_IRQn;

	if (usx == &Serial1) {
 8000b2e:	4b84      	ldr	r3, [pc, #528]	; (8000d40 <usart_begin+0x218>)
 8000b30:	4298      	cmp	r0, r3
	if (buffer_count(r) == 0)
		return 0xffff;
	return r->buf[r->tail];
}

void usart_begin(Serial * usx, GPIOPin rx, GPIOPin tx, uint32_t baud) {
 8000b32:	b089      	sub	sp, #36	; 0x24
 8000b34:	4605      	mov	r5, r0
 8000b36:	460f      	mov	r7, r1
 8000b38:	4616      	mov	r6, r2
	NVIC_InitTypeDef NVIC_InitStructure; // this is used to configure the NVIC (nested vector interrupt controller)
	//
	uint8_t af = GPIO_AF_USART1;
	IRQn_Type irq = USART1_IRQn;

	if (usx == &Serial1) {
 8000b3a:	f000 80ad 	beq.w	8000c98 <usart_begin+0x170>
		irq = USART1_IRQn;
		usx->usid = USART1Serial;
		usx->USARTx = USART1;
		usx->rxring = &rxring[USART1Serial];
		usx->txring = &txring[USART1Serial];
	} else if (usx == &Serial2) {
 8000b3e:	4b81      	ldr	r3, [pc, #516]	; (8000d44 <usart_begin+0x21c>)
 8000b40:	4298      	cmp	r0, r3
 8000b42:	f000 80bd 	beq.w	8000cc0 <usart_begin+0x198>
		irq = USART2_IRQn;
		usx->usid = USART2Serial;
		usx->USARTx = USART2;
		usx->rxring = &rxring[USART2Serial];
		usx->txring = &txring[USART2Serial];
	} else if (usx == &Serial3) {
 8000b46:	4b80      	ldr	r3, [pc, #512]	; (8000d48 <usart_begin+0x220>)
 8000b48:	4298      	cmp	r0, r3
 8000b4a:	f000 80ce 	beq.w	8000cea <usart_begin+0x1c2>
		irq = USART3_IRQn;
		usx->usid = USART3Serial;
		usx->USARTx = USART3;
		usx->rxring = &rxring[USART3Serial];
		usx->txring = &txring[USART3Serial];
	} else if (usx == &Serial4) {
 8000b4e:	4b7f      	ldr	r3, [pc, #508]	; (8000d4c <usart_begin+0x224>)
 8000b50:	4298      	cmp	r0, r3
 8000b52:	f000 80df 	beq.w	8000d14 <usart_begin+0x1ec>
		irq = UART4_IRQn;
		usx->usid = UART4Serial;
		usx->USARTx = UART4;
		usx->rxring = &rxring[UART4Serial];
		usx->txring = &txring[UART4Serial];
	} else if (usx == &Serial5) {
 8000b56:	4b7e      	ldr	r3, [pc, #504]	; (8000d50 <usart_begin+0x228>)
 8000b58:	4298      	cmp	r0, r3
 8000b5a:	f000 8088 	beq.w	8000c6e <usart_begin+0x146>
		usx->usid = UART5Serial;
		usx->USARTx = UART5;
		usx->rxring = &rxring[UART5Serial];
		usx->txring = &txring[UART5Serial];
	} else { // Serial6
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART6, ENABLE);
 8000b5e:	2020      	movs	r0, #32
 8000b60:	2101      	movs	r1, #1
 8000b62:	f004 f99d 	bl	8004ea0 <RCC_APB2PeriphClockCmd>
		af = GPIO_AF_USART6;
		irq = USART6_IRQn;
		usx->usid = USART6Serial;
		usx->USARTx = USART6;
 8000b66:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
		usx->rxring = &rxring[USART6Serial];
 8000b6a:	4a7a      	ldr	r2, [pc, #488]	; (8000d54 <usart_begin+0x22c>)
	} else { // Serial6
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART6, ENABLE);
		af = GPIO_AF_USART6;
		irq = USART6_IRQn;
		usx->usid = USART6Serial;
		usx->USARTx = USART6;
 8000b6c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000b70:	606b      	str	r3, [r5, #4]
		usx->rxring = &rxring[USART6Serial];
		usx->txring = &txring[USART6Serial];
 8000b72:	4b79      	ldr	r3, [pc, #484]	; (8000d58 <usart_begin+0x230>)
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART6, ENABLE);
		af = GPIO_AF_USART6;
		irq = USART6_IRQn;
		usx->usid = USART6Serial;
		usx->USARTx = USART6;
		usx->rxring = &rxring[USART6Serial];
 8000b74:	60aa      	str	r2, [r5, #8]
		usx->txring = &txring[UART5Serial];
	} else { // Serial6
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART6, ENABLE);
		af = GPIO_AF_USART6;
		irq = USART6_IRQn;
		usx->usid = USART6Serial;
 8000b76:	2205      	movs	r2, #5
 8000b78:	702a      	strb	r2, [r5, #0]
		usx->USARTx = USART6;
		usx->rxring = &rxring[USART6Serial];
		usx->txring = &txring[USART6Serial];
 8000b7a:	60eb      	str	r3, [r5, #12]
 8000b7c:	f04f 0b47 	mov.w	fp, #71	; 0x47
		usx->USARTx = UART5;
		usx->rxring = &rxring[UART5Serial];
		usx->txring = &txring[UART5Serial];
	} else { // Serial6
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART6, ENABLE);
		af = GPIO_AF_USART6;
 8000b80:	f04f 0808 	mov.w	r8, #8
		usx->USARTx = USART6;
		usx->rxring = &rxring[USART6Serial];
		usx->txring = &txring[USART6Serial];
	}

	GPIOMode(PinPort(rx), PinBit(rx), GPIO_Mode_AF, GPIO_Speed_50MHz,
 8000b84:	4638      	mov	r0, r7
 8000b86:	f7ff fb9b 	bl	80002c0 <PinPort>
 8000b8a:	4681      	mov	r9, r0
 8000b8c:	4638      	mov	r0, r7
 8000b8e:	f7ff fba1 	bl	80002d4 <PinBit>
 8000b92:	2202      	movs	r2, #2
 8000b94:	2400      	movs	r4, #0
 8000b96:	4601      	mov	r1, r0
 8000b98:	4613      	mov	r3, r2
 8000b9a:	4648      	mov	r0, r9
 8000b9c:	9400      	str	r4, [sp, #0]
 8000b9e:	9401      	str	r4, [sp, #4]
 8000ba0:	f7ff fc06 	bl	80003b0 <GPIOMode>
			GPIO_OType_PP, GPIO_PuPd_NOPULL);
	GPIOMode(PinPort(tx), PinBit(tx), GPIO_Mode_AF, GPIO_Speed_50MHz,
 8000ba4:	4630      	mov	r0, r6
 8000ba6:	f7ff fb8b 	bl	80002c0 <PinPort>
 8000baa:	4681      	mov	r9, r0
 8000bac:	4630      	mov	r0, r6
 8000bae:	f7ff fb91 	bl	80002d4 <PinBit>
 8000bb2:	2202      	movs	r2, #2
 8000bb4:	4613      	mov	r3, r2
 8000bb6:	4601      	mov	r1, r0
 8000bb8:	4648      	mov	r0, r9
 8000bba:	9400      	str	r4, [sp, #0]
 8000bbc:	9401      	str	r4, [sp, #4]
 8000bbe:	f7ff fbf7 	bl	80003b0 <GPIOMode>
			GPIO_OType_PP, GPIO_PuPd_NOPULL);

	GPIO_PinAFConfig(PinPort(rx), PinSource(rx), af);
 8000bc2:	4638      	mov	r0, r7
 8000bc4:	f7ff fb7c 	bl	80002c0 <PinPort>
 8000bc8:	4681      	mov	r9, r0
 8000bca:	4638      	mov	r0, r7
 8000bcc:	f7ff fb8a 	bl	80002e4 <PinSource>
 8000bd0:	4642      	mov	r2, r8
 8000bd2:	4601      	mov	r1, r0
 8000bd4:	4648      	mov	r0, r9
 8000bd6:	f003 f9fd 	bl	8003fd4 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(PinPort(tx), PinSource(tx), af);
 8000bda:	4630      	mov	r0, r6
 8000bdc:	f7ff fb70 	bl	80002c0 <PinPort>
 8000be0:	4607      	mov	r7, r0
 8000be2:	4630      	mov	r0, r6
 8000be4:	f7ff fb7e 	bl	80002e4 <PinSource>
 8000be8:	4642      	mov	r2, r8
 8000bea:	4601      	mov	r1, r0
 8000bec:	4638      	mov	r0, r7
 8000bee:	f003 f9f1 	bl	8003fd4 <GPIO_PinAFConfig>
	USART_InitStruct.USART_BaudRate = baud;	// the baudrate is set to the value we passed into this init function
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
	USART_InitStruct.USART_StopBits = USART_StopBits_1;	// we want 1 stop bit (standard)
	USART_InitStruct.USART_Parity = USART_Parity_No;// we don't want a parity bit (standard)
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver
 8000bf2:	230c      	movs	r3, #12

	USART_Init(usx->USARTx, &USART_InitStruct); // again all the properties are passed to the USART_Init function which takes care of all the bit setting
 8000bf4:	6868      	ldr	r0, [r5, #4]
	USART_InitStruct.USART_BaudRate = baud;	// the baudrate is set to the value we passed into this init function
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
	USART_InitStruct.USART_StopBits = USART_StopBits_1;	// we want 1 stop bit (standard)
	USART_InitStruct.USART_Parity = USART_Parity_No;// we don't want a parity bit (standard)
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver
 8000bf6:	f8ad 3016 	strh.w	r3, [sp, #22]

	USART_Init(usx->USARTx, &USART_InitStruct); // again all the properties are passed to the USART_Init function which takes care of all the bit setting
 8000bfa:	a903      	add	r1, sp, #12
			GPIO_OType_PP, GPIO_PuPd_NOPULL);

	GPIO_PinAFConfig(PinPort(rx), PinSource(rx), af);
	GPIO_PinAFConfig(PinPort(tx), PinSource(tx), af);

	USART_InitStruct.USART_BaudRate = baud;	// the baudrate is set to the value we passed into this init function
 8000bfc:	f8cd a00c 	str.w	sl, [sp, #12]
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
 8000c00:	f8ad 4010 	strh.w	r4, [sp, #16]
	USART_InitStruct.USART_StopBits = USART_StopBits_1;	// we want 1 stop bit (standard)
 8000c04:	f8ad 4012 	strh.w	r4, [sp, #18]
	USART_InitStruct.USART_Parity = USART_Parity_No;// we don't want a parity bit (standard)
 8000c08:	f8ad 4014 	strh.w	r4, [sp, #20]
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
 8000c0c:	f8ad 4018 	strh.w	r4, [sp, #24]
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver

	USART_Init(usx->USARTx, &USART_InitStruct); // again all the properties are passed to the USART_Init function which takes care of all the bit setting
 8000c10:	f006 fbac 	bl	800736c <USART_Init>

	USART_ITConfig(usx->USARTx, USART_IT_RXNE, ENABLE); // enable the USART3 receive interrupt
 8000c14:	6868      	ldr	r0, [r5, #4]
 8000c16:	2201      	movs	r2, #1
 8000c18:	f240 5125 	movw	r1, #1317	; 0x525
 8000c1c:	f006 fd10 	bl	8007640 <USART_ITConfig>
	USART_ITConfig(usx->USARTx, USART_IT_TXE, DISABLE);
 8000c20:	4622      	mov	r2, r4
 8000c22:	f240 7127 	movw	r1, #1831	; 0x727
 8000c26:	6868      	ldr	r0, [r5, #4]
 8000c28:	f006 fd0a 	bl	8007640 <USART_ITConfig>

	NVIC_InitStructure.NVIC_IRQChannel = irq;
	// we want to configure the USART3 interrupts
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0; // this sets the priority group of the USART3 interrupts
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0; // this sets the subpriority inside the group
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;	// the USART3 interrupts are globally enabled
 8000c2c:	2601      	movs	r6, #1
	NVIC_Init(&NVIC_InitStructure);	// the properties are passed to the NVIC_Init function which takes care of the low level stuff
 8000c2e:	a807      	add	r0, sp, #28
	USART_Init(usx->USARTx, &USART_InitStruct); // again all the properties are passed to the USART_Init function which takes care of all the bit setting

	USART_ITConfig(usx->USARTx, USART_IT_RXNE, ENABLE); // enable the USART3 receive interrupt
	USART_ITConfig(usx->USARTx, USART_IT_TXE, DISABLE);

	NVIC_InitStructure.NVIC_IRQChannel = irq;
 8000c30:	f88d b01c 	strb.w	fp, [sp, #28]
	// we want to configure the USART3 interrupts
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0; // this sets the priority group of the USART3 interrupts
 8000c34:	f88d 401d 	strb.w	r4, [sp, #29]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0; // this sets the subpriority inside the group
 8000c38:	f88d 401e 	strb.w	r4, [sp, #30]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;	// the USART3 interrupts are globally enabled
 8000c3c:	f88d 601f 	strb.w	r6, [sp, #31]
	NVIC_Init(&NVIC_InitStructure);	// the properties are passed to the NVIC_Init function which takes care of the low level stuff
 8000c40:	f000 fa54 	bl	80010ec <NVIC_Init>
	//
	buffer_clear(usx->rxring); //&rxring[usx->usid]);
 8000c44:	68aa      	ldr	r2, [r5, #8]
	buffer_clear(usx->txring); //&txring[usx->usid]);
 8000c46:	68eb      	ldr	r3, [r5, #12]
	// finally this enables the complete USART3 peripheral
	USART_Cmd(usx->USARTx, ENABLE);
 8000c48:	6868      	ldr	r0, [r5, #4]

Serial Serial1, Serial2, Serial3, Serial4, Serial5, Serial6;
USARTRing rxring[6], txring[6];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 8000c4a:	f8a2 4100 	strh.w	r4, [r2, #256]	; 0x100
	r->tail = 0;
 8000c4e:	f8a2 4102 	strh.w	r4, [r2, #258]	; 0x102
	r->count = 0;
 8000c52:	f8a2 4104 	strh.w	r4, [r2, #260]	; 0x104

Serial Serial1, Serial2, Serial3, Serial4, Serial5, Serial6;
USARTRing rxring[6], txring[6];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 8000c56:	f8a3 4100 	strh.w	r4, [r3, #256]	; 0x100
	r->tail = 0;
 8000c5a:	f8a3 4102 	strh.w	r4, [r3, #258]	; 0x102
	r->count = 0;
 8000c5e:	f8a3 4104 	strh.w	r4, [r3, #260]	; 0x104
	NVIC_Init(&NVIC_InitStructure);	// the properties are passed to the NVIC_Init function which takes care of the low level stuff
	//
	buffer_clear(usx->rxring); //&rxring[usx->usid]);
	buffer_clear(usx->txring); //&txring[usx->usid]);
	// finally this enables the complete USART3 peripheral
	USART_Cmd(usx->USARTx, ENABLE);
 8000c62:	4631      	mov	r1, r6
 8000c64:	f006 fc12 	bl	800748c <USART_Cmd>
}
 8000c68:	b009      	add	sp, #36	; 0x24
 8000c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		usx->usid = UART4Serial;
		usx->USARTx = UART4;
		usx->rxring = &rxring[UART4Serial];
		usx->txring = &txring[UART4Serial];
	} else if (usx == &Serial5) {
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART5, ENABLE);
 8000c6e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000c72:	2101      	movs	r1, #1
 8000c74:	f004 f906 	bl	8004e84 <RCC_APB1PeriphClockCmd>
		af = GPIO_AF_UART5;
		irq = UART5_IRQn;
		usx->usid = UART5Serial;
		usx->USARTx = UART5;
 8000c78:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
		usx->rxring = &rxring[UART5Serial];
 8000c7c:	4a37      	ldr	r2, [pc, #220]	; (8000d5c <usart_begin+0x234>)
	} else if (usx == &Serial5) {
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART5, ENABLE);
		af = GPIO_AF_UART5;
		irq = UART5_IRQn;
		usx->usid = UART5Serial;
		usx->USARTx = UART5;
 8000c7e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000c82:	606b      	str	r3, [r5, #4]
		usx->rxring = &rxring[UART5Serial];
		usx->txring = &txring[UART5Serial];
 8000c84:	4b36      	ldr	r3, [pc, #216]	; (8000d60 <usart_begin+0x238>)
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART5, ENABLE);
		af = GPIO_AF_UART5;
		irq = UART5_IRQn;
		usx->usid = UART5Serial;
		usx->USARTx = UART5;
		usx->rxring = &rxring[UART5Serial];
 8000c86:	60aa      	str	r2, [r5, #8]
		usx->txring = &txring[UART4Serial];
	} else if (usx == &Serial5) {
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART5, ENABLE);
		af = GPIO_AF_UART5;
		irq = UART5_IRQn;
		usx->usid = UART5Serial;
 8000c88:	2204      	movs	r2, #4
 8000c8a:	702a      	strb	r2, [r5, #0]
		usx->USARTx = UART5;
		usx->rxring = &rxring[UART5Serial];
		usx->txring = &txring[UART5Serial];
 8000c8c:	60eb      	str	r3, [r5, #12]
 8000c8e:	f04f 0b35 	mov.w	fp, #53	; 0x35
		usx->USARTx = UART4;
		usx->rxring = &rxring[UART4Serial];
		usx->txring = &txring[UART4Serial];
	} else if (usx == &Serial5) {
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART5, ENABLE);
		af = GPIO_AF_UART5;
 8000c92:	f04f 0808 	mov.w	r8, #8
 8000c96:	e775      	b.n	8000b84 <usart_begin+0x5c>
	//
	uint8_t af = GPIO_AF_USART1;
	IRQn_Type irq = USART1_IRQn;

	if (usx == &Serial1) {
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 8000c98:	2010      	movs	r0, #16
 8000c9a:	2101      	movs	r1, #1
 8000c9c:	f004 f900 	bl	8004ea0 <RCC_APB2PeriphClockCmd>
		af = GPIO_AF_USART1;
		irq = USART1_IRQn;
		usx->usid = USART1Serial;
		usx->USARTx = USART1;
 8000ca0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
		usx->rxring = &rxring[USART1Serial];
 8000ca4:	4a2f      	ldr	r2, [pc, #188]	; (8000d64 <usart_begin+0x23c>)
	if (usx == &Serial1) {
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
		af = GPIO_AF_USART1;
		irq = USART1_IRQn;
		usx->usid = USART1Serial;
		usx->USARTx = USART1;
 8000ca6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000caa:	606b      	str	r3, [r5, #4]
		usx->rxring = &rxring[USART1Serial];
		usx->txring = &txring[USART1Serial];
 8000cac:	4b2e      	ldr	r3, [pc, #184]	; (8000d68 <usart_begin+0x240>)
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
		af = GPIO_AF_USART1;
		irq = USART1_IRQn;
		usx->usid = USART1Serial;
		usx->USARTx = USART1;
		usx->rxring = &rxring[USART1Serial];
 8000cae:	60aa      	str	r2, [r5, #8]

	if (usx == &Serial1) {
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
		af = GPIO_AF_USART1;
		irq = USART1_IRQn;
		usx->usid = USART1Serial;
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	702a      	strb	r2, [r5, #0]
		usx->USARTx = USART1;
		usx->rxring = &rxring[USART1Serial];
		usx->txring = &txring[USART1Serial];
 8000cb4:	60eb      	str	r3, [r5, #12]
 8000cb6:	f04f 0b25 	mov.w	fp, #37	; 0x25
	uint8_t af = GPIO_AF_USART1;
	IRQn_Type irq = USART1_IRQn;

	if (usx == &Serial1) {
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
		af = GPIO_AF_USART1;
 8000cba:	f04f 0807 	mov.w	r8, #7
 8000cbe:	e761      	b.n	8000b84 <usart_begin+0x5c>
		usx->usid = USART1Serial;
		usx->USARTx = USART1;
		usx->rxring = &rxring[USART1Serial];
		usx->txring = &txring[USART1Serial];
	} else if (usx == &Serial2) {
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 8000cc0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000cc4:	2101      	movs	r1, #1
 8000cc6:	f004 f8dd 	bl	8004e84 <RCC_APB1PeriphClockCmd>
		af = GPIO_AF_USART2;
		irq = USART2_IRQn;
		usx->usid = USART2Serial;
		usx->USARTx = USART2;
 8000cca:	f44f 4388 	mov.w	r3, #17408	; 0x4400
		usx->rxring = &rxring[USART2Serial];
 8000cce:	4a27      	ldr	r2, [pc, #156]	; (8000d6c <usart_begin+0x244>)
	} else if (usx == &Serial2) {
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
		af = GPIO_AF_USART2;
		irq = USART2_IRQn;
		usx->usid = USART2Serial;
		usx->USARTx = USART2;
 8000cd0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000cd4:	606b      	str	r3, [r5, #4]
		usx->rxring = &rxring[USART2Serial];
		usx->txring = &txring[USART2Serial];
 8000cd6:	4b26      	ldr	r3, [pc, #152]	; (8000d70 <usart_begin+0x248>)
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
		af = GPIO_AF_USART2;
		irq = USART2_IRQn;
		usx->usid = USART2Serial;
		usx->USARTx = USART2;
		usx->rxring = &rxring[USART2Serial];
 8000cd8:	60aa      	str	r2, [r5, #8]
		usx->txring = &txring[USART1Serial];
	} else if (usx == &Serial2) {
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
		af = GPIO_AF_USART2;
		irq = USART2_IRQn;
		usx->usid = USART2Serial;
 8000cda:	2201      	movs	r2, #1
 8000cdc:	702a      	strb	r2, [r5, #0]
		usx->USARTx = USART2;
		usx->rxring = &rxring[USART2Serial];
		usx->txring = &txring[USART2Serial];
 8000cde:	60eb      	str	r3, [r5, #12]
 8000ce0:	f04f 0b26 	mov.w	fp, #38	; 0x26
		usx->USARTx = USART1;
		usx->rxring = &rxring[USART1Serial];
		usx->txring = &txring[USART1Serial];
	} else if (usx == &Serial2) {
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
		af = GPIO_AF_USART2;
 8000ce4:	f04f 0807 	mov.w	r8, #7
 8000ce8:	e74c      	b.n	8000b84 <usart_begin+0x5c>
		usx->usid = USART2Serial;
		usx->USARTx = USART2;
		usx->rxring = &rxring[USART2Serial];
		usx->txring = &txring[USART2Serial];
	} else if (usx == &Serial3) {
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
 8000cea:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000cee:	2101      	movs	r1, #1
 8000cf0:	f004 f8c8 	bl	8004e84 <RCC_APB1PeriphClockCmd>
		af = GPIO_AF_USART3;
		irq = USART3_IRQn;
		usx->usid = USART3Serial;
		usx->USARTx = USART3;
 8000cf4:	f44f 4390 	mov.w	r3, #18432	; 0x4800
		usx->rxring = &rxring[USART3Serial];
 8000cf8:	4a1e      	ldr	r2, [pc, #120]	; (8000d74 <usart_begin+0x24c>)
	} else if (usx == &Serial3) {
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
		af = GPIO_AF_USART3;
		irq = USART3_IRQn;
		usx->usid = USART3Serial;
		usx->USARTx = USART3;
 8000cfa:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000cfe:	606b      	str	r3, [r5, #4]
		usx->rxring = &rxring[USART3Serial];
		usx->txring = &txring[USART3Serial];
 8000d00:	4b1d      	ldr	r3, [pc, #116]	; (8000d78 <usart_begin+0x250>)
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
		af = GPIO_AF_USART3;
		irq = USART3_IRQn;
		usx->usid = USART3Serial;
		usx->USARTx = USART3;
		usx->rxring = &rxring[USART3Serial];
 8000d02:	60aa      	str	r2, [r5, #8]
		usx->txring = &txring[USART2Serial];
	} else if (usx == &Serial3) {
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
		af = GPIO_AF_USART3;
		irq = USART3_IRQn;
		usx->usid = USART3Serial;
 8000d04:	2202      	movs	r2, #2
 8000d06:	702a      	strb	r2, [r5, #0]
		usx->USARTx = USART3;
		usx->rxring = &rxring[USART3Serial];
		usx->txring = &txring[USART3Serial];
 8000d08:	60eb      	str	r3, [r5, #12]
 8000d0a:	f04f 0b27 	mov.w	fp, #39	; 0x27
		usx->USARTx = USART2;
		usx->rxring = &rxring[USART2Serial];
		usx->txring = &txring[USART2Serial];
	} else if (usx == &Serial3) {
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
		af = GPIO_AF_USART3;
 8000d0e:	f04f 0807 	mov.w	r8, #7
 8000d12:	e737      	b.n	8000b84 <usart_begin+0x5c>
		usx->usid = USART3Serial;
		usx->USARTx = USART3;
		usx->rxring = &rxring[USART3Serial];
		usx->txring = &txring[USART3Serial];
	} else if (usx == &Serial4) {
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART4, ENABLE);
 8000d14:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000d18:	2101      	movs	r1, #1
 8000d1a:	f004 f8b3 	bl	8004e84 <RCC_APB1PeriphClockCmd>
		af = GPIO_AF_UART4;
		irq = UART4_IRQn;
		usx->usid = UART4Serial;
		usx->USARTx = UART4;
 8000d1e:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
		usx->rxring = &rxring[UART4Serial];
 8000d22:	4a16      	ldr	r2, [pc, #88]	; (8000d7c <usart_begin+0x254>)
	} else if (usx == &Serial4) {
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART4, ENABLE);
		af = GPIO_AF_UART4;
		irq = UART4_IRQn;
		usx->usid = UART4Serial;
		usx->USARTx = UART4;
 8000d24:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000d28:	606b      	str	r3, [r5, #4]
		usx->rxring = &rxring[UART4Serial];
		usx->txring = &txring[UART4Serial];
 8000d2a:	4b15      	ldr	r3, [pc, #84]	; (8000d80 <usart_begin+0x258>)
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART4, ENABLE);
		af = GPIO_AF_UART4;
		irq = UART4_IRQn;
		usx->usid = UART4Serial;
		usx->USARTx = UART4;
		usx->rxring = &rxring[UART4Serial];
 8000d2c:	60aa      	str	r2, [r5, #8]
		usx->txring = &txring[USART3Serial];
	} else if (usx == &Serial4) {
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART4, ENABLE);
		af = GPIO_AF_UART4;
		irq = UART4_IRQn;
		usx->usid = UART4Serial;
 8000d2e:	2203      	movs	r2, #3
 8000d30:	702a      	strb	r2, [r5, #0]
		usx->USARTx = UART4;
		usx->rxring = &rxring[UART4Serial];
		usx->txring = &txring[UART4Serial];
 8000d32:	60eb      	str	r3, [r5, #12]
 8000d34:	f04f 0b34 	mov.w	fp, #52	; 0x34
		usx->USARTx = USART3;
		usx->rxring = &rxring[USART3Serial];
		usx->txring = &txring[USART3Serial];
	} else if (usx == &Serial4) {
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART4, ENABLE);
		af = GPIO_AF_UART4;
 8000d38:	f04f 0808 	mov.w	r8, #8
 8000d3c:	e722      	b.n	8000b84 <usart_begin+0x5c>
 8000d3e:	bf00      	nop
 8000d40:	20001008 	.word	0x20001008
 8000d44:	2000166c 	.word	0x2000166c
 8000d48:	20001018 	.word	0x20001018
 8000d4c:	2000165c 	.word	0x2000165c
 8000d50:	20000ff8 	.word	0x20000ff8
 8000d54:	20001556 	.word	0x20001556
 8000d58:	20000ef2 	.word	0x20000ef2
 8000d5c:	20001450 	.word	0x20001450
 8000d60:	20000dec 	.word	0x20000dec
 8000d64:	20001038 	.word	0x20001038
 8000d68:	200009d4 	.word	0x200009d4
 8000d6c:	2000113e 	.word	0x2000113e
 8000d70:	20000ada 	.word	0x20000ada
 8000d74:	20001244 	.word	0x20001244
 8000d78:	20000be0 	.word	0x20000be0
 8000d7c:	2000134a 	.word	0x2000134a
 8000d80:	20000ce6 	.word	0x20000ce6

08000d84 <usart_bare_write>:
	buffer_clear(usx->txring); //&txring[usx->usid]);
	// finally this enables the complete USART3 peripheral
	USART_Cmd(usx->USARTx, ENABLE);
}

void usart_bare_write(Serial * usx, const uint16_t w) {
 8000d84:	b538      	push	{r3, r4, r5, lr}
 8000d86:	4604      	mov	r4, r0
 8000d88:	460d      	mov	r5, r1
	while (USART_GetFlagStatus(usx->USARTx, USART_FLAG_TXE ) == RESET)
 8000d8a:	6860      	ldr	r0, [r4, #4]
 8000d8c:	2180      	movs	r1, #128	; 0x80
 8000d8e:	f006 fc73 	bl	8007678 <USART_GetFlagStatus>
 8000d92:	2800      	cmp	r0, #0
 8000d94:	d0f9      	beq.n	8000d8a <usart_bare_write+0x6>
		;
	USART_SendData(usx->USARTx, w);
 8000d96:	6860      	ldr	r0, [r4, #4]
 8000d98:	4629      	mov	r1, r5
//	while (USART_GetFlagStatus(USART3, USART_FLAG_TC ) == RESET) ;
}
 8000d9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
}

void usart_bare_write(Serial * usx, const uint16_t w) {
	while (USART_GetFlagStatus(usx->USARTx, USART_FLAG_TXE ) == RESET)
		;
	USART_SendData(usx->USARTx, w);
 8000d9e:	f006 bba9 	b.w	80074f4 <USART_SendData>
 8000da2:	bf00      	nop

08000da4 <usart_write>:
//	while (USART_GetFlagStatus(USART3, USART_FLAG_TC ) == RESET) ;
}

void usart_write(Serial * usx, const uint16_t w) {
	uint16_t waitcount = 3;
	while (buffer_is_full(usx->txring) && (waitcount > 0) ) {
 8000da4:	68c3      	ldr	r3, [r0, #12]
		;
	USART_SendData(usx->USARTx, w);
//	while (USART_GetFlagStatus(USART3, USART_FLAG_TC ) == RESET) ;
}

void usart_write(Serial * usx, const uint16_t w) {
 8000da6:	b570      	push	{r4, r5, r6, lr}
uint16_t buffer_count(USARTRing * r) {
	return r->count;
}

uint8_t buffer_is_full(USARTRing * r) {
	if ((r->head == r->tail) && (r->count > 0)) {
 8000da8:	f9b3 2102 	ldrsh.w	r2, [r3, #258]	; 0x102
		;
	USART_SendData(usx->USARTx, w);
//	while (USART_GetFlagStatus(USART3, USART_FLAG_TC ) == RESET) ;
}

void usart_write(Serial * usx, const uint16_t w) {
 8000dac:	460d      	mov	r5, r1
uint16_t buffer_count(USARTRing * r) {
	return r->count;
}

uint8_t buffer_is_full(USARTRing * r) {
	if ((r->head == r->tail) && (r->count > 0)) {
 8000dae:	f9b3 1100 	ldrsh.w	r1, [r3, #256]	; 0x100
 8000db2:	4291      	cmp	r1, r2
		;
	USART_SendData(usx->USARTx, w);
//	while (USART_GetFlagStatus(USART3, USART_FLAG_TC ) == RESET) ;
}

void usart_write(Serial * usx, const uint16_t w) {
 8000db4:	4604      	mov	r4, r0
uint16_t buffer_count(USARTRing * r) {
	return r->count;
}

uint8_t buffer_is_full(USARTRing * r) {
	if ((r->head == r->tail) && (r->count > 0)) {
 8000db6:	d011      	beq.n	8000ddc <usart_write+0x38>
	uint16_t waitcount = 3;
	while (buffer_is_full(usx->txring) && (waitcount > 0) ) {
		delay_us(667);
		waitcount--;
	}
	USART_ITConfig(usx->USARTx, USART_IT_TXE, DISABLE);
 8000db8:	2200      	movs	r2, #0
 8000dba:	6860      	ldr	r0, [r4, #4]
 8000dbc:	f240 7127 	movw	r1, #1831	; 0x727
 8000dc0:	f006 fc3e 	bl	8007640 <USART_ITConfig>
	buffer_enque(usx->txring, w); //&txring[usx->usid], w);
 8000dc4:	4629      	mov	r1, r5
 8000dc6:	68e0      	ldr	r0, [r4, #12]
 8000dc8:	f7ff fe62 	bl	8000a90 <buffer_enque>
	USART_ITConfig(usx->USARTx, USART_IT_TXE, ENABLE);
 8000dcc:	6860      	ldr	r0, [r4, #4]
 8000dce:	f240 7127 	movw	r1, #1831	; 0x727
 8000dd2:	2201      	movs	r2, #1
}
 8000dd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		delay_us(667);
		waitcount--;
	}
	USART_ITConfig(usx->USARTx, USART_IT_TXE, DISABLE);
	buffer_enque(usx->txring, w); //&txring[usx->usid], w);
	USART_ITConfig(usx->USARTx, USART_IT_TXE, ENABLE);
 8000dd8:	f006 bc32 	b.w	8007640 <USART_ITConfig>
uint16_t buffer_count(USARTRing * r) {
	return r->count;
}

uint8_t buffer_is_full(USARTRing * r) {
	if ((r->head == r->tail) && (r->count > 0)) {
 8000ddc:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d0e9      	beq.n	8000db8 <usart_write+0x14>
 8000de4:	2603      	movs	r6, #3
}

void usart_write(Serial * usx, const uint16_t w) {
	uint16_t waitcount = 3;
	while (buffer_is_full(usx->txring) && (waitcount > 0) ) {
		delay_us(667);
 8000de6:	f240 209b 	movw	r0, #667	; 0x29b
 8000dea:	f7ff fa3d 	bl	8000268 <delay_us>
//	while (USART_GetFlagStatus(USART3, USART_FLAG_TC ) == RESET) ;
}

void usart_write(Serial * usx, const uint16_t w) {
	uint16_t waitcount = 3;
	while (buffer_is_full(usx->txring) && (waitcount > 0) ) {
 8000dee:	68e3      	ldr	r3, [r4, #12]
uint16_t buffer_count(USARTRing * r) {
	return r->count;
}

uint8_t buffer_is_full(USARTRing * r) {
	if ((r->head == r->tail) && (r->count > 0)) {
 8000df0:	f9b3 1100 	ldrsh.w	r1, [r3, #256]	; 0x100
 8000df4:	f9b3 2102 	ldrsh.w	r2, [r3, #258]	; 0x102
 8000df8:	4291      	cmp	r1, r2
 8000dfa:	d1dd      	bne.n	8000db8 <usart_write+0x14>
 8000dfc:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8000e00:	3e01      	subs	r6, #1
 8000e02:	b2b6      	uxth	r6, r6
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d0d7      	beq.n	8000db8 <usart_write+0x14>
//	while (USART_GetFlagStatus(USART3, USART_FLAG_TC ) == RESET) ;
}

void usart_write(Serial * usx, const uint16_t w) {
	uint16_t waitcount = 3;
	while (buffer_is_full(usx->txring) && (waitcount > 0) ) {
 8000e08:	2e00      	cmp	r6, #0
 8000e0a:	d1ec      	bne.n	8000de6 <usart_write+0x42>
 8000e0c:	e7d4      	b.n	8000db8 <usart_write+0x14>
 8000e0e:	bf00      	nop

08000e10 <usart_print>:
	USART_ITConfig(usx->USARTx, USART_IT_TXE, DISABLE);
	buffer_enque(usx->txring, w); //&txring[usx->usid], w);
	USART_ITConfig(usx->USARTx, USART_IT_TXE, ENABLE);
}

void usart_print(Serial * usx, const char * s) {
 8000e10:	b538      	push	{r3, r4, r5, lr}
 8000e12:	460c      	mov	r4, r1
	while (*s)
 8000e14:	7809      	ldrb	r1, [r1, #0]
	USART_ITConfig(usx->USARTx, USART_IT_TXE, DISABLE);
	buffer_enque(usx->txring, w); //&txring[usx->usid], w);
	USART_ITConfig(usx->USARTx, USART_IT_TXE, ENABLE);
}

void usart_print(Serial * usx, const char * s) {
 8000e16:	4605      	mov	r5, r0
	while (*s)
 8000e18:	b131      	cbz	r1, 8000e28 <usart_print+0x18>
		usart_write(usx, (uint16_t) *s++);
 8000e1a:	4628      	mov	r0, r5
 8000e1c:	f7ff ffc2 	bl	8000da4 <usart_write>
	buffer_enque(usx->txring, w); //&txring[usx->usid], w);
	USART_ITConfig(usx->USARTx, USART_IT_TXE, ENABLE);
}

void usart_print(Serial * usx, const char * s) {
	while (*s)
 8000e20:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8000e24:	2900      	cmp	r1, #0
 8000e26:	d1f8      	bne.n	8000e1a <usart_print+0xa>
 8000e28:	bd38      	pop	{r3, r4, r5, pc}
 8000e2a:	bf00      	nop

08000e2c <usart_bare_read>:
		usart_write(usx, (uint16_t) *s++);
}

uint16_t usart_bare_read(USART_TypeDef * USARTx /*usartx[usx]*/) {
	return USART_ReceiveData(USARTx);
 8000e2c:	f006 bb66 	b.w	80074fc <USART_ReceiveData>

08000e30 <usart_read>:
}

uint16_t usart_read(Serial * usx) {
 8000e30:	b508      	push	{r3, lr}
	uint16_t w = buffer_deque(usx->rxring); //&rxring[usx->usid]);
 8000e32:	6880      	ldr	r0, [r0, #8]
 8000e34:	f7ff fe50 	bl	8000ad8 <buffer_deque>
	if (w == 0xffff)
 8000e38:	f64f 73ff 	movw	r3, #65535	; 0xffff
		return 0; // buffer is empty
	return w;
}
 8000e3c:	4298      	cmp	r0, r3
 8000e3e:	bf08      	it	eq
 8000e40:	2000      	moveq	r0, #0
 8000e42:	bd08      	pop	{r3, pc}

08000e44 <usart_flush>:

void usart_flush(Serial * usx) {
 8000e44:	b538      	push	{r3, r4, r5, lr}
 8000e46:	4604      	mov	r4, r0
	uint32_t wtill = millis() + 100;
 8000e48:	f7ff f9f8 	bl	800023c <millis>
 8000e4c:	f100 0564 	add.w	r5, r0, #100	; 0x64
	while (buffer_count(usx->txring) > 0) {
 8000e50:	e003      	b.n	8000e5a <usart_flush+0x16>
		if (millis() > wtill)
 8000e52:	f7ff f9f3 	bl	800023c <millis>
 8000e56:	4285      	cmp	r5, r0
 8000e58:	d304      	bcc.n	8000e64 <usart_flush+0x20>
	r->tail = 0;
	r->count = 0;
}

uint16_t buffer_count(USARTRing * r) {
	return r->count;
 8000e5a:	68e3      	ldr	r3, [r4, #12]
	return w;
}

void usart_flush(Serial * usx) {
	uint32_t wtill = millis() + 100;
	while (buffer_count(usx->txring) > 0) {
 8000e5c:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d1f6      	bne.n	8000e52 <usart_flush+0xe>
	 USART_SendData(usx->USARTx, buffer_deque(usx->txring)); //&txring[usx->usid]));
	 while (USART_GetFlagStatus(usx->USARTx, USART_FLAG_TC ) == RESET);
	 }
	 USART_ClearITPendingBit(usx->USARTx, USART_IT_TXE );
	 */
	buffer_clear(usx->rxring); //&txring[usx->usid]);
 8000e64:	68a3      	ldr	r3, [r4, #8]

Serial Serial1, Serial2, Serial3, Serial4, Serial5, Serial6;
USARTRing rxring[6], txring[6];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 8000e66:	2200      	movs	r2, #0
 8000e68:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
	r->tail = 0;
 8000e6c:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
	r->count = 0;
 8000e70:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
	 while (USART_GetFlagStatus(usx->USARTx, USART_FLAG_TC ) == RESET);
	 }
	 USART_ClearITPendingBit(usx->USARTx, USART_IT_TXE );
	 */
	buffer_clear(usx->rxring); //&txring[usx->usid]);
}
 8000e74:	bd38      	pop	{r3, r4, r5, pc}
 8000e76:	bf00      	nop

08000e78 <usart_peek>:

uint16_t usart_peek(Serial * usx) {
//	if ( buffer_count(&(usx->rxring)) == 0 )
//		return 0xffff;
	return buffer_peek(usx->rxring); //	rxring[usx->usid].buf[rxring[usx->usid].tail];
 8000e78:	6883      	ldr	r3, [r0, #8]
	r->tail %= USART_BUFFER_SIZE;
	return w;
}

uint16_t buffer_peek(USARTRing * r) {
	if (buffer_count(r) == 0)
 8000e7a:	f8b3 2104 	ldrh.w	r2, [r3, #260]	; 0x104
 8000e7e:	b912      	cbnz	r2, 8000e86 <usart_peek+0xe>
		return 0xffff;
 8000e80:	f64f 70ff 	movw	r0, #65535	; 0xffff

uint16_t usart_peek(Serial * usx) {
//	if ( buffer_count(&(usx->rxring)) == 0 )
//		return 0xffff;
	return buffer_peek(usx->rxring); //	rxring[usx->usid].buf[rxring[usx->usid].tail];
}
 8000e84:	4770      	bx	lr
}

uint16_t buffer_peek(USARTRing * r) {
	if (buffer_count(r) == 0)
		return 0xffff;
	return r->buf[r->tail];
 8000e86:	f9b3 2102 	ldrsh.w	r2, [r3, #258]	; 0x102
 8000e8a:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8000e8e:	4770      	bx	lr

08000e90 <usart_available>:
	r->tail = 0;
	r->count = 0;
}

uint16_t buffer_count(USARTRing * r) {
	return r->count;
 8000e90:	6883      	ldr	r3, [r0, #8]
}

uint16_t usart_available(Serial * usx) {
	return buffer_count(usx->rxring);
	//return buffer_count(&rxring[usx->usid]);
}
 8000e92:	f8b3 0104 	ldrh.w	r0, [r3, #260]	; 0x104
 8000e96:	4770      	bx	lr

08000e98 <USART1_IRQHandler>:

// this is the interrupt request handler (IRQ) for ALL USART3 interrupts

void USART1_IRQHandler(void) {
	if (USART_GetITStatus(USART1, USART_IT_RXNE )) {
 8000e98:	f44f 5080 	mov.w	r0, #4096	; 0x1000
	//return buffer_count(&rxring[usx->usid]);
}

// this is the interrupt request handler (IRQ) for ALL USART3 interrupts

void USART1_IRQHandler(void) {
 8000e9c:	b510      	push	{r4, lr}
	if (USART_GetITStatus(USART1, USART_IT_RXNE )) {
 8000e9e:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000ea2:	f240 5125 	movw	r1, #1317	; 0x525
 8000ea6:	f006 fbf1 	bl	800768c <USART_GetITStatus>
 8000eaa:	2800      	cmp	r0, #0
 8000eac:	d12d      	bne.n	8000f0a <USART1_IRQHandler+0x72>
		buffer_enque(Serial1.rxring,
		//&rxring[USART1Serial],
				USART_ReceiveData(USART1 ));
	}

	if (USART_GetITStatus(USART1, USART_IT_TXE )) {
 8000eae:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000eb2:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000eb6:	f240 7127 	movw	r1, #1831	; 0x727
 8000eba:	f006 fbe7 	bl	800768c <USART_GetITStatus>
 8000ebe:	2800      	cmp	r0, #0
 8000ec0:	d022      	beq.n	8000f08 <USART1_IRQHandler+0x70>
		if (Serial1.rxring->count
 8000ec2:	4b18      	ldr	r3, [pc, #96]	; (8000f24 <USART1_IRQHandler+0x8c>)
 8000ec4:	689a      	ldr	r2, [r3, #8]
 8000ec6:	f8b2 2104 	ldrh.w	r2, [r2, #260]	; 0x104
 8000eca:	b15a      	cbz	r2, 8000ee4 <USART1_IRQHandler+0x4c>
		//txring[USART1Serial].count
				== 0) {
			USART_ITConfig(USART1, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART1, USART_IT_TXE );
		} else {
			USART_SendData(USART1, buffer_deque(Serial1.txring)); // &txring[USART1Serial]) );
 8000ecc:	68d8      	ldr	r0, [r3, #12]
 8000ece:	f7ff fe03 	bl	8000ad8 <buffer_deque>
 8000ed2:	4601      	mov	r1, r0
 8000ed4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000ed8:	f2c4 0001 	movt	r0, #16385	; 0x4001
		}
	}
}
 8000edc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		//txring[USART1Serial].count
				== 0) {
			USART_ITConfig(USART1, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART1, USART_IT_TXE );
		} else {
			USART_SendData(USART1, buffer_deque(Serial1.txring)); // &txring[USART1Serial]) );
 8000ee0:	f006 bb08 	b.w	80074f4 <USART_SendData>

	if (USART_GetITStatus(USART1, USART_IT_TXE )) {
		if (Serial1.rxring->count
		//txring[USART1Serial].count
				== 0) {
			USART_ITConfig(USART1, USART_IT_TXE, (FunctionalState) DISABLE);
 8000ee4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000ee8:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000eec:	f240 7127 	movw	r1, #1831	; 0x727
 8000ef0:	f006 fba6 	bl	8007640 <USART_ITConfig>
			USART_ClearITPendingBit(USART1, USART_IT_TXE );
 8000ef4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000ef8:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000efc:	f240 7127 	movw	r1, #1831	; 0x727
		} else {
			USART_SendData(USART1, buffer_deque(Serial1.txring)); // &txring[USART1Serial]) );
		}
	}
}
 8000f00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (USART_GetITStatus(USART1, USART_IT_TXE )) {
		if (Serial1.rxring->count
		//txring[USART1Serial].count
				== 0) {
			USART_ITConfig(USART1, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART1, USART_IT_TXE );
 8000f04:	f006 bbe6 	b.w	80076d4 <USART_ClearITPendingBit>
 8000f08:	bd10      	pop	{r4, pc}

// this is the interrupt request handler (IRQ) for ALL USART3 interrupts

void USART1_IRQHandler(void) {
	if (USART_GetITStatus(USART1, USART_IT_RXNE )) {
		buffer_enque(Serial1.rxring,
 8000f0a:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <USART1_IRQHandler+0x8c>)
 8000f0c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000f10:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000f14:	689c      	ldr	r4, [r3, #8]
 8000f16:	f006 faf1 	bl	80074fc <USART_ReceiveData>
 8000f1a:	4601      	mov	r1, r0
 8000f1c:	4620      	mov	r0, r4
 8000f1e:	f7ff fdb7 	bl	8000a90 <buffer_enque>
 8000f22:	e7c4      	b.n	8000eae <USART1_IRQHandler+0x16>
 8000f24:	20001008 	.word	0x20001008

08000f28 <USART2_IRQHandler>:
		}
	}
}

void USART2_IRQHandler(void) {
	if (USART_GetITStatus(USART2, USART_IT_RXNE )) {
 8000f28:	f44f 4088 	mov.w	r0, #17408	; 0x4400
			USART_SendData(USART1, buffer_deque(Serial1.txring)); // &txring[USART1Serial]) );
		}
	}
}

void USART2_IRQHandler(void) {
 8000f2c:	b510      	push	{r4, lr}
	if (USART_GetITStatus(USART2, USART_IT_RXNE )) {
 8000f2e:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000f32:	f240 5125 	movw	r1, #1317	; 0x525
 8000f36:	f006 fba9 	bl	800768c <USART_GetITStatus>
 8000f3a:	2800      	cmp	r0, #0
 8000f3c:	d12c      	bne.n	8000f98 <USART2_IRQHandler+0x70>
		buffer_enque(Serial2.rxring //&rxring[USART2Serial]/
				, USART_ReceiveData(USART2 ));
	}
	if (USART_GetITStatus(USART2, USART_IT_TXE )) {
 8000f3e:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8000f42:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000f46:	f240 7127 	movw	r1, #1831	; 0x727
 8000f4a:	f006 fb9f 	bl	800768c <USART_GetITStatus>
 8000f4e:	2800      	cmp	r0, #0
 8000f50:	d021      	beq.n	8000f96 <USART2_IRQHandler+0x6e>
		if (Serial2.txring->count //txring[USART2Serial].count
 8000f52:	4b18      	ldr	r3, [pc, #96]	; (8000fb4 <USART2_IRQHandler+0x8c>)
 8000f54:	68d8      	ldr	r0, [r3, #12]
 8000f56:	f8b0 2104 	ldrh.w	r2, [r0, #260]	; 0x104
 8000f5a:	b152      	cbz	r2, 8000f72 <USART2_IRQHandler+0x4a>
		== 0) {
			USART_ITConfig(USART2, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART2, USART_IT_TXE );
		} else {
			USART_SendData(USART2, buffer_deque(Serial2.txring)); //&txring[USART2Serial]));
 8000f5c:	f7ff fdbc 	bl	8000ad8 <buffer_deque>
 8000f60:	4601      	mov	r1, r0
 8000f62:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8000f66:	f2c4 0000 	movt	r0, #16384	; 0x4000
		}
	}
}
 8000f6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if (Serial2.txring->count //txring[USART2Serial].count
		== 0) {
			USART_ITConfig(USART2, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART2, USART_IT_TXE );
		} else {
			USART_SendData(USART2, buffer_deque(Serial2.txring)); //&txring[USART2Serial]));
 8000f6e:	f006 bac1 	b.w	80074f4 <USART_SendData>
				, USART_ReceiveData(USART2 ));
	}
	if (USART_GetITStatus(USART2, USART_IT_TXE )) {
		if (Serial2.txring->count //txring[USART2Serial].count
		== 0) {
			USART_ITConfig(USART2, USART_IT_TXE, (FunctionalState) DISABLE);
 8000f72:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8000f76:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000f7a:	f240 7127 	movw	r1, #1831	; 0x727
 8000f7e:	f006 fb5f 	bl	8007640 <USART_ITConfig>
			USART_ClearITPendingBit(USART2, USART_IT_TXE );
 8000f82:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8000f86:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000f8a:	f240 7127 	movw	r1, #1831	; 0x727
		} else {
			USART_SendData(USART2, buffer_deque(Serial2.txring)); //&txring[USART2Serial]));
		}
	}
}
 8000f8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	}
	if (USART_GetITStatus(USART2, USART_IT_TXE )) {
		if (Serial2.txring->count //txring[USART2Serial].count
		== 0) {
			USART_ITConfig(USART2, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART2, USART_IT_TXE );
 8000f92:	f006 bb9f 	b.w	80076d4 <USART_ClearITPendingBit>
 8000f96:	bd10      	pop	{r4, pc}
	}
}

void USART2_IRQHandler(void) {
	if (USART_GetITStatus(USART2, USART_IT_RXNE )) {
		buffer_enque(Serial2.rxring //&rxring[USART2Serial]/
 8000f98:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <USART2_IRQHandler+0x8c>)
 8000f9a:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8000f9e:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000fa2:	689c      	ldr	r4, [r3, #8]
 8000fa4:	f006 faaa 	bl	80074fc <USART_ReceiveData>
 8000fa8:	4601      	mov	r1, r0
 8000faa:	4620      	mov	r0, r4
 8000fac:	f7ff fd70 	bl	8000a90 <buffer_enque>
 8000fb0:	e7c5      	b.n	8000f3e <USART2_IRQHandler+0x16>
 8000fb2:	bf00      	nop
 8000fb4:	2000166c 	.word	0x2000166c

08000fb8 <USART3_IRQHandler>:
		}
	}
}

void USART3_IRQHandler(void) {
	if (USART_GetITStatus(USART3, USART_IT_RXNE )) {
 8000fb8:	f44f 4090 	mov.w	r0, #18432	; 0x4800
			USART_SendData(USART2, buffer_deque(Serial2.txring)); //&txring[USART2Serial]));
		}
	}
}

void USART3_IRQHandler(void) {
 8000fbc:	b510      	push	{r4, lr}
	if (USART_GetITStatus(USART3, USART_IT_RXNE )) {
 8000fbe:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000fc2:	f240 5125 	movw	r1, #1317	; 0x525
 8000fc6:	f006 fb61 	bl	800768c <USART_GetITStatus>
 8000fca:	2800      	cmp	r0, #0
 8000fcc:	d12c      	bne.n	8001028 <USART3_IRQHandler+0x70>
		buffer_enque(Serial3.rxring /*&rxring[USART3Serial]*/,
				USART_ReceiveData(USART3 ));
	}

	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
 8000fce:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 8000fd2:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000fd6:	f240 7127 	movw	r1, #1831	; 0x727
 8000fda:	f006 fb57 	bl	800768c <USART_GetITStatus>
 8000fde:	2800      	cmp	r0, #0
 8000fe0:	d021      	beq.n	8001026 <USART3_IRQHandler+0x6e>
		if (Serial3.txring->count == 0) {
 8000fe2:	4b18      	ldr	r3, [pc, #96]	; (8001044 <USART3_IRQHandler+0x8c>)
 8000fe4:	68d8      	ldr	r0, [r3, #12]
 8000fe6:	f8b0 2104 	ldrh.w	r2, [r0, #260]	; 0x104
 8000fea:	b152      	cbz	r2, 8001002 <USART3_IRQHandler+0x4a>
			USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART3, USART_IT_TXE );
		} else {
			USART_SendData(USART3,
 8000fec:	f7ff fd74 	bl	8000ad8 <buffer_deque>
 8000ff0:	4601      	mov	r1, r0
 8000ff2:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 8000ff6:	f2c4 0000 	movt	r0, #16384	; 0x4000
					buffer_deque(Serial3.txring /*&txring[USART3Serial]*/));
		}
	}
}
 8000ffa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
		if (Serial3.txring->count == 0) {
			USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART3, USART_IT_TXE );
		} else {
			USART_SendData(USART3,
 8000ffe:	f006 ba79 	b.w	80074f4 <USART_SendData>
				USART_ReceiveData(USART3 ));
	}

	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
		if (Serial3.txring->count == 0) {
			USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) DISABLE);
 8001002:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 8001006:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800100a:	f240 7127 	movw	r1, #1831	; 0x727
 800100e:	f006 fb17 	bl	8007640 <USART_ITConfig>
			USART_ClearITPendingBit(USART3, USART_IT_TXE );
 8001012:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 8001016:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800101a:	f240 7127 	movw	r1, #1831	; 0x727
		} else {
			USART_SendData(USART3,
					buffer_deque(Serial3.txring /*&txring[USART3Serial]*/));
		}
	}
}
 800101e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	}

	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
		if (Serial3.txring->count == 0) {
			USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART3, USART_IT_TXE );
 8001022:	f006 bb57 	b.w	80076d4 <USART_ClearITPendingBit>
 8001026:	bd10      	pop	{r4, pc}
	}
}

void USART3_IRQHandler(void) {
	if (USART_GetITStatus(USART3, USART_IT_RXNE )) {
		buffer_enque(Serial3.rxring /*&rxring[USART3Serial]*/,
 8001028:	4b06      	ldr	r3, [pc, #24]	; (8001044 <USART3_IRQHandler+0x8c>)
 800102a:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 800102e:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8001032:	689c      	ldr	r4, [r3, #8]
 8001034:	f006 fa62 	bl	80074fc <USART_ReceiveData>
 8001038:	4601      	mov	r1, r0
 800103a:	4620      	mov	r0, r4
 800103c:	f7ff fd28 	bl	8000a90 <buffer_enque>
 8001040:	e7c5      	b.n	8000fce <USART3_IRQHandler+0x16>
 8001042:	bf00      	nop
 8001044:	20001018 	.word	0x20001018

08001048 <UART4_IRQHandler>:
		}
	}
}

void UART4_IRQHandler(void) {
	if (USART_GetITStatus(UART4, USART_IT_RXNE )) {
 8001048:	f44f 4098 	mov.w	r0, #19456	; 0x4c00
					buffer_deque(Serial3.txring /*&txring[USART3Serial]*/));
		}
	}
}

void UART4_IRQHandler(void) {
 800104c:	b510      	push	{r4, lr}
	if (USART_GetITStatus(UART4, USART_IT_RXNE )) {
 800104e:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8001052:	f240 5125 	movw	r1, #1317	; 0x525
 8001056:	f006 fb19 	bl	800768c <USART_GetITStatus>
 800105a:	2800      	cmp	r0, #0
 800105c:	d12c      	bne.n	80010b8 <UART4_IRQHandler+0x70>
		buffer_enque(Serial4.rxring, USART_ReceiveData(UART4 ));
	}

	if (USART_GetITStatus(UART4, USART_IT_TXE )) {
 800105e:	f44f 4098 	mov.w	r0, #19456	; 0x4c00
 8001062:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8001066:	f240 7127 	movw	r1, #1831	; 0x727
 800106a:	f006 fb0f 	bl	800768c <USART_GetITStatus>
 800106e:	2800      	cmp	r0, #0
 8001070:	d021      	beq.n	80010b6 <UART4_IRQHandler+0x6e>
		if (Serial4.txring->count == 0) {
 8001072:	4b18      	ldr	r3, [pc, #96]	; (80010d4 <UART4_IRQHandler+0x8c>)
 8001074:	68d8      	ldr	r0, [r3, #12]
 8001076:	f8b0 2104 	ldrh.w	r2, [r0, #260]	; 0x104
 800107a:	b152      	cbz	r2, 8001092 <UART4_IRQHandler+0x4a>
			USART_ITConfig(UART4, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(UART4, USART_IT_TXE );
		} else {
			USART_SendData(UART4, buffer_deque(Serial4.txring));
 800107c:	f7ff fd2c 	bl	8000ad8 <buffer_deque>
 8001080:	4601      	mov	r1, r0
 8001082:	f44f 4098 	mov.w	r0, #19456	; 0x4c00
 8001086:	f2c4 0000 	movt	r0, #16384	; 0x4000
		}
	}
}
 800108a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (USART_GetITStatus(UART4, USART_IT_TXE )) {
		if (Serial4.txring->count == 0) {
			USART_ITConfig(UART4, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(UART4, USART_IT_TXE );
		} else {
			USART_SendData(UART4, buffer_deque(Serial4.txring));
 800108e:	f006 ba31 	b.w	80074f4 <USART_SendData>
		buffer_enque(Serial4.rxring, USART_ReceiveData(UART4 ));
	}

	if (USART_GetITStatus(UART4, USART_IT_TXE )) {
		if (Serial4.txring->count == 0) {
			USART_ITConfig(UART4, USART_IT_TXE, (FunctionalState) DISABLE);
 8001092:	f44f 4098 	mov.w	r0, #19456	; 0x4c00
 8001096:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800109a:	f240 7127 	movw	r1, #1831	; 0x727
 800109e:	f006 facf 	bl	8007640 <USART_ITConfig>
			USART_ClearITPendingBit(UART4, USART_IT_TXE );
 80010a2:	f44f 4098 	mov.w	r0, #19456	; 0x4c00
 80010a6:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80010aa:	f240 7127 	movw	r1, #1831	; 0x727
		} else {
			USART_SendData(UART4, buffer_deque(Serial4.txring));
		}
	}
}
 80010ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	}

	if (USART_GetITStatus(UART4, USART_IT_TXE )) {
		if (Serial4.txring->count == 0) {
			USART_ITConfig(UART4, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(UART4, USART_IT_TXE );
 80010b2:	f006 bb0f 	b.w	80076d4 <USART_ClearITPendingBit>
 80010b6:	bd10      	pop	{r4, pc}
	}
}

void UART4_IRQHandler(void) {
	if (USART_GetITStatus(UART4, USART_IT_RXNE )) {
		buffer_enque(Serial4.rxring, USART_ReceiveData(UART4 ));
 80010b8:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <UART4_IRQHandler+0x8c>)
 80010ba:	f44f 4098 	mov.w	r0, #19456	; 0x4c00
 80010be:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80010c2:	689c      	ldr	r4, [r3, #8]
 80010c4:	f006 fa1a 	bl	80074fc <USART_ReceiveData>
 80010c8:	4601      	mov	r1, r0
 80010ca:	4620      	mov	r0, r4
 80010cc:	f7ff fce0 	bl	8000a90 <buffer_enque>
 80010d0:	e7c5      	b.n	800105e <UART4_IRQHandler+0x16>
 80010d2:	bf00      	nop
 80010d4:	2000165c 	.word	0x2000165c

080010d8 <NVIC_PriorityGroupConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 80010d8:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 80010dc:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 80010e0:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80010e4:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 80010e8:	60d8      	str	r0, [r3, #12]
}
 80010ea:	4770      	bx	lr

080010ec <NVIC_Init>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80010ec:	78c3      	ldrb	r3, [r0, #3]
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80010ee:	b430      	push	{r4, r5}
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80010f0:	b97b      	cbnz	r3, 8001112 <NVIC_Init+0x26>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80010f2:	7802      	ldrb	r2, [r0, #0]
 80010f4:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 80010f8:	0951      	lsrs	r1, r2, #5
 80010fa:	f2ce 0300 	movt	r3, #57344	; 0xe000
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80010fe:	f002 021f 	and.w	r2, r2, #31
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001102:	3120      	adds	r1, #32
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8001104:	2001      	movs	r0, #1
 8001106:	fa10 f202 	lsls.w	r2, r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800110a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800110e:	bc30      	pop	{r4, r5}
 8001110:	4770      	bx	lr
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8001112:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8001116:	f2ce 0300 	movt	r3, #57344	; 0xe000
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800111a:	7845      	ldrb	r5, [r0, #1]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800111c:	68da      	ldr	r2, [r3, #12]
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 800111e:	7884      	ldrb	r4, [r0, #2]
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8001120:	7803      	ldrb	r3, [r0, #0]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8001122:	43d2      	mvns	r2, r2
 8001124:	f3c2 2202 	ubfx	r2, r2, #8, #3
    tmppre = (0x4 - tmppriority);
 8001128:	f1c2 0104 	rsb	r1, r2, #4
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800112c:	b2c9      	uxtb	r1, r1
 800112e:	fa15 f101 	lsls.w	r1, r5, r1
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
 8001132:	250f      	movs	r5, #15
 8001134:	fa55 f202 	asrs.w	r2, r5, r2

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8001138:	b2c9      	uxtb	r1, r1
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 800113a:	4022      	ands	r2, r4
 800113c:	430a      	orrs	r2, r1
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800113e:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8001142:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
        
    tmppriority = tmppriority << 0x04;
 8001146:	0112      	lsls	r2, r2, #4
 8001148:	b2d2      	uxtb	r2, r2
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800114a:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800114e:	7802      	ldrb	r2, [r0, #0]
    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8001150:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001154:	0951      	lsrs	r1, r2, #5
    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8001156:	f2ce 0300 	movt	r3, #57344	; 0xe000
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800115a:	f002 021f 	and.w	r2, r2, #31
 800115e:	2001      	movs	r0, #1
 8001160:	fa10 f202 	lsls.w	r2, r0, r2
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001164:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8001168:	e7d1      	b.n	800110e <NVIC_Init+0x22>
 800116a:	bf00      	nop

0800116c <NVIC_SetVectorTable>:
{ 
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 800116c:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
 8001170:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8001174:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 8001178:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800117c:	4301      	orrs	r1, r0
 800117e:	6099      	str	r1, [r3, #8]
}
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop

08001184 <NVIC_SystemLPConfig>:
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
  {
    SCB->SCR |= LowPowerMode;
 8001184:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8001188:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800118c:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 800118e:	b919      	cbnz	r1, 8001198 <NVIC_SystemLPConfig+0x14>
  {
    SCB->SCR |= LowPowerMode;
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 8001190:	ea22 0000 	bic.w	r0, r2, r0
 8001194:	6118      	str	r0, [r3, #16]
 8001196:	4770      	bx	lr
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
  {
    SCB->SCR |= LowPowerMode;
 8001198:	4310      	orrs	r0, r2
 800119a:	6118      	str	r0, [r3, #16]
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop

080011a0 <SysTick_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 80011a0:	f24e 0310 	movw	r3, #57360	; 0xe010
 80011a4:	f2ce 0300 	movt	r3, #57344	; 0xe000
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 80011a8:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	bf0c      	ite	eq
 80011ae:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 80011b2:	f022 0204 	bicne.w	r2, r2, #4
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop

080011bc <ADC_DeInit>:
  *         values.
  * @param  None
  * @retval None
  */
void ADC_DeInit(void)
{
 80011bc:	b508      	push	{r3, lr}
  /* Enable all ADCs reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, ENABLE);
 80011be:	2101      	movs	r1, #1
 80011c0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80011c4:	f003 feb2 	bl	8004f2c <RCC_APB2PeriphResetCmd>
  
  /* Release all ADCs from reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, DISABLE);
 80011c8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80011cc:	2100      	movs	r1, #0
}
 80011ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* Enable all ADCs reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, ENABLE);
  
  /* Release all ADCs from reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, DISABLE);
 80011d2:	f003 beab 	b.w	8004f2c <RCC_APB2PeriphResetCmd>
 80011d6:	bf00      	nop

080011d8 <ADC_Init>:
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 80011d8:	f8d0 c004 	ldr.w	ip, [r0, #4]
  tmpreg1 &= CR1_CLEAR_MASK;
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 80011dc:	680b      	ldr	r3, [r1, #0]
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 80011de:	794a      	ldrb	r2, [r1, #5]
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 80011e0:	f02c 7c40 	bic.w	ip, ip, #50331648	; 0x3000000
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 80011e4:	b4f0      	push	{r4, r5, r6, r7}
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 80011e6:	f42c 7c80 	bic.w	ip, ip, #256	; 0x100
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 80011ea:	790d      	ldrb	r5, [r1, #4]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 80011ec:	68cf      	ldr	r7, [r1, #12]
 80011ee:	690c      	ldr	r4, [r1, #16]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 80011f0:	688e      	ldr	r6, [r1, #8]
  tmpreg1 &= CR1_CLEAR_MASK;
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 80011f2:	ea4c 0303 	orr.w	r3, ip, r3
 80011f6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
                                   ADC_InitStruct->ADC_Resolution);
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 80011fa:	6043      	str	r3, [r0, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 80011fc:	6885      	ldr	r5, [r0, #8]
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 80011fe:	f24f 73fd 	movw	r3, #63485	; 0xf7fd
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8001202:	433c      	orrs	r4, r7
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 8001204:	f2cc 03ff 	movt	r3, #49407	; 0xc0ff
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8001208:	4334      	orrs	r4, r6
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 800120a:	402b      	ands	r3, r5
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 800120c:	4323      	orrs	r3, r4
 800120e:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8001212:	6083      	str	r3, [r0, #8]
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 8001214:	7d0b      	ldrb	r3, [r1, #20]
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 8001216:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 8001218:	3b01      	subs	r3, #1
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 800121a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 800121e:	b2db      	uxtb	r3, r3
 8001220:	ea42 5303 	orr.w	r3, r2, r3, lsl #20
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 8001224:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 8001226:	bcf0      	pop	{r4, r5, r6, r7}
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop

0800122c <ADC_StructInit>:
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
  /* Initialize the ADC_Mode member */
  ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;
 800122c:	2300      	movs	r3, #0
 800122e:	6003      	str	r3, [r0, #0]

  /* initialize the ADC_ScanConvMode member */
  ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 8001230:	7103      	strb	r3, [r0, #4]

  /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 8001232:	7143      	strb	r3, [r0, #5]

  /* Initialize the ADC_ExternalTrigConvEdge member */
  ADC_InitStruct->ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 8001234:	6083      	str	r3, [r0, #8]

  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 8001236:	60c3      	str	r3, [r0, #12]

  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 8001238:	6103      	str	r3, [r0, #16]

  /* Initialize the ADC_NbrOfConversion member */
  ADC_InitStruct->ADC_NbrOfConversion = 1;
 800123a:	2301      	movs	r3, #1
 800123c:	7503      	strb	r3, [r0, #20]
}
 800123e:	4770      	bx	lr

08001240 <ADC_CommonInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
  *         that contains the configuration information for  All ADCs peripherals.
  * @retval None
  */
void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 8001240:	b470      	push	{r4, r5, r6}
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 8001242:	f44f 520c 	mov.w	r2, #8960	; 0x2300
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8001246:	e890 0042 	ldmia.w	r0, {r1, r6}
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 800124a:	f2c4 0201 	movt	r2, #16385	; 0x4001
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
                        ADC_CommonInitStruct->ADC_Prescaler | 
 800124e:	6885      	ldr	r5, [r0, #8]
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 8001250:	6854      	ldr	r4, [r2, #4]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8001252:	68c0      	ldr	r0, [r0, #12]
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
  
  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 8001254:	f243 03e0 	movw	r3, #12512	; 0x30e0
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8001258:	4331      	orrs	r1, r6
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
  
  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 800125a:	f6cf 73fc 	movt	r3, #65532	; 0xfffc
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
                        ADC_CommonInitStruct->ADC_Prescaler | 
 800125e:	4329      	orrs	r1, r5
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
  
  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 8001260:	4023      	ands	r3, r4
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8001262:	4301      	orrs	r1, r0
 8001264:	430b      	orrs	r3, r1
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
                        
  /* Write to ADC CCR */
  ADC->CCR = tmpreg1;
 8001266:	6053      	str	r3, [r2, #4]
}
 8001268:	bc70      	pop	{r4, r5, r6}
 800126a:	4770      	bx	lr

0800126c <ADC_CommonStructInit>:
  * @retval None
  */
void ADC_CommonStructInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
  /* Initialize the ADC_Mode member */
  ADC_CommonInitStruct->ADC_Mode = ADC_Mode_Independent;
 800126c:	2300      	movs	r3, #0
 800126e:	6003      	str	r3, [r0, #0]

  /* initialize the ADC_Prescaler member */
  ADC_CommonInitStruct->ADC_Prescaler = ADC_Prescaler_Div2;
 8001270:	6043      	str	r3, [r0, #4]

  /* Initialize the ADC_DMAAccessMode member */
  ADC_CommonInitStruct->ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 8001272:	6083      	str	r3, [r0, #8]

  /* Initialize the ADC_TwoSamplingDelay member */
  ADC_CommonInitStruct->ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 8001274:	60c3      	str	r3, [r0, #12]
}
 8001276:	4770      	bx	lr

08001278 <ADC_Cmd>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 8001278:	6883      	ldr	r3, [r0, #8]
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800127a:	b919      	cbnz	r1, 8001284 <ADC_Cmd+0xc>
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 800127c:	f023 0301 	bic.w	r3, r3, #1
 8001280:	6083      	str	r3, [r0, #8]
 8001282:	4770      	bx	lr
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 8001284:	f043 0301 	orr.w	r3, r3, #1
 8001288:	6083      	str	r3, [r0, #8]
 800128a:	4770      	bx	lr

0800128c <ADC_AnalogWatchdogCmd>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_ANALOG_WATCHDOG(ADC_AnalogWatchdog));
  
  /* Get the old register value */
  tmpreg = ADCx->CR1;
 800128c:	6843      	ldr	r3, [r0, #4]
  
  /* Clear AWDEN, JAWDEN and AWDSGL bits */
  tmpreg &= CR1_AWDMode_RESET;
 800128e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001292:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  
  /* Set the analog watchdog enable mode */
  tmpreg |= ADC_AnalogWatchdog;
 8001296:	430b      	orrs	r3, r1
  
  /* Store the new register value */
  ADCx->CR1 = tmpreg;
 8001298:	6043      	str	r3, [r0, #4]
}
 800129a:	4770      	bx	lr

0800129c <ADC_AnalogWatchdogThresholdsConfig>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_THRESHOLD(HighThreshold));
  assert_param(IS_ADC_THRESHOLD(LowThreshold));
  
  /* Set the ADCx high threshold */
  ADCx->HTR = HighThreshold;
 800129c:	6241      	str	r1, [r0, #36]	; 0x24
  
  /* Set the ADCx low threshold */
  ADCx->LTR = LowThreshold;
 800129e:	6282      	str	r2, [r0, #40]	; 0x28
}
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop

080012a4 <ADC_AnalogWatchdogSingleChannelConfig>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  
  /* Get the old register value */
  tmpreg = ADCx->CR1;
 80012a4:	6843      	ldr	r3, [r0, #4]
  
  /* Clear the Analog watchdog channel select bits */
  tmpreg &= CR1_AWDCH_RESET;
 80012a6:	f023 031f 	bic.w	r3, r3, #31
  
  /* Set the Analog watchdog channel */
  tmpreg |= ADC_Channel;
 80012aa:	430b      	orrs	r3, r1
  
  /* Store the new register value */
  ADCx->CR1 = tmpreg;
 80012ac:	6043      	str	r3, [r0, #4]
}
 80012ae:	4770      	bx	lr

080012b0 <ADC_TempSensorVrefintCmd>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the temperature sensor and Vrefint channel*/
    ADC->CCR |= (uint32_t)ADC_CCR_TSVREFE;
 80012b0:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 80012b4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80012b8:	685a      	ldr	r2, [r3, #4]
  */
void ADC_TempSensorVrefintCmd(FunctionalState NewState)                
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80012ba:	b918      	cbnz	r0, 80012c4 <ADC_TempSensorVrefintCmd+0x14>
    ADC->CCR |= (uint32_t)ADC_CCR_TSVREFE;
  }
  else
  {
    /* Disable the temperature sensor and Vrefint channel*/
    ADC->CCR &= (uint32_t)(~ADC_CCR_TSVREFE);
 80012bc:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the temperature sensor and Vrefint channel*/
    ADC->CCR |= (uint32_t)ADC_CCR_TSVREFE;
 80012c4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80012c8:	605a      	str	r2, [r3, #4]
 80012ca:	4770      	bx	lr

080012cc <ADC_VBATCmd>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= (uint32_t)ADC_CCR_VBATE;
 80012cc:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 80012d0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80012d4:	685a      	ldr	r2, [r3, #4]
  */
void ADC_VBATCmd(FunctionalState NewState)                             
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80012d6:	b918      	cbnz	r0, 80012e0 <ADC_VBATCmd+0x14>
    ADC->CCR |= (uint32_t)ADC_CCR_VBATE;
  }
  else
  {
    /* Disable the VBAT channel*/
    ADC->CCR &= (uint32_t)(~ADC_CCR_VBATE);
 80012d8:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= (uint32_t)ADC_CCR_VBATE;
 80012e0:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80012e4:	605a      	str	r2, [r3, #4]
 80012e6:	4770      	bx	lr

080012e8 <ADC_RegularChannelConfig>:
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 80012e8:	2909      	cmp	r1, #9
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 80012ea:	b470      	push	{r4, r5, r6}
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 80012ec:	d91e      	bls.n	800132c <ADC_RegularChannelConfig+0x44>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 80012ee:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 80012f2:	3c1e      	subs	r4, #30
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 80012f4:	68c6      	ldr	r6, [r0, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 80012f6:	2507      	movs	r5, #7
 80012f8:	40a5      	lsls	r5, r4
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 80012fa:	ea26 0505 	bic.w	r5, r6, r5
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 80012fe:	fa13 f404 	lsls.w	r4, r3, r4
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8001302:	ea45 0304 	orr.w	r3, r5, r4
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 8001306:	2a06      	cmp	r2, #6
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8001308:	60c3      	str	r3, [r0, #12]
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 800130a:	d91d      	bls.n	8001348 <ADC_RegularChannelConfig+0x60>
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
 800130c:	2a0c      	cmp	r2, #12
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 800130e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
 8001312:	d926      	bls.n	8001362 <ADC_RegularChannelConfig+0x7a>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 8001314:	3a41      	subs	r2, #65	; 0x41
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 8001316:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 8001318:	231f      	movs	r3, #31
 800131a:	4093      	lsls	r3, r2
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 800131c:	ea24 0303 	bic.w	r3, r4, r3
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 8001320:	4091      	lsls	r1, r2
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8001322:	ea43 0201 	orr.w	r2, r3, r1
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 8001326:	62c2      	str	r2, [r0, #44]	; 0x2c
  }
}
 8001328:	bc70      	pop	{r4, r5, r6}
 800132a:	4770      	bx	lr
    ADCx->SMPR1 = tmpreg1;
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 800132c:	6906      	ldr	r6, [r0, #16]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 800132e:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8001332:	2507      	movs	r5, #7
 8001334:	40a5      	lsls	r5, r4
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8001336:	ea26 0505 	bic.w	r5, r6, r5
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 800133a:	fa13 f404 	lsls.w	r4, r3, r4
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 800133e:	ea45 0304 	orr.w	r3, r5, r4
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 8001342:	2a06      	cmp	r2, #6
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8001344:	6103      	str	r3, [r0, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 8001346:	d8e1      	bhi.n	800130c <ADC_RegularChannelConfig+0x24>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 8001348:	3a01      	subs	r2, #1
 800134a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 800134e:	6b44      	ldr	r4, [r0, #52]	; 0x34
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 8001350:	231f      	movs	r3, #31
 8001352:	4093      	lsls	r3, r2
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8001354:	ea24 0303 	bic.w	r3, r4, r3
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 8001358:	4091      	lsls	r1, r2
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 800135a:	ea43 0201 	orr.w	r2, r3, r1
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 800135e:	6342      	str	r2, [r0, #52]	; 0x34
 8001360:	e7e2      	b.n	8001328 <ADC_RegularChannelConfig+0x40>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 8001362:	3a23      	subs	r2, #35	; 0x23
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 8001364:	6b04      	ldr	r4, [r0, #48]	; 0x30
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 8001366:	231f      	movs	r3, #31
 8001368:	4093      	lsls	r3, r2
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 800136a:	ea24 0303 	bic.w	r3, r4, r3
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 800136e:	4091      	lsls	r1, r2
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8001370:	ea43 0201 	orr.w	r2, r3, r1
    
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 8001374:	6302      	str	r2, [r0, #48]	; 0x30
 8001376:	e7d7      	b.n	8001328 <ADC_RegularChannelConfig+0x40>

08001378 <ADC_SoftwareStartConv>:
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Enable the selected ADC conversion for regular group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001378:	6883      	ldr	r3, [r0, #8]
 800137a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800137e:	6083      	str	r3, [r0, #8]
}
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop

08001384 <ADC_GetSoftwareStartConvStatus>:
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Check the status of SWSTART bit */
  if ((ADCx->CR2 & ADC_CR2_JSWSTART) != (uint32_t)RESET)
 8001384:	6880      	ldr	r0, [r0, #8]
    bitstatus = RESET;
  }
  
  /* Return the SWSTART bit status */
  return  bitstatus;
}
 8001386:	f3c0 5080 	ubfx	r0, r0, #22, #1
 800138a:	4770      	bx	lr

0800138c <ADC_EOCOnEachRegularChannelCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC EOC rising on each regular channel conversion */
    ADCx->CR2 |= (uint32_t)ADC_CR2_EOCS;
 800138c:	6883      	ldr	r3, [r0, #8]
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800138e:	b919      	cbnz	r1, 8001398 <ADC_EOCOnEachRegularChannelCmd+0xc>
    ADCx->CR2 |= (uint32_t)ADC_CR2_EOCS;
  }
  else
  {
    /* Disable the selected ADC EOC rising on each regular channel conversion */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_EOCS);
 8001390:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001394:	6083      	str	r3, [r0, #8]
 8001396:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC EOC rising on each regular channel conversion */
    ADCx->CR2 |= (uint32_t)ADC_CR2_EOCS;
 8001398:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800139c:	6083      	str	r3, [r0, #8]
 800139e:	4770      	bx	lr

080013a0 <ADC_ContinuousModeCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC continuous conversion mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_CONT;
 80013a0:	6883      	ldr	r3, [r0, #8]
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80013a2:	b919      	cbnz	r1, 80013ac <ADC_ContinuousModeCmd+0xc>
    ADCx->CR2 |= (uint32_t)ADC_CR2_CONT;
  }
  else
  {
    /* Disable the selected ADC continuous conversion mode */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_CONT);
 80013a4:	f023 0302 	bic.w	r3, r3, #2
 80013a8:	6083      	str	r3, [r0, #8]
 80013aa:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC continuous conversion mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_CONT;
 80013ac:	f043 0302 	orr.w	r3, r3, #2
 80013b0:	6083      	str	r3, [r0, #8]
 80013b2:	4770      	bx	lr

080013b4 <ADC_DiscModeChannelCountConfig>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_REGULAR_DISC_NUMBER(Number));
  
  /* Get the old register value */
  tmpreg1 = ADCx->CR1;
 80013b4:	6843      	ldr	r3, [r0, #4]
  
  /* Clear the old discontinuous mode channel count */
  tmpreg1 &= CR1_DISCNUM_RESET;
  
  /* Set the discontinuous mode channel count */
  tmpreg2 = Number - 1;
 80013b6:	3901      	subs	r1, #1
  
  /* Get the old register value */
  tmpreg1 = ADCx->CR1;
  
  /* Clear the old discontinuous mode channel count */
  tmpreg1 &= CR1_DISCNUM_RESET;
 80013b8:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
  
  /* Set the discontinuous mode channel count */
  tmpreg2 = Number - 1;
  tmpreg1 |= tmpreg2 << 13;
 80013bc:	ea43 3141 	orr.w	r1, r3, r1, lsl #13
  
  /* Store the new register value */
  ADCx->CR1 = tmpreg1;
 80013c0:	6041      	str	r1, [r0, #4]
}
 80013c2:	4770      	bx	lr

080013c4 <ADC_DiscModeCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC regular discontinuous mode */
    ADCx->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80013c4:	6843      	ldr	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80013c6:	b919      	cbnz	r1, 80013d0 <ADC_DiscModeCmd+0xc>
    ADCx->CR1 |= (uint32_t)ADC_CR1_DISCEN;
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_DISCEN);
 80013c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80013cc:	6043      	str	r3, [r0, #4]
 80013ce:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC regular discontinuous mode */
    ADCx->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80013d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013d4:	6043      	str	r3, [r0, #4]
 80013d6:	4770      	bx	lr

080013d8 <ADC_GetConversionValue>:
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 80013d8:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
 80013da:	b280      	uxth	r0, r0
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop

080013e0 <ADC_GetMultiModeConversionValue>:
  *           Data[31:16]: these bits contain alternatively the regular data of ADC2, ADC1 and ADC3.           
  */
uint32_t ADC_GetMultiModeConversionValue(void)
{
  /* Return the multi mode conversion value */
  return (*(__IO uint32_t *) CDR_ADDRESS);
 80013e0:	f242 3308 	movw	r3, #8968	; 0x2308
 80013e4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80013e8:	6818      	ldr	r0, [r3, #0]
}
 80013ea:	4770      	bx	lr

080013ec <ADC_DMACmd>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
 80013ec:	6883      	ldr	r3, [r0, #8]
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80013ee:	b919      	cbnz	r1, 80013f8 <ADC_DMACmd+0xc>
    ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
  }
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
 80013f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013f4:	6083      	str	r3, [r0, #8]
 80013f6:	4770      	bx	lr
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
 80013f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013fc:	6083      	str	r3, [r0, #8]
 80013fe:	4770      	bx	lr

08001400 <ADC_DMARequestAfterLastTransferCmd>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
 8001400:	6883      	ldr	r3, [r0, #8]
void ADC_DMARequestAfterLastTransferCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001402:	b919      	cbnz	r1, 800140c <ADC_DMARequestAfterLastTransferCmd+0xc>
    ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
  }
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
 8001404:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001408:	6083      	str	r3, [r0, #8]
 800140a:	4770      	bx	lr
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
 800140c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001410:	6083      	str	r3, [r0, #8]
 8001412:	4770      	bx	lr

08001414 <ADC_MultiModeDMARequestAfterLastTransferCmd>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADC->CCR |= (uint32_t)ADC_CCR_DDS;
 8001414:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 8001418:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800141c:	685a      	ldr	r2, [r3, #4]
  */
void ADC_MultiModeDMARequestAfterLastTransferCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800141e:	b918      	cbnz	r0, 8001428 <ADC_MultiModeDMARequestAfterLastTransferCmd+0x14>
    ADC->CCR |= (uint32_t)ADC_CCR_DDS;
  }
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADC->CCR &= (uint32_t)(~ADC_CCR_DDS);
 8001420:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001424:	605a      	str	r2, [r3, #4]
 8001426:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADC->CCR |= (uint32_t)ADC_CCR_DDS;
 8001428:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	4770      	bx	lr

08001430 <ADC_InjectedChannelConfig>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_INJECTED_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8001430:	2909      	cmp	r1, #9
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_InjectedChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8001432:	b470      	push	{r4, r5, r6}
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_INJECTED_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8001434:	d81c      	bhi.n	8001470 <ADC_InjectedChannelConfig+0x40>
    ADCx->SMPR1 = tmpreg1;
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8001436:	6906      	ldr	r6, [r0, #16]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 8001438:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 800143c:	2507      	movs	r5, #7
 800143e:	40a5      	lsls	r5, r4
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8001440:	ea26 0505 	bic.w	r5, r6, r5
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 8001444:	fa13 f404 	lsls.w	r4, r3, r4
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8001448:	ea45 0304 	orr.w	r3, r5, r4
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 800144c:	6103      	str	r3, [r0, #16]
  }
  /* Rank configuration */
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
 800144e:	6b83      	ldr	r3, [r0, #56]	; 0x38
  /* Get JL value: Number = JL+1 */
  tmpreg3 =  (tmpreg1 & JSQR_JL_SET)>> 20;
 8001450:	f3c3 5401 	ubfx	r4, r3, #20, #2
  /* Calculate the mask to clear: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = JSQR_JSQ_SET << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 8001454:	1b12      	subs	r2, r2, r4
 8001456:	3202      	adds	r2, #2
 8001458:	b2d2      	uxtb	r2, r2
 800145a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800145e:	241f      	movs	r4, #31
 8001460:	4094      	lsls	r4, r2
  /* Clear the old JSQx bits for the selected rank */
  tmpreg1 &= ~tmpreg2;
 8001462:	ea23 0304 	bic.w	r3, r3, r4
  /* Calculate the mask to set: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = (uint32_t)ADC_Channel << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 8001466:	4091      	lsls	r1, r2
  /* Set the JSQx bits for the selected rank */
  tmpreg1 |= tmpreg2;
 8001468:	430b      	orrs	r3, r1
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
 800146a:	6383      	str	r3, [r0, #56]	; 0x38
}
 800146c:	bc70      	pop	{r4, r5, r6}
 800146e:	4770      	bx	lr
  if (ADC_Channel > ADC_Channel_9)
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3*(ADC_Channel - 10));
 8001470:	eb01 0441 	add.w	r4, r1, r1, lsl #1
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8001474:	68c6      	ldr	r6, [r0, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3*(ADC_Channel - 10));
 8001476:	3c1e      	subs	r4, #30
 8001478:	2507      	movs	r5, #7
 800147a:	40a5      	lsls	r5, r4
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 800147c:	ea26 0505 	bic.w	r5, r6, r5
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3*(ADC_Channel - 10));
 8001480:	fa13 f404 	lsls.w	r4, r3, r4
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8001484:	ea45 0304 	orr.w	r3, r5, r4
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8001488:	60c3      	str	r3, [r0, #12]
 800148a:	e7e0      	b.n	800144e <ADC_InjectedChannelConfig+0x1e>

0800148c <ADC_InjectedSequencerLengthConfig>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_LENGTH(Length));
  
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
 800148c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  
  /* Clear the old injected sequence length JL bits */
  tmpreg1 &= JSQR_JL_RESET;
  
  /* Set the injected sequence length JL bits */
  tmpreg2 = Length - 1; 
 800148e:	3901      	subs	r1, #1
  
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
  
  /* Clear the old injected sequence length JL bits */
  tmpreg1 &= JSQR_JL_RESET;
 8001490:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
  
  /* Set the injected sequence length JL bits */
  tmpreg2 = Length - 1; 
  tmpreg1 |= tmpreg2 << 20;
 8001494:	ea43 5101 	orr.w	r1, r3, r1, lsl #20
  
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
 8001498:	6381      	str	r1, [r0, #56]	; 0x38
}
 800149a:	4770      	bx	lr

0800149c <ADC_SetInjectedOffset>:
  * @param  Offset: the offset value for the selected ADC injected channel
  *          This parameter must be a 12bit value.
  * @retval None
  */
void ADC_SetInjectedOffset(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel, uint16_t Offset)
{
 800149c:	b082      	sub	sp, #8
    __IO uint32_t tmp = 0;
 800149e:	2300      	movs	r3, #0
 80014a0:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
  assert_param(IS_ADC_OFFSET(Offset));
  
  tmp = (uint32_t)ADCx;
 80014a2:	9001      	str	r0, [sp, #4]
  tmp += ADC_InjectedChannel;
 80014a4:	9b01      	ldr	r3, [sp, #4]
 80014a6:	18cb      	adds	r3, r1, r3
 80014a8:	9301      	str	r3, [sp, #4]
  
  /* Set the selected injected channel data offset */
 *(__IO uint32_t *) tmp = (uint32_t)Offset;
 80014aa:	9b01      	ldr	r3, [sp, #4]
 80014ac:	601a      	str	r2, [r3, #0]
}
 80014ae:	b002      	add	sp, #8
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop

080014b4 <ADC_ExternalTrigInjectedConvConfig>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_EXT_INJEC_TRIG(ADC_ExternalTrigInjecConv));
  
  /* Get the old register value */
  tmpreg = ADCx->CR2;
 80014b4:	6883      	ldr	r3, [r0, #8]
  
  /* Clear the old external event selection for injected group */
  tmpreg &= CR2_JEXTSEL_RESET;
 80014b6:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  
  /* Set the external event selection for injected group */
  tmpreg |= ADC_ExternalTrigInjecConv;
 80014ba:	430b      	orrs	r3, r1
  
  /* Store the new register value */
  ADCx->CR2 = tmpreg;
 80014bc:	6083      	str	r3, [r0, #8]
}
 80014be:	4770      	bx	lr

080014c0 <ADC_ExternalTrigInjectedConvEdgeConfig>:
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(ADC_ExternalTrigInjecConvEdge));
  /* Get the old register value */
  tmpreg = ADCx->CR2;
 80014c0:	6883      	ldr	r3, [r0, #8]
  /* Clear the old external trigger edge for injected group */
  tmpreg &= CR2_JEXTEN_RESET;
 80014c2:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
  /* Set the new external trigger edge for injected group */
  tmpreg |= ADC_ExternalTrigInjecConvEdge;
 80014c6:	430b      	orrs	r3, r1
  /* Store the new register value */
  ADCx->CR2 = tmpreg;
 80014c8:	6083      	str	r3, [r0, #8]
}
 80014ca:	4770      	bx	lr

080014cc <ADC_SoftwareStartInjectedConv>:
void ADC_SoftwareStartInjectedConv(ADC_TypeDef* ADCx)
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Enable the selected ADC conversion for injected group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_JSWSTART;
 80014cc:	6883      	ldr	r3, [r0, #8]
 80014ce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014d2:	6083      	str	r3, [r0, #8]
}
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop

080014d8 <ADC_GetSoftwareStartInjectedConvCmdStatus>:
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Check the status of JSWSTART bit */
  if ((ADCx->CR2 & ADC_CR2_JSWSTART) != (uint32_t)RESET)
 80014d8:	6880      	ldr	r0, [r0, #8]
    /* JSWSTART bit is reset */
    bitstatus = RESET;
  }
  /* Return the JSWSTART bit status */
  return  bitstatus;
}
 80014da:	f3c0 5080 	ubfx	r0, r0, #22, #1
 80014de:	4770      	bx	lr

080014e0 <ADC_AutoInjectedConvCmd>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC automatic injected group conversion */
    ADCx->CR1 |= (uint32_t)ADC_CR1_JAUTO;
 80014e0:	6843      	ldr	r3, [r0, #4]
void ADC_AutoInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80014e2:	b919      	cbnz	r1, 80014ec <ADC_AutoInjectedConvCmd+0xc>
    ADCx->CR1 |= (uint32_t)ADC_CR1_JAUTO;
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_JAUTO);
 80014e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80014e8:	6043      	str	r3, [r0, #4]
 80014ea:	4770      	bx	lr
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC automatic injected group conversion */
    ADCx->CR1 |= (uint32_t)ADC_CR1_JAUTO;
 80014ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014f0:	6043      	str	r3, [r0, #4]
 80014f2:	4770      	bx	lr

080014f4 <ADC_InjectedDiscModeCmd>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC injected discontinuous mode */
    ADCx->CR1 |= (uint32_t)ADC_CR1_JDISCEN;
 80014f4:	6843      	ldr	r3, [r0, #4]
void ADC_InjectedDiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80014f6:	b919      	cbnz	r1, 8001500 <ADC_InjectedDiscModeCmd+0xc>
    ADCx->CR1 |= (uint32_t)ADC_CR1_JDISCEN;
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_JDISCEN);
 80014f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80014fc:	6043      	str	r3, [r0, #4]
 80014fe:	4770      	bx	lr
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC injected discontinuous mode */
    ADCx->CR1 |= (uint32_t)ADC_CR1_JDISCEN;
 8001500:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001504:	6043      	str	r3, [r0, #4]
 8001506:	4770      	bx	lr

08001508 <ADC_GetInjectedConversionValue>:
  *            @arg ADC_InjectedChannel_3: Injected Channel3 selected
  *            @arg ADC_InjectedChannel_4: Injected Channel4 selected
  * @retval The Data conversion value.
  */
uint16_t ADC_GetInjectedConversionValue(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel)
{
 8001508:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 800150a:	2300      	movs	r3, #0
 800150c:	9301      	str	r3, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));

  tmp = (uint32_t)ADCx;
 800150e:	9001      	str	r0, [sp, #4]
  tmp += ADC_InjectedChannel + JDR_OFFSET;
 8001510:	9b01      	ldr	r3, [sp, #4]
 8001512:	3328      	adds	r3, #40	; 0x28
 8001514:	185b      	adds	r3, r3, r1
 8001516:	9301      	str	r3, [sp, #4]
  
  /* Returns the selected injected channel conversion data value */
  return (uint16_t) (*(__IO uint32_t*)  tmp); 
 8001518:	9b01      	ldr	r3, [sp, #4]
 800151a:	6818      	ldr	r0, [r3, #0]
}
 800151c:	b280      	uxth	r0, r0
 800151e:	b002      	add	sp, #8
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop

08001524 <ADC_ITConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_ADC_IT(ADC_IT)); 

  /* Get the ADC IT index */
  itmask = (uint8_t)ADC_IT;
  itmask = (uint32_t)0x01 << itmask;    
 8001524:	2301      	movs	r3, #1
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_ADC_IT(ADC_IT)); 

  /* Get the ADC IT index */
  itmask = (uint8_t)ADC_IT;
 8001526:	b2c9      	uxtb	r1, r1
  itmask = (uint32_t)0x01 << itmask;    
 8001528:	fa13 f101 	lsls.w	r1, r3, r1

  if (NewState != DISABLE)
  {
    /* Enable the selected ADC interrupts */
    ADCx->CR1 |= itmask;
 800152c:	6843      	ldr	r3, [r0, #4]

  /* Get the ADC IT index */
  itmask = (uint8_t)ADC_IT;
  itmask = (uint32_t)0x01 << itmask;    

  if (NewState != DISABLE)
 800152e:	b91a      	cbnz	r2, 8001538 <ADC_ITConfig+0x14>
    ADCx->CR1 |= itmask;
  }
  else
  {
    /* Disable the selected ADC interrupts */
    ADCx->CR1 &= (~(uint32_t)itmask);
 8001530:	ea23 0101 	bic.w	r1, r3, r1
 8001534:	6041      	str	r1, [r0, #4]
 8001536:	4770      	bx	lr
  itmask = (uint32_t)0x01 << itmask;    

  if (NewState != DISABLE)
  {
    /* Enable the selected ADC interrupts */
    ADCx->CR1 |= itmask;
 8001538:	4319      	orrs	r1, r3
 800153a:	6041      	str	r1, [r0, #4]
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop

08001540 <ADC_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 8001540:	6803      	ldr	r3, [r0, #0]
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 8001542:	4219      	tst	r1, r3
    /* ADC_FLAG is reset */
    bitstatus = RESET;
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
}
 8001544:	bf0c      	ite	eq
 8001546:	2000      	moveq	r0, #0
 8001548:	2001      	movne	r0, #1
 800154a:	4770      	bx	lr

0800154c <ADC_ClearFlag>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CLEAR_FLAG(ADC_FLAG));

  /* Clear the selected ADC flags */
  ADCx->SR = ~(uint32_t)ADC_FLAG;
 800154c:	43c9      	mvns	r1, r1
 800154e:	6001      	str	r1, [r0, #0]
}
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop

08001554 <ADC_GetITStatus>:

  /* Get the ADC IT index */
  itmask = ADC_IT >> 8;

  /* Get the ADC_IT enable bit status */
  enablestatus = (ADCx->CR1 & ((uint32_t)0x01 << (uint8_t)ADC_IT)) ;
 8001554:	6843      	ldr	r3, [r0, #4]

  /* Check the status of the specified ADC interrupt */
  if (((ADCx->SR & itmask) != (uint32_t)RESET) && enablestatus)
 8001556:	6800      	ldr	r0, [r0, #0]
 8001558:	ea10 2011 	ands.w	r0, r0, r1, lsr #8
 800155c:	d007      	beq.n	800156e <ADC_GetITStatus+0x1a>

  /* Get the ADC IT index */
  itmask = ADC_IT >> 8;

  /* Get the ADC_IT enable bit status */
  enablestatus = (ADCx->CR1 & ((uint32_t)0x01 << (uint8_t)ADC_IT)) ;
 800155e:	2201      	movs	r2, #1
 8001560:	b2c9      	uxtb	r1, r1
 8001562:	fa12 f101 	lsls.w	r1, r2, r1
  *            @arg ADC_IT_AWD: Analog watchdog interrupt mask
  *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
  *            @arg ADC_IT_OVR: Overrun interrupt mask                        
  * @retval The new state of ADC_IT (SET or RESET).
  */
ITStatus ADC_GetITStatus(ADC_TypeDef* ADCx, uint16_t ADC_IT)
 8001566:	4219      	tst	r1, r3

  /* Check the status of the specified ADC interrupt */
  if (((ADCx->SR & itmask) != (uint32_t)RESET) && enablestatus)
  {
    /* ADC_IT is set */
    bitstatus = SET;
 8001568:	bf0c      	ite	eq
 800156a:	2000      	moveq	r0, #0
 800156c:	2001      	movne	r0, #1
    /* ADC_IT is reset */
    bitstatus = RESET;
  }
  /* Return the ADC_IT status */
  return  bitstatus;
}
 800156e:	4770      	bx	lr

08001570 <ADC_ClearITPendingBit>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_IT(ADC_IT)); 
  /* Get the ADC IT index */
  itmask = (uint8_t)(ADC_IT >> 8);
  /* Clear the selected ADC interrupt pending bits */
  ADCx->SR = ~(uint32_t)itmask;
 8001570:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8001574:	6001      	str	r1, [r0, #0]
}                    
 8001576:	4770      	bx	lr

08001578 <CAN_DeInit>:
  * @brief  Deinitializes the CAN peripheral registers to their default reset values.
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @retval None.
  */
void CAN_DeInit(CAN_TypeDef* CANx)
{
 8001578:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
 
  if (CANx == CAN1)
 800157a:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800157e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001582:	4298      	cmp	r0, r3
 8001584:	d00b      	beq.n	800159e <CAN_DeInit+0x26>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, DISABLE);
  }
  else
  {  
    /* Enable CAN2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, ENABLE);
 8001586:	2101      	movs	r1, #1
 8001588:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800158c:	f003 fcc0 	bl	8004f10 <RCC_APB1PeriphResetCmd>
    /* Release CAN2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, DISABLE);
 8001590:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001594:	2100      	movs	r1, #0
  }
}
 8001596:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {  
    /* Enable CAN2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, ENABLE);
    /* Release CAN2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, DISABLE);
 800159a:	f003 bcb9 	b.w	8004f10 <RCC_APB1PeriphResetCmd>
  assert_param(IS_CAN_ALL_PERIPH(CANx));
 
  if (CANx == CAN1)
  {
    /* Enable CAN1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, ENABLE);
 800159e:	2101      	movs	r1, #1
 80015a0:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80015a4:	f003 fcb4 	bl	8004f10 <RCC_APB1PeriphResetCmd>
    /* Release CAN1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, DISABLE);
 80015a8:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80015ac:	2100      	movs	r1, #0
    /* Enable CAN2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, ENABLE);
    /* Release CAN2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, DISABLE);
  }
}
 80015ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  if (CANx == CAN1)
  {
    /* Enable CAN1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, ENABLE);
    /* Release CAN1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, DISABLE);
 80015b2:	f003 bcad 	b.w	8004f10 <RCC_APB1PeriphResetCmd>
 80015b6:	bf00      	nop

080015b8 <CAN_Init>:
  assert_param(IS_CAN_BS1(CAN_InitStruct->CAN_BS1));
  assert_param(IS_CAN_BS2(CAN_InitStruct->CAN_BS2));
  assert_param(IS_CAN_PRESCALER(CAN_InitStruct->CAN_Prescaler));

  /* Exit from sleep mode */
  CANx->MCR &= (~(uint32_t)CAN_MCR_SLEEP);
 80015b8:	6803      	ldr	r3, [r0, #0]
 80015ba:	f023 0302 	bic.w	r3, r3, #2
  *         the configuration information for the CAN peripheral.
  * @retval Constant indicates initialization succeed which will be 
  *         CAN_InitStatus_Failed or CAN_InitStatus_Success.
  */
uint8_t CAN_Init(CAN_TypeDef* CANx, CAN_InitTypeDef* CAN_InitStruct)
{
 80015be:	b470      	push	{r4, r5, r6}
  assert_param(IS_CAN_BS1(CAN_InitStruct->CAN_BS1));
  assert_param(IS_CAN_BS2(CAN_InitStruct->CAN_BS2));
  assert_param(IS_CAN_PRESCALER(CAN_InitStruct->CAN_Prescaler));

  /* Exit from sleep mode */
  CANx->MCR &= (~(uint32_t)CAN_MCR_SLEEP);
 80015c0:	6003      	str	r3, [r0, #0]

  /* Request initialisation */
  CANx->MCR |= CAN_MCR_INRQ ;
 80015c2:	6803      	ldr	r3, [r0, #0]
 80015c4:	f043 0301 	orr.w	r3, r3, #1
 80015c8:	6003      	str	r3, [r0, #0]

  /* Wait the acknowledge */
  while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 80015ca:	6843      	ldr	r3, [r0, #4]
 80015cc:	07db      	lsls	r3, r3, #31
 80015ce:	d407      	bmi.n	80015e0 <CAN_Init+0x28>
 80015d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015d4:	e001      	b.n	80015da <CAN_Init+0x22>
 80015d6:	3b01      	subs	r3, #1
 80015d8:	d002      	beq.n	80015e0 <CAN_Init+0x28>
 80015da:	6842      	ldr	r2, [r0, #4]
 80015dc:	07d2      	lsls	r2, r2, #31
 80015de:	d5fa      	bpl.n	80015d6 <CAN_Init+0x1e>
  {
    wait_ack++;
  }

  /* Check acknowledge */
  if ((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 80015e0:	6843      	ldr	r3, [r0, #4]
 80015e2:	f013 0301 	ands.w	r3, r3, #1
  {
    InitStatus = CAN_InitStatus_Failed;
 80015e6:	bf08      	it	eq
 80015e8:	4618      	moveq	r0, r3
  {
    wait_ack++;
  }

  /* Check acknowledge */
  if ((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 80015ea:	d059      	beq.n	80016a0 <CAN_Init+0xe8>
    InitStatus = CAN_InitStatus_Failed;
  }
  else 
  {
    /* Set the time triggered communication mode */
    if (CAN_InitStruct->CAN_TTCM == ENABLE)
 80015ec:	798b      	ldrb	r3, [r1, #6]
 80015ee:	2b01      	cmp	r3, #1
    {
      CANx->MCR |= CAN_MCR_TTCM;
 80015f0:	6803      	ldr	r3, [r0, #0]
 80015f2:	bf0c      	ite	eq
 80015f4:	f043 0380 	orreq.w	r3, r3, #128	; 0x80
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TTCM;
 80015f8:	f023 0380 	bicne.w	r3, r3, #128	; 0x80
 80015fc:	6003      	str	r3, [r0, #0]
    }

    /* Set the automatic bus-off management */
    if (CAN_InitStruct->CAN_ABOM == ENABLE)
 80015fe:	79cb      	ldrb	r3, [r1, #7]
 8001600:	2b01      	cmp	r3, #1
    {
      CANx->MCR |= CAN_MCR_ABOM;
 8001602:	6803      	ldr	r3, [r0, #0]
 8001604:	bf0c      	ite	eq
 8001606:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_ABOM;
 800160a:	f023 0340 	bicne.w	r3, r3, #64	; 0x40
 800160e:	6003      	str	r3, [r0, #0]
    }

    /* Set the automatic wake-up mode */
    if (CAN_InitStruct->CAN_AWUM == ENABLE)
 8001610:	7a0b      	ldrb	r3, [r1, #8]
 8001612:	2b01      	cmp	r3, #1
    {
      CANx->MCR |= CAN_MCR_AWUM;
 8001614:	6803      	ldr	r3, [r0, #0]
 8001616:	bf0c      	ite	eq
 8001618:	f043 0320 	orreq.w	r3, r3, #32
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_AWUM;
 800161c:	f023 0320 	bicne.w	r3, r3, #32
 8001620:	6003      	str	r3, [r0, #0]
    }

    /* Set the no automatic retransmission */
    if (CAN_InitStruct->CAN_NART == ENABLE)
 8001622:	7a4b      	ldrb	r3, [r1, #9]
 8001624:	2b01      	cmp	r3, #1
    {
      CANx->MCR |= CAN_MCR_NART;
 8001626:	6803      	ldr	r3, [r0, #0]
 8001628:	bf0c      	ite	eq
 800162a:	f043 0310 	orreq.w	r3, r3, #16
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_NART;
 800162e:	f023 0310 	bicne.w	r3, r3, #16
 8001632:	6003      	str	r3, [r0, #0]
    }

    /* Set the receive FIFO locked mode */
    if (CAN_InitStruct->CAN_RFLM == ENABLE)
 8001634:	7a8b      	ldrb	r3, [r1, #10]
 8001636:	2b01      	cmp	r3, #1
    {
      CANx->MCR |= CAN_MCR_RFLM;
 8001638:	6803      	ldr	r3, [r0, #0]
 800163a:	bf0c      	ite	eq
 800163c:	f043 0308 	orreq.w	r3, r3, #8
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_RFLM;
 8001640:	f023 0308 	bicne.w	r3, r3, #8
 8001644:	6003      	str	r3, [r0, #0]
    }

    /* Set the transmit FIFO priority */
    if (CAN_InitStruct->CAN_TXFP == ENABLE)
 8001646:	7acb      	ldrb	r3, [r1, #11]
 8001648:	2b01      	cmp	r3, #1
    {
      CANx->MCR |= CAN_MCR_TXFP;
 800164a:	6803      	ldr	r3, [r0, #0]
 800164c:	bf0c      	ite	eq
 800164e:	f043 0304 	orreq.w	r3, r3, #4
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
 8001652:	f023 0304 	bicne.w	r3, r3, #4
 8001656:	6003      	str	r3, [r0, #0]
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 8001658:	788a      	ldrb	r2, [r1, #2]
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 800165a:	78ce      	ldrb	r6, [r1, #3]
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 800165c:	790d      	ldrb	r5, [r1, #4]
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 800165e:	794c      	ldrb	r4, [r1, #5]
               ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);
 8001660:	880b      	ldrh	r3, [r1, #0]
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 8001662:	0792      	lsls	r2, r2, #30
 8001664:	ea42 6206 	orr.w	r2, r2, r6, lsl #24
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 8001668:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
               ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);
 800166c:	3b01      	subs	r3, #1
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 800166e:	ea42 5204 	orr.w	r2, r2, r4, lsl #20
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 8001672:	4313      	orrs	r3, r2
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 8001674:	61c3      	str	r3, [r0, #28]
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
               ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);

    /* Request leave initialisation */
    CANx->MCR &= ~(uint32_t)CAN_MCR_INRQ;
 8001676:	6803      	ldr	r3, [r0, #0]
 8001678:	f023 0301 	bic.w	r3, r3, #1
 800167c:	6003      	str	r3, [r0, #0]

   /* Wait the acknowledge */
   wait_ack = 0;

   while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 800167e:	6843      	ldr	r3, [r0, #4]
 8001680:	07d9      	lsls	r1, r3, #31
 8001682:	d507      	bpl.n	8001694 <CAN_Init+0xdc>
 8001684:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001688:	e001      	b.n	800168e <CAN_Init+0xd6>
 800168a:	3b01      	subs	r3, #1
 800168c:	d002      	beq.n	8001694 <CAN_Init+0xdc>
 800168e:	6842      	ldr	r2, [r0, #4]
 8001690:	07d2      	lsls	r2, r2, #31
 8001692:	d4fa      	bmi.n	800168a <CAN_Init+0xd2>
   {
     wait_ack++;
   }

    /* ...and check acknowledged */
    if ((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 8001694:	6843      	ldr	r3, [r0, #4]
  }

  /* Check acknowledge */
  if ((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
  {
    InitStatus = CAN_InitStatus_Failed;
 8001696:	f013 0f01 	tst.w	r3, #1
 800169a:	bf14      	ite	ne
 800169c:	2000      	movne	r0, #0
 800169e:	2001      	moveq	r0, #1
    }
  }

  /* At this step, return the status of initialization */
  return InitStatus;
}
 80016a0:	bc70      	pop	{r4, r5, r6}
 80016a2:	4770      	bx	lr

080016a4 <CAN_FilterInit>:
  assert_param(IS_FUNCTIONAL_STATE(CAN_FilterInitStruct->CAN_FilterActivation));

  filter_number_bit_pos = ((uint32_t)1) << CAN_FilterInitStruct->CAN_FilterNumber;

  /* Initialisation mode for the filter */
  CAN1->FMR |= FMR_FINIT;
 80016a4:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 80016a8:	f2c4 0300 	movt	r3, #16384	; 0x4000
  assert_param(IS_CAN_FILTER_MODE(CAN_FilterInitStruct->CAN_FilterMode));
  assert_param(IS_CAN_FILTER_SCALE(CAN_FilterInitStruct->CAN_FilterScale));
  assert_param(IS_CAN_FILTER_FIFO(CAN_FilterInitStruct->CAN_FilterFIFOAssignment));
  assert_param(IS_FUNCTIONAL_STATE(CAN_FilterInitStruct->CAN_FilterActivation));

  filter_number_bit_pos = ((uint32_t)1) << CAN_FilterInitStruct->CAN_FilterNumber;
 80016ac:	7a82      	ldrb	r2, [r0, #10]

  /* Initialisation mode for the filter */
  CAN1->FMR |= FMR_FINIT;
 80016ae:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 80016b2:	f041 0101 	orr.w	r1, r1, #1
  * @param  CAN_FilterInitStruct: pointer to a CAN_FilterInitTypeDef structure that
  *         contains the configuration information.
  * @retval None
  */
void CAN_FilterInit(CAN_FilterInitTypeDef* CAN_FilterInitStruct)
{
 80016b6:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_FUNCTIONAL_STATE(CAN_FilterInitStruct->CAN_FilterActivation));

  filter_number_bit_pos = ((uint32_t)1) << CAN_FilterInitStruct->CAN_FilterNumber;

  /* Initialisation mode for the filter */
  CAN1->FMR |= FMR_FINIT;
 80016b8:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
  assert_param(IS_CAN_FILTER_MODE(CAN_FilterInitStruct->CAN_FilterMode));
  assert_param(IS_CAN_FILTER_SCALE(CAN_FilterInitStruct->CAN_FilterScale));
  assert_param(IS_CAN_FILTER_FIFO(CAN_FilterInitStruct->CAN_FilterFIFOAssignment));
  assert_param(IS_FUNCTIONAL_STATE(CAN_FilterInitStruct->CAN_FilterActivation));

  filter_number_bit_pos = ((uint32_t)1) << CAN_FilterInitStruct->CAN_FilterNumber;
 80016bc:	2401      	movs	r4, #1

  /* Initialisation mode for the filter */
  CAN1->FMR |= FMR_FINIT;

  /* Filter Deactivation */
  CAN1->FA1R &= ~(uint32_t)filter_number_bit_pos;
 80016be:	f8d3 121c 	ldr.w	r1, [r3, #540]	; 0x21c
  assert_param(IS_CAN_FILTER_MODE(CAN_FilterInitStruct->CAN_FilterMode));
  assert_param(IS_CAN_FILTER_SCALE(CAN_FilterInitStruct->CAN_FilterScale));
  assert_param(IS_CAN_FILTER_FIFO(CAN_FilterInitStruct->CAN_FilterFIFOAssignment));
  assert_param(IS_FUNCTIONAL_STATE(CAN_FilterInitStruct->CAN_FilterActivation));

  filter_number_bit_pos = ((uint32_t)1) << CAN_FilterInitStruct->CAN_FilterNumber;
 80016c2:	4094      	lsls	r4, r2

  /* Initialisation mode for the filter */
  CAN1->FMR |= FMR_FINIT;

  /* Filter Deactivation */
  CAN1->FA1R &= ~(uint32_t)filter_number_bit_pos;
 80016c4:	43e2      	mvns	r2, r4
 80016c6:	4011      	ands	r1, r2
 80016c8:	f8c3 121c 	str.w	r1, [r3, #540]	; 0x21c

  /* Filter Scale */
  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_16bit)
 80016cc:	7b01      	ldrb	r1, [r0, #12]
 80016ce:	b9d1      	cbnz	r1, 8001706 <CAN_FilterInit+0x62>
  {
    /* 16-bit scale for the filter */
    CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;
 80016d0:	f8d3 620c 	ldr.w	r6, [r3, #524]	; 0x20c

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 80016d4:	f8b0 c006 	ldrh.w	ip, [r0, #6]
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 80016d8:	8847      	ldrh	r7, [r0, #2]

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 80016da:	8885      	ldrh	r5, [r0, #4]
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
 80016dc:	8801      	ldrh	r1, [r0, #0]

  /* Filter Scale */
  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_16bit)
  {
    /* 16-bit scale for the filter */
    CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;
 80016de:	4016      	ands	r6, r2
 80016e0:	f8c3 620c 	str.w	r6, [r3, #524]	; 0x20c

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 80016e4:	7a86      	ldrb	r6, [r0, #10]
 80016e6:	3648      	adds	r6, #72	; 0x48
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 80016e8:	ea47 470c 	orr.w	r7, r7, ip, lsl #16
    /* 16-bit scale for the filter */
    CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 80016ec:	f843 7036 	str.w	r7, [r3, r6, lsl #3]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 80016f0:	7a86      	ldrb	r6, [r0, #10]
 80016f2:	f246 6340 	movw	r3, #26176	; 0x6640
 80016f6:	00f6      	lsls	r6, r6, #3
 80016f8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80016fc:	18f3      	adds	r3, r6, r3
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 80016fe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 8001702:	6059      	str	r1, [r3, #4]
 8001704:	7b01      	ldrb	r1, [r0, #12]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
  }

  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
 8001706:	2901      	cmp	r1, #1
 8001708:	d049      	beq.n	800179e <CAN_FilterInit+0xfa>
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
  }

  /* Filter Mode */
  if (CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdMask)
 800170a:	7ac3      	ldrb	r3, [r0, #11]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d12d      	bne.n	800176c <CAN_FilterInit+0xc8>
  {
    /*Id/Mask mode for the filter*/
    CAN1->FM1R &= ~(uint32_t)filter_number_bit_pos;
 8001710:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8001714:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001718:	f8d3 1204 	ldr.w	r1, [r3, #516]	; 0x204
 800171c:	4011      	ands	r1, r2
 800171e:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
    /*Identifier list mode for the filter*/
    CAN1->FM1R |= (uint32_t)filter_number_bit_pos;
  }

  /* Filter FIFO assignment */
  if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO0)
 8001722:	8903      	ldrh	r3, [r0, #8]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d12d      	bne.n	8001784 <CAN_FilterInit+0xe0>
  {
    /* FIFO 0 assignation for the filter */
    CAN1->FFA1R &= ~(uint32_t)filter_number_bit_pos;
 8001728:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800172c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001730:	f8d3 1214 	ldr.w	r1, [r3, #532]	; 0x214
 8001734:	400a      	ands	r2, r1
 8001736:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    /* FIFO 1 assignation for the filter */
    CAN1->FFA1R |= (uint32_t)filter_number_bit_pos;
  }
  
  /* Filter activation */
  if (CAN_FilterInitStruct->CAN_FilterActivation == ENABLE)
 800173a:	7b43      	ldrb	r3, [r0, #13]
 800173c:	2b01      	cmp	r3, #1
  {
    CAN1->FA1R |= filter_number_bit_pos;
 800173e:	bf01      	itttt	eq
 8001740:	f44f 43c8 	moveq.w	r3, #25600	; 0x6400
 8001744:	f2c4 0300 	movteq	r3, #16384	; 0x4000
 8001748:	f8d3 221c 	ldreq.w	r2, [r3, #540]	; 0x21c
 800174c:	4314      	orreq	r4, r2
 800174e:	bf08      	it	eq
 8001750:	f8c3 421c 	streq.w	r4, [r3, #540]	; 0x21c
  }

  /* Leave the initialisation mode for the filter */
  CAN1->FMR &= ~FMR_FINIT;
 8001754:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8001758:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800175c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001760:	f022 0201 	bic.w	r2, r2, #1
 8001764:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8001768:	bcf0      	pop	{r4, r5, r6, r7}
 800176a:	4770      	bx	lr
    CAN1->FM1R &= ~(uint32_t)filter_number_bit_pos;
  }
  else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
  {
    /*Identifier list mode for the filter*/
    CAN1->FM1R |= (uint32_t)filter_number_bit_pos;
 800176c:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8001770:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001774:	f8d3 1204 	ldr.w	r1, [r3, #516]	; 0x204
 8001778:	4321      	orrs	r1, r4
 800177a:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
  }

  /* Filter FIFO assignment */
  if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO0)
 800177e:	8903      	ldrh	r3, [r0, #8]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d0d1      	beq.n	8001728 <CAN_FilterInit+0x84>
  {
    /* FIFO 0 assignation for the filter */
    CAN1->FFA1R &= ~(uint32_t)filter_number_bit_pos;
  }

  if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO1)
 8001784:	2b01      	cmp	r3, #1
  {
    /* FIFO 1 assignation for the filter */
    CAN1->FFA1R |= (uint32_t)filter_number_bit_pos;
 8001786:	bf01      	itttt	eq
 8001788:	f44f 43c8 	moveq.w	r3, #25600	; 0x6400
 800178c:	f2c4 0300 	movteq	r3, #16384	; 0x4000
 8001790:	f8d3 2214 	ldreq.w	r2, [r3, #532]	; 0x214
 8001794:	4322      	orreq	r2, r4
 8001796:	bf08      	it	eq
 8001798:	f8c3 2214 	streq.w	r2, [r3, #532]	; 0x214
 800179c:	e7cd      	b.n	800173a <CAN_FilterInit+0x96>
  }

  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
  {
    /* 32-bit scale for the filter */
    CAN1->FS1R |= filter_number_bit_pos;
 800179e:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 80017a2:	f2c4 0300 	movt	r3, #16384	; 0x4000
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 80017a6:	f8b0 c000 	ldrh.w	ip, [r0]
  }

  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
  {
    /* 32-bit scale for the filter */
    CAN1->FS1R |= filter_number_bit_pos;
 80017aa:	f8d3 620c 	ldr.w	r6, [r3, #524]	; 0x20c
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 80017ae:	8847      	ldrh	r7, [r0, #2]
    /* 32-bit mask or Second 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 80017b0:	8885      	ldrh	r5, [r0, #4]
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
 80017b2:	88c1      	ldrh	r1, [r0, #6]
  }

  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
  {
    /* 32-bit scale for the filter */
    CAN1->FS1R |= filter_number_bit_pos;
 80017b4:	4326      	orrs	r6, r4
 80017b6:	f8c3 620c 	str.w	r6, [r3, #524]	; 0x20c
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 80017ba:	7a86      	ldrb	r6, [r0, #10]
 80017bc:	3648      	adds	r6, #72	; 0x48
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 80017be:	ea47 470c 	orr.w	r7, r7, ip, lsl #16
  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
  {
    /* 32-bit scale for the filter */
    CAN1->FS1R |= filter_number_bit_pos;
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 80017c2:	f843 7036 	str.w	r7, [r3, r6, lsl #3]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
    /* 32-bit mask or Second 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 80017c6:	7a86      	ldrb	r6, [r0, #10]
 80017c8:	f246 6340 	movw	r3, #26176	; 0x6640
 80017cc:	00f6      	lsls	r6, r6, #3
 80017ce:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80017d2:	18f3      	adds	r3, r6, r3
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 80017d4:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
    /* 32-bit mask or Second 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 80017d8:	6059      	str	r1, [r3, #4]
 80017da:	e796      	b.n	800170a <CAN_FilterInit+0x66>

080017dc <CAN_StructInit>:
void CAN_StructInit(CAN_InitTypeDef* CAN_InitStruct)
{
  /* Reset CAN init structure parameters values */
  
  /* Initialize the time triggered communication mode */
  CAN_InitStruct->CAN_TTCM = DISABLE;
 80017dc:	2300      	movs	r3, #0
 80017de:	7183      	strb	r3, [r0, #6]
  
  /* Initialize the automatic bus-off management */
  CAN_InitStruct->CAN_ABOM = DISABLE;
 80017e0:	71c3      	strb	r3, [r0, #7]
  
  /* Initialize the automatic wake-up mode */
  CAN_InitStruct->CAN_AWUM = DISABLE;
 80017e2:	7203      	strb	r3, [r0, #8]
  
  /* Initialize the no automatic retransmission */
  CAN_InitStruct->CAN_NART = DISABLE;
 80017e4:	7243      	strb	r3, [r0, #9]
  
  /* Initialize the receive FIFO locked mode */
  CAN_InitStruct->CAN_RFLM = DISABLE;
 80017e6:	7283      	strb	r3, [r0, #10]
  
  /* Initialize the transmit FIFO priority */
  CAN_InitStruct->CAN_TXFP = DISABLE;
 80017e8:	72c3      	strb	r3, [r0, #11]
  
  /* Initialize the CAN_Mode member */
  CAN_InitStruct->CAN_Mode = CAN_Mode_Normal;
 80017ea:	7083      	strb	r3, [r0, #2]
  
  /* Initialize the CAN_SJW member */
  CAN_InitStruct->CAN_SJW = CAN_SJW_1tq;
 80017ec:	70c3      	strb	r3, [r0, #3]
  
  /* Initialize the CAN_BS1 member */
  CAN_InitStruct->CAN_BS1 = CAN_BS1_4tq;
 80017ee:	2303      	movs	r3, #3
 80017f0:	7103      	strb	r3, [r0, #4]
  
  /* Initialize the CAN_BS2 member */
  CAN_InitStruct->CAN_BS2 = CAN_BS2_3tq;
 80017f2:	2302      	movs	r3, #2
 80017f4:	7143      	strb	r3, [r0, #5]
  
  /* Initialize the CAN_Prescaler member */
  CAN_InitStruct->CAN_Prescaler = 1;
 80017f6:	2301      	movs	r3, #1
 80017f8:	8003      	strh	r3, [r0, #0]
}
 80017fa:	4770      	bx	lr

080017fc <CAN_SlaveStartBank>:
{
  /* Check the parameters */
  assert_param(IS_CAN_BANKNUMBER(CAN_BankNumber));
  
  /* Enter Initialisation mode for the filter */
  CAN1->FMR |= FMR_FINIT;
 80017fc:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8001800:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001804:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001808:	f042 0201 	orr.w	r2, r2, #1
 800180c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  
  /* Select the start slave bank */
  CAN1->FMR &= (uint32_t)0xFFFFC0F1 ;
 8001810:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001814:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8001818:	f022 020e 	bic.w	r2, r2, #14
 800181c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  CAN1->FMR |= (uint32_t)(CAN_BankNumber)<<8;
 8001820:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001824:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8001828:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  
  /* Leave Initialisation mode for the filter */
  CAN1->FMR &= ~FMR_FINIT;
 800182c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001830:	f022 0201 	bic.w	r2, r2, #1
 8001834:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop

0800183c <CAN_DBGFreeze>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable Debug Freeze  */
    CANx->MCR |= MCR_DBF;
 800183c:	6803      	ldr	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800183e:	b919      	cbnz	r1, 8001848 <CAN_DBGFreeze+0xc>
    CANx->MCR |= MCR_DBF;
  }
  else
  {
    /* Disable Debug Freeze */
    CANx->MCR &= ~MCR_DBF;
 8001840:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001844:	6003      	str	r3, [r0, #0]
 8001846:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable Debug Freeze  */
    CANx->MCR |= MCR_DBF;
 8001848:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800184c:	6003      	str	r3, [r0, #0]
 800184e:	4770      	bx	lr

08001850 <CAN_TTComModeCmd>:
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the TTCM mode */
    CANx->MCR |= CAN_MCR_TTCM;
 8001850:	6803      	ldr	r3, [r0, #0]
void CAN_TTComModeCmd(CAN_TypeDef* CANx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001852:	b9a9      	cbnz	r1, 8001880 <CAN_TTComModeCmd+0x30>
    CANx->sTxMailBox[2].TDTR |= ((uint32_t)CAN_TDT2R_TGT);
  }
  else
  {
    /* Disable the TTCM mode */
    CANx->MCR &= (uint32_t)(~(uint32_t)CAN_MCR_TTCM);
 8001854:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001858:	6003      	str	r3, [r0, #0]

    /* Reset TGT bits */
    CANx->sTxMailBox[0].TDTR &= ((uint32_t)~CAN_TDT0R_TGT);
 800185a:	f8d0 3184 	ldr.w	r3, [r0, #388]	; 0x184
 800185e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001862:	f8c0 3184 	str.w	r3, [r0, #388]	; 0x184
    CANx->sTxMailBox[1].TDTR &= ((uint32_t)~CAN_TDT1R_TGT);
 8001866:	f8d0 3194 	ldr.w	r3, [r0, #404]	; 0x194
 800186a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800186e:	f8c0 3194 	str.w	r3, [r0, #404]	; 0x194
    CANx->sTxMailBox[2].TDTR &= ((uint32_t)~CAN_TDT2R_TGT);
 8001872:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
 8001876:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800187a:	f8c0 31a4 	str.w	r3, [r0, #420]	; 0x1a4
 800187e:	4770      	bx	lr
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the TTCM mode */
    CANx->MCR |= CAN_MCR_TTCM;
 8001880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001884:	6003      	str	r3, [r0, #0]

    /* Set TGT bits */
    CANx->sTxMailBox[0].TDTR |= ((uint32_t)CAN_TDT0R_TGT);
 8001886:	f8d0 3184 	ldr.w	r3, [r0, #388]	; 0x184
 800188a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800188e:	f8c0 3184 	str.w	r3, [r0, #388]	; 0x184
    CANx->sTxMailBox[1].TDTR |= ((uint32_t)CAN_TDT1R_TGT);
 8001892:	f8d0 3194 	ldr.w	r3, [r0, #404]	; 0x194
 8001896:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800189a:	f8c0 3194 	str.w	r3, [r0, #404]	; 0x194
    CANx->sTxMailBox[2].TDTR |= ((uint32_t)CAN_TDT2R_TGT);
 800189e:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
 80018a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018a6:	f8c0 31a4 	str.w	r3, [r0, #420]	; 0x1a4
 80018aa:	4770      	bx	lr

080018ac <CAN_Transmit>:
  assert_param(IS_CAN_IDTYPE(TxMessage->IDE));
  assert_param(IS_CAN_RTR(TxMessage->RTR));
  assert_param(IS_CAN_DLC(TxMessage->DLC));

  /* Select one empty transmit mailbox */
  if ((CANx->TSR&CAN_TSR_TME0) == CAN_TSR_TME0)
 80018ac:	6882      	ldr	r2, [r0, #8]
 80018ae:	0152      	lsls	r2, r2, #5
  * @param  TxMessage: pointer to a structure which contains CAN Id, CAN DLC and CAN data.
  * @retval The number of the mailbox that is used for transmission or
  *         CAN_TxStatus_NoMailBox if there is no empty mailbox.
  */
uint8_t CAN_Transmit(CAN_TypeDef* CANx, CanTxMsg* TxMessage)
{
 80018b0:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 80018b4:	4603      	mov	r3, r0
  assert_param(IS_CAN_IDTYPE(TxMessage->IDE));
  assert_param(IS_CAN_RTR(TxMessage->RTR));
  assert_param(IS_CAN_DLC(TxMessage->DLC));

  /* Select one empty transmit mailbox */
  if ((CANx->TSR&CAN_TSR_TME0) == CAN_TSR_TME0)
 80018b6:	d405      	bmi.n	80018c4 <CAN_Transmit+0x18>
  {
    transmit_mailbox = 0;
  }
  else if ((CANx->TSR&CAN_TSR_TME1) == CAN_TSR_TME1)
 80018b8:	6882      	ldr	r2, [r0, #8]
 80018ba:	0110      	lsls	r0, r2, #4
 80018bc:	d554      	bpl.n	8001968 <CAN_Transmit+0xbc>
 80018be:	2501      	movs	r5, #1
  {
    transmit_mailbox = 1;
 80018c0:	4628      	mov	r0, r5
 80018c2:	e001      	b.n	80018c8 <CAN_Transmit+0x1c>
  assert_param(IS_CAN_IDTYPE(TxMessage->IDE));
  assert_param(IS_CAN_RTR(TxMessage->RTR));
  assert_param(IS_CAN_DLC(TxMessage->DLC));

  /* Select one empty transmit mailbox */
  if ((CANx->TSR&CAN_TSR_TME0) == CAN_TSR_TME0)
 80018c4:	2500      	movs	r5, #0
  {
    transmit_mailbox = 0;
 80018c6:	4628      	mov	r0, r5
  }

  if (transmit_mailbox != CAN_TxStatus_NoMailBox)
  {
    /* Set up the Id */
    CANx->sTxMailBox[transmit_mailbox].TIR &= TMIDxR_TXRQ;
 80018c8:	f105 0418 	add.w	r4, r5, #24
 80018cc:	0122      	lsls	r2, r4, #4
 80018ce:	589e      	ldr	r6, [r3, r2]
 80018d0:	f006 0601 	and.w	r6, r6, #1
 80018d4:	509e      	str	r6, [r3, r2]
    if (TxMessage->IDE == CAN_Id_Standard)
 80018d6:	7a0e      	ldrb	r6, [r1, #8]
 80018d8:	2e00      	cmp	r6, #0
 80018da:	d03c      	beq.n	8001956 <CAN_Transmit+0xaa>
                                                  TxMessage->RTR);
    }
    else
    {
      assert_param(IS_CAN_EXTID(TxMessage->ExtId));
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 80018dc:	f8d1 8004 	ldr.w	r8, [r1, #4]
 80018e0:	f853 c002 	ldr.w	ip, [r3, r2]
                                                  TxMessage->IDE | \
 80018e4:	7a4f      	ldrb	r7, [r1, #9]
                                                  TxMessage->RTR);
    }
    else
    {
      assert_param(IS_CAN_EXTID(TxMessage->ExtId));
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 80018e6:	ea46 06c8 	orr.w	r6, r6, r8, lsl #3
                                                  TxMessage->IDE | \
 80018ea:	ea46 060c 	orr.w	r6, r6, ip
                                                  TxMessage->RTR);
    }
    else
    {
      assert_param(IS_CAN_EXTID(TxMessage->ExtId));
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 80018ee:	433e      	orrs	r6, r7
 80018f0:	509e      	str	r6, [r3, r2]
                                                  TxMessage->IDE | \
                                                  TxMessage->RTR);
    }
    
    /* Set up the DLC */
    TxMessage->DLC &= (uint8_t)0x0000000F;
 80018f2:	7a8e      	ldrb	r6, [r1, #10]
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
 80018f4:	0124      	lsls	r4, r4, #4
 80018f6:	191a      	adds	r2, r3, r4
                                                  TxMessage->IDE | \
                                                  TxMessage->RTR);
    }
    
    /* Set up the DLC */
    TxMessage->DLC &= (uint8_t)0x0000000F;
 80018f8:	f006 060f 	and.w	r6, r6, #15
 80018fc:	728e      	strb	r6, [r1, #10]
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
 80018fe:	6856      	ldr	r6, [r2, #4]
 8001900:	f026 060f 	bic.w	r6, r6, #15
 8001904:	6056      	str	r6, [r2, #4]
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;
 8001906:	6856      	ldr	r6, [r2, #4]
 8001908:	7a8f      	ldrb	r7, [r1, #10]
 800190a:	433e      	orrs	r6, r7
 800190c:	6056      	str	r6, [r2, #4]

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
 800190e:	7b4a      	ldrb	r2, [r1, #13]
    TxMessage->DLC &= (uint8_t)0x0000000F;
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 8001910:	f891 c00e 	ldrb.w	ip, [r1, #14]
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
 8001914:	7acf      	ldrb	r7, [r1, #11]
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
 8001916:	7b0e      	ldrb	r6, [r1, #12]
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
 8001918:	0412      	lsls	r2, r2, #16
    TxMessage->DLC &= (uint8_t)0x0000000F;
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 800191a:	ea42 620c 	orr.w	r2, r2, ip, lsl #24
 800191e:	eb03 1505 	add.w	r5, r3, r5, lsl #4
                                             ((uint32_t)TxMessage->Data[2] << 16) |
 8001922:	433a      	orrs	r2, r7
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
 8001924:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
    TxMessage->DLC &= (uint8_t)0x0000000F;
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 8001928:	f8c5 2188 	str.w	r2, [r5, #392]	; 0x188
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
                                             ((uint32_t)TxMessage->Data[6] << 16) |
 800192c:	7c4a      	ldrb	r2, [r1, #17]
    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 800192e:	7c8f      	ldrb	r7, [r1, #18]
                                             ((uint32_t)TxMessage->Data[6] << 16) |
                                             ((uint32_t)TxMessage->Data[5] << 8) |
                                             ((uint32_t)TxMessage->Data[4]));
 8001930:	7bce      	ldrb	r6, [r1, #15]
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
                                             ((uint32_t)TxMessage->Data[6] << 16) |
                                             ((uint32_t)TxMessage->Data[5] << 8) |
 8001932:	7c09      	ldrb	r1, [r1, #16]
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
                                             ((uint32_t)TxMessage->Data[6] << 16) |
 8001934:	0412      	lsls	r2, r2, #16
    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 8001936:	ea42 6207 	orr.w	r2, r2, r7, lsl #24
                                             ((uint32_t)TxMessage->Data[6] << 16) |
 800193a:	4332      	orrs	r2, r6
                                             ((uint32_t)TxMessage->Data[5] << 8) |
 800193c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 8001940:	f8c5 218c 	str.w	r2, [r5, #396]	; 0x18c
                                             ((uint32_t)TxMessage->Data[6] << 16) |
                                             ((uint32_t)TxMessage->Data[5] << 8) |
                                             ((uint32_t)TxMessage->Data[4]));
    /* Request transmission */
    CANx->sTxMailBox[transmit_mailbox].TIR |= TMIDxR_TXRQ;
 8001944:	591a      	ldr	r2, [r3, r4]
 8001946:	f042 0201 	orr.w	r2, r2, #1
 800194a:	511a      	str	r2, [r3, r4]
    TxMessage->DLC &= (uint8_t)0x0000000F;
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 800194c:	f505 75c4 	add.w	r5, r5, #392	; 0x188
                                             ((uint32_t)TxMessage->Data[4]));
    /* Request transmission */
    CANx->sTxMailBox[transmit_mailbox].TIR |= TMIDxR_TXRQ;
  }
  return transmit_mailbox;
}
 8001950:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8001954:	4770      	bx	lr
    /* Set up the Id */
    CANx->sTxMailBox[transmit_mailbox].TIR &= TMIDxR_TXRQ;
    if (TxMessage->IDE == CAN_Id_Standard)
    {
      assert_param(IS_CAN_STDID(TxMessage->StdId));  
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
 8001956:	f8d1 c000 	ldr.w	ip, [r1]
 800195a:	7a4e      	ldrb	r6, [r1, #9]
 800195c:	589f      	ldr	r7, [r3, r2]
 800195e:	ea46 564c 	orr.w	r6, r6, ip, lsl #21
 8001962:	433e      	orrs	r6, r7
 8001964:	509e      	str	r6, [r3, r2]
 8001966:	e7c4      	b.n	80018f2 <CAN_Transmit+0x46>
  }
  else if ((CANx->TSR&CAN_TSR_TME1) == CAN_TSR_TME1)
  {
    transmit_mailbox = 1;
  }
  else if ((CANx->TSR&CAN_TSR_TME2) == CAN_TSR_TME2)
 8001968:	689a      	ldr	r2, [r3, #8]
 800196a:	00d2      	lsls	r2, r2, #3
 800196c:	d502      	bpl.n	8001974 <CAN_Transmit+0xc8>
 800196e:	2502      	movs	r5, #2
  {
    transmit_mailbox = 2;
 8001970:	4628      	mov	r0, r5
 8001972:	e7a9      	b.n	80018c8 <CAN_Transmit+0x1c>
  }
  else
  {
    transmit_mailbox = CAN_TxStatus_NoMailBox;
 8001974:	2004      	movs	r0, #4
 8001976:	e7eb      	b.n	8001950 <CAN_Transmit+0xa4>

08001978 <CAN_TransmitStatus>:

  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_TRANSMITMAILBOX(TransmitMailbox));
 
  switch (TransmitMailbox)
 8001978:	2901      	cmp	r1, #1
 800197a:	d02a      	beq.n	80019d2 <CAN_TransmitStatus+0x5a>
 800197c:	d310      	bcc.n	80019a0 <CAN_TransmitStatus+0x28>
      break;
    case (CAN_TXMAILBOX_2): 
      state =   CANx->TSR &  (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2);
      break;
    default:
      state = CAN_TxStatus_Failed;
 800197e:	2300      	movs	r3, #0

  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_TRANSMITMAILBOX(TransmitMailbox));
 
  switch (TransmitMailbox)
 8001980:	2902      	cmp	r1, #2
 8001982:	d104      	bne.n	800198e <CAN_TransmitStatus+0x16>
      break;
    case (CAN_TXMAILBOX_1): 
      state =   CANx->TSR &  (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1);
      break;
    case (CAN_TXMAILBOX_2): 
      state =   CANx->TSR &  (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2);
 8001984:	6882      	ldr	r2, [r0, #8]
 8001986:	2300      	movs	r3, #0
 8001988:	f2c1 0303 	movt	r3, #4099	; 0x1003
 800198c:	4013      	ands	r3, r2
      break;
    default:
      state = CAN_TxStatus_Failed;
      break;
  }
  switch (state)
 800198e:	2203      	movs	r2, #3
 8001990:	f2c0 4200 	movt	r2, #1024	; 0x400
 8001994:	4293      	cmp	r3, r2
 8001996:	d00d      	beq.n	80019b4 <CAN_TransmitStatus+0x3c>
 8001998:	d80e      	bhi.n	80019b8 <CAN_TransmitStatus+0x40>
 800199a:	b9c3      	cbnz	r3, 80019ce <CAN_TransmitStatus+0x56>
 800199c:	2002      	movs	r0, #2
 800199e:	4770      	bx	lr
  assert_param(IS_CAN_TRANSMITMAILBOX(TransmitMailbox));
 
  switch (TransmitMailbox)
  {
    case (CAN_TXMAILBOX_0): 
      state =   CANx->TSR &  (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0);
 80019a0:	6882      	ldr	r2, [r0, #8]
 80019a2:	2303      	movs	r3, #3
 80019a4:	f2c0 4300 	movt	r3, #1024	; 0x400
 80019a8:	4013      	ands	r3, r2
      break;
    default:
      state = CAN_TxStatus_Failed;
      break;
  }
  switch (state)
 80019aa:	2203      	movs	r2, #3
 80019ac:	f2c0 4200 	movt	r2, #1024	; 0x400
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d1f1      	bne.n	8001998 <CAN_TransmitStatus+0x20>
    case (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0):state = CAN_TxStatus_Ok;
      break;
    case (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1):state = CAN_TxStatus_Ok;
      break;
    case (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2):state = CAN_TxStatus_Ok;
      break;
 80019b4:	2001      	movs	r0, #1
 80019b6:	4770      	bx	lr
      break;
    default:
      state = CAN_TxStatus_Failed;
      break;
  }
  switch (state)
 80019b8:	f44f 7240 	mov.w	r2, #768	; 0x300
 80019bc:	f6c0 0200 	movt	r2, #2048	; 0x800
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d0f7      	beq.n	80019b4 <CAN_TransmitStatus+0x3c>
 80019c4:	2200      	movs	r2, #0
 80019c6:	f2c1 0203 	movt	r2, #4099	; 0x1003
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d0f2      	beq.n	80019b4 <CAN_TransmitStatus+0x3c>
 80019ce:	2000      	movs	r0, #0
      break;
    default: state = CAN_TxStatus_Failed;
      break;
  }
  return (uint8_t) state;
}
 80019d0:	4770      	bx	lr
  {
    case (CAN_TXMAILBOX_0): 
      state =   CANx->TSR &  (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0);
      break;
    case (CAN_TXMAILBOX_1): 
      state =   CANx->TSR &  (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1);
 80019d2:	6882      	ldr	r2, [r0, #8]
 80019d4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80019d8:	f6c0 0300 	movt	r3, #2048	; 0x800
 80019dc:	4013      	ands	r3, r2
      break;
 80019de:	e7d6      	b.n	800198e <CAN_TransmitStatus+0x16>

080019e0 <CAN_CancelTransmit>:
{
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_TRANSMITMAILBOX(Mailbox));
  /* abort transmission */
  switch (Mailbox)
 80019e0:	2901      	cmp	r1, #1
 80019e2:	d00c      	beq.n	80019fe <CAN_CancelTransmit+0x1e>
 80019e4:	d306      	bcc.n	80019f4 <CAN_CancelTransmit+0x14>
 80019e6:	2902      	cmp	r1, #2
 80019e8:	d103      	bne.n	80019f2 <CAN_CancelTransmit+0x12>
  {
    case (CAN_TXMAILBOX_0): CANx->TSR |= CAN_TSR_ABRQ0;
      break;
    case (CAN_TXMAILBOX_1): CANx->TSR |= CAN_TSR_ABRQ1;
      break;
    case (CAN_TXMAILBOX_2): CANx->TSR |= CAN_TSR_ABRQ2;
 80019ea:	6883      	ldr	r3, [r0, #8]
 80019ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80019f0:	6083      	str	r3, [r0, #8]
 80019f2:	4770      	bx	lr
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_TRANSMITMAILBOX(Mailbox));
  /* abort transmission */
  switch (Mailbox)
  {
    case (CAN_TXMAILBOX_0): CANx->TSR |= CAN_TSR_ABRQ0;
 80019f4:	6883      	ldr	r3, [r0, #8]
 80019f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019fa:	6083      	str	r3, [r0, #8]
      break;
 80019fc:	4770      	bx	lr
    case (CAN_TXMAILBOX_1): CANx->TSR |= CAN_TSR_ABRQ1;
 80019fe:	6883      	ldr	r3, [r0, #8]
 8001a00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a04:	6083      	str	r3, [r0, #8]
      break;
 8001a06:	4770      	bx	lr

08001a08 <CAN_Receive>:
{
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  /* Get the Id */
  RxMessage->IDE = (uint8_t)0x04 & CANx->sFIFOMailBox[FIFONumber].RIR;
 8001a08:	f101 031b 	add.w	r3, r1, #27
  * @param  RxMessage: pointer to a structure receive frame which contains CAN Id,
  *         CAN DLC, CAN data and FMI number.
  * @retval None
  */
void CAN_Receive(CAN_TypeDef* CANx, uint8_t FIFONumber, CanRxMsg* RxMessage)
{
 8001a0c:	b430      	push	{r4, r5}
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  /* Get the Id */
  RxMessage->IDE = (uint8_t)0x04 & CANx->sFIFOMailBox[FIFONumber].RIR;
 8001a0e:	011c      	lsls	r4, r3, #4
 8001a10:	5905      	ldr	r5, [r0, r4]
 8001a12:	f005 0504 	and.w	r5, r5, #4
 8001a16:	b2ed      	uxtb	r5, r5
 8001a18:	7215      	strb	r5, [r2, #8]
  if (RxMessage->IDE == CAN_Id_Standard)
  {
    RxMessage->StdId = (uint32_t)0x000007FF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 21);
 8001a1a:	5904      	ldr	r4, [r0, r4]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  /* Get the Id */
  RxMessage->IDE = (uint8_t)0x04 & CANx->sFIFOMailBox[FIFONumber].RIR;
  if (RxMessage->IDE == CAN_Id_Standard)
 8001a1c:	2d00      	cmp	r5, #0
 8001a1e:	d136      	bne.n	8001a8e <CAN_Receive+0x86>
  {
    RxMessage->StdId = (uint32_t)0x000007FF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 21);
 8001a20:	0d64      	lsrs	r4, r4, #21
 8001a22:	6014      	str	r4, [r2, #0]
  else
  {
    RxMessage->ExtId = (uint32_t)0x1FFFFFFF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 3);
  }
  
  RxMessage->RTR = (uint8_t)0x02 & CANx->sFIFOMailBox[FIFONumber].RIR;
 8001a24:	011b      	lsls	r3, r3, #4
 8001a26:	18c4      	adds	r4, r0, r3
 8001a28:	58c3      	ldr	r3, [r0, r3]
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	7253      	strb	r3, [r2, #9]
  /* Get the DLC */
  RxMessage->DLC = (uint8_t)0x0F & CANx->sFIFOMailBox[FIFONumber].RDTR;
 8001a30:	6863      	ldr	r3, [r4, #4]
 8001a32:	f003 030f 	and.w	r3, r3, #15
 8001a36:	7293      	strb	r3, [r2, #10]
  /* Get the FMI */
  RxMessage->FMI = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDTR >> 8);
 8001a38:	6864      	ldr	r4, [r4, #4]
  /* Get the data field */
  RxMessage->Data[0] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDLR;
 8001a3a:	eb00 1301 	add.w	r3, r0, r1, lsl #4
  
  RxMessage->RTR = (uint8_t)0x02 & CANx->sFIFOMailBox[FIFONumber].RIR;
  /* Get the DLC */
  RxMessage->DLC = (uint8_t)0x0F & CANx->sFIFOMailBox[FIFONumber].RDTR;
  /* Get the FMI */
  RxMessage->FMI = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDTR >> 8);
 8001a3e:	0a24      	lsrs	r4, r4, #8
 8001a40:	74d4      	strb	r4, [r2, #19]
  /* Get the data field */
  RxMessage->Data[0] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDLR;
 8001a42:	f8d3 41b8 	ldr.w	r4, [r3, #440]	; 0x1b8
 8001a46:	72d4      	strb	r4, [r2, #11]
  RxMessage->Data[1] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 8);
 8001a48:	f8d3 41b8 	ldr.w	r4, [r3, #440]	; 0x1b8
 8001a4c:	0a24      	lsrs	r4, r4, #8
 8001a4e:	7314      	strb	r4, [r2, #12]
  RxMessage->Data[2] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 16);
 8001a50:	f8d3 41b8 	ldr.w	r4, [r3, #440]	; 0x1b8
 8001a54:	0c24      	lsrs	r4, r4, #16
 8001a56:	7354      	strb	r4, [r2, #13]
  RxMessage->Data[3] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 24);
 8001a58:	f8d3 41b8 	ldr.w	r4, [r3, #440]	; 0x1b8
 8001a5c:	0e24      	lsrs	r4, r4, #24
 8001a5e:	7394      	strb	r4, [r2, #14]
  RxMessage->Data[4] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDHR;
 8001a60:	f8d3 41bc 	ldr.w	r4, [r3, #444]	; 0x1bc
 8001a64:	73d4      	strb	r4, [r2, #15]
  RxMessage->Data[5] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 8);
 8001a66:	f8d3 41bc 	ldr.w	r4, [r3, #444]	; 0x1bc
 8001a6a:	0a24      	lsrs	r4, r4, #8
 8001a6c:	7414      	strb	r4, [r2, #16]
  RxMessage->Data[6] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 16);
 8001a6e:	f8d3 41bc 	ldr.w	r4, [r3, #444]	; 0x1bc
  /* Get the DLC */
  RxMessage->DLC = (uint8_t)0x0F & CANx->sFIFOMailBox[FIFONumber].RDTR;
  /* Get the FMI */
  RxMessage->FMI = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDTR >> 8);
  /* Get the data field */
  RxMessage->Data[0] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDLR;
 8001a72:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
  RxMessage->Data[1] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 8);
  RxMessage->Data[2] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 16);
  RxMessage->Data[3] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 24);
  RxMessage->Data[4] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDHR;
  RxMessage->Data[5] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 8);
  RxMessage->Data[6] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 16);
 8001a76:	0c24      	lsrs	r4, r4, #16
 8001a78:	7454      	strb	r4, [r2, #17]
  RxMessage->Data[7] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 24);
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	0e1b      	lsrs	r3, r3, #24
 8001a7e:	7493      	strb	r3, [r2, #18]
  /* Release the FIFO */
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
 8001a80:	b141      	cbz	r1, 8001a94 <CAN_Receive+0x8c>
    CANx->RF0R |= CAN_RF0R_RFOM0;
  }
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    CANx->RF1R |= CAN_RF1R_RFOM1;
 8001a82:	6903      	ldr	r3, [r0, #16]
 8001a84:	f043 0320 	orr.w	r3, r3, #32
 8001a88:	6103      	str	r3, [r0, #16]
  }
}
 8001a8a:	bc30      	pop	{r4, r5}
 8001a8c:	4770      	bx	lr
  {
    RxMessage->StdId = (uint32_t)0x000007FF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 21);
  }
  else
  {
    RxMessage->ExtId = (uint32_t)0x1FFFFFFF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 3);
 8001a8e:	08e4      	lsrs	r4, r4, #3
 8001a90:	6054      	str	r4, [r2, #4]
 8001a92:	e7c7      	b.n	8001a24 <CAN_Receive+0x1c>
  RxMessage->Data[7] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 24);
  /* Release the FIFO */
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
  {
    CANx->RF0R |= CAN_RF0R_RFOM0;
 8001a94:	68c3      	ldr	r3, [r0, #12]
 8001a96:	f043 0320 	orr.w	r3, r3, #32
 8001a9a:	60c3      	str	r3, [r0, #12]
 8001a9c:	e7f5      	b.n	8001a8a <CAN_Receive+0x82>
 8001a9e:	bf00      	nop

08001aa0 <CAN_FIFORelease>:
{
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
 8001aa0:	b121      	cbz	r1, 8001aac <CAN_FIFORelease+0xc>
    CANx->RF0R |= CAN_RF0R_RFOM0;
  }
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    CANx->RF1R |= CAN_RF1R_RFOM1;
 8001aa2:	6903      	ldr	r3, [r0, #16]
 8001aa4:	f043 0320 	orr.w	r3, r3, #32
 8001aa8:	6103      	str	r3, [r0, #16]
 8001aaa:	4770      	bx	lr
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
  {
    CANx->RF0R |= CAN_RF0R_RFOM0;
 8001aac:	68c3      	ldr	r3, [r0, #12]
 8001aae:	f043 0320 	orr.w	r3, r3, #32
 8001ab2:	60c3      	str	r3, [r0, #12]
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop

08001ab8 <CAN_MessagePending>:
{
  uint8_t message_pending=0;
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  if (FIFONumber == CAN_FIFO0)
 8001ab8:	b131      	cbz	r1, 8001ac8 <CAN_MessagePending+0x10>
  {
    message_pending = (uint8_t)(CANx->RF0R&(uint32_t)0x03);
  }
  else if (FIFONumber == CAN_FIFO1)
 8001aba:	2901      	cmp	r1, #1
  {
    message_pending = (uint8_t)(CANx->RF1R&(uint32_t)0x03);
 8001abc:	bf06      	itte	eq
 8001abe:	6900      	ldreq	r0, [r0, #16]
 8001ac0:	f000 0003 	andeq.w	r0, r0, #3
  }
  else
  {
    message_pending = 0;
 8001ac4:	2000      	movne	r0, #0
  }
  return message_pending;
}
 8001ac6:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  if (FIFONumber == CAN_FIFO0)
  {
    message_pending = (uint8_t)(CANx->RF0R&(uint32_t)0x03);
 8001ac8:	68c0      	ldr	r0, [r0, #12]
 8001aca:	f000 0003 	and.w	r0, r0, #3
 8001ace:	4770      	bx	lr

08001ad0 <CAN_OperatingModeRequest>:

  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_OPERATING_MODE(CAN_OperatingMode));

  if (CAN_OperatingMode == CAN_OperatingMode_Initialization)
 8001ad0:	b9f1      	cbnz	r1, 8001b10 <CAN_OperatingModeRequest+0x40>
  {
    /* Request initialisation */
    CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_SLEEP)) | CAN_MCR_INRQ);
 8001ad2:	6803      	ldr	r3, [r0, #0]
 8001ad4:	f023 0303 	bic.w	r3, r3, #3
 8001ad8:	f043 0301 	orr.w	r3, r3, #1
 8001adc:	6003      	str	r3, [r0, #0]

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK) && (timeout != 0))
 8001ade:	6843      	ldr	r3, [r0, #4]
 8001ae0:	f003 0303 	and.w	r3, r3, #3
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d009      	beq.n	8001afc <CAN_OperatingModeRequest+0x2c>
 8001ae8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001aec:	e001      	b.n	8001af2 <CAN_OperatingModeRequest+0x22>
 8001aee:	3b01      	subs	r3, #1
 8001af0:	d004      	beq.n	8001afc <CAN_OperatingModeRequest+0x2c>
 8001af2:	6842      	ldr	r2, [r0, #4]
 8001af4:	f002 0203 	and.w	r2, r2, #3
 8001af8:	2a01      	cmp	r2, #1
 8001afa:	d1f8      	bne.n	8001aee <CAN_OperatingModeRequest+0x1e>
    {
      timeout--;
    }
    if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK)
 8001afc:	6840      	ldr	r0, [r0, #4]
 8001afe:	f000 0003 	and.w	r0, r0, #3
    {
      status = CAN_ModeStatus_Failed;
    }
    else
    {
      status = CAN_ModeStatus_Success;
 8001b02:	f1a0 0c01 	sub.w	ip, r0, #1
 8001b06:	f1dc 0000 	rsbs	r0, ip, #0
 8001b0a:	eb40 000c 	adc.w	r0, r0, ip
 8001b0e:	4770      	bx	lr
    }
  }
  else  if (CAN_OperatingMode == CAN_OperatingMode_Normal)
 8001b10:	2901      	cmp	r1, #1
 8001b12:	d003      	beq.n	8001b1c <CAN_OperatingModeRequest+0x4c>
    else
    {
      status = CAN_ModeStatus_Success;
    }
  }
  else  if (CAN_OperatingMode == CAN_OperatingMode_Sleep)
 8001b14:	2902      	cmp	r1, #2
 8001b16:	d017      	beq.n	8001b48 <CAN_OperatingModeRequest+0x78>
      status = CAN_ModeStatus_Success;
    }
  }
  else
  {
    status = CAN_ModeStatus_Failed;
 8001b18:	2000      	movs	r0, #0
  }

  return  (uint8_t) status;
}
 8001b1a:	4770      	bx	lr
    }
  }
  else  if (CAN_OperatingMode == CAN_OperatingMode_Normal)
  {
    /* Request leave initialisation and sleep mode  and enter Normal mode */
    CANx->MCR &= (uint32_t)(~(CAN_MCR_SLEEP|CAN_MCR_INRQ));
 8001b1c:	6803      	ldr	r3, [r0, #0]
 8001b1e:	f023 0303 	bic.w	r3, r3, #3
 8001b22:	6003      	str	r3, [r0, #0]

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != 0) && (timeout!=0))
 8001b24:	6843      	ldr	r3, [r0, #4]
 8001b26:	0799      	lsls	r1, r3, #30
 8001b28:	d007      	beq.n	8001b3a <CAN_OperatingModeRequest+0x6a>
 8001b2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b2e:	e001      	b.n	8001b34 <CAN_OperatingModeRequest+0x64>
 8001b30:	3b01      	subs	r3, #1
 8001b32:	d002      	beq.n	8001b3a <CAN_OperatingModeRequest+0x6a>
 8001b34:	6842      	ldr	r2, [r0, #4]
 8001b36:	0792      	lsls	r2, r2, #30
 8001b38:	d1fa      	bne.n	8001b30 <CAN_OperatingModeRequest+0x60>
    {
      timeout--;
    }
    if ((CANx->MSR & CAN_MODE_MASK) != 0)
 8001b3a:	6843      	ldr	r3, [r0, #4]
    {
      status = CAN_ModeStatus_Failed;
    }
    else
    {
      status = CAN_ModeStatus_Success;
 8001b3c:	f013 0f03 	tst.w	r3, #3
 8001b40:	bf14      	ite	ne
 8001b42:	2000      	movne	r0, #0
 8001b44:	2001      	moveq	r0, #1
 8001b46:	4770      	bx	lr
    }
  }
  else  if (CAN_OperatingMode == CAN_OperatingMode_Sleep)
  {
    /* Request Sleep mode */
    CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
 8001b48:	6803      	ldr	r3, [r0, #0]
 8001b4a:	f023 0303 	bic.w	r3, r3, #3
 8001b4e:	f043 0302 	orr.w	r3, r3, #2
 8001b52:	6003      	str	r3, [r0, #0]

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK) && (timeout!=0))
 8001b54:	6843      	ldr	r3, [r0, #4]
 8001b56:	f003 0303 	and.w	r3, r3, #3
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d009      	beq.n	8001b72 <CAN_OperatingModeRequest+0xa2>
 8001b5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b62:	e001      	b.n	8001b68 <CAN_OperatingModeRequest+0x98>
 8001b64:	3b01      	subs	r3, #1
 8001b66:	d004      	beq.n	8001b72 <CAN_OperatingModeRequest+0xa2>
 8001b68:	6842      	ldr	r2, [r0, #4]
 8001b6a:	f002 0203 	and.w	r2, r2, #3
 8001b6e:	2a02      	cmp	r2, #2
 8001b70:	d1f8      	bne.n	8001b64 <CAN_OperatingModeRequest+0x94>
    {
      timeout--;
    }
    if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK)
 8001b72:	6840      	ldr	r0, [r0, #4]
 8001b74:	f000 0003 	and.w	r0, r0, #3
    {
      status = CAN_ModeStatus_Failed;
    }
    else
    {
      status = CAN_ModeStatus_Success;
 8001b78:	f1a0 0102 	sub.w	r1, r0, #2
 8001b7c:	4248      	negs	r0, r1
 8001b7e:	eb40 0001 	adc.w	r0, r0, r1
 8001b82:	4770      	bx	lr

08001b84 <CAN_Sleep>:
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
    
  /* Request Sleep mode */
   CANx->MCR = (((CANx->MCR) & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
 8001b84:	6803      	ldr	r3, [r0, #0]
 8001b86:	f023 0303 	bic.w	r3, r3, #3
 8001b8a:	f043 0302 	orr.w	r3, r3, #2
 8001b8e:	6003      	str	r3, [r0, #0]
   
  /* Sleep mode status */
  if ((CANx->MSR & (CAN_MSR_SLAK|CAN_MSR_INAK)) == CAN_MSR_SLAK)
 8001b90:	6840      	ldr	r0, [r0, #4]
 8001b92:	f000 0003 	and.w	r0, r0, #3
    /* Sleep mode not entered */
    sleepstatus =  CAN_Sleep_Ok;
  }
  /* return sleep mode status */
   return (uint8_t)sleepstatus;
}
 8001b96:	f1a0 0302 	sub.w	r3, r0, #2
 8001b9a:	4258      	negs	r0, r3
 8001b9c:	eb40 0003 	adc.w	r0, r0, r3
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop

08001ba4 <CAN_WakeUp>:
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
    
  /* Wake up request */
  CANx->MCR &= ~(uint32_t)CAN_MCR_SLEEP;
 8001ba4:	6803      	ldr	r3, [r0, #0]
 8001ba6:	f023 0302 	bic.w	r3, r3, #2
 8001baa:	6003      	str	r3, [r0, #0]
    
  /* Sleep mode status */
  while(((CANx->MSR & CAN_MSR_SLAK) == CAN_MSR_SLAK)&&(wait_slak!=0x00))
 8001bac:	6843      	ldr	r3, [r0, #4]
 8001bae:	0799      	lsls	r1, r3, #30
 8001bb0:	d507      	bpl.n	8001bc2 <CAN_WakeUp+0x1e>
 8001bb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bb6:	e001      	b.n	8001bbc <CAN_WakeUp+0x18>
 8001bb8:	3b01      	subs	r3, #1
 8001bba:	d002      	beq.n	8001bc2 <CAN_WakeUp+0x1e>
 8001bbc:	6842      	ldr	r2, [r0, #4]
 8001bbe:	0792      	lsls	r2, r2, #30
 8001bc0:	d4fa      	bmi.n	8001bb8 <CAN_WakeUp+0x14>
  {
   wait_slak--;
  }
  if((CANx->MSR & CAN_MSR_SLAK) != CAN_MSR_SLAK)
 8001bc2:	6843      	ldr	r3, [r0, #4]
  * @retval CAN_WakeUp_Ok if sleep mode left, CAN_WakeUp_Failed otherwise.
  */
uint8_t CAN_WakeUp(CAN_TypeDef* CANx)
{
  uint32_t wait_slak = SLAK_TIMEOUT;
  uint8_t wakeupstatus = CAN_WakeUp_Failed;
 8001bc4:	f013 0f02 	tst.w	r3, #2
   /* wake up done : Sleep mode exited */
    wakeupstatus = CAN_WakeUp_Ok;
  }
  /* return wakeup status */
  return (uint8_t)wakeupstatus;
}
 8001bc8:	bf14      	ite	ne
 8001bca:	2000      	movne	r0, #0
 8001bcc:	2001      	moveq	r0, #1
 8001bce:	4770      	bx	lr

08001bd0 <CAN_GetLastErrorCode>:
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  
  /* Get the error code*/
  errorcode = (((uint8_t)CANx->ESR) & (uint8_t)CAN_ESR_LEC);
 8001bd0:	6980      	ldr	r0, [r0, #24]
  
  /* Return the error code*/
  return errorcode;
}
 8001bd2:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8001bd6:	4770      	bx	lr

08001bd8 <CAN_GetReceiveErrorCounter>:
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  
  /* Get the Receive Error Counter*/
  counter = (uint8_t)((CANx->ESR & CAN_ESR_REC)>> 24);
 8001bd8:	6980      	ldr	r0, [r0, #24]
  
  /* Return the Receive Error Counter*/
  return counter;
}
 8001bda:	0e00      	lsrs	r0, r0, #24
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop

08001be0 <CAN_GetLSBTransmitErrorCounter>:
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  
  /* Get the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
  counter = (uint8_t)((CANx->ESR & CAN_ESR_TEC)>> 16);
 8001be0:	6980      	ldr	r0, [r0, #24]
  
  /* Return the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
  return counter;
}
 8001be2:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8001be6:	4770      	bx	lr

08001be8 <CAN_ITConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected CANx interrupt */
    CANx->IER |= CAN_IT;
 8001be8:	6943      	ldr	r3, [r0, #20]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_IT(CAN_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001bea:	b91a      	cbnz	r2, 8001bf4 <CAN_ITConfig+0xc>
    CANx->IER |= CAN_IT;
  }
  else
  {
    /* Disable the selected CANx interrupt */
    CANx->IER &= ~CAN_IT;
 8001bec:	ea23 0101 	bic.w	r1, r3, r1
 8001bf0:	6141      	str	r1, [r0, #20]
 8001bf2:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected CANx interrupt */
    CANx->IER |= CAN_IT;
 8001bf4:	4319      	orrs	r1, r3
 8001bf6:	6141      	str	r1, [r0, #20]
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop

08001bfc <CAN_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_GET_FLAG(CAN_FLAG));
  

  if((CAN_FLAG & CAN_FLAGS_ESR) != (uint32_t)RESET)
 8001bfc:	f411 0f70 	tst.w	r1, #15728640	; 0xf00000
 8001c00:	d009      	beq.n	8001c16 <CAN_GetFlagStatus+0x1a>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->ESR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 8001c02:	6983      	ldr	r3, [r0, #24]
 8001c04:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001c08:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
      bitstatus = SET;
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 8001c0c:	420b      	tst	r3, r1
 8001c0e:	bf0c      	ite	eq
 8001c10:	2000      	moveq	r0, #0
 8001c12:	2001      	movne	r0, #1
 8001c14:	4770      	bx	lr
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_MSR) != (uint32_t)RESET)
 8001c16:	01cb      	lsls	r3, r1, #7
 8001c18:	d509      	bpl.n	8001c2e <CAN_GetFlagStatus+0x32>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->MSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 8001c1a:	6843      	ldr	r3, [r0, #4]
 8001c1c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001c20:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
      bitstatus = SET;
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 8001c24:	420b      	tst	r3, r1
 8001c26:	bf0c      	ite	eq
 8001c28:	2000      	moveq	r0, #0
 8001c2a:	2001      	movne	r0, #1
 8001c2c:	4770      	bx	lr
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_TSR) != (uint32_t)RESET)
 8001c2e:	010a      	lsls	r2, r1, #4
 8001c30:	d40b      	bmi.n	8001c4a <CAN_GetFlagStatus+0x4e>
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_RF0R) != (uint32_t)RESET)
 8001c32:	018b      	lsls	r3, r1, #6
 8001c34:	d513      	bpl.n	8001c5e <CAN_GetFlagStatus+0x62>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->RF0R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 8001c36:	68c3      	ldr	r3, [r0, #12]
 8001c38:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001c3c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
      bitstatus = SET;
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 8001c40:	420b      	tst	r3, r1
 8001c42:	bf0c      	ite	eq
 8001c44:	2000      	moveq	r0, #0
 8001c46:	2001      	movne	r0, #1
 8001c48:	4770      	bx	lr
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_TSR) != (uint32_t)RESET)
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->TSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 8001c4a:	6883      	ldr	r3, [r0, #8]
 8001c4c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001c50:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
      bitstatus = SET;
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 8001c54:	420b      	tst	r3, r1
 8001c56:	bf0c      	ite	eq
 8001c58:	2000      	moveq	r0, #0
 8001c5a:	2001      	movne	r0, #1
 8001c5c:	4770      	bx	lr
    }
  }
  else /* If(CAN_FLAG & CAN_FLAGS_RF1R != (uint32_t)RESET) */
  { 
    /* Check the status of the specified CAN flag */
    if ((uint32_t)(CANx->RF1R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 8001c5e:	6903      	ldr	r3, [r0, #16]
 8001c60:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001c64:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
      bitstatus = SET;
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 8001c68:	420b      	tst	r3, r1
 8001c6a:	bf0c      	ite	eq
 8001c6c:	2000      	moveq	r0, #0
 8001c6e:	2001      	movne	r0, #1
      bitstatus = RESET;
    }
  }
  /* Return the CAN_FLAG status */
  return  bitstatus;
}
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop

08001c74 <CAN_ClearFlag>:
  uint32_t flagtmp=0;
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_CLEAR_FLAG(CAN_FLAG));
  
  if (CAN_FLAG == CAN_FLAG_LEC) /* ESR register */
 8001c74:	2370      	movs	r3, #112	; 0x70
 8001c76:	f2c3 03f0 	movt	r3, #12528	; 0x30f0
 8001c7a:	4299      	cmp	r1, r3
 8001c7c:	d00e      	beq.n	8001c9c <CAN_ClearFlag+0x28>
    /* Clear the selected CAN flags */
    CANx->ESR = (uint32_t)RESET;
  }
  else /* MSR or TSR or RF0R or RF1R */
  {
    flagtmp = CAN_FLAG & 0x000FFFFF;
 8001c7e:	f021 437f 	bic.w	r3, r1, #4278190080	; 0xff000000

    if ((CAN_FLAG & CAN_FLAGS_RF0R)!=(uint32_t)RESET)
 8001c82:	018a      	lsls	r2, r1, #6
    /* Clear the selected CAN flags */
    CANx->ESR = (uint32_t)RESET;
  }
  else /* MSR or TSR or RF0R or RF1R */
  {
    flagtmp = CAN_FLAG & 0x000FFFFF;
 8001c84:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000

    if ((CAN_FLAG & CAN_FLAGS_RF0R)!=(uint32_t)RESET)
 8001c88:	d406      	bmi.n	8001c98 <CAN_ClearFlag+0x24>
    {
      /* Receive Flags */
      CANx->RF0R = (uint32_t)(flagtmp);
    }
    else if ((CAN_FLAG & CAN_FLAGS_RF1R)!=(uint32_t)RESET)
 8001c8a:	014a      	lsls	r2, r1, #5
 8001c8c:	d409      	bmi.n	8001ca2 <CAN_ClearFlag+0x2e>
    {
      /* Receive Flags */
      CANx->RF1R = (uint32_t)(flagtmp);
    }
    else if ((CAN_FLAG & CAN_FLAGS_TSR)!=(uint32_t)RESET)
 8001c8e:	010a      	lsls	r2, r1, #4
    {
      /* Transmit Flags */
      CANx->TSR = (uint32_t)(flagtmp);
 8001c90:	bf4c      	ite	mi
 8001c92:	6083      	strmi	r3, [r0, #8]
    }
    else /* If((CAN_FLAG & CAN_FLAGS_MSR)!=(uint32_t)RESET) */
    {
      /* Operating mode Flags */
      CANx->MSR = (uint32_t)(flagtmp);
 8001c94:	6043      	strpl	r3, [r0, #4]
 8001c96:	4770      	bx	lr
    flagtmp = CAN_FLAG & 0x000FFFFF;

    if ((CAN_FLAG & CAN_FLAGS_RF0R)!=(uint32_t)RESET)
    {
      /* Receive Flags */
      CANx->RF0R = (uint32_t)(flagtmp);
 8001c98:	60c3      	str	r3, [r0, #12]
 8001c9a:	4770      	bx	lr
  assert_param(IS_CAN_CLEAR_FLAG(CAN_FLAG));
  
  if (CAN_FLAG == CAN_FLAG_LEC) /* ESR register */
  {
    /* Clear the selected CAN flags */
    CANx->ESR = (uint32_t)RESET;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	6183      	str	r3, [r0, #24]
 8001ca0:	4770      	bx	lr
      CANx->RF0R = (uint32_t)(flagtmp);
    }
    else if ((CAN_FLAG & CAN_FLAGS_RF1R)!=(uint32_t)RESET)
    {
      /* Receive Flags */
      CANx->RF1R = (uint32_t)(flagtmp);
 8001ca2:	6103      	str	r3, [r0, #16]
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop

08001ca8 <CAN_GetITStatus>:
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_IT(CAN_IT));
  
  /* check the interrupt enable bit */
 if((CANx->IER & CAN_IT) != RESET)
 8001ca8:	6943      	ldr	r3, [r0, #20]
 8001caa:	400b      	ands	r3, r1
 8001cac:	d00b      	beq.n	8001cc6 <CAN_GetITStatus+0x1e>
 {
   /* in case the Interrupt is enabled, .... */
    switch (CAN_IT)
 8001cae:	2940      	cmp	r1, #64	; 0x40
 8001cb0:	d033      	beq.n	8001d1a <CAN_GetITStatus+0x72>
 8001cb2:	d80a      	bhi.n	8001cca <CAN_GetITStatus+0x22>
 8001cb4:	2904      	cmp	r1, #4
 8001cb6:	d03b      	beq.n	8001d30 <CAN_GetITStatus+0x88>
 8001cb8:	d825      	bhi.n	8001d06 <CAN_GetITStatus+0x5e>
 8001cba:	2901      	cmp	r1, #1
 8001cbc:	d04e      	beq.n	8001d5c <CAN_GetITStatus+0xb4>
 8001cbe:	2902      	cmp	r1, #2
 8001cc0:	d042      	beq.n	8001d48 <CAN_GetITStatus+0xa0>
        /* Check CAN_MSR_ERRI bit */ 
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_ERRI); 
        break;
      default:
        /* in case of error, return RESET */
        itstatus = RESET;
 8001cc2:	2000      	movs	r0, #0
    itstatus  = RESET;
  }
  
  /* Return the CAN_IT status */
  return  itstatus;
}
 8001cc4:	4770      	bx	lr
    }
  }
  else
  {
   /* in case the Interrupt is not enabled, return RESET */
    itstatus  = RESET;
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	4770      	bx	lr
  
  /* check the interrupt enable bit */
 if((CANx->IER & CAN_IT) != RESET)
 {
   /* in case the Interrupt is enabled, .... */
    switch (CAN_IT)
 8001cca:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8001cce:	d028      	beq.n	8001d22 <CAN_GetITStatus+0x7a>
 8001cd0:	d80c      	bhi.n	8001cec <CAN_GetITStatus+0x44>
 8001cd2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8001cd6:	d04e      	beq.n	8001d76 <CAN_GetITStatus+0xce>
 8001cd8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8001cdc:	d030      	beq.n	8001d40 <CAN_GetITStatus+0x98>
 8001cde:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8001ce2:	d1ee      	bne.n	8001cc2 <CAN_GetITStatus+0x1a>
        /* Check CAN_MSR_SLAKI bit */
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_SLAKI);  
        break;
      case CAN_IT_EWG:
        /* Check CAN_ESR_EWGF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EWGF);  
 8001ce4:	6980      	ldr	r0, [r0, #24]
    pendingbitstatus = SET;
  }
  else
  {
    /* CAN_IT is reset */
    pendingbitstatus = RESET;
 8001ce6:	f000 0001 	and.w	r0, r0, #1
 8001cea:	4770      	bx	lr
  
  /* check the interrupt enable bit */
 if((CANx->IER & CAN_IT) != RESET)
 {
   /* in case the Interrupt is enabled, .... */
    switch (CAN_IT)
 8001cec:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8001cf0:	d03d      	beq.n	8001d6e <CAN_GetITStatus+0xc6>
 8001cf2:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8001cf6:	d02d      	beq.n	8001d54 <CAN_GetITStatus+0xac>
 8001cf8:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001cfc:	d1e1      	bne.n	8001cc2 <CAN_GetITStatus+0x1a>
        /* Check CAN_ESR_LEC bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_LEC);  
        break;
      case CAN_IT_ERR:
        /* Check CAN_MSR_ERRI bit */ 
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_ERRI); 
 8001cfe:	6840      	ldr	r0, [r0, #4]
    pendingbitstatus = SET;
  }
  else
  {
    /* CAN_IT is reset */
    pendingbitstatus = RESET;
 8001d00:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8001d04:	4770      	bx	lr
  
  /* check the interrupt enable bit */
 if((CANx->IER & CAN_IT) != RESET)
 {
   /* in case the Interrupt is enabled, .... */
    switch (CAN_IT)
 8001d06:	2910      	cmp	r1, #16
 8001d08:	d039      	beq.n	8001d7e <CAN_GetITStatus+0xd6>
 8001d0a:	2920      	cmp	r1, #32
 8001d0c:	d014      	beq.n	8001d38 <CAN_GetITStatus+0x90>
 8001d0e:	2908      	cmp	r1, #8
 8001d10:	d1d7      	bne.n	8001cc2 <CAN_GetITStatus+0x1a>
        /* Check CAN_RF0R_FULL0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FULL0);  
        break;
      case CAN_IT_FOV0:
        /* Check CAN_RF0R_FOVR0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FOVR0);  
 8001d12:	68c0      	ldr	r0, [r0, #12]
    pendingbitstatus = SET;
  }
  else
  {
    /* CAN_IT is reset */
    pendingbitstatus = RESET;
 8001d14:	f3c0 1000 	ubfx	r0, r0, #4, #1
 8001d18:	4770      	bx	lr
        /* Check CAN_RF1R_FULL1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FULL1);  
        break;
      case CAN_IT_FOV1:
        /* Check CAN_RF1R_FOVR1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FOVR1);  
 8001d1a:	6900      	ldr	r0, [r0, #16]
    pendingbitstatus = SET;
  }
  else
  {
    /* CAN_IT is reset */
    pendingbitstatus = RESET;
 8001d1c:	f3c0 1000 	ubfx	r0, r0, #4, #1
 8001d20:	4770      	bx	lr
        /* Check CAN_ESR_BOFF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_BOFF);  
        break;
      case CAN_IT_LEC:
        /* Check CAN_ESR_LEC bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_LEC);  
 8001d22:	6983      	ldr	r3, [r0, #24]
    pendingbitstatus = SET;
  }
  else
  {
    /* CAN_IT is reset */
    pendingbitstatus = RESET;
 8001d24:	f013 0f70 	tst.w	r3, #112	; 0x70
 8001d28:	bf0c      	ite	eq
 8001d2a:	2000      	moveq	r0, #0
 8001d2c:	2001      	movne	r0, #1
 8001d2e:	4770      	bx	lr
        /* Check CAN_RF0R_FMP0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FMP0);  
        break;
      case CAN_IT_FF0:
        /* Check CAN_RF0R_FULL0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FULL0);  
 8001d30:	68c0      	ldr	r0, [r0, #12]
    pendingbitstatus = SET;
  }
  else
  {
    /* CAN_IT is reset */
    pendingbitstatus = RESET;
 8001d32:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 8001d36:	4770      	bx	lr
        /* Check CAN_RF1R_FMP1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FMP1);  
        break;
      case CAN_IT_FF1:
        /* Check CAN_RF1R_FULL1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FULL1);  
 8001d38:	6900      	ldr	r0, [r0, #16]
    pendingbitstatus = SET;
  }
  else
  {
    /* CAN_IT is reset */
    pendingbitstatus = RESET;
 8001d3a:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 8001d3e:	4770      	bx	lr
        /* Check CAN_ESR_EPVF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EPVF);  
        break;
      case CAN_IT_BOF:
        /* Check CAN_ESR_BOFF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_BOFF);  
 8001d40:	6980      	ldr	r0, [r0, #24]
    pendingbitstatus = SET;
  }
  else
  {
    /* CAN_IT is reset */
    pendingbitstatus = RESET;
 8001d42:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8001d46:	4770      	bx	lr
        /* Check CAN_TSR_RQCPx bits */
        itstatus = CheckITStatus(CANx->TSR, CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2);  
        break;
      case CAN_IT_FMP0:
        /* Check CAN_RF0R_FMP0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FMP0);  
 8001d48:	68c0      	ldr	r0, [r0, #12]
    pendingbitstatus = SET;
  }
  else
  {
    /* CAN_IT is reset */
    pendingbitstatus = RESET;
 8001d4a:	f010 0003 	ands.w	r0, r0, #3
 8001d4e:	bf18      	it	ne
 8001d50:	2001      	movne	r0, #1
 8001d52:	4770      	bx	lr
        /* Check CAN_MSR_WKUI bit */
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_WKUI);  
        break;
      case CAN_IT_SLK:
        /* Check CAN_MSR_SLAKI bit */
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_SLAKI);  
 8001d54:	6840      	ldr	r0, [r0, #4]
    pendingbitstatus = SET;
  }
  else
  {
    /* CAN_IT is reset */
    pendingbitstatus = RESET;
 8001d56:	f3c0 1000 	ubfx	r0, r0, #4, #1
 8001d5a:	4770      	bx	lr
   /* in case the Interrupt is enabled, .... */
    switch (CAN_IT)
    {
      case CAN_IT_TME:
        /* Check CAN_TSR_RQCPx bits */
        itstatus = CheckITStatus(CANx->TSR, CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2);  
 8001d5c:	6880      	ldr	r0, [r0, #8]
  */
static ITStatus CheckITStatus(uint32_t CAN_Reg, uint32_t It_Bit)
{
  ITStatus pendingbitstatus = RESET;
  
  if ((CAN_Reg & It_Bit) != (uint32_t)RESET)
 8001d5e:	f000 3001 	and.w	r0, r0, #16843009	; 0x1010101
 8001d62:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
  {
    /* CAN_IT is set */
    pendingbitstatus = SET;
 8001d66:	3000      	adds	r0, #0
 8001d68:	bf18      	it	ne
 8001d6a:	2001      	movne	r0, #1
 8001d6c:	4770      	bx	lr
        /* Check CAN_RF1R_FOVR1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FOVR1);  
        break;
      case CAN_IT_WKU:
        /* Check CAN_MSR_WKUI bit */
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_WKUI);  
 8001d6e:	6840      	ldr	r0, [r0, #4]
    pendingbitstatus = SET;
  }
  else
  {
    /* CAN_IT is reset */
    pendingbitstatus = RESET;
 8001d70:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 8001d74:	4770      	bx	lr
        /* Check CAN_ESR_EWGF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EWGF);  
        break;
      case CAN_IT_EPV:
        /* Check CAN_ESR_EPVF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EPVF);  
 8001d76:	6980      	ldr	r0, [r0, #24]
    pendingbitstatus = SET;
  }
  else
  {
    /* CAN_IT is reset */
    pendingbitstatus = RESET;
 8001d78:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8001d7c:	4770      	bx	lr
        /* Check CAN_RF0R_FOVR0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FOVR0);  
        break;
      case CAN_IT_FMP1:
        /* Check CAN_RF1R_FMP1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FMP1);  
 8001d7e:	6900      	ldr	r0, [r0, #16]
    pendingbitstatus = SET;
  }
  else
  {
    /* CAN_IT is reset */
    pendingbitstatus = RESET;
 8001d80:	f010 0003 	ands.w	r0, r0, #3
 8001d84:	bf18      	it	ne
 8001d86:	2001      	movne	r0, #1
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop

08001d8c <CAN_ClearITPendingBit>:
{
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_CLEAR_IT(CAN_IT));

  switch (CAN_IT)
 8001d8c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8001d90:	d01e      	beq.n	8001dd0 <CAN_ClearITPendingBit+0x44>
 8001d92:	d911      	bls.n	8001db8 <CAN_ClearITPendingBit+0x2c>
 8001d94:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8001d98:	d018      	beq.n	8001dcc <CAN_ClearITPendingBit+0x40>
 8001d9a:	d91c      	bls.n	8001dd6 <CAN_ClearITPendingBit+0x4a>
 8001d9c:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8001da0:	d036      	beq.n	8001e10 <CAN_ClearITPendingBit+0x84>
 8001da2:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8001da6:	d030      	beq.n	8001e0a <CAN_ClearITPendingBit+0x7e>
 8001da8:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001dac:	d119      	bne.n	8001de2 <CAN_ClearITPendingBit+0x56>
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI; 
      break;
    case CAN_IT_ERR:
      /*Clear LEC bits */
      CANx->ESR = RESET; 
 8001dae:	2300      	movs	r3, #0
 8001db0:	6183      	str	r3, [r0, #24]
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI; 
 8001db2:	2304      	movs	r3, #4
 8001db4:	6043      	str	r3, [r0, #4]
       /* @note BOFF, EPVF and EWGF Flags are cleared by hardware depending on the CAN Bus status*/
       break;
 8001db6:	e014      	b.n	8001de2 <CAN_ClearITPendingBit+0x56>
{
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_CLEAR_IT(CAN_IT));

  switch (CAN_IT)
 8001db8:	2908      	cmp	r1, #8
 8001dba:	d01d      	beq.n	8001df8 <CAN_ClearITPendingBit+0x6c>
 8001dbc:	d912      	bls.n	8001de4 <CAN_ClearITPendingBit+0x58>
 8001dbe:	2920      	cmp	r1, #32
 8001dc0:	d017      	beq.n	8001df2 <CAN_ClearITPendingBit+0x66>
 8001dc2:	2940      	cmp	r1, #64	; 0x40
 8001dc4:	d10d      	bne.n	8001de2 <CAN_ClearITPendingBit+0x56>
      /* Clear CAN_RF1R_FULL1 (rc_w1)*/
      CANx->RF1R = CAN_RF1R_FULL1;  
      break;
    case CAN_IT_FOV1:
      /* Clear CAN_RF1R_FOVR1 (rc_w1)*/
      CANx->RF1R = CAN_RF1R_FOVR1; 
 8001dc6:	2310      	movs	r3, #16
 8001dc8:	6103      	str	r3, [r0, #16]
      break;
 8001dca:	4770      	bx	lr
      CANx->MSR = CAN_MSR_ERRI; 
       /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/
       break;
    case CAN_IT_LEC:
      /*  Clear LEC bits */
      CANx->ESR = RESET; 
 8001dcc:	2300      	movs	r3, #0
 8001dce:	6183      	str	r3, [r0, #24]
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI; 
 8001dd0:	2304      	movs	r3, #4
 8001dd2:	6043      	str	r3, [r0, #4]
      break;
 8001dd4:	4770      	bx	lr
{
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_CLEAR_IT(CAN_IT));

  switch (CAN_IT)
 8001dd6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8001dda:	d0f9      	beq.n	8001dd0 <CAN_ClearITPendingBit+0x44>
 8001ddc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8001de0:	d0f6      	beq.n	8001dd0 <CAN_ClearITPendingBit+0x44>
 8001de2:	4770      	bx	lr
 8001de4:	2901      	cmp	r1, #1
 8001de6:	d00a      	beq.n	8001dfe <CAN_ClearITPendingBit+0x72>
 8001de8:	2904      	cmp	r1, #4
 8001dea:	d1fa      	bne.n	8001de2 <CAN_ClearITPendingBit+0x56>
      /* Clear CAN_TSR_RQCPx (rc_w1)*/
      CANx->TSR = CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2;  
      break;
    case CAN_IT_FF0:
      /* Clear CAN_RF0R_FULL0 (rc_w1)*/
      CANx->RF0R = CAN_RF0R_FULL0; 
 8001dec:	2308      	movs	r3, #8
 8001dee:	60c3      	str	r3, [r0, #12]
      break;
 8001df0:	4770      	bx	lr
      /* Clear CAN_RF0R_FOVR0 (rc_w1)*/
      CANx->RF0R = CAN_RF0R_FOVR0; 
      break;
    case CAN_IT_FF1:
      /* Clear CAN_RF1R_FULL1 (rc_w1)*/
      CANx->RF1R = CAN_RF1R_FULL1;  
 8001df2:	2308      	movs	r3, #8
 8001df4:	6103      	str	r3, [r0, #16]
      break;
 8001df6:	4770      	bx	lr
      /* Clear CAN_RF0R_FULL0 (rc_w1)*/
      CANx->RF0R = CAN_RF0R_FULL0; 
      break;
    case CAN_IT_FOV0:
      /* Clear CAN_RF0R_FOVR0 (rc_w1)*/
      CANx->RF0R = CAN_RF0R_FOVR0; 
 8001df8:	2310      	movs	r3, #16
 8001dfa:	60c3      	str	r3, [r0, #12]
      break;
 8001dfc:	4770      	bx	lr

  switch (CAN_IT)
  {
    case CAN_IT_TME:
      /* Clear CAN_TSR_RQCPx (rc_w1)*/
      CANx->TSR = CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2;  
 8001dfe:	f240 1301 	movw	r3, #257	; 0x101
 8001e02:	f361 431f 	bfi	r3, r1, #16, #16
 8001e06:	6083      	str	r3, [r0, #8]
      break;
 8001e08:	4770      	bx	lr
      /* Clear CAN_MSR_WKUI (rc_w1)*/
      CANx->MSR = CAN_MSR_WKUI;  
      break;
    case CAN_IT_SLK:
      /* Clear CAN_MSR_SLAKI (rc_w1)*/ 
      CANx->MSR = CAN_MSR_SLAKI;   
 8001e0a:	2310      	movs	r3, #16
 8001e0c:	6043      	str	r3, [r0, #4]
      break;
 8001e0e:	4770      	bx	lr
      /* Clear CAN_RF1R_FOVR1 (rc_w1)*/
      CANx->RF1R = CAN_RF1R_FOVR1; 
      break;
    case CAN_IT_WKU:
      /* Clear CAN_MSR_WKUI (rc_w1)*/
      CANx->MSR = CAN_MSR_WKUI;  
 8001e10:	2308      	movs	r3, #8
 8001e12:	6043      	str	r3, [r0, #4]
      break;
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop

08001e18 <CRC_ResetDR>:
  * @retval None
  */
void CRC_ResetDR(void)
{
  /* Reset CRC generator */
  CRC->CR = CRC_CR_RESET;
 8001e18:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001e1c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001e20:	2201      	movs	r2, #1
 8001e22:	609a      	str	r2, [r3, #8]
}
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop

08001e28 <CRC_CalcCRC>:
  * @param  Data: data word(32-bit) to compute its CRC
  * @retval 32-bit CRC
  */
uint32_t CRC_CalcCRC(uint32_t Data)
{
  CRC->DR = Data;
 8001e28:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001e2c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001e30:	6018      	str	r0, [r3, #0]
  
  return (CRC->DR);
 8001e32:	6818      	ldr	r0, [r3, #0]
}
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop

08001e38 <CRC_CalcBlockCRC>:
  * @param  pBuffer: pointer to the buffer containing the data to be computed
  * @param  BufferLength: length of the buffer to be computed					
  * @retval 32-bit CRC
  */
uint32_t CRC_CalcBlockCRC(uint32_t pBuffer[], uint32_t BufferLength)
{
 8001e38:	b410      	push	{r4}
  uint32_t index = 0;
  
  for(index = 0; index < BufferLength; index++)
 8001e3a:	b159      	cbz	r1, 8001e54 <CRC_CalcBlockCRC+0x1c>
  {
    CRC->DR = pBuffer[index];
 8001e3c:	f44f 5440 	mov.w	r4, #12288	; 0x3000
  * @brief  Computes the 32-bit CRC of a given buffer of data word(32-bit).
  * @param  pBuffer: pointer to the buffer containing the data to be computed
  * @param  BufferLength: length of the buffer to be computed					
  * @retval 32-bit CRC
  */
uint32_t CRC_CalcBlockCRC(uint32_t pBuffer[], uint32_t BufferLength)
 8001e40:	3804      	subs	r0, #4
{
  uint32_t index = 0;
  
  for(index = 0; index < BufferLength; index++)
 8001e42:	2300      	movs	r3, #0
  {
    CRC->DR = pBuffer[index];
 8001e44:	f2c4 0402 	movt	r4, #16386	; 0x4002
 8001e48:	f850 2f04 	ldr.w	r2, [r0, #4]!
  */
uint32_t CRC_CalcBlockCRC(uint32_t pBuffer[], uint32_t BufferLength)
{
  uint32_t index = 0;
  
  for(index = 0; index < BufferLength; index++)
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	428b      	cmp	r3, r1
  {
    CRC->DR = pBuffer[index];
 8001e50:	6022      	str	r2, [r4, #0]
  */
uint32_t CRC_CalcBlockCRC(uint32_t pBuffer[], uint32_t BufferLength)
{
  uint32_t index = 0;
  
  for(index = 0; index < BufferLength; index++)
 8001e52:	d1f9      	bne.n	8001e48 <CRC_CalcBlockCRC+0x10>
  {
    CRC->DR = pBuffer[index];
  }
  return (CRC->DR);
 8001e54:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001e58:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001e5c:	6818      	ldr	r0, [r3, #0]
}
 8001e5e:	bc10      	pop	{r4}
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop

08001e64 <CRC_GetCRC>:
  * @param  None
  * @retval 32-bit CRC
  */
uint32_t CRC_GetCRC(void)
{
  return (CRC->DR);
 8001e64:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001e68:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001e6c:	6818      	ldr	r0, [r3, #0]
}
 8001e6e:	4770      	bx	lr

08001e70 <CRC_SetIDRegister>:
  * @param  IDValue: 8-bit value to be stored in the ID register 					
  * @retval None
  */
void CRC_SetIDRegister(uint8_t IDValue)
{
  CRC->IDR = IDValue;
 8001e70:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001e74:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001e78:	7118      	strb	r0, [r3, #4]
}
 8001e7a:	4770      	bx	lr

08001e7c <CRC_GetIDRegister>:
  * @param  None
  * @retval 8-bit value of the ID register 
  */
uint8_t CRC_GetIDRegister(void)
{
  return (CRC->IDR);
 8001e7c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001e80:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001e84:	7918      	ldrb	r0, [r3, #4]
}
 8001e86:	4770      	bx	lr

08001e88 <CRYP_DeInit>:
  * @brief  Deinitializes the CRYP peripheral registers to their default reset values
  * @param  None
  * @retval None
  */
void CRYP_DeInit(void)
{
 8001e88:	b508      	push	{r3, lr}
  /* Enable CRYP reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_CRYP, ENABLE);
 8001e8a:	2010      	movs	r0, #16
 8001e8c:	2101      	movs	r1, #1
 8001e8e:	f003 f823 	bl	8004ed8 <RCC_AHB2PeriphResetCmd>

  /* Release CRYP from reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_CRYP, DISABLE);
 8001e92:	2010      	movs	r0, #16
 8001e94:	2100      	movs	r1, #0
}
 8001e96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* Enable CRYP reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_CRYP, ENABLE);

  /* Release CRYP from reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_CRYP, DISABLE);
 8001e9a:	f003 b81d 	b.w	8004ed8 <RCC_AHB2PeriphResetCmd>
 8001e9e:	bf00      	nop

08001ea0 <CRYP_Init>:
  assert_param(IS_CRYP_ALGOMODE(CRYP_InitStruct->CRYP_AlgoMode));
  assert_param(IS_CRYP_DATATYPE(CRYP_InitStruct->CRYP_DataType));
  assert_param(IS_CRYP_ALGODIR(CRYP_InitStruct->CRYP_AlgoDir));

  /* Select Algorithm mode*/  
  CRYP->CR &= ~CRYP_CR_ALGOMODE;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	f2c5 0306 	movt	r3, #20486	; 0x5006
  CRYP->CR |= CRYP_InitStruct->CRYP_AlgoMode;
 8001ea6:	8842      	ldrh	r2, [r0, #2]
  assert_param(IS_CRYP_ALGOMODE(CRYP_InitStruct->CRYP_AlgoMode));
  assert_param(IS_CRYP_DATATYPE(CRYP_InitStruct->CRYP_DataType));
  assert_param(IS_CRYP_ALGODIR(CRYP_InitStruct->CRYP_AlgoDir));

  /* Select Algorithm mode*/  
  CRYP->CR &= ~CRYP_CR_ALGOMODE;
 8001ea8:	6819      	ldr	r1, [r3, #0]
 8001eaa:	f021 0138 	bic.w	r1, r1, #56	; 0x38
  * @param  CRYP_InitStruct: pointer to a CRYP_InitTypeDef structure that contains
  *         the configuration information for the CRYP peripheral.
  * @retval None
  */
void CRYP_Init(CRYP_InitTypeDef* CRYP_InitStruct)
{
 8001eae:	b410      	push	{r4}
  CRYP->CR &= ~CRYP_CR_ALGOMODE;
  CRYP->CR |= CRYP_InitStruct->CRYP_AlgoMode;

  /* Select dataType */ 
  CRYP->CR &= ~CRYP_CR_DATATYPE;
  CRYP->CR |= CRYP_InitStruct->CRYP_DataType;
 8001eb0:	8884      	ldrh	r4, [r0, #4]
  assert_param(IS_CRYP_ALGOMODE(CRYP_InitStruct->CRYP_AlgoMode));
  assert_param(IS_CRYP_DATATYPE(CRYP_InitStruct->CRYP_DataType));
  assert_param(IS_CRYP_ALGODIR(CRYP_InitStruct->CRYP_AlgoDir));

  /* Select Algorithm mode*/  
  CRYP->CR &= ~CRYP_CR_ALGOMODE;
 8001eb2:	6019      	str	r1, [r3, #0]
  CRYP->CR |= CRYP_InitStruct->CRYP_AlgoMode;
 8001eb4:	6819      	ldr	r1, [r3, #0]
 8001eb6:	4311      	orrs	r1, r2
 8001eb8:	6019      	str	r1, [r3, #0]

  /* Select dataType */ 
  CRYP->CR &= ~CRYP_CR_DATATYPE;
 8001eba:	6819      	ldr	r1, [r3, #0]
 8001ebc:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8001ec0:	6019      	str	r1, [r3, #0]
  CRYP->CR |= CRYP_InitStruct->CRYP_DataType;
 8001ec2:	6819      	ldr	r1, [r3, #0]

  /* select Key size (used only with AES algorithm) */
  if ((CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_ECB) ||
 8001ec4:	2a20      	cmp	r2, #32
 8001ec6:	bf18      	it	ne
 8001ec8:	2a28      	cmpne	r2, #40	; 0x28
  CRYP->CR &= ~CRYP_CR_ALGOMODE;
  CRYP->CR |= CRYP_InitStruct->CRYP_AlgoMode;

  /* Select dataType */ 
  CRYP->CR &= ~CRYP_CR_DATATYPE;
  CRYP->CR |= CRYP_InitStruct->CRYP_DataType;
 8001eca:	ea44 0101 	orr.w	r1, r4, r1
 8001ece:	6019      	str	r1, [r3, #0]

  /* select Key size (used only with AES algorithm) */
  if ((CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_ECB) ||
 8001ed0:	d003      	beq.n	8001eda <CRYP_Init+0x3a>
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_CBC) ||
 8001ed2:	2a30      	cmp	r2, #48	; 0x30
 8001ed4:	d001      	beq.n	8001eda <CRYP_Init+0x3a>
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_CTR) ||
 8001ed6:	2a38      	cmp	r2, #56	; 0x38
 8001ed8:	d10a      	bne.n	8001ef0 <CRYP_Init+0x50>
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_Key))
  {
    assert_param(IS_CRYP_KEYSIZE(CRYP_InitStruct->CRYP_KeySize));
    CRYP->CR &= ~CRYP_CR_KEYSIZE;
 8001eda:	2300      	movs	r3, #0
 8001edc:	f2c5 0306 	movt	r3, #20486	; 0x5006
    CRYP->CR |= CRYP_InitStruct->CRYP_KeySize; /* Key size and value must be 
 8001ee0:	88c1      	ldrh	r1, [r0, #6]
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_CBC) ||
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_CTR) ||
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_Key))
  {
    assert_param(IS_CRYP_KEYSIZE(CRYP_InitStruct->CRYP_KeySize));
    CRYP->CR &= ~CRYP_CR_KEYSIZE;
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001ee8:	601a      	str	r2, [r3, #0]
    CRYP->CR |= CRYP_InitStruct->CRYP_KeySize; /* Key size and value must be 
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	430a      	orrs	r2, r1
 8001eee:	601a      	str	r2, [r3, #0]
                                                  configured once the key has 
                                                  been prepared */
  }

  /* Select data Direction */ 
  CRYP->CR &= ~CRYP_CR_ALGODIR;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	f2c5 0306 	movt	r3, #20486	; 0x5006
  CRYP->CR |= CRYP_InitStruct->CRYP_AlgoDir;
 8001ef6:	8801      	ldrh	r1, [r0, #0]
                                                  configured once the key has 
                                                  been prepared */
  }

  /* Select data Direction */ 
  CRYP->CR &= ~CRYP_CR_ALGODIR;
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	f022 0204 	bic.w	r2, r2, #4
 8001efe:	601a      	str	r2, [r3, #0]
  CRYP->CR |= CRYP_InitStruct->CRYP_AlgoDir;
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	430a      	orrs	r2, r1
 8001f04:	601a      	str	r2, [r3, #0]
}
 8001f06:	bc10      	pop	{r4}
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop

08001f0c <CRYP_StructInit>:
  * @retval None
  */
void CRYP_StructInit(CRYP_InitTypeDef* CRYP_InitStruct)
{
  /* Initialize the CRYP_AlgoDir member */
  CRYP_InitStruct->CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	8003      	strh	r3, [r0, #0]

  /* initialize the CRYP_AlgoMode member */
  CRYP_InitStruct->CRYP_AlgoMode = CRYP_AlgoMode_TDES_ECB;
 8001f10:	8043      	strh	r3, [r0, #2]

  /* initialize the CRYP_DataType member */
  CRYP_InitStruct->CRYP_DataType = CRYP_DataType_32b;
 8001f12:	8083      	strh	r3, [r0, #4]
  
  /* Initialize the CRYP_KeySize member */
  CRYP_InitStruct->CRYP_KeySize = CRYP_KeySize_128b;
 8001f14:	80c3      	strh	r3, [r0, #6]
}
 8001f16:	4770      	bx	lr

08001f18 <CRYP_KeyInit>:
  * @retval None
  */
void CRYP_KeyInit(CRYP_KeyInitTypeDef* CRYP_KeyInitStruct)
{
  /* Key Initialisation */
  CRYP->K0LR = CRYP_KeyInitStruct->CRYP_Key0Left;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	6802      	ldr	r2, [r0, #0]
 8001f1c:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8001f20:	621a      	str	r2, [r3, #32]
  CRYP->K0RR = CRYP_KeyInitStruct->CRYP_Key0Right;
 8001f22:	6842      	ldr	r2, [r0, #4]
 8001f24:	625a      	str	r2, [r3, #36]	; 0x24
  CRYP->K1LR = CRYP_KeyInitStruct->CRYP_Key1Left;
 8001f26:	6882      	ldr	r2, [r0, #8]
 8001f28:	629a      	str	r2, [r3, #40]	; 0x28
  CRYP->K1RR = CRYP_KeyInitStruct->CRYP_Key1Right;
 8001f2a:	68c2      	ldr	r2, [r0, #12]
 8001f2c:	62da      	str	r2, [r3, #44]	; 0x2c
  CRYP->K2LR = CRYP_KeyInitStruct->CRYP_Key2Left;
 8001f2e:	6902      	ldr	r2, [r0, #16]
 8001f30:	631a      	str	r2, [r3, #48]	; 0x30
  CRYP->K2RR = CRYP_KeyInitStruct->CRYP_Key2Right;
 8001f32:	6942      	ldr	r2, [r0, #20]
 8001f34:	635a      	str	r2, [r3, #52]	; 0x34
  CRYP->K3LR = CRYP_KeyInitStruct->CRYP_Key3Left;
 8001f36:	6982      	ldr	r2, [r0, #24]
 8001f38:	639a      	str	r2, [r3, #56]	; 0x38
  CRYP->K3RR = CRYP_KeyInitStruct->CRYP_Key3Right;
 8001f3a:	69c2      	ldr	r2, [r0, #28]
 8001f3c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001f3e:	4770      	bx	lr

08001f40 <CRYP_KeyStructInit>:
  *         which will be initialized.
  * @retval None
  */
void CRYP_KeyStructInit(CRYP_KeyInitTypeDef* CRYP_KeyInitStruct)
{
  CRYP_KeyInitStruct->CRYP_Key0Left  = 0;
 8001f40:	2300      	movs	r3, #0
 8001f42:	6003      	str	r3, [r0, #0]
  CRYP_KeyInitStruct->CRYP_Key0Right = 0;
 8001f44:	6043      	str	r3, [r0, #4]
  CRYP_KeyInitStruct->CRYP_Key1Left  = 0;
 8001f46:	6083      	str	r3, [r0, #8]
  CRYP_KeyInitStruct->CRYP_Key1Right = 0;
 8001f48:	60c3      	str	r3, [r0, #12]
  CRYP_KeyInitStruct->CRYP_Key2Left  = 0;
 8001f4a:	6103      	str	r3, [r0, #16]
  CRYP_KeyInitStruct->CRYP_Key2Right = 0;
 8001f4c:	6143      	str	r3, [r0, #20]
  CRYP_KeyInitStruct->CRYP_Key3Left  = 0;
 8001f4e:	6183      	str	r3, [r0, #24]
  CRYP_KeyInitStruct->CRYP_Key3Right = 0;
 8001f50:	61c3      	str	r3, [r0, #28]
}
 8001f52:	4770      	bx	lr

08001f54 <CRYP_IVInit>:
  *         the configuration information for the CRYP Initialization Vectors(IV).
  * @retval None
  */
void CRYP_IVInit(CRYP_IVInitTypeDef* CRYP_IVInitStruct)
{
  CRYP->IV0LR = CRYP_IVInitStruct->CRYP_IV0Left;
 8001f54:	2300      	movs	r3, #0
 8001f56:	6802      	ldr	r2, [r0, #0]
 8001f58:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8001f5c:	641a      	str	r2, [r3, #64]	; 0x40
  CRYP->IV0RR = CRYP_IVInitStruct->CRYP_IV0Right;
 8001f5e:	6842      	ldr	r2, [r0, #4]
 8001f60:	645a      	str	r2, [r3, #68]	; 0x44
  CRYP->IV1LR = CRYP_IVInitStruct->CRYP_IV1Left;
 8001f62:	6882      	ldr	r2, [r0, #8]
 8001f64:	649a      	str	r2, [r3, #72]	; 0x48
  CRYP->IV1RR = CRYP_IVInitStruct->CRYP_IV1Right;
 8001f66:	68c2      	ldr	r2, [r0, #12]
 8001f68:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001f6a:	4770      	bx	lr

08001f6c <CRYP_IVStructInit>:
  *         Vectors(IV) structure which will be initialized.
  * @retval None
  */
void CRYP_IVStructInit(CRYP_IVInitTypeDef* CRYP_IVInitStruct)
{
  CRYP_IVInitStruct->CRYP_IV0Left  = 0;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	6003      	str	r3, [r0, #0]
  CRYP_IVInitStruct->CRYP_IV0Right = 0;
 8001f70:	6043      	str	r3, [r0, #4]
  CRYP_IVInitStruct->CRYP_IV1Left  = 0;
 8001f72:	6083      	str	r3, [r0, #8]
  CRYP_IVInitStruct->CRYP_IV1Right = 0;
 8001f74:	60c3      	str	r3, [r0, #12]
}
 8001f76:	4770      	bx	lr

08001f78 <CRYP_FIFOFlush>:
  * @retval None
  */
void CRYP_FIFOFlush(void)
{
  /* Reset the read and write pointers of the FIFOs */
  CRYP->CR |= CRYP_CR_FFLUSH;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f84:	601a      	str	r2, [r3, #0]
}
 8001f86:	4770      	bx	lr

08001f88 <CRYP_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the Cryptographic processor */
    CRYP->CR |= CRYP_CR_CRYPEN;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8001f8e:	681a      	ldr	r2, [r3, #0]
void CRYP_Cmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001f90:	b918      	cbnz	r0, 8001f9a <CRYP_Cmd+0x12>
    CRYP->CR |= CRYP_CR_CRYPEN;
  }
  else
  {
    /* Disable the Cryptographic processor */
    CRYP->CR &= ~CRYP_CR_CRYPEN;
 8001f92:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f96:	601a      	str	r2, [r3, #0]
 8001f98:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the Cryptographic processor */
    CRYP->CR |= CRYP_CR_CRYPEN;
 8001f9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f9e:	601a      	str	r2, [r3, #0]
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop

08001fa4 <CRYP_DataIn>:
  * @param  Data: data to write in Data Input register
  * @retval None
  */
void CRYP_DataIn(uint32_t Data)
{
  CRYP->DR = Data;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8001faa:	6098      	str	r0, [r3, #8]
}
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop

08001fb0 <CRYP_DataOut>:
  * @param  None
  * @retval Last data entered into the output FIFO.
  */
uint32_t CRYP_DataOut(void)
{
  return CRYP->DOUT;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8001fb6:	68d8      	ldr	r0, [r3, #12]
}
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop

08001fbc <CRYP_SaveContext>:
  *         contains the configuration information for the CRYP Keys.  
  * @retval None
  */
ErrorStatus CRYP_SaveContext(CRYP_Context* CRYP_ContextSave,
                             CRYP_KeyInitTypeDef* CRYP_KeyInitStruct)
{
 8001fbc:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
  __IO uint32_t timeout = 0;
  uint32_t ckeckmask = 0, bitstatus;    
  ErrorStatus status = ERROR;

  /* Stop DMA transfers on the IN FIFO by clearing the DIEN bit in the CRYP_DMACR */
  CRYP->DMACR &= ~(uint32_t)CRYP_DMACR_DIEN;
 8001fc0:	2300      	movs	r3, #0
  *         contains the configuration information for the CRYP Keys.  
  * @retval None
  */
ErrorStatus CRYP_SaveContext(CRYP_Context* CRYP_ContextSave,
                             CRYP_KeyInitTypeDef* CRYP_KeyInitStruct)
{
 8001fc2:	b083      	sub	sp, #12
  __IO uint32_t timeout = 0;
  uint32_t ckeckmask = 0, bitstatus;    
  ErrorStatus status = ERROR;

  /* Stop DMA transfers on the IN FIFO by clearing the DIEN bit in the CRYP_DMACR */
  CRYP->DMACR &= ~(uint32_t)CRYP_DMACR_DIEN;
 8001fc4:	f2c5 0306 	movt	r3, #20486	; 0x5006
  * @retval None
  */
ErrorStatus CRYP_SaveContext(CRYP_Context* CRYP_ContextSave,
                             CRYP_KeyInitTypeDef* CRYP_KeyInitStruct)
{
  __IO uint32_t timeout = 0;
 8001fc8:	2200      	movs	r2, #0
 8001fca:	9201      	str	r2, [sp, #4]
  uint32_t ckeckmask = 0, bitstatus;    
  ErrorStatus status = ERROR;

  /* Stop DMA transfers on the IN FIFO by clearing the DIEN bit in the CRYP_DMACR */
  CRYP->DMACR &= ~(uint32_t)CRYP_DMACR_DIEN;
 8001fcc:	691a      	ldr	r2, [r3, #16]
 8001fce:	f022 0201 	bic.w	r2, r2, #1
 8001fd2:	611a      	str	r2, [r3, #16]
    
  /* Wait until both the IN and OUT FIFOs are empty  
    (IFEM=1 and OFNE=0 in the CRYP_SR register) and the 
     BUSY bit is cleared. */

  if ((CRYP->CR & (uint32_t)(CRYP_CR_ALGOMODE_TDES_ECB | CRYP_CR_ALGOMODE_TDES_CBC)) != (uint32_t)0 )/* TDES */
 8001fd4:	681a      	ldr	r2, [r3, #0]
  { 
    ckeckmask =  CRYP_SR_IFEM | CRYP_SR_BUSY ;
 8001fd6:	f012 0f08 	tst.w	r2, #8
 8001fda:	bf0c      	ite	eq
 8001fdc:	2515      	moveq	r5, #21
 8001fde:	2511      	movne	r5, #17
  do 
  {
    bitstatus = CRYP->SR & ckeckmask;
    timeout++;
  }
  while ((timeout != MAX_TIMEOUT) && (bitstatus != CRYP_SR_IFEM));
 8001fe0:	f64f 76ff 	movw	r6, #65535	; 0xffff
    ckeckmask =  CRYP_SR_IFEM | CRYP_SR_BUSY | CRYP_SR_OFNE;
  }           
   
  do 
  {
    bitstatus = CRYP->SR & ckeckmask;
 8001fe4:	685c      	ldr	r4, [r3, #4]
    timeout++;
 8001fe6:	9a01      	ldr	r2, [sp, #4]
 8001fe8:	3201      	adds	r2, #1
 8001fea:	9201      	str	r2, [sp, #4]
  }
  while ((timeout != MAX_TIMEOUT) && (bitstatus != CRYP_SR_IFEM));
 8001fec:	9a01      	ldr	r2, [sp, #4]
 8001fee:	42b2      	cmp	r2, r6
    ckeckmask =  CRYP_SR_IFEM | CRYP_SR_BUSY | CRYP_SR_OFNE;
  }           
   
  do 
  {
    bitstatus = CRYP->SR & ckeckmask;
 8001ff0:	ea05 0404 	and.w	r4, r5, r4
    timeout++;
  }
  while ((timeout != MAX_TIMEOUT) && (bitstatus != CRYP_SR_IFEM));
 8001ff4:	d001      	beq.n	8001ffa <CRYP_SaveContext+0x3e>
 8001ff6:	2c01      	cmp	r4, #1
 8001ff8:	d1f4      	bne.n	8001fe4 <CRYP_SaveContext+0x28>
     
  if ((CRYP->SR & ckeckmask) != CRYP_SR_IFEM)
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8002000:	685a      	ldr	r2, [r3, #4]
 8002002:	4015      	ands	r5, r2
 8002004:	2d01      	cmp	r5, #1
 8002006:	d004      	beq.n	8002012 <CRYP_SaveContext+0x56>
  {
    status = ERROR;
 8002008:	2000      	movs	r0, #0
     
    status = SUCCESS;
  }

   return status;
}
 800200a:	b003      	add	sp, #12
 800200c:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 8002010:	4770      	bx	lr
  {      
    /* Stop DMA transfers on the OUT FIFO by 
       - writing the DOEN bit to 0 in the CRYP_DMACR register 
       - and clear the CRYPEN bit. */

    CRYP->DMACR &= ~(uint32_t)CRYP_DMACR_DOEN;
 8002012:	691a      	ldr	r2, [r3, #16]
 8002014:	f022 0202 	bic.w	r2, r2, #2
 8002018:	611a      	str	r2, [r3, #16]
    CRYP->CR &= ~(uint32_t)CRYP_CR_CRYPEN;
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002020:	601a      	str	r2, [r3, #0]

    /* Save the current configuration (bits [9:2] in the CRYP_CR register) */
    CRYP_ContextSave->CR_bits9to2  = CRYP->CR & (CRYP_CR_KEYSIZE  | 
 8002022:	f8d3 a000 	ldr.w	sl, [r3]
    CRYP_ContextSave->CRYP_IV0RR = CRYP->IV0RR;
    CRYP_ContextSave->CRYP_IV1LR = CRYP->IV1LR;
    CRYP_ContextSave->CRYP_IV1RR = CRYP->IV1RR;

    /* save The key value */
    CRYP_ContextSave->CRYP_K0LR = CRYP_KeyInitStruct->CRYP_Key0Left; 
 8002026:	f8d1 9000 	ldr.w	r9, [r1]
    CRYP_ContextSave->CRYP_K0RR = CRYP_KeyInitStruct->CRYP_Key0Right; 
 800202a:	f8d1 8004 	ldr.w	r8, [r1, #4]
    CRYP_ContextSave->CRYP_K1LR = CRYP_KeyInitStruct->CRYP_Key1Left; 
 800202e:	f8d1 c008 	ldr.w	ip, [r1, #8]
    CRYP_ContextSave->CRYP_K1RR = CRYP_KeyInitStruct->CRYP_Key1Right; 
 8002032:	68cf      	ldr	r7, [r1, #12]
    CRYP_ContextSave->CRYP_K2LR = CRYP_KeyInitStruct->CRYP_Key2Left; 
 8002034:	690e      	ldr	r6, [r1, #16]
    CRYP_ContextSave->CRYP_K2RR = CRYP_KeyInitStruct->CRYP_Key2Right; 
 8002036:	694c      	ldr	r4, [r1, #20]
    CRYP_ContextSave->CRYP_K3LR = CRYP_KeyInitStruct->CRYP_Key3Left; 
 8002038:	698a      	ldr	r2, [r1, #24]
    CRYP_ContextSave->CRYP_K3RR = CRYP_KeyInitStruct->CRYP_Key3Right; 
 800203a:	69c9      	ldr	r1, [r1, #28]

    CRYP->DMACR &= ~(uint32_t)CRYP_DMACR_DOEN;
    CRYP->CR &= ~(uint32_t)CRYP_CR_CRYPEN;

    /* Save the current configuration (bits [9:2] in the CRYP_CR register) */
    CRYP_ContextSave->CR_bits9to2  = CRYP->CR & (CRYP_CR_KEYSIZE  | 
 800203c:	f40a 7a7f 	and.w	sl, sl, #1020	; 0x3fc
 8002040:	f8c0 a000 	str.w	sl, [r0]
                                                 CRYP_CR_DATATYPE | 
                                                 CRYP_CR_ALGOMODE |
                                                 CRYP_CR_ALGODIR); 

    /* and, if not in ECB mode, the initialization vectors. */
    CRYP_ContextSave->CRYP_IV0LR = CRYP->IV0LR;
 8002044:	f8d3 a040 	ldr.w	sl, [r3, #64]	; 0x40
 8002048:	f8c0 a004 	str.w	sl, [r0, #4]
    CRYP_ContextSave->CRYP_IV0RR = CRYP->IV0RR;
 800204c:	f8d3 a044 	ldr.w	sl, [r3, #68]	; 0x44
 8002050:	f8c0 a008 	str.w	sl, [r0, #8]
    CRYP_ContextSave->CRYP_IV1LR = CRYP->IV1LR;
 8002054:	f8d3 a048 	ldr.w	sl, [r3, #72]	; 0x48
 8002058:	f8c0 a00c 	str.w	sl, [r0, #12]
    CRYP_ContextSave->CRYP_IV1RR = CRYP->IV1RR;
 800205c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c

    /* save The key value */
    CRYP_ContextSave->CRYP_K0LR = CRYP_KeyInitStruct->CRYP_Key0Left; 
 800205e:	f8c0 9014 	str.w	r9, [r0, #20]

    /* and, if not in ECB mode, the initialization vectors. */
    CRYP_ContextSave->CRYP_IV0LR = CRYP->IV0LR;
    CRYP_ContextSave->CRYP_IV0RR = CRYP->IV0RR;
    CRYP_ContextSave->CRYP_IV1LR = CRYP->IV1LR;
    CRYP_ContextSave->CRYP_IV1RR = CRYP->IV1RR;
 8002062:	6103      	str	r3, [r0, #16]

    /* save The key value */
    CRYP_ContextSave->CRYP_K0LR = CRYP_KeyInitStruct->CRYP_Key0Left; 
    CRYP_ContextSave->CRYP_K0RR = CRYP_KeyInitStruct->CRYP_Key0Right; 
 8002064:	f8c0 8018 	str.w	r8, [r0, #24]
    CRYP_ContextSave->CRYP_K1LR = CRYP_KeyInitStruct->CRYP_Key1Left; 
 8002068:	f8c0 c01c 	str.w	ip, [r0, #28]
    CRYP_ContextSave->CRYP_K1RR = CRYP_KeyInitStruct->CRYP_Key1Right; 
 800206c:	6207      	str	r7, [r0, #32]
    CRYP_ContextSave->CRYP_K2LR = CRYP_KeyInitStruct->CRYP_Key2Left; 
 800206e:	6246      	str	r6, [r0, #36]	; 0x24
    CRYP_ContextSave->CRYP_K2RR = CRYP_KeyInitStruct->CRYP_Key2Right; 
 8002070:	6284      	str	r4, [r0, #40]	; 0x28
    CRYP_ContextSave->CRYP_K3LR = CRYP_KeyInitStruct->CRYP_Key3Left; 
 8002072:	62c2      	str	r2, [r0, #44]	; 0x2c
    CRYP_ContextSave->CRYP_K3RR = CRYP_KeyInitStruct->CRYP_Key3Right; 
 8002074:	6301      	str	r1, [r0, #48]	; 0x30

   /* When needed, save the DMA status (pointers for IN and OUT messages, 
      number of remaining bytes, etc.) */
     
    status = SUCCESS;
 8002076:	4628      	mov	r0, r5
 8002078:	e7c7      	b.n	800200a <CRYP_SaveContext+0x4e>
 800207a:	bf00      	nop

0800207c <CRYP_RestoreContext>:
  */
void CRYP_RestoreContext(CRYP_Context* CRYP_ContextRestore)  
{

  /* Configure the processor with the saved configuration */
  CRYP->CR = CRYP_ContextRestore->CR_bits9to2;
 800207c:	2300      	movs	r3, #0
 800207e:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8002082:	6802      	ldr	r2, [r0, #0]
 8002084:	601a      	str	r2, [r3, #0]

  /* restore The key value */
  CRYP->K0LR = CRYP_ContextRestore->CRYP_K0LR; 
 8002086:	6942      	ldr	r2, [r0, #20]
 8002088:	621a      	str	r2, [r3, #32]
  CRYP->K0RR = CRYP_ContextRestore->CRYP_K0RR;
 800208a:	6982      	ldr	r2, [r0, #24]
 800208c:	625a      	str	r2, [r3, #36]	; 0x24
  CRYP->K1LR = CRYP_ContextRestore->CRYP_K1LR;
 800208e:	69c2      	ldr	r2, [r0, #28]
 8002090:	629a      	str	r2, [r3, #40]	; 0x28
  CRYP->K1RR = CRYP_ContextRestore->CRYP_K1RR;
 8002092:	6a02      	ldr	r2, [r0, #32]
 8002094:	62da      	str	r2, [r3, #44]	; 0x2c
  CRYP->K2LR = CRYP_ContextRestore->CRYP_K2LR;
 8002096:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8002098:	631a      	str	r2, [r3, #48]	; 0x30
  CRYP->K2RR = CRYP_ContextRestore->CRYP_K2RR;
 800209a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800209c:	635a      	str	r2, [r3, #52]	; 0x34
  CRYP->K3LR = CRYP_ContextRestore->CRYP_K3LR;
 800209e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80020a0:	639a      	str	r2, [r3, #56]	; 0x38
  CRYP->K3RR = CRYP_ContextRestore->CRYP_K3RR;
 80020a2:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80020a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* and the initialization vectors. */
  CRYP->IV0LR = CRYP_ContextRestore->CRYP_IV0LR;
 80020a6:	6842      	ldr	r2, [r0, #4]
 80020a8:	641a      	str	r2, [r3, #64]	; 0x40
  CRYP->IV0RR = CRYP_ContextRestore->CRYP_IV0RR;
 80020aa:	6882      	ldr	r2, [r0, #8]
 80020ac:	645a      	str	r2, [r3, #68]	; 0x44
  CRYP->IV1LR = CRYP_ContextRestore->CRYP_IV1LR;
 80020ae:	68c2      	ldr	r2, [r0, #12]
 80020b0:	649a      	str	r2, [r3, #72]	; 0x48
  CRYP->IV1RR = CRYP_ContextRestore->CRYP_IV1RR;
 80020b2:	6902      	ldr	r2, [r0, #16]
 80020b4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the cryptographic processor */
  CRYP->CR |= CRYP_CR_CRYPEN;
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020bc:	601a      	str	r2, [r3, #0]
}
 80020be:	4770      	bx	lr

080020c0 <CRYP_DMACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected CRYP DMA request */
    CRYP->DMACR |= CRYP_DMAReq;
 80020c0:	2300      	movs	r3, #0
 80020c2:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80020c6:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_CRYP_DMAREQ(CRYP_DMAReq));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80020c8:	b929      	cbnz	r1, 80020d6 <CRYP_DMACmd+0x16>
    CRYP->DMACR |= CRYP_DMAReq;
  }
  else
  {
    /* Disable the selected CRYP DMA request */
    CRYP->DMACR &= (uint8_t)~CRYP_DMAReq;
 80020ca:	ea22 0000 	bic.w	r0, r2, r0
 80020ce:	f000 00ff 	and.w	r0, r0, #255	; 0xff
 80020d2:	6118      	str	r0, [r3, #16]
 80020d4:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected CRYP DMA request */
    CRYP->DMACR |= CRYP_DMAReq;
 80020d6:	4310      	orrs	r0, r2
 80020d8:	6118      	str	r0, [r3, #16]
 80020da:	4770      	bx	lr

080020dc <CRYP_ITConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected CRYP interrupt */
    CRYP->IMSCR |= CRYP_IT;
 80020dc:	2300      	movs	r3, #0
 80020de:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80020e2:	695a      	ldr	r2, [r3, #20]
{
  /* Check the parameters */
  assert_param(IS_CRYP_CONFIG_IT(CRYP_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80020e4:	b929      	cbnz	r1, 80020f2 <CRYP_ITConfig+0x16>
    CRYP->IMSCR |= CRYP_IT;
  }
  else
  {
    /* Disable the selected CRYP interrupt */
    CRYP->IMSCR &= (uint8_t)~CRYP_IT;
 80020e6:	ea22 0000 	bic.w	r0, r2, r0
 80020ea:	f000 00ff 	and.w	r0, r0, #255	; 0xff
 80020ee:	6158      	str	r0, [r3, #20]
 80020f0:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected CRYP interrupt */
    CRYP->IMSCR |= CRYP_IT;
 80020f2:	4310      	orrs	r0, r2
 80020f4:	6158      	str	r0, [r3, #20]
 80020f6:	4770      	bx	lr

080020f8 <CRYP_GetITStatus>:
  ITStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_CRYP_GET_IT(CRYP_IT));

  /* Check the status of the specified CRYP interrupt */
  if ((CRYP->MISR &  CRYP_IT) != (uint8_t)RESET)
 80020f8:	2300      	movs	r3, #0
 80020fa:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80020fe:	69db      	ldr	r3, [r3, #28]
  {
    /* CRYP_IT is set */
    bitstatus = SET;
 8002100:	4218      	tst	r0, r3
    /* CRYP_IT is reset */
    bitstatus = RESET;
  }
  /* Return the CRYP_IT status */
  return bitstatus;
}
 8002102:	bf0c      	ite	eq
 8002104:	2000      	moveq	r0, #0
 8002106:	2001      	movne	r0, #1
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop

0800210c <CRYP_GetFlagStatus>:
  assert_param(IS_CRYP_GET_FLAG(CRYP_FLAG));

  /* check if the FLAG is in RISR register */
  if ((CRYP_FLAG & FLAG_MASK) != 0x00) 
  {
    tempreg = CRYP->RISR;
 800210c:	2300      	movs	r3, #0
 800210e:	f2c5 0306 	movt	r3, #20486	; 0x5006

  /* Check the parameters */
  assert_param(IS_CRYP_GET_FLAG(CRYP_FLAG));

  /* check if the FLAG is in RISR register */
  if ((CRYP_FLAG & FLAG_MASK) != 0x00) 
 8002112:	0682      	lsls	r2, r0, #26
  {
    tempreg = CRYP->RISR;
 8002114:	bf4c      	ite	mi
 8002116:	699b      	ldrmi	r3, [r3, #24]
  }
  else  /* The FLAG is in SR register */
  {
    tempreg = CRYP->SR;
 8002118:	685b      	ldrpl	r3, [r3, #4]

  /* Check the status of the specified CRYP flag */
  if ((tempreg & CRYP_FLAG ) != (uint8_t)RESET)
  {
    /* CRYP_FLAG is set */
    bitstatus = SET;
 800211a:	4203      	tst	r3, r0
    bitstatus = RESET;
  }

  /* Return the CRYP_FLAG status */
  return  bitstatus;
}
 800211c:	bf0c      	ite	eq
 800211e:	2000      	moveq	r0, #0
 8002120:	2001      	movne	r0, #1
 8002122:	4770      	bx	lr

08002124 <CRYP_AES_ECB>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_AES_ECB(uint8_t Mode, uint8_t* Key, uint16_t Keysize,
                         uint8_t* Input, uint32_t Ilength, uint8_t* Output)
{
 8002124:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002128:	b08d      	sub	sp, #52	; 0x34
 800212a:	4615      	mov	r5, r2
  CRYP_InitTypeDef AES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
  __IO uint32_t counter = 0;
 800212c:	2600      	movs	r6, #0
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_AES_ECB(uint8_t Mode, uint8_t* Key, uint16_t Keysize,
                         uint8_t* Input, uint32_t Ilength, uint8_t* Output)
{
 800212e:	4604      	mov	r4, r0
  uint32_t inputaddr  = (uint32_t)Input;
  uint32_t outputaddr = (uint32_t)Output;
  uint32_t i = 0;

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 8002130:	a801      	add	r0, sp, #4
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_AES_ECB(uint8_t Mode, uint8_t* Key, uint16_t Keysize,
                         uint8_t* Input, uint32_t Ilength, uint8_t* Output)
{
 8002132:	460f      	mov	r7, r1
 8002134:	4698      	mov	r8, r3
 8002136:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
  CRYP_InitTypeDef AES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
  __IO uint32_t counter = 0;
 800213a:	960b      	str	r6, [sp, #44]	; 0x2c
  uint32_t inputaddr  = (uint32_t)Input;
  uint32_t outputaddr = (uint32_t)Output;
  uint32_t i = 0;

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 800213c:	f7ff ff00 	bl	8001f40 <CRYP_KeyStructInit>

  switch(Keysize)
 8002140:	2dc0      	cmp	r5, #192	; 0xc0
 8002142:	f000 80c4 	beq.w	80022ce <CRYP_AES_ECB+0x1aa>
 8002146:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800214a:	f000 80a3 	beq.w	8002294 <CRYP_AES_ECB+0x170>
 800214e:	2d80      	cmp	r5, #128	; 0x80
 8002150:	f000 8091 	beq.w	8002276 <CRYP_AES_ECB+0x152>
    default:
    break;
  }

  /*------------------ AES Decryption ------------------*/
  if(Mode == MODE_DECRYPT) /* AES decryption */
 8002154:	bba4      	cbnz	r4, 80021c0 <CRYP_AES_ECB+0x9c>
  {
    /* Flush IN/OUT FIFOs */
    CRYP_FIFOFlush();
 8002156:	f7ff ff0f 	bl	8001f78 <CRYP_FIFOFlush>

    /* Crypto Init for Key preparation for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
    AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_Key;
    AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_32b;
    CRYP_Init(&AES_CRYP_InitStructure);
 800215a:	ad09      	add	r5, sp, #36	; 0x24
  {
    /* Flush IN/OUT FIFOs */
    CRYP_FIFOFlush();

    /* Crypto Init for Key preparation for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 800215c:	2304      	movs	r3, #4
    AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_Key;
    AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_32b;
    CRYP_Init(&AES_CRYP_InitStructure);
 800215e:	4628      	mov	r0, r5
  {
    /* Flush IN/OUT FIFOs */
    CRYP_FIFOFlush();

    /* Crypto Init for Key preparation for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 8002160:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_Key;
 8002164:	2338      	movs	r3, #56	; 0x38
 8002166:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_32b;
 800216a:	f8ad 4028 	strh.w	r4, [sp, #40]	; 0x28
    CRYP_Init(&AES_CRYP_InitStructure);
 800216e:	f7ff fe97 	bl	8001ea0 <CRYP_Init>

    /* Key Initialisation */
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 8002172:	a801      	add	r0, sp, #4
 8002174:	f7ff fed0 	bl	8001f18 <CRYP_KeyInit>

    /* Enable Crypto processor */
    CRYP_Cmd(ENABLE);
 8002178:	2001      	movs	r0, #1
 800217a:	f7ff ff05 	bl	8001f88 <CRYP_Cmd>
 800217e:	e002      	b.n	8002186 <CRYP_AES_ECB+0x62>
    /* wait until the Busy flag is RESET */
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
      counter++;
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8002180:	2800      	cmp	r0, #0
 8002182:	f000 80bb 	beq.w	80022fc <CRYP_AES_ECB+0x1d8>
    CRYP_Cmd(ENABLE);

    /* wait until the Busy flag is RESET */
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8002186:	2010      	movs	r0, #16
 8002188:	f7ff ffc0 	bl	800210c <CRYP_GetFlagStatus>
      counter++;
 800218c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800218e:	3301      	adds	r3, #1
 8002190:	930b      	str	r3, [sp, #44]	; 0x2c
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8002192:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002194:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002198:	d1f2      	bne.n	8002180 <CRYP_AES_ECB+0x5c>

    if (busystatus != RESET)
 800219a:	2800      	cmp	r0, #0
 800219c:	f000 80ae 	beq.w	80022fc <CRYP_AES_ECB+0x1d8>

    /* Crypto Init for Encryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
  }

  AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_ECB;
 80021a0:	2320      	movs	r3, #32
  AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
  CRYP_Init(&AES_CRYP_InitStructure);
 80021a2:	4628      	mov	r0, r5

    /* Crypto Init for Encryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
  }

  AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_ECB;
 80021a4:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
  AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 80021a8:	2380      	movs	r3, #128	; 0x80
 80021aa:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
  CRYP_Init(&AES_CRYP_InitStructure);
 80021ae:	f7ff fe77 	bl	8001ea0 <CRYP_Init>

  /* Flush IN/OUT FIFOs */
  CRYP_FIFOFlush();
 80021b2:	f7ff fee1 	bl	8001f78 <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 80021b6:	2001      	movs	r0, #1
 80021b8:	f7ff fee6 	bl	8001f88 <CRYP_Cmd>
      counter++;
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));

    if (busystatus != RESET)
   {
       status = ERROR;
 80021bc:	2400      	movs	r4, #0
 80021be:	e03b      	b.n	8002238 <CRYP_AES_ECB+0x114>
  }
  /*------------------ AES Encryption ------------------*/
  else /* AES encryption */
  {

    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 80021c0:	a801      	add	r0, sp, #4

    /* Crypto Init for Encryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 80021c2:	ad0c      	add	r5, sp, #48	; 0x30
  }
  /*------------------ AES Encryption ------------------*/
  else /* AES encryption */
  {

    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 80021c4:	f7ff fea8 	bl	8001f18 <CRYP_KeyInit>

    /* Crypto Init for Encryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 80021c8:	2300      	movs	r3, #0
 80021ca:	f825 3d0c 	strh.w	r3, [r5, #-12]!
  }

  AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_ECB;
 80021ce:	2320      	movs	r3, #32
  AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
  CRYP_Init(&AES_CRYP_InitStructure);
 80021d0:	4628      	mov	r0, r5

    /* Crypto Init for Encryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
  }

  AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_ECB;
 80021d2:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
  AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 80021d6:	2380      	movs	r3, #128	; 0x80
 80021d8:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
  CRYP_Init(&AES_CRYP_InitStructure);
 80021dc:	f7ff fe60 	bl	8001ea0 <CRYP_Init>

  /* Flush IN/OUT FIFOs */
  CRYP_FIFOFlush();
 80021e0:	f7ff feca 	bl	8001f78 <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 80021e4:	2001      	movs	r0, #1
 80021e6:	f7ff fecf 	bl	8001f88 <CRYP_Cmd>

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 80021ea:	f1b9 0f00 	cmp.w	r9, #0
 80021ee:	d040      	beq.n	8002272 <CRYP_AES_ECB+0x14e>
  CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
  __IO uint32_t counter = 0;
  uint32_t busystatus = 0;
  ErrorStatus status = SUCCESS;
  uint32_t keyaddr    = (uint32_t)Key;
  uint32_t inputaddr  = (uint32_t)Input;
 80021f0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80021f2:	f108 0410 	add.w	r4, r8, #16
 80021f6:	3510      	adds	r5, #16
    inputaddr+=4;
    CRYP_DataIn(*(uint32_t*)(inputaddr));
    inputaddr+=4;

    /* Wait until the complete message has been processed */
    counter = 0;
 80021f8:	2600      	movs	r6, #0

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
  {

    /* Write the Input block in the IN FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80021fa:	f854 0c10 	ldr.w	r0, [r4, #-16]
 80021fe:	f7ff fed1 	bl	8001fa4 <CRYP_DataIn>
    inputaddr+=4;
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8002202:	f854 0c0c 	ldr.w	r0, [r4, #-12]
 8002206:	f7ff fecd 	bl	8001fa4 <CRYP_DataIn>
    inputaddr+=4;
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 800220a:	f854 0c08 	ldr.w	r0, [r4, #-8]
 800220e:	f7ff fec9 	bl	8001fa4 <CRYP_DataIn>
    inputaddr+=4;
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8002212:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8002216:	f7ff fec5 	bl	8001fa4 <CRYP_DataIn>
    inputaddr+=4;

    /* Wait until the complete message has been processed */
    counter = 0;
 800221a:	960b      	str	r6, [sp, #44]	; 0x2c
 800221c:	e000      	b.n	8002220 <CRYP_AES_ECB+0xfc>
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
      counter++;
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 800221e:	b190      	cbz	r0, 8002246 <CRYP_AES_ECB+0x122>

    /* Wait until the complete message has been processed */
    counter = 0;
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8002220:	2010      	movs	r0, #16
 8002222:	f7ff ff73 	bl	800210c <CRYP_GetFlagStatus>
      counter++;
 8002226:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002228:	3301      	adds	r3, #1
 800222a:	930b      	str	r3, [sp, #44]	; 0x2c
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 800222c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800222e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002232:	d1f4      	bne.n	800221e <CRYP_AES_ECB+0xfa>

    if (busystatus != RESET)
 8002234:	b138      	cbz	r0, 8002246 <CRYP_AES_ECB+0x122>
   {
       status = ERROR;
 8002236:	2400      	movs	r4, #0
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 8002238:	2000      	movs	r0, #0
 800223a:	f7ff fea5 	bl	8001f88 <CRYP_Cmd>

  return status; 
}
 800223e:	4620      	mov	r0, r4
 8002240:	b00d      	add	sp, #52	; 0x34
 8002242:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8002246:	f7ff feb3 	bl	8001fb0 <CRYP_DataOut>
 800224a:	f845 0c10 	str.w	r0, [r5, #-16]
      outputaddr+=4;
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 800224e:	f7ff feaf 	bl	8001fb0 <CRYP_DataOut>
 8002252:	f845 0c0c 	str.w	r0, [r5, #-12]
      outputaddr+=4;
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8002256:	f7ff feab 	bl	8001fb0 <CRYP_DataOut>
 800225a:	f845 0c08 	str.w	r0, [r5, #-8]
      outputaddr+=4;
      *(uint32_t*)(outputaddr) = CRYP_DataOut(); 
 800225e:	f7ff fea7 	bl	8001fb0 <CRYP_DataOut>
 8002262:	ebc8 0304 	rsb	r3, r8, r4
 8002266:	f845 0c04 	str.w	r0, [r5, #-4]
 800226a:	3410      	adds	r4, #16
 800226c:	3510      	adds	r5, #16
  CRYP_FIFOFlush();

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 800226e:	454b      	cmp	r3, r9
 8002270:	d3c3      	bcc.n	80021fa <CRYP_AES_ECB+0xd6>
 8002272:	2401      	movs	r4, #1
 8002274:	e7e0      	b.n	8002238 <CRYP_AES_ECB+0x114>
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);

  switch(Keysize)
  {
    case 128:
    AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
 8002276:	f8ad 602a 	strh.w	r6, [sp, #42]	; 0x2a
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	ba1b      	rev	r3, r3
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 800227e:	9305      	str	r3, [sp, #20]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8002284:	9306      	str	r3, [sp, #24]
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 800228a:	9307      	str	r3, [sp, #28]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8002290:	9308      	str	r3, [sp, #32]
    break;
 8002292:	e75f      	b.n	8002154 <CRYP_AES_ECB+0x30>
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
    break;
    case 256:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
 8002294:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002298:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	ba1b      	rev	r3, r3
    AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
 80022a0:	9301      	str	r3, [sp, #4]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
 80022a6:	9302      	str	r3, [sp, #8]
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 80022ac:	9303      	str	r3, [sp, #12]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 80022b2:	9304      	str	r3, [sp, #16]
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 80022b8:	9305      	str	r3, [sp, #20]
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 80022be:	9306      	str	r3, [sp, #24]
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 80022c4:	9307      	str	r3, [sp, #28]
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 80022ca:	9308      	str	r3, [sp, #32]
    break;
 80022cc:	e742      	b.n	8002154 <CRYP_AES_ECB+0x30>
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
    break;
    case 192:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
 80022ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022d2:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	ba1b      	rev	r3, r3
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 80022da:	9303      	str	r3, [sp, #12]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 80022e0:	9304      	str	r3, [sp, #16]
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 80022e6:	9305      	str	r3, [sp, #20]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 80022ec:	9306      	str	r3, [sp, #24]
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 80022f2:	9307      	str	r3, [sp, #28]
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 80022f8:	9308      	str	r3, [sp, #32]
    break;
 80022fa:	e72b      	b.n	8002154 <CRYP_AES_ECB+0x30>
       status = ERROR;
    }
    else
    {
      /* Crypto Init for decryption process */  
      AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 80022fc:	2304      	movs	r3, #4
 80022fe:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8002302:	e764      	b.n	80021ce <CRYP_AES_ECB+0xaa>

08002304 <CRYP_AES_CBC>:
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_AES_CBC(uint8_t Mode, uint8_t InitVectors[16], uint8_t *Key,
                         uint16_t Keysize, uint8_t *Input, uint32_t Ilength,
                         uint8_t *Output)
{
 8002304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002308:	b090      	sub	sp, #64	; 0x40
 800230a:	461d      	mov	r5, r3
  CRYP_InitTypeDef AES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 800230c:	2600      	movs	r6, #0
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_AES_CBC(uint8_t Mode, uint8_t InitVectors[16], uint8_t *Key,
                         uint16_t Keysize, uint8_t *Input, uint32_t Ilength,
                         uint8_t *Output)
{
 800230e:	4604      	mov	r4, r0
  uint32_t outputaddr = (uint32_t)Output;
  uint32_t ivaddr     = (uint32_t)InitVectors;
  uint32_t i = 0;

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 8002310:	a801      	add	r0, sp, #4
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_AES_CBC(uint8_t Mode, uint8_t InitVectors[16], uint8_t *Key,
                         uint16_t Keysize, uint8_t *Input, uint32_t Ilength,
                         uint8_t *Output)
{
 8002312:	460f      	mov	r7, r1
 8002314:	4690      	mov	r8, r2
 8002316:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 800231a:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
  CRYP_InitTypeDef AES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 800231e:	960f      	str	r6, [sp, #60]	; 0x3c
  uint32_t outputaddr = (uint32_t)Output;
  uint32_t ivaddr     = (uint32_t)InitVectors;
  uint32_t i = 0;

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 8002320:	f7ff fe0e 	bl	8001f40 <CRYP_KeyStructInit>

  switch(Keysize)
 8002324:	2dc0      	cmp	r5, #192	; 0xc0
 8002326:	f000 80e3 	beq.w	80024f0 <CRYP_AES_CBC+0x1ec>
 800232a:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800232e:	f000 80ba 	beq.w	80024a6 <CRYP_AES_CBC+0x1a2>
 8002332:	2d80      	cmp	r5, #128	; 0x80
 8002334:	f000 80a4 	beq.w	8002480 <CRYP_AES_CBC+0x17c>
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	ba1b      	rev	r3, r3
    default:
    break;
  }

  /* CRYP Initialization Vectors */
  AES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 800233c:	9309      	str	r3, [sp, #36]	; 0x24
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	ba1b      	rev	r3, r3
  ivaddr+=4;
  AES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 8002342:	930a      	str	r3, [sp, #40]	; 0x28
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	ba1b      	rev	r3, r3
  ivaddr+=4;
  AES_CRYP_IVInitStructure.CRYP_IV1Left = __REV(*(uint32_t*)(ivaddr));
 8002348:	930b      	str	r3, [sp, #44]	; 0x2c
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	ba1b      	rev	r3, r3
  ivaddr+=4;
  AES_CRYP_IVInitStructure.CRYP_IV1Right= __REV(*(uint32_t*)(ivaddr));
 800234e:	930c      	str	r3, [sp, #48]	; 0x30


  /*------------------ AES Decryption ------------------*/
  if(Mode == MODE_DECRYPT) /* AES decryption */
 8002350:	2c00      	cmp	r4, #0
 8002352:	d137      	bne.n	80023c4 <CRYP_AES_CBC+0xc0>
  {
    /* Flush IN/OUT FIFOs */
    CRYP_FIFOFlush();
 8002354:	f7ff fe10 	bl	8001f78 <CRYP_FIFOFlush>
    /* Crypto Init for Key preparation for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
    AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_Key;
    AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_32b;

    CRYP_Init(&AES_CRYP_InitStructure);
 8002358:	ad0d      	add	r5, sp, #52	; 0x34
  {
    /* Flush IN/OUT FIFOs */
    CRYP_FIFOFlush();

    /* Crypto Init for Key preparation for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 800235a:	2304      	movs	r3, #4
    AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_Key;
    AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_32b;

    CRYP_Init(&AES_CRYP_InitStructure);
 800235c:	4628      	mov	r0, r5
  {
    /* Flush IN/OUT FIFOs */
    CRYP_FIFOFlush();

    /* Crypto Init for Key preparation for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 800235e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_Key;
 8002362:	2338      	movs	r3, #56	; 0x38
 8002364:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
    AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_32b;
 8002368:	f8ad 4038 	strh.w	r4, [sp, #56]	; 0x38

    CRYP_Init(&AES_CRYP_InitStructure);
 800236c:	f7ff fd98 	bl	8001ea0 <CRYP_Init>

    /* Key Initialisation */
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 8002370:	a801      	add	r0, sp, #4
 8002372:	f7ff fdd1 	bl	8001f18 <CRYP_KeyInit>

    /* Enable Crypto processor */
    CRYP_Cmd(ENABLE);
 8002376:	2001      	movs	r0, #1
 8002378:	f7ff fe06 	bl	8001f88 <CRYP_Cmd>
 800237c:	e002      	b.n	8002384 <CRYP_AES_CBC+0x80>
    /* wait until the Busy flag is RESET */
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
      counter++;
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 800237e:	2800      	cmp	r0, #0
 8002380:	f000 80d3 	beq.w	800252a <CRYP_AES_CBC+0x226>
    CRYP_Cmd(ENABLE);

    /* wait until the Busy flag is RESET */
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8002384:	2010      	movs	r0, #16
 8002386:	f7ff fec1 	bl	800210c <CRYP_GetFlagStatus>
      counter++;
 800238a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800238c:	3301      	adds	r3, #1
 800238e:	930f      	str	r3, [sp, #60]	; 0x3c
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8002390:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002392:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002396:	d1f2      	bne.n	800237e <CRYP_AES_CBC+0x7a>

    if (busystatus != RESET)
 8002398:	2800      	cmp	r0, #0
 800239a:	f000 80c6 	beq.w	800252a <CRYP_AES_CBC+0x226>
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);

    /* Crypto Init for Encryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
  }
  AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CBC;
 800239e:	2328      	movs	r3, #40	; 0x28
  AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
  CRYP_Init(&AES_CRYP_InitStructure);
 80023a0:	4628      	mov	r0, r5
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);

    /* Crypto Init for Encryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
  }
  AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CBC;
 80023a2:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
  AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 80023a6:	2380      	movs	r3, #128	; 0x80
 80023a8:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
  CRYP_Init(&AES_CRYP_InitStructure);
 80023ac:	f7ff fd78 	bl	8001ea0 <CRYP_Init>

  /* CRYP Initialization Vectors */
  CRYP_IVInit(&AES_CRYP_IVInitStructure);
 80023b0:	a809      	add	r0, sp, #36	; 0x24
 80023b2:	f7ff fdcf 	bl	8001f54 <CRYP_IVInit>

  /* Flush IN/OUT FIFOs */
  CRYP_FIFOFlush();
 80023b6:	f7ff fddf 	bl	8001f78 <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 80023ba:	2001      	movs	r0, #1
 80023bc:	f7ff fde4 	bl	8001f88 <CRYP_Cmd>
      counter++;
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));

    if (busystatus != RESET)
   {
       status = ERROR;
 80023c0:	2400      	movs	r4, #0
 80023c2:	e03e      	b.n	8002442 <CRYP_AES_CBC+0x13e>
    }
  }
  /*------------------ AES Encryption ------------------*/
  else /* AES encryption */
  {
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 80023c4:	a801      	add	r0, sp, #4

    /* Crypto Init for Encryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 80023c6:	ad10      	add	r5, sp, #64	; 0x40
    }
  }
  /*------------------ AES Encryption ------------------*/
  else /* AES encryption */
  {
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 80023c8:	f7ff fda6 	bl	8001f18 <CRYP_KeyInit>

    /* Crypto Init for Encryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 80023cc:	2300      	movs	r3, #0
 80023ce:	f825 3d0c 	strh.w	r3, [r5, #-12]!
  }
  AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CBC;
 80023d2:	2328      	movs	r3, #40	; 0x28
  AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
  CRYP_Init(&AES_CRYP_InitStructure);
 80023d4:	4628      	mov	r0, r5
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);

    /* Crypto Init for Encryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
  }
  AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CBC;
 80023d6:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
  AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 80023da:	2380      	movs	r3, #128	; 0x80
 80023dc:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
  CRYP_Init(&AES_CRYP_InitStructure);
 80023e0:	f7ff fd5e 	bl	8001ea0 <CRYP_Init>

  /* CRYP Initialization Vectors */
  CRYP_IVInit(&AES_CRYP_IVInitStructure);
 80023e4:	a809      	add	r0, sp, #36	; 0x24
 80023e6:	f7ff fdb5 	bl	8001f54 <CRYP_IVInit>

  /* Flush IN/OUT FIFOs */
  CRYP_FIFOFlush();
 80023ea:	f7ff fdc5 	bl	8001f78 <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 80023ee:	2001      	movs	r0, #1
 80023f0:	f7ff fdca 	bl	8001f88 <CRYP_Cmd>


  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 80023f4:	f1ba 0f00 	cmp.w	sl, #0
 80023f8:	d040      	beq.n	800247c <CRYP_AES_CBC+0x178>
  CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
  uint32_t busystatus = 0;
  ErrorStatus status = SUCCESS;
  uint32_t keyaddr    = (uint32_t)Key;
  uint32_t inputaddr  = (uint32_t)Input;
 80023fa:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80023fc:	f109 0410 	add.w	r4, r9, #16
 8002400:	3510      	adds	r5, #16
    CRYP_DataIn(*(uint32_t*)(inputaddr));
    inputaddr+=4;
    CRYP_DataIn(*(uint32_t*)(inputaddr));
    inputaddr+=4;
    /* Wait until the complete message has been processed */
    counter = 0;
 8002402:	2600      	movs	r6, #0

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
  {

    /* Write the Input block in the IN FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8002404:	f854 0c10 	ldr.w	r0, [r4, #-16]
 8002408:	f7ff fdcc 	bl	8001fa4 <CRYP_DataIn>
    inputaddr+=4;
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 800240c:	f854 0c0c 	ldr.w	r0, [r4, #-12]
 8002410:	f7ff fdc8 	bl	8001fa4 <CRYP_DataIn>
    inputaddr+=4;
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8002414:	f854 0c08 	ldr.w	r0, [r4, #-8]
 8002418:	f7ff fdc4 	bl	8001fa4 <CRYP_DataIn>
    inputaddr+=4;
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 800241c:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8002420:	f7ff fdc0 	bl	8001fa4 <CRYP_DataIn>
    inputaddr+=4;
    /* Wait until the complete message has been processed */
    counter = 0;
 8002424:	960f      	str	r6, [sp, #60]	; 0x3c
 8002426:	e000      	b.n	800242a <CRYP_AES_CBC+0x126>
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
      counter++;
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8002428:	b190      	cbz	r0, 8002450 <CRYP_AES_CBC+0x14c>
    inputaddr+=4;
    /* Wait until the complete message has been processed */
    counter = 0;
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 800242a:	2010      	movs	r0, #16
 800242c:	f7ff fe6e 	bl	800210c <CRYP_GetFlagStatus>
      counter++;
 8002430:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002432:	3301      	adds	r3, #1
 8002434:	930f      	str	r3, [sp, #60]	; 0x3c
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8002436:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002438:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800243c:	d1f4      	bne.n	8002428 <CRYP_AES_CBC+0x124>

    if (busystatus != RESET)
 800243e:	b138      	cbz	r0, 8002450 <CRYP_AES_CBC+0x14c>
   {
       status = ERROR;
 8002440:	2400      	movs	r4, #0
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 8002442:	2000      	movs	r0, #0
 8002444:	f7ff fda0 	bl	8001f88 <CRYP_Cmd>

  return status;
}
 8002448:	4620      	mov	r0, r4
 800244a:	b010      	add	sp, #64	; 0x40
 800244c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8002450:	f7ff fdae 	bl	8001fb0 <CRYP_DataOut>
 8002454:	f845 0c10 	str.w	r0, [r5, #-16]
      outputaddr+=4;
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8002458:	f7ff fdaa 	bl	8001fb0 <CRYP_DataOut>
 800245c:	f845 0c0c 	str.w	r0, [r5, #-12]
      outputaddr+=4;
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8002460:	f7ff fda6 	bl	8001fb0 <CRYP_DataOut>
 8002464:	f845 0c08 	str.w	r0, [r5, #-8]
      outputaddr+=4;
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8002468:	f7ff fda2 	bl	8001fb0 <CRYP_DataOut>
 800246c:	ebc9 0304 	rsb	r3, r9, r4
 8002470:	f845 0c04 	str.w	r0, [r5, #-4]
 8002474:	3410      	adds	r4, #16
 8002476:	3510      	adds	r5, #16

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);


  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 8002478:	4553      	cmp	r3, sl
 800247a:	d3c3      	bcc.n	8002404 <CRYP_AES_CBC+0x100>
 800247c:	2401      	movs	r4, #1
 800247e:	e7e0      	b.n	8002442 <CRYP_AES_CBC+0x13e>
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);

  switch(Keysize)
  {
    case 128:
    AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
 8002480:	f8ad 603a 	strh.w	r6, [sp, #58]	; 0x3a
 8002484:	f8d8 3000 	ldr.w	r3, [r8]
 8002488:	ba1b      	rev	r3, r3
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 800248a:	9305      	str	r3, [sp, #20]
 800248c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8002490:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8002492:	9306      	str	r3, [sp, #24]
 8002494:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8002498:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 800249a:	9307      	str	r3, [sp, #28]
 800249c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80024a0:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 80024a2:	9308      	str	r3, [sp, #32]
    break;
 80024a4:	e748      	b.n	8002338 <CRYP_AES_CBC+0x34>
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
    break;
    case 256:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
 80024a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024aa:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 80024ae:	f8d8 3000 	ldr.w	r3, [r8]
 80024b2:	ba1b      	rev	r3, r3
    AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
 80024b4:	9301      	str	r3, [sp, #4]
 80024b6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80024ba:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
 80024bc:	9302      	str	r3, [sp, #8]
 80024be:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80024c2:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 80024c4:	9303      	str	r3, [sp, #12]
 80024c6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80024ca:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 80024cc:	9304      	str	r3, [sp, #16]
 80024ce:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80024d2:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 80024d4:	9305      	str	r3, [sp, #20]
 80024d6:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80024da:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 80024dc:	9306      	str	r3, [sp, #24]
 80024de:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80024e2:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 80024e4:	9307      	str	r3, [sp, #28]
 80024e6:	f8d8 301c 	ldr.w	r3, [r8, #28]
 80024ea:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 80024ec:	9308      	str	r3, [sp, #32]
    break;
 80024ee:	e723      	b.n	8002338 <CRYP_AES_CBC+0x34>
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
    break;
    case 192:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
 80024f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024f4:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 80024f8:	f8d8 3000 	ldr.w	r3, [r8]
 80024fc:	ba1b      	rev	r3, r3
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 80024fe:	9303      	str	r3, [sp, #12]
 8002500:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8002504:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8002506:	9304      	str	r3, [sp, #16]
 8002508:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800250c:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 800250e:	9305      	str	r3, [sp, #20]
 8002510:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8002514:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8002516:	9306      	str	r3, [sp, #24]
 8002518:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800251c:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 800251e:	9307      	str	r3, [sp, #28]
 8002520:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8002524:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8002526:	9308      	str	r3, [sp, #32]
    break;
 8002528:	e706      	b.n	8002338 <CRYP_AES_CBC+0x34>
       status = ERROR;
    }
    else
    {
      /* Crypto Init for decryption process */  
      AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 800252a:	2304      	movs	r3, #4
 800252c:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8002530:	e74f      	b.n	80023d2 <CRYP_AES_CBC+0xce>
 8002532:	bf00      	nop

08002534 <CRYP_AES_CTR>:
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_AES_CTR(uint8_t Mode, uint8_t InitVectors[16], uint8_t *Key, 
                         uint16_t Keysize, uint8_t *Input, uint32_t Ilength,
                         uint8_t *Output)
{
 8002534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002538:	b090      	sub	sp, #64	; 0x40
 800253a:	461d      	mov	r5, r3
  CRYP_InitTypeDef AES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 800253c:	2600      	movs	r6, #0
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_AES_CTR(uint8_t Mode, uint8_t InitVectors[16], uint8_t *Key, 
                         uint16_t Keysize, uint8_t *Input, uint32_t Ilength,
                         uint8_t *Output)
{
 800253e:	4604      	mov	r4, r0
  uint32_t outputaddr = (uint32_t)Output;
  uint32_t ivaddr     = (uint32_t)InitVectors;
  uint32_t i = 0;

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 8002540:	a801      	add	r0, sp, #4
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_AES_CTR(uint8_t Mode, uint8_t InitVectors[16], uint8_t *Key, 
                         uint16_t Keysize, uint8_t *Input, uint32_t Ilength,
                         uint8_t *Output)
{
 8002542:	460f      	mov	r7, r1
 8002544:	4690      	mov	r8, r2
 8002546:	f8dd a060 	ldr.w	sl, [sp, #96]	; 0x60
 800254a:	f8dd 9064 	ldr.w	r9, [sp, #100]	; 0x64
  CRYP_InitTypeDef AES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 800254e:	960f      	str	r6, [sp, #60]	; 0x3c
  uint32_t outputaddr = (uint32_t)Output;
  uint32_t ivaddr     = (uint32_t)InitVectors;
  uint32_t i = 0;

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 8002550:	f7ff fcf6 	bl	8001f40 <CRYP_KeyStructInit>

  switch(Keysize)
 8002554:	2dc0      	cmp	r5, #192	; 0xc0
 8002556:	f000 80ad 	beq.w	80026b4 <CRYP_AES_CTR+0x180>
 800255a:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800255e:	f000 8084 	beq.w	800266a <CRYP_AES_CTR+0x136>
 8002562:	2d80      	cmp	r5, #128	; 0x80
 8002564:	d06e      	beq.n	8002644 <CRYP_AES_CTR+0x110>
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	ba1b      	rev	r3, r3
    break;
    default:
    break;
  }
  /* CRYP Initialization Vectors */
  AES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 800256a:	9309      	str	r3, [sp, #36]	; 0x24
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	ba1b      	rev	r3, r3
  ivaddr+=4;
  AES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 8002570:	930a      	str	r3, [sp, #40]	; 0x28
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	ba1b      	rev	r3, r3
  ivaddr+=4;
  AES_CRYP_IVInitStructure.CRYP_IV1Left = __REV(*(uint32_t*)(ivaddr));
 8002576:	930b      	str	r3, [sp, #44]	; 0x2c
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	ba1b      	rev	r3, r3
  ivaddr+=4;
  AES_CRYP_IVInitStructure.CRYP_IV1Right= __REV(*(uint32_t*)(ivaddr));

  /* Key Initialisation */
  CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 800257c:	a801      	add	r0, sp, #4
  ivaddr+=4;
  AES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
  ivaddr+=4;
  AES_CRYP_IVInitStructure.CRYP_IV1Left = __REV(*(uint32_t*)(ivaddr));
  ivaddr+=4;
  AES_CRYP_IVInitStructure.CRYP_IV1Right= __REV(*(uint32_t*)(ivaddr));
 800257e:	930c      	str	r3, [sp, #48]	; 0x30

  /* Key Initialisation */
  CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 8002580:	f7ff fcca 	bl	8001f18 <CRYP_KeyInit>

  /*------------------ AES Decryption ------------------*/
  if(Mode == MODE_DECRYPT) /* AES decryption */
 8002584:	2c00      	cmp	r4, #0
 8002586:	d159      	bne.n	800263c <CRYP_AES_CTR+0x108>
  {
    /* Crypto Init for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 8002588:	2304      	movs	r3, #4
 800258a:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
  else /* AES encryption */
  {
    /* Crypto Init for Encryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
  }
  AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CTR;
 800258e:	2330      	movs	r3, #48	; 0x30
  AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
  CRYP_Init(&AES_CRYP_InitStructure);
 8002590:	a80d      	add	r0, sp, #52	; 0x34
  else /* AES encryption */
  {
    /* Crypto Init for Encryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
  }
  AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CTR;
 8002592:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
  AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8002596:	2380      	movs	r3, #128	; 0x80
 8002598:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
  CRYP_Init(&AES_CRYP_InitStructure);
 800259c:	f7ff fc80 	bl	8001ea0 <CRYP_Init>

  /* CRYP Initialization Vectors */
  CRYP_IVInit(&AES_CRYP_IVInitStructure);
 80025a0:	a809      	add	r0, sp, #36	; 0x24
 80025a2:	f7ff fcd7 	bl	8001f54 <CRYP_IVInit>

  /* Flush IN/OUT FIFOs */
  CRYP_FIFOFlush();
 80025a6:	f7ff fce7 	bl	8001f78 <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 80025aa:	2001      	movs	r0, #1
 80025ac:	f7ff fcec 	bl	8001f88 <CRYP_Cmd>

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 80025b0:	f1b9 0f00 	cmp.w	r9, #0
 80025b4:	d040      	beq.n	8002638 <CRYP_AES_CTR+0x104>
  CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
  uint32_t busystatus = 0;
  ErrorStatus status = SUCCESS;
  uint32_t keyaddr    = (uint32_t)Key;
  uint32_t inputaddr  = (uint32_t)Input;
 80025b6:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80025b8:	f10a 0410 	add.w	r4, sl, #16
 80025bc:	3510      	adds	r5, #16
    CRYP_DataIn(*(uint32_t*)(inputaddr));
    inputaddr+=4;
    CRYP_DataIn(*(uint32_t*)(inputaddr));
    inputaddr+=4;
    /* Wait until the complete message has been processed */
    counter = 0;
 80025be:	2600      	movs	r6, #0

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
  {

    /* Write the Input block in the IN FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80025c0:	f854 0c10 	ldr.w	r0, [r4, #-16]
 80025c4:	f7ff fcee 	bl	8001fa4 <CRYP_DataIn>
    inputaddr+=4;
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80025c8:	f854 0c0c 	ldr.w	r0, [r4, #-12]
 80025cc:	f7ff fcea 	bl	8001fa4 <CRYP_DataIn>
    inputaddr+=4;
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80025d0:	f854 0c08 	ldr.w	r0, [r4, #-8]
 80025d4:	f7ff fce6 	bl	8001fa4 <CRYP_DataIn>
    inputaddr+=4;
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80025d8:	f854 0c04 	ldr.w	r0, [r4, #-4]
 80025dc:	f7ff fce2 	bl	8001fa4 <CRYP_DataIn>
    inputaddr+=4;
    /* Wait until the complete message has been processed */
    counter = 0;
 80025e0:	960f      	str	r6, [sp, #60]	; 0x3c
 80025e2:	e000      	b.n	80025e6 <CRYP_AES_CTR+0xb2>
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
      counter++;
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 80025e4:	b190      	cbz	r0, 800260c <CRYP_AES_CTR+0xd8>
    inputaddr+=4;
    /* Wait until the complete message has been processed */
    counter = 0;
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 80025e6:	2010      	movs	r0, #16
 80025e8:	f7ff fd90 	bl	800210c <CRYP_GetFlagStatus>
      counter++;
 80025ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80025ee:	3301      	adds	r3, #1
 80025f0:	930f      	str	r3, [sp, #60]	; 0x3c
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 80025f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80025f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025f8:	d1f4      	bne.n	80025e4 <CRYP_AES_CTR+0xb0>

    if (busystatus != RESET)
 80025fa:	b138      	cbz	r0, 800260c <CRYP_AES_CTR+0xd8>
   {
       status = ERROR;
 80025fc:	2400      	movs	r4, #0
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
      outputaddr+=4;
    }
  }
  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 80025fe:	2000      	movs	r0, #0
 8002600:	f7ff fcc2 	bl	8001f88 <CRYP_Cmd>

  return status;
}
 8002604:	4620      	mov	r0, r4
 8002606:	b010      	add	sp, #64	; 0x40
 8002608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 800260c:	f7ff fcd0 	bl	8001fb0 <CRYP_DataOut>
 8002610:	f845 0c10 	str.w	r0, [r5, #-16]
      outputaddr+=4;
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8002614:	f7ff fccc 	bl	8001fb0 <CRYP_DataOut>
 8002618:	f845 0c0c 	str.w	r0, [r5, #-12]
      outputaddr+=4;
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 800261c:	f7ff fcc8 	bl	8001fb0 <CRYP_DataOut>
 8002620:	f845 0c08 	str.w	r0, [r5, #-8]
      outputaddr+=4;
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8002624:	f7ff fcc4 	bl	8001fb0 <CRYP_DataOut>
 8002628:	ebca 0304 	rsb	r3, sl, r4
 800262c:	f845 0c04 	str.w	r0, [r5, #-4]
 8002630:	3410      	adds	r4, #16
 8002632:	3510      	adds	r5, #16
  CRYP_FIFOFlush();

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 8002634:	4599      	cmp	r9, r3
 8002636:	d8c3      	bhi.n	80025c0 <CRYP_AES_CTR+0x8c>
  CRYP_InitTypeDef AES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
  uint32_t busystatus = 0;
  ErrorStatus status = SUCCESS;
 8002638:	2401      	movs	r4, #1
 800263a:	e7e0      	b.n	80025fe <CRYP_AES_CTR+0xca>
  }
  /*------------------ AES Encryption ------------------*/
  else /* AES encryption */
  {
    /* Crypto Init for Encryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 800263c:	2300      	movs	r3, #0
 800263e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8002642:	e7a4      	b.n	800258e <CRYP_AES_CTR+0x5a>
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);

  switch(Keysize)
  {
    case 128:
    AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
 8002644:	f8ad 603a 	strh.w	r6, [sp, #58]	; 0x3a
 8002648:	f8d8 3000 	ldr.w	r3, [r8]
 800264c:	ba1b      	rev	r3, r3
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 800264e:	9305      	str	r3, [sp, #20]
 8002650:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8002654:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8002656:	9306      	str	r3, [sp, #24]
 8002658:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800265c:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 800265e:	9307      	str	r3, [sp, #28]
 8002660:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8002664:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8002666:	9308      	str	r3, [sp, #32]
    break;
 8002668:	e77d      	b.n	8002566 <CRYP_AES_CTR+0x32>
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
    break;
    case 256:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
 800266a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800266e:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8002672:	f8d8 3000 	ldr.w	r3, [r8]
 8002676:	ba1b      	rev	r3, r3
    AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
 8002678:	9301      	str	r3, [sp, #4]
 800267a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800267e:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
 8002680:	9302      	str	r3, [sp, #8]
 8002682:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8002686:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8002688:	9303      	str	r3, [sp, #12]
 800268a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800268e:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8002690:	9304      	str	r3, [sp, #16]
 8002692:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8002696:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8002698:	9305      	str	r3, [sp, #20]
 800269a:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800269e:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 80026a0:	9306      	str	r3, [sp, #24]
 80026a2:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80026a6:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 80026a8:	9307      	str	r3, [sp, #28]
 80026aa:	f8d8 301c 	ldr.w	r3, [r8, #28]
 80026ae:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 80026b0:	9308      	str	r3, [sp, #32]
    break;
 80026b2:	e758      	b.n	8002566 <CRYP_AES_CTR+0x32>
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
    break;
    case 192:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
 80026b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026b8:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 80026bc:	f8d8 3000 	ldr.w	r3, [r8]
 80026c0:	ba1b      	rev	r3, r3
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 80026c2:	9303      	str	r3, [sp, #12]
 80026c4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80026c8:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 80026ca:	9304      	str	r3, [sp, #16]
 80026cc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80026d0:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 80026d2:	9305      	str	r3, [sp, #20]
 80026d4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80026d8:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 80026da:	9306      	str	r3, [sp, #24]
 80026dc:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80026e0:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 80026e2:	9307      	str	r3, [sp, #28]
 80026e4:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80026e8:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 80026ea:	9308      	str	r3, [sp, #32]
    break;
 80026ec:	e73b      	b.n	8002566 <CRYP_AES_CTR+0x32>
 80026ee:	bf00      	nop

080026f0 <CRYP_DES_ECB>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_DES_ECB(uint8_t Mode, uint8_t Key[8], uint8_t *Input, 
                         uint32_t Ilength, uint8_t *Output)
{
 80026f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026f4:	b08c      	sub	sp, #48	; 0x30
  CRYP_InitTypeDef DES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef DES_CRYP_KeyInitStructure;
  __IO uint32_t counter = 0;
 80026f6:	2400      	movs	r4, #0
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_DES_ECB(uint8_t Mode, uint8_t Key[8], uint8_t *Input, 
                         uint32_t Ilength, uint8_t *Output)
{
 80026f8:	4605      	mov	r5, r0
  uint32_t inputaddr  = (uint32_t)Input;
  uint32_t outputaddr = (uint32_t)Output;
  uint32_t i = 0;

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&DES_CRYP_KeyInitStructure);
 80026fa:	a801      	add	r0, sp, #4
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_DES_ECB(uint8_t Mode, uint8_t Key[8], uint8_t *Input, 
                         uint32_t Ilength, uint8_t *Output)
{
 80026fc:	460e      	mov	r6, r1
 80026fe:	4617      	mov	r7, r2
 8002700:	4698      	mov	r8, r3
  CRYP_InitTypeDef DES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef DES_CRYP_KeyInitStructure;
  __IO uint32_t counter = 0;
 8002702:	940b      	str	r4, [sp, #44]	; 0x2c
  uint32_t inputaddr  = (uint32_t)Input;
  uint32_t outputaddr = (uint32_t)Output;
  uint32_t i = 0;

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&DES_CRYP_KeyInitStructure);
 8002704:	f7ff fc1c 	bl	8001f40 <CRYP_KeyStructInit>

  /* Crypto Init for Encryption process */
  if( Mode == MODE_ENCRYPT ) /* DES encryption */
 8002708:	2d01      	cmp	r5, #1
  {
     DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 800270a:	bf08      	it	eq
 800270c:	f8ad 4024 	strheq.w	r4, [sp, #36]	; 0x24

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&DES_CRYP_KeyInitStructure);

  /* Crypto Init for Encryption process */
  if( Mode == MODE_ENCRYPT ) /* DES encryption */
 8002710:	d002      	beq.n	8002718 <CRYP_DES_ECB+0x28>
  {
     DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
  }
  else/* if( Mode == MODE_DECRYPT )*/ /* DES decryption */
  {      
     DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Decrypt;
 8002712:	2304      	movs	r3, #4
 8002714:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  }

  DES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_DES_ECB;
 8002718:	2310      	movs	r3, #16
 800271a:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
  DES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
  CRYP_Init(&DES_CRYP_InitStructure);
 800271e:	a809      	add	r0, sp, #36	; 0x24
  {      
     DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Decrypt;
  }

  DES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_DES_ECB;
  DES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8002720:	2380      	movs	r3, #128	; 0x80
 8002722:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
  CRYP_Init(&DES_CRYP_InitStructure);
 8002726:	f7ff fbbb 	bl	8001ea0 <CRYP_Init>
 800272a:	6833      	ldr	r3, [r6, #0]
 800272c:	ba1b      	rev	r3, r3

  /* Key Initialisation */
  DES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 800272e:	9303      	str	r3, [sp, #12]
 8002730:	6873      	ldr	r3, [r6, #4]
 8002732:	ba1b      	rev	r3, r3
  keyaddr+=4;
  DES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
  CRYP_KeyInit(& DES_CRYP_KeyInitStructure);
 8002734:	a801      	add	r0, sp, #4
  CRYP_Init(&DES_CRYP_InitStructure);

  /* Key Initialisation */
  DES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
  keyaddr+=4;
  DES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8002736:	9304      	str	r3, [sp, #16]
  CRYP_KeyInit(& DES_CRYP_KeyInitStructure);
 8002738:	f7ff fbee 	bl	8001f18 <CRYP_KeyInit>

  /* Flush IN/OUT FIFO */
  CRYP_FIFOFlush();
 800273c:	f7ff fc1c 	bl	8001f78 <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 8002740:	2001      	movs	r0, #1
 8002742:	f7ff fc21 	bl	8001f88 <CRYP_Cmd>

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 8002746:	f1b8 0f00 	cmp.w	r8, #0
 800274a:	d02f      	beq.n	80027ac <CRYP_DES_ECB+0xbc>
 800274c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800274e:	2600      	movs	r6, #0
 8002750:	3708      	adds	r7, #8
 8002752:	3408      	adds	r4, #8
    inputaddr+=4;
    CRYP_DataIn(*(uint32_t*)(inputaddr));
    inputaddr+=4;

/* Wait until the complete message has been processed */
    counter = 0;
 8002754:	4635      	mov	r5, r6

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
  {

    /* Write the Input block in the Input FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8002756:	f857 0c08 	ldr.w	r0, [r7, #-8]
 800275a:	f7ff fc23 	bl	8001fa4 <CRYP_DataIn>
    inputaddr+=4;
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 800275e:	f857 0c04 	ldr.w	r0, [r7, #-4]
 8002762:	f7ff fc1f 	bl	8001fa4 <CRYP_DataIn>
    inputaddr+=4;

/* Wait until the complete message has been processed */
    counter = 0;
 8002766:	950b      	str	r5, [sp, #44]	; 0x2c
 8002768:	e000      	b.n	800276c <CRYP_DES_ECB+0x7c>
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
      counter++;
    }while ((counter != DESBUSY_TIMEOUT) && (busystatus != RESET));
 800276a:	b190      	cbz	r0, 8002792 <CRYP_DES_ECB+0xa2>

/* Wait until the complete message has been processed */
    counter = 0;
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 800276c:	2010      	movs	r0, #16
 800276e:	f7ff fccd 	bl	800210c <CRYP_GetFlagStatus>
      counter++;
 8002772:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002774:	3301      	adds	r3, #1
 8002776:	930b      	str	r3, [sp, #44]	; 0x2c
    }while ((counter != DESBUSY_TIMEOUT) && (busystatus != RESET));
 8002778:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800277a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800277e:	d1f4      	bne.n	800276a <CRYP_DES_ECB+0x7a>

    if (busystatus != RESET)
 8002780:	b138      	cbz	r0, 8002792 <CRYP_DES_ECB+0xa2>
   {
       status = ERROR;
 8002782:	2400      	movs	r4, #0
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 8002784:	2000      	movs	r0, #0
 8002786:	f7ff fbff 	bl	8001f88 <CRYP_Cmd>

  return status; 
}
 800278a:	4620      	mov	r0, r4
 800278c:	b00c      	add	sp, #48	; 0x30
 800278e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8002792:	f7ff fc0d 	bl	8001fb0 <CRYP_DataOut>
 8002796:	f844 0c08 	str.w	r0, [r4, #-8]
      outputaddr+=4;
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 800279a:	f7ff fc09 	bl	8001fb0 <CRYP_DataOut>
  CRYP_FIFOFlush();

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 800279e:	3608      	adds	r6, #8
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
      outputaddr+=4;
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 80027a0:	f844 0c04 	str.w	r0, [r4, #-4]
  CRYP_FIFOFlush();

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 80027a4:	3708      	adds	r7, #8
 80027a6:	3408      	adds	r4, #8
 80027a8:	45b0      	cmp	r8, r6
 80027aa:	d8d4      	bhi.n	8002756 <CRYP_DES_ECB+0x66>
{
  CRYP_InitTypeDef DES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef DES_CRYP_KeyInitStructure;
  __IO uint32_t counter = 0;
  uint32_t busystatus = 0;
  ErrorStatus status = SUCCESS;
 80027ac:	2401      	movs	r4, #1
 80027ae:	e7e9      	b.n	8002784 <CRYP_DES_ECB+0x94>

080027b0 <CRYP_DES_CBC>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_DES_CBC(uint8_t Mode, uint8_t Key[8], uint8_t InitVectors[8],
                         uint8_t *Input, uint32_t Ilength, uint8_t *Output)
{
 80027b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80027b4:	b091      	sub	sp, #68	; 0x44
  CRYP_InitTypeDef DES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef DES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef DES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 80027b6:	2400      	movs	r4, #0
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_DES_CBC(uint8_t Mode, uint8_t Key[8], uint8_t InitVectors[8],
                         uint8_t *Input, uint32_t Ilength, uint8_t *Output)
{
 80027b8:	4605      	mov	r5, r0
  uint32_t outputaddr = (uint32_t)Output;
  uint32_t ivaddr     = (uint32_t)InitVectors;
  uint32_t i = 0;

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&DES_CRYP_KeyInitStructure);
 80027ba:	a801      	add	r0, sp, #4
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_DES_CBC(uint8_t Mode, uint8_t Key[8], uint8_t InitVectors[8],
                         uint8_t *Input, uint32_t Ilength, uint8_t *Output)
{
 80027bc:	460e      	mov	r6, r1
 80027be:	4617      	mov	r7, r2
 80027c0:	4699      	mov	r9, r3
 80027c2:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
  CRYP_InitTypeDef DES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef DES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef DES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 80027c6:	940f      	str	r4, [sp, #60]	; 0x3c
  uint32_t outputaddr = (uint32_t)Output;
  uint32_t ivaddr     = (uint32_t)InitVectors;
  uint32_t i = 0;

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&DES_CRYP_KeyInitStructure);
 80027c8:	f7ff fbba 	bl	8001f40 <CRYP_KeyStructInit>

  /* Crypto Init for Encryption process */
  if(Mode == MODE_ENCRYPT) /* DES encryption */
 80027cc:	2d01      	cmp	r5, #1
  {
     DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 80027ce:	bf08      	it	eq
 80027d0:	f8ad 4034 	strheq.w	r4, [sp, #52]	; 0x34

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&DES_CRYP_KeyInitStructure);

  /* Crypto Init for Encryption process */
  if(Mode == MODE_ENCRYPT) /* DES encryption */
 80027d4:	d002      	beq.n	80027dc <CRYP_DES_CBC+0x2c>
  {
     DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
  }
  else /*if(Mode == MODE_DECRYPT)*/ /* DES decryption */
  {
     DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Decrypt;
 80027d6:	2304      	movs	r3, #4
 80027d8:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
  }

  DES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_DES_CBC;
 80027dc:	2318      	movs	r3, #24
 80027de:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
  DES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
  CRYP_Init(&DES_CRYP_InitStructure);
 80027e2:	a80d      	add	r0, sp, #52	; 0x34
  {
     DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Decrypt;
  }

  DES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_DES_CBC;
  DES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 80027e4:	2380      	movs	r3, #128	; 0x80
 80027e6:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
  CRYP_Init(&DES_CRYP_InitStructure);
 80027ea:	f7ff fb59 	bl	8001ea0 <CRYP_Init>
 80027ee:	6833      	ldr	r3, [r6, #0]
 80027f0:	ba1b      	rev	r3, r3

  /* Key Initialisation */
  DES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 80027f2:	9303      	str	r3, [sp, #12]
 80027f4:	6873      	ldr	r3, [r6, #4]
 80027f6:	ba1b      	rev	r3, r3
  keyaddr+=4;
  DES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
  CRYP_KeyInit(& DES_CRYP_KeyInitStructure);
 80027f8:	a801      	add	r0, sp, #4
  CRYP_Init(&DES_CRYP_InitStructure);

  /* Key Initialisation */
  DES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
  keyaddr+=4;
  DES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 80027fa:	9304      	str	r3, [sp, #16]
  CRYP_KeyInit(& DES_CRYP_KeyInitStructure);
 80027fc:	f7ff fb8c 	bl	8001f18 <CRYP_KeyInit>
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	ba1b      	rev	r3, r3

  /* Initialization Vectors */
  DES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 8002804:	9309      	str	r3, [sp, #36]	; 0x24
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	ba1b      	rev	r3, r3
  ivaddr+=4;
  DES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
  CRYP_IVInit(&DES_CRYP_IVInitStructure);
 800280a:	a809      	add	r0, sp, #36	; 0x24
  CRYP_KeyInit(& DES_CRYP_KeyInitStructure);

  /* Initialization Vectors */
  DES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
  ivaddr+=4;
  DES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 800280c:	930a      	str	r3, [sp, #40]	; 0x28
  CRYP_IVInit(&DES_CRYP_IVInitStructure);
 800280e:	f7ff fba1 	bl	8001f54 <CRYP_IVInit>

  /* Flush IN/OUT FIFO */
  CRYP_FIFOFlush();
 8002812:	f7ff fbb1 	bl	8001f78 <CRYP_FIFOFlush>
  
  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 8002816:	2001      	movs	r0, #1
 8002818:	f7ff fbb6 	bl	8001f88 <CRYP_Cmd>

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 800281c:	f1b8 0f00 	cmp.w	r8, #0
 8002820:	d030      	beq.n	8002884 <CRYP_DES_CBC+0xd4>
 8002822:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8002824:	2700      	movs	r7, #0
 8002826:	f109 0408 	add.w	r4, r9, #8
 800282a:	3508      	adds	r5, #8
    inputaddr+=4;
    CRYP_DataIn(*(uint32_t*)(inputaddr));
    inputaddr+=4;

    /* Wait until the complete message has been processed */
    counter = 0;
 800282c:	463e      	mov	r6, r7
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
  {
    /* Write the Input block in the Input FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 800282e:	f854 0c08 	ldr.w	r0, [r4, #-8]
 8002832:	f7ff fbb7 	bl	8001fa4 <CRYP_DataIn>
    inputaddr+=4;
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8002836:	f854 0c04 	ldr.w	r0, [r4, #-4]
 800283a:	f7ff fbb3 	bl	8001fa4 <CRYP_DataIn>
    inputaddr+=4;

    /* Wait until the complete message has been processed */
    counter = 0;
 800283e:	960f      	str	r6, [sp, #60]	; 0x3c
 8002840:	e000      	b.n	8002844 <CRYP_DES_CBC+0x94>
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
      counter++;
    }while ((counter != DESBUSY_TIMEOUT) && (busystatus != RESET));
 8002842:	b190      	cbz	r0, 800286a <CRYP_DES_CBC+0xba>

    /* Wait until the complete message has been processed */
    counter = 0;
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8002844:	2010      	movs	r0, #16
 8002846:	f7ff fc61 	bl	800210c <CRYP_GetFlagStatus>
      counter++;
 800284a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800284c:	3301      	adds	r3, #1
 800284e:	930f      	str	r3, [sp, #60]	; 0x3c
    }while ((counter != DESBUSY_TIMEOUT) && (busystatus != RESET));
 8002850:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002852:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002856:	d1f4      	bne.n	8002842 <CRYP_DES_CBC+0x92>

    if (busystatus != RESET)
 8002858:	b138      	cbz	r0, 800286a <CRYP_DES_CBC+0xba>
   {
       status = ERROR;
 800285a:	2400      	movs	r4, #0
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 800285c:	2000      	movs	r0, #0
 800285e:	f7ff fb93 	bl	8001f88 <CRYP_Cmd>

  return status; 
}
 8002862:	4620      	mov	r0, r4
 8002864:	b011      	add	sp, #68	; 0x44
 8002866:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       status = ERROR;
    }
    else
    {
      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 800286a:	f7ff fba1 	bl	8001fb0 <CRYP_DataOut>
 800286e:	f845 0c08 	str.w	r0, [r5, #-8]
      outputaddr+=4;
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8002872:	f7ff fb9d 	bl	8001fb0 <CRYP_DataOut>
  CRYP_FIFOFlush();
  
  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 8002876:	3708      	adds	r7, #8
    else
    {
      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
      outputaddr+=4;
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8002878:	f845 0c04 	str.w	r0, [r5, #-4]
  CRYP_FIFOFlush();
  
  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 800287c:	3408      	adds	r4, #8
 800287e:	3508      	adds	r5, #8
 8002880:	45b8      	cmp	r8, r7
 8002882:	d8d4      	bhi.n	800282e <CRYP_DES_CBC+0x7e>
  CRYP_InitTypeDef DES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef DES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef DES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
  uint32_t busystatus = 0;
  ErrorStatus status = SUCCESS;
 8002884:	2401      	movs	r4, #1
 8002886:	e7e9      	b.n	800285c <CRYP_DES_CBC+0xac>

08002888 <CRYP_TDES_ECB>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_TDES_ECB(uint8_t Mode, uint8_t Key[24], uint8_t *Input, 
                          uint32_t Ilength, uint8_t *Output)
{
 8002888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800288c:	b08c      	sub	sp, #48	; 0x30
  CRYP_InitTypeDef TDES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef TDES_CRYP_KeyInitStructure;
  __IO uint32_t counter = 0;
 800288e:	2400      	movs	r4, #0
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_TDES_ECB(uint8_t Mode, uint8_t Key[24], uint8_t *Input, 
                          uint32_t Ilength, uint8_t *Output)
{
 8002890:	4605      	mov	r5, r0
  uint32_t inputaddr  = (uint32_t)Input;
  uint32_t outputaddr = (uint32_t)Output;
  uint32_t i = 0;

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&TDES_CRYP_KeyInitStructure);
 8002892:	a801      	add	r0, sp, #4
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_TDES_ECB(uint8_t Mode, uint8_t Key[24], uint8_t *Input, 
                          uint32_t Ilength, uint8_t *Output)
{
 8002894:	460e      	mov	r6, r1
 8002896:	4617      	mov	r7, r2
 8002898:	4698      	mov	r8, r3
  CRYP_InitTypeDef TDES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef TDES_CRYP_KeyInitStructure;
  __IO uint32_t counter = 0;
 800289a:	940b      	str	r4, [sp, #44]	; 0x2c
  uint32_t inputaddr  = (uint32_t)Input;
  uint32_t outputaddr = (uint32_t)Output;
  uint32_t i = 0;

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&TDES_CRYP_KeyInitStructure);
 800289c:	f7ff fb50 	bl	8001f40 <CRYP_KeyStructInit>

  /* Crypto Init for Encryption process */
  if(Mode == MODE_ENCRYPT) /* TDES encryption */
 80028a0:	2d01      	cmp	r5, #1
  {
     TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 80028a2:	bf08      	it	eq
 80028a4:	f8ad 4024 	strheq.w	r4, [sp, #36]	; 0x24

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&TDES_CRYP_KeyInitStructure);

  /* Crypto Init for Encryption process */
  if(Mode == MODE_ENCRYPT) /* TDES encryption */
 80028a8:	d002      	beq.n	80028b0 <CRYP_TDES_ECB+0x28>
  {
     TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
  }
  else /*if(Mode == MODE_DECRYPT)*/ /* TDES decryption */
  {
     TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 80028aa:	2304      	movs	r3, #4
 80028ac:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  }

  TDES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_TDES_ECB;
  TDES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 80028b0:	2380      	movs	r3, #128	; 0x80
  else /*if(Mode == MODE_DECRYPT)*/ /* TDES decryption */
  {
     TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
  }

  TDES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_TDES_ECB;
 80028b2:	2400      	movs	r4, #0
  TDES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
  CRYP_Init(&TDES_CRYP_InitStructure);
 80028b4:	a809      	add	r0, sp, #36	; 0x24
  {
     TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
  }

  TDES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_TDES_ECB;
  TDES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 80028b6:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
  else /*if(Mode == MODE_DECRYPT)*/ /* TDES decryption */
  {
     TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
  }

  TDES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_TDES_ECB;
 80028ba:	f8ad 4026 	strh.w	r4, [sp, #38]	; 0x26
  TDES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
  CRYP_Init(&TDES_CRYP_InitStructure);
 80028be:	f7ff faef 	bl	8001ea0 <CRYP_Init>
 80028c2:	6833      	ldr	r3, [r6, #0]
 80028c4:	ba1b      	rev	r3, r3

  /* Key Initialisation */
  TDES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 80028c6:	9303      	str	r3, [sp, #12]
 80028c8:	6873      	ldr	r3, [r6, #4]
 80028ca:	ba1b      	rev	r3, r3
  keyaddr+=4;
  TDES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 80028cc:	9304      	str	r3, [sp, #16]
 80028ce:	68b3      	ldr	r3, [r6, #8]
 80028d0:	ba1b      	rev	r3, r3
  keyaddr+=4;
  TDES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 80028d2:	9305      	str	r3, [sp, #20]
 80028d4:	68f3      	ldr	r3, [r6, #12]
 80028d6:	ba1b      	rev	r3, r3
  keyaddr+=4;
  TDES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 80028d8:	9306      	str	r3, [sp, #24]
 80028da:	6933      	ldr	r3, [r6, #16]
 80028dc:	ba1b      	rev	r3, r3
  keyaddr+=4;
  TDES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 80028de:	9307      	str	r3, [sp, #28]
 80028e0:	6973      	ldr	r3, [r6, #20]
 80028e2:	ba1b      	rev	r3, r3
  keyaddr+=4;
  TDES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
  CRYP_KeyInit(& TDES_CRYP_KeyInitStructure);
 80028e4:	a801      	add	r0, sp, #4
  keyaddr+=4;
  TDES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
  keyaddr+=4;
  TDES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
  keyaddr+=4;
  TDES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 80028e6:	9308      	str	r3, [sp, #32]
  CRYP_KeyInit(& TDES_CRYP_KeyInitStructure);
 80028e8:	f7ff fb16 	bl	8001f18 <CRYP_KeyInit>

  /* Flush IN/OUT FIFO */
  CRYP_FIFOFlush();
 80028ec:	f7ff fb44 	bl	8001f78 <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 80028f0:	2001      	movs	r0, #1
 80028f2:	f7ff fb49 	bl	8001f88 <CRYP_Cmd>

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 80028f6:	f1b8 0f00 	cmp.w	r8, #0
 80028fa:	d02f      	beq.n	800295c <CRYP_TDES_ECB+0xd4>
 80028fc:	4626      	mov	r6, r4
 80028fe:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8002900:	3708      	adds	r7, #8
 8002902:	3408      	adds	r4, #8
    inputaddr+=4;
    CRYP_DataIn(*(uint32_t*)(inputaddr));
    inputaddr+=4;

    /* Wait until the complete message has been processed */
    counter = 0;
 8002904:	4635      	mov	r5, r6
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
  {
    /* Write the Input block in the Input FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8002906:	f857 0c08 	ldr.w	r0, [r7, #-8]
 800290a:	f7ff fb4b 	bl	8001fa4 <CRYP_DataIn>
    inputaddr+=4;
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 800290e:	f857 0c04 	ldr.w	r0, [r7, #-4]
 8002912:	f7ff fb47 	bl	8001fa4 <CRYP_DataIn>
    inputaddr+=4;

    /* Wait until the complete message has been processed */
    counter = 0;
 8002916:	950b      	str	r5, [sp, #44]	; 0x2c
 8002918:	e000      	b.n	800291c <CRYP_TDES_ECB+0x94>
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
      counter++;
    }while ((counter != TDESBUSY_TIMEOUT) && (busystatus != RESET));
 800291a:	b190      	cbz	r0, 8002942 <CRYP_TDES_ECB+0xba>

    /* Wait until the complete message has been processed */
    counter = 0;
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 800291c:	2010      	movs	r0, #16
 800291e:	f7ff fbf5 	bl	800210c <CRYP_GetFlagStatus>
      counter++;
 8002922:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002924:	3301      	adds	r3, #1
 8002926:	930b      	str	r3, [sp, #44]	; 0x2c
    }while ((counter != TDESBUSY_TIMEOUT) && (busystatus != RESET));
 8002928:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800292a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800292e:	d1f4      	bne.n	800291a <CRYP_TDES_ECB+0x92>

    if (busystatus != RESET)
 8002930:	b138      	cbz	r0, 8002942 <CRYP_TDES_ECB+0xba>
    {
       status = ERROR;
 8002932:	2400      	movs	r4, #0
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 8002934:	2000      	movs	r0, #0
 8002936:	f7ff fb27 	bl	8001f88 <CRYP_Cmd>

  return status; 
}
 800293a:	4620      	mov	r0, r4
 800293c:	b00c      	add	sp, #48	; 0x30
 800293e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8002942:	f7ff fb35 	bl	8001fb0 <CRYP_DataOut>
 8002946:	f844 0c08 	str.w	r0, [r4, #-8]
      outputaddr+=4;
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 800294a:	f7ff fb31 	bl	8001fb0 <CRYP_DataOut>
  CRYP_FIFOFlush();

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 800294e:	3608      	adds	r6, #8
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
      outputaddr+=4;
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8002950:	f844 0c04 	str.w	r0, [r4, #-4]
  CRYP_FIFOFlush();

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 8002954:	3708      	adds	r7, #8
 8002956:	3408      	adds	r4, #8
 8002958:	45b0      	cmp	r8, r6
 800295a:	d8d4      	bhi.n	8002906 <CRYP_TDES_ECB+0x7e>
{
  CRYP_InitTypeDef TDES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef TDES_CRYP_KeyInitStructure;
  __IO uint32_t counter = 0;
  uint32_t busystatus = 0;
  ErrorStatus status = SUCCESS;
 800295c:	2401      	movs	r4, #1
 800295e:	e7e9      	b.n	8002934 <CRYP_TDES_ECB+0xac>

08002960 <CRYP_TDES_CBC>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_TDES_CBC(uint8_t Mode, uint8_t Key[24], uint8_t InitVectors[8],
                          uint8_t *Input, uint32_t Ilength, uint8_t *Output)
{
 8002960:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002964:	b091      	sub	sp, #68	; 0x44
  CRYP_InitTypeDef TDES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef TDES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef TDES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 8002966:	2400      	movs	r4, #0
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_TDES_CBC(uint8_t Mode, uint8_t Key[24], uint8_t InitVectors[8],
                          uint8_t *Input, uint32_t Ilength, uint8_t *Output)
{
 8002968:	4605      	mov	r5, r0
  uint32_t outputaddr = (uint32_t)Output;
  uint32_t ivaddr     = (uint32_t)InitVectors;
  uint32_t i = 0;

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&TDES_CRYP_KeyInitStructure);
 800296a:	a801      	add	r0, sp, #4
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_TDES_CBC(uint8_t Mode, uint8_t Key[24], uint8_t InitVectors[8],
                          uint8_t *Input, uint32_t Ilength, uint8_t *Output)
{
 800296c:	460e      	mov	r6, r1
 800296e:	4617      	mov	r7, r2
 8002970:	4699      	mov	r9, r3
 8002972:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
  CRYP_InitTypeDef TDES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef TDES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef TDES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 8002976:	940f      	str	r4, [sp, #60]	; 0x3c
  uint32_t outputaddr = (uint32_t)Output;
  uint32_t ivaddr     = (uint32_t)InitVectors;
  uint32_t i = 0;

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&TDES_CRYP_KeyInitStructure);
 8002978:	f7ff fae2 	bl	8001f40 <CRYP_KeyStructInit>

  /* Crypto Init for Encryption process */
  if(Mode == MODE_ENCRYPT) /* TDES encryption */
 800297c:	2d01      	cmp	r5, #1
  {
    TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 800297e:	bf08      	it	eq
 8002980:	f8ad 4034 	strheq.w	r4, [sp, #52]	; 0x34

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&TDES_CRYP_KeyInitStructure);

  /* Crypto Init for Encryption process */
  if(Mode == MODE_ENCRYPT) /* TDES encryption */
 8002984:	d002      	beq.n	800298c <CRYP_TDES_CBC+0x2c>
  {
    TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
  }
  else
  {
    TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 8002986:	2304      	movs	r3, #4
 8002988:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
  }
  TDES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_TDES_CBC;
 800298c:	2308      	movs	r3, #8
 800298e:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
  TDES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;

  CRYP_Init(&TDES_CRYP_InitStructure);
 8002992:	a80d      	add	r0, sp, #52	; 0x34
  else
  {
    TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
  }
  TDES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_TDES_CBC;
  TDES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8002994:	2380      	movs	r3, #128	; 0x80
 8002996:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38

  CRYP_Init(&TDES_CRYP_InitStructure);
 800299a:	f7ff fa81 	bl	8001ea0 <CRYP_Init>
 800299e:	6833      	ldr	r3, [r6, #0]
 80029a0:	ba1b      	rev	r3, r3

  /* Key Initialisation */
  TDES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 80029a2:	9303      	str	r3, [sp, #12]
 80029a4:	6873      	ldr	r3, [r6, #4]
 80029a6:	ba1b      	rev	r3, r3
  keyaddr+=4;
  TDES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 80029a8:	9304      	str	r3, [sp, #16]
 80029aa:	68b3      	ldr	r3, [r6, #8]
 80029ac:	ba1b      	rev	r3, r3
  keyaddr+=4;
  TDES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 80029ae:	9305      	str	r3, [sp, #20]
 80029b0:	68f3      	ldr	r3, [r6, #12]
 80029b2:	ba1b      	rev	r3, r3
  keyaddr+=4;
  TDES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 80029b4:	9306      	str	r3, [sp, #24]
 80029b6:	6933      	ldr	r3, [r6, #16]
 80029b8:	ba1b      	rev	r3, r3
  keyaddr+=4;
  TDES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 80029ba:	9307      	str	r3, [sp, #28]
 80029bc:	6973      	ldr	r3, [r6, #20]
 80029be:	ba1b      	rev	r3, r3
  keyaddr+=4;
  TDES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
  CRYP_KeyInit(& TDES_CRYP_KeyInitStructure);
 80029c0:	a801      	add	r0, sp, #4
  keyaddr+=4;
  TDES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
  keyaddr+=4;
  TDES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
  keyaddr+=4;
  TDES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 80029c2:	9308      	str	r3, [sp, #32]
  CRYP_KeyInit(& TDES_CRYP_KeyInitStructure);
 80029c4:	f7ff faa8 	bl	8001f18 <CRYP_KeyInit>
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	ba1b      	rev	r3, r3

  /* Initialization Vectors */
  TDES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 80029cc:	9309      	str	r3, [sp, #36]	; 0x24
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	ba1b      	rev	r3, r3
  ivaddr+=4;
  TDES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
  CRYP_IVInit(&TDES_CRYP_IVInitStructure);
 80029d2:	a809      	add	r0, sp, #36	; 0x24
  CRYP_KeyInit(& TDES_CRYP_KeyInitStructure);

  /* Initialization Vectors */
  TDES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
  ivaddr+=4;
  TDES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 80029d4:	930a      	str	r3, [sp, #40]	; 0x28
  CRYP_IVInit(&TDES_CRYP_IVInitStructure);
 80029d6:	f7ff fabd 	bl	8001f54 <CRYP_IVInit>

  /* Flush IN/OUT FIFO */
  CRYP_FIFOFlush();
 80029da:	f7ff facd 	bl	8001f78 <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 80029de:	2001      	movs	r0, #1
 80029e0:	f7ff fad2 	bl	8001f88 <CRYP_Cmd>

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 80029e4:	f1b8 0f00 	cmp.w	r8, #0
 80029e8:	d030      	beq.n	8002a4c <CRYP_TDES_CBC+0xec>
 80029ea:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80029ec:	2700      	movs	r7, #0
 80029ee:	f109 0408 	add.w	r4, r9, #8
 80029f2:	3508      	adds	r5, #8
    inputaddr+=4;
    CRYP_DataIn(*(uint32_t*)(inputaddr));
    inputaddr+=4;

    /* Wait until the complete message has been processed */
    counter = 0;
 80029f4:	463e      	mov	r6, r7
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
  {
    /* Write the Input block in the Input FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80029f6:	f854 0c08 	ldr.w	r0, [r4, #-8]
 80029fa:	f7ff fad3 	bl	8001fa4 <CRYP_DataIn>
    inputaddr+=4;
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80029fe:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8002a02:	f7ff facf 	bl	8001fa4 <CRYP_DataIn>
    inputaddr+=4;

    /* Wait until the complete message has been processed */
    counter = 0;
 8002a06:	960f      	str	r6, [sp, #60]	; 0x3c
 8002a08:	e000      	b.n	8002a0c <CRYP_TDES_CBC+0xac>
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
      counter++;
    }while ((counter != TDESBUSY_TIMEOUT) && (busystatus != RESET));
 8002a0a:	b190      	cbz	r0, 8002a32 <CRYP_TDES_CBC+0xd2>

    /* Wait until the complete message has been processed */
    counter = 0;
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8002a0c:	2010      	movs	r0, #16
 8002a0e:	f7ff fb7d 	bl	800210c <CRYP_GetFlagStatus>
      counter++;
 8002a12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002a14:	3301      	adds	r3, #1
 8002a16:	930f      	str	r3, [sp, #60]	; 0x3c
    }while ((counter != TDESBUSY_TIMEOUT) && (busystatus != RESET));
 8002a18:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002a1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a1e:	d1f4      	bne.n	8002a0a <CRYP_TDES_CBC+0xaa>

    if (busystatus != RESET)
 8002a20:	b138      	cbz	r0, 8002a32 <CRYP_TDES_CBC+0xd2>
   {
       status = ERROR;
 8002a22:	2400      	movs	r4, #0
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 8002a24:	2000      	movs	r0, #0
 8002a26:	f7ff faaf 	bl	8001f88 <CRYP_Cmd>

  return status; 
}
 8002a2a:	4620      	mov	r0, r4
 8002a2c:	b011      	add	sp, #68	; 0x44
 8002a2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8002a32:	f7ff fabd 	bl	8001fb0 <CRYP_DataOut>
 8002a36:	f845 0c08 	str.w	r0, [r5, #-8]
      outputaddr+=4;
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8002a3a:	f7ff fab9 	bl	8001fb0 <CRYP_DataOut>
  CRYP_FIFOFlush();

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 8002a3e:	3708      	adds	r7, #8
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
      outputaddr+=4;
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8002a40:	f845 0c04 	str.w	r0, [r5, #-4]
  CRYP_FIFOFlush();

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 8002a44:	3408      	adds	r4, #8
 8002a46:	3508      	adds	r5, #8
 8002a48:	45b8      	cmp	r8, r7
 8002a4a:	d8d4      	bhi.n	80029f6 <CRYP_TDES_CBC+0x96>
  CRYP_InitTypeDef TDES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef TDES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef TDES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
  uint32_t busystatus = 0;
  ErrorStatus status = SUCCESS;
 8002a4c:	2401      	movs	r4, #1
 8002a4e:	e7e9      	b.n	8002a24 <CRYP_TDES_CBC+0xc4>

08002a50 <DAC_DeInit>:
  * @brief  Deinitializes the DAC peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void DAC_DeInit(void)
{
 8002a50:	b508      	push	{r3, lr}
  /* Enable DAC reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, ENABLE);
 8002a52:	2101      	movs	r1, #1
 8002a54:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8002a58:	f002 fa5a 	bl	8004f10 <RCC_APB1PeriphResetCmd>
  /* Release DAC from reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, DISABLE);
 8002a5c:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8002a60:	2100      	movs	r1, #0
}
 8002a62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void DAC_DeInit(void)
{
  /* Enable DAC reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, ENABLE);
  /* Release DAC from reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, DISABLE);
 8002a66:	f002 ba53 	b.w	8004f10 <RCC_APB1PeriphResetCmd>
 8002a6a:	bf00      	nop

08002a6c <DAC_Init>:
  * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure that contains
  *         the configuration information for the  specified DAC channel.
  * @retval None
  */
void DAC_Init(uint32_t DAC_Channel, DAC_InitTypeDef* DAC_InitStruct)
{
 8002a6c:	b470      	push	{r4, r5, r6}
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8002a6e:	e891 0060 	ldmia.w	r1, {r5, r6}
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(DAC_InitStruct->DAC_OutputBuffer));

/*---------------------------- DAC CR Configuration --------------------------*/
  /* Get the DAC CR value */
  tmpreg1 = DAC->CR;
 8002a72:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8002a76:	688c      	ldr	r4, [r1, #8]
 8002a78:	68ca      	ldr	r2, [r1, #12]
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(DAC_InitStruct->DAC_OutputBuffer));

/*---------------------------- DAC CR Configuration --------------------------*/
  /* Get the DAC CR value */
  tmpreg1 = DAC->CR;
 8002a7a:	f2c4 0300 	movt	r3, #16384	; 0x4000
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8002a7e:	ea46 0105 	orr.w	r1, r6, r5
 8002a82:	430c      	orrs	r4, r1
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(DAC_InitStruct->DAC_OutputBuffer));

/*---------------------------- DAC CR Configuration --------------------------*/
  /* Get the DAC CR value */
  tmpreg1 = DAC->CR;
 8002a84:	681e      	ldr	r6, [r3, #0]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(CR_CLEAR_MASK << DAC_Channel);
 8002a86:	f640 75fe 	movw	r5, #4094	; 0xffe
 8002a8a:	4085      	lsls	r5, r0
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8002a8c:	4322      	orrs	r2, r4

/*---------------------------- DAC CR Configuration --------------------------*/
  /* Get the DAC CR value */
  tmpreg1 = DAC->CR;
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(CR_CLEAR_MASK << DAC_Channel);
 8002a8e:	ea26 0505 	bic.w	r5, r6, r5
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
             DAC_InitStruct->DAC_OutputBuffer);
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << DAC_Channel;
 8002a92:	fa12 f000 	lsls.w	r0, r2, r0
 8002a96:	4328      	orrs	r0, r5
  /* Write to DAC CR */
  DAC->CR = tmpreg1;
 8002a98:	6018      	str	r0, [r3, #0]
}
 8002a9a:	bc70      	pop	{r4, r5, r6}
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop

08002aa0 <DAC_StructInit>:
  */
void DAC_StructInit(DAC_InitTypeDef* DAC_InitStruct)
{
/*--------------- Reset DAC init structure parameters values -----------------*/
  /* Initialize the DAC_Trigger member */
  DAC_InitStruct->DAC_Trigger = DAC_Trigger_None;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	6003      	str	r3, [r0, #0]
  /* Initialize the DAC_WaveGeneration member */
  DAC_InitStruct->DAC_WaveGeneration = DAC_WaveGeneration_None;
 8002aa4:	6043      	str	r3, [r0, #4]
  /* Initialize the DAC_LFSRUnmask_TriangleAmplitude member */
  DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude = DAC_LFSRUnmask_Bit0;
 8002aa6:	6083      	str	r3, [r0, #8]
  /* Initialize the DAC_OutputBuffer member */
  DAC_InitStruct->DAC_OutputBuffer = DAC_OutputBuffer_Enable;
 8002aa8:	60c3      	str	r3, [r0, #12]
}
 8002aaa:	4770      	bx	lr

08002aac <DAC_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected DAC channel */
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
 8002aac:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8002ab0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002ab4:	681a      	ldr	r2, [r3, #0]
{
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002ab6:	b931      	cbnz	r1, 8002ac6 <DAC_Cmd+0x1a>
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
  }
  else
  {
    /* Disable the selected DAC channel */
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
 8002ab8:	2101      	movs	r1, #1
 8002aba:	fa11 f000 	lsls.w	r0, r1, r0
 8002abe:	ea22 0000 	bic.w	r0, r2, r0
 8002ac2:	6018      	str	r0, [r3, #0]
 8002ac4:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected DAC channel */
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
 8002ac6:	2101      	movs	r1, #1
 8002ac8:	fa11 f000 	lsls.w	r0, r1, r0
 8002acc:	4310      	orrs	r0, r2
 8002ace:	6018      	str	r0, [r3, #0]
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop

08002ad4 <DAC_SoftwareTriggerCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable software trigger for the selected DAC channel */
    DAC->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4);
 8002ad4:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8002ad8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002adc:	0900      	lsrs	r0, r0, #4
 8002ade:	685a      	ldr	r2, [r3, #4]
{
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002ae0:	b931      	cbnz	r1, 8002af0 <DAC_SoftwareTriggerCmd+0x1c>
    DAC->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4);
  }
  else
  {
    /* Disable software trigger for the selected DAC channel */
    DAC->SWTRIGR &= ~((uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4));
 8002ae2:	2101      	movs	r1, #1
 8002ae4:	fa11 f000 	lsls.w	r0, r1, r0
 8002ae8:	ea22 0000 	bic.w	r0, r2, r0
 8002aec:	6058      	str	r0, [r3, #4]
 8002aee:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable software trigger for the selected DAC channel */
    DAC->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4);
 8002af0:	2101      	movs	r1, #1
 8002af2:	fa11 f000 	lsls.w	r0, r1, r0
 8002af6:	4310      	orrs	r0, r2
 8002af8:	6058      	str	r0, [r3, #4]
 8002afa:	4770      	bx	lr

08002afc <DAC_DualSoftwareTriggerCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable software trigger for both DAC channels */
    DAC->SWTRIGR |= DUAL_SWTRIG_SET;
 8002afc:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8002b00:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002b04:	685a      	ldr	r2, [r3, #4]
void DAC_DualSoftwareTriggerCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002b06:	b918      	cbnz	r0, 8002b10 <DAC_DualSoftwareTriggerCmd+0x14>
    DAC->SWTRIGR |= DUAL_SWTRIG_SET;
  }
  else
  {
    /* Disable software trigger for both DAC channels */
    DAC->SWTRIGR &= DUAL_SWTRIG_RESET;
 8002b08:	f022 0203 	bic.w	r2, r2, #3
 8002b0c:	605a      	str	r2, [r3, #4]
 8002b0e:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable software trigger for both DAC channels */
    DAC->SWTRIGR |= DUAL_SWTRIG_SET;
 8002b10:	f042 0203 	orr.w	r2, r2, #3
 8002b14:	605a      	str	r2, [r3, #4]
 8002b16:	4770      	bx	lr

08002b18 <DAC_WaveGenerationCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected wave generation for the selected DAC channel */
    DAC->CR |= DAC_Wave << DAC_Channel;
 8002b18:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8002b1c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002b20:	4081      	lsls	r1, r0
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_WAVE(DAC_Wave)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002b22:	b922      	cbnz	r2, 8002b2e <DAC_WaveGenerationCmd+0x16>
    DAC->CR |= DAC_Wave << DAC_Channel;
  }
  else
  {
    /* Disable the selected wave generation for the selected DAC channel */
    DAC->CR &= ~(DAC_Wave << DAC_Channel);
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	ea22 0101 	bic.w	r1, r2, r1
 8002b2a:	6019      	str	r1, [r3, #0]
 8002b2c:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected wave generation for the selected DAC channel */
    DAC->CR |= DAC_Wave << DAC_Channel;
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	4311      	orrs	r1, r2
 8002b32:	6019      	str	r1, [r3, #0]
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop

08002b38 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 8002b38:	b082      	sub	sp, #8
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 8002b3a:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8002b3e:	f2c4 0300 	movt	r3, #16384	; 0x4000
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
  __IO uint32_t tmp = 0;
 8002b42:	2200      	movs	r2, #0
 8002b44:	9201      	str	r2, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 8002b46:	9301      	str	r3, [sp, #4]
  tmp += DHR12R1_OFFSET + DAC_Align;
 8002b48:	9b01      	ldr	r3, [sp, #4]
 8002b4a:	3308      	adds	r3, #8
 8002b4c:	181b      	adds	r3, r3, r0
 8002b4e:	9301      	str	r3, [sp, #4]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002b50:	9b01      	ldr	r3, [sp, #4]
 8002b52:	6019      	str	r1, [r3, #0]
}
 8002b54:	b002      	add	sp, #8
 8002b56:	4770      	bx	lr

08002b58 <DAC_SetChannel2Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel2Data(uint32_t DAC_Align, uint16_t Data)
{
 8002b58:	b082      	sub	sp, #8

  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE;
 8002b5a:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8002b5e:	f2c4 0300 	movt	r3, #16384	; 0x4000
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel2Data(uint32_t DAC_Align, uint16_t Data)
{
  __IO uint32_t tmp = 0;
 8002b62:	2200      	movs	r2, #0
 8002b64:	9201      	str	r2, [sp, #4]

  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE;
 8002b66:	9301      	str	r3, [sp, #4]
  tmp += DHR12R2_OFFSET + DAC_Align;
 8002b68:	9b01      	ldr	r3, [sp, #4]
 8002b6a:	3314      	adds	r3, #20
 8002b6c:	181b      	adds	r3, r3, r0
 8002b6e:	9301      	str	r3, [sp, #4]

  /* Set the DAC channel2 selected data holding register */
  *(__IO uint32_t *)tmp = Data;
 8002b70:	9b01      	ldr	r3, [sp, #4]
 8002b72:	6019      	str	r1, [r3, #0]
}
 8002b74:	b002      	add	sp, #8
 8002b76:	4770      	bx	lr

08002b78 <DAC_SetDualChannelData>:
  {
    data = ((uint32_t)Data2 << 16) | Data1;
  }
  
  tmp = (uint32_t)DAC_BASE;
  tmp += DHR12RD_OFFSET + DAC_Align;
 8002b78:	f247 4320 	movw	r3, #29728	; 0x7420
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data1));
  assert_param(IS_DAC_DATA(Data2));
  
  /* Calculate and set dual DAC data holding register value */
  if (DAC_Align == DAC_Align_8b_R)
 8002b7c:	2808      	cmp	r0, #8
  {
    data = ((uint32_t)Data2 << 16) | Data1;
  }
  
  tmp = (uint32_t)DAC_BASE;
  tmp += DHR12RD_OFFSET + DAC_Align;
 8002b7e:	f2c4 0300 	movt	r3, #16384	; 0x4000
  assert_param(IS_DAC_DATA(Data2));
  
  /* Calculate and set dual DAC data holding register value */
  if (DAC_Align == DAC_Align_8b_R)
  {
    data = ((uint32_t)Data2 << 8) | Data1; 
 8002b82:	bf0c      	ite	eq
 8002b84:	ea42 2101 	orreq.w	r1, r2, r1, lsl #8
  }
  else
  {
    data = ((uint32_t)Data2 << 16) | Data1;
 8002b88:	ea42 4101 	orrne.w	r1, r2, r1, lsl #16
  
  tmp = (uint32_t)DAC_BASE;
  tmp += DHR12RD_OFFSET + DAC_Align;

  /* Set the dual DAC selected data holding register */
  *(__IO uint32_t *)tmp = data;
 8002b8c:	50c1      	str	r1, [r0, r3]
}
 8002b8e:	4770      	bx	lr

08002b90 <DAC_GetDataOutputValue>:
  *            @arg DAC_Channel_1: DAC Channel1 selected
  *            @arg DAC_Channel_2: DAC Channel2 selected
  * @retval The selected DAC channel data output value.
  */
uint16_t DAC_GetDataOutputValue(uint32_t DAC_Channel)
{
 8002b90:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  
  tmp = (uint32_t) DAC_BASE ;
 8002b92:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8002b96:	f2c4 0300 	movt	r3, #16384	; 0x4000
  *            @arg DAC_Channel_2: DAC Channel2 selected
  * @retval The selected DAC channel data output value.
  */
uint16_t DAC_GetDataOutputValue(uint32_t DAC_Channel)
{
  __IO uint32_t tmp = 0;
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	9201      	str	r2, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  
  tmp = (uint32_t) DAC_BASE ;
 8002b9e:	9301      	str	r3, [sp, #4]
  tmp += DOR_OFFSET + ((uint32_t)DAC_Channel >> 2);
 8002ba0:	9b01      	ldr	r3, [sp, #4]
 8002ba2:	332c      	adds	r3, #44	; 0x2c
 8002ba4:	eb03 0390 	add.w	r3, r3, r0, lsr #2
 8002ba8:	9301      	str	r3, [sp, #4]
  
  /* Returns the DAC channel data output register value */
  return (uint16_t) (*(__IO uint32_t*) tmp);
 8002baa:	9b01      	ldr	r3, [sp, #4]
 8002bac:	6818      	ldr	r0, [r3, #0]
}
 8002bae:	b280      	uxth	r0, r0
 8002bb0:	b002      	add	sp, #8
 8002bb2:	4770      	bx	lr

08002bb4 <DAC_DMACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected DAC channel DMA request */
    DAC->CR |= (DAC_CR_DMAEN1 << DAC_Channel);
 8002bb4:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8002bb8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002bbc:	681a      	ldr	r2, [r3, #0]
{
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002bbe:	b939      	cbnz	r1, 8002bd0 <DAC_DMACmd+0x1c>
    DAC->CR |= (DAC_CR_DMAEN1 << DAC_Channel);
  }
  else
  {
    /* Disable the selected DAC channel DMA request */
    DAC->CR &= (~(DAC_CR_DMAEN1 << DAC_Channel));
 8002bc0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002bc4:	fa11 f000 	lsls.w	r0, r1, r0
 8002bc8:	ea22 0000 	bic.w	r0, r2, r0
 8002bcc:	6018      	str	r0, [r3, #0]
 8002bce:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected DAC channel DMA request */
    DAC->CR |= (DAC_CR_DMAEN1 << DAC_Channel);
 8002bd0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002bd4:	fa11 f000 	lsls.w	r0, r1, r0
 8002bd8:	4310      	orrs	r0, r2
 8002bda:	6018      	str	r0, [r3, #0]
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop

08002be0 <DAC_ITConfig>:
  assert_param(IS_DAC_IT(DAC_IT)); 

  if (NewState != DISABLE)
  {
    /* Enable the selected DAC interrupts */
    DAC->CR |=  (DAC_IT << DAC_Channel);
 8002be0:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8002be4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002be8:	4081      	lsls	r1, r0
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_DAC_IT(DAC_IT)); 

  if (NewState != DISABLE)
 8002bea:	b922      	cbnz	r2, 8002bf6 <DAC_ITConfig+0x16>
    DAC->CR |=  (DAC_IT << DAC_Channel);
  }
  else
  {
    /* Disable the selected DAC interrupts */
    DAC->CR &= (~(uint32_t)(DAC_IT << DAC_Channel));
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	ea22 0101 	bic.w	r1, r2, r1
 8002bf2:	6019      	str	r1, [r3, #0]
 8002bf4:	4770      	bx	lr
  assert_param(IS_DAC_IT(DAC_IT)); 

  if (NewState != DISABLE)
  {
    /* Enable the selected DAC interrupts */
    DAC->CR |=  (DAC_IT << DAC_Channel);
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	4311      	orrs	r1, r2
 8002bfa:	6019      	str	r1, [r3, #0]
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop

08002c00 <DAC_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_FLAG(DAC_FLAG));

  /* Check the status of the specified DAC flag */
  if ((DAC->SR & (DAC_FLAG << DAC_Channel)) != (uint8_t)RESET)
 8002c00:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8002c04:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002c08:	4081      	lsls	r1, r0
 8002c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  {
    /* DAC_FLAG is set */
    bitstatus = SET;
 8002c0c:	4219      	tst	r1, r3
    /* DAC_FLAG is reset */
    bitstatus = RESET;
  }
  /* Return the DAC_FLAG status */
  return  bitstatus;
}
 8002c0e:	bf0c      	ite	eq
 8002c10:	2000      	moveq	r0, #0
 8002c12:	2001      	movne	r0, #1
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop

08002c18 <DAC_ClearFlag>:
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_FLAG(DAC_FLAG));

  /* Clear the selected DAC flags */
  DAC->SR = (DAC_FLAG << DAC_Channel);
 8002c18:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8002c1c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002c20:	4081      	lsls	r1, r0
 8002c22:	6359      	str	r1, [r3, #52]	; 0x34
}
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop

08002c28 <DAC_GetITStatus>:
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_IT(DAC_IT));

  /* Get the DAC_IT enable bit status */
  enablestatus = (DAC->CR & (DAC_IT << DAC_Channel)) ;
 8002c28:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8002c2c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002c30:	4081      	lsls	r1, r0
 8002c32:	681a      	ldr	r2, [r3, #0]
  
  /* Check the status of the specified DAC interrupt */
  if (((DAC->SR & (DAC_IT << DAC_Channel)) != (uint32_t)RESET) && enablestatus)
 8002c34:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8002c36:	4008      	ands	r0, r1
 8002c38:	d003      	beq.n	8002c42 <DAC_GetITStatus+0x1a>
  {
    /* DAC_IT is set */
    bitstatus = SET;
 8002c3a:	4211      	tst	r1, r2
 8002c3c:	bf0c      	ite	eq
 8002c3e:	2000      	moveq	r0, #0
 8002c40:	2001      	movne	r0, #1
    /* DAC_IT is reset */
    bitstatus = RESET;
  }
  /* Return the DAC_IT status */
  return  bitstatus;
}
 8002c42:	4770      	bx	lr

08002c44 <DAC_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_IT(DAC_IT)); 

  /* Clear the selected DAC interrupt pending bits */
  DAC->SR = (DAC_IT << DAC_Channel);
 8002c44:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8002c48:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002c4c:	4081      	lsls	r1, r0
 8002c4e:	6359      	str	r1, [r3, #52]	; 0x34
}
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop

08002c54 <DBGMCU_GetREVID>:
  * @param  None
  * @retval Device revision identifier
  */
uint32_t DBGMCU_GetREVID(void)
{
   return(DBGMCU->IDCODE >> 16);
 8002c54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c58:	f2ce 0304 	movt	r3, #57348	; 0xe004
 8002c5c:	6818      	ldr	r0, [r3, #0]
}
 8002c5e:	0c00      	lsrs	r0, r0, #16
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop

08002c64 <DBGMCU_GetDEVID>:
  * @param  None
  * @retval Device identifier
  */
uint32_t DBGMCU_GetDEVID(void)
{
   return(DBGMCU->IDCODE & IDCODE_DEVID_MASK);
 8002c64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c68:	f2ce 0304 	movt	r3, #57348	; 0xe004
 8002c6c:	6818      	ldr	r0, [r3, #0]
}
 8002c6e:	0500      	lsls	r0, r0, #20
 8002c70:	0d00      	lsrs	r0, r0, #20
 8002c72:	4770      	bx	lr

08002c74 <DBGMCU_Config>:
  /* Check the parameters */
  assert_param(IS_DBGMCU_PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    DBGMCU->CR |= DBGMCU_Periph;
 8002c74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c78:	f2ce 0304 	movt	r3, #57348	; 0xe004
 8002c7c:	685a      	ldr	r2, [r3, #4]
void DBGMCU_Config(uint32_t DBGMCU_Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_DBGMCU_PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002c7e:	b919      	cbnz	r1, 8002c88 <DBGMCU_Config+0x14>
  {
    DBGMCU->CR |= DBGMCU_Periph;
  }
  else
  {
    DBGMCU->CR &= ~DBGMCU_Periph;
 8002c80:	ea22 0000 	bic.w	r0, r2, r0
 8002c84:	6058      	str	r0, [r3, #4]
 8002c86:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_DBGMCU_PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    DBGMCU->CR |= DBGMCU_Periph;
 8002c88:	4310      	orrs	r0, r2
 8002c8a:	6058      	str	r0, [r3, #4]
 8002c8c:	4770      	bx	lr
 8002c8e:	bf00      	nop

08002c90 <DBGMCU_APB1PeriphConfig>:
  assert_param(IS_DBGMCU_APB1PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    DBGMCU->APB1FZ |= DBGMCU_Periph;
 8002c90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c94:	f2ce 0304 	movt	r3, #57348	; 0xe004
 8002c98:	689a      	ldr	r2, [r3, #8]
{
  /* Check the parameters */
  assert_param(IS_DBGMCU_APB1PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002c9a:	b919      	cbnz	r1, 8002ca4 <DBGMCU_APB1PeriphConfig+0x14>
  {
    DBGMCU->APB1FZ |= DBGMCU_Periph;
  }
  else
  {
    DBGMCU->APB1FZ &= ~DBGMCU_Periph;
 8002c9c:	ea22 0000 	bic.w	r0, r2, r0
 8002ca0:	6098      	str	r0, [r3, #8]
 8002ca2:	4770      	bx	lr
  assert_param(IS_DBGMCU_APB1PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    DBGMCU->APB1FZ |= DBGMCU_Periph;
 8002ca4:	4310      	orrs	r0, r2
 8002ca6:	6098      	str	r0, [r3, #8]
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop

08002cac <DBGMCU_APB2PeriphConfig>:
  assert_param(IS_DBGMCU_APB2PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    DBGMCU->APB2FZ |= DBGMCU_Periph;
 8002cac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002cb0:	f2ce 0304 	movt	r3, #57348	; 0xe004
 8002cb4:	68da      	ldr	r2, [r3, #12]
{
  /* Check the parameters */
  assert_param(IS_DBGMCU_APB2PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002cb6:	b919      	cbnz	r1, 8002cc0 <DBGMCU_APB2PeriphConfig+0x14>
  {
    DBGMCU->APB2FZ |= DBGMCU_Periph;
  }
  else
  {
    DBGMCU->APB2FZ &= ~DBGMCU_Periph;
 8002cb8:	ea22 0000 	bic.w	r0, r2, r0
 8002cbc:	60d8      	str	r0, [r3, #12]
 8002cbe:	4770      	bx	lr
  assert_param(IS_DBGMCU_APB2PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    DBGMCU->APB2FZ |= DBGMCU_Periph;
 8002cc0:	4310      	orrs	r0, r2
 8002cc2:	60d8      	str	r0, [r3, #12]
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop

08002cc8 <DCMI_DeInit>:
  * @param  None
  * @retval None
  */
void DCMI_DeInit(void)
{
  DCMI->CR = 0x0;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8002cce:	2200      	movs	r2, #0
  DCMI->IER = 0x0;
  DCMI->ICR = 0x1F;
 8002cd0:	211f      	movs	r1, #31
  * @param  None
  * @retval None
  */
void DCMI_DeInit(void)
{
  DCMI->CR = 0x0;
 8002cd2:	601a      	str	r2, [r3, #0]
  DCMI->IER = 0x0;
 8002cd4:	60da      	str	r2, [r3, #12]
  DCMI->ICR = 0x1F;
 8002cd6:	6159      	str	r1, [r3, #20]
  DCMI->ESCR = 0x0;
 8002cd8:	619a      	str	r2, [r3, #24]
  DCMI->ESUR = 0x0;
 8002cda:	61da      	str	r2, [r3, #28]
  DCMI->CWSTRTR = 0x0;
 8002cdc:	621a      	str	r2, [r3, #32]
  DCMI->CWSIZER = 0x0;
 8002cde:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop

08002ce4 <DCMI_Init>:
  assert_param(IS_DCMI_CAPTURE_RATE(DCMI_InitStruct->DCMI_CaptureRate));
  assert_param(IS_DCMI_EXTENDED_DATA(DCMI_InitStruct->DCMI_ExtendedDataMode));

  /* The DCMI configuration registers should be programmed correctly before 
  enabling the CR_ENABLE Bit and the CR_CAPTURE Bit */
  DCMI->CR &= ~(DCMI_CR_ENABLE | DCMI_CR_CAPTURE);
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	f2c5 0305 	movt	r3, #20485	; 0x5005
  * @param  DCMI_InitStruct: pointer to a DCMI_InitTypeDef structure that contains 
  *         the configuration information for the DCMI.
  * @retval None
  */
void DCMI_Init(DCMI_InitTypeDef* DCMI_InitStruct)
{
 8002cea:	b4f0      	push	{r4, r5, r6, r7}
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
                     DCMI_InitStruct->DCMI_SynchroMode |
                     DCMI_InitStruct->DCMI_PCKPolarity |
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
 8002cec:	f8b0 c002 	ldrh.w	ip, [r0, #2]
  assert_param(IS_DCMI_CAPTURE_RATE(DCMI_InitStruct->DCMI_CaptureRate));
  assert_param(IS_DCMI_EXTENDED_DATA(DCMI_InitStruct->DCMI_ExtendedDataMode));

  /* The DCMI configuration registers should be programmed correctly before 
  enabling the CR_ENABLE Bit and the CR_CAPTURE Bit */
  DCMI->CR &= ~(DCMI_CR_ENABLE | DCMI_CR_CAPTURE);
 8002cf0:	681e      	ldr	r6, [r3, #0]
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
                     DCMI_InitStruct->DCMI_SynchroMode |
                     DCMI_InitStruct->DCMI_PCKPolarity |
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
 8002cf2:	8802      	ldrh	r2, [r0, #0]
 8002cf4:	8887      	ldrh	r7, [r0, #4]
 8002cf6:	88c1      	ldrh	r1, [r0, #6]
 8002cf8:	8905      	ldrh	r5, [r0, #8]
 8002cfa:	8944      	ldrh	r4, [r0, #10]
 8002cfc:	8980      	ldrh	r0, [r0, #12]
  assert_param(IS_DCMI_CAPTURE_RATE(DCMI_InitStruct->DCMI_CaptureRate));
  assert_param(IS_DCMI_EXTENDED_DATA(DCMI_InitStruct->DCMI_ExtendedDataMode));

  /* The DCMI configuration registers should be programmed correctly before 
  enabling the CR_ENABLE Bit and the CR_CAPTURE Bit */
  DCMI->CR &= ~(DCMI_CR_ENABLE | DCMI_CR_CAPTURE);
 8002cfe:	f426 4680 	bic.w	r6, r6, #16384	; 0x4000
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
                     DCMI_InitStruct->DCMI_SynchroMode |
                     DCMI_InitStruct->DCMI_PCKPolarity |
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
 8002d02:	ea4c 0202 	orr.w	r2, ip, r2
  assert_param(IS_DCMI_CAPTURE_RATE(DCMI_InitStruct->DCMI_CaptureRate));
  assert_param(IS_DCMI_EXTENDED_DATA(DCMI_InitStruct->DCMI_ExtendedDataMode));

  /* The DCMI configuration registers should be programmed correctly before 
  enabling the CR_ENABLE Bit and the CR_CAPTURE Bit */
  DCMI->CR &= ~(DCMI_CR_ENABLE | DCMI_CR_CAPTURE);
 8002d06:	f026 0601 	bic.w	r6, r6, #1
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
                     DCMI_InitStruct->DCMI_SynchroMode |
                     DCMI_InitStruct->DCMI_PCKPolarity |
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
 8002d0a:	433a      	orrs	r2, r7
  assert_param(IS_DCMI_CAPTURE_RATE(DCMI_InitStruct->DCMI_CaptureRate));
  assert_param(IS_DCMI_EXTENDED_DATA(DCMI_InitStruct->DCMI_ExtendedDataMode));

  /* The DCMI configuration registers should be programmed correctly before 
  enabling the CR_ENABLE Bit and the CR_CAPTURE Bit */
  DCMI->CR &= ~(DCMI_CR_ENABLE | DCMI_CR_CAPTURE);
 8002d0c:	601e      	str	r6, [r3, #0]
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
                     DCMI_InitStruct->DCMI_SynchroMode |
                     DCMI_InitStruct->DCMI_PCKPolarity |
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
 8002d0e:	430a      	orrs	r2, r1
 8002d10:	432a      	orrs	r2, r5
  /* The DCMI configuration registers should be programmed correctly before 
  enabling the CR_ENABLE Bit and the CR_CAPTURE Bit */
  DCMI->CR &= ~(DCMI_CR_ENABLE | DCMI_CR_CAPTURE);
   
  /* Reset the old DCMI configuration */
  temp = DCMI->CR;
 8002d12:	6819      	ldr	r1, [r3, #0]
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
                     DCMI_InitStruct->DCMI_SynchroMode |
                     DCMI_InitStruct->DCMI_PCKPolarity |
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
 8002d14:	4322      	orrs	r2, r4
  DCMI->CR &= ~(DCMI_CR_ENABLE | DCMI_CR_CAPTURE);
   
  /* Reset the old DCMI configuration */
  temp = DCMI->CR;
  
  temp &= ~((uint32_t)DCMI_CR_CM     | DCMI_CR_ESS   | DCMI_CR_PCKPOL |
 8002d16:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
                     DCMI_InitStruct->DCMI_SynchroMode |
                     DCMI_InitStruct->DCMI_PCKPolarity |
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
 8002d1a:	4302      	orrs	r2, r0
  DCMI->CR &= ~(DCMI_CR_ENABLE | DCMI_CR_CAPTURE);
   
  /* Reset the old DCMI configuration */
  temp = DCMI->CR;
  
  temp &= ~((uint32_t)DCMI_CR_CM     | DCMI_CR_ESS   | DCMI_CR_PCKPOL |
 8002d1c:	f021 0102 	bic.w	r1, r1, #2
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
                     DCMI_InitStruct->DCMI_SynchroMode |
                     DCMI_InitStruct->DCMI_PCKPolarity |
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
 8002d20:	b292      	uxth	r2, r2
  temp &= ~((uint32_t)DCMI_CR_CM     | DCMI_CR_ESS   | DCMI_CR_PCKPOL |
                      DCMI_CR_HSPOL  | DCMI_CR_VSPOL | DCMI_CR_FCRC_0 | 
                      DCMI_CR_FCRC_1 | DCMI_CR_EDM_0 | DCMI_CR_EDM_1); 
                  
  /* Sets the new configuration of the DCMI peripheral */
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
 8002d22:	430a      	orrs	r2, r1
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
                     DCMI_InitStruct->DCMI_ExtendedDataMode);

  DCMI->CR = temp;                              
 8002d24:	601a      	str	r2, [r3, #0]
}
 8002d26:	bcf0      	pop	{r4, r5, r6, r7}
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop

08002d2c <DCMI_StructInit>:
  * @retval None
  */
void DCMI_StructInit(DCMI_InitTypeDef* DCMI_InitStruct)
{
  /* Set the default configuration */
  DCMI_InitStruct->DCMI_CaptureMode = DCMI_CaptureMode_Continuous;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	8003      	strh	r3, [r0, #0]
  DCMI_InitStruct->DCMI_SynchroMode = DCMI_SynchroMode_Hardware;
 8002d30:	8043      	strh	r3, [r0, #2]
  DCMI_InitStruct->DCMI_PCKPolarity = DCMI_PCKPolarity_Falling;
 8002d32:	8083      	strh	r3, [r0, #4]
  DCMI_InitStruct->DCMI_VSPolarity = DCMI_VSPolarity_Low;
 8002d34:	80c3      	strh	r3, [r0, #6]
  DCMI_InitStruct->DCMI_HSPolarity = DCMI_HSPolarity_Low;
 8002d36:	8103      	strh	r3, [r0, #8]
  DCMI_InitStruct->DCMI_CaptureRate = DCMI_CaptureRate_All_Frame;
 8002d38:	8143      	strh	r3, [r0, #10]
  DCMI_InitStruct->DCMI_ExtendedDataMode = DCMI_ExtendedDataMode_8b;
 8002d3a:	8183      	strh	r3, [r0, #12]
}
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop

08002d40 <DCMI_CROPConfig>:
  * @param  DCMI_CROPInitStruct:  pointer to a DCMI_CROPInitTypeDef structure that 
  *         contains the configuration information for the DCMI peripheral CROP mode.
  * @retval None
  */
void DCMI_CROPConfig(DCMI_CROPInitTypeDef* DCMI_CROPInitStruct)
{  
 8002d40:	b430      	push	{r4, r5}
  /* Sets the CROP window coordinates */
  DCMI->CWSTRTR = (uint32_t)((uint32_t)DCMI_CROPInitStruct->DCMI_HorizontalOffsetCount |
 8002d42:	8841      	ldrh	r1, [r0, #2]
                  ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalStartLine << 16));
 8002d44:	8805      	ldrh	r5, [r0, #0]

  /* Sets the CROP window size */
  DCMI->CWSIZER = (uint32_t)(DCMI_CROPInitStruct->DCMI_CaptureCount |
                  ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalLineCount << 16));
 8002d46:	8884      	ldrh	r4, [r0, #4]
  /* Sets the CROP window coordinates */
  DCMI->CWSTRTR = (uint32_t)((uint32_t)DCMI_CROPInitStruct->DCMI_HorizontalOffsetCount |
                  ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalStartLine << 16));

  /* Sets the CROP window size */
  DCMI->CWSIZER = (uint32_t)(DCMI_CROPInitStruct->DCMI_CaptureCount |
 8002d48:	88c2      	ldrh	r2, [r0, #6]
  * @retval None
  */
void DCMI_CROPConfig(DCMI_CROPInitTypeDef* DCMI_CROPInitStruct)
{  
  /* Sets the CROP window coordinates */
  DCMI->CWSTRTR = (uint32_t)((uint32_t)DCMI_CROPInitStruct->DCMI_HorizontalOffsetCount |
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8002d50:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
                  ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalStartLine << 16));

  /* Sets the CROP window size */
  DCMI->CWSIZER = (uint32_t)(DCMI_CROPInitStruct->DCMI_CaptureCount |
 8002d54:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
  * @retval None
  */
void DCMI_CROPConfig(DCMI_CROPInitTypeDef* DCMI_CROPInitStruct)
{  
  /* Sets the CROP window coordinates */
  DCMI->CWSTRTR = (uint32_t)((uint32_t)DCMI_CROPInitStruct->DCMI_HorizontalOffsetCount |
 8002d58:	6219      	str	r1, [r3, #32]
                  ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalStartLine << 16));

  /* Sets the CROP window size */
  DCMI->CWSIZER = (uint32_t)(DCMI_CROPInitStruct->DCMI_CaptureCount |
 8002d5a:	625a      	str	r2, [r3, #36]	; 0x24
                  ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalLineCount << 16));
}
 8002d5c:	bc30      	pop	{r4, r5}
 8002d5e:	4770      	bx	lr

08002d60 <DCMI_CROPCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
  {
    /* Enable the DCMI Crop feature */
    DCMI->CR |= (uint32_t)DCMI_CR_CROP;
 8002d60:	2300      	movs	r3, #0
 8002d62:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8002d66:	681a      	ldr	r2, [r3, #0]
void DCMI_CROPCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 8002d68:	b918      	cbnz	r0, 8002d72 <DCMI_CROPCmd+0x12>
    DCMI->CR |= (uint32_t)DCMI_CR_CROP;
  }
  else
  {
    /* Disable the DCMI Crop feature */
    DCMI->CR &= ~(uint32_t)DCMI_CR_CROP;
 8002d6a:	f022 0204 	bic.w	r2, r2, #4
 8002d6e:	601a      	str	r2, [r3, #0]
 8002d70:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
  {
    /* Enable the DCMI Crop feature */
    DCMI->CR |= (uint32_t)DCMI_CR_CROP;
 8002d72:	f042 0204 	orr.w	r2, r2, #4
 8002d76:	601a      	str	r2, [r3, #0]
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop

08002d7c <DCMI_SetEmbeddedSynchroCodes>:
  */
void DCMI_SetEmbeddedSynchroCodes(DCMI_CodesInitTypeDef* DCMI_CodesInitStruct)
{
  DCMI->ESCR = (uint32_t)(DCMI_CodesInitStruct->DCMI_FrameStartCode |
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineStartCode << 8)|
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineEndCode << 16)|
 8002d7c:	7882      	ldrb	r2, [r0, #2]
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_FrameEndCode << 24));
 8002d7e:	78c1      	ldrb	r1, [r0, #3]
  * @param  DCMI_CodesInitTypeDef: pointer to a DCMI_CodesInitTypeDef structure that
  *         contains the embedded synchronization codes for the DCMI peripheral.
  * @retval None
  */
void DCMI_SetEmbeddedSynchroCodes(DCMI_CodesInitTypeDef* DCMI_CodesInitStruct)
{
 8002d80:	b430      	push	{r4, r5}
  DCMI->ESCR = (uint32_t)(DCMI_CodesInitStruct->DCMI_FrameStartCode |
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineStartCode << 8)|
 8002d82:	7845      	ldrb	r5, [r0, #1]
  *         contains the embedded synchronization codes for the DCMI peripheral.
  * @retval None
  */
void DCMI_SetEmbeddedSynchroCodes(DCMI_CodesInitTypeDef* DCMI_CodesInitStruct)
{
  DCMI->ESCR = (uint32_t)(DCMI_CodesInitStruct->DCMI_FrameStartCode |
 8002d84:	7804      	ldrb	r4, [r0, #0]
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineStartCode << 8)|
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineEndCode << 16)|
 8002d86:	0412      	lsls	r2, r2, #16
  *         contains the embedded synchronization codes for the DCMI peripheral.
  * @retval None
  */
void DCMI_SetEmbeddedSynchroCodes(DCMI_CodesInitTypeDef* DCMI_CodesInitStruct)
{
  DCMI->ESCR = (uint32_t)(DCMI_CodesInitStruct->DCMI_FrameStartCode |
 8002d88:	2300      	movs	r3, #0
 8002d8a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineStartCode << 8)|
 8002d8e:	4322      	orrs	r2, r4
  *         contains the embedded synchronization codes for the DCMI peripheral.
  * @retval None
  */
void DCMI_SetEmbeddedSynchroCodes(DCMI_CodesInitTypeDef* DCMI_CodesInitStruct)
{
  DCMI->ESCR = (uint32_t)(DCMI_CodesInitStruct->DCMI_FrameStartCode |
 8002d90:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8002d94:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002d98:	619a      	str	r2, [r3, #24]
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineStartCode << 8)|
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineEndCode << 16)|
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_FrameEndCode << 24));
}
 8002d9a:	bc30      	pop	{r4, r5}
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop

08002da0 <DCMI_JPEGCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 
  if (NewState != DISABLE)
  {
    /* Enable the DCMI JPEG format */
    DCMI->CR |= (uint32_t)DCMI_CR_JPEG;
 8002da0:	2300      	movs	r3, #0
 8002da2:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8002da6:	681a      	ldr	r2, [r3, #0]
void DCMI_JPEGCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 
  if (NewState != DISABLE)
 8002da8:	b918      	cbnz	r0, 8002db2 <DCMI_JPEGCmd+0x12>
    DCMI->CR |= (uint32_t)DCMI_CR_JPEG;
  }
  else
  {
    /* Disable the DCMI JPEG format */
    DCMI->CR &= ~(uint32_t)DCMI_CR_JPEG;
 8002daa:	f022 0208 	bic.w	r2, r2, #8
 8002dae:	601a      	str	r2, [r3, #0]
 8002db0:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 
  if (NewState != DISABLE)
  {
    /* Enable the DCMI JPEG format */
    DCMI->CR |= (uint32_t)DCMI_CR_JPEG;
 8002db2:	f042 0208 	orr.w	r2, r2, #8
 8002db6:	601a      	str	r2, [r3, #0]
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop

08002dbc <DCMI_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the DCMI by setting ENABLE bit */
    DCMI->CR |= (uint32_t)DCMI_CR_ENABLE;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8002dc2:	681a      	ldr	r2, [r3, #0]
void DCMI_Cmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002dc4:	b918      	cbnz	r0, 8002dce <DCMI_Cmd+0x12>
    DCMI->CR |= (uint32_t)DCMI_CR_ENABLE;
  }
  else
  {
    /* Disable the DCMI by clearing ENABLE bit */
    DCMI->CR &= ~(uint32_t)DCMI_CR_ENABLE;
 8002dc6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002dca:	601a      	str	r2, [r3, #0]
 8002dcc:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the DCMI by setting ENABLE bit */
    DCMI->CR |= (uint32_t)DCMI_CR_ENABLE;
 8002dce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002dd2:	601a      	str	r2, [r3, #0]
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop

08002dd8 <DCMI_CaptureCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
  {
    /* Enable the DCMI Capture */
    DCMI->CR |= (uint32_t)DCMI_CR_CAPTURE;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8002dde:	681a      	ldr	r2, [r3, #0]
void DCMI_CaptureCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 8002de0:	b918      	cbnz	r0, 8002dea <DCMI_CaptureCmd+0x12>
    DCMI->CR |= (uint32_t)DCMI_CR_CAPTURE;
  }
  else
  {
    /* Disable the DCMI Capture */
    DCMI->CR &= ~(uint32_t)DCMI_CR_CAPTURE;
 8002de2:	f022 0201 	bic.w	r2, r2, #1
 8002de6:	601a      	str	r2, [r3, #0]
 8002de8:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
  {
    /* Enable the DCMI Capture */
    DCMI->CR |= (uint32_t)DCMI_CR_CAPTURE;
 8002dea:	f042 0201 	orr.w	r2, r2, #1
 8002dee:	601a      	str	r2, [r3, #0]
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop

08002df4 <DCMI_ReadData>:
  * @param  None 
  * @retval Data register value
  */
uint32_t DCMI_ReadData(void)
{
  return DCMI->DR;
 8002df4:	2300      	movs	r3, #0
 8002df6:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8002dfa:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop

08002e00 <DCMI_ITConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Interrupt sources */
    DCMI->IER |= DCMI_IT;
 8002e00:	2300      	movs	r3, #0
 8002e02:	f2c5 0305 	movt	r3, #20485	; 0x5005
{
  /* Check the parameters */
  assert_param(IS_DCMI_CONFIG_IT(DCMI_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002e06:	b929      	cbnz	r1, 8002e14 <DCMI_ITConfig+0x14>
    DCMI->IER |= DCMI_IT;
  }
  else
  {
    /* Disable the Interrupt sources */
    DCMI->IER &= (uint16_t)(~DCMI_IT);
 8002e08:	68da      	ldr	r2, [r3, #12]
 8002e0a:	43c0      	mvns	r0, r0
 8002e0c:	b280      	uxth	r0, r0
 8002e0e:	4010      	ands	r0, r2
 8002e10:	60d8      	str	r0, [r3, #12]
 8002e12:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Interrupt sources */
    DCMI->IER |= DCMI_IT;
 8002e14:	68da      	ldr	r2, [r3, #12]
 8002e16:	4310      	orrs	r0, r2
 8002e18:	60d8      	str	r0, [r3, #12]
 8002e1a:	4770      	bx	lr

08002e1c <DCMI_GetFlagStatus>:
  assert_param(IS_DCMI_GET_FLAG(DCMI_FLAG));
  
  /* Get the DCMI register index */
  dcmireg = (((uint16_t)DCMI_FLAG) >> 12);
  
  if (dcmireg == 0x00) /* The FLAG is in RISR register */
 8002e1c:	0b03      	lsrs	r3, r0, #12
 8002e1e:	d108      	bne.n	8002e32 <DCMI_GetFlagStatus+0x16>
  {
    tempreg= DCMI->RISR;
 8002e20:	2300      	movs	r3, #0
 8002e22:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8002e26:	689b      	ldr	r3, [r3, #8]
    tempreg = DCMI->MISR;
  }
  
  if ((tempreg & DCMI_FLAG) != (uint16_t)RESET )
  {
    bitstatus = SET;
 8002e28:	4203      	tst	r3, r0
  {
    bitstatus = RESET;
  }
  /* Return the DCMI_FLAG status */
  return  bitstatus;
}
 8002e2a:	bf0c      	ite	eq
 8002e2c:	2000      	moveq	r0, #0
 8002e2e:	2001      	movne	r0, #1
 8002e30:	4770      	bx	lr
  
  if (dcmireg == 0x00) /* The FLAG is in RISR register */
  {
    tempreg= DCMI->RISR;
  }
  else if (dcmireg == 0x02) /* The FLAG is in SR register */
 8002e32:	2b02      	cmp	r3, #2
  {
    tempreg = DCMI->SR;
 8002e34:	f04f 0300 	mov.w	r3, #0
 8002e38:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8002e3c:	bf0c      	ite	eq
 8002e3e:	685b      	ldreq	r3, [r3, #4]
  }
  else /* The FLAG is in MISR register */
  {
    tempreg = DCMI->MISR;
 8002e40:	691b      	ldrne	r3, [r3, #16]
 8002e42:	e7f1      	b.n	8002e28 <DCMI_GetFlagStatus+0xc>

08002e44 <DCMI_ClearFlag>:
  assert_param(IS_DCMI_CLEAR_FLAG(DCMI_FLAG));
  
  /* Clear the flag by writing in the ICR register 1 in the corresponding 
  Flag position*/
  
  DCMI->ICR = DCMI_FLAG;
 8002e44:	2300      	movs	r3, #0
 8002e46:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8002e4a:	6158      	str	r0, [r3, #20]
}
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop

08002e50 <DCMI_GetITStatus>:
  uint32_t itstatus = 0;
  
  /* Check the parameters */
  assert_param(IS_DCMI_GET_IT(DCMI_IT));
  
  itstatus = DCMI->MISR & DCMI_IT; /* Only masked interrupts are checked */
 8002e50:	2300      	movs	r3, #0
 8002e52:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8002e56:	691b      	ldr	r3, [r3, #16]
  
  if ((itstatus != (uint16_t)RESET))
  {
    bitstatus = SET;
 8002e58:	4218      	tst	r0, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8002e5a:	bf0c      	ite	eq
 8002e5c:	2000      	moveq	r0, #0
 8002e5e:	2001      	movne	r0, #1
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop

08002e64 <DCMI_ClearITPendingBit>:
void DCMI_ClearITPendingBit(uint16_t DCMI_IT)
{
  /* Clear the interrupt pending Bit by writing in the ICR register 1 in the 
  corresponding pending Bit position*/
  
  DCMI->ICR = DCMI_IT;
 8002e64:	2300      	movs	r3, #0
 8002e66:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8002e6a:	6158      	str	r0, [r3, #20]
}
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop

08002e70 <DMA_DeInit>:
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 8002e70:	6801      	ldr	r1, [r0, #0]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 8002e72:	f246 0210 	movw	r2, #24592	; 0x6010

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 8002e76:	2300      	movs	r3, #0
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 8002e78:	f021 0101 	bic.w	r1, r1, #1

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 8002e7c:	f2c4 0202 	movt	r2, #16386	; 0x4002
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 8002e80:	6001      	str	r1, [r0, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 8002e82:	6003      	str	r3, [r0, #0]
  
  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 8002e84:	6043      	str	r3, [r0, #4]
  
  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 8002e86:	6083      	str	r3, [r0, #8]
  
  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 8002e88:	60c3      	str	r3, [r0, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 8002e8a:	6103      	str	r3, [r0, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 8002e8c:	2321      	movs	r3, #33	; 0x21

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 8002e8e:	4290      	cmp	r0, r2

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 8002e90:	6143      	str	r3, [r0, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 8002e92:	d06b      	beq.n	8002f6c <DMA_DeInit+0xfc>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream1)
 8002e94:	f246 0328 	movw	r3, #24616	; 0x6028
 8002e98:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002e9c:	4298      	cmp	r0, r3
 8002e9e:	d06c      	beq.n	8002f7a <DMA_DeInit+0x10a>
  {
    /* Reset interrupt pending bits for DMA1 Stream1 */
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream2)
 8002ea0:	f246 0340 	movw	r3, #24640	; 0x6040
 8002ea4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002ea8:	4298      	cmp	r0, r3
 8002eaa:	d06e      	beq.n	8002f8a <DMA_DeInit+0x11a>
  {
    /* Reset interrupt pending bits for DMA1 Stream2 */
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream3)
 8002eac:	f246 0358 	movw	r3, #24664	; 0x6058
 8002eb0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002eb4:	4298      	cmp	r0, r3
 8002eb6:	d070      	beq.n	8002f9a <DMA_DeInit+0x12a>
  {
    /* Reset interrupt pending bits for DMA1 Stream3 */
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream4)
 8002eb8:	f246 0370 	movw	r3, #24688	; 0x6070
 8002ebc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002ec0:	4298      	cmp	r0, r3
 8002ec2:	d072      	beq.n	8002faa <DMA_DeInit+0x13a>
  {
    /* Reset interrupt pending bits for DMA1 Stream4 */
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream5)
 8002ec4:	f246 0388 	movw	r3, #24712	; 0x6088
 8002ec8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002ecc:	4298      	cmp	r0, r3
 8002ece:	d075      	beq.n	8002fbc <DMA_DeInit+0x14c>
  {
    /* Reset interrupt pending bits for DMA1 Stream5 */
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream6)
 8002ed0:	f246 03a0 	movw	r3, #24736	; 0x60a0
 8002ed4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002ed8:	4298      	cmp	r0, r3
 8002eda:	d03e      	beq.n	8002f5a <DMA_DeInit+0xea>
  {
    /* Reset interrupt pending bits for DMA1 Stream6 */
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream7)
 8002edc:	f246 03b8 	movw	r3, #24760	; 0x60b8
 8002ee0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002ee4:	4298      	cmp	r0, r3
 8002ee6:	d073      	beq.n	8002fd0 <DMA_DeInit+0x160>
  {
    /* Reset interrupt pending bits for DMA1 Stream7 */
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream0)
 8002ee8:	f246 4310 	movw	r3, #25616	; 0x6410
 8002eec:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002ef0:	4298      	cmp	r0, r3
 8002ef2:	d075      	beq.n	8002fe0 <DMA_DeInit+0x170>
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream1)
 8002ef4:	f246 4328 	movw	r3, #25640	; 0x6428
 8002ef8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002efc:	4298      	cmp	r0, r3
 8002efe:	d076      	beq.n	8002fee <DMA_DeInit+0x17e>
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream2)
 8002f00:	f246 4340 	movw	r3, #25664	; 0x6440
 8002f04:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002f08:	4298      	cmp	r0, r3
 8002f0a:	d078      	beq.n	8002ffe <DMA_DeInit+0x18e>
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream3)
 8002f0c:	f246 4358 	movw	r3, #25688	; 0x6458
 8002f10:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002f14:	4298      	cmp	r0, r3
 8002f16:	d07a      	beq.n	800300e <DMA_DeInit+0x19e>
  {
    /* Reset interrupt pending bits for DMA2 Stream3 */
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream4)
 8002f18:	f246 4370 	movw	r3, #25712	; 0x6470
 8002f1c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002f20:	4298      	cmp	r0, r3
 8002f22:	d07c      	beq.n	800301e <DMA_DeInit+0x1ae>
  {
    /* Reset interrupt pending bits for DMA2 Stream4 */
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream5)
 8002f24:	f246 4388 	movw	r3, #25736	; 0x6488
 8002f28:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002f2c:	4298      	cmp	r0, r3
 8002f2e:	d07f      	beq.n	8003030 <DMA_DeInit+0x1c0>
  {
    /* Reset interrupt pending bits for DMA2 Stream5 */
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream6)
 8002f30:	f246 43a0 	movw	r3, #25760	; 0x64a0
 8002f34:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002f38:	4298      	cmp	r0, r3
 8002f3a:	f000 8083 	beq.w	8003044 <DMA_DeInit+0x1d4>
    /* Reset interrupt pending bits for DMA2 Stream6 */
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
  }
  else 
  {
    if (DMAy_Streamx == DMA2_Stream7)
 8002f3e:	f246 43b8 	movw	r3, #25784	; 0x64b8
 8002f42:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002f46:	4298      	cmp	r0, r3
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 8002f48:	bf01      	itttt	eq
 8002f4a:	f44f 43c8 	moveq.w	r3, #25600	; 0x6400
 8002f4e:	f2c4 0302 	movteq	r3, #16386	; 0x4002
 8002f52:	f04f 523d 	moveq.w	r2, #792723456	; 0x2f400000
 8002f56:	60da      	streq	r2, [r3, #12]
 8002f58:	4770      	bx	lr
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream6)
  {
    /* Reset interrupt pending bits for DMA1 Stream6 */
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 8002f5a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002f5e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002f62:	2200      	movs	r2, #0
 8002f64:	f2c2 023d 	movt	r2, #8253	; 0x203d
 8002f68:	60da      	str	r2, [r3, #12]
 8002f6a:	4770      	bx	lr

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 8002f6c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002f70:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002f74:	223d      	movs	r2, #61	; 0x3d
 8002f76:	609a      	str	r2, [r3, #8]
 8002f78:	4770      	bx	lr
  }
  else if (DMAy_Streamx == DMA1_Stream1)
  {
    /* Reset interrupt pending bits for DMA1 Stream1 */
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
 8002f7a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002f7e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002f82:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8002f86:	609a      	str	r2, [r3, #8]
 8002f88:	4770      	bx	lr
  }
  else if (DMAy_Streamx == DMA1_Stream2)
  {
    /* Reset interrupt pending bits for DMA1 Stream2 */
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
 8002f8a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002f8e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002f92:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8002f96:	609a      	str	r2, [r3, #8]
 8002f98:	4770      	bx	lr
  }
  else if (DMAy_Streamx == DMA1_Stream3)
  {
    /* Reset interrupt pending bits for DMA1 Stream3 */
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
 8002f9a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002f9e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002fa2:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8002fa6:	609a      	str	r2, [r3, #8]
 8002fa8:	4770      	bx	lr
  }
  else if (DMAy_Streamx == DMA1_Stream4)
  {
    /* Reset interrupt pending bits for DMA1 Stream4 */
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
 8002faa:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002fae:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002fb2:	223d      	movs	r2, #61	; 0x3d
 8002fb4:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002fb8:	60da      	str	r2, [r3, #12]
 8002fba:	4770      	bx	lr
  }
  else if (DMAy_Streamx == DMA1_Stream5)
  {
    /* Reset interrupt pending bits for DMA1 Stream5 */
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
 8002fbc:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002fc0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002fc4:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8002fc8:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002fcc:	60da      	str	r2, [r3, #12]
 8002fce:	4770      	bx	lr
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream7)
  {
    /* Reset interrupt pending bits for DMA1 Stream7 */
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
 8002fd0:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002fd4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002fd8:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8002fdc:	60da      	str	r2, [r3, #12]
 8002fde:	4770      	bx	lr
  }
  else if (DMAy_Streamx == DMA2_Stream0)
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 8002fe0:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8002fe4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002fe8:	223d      	movs	r2, #61	; 0x3d
 8002fea:	609a      	str	r2, [r3, #8]
 8002fec:	4770      	bx	lr
  }
  else if (DMAy_Streamx == DMA2_Stream1)
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 8002fee:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8002ff2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002ff6:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8002ffa:	609a      	str	r2, [r3, #8]
 8002ffc:	4770      	bx	lr
  }
  else if (DMAy_Streamx == DMA2_Stream2)
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 8002ffe:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8003002:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003006:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 800300a:	609a      	str	r2, [r3, #8]
 800300c:	4770      	bx	lr
  }
  else if (DMAy_Streamx == DMA2_Stream3)
  {
    /* Reset interrupt pending bits for DMA2 Stream3 */
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 800300e:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8003012:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003016:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 800301a:	609a      	str	r2, [r3, #8]
 800301c:	4770      	bx	lr
  }
  else if (DMAy_Streamx == DMA2_Stream4)
  {
    /* Reset interrupt pending bits for DMA2 Stream4 */
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 800301e:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8003022:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003026:	223d      	movs	r2, #61	; 0x3d
 8003028:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800302c:	60da      	str	r2, [r3, #12]
 800302e:	4770      	bx	lr
  }
  else if (DMAy_Streamx == DMA2_Stream5)
  {
    /* Reset interrupt pending bits for DMA2 Stream5 */
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 8003030:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8003034:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003038:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 800303c:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8003040:	60da      	str	r2, [r3, #12]
 8003042:	4770      	bx	lr
  }
  else if (DMAy_Streamx == DMA2_Stream6)
  {
    /* Reset interrupt pending bits for DMA2 Stream6 */
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 8003044:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8003048:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800304c:	2200      	movs	r2, #0
 800304e:	f2c2 023d 	movt	r2, #8253	; 0x203d
 8003052:	60da      	str	r2, [r3, #12]
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop

08003058 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8003058:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800305c:	f8d1 a00c 	ldr.w	sl, [r1, #12]
 8003060:	f8d1 9000 	ldr.w	r9, [r1]
 8003064:	f8d1 8014 	ldr.w	r8, [r1, #20]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8003068:	f8d1 c018 	ldr.w	ip, [r1, #24]
 800306c:	69cf      	ldr	r7, [r1, #28]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 800306e:	6803      	ldr	r3, [r0, #0]
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8003070:	6a0e      	ldr	r6, [r1, #32]
 8003072:	6a4d      	ldr	r5, [r1, #36]	; 0x24
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8003074:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8003076:	6b4a      	ldr	r2, [r1, #52]	; 0x34
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8003078:	f8d1 b038 	ldr.w	fp, [r1, #56]	; 0x38
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800307c:	ea4a 0909 	orr.w	r9, sl, r9
 8003080:	ea49 0908 	orr.w	r9, r9, r8
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8003084:	b086      	sub	sp, #24
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8003086:	ea49 090c 	orr.w	r9, r9, ip
 800308a:	ea49 0907 	orr.w	r9, r9, r7
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 800308e:	9301      	str	r3, [sp, #4]
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8003090:	ea49 0906 	orr.w	r9, r9, r6
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8003094:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8003096:	ea49 0505 	orr.w	r5, r9, r5
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800309a:	432c      	orrs	r4, r5
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 800309c:	9304      	str	r3, [sp, #16]
 800309e:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80030a0:	9d04      	ldr	r5, [sp, #16]
 80030a2:	9305      	str	r3, [sp, #20]
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80030a4:	4322      	orrs	r2, r4
  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80030a6:	f248 083f 	movw	r8, #32831	; 0x803f
 80030aa:	9c01      	ldr	r4, [sp, #4]
  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 80030ac:	690b      	ldr	r3, [r1, #16]
  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80030ae:	f2cf 081c 	movt	r8, #61468	; 0xf01c
 80030b2:	ea04 0808 	and.w	r8, r4, r8
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 80030b6:	ea42 020b 	orr.w	r2, r2, fp
  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 80030ba:	9302      	str	r3, [sp, #8]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80030bc:	ea42 0208 	orr.w	r2, r2, r8
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 80030c0:	684b      	ldr	r3, [r1, #4]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 80030c2:	6889      	ldr	r1, [r1, #8]
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 80030c4:	6002      	str	r2, [r0, #0]
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 80030c6:	9303      	str	r3, [sp, #12]
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 80030c8:	9c05      	ldr	r4, [sp, #20]
  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 80030ca:	6943      	ldr	r3, [r0, #20]
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 80030cc:	ea45 0204 	orr.w	r2, r5, r4
  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80030d0:	f023 0307 	bic.w	r3, r3, #7

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 80030d4:	4313      	orrs	r3, r2

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 80030d6:	6143      	str	r3, [r0, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 80030d8:	9d02      	ldr	r5, [sp, #8]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 80030da:	9b03      	ldr	r3, [sp, #12]
  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 80030dc:	6045      	str	r5, [r0, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 80030de:	6083      	str	r3, [r0, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 80030e0:	60c1      	str	r1, [r0, #12]
}
 80030e2:	b006      	add	sp, #24
 80030e4:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80030e8:	4770      	bx	lr
 80030ea:	bf00      	nop

080030ec <DMA_StructInit>:
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
  /*-------------- Reset DMA init structure parameters values ----------------*/
  /* Initialize the DMA_Channel member */
  DMA_InitStruct->DMA_Channel = 0;
 80030ec:	2300      	movs	r3, #0
 80030ee:	6003      	str	r3, [r0, #0]

  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 80030f0:	6043      	str	r3, [r0, #4]

  /* Initialize the DMA_Memory0BaseAddr member */
  DMA_InitStruct->DMA_Memory0BaseAddr = 0;
 80030f2:	6083      	str	r3, [r0, #8]

  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralToMemory;
 80030f4:	60c3      	str	r3, [r0, #12]

  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
 80030f6:	6103      	str	r3, [r0, #16]

  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 80030f8:	6143      	str	r3, [r0, #20]

  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 80030fa:	6183      	str	r3, [r0, #24]

  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 80030fc:	61c3      	str	r3, [r0, #28]

  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 80030fe:	6203      	str	r3, [r0, #32]

  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 8003100:	6243      	str	r3, [r0, #36]	; 0x24

  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 8003102:	6283      	str	r3, [r0, #40]	; 0x28

  /* Initialize the DMA_FIFOMode member */
  DMA_InitStruct->DMA_FIFOMode = DMA_FIFOMode_Disable;
 8003104:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Initialize the DMA_FIFOThreshold member */
  DMA_InitStruct->DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 8003106:	6303      	str	r3, [r0, #48]	; 0x30

  /* Initialize the DMA_MemoryBurst member */
  DMA_InitStruct->DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8003108:	6343      	str	r3, [r0, #52]	; 0x34

  /* Initialize the DMA_PeripheralBurst member */
  DMA_InitStruct->DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 800310a:	6383      	str	r3, [r0, #56]	; 0x38
}
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop

08003110 <DMA_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8003110:	6803      	ldr	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003112:	b919      	cbnz	r1, 800311c <DMA_Cmd+0xc>
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8003114:	f023 0301 	bic.w	r3, r3, #1
 8003118:	6003      	str	r3, [r0, #0]
 800311a:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 800311c:	f043 0301 	orr.w	r3, r3, #1
 8003120:	6003      	str	r3, [r0, #0]
 8003122:	4770      	bx	lr

08003124 <DMA_PeriphIncOffsetSizeConfig>:

  /* Check the needed Peripheral increment offset */
  if(DMA_Pincos != DMA_PINCOS_Psize)
  {
    /* Configure DMA_SxCR_PINCOS bit with the input parameter */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PINCOS;     
 8003124:	6803      	ldr	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_PINCOS_SIZE(DMA_Pincos));

  /* Check the needed Peripheral increment offset */
  if(DMA_Pincos != DMA_PINCOS_Psize)
 8003126:	b919      	cbnz	r1, 8003130 <DMA_PeriphIncOffsetSizeConfig+0xc>
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PINCOS;     
  }
  else
  {
    /* Clear the PINCOS bit: Peripheral address incremented according to PSIZE */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PINCOS;    
 8003128:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800312c:	6003      	str	r3, [r0, #0]
 800312e:	4770      	bx	lr

  /* Check the needed Peripheral increment offset */
  if(DMA_Pincos != DMA_PINCOS_Psize)
  {
    /* Configure DMA_SxCR_PINCOS bit with the input parameter */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PINCOS;     
 8003130:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003134:	6003      	str	r3, [r0, #0]
 8003136:	4770      	bx	lr

08003138 <DMA_FlowControllerConfig>:

  /* Check the needed flow controller  */
  if(DMA_FlowCtrl != DMA_FlowCtrl_Memory)
  {
    /* Configure DMA_SxCR_PFCTRL bit with the input parameter */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PFCTRL;   
 8003138:	6803      	ldr	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_FLOW_CTRL(DMA_FlowCtrl));

  /* Check the needed flow controller  */
  if(DMA_FlowCtrl != DMA_FlowCtrl_Memory)
 800313a:	b919      	cbnz	r1, 8003144 <DMA_FlowControllerConfig+0xc>
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PFCTRL;   
  }
  else
  {
    /* Clear the PFCTRL bit: Memory is the flow controller */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PFCTRL;    
 800313c:	f023 0320 	bic.w	r3, r3, #32
 8003140:	6003      	str	r3, [r0, #0]
 8003142:	4770      	bx	lr

  /* Check the needed flow controller  */
  if(DMA_FlowCtrl != DMA_FlowCtrl_Memory)
  {
    /* Configure DMA_SxCR_PFCTRL bit with the input parameter */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PFCTRL;   
 8003144:	f043 0320 	orr.w	r3, r3, #32
 8003148:	6003      	str	r3, [r0, #0]
 800314a:	4770      	bx	lr

0800314c <DMA_SetCurrDataCounter>:
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Write the number of data units to be transferred */
  DMAy_Streamx->NDTR = (uint16_t)Counter;
 800314c:	6041      	str	r1, [r0, #4]
}
 800314e:	4770      	bx	lr

08003150 <DMA_GetCurrDataCounter>:
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Return the number of remaining data units for DMAy Streamx */
  return ((uint16_t)(DMAy_Streamx->NDTR));
 8003150:	6840      	ldr	r0, [r0, #4]
}
 8003152:	b280      	uxth	r0, r0
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop

08003158 <DMA_DoubleBufferModeConfig>:
  assert_param(IS_DMA_CURRENT_MEM(DMA_CurrentMemory));

  if (DMA_CurrentMemory != DMA_Memory_0)
  {
    /* Set Memory 1 as current memory address */
    DMAy_Streamx->CR |= (uint32_t)(DMA_SxCR_CT);    
 8003158:	6803      	ldr	r3, [r0, #0]
{  
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CURRENT_MEM(DMA_CurrentMemory));

  if (DMA_CurrentMemory != DMA_Memory_0)
 800315a:	b922      	cbnz	r2, 8003166 <DMA_DoubleBufferModeConfig+0xe>
    DMAy_Streamx->CR |= (uint32_t)(DMA_SxCR_CT);    
  }
  else
  {
    /* Set Memory 0 as current memory address */
    DMAy_Streamx->CR &= ~(uint32_t)(DMA_SxCR_CT);    
 800315c:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8003160:	6003      	str	r3, [r0, #0]
  }

  /* Write to DMAy Streamx M1AR */
  DMAy_Streamx->M1AR = Memory1BaseAddr;
 8003162:	6101      	str	r1, [r0, #16]
}
 8003164:	4770      	bx	lr
  assert_param(IS_DMA_CURRENT_MEM(DMA_CurrentMemory));

  if (DMA_CurrentMemory != DMA_Memory_0)
  {
    /* Set Memory 1 as current memory address */
    DMAy_Streamx->CR |= (uint32_t)(DMA_SxCR_CT);    
 8003166:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800316a:	6003      	str	r3, [r0, #0]
    /* Set Memory 0 as current memory address */
    DMAy_Streamx->CR &= ~(uint32_t)(DMA_SxCR_CT);    
  }

  /* Write to DMAy Streamx M1AR */
  DMAy_Streamx->M1AR = Memory1BaseAddr;
 800316c:	6101      	str	r1, [r0, #16]
}
 800316e:	4770      	bx	lr

08003170 <DMA_DoubleBufferModeCmd>:

  /* Configure the Double Buffer mode */
  if (NewState != DISABLE)
  {
    /* Enable the Double buffer mode */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_DBM;
 8003170:	6803      	ldr	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Configure the Double Buffer mode */
  if (NewState != DISABLE)
 8003172:	b919      	cbnz	r1, 800317c <DMA_DoubleBufferModeCmd+0xc>
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_DBM;
  }
  else
  {
    /* Disable the Double buffer mode */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_DBM;
 8003174:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003178:	6003      	str	r3, [r0, #0]
 800317a:	4770      	bx	lr

  /* Configure the Double Buffer mode */
  if (NewState != DISABLE)
  {
    /* Enable the Double buffer mode */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_DBM;
 800317c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003180:	6003      	str	r3, [r0, #0]
 8003182:	4770      	bx	lr

08003184 <DMA_MemoryTargetConfig>:
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CURRENT_MEM(DMA_MemoryTarget));
    
  /* Check the Memory target to be configured */
  if (DMA_MemoryTarget != DMA_Memory_0)
 8003184:	b90a      	cbnz	r2, 800318a <DMA_MemoryTargetConfig+0x6>
    DMAy_Streamx->M1AR = MemoryBaseAddr;    
  }  
  else
  {
    /* Write to DMAy Streamx M0AR */
    DMAy_Streamx->M0AR = MemoryBaseAddr;  
 8003186:	60c1      	str	r1, [r0, #12]
 8003188:	4770      	bx	lr
    
  /* Check the Memory target to be configured */
  if (DMA_MemoryTarget != DMA_Memory_0)
  {
    /* Write to DMAy Streamx M1AR */
    DMAy_Streamx->M1AR = MemoryBaseAddr;    
 800318a:	6101      	str	r1, [r0, #16]
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop

08003190 <DMA_GetCurrentMemoryTarget>:
  
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Get the current memory target */
  if ((DMAy_Streamx->CR & DMA_SxCR_CT) != 0)
 8003190:	6800      	ldr	r0, [r0, #0]
  {
    /* Current memory buffer used is Memory 0 */
    tmp = 0;    
  }
  return tmp;
}
 8003192:	f3c0 40c0 	ubfx	r0, r0, #19, #1
 8003196:	4770      	bx	lr

08003198 <DMA_GetCmdStatus>:
  FunctionalState state = DISABLE;

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 8003198:	6800      	ldr	r0, [r0, #0]
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
  }
  return state;
}
 800319a:	f000 0001 	and.w	r0, r0, #1
 800319e:	4770      	bx	lr

080031a0 <DMA_GetFIFOStatus>:
 
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  
  /* Get the FIFO level bits */
  tmpreg = (uint32_t)((DMAy_Streamx->FCR & DMA_SxFCR_FS));
 80031a0:	6940      	ldr	r0, [r0, #20]
  
  return tmpreg;
}
 80031a2:	f000 0038 	and.w	r0, r0, #56	; 0x38
 80031a6:	4770      	bx	lr

080031a8 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 80031a8:	b410      	push	{r4}

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80031aa:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80031ae:	f246 440f 	movw	r4, #25615	; 0x640f
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80031b2:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80031b6:	f2c4 0202 	movt	r2, #16386	; 0x4002
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80031ba:	f2c4 0402 	movt	r4, #16386	; 0x4002
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80031be:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80031c2:	42a0      	cmp	r0, r4
 80031c4:	bf88      	it	hi
 80031c6:	4613      	movhi	r3, r2
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 80031c8:	008a      	lsls	r2, r1, #2
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 80031ca:	bf4c      	ite	mi
 80031cc:	685b      	ldrmi	r3, [r3, #4]
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 80031ce:	681b      	ldrpl	r3, [r3, #0]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 80031d0:	f021 21f0 	bic.w	r1, r1, #4026593280	; 0xf000f000
 80031d4:	f021 1182 	bic.w	r1, r1, #8519810	; 0x820082

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 80031d8:	4219      	tst	r1, r3
    bitstatus = RESET;
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
}
 80031da:	bf0c      	ite	eq
 80031dc:	2000      	moveq	r0, #0
 80031de:	2001      	movne	r0, #1
 80031e0:	bc10      	pop	{r4}
 80031e2:	4770      	bx	lr

080031e4 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 80031e4:	b410      	push	{r4}

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80031e6:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80031ea:	f246 440f 	movw	r4, #25615	; 0x640f
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80031ee:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80031f2:	f2c4 0402 	movt	r4, #16386	; 0x4002
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80031f6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80031fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80031fe:	42a0      	cmp	r0, r4
 8003200:	bf88      	it	hi
 8003202:	4613      	movhi	r3, r2
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8003204:	f011 5f00 	tst.w	r1, #536870912	; 0x20000000
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8003208:	f021 21f0 	bic.w	r1, r1, #4026593280	; 0xf000f000
 800320c:	f021 1182 	bic.w	r1, r1, #8519810	; 0x820082
 8003210:	bf14      	ite	ne
 8003212:	60d9      	strne	r1, [r3, #12]
  }
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8003214:	6099      	streq	r1, [r3, #8]
  }    
}
 8003216:	bc10      	pop	{r4}
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop

0800321c <DMA_ITConfig>:
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 800321c:	060b      	lsls	r3, r1, #24
 800321e:	d504      	bpl.n	800322a <DMA_ITConfig+0xe>
  {
    if (NewState != DISABLE)
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 8003220:	6943      	ldr	r3, [r0, #20]
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
  {
    if (NewState != DISABLE)
 8003222:	b17a      	cbz	r2, 8003244 <DMA_ITConfig+0x28>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 8003224:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003228:	6143      	str	r3, [r0, #20]
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 800322a:	2980      	cmp	r1, #128	; 0x80
 800322c:	d006      	beq.n	800323c <DMA_ITConfig+0x20>
  {
    if (NewState != DISABLE)
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 800322e:	6803      	ldr	r3, [r0, #0]
 8003230:	f001 011e 	and.w	r1, r1, #30
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
  {
    if (NewState != DISABLE)
 8003234:	b91a      	cbnz	r2, 800323e <DMA_ITConfig+0x22>
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
    }
    else
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 8003236:	ea23 0101 	bic.w	r1, r3, r1
 800323a:	6001      	str	r1, [r0, #0]
 800323c:	4770      	bx	lr
  if (DMA_IT != DMA_IT_FE)
  {
    if (NewState != DISABLE)
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 800323e:	4319      	orrs	r1, r3
 8003240:	6001      	str	r1, [r0, #0]
 8003242:	4770      	bx	lr
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 8003244:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003248:	6143      	str	r3, [r0, #20]
 800324a:	e7ee      	b.n	800322a <DMA_ITConfig+0xe>

0800324c <DMA_GetITStatus>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_IT (SET or RESET).
  */
ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 800324c:	b470      	push	{r4, r5, r6}
 
  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800324e:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_IT(DMA_IT));
 
  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8003252:	f246 450f 	movw	r5, #25615	; 0x640f
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8003256:	f44f 44c8 	mov.w	r4, #25600	; 0x6400
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
  }

  /* Check if the interrupt enable bit is in the CR or FCR register */
  if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
 800325a:	f021 23f0 	bic.w	r3, r1, #4026593280	; 0xf000f000
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_IT(DMA_IT));
 
  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800325e:	f2c4 0502 	movt	r5, #16386	; 0x4002
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8003262:	f2c4 0402 	movt	r4, #16386	; 0x4002
 8003266:	f2c4 0202 	movt	r2, #16386	; 0x4002
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
  }

  /* Check if the interrupt enable bit is in the CR or FCR register */
  if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
 800326a:	f023 16c3 	bic.w	r6, r3, #12779715	; 0xc300c3
 
  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800326e:	42a8      	cmp	r0, r5
 8003270:	bf88      	it	hi
 8003272:	4622      	movhi	r2, r4
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
  }

  /* Check if the interrupt enable bit is in the CR or FCR register */
  if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
 8003274:	b1ae      	cbz	r6, 80032a2 <DMA_GetITStatus+0x56>
  {
    /* Get the interrupt enable position mask in CR register */
    tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
    
    /* Check the enable bit in CR register */
    enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
 8003276:	6800      	ldr	r0, [r0, #0]

  /* Check if the interrupt enable bit is in the CR or FCR register */
  if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
  {
    /* Get the interrupt enable position mask in CR register */
    tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
 8003278:	f000 001e 	and.w	r0, r0, #30
    
    /* Check the enable bit in CR register */
    enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
 800327c:	ea00 20d1 	and.w	r0, r0, r1, lsr #11
    /* Check the enable bit in FCR register */
    enablestatus = (uint32_t)(DMAy_Streamx->FCR & DMA_IT_FE); 
  }
 
  /* Check if the interrupt pending flag is in LISR or HISR */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 8003280:	0089      	lsls	r1, r1, #2
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR ;
 8003282:	bf4c      	ite	mi
 8003284:	6852      	ldrmi	r2, [r2, #4]
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR ;
 8003286:	6812      	ldrpl	r2, [r2, #0]
  } 

  /* mask all reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8003288:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082

  /* Check the status of the specified DMA interrupt */
  if (((tmpreg & DMA_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 800328c:	4213      	tst	r3, r2
 800328e:	bf0c      	ite	eq
 8003290:	2300      	moveq	r3, #0
 8003292:	2301      	movne	r3, #1
    bitstatus = RESET;
  }

  /* Return the DMA_IT status */
  return  bitstatus;
}
 8003294:	2800      	cmp	r0, #0
 8003296:	bf0c      	ite	eq
 8003298:	2000      	moveq	r0, #0
 800329a:	f003 0001 	andne.w	r0, r3, #1
 800329e:	bc70      	pop	{r4, r5, r6}
 80032a0:	4770      	bx	lr
    enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
  }
  else 
  {
    /* Check the enable bit in FCR register */
    enablestatus = (uint32_t)(DMAy_Streamx->FCR & DMA_IT_FE); 
 80032a2:	6940      	ldr	r0, [r0, #20]
 80032a4:	f000 0080 	and.w	r0, r0, #128	; 0x80
 80032a8:	e7ea      	b.n	8003280 <DMA_GetITStatus+0x34>
 80032aa:	bf00      	nop

080032ac <DMA_ClearITPendingBit>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 80032ac:	b410      	push	{r4}

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80032ae:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_IT(DMA_IT));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80032b2:	f246 440f 	movw	r4, #25615	; 0x640f
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80032b6:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_IT(DMA_IT));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80032ba:	f2c4 0402 	movt	r4, #16386	; 0x4002
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80032be:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80032c2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80032c6:	42a0      	cmp	r0, r4
 80032c8:	bf88      	it	hi
 80032ca:	4613      	movhi	r3, r2
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 80032cc:	f011 5f00 	tst.w	r1, #536870912	; 0x20000000
  {
    /* Set DMAy HIFCR register clear interrupt bits */
    DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 80032d0:	f021 21f0 	bic.w	r1, r1, #4026593280	; 0xf000f000
 80032d4:	f021 1182 	bic.w	r1, r1, #8519810	; 0x820082
 80032d8:	bf14      	ite	ne
 80032da:	60d9      	strne	r1, [r3, #12]
  }
  else 
  {
    /* Set DMAy LIFCR register clear interrupt bits */
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 80032dc:	6099      	streq	r1, [r3, #8]
  }   
}
 80032de:	bc10      	pop	{r4}
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop

080032e4 <EXTI_DeInit>:
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
  EXTI->IMR = 0x00000000;
 80032e4:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80032e8:	f2c4 0301 	movt	r3, #16385	; 0x4001
  EXTI->EMR = 0x00000000;
  EXTI->RTSR = 0x00000000;
  EXTI->FTSR = 0x00000000;
  EXTI->PR = 0x007FFFFF;
 80032ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
  EXTI->IMR = 0x00000000;
 80032f0:	2200      	movs	r2, #0
  EXTI->EMR = 0x00000000;
  EXTI->RTSR = 0x00000000;
  EXTI->FTSR = 0x00000000;
  EXTI->PR = 0x007FFFFF;
 80032f2:	f2c0 017f 	movt	r1, #127	; 0x7f
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
  EXTI->IMR = 0x00000000;
 80032f6:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
 80032f8:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000;
 80032fa:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000;
 80032fc:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x007FFFFF;
 80032fe:	6159      	str	r1, [r3, #20]
}
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop

08003304 <EXTI_Init>:
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8003304:	7983      	ldrb	r3, [r0, #6]
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8003306:	b470      	push	{r4, r5, r6}
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8003308:	b33b      	cbz	r3, 800335a <EXTI_Init+0x56>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 800330a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800330e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003312:	6801      	ldr	r1, [r0, #0]
 8003314:	681e      	ldr	r6, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8003316:	7902      	ldrb	r2, [r0, #4]
    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8003318:	7945      	ldrb	r5, [r0, #5]
  tmp = (uint32_t)EXTI_BASE;
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 800331a:	43cc      	mvns	r4, r1
 800331c:	4026      	ands	r6, r4
 800331e:	601e      	str	r6, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8003320:	685e      	ldr	r6, [r3, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8003322:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8003326:	f502 329e 	add.w	r2, r2, #80896	; 0x13c00
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 800332a:	4034      	ands	r4, r6
 800332c:	605c      	str	r4, [r3, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 800332e:	6814      	ldr	r4, [r2, #0]
 8003330:	4321      	orrs	r1, r4
 8003332:	6011      	str	r1, [r2, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8003334:	6802      	ldr	r2, [r0, #0]
 8003336:	6898      	ldr	r0, [r3, #8]
 8003338:	43d1      	mvns	r1, r2
 800333a:	4008      	ands	r0, r1
 800333c:	6098      	str	r0, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 800333e:	68d8      	ldr	r0, [r3, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8003340:	2d10      	cmp	r5, #16

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8003342:	ea01 0100 	and.w	r1, r1, r0
 8003346:	60d9      	str	r1, [r3, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8003348:	d013      	beq.n	8003372 <EXTI_Init+0x6e>
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
      tmp += EXTI_InitStruct->EXTI_Trigger;
 800334a:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 800334e:	f505 359e 	add.w	r5, r5, #80896	; 0x13c00

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8003352:	682b      	ldr	r3, [r5, #0]
 8003354:	431a      	orrs	r2, r3
 8003356:	602a      	str	r2, [r5, #0]
 8003358:	e009      	b.n	800336e <EXTI_Init+0x6a>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 800335a:	7903      	ldrb	r3, [r0, #4]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 800335c:	6801      	ldr	r1, [r0, #0]
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 800335e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003362:	f503 339e 	add.w	r3, r3, #80896	; 0x13c00

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	ea22 0201 	bic.w	r2, r2, r1
 800336c:	601a      	str	r2, [r3, #0]
  }
}
 800336e:	bc70      	pop	{r4, r5, r6}
 8003370:	4770      	bx	lr
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8003372:	6899      	ldr	r1, [r3, #8]
 8003374:	4311      	orrs	r1, r2
 8003376:	6099      	str	r1, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8003378:	68d9      	ldr	r1, [r3, #12]
 800337a:	430a      	orrs	r2, r1
 800337c:	60da      	str	r2, [r3, #12]
 800337e:	e7f6      	b.n	800336e <EXTI_Init+0x6a>

08003380 <EXTI_StructInit>:
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
 8003380:	2300      	movs	r3, #0
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
 8003382:	220c      	movs	r2, #12
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
 8003384:	6003      	str	r3, [r0, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
 8003386:	7103      	strb	r3, [r0, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
 8003388:	7142      	strb	r2, [r0, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
 800338a:	7183      	strb	r3, [r0, #6]
}
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop

08003390 <EXTI_GenerateSWInterrupt>:
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->SWIER |= EXTI_Line;
 8003390:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8003394:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003398:	691a      	ldr	r2, [r3, #16]
 800339a:	4302      	orrs	r2, r0
 800339c:	611a      	str	r2, [r3, #16]
}
 800339e:	4770      	bx	lr

080033a0 <EXTI_GetFlagStatus>:
{
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 80033a0:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80033a4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80033a8:	695b      	ldr	r3, [r3, #20]
  {
    bitstatus = SET;
 80033aa:	4218      	tst	r0, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 80033ac:	bf0c      	ite	eq
 80033ae:	2000      	moveq	r0, #0
 80033b0:	2001      	movne	r0, #1
 80033b2:	4770      	bx	lr

080033b4 <EXTI_ClearFlag>:
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 80033b4:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80033b8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80033bc:	6158      	str	r0, [r3, #20]
}
 80033be:	4770      	bx	lr

080033c0 <EXTI_GetITStatus>:
  ITStatus bitstatus = RESET;
  uint32_t enablestatus = 0;
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 80033c0:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80033c4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80033c8:	681a      	ldr	r2, [r3, #0]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 80033ca:	695b      	ldr	r3, [r3, #20]
 80033cc:	4003      	ands	r3, r0
 80033ce:	d004      	beq.n	80033da <EXTI_GetITStatus+0x1a>
  {
    bitstatus = SET;
 80033d0:	4210      	tst	r0, r2
 80033d2:	bf0c      	ite	eq
 80033d4:	2000      	moveq	r0, #0
 80033d6:	2001      	movne	r0, #1
 80033d8:	4770      	bx	lr
  }
  else
  {
    bitstatus = RESET;
 80033da:	4618      	mov	r0, r3
  }
  return bitstatus;
}
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop

080033e0 <EXTI_ClearITPendingBit>:
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 80033e0:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80033e4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80033e8:	6158      	str	r0, [r3, #20]
}
 80033ea:	4770      	bx	lr

080033ec <FLASH_SetLatency>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_LATENCY(FLASH_Latency));
  
  /* Perform Byte access to FLASH_ACR[8:0] to set the Latency value */
  *(__IO uint8_t *)ACR_BYTE0_ADDRESS = (uint8_t)FLASH_Latency;
 80033ec:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80033f0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80033f4:	b2c0      	uxtb	r0, r0
 80033f6:	7018      	strb	r0, [r3, #0]
}
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop

080033fc <FLASH_PrefetchBufferCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  /* Enable or disable the Prefetch Buffer */
  if(NewState != DISABLE)
  {
    FLASH->ACR |= FLASH_ACR_PRFTEN;
 80033fc:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8003400:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003404:	681a      	ldr	r2, [r3, #0]
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  /* Enable or disable the Prefetch Buffer */
  if(NewState != DISABLE)
 8003406:	b918      	cbnz	r0, 8003410 <FLASH_PrefetchBufferCmd+0x14>
  {
    FLASH->ACR |= FLASH_ACR_PRFTEN;
  }
  else
  {
    FLASH->ACR &= (~FLASH_ACR_PRFTEN);
 8003408:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800340c:	601a      	str	r2, [r3, #0]
 800340e:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  /* Enable or disable the Prefetch Buffer */
  if(NewState != DISABLE)
  {
    FLASH->ACR |= FLASH_ACR_PRFTEN;
 8003410:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003414:	601a      	str	r2, [r3, #0]
 8003416:	4770      	bx	lr

08003418 <FLASH_InstructionCacheCmd>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if(NewState != DISABLE)
  {
    FLASH->ACR |= FLASH_ACR_ICEN;
 8003418:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800341c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003420:	681a      	ldr	r2, [r3, #0]
void FLASH_InstructionCacheCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if(NewState != DISABLE)
 8003422:	b918      	cbnz	r0, 800342c <FLASH_InstructionCacheCmd+0x14>
  {
    FLASH->ACR |= FLASH_ACR_ICEN;
  }
  else
  {
    FLASH->ACR &= (~FLASH_ACR_ICEN);
 8003424:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003428:	601a      	str	r2, [r3, #0]
 800342a:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if(NewState != DISABLE)
  {
    FLASH->ACR |= FLASH_ACR_ICEN;
 800342c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003430:	601a      	str	r2, [r3, #0]
 8003432:	4770      	bx	lr

08003434 <FLASH_DataCacheCmd>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if(NewState != DISABLE)
  {
    FLASH->ACR |= FLASH_ACR_DCEN;
 8003434:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8003438:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800343c:	681a      	ldr	r2, [r3, #0]
void FLASH_DataCacheCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if(NewState != DISABLE)
 800343e:	b918      	cbnz	r0, 8003448 <FLASH_DataCacheCmd+0x14>
  {
    FLASH->ACR |= FLASH_ACR_DCEN;
  }
  else
  {
    FLASH->ACR &= (~FLASH_ACR_DCEN);
 8003440:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003444:	601a      	str	r2, [r3, #0]
 8003446:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if(NewState != DISABLE)
  {
    FLASH->ACR |= FLASH_ACR_DCEN;
 8003448:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800344c:	601a      	str	r2, [r3, #0]
 800344e:	4770      	bx	lr

08003450 <FLASH_InstructionCacheReset>:
  * @param  None
  * @retval None
  */
void FLASH_InstructionCacheReset(void)
{
  FLASH->ACR |= FLASH_ACR_ICRST;
 8003450:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8003454:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800345e:	601a      	str	r2, [r3, #0]
}
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop

08003464 <FLASH_DataCacheReset>:
  * @param  None
  * @retval None
  */
void FLASH_DataCacheReset(void)
{
  FLASH->ACR |= FLASH_ACR_DCRST;
 8003464:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8003468:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003472:	601a      	str	r2, [r3, #0]
}
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop

08003478 <FLASH_Unlock>:
  * @param  None
  * @retval None
  */
void FLASH_Unlock(void)
{
  if((FLASH->CR & FLASH_CR_LOCK) != RESET)
 8003478:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800347c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003480:	691a      	ldr	r2, [r3, #16]
 8003482:	2a00      	cmp	r2, #0
 8003484:	da09      	bge.n	800349a <FLASH_Unlock+0x22>
  {
    /* Authorize the FLASH Registers access */
    FLASH->KEYR = FLASH_KEY1;
 8003486:	f240 1123 	movw	r1, #291	; 0x123
    FLASH->KEYR = FLASH_KEY2;
 800348a:	f648 12ab 	movw	r2, #35243	; 0x89ab
void FLASH_Unlock(void)
{
  if((FLASH->CR & FLASH_CR_LOCK) != RESET)
  {
    /* Authorize the FLASH Registers access */
    FLASH->KEYR = FLASH_KEY1;
 800348e:	f2c4 5167 	movt	r1, #17767	; 0x4567
    FLASH->KEYR = FLASH_KEY2;
 8003492:	f6cc 52ef 	movt	r2, #52719	; 0xcdef
void FLASH_Unlock(void)
{
  if((FLASH->CR & FLASH_CR_LOCK) != RESET)
  {
    /* Authorize the FLASH Registers access */
    FLASH->KEYR = FLASH_KEY1;
 8003496:	6059      	str	r1, [r3, #4]
    FLASH->KEYR = FLASH_KEY2;
 8003498:	605a      	str	r2, [r3, #4]
 800349a:	4770      	bx	lr

0800349c <FLASH_Lock>:
  * @retval None
  */
void FLASH_Lock(void)
{
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800349c:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80034a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80034a4:	691a      	ldr	r2, [r3, #16]
 80034a6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80034aa:	611a      	str	r2, [r3, #16]
}
 80034ac:	4770      	bx	lr
 80034ae:	bf00      	nop

080034b0 <FLASH_OB_Unlock>:
  * @param  None
  * @retval None
  */
void FLASH_OB_Unlock(void)
{
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 80034b0:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80034b4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80034b8:	695a      	ldr	r2, [r3, #20]
 80034ba:	07d2      	lsls	r2, r2, #31
 80034bc:	d509      	bpl.n	80034d2 <FLASH_OB_Unlock+0x22>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 80034be:	f642 213b 	movw	r1, #10811	; 0x2a3b
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 80034c2:	f646 627f 	movw	r2, #28287	; 0x6e7f
void FLASH_OB_Unlock(void)
{
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 80034c6:	f6c0 0119 	movt	r1, #2073	; 0x819
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 80034ca:	f6c4 425d 	movt	r2, #19549	; 0x4c5d
void FLASH_OB_Unlock(void)
{
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 80034ce:	6099      	str	r1, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 80034d0:	609a      	str	r2, [r3, #8]
 80034d2:	4770      	bx	lr

080034d4 <FLASH_OB_Lock>:
  * @retval None
  */
void FLASH_OB_Lock(void)
{
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 80034d4:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80034d8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80034dc:	695a      	ldr	r2, [r3, #20]
 80034de:	f042 0201 	orr.w	r2, r2, #1
 80034e2:	615a      	str	r2, [r3, #20]
}
 80034e4:	4770      	bx	lr
 80034e6:	bf00      	nop

080034e8 <FLASH_OB_BORConfig>:
{
  /* Check the parameters */
  assert_param(IS_OB_BOR(OB_BOR));

  /* Set the BOR Level */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BOR_LEV);
 80034e8:	f643 4314 	movw	r3, #15380	; 0x3c14
 80034ec:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80034f0:	781a      	ldrb	r2, [r3, #0]
 80034f2:	f002 02f3 	and.w	r2, r2, #243	; 0xf3
 80034f6:	701a      	strb	r2, [r3, #0]
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= OB_BOR;
 80034f8:	781a      	ldrb	r2, [r3, #0]
 80034fa:	4302      	orrs	r2, r0
 80034fc:	701a      	strb	r2, [r3, #0]

}
 80034fe:	4770      	bx	lr

08003500 <FLASH_OB_GetUser>:
  *         and RST_STDBY(Bit2).
  */
uint8_t FLASH_OB_GetUser(void)
{
  /* Return the User Option Byte */
  return (uint8_t)(FLASH->OPTCR >> 5);
 8003500:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8003504:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003508:	6958      	ldr	r0, [r3, #20]
}
 800350a:	f3c0 1047 	ubfx	r0, r0, #5, #8
 800350e:	4770      	bx	lr

08003510 <FLASH_OB_GetWRP>:
  * @retval The FLASH Write Protection  Option Bytes value
  */
uint16_t FLASH_OB_GetWRP(void)
{
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 8003510:	f643 4316 	movw	r3, #15382	; 0x3c16
 8003514:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003518:	8818      	ldrh	r0, [r3, #0]
}
 800351a:	b280      	uxth	r0, r0
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop

08003520 <FLASH_OB_GetRDP>:
  */
FlagStatus FLASH_OB_GetRDP(void)
{
  FlagStatus readstatus = RESET;

  if ((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) != (uint8_t)OB_RDP_Level_0))
 8003520:	f643 4315 	movw	r3, #15381	; 0x3c15
 8003524:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003528:	7818      	ldrb	r0, [r3, #0]
  else
  {
    readstatus = RESET;
  }
  return readstatus;
}
 800352a:	38aa      	subs	r0, #170	; 0xaa
 800352c:	bf18      	it	ne
 800352e:	2001      	movne	r0, #1
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop

08003534 <FLASH_OB_GetBOR>:
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V  
  */
uint8_t FLASH_OB_GetBOR(void)
{
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 8003534:	f643 4314 	movw	r3, #15380	; 0x3c14
 8003538:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800353c:	7818      	ldrb	r0, [r3, #0]
}
 800353e:	f000 000c 	and.w	r0, r0, #12
 8003542:	4770      	bx	lr

08003544 <FLASH_ITConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if(NewState != DISABLE)
  {
    /* Enable the interrupt sources */
    FLASH->CR |= FLASH_IT;
 8003544:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8003548:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800354c:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_FLASH_IT(FLASH_IT)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if(NewState != DISABLE)
 800354e:	b919      	cbnz	r1, 8003558 <FLASH_ITConfig+0x14>
    FLASH->CR |= FLASH_IT;
  }
  else
  {
    /* Disable the interrupt sources */
    FLASH->CR &= ~(uint32_t)FLASH_IT;
 8003550:	ea22 0000 	bic.w	r0, r2, r0
 8003554:	6118      	str	r0, [r3, #16]
 8003556:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if(NewState != DISABLE)
  {
    /* Enable the interrupt sources */
    FLASH->CR |= FLASH_IT;
 8003558:	4310      	orrs	r0, r2
 800355a:	6118      	str	r0, [r3, #16]
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop

08003560 <FLASH_GetFlagStatus>:
{
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_FLASH_GET_FLAG(FLASH_FLAG));

  if((FLASH->SR & FLASH_FLAG) != (uint32_t)RESET)
 8003560:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8003564:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003568:	68db      	ldr	r3, [r3, #12]
  {
    bitstatus = SET;
 800356a:	4218      	tst	r0, r3
  {
    bitstatus = RESET;
  }
  /* Return the new state of FLASH_FLAG (SET or RESET) */
  return bitstatus; 
}
 800356c:	bf0c      	ite	eq
 800356e:	2000      	moveq	r0, #0
 8003570:	2001      	movne	r0, #1
 8003572:	4770      	bx	lr

08003574 <FLASH_ClearFlag>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG));
  
  /* Clear the flags */
  FLASH->SR = FLASH_FLAG;
 8003574:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8003578:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800357c:	60d8      	str	r0, [r3, #12]
}
 800357e:	4770      	bx	lr

08003580 <FLASH_GetStatus>:
  */
FLASH_Status FLASH_GetStatus(void)
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 8003580:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8003584:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003588:	68da      	ldr	r2, [r3, #12]
 800358a:	03d0      	lsls	r0, r2, #15
 800358c:	d40a      	bmi.n	80035a4 <FLASH_GetStatus+0x24>
  {
    flashstatus = FLASH_BUSY;
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_WRPERR) != (uint32_t)0x00)
 800358e:	68da      	ldr	r2, [r3, #12]
 8003590:	06d1      	lsls	r1, r2, #27
 8003592:	d501      	bpl.n	8003598 <FLASH_GetStatus+0x18>
    { 
      flashstatus = FLASH_ERROR_WRP;
 8003594:	2005      	movs	r0, #5
 8003596:	4770      	bx	lr
    }
    else 
    {
      if((FLASH->SR & (uint32_t)0xEF) != (uint32_t)0x00)
 8003598:	68da      	ldr	r2, [r3, #12]
 800359a:	f012 0fef 	tst.w	r2, #239	; 0xef
 800359e:	d003      	beq.n	80035a8 <FLASH_GetStatus+0x28>
      {
        flashstatus = FLASH_ERROR_PROGRAM; 
 80035a0:	2006      	movs	r0, #6
      }
    }
  }
  /* Return the FLASH Status */
  return flashstatus;
}
 80035a2:	4770      	bx	lr
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
  {
    flashstatus = FLASH_BUSY;
 80035a4:	2001      	movs	r0, #1
 80035a6:	4770      	bx	lr
      {
        flashstatus = FLASH_ERROR_PROGRAM; 
      }
      else
      {
        if((FLASH->SR & FLASH_FLAG_OPERR) != (uint32_t)0x00)
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	f013 0f02 	tst.w	r3, #2
        {
          flashstatus = FLASH_ERROR_OPERATION;
 80035ae:	bf0c      	ite	eq
 80035b0:	2008      	moveq	r0, #8
 80035b2:	2007      	movne	r0, #7
 80035b4:	4770      	bx	lr
 80035b6:	bf00      	nop

080035b8 <FLASH_WaitForLastOperation>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_WaitForLastOperation(void)
{ 
 80035b8:	b500      	push	{lr}
 80035ba:	b083      	sub	sp, #12
  __IO FLASH_Status status = FLASH_COMPLETE;
 80035bc:	2308      	movs	r3, #8
 80035be:	f88d 3007 	strb.w	r3, [sp, #7]
   
  /* Check for the FLASH Status */
  status = FLASH_GetStatus();
 80035c2:	f7ff ffdd 	bl	8003580 <FLASH_GetStatus>
 80035c6:	f88d 0007 	strb.w	r0, [sp, #7]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while(status == FLASH_BUSY)
 80035ca:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d0f7      	beq.n	80035c2 <FLASH_WaitForLastOperation+0xa>
  {
    status = FLASH_GetStatus();
  }
  /* Return the operation status */
  return status;
 80035d2:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 80035d6:	b003      	add	sp, #12
 80035d8:	bd00      	pop	{pc}
 80035da:	bf00      	nop

080035dc <FLASH_OB_Launch>:
FLASH_Status FLASH_OB_Launch(void)
{
  FLASH_Status status = FLASH_COMPLETE;

  /* Set the OPTSTRT bit in OPTCR register */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
 80035dc:	f643 4314 	movw	r3, #15380	; 0x3c14
 80035e0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80035e4:	781a      	ldrb	r2, [r3, #0]
 80035e6:	f042 0202 	orr.w	r2, r2, #2
 80035ea:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 80035ec:	e7e4      	b.n	80035b8 <FLASH_WaitForLastOperation>
 80035ee:	bf00      	nop

080035f0 <FLASH_OB_UserConfig>:
  *            @arg OB_STDBY_NoRST: No reset generated when entering in STANDBY
  *            @arg OB_STDBY_RST: Reset generated when entering in STANDBY
  * @retval None
  */
void FLASH_OB_UserConfig(uint8_t OB_IWDG, uint8_t OB_STOP, uint8_t OB_STDBY)
{
 80035f0:	b570      	push	{r4, r5, r6, lr}
 80035f2:	4604      	mov	r4, r0
 80035f4:	460d      	mov	r5, r1
 80035f6:	4616      	mov	r6, r2
  assert_param(IS_OB_IWDG_SOURCE(OB_IWDG));
  assert_param(IS_OB_STOP_SOURCE(OB_STOP));
  assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 80035f8:	f7ff ffde 	bl	80035b8 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 80035fc:	2808      	cmp	r0, #8
 80035fe:	d10a      	bne.n	8003616 <FLASH_OB_UserConfig+0x26>
  { 
    /* Mask OPTLOCK, OPTSTRT and BOR_LEV bits */
    optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0F); 
 8003600:	f643 4314 	movw	r3, #15380	; 0x3c14
 8003604:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003608:	781a      	ldrb	r2, [r3, #0]
 800360a:	f002 020f 	and.w	r2, r2, #15

    /* Update User Option Byte */
    *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS = OB_IWDG | (uint8_t)(OB_STDBY | (uint8_t)(OB_STOP | ((uint8_t)optiontmp))); 
 800360e:	4314      	orrs	r4, r2
 8003610:	4325      	orrs	r5, r4
 8003612:	432e      	orrs	r6, r5
 8003614:	701e      	strb	r6, [r3, #0]
 8003616:	bd70      	pop	{r4, r5, r6, pc}

08003618 <FLASH_OB_RDPConfig>:
  * !!!Warning!!! When enabling OB_RDP level 2 it's no more possible to go back to level 1 or 0
  *    
  * @retval None
  */
void FLASH_OB_RDPConfig(uint8_t OB_RDP)
{
 8003618:	b510      	push	{r4, lr}
 800361a:	4604      	mov	r4, r0
  FLASH_Status status = FLASH_COMPLETE;

  /* Check the parameters */
  assert_param(IS_OB_RDP(OB_RDP));

  status = FLASH_WaitForLastOperation();
 800361c:	f7ff ffcc 	bl	80035b8 <FLASH_WaitForLastOperation>

  if(status == FLASH_COMPLETE)
 8003620:	2808      	cmp	r0, #8
  {
    *(__IO uint8_t*)OPTCR_BYTE1_ADDRESS = OB_RDP;
 8003622:	bf02      	ittt	eq
 8003624:	f643 4315 	movweq	r3, #15381	; 0x3c15
 8003628:	f2c4 0302 	movteq	r3, #16386	; 0x4002
 800362c:	701c      	strbeq	r4, [r3, #0]
 800362e:	bd10      	pop	{r4, pc}

08003630 <FLASH_OB_WRPConfig>:
  * @param  Newstate: new state of the Write Protection.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None  
  */
void FLASH_OB_WRPConfig(uint32_t OB_WRP, FunctionalState NewState)
{ 
 8003630:	b538      	push	{r3, r4, r5, lr}
 8003632:	4604      	mov	r4, r0
 8003634:	460d      	mov	r5, r1
  
  /* Check the parameters */
  assert_param(IS_OB_WRP(OB_WRP));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  status = FLASH_WaitForLastOperation();
 8003636:	f7ff ffbf 	bl	80035b8 <FLASH_WaitForLastOperation>

  if(status == FLASH_COMPLETE)
 800363a:	2808      	cmp	r0, #8
 800363c:	d000      	beq.n	8003640 <FLASH_OB_WRPConfig+0x10>
 800363e:	bd38      	pop	{r3, r4, r5, pc}
  { 
    if(NewState != DISABLE)
    {
      *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS &= (~OB_WRP);
 8003640:	f643 4316 	movw	r3, #15382	; 0x3c16
 8003644:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003648:	881a      	ldrh	r2, [r3, #0]
    
  status = FLASH_WaitForLastOperation();

  if(status == FLASH_COMPLETE)
  { 
    if(NewState != DISABLE)
 800364a:	b91d      	cbnz	r5, 8003654 <FLASH_OB_WRPConfig+0x24>
    {
      *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS &= (~OB_WRP);
    }
    else
    {
      *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS |= (uint16_t)OB_WRP;
 800364c:	4314      	orrs	r4, r2
 800364e:	b2a4      	uxth	r4, r4
 8003650:	801c      	strh	r4, [r3, #0]
 8003652:	bd38      	pop	{r3, r4, r5, pc}

  if(status == FLASH_COMPLETE)
  { 
    if(NewState != DISABLE)
    {
      *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS &= (~OB_WRP);
 8003654:	b292      	uxth	r2, r2
 8003656:	ea22 0404 	bic.w	r4, r2, r4
 800365a:	801c      	strh	r4, [r3, #0]
 800365c:	bd38      	pop	{r3, r4, r5, pc}
 800365e:	bf00      	nop

08003660 <FLASH_ProgramByte>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramByte(uint32_t Address, uint8_t Data)
{
 8003660:	b570      	push	{r4, r5, r6, lr}
 8003662:	4604      	mov	r4, r0
 8003664:	460e      	mov	r6, r1

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 8003666:	f7ff ffa7 	bl	80035b8 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 800366a:	2808      	cmp	r0, #8
 800366c:	d000      	beq.n	8003670 <FLASH_ProgramByte+0x10>
    FLASH->CR &= (~FLASH_CR_PG);
  } 

  /* Return the Program Status */
  return status;
}
 800366e:	bd70      	pop	{r4, r5, r6, pc}
  status = FLASH_WaitForLastOperation();
  
  if(status == FLASH_COMPLETE)
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 8003670:	f44f 5570 	mov.w	r5, #15360	; 0x3c00
 8003674:	f2c4 0502 	movt	r5, #16386	; 0x4002
 8003678:	692b      	ldr	r3, [r5, #16]
 800367a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800367e:	612b      	str	r3, [r5, #16]
    FLASH->CR |= FLASH_PSIZE_BYTE;
 8003680:	692b      	ldr	r3, [r5, #16]
 8003682:	612b      	str	r3, [r5, #16]
    FLASH->CR |= FLASH_CR_PG;
 8003684:	692b      	ldr	r3, [r5, #16]
 8003686:	f043 0301 	orr.w	r3, r3, #1
 800368a:	612b      	str	r3, [r5, #16]
  
    *(__IO uint8_t*)Address = Data;
 800368c:	7026      	strb	r6, [r4, #0]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 800368e:	f7ff ff93 	bl	80035b8 <FLASH_WaitForLastOperation>

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8003692:	692b      	ldr	r3, [r5, #16]
 8003694:	f023 0301 	bic.w	r3, r3, #1
 8003698:	612b      	str	r3, [r5, #16]
  } 

  /* Return the Program Status */
  return status;
}
 800369a:	bd70      	pop	{r4, r5, r6, pc}

0800369c <FLASH_ProgramHalfWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data)
{
 800369c:	b570      	push	{r4, r5, r6, lr}
 800369e:	4604      	mov	r4, r0
 80036a0:	460e      	mov	r6, r1

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 80036a2:	f7ff ff89 	bl	80035b8 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 80036a6:	2808      	cmp	r0, #8
 80036a8:	d000      	beq.n	80036ac <FLASH_ProgramHalfWord+0x10>
    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
  } 
  /* Return the Program Status */
  return status;
}
 80036aa:	bd70      	pop	{r4, r5, r6, pc}
  status = FLASH_WaitForLastOperation();
  
  if(status == FLASH_COMPLETE)
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 80036ac:	f44f 5570 	mov.w	r5, #15360	; 0x3c00
 80036b0:	f2c4 0502 	movt	r5, #16386	; 0x4002
 80036b4:	692b      	ldr	r3, [r5, #16]
 80036b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036ba:	612b      	str	r3, [r5, #16]
    FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80036bc:	692b      	ldr	r3, [r5, #16]
 80036be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036c2:	612b      	str	r3, [r5, #16]
    FLASH->CR |= FLASH_CR_PG;
 80036c4:	692b      	ldr	r3, [r5, #16]
 80036c6:	f043 0301 	orr.w	r3, r3, #1
 80036ca:	612b      	str	r3, [r5, #16]
  
    *(__IO uint16_t*)Address = Data;
 80036cc:	8026      	strh	r6, [r4, #0]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 80036ce:	f7ff ff73 	bl	80035b8 <FLASH_WaitForLastOperation>

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 80036d2:	692b      	ldr	r3, [r5, #16]
 80036d4:	f023 0301 	bic.w	r3, r3, #1
 80036d8:	612b      	str	r3, [r5, #16]
  } 
  /* Return the Program Status */
  return status;
}
 80036da:	bd70      	pop	{r4, r5, r6, pc}

080036dc <FLASH_ProgramWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
{
 80036dc:	b570      	push	{r4, r5, r6, lr}
 80036de:	4604      	mov	r4, r0
 80036e0:	460e      	mov	r6, r1

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 80036e2:	f7ff ff69 	bl	80035b8 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 80036e6:	2808      	cmp	r0, #8
 80036e8:	d000      	beq.n	80036ec <FLASH_ProgramWord+0x10>
    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
  } 
  /* Return the Program Status */
  return status;
}
 80036ea:	bd70      	pop	{r4, r5, r6, pc}
  status = FLASH_WaitForLastOperation();
  
  if(status == FLASH_COMPLETE)
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 80036ec:	f44f 5570 	mov.w	r5, #15360	; 0x3c00
 80036f0:	f2c4 0502 	movt	r5, #16386	; 0x4002
 80036f4:	692b      	ldr	r3, [r5, #16]
 80036f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036fa:	612b      	str	r3, [r5, #16]
    FLASH->CR |= FLASH_PSIZE_WORD;
 80036fc:	692b      	ldr	r3, [r5, #16]
 80036fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003702:	612b      	str	r3, [r5, #16]
    FLASH->CR |= FLASH_CR_PG;
 8003704:	692b      	ldr	r3, [r5, #16]
 8003706:	f043 0301 	orr.w	r3, r3, #1
 800370a:	612b      	str	r3, [r5, #16]
  
    *(__IO uint32_t*)Address = Data;
 800370c:	6026      	str	r6, [r4, #0]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 800370e:	f7ff ff53 	bl	80035b8 <FLASH_WaitForLastOperation>

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8003712:	692b      	ldr	r3, [r5, #16]
 8003714:	f023 0301 	bic.w	r3, r3, #1
 8003718:	612b      	str	r3, [r5, #16]
  } 
  /* Return the Program Status */
  return status;
}
 800371a:	bd70      	pop	{r4, r5, r6, pc}

0800371c <FLASH_ProgramDoubleWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramDoubleWord(uint32_t Address, uint64_t Data)
{
 800371c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800371e:	4606      	mov	r6, r0
 8003720:	4614      	mov	r4, r2
 8003722:	461d      	mov	r5, r3

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 8003724:	f7ff ff48 	bl	80035b8 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 8003728:	2808      	cmp	r0, #8
 800372a:	d000      	beq.n	800372e <FLASH_ProgramDoubleWord+0x12>
    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
  } 
  /* Return the Program Status */
  return status;
}
 800372c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  status = FLASH_WaitForLastOperation();
  
  if(status == FLASH_COMPLETE)
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 800372e:	f44f 5770 	mov.w	r7, #15360	; 0x3c00
 8003732:	f2c4 0702 	movt	r7, #16386	; 0x4002
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800373c:	613b      	str	r3, [r7, #16]
    FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003744:	613b      	str	r3, [r7, #16]
    FLASH->CR |= FLASH_CR_PG;
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	f043 0301 	orr.w	r3, r3, #1
 800374c:	613b      	str	r3, [r7, #16]
  
    *(__IO uint64_t*)Address = Data;
 800374e:	e9c6 4500 	strd	r4, r5, [r6]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 8003752:	f7ff ff31 	bl	80035b8 <FLASH_WaitForLastOperation>

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	f023 0301 	bic.w	r3, r3, #1
 800375c:	613b      	str	r3, [r7, #16]
  } 
  /* Return the Program Status */
  return status;
}
 800375e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003760 <FLASH_EraseAllSectors>:
  *       
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_EraseAllSectors(uint8_t VoltageRange)
{
 8003760:	b538      	push	{r3, r4, r5, lr}
 8003762:	4604      	mov	r4, r0
  uint32_t tmp_psize = 0x0;
  FLASH_Status status = FLASH_COMPLETE;
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 8003764:	f7ff ff28 	bl	80035b8 <FLASH_WaitForLastOperation>
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == VoltageRange_1)
 8003768:	b154      	cbz	r4, 8003780 <FLASH_EraseAllSectors+0x20>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if(VoltageRange == VoltageRange_2)
 800376a:	2c01      	cmp	r4, #1
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800376c:	bf08      	it	eq
 800376e:	f44f 7480 	moveq.w	r4, #256	; 0x100
  
  if(VoltageRange == VoltageRange_1)
  {
     tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if(VoltageRange == VoltageRange_2)
 8003772:	d005      	beq.n	8003780 <FLASH_EraseAllSectors+0x20>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
  }
  else if(VoltageRange == VoltageRange_3)
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8003774:	2c02      	cmp	r4, #2
 8003776:	bf14      	ite	ne
 8003778:	f44f 7440 	movne.w	r4, #768	; 0x300
 800377c:	f44f 7400 	moveq.w	r4, #512	; 0x200
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
  }  
  if(status == FLASH_COMPLETE)
 8003780:	2808      	cmp	r0, #8
 8003782:	d000      	beq.n	8003786 <FLASH_EraseAllSectors+0x26>
    FLASH->CR &= (~FLASH_CR_MER);

  }   
  /* Return the Erase Status */
  return status;
}
 8003784:	bd38      	pop	{r3, r4, r5, pc}
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
  }  
  if(status == FLASH_COMPLETE)
  {
    /* if the previous operation is completed, proceed to erase all sectors */
     FLASH->CR &= CR_PSIZE_MASK;
 8003786:	f44f 5570 	mov.w	r5, #15360	; 0x3c00
 800378a:	f2c4 0502 	movt	r5, #16386	; 0x4002
 800378e:	692b      	ldr	r3, [r5, #16]
 8003790:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003794:	612b      	str	r3, [r5, #16]
     FLASH->CR |= tmp_psize;
 8003796:	692b      	ldr	r3, [r5, #16]
 8003798:	431c      	orrs	r4, r3
 800379a:	612c      	str	r4, [r5, #16]
     FLASH->CR |= FLASH_CR_MER;
 800379c:	692b      	ldr	r3, [r5, #16]
 800379e:	f043 0304 	orr.w	r3, r3, #4
 80037a2:	612b      	str	r3, [r5, #16]
     FLASH->CR |= FLASH_CR_STRT;
 80037a4:	692b      	ldr	r3, [r5, #16]
 80037a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037aa:	612b      	str	r3, [r5, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 80037ac:	f7ff ff04 	bl	80035b8 <FLASH_WaitForLastOperation>

    /* if the erase operation is completed, disable the MER Bit */
    FLASH->CR &= (~FLASH_CR_MER);
 80037b0:	692b      	ldr	r3, [r5, #16]
 80037b2:	f023 0304 	bic.w	r3, r3, #4
 80037b6:	612b      	str	r3, [r5, #16]

  }   
  /* Return the Erase Status */
  return status;
}
 80037b8:	bd38      	pop	{r3, r4, r5, pc}
 80037ba:	bf00      	nop

080037bc <FLASH_EraseSector>:
  *       
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_EraseSector(uint32_t FLASH_Sector, uint8_t VoltageRange)
{
 80037bc:	b570      	push	{r4, r5, r6, lr}
 80037be:	4605      	mov	r5, r0
  assert_param(IS_FLASH_SECTOR(FLASH_Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == VoltageRange_1)
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 80037c0:	460e      	mov	r6, r1

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(FLASH_Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == VoltageRange_1)
 80037c2:	b149      	cbz	r1, 80037d8 <FLASH_EraseSector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
  }
  else if(VoltageRange == VoltageRange_3)
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80037c4:	2902      	cmp	r1, #2
 80037c6:	bf14      	ite	ne
 80037c8:	f44f 7640 	movne.w	r6, #768	; 0x300
 80037cc:	f44f 7600 	moveq.w	r6, #512	; 0x200
  
  if(VoltageRange == VoltageRange_1)
  {
     tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if(VoltageRange == VoltageRange_2)
 80037d0:	2901      	cmp	r1, #1
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80037d2:	bf08      	it	eq
 80037d4:	f44f 7680 	moveq.w	r6, #256	; 0x100
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
  }
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 80037d8:	f7ff feee 	bl	80035b8 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 80037dc:	2808      	cmp	r0, #8
 80037de:	d000      	beq.n	80037e2 <FLASH_EraseSector+0x26>
    FLASH->CR &= (~FLASH_CR_SER);
    FLASH->CR &= SECTOR_MASK; 
  }
  /* Return the Erase Status */
  return status;
}
 80037e0:	bd70      	pop	{r4, r5, r6, pc}
  status = FLASH_WaitForLastOperation();
  
  if(status == FLASH_COMPLETE)
  { 
    /* if the previous operation is completed, proceed to erase the sector */
    FLASH->CR &= CR_PSIZE_MASK;
 80037e2:	f44f 5470 	mov.w	r4, #15360	; 0x3c00
 80037e6:	f2c4 0402 	movt	r4, #16386	; 0x4002
 80037ea:	6923      	ldr	r3, [r4, #16]
 80037ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037f0:	6123      	str	r3, [r4, #16]
    FLASH->CR |= tmp_psize;
 80037f2:	6923      	ldr	r3, [r4, #16]
 80037f4:	431e      	orrs	r6, r3
 80037f6:	6126      	str	r6, [r4, #16]
    FLASH->CR &= SECTOR_MASK;
 80037f8:	6923      	ldr	r3, [r4, #16]
 80037fa:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80037fe:	6123      	str	r3, [r4, #16]
    FLASH->CR |= FLASH_CR_SER | FLASH_Sector;
 8003800:	6923      	ldr	r3, [r4, #16]
 8003802:	f043 0302 	orr.w	r3, r3, #2
 8003806:	431d      	orrs	r5, r3
 8003808:	6125      	str	r5, [r4, #16]
    FLASH->CR |= FLASH_CR_STRT;
 800380a:	6923      	ldr	r3, [r4, #16]
 800380c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003810:	6123      	str	r3, [r4, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 8003812:	f7ff fed1 	bl	80035b8 <FLASH_WaitForLastOperation>
    
    /* if the erase operation is completed, disable the SER Bit */
    FLASH->CR &= (~FLASH_CR_SER);
 8003816:	6923      	ldr	r3, [r4, #16]
 8003818:	f023 0302 	bic.w	r3, r3, #2
 800381c:	6123      	str	r3, [r4, #16]
    FLASH->CR &= SECTOR_MASK; 
 800381e:	6923      	ldr	r3, [r4, #16]
 8003820:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003824:	6123      	str	r3, [r4, #16]
  }
  /* Return the Erase Status */
  return status;
}
 8003826:	bd70      	pop	{r4, r5, r6, pc}

08003828 <FSMC_NORSRAMDeInit>:
  *            @arg FSMC_Bank1_NORSRAM3: FSMC Bank1 NOR/SRAM3 
  *            @arg FSMC_Bank1_NORSRAM4: FSMC Bank1 NOR/SRAM4 
  * @retval None
  */
void FSMC_NORSRAMDeInit(uint32_t FSMC_Bank)
{
 8003828:	b410      	push	{r4}
  /* Check the parameter */
  assert_param(IS_FSMC_NORSRAM_BANK(FSMC_Bank));
  
  /* FSMC_Bank1_NORSRAM1 */
  if(FSMC_Bank == FSMC_Bank1_NORSRAM1)
 800382a:	b1a0      	cbz	r0, 8003856 <FSMC_NORSRAMDeInit+0x2e>
    FSMC_Bank1->BTCR[FSMC_Bank] = 0x000030DB;    
  }
  /* FSMC_Bank1_NORSRAM2,  FSMC_Bank1_NORSRAM3 or FSMC_Bank1_NORSRAM4 */
  else
  {   
    FSMC_Bank1->BTCR[FSMC_Bank] = 0x000030D2; 
 800382c:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8003830:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003834:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
  }
  FSMC_Bank1->BTCR[FSMC_Bank + 1] = 0x0FFFFFFF;
  FSMC_Bank1E->BWTR[FSMC_Bank] = 0x0FFFFFFF;  
 8003838:	f44f 7382 	mov.w	r3, #260	; 0x104
  /* FSMC_Bank1_NORSRAM2,  FSMC_Bank1_NORSRAM3 or FSMC_Bank1_NORSRAM4 */
  else
  {   
    FSMC_Bank1->BTCR[FSMC_Bank] = 0x000030D2; 
  }
  FSMC_Bank1->BTCR[FSMC_Bank + 1] = 0x0FFFFFFF;
 800383c:	1c44      	adds	r4, r0, #1
  FSMC_Bank1E->BWTR[FSMC_Bank] = 0x0FFFFFFF;  
 800383e:	f2ca 0300 	movt	r3, #40960	; 0xa000
  /* FSMC_Bank1_NORSRAM2,  FSMC_Bank1_NORSRAM3 or FSMC_Bank1_NORSRAM4 */
  else
  {   
    FSMC_Bank1->BTCR[FSMC_Bank] = 0x000030D2; 
  }
  FSMC_Bank1->BTCR[FSMC_Bank + 1] = 0x0FFFFFFF;
 8003842:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 8003846:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800384a:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
  FSMC_Bank1E->BWTR[FSMC_Bank] = 0x0FFFFFFF;  
 800384e:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
 8003852:	bc10      	pop	{r4}
 8003854:	4770      	bx	lr
  assert_param(IS_FSMC_NORSRAM_BANK(FSMC_Bank));
  
  /* FSMC_Bank1_NORSRAM1 */
  if(FSMC_Bank == FSMC_Bank1_NORSRAM1)
  {
    FSMC_Bank1->BTCR[FSMC_Bank] = 0x000030DB;    
 8003856:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800385a:	f243 02db 	movw	r2, #12507	; 0x30db
 800385e:	601a      	str	r2, [r3, #0]
 8003860:	e7ea      	b.n	8003838 <FSMC_NORSRAMDeInit+0x10>
 8003862:	bf00      	nop

08003864 <FSMC_NORSRAMInit>:
  *         that contains the configuration information for the FSMC NOR/SRAM 
  *         specified Banks.                       
  * @retval None
  */
void FSMC_NORSRAMInit(FSMC_NORSRAMInitTypeDef* FSMC_NORSRAMInitStruct)
{ 
 8003864:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode)); 
  
  /* Bank1 NOR/SRAM control register configuration */ 
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
            FSMC_NORSRAMInitStruct->FSMC_MemoryType |
 8003868:	6881      	ldr	r1, [r0, #8]
  assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode)); 
  
  /* Bank1 NOR/SRAM control register configuration */ 
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
 800386a:	f8d0 a004 	ldr.w	sl, [r0, #4]
            FSMC_NORSRAMInitStruct->FSMC_MemoryType |
 800386e:	f8d0 900c 	ldr.w	r9, [r0, #12]
            FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
 8003872:	f8d0 8010 	ldr.w	r8, [r0, #16]
            FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
 8003876:	f8d0 c014 	ldr.w	ip, [r0, #20]
            FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
 800387a:	6987      	ldr	r7, [r0, #24]
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
 800387c:	69c6      	ldr	r6, [r0, #28]
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
 800387e:	6a05      	ldr	r5, [r0, #32]
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
 8003880:	f8d0 b024 	ldr.w	fp, [r0, #36]	; 0x24
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
            FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
 8003884:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision));
  assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode)); 
  
  /* Bank1 NOR/SRAM control register configuration */ 
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
 8003886:	6803      	ldr	r3, [r0, #0]
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
 8003888:	ea41 0a0a 	orr.w	sl, r1, sl
            FSMC_NORSRAMInitStruct->FSMC_MemoryType |
 800388c:	ea4a 0909 	orr.w	r9, sl, r9
            FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
 8003890:	ea49 0908 	orr.w	r9, r9, r8
            FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
 8003894:	ea49 090c 	orr.w	r9, r9, ip
            FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
 8003898:	ea49 0707 	orr.w	r7, r9, r7
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
 800389c:	433e      	orrs	r6, r7
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
 800389e:	4335      	orrs	r5, r6
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
 80038a0:	6a86      	ldr	r6, [r0, #40]	; 0x28
            FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
            FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
            FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
 80038a2:	ea45 050b 	orr.w	r5, r5, fp
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
 80038a6:	4335      	orrs	r5, r6
            FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
            FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
 80038a8:	6b06      	ldr	r6, [r0, #48]	; 0x30
  assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision));
  assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode)); 
  
  /* Bank1 NOR/SRAM control register configuration */ 
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
 80038aa:	f04f 4420 	mov.w	r4, #2684354560	; 0xa0000000
            FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
 80038ae:	4315      	orrs	r5, r2
            FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
 80038b0:	4335      	orrs	r5, r6
  assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision));
  assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode)); 
  
  /* Bank1 NOR/SRAM control register configuration */ 
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
 80038b2:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
            FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
            FSMC_NORSRAMInitStruct->FSMC_WriteBurst;
  if(FSMC_NORSRAMInitStruct->FSMC_MemoryType == FSMC_MemoryType_NOR)
 80038b6:	2908      	cmp	r1, #8
  {
    FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] |= (uint32_t)BCR_FACCEN_SET;
 80038b8:	bf02      	ittt	eq
 80038ba:	f854 1023 	ldreq.w	r1, [r4, r3, lsl #2]
 80038be:	f041 0140 	orreq.w	r1, r1, #64	; 0x40
 80038c2:	f844 1023 	streq.w	r1, [r4, r3, lsl #2]
  }
  /* Bank1 NOR/SRAM timing register configuration */
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
 80038c6:	6b41      	ldr	r1, [r0, #52]	; 0x34
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
 80038c8:	e891 1020 	ldmia.w	r1, {r5, ip}
  {
    FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] |= (uint32_t)BCR_FACCEN_SET;
  }
  /* Bank1 NOR/SRAM timing register configuration */
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
 80038cc:	f8d1 8018 	ldr.w	r8, [r1, #24]
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
 80038d0:	688f      	ldr	r7, [r1, #8]
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration << 16) |
 80038d2:	68cc      	ldr	r4, [r1, #12]
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision << 20) |
 80038d4:	690e      	ldr	r6, [r1, #16]
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
 80038d6:	6949      	ldr	r1, [r1, #20]
  {
    FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] |= (uint32_t)BCR_FACCEN_SET;
  }
  /* Bank1 NOR/SRAM timing register configuration */
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
 80038d8:	ea48 0505 	orr.w	r5, r8, r5
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
 80038dc:	ea45 150c 	orr.w	r5, r5, ip, lsl #4
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
 80038e0:	ea45 2507 	orr.w	r5, r5, r7, lsl #8
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration << 16) |
 80038e4:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision << 20) |
 80038e8:	ea45 5506 	orr.w	r5, r5, r6, lsl #20
  if(FSMC_NORSRAMInitStruct->FSMC_MemoryType == FSMC_MemoryType_NOR)
  {
    FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] |= (uint32_t)BCR_FACCEN_SET;
  }
  /* Bank1 NOR/SRAM timing register configuration */
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
 80038ec:	1c5c      	adds	r4, r3, #1
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration << 16) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision << 20) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
 80038ee:	ea45 6501 	orr.w	r5, r5, r1, lsl #24
  if(FSMC_NORSRAMInitStruct->FSMC_MemoryType == FSMC_MemoryType_NOR)
  {
    FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] |= (uint32_t)BCR_FACCEN_SET;
  }
  /* Bank1 NOR/SRAM timing register configuration */
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
 80038f2:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
             FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode;
            
    
  /* Bank1 NOR/SRAM timing register for write configuration, if extended mode is used */
  if(FSMC_NORSRAMInitStruct->FSMC_ExtendedMode == FSMC_ExtendedMode_Enable)
 80038f6:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
  if(FSMC_NORSRAMInitStruct->FSMC_MemoryType == FSMC_MemoryType_NOR)
  {
    FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] |= (uint32_t)BCR_FACCEN_SET;
  }
  /* Bank1 NOR/SRAM timing register configuration */
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
 80038fa:	f841 5024 	str.w	r5, [r1, r4, lsl #2]
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
             FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode;
            
    
  /* Bank1 NOR/SRAM timing register for write configuration, if extended mode is used */
  if(FSMC_NORSRAMInitStruct->FSMC_ExtendedMode == FSMC_ExtendedMode_Enable)
 80038fe:	d00a      	beq.n	8003916 <FSMC_NORSRAMInit+0xb2>
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency << 24) |
               FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode;
  }
  else
  {
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 0x0FFFFFFF;
 8003900:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003904:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8003908:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800390c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  }
}
 8003910:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003914:	4770      	bx	lr
    assert_param(IS_FSMC_DATASETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime));
    assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision));
    assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency));
    assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode));
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
              (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
 8003916:	6b82      	ldr	r2, [r0, #56]	; 0x38
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
 8003918:	e892 0042 	ldmia.w	r2, {r1, r6}
    assert_param(IS_FSMC_DATASETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime));
    assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision));
    assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency));
    assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode));
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
              (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
 800391c:	6997      	ldr	r7, [r2, #24]
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime << 8) |
 800391e:	6895      	ldr	r5, [r2, #8]
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision << 20) |
 8003920:	6914      	ldr	r4, [r2, #16]
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency << 24) |
 8003922:	6950      	ldr	r0, [r2, #20]
    assert_param(IS_FSMC_DATASETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime));
    assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision));
    assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency));
    assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode));
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
              (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
 8003924:	4339      	orrs	r1, r7
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
 8003926:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime << 8) |
 800392a:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
    assert_param(IS_FSMC_ADDRESS_HOLD_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime));
    assert_param(IS_FSMC_DATASETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime));
    assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision));
    assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency));
    assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode));
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
 800392e:	f44f 7282 	mov.w	r2, #260	; 0x104
              (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime << 8) |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision << 20) |
 8003932:	ea41 5104 	orr.w	r1, r1, r4, lsl #20
    assert_param(IS_FSMC_ADDRESS_HOLD_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime));
    assert_param(IS_FSMC_DATASETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime));
    assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision));
    assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency));
    assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode));
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
 8003936:	f2ca 0200 	movt	r2, #40960	; 0xa000
              (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime << 8) |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision << 20) |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency << 24) |
 800393a:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
    assert_param(IS_FSMC_ADDRESS_HOLD_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime));
    assert_param(IS_FSMC_DATASETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime));
    assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision));
    assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency));
    assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode));
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
 800393e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8003942:	e7e5      	b.n	8003910 <FSMC_NORSRAMInit+0xac>

08003944 <FSMC_NORSRAMStructInit>:
  * @param  FSMC_NORSRAMInitStruct: pointer to a FSMC_NORSRAMInitTypeDef structure 
  *         which will be initialized.
  * @retval None
  */
void FSMC_NORSRAMStructInit(FSMC_NORSRAMInitTypeDef* FSMC_NORSRAMInitStruct)
{  
 8003944:	b470      	push	{r4, r5, r6}
  /* Reset NOR/SRAM Init structure parameters values */
  FSMC_NORSRAMInitStruct->FSMC_Bank = FSMC_Bank1_NORSRAM1;
  FSMC_NORSRAMInitStruct->FSMC_DataAddressMux = FSMC_DataAddressMux_Enable;
 8003946:	2602      	movs	r6, #2
 8003948:	6046      	str	r6, [r0, #4]
  FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
  FSMC_NORSRAMInitStruct->FSMC_WriteOperation = FSMC_WriteOperation_Enable;
  FSMC_NORSRAMInitStruct->FSMC_WaitSignal = FSMC_WaitSignal_Enable;
  FSMC_NORSRAMInitStruct->FSMC_ExtendedMode = FSMC_ExtendedMode_Disable;
  FSMC_NORSRAMInitStruct->FSMC_WriteBurst = FSMC_WriteBurst_Disable;
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime = 0xF;
 800394a:	6b44      	ldr	r4, [r0, #52]	; 0x34
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime = 0xFF;
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration = 0xF;
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision = 0xF;
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency = 0xF;
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode = FSMC_AccessMode_A; 
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime = 0xF;
 800394c:	6b81      	ldr	r1, [r0, #56]	; 0x38
  FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode = FSMC_BurstAccessMode_Disable;
  FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait = FSMC_AsynchronousWait_Disable;
  FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity = FSMC_WaitSignalPolarity_Low;
  FSMC_NORSRAMInitStruct->FSMC_WrapMode = FSMC_WrapMode_Disable;
  FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
  FSMC_NORSRAMInitStruct->FSMC_WriteOperation = FSMC_WriteOperation_Enable;
 800394e:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 8003952:	6246      	str	r6, [r0, #36]	; 0x24
  * @retval None
  */
void FSMC_NORSRAMStructInit(FSMC_NORSRAMInitTypeDef* FSMC_NORSRAMInitStruct)
{  
  /* Reset NOR/SRAM Init structure parameters values */
  FSMC_NORSRAMInitStruct->FSMC_Bank = FSMC_Bank1_NORSRAM1;
 8003954:	2300      	movs	r3, #0
  FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
  FSMC_NORSRAMInitStruct->FSMC_WriteOperation = FSMC_WriteOperation_Enable;
  FSMC_NORSRAMInitStruct->FSMC_WaitSignal = FSMC_WaitSignal_Enable;
  FSMC_NORSRAMInitStruct->FSMC_ExtendedMode = FSMC_ExtendedMode_Disable;
  FSMC_NORSRAMInitStruct->FSMC_WriteBurst = FSMC_WriteBurst_Disable;
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime = 0xF;
 8003956:	220f      	movs	r2, #15
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime = 0xF;
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime = 0xFF;
 8003958:	25ff      	movs	r5, #255	; 0xff
  FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait = FSMC_AsynchronousWait_Disable;
  FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity = FSMC_WaitSignalPolarity_Low;
  FSMC_NORSRAMInitStruct->FSMC_WrapMode = FSMC_WrapMode_Disable;
  FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
  FSMC_NORSRAMInitStruct->FSMC_WriteOperation = FSMC_WriteOperation_Enable;
  FSMC_NORSRAMInitStruct->FSMC_WaitSignal = FSMC_WaitSignal_Enable;
 800395a:	f44f 5600 	mov.w	r6, #8192	; 0x2000
  * @retval None
  */
void FSMC_NORSRAMStructInit(FSMC_NORSRAMInitTypeDef* FSMC_NORSRAMInitStruct)
{  
  /* Reset NOR/SRAM Init structure parameters values */
  FSMC_NORSRAMInitStruct->FSMC_Bank = FSMC_Bank1_NORSRAM1;
 800395e:	6003      	str	r3, [r0, #0]
  FSMC_NORSRAMInitStruct->FSMC_DataAddressMux = FSMC_DataAddressMux_Enable;
  FSMC_NORSRAMInitStruct->FSMC_MemoryType = FSMC_MemoryType_SRAM;
 8003960:	6083      	str	r3, [r0, #8]
  FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_8b;
 8003962:	60c3      	str	r3, [r0, #12]
  FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode = FSMC_BurstAccessMode_Disable;
 8003964:	6103      	str	r3, [r0, #16]
  FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait = FSMC_AsynchronousWait_Disable;
 8003966:	6143      	str	r3, [r0, #20]
  FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity = FSMC_WaitSignalPolarity_Low;
 8003968:	6183      	str	r3, [r0, #24]
  FSMC_NORSRAMInitStruct->FSMC_WrapMode = FSMC_WrapMode_Disable;
 800396a:	61c3      	str	r3, [r0, #28]
  FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
 800396c:	6203      	str	r3, [r0, #32]
  FSMC_NORSRAMInitStruct->FSMC_WriteOperation = FSMC_WriteOperation_Enable;
  FSMC_NORSRAMInitStruct->FSMC_WaitSignal = FSMC_WaitSignal_Enable;
 800396e:	6286      	str	r6, [r0, #40]	; 0x28
  FSMC_NORSRAMInitStruct->FSMC_ExtendedMode = FSMC_ExtendedMode_Disable;
 8003970:	62c3      	str	r3, [r0, #44]	; 0x2c
  FSMC_NORSRAMInitStruct->FSMC_WriteBurst = FSMC_WriteBurst_Disable;
 8003972:	6303      	str	r3, [r0, #48]	; 0x30
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime = 0xF;
 8003974:	6022      	str	r2, [r4, #0]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime = 0xF;
 8003976:	6062      	str	r2, [r4, #4]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime = 0xFF;
 8003978:	60a5      	str	r5, [r4, #8]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration = 0xF;
 800397a:	60e2      	str	r2, [r4, #12]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision = 0xF;
 800397c:	6122      	str	r2, [r4, #16]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency = 0xF;
 800397e:	6162      	str	r2, [r4, #20]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode = FSMC_AccessMode_A; 
 8003980:	61a3      	str	r3, [r4, #24]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime = 0xF;
 8003982:	600a      	str	r2, [r1, #0]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime = 0xF;
 8003984:	604a      	str	r2, [r1, #4]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime = 0xFF;
 8003986:	608d      	str	r5, [r1, #8]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_BusTurnAroundDuration = 0xF;
 8003988:	60ca      	str	r2, [r1, #12]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision = 0xF;
 800398a:	610a      	str	r2, [r1, #16]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency = 0xF;
 800398c:	614a      	str	r2, [r1, #20]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode = FSMC_AccessMode_A;
 800398e:	618b      	str	r3, [r1, #24]
}
 8003990:	bc70      	pop	{r4, r5, r6}
 8003992:	4770      	bx	lr

08003994 <FSMC_NORSRAMCmd>:
void FSMC_NORSRAMCmd(uint32_t FSMC_Bank, FunctionalState NewState)
{
  assert_param(IS_FSMC_NORSRAM_BANK(FSMC_Bank));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8003994:	b959      	cbnz	r1, 80039ae <FSMC_NORSRAMCmd+0x1a>
    FSMC_Bank1->BTCR[FSMC_Bank] |= BCR_MBKEN_SET;
  }
  else
  {
    /* Disable the selected NOR/SRAM Bank by clearing the PBKEN bit in the BCRx register */
    FSMC_Bank1->BTCR[FSMC_Bank] &= BCR_MBKEN_RESET;
 8003996:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800399a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800399e:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
 80039a2:	f2c0 030f 	movt	r3, #15
 80039a6:	400b      	ands	r3, r1
 80039a8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 80039ac:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected NOR/SRAM Bank by setting the PBKEN bit in the BCRx register */
    FSMC_Bank1->BTCR[FSMC_Bank] |= BCR_MBKEN_SET;
 80039ae:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 80039b2:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 80039b6:	f042 0201 	orr.w	r2, r2, #1
 80039ba:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
 80039be:	4770      	bx	lr

080039c0 <FSMC_NANDDeInit>:
  assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
  
  if(FSMC_Bank == FSMC_Bank2_NAND)
  {
    /* Set the FSMC_Bank2 registers to their reset values */
    FSMC_Bank2->PCR2 = 0x00000018;
 80039c0:	2360      	movs	r3, #96	; 0x60
void FSMC_NANDDeInit(uint32_t FSMC_Bank)
{
  /* Check the parameter */
  assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
  
  if(FSMC_Bank == FSMC_Bank2_NAND)
 80039c2:	2810      	cmp	r0, #16
  }
  /* FSMC_Bank3_NAND */  
  else
  {
    /* Set the FSMC_Bank3 registers to their reset values */
    FSMC_Bank3->PCR3 = 0x00000018;
 80039c4:	bf18      	it	ne
 80039c6:	2380      	movne	r3, #128	; 0x80
 80039c8:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80039cc:	2118      	movs	r1, #24
 80039ce:	6019      	str	r1, [r3, #0]
    FSMC_Bank3->SR3 = 0x00000040;
    FSMC_Bank3->PMEM3 = 0xFCFCFCFC;
 80039d0:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
  /* FSMC_Bank3_NAND */  
  else
  {
    /* Set the FSMC_Bank3 registers to their reset values */
    FSMC_Bank3->PCR3 = 0x00000018;
    FSMC_Bank3->SR3 = 0x00000040;
 80039d4:	2140      	movs	r1, #64	; 0x40
 80039d6:	6059      	str	r1, [r3, #4]
    FSMC_Bank3->PMEM3 = 0xFCFCFCFC;
 80039d8:	609a      	str	r2, [r3, #8]
    FSMC_Bank3->PATT3 = 0xFCFCFCFC; 
 80039da:	60da      	str	r2, [r3, #12]
 80039dc:	4770      	bx	lr
 80039de:	bf00      	nop

080039e0 <FSMC_NANDInit>:
  * @param  FSMC_NANDInitStruct : pointer to a FSMC_NANDInitTypeDef structure that
  *         contains the configuration information for the FSMC NAND specified Banks.                       
  * @retval None
  */
void FSMC_NANDInit(FSMC_NANDInitTypeDef* FSMC_NANDInitStruct)
{
 80039e0:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FSMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 80039e4:	6a03      	ldr	r3, [r0, #32]
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
            FSMC_NANDInitStruct->FSMC_MemoryDataWidth |
            FSMC_NANDInitStruct->FSMC_ECC |
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
 80039e6:	6941      	ldr	r1, [r0, #20]
  assert_param(IS_FSMC_HOLD_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
 80039e8:	f8d0 a004 	ldr.w	sl, [r0, #4]
 80039ec:	f8d0 9008 	ldr.w	r9, [r0, #8]
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FSMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 80039f0:	689f      	ldr	r7, [r3, #8]
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FSMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 80039f2:	685c      	ldr	r4, [r3, #4]
  
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
            FSMC_NANDInitStruct->FSMC_MemoryDataWidth |
            FSMC_NANDInitStruct->FSMC_ECC |
 80039f4:	f8d0 800c 	ldr.w	r8, [r0, #12]
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FSMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 80039f8:	69c2      	ldr	r2, [r0, #28]
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
            FSMC_NANDInitStruct->FSMC_MemoryDataWidth |
            FSMC_NANDInitStruct->FSMC_ECC |
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
 80039fa:	6906      	ldr	r6, [r0, #16]
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FSMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 80039fc:	f8d2 c008 	ldr.w	ip, [r2, #8]
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FSMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8003a00:	6855      	ldr	r5, [r2, #4]
 8003a02:	f8d2 b000 	ldr.w	fp, [r2]
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
 8003a06:	68d2      	ldr	r2, [r2, #12]
  * @param  FSMC_NANDInitStruct : pointer to a FSMC_NANDInitTypeDef structure that
  *         contains the configuration information for the FSMC NAND specified Banks.                       
  * @retval None
  */
void FSMC_NANDInit(FSMC_NANDInitTypeDef* FSMC_NANDInitStruct)
{
 8003a08:	b084      	sub	sp, #16
  assert_param(IS_FSMC_HOLD_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
 8003a0a:	ea4a 0909 	orr.w	r9, sl, r9
            FSMC_NANDInitStruct->FSMC_MemoryDataWidth |
            FSMC_NANDInitStruct->FSMC_ECC |
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
 8003a0e:	9101      	str	r1, [sp, #4]
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FSMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8003a10:	6819      	ldr	r1, [r3, #0]
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);
 8003a12:	68db      	ldr	r3, [r3, #12]
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FSMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8003a14:	9103      	str	r1, [sp, #12]
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 8003a16:	043f      	lsls	r7, r7, #16
  assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
            FSMC_NANDInitStruct->FSMC_MemoryDataWidth |
 8003a18:	f049 0908 	orr.w	r9, r9, #8
            FSMC_NANDInitStruct->FSMC_ECC |
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
 8003a1c:	6981      	ldr	r1, [r0, #24]
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);
  
  if(FSMC_NANDInitStruct->FSMC_Bank == FSMC_Bank2_NAND)
 8003a1e:	6800      	ldr	r0, [r0, #0]
            PCR_MEMORYTYPE_NAND |
            FSMC_NANDInitStruct->FSMC_MemoryDataWidth |
            FSMC_NANDInitStruct->FSMC_ECC |
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
 8003a20:	9102      	str	r1, [sp, #8]
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FSMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 8003a22:	ea47 2704 	orr.w	r7, r7, r4, lsl #8
  
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
            FSMC_NANDInitStruct->FSMC_MemoryDataWidth |
            FSMC_NANDInitStruct->FSMC_ECC |
 8003a26:	ea49 0808 	orr.w	r8, r9, r8
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
 8003a2a:	9c01      	ldr	r4, [sp, #4]
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
            FSMC_NANDInitStruct->FSMC_MemoryDataWidth |
            FSMC_NANDInitStruct->FSMC_ECC |
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
 8003a2c:	ea48 0806 	orr.w	r8, r8, r6
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
 8003a30:	ea48 2144 	orr.w	r1, r8, r4, lsl #9
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FSMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8003a34:	9c03      	ldr	r4, [sp, #12]
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FSMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 8003a36:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FSMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8003a3a:	4327      	orrs	r7, r4
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FSMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 8003a3c:	ea4c 2c05 	orr.w	ip, ip, r5, lsl #8
  assert_param(IS_FSMC_WAIT_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
 8003a40:	9c02      	ldr	r4, [sp, #8]
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FSMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8003a42:	ea4c 0b0b 	orr.w	fp, ip, fp
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);
  
  if(FSMC_NANDInitStruct->FSMC_Bank == FSMC_Bank2_NAND)
 8003a46:	2810      	cmp	r0, #16
  assert_param(IS_FSMC_WAIT_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
 8003a48:	ea41 3144 	orr.w	r1, r1, r4, lsl #13
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FSMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 8003a4c:	ea4b 6202 	orr.w	r2, fp, r2, lsl #24
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FSMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 8003a50:	ea47 6703 	orr.w	r7, r7, r3, lsl #24
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);
  
  if(FSMC_NANDInitStruct->FSMC_Bank == FSMC_Bank2_NAND)
 8003a54:	d009      	beq.n	8003a6a <FSMC_NANDInit+0x8a>
    FSMC_Bank2->PATT2 = tmppatt;
  }
  else
  {
    /* FSMC_Bank3_NAND registers configuration */
    FSMC_Bank3->PCR3 = tmppcr;
 8003a56:	2080      	movs	r0, #128	; 0x80
 8003a58:	f2ca 0000 	movt	r0, #40960	; 0xa000
 8003a5c:	6001      	str	r1, [r0, #0]
    FSMC_Bank3->PMEM3 = tmppmem;
 8003a5e:	6082      	str	r2, [r0, #8]
    FSMC_Bank3->PATT3 = tmppatt;
 8003a60:	60c7      	str	r7, [r0, #12]
  }
}
 8003a62:	b004      	add	sp, #16
 8003a64:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003a68:	4770      	bx	lr
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);
  
  if(FSMC_NANDInitStruct->FSMC_Bank == FSMC_Bank2_NAND)
  {
    /* FSMC_Bank2_NAND registers configuration */
    FSMC_Bank2->PCR2 = tmppcr;
 8003a6a:	2360      	movs	r3, #96	; 0x60
 8003a6c:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8003a70:	6019      	str	r1, [r3, #0]
    FSMC_Bank2->PMEM2 = tmppmem;
 8003a72:	609a      	str	r2, [r3, #8]
    FSMC_Bank2->PATT2 = tmppatt;
 8003a74:	60df      	str	r7, [r3, #12]
 8003a76:	e7f4      	b.n	8003a62 <FSMC_NANDInit+0x82>

08003a78 <FSMC_NANDStructInit>:
  * @param  FSMC_NANDInitStruct: pointer to a FSMC_NANDInitTypeDef structure which
  *         will be initialized.
  * @retval None
  */
void FSMC_NANDStructInit(FSMC_NANDInitTypeDef* FSMC_NANDInitStruct)
{ 
 8003a78:	b430      	push	{r4, r5}
  FSMC_NANDInitStruct->FSMC_TARSetupTime = 0x0;
  FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime = 0xFC;
  FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
  FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
  FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
  FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 8003a7a:	6a01      	ldr	r1, [r0, #32]
  FSMC_NANDInitStruct->FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_8b;
  FSMC_NANDInitStruct->FSMC_ECC = FSMC_ECC_Disable;
  FSMC_NANDInitStruct->FSMC_ECCPageSize = FSMC_ECCPageSize_256Bytes;
  FSMC_NANDInitStruct->FSMC_TCLRSetupTime = 0x0;
  FSMC_NANDInitStruct->FSMC_TARSetupTime = 0x0;
  FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 8003a7c:	69c4      	ldr	r4, [r0, #28]
 8003a7e:	23fc      	movs	r3, #252	; 0xfc
  */
void FSMC_NANDStructInit(FSMC_NANDInitTypeDef* FSMC_NANDInitStruct)
{ 
  /* Reset NAND Init structure parameters values */
  FSMC_NANDInitStruct->FSMC_Bank = FSMC_Bank2_NAND;
  FSMC_NANDInitStruct->FSMC_Waitfeature = FSMC_Waitfeature_Disable;
 8003a80:	2200      	movs	r2, #0
  * @retval None
  */
void FSMC_NANDStructInit(FSMC_NANDInitTypeDef* FSMC_NANDInitStruct)
{ 
  /* Reset NAND Init structure parameters values */
  FSMC_NANDInitStruct->FSMC_Bank = FSMC_Bank2_NAND;
 8003a82:	2510      	movs	r5, #16
 8003a84:	6005      	str	r5, [r0, #0]
  FSMC_NANDInitStruct->FSMC_Waitfeature = FSMC_Waitfeature_Disable;
 8003a86:	6042      	str	r2, [r0, #4]
  FSMC_NANDInitStruct->FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_8b;
 8003a88:	6082      	str	r2, [r0, #8]
  FSMC_NANDInitStruct->FSMC_ECC = FSMC_ECC_Disable;
 8003a8a:	60c2      	str	r2, [r0, #12]
  FSMC_NANDInitStruct->FSMC_ECCPageSize = FSMC_ECCPageSize_256Bytes;
 8003a8c:	6102      	str	r2, [r0, #16]
  FSMC_NANDInitStruct->FSMC_TCLRSetupTime = 0x0;
 8003a8e:	6142      	str	r2, [r0, #20]
  FSMC_NANDInitStruct->FSMC_TARSetupTime = 0x0;
 8003a90:	6182      	str	r2, [r0, #24]
  FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 8003a92:	6023      	str	r3, [r4, #0]
  FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 8003a94:	6063      	str	r3, [r4, #4]
  FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 8003a96:	60a3      	str	r3, [r4, #8]
  FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
 8003a98:	60e3      	str	r3, [r4, #12]
  FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 8003a9a:	600b      	str	r3, [r1, #0]
  FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 8003a9c:	604b      	str	r3, [r1, #4]
  FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 8003a9e:	608b      	str	r3, [r1, #8]
  FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;	  
 8003aa0:	60cb      	str	r3, [r1, #12]
}
 8003aa2:	bc30      	pop	{r4, r5}
 8003aa4:	4770      	bx	lr
 8003aa6:	bf00      	nop

08003aa8 <FSMC_NANDCmd>:
void FSMC_NANDCmd(uint32_t FSMC_Bank, FunctionalState NewState)
{
  assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8003aa8:	b149      	cbz	r1, 8003abe <FSMC_NANDCmd+0x16>
  {
    /* Enable the selected NAND Bank by setting the PBKEN bit in the PCRx register */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 8003aaa:	2810      	cmp	r0, #16
 8003aac:	d015      	beq.n	8003ada <FSMC_NANDCmd+0x32>
    {
      FSMC_Bank2->PCR2 |= PCR_PBKEN_SET;
    }
    else
    {
      FSMC_Bank3->PCR3 |= PCR_PBKEN_SET;
 8003aae:	2380      	movs	r3, #128	; 0x80
 8003ab0:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	f042 0204 	orr.w	r2, r2, #4
 8003aba:	601a      	str	r2, [r3, #0]
 8003abc:	4770      	bx	lr
  else
  {
    /* Disable the selected NAND Bank by clearing the PBKEN bit in the PCRx register */
    if(FSMC_Bank == FSMC_Bank2_NAND)
    {
      FSMC_Bank2->PCR2 &= PCR_PBKEN_RESET;
 8003abe:	2260      	movs	r2, #96	; 0x60
    }
  }
  else
  {
    /* Disable the selected NAND Bank by clearing the PBKEN bit in the PCRx register */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 8003ac0:	2810      	cmp	r0, #16
    {
      FSMC_Bank2->PCR2 &= PCR_PBKEN_RESET;
    }
    else
    {
      FSMC_Bank3->PCR3 &= PCR_PBKEN_RESET;
 8003ac2:	bf18      	it	ne
 8003ac4:	2280      	movne	r2, #128	; 0x80
 8003ac6:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8003aca:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8003ace:	6811      	ldr	r1, [r2, #0]
 8003ad0:	f2c0 030f 	movt	r3, #15
 8003ad4:	400b      	ands	r3, r1
 8003ad6:	6013      	str	r3, [r2, #0]
 8003ad8:	4770      	bx	lr
  if (NewState != DISABLE)
  {
    /* Enable the selected NAND Bank by setting the PBKEN bit in the PCRx register */
    if(FSMC_Bank == FSMC_Bank2_NAND)
    {
      FSMC_Bank2->PCR2 |= PCR_PBKEN_SET;
 8003ada:	2360      	movs	r3, #96	; 0x60
 8003adc:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	f042 0204 	orr.w	r2, r2, #4
 8003ae6:	601a      	str	r2, [r3, #0]
 8003ae8:	4770      	bx	lr
 8003aea:	bf00      	nop

08003aec <FSMC_NANDECCCmd>:
void FSMC_NANDECCCmd(uint32_t FSMC_Bank, FunctionalState NewState)
{
  assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8003aec:	b149      	cbz	r1, 8003b02 <FSMC_NANDECCCmd+0x16>
  {
    /* Enable the selected NAND Bank ECC function by setting the ECCEN bit in the PCRx register */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 8003aee:	2810      	cmp	r0, #16
 8003af0:	d015      	beq.n	8003b1e <FSMC_NANDECCCmd+0x32>
    {
      FSMC_Bank2->PCR2 |= PCR_ECCEN_SET;
    }
    else
    {
      FSMC_Bank3->PCR3 |= PCR_ECCEN_SET;
 8003af2:	2380      	movs	r3, #128	; 0x80
 8003af4:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003afe:	601a      	str	r2, [r3, #0]
 8003b00:	4770      	bx	lr
  else
  {
    /* Disable the selected NAND Bank ECC function by clearing the ECCEN bit in the PCRx register */
    if(FSMC_Bank == FSMC_Bank2_NAND)
    {
      FSMC_Bank2->PCR2 &= PCR_ECCEN_RESET;
 8003b02:	2260      	movs	r2, #96	; 0x60
    }
  }
  else
  {
    /* Disable the selected NAND Bank ECC function by clearing the ECCEN bit in the PCRx register */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 8003b04:	2810      	cmp	r0, #16
    {
      FSMC_Bank2->PCR2 &= PCR_ECCEN_RESET;
    }
    else
    {
      FSMC_Bank3->PCR3 &= PCR_ECCEN_RESET;
 8003b06:	bf18      	it	ne
 8003b08:	2280      	movne	r2, #128	; 0x80
 8003b0a:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8003b0e:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 8003b12:	6811      	ldr	r1, [r2, #0]
 8003b14:	f2c0 030f 	movt	r3, #15
 8003b18:	400b      	ands	r3, r1
 8003b1a:	6013      	str	r3, [r2, #0]
 8003b1c:	4770      	bx	lr
  if (NewState != DISABLE)
  {
    /* Enable the selected NAND Bank ECC function by setting the ECCEN bit in the PCRx register */
    if(FSMC_Bank == FSMC_Bank2_NAND)
    {
      FSMC_Bank2->PCR2 |= PCR_ECCEN_SET;
 8003b1e:	2360      	movs	r3, #96	; 0x60
 8003b20:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b2a:	601a      	str	r2, [r3, #0]
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop

08003b30 <FSMC_GetECC>:
  */
uint32_t FSMC_GetECC(uint32_t FSMC_Bank)
{
  uint32_t eccval = 0x00000000;
  
  if(FSMC_Bank == FSMC_Bank2_NAND)
 8003b30:	2810      	cmp	r0, #16
 8003b32:	d004      	beq.n	8003b3e <FSMC_GetECC+0xe>
    eccval = FSMC_Bank2->ECCR2;
  }
  else
  {
    /* Get the ECCR3 register value */
    eccval = FSMC_Bank3->ECCR3;
 8003b34:	2380      	movs	r3, #128	; 0x80
 8003b36:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8003b3a:	6958      	ldr	r0, [r3, #20]
  }
  /* Return the error correction code value */
  return(eccval);
}
 8003b3c:	4770      	bx	lr
  uint32_t eccval = 0x00000000;
  
  if(FSMC_Bank == FSMC_Bank2_NAND)
  {
    /* Get the ECCR2 register value */
    eccval = FSMC_Bank2->ECCR2;
 8003b3e:	2360      	movs	r3, #96	; 0x60
 8003b40:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8003b44:	6958      	ldr	r0, [r3, #20]
 8003b46:	4770      	bx	lr

08003b48 <FSMC_PCCARDDeInit>:
  * @retval None
  */
void FSMC_PCCARDDeInit(void)
{
  /* Set the FSMC_Bank4 registers to their reset values */
  FSMC_Bank4->PCR4 = 0x00000018; 
 8003b48:	23a0      	movs	r3, #160	; 0xa0
 8003b4a:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8003b4e:	2118      	movs	r1, #24
 8003b50:	6019      	str	r1, [r3, #0]
  FSMC_Bank4->SR4 = 0x00000000;	
  FSMC_Bank4->PMEM4 = 0xFCFCFCFC;
 8003b52:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
  */
void FSMC_PCCARDDeInit(void)
{
  /* Set the FSMC_Bank4 registers to their reset values */
  FSMC_Bank4->PCR4 = 0x00000018; 
  FSMC_Bank4->SR4 = 0x00000000;	
 8003b56:	2100      	movs	r1, #0
 8003b58:	6059      	str	r1, [r3, #4]
  FSMC_Bank4->PMEM4 = 0xFCFCFCFC;
 8003b5a:	609a      	str	r2, [r3, #8]
  FSMC_Bank4->PATT4 = 0xFCFCFCFC;
 8003b5c:	60da      	str	r2, [r3, #12]
  FSMC_Bank4->PIO4 = 0xFCFCFCFC;
 8003b5e:	611a      	str	r2, [r3, #16]
}
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop

08003b64 <FSMC_PCCARDInit>:
  * @param  FSMC_PCCARDInitStruct : pointer to a FSMC_PCCARDInitTypeDef structure
  *         that contains the configuration information for the FSMC PCCARD Bank.                       
  * @retval None
  */
void FSMC_PCCARDInit(FSMC_PCCARDInitTypeDef* FSMC_PCCARDInitStruct)
{
 8003b64:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_FSMC_HOLD_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FSMC_PCCARDInitStruct parameters */
  FSMC_Bank4->PCR4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_Waitfeature |
                     FSMC_MemoryDataWidth_16b |  
 8003b66:	6807      	ldr	r7, [r0, #0]
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
 8003b68:	6846      	ldr	r6, [r0, #4]
                     (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FSMC_CommonSpaceTimingStructure parameters */
  FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 8003b6a:	68c4      	ldr	r4, [r0, #12]
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FSMC_AttributeSpaceTimingStructure parameters */
  FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 8003b6c:	6901      	ldr	r1, [r0, #16]
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FSMC_IOSpaceTimingStructure parameters */
  FSMC_Bank4->PIO4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime |
 8003b6e:	6942      	ldr	r2, [r0, #20]
  
  /* Set the PCR4 register value according to FSMC_PCCARDInitStruct parameters */
  FSMC_Bank4->PCR4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_Waitfeature |
                     FSMC_MemoryDataWidth_16b |  
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
                     (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
 8003b70:	6885      	ldr	r5, [r0, #8]
  assert_param(IS_FSMC_WAIT_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FSMC_PCCARDInitStruct parameters */
  FSMC_Bank4->PCR4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_Waitfeature |
 8003b72:	23a0      	movs	r3, #160	; 0xa0
                     FSMC_MemoryDataWidth_16b |  
 8003b74:	f047 0010 	orr.w	r0, r7, #16
  assert_param(IS_FSMC_WAIT_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FSMC_PCCARDInitStruct parameters */
  FSMC_Bank4->PCR4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_Waitfeature |
 8003b78:	f2ca 0300 	movt	r3, #40960	; 0xa000
                     FSMC_MemoryDataWidth_16b |  
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
 8003b7c:	ea40 2046 	orr.w	r0, r0, r6, lsl #9
 8003b80:	ea40 3045 	orr.w	r0, r0, r5, lsl #13
  assert_param(IS_FSMC_WAIT_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FSMC_PCCARDInitStruct parameters */
  FSMC_Bank4->PCR4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_Waitfeature |
 8003b84:	6018      	str	r0, [r3, #0]
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
                     (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FSMC_CommonSpaceTimingStructure parameters */
  FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8003b86:	e894 0060 	ldmia.w	r4, {r5, r6}
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 8003b8a:	68a0      	ldr	r0, [r4, #8]
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
 8003b8c:	68e4      	ldr	r4, [r4, #12]
                     (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FSMC_CommonSpaceTimingStructure parameters */
  FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 8003b8e:	0400      	lsls	r0, r0, #16
                     FSMC_MemoryDataWidth_16b |  
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
                     (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FSMC_CommonSpaceTimingStructure parameters */
  FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 8003b90:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8003b94:	4328      	orrs	r0, r5
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 8003b96:	ea40 6004 	orr.w	r0, r0, r4, lsl #24
                     FSMC_MemoryDataWidth_16b |  
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
                     (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FSMC_CommonSpaceTimingStructure parameters */
  FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 8003b9a:	6098      	str	r0, [r3, #8]
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FSMC_AttributeSpaceTimingStructure parameters */
  FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8003b9c:	e891 0070 	ldmia.w	r1, {r4, r5, r6}
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
 8003ba0:	68c8      	ldr	r0, [r1, #12]
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FSMC_AttributeSpaceTimingStructure parameters */
  FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 8003ba2:	0431      	lsls	r1, r6, #16
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FSMC_AttributeSpaceTimingStructure parameters */
  FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 8003ba4:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8003ba8:	4321      	orrs	r1, r4
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 8003baa:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FSMC_AttributeSpaceTimingStructure parameters */
  FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 8003bae:	60d9      	str	r1, [r3, #12]
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FSMC_IOSpaceTimingStructure parameters */
  FSMC_Bank4->PIO4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime |
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8003bb0:	e892 0031 	ldmia.w	r2, {r0, r4, r5}
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime << 24);             
 8003bb4:	68d1      	ldr	r1, [r2, #12]
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FSMC_IOSpaceTimingStructure parameters */
  FSMC_Bank4->PIO4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime |
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 8003bb6:	042a      	lsls	r2, r5, #16
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FSMC_IOSpaceTimingStructure parameters */
  FSMC_Bank4->PIO4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime |
 8003bb8:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8003bbc:	4302      	orrs	r2, r0
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 8003bbe:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FSMC_IOSpaceTimingStructure parameters */
  FSMC_Bank4->PIO4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime |
 8003bc2:	611a      	str	r2, [r3, #16]
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime << 24);             
}
 8003bc4:	bcf0      	pop	{r4, r5, r6, r7}
 8003bc6:	4770      	bx	lr

08003bc8 <FSMC_PCCARDStructInit>:
  * @param  FSMC_PCCARDInitStruct: pointer to a FSMC_PCCARDInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void FSMC_PCCARDStructInit(FSMC_PCCARDInitTypeDef* FSMC_PCCARDInitStruct)
{
 8003bc8:	b430      	push	{r4, r5}
  FSMC_PCCARDInitStruct->FSMC_TARSetupTime = 0x0;
  FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime = 0xFC;
  FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
  FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
  FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
  FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 8003bca:	6901      	ldr	r1, [r0, #16]
{
  /* Reset PCCARD Init structure parameters values */
  FSMC_PCCARDInitStruct->FSMC_Waitfeature = FSMC_Waitfeature_Disable;
  FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime = 0x0;
  FSMC_PCCARDInitStruct->FSMC_TARSetupTime = 0x0;
  FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 8003bcc:	68c4      	ldr	r4, [r0, #12]
  FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
  FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime = 0xFC;
  FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
  FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
  FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;	
  FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 8003bce:	6942      	ldr	r2, [r0, #20]
{
  /* Reset PCCARD Init structure parameters values */
  FSMC_PCCARDInitStruct->FSMC_Waitfeature = FSMC_Waitfeature_Disable;
  FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime = 0x0;
  FSMC_PCCARDInitStruct->FSMC_TARSetupTime = 0x0;
  FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 8003bd0:	23fc      	movs	r3, #252	; 0xfc
  * @retval None
  */
void FSMC_PCCARDStructInit(FSMC_PCCARDInitTypeDef* FSMC_PCCARDInitStruct)
{
  /* Reset PCCARD Init structure parameters values */
  FSMC_PCCARDInitStruct->FSMC_Waitfeature = FSMC_Waitfeature_Disable;
 8003bd2:	2500      	movs	r5, #0
 8003bd4:	6005      	str	r5, [r0, #0]
  FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime = 0x0;
 8003bd6:	6045      	str	r5, [r0, #4]
  FSMC_PCCARDInitStruct->FSMC_TARSetupTime = 0x0;
 8003bd8:	6085      	str	r5, [r0, #8]
  FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 8003bda:	6023      	str	r3, [r4, #0]
  FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 8003bdc:	6063      	str	r3, [r4, #4]
  FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 8003bde:	60a3      	str	r3, [r4, #8]
  FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
 8003be0:	60e3      	str	r3, [r4, #12]
  FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 8003be2:	600b      	str	r3, [r1, #0]
  FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 8003be4:	604b      	str	r3, [r1, #4]
  FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 8003be6:	608b      	str	r3, [r1, #8]
  FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;	
 8003be8:	60cb      	str	r3, [r1, #12]
  FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 8003bea:	6013      	str	r3, [r2, #0]
  FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 8003bec:	6053      	str	r3, [r2, #4]
  FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 8003bee:	6093      	str	r3, [r2, #8]
  FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
 8003bf0:	60d3      	str	r3, [r2, #12]
}
 8003bf2:	bc30      	pop	{r4, r5}
 8003bf4:	4770      	bx	lr
 8003bf6:	bf00      	nop

08003bf8 <FSMC_PCCARDCmd>:
  */
void FSMC_PCCARDCmd(FunctionalState NewState)
{
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8003bf8:	b950      	cbnz	r0, 8003c10 <FSMC_PCCARDCmd+0x18>
    FSMC_Bank4->PCR4 |= PCR_PBKEN_SET;
  }
  else
  {
    /* Disable the PCCARD Bank by clearing the PBKEN bit in the PCR4 register */
    FSMC_Bank4->PCR4 &= PCR_PBKEN_RESET;
 8003bfa:	22a0      	movs	r2, #160	; 0xa0
 8003bfc:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8003c00:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8003c04:	6811      	ldr	r1, [r2, #0]
 8003c06:	f2c0 030f 	movt	r3, #15
 8003c0a:	400b      	ands	r3, r1
 8003c0c:	6013      	str	r3, [r2, #0]
 8003c0e:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the PCCARD Bank by setting the PBKEN bit in the PCR4 register */
    FSMC_Bank4->PCR4 |= PCR_PBKEN_SET;
 8003c10:	23a0      	movs	r3, #160	; 0xa0
 8003c12:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	f042 0204 	orr.w	r2, r2, #4
 8003c1c:	601a      	str	r2, [r3, #0]
 8003c1e:	4770      	bx	lr

08003c20 <FSMC_ITConfig>:
{
  assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
  assert_param(IS_FSMC_IT(FSMC_IT));	
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8003c20:	b15a      	cbz	r2, 8003c3a <FSMC_ITConfig+0x1a>
  {
    /* Enable the selected FSMC_Bank2 interrupts */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 8003c22:	2810      	cmp	r0, #16
 8003c24:	d01e      	beq.n	8003c64 <FSMC_ITConfig+0x44>
    {
      FSMC_Bank2->SR2 |= FSMC_IT;
    }
    /* Enable the selected FSMC_Bank3 interrupts */
    else if (FSMC_Bank == FSMC_Bank3_NAND)
 8003c26:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8003c2a:	d022      	beq.n	8003c72 <FSMC_ITConfig+0x52>
      FSMC_Bank3->SR3 |= FSMC_IT;
    }
    /* Enable the selected FSMC_Bank4 interrupts */
    else
    {
      FSMC_Bank4->SR4 |= FSMC_IT;    
 8003c2c:	23a0      	movs	r3, #160	; 0xa0
 8003c2e:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8003c32:	685a      	ldr	r2, [r3, #4]
 8003c34:	4311      	orrs	r1, r2
 8003c36:	6059      	str	r1, [r3, #4]
 8003c38:	4770      	bx	lr
    }
  }
  else
  {
    /* Disable the selected FSMC_Bank2 interrupts */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 8003c3a:	2810      	cmp	r0, #16
 8003c3c:	d00a      	beq.n	8003c54 <FSMC_ITConfig+0x34>
    {
      
      FSMC_Bank2->SR2 &= (uint32_t)~FSMC_IT;
    }
    /* Disable the selected FSMC_Bank3 interrupts */
    else if (FSMC_Bank == FSMC_Bank3_NAND)
 8003c3e:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8003c42:	d01d      	beq.n	8003c80 <FSMC_ITConfig+0x60>
      FSMC_Bank3->SR3 &= (uint32_t)~FSMC_IT;
    }
    /* Disable the selected FSMC_Bank4 interrupts */
    else
    {
      FSMC_Bank4->SR4 &= (uint32_t)~FSMC_IT;    
 8003c44:	23a0      	movs	r3, #160	; 0xa0
 8003c46:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8003c4a:	685a      	ldr	r2, [r3, #4]
 8003c4c:	ea22 0101 	bic.w	r1, r2, r1
 8003c50:	6059      	str	r1, [r3, #4]
 8003c52:	4770      	bx	lr
  {
    /* Disable the selected FSMC_Bank2 interrupts */
    if(FSMC_Bank == FSMC_Bank2_NAND)
    {
      
      FSMC_Bank2->SR2 &= (uint32_t)~FSMC_IT;
 8003c54:	2360      	movs	r3, #96	; 0x60
 8003c56:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8003c5a:	685a      	ldr	r2, [r3, #4]
 8003c5c:	ea22 0101 	bic.w	r1, r2, r1
 8003c60:	6059      	str	r1, [r3, #4]
 8003c62:	4770      	bx	lr
  if (NewState != DISABLE)
  {
    /* Enable the selected FSMC_Bank2 interrupts */
    if(FSMC_Bank == FSMC_Bank2_NAND)
    {
      FSMC_Bank2->SR2 |= FSMC_IT;
 8003c64:	2360      	movs	r3, #96	; 0x60
 8003c66:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8003c6a:	685a      	ldr	r2, [r3, #4]
 8003c6c:	4311      	orrs	r1, r2
 8003c6e:	6059      	str	r1, [r3, #4]
 8003c70:	4770      	bx	lr
    }
    /* Enable the selected FSMC_Bank3 interrupts */
    else if (FSMC_Bank == FSMC_Bank3_NAND)
    {
      FSMC_Bank3->SR3 |= FSMC_IT;
 8003c72:	2380      	movs	r3, #128	; 0x80
 8003c74:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8003c78:	685a      	ldr	r2, [r3, #4]
 8003c7a:	4311      	orrs	r1, r2
 8003c7c:	6059      	str	r1, [r3, #4]
 8003c7e:	4770      	bx	lr
      FSMC_Bank2->SR2 &= (uint32_t)~FSMC_IT;
    }
    /* Disable the selected FSMC_Bank3 interrupts */
    else if (FSMC_Bank == FSMC_Bank3_NAND)
    {
      FSMC_Bank3->SR3 &= (uint32_t)~FSMC_IT;
 8003c80:	2380      	movs	r3, #128	; 0x80
 8003c82:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8003c86:	685a      	ldr	r2, [r3, #4]
 8003c88:	ea22 0101 	bic.w	r1, r2, r1
 8003c8c:	6059      	str	r1, [r3, #4]
 8003c8e:	4770      	bx	lr

08003c90 <FSMC_GetFlagStatus>:
  
  /* Check the parameters */
  assert_param(IS_FSMC_GETFLAG_BANK(FSMC_Bank));
  assert_param(IS_FSMC_GET_FLAG(FSMC_FLAG));
  
  if(FSMC_Bank == FSMC_Bank2_NAND)
 8003c90:	2810      	cmp	r0, #16
 8003c92:	d00b      	beq.n	8003cac <FSMC_GetFlagStatus+0x1c>
  {
    tmpsr = FSMC_Bank2->SR2;
  }  
  else if(FSMC_Bank == FSMC_Bank3_NAND)
 8003c94:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8003c98:	d00d      	beq.n	8003cb6 <FSMC_GetFlagStatus+0x26>
    tmpsr = FSMC_Bank3->SR3;
  }
  /* FSMC_Bank4_PCCARD*/
  else
  {
    tmpsr = FSMC_Bank4->SR4;
 8003c9a:	23a0      	movs	r3, #160	; 0xa0
 8003c9c:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8003ca0:	685b      	ldr	r3, [r3, #4]
  } 
  
  /* Get the flag status */
  if ((tmpsr & FSMC_FLAG) != (uint16_t)RESET )
  {
    bitstatus = SET;
 8003ca2:	420b      	tst	r3, r1
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
}
 8003ca4:	bf0c      	ite	eq
 8003ca6:	2000      	moveq	r0, #0
 8003ca8:	2001      	movne	r0, #1
 8003caa:	4770      	bx	lr
  assert_param(IS_FSMC_GETFLAG_BANK(FSMC_Bank));
  assert_param(IS_FSMC_GET_FLAG(FSMC_FLAG));
  
  if(FSMC_Bank == FSMC_Bank2_NAND)
  {
    tmpsr = FSMC_Bank2->SR2;
 8003cac:	2360      	movs	r3, #96	; 0x60
 8003cae:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	e7f5      	b.n	8003ca2 <FSMC_GetFlagStatus+0x12>
  }  
  else if(FSMC_Bank == FSMC_Bank3_NAND)
  {
    tmpsr = FSMC_Bank3->SR3;
 8003cb6:	2380      	movs	r3, #128	; 0x80
 8003cb8:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	e7f0      	b.n	8003ca2 <FSMC_GetFlagStatus+0x12>

08003cc0 <FSMC_ClearFlag>:
{
 /* Check the parameters */
  assert_param(IS_FSMC_GETFLAG_BANK(FSMC_Bank));
  assert_param(IS_FSMC_CLEAR_FLAG(FSMC_FLAG)) ;
    
  if(FSMC_Bank == FSMC_Bank2_NAND)
 8003cc0:	2810      	cmp	r0, #16
 8003cc2:	d00a      	beq.n	8003cda <FSMC_ClearFlag+0x1a>
  {
    FSMC_Bank2->SR2 &= ~FSMC_FLAG; 
  }  
  else if(FSMC_Bank == FSMC_Bank3_NAND)
 8003cc4:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8003cc8:	d00f      	beq.n	8003cea <FSMC_ClearFlag+0x2a>
    FSMC_Bank3->SR3 &= ~FSMC_FLAG;
  }
  /* FSMC_Bank4_PCCARD*/
  else
  {
    FSMC_Bank4->SR4 &= ~FSMC_FLAG;
 8003cca:	23a0      	movs	r3, #160	; 0xa0
 8003ccc:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8003cd0:	685a      	ldr	r2, [r3, #4]
 8003cd2:	ea22 0101 	bic.w	r1, r2, r1
 8003cd6:	6059      	str	r1, [r3, #4]
 8003cd8:	4770      	bx	lr
  assert_param(IS_FSMC_GETFLAG_BANK(FSMC_Bank));
  assert_param(IS_FSMC_CLEAR_FLAG(FSMC_FLAG)) ;
    
  if(FSMC_Bank == FSMC_Bank2_NAND)
  {
    FSMC_Bank2->SR2 &= ~FSMC_FLAG; 
 8003cda:	2360      	movs	r3, #96	; 0x60
 8003cdc:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8003ce0:	685a      	ldr	r2, [r3, #4]
 8003ce2:	ea22 0101 	bic.w	r1, r2, r1
 8003ce6:	6059      	str	r1, [r3, #4]
 8003ce8:	4770      	bx	lr
  }  
  else if(FSMC_Bank == FSMC_Bank3_NAND)
  {
    FSMC_Bank3->SR3 &= ~FSMC_FLAG;
 8003cea:	2380      	movs	r3, #128	; 0x80
 8003cec:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8003cf0:	685a      	ldr	r2, [r3, #4]
 8003cf2:	ea22 0101 	bic.w	r1, r2, r1
 8003cf6:	6059      	str	r1, [r3, #4]
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop

08003cfc <FSMC_GetITStatus>:
  
  /* Check the parameters */
  assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
  assert_param(IS_FSMC_GET_IT(FSMC_IT));
  
  if(FSMC_Bank == FSMC_Bank2_NAND)
 8003cfc:	2810      	cmp	r0, #16
 8003cfe:	d011      	beq.n	8003d24 <FSMC_GetITStatus+0x28>
  {
    tmpsr = FSMC_Bank2->SR2;
  }  
  else if(FSMC_Bank == FSMC_Bank3_NAND)
 8003d00:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8003d04:	d013      	beq.n	8003d2e <FSMC_GetITStatus+0x32>
    tmpsr = FSMC_Bank3->SR3;
  }
  /* FSMC_Bank4_PCCARD*/
  else
  {
    tmpsr = FSMC_Bank4->SR4;
 8003d06:	23a0      	movs	r3, #160	; 0xa0
 8003d08:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8003d0c:	685b      	ldr	r3, [r3, #4]
  } 
  
  itstatus = tmpsr & FSMC_IT;
  
  itenable = tmpsr & (FSMC_IT >> 3);
  if ((itstatus != (uint32_t)RESET)  && (itenable != (uint32_t)RESET))
 8003d0e:	ea13 02d1 	ands.w	r2, r3, r1, lsr #3
 8003d12:	bf0c      	ite	eq
 8003d14:	2000      	moveq	r0, #0
 8003d16:	2001      	movne	r0, #1
 8003d18:	420b      	tst	r3, r1
  else
  {
    bitstatus = RESET;
  }
  return bitstatus; 
}
 8003d1a:	bf0c      	ite	eq
 8003d1c:	2000      	moveq	r0, #0
 8003d1e:	f000 0001 	andne.w	r0, r0, #1
 8003d22:	4770      	bx	lr
  assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
  assert_param(IS_FSMC_GET_IT(FSMC_IT));
  
  if(FSMC_Bank == FSMC_Bank2_NAND)
  {
    tmpsr = FSMC_Bank2->SR2;
 8003d24:	2360      	movs	r3, #96	; 0x60
 8003d26:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	e7ef      	b.n	8003d0e <FSMC_GetITStatus+0x12>
  }  
  else if(FSMC_Bank == FSMC_Bank3_NAND)
  {
    tmpsr = FSMC_Bank3->SR3;
 8003d2e:	2380      	movs	r3, #128	; 0x80
 8003d30:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	e7ea      	b.n	8003d0e <FSMC_GetITStatus+0x12>

08003d38 <FSMC_ClearITPendingBit>:
{
  /* Check the parameters */
  assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
  assert_param(IS_FSMC_IT(FSMC_IT));
    
  if(FSMC_Bank == FSMC_Bank2_NAND)
 8003d38:	2810      	cmp	r0, #16
 8003d3a:	d00a      	beq.n	8003d52 <FSMC_ClearITPendingBit+0x1a>
  {
    FSMC_Bank2->SR2 &= ~(FSMC_IT >> 3); 
  }  
  else if(FSMC_Bank == FSMC_Bank3_NAND)
 8003d3c:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8003d40:	d00f      	beq.n	8003d62 <FSMC_ClearITPendingBit+0x2a>
    FSMC_Bank3->SR3 &= ~(FSMC_IT >> 3);
  }
  /* FSMC_Bank4_PCCARD*/
  else
  {
    FSMC_Bank4->SR4 &= ~(FSMC_IT >> 3);
 8003d42:	23a0      	movs	r3, #160	; 0xa0
 8003d44:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8003d48:	685a      	ldr	r2, [r3, #4]
 8003d4a:	ea22 01d1 	bic.w	r1, r2, r1, lsr #3
 8003d4e:	6059      	str	r1, [r3, #4]
 8003d50:	4770      	bx	lr
  assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
  assert_param(IS_FSMC_IT(FSMC_IT));
    
  if(FSMC_Bank == FSMC_Bank2_NAND)
  {
    FSMC_Bank2->SR2 &= ~(FSMC_IT >> 3); 
 8003d52:	2360      	movs	r3, #96	; 0x60
 8003d54:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8003d58:	685a      	ldr	r2, [r3, #4]
 8003d5a:	ea22 01d1 	bic.w	r1, r2, r1, lsr #3
 8003d5e:	6059      	str	r1, [r3, #4]
 8003d60:	4770      	bx	lr
  }  
  else if(FSMC_Bank == FSMC_Bank3_NAND)
  {
    FSMC_Bank3->SR3 &= ~(FSMC_IT >> 3);
 8003d62:	2380      	movs	r3, #128	; 0x80
 8003d64:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8003d68:	685a      	ldr	r2, [r3, #4]
 8003d6a:	ea22 01d1 	bic.w	r1, r2, r1, lsr #3
 8003d6e:	6059      	str	r1, [r3, #4]
 8003d70:	4770      	bx	lr
 8003d72:	bf00      	nop

08003d74 <GPIO_DeInit>:
  * @note   By default, The GPIO pins are configured in input floating mode (except JTAG pins).
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 8003d74:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
 8003d76:	2300      	movs	r3, #0
 8003d78:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003d7c:	4298      	cmp	r0, r3
 8003d7e:	d03c      	beq.n	8003dfa <GPIO_DeInit+0x86>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
  }
  else if (GPIOx == GPIOB)
 8003d80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d84:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003d88:	4298      	cmp	r0, r3
 8003d8a:	d040      	beq.n	8003e0e <GPIO_DeInit+0x9a>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
  }
  else if (GPIOx == GPIOC)
 8003d8c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003d90:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003d94:	4298      	cmp	r0, r3
 8003d96:	d044      	beq.n	8003e22 <GPIO_DeInit+0xae>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
  }
  else if (GPIOx == GPIOD)
 8003d98:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003d9c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003da0:	4298      	cmp	r0, r3
 8003da2:	d048      	beq.n	8003e36 <GPIO_DeInit+0xc2>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
  }
  else if (GPIOx == GPIOE)
 8003da4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003da8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003dac:	4298      	cmp	r0, r3
 8003dae:	d04c      	beq.n	8003e4a <GPIO_DeInit+0xd6>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
  }
  else if (GPIOx == GPIOF)
 8003db0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003db4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003db8:	4298      	cmp	r0, r3
 8003dba:	d050      	beq.n	8003e5e <GPIO_DeInit+0xea>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
  }
  else if (GPIOx == GPIOG)
 8003dbc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003dc0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003dc4:	4298      	cmp	r0, r3
 8003dc6:	d054      	beq.n	8003e72 <GPIO_DeInit+0xfe>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
  }
  else if (GPIOx == GPIOH)
 8003dc8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003dcc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003dd0:	4298      	cmp	r0, r3
 8003dd2:	d058      	beq.n	8003e86 <GPIO_DeInit+0x112>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
  }
  else
  {
    if (GPIOx == GPIOI)
 8003dd4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003dd8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003ddc:	4298      	cmp	r0, r3
 8003dde:	d000      	beq.n	8003de2 <GPIO_DeInit+0x6e>
 8003de0:	bd08      	pop	{r3, pc}
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 8003de2:	2101      	movs	r1, #1
 8003de4:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003de8:	f001 f868 	bl	8004ebc <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 8003dec:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003df0:	2100      	movs	r1, #0
    }
  }
}
 8003df2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (GPIOx == GPIOI)
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 8003df6:	f001 b861 	b.w	8004ebc <RCC_AHB1PeriphResetCmd>
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8003dfa:	2001      	movs	r0, #1
 8003dfc:	4601      	mov	r1, r0
 8003dfe:	f001 f85d 	bl	8004ebc <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 8003e02:	2001      	movs	r0, #1
 8003e04:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 8003e06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 8003e0a:	f001 b857 	b.w	8004ebc <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOB)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8003e0e:	2002      	movs	r0, #2
 8003e10:	2101      	movs	r1, #1
 8003e12:	f001 f853 	bl	8004ebc <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 8003e16:	2002      	movs	r0, #2
 8003e18:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 8003e1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
  }
  else if (GPIOx == GPIOB)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 8003e1e:	f001 b84d 	b.w	8004ebc <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOC)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8003e22:	2004      	movs	r0, #4
 8003e24:	2101      	movs	r1, #1
 8003e26:	f001 f849 	bl	8004ebc <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 8003e2a:	2004      	movs	r0, #4
 8003e2c:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 8003e2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
  }
  else if (GPIOx == GPIOC)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 8003e32:	f001 b843 	b.w	8004ebc <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOD)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8003e36:	2008      	movs	r0, #8
 8003e38:	2101      	movs	r1, #1
 8003e3a:	f001 f83f 	bl	8004ebc <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 8003e3e:	2008      	movs	r0, #8
 8003e40:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 8003e42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
  }
  else if (GPIOx == GPIOD)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 8003e46:	f001 b839 	b.w	8004ebc <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOE)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 8003e4a:	2010      	movs	r0, #16
 8003e4c:	2101      	movs	r1, #1
 8003e4e:	f001 f835 	bl	8004ebc <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 8003e52:	2010      	movs	r0, #16
 8003e54:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 8003e56:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
  }
  else if (GPIOx == GPIOE)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 8003e5a:	f001 b82f 	b.w	8004ebc <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOF)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 8003e5e:	2020      	movs	r0, #32
 8003e60:	2101      	movs	r1, #1
 8003e62:	f001 f82b 	bl	8004ebc <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 8003e66:	2020      	movs	r0, #32
 8003e68:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 8003e6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
  }
  else if (GPIOx == GPIOF)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 8003e6e:	f001 b825 	b.w	8004ebc <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOG)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 8003e72:	2040      	movs	r0, #64	; 0x40
 8003e74:	2101      	movs	r1, #1
 8003e76:	f001 f821 	bl	8004ebc <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 8003e7a:	2040      	movs	r0, #64	; 0x40
 8003e7c:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 8003e7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
  }
  else if (GPIOx == GPIOG)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 8003e82:	f001 b81b 	b.w	8004ebc <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOH)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 8003e86:	2080      	movs	r0, #128	; 0x80
 8003e88:	2101      	movs	r1, #1
 8003e8a:	f001 f817 	bl	8004ebc <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 8003e8e:	2080      	movs	r0, #128	; 0x80
 8003e90:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 8003e92:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
  }
  else if (GPIOx == GPIOH)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 8003e96:	f001 b811 	b.w	8004ebc <RCC_AHB1PeriphResetCmd>
 8003e9a:	bf00      	nop

08003e9c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8003ea2:	680a      	ldr	r2, [r1, #0]
 8003ea4:	461c      	mov	r4, r3
  {
    pos = ((uint32_t)0x01) << pinpos;
 8003ea6:	2701      	movs	r7, #1
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8003ea8:	f04f 0803 	mov.w	r8, #3
 8003eac:	e003      	b.n	8003eb6 <GPIO_Init+0x1a>
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8003eae:	3401      	adds	r4, #1
 8003eb0:	3302      	adds	r3, #2
 8003eb2:	2c10      	cmp	r4, #16
 8003eb4:	d02b      	beq.n	8003f0e <GPIO_Init+0x72>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8003eb6:	fa17 f504 	lsls.w	r5, r7, r4
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8003eba:	ea05 0602 	and.w	r6, r5, r2

    if (currentpin == pos)
 8003ebe:	42ae      	cmp	r6, r5
 8003ec0:	d1f5      	bne.n	8003eae <GPIO_Init+0x12>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8003ec2:	f8d0 9000 	ldr.w	r9, [r0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8003ec6:	f891 c004 	ldrb.w	ip, [r1, #4]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8003eca:	fa08 f503 	lsl.w	r5, r8, r3
 8003ece:	43ed      	mvns	r5, r5
 8003ed0:	ea05 0909 	and.w	r9, r5, r9
 8003ed4:	f8c0 9000 	str.w	r9, [r0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8003ed8:	f8d0 9000 	ldr.w	r9, [r0]
 8003edc:	fa0c fa03 	lsl.w	sl, ip, r3

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8003ee0:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8003ee4:	ea4a 0909 	orr.w	r9, sl, r9

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8003ee8:	f1bc 0f01 	cmp.w	ip, #1
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8003eec:	f8c0 9000 	str.w	r9, [r0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8003ef0:	d910      	bls.n	8003f14 <GPIO_Init+0x78>
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8003ef2:	68c6      	ldr	r6, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8003ef4:	f891 c007 	ldrb.w	ip, [r1, #7]
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8003ef8:	4035      	ands	r5, r6
 8003efa:	60c5      	str	r5, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8003efc:	68c6      	ldr	r6, [r0, #12]
 8003efe:	fa0c f503 	lsl.w	r5, ip, r3
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8003f02:	3401      	adds	r4, #1
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8003f04:	4335      	orrs	r5, r6
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8003f06:	3302      	adds	r3, #2
 8003f08:	2c10      	cmp	r4, #16
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8003f0a:	60c5      	str	r5, [r0, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8003f0c:	d1d3      	bne.n	8003eb6 <GPIO_Init+0x1a>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8003f0e:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 8003f12:	4770      	bx	lr
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8003f14:	f8d0 a008 	ldr.w	sl, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8003f18:	f891 9005 	ldrb.w	r9, [r1, #5]
        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8003f1c:	f891 c006 	ldrb.w	ip, [r1, #6]
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8003f20:	ea05 0a0a 	and.w	sl, r5, sl
 8003f24:	f8c0 a008 	str.w	sl, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8003f28:	f8d0 a008 	ldr.w	sl, [r0, #8]
 8003f2c:	fa09 f903 	lsl.w	r9, r9, r3
 8003f30:	ea49 090a 	orr.w	r9, r9, sl
 8003f34:	f8c0 9008 	str.w	r9, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8003f38:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8003f3c:	ea29 0606 	bic.w	r6, r9, r6
 8003f40:	6046      	str	r6, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8003f42:	6846      	ldr	r6, [r0, #4]
 8003f44:	fa0c fc04 	lsl.w	ip, ip, r4
 8003f48:	fa1f fc8c 	uxth.w	ip, ip
 8003f4c:	ea4c 0606 	orr.w	r6, ip, r6
 8003f50:	6046      	str	r6, [r0, #4]
 8003f52:	e7ce      	b.n	8003ef2 <GPIO_Init+0x56>

08003f54 <GPIO_StructInit>:
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8003f54:	2300      	movs	r3, #0
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8003f56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f5a:	6002      	str	r2, [r0, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8003f5c:	7103      	strb	r3, [r0, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8003f5e:	7143      	strb	r3, [r0, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 8003f60:	7183      	strb	r3, [r0, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 8003f62:	71c3      	strb	r3, [r0, #7]
}
 8003f64:	4770      	bx	lr
 8003f66:	bf00      	nop

08003f68 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003f68:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0x00010000;
 8003f6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f6e:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
 8003f70:	9b01      	ldr	r3, [sp, #4]
 8003f72:	430b      	orrs	r3, r1
 8003f74:	9301      	str	r3, [sp, #4]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8003f76:	9b01      	ldr	r3, [sp, #4]
 8003f78:	61c3      	str	r3, [r0, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 8003f7a:	61c1      	str	r1, [r0, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8003f7c:	9b01      	ldr	r3, [sp, #4]
 8003f7e:	61c3      	str	r3, [r0, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8003f80:	69c3      	ldr	r3, [r0, #28]
 8003f82:	9301      	str	r3, [sp, #4]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8003f84:	69c3      	ldr	r3, [r0, #28]
 8003f86:	9301      	str	r3, [sp, #4]
}
 8003f88:	b002      	add	sp, #8
 8003f8a:	4770      	bx	lr

08003f8c <GPIO_ReadInputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8003f8c:	6903      	ldr	r3, [r0, #16]
  {
    bitstatus = (uint8_t)Bit_SET;
 8003f8e:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 8003f90:	bf0c      	ite	eq
 8003f92:	2000      	moveq	r0, #0
 8003f94:	2001      	movne	r0, #1
 8003f96:	4770      	bx	lr

08003f98 <GPIO_ReadInputData>:
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 8003f98:	6900      	ldr	r0, [r0, #16]
}
 8003f9a:	b280      	uxth	r0, r0
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop

08003fa0 <GPIO_ReadOutputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8003fa0:	6943      	ldr	r3, [r0, #20]
  {
    bitstatus = (uint8_t)Bit_SET;
 8003fa2:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 8003fa4:	bf0c      	ite	eq
 8003fa6:	2000      	moveq	r0, #0
 8003fa8:	2001      	movne	r0, #1
 8003faa:	4770      	bx	lr

08003fac <GPIO_ReadOutputData>:
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
 8003fac:	6940      	ldr	r0, [r0, #20]
}
 8003fae:	b280      	uxth	r0, r0
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop

08003fb4 <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8003fb4:	8301      	strh	r1, [r0, #24]
}
 8003fb6:	4770      	bx	lr

08003fb8 <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8003fb8:	8341      	strh	r1, [r0, #26]
}
 8003fba:	4770      	bx	lr

08003fbc <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 8003fbc:	b90a      	cbnz	r2, 8003fc2 <GPIO_WriteBit+0x6>
  {
    GPIOx->BSRRL = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 8003fbe:	8341      	strh	r1, [r0, #26]
 8003fc0:	4770      	bx	lr
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
  {
    GPIOx->BSRRL = GPIO_Pin;
 8003fc2:	8301      	strh	r1, [r0, #24]
 8003fc4:	4770      	bx	lr
 8003fc6:	bf00      	nop

08003fc8 <GPIO_Write>:
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 8003fc8:	6141      	str	r1, [r0, #20]
}
 8003fca:	4770      	bx	lr

08003fcc <GPIO_ToggleBits>:
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 8003fcc:	6943      	ldr	r3, [r0, #20]
 8003fce:	404b      	eors	r3, r1
 8003fd0:	6143      	str	r3, [r0, #20]
}
 8003fd2:	4770      	bx	lr

08003fd4 <GPIO_PinAFConfig>:
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8003fd4:	08cb      	lsrs	r3, r1, #3
 8003fd6:	3308      	adds	r3, #8
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8003fd8:	f001 0107 	and.w	r1, r1, #7
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8003fdc:	b430      	push	{r4, r5}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8003fde:	0089      	lsls	r1, r1, #2
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8003fe0:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
 8003fe4:	240f      	movs	r4, #15
 8003fe6:	408c      	lsls	r4, r1
 8003fe8:	ea25 0404 	bic.w	r4, r5, r4
 8003fec:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8003ff0:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8003ff4:	fa12 f101 	lsls.w	r1, r2, r1
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8003ff8:	430c      	orrs	r4, r1
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8003ffa:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
}
 8003ffe:	bc30      	pop	{r4, r5}
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop

08004004 <HASH_DeInit>:
  * @brief  Deinitializes the HASH peripheral registers to their default reset values
  * @param  None
  * @retval None
  */
void HASH_DeInit(void)
{
 8004004:	b508      	push	{r3, lr}
  /* Enable HASH reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_HASH, ENABLE);
 8004006:	2020      	movs	r0, #32
 8004008:	2101      	movs	r1, #1
 800400a:	f000 ff65 	bl	8004ed8 <RCC_AHB2PeriphResetCmd>
  /* Release HASH from reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_HASH, DISABLE);
 800400e:	2020      	movs	r0, #32
 8004010:	2100      	movs	r1, #0
}
 8004012:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void HASH_DeInit(void)
{
  /* Enable HASH reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_HASH, ENABLE);
  /* Release HASH from reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_HASH, DISABLE);
 8004016:	f000 bf5f 	b.w	8004ed8 <RCC_AHB2PeriphResetCmd>
 800401a:	bf00      	nop

0800401c <HASH_Init>:
  assert_param(IS_HASH_ALGOSELECTION(HASH_InitStruct->HASH_AlgoSelection));
  assert_param(IS_HASH_DATATYPE(HASH_InitStruct->HASH_DataType));
  assert_param(IS_HASH_ALGOMODE(HASH_InitStruct->HASH_AlgoMode));
  
  /* Configure the Algorithm used, algorithm mode and the datatype */
  HASH->CR &= ~ (HASH_CR_ALGO | HASH_CR_DATATYPE | HASH_CR_MODE);
 800401c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004020:	f2c5 0306 	movt	r3, #20486	; 0x5006
  * @note   The field HASH_HMACKeyType in HASH_InitTypeDef must be filled only 
  *          if the algorithm mode is HMAC.       
  * @retval None
  */
void HASH_Init(HASH_InitTypeDef* HASH_InitStruct)
{
 8004024:	b430      	push	{r4, r5}
  assert_param(IS_HASH_ALGOSELECTION(HASH_InitStruct->HASH_AlgoSelection));
  assert_param(IS_HASH_DATATYPE(HASH_InitStruct->HASH_DataType));
  assert_param(IS_HASH_ALGOMODE(HASH_InitStruct->HASH_AlgoMode));
  
  /* Configure the Algorithm used, algorithm mode and the datatype */
  HASH->CR &= ~ (HASH_CR_ALGO | HASH_CR_DATATYPE | HASH_CR_MODE);
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800402c:	601a      	str	r2, [r3, #0]
  HASH->CR |= (HASH_InitStruct->HASH_AlgoSelection | \
               HASH_InitStruct->HASH_DataType | \
               HASH_InitStruct->HASH_AlgoMode);
 800402e:	e890 0016 	ldmia.w	r0, {r1, r2, r4}
  assert_param(IS_HASH_DATATYPE(HASH_InitStruct->HASH_DataType));
  assert_param(IS_HASH_ALGOMODE(HASH_InitStruct->HASH_AlgoMode));
  
  /* Configure the Algorithm used, algorithm mode and the datatype */
  HASH->CR &= ~ (HASH_CR_ALGO | HASH_CR_DATATYPE | HASH_CR_MODE);
  HASH->CR |= (HASH_InitStruct->HASH_AlgoSelection | \
 8004032:	681d      	ldr	r5, [r3, #0]
 8004034:	4329      	orrs	r1, r5
               HASH_InitStruct->HASH_DataType | \
 8004036:	4321      	orrs	r1, r4
  assert_param(IS_HASH_DATATYPE(HASH_InitStruct->HASH_DataType));
  assert_param(IS_HASH_ALGOMODE(HASH_InitStruct->HASH_AlgoMode));
  
  /* Configure the Algorithm used, algorithm mode and the datatype */
  HASH->CR &= ~ (HASH_CR_ALGO | HASH_CR_DATATYPE | HASH_CR_MODE);
  HASH->CR |= (HASH_InitStruct->HASH_AlgoSelection | \
 8004038:	4311      	orrs	r1, r2
               HASH_InitStruct->HASH_DataType | \
               HASH_InitStruct->HASH_AlgoMode);
  
  /* if algorithm mode is HMAC, set the Key */  
  if(HASH_InitStruct->HASH_AlgoMode == HASH_AlgoMode_HMAC) 
 800403a:	2a40      	cmp	r2, #64	; 0x40
  assert_param(IS_HASH_DATATYPE(HASH_InitStruct->HASH_DataType));
  assert_param(IS_HASH_ALGOMODE(HASH_InitStruct->HASH_AlgoMode));
  
  /* Configure the Algorithm used, algorithm mode and the datatype */
  HASH->CR &= ~ (HASH_CR_ALGO | HASH_CR_DATATYPE | HASH_CR_MODE);
  HASH->CR |= (HASH_InitStruct->HASH_AlgoSelection | \
 800403c:	6019      	str	r1, [r3, #0]
               HASH_InitStruct->HASH_DataType | \
               HASH_InitStruct->HASH_AlgoMode);
  
  /* if algorithm mode is HMAC, set the Key */  
  if(HASH_InitStruct->HASH_AlgoMode == HASH_AlgoMode_HMAC) 
 800403e:	d107      	bne.n	8004050 <HASH_Init+0x34>
  {
    assert_param(IS_HASH_HMAC_KEYTYPE(HASH_InitStruct->HASH_HMACKeyType));
    HASH->CR &= ~HASH_CR_LKEY;
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004046:	601a      	str	r2, [r3, #0]
    HASH->CR |= HASH_InitStruct->HASH_HMACKeyType;
 8004048:	6819      	ldr	r1, [r3, #0]
 800404a:	68c2      	ldr	r2, [r0, #12]
 800404c:	430a      	orrs	r2, r1
 800404e:	601a      	str	r2, [r3, #0]
  }

  /* Reset the HASH processor core, so that the HASH will be ready to compute 
     the message digest of a new message */
  HASH->CR |= HASH_CR_INIT;  
 8004050:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004054:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	f042 0204 	orr.w	r2, r2, #4
 800405e:	601a      	str	r2, [r3, #0]
}
 8004060:	bc30      	pop	{r4, r5}
 8004062:	4770      	bx	lr

08004064 <HASH_StructInit>:
  * @retval None
  */
void HASH_StructInit(HASH_InitTypeDef* HASH_InitStruct)
{
  /* Initialize the HASH_AlgoSelection member */
  HASH_InitStruct->HASH_AlgoSelection = HASH_AlgoSelection_SHA1;
 8004064:	2300      	movs	r3, #0
 8004066:	6003      	str	r3, [r0, #0]

  /* Initialize the HASH_AlgoMode member */
  HASH_InitStruct->HASH_AlgoMode = HASH_AlgoMode_HASH;
 8004068:	6043      	str	r3, [r0, #4]

  /* Initialize the HASH_DataType member */
  HASH_InitStruct->HASH_DataType = HASH_DataType_32b;
 800406a:	6083      	str	r3, [r0, #8]

  /* Initialize the HASH_HMACKeyType member */
  HASH_InitStruct->HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
 800406c:	60c3      	str	r3, [r0, #12]
}
 800406e:	4770      	bx	lr

08004070 <HASH_Reset>:
  * @retval None
  */
void HASH_Reset(void)
{
  /* Reset the HASH processor core */
  HASH->CR |= HASH_CR_INIT;
 8004070:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004074:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	f042 0204 	orr.w	r2, r2, #4
 800407e:	601a      	str	r2, [r3, #0]
}
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop

08004084 <HASH_SetLastWordValidBitsNbr>:
{
  /* Check the parameters */
  assert_param(IS_HASH_VALIDBITSNUMBER(ValidNumber));
  
  /* Configure the Number of valid bits in last word of the message */
  HASH->STR &= ~(HASH_STR_NBW);
 8004084:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004088:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800408c:	689a      	ldr	r2, [r3, #8]
 800408e:	f022 021f 	bic.w	r2, r2, #31
 8004092:	609a      	str	r2, [r3, #8]
  HASH->STR |= ValidNumber;
 8004094:	689a      	ldr	r2, [r3, #8]
 8004096:	4302      	orrs	r2, r0
 8004098:	609a      	str	r2, [r3, #8]
}
 800409a:	4770      	bx	lr

0800409c <HASH_DataIn>:
  * @retval None
  */
void HASH_DataIn(uint32_t Data)
{
  /* Write in the DIN register a new data */
  HASH->DIN = Data;
 800409c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80040a0:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80040a4:	6058      	str	r0, [r3, #4]
}
 80040a6:	4770      	bx	lr

080040a8 <HASH_GetInFIFOWordsNbr>:
  * @retval The value of words already pushed into the IN FIFO.
  */
uint8_t HASH_GetInFIFOWordsNbr(void)
{
  /* Return the value of NBW bits */
  return ((HASH->CR & HASH_CR_NBW) >> 8);
 80040a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80040ac:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80040b0:	6818      	ldr	r0, [r3, #0]
}
 80040b2:	f3c0 2003 	ubfx	r0, r0, #8, #4
 80040b6:	4770      	bx	lr

080040b8 <HASH_GetDigest>:
  * @retval None
  */
void HASH_GetDigest(HASH_MsgDigest* HASH_MessageDigest)
{
  /* Get the data field */
  HASH_MessageDigest->Data[0] = HASH->HR[0];
 80040b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80040bc:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80040c0:	68da      	ldr	r2, [r3, #12]
 80040c2:	6002      	str	r2, [r0, #0]
  HASH_MessageDigest->Data[1] = HASH->HR[1];
 80040c4:	691a      	ldr	r2, [r3, #16]
 80040c6:	6042      	str	r2, [r0, #4]
  HASH_MessageDigest->Data[2] = HASH->HR[2];
 80040c8:	695a      	ldr	r2, [r3, #20]
 80040ca:	6082      	str	r2, [r0, #8]
  HASH_MessageDigest->Data[3] = HASH->HR[3];
 80040cc:	699a      	ldr	r2, [r3, #24]
 80040ce:	60c2      	str	r2, [r0, #12]
  HASH_MessageDigest->Data[4] = HASH->HR[4];
 80040d0:	69db      	ldr	r3, [r3, #28]
 80040d2:	6103      	str	r3, [r0, #16]
}
 80040d4:	4770      	bx	lr
 80040d6:	bf00      	nop

080040d8 <HASH_StartDigest>:
  * @retval None
  */
void HASH_StartDigest(void)
{
  /* Start the Digest calculation */
  HASH->STR |= HASH_STR_DCAL;
 80040d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80040dc:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80040e0:	689a      	ldr	r2, [r3, #8]
 80040e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040e6:	609a      	str	r2, [r3, #8]
}
 80040e8:	4770      	bx	lr
 80040ea:	bf00      	nop

080040ec <HASH_SaveContext>:
void HASH_SaveContext(HASH_Context* HASH_ContextSave)
{
  uint8_t i = 0;
  
  /* save context registers */
  HASH_ContextSave->HASH_IMR = HASH->IMR;  
 80040ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80040f0:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80040f4:	6a1a      	ldr	r2, [r3, #32]
 80040f6:	6002      	str	r2, [r0, #0]
  HASH_ContextSave->HASH_STR = HASH->STR;      
 80040f8:	689a      	ldr	r2, [r3, #8]
 80040fa:	6042      	str	r2, [r0, #4]
  HASH_ContextSave->HASH_CR  = HASH->CR;     
 80040fc:	6819      	ldr	r1, [r3, #0]
 80040fe:	f840 1f08 	str.w	r1, [r0, #8]!
  *         full and no processing is ongoing).   
  * @param  HASH_ContextSave: pointer to a HASH_Context structure that contains
  *         the repository for current context.
  * @retval None
  */
void HASH_SaveContext(HASH_Context* HASH_ContextSave)
 8004102:	2200      	movs	r2, #0
  HASH_ContextSave->HASH_IMR = HASH->IMR;  
  HASH_ContextSave->HASH_STR = HASH->STR;      
  HASH_ContextSave->HASH_CR  = HASH->CR;     
  for(i=0; i<=50;i++)
  {
     HASH_ContextSave->HASH_CSR[i] = HASH->CSR[i];
 8004104:	f102 013e 	add.w	r1, r2, #62	; 0x3e
 8004108:	3201      	adds	r2, #1
 800410a:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
  
  /* save context registers */
  HASH_ContextSave->HASH_IMR = HASH->IMR;  
  HASH_ContextSave->HASH_STR = HASH->STR;      
  HASH_ContextSave->HASH_CR  = HASH->CR;     
  for(i=0; i<=50;i++)
 800410e:	2a33      	cmp	r2, #51	; 0x33
  {
     HASH_ContextSave->HASH_CSR[i] = HASH->CSR[i];
 8004110:	f840 1f04 	str.w	r1, [r0, #4]!
  
  /* save context registers */
  HASH_ContextSave->HASH_IMR = HASH->IMR;  
  HASH_ContextSave->HASH_STR = HASH->STR;      
  HASH_ContextSave->HASH_CR  = HASH->CR;     
  for(i=0; i<=50;i++)
 8004114:	d1f6      	bne.n	8004104 <HASH_SaveContext+0x18>
  {
     HASH_ContextSave->HASH_CSR[i] = HASH->CSR[i];
  }   
}
 8004116:	4770      	bx	lr

08004118 <HASH_RestoreContext>:
  * @param  HASH_ContextRestore: pointer to a HASH_Context structure that contains
  *         the repository for saved context.
  * @retval None
  */
void HASH_RestoreContext(HASH_Context* HASH_ContextRestore)  
{
 8004118:	b410      	push	{r4}
  uint8_t i = 0;
  
  /* restore context registers */
  HASH->IMR = HASH_ContextRestore->HASH_IMR;   
 800411a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800411e:	6803      	ldr	r3, [r0, #0]
 8004120:	f2c5 0406 	movt	r4, #20486	; 0x5006
 8004124:	6223      	str	r3, [r4, #32]
  HASH->STR = HASH_ContextRestore->HASH_STR;     
 8004126:	6843      	ldr	r3, [r0, #4]
 8004128:	60a3      	str	r3, [r4, #8]
  HASH->CR = HASH_ContextRestore->HASH_CR;
 800412a:	f850 3f08 	ldr.w	r3, [r0, #8]!
 800412e:	6023      	str	r3, [r4, #0]
  
  /* Initialize the hash processor */
  HASH->CR |= HASH_CR_INIT; 
 8004130:	6823      	ldr	r3, [r4, #0]
 8004132:	f043 0304 	orr.w	r3, r3, #4
 8004136:	6023      	str	r3, [r4, #0]
  *         point where it has been interrupted.  
  * @param  HASH_ContextRestore: pointer to a HASH_Context structure that contains
  *         the repository for saved context.
  * @retval None
  */
void HASH_RestoreContext(HASH_Context* HASH_ContextRestore)  
 8004138:	2300      	movs	r3, #0
  HASH->CR |= HASH_CR_INIT; 
  
   /* continue restoring context registers */     
  for(i=0; i<=50;i++)
  {
     HASH->CSR[i] = HASH_ContextRestore->HASH_CSR[i];
 800413a:	f103 023e 	add.w	r2, r3, #62	; 0x3e
 800413e:	f850 1f04 	ldr.w	r1, [r0, #4]!
 8004142:	3301      	adds	r3, #1
  
  /* Initialize the hash processor */
  HASH->CR |= HASH_CR_INIT; 
  
   /* continue restoring context registers */     
  for(i=0; i<=50;i++)
 8004144:	2b33      	cmp	r3, #51	; 0x33
  {
     HASH->CSR[i] = HASH_ContextRestore->HASH_CSR[i];
 8004146:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
  
  /* Initialize the hash processor */
  HASH->CR |= HASH_CR_INIT; 
  
   /* continue restoring context registers */     
  for(i=0; i<=50;i++)
 800414a:	d1f6      	bne.n	800413a <HASH_RestoreContext+0x22>
  {
     HASH->CSR[i] = HASH_ContextRestore->HASH_CSR[i];
  }   
}
 800414c:	bc10      	pop	{r4}
 800414e:	4770      	bx	lr

08004150 <HASH_DMACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the HASH DMA request */
    HASH->CR |= HASH_CR_DMAE;
 8004150:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004154:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8004158:	681a      	ldr	r2, [r3, #0]
void HASH_DMACmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800415a:	b918      	cbnz	r0, 8004164 <HASH_DMACmd+0x14>
    HASH->CR |= HASH_CR_DMAE;
  }
  else
  {
    /* Disable the HASH DMA request */
    HASH->CR &= ~HASH_CR_DMAE;
 800415c:	f022 0208 	bic.w	r2, r2, #8
 8004160:	601a      	str	r2, [r3, #0]
 8004162:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the HASH DMA request */
    HASH->CR |= HASH_CR_DMAE;
 8004164:	f042 0208 	orr.w	r2, r2, #8
 8004168:	601a      	str	r2, [r3, #0]
 800416a:	4770      	bx	lr

0800416c <HASH_ITConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected HASH interrupt */
    HASH->IMR |= HASH_IT;
 800416c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004170:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8004174:	6a1a      	ldr	r2, [r3, #32]
{
  /* Check the parameters */
  assert_param(IS_HASH_IT(HASH_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004176:	b929      	cbnz	r1, 8004184 <HASH_ITConfig+0x18>
    HASH->IMR |= HASH_IT;
  }
  else
  {
    /* Disable the selected HASH interrupt */
    HASH->IMR &= (uint8_t) ~HASH_IT;
 8004178:	ea22 0000 	bic.w	r0, r2, r0
 800417c:	f000 00ff 	and.w	r0, r0, #255	; 0xff
 8004180:	6218      	str	r0, [r3, #32]
 8004182:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected HASH interrupt */
    HASH->IMR |= HASH_IT;
 8004184:	4310      	orrs	r0, r2
 8004186:	6218      	str	r0, [r3, #32]
 8004188:	4770      	bx	lr
 800418a:	bf00      	nop

0800418c <HASH_GetFlagStatus>:
  assert_param(IS_HASH_GET_FLAG(HASH_FLAG));

  /* check if the FLAG is in CR register */
  if ((HASH_FLAG & HASH_FLAG_DINNE) != (uint16_t)RESET ) 
  {
    tempreg = HASH->CR;
 800418c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004190:	f2c5 0306 	movt	r3, #20486	; 0x5006

  /* Check the parameters */
  assert_param(IS_HASH_GET_FLAG(HASH_FLAG));

  /* check if the FLAG is in CR register */
  if ((HASH_FLAG & HASH_FLAG_DINNE) != (uint16_t)RESET ) 
 8004194:	04c2      	lsls	r2, r0, #19
  {
    tempreg = HASH->CR;
 8004196:	bf4c      	ite	mi
 8004198:	681b      	ldrmi	r3, [r3, #0]
  }
  else /* The FLAG is in SR register */
  {
    tempreg = HASH->SR;
 800419a:	6a5b      	ldrpl	r3, [r3, #36]	; 0x24

  /* Check the status of the specified HASH flag */
  if ((tempreg & HASH_FLAG) != (uint16_t)RESET)
  {
    /* HASH is set */
    bitstatus = SET;
 800419c:	4203      	tst	r3, r0
    bitstatus = RESET;
  }

  /* Return the HASH_FLAG status */
  return  bitstatus;
}
 800419e:	bf0c      	ite	eq
 80041a0:	2000      	moveq	r0, #0
 80041a2:	2001      	movne	r0, #1
 80041a4:	4770      	bx	lr
 80041a6:	bf00      	nop

080041a8 <HASH_ClearFlag>:
{
  /* Check the parameters */
  assert_param(IS_HASH_CLEAR_FLAG(HASH_FLAG));
  
  /* Clear the selected HASH flags */
  HASH->SR = ~(uint32_t)HASH_FLAG;
 80041a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041ac:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80041b0:	43c0      	mvns	r0, r0
 80041b2:	6258      	str	r0, [r3, #36]	; 0x24
}
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop

080041b8 <HASH_GetITStatus>:
  /* Check the parameters */
  assert_param(IS_HASH_GET_IT(HASH_IT));  


  /* Check the status of the specified HASH interrupt */
  tmpreg =  HASH->SR;
 80041b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041bc:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80041c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24

  if (((HASH->IMR & tmpreg) & HASH_IT) != RESET)
 80041c2:	6a1b      	ldr	r3, [r3, #32]
 80041c4:	4013      	ands	r3, r2
  {
    /* HASH_IT is set */
    bitstatus = SET;
 80041c6:	4203      	tst	r3, r0
    /* HASH_IT is reset */
    bitstatus = RESET;
  }
  /* Return the HASH_IT status */
  return bitstatus;
}
 80041c8:	bf0c      	ite	eq
 80041ca:	2000      	moveq	r0, #0
 80041cc:	2001      	movne	r0, #1
 80041ce:	4770      	bx	lr

080041d0 <HASH_ClearITPendingBit>:
{
  /* Check the parameters */
  assert_param(IS_HASH_IT(HASH_IT));

  /* Clear the selected HASH interrupt pending bit */
  HASH->SR = (uint8_t)~HASH_IT;
 80041d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041d4:	43c0      	mvns	r0, r0
 80041d6:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80041da:	b2c0      	uxtb	r0, r0
 80041dc:	6258      	str	r0, [r3, #36]	; 0x24
}
 80041de:	4770      	bx	lr

080041e0 <HASH_MD5>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HASH_MD5(uint8_t *Input, uint32_t Ilen, uint8_t Output[16])
{
 80041e0:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t inputaddr  = (uint32_t)Input;
  uint32_t outputaddr = (uint32_t)Output;


  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 80041e2:	f001 0303 	and.w	r3, r1, #3
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HASH_MD5(uint8_t *Input, uint32_t Ilen, uint8_t Output[16])
{
 80041e6:	b08d      	sub	sp, #52	; 0x34
  HASH_InitTypeDef MD5_HASH_InitStructure;
  HASH_MsgDigest MD5_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
 80041e8:	2600      	movs	r6, #0
  uint32_t inputaddr  = (uint32_t)Input;
  uint32_t outputaddr = (uint32_t)Output;


  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 80041ea:	00db      	lsls	r3, r3, #3
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HASH_MD5(uint8_t *Input, uint32_t Ilen, uint8_t Output[16])
{
 80041ec:	460c      	mov	r4, r1
  HASH_InitTypeDef MD5_HASH_InitStructure;
  HASH_MsgDigest MD5_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
 80041ee:	f8ad 602e 	strh.w	r6, [sp, #46]	; 0x2e
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HASH_MD5(uint8_t *Input, uint32_t Ilen, uint8_t Output[16])
{
 80041f2:	4605      	mov	r5, r0
 80041f4:	4617      	mov	r7, r2
  HASH_InitTypeDef MD5_HASH_InitStructure;
  HASH_MsgDigest MD5_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
  uint32_t i = 0;
  __IO uint32_t counter = 0;
 80041f6:	960a      	str	r6, [sp, #40]	; 0x28
  uint32_t inputaddr  = (uint32_t)Input;
  uint32_t outputaddr = (uint32_t)Output;


  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 80041f8:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e

  /* HASH peripheral initialization */
  HASH_DeInit();
 80041fc:	f7ff ff02 	bl	8004004 <HASH_DeInit>

  /* HASH Configuration */
  MD5_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_MD5;
 8004200:	2380      	movs	r3, #128	; 0x80
  MD5_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HASH;
  MD5_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
  HASH_Init(&MD5_HASH_InitStructure);
 8004202:	a806      	add	r0, sp, #24

  /* HASH peripheral initialization */
  HASH_DeInit();

  /* HASH Configuration */
  MD5_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_MD5;
 8004204:	9306      	str	r3, [sp, #24]
  MD5_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HASH;
  MD5_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 8004206:	2320      	movs	r3, #32
  /* HASH peripheral initialization */
  HASH_DeInit();

  /* HASH Configuration */
  MD5_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_MD5;
  MD5_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HASH;
 8004208:	9607      	str	r6, [sp, #28]
  MD5_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 800420a:	9308      	str	r3, [sp, #32]
  HASH_Init(&MD5_HASH_InitStructure);
 800420c:	f7ff ff06 	bl	800401c <HASH_Init>

  /* Configure the number of valid bits in last word of the data */
  HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
 8004210:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 8004214:	b280      	uxth	r0, r0
 8004216:	f7ff ff35 	bl	8004084 <HASH_SetLastWordValidBitsNbr>

  /* Write the Input block in the IN FIFO */
  for(i=0; i<Ilen; i+=4)
 800421a:	b12c      	cbz	r4, 8004228 <HASH_MD5+0x48>
  {
    HASH_DataIn(*(uint32_t*)inputaddr);
 800421c:	59a8      	ldr	r0, [r5, r6]

  /* Configure the number of valid bits in last word of the data */
  HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);

  /* Write the Input block in the IN FIFO */
  for(i=0; i<Ilen; i+=4)
 800421e:	3604      	adds	r6, #4
  {
    HASH_DataIn(*(uint32_t*)inputaddr);
 8004220:	f7ff ff3c 	bl	800409c <HASH_DataIn>

  /* Configure the number of valid bits in last word of the data */
  HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);

  /* Write the Input block in the IN FIFO */
  for(i=0; i<Ilen; i+=4)
 8004224:	42b4      	cmp	r4, r6
 8004226:	d8f9      	bhi.n	800421c <HASH_MD5+0x3c>
    HASH_DataIn(*(uint32_t*)inputaddr);
    inputaddr+=4;
  }

  /* Start the HASH processor */
  HASH_StartDigest();
 8004228:	f7ff ff56 	bl	80040d8 <HASH_StartDigest>
 800422c:	e000      	b.n	8004230 <HASH_MD5+0x50>
  /* wait until the Busy flag is RESET */
  do
  {
    busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
    counter++;
  }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 800422e:	b168      	cbz	r0, 800424c <HASH_MD5+0x6c>
  HASH_StartDigest();

  /* wait until the Busy flag is RESET */
  do
  {
    busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 8004230:	2008      	movs	r0, #8
 8004232:	f7ff ffab 	bl	800418c <HASH_GetFlagStatus>
    counter++;
 8004236:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004238:	3301      	adds	r3, #1
 800423a:	930a      	str	r3, [sp, #40]	; 0x28
  }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 800423c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800423e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004242:	d1f4      	bne.n	800422e <HASH_MD5+0x4e>

  if (busystatus != RESET)
 8004244:	b110      	cbz	r0, 800424c <HASH_MD5+0x6c>
  {
     status = ERROR;
 8004246:	2000      	movs	r0, #0
    *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[2]);
    outputaddr+=4;
    *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[3]);
  }
  return status; 
}
 8004248:	b00d      	add	sp, #52	; 0x34
 800424a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     status = ERROR;
  }
  else
  {
    /* Read the message digest */
    HASH_GetDigest(&MD5_MessageDigest);
 800424c:	a801      	add	r0, sp, #4
 800424e:	f7ff ff33 	bl	80040b8 <HASH_GetDigest>
 8004252:	9b01      	ldr	r3, [sp, #4]
 8004254:	ba1b      	rev	r3, r3
    *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[0]);
 8004256:	603b      	str	r3, [r7, #0]
 8004258:	9b02      	ldr	r3, [sp, #8]
 800425a:	ba1b      	rev	r3, r3
    outputaddr+=4;
    *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[1]);
 800425c:	607b      	str	r3, [r7, #4]
 800425e:	9b03      	ldr	r3, [sp, #12]
 8004260:	ba1b      	rev	r3, r3
    outputaddr+=4;
    *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[2]);
 8004262:	60bb      	str	r3, [r7, #8]
 8004264:	9b04      	ldr	r3, [sp, #16]
 8004266:	ba1b      	rev	r3, r3
  HASH_MsgDigest MD5_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
  uint32_t i = 0;
  __IO uint32_t counter = 0;
  uint32_t busystatus = 0;
  ErrorStatus status = SUCCESS;
 8004268:	2001      	movs	r0, #1
    outputaddr+=4;
    *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[1]);
    outputaddr+=4;
    *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[2]);
    outputaddr+=4;
    *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[3]);
 800426a:	60fb      	str	r3, [r7, #12]
 800426c:	e7ec      	b.n	8004248 <HASH_MD5+0x68>
 800426e:	bf00      	nop

08004270 <HMAC_MD5>:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HMAC_MD5(uint8_t *Key, uint32_t Keylen, uint8_t *Input, 
                     uint32_t Ilen, uint8_t Output[16])
{
 8004270:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004274:	460c      	mov	r4, r1
 8004276:	b08d      	sub	sp, #52	; 0x34
  uint32_t keyaddr    = (uint32_t)Key;
  uint32_t inputaddr  = (uint32_t)Input;
  uint32_t outputaddr = (uint32_t)Output;

  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 8004278:	f003 0103 	and.w	r1, r3, #3
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HMAC_MD5(uint8_t *Key, uint32_t Keylen, uint8_t *Input, 
                     uint32_t Ilen, uint8_t Output[16])
{
 800427c:	461e      	mov	r6, r3

  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);

  /* Number of valid bits in last word of the Key */
  nbvalidbitskey = 8 * (Keylen % 4);
 800427e:	f004 0303 	and.w	r3, r4, #3
ErrorStatus HMAC_MD5(uint8_t *Key, uint32_t Keylen, uint8_t *Input, 
                     uint32_t Ilen, uint8_t Output[16])
{
  HASH_InitTypeDef MD5_HASH_InitStructure;
  HASH_MsgDigest MD5_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
 8004282:	2700      	movs	r7, #0

  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);

  /* Number of valid bits in last word of the Key */
  nbvalidbitskey = 8 * (Keylen % 4);
 8004284:	00db      	lsls	r3, r3, #3
  uint32_t keyaddr    = (uint32_t)Key;
  uint32_t inputaddr  = (uint32_t)Input;
  uint32_t outputaddr = (uint32_t)Output;

  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 8004286:	00c9      	lsls	r1, r1, #3
ErrorStatus HMAC_MD5(uint8_t *Key, uint32_t Keylen, uint8_t *Input, 
                     uint32_t Ilen, uint8_t Output[16])
{
  HASH_InitTypeDef MD5_HASH_InitStructure;
  HASH_MsgDigest MD5_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
 8004288:	f8ad 702c 	strh.w	r7, [sp, #44]	; 0x2c
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HMAC_MD5(uint8_t *Key, uint32_t Keylen, uint8_t *Input, 
                     uint32_t Ilen, uint8_t Output[16])
{
 800428c:	4605      	mov	r5, r0
  HASH_InitTypeDef MD5_HASH_InitStructure;
  HASH_MsgDigest MD5_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
  __IO uint16_t nbvalidbitskey = 0;
 800428e:	f8ad 702e 	strh.w	r7, [sp, #46]	; 0x2e
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HMAC_MD5(uint8_t *Key, uint32_t Keylen, uint8_t *Input, 
                     uint32_t Ilen, uint8_t Output[16])
{
 8004292:	4690      	mov	r8, r2
  HASH_InitTypeDef MD5_HASH_InitStructure;
  HASH_MsgDigest MD5_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
  __IO uint16_t nbvalidbitskey = 0;
  uint32_t i = 0;
  __IO uint32_t counter = 0;
 8004294:	970a      	str	r7, [sp, #40]	; 0x28
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HMAC_MD5(uint8_t *Key, uint32_t Keylen, uint8_t *Input, 
                     uint32_t Ilen, uint8_t Output[16])
{
 8004296:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
  uint32_t keyaddr    = (uint32_t)Key;
  uint32_t inputaddr  = (uint32_t)Input;
  uint32_t outputaddr = (uint32_t)Output;

  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 800429a:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c

  /* Number of valid bits in last word of the Key */
  nbvalidbitskey = 8 * (Keylen % 4);
 800429e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   
  /* HASH peripheral initialization */
  HASH_DeInit();
 80042a2:	f7ff feaf 	bl	8004004 <HASH_DeInit>

  /* HASH Configuration */
  MD5_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_MD5;
 80042a6:	2380      	movs	r3, #128	; 0x80
 80042a8:	9306      	str	r3, [sp, #24]
  MD5_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HMAC;
 80042aa:	2340      	movs	r3, #64	; 0x40
 80042ac:	9307      	str	r3, [sp, #28]
  MD5_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 80042ae:	2320      	movs	r3, #32
  if(Keylen > 64)
 80042b0:	2c40      	cmp	r4, #64	; 0x40
  HASH_DeInit();

  /* HASH Configuration */
  MD5_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_MD5;
  MD5_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HMAC;
  MD5_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 80042b2:	9308      	str	r3, [sp, #32]
  else
  {
    /* HMAC short Key */
    MD5_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
  }
  HASH_Init(&MD5_HASH_InitStructure);
 80042b4:	a806      	add	r0, sp, #24

  /* HASH Configuration */
  MD5_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_MD5;
  MD5_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HMAC;
  MD5_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
  if(Keylen > 64)
 80042b6:	d923      	bls.n	8004300 <HMAC_MD5+0x90>
  {
    /* HMAC long Key */
    MD5_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_LongKey;
 80042b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80042bc:	9309      	str	r3, [sp, #36]	; 0x24
  else
  {
    /* HMAC short Key */
    MD5_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
  }
  HASH_Init(&MD5_HASH_InitStructure);
 80042be:	f7ff fead 	bl	800401c <HASH_Init>

  /* Configure the number of valid bits in last word of the Key */
  HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 80042c2:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 80042c6:	b280      	uxth	r0, r0
 80042c8:	f7ff fedc 	bl	8004084 <HASH_SetLastWordValidBitsNbr>
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HMAC_MD5(uint8_t *Key, uint32_t Keylen, uint8_t *Input, 
                     uint32_t Ilen, uint8_t Output[16])
{
 80042cc:	2700      	movs	r7, #0
  HASH_SetLastWordValidBitsNbr(nbvalidbitskey);

  /* Write the Key */
  for(i=0; i<Keylen; i+=4)
  {
    HASH_DataIn(*(uint32_t*)keyaddr);
 80042ce:	59e8      	ldr	r0, [r5, r7]

  /* Configure the number of valid bits in last word of the Key */
  HASH_SetLastWordValidBitsNbr(nbvalidbitskey);

  /* Write the Key */
  for(i=0; i<Keylen; i+=4)
 80042d0:	3704      	adds	r7, #4
  {
    HASH_DataIn(*(uint32_t*)keyaddr);
 80042d2:	f7ff fee3 	bl	800409c <HASH_DataIn>

  /* Configure the number of valid bits in last word of the Key */
  HASH_SetLastWordValidBitsNbr(nbvalidbitskey);

  /* Write the Key */
  for(i=0; i<Keylen; i+=4)
 80042d6:	42bc      	cmp	r4, r7
 80042d8:	d8f9      	bhi.n	80042ce <HMAC_MD5+0x5e>
    HASH_DataIn(*(uint32_t*)keyaddr);
    keyaddr+=4;
  }
  
  /* Start the HASH processor */
  HASH_StartDigest();
 80042da:	f7ff fefd 	bl	80040d8 <HASH_StartDigest>
 80042de:	e000      	b.n	80042e2 <HMAC_MD5+0x72>
  /* wait until the Busy flag is RESET */
  do
  {
    busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
    counter++;
  }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 80042e0:	b1c8      	cbz	r0, 8004316 <HMAC_MD5+0xa6>
  HASH_StartDigest();

  /* wait until the Busy flag is RESET */
  do
  {
    busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 80042e2:	2008      	movs	r0, #8
 80042e4:	f7ff ff52 	bl	800418c <HASH_GetFlagStatus>
    counter++;
 80042e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80042ea:	3301      	adds	r3, #1
 80042ec:	930a      	str	r3, [sp, #40]	; 0x28
  }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 80042ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80042f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042f4:	d1f4      	bne.n	80042e0 <HMAC_MD5+0x70>

  if (busystatus != RESET)
 80042f6:	b170      	cbz	r0, 8004316 <HMAC_MD5+0xa6>
          counter++;
      }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));

      if (busystatus != RESET)
      {
         status = ERROR;
 80042f8:	2000      	movs	r0, #0
         *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[3]);
      }
    }
  }
  return status;  
}
 80042fa:	b00d      	add	sp, #52	; 0x34
 80042fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    MD5_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_LongKey;
  }
  else
  {
    /* HMAC short Key */
    MD5_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
 8004300:	9709      	str	r7, [sp, #36]	; 0x24
  }
  HASH_Init(&MD5_HASH_InitStructure);
 8004302:	f7ff fe8b 	bl	800401c <HASH_Init>

  /* Configure the number of valid bits in last word of the Key */
  HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 8004306:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 800430a:	b280      	uxth	r0, r0
 800430c:	f7ff feba 	bl	8004084 <HASH_SetLastWordValidBitsNbr>

  /* Write the Key */
  for(i=0; i<Keylen; i+=4)
 8004310:	2c00      	cmp	r4, #0
 8004312:	d1db      	bne.n	80042cc <HMAC_MD5+0x5c>
 8004314:	e7e1      	b.n	80042da <HMAC_MD5+0x6a>
     status = ERROR;
  }
  else
  {
    /* Configure the number of valid bits in last word of the Input data */
    HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
 8004316:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
 800431a:	b280      	uxth	r0, r0
 800431c:	f7ff feb2 	bl	8004084 <HASH_SetLastWordValidBitsNbr>

    /* Write the Input block in the IN FIFO */
    for(i=0; i<Ilen; i+=4)
 8004320:	b13e      	cbz	r6, 8004332 <HMAC_MD5+0xc2>
 8004322:	2700      	movs	r7, #0
    {
      HASH_DataIn(*(uint32_t*)inputaddr);
 8004324:	f858 0007 	ldr.w	r0, [r8, r7]
  {
    /* Configure the number of valid bits in last word of the Input data */
    HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);

    /* Write the Input block in the IN FIFO */
    for(i=0; i<Ilen; i+=4)
 8004328:	3704      	adds	r7, #4
    {
      HASH_DataIn(*(uint32_t*)inputaddr);
 800432a:	f7ff feb7 	bl	800409c <HASH_DataIn>
  {
    /* Configure the number of valid bits in last word of the Input data */
    HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);

    /* Write the Input block in the IN FIFO */
    for(i=0; i<Ilen; i+=4)
 800432e:	42be      	cmp	r6, r7
 8004330:	d8f8      	bhi.n	8004324 <HMAC_MD5+0xb4>
      HASH_DataIn(*(uint32_t*)inputaddr);
      inputaddr+=4;
    }

    /* Start the HASH processor */
    HASH_StartDigest();
 8004332:	f7ff fed1 	bl	80040d8 <HASH_StartDigest>

    /* wait until the Busy flag is RESET */
    counter =0;
 8004336:	2300      	movs	r3, #0
 8004338:	930a      	str	r3, [sp, #40]	; 0x28
 800433a:	e000      	b.n	800433e <HMAC_MD5+0xce>
    do
    {
       busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
       counter++;
    }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 800433c:	b158      	cbz	r0, 8004356 <HMAC_MD5+0xe6>

    /* wait until the Busy flag is RESET */
    counter =0;
    do
    {
       busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 800433e:	2008      	movs	r0, #8
 8004340:	f7ff ff24 	bl	800418c <HASH_GetFlagStatus>
       counter++;
 8004344:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004346:	3301      	adds	r3, #1
 8004348:	930a      	str	r3, [sp, #40]	; 0x28
    }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 800434a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800434c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004350:	d1f4      	bne.n	800433c <HMAC_MD5+0xcc>

    if (busystatus != RESET)
 8004352:	2800      	cmp	r0, #0
 8004354:	d1d0      	bne.n	80042f8 <HMAC_MD5+0x88>
      status = ERROR;
    }
    else
    {  
      /* Configure the number of valid bits in last word of the Key */
      HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 8004356:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 800435a:	b280      	uxth	r0, r0
 800435c:	f7ff fe92 	bl	8004084 <HASH_SetLastWordValidBitsNbr>

      /* Write the Key */
      keyaddr = (uint32_t)Key;
      for(i=0; i<Keylen; i+=4)
 8004360:	b134      	cbz	r4, 8004370 <HMAC_MD5+0x100>
 8004362:	2600      	movs	r6, #0
      {
        HASH_DataIn(*(uint32_t*)keyaddr);
 8004364:	59a8      	ldr	r0, [r5, r6]
      /* Configure the number of valid bits in last word of the Key */
      HASH_SetLastWordValidBitsNbr(nbvalidbitskey);

      /* Write the Key */
      keyaddr = (uint32_t)Key;
      for(i=0; i<Keylen; i+=4)
 8004366:	3604      	adds	r6, #4
      {
        HASH_DataIn(*(uint32_t*)keyaddr);
 8004368:	f7ff fe98 	bl	800409c <HASH_DataIn>
      /* Configure the number of valid bits in last word of the Key */
      HASH_SetLastWordValidBitsNbr(nbvalidbitskey);

      /* Write the Key */
      keyaddr = (uint32_t)Key;
      for(i=0; i<Keylen; i+=4)
 800436c:	42b4      	cmp	r4, r6
 800436e:	d8f9      	bhi.n	8004364 <HMAC_MD5+0xf4>
        HASH_DataIn(*(uint32_t*)keyaddr);
        keyaddr+=4;
      }
  
       /* Start the HASH processor */
       HASH_StartDigest();
 8004370:	f7ff feb2 	bl	80040d8 <HASH_StartDigest>

       /* wait until the Busy flag is RESET */
       counter =0;
 8004374:	2300      	movs	r3, #0
 8004376:	930a      	str	r3, [sp, #40]	; 0x28
 8004378:	e000      	b.n	800437c <HMAC_MD5+0x10c>
       do
       {
          busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
          counter++;
      }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 800437a:	b158      	cbz	r0, 8004394 <HMAC_MD5+0x124>

       /* wait until the Busy flag is RESET */
       counter =0;
       do
       {
          busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 800437c:	2008      	movs	r0, #8
 800437e:	f7ff ff05 	bl	800418c <HASH_GetFlagStatus>
          counter++;
 8004382:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004384:	3301      	adds	r3, #1
 8004386:	930a      	str	r3, [sp, #40]	; 0x28
      }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 8004388:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800438a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800438e:	d1f4      	bne.n	800437a <HMAC_MD5+0x10a>

      if (busystatus != RESET)
 8004390:	2800      	cmp	r0, #0
 8004392:	d1b1      	bne.n	80042f8 <HMAC_MD5+0x88>
         status = ERROR;
      }
      else
      {
         /* Read the message digest */
         HASH_GetDigest(&MD5_MessageDigest);
 8004394:	a801      	add	r0, sp, #4
 8004396:	f7ff fe8f 	bl	80040b8 <HASH_GetDigest>
 800439a:	9b01      	ldr	r3, [sp, #4]
 800439c:	ba1b      	rev	r3, r3
         *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[0]);
 800439e:	f8c9 3000 	str.w	r3, [r9]
 80043a2:	9b02      	ldr	r3, [sp, #8]
 80043a4:	ba1b      	rev	r3, r3
         outputaddr+=4;
         *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[1]);
 80043a6:	f8c9 3004 	str.w	r3, [r9, #4]
 80043aa:	9b03      	ldr	r3, [sp, #12]
 80043ac:	ba1b      	rev	r3, r3
         outputaddr+=4;
         *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[2]);
 80043ae:	f8c9 3008 	str.w	r3, [r9, #8]
 80043b2:	9b04      	ldr	r3, [sp, #16]
 80043b4:	ba1b      	rev	r3, r3
  __IO uint16_t nbvalidbitsdata = 0;
  __IO uint16_t nbvalidbitskey = 0;
  uint32_t i = 0;
  __IO uint32_t counter = 0;
  uint32_t busystatus = 0;
  ErrorStatus status = SUCCESS;
 80043b6:	2001      	movs	r0, #1
         outputaddr+=4;
         *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[1]);
         outputaddr+=4;
         *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[2]);
         outputaddr+=4;
         *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[3]);
 80043b8:	f8c9 300c 	str.w	r3, [r9, #12]
 80043bc:	e79d      	b.n	80042fa <HMAC_MD5+0x8a>
 80043be:	bf00      	nop

080043c0 <HASH_SHA1>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HASH_SHA1(uint8_t *Input, uint32_t Ilen, uint8_t Output[20])
{
 80043c0:	b5f0      	push	{r4, r5, r6, r7, lr}
  ErrorStatus status = SUCCESS;
  uint32_t inputaddr  = (uint32_t)Input;
  uint32_t outputaddr = (uint32_t)Output;

  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 80043c2:	f001 0303 	and.w	r3, r1, #3
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HASH_SHA1(uint8_t *Input, uint32_t Ilen, uint8_t Output[20])
{
 80043c6:	b08d      	sub	sp, #52	; 0x34
  HASH_InitTypeDef SHA1_HASH_InitStructure;
  HASH_MsgDigest SHA1_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
 80043c8:	2600      	movs	r6, #0
  ErrorStatus status = SUCCESS;
  uint32_t inputaddr  = (uint32_t)Input;
  uint32_t outputaddr = (uint32_t)Output;

  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 80043ca:	00db      	lsls	r3, r3, #3
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HASH_SHA1(uint8_t *Input, uint32_t Ilen, uint8_t Output[20])
{
 80043cc:	460c      	mov	r4, r1
  HASH_InitTypeDef SHA1_HASH_InitStructure;
  HASH_MsgDigest SHA1_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
 80043ce:	f8ad 602e 	strh.w	r6, [sp, #46]	; 0x2e
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HASH_SHA1(uint8_t *Input, uint32_t Ilen, uint8_t Output[20])
{
 80043d2:	4605      	mov	r5, r0
 80043d4:	4617      	mov	r7, r2
  HASH_InitTypeDef SHA1_HASH_InitStructure;
  HASH_MsgDigest SHA1_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
  uint32_t i = 0;
  __IO uint32_t counter = 0;
 80043d6:	960a      	str	r6, [sp, #40]	; 0x28
  ErrorStatus status = SUCCESS;
  uint32_t inputaddr  = (uint32_t)Input;
  uint32_t outputaddr = (uint32_t)Output;

  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 80043d8:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e

  /* HASH peripheral initialization */
  HASH_DeInit();
 80043dc:	f7ff fe12 	bl	8004004 <HASH_DeInit>

  /* HASH Configuration */
  SHA1_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_SHA1;
  SHA1_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HASH;
  SHA1_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
  HASH_Init(&SHA1_HASH_InitStructure);
 80043e0:	a806      	add	r0, sp, #24
  HASH_DeInit();

  /* HASH Configuration */
  SHA1_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_SHA1;
  SHA1_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HASH;
  SHA1_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 80043e2:	2320      	movs	r3, #32

  /* HASH peripheral initialization */
  HASH_DeInit();

  /* HASH Configuration */
  SHA1_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_SHA1;
 80043e4:	9606      	str	r6, [sp, #24]
  SHA1_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HASH;
 80043e6:	9607      	str	r6, [sp, #28]
  SHA1_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 80043e8:	9308      	str	r3, [sp, #32]
  HASH_Init(&SHA1_HASH_InitStructure);
 80043ea:	f7ff fe17 	bl	800401c <HASH_Init>

  /* Configure the number of valid bits in last word of the data */
  HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
 80043ee:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 80043f2:	b280      	uxth	r0, r0
 80043f4:	f7ff fe46 	bl	8004084 <HASH_SetLastWordValidBitsNbr>

  /* Write the Input block in the IN FIFO */
  for(i=0; i<Ilen; i+=4)
 80043f8:	b12c      	cbz	r4, 8004406 <HASH_SHA1+0x46>
  {
    HASH_DataIn(*(uint32_t*)inputaddr);
 80043fa:	59a8      	ldr	r0, [r5, r6]

  /* Configure the number of valid bits in last word of the data */
  HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);

  /* Write the Input block in the IN FIFO */
  for(i=0; i<Ilen; i+=4)
 80043fc:	3604      	adds	r6, #4
  {
    HASH_DataIn(*(uint32_t*)inputaddr);
 80043fe:	f7ff fe4d 	bl	800409c <HASH_DataIn>

  /* Configure the number of valid bits in last word of the data */
  HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);

  /* Write the Input block in the IN FIFO */
  for(i=0; i<Ilen; i+=4)
 8004402:	42b4      	cmp	r4, r6
 8004404:	d8f9      	bhi.n	80043fa <HASH_SHA1+0x3a>
    HASH_DataIn(*(uint32_t*)inputaddr);
    inputaddr+=4;
  }

  /* Start the HASH processor */
  HASH_StartDigest();
 8004406:	f7ff fe67 	bl	80040d8 <HASH_StartDigest>
 800440a:	e000      	b.n	800440e <HASH_SHA1+0x4e>
  /* wait until the Busy flag is RESET */
  do
  {
    busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
    counter++;
  }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 800440c:	b168      	cbz	r0, 800442a <HASH_SHA1+0x6a>
  HASH_StartDigest();

  /* wait until the Busy flag is RESET */
  do
  {
    busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 800440e:	2008      	movs	r0, #8
 8004410:	f7ff febc 	bl	800418c <HASH_GetFlagStatus>
    counter++;
 8004414:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004416:	3301      	adds	r3, #1
 8004418:	930a      	str	r3, [sp, #40]	; 0x28
  }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 800441a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800441c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004420:	d1f4      	bne.n	800440c <HASH_SHA1+0x4c>

  if (busystatus != RESET)
 8004422:	b110      	cbz	r0, 800442a <HASH_SHA1+0x6a>
  {
     status = ERROR;
 8004424:	2000      	movs	r0, #0
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[3]);
    outputaddr+=4;
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[4]);
  }
  return status;
}
 8004426:	b00d      	add	sp, #52	; 0x34
 8004428:	bdf0      	pop	{r4, r5, r6, r7, pc}
     status = ERROR;
  }
  else
  {
    /* Read the message digest */
    HASH_GetDigest(&SHA1_MessageDigest);
 800442a:	a801      	add	r0, sp, #4
 800442c:	f7ff fe44 	bl	80040b8 <HASH_GetDigest>
 8004430:	9b01      	ldr	r3, [sp, #4]
 8004432:	ba1b      	rev	r3, r3
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[0]);
 8004434:	603b      	str	r3, [r7, #0]
 8004436:	9b02      	ldr	r3, [sp, #8]
 8004438:	ba1b      	rev	r3, r3
    outputaddr+=4;
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[1]);
 800443a:	607b      	str	r3, [r7, #4]
 800443c:	9b03      	ldr	r3, [sp, #12]
 800443e:	ba1b      	rev	r3, r3
    outputaddr+=4;
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[2]);
 8004440:	60bb      	str	r3, [r7, #8]
 8004442:	9b04      	ldr	r3, [sp, #16]
 8004444:	ba1b      	rev	r3, r3
    outputaddr+=4;
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[3]);
 8004446:	60fb      	str	r3, [r7, #12]
 8004448:	9b05      	ldr	r3, [sp, #20]
 800444a:	ba1b      	rev	r3, r3
  HASH_MsgDigest SHA1_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
  uint32_t i = 0;
  __IO uint32_t counter = 0;
  uint32_t busystatus = 0;
  ErrorStatus status = SUCCESS;
 800444c:	2001      	movs	r0, #1
    outputaddr+=4;
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[2]);
    outputaddr+=4;
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[3]);
    outputaddr+=4;
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[4]);
 800444e:	613b      	str	r3, [r7, #16]
 8004450:	e7e9      	b.n	8004426 <HASH_SHA1+0x66>
 8004452:	bf00      	nop

08004454 <HMAC_SHA1>:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HMAC_SHA1(uint8_t *Key, uint32_t Keylen, uint8_t *Input,
                      uint32_t Ilen, uint8_t Output[20])
{
 8004454:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004458:	460c      	mov	r4, r1
 800445a:	b08d      	sub	sp, #52	; 0x34
  uint32_t keyaddr    = (uint32_t)Key;
  uint32_t inputaddr  = (uint32_t)Input;
  uint32_t outputaddr = (uint32_t)Output;

  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 800445c:	f003 0103 	and.w	r1, r3, #3
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HMAC_SHA1(uint8_t *Key, uint32_t Keylen, uint8_t *Input,
                      uint32_t Ilen, uint8_t Output[20])
{
 8004460:	461e      	mov	r6, r3

  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);

  /* Number of valid bits in last word of the Key */
  nbvalidbitskey = 8 * (Keylen % 4);
 8004462:	f004 0303 	and.w	r3, r4, #3
ErrorStatus HMAC_SHA1(uint8_t *Key, uint32_t Keylen, uint8_t *Input,
                      uint32_t Ilen, uint8_t Output[20])
{
  HASH_InitTypeDef SHA1_HASH_InitStructure;
  HASH_MsgDigest SHA1_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
 8004466:	2700      	movs	r7, #0

  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);

  /* Number of valid bits in last word of the Key */
  nbvalidbitskey = 8 * (Keylen % 4);
 8004468:	00db      	lsls	r3, r3, #3
  uint32_t keyaddr    = (uint32_t)Key;
  uint32_t inputaddr  = (uint32_t)Input;
  uint32_t outputaddr = (uint32_t)Output;

  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 800446a:	00c9      	lsls	r1, r1, #3
ErrorStatus HMAC_SHA1(uint8_t *Key, uint32_t Keylen, uint8_t *Input,
                      uint32_t Ilen, uint8_t Output[20])
{
  HASH_InitTypeDef SHA1_HASH_InitStructure;
  HASH_MsgDigest SHA1_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
 800446c:	f8ad 702c 	strh.w	r7, [sp, #44]	; 0x2c
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HMAC_SHA1(uint8_t *Key, uint32_t Keylen, uint8_t *Input,
                      uint32_t Ilen, uint8_t Output[20])
{
 8004470:	4605      	mov	r5, r0
  HASH_InitTypeDef SHA1_HASH_InitStructure;
  HASH_MsgDigest SHA1_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
  __IO uint16_t nbvalidbitskey = 0;
 8004472:	f8ad 702e 	strh.w	r7, [sp, #46]	; 0x2e
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HMAC_SHA1(uint8_t *Key, uint32_t Keylen, uint8_t *Input,
                      uint32_t Ilen, uint8_t Output[20])
{
 8004476:	4690      	mov	r8, r2
  HASH_InitTypeDef SHA1_HASH_InitStructure;
  HASH_MsgDigest SHA1_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
  __IO uint16_t nbvalidbitskey = 0;
  uint32_t i = 0;
  __IO uint32_t counter = 0;
 8004478:	970a      	str	r7, [sp, #40]	; 0x28
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HMAC_SHA1(uint8_t *Key, uint32_t Keylen, uint8_t *Input,
                      uint32_t Ilen, uint8_t Output[20])
{
 800447a:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
  uint32_t keyaddr    = (uint32_t)Key;
  uint32_t inputaddr  = (uint32_t)Input;
  uint32_t outputaddr = (uint32_t)Output;

  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 800447e:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c

  /* Number of valid bits in last word of the Key */
  nbvalidbitskey = 8 * (Keylen % 4);
 8004482:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e

  /* HASH peripheral initialization */
  HASH_DeInit();
 8004486:	f7ff fdbd 	bl	8004004 <HASH_DeInit>

  /* HASH Configuration */
  SHA1_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_SHA1;
  SHA1_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HMAC;
 800448a:	2340      	movs	r3, #64	; 0x40
 800448c:	9307      	str	r3, [sp, #28]
  SHA1_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 800448e:	2320      	movs	r3, #32
  if(Keylen > 64)
 8004490:	2c40      	cmp	r4, #64	; 0x40

  /* HASH peripheral initialization */
  HASH_DeInit();

  /* HASH Configuration */
  SHA1_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_SHA1;
 8004492:	9706      	str	r7, [sp, #24]
  SHA1_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HMAC;
  SHA1_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 8004494:	9308      	str	r3, [sp, #32]
  else
  {
    /* HMAC short Key */
    SHA1_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
  }
  HASH_Init(&SHA1_HASH_InitStructure);
 8004496:	a806      	add	r0, sp, #24

  /* HASH Configuration */
  SHA1_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_SHA1;
  SHA1_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HMAC;
  SHA1_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
  if(Keylen > 64)
 8004498:	d923      	bls.n	80044e2 <HMAC_SHA1+0x8e>
  {
    /* HMAC long Key */
    SHA1_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_LongKey;
 800449a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800449e:	9309      	str	r3, [sp, #36]	; 0x24
  else
  {
    /* HMAC short Key */
    SHA1_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
  }
  HASH_Init(&SHA1_HASH_InitStructure);
 80044a0:	f7ff fdbc 	bl	800401c <HASH_Init>

  /* Configure the number of valid bits in last word of the Key */
  HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 80044a4:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 80044a8:	b280      	uxth	r0, r0
 80044aa:	f7ff fdeb 	bl	8004084 <HASH_SetLastWordValidBitsNbr>
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HMAC_SHA1(uint8_t *Key, uint32_t Keylen, uint8_t *Input,
                      uint32_t Ilen, uint8_t Output[20])
{
 80044ae:	2700      	movs	r7, #0
  HASH_SetLastWordValidBitsNbr(nbvalidbitskey);

  /* Write the Key */
  for(i=0; i<Keylen; i+=4)
  {
    HASH_DataIn(*(uint32_t*)keyaddr);
 80044b0:	59e8      	ldr	r0, [r5, r7]

  /* Configure the number of valid bits in last word of the Key */
  HASH_SetLastWordValidBitsNbr(nbvalidbitskey);

  /* Write the Key */
  for(i=0; i<Keylen; i+=4)
 80044b2:	3704      	adds	r7, #4
  {
    HASH_DataIn(*(uint32_t*)keyaddr);
 80044b4:	f7ff fdf2 	bl	800409c <HASH_DataIn>

  /* Configure the number of valid bits in last word of the Key */
  HASH_SetLastWordValidBitsNbr(nbvalidbitskey);

  /* Write the Key */
  for(i=0; i<Keylen; i+=4)
 80044b8:	42bc      	cmp	r4, r7
 80044ba:	d8f9      	bhi.n	80044b0 <HMAC_SHA1+0x5c>
    HASH_DataIn(*(uint32_t*)keyaddr);
    keyaddr+=4;
  }

  /* Start the HASH processor */
  HASH_StartDigest();
 80044bc:	f7ff fe0c 	bl	80040d8 <HASH_StartDigest>
 80044c0:	e000      	b.n	80044c4 <HMAC_SHA1+0x70>
  /* wait until the Busy flag is RESET */
  do
  {
    busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
    counter++;
  }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 80044c2:	b1c8      	cbz	r0, 80044f8 <HMAC_SHA1+0xa4>
  HASH_StartDigest();

  /* wait until the Busy flag is RESET */
  do
  {
    busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 80044c4:	2008      	movs	r0, #8
 80044c6:	f7ff fe61 	bl	800418c <HASH_GetFlagStatus>
    counter++;
 80044ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80044cc:	3301      	adds	r3, #1
 80044ce:	930a      	str	r3, [sp, #40]	; 0x28
  }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 80044d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80044d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044d6:	d1f4      	bne.n	80044c2 <HMAC_SHA1+0x6e>

  if (busystatus != RESET)
 80044d8:	b170      	cbz	r0, 80044f8 <HMAC_SHA1+0xa4>
        counter++;
      }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));

      if (busystatus != RESET)
      {
        status = ERROR;
 80044da:	2000      	movs	r0, #0
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[4]);
      }
    }  
  }
  return status;  
}
 80044dc:	b00d      	add	sp, #52	; 0x34
 80044de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    SHA1_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_LongKey;
  }
  else
  {
    /* HMAC short Key */
    SHA1_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
 80044e2:	9709      	str	r7, [sp, #36]	; 0x24
  }
  HASH_Init(&SHA1_HASH_InitStructure);
 80044e4:	f7ff fd9a 	bl	800401c <HASH_Init>

  /* Configure the number of valid bits in last word of the Key */
  HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 80044e8:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 80044ec:	b280      	uxth	r0, r0
 80044ee:	f7ff fdc9 	bl	8004084 <HASH_SetLastWordValidBitsNbr>

  /* Write the Key */
  for(i=0; i<Keylen; i+=4)
 80044f2:	2c00      	cmp	r4, #0
 80044f4:	d1db      	bne.n	80044ae <HMAC_SHA1+0x5a>
 80044f6:	e7e1      	b.n	80044bc <HMAC_SHA1+0x68>
     status = ERROR;
  }
  else
  {
    /* Configure the number of valid bits in last word of the Input data */
    HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
 80044f8:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
 80044fc:	b280      	uxth	r0, r0
 80044fe:	f7ff fdc1 	bl	8004084 <HASH_SetLastWordValidBitsNbr>

    /* Write the Input block in the IN FIFO */
    for(i=0; i<Ilen; i+=4)
 8004502:	b13e      	cbz	r6, 8004514 <HMAC_SHA1+0xc0>
 8004504:	2700      	movs	r7, #0
    {
      HASH_DataIn(*(uint32_t*)inputaddr);
 8004506:	f858 0007 	ldr.w	r0, [r8, r7]
  {
    /* Configure the number of valid bits in last word of the Input data */
    HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);

    /* Write the Input block in the IN FIFO */
    for(i=0; i<Ilen; i+=4)
 800450a:	3704      	adds	r7, #4
    {
      HASH_DataIn(*(uint32_t*)inputaddr);
 800450c:	f7ff fdc6 	bl	800409c <HASH_DataIn>
  {
    /* Configure the number of valid bits in last word of the Input data */
    HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);

    /* Write the Input block in the IN FIFO */
    for(i=0; i<Ilen; i+=4)
 8004510:	42be      	cmp	r6, r7
 8004512:	d8f8      	bhi.n	8004506 <HMAC_SHA1+0xb2>
      HASH_DataIn(*(uint32_t*)inputaddr);
      inputaddr+=4;
    }

    /* Start the HASH processor */
    HASH_StartDigest();
 8004514:	f7ff fde0 	bl	80040d8 <HASH_StartDigest>


    /* wait until the Busy flag is RESET */
    counter =0;
 8004518:	2300      	movs	r3, #0
 800451a:	930a      	str	r3, [sp, #40]	; 0x28
 800451c:	e000      	b.n	8004520 <HMAC_SHA1+0xcc>
    do
    {
      busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
      counter++;
    }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 800451e:	b158      	cbz	r0, 8004538 <HMAC_SHA1+0xe4>

    /* wait until the Busy flag is RESET */
    counter =0;
    do
    {
      busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 8004520:	2008      	movs	r0, #8
 8004522:	f7ff fe33 	bl	800418c <HASH_GetFlagStatus>
      counter++;
 8004526:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004528:	3301      	adds	r3, #1
 800452a:	930a      	str	r3, [sp, #40]	; 0x28
    }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 800452c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800452e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004532:	d1f4      	bne.n	800451e <HMAC_SHA1+0xca>

    if (busystatus != RESET)
 8004534:	2800      	cmp	r0, #0
 8004536:	d1d0      	bne.n	80044da <HMAC_SHA1+0x86>
      status = ERROR;
    }
    else
    {  
      /* Configure the number of valid bits in last word of the Key */
      HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 8004538:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 800453c:	b280      	uxth	r0, r0
 800453e:	f7ff fda1 	bl	8004084 <HASH_SetLastWordValidBitsNbr>

      /* Write the Key */
      keyaddr = (uint32_t)Key;
      for(i=0; i<Keylen; i+=4)
 8004542:	b134      	cbz	r4, 8004552 <HMAC_SHA1+0xfe>
 8004544:	2600      	movs	r6, #0
      {
        HASH_DataIn(*(uint32_t*)keyaddr);
 8004546:	59a8      	ldr	r0, [r5, r6]
      /* Configure the number of valid bits in last word of the Key */
      HASH_SetLastWordValidBitsNbr(nbvalidbitskey);

      /* Write the Key */
      keyaddr = (uint32_t)Key;
      for(i=0; i<Keylen; i+=4)
 8004548:	3604      	adds	r6, #4
      {
        HASH_DataIn(*(uint32_t*)keyaddr);
 800454a:	f7ff fda7 	bl	800409c <HASH_DataIn>
      /* Configure the number of valid bits in last word of the Key */
      HASH_SetLastWordValidBitsNbr(nbvalidbitskey);

      /* Write the Key */
      keyaddr = (uint32_t)Key;
      for(i=0; i<Keylen; i+=4)
 800454e:	42b4      	cmp	r4, r6
 8004550:	d8f9      	bhi.n	8004546 <HMAC_SHA1+0xf2>
        HASH_DataIn(*(uint32_t*)keyaddr);
        keyaddr+=4;
      }

      /* Start the HASH processor */
      HASH_StartDigest();
 8004552:	f7ff fdc1 	bl	80040d8 <HASH_StartDigest>

      /* wait until the Busy flag is RESET */
      counter =0;
 8004556:	2300      	movs	r3, #0
 8004558:	930a      	str	r3, [sp, #40]	; 0x28
 800455a:	e000      	b.n	800455e <HMAC_SHA1+0x10a>
      do
      {
        busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
        counter++;
      }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 800455c:	b158      	cbz	r0, 8004576 <HMAC_SHA1+0x122>

      /* wait until the Busy flag is RESET */
      counter =0;
      do
      {
        busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 800455e:	2008      	movs	r0, #8
 8004560:	f7ff fe14 	bl	800418c <HASH_GetFlagStatus>
        counter++;
 8004564:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004566:	3301      	adds	r3, #1
 8004568:	930a      	str	r3, [sp, #40]	; 0x28
      }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 800456a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800456c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004570:	d1f4      	bne.n	800455c <HMAC_SHA1+0x108>

      if (busystatus != RESET)
 8004572:	2800      	cmp	r0, #0
 8004574:	d1b1      	bne.n	80044da <HMAC_SHA1+0x86>
        status = ERROR;
      }
      else
      {
        /* Read the message digest */
        HASH_GetDigest(&SHA1_MessageDigest);
 8004576:	a801      	add	r0, sp, #4
 8004578:	f7ff fd9e 	bl	80040b8 <HASH_GetDigest>
 800457c:	9b01      	ldr	r3, [sp, #4]
 800457e:	ba1b      	rev	r3, r3
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[0]);
 8004580:	f8c9 3000 	str.w	r3, [r9]
 8004584:	9b02      	ldr	r3, [sp, #8]
 8004586:	ba1b      	rev	r3, r3
        outputaddr+=4;
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[1]);
 8004588:	f8c9 3004 	str.w	r3, [r9, #4]
 800458c:	9b03      	ldr	r3, [sp, #12]
 800458e:	ba1b      	rev	r3, r3
        outputaddr+=4;
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[2]);
 8004590:	f8c9 3008 	str.w	r3, [r9, #8]
 8004594:	9b04      	ldr	r3, [sp, #16]
 8004596:	ba1b      	rev	r3, r3
        outputaddr+=4;
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[3]);
 8004598:	f8c9 300c 	str.w	r3, [r9, #12]
 800459c:	9b05      	ldr	r3, [sp, #20]
 800459e:	ba1b      	rev	r3, r3
  __IO uint16_t nbvalidbitsdata = 0;
  __IO uint16_t nbvalidbitskey = 0;
  uint32_t i = 0;
  __IO uint32_t counter = 0;
  uint32_t busystatus = 0;
  ErrorStatus status = SUCCESS;
 80045a0:	2001      	movs	r0, #1
        outputaddr+=4;
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[2]);
        outputaddr+=4;
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[3]);
        outputaddr+=4;
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[4]);
 80045a2:	f8c9 3010 	str.w	r3, [r9, #16]
 80045a6:	e799      	b.n	80044dc <HMAC_SHA1+0x88>

080045a8 <I2C_DeInit>:
  * @brief  Deinitialize the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 80045a8:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 80045aa:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 80045ae:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80045b2:	4298      	cmp	r0, r3
 80045b4:	d018      	beq.n	80045e8 <I2C_DeInit+0x40>
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
  }
  else if (I2Cx == I2C2)
 80045b6:	f44f 43b0 	mov.w	r3, #22528	; 0x5800
 80045ba:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80045be:	4298      	cmp	r0, r3
 80045c0:	d01e      	beq.n	8004600 <I2C_DeInit+0x58>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
  }
  else 
  {
    if (I2Cx == I2C3)
 80045c2:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 80045c6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80045ca:	4298      	cmp	r0, r3
 80045cc:	d000      	beq.n	80045d0 <I2C_DeInit+0x28>
 80045ce:	bd08      	pop	{r3, pc}
    {
      /* Enable I2C3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
 80045d0:	2101      	movs	r1, #1
 80045d2:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80045d6:	f000 fc9b 	bl	8004f10 <RCC_APB1PeriphResetCmd>
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 80045da:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80045de:	2100      	movs	r1, #0
    }
  }
}
 80045e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if (I2Cx == I2C3)
    {
      /* Enable I2C3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 80045e4:	f000 bc94 	b.w	8004f10 <RCC_APB1PeriphResetCmd>
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 80045e8:	2101      	movs	r1, #1
 80045ea:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80045ee:	f000 fc8f 	bl	8004f10 <RCC_APB1PeriphResetCmd>
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
 80045f2:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80045f6:	2100      	movs	r1, #0
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
    }
  }
}
 80045f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  if (I2Cx == I2C1)
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
 80045fc:	f000 bc88 	b.w	8004f10 <RCC_APB1PeriphResetCmd>
  }
  else if (I2Cx == I2C2)
  {
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 8004600:	2101      	movs	r1, #1
 8004602:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8004606:	f000 fc83 	bl	8004f10 <RCC_APB1PeriphResetCmd>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
 800460a:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800460e:	2100      	movs	r1, #0
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
    }
  }
}
 8004610:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else if (I2Cx == I2C2)
  {
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
 8004614:	f000 bc7c 	b.w	8004f10 <RCC_APB1PeriphResetCmd>

08004618 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8004618:	b570      	push	{r4, r5, r6, lr}
 800461a:	4604      	mov	r4, r0
 800461c:	b084      	sub	sp, #16
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 800461e:	4668      	mov	r0, sp
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 8004620:	88a6      	ldrh	r6, [r4, #4]
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8004622:	460d      	mov	r5, r1
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 8004624:	f000 fb80 	bl	8004d28 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 8004628:	9802      	ldr	r0, [sp, #8]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 800462a:	682a      	ldr	r2, [r5, #0]
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
  pclk1 = rcc_clocks.PCLK1_Frequency;
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 800462c:	f64d 6183 	movw	r1, #56963	; 0xde83

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 8004630:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
  pclk1 = rcc_clocks.PCLK1_Frequency;
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 8004634:	f2c4 311b 	movt	r1, #17179	; 0x431b

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 8004638:	0436      	lsls	r6, r6, #16
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
  pclk1 = rcc_clocks.PCLK1_Frequency;
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 800463a:	fba1 3100 	umull	r3, r1, r1, r0

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 800463e:	0c36      	lsrs	r6, r6, #16
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
  pclk1 = rcc_clocks.PCLK1_Frequency;
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 8004640:	0c89      	lsrs	r1, r1, #18
  tmpreg |= freqrange;
 8004642:	430e      	orrs	r6, r1
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 8004644:	80a6      	strh	r6, [r4, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8004646:	8823      	ldrh	r3, [r4, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8004648:	f248 66a0 	movw	r6, #34464	; 0x86a0
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 800464c:	f023 0301 	bic.w	r3, r3, #1
 8004650:	041b      	lsls	r3, r3, #16
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8004652:	f2c0 0601 	movt	r6, #1
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8004656:	0c1b      	lsrs	r3, r3, #16
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8004658:	42b2      	cmp	r2, r6
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 800465a:	8023      	strh	r3, [r4, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 800465c:	d822      	bhi.n	80046a4 <I2C_Init+0x8c>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 800465e:	0052      	lsls	r2, r2, #1
 8004660:	fbb0 f0f2 	udiv	r0, r0, r2
 8004664:	b280      	uxth	r0, r0
      result = 0x04;  
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 8004666:	3101      	adds	r1, #1
 8004668:	8421      	strh	r1, [r4, #32]
    {
      /* Set minimum allowed value */
      result = 0x04;  
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 800466a:	2803      	cmp	r0, #3
 800466c:	bf98      	it	ls
 800466e:	2004      	movls	r0, #4
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 8004670:	83a0      	strh	r0, [r4, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 8004672:	8823      	ldrh	r3, [r4, #0]
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8004674:	896e      	ldrh	r6, [r5, #10]
 8004676:	88a8      	ldrh	r0, [r5, #4]
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 8004678:	8929      	ldrh	r1, [r5, #8]
 800467a:	89aa      	ldrh	r2, [r5, #12]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 800467c:	b29b      	uxth	r3, r3
 800467e:	f043 0301 	orr.w	r3, r3, #1
 8004682:	8023      	strh	r3, [r4, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 8004684:	8823      	ldrh	r3, [r4, #0]
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 8004686:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 800468a:	f023 0302 	bic.w	r3, r3, #2
 800468e:	041b      	lsls	r3, r3, #16
 8004690:	0c1b      	lsrs	r3, r3, #16
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8004692:	4330      	orrs	r0, r6
 8004694:	4303      	orrs	r3, r0
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 8004696:	430a      	orrs	r2, r1
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8004698:	b29b      	uxth	r3, r3
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 800469a:	b292      	uxth	r2, r2
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 800469c:	8023      	strh	r3, [r4, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 800469e:	8122      	strh	r2, [r4, #8]
}
 80046a0:	b004      	add	sp, #16
 80046a2:	bd70      	pop	{r4, r5, r6, pc}
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 80046a4:	88ee      	ldrh	r6, [r5, #6]
 80046a6:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 80046aa:	429e      	cmp	r6, r3
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 80046ac:	bf1d      	ittte	ne
 80046ae:	eb02 0282 	addne.w	r2, r2, r2, lsl #2
 80046b2:	eb02 0282 	addne.w	r2, r2, r2, lsl #2
 80046b6:	fbb0 f0f2 	udivne	r0, r0, r2
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 80046ba:	eb02 0242 	addeq.w	r2, r2, r2, lsl #1
 80046be:	bf0b      	itete	eq
 80046c0:	fbb0 f0f2 	udiveq	r0, r0, r2
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 80046c4:	b280      	uxthne	r0, r0
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 80046c6:	b280      	uxtheq	r0, r0
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 80046c8:	f440 4080 	orrne.w	r0, r0, #16384	; 0x4000
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 80046cc:	0503      	lsls	r3, r0, #20
 80046ce:	0d1b      	lsrs	r3, r3, #20
 80046d0:	b90b      	cbnz	r3, 80046d6 <I2C_Init+0xbe>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 80046d2:	f040 0001 	orr.w	r0, r0, #1
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 80046d6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80046da:	f644 53d3 	movw	r3, #19923	; 0x4dd3
 80046de:	fb02 f101 	mul.w	r1, r2, r1
 80046e2:	f2c1 0362 	movt	r3, #4194	; 0x1062
 80046e6:	fb83 2301 	smull	r2, r3, r3, r1
 80046ea:	099b      	lsrs	r3, r3, #6
 80046ec:	3301      	adds	r3, #1
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 80046ee:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 80046f2:	8423      	strh	r3, [r4, #32]
 80046f4:	e7bc      	b.n	8004670 <I2C_Init+0x58>
 80046f6:	bf00      	nop

080046f8 <I2C_StructInit>:
{
/*---------------- Reset I2C init structure parameters values ----------------*/
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 80046f8:	2300      	movs	r3, #0
  */
void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
{
/*---------------- Reset I2C init structure parameters values ----------------*/
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
 80046fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80046fe:	6002      	str	r2, [r0, #0]
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 8004700:	8083      	strh	r3, [r0, #4]
  /* Initialize the I2C_DutyCycle member */
  I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 8004702:	f64b 72ff 	movw	r2, #49151	; 0xbfff
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
 8004706:	8103      	strh	r3, [r0, #8]
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
 8004708:	8143      	strh	r3, [r0, #10]
  /* Initialize the I2C_AcknowledgedAddress member */
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 800470a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
  /* Initialize the I2C_DutyCycle member */
  I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 800470e:	80c2      	strh	r2, [r0, #6]
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
  /* Initialize the I2C_AcknowledgedAddress member */
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8004710:	8183      	strh	r3, [r0, #12]
}
 8004712:	4770      	bx	lr

08004714 <I2C_Cmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 8004714:	8803      	ldrh	r3, [r0, #0]
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004716:	b929      	cbnz	r1, 8004724 <I2C_Cmd+0x10>
    I2Cx->CR1 |= I2C_CR1_PE;
  }
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8004718:	f023 0301 	bic.w	r3, r3, #1
 800471c:	041b      	lsls	r3, r3, #16
 800471e:	0c1b      	lsrs	r3, r3, #16
 8004720:	8003      	strh	r3, [r0, #0]
 8004722:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 8004724:	b29b      	uxth	r3, r3
 8004726:	f043 0301 	orr.w	r3, r3, #1
 800472a:	8003      	strh	r3, [r0, #0]
 800472c:	4770      	bx	lr
 800472e:	bf00      	nop

08004730 <I2C_GenerateSTART>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 8004730:	8803      	ldrh	r3, [r0, #0]
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004732:	b929      	cbnz	r1, 8004740 <I2C_GenerateSTART+0x10>
    I2Cx->CR1 |= I2C_CR1_START;
  }
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 8004734:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004738:	041b      	lsls	r3, r3, #16
 800473a:	0c1b      	lsrs	r3, r3, #16
 800473c:	8003      	strh	r3, [r0, #0]
 800473e:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 8004740:	b29b      	uxth	r3, r3
 8004742:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004746:	8003      	strh	r3, [r0, #0]
 8004748:	4770      	bx	lr
 800474a:	bf00      	nop

0800474c <I2C_GenerateSTOP>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 800474c:	8803      	ldrh	r3, [r0, #0]
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800474e:	b929      	cbnz	r1, 800475c <I2C_GenerateSTOP+0x10>
    I2Cx->CR1 |= I2C_CR1_STOP;
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 8004750:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004754:	041b      	lsls	r3, r3, #16
 8004756:	0c1b      	lsrs	r3, r3, #16
 8004758:	8003      	strh	r3, [r0, #0]
 800475a:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 800475c:	b29b      	uxth	r3, r3
 800475e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004762:	8003      	strh	r3, [r0, #0]
 8004764:	4770      	bx	lr
 8004766:	bf00      	nop

08004768 <I2C_Send7bitAddress>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 8004768:	b91a      	cbnz	r2, 8004772 <I2C_Send7bitAddress+0xa>
    Address |= I2C_OAR1_ADD0;
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 800476a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
  }
  /* Send the address */
  I2Cx->DR = Address;
 800476e:	8201      	strh	r1, [r0, #16]
}
 8004770:	4770      	bx	lr
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
  {
    /* Set the address bit0 for read */
    Address |= I2C_OAR1_ADD0;
 8004772:	f041 0101 	orr.w	r1, r1, #1
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
  }
  /* Send the address */
  I2Cx->DR = Address;
 8004776:	8201      	strh	r1, [r0, #16]
}
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop

0800477c <I2C_AcknowledgeConfig>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 800477c:	8803      	ldrh	r3, [r0, #0]
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800477e:	b929      	cbnz	r1, 800478c <I2C_AcknowledgeConfig+0x10>
    I2Cx->CR1 |= I2C_CR1_ACK;
  }
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 8004780:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004784:	041b      	lsls	r3, r3, #16
 8004786:	0c1b      	lsrs	r3, r3, #16
 8004788:	8003      	strh	r3, [r0, #0]
 800478a:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 800478c:	b29b      	uxth	r3, r3
 800478e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004792:	8003      	strh	r3, [r0, #0]
 8004794:	4770      	bx	lr
 8004796:	bf00      	nop

08004798 <I2C_OwnAddress2Config>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Get the old register value */
  tmpreg = I2Cx->OAR2;
 8004798:	8983      	ldrh	r3, [r0, #12]

  /* Reset I2Cx Own address2 bit [7:1] */
  tmpreg &= (uint16_t)~((uint16_t)I2C_OAR2_ADD2);
 800479a:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 800479e:	041b      	lsls	r3, r3, #16

  /* Set I2Cx Own address2 */
  tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
 80047a0:	f001 01fe 	and.w	r1, r1, #254	; 0xfe

  /* Get the old register value */
  tmpreg = I2Cx->OAR2;

  /* Reset I2Cx Own address2 bit [7:1] */
  tmpreg &= (uint16_t)~((uint16_t)I2C_OAR2_ADD2);
 80047a4:	0c1b      	lsrs	r3, r3, #16

  /* Set I2Cx Own address2 */
  tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
 80047a6:	430b      	orrs	r3, r1

  /* Store the new register value */
  I2Cx->OAR2 = tmpreg;
 80047a8:	8183      	strh	r3, [r0, #12]
}
 80047aa:	4770      	bx	lr

080047ac <I2C_DualAddressCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable dual addressing mode */
    I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
 80047ac:	8983      	ldrh	r3, [r0, #12]
void I2C_DualAddressCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80047ae:	b929      	cbnz	r1, 80047bc <I2C_DualAddressCmd+0x10>
    I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
  }
  else
  {
    /* Disable dual addressing mode */
    I2Cx->OAR2 &= (uint16_t)~((uint16_t)I2C_OAR2_ENDUAL);
 80047b0:	f023 0301 	bic.w	r3, r3, #1
 80047b4:	041b      	lsls	r3, r3, #16
 80047b6:	0c1b      	lsrs	r3, r3, #16
 80047b8:	8183      	strh	r3, [r0, #12]
 80047ba:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable dual addressing mode */
    I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
 80047bc:	b29b      	uxth	r3, r3
 80047be:	f043 0301 	orr.w	r3, r3, #1
 80047c2:	8183      	strh	r3, [r0, #12]
 80047c4:	4770      	bx	lr
 80047c6:	bf00      	nop

080047c8 <I2C_GeneralCallCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable generall call */
    I2Cx->CR1 |= I2C_CR1_ENGC;
 80047c8:	8803      	ldrh	r3, [r0, #0]
void I2C_GeneralCallCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80047ca:	b929      	cbnz	r1, 80047d8 <I2C_GeneralCallCmd+0x10>
    I2Cx->CR1 |= I2C_CR1_ENGC;
  }
  else
  {
    /* Disable generall call */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENGC);
 80047cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047d0:	041b      	lsls	r3, r3, #16
 80047d2:	0c1b      	lsrs	r3, r3, #16
 80047d4:	8003      	strh	r3, [r0, #0]
 80047d6:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable generall call */
    I2Cx->CR1 |= I2C_CR1_ENGC;
 80047d8:	b29b      	uxth	r3, r3
 80047da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047de:	8003      	strh	r3, [r0, #0]
 80047e0:	4770      	bx	lr
 80047e2:	bf00      	nop

080047e4 <I2C_SoftwareResetCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Peripheral under reset */
    I2Cx->CR1 |= I2C_CR1_SWRST;
 80047e4:	8803      	ldrh	r3, [r0, #0]
void I2C_SoftwareResetCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80047e6:	b919      	cbnz	r1, 80047f0 <I2C_SoftwareResetCmd+0xc>
    I2Cx->CR1 |= I2C_CR1_SWRST;
  }
  else
  {
    /* Peripheral not under reset */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_SWRST);
 80047e8:	045b      	lsls	r3, r3, #17
 80047ea:	0c5b      	lsrs	r3, r3, #17
 80047ec:	8003      	strh	r3, [r0, #0]
 80047ee:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Peripheral under reset */
    I2Cx->CR1 |= I2C_CR1_SWRST;
 80047f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	8003      	strh	r3, [r0, #0]
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop

08004800 <I2C_StretchClockCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState == DISABLE)
  {
    /* Enable the selected I2C Clock stretching */
    I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 8004800:	8803      	ldrh	r3, [r0, #0]
void I2C_StretchClockCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState == DISABLE)
 8004802:	b129      	cbz	r1, 8004810 <I2C_StretchClockCmd+0x10>
    I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
  }
  else
  {
    /* Disable the selected I2C Clock stretching */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_NOSTRETCH);
 8004804:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004808:	041b      	lsls	r3, r3, #16
 800480a:	0c1b      	lsrs	r3, r3, #16
 800480c:	8003      	strh	r3, [r0, #0]
 800480e:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState == DISABLE)
  {
    /* Enable the selected I2C Clock stretching */
    I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 8004810:	b29b      	uxth	r3, r3
 8004812:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004816:	8003      	strh	r3, [r0, #0]
 8004818:	4770      	bx	lr
 800481a:	bf00      	nop

0800481c <I2C_FastModeDutyCycleConfig>:
void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
  if (I2C_DutyCycle != I2C_DutyCycle_16_9)
 800481c:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
  {
    /* I2C fast mode Tlow/Thigh=2 */
    I2Cx->CCR &= I2C_DutyCycle_2;
 8004820:	8b83      	ldrh	r3, [r0, #28]
void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
  if (I2C_DutyCycle != I2C_DutyCycle_16_9)
 8004822:	d005      	beq.n	8004830 <I2C_FastModeDutyCycleConfig+0x14>
  {
    /* I2C fast mode Tlow/Thigh=2 */
    I2Cx->CCR &= I2C_DutyCycle_2;
 8004824:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004828:	041b      	lsls	r3, r3, #16
 800482a:	0c1b      	lsrs	r3, r3, #16
 800482c:	8383      	strh	r3, [r0, #28]
 800482e:	4770      	bx	lr
  }
  else
  {
    /* I2C fast mode Tlow/Thigh=16/9 */
    I2Cx->CCR |= I2C_DutyCycle_16_9;
 8004830:	b29b      	uxth	r3, r3
 8004832:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004836:	8383      	strh	r3, [r0, #28]
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop

0800483c <I2C_NACKPositionConfig>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_NACK_POSITION(I2C_NACKPosition));
  
  /* Check the input parameter */
  if (I2C_NACKPosition == I2C_NACKPosition_Next)
 800483c:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
  {
    /* Next byte in shift register is the last received byte */
    I2Cx->CR1 |= I2C_NACKPosition_Next;
 8004840:	8803      	ldrh	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_NACK_POSITION(I2C_NACKPosition));
  
  /* Check the input parameter */
  if (I2C_NACKPosition == I2C_NACKPosition_Next)
 8004842:	d005      	beq.n	8004850 <I2C_NACKPositionConfig+0x14>
    I2Cx->CR1 |= I2C_NACKPosition_Next;
  }
  else
  {
    /* Current byte in shift register is the last received byte */
    I2Cx->CR1 &= I2C_NACKPosition_Current;
 8004844:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004848:	041b      	lsls	r3, r3, #16
 800484a:	0c1b      	lsrs	r3, r3, #16
 800484c:	8003      	strh	r3, [r0, #0]
 800484e:	4770      	bx	lr
  
  /* Check the input parameter */
  if (I2C_NACKPosition == I2C_NACKPosition_Next)
  {
    /* Next byte in shift register is the last received byte */
    I2Cx->CR1 |= I2C_NACKPosition_Next;
 8004850:	b29b      	uxth	r3, r3
 8004852:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004856:	8003      	strh	r3, [r0, #0]
 8004858:	4770      	bx	lr
 800485a:	bf00      	nop

0800485c <I2C_SMBusAlertConfig>:
void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
 800485c:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
  {
    /* Drive the SMBusAlert pin Low */
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
 8004860:	8803      	ldrh	r3, [r0, #0]
void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
 8004862:	d005      	beq.n	8004870 <I2C_SMBusAlertConfig+0x14>
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
  }
  else
  {
    /* Drive the SMBusAlert pin High  */
    I2Cx->CR1 &= I2C_SMBusAlert_High;
 8004864:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004868:	041b      	lsls	r3, r3, #16
 800486a:	0c1b      	lsrs	r3, r3, #16
 800486c:	8003      	strh	r3, [r0, #0]
 800486e:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
  {
    /* Drive the SMBusAlert pin Low */
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
 8004870:	b29b      	uxth	r3, r3
 8004872:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004876:	8003      	strh	r3, [r0, #0]
 8004878:	4770      	bx	lr
 800487a:	bf00      	nop

0800487c <I2C_ARPCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C ARP */
    I2Cx->CR1 |= I2C_CR1_ENARP;
 800487c:	8803      	ldrh	r3, [r0, #0]
void I2C_ARPCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800487e:	b929      	cbnz	r1, 800488c <I2C_ARPCmd+0x10>
    I2Cx->CR1 |= I2C_CR1_ENARP;
  }
  else
  {
    /* Disable the selected I2C ARP */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENARP);
 8004880:	f023 0310 	bic.w	r3, r3, #16
 8004884:	041b      	lsls	r3, r3, #16
 8004886:	0c1b      	lsrs	r3, r3, #16
 8004888:	8003      	strh	r3, [r0, #0]
 800488a:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C ARP */
    I2Cx->CR1 |= I2C_CR1_ENARP;
 800488c:	b29b      	uxth	r3, r3
 800488e:	f043 0310 	orr.w	r3, r3, #16
 8004892:	8003      	strh	r3, [r0, #0]
 8004894:	4770      	bx	lr
 8004896:	bf00      	nop

08004898 <I2C_SendData>:
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 8004898:	8201      	strh	r1, [r0, #16]
}
 800489a:	4770      	bx	lr

0800489c <I2C_ReceiveData>:
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 800489c:	8a00      	ldrh	r0, [r0, #16]
}
 800489e:	b2c0      	uxtb	r0, r0
 80048a0:	4770      	bx	lr
 80048a2:	bf00      	nop

080048a4 <I2C_TransmitPEC>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C PEC transmission */
    I2Cx->CR1 |= I2C_CR1_PEC;
 80048a4:	8803      	ldrh	r3, [r0, #0]
void I2C_TransmitPEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80048a6:	b929      	cbnz	r1, 80048b4 <I2C_TransmitPEC+0x10>
    I2Cx->CR1 |= I2C_CR1_PEC;
  }
  else
  {
    /* Disable the selected I2C PEC transmission */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PEC);
 80048a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80048ac:	041b      	lsls	r3, r3, #16
 80048ae:	0c1b      	lsrs	r3, r3, #16
 80048b0:	8003      	strh	r3, [r0, #0]
 80048b2:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C PEC transmission */
    I2Cx->CR1 |= I2C_CR1_PEC;
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80048ba:	8003      	strh	r3, [r0, #0]
 80048bc:	4770      	bx	lr
 80048be:	bf00      	nop

080048c0 <I2C_PECPositionConfig>:
void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
 80048c0:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
  {
    /* Next byte in shift register is PEC */
    I2Cx->CR1 |= I2C_PECPosition_Next;
 80048c4:	8803      	ldrh	r3, [r0, #0]
void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
 80048c6:	d005      	beq.n	80048d4 <I2C_PECPositionConfig+0x14>
    I2Cx->CR1 |= I2C_PECPosition_Next;
  }
  else
  {
    /* Current byte in shift register is PEC */
    I2Cx->CR1 &= I2C_PECPosition_Current;
 80048c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80048cc:	041b      	lsls	r3, r3, #16
 80048ce:	0c1b      	lsrs	r3, r3, #16
 80048d0:	8003      	strh	r3, [r0, #0]
 80048d2:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
  {
    /* Next byte in shift register is PEC */
    I2Cx->CR1 |= I2C_PECPosition_Next;
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80048da:	8003      	strh	r3, [r0, #0]
 80048dc:	4770      	bx	lr
 80048de:	bf00      	nop

080048e0 <I2C_CalculatePEC>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C PEC calculation */
    I2Cx->CR1 |= I2C_CR1_ENPEC;
 80048e0:	8803      	ldrh	r3, [r0, #0]
void I2C_CalculatePEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80048e2:	b929      	cbnz	r1, 80048f0 <I2C_CalculatePEC+0x10>
    I2Cx->CR1 |= I2C_CR1_ENPEC;
  }
  else
  {
    /* Disable the selected I2C PEC calculation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENPEC);
 80048e4:	f023 0320 	bic.w	r3, r3, #32
 80048e8:	041b      	lsls	r3, r3, #16
 80048ea:	0c1b      	lsrs	r3, r3, #16
 80048ec:	8003      	strh	r3, [r0, #0]
 80048ee:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C PEC calculation */
    I2Cx->CR1 |= I2C_CR1_ENPEC;
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	f043 0320 	orr.w	r3, r3, #32
 80048f6:	8003      	strh	r3, [r0, #0]
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop

080048fc <I2C_GetPEC>:
uint8_t I2C_GetPEC(I2C_TypeDef* I2Cx)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the selected I2C PEC value */
  return ((I2Cx->SR2) >> 8);
 80048fc:	8b00      	ldrh	r0, [r0, #24]
}
 80048fe:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8004902:	4770      	bx	lr

08004904 <I2C_DMACmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR2 |= I2C_CR2_DMAEN;
 8004904:	8883      	ldrh	r3, [r0, #4]
void I2C_DMACmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004906:	b929      	cbnz	r1, 8004914 <I2C_DMACmd+0x10>
    I2Cx->CR2 |= I2C_CR2_DMAEN;
  }
  else
  {
    /* Disable the selected I2C DMA requests */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_DMAEN);
 8004908:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800490c:	041b      	lsls	r3, r3, #16
 800490e:	0c1b      	lsrs	r3, r3, #16
 8004910:	8083      	strh	r3, [r0, #4]
 8004912:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR2 |= I2C_CR2_DMAEN;
 8004914:	b29b      	uxth	r3, r3
 8004916:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800491a:	8083      	strh	r3, [r0, #4]
 800491c:	4770      	bx	lr
 800491e:	bf00      	nop

08004920 <I2C_DMALastTransferCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Next DMA transfer is the last transfer */
    I2Cx->CR2 |= I2C_CR2_LAST;
 8004920:	8883      	ldrh	r3, [r0, #4]
void I2C_DMALastTransferCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004922:	b929      	cbnz	r1, 8004930 <I2C_DMALastTransferCmd+0x10>
    I2Cx->CR2 |= I2C_CR2_LAST;
  }
  else
  {
    /* Next DMA transfer is not the last transfer */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_LAST);
 8004924:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004928:	041b      	lsls	r3, r3, #16
 800492a:	0c1b      	lsrs	r3, r3, #16
 800492c:	8083      	strh	r3, [r0, #4]
 800492e:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Next DMA transfer is the last transfer */
    I2Cx->CR2 |= I2C_CR2_LAST;
 8004930:	b29b      	uxth	r3, r3
 8004932:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004936:	8083      	strh	r3, [r0, #4]
 8004938:	4770      	bx	lr
 800493a:	bf00      	nop

0800493c <I2C_ReadRegister>:
  *            @arg I2C_Register_CCR:   CCR register.
  *            @arg I2C_Register_TRISE: TRISE register.
  * @retval The value of the read register.
  */
uint16_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register)
{
 800493c:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 800493e:	2300      	movs	r3, #0
 8004940:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_REGISTER(I2C_Register));

  tmp = (uint32_t) I2Cx;
 8004942:	9001      	str	r0, [sp, #4]
  tmp += I2C_Register;
 8004944:	9b01      	ldr	r3, [sp, #4]
 8004946:	18cb      	adds	r3, r1, r3
 8004948:	9301      	str	r3, [sp, #4]

  /* Return the selected register value */
  return (*(__IO uint16_t *) tmp);
 800494a:	9b01      	ldr	r3, [sp, #4]
 800494c:	8818      	ldrh	r0, [r3, #0]
}
 800494e:	b280      	uxth	r0, r0
 8004950:	b002      	add	sp, #8
 8004952:	4770      	bx	lr

08004954 <I2C_ITConfig>:
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 8004954:	8883      	ldrh	r3, [r0, #4]
 8004956:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
 8004958:	b91a      	cbnz	r2, 8004962 <I2C_ITConfig+0xe>
    I2Cx->CR2 |= I2C_IT;
  }
  else
  {
    /* Disable the selected I2C interrupts */
    I2Cx->CR2 &= (uint16_t)~I2C_IT;
 800495a:	ea23 0101 	bic.w	r1, r3, r1
 800495e:	8081      	strh	r1, [r0, #4]
 8004960:	4770      	bx	lr
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 8004962:	4319      	orrs	r1, r3
 8004964:	8081      	strh	r1, [r0, #4]
 8004966:	4770      	bx	lr

08004968 <I2C_CheckEvent>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8004968:	8a82      	ldrh	r2, [r0, #20]
  flag2 = I2Cx->SR2;
 800496a:	8b03      	ldrh	r3, [r0, #24]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 800496c:	b290      	uxth	r0, r2
  flag2 = I2Cx->SR2;
  flag2 = flag2 << 16;

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 800496e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8004972:	4008      	ands	r0, r1

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 8004974:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
  }
  /* Return status */
  return status;
}
 8004978:	1a0b      	subs	r3, r1, r0
 800497a:	4258      	negs	r0, r3
 800497c:	eb40 0003 	adc.w	r0, r0, r3
 8004980:	4770      	bx	lr
 8004982:	bf00      	nop

08004984 <I2C_GetLastEvent>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8004984:	8a82      	ldrh	r2, [r0, #20]
  flag2 = I2Cx->SR2;
 8004986:	8b03      	ldrh	r3, [r0, #24]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8004988:	b290      	uxth	r0, r2
  flag2 = I2Cx->SR2;
  flag2 = flag2 << 16;

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 800498a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16

  /* Return status */
  return lastevent;
}
 800498e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8004992:	4770      	bx	lr

08004994 <I2C_GetFlagStatus>:
  *                                Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8004994:	b082      	sub	sp, #8
  FlagStatus bitstatus = RESET;
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 8004996:	2300      	movs	r3, #0

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 8004998:	0f0a      	lsrs	r2, r1, #28
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
  FlagStatus bitstatus = RESET;
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 800499a:	9300      	str	r3, [sp, #0]
 800499c:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 800499e:	9001      	str	r0, [sp, #4]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 80049a0:	9200      	str	r2, [sp, #0]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
  
  if(i2creg != 0)
 80049a2:	9b00      	ldr	r3, [sp, #0]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 80049a4:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
  
  if(i2creg != 0)
 80049a8:	b153      	cbz	r3, 80049c0 <I2C_GetFlagStatus+0x2c>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 80049aa:	9b01      	ldr	r3, [sp, #4]
 80049ac:	3314      	adds	r3, #20
 80049ae:	9301      	str	r3, [sp, #4]
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 80049b0:	9b01      	ldr	r3, [sp, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 80049b4:	4219      	tst	r1, r3
    bitstatus = RESET;
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
}
 80049b6:	bf0c      	ite	eq
 80049b8:	2000      	moveq	r0, #0
 80049ba:	2001      	movne	r0, #1
 80049bc:	b002      	add	sp, #8
 80049be:	4770      	bx	lr
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 80049c0:	9b01      	ldr	r3, [sp, #4]
 80049c2:	3318      	adds	r3, #24
    i2cxbase += 0x14;
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 80049c4:	0c09      	lsrs	r1, r1, #16
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 80049c6:	9301      	str	r3, [sp, #4]
 80049c8:	e7f2      	b.n	80049b0 <I2C_GetFlagStatus+0x1c>
 80049ca:	bf00      	nop

080049cc <I2C_ClearFlag>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));
  /* Get the I2C flag position */
  flagpos = I2C_FLAG & FLAG_MASK;
  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 80049cc:	43c9      	mvns	r1, r1
 80049ce:	b289      	uxth	r1, r1
 80049d0:	8281      	strh	r1, [r0, #20]
}
 80049d2:	4770      	bx	lr

080049d4 <I2C_GetITStatus>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 80049d4:	8883      	ldrh	r3, [r0, #4]
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_MASK;

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 80049d6:	8a80      	ldrh	r0, [r0, #20]
 80049d8:	b280      	uxth	r0, r0
 80049da:	4008      	ands	r0, r1
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 80049dc:	b29b      	uxth	r3, r3
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_MASK;

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 80049de:	d006      	beq.n	80049ee <I2C_GetITStatus+0x1a>
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 80049e0:	f001 61e0 	and.w	r1, r1, #117440512	; 0x7000000
  *            @arg I2C_IT_ADDR: Address sent flag (Master mode) "ADSL"
  *                              Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_IT_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_IT (SET or RESET).
  */
ITStatus I2C_GetITStatus(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
 80049e4:	ea13 4111 	ands.w	r1, r3, r1, lsr #16

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
  {
    /* I2C_IT is set */
    bitstatus = SET;
 80049e8:	bf0c      	ite	eq
 80049ea:	2000      	moveq	r0, #0
 80049ec:	2001      	movne	r0, #1
    /* I2C_IT is reset */
    bitstatus = RESET;
  }
  /* Return the I2C_IT status */
  return  bitstatus;
}
 80049ee:	4770      	bx	lr

080049f0 <I2C_ClearITPendingBit>:

  /* Get the I2C flag position */
  flagpos = I2C_IT & FLAG_MASK;

  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 80049f0:	43c9      	mvns	r1, r1
 80049f2:	b289      	uxth	r1, r1
 80049f4:	8281      	strh	r1, [r0, #20]
}
 80049f6:	4770      	bx	lr

080049f8 <IWDG_WriteAccessCmd>:
  */
void IWDG_WriteAccessCmd(uint16_t IWDG_WriteAccess)
{
  /* Check the parameters */
  assert_param(IS_IWDG_WRITE_ACCESS(IWDG_WriteAccess));
  IWDG->KR = IWDG_WriteAccess;
 80049f8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80049fc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004a00:	6018      	str	r0, [r3, #0]
}
 8004a02:	4770      	bx	lr

08004a04 <IWDG_SetPrescaler>:
  */
void IWDG_SetPrescaler(uint8_t IWDG_Prescaler)
{
  /* Check the parameters */
  assert_param(IS_IWDG_PRESCALER(IWDG_Prescaler));
  IWDG->PR = IWDG_Prescaler;
 8004a04:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004a08:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004a0c:	6058      	str	r0, [r3, #4]
}
 8004a0e:	4770      	bx	lr

08004a10 <IWDG_SetReload>:
  */
void IWDG_SetReload(uint16_t Reload)
{
  /* Check the parameters */
  assert_param(IS_IWDG_RELOAD(Reload));
  IWDG->RLR = Reload;
 8004a10:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004a14:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004a18:	6098      	str	r0, [r3, #8]
}
 8004a1a:	4770      	bx	lr

08004a1c <IWDG_ReloadCounter>:
  * @param  None
  * @retval None
  */
void IWDG_ReloadCounter(void)
{
  IWDG->KR = KR_KEY_RELOAD;
 8004a1c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004a20:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004a24:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8004a28:	601a      	str	r2, [r3, #0]
}
 8004a2a:	4770      	bx	lr

08004a2c <IWDG_Enable>:
  * @param  None
  * @retval None
  */
void IWDG_Enable(void)
{
  IWDG->KR = KR_KEY_ENABLE;
 8004a2c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004a30:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004a34:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8004a38:	601a      	str	r2, [r3, #0]
}
 8004a3a:	4770      	bx	lr

08004a3c <IWDG_GetFlagStatus>:
FlagStatus IWDG_GetFlagStatus(uint16_t IWDG_FLAG)
{
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_IWDG_FLAG(IWDG_FLAG));
  if ((IWDG->SR & IWDG_FLAG) != (uint32_t)RESET)
 8004a3c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004a40:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004a44:	68db      	ldr	r3, [r3, #12]
  {
    bitstatus = SET;
 8004a46:	4218      	tst	r0, r3
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
}
 8004a48:	bf0c      	ite	eq
 8004a4a:	2000      	moveq	r0, #0
 8004a4c:	2001      	movne	r0, #1
 8004a4e:	4770      	bx	lr

08004a50 <PWR_DeInit>:
  * @brief  Deinitializes the PWR peripheral registers to their default reset values.     
  * @param  None
  * @retval None
  */
void PWR_DeInit(void)
{
 8004a50:	b508      	push	{r3, lr}
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
 8004a52:	2101      	movs	r1, #1
 8004a54:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8004a58:	f000 fa5a 	bl	8004f10 <RCC_APB1PeriphResetCmd>
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
 8004a5c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8004a60:	2100      	movs	r1, #0
}
 8004a62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  * @retval None
  */
void PWR_DeInit(void)
{
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
 8004a66:	f000 ba53 	b.w	8004f10 <RCC_APB1PeriphResetCmd>
 8004a6a:	bf00      	nop

08004a6c <PWR_BackupAccessCmd>:
void PWR_BackupAccessCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)NewState;
 8004a6c:	2320      	movs	r3, #32
 8004a6e:	f2c4 230e 	movt	r3, #16910	; 0x420e
 8004a72:	6018      	str	r0, [r3, #0]
}
 8004a74:	4770      	bx	lr
 8004a76:	bf00      	nop

08004a78 <PWR_PVDLevelConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(PWR_PVDLevel));
  
  tmpreg = PWR->CR;
 8004a78:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8004a7c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004a80:	681a      	ldr	r2, [r3, #0]
  
  /* Clear PLS[7:5] bits */
  tmpreg &= CR_PLS_MASK;
 8004a82:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
  
  /* Set PLS[7:5] bits according to PWR_PVDLevel value */
  tmpreg |= PWR_PVDLevel;
 8004a86:	4302      	orrs	r2, r0
  
  /* Store the new value */
  PWR->CR = tmpreg;
 8004a88:	601a      	str	r2, [r3, #0]
}
 8004a8a:	4770      	bx	lr

08004a8c <PWR_PVDCmd>:
void PWR_PVDCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)NewState;
 8004a8c:	2310      	movs	r3, #16
 8004a8e:	f2c4 230e 	movt	r3, #16910	; 0x420e
 8004a92:	6018      	str	r0, [r3, #0]
}
 8004a94:	4770      	bx	lr
 8004a96:	bf00      	nop

08004a98 <PWR_WakeUpPinCmd>:
void PWR_WakeUpPinCmd(FunctionalState NewState)
{
  /* Check the parameters */  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_EWUP_BB = (uint32_t)NewState;
 8004a98:	23a0      	movs	r3, #160	; 0xa0
 8004a9a:	f2c4 230e 	movt	r3, #16910	; 0x420e
 8004a9e:	6018      	str	r0, [r3, #0]
}
 8004aa0:	4770      	bx	lr
 8004aa2:	bf00      	nop

08004aa4 <PWR_BackupRegulatorCmd>:
void PWR_BackupRegulatorCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)NewState;
 8004aa4:	23a4      	movs	r3, #164	; 0xa4
 8004aa6:	f2c4 230e 	movt	r3, #16910	; 0x420e
 8004aaa:	6018      	str	r0, [r3, #0]
}
 8004aac:	4770      	bx	lr
 8004aae:	bf00      	nop

08004ab0 <PWR_MainRegulatorModeConfig>:
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR_VOLTAGE(PWR_Regulator_Voltage));

  if (PWR_Regulator_Voltage == PWR_Regulator_Voltage_Scale2)
  {
    PWR->CR &= ~PWR_Regulator_Voltage_Scale1;
 8004ab0:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8004ab4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004ab8:	681a      	ldr	r2, [r3, #0]
void PWR_MainRegulatorModeConfig(uint32_t PWR_Regulator_Voltage)
{
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR_VOLTAGE(PWR_Regulator_Voltage));

  if (PWR_Regulator_Voltage == PWR_Regulator_Voltage_Scale2)
 8004aba:	b118      	cbz	r0, 8004ac4 <PWR_MainRegulatorModeConfig+0x14>
  {
    PWR->CR &= ~PWR_Regulator_Voltage_Scale1;
  }
  else
  {    
    PWR->CR |= PWR_Regulator_Voltage_Scale1;
 8004abc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ac0:	601a      	str	r2, [r3, #0]
 8004ac2:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR_VOLTAGE(PWR_Regulator_Voltage));

  if (PWR_Regulator_Voltage == PWR_Regulator_Voltage_Scale2)
  {
    PWR->CR &= ~PWR_Regulator_Voltage_Scale1;
 8004ac4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004ac8:	601a      	str	r2, [r3, #0]
 8004aca:	4770      	bx	lr

08004acc <PWR_FlashPowerDownCmd>:
void PWR_FlashPowerDownCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)NewState;
 8004acc:	2324      	movs	r3, #36	; 0x24
 8004ace:	f2c4 230e 	movt	r3, #16910	; 0x420e
 8004ad2:	6018      	str	r0, [r3, #0]
}
 8004ad4:	4770      	bx	lr
 8004ad6:	bf00      	nop

08004ad8 <PWR_EnterSTOPMode>:
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(PWR_Regulator));
  assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
  
  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;
 8004ad8:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 8004adc:	f2c4 0200 	movt	r2, #16384	; 0x4000
  *            @arg PWR_STOPEntry_WFI: enter STOP mode with WFI instruction
  *            @arg PWR_STOPEntry_WFE: enter STOP mode with WFE instruction
  * @retval None
  */
void PWR_EnterSTOPMode(uint32_t PWR_Regulator, uint8_t PWR_STOPEntry)
{
 8004ae0:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(PWR_Regulator));
  assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
  
  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;
 8004ae2:	6814      	ldr	r4, [r2, #0]
  
  /* Store the new value */
  PWR->CR = tmpreg;
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 8004ae4:	f44f 436d 	mov.w	r3, #60672	; 0xed00
  assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
  
  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;
  /* Clear PDDS and LPDSR bits */
  tmpreg &= CR_DS_MASK;
 8004ae8:	f024 0403 	bic.w	r4, r4, #3
  
  /* Store the new value */
  PWR->CR = tmpreg;
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 8004aec:	f2ce 0300 	movt	r3, #57344	; 0xe000
  tmpreg = PWR->CR;
  /* Clear PDDS and LPDSR bits */
  tmpreg &= CR_DS_MASK;
  
  /* Set LPDSR bit according to PWR_Regulator value */
  tmpreg |= PWR_Regulator;
 8004af0:	4320      	orrs	r0, r4
  
  /* Store the new value */
  PWR->CR = tmpreg;
 8004af2:	6010      	str	r0, [r2, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 8004af4:	691a      	ldr	r2, [r3, #16]
  
  /* Select STOP mode entry --------------------------------------------------*/
  if(PWR_STOPEntry == PWR_STOPEntry_WFI)
 8004af6:	2901      	cmp	r1, #1
  
  /* Store the new value */
  PWR->CR = tmpreg;
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 8004af8:	f042 0204 	orr.w	r2, r2, #4
 8004afc:	611a      	str	r2, [r3, #16]
  
  /* Select STOP mode entry --------------------------------------------------*/
  if(PWR_STOPEntry == PWR_STOPEntry_WFI)
 8004afe:	d00a      	beq.n	8004b16 <PWR_EnterSTOPMode+0x3e>
    Wait For Event is a hint instruction that permits the processor to enter
    a low-power state until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) static __INLINE void __WFE(void)
{
  __ASM volatile ("wfe");
 8004b00:	bf20      	wfe
  {
    /* Request Wait For Event */
    __WFE();
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);  
 8004b02:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8004b06:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8004b0a:	691a      	ldr	r2, [r3, #16]
 8004b0c:	f022 0204 	bic.w	r2, r2, #4
 8004b10:	611a      	str	r2, [r3, #16]
}
 8004b12:	bc10      	pop	{r4}
 8004b14:	4770      	bx	lr
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) static __INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 8004b16:	bf30      	wfi
 8004b18:	e7f3      	b.n	8004b02 <PWR_EnterSTOPMode+0x2a>
 8004b1a:	bf00      	nop

08004b1c <PWR_EnterSTANDBYMode>:
  * @retval None
  */
void PWR_EnterSTANDBYMode(void)
{
  /* Clear Wakeup flag */
  PWR->CR |= PWR_CR_CWUF;
 8004b1c:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8004b20:	f2c4 0300 	movt	r3, #16384	; 0x4000
  
  /* Select STANDBY mode */
  PWR->CR |= PWR_CR_PDDS;
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 8004b24:	f44f 426d 	mov.w	r2, #60672	; 0xed00
  * @retval None
  */
void PWR_EnterSTANDBYMode(void)
{
  /* Clear Wakeup flag */
  PWR->CR |= PWR_CR_CWUF;
 8004b28:	6819      	ldr	r1, [r3, #0]
 8004b2a:	f041 0104 	orr.w	r1, r1, #4
 8004b2e:	6019      	str	r1, [r3, #0]
  
  /* Select STANDBY mode */
  PWR->CR |= PWR_CR_PDDS;
 8004b30:	6819      	ldr	r1, [r3, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 8004b32:	f2ce 0200 	movt	r2, #57344	; 0xe000
{
  /* Clear Wakeup flag */
  PWR->CR |= PWR_CR_CWUF;
  
  /* Select STANDBY mode */
  PWR->CR |= PWR_CR_PDDS;
 8004b36:	f041 0102 	orr.w	r1, r1, #2
 8004b3a:	6019      	str	r1, [r3, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 8004b3c:	6913      	ldr	r3, [r2, #16]
 8004b3e:	f043 0304 	orr.w	r3, r3, #4
 8004b42:	6113      	str	r3, [r2, #16]
 8004b44:	bf30      	wfi
#if defined ( __CC_ARM   )
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
}
 8004b46:	4770      	bx	lr

08004b48 <PWR_GetFlagStatus>:
  FlagStatus bitstatus = RESET;
  
  /* Check the parameters */
  assert_param(IS_PWR_GET_FLAG(PWR_FLAG));
  
  if ((PWR->CSR & PWR_FLAG) != (uint32_t)RESET)
 8004b48:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8004b4c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004b50:	685b      	ldr	r3, [r3, #4]
  {
    bitstatus = SET;
 8004b52:	4218      	tst	r0, r3
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
}
 8004b54:	bf0c      	ite	eq
 8004b56:	2000      	moveq	r0, #0
 8004b58:	2001      	movne	r0, #1
 8004b5a:	4770      	bx	lr

08004b5c <PWR_ClearFlag>:
void PWR_ClearFlag(uint32_t PWR_FLAG)
{
  /* Check the parameters */
  assert_param(IS_PWR_CLEAR_FLAG(PWR_FLAG));
         
  PWR->CR |=  PWR_FLAG << 2;
 8004b5c:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8004b60:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	ea42 0280 	orr.w	r2, r2, r0, lsl #2
 8004b6a:	601a      	str	r2, [r3, #0]
}
 8004b6c:	4770      	bx	lr
 8004b6e:	bf00      	nop

08004b70 <RCC_DeInit>:
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004b70:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8004b74:	f2c4 0302 	movt	r3, #16386	; 0x4002

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004b78:	2200      	movs	r2, #0
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004b7a:	6819      	ldr	r1, [r3, #0]
 8004b7c:	f041 0101 	orr.w	r1, r1, #1
 8004b80:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004b82:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004b84:	6818      	ldr	r0, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004b86:	f243 0110 	movw	r1, #12304	; 0x3010

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004b8a:	f020 7084 	bic.w	r0, r0, #17301504	; 0x1080000

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004b8e:	f2c2 4100 	movt	r1, #9216	; 0x2400

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004b92:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8004b96:	6018      	str	r0, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004b98:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004b9a:	6819      	ldr	r1, [r3, #0]
 8004b9c:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8004ba0:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004ba2:	60da      	str	r2, [r3, #12]
}
 8004ba4:	4770      	bx	lr
 8004ba6:	bf00      	nop

08004ba8 <RCC_HSEConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 8004ba8:	f643 0302 	movw	r3, #14338	; 0x3802
 8004bac:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 8004bb4:	7018      	strb	r0, [r3, #0]
}
 8004bb6:	4770      	bx	lr

08004bb8 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8004bb8:	b082      	sub	sp, #8

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 8004bba:	f44f 5160 	mov.w	r1, #14336	; 0x3800
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
  __IO uint32_t startupcounter = 0;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	9301      	str	r3, [sp, #4]

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 8004bc2:	f2c4 0102 	movt	r1, #16386	; 0x4002
 8004bc6:	680a      	ldr	r2, [r1, #0]
  FlagStatus hsestatus = RESET;
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    startupcounter++;
 8004bc8:	9b01      	ldr	r3, [sp, #4]
 8004bca:	3301      	adds	r3, #1
 8004bcc:	9301      	str	r3, [sp, #4]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 8004bce:	9b01      	ldr	r3, [sp, #4]
 8004bd0:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004bd4:	d001      	beq.n	8004bda <RCC_WaitForHSEStartUp+0x22>
 8004bd6:	0393      	lsls	r3, r2, #14
 8004bd8:	d5f5      	bpl.n	8004bc6 <RCC_WaitForHSEStartUp+0xe>

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 8004bda:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8004bde:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004be2:	6818      	ldr	r0, [r3, #0]
  else
  {
    status = ERROR;
  }
  return (status);
}
 8004be4:	f3c0 4040 	ubfx	r0, r0, #17, #1
 8004be8:	b002      	add	sp, #8
 8004bea:	4770      	bx	lr

08004bec <RCC_AdjustHSICalibrationValue>:
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
 8004bec:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8004bf0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004bf4:	681a      	ldr	r2, [r3, #0]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 8004bf6:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 8004bfa:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3

  /* Store the new value */
  RCC->CR = tmpreg;
 8004bfe:	601a      	str	r2, [r3, #0]
}
 8004c00:	4770      	bx	lr
 8004c02:	bf00      	nop

08004c04 <RCC_HSICmd>:
void RCC_HSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 8004c04:	2300      	movs	r3, #0
 8004c06:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8004c0a:	6018      	str	r0, [r3, #0]
}
 8004c0c:	4770      	bx	lr
 8004c0e:	bf00      	nop

08004c10 <RCC_LSEConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8004c10:	f643 0370 	movw	r3, #14448	; 0x3870
 8004c14:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004c18:	2200      	movs	r2, #0

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 8004c1a:	2801      	cmp	r0, #1
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8004c1c:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8004c1e:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 8004c20:	d004      	beq.n	8004c2c <RCC_LSEConfig+0x1c>
 8004c22:	2804      	cmp	r0, #4
 8004c24:	d101      	bne.n	8004c2a <RCC_LSEConfig+0x1a>
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
      break;
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 8004c26:	2205      	movs	r2, #5
 8004c28:	701a      	strb	r2, [r3, #0]
 8004c2a:	4770      	bx	lr
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 8004c2c:	7018      	strb	r0, [r3, #0]
      break;
 8004c2e:	4770      	bx	lr

08004c30 <RCC_LSICmd>:
void RCC_LSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 8004c30:	f44f 6368 	mov.w	r3, #3712	; 0xe80
 8004c34:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8004c38:	6018      	str	r0, [r3, #0]
}
 8004c3a:	4770      	bx	lr

08004c3c <RCC_PLLConfig>:
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 8004c3c:	4301      	orrs	r1, r0
 8004c3e:	ea41 1282 	orr.w	r2, r1, r2, lsl #6
 8004c42:	9900      	ldr	r1, [sp, #0]
 8004c44:	085b      	lsrs	r3, r3, #1
 8004c46:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 8004c4a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004c4e:	3b01      	subs	r3, #1
 8004c50:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8004c54:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004c58:	6042      	str	r2, [r0, #4]
                 (PLLQ << 24);
}
 8004c5a:	4770      	bx	lr

08004c5c <RCC_PLLCmd>:
  */
void RCC_PLLCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 8004c5c:	2360      	movs	r3, #96	; 0x60
 8004c5e:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8004c62:	6018      	str	r0, [r3, #0]
}
 8004c64:	4770      	bx	lr
 8004c66:	bf00      	nop

08004c68 <RCC_PLLI2SConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
 8004c68:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8004c6c:	0180      	lsls	r0, r0, #6
 8004c6e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004c72:	ea40 7101 	orr.w	r1, r0, r1, lsl #28
 8004c76:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
}
 8004c7a:	4770      	bx	lr

08004c7c <RCC_PLLI2SCmd>:
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 8004c7c:	2368      	movs	r3, #104	; 0x68
 8004c7e:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8004c82:	6018      	str	r0, [r3, #0]
}
 8004c84:	4770      	bx	lr
 8004c86:	bf00      	nop

08004c88 <RCC_ClockSecuritySystemCmd>:
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 8004c88:	234c      	movs	r3, #76	; 0x4c
 8004c8a:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8004c8e:	6018      	str	r0, [r3, #0]
}
 8004c90:	4770      	bx	lr
 8004c92:	bf00      	nop

08004c94 <RCC_MCO1Config>:
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
 8004c94:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8004c98:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004c9c:	689a      	ldr	r2, [r3, #8]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
 8004c9e:	f022 62ec 	bic.w	r2, r2, #123731968	; 0x7600000

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 8004ca2:	4302      	orrs	r2, r0
 8004ca4:	430a      	orrs	r2, r1

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 8004ca6:	609a      	str	r2, [r3, #8]
}
 8004ca8:	4770      	bx	lr
 8004caa:	bf00      	nop

08004cac <RCC_MCO2Config>:
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
 8004cac:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8004cb0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004cb4:	689a      	ldr	r2, [r3, #8]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
 8004cb6:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 8004cba:	4302      	orrs	r2, r0
 8004cbc:	430a      	orrs	r2, r1

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 8004cbe:	609a      	str	r2, [r3, #8]
}
 8004cc0:	4770      	bx	lr
 8004cc2:	bf00      	nop

08004cc4 <RCC_SYSCLKConfig>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 8004cc4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8004cc8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004ccc:	689a      	ldr	r2, [r3, #8]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 8004cce:	f022 0203 	bic.w	r2, r2, #3

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8004cd2:	4302      	orrs	r2, r0

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8004cd4:	609a      	str	r2, [r3, #8]
}
 8004cd6:	4770      	bx	lr

08004cd8 <RCC_GetSYSCLKSource>:
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 8004cd8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8004cdc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004ce0:	6898      	ldr	r0, [r3, #8]
}
 8004ce2:	f000 000c 	and.w	r0, r0, #12
 8004ce6:	4770      	bx	lr

08004ce8 <RCC_HCLKConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 8004ce8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8004cec:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004cf0:	689a      	ldr	r2, [r3, #8]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 8004cf2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8004cf6:	4302      	orrs	r2, r0

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8004cf8:	609a      	str	r2, [r3, #8]
}
 8004cfa:	4770      	bx	lr

08004cfc <RCC_PCLK1Config>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8004cfc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8004d00:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004d04:	689a      	ldr	r2, [r3, #8]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 8004d06:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8004d0a:	4302      	orrs	r2, r0

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8004d0c:	609a      	str	r2, [r3, #8]
}
 8004d0e:	4770      	bx	lr

08004d10 <RCC_PCLK2Config>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8004d10:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8004d14:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004d18:	689a      	ldr	r2, [r3, #8]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 8004d1a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 8004d1e:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8004d22:	609a      	str	r2, [r3, #8]
}
 8004d24:	4770      	bx	lr
 8004d26:	bf00      	nop

08004d28 <RCC_GetClocksFreq>:
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8004d28:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8004d2c:	f2c4 0302 	movt	r3, #16386	; 0x4002
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8004d30:	b410      	push	{r4}
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8004d32:	689a      	ldr	r2, [r3, #8]
 8004d34:	f002 020c 	and.w	r2, r2, #12

  switch (tmp)
 8004d38:	2a04      	cmp	r2, #4
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8004d3a:	bf02      	ittt	eq
 8004d3c:	f44f 5290 	moveq.w	r2, #4608	; 0x1200
 8004d40:	f2c0 027a 	movteq	r2, #122	; 0x7a
 8004d44:	6002      	streq	r2, [r0, #0]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;

  switch (tmp)
 8004d46:	d006      	beq.n	8004d56 <RCC_GetClocksFreq+0x2e>
 8004d48:	2a08      	cmp	r2, #8
 8004d4a:	d01e      	beq.n	8004d8a <RCC_GetClocksFreq+0x62>

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
      break;
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8004d4c:	f44f 5210 	mov.w	r2, #9216	; 0x2400
 8004d50:	f2c0 02f4 	movt	r2, #244	; 0xf4
 8004d54:	6002      	str	r2, [r0, #0]
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8004d56:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8004d5a:	f2c4 0302 	movt	r3, #16386	; 0x4002
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];
 8004d5e:	491c      	ldr	r1, [pc, #112]	; (8004dd0 <RCC_GetClocksFreq+0xa8>)
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8004d60:	689c      	ldr	r4, [r3, #8]
  tmp = tmp >> 4;
 8004d62:	f3c4 1403 	ubfx	r4, r4, #4, #4
  presc = APBAHBPrescTable[tmp];
 8004d66:	5d0c      	ldrb	r4, [r1, r4]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8004d68:	40e2      	lsrs	r2, r4
 8004d6a:	6042      	str	r2, [r0, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8004d6c:	689c      	ldr	r4, [r3, #8]
  tmp = tmp >> 10;
 8004d6e:	f3c4 2482 	ubfx	r4, r4, #10, #3
  presc = APBAHBPrescTable[tmp];
 8004d72:	5d0c      	ldrb	r4, [r1, r4]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8004d74:	fa32 f404 	lsrs.w	r4, r2, r4
 8004d78:	6084      	str	r4, [r0, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8004d7a:	689b      	ldr	r3, [r3, #8]
  tmp = tmp >> 13;
 8004d7c:	f3c3 3342 	ubfx	r3, r3, #13, #3
  presc = APBAHBPrescTable[tmp];
 8004d80:	5ccb      	ldrb	r3, [r1, r3]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8004d82:	40da      	lsrs	r2, r3
 8004d84:	60c2      	str	r2, [r0, #12]
}
 8004d86:	bc10      	pop	{r4}
 8004d88:	4770      	bx	lr
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8004d8a:	685c      	ldr	r4, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d8c:	6859      	ldr	r1, [r3, #4]
      
      if (pllsource != 0)
 8004d8e:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8004d92:	685c      	ldr	r4, [r3, #4]
 8004d94:	bf15      	itete	ne
 8004d96:	f44f 5390 	movne.w	r3, #4608	; 0x1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8004d9a:	f44f 5310 	moveq.w	r3, #9216	; 0x2400
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8004d9e:	f2c0 037a 	movtne	r3, #122	; 0x7a
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8004da2:	f2c0 03f4 	movteq	r3, #244	; 0xf4

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004da6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8004daa:	fbb3 f2f1 	udiv	r2, r3, r1
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8004dae:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8004db2:	f2c4 0302 	movt	r3, #16386	; 0x4002
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8004db6:	f3c4 1488 	ubfx	r4, r4, #6, #9
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8004dc0:	3301      	adds	r3, #1
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8004dc2:	fb02 f204 	mul.w	r2, r2, r4
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8004dc6:	005b      	lsls	r3, r3, #1
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8004dc8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004dcc:	6002      	str	r2, [r0, #0]
      break;
 8004dce:	e7c2      	b.n	8004d56 <RCC_GetClocksFreq+0x2e>
 8004dd0:	20000074 	.word	0x20000074

08004dd4 <RCC_RTCCLKConfig>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 8004dd4:	f400 7340 	and.w	r3, r0, #768	; 0x300
 8004dd8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ddc:	d10c      	bne.n	8004df8 <RCC_RTCCLKConfig+0x24>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 8004dde:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8004de2:	f2c4 0302 	movt	r3, #16386	; 0x4002

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8004de6:	f020 4170 	bic.w	r1, r0, #4026531840	; 0xf0000000
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 8004dea:	689a      	ldr	r2, [r3, #8]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8004dec:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
 8004df0:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8004df4:	430a      	orrs	r2, r1

    /* Store the new value */
    RCC->CFGR = tmpreg;
 8004df6:	609a      	str	r2, [r3, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 8004df8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8004dfc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004e00:	0500      	lsls	r0, r0, #20
 8004e02:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004e04:	0d00      	lsrs	r0, r0, #20
 8004e06:	4310      	orrs	r0, r2
 8004e08:	6718      	str	r0, [r3, #112]	; 0x70
}
 8004e0a:	4770      	bx	lr

08004e0c <RCC_RTCCLKCmd>:
void RCC_RTCCLKCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 8004e0c:	f640 633c 	movw	r3, #3644	; 0xe3c
 8004e10:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8004e14:	6018      	str	r0, [r3, #0]
}
 8004e16:	4770      	bx	lr

08004e18 <RCC_BackupResetCmd>:
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 8004e18:	f44f 6364 	mov.w	r3, #3648	; 0xe40
 8004e1c:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8004e20:	6018      	str	r0, [r3, #0]
}
 8004e22:	4770      	bx	lr

08004e24 <RCC_I2SCLKConfig>:
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 8004e24:	f44f 73ae 	mov.w	r3, #348	; 0x15c
 8004e28:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8004e2c:	6018      	str	r0, [r3, #0]
}
 8004e2e:	4770      	bx	lr

08004e30 <RCC_AHB1PeriphClockCmd>:
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8004e30:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8004e34:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004e38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004e3a:	b919      	cbnz	r1, 8004e44 <RCC_AHB1PeriphClockCmd+0x14>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8004e3c:	ea22 0000 	bic.w	r0, r2, r0
 8004e40:	6318      	str	r0, [r3, #48]	; 0x30
 8004e42:	4770      	bx	lr
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8004e44:	4310      	orrs	r0, r2
 8004e46:	6318      	str	r0, [r3, #48]	; 0x30
 8004e48:	4770      	bx	lr
 8004e4a:	bf00      	nop

08004e4c <RCC_AHB2PeriphClockCmd>:
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 8004e4c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8004e50:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004e54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004e56:	b919      	cbnz	r1, 8004e60 <RCC_AHB2PeriphClockCmd+0x14>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
 8004e58:	ea22 0000 	bic.w	r0, r2, r0
 8004e5c:	6358      	str	r0, [r3, #52]	; 0x34
 8004e5e:	4770      	bx	lr
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 8004e60:	4310      	orrs	r0, r2
 8004e62:	6358      	str	r0, [r3, #52]	; 0x34
 8004e64:	4770      	bx	lr
 8004e66:	bf00      	nop

08004e68 <RCC_AHB3PeriphClockCmd>:
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 8004e68:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8004e6c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004e70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004e72:	b919      	cbnz	r1, 8004e7c <RCC_AHB3PeriphClockCmd+0x14>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
 8004e74:	ea22 0000 	bic.w	r0, r2, r0
 8004e78:	6398      	str	r0, [r3, #56]	; 0x38
 8004e7a:	4770      	bx	lr
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 8004e7c:	4310      	orrs	r0, r2
 8004e7e:	6398      	str	r0, [r3, #56]	; 0x38
 8004e80:	4770      	bx	lr
 8004e82:	bf00      	nop

08004e84 <RCC_APB1PeriphClockCmd>:
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8004e84:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8004e88:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004e8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004e8e:	b919      	cbnz	r1, 8004e98 <RCC_APB1PeriphClockCmd+0x14>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8004e90:	ea22 0000 	bic.w	r0, r2, r0
 8004e94:	6418      	str	r0, [r3, #64]	; 0x40
 8004e96:	4770      	bx	lr
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8004e98:	4310      	orrs	r0, r2
 8004e9a:	6418      	str	r0, [r3, #64]	; 0x40
 8004e9c:	4770      	bx	lr
 8004e9e:	bf00      	nop

08004ea0 <RCC_APB2PeriphClockCmd>:
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8004ea0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8004ea4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004ea8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004eaa:	b919      	cbnz	r1, 8004eb4 <RCC_APB2PeriphClockCmd+0x14>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8004eac:	ea22 0000 	bic.w	r0, r2, r0
 8004eb0:	6458      	str	r0, [r3, #68]	; 0x44
 8004eb2:	4770      	bx	lr
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8004eb4:	4310      	orrs	r0, r2
 8004eb6:	6458      	str	r0, [r3, #68]	; 0x44
 8004eb8:	4770      	bx	lr
 8004eba:	bf00      	nop

08004ebc <RCC_AHB1PeriphResetCmd>:
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 8004ebc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8004ec0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004ec4:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004ec6:	b919      	cbnz	r1, 8004ed0 <RCC_AHB1PeriphResetCmd+0x14>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 8004ec8:	ea22 0000 	bic.w	r0, r2, r0
 8004ecc:	6118      	str	r0, [r3, #16]
 8004ece:	4770      	bx	lr
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 8004ed0:	4310      	orrs	r0, r2
 8004ed2:	6118      	str	r0, [r3, #16]
 8004ed4:	4770      	bx	lr
 8004ed6:	bf00      	nop

08004ed8 <RCC_AHB2PeriphResetCmd>:
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 8004ed8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8004edc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004ee0:	695a      	ldr	r2, [r3, #20]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004ee2:	b919      	cbnz	r1, 8004eec <RCC_AHB2PeriphResetCmd+0x14>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 8004ee4:	ea22 0000 	bic.w	r0, r2, r0
 8004ee8:	6158      	str	r0, [r3, #20]
 8004eea:	4770      	bx	lr
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 8004eec:	4310      	orrs	r0, r2
 8004eee:	6158      	str	r0, [r3, #20]
 8004ef0:	4770      	bx	lr
 8004ef2:	bf00      	nop

08004ef4 <RCC_AHB3PeriphResetCmd>:
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 8004ef4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8004ef8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004efc:	699a      	ldr	r2, [r3, #24]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004efe:	b919      	cbnz	r1, 8004f08 <RCC_AHB3PeriphResetCmd+0x14>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
 8004f00:	ea22 0000 	bic.w	r0, r2, r0
 8004f04:	6198      	str	r0, [r3, #24]
 8004f06:	4770      	bx	lr
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 8004f08:	4310      	orrs	r0, r2
 8004f0a:	6198      	str	r0, [r3, #24]
 8004f0c:	4770      	bx	lr
 8004f0e:	bf00      	nop

08004f10 <RCC_APB1PeriphResetCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8004f10:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8004f14:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004f18:	6a1a      	ldr	r2, [r3, #32]
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004f1a:	b919      	cbnz	r1, 8004f24 <RCC_APB1PeriphResetCmd+0x14>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8004f1c:	ea22 0000 	bic.w	r0, r2, r0
 8004f20:	6218      	str	r0, [r3, #32]
 8004f22:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8004f24:	4310      	orrs	r0, r2
 8004f26:	6218      	str	r0, [r3, #32]
 8004f28:	4770      	bx	lr
 8004f2a:	bf00      	nop

08004f2c <RCC_APB2PeriphResetCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8004f2c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8004f30:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004f34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004f36:	b919      	cbnz	r1, 8004f40 <RCC_APB2PeriphResetCmd+0x14>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8004f38:	ea22 0000 	bic.w	r0, r2, r0
 8004f3c:	6258      	str	r0, [r3, #36]	; 0x24
 8004f3e:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8004f40:	4310      	orrs	r0, r2
 8004f42:	6258      	str	r0, [r3, #36]	; 0x24
 8004f44:	4770      	bx	lr
 8004f46:	bf00      	nop

08004f48 <RCC_AHB1PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 8004f48:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8004f4c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004f50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004f52:	b919      	cbnz	r1, 8004f5c <RCC_AHB1PeriphClockLPModeCmd+0x14>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
 8004f54:	ea22 0000 	bic.w	r0, r2, r0
 8004f58:	6518      	str	r0, [r3, #80]	; 0x50
 8004f5a:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 8004f5c:	4310      	orrs	r0, r2
 8004f5e:	6518      	str	r0, [r3, #80]	; 0x50
 8004f60:	4770      	bx	lr
 8004f62:	bf00      	nop

08004f64 <RCC_AHB2PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 8004f64:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8004f68:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004f6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004f6e:	b919      	cbnz	r1, 8004f78 <RCC_AHB2PeriphClockLPModeCmd+0x14>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
 8004f70:	ea22 0000 	bic.w	r0, r2, r0
 8004f74:	6558      	str	r0, [r3, #84]	; 0x54
 8004f76:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 8004f78:	4310      	orrs	r0, r2
 8004f7a:	6558      	str	r0, [r3, #84]	; 0x54
 8004f7c:	4770      	bx	lr
 8004f7e:	bf00      	nop

08004f80 <RCC_AHB3PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 8004f80:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8004f84:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004f88:	6d9a      	ldr	r2, [r3, #88]	; 0x58
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004f8a:	b919      	cbnz	r1, 8004f94 <RCC_AHB3PeriphClockLPModeCmd+0x14>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
 8004f8c:	ea22 0000 	bic.w	r0, r2, r0
 8004f90:	6598      	str	r0, [r3, #88]	; 0x58
 8004f92:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 8004f94:	4310      	orrs	r0, r2
 8004f96:	6598      	str	r0, [r3, #88]	; 0x58
 8004f98:	4770      	bx	lr
 8004f9a:	bf00      	nop

08004f9c <RCC_APB1PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 8004f9c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8004fa0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004fa4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004fa6:	b919      	cbnz	r1, 8004fb0 <RCC_APB1PeriphClockLPModeCmd+0x14>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
 8004fa8:	ea22 0000 	bic.w	r0, r2, r0
 8004fac:	6618      	str	r0, [r3, #96]	; 0x60
 8004fae:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 8004fb0:	4310      	orrs	r0, r2
 8004fb2:	6618      	str	r0, [r3, #96]	; 0x60
 8004fb4:	4770      	bx	lr
 8004fb6:	bf00      	nop

08004fb8 <RCC_APB2PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 8004fb8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8004fbc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004fc0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004fc2:	b919      	cbnz	r1, 8004fcc <RCC_APB2PeriphClockLPModeCmd+0x14>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
 8004fc4:	ea22 0000 	bic.w	r0, r2, r0
 8004fc8:	6658      	str	r0, [r3, #100]	; 0x64
 8004fca:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 8004fcc:	4310      	orrs	r0, r2
 8004fce:	6658      	str	r0, [r3, #100]	; 0x64
 8004fd0:	4770      	bx	lr
 8004fd2:	bf00      	nop

08004fd4 <RCC_ITConfig>:
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8004fd4:	f643 030d 	movw	r3, #14349	; 0x380d
 8004fd8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004fdc:	781a      	ldrb	r2, [r3, #0]
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004fde:	b919      	cbnz	r1, 8004fe8 <RCC_ITConfig+0x14>
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
  }
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 8004fe0:	ea22 0000 	bic.w	r0, r2, r0
 8004fe4:	7018      	strb	r0, [r3, #0]
 8004fe6:	4770      	bx	lr
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8004fe8:	4310      	orrs	r0, r2
 8004fea:	7018      	strb	r0, [r3, #0]
 8004fec:	4770      	bx	lr
 8004fee:	bf00      	nop

08004ff0 <RCC_GetFlagStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8004ff0:	0943      	lsrs	r3, r0, #5
  if (tmp == 1)               /* The flag to check is in CR register */
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d00e      	beq.n	8005014 <RCC_GetFlagStatus+0x24>
  {
    statusreg = RCC->CR;
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8004ff6:	2b02      	cmp	r3, #2
  {
    statusreg = RCC->BDCR;
 8004ff8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8004ffc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005000:	bf0c      	ite	eq
 8005002:	6f1b      	ldreq	r3, [r3, #112]	; 0x70
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8005004:	6f5b      	ldrne	r3, [r3, #116]	; 0x74
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 8005006:	f000 001f 	and.w	r0, r0, #31
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 800500a:	fa33 f000 	lsrs.w	r0, r3, r0
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
}
 800500e:	f000 0001 	and.w	r0, r0, #1
 8005012:	4770      	bx	lr

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 8005014:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8005018:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	e7f2      	b.n	8005006 <RCC_GetFlagStatus+0x16>

08005020 <RCC_ClearFlag>:
  * @retval None
  */
void RCC_ClearFlag(void)
{
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 8005020:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8005024:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005028:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800502a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800502e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005030:	4770      	bx	lr
 8005032:	bf00      	nop

08005034 <RCC_GetITStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 8005034:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8005038:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800503c:	68db      	ldr	r3, [r3, #12]
  {
    bitstatus = SET;
 800503e:	4218      	tst	r0, r3
  {
    bitstatus = RESET;
  }
  /* Return the RCC_IT status */
  return  bitstatus;
}
 8005040:	bf0c      	ite	eq
 8005042:	2000      	moveq	r0, #0
 8005044:	2001      	movne	r0, #1
 8005046:	4770      	bx	lr

08005048 <RCC_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 8005048:	f643 030e 	movw	r3, #14350	; 0x380e
 800504c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005050:	7018      	strb	r0, [r3, #0]
}
 8005052:	4770      	bx	lr

08005054 <RNG_DeInit>:
  * @brief  Deinitializes the RNG peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void RNG_DeInit(void)
{
 8005054:	b508      	push	{r3, lr}
  /* Enable RNG reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, ENABLE);
 8005056:	2040      	movs	r0, #64	; 0x40
 8005058:	2101      	movs	r1, #1
 800505a:	f7ff ff3d 	bl	8004ed8 <RCC_AHB2PeriphResetCmd>

  /* Release RNG from reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, DISABLE);
 800505e:	2040      	movs	r0, #64	; 0x40
 8005060:	2100      	movs	r1, #0
}
 8005062:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* Enable RNG reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, ENABLE);

  /* Release RNG from reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, DISABLE);
 8005066:	f7ff bf37 	b.w	8004ed8 <RCC_AHB2PeriphResetCmd>
 800506a:	bf00      	nop

0800506c <RNG_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the RNG */
    RNG->CR |= RNG_CR_RNGEN;
 800506c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005070:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8005074:	681a      	ldr	r2, [r3, #0]
void RNG_Cmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005076:	b918      	cbnz	r0, 8005080 <RNG_Cmd+0x14>
    RNG->CR |= RNG_CR_RNGEN;
  }
  else
  {
    /* Disable the RNG */
    RNG->CR &= ~RNG_CR_RNGEN;
 8005078:	f022 0204 	bic.w	r2, r2, #4
 800507c:	601a      	str	r2, [r3, #0]
 800507e:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the RNG */
    RNG->CR |= RNG_CR_RNGEN;
 8005080:	f042 0204 	orr.w	r2, r2, #4
 8005084:	601a      	str	r2, [r3, #0]
 8005086:	4770      	bx	lr

08005088 <RNG_GetRandomNumber>:
  * @retval 32-bit random number.
  */
uint32_t RNG_GetRandomNumber(void)
{
  /* Return the 32 bit random number from the DR register */
  return RNG->DR;
 8005088:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800508c:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8005090:	6898      	ldr	r0, [r3, #8]
}
 8005092:	4770      	bx	lr

08005094 <RNG_ITConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the RNG interrupt */
    RNG->CR |= RNG_CR_IE;
 8005094:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005098:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800509c:	681a      	ldr	r2, [r3, #0]
void RNG_ITConfig(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800509e:	b918      	cbnz	r0, 80050a8 <RNG_ITConfig+0x14>
    RNG->CR |= RNG_CR_IE;
  }
  else
  {
    /* Disable the RNG interrupt */
    RNG->CR &= ~RNG_CR_IE;
 80050a0:	f022 0208 	bic.w	r2, r2, #8
 80050a4:	601a      	str	r2, [r3, #0]
 80050a6:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the RNG interrupt */
    RNG->CR |= RNG_CR_IE;
 80050a8:	f042 0208 	orr.w	r2, r2, #8
 80050ac:	601a      	str	r2, [r3, #0]
 80050ae:	4770      	bx	lr

080050b0 <RNG_GetFlagStatus>:
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_RNG_GET_FLAG(RNG_FLAG));

  /* Check the status of the specified RNG flag */
  if ((RNG->SR & RNG_FLAG) != (uint8_t)RESET)
 80050b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80050b4:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80050b8:	685b      	ldr	r3, [r3, #4]
  {
    /* RNG_FLAG is set */
    bitstatus = SET;
 80050ba:	4218      	tst	r0, r3
    /* RNG_FLAG is reset */
    bitstatus = RESET;
  }
  /* Return the RNG_FLAG status */
  return  bitstatus;
}
 80050bc:	bf0c      	ite	eq
 80050be:	2000      	moveq	r0, #0
 80050c0:	2001      	movne	r0, #1
 80050c2:	4770      	bx	lr

080050c4 <RNG_ClearFlag>:
void RNG_ClearFlag(uint8_t RNG_FLAG)
{
  /* Check the parameters */
  assert_param(IS_RNG_CLEAR_FLAG(RNG_FLAG));
  /* Clear the selected RNG flags */
  RNG->SR = ~(uint32_t)(((uint32_t)RNG_FLAG) << 4);
 80050c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80050c8:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80050cc:	ea6f 1000 	mvn.w	r0, r0, lsl #4
 80050d0:	6058      	str	r0, [r3, #4]
}
 80050d2:	4770      	bx	lr

080050d4 <RNG_GetITStatus>:
  ITStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_RNG_GET_IT(RNG_IT));

  /* Check the status of the specified RNG interrupt */
  if ((RNG->SR & RNG_IT) != (uint8_t)RESET)
 80050d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80050d8:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80050dc:	685b      	ldr	r3, [r3, #4]
  {
    /* RNG_IT is set */
    bitstatus = SET;
 80050de:	4218      	tst	r0, r3
    /* RNG_IT is reset */
    bitstatus = RESET;
  }
  /* Return the RNG_IT status */
  return bitstatus;
}
 80050e0:	bf0c      	ite	eq
 80050e2:	2000      	moveq	r0, #0
 80050e4:	2001      	movne	r0, #1
 80050e6:	4770      	bx	lr

080050e8 <RNG_ClearITPendingBit>:
{
  /* Check the parameters */
  assert_param(IS_RNG_IT(RNG_IT));

  /* Clear the selected RNG interrupt pending bit */
  RNG->SR = (uint8_t)~RNG_IT;
 80050e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80050ec:	43c0      	mvns	r0, r0
 80050ee:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80050f2:	b2c0      	uxtb	r0, r0
 80050f4:	6058      	str	r0, [r3, #4]
}
 80050f6:	4770      	bx	lr

080050f8 <RTC_StructInit>:
    
  /* Initialize the RTC_AsynchPrediv member */
  RTC_InitStruct->RTC_AsynchPrediv = (uint32_t)0x7F;

  /* Initialize the RTC_SynchPrediv member */
  RTC_InitStruct->RTC_SynchPrediv = (uint32_t)0xFF; 
 80050f8:	2100      	movs	r1, #0
 80050fa:	227f      	movs	r2, #127	; 0x7f
 80050fc:	23ff      	movs	r3, #255	; 0xff
 80050fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
}
 8005102:	4770      	bx	lr

08005104 <RTC_WriteProtectionCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
  {
    /* Enable the write protection for RTC registers */
    RTC->WPR = 0xFF;   
 8005104:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8005108:	f2c4 0300 	movt	r3, #16384	; 0x4000
void RTC_WriteProtectionCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 800510c:	b920      	cbnz	r0, 8005118 <RTC_WriteProtectionCmd+0x14>
    RTC->WPR = 0xFF;   
  }
  else
  {
    /* Disable the write protection for RTC registers */
    RTC->WPR = 0xCA;
 800510e:	22ca      	movs	r2, #202	; 0xca
 8005110:	625a      	str	r2, [r3, #36]	; 0x24
    RTC->WPR = 0x53;    
 8005112:	2253      	movs	r2, #83	; 0x53
 8005114:	625a      	str	r2, [r3, #36]	; 0x24
 8005116:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
  {
    /* Enable the write protection for RTC registers */
    RTC->WPR = 0xFF;   
 8005118:	22ff      	movs	r2, #255	; 0xff
 800511a:	625a      	str	r2, [r3, #36]	; 0x24
 800511c:	4770      	bx	lr
 800511e:	bf00      	nop

08005120 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode  
  */
ErrorStatus RTC_EnterInitMode(void)
{
 8005120:	b082      	sub	sp, #8
  __IO uint32_t initcounter = 0x00;
  ErrorStatus status = ERROR;
  uint32_t initstatus = 0x00;
     
  /* Check if the Initialization mode is set */
  if ((RTC->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005122:	f44f 5120 	mov.w	r1, #10240	; 0x2800
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode  
  */
ErrorStatus RTC_EnterInitMode(void)
{
  __IO uint32_t initcounter = 0x00;
 8005126:	2300      	movs	r3, #0
  ErrorStatus status = ERROR;
  uint32_t initstatus = 0x00;
     
  /* Check if the Initialization mode is set */
  if ((RTC->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005128:	f2c4 0100 	movt	r1, #16384	; 0x4000
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode  
  */
ErrorStatus RTC_EnterInitMode(void)
{
  __IO uint32_t initcounter = 0x00;
 800512c:	9301      	str	r3, [sp, #4]
  ErrorStatus status = ERROR;
  uint32_t initstatus = 0x00;
     
  /* Check if the Initialization mode is set */
  if ((RTC->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800512e:	68cb      	ldr	r3, [r1, #12]
 8005130:	065b      	lsls	r3, r3, #25
 8005132:	d416      	bmi.n	8005162 <RTC_EnterInitMode+0x42>
  {
    /* Set the Initialization mode */
    RTC->ISR = (uint32_t)RTC_INIT_MASK;
 8005134:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005138:	60cb      	str	r3, [r1, #12]
 800513a:	e001      	b.n	8005140 <RTC_EnterInitMode+0x20>
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    do
    {
      initstatus = RTC->ISR & RTC_ISR_INITF;
      initcounter++;  
    } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 800513c:	0650      	lsls	r0, r2, #25
 800513e:	d407      	bmi.n	8005150 <RTC_EnterInitMode+0x30>
    RTC->ISR = (uint32_t)RTC_INIT_MASK;
    
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    do
    {
      initstatus = RTC->ISR & RTC_ISR_INITF;
 8005140:	68ca      	ldr	r2, [r1, #12]
      initcounter++;  
 8005142:	9b01      	ldr	r3, [sp, #4]
 8005144:	3301      	adds	r3, #1
 8005146:	9301      	str	r3, [sp, #4]
    } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 8005148:	9b01      	ldr	r3, [sp, #4]
 800514a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800514e:	d1f5      	bne.n	800513c <RTC_EnterInitMode+0x1c>
    
    if ((RTC->ISR & RTC_ISR_INITF) != RESET)
 8005150:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8005154:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8005158:	68d8      	ldr	r0, [r3, #12]
    {
      status = SUCCESS;
 800515a:	f3c0 1080 	ubfx	r0, r0, #6, #1
  {
    status = SUCCESS;  
  } 
    
  return (status);  
}
 800515e:	b002      	add	sp, #8
 8005160:	4770      	bx	lr
      status = ERROR;
    }        
  }
  else
  {
    status = SUCCESS;  
 8005162:	2001      	movs	r0, #1
 8005164:	e7fb      	b.n	800515e <RTC_EnterInitMode+0x3e>
 8005166:	bf00      	nop

08005168 <RTC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are initialized
  *          - ERROR: RTC registers are not initialized  
  */
ErrorStatus RTC_Init(RTC_InitTypeDef* RTC_InitStruct)
{
 8005168:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_RTC_HOUR_FORMAT(RTC_InitStruct->RTC_HourFormat));
  assert_param(IS_RTC_ASYNCH_PREDIV(RTC_InitStruct->RTC_AsynchPrediv));
  assert_param(IS_RTC_SYNCH_PREDIV(RTC_InitStruct->RTC_SynchPrediv));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800516a:	f44f 5420 	mov.w	r4, #10240	; 0x2800
 800516e:	f2c4 0400 	movt	r4, #16384	; 0x4000
 8005172:	23ca      	movs	r3, #202	; 0xca
 8005174:	6263      	str	r3, [r4, #36]	; 0x24
  RTC->WPR = 0x53;
 8005176:	2353      	movs	r3, #83	; 0x53
 8005178:	6263      	str	r3, [r4, #36]	; 0x24
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are initialized
  *          - ERROR: RTC registers are not initialized  
  */
ErrorStatus RTC_Init(RTC_InitTypeDef* RTC_InitStruct)
{
 800517a:	4605      	mov	r5, r0
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
  RTC->WPR = 0x53;

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 800517c:	f7ff ffd0 	bl	8005120 <RTC_EnterInitMode>
 8005180:	b198      	cbz	r0, 80051aa <RTC_Init+0x42>
    status = ERROR;
  } 
  else
  {
    /* Clear RTC CR FMT Bit */
    RTC->CR &= ((uint32_t)~(RTC_CR_FMT));
 8005182:	68a3      	ldr	r3, [r4, #8]
 8005184:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005188:	60a3      	str	r3, [r4, #8]
    /* Set RTC_CR register */
    RTC->CR |=  ((uint32_t)(RTC_InitStruct->RTC_HourFormat));
 800518a:	68a2      	ldr	r2, [r4, #8]
 800518c:	682b      	ldr	r3, [r5, #0]
 800518e:	4313      	orrs	r3, r2
 8005190:	60a3      	str	r3, [r4, #8]
  
    /* Configure the RTC PRER */
    RTC->PRER = (uint32_t)(RTC_InitStruct->RTC_SynchPrediv);
 8005192:	68ab      	ldr	r3, [r5, #8]
 8005194:	6123      	str	r3, [r4, #16]
    RTC->PRER |= (uint32_t)(RTC_InitStruct->RTC_AsynchPrediv << 16);
 8005196:	6923      	ldr	r3, [r4, #16]
 8005198:	686a      	ldr	r2, [r5, #4]
 800519a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800519e:	6123      	str	r3, [r4, #16]
  * @retval None
  */
void RTC_ExitInitMode(void)
{ 
  /* Exit Initialization mode */
  RTC->ISR &= (uint32_t)~RTC_ISR_INIT;  
 80051a0:	68e3      	ldr	r3, [r4, #12]
 80051a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051a6:	60e3      	str	r3, [r4, #12]
    RTC->PRER |= (uint32_t)(RTC_InitStruct->RTC_AsynchPrediv << 16);

    /* Exit Initialization mode */
    RTC_ExitInitMode();

    status = SUCCESS;    
 80051a8:	2001      	movs	r0, #1
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 80051aa:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80051ae:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80051b2:	22ff      	movs	r2, #255	; 0xff
 80051b4:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
}
 80051b6:	bd38      	pop	{r3, r4, r5, pc}

080051b8 <RTC_ExitInitMode>:
  * @retval None
  */
void RTC_ExitInitMode(void)
{ 
  /* Exit Initialization mode */
  RTC->ISR &= (uint32_t)~RTC_ISR_INIT;  
 80051b8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80051bc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80051c0:	68da      	ldr	r2, [r3, #12]
 80051c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80051c6:	60da      	str	r2, [r3, #12]
}
 80051c8:	4770      	bx	lr
 80051ca:	bf00      	nop

080051cc <RTC_WaitForSynchro>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are synchronised
  *          - ERROR: RTC registers are not synchronised
  */
ErrorStatus RTC_WaitForSynchro(void)
{
 80051cc:	b082      	sub	sp, #8
  __IO uint32_t synchrocounter = 0;
  ErrorStatus status = ERROR;
  uint32_t synchrostatus = 0x00;

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 80051ce:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 80051d2:	f2c4 0100 	movt	r1, #16384	; 0x4000
  *          - SUCCESS: RTC registers are synchronised
  *          - ERROR: RTC registers are not synchronised
  */
ErrorStatus RTC_WaitForSynchro(void)
{
  __IO uint32_t synchrocounter = 0;
 80051d6:	2300      	movs	r3, #0
 80051d8:	9301      	str	r3, [sp, #4]
  ErrorStatus status = ERROR;
  uint32_t synchrostatus = 0x00;

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 80051da:	23ca      	movs	r3, #202	; 0xca
 80051dc:	624b      	str	r3, [r1, #36]	; 0x24
  RTC->WPR = 0x53;
 80051de:	2353      	movs	r3, #83	; 0x53
 80051e0:	624b      	str	r3, [r1, #36]	; 0x24
    
  /* Clear RSF flag */
  RTC->ISR &= (uint32_t)RTC_RSF_MASK;
 80051e2:	68cb      	ldr	r3, [r1, #12]
 80051e4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80051e8:	60cb      	str	r3, [r1, #12]
 80051ea:	e001      	b.n	80051f0 <RTC_WaitForSynchro+0x24>
  /* Wait the registers to be synchronised */
  do
  {
    synchrostatus = RTC->ISR & RTC_ISR_RSF;
    synchrocounter++;  
  } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 80051ec:	0692      	lsls	r2, r2, #26
 80051ee:	d407      	bmi.n	8005200 <RTC_WaitForSynchro+0x34>
  RTC->ISR &= (uint32_t)RTC_RSF_MASK;
    
  /* Wait the registers to be synchronised */
  do
  {
    synchrostatus = RTC->ISR & RTC_ISR_RSF;
 80051f0:	68ca      	ldr	r2, [r1, #12]
    synchrocounter++;  
 80051f2:	9b01      	ldr	r3, [sp, #4]
 80051f4:	3301      	adds	r3, #1
 80051f6:	9301      	str	r3, [sp, #4]
  } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 80051f8:	9b01      	ldr	r3, [sp, #4]
 80051fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051fe:	d1f5      	bne.n	80051ec <RTC_WaitForSynchro+0x20>
    
  if ((RTC->ISR & RTC_ISR_RSF) != RESET)
 8005200:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8005204:	f2c4 0300 	movt	r3, #16384	; 0x4000
  {
    status = ERROR;
  }        

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8005208:	22ff      	movs	r2, #255	; 0xff
  {
    synchrostatus = RTC->ISR & RTC_ISR_RSF;
    synchrocounter++;  
  } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
    
  if ((RTC->ISR & RTC_ISR_RSF) != RESET)
 800520a:	68d8      	ldr	r0, [r3, #12]
  {
    status = ERROR;
  }        

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800520c:	625a      	str	r2, [r3, #36]	; 0x24
    
  return (status); 
}
 800520e:	f3c0 1040 	ubfx	r0, r0, #5, #1
 8005212:	b002      	add	sp, #8
 8005214:	4770      	bx	lr
 8005216:	bf00      	nop

08005218 <RTC_DeInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are deinitialized
  *          - ERROR: RTC registers are not deinitialized
  */
ErrorStatus RTC_DeInit(void)
{
 8005218:	b530      	push	{r4, r5, lr}
  __IO uint32_t wutcounter = 0x00;
  uint32_t wutwfstatus = 0x00;
  ErrorStatus status = ERROR;
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800521a:	f44f 5420 	mov.w	r4, #10240	; 0x2800
 800521e:	f2c4 0400 	movt	r4, #16384	; 0x4000
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are deinitialized
  *          - ERROR: RTC registers are not deinitialized
  */
ErrorStatus RTC_DeInit(void)
{
 8005222:	b083      	sub	sp, #12
  __IO uint32_t wutcounter = 0x00;
  uint32_t wutwfstatus = 0x00;
  ErrorStatus status = ERROR;
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8005224:	23ca      	movs	r3, #202	; 0xca
  *          - SUCCESS: RTC registers are deinitialized
  *          - ERROR: RTC registers are not deinitialized
  */
ErrorStatus RTC_DeInit(void)
{
  __IO uint32_t wutcounter = 0x00;
 8005226:	2500      	movs	r5, #0
 8005228:	9501      	str	r5, [sp, #4]
  uint32_t wutwfstatus = 0x00;
  ErrorStatus status = ERROR;
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800522a:	6263      	str	r3, [r4, #36]	; 0x24
  RTC->WPR = 0x53;
 800522c:	2353      	movs	r3, #83	; 0x53
 800522e:	6263      	str	r3, [r4, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 8005230:	f7ff ff76 	bl	8005120 <RTC_EnterInitMode>
 8005234:	b1d0      	cbz	r0, 800526c <RTC_DeInit+0x54>
  }  
  else
  {
    /* Reset TR, DR and CR registers */
    RTC->TR = (uint32_t)0x00000000;
    RTC->DR = (uint32_t)0x00002101;
 8005236:	f242 1301 	movw	r3, #8449	; 0x2101
    status = ERROR;
  }  
  else
  {
    /* Reset TR, DR and CR registers */
    RTC->TR = (uint32_t)0x00000000;
 800523a:	6025      	str	r5, [r4, #0]
    RTC->DR = (uint32_t)0x00002101;
 800523c:	6063      	str	r3, [r4, #4]
    /* Reset All CR bits except CR[2:0] */
    RTC->CR &= (uint32_t)0x00000007;
 800523e:	68a3      	ldr	r3, [r4, #8]
 8005240:	f003 0307 	and.w	r3, r3, #7
 8005244:	60a3      	str	r3, [r4, #8]
 8005246:	e001      	b.n	800524c <RTC_DeInit+0x34>
    /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
    do
    {
      wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
      wutcounter++;  
    } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 8005248:	0751      	lsls	r1, r2, #29
 800524a:	d407      	bmi.n	800525c <RTC_DeInit+0x44>
    RTC->CR &= (uint32_t)0x00000007;
  
    /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
    do
    {
      wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
 800524c:	68e2      	ldr	r2, [r4, #12]
      wutcounter++;  
 800524e:	9b01      	ldr	r3, [sp, #4]
 8005250:	3301      	adds	r3, #1
 8005252:	9301      	str	r3, [sp, #4]
    } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 8005254:	9b01      	ldr	r3, [sp, #4]
 8005256:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800525a:	d1f5      	bne.n	8005248 <RTC_DeInit+0x30>
    
    if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 800525c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8005260:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8005264:	68d8      	ldr	r0, [r3, #12]
 8005266:	f010 0004 	ands.w	r0, r0, #4
 800526a:	d107      	bne.n	800527c <RTC_DeInit+0x64>
      }
    }
  }
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;  
 800526c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8005270:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8005274:	22ff      	movs	r2, #255	; 0xff
 8005276:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
}
 8005278:	b003      	add	sp, #12
 800527a:	bd30      	pop	{r4, r5, pc}
    else
    {
      /* Reset all RTC CR register bits */
      RTC->CR &= (uint32_t)0x00000000;
      RTC->WUTR = (uint32_t)0x0000FFFF;
      RTC->PRER = (uint32_t)0x007F00FF;
 800527c:	21ff      	movs	r1, #255	; 0xff
      status = ERROR;
    }
    else
    {
      /* Reset all RTC CR register bits */
      RTC->CR &= (uint32_t)0x00000000;
 800527e:	6898      	ldr	r0, [r3, #8]
 8005280:	2200      	movs	r2, #0
      RTC->WUTR = (uint32_t)0x0000FFFF;
      RTC->PRER = (uint32_t)0x007F00FF;
 8005282:	f2c0 017f 	movt	r1, #127	; 0x7f
    }
    else
    {
      /* Reset all RTC CR register bits */
      RTC->CR &= (uint32_t)0x00000000;
      RTC->WUTR = (uint32_t)0x0000FFFF;
 8005286:	f64f 70ff 	movw	r0, #65535	; 0xffff
      status = ERROR;
    }
    else
    {
      /* Reset all RTC CR register bits */
      RTC->CR &= (uint32_t)0x00000000;
 800528a:	609a      	str	r2, [r3, #8]
      RTC->WUTR = (uint32_t)0x0000FFFF;
 800528c:	6158      	str	r0, [r3, #20]
      RTC->PRER = (uint32_t)0x007F00FF;
 800528e:	6119      	str	r1, [r3, #16]
      RTC->CALIBR = (uint32_t)0x00000000;
 8005290:	619a      	str	r2, [r3, #24]
      RTC->ALRMAR = (uint32_t)0x00000000;        
 8005292:	61da      	str	r2, [r3, #28]
      RTC->ALRMBR = (uint32_t)0x00000000;
 8005294:	621a      	str	r2, [r3, #32]
      RTC->SHIFTR = (uint32_t)0x00000000;
 8005296:	62da      	str	r2, [r3, #44]	; 0x2c
      RTC->CALR = (uint32_t)0x00000000;
 8005298:	63da      	str	r2, [r3, #60]	; 0x3c
      RTC->ALRMASSR = (uint32_t)0x00000000;
 800529a:	645a      	str	r2, [r3, #68]	; 0x44
      RTC->ALRMBSSR = (uint32_t)0x00000000;
 800529c:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Reset ISR register and exit initialization mode */
      RTC->ISR = (uint32_t)0x00000000;
 800529e:	60da      	str	r2, [r3, #12]
      
      /* Reset Tamper and alternate functions configuration register */
      RTC->TAFCR = 0x00000000;
 80052a0:	641a      	str	r2, [r3, #64]	; 0x40
  
      if(RTC_WaitForSynchro() == ERROR)
 80052a2:	f7ff ff93 	bl	80051cc <RTC_WaitForSynchro>
      {
        status = ERROR;
 80052a6:	3000      	adds	r0, #0
 80052a8:	bf18      	it	ne
 80052aa:	2001      	movne	r0, #1
 80052ac:	e7de      	b.n	800526c <RTC_DeInit+0x54>
 80052ae:	bf00      	nop

080052b0 <RTC_RefClockCmd>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC reference clock detection is enabled
  *          - ERROR: RTC reference clock detection is disabled  
  */
ErrorStatus RTC_RefClockCmd(FunctionalState NewState)
{ 
 80052b0:	b538      	push	{r3, r4, r5, lr}
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 80052b2:	f44f 5420 	mov.w	r4, #10240	; 0x2800
 80052b6:	f2c4 0400 	movt	r4, #16384	; 0x4000
 80052ba:	23ca      	movs	r3, #202	; 0xca
 80052bc:	6263      	str	r3, [r4, #36]	; 0x24
  RTC->WPR = 0x53;
 80052be:	2353      	movs	r3, #83	; 0x53
 80052c0:	6263      	str	r3, [r4, #36]	; 0x24
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC reference clock detection is enabled
  *          - ERROR: RTC reference clock detection is disabled  
  */
ErrorStatus RTC_RefClockCmd(FunctionalState NewState)
{ 
 80052c2:	4605      	mov	r5, r0
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
  RTC->WPR = 0x53;
    
  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 80052c4:	f7ff ff2c 	bl	8005120 <RTC_EnterInitMode>
 80052c8:	b168      	cbz	r0, 80052e6 <RTC_RefClockCmd+0x36>
  else
  {  
    if (NewState != DISABLE)
    {
      /* Enable the RTC reference clock detection */
      RTC->CR |= RTC_CR_REFCKON;   
 80052ca:	68a3      	ldr	r3, [r4, #8]
  {
    status = ERROR;
  } 
  else
  {  
    if (NewState != DISABLE)
 80052cc:	b995      	cbnz	r5, 80052f4 <RTC_RefClockCmd+0x44>
      RTC->CR |= RTC_CR_REFCKON;   
    }
    else
    {
      /* Disable the RTC reference clock detection */
      RTC->CR &= ~RTC_CR_REFCKON;    
 80052ce:	f023 0310 	bic.w	r3, r3, #16
 80052d2:	60a3      	str	r3, [r4, #8]
  * @retval None
  */
void RTC_ExitInitMode(void)
{ 
  /* Exit Initialization mode */
  RTC->ISR &= (uint32_t)~RTC_ISR_INIT;  
 80052d4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80052d8:	f2c4 0300 	movt	r3, #16384	; 0x4000
      RTC->CR &= ~RTC_CR_REFCKON;    
    }
    /* Exit Initialization mode */
    RTC_ExitInitMode();
    
    status = SUCCESS;
 80052dc:	2001      	movs	r0, #1
  * @retval None
  */
void RTC_ExitInitMode(void)
{ 
  /* Exit Initialization mode */
  RTC->ISR &= (uint32_t)~RTC_ISR_INIT;  
 80052de:	68da      	ldr	r2, [r3, #12]
 80052e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80052e4:	60da      	str	r2, [r3, #12]
    
    status = SUCCESS;
  }
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;  
 80052e6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80052ea:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80052ee:	22ff      	movs	r2, #255	; 0xff
 80052f0:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status; 
}
 80052f2:	bd38      	pop	{r3, r4, r5, pc}
  else
  {  
    if (NewState != DISABLE)
    {
      /* Enable the RTC reference clock detection */
      RTC->CR |= RTC_CR_REFCKON;   
 80052f4:	f043 0310 	orr.w	r3, r3, #16
 80052f8:	60a3      	str	r3, [r4, #8]
 80052fa:	e7eb      	b.n	80052d4 <RTC_RefClockCmd+0x24>

080052fc <RTC_BypassShadowCmd>:
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 80052fc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8005300:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8005304:	22ca      	movs	r2, #202	; 0xca
 8005306:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8005308:	2253      	movs	r2, #83	; 0x53
 800530a:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (NewState != DISABLE)
  {
    /* Set the BYPSHAD bit */
    RTC->CR |= (uint8_t)RTC_CR_BYPSHAD;
 800530c:	689a      	ldr	r2, [r3, #8]

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
  RTC->WPR = 0x53;
  
  if (NewState != DISABLE)
 800530e:	b948      	cbnz	r0, 8005324 <RTC_BypassShadowCmd+0x28>
    RTC->CR |= (uint8_t)RTC_CR_BYPSHAD;
  }
  else
  {
    /* Reset the BYPSHAD bit */
    RTC->CR &= (uint8_t)~RTC_CR_BYPSHAD;
 8005310:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8005314:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 8005316:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800531a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800531e:	22ff      	movs	r2, #255	; 0xff
 8005320:	625a      	str	r2, [r3, #36]	; 0x24
}
 8005322:	4770      	bx	lr
  RTC->WPR = 0x53;
  
  if (NewState != DISABLE)
  {
    /* Set the BYPSHAD bit */
    RTC->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8005324:	f042 0220 	orr.w	r2, r2, #32
 8005328:	609a      	str	r2, [r3, #8]
 800532a:	e7f4      	b.n	8005316 <RTC_BypassShadowCmd+0x1a>

0800532c <RTC_SetTime>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Time register is configured
  *          - ERROR: RTC Time register is not configured
  */
ErrorStatus RTC_SetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
{
 800532c:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));
  
  if (RTC_Format == RTC_Format_BIN)
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800532e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8005332:	f2c4 0300 	movt	r3, #16384	; 0x4000
  ErrorStatus status = ERROR;
    
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));
  
  if (RTC_Format == RTC_Format_BIN)
 8005336:	2800      	cmp	r0, #0
 8005338:	d135      	bne.n	80053a6 <RTC_SetTime+0x7a>
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	f013 0440 	ands.w	r4, r3, #64	; 0x40
      assert_param(IS_RTC_HOUR12(RTC_TimeStruct->RTC_Hours));
      assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12));
    } 
    else
    {
      RTC_TimeStruct->RTC_H12 = 0x00;
 8005340:	bf08      	it	eq
 8005342:	70cc      	strbeq	r4, [r1, #3]
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));
  
  if (RTC_Format == RTC_Format_BIN)
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005344:	d001      	beq.n	800534a <RTC_SetTime+0x1e>
      assert_param(IS_RTC_HOUR12(tmpreg));
      assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12)); 
    } 
    else
    {
      RTC_TimeStruct->RTC_H12 = 0x00;
 8005346:	78cc      	ldrb	r4, [r1, #3]
 8005348:	0424      	lsls	r4, r4, #16
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 800534a:	780b      	ldrb	r3, [r1, #0]
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
 800534c:	2500      	movs	r5, #0
 800534e:	2b09      	cmp	r3, #9
 8005350:	d908      	bls.n	8005364 <RTC_SetTime+0x38>
 8005352:	2200      	movs	r2, #0
  {
    bcdhigh++;
    Value -= 10;
 8005354:	3b0a      	subs	r3, #10
 8005356:	b2db      	uxtb	r3, r3
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
  {
    bcdhigh++;
 8005358:	3201      	adds	r2, #1
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
 800535a:	2b09      	cmp	r3, #9
  {
    bcdhigh++;
 800535c:	b2d2      	uxtb	r2, r2
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
 800535e:	d8f9      	bhi.n	8005354 <RTC_SetTime+0x28>
 8005360:	0115      	lsls	r5, r2, #4
 8005362:	b2ed      	uxtb	r5, r5
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 8005364:	784a      	ldrb	r2, [r1, #1]
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 8005366:	431d      	orrs	r5, r3
 8005368:	042d      	lsls	r5, r5, #16
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
 800536a:	2000      	movs	r0, #0
 800536c:	2a09      	cmp	r2, #9
 800536e:	d907      	bls.n	8005380 <RTC_SetTime+0x54>
  {
    bcdhigh++;
    Value -= 10;
 8005370:	3a0a      	subs	r2, #10
 8005372:	b2d2      	uxtb	r2, r2
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
  {
    bcdhigh++;
 8005374:	3001      	adds	r0, #1
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
 8005376:	2a09      	cmp	r2, #9
  {
    bcdhigh++;
 8005378:	b2c0      	uxtb	r0, r0
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
 800537a:	d8f9      	bhi.n	8005370 <RTC_SetTime+0x44>
 800537c:	0100      	lsls	r0, r0, #4
 800537e:	b2c0      	uxtb	r0, r0
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
 8005380:	788b      	ldrb	r3, [r1, #2]
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 8005382:	4302      	orrs	r2, r0
 8005384:	0212      	lsls	r2, r2, #8
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
 8005386:	2100      	movs	r1, #0
 8005388:	2b09      	cmp	r3, #9
 800538a:	d907      	bls.n	800539c <RTC_SetTime+0x70>
  {
    bcdhigh++;
    Value -= 10;
 800538c:	3b0a      	subs	r3, #10
 800538e:	b2db      	uxtb	r3, r3
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
  {
    bcdhigh++;
 8005390:	3101      	adds	r1, #1
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
 8005392:	2b09      	cmp	r3, #9
  {
    bcdhigh++;
 8005394:	b2c9      	uxtb	r1, r1
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
 8005396:	d8f9      	bhi.n	800538c <RTC_SetTime+0x60>
 8005398:	0109      	lsls	r1, r1, #4
 800539a:	b2c9      	uxtb	r1, r1
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 800539c:	4325      	orrs	r5, r4
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 800539e:	4315      	orrs	r5, r2
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
 80053a0:	430b      	orrs	r3, r1
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 80053a2:	431d      	orrs	r5, r3
 80053a4:	e00d      	b.n	80053c2 <RTC_SetTime+0x96>
    assert_param(IS_RTC_MINUTES(RTC_TimeStruct->RTC_Minutes));
    assert_param(IS_RTC_SECONDS(RTC_TimeStruct->RTC_Seconds));
  }
  else
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80053a6:	689d      	ldr	r5, [r3, #8]
 80053a8:	f015 0540 	ands.w	r5, r5, #64	; 0x40
      assert_param(IS_RTC_HOUR12(tmpreg));
      assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12)); 
    } 
    else
    {
      RTC_TimeStruct->RTC_H12 = 0x00;
 80053ac:	bf08      	it	eq
 80053ae:	70cd      	strbeq	r5, [r1, #3]
    assert_param(IS_RTC_MINUTES(RTC_TimeStruct->RTC_Minutes));
    assert_param(IS_RTC_SECONDS(RTC_TimeStruct->RTC_Seconds));
  }
  else
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80053b0:	d126      	bne.n	8005400 <RTC_SetTime+0xd4>
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
             ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 80053b2:	784b      	ldrb	r3, [r1, #1]
  }
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 80053b4:	7808      	ldrb	r0, [r1, #0]
             ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
 80053b6:	788a      	ldrb	r2, [r1, #2]
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
             ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 80053b8:	021b      	lsls	r3, r3, #8
  }
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 80053ba:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
             ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 80053be:	4313      	orrs	r3, r2
  }
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 80053c0:	431d      	orrs	r5, r3
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
                   (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
  }  

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 80053c2:	f44f 5420 	mov.w	r4, #10240	; 0x2800
 80053c6:	f2c4 0400 	movt	r4, #16384	; 0x4000
 80053ca:	23ca      	movs	r3, #202	; 0xca
 80053cc:	6263      	str	r3, [r4, #36]	; 0x24
  RTC->WPR = 0x53;
 80053ce:	2353      	movs	r3, #83	; 0x53
 80053d0:	6263      	str	r3, [r4, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 80053d2:	f7ff fea5 	bl	8005120 <RTC_EnterInitMode>
 80053d6:	b160      	cbz	r0, 80053f2 <RTC_SetTime+0xc6>
    status = ERROR;
  } 
  else
  {
    /* Set the RTC_TR register */
    RTC->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80053d8:	f005 357f 	and.w	r5, r5, #2139062143	; 0x7f7f7f7f
 80053dc:	f025 45fe 	bic.w	r5, r5, #2130706432	; 0x7f000000
 80053e0:	6025      	str	r5, [r4, #0]
  * @retval None
  */
void RTC_ExitInitMode(void)
{ 
  /* Exit Initialization mode */
  RTC->ISR &= (uint32_t)~RTC_ISR_INIT;  
 80053e2:	68e3      	ldr	r3, [r4, #12]
 80053e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053e8:	60e3      	str	r3, [r4, #12]

    /* Exit Initialization mode */
    RTC_ExitInitMode(); 

    /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((RTC->CR & RTC_CR_BYPSHAD) == RESET)
 80053ea:	68a3      	ldr	r3, [r4, #8]
 80053ec:	0698      	lsls	r0, r3, #26
 80053ee:	d50a      	bpl.n	8005406 <RTC_SetTime+0xda>
        status = SUCCESS;
      }
    }
    else
    {
      status = SUCCESS;
 80053f0:	2001      	movs	r0, #1
    }
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 80053f2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80053f6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80053fa:	22ff      	movs	r2, #255	; 0xff
 80053fc:	625a      	str	r2, [r3, #36]	; 0x24
    
  return status;
}
 80053fe:	bd38      	pop	{r3, r4, r5, pc}
    }
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
    
  return status;
 8005400:	78cd      	ldrb	r5, [r1, #3]
 8005402:	042d      	lsls	r5, r5, #16
 8005404:	e7d5      	b.n	80053b2 <RTC_SetTime+0x86>
    RTC_ExitInitMode(); 

    /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((RTC->CR & RTC_CR_BYPSHAD) == RESET)
    {
      if (RTC_WaitForSynchro() == ERROR)
 8005406:	f7ff fee1 	bl	80051cc <RTC_WaitForSynchro>
      {
        status = ERROR;
 800540a:	3000      	adds	r0, #0
 800540c:	bf18      	it	ne
 800540e:	2001      	movne	r0, #1
 8005410:	e7ef      	b.n	80053f2 <RTC_SetTime+0xc6>
 8005412:	bf00      	nop

08005414 <RTC_TimeStructInit>:
  * @retval None
  */
void RTC_TimeStructInit(RTC_TimeTypeDef* RTC_TimeStruct)
{
  /* Time = 00h:00min:00sec */
  RTC_TimeStruct->RTC_H12 = RTC_H12_AM;
 8005414:	2300      	movs	r3, #0
 8005416:	70c3      	strb	r3, [r0, #3]
  RTC_TimeStruct->RTC_Hours = 0;
 8005418:	7003      	strb	r3, [r0, #0]
  RTC_TimeStruct->RTC_Minutes = 0;
 800541a:	7043      	strb	r3, [r0, #1]
  RTC_TimeStruct->RTC_Seconds = 0; 
 800541c:	7083      	strb	r3, [r0, #2]
}
 800541e:	4770      	bx	lr

08005420 <RTC_GetTime>:

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));

  /* Get the RTC_TR register */
  tmpreg = (uint32_t)(RTC->TR & RTC_TR_RESERVED_MASK); 
 8005420:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8005424:	f2c4 0300 	movt	r3, #16384	; 0x4000
  * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure that will 
  *                        contain the returned current time configuration.     
  * @retval None
  */
void RTC_GetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
{
 8005428:	b470      	push	{r4, r5, r6}

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));

  /* Get the RTC_TR register */
  tmpreg = (uint32_t)(RTC->TR & RTC_TR_RESERVED_MASK); 
 800542a:	681b      	ldr	r3, [r3, #0]
  
  /* Fill the structure fields with the read parameters */
  RTC_TimeStruct->RTC_Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
  RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
  RTC_TimeStruct->RTC_Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
  RTC_TimeStruct->RTC_H12 = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);  
 800542c:	f403 0580 	and.w	r5, r3, #4194304	; 0x400000

  /* Get the RTC_TR register */
  tmpreg = (uint32_t)(RTC->TR & RTC_TR_RESERVED_MASK); 
  
  /* Fill the structure fields with the read parameters */
  RTC_TimeStruct->RTC_Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8005430:	f3c3 4405 	ubfx	r4, r3, #16, #6
  RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8005434:	f3c3 2206 	ubfx	r2, r3, #8, #7
  RTC_TimeStruct->RTC_Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
  RTC_TimeStruct->RTC_H12 = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);  
 8005438:	0c2d      	lsrs	r5, r5, #16
  tmpreg = (uint32_t)(RTC->TR & RTC_TR_RESERVED_MASK); 
  
  /* Fill the structure fields with the read parameters */
  RTC_TimeStruct->RTC_Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
  RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
  RTC_TimeStruct->RTC_Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800543a:	f003 037f 	and.w	r3, r3, #127	; 0x7f

  /* Get the RTC_TR register */
  tmpreg = (uint32_t)(RTC->TR & RTC_TR_RESERVED_MASK); 
  
  /* Fill the structure fields with the read parameters */
  RTC_TimeStruct->RTC_Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 800543e:	700c      	strb	r4, [r1, #0]
  RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8005440:	704a      	strb	r2, [r1, #1]
  RTC_TimeStruct->RTC_Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8005442:	708b      	strb	r3, [r1, #2]
  RTC_TimeStruct->RTC_H12 = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);  
 8005444:	70cd      	strb	r5, [r1, #3]

  /* Check the input parameters format */
  if (RTC_Format == RTC_Format_BIN)
 8005446:	b9b8      	cbnz	r0, 8005478 <RTC_GetTime+0x58>
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint8_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8005448:	0926      	lsrs	r6, r4, #4
 800544a:	0915      	lsrs	r5, r2, #4
 800544c:	0918      	lsrs	r0, r3, #4
 800544e:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 8005452:	f004 040f 	and.w	r4, r4, #15
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint8_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8005456:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 800545a:	f002 020f 	and.w	r2, r2, #15
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint8_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800545e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 8005462:	f003 030f 	and.w	r3, r3, #15
 8005466:	eb04 0646 	add.w	r6, r4, r6, lsl #1
 800546a:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 800546e:	eb03 0340 	add.w	r3, r3, r0, lsl #1

  /* Check the input parameters format */
  if (RTC_Format == RTC_Format_BIN)
  {
    /* Convert the structure parameters to Binary format */
    RTC_TimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 8005472:	700e      	strb	r6, [r1, #0]
    RTC_TimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes);
 8005474:	704d      	strb	r5, [r1, #1]
    RTC_TimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds);   
 8005476:	708b      	strb	r3, [r1, #2]
  }
}
 8005478:	bc70      	pop	{r4, r5, r6}
 800547a:	4770      	bx	lr

0800547c <RTC_GetSubSecond>:
uint32_t RTC_GetSubSecond(void)
{
  uint32_t tmpreg = 0;
  
  /* Get subseconds values from the correspondent registers*/
  tmpreg = (uint32_t)(RTC->SSR);
 800547c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8005480:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8005484:	6a98      	ldr	r0, [r3, #40]	; 0x28
  
  /* Read DR register to unfroze calendar registers */
  (void) (RTC->DR);
 8005486:	685b      	ldr	r3, [r3, #4]
  
  return (tmpreg);
}
 8005488:	4770      	bx	lr
 800548a:	bf00      	nop

0800548c <RTC_SetDate>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Date register is configured
  *          - ERROR: RTC Date register is not configured
  */
ErrorStatus RTC_SetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
{
 800548c:	b538      	push	{r3, r4, r5, lr}
  ErrorStatus status = ERROR;
  
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));

  if ((RTC_Format == RTC_Format_BIN) && ((RTC_DateStruct->RTC_Month & 0x10) == 0x10))
 800548e:	2800      	cmp	r0, #0
 8005490:	d154      	bne.n	800553c <RTC_SetDate+0xb0>
 8005492:	784b      	ldrb	r3, [r1, #1]
 8005494:	06da      	lsls	r2, r3, #27
 8005496:	d504      	bpl.n	80054a2 <RTC_SetDate+0x16>
  {
    RTC_DateStruct->RTC_Month = (RTC_DateStruct->RTC_Month & (uint32_t)~(0x10)) + 0x0A;
 8005498:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 800549c:	330a      	adds	r3, #10
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	704b      	strb	r3, [r1, #1]
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 80054a2:	78ca      	ldrb	r2, [r1, #3]
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
 80054a4:	2000      	movs	r0, #0
 80054a6:	2a09      	cmp	r2, #9
 80054a8:	d907      	bls.n	80054ba <RTC_SetDate+0x2e>
  {
    bcdhigh++;
    Value -= 10;
 80054aa:	3a0a      	subs	r2, #10
 80054ac:	b2d2      	uxtb	r2, r2
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
  {
    bcdhigh++;
 80054ae:	3001      	adds	r0, #1
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
 80054b0:	2a09      	cmp	r2, #9
  {
    bcdhigh++;
 80054b2:	b2c0      	uxtb	r0, r0
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
 80054b4:	d8f9      	bhi.n	80054aa <RTC_SetDate+0x1e>
 80054b6:	0100      	lsls	r0, r0, #4
 80054b8:	b2c0      	uxtb	r0, r0
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 80054ba:	4302      	orrs	r2, r0
 80054bc:	0412      	lsls	r2, r2, #16
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
 80054be:	2500      	movs	r5, #0
 80054c0:	2b09      	cmp	r3, #9
 80054c2:	d908      	bls.n	80054d6 <RTC_SetDate+0x4a>
 80054c4:	2000      	movs	r0, #0
  {
    bcdhigh++;
    Value -= 10;
 80054c6:	3b0a      	subs	r3, #10
 80054c8:	b2db      	uxtb	r3, r3
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
  {
    bcdhigh++;
 80054ca:	3001      	adds	r0, #1
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
 80054cc:	2b09      	cmp	r3, #9
  {
    bcdhigh++;
 80054ce:	b2c0      	uxtb	r0, r0
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
 80054d0:	d8f9      	bhi.n	80054c6 <RTC_SetDate+0x3a>
 80054d2:	0100      	lsls	r0, r0, #4
 80054d4:	b2c5      	uxtb	r5, r0
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
 80054d6:	7888      	ldrb	r0, [r1, #2]
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 80054d8:	432b      	orrs	r3, r5
 80054da:	021b      	lsls	r3, r3, #8
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
 80054dc:	2400      	movs	r4, #0
 80054de:	2809      	cmp	r0, #9
 80054e0:	d907      	bls.n	80054f2 <RTC_SetDate+0x66>
  {
    bcdhigh++;
    Value -= 10;
 80054e2:	380a      	subs	r0, #10
 80054e4:	b2c0      	uxtb	r0, r0
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
  {
    bcdhigh++;
 80054e6:	3401      	adds	r4, #1
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
 80054e8:	2809      	cmp	r0, #9
  {
    bcdhigh++;
 80054ea:	b2e4      	uxtb	r4, r4
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
 80054ec:	d8f9      	bhi.n	80054e2 <RTC_SetDate+0x56>
 80054ee:	0124      	lsls	r4, r4, #4
 80054f0:	b2e4      	uxtb	r4, r4
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
              ((uint32_t)RTC_DateStruct->RTC_WeekDay << 13));
 80054f2:	780d      	ldrb	r5, [r1, #0]
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 80054f4:	ea42 3545 	orr.w	r5, r2, r5, lsl #13
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 80054f8:	431d      	orrs	r5, r3
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
 80054fa:	4320      	orrs	r0, r4
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 80054fc:	4305      	orrs	r5, r0
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
              ((uint32_t)RTC_DateStruct->RTC_WeekDay << 13));
  }

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 80054fe:	f44f 5420 	mov.w	r4, #10240	; 0x2800
 8005502:	f2c4 0400 	movt	r4, #16384	; 0x4000
 8005506:	23ca      	movs	r3, #202	; 0xca
 8005508:	6263      	str	r3, [r4, #36]	; 0x24
  RTC->WPR = 0x53;
 800550a:	2353      	movs	r3, #83	; 0x53
 800550c:	6263      	str	r3, [r4, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 800550e:	f7ff fe07 	bl	8005120 <RTC_EnterInitMode>
 8005512:	b160      	cbz	r0, 800552e <RTC_SetDate+0xa2>
    status = ERROR;
  } 
  else
  {
    /* Set the RTC_DR register */
    RTC->DR = (uint32_t)(tmpreg & RTC_DR_RESERVED_MASK);
 8005514:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 8005518:	f025 05c0 	bic.w	r5, r5, #192	; 0xc0
 800551c:	6065      	str	r5, [r4, #4]
  * @retval None
  */
void RTC_ExitInitMode(void)
{ 
  /* Exit Initialization mode */
  RTC->ISR &= (uint32_t)~RTC_ISR_INIT;  
 800551e:	68e3      	ldr	r3, [r4, #12]
 8005520:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005524:	60e3      	str	r3, [r4, #12]

    /* Exit Initialization mode */
    RTC_ExitInitMode(); 

    /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((RTC->CR & RTC_CR_BYPSHAD) == RESET)
 8005526:	68a3      	ldr	r3, [r4, #8]
 8005528:	069b      	lsls	r3, r3, #26
 800552a:	d512      	bpl.n	8005552 <RTC_SetDate+0xc6>
        status = SUCCESS;
      }
    }
    else
    {
      status = SUCCESS;
 800552c:	2001      	movs	r0, #1
    }
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;   
 800552e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8005532:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8005536:	22ff      	movs	r2, #255	; 0xff
 8005538:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
}
 800553a:	bd38      	pop	{r3, r4, r5, pc}

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
              (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 800553c:	784d      	ldrb	r5, [r1, #1]
  assert_param(IS_RTC_WEEKDAY(RTC_DateStruct->RTC_WeekDay));

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 800553e:	78c8      	ldrb	r0, [r1, #3]
              (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
 8005540:	788a      	ldrb	r2, [r1, #2]
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
 8005542:	780b      	ldrb	r3, [r1, #0]

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
              (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 8005544:	022d      	lsls	r5, r5, #8
  assert_param(IS_RTC_WEEKDAY(RTC_DateStruct->RTC_WeekDay));

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 8005546:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
              (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 800554a:	4315      	orrs	r5, r2
  assert_param(IS_RTC_WEEKDAY(RTC_DateStruct->RTC_WeekDay));

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 800554c:	ea45 3543 	orr.w	r5, r5, r3, lsl #13
 8005550:	e7d5      	b.n	80054fe <RTC_SetDate+0x72>
    RTC_ExitInitMode(); 

    /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((RTC->CR & RTC_CR_BYPSHAD) == RESET)
    {
      if (RTC_WaitForSynchro() == ERROR)
 8005552:	f7ff fe3b 	bl	80051cc <RTC_WaitForSynchro>
      {
        status = ERROR;
 8005556:	3000      	adds	r0, #0
 8005558:	bf18      	it	ne
 800555a:	2001      	movne	r0, #1
 800555c:	e7e7      	b.n	800552e <RTC_SetDate+0xa2>
 800555e:	bf00      	nop

08005560 <RTC_DateStructInit>:
  * @retval None
  */
void RTC_DateStructInit(RTC_DateTypeDef* RTC_DateStruct)
{
  /* Monday, January 01 xx00 */
  RTC_DateStruct->RTC_WeekDay = RTC_Weekday_Monday;
 8005560:	2301      	movs	r3, #1
 8005562:	7003      	strb	r3, [r0, #0]
  RTC_DateStruct->RTC_Date = 1;
 8005564:	7083      	strb	r3, [r0, #2]
  RTC_DateStruct->RTC_Month = RTC_Month_January;
 8005566:	7043      	strb	r3, [r0, #1]
  RTC_DateStruct->RTC_Year = 0;
 8005568:	2300      	movs	r3, #0
 800556a:	70c3      	strb	r3, [r0, #3]
}
 800556c:	4770      	bx	lr
 800556e:	bf00      	nop

08005570 <RTC_GetDate>:

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));
  
  /* Get the RTC_TR register */
  tmpreg = (uint32_t)(RTC->DR & RTC_DR_RESERVED_MASK); 
 8005570:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8005574:	f2c4 0300 	movt	r3, #16384	; 0x4000
  * @param RTC_DateStruct: pointer to a RTC_DateTypeDef structure that will 
  *                        contain the returned current date configuration.     
  * @retval None
  */
void RTC_GetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
{
 8005578:	b4f0      	push	{r4, r5, r6, r7}

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));
  
  /* Get the RTC_TR register */
  tmpreg = (uint32_t)(RTC->DR & RTC_DR_RESERVED_MASK); 
 800557a:	685b      	ldr	r3, [r3, #4]

  /* Fill the structure fields with the read parameters */
  RTC_DateStruct->RTC_Year = (uint8_t)((tmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 800557c:	f3c3 4507 	ubfx	r5, r3, #16, #8
  RTC_DateStruct->RTC_Month = (uint8_t)((tmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8005580:	f3c3 2404 	ubfx	r4, r3, #8, #5
  RTC_DateStruct->RTC_Date = (uint8_t)(tmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005584:	f003 023f 	and.w	r2, r3, #63	; 0x3f
  RTC_DateStruct->RTC_WeekDay = (uint8_t)((tmpreg & (RTC_DR_WDU)) >> 13);
 8005588:	f3c3 3342 	ubfx	r3, r3, #13, #3
  
  /* Get the RTC_TR register */
  tmpreg = (uint32_t)(RTC->DR & RTC_DR_RESERVED_MASK); 

  /* Fill the structure fields with the read parameters */
  RTC_DateStruct->RTC_Year = (uint8_t)((tmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 800558c:	70cd      	strb	r5, [r1, #3]
  RTC_DateStruct->RTC_Month = (uint8_t)((tmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 800558e:	704c      	strb	r4, [r1, #1]
  RTC_DateStruct->RTC_Date = (uint8_t)(tmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005590:	708a      	strb	r2, [r1, #2]
  RTC_DateStruct->RTC_WeekDay = (uint8_t)((tmpreg & (RTC_DR_WDU)) >> 13);
 8005592:	700b      	strb	r3, [r1, #0]

  /* Check the input parameters format */
  if (RTC_Format == RTC_Format_BIN)
 8005594:	b9b8      	cbnz	r0, 80055c6 <RTC_GetDate+0x56>
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint8_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8005596:	0920      	lsrs	r0, r4, #4
 8005598:	092e      	lsrs	r6, r5, #4
 800559a:	0913      	lsrs	r3, r2, #4
 800559c:	0087      	lsls	r7, r0, #2
 800559e:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 80055a2:	f005 050f 	and.w	r5, r5, #15
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint8_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80055a6:	1838      	adds	r0, r7, r0
  return (tmp + (Value & (uint8_t)0x0F));
 80055a8:	f004 040f 	and.w	r4, r4, #15
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint8_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80055ac:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 80055b0:	f002 020f 	and.w	r2, r2, #15
 80055b4:	eb05 0646 	add.w	r6, r5, r6, lsl #1
 80055b8:	eb04 0040 	add.w	r0, r4, r0, lsl #1
 80055bc:	eb02 0343 	add.w	r3, r2, r3, lsl #1

  /* Check the input parameters format */
  if (RTC_Format == RTC_Format_BIN)
  {
    /* Convert the structure parameters to Binary format */
    RTC_DateStruct->RTC_Year = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year);
 80055c0:	70ce      	strb	r6, [r1, #3]
    RTC_DateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 80055c2:	7048      	strb	r0, [r1, #1]
    RTC_DateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 80055c4:	708b      	strb	r3, [r1, #2]
  }
}
 80055c6:	bcf0      	pop	{r4, r5, r6, r7}
 80055c8:	4770      	bx	lr
 80055ca:	bf00      	nop

080055cc <RTC_SetAlarm>:
  assert_param(IS_ALARM_MASK(RTC_AlarmStruct->RTC_AlarmMask));
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel));

  if (RTC_Format == RTC_Format_BIN)
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80055cc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
  * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that 
  *                          contains the alarm configuration parameters.     
  * @retval None
  */
void RTC_SetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
{
 80055d0:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_ALARM_MASK(RTC_AlarmStruct->RTC_AlarmMask));
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel));

  if (RTC_Format == RTC_Format_BIN)
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80055d2:	f2c4 0300 	movt	r3, #16384	; 0x4000
  assert_param(IS_RTC_FORMAT(RTC_Format));
  assert_param(IS_RTC_ALARM(RTC_Alarm));
  assert_param(IS_ALARM_MASK(RTC_AlarmStruct->RTC_AlarmMask));
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel));

  if (RTC_Format == RTC_Format_BIN)
 80055d6:	2800      	cmp	r0, #0
 80055d8:	d14a      	bne.n	8005670 <RTC_SetAlarm+0xa4>
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80055da:	689d      	ldr	r5, [r3, #8]
 80055dc:	f015 0540 	ands.w	r5, r5, #64	; 0x40
      assert_param(IS_RTC_HOUR12(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours));
      assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
    } 
    else
    {
      RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
 80055e0:	bf08      	it	eq
 80055e2:	70d5      	strbeq	r5, [r2, #3]
  assert_param(IS_ALARM_MASK(RTC_AlarmStruct->RTC_AlarmMask));
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel));

  if (RTC_Format == RTC_Format_BIN)
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80055e4:	d001      	beq.n	80055ea <RTC_SetAlarm+0x1e>
      assert_param(IS_RTC_HOUR12(tmpreg));
      assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
    } 
    else
    {
      RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
 80055e6:	78d5      	ldrb	r5, [r2, #3]
 80055e8:	042d      	lsls	r5, r5, #16
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 80055ea:	7810      	ldrb	r0, [r2, #0]
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
 80055ec:	2600      	movs	r6, #0
 80055ee:	2809      	cmp	r0, #9
 80055f0:	d908      	bls.n	8005604 <RTC_SetAlarm+0x38>
 80055f2:	2300      	movs	r3, #0
  {
    bcdhigh++;
    Value -= 10;
 80055f4:	380a      	subs	r0, #10
 80055f6:	b2c0      	uxtb	r0, r0
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
  {
    bcdhigh++;
 80055f8:	3301      	adds	r3, #1
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
 80055fa:	2809      	cmp	r0, #9
  {
    bcdhigh++;
 80055fc:	b2db      	uxtb	r3, r3
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
 80055fe:	d8f9      	bhi.n	80055f4 <RTC_SetAlarm+0x28>
 8005600:	011b      	lsls	r3, r3, #4
 8005602:	b2de      	uxtb	r6, r3
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 8005604:	7853      	ldrb	r3, [r2, #1]
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 8005606:	4330      	orrs	r0, r6
 8005608:	0406      	lsls	r6, r0, #16
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
 800560a:	2400      	movs	r4, #0
 800560c:	2b09      	cmp	r3, #9
 800560e:	d907      	bls.n	8005620 <RTC_SetAlarm+0x54>
  {
    bcdhigh++;
    Value -= 10;
 8005610:	3b0a      	subs	r3, #10
 8005612:	b2db      	uxtb	r3, r3
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
  {
    bcdhigh++;
 8005614:	3401      	adds	r4, #1
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
 8005616:	2b09      	cmp	r3, #9
  {
    bcdhigh++;
 8005618:	b2e4      	uxtb	r4, r4
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
 800561a:	d8f9      	bhi.n	8005610 <RTC_SetAlarm+0x44>
 800561c:	0124      	lsls	r4, r4, #4
 800561e:	b2e4      	uxtb	r4, r4
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 8005620:	7890      	ldrb	r0, [r2, #2]
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 8005622:	4323      	orrs	r3, r4
 8005624:	021f      	lsls	r7, r3, #8
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
 8005626:	2400      	movs	r4, #0
 8005628:	2809      	cmp	r0, #9
 800562a:	d907      	bls.n	800563c <RTC_SetAlarm+0x70>
  {
    bcdhigh++;
    Value -= 10;
 800562c:	380a      	subs	r0, #10
 800562e:	b2c0      	uxtb	r0, r0
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
  {
    bcdhigh++;
 8005630:	3401      	adds	r4, #1
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
 8005632:	2809      	cmp	r0, #9
  {
    bcdhigh++;
 8005634:	b2e4      	uxtb	r4, r4
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
 8005636:	d8f9      	bhi.n	800562c <RTC_SetAlarm+0x60>
 8005638:	0124      	lsls	r4, r4, #4
 800563a:	b2e4      	uxtb	r4, r4
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 800563c:	7b13      	ldrb	r3, [r2, #12]
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 800563e:	4320      	orrs	r0, r4
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
 8005640:	2400      	movs	r4, #0
 8005642:	2b09      	cmp	r3, #9
 8005644:	d907      	bls.n	8005656 <RTC_SetAlarm+0x8a>
  {
    bcdhigh++;
    Value -= 10;
 8005646:	3b0a      	subs	r3, #10
 8005648:	b2db      	uxtb	r3, r3
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
  {
    bcdhigh++;
 800564a:	3401      	adds	r4, #1
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
 800564c:	2b09      	cmp	r3, #9
  {
    bcdhigh++;
 800564e:	b2e4      	uxtb	r4, r4
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
 8005650:	d8f9      	bhi.n	8005646 <RTC_SetAlarm+0x7a>
 8005652:	0124      	lsls	r4, r4, #4
 8005654:	b2e4      	uxtb	r4, r4
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 8005656:	f8d2 c004 	ldr.w	ip, [r2, #4]
 800565a:	6892      	ldr	r2, [r2, #8]
 800565c:	ea4c 0202 	orr.w	r2, ip, r2
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 8005660:	4315      	orrs	r5, r2
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 8005662:	432e      	orrs	r6, r5
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 8005664:	4337      	orrs	r7, r6
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 8005666:	4338      	orrs	r0, r7
 8005668:	4323      	orrs	r3, r4
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 800566a:	ea40 6303 	orr.w	r3, r0, r3, lsl #24
 800566e:	e016      	b.n	800569e <RTC_SetAlarm+0xd2>
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_AlarmStruct->RTC_AlarmDateWeekDay));
    }
  }
  else
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	f013 0340 	ands.w	r3, r3, #64	; 0x40
      assert_param(IS_RTC_HOUR12(tmpreg));
      assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
    } 
    else
    {
      RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
 8005676:	bf08      	it	eq
 8005678:	70d3      	strbeq	r3, [r2, #3]
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_AlarmStruct->RTC_AlarmDateWeekDay));
    }
  }
  else
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800567a:	d125      	bne.n	80056c8 <RTC_SetAlarm+0xfc>
  }

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 800567c:	f8d2 c004 	ldr.w	ip, [r2, #4]
 8005680:	6897      	ldr	r7, [r2, #8]
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 8005682:	7896      	ldrb	r6, [r2, #2]
  }

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 8005684:	7815      	ldrb	r5, [r2, #0]
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 8005686:	7854      	ldrb	r4, [r2, #1]
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 8005688:	7b10      	ldrb	r0, [r2, #12]
  }

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 800568a:	ea4c 0207 	orr.w	r2, ip, r7
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 800568e:	4332      	orrs	r2, r6
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 8005690:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 8005694:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 8005698:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
  }

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 800569c:	4313      	orrs	r3, r2
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  } 

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800569e:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80056a2:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80056a6:	24ca      	movs	r4, #202	; 0xca
 80056a8:	6254      	str	r4, [r2, #36]	; 0x24
  RTC->WPR = 0x53;
 80056aa:	2453      	movs	r4, #83	; 0x53

  /* Configure the Alarm register */
  if (RTC_Alarm == RTC_Alarm_A)
 80056ac:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  } 

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
  RTC->WPR = 0x53;
 80056b0:	6254      	str	r4, [r2, #36]	; 0x24

  /* Configure the Alarm register */
  if (RTC_Alarm == RTC_Alarm_A)
  {
    RTC->ALRMAR = (uint32_t)tmpreg;
 80056b2:	bf0c      	ite	eq
 80056b4:	61d3      	streq	r3, [r2, #28]
  }
  else
  {
    RTC->ALRMBR = (uint32_t)tmpreg;
 80056b6:	6213      	strne	r3, [r2, #32]
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;   
 80056b8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80056bc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80056c0:	22ff      	movs	r2, #255	; 0xff
 80056c2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80056c4:	bcf0      	pop	{r4, r5, r6, r7}
 80056c6:	4770      	bx	lr
 80056c8:	78d3      	ldrb	r3, [r2, #3]
 80056ca:	041b      	lsls	r3, r3, #16
 80056cc:	e7d6      	b.n	800567c <RTC_SetAlarm+0xb0>
 80056ce:	bf00      	nop

080056d0 <RTC_AlarmStructInit>:
  * @retval None
  */
void RTC_AlarmStructInit(RTC_AlarmTypeDef* RTC_AlarmStruct)
{
  /* Alarm Time Settings : Time = 00h:00mn:00sec */
  RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = RTC_H12_AM;
 80056d0:	2300      	movs	r3, #0
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = 0;
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = 0;

  /* Alarm Date Settings : Date = 1st day of the month */
  RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = RTC_AlarmDateWeekDaySel_Date;
  RTC_AlarmStruct->RTC_AlarmDateWeekDay = 1;
 80056d2:	2201      	movs	r2, #1
  * @retval None
  */
void RTC_AlarmStructInit(RTC_AlarmTypeDef* RTC_AlarmStruct)
{
  /* Alarm Time Settings : Time = 00h:00mn:00sec */
  RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = RTC_H12_AM;
 80056d4:	70c3      	strb	r3, [r0, #3]
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = 0;
 80056d6:	7003      	strb	r3, [r0, #0]
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = 0;
 80056d8:	7043      	strb	r3, [r0, #1]
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = 0;
 80056da:	7083      	strb	r3, [r0, #2]

  /* Alarm Date Settings : Date = 1st day of the month */
  RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = RTC_AlarmDateWeekDaySel_Date;
 80056dc:	6083      	str	r3, [r0, #8]
  RTC_AlarmStruct->RTC_AlarmDateWeekDay = 1;
 80056de:	7302      	strb	r2, [r0, #12]

  /* Alarm Masks Settings : Mask =  all fields are not masked */
  RTC_AlarmStruct->RTC_AlarmMask = RTC_AlarmMask_None;
 80056e0:	6043      	str	r3, [r0, #4]
}
 80056e2:	4770      	bx	lr

080056e4 <RTC_GetAlarm>:
  assert_param(IS_RTC_ALARM(RTC_Alarm)); 

  /* Get the RTC_ALRMxR register */
  if (RTC_Alarm == RTC_Alarm_A)
  {
    tmpreg = (uint32_t)(RTC->ALRMAR);
 80056e4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80056e8:	f2c4 0300 	movt	r3, #16384	; 0x4000
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));
  assert_param(IS_RTC_ALARM(RTC_Alarm)); 

  /* Get the RTC_ALRMxR register */
  if (RTC_Alarm == RTC_Alarm_A)
 80056ec:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
  {
    tmpreg = (uint32_t)(RTC->ALRMAR);
 80056f0:	bf0c      	ite	eq
 80056f2:	69db      	ldreq	r3, [r3, #28]
  }
  else
  {
    tmpreg = (uint32_t)(RTC->ALRMBR);
 80056f4:	6a1b      	ldrne	r3, [r3, #32]
                                                     RTC_ALRMAR_HU)) >> 16);
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | \
                                                     RTC_ALRMAR_MNU)) >> 8);
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | \
                                                     RTC_ALRMAR_SU));
  RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16);
 80056f6:	f403 0c80 	and.w	ip, r3, #4194304	; 0x400000
  * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that will 
  *                          contains the output alarm configuration values.     
  * @retval None
  */
void RTC_GetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
{
 80056fa:	b4f0      	push	{r4, r5, r6, r7}
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | \
                                                     RTC_ALRMAR_MNU)) >> 8);
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | \
                                                     RTC_ALRMAR_SU));
  RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16);
  RTC_AlarmStruct->RTC_AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 24);
 80056fc:	f3c3 6105 	ubfx	r1, r3, #24, #6
  {
    tmpreg = (uint32_t)(RTC->ALRMBR);
  }

  /* Fill the structure with the read parameters */
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | \
 8005700:	f3c3 4605 	ubfx	r6, r3, #16, #6
                                                     RTC_ALRMAR_HU)) >> 16);
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | \
 8005704:	f3c3 2506 	ubfx	r5, r3, #8, #7
                                                     RTC_ALRMAR_MNU)) >> 8);
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | \
 8005708:	f003 047f 	and.w	r4, r3, #127	; 0x7f
                                                     RTC_ALRMAR_SU));
  RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16);
  RTC_AlarmStruct->RTC_AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 24);
  RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 800570c:	f003 4780 	and.w	r7, r3, #1073741824	; 0x40000000
                                                     RTC_ALRMAR_HU)) >> 16);
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | \
                                                     RTC_ALRMAR_MNU)) >> 8);
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | \
                                                     RTC_ALRMAR_SU));
  RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16);
 8005710:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
  RTC_AlarmStruct->RTC_AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 24);
  RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
  RTC_AlarmStruct->RTC_AlarmMask = (uint32_t)(tmpreg & RTC_AlarmMask_All);
 8005714:	f003 3380 	and.w	r3, r3, #2155905152	; 0x80808080
  {
    tmpreg = (uint32_t)(RTC->ALRMBR);
  }

  /* Fill the structure with the read parameters */
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | \
 8005718:	7016      	strb	r6, [r2, #0]
                                                     RTC_ALRMAR_HU)) >> 16);
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | \
 800571a:	7055      	strb	r5, [r2, #1]
                                                     RTC_ALRMAR_MNU)) >> 8);
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | \
 800571c:	7094      	strb	r4, [r2, #2]
                                                     RTC_ALRMAR_SU));
  RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16);
 800571e:	f882 c003 	strb.w	ip, [r2, #3]
  RTC_AlarmStruct->RTC_AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 24);
 8005722:	7311      	strb	r1, [r2, #12]
  RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 8005724:	6097      	str	r7, [r2, #8]
  RTC_AlarmStruct->RTC_AlarmMask = (uint32_t)(tmpreg & RTC_AlarmMask_All);
 8005726:	6053      	str	r3, [r2, #4]

  if (RTC_Format == RTC_Format_BIN)
 8005728:	bb08      	cbnz	r0, 800576e <RTC_GetAlarm+0x8a>
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint8_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800572a:	ea4f 1c16 	mov.w	ip, r6, lsr #4
 800572e:	092f      	lsrs	r7, r5, #4
 8005730:	0920      	lsrs	r0, r4, #4
 8005732:	090b      	lsrs	r3, r1, #4
 8005734:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 8005738:	f006 060f 	and.w	r6, r6, #15
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint8_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800573c:	eb07 0787 	add.w	r7, r7, r7, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 8005740:	f005 050f 	and.w	r5, r5, #15
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint8_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8005744:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 8005748:	f004 040f 	and.w	r4, r4, #15
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint8_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800574c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 8005750:	f001 010f 	and.w	r1, r1, #15
 8005754:	eb06 0c4c 	add.w	ip, r6, ip, lsl #1
 8005758:	eb05 0747 	add.w	r7, r5, r7, lsl #1
 800575c:	eb04 0040 	add.w	r0, r4, r0, lsl #1
 8005760:	eb01 0343 	add.w	r3, r1, r3, lsl #1
  RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
  RTC_AlarmStruct->RTC_AlarmMask = (uint32_t)(tmpreg & RTC_AlarmMask_All);

  if (RTC_Format == RTC_Format_BIN)
  {
    RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 8005764:	f882 c000 	strb.w	ip, [r2]
                                                        RTC_AlarmTime.RTC_Hours);
    RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 8005768:	7057      	strb	r7, [r2, #1]
                                                        RTC_AlarmTime.RTC_Minutes);
    RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 800576a:	7090      	strb	r0, [r2, #2]
                                                        RTC_AlarmTime.RTC_Seconds);
    RTC_AlarmStruct->RTC_AlarmDateWeekDay = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 800576c:	7313      	strb	r3, [r2, #12]
  }  
}
 800576e:	bcf0      	pop	{r4, r5, r6, r7}
 8005770:	4770      	bx	lr
 8005772:	bf00      	nop

08005774 <RTC_AlarmCmd>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Alarm is enabled/disabled
  *          - ERROR: RTC Alarm is not enabled/disabled  
  */
ErrorStatus RTC_AlarmCmd(uint32_t RTC_Alarm, FunctionalState NewState)
{
 8005774:	b082      	sub	sp, #8
  /* Check the parameters */
  assert_param(IS_RTC_CMD_ALARM(RTC_Alarm));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8005776:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800577a:	f2c4 0300 	movt	r3, #16384	; 0x4000
  *          - SUCCESS: RTC Alarm is enabled/disabled
  *          - ERROR: RTC Alarm is not enabled/disabled  
  */
ErrorStatus RTC_AlarmCmd(uint32_t RTC_Alarm, FunctionalState NewState)
{
  __IO uint32_t alarmcounter = 0x00;
 800577e:	2200      	movs	r2, #0
 8005780:	9201      	str	r2, [sp, #4]
  /* Check the parameters */
  assert_param(IS_RTC_CMD_ALARM(RTC_Alarm));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8005782:	22ca      	movs	r2, #202	; 0xca
 8005784:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8005786:	2253      	movs	r2, #83	; 0x53
 8005788:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm state */
  if (NewState != DISABLE)
  {
    RTC->CR |= (uint32_t)RTC_Alarm;
 800578a:	689a      	ldr	r2, [r3, #8]
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
  RTC->WPR = 0x53;

  /* Configure the Alarm state */
  if (NewState != DISABLE)
 800578c:	b9f1      	cbnz	r1, 80057cc <RTC_AlarmCmd+0x58>
    status = SUCCESS;    
  }
  else
  { 
    /* Disable the Alarm in RTC_CR register */
    RTC->CR &= (uint32_t)~RTC_Alarm;
 800578e:	ea22 0200 	bic.w	r2, r2, r0
 8005792:	609a      	str	r2, [r3, #8]
 8005794:	0a00      	lsrs	r0, r0, #8
 8005796:	e001      	b.n	800579c <RTC_AlarmCmd+0x28>
    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    do
    {
      alarmstatus = RTC->ISR & (RTC_Alarm >> 8);
      alarmcounter++;  
    } while((alarmcounter != INITMODE_TIMEOUT) && (alarmstatus == 0x00));
 8005798:	4208      	tst	r0, r1
 800579a:	d107      	bne.n	80057ac <RTC_AlarmCmd+0x38>
    RTC->CR &= (uint32_t)~RTC_Alarm;
   
    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    do
    {
      alarmstatus = RTC->ISR & (RTC_Alarm >> 8);
 800579c:	68d9      	ldr	r1, [r3, #12]
      alarmcounter++;  
 800579e:	9a01      	ldr	r2, [sp, #4]
 80057a0:	3201      	adds	r2, #1
 80057a2:	9201      	str	r2, [sp, #4]
    } while((alarmcounter != INITMODE_TIMEOUT) && (alarmstatus == 0x00));
 80057a4:	9a01      	ldr	r2, [sp, #4]
 80057a6:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80057aa:	d1f5      	bne.n	8005798 <RTC_AlarmCmd+0x24>
    
    if ((RTC->ISR & (RTC_Alarm >> 8)) == RESET)
 80057ac:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80057b0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80057b4:	68db      	ldr	r3, [r3, #12]
    {
      status = ERROR;
    } 
    else
    {
      status = SUCCESS;
 80057b6:	4018      	ands	r0, r3
 80057b8:	bf18      	it	ne
 80057ba:	2001      	movne	r0, #1
    }        
  } 

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 80057bc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80057c0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80057c4:	22ff      	movs	r2, #255	; 0xff
 80057c6:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
}
 80057c8:	b002      	add	sp, #8
 80057ca:	4770      	bx	lr
  RTC->WPR = 0x53;

  /* Configure the Alarm state */
  if (NewState != DISABLE)
  {
    RTC->CR |= (uint32_t)RTC_Alarm;
 80057cc:	4310      	orrs	r0, r2
 80057ce:	6098      	str	r0, [r3, #8]

    status = SUCCESS;    
 80057d0:	2001      	movs	r0, #1
 80057d2:	e7f3      	b.n	80057bc <RTC_AlarmCmd+0x48>

080057d4 <RTC_AlarmSubSecondConfig>:
  assert_param(IS_RTC_ALARM(RTC_Alarm));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(RTC_AlarmSubSecondValue));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(RTC_AlarmSubSecondMask));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 80057d4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80057d8:	f2c4 0300 	movt	r3, #16384	; 0x4000
  *     @arg RTC_AlarmSubSecondMask_None   : SS[14:0] are compared and must match
  *                                          to activate alarm
  * @retval None
  */
void RTC_AlarmSubSecondConfig(uint32_t RTC_Alarm, uint32_t RTC_AlarmSubSecondValue, uint32_t RTC_AlarmSubSecondMask)
{
 80057dc:	b410      	push	{r4}
  assert_param(IS_RTC_ALARM(RTC_Alarm));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(RTC_AlarmSubSecondValue));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(RTC_AlarmSubSecondMask));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 80057de:	24ca      	movs	r4, #202	; 0xca
 80057e0:	625c      	str	r4, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
  
  /* Configure the Alarm A or Alarm B SubSecond registers */
  tmpreg = (uint32_t) (uint32_t)(RTC_AlarmSubSecondValue) | (uint32_t)(RTC_AlarmSubSecondMask);
 80057e2:	430a      	orrs	r2, r1
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(RTC_AlarmSubSecondValue));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(RTC_AlarmSubSecondMask));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
  RTC->WPR = 0x53;
 80057e4:	2453      	movs	r4, #83	; 0x53
  
  /* Configure the Alarm A or Alarm B SubSecond registers */
  tmpreg = (uint32_t) (uint32_t)(RTC_AlarmSubSecondValue) | (uint32_t)(RTC_AlarmSubSecondMask);
  
  if (RTC_Alarm == RTC_Alarm_A)
 80057e6:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(RTC_AlarmSubSecondValue));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(RTC_AlarmSubSecondMask));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
  RTC->WPR = 0x53;
 80057ea:	625c      	str	r4, [r3, #36]	; 0x24
  tmpreg = (uint32_t) (uint32_t)(RTC_AlarmSubSecondValue) | (uint32_t)(RTC_AlarmSubSecondMask);
  
  if (RTC_Alarm == RTC_Alarm_A)
  {
    /* Configure the AlarmA SubSecond register */
    RTC->ALRMASSR = tmpreg;
 80057ec:	bf0c      	ite	eq
 80057ee:	645a      	streq	r2, [r3, #68]	; 0x44
  }
  else
  {
    /* Configure the Alarm B SubSecond register */
    RTC->ALRMBSSR = tmpreg;
 80057f0:	649a      	strne	r2, [r3, #72]	; 0x48
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 80057f2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80057f6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80057fa:	22ff      	movs	r2, #255	; 0xff
 80057fc:	625a      	str	r2, [r3, #36]	; 0x24

}
 80057fe:	bc10      	pop	{r4}
 8005800:	4770      	bx	lr
 8005802:	bf00      	nop

08005804 <RTC_GetAlarmSubSecond>:
  uint32_t tmpreg = 0;
  
  /* Get the RTC_ALRMxR register */
  if (RTC_Alarm == RTC_Alarm_A)
  {
    tmpreg = (uint32_t)((RTC->ALRMASSR) & RTC_ALRMASSR_SS);
 8005804:	f44f 5320 	mov.w	r3, #10240	; 0x2800
uint32_t RTC_GetAlarmSubSecond(uint32_t RTC_Alarm)
{
  uint32_t tmpreg = 0;
  
  /* Get the RTC_ALRMxR register */
  if (RTC_Alarm == RTC_Alarm_A)
 8005808:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
  {
    tmpreg = (uint32_t)((RTC->ALRMASSR) & RTC_ALRMASSR_SS);
 800580c:	f2c4 0300 	movt	r3, #16384	; 0x4000
uint32_t RTC_GetAlarmSubSecond(uint32_t RTC_Alarm)
{
  uint32_t tmpreg = 0;
  
  /* Get the RTC_ALRMxR register */
  if (RTC_Alarm == RTC_Alarm_A)
 8005810:	d003      	beq.n	800581a <RTC_GetAlarmSubSecond+0x16>
  {
    tmpreg = (uint32_t)((RTC->ALRMASSR) & RTC_ALRMASSR_SS);
  }
  else
  {
    tmpreg = (uint32_t)((RTC->ALRMBSSR) & RTC_ALRMBSSR_SS);
 8005812:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8005814:	0440      	lsls	r0, r0, #17
 8005816:	0c40      	lsrs	r0, r0, #17
  } 
  
  return (tmpreg);
}
 8005818:	4770      	bx	lr
  uint32_t tmpreg = 0;
  
  /* Get the RTC_ALRMxR register */
  if (RTC_Alarm == RTC_Alarm_A)
  {
    tmpreg = (uint32_t)((RTC->ALRMASSR) & RTC_ALRMASSR_SS);
 800581a:	6c58      	ldr	r0, [r3, #68]	; 0x44
 800581c:	0440      	lsls	r0, r0, #17
 800581e:	0c40      	lsrs	r0, r0, #17
 8005820:	4770      	bx	lr
 8005822:	bf00      	nop

08005824 <RTC_WakeUpClockConfig>:
{
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(RTC_WakeUpClock));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8005824:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8005828:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800582c:	22ca      	movs	r2, #202	; 0xca
 800582e:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8005830:	2253      	movs	r2, #83	; 0x53
 8005832:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear the Wakeup Timer clock source bits in CR register */
  RTC->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8005834:	689a      	ldr	r2, [r3, #8]
 8005836:	f022 0207 	bic.w	r2, r2, #7
 800583a:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  RTC->CR |= (uint32_t)RTC_WakeUpClock;
 800583c:	689a      	ldr	r2, [r3, #8]
 800583e:	4302      	orrs	r2, r0
 8005840:	609a      	str	r2, [r3, #8]
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8005842:	22ff      	movs	r2, #255	; 0xff
 8005844:	625a      	str	r2, [r3, #36]	; 0x24
}
 8005846:	4770      	bx	lr

08005848 <RTC_SetWakeUpCounter>:
{
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_COUNTER(RTC_WakeUpCounter));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8005848:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800584c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8005850:	22ca      	movs	r2, #202	; 0xca
 8005852:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8005854:	2253      	movs	r2, #83	; 0x53
 8005856:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Configure the Wakeup Timer counter */
  RTC->WUTR = (uint32_t)RTC_WakeUpCounter;
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8005858:	22ff      	movs	r2, #255	; 0xff
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
  RTC->WPR = 0x53;
  
  /* Configure the Wakeup Timer counter */
  RTC->WUTR = (uint32_t)RTC_WakeUpCounter;
 800585a:	6158      	str	r0, [r3, #20]
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800585c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800585e:	4770      	bx	lr

08005860 <RTC_GetWakeUpCounter>:
  * @retval The RTC WakeUp Counter value.
  */
uint32_t RTC_GetWakeUpCounter(void)
{
  /* Get the counter value */
  return ((uint32_t)(RTC->WUTR & RTC_WUTR_WUT));
 8005860:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8005864:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8005868:	6958      	ldr	r0, [r3, #20]
}
 800586a:	b280      	uxth	r0, r0
 800586c:	4770      	bx	lr
 800586e:	bf00      	nop

08005870 <RTC_WakeUpCmd>:
  * @param  NewState: new state of the WakeUp timer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
ErrorStatus RTC_WakeUpCmd(FunctionalState NewState)
{
 8005870:	b082      	sub	sp, #8
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8005872:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8005876:	f2c4 0300 	movt	r3, #16384	; 0x4000
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
ErrorStatus RTC_WakeUpCmd(FunctionalState NewState)
{
  __IO uint32_t wutcounter = 0x00;
 800587a:	2200      	movs	r2, #0
 800587c:	9201      	str	r2, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800587e:	22ca      	movs	r2, #202	; 0xca
 8005880:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8005882:	2253      	movs	r2, #83	; 0x53
 8005884:	625a      	str	r2, [r3, #36]	; 0x24

  if (NewState != DISABLE)
  {
    /* Enable the Wakeup Timer */
    RTC->CR |= (uint32_t)RTC_CR_WUTE;
 8005886:	689a      	ldr	r2, [r3, #8]

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
  RTC->WPR = 0x53;

  if (NewState != DISABLE)
 8005888:	b9e0      	cbnz	r0, 80058c4 <RTC_WakeUpCmd+0x54>
    status = SUCCESS;    
  }
  else
  {
    /* Disable the Wakeup Timer */
    RTC->CR &= (uint32_t)~RTC_CR_WUTE;
 800588a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800588e:	609a      	str	r2, [r3, #8]
 8005890:	e001      	b.n	8005896 <RTC_WakeUpCmd+0x26>
    /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
    do
    {
      wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
      wutcounter++;  
    } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 8005892:	0749      	lsls	r1, r1, #29
 8005894:	d407      	bmi.n	80058a6 <RTC_WakeUpCmd+0x36>
    /* Disable the Wakeup Timer */
    RTC->CR &= (uint32_t)~RTC_CR_WUTE;
    /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
    do
    {
      wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
 8005896:	68d9      	ldr	r1, [r3, #12]
      wutcounter++;  
 8005898:	9a01      	ldr	r2, [sp, #4]
 800589a:	3201      	adds	r2, #1
 800589c:	9201      	str	r2, [sp, #4]
    } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 800589e:	9a01      	ldr	r2, [sp, #4]
 80058a0:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80058a4:	d1f5      	bne.n	8005892 <RTC_WakeUpCmd+0x22>
    
    if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 80058a6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80058aa:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80058ae:	68d8      	ldr	r0, [r3, #12]
    {
      status = ERROR;
 80058b0:	f3c0 0080 	ubfx	r0, r0, #2, #1
      status = SUCCESS;
    }    
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 80058b4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80058b8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80058bc:	22ff      	movs	r2, #255	; 0xff
 80058be:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
}
 80058c0:	b002      	add	sp, #8
 80058c2:	4770      	bx	lr
  RTC->WPR = 0x53;

  if (NewState != DISABLE)
  {
    /* Enable the Wakeup Timer */
    RTC->CR |= (uint32_t)RTC_CR_WUTE;
 80058c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80058c8:	609a      	str	r2, [r3, #8]
    status = SUCCESS;    
 80058ca:	2001      	movs	r0, #1
 80058cc:	e7f2      	b.n	80058b4 <RTC_WakeUpCmd+0x44>
 80058ce:	bf00      	nop

080058d0 <RTC_DayLightSavingConfig>:
  /* Check the parameters */
  assert_param(IS_RTC_DAYLIGHT_SAVING(RTC_DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(RTC_StoreOperation));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 80058d0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80058d4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80058d8:	22ca      	movs	r2, #202	; 0xca
 80058da:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 80058dc:	2253      	movs	r2, #83	; 0x53
 80058de:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear the bits to be configured */
  RTC->CR &= (uint32_t)~(RTC_CR_BCK);
 80058e0:	689a      	ldr	r2, [r3, #8]
 80058e2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80058e6:	609a      	str	r2, [r3, #8]

  /* Configure the RTC_CR register */
  RTC->CR |= (uint32_t)(RTC_DayLightSaving | RTC_StoreOperation);
 80058e8:	689a      	ldr	r2, [r3, #8]
 80058ea:	4302      	orrs	r2, r0
 80058ec:	430a      	orrs	r2, r1
 80058ee:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 80058f0:	22ff      	movs	r2, #255	; 0xff
 80058f2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80058f4:	4770      	bx	lr
 80058f6:	bf00      	nop

080058f8 <RTC_GetStoreOperation>:
  *          - RTC_StoreOperation_Reset
  *          - RTC_StoreOperation_Set       
  */
uint32_t RTC_GetStoreOperation(void)
{
  return (RTC->CR & RTC_CR_BCK);
 80058f8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80058fc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8005900:	6898      	ldr	r0, [r3, #8]
}
 8005902:	f400 2080 	and.w	r0, r0, #262144	; 0x40000
 8005906:	4770      	bx	lr

08005908 <RTC_OutputConfig>:
  /* Check the parameters */
  assert_param(IS_RTC_OUTPUT(RTC_Output));
  assert_param(IS_RTC_OUTPUT_POL(RTC_OutputPolarity));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8005908:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800590c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8005910:	22ca      	movs	r2, #202	; 0xca
 8005912:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8005914:	2253      	movs	r2, #83	; 0x53
 8005916:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear the bits to be configured */
  RTC->CR &= (uint32_t)~(RTC_CR_OSEL | RTC_CR_POL);
 8005918:	689a      	ldr	r2, [r3, #8]
 800591a:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 800591e:	609a      	str	r2, [r3, #8]

  /* Configure the output selection and polarity */
  RTC->CR |= (uint32_t)(RTC_Output | RTC_OutputPolarity);
 8005920:	689a      	ldr	r2, [r3, #8]
 8005922:	4302      	orrs	r2, r0
 8005924:	430a      	orrs	r2, r1
 8005926:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8005928:	22ff      	movs	r2, #255	; 0xff
 800592a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800592c:	4770      	bx	lr
 800592e:	bf00      	nop

08005930 <RTC_CoarseCalibConfig>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Coarse calibration are initialized
  *          - ERROR: RTC Coarse calibration are not initialized     
  */
ErrorStatus RTC_CoarseCalibConfig(uint32_t RTC_CalibSign, uint32_t Value)
{
 8005930:	b570      	push	{r4, r5, r6, lr}
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_SIGN(RTC_CalibSign));
  assert_param(IS_RTC_CALIB_VALUE(Value)); 

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8005932:	f44f 5420 	mov.w	r4, #10240	; 0x2800
 8005936:	f2c4 0400 	movt	r4, #16384	; 0x4000
 800593a:	23ca      	movs	r3, #202	; 0xca
 800593c:	6263      	str	r3, [r4, #36]	; 0x24
  RTC->WPR = 0x53;
 800593e:	2353      	movs	r3, #83	; 0x53
 8005940:	6263      	str	r3, [r4, #36]	; 0x24
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Coarse calibration are initialized
  *          - ERROR: RTC Coarse calibration are not initialized     
  */
ErrorStatus RTC_CoarseCalibConfig(uint32_t RTC_CalibSign, uint32_t Value)
{
 8005942:	4605      	mov	r5, r0
 8005944:	460e      	mov	r6, r1
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
  RTC->WPR = 0x53;

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 8005946:	f7ff fbeb 	bl	8005120 <RTC_EnterInitMode>
 800594a:	b130      	cbz	r0, 800595a <RTC_CoarseCalibConfig+0x2a>
    status = ERROR;
  } 
  else
  {
    /* Set the coarse calibration value */
    RTC->CALIBR = (uint32_t)(RTC_CalibSign | Value);
 800594c:	4335      	orrs	r5, r6
 800594e:	61a5      	str	r5, [r4, #24]
  * @retval None
  */
void RTC_ExitInitMode(void)
{ 
  /* Exit Initialization mode */
  RTC->ISR &= (uint32_t)~RTC_ISR_INIT;  
 8005950:	68e3      	ldr	r3, [r4, #12]
 8005952:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005956:	60e3      	str	r3, [r4, #12]
    /* Set the coarse calibration value */
    RTC->CALIBR = (uint32_t)(RTC_CalibSign | Value);
    /* Exit Initialization mode */
    RTC_ExitInitMode();
    
    status = SUCCESS;
 8005958:	2001      	movs	r0, #1
  } 

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800595a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800595e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8005962:	22ff      	movs	r2, #255	; 0xff
 8005964:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
}
 8005966:	bd70      	pop	{r4, r5, r6, pc}

08005968 <RTC_CoarseCalibCmd>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Coarse calibration are enabled/disabled
  *          - ERROR: RTC Coarse calibration are not enabled/disabled    
  */
ErrorStatus RTC_CoarseCalibCmd(FunctionalState NewState)
{
 8005968:	b538      	push	{r3, r4, r5, lr}
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800596a:	f44f 5420 	mov.w	r4, #10240	; 0x2800
 800596e:	f2c4 0400 	movt	r4, #16384	; 0x4000
 8005972:	23ca      	movs	r3, #202	; 0xca
 8005974:	6263      	str	r3, [r4, #36]	; 0x24
  RTC->WPR = 0x53;
 8005976:	2353      	movs	r3, #83	; 0x53
 8005978:	6263      	str	r3, [r4, #36]	; 0x24
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Coarse calibration are enabled/disabled
  *          - ERROR: RTC Coarse calibration are not enabled/disabled    
  */
ErrorStatus RTC_CoarseCalibCmd(FunctionalState NewState)
{
 800597a:	4605      	mov	r5, r0
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
  RTC->WPR = 0x53;
  
  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 800597c:	f7ff fbd0 	bl	8005120 <RTC_EnterInitMode>
 8005980:	b168      	cbz	r0, 800599e <RTC_CoarseCalibCmd+0x36>
  else
  {
    if (NewState != DISABLE)
    {
      /* Enable the Coarse Calibration */
      RTC->CR |= (uint32_t)RTC_CR_DCE;
 8005982:	68a3      	ldr	r3, [r4, #8]
  {
    status =  ERROR;
  }
  else
  {
    if (NewState != DISABLE)
 8005984:	b995      	cbnz	r5, 80059ac <RTC_CoarseCalibCmd+0x44>
      RTC->CR |= (uint32_t)RTC_CR_DCE;
    }
    else
    { 
      /* Disable the Coarse Calibration */
      RTC->CR &= (uint32_t)~RTC_CR_DCE;
 8005986:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800598a:	60a3      	str	r3, [r4, #8]
  * @retval None
  */
void RTC_ExitInitMode(void)
{ 
  /* Exit Initialization mode */
  RTC->ISR &= (uint32_t)~RTC_ISR_INIT;  
 800598c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8005990:	f2c4 0300 	movt	r3, #16384	; 0x4000
      RTC->CR &= (uint32_t)~RTC_CR_DCE;
    }
    /* Exit Initialization mode */
    RTC_ExitInitMode();
    
    status = SUCCESS;
 8005994:	2001      	movs	r0, #1
  * @retval None
  */
void RTC_ExitInitMode(void)
{ 
  /* Exit Initialization mode */
  RTC->ISR &= (uint32_t)~RTC_ISR_INIT;  
 8005996:	68da      	ldr	r2, [r3, #12]
 8005998:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800599c:	60da      	str	r2, [r3, #12]
    
    status = SUCCESS;
  } 
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800599e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80059a2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80059a6:	22ff      	movs	r2, #255	; 0xff
 80059a8:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
}
 80059aa:	bd38      	pop	{r3, r4, r5, pc}
  else
  {
    if (NewState != DISABLE)
    {
      /* Enable the Coarse Calibration */
      RTC->CR |= (uint32_t)RTC_CR_DCE;
 80059ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059b0:	60a3      	str	r3, [r4, #8]
 80059b2:	e7eb      	b.n	800598c <RTC_CoarseCalibCmd+0x24>

080059b4 <RTC_CalibOutputCmd>:
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 80059b4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80059b8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80059bc:	22ca      	movs	r2, #202	; 0xca
 80059be:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 80059c0:	2253      	movs	r2, #83	; 0x53
 80059c2:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (NewState != DISABLE)
  {
    /* Enable the RTC clock output */
    RTC->CR |= (uint32_t)RTC_CR_COE;
 80059c4:	689a      	ldr	r2, [r3, #8]
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
  RTC->WPR = 0x53;
  
  if (NewState != DISABLE)
 80059c6:	b948      	cbnz	r0, 80059dc <RTC_CalibOutputCmd+0x28>
    RTC->CR |= (uint32_t)RTC_CR_COE;
  }
  else
  { 
    /* Disable the RTC clock output */
    RTC->CR &= (uint32_t)~RTC_CR_COE;
 80059c8:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80059cc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 80059ce:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80059d2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80059d6:	22ff      	movs	r2, #255	; 0xff
 80059d8:	625a      	str	r2, [r3, #36]	; 0x24
}
 80059da:	4770      	bx	lr
  RTC->WPR = 0x53;
  
  if (NewState != DISABLE)
  {
    /* Enable the RTC clock output */
    RTC->CR |= (uint32_t)RTC_CR_COE;
 80059dc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80059e0:	609a      	str	r2, [r3, #8]
 80059e2:	e7f4      	b.n	80059ce <RTC_CalibOutputCmd+0x1a>

080059e4 <RTC_CalibOutputConfig>:
{
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(RTC_CalibOutput));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 80059e4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80059e8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80059ec:	22ca      	movs	r2, #202	; 0xca
 80059ee:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 80059f0:	2253      	movs	r2, #83	; 0x53
 80059f2:	625a      	str	r2, [r3, #36]	; 0x24
  
  /*clear flags before config*/
  RTC->CR &= (uint32_t)~(RTC_CR_COSEL);
 80059f4:	689a      	ldr	r2, [r3, #8]
 80059f6:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 80059fa:	609a      	str	r2, [r3, #8]

  /* Configure the RTC_CR register */
  RTC->CR |= (uint32_t)RTC_CalibOutput;
 80059fc:	689a      	ldr	r2, [r3, #8]
 80059fe:	4302      	orrs	r2, r0
 8005a00:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 8005a02:	22ff      	movs	r2, #255	; 0xff
 8005a04:	625a      	str	r2, [r3, #36]	; 0x24
}
 8005a06:	4770      	bx	lr

08005a08 <RTC_SmoothCalibConfig>:
  assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(RTC_SmoothCalibPeriod));
  assert_param(IS_RTC_SMOOTH_CALIB_PLUS(RTC_SmoothCalibPlusPulses));
  assert_param(IS_RTC_SMOOTH_CALIB_MINUS(RTC_SmouthCalibMinusPulsesValue));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8005a08:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8005a0c:	f2c4 0300 	movt	r3, #16384	; 0x4000
  *          - ERROR: RTC Calib registers are not configured
*/
ErrorStatus RTC_SmoothCalibConfig(uint32_t RTC_SmoothCalibPeriod,
                                  uint32_t RTC_SmoothCalibPlusPulses,
                                  uint32_t RTC_SmouthCalibMinusPulsesValue)
{
 8005a10:	b430      	push	{r4, r5}
  assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(RTC_SmoothCalibPeriod));
  assert_param(IS_RTC_SMOOTH_CALIB_PLUS(RTC_SmoothCalibPlusPulses));
  assert_param(IS_RTC_SMOOTH_CALIB_MINUS(RTC_SmouthCalibMinusPulsesValue));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8005a12:	24ca      	movs	r4, #202	; 0xca
 8005a14:	625c      	str	r4, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8005a16:	2453      	movs	r4, #83	; 0x53
 8005a18:	625c      	str	r4, [r3, #36]	; 0x24
  
  /* check if a calibration is pending*/
  if ((RTC->ISR & RTC_ISR_RECALPF) != RESET)
 8005a1a:	68dc      	ldr	r4, [r3, #12]
 8005a1c:	03e4      	lsls	r4, r4, #15
 8005a1e:	d50b      	bpl.n	8005a38 <RTC_SmoothCalibConfig+0x30>
  {
    /* wait until the Calibration is completed*/
    while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
 8005a20:	68dc      	ldr	r4, [r3, #12]
 8005a22:	03e4      	lsls	r4, r4, #15
 8005a24:	d508      	bpl.n	8005a38 <RTC_SmoothCalibConfig+0x30>
 8005a26:	f44f 3400 	mov.w	r4, #131072	; 0x20000
 8005a2a:	e001      	b.n	8005a30 <RTC_SmoothCalibConfig+0x28>
 8005a2c:	3c01      	subs	r4, #1
 8005a2e:	d003      	beq.n	8005a38 <RTC_SmoothCalibConfig+0x30>
 8005a30:	68dd      	ldr	r5, [r3, #12]
 8005a32:	f415 3f80 	tst.w	r5, #65536	; 0x10000
 8005a36:	d1f9      	bne.n	8005a2c <RTC_SmoothCalibConfig+0x24>
      recalpfcount++;
    }
  }

  /* check if the calibration pending is completed or if there is no calibration operation at all*/
  if ((RTC->ISR & RTC_ISR_RECALPF) == RESET)
 8005a38:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8005a3c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8005a40:	68dc      	ldr	r4, [r3, #12]
 8005a42:	f414 3f80 	tst.w	r4, #65536	; 0x10000
 8005a46:	d10b      	bne.n	8005a60 <RTC_SmoothCalibConfig+0x58>
  {
    /* Configure the Smooth calibration settings */
    RTC->CALR = (uint32_t)((uint32_t)RTC_SmoothCalibPeriod | (uint32_t)RTC_SmoothCalibPlusPulses | (uint32_t)RTC_SmouthCalibMinusPulsesValue);
 8005a48:	4308      	orrs	r0, r1
 8005a4a:	4302      	orrs	r2, r0
 8005a4c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = SUCCESS;
 8005a4e:	2001      	movs	r0, #1
  {
    status = ERROR;
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 8005a50:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8005a54:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8005a58:	22ff      	movs	r2, #255	; 0xff
 8005a5a:	625a      	str	r2, [r3, #36]	; 0x24
  
  return (ErrorStatus)(status);
}
 8005a5c:	bc30      	pop	{r4, r5}
 8005a5e:	4770      	bx	lr

    status = SUCCESS;
  }
  else
  {
    status = ERROR;
 8005a60:	2000      	movs	r0, #0
 8005a62:	e7f5      	b.n	8005a50 <RTC_SmoothCalibConfig+0x48>

08005a64 <RTC_TimeStampCmd>:
  /* Check the parameters */
  assert_param(IS_RTC_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(RTC->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8005a64:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8005a68:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a72:	f023 0308 	bic.w	r3, r3, #8

  /* Get the new configuration */
  if (NewState != DISABLE)
 8005a76:	b961      	cbnz	r1, 8005a92 <RTC_TimeStampCmd+0x2e>
  {
    tmpreg |= (uint32_t)(RTC_TimeStampEdge | RTC_CR_TSE);
  }
  else
  {
    tmpreg |= (uint32_t)(RTC_TimeStampEdge);
 8005a78:	4318      	orrs	r0, r3
  }

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8005a7a:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8005a7e:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8005a82:	23ca      	movs	r3, #202	; 0xca
 8005a84:	6253      	str	r3, [r2, #36]	; 0x24
  RTC->WPR = 0x53;
 8005a86:	2353      	movs	r3, #83	; 0x53
 8005a88:	6253      	str	r3, [r2, #36]	; 0x24

  /* Configure the Time Stamp TSEDGE and Enable bits */
  RTC->CR = (uint32_t)tmpreg;

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8005a8a:	23ff      	movs	r3, #255	; 0xff
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
  RTC->WPR = 0x53;

  /* Configure the Time Stamp TSEDGE and Enable bits */
  RTC->CR = (uint32_t)tmpreg;
 8005a8c:	6090      	str	r0, [r2, #8]

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8005a8e:	6253      	str	r3, [r2, #36]	; 0x24
}
 8005a90:	4770      	bx	lr
  tmpreg = (uint32_t)(RTC->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));

  /* Get the new configuration */
  if (NewState != DISABLE)
  {
    tmpreg |= (uint32_t)(RTC_TimeStampEdge | RTC_CR_TSE);
 8005a92:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005a96:	4318      	orrs	r0, r3
 8005a98:	e7ef      	b.n	8005a7a <RTC_TimeStampCmd+0x16>
 8005a9a:	bf00      	nop

08005a9c <RTC_GetTimeStamp>:

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));

  /* Get the TimeStamp time and date registers values */
  tmptime = (uint32_t)(RTC->TSTR & RTC_TR_RESERVED_MASK);
 8005a9c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8005aa0:	f2c4 0300 	movt	r3, #16384	; 0x4000
  *                             contains the TimeStamp date values.     
  * @retval None
  */
void RTC_GetTimeStamp(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_StampTimeStruct, 
                                      RTC_DateTypeDef* RTC_StampDateStruct)
{
 8005aa4:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));

  /* Get the TimeStamp time and date registers values */
  tmptime = (uint32_t)(RTC->TSTR & RTC_TR_RESERVED_MASK);
 8005aa8:	6b1c      	ldr	r4, [r3, #48]	; 0x30
  tmpdate = (uint32_t)(RTC->TSDR & RTC_DR_RESERVED_MASK);
 8005aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34

  /* Fill the Time structure fields with the read parameters */
  RTC_StampTimeStruct->RTC_Hours = (uint8_t)((tmptime & (RTC_TR_HT | RTC_TR_HU)) >> 16);
  RTC_StampTimeStruct->RTC_Minutes = (uint8_t)((tmptime & (RTC_TR_MNT | RTC_TR_MNU)) >> 8);
  RTC_StampTimeStruct->RTC_Seconds = (uint8_t)(tmptime & (RTC_TR_ST | RTC_TR_SU));
  RTC_StampTimeStruct->RTC_H12 = (uint8_t)((tmptime & (RTC_TR_PM)) >> 16);  
 8005aac:	f404 0780 	and.w	r7, r4, #4194304	; 0x400000
  /* Get the TimeStamp time and date registers values */
  tmptime = (uint32_t)(RTC->TSTR & RTC_TR_RESERVED_MASK);
  tmpdate = (uint32_t)(RTC->TSDR & RTC_DR_RESERVED_MASK);

  /* Fill the Time structure fields with the read parameters */
  RTC_StampTimeStruct->RTC_Hours = (uint8_t)((tmptime & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8005ab0:	f3c4 4805 	ubfx	r8, r4, #16, #6
  RTC_StampTimeStruct->RTC_Minutes = (uint8_t)((tmptime & (RTC_TR_MNT | RTC_TR_MNU)) >> 8);
 8005ab4:	f3c4 2c06 	ubfx	ip, r4, #8, #7
  RTC_StampTimeStruct->RTC_Seconds = (uint8_t)(tmptime & (RTC_TR_ST | RTC_TR_SU));
 8005ab8:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 8005abc:	708c      	strb	r4, [r1, #2]
  RTC_StampTimeStruct->RTC_H12 = (uint8_t)((tmptime & (RTC_TR_PM)) >> 16);  

  /* Fill the Date structure fields with the read parameters */
  RTC_StampDateStruct->RTC_Year = 0;
  RTC_StampDateStruct->RTC_Month = (uint8_t)((tmpdate & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8005abe:	f3c3 2604 	ubfx	r6, r3, #8, #5
  RTC_StampDateStruct->RTC_Date = (uint8_t)(tmpdate & (RTC_DR_DT | RTC_DR_DU));
 8005ac2:	f003 053f 	and.w	r5, r3, #63	; 0x3f

  /* Fill the Time structure fields with the read parameters */
  RTC_StampTimeStruct->RTC_Hours = (uint8_t)((tmptime & (RTC_TR_HT | RTC_TR_HU)) >> 16);
  RTC_StampTimeStruct->RTC_Minutes = (uint8_t)((tmptime & (RTC_TR_MNT | RTC_TR_MNU)) >> 8);
  RTC_StampTimeStruct->RTC_Seconds = (uint8_t)(tmptime & (RTC_TR_ST | RTC_TR_SU));
  RTC_StampTimeStruct->RTC_H12 = (uint8_t)((tmptime & (RTC_TR_PM)) >> 16);  
 8005ac6:	0c3f      	lsrs	r7, r7, #16

  /* Fill the Date structure fields with the read parameters */
  RTC_StampDateStruct->RTC_Year = 0;
  RTC_StampDateStruct->RTC_Month = (uint8_t)((tmpdate & (RTC_DR_MT | RTC_DR_MU)) >> 8);
  RTC_StampDateStruct->RTC_Date = (uint8_t)(tmpdate & (RTC_DR_DT | RTC_DR_DU));
  RTC_StampDateStruct->RTC_WeekDay = (uint8_t)((tmpdate & (RTC_DR_WDU)) >> 13);
 8005ac8:	f3c3 3342 	ubfx	r3, r3, #13, #3
  RTC_StampTimeStruct->RTC_Minutes = (uint8_t)((tmptime & (RTC_TR_MNT | RTC_TR_MNU)) >> 8);
  RTC_StampTimeStruct->RTC_Seconds = (uint8_t)(tmptime & (RTC_TR_ST | RTC_TR_SU));
  RTC_StampTimeStruct->RTC_H12 = (uint8_t)((tmptime & (RTC_TR_PM)) >> 16);  

  /* Fill the Date structure fields with the read parameters */
  RTC_StampDateStruct->RTC_Year = 0;
 8005acc:	2400      	movs	r4, #0
  /* Get the TimeStamp time and date registers values */
  tmptime = (uint32_t)(RTC->TSTR & RTC_TR_RESERVED_MASK);
  tmpdate = (uint32_t)(RTC->TSDR & RTC_DR_RESERVED_MASK);

  /* Fill the Time structure fields with the read parameters */
  RTC_StampTimeStruct->RTC_Hours = (uint8_t)((tmptime & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8005ace:	f881 8000 	strb.w	r8, [r1]
  RTC_StampTimeStruct->RTC_Minutes = (uint8_t)((tmptime & (RTC_TR_MNT | RTC_TR_MNU)) >> 8);
 8005ad2:	f881 c001 	strb.w	ip, [r1, #1]
  RTC_StampTimeStruct->RTC_Seconds = (uint8_t)(tmptime & (RTC_TR_ST | RTC_TR_SU));
  RTC_StampTimeStruct->RTC_H12 = (uint8_t)((tmptime & (RTC_TR_PM)) >> 16);  
 8005ad6:	70cf      	strb	r7, [r1, #3]

  /* Fill the Date structure fields with the read parameters */
  RTC_StampDateStruct->RTC_Year = 0;
 8005ad8:	70d4      	strb	r4, [r2, #3]
  RTC_StampDateStruct->RTC_Month = (uint8_t)((tmpdate & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8005ada:	7056      	strb	r6, [r2, #1]
  RTC_StampDateStruct->RTC_Date = (uint8_t)(tmpdate & (RTC_DR_DT | RTC_DR_DU));
 8005adc:	7095      	strb	r5, [r2, #2]
  RTC_StampDateStruct->RTC_WeekDay = (uint8_t)((tmpdate & (RTC_DR_WDU)) >> 13);
 8005ade:	7013      	strb	r3, [r2, #0]

  /* Check the input parameters format */
  if (RTC_Format == RTC_Format_BIN)
 8005ae0:	2800      	cmp	r0, #0
 8005ae2:	d135      	bne.n	8005b50 <RTC_GetTimeStamp+0xb4>
  {
    /* Convert the Time structure parameters to Binary format */
    RTC_StampTimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Hours);
 8005ae4:	780e      	ldrb	r6, [r1, #0]
    RTC_StampTimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Minutes);
 8005ae6:	784c      	ldrb	r4, [r1, #1]
    RTC_StampTimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Seconds);
 8005ae8:	788b      	ldrb	r3, [r1, #2]
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint8_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8005aea:	0937      	lsrs	r7, r6, #4
 8005aec:	0925      	lsrs	r5, r4, #4
 8005aee:	0918      	lsrs	r0, r3, #4
  return (tmp + (Value & (uint8_t)0x0F));
 8005af0:	f006 060f 	and.w	r6, r6, #15
 8005af4:	f004 040f 	and.w	r4, r4, #15
 8005af8:	f003 030f 	and.w	r3, r3, #15
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint8_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8005afc:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8005b00:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8005b04:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 8005b08:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8005b0c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8005b10:	eb06 0747 	add.w	r7, r6, r7, lsl #1

  /* Check the input parameters format */
  if (RTC_Format == RTC_Format_BIN)
  {
    /* Convert the Time structure parameters to Binary format */
    RTC_StampTimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Hours);
 8005b14:	700f      	strb	r7, [r1, #0]
    RTC_StampTimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Minutes);
 8005b16:	704d      	strb	r5, [r1, #1]
    RTC_StampTimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Seconds);
 8005b18:	7088      	strb	r0, [r1, #2]

    /* Convert the Date structure parameters to Binary format */
    RTC_StampDateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Month);
 8005b1a:	7855      	ldrb	r5, [r2, #1]
    RTC_StampDateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Date);
 8005b1c:	7890      	ldrb	r0, [r2, #2]
    RTC_StampDateStruct->RTC_WeekDay = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_WeekDay);
 8005b1e:	7813      	ldrb	r3, [r2, #0]
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint8_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8005b20:	092e      	lsrs	r6, r5, #4
 8005b22:	0904      	lsrs	r4, r0, #4
 8005b24:	0919      	lsrs	r1, r3, #4
 8005b26:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 8005b2a:	f005 050f 	and.w	r5, r5, #15
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint8_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8005b2e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 8005b32:	f000 000f 	and.w	r0, r0, #15
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint8_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8005b36:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 8005b3a:	f003 030f 	and.w	r3, r3, #15
 8005b3e:	eb05 0646 	add.w	r6, r5, r6, lsl #1
 8005b42:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8005b46:	eb03 0141 	add.w	r1, r3, r1, lsl #1
    RTC_StampTimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Hours);
    RTC_StampTimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Minutes);
    RTC_StampTimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Seconds);

    /* Convert the Date structure parameters to Binary format */
    RTC_StampDateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Month);
 8005b4a:	7056      	strb	r6, [r2, #1]
    RTC_StampDateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Date);
 8005b4c:	7094      	strb	r4, [r2, #2]
    RTC_StampDateStruct->RTC_WeekDay = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_WeekDay);
 8005b4e:	7011      	strb	r1, [r2, #0]
  }
}
 8005b50:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8005b54:	4770      	bx	lr
 8005b56:	bf00      	nop

08005b58 <RTC_GetTimeStampSubSecond>:
  * @retval RTC current timestamp Subseconds value.
  */
uint32_t RTC_GetTimeStampSubSecond(void)
{
  /* Get timestamp subseconds values from the correspondent registers */
  return (uint32_t)(RTC->TSSSR);
 8005b58:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8005b5c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8005b60:	6b98      	ldr	r0, [r3, #56]	; 0x38
}
 8005b62:	4770      	bx	lr

08005b64 <RTC_TamperTriggerConfig>:
  assert_param(IS_RTC_TAMPER_TRIGGER(RTC_TamperTrigger));
 
  if (RTC_TamperTrigger == RTC_TamperTrigger_RisingEdge)
  {  
    /* Configure the RTC_TAFCR register */
    RTC->TAFCR &= (uint32_t)((uint32_t)~(RTC_Tamper << 1));	
 8005b64:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8005b68:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8005b6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER(RTC_Tamper)); 
  assert_param(IS_RTC_TAMPER_TRIGGER(RTC_TamperTrigger));
 
  if (RTC_TamperTrigger == RTC_TamperTrigger_RisingEdge)
 8005b6e:	b119      	cbz	r1, 8005b78 <RTC_TamperTriggerConfig+0x14>
    RTC->TAFCR &= (uint32_t)((uint32_t)~(RTC_Tamper << 1));	
  }
  else
  { 
    /* Configure the RTC_TAFCR register */
    RTC->TAFCR |= (uint32_t)(RTC_Tamper << 1);  
 8005b70:	ea42 0040 	orr.w	r0, r2, r0, lsl #1
 8005b74:	6418      	str	r0, [r3, #64]	; 0x40
 8005b76:	4770      	bx	lr
  assert_param(IS_RTC_TAMPER_TRIGGER(RTC_TamperTrigger));
 
  if (RTC_TamperTrigger == RTC_TamperTrigger_RisingEdge)
  {  
    /* Configure the RTC_TAFCR register */
    RTC->TAFCR &= (uint32_t)((uint32_t)~(RTC_Tamper << 1));	
 8005b78:	ea22 0040 	bic.w	r0, r2, r0, lsl #1
 8005b7c:	6418      	str	r0, [r3, #64]	; 0x40
 8005b7e:	4770      	bx	lr

08005b80 <RTC_TamperCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected Tamper pin */
    RTC->TAFCR |= (uint32_t)RTC_Tamper;
 8005b80:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8005b84:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8005b88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER(RTC_Tamper));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005b8a:	b919      	cbnz	r1, 8005b94 <RTC_TamperCmd+0x14>
    RTC->TAFCR |= (uint32_t)RTC_Tamper;
  }
  else
  {
    /* Disable the selected Tamper pin */
    RTC->TAFCR &= (uint32_t)~RTC_Tamper;    
 8005b8c:	ea22 0000 	bic.w	r0, r2, r0
 8005b90:	6418      	str	r0, [r3, #64]	; 0x40
 8005b92:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected Tamper pin */
    RTC->TAFCR |= (uint32_t)RTC_Tamper;
 8005b94:	4310      	orrs	r0, r2
 8005b96:	6418      	str	r0, [r3, #64]	; 0x40
 8005b98:	4770      	bx	lr
 8005b9a:	bf00      	nop

08005b9c <RTC_TamperFilterConfig>:
{
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER_FILTER(RTC_TamperFilter));
   
  /* Clear TAMPFLT[1:0] bits in the RTC_TAFCR register */
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFLT);
 8005b9c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8005ba0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8005ba4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ba6:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 8005baa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure the RTC_TAFCR register */
  RTC->TAFCR |= (uint32_t)RTC_TamperFilter;
 8005bac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005bae:	4302      	orrs	r2, r0
 8005bb0:	641a      	str	r2, [r3, #64]	; 0x40
}
 8005bb2:	4770      	bx	lr

08005bb4 <RTC_TamperSamplingFreqConfig>:
{
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER_SAMPLING_FREQ(RTC_TamperSamplingFreq));
 
  /* Clear TAMPFREQ[2:0] bits in the RTC_TAFCR register */
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFREQ);
 8005bb4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8005bb8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8005bbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005bbe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005bc2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure the RTC_TAFCR register */
  RTC->TAFCR |= (uint32_t)RTC_TamperSamplingFreq;
 8005bc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005bc6:	4302      	orrs	r2, r0
 8005bc8:	641a      	str	r2, [r3, #64]	; 0x40
}
 8005bca:	4770      	bx	lr

08005bcc <RTC_TamperPinsPrechargeDuration>:
{
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER_PRECHARGE_DURATION(RTC_TamperPrechargeDuration));
   
  /* Clear TAMPPRCH[1:0] bits in the RTC_TAFCR register */
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPPRCH);
 8005bcc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8005bd0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8005bd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005bd6:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8005bda:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure the RTC_TAFCR register */
  RTC->TAFCR |= (uint32_t)RTC_TamperPrechargeDuration;
 8005bdc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005bde:	4302      	orrs	r2, r0
 8005be0:	641a      	str	r2, [r3, #64]	; 0x40
}
 8005be2:	4770      	bx	lr

08005be4 <RTC_TimeStampOnTamperDetectionCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
   
  if (NewState != DISABLE)
  {
    /* Save timestamp on tamper detection event */
    RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPTS;
 8005be4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8005be8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8005bec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
void RTC_TimeStampOnTamperDetectionCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
   
  if (NewState != DISABLE)
 8005bee:	b918      	cbnz	r0, 8005bf8 <RTC_TimeStampOnTamperDetectionCmd+0x14>
    RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPTS;
  }
  else
  {
    /* Tamper detection does not cause a timestamp to be saved */
    RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPTS;    
 8005bf0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005bf4:	641a      	str	r2, [r3, #64]	; 0x40
 8005bf6:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
   
  if (NewState != DISABLE)
  {
    /* Save timestamp on tamper detection event */
    RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPTS;
 8005bf8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005bfc:	641a      	str	r2, [r3, #64]	; 0x40
 8005bfe:	4770      	bx	lr

08005c00 <RTC_TamperPullUpCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
 if (NewState != DISABLE)
  {
    /* Enable precharge of the selected Tamper pin */
    RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPPUDIS; 
 8005c00:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8005c04:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8005c08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
void RTC_TamperPullUpCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
 if (NewState != DISABLE)
 8005c0a:	b918      	cbnz	r0, 8005c14 <RTC_TamperPullUpCmd+0x14>
    RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPPUDIS; 
  }
  else
  {
    /* Disable precharge of the selected Tamper pin */
    RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPPUDIS;    
 8005c0c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c10:	641a      	str	r2, [r3, #64]	; 0x40
 8005c12:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
 if (NewState != DISABLE)
  {
    /* Enable precharge of the selected Tamper pin */
    RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPPUDIS; 
 8005c14:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005c18:	641a      	str	r2, [r3, #64]	; 0x40
 8005c1a:	4770      	bx	lr

08005c1c <RTC_WriteBackupRegister>:
  *                          specify the register.
  * @param  Data: Data to be written in the specified RTC Backup data register.                     
  * @retval None
  */
void RTC_WriteBackupRegister(uint32_t RTC_BKP_DR, uint32_t Data)
{
 8005c1c:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
  
  /* Check the parameters */
  assert_param(IS_RTC_BKP(RTC_BKP_DR));

  tmp = RTC_BASE + 0x50;
 8005c1e:	f642 0350 	movw	r3, #10320	; 0x2850
 8005c22:	f2c4 0300 	movt	r3, #16384	; 0x4000
  * @param  Data: Data to be written in the specified RTC Backup data register.                     
  * @retval None
  */
void RTC_WriteBackupRegister(uint32_t RTC_BKP_DR, uint32_t Data)
{
  __IO uint32_t tmp = 0;
 8005c26:	2200      	movs	r2, #0
 8005c28:	9201      	str	r2, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_RTC_BKP(RTC_BKP_DR));

  tmp = RTC_BASE + 0x50;
 8005c2a:	9301      	str	r3, [sp, #4]
  tmp += (RTC_BKP_DR * 4);
 8005c2c:	9b01      	ldr	r3, [sp, #4]
 8005c2e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8005c32:	9301      	str	r3, [sp, #4]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8005c34:	9b01      	ldr	r3, [sp, #4]
 8005c36:	6019      	str	r1, [r3, #0]
}
 8005c38:	b002      	add	sp, #8
 8005c3a:	4770      	bx	lr

08005c3c <RTC_ReadBackupRegister>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
  *                          specify the register.                   
  * @retval None
  */
uint32_t RTC_ReadBackupRegister(uint32_t RTC_BKP_DR)
{
 8005c3c:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
  
  /* Check the parameters */
  assert_param(IS_RTC_BKP(RTC_BKP_DR));

  tmp = RTC_BASE + 0x50;
 8005c3e:	f642 0350 	movw	r3, #10320	; 0x2850
 8005c42:	f2c4 0300 	movt	r3, #16384	; 0x4000
  *                          specify the register.                   
  * @retval None
  */
uint32_t RTC_ReadBackupRegister(uint32_t RTC_BKP_DR)
{
  __IO uint32_t tmp = 0;
 8005c46:	2200      	movs	r2, #0
 8005c48:	9201      	str	r2, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_RTC_BKP(RTC_BKP_DR));

  tmp = RTC_BASE + 0x50;
 8005c4a:	9301      	str	r3, [sp, #4]
  tmp += (RTC_BKP_DR * 4);
 8005c4c:	9b01      	ldr	r3, [sp, #4]
 8005c4e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8005c52:	9301      	str	r3, [sp, #4]
  
  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8005c54:	9b01      	ldr	r3, [sp, #4]
 8005c56:	6818      	ldr	r0, [r3, #0]
}
 8005c58:	b002      	add	sp, #8
 8005c5a:	4770      	bx	lr

08005c5c <RTC_TamperPinSelection>:
void RTC_TamperPinSelection(uint32_t RTC_TamperPin)
{
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER_PIN(RTC_TamperPin));
  
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPINSEL);
 8005c5c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8005c60:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8005c64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c66:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005c6a:	641a      	str	r2, [r3, #64]	; 0x40
  RTC->TAFCR |= (uint32_t)(RTC_TamperPin);  
 8005c6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c6e:	4302      	orrs	r2, r0
 8005c70:	641a      	str	r2, [r3, #64]	; 0x40
}
 8005c72:	4770      	bx	lr

08005c74 <RTC_TimeStampPinSelection>:
void RTC_TimeStampPinSelection(uint32_t RTC_TimeStampPin)
{
  /* Check the parameters */
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));
  
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TSINSEL);
 8005c74:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8005c78:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8005c7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c7e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8005c82:	641a      	str	r2, [r3, #64]	; 0x40
  RTC->TAFCR |= (uint32_t)(RTC_TimeStampPin);  
 8005c84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c86:	4302      	orrs	r2, r0
 8005c88:	641a      	str	r2, [r3, #64]	; 0x40
}
 8005c8a:	4770      	bx	lr

08005c8c <RTC_OutputTypeConfig>:
void RTC_OutputTypeConfig(uint32_t RTC_OutputType)
{
  /* Check the parameters */
  assert_param(IS_RTC_OUTPUT_TYPE(RTC_OutputType));
  
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_ALARMOUTTYPE);
 8005c8c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8005c90:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8005c94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c96:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005c9a:	641a      	str	r2, [r3, #64]	; 0x40
  RTC->TAFCR |= (uint32_t)(RTC_OutputType);  
 8005c9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c9e:	4302      	orrs	r2, r0
 8005ca0:	641a      	str	r2, [r3, #64]	; 0x40
}
 8005ca2:	4770      	bx	lr

08005ca4 <RTC_SynchroShiftConfig>:
  /* Check the parameters */
  assert_param(IS_RTC_SHIFT_ADD1S(RTC_ShiftAdd1S));
  assert_param(IS_RTC_SHIFT_SUBFS(RTC_ShiftSubFS));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8005ca4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8005ca8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8005cac:	22ca      	movs	r2, #202	; 0xca
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Shift registers are configured
  *          - ERROR: RTC Shift registers are not configured
*/
ErrorStatus RTC_SynchroShiftConfig(uint32_t RTC_ShiftAdd1S, uint32_t RTC_ShiftSubFS)
{
 8005cae:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_RTC_SHIFT_ADD1S(RTC_ShiftAdd1S));
  assert_param(IS_RTC_SHIFT_SUBFS(RTC_ShiftSubFS));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8005cb0:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8005cb2:	2253      	movs	r2, #83	; 0x53
 8005cb4:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Check if a Shift is pending*/
  if ((RTC->ISR & RTC_ISR_SHPF) != RESET)
 8005cb6:	68da      	ldr	r2, [r3, #12]
 8005cb8:	0712      	lsls	r2, r2, #28
 8005cba:	d50b      	bpl.n	8005cd4 <RTC_SynchroShiftConfig+0x30>
  {
    /* Wait until the shift is completed*/
    while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
 8005cbc:	68da      	ldr	r2, [r3, #12]
 8005cbe:	0712      	lsls	r2, r2, #28
 8005cc0:	d508      	bpl.n	8005cd4 <RTC_SynchroShiftConfig+0x30>
 8005cc2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005cc6:	e001      	b.n	8005ccc <RTC_SynchroShiftConfig+0x28>
 8005cc8:	3a01      	subs	r2, #1
 8005cca:	d003      	beq.n	8005cd4 <RTC_SynchroShiftConfig+0x30>
 8005ccc:	68dc      	ldr	r4, [r3, #12]
 8005cce:	f014 0f08 	tst.w	r4, #8
 8005cd2:	d1f9      	bne.n	8005cc8 <RTC_SynchroShiftConfig+0x24>
      shpfcount++;
    }
  }

  /* Check if the Shift pending is completed or if there is no Shift operation at all*/
  if ((RTC->ISR & RTC_ISR_SHPF) == RESET)
 8005cd4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8005cd8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8005cdc:	68da      	ldr	r2, [r3, #12]
 8005cde:	f012 0208 	ands.w	r2, r2, #8
 8005ce2:	d114      	bne.n	8005d0e <RTC_SynchroShiftConfig+0x6a>
  {
    /* check if the reference clock detection is disabled */
    if((RTC->CR & RTC_CR_REFCKON) == RESET)
 8005ce4:	689c      	ldr	r4, [r3, #8]
 8005ce6:	f014 0f10 	tst.w	r4, #16
        status = SUCCESS;
      }
    }
    else
    {
      status = ERROR;
 8005cea:	bf18      	it	ne
 8005cec:	4610      	movne	r0, r2

  /* Check if the Shift pending is completed or if there is no Shift operation at all*/
  if ((RTC->ISR & RTC_ISR_SHPF) == RESET)
  {
    /* check if the reference clock detection is disabled */
    if((RTC->CR & RTC_CR_REFCKON) == RESET)
 8005cee:	d006      	beq.n	8005cfe <RTC_SynchroShiftConfig+0x5a>
  {
    status = ERROR;
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 8005cf0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8005cf4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8005cf8:	21ff      	movs	r1, #255	; 0xff
 8005cfa:	6259      	str	r1, [r3, #36]	; 0x24
  
  return (ErrorStatus)(status);
}
 8005cfc:	bd10      	pop	{r4, pc}
  {
    /* check if the reference clock detection is disabled */
    if((RTC->CR & RTC_CR_REFCKON) == RESET)
    {
      /* Configure the Shift settings */
      RTC->SHIFTR = (uint32_t)(uint32_t)(RTC_ShiftSubFS) | (uint32_t)(RTC_ShiftAdd1S);
 8005cfe:	4301      	orrs	r1, r0
 8005d00:	62d9      	str	r1, [r3, #44]	; 0x2c
    
      if(RTC_WaitForSynchro() == ERROR)
 8005d02:	f7ff fa63 	bl	80051cc <RTC_WaitForSynchro>
      {
        status = ERROR;
 8005d06:	3000      	adds	r0, #0
 8005d08:	bf18      	it	ne
 8005d0a:	2001      	movne	r0, #1
 8005d0c:	e7f0      	b.n	8005cf0 <RTC_SynchroShiftConfig+0x4c>
      status = ERROR;
    }
  }
  else
  {
    status = ERROR;
 8005d0e:	2000      	movs	r0, #0
 8005d10:	e7ee      	b.n	8005cf0 <RTC_SynchroShiftConfig+0x4c>
 8005d12:	bf00      	nop

08005d14 <RTC_ITConfig>:
  /* Check the parameters */
  assert_param(IS_RTC_CONFIG_IT(RTC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8005d14:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8005d18:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8005d1c:	22ca      	movs	r2, #202	; 0xca
 8005d1e:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8005d20:	2253      	movs	r2, #83	; 0x53
 8005d22:	625a      	str	r2, [r3, #36]	; 0x24

  if (NewState != DISABLE)
  {
    /* Configure the Interrupts in the RTC_CR register */
    RTC->CR |= (uint32_t)(RTC_IT & ~RTC_TAFCR_TAMPIE);
 8005d24:	689a      	ldr	r2, [r3, #8]

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
  RTC->WPR = 0x53;

  if (NewState != DISABLE)
 8005d26:	b989      	cbnz	r1, 8005d4c <RTC_ITConfig+0x38>
    RTC->TAFCR |= (uint32_t)(RTC_IT & RTC_TAFCR_TAMPIE);
  }
  else
  {
    /* Configure the Interrupts in the RTC_CR register */
    RTC->CR &= (uint32_t)~(RTC_IT & (uint32_t)~RTC_TAFCR_TAMPIE);
 8005d28:	f020 0104 	bic.w	r1, r0, #4
 8005d2c:	ea22 0201 	bic.w	r2, r2, r1
 8005d30:	609a      	str	r2, [r3, #8]
    /* Configure the Tamper Interrupt in the RTC_TAFCR */
    RTC->TAFCR &= (uint32_t)~(RTC_IT & RTC_TAFCR_TAMPIE);
 8005d32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d34:	f000 0004 	and.w	r0, r0, #4
 8005d38:	ea22 0000 	bic.w	r0, r2, r0
 8005d3c:	6418      	str	r0, [r3, #64]	; 0x40
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8005d3e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8005d42:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8005d46:	22ff      	movs	r2, #255	; 0xff
 8005d48:	625a      	str	r2, [r3, #36]	; 0x24
}
 8005d4a:	4770      	bx	lr
  RTC->WPR = 0x53;

  if (NewState != DISABLE)
  {
    /* Configure the Interrupts in the RTC_CR register */
    RTC->CR |= (uint32_t)(RTC_IT & ~RTC_TAFCR_TAMPIE);
 8005d4c:	f020 0104 	bic.w	r1, r0, #4
 8005d50:	430a      	orrs	r2, r1
 8005d52:	609a      	str	r2, [r3, #8]
    /* Configure the Tamper Interrupt in the RTC_TAFCR */
    RTC->TAFCR |= (uint32_t)(RTC_IT & RTC_TAFCR_TAMPIE);
 8005d54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d56:	f000 0004 	and.w	r0, r0, #4
 8005d5a:	4310      	orrs	r0, r2
 8005d5c:	6418      	str	r0, [r3, #64]	; 0x40
 8005d5e:	e7ee      	b.n	8005d3e <RTC_ITConfig+0x2a>

08005d60 <RTC_GetFlagStatus>:
  
  /* Check the parameters */
  assert_param(IS_RTC_GET_FLAG(RTC_FLAG));
  
  /* Get all the flags */
  tmpreg = (uint32_t)(RTC->ISR & RTC_FLAGS_MASK);
 8005d60:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8005d64:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8005d68:	f643 737f 	movw	r3, #16255	; 0x3f7f
 8005d6c:	68d2      	ldr	r2, [r2, #12]
 8005d6e:	f2c0 0301 	movt	r3, #1
 8005d72:	4013      	ands	r3, r2
  
  /* Return the status of the flag */
  if ((tmpreg & RTC_FLAG) != (uint32_t)RESET)
  {
    bitstatus = SET;
 8005d74:	4203      	tst	r3, r0
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8005d76:	bf0c      	ite	eq
 8005d78:	2000      	moveq	r0, #0
 8005d7a:	2001      	movne	r0, #1
 8005d7c:	4770      	bx	lr
 8005d7e:	bf00      	nop

08005d80 <RTC_ClearFlag>:
{
  /* Check the parameters */
  assert_param(IS_RTC_CLEAR_FLAG(RTC_FLAG));

  /* Clear the Flags in the RTC_ISR register */
  RTC->ISR = (uint32_t)((uint32_t)(~((RTC_FLAG | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR & RTC_ISR_INIT)));  
 8005d80:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8005d84:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8005d88:	b282      	uxth	r2, r0
 8005d8a:	68d9      	ldr	r1, [r3, #12]
 8005d8c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005d90:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8005d94:	ea61 0202 	orn	r2, r1, r2
 8005d98:	60da      	str	r2, [r3, #12]
}
 8005d9a:	4770      	bx	lr

08005d9c <RTC_GetITStatus>:
 
  /* Check the parameters */
  assert_param(IS_RTC_GET_IT(RTC_IT));
  
  /* Get the TAMPER Interrupt enable bit and pending bit */
  tmpreg = (uint32_t)(RTC->TAFCR & (RTC_TAFCR_TAMPIE));
 8005d9c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8005da0:	f2c4 0300 	movt	r3, #16384	; 0x4000
  *            @arg RTC_IT_ALRA: Alarm A interrupt 
  *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt 
  * @retval The new state of RTC_IT (SET or RESET).
  */
ITStatus RTC_GetITStatus(uint32_t RTC_IT)
{
 8005da4:	b410      	push	{r4}
 
  /* Check the parameters */
  assert_param(IS_RTC_GET_IT(RTC_IT));
  
  /* Get the TAMPER Interrupt enable bit and pending bit */
  tmpreg = (uint32_t)(RTC->TAFCR & (RTC_TAFCR_TAMPIE));
 8005da6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 
  /* Get the Interrupt enable Status */
  enablestatus = (uint32_t)((RTC->CR & RTC_IT) | (tmpreg & (RTC_IT >> 15)));
 8005da8:	6899      	ldr	r1, [r3, #8]
  
  /* Get the Interrupt pending bit */
  tmpreg = (uint32_t)((RTC->ISR & (uint32_t)(RTC_IT >> 4)));
 8005daa:	68dc      	ldr	r4, [r3, #12]
 
  /* Check the parameters */
  assert_param(IS_RTC_GET_IT(RTC_IT));
  
  /* Get the TAMPER Interrupt enable bit and pending bit */
  tmpreg = (uint32_t)(RTC->TAFCR & (RTC_TAFCR_TAMPIE));
 8005dac:	f002 0204 	and.w	r2, r2, #4
 
  /* Get the Interrupt enable Status */
  enablestatus = (uint32_t)((RTC->CR & RTC_IT) | (tmpreg & (RTC_IT >> 15)));
 8005db0:	ea02 32d0 	and.w	r2, r2, r0, lsr #15
 8005db4:	ea00 0301 	and.w	r3, r0, r1
  
  /* Get the Interrupt pending bit */
  tmpreg = (uint32_t)((RTC->ISR & (uint32_t)(RTC_IT >> 4)));
  
  /* Get the status of the Interrupt */
  if ((enablestatus != (uint32_t)RESET) && ((tmpreg & 0x0000FFFF) != (uint32_t)RESET))
 8005db8:	4313      	orrs	r3, r2
  {
    bitstatus = SET;
  }
  else
  {
    bitstatus = RESET;
 8005dba:	bf08      	it	eq
 8005dbc:	4618      	moveq	r0, r3
  
  /* Get the Interrupt pending bit */
  tmpreg = (uint32_t)((RTC->ISR & (uint32_t)(RTC_IT >> 4)));
  
  /* Get the status of the Interrupt */
  if ((enablestatus != (uint32_t)RESET) && ((tmpreg & 0x0000FFFF) != (uint32_t)RESET))
 8005dbe:	d005      	beq.n	8005dcc <RTC_GetITStatus+0x30>
 
  /* Get the Interrupt enable Status */
  enablestatus = (uint32_t)((RTC->CR & RTC_IT) | (tmpreg & (RTC_IT >> 15)));
  
  /* Get the Interrupt pending bit */
  tmpreg = (uint32_t)((RTC->ISR & (uint32_t)(RTC_IT >> 4)));
 8005dc0:	b2a4      	uxth	r4, r4
  *            @arg RTC_IT_ALRB: Alarm B interrupt 
  *            @arg RTC_IT_ALRA: Alarm A interrupt 
  *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt 
  * @retval The new state of RTC_IT (SET or RESET).
  */
ITStatus RTC_GetITStatus(uint32_t RTC_IT)
 8005dc2:	ea14 1410 	ands.w	r4, r4, r0, lsr #4
  tmpreg = (uint32_t)((RTC->ISR & (uint32_t)(RTC_IT >> 4)));
  
  /* Get the status of the Interrupt */
  if ((enablestatus != (uint32_t)RESET) && ((tmpreg & 0x0000FFFF) != (uint32_t)RESET))
  {
    bitstatus = SET;
 8005dc6:	bf0c      	ite	eq
 8005dc8:	2000      	moveq	r0, #0
 8005dca:	2001      	movne	r0, #1
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8005dcc:	bc10      	pop	{r4}
 8005dce:	4770      	bx	lr

08005dd0 <RTC_ClearITPendingBit>:

  /* Get the RTC_ISR Interrupt pending bits mask */
  tmpreg = (uint32_t)(RTC_IT >> 4);

  /* Clear the interrupt pending bits in the RTC_ISR register */
  RTC->ISR = (uint32_t)((uint32_t)(~((tmpreg | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR & RTC_ISR_INIT))); 
 8005dd0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8005dd4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8005dd8:	f3c0 120f 	ubfx	r2, r0, #4, #16
 8005ddc:	68d9      	ldr	r1, [r3, #12]
 8005dde:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005de2:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8005de6:	ea61 0202 	orn	r2, r1, r2
 8005dea:	60da      	str	r2, [r3, #12]
}
 8005dec:	4770      	bx	lr
 8005dee:	bf00      	nop

08005df0 <SDIO_DeInit>:
  * @brief  Deinitializes the SDIO peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void SDIO_DeInit(void)
{
 8005df0:	b508      	push	{r3, lr}
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_SDIO, ENABLE);
 8005df2:	2101      	movs	r1, #1
 8005df4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005df8:	f7ff f898 	bl	8004f2c <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_SDIO, DISABLE);
 8005dfc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005e00:	2100      	movs	r1, #0
}
 8005e02:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  * @retval None
  */
void SDIO_DeInit(void)
{
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_SDIO, ENABLE);
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_SDIO, DISABLE);
 8005e06:	f7ff b891 	b.w	8004f2c <RCC_APB2PeriphResetCmd>
 8005e0a:	bf00      	nop

08005e0c <SDIO_Init>:
  * @param  SDIO_InitStruct : pointer to a SDIO_InitTypeDef structure 
  *         that contains the configuration information for the SDIO peripheral.
  * @retval None
  */
void SDIO_Init(SDIO_InitTypeDef* SDIO_InitStruct)
{
 8005e0c:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_SDIO_BUS_WIDE(SDIO_InitStruct->SDIO_BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(SDIO_InitStruct->SDIO_HardwareFlowControl)); 
   
/*---------------------------- SDIO CLKCR Configuration ------------------------*/  
  /* Get the SDIO CLKCR value */
  tmpreg = SDIO->CLKCR;
 8005e0e:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
  /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
 8005e12:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8005e16:	6882      	ldr	r2, [r0, #8]
 8005e18:	68c7      	ldr	r7, [r0, #12]
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
 8005e1a:	6806      	ldr	r6, [r0, #0]
 8005e1c:	6904      	ldr	r4, [r0, #16]
  /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
 8005e1e:	7d01      	ldrb	r1, [r0, #20]
  assert_param(IS_SDIO_BUS_WIDE(SDIO_InitStruct->SDIO_BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(SDIO_InitStruct->SDIO_HardwareFlowControl)); 
   
/*---------------------------- SDIO CLKCR Configuration ------------------------*/  
  /* Get the SDIO CLKCR value */
  tmpreg = SDIO->CLKCR;
 8005e20:	f2c4 0301 	movt	r3, #16385	; 0x4001
  /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
 8005e24:	ea4c 0202 	orr.w	r2, ip, r2
  assert_param(IS_SDIO_BUS_WIDE(SDIO_InitStruct->SDIO_BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(SDIO_InitStruct->SDIO_HardwareFlowControl)); 
   
/*---------------------------- SDIO CLKCR Configuration ------------------------*/  
  /* Get the SDIO CLKCR value */
  tmpreg = SDIO->CLKCR;
 8005e28:	685d      	ldr	r5, [r3, #4]
  /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
 8005e2a:	433a      	orrs	r2, r7
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
 8005e2c:	4332      	orrs	r2, r6
/*---------------------------- SDIO CLKCR Configuration ------------------------*/  
  /* Get the SDIO CLKCR value */
  tmpreg = SDIO->CLKCR;
  
  /* Clear CLKDIV, PWRSAV, BYPASS, WIDBUS, NEGEDGE, HWFC_EN bits */
  tmpreg &= CLKCR_CLEAR_MASK;
 8005e2e:	f425 40fd 	bic.w	r0, r5, #32384	; 0x7e80
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
 8005e32:	4322      	orrs	r2, r4
/*---------------------------- SDIO CLKCR Configuration ------------------------*/  
  /* Get the SDIO CLKCR value */
  tmpreg = SDIO->CLKCR;
  
  /* Clear CLKDIV, PWRSAV, BYPASS, WIDBUS, NEGEDGE, HWFC_EN bits */
  tmpreg &= CLKCR_CLEAR_MASK;
 8005e34:	f020 007f 	bic.w	r0, r0, #127	; 0x7f
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
             SDIO_InitStruct->SDIO_ClockEdge | SDIO_InitStruct->SDIO_HardwareFlowControl); 
 8005e38:	4302      	orrs	r2, r0
  /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
 8005e3a:	430a      	orrs	r2, r1
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
             SDIO_InitStruct->SDIO_ClockEdge | SDIO_InitStruct->SDIO_HardwareFlowControl); 
  
  /* Write to SDIO CLKCR */
  SDIO->CLKCR = tmpreg;
 8005e3c:	605a      	str	r2, [r3, #4]
}
 8005e3e:	bcf0      	pop	{r4, r5, r6, r7}
 8005e40:	4770      	bx	lr
 8005e42:	bf00      	nop

08005e44 <SDIO_StructInit>:
  * @retval None
  */
void SDIO_StructInit(SDIO_InitTypeDef* SDIO_InitStruct)
{
  /* SDIO_InitStruct members default value */
  SDIO_InitStruct->SDIO_ClockDiv = 0x00;
 8005e44:	2300      	movs	r3, #0
 8005e46:	7503      	strb	r3, [r0, #20]
  SDIO_InitStruct->SDIO_ClockEdge = SDIO_ClockEdge_Rising;
 8005e48:	6003      	str	r3, [r0, #0]
  SDIO_InitStruct->SDIO_ClockBypass = SDIO_ClockBypass_Disable;
 8005e4a:	6043      	str	r3, [r0, #4]
  SDIO_InitStruct->SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
 8005e4c:	6083      	str	r3, [r0, #8]
  SDIO_InitStruct->SDIO_BusWide = SDIO_BusWide_1b;
 8005e4e:	60c3      	str	r3, [r0, #12]
  SDIO_InitStruct->SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
 8005e50:	6103      	str	r3, [r0, #16]
}
 8005e52:	4770      	bx	lr

08005e54 <SDIO_ClockCmd>:
void SDIO_ClockCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CLKCR_CLKEN_BB = (uint32_t)NewState;
 8005e54:	f248 03a0 	movw	r3, #32928	; 0x80a0
 8005e58:	f2c4 2325 	movt	r3, #16933	; 0x4225
 8005e5c:	6018      	str	r0, [r3, #0]
}
 8005e5e:	4770      	bx	lr

08005e60 <SDIO_SetPowerState>:
void SDIO_SetPowerState(uint32_t SDIO_PowerState)
{
  /* Check the parameters */
  assert_param(IS_SDIO_POWER_STATE(SDIO_PowerState));
  
  SDIO->POWER = SDIO_PowerState;
 8005e60:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8005e64:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005e68:	6018      	str	r0, [r3, #0]
}
 8005e6a:	4770      	bx	lr

08005e6c <SDIO_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(void)
{
  return (SDIO->POWER & (~PWR_PWRCTRL_MASK));
 8005e6c:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8005e70:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005e74:	6818      	ldr	r0, [r3, #0]
}
 8005e76:	f000 0003 	and.w	r0, r0, #3
 8005e7a:	4770      	bx	lr

08005e7c <SDIO_SendCommand>:
  assert_param(IS_SDIO_WAIT(SDIO_CmdInitStruct->SDIO_Wait));
  assert_param(IS_SDIO_CPSM(SDIO_CmdInitStruct->SDIO_CPSM));
  
/*---------------------------- SDIO ARG Configuration ------------------------*/
  /* Set the SDIO Argument value */
  SDIO->ARG = SDIO_CmdInitStruct->SDIO_Argument;
 8005e7c:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8005e80:	6802      	ldr	r2, [r0, #0]
 8005e82:	f2c4 0301 	movt	r3, #16385	; 0x4001
  *         structure that contains the configuration information for the SDIO 
  *         command.
  * @retval None
  */
void SDIO_SendCommand(SDIO_CmdInitTypeDef *SDIO_CmdInitStruct)
{
 8005e86:	b430      	push	{r4, r5}
  assert_param(IS_SDIO_WAIT(SDIO_CmdInitStruct->SDIO_Wait));
  assert_param(IS_SDIO_CPSM(SDIO_CmdInitStruct->SDIO_CPSM));
  
/*---------------------------- SDIO ARG Configuration ------------------------*/
  /* Set the SDIO Argument value */
  SDIO->ARG = SDIO_CmdInitStruct->SDIO_Argument;
 8005e88:	609a      	str	r2, [r3, #8]
  tmpreg &= CMD_CLEAR_MASK;
  /* Set CMDINDEX bits according to SDIO_CmdIndex value */
  /* Set WAITRESP bits according to SDIO_Response value */
  /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
  /* Set CPSMEN bits according to SDIO_CPSM value */
  tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
 8005e8a:	6885      	ldr	r5, [r0, #8]
 8005e8c:	6842      	ldr	r2, [r0, #4]
           | SDIO_CmdInitStruct->SDIO_Wait | SDIO_CmdInitStruct->SDIO_CPSM;
 8005e8e:	68c4      	ldr	r4, [r0, #12]
  /* Set the SDIO Argument value */
  SDIO->ARG = SDIO_CmdInitStruct->SDIO_Argument;
  
/*---------------------------- SDIO CMD Configuration ------------------------*/  
  /* Get the SDIO CMD value */
  tmpreg = SDIO->CMD;
 8005e90:	68d9      	ldr	r1, [r3, #12]
  /* Set CMDINDEX bits according to SDIO_CmdIndex value */
  /* Set WAITRESP bits according to SDIO_Response value */
  /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
  /* Set CPSMEN bits according to SDIO_CPSM value */
  tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
           | SDIO_CmdInitStruct->SDIO_Wait | SDIO_CmdInitStruct->SDIO_CPSM;
 8005e92:	6900      	ldr	r0, [r0, #16]
  tmpreg &= CMD_CLEAR_MASK;
  /* Set CMDINDEX bits according to SDIO_CmdIndex value */
  /* Set WAITRESP bits according to SDIO_Response value */
  /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
  /* Set CPSMEN bits according to SDIO_CPSM value */
  tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
 8005e94:	432a      	orrs	r2, r5
  
/*---------------------------- SDIO CMD Configuration ------------------------*/  
  /* Get the SDIO CMD value */
  tmpreg = SDIO->CMD;
  /* Clear CMDINDEX, WAITRESP, WAITINT, WAITPEND, CPSMEN bits */
  tmpreg &= CMD_CLEAR_MASK;
 8005e96:	f421 61ff 	bic.w	r1, r1, #2040	; 0x7f8
  /* Set CMDINDEX bits according to SDIO_CmdIndex value */
  /* Set WAITRESP bits according to SDIO_Response value */
  /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
  /* Set CPSMEN bits according to SDIO_CPSM value */
  tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
           | SDIO_CmdInitStruct->SDIO_Wait | SDIO_CmdInitStruct->SDIO_CPSM;
 8005e9a:	4322      	orrs	r2, r4
  
/*---------------------------- SDIO CMD Configuration ------------------------*/  
  /* Get the SDIO CMD value */
  tmpreg = SDIO->CMD;
  /* Clear CMDINDEX, WAITRESP, WAITINT, WAITPEND, CPSMEN bits */
  tmpreg &= CMD_CLEAR_MASK;
 8005e9c:	f021 0107 	bic.w	r1, r1, #7
  /* Set CMDINDEX bits according to SDIO_CmdIndex value */
  /* Set WAITRESP bits according to SDIO_Response value */
  /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
  /* Set CPSMEN bits according to SDIO_CPSM value */
  tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
           | SDIO_CmdInitStruct->SDIO_Wait | SDIO_CmdInitStruct->SDIO_CPSM;
 8005ea0:	4302      	orrs	r2, r0
  tmpreg &= CMD_CLEAR_MASK;
  /* Set CMDINDEX bits according to SDIO_CmdIndex value */
  /* Set WAITRESP bits according to SDIO_Response value */
  /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
  /* Set CPSMEN bits according to SDIO_CPSM value */
  tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
 8005ea2:	430a      	orrs	r2, r1
           | SDIO_CmdInitStruct->SDIO_Wait | SDIO_CmdInitStruct->SDIO_CPSM;
  
  /* Write to SDIO CMD */
  SDIO->CMD = tmpreg;
 8005ea4:	60da      	str	r2, [r3, #12]
}
 8005ea6:	bc30      	pop	{r4, r5}
 8005ea8:	4770      	bx	lr
 8005eaa:	bf00      	nop

08005eac <SDIO_CmdStructInit>:
  * @retval None
  */
void SDIO_CmdStructInit(SDIO_CmdInitTypeDef* SDIO_CmdInitStruct)
{
  /* SDIO_CmdInitStruct members default value */
  SDIO_CmdInitStruct->SDIO_Argument = 0x00;
 8005eac:	2300      	movs	r3, #0
 8005eae:	6003      	str	r3, [r0, #0]
  SDIO_CmdInitStruct->SDIO_CmdIndex = 0x00;
 8005eb0:	6043      	str	r3, [r0, #4]
  SDIO_CmdInitStruct->SDIO_Response = SDIO_Response_No;
 8005eb2:	6083      	str	r3, [r0, #8]
  SDIO_CmdInitStruct->SDIO_Wait = SDIO_Wait_No;
 8005eb4:	60c3      	str	r3, [r0, #12]
  SDIO_CmdInitStruct->SDIO_CPSM = SDIO_CPSM_Disable;
 8005eb6:	6103      	str	r3, [r0, #16]
}
 8005eb8:	4770      	bx	lr
 8005eba:	bf00      	nop

08005ebc <SDIO_GetCommandResponse>:
  * @param  None
  * @retval Returns the command index of the last command response received.
  */
uint8_t SDIO_GetCommandResponse(void)
{
  return (uint8_t)(SDIO->RESPCMD);
 8005ebc:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8005ec0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005ec4:	6918      	ldr	r0, [r3, #16]
}
 8005ec6:	b2c0      	uxtb	r0, r0
 8005ec8:	4770      	bx	lr
 8005eca:	bf00      	nop

08005ecc <SDIO_GetResponse>:
  __IO uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(SDIO_RESP));

  tmp = SDIO_RESP_ADDR + SDIO_RESP;
 8005ecc:	f642 4314 	movw	r3, #11284	; 0x2c14
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4
  * @retval The Corresponding response register value.
  */
uint32_t SDIO_GetResponse(uint32_t SDIO_RESP)
{
 8005ed0:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(SDIO_RESP));

  tmp = SDIO_RESP_ADDR + SDIO_RESP;
 8005ed2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005ed6:	18c3      	adds	r3, r0, r3
  *            @arg SDIO_RESP4: Response Register 4
  * @retval The Corresponding response register value.
  */
uint32_t SDIO_GetResponse(uint32_t SDIO_RESP)
{
  __IO uint32_t tmp = 0;
 8005ed8:	2200      	movs	r2, #0
 8005eda:	9201      	str	r2, [sp, #4]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(SDIO_RESP));

  tmp = SDIO_RESP_ADDR + SDIO_RESP;
 8005edc:	9301      	str	r3, [sp, #4]
  
  return (*(__IO uint32_t *) tmp); 
 8005ede:	9b01      	ldr	r3, [sp, #4]
 8005ee0:	6818      	ldr	r0, [r3, #0]
}
 8005ee2:	b002      	add	sp, #8
 8005ee4:	4770      	bx	lr
 8005ee6:	bf00      	nop

08005ee8 <SDIO_DataConfig>:
  assert_param(IS_SDIO_TRANSFER_MODE(SDIO_DataInitStruct->SDIO_TransferMode));
  assert_param(IS_SDIO_DPSM(SDIO_DataInitStruct->SDIO_DPSM));

/*---------------------------- SDIO DTIMER Configuration ---------------------*/
  /* Set the SDIO Data TimeOut value */
  SDIO->DTIMER = SDIO_DataInitStruct->SDIO_DataTimeOut;
 8005ee8:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8005eec:	6802      	ldr	r2, [r0, #0]
 8005eee:	f2c4 0301 	movt	r3, #16385	; 0x4001
  * @param  SDIO_DataInitStruct : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDIO command.
  * @retval None
  */
void SDIO_DataConfig(SDIO_DataInitTypeDef* SDIO_DataInitStruct)
{
 8005ef2:	b430      	push	{r4, r5}
  assert_param(IS_SDIO_TRANSFER_MODE(SDIO_DataInitStruct->SDIO_TransferMode));
  assert_param(IS_SDIO_DPSM(SDIO_DataInitStruct->SDIO_DPSM));

/*---------------------------- SDIO DTIMER Configuration ---------------------*/
  /* Set the SDIO Data TimeOut value */
  SDIO->DTIMER = SDIO_DataInitStruct->SDIO_DataTimeOut;
 8005ef4:	625a      	str	r2, [r3, #36]	; 0x24

/*---------------------------- SDIO DLEN Configuration -----------------------*/
  /* Set the SDIO DataLength value */
  SDIO->DLEN = SDIO_DataInitStruct->SDIO_DataLength;
 8005ef6:	6842      	ldr	r2, [r0, #4]
 8005ef8:	629a      	str	r2, [r3, #40]	; 0x28
  tmpreg &= DCTRL_CLEAR_MASK;
  /* Set DEN bit according to SDIO_DPSM value */
  /* Set DTMODE bit according to SDIO_TransferMode value */
  /* Set DTDIR bit according to SDIO_TransferDir value */
  /* Set DBCKSIZE bits according to SDIO_DataBlockSize value */
  tmpreg |= (uint32_t)SDIO_DataInitStruct->SDIO_DataBlockSize | SDIO_DataInitStruct->SDIO_TransferDir
 8005efa:	68c5      	ldr	r5, [r0, #12]
 8005efc:	6882      	ldr	r2, [r0, #8]
           | SDIO_DataInitStruct->SDIO_TransferMode | SDIO_DataInitStruct->SDIO_DPSM;
 8005efe:	6904      	ldr	r4, [r0, #16]
  /* Set the SDIO DataLength value */
  SDIO->DLEN = SDIO_DataInitStruct->SDIO_DataLength;

/*---------------------------- SDIO DCTRL Configuration ----------------------*/  
  /* Get the SDIO DCTRL value */
  tmpreg = SDIO->DCTRL;
 8005f00:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  /* Set DEN bit according to SDIO_DPSM value */
  /* Set DTMODE bit according to SDIO_TransferMode value */
  /* Set DTDIR bit according to SDIO_TransferDir value */
  /* Set DBCKSIZE bits according to SDIO_DataBlockSize value */
  tmpreg |= (uint32_t)SDIO_DataInitStruct->SDIO_DataBlockSize | SDIO_DataInitStruct->SDIO_TransferDir
           | SDIO_DataInitStruct->SDIO_TransferMode | SDIO_DataInitStruct->SDIO_DPSM;
 8005f02:	6940      	ldr	r0, [r0, #20]
  tmpreg &= DCTRL_CLEAR_MASK;
  /* Set DEN bit according to SDIO_DPSM value */
  /* Set DTMODE bit according to SDIO_TransferMode value */
  /* Set DTDIR bit according to SDIO_TransferDir value */
  /* Set DBCKSIZE bits according to SDIO_DataBlockSize value */
  tmpreg |= (uint32_t)SDIO_DataInitStruct->SDIO_DataBlockSize | SDIO_DataInitStruct->SDIO_TransferDir
 8005f04:	432a      	orrs	r2, r5
           | SDIO_DataInitStruct->SDIO_TransferMode | SDIO_DataInitStruct->SDIO_DPSM;
 8005f06:	4322      	orrs	r2, r4

/*---------------------------- SDIO DCTRL Configuration ----------------------*/  
  /* Get the SDIO DCTRL value */
  tmpreg = SDIO->DCTRL;
  /* Clear DEN, DTMODE, DTDIR and DBCKSIZE bits */
  tmpreg &= DCTRL_CLEAR_MASK;
 8005f08:	f021 01f7 	bic.w	r1, r1, #247	; 0xf7
  /* Set DEN bit according to SDIO_DPSM value */
  /* Set DTMODE bit according to SDIO_TransferMode value */
  /* Set DTDIR bit according to SDIO_TransferDir value */
  /* Set DBCKSIZE bits according to SDIO_DataBlockSize value */
  tmpreg |= (uint32_t)SDIO_DataInitStruct->SDIO_DataBlockSize | SDIO_DataInitStruct->SDIO_TransferDir
           | SDIO_DataInitStruct->SDIO_TransferMode | SDIO_DataInitStruct->SDIO_DPSM;
 8005f0c:	4302      	orrs	r2, r0
  tmpreg &= DCTRL_CLEAR_MASK;
  /* Set DEN bit according to SDIO_DPSM value */
  /* Set DTMODE bit according to SDIO_TransferMode value */
  /* Set DTDIR bit according to SDIO_TransferDir value */
  /* Set DBCKSIZE bits according to SDIO_DataBlockSize value */
  tmpreg |= (uint32_t)SDIO_DataInitStruct->SDIO_DataBlockSize | SDIO_DataInitStruct->SDIO_TransferDir
 8005f0e:	430a      	orrs	r2, r1
           | SDIO_DataInitStruct->SDIO_TransferMode | SDIO_DataInitStruct->SDIO_DPSM;

  /* Write to SDIO DCTRL */
  SDIO->DCTRL = tmpreg;
 8005f10:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005f12:	bc30      	pop	{r4, r5}
 8005f14:	4770      	bx	lr
 8005f16:	bf00      	nop

08005f18 <SDIO_DataStructInit>:
  */
void SDIO_DataStructInit(SDIO_DataInitTypeDef* SDIO_DataInitStruct)
{
  /* SDIO_DataInitStruct members default value */
  SDIO_DataInitStruct->SDIO_DataTimeOut = 0xFFFFFFFF;
  SDIO_DataInitStruct->SDIO_DataLength = 0x00;
 8005f18:	2300      	movs	r3, #0
  * @retval None
  */
void SDIO_DataStructInit(SDIO_DataInitTypeDef* SDIO_DataInitStruct)
{
  /* SDIO_DataInitStruct members default value */
  SDIO_DataInitStruct->SDIO_DataTimeOut = 0xFFFFFFFF;
 8005f1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  SDIO_DataInitStruct->SDIO_DataLength = 0x00;
 8005f1e:	e880 000c 	stmia.w	r0, {r2, r3}
  SDIO_DataInitStruct->SDIO_DataBlockSize = SDIO_DataBlockSize_1b;
 8005f22:	6083      	str	r3, [r0, #8]
  SDIO_DataInitStruct->SDIO_TransferDir = SDIO_TransferDir_ToCard;
 8005f24:	60c3      	str	r3, [r0, #12]
  SDIO_DataInitStruct->SDIO_TransferMode = SDIO_TransferMode_Block;  
 8005f26:	6103      	str	r3, [r0, #16]
  SDIO_DataInitStruct->SDIO_DPSM = SDIO_DPSM_Disable;
 8005f28:	6143      	str	r3, [r0, #20]
}
 8005f2a:	4770      	bx	lr

08005f2c <SDIO_GetDataCounter>:
  * @param  None
  * @retval Number of remaining data bytes to be transferred
  */
uint32_t SDIO_GetDataCounter(void)
{ 
  return SDIO->DCOUNT;
 8005f2c:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8005f30:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005f34:	6b18      	ldr	r0, [r3, #48]	; 0x30
}
 8005f36:	4770      	bx	lr

08005f38 <SDIO_ReadData>:
  * @param  None
  * @retval Data received
  */
uint32_t SDIO_ReadData(void)
{ 
  return SDIO->FIFO;
 8005f38:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8005f3c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005f40:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
}
 8005f44:	4770      	bx	lr
 8005f46:	bf00      	nop

08005f48 <SDIO_WriteData>:
  * @param  Data: 32-bit data word to write.
  * @retval None
  */
void SDIO_WriteData(uint32_t Data)
{ 
  SDIO->FIFO = Data;
 8005f48:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8005f4c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005f50:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
}
 8005f54:	4770      	bx	lr
 8005f56:	bf00      	nop

08005f58 <SDIO_GetFIFOCount>:
  * @param  None
  * @retval Remaining number of words.
  */
uint32_t SDIO_GetFIFOCount(void)
{ 
  return SDIO->FIFOCNT;
 8005f58:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8005f5c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005f60:	6c98      	ldr	r0, [r3, #72]	; 0x48
}
 8005f62:	4770      	bx	lr

08005f64 <SDIO_StartSDIOReadWait>:
void SDIO_StartSDIOReadWait(FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_RWSTART_BB = (uint32_t) NewState;
 8005f64:	f248 53a0 	movw	r3, #34208	; 0x85a0
 8005f68:	f2c4 2325 	movt	r3, #16933	; 0x4225
 8005f6c:	6018      	str	r0, [r3, #0]
}
 8005f6e:	4770      	bx	lr

08005f70 <SDIO_StopSDIOReadWait>:
void SDIO_StopSDIOReadWait(FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_RWSTOP_BB = (uint32_t) NewState;
 8005f70:	f248 53a4 	movw	r3, #34212	; 0x85a4
 8005f74:	f2c4 2325 	movt	r3, #16933	; 0x4225
 8005f78:	6018      	str	r0, [r3, #0]
}
 8005f7a:	4770      	bx	lr

08005f7c <SDIO_SetSDIOReadWaitMode>:
void SDIO_SetSDIOReadWaitMode(uint32_t SDIO_ReadWaitMode)
{
  /* Check the parameters */
  assert_param(IS_SDIO_READWAIT_MODE(SDIO_ReadWaitMode));
  
  *(__IO uint32_t *) DCTRL_RWMOD_BB = SDIO_ReadWaitMode;
 8005f7c:	f248 53a8 	movw	r3, #34216	; 0x85a8
 8005f80:	f2c4 2325 	movt	r3, #16933	; 0x4225
 8005f84:	6018      	str	r0, [r3, #0]
}
 8005f86:	4770      	bx	lr

08005f88 <SDIO_SetSDIOOperation>:
void SDIO_SetSDIOOperation(FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_SDIOEN_BB = (uint32_t)NewState;
 8005f88:	f248 53ac 	movw	r3, #34220	; 0x85ac
 8005f8c:	f2c4 2325 	movt	r3, #16933	; 0x4225
 8005f90:	6018      	str	r0, [r3, #0]
}
 8005f92:	4770      	bx	lr

08005f94 <SDIO_SendSDIOSuspendCmd>:
void SDIO_SendSDIOSuspendCmd(FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_SDIOSUSPEND_BB = (uint32_t)NewState;
 8005f94:	f248 13ac 	movw	r3, #33196	; 0x81ac
 8005f98:	f2c4 2325 	movt	r3, #16933	; 0x4225
 8005f9c:	6018      	str	r0, [r3, #0]
}
 8005f9e:	4770      	bx	lr

08005fa0 <SDIO_CommandCompletionCmd>:
void SDIO_CommandCompletionCmd(FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_ENCMDCOMPL_BB = (uint32_t)NewState;
 8005fa0:	f248 13b0 	movw	r3, #33200	; 0x81b0
 8005fa4:	f2c4 2325 	movt	r3, #16933	; 0x4225
 8005fa8:	6018      	str	r0, [r3, #0]
}
 8005faa:	4770      	bx	lr

08005fac <SDIO_CEATAITCmd>:
void SDIO_CEATAITCmd(FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_NIEN_BB = (uint32_t)((~((uint32_t)NewState)) & ((uint32_t)0x1));
 8005fac:	f248 13b4 	movw	r3, #33204	; 0x81b4
 8005fb0:	f000 0001 	and.w	r0, r0, #1
 8005fb4:	f2c4 2325 	movt	r3, #16933	; 0x4225
 8005fb8:	f080 0001 	eor.w	r0, r0, #1
 8005fbc:	6018      	str	r0, [r3, #0]
}
 8005fbe:	4770      	bx	lr

08005fc0 <SDIO_SendCEATACmd>:
void SDIO_SendCEATACmd(FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_ATACMD_BB = (uint32_t)NewState;
 8005fc0:	f248 13b8 	movw	r3, #33208	; 0x81b8
 8005fc4:	f2c4 2325 	movt	r3, #16933	; 0x4225
 8005fc8:	6018      	str	r0, [r3, #0]
}
 8005fca:	4770      	bx	lr

08005fcc <SDIO_DMACmd>:
void SDIO_DMACmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_DMAEN_BB = (uint32_t)NewState;
 8005fcc:	f248 538c 	movw	r3, #34188	; 0x858c
 8005fd0:	f2c4 2325 	movt	r3, #16933	; 0x4225
 8005fd4:	6018      	str	r0, [r3, #0]
}
 8005fd6:	4770      	bx	lr

08005fd8 <SDIO_ITConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the SDIO interrupts */
    SDIO->MASK |= SDIO_IT;
 8005fd8:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8005fdc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005fe0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
{
  /* Check the parameters */
  assert_param(IS_SDIO_IT(SDIO_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005fe2:	b919      	cbnz	r1, 8005fec <SDIO_ITConfig+0x14>
    SDIO->MASK |= SDIO_IT;
  }
  else
  {
    /* Disable the SDIO interrupts */
    SDIO->MASK &= ~SDIO_IT;
 8005fe4:	ea22 0000 	bic.w	r0, r2, r0
 8005fe8:	63d8      	str	r0, [r3, #60]	; 0x3c
 8005fea:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the SDIO interrupts */
    SDIO->MASK |= SDIO_IT;
 8005fec:	4310      	orrs	r0, r2
 8005fee:	63d8      	str	r0, [r3, #60]	; 0x3c
 8005ff0:	4770      	bx	lr
 8005ff2:	bf00      	nop

08005ff4 <SDIO_GetFlagStatus>:
  FlagStatus bitstatus = RESET;
  
  /* Check the parameters */
  assert_param(IS_SDIO_FLAG(SDIO_FLAG));
  
  if ((SDIO->STA & SDIO_FLAG) != (uint32_t)RESET)
 8005ff4:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8005ff8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005ffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  {
    bitstatus = SET;
 8005ffe:	4218      	tst	r0, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8006000:	bf0c      	ite	eq
 8006002:	2000      	moveq	r0, #0
 8006004:	2001      	movne	r0, #1
 8006006:	4770      	bx	lr

08006008 <SDIO_ClearFlag>:
void SDIO_ClearFlag(uint32_t SDIO_FLAG)
{ 
  /* Check the parameters */
  assert_param(IS_SDIO_CLEAR_FLAG(SDIO_FLAG));
   
  SDIO->ICR = SDIO_FLAG;
 8006008:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800600c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006010:	6398      	str	r0, [r3, #56]	; 0x38
}
 8006012:	4770      	bx	lr

08006014 <SDIO_GetITStatus>:
{ 
  ITStatus bitstatus = RESET;
  
  /* Check the parameters */
  assert_param(IS_SDIO_GET_IT(SDIO_IT));
  if ((SDIO->STA & SDIO_IT) != (uint32_t)RESET)  
 8006014:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8006018:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800601c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  {
    bitstatus = SET;
 800601e:	4218      	tst	r0, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8006020:	bf0c      	ite	eq
 8006022:	2000      	moveq	r0, #0
 8006024:	2001      	movne	r0, #1
 8006026:	4770      	bx	lr

08006028 <SDIO_ClearITPendingBit>:
void SDIO_ClearITPendingBit(uint32_t SDIO_IT)
{ 
  /* Check the parameters */
  assert_param(IS_SDIO_CLEAR_IT(SDIO_IT));
   
  SDIO->ICR = SDIO_IT;
 8006028:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800602c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006030:	6398      	str	r0, [r3, #56]	; 0x38
}
 8006032:	4770      	bx	lr

08006034 <SPI_I2S_DeInit>:
  *         is managed by the I2S peripheral clock).
  *             
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 8006034:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 8006036:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800603a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800603e:	4298      	cmp	r0, r3
 8006040:	d018      	beq.n	8006074 <SPI_I2S_DeInit+0x40>
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
  }
  else if (SPIx == SPI2)
 8006042:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8006046:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800604a:	4298      	cmp	r0, r3
 800604c:	d01e      	beq.n	800608c <SPI_I2S_DeInit+0x58>
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
    }
  else
  {
    if (SPIx == SPI3)
 800604e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006052:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8006056:	4298      	cmp	r0, r3
 8006058:	d000      	beq.n	800605c <SPI_I2S_DeInit+0x28>
 800605a:	bd08      	pop	{r3, pc}
    {
      /* Enable SPI3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 800605c:	2101      	movs	r1, #1
 800605e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006062:	f7fe ff55 	bl	8004f10 <RCC_APB1PeriphResetCmd>
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 8006066:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800606a:	2100      	movs	r1, #0
    }
  }
}
 800606c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if (SPIx == SPI3)
    {
      /* Enable SPI3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 8006070:	f7fe bf4e 	b.w	8004f10 <RCC_APB1PeriphResetCmd>
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 8006074:	2101      	movs	r1, #1
 8006076:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800607a:	f7fe ff57 	bl	8004f2c <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 800607e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006082:	2100      	movs	r1, #0
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
    }
  }
}
 8006084:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  if (SPIx == SPI1)
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 8006088:	f7fe bf50 	b.w	8004f2c <RCC_APB2PeriphResetCmd>
  }
  else if (SPIx == SPI2)
  {
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 800608c:	2101      	movs	r1, #1
 800608e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8006092:	f7fe ff3d 	bl	8004f10 <RCC_APB1PeriphResetCmd>
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 8006096:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800609a:	2100      	movs	r1, #0
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
    }
  }
}
 800609c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else if (SPIx == SPI2)
  {
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 80060a0:	f7fe bf36 	b.w	8004f10 <RCC_APB1PeriphResetCmd>

080060a4 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 80060a4:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80060a8:	880b      	ldrh	r3, [r1, #0]
 80060aa:	f8b1 a002 	ldrh.w	sl, [r1, #2]
 80060ae:	f8b1 9004 	ldrh.w	r9, [r1, #4]
 80060b2:	f8b1 8006 	ldrh.w	r8, [r1, #6]
 80060b6:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 80060ba:	894f      	ldrh	r7, [r1, #10]
 80060bc:	898e      	ldrh	r6, [r1, #12]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 80060be:	8805      	ldrh	r5, [r0, #0]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80060c0:	89cc      	ldrh	r4, [r1, #14]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 80060c2:	8a0a      	ldrh	r2, [r1, #16]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80060c4:	ea4a 0303 	orr.w	r3, sl, r3
 80060c8:	ea43 0309 	orr.w	r3, r3, r9
 80060cc:	ea43 0308 	orr.w	r3, r3, r8
 80060d0:	ea43 030c 	orr.w	r3, r3, ip
 80060d4:	433b      	orrs	r3, r7
 80060d6:	4333      	orrs	r3, r6

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 80060d8:	f405 5141 	and.w	r1, r5, #12352	; 0x3040
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80060dc:	4323      	orrs	r3, r4
 80060de:	430b      	orrs	r3, r1
 80060e0:	b29b      	uxth	r3, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 80060e2:	8003      	strh	r3, [r0, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 80060e4:	8b83      	ldrh	r3, [r0, #28]
 80060e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80060ea:	041b      	lsls	r3, r3, #16
 80060ec:	0c1b      	lsrs	r3, r3, #16
 80060ee:	8383      	strh	r3, [r0, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 80060f0:	8202      	strh	r2, [r0, #16]
}
 80060f2:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 80060f6:	4770      	bx	lr

080060f8 <I2S_Init>:
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 80060f8:	8b83      	ldrh	r3, [r0, #28]
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 80060fa:	688a      	ldr	r2, [r1, #8]
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 80060fc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006100:	f023 030f 	bic.w	r3, r3, #15
 8006104:	041b      	lsls	r3, r3, #16
 8006106:	0c1b      	lsrs	r3, r3, #16
 8006108:	8383      	strh	r3, [r0, #28]
  SPIx->I2SPR = 0x0002;
 800610a:	2302      	movs	r3, #2
 800610c:	8403      	strh	r3, [r0, #32]
  *         to the value of the the source clock frequency (in Hz).
  *  
  * @retval None
  */
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
 800610e:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
  SPIx->I2SPR = 0x0002;
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 8006112:	8b86      	ldrh	r6, [r0, #28]
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 8006114:	429a      	cmp	r2, r3
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
  SPIx->I2SPR = 0x0002;
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 8006116:	b2b6      	uxth	r6, r6
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 8006118:	d05d      	beq.n	80061d6 <I2S_Init+0xde>
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 800611a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800611e:	f2c4 0302 	movt	r3, #16386	; 0x4002
  }
  /* If the requested audio frequency is not the default, compute the prescaler */
  else
  {
    /* Check the frame length (For the Prescaler computing) *******************/
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 8006122:	888c      	ldrh	r4, [r1, #4]
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 8006124:	689d      	ldr	r5, [r3, #8]
      packetlength = 1;
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 2;
 8006126:	2c00      	cmp	r4, #0
 8006128:	bf0c      	ite	eq
 800612a:	f04f 0c01 	moveq.w	ip, #1
 800612e:	f04f 0c02 	movne.w	ip, #2
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 8006132:	022d      	lsls	r5, r5, #8
    {
      RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
 8006134:	bf42      	ittt	mi
 8006136:	689d      	ldrmi	r5, [r3, #8]
 8006138:	f425 0500 	bicmi.w	r5, r5, #8388608	; 0x800000
 800613c:	609d      	strmi	r5, [r3, #8]
    }    
    
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 800613e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8006142:	f2c4 0302 	movt	r3, #16386	; 0x4002
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
    
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 8006146:	f44f 5590 	mov.w	r5, #4608	; 0x1200
    {
      RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
    }    
    
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 800614a:	f8d3 8084 	ldr.w	r8, [r3, #132]	; 0x84
                      (RCC_PLLI2SCFGR_PLLI2SN >> 6));
    
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
 800614e:	f8d3 7084 	ldr.w	r7, [r3, #132]	; 0x84
                      (RCC_PLLI2SCFGR_PLLI2SR >> 28));
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
 8006152:	f8d3 9004 	ldr.w	r9, [r3, #4]
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
  #endif /* I2S_EXTERNAL_CLOCK_VAL */
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 8006156:	88cb      	ldrh	r3, [r1, #6]
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
                      (RCC_PLLI2SCFGR_PLLI2SR >> 28));
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
 8006158:	f009 093f 	and.w	r9, r9, #63	; 0x3f
    
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 800615c:	f2c0 057a 	movt	r5, #122	; 0x7a
 8006160:	fbb5 f5f9 	udiv	r5, r5, r9
    {
      RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
    }    
    
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 8006164:	f3c8 1888 	ubfx	r8, r8, #6, #9
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
    
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 8006168:	fb08 f505 	mul.w	r5, r8, r5
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
                      (RCC_PLLI2SCFGR_PLLI2SN >> 6));
    
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
 800616c:	f3c7 7702 	ubfx	r7, r7, #28, #3
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
  #endif /* I2S_EXTERNAL_CLOCK_VAL */
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 8006170:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
    
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 8006174:	fbb5 f5f7 	udiv	r5, r5, r7
  #endif /* I2S_EXTERNAL_CLOCK_VAL */
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 8006178:	d030      	beq.n	80061dc <I2S_Init+0xe4>
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 800617a:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
 800617e:	fbb5 f5fc 	udiv	r5, r5, ip
 8006182:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8006186:	006d      	lsls	r5, r5, #1
 8006188:	fbb5 f2f2 	udiv	r2, r5, r2
 800618c:	3205      	adds	r2, #5
    }
    
    /* Remove the flatting point */
    tmp = tmp / 10;  
 800618e:	f64c 45cd 	movw	r5, #52429	; 0xcccd
 8006192:	f6cc 45cc 	movt	r5, #52428	; 0xcccc
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8006196:	b292      	uxth	r2, r2
    }
    
    /* Remove the flatting point */
    tmp = tmp / 10;  
 8006198:	fba5 7202 	umull	r7, r2, r5, r2
 800619c:	08d2      	lsrs	r2, r2, #3
      
    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 800619e:	0855      	lsrs	r5, r2, #1
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 80061a0:	1eaf      	subs	r7, r5, #2
      
    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 80061a2:	f002 0201 	and.w	r2, r2, #1
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 80061a6:	2ffd      	cmp	r7, #253	; 0xfd
 80061a8:	bf94      	ite	ls
 80061aa:	ea45 2202 	orrls.w	r2, r5, r2, lsl #8
 80061ae:	2202      	movhi	r2, #2
  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 80061b0:	f8b1 c000 	ldrh.w	ip, [r1]

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 80061b4:	884f      	ldrh	r7, [r1, #2]
 80061b6:	898d      	ldrh	r5, [r1, #12]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 80061b8:	ea46 010c 	orr.w	r1, r6, ip
 80061bc:	f441 6100 	orr.w	r1, r1, #2048	; 0x800

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 80061c0:	4339      	orrs	r1, r7
 80061c2:	4329      	orrs	r1, r5
    i2sdiv = 2;
    i2sodd = 0;
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 80061c4:	4313      	orrs	r3, r2
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 80061c6:	b289      	uxth	r1, r1
    i2sdiv = 2;
    i2sodd = 0;
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 80061c8:	b29b      	uxth	r3, r3
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 80061ca:	430c      	orrs	r4, r1
    i2sdiv = 2;
    i2sodd = 0;
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 80061cc:	8403      	strh	r3, [r0, #32]
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  SPIx->I2SCFGR = tmpreg;
 80061ce:	8384      	strh	r4, [r0, #28]
}
 80061d0:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80061d4:	4770      	bx	lr
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 80061d6:	888c      	ldrh	r4, [r1, #4]
 80061d8:	88cb      	ldrh	r3, [r1, #6]
 80061da:	e7e9      	b.n	80061b0 <I2S_Init+0xb8>
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
    {
      /* MCLK output is enabled */
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 80061dc:	0a2d      	lsrs	r5, r5, #8
 80061de:	e7d0      	b.n	8006182 <I2S_Init+0x8a>

080061e0 <SPI_StructInit>:
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 80061e0:	2300      	movs	r3, #0
 80061e2:	8003      	strh	r3, [r0, #0]
  /* initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 80061e4:	8043      	strh	r3, [r0, #2]
  /* initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 80061e6:	8083      	strh	r3, [r0, #4]
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 80061e8:	80c3      	strh	r3, [r0, #6]
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 80061ea:	8103      	strh	r3, [r0, #8]
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 80061ec:	8143      	strh	r3, [r0, #10]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 80061ee:	8183      	strh	r3, [r0, #12]
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 80061f0:	81c3      	strh	r3, [r0, #14]
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 80061f2:	2307      	movs	r3, #7
 80061f4:	8203      	strh	r3, [r0, #16]
}
 80061f6:	4770      	bx	lr

080061f8 <I2S_StructInit>:
  */
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
{
/*--------------- Reset I2S init structure parameters values -----------------*/
  /* Initialize the I2S_Mode member */
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 80061f8:	2300      	movs	r3, #0
  
  /* Initialize the I2S_MCLKOutput member */
  I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
  
  /* Initialize the I2S_AudioFreq member */
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 80061fa:	2202      	movs	r2, #2
  */
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
{
/*--------------- Reset I2S init structure parameters values -----------------*/
  /* Initialize the I2S_Mode member */
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 80061fc:	8003      	strh	r3, [r0, #0]
  
  /* Initialize the I2S_Standard member */
  I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
 80061fe:	8043      	strh	r3, [r0, #2]
  
  /* Initialize the I2S_DataFormat member */
  I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
 8006200:	8083      	strh	r3, [r0, #4]
  
  /* Initialize the I2S_MCLKOutput member */
  I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
 8006202:	80c3      	strh	r3, [r0, #6]
  
  /* Initialize the I2S_AudioFreq member */
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 8006204:	6082      	str	r2, [r0, #8]
  
  /* Initialize the I2S_CPOL member */
  I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
 8006206:	8183      	strh	r3, [r0, #12]
}
 8006208:	4770      	bx	lr
 800620a:	bf00      	nop

0800620c <SPI_Cmd>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 800620c:	8803      	ldrh	r3, [r0, #0]
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800620e:	b929      	cbnz	r1, 800621c <SPI_Cmd+0x10>
    SPIx->CR1 |= SPI_CR1_SPE;
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 8006210:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006214:	041b      	lsls	r3, r3, #16
 8006216:	0c1b      	lsrs	r3, r3, #16
 8006218:	8003      	strh	r3, [r0, #0]
 800621a:	4770      	bx	lr
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 800621c:	b29b      	uxth	r3, r3
 800621e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006222:	8003      	strh	r3, [r0, #0]
 8006224:	4770      	bx	lr
 8006226:	bf00      	nop

08006228 <I2S_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 8006228:	8b83      	ldrh	r3, [r0, #28]
{
  /* Check the parameters */
  assert_param(IS_SPI_23_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800622a:	b929      	cbnz	r1, 8006238 <I2S_Cmd+0x10>
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
  }
  else
  {
    /* Disable the selected SPI peripheral in I2S mode */
    SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
 800622c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006230:	041b      	lsls	r3, r3, #16
 8006232:	0c1b      	lsrs	r3, r3, #16
 8006234:	8383      	strh	r3, [r0, #28]
 8006236:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 8006238:	b29b      	uxth	r3, r3
 800623a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800623e:	8383      	strh	r3, [r0, #28]
 8006240:	4770      	bx	lr
 8006242:	bf00      	nop

08006244 <SPI_DataSizeConfig>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DATASIZE(SPI_DataSize));
  /* Clear DFF bit */
  SPIx->CR1 &= (uint16_t)~SPI_DataSize_16b;
 8006244:	8803      	ldrh	r3, [r0, #0]
 8006246:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800624a:	041b      	lsls	r3, r3, #16
 800624c:	0c1b      	lsrs	r3, r3, #16
 800624e:	8003      	strh	r3, [r0, #0]
  /* Set new DFF bit value */
  SPIx->CR1 |= SPI_DataSize;
 8006250:	8803      	ldrh	r3, [r0, #0]
 8006252:	b29b      	uxth	r3, r3
 8006254:	430b      	orrs	r3, r1
 8006256:	8003      	strh	r3, [r0, #0]
}
 8006258:	4770      	bx	lr
 800625a:	bf00      	nop

0800625c <SPI_BiDirectionalLineConfig>:
void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
 800625c:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
  {
    /* Set the Tx only mode */
    SPIx->CR1 |= SPI_Direction_Tx;
 8006260:	8803      	ldrh	r3, [r0, #0]
void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
 8006262:	d005      	beq.n	8006270 <SPI_BiDirectionalLineConfig+0x14>
    SPIx->CR1 |= SPI_Direction_Tx;
  }
  else
  {
    /* Set the Rx only mode */
    SPIx->CR1 &= SPI_Direction_Rx;
 8006264:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006268:	041b      	lsls	r3, r3, #16
 800626a:	0c1b      	lsrs	r3, r3, #16
 800626c:	8003      	strh	r3, [r0, #0]
 800626e:	4770      	bx	lr
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
  {
    /* Set the Tx only mode */
    SPIx->CR1 |= SPI_Direction_Tx;
 8006270:	b29b      	uxth	r3, r3
 8006272:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006276:	8003      	strh	r3, [r0, #0]
 8006278:	4770      	bx	lr
 800627a:	bf00      	nop

0800627c <SPI_NSSInternalSoftwareConfig>:
void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 800627c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8006280:	4299      	cmp	r1, r3
  {
    /* Set NSS pin internally by software */
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 8006282:	8803      	ldrh	r3, [r0, #0]
void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 8006284:	d004      	beq.n	8006290 <SPI_NSSInternalSoftwareConfig+0x14>
  {
    /* Set NSS pin internally by software */
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 8006286:	b29b      	uxth	r3, r3
 8006288:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800628c:	8003      	strh	r3, [r0, #0]
 800628e:	4770      	bx	lr
  }
  else
  {
    /* Reset NSS pin internally by software */
    SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 8006290:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006294:	041b      	lsls	r3, r3, #16
 8006296:	0c1b      	lsrs	r3, r3, #16
 8006298:	8003      	strh	r3, [r0, #0]
 800629a:	4770      	bx	lr

0800629c <SPI_SSOutputCmd>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
 800629c:	8883      	ldrh	r3, [r0, #4]
void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800629e:	b929      	cbnz	r1, 80062ac <SPI_SSOutputCmd+0x10>
    SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
  }
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_SSOE);
 80062a0:	f023 0304 	bic.w	r3, r3, #4
 80062a4:	041b      	lsls	r3, r3, #16
 80062a6:	0c1b      	lsrs	r3, r3, #16
 80062a8:	8083      	strh	r3, [r0, #4]
 80062aa:	4770      	bx	lr
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	f043 0304 	orr.w	r3, r3, #4
 80062b2:	8083      	strh	r3, [r0, #4]
 80062b4:	4770      	bx	lr
 80062b6:	bf00      	nop

080062b8 <SPI_TIModeCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TI mode for the selected SPI peripheral */
    SPIx->CR2 |= SPI_CR2_FRF;
 80062b8:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80062ba:	b929      	cbnz	r1, 80062c8 <SPI_TIModeCmd+0x10>
    SPIx->CR2 |= SPI_CR2_FRF;
  }
  else
  {
    /* Disable the TI mode for the selected SPI peripheral */
    SPIx->CR2 &= (uint16_t)~SPI_CR2_FRF;
 80062bc:	f023 0310 	bic.w	r3, r3, #16
 80062c0:	041b      	lsls	r3, r3, #16
 80062c2:	0c1b      	lsrs	r3, r3, #16
 80062c4:	8083      	strh	r3, [r0, #4]
 80062c6:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TI mode for the selected SPI peripheral */
    SPIx->CR2 |= SPI_CR2_FRF;
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	f043 0310 	orr.w	r3, r3, #16
 80062ce:	8083      	strh	r3, [r0, #4]
 80062d0:	4770      	bx	lr
 80062d2:	bf00      	nop

080062d4 <I2S_FullDuplexConfig>:
  assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 80062d4:	8b83      	ldrh	r3, [r0, #28]
    }
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80062d6:	898a      	ldrh	r2, [r1, #12]
  assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 80062d8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80062dc:	f023 030f 	bic.w	r3, r3, #15
 80062e0:	041b      	lsls	r3, r3, #16
 80062e2:	0c1b      	lsrs	r3, r3, #16
 80062e4:	8383      	strh	r3, [r0, #28]
  I2Sxext->I2SPR = 0x0002;
 80062e6:	2302      	movs	r3, #2
 80062e8:	8403      	strh	r3, [r0, #32]
  * @note   The I2S full duplex extension can be configured in slave mode only.    
  *  
  * @retval None
  */
void I2S_FullDuplexConfig(SPI_TypeDef* I2Sxext, I2S_InitTypeDef* I2S_InitStruct)
{
 80062ea:	b470      	push	{r4, r5, r6}
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
  I2Sxext->I2SPR = 0x0002;
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
 80062ec:	8b86      	ldrh	r6, [r0, #28]
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 80062ee:	884d      	ldrh	r5, [r1, #2]
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 80062f0:	880b      	ldrh	r3, [r1, #0]
    }
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80062f2:	888c      	ldrh	r4, [r1, #4]
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
  I2Sxext->I2SPR = 0x0002;
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
 80062f4:	b2b1      	uxth	r1, r6
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 80062f6:	4329      	orrs	r1, r5
 80062f8:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 80062fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006300:	bf18      	it	ne
 8006302:	2b00      	cmpne	r3, #0
    }
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8006304:	ea41 0104 	orr.w	r1, r1, r4
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 8006308:	bf14      	ite	ne
 800630a:	2300      	movne	r3, #0
 800630c:	2301      	moveq	r3, #1
    }
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800630e:	ea41 0102 	orr.w	r1, r1, r2
  tmpreg = I2Sxext->I2SCFGR;
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
  {
    tmp = I2S_Mode_SlaveRx;
 8006312:	bf14      	ite	ne
 8006314:	461a      	movne	r2, r3
 8006316:	f44f 7280 	moveq.w	r2, #256	; 0x100
    }
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800631a:	b28b      	uxth	r3, r1
 800631c:	4313      	orrs	r3, r2
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  I2Sxext->I2SCFGR = tmpreg;
 800631e:	8383      	strh	r3, [r0, #28]
}
 8006320:	bc70      	pop	{r4, r5, r6}
 8006322:	4770      	bx	lr

08006324 <SPI_I2S_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 8006324:	8980      	ldrh	r0, [r0, #12]
}
 8006326:	b280      	uxth	r0, r0
 8006328:	4770      	bx	lr
 800632a:	bf00      	nop

0800632c <SPI_I2S_SendData>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 800632c:	8181      	strh	r1, [r0, #12]
}
 800632e:	4770      	bx	lr

08006330 <SPI_CalculateCRC>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI CRC calculation */
    SPIx->CR1 |= SPI_CR1_CRCEN;
 8006330:	8803      	ldrh	r3, [r0, #0]
void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8006332:	b929      	cbnz	r1, 8006340 <SPI_CalculateCRC+0x10>
    SPIx->CR1 |= SPI_CR1_CRCEN;
  }
  else
  {
    /* Disable the selected SPI CRC calculation */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCEN);
 8006334:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006338:	041b      	lsls	r3, r3, #16
 800633a:	0c1b      	lsrs	r3, r3, #16
 800633c:	8003      	strh	r3, [r0, #0]
 800633e:	4770      	bx	lr
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI CRC calculation */
    SPIx->CR1 |= SPI_CR1_CRCEN;
 8006340:	b29b      	uxth	r3, r3
 8006342:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006346:	8003      	strh	r3, [r0, #0]
 8006348:	4770      	bx	lr
 800634a:	bf00      	nop

0800634c <SPI_TransmitCRC>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Enable the selected SPI CRC transmission */
  SPIx->CR1 |= SPI_CR1_CRCNEXT;
 800634c:	8803      	ldrh	r3, [r0, #0]
 800634e:	b29b      	uxth	r3, r3
 8006350:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006354:	8003      	strh	r3, [r0, #0]
}
 8006356:	4770      	bx	lr

08006358 <SPI_GetCRC>:
{
  uint16_t crcreg = 0;
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_CRC(SPI_CRC));
  if (SPI_CRC != SPI_CRC_Rx)
 8006358:	2901      	cmp	r1, #1
  {
    /* Get the Tx CRC register */
    crcreg = SPIx->TXCRCR;
 800635a:	bf15      	itete	ne
 800635c:	8b00      	ldrhne	r0, [r0, #24]
  }
  else
  {
    /* Get the Rx CRC register */
    crcreg = SPIx->RXCRCR;
 800635e:	8a80      	ldrheq	r0, [r0, #20]
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_CRC(SPI_CRC));
  if (SPI_CRC != SPI_CRC_Rx)
  {
    /* Get the Tx CRC register */
    crcreg = SPIx->TXCRCR;
 8006360:	b280      	uxthne	r0, r0
  }
  else
  {
    /* Get the Rx CRC register */
    crcreg = SPIx->RXCRCR;
 8006362:	b280      	uxtheq	r0, r0
  }
  /* Return the selected CRC register */
  return crcreg;
}
 8006364:	4770      	bx	lr
 8006366:	bf00      	nop

08006368 <SPI_GetCRCPolynomial>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the CRC polynomial register */
  return SPIx->CRCPR;
 8006368:	8a00      	ldrh	r0, [r0, #16]
}
 800636a:	b280      	uxth	r0, r0
 800636c:	4770      	bx	lr
 800636e:	bf00      	nop

08006370 <SPI_I2S_DMACmd>:
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 8006370:	8883      	ldrh	r3, [r0, #4]
 8006372:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
 8006374:	b91a      	cbnz	r2, 800637e <SPI_I2S_DMACmd+0xe>
    SPIx->CR2 |= SPI_I2S_DMAReq;
  }
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 8006376:	ea23 0101 	bic.w	r1, r3, r1
 800637a:	8081      	strh	r1, [r0, #4]
 800637c:	4770      	bx	lr
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 800637e:	4319      	orrs	r1, r3
 8006380:	8081      	strh	r1, [r0, #4]
 8006382:	4770      	bx	lr

08006384 <SPI_I2S_ITConfig>:

  /* Get the SPI IT index */
  itpos = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 8006384:	2301      	movs	r3, #1
 8006386:	0909      	lsrs	r1, r1, #4
 8006388:	fa13 f101 	lsls.w	r1, r3, r1

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 800638c:	8883      	ldrh	r3, [r0, #4]

  /* Get the SPI IT index */
  itpos = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 800638e:	b289      	uxth	r1, r1

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 8006390:	b29b      	uxth	r3, r3
  itpos = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;

  if (NewState != DISABLE)
 8006392:	b91a      	cbnz	r2, 800639c <SPI_I2S_ITConfig+0x18>
    SPIx->CR2 |= itmask;
  }
  else
  {
    /* Disable the selected SPI interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
 8006394:	ea23 0101 	bic.w	r1, r3, r1
 8006398:	8081      	strh	r1, [r0, #4]
 800639a:	4770      	bx	lr
  itmask = (uint16_t)1 << (uint16_t)itpos;

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 800639c:	4319      	orrs	r1, r3
 800639e:	8081      	strh	r1, [r0, #4]
 80063a0:	4770      	bx	lr
 80063a2:	bf00      	nop

080063a4 <SPI_I2S_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 80063a4:	8903      	ldrh	r3, [r0, #8]
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 80063a6:	4219      	tst	r1, r3
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
}
 80063a8:	bf0c      	ite	eq
 80063aa:	2000      	moveq	r0, #0
 80063ac:	2001      	movne	r0, #1
 80063ae:	4770      	bx	lr

080063b0 <SPI_I2S_ClearFlag>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));
    
  /* Clear the selected SPI CRC Error (CRCERR) flag */
  SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
 80063b0:	43c9      	mvns	r1, r1
 80063b2:	b289      	uxth	r1, r1
 80063b4:	8101      	strh	r1, [r0, #8]
}
 80063b6:	4770      	bx	lr

080063b8 <SPI_I2S_GetITStatus>:
  *            @arg I2S_IT_UDR: Underrun interrupt.  
  *            @arg SPI_I2S_IT_TIFRFE: Format Error interrupt.  
  * @retval The new state of SPI_I2S_IT (SET or RESET).
  */
ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
{
 80063b8:	b410      	push	{r4}

  /* Set the IT mask */
  itmask = 0x01 << itmask;

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 80063ba:	8884      	ldrh	r4, [r0, #4]

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 80063bc:	8900      	ldrh	r0, [r0, #8]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));

  /* Get the SPI_I2S_IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 80063be:	2201      	movs	r2, #1
 80063c0:	f001 030f 	and.w	r3, r1, #15

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 80063c4:	b280      	uxth	r0, r0
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));

  /* Get the SPI_I2S_IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 80063c6:	fa12 f303 	lsls.w	r3, r2, r3

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 80063ca:	4018      	ands	r0, r3

  /* Set the IT mask */
  itmask = 0x01 << itmask;

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 80063cc:	b2a4      	uxth	r4, r4

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 80063ce:	d005      	beq.n	80063dc <SPI_I2S_GetITStatus+0x24>

  /* Get the SPI_I2S_IT IT mask */
  itmask = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = 0x01 << itmask;
 80063d0:	0909      	lsrs	r1, r1, #4
 80063d2:	408a      	lsls	r2, r1
  *            @arg SPI_IT_CRCERR: CRC Error interrupt.
  *            @arg I2S_IT_UDR: Underrun interrupt.  
  *            @arg SPI_I2S_IT_TIFRFE: Format Error interrupt.  
  * @retval The new state of SPI_I2S_IT (SET or RESET).
  */
ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
 80063d4:	4214      	tst	r4, r2

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
  {
    /* SPI_I2S_IT is set */
    bitstatus = SET;
 80063d6:	bf0c      	ite	eq
 80063d8:	2000      	moveq	r0, #0
 80063da:	2001      	movne	r0, #1
    /* SPI_I2S_IT is reset */
    bitstatus = RESET;
  }
  /* Return the SPI_I2S_IT status */
  return bitstatus;
}
 80063dc:	bc10      	pop	{r4}
 80063de:	4770      	bx	lr

080063e0 <SPI_I2S_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_IT(SPI_I2S_IT));

  /* Get the SPI_I2S IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 80063e0:	f001 010f 	and.w	r1, r1, #15
 80063e4:	2301      	movs	r3, #1
 80063e6:	fa13 f101 	lsls.w	r1, r3, r1

  /* Clear the selected SPI CRC Error (CRCERR) interrupt pending bit */
  SPIx->SR = (uint16_t)~itpos;
 80063ea:	43c9      	mvns	r1, r1
 80063ec:	b289      	uxth	r1, r1
 80063ee:	8101      	strh	r1, [r0, #8]
}
 80063f0:	4770      	bx	lr
 80063f2:	bf00      	nop

080063f4 <SYSCFG_DeInit>:
  *   registers to their default reset values.
  * @param  None
  * @retval None
  */
void SYSCFG_DeInit(void)
{
 80063f4:	b508      	push	{r3, lr}
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 80063f6:	2101      	movs	r1, #1
 80063f8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80063fc:	f7fe fd96 	bl	8004f2c <RCC_APB2PeriphResetCmd>
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, DISABLE);
 8006400:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8006404:	2100      	movs	r1, #0
}
 8006406:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  * @retval None
  */
void SYSCFG_DeInit(void)
{
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, ENABLE);
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, DISABLE);
 800640a:	f7fe bd8f 	b.w	8004f2c <RCC_APB2PeriphResetCmd>
 800640e:	bf00      	nop

08006410 <SYSCFG_MemoryRemapConfig>:
void SYSCFG_MemoryRemapConfig(uint8_t SYSCFG_MemoryRemap)
{
  /* Check the parameters */
  assert_param(IS_SYSCFG_MEMORY_REMAP_CONFING(SYSCFG_MemoryRemap));

  SYSCFG->MEMRMP = SYSCFG_MemoryRemap;
 8006410:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8006414:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006418:	6018      	str	r0, [r3, #0]
}
 800641a:	4770      	bx	lr

0800641c <SYSCFG_EXTILineConfig>:
  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 800641c:	088a      	lsrs	r2, r1, #2
 800641e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8006422:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006426:	3202      	adds	r2, #2

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8006428:	f001 0103 	and.w	r1, r1, #3
  *           This parameter can be EXTI_PinSourcex where x can be (0..15, except
  *           for EXTI_PortSourceGPIOI x can be (0..11).
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 800642c:	b430      	push	{r4, r5}

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 800642e:	0089      	lsls	r1, r1, #2
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8006430:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8006434:	240f      	movs	r4, #15
 8006436:	408c      	lsls	r4, r1
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8006438:	ea25 0404 	bic.w	r4, r5, r4
 800643c:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8006440:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8006444:	fa10 f101 	lsls.w	r1, r0, r1
 8006448:	430c      	orrs	r4, r1
 800644a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
}
 800644e:	bc30      	pop	{r4, r5}
 8006450:	4770      	bx	lr
 8006452:	bf00      	nop

08006454 <SYSCFG_ETH_MediaInterfaceConfig>:
  */
void SYSCFG_ETH_MediaInterfaceConfig(uint32_t SYSCFG_ETH_MediaInterface) 
{ 
  assert_param(IS_SYSCFG_ETH_MEDIA_INTERFACE(SYSCFG_ETH_MediaInterface)); 
  /* Configure MII_RMII selection bit */ 
  *(__IO uint32_t *) PMC_MII_RMII_SEL_BB = SYSCFG_ETH_MediaInterface; 
 8006454:	23dc      	movs	r3, #220	; 0xdc
 8006456:	f2c4 2327 	movt	r3, #16935	; 0x4227
 800645a:	6018      	str	r0, [r3, #0]
}
 800645c:	4770      	bx	lr
 800645e:	bf00      	nop

08006460 <SYSCFG_CompensationCellCmd>:
void SYSCFG_CompensationCellCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CMPCR_CMP_PD_BB = (uint32_t)NewState;
 8006460:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006464:	f2c4 2327 	movt	r3, #16935	; 0x4227
 8006468:	6018      	str	r0, [r3, #0]
}
 800646a:	4770      	bx	lr

0800646c <SYSCFG_GetCompensationCellStatus>:
  */
FlagStatus SYSCFG_GetCompensationCellStatus(void)
{
  FlagStatus bitstatus = RESET;
    
  if ((SYSCFG->CMPCR & SYSCFG_CMPCR_READY ) != (uint32_t)RESET)
 800646c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8006470:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006474:	6a18      	ldr	r0, [r3, #32]
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8006476:	f3c0 2000 	ubfx	r0, r0, #8, #1
 800647a:	4770      	bx	lr

0800647c <TIM_DeInit>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval None

  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 800647c:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
 800647e:	2300      	movs	r3, #0
 8006480:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006484:	4298      	cmp	r0, r3
 8006486:	d05b      	beq.n	8006540 <TIM_DeInit+0xc4>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
  } 
  else if (TIMx == TIM2) 
 8006488:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800648c:	d062      	beq.n	8006554 <TIM_DeInit+0xd8>
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
  }  
  else if (TIMx == TIM3)
 800648e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006492:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8006496:	4298      	cmp	r0, r3
 8006498:	d066      	beq.n	8006568 <TIM_DeInit+0xec>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
  }  
  else if (TIMx == TIM4)
 800649a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800649e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80064a2:	4298      	cmp	r0, r3
 80064a4:	d06a      	beq.n	800657c <TIM_DeInit+0x100>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
  }  
  else if (TIMx == TIM5)
 80064a6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80064aa:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80064ae:	4298      	cmp	r0, r3
 80064b0:	d06e      	beq.n	8006590 <TIM_DeInit+0x114>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
  }  
  else if (TIMx == TIM6)  
 80064b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80064b6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80064ba:	4298      	cmp	r0, r3
 80064bc:	d072      	beq.n	80065a4 <TIM_DeInit+0x128>
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
  }  
  else if (TIMx == TIM7)
 80064be:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80064c2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80064c6:	4298      	cmp	r0, r3
 80064c8:	d076      	beq.n	80065b8 <TIM_DeInit+0x13c>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
  }  
  else if (TIMx == TIM8)
 80064ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80064ce:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80064d2:	4298      	cmp	r0, r3
 80064d4:	d07a      	beq.n	80065cc <TIM_DeInit+0x150>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
  }  
  else if (TIMx == TIM9)
 80064d6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80064da:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80064de:	4298      	cmp	r0, r3
 80064e0:	d07e      	beq.n	80065e0 <TIM_DeInit+0x164>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
   }  
  else if (TIMx == TIM10)
 80064e2:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 80064e6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80064ea:	4298      	cmp	r0, r3
 80064ec:	f000 8084 	beq.w	80065f8 <TIM_DeInit+0x17c>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
  }  
  else if (TIMx == TIM11) 
 80064f0:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 80064f4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80064f8:	4298      	cmp	r0, r3
 80064fa:	f000 8089 	beq.w	8006610 <TIM_DeInit+0x194>
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
  }  
  else if (TIMx == TIM12)
 80064fe:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006502:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8006506:	4298      	cmp	r0, r3
 8006508:	f000 808e 	beq.w	8006628 <TIM_DeInit+0x1ac>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
  }  
  else if (TIMx == TIM13) 
 800650c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8006510:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8006514:	4298      	cmp	r0, r3
 8006516:	f000 8091 	beq.w	800663c <TIM_DeInit+0x1c0>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
  }  
  else
  { 
    if (TIMx == TIM14) 
 800651a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800651e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8006522:	4298      	cmp	r0, r3
 8006524:	d000      	beq.n	8006528 <TIM_DeInit+0xac>
 8006526:	bd08      	pop	{r3, pc}
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 8006528:	2101      	movs	r1, #1
 800652a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800652e:	f7fe fcef 	bl	8004f10 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 8006532:	f44f 7080 	mov.w	r0, #256	; 0x100
 8006536:	2100      	movs	r1, #0
    }   
  }
}
 8006538:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  { 
    if (TIMx == TIM14) 
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 800653c:	f7fe bce8 	b.w	8004f10 <RCC_APB1PeriphResetCmd>
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 8006540:	2001      	movs	r0, #1
 8006542:	4601      	mov	r1, r0
 8006544:	f7fe fcf2 	bl	8004f2c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 8006548:	2001      	movs	r0, #1
 800654a:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 800654c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 8006550:	f7fe bcec 	b.w	8004f2c <RCC_APB2PeriphResetCmd>
  } 
  else if (TIMx == TIM2) 
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 8006554:	2001      	movs	r0, #1
 8006556:	4601      	mov	r1, r0
 8006558:	f7fe fcda 	bl	8004f10 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 800655c:	2001      	movs	r0, #1
 800655e:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8006560:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
  } 
  else if (TIMx == TIM2) 
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 8006564:	f7fe bcd4 	b.w	8004f10 <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM3)
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 8006568:	2002      	movs	r0, #2
 800656a:	2101      	movs	r1, #1
 800656c:	f7fe fcd0 	bl	8004f10 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 8006570:	2002      	movs	r0, #2
 8006572:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8006574:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
  }  
  else if (TIMx == TIM3)
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 8006578:	f7fe bcca 	b.w	8004f10 <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM4)
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 800657c:	2004      	movs	r0, #4
 800657e:	2101      	movs	r1, #1
 8006580:	f7fe fcc6 	bl	8004f10 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 8006584:	2004      	movs	r0, #4
 8006586:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8006588:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
  }  
  else if (TIMx == TIM4)
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 800658c:	f7fe bcc0 	b.w	8004f10 <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM5)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 8006590:	2008      	movs	r0, #8
 8006592:	2101      	movs	r1, #1
 8006594:	f7fe fcbc 	bl	8004f10 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 8006598:	2008      	movs	r0, #8
 800659a:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 800659c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
  }  
  else if (TIMx == TIM5)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 80065a0:	f7fe bcb6 	b.w	8004f10 <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM6)  
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 80065a4:	2010      	movs	r0, #16
 80065a6:	2101      	movs	r1, #1
 80065a8:	f7fe fcb2 	bl	8004f10 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 80065ac:	2010      	movs	r0, #16
 80065ae:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 80065b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
  }  
  else if (TIMx == TIM6)  
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 80065b4:	f7fe bcac 	b.w	8004f10 <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM7)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 80065b8:	2020      	movs	r0, #32
 80065ba:	2101      	movs	r1, #1
 80065bc:	f7fe fca8 	bl	8004f10 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 80065c0:	2020      	movs	r0, #32
 80065c2:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 80065c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
  }  
  else if (TIMx == TIM7)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 80065c8:	f7fe bca2 	b.w	8004f10 <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM8)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 80065cc:	2002      	movs	r0, #2
 80065ce:	2101      	movs	r1, #1
 80065d0:	f7fe fcac 	bl	8004f2c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 80065d4:	2002      	movs	r0, #2
 80065d6:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 80065d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
  }  
  else if (TIMx == TIM8)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 80065dc:	f7fe bca6 	b.w	8004f2c <RCC_APB2PeriphResetCmd>
  }  
  else if (TIMx == TIM9)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
 80065e0:	2101      	movs	r1, #1
 80065e2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80065e6:	f7fe fca1 	bl	8004f2c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 80065ea:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80065ee:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 80065f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
  }  
  else if (TIMx == TIM9)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 80065f4:	f7fe bc9a 	b.w	8004f2c <RCC_APB2PeriphResetCmd>
   }  
  else if (TIMx == TIM10)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
 80065f8:	2101      	movs	r1, #1
 80065fa:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80065fe:	f7fe fc95 	bl	8004f2c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 8006602:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8006606:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8006608:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
   }  
  else if (TIMx == TIM10)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 800660c:	f7fe bc8e 	b.w	8004f2c <RCC_APB2PeriphResetCmd>
  }  
  else if (TIMx == TIM11) 
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
 8006610:	2101      	movs	r1, #1
 8006612:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8006616:	f7fe fc89 	bl	8004f2c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 800661a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800661e:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8006620:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
  }  
  else if (TIMx == TIM11) 
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 8006624:	f7fe bc82 	b.w	8004f2c <RCC_APB2PeriphResetCmd>
  }  
  else if (TIMx == TIM12)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
 8006628:	2040      	movs	r0, #64	; 0x40
 800662a:	2101      	movs	r1, #1
 800662c:	f7fe fc70 	bl	8004f10 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 8006630:	2040      	movs	r0, #64	; 0x40
 8006632:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8006634:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
  }  
  else if (TIMx == TIM12)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 8006638:	f7fe bc6a 	b.w	8004f10 <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM13) 
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
 800663c:	2080      	movs	r0, #128	; 0x80
 800663e:	2101      	movs	r1, #1
 8006640:	f7fe fc66 	bl	8004f10 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 8006644:	2080      	movs	r0, #128	; 0x80
 8006646:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8006648:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
  }  
  else if (TIMx == TIM13) 
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 800664c:	f7fe bc60 	b.w	8004f10 <RCC_APB1PeriphResetCmd>

08006650 <TIM_TimeBaseInit>:
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8006650:	2300      	movs	r3, #0
 8006652:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006656:	f2c4 0301 	movt	r3, #16385	; 0x4001
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 800665a:	b470      	push	{r4, r5, r6}
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  

  if((TIMx == TIM1) || (TIMx == TIM8)||
 800665c:	f2c4 0201 	movt	r2, #16385	; 0x4001
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8006660:	8804      	ldrh	r4, [r0, #0]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8006662:	4298      	cmp	r0, r3
 8006664:	bf18      	it	ne
 8006666:	4290      	cmpne	r0, r2
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8006668:	b2a4      	uxth	r4, r4

  if((TIMx == TIM1) || (TIMx == TIM8)||
 800666a:	bf14      	ite	ne
 800666c:	2300      	movne	r3, #0
 800666e:	2301      	moveq	r3, #1
 8006670:	d008      	beq.n	8006684 <TIM_TimeBaseInit+0x34>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8006672:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006676:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800667a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800667e:	bf18      	it	ne
 8006680:	4290      	cmpne	r0, r2
 8006682:	d123      	bne.n	80066cc <TIM_TimeBaseInit+0x7c>
     (TIMx == TIM4) || (TIMx == TIM5)) 
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8006684:	f64f 758f 	movw	r5, #65423	; 0xff8f
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8006688:	884a      	ldrh	r2, [r1, #2]
  if((TIMx == TIM1) || (TIMx == TIM8)||
     (TIMx == TIM2) || (TIMx == TIM3)||
     (TIMx == TIM4) || (TIMx == TIM5)) 
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 800668a:	4025      	ands	r5, r4
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 800668c:	ea45 0402 	orr.w	r4, r5, r2
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8006690:	f44f 56a0 	mov.w	r6, #5120	; 0x1400
 8006694:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 8006698:	f2c4 0500 	movt	r5, #16384	; 0x4000
 800669c:	f2c4 0600 	movt	r6, #16384	; 0x4000
 80066a0:	42b0      	cmp	r0, r6
 80066a2:	bf18      	it	ne
 80066a4:	42a8      	cmpne	r0, r5
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80066a6:	bf1f      	itttt	ne
 80066a8:	890d      	ldrhne	r5, [r1, #8]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 80066aa:	f64f 42ff 	movwne	r2, #64767	; 0xfcff
 80066ae:	4022      	andne	r2, r4
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80066b0:	ea42 0405 	orrne.w	r4, r2, r5
  }

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80066b4:	684d      	ldr	r5, [r1, #4]
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80066b6:	880a      	ldrh	r2, [r1, #0]
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 80066b8:	8004      	strh	r4, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80066ba:	62c5      	str	r5, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80066bc:	8502      	strh	r2, [r0, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 80066be:	b10b      	cbz	r3, 80066c4 <TIM_TimeBaseInit+0x74>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 80066c0:	7a8b      	ldrb	r3, [r1, #10]
 80066c2:	8603      	strh	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 80066c4:	2301      	movs	r3, #1
 80066c6:	8283      	strh	r3, [r0, #20]
}
 80066c8:	bc70      	pop	{r4, r5, r6}
 80066ca:	4770      	bx	lr

  tmpcr1 = TIMx->CR1;  

  if((TIMx == TIM1) || (TIMx == TIM8)||
     (TIMx == TIM2) || (TIMx == TIM3)||
     (TIMx == TIM4) || (TIMx == TIM5)) 
 80066cc:	f44f 6540 	mov.w	r5, #3072	; 0xc00
 80066d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80066d4:	f2c4 0500 	movt	r5, #16384	; 0x4000
 80066d8:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80066dc:	4290      	cmp	r0, r2
 80066de:	bf18      	it	ne
 80066e0:	42a8      	cmpne	r0, r5
 80066e2:	d1d5      	bne.n	8006690 <TIM_TimeBaseInit+0x40>
 80066e4:	e7ce      	b.n	8006684 <TIM_TimeBaseInit+0x34>
 80066e6:	bf00      	nop

080066e8 <TIM_TimeBaseStructInit>:
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 80066e8:	2300      	movs	r3, #0
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 80066ea:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80066ee:	6041      	str	r1, [r0, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 80066f0:	8003      	strh	r3, [r0, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 80066f2:	8103      	strh	r3, [r0, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 80066f4:	8043      	strh	r3, [r0, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 80066f6:	7283      	strb	r3, [r0, #10]
}
 80066f8:	4770      	bx	lr
 80066fa:	bf00      	nop

080066fc <TIM_PrescalerConfig>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
 80066fc:	8501      	strh	r1, [r0, #40]	; 0x28
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
 80066fe:	8282      	strh	r2, [r0, #20]
}
 8006700:	4770      	bx	lr
 8006702:	bf00      	nop

08006704 <TIM_CounterModeConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));

  tmpcr1 = TIMx->CR1;
 8006704:	8803      	ldrh	r3, [r0, #0]

  /* Reset the CMS and DIR Bits */
  tmpcr1 &= (uint16_t)~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800670a:	041b      	lsls	r3, r3, #16
 800670c:	0c1b      	lsrs	r3, r3, #16

  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
 800670e:	430b      	orrs	r3, r1

  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
 8006710:	8003      	strh	r3, [r0, #0]
}
 8006712:	4770      	bx	lr

08006714 <TIM_SetCounter>:
{
  /* Check the parameters */
   assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 8006714:	6241      	str	r1, [r0, #36]	; 0x24
}
 8006716:	4770      	bx	lr

08006718 <TIM_SetAutoreload>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 8006718:	62c1      	str	r1, [r0, #44]	; 0x2c
}
 800671a:	4770      	bx	lr

0800671c <TIM_GetCounter>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Counter Register value */
  return TIMx->CNT;
 800671c:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
 800671e:	4770      	bx	lr

08006720 <TIM_GetPrescaler>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Prescaler Register value */
  return TIMx->PSC;
 8006720:	8d00      	ldrh	r0, [r0, #40]	; 0x28
}
 8006722:	b280      	uxth	r0, r0
 8006724:	4770      	bx	lr
 8006726:	bf00      	nop

08006728 <TIM_UpdateDisableConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 8006728:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800672a:	b929      	cbnz	r1, 8006738 <TIM_UpdateDisableConfig+0x10>
    TIMx->CR1 |= TIM_CR1_UDIS;
  }
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_UDIS;
 800672c:	f023 0302 	bic.w	r3, r3, #2
 8006730:	041b      	lsls	r3, r3, #16
 8006732:	0c1b      	lsrs	r3, r3, #16
 8006734:	8003      	strh	r3, [r0, #0]
 8006736:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 8006738:	b29b      	uxth	r3, r3
 800673a:	f043 0302 	orr.w	r3, r3, #2
 800673e:	8003      	strh	r3, [r0, #0]
 8006740:	4770      	bx	lr
 8006742:	bf00      	nop

08006744 <TIM_UpdateRequestConfig>:
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 8006744:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
 8006746:	b929      	cbnz	r1, 8006754 <TIM_UpdateRequestConfig+0x10>
    TIMx->CR1 |= TIM_CR1_URS;
  }
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_URS;
 8006748:	f023 0304 	bic.w	r3, r3, #4
 800674c:	041b      	lsls	r3, r3, #16
 800674e:	0c1b      	lsrs	r3, r3, #16
 8006750:	8003      	strh	r3, [r0, #0]
 8006752:	4770      	bx	lr
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 8006754:	b29b      	uxth	r3, r3
 8006756:	f043 0304 	orr.w	r3, r3, #4
 800675a:	8003      	strh	r3, [r0, #0]
 800675c:	4770      	bx	lr
 800675e:	bf00      	nop

08006760 <TIM_ARRPreloadConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 8006760:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8006762:	b929      	cbnz	r1, 8006770 <TIM_ARRPreloadConfig+0x10>
    TIMx->CR1 |= TIM_CR1_ARPE;
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 8006764:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006768:	041b      	lsls	r3, r3, #16
 800676a:	0c1b      	lsrs	r3, r3, #16
 800676c:	8003      	strh	r3, [r0, #0]
 800676e:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 8006770:	b29b      	uxth	r3, r3
 8006772:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006776:	8003      	strh	r3, [r0, #0]
 8006778:	4770      	bx	lr
 800677a:	bf00      	nop

0800677c <TIM_SelectOnePulseMode>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));

  /* Reset the OPM Bit */
  TIMx->CR1 &= (uint16_t)~TIM_CR1_OPM;
 800677c:	8803      	ldrh	r3, [r0, #0]
 800677e:	f023 0308 	bic.w	r3, r3, #8
 8006782:	041b      	lsls	r3, r3, #16
 8006784:	0c1b      	lsrs	r3, r3, #16
 8006786:	8003      	strh	r3, [r0, #0]

  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
 8006788:	8803      	ldrh	r3, [r0, #0]
 800678a:	b29b      	uxth	r3, r3
 800678c:	430b      	orrs	r3, r1
 800678e:	8003      	strh	r3, [r0, #0]
}
 8006790:	4770      	bx	lr
 8006792:	bf00      	nop

08006794 <TIM_SetClockDivision>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));

  /* Reset the CKD Bits */
  TIMx->CR1 &= (uint16_t)(~TIM_CR1_CKD);
 8006794:	8803      	ldrh	r3, [r0, #0]
 8006796:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800679a:	041b      	lsls	r3, r3, #16
 800679c:	0c1b      	lsrs	r3, r3, #16
 800679e:	8003      	strh	r3, [r0, #0]

  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
 80067a0:	8803      	ldrh	r3, [r0, #0]
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	430b      	orrs	r3, r1
 80067a6:	8003      	strh	r3, [r0, #0]
}
 80067a8:	4770      	bx	lr
 80067aa:	bf00      	nop

080067ac <TIM_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80067ac:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80067ae:	b929      	cbnz	r1, 80067bc <TIM_Cmd+0x10>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 80067b0:	f023 0301 	bic.w	r3, r3, #1
 80067b4:	041b      	lsls	r3, r3, #16
 80067b6:	0c1b      	lsrs	r3, r3, #16
 80067b8:	8003      	strh	r3, [r0, #0]
 80067ba:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80067bc:	b29b      	uxth	r3, r3
 80067be:	f043 0301 	orr.w	r3, r3, #1
 80067c2:	8003      	strh	r3, [r0, #0]
 80067c4:	4770      	bx	lr
 80067c6:	bf00      	nop

080067c8 <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80067c8:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 80067cc:	8c04      	ldrh	r4, [r0, #32]
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 80067ce:	898d      	ldrh	r5, [r1, #12]
 80067d0:	884f      	ldrh	r7, [r1, #2]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80067d2:	f8b1 c000 	ldrh.w	ip, [r1]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 80067d6:	f024 0401 	bic.w	r4, r4, #1
 80067da:	0424      	lsls	r4, r4, #16
 80067dc:	0c24      	lsrs	r4, r4, #16
 80067de:	8404      	strh	r4, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067e0:	8c03      	ldrh	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067e2:	8884      	ldrh	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80067e4:	8b02      	ldrh	r2, [r0, #24]
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 80067e6:	432f      	orrs	r7, r5
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 80067e8:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80067ec:	2500      	movs	r5, #0
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 80067ee:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80067f2:	f44f 6680 	mov.w	r6, #1024	; 0x400
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 80067f6:	0412      	lsls	r2, r2, #16
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 80067f8:	041b      	lsls	r3, r3, #16
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80067fa:	f2c4 0601 	movt	r6, #16385	; 0x4001
 80067fe:	f2c4 0501 	movt	r5, #16385	; 0x4001
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 8006802:	0c12      	lsrs	r2, r2, #16
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 8006804:	0c1b      	lsrs	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8006806:	b2bf      	uxth	r7, r7
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8006808:	42a8      	cmp	r0, r5
 800680a:	bf18      	it	ne
 800680c:	42b0      	cmpne	r0, r6
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800680e:	b2a4      	uxth	r4, r4
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8006810:	ea42 020c 	orr.w	r2, r2, ip
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8006814:	ea47 0303 	orr.w	r3, r7, r3
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8006818:	d116      	bne.n	8006848 <TIM_OC1Init+0x80>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 800681a:	f64f 75f7 	movw	r5, #65527	; 0xfff7
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 800681e:	f8b1 c00e 	ldrh.w	ip, [r1, #14]
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 8006822:	f8b1 8012 	ldrh.w	r8, [r1, #18]
 8006826:	8a0f      	ldrh	r7, [r1, #16]
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8006828:	888e      	ldrh	r6, [r1, #4]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 800682a:	401d      	ands	r5, r3
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 800682c:	ea45 0c0c 	orr.w	ip, r5, ip
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 8006830:	f64f 73fb 	movw	r3, #65531	; 0xfffb
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 8006834:	f64f 45ff 	movw	r5, #64767	; 0xfcff
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 8006838:	ea48 0707 	orr.w	r7, r8, r7
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 800683c:	4025      	ands	r5, r4
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 800683e:	ea0c 0303 	and.w	r3, ip, r3
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 8006842:	b2bc      	uxth	r4, r7
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8006844:	4333      	orrs	r3, r6
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8006846:	432c      	orrs	r4, r5
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 8006848:	6889      	ldr	r1, [r1, #8]
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800684a:	8084      	strh	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800684c:	8302      	strh	r2, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 800684e:	6341      	str	r1, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006850:	8403      	strh	r3, [r0, #32]
}
 8006852:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8006856:	4770      	bx	lr

08006858 <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8006858:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 800685c:	8c04      	ldrh	r4, [r0, #32]
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 800685e:	898d      	ldrh	r5, [r1, #12]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8006860:	f8b1 c000 	ldrh.w	ip, [r1]
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8006864:	884f      	ldrh	r7, [r1, #2]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8006866:	f024 0410 	bic.w	r4, r4, #16
 800686a:	0424      	lsls	r4, r4, #16
 800686c:	0c24      	lsrs	r4, r4, #16
 800686e:	8404      	strh	r4, [r0, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8006870:	8c02      	ldrh	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006872:	8884      	ldrh	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006874:	8b03      	ldrh	r3, [r0, #24]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 8006876:	f022 0220 	bic.w	r2, r2, #32
 800687a:	0412      	lsls	r2, r2, #16
 800687c:	0c12      	lsrs	r2, r2, #16
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 800687e:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
 8006882:	041b      	lsls	r3, r3, #16
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 8006884:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8006888:	f44f 6680 	mov.w	r6, #1024	; 0x400
 800688c:	2500      	movs	r5, #0
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 800688e:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8006890:	f2c4 0601 	movt	r6, #16385	; 0x4001
 8006894:	f2c4 0501 	movt	r5, #16385	; 0x4001
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8006898:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 800689c:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80068a0:	42a8      	cmp	r0, r5
 80068a2:	bf18      	it	ne
 80068a4:	42b0      	cmpne	r0, r6
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068a6:	b2a4      	uxth	r4, r4
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80068a8:	b29b      	uxth	r3, r3
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 80068aa:	b292      	uxth	r2, r2
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80068ac:	d119      	bne.n	80068e2 <TIM_OC2Init+0x8a>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 80068ae:	f64f 767f 	movw	r6, #65407	; 0xff7f
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 80068b2:	f8b1 900e 	ldrh.w	r9, [r1, #14]
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 80068b6:	f8b1 8010 	ldrh.w	r8, [r1, #16]
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 80068ba:	f8b1 c004 	ldrh.w	ip, [r1, #4]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 80068be:	8a4f      	ldrh	r7, [r1, #18]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 80068c0:	4016      	ands	r6, r2
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
 80068c2:	f24f 35ff 	movw	r5, #62463	; 0xf3ff
 80068c6:	4025      	ands	r5, r4
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 80068c8:	ea46 1609 	orr.w	r6, r6, r9, lsl #4
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
 80068cc:	f64f 72bf 	movw	r2, #65471	; 0xffbf
 80068d0:	4032      	ands	r2, r6
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 80068d2:	ea45 0488 	orr.w	r4, r5, r8, lsl #2
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 80068d6:	ea42 120c 	orr.w	r2, r2, ip, lsl #4
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 80068da:	ea44 0487 	orr.w	r4, r4, r7, lsl #2
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 80068de:	b292      	uxth	r2, r2
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 80068e0:	b2a4      	uxth	r4, r4
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 80068e2:	6889      	ldr	r1, [r1, #8]
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068e4:	8084      	strh	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80068e6:	8303      	strh	r3, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 80068e8:	6381      	str	r1, [r0, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068ea:	8402      	strh	r2, [r0, #32]
}
 80068ec:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80068f0:	4770      	bx	lr
 80068f2:	bf00      	nop

080068f4 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80068f4:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 80068f8:	8c04      	ldrh	r4, [r0, #32]
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 80068fa:	898d      	ldrh	r5, [r1, #12]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 80068fc:	f8b1 c002 	ldrh.w	ip, [r1, #2]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8006900:	880f      	ldrh	r7, [r1, #0]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8006902:	f424 7480 	bic.w	r4, r4, #256	; 0x100
 8006906:	0424      	lsls	r4, r4, #16
 8006908:	0c24      	lsrs	r4, r4, #16
 800690a:	8404      	strh	r4, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800690c:	8c02      	ldrh	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800690e:	8884      	ldrh	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006910:	8b83      	ldrh	r3, [r0, #28]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 8006912:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006916:	0412      	lsls	r2, r2, #16
 8006918:	0c12      	lsrs	r2, r2, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 800691a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 800691e:	f023 0373 	bic.w	r3, r3, #115	; 0x73
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8006922:	2500      	movs	r5, #0
 8006924:	f44f 6680 	mov.w	r6, #1024	; 0x400
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 8006928:	041b      	lsls	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800692a:	f2c4 0601 	movt	r6, #16385	; 0x4001
 800692e:	f2c4 0501 	movt	r5, #16385	; 0x4001
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 8006932:	0c1b      	lsrs	r3, r3, #16
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8006934:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8006938:	42a8      	cmp	r0, r5
 800693a:	bf18      	it	ne
 800693c:	42b0      	cmpne	r0, r6
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800693e:	b2a4      	uxth	r4, r4
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8006940:	ea43 0307 	orr.w	r3, r3, r7
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8006944:	b292      	uxth	r2, r2
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8006946:	d119      	bne.n	800697c <TIM_OC3Init+0x88>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 8006948:	f24f 76ff 	movw	r6, #63487	; 0xf7ff
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 800694c:	f8b1 900e 	ldrh.w	r9, [r1, #14]
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8006950:	f8b1 8010 	ldrh.w	r8, [r1, #16]
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8006954:	f8b1 c004 	ldrh.w	ip, [r1, #4]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8006958:	8a4f      	ldrh	r7, [r1, #18]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 800695a:	4016      	ands	r6, r2
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 800695c:	f64c 75ff 	movw	r5, #53247	; 0xcfff
 8006960:	4025      	ands	r5, r4
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8006962:	ea46 2609 	orr.w	r6, r6, r9, lsl #8
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 8006966:	f64f 32ff 	movw	r2, #64511	; 0xfbff
 800696a:	4032      	ands	r2, r6
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 800696c:	ea45 1408 	orr.w	r4, r5, r8, lsl #4
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8006970:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8006974:	ea44 1407 	orr.w	r4, r4, r7, lsl #4
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8006978:	b292      	uxth	r2, r2
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 800697a:	b2a4      	uxth	r4, r4
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 800697c:	6889      	ldr	r1, [r1, #8]
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800697e:	8084      	strh	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006980:	8383      	strh	r3, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8006982:	63c1      	str	r1, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006984:	8402      	strh	r2, [r0, #32]
}
 8006986:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800698a:	4770      	bx	lr

0800698c <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800698c:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 800698e:	8c04      	ldrh	r4, [r0, #32]
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8006990:	898d      	ldrh	r5, [r1, #12]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8006992:	f8b1 c000 	ldrh.w	ip, [r1]
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8006996:	884f      	ldrh	r7, [r1, #2]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8006998:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 800699c:	0424      	lsls	r4, r4, #16
 800699e:	0c24      	lsrs	r4, r4, #16
 80069a0:	8404      	strh	r4, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069a2:	8c02      	ldrh	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069a4:	8884      	ldrh	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80069a6:	8b83      	ldrh	r3, [r0, #28]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 80069a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80069ac:	0412      	lsls	r2, r2, #16
 80069ae:	0c12      	lsrs	r2, r2, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 80069b0:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 80069b4:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 80069b8:	2500      	movs	r5, #0
 80069ba:	f44f 6680 	mov.w	r6, #1024	; 0x400
 80069be:	f2c4 0501 	movt	r5, #16385	; 0x4001
 80069c2:	f2c4 0601 	movt	r6, #16385	; 0x4001
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 80069c6:	041b      	lsls	r3, r3, #16
 80069c8:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 80069ca:	42a8      	cmp	r0, r5
 80069cc:	bf18      	it	ne
 80069ce:	42b0      	cmpne	r0, r6
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 80069d0:	bf08      	it	eq
 80069d2:	8a0e      	ldrheq	r6, [r1, #16]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 80069d4:	6889      	ldr	r1, [r1, #8]
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069d6:	b2a4      	uxth	r4, r4
  
  if((TIMx == TIM1) || (TIMx == TIM8))
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 80069d8:	bf02      	ittt	eq
 80069da:	f64b 75ff 	movweq	r5, #49151	; 0xbfff
 80069de:	4025      	andeq	r5, r4
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 80069e0:	ea45 1486 	orreq.w	r4, r5, r6, lsl #6
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80069e4:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 80069e8:	ea42 3207 	orr.w	r2, r2, r7, lsl #12
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80069ec:	b29b      	uxth	r3, r3
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 80069ee:	b292      	uxth	r2, r2
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 80069f0:	bf08      	it	eq
 80069f2:	b2a4      	uxtheq	r4, r4
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069f4:	8084      	strh	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 80069f6:	8383      	strh	r3, [r0, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 80069f8:	6401      	str	r1, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069fa:	8402      	strh	r2, [r0, #32]
}
 80069fc:	bcf0      	pop	{r4, r5, r6, r7}
 80069fe:	4770      	bx	lr

08006a00 <TIM_OCStructInit>:
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 8006a00:	2300      	movs	r3, #0
 8006a02:	8003      	strh	r3, [r0, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 8006a04:	8043      	strh	r3, [r0, #2]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 8006a06:	8083      	strh	r3, [r0, #4]
  TIM_OCInitStruct->TIM_Pulse = 0x00000000;
 8006a08:	6083      	str	r3, [r0, #8]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 8006a0a:	8183      	strh	r3, [r0, #12]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 8006a0c:	81c3      	strh	r3, [r0, #14]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 8006a0e:	8203      	strh	r3, [r0, #16]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 8006a10:	8243      	strh	r3, [r0, #18]
}
 8006a12:	4770      	bx	lr

08006a14 <TIM_SelectOCxM>:
  *            @arg TIM_ForcedAction_Active
  *            @arg TIM_ForcedAction_InActive
  * @retval None
  */
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
{
 8006a14:	b410      	push	{r4}
  tmp += CCMR_OFFSET;

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 8006a16:	8c04      	ldrh	r4, [r0, #32]
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
  tmp += CCMR_OFFSET;

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	408b      	lsls	r3, r1

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 8006a1c:	b2a4      	uxth	r4, r4
 8006a1e:	ea24 0303 	bic.w	r3, r4, r3
 8006a22:	8403      	strh	r3, [r0, #32]
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
  tmp += CCMR_OFFSET;
 8006a24:	3018      	adds	r0, #24
  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 8006a26:	2900      	cmp	r1, #0
 8006a28:	bf18      	it	ne
 8006a2a:	2908      	cmpne	r1, #8
 8006a2c:	d00e      	beq.n	8006a4c <TIM_SelectOCxM+0x38>
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
  }
  else
  {
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
 8006a2e:	3904      	subs	r1, #4
 8006a30:	f3c1 014e 	ubfx	r1, r1, #1, #15

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC24M_MASK;
 8006a34:	f648 73ff 	movw	r3, #36863	; 0x8fff
 8006a38:	580c      	ldr	r4, [r1, r0]
 8006a3a:	4023      	ands	r3, r4
 8006a3c:	500b      	str	r3, [r1, r0]
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 8006a3e:	0212      	lsls	r2, r2, #8
 8006a40:	580b      	ldr	r3, [r1, r0]
 8006a42:	b292      	uxth	r2, r2
 8006a44:	431a      	orrs	r2, r3
 8006a46:	500a      	str	r2, [r1, r0]
  }
}
 8006a48:	bc10      	pop	{r4}
 8006a4a:	4770      	bx	lr
  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
  {
    tmp += (TIM_Channel>>1);
 8006a4c:	0849      	lsrs	r1, r1, #1

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC13M_MASK;
 8006a4e:	f64f 738f 	movw	r3, #65423	; 0xff8f
 8006a52:	580c      	ldr	r4, [r1, r0]
 8006a54:	4023      	ands	r3, r4
 8006a56:	500b      	str	r3, [r1, r0]
   
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
 8006a58:	580b      	ldr	r3, [r1, r0]
 8006a5a:	431a      	orrs	r2, r3
 8006a5c:	500a      	str	r2, [r1, r0]
 8006a5e:	e7f3      	b.n	8006a48 <TIM_SelectOCxM+0x34>

08006a60 <TIM_SetCompare1>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 8006a60:	6341      	str	r1, [r0, #52]	; 0x34
}
 8006a62:	4770      	bx	lr

08006a64 <TIM_SetCompare2>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 8006a64:	6381      	str	r1, [r0, #56]	; 0x38
}
 8006a66:	4770      	bx	lr

08006a68 <TIM_SetCompare3>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 8006a68:	63c1      	str	r1, [r0, #60]	; 0x3c
}
 8006a6a:	4770      	bx	lr

08006a6c <TIM_SetCompare4>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
 8006a6c:	6401      	str	r1, [r0, #64]	; 0x40
}
 8006a6e:	4770      	bx	lr

08006a70 <TIM_ForcedOC1Config>:
  uint16_t tmpccmr1 = 0;

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 8006a70:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1M;
 8006a72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a76:	041b      	lsls	r3, r3, #16
 8006a78:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
 8006a7a:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8006a7c:	8303      	strh	r3, [r0, #24]
}
 8006a7e:	4770      	bx	lr

08006a80 <TIM_ForcedOC2Config>:
  uint16_t tmpccmr1 = 0;

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 8006a80:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2M;
 8006a82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a86:	041b      	lsls	r3, r3, #16
 8006a88:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
 8006a8a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006a8e:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8006a90:	8303      	strh	r3, [r0, #24]
}
 8006a92:	4770      	bx	lr

08006a94 <TIM_ForcedOC3Config>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));

  tmpccmr2 = TIMx->CCMR2;
 8006a94:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC1M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3M;
 8006a96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a9a:	041b      	lsls	r3, r3, #16
 8006a9c:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
 8006a9e:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8006aa0:	8383      	strh	r3, [r0, #28]
}
 8006aa2:	4770      	bx	lr

08006aa4 <TIM_ForcedOC4Config>:
  uint16_t tmpccmr2 = 0;

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
 8006aa4:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC2M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4M;
 8006aa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006aaa:	041b      	lsls	r3, r3, #16
 8006aac:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
 8006aae:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006ab2:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8006ab4:	8383      	strh	r3, [r0, #28]
}
 8006ab6:	4770      	bx	lr

08006ab8 <TIM_OC1PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8006ab8:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC1PE);
 8006aba:	f023 0308 	bic.w	r3, r3, #8
 8006abe:	041b      	lsls	r3, r3, #16
 8006ac0:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 8006ac2:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8006ac4:	8303      	strh	r3, [r0, #24]
}
 8006ac6:	4770      	bx	lr

08006ac8 <TIM_OC2PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8006ac8:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2PE);
 8006aca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ace:	041b      	lsls	r3, r3, #16
 8006ad0:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 8006ad2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006ad6:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8006ad8:	8303      	strh	r3, [r0, #24]
}
 8006ada:	4770      	bx	lr

08006adc <TIM_OC3PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8006adc:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 8006ade:	f023 0308 	bic.w	r3, r3, #8
 8006ae2:	041b      	lsls	r3, r3, #16
 8006ae4:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 8006ae6:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8006ae8:	8383      	strh	r3, [r0, #28]
}
 8006aea:	4770      	bx	lr

08006aec <TIM_OC4PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8006aec:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
 8006aee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006af2:	041b      	lsls	r3, r3, #16
 8006af4:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 8006af6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006afa:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8006afc:	8383      	strh	r3, [r0, #28]
}
 8006afe:	4770      	bx	lr

08006b00 <TIM_OC1FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8006b00:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1FE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1FE;
 8006b02:	f023 0304 	bic.w	r3, r3, #4
 8006b06:	041b      	lsls	r3, r3, #16
 8006b08:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
 8006b0a:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8006b0c:	8303      	strh	r3, [r0, #24]
}
 8006b0e:	4770      	bx	lr

08006b10 <TIM_OC2FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8006b10:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2FE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2FE);
 8006b12:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b16:	041b      	lsls	r3, r3, #16
 8006b18:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
 8006b1a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006b1e:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8006b20:	8303      	strh	r3, [r0, #24]
}
 8006b22:	4770      	bx	lr

08006b24 <TIM_OC3FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 8006b24:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC3FE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3FE;
 8006b26:	f023 0304 	bic.w	r3, r3, #4
 8006b2a:	041b      	lsls	r3, r3, #16
 8006b2c:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
 8006b2e:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 8006b30:	8383      	strh	r3, [r0, #28]
}
 8006b32:	4770      	bx	lr

08006b34 <TIM_OC4FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 8006b34:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC4FE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4FE);
 8006b36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b3a:	041b      	lsls	r3, r3, #16
 8006b3c:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
 8006b3e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006b42:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 8006b44:	8383      	strh	r3, [r0, #28]
}
 8006b46:	4770      	bx	lr

08006b48 <TIM_ClearOC1Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 8006b48:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1CE;
 8006b4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b4e:	041b      	lsls	r3, r3, #16
 8006b50:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
 8006b52:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8006b54:	8303      	strh	r3, [r0, #24]
}
 8006b56:	4770      	bx	lr

08006b58 <TIM_ClearOC2Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 8006b58:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2CE;
 8006b5a:	045b      	lsls	r3, r3, #17
 8006b5c:	0c5b      	lsrs	r3, r3, #17

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
 8006b5e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006b62:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8006b64:	8303      	strh	r3, [r0, #24]
}
 8006b66:	4770      	bx	lr

08006b68 <TIM_ClearOC3Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 8006b68:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC3CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3CE;
 8006b6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b6e:	041b      	lsls	r3, r3, #16
 8006b70:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
 8006b72:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8006b74:	8383      	strh	r3, [r0, #28]
}
 8006b76:	4770      	bx	lr

08006b78 <TIM_ClearOC4Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 8006b78:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4CE;
 8006b7a:	045b      	lsls	r3, r3, #17
 8006b7c:	0c5b      	lsrs	r3, r3, #17

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
 8006b7e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006b82:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8006b84:	8383      	strh	r3, [r0, #28]
}
 8006b86:	4770      	bx	lr

08006b88 <TIM_OC1PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8006b88:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC1P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC1P);
 8006b8a:	f023 0302 	bic.w	r3, r3, #2
 8006b8e:	041b      	lsls	r3, r3, #16
 8006b90:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= TIM_OCPolarity;
 8006b92:	430b      	orrs	r3, r1

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8006b94:	8403      	strh	r3, [r0, #32]
}
 8006b96:	4770      	bx	lr

08006b98 <TIM_OC1NPolarityConfig>:
  uint16_t tmpccer = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
 8006b98:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC1NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 8006b9a:	f023 0308 	bic.w	r3, r3, #8
 8006b9e:	041b      	lsls	r3, r3, #16
 8006ba0:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= TIM_OCNPolarity;
 8006ba2:	430b      	orrs	r3, r1

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8006ba4:	8403      	strh	r3, [r0, #32]
}
 8006ba6:	4770      	bx	lr

08006ba8 <TIM_OC2PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8006ba8:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC2P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC2P);
 8006baa:	f023 0320 	bic.w	r3, r3, #32
 8006bae:	041b      	lsls	r3, r3, #16
 8006bb0:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
 8006bb2:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8006bb6:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8006bb8:	8403      	strh	r3, [r0, #32]
}
 8006bba:	4770      	bx	lr

08006bbc <TIM_OC2NPolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
 8006bbc:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC2NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 8006bbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006bc2:	041b      	lsls	r3, r3, #16
 8006bc4:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
 8006bc6:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8006bca:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8006bcc:	8403      	strh	r3, [r0, #32]
}
 8006bce:	4770      	bx	lr

08006bd0 <TIM_OC3PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8006bd0:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC3P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 8006bd2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006bd6:	041b      	lsls	r3, r3, #16
 8006bd8:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
 8006bda:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006bde:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8006be0:	8403      	strh	r3, [r0, #32]
}
 8006be2:	4770      	bx	lr

08006be4 <TIM_OC3NPolarityConfig>:
 
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
 8006be4:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC3NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 8006be6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006bea:	041b      	lsls	r3, r3, #16
 8006bec:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
 8006bee:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006bf2:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8006bf4:	8403      	strh	r3, [r0, #32]
}
 8006bf6:	4770      	bx	lr

08006bf8 <TIM_OC4PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8006bf8:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC4P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 8006bfa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006bfe:	041b      	lsls	r3, r3, #16
 8006c00:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
 8006c02:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 8006c06:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8006c08:	8403      	strh	r3, [r0, #32]
}
 8006c0a:	4770      	bx	lr

08006c0c <TIM_CCxCmd>:
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
 8006c0c:	b410      	push	{r4}
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 8006c0e:	8c04      	ldrh	r4, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;
 8006c10:	2301      	movs	r3, #1
 8006c12:	408b      	lsls	r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 8006c14:	b2a4      	uxth	r4, r4
 8006c16:	ea24 0303 	bic.w	r3, r4, r3
 8006c1a:	8403      	strh	r3, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
 8006c1c:	8c03      	ldrh	r3, [r0, #32]
 8006c1e:	fa12 f101 	lsls.w	r1, r2, r1
 8006c22:	430b      	orrs	r3, r1
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	8403      	strh	r3, [r0, #32]
}
 8006c28:	bc10      	pop	{r4}
 8006c2a:	4770      	bx	lr

08006c2c <TIM_CCxNCmd>:
  * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
  * @retval None
  */
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
{
 8006c2c:	b410      	push	{r4}
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_SET << TIM_Channel;

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 8006c2e:	8c04      	ldrh	r4, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_SET << TIM_Channel;
 8006c30:	2304      	movs	r3, #4
 8006c32:	408b      	lsls	r3, r1

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 8006c34:	b2a4      	uxth	r4, r4
 8006c36:	ea24 0303 	bic.w	r3, r4, r3
 8006c3a:	8403      	strh	r3, [r0, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
 8006c3c:	8c03      	ldrh	r3, [r0, #32]
 8006c3e:	fa12 f101 	lsls.w	r1, r2, r1
 8006c42:	430b      	orrs	r3, r1
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	8403      	strh	r3, [r0, #32]
}
 8006c48:	bc10      	pop	{r4}
 8006c4a:	4770      	bx	lr

08006c4c <TIM_ICInit>:
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8006c4c:	880b      	ldrh	r3, [r1, #0]
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8006c4e:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d032      	beq.n	8006cba <TIM_ICInit+0x6e>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 8006c54:	2b04      	cmp	r3, #4
 8006c56:	d058      	beq.n	8006d0a <TIM_ICInit+0xbe>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 8006c58:	2b08      	cmp	r3, #8
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 8006c5a:	884e      	ldrh	r6, [r1, #2]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8006c5c:	8c03      	ldrh	r3, [r0, #32]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 8006c5e:	f000 8082 	beq.w	8006d66 <TIM_ICInit+0x11a>
  }
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8006c62:	888f      	ldrh	r7, [r1, #4]
 8006c64:	890d      	ldrh	r5, [r1, #8]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8006c66:	88cc      	ldrh	r4, [r1, #6]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8006c68:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006c6c:	0409      	lsls	r1, r1, #16
 8006c6e:	0c09      	lsrs	r1, r1, #16
 8006c70:	8401      	strh	r1, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006c72:	8b82      	ldrh	r2, [r0, #28]
  tmpccer = TIMx->CCER;
 8006c74:	8c03      	ldrh	r3, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8006c76:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006c7a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8006c7e:	0512      	lsls	r2, r2, #20
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006c80:	045b      	lsls	r3, r3, #17
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8006c82:	0d12      	lsrs	r2, r2, #20
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006c84:	0c5b      	lsrs	r3, r3, #17
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 8006c86:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 8006c8a:	ea43 3306 	orr.w	r3, r3, r6, lsl #12
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 8006c8e:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 8006c98:	b292      	uxth	r2, r2
  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006c9a:	8382      	strh	r2, [r0, #28]
  TIMx->CCER = tmpccer ;
 8006c9c:	8403      	strh	r3, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC4PSC;
 8006c9e:	8b83      	ldrh	r3, [r0, #28]
 8006ca0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006ca4:	041b      	lsls	r3, r3, #16
 8006ca6:	0c1b      	lsrs	r3, r3, #16
 8006ca8:	8383      	strh	r3, [r0, #28]

  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 8006caa:	8b83      	ldrh	r3, [r0, #28]
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	8383      	strh	r3, [r0, #28]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8006cb6:	bcf0      	pop	{r4, r5, r6, r7}
 8006cb8:	4770      	bx	lr
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8006cba:	8c03      	ldrh	r3, [r0, #32]
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8006cbc:	884e      	ldrh	r6, [r1, #2]
 8006cbe:	888d      	ldrh	r5, [r1, #4]
 8006cc0:	890f      	ldrh	r7, [r1, #8]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8006cc2:	88cc      	ldrh	r4, [r1, #6]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8006cc4:	f023 0101 	bic.w	r1, r3, #1
 8006cc8:	0409      	lsls	r1, r1, #16
 8006cca:	0c09      	lsrs	r1, r1, #16
 8006ccc:	8401      	strh	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cce:	8b02      	ldrh	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8006cd0:	8c03      	ldrh	r3, [r0, #32]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 8006cd2:	f022 02f3 	bic.w	r2, r2, #243	; 0xf3
 8006cd6:	0412      	lsls	r2, r2, #16
 8006cd8:	0c12      	lsrs	r2, r2, #16
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006cda:	f023 030a 	bic.w	r3, r3, #10
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8006cde:	ea42 1207 	orr.w	r2, r2, r7, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ce2:	041b      	lsls	r3, r3, #16
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8006ce4:	b292      	uxth	r2, r2

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ce6:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8006ce8:	f046 0101 	orr.w	r1, r6, #1
 8006cec:	430b      	orrs	r3, r1
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8006cee:	432a      	orrs	r2, r5
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006cf0:	8302      	strh	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8006cf2:	8403      	strh	r3, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
 8006cf4:	8b03      	ldrh	r3, [r0, #24]
 8006cf6:	f023 030c 	bic.w	r3, r3, #12
 8006cfa:	041b      	lsls	r3, r3, #16
 8006cfc:	0c1b      	lsrs	r3, r3, #16
 8006cfe:	8303      	strh	r3, [r0, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8006d00:	8b03      	ldrh	r3, [r0, #24]
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	4323      	orrs	r3, r4
 8006d06:	8303      	strh	r3, [r0, #24]
 8006d08:	e7d5      	b.n	8006cb6 <TIM_ICInit+0x6a>
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8006d0a:	8c03      	ldrh	r3, [r0, #32]
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_LIST2_PERIPH(TIMx));
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8006d0c:	884e      	ldrh	r6, [r1, #2]
 8006d0e:	888d      	ldrh	r5, [r1, #4]
 8006d10:	890f      	ldrh	r7, [r1, #8]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8006d12:	88cc      	ldrh	r4, [r1, #6]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8006d14:	f023 0110 	bic.w	r1, r3, #16
 8006d18:	0409      	lsls	r1, r1, #16
 8006d1a:	0c09      	lsrs	r1, r1, #16
 8006d1c:	8401      	strh	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d1e:	8b02      	ldrh	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8006d20:	8c03      	ldrh	r3, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8006d22:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006d26:	0512      	lsls	r2, r2, #20
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d28:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8006d2c:	0d12      	lsrs	r2, r2, #20
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d2e:	041b      	lsls	r3, r3, #16
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8006d30:	ea42 3207 	orr.w	r2, r2, r7, lsl #12
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d34:	0c1b      	lsrs	r3, r3, #16
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8006d36:	b292      	uxth	r2, r2
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8006d38:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8006d3c:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8006d40:	b29b      	uxth	r3, r3
 8006d42:	f043 0310 	orr.w	r3, r3, #16
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8006d46:	b292      	uxth	r2, r2
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d48:	8302      	strh	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8006d4a:	8403      	strh	r3, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
 8006d4c:	8b03      	ldrh	r3, [r0, #24]
 8006d4e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006d52:	041b      	lsls	r3, r3, #16
 8006d54:	0c1b      	lsrs	r3, r3, #16
 8006d56:	8303      	strh	r3, [r0, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8006d58:	8b03      	ldrh	r3, [r0, #24]
 8006d5a:	b29b      	uxth	r3, r3
 8006d5c:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8006d60:	b29b      	uxth	r3, r3
 8006d62:	8303      	strh	r3, [r0, #24]
 8006d64:	e7a7      	b.n	8006cb6 <TIM_ICInit+0x6a>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 8006d66:	888d      	ldrh	r5, [r1, #4]
 8006d68:	890f      	ldrh	r7, [r1, #8]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8006d6a:	88cc      	ldrh	r4, [r1, #6]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8006d6c:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8006d70:	0409      	lsls	r1, r1, #16
 8006d72:	0c09      	lsrs	r1, r1, #16
 8006d74:	8401      	strh	r1, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006d76:	8b82      	ldrh	r2, [r0, #28]
  tmpccer = TIMx->CCER;
 8006d78:	8c03      	ldrh	r3, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
 8006d7a:	f022 02f3 	bic.w	r2, r2, #243	; 0xf3
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006d7e:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
 8006d82:	0412      	lsls	r2, r2, #16
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006d84:	041b      	lsls	r3, r3, #16
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
 8006d86:	0c12      	lsrs	r2, r2, #16
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006d88:	0c1b      	lsrs	r3, r3, #16
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8006d8a:	ea42 1207 	orr.w	r2, r2, r7, lsl #4

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 8006d8e:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8006d92:	b292      	uxth	r2, r2

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 8006d94:	b29b      	uxth	r3, r3
 8006d96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8006d9a:	432a      	orrs	r2, r5
  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006d9c:	8382      	strh	r2, [r0, #28]
  TIMx->CCER = tmpccer;
 8006d9e:	8403      	strh	r3, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC3PSC;
 8006da0:	8b83      	ldrh	r3, [r0, #28]
 8006da2:	f023 030c 	bic.w	r3, r3, #12
 8006da6:	041b      	lsls	r3, r3, #16
 8006da8:	0c1b      	lsrs	r3, r3, #16
 8006daa:	8383      	strh	r3, [r0, #28]

  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 8006dac:	8b83      	ldrh	r3, [r0, #28]
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	4323      	orrs	r3, r4
 8006db2:	8383      	strh	r3, [r0, #28]
 8006db4:	e77f      	b.n	8006cb6 <TIM_ICInit+0x6a>
 8006db6:	bf00      	nop

08006db8 <TIM_ICStructInit>:
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 8006db8:	2300      	movs	r3, #0
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 8006dba:	2201      	movs	r2, #1
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 8006dbc:	8003      	strh	r3, [r0, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 8006dbe:	8043      	strh	r3, [r0, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 8006dc0:	8082      	strh	r2, [r0, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 8006dc2:	80c3      	strh	r3, [r0, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
 8006dc4:	8103      	strh	r3, [r0, #8]
}
 8006dc6:	4770      	bx	lr

08006dc8 <TIM_PWMIConfig>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8006dc8:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 8006dcc:	888a      	ldrh	r2, [r1, #4]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 8006dce:	f8b1 8002 	ldrh.w	r8, [r1, #2]
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8006dd2:	880b      	ldrh	r3, [r1, #0]
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
 8006dd4:	f1b8 0f00 	cmp.w	r8, #0
 8006dd8:	bf0c      	ite	eq
 8006dda:	2502      	moveq	r5, #2
 8006ddc:	2500      	movne	r5, #0
    icoppositepolarity = TIM_ICPolarity_Rising;
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
 8006dde:	2a01      	cmp	r2, #1
 8006de0:	bf14      	ite	ne
 8006de2:	2601      	movne	r6, #1
 8006de4:	2602      	moveq	r6, #2
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d051      	beq.n	8006e8e <TIM_PWMIConfig+0xc6>
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8006dea:	8c03      	ldrh	r3, [r0, #32]
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 8006dec:	f8b1 c008 	ldrh.w	ip, [r1, #8]
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8006df0:	88cf      	ldrh	r7, [r1, #6]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8006df2:	f023 0310 	bic.w	r3, r3, #16
 8006df6:	041b      	lsls	r3, r3, #16
 8006df8:	0c1b      	lsrs	r3, r3, #16
 8006dfa:	8403      	strh	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006dfc:	8b04      	ldrh	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8006dfe:	8c01      	ldrh	r1, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8006e00:	f424 7440 	bic.w	r4, r4, #768	; 0x300
 8006e04:	0524      	lsls	r4, r4, #20
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e06:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8006e0a:	0d24      	lsrs	r4, r4, #20
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e0c:	0409      	lsls	r1, r1, #16
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8006e0e:	ea44 340c 	orr.w	r4, r4, ip, lsl #12
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e12:	0c09      	lsrs	r1, r1, #16
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8006e14:	b2a4      	uxth	r4, r4
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8006e16:	ea41 1108 	orr.w	r1, r1, r8, lsl #4
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8006e1a:	ea44 2202 	orr.w	r2, r4, r2, lsl #8

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8006e1e:	b289      	uxth	r1, r1
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8006e20:	b292      	uxth	r2, r2

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8006e22:	f041 0110 	orr.w	r1, r1, #16

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e26:	8302      	strh	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8006e28:	8401      	strh	r1, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
 8006e2a:	8b01      	ldrh	r1, [r0, #24]
 8006e2c:	f421 6140 	bic.w	r1, r1, #3072	; 0xc00
 8006e30:	0409      	lsls	r1, r1, #16
 8006e32:	0c09      	lsrs	r1, r1, #16
 8006e34:	8301      	strh	r1, [r0, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8006e36:	8b03      	ldrh	r3, [r0, #24]
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	8303      	strh	r3, [r0, #24]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8006e42:	8c01      	ldrh	r1, [r0, #32]
 8006e44:	f021 0101 	bic.w	r1, r1, #1
 8006e48:	0409      	lsls	r1, r1, #16
 8006e4a:	0c09      	lsrs	r1, r1, #16
 8006e4c:	8401      	strh	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e4e:	8b02      	ldrh	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8006e50:	8c03      	ldrh	r3, [r0, #32]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 8006e52:	f022 02f3 	bic.w	r2, r2, #243	; 0xf3
 8006e56:	0412      	lsls	r2, r2, #16
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e58:	f023 030a 	bic.w	r3, r3, #10
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 8006e5c:	0c12      	lsrs	r2, r2, #16
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e5e:	041b      	lsls	r3, r3, #16
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8006e60:	ea42 120c 	orr.w	r2, r2, ip, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e64:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8006e66:	f043 0301 	orr.w	r3, r3, #1
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8006e6a:	b292      	uxth	r2, r2

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8006e6c:	431d      	orrs	r5, r3
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8006e6e:	4316      	orrs	r6, r2
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e70:	8306      	strh	r6, [r0, #24]
  TIMx->CCER = tmpccer;
 8006e72:	8405      	strh	r5, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
 8006e74:	8b03      	ldrh	r3, [r0, #24]
 8006e76:	f023 030c 	bic.w	r3, r3, #12
 8006e7a:	041b      	lsls	r3, r3, #16
 8006e7c:	0c1b      	lsrs	r3, r3, #16
 8006e7e:	8303      	strh	r3, [r0, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8006e80:	8b03      	ldrh	r3, [r0, #24]
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	431f      	orrs	r7, r3
 8006e86:	8307      	strh	r7, [r0, #24]
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8006e88:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8006e8c:	4770      	bx	lr
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8006e8e:	8c03      	ldrh	r3, [r0, #32]
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 8006e90:	890f      	ldrh	r7, [r1, #8]
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8006e92:	88cc      	ldrh	r4, [r1, #6]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8006e94:	f023 0301 	bic.w	r3, r3, #1
 8006e98:	041b      	lsls	r3, r3, #16
 8006e9a:	0c1b      	lsrs	r3, r3, #16
 8006e9c:	8403      	strh	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e9e:	8b01      	ldrh	r1, [r0, #24]
  tmpccer = TIMx->CCER;
 8006ea0:	8c03      	ldrh	r3, [r0, #32]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 8006ea2:	f021 01f3 	bic.w	r1, r1, #243	; 0xf3
 8006ea6:	0409      	lsls	r1, r1, #16
 8006ea8:	0c09      	lsrs	r1, r1, #16
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006eaa:	f023 030a 	bic.w	r3, r3, #10
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8006eae:	ea41 1107 	orr.w	r1, r1, r7, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006eb2:	041b      	lsls	r3, r3, #16
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8006eb4:	b289      	uxth	r1, r1

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006eb6:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8006eb8:	f048 0801 	orr.w	r8, r8, #1
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8006ebc:	430a      	orrs	r2, r1

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8006ebe:	ea43 0308 	orr.w	r3, r3, r8

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006ec2:	8302      	strh	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8006ec4:	8403      	strh	r3, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
 8006ec6:	8b03      	ldrh	r3, [r0, #24]
 8006ec8:	f023 030c 	bic.w	r3, r3, #12
 8006ecc:	041b      	lsls	r3, r3, #16
 8006ece:	0c1b      	lsrs	r3, r3, #16
 8006ed0:	8303      	strh	r3, [r0, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8006ed2:	8b03      	ldrh	r3, [r0, #24]
 8006ed4:	b29b      	uxth	r3, r3
 8006ed6:	4323      	orrs	r3, r4
 8006ed8:	8303      	strh	r3, [r0, #24]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8006eda:	8c03      	ldrh	r3, [r0, #32]
 8006edc:	f023 0310 	bic.w	r3, r3, #16
 8006ee0:	041b      	lsls	r3, r3, #16
 8006ee2:	0c1b      	lsrs	r3, r3, #16
 8006ee4:	8403      	strh	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ee6:	8b02      	ldrh	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8006ee8:	8c03      	ldrh	r3, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8006eea:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006eee:	0512      	lsls	r2, r2, #20
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ef0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8006ef4:	0d12      	lsrs	r2, r2, #20
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ef6:	041b      	lsls	r3, r3, #16
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8006ef8:	ea42 3207 	orr.w	r2, r2, r7, lsl #12
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006efc:	0c1b      	lsrs	r3, r3, #16
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8006efe:	f043 0310 	orr.w	r3, r3, #16
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8006f02:	b292      	uxth	r2, r2
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8006f04:	ea43 1505 	orr.w	r5, r3, r5, lsl #4
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8006f08:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006f0c:	8306      	strh	r6, [r0, #24]
  TIMx->CCER = tmpccer;
 8006f0e:	8405      	strh	r5, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
 8006f10:	8b03      	ldrh	r3, [r0, #24]
 8006f12:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006f16:	041b      	lsls	r3, r3, #16
 8006f18:	0c1b      	lsrs	r3, r3, #16
 8006f1a:	8303      	strh	r3, [r0, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8006f1c:	8b03      	ldrh	r3, [r0, #24]
 8006f1e:	b29b      	uxth	r3, r3
 8006f20:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
 8006f24:	b2a4      	uxth	r4, r4
 8006f26:	8304      	strh	r4, [r0, #24]
 8006f28:	e7ae      	b.n	8006e88 <TIM_PWMIConfig+0xc0>
 8006f2a:	bf00      	nop

08006f2c <TIM_GetCapture1>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 8006f2c:	6b40      	ldr	r0, [r0, #52]	; 0x34
}
 8006f2e:	4770      	bx	lr

08006f30 <TIM_GetCapture2>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 8006f30:	6b80      	ldr	r0, [r0, #56]	; 0x38
}
 8006f32:	4770      	bx	lr

08006f34 <TIM_GetCapture3>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 

  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
 8006f34:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
}
 8006f36:	4770      	bx	lr

08006f38 <TIM_GetCapture4>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
 8006f38:	6c00      	ldr	r0, [r0, #64]	; 0x40
}
 8006f3a:	4770      	bx	lr

08006f3c <TIM_SetIC1Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
 8006f3c:	8b03      	ldrh	r3, [r0, #24]
 8006f3e:	f023 030c 	bic.w	r3, r3, #12
 8006f42:	041b      	lsls	r3, r3, #16
 8006f44:	0c1b      	lsrs	r3, r3, #16
 8006f46:	8303      	strh	r3, [r0, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8006f48:	8b03      	ldrh	r3, [r0, #24]
 8006f4a:	b29b      	uxth	r3, r3
 8006f4c:	430b      	orrs	r3, r1
 8006f4e:	8303      	strh	r3, [r0, #24]
}
 8006f50:	4770      	bx	lr
 8006f52:	bf00      	nop

08006f54 <TIM_SetIC2Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
 8006f54:	8b03      	ldrh	r3, [r0, #24]
 8006f56:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006f5a:	041b      	lsls	r3, r3, #16
 8006f5c:	0c1b      	lsrs	r3, r3, #16
 8006f5e:	8303      	strh	r3, [r0, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8006f60:	8b03      	ldrh	r3, [r0, #24]
 8006f62:	b29b      	uxth	r3, r3
 8006f64:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	8303      	strh	r3, [r0, #24]
}
 8006f6c:	4770      	bx	lr
 8006f6e:	bf00      	nop

08006f70 <TIM_SetIC3Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC3PSC;
 8006f70:	8b83      	ldrh	r3, [r0, #28]
 8006f72:	f023 030c 	bic.w	r3, r3, #12
 8006f76:	041b      	lsls	r3, r3, #16
 8006f78:	0c1b      	lsrs	r3, r3, #16
 8006f7a:	8383      	strh	r3, [r0, #28]

  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 8006f7c:	8b83      	ldrh	r3, [r0, #28]
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	430b      	orrs	r3, r1
 8006f82:	8383      	strh	r3, [r0, #28]
}
 8006f84:	4770      	bx	lr
 8006f86:	bf00      	nop

08006f88 <TIM_SetIC4Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC4PSC;
 8006f88:	8b83      	ldrh	r3, [r0, #28]
 8006f8a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006f8e:	041b      	lsls	r3, r3, #16
 8006f90:	0c1b      	lsrs	r3, r3, #16
 8006f92:	8383      	strh	r3, [r0, #28]

  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 8006f94:	8b83      	ldrh	r3, [r0, #28]
 8006f96:	b29b      	uxth	r3, r3
 8006f98:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006f9c:	b29b      	uxth	r3, r3
 8006f9e:	8383      	strh	r3, [r0, #28]
}
 8006fa0:	4770      	bx	lr
 8006fa2:	bf00      	nop

08006fa4 <TIM_BDTRConfig>:
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8006fa4:	f8b1 c002 	ldrh.w	ip, [r1, #2]
 8006fa8:	880b      	ldrh	r3, [r1, #0]
 8006faa:	898a      	ldrh	r2, [r1, #12]
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure that
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval None
  */
void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
{
 8006fac:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8006fae:	888f      	ldrh	r7, [r1, #4]
 8006fb0:	88ce      	ldrh	r6, [r1, #6]
 8006fb2:	890d      	ldrh	r5, [r1, #8]
 8006fb4:	894c      	ldrh	r4, [r1, #10]
 8006fb6:	ea4c 0303 	orr.w	r3, ip, r3
 8006fba:	433b      	orrs	r3, r7
 8006fbc:	4333      	orrs	r3, r6
 8006fbe:	432b      	orrs	r3, r5
 8006fc0:	4323      	orrs	r3, r4
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
}
 8006fca:	bcf0      	pop	{r4, r5, r6, r7}
 8006fcc:	4770      	bx	lr
 8006fce:	bf00      	nop

08006fd0 <TIM_BDTRStructInit>:
  * @retval None
  */
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	8003      	strh	r3, [r0, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
 8006fd4:	8043      	strh	r3, [r0, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 8006fd6:	8083      	strh	r3, [r0, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
 8006fd8:	80c3      	strh	r3, [r0, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
 8006fda:	8103      	strh	r3, [r0, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
 8006fdc:	8143      	strh	r3, [r0, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 8006fde:	8183      	strh	r3, [r0, #12]
}
 8006fe0:	4770      	bx	lr
 8006fe2:	bf00      	nop

08006fe4 <TIM_CtrlPWMOutputs>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8006fe4:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8006fe8:	b921      	cbnz	r1, 8006ff4 <TIM_CtrlPWMOutputs+0x10>
    TIMx->BDTR |= TIM_BDTR_MOE;
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
 8006fea:	045b      	lsls	r3, r3, #17
 8006fec:	0c5b      	lsrs	r3, r3, #17
 8006fee:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 8006ff2:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8006ff4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ff8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 8007002:	4770      	bx	lr

08007004 <TIM_SelectCOM>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 8007004:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8007006:	b929      	cbnz	r1, 8007014 <TIM_SelectCOM+0x10>
    TIMx->CR2 |= TIM_CR2_CCUS;
  }
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCUS;
 8007008:	f023 0304 	bic.w	r3, r3, #4
 800700c:	041b      	lsls	r3, r3, #16
 800700e:	0c1b      	lsrs	r3, r3, #16
 8007010:	8083      	strh	r3, [r0, #4]
 8007012:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 8007014:	b29b      	uxth	r3, r3
 8007016:	f043 0304 	orr.w	r3, r3, #4
 800701a:	8083      	strh	r3, [r0, #4]
 800701c:	4770      	bx	lr
 800701e:	bf00      	nop

08007020 <TIM_CCPreloadControl>:
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 8007020:	8883      	ldrh	r3, [r0, #4]
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8007022:	b929      	cbnz	r1, 8007030 <TIM_CCPreloadControl+0x10>
    TIMx->CR2 |= TIM_CR2_CCPC;
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCPC;
 8007024:	f023 0301 	bic.w	r3, r3, #1
 8007028:	041b      	lsls	r3, r3, #16
 800702a:	0c1b      	lsrs	r3, r3, #16
 800702c:	8083      	strh	r3, [r0, #4]
 800702e:	4770      	bx	lr
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 8007030:	b29b      	uxth	r3, r3
 8007032:	f043 0301 	orr.w	r3, r3, #1
 8007036:	8083      	strh	r3, [r0, #4]
 8007038:	4770      	bx	lr
 800703a:	bf00      	nop

0800703c <TIM_ITConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 800703c:	8983      	ldrh	r3, [r0, #12]
 800703e:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8007040:	b91a      	cbnz	r2, 800704a <TIM_ITConfig+0xe>
    TIMx->DIER |= TIM_IT;
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8007042:	ea23 0101 	bic.w	r1, r3, r1
 8007046:	8181      	strh	r1, [r0, #12]
 8007048:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 800704a:	4319      	orrs	r1, r3
 800704c:	8181      	strh	r1, [r0, #12]
 800704e:	4770      	bx	lr

08007050 <TIM_GenerateEvent>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
 
  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
 8007050:	8281      	strh	r1, [r0, #20]
}
 8007052:	4770      	bx	lr

08007054 <TIM_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));

  
  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
 8007054:	8a03      	ldrh	r3, [r0, #16]
  {
    bitstatus = SET;
 8007056:	4219      	tst	r1, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8007058:	bf0c      	ite	eq
 800705a:	2000      	moveq	r0, #0
 800705c:	2001      	movne	r0, #1
 800705e:	4770      	bx	lr

08007060 <TIM_ClearFlag>:
{  
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
 8007060:	43c9      	mvns	r1, r1
 8007062:	b289      	uxth	r1, r1
 8007064:	8201      	strh	r1, [r0, #16]
}
 8007066:	4770      	bx	lr

08007068 <TIM_GetITStatus>:
  uint16_t itstatus = 0x0, itenable = 0x0;
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8007068:	8a03      	ldrh	r3, [r0, #16]
  
  itenable = TIMx->DIER & TIM_IT;
 800706a:	8982      	ldrh	r2, [r0, #12]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 800706c:	4211      	tst	r1, r2
 800706e:	bf0c      	ite	eq
 8007070:	2000      	moveq	r0, #0
 8007072:	2001      	movne	r0, #1
 8007074:	4219      	tst	r1, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8007076:	bf0c      	ite	eq
 8007078:	2000      	moveq	r0, #0
 800707a:	f000 0001 	andne.w	r0, r0, #1
 800707e:	4770      	bx	lr

08007080 <TIM_ClearITPendingBit>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8007080:	43c9      	mvns	r1, r1
 8007082:	b289      	uxth	r1, r1
 8007084:	8201      	strh	r1, [r0, #16]
}
 8007086:	4770      	bx	lr

08007088 <TIM_DMAConfig>:
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase)); 
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));

  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
 8007088:	430a      	orrs	r2, r1
 800708a:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
}
 800708e:	4770      	bx	lr

08007090 <TIM_DMACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 8007090:	8983      	ldrh	r3, [r0, #12]
 8007092:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx)); 
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8007094:	b91a      	cbnz	r2, 800709e <TIM_DMACmd+0xe>
    TIMx->DIER |= TIM_DMASource; 
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 8007096:	ea23 0101 	bic.w	r1, r3, r1
 800709a:	8181      	strh	r1, [r0, #12]
 800709c:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 800709e:	4319      	orrs	r1, r3
 80070a0:	8181      	strh	r1, [r0, #12]
 80070a2:	4770      	bx	lr

080070a4 <TIM_SelectCCDMA>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 80070a4:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80070a6:	b929      	cbnz	r1, 80070b4 <TIM_SelectCCDMA+0x10>
    TIMx->CR2 |= TIM_CR2_CCDS;
  }
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCDS;
 80070a8:	f023 0308 	bic.w	r3, r3, #8
 80070ac:	041b      	lsls	r3, r3, #16
 80070ae:	0c1b      	lsrs	r3, r3, #16
 80070b0:	8083      	strh	r3, [r0, #4]
 80070b2:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 80070b4:	b29b      	uxth	r3, r3
 80070b6:	f043 0308 	orr.w	r3, r3, #8
 80070ba:	8083      	strh	r3, [r0, #4]
 80070bc:	4770      	bx	lr
 80070be:	bf00      	nop

080070c0 <TIM_InternalClockConfig>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  (uint16_t)~TIM_SMCR_SMS;
 80070c0:	8903      	ldrh	r3, [r0, #8]
 80070c2:	f023 0307 	bic.w	r3, r3, #7
 80070c6:	041b      	lsls	r3, r3, #16
 80070c8:	0c1b      	lsrs	r3, r3, #16
 80070ca:	8103      	strh	r3, [r0, #8]
}
 80070cc:	4770      	bx	lr
 80070ce:	bf00      	nop

080070d0 <TIM_ITRxExternalClockConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80070d0:	8903      	ldrh	r3, [r0, #8]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 80070d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070d6:	041b      	lsls	r3, r3, #16
 80070d8:	0c1b      	lsrs	r3, r3, #16

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 80070da:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070dc:	8103      	strh	r3, [r0, #8]

  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);

  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 80070de:	8903      	ldrh	r3, [r0, #8]
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	f043 0307 	orr.w	r3, r3, #7
 80070e6:	8103      	strh	r3, [r0, #8]
}
 80070e8:	4770      	bx	lr
 80070ea:	bf00      	nop

080070ec <TIM_TIxExternalClockConfig>:
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 80070ec:	2960      	cmp	r1, #96	; 0x60
  *          This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
 80070ee:	b430      	push	{r4, r5}
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 80070f0:	8c04      	ldrh	r4, [r0, #32]
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 80070f2:	d026      	beq.n	8007142 <TIM_TIxExternalClockConfig+0x56>
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 80070f4:	f024 0401 	bic.w	r4, r4, #1
 80070f8:	0424      	lsls	r4, r4, #16
 80070fa:	0c24      	lsrs	r4, r4, #16
 80070fc:	8404      	strh	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070fe:	8b05      	ldrh	r5, [r0, #24]
  tmpccer = TIMx->CCER;
 8007100:	8c04      	ldrh	r4, [r0, #32]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 8007102:	f025 05f3 	bic.w	r5, r5, #243	; 0xf3
 8007106:	042d      	lsls	r5, r5, #16
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007108:	f024 040a 	bic.w	r4, r4, #10
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 800710c:	0c2d      	lsrs	r5, r5, #16
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800710e:	0424      	lsls	r4, r4, #16
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8007110:	f045 0501 	orr.w	r5, r5, #1

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007114:	0c24      	lsrs	r4, r4, #16
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8007116:	ea45 1303 	orr.w	r3, r5, r3, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 800711a:	f044 0401 	orr.w	r4, r4, #1
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 800711e:	b29b      	uxth	r3, r3

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8007120:	4322      	orrs	r2, r4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007122:	8303      	strh	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8007124:	8402      	strh	r2, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007126:	8903      	ldrh	r3, [r0, #8]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 8007128:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800712c:	041b      	lsls	r3, r3, #16
 800712e:	0c1b      	lsrs	r3, r3, #16

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 8007130:	4319      	orrs	r1, r3

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007132:	8101      	strh	r1, [r0, #8]
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
  }
  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 8007134:	8903      	ldrh	r3, [r0, #8]
 8007136:	b29b      	uxth	r3, r3
 8007138:	f043 0307 	orr.w	r3, r3, #7
 800713c:	8103      	strh	r3, [r0, #8]
}
 800713e:	bc30      	pop	{r4, r5}
 8007140:	4770      	bx	lr
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8007142:	f024 0410 	bic.w	r4, r4, #16
 8007146:	0424      	lsls	r4, r4, #16
 8007148:	0c24      	lsrs	r4, r4, #16
 800714a:	8404      	strh	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800714c:	8b05      	ldrh	r5, [r0, #24]
  tmpccer = TIMx->CCER;
 800714e:	8c04      	ldrh	r4, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8007150:	f425 7540 	bic.w	r5, r5, #768	; 0x300
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007154:	f024 04a0 	bic.w	r4, r4, #160	; 0xa0
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8007158:	052d      	lsls	r5, r5, #20
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800715a:	0424      	lsls	r4, r4, #16
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 800715c:	0d2d      	lsrs	r5, r5, #20
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800715e:	0c24      	lsrs	r4, r4, #16
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8007160:	f445 7580 	orr.w	r5, r5, #256	; 0x100
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8007164:	f044 0410 	orr.w	r4, r4, #16
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8007168:	ea45 3303 	orr.w	r3, r5, r3, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 800716c:	ea44 1202 	orr.w	r2, r4, r2, lsl #4
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8007170:	b29b      	uxth	r3, r3

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8007172:	b292      	uxth	r2, r2

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007174:	8303      	strh	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8007176:	8402      	strh	r2, [r0, #32]
 8007178:	e7d5      	b.n	8007126 <TIM_TIxExternalClockConfig+0x3a>
 800717a:	bf00      	nop

0800717c <TIM_ETRClockMode1Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                            uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 800717c:	b410      	push	{r4}
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
 800717e:	8904      	ldrh	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
 8007180:	b2e4      	uxtb	r4, r4

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 8007182:	430c      	orrs	r4, r1
 8007184:	4314      	orrs	r4, r2
 8007186:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 800718a:	b2a4      	uxth	r4, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800718c:	8104      	strh	r4, [r0, #8]
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800718e:	8903      	ldrh	r3, [r0, #8]

  /* Reset the SMS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;

  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;
 8007190:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007194:	041b      	lsls	r3, r3, #16
 8007196:	0c1b      	lsrs	r3, r3, #16

  /* Select the Trigger selection : ETRF */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
  tmpsmcr |= TIM_TS_ETRF;
 8007198:	f043 0377 	orr.w	r3, r3, #119	; 0x77

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800719c:	8103      	strh	r3, [r0, #8]
}
 800719e:	bc10      	pop	{r4}
 80071a0:	4770      	bx	lr
 80071a2:	bf00      	nop

080071a4 <TIM_ETRClockMode2Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 80071a4:	b410      	push	{r4}
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
 80071a6:	8904      	ldrh	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
 80071a8:	b2e4      	uxtb	r4, r4

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 80071aa:	430c      	orrs	r4, r1
 80071ac:	4314      	orrs	r4, r2
 80071ae:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80071b2:	b2a4      	uxth	r4, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071b4:	8104      	strh	r4, [r0, #8]

  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);

  /* Enable the External clock mode2 */
  TIMx->SMCR |= TIM_SMCR_ECE;
 80071b6:	8903      	ldrh	r3, [r0, #8]
 80071b8:	b29b      	uxth	r3, r3
 80071ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80071be:	8103      	strh	r3, [r0, #8]
}
 80071c0:	bc10      	pop	{r4}
 80071c2:	4770      	bx	lr

080071c4 <TIM_SelectInputTrigger>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80071c4:	8903      	ldrh	r3, [r0, #8]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 80071c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071ca:	041b      	lsls	r3, r3, #16
 80071cc:	0c1b      	lsrs	r3, r3, #16

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 80071ce:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071d0:	8103      	strh	r3, [r0, #8]
}
 80071d2:	4770      	bx	lr

080071d4 <TIM_SelectOutputTrigger>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
 80071d4:	8883      	ldrh	r3, [r0, #4]
 80071d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071da:	041b      	lsls	r3, r3, #16
 80071dc:	0c1b      	lsrs	r3, r3, #16
 80071de:	8083      	strh	r3, [r0, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 80071e0:	8883      	ldrh	r3, [r0, #4]
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	430b      	orrs	r3, r1
 80071e6:	8083      	strh	r3, [r0, #4]
}
 80071e8:	4770      	bx	lr
 80071ea:	bf00      	nop

080071ec <TIM_SelectSlaveMode>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));

  /* Reset the SMS Bits */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_SMS;
 80071ec:	8903      	ldrh	r3, [r0, #8]
 80071ee:	f023 0307 	bic.w	r3, r3, #7
 80071f2:	041b      	lsls	r3, r3, #16
 80071f4:	0c1b      	lsrs	r3, r3, #16
 80071f6:	8103      	strh	r3, [r0, #8]

  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
 80071f8:	8903      	ldrh	r3, [r0, #8]
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	430b      	orrs	r3, r1
 80071fe:	8103      	strh	r3, [r0, #8]
}
 8007200:	4770      	bx	lr
 8007202:	bf00      	nop

08007204 <TIM_SelectMasterSlaveMode>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));

  /* Reset the MSM Bit */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_MSM;
 8007204:	8903      	ldrh	r3, [r0, #8]
 8007206:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800720a:	041b      	lsls	r3, r3, #16
 800720c:	0c1b      	lsrs	r3, r3, #16
 800720e:	8103      	strh	r3, [r0, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
 8007210:	8903      	ldrh	r3, [r0, #8]
 8007212:	b29b      	uxth	r3, r3
 8007214:	430b      	orrs	r3, r1
 8007216:	8103      	strh	r3, [r0, #8]
}
 8007218:	4770      	bx	lr
 800721a:	bf00      	nop

0800721c <TIM_ETRConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                   uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 800721c:	b410      	push	{r4}
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
 800721e:	8904      	ldrh	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
 8007220:	b2e4      	uxtb	r4, r4

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 8007222:	430c      	orrs	r4, r1
 8007224:	4314      	orrs	r4, r2
 8007226:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 800722a:	b2a4      	uxth	r4, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800722c:	8104      	strh	r4, [r0, #8]
}
 800722e:	bc10      	pop	{r4}
 8007230:	4770      	bx	lr
 8007232:	bf00      	nop

08007234 <TIM_EncoderInterfaceConfig>:
  *            @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
 8007234:	b470      	push	{r4, r5, r6}
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007236:	8905      	ldrh	r5, [r0, #8]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8007238:	8b04      	ldrh	r4, [r0, #24]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800723a:	8c06      	ldrh	r6, [r0, #32]
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 800723c:	f424 7440 	bic.w	r4, r4, #768	; 0x300
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
 8007240:	f026 0622 	bic.w	r6, r6, #34	; 0x22
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 8007244:	f024 0403 	bic.w	r4, r4, #3
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
 8007248:	0436      	lsls	r6, r6, #16

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 800724a:	f025 0507 	bic.w	r5, r5, #7
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 800724e:	0424      	lsls	r4, r4, #16
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
 8007250:	0c36      	lsrs	r6, r6, #16

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 8007252:	042d      	lsls	r5, r5, #16
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 8007254:	0c24      	lsrs	r4, r4, #16
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 8007256:	4316      	orrs	r6, r2

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 8007258:	0c2d      	lsrs	r5, r5, #16
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 800725a:	f444 7480 	orr.w	r4, r4, #256	; 0x100

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 800725e:	ea46 1603 	orr.w	r6, r6, r3, lsl #4
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
  tmpsmcr |= TIM_EncoderMode;
 8007262:	4329      	orrs	r1, r5

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 8007264:	f044 0401 	orr.w	r4, r4, #1

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 8007268:	b2b6      	uxth	r6, r6

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800726a:	8101      	strh	r1, [r0, #8]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 800726c:	8304      	strh	r4, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800726e:	8406      	strh	r6, [r0, #32]
}
 8007270:	bc70      	pop	{r4, r5, r6}
 8007272:	4770      	bx	lr

08007274 <TIM_SelectHallSensor>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 8007274:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8007276:	b929      	cbnz	r1, 8007284 <TIM_SelectHallSensor+0x10>
    TIMx->CR2 |= TIM_CR2_TI1S;
  }
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_TI1S;
 8007278:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800727c:	041b      	lsls	r3, r3, #16
 800727e:	0c1b      	lsrs	r3, r3, #16
 8007280:	8083      	strh	r3, [r0, #4]
 8007282:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 8007284:	b29b      	uxth	r3, r3
 8007286:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800728a:	8083      	strh	r3, [r0, #4]
 800728c:	4770      	bx	lr
 800728e:	bf00      	nop

08007290 <TIM_RemapConfig>:
 /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_REMAP(TIM_Remap));

  /* Set the Timer remapping configuration */
  TIMx->OR =  TIM_Remap;
 8007290:	f8a0 1050 	strh.w	r1, [r0, #80]	; 0x50
}
 8007294:	4770      	bx	lr
 8007296:	bf00      	nop

08007298 <USART_DeInit>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 8007298:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 800729a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800729e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80072a2:	4298      	cmp	r0, r3
 80072a4:	d028      	beq.n	80072f8 <USART_DeInit+0x60>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
  }
  else if (USARTx == USART2)
 80072a6:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 80072aa:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80072ae:	4298      	cmp	r0, r3
 80072b0:	d02c      	beq.n	800730c <USART_DeInit+0x74>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
  }
  else if (USARTx == USART3)
 80072b2:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 80072b6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80072ba:	4298      	cmp	r0, r3
 80072bc:	d032      	beq.n	8007324 <USART_DeInit+0x8c>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
  }    
  else if (USARTx == UART4)
 80072be:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
 80072c2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80072c6:	4298      	cmp	r0, r3
 80072c8:	d038      	beq.n	800733c <USART_DeInit+0xa4>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
  }
  else if (USARTx == UART5)
 80072ca:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80072ce:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80072d2:	4298      	cmp	r0, r3
 80072d4:	d03e      	beq.n	8007354 <USART_DeInit+0xbc>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
  }     
  else
  {
    if (USARTx == USART6)
 80072d6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80072da:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80072de:	4298      	cmp	r0, r3
 80072e0:	d000      	beq.n	80072e4 <USART_DeInit+0x4c>
 80072e2:	bd08      	pop	{r3, pc}
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
 80072e4:	2020      	movs	r0, #32
 80072e6:	2101      	movs	r1, #1
 80072e8:	f7fd fe20 	bl	8004f2c <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 80072ec:	2020      	movs	r0, #32
 80072ee:	2100      	movs	r1, #0
    }
  }
}
 80072f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (USARTx == USART6)
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 80072f4:	f7fd be1a 	b.w	8004f2c <RCC_APB2PeriphResetCmd>
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 80072f8:	2010      	movs	r0, #16
 80072fa:	2101      	movs	r1, #1
 80072fc:	f7fd fe16 	bl	8004f2c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 8007300:	2010      	movs	r0, #16
 8007302:	2100      	movs	r1, #0
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
    }
  }
}
 8007304:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 8007308:	f7fd be10 	b.w	8004f2c <RCC_APB2PeriphResetCmd>
  }
  else if (USARTx == USART2)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 800730c:	2101      	movs	r1, #1
 800730e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8007312:	f7fd fdfd 	bl	8004f10 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 8007316:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800731a:	2100      	movs	r1, #0
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
    }
  }
}
 800731c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
  }
  else if (USARTx == USART2)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 8007320:	f7fd bdf6 	b.w	8004f10 <RCC_APB1PeriphResetCmd>
  }
  else if (USARTx == USART3)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 8007324:	2101      	movs	r1, #1
 8007326:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800732a:	f7fd fdf1 	bl	8004f10 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 800732e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8007332:	2100      	movs	r1, #0
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
    }
  }
}
 8007334:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
  }
  else if (USARTx == USART3)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 8007338:	f7fd bdea 	b.w	8004f10 <RCC_APB1PeriphResetCmd>
  }    
  else if (USARTx == UART4)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 800733c:	2101      	movs	r1, #1
 800733e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8007342:	f7fd fde5 	bl	8004f10 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 8007346:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800734a:	2100      	movs	r1, #0
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
    }
  }
}
 800734c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
  }    
  else if (USARTx == UART4)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 8007350:	f7fd bdde 	b.w	8004f10 <RCC_APB1PeriphResetCmd>
  }
  else if (USARTx == UART5)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 8007354:	2101      	movs	r1, #1
 8007356:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800735a:	f7fd fdd9 	bl	8004f10 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 800735e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8007362:	2100      	movs	r1, #0
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
    }
  }
}
 8007364:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
  }
  else if (USARTx == UART5)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 8007368:	f7fd bdd2 	b.w	8004f10 <RCC_APB1PeriphResetCmd>

0800736c <USART_Init>:
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800736c:	8a02      	ldrh	r2, [r0, #16]
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 800736e:	88cb      	ldrh	r3, [r1, #6]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8007370:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8007374:	0412      	lsls	r2, r2, #16
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8007376:	b5f0      	push	{r4, r5, r6, r7, lr}

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8007378:	0c12      	lsrs	r2, r2, #16
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 800737a:	4604      	mov	r4, r0
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 800737c:	431a      	orrs	r2, r3

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800737e:	8948      	ldrh	r0, [r1, #10]
 8007380:	890f      	ldrh	r7, [r1, #8]
 8007382:	888e      	ldrh	r6, [r1, #4]
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8007384:	460d      	mov	r5, r1
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8007386:	8989      	ldrh	r1, [r1, #12]
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8007388:	8222      	strh	r2, [r4, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 800738a:	89a3      	ldrh	r3, [r4, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 800738c:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007390:	f023 030c 	bic.w	r3, r3, #12

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8007394:	ea47 0206 	orr.w	r2, r7, r6

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8007398:	041b      	lsls	r3, r3, #16

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800739a:	4302      	orrs	r2, r0
 800739c:	b292      	uxth	r2, r2

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 800739e:	0c1b      	lsrs	r3, r3, #16
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 80073a0:	4313      	orrs	r3, r2
 80073a2:	81a3      	strh	r3, [r4, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 80073a4:	8aa3      	ldrh	r3, [r4, #20]

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 80073a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073aa:	041b      	lsls	r3, r3, #16
 80073ac:	0c1b      	lsrs	r3, r3, #16
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80073ae:	b085      	sub	sp, #20
  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 80073b0:	430b      	orrs	r3, r1
 80073b2:	82a3      	strh	r3, [r4, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 80073b4:	4668      	mov	r0, sp
 80073b6:	f7fd fcb7 	bl	8004d28 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 80073ba:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 80073be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80073c2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80073c6:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80073ca:	429c      	cmp	r4, r3
 80073cc:	bf18      	it	ne
 80073ce:	4294      	cmpne	r4, r2
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80073d0:	89a2      	ldrh	r2, [r4, #12]
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);

  if ((USARTx == USART1) || (USARTx == USART6))
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 80073d2:	bf0c      	ite	eq
 80073d4:	9b03      	ldreq	r3, [sp, #12]
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 80073d6:	9b02      	ldrne	r3, [sp, #8]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80073d8:	b212      	sxth	r2, r2
 80073da:	2a00      	cmp	r2, #0
 80073dc:	db21      	blt.n	8007422 <USART_Init+0xb6>
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 80073de:	6828      	ldr	r0, [r5, #0]
 80073e0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80073e4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80073e8:	0080      	lsls	r0, r0, #2
 80073ea:	fbb3 f1f0 	udiv	r1, r3, r0
  }
  tmpreg = (integerdivider / 100) << 4;
 80073ee:	f248 531f 	movw	r3, #34079	; 0x851f

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80073f2:	89a0      	ldrh	r0, [r4, #12]
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
  }
  tmpreg = (integerdivider / 100) << 4;
 80073f4:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 80073f8:	fba3 5201 	umull	r5, r2, r3, r1
 80073fc:	0952      	lsrs	r2, r2, #5

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80073fe:	b200      	sxth	r0, r0
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
  }
  tmpreg = (integerdivider / 100) << 4;

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8007400:	0116      	lsls	r6, r2, #4
 8007402:	2564      	movs	r5, #100	; 0x64

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8007404:	2800      	cmp	r0, #0
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
  }
  tmpreg = (integerdivider / 100) << 4;

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8007406:	fb02 1215 	mls	r2, r2, r5, r1

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800740a:	db13      	blt.n	8007434 <USART_Init+0xc8>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 800740c:	0112      	lsls	r2, r2, #4
 800740e:	3232      	adds	r2, #50	; 0x32
 8007410:	fba3 5302 	umull	r5, r3, r3, r2
 8007414:	f3c3 1343 	ubfx	r3, r3, #5, #4
 8007418:	4333      	orrs	r3, r6
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 800741a:	b29b      	uxth	r3, r3
 800741c:	8123      	strh	r3, [r4, #8]
}
 800741e:	b005      	add	sp, #20
 8007420:	bdf0      	pop	{r4, r5, r6, r7, pc}
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8007422:	682a      	ldr	r2, [r5, #0]
 8007424:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007428:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800742c:	0052      	lsls	r2, r2, #1
 800742e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007432:	e7dc      	b.n	80073ee <USART_Init+0x82>
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8007434:	00d2      	lsls	r2, r2, #3
 8007436:	3232      	adds	r2, #50	; 0x32
 8007438:	fba3 1302 	umull	r1, r3, r3, r2
 800743c:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8007440:	4333      	orrs	r3, r6
 8007442:	e7ea      	b.n	800741a <USART_Init+0xae>

08007444 <USART_StructInit>:
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 8007444:	f44f 5216 	mov.w	r2, #9600	; 0x2580
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 8007448:	2300      	movs	r3, #0
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 800744a:	6002      	str	r2, [r0, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
  USART_InitStruct->USART_Parity = USART_Parity_No ;
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800744c:	220c      	movs	r2, #12
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 800744e:	8083      	strh	r3, [r0, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 8007450:	80c3      	strh	r3, [r0, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 8007452:	8103      	strh	r3, [r0, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8007454:	8142      	strh	r2, [r0, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 8007456:	8183      	strh	r3, [r0, #12]
}
 8007458:	4770      	bx	lr
 800745a:	bf00      	nop

0800745c <USART_ClockInit>:
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 800745c:	880a      	ldrh	r2, [r1, #0]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800745e:	8a03      	ldrh	r3, [r0, #16]
  *         contains the configuration information for the specified  USART peripheral.
  * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 8007460:	b430      	push	{r4, r5}
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8007462:	884d      	ldrh	r5, [r1, #2]
 8007464:	888c      	ldrh	r4, [r1, #4]
 8007466:	88c9      	ldrh	r1, [r1, #6]
 8007468:	432a      	orrs	r2, r5
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 800746a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 800746e:	4322      	orrs	r2, r4
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 8007470:	041b      	lsls	r3, r3, #16
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8007472:	430a      	orrs	r2, r1
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 8007474:	0c1b      	lsrs	r3, r3, #16
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8007476:	b292      	uxth	r2, r2
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8007478:	4313      	orrs	r3, r2
 800747a:	8203      	strh	r3, [r0, #16]
}
 800747c:	bc30      	pop	{r4, r5}
 800747e:	4770      	bx	lr

08007480 <USART_ClockStructInit>:
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 8007480:	2300      	movs	r3, #0
 8007482:	8003      	strh	r3, [r0, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 8007484:	8043      	strh	r3, [r0, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 8007486:	8083      	strh	r3, [r0, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 8007488:	80c3      	strh	r3, [r0, #6]
}
 800748a:	4770      	bx	lr

0800748c <USART_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 800748c:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800748e:	b929      	cbnz	r1, 800749c <USART_Cmd+0x10>
    USARTx->CR1 |= USART_CR1_UE;
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8007490:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007494:	041b      	lsls	r3, r3, #16
 8007496:	0c1b      	lsrs	r3, r3, #16
 8007498:	8183      	strh	r3, [r0, #12]
 800749a:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 800749c:	b29b      	uxth	r3, r3
 800749e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80074a2:	8183      	strh	r3, [r0, #12]
 80074a4:	4770      	bx	lr
 80074a6:	bf00      	nop

080074a8 <USART_SetPrescaler>:
{ 
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= USART_GTPR_GT;
 80074a8:	8b03      	ldrh	r3, [r0, #24]
 80074aa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80074ae:	8303      	strh	r3, [r0, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 80074b0:	8b03      	ldrh	r3, [r0, #24]
 80074b2:	b29b      	uxth	r3, r3
 80074b4:	430b      	orrs	r3, r1
 80074b6:	8303      	strh	r3, [r0, #24]
}
 80074b8:	4770      	bx	lr
 80074ba:	bf00      	nop

080074bc <USART_OverSampling8Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 80074bc:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80074be:	b919      	cbnz	r1, 80074c8 <USART_OverSampling8Cmd+0xc>
    USARTx->CR1 |= USART_CR1_OVER8;
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
 80074c0:	045b      	lsls	r3, r3, #17
 80074c2:	0c5b      	lsrs	r3, r3, #17
 80074c4:	8183      	strh	r3, [r0, #12]
 80074c6:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 80074c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074d0:	b29b      	uxth	r3, r3
 80074d2:	8183      	strh	r3, [r0, #12]
 80074d4:	4770      	bx	lr
 80074d6:	bf00      	nop

080074d8 <USART_OneBitMethodCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 80074d8:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80074da:	b929      	cbnz	r1, 80074e8 <USART_OneBitMethodCmd+0x10>
    USARTx->CR3 |= USART_CR3_ONEBIT;
  }
  else
  {
    /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
 80074dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80074e0:	041b      	lsls	r3, r3, #16
 80074e2:	0c1b      	lsrs	r3, r3, #16
 80074e4:	8283      	strh	r3, [r0, #20]
 80074e6:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 80074e8:	b29b      	uxth	r3, r3
 80074ea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80074ee:	8283      	strh	r3, [r0, #20]
 80074f0:	4770      	bx	lr
 80074f2:	bf00      	nop

080074f4 <USART_SendData>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 80074f4:	05c9      	lsls	r1, r1, #23
 80074f6:	0dc9      	lsrs	r1, r1, #23
 80074f8:	8081      	strh	r1, [r0, #4]
}
 80074fa:	4770      	bx	lr

080074fc <USART_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 80074fc:	8880      	ldrh	r0, [r0, #4]
}
 80074fe:	05c0      	lsls	r0, r0, #23
 8007500:	0dc0      	lsrs	r0, r0, #23
 8007502:	4770      	bx	lr

08007504 <USART_SetAddress>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
 8007504:	8a03      	ldrh	r3, [r0, #16]
 8007506:	f023 030f 	bic.w	r3, r3, #15
 800750a:	041b      	lsls	r3, r3, #16
 800750c:	0c1b      	lsrs	r3, r3, #16
 800750e:	8203      	strh	r3, [r0, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
 8007510:	8a03      	ldrh	r3, [r0, #16]
 8007512:	b29b      	uxth	r3, r3
 8007514:	430b      	orrs	r3, r1
 8007516:	8203      	strh	r3, [r0, #16]
}
 8007518:	4770      	bx	lr
 800751a:	bf00      	nop

0800751c <USART_ReceiverWakeUpCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 800751c:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
 800751e:	b929      	cbnz	r1, 800752c <USART_ReceiverWakeUpCmd+0x10>
    USARTx->CR1 |= USART_CR1_RWU;
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
 8007520:	f023 0302 	bic.w	r3, r3, #2
 8007524:	041b      	lsls	r3, r3, #16
 8007526:	0c1b      	lsrs	r3, r3, #16
 8007528:	8183      	strh	r3, [r0, #12]
 800752a:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 800752c:	b29b      	uxth	r3, r3
 800752e:	f043 0302 	orr.w	r3, r3, #2
 8007532:	8183      	strh	r3, [r0, #12]
 8007534:	4770      	bx	lr
 8007536:	bf00      	nop

08007538 <USART_WakeUpConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
 8007538:	8983      	ldrh	r3, [r0, #12]
 800753a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800753e:	041b      	lsls	r3, r3, #16
 8007540:	0c1b      	lsrs	r3, r3, #16
 8007542:	8183      	strh	r3, [r0, #12]
  USARTx->CR1 |= USART_WakeUp;
 8007544:	8983      	ldrh	r3, [r0, #12]
 8007546:	b29b      	uxth	r3, r3
 8007548:	430b      	orrs	r3, r1
 800754a:	8183      	strh	r3, [r0, #12]
}
 800754c:	4770      	bx	lr
 800754e:	bf00      	nop

08007550 <USART_LINBreakDetectLengthConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
 8007550:	8a03      	ldrh	r3, [r0, #16]
 8007552:	f023 0320 	bic.w	r3, r3, #32
 8007556:	041b      	lsls	r3, r3, #16
 8007558:	0c1b      	lsrs	r3, r3, #16
 800755a:	8203      	strh	r3, [r0, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 800755c:	8a03      	ldrh	r3, [r0, #16]
 800755e:	b29b      	uxth	r3, r3
 8007560:	430b      	orrs	r3, r1
 8007562:	8203      	strh	r3, [r0, #16]
}
 8007564:	4770      	bx	lr
 8007566:	bf00      	nop

08007568 <USART_LINCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 8007568:	8a03      	ldrh	r3, [r0, #16]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800756a:	b929      	cbnz	r1, 8007578 <USART_LINCmd+0x10>
    USARTx->CR2 |= USART_CR2_LINEN;
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
 800756c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007570:	041b      	lsls	r3, r3, #16
 8007572:	0c1b      	lsrs	r3, r3, #16
 8007574:	8203      	strh	r3, [r0, #16]
 8007576:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 8007578:	b29b      	uxth	r3, r3
 800757a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800757e:	8203      	strh	r3, [r0, #16]
 8007580:	4770      	bx	lr
 8007582:	bf00      	nop

08007584 <USART_SendBreak>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= USART_CR1_SBK;
 8007584:	8983      	ldrh	r3, [r0, #12]
 8007586:	b29b      	uxth	r3, r3
 8007588:	f043 0301 	orr.w	r3, r3, #1
 800758c:	8183      	strh	r3, [r0, #12]
}
 800758e:	4770      	bx	lr

08007590 <USART_HalfDuplexCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 8007590:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8007592:	b929      	cbnz	r1, 80075a0 <USART_HalfDuplexCmd+0x10>
    USARTx->CR3 |= USART_CR3_HDSEL;
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
 8007594:	f023 0308 	bic.w	r3, r3, #8
 8007598:	041b      	lsls	r3, r3, #16
 800759a:	0c1b      	lsrs	r3, r3, #16
 800759c:	8283      	strh	r3, [r0, #20]
 800759e:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	f043 0308 	orr.w	r3, r3, #8
 80075a6:	8283      	strh	r3, [r0, #20]
 80075a8:	4770      	bx	lr
 80075aa:	bf00      	nop

080075ac <USART_SetGuardTime>:
{    
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= USART_GTPR_PSC;
 80075ac:	8b03      	ldrh	r3, [r0, #24]
 80075ae:	b2db      	uxtb	r3, r3
 80075b0:	8303      	strh	r3, [r0, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 80075b2:	8b03      	ldrh	r3, [r0, #24]
 80075b4:	b29b      	uxth	r3, r3
 80075b6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80075ba:	8303      	strh	r3, [r0, #24]
}
 80075bc:	4770      	bx	lr
 80075be:	bf00      	nop

080075c0 <USART_SmartCardCmd>:
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 80075c0:	8a83      	ldrh	r3, [r0, #20]
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80075c2:	b929      	cbnz	r1, 80075d0 <USART_SmartCardCmd+0x10>
    USARTx->CR3 |= USART_CR3_SCEN;
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
 80075c4:	f023 0320 	bic.w	r3, r3, #32
 80075c8:	041b      	lsls	r3, r3, #16
 80075ca:	0c1b      	lsrs	r3, r3, #16
 80075cc:	8283      	strh	r3, [r0, #20]
 80075ce:	4770      	bx	lr
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	f043 0320 	orr.w	r3, r3, #32
 80075d6:	8283      	strh	r3, [r0, #20]
 80075d8:	4770      	bx	lr
 80075da:	bf00      	nop

080075dc <USART_SmartCardNACKCmd>:
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 80075dc:	8a83      	ldrh	r3, [r0, #20]
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80075de:	b929      	cbnz	r1, 80075ec <USART_SmartCardNACKCmd+0x10>
    USARTx->CR3 |= USART_CR3_NACK;
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
 80075e0:	f023 0310 	bic.w	r3, r3, #16
 80075e4:	041b      	lsls	r3, r3, #16
 80075e6:	0c1b      	lsrs	r3, r3, #16
 80075e8:	8283      	strh	r3, [r0, #20]
 80075ea:	4770      	bx	lr
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	f043 0310 	orr.w	r3, r3, #16
 80075f2:	8283      	strh	r3, [r0, #20]
 80075f4:	4770      	bx	lr
 80075f6:	bf00      	nop

080075f8 <USART_IrDAConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
 80075f8:	8a83      	ldrh	r3, [r0, #20]
 80075fa:	f023 0304 	bic.w	r3, r3, #4
 80075fe:	041b      	lsls	r3, r3, #16
 8007600:	0c1b      	lsrs	r3, r3, #16
 8007602:	8283      	strh	r3, [r0, #20]
  USARTx->CR3 |= USART_IrDAMode;
 8007604:	8a83      	ldrh	r3, [r0, #20]
 8007606:	b29b      	uxth	r3, r3
 8007608:	430b      	orrs	r3, r1
 800760a:	8283      	strh	r3, [r0, #20]
}
 800760c:	4770      	bx	lr
 800760e:	bf00      	nop

08007610 <USART_IrDACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 8007610:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 8007612:	b929      	cbnz	r1, 8007620 <USART_IrDACmd+0x10>
    USARTx->CR3 |= USART_CR3_IREN;
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
 8007614:	f023 0302 	bic.w	r3, r3, #2
 8007618:	041b      	lsls	r3, r3, #16
 800761a:	0c1b      	lsrs	r3, r3, #16
 800761c:	8283      	strh	r3, [r0, #20]
 800761e:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 8007620:	b29b      	uxth	r3, r3
 8007622:	f043 0302 	orr.w	r3, r3, #2
 8007626:	8283      	strh	r3, [r0, #20]
 8007628:	4770      	bx	lr
 800762a:	bf00      	nop

0800762c <USART_DMACmd>:

  if (NewState != DISABLE)
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 800762c:	8a83      	ldrh	r3, [r0, #20]
 800762e:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 8007630:	b91a      	cbnz	r2, 800763a <USART_DMACmd+0xe>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 8007632:	ea23 0101 	bic.w	r1, r3, r1
 8007636:	8281      	strh	r1, [r0, #20]
 8007638:	4770      	bx	lr

  if (NewState != DISABLE)
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 800763a:	4319      	orrs	r1, r3
 800763c:	8281      	strh	r1, [r0, #20]
 800763e:	4770      	bx	lr

08007640 <USART_ITConfig>:

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8007640:	f001 031f 	and.w	r3, r1, #31
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8007644:	b410      	push	{r4}
  } 
    
  usartxbase = (uint32_t)USARTx;

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8007646:	f3c1 1142 	ubfx	r1, r1, #5, #3

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
 800764a:	2401      	movs	r4, #1
 800764c:	fa14 f303 	lsls.w	r3, r4, r3
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8007650:	42a1      	cmp	r1, r4
 8007652:	d00d      	beq.n	8007670 <USART_ITConfig+0x30>
  {
    usartxbase += 0x0C;
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8007654:	2902      	cmp	r1, #2
 8007656:	d00d      	beq.n	8007674 <USART_ITConfig+0x34>
  {
    usartxbase += 0x10;
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8007658:	3014      	adds	r0, #20
  }
  if (NewState != DISABLE)
 800765a:	b92a      	cbnz	r2, 8007668 <USART_ITConfig+0x28>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 800765c:	6802      	ldr	r2, [r0, #0]
 800765e:	ea22 0303 	bic.w	r3, r2, r3
 8007662:	6003      	str	r3, [r0, #0]
  }
}
 8007664:	bc10      	pop	{r4}
 8007666:	4770      	bx	lr
  {
    usartxbase += 0x14; 
  }
  if (NewState != DISABLE)
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8007668:	6802      	ldr	r2, [r0, #0]
 800766a:	4313      	orrs	r3, r2
 800766c:	6003      	str	r3, [r0, #0]
 800766e:	e7f9      	b.n	8007664 <USART_ITConfig+0x24>
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
  {
    usartxbase += 0x0C;
 8007670:	300c      	adds	r0, #12
 8007672:	e7f2      	b.n	800765a <USART_ITConfig+0x1a>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
  {
    usartxbase += 0x10;
 8007674:	3010      	adds	r0, #16
 8007676:	e7f0      	b.n	800765a <USART_ITConfig+0x1a>

08007678 <USART_GetFlagStatus>:
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8007678:	8803      	ldrh	r3, [r0, #0]
  {
    bitstatus = SET;
 800767a:	4219      	tst	r1, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 800767c:	bf0c      	ite	eq
 800767e:	2000      	moveq	r0, #0
 8007680:	2001      	movne	r0, #1
 8007682:	4770      	bx	lr

08007684 <USART_ClearFlag>:
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
       
  USARTx->SR = (uint16_t)~USART_FLAG;
 8007684:	43c9      	mvns	r1, r1
 8007686:	b289      	uxth	r1, r1
 8007688:	8001      	strh	r1, [r0, #0]
}
 800768a:	4770      	bx	lr

0800768c <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 800768c:	b410      	push	{r4}
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 800768e:	f001 021f 	and.w	r2, r1, #31
  itmask = (uint32_t)0x01 << itmask;
 8007692:	2401      	movs	r4, #1
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8007694:	f3c1 1342 	ubfx	r3, r1, #5, #3
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
 8007698:	4094      	lsls	r4, r2
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 800769a:	2b01      	cmp	r3, #1
 800769c:	d016      	beq.n	80076cc <USART_GetITStatus+0x40>
  {
    itmask &= USARTx->CR1;
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 800769e:	2b02      	cmp	r3, #2
  {
    itmask &= USARTx->CR2;
 80076a0:	bf0c      	ite	eq
 80076a2:	8a02      	ldrheq	r2, [r0, #16]
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 80076a4:	8a82      	ldrhne	r2, [r0, #20]
 80076a6:	b292      	uxth	r2, r2
 80076a8:	4022      	ands	r2, r4
  }
  
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
  bitpos &= USARTx->SR;
 80076aa:	8803      	ldrh	r3, [r0, #0]
  {
    itmask &= USARTx->CR3;
  }
  
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
 80076ac:	2401      	movs	r4, #1
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
  }
  
  bitpos = USART_IT >> 0x08;
 80076ae:	0a09      	lsrs	r1, r1, #8
  bitpos = (uint32_t)0x01 << bitpos;
 80076b0:	fa14 f101 	lsls.w	r1, r4, r1
  bitpos &= USARTx->SR;
 80076b4:	b29b      	uxth	r3, r3
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 80076b6:	4219      	tst	r1, r3
 80076b8:	bf0c      	ite	eq
 80076ba:	2300      	moveq	r3, #0
 80076bc:	2301      	movne	r3, #1
  {
    bitstatus = RESET;
  }
  
  return bitstatus;  
}
 80076be:	2a00      	cmp	r2, #0
 80076c0:	bf0c      	ite	eq
 80076c2:	2000      	moveq	r0, #0
 80076c4:	f003 0001 	andne.w	r0, r3, #1
 80076c8:	bc10      	pop	{r4}
 80076ca:	4770      	bx	lr
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
  {
    itmask &= USARTx->CR1;
 80076cc:	8982      	ldrh	r2, [r0, #12]
 80076ce:	b292      	uxth	r2, r2
 80076d0:	4022      	ands	r2, r4
 80076d2:	e7ea      	b.n	80076aa <USART_GetITStatus+0x1e>

080076d4 <USART_ClearITPendingBit>:
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 80076d4:	0a09      	lsrs	r1, r1, #8
 80076d6:	2301      	movs	r3, #1
 80076d8:	fa13 f101 	lsls.w	r1, r3, r1
  USARTx->SR = (uint16_t)~itmask;
 80076dc:	43c9      	mvns	r1, r1
 80076de:	b289      	uxth	r1, r1
 80076e0:	8001      	strh	r1, [r0, #0]
}
 80076e2:	4770      	bx	lr

080076e4 <WWDG_DeInit>:
  * @brief  Deinitializes the WWDG peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void WWDG_DeInit(void)
{
 80076e4:	b508      	push	{r3, lr}
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, ENABLE);
 80076e6:	2101      	movs	r1, #1
 80076e8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80076ec:	f7fd fc10 	bl	8004f10 <RCC_APB1PeriphResetCmd>
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, DISABLE);
 80076f0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80076f4:	2100      	movs	r1, #0
}
 80076f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  * @retval None
  */
void WWDG_DeInit(void)
{
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, ENABLE);
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, DISABLE);
 80076fa:	f7fd bc09 	b.w	8004f10 <RCC_APB1PeriphResetCmd>
 80076fe:	bf00      	nop

08007700 <WWDG_SetPrescaler>:
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_WWDG_PRESCALER(WWDG_Prescaler));
  /* Clear WDGTB[1:0] bits */
  tmpreg = WWDG->CFR & CFR_WDGTB_MASK;
 8007700:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8007704:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8007708:	685a      	ldr	r2, [r3, #4]
 800770a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
  /* Set WDGTB[1:0] bits according to WWDG_Prescaler value */
  tmpreg |= WWDG_Prescaler;
 800770e:	4302      	orrs	r2, r0
  /* Store the new value */
  WWDG->CFR = tmpreg;
 8007710:	605a      	str	r2, [r3, #4]
}
 8007712:	4770      	bx	lr

08007714 <WWDG_SetWindowValue>:
  * @param  WindowValue: specifies the window value to be compared to the downcounter.
  *   This parameter value must be lower than 0x80.
  * @retval None
  */
void WWDG_SetWindowValue(uint8_t WindowValue)
{
 8007714:	b082      	sub	sp, #8

  /* Check the parameters */
  assert_param(IS_WWDG_WINDOW_VALUE(WindowValue));
  /* Clear W[6:0] bits */

  tmpreg = WWDG->CFR & CFR_W_MASK;
 8007716:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800771a:	f2c4 0300 	movt	r3, #16384	; 0x4000
  *   This parameter value must be lower than 0x80.
  * @retval None
  */
void WWDG_SetWindowValue(uint8_t WindowValue)
{
  __IO uint32_t tmpreg = 0;
 800771e:	2200      	movs	r2, #0
 8007720:	9201      	str	r2, [sp, #4]

  /* Check the parameters */
  assert_param(IS_WWDG_WINDOW_VALUE(WindowValue));
  /* Clear W[6:0] bits */

  tmpreg = WWDG->CFR & CFR_W_MASK;
 8007722:	685a      	ldr	r2, [r3, #4]
 8007724:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8007728:	9201      	str	r2, [sp, #4]

  /* Set W[6:0] bits according to WindowValue value */
  tmpreg |= WindowValue & (uint32_t) BIT_MASK;
 800772a:	9a01      	ldr	r2, [sp, #4]
 800772c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8007730:	4302      	orrs	r2, r0
 8007732:	9201      	str	r2, [sp, #4]

  /* Store the new value */
  WWDG->CFR = tmpreg;
 8007734:	9a01      	ldr	r2, [sp, #4]
 8007736:	605a      	str	r2, [r3, #4]
}
 8007738:	b002      	add	sp, #8
 800773a:	4770      	bx	lr

0800773c <WWDG_EnableIT>:
  * @param  None
  * @retval None
  */
void WWDG_EnableIT(void)
{
  *(__IO uint32_t *) CFR_EWI_BB = (uint32_t)ENABLE;
 800773c:	f248 03a4 	movw	r3, #32932	; 0x80a4
 8007740:	f2c4 2305 	movt	r3, #16901	; 0x4205
 8007744:	2201      	movs	r2, #1
 8007746:	601a      	str	r2, [r3, #0]
}
 8007748:	4770      	bx	lr
 800774a:	bf00      	nop

0800774c <WWDG_SetCounter>:
{
  /* Check the parameters */
  assert_param(IS_WWDG_COUNTER(Counter));
  /* Write to T[6:0] bits to configure the counter value, no need to do
     a read-modify-write; writing a 0 to WDGA bit does nothing */
  WWDG->CR = Counter & BIT_MASK;
 800774c:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8007750:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8007754:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8007758:	6018      	str	r0, [r3, #0]
}
 800775a:	4770      	bx	lr

0800775c <WWDG_Enable>:
  */
void WWDG_Enable(uint8_t Counter)
{
  /* Check the parameters */
  assert_param(IS_WWDG_COUNTER(Counter));
  WWDG->CR = WWDG_CR_WDGA | Counter;
 800775c:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8007760:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8007764:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8007768:	6018      	str	r0, [r3, #0]
}
 800776a:	4770      	bx	lr

0800776c <WWDG_GetFlagStatus>:
  */
FlagStatus WWDG_GetFlagStatus(void)
{
  FlagStatus bitstatus = RESET;
    
  if ((WWDG->SR) != (uint32_t)RESET)
 800776c:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8007770:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8007774:	6898      	ldr	r0, [r3, #8]
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8007776:	3000      	adds	r0, #0
 8007778:	bf18      	it	ne
 800777a:	2001      	movne	r0, #1
 800777c:	4770      	bx	lr
 800777e:	bf00      	nop

08007780 <WWDG_ClearFlag>:
  * @param  None
  * @retval None
  */
void WWDG_ClearFlag(void)
{
  WWDG->SR = (uint32_t)RESET;
 8007780:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8007784:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8007788:	2200      	movs	r2, #0
 800778a:	609a      	str	r2, [r3, #8]
}
 800778c:	4770      	bx	lr
 800778e:	bf00      	nop

08007790 <ST7032i_init>:
void ST7032i_command(ST7032i * lcd, byte value);
size_t ST7032i_write(ST7032i * lcd, byte value);

//
void ST7032i_init(ST7032i * lcd, I2CBus * wx) {
	lcd->_numlines = 2;
 8007790:	2302      	movs	r3, #2
 8007792:	7103      	strb	r3, [r0, #4]
	lcd->_numcolumns = 16;
 8007794:	2310      	movs	r3, #16
 8007796:	7143      	strb	r3, [r0, #5]
	lcd->_position = 0;
 8007798:	2300      	movs	r3, #0
 800779a:	7183      	strb	r3, [r0, #6]
	lcd->i2c_address = DEFAULT_I2C_ADDRESS;
 800779c:	233e      	movs	r3, #62	; 0x3e
 800779e:	7343      	strb	r3, [r0, #13]
	lcd->contrast = DEFAULTCONTRAST;
 80077a0:	232a      	movs	r3, #42	; 0x2a
 80077a2:	7303      	strb	r3, [r0, #12]
	lcd->pin_bklight = PIN_NOT_DEFINED;
 80077a4:	23ff      	movs	r3, #255	; 0xff
 80077a6:	81c3      	strh	r3, [r0, #14]

	lcd->wirex = wx;
 80077a8:	6081      	str	r1, [r0, #8]
	 }
	 */
	if (lcd->pin_bklight != PIN_NOT_DEFINED) {
		pinMode(lcd->pin_bklight, OUTPUT);
	}
}
 80077aa:	4770      	bx	lr

080077ac <ST7032i_command>:
//

void ST7032i_command(ST7032i * lcd, uint8_t value) {
 80077ac:	b500      	push	{lr}
 80077ae:	4603      	mov	r3, r0
 80077b0:	b083      	sub	sp, #12
	uint8_t buf[2];
	buf[0] = (byte) 0x00;
	buf[1] = value;
	i2c_transmit(lcd->wirex, lcd->i2c_address, buf, 2);
 80077b2:	aa01      	add	r2, sp, #4
//

void ST7032i_command(ST7032i * lcd, uint8_t value) {
	uint8_t buf[2];
	buf[0] = (byte) 0x00;
	buf[1] = value;
 80077b4:	f88d 1005 	strb.w	r1, [sp, #5]
	i2c_transmit(lcd->wirex, lcd->i2c_address, buf, 2);
 80077b8:	7b59      	ldrb	r1, [r3, #13]
 80077ba:	6880      	ldr	r0, [r0, #8]
}
//

void ST7032i_command(ST7032i * lcd, uint8_t value) {
	uint8_t buf[2];
	buf[0] = (byte) 0x00;
 80077bc:	2300      	movs	r3, #0
 80077be:	f88d 3004 	strb.w	r3, [sp, #4]
	buf[1] = value;
	i2c_transmit(lcd->wirex, lcd->i2c_address, buf, 2);
 80077c2:	2302      	movs	r3, #2
 80077c4:	f7f8 fff0 	bl	80007a8 <i2c_transmit>
	delay_us(CMDDELAY);
 80077c8:	2032      	movs	r0, #50	; 0x32
 80077ca:	f7f8 fd4d 	bl	8000268 <delay_us>
}
 80077ce:	b003      	add	sp, #12
 80077d0:	bd00      	pop	{pc}
 80077d2:	bf00      	nop

080077d4 <ST7032i_write>:

//
size_t ST7032i_write(ST7032i * lcd, uint8_t value) {
 80077d4:	b510      	push	{r4, lr}
 80077d6:	b082      	sub	sp, #8
	uint8_t buf[2];
	buf[0] = 0b01000000;
	buf[1] = value & 0xff;
	i2c_transmit(lcd->wirex,lcd->i2c_address, buf, 2);
 80077d8:	aa01      	add	r2, sp, #4

//
size_t ST7032i_write(ST7032i * lcd, uint8_t value) {
	uint8_t buf[2];
	buf[0] = 0b01000000;
	buf[1] = value & 0xff;
 80077da:	f88d 1005 	strb.w	r1, [sp, #5]
	i2c_transmit(lcd->wirex,lcd->i2c_address, buf, 2);
 80077de:	2302      	movs	r3, #2
 80077e0:	7b41      	ldrb	r1, [r0, #13]
 80077e2:	6880      	ldr	r0, [r0, #8]
}

//
size_t ST7032i_write(ST7032i * lcd, uint8_t value) {
	uint8_t buf[2];
	buf[0] = 0b01000000;
 80077e4:	2440      	movs	r4, #64	; 0x40
 80077e6:	f88d 4004 	strb.w	r4, [sp, #4]
	buf[1] = value & 0xff;
	i2c_transmit(lcd->wirex,lcd->i2c_address, buf, 2);
 80077ea:	f7f8 ffdd 	bl	80007a8 <i2c_transmit>
	delay_us(CMDDELAY);
 80077ee:	2032      	movs	r0, #50	; 0x32
 80077f0:	f7f8 fd3a 	bl	8000268 <delay_us>
	return 1; // assume success
}
 80077f4:	2001      	movs	r0, #1
 80077f6:	b002      	add	sp, #8
 80077f8:	bd10      	pop	{r4, pc}
 80077fa:	bf00      	nop

080077fc <ST7032i_print>:
	lcd->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
	// set the entry mode
	ST7032i_command(lcd, LCD_ENTRYMODESET | lcd->_displaymode);
}

size_t ST7032i_print(ST7032i * lcd, const char * str) {
 80077fc:	b570      	push	{r4, r5, r6, lr}
 80077fe:	460d      	mov	r5, r1
	uint16_t i;
	for (i = 0; str[i]; i++)
 8007800:	7809      	ldrb	r1, [r1, #0]
	lcd->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
	// set the entry mode
	ST7032i_command(lcd, LCD_ENTRYMODESET | lcd->_displaymode);
}

size_t ST7032i_print(ST7032i * lcd, const char * str) {
 8007802:	4606      	mov	r6, r0
	uint16_t i;
	for (i = 0; str[i]; i++)
 8007804:	b151      	cbz	r1, 800781c <ST7032i_print+0x20>
 8007806:	2400      	movs	r4, #0
 8007808:	3401      	adds	r4, #1
 800780a:	b2a4      	uxth	r4, r4
		ST7032i_write(lcd, str[i]);
 800780c:	4630      	mov	r0, r6
 800780e:	f7ff ffe1 	bl	80077d4 <ST7032i_write>
	ST7032i_command(lcd, LCD_ENTRYMODESET | lcd->_displaymode);
}

size_t ST7032i_print(ST7032i * lcd, const char * str) {
	uint16_t i;
	for (i = 0; str[i]; i++)
 8007812:	5d29      	ldrb	r1, [r5, r4]
 8007814:	4620      	mov	r0, r4
 8007816:	2900      	cmp	r1, #0
 8007818:	d1f6      	bne.n	8007808 <ST7032i_print+0xc>
 800781a:	bd70      	pop	{r4, r5, r6, pc}
 800781c:	4608      	mov	r0, r1
		ST7032i_write(lcd, str[i]);
	return i; // assume success
}
 800781e:	bd70      	pop	{r4, r5, r6, pc}

08007820 <ST7032i_setContrast>:

void ST7032i_setContrast(ST7032i * lcd, byte val) {
	lcd->contrast = 0x7f & val;
 8007820:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	for (i = 0; str[i]; i++)
		ST7032i_write(lcd, str[i]);
	return i; // assume success
}

void ST7032i_setContrast(ST7032i * lcd, byte val) {
 8007824:	b510      	push	{r4, lr}
 8007826:	4604      	mov	r4, r0
	lcd->contrast = 0x7f & val;
 8007828:	7301      	strb	r1, [r0, #12]
	ST7032i_command(lcd, 0b00111000); //function set
 800782a:	2138      	movs	r1, #56	; 0x38
 800782c:	f7ff ffbe 	bl	80077ac <ST7032i_command>
	ST7032i_command(lcd, 0b00111001); // function set
 8007830:	2139      	movs	r1, #57	; 0x39
 8007832:	4620      	mov	r0, r4
 8007834:	f7ff ffba 	bl	80077ac <ST7032i_command>
	delay_ms(2);
 8007838:	2002      	movs	r0, #2
 800783a:	f7f8 fd05 	bl	8000248 <delay_ms>
	ST7032i_command(lcd, 0b01110000 | (lcd->contrast & 0xf)); // contrast Low 4 bits
 800783e:	7b21      	ldrb	r1, [r4, #12]
 8007840:	f001 010f 	and.w	r1, r1, #15
 8007844:	f041 0170 	orr.w	r1, r1, #112	; 0x70
 8007848:	4620      	mov	r0, r4
 800784a:	f7ff ffaf 	bl	80077ac <ST7032i_command>
	delay_ms(2);
 800784e:	2002      	movs	r0, #2
 8007850:	f7f8 fcfa 	bl	8000248 <delay_ms>
	ST7032i_command(lcd, 0b01011100 | ((lcd->contrast >> 4) & 0x3)); // contast High/icon/power
 8007854:	7b21      	ldrb	r1, [r4, #12]
 8007856:	f3c1 1101 	ubfx	r1, r1, #4, #2
 800785a:	4620      	mov	r0, r4
 800785c:	f041 015c 	orr.w	r1, r1, #92	; 0x5c
 8007860:	f7ff ffa4 	bl	80077ac <ST7032i_command>
	ST7032i_command(lcd, 0b00111000); // function set
 8007864:	4620      	mov	r0, r4
 8007866:	2138      	movs	r1, #56	; 0x38
 8007868:	f7ff ffa0 	bl	80077ac <ST7032i_command>
	delay_ms(2);
 800786c:	2002      	movs	r0, #2
}
 800786e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	delay_ms(2);
	ST7032i_command(lcd, 0b01110000 | (lcd->contrast & 0xf)); // contrast Low 4 bits
	delay_ms(2);
	ST7032i_command(lcd, 0b01011100 | ((lcd->contrast >> 4) & 0x3)); // contast High/icon/power
	ST7032i_command(lcd, 0b00111000); // function set
	delay_ms(2);
 8007872:	f7f8 bce9 	b.w	8000248 <delay_ms>
 8007876:	bf00      	nop

08007878 <ST7032i_clear>:
}

/* ------------------ */

void ST7032i_clear(ST7032i * lcd) {
 8007878:	b508      	push	{r3, lr}
	ST7032i_command(lcd, LCD_CLEARDISPLAY); // clear display, set cursor position to zero
 800787a:	2101      	movs	r1, #1
 800787c:	f7ff ff96 	bl	80077ac <ST7032i_command>
	delay_ms(200);  // this command takes a long time!
 8007880:	20c8      	movs	r0, #200	; 0xc8
}
 8007882:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* ------------------ */

void ST7032i_clear(ST7032i * lcd) {
	ST7032i_command(lcd, LCD_CLEARDISPLAY); // clear display, set cursor position to zero
	delay_ms(200);  // this command takes a long time!
 8007886:	f7f8 bcdf 	b.w	8000248 <delay_ms>
 800788a:	bf00      	nop

0800788c <ST7032i_home>:
}

void ST7032i_home(ST7032i * lcd) {
 800788c:	b508      	push	{r3, lr}
	ST7032i_command(lcd, LCD_RETURNHOME);  // set cursor position to zero
 800788e:	2102      	movs	r1, #2
 8007890:	f7ff ff8c 	bl	80077ac <ST7032i_command>
	delay_ms(200);  // this command takes a long time!
 8007894:	20c8      	movs	r0, #200	; 0xc8
}
 8007896:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	delay_ms(200);  // this command takes a long time!
}

void ST7032i_home(ST7032i * lcd) {
	ST7032i_command(lcd, LCD_RETURNHOME);  // set cursor position to zero
	delay_ms(200);  // this command takes a long time!
 800789a:	f7f8 bcd5 	b.w	8000248 <delay_ms>
 800789e:	bf00      	nop

080078a0 <ST7032i_setCursor>:
}

void ST7032i_setCursor(ST7032i * lcd, uint8_t c, uint8_t r) {
 80078a0:	b4f0      	push	{r4, r5, r6, r7}
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 80078a2:	4b10      	ldr	r3, [pc, #64]	; (80078e4 <ST7032i_setCursor+0x44>)
void ST7032i_home(ST7032i * lcd) {
	ST7032i_command(lcd, LCD_RETURNHOME);  // set cursor position to zero
	delay_ms(200);  // this command takes a long time!
}

void ST7032i_setCursor(ST7032i * lcd, uint8_t c, uint8_t r) {
 80078a4:	4614      	mov	r4, r2
 80078a6:	4605      	mov	r5, r0
 80078a8:	460f      	mov	r7, r1
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 80078aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
	if (r >= lcd->_numlines) {
 80078ac:	792e      	ldrb	r6, [r5, #4]
void ST7032i_home(ST7032i * lcd) {
	ST7032i_command(lcd, LCD_RETURNHOME);  // set cursor position to zero
	delay_ms(200);  // this command takes a long time!
}

void ST7032i_setCursor(ST7032i * lcd, uint8_t c, uint8_t r) {
 80078ae:	b084      	sub	sp, #16
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
	if (r >= lcd->_numlines) {
 80078b0:	42a6      	cmp	r6, r4
	ST7032i_command(lcd, LCD_RETURNHOME);  // set cursor position to zero
	delay_ms(200);  // this command takes a long time!
}

void ST7032i_setCursor(ST7032i * lcd, uint8_t c, uint8_t r) {
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 80078b2:	f10d 0c10 	add.w	ip, sp, #16
 80078b6:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
	if (r >= lcd->_numlines) {
		r %= lcd->_numlines;    // we count rows starting w/ 0
 80078ba:	bf9e      	ittt	ls
 80078bc:	fbb4 f3f6 	udivls	r3, r4, r6
 80078c0:	fb06 4413 	mlsls	r4, r6, r3, r4
 80078c4:	b2e4      	uxtbls	r4, r4
	}
	lcd->_position = c + row_offsets[r];
 80078c6:	ab04      	add	r3, sp, #16
 80078c8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
	ST7032i_command(lcd, LCD_SETDDRAMADDR | lcd->_position);
 80078cc:	4628      	mov	r0, r5
void ST7032i_setCursor(ST7032i * lcd, uint8_t c, uint8_t r) {
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
	if (r >= lcd->_numlines) {
		r %= lcd->_numlines;    // we count rows starting w/ 0
	}
	lcd->_position = c + row_offsets[r];
 80078ce:	f854 1c10 	ldr.w	r1, [r4, #-16]
 80078d2:	187f      	adds	r7, r7, r1
 80078d4:	b2f9      	uxtb	r1, r7
 80078d6:	71a9      	strb	r1, [r5, #6]
	ST7032i_command(lcd, LCD_SETDDRAMADDR | lcd->_position);
 80078d8:	f041 0180 	orr.w	r1, r1, #128	; 0x80
}
 80078dc:	b004      	add	sp, #16
 80078de:	bcf0      	pop	{r4, r5, r6, r7}
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
	if (r >= lcd->_numlines) {
		r %= lcd->_numlines;    // we count rows starting w/ 0
	}
	lcd->_position = c + row_offsets[r];
	ST7032i_command(lcd, LCD_SETDDRAMADDR | lcd->_position);
 80078e0:	e764      	b.n	80077ac <ST7032i_command>
 80078e2:	bf00      	nop
 80078e4:	0800d268 	.word	0x0800d268

080078e8 <ST7032i_noDisplay>:
}

// LCD_DISPLAYON, LCD_BLINKON, LCD_CURSORON
void ST7032i_noDisplay(ST7032i * this) {
	this->_displaycontrol &= ~LCD_DISPLAYON;
 80078e8:	7841      	ldrb	r1, [r0, #1]
 80078ea:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
 80078ee:	7041      	strb	r1, [r0, #1]
	ST7032i_command(this, LCD_DISPLAYCONTROL | this->_displaycontrol);
 80078f0:	f041 0108 	orr.w	r1, r1, #8
 80078f4:	e75a      	b.n	80077ac <ST7032i_command>
 80078f6:	bf00      	nop

080078f8 <ST7032i_display>:
}

void ST7032i_display(ST7032i * this) {
	this->_displaycontrol |= LCD_DISPLAYON;
 80078f8:	7841      	ldrb	r1, [r0, #1]
 80078fa:	f041 0104 	orr.w	r1, r1, #4
 80078fe:	7041      	strb	r1, [r0, #1]
	ST7032i_command(this, LCD_DISPLAYCONTROL | this->_displaycontrol);
 8007900:	f041 0108 	orr.w	r1, r1, #8
 8007904:	e752      	b.n	80077ac <ST7032i_command>
 8007906:	bf00      	nop

08007908 <ST7032i_begin>:
	i2c_transmit(lcd->wirex,lcd->i2c_address, buf, 2);
	delay_us(CMDDELAY);
	return 1; // assume success
}

void ST7032i_begin(ST7032i * lcd) {
 8007908:	b510      	push	{r4, lr}
//	delay(40);
	ST7032i_command(lcd, 0b00111000); //function set
 800790a:	2138      	movs	r1, #56	; 0x38
	i2c_transmit(lcd->wirex,lcd->i2c_address, buf, 2);
	delay_us(CMDDELAY);
	return 1; // assume success
}

void ST7032i_begin(ST7032i * lcd) {
 800790c:	4604      	mov	r4, r0
//	delay(40);
	ST7032i_command(lcd, 0b00111000); //function set
 800790e:	f7ff ff4d 	bl	80077ac <ST7032i_command>
	ST7032i_command(lcd, 0b00111001); // function set
 8007912:	2139      	movs	r1, #57	; 0x39
 8007914:	4620      	mov	r0, r4
 8007916:	f7ff ff49 	bl	80077ac <ST7032i_command>
	delay_ms(2);
 800791a:	2002      	movs	r0, #2
 800791c:	f7f8 fc94 	bl	8000248 <delay_ms>

	ST7032i_command(lcd, 0b00010100); // interval osc
 8007920:	4620      	mov	r0, r4
 8007922:	2114      	movs	r1, #20
 8007924:	f7ff ff42 	bl	80077ac <ST7032i_command>
	ST7032i_command(lcd, 0b01110000 | (lcd->contrast & 0xf)); // contrast Low 4 bits
 8007928:	7b21      	ldrb	r1, [r4, #12]
 800792a:	f001 010f 	and.w	r1, r1, #15
 800792e:	f041 0170 	orr.w	r1, r1, #112	; 0x70
 8007932:	4620      	mov	r0, r4
 8007934:	f7ff ff3a 	bl	80077ac <ST7032i_command>
	delay_ms(2);
 8007938:	2002      	movs	r0, #2
 800793a:	f7f8 fc85 	bl	8000248 <delay_ms>

	ST7032i_command(lcd, 0b01011100 | ((lcd->contrast >> 4) & 0x3)); // contast High/icon/power
 800793e:	7b21      	ldrb	r1, [r4, #12]
 8007940:	f3c1 1101 	ubfx	r1, r1, #4, #2
 8007944:	4620      	mov	r0, r4
 8007946:	f041 015c 	orr.w	r1, r1, #92	; 0x5c
 800794a:	f7ff ff2f 	bl	80077ac <ST7032i_command>
	ST7032i_command(lcd, 0b01101100); // follower control
 800794e:	216c      	movs	r1, #108	; 0x6c
 8007950:	4620      	mov	r0, r4
 8007952:	f7ff ff2b 	bl	80077ac <ST7032i_command>
	delay_ms(300);
 8007956:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800795a:	f7f8 fc75 	bl	8000248 <delay_ms>

	ST7032i_command(lcd, 0b00111000); // function set
 800795e:	4620      	mov	r0, r4
 8007960:	2138      	movs	r1, #56	; 0x38
 8007962:	f7ff ff23 	bl	80077ac <ST7032i_command>
	ST7032i_command(lcd, 0b00001100); // Display On
 8007966:	210c      	movs	r1, #12
 8007968:	4620      	mov	r0, r4
 800796a:	f7ff ff1f 	bl	80077ac <ST7032i_command>
	delay_ms(2);
 800796e:	2002      	movs	r0, #2
 8007970:	f7f8 fc6a 	bl	8000248 <delay_ms>

	ST7032i_command(lcd, 0b00000001); // Clear Display
 8007974:	2101      	movs	r1, #1
 8007976:	4620      	mov	r0, r4
 8007978:	f7ff ff18 	bl	80077ac <ST7032i_command>
	delay_ms(2); // Clear Display needs additional wait
 800797c:	2002      	movs	r0, #2
 800797e:	f7f8 fc63 	bl	8000248 <delay_ms>
	ST7032i_command(lcd, 0b00000010); // home, but does not work
 8007982:	2102      	movs	r1, #2
 8007984:	4620      	mov	r0, r4
 8007986:	f7ff ff11 	bl	80077ac <ST7032i_command>
	delay_ms(2);
 800798a:	2002      	movs	r0, #2
 800798c:	f7f8 fc5c 	bl	8000248 <delay_ms>

	// finally, set # lines, font size, etc.
	ST7032i_command(lcd, LCD_FUNCTIONSET | lcd->_displayfunction);
 8007990:	7821      	ldrb	r1, [r4, #0]
 8007992:	4620      	mov	r0, r4
 8007994:	f041 0120 	orr.w	r1, r1, #32
 8007998:	f7ff ff08 	bl	80077ac <ST7032i_command>

	// turn the display on with no cursor or blinking default
	lcd->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 800799c:	2304      	movs	r3, #4
 800799e:	7063      	strb	r3, [r4, #1]
	ST7032i_display(lcd);
 80079a0:	4620      	mov	r0, r4
 80079a2:	f7ff ffa9 	bl	80078f8 <ST7032i_display>

	// clear it off
	ST7032i_clear(lcd);
 80079a6:	4620      	mov	r0, r4
 80079a8:	f7ff ff66 	bl	8007878 <ST7032i_clear>
	ST7032i_home(lcd);
 80079ac:	4620      	mov	r0, r4
 80079ae:	f7ff ff6d 	bl	800788c <ST7032i_home>

	// Initialize to default text direction (for romance languages)
	lcd->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80079b2:	2302      	movs	r3, #2
	// set the entry mode
	ST7032i_command(lcd, LCD_ENTRYMODESET | lcd->_displaymode);
 80079b4:	4620      	mov	r0, r4
 80079b6:	2106      	movs	r1, #6
	// clear it off
	ST7032i_clear(lcd);
	ST7032i_home(lcd);

	// Initialize to default text direction (for romance languages)
	lcd->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80079b8:	70a3      	strb	r3, [r4, #2]
	// set the entry mode
	ST7032i_command(lcd, LCD_ENTRYMODESET | lcd->_displaymode);
}
 80079ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ST7032i_home(lcd);

	// Initialize to default text direction (for romance languages)
	lcd->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
	// set the entry mode
	ST7032i_command(lcd, LCD_ENTRYMODESET | lcd->_displaymode);
 80079be:	e6f5      	b.n	80077ac <ST7032i_command>

080079c0 <ST7032i_noBlink>:
	this->_displaycontrol |= LCD_DISPLAYON;
	ST7032i_command(this, LCD_DISPLAYCONTROL | this->_displaycontrol);
}

void ST7032i_noBlink(ST7032i * this) {
	this->_displaycontrol &= ~LCD_BLINKON;
 80079c0:	7841      	ldrb	r1, [r0, #1]
 80079c2:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 80079c6:	7041      	strb	r1, [r0, #1]
	ST7032i_command(this, LCD_DISPLAYCONTROL | this->_displaycontrol);
 80079c8:	f041 0108 	orr.w	r1, r1, #8
 80079cc:	e6ee      	b.n	80077ac <ST7032i_command>
 80079ce:	bf00      	nop

080079d0 <ST7032i_blink>:
}

void ST7032i_blink(ST7032i * this) {
	this->_displaycontrol |= LCD_BLINKON;
 80079d0:	7841      	ldrb	r1, [r0, #1]
 80079d2:	f041 0101 	orr.w	r1, r1, #1
 80079d6:	7041      	strb	r1, [r0, #1]
	ST7032i_command(this, LCD_DISPLAYCONTROL | this->_displaycontrol);
 80079d8:	f041 0108 	orr.w	r1, r1, #8
 80079dc:	e6e6      	b.n	80077ac <ST7032i_command>
 80079de:	bf00      	nop

080079e0 <ST7032i_noCursor>:
}

void ST7032i_noCursor(ST7032i * this) {
	this->_displaycontrol &= ~LCD_CURSORON;
 80079e0:	7841      	ldrb	r1, [r0, #1]
 80079e2:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
 80079e6:	7041      	strb	r1, [r0, #1]
	ST7032i_command(this, LCD_DISPLAYCONTROL | this->_displaycontrol);
 80079e8:	f041 0108 	orr.w	r1, r1, #8
 80079ec:	e6de      	b.n	80077ac <ST7032i_command>
 80079ee:	bf00      	nop

080079f0 <ST7032i_showCursor>:
}

void ST7032i_showCursor(ST7032i * this) {
	this->_displaycontrol |= LCD_CURSORON;
 80079f0:	7841      	ldrb	r1, [r0, #1]
 80079f2:	f041 0102 	orr.w	r1, r1, #2
 80079f6:	7041      	strb	r1, [r0, #1]
	ST7032i_command(this, LCD_DISPLAYCONTROL | this->_displaycontrol);
 80079f8:	f041 0108 	orr.w	r1, r1, #8
 80079fc:	e6d6      	b.n	80077ac <ST7032i_command>
 80079fe:	bf00      	nop

08007a00 <ST7032i_scrollDisplayLeft>:
}

void ST7032i_scrollDisplayLeft(ST7032i * this) {
	ST7032i_command(this, LCD_CURSORSHIFT | LCD_DISPLAYMOVE | LCD_MOVELEFT);
 8007a00:	2118      	movs	r1, #24
 8007a02:	e6d3      	b.n	80077ac <ST7032i_command>

08007a04 <ST7032i_scrollDisplayRight>:
}

void ST7032i_scrollDisplayRight(ST7032i * this) {
	ST7032i_command(this, LCD_CURSORSHIFT | LCD_DISPLAYMOVE | LCD_MOVERIGHT);
 8007a04:	211c      	movs	r1, #28
 8007a06:	e6d1      	b.n	80077ac <ST7032i_command>

08007a08 <ST7032i_leftToRight>:
}

void ST7032i_leftToRight(ST7032i * this) {
	this->_displaymode |= LCD_ENTRYLEFT;
 8007a08:	7881      	ldrb	r1, [r0, #2]
 8007a0a:	f041 0102 	orr.w	r1, r1, #2
 8007a0e:	7081      	strb	r1, [r0, #2]
	ST7032i_command(this, LCD_ENTRYMODESET | this->_displaymode);
 8007a10:	f041 0104 	orr.w	r1, r1, #4
 8007a14:	e6ca      	b.n	80077ac <ST7032i_command>
 8007a16:	bf00      	nop

08007a18 <ST7032i_rightToLeft>:
}

void ST7032i_rightToLeft(ST7032i * this) {
	this->_displaymode &= ~LCD_ENTRYLEFT;
 8007a18:	7881      	ldrb	r1, [r0, #2]
 8007a1a:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
 8007a1e:	7081      	strb	r1, [r0, #2]
	ST7032i_command(this, LCD_ENTRYMODESET | this->_displaymode);
 8007a20:	f041 0104 	orr.w	r1, r1, #4
 8007a24:	e6c2      	b.n	80077ac <ST7032i_command>
 8007a26:	bf00      	nop

08007a28 <ST7032i_autoscroll>:
}

void ST7032i_autoscroll(ST7032i * this) {
	this->_displaymode |= LCD_ENTRYSHIFTINCREMENT;
 8007a28:	7881      	ldrb	r1, [r0, #2]
 8007a2a:	f041 0101 	orr.w	r1, r1, #1
 8007a2e:	7081      	strb	r1, [r0, #2]
	ST7032i_command(this, LCD_ENTRYMODESET | this->_displaymode);
 8007a30:	f041 0104 	orr.w	r1, r1, #4
 8007a34:	e6ba      	b.n	80077ac <ST7032i_command>
 8007a36:	bf00      	nop

08007a38 <ST7032i_noAutoscroll>:
}

void ST7032i_noAutoscroll(ST7032i * this) {
	this->_displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
 8007a38:	7881      	ldrb	r1, [r0, #2]
 8007a3a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 8007a3e:	7081      	strb	r1, [r0, #2]
	ST7032i_command(this, LCD_ENTRYMODESET | this->_displaymode);
 8007a40:	f041 0104 	orr.w	r1, r1, #4
 8007a44:	e6b2      	b.n	80077ac <ST7032i_command>
 8007a46:	bf00      	nop

08007a48 <ST7032i_createChar>:
}

void ST7032i_createChar(ST7032i * this, uint8_t location, uint8_t charmap[]) {
	int i;
	location &= 0x7; // we only have 8 locations 0-7
	ST7032i_command(this, LCD_SETCGRAMADDR | (location << 3));
 8007a48:	f001 0107 	and.w	r1, r1, #7
 8007a4c:	00c9      	lsls	r1, r1, #3
void ST7032i_noAutoscroll(ST7032i * this) {
	this->_displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
	ST7032i_command(this, LCD_ENTRYMODESET | this->_displaymode);
}

void ST7032i_createChar(ST7032i * this, uint8_t location, uint8_t charmap[]) {
 8007a4e:	b570      	push	{r4, r5, r6, lr}
	int i;
	location &= 0x7; // we only have 8 locations 0-7
	ST7032i_command(this, LCD_SETCGRAMADDR | (location << 3));
 8007a50:	f041 0140 	orr.w	r1, r1, #64	; 0x40
void ST7032i_noAutoscroll(ST7032i * this) {
	this->_displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
	ST7032i_command(this, LCD_ENTRYMODESET | this->_displaymode);
}

void ST7032i_createChar(ST7032i * this, uint8_t location, uint8_t charmap[]) {
 8007a54:	4604      	mov	r4, r0
 8007a56:	4616      	mov	r6, r2
	int i;
	location &= 0x7; // we only have 8 locations 0-7
	ST7032i_command(this, LCD_SETCGRAMADDR | (location << 3));
 8007a58:	f7ff fea8 	bl	80077ac <ST7032i_command>
	for (i = 0; i < 8; i++) {
 8007a5c:	2500      	movs	r5, #0
		ST7032i_write(this, charmap[i]);
 8007a5e:	5d71      	ldrb	r1, [r6, r5]
 8007a60:	4620      	mov	r0, r4

void ST7032i_createChar(ST7032i * this, uint8_t location, uint8_t charmap[]) {
	int i;
	location &= 0x7; // we only have 8 locations 0-7
	ST7032i_command(this, LCD_SETCGRAMADDR | (location << 3));
	for (i = 0; i < 8; i++) {
 8007a62:	3501      	adds	r5, #1
		ST7032i_write(this, charmap[i]);
 8007a64:	f7ff feb6 	bl	80077d4 <ST7032i_write>

void ST7032i_createChar(ST7032i * this, uint8_t location, uint8_t charmap[]) {
	int i;
	location &= 0x7; // we only have 8 locations 0-7
	ST7032i_command(this, LCD_SETCGRAMADDR | (location << 3));
	for (i = 0; i < 8; i++) {
 8007a68:	2d08      	cmp	r5, #8
 8007a6a:	d1f8      	bne.n	8007a5e <ST7032i_createChar+0x16>
		ST7032i_write(this, charmap[i]);
	}
}
 8007a6c:	bd70      	pop	{r4, r5, r6, pc}
 8007a6e:	bf00      	nop

08007a70 <_close>:
	}
}

int _close(int file) {
	return -1;
}
 8007a70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a74:	4770      	bx	lr
 8007a76:	bf00      	nop

08007a78 <_execve>:
/*
 execve
 Transfer control to a new process. Minimal implementation (for a system without processes):
 */
int _execve(char *name, char **argv, char **env) {
	errno = ENOMEM;
 8007a78:	f241 638c 	movw	r3, #5772	; 0x168c
 8007a7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007a80:	220c      	movs	r2, #12
 8007a82:	601a      	str	r2, [r3, #0]
	return -1;
}
 8007a84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a88:	4770      	bx	lr
 8007a8a:	bf00      	nop

08007a8c <_fork>:
 fork
 Create a new process. Minimal implementation (for a system without processes):
 */

int _fork() {
	errno = EAGAIN;
 8007a8c:	f241 638c 	movw	r3, #5772	; 0x168c
 8007a90:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007a94:	220b      	movs	r2, #11
 8007a96:	601a      	str	r2, [r3, #0]
	return -1;
}
 8007a98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a9c:	4770      	bx	lr
 8007a9e:	bf00      	nop

08007aa0 <_fstat>:
 Status of an open file. For consistency with other minimal implementations in these examples,
 all files are regarded as character special devices.
 The `sys/stat.h' header file required is distributed in the `include' subdirectory for this C library.
 */
int _fstat(int file, struct stat *st) {
	st->st_mode = S_IFCHR;
 8007aa0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007aa4:	604b      	str	r3, [r1, #4]
	return 0;
}
 8007aa6:	2000      	movs	r0, #0
 8007aa8:	4770      	bx	lr
 8007aaa:	bf00      	nop

08007aac <_getpid>:
 Process-ID; this is sometimes used to generate strings unlikely to conflict with other processes. Minimal implementation, for a system without processes:
 */

int _getpid() {
	return 1;
}
 8007aac:	2001      	movs	r0, #1
 8007aae:	4770      	bx	lr

08007ab0 <_isatty>:
/*
 isatty
 Query whether output stream is a terminal. For consistency with the other minimal implementations,
 */
int _isatty(int file) {
	switch (file) {
 8007ab0:	2802      	cmp	r0, #2
 8007ab2:	d801      	bhi.n	8007ab8 <_isatty+0x8>
	case STDOUT_FILENO:
	case STDERR_FILENO:
	case STDIN_FILENO:
		return 1;
 8007ab4:	2001      	movs	r0, #1
	default:
		//errno = ENOTTY;
		errno = EBADF;
		return 0;
	}
}
 8007ab6:	4770      	bx	lr
	case STDERR_FILENO:
	case STDIN_FILENO:
		return 1;
	default:
		//errno = ENOTTY;
		errno = EBADF;
 8007ab8:	4b02      	ldr	r3, [pc, #8]	; (8007ac4 <_isatty+0x14>)
 8007aba:	2209      	movs	r2, #9
 8007abc:	601a      	str	r2, [r3, #0]
		return 0;
 8007abe:	2000      	movs	r0, #0
 8007ac0:	4770      	bx	lr
 8007ac2:	bf00      	nop
 8007ac4:	2000168c 	.word	0x2000168c

08007ac8 <_kill>:
/*
 kill
 Send a signal. Minimal implementation:
 */
int _kill(int pid, int sig) {
	errno = EINVAL;
 8007ac8:	f241 638c 	movw	r3, #5772	; 0x168c
 8007acc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007ad0:	2216      	movs	r2, #22
 8007ad2:	601a      	str	r2, [r3, #0]
	return (-1);
}
 8007ad4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ad8:	4770      	bx	lr
 8007ada:	bf00      	nop

08007adc <_link>:
 link
 Establish a new name for an existing file. Minimal implementation:
 */

int _link(char *old, char *new) {
	errno = EMLINK;
 8007adc:	f241 638c 	movw	r3, #5772	; 0x168c
 8007ae0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007ae4:	221f      	movs	r2, #31
 8007ae6:	601a      	str	r2, [r3, #0]
	return -1;
}
 8007ae8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007aec:	4770      	bx	lr
 8007aee:	bf00      	nop

08007af0 <_lseek>:
 lseek
 Set position in a file. Minimal implementation:
 */
int _lseek(int file, int ptr, int dir) {
	return 0;
}
 8007af0:	2000      	movs	r0, #0
 8007af2:	4770      	bx	lr

08007af4 <_read>:
 read
 Read a character to a file. `libc' subroutines will use this system routine for input from all files, including stdin
 Returns -1 on error or blocks until the number of characters have been read.
 */

int _read(int file, char *ptr, int len) {
 8007af4:	b430      	push	{r4, r5}
	int n;
	int num = 0;
	switch (file) {
 8007af6:	b130      	cbz	r0, 8007b06 <_read+0x12>
					*ptr++ = c;
					num++;
				}
				break;
				default:
				errno = EBADF;
 8007af8:	4b0b      	ldr	r3, [pc, #44]	; (8007b28 <_read+0x34>)
 8007afa:	2209      	movs	r2, #9
 8007afc:	601a      	str	r2, [r3, #0]
				return -1;
 8007afe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			}
	return num;
}
 8007b02:	bc30      	pop	{r4, r5}
 8007b04:	4770      	bx	lr
int _read(int file, char *ptr, int len) {
	int n;
	int num = 0;
	switch (file) {
	case STDIN_FILENO:
		for (n = 0; n < len; n++) {
 8007b06:	2a00      	cmp	r2, #0
 8007b08:	ddfb      	ble.n	8007b02 <_read+0xe>
#if   STDIN_USART == 1
			while ((USART1->SR & USART_FLAG_RXNE) == (uint16_t)RESET) {}
 8007b0a:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 read
 Read a character to a file. `libc' subroutines will use this system routine for input from all files, including stdin
 Returns -1 on error or blocks until the number of characters have been read.
 */

int _read(int file, char *ptr, int len) {
 8007b0e:	188d      	adds	r5, r1, r2
	int num = 0;
	switch (file) {
	case STDIN_FILENO:
		for (n = 0; n < len; n++) {
#if   STDIN_USART == 1
			while ((USART1->SR & USART_FLAG_RXNE) == (uint16_t)RESET) {}
 8007b10:	f2c4 0401 	movt	r4, #16385	; 0x4001
 8007b14:	8823      	ldrh	r3, [r4, #0]
 8007b16:	069b      	lsls	r3, r3, #26
 8007b18:	d5fc      	bpl.n	8007b14 <_read+0x20>
			char c = (char)(USART1->DR & (uint16_t)0x01FF);
 8007b1a:	88a3      	ldrh	r3, [r4, #4]
 8007b1c:	f801 3b01 	strb.w	r3, [r1], #1
int _read(int file, char *ptr, int len) {
	int n;
	int num = 0;
	switch (file) {
	case STDIN_FILENO:
		for (n = 0; n < len; n++) {
 8007b20:	42a9      	cmp	r1, r5
 8007b22:	d1f7      	bne.n	8007b14 <_read+0x20>
 8007b24:	4610      	mov	r0, r2
 8007b26:	e7ec      	b.n	8007b02 <_read+0xe>
 8007b28:	2000168c 	.word	0x2000168c

08007b2c <_stat>:
 Status of a file (by name). Minimal implementation:
 int    _EXFUN(stat,( const char *__path, struct stat *__sbuf ));
 */

int _stat(const char *filepath, struct stat *st) {
	st->st_mode = S_IFCHR;
 8007b2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007b30:	604b      	str	r3, [r1, #4]
	return 0;
}
 8007b32:	2000      	movs	r0, #0
 8007b34:	4770      	bx	lr
 8007b36:	bf00      	nop

08007b38 <_times>:
 Timing information for current process. Minimal implementation:
 */

clock_t _times(struct tms *buf) {
	return -1;
}
 8007b38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b3c:	4770      	bx	lr
 8007b3e:	bf00      	nop

08007b40 <_unlink>:
/*
 unlink
 Remove a file's directory entry. Minimal implementation:
 */
int _unlink(char *name) {
	errno = ENOENT;
 8007b40:	f241 638c 	movw	r3, #5772	; 0x168c
 8007b44:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007b48:	2202      	movs	r2, #2
 8007b4a:	601a      	str	r2, [r3, #0]
	return -1;
}
 8007b4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b50:	4770      	bx	lr
 8007b52:	bf00      	nop

08007b54 <_wait>:
/*
 wait
 Wait for a child process. Minimal implementation:
 */
int _wait(int *status) {
	errno = ECHILD;
 8007b54:	f241 638c 	movw	r3, #5772	; 0x168c
 8007b58:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007b5c:	220a      	movs	r2, #10
 8007b5e:	601a      	str	r2, [r3, #0]
	return -1;
}
 8007b60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b64:	4770      	bx	lr
 8007b66:	bf00      	nop

08007b68 <_write>:
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
 8007b68:	2801      	cmp	r0, #1
/*
 write
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
 8007b6a:	b430      	push	{r4, r5}
	int n;
	switch (file) {
 8007b6c:	d009      	beq.n	8007b82 <_write+0x1a>
 8007b6e:	2802      	cmp	r0, #2
 8007b70:	d017      	beq.n	8007ba2 <_write+0x3a>
					USART3->DR = (*ptr++ & (uint16_t)0x01FF);
#endif
				}
				break;
				default:
				errno = EBADF;
 8007b72:	4b14      	ldr	r3, [pc, #80]	; (8007bc4 <_write+0x5c>)
 8007b74:	2209      	movs	r2, #9
 8007b76:	601a      	str	r2, [r3, #0]
				return -1;
 8007b78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
			}
	return len;
}
 8007b7c:	4610      	mov	r0, r2
 8007b7e:	bc30      	pop	{r4, r5}
 8007b80:	4770      	bx	lr
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
 8007b82:	2a00      	cmp	r2, #0
 8007b84:	ddfa      	ble.n	8007b7c <_write+0x14>
#if STDOUT_USART == 1
			while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 8007b86:	f44f 5480 	mov.w	r4, #4096	; 0x1000
/*
 write
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
 8007b8a:	188d      	adds	r5, r1, r2
	int n;
	switch (file) {
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
#if STDOUT_USART == 1
			while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 8007b8c:	f2c4 0401 	movt	r4, #16385	; 0x4001
 8007b90:	8823      	ldrh	r3, [r4, #0]
 8007b92:	065b      	lsls	r3, r3, #25
 8007b94:	d5fc      	bpl.n	8007b90 <_write+0x28>
			USART1->DR = (*ptr++ & (uint16_t)0x01FF);
 8007b96:	f811 3b01 	ldrb.w	r3, [r1], #1
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
 8007b9a:	42a9      	cmp	r1, r5
#if STDOUT_USART == 1
			while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
			USART1->DR = (*ptr++ & (uint16_t)0x01FF);
 8007b9c:	80a3      	strh	r3, [r4, #4]
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
 8007b9e:	d1f7      	bne.n	8007b90 <_write+0x28>
 8007ba0:	e7ec      	b.n	8007b7c <_write+0x14>
					USART3->DR = (*ptr++ & (uint16_t)0x01FF);
#endif
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
 8007ba2:	2a00      	cmp	r2, #0
#if STDERR_USART == 1
					while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 8007ba4:	bfc2      	ittt	gt
 8007ba6:	f44f 5480 	movgt.w	r4, #4096	; 0x1000
/*
 write
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
 8007baa:	188d      	addgt	r5, r1, r2
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
#if STDERR_USART == 1
					while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 8007bac:	f2c4 0401 	movtgt	r4, #16385	; 0x4001
					USART3->DR = (*ptr++ & (uint16_t)0x01FF);
#endif
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
 8007bb0:	dde4      	ble.n	8007b7c <_write+0x14>
#if STDERR_USART == 1
					while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 8007bb2:	8823      	ldrh	r3, [r4, #0]
 8007bb4:	0658      	lsls	r0, r3, #25
 8007bb6:	d5fc      	bpl.n	8007bb2 <_write+0x4a>
					USART1->DR = (*ptr++ & (uint16_t)0x01FF);
 8007bb8:	f811 3b01 	ldrb.w	r3, [r1], #1
					USART3->DR = (*ptr++ & (uint16_t)0x01FF);
#endif
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
 8007bbc:	42a9      	cmp	r1, r5
#if STDERR_USART == 1
					while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
					USART1->DR = (*ptr++ & (uint16_t)0x01FF);
 8007bbe:	80a3      	strh	r3, [r4, #4]
					USART3->DR = (*ptr++ & (uint16_t)0x01FF);
#endif
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
 8007bc0:	d1f7      	bne.n	8007bb2 <_write+0x4a>
 8007bc2:	e7db      	b.n	8007b7c <_write+0x14>
 8007bc4:	2000168c 	.word	0x2000168c

08007bc8 <_sbrk>:

	extern char _ebss; // Defined by the linker
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0) {
 8007bc8:	4a0d      	ldr	r2, [pc, #52]	; (8007c00 <_sbrk+0x38>)
/*
 sbrk
 Increase program data space.
 Malloc and related functions depend on this
 */
caddr_t _sbrk(int incr) {
 8007bca:	b508      	push	{r3, lr}

	extern char _ebss; // Defined by the linker
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0) {
 8007bcc:	6813      	ldr	r3, [r2, #0]
 8007bce:	b1a3      	cbz	r3, 8007bfa <_sbrk+0x32>
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __get_MSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 8007bd0:	f3ef 8108 	mrs	r1, MSP
		heap_end = &_ebss;
	}
	prev_heap_end = heap_end;

	char * stack = (char*) __get_MSP();
	if (heap_end + incr > stack) {
 8007bd4:	1818      	adds	r0, r3, r0
 8007bd6:	4288      	cmp	r0, r1
		errno = ENOMEM;
		return (caddr_t) -1;
		//abort ();
	}

	heap_end += incr;
 8007bd8:	bf98      	it	ls
 8007bda:	6010      	strls	r0, [r2, #0]
		heap_end = &_ebss;
	}
	prev_heap_end = heap_end;

	char * stack = (char*) __get_MSP();
	if (heap_end + incr > stack) {
 8007bdc:	d801      	bhi.n	8007be2 <_sbrk+0x1a>
	}

	heap_end += incr;
	return (caddr_t) prev_heap_end;

}
 8007bde:	4618      	mov	r0, r3
 8007be0:	bd08      	pop	{r3, pc}
	}
	prev_heap_end = heap_end;

	char * stack = (char*) __get_MSP();
	if (heap_end + incr > stack) {
		_write(STDERR_FILENO, "Heap and stack collision\n", 25);
 8007be2:	2219      	movs	r2, #25
 8007be4:	2002      	movs	r0, #2
 8007be6:	4907      	ldr	r1, [pc, #28]	; (8007c04 <_sbrk+0x3c>)
 8007be8:	f7ff ffbe 	bl	8007b68 <_write>
		errno = ENOMEM;
 8007bec:	4b06      	ldr	r3, [pc, #24]	; (8007c08 <_sbrk+0x40>)
 8007bee:	220c      	movs	r2, #12
 8007bf0:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8007bf2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}

	heap_end += incr;
	return (caddr_t) prev_heap_end;

}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	bd08      	pop	{r3, pc}
	extern char _ebss; // Defined by the linker
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0) {
		heap_end = &_ebss;
 8007bfa:	4b04      	ldr	r3, [pc, #16]	; (8007c0c <_sbrk+0x44>)
 8007bfc:	6013      	str	r3, [r2, #0]
 8007bfe:	e7e7      	b.n	8007bd0 <_sbrk+0x8>
 8007c00:	2000095c 	.word	0x2000095c
 8007c04:	0800d4f8 	.word	0x0800d4f8
 8007c08:	2000168c 	.word	0x2000168c
 8007c0c:	20001690 	.word	0x20001690

08007c10 <_exit>:
char *__env[1] = { 0 };
char **environ = __env;

int _write(int file, char *ptr, int len);

void _exit(int status) {
 8007c10:	b508      	push	{r3, lr}
	_write(1, "exit", 4);
 8007c12:	2001      	movs	r0, #1
 8007c14:	4902      	ldr	r1, [pc, #8]	; (8007c20 <_exit+0x10>)
 8007c16:	2204      	movs	r2, #4
 8007c18:	f7ff ffa6 	bl	8007b68 <_write>
 8007c1c:	e7fe      	b.n	8007c1c <_exit+0xc>
 8007c1e:	bf00      	nop
 8007c20:	0800d514 	.word	0x0800d514
 8007c24:	0800d580 	.word	0x0800d580
 8007c28:	20000000 	.word	0x20000000
 8007c2c:	2000095c 	.word	0x2000095c
 8007c30:	2000095c 	.word	0x2000095c
 8007c34:	20001690 	.word	0x20001690

08007c38 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8007c38:	4770      	bx	lr
 8007c3a:	bf00      	nop

08007c3c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8007c3c:	e7fe      	b.n	8007c3c <HardFault_Handler>
 8007c3e:	bf00      	nop

08007c40 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8007c40:	e7fe      	b.n	8007c40 <MemManage_Handler>
 8007c42:	bf00      	nop

08007c44 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8007c44:	e7fe      	b.n	8007c44 <BusFault_Handler>
 8007c46:	bf00      	nop

08007c48 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8007c48:	e7fe      	b.n	8007c48 <UsageFault_Handler>
 8007c4a:	bf00      	nop

08007c4c <SVC_Handler>:
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
}
 8007c4c:	4770      	bx	lr
 8007c4e:	bf00      	nop

08007c50 <DebugMon_Handler>:
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
}
 8007c50:	4770      	bx	lr
 8007c52:	bf00      	nop

08007c54 <PendSV_Handler>:
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
}
 8007c54:	4770      	bx	lr
 8007c56:	bf00      	nop

08007c58 <SystemInit>:
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8007c58:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8007c5c:	f2c4 0302 	movt	r3, #16386	; 0x4002

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8007c60:	2200      	movs	r2, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8007c62:	6819      	ldr	r1, [r3, #0]
 8007c64:	f041 0101 	orr.w	r1, r1, #1
 8007c68:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8007c6a:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8007c6c:	6818      	ldr	r0, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8007c6e:	f243 0110 	movw	r1, #12304	; 0x3010

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8007c72:	f020 7084 	bic.w	r0, r0, #17301504	; 0x1080000

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8007c76:	f2c2 4100 	movt	r1, #9216	; 0x2400

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8007c7a:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8007c7e:	6018      	str	r0, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8007c80:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8007c82:	6819      	ldr	r1, [r3, #0]
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007c84:	b082      	sub	sp, #8

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8007c86:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8007c8a:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8007c8c:	60da      	str	r2, [r3, #12]
static void SetSysClock(void)
{
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8007c8e:	9200      	str	r2, [sp, #0]
 8007c90:	9201      	str	r2, [sp, #4]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8007c92:	681a      	ldr	r2, [r3, #0]
 8007c94:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007c98:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8007c9a:	461a      	mov	r2, r3
 8007c9c:	e003      	b.n	8007ca6 <SystemInit+0x4e>
    StartUpCounter++;
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8007c9e:	9b00      	ldr	r3, [sp, #0]
 8007ca0:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8007ca4:	d009      	beq.n	8007cba <SystemInit+0x62>
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8007ca6:	6813      	ldr	r3, [r2, #0]
 8007ca8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cac:	9301      	str	r3, [sp, #4]
    StartUpCounter++;
 8007cae:	9b00      	ldr	r3, [sp, #0]
 8007cb0:	3301      	adds	r3, #1
 8007cb2:	9300      	str	r3, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8007cb4:	9b01      	ldr	r3, [sp, #4]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d0f1      	beq.n	8007c9e <SystemInit+0x46>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8007cba:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8007cbe:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8007cc8:	bf08      	it	eq
 8007cca:	9301      	streq	r3, [sp, #4]
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
    StartUpCounter++;
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8007ccc:	d001      	beq.n	8007cd2 <SystemInit+0x7a>
  {
    HSEStatus = (uint32_t)0x01;
 8007cce:	2301      	movs	r3, #1
 8007cd0:	9301      	str	r3, [sp, #4]
  else
  {
    HSEStatus = (uint32_t)0x00;
  }

  if (HSEStatus == (uint32_t)0x01)
 8007cd2:	9b01      	ldr	r3, [sp, #4]
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	d008      	beq.n	8007cea <SystemInit+0x92>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007cd8:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8007cdc:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8007ce0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007ce4:	609a      	str	r2, [r3, #8]
#endif
}
 8007ce6:	b002      	add	sp, #8
 8007ce8:	4770      	bx	lr
  }

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8007cea:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8007cee:	f2c4 0302 	movt	r3, #16386	; 0x4002
    PWR->CR |= PWR_CR_VOS;
 8007cf2:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
  }

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8007cf6:	6c19      	ldr	r1, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8007cf8:	f2c4 0200 	movt	r2, #16384	; 0x4000
  }

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8007cfc:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8007d00:	6419      	str	r1, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8007d02:	6811      	ldr	r1, [r2, #0]
 8007d04:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8007d08:	6011      	str	r1, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8007d0a:	689a      	ldr	r2, [r3, #8]
 8007d0c:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8007d0e:	689a      	ldr	r2, [r3, #8]
 8007d10:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007d14:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8007d16:	6899      	ldr	r1, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8007d18:	f245 4208 	movw	r2, #21512	; 0x5408
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8007d1c:	f441 51a0 	orr.w	r1, r1, #5120	; 0x1400

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8007d20:	f2c0 7240 	movt	r2, #1856	; 0x740
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8007d24:	6099      	str	r1, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8007d26:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8007d28:	681a      	ldr	r2, [r3, #0]
 8007d2a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8007d2e:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8007d30:	4619      	mov	r1, r3
 8007d32:	680a      	ldr	r2, [r1, #0]
 8007d34:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8007d38:	0192      	lsls	r2, r2, #6
 8007d3a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007d3e:	d5f8      	bpl.n	8007d32 <SystemInit+0xda>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8007d40:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8007d44:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8007d48:	f240 6105 	movw	r1, #1541	; 0x605
 8007d4c:	6011      	str	r1, [r2, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8007d4e:	689a      	ldr	r2, [r3, #8]
 8007d50:	f022 0203 	bic.w	r2, r2, #3
 8007d54:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8007d56:	689a      	ldr	r2, [r3, #8]
 8007d58:	f042 0202 	orr.w	r2, r2, #2
 8007d5c:	609a      	str	r2, [r3, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8007d5e:	689a      	ldr	r2, [r3, #8]
 8007d60:	f002 020c 	and.w	r2, r2, #12
 8007d64:	2a08      	cmp	r2, #8
 8007d66:	d1fa      	bne.n	8007d5e <SystemInit+0x106>
 8007d68:	e7b6      	b.n	8007cd8 <SystemInit+0x80>
 8007d6a:	bf00      	nop

08007d6c <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8007d6c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8007d70:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007d74:	689a      	ldr	r2, [r3, #8]
 8007d76:	f002 020c 	and.w	r2, r2, #12

  switch (tmp)
 8007d7a:	2a04      	cmp	r2, #4
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
      break;
 8007d7c:	bf04      	itt	eq
 8007d7e:	f44f 5190 	moveq.w	r1, #4608	; 0x1200
 8007d82:	f2c0 017a 	movteq	r1, #122	; 0x7a
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;

  switch (tmp)
 8007d86:	d006      	beq.n	8007d96 <SystemCoreClockUpdate+0x2a>
 8007d88:	2a08      	cmp	r2, #8
 8007d8a:	bf1c      	itt	ne
 8007d8c:	f44f 5110 	movne.w	r1, #9216	; 0x2400
 8007d90:	f2c0 01f4 	movtne	r1, #244	; 0xf4
 8007d94:	d00b      	beq.n	8007dae <SystemCoreClockUpdate+0x42>
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8007d96:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8007d9a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8007d9e:	4b15      	ldr	r3, [pc, #84]	; (8007df4 <SystemCoreClockUpdate+0x88>)
 8007da0:	6892      	ldr	r2, [r2, #8]
 8007da2:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8007da6:	5c9a      	ldrb	r2, [r3, r2]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8007da8:	40d1      	lsrs	r1, r2
 8007daa:	6119      	str	r1, [r3, #16]
}
 8007dac:	4770      	bx	lr
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8007dae:	6858      	ldr	r0, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007db0:	685a      	ldr	r2, [r3, #4]
      
      if (pllsource != 0)
 8007db2:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8007db6:	6858      	ldr	r0, [r3, #4]
 8007db8:	bf15      	itete	ne
 8007dba:	f44f 5390 	movne.w	r3, #4608	; 0x1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8007dbe:	f44f 5310 	moveq.w	r3, #9216	; 0x2400
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8007dc2:	f2c0 037a 	movtne	r3, #122	; 0x7a
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8007dc6:	f2c0 03f4 	movteq	r3, #244	; 0xf4

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007dca:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8007dce:	fbb3 f1f2 	udiv	r1, r3, r2
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8007dd2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8007dd6:	f2c4 0302 	movt	r3, #16386	; 0x4002
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8007dda:	f3c0 1088 	ubfx	r0, r0, #6, #9
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8007dde:	685b      	ldr	r3, [r3, #4]
 8007de0:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8007de4:	3301      	adds	r3, #1
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8007de6:	fb01 f100 	mul.w	r1, r1, r0
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8007dea:	005b      	lsls	r3, r3, #1
      SystemCoreClock = pllvco/pllp;
 8007dec:	fbb1 f1f3 	udiv	r1, r1, r3
      break;
 8007df0:	e7d1      	b.n	8007d96 <SystemCoreClockUpdate+0x2a>
 8007df2:	bf00      	nop
 8007df4:	20000088 	.word	0x20000088

08007df8 <cleanup_glue>:
 8007df8:	b538      	push	{r3, r4, r5, lr}
 8007dfa:	460c      	mov	r4, r1
 8007dfc:	6809      	ldr	r1, [r1, #0]
 8007dfe:	4605      	mov	r5, r0
 8007e00:	b109      	cbz	r1, 8007e06 <cleanup_glue+0xe>
 8007e02:	f7ff fff9 	bl	8007df8 <cleanup_glue>
 8007e06:	4628      	mov	r0, r5
 8007e08:	4621      	mov	r1, r4
 8007e0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e0e:	f002 ba23 	b.w	800a258 <_free_r>
 8007e12:	bf00      	nop

08007e14 <_reclaim_reent>:
 8007e14:	4b22      	ldr	r3, [pc, #136]	; (8007ea0 <_reclaim_reent+0x8c>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4298      	cmp	r0, r3
 8007e1a:	b570      	push	{r4, r5, r6, lr}
 8007e1c:	4605      	mov	r5, r0
 8007e1e:	d032      	beq.n	8007e86 <_reclaim_reent+0x72>
 8007e20:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8007e22:	b1ab      	cbz	r3, 8007e50 <_reclaim_reent+0x3c>
 8007e24:	2200      	movs	r2, #0
 8007e26:	4616      	mov	r6, r2
 8007e28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007e2c:	b909      	cbnz	r1, 8007e32 <_reclaim_reent+0x1e>
 8007e2e:	e007      	b.n	8007e40 <_reclaim_reent+0x2c>
 8007e30:	4621      	mov	r1, r4
 8007e32:	680c      	ldr	r4, [r1, #0]
 8007e34:	4628      	mov	r0, r5
 8007e36:	f002 fa0f 	bl	800a258 <_free_r>
 8007e3a:	2c00      	cmp	r4, #0
 8007e3c:	d1f8      	bne.n	8007e30 <_reclaim_reent+0x1c>
 8007e3e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8007e40:	3601      	adds	r6, #1
 8007e42:	2e20      	cmp	r6, #32
 8007e44:	4632      	mov	r2, r6
 8007e46:	d1ef      	bne.n	8007e28 <_reclaim_reent+0x14>
 8007e48:	4628      	mov	r0, r5
 8007e4a:	4619      	mov	r1, r3
 8007e4c:	f002 fa04 	bl	800a258 <_free_r>
 8007e50:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8007e52:	b111      	cbz	r1, 8007e5a <_reclaim_reent+0x46>
 8007e54:	4628      	mov	r0, r5
 8007e56:	f002 f9ff 	bl	800a258 <_free_r>
 8007e5a:	f8d5 1148 	ldr.w	r1, [r5, #328]	; 0x148
 8007e5e:	b159      	cbz	r1, 8007e78 <_reclaim_reent+0x64>
 8007e60:	f505 76a6 	add.w	r6, r5, #332	; 0x14c
 8007e64:	42b1      	cmp	r1, r6
 8007e66:	d101      	bne.n	8007e6c <_reclaim_reent+0x58>
 8007e68:	e006      	b.n	8007e78 <_reclaim_reent+0x64>
 8007e6a:	4621      	mov	r1, r4
 8007e6c:	680c      	ldr	r4, [r1, #0]
 8007e6e:	4628      	mov	r0, r5
 8007e70:	f002 f9f2 	bl	800a258 <_free_r>
 8007e74:	42a6      	cmp	r6, r4
 8007e76:	d1f8      	bne.n	8007e6a <_reclaim_reent+0x56>
 8007e78:	6d69      	ldr	r1, [r5, #84]	; 0x54
 8007e7a:	b111      	cbz	r1, 8007e82 <_reclaim_reent+0x6e>
 8007e7c:	4628      	mov	r0, r5
 8007e7e:	f002 f9eb 	bl	800a258 <_free_r>
 8007e82:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8007e84:	b903      	cbnz	r3, 8007e88 <_reclaim_reent+0x74>
 8007e86:	bd70      	pop	{r4, r5, r6, pc}
 8007e88:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8007e8a:	4628      	mov	r0, r5
 8007e8c:	4798      	blx	r3
 8007e8e:	f8d5 12e0 	ldr.w	r1, [r5, #736]	; 0x2e0
 8007e92:	2900      	cmp	r1, #0
 8007e94:	d0f7      	beq.n	8007e86 <_reclaim_reent+0x72>
 8007e96:	4628      	mov	r0, r5
 8007e98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007e9c:	e7ac      	b.n	8007df8 <cleanup_glue>
 8007e9e:	bf00      	nop
 8007ea0:	200000a0 	.word	0x200000a0

08007ea4 <_wrapup_reent>:
 8007ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ea6:	4607      	mov	r7, r0
 8007ea8:	b1b0      	cbz	r0, 8007ed8 <_wrapup_reent+0x34>
 8007eaa:	f8d7 6148 	ldr.w	r6, [r7, #328]	; 0x148
 8007eae:	b176      	cbz	r6, 8007ece <_wrapup_reent+0x2a>
 8007eb0:	6875      	ldr	r5, [r6, #4]
 8007eb2:	1e6c      	subs	r4, r5, #1
 8007eb4:	d408      	bmi.n	8007ec8 <_wrapup_reent+0x24>
 8007eb6:	3502      	adds	r5, #2
 8007eb8:	eb06 0585 	add.w	r5, r6, r5, lsl #2
 8007ebc:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8007ec0:	3c01      	subs	r4, #1
 8007ec2:	4798      	blx	r3
 8007ec4:	1c63      	adds	r3, r4, #1
 8007ec6:	d1f9      	bne.n	8007ebc <_wrapup_reent+0x18>
 8007ec8:	6836      	ldr	r6, [r6, #0]
 8007eca:	2e00      	cmp	r6, #0
 8007ecc:	d1f0      	bne.n	8007eb0 <_wrapup_reent+0xc>
 8007ece:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ed0:	b10b      	cbz	r3, 8007ed6 <_wrapup_reent+0x32>
 8007ed2:	4638      	mov	r0, r7
 8007ed4:	4798      	blx	r3
 8007ed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ed8:	4b01      	ldr	r3, [pc, #4]	; (8007ee0 <_wrapup_reent+0x3c>)
 8007eda:	681f      	ldr	r7, [r3, #0]
 8007edc:	e7e5      	b.n	8007eaa <_wrapup_reent+0x6>
 8007ede:	bf00      	nop
 8007ee0:	200000a0 	.word	0x200000a0

08007ee4 <_sprintf_r>:
 8007ee4:	b40c      	push	{r2, r3}
 8007ee6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ee8:	b09d      	sub	sp, #116	; 0x74
 8007eea:	ac22      	add	r4, sp, #136	; 0x88
 8007eec:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 8007ef0:	f854 2b04 	ldr.w	r2, [r4], #4
 8007ef4:	9101      	str	r1, [sp, #4]
 8007ef6:	460e      	mov	r6, r1
 8007ef8:	4623      	mov	r3, r4
 8007efa:	9503      	str	r5, [sp, #12]
 8007efc:	9506      	str	r5, [sp, #24]
 8007efe:	a901      	add	r1, sp, #4
 8007f00:	f44f 7702 	mov.w	r7, #520	; 0x208
 8007f04:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8007f08:	f8ad 7010 	strh.w	r7, [sp, #16]
 8007f0c:	9605      	str	r6, [sp, #20]
 8007f0e:	f8ad 5012 	strh.w	r5, [sp, #18]
 8007f12:	941b      	str	r4, [sp, #108]	; 0x6c
 8007f14:	f000 f830 	bl	8007f78 <_svfprintf_r>
 8007f18:	9b01      	ldr	r3, [sp, #4]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	701a      	strb	r2, [r3, #0]
 8007f1e:	b01d      	add	sp, #116	; 0x74
 8007f20:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8007f24:	b002      	add	sp, #8
 8007f26:	4770      	bx	lr

08007f28 <sprintf>:
 8007f28:	b40e      	push	{r1, r2, r3}
 8007f2a:	b570      	push	{r4, r5, r6, lr}
 8007f2c:	b09d      	sub	sp, #116	; 0x74
 8007f2e:	ac21      	add	r4, sp, #132	; 0x84
 8007f30:	f240 03a0 	movw	r3, #160	; 0xa0
 8007f34:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007f38:	f854 2b04 	ldr.w	r2, [r4], #4
 8007f3c:	4606      	mov	r6, r0
 8007f3e:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 8007f42:	6818      	ldr	r0, [r3, #0]
 8007f44:	9503      	str	r5, [sp, #12]
 8007f46:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007f4a:	f8ad 3010 	strh.w	r3, [sp, #16]
 8007f4e:	9506      	str	r5, [sp, #24]
 8007f50:	4623      	mov	r3, r4
 8007f52:	a901      	add	r1, sp, #4
 8007f54:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8007f58:	9601      	str	r6, [sp, #4]
 8007f5a:	9605      	str	r6, [sp, #20]
 8007f5c:	f8ad 5012 	strh.w	r5, [sp, #18]
 8007f60:	941b      	str	r4, [sp, #108]	; 0x6c
 8007f62:	f000 f809 	bl	8007f78 <_svfprintf_r>
 8007f66:	9b01      	ldr	r3, [sp, #4]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	701a      	strb	r2, [r3, #0]
 8007f6c:	b01d      	add	sp, #116	; 0x74
 8007f6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007f72:	b003      	add	sp, #12
 8007f74:	4770      	bx	lr
 8007f76:	bf00      	nop

08007f78 <_svfprintf_r>:
 8007f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f7c:	b0c5      	sub	sp, #276	; 0x114
 8007f7e:	468a      	mov	sl, r1
 8007f80:	4614      	mov	r4, r2
 8007f82:	930e      	str	r3, [sp, #56]	; 0x38
 8007f84:	900f      	str	r0, [sp, #60]	; 0x3c
 8007f86:	f002 fa5f 	bl	800a448 <_localeconv_r>
 8007f8a:	6800      	ldr	r0, [r0, #0]
 8007f8c:	9017      	str	r0, [sp, #92]	; 0x5c
 8007f8e:	f003 fb35 	bl	800b5fc <strlen>
 8007f92:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8007f96:	901a      	str	r0, [sp, #104]	; 0x68
 8007f98:	2100      	movs	r1, #0
 8007f9a:	2000      	movs	r0, #0
 8007f9c:	061a      	lsls	r2, r3, #24
 8007f9e:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
 8007fa2:	d504      	bpl.n	8007fae <_svfprintf_r+0x36>
 8007fa4:	f8da 3010 	ldr.w	r3, [sl, #16]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	f001 8004 	beq.w	8008fb6 <_svfprintf_r+0x103e>
 8007fae:	2300      	movs	r3, #0
 8007fb0:	f10d 00e3 	add.w	r0, sp, #227	; 0xe3
 8007fb4:	f10d 0be4 	add.w	fp, sp, #228	; 0xe4
 8007fb8:	a91f      	add	r1, sp, #124	; 0x7c
 8007fba:	9310      	str	r3, [sp, #64]	; 0x40
 8007fbc:	933b      	str	r3, [sp, #236]	; 0xec
 8007fbe:	933a      	str	r3, [sp, #232]	; 0xe8
 8007fc0:	931c      	str	r3, [sp, #112]	; 0x70
 8007fc2:	931b      	str	r3, [sp, #108]	; 0x6c
 8007fc4:	930c      	str	r3, [sp, #48]	; 0x30
 8007fc6:	ebc0 030b 	rsb	r3, r0, fp
 8007fca:	9007      	str	r0, [sp, #28]
 8007fcc:	9139      	str	r1, [sp, #228]	; 0xe4
 8007fce:	9409      	str	r4, [sp, #36]	; 0x24
 8007fd0:	460e      	mov	r6, r1
 8007fd2:	931d      	str	r3, [sp, #116]	; 0x74
 8007fd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007fd6:	7803      	ldrb	r3, [r0, #0]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	bf18      	it	ne
 8007fdc:	2b25      	cmpne	r3, #37	; 0x25
 8007fde:	f000 80af 	beq.w	8008140 <_svfprintf_r+0x1c8>
 8007fe2:	4607      	mov	r7, r0
 8007fe4:	f817 3f01 	ldrb.w	r3, [r7, #1]!
 8007fe8:	2b25      	cmp	r3, #37	; 0x25
 8007fea:	bf18      	it	ne
 8007fec:	2b00      	cmpne	r3, #0
 8007fee:	d1f9      	bne.n	8007fe4 <_svfprintf_r+0x6c>
 8007ff0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007ff2:	ebb7 0801 	subs.w	r8, r7, r1
 8007ff6:	d00e      	beq.n	8008016 <_svfprintf_r+0x9e>
 8007ff8:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8007ffa:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8007ffc:	6031      	str	r1, [r6, #0]
 8007ffe:	3401      	adds	r4, #1
 8008000:	4445      	add	r5, r8
 8008002:	2c07      	cmp	r4, #7
 8008004:	f8c6 8004 	str.w	r8, [r6, #4]
 8008008:	953b      	str	r5, [sp, #236]	; 0xec
 800800a:	943a      	str	r4, [sp, #232]	; 0xe8
 800800c:	dc7c      	bgt.n	8008108 <_svfprintf_r+0x190>
 800800e:	3608      	adds	r6, #8
 8008010:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008012:	4442      	add	r2, r8
 8008014:	920c      	str	r2, [sp, #48]	; 0x30
 8008016:	783b      	ldrb	r3, [r7, #0]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d07d      	beq.n	8008118 <_svfprintf_r+0x1a0>
 800801c:	3701      	adds	r7, #1
 800801e:	9709      	str	r7, [sp, #36]	; 0x24
 8008020:	2300      	movs	r3, #0
 8008022:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008024:	930b      	str	r3, [sp, #44]	; 0x2c
 8008026:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
 800802a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800802e:	9308      	str	r3, [sp, #32]
 8008030:	2720      	movs	r7, #32
 8008032:	252b      	movs	r5, #43	; 0x2b
 8008034:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008038:	f1a3 0220 	sub.w	r2, r3, #32
 800803c:	2a58      	cmp	r2, #88	; 0x58
 800803e:	f200 823b 	bhi.w	80084b8 <_svfprintf_r+0x540>
 8008042:	e8df f012 	tbh	[pc, r2, lsl #1]
 8008046:	024c      	.short	0x024c
 8008048:	02390239 	.word	0x02390239
 800804c:	02390254 	.word	0x02390254
 8008050:	02390239 	.word	0x02390239
 8008054:	02390239 	.word	0x02390239
 8008058:	02590239 	.word	0x02590239
 800805c:	0239007f 	.word	0x0239007f
 8008060:	0082005c 	.word	0x0082005c
 8008064:	009d0239 	.word	0x009d0239
 8008068:	00a200a2 	.word	0x00a200a2
 800806c:	00a200a2 	.word	0x00a200a2
 8008070:	00a200a2 	.word	0x00a200a2
 8008074:	00a200a2 	.word	0x00a200a2
 8008078:	023900a2 	.word	0x023900a2
 800807c:	02390239 	.word	0x02390239
 8008080:	02390239 	.word	0x02390239
 8008084:	02390239 	.word	0x02390239
 8008088:	02390239 	.word	0x02390239
 800808c:	00b50239 	.word	0x00b50239
 8008090:	02390154 	.word	0x02390154
 8008094:	02390154 	.word	0x02390154
 8008098:	02390239 	.word	0x02390239
 800809c:	018b0239 	.word	0x018b0239
 80080a0:	02390239 	.word	0x02390239
 80080a4:	02390190 	.word	0x02390190
 80080a8:	02390239 	.word	0x02390239
 80080ac:	02390239 	.word	0x02390239
 80080b0:	023901a7 	.word	0x023901a7
 80080b4:	01ba0239 	.word	0x01ba0239
 80080b8:	02390239 	.word	0x02390239
 80080bc:	02390239 	.word	0x02390239
 80080c0:	02390239 	.word	0x02390239
 80080c4:	02390239 	.word	0x02390239
 80080c8:	02390239 	.word	0x02390239
 80080cc:	02780293 	.word	0x02780293
 80080d0:	01540154 	.word	0x01540154
 80080d4:	028e0154 	.word	0x028e0154
 80080d8:	02390278 	.word	0x02390278
 80080dc:	02130239 	.word	0x02130239
 80080e0:	02180239 	.word	0x02180239
 80080e4:	02a50224 	.word	0x02a50224
 80080e8:	023901de 	.word	0x023901de
 80080ec:	023901e3 	.word	0x023901e3
 80080f0:	02390264 	.word	0x02390264
 80080f4:	02c70239 	.word	0x02c70239
 80080f8:	4252      	negs	r2, r2
 80080fa:	920b      	str	r2, [sp, #44]	; 0x2c
 80080fc:	930e      	str	r3, [sp, #56]	; 0x38
 80080fe:	9b08      	ldr	r3, [sp, #32]
 8008100:	f043 0304 	orr.w	r3, r3, #4
 8008104:	9308      	str	r3, [sp, #32]
 8008106:	e795      	b.n	8008034 <_svfprintf_r+0xbc>
 8008108:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800810a:	4651      	mov	r1, sl
 800810c:	465a      	mov	r2, fp
 800810e:	f003 faa5 	bl	800b65c <__ssprint_r>
 8008112:	b940      	cbnz	r0, 8008126 <_svfprintf_r+0x1ae>
 8008114:	ae1f      	add	r6, sp, #124	; 0x7c
 8008116:	e77b      	b.n	8008010 <_svfprintf_r+0x98>
 8008118:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 800811a:	b123      	cbz	r3, 8008126 <_svfprintf_r+0x1ae>
 800811c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800811e:	4651      	mov	r1, sl
 8008120:	aa39      	add	r2, sp, #228	; 0xe4
 8008122:	f003 fa9b 	bl	800b65c <__ssprint_r>
 8008126:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800812a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800812e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008130:	bf18      	it	ne
 8008132:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 8008136:	930c      	str	r3, [sp, #48]	; 0x30
 8008138:	980c      	ldr	r0, [sp, #48]	; 0x30
 800813a:	b045      	add	sp, #276	; 0x114
 800813c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008140:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008142:	e768      	b.n	8008016 <_svfprintf_r+0x9e>
 8008144:	f88d 510f 	strb.w	r5, [sp, #271]	; 0x10f
 8008148:	e774      	b.n	8008034 <_svfprintf_r+0xbc>
 800814a:	f810 3b01 	ldrb.w	r3, [r0], #1
 800814e:	2b2a      	cmp	r3, #42	; 0x2a
 8008150:	f001 804c 	beq.w	80091ec <_svfprintf_r+0x1274>
 8008154:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8008158:	2400      	movs	r4, #0
 800815a:	2a09      	cmp	r2, #9
 800815c:	f63f af6c 	bhi.w	8008038 <_svfprintf_r+0xc0>
 8008160:	4601      	mov	r1, r0
 8008162:	2400      	movs	r4, #0
 8008164:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008168:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800816c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8008170:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8008174:	2a09      	cmp	r2, #9
 8008176:	4608      	mov	r0, r1
 8008178:	d9f4      	bls.n	8008164 <_svfprintf_r+0x1ec>
 800817a:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
 800817e:	e75b      	b.n	8008038 <_svfprintf_r+0xc0>
 8008180:	9a08      	ldr	r2, [sp, #32]
 8008182:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008186:	9208      	str	r2, [sp, #32]
 8008188:	e754      	b.n	8008034 <_svfprintf_r+0xbc>
 800818a:	4601      	mov	r1, r0
 800818c:	2200      	movs	r2, #0
 800818e:	46b4      	mov	ip, r6
 8008190:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8008194:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008198:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800819c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80081a0:	2e09      	cmp	r6, #9
 80081a2:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80081a6:	4608      	mov	r0, r1
 80081a8:	d9f2      	bls.n	8008190 <_svfprintf_r+0x218>
 80081aa:	4666      	mov	r6, ip
 80081ac:	920b      	str	r2, [sp, #44]	; 0x2c
 80081ae:	e743      	b.n	8008038 <_svfprintf_r+0xc0>
 80081b0:	9315      	str	r3, [sp, #84]	; 0x54
 80081b2:	9b08      	ldr	r3, [sp, #32]
 80081b4:	9009      	str	r0, [sp, #36]	; 0x24
 80081b6:	f043 0310 	orr.w	r3, r3, #16
 80081ba:	9308      	str	r3, [sp, #32]
 80081bc:	9808      	ldr	r0, [sp, #32]
 80081be:	06c3      	lsls	r3, r0, #27
 80081c0:	f100 81bf 	bmi.w	8008542 <_svfprintf_r+0x5ca>
 80081c4:	9a08      	ldr	r2, [sp, #32]
 80081c6:	0655      	lsls	r5, r2, #25
 80081c8:	f140 81bb 	bpl.w	8008542 <_svfprintf_r+0x5ca>
 80081cc:	980e      	ldr	r0, [sp, #56]	; 0x38
 80081ce:	f9b0 3000 	ldrsh.w	r3, [r0]
 80081d2:	3004      	adds	r0, #4
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	900e      	str	r0, [sp, #56]	; 0x38
 80081d8:	f2c0 81ba 	blt.w	8008550 <_svfprintf_r+0x5d8>
 80081dc:	bf0c      	ite	eq
 80081de:	2100      	moveq	r1, #0
 80081e0:	2101      	movne	r1, #1
 80081e2:	2201      	movs	r2, #1
 80081e4:	2c00      	cmp	r4, #0
 80081e6:	bfa2      	ittt	ge
 80081e8:	9808      	ldrge	r0, [sp, #32]
 80081ea:	f020 0080 	bicge.w	r0, r0, #128	; 0x80
 80081ee:	9008      	strge	r0, [sp, #32]
 80081f0:	2c00      	cmp	r4, #0
 80081f2:	bf18      	it	ne
 80081f4:	f041 0101 	orrne.w	r1, r1, #1
 80081f8:	2900      	cmp	r1, #0
 80081fa:	f000 8323 	beq.w	8008844 <_svfprintf_r+0x8cc>
 80081fe:	2a01      	cmp	r2, #1
 8008200:	f000 845f 	beq.w	8008ac2 <_svfprintf_r+0xb4a>
 8008204:	2a02      	cmp	r2, #2
 8008206:	bf18      	it	ne
 8008208:	465a      	movne	r2, fp
 800820a:	d102      	bne.n	8008212 <_svfprintf_r+0x29a>
 800820c:	f000 bc48 	b.w	8008aa0 <_svfprintf_r+0xb28>
 8008210:	4602      	mov	r2, r0
 8008212:	f003 0107 	and.w	r1, r3, #7
 8008216:	3130      	adds	r1, #48	; 0x30
 8008218:	1e50      	subs	r0, r2, #1
 800821a:	08db      	lsrs	r3, r3, #3
 800821c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008220:	d1f6      	bne.n	8008210 <_svfprintf_r+0x298>
 8008222:	9b08      	ldr	r3, [sp, #32]
 8008224:	9011      	str	r0, [sp, #68]	; 0x44
 8008226:	07dd      	lsls	r5, r3, #31
 8008228:	d507      	bpl.n	800823a <_svfprintf_r+0x2c2>
 800822a:	2930      	cmp	r1, #48	; 0x30
 800822c:	f000 8733 	beq.w	8009096 <_svfprintf_r+0x111e>
 8008230:	1e90      	subs	r0, r2, #2
 8008232:	2330      	movs	r3, #48	; 0x30
 8008234:	9011      	str	r0, [sp, #68]	; 0x44
 8008236:	f802 3c02 	strb.w	r3, [r2, #-2]
 800823a:	ebc0 030b 	rsb	r3, r0, fp
 800823e:	930d      	str	r3, [sp, #52]	; 0x34
 8008240:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008242:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 8008246:	9412      	str	r4, [sp, #72]	; 0x48
 8008248:	42a3      	cmp	r3, r4
 800824a:	bfb8      	it	lt
 800824c:	4623      	movlt	r3, r4
 800824e:	2000      	movs	r0, #0
 8008250:	930a      	str	r3, [sp, #40]	; 0x28
 8008252:	9016      	str	r0, [sp, #88]	; 0x58
 8008254:	b111      	cbz	r1, 800825c <_svfprintf_r+0x2e4>
 8008256:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008258:	3301      	adds	r3, #1
 800825a:	930a      	str	r3, [sp, #40]	; 0x28
 800825c:	9b08      	ldr	r3, [sp, #32]
 800825e:	f013 0302 	ands.w	r3, r3, #2
 8008262:	9313      	str	r3, [sp, #76]	; 0x4c
 8008264:	d002      	beq.n	800826c <_svfprintf_r+0x2f4>
 8008266:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008268:	3002      	adds	r0, #2
 800826a:	900a      	str	r0, [sp, #40]	; 0x28
 800826c:	9b08      	ldr	r3, [sp, #32]
 800826e:	f013 0384 	ands.w	r3, r3, #132	; 0x84
 8008272:	9314      	str	r3, [sp, #80]	; 0x50
 8008274:	f040 81bb 	bne.w	80085ee <_svfprintf_r+0x676>
 8008278:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800827a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800827c:	1a47      	subs	r7, r0, r1
 800827e:	2f00      	cmp	r7, #0
 8008280:	f340 81b5 	ble.w	80085ee <_svfprintf_r+0x676>
 8008284:	2f10      	cmp	r7, #16
 8008286:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8008288:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 800828a:	f8df 8344 	ldr.w	r8, [pc, #836]	; 80085d0 <_svfprintf_r+0x658>
 800828e:	dd22      	ble.n	80082d6 <_svfprintf_r+0x35e>
 8008290:	4623      	mov	r3, r4
 8008292:	f04f 0910 	mov.w	r9, #16
 8008296:	4644      	mov	r4, r8
 8008298:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 800829c:	e003      	b.n	80082a6 <_svfprintf_r+0x32e>
 800829e:	3f10      	subs	r7, #16
 80082a0:	3608      	adds	r6, #8
 80082a2:	2f10      	cmp	r7, #16
 80082a4:	dd15      	ble.n	80082d2 <_svfprintf_r+0x35a>
 80082a6:	3301      	adds	r3, #1
 80082a8:	3510      	adds	r5, #16
 80082aa:	2b07      	cmp	r3, #7
 80082ac:	e886 0210 	stmia.w	r6, {r4, r9}
 80082b0:	953b      	str	r5, [sp, #236]	; 0xec
 80082b2:	933a      	str	r3, [sp, #232]	; 0xe8
 80082b4:	ddf3      	ble.n	800829e <_svfprintf_r+0x326>
 80082b6:	4640      	mov	r0, r8
 80082b8:	4651      	mov	r1, sl
 80082ba:	465a      	mov	r2, fp
 80082bc:	f003 f9ce 	bl	800b65c <__ssprint_r>
 80082c0:	2800      	cmp	r0, #0
 80082c2:	f47f af30 	bne.w	8008126 <_svfprintf_r+0x1ae>
 80082c6:	3f10      	subs	r7, #16
 80082c8:	2f10      	cmp	r7, #16
 80082ca:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80082cc:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 80082ce:	ae1f      	add	r6, sp, #124	; 0x7c
 80082d0:	dce9      	bgt.n	80082a6 <_svfprintf_r+0x32e>
 80082d2:	46a0      	mov	r8, r4
 80082d4:	461c      	mov	r4, r3
 80082d6:	3401      	adds	r4, #1
 80082d8:	19ed      	adds	r5, r5, r7
 80082da:	2c07      	cmp	r4, #7
 80082dc:	f8c6 8000 	str.w	r8, [r6]
 80082e0:	6077      	str	r7, [r6, #4]
 80082e2:	953b      	str	r5, [sp, #236]	; 0xec
 80082e4:	943a      	str	r4, [sp, #232]	; 0xe8
 80082e6:	f300 8414 	bgt.w	8008b12 <_svfprintf_r+0xb9a>
 80082ea:	3608      	adds	r6, #8
 80082ec:	e180      	b.n	80085f0 <_svfprintf_r+0x678>
 80082ee:	9009      	str	r0, [sp, #36]	; 0x24
 80082f0:	980e      	ldr	r0, [sp, #56]	; 0x38
 80082f2:	9315      	str	r3, [sp, #84]	; 0x54
 80082f4:	1dc3      	adds	r3, r0, #7
 80082f6:	f023 0307 	bic.w	r3, r3, #7
 80082fa:	f103 0108 	add.w	r1, r3, #8
 80082fe:	910e      	str	r1, [sp, #56]	; 0x38
 8008300:	f8d3 8000 	ldr.w	r8, [r3]
 8008304:	685d      	ldr	r5, [r3, #4]
 8008306:	4642      	mov	r2, r8
 8008308:	462b      	mov	r3, r5
 800830a:	4629      	mov	r1, r5
 800830c:	4640      	mov	r0, r8
 800830e:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
 8008312:	f003 f83b 	bl	800b38c <__fpclassifyd>
 8008316:	2801      	cmp	r0, #1
 8008318:	4629      	mov	r1, r5
 800831a:	4640      	mov	r0, r8
 800831c:	f040 84d0 	bne.w	8008cc0 <_svfprintf_r+0xd48>
 8008320:	2200      	movs	r2, #0
 8008322:	2300      	movs	r3, #0
 8008324:	f004 fd62 	bl	800cdec <__aeabi_dcmplt>
 8008328:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 800832c:	b110      	cbz	r0, 8008334 <_svfprintf_r+0x3bc>
 800832e:	212d      	movs	r1, #45	; 0x2d
 8008330:	f88d 110f 	strb.w	r1, [sp, #271]	; 0x10f
 8008334:	2303      	movs	r3, #3
 8008336:	930a      	str	r3, [sp, #40]	; 0x28
 8008338:	2300      	movs	r3, #0
 800833a:	9312      	str	r3, [sp, #72]	; 0x48
 800833c:	4aa0      	ldr	r2, [pc, #640]	; (80085c0 <_svfprintf_r+0x648>)
 800833e:	4ba1      	ldr	r3, [pc, #644]	; (80085c4 <_svfprintf_r+0x64c>)
 8008340:	9815      	ldr	r0, [sp, #84]	; 0x54
 8008342:	2847      	cmp	r0, #71	; 0x47
 8008344:	bfd8      	it	le
 8008346:	461a      	movle	r2, r3
 8008348:	9211      	str	r2, [sp, #68]	; 0x44
 800834a:	9a08      	ldr	r2, [sp, #32]
 800834c:	2303      	movs	r3, #3
 800834e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008352:	930d      	str	r3, [sp, #52]	; 0x34
 8008354:	2300      	movs	r3, #0
 8008356:	9208      	str	r2, [sp, #32]
 8008358:	9316      	str	r3, [sp, #88]	; 0x58
 800835a:	e77b      	b.n	8008254 <_svfprintf_r+0x2dc>
 800835c:	9b08      	ldr	r3, [sp, #32]
 800835e:	f043 0308 	orr.w	r3, r3, #8
 8008362:	9308      	str	r3, [sp, #32]
 8008364:	e666      	b.n	8008034 <_svfprintf_r+0xbc>
 8008366:	9908      	ldr	r1, [sp, #32]
 8008368:	9009      	str	r0, [sp, #36]	; 0x24
 800836a:	f041 0110 	orr.w	r1, r1, #16
 800836e:	9108      	str	r1, [sp, #32]
 8008370:	9a08      	ldr	r2, [sp, #32]
 8008372:	9315      	str	r3, [sp, #84]	; 0x54
 8008374:	f012 0110 	ands.w	r1, r2, #16
 8008378:	f000 8090 	beq.w	800849c <_svfprintf_r+0x524>
 800837c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800837e:	6803      	ldr	r3, [r0, #0]
 8008380:	2200      	movs	r2, #0
 8008382:	1a99      	subs	r1, r3, r2
 8008384:	bf18      	it	ne
 8008386:	2101      	movne	r1, #1
 8008388:	3004      	adds	r0, #4
 800838a:	900e      	str	r0, [sp, #56]	; 0x38
 800838c:	2000      	movs	r0, #0
 800838e:	f88d 010f 	strb.w	r0, [sp, #271]	; 0x10f
 8008392:	e727      	b.n	80081e4 <_svfprintf_r+0x26c>
 8008394:	9908      	ldr	r1, [sp, #32]
 8008396:	9009      	str	r0, [sp, #36]	; 0x24
 8008398:	f041 0110 	orr.w	r1, r1, #16
 800839c:	9108      	str	r1, [sp, #32]
 800839e:	9a08      	ldr	r2, [sp, #32]
 80083a0:	9315      	str	r3, [sp, #84]	; 0x54
 80083a2:	06d0      	lsls	r0, r2, #27
 80083a4:	f140 80b9 	bpl.w	800851a <_svfprintf_r+0x5a2>
 80083a8:	980e      	ldr	r0, [sp, #56]	; 0x38
 80083aa:	6803      	ldr	r3, [r0, #0]
 80083ac:	2201      	movs	r2, #1
 80083ae:	1c19      	adds	r1, r3, #0
 80083b0:	bf18      	it	ne
 80083b2:	2101      	movne	r1, #1
 80083b4:	3004      	adds	r0, #4
 80083b6:	900e      	str	r0, [sp, #56]	; 0x38
 80083b8:	e7e8      	b.n	800838c <_svfprintf_r+0x414>
 80083ba:	4a83      	ldr	r2, [pc, #524]	; (80085c8 <_svfprintf_r+0x650>)
 80083bc:	9315      	str	r3, [sp, #84]	; 0x54
 80083be:	9b08      	ldr	r3, [sp, #32]
 80083c0:	921c      	str	r2, [sp, #112]	; 0x70
 80083c2:	06da      	lsls	r2, r3, #27
 80083c4:	9009      	str	r0, [sp, #36]	; 0x24
 80083c6:	f100 810d 	bmi.w	80085e4 <_svfprintf_r+0x66c>
 80083ca:	9908      	ldr	r1, [sp, #32]
 80083cc:	064b      	lsls	r3, r1, #25
 80083ce:	f140 8109 	bpl.w	80085e4 <_svfprintf_r+0x66c>
 80083d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80083d4:	8813      	ldrh	r3, [r2, #0]
 80083d6:	3204      	adds	r2, #4
 80083d8:	920e      	str	r2, [sp, #56]	; 0x38
 80083da:	1c19      	adds	r1, r3, #0
 80083dc:	9a08      	ldr	r2, [sp, #32]
 80083de:	bf18      	it	ne
 80083e0:	2101      	movne	r1, #1
 80083e2:	420a      	tst	r2, r1
 80083e4:	f000 83ca 	beq.w	8008b7c <_svfprintf_r+0xc04>
 80083e8:	9908      	ldr	r1, [sp, #32]
 80083ea:	9815      	ldr	r0, [sp, #84]	; 0x54
 80083ec:	2230      	movs	r2, #48	; 0x30
 80083ee:	f041 0102 	orr.w	r1, r1, #2
 80083f2:	f88d 210c 	strb.w	r2, [sp, #268]	; 0x10c
 80083f6:	9108      	str	r1, [sp, #32]
 80083f8:	f88d 010d 	strb.w	r0, [sp, #269]	; 0x10d
 80083fc:	2101      	movs	r1, #1
 80083fe:	2202      	movs	r2, #2
 8008400:	e7c4      	b.n	800838c <_svfprintf_r+0x414>
 8008402:	9b08      	ldr	r3, [sp, #32]
 8008404:	f043 0310 	orr.w	r3, r3, #16
 8008408:	9308      	str	r3, [sp, #32]
 800840a:	e613      	b.n	8008034 <_svfprintf_r+0xbc>
 800840c:	2500      	movs	r5, #0
 800840e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008410:	f88d 510f 	strb.w	r5, [sp, #271]	; 0x10f
 8008414:	9315      	str	r3, [sp, #84]	; 0x54
 8008416:	6812      	ldr	r2, [r2, #0]
 8008418:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800841a:	9009      	str	r0, [sp, #36]	; 0x24
 800841c:	9211      	str	r2, [sp, #68]	; 0x44
 800841e:	1d1f      	adds	r7, r3, #4
 8008420:	2a00      	cmp	r2, #0
 8008422:	f000 864b 	beq.w	80090bc <_svfprintf_r+0x1144>
 8008426:	2c00      	cmp	r4, #0
 8008428:	9811      	ldr	r0, [sp, #68]	; 0x44
 800842a:	f2c0 8602 	blt.w	8009032 <_svfprintf_r+0x10ba>
 800842e:	4629      	mov	r1, r5
 8008430:	4622      	mov	r2, r4
 8008432:	f002 fad1 	bl	800a9d8 <memchr>
 8008436:	2800      	cmp	r0, #0
 8008438:	f000 866f 	beq.w	800911a <_svfprintf_r+0x11a2>
 800843c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800843e:	9512      	str	r5, [sp, #72]	; 0x48
 8008440:	1ac0      	subs	r0, r0, r3
 8008442:	42a0      	cmp	r0, r4
 8008444:	900d      	str	r0, [sp, #52]	; 0x34
 8008446:	bfd1      	iteee	le
 8008448:	9b0d      	ldrle	r3, [sp, #52]	; 0x34
 800844a:	f89d 110f 	ldrbgt.w	r1, [sp, #271]	; 0x10f
 800844e:	970e      	strgt	r7, [sp, #56]	; 0x38
 8008450:	ea24 70e4 	bicgt.w	r0, r4, r4, asr #31
 8008454:	bfd3      	iteet	le
 8008456:	ea23 73e3 	bicle.w	r3, r3, r3, asr #31
 800845a:	900a      	strgt	r0, [sp, #40]	; 0x28
 800845c:	940d      	strgt	r4, [sp, #52]	; 0x34
 800845e:	930a      	strle	r3, [sp, #40]	; 0x28
 8008460:	bfdc      	itt	le
 8008462:	f89d 110f 	ldrble.w	r1, [sp, #271]	; 0x10f
 8008466:	970e      	strle	r7, [sp, #56]	; 0x38
 8008468:	9516      	str	r5, [sp, #88]	; 0x58
 800846a:	e6f3      	b.n	8008254 <_svfprintf_r+0x2dc>
 800846c:	9a08      	ldr	r2, [sp, #32]
 800846e:	f042 0210 	orr.w	r2, r2, #16
 8008472:	9208      	str	r2, [sp, #32]
 8008474:	e5de      	b.n	8008034 <_svfprintf_r+0xbc>
 8008476:	9009      	str	r0, [sp, #36]	; 0x24
 8008478:	9808      	ldr	r0, [sp, #32]
 800847a:	06c3      	lsls	r3, r0, #27
 800847c:	f140 843f 	bpl.w	8008cfe <_svfprintf_r+0xd86>
 8008480:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008482:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008484:	680b      	ldr	r3, [r1, #0]
 8008486:	3104      	adds	r1, #4
 8008488:	910e      	str	r1, [sp, #56]	; 0x38
 800848a:	601a      	str	r2, [r3, #0]
 800848c:	e5a2      	b.n	8007fd4 <_svfprintf_r+0x5c>
 800848e:	9a08      	ldr	r2, [sp, #32]
 8008490:	9009      	str	r0, [sp, #36]	; 0x24
 8008492:	f012 0110 	ands.w	r1, r2, #16
 8008496:	9315      	str	r3, [sp, #84]	; 0x54
 8008498:	f47f af70 	bne.w	800837c <_svfprintf_r+0x404>
 800849c:	9b08      	ldr	r3, [sp, #32]
 800849e:	f013 0240 	ands.w	r2, r3, #64	; 0x40
 80084a2:	f000 8437 	beq.w	8008d14 <_svfprintf_r+0xd9c>
 80084a6:	980e      	ldr	r0, [sp, #56]	; 0x38
 80084a8:	8803      	ldrh	r3, [r0, #0]
 80084aa:	460a      	mov	r2, r1
 80084ac:	1c19      	adds	r1, r3, #0
 80084ae:	bf18      	it	ne
 80084b0:	2101      	movne	r1, #1
 80084b2:	3004      	adds	r0, #4
 80084b4:	900e      	str	r0, [sp, #56]	; 0x38
 80084b6:	e769      	b.n	800838c <_svfprintf_r+0x414>
 80084b8:	9009      	str	r0, [sp, #36]	; 0x24
 80084ba:	9315      	str	r3, [sp, #84]	; 0x54
 80084bc:	2b00      	cmp	r3, #0
 80084be:	f43f ae2b 	beq.w	8008118 <_svfprintf_r+0x1a0>
 80084c2:	2101      	movs	r1, #1
 80084c4:	f88d 30bc 	strb.w	r3, [sp, #188]	; 0xbc
 80084c8:	aa2f      	add	r2, sp, #188	; 0xbc
 80084ca:	2300      	movs	r3, #0
 80084cc:	910a      	str	r1, [sp, #40]	; 0x28
 80084ce:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
 80084d2:	910d      	str	r1, [sp, #52]	; 0x34
 80084d4:	9211      	str	r2, [sp, #68]	; 0x44
 80084d6:	2300      	movs	r3, #0
 80084d8:	9312      	str	r3, [sp, #72]	; 0x48
 80084da:	9316      	str	r3, [sp, #88]	; 0x58
 80084dc:	e6be      	b.n	800825c <_svfprintf_r+0x2e4>
 80084de:	f89d 310f 	ldrb.w	r3, [sp, #271]	; 0x10f
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	f47f ada6 	bne.w	8008034 <_svfprintf_r+0xbc>
 80084e8:	f88d 710f 	strb.w	r7, [sp, #271]	; 0x10f
 80084ec:	e5a2      	b.n	8008034 <_svfprintf_r+0xbc>
 80084ee:	9a08      	ldr	r2, [sp, #32]
 80084f0:	f042 0201 	orr.w	r2, r2, #1
 80084f4:	9208      	str	r2, [sp, #32]
 80084f6:	e59d      	b.n	8008034 <_svfprintf_r+0xbc>
 80084f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80084fa:	990e      	ldr	r1, [sp, #56]	; 0x38
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8008500:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008502:	1d0b      	adds	r3, r1, #4
 8008504:	2a00      	cmp	r2, #0
 8008506:	f6ff adf7 	blt.w	80080f8 <_svfprintf_r+0x180>
 800850a:	930e      	str	r3, [sp, #56]	; 0x38
 800850c:	e592      	b.n	8008034 <_svfprintf_r+0xbc>
 800850e:	9a08      	ldr	r2, [sp, #32]
 8008510:	9009      	str	r0, [sp, #36]	; 0x24
 8008512:	06d0      	lsls	r0, r2, #27
 8008514:	9315      	str	r3, [sp, #84]	; 0x54
 8008516:	f53f af47 	bmi.w	80083a8 <_svfprintf_r+0x430>
 800851a:	9908      	ldr	r1, [sp, #32]
 800851c:	0649      	lsls	r1, r1, #25
 800851e:	f140 83ea 	bpl.w	8008cf6 <_svfprintf_r+0xd7e>
 8008522:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008524:	8813      	ldrh	r3, [r2, #0]
 8008526:	2201      	movs	r2, #1
 8008528:	980e      	ldr	r0, [sp, #56]	; 0x38
 800852a:	1c19      	adds	r1, r3, #0
 800852c:	bf18      	it	ne
 800852e:	2101      	movne	r1, #1
 8008530:	3004      	adds	r0, #4
 8008532:	900e      	str	r0, [sp, #56]	; 0x38
 8008534:	e72a      	b.n	800838c <_svfprintf_r+0x414>
 8008536:	9009      	str	r0, [sp, #36]	; 0x24
 8008538:	9808      	ldr	r0, [sp, #32]
 800853a:	9315      	str	r3, [sp, #84]	; 0x54
 800853c:	06c3      	lsls	r3, r0, #27
 800853e:	f57f ae41 	bpl.w	80081c4 <_svfprintf_r+0x24c>
 8008542:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008544:	680b      	ldr	r3, [r1, #0]
 8008546:	3104      	adds	r1, #4
 8008548:	2b00      	cmp	r3, #0
 800854a:	910e      	str	r1, [sp, #56]	; 0x38
 800854c:	f6bf ae46 	bge.w	80081dc <_svfprintf_r+0x264>
 8008550:	425b      	negs	r3, r3
 8008552:	222d      	movs	r2, #45	; 0x2d
 8008554:	1c19      	adds	r1, r3, #0
 8008556:	f88d 210f 	strb.w	r2, [sp, #271]	; 0x10f
 800855a:	bf18      	it	ne
 800855c:	2101      	movne	r1, #1
 800855e:	2201      	movs	r2, #1
 8008560:	e640      	b.n	80081e4 <_svfprintf_r+0x26c>
 8008562:	9908      	ldr	r1, [sp, #32]
 8008564:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8008568:	9108      	str	r1, [sp, #32]
 800856a:	e563      	b.n	8008034 <_svfprintf_r+0xbc>
 800856c:	9315      	str	r3, [sp, #84]	; 0x54
 800856e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008570:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	9009      	str	r0, [sp, #36]	; 0x24
 8008576:	2200      	movs	r2, #0
 8008578:	2001      	movs	r0, #1
 800857a:	f88d 210f 	strb.w	r2, [sp, #271]	; 0x10f
 800857e:	3104      	adds	r1, #4
 8008580:	aa2f      	add	r2, sp, #188	; 0xbc
 8008582:	900a      	str	r0, [sp, #40]	; 0x28
 8008584:	910e      	str	r1, [sp, #56]	; 0x38
 8008586:	f88d 30bc 	strb.w	r3, [sp, #188]	; 0xbc
 800858a:	900d      	str	r0, [sp, #52]	; 0x34
 800858c:	9211      	str	r2, [sp, #68]	; 0x44
 800858e:	e7a2      	b.n	80084d6 <_svfprintf_r+0x55e>
 8008590:	490e      	ldr	r1, [pc, #56]	; (80085cc <_svfprintf_r+0x654>)
 8008592:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008594:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008596:	911c      	str	r1, [sp, #112]	; 0x70
 8008598:	9908      	ldr	r1, [sp, #32]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	9009      	str	r0, [sp, #36]	; 0x24
 800859e:	3204      	adds	r2, #4
 80085a0:	f041 0102 	orr.w	r1, r1, #2
 80085a4:	2078      	movs	r0, #120	; 0x78
 80085a6:	920e      	str	r2, [sp, #56]	; 0x38
 80085a8:	9108      	str	r1, [sp, #32]
 80085aa:	2230      	movs	r2, #48	; 0x30
 80085ac:	1c19      	adds	r1, r3, #0
 80085ae:	f88d 210c 	strb.w	r2, [sp, #268]	; 0x10c
 80085b2:	bf18      	it	ne
 80085b4:	2101      	movne	r1, #1
 80085b6:	f88d 010d 	strb.w	r0, [sp, #269]	; 0x10d
 80085ba:	2202      	movs	r2, #2
 80085bc:	9015      	str	r0, [sp, #84]	; 0x54
 80085be:	e6e5      	b.n	800838c <_svfprintf_r+0x414>
 80085c0:	0800d520 	.word	0x0800d520
 80085c4:	0800d51c 	.word	0x0800d51c
 80085c8:	0800d52c 	.word	0x0800d52c
 80085cc:	0800d540 	.word	0x0800d540
 80085d0:	0800d278 	.word	0x0800d278
 80085d4:	9315      	str	r3, [sp, #84]	; 0x54
 80085d6:	9b08      	ldr	r3, [sp, #32]
 80085d8:	49a4      	ldr	r1, [pc, #656]	; (800886c <_svfprintf_r+0x8f4>)
 80085da:	9009      	str	r0, [sp, #36]	; 0x24
 80085dc:	06da      	lsls	r2, r3, #27
 80085de:	911c      	str	r1, [sp, #112]	; 0x70
 80085e0:	f57f aef3 	bpl.w	80083ca <_svfprintf_r+0x452>
 80085e4:	980e      	ldr	r0, [sp, #56]	; 0x38
 80085e6:	6803      	ldr	r3, [r0, #0]
 80085e8:	3004      	adds	r0, #4
 80085ea:	900e      	str	r0, [sp, #56]	; 0x38
 80085ec:	e6f5      	b.n	80083da <_svfprintf_r+0x462>
 80085ee:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80085f0:	f89d 310f 	ldrb.w	r3, [sp, #271]	; 0x10f
 80085f4:	b16b      	cbz	r3, 8008612 <_svfprintf_r+0x69a>
 80085f6:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80085f8:	f20d 130f 	addw	r3, sp, #271	; 0x10f
 80085fc:	3401      	adds	r4, #1
 80085fe:	6033      	str	r3, [r6, #0]
 8008600:	3501      	adds	r5, #1
 8008602:	2301      	movs	r3, #1
 8008604:	2c07      	cmp	r4, #7
 8008606:	6073      	str	r3, [r6, #4]
 8008608:	953b      	str	r5, [sp, #236]	; 0xec
 800860a:	943a      	str	r4, [sp, #232]	; 0xe8
 800860c:	f300 81f5 	bgt.w	80089fa <_svfprintf_r+0xa82>
 8008610:	3608      	adds	r6, #8
 8008612:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008614:	b163      	cbz	r3, 8008630 <_svfprintf_r+0x6b8>
 8008616:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8008618:	ab43      	add	r3, sp, #268	; 0x10c
 800861a:	3401      	adds	r4, #1
 800861c:	6033      	str	r3, [r6, #0]
 800861e:	3502      	adds	r5, #2
 8008620:	2302      	movs	r3, #2
 8008622:	2c07      	cmp	r4, #7
 8008624:	6073      	str	r3, [r6, #4]
 8008626:	953b      	str	r5, [sp, #236]	; 0xec
 8008628:	943a      	str	r4, [sp, #232]	; 0xe8
 800862a:	f300 81db 	bgt.w	80089e4 <_svfprintf_r+0xa6c>
 800862e:	3608      	adds	r6, #8
 8008630:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008632:	2b80      	cmp	r3, #128	; 0x80
 8008634:	f000 8122 	beq.w	800887c <_svfprintf_r+0x904>
 8008638:	9812      	ldr	r0, [sp, #72]	; 0x48
 800863a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800863c:	1ac7      	subs	r7, r0, r3
 800863e:	2f00      	cmp	r7, #0
 8008640:	dd32      	ble.n	80086a8 <_svfprintf_r+0x730>
 8008642:	2f10      	cmp	r7, #16
 8008644:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8008646:	f8df 822c 	ldr.w	r8, [pc, #556]	; 8008874 <_svfprintf_r+0x8fc>
 800864a:	dd22      	ble.n	8008692 <_svfprintf_r+0x71a>
 800864c:	4623      	mov	r3, r4
 800864e:	f04f 0910 	mov.w	r9, #16
 8008652:	4644      	mov	r4, r8
 8008654:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8008658:	e003      	b.n	8008662 <_svfprintf_r+0x6ea>
 800865a:	3f10      	subs	r7, #16
 800865c:	3608      	adds	r6, #8
 800865e:	2f10      	cmp	r7, #16
 8008660:	dd15      	ble.n	800868e <_svfprintf_r+0x716>
 8008662:	3301      	adds	r3, #1
 8008664:	3510      	adds	r5, #16
 8008666:	2b07      	cmp	r3, #7
 8008668:	e886 0210 	stmia.w	r6, {r4, r9}
 800866c:	953b      	str	r5, [sp, #236]	; 0xec
 800866e:	933a      	str	r3, [sp, #232]	; 0xe8
 8008670:	ddf3      	ble.n	800865a <_svfprintf_r+0x6e2>
 8008672:	4640      	mov	r0, r8
 8008674:	4651      	mov	r1, sl
 8008676:	465a      	mov	r2, fp
 8008678:	f002 fff0 	bl	800b65c <__ssprint_r>
 800867c:	2800      	cmp	r0, #0
 800867e:	f47f ad52 	bne.w	8008126 <_svfprintf_r+0x1ae>
 8008682:	3f10      	subs	r7, #16
 8008684:	2f10      	cmp	r7, #16
 8008686:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8008688:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 800868a:	ae1f      	add	r6, sp, #124	; 0x7c
 800868c:	dce9      	bgt.n	8008662 <_svfprintf_r+0x6ea>
 800868e:	46a0      	mov	r8, r4
 8008690:	461c      	mov	r4, r3
 8008692:	3401      	adds	r4, #1
 8008694:	19ed      	adds	r5, r5, r7
 8008696:	2c07      	cmp	r4, #7
 8008698:	f8c6 8000 	str.w	r8, [r6]
 800869c:	6077      	str	r7, [r6, #4]
 800869e:	953b      	str	r5, [sp, #236]	; 0xec
 80086a0:	943a      	str	r4, [sp, #232]	; 0xe8
 80086a2:	f300 8194 	bgt.w	80089ce <_svfprintf_r+0xa56>
 80086a6:	3608      	adds	r6, #8
 80086a8:	9908      	ldr	r1, [sp, #32]
 80086aa:	05ca      	lsls	r2, r1, #23
 80086ac:	d472      	bmi.n	8008794 <_svfprintf_r+0x81c>
 80086ae:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80086b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80086b2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80086b4:	6073      	str	r3, [r6, #4]
 80086b6:	3401      	adds	r4, #1
 80086b8:	18ed      	adds	r5, r5, r3
 80086ba:	2c07      	cmp	r4, #7
 80086bc:	6032      	str	r2, [r6, #0]
 80086be:	953b      	str	r5, [sp, #236]	; 0xec
 80086c0:	943a      	str	r4, [sp, #232]	; 0xe8
 80086c2:	dc5c      	bgt.n	800877e <_svfprintf_r+0x806>
 80086c4:	3608      	adds	r6, #8
 80086c6:	9908      	ldr	r1, [sp, #32]
 80086c8:	074b      	lsls	r3, r1, #29
 80086ca:	d53e      	bpl.n	800874a <_svfprintf_r+0x7d2>
 80086cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80086ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086d0:	1ad7      	subs	r7, r2, r3
 80086d2:	2f00      	cmp	r7, #0
 80086d4:	dd39      	ble.n	800874a <_svfprintf_r+0x7d2>
 80086d6:	2f10      	cmp	r7, #16
 80086d8:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80086da:	f8df 819c 	ldr.w	r8, [pc, #412]	; 8008878 <_svfprintf_r+0x900>
 80086de:	dd22      	ble.n	8008726 <_svfprintf_r+0x7ae>
 80086e0:	4623      	mov	r3, r4
 80086e2:	f04f 0910 	mov.w	r9, #16
 80086e6:	4644      	mov	r4, r8
 80086e8:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 80086ec:	e003      	b.n	80086f6 <_svfprintf_r+0x77e>
 80086ee:	3f10      	subs	r7, #16
 80086f0:	3608      	adds	r6, #8
 80086f2:	2f10      	cmp	r7, #16
 80086f4:	dd15      	ble.n	8008722 <_svfprintf_r+0x7aa>
 80086f6:	3301      	adds	r3, #1
 80086f8:	3510      	adds	r5, #16
 80086fa:	2b07      	cmp	r3, #7
 80086fc:	e886 0210 	stmia.w	r6, {r4, r9}
 8008700:	953b      	str	r5, [sp, #236]	; 0xec
 8008702:	933a      	str	r3, [sp, #232]	; 0xe8
 8008704:	ddf3      	ble.n	80086ee <_svfprintf_r+0x776>
 8008706:	4640      	mov	r0, r8
 8008708:	4651      	mov	r1, sl
 800870a:	465a      	mov	r2, fp
 800870c:	f002 ffa6 	bl	800b65c <__ssprint_r>
 8008710:	2800      	cmp	r0, #0
 8008712:	f47f ad08 	bne.w	8008126 <_svfprintf_r+0x1ae>
 8008716:	3f10      	subs	r7, #16
 8008718:	2f10      	cmp	r7, #16
 800871a:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 800871c:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 800871e:	ae1f      	add	r6, sp, #124	; 0x7c
 8008720:	dce9      	bgt.n	80086f6 <_svfprintf_r+0x77e>
 8008722:	46a0      	mov	r8, r4
 8008724:	461c      	mov	r4, r3
 8008726:	3401      	adds	r4, #1
 8008728:	197d      	adds	r5, r7, r5
 800872a:	2c07      	cmp	r4, #7
 800872c:	f8c6 8000 	str.w	r8, [r6]
 8008730:	6077      	str	r7, [r6, #4]
 8008732:	953b      	str	r5, [sp, #236]	; 0xec
 8008734:	943a      	str	r4, [sp, #232]	; 0xe8
 8008736:	dd08      	ble.n	800874a <_svfprintf_r+0x7d2>
 8008738:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800873a:	4651      	mov	r1, sl
 800873c:	465a      	mov	r2, fp
 800873e:	f002 ff8d 	bl	800b65c <__ssprint_r>
 8008742:	2800      	cmp	r0, #0
 8008744:	f47f acef 	bne.w	8008126 <_svfprintf_r+0x1ae>
 8008748:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 800874a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800874c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800874e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008750:	428a      	cmp	r2, r1
 8008752:	bfac      	ite	ge
 8008754:	1880      	addge	r0, r0, r2
 8008756:	1840      	addlt	r0, r0, r1
 8008758:	900c      	str	r0, [sp, #48]	; 0x30
 800875a:	2d00      	cmp	r5, #0
 800875c:	f040 8129 	bne.w	80089b2 <_svfprintf_r+0xa3a>
 8008760:	2300      	movs	r3, #0
 8008762:	933a      	str	r3, [sp, #232]	; 0xe8
 8008764:	ae1f      	add	r6, sp, #124	; 0x7c
 8008766:	e435      	b.n	8007fd4 <_svfprintf_r+0x5c>
 8008768:	46a0      	mov	r8, r4
 800876a:	461c      	mov	r4, r3
 800876c:	3401      	adds	r4, #1
 800876e:	19ed      	adds	r5, r5, r7
 8008770:	2c07      	cmp	r4, #7
 8008772:	f8c6 8000 	str.w	r8, [r6]
 8008776:	6077      	str	r7, [r6, #4]
 8008778:	953b      	str	r5, [sp, #236]	; 0xec
 800877a:	943a      	str	r4, [sp, #232]	; 0xe8
 800877c:	dda2      	ble.n	80086c4 <_svfprintf_r+0x74c>
 800877e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8008780:	4651      	mov	r1, sl
 8008782:	465a      	mov	r2, fp
 8008784:	f002 ff6a 	bl	800b65c <__ssprint_r>
 8008788:	2800      	cmp	r0, #0
 800878a:	f47f accc 	bne.w	8008126 <_svfprintf_r+0x1ae>
 800878e:	ae1f      	add	r6, sp, #124	; 0x7c
 8008790:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8008792:	e798      	b.n	80086c6 <_svfprintf_r+0x74e>
 8008794:	9815      	ldr	r0, [sp, #84]	; 0x54
 8008796:	2865      	cmp	r0, #101	; 0x65
 8008798:	f340 80aa 	ble.w	80088f0 <_svfprintf_r+0x978>
 800879c:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 80087a0:	2200      	movs	r2, #0
 80087a2:	2300      	movs	r3, #0
 80087a4:	f004 fb18 	bl	800cdd8 <__aeabi_dcmpeq>
 80087a8:	2800      	cmp	r0, #0
 80087aa:	f000 8131 	beq.w	8008a10 <_svfprintf_r+0xa98>
 80087ae:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80087b0:	4b2f      	ldr	r3, [pc, #188]	; (8008870 <_svfprintf_r+0x8f8>)
 80087b2:	3401      	adds	r4, #1
 80087b4:	6033      	str	r3, [r6, #0]
 80087b6:	3501      	adds	r5, #1
 80087b8:	2301      	movs	r3, #1
 80087ba:	2c07      	cmp	r4, #7
 80087bc:	6073      	str	r3, [r6, #4]
 80087be:	953b      	str	r5, [sp, #236]	; 0xec
 80087c0:	943a      	str	r4, [sp, #232]	; 0xe8
 80087c2:	f300 82b8 	bgt.w	8008d36 <_svfprintf_r+0xdbe>
 80087c6:	3608      	adds	r6, #8
 80087c8:	9b40      	ldr	r3, [sp, #256]	; 0x100
 80087ca:	9910      	ldr	r1, [sp, #64]	; 0x40
 80087cc:	4299      	cmp	r1, r3
 80087ce:	dc03      	bgt.n	80087d8 <_svfprintf_r+0x860>
 80087d0:	9a08      	ldr	r2, [sp, #32]
 80087d2:	07d3      	lsls	r3, r2, #31
 80087d4:	f57f af77 	bpl.w	80086c6 <_svfprintf_r+0x74e>
 80087d8:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80087da:	981a      	ldr	r0, [sp, #104]	; 0x68
 80087dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80087de:	6070      	str	r0, [r6, #4]
 80087e0:	3401      	adds	r4, #1
 80087e2:	182d      	adds	r5, r5, r0
 80087e4:	2c07      	cmp	r4, #7
 80087e6:	6033      	str	r3, [r6, #0]
 80087e8:	953b      	str	r5, [sp, #236]	; 0xec
 80087ea:	943a      	str	r4, [sp, #232]	; 0xe8
 80087ec:	f300 8300 	bgt.w	8008df0 <_svfprintf_r+0xe78>
 80087f0:	3608      	adds	r6, #8
 80087f2:	9910      	ldr	r1, [sp, #64]	; 0x40
 80087f4:	1e4f      	subs	r7, r1, #1
 80087f6:	2f00      	cmp	r7, #0
 80087f8:	f77f af65 	ble.w	80086c6 <_svfprintf_r+0x74e>
 80087fc:	2f10      	cmp	r7, #16
 80087fe:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8008800:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8008874 <_svfprintf_r+0x8fc>
 8008804:	ddb2      	ble.n	800876c <_svfprintf_r+0x7f4>
 8008806:	4623      	mov	r3, r4
 8008808:	f04f 0910 	mov.w	r9, #16
 800880c:	4644      	mov	r4, r8
 800880e:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8008812:	e003      	b.n	800881c <_svfprintf_r+0x8a4>
 8008814:	3608      	adds	r6, #8
 8008816:	3f10      	subs	r7, #16
 8008818:	2f10      	cmp	r7, #16
 800881a:	dda5      	ble.n	8008768 <_svfprintf_r+0x7f0>
 800881c:	3301      	adds	r3, #1
 800881e:	3510      	adds	r5, #16
 8008820:	2b07      	cmp	r3, #7
 8008822:	e886 0210 	stmia.w	r6, {r4, r9}
 8008826:	953b      	str	r5, [sp, #236]	; 0xec
 8008828:	933a      	str	r3, [sp, #232]	; 0xe8
 800882a:	ddf3      	ble.n	8008814 <_svfprintf_r+0x89c>
 800882c:	4640      	mov	r0, r8
 800882e:	4651      	mov	r1, sl
 8008830:	465a      	mov	r2, fp
 8008832:	f002 ff13 	bl	800b65c <__ssprint_r>
 8008836:	2800      	cmp	r0, #0
 8008838:	f47f ac75 	bne.w	8008126 <_svfprintf_r+0x1ae>
 800883c:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 800883e:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8008840:	ae1f      	add	r6, sp, #124	; 0x7c
 8008842:	e7e8      	b.n	8008816 <_svfprintf_r+0x89e>
 8008844:	2a00      	cmp	r2, #0
 8008846:	f040 80be 	bne.w	80089c6 <_svfprintf_r+0xa4e>
 800884a:	9808      	ldr	r0, [sp, #32]
 800884c:	07c1      	lsls	r1, r0, #31
 800884e:	bf5c      	itt	pl
 8008850:	920d      	strpl	r2, [sp, #52]	; 0x34
 8008852:	f8cd b044 	strpl.w	fp, [sp, #68]	; 0x44
 8008856:	f57f acf3 	bpl.w	8008240 <_svfprintf_r+0x2c8>
 800885a:	991d      	ldr	r1, [sp, #116]	; 0x74
 800885c:	2330      	movs	r3, #48	; 0x30
 800885e:	f10d 02e3 	add.w	r2, sp, #227	; 0xe3
 8008862:	f88d 30e3 	strb.w	r3, [sp, #227]	; 0xe3
 8008866:	910d      	str	r1, [sp, #52]	; 0x34
 8008868:	9211      	str	r2, [sp, #68]	; 0x44
 800886a:	e4e9      	b.n	8008240 <_svfprintf_r+0x2c8>
 800886c:	0800d540 	.word	0x0800d540
 8008870:	0800d55c 	.word	0x0800d55c
 8008874:	0800d288 	.word	0x0800d288
 8008878:	0800d278 	.word	0x0800d278
 800887c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800887e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008880:	1a47      	subs	r7, r0, r1
 8008882:	2f00      	cmp	r7, #0
 8008884:	f77f aed8 	ble.w	8008638 <_svfprintf_r+0x6c0>
 8008888:	2f10      	cmp	r7, #16
 800888a:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 800888c:	f8df 86d8 	ldr.w	r8, [pc, #1752]	; 8008f68 <_svfprintf_r+0xff0>
 8008890:	dd22      	ble.n	80088d8 <_svfprintf_r+0x960>
 8008892:	4623      	mov	r3, r4
 8008894:	f04f 0910 	mov.w	r9, #16
 8008898:	4644      	mov	r4, r8
 800889a:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 800889e:	e003      	b.n	80088a8 <_svfprintf_r+0x930>
 80088a0:	3f10      	subs	r7, #16
 80088a2:	3608      	adds	r6, #8
 80088a4:	2f10      	cmp	r7, #16
 80088a6:	dd15      	ble.n	80088d4 <_svfprintf_r+0x95c>
 80088a8:	3301      	adds	r3, #1
 80088aa:	3510      	adds	r5, #16
 80088ac:	2b07      	cmp	r3, #7
 80088ae:	e886 0210 	stmia.w	r6, {r4, r9}
 80088b2:	953b      	str	r5, [sp, #236]	; 0xec
 80088b4:	933a      	str	r3, [sp, #232]	; 0xe8
 80088b6:	ddf3      	ble.n	80088a0 <_svfprintf_r+0x928>
 80088b8:	4640      	mov	r0, r8
 80088ba:	4651      	mov	r1, sl
 80088bc:	465a      	mov	r2, fp
 80088be:	f002 fecd 	bl	800b65c <__ssprint_r>
 80088c2:	2800      	cmp	r0, #0
 80088c4:	f47f ac2f 	bne.w	8008126 <_svfprintf_r+0x1ae>
 80088c8:	3f10      	subs	r7, #16
 80088ca:	2f10      	cmp	r7, #16
 80088cc:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80088ce:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 80088d0:	ae1f      	add	r6, sp, #124	; 0x7c
 80088d2:	dce9      	bgt.n	80088a8 <_svfprintf_r+0x930>
 80088d4:	46a0      	mov	r8, r4
 80088d6:	461c      	mov	r4, r3
 80088d8:	3401      	adds	r4, #1
 80088da:	19ed      	adds	r5, r5, r7
 80088dc:	2c07      	cmp	r4, #7
 80088de:	f8c6 8000 	str.w	r8, [r6]
 80088e2:	6077      	str	r7, [r6, #4]
 80088e4:	953b      	str	r5, [sp, #236]	; 0xec
 80088e6:	943a      	str	r4, [sp, #232]	; 0xe8
 80088e8:	f300 81df 	bgt.w	8008caa <_svfprintf_r+0xd32>
 80088ec:	3608      	adds	r6, #8
 80088ee:	e6a3      	b.n	8008638 <_svfprintf_r+0x6c0>
 80088f0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80088f2:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80088f4:	2a01      	cmp	r2, #1
 80088f6:	f340 81a5 	ble.w	8008c44 <_svfprintf_r+0xccc>
 80088fa:	3401      	adds	r4, #1
 80088fc:	9811      	ldr	r0, [sp, #68]	; 0x44
 80088fe:	3501      	adds	r5, #1
 8008900:	2301      	movs	r3, #1
 8008902:	2c07      	cmp	r4, #7
 8008904:	6030      	str	r0, [r6, #0]
 8008906:	6073      	str	r3, [r6, #4]
 8008908:	953b      	str	r5, [sp, #236]	; 0xec
 800890a:	943a      	str	r4, [sp, #232]	; 0xe8
 800890c:	f300 81c1 	bgt.w	8008c92 <_svfprintf_r+0xd1a>
 8008910:	3608      	adds	r6, #8
 8008912:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008914:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008916:	6071      	str	r1, [r6, #4]
 8008918:	3401      	adds	r4, #1
 800891a:	186d      	adds	r5, r5, r1
 800891c:	2c07      	cmp	r4, #7
 800891e:	6032      	str	r2, [r6, #0]
 8008920:	953b      	str	r5, [sp, #236]	; 0xec
 8008922:	943a      	str	r4, [sp, #232]	; 0xe8
 8008924:	f300 81a9 	bgt.w	8008c7a <_svfprintf_r+0xd02>
 8008928:	3608      	adds	r6, #8
 800892a:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 800892e:	2200      	movs	r2, #0
 8008930:	2300      	movs	r3, #0
 8008932:	f004 fa51 	bl	800cdd8 <__aeabi_dcmpeq>
 8008936:	2800      	cmp	r0, #0
 8008938:	f040 80f6 	bne.w	8008b28 <_svfprintf_r+0xbb0>
 800893c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800893e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8008940:	1e5a      	subs	r2, r3, #1
 8008942:	3401      	adds	r4, #1
 8008944:	1c43      	adds	r3, r0, #1
 8008946:	18ad      	adds	r5, r5, r2
 8008948:	2c07      	cmp	r4, #7
 800894a:	6033      	str	r3, [r6, #0]
 800894c:	6072      	str	r2, [r6, #4]
 800894e:	953b      	str	r5, [sp, #236]	; 0xec
 8008950:	943a      	str	r4, [sp, #232]	; 0xe8
 8008952:	dc22      	bgt.n	800899a <_svfprintf_r+0xa22>
 8008954:	3608      	adds	r6, #8
 8008956:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008958:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800895a:	3401      	adds	r4, #1
 800895c:	18ed      	adds	r5, r5, r3
 800895e:	2c07      	cmp	r4, #7
 8008960:	ab3c      	add	r3, sp, #240	; 0xf0
 8008962:	6033      	str	r3, [r6, #0]
 8008964:	6070      	str	r0, [r6, #4]
 8008966:	953b      	str	r5, [sp, #236]	; 0xec
 8008968:	943a      	str	r4, [sp, #232]	; 0xe8
 800896a:	f77f aeab 	ble.w	80086c4 <_svfprintf_r+0x74c>
 800896e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8008970:	4651      	mov	r1, sl
 8008972:	465a      	mov	r2, fp
 8008974:	f002 fe72 	bl	800b65c <__ssprint_r>
 8008978:	2800      	cmp	r0, #0
 800897a:	f47f abd4 	bne.w	8008126 <_svfprintf_r+0x1ae>
 800897e:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8008980:	ae1f      	add	r6, sp, #124	; 0x7c
 8008982:	e6a0      	b.n	80086c6 <_svfprintf_r+0x74e>
 8008984:	46a0      	mov	r8, r4
 8008986:	461c      	mov	r4, r3
 8008988:	3401      	adds	r4, #1
 800898a:	19ed      	adds	r5, r5, r7
 800898c:	2c07      	cmp	r4, #7
 800898e:	f8c6 8000 	str.w	r8, [r6]
 8008992:	6077      	str	r7, [r6, #4]
 8008994:	953b      	str	r5, [sp, #236]	; 0xec
 8008996:	943a      	str	r4, [sp, #232]	; 0xe8
 8008998:	dddc      	ble.n	8008954 <_svfprintf_r+0x9dc>
 800899a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800899c:	4651      	mov	r1, sl
 800899e:	465a      	mov	r2, fp
 80089a0:	f002 fe5c 	bl	800b65c <__ssprint_r>
 80089a4:	2800      	cmp	r0, #0
 80089a6:	f47f abbe 	bne.w	8008126 <_svfprintf_r+0x1ae>
 80089aa:	ae1f      	add	r6, sp, #124	; 0x7c
 80089ac:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80089ae:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80089b0:	e7d1      	b.n	8008956 <_svfprintf_r+0x9de>
 80089b2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80089b4:	4651      	mov	r1, sl
 80089b6:	465a      	mov	r2, fp
 80089b8:	f002 fe50 	bl	800b65c <__ssprint_r>
 80089bc:	2800      	cmp	r0, #0
 80089be:	f43f aecf 	beq.w	8008760 <_svfprintf_r+0x7e8>
 80089c2:	f7ff bbb0 	b.w	8008126 <_svfprintf_r+0x1ae>
 80089c6:	910d      	str	r1, [sp, #52]	; 0x34
 80089c8:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 80089cc:	e438      	b.n	8008240 <_svfprintf_r+0x2c8>
 80089ce:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80089d0:	4651      	mov	r1, sl
 80089d2:	465a      	mov	r2, fp
 80089d4:	f002 fe42 	bl	800b65c <__ssprint_r>
 80089d8:	2800      	cmp	r0, #0
 80089da:	f47f aba4 	bne.w	8008126 <_svfprintf_r+0x1ae>
 80089de:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80089e0:	ae1f      	add	r6, sp, #124	; 0x7c
 80089e2:	e661      	b.n	80086a8 <_svfprintf_r+0x730>
 80089e4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80089e6:	4651      	mov	r1, sl
 80089e8:	465a      	mov	r2, fp
 80089ea:	f002 fe37 	bl	800b65c <__ssprint_r>
 80089ee:	2800      	cmp	r0, #0
 80089f0:	f47f ab99 	bne.w	8008126 <_svfprintf_r+0x1ae>
 80089f4:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80089f6:	ae1f      	add	r6, sp, #124	; 0x7c
 80089f8:	e61a      	b.n	8008630 <_svfprintf_r+0x6b8>
 80089fa:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80089fc:	4651      	mov	r1, sl
 80089fe:	465a      	mov	r2, fp
 8008a00:	f002 fe2c 	bl	800b65c <__ssprint_r>
 8008a04:	2800      	cmp	r0, #0
 8008a06:	f47f ab8e 	bne.w	8008126 <_svfprintf_r+0x1ae>
 8008a0a:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8008a0c:	ae1f      	add	r6, sp, #124	; 0x7c
 8008a0e:	e600      	b.n	8008612 <_svfprintf_r+0x69a>
 8008a10:	9f40      	ldr	r7, [sp, #256]	; 0x100
 8008a12:	2f00      	cmp	r7, #0
 8008a14:	f340 819a 	ble.w	8008d4c <_svfprintf_r+0xdd4>
 8008a18:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8008a1a:	9816      	ldr	r0, [sp, #88]	; 0x58
 8008a1c:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008a1e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008a20:	4287      	cmp	r7, r0
 8008a22:	bfa8      	it	ge
 8008a24:	4607      	movge	r7, r0
 8008a26:	1889      	adds	r1, r1, r2
 8008a28:	2f00      	cmp	r7, #0
 8008a2a:	910d      	str	r1, [sp, #52]	; 0x34
 8008a2c:	dd0b      	ble.n	8008a46 <_svfprintf_r+0xace>
 8008a2e:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8008a30:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008a32:	6077      	str	r7, [r6, #4]
 8008a34:	3401      	adds	r4, #1
 8008a36:	19ed      	adds	r5, r5, r7
 8008a38:	2c07      	cmp	r4, #7
 8008a3a:	6032      	str	r2, [r6, #0]
 8008a3c:	953b      	str	r5, [sp, #236]	; 0xec
 8008a3e:	943a      	str	r4, [sp, #232]	; 0xe8
 8008a40:	f300 8304 	bgt.w	800904c <_svfprintf_r+0x10d4>
 8008a44:	3608      	adds	r6, #8
 8008a46:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008a48:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
 8008a4c:	1bdf      	subs	r7, r3, r7
 8008a4e:	2f00      	cmp	r7, #0
 8008a50:	f340 80a0 	ble.w	8008b94 <_svfprintf_r+0xc1c>
 8008a54:	2f10      	cmp	r7, #16
 8008a56:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8008a58:	f8df 850c 	ldr.w	r8, [pc, #1292]	; 8008f68 <_svfprintf_r+0xff0>
 8008a5c:	f340 815f 	ble.w	8008d1e <_svfprintf_r+0xda6>
 8008a60:	4623      	mov	r3, r4
 8008a62:	f04f 0910 	mov.w	r9, #16
 8008a66:	4644      	mov	r4, r8
 8008a68:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8008a6c:	e004      	b.n	8008a78 <_svfprintf_r+0xb00>
 8008a6e:	3608      	adds	r6, #8
 8008a70:	3f10      	subs	r7, #16
 8008a72:	2f10      	cmp	r7, #16
 8008a74:	f340 8151 	ble.w	8008d1a <_svfprintf_r+0xda2>
 8008a78:	3301      	adds	r3, #1
 8008a7a:	3510      	adds	r5, #16
 8008a7c:	2b07      	cmp	r3, #7
 8008a7e:	e886 0210 	stmia.w	r6, {r4, r9}
 8008a82:	953b      	str	r5, [sp, #236]	; 0xec
 8008a84:	933a      	str	r3, [sp, #232]	; 0xe8
 8008a86:	ddf2      	ble.n	8008a6e <_svfprintf_r+0xaf6>
 8008a88:	4640      	mov	r0, r8
 8008a8a:	4651      	mov	r1, sl
 8008a8c:	465a      	mov	r2, fp
 8008a8e:	f002 fde5 	bl	800b65c <__ssprint_r>
 8008a92:	2800      	cmp	r0, #0
 8008a94:	f47f ab47 	bne.w	8008126 <_svfprintf_r+0x1ae>
 8008a98:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8008a9a:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8008a9c:	ae1f      	add	r6, sp, #124	; 0x7c
 8008a9e:	e7e7      	b.n	8008a70 <_svfprintf_r+0xaf8>
 8008aa0:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8008aa2:	f10d 01e3 	add.w	r1, sp, #227	; 0xe3
 8008aa6:	f003 000f 	and.w	r0, r3, #15
 8008aaa:	460a      	mov	r2, r1
 8008aac:	5c28      	ldrb	r0, [r5, r0]
 8008aae:	3901      	subs	r1, #1
 8008ab0:	091b      	lsrs	r3, r3, #4
 8008ab2:	7010      	strb	r0, [r2, #0]
 8008ab4:	d1f7      	bne.n	8008aa6 <_svfprintf_r+0xb2e>
 8008ab6:	ebc2 030b 	rsb	r3, r2, fp
 8008aba:	9211      	str	r2, [sp, #68]	; 0x44
 8008abc:	930d      	str	r3, [sp, #52]	; 0x34
 8008abe:	f7ff bbbf 	b.w	8008240 <_svfprintf_r+0x2c8>
 8008ac2:	2b09      	cmp	r3, #9
 8008ac4:	bf82      	ittt	hi
 8008ac6:	f64c 45cd 	movwhi	r5, #52429	; 0xcccd
 8008aca:	f10d 01e3 	addhi.w	r1, sp, #227	; 0xe3
 8008ace:	f6cc 45cc 	movthi	r5, #52428	; 0xcccc
 8008ad2:	d809      	bhi.n	8008ae8 <_svfprintf_r+0xb70>
 8008ad4:	981d      	ldr	r0, [sp, #116]	; 0x74
 8008ad6:	3330      	adds	r3, #48	; 0x30
 8008ad8:	f10d 01e3 	add.w	r1, sp, #227	; 0xe3
 8008adc:	f88d 30e3 	strb.w	r3, [sp, #227]	; 0xe3
 8008ae0:	900d      	str	r0, [sp, #52]	; 0x34
 8008ae2:	9111      	str	r1, [sp, #68]	; 0x44
 8008ae4:	f7ff bbac 	b.w	8008240 <_svfprintf_r+0x2c8>
 8008ae8:	fba5 0203 	umull	r0, r2, r5, r3
 8008aec:	08d2      	lsrs	r2, r2, #3
 8008aee:	eb02 0782 	add.w	r7, r2, r2, lsl #2
 8008af2:	4608      	mov	r0, r1
 8008af4:	eba3 0347 	sub.w	r3, r3, r7, lsl #1
 8008af8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008afc:	7001      	strb	r1, [r0, #0]
 8008afe:	4613      	mov	r3, r2
 8008b00:	1e41      	subs	r1, r0, #1
 8008b02:	2a00      	cmp	r2, #0
 8008b04:	d1f0      	bne.n	8008ae8 <_svfprintf_r+0xb70>
 8008b06:	ebc0 030b 	rsb	r3, r0, fp
 8008b0a:	9011      	str	r0, [sp, #68]	; 0x44
 8008b0c:	930d      	str	r3, [sp, #52]	; 0x34
 8008b0e:	f7ff bb97 	b.w	8008240 <_svfprintf_r+0x2c8>
 8008b12:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8008b14:	4651      	mov	r1, sl
 8008b16:	465a      	mov	r2, fp
 8008b18:	f002 fda0 	bl	800b65c <__ssprint_r>
 8008b1c:	2800      	cmp	r0, #0
 8008b1e:	f47f ab02 	bne.w	8008126 <_svfprintf_r+0x1ae>
 8008b22:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8008b24:	ae1f      	add	r6, sp, #124	; 0x7c
 8008b26:	e563      	b.n	80085f0 <_svfprintf_r+0x678>
 8008b28:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008b2a:	1e4f      	subs	r7, r1, #1
 8008b2c:	2f00      	cmp	r7, #0
 8008b2e:	f77f af12 	ble.w	8008956 <_svfprintf_r+0x9de>
 8008b32:	2f10      	cmp	r7, #16
 8008b34:	f8df 8430 	ldr.w	r8, [pc, #1072]	; 8008f68 <_svfprintf_r+0xff0>
 8008b38:	f77f af26 	ble.w	8008988 <_svfprintf_r+0xa10>
 8008b3c:	4623      	mov	r3, r4
 8008b3e:	f04f 0910 	mov.w	r9, #16
 8008b42:	4644      	mov	r4, r8
 8008b44:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8008b48:	e004      	b.n	8008b54 <_svfprintf_r+0xbdc>
 8008b4a:	3608      	adds	r6, #8
 8008b4c:	3f10      	subs	r7, #16
 8008b4e:	2f10      	cmp	r7, #16
 8008b50:	f77f af18 	ble.w	8008984 <_svfprintf_r+0xa0c>
 8008b54:	3301      	adds	r3, #1
 8008b56:	3510      	adds	r5, #16
 8008b58:	2b07      	cmp	r3, #7
 8008b5a:	e886 0210 	stmia.w	r6, {r4, r9}
 8008b5e:	953b      	str	r5, [sp, #236]	; 0xec
 8008b60:	933a      	str	r3, [sp, #232]	; 0xe8
 8008b62:	ddf2      	ble.n	8008b4a <_svfprintf_r+0xbd2>
 8008b64:	4640      	mov	r0, r8
 8008b66:	4651      	mov	r1, sl
 8008b68:	465a      	mov	r2, fp
 8008b6a:	f002 fd77 	bl	800b65c <__ssprint_r>
 8008b6e:	2800      	cmp	r0, #0
 8008b70:	f47f aad9 	bne.w	8008126 <_svfprintf_r+0x1ae>
 8008b74:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8008b76:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8008b78:	ae1f      	add	r6, sp, #124	; 0x7c
 8008b7a:	e7e7      	b.n	8008b4c <_svfprintf_r+0xbd4>
 8008b7c:	2202      	movs	r2, #2
 8008b7e:	e405      	b.n	800838c <_svfprintf_r+0x414>
 8008b80:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8008b82:	4651      	mov	r1, sl
 8008b84:	465a      	mov	r2, fp
 8008b86:	f002 fd69 	bl	800b65c <__ssprint_r>
 8008b8a:	2800      	cmp	r0, #0
 8008b8c:	f47f aacb 	bne.w	8008126 <_svfprintf_r+0x1ae>
 8008b90:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8008b92:	ae1f      	add	r6, sp, #124	; 0x7c
 8008b94:	9b40      	ldr	r3, [sp, #256]	; 0x100
 8008b96:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008b98:	4298      	cmp	r0, r3
 8008b9a:	dc45      	bgt.n	8008c28 <_svfprintf_r+0xcb0>
 8008b9c:	9908      	ldr	r1, [sp, #32]
 8008b9e:	07c9      	lsls	r1, r1, #31
 8008ba0:	d442      	bmi.n	8008c28 <_svfprintf_r+0xcb0>
 8008ba2:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008ba4:	9816      	ldr	r0, [sp, #88]	; 0x58
 8008ba6:	180a      	adds	r2, r1, r0
 8008ba8:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008baa:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008bac:	1a8f      	subs	r7, r1, r2
 8008bae:	1ac3      	subs	r3, r0, r3
 8008bb0:	42bb      	cmp	r3, r7
 8008bb2:	bfb8      	it	lt
 8008bb4:	461f      	movlt	r7, r3
 8008bb6:	2f00      	cmp	r7, #0
 8008bb8:	dd0a      	ble.n	8008bd0 <_svfprintf_r+0xc58>
 8008bba:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8008bbc:	6032      	str	r2, [r6, #0]
 8008bbe:	3401      	adds	r4, #1
 8008bc0:	19ed      	adds	r5, r5, r7
 8008bc2:	2c07      	cmp	r4, #7
 8008bc4:	6077      	str	r7, [r6, #4]
 8008bc6:	953b      	str	r5, [sp, #236]	; 0xec
 8008bc8:	943a      	str	r4, [sp, #232]	; 0xe8
 8008bca:	f300 8256 	bgt.w	800907a <_svfprintf_r+0x1102>
 8008bce:	3608      	adds	r6, #8
 8008bd0:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
 8008bd4:	1bdf      	subs	r7, r3, r7
 8008bd6:	2f00      	cmp	r7, #0
 8008bd8:	f77f ad75 	ble.w	80086c6 <_svfprintf_r+0x74e>
 8008bdc:	2f10      	cmp	r7, #16
 8008bde:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8008be0:	f8df 8384 	ldr.w	r8, [pc, #900]	; 8008f68 <_svfprintf_r+0xff0>
 8008be4:	f77f adc2 	ble.w	800876c <_svfprintf_r+0x7f4>
 8008be8:	4623      	mov	r3, r4
 8008bea:	f04f 0910 	mov.w	r9, #16
 8008bee:	4644      	mov	r4, r8
 8008bf0:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8008bf4:	e004      	b.n	8008c00 <_svfprintf_r+0xc88>
 8008bf6:	3608      	adds	r6, #8
 8008bf8:	3f10      	subs	r7, #16
 8008bfa:	2f10      	cmp	r7, #16
 8008bfc:	f77f adb4 	ble.w	8008768 <_svfprintf_r+0x7f0>
 8008c00:	3301      	adds	r3, #1
 8008c02:	3510      	adds	r5, #16
 8008c04:	2b07      	cmp	r3, #7
 8008c06:	e886 0210 	stmia.w	r6, {r4, r9}
 8008c0a:	953b      	str	r5, [sp, #236]	; 0xec
 8008c0c:	933a      	str	r3, [sp, #232]	; 0xe8
 8008c0e:	ddf2      	ble.n	8008bf6 <_svfprintf_r+0xc7e>
 8008c10:	4640      	mov	r0, r8
 8008c12:	4651      	mov	r1, sl
 8008c14:	465a      	mov	r2, fp
 8008c16:	f002 fd21 	bl	800b65c <__ssprint_r>
 8008c1a:	2800      	cmp	r0, #0
 8008c1c:	f47f aa83 	bne.w	8008126 <_svfprintf_r+0x1ae>
 8008c20:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8008c22:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8008c24:	ae1f      	add	r6, sp, #124	; 0x7c
 8008c26:	e7e7      	b.n	8008bf8 <_svfprintf_r+0xc80>
 8008c28:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8008c2a:	981a      	ldr	r0, [sp, #104]	; 0x68
 8008c2c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008c2e:	6070      	str	r0, [r6, #4]
 8008c30:	3401      	adds	r4, #1
 8008c32:	182d      	adds	r5, r5, r0
 8008c34:	2c07      	cmp	r4, #7
 8008c36:	6032      	str	r2, [r6, #0]
 8008c38:	953b      	str	r5, [sp, #236]	; 0xec
 8008c3a:	943a      	str	r4, [sp, #232]	; 0xe8
 8008c3c:	f300 8211 	bgt.w	8009062 <_svfprintf_r+0x10ea>
 8008c40:	3608      	adds	r6, #8
 8008c42:	e7ae      	b.n	8008ba2 <_svfprintf_r+0xc2a>
 8008c44:	9b08      	ldr	r3, [sp, #32]
 8008c46:	07da      	lsls	r2, r3, #31
 8008c48:	f53f ae57 	bmi.w	80088fa <_svfprintf_r+0x982>
 8008c4c:	3401      	adds	r4, #1
 8008c4e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008c50:	3501      	adds	r5, #1
 8008c52:	2301      	movs	r3, #1
 8008c54:	2c07      	cmp	r4, #7
 8008c56:	6032      	str	r2, [r6, #0]
 8008c58:	6073      	str	r3, [r6, #4]
 8008c5a:	953b      	str	r5, [sp, #236]	; 0xec
 8008c5c:	943a      	str	r4, [sp, #232]	; 0xe8
 8008c5e:	f77f ae79 	ble.w	8008954 <_svfprintf_r+0x9dc>
 8008c62:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8008c64:	4651      	mov	r1, sl
 8008c66:	465a      	mov	r2, fp
 8008c68:	f002 fcf8 	bl	800b65c <__ssprint_r>
 8008c6c:	2800      	cmp	r0, #0
 8008c6e:	f47f aa5a 	bne.w	8008126 <_svfprintf_r+0x1ae>
 8008c72:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8008c74:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8008c76:	ae1f      	add	r6, sp, #124	; 0x7c
 8008c78:	e66d      	b.n	8008956 <_svfprintf_r+0x9de>
 8008c7a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8008c7c:	4651      	mov	r1, sl
 8008c7e:	465a      	mov	r2, fp
 8008c80:	f002 fcec 	bl	800b65c <__ssprint_r>
 8008c84:	2800      	cmp	r0, #0
 8008c86:	f47f aa4e 	bne.w	8008126 <_svfprintf_r+0x1ae>
 8008c8a:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8008c8c:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8008c8e:	ae1f      	add	r6, sp, #124	; 0x7c
 8008c90:	e64b      	b.n	800892a <_svfprintf_r+0x9b2>
 8008c92:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8008c94:	4651      	mov	r1, sl
 8008c96:	465a      	mov	r2, fp
 8008c98:	f002 fce0 	bl	800b65c <__ssprint_r>
 8008c9c:	2800      	cmp	r0, #0
 8008c9e:	f47f aa42 	bne.w	8008126 <_svfprintf_r+0x1ae>
 8008ca2:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8008ca4:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8008ca6:	ae1f      	add	r6, sp, #124	; 0x7c
 8008ca8:	e633      	b.n	8008912 <_svfprintf_r+0x99a>
 8008caa:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8008cac:	4651      	mov	r1, sl
 8008cae:	465a      	mov	r2, fp
 8008cb0:	f002 fcd4 	bl	800b65c <__ssprint_r>
 8008cb4:	2800      	cmp	r0, #0
 8008cb6:	f47f aa36 	bne.w	8008126 <_svfprintf_r+0x1ae>
 8008cba:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8008cbc:	ae1f      	add	r6, sp, #124	; 0x7c
 8008cbe:	e4bb      	b.n	8008638 <_svfprintf_r+0x6c0>
 8008cc0:	f002 fb64 	bl	800b38c <__fpclassifyd>
 8008cc4:	2800      	cmp	r0, #0
 8008cc6:	f040 809e 	bne.w	8008e06 <_svfprintf_r+0xe8e>
 8008cca:	2203      	movs	r2, #3
 8008ccc:	9012      	str	r0, [sp, #72]	; 0x48
 8008cce:	4ba3      	ldr	r3, [pc, #652]	; (8008f5c <_svfprintf_r+0xfe4>)
 8008cd0:	920a      	str	r2, [sp, #40]	; 0x28
 8008cd2:	9815      	ldr	r0, [sp, #84]	; 0x54
 8008cd4:	4aa2      	ldr	r2, [pc, #648]	; (8008f60 <_svfprintf_r+0xfe8>)
 8008cd6:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 8008cda:	2847      	cmp	r0, #71	; 0x47
 8008cdc:	bfd8      	it	le
 8008cde:	461a      	movle	r2, r3
 8008ce0:	9211      	str	r2, [sp, #68]	; 0x44
 8008ce2:	2303      	movs	r3, #3
 8008ce4:	9a08      	ldr	r2, [sp, #32]
 8008ce6:	930d      	str	r3, [sp, #52]	; 0x34
 8008ce8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008cea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008cee:	9208      	str	r2, [sp, #32]
 8008cf0:	9316      	str	r3, [sp, #88]	; 0x58
 8008cf2:	f7ff baaf 	b.w	8008254 <_svfprintf_r+0x2dc>
 8008cf6:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008cf8:	2201      	movs	r2, #1
 8008cfa:	680b      	ldr	r3, [r1, #0]
 8008cfc:	e414      	b.n	8008528 <_svfprintf_r+0x5b0>
 8008cfe:	9b08      	ldr	r3, [sp, #32]
 8008d00:	065f      	lsls	r7, r3, #25
 8008d02:	d56d      	bpl.n	8008de0 <_svfprintf_r+0xe68>
 8008d04:	980e      	ldr	r0, [sp, #56]	; 0x38
 8008d06:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008d08:	6803      	ldr	r3, [r0, #0]
 8008d0a:	3004      	adds	r0, #4
 8008d0c:	900e      	str	r0, [sp, #56]	; 0x38
 8008d0e:	8019      	strh	r1, [r3, #0]
 8008d10:	f7ff b960 	b.w	8007fd4 <_svfprintf_r+0x5c>
 8008d14:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008d16:	680b      	ldr	r3, [r1, #0]
 8008d18:	e406      	b.n	8008528 <_svfprintf_r+0x5b0>
 8008d1a:	46a0      	mov	r8, r4
 8008d1c:	461c      	mov	r4, r3
 8008d1e:	3401      	adds	r4, #1
 8008d20:	19ed      	adds	r5, r5, r7
 8008d22:	2c07      	cmp	r4, #7
 8008d24:	f8c6 8000 	str.w	r8, [r6]
 8008d28:	6077      	str	r7, [r6, #4]
 8008d2a:	953b      	str	r5, [sp, #236]	; 0xec
 8008d2c:	943a      	str	r4, [sp, #232]	; 0xe8
 8008d2e:	f73f af27 	bgt.w	8008b80 <_svfprintf_r+0xc08>
 8008d32:	3608      	adds	r6, #8
 8008d34:	e72e      	b.n	8008b94 <_svfprintf_r+0xc1c>
 8008d36:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8008d38:	4651      	mov	r1, sl
 8008d3a:	465a      	mov	r2, fp
 8008d3c:	f002 fc8e 	bl	800b65c <__ssprint_r>
 8008d40:	2800      	cmp	r0, #0
 8008d42:	f47f a9f0 	bne.w	8008126 <_svfprintf_r+0x1ae>
 8008d46:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8008d48:	ae1f      	add	r6, sp, #124	; 0x7c
 8008d4a:	e53d      	b.n	80087c8 <_svfprintf_r+0x850>
 8008d4c:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8008d4e:	4b85      	ldr	r3, [pc, #532]	; (8008f64 <_svfprintf_r+0xfec>)
 8008d50:	3401      	adds	r4, #1
 8008d52:	6033      	str	r3, [r6, #0]
 8008d54:	3501      	adds	r5, #1
 8008d56:	2301      	movs	r3, #1
 8008d58:	2c07      	cmp	r4, #7
 8008d5a:	6073      	str	r3, [r6, #4]
 8008d5c:	953b      	str	r5, [sp, #236]	; 0xec
 8008d5e:	943a      	str	r4, [sp, #232]	; 0xe8
 8008d60:	f300 8139 	bgt.w	8008fd6 <_svfprintf_r+0x105e>
 8008d64:	3608      	adds	r6, #8
 8008d66:	b92f      	cbnz	r7, 8008d74 <_svfprintf_r+0xdfc>
 8008d68:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008d6a:	b91a      	cbnz	r2, 8008d74 <_svfprintf_r+0xdfc>
 8008d6c:	9b08      	ldr	r3, [sp, #32]
 8008d6e:	07d8      	lsls	r0, r3, #31
 8008d70:	f57f aca9 	bpl.w	80086c6 <_svfprintf_r+0x74e>
 8008d74:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8008d76:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008d78:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8008d7a:	6071      	str	r1, [r6, #4]
 8008d7c:	3401      	adds	r4, #1
 8008d7e:	186d      	adds	r5, r5, r1
 8008d80:	2c07      	cmp	r4, #7
 8008d82:	6030      	str	r0, [r6, #0]
 8008d84:	953b      	str	r5, [sp, #236]	; 0xec
 8008d86:	943a      	str	r4, [sp, #232]	; 0xe8
 8008d88:	f300 81d2 	bgt.w	8009130 <_svfprintf_r+0x11b8>
 8008d8c:	3608      	adds	r6, #8
 8008d8e:	427f      	negs	r7, r7
 8008d90:	2f00      	cmp	r7, #0
 8008d92:	f340 8141 	ble.w	8009018 <_svfprintf_r+0x10a0>
 8008d96:	2f10      	cmp	r7, #16
 8008d98:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 8008f68 <_svfprintf_r+0xff0>
 8008d9c:	f340 8183 	ble.w	80090a6 <_svfprintf_r+0x112e>
 8008da0:	4623      	mov	r3, r4
 8008da2:	f04f 0910 	mov.w	r9, #16
 8008da6:	4644      	mov	r4, r8
 8008da8:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8008dac:	e004      	b.n	8008db8 <_svfprintf_r+0xe40>
 8008dae:	3608      	adds	r6, #8
 8008db0:	3f10      	subs	r7, #16
 8008db2:	2f10      	cmp	r7, #16
 8008db4:	f340 8175 	ble.w	80090a2 <_svfprintf_r+0x112a>
 8008db8:	3301      	adds	r3, #1
 8008dba:	3510      	adds	r5, #16
 8008dbc:	2b07      	cmp	r3, #7
 8008dbe:	e886 0210 	stmia.w	r6, {r4, r9}
 8008dc2:	953b      	str	r5, [sp, #236]	; 0xec
 8008dc4:	933a      	str	r3, [sp, #232]	; 0xe8
 8008dc6:	ddf2      	ble.n	8008dae <_svfprintf_r+0xe36>
 8008dc8:	4640      	mov	r0, r8
 8008dca:	4651      	mov	r1, sl
 8008dcc:	465a      	mov	r2, fp
 8008dce:	f002 fc45 	bl	800b65c <__ssprint_r>
 8008dd2:	2800      	cmp	r0, #0
 8008dd4:	f47f a9a7 	bne.w	8008126 <_svfprintf_r+0x1ae>
 8008dd8:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8008dda:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8008ddc:	ae1f      	add	r6, sp, #124	; 0x7c
 8008dde:	e7e7      	b.n	8008db0 <_svfprintf_r+0xe38>
 8008de0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008de2:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008de4:	6813      	ldr	r3, [r2, #0]
 8008de6:	3204      	adds	r2, #4
 8008de8:	920e      	str	r2, [sp, #56]	; 0x38
 8008dea:	6018      	str	r0, [r3, #0]
 8008dec:	f7ff b8f2 	b.w	8007fd4 <_svfprintf_r+0x5c>
 8008df0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8008df2:	4651      	mov	r1, sl
 8008df4:	465a      	mov	r2, fp
 8008df6:	f002 fc31 	bl	800b65c <__ssprint_r>
 8008dfa:	2800      	cmp	r0, #0
 8008dfc:	f47f a993 	bne.w	8008126 <_svfprintf_r+0x1ae>
 8008e00:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8008e02:	ae1f      	add	r6, sp, #124	; 0x7c
 8008e04:	e4f5      	b.n	80087f2 <_svfprintf_r+0x87a>
 8008e06:	1c60      	adds	r0, r4, #1
 8008e08:	f000 80f1 	beq.w	8008fee <_svfprintf_r+0x1076>
 8008e0c:	9915      	ldr	r1, [sp, #84]	; 0x54
 8008e0e:	2967      	cmp	r1, #103	; 0x67
 8008e10:	bf18      	it	ne
 8008e12:	2947      	cmpne	r1, #71	; 0x47
 8008e14:	bf14      	ite	ne
 8008e16:	2300      	movne	r3, #0
 8008e18:	2301      	moveq	r3, #1
 8008e1a:	bf18      	it	ne
 8008e1c:	930a      	strne	r3, [sp, #40]	; 0x28
 8008e1e:	d104      	bne.n	8008e2a <_svfprintf_r+0xeb2>
 8008e20:	2c00      	cmp	r4, #0
 8008e22:	f000 81ad 	beq.w	8009180 <_svfprintf_r+0x1208>
 8008e26:	2201      	movs	r2, #1
 8008e28:	920a      	str	r2, [sp, #40]	; 0x28
 8008e2a:	9808      	ldr	r0, [sp, #32]
 8008e2c:	2d00      	cmp	r5, #0
 8008e2e:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8008e32:	9008      	str	r0, [sp, #32]
 8008e34:	f2c0 8189 	blt.w	800914a <_svfprintf_r+0x11d2>
 8008e38:	2200      	movs	r2, #0
 8008e3a:	9212      	str	r2, [sp, #72]	; 0x48
 8008e3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008e3e:	9815      	ldr	r0, [sp, #84]	; 0x54
 8008e40:	f1a3 0166 	sub.w	r1, r3, #102	; 0x66
 8008e44:	424b      	negs	r3, r1
 8008e46:	eb43 0301 	adc.w	r3, r3, r1
 8008e4a:	469c      	mov	ip, r3
 8008e4c:	2846      	cmp	r0, #70	; 0x46
 8008e4e:	bf08      	it	eq
 8008e50:	f04c 0c01 	orreq.w	ip, ip, #1
 8008e54:	930d      	str	r3, [sp, #52]	; 0x34
 8008e56:	46a1      	mov	r9, r4
 8008e58:	2103      	movs	r1, #3
 8008e5a:	f1bc 0f00 	cmp.w	ip, #0
 8008e5e:	d107      	bne.n	8008e70 <_svfprintf_r+0xef8>
 8008e60:	2865      	cmp	r0, #101	; 0x65
 8008e62:	bf18      	it	ne
 8008e64:	2845      	cmpne	r0, #69	; 0x45
 8008e66:	bf0c      	ite	eq
 8008e68:	f104 0901 	addeq.w	r9, r4, #1
 8008e6c:	46a1      	movne	r9, r4
 8008e6e:	2102      	movs	r1, #2
 8008e70:	e88d 0202 	stmia.w	sp, {r1, r9}
 8008e74:	a940      	add	r1, sp, #256	; 0x100
 8008e76:	9102      	str	r1, [sp, #8]
 8008e78:	a941      	add	r1, sp, #260	; 0x104
 8008e7a:	9103      	str	r1, [sp, #12]
 8008e7c:	4642      	mov	r2, r8
 8008e7e:	a942      	add	r1, sp, #264	; 0x108
 8008e80:	462b      	mov	r3, r5
 8008e82:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8008e84:	9104      	str	r1, [sp, #16]
 8008e86:	f8cd c018 	str.w	ip, [sp, #24]
 8008e8a:	f000 fa6d 	bl	8009368 <_dtoa_r>
 8008e8e:	9915      	ldr	r1, [sp, #84]	; 0x54
 8008e90:	9011      	str	r0, [sp, #68]	; 0x44
 8008e92:	2947      	cmp	r1, #71	; 0x47
 8008e94:	bf18      	it	ne
 8008e96:	2967      	cmpne	r1, #103	; 0x67
 8008e98:	f8dd c018 	ldr.w	ip, [sp, #24]
 8008e9c:	d104      	bne.n	8008ea8 <_svfprintf_r+0xf30>
 8008e9e:	9a08      	ldr	r2, [sp, #32]
 8008ea0:	07d2      	lsls	r2, r2, #31
 8008ea2:	bf58      	it	pl
 8008ea4:	9f42      	ldrpl	r7, [sp, #264]	; 0x108
 8008ea6:	d515      	bpl.n	8008ed4 <_svfprintf_r+0xf5c>
 8008ea8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008eaa:	eb03 0709 	add.w	r7, r3, r9
 8008eae:	f1bc 0f00 	cmp.w	ip, #0
 8008eb2:	d005      	beq.n	8008ec0 <_svfprintf_r+0xf48>
 8008eb4:	781b      	ldrb	r3, [r3, #0]
 8008eb6:	2b30      	cmp	r3, #48	; 0x30
 8008eb8:	f000 8165 	beq.w	8009186 <_svfprintf_r+0x120e>
 8008ebc:	9b40      	ldr	r3, [sp, #256]	; 0x100
 8008ebe:	18ff      	adds	r7, r7, r3
 8008ec0:	4640      	mov	r0, r8
 8008ec2:	4629      	mov	r1, r5
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	f003 ff86 	bl	800cdd8 <__aeabi_dcmpeq>
 8008ecc:	2800      	cmp	r0, #0
 8008ece:	f000 8117 	beq.w	8009100 <_svfprintf_r+0x1188>
 8008ed2:	9742      	str	r7, [sp, #264]	; 0x108
 8008ed4:	9811      	ldr	r0, [sp, #68]	; 0x44
 8008ed6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008ed8:	1a3f      	subs	r7, r7, r0
 8008eda:	9710      	str	r7, [sp, #64]	; 0x40
 8008edc:	2900      	cmp	r1, #0
 8008ede:	f000 80f9 	beq.w	80090d4 <_svfprintf_r+0x115c>
 8008ee2:	9940      	ldr	r1, [sp, #256]	; 0x100
 8008ee4:	1ccb      	adds	r3, r1, #3
 8008ee6:	db02      	blt.n	8008eee <_svfprintf_r+0xf76>
 8008ee8:	428c      	cmp	r4, r1
 8008eea:	f280 80fa 	bge.w	80090e2 <_svfprintf_r+0x116a>
 8008eee:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008ef0:	3a02      	subs	r2, #2
 8008ef2:	9215      	str	r2, [sp, #84]	; 0x54
 8008ef4:	3901      	subs	r1, #1
 8008ef6:	9815      	ldr	r0, [sp, #84]	; 0x54
 8008ef8:	9140      	str	r1, [sp, #256]	; 0x100
 8008efa:	2900      	cmp	r1, #0
 8008efc:	f88d 00f0 	strb.w	r0, [sp, #240]	; 0xf0
 8008f00:	f2c0 815d 	blt.w	80091be <_svfprintf_r+0x1246>
 8008f04:	232b      	movs	r3, #43	; 0x2b
 8008f06:	f88d 30f1 	strb.w	r3, [sp, #241]	; 0xf1
 8008f0a:	2909      	cmp	r1, #9
 8008f0c:	f340 8122 	ble.w	8009154 <_svfprintf_r+0x11dc>
 8008f10:	f10d 07ff 	add.w	r7, sp, #255	; 0xff
 8008f14:	f246 6467 	movw	r4, #26215	; 0x6667
 8008f18:	4638      	mov	r0, r7
 8008f1a:	f2c6 6466 	movt	r4, #26214	; 0x6666
 8008f1e:	fb84 3201 	smull	r3, r2, r4, r1
 8008f22:	17cb      	asrs	r3, r1, #31
 8008f24:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 8008f28:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8008f2c:	eba1 0242 	sub.w	r2, r1, r2, lsl #1
 8008f30:	3230      	adds	r2, #48	; 0x30
 8008f32:	2b09      	cmp	r3, #9
 8008f34:	4605      	mov	r5, r0
 8008f36:	4619      	mov	r1, r3
 8008f38:	f800 2d01 	strb.w	r2, [r0, #-1]!
 8008f3c:	dcef      	bgt.n	8008f1e <_svfprintf_r+0xfa6>
 8008f3e:	3130      	adds	r1, #48	; 0x30
 8008f40:	1eaa      	subs	r2, r5, #2
 8008f42:	b2c9      	uxtb	r1, r1
 8008f44:	42ba      	cmp	r2, r7
 8008f46:	f805 1c02 	strb.w	r1, [r5, #-2]
 8008f4a:	bf28      	it	cs
 8008f4c:	f10d 01f2 	addcs.w	r1, sp, #242	; 0xf2
 8008f50:	d213      	bcs.n	8008f7a <_svfprintf_r+0x1002>
 8008f52:	f10d 03f2 	add.w	r3, sp, #242	; 0xf2
 8008f56:	f10d 00fe 	add.w	r0, sp, #254	; 0xfe
 8008f5a:	e009      	b.n	8008f70 <_svfprintf_r+0xff8>
 8008f5c:	0800d524 	.word	0x0800d524
 8008f60:	0800d528 	.word	0x0800d528
 8008f64:	0800d55c 	.word	0x0800d55c
 8008f68:	0800d288 	.word	0x0800d288
 8008f6c:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8008f70:	f803 1b01 	strb.w	r1, [r3], #1
 8008f74:	4282      	cmp	r2, r0
 8008f76:	4619      	mov	r1, r3
 8008f78:	d1f8      	bne.n	8008f6c <_svfprintf_r+0xff4>
 8008f7a:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008f7c:	ab3c      	add	r3, sp, #240	; 0xf0
 8008f7e:	1acb      	subs	r3, r1, r3
 8008f80:	931b      	str	r3, [sp, #108]	; 0x6c
 8008f82:	2801      	cmp	r0, #1
 8008f84:	4403      	add	r3, r0
 8008f86:	930d      	str	r3, [sp, #52]	; 0x34
 8008f88:	f340 8125 	ble.w	80091d6 <_svfprintf_r+0x125e>
 8008f8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f8e:	3301      	adds	r3, #1
 8008f90:	ea23 70e3 	bic.w	r0, r3, r3, asr #31
 8008f94:	2100      	movs	r1, #0
 8008f96:	930d      	str	r3, [sp, #52]	; 0x34
 8008f98:	900a      	str	r0, [sp, #40]	; 0x28
 8008f9a:	9116      	str	r1, [sp, #88]	; 0x58
 8008f9c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008f9e:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	f43f a956 	beq.w	8008254 <_svfprintf_r+0x2dc>
 8008fa8:	232d      	movs	r3, #45	; 0x2d
 8008faa:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
 8008fae:	2300      	movs	r3, #0
 8008fb0:	9312      	str	r3, [sp, #72]	; 0x48
 8008fb2:	f7ff b950 	b.w	8008256 <_svfprintf_r+0x2de>
 8008fb6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8008fb8:	2140      	movs	r1, #64	; 0x40
 8008fba:	f001 fa59 	bl	800a470 <_malloc_r>
 8008fbe:	f8ca 0000 	str.w	r0, [sl]
 8008fc2:	f8ca 0010 	str.w	r0, [sl, #16]
 8008fc6:	2800      	cmp	r0, #0
 8008fc8:	f000 812b 	beq.w	8009222 <_svfprintf_r+0x12aa>
 8008fcc:	2340      	movs	r3, #64	; 0x40
 8008fce:	f8ca 3014 	str.w	r3, [sl, #20]
 8008fd2:	f7fe bfec 	b.w	8007fae <_svfprintf_r+0x36>
 8008fd6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8008fd8:	4651      	mov	r1, sl
 8008fda:	465a      	mov	r2, fp
 8008fdc:	f002 fb3e 	bl	800b65c <__ssprint_r>
 8008fe0:	2800      	cmp	r0, #0
 8008fe2:	f47f a8a0 	bne.w	8008126 <_svfprintf_r+0x1ae>
 8008fe6:	9f40      	ldr	r7, [sp, #256]	; 0x100
 8008fe8:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8008fea:	ae1f      	add	r6, sp, #124	; 0x7c
 8008fec:	e6bb      	b.n	8008d66 <_svfprintf_r+0xdee>
 8008fee:	9815      	ldr	r0, [sp, #84]	; 0x54
 8008ff0:	2847      	cmp	r0, #71	; 0x47
 8008ff2:	bf18      	it	ne
 8008ff4:	2867      	cmpne	r0, #103	; 0x67
 8008ff6:	bf14      	ite	ne
 8008ff8:	2000      	movne	r0, #0
 8008ffa:	2001      	moveq	r0, #1
 8008ffc:	900a      	str	r0, [sp, #40]	; 0x28
 8008ffe:	2406      	movs	r4, #6
 8009000:	e713      	b.n	8008e2a <_svfprintf_r+0xeb2>
 8009002:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8009004:	4651      	mov	r1, sl
 8009006:	465a      	mov	r2, fp
 8009008:	f002 fb28 	bl	800b65c <__ssprint_r>
 800900c:	2800      	cmp	r0, #0
 800900e:	f47f a88a 	bne.w	8008126 <_svfprintf_r+0x1ae>
 8009012:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8009014:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8009016:	ae1f      	add	r6, sp, #124	; 0x7c
 8009018:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800901a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800901c:	6072      	str	r2, [r6, #4]
 800901e:	3401      	adds	r4, #1
 8009020:	18ad      	adds	r5, r5, r2
 8009022:	2c07      	cmp	r4, #7
 8009024:	6033      	str	r3, [r6, #0]
 8009026:	953b      	str	r5, [sp, #236]	; 0xec
 8009028:	943a      	str	r4, [sp, #232]	; 0xe8
 800902a:	f77f ab4b 	ble.w	80086c4 <_svfprintf_r+0x74c>
 800902e:	f7ff bba6 	b.w	800877e <_svfprintf_r+0x806>
 8009032:	f002 fae3 	bl	800b5fc <strlen>
 8009036:	900d      	str	r0, [sp, #52]	; 0x34
 8009038:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800903c:	9512      	str	r5, [sp, #72]	; 0x48
 800903e:	900a      	str	r0, [sp, #40]	; 0x28
 8009040:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 8009044:	970e      	str	r7, [sp, #56]	; 0x38
 8009046:	9516      	str	r5, [sp, #88]	; 0x58
 8009048:	f7ff b904 	b.w	8008254 <_svfprintf_r+0x2dc>
 800904c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800904e:	4651      	mov	r1, sl
 8009050:	465a      	mov	r2, fp
 8009052:	f002 fb03 	bl	800b65c <__ssprint_r>
 8009056:	2800      	cmp	r0, #0
 8009058:	f47f a865 	bne.w	8008126 <_svfprintf_r+0x1ae>
 800905c:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 800905e:	ae1f      	add	r6, sp, #124	; 0x7c
 8009060:	e4f1      	b.n	8008a46 <_svfprintf_r+0xace>
 8009062:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8009064:	4651      	mov	r1, sl
 8009066:	465a      	mov	r2, fp
 8009068:	f002 faf8 	bl	800b65c <__ssprint_r>
 800906c:	2800      	cmp	r0, #0
 800906e:	f47f a85a 	bne.w	8008126 <_svfprintf_r+0x1ae>
 8009072:	9b40      	ldr	r3, [sp, #256]	; 0x100
 8009074:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8009076:	ae1f      	add	r6, sp, #124	; 0x7c
 8009078:	e593      	b.n	8008ba2 <_svfprintf_r+0xc2a>
 800907a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800907c:	4651      	mov	r1, sl
 800907e:	465a      	mov	r2, fp
 8009080:	f002 faec 	bl	800b65c <__ssprint_r>
 8009084:	2800      	cmp	r0, #0
 8009086:	f47f a84e 	bne.w	8008126 <_svfprintf_r+0x1ae>
 800908a:	9b40      	ldr	r3, [sp, #256]	; 0x100
 800908c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800908e:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8009090:	1acb      	subs	r3, r1, r3
 8009092:	ae1f      	add	r6, sp, #124	; 0x7c
 8009094:	e59c      	b.n	8008bd0 <_svfprintf_r+0xc58>
 8009096:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009098:	ebc3 030b 	rsb	r3, r3, fp
 800909c:	930d      	str	r3, [sp, #52]	; 0x34
 800909e:	f7ff b8cf 	b.w	8008240 <_svfprintf_r+0x2c8>
 80090a2:	46a0      	mov	r8, r4
 80090a4:	461c      	mov	r4, r3
 80090a6:	3401      	adds	r4, #1
 80090a8:	19ed      	adds	r5, r5, r7
 80090aa:	2c07      	cmp	r4, #7
 80090ac:	f8c6 8000 	str.w	r8, [r6]
 80090b0:	6077      	str	r7, [r6, #4]
 80090b2:	953b      	str	r5, [sp, #236]	; 0xec
 80090b4:	943a      	str	r4, [sp, #232]	; 0xe8
 80090b6:	dca4      	bgt.n	8009002 <_svfprintf_r+0x108a>
 80090b8:	3608      	adds	r6, #8
 80090ba:	e7ad      	b.n	8009018 <_svfprintf_r+0x10a0>
 80090bc:	2c06      	cmp	r4, #6
 80090be:	bf28      	it	cs
 80090c0:	2406      	movcs	r4, #6
 80090c2:	495f      	ldr	r1, [pc, #380]	; (8009240 <_svfprintf_r+0x12c8>)
 80090c4:	940d      	str	r4, [sp, #52]	; 0x34
 80090c6:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
 80090ca:	900a      	str	r0, [sp, #40]	; 0x28
 80090cc:	970e      	str	r7, [sp, #56]	; 0x38
 80090ce:	9111      	str	r1, [sp, #68]	; 0x44
 80090d0:	f7ff ba01 	b.w	80084d6 <_svfprintf_r+0x55e>
 80090d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80090d6:	2b65      	cmp	r3, #101	; 0x65
 80090d8:	dd6f      	ble.n	80091ba <_svfprintf_r+0x1242>
 80090da:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80090dc:	9940      	ldr	r1, [sp, #256]	; 0x100
 80090de:	2a00      	cmp	r2, #0
 80090e0:	d15e      	bne.n	80091a0 <_svfprintf_r+0x1228>
 80090e2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80090e4:	428a      	cmp	r2, r1
 80090e6:	dc3d      	bgt.n	8009164 <_svfprintf_r+0x11ec>
 80090e8:	9b08      	ldr	r3, [sp, #32]
 80090ea:	07da      	lsls	r2, r3, #31
 80090ec:	d56c      	bpl.n	80091c8 <_svfprintf_r+0x1250>
 80090ee:	1c4b      	adds	r3, r1, #1
 80090f0:	ea23 70e3 	bic.w	r0, r3, r3, asr #31
 80090f4:	2267      	movs	r2, #103	; 0x67
 80090f6:	930d      	str	r3, [sp, #52]	; 0x34
 80090f8:	900a      	str	r0, [sp, #40]	; 0x28
 80090fa:	9215      	str	r2, [sp, #84]	; 0x54
 80090fc:	9116      	str	r1, [sp, #88]	; 0x58
 80090fe:	e74d      	b.n	8008f9c <_svfprintf_r+0x1024>
 8009100:	9b42      	ldr	r3, [sp, #264]	; 0x108
 8009102:	429f      	cmp	r7, r3
 8009104:	bf98      	it	ls
 8009106:	461f      	movls	r7, r3
 8009108:	f67f aee4 	bls.w	8008ed4 <_svfprintf_r+0xf5c>
 800910c:	2230      	movs	r2, #48	; 0x30
 800910e:	f803 2b01 	strb.w	r2, [r3], #1
 8009112:	42bb      	cmp	r3, r7
 8009114:	9342      	str	r3, [sp, #264]	; 0x108
 8009116:	d1fa      	bne.n	800910e <_svfprintf_r+0x1196>
 8009118:	e6dc      	b.n	8008ed4 <_svfprintf_r+0xf5c>
 800911a:	ea24 72e4 	bic.w	r2, r4, r4, asr #31
 800911e:	9012      	str	r0, [sp, #72]	; 0x48
 8009120:	920a      	str	r2, [sp, #40]	; 0x28
 8009122:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 8009126:	970e      	str	r7, [sp, #56]	; 0x38
 8009128:	940d      	str	r4, [sp, #52]	; 0x34
 800912a:	9016      	str	r0, [sp, #88]	; 0x58
 800912c:	f7ff b892 	b.w	8008254 <_svfprintf_r+0x2dc>
 8009130:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8009132:	4651      	mov	r1, sl
 8009134:	465a      	mov	r2, fp
 8009136:	f002 fa91 	bl	800b65c <__ssprint_r>
 800913a:	2800      	cmp	r0, #0
 800913c:	f47e aff3 	bne.w	8008126 <_svfprintf_r+0x1ae>
 8009140:	9f40      	ldr	r7, [sp, #256]	; 0x100
 8009142:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8009144:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8009146:	ae1f      	add	r6, sp, #124	; 0x7c
 8009148:	e621      	b.n	8008d8e <_svfprintf_r+0xe16>
 800914a:	212d      	movs	r1, #45	; 0x2d
 800914c:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8009150:	9112      	str	r1, [sp, #72]	; 0x48
 8009152:	e673      	b.n	8008e3c <_svfprintf_r+0xec4>
 8009154:	3130      	adds	r1, #48	; 0x30
 8009156:	2330      	movs	r3, #48	; 0x30
 8009158:	f88d 10f3 	strb.w	r1, [sp, #243]	; 0xf3
 800915c:	f88d 30f2 	strb.w	r3, [sp, #242]	; 0xf2
 8009160:	a93d      	add	r1, sp, #244	; 0xf4
 8009162:	e70a      	b.n	8008f7a <_svfprintf_r+0x1002>
 8009164:	2900      	cmp	r1, #0
 8009166:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009168:	bfd4      	ite	le
 800916a:	f1c1 0302 	rsble	r3, r1, #2
 800916e:	2301      	movgt	r3, #1
 8009170:	181b      	adds	r3, r3, r0
 8009172:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8009176:	930d      	str	r3, [sp, #52]	; 0x34
 8009178:	2367      	movs	r3, #103	; 0x67
 800917a:	920a      	str	r2, [sp, #40]	; 0x28
 800917c:	9315      	str	r3, [sp, #84]	; 0x54
 800917e:	e7bd      	b.n	80090fc <_svfprintf_r+0x1184>
 8009180:	2401      	movs	r4, #1
 8009182:	940a      	str	r4, [sp, #40]	; 0x28
 8009184:	e651      	b.n	8008e2a <_svfprintf_r+0xeb2>
 8009186:	4640      	mov	r0, r8
 8009188:	4629      	mov	r1, r5
 800918a:	2200      	movs	r2, #0
 800918c:	2300      	movs	r3, #0
 800918e:	f003 fe23 	bl	800cdd8 <__aeabi_dcmpeq>
 8009192:	2800      	cmp	r0, #0
 8009194:	f47f ae92 	bne.w	8008ebc <_svfprintf_r+0xf44>
 8009198:	f1c9 0301 	rsb	r3, r9, #1
 800919c:	9340      	str	r3, [sp, #256]	; 0x100
 800919e:	e68e      	b.n	8008ebe <_svfprintf_r+0xf46>
 80091a0:	2900      	cmp	r1, #0
 80091a2:	dd38      	ble.n	8009216 <_svfprintf_r+0x129e>
 80091a4:	bb74      	cbnz	r4, 8009204 <_svfprintf_r+0x128c>
 80091a6:	9b08      	ldr	r3, [sp, #32]
 80091a8:	07dd      	lsls	r5, r3, #31
 80091aa:	d42b      	bmi.n	8009204 <_svfprintf_r+0x128c>
 80091ac:	ea21 70e1 	bic.w	r0, r1, r1, asr #31
 80091b0:	2266      	movs	r2, #102	; 0x66
 80091b2:	900a      	str	r0, [sp, #40]	; 0x28
 80091b4:	910d      	str	r1, [sp, #52]	; 0x34
 80091b6:	9215      	str	r2, [sp, #84]	; 0x54
 80091b8:	e7a0      	b.n	80090fc <_svfprintf_r+0x1184>
 80091ba:	9940      	ldr	r1, [sp, #256]	; 0x100
 80091bc:	e69a      	b.n	8008ef4 <_svfprintf_r+0xf7c>
 80091be:	232d      	movs	r3, #45	; 0x2d
 80091c0:	4249      	negs	r1, r1
 80091c2:	f88d 30f1 	strb.w	r3, [sp, #241]	; 0xf1
 80091c6:	e6a0      	b.n	8008f0a <_svfprintf_r+0xf92>
 80091c8:	ea21 70e1 	bic.w	r0, r1, r1, asr #31
 80091cc:	2267      	movs	r2, #103	; 0x67
 80091ce:	900a      	str	r0, [sp, #40]	; 0x28
 80091d0:	910d      	str	r1, [sp, #52]	; 0x34
 80091d2:	9215      	str	r2, [sp, #84]	; 0x54
 80091d4:	e792      	b.n	80090fc <_svfprintf_r+0x1184>
 80091d6:	9908      	ldr	r1, [sp, #32]
 80091d8:	f011 0301 	ands.w	r3, r1, #1
 80091dc:	f47f aed6 	bne.w	8008f8c <_svfprintf_r+0x1014>
 80091e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80091e2:	9316      	str	r3, [sp, #88]	; 0x58
 80091e4:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 80091e8:	920a      	str	r2, [sp, #40]	; 0x28
 80091ea:	e6d7      	b.n	8008f9c <_svfprintf_r+0x1024>
 80091ec:	990e      	ldr	r1, [sp, #56]	; 0x38
 80091ee:	680c      	ldr	r4, [r1, #0]
 80091f0:	1d0b      	adds	r3, r1, #4
 80091f2:	2c00      	cmp	r4, #0
 80091f4:	bfbc      	itt	lt
 80091f6:	930e      	strlt	r3, [sp, #56]	; 0x38
 80091f8:	f04f 34ff 	movlt.w	r4, #4294967295	; 0xffffffff
 80091fc:	f6bf a985 	bge.w	800850a <_svfprintf_r+0x592>
 8009200:	f7fe bf18 	b.w	8008034 <_svfprintf_r+0xbc>
 8009204:	3401      	adds	r4, #1
 8009206:	190c      	adds	r4, r1, r4
 8009208:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
 800920c:	2066      	movs	r0, #102	; 0x66
 800920e:	940d      	str	r4, [sp, #52]	; 0x34
 8009210:	930a      	str	r3, [sp, #40]	; 0x28
 8009212:	9015      	str	r0, [sp, #84]	; 0x54
 8009214:	e772      	b.n	80090fc <_svfprintf_r+0x1184>
 8009216:	b914      	cbnz	r4, 800921e <_svfprintf_r+0x12a6>
 8009218:	9a08      	ldr	r2, [sp, #32]
 800921a:	07d0      	lsls	r0, r2, #31
 800921c:	d509      	bpl.n	8009232 <_svfprintf_r+0x12ba>
 800921e:	3402      	adds	r4, #2
 8009220:	e7f2      	b.n	8009208 <_svfprintf_r+0x1290>
 8009222:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009224:	230c      	movs	r3, #12
 8009226:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800922a:	600b      	str	r3, [r1, #0]
 800922c:	920c      	str	r2, [sp, #48]	; 0x30
 800922e:	f7fe bf83 	b.w	8008138 <_svfprintf_r+0x1c0>
 8009232:	2001      	movs	r0, #1
 8009234:	2266      	movs	r2, #102	; 0x66
 8009236:	900a      	str	r0, [sp, #40]	; 0x28
 8009238:	9215      	str	r2, [sp, #84]	; 0x54
 800923a:	900d      	str	r0, [sp, #52]	; 0x34
 800923c:	e75e      	b.n	80090fc <_svfprintf_r+0x1184>
 800923e:	bf00      	nop
 8009240:	0800d554 	.word	0x0800d554
 8009244:	00000000 	.word	0x00000000

08009248 <quorem>:
 8009248:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800924c:	6903      	ldr	r3, [r0, #16]
 800924e:	690d      	ldr	r5, [r1, #16]
 8009250:	429d      	cmp	r5, r3
 8009252:	4681      	mov	r9, r0
 8009254:	f300 8084 	bgt.w	8009360 <quorem+0x118>
 8009258:	1ceb      	adds	r3, r5, #3
 800925a:	009b      	lsls	r3, r3, #2
 800925c:	18cf      	adds	r7, r1, r3
 800925e:	18c3      	adds	r3, r0, r3
 8009260:	687e      	ldr	r6, [r7, #4]
 8009262:	685b      	ldr	r3, [r3, #4]
 8009264:	3601      	adds	r6, #1
 8009266:	fbb3 f6f6 	udiv	r6, r3, r6
 800926a:	f101 0414 	add.w	r4, r1, #20
 800926e:	3d01      	subs	r5, #1
 8009270:	3704      	adds	r7, #4
 8009272:	f100 0814 	add.w	r8, r0, #20
 8009276:	2e00      	cmp	r6, #0
 8009278:	d03c      	beq.n	80092f4 <quorem+0xac>
 800927a:	f04f 0e00 	mov.w	lr, #0
 800927e:	4642      	mov	r2, r8
 8009280:	4623      	mov	r3, r4
 8009282:	46f4      	mov	ip, lr
 8009284:	f853 bb04 	ldr.w	fp, [r3], #4
 8009288:	6810      	ldr	r0, [r2, #0]
 800928a:	fa1f fa8b 	uxth.w	sl, fp
 800928e:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
 8009292:	fb06 ea0a 	mla	sl, r6, sl, lr
 8009296:	fb06 fe0b 	mul.w	lr, r6, fp
 800929a:	eb0e 4e1a 	add.w	lr, lr, sl, lsr #16
 800929e:	fa1c fc80 	uxtah	ip, ip, r0
 80092a2:	fa1f fb8e 	uxth.w	fp, lr
 80092a6:	fa1f fa8a 	uxth.w	sl, sl
 80092aa:	ebca 0c0c 	rsb	ip, sl, ip
 80092ae:	ebcb 4010 	rsb	r0, fp, r0, lsr #16
 80092b2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80092b6:	fa1f fc8c 	uxth.w	ip, ip
 80092ba:	ea4c 4c00 	orr.w	ip, ip, r0, lsl #16
 80092be:	429f      	cmp	r7, r3
 80092c0:	f842 cb04 	str.w	ip, [r2], #4
 80092c4:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 80092c8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80092cc:	d2da      	bcs.n	8009284 <quorem+0x3c>
 80092ce:	1d2a      	adds	r2, r5, #4
 80092d0:	eb09 0382 	add.w	r3, r9, r2, lsl #2
 80092d4:	6858      	ldr	r0, [r3, #4]
 80092d6:	b968      	cbnz	r0, 80092f4 <quorem+0xac>
 80092d8:	4598      	cmp	r8, r3
 80092da:	d209      	bcs.n	80092f0 <quorem+0xa8>
 80092dc:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 80092e0:	b112      	cbz	r2, 80092e8 <quorem+0xa0>
 80092e2:	e005      	b.n	80092f0 <quorem+0xa8>
 80092e4:	681a      	ldr	r2, [r3, #0]
 80092e6:	b91a      	cbnz	r2, 80092f0 <quorem+0xa8>
 80092e8:	3b04      	subs	r3, #4
 80092ea:	3d01      	subs	r5, #1
 80092ec:	4598      	cmp	r8, r3
 80092ee:	d3f9      	bcc.n	80092e4 <quorem+0x9c>
 80092f0:	f8c9 5010 	str.w	r5, [r9, #16]
 80092f4:	4648      	mov	r0, r9
 80092f6:	f001 fe4f 	bl	800af98 <__mcmp>
 80092fa:	2800      	cmp	r0, #0
 80092fc:	db2d      	blt.n	800935a <quorem+0x112>
 80092fe:	3601      	adds	r6, #1
 8009300:	4643      	mov	r3, r8
 8009302:	f04f 0c00 	mov.w	ip, #0
 8009306:	f854 2b04 	ldr.w	r2, [r4], #4
 800930a:	6818      	ldr	r0, [r3, #0]
 800930c:	b291      	uxth	r1, r2
 800930e:	fa1f fa80 	uxth.w	sl, r0
 8009312:	0c12      	lsrs	r2, r2, #16
 8009314:	ebc1 010a 	rsb	r1, r1, sl
 8009318:	4461      	add	r1, ip
 800931a:	ebc2 4210 	rsb	r2, r2, r0, lsr #16
 800931e:	eb02 4221 	add.w	r2, r2, r1, asr #16
 8009322:	b289      	uxth	r1, r1
 8009324:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009328:	42a7      	cmp	r7, r4
 800932a:	f843 1b04 	str.w	r1, [r3], #4
 800932e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009332:	d2e8      	bcs.n	8009306 <quorem+0xbe>
 8009334:	1d2a      	adds	r2, r5, #4
 8009336:	eb09 0382 	add.w	r3, r9, r2, lsl #2
 800933a:	6859      	ldr	r1, [r3, #4]
 800933c:	b969      	cbnz	r1, 800935a <quorem+0x112>
 800933e:	4598      	cmp	r8, r3
 8009340:	d209      	bcs.n	8009356 <quorem+0x10e>
 8009342:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 8009346:	b112      	cbz	r2, 800934e <quorem+0x106>
 8009348:	e005      	b.n	8009356 <quorem+0x10e>
 800934a:	681a      	ldr	r2, [r3, #0]
 800934c:	b91a      	cbnz	r2, 8009356 <quorem+0x10e>
 800934e:	3b04      	subs	r3, #4
 8009350:	3d01      	subs	r5, #1
 8009352:	4598      	cmp	r8, r3
 8009354:	d3f9      	bcc.n	800934a <quorem+0x102>
 8009356:	f8c9 5010 	str.w	r5, [r9, #16]
 800935a:	4630      	mov	r0, r6
 800935c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009360:	2000      	movs	r0, #0
 8009362:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009366:	bf00      	nop

08009368 <_dtoa_r>:
 8009368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800936c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800936e:	b09d      	sub	sp, #116	; 0x74
 8009370:	4607      	mov	r7, r0
 8009372:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8009374:	4692      	mov	sl, r2
 8009376:	469b      	mov	fp, r3
 8009378:	b141      	cbz	r1, 800938c <_dtoa_r+0x24>
 800937a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800937c:	2201      	movs	r2, #1
 800937e:	409a      	lsls	r2, r3
 8009380:	604b      	str	r3, [r1, #4]
 8009382:	608a      	str	r2, [r1, #8]
 8009384:	f001 fbd4 	bl	800ab30 <_Bfree>
 8009388:	2300      	movs	r3, #0
 800938a:	643b      	str	r3, [r7, #64]	; 0x40
 800938c:	f1bb 0500 	subs.w	r5, fp, #0
 8009390:	f2c0 80df 	blt.w	8009552 <_dtoa_r+0x1ea>
 8009394:	2300      	movs	r3, #0
 8009396:	6023      	str	r3, [r4, #0]
 8009398:	2300      	movs	r3, #0
 800939a:	461a      	mov	r2, r3
 800939c:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 80093a0:	f6c7 72f0 	movt	r2, #32752	; 0x7ff0
 80093a4:	402b      	ands	r3, r5
 80093a6:	4293      	cmp	r3, r2
 80093a8:	f000 80be 	beq.w	8009528 <_dtoa_r+0x1c0>
 80093ac:	4650      	mov	r0, sl
 80093ae:	4659      	mov	r1, fp
 80093b0:	2200      	movs	r2, #0
 80093b2:	2300      	movs	r3, #0
 80093b4:	46d0      	mov	r8, sl
 80093b6:	46d9      	mov	r9, fp
 80093b8:	2401      	movs	r4, #1
 80093ba:	f003 fd0d 	bl	800cdd8 <__aeabi_dcmpeq>
 80093be:	b978      	cbnz	r0, 80093e0 <_dtoa_r+0x78>
 80093c0:	f014 0fff 	tst.w	r4, #255	; 0xff
 80093c4:	d110      	bne.n	80093e8 <_dtoa_r+0x80>
 80093c6:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 80093c8:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 80093ca:	2301      	movs	r3, #1
 80093cc:	602b      	str	r3, [r5, #0]
 80093ce:	4d78      	ldr	r5, [pc, #480]	; (80095b0 <_dtoa_r+0x248>)
 80093d0:	b114      	cbz	r4, 80093d8 <_dtoa_r+0x70>
 80093d2:	4d78      	ldr	r5, [pc, #480]	; (80095b4 <_dtoa_r+0x24c>)
 80093d4:	6025      	str	r5, [r4, #0]
 80093d6:	3d01      	subs	r5, #1
 80093d8:	4628      	mov	r0, r5
 80093da:	b01d      	add	sp, #116	; 0x74
 80093dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093e0:	2400      	movs	r4, #0
 80093e2:	f014 0fff 	tst.w	r4, #255	; 0xff
 80093e6:	d0ee      	beq.n	80093c6 <_dtoa_r+0x5e>
 80093e8:	a91b      	add	r1, sp, #108	; 0x6c
 80093ea:	9100      	str	r1, [sp, #0]
 80093ec:	4638      	mov	r0, r7
 80093ee:	a91a      	add	r1, sp, #104	; 0x68
 80093f0:	4642      	mov	r2, r8
 80093f2:	464b      	mov	r3, r9
 80093f4:	9101      	str	r1, [sp, #4]
 80093f6:	f001 fed1 	bl	800b19c <__d2b>
 80093fa:	f3c5 540a 	ubfx	r4, r5, #20, #11
 80093fe:	900a      	str	r0, [sp, #40]	; 0x28
 8009400:	2c00      	cmp	r4, #0
 8009402:	f040 80b5 	bne.w	8009570 <_dtoa_r+0x208>
 8009406:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8009408:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 800940a:	f46f 6382 	mvn.w	r3, #1040	; 0x410
 800940e:	1934      	adds	r4, r6, r4
 8009410:	429c      	cmp	r4, r3
 8009412:	f2c0 8281 	blt.w	8009918 <_dtoa_r+0x5b0>
 8009416:	f64f 430e 	movw	r3, #64526	; 0xfc0e
 800941a:	f6cf 73ff 	movt	r3, #65535	; 0xffff
 800941e:	1b1b      	subs	r3, r3, r4
 8009420:	f204 4212 	addw	r2, r4, #1042	; 0x412
 8009424:	fa15 f303 	lsls.w	r3, r5, r3
 8009428:	fa2a f002 	lsr.w	r0, sl, r2
 800942c:	4318      	orrs	r0, r3
 800942e:	f003 f9f5 	bl	800c81c <__aeabi_ui2d>
 8009432:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009436:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009438:	2501      	movs	r5, #1
 800943a:	f1a0 70f8 	sub.w	r0, r0, #32505856	; 0x1f00000
 800943e:	900d      	str	r0, [sp, #52]	; 0x34
 8009440:	3c01      	subs	r4, #1
 8009442:	9516      	str	r5, [sp, #88]	; 0x58
 8009444:	2300      	movs	r3, #0
 8009446:	2200      	movs	r2, #0
 8009448:	f6c3 73f8 	movt	r3, #16376	; 0x3ff8
 800944c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009450:	f003 f8a6 	bl	800c5a0 <__aeabi_dsub>
 8009454:	a350      	add	r3, pc, #320	; (adr r3, 8009598 <_dtoa_r+0x230>)
 8009456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800945a:	f003 fa55 	bl	800c908 <__aeabi_dmul>
 800945e:	a350      	add	r3, pc, #320	; (adr r3, 80095a0 <_dtoa_r+0x238>)
 8009460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009464:	f003 f89e 	bl	800c5a4 <__adddf3>
 8009468:	4680      	mov	r8, r0
 800946a:	4620      	mov	r0, r4
 800946c:	4689      	mov	r9, r1
 800946e:	f003 f9e5 	bl	800c83c <__aeabi_i2d>
 8009472:	a34d      	add	r3, pc, #308	; (adr r3, 80095a8 <_dtoa_r+0x240>)
 8009474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009478:	f003 fa46 	bl	800c908 <__aeabi_dmul>
 800947c:	4602      	mov	r2, r0
 800947e:	460b      	mov	r3, r1
 8009480:	4640      	mov	r0, r8
 8009482:	4649      	mov	r1, r9
 8009484:	f003 f88e 	bl	800c5a4 <__adddf3>
 8009488:	4680      	mov	r8, r0
 800948a:	4689      	mov	r9, r1
 800948c:	f003 fcd6 	bl	800ce3c <__aeabi_d2iz>
 8009490:	4649      	mov	r1, r9
 8009492:	9005      	str	r0, [sp, #20]
 8009494:	2200      	movs	r2, #0
 8009496:	4640      	mov	r0, r8
 8009498:	2300      	movs	r3, #0
 800949a:	f003 fca7 	bl	800cdec <__aeabi_dcmplt>
 800949e:	b150      	cbz	r0, 80094b6 <_dtoa_r+0x14e>
 80094a0:	9805      	ldr	r0, [sp, #20]
 80094a2:	f003 f9cb 	bl	800c83c <__aeabi_i2d>
 80094a6:	4642      	mov	r2, r8
 80094a8:	464b      	mov	r3, r9
 80094aa:	f003 fc95 	bl	800cdd8 <__aeabi_dcmpeq>
 80094ae:	b910      	cbnz	r0, 80094b6 <_dtoa_r+0x14e>
 80094b0:	9d05      	ldr	r5, [sp, #20]
 80094b2:	3d01      	subs	r5, #1
 80094b4:	9505      	str	r5, [sp, #20]
 80094b6:	9d05      	ldr	r5, [sp, #20]
 80094b8:	2d16      	cmp	r5, #22
 80094ba:	f200 815e 	bhi.w	800977a <_dtoa_r+0x412>
 80094be:	4b3e      	ldr	r3, [pc, #248]	; (80095b8 <_dtoa_r+0x250>)
 80094c0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80094c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80094c8:	4652      	mov	r2, sl
 80094ca:	465b      	mov	r3, fp
 80094cc:	f003 fcac 	bl	800ce28 <__aeabi_dcmpgt>
 80094d0:	2800      	cmp	r0, #0
 80094d2:	f000 8229 	beq.w	8009928 <_dtoa_r+0x5c0>
 80094d6:	9d05      	ldr	r5, [sp, #20]
 80094d8:	3d01      	subs	r5, #1
 80094da:	9505      	str	r5, [sp, #20]
 80094dc:	2500      	movs	r5, #0
 80094de:	9514      	str	r5, [sp, #80]	; 0x50
 80094e0:	1b34      	subs	r4, r6, r4
 80094e2:	3c01      	subs	r4, #1
 80094e4:	f100 8213 	bmi.w	800990e <_dtoa_r+0x5a6>
 80094e8:	2500      	movs	r5, #0
 80094ea:	940b      	str	r4, [sp, #44]	; 0x2c
 80094ec:	950f      	str	r5, [sp, #60]	; 0x3c
 80094ee:	9c05      	ldr	r4, [sp, #20]
 80094f0:	2c00      	cmp	r4, #0
 80094f2:	f2c0 8203 	blt.w	80098fc <_dtoa_r+0x594>
 80094f6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80094f8:	9413      	str	r4, [sp, #76]	; 0x4c
 80094fa:	192d      	adds	r5, r5, r4
 80094fc:	2400      	movs	r4, #0
 80094fe:	950b      	str	r5, [sp, #44]	; 0x2c
 8009500:	9410      	str	r4, [sp, #64]	; 0x40
 8009502:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8009504:	2d09      	cmp	r5, #9
 8009506:	d85d      	bhi.n	80095c4 <_dtoa_r+0x25c>
 8009508:	2401      	movs	r4, #1
 800950a:	2d05      	cmp	r5, #5
 800950c:	dd02      	ble.n	8009514 <_dtoa_r+0x1ac>
 800950e:	3d04      	subs	r5, #4
 8009510:	9526      	str	r5, [sp, #152]	; 0x98
 8009512:	2400      	movs	r4, #0
 8009514:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8009516:	1eab      	subs	r3, r5, #2
 8009518:	2b03      	cmp	r3, #3
 800951a:	d855      	bhi.n	80095c8 <_dtoa_r+0x260>
 800951c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8009520:	036d0382 	.word	0x036d0382
 8009524:	03850246 	.word	0x03850246
 8009528:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 800952a:	f242 730f 	movw	r3, #9999	; 0x270f
 800952e:	6023      	str	r3, [r4, #0]
 8009530:	f1ba 0f00 	cmp.w	sl, #0
 8009534:	d013      	beq.n	800955e <_dtoa_r+0x1f6>
 8009536:	4d21      	ldr	r5, [pc, #132]	; (80095bc <_dtoa_r+0x254>)
 8009538:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 800953a:	2c00      	cmp	r4, #0
 800953c:	f43f af4c 	beq.w	80093d8 <_dtoa_r+0x70>
 8009540:	78eb      	ldrb	r3, [r5, #3]
 8009542:	2b00      	cmp	r3, #0
 8009544:	f000 8117 	beq.w	8009776 <_dtoa_r+0x40e>
 8009548:	f105 0308 	add.w	r3, r5, #8
 800954c:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 800954e:	6023      	str	r3, [r4, #0]
 8009550:	e742      	b.n	80093d8 <_dtoa_r+0x70>
 8009552:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
 8009556:	2301      	movs	r3, #1
 8009558:	6023      	str	r3, [r4, #0]
 800955a:	46ab      	mov	fp, r5
 800955c:	e71c      	b.n	8009398 <_dtoa_r+0x30>
 800955e:	4b17      	ldr	r3, [pc, #92]	; (80095bc <_dtoa_r+0x254>)
 8009560:	4a17      	ldr	r2, [pc, #92]	; (80095c0 <_dtoa_r+0x258>)
 8009562:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8009566:	2d00      	cmp	r5, #0
 8009568:	bf0c      	ite	eq
 800956a:	4615      	moveq	r5, r2
 800956c:	461d      	movne	r5, r3
 800956e:	e7e3      	b.n	8009538 <_dtoa_r+0x1d0>
 8009570:	4649      	mov	r1, r9
 8009572:	4640      	mov	r0, r8
 8009574:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009578:	990d      	ldr	r1, [sp, #52]	; 0x34
 800957a:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800957c:	f021 437f 	bic.w	r3, r1, #4278190080	; 0xff000000
 8009580:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009584:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009588:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800958c:	2500      	movs	r5, #0
 800958e:	930d      	str	r3, [sp, #52]	; 0x34
 8009590:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8009594:	9516      	str	r5, [sp, #88]	; 0x58
 8009596:	e755      	b.n	8009444 <_dtoa_r+0xdc>
 8009598:	636f4361 	.word	0x636f4361
 800959c:	3fd287a7 	.word	0x3fd287a7
 80095a0:	8b60c8b3 	.word	0x8b60c8b3
 80095a4:	3fc68a28 	.word	0x3fc68a28
 80095a8:	509f79fb 	.word	0x509f79fb
 80095ac:	3fd34413 	.word	0x3fd34413
 80095b0:	0800d55c 	.word	0x0800d55c
 80095b4:	0800d55d 	.word	0x0800d55d
 80095b8:	0800d2b0 	.word	0x0800d2b0
 80095bc:	0800d56c 	.word	0x0800d56c
 80095c0:	0800d560 	.word	0x0800d560
 80095c4:	2400      	movs	r4, #0
 80095c6:	9426      	str	r4, [sp, #152]	; 0x98
 80095c8:	2400      	movs	r4, #0
 80095ca:	647c      	str	r4, [r7, #68]	; 0x44
 80095cc:	4638      	mov	r0, r7
 80095ce:	4621      	mov	r1, r4
 80095d0:	f001 fa88 	bl	800aae4 <_Balloc>
 80095d4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80095d8:	950e      	str	r5, [sp, #56]	; 0x38
 80095da:	2501      	movs	r5, #1
 80095dc:	9512      	str	r5, [sp, #72]	; 0x48
 80095de:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80095e2:	9009      	str	r0, [sp, #36]	; 0x24
 80095e4:	6438      	str	r0, [r7, #64]	; 0x40
 80095e6:	9515      	str	r5, [sp, #84]	; 0x54
 80095e8:	9427      	str	r4, [sp, #156]	; 0x9c
 80095ea:	9c05      	ldr	r4, [sp, #20]
 80095ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80095ee:	2c0e      	cmp	r4, #14
 80095f0:	bfcc      	ite	gt
 80095f2:	2500      	movgt	r5, #0
 80095f4:	2501      	movle	r5, #1
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	bfb8      	it	lt
 80095fa:	2500      	movlt	r5, #0
 80095fc:	2d00      	cmp	r5, #0
 80095fe:	f000 80c1 	beq.w	8009784 <_dtoa_r+0x41c>
 8009602:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8009604:	4b5e      	ldr	r3, [pc, #376]	; (8009780 <_dtoa_r+0x418>)
 8009606:	0fe5      	lsrs	r5, r4, #31
 8009608:	9c05      	ldr	r4, [sp, #20]
 800960a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800960e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009612:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8009614:	2c00      	cmp	r4, #0
 8009616:	bfcc      	ite	gt
 8009618:	2500      	movgt	r5, #0
 800961a:	f005 0501 	andle.w	r5, r5, #1
 800961e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009622:	2d00      	cmp	r5, #0
 8009624:	f040 81a8 	bne.w	8009978 <_dtoa_r+0x610>
 8009628:	4602      	mov	r2, r0
 800962a:	460b      	mov	r3, r1
 800962c:	4650      	mov	r0, sl
 800962e:	4659      	mov	r1, fp
 8009630:	f003 fa94 	bl	800cb5c <__aeabi_ddiv>
 8009634:	f003 fc02 	bl	800ce3c <__aeabi_d2iz>
 8009638:	4606      	mov	r6, r0
 800963a:	f003 f8ff 	bl	800c83c <__aeabi_i2d>
 800963e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009642:	f003 f961 	bl	800c908 <__aeabi_dmul>
 8009646:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8009648:	460b      	mov	r3, r1
 800964a:	4602      	mov	r2, r0
 800964c:	4659      	mov	r1, fp
 800964e:	4650      	mov	r0, sl
 8009650:	f002 ffa6 	bl	800c5a0 <__aeabi_dsub>
 8009654:	f106 0330 	add.w	r3, r6, #48	; 0x30
 8009658:	f804 3b01 	strb.w	r3, [r4], #1
 800965c:	9411      	str	r4, [sp, #68]	; 0x44
 800965e:	46a0      	mov	r8, r4
 8009660:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8009662:	2c01      	cmp	r4, #1
 8009664:	4682      	mov	sl, r0
 8009666:	468b      	mov	fp, r1
 8009668:	d04c      	beq.n	8009704 <_dtoa_r+0x39c>
 800966a:	2300      	movs	r3, #0
 800966c:	2200      	movs	r2, #0
 800966e:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8009672:	f003 f949 	bl	800c908 <__aeabi_dmul>
 8009676:	2200      	movs	r2, #0
 8009678:	2300      	movs	r3, #0
 800967a:	4682      	mov	sl, r0
 800967c:	468b      	mov	fp, r1
 800967e:	2401      	movs	r4, #1
 8009680:	f003 fbaa 	bl	800cdd8 <__aeabi_dcmpeq>
 8009684:	b100      	cbz	r0, 8009688 <_dtoa_r+0x320>
 8009686:	462c      	mov	r4, r5
 8009688:	f014 0fff 	tst.w	r4, #255	; 0xff
 800968c:	f000 8575 	beq.w	800a17a <_dtoa_r+0xe12>
 8009690:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8009692:	980e      	ldr	r0, [sp, #56]	; 0x38
 8009694:	1ca5      	adds	r5, r4, #2
 8009696:	eb04 0900 	add.w	r9, r4, r0
 800969a:	e00d      	b.n	80096b8 <_dtoa_r+0x350>
 800969c:	f003 f934 	bl	800c908 <__aeabi_dmul>
 80096a0:	2200      	movs	r2, #0
 80096a2:	2300      	movs	r3, #0
 80096a4:	4682      	mov	sl, r0
 80096a6:	468b      	mov	fp, r1
 80096a8:	f003 fb96 	bl	800cdd8 <__aeabi_dcmpeq>
 80096ac:	b100      	cbz	r0, 80096b0 <_dtoa_r+0x348>
 80096ae:	2400      	movs	r4, #0
 80096b0:	f014 0fff 	tst.w	r4, #255	; 0xff
 80096b4:	f000 8423 	beq.w	8009efe <_dtoa_r+0xb96>
 80096b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80096bc:	4650      	mov	r0, sl
 80096be:	4659      	mov	r1, fp
 80096c0:	f003 fa4c 	bl	800cb5c <__aeabi_ddiv>
 80096c4:	f003 fbba 	bl	800ce3c <__aeabi_d2iz>
 80096c8:	4606      	mov	r6, r0
 80096ca:	f003 f8b7 	bl	800c83c <__aeabi_i2d>
 80096ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80096d2:	f003 f919 	bl	800c908 <__aeabi_dmul>
 80096d6:	4602      	mov	r2, r0
 80096d8:	460b      	mov	r3, r1
 80096da:	4650      	mov	r0, sl
 80096dc:	4659      	mov	r1, fp
 80096de:	f002 ff5f 	bl	800c5a0 <__aeabi_dsub>
 80096e2:	f106 0430 	add.w	r4, r6, #48	; 0x30
 80096e6:	2300      	movs	r3, #0
 80096e8:	2200      	movs	r2, #0
 80096ea:	454d      	cmp	r5, r9
 80096ec:	f805 4c01 	strb.w	r4, [r5, #-1]
 80096f0:	46a8      	mov	r8, r5
 80096f2:	4682      	mov	sl, r0
 80096f4:	468b      	mov	fp, r1
 80096f6:	f2c4 0324 	movt	r3, #16420	; 0x4024
 80096fa:	f04f 0401 	mov.w	r4, #1
 80096fe:	f105 0501 	add.w	r5, r5, #1
 8009702:	d1cb      	bne.n	800969c <_dtoa_r+0x334>
 8009704:	4652      	mov	r2, sl
 8009706:	465b      	mov	r3, fp
 8009708:	4650      	mov	r0, sl
 800970a:	4659      	mov	r1, fp
 800970c:	f002 ff4a 	bl	800c5a4 <__adddf3>
 8009710:	4604      	mov	r4, r0
 8009712:	460d      	mov	r5, r1
 8009714:	4622      	mov	r2, r4
 8009716:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800971a:	462b      	mov	r3, r5
 800971c:	f003 fb66 	bl	800cdec <__aeabi_dcmplt>
 8009720:	b958      	cbnz	r0, 800973a <_dtoa_r+0x3d2>
 8009722:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009726:	4622      	mov	r2, r4
 8009728:	462b      	mov	r3, r5
 800972a:	f003 fb55 	bl	800cdd8 <__aeabi_dcmpeq>
 800972e:	2800      	cmp	r0, #0
 8009730:	f000 83e5 	beq.w	8009efe <_dtoa_r+0xb96>
 8009734:	07f3      	lsls	r3, r6, #31
 8009736:	f140 83e2 	bpl.w	8009efe <_dtoa_r+0xb96>
 800973a:	9c05      	ldr	r4, [sp, #20]
 800973c:	f818 6c01 	ldrb.w	r6, [r8, #-1]
 8009740:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009742:	9417      	str	r4, [sp, #92]	; 0x5c
 8009744:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009746:	e003      	b.n	8009750 <_dtoa_r+0x3e8>
 8009748:	f818 6c02 	ldrb.w	r6, [r8, #-2]
 800974c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8009750:	2e39      	cmp	r6, #57	; 0x39
 8009752:	4643      	mov	r3, r8
 8009754:	f040 8489 	bne.w	800a06a <_dtoa_r+0xd02>
 8009758:	4590      	cmp	r8, r2
 800975a:	d1f5      	bne.n	8009748 <_dtoa_r+0x3e0>
 800975c:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 800975e:	9309      	str	r3, [sp, #36]	; 0x24
 8009760:	3401      	adds	r4, #1
 8009762:	9405      	str	r4, [sp, #20]
 8009764:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8009766:	2330      	movs	r3, #48	; 0x30
 8009768:	f804 3c01 	strb.w	r3, [r4, #-1]
 800976c:	2231      	movs	r2, #49	; 0x31
 800976e:	4623      	mov	r3, r4
 8009770:	f803 2c01 	strb.w	r2, [r3, #-1]
 8009774:	e0b0      	b.n	80098d8 <_dtoa_r+0x570>
 8009776:	1ceb      	adds	r3, r5, #3
 8009778:	e6e8      	b.n	800954c <_dtoa_r+0x1e4>
 800977a:	2501      	movs	r5, #1
 800977c:	9514      	str	r5, [sp, #80]	; 0x50
 800977e:	e6af      	b.n	80094e0 <_dtoa_r+0x178>
 8009780:	0800d2b0 	.word	0x0800d2b0
 8009784:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8009786:	2c00      	cmp	r4, #0
 8009788:	f040 80d1 	bne.w	800992e <_dtoa_r+0x5c6>
 800978c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800978e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8009790:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8009792:	9306      	str	r3, [sp, #24]
 8009794:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009796:	2800      	cmp	r0, #0
 8009798:	bfc8      	it	gt
 800979a:	2c00      	cmpgt	r4, #0
 800979c:	dd09      	ble.n	80097b2 <_dtoa_r+0x44a>
 800979e:	4603      	mov	r3, r0
 80097a0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80097a2:	42a3      	cmp	r3, r4
 80097a4:	bfa8      	it	ge
 80097a6:	4623      	movge	r3, r4
 80097a8:	1ac9      	subs	r1, r1, r3
 80097aa:	1ac0      	subs	r0, r0, r3
 80097ac:	910f      	str	r1, [sp, #60]	; 0x3c
 80097ae:	1ae4      	subs	r4, r4, r3
 80097b0:	900b      	str	r0, [sp, #44]	; 0x2c
 80097b2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80097b4:	2a00      	cmp	r2, #0
 80097b6:	dd1a      	ble.n	80097ee <_dtoa_r+0x486>
 80097b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	f000 841d 	beq.w	8009ffa <_dtoa_r+0xc92>
 80097c0:	2d00      	cmp	r5, #0
 80097c2:	dd10      	ble.n	80097e6 <_dtoa_r+0x47e>
 80097c4:	9906      	ldr	r1, [sp, #24]
 80097c6:	462a      	mov	r2, r5
 80097c8:	4638      	mov	r0, r7
 80097ca:	f001 fb39 	bl	800ae40 <__pow5mult>
 80097ce:	9006      	str	r0, [sp, #24]
 80097d0:	9906      	ldr	r1, [sp, #24]
 80097d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80097d4:	4638      	mov	r0, r7
 80097d6:	f001 fa9b 	bl	800ad10 <__multiply>
 80097da:	990a      	ldr	r1, [sp, #40]	; 0x28
 80097dc:	4606      	mov	r6, r0
 80097de:	4638      	mov	r0, r7
 80097e0:	f001 f9a6 	bl	800ab30 <_Bfree>
 80097e4:	960a      	str	r6, [sp, #40]	; 0x28
 80097e6:	9810      	ldr	r0, [sp, #64]	; 0x40
 80097e8:	1b42      	subs	r2, r0, r5
 80097ea:	f040 8429 	bne.w	800a040 <_dtoa_r+0xcd8>
 80097ee:	2101      	movs	r1, #1
 80097f0:	4638      	mov	r0, r7
 80097f2:	f001 fa83 	bl	800acfc <__i2b>
 80097f6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80097f8:	2d00      	cmp	r5, #0
 80097fa:	4606      	mov	r6, r0
 80097fc:	dd05      	ble.n	800980a <_dtoa_r+0x4a2>
 80097fe:	4631      	mov	r1, r6
 8009800:	4638      	mov	r0, r7
 8009802:	462a      	mov	r2, r5
 8009804:	f001 fb1c 	bl	800ae40 <__pow5mult>
 8009808:	4606      	mov	r6, r0
 800980a:	9d26      	ldr	r5, [sp, #152]	; 0x98
 800980c:	2d01      	cmp	r5, #1
 800980e:	f340 820f 	ble.w	8009c30 <_dtoa_r+0x8c8>
 8009812:	2500      	movs	r5, #0
 8009814:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8009816:	2301      	movs	r3, #1
 8009818:	2800      	cmp	r0, #0
 800981a:	f040 838c 	bne.w	8009f36 <_dtoa_r+0xbce>
 800981e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009820:	185b      	adds	r3, r3, r1
 8009822:	f013 031f 	ands.w	r3, r3, #31
 8009826:	f000 82cb 	beq.w	8009dc0 <_dtoa_r+0xa58>
 800982a:	f1c3 0220 	rsb	r2, r3, #32
 800982e:	2a04      	cmp	r2, #4
 8009830:	f340 84bf 	ble.w	800a1b2 <_dtoa_r+0xe4a>
 8009834:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009836:	f1c3 031c 	rsb	r3, r3, #28
 800983a:	18d2      	adds	r2, r2, r3
 800983c:	18c9      	adds	r1, r1, r3
 800983e:	920f      	str	r2, [sp, #60]	; 0x3c
 8009840:	18e4      	adds	r4, r4, r3
 8009842:	910b      	str	r1, [sp, #44]	; 0x2c
 8009844:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009846:	2a00      	cmp	r2, #0
 8009848:	dd04      	ble.n	8009854 <_dtoa_r+0x4ec>
 800984a:	4638      	mov	r0, r7
 800984c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800984e:	f001 fb43 	bl	800aed8 <__lshift>
 8009852:	900a      	str	r0, [sp, #40]	; 0x28
 8009854:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009856:	2b00      	cmp	r3, #0
 8009858:	dd05      	ble.n	8009866 <_dtoa_r+0x4fe>
 800985a:	4631      	mov	r1, r6
 800985c:	4638      	mov	r0, r7
 800985e:	461a      	mov	r2, r3
 8009860:	f001 fb3a 	bl	800aed8 <__lshift>
 8009864:	4606      	mov	r6, r0
 8009866:	9814      	ldr	r0, [sp, #80]	; 0x50
 8009868:	2800      	cmp	r0, #0
 800986a:	f040 834c 	bne.w	8009f06 <_dtoa_r+0xb9e>
 800986e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009870:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009872:	2900      	cmp	r1, #0
 8009874:	bfcc      	ite	gt
 8009876:	2300      	movgt	r3, #0
 8009878:	2301      	movle	r3, #1
 800987a:	2a02      	cmp	r2, #2
 800987c:	bfd8      	it	le
 800987e:	2300      	movle	r3, #0
 8009880:	2b00      	cmp	r3, #0
 8009882:	f000 8226 	beq.w	8009cd2 <_dtoa_r+0x96a>
 8009886:	2900      	cmp	r1, #0
 8009888:	f040 808a 	bne.w	80099a0 <_dtoa_r+0x638>
 800988c:	4631      	mov	r1, r6
 800988e:	2205      	movs	r2, #5
 8009890:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009892:	4638      	mov	r0, r7
 8009894:	f001 f956 	bl	800ab44 <__multadd>
 8009898:	4606      	mov	r6, r0
 800989a:	4631      	mov	r1, r6
 800989c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800989e:	f001 fb7b 	bl	800af98 <__mcmp>
 80098a2:	2800      	cmp	r0, #0
 80098a4:	dd7c      	ble.n	80099a0 <_dtoa_r+0x638>
 80098a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098a8:	9c05      	ldr	r4, [sp, #20]
 80098aa:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80098ac:	2231      	movs	r2, #49	; 0x31
 80098ae:	f803 2b01 	strb.w	r2, [r3], #1
 80098b2:	3401      	adds	r4, #1
 80098b4:	9405      	str	r4, [sp, #20]
 80098b6:	9309      	str	r3, [sp, #36]	; 0x24
 80098b8:	2400      	movs	r4, #0
 80098ba:	4638      	mov	r0, r7
 80098bc:	4631      	mov	r1, r6
 80098be:	f001 f937 	bl	800ab30 <_Bfree>
 80098c2:	9806      	ldr	r0, [sp, #24]
 80098c4:	b140      	cbz	r0, 80098d8 <_dtoa_r+0x570>
 80098c6:	4284      	cmp	r4, r0
 80098c8:	bf18      	it	ne
 80098ca:	2c00      	cmpne	r4, #0
 80098cc:	f040 8273 	bne.w	8009db6 <_dtoa_r+0xa4e>
 80098d0:	4638      	mov	r0, r7
 80098d2:	9906      	ldr	r1, [sp, #24]
 80098d4:	f001 f92c 	bl	800ab30 <_Bfree>
 80098d8:	4638      	mov	r0, r7
 80098da:	990a      	ldr	r1, [sp, #40]	; 0x28
 80098dc:	f001 f928 	bl	800ab30 <_Bfree>
 80098e0:	9c05      	ldr	r4, [sp, #20]
 80098e2:	1c63      	adds	r3, r4, #1
 80098e4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80098e6:	2200      	movs	r2, #0
 80098e8:	7022      	strb	r2, [r4, #0]
 80098ea:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 80098ec:	6023      	str	r3, [r4, #0]
 80098ee:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 80098f0:	2c00      	cmp	r4, #0
 80098f2:	f43f ad71 	beq.w	80093d8 <_dtoa_r+0x70>
 80098f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80098f8:	6020      	str	r0, [r4, #0]
 80098fa:	e56d      	b.n	80093d8 <_dtoa_r+0x70>
 80098fc:	9c05      	ldr	r4, [sp, #20]
 80098fe:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009900:	1b2d      	subs	r5, r5, r4
 8009902:	950f      	str	r5, [sp, #60]	; 0x3c
 8009904:	4265      	negs	r5, r4
 8009906:	2400      	movs	r4, #0
 8009908:	9510      	str	r5, [sp, #64]	; 0x40
 800990a:	9413      	str	r4, [sp, #76]	; 0x4c
 800990c:	e5f9      	b.n	8009502 <_dtoa_r+0x19a>
 800990e:	4264      	negs	r4, r4
 8009910:	940f      	str	r4, [sp, #60]	; 0x3c
 8009912:	2400      	movs	r4, #0
 8009914:	940b      	str	r4, [sp, #44]	; 0x2c
 8009916:	e5ea      	b.n	80094ee <_dtoa_r+0x186>
 8009918:	f64f 30ee 	movw	r0, #64494	; 0xfbee
 800991c:	f6cf 70ff 	movt	r0, #65535	; 0xffff
 8009920:	1b00      	subs	r0, r0, r4
 8009922:	fa0a f000 	lsl.w	r0, sl, r0
 8009926:	e582      	b.n	800942e <_dtoa_r+0xc6>
 8009928:	2500      	movs	r5, #0
 800992a:	9514      	str	r5, [sp, #80]	; 0x50
 800992c:	e5d8      	b.n	80094e0 <_dtoa_r+0x178>
 800992e:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8009930:	2c01      	cmp	r4, #1
 8009932:	f340 838f 	ble.w	800a054 <_dtoa_r+0xcec>
 8009936:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8009938:	1e62      	subs	r2, r4, #1
 800993a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800993c:	4294      	cmp	r4, r2
 800993e:	bfbf      	itttt	lt
 8009940:	9c10      	ldrlt	r4, [sp, #64]	; 0x40
 8009942:	9210      	strlt	r2, [sp, #64]	; 0x40
 8009944:	ebc4 0302 	rsblt	r3, r4, r2
 8009948:	9c13      	ldrlt	r4, [sp, #76]	; 0x4c
 800994a:	bfb6      	itet	lt
 800994c:	18e4      	addlt	r4, r4, r3
 800994e:	ebc2 0504 	rsbge	r5, r2, r4
 8009952:	9413      	strlt	r4, [sp, #76]	; 0x4c
 8009954:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8009956:	2c00      	cmp	r4, #0
 8009958:	f2c0 838f 	blt.w	800a07a <_dtoa_r+0xd12>
 800995c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800995e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009960:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009962:	18d2      	adds	r2, r2, r3
 8009964:	920f      	str	r2, [sp, #60]	; 0x3c
 8009966:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009968:	4638      	mov	r0, r7
 800996a:	18d2      	adds	r2, r2, r3
 800996c:	2101      	movs	r1, #1
 800996e:	920b      	str	r2, [sp, #44]	; 0x2c
 8009970:	f001 f9c4 	bl	800acfc <__i2b>
 8009974:	9006      	str	r0, [sp, #24]
 8009976:	e70d      	b.n	8009794 <_dtoa_r+0x42c>
 8009978:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800997a:	2d00      	cmp	r5, #0
 800997c:	f040 8367 	bne.w	800a04e <_dtoa_r+0xce6>
 8009980:	2300      	movs	r3, #0
 8009982:	2200      	movs	r2, #0
 8009984:	f2c4 0314 	movt	r3, #16404	; 0x4014
 8009988:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800998c:	f002 ffbc 	bl	800c908 <__aeabi_dmul>
 8009990:	4652      	mov	r2, sl
 8009992:	465b      	mov	r3, fp
 8009994:	f003 fa3e 	bl	800ce14 <__aeabi_dcmpge>
 8009998:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800999a:	9606      	str	r6, [sp, #24]
 800999c:	2800      	cmp	r0, #0
 800999e:	d082      	beq.n	80098a6 <_dtoa_r+0x53e>
 80099a0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 80099a2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80099a4:	43e4      	mvns	r4, r4
 80099a6:	9405      	str	r4, [sp, #20]
 80099a8:	2400      	movs	r4, #0
 80099aa:	e786      	b.n	80098ba <_dtoa_r+0x552>
 80099ac:	2501      	movs	r5, #1
 80099ae:	9512      	str	r5, [sp, #72]	; 0x48
 80099b0:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 80099b2:	2d00      	cmp	r5, #0
 80099b4:	f340 82d3 	ble.w	8009f5e <_dtoa_r+0xbf6>
 80099b8:	46a9      	mov	r9, r5
 80099ba:	2d0e      	cmp	r5, #14
 80099bc:	bf8c      	ite	hi
 80099be:	2400      	movhi	r4, #0
 80099c0:	f004 0401 	andls.w	r4, r4, #1
 80099c4:	9515      	str	r5, [sp, #84]	; 0x54
 80099c6:	950e      	str	r5, [sp, #56]	; 0x38
 80099c8:	2100      	movs	r1, #0
 80099ca:	f1b9 0f17 	cmp.w	r9, #23
 80099ce:	6479      	str	r1, [r7, #68]	; 0x44
 80099d0:	d909      	bls.n	80099e6 <_dtoa_r+0x67e>
 80099d2:	2201      	movs	r2, #1
 80099d4:	2304      	movs	r3, #4
 80099d6:	005b      	lsls	r3, r3, #1
 80099d8:	f103 0014 	add.w	r0, r3, #20
 80099dc:	4611      	mov	r1, r2
 80099de:	3201      	adds	r2, #1
 80099e0:	4548      	cmp	r0, r9
 80099e2:	d9f8      	bls.n	80099d6 <_dtoa_r+0x66e>
 80099e4:	6479      	str	r1, [r7, #68]	; 0x44
 80099e6:	4638      	mov	r0, r7
 80099e8:	f001 f87c 	bl	800aae4 <_Balloc>
 80099ec:	9009      	str	r0, [sp, #36]	; 0x24
 80099ee:	6438      	str	r0, [r7, #64]	; 0x40
 80099f0:	2c00      	cmp	r4, #0
 80099f2:	f43f adfa 	beq.w	80095ea <_dtoa_r+0x282>
 80099f6:	9c05      	ldr	r4, [sp, #20]
 80099f8:	4652      	mov	r2, sl
 80099fa:	465b      	mov	r3, fp
 80099fc:	2c00      	cmp	r4, #0
 80099fe:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8009a02:	f340 81f8 	ble.w	8009df6 <_dtoa_r+0xa8e>
 8009a06:	4b97      	ldr	r3, [pc, #604]	; (8009c64 <_dtoa_r+0x8fc>)
 8009a08:	f004 020f 	and.w	r2, r4, #15
 8009a0c:	1124      	asrs	r4, r4, #4
 8009a0e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009a12:	2602      	movs	r6, #2
 8009a14:	06e2      	lsls	r2, r4, #27
 8009a16:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009a1a:	d50b      	bpl.n	8009a34 <_dtoa_r+0x6cc>
 8009a1c:	4b92      	ldr	r3, [pc, #584]	; (8009c68 <_dtoa_r+0x900>)
 8009a1e:	4650      	mov	r0, sl
 8009a20:	4659      	mov	r1, fp
 8009a22:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009a26:	f003 f899 	bl	800cb5c <__aeabi_ddiv>
 8009a2a:	f004 040f 	and.w	r4, r4, #15
 8009a2e:	4682      	mov	sl, r0
 8009a30:	468b      	mov	fp, r1
 8009a32:	2603      	movs	r6, #3
 8009a34:	b174      	cbz	r4, 8009a54 <_dtoa_r+0x6ec>
 8009a36:	4d8c      	ldr	r5, [pc, #560]	; (8009c68 <_dtoa_r+0x900>)
 8009a38:	4640      	mov	r0, r8
 8009a3a:	4649      	mov	r1, r9
 8009a3c:	07e3      	lsls	r3, r4, #31
 8009a3e:	d504      	bpl.n	8009a4a <_dtoa_r+0x6e2>
 8009a40:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009a44:	f002 ff60 	bl	800c908 <__aeabi_dmul>
 8009a48:	3601      	adds	r6, #1
 8009a4a:	3508      	adds	r5, #8
 8009a4c:	1064      	asrs	r4, r4, #1
 8009a4e:	d1f5      	bne.n	8009a3c <_dtoa_r+0x6d4>
 8009a50:	4680      	mov	r8, r0
 8009a52:	4689      	mov	r9, r1
 8009a54:	4650      	mov	r0, sl
 8009a56:	4659      	mov	r1, fp
 8009a58:	4642      	mov	r2, r8
 8009a5a:	464b      	mov	r3, r9
 8009a5c:	f003 f87e 	bl	800cb5c <__aeabi_ddiv>
 8009a60:	4682      	mov	sl, r0
 8009a62:	468b      	mov	fp, r1
 8009a64:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8009a66:	2c00      	cmp	r4, #0
 8009a68:	f000 8100 	beq.w	8009c6c <_dtoa_r+0x904>
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	4650      	mov	r0, sl
 8009a70:	4659      	mov	r1, fp
 8009a72:	2200      	movs	r2, #0
 8009a74:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 8009a78:	2401      	movs	r4, #1
 8009a7a:	f003 f9b7 	bl	800cdec <__aeabi_dcmplt>
 8009a7e:	b900      	cbnz	r0, 8009a82 <_dtoa_r+0x71a>
 8009a80:	2400      	movs	r4, #0
 8009a82:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8009a84:	2d00      	cmp	r5, #0
 8009a86:	bfd4      	ite	le
 8009a88:	2400      	movle	r4, #0
 8009a8a:	f004 0401 	andgt.w	r4, r4, #1
 8009a8e:	2c00      	cmp	r4, #0
 8009a90:	f000 80ec 	beq.w	8009c6c <_dtoa_r+0x904>
 8009a94:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8009a96:	2c00      	cmp	r4, #0
 8009a98:	f340 819b 	ble.w	8009dd2 <_dtoa_r+0xa6a>
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8009aa4:	4650      	mov	r0, sl
 8009aa6:	4659      	mov	r1, fp
 8009aa8:	f002 ff2e 	bl	800c908 <__aeabi_dmul>
 8009aac:	4682      	mov	sl, r0
 8009aae:	1c70      	adds	r0, r6, #1
 8009ab0:	468b      	mov	fp, r1
 8009ab2:	f002 fec3 	bl	800c83c <__aeabi_i2d>
 8009ab6:	4602      	mov	r2, r0
 8009ab8:	460b      	mov	r3, r1
 8009aba:	4650      	mov	r0, sl
 8009abc:	4659      	mov	r1, fp
 8009abe:	f002 ff23 	bl	800c908 <__aeabi_dmul>
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	f2c4 031c 	movt	r3, #16412	; 0x401c
 8009aca:	f002 fd6b 	bl	800c5a4 <__adddf3>
 8009ace:	9d05      	ldr	r5, [sp, #20]
 8009ad0:	3d01      	subs	r5, #1
 8009ad2:	9517      	str	r5, [sp, #92]	; 0x5c
 8009ad4:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8009ad6:	4680      	mov	r8, r0
 8009ad8:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 8009adc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8009ade:	2c00      	cmp	r4, #0
 8009ae0:	f000 81b0 	beq.w	8009e44 <_dtoa_r+0xadc>
 8009ae4:	4b5f      	ldr	r3, [pc, #380]	; (8009c64 <_dtoa_r+0x8fc>)
 8009ae6:	2100      	movs	r1, #0
 8009ae8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009aec:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009af0:	2000      	movs	r0, #0
 8009af2:	f6c3 71e0 	movt	r1, #16352	; 0x3fe0
 8009af6:	f003 f831 	bl	800cb5c <__aeabi_ddiv>
 8009afa:	4642      	mov	r2, r8
 8009afc:	464b      	mov	r3, r9
 8009afe:	f002 fd4f 	bl	800c5a0 <__aeabi_dsub>
 8009b02:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009b06:	4659      	mov	r1, fp
 8009b08:	4650      	mov	r0, sl
 8009b0a:	f003 f997 	bl	800ce3c <__aeabi_d2iz>
 8009b0e:	4606      	mov	r6, r0
 8009b10:	f002 fe94 	bl	800c83c <__aeabi_i2d>
 8009b14:	4602      	mov	r2, r0
 8009b16:	460b      	mov	r3, r1
 8009b18:	4650      	mov	r0, sl
 8009b1a:	4659      	mov	r1, fp
 8009b1c:	f002 fd40 	bl	800c5a0 <__aeabi_dsub>
 8009b20:	3630      	adds	r6, #48	; 0x30
 8009b22:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8009b24:	b2f6      	uxtb	r6, r6
 8009b26:	4682      	mov	sl, r0
 8009b28:	468b      	mov	fp, r1
 8009b2a:	f804 6b01 	strb.w	r6, [r4], #1
 8009b2e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009b32:	4652      	mov	r2, sl
 8009b34:	465b      	mov	r3, fp
 8009b36:	9411      	str	r4, [sp, #68]	; 0x44
 8009b38:	46a0      	mov	r8, r4
 8009b3a:	f003 f975 	bl	800ce28 <__aeabi_dcmpgt>
 8009b3e:	2800      	cmp	r0, #0
 8009b40:	f040 8325 	bne.w	800a18e <_dtoa_r+0xe26>
 8009b44:	2100      	movs	r1, #0
 8009b46:	4652      	mov	r2, sl
 8009b48:	465b      	mov	r3, fp
 8009b4a:	2000      	movs	r0, #0
 8009b4c:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 8009b50:	f002 fd26 	bl	800c5a0 <__aeabi_dsub>
 8009b54:	4602      	mov	r2, r0
 8009b56:	460b      	mov	r3, r1
 8009b58:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009b5c:	f003 f964 	bl	800ce28 <__aeabi_dcmpgt>
 8009b60:	2800      	cmp	r0, #0
 8009b62:	f040 827f 	bne.w	800a064 <_dtoa_r+0xcfc>
 8009b66:	2d01      	cmp	r5, #1
 8009b68:	f340 8133 	ble.w	8009dd2 <_dtoa_r+0xa6a>
 8009b6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b6e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8009b70:	1945      	adds	r5, r0, r5
 8009b72:	e00f      	b.n	8009b94 <_dtoa_r+0x82c>
 8009b74:	2100      	movs	r1, #0
 8009b76:	2000      	movs	r0, #0
 8009b78:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 8009b7c:	f002 fd10 	bl	800c5a0 <__aeabi_dsub>
 8009b80:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009b84:	f003 f932 	bl	800cdec <__aeabi_dcmplt>
 8009b88:	2800      	cmp	r0, #0
 8009b8a:	f040 826b 	bne.w	800a064 <_dtoa_r+0xcfc>
 8009b8e:	42ac      	cmp	r4, r5
 8009b90:	f000 811f 	beq.w	8009dd2 <_dtoa_r+0xa6a>
 8009b94:	2300      	movs	r3, #0
 8009b96:	2200      	movs	r2, #0
 8009b98:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8009b9c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009ba0:	f002 feb2 	bl	800c908 <__aeabi_dmul>
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8009bac:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009bb0:	4650      	mov	r0, sl
 8009bb2:	4659      	mov	r1, fp
 8009bb4:	f002 fea8 	bl	800c908 <__aeabi_dmul>
 8009bb8:	4680      	mov	r8, r0
 8009bba:	4689      	mov	r9, r1
 8009bbc:	f003 f93e 	bl	800ce3c <__aeabi_d2iz>
 8009bc0:	4606      	mov	r6, r0
 8009bc2:	f002 fe3b 	bl	800c83c <__aeabi_i2d>
 8009bc6:	4602      	mov	r2, r0
 8009bc8:	460b      	mov	r3, r1
 8009bca:	4640      	mov	r0, r8
 8009bcc:	4649      	mov	r1, r9
 8009bce:	f002 fce7 	bl	800c5a0 <__aeabi_dsub>
 8009bd2:	3630      	adds	r6, #48	; 0x30
 8009bd4:	b2f6      	uxtb	r6, r6
 8009bd6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009bda:	f804 6b01 	strb.w	r6, [r4], #1
 8009bde:	4682      	mov	sl, r0
 8009be0:	468b      	mov	fp, r1
 8009be2:	f003 f903 	bl	800cdec <__aeabi_dcmplt>
 8009be6:	46a0      	mov	r8, r4
 8009be8:	4652      	mov	r2, sl
 8009bea:	465b      	mov	r3, fp
 8009bec:	2800      	cmp	r0, #0
 8009bee:	d0c1      	beq.n	8009b74 <_dtoa_r+0x80c>
 8009bf0:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8009bf2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009bf4:	9005      	str	r0, [sp, #20]
 8009bf6:	9409      	str	r4, [sp, #36]	; 0x24
 8009bf8:	e66e      	b.n	80098d8 <_dtoa_r+0x570>
 8009bfa:	2500      	movs	r5, #0
 8009bfc:	9512      	str	r5, [sp, #72]	; 0x48
 8009bfe:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 8009c00:	9805      	ldr	r0, [sp, #20]
 8009c02:	182d      	adds	r5, r5, r0
 8009c04:	f105 0901 	add.w	r9, r5, #1
 8009c08:	f1b9 0f00 	cmp.w	r9, #0
 8009c0c:	9515      	str	r5, [sp, #84]	; 0x54
 8009c0e:	f340 819b 	ble.w	8009f48 <_dtoa_r+0xbe0>
 8009c12:	f1b9 0f0e 	cmp.w	r9, #14
 8009c16:	bf8c      	ite	hi
 8009c18:	2400      	movhi	r4, #0
 8009c1a:	f004 0401 	andls.w	r4, r4, #1
 8009c1e:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8009c22:	e6d1      	b.n	80099c8 <_dtoa_r+0x660>
 8009c24:	2500      	movs	r5, #0
 8009c26:	9512      	str	r5, [sp, #72]	; 0x48
 8009c28:	e6c2      	b.n	80099b0 <_dtoa_r+0x648>
 8009c2a:	2501      	movs	r5, #1
 8009c2c:	9512      	str	r5, [sp, #72]	; 0x48
 8009c2e:	e7e6      	b.n	8009bfe <_dtoa_r+0x896>
 8009c30:	f1ba 0f00 	cmp.w	sl, #0
 8009c34:	f47f aded 	bne.w	8009812 <_dtoa_r+0x4aa>
 8009c38:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009c3c:	4655      	mov	r5, sl
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	f47f ade8 	bne.w	8009814 <_dtoa_r+0x4ac>
 8009c44:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 8009c48:	ea0b 0303 	and.w	r3, fp, r3
 8009c4c:	461d      	mov	r5, r3
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	f43f ade0 	beq.w	8009814 <_dtoa_r+0x4ac>
 8009c54:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009c56:	3501      	adds	r5, #1
 8009c58:	950f      	str	r5, [sp, #60]	; 0x3c
 8009c5a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8009c5c:	3501      	adds	r5, #1
 8009c5e:	950b      	str	r5, [sp, #44]	; 0x2c
 8009c60:	2501      	movs	r5, #1
 8009c62:	e5d7      	b.n	8009814 <_dtoa_r+0x4ac>
 8009c64:	0800d2b0 	.word	0x0800d2b0
 8009c68:	0800d3a0 	.word	0x0800d3a0
 8009c6c:	4630      	mov	r0, r6
 8009c6e:	f002 fde5 	bl	800c83c <__aeabi_i2d>
 8009c72:	4652      	mov	r2, sl
 8009c74:	465b      	mov	r3, fp
 8009c76:	f002 fe47 	bl	800c908 <__aeabi_dmul>
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	f2c4 031c 	movt	r3, #16412	; 0x401c
 8009c82:	f002 fc8f 	bl	800c5a4 <__adddf3>
 8009c86:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8009c88:	f1a1 7450 	sub.w	r4, r1, #54525952	; 0x3400000
 8009c8c:	4680      	mov	r8, r0
 8009c8e:	46a1      	mov	r9, r4
 8009c90:	2d00      	cmp	r5, #0
 8009c92:	f040 80ac 	bne.w	8009dee <_dtoa_r+0xa86>
 8009c96:	2300      	movs	r3, #0
 8009c98:	2200      	movs	r2, #0
 8009c9a:	f2c4 0314 	movt	r3, #16404	; 0x4014
 8009c9e:	4650      	mov	r0, sl
 8009ca0:	4659      	mov	r1, fp
 8009ca2:	f002 fc7d 	bl	800c5a0 <__aeabi_dsub>
 8009ca6:	4642      	mov	r2, r8
 8009ca8:	4623      	mov	r3, r4
 8009caa:	4682      	mov	sl, r0
 8009cac:	468b      	mov	fp, r1
 8009cae:	f003 f8bb 	bl	800ce28 <__aeabi_dcmpgt>
 8009cb2:	2800      	cmp	r0, #0
 8009cb4:	f040 80c3 	bne.w	8009e3e <_dtoa_r+0xad6>
 8009cb8:	4642      	mov	r2, r8
 8009cba:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
 8009cbe:	4650      	mov	r0, sl
 8009cc0:	4659      	mov	r1, fp
 8009cc2:	f003 f893 	bl	800cdec <__aeabi_dcmplt>
 8009cc6:	2800      	cmp	r0, #0
 8009cc8:	f000 8083 	beq.w	8009dd2 <_dtoa_r+0xa6a>
 8009ccc:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8009cce:	9606      	str	r6, [sp, #24]
 8009cd0:	e666      	b.n	80099a0 <_dtoa_r+0x638>
 8009cd2:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009cd4:	2800      	cmp	r0, #0
 8009cd6:	f000 8147 	beq.w	8009f68 <_dtoa_r+0xc00>
 8009cda:	2c00      	cmp	r4, #0
 8009cdc:	dd05      	ble.n	8009cea <_dtoa_r+0x982>
 8009cde:	4638      	mov	r0, r7
 8009ce0:	9906      	ldr	r1, [sp, #24]
 8009ce2:	4622      	mov	r2, r4
 8009ce4:	f001 f8f8 	bl	800aed8 <__lshift>
 8009ce8:	9006      	str	r0, [sp, #24]
 8009cea:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8009cee:	2d00      	cmp	r5, #0
 8009cf0:	f040 8201 	bne.w	800a0f6 <_dtoa_r+0xd8e>
 8009cf4:	f00a 0001 	and.w	r0, sl, #1
 8009cf8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009cfa:	9c06      	ldr	r4, [sp, #24]
 8009cfc:	900b      	str	r0, [sp, #44]	; 0x2c
 8009cfe:	4631      	mov	r1, r6
 8009d00:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009d02:	f7ff faa1 	bl	8009248 <quorem>
 8009d06:	4621      	mov	r1, r4
 8009d08:	9008      	str	r0, [sp, #32]
 8009d0a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009d0c:	f001 f944 	bl	800af98 <__mcmp>
 8009d10:	4642      	mov	r2, r8
 8009d12:	4681      	mov	r9, r0
 8009d14:	4631      	mov	r1, r6
 8009d16:	4638      	mov	r0, r7
 8009d18:	f001 f95e 	bl	800afd8 <__mdiff>
 8009d1c:	9a08      	ldr	r2, [sp, #32]
 8009d1e:	68c3      	ldr	r3, [r0, #12]
 8009d20:	3230      	adds	r2, #48	; 0x30
 8009d22:	4682      	mov	sl, r0
 8009d24:	9206      	str	r2, [sp, #24]
 8009d26:	f04f 0b01 	mov.w	fp, #1
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d03d      	beq.n	8009daa <_dtoa_r+0xa42>
 8009d2e:	4638      	mov	r0, r7
 8009d30:	4651      	mov	r1, sl
 8009d32:	f000 fefd 	bl	800ab30 <_Bfree>
 8009d36:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009d38:	ea5b 0303 	orrs.w	r3, fp, r3
 8009d3c:	d103      	bne.n	8009d46 <_dtoa_r+0x9de>
 8009d3e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009d40:	2800      	cmp	r0, #0
 8009d42:	f000 8211 	beq.w	800a168 <_dtoa_r+0xe00>
 8009d46:	f1b9 0f00 	cmp.w	r9, #0
 8009d4a:	f2c0 819f 	blt.w	800a08c <_dtoa_r+0xd24>
 8009d4e:	9826      	ldr	r0, [sp, #152]	; 0x98
 8009d50:	ea59 0000 	orrs.w	r0, r9, r0
 8009d54:	d103      	bne.n	8009d5e <_dtoa_r+0x9f6>
 8009d56:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009d58:	2900      	cmp	r1, #0
 8009d5a:	f000 8197 	beq.w	800a08c <_dtoa_r+0xd24>
 8009d5e:	f1bb 0f00 	cmp.w	fp, #0
 8009d62:	f300 81ea 	bgt.w	800a13a <_dtoa_r+0xdd2>
 8009d66:	9a06      	ldr	r2, [sp, #24]
 8009d68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009d6a:	f805 2b01 	strb.w	r2, [r5], #1
 8009d6e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009d70:	1a2b      	subs	r3, r5, r0
 8009d72:	428b      	cmp	r3, r1
 8009d74:	46aa      	mov	sl, r5
 8009d76:	f000 81db 	beq.w	800a130 <_dtoa_r+0xdc8>
 8009d7a:	220a      	movs	r2, #10
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	4638      	mov	r0, r7
 8009d80:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009d82:	f000 fedf 	bl	800ab44 <__multadd>
 8009d86:	4544      	cmp	r4, r8
 8009d88:	900a      	str	r0, [sp, #40]	; 0x28
 8009d8a:	d027      	beq.n	8009ddc <_dtoa_r+0xa74>
 8009d8c:	4621      	mov	r1, r4
 8009d8e:	220a      	movs	r2, #10
 8009d90:	2300      	movs	r3, #0
 8009d92:	4638      	mov	r0, r7
 8009d94:	f000 fed6 	bl	800ab44 <__multadd>
 8009d98:	4641      	mov	r1, r8
 8009d9a:	4604      	mov	r4, r0
 8009d9c:	220a      	movs	r2, #10
 8009d9e:	4638      	mov	r0, r7
 8009da0:	2300      	movs	r3, #0
 8009da2:	f000 fecf 	bl	800ab44 <__multadd>
 8009da6:	4680      	mov	r8, r0
 8009da8:	e7a9      	b.n	8009cfe <_dtoa_r+0x996>
 8009daa:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009dac:	4651      	mov	r1, sl
 8009dae:	f001 f8f3 	bl	800af98 <__mcmp>
 8009db2:	4683      	mov	fp, r0
 8009db4:	e7bb      	b.n	8009d2e <_dtoa_r+0x9c6>
 8009db6:	4638      	mov	r0, r7
 8009db8:	4621      	mov	r1, r4
 8009dba:	f000 feb9 	bl	800ab30 <_Bfree>
 8009dbe:	e587      	b.n	80098d0 <_dtoa_r+0x568>
 8009dc0:	231c      	movs	r3, #28
 8009dc2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8009dc4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009dc6:	18c0      	adds	r0, r0, r3
 8009dc8:	18c9      	adds	r1, r1, r3
 8009dca:	900f      	str	r0, [sp, #60]	; 0x3c
 8009dcc:	18e4      	adds	r4, r4, r3
 8009dce:	910b      	str	r1, [sp, #44]	; 0x2c
 8009dd0:	e538      	b.n	8009844 <_dtoa_r+0x4dc>
 8009dd2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009dd6:	4682      	mov	sl, r0
 8009dd8:	468b      	mov	fp, r1
 8009dda:	e406      	b.n	80095ea <_dtoa_r+0x282>
 8009ddc:	4621      	mov	r1, r4
 8009dde:	4638      	mov	r0, r7
 8009de0:	220a      	movs	r2, #10
 8009de2:	2300      	movs	r3, #0
 8009de4:	f000 feae 	bl	800ab44 <__multadd>
 8009de8:	4604      	mov	r4, r0
 8009dea:	4680      	mov	r8, r0
 8009dec:	e787      	b.n	8009cfe <_dtoa_r+0x996>
 8009dee:	9c05      	ldr	r4, [sp, #20]
 8009df0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8009df2:	9417      	str	r4, [sp, #92]	; 0x5c
 8009df4:	e672      	b.n	8009adc <_dtoa_r+0x774>
 8009df6:	9d05      	ldr	r5, [sp, #20]
 8009df8:	426c      	negs	r4, r5
 8009dfa:	2c00      	cmp	r4, #0
 8009dfc:	f000 80fb 	beq.w	8009ff6 <_dtoa_r+0xc8e>
 8009e00:	4ba0      	ldr	r3, [pc, #640]	; (800a084 <_dtoa_r+0xd1c>)
 8009e02:	f004 020f 	and.w	r2, r4, #15
 8009e06:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009e0a:	4650      	mov	r0, sl
 8009e0c:	4659      	mov	r1, fp
 8009e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e12:	f002 fd79 	bl	800c908 <__aeabi_dmul>
 8009e16:	1124      	asrs	r4, r4, #4
 8009e18:	4682      	mov	sl, r0
 8009e1a:	468b      	mov	fp, r1
 8009e1c:	f000 80eb 	beq.w	8009ff6 <_dtoa_r+0xc8e>
 8009e20:	4d99      	ldr	r5, [pc, #612]	; (800a088 <_dtoa_r+0xd20>)
 8009e22:	2602      	movs	r6, #2
 8009e24:	07e2      	lsls	r2, r4, #31
 8009e26:	d504      	bpl.n	8009e32 <_dtoa_r+0xaca>
 8009e28:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009e2c:	f002 fd6c 	bl	800c908 <__aeabi_dmul>
 8009e30:	3601      	adds	r6, #1
 8009e32:	3508      	adds	r5, #8
 8009e34:	1064      	asrs	r4, r4, #1
 8009e36:	d1f5      	bne.n	8009e24 <_dtoa_r+0xabc>
 8009e38:	4682      	mov	sl, r0
 8009e3a:	468b      	mov	fp, r1
 8009e3c:	e612      	b.n	8009a64 <_dtoa_r+0x6fc>
 8009e3e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8009e40:	9606      	str	r6, [sp, #24]
 8009e42:	e530      	b.n	80098a6 <_dtoa_r+0x53e>
 8009e44:	498f      	ldr	r1, [pc, #572]	; (800a084 <_dtoa_r+0xd1c>)
 8009e46:	1e6c      	subs	r4, r5, #1
 8009e48:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8009e4c:	4642      	mov	r2, r8
 8009e4e:	464b      	mov	r3, r9
 8009e50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e54:	9406      	str	r4, [sp, #24]
 8009e56:	f002 fd57 	bl	800c908 <__aeabi_dmul>
 8009e5a:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
 8009e5e:	4659      	mov	r1, fp
 8009e60:	4650      	mov	r0, sl
 8009e62:	f002 ffeb 	bl	800ce3c <__aeabi_d2iz>
 8009e66:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009e68:	4604      	mov	r4, r0
 8009e6a:	9111      	str	r1, [sp, #68]	; 0x44
 8009e6c:	f002 fce6 	bl	800c83c <__aeabi_i2d>
 8009e70:	460b      	mov	r3, r1
 8009e72:	4602      	mov	r2, r0
 8009e74:	4659      	mov	r1, fp
 8009e76:	4650      	mov	r0, sl
 8009e78:	f002 fb92 	bl	800c5a0 <__aeabi_dsub>
 8009e7c:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8009e80:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8009e82:	f804 3b01 	strb.w	r3, [r4], #1
 8009e86:	2d01      	cmp	r5, #1
 8009e88:	4682      	mov	sl, r0
 8009e8a:	468b      	mov	fp, r1
 8009e8c:	9411      	str	r4, [sp, #68]	; 0x44
 8009e8e:	46a0      	mov	r8, r4
 8009e90:	d020      	beq.n	8009ed4 <_dtoa_r+0xb6c>
 8009e92:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8009e94:	1e66      	subs	r6, r4, #1
 8009e96:	1976      	adds	r6, r6, r5
 8009e98:	2300      	movs	r3, #0
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8009ea0:	f002 fd32 	bl	800c908 <__aeabi_dmul>
 8009ea4:	4689      	mov	r9, r1
 8009ea6:	4680      	mov	r8, r0
 8009ea8:	f002 ffc8 	bl	800ce3c <__aeabi_d2iz>
 8009eac:	4605      	mov	r5, r0
 8009eae:	f002 fcc5 	bl	800c83c <__aeabi_i2d>
 8009eb2:	3530      	adds	r5, #48	; 0x30
 8009eb4:	4602      	mov	r2, r0
 8009eb6:	460b      	mov	r3, r1
 8009eb8:	4640      	mov	r0, r8
 8009eba:	4649      	mov	r1, r9
 8009ebc:	f002 fb70 	bl	800c5a0 <__aeabi_dsub>
 8009ec0:	f804 5f01 	strb.w	r5, [r4, #1]!
 8009ec4:	42b4      	cmp	r4, r6
 8009ec6:	d1e7      	bne.n	8009e98 <_dtoa_r+0xb30>
 8009ec8:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8009eca:	9c06      	ldr	r4, [sp, #24]
 8009ecc:	4682      	mov	sl, r0
 8009ece:	468b      	mov	fp, r1
 8009ed0:	eb05 0804 	add.w	r8, r5, r4
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
 8009edc:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 8009ee0:	f002 fb60 	bl	800c5a4 <__adddf3>
 8009ee4:	4602      	mov	r2, r0
 8009ee6:	460b      	mov	r3, r1
 8009ee8:	4650      	mov	r0, sl
 8009eea:	4659      	mov	r1, fp
 8009eec:	f002 ff9c 	bl	800ce28 <__aeabi_dcmpgt>
 8009ef0:	2800      	cmp	r0, #0
 8009ef2:	f000 808a 	beq.w	800a00a <_dtoa_r+0xca2>
 8009ef6:	f818 6c01 	ldrb.w	r6, [r8, #-1]
 8009efa:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009efc:	e422      	b.n	8009744 <_dtoa_r+0x3dc>
 8009efe:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009f00:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8009f04:	e4e8      	b.n	80098d8 <_dtoa_r+0x570>
 8009f06:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009f08:	4631      	mov	r1, r6
 8009f0a:	f001 f845 	bl	800af98 <__mcmp>
 8009f0e:	2800      	cmp	r0, #0
 8009f10:	f6bf acad 	bge.w	800986e <_dtoa_r+0x506>
 8009f14:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009f16:	220a      	movs	r2, #10
 8009f18:	4638      	mov	r0, r7
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	f000 fe12 	bl	800ab44 <__multadd>
 8009f20:	9905      	ldr	r1, [sp, #20]
 8009f22:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009f24:	900a      	str	r0, [sp, #40]	; 0x28
 8009f26:	3901      	subs	r1, #1
 8009f28:	9105      	str	r1, [sp, #20]
 8009f2a:	2a00      	cmp	r2, #0
 8009f2c:	f040 8136 	bne.w	800a19c <_dtoa_r+0xe34>
 8009f30:	9815      	ldr	r0, [sp, #84]	; 0x54
 8009f32:	900e      	str	r0, [sp, #56]	; 0x38
 8009f34:	e49b      	b.n	800986e <_dtoa_r+0x506>
 8009f36:	6933      	ldr	r3, [r6, #16]
 8009f38:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009f3c:	6918      	ldr	r0, [r3, #16]
 8009f3e:	f000 fe91 	bl	800ac64 <__hi0bits>
 8009f42:	f1c0 0320 	rsb	r3, r0, #32
 8009f46:	e46a      	b.n	800981e <_dtoa_r+0x4b6>
 8009f48:	f1b9 0f0e 	cmp.w	r9, #14
 8009f4c:	bf8c      	ite	hi
 8009f4e:	2300      	movhi	r3, #0
 8009f50:	2301      	movls	r3, #1
 8009f52:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8009f56:	2100      	movs	r1, #0
 8009f58:	6479      	str	r1, [r7, #68]	; 0x44
 8009f5a:	401c      	ands	r4, r3
 8009f5c:	e543      	b.n	80099e6 <_dtoa_r+0x67e>
 8009f5e:	2301      	movs	r3, #1
 8009f60:	9315      	str	r3, [sp, #84]	; 0x54
 8009f62:	930e      	str	r3, [sp, #56]	; 0x38
 8009f64:	9327      	str	r3, [sp, #156]	; 0x9c
 8009f66:	e7f6      	b.n	8009f56 <_dtoa_r+0xbee>
 8009f68:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8009f6a:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 8009f6e:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8009f72:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009f74:	e006      	b.n	8009f84 <_dtoa_r+0xc1c>
 8009f76:	4651      	mov	r1, sl
 8009f78:	4638      	mov	r0, r7
 8009f7a:	220a      	movs	r2, #10
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	f000 fde1 	bl	800ab44 <__multadd>
 8009f82:	4682      	mov	sl, r0
 8009f84:	4631      	mov	r1, r6
 8009f86:	4650      	mov	r0, sl
 8009f88:	f7ff f95e 	bl	8009248 <quorem>
 8009f8c:	3030      	adds	r0, #48	; 0x30
 8009f8e:	5528      	strb	r0, [r5, r4]
 8009f90:	3401      	adds	r4, #1
 8009f92:	45a0      	cmp	r8, r4
 8009f94:	dcef      	bgt.n	8009f76 <_dtoa_r+0xc0e>
 8009f96:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8009f98:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8009f9c:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8009fa0:	4681      	mov	r9, r0
 8009fa2:	2c01      	cmp	r4, #1
 8009fa4:	bfac      	ite	ge
 8009fa6:	44a2      	addge	sl, r4
 8009fa8:	f10a 0a01 	addlt.w	sl, sl, #1
 8009fac:	2400      	movs	r4, #0
 8009fae:	2201      	movs	r2, #1
 8009fb0:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009fb2:	4638      	mov	r0, r7
 8009fb4:	f000 ff90 	bl	800aed8 <__lshift>
 8009fb8:	4631      	mov	r1, r6
 8009fba:	900a      	str	r0, [sp, #40]	; 0x28
 8009fbc:	f000 ffec 	bl	800af98 <__mcmp>
 8009fc0:	2800      	cmp	r0, #0
 8009fc2:	f340 8082 	ble.w	800a0ca <_dtoa_r+0xd62>
 8009fc6:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
 8009fca:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009fcc:	1c6a      	adds	r2, r5, #1
 8009fce:	e003      	b.n	8009fd8 <_dtoa_r+0xc70>
 8009fd0:	f81a 3c02 	ldrb.w	r3, [sl, #-2]
 8009fd4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009fd8:	2b39      	cmp	r3, #57	; 0x39
 8009fda:	f040 8084 	bne.w	800a0e6 <_dtoa_r+0xd7e>
 8009fde:	4592      	cmp	sl, r2
 8009fe0:	d1f6      	bne.n	8009fd0 <_dtoa_r+0xc68>
 8009fe2:	9805      	ldr	r0, [sp, #20]
 8009fe4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009fe6:	3001      	adds	r0, #1
 8009fe8:	2331      	movs	r3, #49	; 0x31
 8009fea:	9005      	str	r0, [sp, #20]
 8009fec:	f80a 3c01 	strb.w	r3, [sl, #-1]
 8009ff0:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8009ff4:	e461      	b.n	80098ba <_dtoa_r+0x552>
 8009ff6:	2602      	movs	r6, #2
 8009ff8:	e534      	b.n	8009a64 <_dtoa_r+0x6fc>
 8009ffa:	4638      	mov	r0, r7
 8009ffc:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009ffe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a000:	f000 ff1e 	bl	800ae40 <__pow5mult>
 800a004:	900a      	str	r0, [sp, #40]	; 0x28
 800a006:	f7ff bbf2 	b.w	80097ee <_dtoa_r+0x486>
 800a00a:	2100      	movs	r1, #0
 800a00c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800a010:	2000      	movs	r0, #0
 800a012:	f6c3 71e0 	movt	r1, #16352	; 0x3fe0
 800a016:	f002 fac3 	bl	800c5a0 <__aeabi_dsub>
 800a01a:	4602      	mov	r2, r0
 800a01c:	460b      	mov	r3, r1
 800a01e:	4650      	mov	r0, sl
 800a020:	4659      	mov	r1, fp
 800a022:	f002 fee3 	bl	800cdec <__aeabi_dcmplt>
 800a026:	2800      	cmp	r0, #0
 800a028:	f43f aed3 	beq.w	8009dd2 <_dtoa_r+0xa6a>
 800a02c:	4642      	mov	r2, r8
 800a02e:	f818 3d01 	ldrb.w	r3, [r8, #-1]!
 800a032:	2b30      	cmp	r3, #48	; 0x30
 800a034:	d0fa      	beq.n	800a02c <_dtoa_r+0xcc4>
 800a036:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 800a038:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a03a:	9405      	str	r4, [sp, #20]
 800a03c:	9209      	str	r2, [sp, #36]	; 0x24
 800a03e:	e44b      	b.n	80098d8 <_dtoa_r+0x570>
 800a040:	4638      	mov	r0, r7
 800a042:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a044:	f000 fefc 	bl	800ae40 <__pow5mult>
 800a048:	900a      	str	r0, [sp, #40]	; 0x28
 800a04a:	f7ff bbd0 	b.w	80097ee <_dtoa_r+0x486>
 800a04e:	2600      	movs	r6, #0
 800a050:	9606      	str	r6, [sp, #24]
 800a052:	e4a5      	b.n	80099a0 <_dtoa_r+0x638>
 800a054:	9d16      	ldr	r5, [sp, #88]	; 0x58
 800a056:	2d00      	cmp	r5, #0
 800a058:	d064      	beq.n	800a124 <_dtoa_r+0xdbc>
 800a05a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a05e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800a060:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800a062:	e47d      	b.n	8009960 <_dtoa_r+0x5f8>
 800a064:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a066:	f7ff bb6d 	b.w	8009744 <_dtoa_r+0x3dc>
 800a06a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 800a06c:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 800a070:	1c72      	adds	r2, r6, #1
 800a072:	b2d2      	uxtb	r2, r2
 800a074:	9405      	str	r4, [sp, #20]
 800a076:	f7ff bb7b 	b.w	8009770 <_dtoa_r+0x408>
 800a07a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800a07c:	2300      	movs	r3, #0
 800a07e:	1b04      	subs	r4, r0, r4
 800a080:	e46e      	b.n	8009960 <_dtoa_r+0x5f8>
 800a082:	bf00      	nop
 800a084:	0800d2b0 	.word	0x0800d2b0
 800a088:	0800d3a0 	.word	0x0800d3a0
 800a08c:	f1bb 0f00 	cmp.w	fp, #0
 800a090:	f8dd 9018 	ldr.w	r9, [sp, #24]
 800a094:	dd10      	ble.n	800a0b8 <_dtoa_r+0xd50>
 800a096:	2201      	movs	r2, #1
 800a098:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a09a:	4638      	mov	r0, r7
 800a09c:	f000 ff1c 	bl	800aed8 <__lshift>
 800a0a0:	4631      	mov	r1, r6
 800a0a2:	900a      	str	r0, [sp, #40]	; 0x28
 800a0a4:	f000 ff78 	bl	800af98 <__mcmp>
 800a0a8:	2800      	cmp	r0, #0
 800a0aa:	dd6b      	ble.n	800a184 <_dtoa_r+0xe1c>
 800a0ac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a0b0:	d053      	beq.n	800a15a <_dtoa_r+0xdf2>
 800a0b2:	9b08      	ldr	r3, [sp, #32]
 800a0b4:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800a0b8:	462b      	mov	r3, r5
 800a0ba:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a0bc:	f803 9b01 	strb.w	r9, [r3], #1
 800a0c0:	f8cd 8018 	str.w	r8, [sp, #24]
 800a0c4:	9309      	str	r3, [sp, #36]	; 0x24
 800a0c6:	f7ff bbf8 	b.w	80098ba <_dtoa_r+0x552>
 800a0ca:	d103      	bne.n	800a0d4 <_dtoa_r+0xd6c>
 800a0cc:	f019 0f01 	tst.w	r9, #1
 800a0d0:	f47f af79 	bne.w	8009fc6 <_dtoa_r+0xc5e>
 800a0d4:	4652      	mov	r2, sl
 800a0d6:	f81a 3d01 	ldrb.w	r3, [sl, #-1]!
 800a0da:	2b30      	cmp	r3, #48	; 0x30
 800a0dc:	d0fa      	beq.n	800a0d4 <_dtoa_r+0xd6c>
 800a0de:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a0e0:	9209      	str	r2, [sp, #36]	; 0x24
 800a0e2:	f7ff bbea 	b.w	80098ba <_dtoa_r+0x552>
 800a0e6:	3301      	adds	r3, #1
 800a0e8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a0ea:	f80a 3c01 	strb.w	r3, [sl, #-1]
 800a0ee:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800a0f2:	f7ff bbe2 	b.w	80098ba <_dtoa_r+0x552>
 800a0f6:	9c06      	ldr	r4, [sp, #24]
 800a0f8:	4638      	mov	r0, r7
 800a0fa:	6861      	ldr	r1, [r4, #4]
 800a0fc:	f000 fcf2 	bl	800aae4 <_Balloc>
 800a100:	9d06      	ldr	r5, [sp, #24]
 800a102:	692a      	ldr	r2, [r5, #16]
 800a104:	3202      	adds	r2, #2
 800a106:	4604      	mov	r4, r0
 800a108:	0092      	lsls	r2, r2, #2
 800a10a:	f105 010c 	add.w	r1, r5, #12
 800a10e:	f100 000c 	add.w	r0, r0, #12
 800a112:	f000 fc9f 	bl	800aa54 <memcpy>
 800a116:	4638      	mov	r0, r7
 800a118:	4621      	mov	r1, r4
 800a11a:	2201      	movs	r2, #1
 800a11c:	f000 fedc 	bl	800aed8 <__lshift>
 800a120:	4680      	mov	r8, r0
 800a122:	e5e7      	b.n	8009cf4 <_dtoa_r+0x98c>
 800a124:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800a126:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800a128:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800a12a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a12e:	e417      	b.n	8009960 <_dtoa_r+0x5f8>
 800a130:	f8dd 9018 	ldr.w	r9, [sp, #24]
 800a134:	f8cd 8018 	str.w	r8, [sp, #24]
 800a138:	e739      	b.n	8009fae <_dtoa_r+0xc46>
 800a13a:	f8dd 9018 	ldr.w	r9, [sp, #24]
 800a13e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a142:	d00a      	beq.n	800a15a <_dtoa_r+0xdf2>
 800a144:	462b      	mov	r3, r5
 800a146:	f109 0901 	add.w	r9, r9, #1
 800a14a:	f803 9b01 	strb.w	r9, [r3], #1
 800a14e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a150:	f8cd 8018 	str.w	r8, [sp, #24]
 800a154:	9309      	str	r3, [sp, #36]	; 0x24
 800a156:	f7ff bbb0 	b.w	80098ba <_dtoa_r+0x552>
 800a15a:	46aa      	mov	sl, r5
 800a15c:	2339      	movs	r3, #57	; 0x39
 800a15e:	f80a 3b01 	strb.w	r3, [sl], #1
 800a162:	f8cd 8018 	str.w	r8, [sp, #24]
 800a166:	e730      	b.n	8009fca <_dtoa_r+0xc62>
 800a168:	464b      	mov	r3, r9
 800a16a:	f8dd 9018 	ldr.w	r9, [sp, #24]
 800a16e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a172:	d0f2      	beq.n	800a15a <_dtoa_r+0xdf2>
 800a174:	2b00      	cmp	r3, #0
 800a176:	dc9c      	bgt.n	800a0b2 <_dtoa_r+0xd4a>
 800a178:	e79e      	b.n	800a0b8 <_dtoa_r+0xd50>
 800a17a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800a17c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a17e:	9409      	str	r4, [sp, #36]	; 0x24
 800a180:	f7ff bbaa 	b.w	80098d8 <_dtoa_r+0x570>
 800a184:	d198      	bne.n	800a0b8 <_dtoa_r+0xd50>
 800a186:	f019 0f01 	tst.w	r9, #1
 800a18a:	d095      	beq.n	800a0b8 <_dtoa_r+0xd50>
 800a18c:	e78e      	b.n	800a0ac <_dtoa_r+0xd44>
 800a18e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 800a190:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a192:	9405      	str	r4, [sp, #20]
 800a194:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800a196:	9409      	str	r4, [sp, #36]	; 0x24
 800a198:	f7ff bb9e 	b.w	80098d8 <_dtoa_r+0x570>
 800a19c:	2300      	movs	r3, #0
 800a19e:	4638      	mov	r0, r7
 800a1a0:	9906      	ldr	r1, [sp, #24]
 800a1a2:	220a      	movs	r2, #10
 800a1a4:	f000 fcce 	bl	800ab44 <__multadd>
 800a1a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a1aa:	9006      	str	r0, [sp, #24]
 800a1ac:	930e      	str	r3, [sp, #56]	; 0x38
 800a1ae:	f7ff bb5e 	b.w	800986e <_dtoa_r+0x506>
 800a1b2:	f43f ab47 	beq.w	8009844 <_dtoa_r+0x4dc>
 800a1b6:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
 800a1ba:	e602      	b.n	8009dc2 <_dtoa_r+0xa5a>
 800a1bc:	f3af 8000 	nop.w

0800a1c0 <_malloc_trim_r>:
 800a1c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1c2:	4d22      	ldr	r5, [pc, #136]	; (800a24c <_malloc_trim_r+0x8c>)
 800a1c4:	460f      	mov	r7, r1
 800a1c6:	4604      	mov	r4, r0
 800a1c8:	f000 fc88 	bl	800aadc <__malloc_lock>
 800a1cc:	68ab      	ldr	r3, [r5, #8]
 800a1ce:	685e      	ldr	r6, [r3, #4]
 800a1d0:	f026 0603 	bic.w	r6, r6, #3
 800a1d4:	f606 73ef 	addw	r3, r6, #4079	; 0xfef
 800a1d8:	1bdf      	subs	r7, r3, r7
 800a1da:	0b3f      	lsrs	r7, r7, #12
 800a1dc:	3f01      	subs	r7, #1
 800a1de:	033f      	lsls	r7, r7, #12
 800a1e0:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
 800a1e4:	4620      	mov	r0, r4
 800a1e6:	db07      	blt.n	800a1f8 <_malloc_trim_r+0x38>
 800a1e8:	2100      	movs	r1, #0
 800a1ea:	f001 f907 	bl	800b3fc <_sbrk_r>
 800a1ee:	68ab      	ldr	r3, [r5, #8]
 800a1f0:	199b      	adds	r3, r3, r6
 800a1f2:	4298      	cmp	r0, r3
 800a1f4:	4620      	mov	r0, r4
 800a1f6:	d003      	beq.n	800a200 <_malloc_trim_r+0x40>
 800a1f8:	f000 fc72 	bl	800aae0 <__malloc_unlock>
 800a1fc:	2000      	movs	r0, #0
 800a1fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a200:	4279      	negs	r1, r7
 800a202:	f001 f8fb 	bl	800b3fc <_sbrk_r>
 800a206:	3001      	adds	r0, #1
 800a208:	d00d      	beq.n	800a226 <_malloc_trim_r+0x66>
 800a20a:	4b11      	ldr	r3, [pc, #68]	; (800a250 <_malloc_trim_r+0x90>)
 800a20c:	68aa      	ldr	r2, [r5, #8]
 800a20e:	6819      	ldr	r1, [r3, #0]
 800a210:	1bf6      	subs	r6, r6, r7
 800a212:	f046 0601 	orr.w	r6, r6, #1
 800a216:	1bcf      	subs	r7, r1, r7
 800a218:	4620      	mov	r0, r4
 800a21a:	6056      	str	r6, [r2, #4]
 800a21c:	601f      	str	r7, [r3, #0]
 800a21e:	f000 fc5f 	bl	800aae0 <__malloc_unlock>
 800a222:	2001      	movs	r0, #1
 800a224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a226:	2100      	movs	r1, #0
 800a228:	4620      	mov	r0, r4
 800a22a:	f001 f8e7 	bl	800b3fc <_sbrk_r>
 800a22e:	68ab      	ldr	r3, [r5, #8]
 800a230:	1ac2      	subs	r2, r0, r3
 800a232:	2a0f      	cmp	r2, #15
 800a234:	dd07      	ble.n	800a246 <_malloc_trim_r+0x86>
 800a236:	4907      	ldr	r1, [pc, #28]	; (800a254 <_malloc_trim_r+0x94>)
 800a238:	6809      	ldr	r1, [r1, #0]
 800a23a:	1a40      	subs	r0, r0, r1
 800a23c:	4904      	ldr	r1, [pc, #16]	; (800a250 <_malloc_trim_r+0x90>)
 800a23e:	f042 0201 	orr.w	r2, r2, #1
 800a242:	6008      	str	r0, [r1, #0]
 800a244:	605a      	str	r2, [r3, #4]
 800a246:	4620      	mov	r0, r4
 800a248:	e7d6      	b.n	800a1f8 <_malloc_trim_r+0x38>
 800a24a:	bf00      	nop
 800a24c:	2000054c 	.word	0x2000054c
 800a250:	20000974 	.word	0x20000974
 800a254:	20000954 	.word	0x20000954

0800a258 <_free_r>:
 800a258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a25c:	460d      	mov	r5, r1
 800a25e:	4604      	mov	r4, r0
 800a260:	2900      	cmp	r1, #0
 800a262:	d06f      	beq.n	800a344 <_free_r+0xec>
 800a264:	f000 fc3a 	bl	800aadc <__malloc_lock>
 800a268:	f855 0c04 	ldr.w	r0, [r5, #-4]
 800a26c:	4e58      	ldr	r6, [pc, #352]	; (800a3d0 <_free_r+0x178>)
 800a26e:	f1a5 0108 	sub.w	r1, r5, #8
 800a272:	f020 0301 	bic.w	r3, r0, #1
 800a276:	18ca      	adds	r2, r1, r3
 800a278:	f8d6 c008 	ldr.w	ip, [r6, #8]
 800a27c:	6857      	ldr	r7, [r2, #4]
 800a27e:	4594      	cmp	ip, r2
 800a280:	f027 0703 	bic.w	r7, r7, #3
 800a284:	d07c      	beq.n	800a380 <_free_r+0x128>
 800a286:	f010 0001 	ands.w	r0, r0, #1
 800a28a:	6057      	str	r7, [r2, #4]
 800a28c:	d049      	beq.n	800a322 <_free_r+0xca>
 800a28e:	2000      	movs	r0, #0
 800a290:	19d5      	adds	r5, r2, r7
 800a292:	686d      	ldr	r5, [r5, #4]
 800a294:	f015 0f01 	tst.w	r5, #1
 800a298:	d106      	bne.n	800a2a8 <_free_r+0x50>
 800a29a:	19db      	adds	r3, r3, r7
 800a29c:	6895      	ldr	r5, [r2, #8]
 800a29e:	2800      	cmp	r0, #0
 800a2a0:	d062      	beq.n	800a368 <_free_r+0x110>
 800a2a2:	68d2      	ldr	r2, [r2, #12]
 800a2a4:	60ea      	str	r2, [r5, #12]
 800a2a6:	6095      	str	r5, [r2, #8]
 800a2a8:	f043 0201 	orr.w	r2, r3, #1
 800a2ac:	604a      	str	r2, [r1, #4]
 800a2ae:	50cb      	str	r3, [r1, r3]
 800a2b0:	bb90      	cbnz	r0, 800a318 <_free_r+0xc0>
 800a2b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a2b6:	d347      	bcc.n	800a348 <_free_r+0xf0>
 800a2b8:	099d      	lsrs	r5, r3, #6
 800a2ba:	3538      	adds	r5, #56	; 0x38
 800a2bc:	0a5a      	lsrs	r2, r3, #9
 800a2be:	00e8      	lsls	r0, r5, #3
 800a2c0:	2a04      	cmp	r2, #4
 800a2c2:	d916      	bls.n	800a2f2 <_free_r+0x9a>
 800a2c4:	f102 055b 	add.w	r5, r2, #91	; 0x5b
 800a2c8:	00e8      	lsls	r0, r5, #3
 800a2ca:	2a14      	cmp	r2, #20
 800a2cc:	d911      	bls.n	800a2f2 <_free_r+0x9a>
 800a2ce:	0b1d      	lsrs	r5, r3, #12
 800a2d0:	356e      	adds	r5, #110	; 0x6e
 800a2d2:	00e8      	lsls	r0, r5, #3
 800a2d4:	2a54      	cmp	r2, #84	; 0x54
 800a2d6:	d90c      	bls.n	800a2f2 <_free_r+0x9a>
 800a2d8:	0bdd      	lsrs	r5, r3, #15
 800a2da:	3577      	adds	r5, #119	; 0x77
 800a2dc:	00e8      	lsls	r0, r5, #3
 800a2de:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800a2e2:	d906      	bls.n	800a2f2 <_free_r+0x9a>
 800a2e4:	f240 5054 	movw	r0, #1364	; 0x554
 800a2e8:	4282      	cmp	r2, r0
 800a2ea:	d86d      	bhi.n	800a3c8 <_free_r+0x170>
 800a2ec:	0c9d      	lsrs	r5, r3, #18
 800a2ee:	357c      	adds	r5, #124	; 0x7c
 800a2f0:	00e8      	lsls	r0, r5, #3
 800a2f2:	1986      	adds	r6, r0, r6
 800a2f4:	4836      	ldr	r0, [pc, #216]	; (800a3d0 <_free_r+0x178>)
 800a2f6:	68b2      	ldr	r2, [r6, #8]
 800a2f8:	42b2      	cmp	r2, r6
 800a2fa:	d103      	bne.n	800a304 <_free_r+0xac>
 800a2fc:	e05b      	b.n	800a3b6 <_free_r+0x15e>
 800a2fe:	6892      	ldr	r2, [r2, #8]
 800a300:	4296      	cmp	r6, r2
 800a302:	d004      	beq.n	800a30e <_free_r+0xb6>
 800a304:	6850      	ldr	r0, [r2, #4]
 800a306:	f020 0003 	bic.w	r0, r0, #3
 800a30a:	4283      	cmp	r3, r0
 800a30c:	d3f7      	bcc.n	800a2fe <_free_r+0xa6>
 800a30e:	68d3      	ldr	r3, [r2, #12]
 800a310:	60cb      	str	r3, [r1, #12]
 800a312:	608a      	str	r2, [r1, #8]
 800a314:	60d1      	str	r1, [r2, #12]
 800a316:	6099      	str	r1, [r3, #8]
 800a318:	4620      	mov	r0, r4
 800a31a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a31e:	f000 bbdf 	b.w	800aae0 <__malloc_unlock>
 800a322:	f855 cc08 	ldr.w	ip, [r5, #-8]
 800a326:	ebcc 0101 	rsb	r1, ip, r1
 800a32a:	f106 0808 	add.w	r8, r6, #8
 800a32e:	688d      	ldr	r5, [r1, #8]
 800a330:	4545      	cmp	r5, r8
 800a332:	4463      	add	r3, ip
 800a334:	d03d      	beq.n	800a3b2 <_free_r+0x15a>
 800a336:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 800a33a:	f8c5 c00c 	str.w	ip, [r5, #12]
 800a33e:	f8cc 5008 	str.w	r5, [ip, #8]
 800a342:	e7a5      	b.n	800a290 <_free_r+0x38>
 800a344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a348:	08db      	lsrs	r3, r3, #3
 800a34a:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 800a34e:	6875      	ldr	r5, [r6, #4]
 800a350:	6890      	ldr	r0, [r2, #8]
 800a352:	60ca      	str	r2, [r1, #12]
 800a354:	109b      	asrs	r3, r3, #2
 800a356:	2701      	movs	r7, #1
 800a358:	fa17 f303 	lsls.w	r3, r7, r3
 800a35c:	432b      	orrs	r3, r5
 800a35e:	6088      	str	r0, [r1, #8]
 800a360:	6073      	str	r3, [r6, #4]
 800a362:	6091      	str	r1, [r2, #8]
 800a364:	60c1      	str	r1, [r0, #12]
 800a366:	e7d7      	b.n	800a318 <_free_r+0xc0>
 800a368:	4f1a      	ldr	r7, [pc, #104]	; (800a3d4 <_free_r+0x17c>)
 800a36a:	42bd      	cmp	r5, r7
 800a36c:	d199      	bne.n	800a2a2 <_free_r+0x4a>
 800a36e:	f043 0201 	orr.w	r2, r3, #1
 800a372:	6171      	str	r1, [r6, #20]
 800a374:	6131      	str	r1, [r6, #16]
 800a376:	60cd      	str	r5, [r1, #12]
 800a378:	608d      	str	r5, [r1, #8]
 800a37a:	604a      	str	r2, [r1, #4]
 800a37c:	50cb      	str	r3, [r1, r3]
 800a37e:	e7cb      	b.n	800a318 <_free_r+0xc0>
 800a380:	07c2      	lsls	r2, r0, #31
 800a382:	443b      	add	r3, r7
 800a384:	d407      	bmi.n	800a396 <_free_r+0x13e>
 800a386:	f855 2c08 	ldr.w	r2, [r5, #-8]
 800a38a:	1a89      	subs	r1, r1, r2
 800a38c:	189b      	adds	r3, r3, r2
 800a38e:	6888      	ldr	r0, [r1, #8]
 800a390:	68ca      	ldr	r2, [r1, #12]
 800a392:	60c2      	str	r2, [r0, #12]
 800a394:	6090      	str	r0, [r2, #8]
 800a396:	4a10      	ldr	r2, [pc, #64]	; (800a3d8 <_free_r+0x180>)
 800a398:	60b1      	str	r1, [r6, #8]
 800a39a:	6812      	ldr	r2, [r2, #0]
 800a39c:	f043 0001 	orr.w	r0, r3, #1
 800a3a0:	4293      	cmp	r3, r2
 800a3a2:	6048      	str	r0, [r1, #4]
 800a3a4:	d3b8      	bcc.n	800a318 <_free_r+0xc0>
 800a3a6:	4b0d      	ldr	r3, [pc, #52]	; (800a3dc <_free_r+0x184>)
 800a3a8:	4620      	mov	r0, r4
 800a3aa:	6819      	ldr	r1, [r3, #0]
 800a3ac:	f7ff ff08 	bl	800a1c0 <_malloc_trim_r>
 800a3b0:	e7b2      	b.n	800a318 <_free_r+0xc0>
 800a3b2:	2001      	movs	r0, #1
 800a3b4:	e76c      	b.n	800a290 <_free_r+0x38>
 800a3b6:	6843      	ldr	r3, [r0, #4]
 800a3b8:	10ad      	asrs	r5, r5, #2
 800a3ba:	2601      	movs	r6, #1
 800a3bc:	fa16 f505 	lsls.w	r5, r6, r5
 800a3c0:	432b      	orrs	r3, r5
 800a3c2:	6043      	str	r3, [r0, #4]
 800a3c4:	4613      	mov	r3, r2
 800a3c6:	e7a3      	b.n	800a310 <_free_r+0xb8>
 800a3c8:	f44f 707c 	mov.w	r0, #1008	; 0x3f0
 800a3cc:	257e      	movs	r5, #126	; 0x7e
 800a3ce:	e790      	b.n	800a2f2 <_free_r+0x9a>
 800a3d0:	2000054c 	.word	0x2000054c
 800a3d4:	20000554 	.word	0x20000554
 800a3d8:	20000958 	.word	0x20000958
 800a3dc:	20000970 	.word	0x20000970

0800a3e0 <_setlocale_r>:
 800a3e0:	b510      	push	{r4, lr}
 800a3e2:	4614      	mov	r4, r2
 800a3e4:	b122      	cbz	r2, 800a3f0 <_setlocale_r+0x10>
 800a3e6:	4610      	mov	r0, r2
 800a3e8:	490b      	ldr	r1, [pc, #44]	; (800a418 <_setlocale_r+0x38>)
 800a3ea:	f001 f819 	bl	800b420 <strcmp>
 800a3ee:	b908      	cbnz	r0, 800a3f4 <_setlocale_r+0x14>
 800a3f0:	480a      	ldr	r0, [pc, #40]	; (800a41c <_setlocale_r+0x3c>)
 800a3f2:	bd10      	pop	{r4, pc}
 800a3f4:	4620      	mov	r0, r4
 800a3f6:	4909      	ldr	r1, [pc, #36]	; (800a41c <_setlocale_r+0x3c>)
 800a3f8:	f001 f812 	bl	800b420 <strcmp>
 800a3fc:	b908      	cbnz	r0, 800a402 <_setlocale_r+0x22>
 800a3fe:	4807      	ldr	r0, [pc, #28]	; (800a41c <_setlocale_r+0x3c>)
 800a400:	bd10      	pop	{r4, pc}
 800a402:	4620      	mov	r0, r4
 800a404:	4906      	ldr	r1, [pc, #24]	; (800a420 <_setlocale_r+0x40>)
 800a406:	f001 f80b 	bl	800b420 <strcmp>
 800a40a:	4b04      	ldr	r3, [pc, #16]	; (800a41c <_setlocale_r+0x3c>)
 800a40c:	2800      	cmp	r0, #0
 800a40e:	bf0c      	ite	eq
 800a410:	4618      	moveq	r0, r3
 800a412:	2000      	movne	r0, #0
 800a414:	bd10      	pop	{r4, pc}
 800a416:	bf00      	nop
 800a418:	0800d574 	.word	0x0800d574
 800a41c:	0800d570 	.word	0x0800d570
 800a420:	0800d4bc 	.word	0x0800d4bc

0800a424 <__locale_charset>:
 800a424:	f240 40d0 	movw	r0, #1232	; 0x4d0
 800a428:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800a42c:	4770      	bx	lr
 800a42e:	bf00      	nop

0800a430 <__locale_mb_cur_max>:
 800a430:	f240 43d0 	movw	r3, #1232	; 0x4d0
 800a434:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a438:	6a18      	ldr	r0, [r3, #32]
 800a43a:	4770      	bx	lr

0800a43c <__locale_msgcharset>:
 800a43c:	4800      	ldr	r0, [pc, #0]	; (800a440 <__locale_msgcharset+0x4>)
 800a43e:	4770      	bx	lr
 800a440:	200004f4 	.word	0x200004f4

0800a444 <__locale_cjk_lang>:
 800a444:	2000      	movs	r0, #0
 800a446:	4770      	bx	lr

0800a448 <_localeconv_r>:
 800a448:	4800      	ldr	r0, [pc, #0]	; (800a44c <_localeconv_r+0x4>)
 800a44a:	4770      	bx	lr
 800a44c:	20000514 	.word	0x20000514

0800a450 <setlocale>:
 800a450:	b410      	push	{r4}
 800a452:	f240 03a0 	movw	r3, #160	; 0xa0
 800a456:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a45a:	4604      	mov	r4, r0
 800a45c:	6818      	ldr	r0, [r3, #0]
 800a45e:	460a      	mov	r2, r1
 800a460:	4621      	mov	r1, r4
 800a462:	bc10      	pop	{r4}
 800a464:	e7bc      	b.n	800a3e0 <_setlocale_r>
 800a466:	bf00      	nop

0800a468 <localeconv>:
 800a468:	4800      	ldr	r0, [pc, #0]	; (800a46c <localeconv+0x4>)
 800a46a:	4770      	bx	lr
 800a46c:	20000514 	.word	0x20000514

0800a470 <_malloc_r>:
 800a470:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a474:	f101 040b 	add.w	r4, r1, #11
 800a478:	2c16      	cmp	r4, #22
 800a47a:	4605      	mov	r5, r0
 800a47c:	d92a      	bls.n	800a4d4 <_malloc_r+0x64>
 800a47e:	f024 0407 	bic.w	r4, r4, #7
 800a482:	0fe3      	lsrs	r3, r4, #31
 800a484:	428c      	cmp	r4, r1
 800a486:	bf2c      	ite	cs
 800a488:	4619      	movcs	r1, r3
 800a48a:	f043 0101 	orrcc.w	r1, r3, #1
 800a48e:	bb51      	cbnz	r1, 800a4e6 <_malloc_r+0x76>
 800a490:	4628      	mov	r0, r5
 800a492:	f000 fb23 	bl	800aadc <__malloc_lock>
 800a496:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 800a49a:	d22a      	bcs.n	800a4f2 <_malloc_r+0x82>
 800a49c:	4e7d      	ldr	r6, [pc, #500]	; (800a694 <_malloc_r+0x224>)
 800a49e:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
 800a4a2:	eb06 03ce 	add.w	r3, r6, lr, lsl #3
 800a4a6:	68df      	ldr	r7, [r3, #12]
 800a4a8:	429f      	cmp	r7, r3
 800a4aa:	f000 8235 	beq.w	800a918 <_malloc_r+0x4a8>
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	68fa      	ldr	r2, [r7, #12]
 800a4b2:	68b9      	ldr	r1, [r7, #8]
 800a4b4:	f023 0303 	bic.w	r3, r3, #3
 800a4b8:	18fb      	adds	r3, r7, r3
 800a4ba:	60ca      	str	r2, [r1, #12]
 800a4bc:	6858      	ldr	r0, [r3, #4]
 800a4be:	6091      	str	r1, [r2, #8]
 800a4c0:	f040 0201 	orr.w	r2, r0, #1
 800a4c4:	605a      	str	r2, [r3, #4]
 800a4c6:	4628      	mov	r0, r5
 800a4c8:	f000 fb0a 	bl	800aae0 <__malloc_unlock>
 800a4cc:	3708      	adds	r7, #8
 800a4ce:	4638      	mov	r0, r7
 800a4d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	2410      	movs	r4, #16
 800a4d8:	428c      	cmp	r4, r1
 800a4da:	bf2c      	ite	cs
 800a4dc:	4619      	movcs	r1, r3
 800a4de:	f043 0101 	orrcc.w	r1, r3, #1
 800a4e2:	2900      	cmp	r1, #0
 800a4e4:	d0d4      	beq.n	800a490 <_malloc_r+0x20>
 800a4e6:	230c      	movs	r3, #12
 800a4e8:	2700      	movs	r7, #0
 800a4ea:	602b      	str	r3, [r5, #0]
 800a4ec:	4638      	mov	r0, r7
 800a4ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4f2:	ea5f 2e54 	movs.w	lr, r4, lsr #9
 800a4f6:	bf04      	itt	eq
 800a4f8:	ea4f 0ed4 	moveq.w	lr, r4, lsr #3
 800a4fc:	ea4f 01ce 	moveq.w	r1, lr, lsl #3
 800a500:	f040 8081 	bne.w	800a606 <_malloc_r+0x196>
 800a504:	4e63      	ldr	r6, [pc, #396]	; (800a694 <_malloc_r+0x224>)
 800a506:	1871      	adds	r1, r6, r1
 800a508:	68cf      	ldr	r7, [r1, #12]
 800a50a:	42b9      	cmp	r1, r7
 800a50c:	d106      	bne.n	800a51c <_malloc_r+0xac>
 800a50e:	e00d      	b.n	800a52c <_malloc_r+0xbc>
 800a510:	2b00      	cmp	r3, #0
 800a512:	f280 8169 	bge.w	800a7e8 <_malloc_r+0x378>
 800a516:	68ff      	ldr	r7, [r7, #12]
 800a518:	42b9      	cmp	r1, r7
 800a51a:	d007      	beq.n	800a52c <_malloc_r+0xbc>
 800a51c:	687a      	ldr	r2, [r7, #4]
 800a51e:	f022 0203 	bic.w	r2, r2, #3
 800a522:	1b13      	subs	r3, r2, r4
 800a524:	2b0f      	cmp	r3, #15
 800a526:	ddf3      	ble.n	800a510 <_malloc_r+0xa0>
 800a528:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 800a52c:	f10e 0e01 	add.w	lr, lr, #1
 800a530:	4a58      	ldr	r2, [pc, #352]	; (800a694 <_malloc_r+0x224>)
 800a532:	6937      	ldr	r7, [r6, #16]
 800a534:	f102 0c08 	add.w	ip, r2, #8
 800a538:	4567      	cmp	r7, ip
 800a53a:	bf08      	it	eq
 800a53c:	6853      	ldreq	r3, [r2, #4]
 800a53e:	d023      	beq.n	800a588 <_malloc_r+0x118>
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	f023 0303 	bic.w	r3, r3, #3
 800a546:	1b19      	subs	r1, r3, r4
 800a548:	290f      	cmp	r1, #15
 800a54a:	f300 81b4 	bgt.w	800a8b6 <_malloc_r+0x446>
 800a54e:	2900      	cmp	r1, #0
 800a550:	f8c2 c014 	str.w	ip, [r2, #20]
 800a554:	f8c2 c010 	str.w	ip, [r2, #16]
 800a558:	f280 808f 	bge.w	800a67a <_malloc_r+0x20a>
 800a55c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a560:	f080 8161 	bcs.w	800a826 <_malloc_r+0x3b6>
 800a564:	08db      	lsrs	r3, r3, #3
 800a566:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800a56a:	f8d2 8004 	ldr.w	r8, [r2, #4]
 800a56e:	6888      	ldr	r0, [r1, #8]
 800a570:	60f9      	str	r1, [r7, #12]
 800a572:	109b      	asrs	r3, r3, #2
 800a574:	f04f 0901 	mov.w	r9, #1
 800a578:	fa09 f303 	lsl.w	r3, r9, r3
 800a57c:	ea43 0308 	orr.w	r3, r3, r8
 800a580:	60b8      	str	r0, [r7, #8]
 800a582:	6053      	str	r3, [r2, #4]
 800a584:	608f      	str	r7, [r1, #8]
 800a586:	60c7      	str	r7, [r0, #12]
 800a588:	2001      	movs	r0, #1
 800a58a:	ea4f 02ae 	mov.w	r2, lr, asr #2
 800a58e:	4090      	lsls	r0, r2
 800a590:	4298      	cmp	r0, r3
 800a592:	f200 8081 	bhi.w	800a698 <_malloc_r+0x228>
 800a596:	4203      	tst	r3, r0
 800a598:	d106      	bne.n	800a5a8 <_malloc_r+0x138>
 800a59a:	f02e 0e03 	bic.w	lr, lr, #3
 800a59e:	0040      	lsls	r0, r0, #1
 800a5a0:	4203      	tst	r3, r0
 800a5a2:	f10e 0e04 	add.w	lr, lr, #4
 800a5a6:	d0fa      	beq.n	800a59e <_malloc_r+0x12e>
 800a5a8:	eb06 09ce 	add.w	r9, r6, lr, lsl #3
 800a5ac:	464f      	mov	r7, r9
 800a5ae:	46f0      	mov	r8, lr
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	429f      	cmp	r7, r3
 800a5b4:	d107      	bne.n	800a5c6 <_malloc_r+0x156>
 800a5b6:	e191      	b.n	800a8dc <_malloc_r+0x46c>
 800a5b8:	2a00      	cmp	r2, #0
 800a5ba:	f280 81b7 	bge.w	800a92c <_malloc_r+0x4bc>
 800a5be:	68db      	ldr	r3, [r3, #12]
 800a5c0:	429f      	cmp	r7, r3
 800a5c2:	f000 818b 	beq.w	800a8dc <_malloc_r+0x46c>
 800a5c6:	6859      	ldr	r1, [r3, #4]
 800a5c8:	f021 0103 	bic.w	r1, r1, #3
 800a5cc:	1b0a      	subs	r2, r1, r4
 800a5ce:	2a0f      	cmp	r2, #15
 800a5d0:	ddf2      	ble.n	800a5b8 <_malloc_r+0x148>
 800a5d2:	461f      	mov	r7, r3
 800a5d4:	1919      	adds	r1, r3, r4
 800a5d6:	68d8      	ldr	r0, [r3, #12]
 800a5d8:	f857 ef08 	ldr.w	lr, [r7, #8]!
 800a5dc:	508a      	str	r2, [r1, r2]
 800a5de:	f044 0401 	orr.w	r4, r4, #1
 800a5e2:	f042 0201 	orr.w	r2, r2, #1
 800a5e6:	f8ce 000c 	str.w	r0, [lr, #12]
 800a5ea:	f8c0 e008 	str.w	lr, [r0, #8]
 800a5ee:	605c      	str	r4, [r3, #4]
 800a5f0:	6171      	str	r1, [r6, #20]
 800a5f2:	6131      	str	r1, [r6, #16]
 800a5f4:	f8c1 c00c 	str.w	ip, [r1, #12]
 800a5f8:	f8c1 c008 	str.w	ip, [r1, #8]
 800a5fc:	604a      	str	r2, [r1, #4]
 800a5fe:	4628      	mov	r0, r5
 800a600:	f000 fa6e 	bl	800aae0 <__malloc_unlock>
 800a604:	e763      	b.n	800a4ce <_malloc_r+0x5e>
 800a606:	f1be 0f04 	cmp.w	lr, #4
 800a60a:	bf9e      	ittt	ls
 800a60c:	ea4f 1e94 	movls.w	lr, r4, lsr #6
 800a610:	f10e 0e38 	addls.w	lr, lr, #56	; 0x38
 800a614:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 800a618:	f67f af74 	bls.w	800a504 <_malloc_r+0x94>
 800a61c:	f1be 0f14 	cmp.w	lr, #20
 800a620:	bf9c      	itt	ls
 800a622:	f10e 0e5b 	addls.w	lr, lr, #91	; 0x5b
 800a626:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 800a62a:	f67f af6b 	bls.w	800a504 <_malloc_r+0x94>
 800a62e:	f1be 0f54 	cmp.w	lr, #84	; 0x54
 800a632:	bf9e      	ittt	ls
 800a634:	ea4f 3e14 	movls.w	lr, r4, lsr #12
 800a638:	f10e 0e6e 	addls.w	lr, lr, #110	; 0x6e
 800a63c:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 800a640:	f67f af60 	bls.w	800a504 <_malloc_r+0x94>
 800a644:	f5be 7faa 	cmp.w	lr, #340	; 0x154
 800a648:	bf9e      	ittt	ls
 800a64a:	ea4f 3ed4 	movls.w	lr, r4, lsr #15
 800a64e:	f10e 0e77 	addls.w	lr, lr, #119	; 0x77
 800a652:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 800a656:	f67f af55 	bls.w	800a504 <_malloc_r+0x94>
 800a65a:	f240 5354 	movw	r3, #1364	; 0x554
 800a65e:	459e      	cmp	lr, r3
 800a660:	bf9d      	ittte	ls
 800a662:	ea4f 4e94 	movls.w	lr, r4, lsr #18
 800a666:	f10e 0e7c 	addls.w	lr, lr, #124	; 0x7c
 800a66a:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 800a66e:	f44f 717c 	movhi.w	r1, #1008	; 0x3f0
 800a672:	bf88      	it	hi
 800a674:	f04f 0e7e 	movhi.w	lr, #126	; 0x7e
 800a678:	e744      	b.n	800a504 <_malloc_r+0x94>
 800a67a:	18fb      	adds	r3, r7, r3
 800a67c:	4628      	mov	r0, r5
 800a67e:	685a      	ldr	r2, [r3, #4]
 800a680:	f042 0201 	orr.w	r2, r2, #1
 800a684:	605a      	str	r2, [r3, #4]
 800a686:	3708      	adds	r7, #8
 800a688:	f000 fa2a 	bl	800aae0 <__malloc_unlock>
 800a68c:	4638      	mov	r0, r7
 800a68e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a692:	bf00      	nop
 800a694:	2000054c 	.word	0x2000054c
 800a698:	68b7      	ldr	r7, [r6, #8]
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	f023 0803 	bic.w	r8, r3, #3
 800a6a0:	4544      	cmp	r4, r8
 800a6a2:	ebc4 0208 	rsb	r2, r4, r8
 800a6a6:	bf94      	ite	ls
 800a6a8:	2300      	movls	r3, #0
 800a6aa:	2301      	movhi	r3, #1
 800a6ac:	2a0f      	cmp	r2, #15
 800a6ae:	bfd8      	it	le
 800a6b0:	f043 0301 	orrle.w	r3, r3, #1
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	f000 80a7 	beq.w	800a808 <_malloc_r+0x398>
 800a6ba:	4bb3      	ldr	r3, [pc, #716]	; (800a988 <_malloc_r+0x518>)
 800a6bc:	f8df a2cc 	ldr.w	sl, [pc, #716]	; 800a98c <_malloc_r+0x51c>
 800a6c0:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800a6c4:	f8da 3000 	ldr.w	r3, [sl]
 800a6c8:	3201      	adds	r2, #1
 800a6ca:	4423      	add	r3, r4
 800a6cc:	bf08      	it	eq
 800a6ce:	f103 0b10 	addeq.w	fp, r3, #16
 800a6d2:	d006      	beq.n	800a6e2 <_malloc_r+0x272>
 800a6d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6d8:	330f      	adds	r3, #15
 800a6da:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800a6de:	f023 0b0f 	bic.w	fp, r3, #15
 800a6e2:	4628      	mov	r0, r5
 800a6e4:	4659      	mov	r1, fp
 800a6e6:	f000 fe89 	bl	800b3fc <_sbrk_r>
 800a6ea:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800a6ee:	4681      	mov	r9, r0
 800a6f0:	f000 8144 	beq.w	800a97c <_malloc_r+0x50c>
 800a6f4:	eb07 0208 	add.w	r2, r7, r8
 800a6f8:	4282      	cmp	r2, r0
 800a6fa:	f200 8126 	bhi.w	800a94a <_malloc_r+0x4da>
 800a6fe:	f8da 3004 	ldr.w	r3, [sl, #4]
 800a702:	454a      	cmp	r2, r9
 800a704:	445b      	add	r3, fp
 800a706:	f8ca 3004 	str.w	r3, [sl, #4]
 800a70a:	f000 8141 	beq.w	800a990 <_malloc_r+0x520>
 800a70e:	f8d6 1408 	ldr.w	r1, [r6, #1032]	; 0x408
 800a712:	3101      	adds	r1, #1
 800a714:	bf15      	itete	ne
 800a716:	ebc2 0209 	rsbne	r2, r2, r9
 800a71a:	4b9b      	ldreq	r3, [pc, #620]	; (800a988 <_malloc_r+0x518>)
 800a71c:	189b      	addne	r3, r3, r2
 800a71e:	f8c3 9408 	streq.w	r9, [r3, #1032]	; 0x408
 800a722:	bf18      	it	ne
 800a724:	f8ca 3004 	strne.w	r3, [sl, #4]
 800a728:	f019 0307 	ands.w	r3, r9, #7
 800a72c:	bf1f      	itttt	ne
 800a72e:	f1c3 0208 	rsbne	r2, r3, #8
 800a732:	4491      	addne	r9, r2
 800a734:	f5c3 5380 	rsbne	r3, r3, #4096	; 0x1000
 800a738:	f103 0208 	addne.w	r2, r3, #8
 800a73c:	eb09 030b 	add.w	r3, r9, fp
 800a740:	bf08      	it	eq
 800a742:	f44f 5280 	moveq.w	r2, #4096	; 0x1000
 800a746:	051b      	lsls	r3, r3, #20
 800a748:	0d1b      	lsrs	r3, r3, #20
 800a74a:	ebc3 0b02 	rsb	fp, r3, r2
 800a74e:	4628      	mov	r0, r5
 800a750:	4659      	mov	r1, fp
 800a752:	f000 fe53 	bl	800b3fc <_sbrk_r>
 800a756:	1c43      	adds	r3, r0, #1
 800a758:	f000 8126 	beq.w	800a9a8 <_malloc_r+0x538>
 800a75c:	ebc9 0200 	rsb	r2, r9, r0
 800a760:	445a      	add	r2, fp
 800a762:	f042 0201 	orr.w	r2, r2, #1
 800a766:	f8da 3004 	ldr.w	r3, [sl, #4]
 800a76a:	f8c6 9008 	str.w	r9, [r6, #8]
 800a76e:	445b      	add	r3, fp
 800a770:	42b7      	cmp	r7, r6
 800a772:	f8ca 3004 	str.w	r3, [sl, #4]
 800a776:	f8c9 2004 	str.w	r2, [r9, #4]
 800a77a:	d015      	beq.n	800a7a8 <_malloc_r+0x338>
 800a77c:	f1b8 0f0f 	cmp.w	r8, #15
 800a780:	f240 80f6 	bls.w	800a970 <_malloc_r+0x500>
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	f1a8 020c 	sub.w	r2, r8, #12
 800a78a:	f022 0207 	bic.w	r2, r2, #7
 800a78e:	18b9      	adds	r1, r7, r2
 800a790:	f000 0e01 	and.w	lr, r0, #1
 800a794:	ea42 0e0e 	orr.w	lr, r2, lr
 800a798:	2005      	movs	r0, #5
 800a79a:	2a0f      	cmp	r2, #15
 800a79c:	f8c7 e004 	str.w	lr, [r7, #4]
 800a7a0:	6048      	str	r0, [r1, #4]
 800a7a2:	6088      	str	r0, [r1, #8]
 800a7a4:	f200 8104 	bhi.w	800a9b0 <_malloc_r+0x540>
 800a7a8:	f8da 202c 	ldr.w	r2, [sl, #44]	; 0x2c
 800a7ac:	68b7      	ldr	r7, [r6, #8]
 800a7ae:	4293      	cmp	r3, r2
 800a7b0:	bf84      	itt	hi
 800a7b2:	4a76      	ldrhi	r2, [pc, #472]	; (800a98c <_malloc_r+0x51c>)
 800a7b4:	62d3      	strhi	r3, [r2, #44]	; 0x2c
 800a7b6:	f8da 2030 	ldr.w	r2, [sl, #48]	; 0x30
 800a7ba:	4293      	cmp	r3, r2
 800a7bc:	bf84      	itt	hi
 800a7be:	4a73      	ldrhi	r2, [pc, #460]	; (800a98c <_malloc_r+0x51c>)
 800a7c0:	6313      	strhi	r3, [r2, #48]	; 0x30
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	f023 0303 	bic.w	r3, r3, #3
 800a7c8:	429c      	cmp	r4, r3
 800a7ca:	ebc4 0203 	rsb	r2, r4, r3
 800a7ce:	bf94      	ite	ls
 800a7d0:	2300      	movls	r3, #0
 800a7d2:	2301      	movhi	r3, #1
 800a7d4:	2a0f      	cmp	r2, #15
 800a7d6:	bfd8      	it	le
 800a7d8:	f043 0301 	orrle.w	r3, r3, #1
 800a7dc:	b1a3      	cbz	r3, 800a808 <_malloc_r+0x398>
 800a7de:	4628      	mov	r0, r5
 800a7e0:	f000 f97e 	bl	800aae0 <__malloc_unlock>
 800a7e4:	2700      	movs	r7, #0
 800a7e6:	e672      	b.n	800a4ce <_malloc_r+0x5e>
 800a7e8:	18ba      	adds	r2, r7, r2
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	6850      	ldr	r0, [r2, #4]
 800a7ee:	68b9      	ldr	r1, [r7, #8]
 800a7f0:	f040 0001 	orr.w	r0, r0, #1
 800a7f4:	6050      	str	r0, [r2, #4]
 800a7f6:	60cb      	str	r3, [r1, #12]
 800a7f8:	4628      	mov	r0, r5
 800a7fa:	6099      	str	r1, [r3, #8]
 800a7fc:	3708      	adds	r7, #8
 800a7fe:	f000 f96f 	bl	800aae0 <__malloc_unlock>
 800a802:	4638      	mov	r0, r7
 800a804:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a808:	193b      	adds	r3, r7, r4
 800a80a:	f042 0201 	orr.w	r2, r2, #1
 800a80e:	f044 0401 	orr.w	r4, r4, #1
 800a812:	607c      	str	r4, [r7, #4]
 800a814:	4628      	mov	r0, r5
 800a816:	605a      	str	r2, [r3, #4]
 800a818:	3708      	adds	r7, #8
 800a81a:	60b3      	str	r3, [r6, #8]
 800a81c:	f000 f960 	bl	800aae0 <__malloc_unlock>
 800a820:	4638      	mov	r0, r7
 800a822:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a826:	0a5a      	lsrs	r2, r3, #9
 800a828:	2a04      	cmp	r2, #4
 800a82a:	bf9e      	ittt	ls
 800a82c:	ea4f 1893 	movls.w	r8, r3, lsr #6
 800a830:	f108 0838 	addls.w	r8, r8, #56	; 0x38
 800a834:	ea4f 00c8 	movls.w	r0, r8, lsl #3
 800a838:	d928      	bls.n	800a88c <_malloc_r+0x41c>
 800a83a:	2a14      	cmp	r2, #20
 800a83c:	bf9c      	itt	ls
 800a83e:	f102 085b 	addls.w	r8, r2, #91	; 0x5b
 800a842:	ea4f 00c8 	movls.w	r0, r8, lsl #3
 800a846:	d921      	bls.n	800a88c <_malloc_r+0x41c>
 800a848:	2a54      	cmp	r2, #84	; 0x54
 800a84a:	bf9e      	ittt	ls
 800a84c:	ea4f 3813 	movls.w	r8, r3, lsr #12
 800a850:	f108 086e 	addls.w	r8, r8, #110	; 0x6e
 800a854:	ea4f 00c8 	movls.w	r0, r8, lsl #3
 800a858:	d918      	bls.n	800a88c <_malloc_r+0x41c>
 800a85a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800a85e:	bf9e      	ittt	ls
 800a860:	ea4f 38d3 	movls.w	r8, r3, lsr #15
 800a864:	f108 0877 	addls.w	r8, r8, #119	; 0x77
 800a868:	ea4f 00c8 	movls.w	r0, r8, lsl #3
 800a86c:	d90e      	bls.n	800a88c <_malloc_r+0x41c>
 800a86e:	f240 5154 	movw	r1, #1364	; 0x554
 800a872:	428a      	cmp	r2, r1
 800a874:	bf9d      	ittte	ls
 800a876:	ea4f 4893 	movls.w	r8, r3, lsr #18
 800a87a:	f108 087c 	addls.w	r8, r8, #124	; 0x7c
 800a87e:	ea4f 00c8 	movls.w	r0, r8, lsl #3
 800a882:	f44f 707c 	movhi.w	r0, #1008	; 0x3f0
 800a886:	bf88      	it	hi
 800a888:	f04f 087e 	movhi.w	r8, #126	; 0x7e
 800a88c:	1830      	adds	r0, r6, r0
 800a88e:	493e      	ldr	r1, [pc, #248]	; (800a988 <_malloc_r+0x518>)
 800a890:	6882      	ldr	r2, [r0, #8]
 800a892:	4282      	cmp	r2, r0
 800a894:	d103      	bne.n	800a89e <_malloc_r+0x42e>
 800a896:	e061      	b.n	800a95c <_malloc_r+0x4ec>
 800a898:	6892      	ldr	r2, [r2, #8]
 800a89a:	4290      	cmp	r0, r2
 800a89c:	d004      	beq.n	800a8a8 <_malloc_r+0x438>
 800a89e:	6851      	ldr	r1, [r2, #4]
 800a8a0:	f021 0103 	bic.w	r1, r1, #3
 800a8a4:	428b      	cmp	r3, r1
 800a8a6:	d3f7      	bcc.n	800a898 <_malloc_r+0x428>
 800a8a8:	68d1      	ldr	r1, [r2, #12]
 800a8aa:	6873      	ldr	r3, [r6, #4]
 800a8ac:	60f9      	str	r1, [r7, #12]
 800a8ae:	60ba      	str	r2, [r7, #8]
 800a8b0:	60d7      	str	r7, [r2, #12]
 800a8b2:	608f      	str	r7, [r1, #8]
 800a8b4:	e668      	b.n	800a588 <_malloc_r+0x118>
 800a8b6:	193b      	adds	r3, r7, r4
 800a8b8:	f041 0001 	orr.w	r0, r1, #1
 800a8bc:	f044 0401 	orr.w	r4, r4, #1
 800a8c0:	607c      	str	r4, [r7, #4]
 800a8c2:	6153      	str	r3, [r2, #20]
 800a8c4:	6113      	str	r3, [r2, #16]
 800a8c6:	6058      	str	r0, [r3, #4]
 800a8c8:	f8c3 c00c 	str.w	ip, [r3, #12]
 800a8cc:	f8c3 c008 	str.w	ip, [r3, #8]
 800a8d0:	5059      	str	r1, [r3, r1]
 800a8d2:	4628      	mov	r0, r5
 800a8d4:	f000 f904 	bl	800aae0 <__malloc_unlock>
 800a8d8:	3708      	adds	r7, #8
 800a8da:	e5f8      	b.n	800a4ce <_malloc_r+0x5e>
 800a8dc:	f108 0801 	add.w	r8, r8, #1
 800a8e0:	3708      	adds	r7, #8
 800a8e2:	f018 0f03 	tst.w	r8, #3
 800a8e6:	f47f ae63 	bne.w	800a5b0 <_malloc_r+0x140>
 800a8ea:	464b      	mov	r3, r9
 800a8ec:	f01e 0f03 	tst.w	lr, #3
 800a8f0:	f1a3 0208 	sub.w	r2, r3, #8
 800a8f4:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 800a8f8:	d062      	beq.n	800a9c0 <_malloc_r+0x550>
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	4293      	cmp	r3, r2
 800a8fe:	d0f5      	beq.n	800a8ec <_malloc_r+0x47c>
 800a900:	6873      	ldr	r3, [r6, #4]
 800a902:	0040      	lsls	r0, r0, #1
 800a904:	4298      	cmp	r0, r3
 800a906:	f63f aec7 	bhi.w	800a698 <_malloc_r+0x228>
 800a90a:	2800      	cmp	r0, #0
 800a90c:	f43f aec4 	beq.w	800a698 <_malloc_r+0x228>
 800a910:	4218      	tst	r0, r3
 800a912:	d05a      	beq.n	800a9ca <_malloc_r+0x55a>
 800a914:	46c6      	mov	lr, r8
 800a916:	e647      	b.n	800a5a8 <_malloc_r+0x138>
 800a918:	f107 0308 	add.w	r3, r7, #8
 800a91c:	697f      	ldr	r7, [r7, #20]
 800a91e:	42bb      	cmp	r3, r7
 800a920:	bf08      	it	eq
 800a922:	f10e 0e02 	addeq.w	lr, lr, #2
 800a926:	f43f ae03 	beq.w	800a530 <_malloc_r+0xc0>
 800a92a:	e5c0      	b.n	800a4ae <_malloc_r+0x3e>
 800a92c:	1859      	adds	r1, r3, r1
 800a92e:	461f      	mov	r7, r3
 800a930:	6848      	ldr	r0, [r1, #4]
 800a932:	68db      	ldr	r3, [r3, #12]
 800a934:	f857 2f08 	ldr.w	r2, [r7, #8]!
 800a938:	f040 0001 	orr.w	r0, r0, #1
 800a93c:	6048      	str	r0, [r1, #4]
 800a93e:	60d3      	str	r3, [r2, #12]
 800a940:	609a      	str	r2, [r3, #8]
 800a942:	4628      	mov	r0, r5
 800a944:	f000 f8cc 	bl	800aae0 <__malloc_unlock>
 800a948:	e5c1      	b.n	800a4ce <_malloc_r+0x5e>
 800a94a:	42b7      	cmp	r7, r6
 800a94c:	f43f aed7 	beq.w	800a6fe <_malloc_r+0x28e>
 800a950:	4b0d      	ldr	r3, [pc, #52]	; (800a988 <_malloc_r+0x518>)
 800a952:	689f      	ldr	r7, [r3, #8]
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	f023 0303 	bic.w	r3, r3, #3
 800a95a:	e735      	b.n	800a7c8 <_malloc_r+0x358>
 800a95c:	684b      	ldr	r3, [r1, #4]
 800a95e:	ea4f 08a8 	mov.w	r8, r8, asr #2
 800a962:	2001      	movs	r0, #1
 800a964:	fa00 f008 	lsl.w	r0, r0, r8
 800a968:	4303      	orrs	r3, r0
 800a96a:	604b      	str	r3, [r1, #4]
 800a96c:	4611      	mov	r1, r2
 800a96e:	e79d      	b.n	800a8ac <_malloc_r+0x43c>
 800a970:	2301      	movs	r3, #1
 800a972:	f8c9 3004 	str.w	r3, [r9, #4]
 800a976:	464f      	mov	r7, r9
 800a978:	2300      	movs	r3, #0
 800a97a:	e725      	b.n	800a7c8 <_malloc_r+0x358>
 800a97c:	68b7      	ldr	r7, [r6, #8]
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	f023 0303 	bic.w	r3, r3, #3
 800a984:	e720      	b.n	800a7c8 <_malloc_r+0x358>
 800a986:	bf00      	nop
 800a988:	2000054c 	.word	0x2000054c
 800a98c:	20000970 	.word	0x20000970
 800a990:	0511      	lsls	r1, r2, #20
 800a992:	0d09      	lsrs	r1, r1, #20
 800a994:	2900      	cmp	r1, #0
 800a996:	f47f aeba 	bne.w	800a70e <_malloc_r+0x29e>
 800a99a:	68b2      	ldr	r2, [r6, #8]
 800a99c:	eb0b 0108 	add.w	r1, fp, r8
 800a9a0:	f041 0101 	orr.w	r1, r1, #1
 800a9a4:	6051      	str	r1, [r2, #4]
 800a9a6:	e6ff      	b.n	800a7a8 <_malloc_r+0x338>
 800a9a8:	2201      	movs	r2, #1
 800a9aa:	f04f 0b00 	mov.w	fp, #0
 800a9ae:	e6da      	b.n	800a766 <_malloc_r+0x2f6>
 800a9b0:	4628      	mov	r0, r5
 800a9b2:	f107 0108 	add.w	r1, r7, #8
 800a9b6:	f7ff fc4f 	bl	800a258 <_free_r>
 800a9ba:	4b06      	ldr	r3, [pc, #24]	; (800a9d4 <_malloc_r+0x564>)
 800a9bc:	685b      	ldr	r3, [r3, #4]
 800a9be:	e6f3      	b.n	800a7a8 <_malloc_r+0x338>
 800a9c0:	6873      	ldr	r3, [r6, #4]
 800a9c2:	ea23 0300 	bic.w	r3, r3, r0
 800a9c6:	6073      	str	r3, [r6, #4]
 800a9c8:	e79b      	b.n	800a902 <_malloc_r+0x492>
 800a9ca:	0040      	lsls	r0, r0, #1
 800a9cc:	f108 0804 	add.w	r8, r8, #4
 800a9d0:	e79e      	b.n	800a910 <_malloc_r+0x4a0>
 800a9d2:	bf00      	nop
 800a9d4:	20000970 	.word	0x20000970

0800a9d8 <memchr>:
 800a9d8:	0783      	lsls	r3, r0, #30
 800a9da:	b470      	push	{r4, r5, r6}
 800a9dc:	b2c9      	uxtb	r1, r1
 800a9de:	d00f      	beq.n	800aa00 <memchr+0x28>
 800a9e0:	2a00      	cmp	r2, #0
 800a9e2:	d033      	beq.n	800aa4c <memchr+0x74>
 800a9e4:	7803      	ldrb	r3, [r0, #0]
 800a9e6:	3a01      	subs	r2, #1
 800a9e8:	428b      	cmp	r3, r1
 800a9ea:	d106      	bne.n	800a9fa <memchr+0x22>
 800a9ec:	e01d      	b.n	800aa2a <memchr+0x52>
 800a9ee:	2a00      	cmp	r2, #0
 800a9f0:	d02c      	beq.n	800aa4c <memchr+0x74>
 800a9f2:	7803      	ldrb	r3, [r0, #0]
 800a9f4:	3a01      	subs	r2, #1
 800a9f6:	428b      	cmp	r3, r1
 800a9f8:	d017      	beq.n	800aa2a <memchr+0x52>
 800a9fa:	3001      	adds	r0, #1
 800a9fc:	0783      	lsls	r3, r0, #30
 800a9fe:	d1f6      	bne.n	800a9ee <memchr+0x16>
 800aa00:	2a03      	cmp	r2, #3
 800aa02:	bf84      	itt	hi
 800aa04:	ea41 2601 	orrhi.w	r6, r1, r1, lsl #8
 800aa08:	ea46 4606 	orrhi.w	r6, r6, r6, lsl #16
 800aa0c:	d80f      	bhi.n	800aa2e <memchr+0x56>
 800aa0e:	b1ea      	cbz	r2, 800aa4c <memchr+0x74>
 800aa10:	7803      	ldrb	r3, [r0, #0]
 800aa12:	3a01      	subs	r2, #1
 800aa14:	428b      	cmp	r3, r1
 800aa16:	4402      	add	r2, r0
 800aa18:	d104      	bne.n	800aa24 <memchr+0x4c>
 800aa1a:	e006      	b.n	800aa2a <memchr+0x52>
 800aa1c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800aa20:	428b      	cmp	r3, r1
 800aa22:	d002      	beq.n	800aa2a <memchr+0x52>
 800aa24:	4290      	cmp	r0, r2
 800aa26:	d1f9      	bne.n	800aa1c <memchr+0x44>
 800aa28:	2000      	movs	r0, #0
 800aa2a:	bc70      	pop	{r4, r5, r6}
 800aa2c:	4770      	bx	lr
 800aa2e:	4604      	mov	r4, r0
 800aa30:	3004      	adds	r0, #4
 800aa32:	6823      	ldr	r3, [r4, #0]
 800aa34:	4073      	eors	r3, r6
 800aa36:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
 800aa3a:	ea25 0303 	bic.w	r3, r5, r3
 800aa3e:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 800aa42:	d105      	bne.n	800aa50 <memchr+0x78>
 800aa44:	3a04      	subs	r2, #4
 800aa46:	2a03      	cmp	r2, #3
 800aa48:	d8f1      	bhi.n	800aa2e <memchr+0x56>
 800aa4a:	e7e0      	b.n	800aa0e <memchr+0x36>
 800aa4c:	4610      	mov	r0, r2
 800aa4e:	e7ec      	b.n	800aa2a <memchr+0x52>
 800aa50:	4620      	mov	r0, r4
 800aa52:	e7dc      	b.n	800aa0e <memchr+0x36>

0800aa54 <memcpy>:
 800aa54:	2a0f      	cmp	r2, #15
 800aa56:	b4f0      	push	{r4, r5, r6, r7}
 800aa58:	bf98      	it	ls
 800aa5a:	4603      	movls	r3, r0
 800aa5c:	d931      	bls.n	800aac2 <memcpy+0x6e>
 800aa5e:	ea41 0300 	orr.w	r3, r1, r0
 800aa62:	079b      	lsls	r3, r3, #30
 800aa64:	d137      	bne.n	800aad6 <memcpy+0x82>
 800aa66:	460c      	mov	r4, r1
 800aa68:	4603      	mov	r3, r0
 800aa6a:	4615      	mov	r5, r2
 800aa6c:	6826      	ldr	r6, [r4, #0]
 800aa6e:	601e      	str	r6, [r3, #0]
 800aa70:	6866      	ldr	r6, [r4, #4]
 800aa72:	605e      	str	r6, [r3, #4]
 800aa74:	68a6      	ldr	r6, [r4, #8]
 800aa76:	609e      	str	r6, [r3, #8]
 800aa78:	68e6      	ldr	r6, [r4, #12]
 800aa7a:	3d10      	subs	r5, #16
 800aa7c:	60de      	str	r6, [r3, #12]
 800aa7e:	3410      	adds	r4, #16
 800aa80:	3310      	adds	r3, #16
 800aa82:	2d0f      	cmp	r5, #15
 800aa84:	d8f2      	bhi.n	800aa6c <memcpy+0x18>
 800aa86:	f1a2 0410 	sub.w	r4, r2, #16
 800aa8a:	f024 040f 	bic.w	r4, r4, #15
 800aa8e:	f002 020f 	and.w	r2, r2, #15
 800aa92:	3410      	adds	r4, #16
 800aa94:	2a03      	cmp	r2, #3
 800aa96:	eb00 0304 	add.w	r3, r0, r4
 800aa9a:	4421      	add	r1, r4
 800aa9c:	d911      	bls.n	800aac2 <memcpy+0x6e>
 800aa9e:	1f0e      	subs	r6, r1, #4
 800aaa0:	461d      	mov	r5, r3
 800aaa2:	4614      	mov	r4, r2
 800aaa4:	f856 7f04 	ldr.w	r7, [r6, #4]!
 800aaa8:	3c04      	subs	r4, #4
 800aaaa:	2c03      	cmp	r4, #3
 800aaac:	f845 7b04 	str.w	r7, [r5], #4
 800aab0:	d8f8      	bhi.n	800aaa4 <memcpy+0x50>
 800aab2:	1f14      	subs	r4, r2, #4
 800aab4:	f024 0403 	bic.w	r4, r4, #3
 800aab8:	3404      	adds	r4, #4
 800aaba:	f002 0203 	and.w	r2, r2, #3
 800aabe:	1909      	adds	r1, r1, r4
 800aac0:	191b      	adds	r3, r3, r4
 800aac2:	b132      	cbz	r2, 800aad2 <memcpy+0x7e>
 800aac4:	3901      	subs	r1, #1
 800aac6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800aaca:	3a01      	subs	r2, #1
 800aacc:	f803 4b01 	strb.w	r4, [r3], #1
 800aad0:	d1f9      	bne.n	800aac6 <memcpy+0x72>
 800aad2:	bcf0      	pop	{r4, r5, r6, r7}
 800aad4:	4770      	bx	lr
 800aad6:	4603      	mov	r3, r0
 800aad8:	e7f4      	b.n	800aac4 <memcpy+0x70>
 800aada:	bf00      	nop

0800aadc <__malloc_lock>:
 800aadc:	4770      	bx	lr
 800aade:	bf00      	nop

0800aae0 <__malloc_unlock>:
 800aae0:	4770      	bx	lr
 800aae2:	bf00      	nop

0800aae4 <_Balloc>:
 800aae4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800aae6:	b570      	push	{r4, r5, r6, lr}
 800aae8:	4605      	mov	r5, r0
 800aaea:	460c      	mov	r4, r1
 800aaec:	b14b      	cbz	r3, 800ab02 <_Balloc+0x1e>
 800aaee:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800aaf2:	b178      	cbz	r0, 800ab14 <_Balloc+0x30>
 800aaf4:	6802      	ldr	r2, [r0, #0]
 800aaf6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800aafa:	2300      	movs	r3, #0
 800aafc:	6103      	str	r3, [r0, #16]
 800aafe:	60c3      	str	r3, [r0, #12]
 800ab00:	bd70      	pop	{r4, r5, r6, pc}
 800ab02:	2104      	movs	r1, #4
 800ab04:	2221      	movs	r2, #33	; 0x21
 800ab06:	f001 fa7f 	bl	800c008 <_calloc_r>
 800ab0a:	4603      	mov	r3, r0
 800ab0c:	64e8      	str	r0, [r5, #76]	; 0x4c
 800ab0e:	2800      	cmp	r0, #0
 800ab10:	d1ed      	bne.n	800aaee <_Balloc+0xa>
 800ab12:	bd70      	pop	{r4, r5, r6, pc}
 800ab14:	2101      	movs	r1, #1
 800ab16:	fa11 f604 	lsls.w	r6, r1, r4
 800ab1a:	1d72      	adds	r2, r6, #5
 800ab1c:	4628      	mov	r0, r5
 800ab1e:	0092      	lsls	r2, r2, #2
 800ab20:	f001 fa72 	bl	800c008 <_calloc_r>
 800ab24:	2800      	cmp	r0, #0
 800ab26:	d0f4      	beq.n	800ab12 <_Balloc+0x2e>
 800ab28:	6044      	str	r4, [r0, #4]
 800ab2a:	6086      	str	r6, [r0, #8]
 800ab2c:	e7e5      	b.n	800aafa <_Balloc+0x16>
 800ab2e:	bf00      	nop

0800ab30 <_Bfree>:
 800ab30:	b131      	cbz	r1, 800ab40 <_Bfree+0x10>
 800ab32:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800ab34:	684a      	ldr	r2, [r1, #4]
 800ab36:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ab3a:	6008      	str	r0, [r1, #0]
 800ab3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800ab40:	4770      	bx	lr
 800ab42:	bf00      	nop

0800ab44 <__multadd>:
 800ab44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab46:	460d      	mov	r5, r1
 800ab48:	4606      	mov	r6, r0
 800ab4a:	690c      	ldr	r4, [r1, #16]
 800ab4c:	f101 0014 	add.w	r0, r1, #20
 800ab50:	b083      	sub	sp, #12
 800ab52:	2100      	movs	r1, #0
 800ab54:	6807      	ldr	r7, [r0, #0]
 800ab56:	fa1f fc87 	uxth.w	ip, r7
 800ab5a:	0c3f      	lsrs	r7, r7, #16
 800ab5c:	fb02 330c 	mla	r3, r2, ip, r3
 800ab60:	fb02 f707 	mul.w	r7, r2, r7
 800ab64:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ab68:	b29b      	uxth	r3, r3
 800ab6a:	eb03 4307 	add.w	r3, r3, r7, lsl #16
 800ab6e:	3101      	adds	r1, #1
 800ab70:	f840 3b04 	str.w	r3, [r0], #4
 800ab74:	0c3b      	lsrs	r3, r7, #16
 800ab76:	428c      	cmp	r4, r1
 800ab78:	dcec      	bgt.n	800ab54 <__multadd+0x10>
 800ab7a:	b13b      	cbz	r3, 800ab8c <__multadd+0x48>
 800ab7c:	68aa      	ldr	r2, [r5, #8]
 800ab7e:	4294      	cmp	r4, r2
 800ab80:	da07      	bge.n	800ab92 <__multadd+0x4e>
 800ab82:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 800ab86:	3401      	adds	r4, #1
 800ab88:	6153      	str	r3, [r2, #20]
 800ab8a:	612c      	str	r4, [r5, #16]
 800ab8c:	4628      	mov	r0, r5
 800ab8e:	b003      	add	sp, #12
 800ab90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab92:	6869      	ldr	r1, [r5, #4]
 800ab94:	9301      	str	r3, [sp, #4]
 800ab96:	3101      	adds	r1, #1
 800ab98:	4630      	mov	r0, r6
 800ab9a:	f7ff ffa3 	bl	800aae4 <_Balloc>
 800ab9e:	692a      	ldr	r2, [r5, #16]
 800aba0:	3202      	adds	r2, #2
 800aba2:	f105 010c 	add.w	r1, r5, #12
 800aba6:	4607      	mov	r7, r0
 800aba8:	0092      	lsls	r2, r2, #2
 800abaa:	f100 000c 	add.w	r0, r0, #12
 800abae:	f7ff ff51 	bl	800aa54 <memcpy>
 800abb2:	6869      	ldr	r1, [r5, #4]
 800abb4:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 800abb6:	9b01      	ldr	r3, [sp, #4]
 800abb8:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 800abbc:	6028      	str	r0, [r5, #0]
 800abbe:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 800abc2:	463d      	mov	r5, r7
 800abc4:	e7dd      	b.n	800ab82 <__multadd+0x3e>
 800abc6:	bf00      	nop

0800abc8 <__s2b>:
 800abc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800abcc:	461e      	mov	r6, r3
 800abce:	f648 6339 	movw	r3, #36409	; 0x8e39
 800abd2:	f106 0408 	add.w	r4, r6, #8
 800abd6:	f6c3 03e3 	movt	r3, #14563	; 0x38e3
 800abda:	fb83 5304 	smull	r5, r3, r3, r4
 800abde:	17e4      	asrs	r4, r4, #31
 800abe0:	ebc4 0363 	rsb	r3, r4, r3, asr #1
 800abe4:	460f      	mov	r7, r1
 800abe6:	2100      	movs	r1, #0
 800abe8:	2b01      	cmp	r3, #1
 800abea:	4604      	mov	r4, r0
 800abec:	4690      	mov	r8, r2
 800abee:	dd05      	ble.n	800abfc <__s2b+0x34>
 800abf0:	2201      	movs	r2, #1
 800abf2:	2100      	movs	r1, #0
 800abf4:	0052      	lsls	r2, r2, #1
 800abf6:	3101      	adds	r1, #1
 800abf8:	4293      	cmp	r3, r2
 800abfa:	dcfb      	bgt.n	800abf4 <__s2b+0x2c>
 800abfc:	4620      	mov	r0, r4
 800abfe:	f7ff ff71 	bl	800aae4 <_Balloc>
 800ac02:	9b08      	ldr	r3, [sp, #32]
 800ac04:	6143      	str	r3, [r0, #20]
 800ac06:	2301      	movs	r3, #1
 800ac08:	f1b8 0f09 	cmp.w	r8, #9
 800ac0c:	4601      	mov	r1, r0
 800ac0e:	6103      	str	r3, [r0, #16]
 800ac10:	dd23      	ble.n	800ac5a <__s2b+0x92>
 800ac12:	f107 0909 	add.w	r9, r7, #9
 800ac16:	464d      	mov	r5, r9
 800ac18:	4447      	add	r7, r8
 800ac1a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ac1e:	220a      	movs	r2, #10
 800ac20:	3b30      	subs	r3, #48	; 0x30
 800ac22:	4620      	mov	r0, r4
 800ac24:	f7ff ff8e 	bl	800ab44 <__multadd>
 800ac28:	42bd      	cmp	r5, r7
 800ac2a:	4601      	mov	r1, r0
 800ac2c:	d1f5      	bne.n	800ac1a <__s2b+0x52>
 800ac2e:	eb09 0708 	add.w	r7, r9, r8
 800ac32:	3f08      	subs	r7, #8
 800ac34:	4546      	cmp	r6, r8
 800ac36:	dd0d      	ble.n	800ac54 <__s2b+0x8c>
 800ac38:	ebc8 0707 	rsb	r7, r8, r7
 800ac3c:	f817 3008 	ldrb.w	r3, [r7, r8]
 800ac40:	220a      	movs	r2, #10
 800ac42:	3b30      	subs	r3, #48	; 0x30
 800ac44:	4620      	mov	r0, r4
 800ac46:	f7ff ff7d 	bl	800ab44 <__multadd>
 800ac4a:	f108 0801 	add.w	r8, r8, #1
 800ac4e:	45b0      	cmp	r8, r6
 800ac50:	4601      	mov	r1, r0
 800ac52:	d1f3      	bne.n	800ac3c <__s2b+0x74>
 800ac54:	4608      	mov	r0, r1
 800ac56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac5a:	370a      	adds	r7, #10
 800ac5c:	f04f 0809 	mov.w	r8, #9
 800ac60:	e7e8      	b.n	800ac34 <__s2b+0x6c>
 800ac62:	bf00      	nop

0800ac64 <__hi0bits>:
 800ac64:	4603      	mov	r3, r0
 800ac66:	2000      	movs	r0, #0
 800ac68:	0c1a      	lsrs	r2, r3, #16
 800ac6a:	d101      	bne.n	800ac70 <__hi0bits+0xc>
 800ac6c:	041b      	lsls	r3, r3, #16
 800ac6e:	2010      	movs	r0, #16
 800ac70:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800ac74:	d101      	bne.n	800ac7a <__hi0bits+0x16>
 800ac76:	3008      	adds	r0, #8
 800ac78:	021b      	lsls	r3, r3, #8
 800ac7a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800ac7e:	d101      	bne.n	800ac84 <__hi0bits+0x20>
 800ac80:	3004      	adds	r0, #4
 800ac82:	011b      	lsls	r3, r3, #4
 800ac84:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800ac88:	d101      	bne.n	800ac8e <__hi0bits+0x2a>
 800ac8a:	3002      	adds	r0, #2
 800ac8c:	009b      	lsls	r3, r3, #2
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	db02      	blt.n	800ac98 <__hi0bits+0x34>
 800ac92:	005b      	lsls	r3, r3, #1
 800ac94:	d401      	bmi.n	800ac9a <__hi0bits+0x36>
 800ac96:	2020      	movs	r0, #32
 800ac98:	4770      	bx	lr
 800ac9a:	3001      	adds	r0, #1
 800ac9c:	4770      	bx	lr
 800ac9e:	bf00      	nop

0800aca0 <__lo0bits>:
 800aca0:	6803      	ldr	r3, [r0, #0]
 800aca2:	4602      	mov	r2, r0
 800aca4:	f013 0007 	ands.w	r0, r3, #7
 800aca8:	d007      	beq.n	800acba <__lo0bits+0x1a>
 800acaa:	07d9      	lsls	r1, r3, #31
 800acac:	d41f      	bmi.n	800acee <__lo0bits+0x4e>
 800acae:	0798      	lsls	r0, r3, #30
 800acb0:	d41f      	bmi.n	800acf2 <__lo0bits+0x52>
 800acb2:	089b      	lsrs	r3, r3, #2
 800acb4:	6013      	str	r3, [r2, #0]
 800acb6:	2002      	movs	r0, #2
 800acb8:	4770      	bx	lr
 800acba:	b299      	uxth	r1, r3
 800acbc:	b909      	cbnz	r1, 800acc2 <__lo0bits+0x22>
 800acbe:	0c1b      	lsrs	r3, r3, #16
 800acc0:	2010      	movs	r0, #16
 800acc2:	f013 0fff 	tst.w	r3, #255	; 0xff
 800acc6:	d101      	bne.n	800accc <__lo0bits+0x2c>
 800acc8:	3008      	adds	r0, #8
 800acca:	0a1b      	lsrs	r3, r3, #8
 800accc:	0719      	lsls	r1, r3, #28
 800acce:	d101      	bne.n	800acd4 <__lo0bits+0x34>
 800acd0:	3004      	adds	r0, #4
 800acd2:	091b      	lsrs	r3, r3, #4
 800acd4:	0799      	lsls	r1, r3, #30
 800acd6:	d101      	bne.n	800acdc <__lo0bits+0x3c>
 800acd8:	3002      	adds	r0, #2
 800acda:	089b      	lsrs	r3, r3, #2
 800acdc:	07d9      	lsls	r1, r3, #31
 800acde:	d404      	bmi.n	800acea <__lo0bits+0x4a>
 800ace0:	085b      	lsrs	r3, r3, #1
 800ace2:	d101      	bne.n	800ace8 <__lo0bits+0x48>
 800ace4:	2020      	movs	r0, #32
 800ace6:	4770      	bx	lr
 800ace8:	3001      	adds	r0, #1
 800acea:	6013      	str	r3, [r2, #0]
 800acec:	4770      	bx	lr
 800acee:	2000      	movs	r0, #0
 800acf0:	4770      	bx	lr
 800acf2:	085b      	lsrs	r3, r3, #1
 800acf4:	6013      	str	r3, [r2, #0]
 800acf6:	2001      	movs	r0, #1
 800acf8:	4770      	bx	lr
 800acfa:	bf00      	nop

0800acfc <__i2b>:
 800acfc:	b510      	push	{r4, lr}
 800acfe:	460c      	mov	r4, r1
 800ad00:	2101      	movs	r1, #1
 800ad02:	f7ff feef 	bl	800aae4 <_Balloc>
 800ad06:	2201      	movs	r2, #1
 800ad08:	6144      	str	r4, [r0, #20]
 800ad0a:	6102      	str	r2, [r0, #16]
 800ad0c:	bd10      	pop	{r4, pc}
 800ad0e:	bf00      	nop

0800ad10 <__multiply>:
 800ad10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad14:	690f      	ldr	r7, [r1, #16]
 800ad16:	6916      	ldr	r6, [r2, #16]
 800ad18:	42b7      	cmp	r7, r6
 800ad1a:	b085      	sub	sp, #20
 800ad1c:	460d      	mov	r5, r1
 800ad1e:	4692      	mov	sl, r2
 800ad20:	da04      	bge.n	800ad2c <__multiply+0x1c>
 800ad22:	463a      	mov	r2, r7
 800ad24:	4655      	mov	r5, sl
 800ad26:	4637      	mov	r7, r6
 800ad28:	468a      	mov	sl, r1
 800ad2a:	4616      	mov	r6, r2
 800ad2c:	68ab      	ldr	r3, [r5, #8]
 800ad2e:	6869      	ldr	r1, [r5, #4]
 800ad30:	19bc      	adds	r4, r7, r6
 800ad32:	429c      	cmp	r4, r3
 800ad34:	bfc8      	it	gt
 800ad36:	3101      	addgt	r1, #1
 800ad38:	f7ff fed4 	bl	800aae4 <_Balloc>
 800ad3c:	1d21      	adds	r1, r4, #4
 800ad3e:	eb00 0b81 	add.w	fp, r0, r1, lsl #2
 800ad42:	f100 0914 	add.w	r9, r0, #20
 800ad46:	f10b 0b04 	add.w	fp, fp, #4
 800ad4a:	45d9      	cmp	r9, fp
 800ad4c:	9000      	str	r0, [sp, #0]
 800ad4e:	9101      	str	r1, [sp, #4]
 800ad50:	d205      	bcs.n	800ad5e <__multiply+0x4e>
 800ad52:	464b      	mov	r3, r9
 800ad54:	2200      	movs	r2, #0
 800ad56:	f843 2b04 	str.w	r2, [r3], #4
 800ad5a:	459b      	cmp	fp, r3
 800ad5c:	d8fb      	bhi.n	800ad56 <__multiply+0x46>
 800ad5e:	eb0a 0686 	add.w	r6, sl, r6, lsl #2
 800ad62:	eb05 0787 	add.w	r7, r5, r7, lsl #2
 800ad66:	f10a 0a14 	add.w	sl, sl, #20
 800ad6a:	f106 0814 	add.w	r8, r6, #20
 800ad6e:	3514      	adds	r5, #20
 800ad70:	3714      	adds	r7, #20
 800ad72:	45c2      	cmp	sl, r8
 800ad74:	d24f      	bcs.n	800ae16 <__multiply+0x106>
 800ad76:	f8cd b008 	str.w	fp, [sp, #8]
 800ad7a:	9403      	str	r4, [sp, #12]
 800ad7c:	46ab      	mov	fp, r5
 800ad7e:	f85a 5b04 	ldr.w	r5, [sl], #4
 800ad82:	b2ac      	uxth	r4, r5
 800ad84:	b1e4      	cbz	r4, 800adc0 <__multiply+0xb0>
 800ad86:	465a      	mov	r2, fp
 800ad88:	464b      	mov	r3, r9
 800ad8a:	2100      	movs	r1, #0
 800ad8c:	f852 6b04 	ldr.w	r6, [r2], #4
 800ad90:	681d      	ldr	r5, [r3, #0]
 800ad92:	b2b0      	uxth	r0, r6
 800ad94:	fa11 f185 	uxtah	r1, r1, r5
 800ad98:	0c36      	lsrs	r6, r6, #16
 800ad9a:	0c2d      	lsrs	r5, r5, #16
 800ad9c:	fb04 1000 	mla	r0, r4, r0, r1
 800ada0:	fb04 5106 	mla	r1, r4, r6, r5
 800ada4:	eb01 4110 	add.w	r1, r1, r0, lsr #16
 800ada8:	b280      	uxth	r0, r0
 800adaa:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800adae:	0c09      	lsrs	r1, r1, #16
 800adb0:	4297      	cmp	r7, r2
 800adb2:	461d      	mov	r5, r3
 800adb4:	f843 0b04 	str.w	r0, [r3], #4
 800adb8:	d8e8      	bhi.n	800ad8c <__multiply+0x7c>
 800adba:	6069      	str	r1, [r5, #4]
 800adbc:	f85a 5c04 	ldr.w	r5, [sl, #-4]
 800adc0:	0c2d      	lsrs	r5, r5, #16
 800adc2:	d021      	beq.n	800ae08 <__multiply+0xf8>
 800adc4:	f8d9 6000 	ldr.w	r6, [r9]
 800adc8:	465b      	mov	r3, fp
 800adca:	4630      	mov	r0, r6
 800adcc:	4649      	mov	r1, r9
 800adce:	f04f 0c00 	mov.w	ip, #0
 800add2:	e000      	b.n	800add6 <__multiply+0xc6>
 800add4:	4611      	mov	r1, r2
 800add6:	881a      	ldrh	r2, [r3, #0]
 800add8:	eb0c 4c10 	add.w	ip, ip, r0, lsr #16
 800addc:	fb05 cc02 	mla	ip, r5, r2, ip
 800ade0:	b2b6      	uxth	r6, r6
 800ade2:	460a      	mov	r2, r1
 800ade4:	ea46 460c 	orr.w	r6, r6, ip, lsl #16
 800ade8:	f842 6b04 	str.w	r6, [r2], #4
 800adec:	f853 6b04 	ldr.w	r6, [r3], #4
 800adf0:	6848      	ldr	r0, [r1, #4]
 800adf2:	0c36      	lsrs	r6, r6, #16
 800adf4:	b284      	uxth	r4, r0
 800adf6:	fb05 4606 	mla	r6, r5, r6, r4
 800adfa:	eb06 461c 	add.w	r6, r6, ip, lsr #16
 800adfe:	429f      	cmp	r7, r3
 800ae00:	ea4f 4c16 	mov.w	ip, r6, lsr #16
 800ae04:	d8e6      	bhi.n	800add4 <__multiply+0xc4>
 800ae06:	604e      	str	r6, [r1, #4]
 800ae08:	45d0      	cmp	r8, sl
 800ae0a:	f109 0904 	add.w	r9, r9, #4
 800ae0e:	d8b6      	bhi.n	800ad7e <__multiply+0x6e>
 800ae10:	f8dd b008 	ldr.w	fp, [sp, #8]
 800ae14:	9c03      	ldr	r4, [sp, #12]
 800ae16:	2c00      	cmp	r4, #0
 800ae18:	dd0c      	ble.n	800ae34 <__multiply+0x124>
 800ae1a:	e89d 0006 	ldmia.w	sp, {r1, r2}
 800ae1e:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 800ae22:	b93b      	cbnz	r3, 800ae34 <__multiply+0x124>
 800ae24:	f1ab 0b04 	sub.w	fp, fp, #4
 800ae28:	e002      	b.n	800ae30 <__multiply+0x120>
 800ae2a:	f85b 3d04 	ldr.w	r3, [fp, #-4]!
 800ae2e:	b90b      	cbnz	r3, 800ae34 <__multiply+0x124>
 800ae30:	3c01      	subs	r4, #1
 800ae32:	d1fa      	bne.n	800ae2a <__multiply+0x11a>
 800ae34:	9a00      	ldr	r2, [sp, #0]
 800ae36:	6114      	str	r4, [r2, #16]
 800ae38:	4610      	mov	r0, r2
 800ae3a:	b005      	add	sp, #20
 800ae3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ae40 <__pow5mult>:
 800ae40:	f012 0303 	ands.w	r3, r2, #3
 800ae44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae48:	4615      	mov	r5, r2
 800ae4a:	4604      	mov	r4, r0
 800ae4c:	4688      	mov	r8, r1
 800ae4e:	d12d      	bne.n	800aeac <__pow5mult+0x6c>
 800ae50:	10ad      	asrs	r5, r5, #2
 800ae52:	d01d      	beq.n	800ae90 <__pow5mult+0x50>
 800ae54:	6ca7      	ldr	r7, [r4, #72]	; 0x48
 800ae56:	b92f      	cbnz	r7, 800ae64 <__pow5mult+0x24>
 800ae58:	e031      	b.n	800aebe <__pow5mult+0x7e>
 800ae5a:	106d      	asrs	r5, r5, #1
 800ae5c:	d018      	beq.n	800ae90 <__pow5mult+0x50>
 800ae5e:	683e      	ldr	r6, [r7, #0]
 800ae60:	b1ce      	cbz	r6, 800ae96 <__pow5mult+0x56>
 800ae62:	4637      	mov	r7, r6
 800ae64:	07e8      	lsls	r0, r5, #31
 800ae66:	d5f8      	bpl.n	800ae5a <__pow5mult+0x1a>
 800ae68:	4641      	mov	r1, r8
 800ae6a:	463a      	mov	r2, r7
 800ae6c:	4620      	mov	r0, r4
 800ae6e:	f7ff ff4f 	bl	800ad10 <__multiply>
 800ae72:	f1b8 0f00 	cmp.w	r8, #0
 800ae76:	d017      	beq.n	800aea8 <__pow5mult+0x68>
 800ae78:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800ae7c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800ae7e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ae82:	106d      	asrs	r5, r5, #1
 800ae84:	f8c8 1000 	str.w	r1, [r8]
 800ae88:	f843 8022 	str.w	r8, [r3, r2, lsl #2]
 800ae8c:	4680      	mov	r8, r0
 800ae8e:	d1e6      	bne.n	800ae5e <__pow5mult+0x1e>
 800ae90:	4640      	mov	r0, r8
 800ae92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae96:	4639      	mov	r1, r7
 800ae98:	463a      	mov	r2, r7
 800ae9a:	4620      	mov	r0, r4
 800ae9c:	f7ff ff38 	bl	800ad10 <__multiply>
 800aea0:	6038      	str	r0, [r7, #0]
 800aea2:	6006      	str	r6, [r0, #0]
 800aea4:	4607      	mov	r7, r0
 800aea6:	e7dd      	b.n	800ae64 <__pow5mult+0x24>
 800aea8:	4680      	mov	r8, r0
 800aeaa:	e7d6      	b.n	800ae5a <__pow5mult+0x1a>
 800aeac:	1e5e      	subs	r6, r3, #1
 800aeae:	4a09      	ldr	r2, [pc, #36]	; (800aed4 <__pow5mult+0x94>)
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 800aeb6:	f7ff fe45 	bl	800ab44 <__multadd>
 800aeba:	4680      	mov	r8, r0
 800aebc:	e7c8      	b.n	800ae50 <__pow5mult+0x10>
 800aebe:	4620      	mov	r0, r4
 800aec0:	f240 2171 	movw	r1, #625	; 0x271
 800aec4:	f7ff ff1a 	bl	800acfc <__i2b>
 800aec8:	2300      	movs	r3, #0
 800aeca:	64a0      	str	r0, [r4, #72]	; 0x48
 800aecc:	4607      	mov	r7, r0
 800aece:	6003      	str	r3, [r0, #0]
 800aed0:	e7c8      	b.n	800ae64 <__pow5mult+0x24>
 800aed2:	bf00      	nop
 800aed4:	0800d2a0 	.word	0x0800d2a0

0800aed8 <__lshift>:
 800aed8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aedc:	4691      	mov	r9, r2
 800aede:	690a      	ldr	r2, [r1, #16]
 800aee0:	688b      	ldr	r3, [r1, #8]
 800aee2:	ea4f 1769 	mov.w	r7, r9, asr #5
 800aee6:	eb07 0b02 	add.w	fp, r7, r2
 800aeea:	f10b 0501 	add.w	r5, fp, #1
 800aeee:	429d      	cmp	r5, r3
 800aef0:	460c      	mov	r4, r1
 800aef2:	4606      	mov	r6, r0
 800aef4:	6849      	ldr	r1, [r1, #4]
 800aef6:	dd03      	ble.n	800af00 <__lshift+0x28>
 800aef8:	005b      	lsls	r3, r3, #1
 800aefa:	3101      	adds	r1, #1
 800aefc:	429d      	cmp	r5, r3
 800aefe:	dcfb      	bgt.n	800aef8 <__lshift+0x20>
 800af00:	4630      	mov	r0, r6
 800af02:	f7ff fdef 	bl	800aae4 <_Balloc>
 800af06:	2f00      	cmp	r7, #0
 800af08:	f100 0314 	add.w	r3, r0, #20
 800af0c:	dd09      	ble.n	800af22 <__lshift+0x4a>
 800af0e:	2200      	movs	r2, #0
 800af10:	4611      	mov	r1, r2
 800af12:	3201      	adds	r2, #1
 800af14:	42ba      	cmp	r2, r7
 800af16:	f843 1b04 	str.w	r1, [r3], #4
 800af1a:	d1fa      	bne.n	800af12 <__lshift+0x3a>
 800af1c:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 800af20:	3314      	adds	r3, #20
 800af22:	6922      	ldr	r2, [r4, #16]
 800af24:	f019 091f 	ands.w	r9, r9, #31
 800af28:	eb04 0c82 	add.w	ip, r4, r2, lsl #2
 800af2c:	f104 0114 	add.w	r1, r4, #20
 800af30:	f10c 0c14 	add.w	ip, ip, #20
 800af34:	d022      	beq.n	800af7c <__lshift+0xa4>
 800af36:	f1c9 0a20 	rsb	sl, r9, #32
 800af3a:	2200      	movs	r2, #0
 800af3c:	e000      	b.n	800af40 <__lshift+0x68>
 800af3e:	463b      	mov	r3, r7
 800af40:	f8d1 8000 	ldr.w	r8, [r1]
 800af44:	461f      	mov	r7, r3
 800af46:	fa08 f809 	lsl.w	r8, r8, r9
 800af4a:	ea48 0202 	orr.w	r2, r8, r2
 800af4e:	f847 2b04 	str.w	r2, [r7], #4
 800af52:	f851 2b04 	ldr.w	r2, [r1], #4
 800af56:	458c      	cmp	ip, r1
 800af58:	fa22 f20a 	lsr.w	r2, r2, sl
 800af5c:	d8ef      	bhi.n	800af3e <__lshift+0x66>
 800af5e:	605a      	str	r2, [r3, #4]
 800af60:	b10a      	cbz	r2, 800af66 <__lshift+0x8e>
 800af62:	f10b 0502 	add.w	r5, fp, #2
 800af66:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 800af68:	6862      	ldr	r2, [r4, #4]
 800af6a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800af6e:	3d01      	subs	r5, #1
 800af70:	6105      	str	r5, [r0, #16]
 800af72:	6021      	str	r1, [r4, #0]
 800af74:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800af78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af7c:	f851 2b04 	ldr.w	r2, [r1], #4
 800af80:	458c      	cmp	ip, r1
 800af82:	f843 2b04 	str.w	r2, [r3], #4
 800af86:	d9ee      	bls.n	800af66 <__lshift+0x8e>
 800af88:	f851 2b04 	ldr.w	r2, [r1], #4
 800af8c:	458c      	cmp	ip, r1
 800af8e:	f843 2b04 	str.w	r2, [r3], #4
 800af92:	d8f3      	bhi.n	800af7c <__lshift+0xa4>
 800af94:	e7e7      	b.n	800af66 <__lshift+0x8e>
 800af96:	bf00      	nop

0800af98 <__mcmp>:
 800af98:	4603      	mov	r3, r0
 800af9a:	690a      	ldr	r2, [r1, #16]
 800af9c:	6900      	ldr	r0, [r0, #16]
 800af9e:	1a80      	subs	r0, r0, r2
 800afa0:	b430      	push	{r4, r5}
 800afa2:	d111      	bne.n	800afc8 <__mcmp+0x30>
 800afa4:	3204      	adds	r2, #4
 800afa6:	0094      	lsls	r4, r2, #2
 800afa8:	191a      	adds	r2, r3, r4
 800afaa:	1909      	adds	r1, r1, r4
 800afac:	3314      	adds	r3, #20
 800afae:	3204      	adds	r2, #4
 800afb0:	3104      	adds	r1, #4
 800afb2:	f852 5c04 	ldr.w	r5, [r2, #-4]
 800afb6:	f851 4c04 	ldr.w	r4, [r1, #-4]
 800afba:	3a04      	subs	r2, #4
 800afbc:	42a5      	cmp	r5, r4
 800afbe:	f1a1 0104 	sub.w	r1, r1, #4
 800afc2:	d103      	bne.n	800afcc <__mcmp+0x34>
 800afc4:	4293      	cmp	r3, r2
 800afc6:	d3f4      	bcc.n	800afb2 <__mcmp+0x1a>
 800afc8:	bc30      	pop	{r4, r5}
 800afca:	4770      	bx	lr
 800afcc:	bf38      	it	cc
 800afce:	f04f 30ff 	movcc.w	r0, #4294967295	; 0xffffffff
 800afd2:	d3f9      	bcc.n	800afc8 <__mcmp+0x30>
 800afd4:	2001      	movs	r0, #1
 800afd6:	e7f7      	b.n	800afc8 <__mcmp+0x30>

0800afd8 <__mdiff>:
 800afd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afdc:	460c      	mov	r4, r1
 800afde:	4606      	mov	r6, r0
 800afe0:	4611      	mov	r1, r2
 800afe2:	4620      	mov	r0, r4
 800afe4:	4615      	mov	r5, r2
 800afe6:	f7ff ffd7 	bl	800af98 <__mcmp>
 800afea:	1e07      	subs	r7, r0, #0
 800afec:	d058      	beq.n	800b0a0 <__mdiff+0xc8>
 800afee:	db52      	blt.n	800b096 <__mdiff+0xbe>
 800aff0:	2700      	movs	r7, #0
 800aff2:	4630      	mov	r0, r6
 800aff4:	6861      	ldr	r1, [r4, #4]
 800aff6:	f7ff fd75 	bl	800aae4 <_Balloc>
 800affa:	f8d4 c010 	ldr.w	ip, [r4, #16]
 800affe:	692b      	ldr	r3, [r5, #16]
 800b000:	60c7      	str	r7, [r0, #12]
 800b002:	eb05 0883 	add.w	r8, r5, r3, lsl #2
 800b006:	eb04 078c 	add.w	r7, r4, ip, lsl #2
 800b00a:	3714      	adds	r7, #20
 800b00c:	f108 0814 	add.w	r8, r8, #20
 800b010:	3414      	adds	r4, #20
 800b012:	3514      	adds	r5, #20
 800b014:	f100 0914 	add.w	r9, r0, #20
 800b018:	2600      	movs	r6, #0
 800b01a:	f854 3b04 	ldr.w	r3, [r4], #4
 800b01e:	f855 2b04 	ldr.w	r2, [r5], #4
 800b022:	fa16 f183 	uxtah	r1, r6, r3
 800b026:	fa1f fa82 	uxth.w	sl, r2
 800b02a:	0c12      	lsrs	r2, r2, #16
 800b02c:	ebc2 4613 	rsb	r6, r2, r3, lsr #16
 800b030:	ebca 0101 	rsb	r1, sl, r1
 800b034:	eb06 4621 	add.w	r6, r6, r1, asr #16
 800b038:	464b      	mov	r3, r9
 800b03a:	b289      	uxth	r1, r1
 800b03c:	ea41 4106 	orr.w	r1, r1, r6, lsl #16
 800b040:	f843 1b04 	str.w	r1, [r3], #4
 800b044:	1436      	asrs	r6, r6, #16
 800b046:	45a8      	cmp	r8, r5
 800b048:	4622      	mov	r2, r4
 800b04a:	4699      	mov	r9, r3
 800b04c:	d8e5      	bhi.n	800b01a <__mdiff+0x42>
 800b04e:	42a7      	cmp	r7, r4
 800b050:	4698      	mov	r8, r3
 800b052:	d914      	bls.n	800b07e <__mdiff+0xa6>
 800b054:	f852 5b04 	ldr.w	r5, [r2], #4
 800b058:	fa16 f685 	uxtah	r6, r6, r5
 800b05c:	0c2d      	lsrs	r5, r5, #16
 800b05e:	eb05 4526 	add.w	r5, r5, r6, asr #16
 800b062:	b2b6      	uxth	r6, r6
 800b064:	ea46 4105 	orr.w	r1, r6, r5, lsl #16
 800b068:	142e      	asrs	r6, r5, #16
 800b06a:	4297      	cmp	r7, r2
 800b06c:	f843 1b04 	str.w	r1, [r3], #4
 800b070:	d8f0      	bhi.n	800b054 <__mdiff+0x7c>
 800b072:	43e3      	mvns	r3, r4
 800b074:	19db      	adds	r3, r3, r7
 800b076:	f023 0303 	bic.w	r3, r3, #3
 800b07a:	3304      	adds	r3, #4
 800b07c:	4443      	add	r3, r8
 800b07e:	b931      	cbnz	r1, 800b08e <__mdiff+0xb6>
 800b080:	3b04      	subs	r3, #4
 800b082:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b086:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800b08a:	2a00      	cmp	r2, #0
 800b08c:	d0f9      	beq.n	800b082 <__mdiff+0xaa>
 800b08e:	f8c0 c010 	str.w	ip, [r0, #16]
 800b092:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b096:	4623      	mov	r3, r4
 800b098:	2701      	movs	r7, #1
 800b09a:	462c      	mov	r4, r5
 800b09c:	461d      	mov	r5, r3
 800b09e:	e7a8      	b.n	800aff2 <__mdiff+0x1a>
 800b0a0:	4630      	mov	r0, r6
 800b0a2:	4639      	mov	r1, r7
 800b0a4:	f7ff fd1e 	bl	800aae4 <_Balloc>
 800b0a8:	2301      	movs	r3, #1
 800b0aa:	6103      	str	r3, [r0, #16]
 800b0ac:	6147      	str	r7, [r0, #20]
 800b0ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0b2:	bf00      	nop

0800b0b4 <__ulp>:
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 800b0ba:	400b      	ands	r3, r1
 800b0bc:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	dd02      	ble.n	800b0ca <__ulp+0x16>
 800b0c4:	4619      	mov	r1, r3
 800b0c6:	2000      	movs	r0, #0
 800b0c8:	4770      	bx	lr
 800b0ca:	425b      	negs	r3, r3
 800b0cc:	151b      	asrs	r3, r3, #20
 800b0ce:	2100      	movs	r1, #0
 800b0d0:	2b13      	cmp	r3, #19
 800b0d2:	dd0b      	ble.n	800b0ec <__ulp+0x38>
 800b0d4:	2b32      	cmp	r3, #50	; 0x32
 800b0d6:	dd02      	ble.n	800b0de <__ulp+0x2a>
 800b0d8:	2301      	movs	r3, #1
 800b0da:	4618      	mov	r0, r3
 800b0dc:	4770      	bx	lr
 800b0de:	2201      	movs	r2, #1
 800b0e0:	f1c3 0333 	rsb	r3, r3, #51	; 0x33
 800b0e4:	fa12 f303 	lsls.w	r3, r2, r3
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	4770      	bx	lr
 800b0ec:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800b0f0:	fa52 f103 	asrs.w	r1, r2, r3
 800b0f4:	2000      	movs	r0, #0
 800b0f6:	4770      	bx	lr

0800b0f8 <__b2d>:
 800b0f8:	6902      	ldr	r2, [r0, #16]
 800b0fa:	3204      	adds	r2, #4
 800b0fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0fe:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 800b102:	4603      	mov	r3, r0
 800b104:	eb00 0482 	add.w	r4, r0, r2, lsl #2
 800b108:	4628      	mov	r0, r5
 800b10a:	460f      	mov	r7, r1
 800b10c:	f103 0614 	add.w	r6, r3, #20
 800b110:	f7ff fda8 	bl	800ac64 <__hi0bits>
 800b114:	f1c0 0320 	rsb	r3, r0, #32
 800b118:	280a      	cmp	r0, #10
 800b11a:	603b      	str	r3, [r7, #0]
 800b11c:	4623      	mov	r3, r4
 800b11e:	dc14      	bgt.n	800b14a <__b2d+0x52>
 800b120:	f1c0 010b 	rsb	r1, r0, #11
 800b124:	fa35 f701 	lsrs.w	r7, r5, r1
 800b128:	f047 577f 	orr.w	r7, r7, #1069547520	; 0x3fc00000
 800b12c:	42a6      	cmp	r6, r4
 800b12e:	f447 1340 	orr.w	r3, r7, #3145728	; 0x300000
 800b132:	d22e      	bcs.n	800b192 <__b2d+0x9a>
 800b134:	f854 4c04 	ldr.w	r4, [r4, #-4]
 800b138:	fa34 f101 	lsrs.w	r1, r4, r1
 800b13c:	3015      	adds	r0, #21
 800b13e:	4085      	lsls	r5, r0
 800b140:	ea41 0205 	orr.w	r2, r1, r5
 800b144:	4610      	mov	r0, r2
 800b146:	4619      	mov	r1, r3
 800b148:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b14a:	2100      	movs	r1, #0
 800b14c:	42a6      	cmp	r6, r4
 800b14e:	d202      	bcs.n	800b156 <__b2d+0x5e>
 800b150:	f853 1c04 	ldr.w	r1, [r3, #-4]
 800b154:	3c04      	subs	r4, #4
 800b156:	f1b0 070b 	subs.w	r7, r0, #11
 800b15a:	bf02      	ittt	eq
 800b15c:	f045 557f 	orreq.w	r5, r5, #1069547520	; 0x3fc00000
 800b160:	f445 1340 	orreq.w	r3, r5, #3145728	; 0x300000
 800b164:	460a      	moveq	r2, r1
 800b166:	d0ed      	beq.n	800b144 <__b2d+0x4c>
 800b168:	40bd      	lsls	r5, r7
 800b16a:	f1c0 002b 	rsb	r0, r0, #43	; 0x2b
 800b16e:	f045 557f 	orr.w	r5, r5, #1069547520	; 0x3fc00000
 800b172:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b176:	fa21 fc00 	lsr.w	ip, r1, r0
 800b17a:	42b4      	cmp	r4, r6
 800b17c:	ea45 030c 	orr.w	r3, r5, ip
 800b180:	d909      	bls.n	800b196 <__b2d+0x9e>
 800b182:	f854 4c04 	ldr.w	r4, [r4, #-4]
 800b186:	fa34 f000 	lsrs.w	r0, r4, r0
 800b18a:	40b9      	lsls	r1, r7
 800b18c:	ea40 0201 	orr.w	r2, r0, r1
 800b190:	e7d8      	b.n	800b144 <__b2d+0x4c>
 800b192:	2100      	movs	r1, #0
 800b194:	e7d2      	b.n	800b13c <__b2d+0x44>
 800b196:	2000      	movs	r0, #0
 800b198:	e7f7      	b.n	800b18a <__b2d+0x92>
 800b19a:	bf00      	nop

0800b19c <__d2b>:
 800b19c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b1a0:	b083      	sub	sp, #12
 800b1a2:	2101      	movs	r1, #1
 800b1a4:	461d      	mov	r5, r3
 800b1a6:	4614      	mov	r4, r2
 800b1a8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800b1aa:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800b1ac:	f7ff fc9a 	bl	800aae4 <_Balloc>
 800b1b0:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
 800b1b4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b1b8:	f3c5 590a 	ubfx	r9, r5, #20, #11
 800b1bc:	4680      	mov	r8, r0
 800b1be:	9301      	str	r3, [sp, #4]
 800b1c0:	f1b9 0f00 	cmp.w	r9, #0
 800b1c4:	d002      	beq.n	800b1cc <__d2b+0x30>
 800b1c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b1ca:	9301      	str	r3, [sp, #4]
 800b1cc:	2c00      	cmp	r4, #0
 800b1ce:	d025      	beq.n	800b21c <__d2b+0x80>
 800b1d0:	a802      	add	r0, sp, #8
 800b1d2:	f840 4d08 	str.w	r4, [r0, #-8]!
 800b1d6:	4668      	mov	r0, sp
 800b1d8:	f7ff fd62 	bl	800aca0 <__lo0bits>
 800b1dc:	9b01      	ldr	r3, [sp, #4]
 800b1de:	2800      	cmp	r0, #0
 800b1e0:	d132      	bne.n	800b248 <__d2b+0xac>
 800b1e2:	9a00      	ldr	r2, [sp, #0]
 800b1e4:	f8c8 2014 	str.w	r2, [r8, #20]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	bf0c      	ite	eq
 800b1ec:	2401      	moveq	r4, #1
 800b1ee:	2402      	movne	r4, #2
 800b1f0:	f8c8 3018 	str.w	r3, [r8, #24]
 800b1f4:	f8c8 4010 	str.w	r4, [r8, #16]
 800b1f8:	f1b9 0f00 	cmp.w	r9, #0
 800b1fc:	d11b      	bne.n	800b236 <__d2b+0x9a>
 800b1fe:	eb08 0284 	add.w	r2, r8, r4, lsl #2
 800b202:	f2a0 4332 	subw	r3, r0, #1074	; 0x432
 800b206:	6910      	ldr	r0, [r2, #16]
 800b208:	603b      	str	r3, [r7, #0]
 800b20a:	f7ff fd2b 	bl	800ac64 <__hi0bits>
 800b20e:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 800b212:	6030      	str	r0, [r6, #0]
 800b214:	4640      	mov	r0, r8
 800b216:	b003      	add	sp, #12
 800b218:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b21c:	a801      	add	r0, sp, #4
 800b21e:	f7ff fd3f 	bl	800aca0 <__lo0bits>
 800b222:	9b01      	ldr	r3, [sp, #4]
 800b224:	2401      	movs	r4, #1
 800b226:	f8c8 3014 	str.w	r3, [r8, #20]
 800b22a:	f8c8 4010 	str.w	r4, [r8, #16]
 800b22e:	3020      	adds	r0, #32
 800b230:	f1b9 0f00 	cmp.w	r9, #0
 800b234:	d0e3      	beq.n	800b1fe <__d2b+0x62>
 800b236:	f2a9 4933 	subw	r9, r9, #1075	; 0x433
 800b23a:	eb09 0300 	add.w	r3, r9, r0
 800b23e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b242:	603b      	str	r3, [r7, #0]
 800b244:	6030      	str	r0, [r6, #0]
 800b246:	e7e5      	b.n	800b214 <__d2b+0x78>
 800b248:	f1c0 0220 	rsb	r2, r0, #32
 800b24c:	9900      	ldr	r1, [sp, #0]
 800b24e:	fa13 f202 	lsls.w	r2, r3, r2
 800b252:	430a      	orrs	r2, r1
 800b254:	40c3      	lsrs	r3, r0
 800b256:	f8c8 2014 	str.w	r2, [r8, #20]
 800b25a:	9301      	str	r3, [sp, #4]
 800b25c:	e7c4      	b.n	800b1e8 <__d2b+0x4c>
 800b25e:	bf00      	nop

0800b260 <__ratio>:
 800b260:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b264:	b083      	sub	sp, #12
 800b266:	460d      	mov	r5, r1
 800b268:	4669      	mov	r1, sp
 800b26a:	4604      	mov	r4, r0
 800b26c:	f7ff ff44 	bl	800b0f8 <__b2d>
 800b270:	4689      	mov	r9, r1
 800b272:	4680      	mov	r8, r0
 800b274:	a901      	add	r1, sp, #4
 800b276:	4628      	mov	r0, r5
 800b278:	f7ff ff3e 	bl	800b0f8 <__b2d>
 800b27c:	460f      	mov	r7, r1
 800b27e:	e89d 000a 	ldmia.w	sp, {r1, r3}
 800b282:	692a      	ldr	r2, [r5, #16]
 800b284:	6924      	ldr	r4, [r4, #16]
 800b286:	1acb      	subs	r3, r1, r3
 800b288:	1aa4      	subs	r4, r4, r2
 800b28a:	eb03 1444 	add.w	r4, r3, r4, lsl #5
 800b28e:	2c00      	cmp	r4, #0
 800b290:	4606      	mov	r6, r0
 800b292:	464b      	mov	r3, r9
 800b294:	4639      	mov	r1, r7
 800b296:	bfcb      	itete	gt
 800b298:	eb09 5304 	addgt.w	r3, r9, r4, lsl #20
 800b29c:	eba7 5104 	suble.w	r1, r7, r4, lsl #20
 800b2a0:	4699      	movgt	r9, r3
 800b2a2:	460f      	movle	r7, r1
 800b2a4:	bfcc      	ite	gt
 800b2a6:	46c0      	nopgt			; (mov r8, r8)
 800b2a8:	4636      	movle	r6, r6
 800b2aa:	4640      	mov	r0, r8
 800b2ac:	4649      	mov	r1, r9
 800b2ae:	4632      	mov	r2, r6
 800b2b0:	463b      	mov	r3, r7
 800b2b2:	f001 fc53 	bl	800cb5c <__aeabi_ddiv>
 800b2b6:	b003      	add	sp, #12
 800b2b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800b2bc <_mprec_log10>:
 800b2bc:	b510      	push	{r4, lr}
 800b2be:	4604      	mov	r4, r0
 800b2c0:	2100      	movs	r1, #0
 800b2c2:	2000      	movs	r0, #0
 800b2c4:	2c17      	cmp	r4, #23
 800b2c6:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 800b2ca:	dd08      	ble.n	800b2de <_mprec_log10+0x22>
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800b2d4:	f001 fb18 	bl	800c908 <__aeabi_dmul>
 800b2d8:	3c01      	subs	r4, #1
 800b2da:	d1f7      	bne.n	800b2cc <_mprec_log10+0x10>
 800b2dc:	bd10      	pop	{r4, pc}
 800b2de:	4b03      	ldr	r3, [pc, #12]	; (800b2ec <_mprec_log10+0x30>)
 800b2e0:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800b2e4:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 800b2e8:	bd10      	pop	{r4, pc}
 800b2ea:	bf00      	nop
 800b2ec:	0800d2a0 	.word	0x0800d2a0

0800b2f0 <__copybits>:
 800b2f0:	6913      	ldr	r3, [r2, #16]
 800b2f2:	3901      	subs	r1, #1
 800b2f4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b2f8:	1149      	asrs	r1, r1, #5
 800b2fa:	b470      	push	{r4, r5, r6}
 800b2fc:	3314      	adds	r3, #20
 800b2fe:	f102 0414 	add.w	r4, r2, #20
 800b302:	3101      	adds	r1, #1
 800b304:	429c      	cmp	r4, r3
 800b306:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b30a:	d20c      	bcs.n	800b326 <__copybits+0x36>
 800b30c:	4605      	mov	r5, r0
 800b30e:	f854 6b04 	ldr.w	r6, [r4], #4
 800b312:	42a3      	cmp	r3, r4
 800b314:	f845 6b04 	str.w	r6, [r5], #4
 800b318:	d8f9      	bhi.n	800b30e <__copybits+0x1e>
 800b31a:	1a9b      	subs	r3, r3, r2
 800b31c:	3b15      	subs	r3, #21
 800b31e:	f023 0303 	bic.w	r3, r3, #3
 800b322:	3304      	adds	r3, #4
 800b324:	18c0      	adds	r0, r0, r3
 800b326:	4281      	cmp	r1, r0
 800b328:	d904      	bls.n	800b334 <__copybits+0x44>
 800b32a:	2300      	movs	r3, #0
 800b32c:	f840 3b04 	str.w	r3, [r0], #4
 800b330:	4281      	cmp	r1, r0
 800b332:	d8fb      	bhi.n	800b32c <__copybits+0x3c>
 800b334:	bc70      	pop	{r4, r5, r6}
 800b336:	4770      	bx	lr

0800b338 <__any_on>:
 800b338:	6902      	ldr	r2, [r0, #16]
 800b33a:	114b      	asrs	r3, r1, #5
 800b33c:	429a      	cmp	r2, r3
 800b33e:	b410      	push	{r4}
 800b340:	db01      	blt.n	800b346 <__any_on+0xe>
 800b342:	461a      	mov	r2, r3
 800b344:	dc13      	bgt.n	800b36e <__any_on+0x36>
 800b346:	3204      	adds	r2, #4
 800b348:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 800b34c:	f100 0114 	add.w	r1, r0, #20
 800b350:	1d1c      	adds	r4, r3, #4
 800b352:	42a1      	cmp	r1, r4
 800b354:	d218      	bcs.n	800b388 <__any_on+0x50>
 800b356:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800b35a:	b92a      	cbnz	r2, 800b368 <__any_on+0x30>
 800b35c:	4299      	cmp	r1, r3
 800b35e:	d213      	bcs.n	800b388 <__any_on+0x50>
 800b360:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b364:	2a00      	cmp	r2, #0
 800b366:	d0f9      	beq.n	800b35c <__any_on+0x24>
 800b368:	2001      	movs	r0, #1
 800b36a:	bc10      	pop	{r4}
 800b36c:	4770      	bx	lr
 800b36e:	f011 011f 	ands.w	r1, r1, #31
 800b372:	d0e8      	beq.n	800b346 <__any_on+0xe>
 800b374:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800b378:	695b      	ldr	r3, [r3, #20]
 800b37a:	fa33 f401 	lsrs.w	r4, r3, r1
 800b37e:	fa14 f101 	lsls.w	r1, r4, r1
 800b382:	4299      	cmp	r1, r3
 800b384:	d1f0      	bne.n	800b368 <__any_on+0x30>
 800b386:	e7de      	b.n	800b346 <__any_on+0xe>
 800b388:	2000      	movs	r0, #0
 800b38a:	e7ee      	b.n	800b36a <__any_on+0x32>

0800b38c <__fpclassifyd>:
 800b38c:	ea50 0201 	orrs.w	r2, r0, r1
 800b390:	b410      	push	{r4}
 800b392:	460b      	mov	r3, r1
 800b394:	d102      	bne.n	800b39c <__fpclassifyd+0x10>
 800b396:	2002      	movs	r0, #2
 800b398:	bc10      	pop	{r4}
 800b39a:	4770      	bx	lr
 800b39c:	f1d0 0101 	rsbs	r1, r0, #1
 800b3a0:	bf38      	it	cc
 800b3a2:	2100      	movcc	r1, #0
 800b3a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b3a8:	bf08      	it	eq
 800b3aa:	2800      	cmpeq	r0, #0
 800b3ac:	d0f3      	beq.n	800b396 <__fpclassifyd+0xa>
 800b3ae:	f103 44ff 	add.w	r4, r3, #2139095040	; 0x7f800000
 800b3b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b3b6:	f504 04e0 	add.w	r4, r4, #7340032	; 0x700000
 800b3ba:	f6c7 72df 	movt	r2, #32735	; 0x7fdf
 800b3be:	f5a3 1080 	sub.w	r0, r3, #1048576	; 0x100000
 800b3c2:	4290      	cmp	r0, r2
 800b3c4:	bf88      	it	hi
 800b3c6:	4294      	cmphi	r4, r2
 800b3c8:	d801      	bhi.n	800b3ce <__fpclassifyd+0x42>
 800b3ca:	2004      	movs	r0, #4
 800b3cc:	e7e4      	b.n	800b398 <__fpclassifyd+0xc>
 800b3ce:	f103 4200 	add.w	r2, r3, #2147483648	; 0x80000000
 800b3d2:	2003      	movs	r0, #3
 800b3d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b3d8:	bf28      	it	cs
 800b3da:	f5b2 1f80 	cmpcs.w	r2, #1048576	; 0x100000
 800b3de:	d3db      	bcc.n	800b398 <__fpclassifyd+0xc>
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	f6c7 72f0 	movt	r2, #32752	; 0x7ff0
 800b3e6:	f513 1f80 	cmn.w	r3, #1048576	; 0x100000
 800b3ea:	bf18      	it	ne
 800b3ec:	4293      	cmpne	r3, r2
 800b3ee:	bf14      	ite	ne
 800b3f0:	2300      	movne	r3, #0
 800b3f2:	2301      	moveq	r3, #1
 800b3f4:	ea01 0003 	and.w	r0, r1, r3
 800b3f8:	e7ce      	b.n	800b398 <__fpclassifyd+0xc>
 800b3fa:	bf00      	nop

0800b3fc <_sbrk_r>:
 800b3fc:	b538      	push	{r3, r4, r5, lr}
 800b3fe:	4c07      	ldr	r4, [pc, #28]	; (800b41c <_sbrk_r+0x20>)
 800b400:	2300      	movs	r3, #0
 800b402:	4605      	mov	r5, r0
 800b404:	4608      	mov	r0, r1
 800b406:	6023      	str	r3, [r4, #0]
 800b408:	f7fc fbde 	bl	8007bc8 <_sbrk>
 800b40c:	1c43      	adds	r3, r0, #1
 800b40e:	d000      	beq.n	800b412 <_sbrk_r+0x16>
 800b410:	bd38      	pop	{r3, r4, r5, pc}
 800b412:	6823      	ldr	r3, [r4, #0]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d0fb      	beq.n	800b410 <_sbrk_r+0x14>
 800b418:	602b      	str	r3, [r5, #0]
 800b41a:	bd38      	pop	{r3, r4, r5, pc}
 800b41c:	2000168c 	.word	0x2000168c

0800b420 <strcmp>:
 800b420:	ea80 0201 	eor.w	r2, r0, r1
 800b424:	f012 0f03 	tst.w	r2, #3
 800b428:	d13a      	bne.n	800b4a0 <strcmp_unaligned>
 800b42a:	f010 0203 	ands.w	r2, r0, #3
 800b42e:	f020 0003 	bic.w	r0, r0, #3
 800b432:	f021 0103 	bic.w	r1, r1, #3
 800b436:	f850 cb04 	ldr.w	ip, [r0], #4
 800b43a:	bf08      	it	eq
 800b43c:	f851 3b04 	ldreq.w	r3, [r1], #4
 800b440:	d00d      	beq.n	800b45e <strcmp+0x3e>
 800b442:	f082 0203 	eor.w	r2, r2, #3
 800b446:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800b44a:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800b44e:	fa23 f202 	lsr.w	r2, r3, r2
 800b452:	f851 3b04 	ldr.w	r3, [r1], #4
 800b456:	ea4c 0c02 	orr.w	ip, ip, r2
 800b45a:	ea43 0302 	orr.w	r3, r3, r2
 800b45e:	bf00      	nop
 800b460:	f1ac 3201 	sub.w	r2, ip, #16843009	; 0x1010101
 800b464:	459c      	cmp	ip, r3
 800b466:	bf01      	itttt	eq
 800b468:	ea22 020c 	biceq.w	r2, r2, ip
 800b46c:	f012 3f80 	tsteq.w	r2, #2155905152	; 0x80808080
 800b470:	f850 cb04 	ldreq.w	ip, [r0], #4
 800b474:	f851 3b04 	ldreq.w	r3, [r1], #4
 800b478:	d0f2      	beq.n	800b460 <strcmp+0x40>
 800b47a:	ea4f 600c 	mov.w	r0, ip, lsl #24
 800b47e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 800b482:	2801      	cmp	r0, #1
 800b484:	bf28      	it	cs
 800b486:	ebb0 6f03 	cmpcs.w	r0, r3, lsl #24
 800b48a:	bf08      	it	eq
 800b48c:	0a1b      	lsreq	r3, r3, #8
 800b48e:	d0f4      	beq.n	800b47a <strcmp+0x5a>
 800b490:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 800b494:	ea4f 6010 	mov.w	r0, r0, lsr #24
 800b498:	eba0 0003 	sub.w	r0, r0, r3
 800b49c:	4770      	bx	lr
 800b49e:	bf00      	nop

0800b4a0 <strcmp_unaligned>:
 800b4a0:	f010 0f03 	tst.w	r0, #3
 800b4a4:	d00a      	beq.n	800b4bc <strcmp_unaligned+0x1c>
 800b4a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b4aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b4ae:	2a01      	cmp	r2, #1
 800b4b0:	bf28      	it	cs
 800b4b2:	429a      	cmpcs	r2, r3
 800b4b4:	d0f4      	beq.n	800b4a0 <strcmp_unaligned>
 800b4b6:	eba2 0003 	sub.w	r0, r2, r3
 800b4ba:	4770      	bx	lr
 800b4bc:	f84d 5d04 	str.w	r5, [sp, #-4]!
 800b4c0:	f84d 4d04 	str.w	r4, [sp, #-4]!
 800b4c4:	f04f 0201 	mov.w	r2, #1
 800b4c8:	ea42 2202 	orr.w	r2, r2, r2, lsl #8
 800b4cc:	ea42 4202 	orr.w	r2, r2, r2, lsl #16
 800b4d0:	f001 0c03 	and.w	ip, r1, #3
 800b4d4:	f021 0103 	bic.w	r1, r1, #3
 800b4d8:	f850 4b04 	ldr.w	r4, [r0], #4
 800b4dc:	f851 5b04 	ldr.w	r5, [r1], #4
 800b4e0:	f1bc 0f02 	cmp.w	ip, #2
 800b4e4:	d026      	beq.n	800b534 <strcmp_unaligned+0x94>
 800b4e6:	d84b      	bhi.n	800b580 <strcmp_unaligned+0xe0>
 800b4e8:	f024 4c7f 	bic.w	ip, r4, #4278190080	; 0xff000000
 800b4ec:	ebbc 2f15 	cmp.w	ip, r5, lsr #8
 800b4f0:	eba4 0302 	sub.w	r3, r4, r2
 800b4f4:	ea23 0304 	bic.w	r3, r3, r4
 800b4f8:	d10d      	bne.n	800b516 <strcmp_unaligned+0x76>
 800b4fa:	ea13 13c2 	ands.w	r3, r3, r2, lsl #7
 800b4fe:	bf08      	it	eq
 800b500:	f851 5b04 	ldreq.w	r5, [r1], #4
 800b504:	d10a      	bne.n	800b51c <strcmp_unaligned+0x7c>
 800b506:	ea8c 0c04 	eor.w	ip, ip, r4
 800b50a:	ebbc 6f05 	cmp.w	ip, r5, lsl #24
 800b50e:	d10c      	bne.n	800b52a <strcmp_unaligned+0x8a>
 800b510:	f850 4b04 	ldr.w	r4, [r0], #4
 800b514:	e7e8      	b.n	800b4e8 <strcmp_unaligned+0x48>
 800b516:	ea4f 2515 	mov.w	r5, r5, lsr #8
 800b51a:	e05c      	b.n	800b5d6 <strcmp_unaligned+0x136>
 800b51c:	f033 437f 	bics.w	r3, r3, #4278190080	; 0xff000000
 800b520:	d152      	bne.n	800b5c8 <strcmp_unaligned+0x128>
 800b522:	780d      	ldrb	r5, [r1, #0]
 800b524:	ea4f 6c14 	mov.w	ip, r4, lsr #24
 800b528:	e055      	b.n	800b5d6 <strcmp_unaligned+0x136>
 800b52a:	ea4f 6c14 	mov.w	ip, r4, lsr #24
 800b52e:	f005 05ff 	and.w	r5, r5, #255	; 0xff
 800b532:	e050      	b.n	800b5d6 <strcmp_unaligned+0x136>
 800b534:	ea4f 4c04 	mov.w	ip, r4, lsl #16
 800b538:	eba4 0302 	sub.w	r3, r4, r2
 800b53c:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800b540:	ea23 0304 	bic.w	r3, r3, r4
 800b544:	ebbc 4f15 	cmp.w	ip, r5, lsr #16
 800b548:	d117      	bne.n	800b57a <strcmp_unaligned+0xda>
 800b54a:	ea13 13c2 	ands.w	r3, r3, r2, lsl #7
 800b54e:	bf08      	it	eq
 800b550:	f851 5b04 	ldreq.w	r5, [r1], #4
 800b554:	d107      	bne.n	800b566 <strcmp_unaligned+0xc6>
 800b556:	ea8c 0c04 	eor.w	ip, ip, r4
 800b55a:	ebbc 4f05 	cmp.w	ip, r5, lsl #16
 800b55e:	d108      	bne.n	800b572 <strcmp_unaligned+0xd2>
 800b560:	f850 4b04 	ldr.w	r4, [r0], #4
 800b564:	e7e6      	b.n	800b534 <strcmp_unaligned+0x94>
 800b566:	041b      	lsls	r3, r3, #16
 800b568:	d12e      	bne.n	800b5c8 <strcmp_unaligned+0x128>
 800b56a:	880d      	ldrh	r5, [r1, #0]
 800b56c:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800b570:	e031      	b.n	800b5d6 <strcmp_unaligned+0x136>
 800b572:	ea4f 4505 	mov.w	r5, r5, lsl #16
 800b576:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800b57a:	ea4f 4515 	mov.w	r5, r5, lsr #16
 800b57e:	e02a      	b.n	800b5d6 <strcmp_unaligned+0x136>
 800b580:	f004 0cff 	and.w	ip, r4, #255	; 0xff
 800b584:	ebbc 6f15 	cmp.w	ip, r5, lsr #24
 800b588:	eba4 0302 	sub.w	r3, r4, r2
 800b58c:	ea23 0304 	bic.w	r3, r3, r4
 800b590:	d10d      	bne.n	800b5ae <strcmp_unaligned+0x10e>
 800b592:	ea13 13c2 	ands.w	r3, r3, r2, lsl #7
 800b596:	bf08      	it	eq
 800b598:	f851 5b04 	ldreq.w	r5, [r1], #4
 800b59c:	d10a      	bne.n	800b5b4 <strcmp_unaligned+0x114>
 800b59e:	ea8c 0c04 	eor.w	ip, ip, r4
 800b5a2:	ebbc 2f05 	cmp.w	ip, r5, lsl #8
 800b5a6:	d10a      	bne.n	800b5be <strcmp_unaligned+0x11e>
 800b5a8:	f850 4b04 	ldr.w	r4, [r0], #4
 800b5ac:	e7e8      	b.n	800b580 <strcmp_unaligned+0xe0>
 800b5ae:	ea4f 6515 	mov.w	r5, r5, lsr #24
 800b5b2:	e010      	b.n	800b5d6 <strcmp_unaligned+0x136>
 800b5b4:	f014 0fff 	tst.w	r4, #255	; 0xff
 800b5b8:	d006      	beq.n	800b5c8 <strcmp_unaligned+0x128>
 800b5ba:	f851 5b04 	ldr.w	r5, [r1], #4
 800b5be:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 800b5c2:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 800b5c6:	e006      	b.n	800b5d6 <strcmp_unaligned+0x136>
 800b5c8:	f04f 0000 	mov.w	r0, #0
 800b5cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b5d0:	f85d 5b04 	ldr.w	r5, [sp], #4
 800b5d4:	4770      	bx	lr
 800b5d6:	f00c 02ff 	and.w	r2, ip, #255	; 0xff
 800b5da:	f005 00ff 	and.w	r0, r5, #255	; 0xff
 800b5de:	2801      	cmp	r0, #1
 800b5e0:	bf28      	it	cs
 800b5e2:	4290      	cmpcs	r0, r2
 800b5e4:	bf04      	itt	eq
 800b5e6:	ea4f 2c1c 	moveq.w	ip, ip, lsr #8
 800b5ea:	0a2d      	lsreq	r5, r5, #8
 800b5ec:	d0f3      	beq.n	800b5d6 <strcmp_unaligned+0x136>
 800b5ee:	eba2 0000 	sub.w	r0, r2, r0
 800b5f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b5f6:	f85d 5b04 	ldr.w	r5, [sp], #4
 800b5fa:	4770      	bx	lr

0800b5fc <strlen>:
 800b5fc:	f020 0103 	bic.w	r1, r0, #3
 800b600:	f010 0003 	ands.w	r0, r0, #3
 800b604:	f1c0 0000 	rsb	r0, r0, #0
 800b608:	f851 3b04 	ldr.w	r3, [r1], #4
 800b60c:	f100 0c04 	add.w	ip, r0, #4
 800b610:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800b614:	f06f 0200 	mvn.w	r2, #0
 800b618:	bf1c      	itt	ne
 800b61a:	fa22 f20c 	lsrne.w	r2, r2, ip
 800b61e:	4313      	orrne	r3, r2
 800b620:	f04f 0c01 	mov.w	ip, #1
 800b624:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 800b628:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 800b62c:	eba3 020c 	sub.w	r2, r3, ip
 800b630:	ea22 0203 	bic.w	r2, r2, r3
 800b634:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 800b638:	bf04      	itt	eq
 800b63a:	f851 3b04 	ldreq.w	r3, [r1], #4
 800b63e:	3004      	addeq	r0, #4
 800b640:	d0f4      	beq.n	800b62c <strlen+0x30>
 800b642:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b646:	bf1f      	itttt	ne
 800b648:	3001      	addne	r0, #1
 800b64a:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
 800b64e:	3001      	addne	r0, #1
 800b650:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
 800b654:	bf18      	it	ne
 800b656:	3001      	addne	r0, #1
 800b658:	4770      	bx	lr
 800b65a:	bf00      	nop

0800b65c <__ssprint_r>:
 800b65c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b660:	b083      	sub	sp, #12
 800b662:	4691      	mov	r9, r2
 800b664:	9001      	str	r0, [sp, #4]
 800b666:	6890      	ldr	r0, [r2, #8]
 800b668:	6817      	ldr	r7, [r2, #0]
 800b66a:	460d      	mov	r5, r1
 800b66c:	2800      	cmp	r0, #0
 800b66e:	d072      	beq.n	800b756 <__ssprint_r+0xfa>
 800b670:	f04f 0a00 	mov.w	sl, #0
 800b674:	6808      	ldr	r0, [r1, #0]
 800b676:	688b      	ldr	r3, [r1, #8]
 800b678:	4654      	mov	r4, sl
 800b67a:	2c00      	cmp	r4, #0
 800b67c:	d048      	beq.n	800b710 <__ssprint_r+0xb4>
 800b67e:	429c      	cmp	r4, r3
 800b680:	461e      	mov	r6, r3
 800b682:	4698      	mov	r8, r3
 800b684:	bf3c      	itt	cc
 800b686:	4626      	movcc	r6, r4
 800b688:	46a0      	movcc	r8, r4
 800b68a:	d331      	bcc.n	800b6f0 <__ssprint_r+0x94>
 800b68c:	89ab      	ldrh	r3, [r5, #12]
 800b68e:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800b692:	d02d      	beq.n	800b6f0 <__ssprint_r+0x94>
 800b694:	696e      	ldr	r6, [r5, #20]
 800b696:	6929      	ldr	r1, [r5, #16]
 800b698:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800b69c:	ebc1 0800 	rsb	r8, r1, r0
 800b6a0:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 800b6a4:	1c60      	adds	r0, r4, #1
 800b6a6:	1076      	asrs	r6, r6, #1
 800b6a8:	4440      	add	r0, r8
 800b6aa:	4286      	cmp	r6, r0
 800b6ac:	4632      	mov	r2, r6
 800b6ae:	bf3c      	itt	cc
 800b6b0:	4606      	movcc	r6, r0
 800b6b2:	4632      	movcc	r2, r6
 800b6b4:	055b      	lsls	r3, r3, #21
 800b6b6:	9801      	ldr	r0, [sp, #4]
 800b6b8:	d52f      	bpl.n	800b71a <__ssprint_r+0xbe>
 800b6ba:	4611      	mov	r1, r2
 800b6bc:	f7fe fed8 	bl	800a470 <_malloc_r>
 800b6c0:	4683      	mov	fp, r0
 800b6c2:	2800      	cmp	r0, #0
 800b6c4:	d032      	beq.n	800b72c <__ssprint_r+0xd0>
 800b6c6:	6929      	ldr	r1, [r5, #16]
 800b6c8:	4642      	mov	r2, r8
 800b6ca:	f7ff f9c3 	bl	800aa54 <memcpy>
 800b6ce:	89ab      	ldrh	r3, [r5, #12]
 800b6d0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b6d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6d8:	81ab      	strh	r3, [r5, #12]
 800b6da:	ebc8 0306 	rsb	r3, r8, r6
 800b6de:	eb0b 0008 	add.w	r0, fp, r8
 800b6e2:	616e      	str	r6, [r5, #20]
 800b6e4:	f8c5 b010 	str.w	fp, [r5, #16]
 800b6e8:	6028      	str	r0, [r5, #0]
 800b6ea:	4626      	mov	r6, r4
 800b6ec:	60ab      	str	r3, [r5, #8]
 800b6ee:	46a0      	mov	r8, r4
 800b6f0:	4642      	mov	r2, r8
 800b6f2:	4651      	mov	r1, sl
 800b6f4:	f000 fcb8 	bl	800c068 <memmove>
 800b6f8:	f8d9 2008 	ldr.w	r2, [r9, #8]
 800b6fc:	68ab      	ldr	r3, [r5, #8]
 800b6fe:	6828      	ldr	r0, [r5, #0]
 800b700:	1b9b      	subs	r3, r3, r6
 800b702:	4440      	add	r0, r8
 800b704:	1b14      	subs	r4, r2, r4
 800b706:	60ab      	str	r3, [r5, #8]
 800b708:	6028      	str	r0, [r5, #0]
 800b70a:	f8c9 4008 	str.w	r4, [r9, #8]
 800b70e:	b1e4      	cbz	r4, 800b74a <__ssprint_r+0xee>
 800b710:	f8d7 a000 	ldr.w	sl, [r7]
 800b714:	687c      	ldr	r4, [r7, #4]
 800b716:	3708      	adds	r7, #8
 800b718:	e7af      	b.n	800b67a <__ssprint_r+0x1e>
 800b71a:	f000 fd47 	bl	800c1ac <_realloc_r>
 800b71e:	4683      	mov	fp, r0
 800b720:	2800      	cmp	r0, #0
 800b722:	d1da      	bne.n	800b6da <__ssprint_r+0x7e>
 800b724:	9801      	ldr	r0, [sp, #4]
 800b726:	6929      	ldr	r1, [r5, #16]
 800b728:	f7fe fd96 	bl	800a258 <_free_r>
 800b72c:	9a01      	ldr	r2, [sp, #4]
 800b72e:	230c      	movs	r3, #12
 800b730:	6013      	str	r3, [r2, #0]
 800b732:	89aa      	ldrh	r2, [r5, #12]
 800b734:	2300      	movs	r3, #0
 800b736:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b73a:	81aa      	strh	r2, [r5, #12]
 800b73c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b740:	f8c9 3008 	str.w	r3, [r9, #8]
 800b744:	f8c9 3004 	str.w	r3, [r9, #4]
 800b748:	e002      	b.n	800b750 <__ssprint_r+0xf4>
 800b74a:	f8c9 4004 	str.w	r4, [r9, #4]
 800b74e:	4620      	mov	r0, r4
 800b750:	b003      	add	sp, #12
 800b752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b756:	6050      	str	r0, [r2, #4]
 800b758:	e7fa      	b.n	800b750 <__ssprint_r+0xf4>
 800b75a:	bf00      	nop

0800b75c <_svfiprintf_r>:
 800b75c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b760:	468a      	mov	sl, r1
 800b762:	8989      	ldrh	r1, [r1, #12]
 800b764:	b0ad      	sub	sp, #180	; 0xb4
 800b766:	0609      	lsls	r1, r1, #24
 800b768:	9007      	str	r0, [sp, #28]
 800b76a:	9305      	str	r3, [sp, #20]
 800b76c:	d504      	bpl.n	800b778 <_svfiprintf_r+0x1c>
 800b76e:	f8da 3010 	ldr.w	r3, [sl, #16]
 800b772:	2b00      	cmp	r3, #0
 800b774:	f000 8422 	beq.w	800bfbc <_svfiprintf_r+0x860>
 800b778:	2300      	movs	r3, #0
 800b77a:	f10d 009f 	add.w	r0, sp, #159	; 0x9f
 800b77e:	f10d 08a0 	add.w	r8, sp, #160	; 0xa0
 800b782:	a90e      	add	r1, sp, #56	; 0x38
 800b784:	930c      	str	r3, [sp, #48]	; 0x30
 800b786:	932a      	str	r3, [sp, #168]	; 0xa8
 800b788:	9329      	str	r3, [sp, #164]	; 0xa4
 800b78a:	9304      	str	r3, [sp, #16]
 800b78c:	ebc0 0308 	rsb	r3, r0, r8
 800b790:	9001      	str	r0, [sp, #4]
 800b792:	9128      	str	r1, [sp, #160]	; 0xa0
 800b794:	4617      	mov	r7, r2
 800b796:	460c      	mov	r4, r1
 800b798:	930d      	str	r3, [sp, #52]	; 0x34
 800b79a:	783b      	ldrb	r3, [r7, #0]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	bf18      	it	ne
 800b7a0:	2b25      	cmpne	r3, #37	; 0x25
 800b7a2:	463d      	mov	r5, r7
 800b7a4:	d016      	beq.n	800b7d4 <_svfiprintf_r+0x78>
 800b7a6:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 800b7aa:	2b25      	cmp	r3, #37	; 0x25
 800b7ac:	bf18      	it	ne
 800b7ae:	2b00      	cmpne	r3, #0
 800b7b0:	d1f9      	bne.n	800b7a6 <_svfiprintf_r+0x4a>
 800b7b2:	1bee      	subs	r6, r5, r7
 800b7b4:	d00e      	beq.n	800b7d4 <_svfiprintf_r+0x78>
 800b7b6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800b7b8:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800b7ba:	6027      	str	r7, [r4, #0]
 800b7bc:	3301      	adds	r3, #1
 800b7be:	1992      	adds	r2, r2, r6
 800b7c0:	2b07      	cmp	r3, #7
 800b7c2:	6066      	str	r6, [r4, #4]
 800b7c4:	922a      	str	r2, [sp, #168]	; 0xa8
 800b7c6:	9329      	str	r3, [sp, #164]	; 0xa4
 800b7c8:	f300 832a 	bgt.w	800be20 <_svfiprintf_r+0x6c4>
 800b7cc:	3408      	adds	r4, #8
 800b7ce:	9b04      	ldr	r3, [sp, #16]
 800b7d0:	199b      	adds	r3, r3, r6
 800b7d2:	9304      	str	r3, [sp, #16]
 800b7d4:	782b      	ldrb	r3, [r5, #0]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	f000 82c5 	beq.w	800bd66 <_svfiprintf_r+0x60a>
 800b7dc:	2200      	movs	r2, #0
 800b7de:	1c6f      	adds	r7, r5, #1
 800b7e0:	4613      	mov	r3, r2
 800b7e2:	f88d 20af 	strb.w	r2, [sp, #175]	; 0xaf
 800b7e6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800b7ea:	9206      	str	r2, [sp, #24]
 800b7ec:	4693      	mov	fp, r2
 800b7ee:	f817 2b01 	ldrb.w	r2, [r7], #1
 800b7f2:	f1a2 0120 	sub.w	r1, r2, #32
 800b7f6:	2958      	cmp	r1, #88	; 0x58
 800b7f8:	f200 8178 	bhi.w	800baec <_svfiprintf_r+0x390>
 800b7fc:	e8df f011 	tbh	[pc, r1, lsl #1]
 800b800:	01760172 	.word	0x01760172
 800b804:	016f0176 	.word	0x016f0176
 800b808:	01760176 	.word	0x01760176
 800b80c:	01760176 	.word	0x01760176
 800b810:	01760176 	.word	0x01760176
 800b814:	01d800af 	.word	0x01d800af
 800b818:	00ba0176 	.word	0x00ba0176
 800b81c:	017601da 	.word	0x017601da
 800b820:	01c401d5 	.word	0x01c401d5
 800b824:	01c401c4 	.word	0x01c401c4
 800b828:	01c401c4 	.word	0x01c401c4
 800b82c:	01c401c4 	.word	0x01c401c4
 800b830:	01c401c4 	.word	0x01c401c4
 800b834:	01760176 	.word	0x01760176
 800b838:	01760176 	.word	0x01760176
 800b83c:	01760176 	.word	0x01760176
 800b840:	01760176 	.word	0x01760176
 800b844:	01760176 	.word	0x01760176
 800b848:	017601a7 	.word	0x017601a7
 800b84c:	01760176 	.word	0x01760176
 800b850:	01760176 	.word	0x01760176
 800b854:	01760176 	.word	0x01760176
 800b858:	01760176 	.word	0x01760176
 800b85c:	005c0176 	.word	0x005c0176
 800b860:	01760176 	.word	0x01760176
 800b864:	01760176 	.word	0x01760176
 800b868:	00a00176 	.word	0x00a00176
 800b86c:	01760176 	.word	0x01760176
 800b870:	0176016a 	.word	0x0176016a
 800b874:	01760176 	.word	0x01760176
 800b878:	01760176 	.word	0x01760176
 800b87c:	01760176 	.word	0x01760176
 800b880:	01760176 	.word	0x01760176
 800b884:	01170176 	.word	0x01170176
 800b888:	01760105 	.word	0x01760105
 800b88c:	01760176 	.word	0x01760176
 800b890:	01050102 	.word	0x01050102
 800b894:	01760176 	.word	0x01760176
 800b898:	01760059 	.word	0x01760059
 800b89c:	005e00d1 	.word	0x005e00d1
 800b8a0:	005900bd 	.word	0x005900bd
 800b8a4:	01870176 	.word	0x01870176
 800b8a8:	00a20176 	.word	0x00a20176
 800b8ac:	01760176 	.word	0x01760176
 800b8b0:	00e2      	.short	0x00e2
 800b8b2:	f04b 0b10 	orr.w	fp, fp, #16
 800b8b6:	e79a      	b.n	800b7ee <_svfiprintf_r+0x92>
 800b8b8:	f04b 0b10 	orr.w	fp, fp, #16
 800b8bc:	f01b 0210 	ands.w	r2, fp, #16
 800b8c0:	f000 8313 	beq.w	800beea <_svfiprintf_r+0x78e>
 800b8c4:	9805      	ldr	r0, [sp, #20]
 800b8c6:	6803      	ldr	r3, [r0, #0]
 800b8c8:	2200      	movs	r2, #0
 800b8ca:	1a99      	subs	r1, r3, r2
 800b8cc:	bf18      	it	ne
 800b8ce:	2101      	movne	r1, #1
 800b8d0:	3004      	adds	r0, #4
 800b8d2:	9005      	str	r0, [sp, #20]
 800b8d4:	2000      	movs	r0, #0
 800b8d6:	f88d 00af 	strb.w	r0, [sp, #175]	; 0xaf
 800b8da:	2d00      	cmp	r5, #0
 800b8dc:	bfa8      	it	ge
 800b8de:	f02b 0b80 	bicge.w	fp, fp, #128	; 0x80
 800b8e2:	2d00      	cmp	r5, #0
 800b8e4:	bf18      	it	ne
 800b8e6:	f041 0101 	orrne.w	r1, r1, #1
 800b8ea:	2900      	cmp	r1, #0
 800b8ec:	f000 8228 	beq.w	800bd40 <_svfiprintf_r+0x5e4>
 800b8f0:	2a01      	cmp	r2, #1
 800b8f2:	f000 82cf 	beq.w	800be94 <_svfiprintf_r+0x738>
 800b8f6:	2a02      	cmp	r2, #2
 800b8f8:	bf18      	it	ne
 800b8fa:	4642      	movne	r2, r8
 800b8fc:	d101      	bne.n	800b902 <_svfiprintf_r+0x1a6>
 800b8fe:	e2b9      	b.n	800be74 <_svfiprintf_r+0x718>
 800b900:	4602      	mov	r2, r0
 800b902:	f003 0107 	and.w	r1, r3, #7
 800b906:	3130      	adds	r1, #48	; 0x30
 800b908:	1e50      	subs	r0, r2, #1
 800b90a:	08db      	lsrs	r3, r3, #3
 800b90c:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b910:	d1f6      	bne.n	800b900 <_svfiprintf_r+0x1a4>
 800b912:	f01b 0f01 	tst.w	fp, #1
 800b916:	9009      	str	r0, [sp, #36]	; 0x24
 800b918:	f040 831a 	bne.w	800bf50 <_svfiprintf_r+0x7f4>
 800b91c:	ebc0 0308 	rsb	r3, r0, r8
 800b920:	9303      	str	r3, [sp, #12]
 800b922:	9508      	str	r5, [sp, #32]
 800b924:	9803      	ldr	r0, [sp, #12]
 800b926:	9908      	ldr	r1, [sp, #32]
 800b928:	f89d 30af 	ldrb.w	r3, [sp, #175]	; 0xaf
 800b92c:	4288      	cmp	r0, r1
 800b92e:	bfb8      	it	lt
 800b930:	4608      	movlt	r0, r1
 800b932:	9002      	str	r0, [sp, #8]
 800b934:	2b00      	cmp	r3, #0
 800b936:	f000 808b 	beq.w	800ba50 <_svfiprintf_r+0x2f4>
 800b93a:	3001      	adds	r0, #1
 800b93c:	9002      	str	r0, [sp, #8]
 800b93e:	e087      	b.n	800ba50 <_svfiprintf_r+0x2f4>
 800b940:	f04b 0b10 	orr.w	fp, fp, #16
 800b944:	f01b 0f10 	tst.w	fp, #16
 800b948:	f000 82c1 	beq.w	800bece <_svfiprintf_r+0x772>
 800b94c:	9805      	ldr	r0, [sp, #20]
 800b94e:	6803      	ldr	r3, [r0, #0]
 800b950:	2201      	movs	r2, #1
 800b952:	1c19      	adds	r1, r3, #0
 800b954:	bf18      	it	ne
 800b956:	2101      	movne	r1, #1
 800b958:	3004      	adds	r0, #4
 800b95a:	9005      	str	r0, [sp, #20]
 800b95c:	e7ba      	b.n	800b8d4 <_svfiprintf_r+0x178>
 800b95e:	9805      	ldr	r0, [sp, #20]
 800b960:	9905      	ldr	r1, [sp, #20]
 800b962:	6800      	ldr	r0, [r0, #0]
 800b964:	1d0a      	adds	r2, r1, #4
 800b966:	2800      	cmp	r0, #0
 800b968:	9006      	str	r0, [sp, #24]
 800b96a:	f280 82e0 	bge.w	800bf2e <_svfiprintf_r+0x7d2>
 800b96e:	4240      	negs	r0, r0
 800b970:	9006      	str	r0, [sp, #24]
 800b972:	9205      	str	r2, [sp, #20]
 800b974:	f04b 0b04 	orr.w	fp, fp, #4
 800b978:	e739      	b.n	800b7ee <_svfiprintf_r+0x92>
 800b97a:	9b05      	ldr	r3, [sp, #20]
 800b97c:	9905      	ldr	r1, [sp, #20]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	2230      	movs	r2, #48	; 0x30
 800b982:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
 800b986:	2278      	movs	r2, #120	; 0x78
 800b988:	3104      	adds	r1, #4
 800b98a:	f88d 20ad 	strb.w	r2, [sp, #173]	; 0xad
 800b98e:	4aaf      	ldr	r2, [pc, #700]	; (800bc4c <_svfiprintf_r+0x4f0>)
 800b990:	9105      	str	r1, [sp, #20]
 800b992:	1c19      	adds	r1, r3, #0
 800b994:	bf18      	it	ne
 800b996:	2101      	movne	r1, #1
 800b998:	920c      	str	r2, [sp, #48]	; 0x30
 800b99a:	f04b 0b02 	orr.w	fp, fp, #2
 800b99e:	2202      	movs	r2, #2
 800b9a0:	e798      	b.n	800b8d4 <_svfiprintf_r+0x178>
 800b9a2:	f01b 0f10 	tst.w	fp, #16
 800b9a6:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 800b9aa:	f040 82dd 	bne.w	800bf68 <_svfiprintf_r+0x80c>
 800b9ae:	f01b 0f40 	tst.w	fp, #64	; 0x40
 800b9b2:	f000 82fb 	beq.w	800bfac <_svfiprintf_r+0x850>
 800b9b6:	9a05      	ldr	r2, [sp, #20]
 800b9b8:	9804      	ldr	r0, [sp, #16]
 800b9ba:	6813      	ldr	r3, [r2, #0]
 800b9bc:	3204      	adds	r2, #4
 800b9be:	9205      	str	r2, [sp, #20]
 800b9c0:	8018      	strh	r0, [r3, #0]
 800b9c2:	e6ea      	b.n	800b79a <_svfiprintf_r+0x3e>
 800b9c4:	49a1      	ldr	r1, [pc, #644]	; (800bc4c <_svfiprintf_r+0x4f0>)
 800b9c6:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 800b9ca:	910c      	str	r1, [sp, #48]	; 0x30
 800b9cc:	f01b 0f10 	tst.w	fp, #16
 800b9d0:	d103      	bne.n	800b9da <_svfiprintf_r+0x27e>
 800b9d2:	f01b 0f40 	tst.w	fp, #64	; 0x40
 800b9d6:	f040 82d3 	bne.w	800bf80 <_svfiprintf_r+0x824>
 800b9da:	9805      	ldr	r0, [sp, #20]
 800b9dc:	6803      	ldr	r3, [r0, #0]
 800b9de:	3004      	adds	r0, #4
 800b9e0:	9005      	str	r0, [sp, #20]
 800b9e2:	1c19      	adds	r1, r3, #0
 800b9e4:	bf18      	it	ne
 800b9e6:	2101      	movne	r1, #1
 800b9e8:	ea1b 0f01 	tst.w	fp, r1
 800b9ec:	f000 8287 	beq.w	800befe <_svfiprintf_r+0x7a2>
 800b9f0:	2130      	movs	r1, #48	; 0x30
 800b9f2:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
 800b9f6:	f88d 20ad 	strb.w	r2, [sp, #173]	; 0xad
 800b9fa:	f04b 0b02 	orr.w	fp, fp, #2
 800b9fe:	2101      	movs	r1, #1
 800ba00:	2202      	movs	r2, #2
 800ba02:	e767      	b.n	800b8d4 <_svfiprintf_r+0x178>
 800ba04:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
 800ba08:	e6f1      	b.n	800b7ee <_svfiprintf_r+0x92>
 800ba0a:	f01b 0f10 	tst.w	fp, #16
 800ba0e:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 800ba12:	f000 80a4 	beq.w	800bb5e <_svfiprintf_r+0x402>
 800ba16:	9805      	ldr	r0, [sp, #20]
 800ba18:	6803      	ldr	r3, [r0, #0]
 800ba1a:	3004      	adds	r0, #4
 800ba1c:	9005      	str	r0, [sp, #20]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	f2c0 80a9 	blt.w	800bb76 <_svfiprintf_r+0x41a>
 800ba24:	bf0c      	ite	eq
 800ba26:	2100      	moveq	r1, #0
 800ba28:	2101      	movne	r1, #1
 800ba2a:	2201      	movs	r2, #1
 800ba2c:	e755      	b.n	800b8da <_svfiprintf_r+0x17e>
 800ba2e:	9b05      	ldr	r3, [sp, #20]
 800ba30:	9905      	ldr	r1, [sp, #20]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	2001      	movs	r0, #1
 800ba36:	2200      	movs	r2, #0
 800ba38:	3104      	adds	r1, #4
 800ba3a:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
 800ba3e:	ab1e      	add	r3, sp, #120	; 0x78
 800ba40:	f88d 20af 	strb.w	r2, [sp, #175]	; 0xaf
 800ba44:	9002      	str	r0, [sp, #8]
 800ba46:	9105      	str	r1, [sp, #20]
 800ba48:	9003      	str	r0, [sp, #12]
 800ba4a:	9309      	str	r3, [sp, #36]	; 0x24
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	9308      	str	r3, [sp, #32]
 800ba50:	f01b 0302 	ands.w	r3, fp, #2
 800ba54:	930a      	str	r3, [sp, #40]	; 0x28
 800ba56:	d002      	beq.n	800ba5e <_svfiprintf_r+0x302>
 800ba58:	9b02      	ldr	r3, [sp, #8]
 800ba5a:	3302      	adds	r3, #2
 800ba5c:	9302      	str	r3, [sp, #8]
 800ba5e:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
 800ba62:	930b      	str	r3, [sp, #44]	; 0x2c
 800ba64:	f040 80c1 	bne.w	800bbea <_svfiprintf_r+0x48e>
 800ba68:	9b06      	ldr	r3, [sp, #24]
 800ba6a:	9802      	ldr	r0, [sp, #8]
 800ba6c:	1a1d      	subs	r5, r3, r0
 800ba6e:	2d00      	cmp	r5, #0
 800ba70:	f340 80bb 	ble.w	800bbea <_svfiprintf_r+0x48e>
 800ba74:	2d10      	cmp	r5, #16
 800ba76:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800ba78:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800ba7a:	4e75      	ldr	r6, [pc, #468]	; (800bc50 <_svfiprintf_r+0x4f4>)
 800ba7c:	dd1f      	ble.n	800babe <_svfiprintf_r+0x362>
 800ba7e:	4621      	mov	r1, r4
 800ba80:	f04f 0910 	mov.w	r9, #16
 800ba84:	9c07      	ldr	r4, [sp, #28]
 800ba86:	e002      	b.n	800ba8e <_svfiprintf_r+0x332>
 800ba88:	3d10      	subs	r5, #16
 800ba8a:	2d10      	cmp	r5, #16
 800ba8c:	dd16      	ble.n	800babc <_svfiprintf_r+0x360>
 800ba8e:	3301      	adds	r3, #1
 800ba90:	3210      	adds	r2, #16
 800ba92:	e881 0240 	stmia.w	r1, {r6, r9}
 800ba96:	3108      	adds	r1, #8
 800ba98:	2b07      	cmp	r3, #7
 800ba9a:	922a      	str	r2, [sp, #168]	; 0xa8
 800ba9c:	9329      	str	r3, [sp, #164]	; 0xa4
 800ba9e:	ddf3      	ble.n	800ba88 <_svfiprintf_r+0x32c>
 800baa0:	4620      	mov	r0, r4
 800baa2:	4651      	mov	r1, sl
 800baa4:	4642      	mov	r2, r8
 800baa6:	f7ff fdd9 	bl	800b65c <__ssprint_r>
 800baaa:	2800      	cmp	r0, #0
 800baac:	f040 8162 	bne.w	800bd74 <_svfiprintf_r+0x618>
 800bab0:	3d10      	subs	r5, #16
 800bab2:	2d10      	cmp	r5, #16
 800bab4:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800bab6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800bab8:	a90e      	add	r1, sp, #56	; 0x38
 800baba:	dce8      	bgt.n	800ba8e <_svfiprintf_r+0x332>
 800babc:	460c      	mov	r4, r1
 800babe:	3301      	adds	r3, #1
 800bac0:	1952      	adds	r2, r2, r5
 800bac2:	2b07      	cmp	r3, #7
 800bac4:	6026      	str	r6, [r4, #0]
 800bac6:	6065      	str	r5, [r4, #4]
 800bac8:	922a      	str	r2, [sp, #168]	; 0xa8
 800baca:	9329      	str	r3, [sp, #164]	; 0xa4
 800bacc:	f300 8219 	bgt.w	800bf02 <_svfiprintf_r+0x7a6>
 800bad0:	3408      	adds	r4, #8
 800bad2:	e08c      	b.n	800bbee <_svfiprintf_r+0x492>
 800bad4:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 800bad8:	4b5e      	ldr	r3, [pc, #376]	; (800bc54 <_svfiprintf_r+0x4f8>)
 800bada:	930c      	str	r3, [sp, #48]	; 0x30
 800badc:	e776      	b.n	800b9cc <_svfiprintf_r+0x270>
 800bade:	f04b 0b01 	orr.w	fp, fp, #1
 800bae2:	e684      	b.n	800b7ee <_svfiprintf_r+0x92>
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	bf08      	it	eq
 800bae8:	2320      	moveq	r3, #32
 800baea:	e680      	b.n	800b7ee <_svfiprintf_r+0x92>
 800baec:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 800baf0:	2a00      	cmp	r2, #0
 800baf2:	f000 8138 	beq.w	800bd66 <_svfiprintf_r+0x60a>
 800baf6:	2301      	movs	r3, #1
 800baf8:	9302      	str	r3, [sp, #8]
 800bafa:	2300      	movs	r3, #0
 800bafc:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 800bb00:	2301      	movs	r3, #1
 800bb02:	9303      	str	r3, [sp, #12]
 800bb04:	ab1e      	add	r3, sp, #120	; 0x78
 800bb06:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 800bb0a:	9309      	str	r3, [sp, #36]	; 0x24
 800bb0c:	e79e      	b.n	800ba4c <_svfiprintf_r+0x2f0>
 800bb0e:	9b05      	ldr	r3, [sp, #20]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	9309      	str	r3, [sp, #36]	; 0x24
 800bb14:	9b05      	ldr	r3, [sp, #20]
 800bb16:	3304      	adds	r3, #4
 800bb18:	9305      	str	r3, [sp, #20]
 800bb1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb1c:	2600      	movs	r6, #0
 800bb1e:	f88d 60af 	strb.w	r6, [sp, #175]	; 0xaf
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	f000 8259 	beq.w	800bfda <_svfiprintf_r+0x87e>
 800bb28:	2d00      	cmp	r5, #0
 800bb2a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bb2c:	f2c0 822d 	blt.w	800bf8a <_svfiprintf_r+0x82e>
 800bb30:	4631      	mov	r1, r6
 800bb32:	462a      	mov	r2, r5
 800bb34:	f7fe ff50 	bl	800a9d8 <memchr>
 800bb38:	2800      	cmp	r0, #0
 800bb3a:	f000 8258 	beq.w	800bfee <_svfiprintf_r+0x892>
 800bb3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb40:	9608      	str	r6, [sp, #32]
 800bb42:	1ac0      	subs	r0, r0, r3
 800bb44:	42a8      	cmp	r0, r5
 800bb46:	9003      	str	r0, [sp, #12]
 800bb48:	bfc8      	it	gt
 800bb4a:	9503      	strgt	r5, [sp, #12]
 800bb4c:	e6ea      	b.n	800b924 <_svfiprintf_r+0x1c8>
 800bb4e:	f04b 0b10 	orr.w	fp, fp, #16
 800bb52:	f01b 0f10 	tst.w	fp, #16
 800bb56:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 800bb5a:	f47f af5c 	bne.w	800ba16 <_svfiprintf_r+0x2ba>
 800bb5e:	f01b 0f40 	tst.w	fp, #64	; 0x40
 800bb62:	f000 8208 	beq.w	800bf76 <_svfiprintf_r+0x81a>
 800bb66:	9905      	ldr	r1, [sp, #20]
 800bb68:	f9b1 3000 	ldrsh.w	r3, [r1]
 800bb6c:	3104      	adds	r1, #4
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	9105      	str	r1, [sp, #20]
 800bb72:	f6bf af57 	bge.w	800ba24 <_svfiprintf_r+0x2c8>
 800bb76:	425b      	negs	r3, r3
 800bb78:	222d      	movs	r2, #45	; 0x2d
 800bb7a:	1c19      	adds	r1, r3, #0
 800bb7c:	f88d 20af 	strb.w	r2, [sp, #175]	; 0xaf
 800bb80:	bf18      	it	ne
 800bb82:	2101      	movne	r1, #1
 800bb84:	2201      	movs	r2, #1
 800bb86:	e6a8      	b.n	800b8da <_svfiprintf_r+0x17e>
 800bb88:	4638      	mov	r0, r7
 800bb8a:	2100      	movs	r1, #0
 800bb8c:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 800bb90:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb94:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800bb98:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800bb9c:	2e09      	cmp	r6, #9
 800bb9e:	eb07 0141 	add.w	r1, r7, r1, lsl #1
 800bba2:	4607      	mov	r7, r0
 800bba4:	d9f2      	bls.n	800bb8c <_svfiprintf_r+0x430>
 800bba6:	9106      	str	r1, [sp, #24]
 800bba8:	e623      	b.n	800b7f2 <_svfiprintf_r+0x96>
 800bbaa:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 800bbae:	e61e      	b.n	800b7ee <_svfiprintf_r+0x92>
 800bbb0:	232b      	movs	r3, #43	; 0x2b
 800bbb2:	e61c      	b.n	800b7ee <_svfiprintf_r+0x92>
 800bbb4:	f817 2b01 	ldrb.w	r2, [r7], #1
 800bbb8:	2a2a      	cmp	r2, #42	; 0x2a
 800bbba:	f000 81ae 	beq.w	800bf1a <_svfiprintf_r+0x7be>
 800bbbe:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800bbc2:	2500      	movs	r5, #0
 800bbc4:	2909      	cmp	r1, #9
 800bbc6:	f63f ae14 	bhi.w	800b7f2 <_svfiprintf_r+0x96>
 800bbca:	4638      	mov	r0, r7
 800bbcc:	2500      	movs	r5, #0
 800bbce:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bbd2:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800bbd6:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 800bbda:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800bbde:	2909      	cmp	r1, #9
 800bbe0:	4607      	mov	r7, r0
 800bbe2:	d9f4      	bls.n	800bbce <_svfiprintf_r+0x472>
 800bbe4:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 800bbe8:	e603      	b.n	800b7f2 <_svfiprintf_r+0x96>
 800bbea:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800bbec:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800bbee:	f89d 10af 	ldrb.w	r1, [sp, #175]	; 0xaf
 800bbf2:	b161      	cbz	r1, 800bc0e <_svfiprintf_r+0x4b2>
 800bbf4:	3301      	adds	r3, #1
 800bbf6:	f10d 01af 	add.w	r1, sp, #175	; 0xaf
 800bbfa:	3201      	adds	r2, #1
 800bbfc:	6021      	str	r1, [r4, #0]
 800bbfe:	2101      	movs	r1, #1
 800bc00:	2b07      	cmp	r3, #7
 800bc02:	6061      	str	r1, [r4, #4]
 800bc04:	922a      	str	r2, [sp, #168]	; 0xa8
 800bc06:	9329      	str	r3, [sp, #164]	; 0xa4
 800bc08:	f300 811e 	bgt.w	800be48 <_svfiprintf_r+0x6ec>
 800bc0c:	3408      	adds	r4, #8
 800bc0e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800bc10:	b159      	cbz	r1, 800bc2a <_svfiprintf_r+0x4ce>
 800bc12:	3301      	adds	r3, #1
 800bc14:	a92b      	add	r1, sp, #172	; 0xac
 800bc16:	3202      	adds	r2, #2
 800bc18:	6021      	str	r1, [r4, #0]
 800bc1a:	2102      	movs	r1, #2
 800bc1c:	2b07      	cmp	r3, #7
 800bc1e:	6061      	str	r1, [r4, #4]
 800bc20:	922a      	str	r2, [sp, #168]	; 0xa8
 800bc22:	9329      	str	r3, [sp, #164]	; 0xa4
 800bc24:	f300 811b 	bgt.w	800be5e <_svfiprintf_r+0x702>
 800bc28:	3408      	adds	r4, #8
 800bc2a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800bc2c:	2880      	cmp	r0, #128	; 0x80
 800bc2e:	f000 80ae 	beq.w	800bd8e <_svfiprintf_r+0x632>
 800bc32:	9808      	ldr	r0, [sp, #32]
 800bc34:	9903      	ldr	r1, [sp, #12]
 800bc36:	1a45      	subs	r5, r0, r1
 800bc38:	2d00      	cmp	r5, #0
 800bc3a:	dd33      	ble.n	800bca4 <_svfiprintf_r+0x548>
 800bc3c:	2d10      	cmp	r5, #16
 800bc3e:	4e06      	ldr	r6, [pc, #24]	; (800bc58 <_svfiprintf_r+0x4fc>)
 800bc40:	dd26      	ble.n	800bc90 <_svfiprintf_r+0x534>
 800bc42:	4621      	mov	r1, r4
 800bc44:	f04f 0910 	mov.w	r9, #16
 800bc48:	9c07      	ldr	r4, [sp, #28]
 800bc4a:	e00a      	b.n	800bc62 <_svfiprintf_r+0x506>
 800bc4c:	0800d540 	.word	0x0800d540
 800bc50:	0800d3c8 	.word	0x0800d3c8
 800bc54:	0800d52c 	.word	0x0800d52c
 800bc58:	0800d3d8 	.word	0x0800d3d8
 800bc5c:	3d10      	subs	r5, #16
 800bc5e:	2d10      	cmp	r5, #16
 800bc60:	dd15      	ble.n	800bc8e <_svfiprintf_r+0x532>
 800bc62:	3301      	adds	r3, #1
 800bc64:	3210      	adds	r2, #16
 800bc66:	e881 0240 	stmia.w	r1, {r6, r9}
 800bc6a:	3108      	adds	r1, #8
 800bc6c:	2b07      	cmp	r3, #7
 800bc6e:	922a      	str	r2, [sp, #168]	; 0xa8
 800bc70:	9329      	str	r3, [sp, #164]	; 0xa4
 800bc72:	ddf3      	ble.n	800bc5c <_svfiprintf_r+0x500>
 800bc74:	4620      	mov	r0, r4
 800bc76:	4651      	mov	r1, sl
 800bc78:	4642      	mov	r2, r8
 800bc7a:	f7ff fcef 	bl	800b65c <__ssprint_r>
 800bc7e:	2800      	cmp	r0, #0
 800bc80:	d178      	bne.n	800bd74 <_svfiprintf_r+0x618>
 800bc82:	3d10      	subs	r5, #16
 800bc84:	2d10      	cmp	r5, #16
 800bc86:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800bc88:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800bc8a:	a90e      	add	r1, sp, #56	; 0x38
 800bc8c:	dce9      	bgt.n	800bc62 <_svfiprintf_r+0x506>
 800bc8e:	460c      	mov	r4, r1
 800bc90:	3301      	adds	r3, #1
 800bc92:	1952      	adds	r2, r2, r5
 800bc94:	2b07      	cmp	r3, #7
 800bc96:	6026      	str	r6, [r4, #0]
 800bc98:	6065      	str	r5, [r4, #4]
 800bc9a:	922a      	str	r2, [sp, #168]	; 0xa8
 800bc9c:	9329      	str	r3, [sp, #164]	; 0xa4
 800bc9e:	f300 80c8 	bgt.w	800be32 <_svfiprintf_r+0x6d6>
 800bca2:	3408      	adds	r4, #8
 800bca4:	9903      	ldr	r1, [sp, #12]
 800bca6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bca8:	3301      	adds	r3, #1
 800bcaa:	1852      	adds	r2, r2, r1
 800bcac:	2b07      	cmp	r3, #7
 800bcae:	e884 0003 	stmia.w	r4, {r0, r1}
 800bcb2:	922a      	str	r2, [sp, #168]	; 0xa8
 800bcb4:	9329      	str	r3, [sp, #164]	; 0xa4
 800bcb6:	bfd8      	it	le
 800bcb8:	f104 0108 	addle.w	r1, r4, #8
 800bcbc:	f300 809a 	bgt.w	800bdf4 <_svfiprintf_r+0x698>
 800bcc0:	f01b 0f04 	tst.w	fp, #4
 800bcc4:	d02e      	beq.n	800bd24 <_svfiprintf_r+0x5c8>
 800bcc6:	9b06      	ldr	r3, [sp, #24]
 800bcc8:	9802      	ldr	r0, [sp, #8]
 800bcca:	1a1d      	subs	r5, r3, r0
 800bccc:	2d00      	cmp	r5, #0
 800bcce:	dd29      	ble.n	800bd24 <_svfiprintf_r+0x5c8>
 800bcd0:	2d10      	cmp	r5, #16
 800bcd2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800bcd4:	4e97      	ldr	r6, [pc, #604]	; (800bf34 <_svfiprintf_r+0x7d8>)
 800bcd6:	dd1c      	ble.n	800bd12 <_svfiprintf_r+0x5b6>
 800bcd8:	2410      	movs	r4, #16
 800bcda:	f8dd 901c 	ldr.w	r9, [sp, #28]
 800bcde:	e002      	b.n	800bce6 <_svfiprintf_r+0x58a>
 800bce0:	3d10      	subs	r5, #16
 800bce2:	2d10      	cmp	r5, #16
 800bce4:	dd15      	ble.n	800bd12 <_svfiprintf_r+0x5b6>
 800bce6:	3301      	adds	r3, #1
 800bce8:	3210      	adds	r2, #16
 800bcea:	600e      	str	r6, [r1, #0]
 800bcec:	604c      	str	r4, [r1, #4]
 800bcee:	3108      	adds	r1, #8
 800bcf0:	2b07      	cmp	r3, #7
 800bcf2:	922a      	str	r2, [sp, #168]	; 0xa8
 800bcf4:	9329      	str	r3, [sp, #164]	; 0xa4
 800bcf6:	ddf3      	ble.n	800bce0 <_svfiprintf_r+0x584>
 800bcf8:	4648      	mov	r0, r9
 800bcfa:	4651      	mov	r1, sl
 800bcfc:	4642      	mov	r2, r8
 800bcfe:	f7ff fcad 	bl	800b65c <__ssprint_r>
 800bd02:	2800      	cmp	r0, #0
 800bd04:	d136      	bne.n	800bd74 <_svfiprintf_r+0x618>
 800bd06:	3d10      	subs	r5, #16
 800bd08:	2d10      	cmp	r5, #16
 800bd0a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800bd0c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800bd0e:	a90e      	add	r1, sp, #56	; 0x38
 800bd10:	dce9      	bgt.n	800bce6 <_svfiprintf_r+0x58a>
 800bd12:	3301      	adds	r3, #1
 800bd14:	18aa      	adds	r2, r5, r2
 800bd16:	2b07      	cmp	r3, #7
 800bd18:	600e      	str	r6, [r1, #0]
 800bd1a:	604d      	str	r5, [r1, #4]
 800bd1c:	922a      	str	r2, [sp, #168]	; 0xa8
 800bd1e:	9329      	str	r3, [sp, #164]	; 0xa4
 800bd20:	f300 810c 	bgt.w	800bf3c <_svfiprintf_r+0x7e0>
 800bd24:	9b04      	ldr	r3, [sp, #16]
 800bd26:	9902      	ldr	r1, [sp, #8]
 800bd28:	9806      	ldr	r0, [sp, #24]
 800bd2a:	4281      	cmp	r1, r0
 800bd2c:	bfac      	ite	ge
 800bd2e:	185b      	addge	r3, r3, r1
 800bd30:	181b      	addlt	r3, r3, r0
 800bd32:	9304      	str	r3, [sp, #16]
 800bd34:	2a00      	cmp	r2, #0
 800bd36:	d167      	bne.n	800be08 <_svfiprintf_r+0x6ac>
 800bd38:	2300      	movs	r3, #0
 800bd3a:	9329      	str	r3, [sp, #164]	; 0xa4
 800bd3c:	ac0e      	add	r4, sp, #56	; 0x38
 800bd3e:	e52c      	b.n	800b79a <_svfiprintf_r+0x3e>
 800bd40:	2a00      	cmp	r2, #0
 800bd42:	d169      	bne.n	800be18 <_svfiprintf_r+0x6bc>
 800bd44:	f01b 0f01 	tst.w	fp, #1
 800bd48:	bf04      	itt	eq
 800bd4a:	9203      	streq	r2, [sp, #12]
 800bd4c:	f8cd 8024 	streq.w	r8, [sp, #36]	; 0x24
 800bd50:	f43f ade7 	beq.w	800b922 <_svfiprintf_r+0x1c6>
 800bd54:	2330      	movs	r3, #48	; 0x30
 800bd56:	f88d 309f 	strb.w	r3, [sp, #159]	; 0x9f
 800bd5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd5c:	9303      	str	r3, [sp, #12]
 800bd5e:	f10d 039f 	add.w	r3, sp, #159	; 0x9f
 800bd62:	9309      	str	r3, [sp, #36]	; 0x24
 800bd64:	e5dd      	b.n	800b922 <_svfiprintf_r+0x1c6>
 800bd66:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800bd68:	b123      	cbz	r3, 800bd74 <_svfiprintf_r+0x618>
 800bd6a:	9807      	ldr	r0, [sp, #28]
 800bd6c:	4651      	mov	r1, sl
 800bd6e:	aa28      	add	r2, sp, #160	; 0xa0
 800bd70:	f7ff fc74 	bl	800b65c <__ssprint_r>
 800bd74:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800bd78:	f013 0f40 	tst.w	r3, #64	; 0x40
 800bd7c:	9b04      	ldr	r3, [sp, #16]
 800bd7e:	bf18      	it	ne
 800bd80:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 800bd84:	9304      	str	r3, [sp, #16]
 800bd86:	9804      	ldr	r0, [sp, #16]
 800bd88:	b02d      	add	sp, #180	; 0xb4
 800bd8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd8e:	9906      	ldr	r1, [sp, #24]
 800bd90:	9802      	ldr	r0, [sp, #8]
 800bd92:	1a0d      	subs	r5, r1, r0
 800bd94:	2d00      	cmp	r5, #0
 800bd96:	f77f af4c 	ble.w	800bc32 <_svfiprintf_r+0x4d6>
 800bd9a:	2d10      	cmp	r5, #16
 800bd9c:	4e66      	ldr	r6, [pc, #408]	; (800bf38 <_svfiprintf_r+0x7dc>)
 800bd9e:	dd1e      	ble.n	800bdde <_svfiprintf_r+0x682>
 800bda0:	4621      	mov	r1, r4
 800bda2:	f04f 0910 	mov.w	r9, #16
 800bda6:	9c07      	ldr	r4, [sp, #28]
 800bda8:	e002      	b.n	800bdb0 <_svfiprintf_r+0x654>
 800bdaa:	3d10      	subs	r5, #16
 800bdac:	2d10      	cmp	r5, #16
 800bdae:	dd15      	ble.n	800bddc <_svfiprintf_r+0x680>
 800bdb0:	3301      	adds	r3, #1
 800bdb2:	3210      	adds	r2, #16
 800bdb4:	e881 0240 	stmia.w	r1, {r6, r9}
 800bdb8:	3108      	adds	r1, #8
 800bdba:	2b07      	cmp	r3, #7
 800bdbc:	922a      	str	r2, [sp, #168]	; 0xa8
 800bdbe:	9329      	str	r3, [sp, #164]	; 0xa4
 800bdc0:	ddf3      	ble.n	800bdaa <_svfiprintf_r+0x64e>
 800bdc2:	4620      	mov	r0, r4
 800bdc4:	4651      	mov	r1, sl
 800bdc6:	4642      	mov	r2, r8
 800bdc8:	f7ff fc48 	bl	800b65c <__ssprint_r>
 800bdcc:	2800      	cmp	r0, #0
 800bdce:	d1d1      	bne.n	800bd74 <_svfiprintf_r+0x618>
 800bdd0:	3d10      	subs	r5, #16
 800bdd2:	2d10      	cmp	r5, #16
 800bdd4:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800bdd6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800bdd8:	a90e      	add	r1, sp, #56	; 0x38
 800bdda:	dce9      	bgt.n	800bdb0 <_svfiprintf_r+0x654>
 800bddc:	460c      	mov	r4, r1
 800bdde:	3301      	adds	r3, #1
 800bde0:	1952      	adds	r2, r2, r5
 800bde2:	2b07      	cmp	r3, #7
 800bde4:	6026      	str	r6, [r4, #0]
 800bde6:	6065      	str	r5, [r4, #4]
 800bde8:	922a      	str	r2, [sp, #168]	; 0xa8
 800bdea:	9329      	str	r3, [sp, #164]	; 0xa4
 800bdec:	f300 80d2 	bgt.w	800bf94 <_svfiprintf_r+0x838>
 800bdf0:	3408      	adds	r4, #8
 800bdf2:	e71e      	b.n	800bc32 <_svfiprintf_r+0x4d6>
 800bdf4:	9807      	ldr	r0, [sp, #28]
 800bdf6:	4651      	mov	r1, sl
 800bdf8:	4642      	mov	r2, r8
 800bdfa:	f7ff fc2f 	bl	800b65c <__ssprint_r>
 800bdfe:	2800      	cmp	r0, #0
 800be00:	d1b8      	bne.n	800bd74 <_svfiprintf_r+0x618>
 800be02:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800be04:	a90e      	add	r1, sp, #56	; 0x38
 800be06:	e75b      	b.n	800bcc0 <_svfiprintf_r+0x564>
 800be08:	9807      	ldr	r0, [sp, #28]
 800be0a:	4651      	mov	r1, sl
 800be0c:	4642      	mov	r2, r8
 800be0e:	f7ff fc25 	bl	800b65c <__ssprint_r>
 800be12:	2800      	cmp	r0, #0
 800be14:	d090      	beq.n	800bd38 <_svfiprintf_r+0x5dc>
 800be16:	e7ad      	b.n	800bd74 <_svfiprintf_r+0x618>
 800be18:	9103      	str	r1, [sp, #12]
 800be1a:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 800be1e:	e580      	b.n	800b922 <_svfiprintf_r+0x1c6>
 800be20:	9807      	ldr	r0, [sp, #28]
 800be22:	4651      	mov	r1, sl
 800be24:	4642      	mov	r2, r8
 800be26:	f7ff fc19 	bl	800b65c <__ssprint_r>
 800be2a:	2800      	cmp	r0, #0
 800be2c:	d1a2      	bne.n	800bd74 <_svfiprintf_r+0x618>
 800be2e:	ac0e      	add	r4, sp, #56	; 0x38
 800be30:	e4cd      	b.n	800b7ce <_svfiprintf_r+0x72>
 800be32:	9807      	ldr	r0, [sp, #28]
 800be34:	4651      	mov	r1, sl
 800be36:	4642      	mov	r2, r8
 800be38:	f7ff fc10 	bl	800b65c <__ssprint_r>
 800be3c:	2800      	cmp	r0, #0
 800be3e:	d199      	bne.n	800bd74 <_svfiprintf_r+0x618>
 800be40:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800be42:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800be44:	ac0e      	add	r4, sp, #56	; 0x38
 800be46:	e72d      	b.n	800bca4 <_svfiprintf_r+0x548>
 800be48:	9807      	ldr	r0, [sp, #28]
 800be4a:	4651      	mov	r1, sl
 800be4c:	4642      	mov	r2, r8
 800be4e:	f7ff fc05 	bl	800b65c <__ssprint_r>
 800be52:	2800      	cmp	r0, #0
 800be54:	d18e      	bne.n	800bd74 <_svfiprintf_r+0x618>
 800be56:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800be58:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800be5a:	ac0e      	add	r4, sp, #56	; 0x38
 800be5c:	e6d7      	b.n	800bc0e <_svfiprintf_r+0x4b2>
 800be5e:	9807      	ldr	r0, [sp, #28]
 800be60:	4651      	mov	r1, sl
 800be62:	4642      	mov	r2, r8
 800be64:	f7ff fbfa 	bl	800b65c <__ssprint_r>
 800be68:	2800      	cmp	r0, #0
 800be6a:	d183      	bne.n	800bd74 <_svfiprintf_r+0x618>
 800be6c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800be6e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800be70:	ac0e      	add	r4, sp, #56	; 0x38
 800be72:	e6da      	b.n	800bc2a <_svfiprintf_r+0x4ce>
 800be74:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800be76:	f10d 029f 	add.w	r2, sp, #159	; 0x9f
 800be7a:	f003 000f 	and.w	r0, r3, #15
 800be7e:	4611      	mov	r1, r2
 800be80:	5c30      	ldrb	r0, [r6, r0]
 800be82:	3a01      	subs	r2, #1
 800be84:	091b      	lsrs	r3, r3, #4
 800be86:	7008      	strb	r0, [r1, #0]
 800be88:	d1f7      	bne.n	800be7a <_svfiprintf_r+0x71e>
 800be8a:	ebc1 0308 	rsb	r3, r1, r8
 800be8e:	9109      	str	r1, [sp, #36]	; 0x24
 800be90:	9303      	str	r3, [sp, #12]
 800be92:	e546      	b.n	800b922 <_svfiprintf_r+0x1c6>
 800be94:	2b09      	cmp	r3, #9
 800be96:	bf82      	ittt	hi
 800be98:	f64c 46cd 	movwhi	r6, #52429	; 0xcccd
 800be9c:	f10d 019f 	addhi.w	r1, sp, #159	; 0x9f
 800bea0:	f6cc 46cc 	movthi	r6, #52428	; 0xcccc
 800bea4:	d801      	bhi.n	800beaa <_svfiprintf_r+0x74e>
 800bea6:	3330      	adds	r3, #48	; 0x30
 800bea8:	e755      	b.n	800bd56 <_svfiprintf_r+0x5fa>
 800beaa:	fba6 0203 	umull	r0, r2, r6, r3
 800beae:	08d2      	lsrs	r2, r2, #3
 800beb0:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
 800beb4:	eba3 0c4c 	sub.w	ip, r3, ip, lsl #1
 800beb8:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 800bebc:	4608      	mov	r0, r1
 800bebe:	f881 c000 	strb.w	ip, [r1]
 800bec2:	4613      	mov	r3, r2
 800bec4:	3901      	subs	r1, #1
 800bec6:	2a00      	cmp	r2, #0
 800bec8:	d1ef      	bne.n	800beaa <_svfiprintf_r+0x74e>
 800beca:	9009      	str	r0, [sp, #36]	; 0x24
 800becc:	e526      	b.n	800b91c <_svfiprintf_r+0x1c0>
 800bece:	9905      	ldr	r1, [sp, #20]
 800bed0:	f01b 0f40 	tst.w	fp, #64	; 0x40
 800bed4:	bf14      	ite	ne
 800bed6:	880b      	ldrhne	r3, [r1, #0]
 800bed8:	680b      	ldreq	r3, [r1, #0]
 800beda:	2201      	movs	r2, #1
 800bedc:	9805      	ldr	r0, [sp, #20]
 800bede:	1c19      	adds	r1, r3, #0
 800bee0:	bf18      	it	ne
 800bee2:	2101      	movne	r1, #1
 800bee4:	3004      	adds	r0, #4
 800bee6:	9005      	str	r0, [sp, #20]
 800bee8:	e4f4      	b.n	800b8d4 <_svfiprintf_r+0x178>
 800beea:	f01b 0140 	ands.w	r1, fp, #64	; 0x40
 800beee:	bf0b      	itete	eq
 800bef0:	9a05      	ldreq	r2, [sp, #20]
 800bef2:	9905      	ldrne	r1, [sp, #20]
 800bef4:	6813      	ldreq	r3, [r2, #0]
 800bef6:	880b      	ldrhne	r3, [r1, #0]
 800bef8:	bf08      	it	eq
 800befa:	460a      	moveq	r2, r1
 800befc:	e7ee      	b.n	800bedc <_svfiprintf_r+0x780>
 800befe:	2202      	movs	r2, #2
 800bf00:	e4e8      	b.n	800b8d4 <_svfiprintf_r+0x178>
 800bf02:	9807      	ldr	r0, [sp, #28]
 800bf04:	4651      	mov	r1, sl
 800bf06:	4642      	mov	r2, r8
 800bf08:	f7ff fba8 	bl	800b65c <__ssprint_r>
 800bf0c:	2800      	cmp	r0, #0
 800bf0e:	f47f af31 	bne.w	800bd74 <_svfiprintf_r+0x618>
 800bf12:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800bf14:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800bf16:	ac0e      	add	r4, sp, #56	; 0x38
 800bf18:	e669      	b.n	800bbee <_svfiprintf_r+0x492>
 800bf1a:	9a05      	ldr	r2, [sp, #20]
 800bf1c:	6815      	ldr	r5, [r2, #0]
 800bf1e:	3204      	adds	r2, #4
 800bf20:	2d00      	cmp	r5, #0
 800bf22:	bfbc      	itt	lt
 800bf24:	9205      	strlt	r2, [sp, #20]
 800bf26:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
 800bf2a:	f6ff ac60 	blt.w	800b7ee <_svfiprintf_r+0x92>
 800bf2e:	9205      	str	r2, [sp, #20]
 800bf30:	e45d      	b.n	800b7ee <_svfiprintf_r+0x92>
 800bf32:	bf00      	nop
 800bf34:	0800d3c8 	.word	0x0800d3c8
 800bf38:	0800d3d8 	.word	0x0800d3d8
 800bf3c:	9807      	ldr	r0, [sp, #28]
 800bf3e:	4651      	mov	r1, sl
 800bf40:	4642      	mov	r2, r8
 800bf42:	f7ff fb8b 	bl	800b65c <__ssprint_r>
 800bf46:	2800      	cmp	r0, #0
 800bf48:	f47f af14 	bne.w	800bd74 <_svfiprintf_r+0x618>
 800bf4c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800bf4e:	e6e9      	b.n	800bd24 <_svfiprintf_r+0x5c8>
 800bf50:	2930      	cmp	r1, #48	; 0x30
 800bf52:	d004      	beq.n	800bf5e <_svfiprintf_r+0x802>
 800bf54:	1e93      	subs	r3, r2, #2
 800bf56:	9309      	str	r3, [sp, #36]	; 0x24
 800bf58:	2330      	movs	r3, #48	; 0x30
 800bf5a:	f802 3c02 	strb.w	r3, [r2, #-2]
 800bf5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf60:	ebc3 0308 	rsb	r3, r3, r8
 800bf64:	9303      	str	r3, [sp, #12]
 800bf66:	e4dc      	b.n	800b922 <_svfiprintf_r+0x1c6>
 800bf68:	9805      	ldr	r0, [sp, #20]
 800bf6a:	9904      	ldr	r1, [sp, #16]
 800bf6c:	6803      	ldr	r3, [r0, #0]
 800bf6e:	3004      	adds	r0, #4
 800bf70:	9005      	str	r0, [sp, #20]
 800bf72:	6019      	str	r1, [r3, #0]
 800bf74:	e411      	b.n	800b79a <_svfiprintf_r+0x3e>
 800bf76:	9a05      	ldr	r2, [sp, #20]
 800bf78:	6813      	ldr	r3, [r2, #0]
 800bf7a:	3204      	adds	r2, #4
 800bf7c:	9205      	str	r2, [sp, #20]
 800bf7e:	e54e      	b.n	800ba1e <_svfiprintf_r+0x2c2>
 800bf80:	9905      	ldr	r1, [sp, #20]
 800bf82:	880b      	ldrh	r3, [r1, #0]
 800bf84:	3104      	adds	r1, #4
 800bf86:	9105      	str	r1, [sp, #20]
 800bf88:	e52b      	b.n	800b9e2 <_svfiprintf_r+0x286>
 800bf8a:	f7ff fb37 	bl	800b5fc <strlen>
 800bf8e:	9608      	str	r6, [sp, #32]
 800bf90:	9003      	str	r0, [sp, #12]
 800bf92:	e4c7      	b.n	800b924 <_svfiprintf_r+0x1c8>
 800bf94:	9807      	ldr	r0, [sp, #28]
 800bf96:	4651      	mov	r1, sl
 800bf98:	4642      	mov	r2, r8
 800bf9a:	f7ff fb5f 	bl	800b65c <__ssprint_r>
 800bf9e:	2800      	cmp	r0, #0
 800bfa0:	f47f aee8 	bne.w	800bd74 <_svfiprintf_r+0x618>
 800bfa4:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800bfa6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800bfa8:	ac0e      	add	r4, sp, #56	; 0x38
 800bfaa:	e642      	b.n	800bc32 <_svfiprintf_r+0x4d6>
 800bfac:	9905      	ldr	r1, [sp, #20]
 800bfae:	9a04      	ldr	r2, [sp, #16]
 800bfb0:	680b      	ldr	r3, [r1, #0]
 800bfb2:	3104      	adds	r1, #4
 800bfb4:	9105      	str	r1, [sp, #20]
 800bfb6:	601a      	str	r2, [r3, #0]
 800bfb8:	f7ff bbef 	b.w	800b79a <_svfiprintf_r+0x3e>
 800bfbc:	2140      	movs	r1, #64	; 0x40
 800bfbe:	9200      	str	r2, [sp, #0]
 800bfc0:	f7fe fa56 	bl	800a470 <_malloc_r>
 800bfc4:	9a00      	ldr	r2, [sp, #0]
 800bfc6:	f8ca 0000 	str.w	r0, [sl]
 800bfca:	f8ca 0010 	str.w	r0, [sl, #16]
 800bfce:	b188      	cbz	r0, 800bff4 <_svfiprintf_r+0x898>
 800bfd0:	2340      	movs	r3, #64	; 0x40
 800bfd2:	f8ca 3014 	str.w	r3, [sl, #20]
 800bfd6:	f7ff bbcf 	b.w	800b778 <_svfiprintf_r+0x1c>
 800bfda:	2d06      	cmp	r5, #6
 800bfdc:	bf28      	it	cs
 800bfde:	2506      	movcs	r5, #6
 800bfe0:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 800bfe4:	9302      	str	r3, [sp, #8]
 800bfe6:	4b07      	ldr	r3, [pc, #28]	; (800c004 <_svfiprintf_r+0x8a8>)
 800bfe8:	9503      	str	r5, [sp, #12]
 800bfea:	9309      	str	r3, [sp, #36]	; 0x24
 800bfec:	e52e      	b.n	800ba4c <_svfiprintf_r+0x2f0>
 800bfee:	9503      	str	r5, [sp, #12]
 800bff0:	9008      	str	r0, [sp, #32]
 800bff2:	e497      	b.n	800b924 <_svfiprintf_r+0x1c8>
 800bff4:	9807      	ldr	r0, [sp, #28]
 800bff6:	230c      	movs	r3, #12
 800bff8:	6003      	str	r3, [r0, #0]
 800bffa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bffe:	9304      	str	r3, [sp, #16]
 800c000:	e6c1      	b.n	800bd86 <_svfiprintf_r+0x62a>
 800c002:	bf00      	nop
 800c004:	0800d554 	.word	0x0800d554

0800c008 <_calloc_r>:
 800c008:	b510      	push	{r4, lr}
 800c00a:	fb01 f102 	mul.w	r1, r1, r2
 800c00e:	f7fe fa2f 	bl	800a470 <_malloc_r>
 800c012:	4604      	mov	r4, r0
 800c014:	b300      	cbz	r0, 800c058 <_calloc_r+0x50>
 800c016:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800c01a:	f022 0203 	bic.w	r2, r2, #3
 800c01e:	3a04      	subs	r2, #4
 800c020:	2a24      	cmp	r2, #36	; 0x24
 800c022:	d81b      	bhi.n	800c05c <_calloc_r+0x54>
 800c024:	2a13      	cmp	r2, #19
 800c026:	bf98      	it	ls
 800c028:	4602      	movls	r2, r0
 800c02a:	d911      	bls.n	800c050 <_calloc_r+0x48>
 800c02c:	2300      	movs	r3, #0
 800c02e:	2a1b      	cmp	r2, #27
 800c030:	6003      	str	r3, [r0, #0]
 800c032:	6043      	str	r3, [r0, #4]
 800c034:	bf98      	it	ls
 800c036:	f100 0208 	addls.w	r2, r0, #8
 800c03a:	d909      	bls.n	800c050 <_calloc_r+0x48>
 800c03c:	2a24      	cmp	r2, #36	; 0x24
 800c03e:	6083      	str	r3, [r0, #8]
 800c040:	60c3      	str	r3, [r0, #12]
 800c042:	bf11      	iteee	ne
 800c044:	f100 0210 	addne.w	r2, r0, #16
 800c048:	6103      	streq	r3, [r0, #16]
 800c04a:	6143      	streq	r3, [r0, #20]
 800c04c:	f100 0218 	addeq.w	r2, r0, #24
 800c050:	2300      	movs	r3, #0
 800c052:	6013      	str	r3, [r2, #0]
 800c054:	6053      	str	r3, [r2, #4]
 800c056:	6093      	str	r3, [r2, #8]
 800c058:	4620      	mov	r0, r4
 800c05a:	bd10      	pop	{r4, pc}
 800c05c:	2100      	movs	r1, #0
 800c05e:	f000 f85b 	bl	800c118 <memset>
 800c062:	4620      	mov	r0, r4
 800c064:	bd10      	pop	{r4, pc}
 800c066:	bf00      	nop

0800c068 <memmove>:
 800c068:	4288      	cmp	r0, r1
 800c06a:	b4f0      	push	{r4, r5, r6, r7}
 800c06c:	d912      	bls.n	800c094 <memmove+0x2c>
 800c06e:	188d      	adds	r5, r1, r2
 800c070:	42a8      	cmp	r0, r5
 800c072:	d20f      	bcs.n	800c094 <memmove+0x2c>
 800c074:	b162      	cbz	r2, 800c090 <memmove+0x28>
 800c076:	4251      	negs	r1, r2
 800c078:	4613      	mov	r3, r2
 800c07a:	1882      	adds	r2, r0, r2
 800c07c:	186d      	adds	r5, r5, r1
 800c07e:	1852      	adds	r2, r2, r1
 800c080:	18ec      	adds	r4, r5, r3
 800c082:	18d1      	adds	r1, r2, r3
 800c084:	f814 4c01 	ldrb.w	r4, [r4, #-1]
 800c088:	3b01      	subs	r3, #1
 800c08a:	f801 4c01 	strb.w	r4, [r1, #-1]
 800c08e:	d1f7      	bne.n	800c080 <memmove+0x18>
 800c090:	bcf0      	pop	{r4, r5, r6, r7}
 800c092:	4770      	bx	lr
 800c094:	2a0f      	cmp	r2, #15
 800c096:	bf98      	it	ls
 800c098:	4603      	movls	r3, r0
 800c09a:	d931      	bls.n	800c100 <memmove+0x98>
 800c09c:	ea41 0300 	orr.w	r3, r1, r0
 800c0a0:	079b      	lsls	r3, r3, #30
 800c0a2:	d137      	bne.n	800c114 <memmove+0xac>
 800c0a4:	460c      	mov	r4, r1
 800c0a6:	4603      	mov	r3, r0
 800c0a8:	4615      	mov	r5, r2
 800c0aa:	6826      	ldr	r6, [r4, #0]
 800c0ac:	601e      	str	r6, [r3, #0]
 800c0ae:	6866      	ldr	r6, [r4, #4]
 800c0b0:	605e      	str	r6, [r3, #4]
 800c0b2:	68a6      	ldr	r6, [r4, #8]
 800c0b4:	609e      	str	r6, [r3, #8]
 800c0b6:	68e6      	ldr	r6, [r4, #12]
 800c0b8:	3d10      	subs	r5, #16
 800c0ba:	60de      	str	r6, [r3, #12]
 800c0bc:	3410      	adds	r4, #16
 800c0be:	3310      	adds	r3, #16
 800c0c0:	2d0f      	cmp	r5, #15
 800c0c2:	d8f2      	bhi.n	800c0aa <memmove+0x42>
 800c0c4:	f1a2 0410 	sub.w	r4, r2, #16
 800c0c8:	f024 040f 	bic.w	r4, r4, #15
 800c0cc:	f002 020f 	and.w	r2, r2, #15
 800c0d0:	3410      	adds	r4, #16
 800c0d2:	2a03      	cmp	r2, #3
 800c0d4:	eb00 0304 	add.w	r3, r0, r4
 800c0d8:	4421      	add	r1, r4
 800c0da:	d911      	bls.n	800c100 <memmove+0x98>
 800c0dc:	1f0e      	subs	r6, r1, #4
 800c0de:	461d      	mov	r5, r3
 800c0e0:	4614      	mov	r4, r2
 800c0e2:	f856 7f04 	ldr.w	r7, [r6, #4]!
 800c0e6:	3c04      	subs	r4, #4
 800c0e8:	2c03      	cmp	r4, #3
 800c0ea:	f845 7b04 	str.w	r7, [r5], #4
 800c0ee:	d8f8      	bhi.n	800c0e2 <memmove+0x7a>
 800c0f0:	1f14      	subs	r4, r2, #4
 800c0f2:	f024 0403 	bic.w	r4, r4, #3
 800c0f6:	3404      	adds	r4, #4
 800c0f8:	f002 0203 	and.w	r2, r2, #3
 800c0fc:	1909      	adds	r1, r1, r4
 800c0fe:	191b      	adds	r3, r3, r4
 800c100:	2a00      	cmp	r2, #0
 800c102:	d0c5      	beq.n	800c090 <memmove+0x28>
 800c104:	3901      	subs	r1, #1
 800c106:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c10a:	3a01      	subs	r2, #1
 800c10c:	f803 4b01 	strb.w	r4, [r3], #1
 800c110:	d1f9      	bne.n	800c106 <memmove+0x9e>
 800c112:	e7bd      	b.n	800c090 <memmove+0x28>
 800c114:	4603      	mov	r3, r0
 800c116:	e7f5      	b.n	800c104 <memmove+0x9c>

0800c118 <memset>:
 800c118:	f010 0f03 	tst.w	r0, #3
 800c11c:	b470      	push	{r4, r5, r6}
 800c11e:	4603      	mov	r3, r0
 800c120:	d042      	beq.n	800c1a8 <memset+0x90>
 800c122:	2a00      	cmp	r2, #0
 800c124:	d03e      	beq.n	800c1a4 <memset+0x8c>
 800c126:	3a01      	subs	r2, #1
 800c128:	b2cd      	uxtb	r5, r1
 800c12a:	e003      	b.n	800c134 <memset+0x1c>
 800c12c:	1e54      	subs	r4, r2, #1
 800c12e:	2a00      	cmp	r2, #0
 800c130:	d038      	beq.n	800c1a4 <memset+0x8c>
 800c132:	4622      	mov	r2, r4
 800c134:	f803 5b01 	strb.w	r5, [r3], #1
 800c138:	f013 0f03 	tst.w	r3, #3
 800c13c:	461c      	mov	r4, r3
 800c13e:	d1f5      	bne.n	800c12c <memset+0x14>
 800c140:	2a03      	cmp	r2, #3
 800c142:	d929      	bls.n	800c198 <memset+0x80>
 800c144:	b2cd      	uxtb	r5, r1
 800c146:	2a0f      	cmp	r2, #15
 800c148:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 800c14c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 800c150:	bf84      	itt	hi
 800c152:	4623      	movhi	r3, r4
 800c154:	4616      	movhi	r6, r2
 800c156:	d911      	bls.n	800c17c <memset+0x64>
 800c158:	3e10      	subs	r6, #16
 800c15a:	601d      	str	r5, [r3, #0]
 800c15c:	605d      	str	r5, [r3, #4]
 800c15e:	609d      	str	r5, [r3, #8]
 800c160:	60dd      	str	r5, [r3, #12]
 800c162:	3310      	adds	r3, #16
 800c164:	2e0f      	cmp	r6, #15
 800c166:	d8f7      	bhi.n	800c158 <memset+0x40>
 800c168:	f1a2 0310 	sub.w	r3, r2, #16
 800c16c:	f023 030f 	bic.w	r3, r3, #15
 800c170:	f002 020f 	and.w	r2, r2, #15
 800c174:	3310      	adds	r3, #16
 800c176:	2a03      	cmp	r2, #3
 800c178:	441c      	add	r4, r3
 800c17a:	d90d      	bls.n	800c198 <memset+0x80>
 800c17c:	4626      	mov	r6, r4
 800c17e:	4613      	mov	r3, r2
 800c180:	3b04      	subs	r3, #4
 800c182:	2b03      	cmp	r3, #3
 800c184:	f846 5b04 	str.w	r5, [r6], #4
 800c188:	d8fa      	bhi.n	800c180 <memset+0x68>
 800c18a:	1f13      	subs	r3, r2, #4
 800c18c:	f023 0303 	bic.w	r3, r3, #3
 800c190:	3304      	adds	r3, #4
 800c192:	f002 0203 	and.w	r2, r2, #3
 800c196:	18e4      	adds	r4, r4, r3
 800c198:	b2c9      	uxtb	r1, r1
 800c19a:	b11a      	cbz	r2, 800c1a4 <memset+0x8c>
 800c19c:	3a01      	subs	r2, #1
 800c19e:	f804 1b01 	strb.w	r1, [r4], #1
 800c1a2:	d1fb      	bne.n	800c19c <memset+0x84>
 800c1a4:	bc70      	pop	{r4, r5, r6}
 800c1a6:	4770      	bx	lr
 800c1a8:	4604      	mov	r4, r0
 800c1aa:	e7c9      	b.n	800c140 <memset+0x28>

0800c1ac <_realloc_r>:
 800c1ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1b0:	460c      	mov	r4, r1
 800c1b2:	b083      	sub	sp, #12
 800c1b4:	4607      	mov	r7, r0
 800c1b6:	4690      	mov	r8, r2
 800c1b8:	2900      	cmp	r1, #0
 800c1ba:	f000 80fe 	beq.w	800c3ba <_realloc_r+0x20e>
 800c1be:	f108 050b 	add.w	r5, r8, #11
 800c1c2:	f7fe fc8b 	bl	800aadc <__malloc_lock>
 800c1c6:	2d16      	cmp	r5, #22
 800c1c8:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800c1cc:	d87d      	bhi.n	800c2ca <_realloc_r+0x11e>
 800c1ce:	2210      	movs	r2, #16
 800c1d0:	2600      	movs	r6, #0
 800c1d2:	4615      	mov	r5, r2
 800c1d4:	4545      	cmp	r5, r8
 800c1d6:	bf38      	it	cc
 800c1d8:	f046 0601 	orrcc.w	r6, r6, #1
 800c1dc:	2e00      	cmp	r6, #0
 800c1de:	f040 80f2 	bne.w	800c3c6 <_realloc_r+0x21a>
 800c1e2:	f021 0a03 	bic.w	sl, r1, #3
 800c1e6:	4592      	cmp	sl, r2
 800c1e8:	f1a4 0b08 	sub.w	fp, r4, #8
 800c1ec:	bfa8      	it	ge
 800c1ee:	4656      	movge	r6, sl
 800c1f0:	da55      	bge.n	800c29e <_realloc_r+0xf2>
 800c1f2:	4ba0      	ldr	r3, [pc, #640]	; (800c474 <_realloc_r+0x2c8>)
 800c1f4:	f8d3 c008 	ldr.w	ip, [r3, #8]
 800c1f8:	eb0b 000a 	add.w	r0, fp, sl
 800c1fc:	4584      	cmp	ip, r0
 800c1fe:	f000 80e7 	beq.w	800c3d0 <_realloc_r+0x224>
 800c202:	f8d0 e004 	ldr.w	lr, [r0, #4]
 800c206:	f02e 0901 	bic.w	r9, lr, #1
 800c20a:	4481      	add	r9, r0
 800c20c:	f8d9 9004 	ldr.w	r9, [r9, #4]
 800c210:	f019 0f01 	tst.w	r9, #1
 800c214:	bf1c      	itt	ne
 800c216:	46b6      	movne	lr, r6
 800c218:	4670      	movne	r0, lr
 800c21a:	d05b      	beq.n	800c2d4 <_realloc_r+0x128>
 800c21c:	07c9      	lsls	r1, r1, #31
 800c21e:	d479      	bmi.n	800c314 <_realloc_r+0x168>
 800c220:	f854 1c08 	ldr.w	r1, [r4, #-8]
 800c224:	ebc1 090b 	rsb	r9, r1, fp
 800c228:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c22c:	f021 0103 	bic.w	r1, r1, #3
 800c230:	2800      	cmp	r0, #0
 800c232:	f000 8097 	beq.w	800c364 <_realloc_r+0x1b8>
 800c236:	4560      	cmp	r0, ip
 800c238:	eb01 0c0a 	add.w	ip, r1, sl
 800c23c:	eb0e 060c 	add.w	r6, lr, ip
 800c240:	f000 811a 	beq.w	800c478 <_realloc_r+0x2cc>
 800c244:	42b2      	cmp	r2, r6
 800c246:	f300 808f 	bgt.w	800c368 <_realloc_r+0x1bc>
 800c24a:	68c3      	ldr	r3, [r0, #12]
 800c24c:	6882      	ldr	r2, [r0, #8]
 800c24e:	46c8      	mov	r8, r9
 800c250:	609a      	str	r2, [r3, #8]
 800c252:	60d3      	str	r3, [r2, #12]
 800c254:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800c258:	f858 1f08 	ldr.w	r1, [r8, #8]!
 800c25c:	f1aa 0204 	sub.w	r2, sl, #4
 800c260:	2a24      	cmp	r2, #36	; 0x24
 800c262:	60cb      	str	r3, [r1, #12]
 800c264:	6099      	str	r1, [r3, #8]
 800c266:	f200 8144 	bhi.w	800c4f2 <_realloc_r+0x346>
 800c26a:	2a13      	cmp	r2, #19
 800c26c:	bf98      	it	ls
 800c26e:	4643      	movls	r3, r8
 800c270:	d90b      	bls.n	800c28a <_realloc_r+0xde>
 800c272:	6823      	ldr	r3, [r4, #0]
 800c274:	f8c9 3008 	str.w	r3, [r9, #8]
 800c278:	6863      	ldr	r3, [r4, #4]
 800c27a:	2a1b      	cmp	r2, #27
 800c27c:	f8c9 300c 	str.w	r3, [r9, #12]
 800c280:	f200 8140 	bhi.w	800c504 <_realloc_r+0x358>
 800c284:	f109 0310 	add.w	r3, r9, #16
 800c288:	3408      	adds	r4, #8
 800c28a:	6822      	ldr	r2, [r4, #0]
 800c28c:	601a      	str	r2, [r3, #0]
 800c28e:	6862      	ldr	r2, [r4, #4]
 800c290:	605a      	str	r2, [r3, #4]
 800c292:	68a2      	ldr	r2, [r4, #8]
 800c294:	609a      	str	r2, [r3, #8]
 800c296:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c29a:	4644      	mov	r4, r8
 800c29c:	46cb      	mov	fp, r9
 800c29e:	1b72      	subs	r2, r6, r5
 800c2a0:	2a0f      	cmp	r2, #15
 800c2a2:	d822      	bhi.n	800c2ea <_realloc_r+0x13e>
 800c2a4:	f001 0101 	and.w	r1, r1, #1
 800c2a8:	eb0b 0306 	add.w	r3, fp, r6
 800c2ac:	430e      	orrs	r6, r1
 800c2ae:	f8cb 6004 	str.w	r6, [fp, #4]
 800c2b2:	685a      	ldr	r2, [r3, #4]
 800c2b4:	f042 0201 	orr.w	r2, r2, #1
 800c2b8:	605a      	str	r2, [r3, #4]
 800c2ba:	4638      	mov	r0, r7
 800c2bc:	f7fe fc10 	bl	800aae0 <__malloc_unlock>
 800c2c0:	46a0      	mov	r8, r4
 800c2c2:	4640      	mov	r0, r8
 800c2c4:	b003      	add	sp, #12
 800c2c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2ca:	f025 0507 	bic.w	r5, r5, #7
 800c2ce:	462a      	mov	r2, r5
 800c2d0:	0fee      	lsrs	r6, r5, #31
 800c2d2:	e77f      	b.n	800c1d4 <_realloc_r+0x28>
 800c2d4:	f02e 0e03 	bic.w	lr, lr, #3
 800c2d8:	eb0e 060a 	add.w	r6, lr, sl
 800c2dc:	42b2      	cmp	r2, r6
 800c2de:	dc9d      	bgt.n	800c21c <_realloc_r+0x70>
 800c2e0:	68c3      	ldr	r3, [r0, #12]
 800c2e2:	6882      	ldr	r2, [r0, #8]
 800c2e4:	60d3      	str	r3, [r2, #12]
 800c2e6:	609a      	str	r2, [r3, #8]
 800c2e8:	e7d9      	b.n	800c29e <_realloc_r+0xf2>
 800c2ea:	eb0b 0305 	add.w	r3, fp, r5
 800c2ee:	f001 0101 	and.w	r1, r1, #1
 800c2f2:	1898      	adds	r0, r3, r2
 800c2f4:	430d      	orrs	r5, r1
 800c2f6:	f042 0201 	orr.w	r2, r2, #1
 800c2fa:	f8cb 5004 	str.w	r5, [fp, #4]
 800c2fe:	605a      	str	r2, [r3, #4]
 800c300:	6842      	ldr	r2, [r0, #4]
 800c302:	f042 0201 	orr.w	r2, r2, #1
 800c306:	6042      	str	r2, [r0, #4]
 800c308:	f103 0108 	add.w	r1, r3, #8
 800c30c:	4638      	mov	r0, r7
 800c30e:	f7fd ffa3 	bl	800a258 <_free_r>
 800c312:	e7d2      	b.n	800c2ba <_realloc_r+0x10e>
 800c314:	4641      	mov	r1, r8
 800c316:	4638      	mov	r0, r7
 800c318:	f7fe f8aa 	bl	800a470 <_malloc_r>
 800c31c:	4680      	mov	r8, r0
 800c31e:	b1e8      	cbz	r0, 800c35c <_realloc_r+0x1b0>
 800c320:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800c324:	f021 0301 	bic.w	r3, r1, #1
 800c328:	f1a0 0208 	sub.w	r2, r0, #8
 800c32c:	445b      	add	r3, fp
 800c32e:	429a      	cmp	r2, r3
 800c330:	f000 80d9 	beq.w	800c4e6 <_realloc_r+0x33a>
 800c334:	f1aa 0204 	sub.w	r2, sl, #4
 800c338:	2a24      	cmp	r2, #36	; 0x24
 800c33a:	f200 8096 	bhi.w	800c46a <_realloc_r+0x2be>
 800c33e:	2a13      	cmp	r2, #19
 800c340:	bf9c      	itt	ls
 800c342:	4603      	movls	r3, r0
 800c344:	4622      	movls	r2, r4
 800c346:	d863      	bhi.n	800c410 <_realloc_r+0x264>
 800c348:	6811      	ldr	r1, [r2, #0]
 800c34a:	6019      	str	r1, [r3, #0]
 800c34c:	6851      	ldr	r1, [r2, #4]
 800c34e:	6059      	str	r1, [r3, #4]
 800c350:	6892      	ldr	r2, [r2, #8]
 800c352:	609a      	str	r2, [r3, #8]
 800c354:	4638      	mov	r0, r7
 800c356:	4621      	mov	r1, r4
 800c358:	f7fd ff7e 	bl	800a258 <_free_r>
 800c35c:	4638      	mov	r0, r7
 800c35e:	f7fe fbbf 	bl	800aae0 <__malloc_unlock>
 800c362:	e7ae      	b.n	800c2c2 <_realloc_r+0x116>
 800c364:	eb01 0c0a 	add.w	ip, r1, sl
 800c368:	4562      	cmp	r2, ip
 800c36a:	dcd3      	bgt.n	800c314 <_realloc_r+0x168>
 800c36c:	464e      	mov	r6, r9
 800c36e:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800c372:	f856 1f08 	ldr.w	r1, [r6, #8]!
 800c376:	f1aa 0204 	sub.w	r2, sl, #4
 800c37a:	2a24      	cmp	r2, #36	; 0x24
 800c37c:	60cb      	str	r3, [r1, #12]
 800c37e:	6099      	str	r1, [r3, #8]
 800c380:	d865      	bhi.n	800c44e <_realloc_r+0x2a2>
 800c382:	2a13      	cmp	r2, #19
 800c384:	bf98      	it	ls
 800c386:	4633      	movls	r3, r6
 800c388:	d90b      	bls.n	800c3a2 <_realloc_r+0x1f6>
 800c38a:	6823      	ldr	r3, [r4, #0]
 800c38c:	f8c9 3008 	str.w	r3, [r9, #8]
 800c390:	6863      	ldr	r3, [r4, #4]
 800c392:	2a1b      	cmp	r2, #27
 800c394:	f8c9 300c 	str.w	r3, [r9, #12]
 800c398:	f200 80c0 	bhi.w	800c51c <_realloc_r+0x370>
 800c39c:	f109 0310 	add.w	r3, r9, #16
 800c3a0:	3408      	adds	r4, #8
 800c3a2:	6822      	ldr	r2, [r4, #0]
 800c3a4:	601a      	str	r2, [r3, #0]
 800c3a6:	6862      	ldr	r2, [r4, #4]
 800c3a8:	605a      	str	r2, [r3, #4]
 800c3aa:	68a2      	ldr	r2, [r4, #8]
 800c3ac:	609a      	str	r2, [r3, #8]
 800c3ae:	4634      	mov	r4, r6
 800c3b0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c3b4:	4666      	mov	r6, ip
 800c3b6:	46cb      	mov	fp, r9
 800c3b8:	e771      	b.n	800c29e <_realloc_r+0xf2>
 800c3ba:	4611      	mov	r1, r2
 800c3bc:	b003      	add	sp, #12
 800c3be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3c2:	f7fe b855 	b.w	800a470 <_malloc_r>
 800c3c6:	230c      	movs	r3, #12
 800c3c8:	603b      	str	r3, [r7, #0]
 800c3ca:	f04f 0800 	mov.w	r8, #0
 800c3ce:	e778      	b.n	800c2c2 <_realloc_r+0x116>
 800c3d0:	f8dc 6004 	ldr.w	r6, [ip, #4]
 800c3d4:	f026 0e03 	bic.w	lr, r6, #3
 800c3d8:	eb0e 000a 	add.w	r0, lr, sl
 800c3dc:	f105 0610 	add.w	r6, r5, #16
 800c3e0:	42b0      	cmp	r0, r6
 800c3e2:	bfb8      	it	lt
 800c3e4:	4660      	movlt	r0, ip
 800c3e6:	f6ff af19 	blt.w	800c21c <_realloc_r+0x70>
 800c3ea:	eb0b 0205 	add.w	r2, fp, r5
 800c3ee:	1b41      	subs	r1, r0, r5
 800c3f0:	f041 0101 	orr.w	r1, r1, #1
 800c3f4:	6051      	str	r1, [r2, #4]
 800c3f6:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800c3fa:	609a      	str	r2, [r3, #8]
 800c3fc:	f001 0301 	and.w	r3, r1, #1
 800c400:	431d      	orrs	r5, r3
 800c402:	f844 5c04 	str.w	r5, [r4, #-4]
 800c406:	4638      	mov	r0, r7
 800c408:	f7fe fb6a 	bl	800aae0 <__malloc_unlock>
 800c40c:	46a0      	mov	r8, r4
 800c40e:	e758      	b.n	800c2c2 <_realloc_r+0x116>
 800c410:	6823      	ldr	r3, [r4, #0]
 800c412:	6003      	str	r3, [r0, #0]
 800c414:	6863      	ldr	r3, [r4, #4]
 800c416:	2a1b      	cmp	r2, #27
 800c418:	6043      	str	r3, [r0, #4]
 800c41a:	bf9c      	itt	ls
 800c41c:	f104 0208 	addls.w	r2, r4, #8
 800c420:	f100 0308 	addls.w	r3, r0, #8
 800c424:	d990      	bls.n	800c348 <_realloc_r+0x19c>
 800c426:	68a3      	ldr	r3, [r4, #8]
 800c428:	6083      	str	r3, [r0, #8]
 800c42a:	68e3      	ldr	r3, [r4, #12]
 800c42c:	2a24      	cmp	r2, #36	; 0x24
 800c42e:	60c3      	str	r3, [r0, #12]
 800c430:	bf03      	ittte	eq
 800c432:	6923      	ldreq	r3, [r4, #16]
 800c434:	6103      	streq	r3, [r0, #16]
 800c436:	6962      	ldreq	r2, [r4, #20]
 800c438:	f100 0310 	addne.w	r3, r0, #16
 800c43c:	bf09      	itett	eq
 800c43e:	6142      	streq	r2, [r0, #20]
 800c440:	f104 0210 	addne.w	r2, r4, #16
 800c444:	f100 0318 	addeq.w	r3, r0, #24
 800c448:	f104 0218 	addeq.w	r2, r4, #24
 800c44c:	e77c      	b.n	800c348 <_realloc_r+0x19c>
 800c44e:	4621      	mov	r1, r4
 800c450:	4630      	mov	r0, r6
 800c452:	f8cd c004 	str.w	ip, [sp, #4]
 800c456:	f7ff fe07 	bl	800c068 <memmove>
 800c45a:	f8dd c004 	ldr.w	ip, [sp, #4]
 800c45e:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c462:	4634      	mov	r4, r6
 800c464:	46cb      	mov	fp, r9
 800c466:	4666      	mov	r6, ip
 800c468:	e719      	b.n	800c29e <_realloc_r+0xf2>
 800c46a:	4621      	mov	r1, r4
 800c46c:	f7ff fdfc 	bl	800c068 <memmove>
 800c470:	e770      	b.n	800c354 <_realloc_r+0x1a8>
 800c472:	bf00      	nop
 800c474:	2000054c 	.word	0x2000054c
 800c478:	f105 0110 	add.w	r1, r5, #16
 800c47c:	428e      	cmp	r6, r1
 800c47e:	f6ff af73 	blt.w	800c368 <_realloc_r+0x1bc>
 800c482:	46c8      	mov	r8, r9
 800c484:	f8d9 100c 	ldr.w	r1, [r9, #12]
 800c488:	f858 0f08 	ldr.w	r0, [r8, #8]!
 800c48c:	f1aa 0204 	sub.w	r2, sl, #4
 800c490:	2a24      	cmp	r2, #36	; 0x24
 800c492:	60c1      	str	r1, [r0, #12]
 800c494:	6088      	str	r0, [r1, #8]
 800c496:	d861      	bhi.n	800c55c <_realloc_r+0x3b0>
 800c498:	2a13      	cmp	r2, #19
 800c49a:	bf98      	it	ls
 800c49c:	4642      	movls	r2, r8
 800c49e:	d90a      	bls.n	800c4b6 <_realloc_r+0x30a>
 800c4a0:	6821      	ldr	r1, [r4, #0]
 800c4a2:	f8c9 1008 	str.w	r1, [r9, #8]
 800c4a6:	6861      	ldr	r1, [r4, #4]
 800c4a8:	2a1b      	cmp	r2, #27
 800c4aa:	f8c9 100c 	str.w	r1, [r9, #12]
 800c4ae:	d85c      	bhi.n	800c56a <_realloc_r+0x3be>
 800c4b0:	f109 0210 	add.w	r2, r9, #16
 800c4b4:	3408      	adds	r4, #8
 800c4b6:	6821      	ldr	r1, [r4, #0]
 800c4b8:	6011      	str	r1, [r2, #0]
 800c4ba:	6861      	ldr	r1, [r4, #4]
 800c4bc:	6051      	str	r1, [r2, #4]
 800c4be:	68a1      	ldr	r1, [r4, #8]
 800c4c0:	6091      	str	r1, [r2, #8]
 800c4c2:	eb09 0205 	add.w	r2, r9, r5
 800c4c6:	1b71      	subs	r1, r6, r5
 800c4c8:	f041 0101 	orr.w	r1, r1, #1
 800c4cc:	6051      	str	r1, [r2, #4]
 800c4ce:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c4d2:	609a      	str	r2, [r3, #8]
 800c4d4:	f001 0301 	and.w	r3, r1, #1
 800c4d8:	431d      	orrs	r5, r3
 800c4da:	f8c9 5004 	str.w	r5, [r9, #4]
 800c4de:	4638      	mov	r0, r7
 800c4e0:	f7fe fafe 	bl	800aae0 <__malloc_unlock>
 800c4e4:	e6ed      	b.n	800c2c2 <_realloc_r+0x116>
 800c4e6:	f850 6c04 	ldr.w	r6, [r0, #-4]
 800c4ea:	f026 0603 	bic.w	r6, r6, #3
 800c4ee:	4456      	add	r6, sl
 800c4f0:	e6d5      	b.n	800c29e <_realloc_r+0xf2>
 800c4f2:	4621      	mov	r1, r4
 800c4f4:	4640      	mov	r0, r8
 800c4f6:	f7ff fdb7 	bl	800c068 <memmove>
 800c4fa:	4644      	mov	r4, r8
 800c4fc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c500:	46cb      	mov	fp, r9
 800c502:	e6cc      	b.n	800c29e <_realloc_r+0xf2>
 800c504:	68a3      	ldr	r3, [r4, #8]
 800c506:	f8c9 3010 	str.w	r3, [r9, #16]
 800c50a:	68e3      	ldr	r3, [r4, #12]
 800c50c:	2a24      	cmp	r2, #36	; 0x24
 800c50e:	f8c9 3014 	str.w	r3, [r9, #20]
 800c512:	d00f      	beq.n	800c534 <_realloc_r+0x388>
 800c514:	f109 0318 	add.w	r3, r9, #24
 800c518:	3410      	adds	r4, #16
 800c51a:	e6b6      	b.n	800c28a <_realloc_r+0xde>
 800c51c:	68a3      	ldr	r3, [r4, #8]
 800c51e:	f8c9 3010 	str.w	r3, [r9, #16]
 800c522:	68e3      	ldr	r3, [r4, #12]
 800c524:	2a24      	cmp	r2, #36	; 0x24
 800c526:	f8c9 3014 	str.w	r3, [r9, #20]
 800c52a:	d00d      	beq.n	800c548 <_realloc_r+0x39c>
 800c52c:	f109 0318 	add.w	r3, r9, #24
 800c530:	3410      	adds	r4, #16
 800c532:	e736      	b.n	800c3a2 <_realloc_r+0x1f6>
 800c534:	6923      	ldr	r3, [r4, #16]
 800c536:	f8c9 3018 	str.w	r3, [r9, #24]
 800c53a:	6962      	ldr	r2, [r4, #20]
 800c53c:	f109 0320 	add.w	r3, r9, #32
 800c540:	f8c9 201c 	str.w	r2, [r9, #28]
 800c544:	3418      	adds	r4, #24
 800c546:	e6a0      	b.n	800c28a <_realloc_r+0xde>
 800c548:	6923      	ldr	r3, [r4, #16]
 800c54a:	f8c9 3018 	str.w	r3, [r9, #24]
 800c54e:	6962      	ldr	r2, [r4, #20]
 800c550:	f109 0320 	add.w	r3, r9, #32
 800c554:	f8c9 201c 	str.w	r2, [r9, #28]
 800c558:	3418      	adds	r4, #24
 800c55a:	e722      	b.n	800c3a2 <_realloc_r+0x1f6>
 800c55c:	4640      	mov	r0, r8
 800c55e:	4621      	mov	r1, r4
 800c560:	9301      	str	r3, [sp, #4]
 800c562:	f7ff fd81 	bl	800c068 <memmove>
 800c566:	9b01      	ldr	r3, [sp, #4]
 800c568:	e7ab      	b.n	800c4c2 <_realloc_r+0x316>
 800c56a:	68a1      	ldr	r1, [r4, #8]
 800c56c:	f8c9 1010 	str.w	r1, [r9, #16]
 800c570:	68e1      	ldr	r1, [r4, #12]
 800c572:	2a24      	cmp	r2, #36	; 0x24
 800c574:	f8c9 1014 	str.w	r1, [r9, #20]
 800c578:	d003      	beq.n	800c582 <_realloc_r+0x3d6>
 800c57a:	f109 0218 	add.w	r2, r9, #24
 800c57e:	3410      	adds	r4, #16
 800c580:	e799      	b.n	800c4b6 <_realloc_r+0x30a>
 800c582:	6922      	ldr	r2, [r4, #16]
 800c584:	f8c9 2018 	str.w	r2, [r9, #24]
 800c588:	6961      	ldr	r1, [r4, #20]
 800c58a:	f109 0220 	add.w	r2, r9, #32
 800c58e:	f8c9 101c 	str.w	r1, [r9, #28]
 800c592:	3418      	adds	r4, #24
 800c594:	e78f      	b.n	800c4b6 <_realloc_r+0x30a>
 800c596:	bf00      	nop

0800c598 <__aeabi_drsub>:
 800c598:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800c59c:	e002      	b.n	800c5a4 <__adddf3>
 800c59e:	bf00      	nop

0800c5a0 <__aeabi_dsub>:
 800c5a0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800c5a4 <__adddf3>:
 800c5a4:	b530      	push	{r4, r5, lr}
 800c5a6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800c5aa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800c5ae:	ea94 0f05 	teq	r4, r5
 800c5b2:	bf08      	it	eq
 800c5b4:	ea90 0f02 	teqeq	r0, r2
 800c5b8:	bf1f      	itttt	ne
 800c5ba:	ea54 0c00 	orrsne.w	ip, r4, r0
 800c5be:	ea55 0c02 	orrsne.w	ip, r5, r2
 800c5c2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800c5c6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800c5ca:	f000 80e2 	beq.w	800c792 <__adddf3+0x1ee>
 800c5ce:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800c5d2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800c5d6:	bfb8      	it	lt
 800c5d8:	426d      	neglt	r5, r5
 800c5da:	dd0c      	ble.n	800c5f6 <__adddf3+0x52>
 800c5dc:	442c      	add	r4, r5
 800c5de:	ea80 0202 	eor.w	r2, r0, r2
 800c5e2:	ea81 0303 	eor.w	r3, r1, r3
 800c5e6:	ea82 0000 	eor.w	r0, r2, r0
 800c5ea:	ea83 0101 	eor.w	r1, r3, r1
 800c5ee:	ea80 0202 	eor.w	r2, r0, r2
 800c5f2:	ea81 0303 	eor.w	r3, r1, r3
 800c5f6:	2d36      	cmp	r5, #54	; 0x36
 800c5f8:	bf88      	it	hi
 800c5fa:	bd30      	pophi	{r4, r5, pc}
 800c5fc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800c600:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800c604:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800c608:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800c60c:	d002      	beq.n	800c614 <__adddf3+0x70>
 800c60e:	4240      	negs	r0, r0
 800c610:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800c614:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800c618:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800c61c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800c620:	d002      	beq.n	800c628 <__adddf3+0x84>
 800c622:	4252      	negs	r2, r2
 800c624:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800c628:	ea94 0f05 	teq	r4, r5
 800c62c:	f000 80a7 	beq.w	800c77e <__adddf3+0x1da>
 800c630:	f1a4 0401 	sub.w	r4, r4, #1
 800c634:	f1d5 0e20 	rsbs	lr, r5, #32
 800c638:	db0d      	blt.n	800c656 <__adddf3+0xb2>
 800c63a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800c63e:	fa22 f205 	lsr.w	r2, r2, r5
 800c642:	1880      	adds	r0, r0, r2
 800c644:	f141 0100 	adc.w	r1, r1, #0
 800c648:	fa03 f20e 	lsl.w	r2, r3, lr
 800c64c:	1880      	adds	r0, r0, r2
 800c64e:	fa43 f305 	asr.w	r3, r3, r5
 800c652:	4159      	adcs	r1, r3
 800c654:	e00e      	b.n	800c674 <__adddf3+0xd0>
 800c656:	f1a5 0520 	sub.w	r5, r5, #32
 800c65a:	f10e 0e20 	add.w	lr, lr, #32
 800c65e:	2a01      	cmp	r2, #1
 800c660:	fa03 fc0e 	lsl.w	ip, r3, lr
 800c664:	bf28      	it	cs
 800c666:	f04c 0c02 	orrcs.w	ip, ip, #2
 800c66a:	fa43 f305 	asr.w	r3, r3, r5
 800c66e:	18c0      	adds	r0, r0, r3
 800c670:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800c674:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800c678:	d507      	bpl.n	800c68a <__adddf3+0xe6>
 800c67a:	f04f 0e00 	mov.w	lr, #0
 800c67e:	f1dc 0c00 	rsbs	ip, ip, #0
 800c682:	eb7e 0000 	sbcs.w	r0, lr, r0
 800c686:	eb6e 0101 	sbc.w	r1, lr, r1
 800c68a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800c68e:	d31b      	bcc.n	800c6c8 <__adddf3+0x124>
 800c690:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800c694:	d30c      	bcc.n	800c6b0 <__adddf3+0x10c>
 800c696:	0849      	lsrs	r1, r1, #1
 800c698:	ea5f 0030 	movs.w	r0, r0, rrx
 800c69c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800c6a0:	f104 0401 	add.w	r4, r4, #1
 800c6a4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800c6a8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800c6ac:	f080 809a 	bcs.w	800c7e4 <__adddf3+0x240>
 800c6b0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800c6b4:	bf08      	it	eq
 800c6b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800c6ba:	f150 0000 	adcs.w	r0, r0, #0
 800c6be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800c6c2:	ea41 0105 	orr.w	r1, r1, r5
 800c6c6:	bd30      	pop	{r4, r5, pc}
 800c6c8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800c6cc:	4140      	adcs	r0, r0
 800c6ce:	eb41 0101 	adc.w	r1, r1, r1
 800c6d2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800c6d6:	f1a4 0401 	sub.w	r4, r4, #1
 800c6da:	d1e9      	bne.n	800c6b0 <__adddf3+0x10c>
 800c6dc:	f091 0f00 	teq	r1, #0
 800c6e0:	bf04      	itt	eq
 800c6e2:	4601      	moveq	r1, r0
 800c6e4:	2000      	moveq	r0, #0
 800c6e6:	fab1 f381 	clz	r3, r1
 800c6ea:	bf08      	it	eq
 800c6ec:	3320      	addeq	r3, #32
 800c6ee:	f1a3 030b 	sub.w	r3, r3, #11
 800c6f2:	f1b3 0220 	subs.w	r2, r3, #32
 800c6f6:	da0c      	bge.n	800c712 <__adddf3+0x16e>
 800c6f8:	320c      	adds	r2, #12
 800c6fa:	dd08      	ble.n	800c70e <__adddf3+0x16a>
 800c6fc:	f102 0c14 	add.w	ip, r2, #20
 800c700:	f1c2 020c 	rsb	r2, r2, #12
 800c704:	fa01 f00c 	lsl.w	r0, r1, ip
 800c708:	fa21 f102 	lsr.w	r1, r1, r2
 800c70c:	e00c      	b.n	800c728 <__adddf3+0x184>
 800c70e:	f102 0214 	add.w	r2, r2, #20
 800c712:	bfd8      	it	le
 800c714:	f1c2 0c20 	rsble	ip, r2, #32
 800c718:	fa01 f102 	lsl.w	r1, r1, r2
 800c71c:	fa20 fc0c 	lsr.w	ip, r0, ip
 800c720:	bfdc      	itt	le
 800c722:	ea41 010c 	orrle.w	r1, r1, ip
 800c726:	4090      	lslle	r0, r2
 800c728:	1ae4      	subs	r4, r4, r3
 800c72a:	bfa2      	ittt	ge
 800c72c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800c730:	4329      	orrge	r1, r5
 800c732:	bd30      	popge	{r4, r5, pc}
 800c734:	ea6f 0404 	mvn.w	r4, r4
 800c738:	3c1f      	subs	r4, #31
 800c73a:	da1c      	bge.n	800c776 <__adddf3+0x1d2>
 800c73c:	340c      	adds	r4, #12
 800c73e:	dc0e      	bgt.n	800c75e <__adddf3+0x1ba>
 800c740:	f104 0414 	add.w	r4, r4, #20
 800c744:	f1c4 0220 	rsb	r2, r4, #32
 800c748:	fa20 f004 	lsr.w	r0, r0, r4
 800c74c:	fa01 f302 	lsl.w	r3, r1, r2
 800c750:	ea40 0003 	orr.w	r0, r0, r3
 800c754:	fa21 f304 	lsr.w	r3, r1, r4
 800c758:	ea45 0103 	orr.w	r1, r5, r3
 800c75c:	bd30      	pop	{r4, r5, pc}
 800c75e:	f1c4 040c 	rsb	r4, r4, #12
 800c762:	f1c4 0220 	rsb	r2, r4, #32
 800c766:	fa20 f002 	lsr.w	r0, r0, r2
 800c76a:	fa01 f304 	lsl.w	r3, r1, r4
 800c76e:	ea40 0003 	orr.w	r0, r0, r3
 800c772:	4629      	mov	r1, r5
 800c774:	bd30      	pop	{r4, r5, pc}
 800c776:	fa21 f004 	lsr.w	r0, r1, r4
 800c77a:	4629      	mov	r1, r5
 800c77c:	bd30      	pop	{r4, r5, pc}
 800c77e:	f094 0f00 	teq	r4, #0
 800c782:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800c786:	bf06      	itte	eq
 800c788:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800c78c:	3401      	addeq	r4, #1
 800c78e:	3d01      	subne	r5, #1
 800c790:	e74e      	b.n	800c630 <__adddf3+0x8c>
 800c792:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800c796:	bf18      	it	ne
 800c798:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800c79c:	d029      	beq.n	800c7f2 <__adddf3+0x24e>
 800c79e:	ea94 0f05 	teq	r4, r5
 800c7a2:	bf08      	it	eq
 800c7a4:	ea90 0f02 	teqeq	r0, r2
 800c7a8:	d005      	beq.n	800c7b6 <__adddf3+0x212>
 800c7aa:	ea54 0c00 	orrs.w	ip, r4, r0
 800c7ae:	bf04      	itt	eq
 800c7b0:	4619      	moveq	r1, r3
 800c7b2:	4610      	moveq	r0, r2
 800c7b4:	bd30      	pop	{r4, r5, pc}
 800c7b6:	ea91 0f03 	teq	r1, r3
 800c7ba:	bf1e      	ittt	ne
 800c7bc:	2100      	movne	r1, #0
 800c7be:	2000      	movne	r0, #0
 800c7c0:	bd30      	popne	{r4, r5, pc}
 800c7c2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800c7c6:	d105      	bne.n	800c7d4 <__adddf3+0x230>
 800c7c8:	0040      	lsls	r0, r0, #1
 800c7ca:	4149      	adcs	r1, r1
 800c7cc:	bf28      	it	cs
 800c7ce:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800c7d2:	bd30      	pop	{r4, r5, pc}
 800c7d4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800c7d8:	bf3c      	itt	cc
 800c7da:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800c7de:	bd30      	popcc	{r4, r5, pc}
 800c7e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800c7e4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800c7e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c7ec:	f04f 0000 	mov.w	r0, #0
 800c7f0:	bd30      	pop	{r4, r5, pc}
 800c7f2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800c7f6:	bf1a      	itte	ne
 800c7f8:	4619      	movne	r1, r3
 800c7fa:	4610      	movne	r0, r2
 800c7fc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800c800:	bf1c      	itt	ne
 800c802:	460b      	movne	r3, r1
 800c804:	4602      	movne	r2, r0
 800c806:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800c80a:	bf06      	itte	eq
 800c80c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800c810:	ea91 0f03 	teqeq	r1, r3
 800c814:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800c818:	bd30      	pop	{r4, r5, pc}
 800c81a:	bf00      	nop

0800c81c <__aeabi_ui2d>:
 800c81c:	f090 0f00 	teq	r0, #0
 800c820:	bf04      	itt	eq
 800c822:	2100      	moveq	r1, #0
 800c824:	4770      	bxeq	lr
 800c826:	b530      	push	{r4, r5, lr}
 800c828:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800c82c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800c830:	f04f 0500 	mov.w	r5, #0
 800c834:	f04f 0100 	mov.w	r1, #0
 800c838:	e750      	b.n	800c6dc <__adddf3+0x138>
 800c83a:	bf00      	nop

0800c83c <__aeabi_i2d>:
 800c83c:	f090 0f00 	teq	r0, #0
 800c840:	bf04      	itt	eq
 800c842:	2100      	moveq	r1, #0
 800c844:	4770      	bxeq	lr
 800c846:	b530      	push	{r4, r5, lr}
 800c848:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800c84c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800c850:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800c854:	bf48      	it	mi
 800c856:	4240      	negmi	r0, r0
 800c858:	f04f 0100 	mov.w	r1, #0
 800c85c:	e73e      	b.n	800c6dc <__adddf3+0x138>
 800c85e:	bf00      	nop

0800c860 <__aeabi_f2d>:
 800c860:	0042      	lsls	r2, r0, #1
 800c862:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800c866:	ea4f 0131 	mov.w	r1, r1, rrx
 800c86a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800c86e:	bf1f      	itttt	ne
 800c870:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800c874:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800c878:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800c87c:	4770      	bxne	lr
 800c87e:	f092 0f00 	teq	r2, #0
 800c882:	bf14      	ite	ne
 800c884:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800c888:	4770      	bxeq	lr
 800c88a:	b530      	push	{r4, r5, lr}
 800c88c:	f44f 7460 	mov.w	r4, #896	; 0x380
 800c890:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800c894:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800c898:	e720      	b.n	800c6dc <__adddf3+0x138>
 800c89a:	bf00      	nop

0800c89c <__aeabi_ul2d>:
 800c89c:	ea50 0201 	orrs.w	r2, r0, r1
 800c8a0:	bf08      	it	eq
 800c8a2:	4770      	bxeq	lr
 800c8a4:	b530      	push	{r4, r5, lr}
 800c8a6:	f04f 0500 	mov.w	r5, #0
 800c8aa:	e00a      	b.n	800c8c2 <__aeabi_l2d+0x16>

0800c8ac <__aeabi_l2d>:
 800c8ac:	ea50 0201 	orrs.w	r2, r0, r1
 800c8b0:	bf08      	it	eq
 800c8b2:	4770      	bxeq	lr
 800c8b4:	b530      	push	{r4, r5, lr}
 800c8b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800c8ba:	d502      	bpl.n	800c8c2 <__aeabi_l2d+0x16>
 800c8bc:	4240      	negs	r0, r0
 800c8be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800c8c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800c8c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800c8ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800c8ce:	f43f aedc 	beq.w	800c68a <__adddf3+0xe6>
 800c8d2:	f04f 0203 	mov.w	r2, #3
 800c8d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800c8da:	bf18      	it	ne
 800c8dc:	3203      	addne	r2, #3
 800c8de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800c8e2:	bf18      	it	ne
 800c8e4:	3203      	addne	r2, #3
 800c8e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800c8ea:	f1c2 0320 	rsb	r3, r2, #32
 800c8ee:	fa00 fc03 	lsl.w	ip, r0, r3
 800c8f2:	fa20 f002 	lsr.w	r0, r0, r2
 800c8f6:	fa01 fe03 	lsl.w	lr, r1, r3
 800c8fa:	ea40 000e 	orr.w	r0, r0, lr
 800c8fe:	fa21 f102 	lsr.w	r1, r1, r2
 800c902:	4414      	add	r4, r2
 800c904:	e6c1      	b.n	800c68a <__adddf3+0xe6>
 800c906:	bf00      	nop

0800c908 <__aeabi_dmul>:
 800c908:	b570      	push	{r4, r5, r6, lr}
 800c90a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800c90e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800c912:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800c916:	bf1d      	ittte	ne
 800c918:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800c91c:	ea94 0f0c 	teqne	r4, ip
 800c920:	ea95 0f0c 	teqne	r5, ip
 800c924:	f000 f8de 	bleq	800cae4 <__aeabi_dmul+0x1dc>
 800c928:	442c      	add	r4, r5
 800c92a:	ea81 0603 	eor.w	r6, r1, r3
 800c92e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800c932:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800c936:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800c93a:	bf18      	it	ne
 800c93c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800c940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800c944:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c948:	d038      	beq.n	800c9bc <__aeabi_dmul+0xb4>
 800c94a:	fba0 ce02 	umull	ip, lr, r0, r2
 800c94e:	f04f 0500 	mov.w	r5, #0
 800c952:	fbe1 e502 	umlal	lr, r5, r1, r2
 800c956:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800c95a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800c95e:	f04f 0600 	mov.w	r6, #0
 800c962:	fbe1 5603 	umlal	r5, r6, r1, r3
 800c966:	f09c 0f00 	teq	ip, #0
 800c96a:	bf18      	it	ne
 800c96c:	f04e 0e01 	orrne.w	lr, lr, #1
 800c970:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800c974:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800c978:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800c97c:	d204      	bcs.n	800c988 <__aeabi_dmul+0x80>
 800c97e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800c982:	416d      	adcs	r5, r5
 800c984:	eb46 0606 	adc.w	r6, r6, r6
 800c988:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800c98c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800c990:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800c994:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800c998:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800c99c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800c9a0:	bf88      	it	hi
 800c9a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800c9a6:	d81e      	bhi.n	800c9e6 <__aeabi_dmul+0xde>
 800c9a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800c9ac:	bf08      	it	eq
 800c9ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800c9b2:	f150 0000 	adcs.w	r0, r0, #0
 800c9b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800c9ba:	bd70      	pop	{r4, r5, r6, pc}
 800c9bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800c9c0:	ea46 0101 	orr.w	r1, r6, r1
 800c9c4:	ea40 0002 	orr.w	r0, r0, r2
 800c9c8:	ea81 0103 	eor.w	r1, r1, r3
 800c9cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800c9d0:	bfc2      	ittt	gt
 800c9d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 800c9d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800c9da:	bd70      	popgt	{r4, r5, r6, pc}
 800c9dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800c9e0:	f04f 0e00 	mov.w	lr, #0
 800c9e4:	3c01      	subs	r4, #1
 800c9e6:	f300 80ab 	bgt.w	800cb40 <__aeabi_dmul+0x238>
 800c9ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800c9ee:	bfde      	ittt	le
 800c9f0:	2000      	movle	r0, #0
 800c9f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800c9f6:	bd70      	pople	{r4, r5, r6, pc}
 800c9f8:	f1c4 0400 	rsb	r4, r4, #0
 800c9fc:	3c20      	subs	r4, #32
 800c9fe:	da35      	bge.n	800ca6c <__aeabi_dmul+0x164>
 800ca00:	340c      	adds	r4, #12
 800ca02:	dc1b      	bgt.n	800ca3c <__aeabi_dmul+0x134>
 800ca04:	f104 0414 	add.w	r4, r4, #20
 800ca08:	f1c4 0520 	rsb	r5, r4, #32
 800ca0c:	fa00 f305 	lsl.w	r3, r0, r5
 800ca10:	fa20 f004 	lsr.w	r0, r0, r4
 800ca14:	fa01 f205 	lsl.w	r2, r1, r5
 800ca18:	ea40 0002 	orr.w	r0, r0, r2
 800ca1c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800ca20:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800ca24:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800ca28:	fa21 f604 	lsr.w	r6, r1, r4
 800ca2c:	eb42 0106 	adc.w	r1, r2, r6
 800ca30:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800ca34:	bf08      	it	eq
 800ca36:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800ca3a:	bd70      	pop	{r4, r5, r6, pc}
 800ca3c:	f1c4 040c 	rsb	r4, r4, #12
 800ca40:	f1c4 0520 	rsb	r5, r4, #32
 800ca44:	fa00 f304 	lsl.w	r3, r0, r4
 800ca48:	fa20 f005 	lsr.w	r0, r0, r5
 800ca4c:	fa01 f204 	lsl.w	r2, r1, r4
 800ca50:	ea40 0002 	orr.w	r0, r0, r2
 800ca54:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800ca58:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800ca5c:	f141 0100 	adc.w	r1, r1, #0
 800ca60:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800ca64:	bf08      	it	eq
 800ca66:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800ca6a:	bd70      	pop	{r4, r5, r6, pc}
 800ca6c:	f1c4 0520 	rsb	r5, r4, #32
 800ca70:	fa00 f205 	lsl.w	r2, r0, r5
 800ca74:	ea4e 0e02 	orr.w	lr, lr, r2
 800ca78:	fa20 f304 	lsr.w	r3, r0, r4
 800ca7c:	fa01 f205 	lsl.w	r2, r1, r5
 800ca80:	ea43 0302 	orr.w	r3, r3, r2
 800ca84:	fa21 f004 	lsr.w	r0, r1, r4
 800ca88:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800ca8c:	fa21 f204 	lsr.w	r2, r1, r4
 800ca90:	ea20 0002 	bic.w	r0, r0, r2
 800ca94:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800ca98:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800ca9c:	bf08      	it	eq
 800ca9e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800caa2:	bd70      	pop	{r4, r5, r6, pc}
 800caa4:	f094 0f00 	teq	r4, #0
 800caa8:	d10f      	bne.n	800caca <__aeabi_dmul+0x1c2>
 800caaa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800caae:	0040      	lsls	r0, r0, #1
 800cab0:	eb41 0101 	adc.w	r1, r1, r1
 800cab4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800cab8:	bf08      	it	eq
 800caba:	3c01      	subeq	r4, #1
 800cabc:	d0f7      	beq.n	800caae <__aeabi_dmul+0x1a6>
 800cabe:	ea41 0106 	orr.w	r1, r1, r6
 800cac2:	f095 0f00 	teq	r5, #0
 800cac6:	bf18      	it	ne
 800cac8:	4770      	bxne	lr
 800caca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800cace:	0052      	lsls	r2, r2, #1
 800cad0:	eb43 0303 	adc.w	r3, r3, r3
 800cad4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800cad8:	bf08      	it	eq
 800cada:	3d01      	subeq	r5, #1
 800cadc:	d0f7      	beq.n	800cace <__aeabi_dmul+0x1c6>
 800cade:	ea43 0306 	orr.w	r3, r3, r6
 800cae2:	4770      	bx	lr
 800cae4:	ea94 0f0c 	teq	r4, ip
 800cae8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800caec:	bf18      	it	ne
 800caee:	ea95 0f0c 	teqne	r5, ip
 800caf2:	d00c      	beq.n	800cb0e <__aeabi_dmul+0x206>
 800caf4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800caf8:	bf18      	it	ne
 800cafa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800cafe:	d1d1      	bne.n	800caa4 <__aeabi_dmul+0x19c>
 800cb00:	ea81 0103 	eor.w	r1, r1, r3
 800cb04:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800cb08:	f04f 0000 	mov.w	r0, #0
 800cb0c:	bd70      	pop	{r4, r5, r6, pc}
 800cb0e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800cb12:	bf06      	itte	eq
 800cb14:	4610      	moveq	r0, r2
 800cb16:	4619      	moveq	r1, r3
 800cb18:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800cb1c:	d019      	beq.n	800cb52 <__aeabi_dmul+0x24a>
 800cb1e:	ea94 0f0c 	teq	r4, ip
 800cb22:	d102      	bne.n	800cb2a <__aeabi_dmul+0x222>
 800cb24:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800cb28:	d113      	bne.n	800cb52 <__aeabi_dmul+0x24a>
 800cb2a:	ea95 0f0c 	teq	r5, ip
 800cb2e:	d105      	bne.n	800cb3c <__aeabi_dmul+0x234>
 800cb30:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800cb34:	bf1c      	itt	ne
 800cb36:	4610      	movne	r0, r2
 800cb38:	4619      	movne	r1, r3
 800cb3a:	d10a      	bne.n	800cb52 <__aeabi_dmul+0x24a>
 800cb3c:	ea81 0103 	eor.w	r1, r1, r3
 800cb40:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800cb44:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800cb48:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800cb4c:	f04f 0000 	mov.w	r0, #0
 800cb50:	bd70      	pop	{r4, r5, r6, pc}
 800cb52:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800cb56:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800cb5a:	bd70      	pop	{r4, r5, r6, pc}

0800cb5c <__aeabi_ddiv>:
 800cb5c:	b570      	push	{r4, r5, r6, lr}
 800cb5e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800cb62:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800cb66:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800cb6a:	bf1d      	ittte	ne
 800cb6c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800cb70:	ea94 0f0c 	teqne	r4, ip
 800cb74:	ea95 0f0c 	teqne	r5, ip
 800cb78:	f000 f8a7 	bleq	800ccca <__aeabi_ddiv+0x16e>
 800cb7c:	eba4 0405 	sub.w	r4, r4, r5
 800cb80:	ea81 0e03 	eor.w	lr, r1, r3
 800cb84:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800cb88:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800cb8c:	f000 8088 	beq.w	800cca0 <__aeabi_ddiv+0x144>
 800cb90:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800cb94:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800cb98:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800cb9c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800cba0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800cba4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800cba8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800cbac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800cbb0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800cbb4:	429d      	cmp	r5, r3
 800cbb6:	bf08      	it	eq
 800cbb8:	4296      	cmpeq	r6, r2
 800cbba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800cbbe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800cbc2:	d202      	bcs.n	800cbca <__aeabi_ddiv+0x6e>
 800cbc4:	085b      	lsrs	r3, r3, #1
 800cbc6:	ea4f 0232 	mov.w	r2, r2, rrx
 800cbca:	1ab6      	subs	r6, r6, r2
 800cbcc:	eb65 0503 	sbc.w	r5, r5, r3
 800cbd0:	085b      	lsrs	r3, r3, #1
 800cbd2:	ea4f 0232 	mov.w	r2, r2, rrx
 800cbd6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800cbda:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800cbde:	ebb6 0e02 	subs.w	lr, r6, r2
 800cbe2:	eb75 0e03 	sbcs.w	lr, r5, r3
 800cbe6:	bf22      	ittt	cs
 800cbe8:	1ab6      	subcs	r6, r6, r2
 800cbea:	4675      	movcs	r5, lr
 800cbec:	ea40 000c 	orrcs.w	r0, r0, ip
 800cbf0:	085b      	lsrs	r3, r3, #1
 800cbf2:	ea4f 0232 	mov.w	r2, r2, rrx
 800cbf6:	ebb6 0e02 	subs.w	lr, r6, r2
 800cbfa:	eb75 0e03 	sbcs.w	lr, r5, r3
 800cbfe:	bf22      	ittt	cs
 800cc00:	1ab6      	subcs	r6, r6, r2
 800cc02:	4675      	movcs	r5, lr
 800cc04:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800cc08:	085b      	lsrs	r3, r3, #1
 800cc0a:	ea4f 0232 	mov.w	r2, r2, rrx
 800cc0e:	ebb6 0e02 	subs.w	lr, r6, r2
 800cc12:	eb75 0e03 	sbcs.w	lr, r5, r3
 800cc16:	bf22      	ittt	cs
 800cc18:	1ab6      	subcs	r6, r6, r2
 800cc1a:	4675      	movcs	r5, lr
 800cc1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800cc20:	085b      	lsrs	r3, r3, #1
 800cc22:	ea4f 0232 	mov.w	r2, r2, rrx
 800cc26:	ebb6 0e02 	subs.w	lr, r6, r2
 800cc2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800cc2e:	bf22      	ittt	cs
 800cc30:	1ab6      	subcs	r6, r6, r2
 800cc32:	4675      	movcs	r5, lr
 800cc34:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800cc38:	ea55 0e06 	orrs.w	lr, r5, r6
 800cc3c:	d018      	beq.n	800cc70 <__aeabi_ddiv+0x114>
 800cc3e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800cc42:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800cc46:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800cc4a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800cc4e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800cc52:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800cc56:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800cc5a:	d1c0      	bne.n	800cbde <__aeabi_ddiv+0x82>
 800cc5c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800cc60:	d10b      	bne.n	800cc7a <__aeabi_ddiv+0x11e>
 800cc62:	ea41 0100 	orr.w	r1, r1, r0
 800cc66:	f04f 0000 	mov.w	r0, #0
 800cc6a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800cc6e:	e7b6      	b.n	800cbde <__aeabi_ddiv+0x82>
 800cc70:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800cc74:	bf04      	itt	eq
 800cc76:	4301      	orreq	r1, r0
 800cc78:	2000      	moveq	r0, #0
 800cc7a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800cc7e:	bf88      	it	hi
 800cc80:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800cc84:	f63f aeaf 	bhi.w	800c9e6 <__aeabi_dmul+0xde>
 800cc88:	ebb5 0c03 	subs.w	ip, r5, r3
 800cc8c:	bf04      	itt	eq
 800cc8e:	ebb6 0c02 	subseq.w	ip, r6, r2
 800cc92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800cc96:	f150 0000 	adcs.w	r0, r0, #0
 800cc9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800cc9e:	bd70      	pop	{r4, r5, r6, pc}
 800cca0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800cca4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800cca8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800ccac:	bfc2      	ittt	gt
 800ccae:	ebd4 050c 	rsbsgt	r5, r4, ip
 800ccb2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800ccb6:	bd70      	popgt	{r4, r5, r6, pc}
 800ccb8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800ccbc:	f04f 0e00 	mov.w	lr, #0
 800ccc0:	3c01      	subs	r4, #1
 800ccc2:	e690      	b.n	800c9e6 <__aeabi_dmul+0xde>
 800ccc4:	ea45 0e06 	orr.w	lr, r5, r6
 800ccc8:	e68d      	b.n	800c9e6 <__aeabi_dmul+0xde>
 800ccca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800ccce:	ea94 0f0c 	teq	r4, ip
 800ccd2:	bf08      	it	eq
 800ccd4:	ea95 0f0c 	teqeq	r5, ip
 800ccd8:	f43f af3b 	beq.w	800cb52 <__aeabi_dmul+0x24a>
 800ccdc:	ea94 0f0c 	teq	r4, ip
 800cce0:	d10a      	bne.n	800ccf8 <__aeabi_ddiv+0x19c>
 800cce2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800cce6:	f47f af34 	bne.w	800cb52 <__aeabi_dmul+0x24a>
 800ccea:	ea95 0f0c 	teq	r5, ip
 800ccee:	f47f af25 	bne.w	800cb3c <__aeabi_dmul+0x234>
 800ccf2:	4610      	mov	r0, r2
 800ccf4:	4619      	mov	r1, r3
 800ccf6:	e72c      	b.n	800cb52 <__aeabi_dmul+0x24a>
 800ccf8:	ea95 0f0c 	teq	r5, ip
 800ccfc:	d106      	bne.n	800cd0c <__aeabi_ddiv+0x1b0>
 800ccfe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800cd02:	f43f aefd 	beq.w	800cb00 <__aeabi_dmul+0x1f8>
 800cd06:	4610      	mov	r0, r2
 800cd08:	4619      	mov	r1, r3
 800cd0a:	e722      	b.n	800cb52 <__aeabi_dmul+0x24a>
 800cd0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800cd10:	bf18      	it	ne
 800cd12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800cd16:	f47f aec5 	bne.w	800caa4 <__aeabi_dmul+0x19c>
 800cd1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800cd1e:	f47f af0d 	bne.w	800cb3c <__aeabi_dmul+0x234>
 800cd22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800cd26:	f47f aeeb 	bne.w	800cb00 <__aeabi_dmul+0x1f8>
 800cd2a:	e712      	b.n	800cb52 <__aeabi_dmul+0x24a>

0800cd2c <__gedf2>:
 800cd2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800cd30:	e006      	b.n	800cd40 <__cmpdf2+0x4>
 800cd32:	bf00      	nop

0800cd34 <__ledf2>:
 800cd34:	f04f 0c01 	mov.w	ip, #1
 800cd38:	e002      	b.n	800cd40 <__cmpdf2+0x4>
 800cd3a:	bf00      	nop

0800cd3c <__cmpdf2>:
 800cd3c:	f04f 0c01 	mov.w	ip, #1
 800cd40:	f84d cd04 	str.w	ip, [sp, #-4]!
 800cd44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800cd48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800cd4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800cd50:	bf18      	it	ne
 800cd52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800cd56:	d01b      	beq.n	800cd90 <__cmpdf2+0x54>
 800cd58:	b001      	add	sp, #4
 800cd5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800cd5e:	bf0c      	ite	eq
 800cd60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800cd64:	ea91 0f03 	teqne	r1, r3
 800cd68:	bf02      	ittt	eq
 800cd6a:	ea90 0f02 	teqeq	r0, r2
 800cd6e:	2000      	moveq	r0, #0
 800cd70:	4770      	bxeq	lr
 800cd72:	f110 0f00 	cmn.w	r0, #0
 800cd76:	ea91 0f03 	teq	r1, r3
 800cd7a:	bf58      	it	pl
 800cd7c:	4299      	cmppl	r1, r3
 800cd7e:	bf08      	it	eq
 800cd80:	4290      	cmpeq	r0, r2
 800cd82:	bf2c      	ite	cs
 800cd84:	17d8      	asrcs	r0, r3, #31
 800cd86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800cd8a:	f040 0001 	orr.w	r0, r0, #1
 800cd8e:	4770      	bx	lr
 800cd90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800cd94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800cd98:	d102      	bne.n	800cda0 <__cmpdf2+0x64>
 800cd9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800cd9e:	d107      	bne.n	800cdb0 <__cmpdf2+0x74>
 800cda0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800cda4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800cda8:	d1d6      	bne.n	800cd58 <__cmpdf2+0x1c>
 800cdaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800cdae:	d0d3      	beq.n	800cd58 <__cmpdf2+0x1c>
 800cdb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 800cdb4:	4770      	bx	lr
 800cdb6:	bf00      	nop

0800cdb8 <__aeabi_cdrcmple>:
 800cdb8:	4684      	mov	ip, r0
 800cdba:	4610      	mov	r0, r2
 800cdbc:	4662      	mov	r2, ip
 800cdbe:	468c      	mov	ip, r1
 800cdc0:	4619      	mov	r1, r3
 800cdc2:	4663      	mov	r3, ip
 800cdc4:	e000      	b.n	800cdc8 <__aeabi_cdcmpeq>
 800cdc6:	bf00      	nop

0800cdc8 <__aeabi_cdcmpeq>:
 800cdc8:	b501      	push	{r0, lr}
 800cdca:	f7ff ffb7 	bl	800cd3c <__cmpdf2>
 800cdce:	2800      	cmp	r0, #0
 800cdd0:	bf48      	it	mi
 800cdd2:	f110 0f00 	cmnmi.w	r0, #0
 800cdd6:	bd01      	pop	{r0, pc}

0800cdd8 <__aeabi_dcmpeq>:
 800cdd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 800cddc:	f7ff fff4 	bl	800cdc8 <__aeabi_cdcmpeq>
 800cde0:	bf0c      	ite	eq
 800cde2:	2001      	moveq	r0, #1
 800cde4:	2000      	movne	r0, #0
 800cde6:	f85d fb08 	ldr.w	pc, [sp], #8
 800cdea:	bf00      	nop

0800cdec <__aeabi_dcmplt>:
 800cdec:	f84d ed08 	str.w	lr, [sp, #-8]!
 800cdf0:	f7ff ffea 	bl	800cdc8 <__aeabi_cdcmpeq>
 800cdf4:	bf34      	ite	cc
 800cdf6:	2001      	movcc	r0, #1
 800cdf8:	2000      	movcs	r0, #0
 800cdfa:	f85d fb08 	ldr.w	pc, [sp], #8
 800cdfe:	bf00      	nop

0800ce00 <__aeabi_dcmple>:
 800ce00:	f84d ed08 	str.w	lr, [sp, #-8]!
 800ce04:	f7ff ffe0 	bl	800cdc8 <__aeabi_cdcmpeq>
 800ce08:	bf94      	ite	ls
 800ce0a:	2001      	movls	r0, #1
 800ce0c:	2000      	movhi	r0, #0
 800ce0e:	f85d fb08 	ldr.w	pc, [sp], #8
 800ce12:	bf00      	nop

0800ce14 <__aeabi_dcmpge>:
 800ce14:	f84d ed08 	str.w	lr, [sp, #-8]!
 800ce18:	f7ff ffce 	bl	800cdb8 <__aeabi_cdrcmple>
 800ce1c:	bf94      	ite	ls
 800ce1e:	2001      	movls	r0, #1
 800ce20:	2000      	movhi	r0, #0
 800ce22:	f85d fb08 	ldr.w	pc, [sp], #8
 800ce26:	bf00      	nop

0800ce28 <__aeabi_dcmpgt>:
 800ce28:	f84d ed08 	str.w	lr, [sp, #-8]!
 800ce2c:	f7ff ffc4 	bl	800cdb8 <__aeabi_cdrcmple>
 800ce30:	bf34      	ite	cc
 800ce32:	2001      	movcc	r0, #1
 800ce34:	2000      	movcs	r0, #0
 800ce36:	f85d fb08 	ldr.w	pc, [sp], #8
 800ce3a:	bf00      	nop

0800ce3c <__aeabi_d2iz>:
 800ce3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800ce40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800ce44:	d215      	bcs.n	800ce72 <__aeabi_d2iz+0x36>
 800ce46:	d511      	bpl.n	800ce6c <__aeabi_d2iz+0x30>
 800ce48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800ce4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800ce50:	d912      	bls.n	800ce78 <__aeabi_d2iz+0x3c>
 800ce52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800ce56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ce5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800ce5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800ce62:	fa23 f002 	lsr.w	r0, r3, r2
 800ce66:	bf18      	it	ne
 800ce68:	4240      	negne	r0, r0
 800ce6a:	4770      	bx	lr
 800ce6c:	f04f 0000 	mov.w	r0, #0
 800ce70:	4770      	bx	lr
 800ce72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800ce76:	d105      	bne.n	800ce84 <__aeabi_d2iz+0x48>
 800ce78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800ce7c:	bf08      	it	eq
 800ce7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800ce82:	4770      	bx	lr
 800ce84:	f04f 0000 	mov.w	r0, #0
 800ce88:	4770      	bx	lr
 800ce8a:	bf00      	nop

0800ce8c <main>:
#include "ST7032i.h"


ST7032i lcd;

int main(void) {
 800ce8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce90:	b09e      	sub	sp, #120	; 0x78
	uint16_t bits;
	uint32_t intval = 40;
	uint32_t tnow;
	char tmp[92];

	TIM2_timer_start();
 800ce92:	f7f3 f979 	bl	8000188 <TIM2_timer_start>

	usart_begin(&Serial2, PA3, PA2, 19200);
 800ce96:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
 800ce9a:	f44f 7281 	mov.w	r2, #258	; 0x102
 800ce9e:	48c6      	ldr	r0, [pc, #792]	; (800d1b8 <main+0x32c>)
 800cea0:	f240 1103 	movw	r1, #259	; 0x103
 800cea4:	f7f3 fe40 	bl	8000b28 <usart_begin>
	usart_print(&Serial2,
 800cea8:	48c3      	ldr	r0, [pc, #780]	; (800d1b8 <main+0x32c>)
 800ceaa:	49c4      	ldr	r1, [pc, #784]	; (800d1bc <main+0x330>)
 800ceac:	f7f3 ffb0 	bl	8000e10 <usart_print>
			"Happy are those who know they are spiritually poor; \n");
	usart_print(&Serial2, "The kingdom of heaven belongs to them!\n");
 800ceb0:	48c1      	ldr	r0, [pc, #772]	; (800d1b8 <main+0x32c>)
 800ceb2:	49c3      	ldr	r1, [pc, #780]	; (800d1c0 <main+0x334>)
 800ceb4:	f7f3 ffac 	bl	8000e10 <usart_print>
	usart_print(&Serial2, "How many eyes does Mississipi river have?\n");
 800ceb8:	48bf      	ldr	r0, [pc, #764]	; (800d1b8 <main+0x32c>)
 800ceba:	49c2      	ldr	r1, [pc, #776]	; (800d1c4 <main+0x338>)
 800cebc:	f7f3 ffa8 	bl	8000e10 <usart_print>
	usart_print(&Serial2, "Quick brown fox jumped over the lazy dog!\n");
 800cec0:	49c1      	ldr	r1, [pc, #772]	; (800d1c8 <main+0x33c>)
 800cec2:	48bd      	ldr	r0, [pc, #756]	; (800d1b8 <main+0x32c>)
 800cec4:	f7f3 ffa4 	bl	8000e10 <usart_print>
	usart_flush(&Serial2);
 800cec8:	48bb      	ldr	r0, [pc, #748]	; (800d1b8 <main+0x32c>)

	RCC_ClocksTypeDef RCC_Clocks;
	RCC_GetClocksFreq(&RCC_Clocks);

	sprintf(tmp, "SYSCLK = %ld, ", RCC_Clocks.SYSCLK_Frequency);
 800ceca:	ac03      	add	r4, sp, #12
	usart_print(&Serial2,
			"Happy are those who know they are spiritually poor; \n");
	usart_print(&Serial2, "The kingdom of heaven belongs to them!\n");
	usart_print(&Serial2, "How many eyes does Mississipi river have?\n");
	usart_print(&Serial2, "Quick brown fox jumped over the lazy dog!\n");
	usart_flush(&Serial2);
 800cecc:	f7f3 ffba 	bl	8000e44 <usart_flush>

	RCC_ClocksTypeDef RCC_Clocks;
	RCC_GetClocksFreq(&RCC_Clocks);
 800ced0:	a81a      	add	r0, sp, #104	; 0x68
 800ced2:	f7f7 ff29 	bl	8004d28 <RCC_GetClocksFreq>

	sprintf(tmp, "SYSCLK = %ld, ", RCC_Clocks.SYSCLK_Frequency);
 800ced6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ced8:	49bc      	ldr	r1, [pc, #752]	; (800d1cc <main+0x340>)
 800ceda:	4620      	mov	r0, r4
 800cedc:	f7fb f824 	bl	8007f28 <sprintf>
	usart_print(&Serial2, tmp);
 800cee0:	4621      	mov	r1, r4
 800cee2:	48b5      	ldr	r0, [pc, #724]	; (800d1b8 <main+0x32c>)
 800cee4:	f7f3 ff94 	bl	8000e10 <usart_print>
	sprintf(tmp, "HCLK = %ld, ", RCC_Clocks.HCLK_Frequency);
 800cee8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800ceea:	49b9      	ldr	r1, [pc, #740]	; (800d1d0 <main+0x344>)
 800ceec:	4620      	mov	r0, r4
 800ceee:	f7fb f81b 	bl	8007f28 <sprintf>
	usart_print(&Serial2, tmp);
 800cef2:	4621      	mov	r1, r4
 800cef4:	48b0      	ldr	r0, [pc, #704]	; (800d1b8 <main+0x32c>)
 800cef6:	f7f3 ff8b 	bl	8000e10 <usart_print>
	sprintf(tmp, "PCLK1 = %ld, ", RCC_Clocks.PCLK1_Frequency);
 800cefa:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800cefc:	49b5      	ldr	r1, [pc, #724]	; (800d1d4 <main+0x348>)
 800cefe:	4620      	mov	r0, r4
 800cf00:	f7fb f812 	bl	8007f28 <sprintf>
	usart_print(&Serial2, tmp);
 800cf04:	4621      	mov	r1, r4
 800cf06:	48ac      	ldr	r0, [pc, #688]	; (800d1b8 <main+0x32c>)
 800cf08:	f7f3 ff82 	bl	8000e10 <usart_print>
	sprintf(tmp, "PCLK2 = %ld\r\n", RCC_Clocks.PCLK2_Frequency);
 800cf0c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800cf0e:	49b2      	ldr	r1, [pc, #712]	; (800d1d8 <main+0x34c>)
 800cf10:	4620      	mov	r0, r4
 800cf12:	f7fb f809 	bl	8007f28 <sprintf>
	usart_print(&Serial2, tmp);
 800cf16:	4621      	mov	r1, r4
 800cf18:	48a7      	ldr	r0, [pc, #668]	; (800d1b8 <main+0x32c>)
 800cf1a:	f7f3 ff79 	bl	8000e10 <usart_print>
//	usart_flush(USART2Serial);

	GPIOMode(PinPort(PD12),
 800cf1e:	f240 400c 	movw	r0, #1036	; 0x40c
 800cf22:	f7f3 f9cd 	bl	80002c0 <PinPort>
 800cf26:	4606      	mov	r6, r0
			(PinBit(PD12) | PinBit(PD13) | PinBit(PD14) | PinBit(PD15)), OUTPUT,
 800cf28:	f240 400c 	movw	r0, #1036	; 0x40c
 800cf2c:	f7f3 f9d2 	bl	80002d4 <PinBit>
 800cf30:	4605      	mov	r5, r0
 800cf32:	f240 400d 	movw	r0, #1037	; 0x40d
 800cf36:	f7f3 f9cd 	bl	80002d4 <PinBit>
	usart_print(&Serial2, tmp);
	sprintf(tmp, "PCLK2 = %ld\r\n", RCC_Clocks.PCLK2_Frequency);
	usart_print(&Serial2, tmp);
//	usart_flush(USART2Serial);

	GPIOMode(PinPort(PD12),
 800cf3a:	4305      	orrs	r5, r0
			(PinBit(PD12) | PinBit(PD13) | PinBit(PD14) | PinBit(PD15)), OUTPUT,
 800cf3c:	f240 400e 	movw	r0, #1038	; 0x40e
 800cf40:	f7f3 f9c8 	bl	80002d4 <PinBit>
	usart_print(&Serial2, tmp);
	sprintf(tmp, "PCLK2 = %ld\r\n", RCC_Clocks.PCLK2_Frequency);
	usart_print(&Serial2, tmp);
//	usart_flush(USART2Serial);

	GPIOMode(PinPort(PD12),
 800cf44:	b2ad      	uxth	r5, r5
 800cf46:	4305      	orrs	r5, r0
			(PinBit(PD12) | PinBit(PD13) | PinBit(PD14) | PinBit(PD15)), OUTPUT,
 800cf48:	f240 400f 	movw	r0, #1039	; 0x40f
 800cf4c:	f7f3 f9c2 	bl	80002d4 <PinBit>
	usart_print(&Serial2, tmp);
	sprintf(tmp, "PCLK2 = %ld\r\n", RCC_Clocks.PCLK2_Frequency);
	usart_print(&Serial2, tmp);
//	usart_flush(USART2Serial);

	GPIOMode(PinPort(PD12),
 800cf50:	b2ad      	uxth	r5, r5
 800cf52:	ea45 0100 	orr.w	r1, r5, r0
 800cf56:	2201      	movs	r2, #1
 800cf58:	2500      	movs	r5, #0
 800cf5a:	4630      	mov	r0, r6
 800cf5c:	2302      	movs	r3, #2
 800cf5e:	b289      	uxth	r1, r1
 800cf60:	9500      	str	r5, [sp, #0]
 800cf62:	9501      	str	r5, [sp, #4]
 800cf64:	f7f3 fa24 	bl	80003b0 <GPIOMode>
			(PinBit(PD12) | PinBit(PD13) | PinBit(PD14) | PinBit(PD15)), OUTPUT,
			FASTSPEED, PUSHPULL, NOPULL);
	spi_begin(SPI2, PB13, PB14, PB15, PB12);
 800cf68:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 800cf6c:	f240 220e 	movw	r2, #526	; 0x20e
 800cf70:	f240 230f 	movw	r3, #527	; 0x20f
 800cf74:	f44f 7503 	mov.w	r5, #524	; 0x20c
 800cf78:	f240 210d 	movw	r1, #525	; 0x20d
 800cf7c:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800cf80:	9500      	str	r5, [sp, #0]
 800cf82:	f7f3 fc4f 	bl	8000824 <spi_begin>
	digitalWrite(PB12, HIGH);
 800cf86:	4628      	mov	r0, r5
 800cf88:	2101      	movs	r1, #1
 800cf8a:	f7f3 f9d7 	bl	800033c <digitalWrite>

	i2c_begin(&Wire1, 100000);
 800cf8e:	f248 61a0 	movw	r1, #34464	; 0x86a0
 800cf92:	f2c0 0101 	movt	r1, #1
 800cf96:	4891      	ldr	r0, [pc, #580]	; (800d1dc <main+0x350>)
 800cf98:	f7f3 fa8a 	bl	80004b0 <i2c_begin>
	ST7032i_init(&lcd, &Wire1);
 800cf9c:	498f      	ldr	r1, [pc, #572]	; (800d1dc <main+0x350>)
 800cf9e:	4890      	ldr	r0, [pc, #576]	; (800d1e0 <main+0x354>)
 800cfa0:	f7fa fbf6 	bl	8007790 <ST7032i_init>
	ST7032i_begin(&lcd);
 800cfa4:	488e      	ldr	r0, [pc, #568]	; (800d1e0 <main+0x354>)
 800cfa6:	f7fa fcaf 	bl	8007908 <ST7032i_begin>
	ST7032i_setContrast(&lcd, 46);
 800cfaa:	212e      	movs	r1, #46	; 0x2e
 800cfac:	488c      	ldr	r0, [pc, #560]	; (800d1e0 <main+0x354>)
 800cfae:	f7fa fc37 	bl	8007820 <ST7032i_setContrast>
	ST7032i_print(&lcd, "Hi there!");       // Classic Hello World!
 800cfb2:	498c      	ldr	r1, [pc, #560]	; (800d1e4 <main+0x358>)
 800cfb4:	488a      	ldr	r0, [pc, #552]	; (800d1e0 <main+0x354>)
 800cfb6:	f7fa fc21 	bl	80077fc <ST7032i_print>

	bits = GPIO_ReadOutputData(GPIOD );
 800cfba:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800cfbe:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800cfc2:	f7f6 fff3 	bl	8003fac <GPIO_ReadOutputData>
 800cfc6:	4605      	mov	r5, r0
	GPIOWrite(GPIOD, PinBit(PD13) | (bits & 0x0fff));
 800cfc8:	f240 400d 	movw	r0, #1037	; 0x40d
 800cfcc:	f7f3 f982 	bl	80002d4 <PinBit>
 800cfd0:	0529      	lsls	r1, r5, #20
 800cfd2:	ea40 5111 	orr.w	r1, r0, r1, lsr #20
 800cfd6:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800cfda:	b289      	uxth	r1, r1
 800cfdc:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800cfe0:	f7f3 fa64 	bl	80004ac <GPIOWrite>
	delay_ms(intval);
 800cfe4:	2028      	movs	r0, #40	; 0x28
 800cfe6:	f7f3 f92f 	bl	8000248 <delay_ms>
	tnow = millis() / 1000;
 800cfea:	f7f3 f927 	bl	800023c <millis>
	while (tnow == millis() / 1000)
 800cfee:	f644 55d3 	movw	r5, #19923	; 0x4dd3
	ST7032i_print(&lcd, "Hi there!");       // Classic Hello World!

	bits = GPIO_ReadOutputData(GPIOD );
	GPIOWrite(GPIOD, PinBit(PD13) | (bits & 0x0fff));
	delay_ms(intval);
	tnow = millis() / 1000;
 800cff2:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 800cff6:	fbb0 f6f6 	udiv	r6, r0, r6
	while (tnow == millis() / 1000)
 800cffa:	f2c1 0562 	movt	r5, #4194	; 0x1062
 800cffe:	f7f3 f91d 	bl	800023c <millis>
 800d002:	fba5 1300 	umull	r1, r3, r5, r0
 800d006:	ebb6 1f93 	cmp.w	r6, r3, lsr #6
 800d00a:	d0f8      	beq.n	800cffe <main+0x172>
		;
	tnow = millis() / 1000;
 800d00c:	f7f3 f916 	bl	800023c <millis>
			bits |= PinBit(PD13);
			break;
		}
		GPIOWrite(GPIOD, bits);

		while (tnow == millis() / 1000);
 800d010:	f644 56d3 	movw	r6, #19923	; 0x4dd3
	GPIOWrite(GPIOD, PinBit(PD13) | (bits & 0x0fff));
	delay_ms(intval);
	tnow = millis() / 1000;
	while (tnow == millis() / 1000)
		;
	tnow = millis() / 1000;
 800d014:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 800d018:	fbb0 f5f5 	udiv	r5, r0, r5
			bits |= PinBit(PD13);
			break;
		}
		GPIOWrite(GPIOD, bits);

		while (tnow == millis() / 1000);
 800d01c:	f2c1 0662 	movt	r6, #4194	; 0x1062
	while (tnow == millis() / 1000)
		;
	tnow = millis() / 1000;

	while (1) {
		bits = GPIO_ReadOutputData(GPIOD );
 800d020:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800d024:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800d028:	f7f6 ffc0 	bl	8003fac <GPIO_ReadOutputData>
 800d02c:	4607      	mov	r7, r0

		GPIOWrite(GPIOD, PinBit(PD13) | (bits & 0x0fff));
 800d02e:	f240 400d 	movw	r0, #1037	; 0x40d
 800d032:	f7f3 f94f 	bl	80002d4 <PinBit>
 800d036:	053f      	lsls	r7, r7, #20
 800d038:	0d3f      	lsrs	r7, r7, #20
 800d03a:	ea47 0100 	orr.w	r1, r7, r0
 800d03e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800d042:	b289      	uxth	r1, r1
 800d044:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800d048:	f7f3 fa30 	bl	80004ac <GPIOWrite>
		delay_ms(intval);
 800d04c:	2028      	movs	r0, #40	; 0x28
 800d04e:	f7f3 f8fb 	bl	8000248 <delay_ms>
		GPIOWrite(GPIOD, PinBit(PD14) | (bits & 0x0fff));
 800d052:	f240 400e 	movw	r0, #1038	; 0x40e
 800d056:	f7f3 f93d 	bl	80002d4 <PinBit>
 800d05a:	ea47 0100 	orr.w	r1, r7, r0
 800d05e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800d062:	b289      	uxth	r1, r1
 800d064:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800d068:	f7f3 fa20 	bl	80004ac <GPIOWrite>
		delay_ms(intval);
 800d06c:	2028      	movs	r0, #40	; 0x28
 800d06e:	f7f3 f8eb 	bl	8000248 <delay_ms>
		GPIOWrite(GPIOD, PinBit(PD15) | (bits & 0x0fff));
 800d072:	f240 400f 	movw	r0, #1039	; 0x40f
 800d076:	f7f3 f92d 	bl	80002d4 <PinBit>
 800d07a:	ea47 0100 	orr.w	r1, r7, r0
 800d07e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800d082:	b289      	uxth	r1, r1
 800d084:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800d088:	f7f3 fa10 	bl	80004ac <GPIOWrite>
		delay_ms(intval);
 800d08c:	2028      	movs	r0, #40	; 0x28
 800d08e:	f7f3 f8db 	bl	8000248 <delay_ms>
		GPIOWrite(GPIOD, PinBit(PD12) | (bits & 0x0fff));
 800d092:	f240 400c 	movw	r0, #1036	; 0x40c
 800d096:	f7f3 f91d 	bl	80002d4 <PinBit>
 800d09a:	ea47 0100 	orr.w	r1, r7, r0
 800d09e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800d0a2:	b289      	uxth	r1, r1
 800d0a4:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800d0a8:	f7f3 fa00 	bl	80004ac <GPIOWrite>
		delay_ms(intval);
 800d0ac:	2028      	movs	r0, #40	; 0x28
 800d0ae:	f7f3 f8cb 	bl	8000248 <delay_ms>
		//
		bits &= 0x0fff;
		switch ((tnow % 60) / 15) {
 800d0b2:	f648 0389 	movw	r3, #34953	; 0x8889
 800d0b6:	f6c8 0388 	movt	r3, #34952	; 0x8888
 800d0ba:	fba3 1205 	umull	r1, r2, r3, r5
 800d0be:	0952      	lsrs	r2, r2, #5
 800d0c0:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 800d0c4:	eba5 0282 	sub.w	r2, r5, r2, lsl #2
 800d0c8:	fba3 1302 	umull	r1, r3, r3, r2
 800d0cc:	08db      	lsrs	r3, r3, #3
 800d0ce:	2b02      	cmp	r3, #2
 800d0d0:	f000 8096 	beq.w	800d200 <main+0x374>
 800d0d4:	2b03      	cmp	r3, #3
 800d0d6:	f000 808d 	beq.w	800d1f4 <main+0x368>
 800d0da:	2b01      	cmp	r3, #1
 800d0dc:	f000 8096 	beq.w	800d20c <main+0x380>
			bits |= PinBit(PD15);
		case 1:
			bits |= PinBit(PD14);
		case 0:
		default:
			bits |= PinBit(PD13);
 800d0e0:	f240 400d 	movw	r0, #1037	; 0x40d
 800d0e4:	f7f3 f8f6 	bl	80002d4 <PinBit>
 800d0e8:	4307      	orrs	r7, r0
			break;
		}
		GPIOWrite(GPIOD, bits);
 800d0ea:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800d0ee:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800d0f2:	b2b9      	uxth	r1, r7
 800d0f4:	f7f3 f9da 	bl	80004ac <GPIOWrite>

		while (tnow == millis() / 1000);
 800d0f8:	f7f3 f8a0 	bl	800023c <millis>
 800d0fc:	fba6 2000 	umull	r2, r0, r6, r0
 800d100:	f644 57d3 	movw	r7, #19923	; 0x4dd3
 800d104:	ebb5 1f90 	cmp.w	r5, r0, lsr #6
 800d108:	f2c1 0762 	movt	r7, #4194	; 0x1062
 800d10c:	d0f4      	beq.n	800d0f8 <main+0x26c>
		tnow = millis() / 1000;
 800d10e:	f7f3 f895 	bl	800023c <millis>
 800d112:	fba7 3500 	umull	r3, r5, r7, r0

		sprintf(tmp, "%04ld", millis());
 800d116:	f7f3 f891 	bl	800023c <millis>
 800d11a:	4933      	ldr	r1, [pc, #204]	; (800d1e8 <main+0x35c>)
 800d11c:	4602      	mov	r2, r0
 800d11e:	4620      	mov	r0, r4
 800d120:	f7fa ff02 	bl	8007f28 <sprintf>
		usart_print(&Serial2, tmp);
 800d124:	4824      	ldr	r0, [pc, #144]	; (800d1b8 <main+0x32c>)
 800d126:	4621      	mov	r1, r4
 800d128:	f7f3 fe72 	bl	8000e10 <usart_print>
		usart_print(&Serial2, "\n");
 800d12c:	4822      	ldr	r0, [pc, #136]	; (800d1b8 <main+0x32c>)
 800d12e:	492f      	ldr	r1, [pc, #188]	; (800d1ec <main+0x360>)
 800d130:	f7f3 fe6e 	bl	8000e10 <usart_print>

		ST7032i_setCursor(&lcd, 0, 1);
 800d134:	2201      	movs	r2, #1
 800d136:	482a      	ldr	r0, [pc, #168]	; (800d1e0 <main+0x354>)
 800d138:	2100      	movs	r1, #0
 800d13a:	f7fa fbb1 	bl	80078a0 <ST7032i_setCursor>
		ST7032i_print(&lcd, tmp);
 800d13e:	4621      	mov	r1, r4
 800d140:	4827      	ldr	r0, [pc, #156]	; (800d1e0 <main+0x354>)
 800d142:	f7fa fb5b 	bl	80077fc <ST7032i_print>

		digitalWrite(PB12, LOW);
 800d146:	f44f 7003 	mov.w	r0, #524	; 0x20c
 800d14a:	2100      	movs	r1, #0
 800d14c:	f7f3 f8f6 	bl	800033c <digitalWrite>
		spi_transfer(SPI2, (uint8_t *) tmp, 8);
 800d150:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 800d154:	2208      	movs	r2, #8
 800d156:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800d15a:	4621      	mov	r1, r4
 800d15c:	f7f3 fc26 	bl	80009ac <spi_transfer>
		digitalWrite(PB12, HIGH);
 800d160:	f44f 7003 	mov.w	r0, #524	; 0x20c
 800d164:	2101      	movs	r1, #1
 800d166:	f7f3 f8e9 	bl	800033c <digitalWrite>
		/*
		 dval = (uint32) (100.0f + 64*sinf( (count % (uint32)(3.14159 * 2 * 32))/32.0f));
		 usart3.println(dval);
		 */
		uint16_t i = 0;
		if (usart_available(&Serial2) > 0) {
 800d16a:	4813      	ldr	r0, [pc, #76]	; (800d1b8 <main+0x32c>)
 800d16c:	f7f3 fe90 	bl	8000e90 <usart_available>
			break;
		}
		GPIOWrite(GPIOD, bits);

		while (tnow == millis() / 1000);
		tnow = millis() / 1000;
 800d170:	09ad      	lsrs	r5, r5, #6
		/*
		 dval = (uint32) (100.0f + 64*sinf( (count % (uint32)(3.14159 * 2 * 32))/32.0f));
		 usart3.println(dval);
		 */
		uint16_t i = 0;
		if (usart_available(&Serial2) > 0) {
 800d172:	2700      	movs	r7, #0
 800d174:	b938      	cbnz	r0, 800d186 <main+0x2fa>
 800d176:	e753      	b.n	800d020 <main+0x194>
			while (usart_available(&Serial2) > 0 && i < 92) {
 800d178:	2f5c      	cmp	r7, #92	; 0x5c
				tmp[i++] = (char) usart_read(&Serial2);
 800d17a:	480f      	ldr	r0, [pc, #60]	; (800d1b8 <main+0x32c>)
		 dval = (uint32) (100.0f + 64*sinf( (count % (uint32)(3.14159 * 2 * 32))/32.0f));
		 usart3.println(dval);
		 */
		uint16_t i = 0;
		if (usart_available(&Serial2) > 0) {
			while (usart_available(&Serial2) > 0 && i < 92) {
 800d17c:	d04d      	beq.n	800d21a <main+0x38e>
				tmp[i++] = (char) usart_read(&Serial2);
 800d17e:	f7f3 fe57 	bl	8000e30 <usart_read>
 800d182:	55e0      	strb	r0, [r4, r7]
 800d184:	3701      	adds	r7, #1
		 dval = (uint32) (100.0f + 64*sinf( (count % (uint32)(3.14159 * 2 * 32))/32.0f));
		 usart3.println(dval);
		 */
		uint16_t i = 0;
		if (usart_available(&Serial2) > 0) {
			while (usart_available(&Serial2) > 0 && i < 92) {
 800d186:	480c      	ldr	r0, [pc, #48]	; (800d1b8 <main+0x32c>)
				tmp[i++] = (char) usart_read(&Serial2);
 800d188:	fa1f f887 	uxth.w	r8, r7
		 dval = (uint32) (100.0f + 64*sinf( (count % (uint32)(3.14159 * 2 * 32))/32.0f));
		 usart3.println(dval);
		 */
		uint16_t i = 0;
		if (usart_available(&Serial2) > 0) {
			while (usart_available(&Serial2) > 0 && i < 92) {
 800d18c:	f7f3 fe80 	bl	8000e90 <usart_available>
 800d190:	2800      	cmp	r0, #0
 800d192:	d1f1      	bne.n	800d178 <main+0x2ec>
				tmp[i++] = (char) usart_read(&Serial2);
			}
			tmp[i] = 0;
 800d194:	a91e      	add	r1, sp, #120	; 0x78
 800d196:	4488      	add	r8, r1
 800d198:	2300      	movs	r3, #0
 800d19a:	f808 3c6c 	strb.w	r3, [r8, #-108]
			usart_print(&Serial2, "> ");
 800d19e:	4806      	ldr	r0, [pc, #24]	; (800d1b8 <main+0x32c>)
 800d1a0:	4913      	ldr	r1, [pc, #76]	; (800d1f0 <main+0x364>)
 800d1a2:	f7f3 fe35 	bl	8000e10 <usart_print>
			usart_print(&Serial2, tmp);
 800d1a6:	4621      	mov	r1, r4
 800d1a8:	4803      	ldr	r0, [pc, #12]	; (800d1b8 <main+0x32c>)
 800d1aa:	f7f3 fe31 	bl	8000e10 <usart_print>
			usart_print(&Serial2, "\n");
 800d1ae:	4802      	ldr	r0, [pc, #8]	; (800d1b8 <main+0x32c>)
 800d1b0:	490e      	ldr	r1, [pc, #56]	; (800d1ec <main+0x360>)
 800d1b2:	f7f3 fe2d 	bl	8000e10 <usart_print>
 800d1b6:	e733      	b.n	800d020 <main+0x194>
 800d1b8:	2000166c 	.word	0x2000166c
 800d1bc:	0800d3e8 	.word	0x0800d3e8
 800d1c0:	0800d420 	.word	0x0800d420
 800d1c4:	0800d448 	.word	0x0800d448
 800d1c8:	0800d474 	.word	0x0800d474
 800d1cc:	0800d4a0 	.word	0x0800d4a0
 800d1d0:	0800d4b0 	.word	0x0800d4b0
 800d1d4:	0800d4c0 	.word	0x0800d4c0
 800d1d8:	0800d4d0 	.word	0x0800d4d0
 800d1dc:	200009ac 	.word	0x200009ac
 800d1e0:	2000167c 	.word	0x2000167c
 800d1e4:	0800d4e0 	.word	0x0800d4e0
 800d1e8:	0800d4ec 	.word	0x0800d4ec
 800d1ec:	0800d4dc 	.word	0x0800d4dc
 800d1f0:	0800d4f4 	.word	0x0800d4f4
		delay_ms(intval);
		//
		bits &= 0x0fff;
		switch ((tnow % 60) / 15) {
		case 3:
			bits |= PinBit(PD12);
 800d1f4:	f240 400c 	movw	r0, #1036	; 0x40c
 800d1f8:	f7f3 f86c 	bl	80002d4 <PinBit>
 800d1fc:	4307      	orrs	r7, r0
 800d1fe:	b2bf      	uxth	r7, r7
		case 2:
			bits |= PinBit(PD15);
 800d200:	f240 400f 	movw	r0, #1039	; 0x40f
 800d204:	f7f3 f866 	bl	80002d4 <PinBit>
 800d208:	4307      	orrs	r7, r0
 800d20a:	b2bf      	uxth	r7, r7
		case 1:
			bits |= PinBit(PD14);
 800d20c:	f240 400e 	movw	r0, #1038	; 0x40e
 800d210:	f7f3 f860 	bl	80002d4 <PinBit>
 800d214:	4307      	orrs	r7, r0
 800d216:	b2bf      	uxth	r7, r7
 800d218:	e762      	b.n	800d0e0 <main+0x254>
		 dval = (uint32) (100.0f + 64*sinf( (count % (uint32)(3.14159 * 2 * 32))/32.0f));
		 usart3.println(dval);
		 */
		uint16_t i = 0;
		if (usart_available(&Serial2) > 0) {
			while (usart_available(&Serial2) > 0 && i < 92) {
 800d21a:	46b8      	mov	r8, r7
 800d21c:	e7ba      	b.n	800d194 <main+0x308>
 800d21e:	bf00      	nop

0800d220 <Reset_Handler>:
 800d220:	2100      	movs	r1, #0
 800d222:	e003      	b.n	800d22c <LoopCopyDataInit>

0800d224 <CopyDataInit>:
 800d224:	4b0a      	ldr	r3, [pc, #40]	; (800d250 <LoopFillZerobss+0x10>)
 800d226:	585b      	ldr	r3, [r3, r1]
 800d228:	5043      	str	r3, [r0, r1]
 800d22a:	3104      	adds	r1, #4

0800d22c <LoopCopyDataInit>:
 800d22c:	4809      	ldr	r0, [pc, #36]	; (800d254 <LoopFillZerobss+0x14>)
 800d22e:	4b0a      	ldr	r3, [pc, #40]	; (800d258 <LoopFillZerobss+0x18>)
 800d230:	1842      	adds	r2, r0, r1
 800d232:	429a      	cmp	r2, r3
 800d234:	d3f6      	bcc.n	800d224 <CopyDataInit>
 800d236:	4a09      	ldr	r2, [pc, #36]	; (800d25c <LoopFillZerobss+0x1c>)
 800d238:	e002      	b.n	800d240 <LoopFillZerobss>

0800d23a <FillZerobss>:
 800d23a:	2300      	movs	r3, #0
 800d23c:	f842 3b04 	str.w	r3, [r2], #4

0800d240 <LoopFillZerobss>:
 800d240:	4b07      	ldr	r3, [pc, #28]	; (800d260 <LoopFillZerobss+0x20>)
 800d242:	429a      	cmp	r2, r3
 800d244:	d3f9      	bcc.n	800d23a <FillZerobss>
 800d246:	f7fa fd07 	bl	8007c58 <SystemInit>
 800d24a:	f7ff fe1f 	bl	800ce8c <main>
 800d24e:	4770      	bx	lr
 800d250:	0800d580 	.word	0x0800d580
 800d254:	20000000 	.word	0x20000000
 800d258:	2000095c 	.word	0x2000095c
 800d25c:	2000095c 	.word	0x2000095c
 800d260:	20001690 	.word	0x20001690

0800d264 <ADC_IRQHandler>:
 800d264:	e7fe      	b.n	800d264 <ADC_IRQHandler>
 800d266:	0000      	movs	r0, r0
 800d268:	00000000 	.word	0x00000000
 800d26c:	00000040 	.word	0x00000040
 800d270:	00000014 	.word	0x00000014
 800d274:	00000054 	.word	0x00000054

0800d278 <blanks.3927>:
 800d278:	20202020 20202020 20202020 20202020                     

0800d288 <zeroes.3928>:
 800d288:	30303030 30303030 30303030 30303030     0000000000000000

0800d298 <_global_impure_ptr>:
 800d298:	200000a8 00000000                       ... ....

0800d2a0 <p05.2449>:
 800d2a0:	00000005 00000019 0000007d 00000000     ........}.......

0800d2b0 <__mprec_tens>:
 800d2b0:	00000000 3ff00000 00000000 40240000     .......?......$@
 800d2c0:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
 800d2d0:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
 800d2e0:	00000000 412e8480 00000000 416312d0     .......A......cA
 800d2f0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
 800d300:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
 800d310:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
 800d320:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
 800d330:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
 800d340:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
 800d350:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
 800d360:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
 800d370:	79d99db4 44ea7843                       ...yCx.D

0800d378 <__mprec_tinytens>:
 800d378:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
 800d388:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
 800d398:	64ac6f43 0ac80628                       Co.d(...

0800d3a0 <__mprec_bigtens>:
 800d3a0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
 800d3b0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
 800d3c0:	7f73bf3c 75154fdd                       <.s..O.u

0800d3c8 <blanks.3871>:
 800d3c8:	20202020 20202020 20202020 20202020                     

0800d3d8 <zeroes.3872>:
 800d3d8:	30303030 30303030 30303030 30303030     0000000000000000
 800d3e8:	70706148 72612079 68742065 2065736f     Happy are those 
 800d3f8:	206f6877 776f6e6b 65687420 72612079     who know they ar
 800d408:	70732065 74697269 6c6c6175 6f702079     e spiritually po
 800d418:	203b726f 0000000a 20656854 676e696b     or; ....The king
 800d428:	206d6f64 6820666f 65766165 6562206e     dom of heaven be
 800d438:	676e6f6c 6f742073 65687420 000a216d     longs to them!..
 800d448:	20776f48 796e616d 65796520 6f642073     How many eyes do
 800d458:	4d207365 69737369 70697373 69722069     es Mississipi ri
 800d468:	20726576 65766168 00000a3f 63697551     ver have?...Quic
 800d478:	7262206b 206e776f 20786f66 706d756a     k brown fox jump
 800d488:	6f206465 20726576 20656874 797a616c     ed over the lazy
 800d498:	676f6420 00000a21 43535953 3d204b4c      dog!...SYSCLK =
 800d4a8:	646c2520 0000202c 4b4c4348 25203d20      %ld, ..HCLK = %
 800d4b8:	202c646c 00000000 4b4c4350 203d2031     ld, ....PCLK1 = 
 800d4c8:	2c646c25 00000020 4b4c4350 203d2032     %ld, ...PCLK2 = 
 800d4d8:	0d646c25 0000000a 74206948 65726568     %ld.....Hi there
 800d4e8:	00000021 6c343025 00000064 0000203e     !...%04ld...> ..
 800d4f8:	70616548 646e6120 61747320 63206b63     Heap and stack c
 800d508:	696c6c6f 6e6f6973 0000000a 74697865     ollision....exit
 800d518:	00000000 00464e49 00666e69 004e414e     ....INF.inf.NAN.
 800d528:	006e616e 33323130 37363534 42413938     nan.0123456789AB
 800d538:	46454443 00000000 33323130 37363534     CDEF....01234567
 800d548:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
 800d558:	0000296c 00000030 69666e49 7974696e     l)..0...Infinity
 800d568:	00000000 004e614e 00000043 49534f50     ....NaN.C...POSI
 800d578:	00000058 0000002e                       X.......
