
stm32f4-stdperiph.elf:     file format elf32-littlearm


Disassembly of section .text:

08000188 <TIM2_timer_start>:
/**
 * @brief  millisecond
 * @param  none
 * @retval None
 */
void TIM2_timer_start(void) {
 8000188:	b570      	push	{r4, r5, r6, lr}
 800018a:	b088      	sub	sp, #32
	// TIM_TimeBaseInitTypeDef's order is {uint16_t TIM_Prescaler, uint16_t TIM_CounterMode, uint16_t TIM_Period, uint16_t TIM_ClockDivision, uint8_t TIM_RepetitionCounter}
	TIM_TimeBaseInitTypeDef TimeBaseStructure;
//			= { 84, TIM_CounterMode_Up, 999, TIM_CKD_DIV1, 0 };

	RCC_ClocksTypeDef RCC_Clocks;
	RCC_GetClocksFreq(&RCC_Clocks);
 800018c:	4668      	mov	r0, sp
 800018e:	f001 fc91 	bl	8001ab4 <RCC_GetClocksFreq>
	TimeBaseStructure.TIM_Prescaler = (RCC_Clocks.SYSCLK_Frequency>>1)/1000000L ;
 8000192:	9b00      	ldr	r3, [sp, #0]
 8000194:	f64d 6283 	movw	r2, #56963	; 0xde83
 8000198:	f2c4 321b 	movt	r2, #17179	; 0x431b
 800019c:	085b      	lsrs	r3, r3, #1
 800019e:	fba2 1303 	umull	r1, r3, r2, r3
	TimeBaseStructure.TIM_Period = 1000 - 1;
	TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
	TimeBaseStructure.TIM_RepetitionCounter = 0;

	//Supply APB1 Clock
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 80001a2:	2001      	movs	r0, #1
	TIM_TimeBaseInitTypeDef TimeBaseStructure;
//			= { 84, TIM_CounterMode_Up, 999, TIM_CKD_DIV1, 0 };

	RCC_ClocksTypeDef RCC_Clocks;
	RCC_GetClocksFreq(&RCC_Clocks);
	TimeBaseStructure.TIM_Prescaler = (RCC_Clocks.SYSCLK_Frequency>>1)/1000000L ;
 80001a4:	0c9b      	lsrs	r3, r3, #18
	TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80001a6:	2400      	movs	r4, #0
	TimeBaseStructure.TIM_Period = 1000 - 1;
	TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
	TimeBaseStructure.TIM_RepetitionCounter = 0;

	//Supply APB1 Clock
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 80001a8:	4601      	mov	r1, r0
	TIM_TimeBaseInitTypeDef TimeBaseStructure;
//			= { 84, TIM_CounterMode_Up, 999, TIM_CKD_DIV1, 0 };

	RCC_ClocksTypeDef RCC_Clocks;
	RCC_GetClocksFreq(&RCC_Clocks);
	TimeBaseStructure.TIM_Prescaler = (RCC_Clocks.SYSCLK_Frequency>>1)/1000000L ;
 80001aa:	f8ad 3010 	strh.w	r3, [sp, #16]
	TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
	TimeBaseStructure.TIM_Period = 1000 - 1;
 80001ae:	f240 33e7 	movw	r3, #999	; 0x3e7
 80001b2:	9305      	str	r3, [sp, #20]
//			= { 84, TIM_CounterMode_Up, 999, TIM_CKD_DIV1, 0 };

	RCC_ClocksTypeDef RCC_Clocks;
	RCC_GetClocksFreq(&RCC_Clocks);
	TimeBaseStructure.TIM_Prescaler = (RCC_Clocks.SYSCLK_Frequency>>1)/1000000L ;
	TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80001b4:	f8ad 4012 	strh.w	r4, [sp, #18]
	TimeBaseStructure.TIM_Period = 1000 - 1;
	TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 80001b8:	f8ad 4018 	strh.w	r4, [sp, #24]
	TimeBaseStructure.TIM_RepetitionCounter = 0;
 80001bc:	f88d 401a 	strb.w	r4, [sp, #26]

	//Supply APB1 Clock
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 80001c0:	f001 fd26 	bl	8001c10 <RCC_APB1PeriphClockCmd>

	/* Time base configuration */
	TIM_TimeBaseInit(TIM2, &TimeBaseStructure);
 80001c4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80001c8:	a904      	add	r1, sp, #16
 80001ca:	f002 f8d3 	bl	8002374 <TIM_TimeBaseInit>
//  TIM_SelectOnePulseMode(TIM2, TIM_OPMode_Repetitive);
	TIM_SetCounter(TIM2, 0);
 80001ce:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80001d2:	4621      	mov	r1, r4
 80001d4:	f002 f930 	bl	8002438 <TIM_SetCounter>
	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);
 80001d8:	2101      	movs	r1, #1
 80001da:	460a      	mov	r2, r1
 80001dc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80001e0:	f002 fdbe 	bl	8002d60 <TIM_ITConfig>

	NVIC_InitTypeDef NVIC_InitStructure;
	/* Enable the TIM2 gloabal Interrupt */
	NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 80001e4:	2601      	movs	r6, #1
	TIM_SetCounter(TIM2, 0);
	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);

	NVIC_InitTypeDef NVIC_InitStructure;
	/* Enable the TIM2 gloabal Interrupt */
	NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
 80001e6:	231c      	movs	r3, #28
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
 80001e8:	a807      	add	r0, sp, #28
	TIM_SetCounter(TIM2, 0);
	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);

	NVIC_InitTypeDef NVIC_InitStructure;
	/* Enable the TIM2 gloabal Interrupt */
	NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
 80001ea:	f88d 301c 	strb.w	r3, [sp, #28]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80001ee:	f88d 401d 	strb.w	r4, [sp, #29]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 80001f2:	f88d 601e 	strb.w	r6, [sp, #30]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80001f6:	f88d 601f 	strb.w	r6, [sp, #31]
	NVIC_Init(&NVIC_InitStructure);
 80001fa:	f000 ffa7 	bl	800114c <NVIC_Init>

	/* TIM enable counter */
	TIM_Cmd(TIM2, ENABLE);
 80001fe:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000202:	4631      	mov	r1, r6
 8000204:	f002 f964 	bl	80024d0 <TIM_Cmd>

	__counter_micros = 0;
 8000208:	f640 12a4 	movw	r2, #2468	; 0x9a4
	__counter_millis = 0;
 800020c:	f640 13a8 	movw	r3, #2472	; 0x9a8
	NVIC_Init(&NVIC_InitStructure);

	/* TIM enable counter */
	TIM_Cmd(TIM2, ENABLE);

	__counter_micros = 0;
 8000210:	f2c2 0200 	movt	r2, #8192	; 0x2000
	__counter_millis = 0;
 8000214:	f2c2 0300 	movt	r3, #8192	; 0x2000
	NVIC_Init(&NVIC_InitStructure);

	/* TIM enable counter */
	TIM_Cmd(TIM2, ENABLE);

	__counter_micros = 0;
 8000218:	6014      	str	r4, [r2, #0]
//			= { 84, TIM_CounterMode_Up, 999, TIM_CKD_DIV1, 0 };

	RCC_ClocksTypeDef RCC_Clocks;
	RCC_GetClocksFreq(&RCC_Clocks);
	TimeBaseStructure.TIM_Prescaler = (RCC_Clocks.SYSCLK_Frequency>>1)/1000000L ;
	TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 800021a:	4625      	mov	r5, r4

	/* TIM enable counter */
	TIM_Cmd(TIM2, ENABLE);

	__counter_micros = 0;
	__counter_millis = 0;
 800021c:	601c      	str	r4, [r3, #0]
}
 800021e:	b008      	add	sp, #32
 8000220:	bd70      	pop	{r4, r5, r6, pc}
 8000222:	bf00      	nop

08000224 <micros>:

uint32_t micros(void) {
 8000224:	b508      	push	{r3, lr}
	return __counter_micros + TIM_GetCounter(TIM2 );
 8000226:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800022a:	f002 f909 	bl	8002440 <TIM_GetCounter>
 800022e:	f640 13a4 	movw	r3, #2468	; 0x9a4
 8000232:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000236:	681b      	ldr	r3, [r3, #0]
}
 8000238:	18c0      	adds	r0, r0, r3
 800023a:	bd08      	pop	{r3, pc}

0800023c <millis>:

uint32_t millis(void) {
	return __counter_millis;
 800023c:	f640 13a8 	movw	r3, #2472	; 0x9a8
 8000240:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000244:	6818      	ldr	r0, [r3, #0]
}
 8000246:	4770      	bx	lr

08000248 <delay_ms>:
uint32_t micros(void) {
	return __counter_micros + TIM_GetCounter(TIM2 );
}

uint32_t millis(void) {
	return __counter_millis;
 8000248:	4b06      	ldr	r3, [pc, #24]	; (8000264 <delay_ms+0x1c>)
 800024a:	6819      	ldr	r1, [r3, #0]
 800024c:	681a      	ldr	r2, [r3, #0]
}

void delay_ms(uint32_t w) {
	uint32_t wtill = millis() + w;
 800024e:	1841      	adds	r1, r0, r1
	if ( wtill < millis() ) {
 8000250:	4291      	cmp	r1, r2
 8000252:	d202      	bcs.n	800025a <delay_ms+0x12>
uint32_t micros(void) {
	return __counter_micros + TIM_GetCounter(TIM2 );
}

uint32_t millis(void) {
	return __counter_millis;
 8000254:	681a      	ldr	r2, [r3, #0]
}

void delay_ms(uint32_t w) {
	uint32_t wtill = millis() + w;
	if ( wtill < millis() ) {
		while ( millis() >= wtill );
 8000256:	4291      	cmp	r1, r2
 8000258:	d9fc      	bls.n	8000254 <delay_ms+0xc>
uint32_t micros(void) {
	return __counter_micros + TIM_GetCounter(TIM2 );
}

uint32_t millis(void) {
	return __counter_millis;
 800025a:	681a      	ldr	r2, [r3, #0]
void delay_ms(uint32_t w) {
	uint32_t wtill = millis() + w;
	if ( wtill < millis() ) {
		while ( millis() >= wtill );
	}
	while (millis() < wtill)
 800025c:	4291      	cmp	r1, r2
 800025e:	d8fc      	bhi.n	800025a <delay_ms+0x12>
		;
}
 8000260:	4770      	bx	lr
 8000262:	bf00      	nop
 8000264:	200009a8 	.word	0x200009a8

08000268 <delay_us>:

void delay_us(uint32_t w) {
 8000268:	b510      	push	{r4, lr}
 800026a:	4604      	mov	r4, r0
	uint32_t wtill = micros() + w;
 800026c:	f7ff ffda 	bl	8000224 <micros>
 8000270:	1904      	adds	r4, r0, r4
	if ( wtill < micros() ) {
 8000272:	f7ff ffd7 	bl	8000224 <micros>
 8000276:	4284      	cmp	r4, r0
 8000278:	d203      	bcs.n	8000282 <delay_us+0x1a>
		// overflow
		while ( micros() >= wtill );
 800027a:	f7ff ffd3 	bl	8000224 <micros>
 800027e:	4284      	cmp	r4, r0
 8000280:	d9fb      	bls.n	800027a <delay_us+0x12>
	}
	while (micros() < wtill)
 8000282:	f7ff ffcf 	bl	8000224 <micros>
 8000286:	4284      	cmp	r4, r0
 8000288:	d8fb      	bhi.n	8000282 <delay_us+0x1a>
		;
}
 800028a:	bd10      	pop	{r4, pc}

0800028c <TIM2_IRQHandler>:

void TIM2_IRQHandler(void) {
 800028c:	b508      	push	{r3, lr}
	if (TIM_GetITStatus(TIM2, TIM_IT_Update ) != RESET) {
 800028e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000292:	2101      	movs	r1, #1
 8000294:	f002 fd7a 	bl	8002d8c <TIM_GetITStatus>
 8000298:	b168      	cbz	r0, 80002b6 <TIM2_IRQHandler+0x2a>
		TIM_ClearITPendingBit(TIM2, TIM_IT_Update );
 800029a:	2101      	movs	r1, #1
 800029c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80002a0:	f002 fd80 	bl	8002da4 <TIM_ClearITPendingBit>
		__counter_micros += 1000;
 80002a4:	4a04      	ldr	r2, [pc, #16]	; (80002b8 <TIM2_IRQHandler+0x2c>)
		__counter_millis += 1;
 80002a6:	4b05      	ldr	r3, [pc, #20]	; (80002bc <TIM2_IRQHandler+0x30>)
}

void TIM2_IRQHandler(void) {
	if (TIM_GetITStatus(TIM2, TIM_IT_Update ) != RESET) {
		TIM_ClearITPendingBit(TIM2, TIM_IT_Update );
		__counter_micros += 1000;
 80002a8:	6811      	ldr	r1, [r2, #0]
 80002aa:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
 80002ae:	6011      	str	r1, [r2, #0]
		__counter_millis += 1;
 80002b0:	681a      	ldr	r2, [r3, #0]
 80002b2:	3201      	adds	r2, #1
 80002b4:	601a      	str	r2, [r3, #0]
 80002b6:	bd08      	pop	{r3, pc}
 80002b8:	200009a4 	.word	0x200009a4
 80002bc:	200009a8 	.word	0x200009a8

080002c0 <PinPort>:
		GPIO_Pin_4, GPIO_Pin_5, GPIO_Pin_6, GPIO_Pin_7, GPIO_Pin_8, GPIO_Pin_9,
		GPIO_Pin_10, GPIO_Pin_11, GPIO_Pin_12, GPIO_Pin_13, GPIO_Pin_14,
		GPIO_Pin_15, GPIO_Pin_All };

GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
 80002c0:	f240 0300 	movw	r3, #0
 80002c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80002c8:	f3c0 2003 	ubfx	r0, r0, #8, #4
}
 80002cc:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80002d0:	4770      	bx	lr
 80002d2:	bf00      	nop

080002d4 <PinBit>:

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 80002d4:	2301      	movs	r3, #1
 80002d6:	f000 000f 	and.w	r0, r0, #15
 80002da:	fa13 f000 	lsls.w	r0, r3, r0
}
 80002de:	b280      	uxth	r0, r0
 80002e0:	4770      	bx	lr
 80002e2:	bf00      	nop

080002e4 <PinSource>:

uint8_t PinSource(GPIOPin portpin) {
	return portpin & 0x0f;
}
 80002e4:	f000 000f 	and.w	r0, r0, #15
 80002e8:	4770      	bx	lr
 80002ea:	bf00      	nop

080002ec <pinMode>:

void pinMode(GPIOPin portpin, GPIOMode_TypeDef mode) {
 80002ec:	b5f0      	push	{r4, r5, r6, r7, lr}

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);
 80002ee:	f240 0400 	movw	r4, #0
 80002f2:	f3c0 2503 	ubfx	r5, r0, #8, #4
 80002f6:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80002fa:	eb04 0385 	add.w	r3, r4, r5, lsl #2

uint8_t PinSource(GPIOPin portpin) {
	return portpin & 0x0f;
}

void pinMode(GPIOPin portpin, GPIOMode_TypeDef mode) {
 80002fe:	b083      	sub	sp, #12
 8000300:	460f      	mov	r7, r1
 8000302:	4606      	mov	r6, r0

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);
 8000304:	2101      	movs	r1, #1
 8000306:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000308:	f001 fc58 	bl	8001bbc <RCC_AHB1PeriphClockCmd>
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 800030c:	f006 060f 	and.w	r6, r6, #15
 8000310:	2301      	movs	r3, #1
 8000312:	fa13 f606 	lsls.w	r6, r3, r6

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);

	GPIO_InitStructure.GPIO_Pin = PinBit(portpin);
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000316:	2300      	movs	r3, #0

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);

	GPIO_InitStructure.GPIO_Pin = PinBit(portpin);
 8000318:	b2b6      	uxth	r6, r6
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800031a:	f88d 3006 	strb.w	r3, [sp, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800031e:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	//
	GPIO_Init(Port[portpin>>8 & 0x0f], &GPIO_InitStructure);
 8000322:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);

	GPIO_InitStructure.GPIO_Pin = PinBit(portpin);
 8000326:	9600      	str	r6, [sp, #0]
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000328:	2302      	movs	r3, #2
	//
	GPIO_Init(Port[portpin>>8 & 0x0f], &GPIO_InitStructure);
 800032a:	4669      	mov	r1, sp
	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);

	GPIO_InitStructure.GPIO_Pin = PinBit(portpin);
	GPIO_InitStructure.GPIO_Mode = mode;
 800032c:	f88d 7004 	strb.w	r7, [sp, #4]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000330:	f88d 3005 	strb.w	r3, [sp, #5]
	//
	GPIO_Init(Port[portpin>>8 & 0x0f], &GPIO_InitStructure);
 8000334:	f001 f806 	bl	8001344 <GPIO_Init>
}
 8000338:	b003      	add	sp, #12
 800033a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800033c <digitalWrite>:

void digitalWrite(GPIOPin portpin, uint8_t bit) {
	if (bit) {
		//? Bit_SET : Bit_RESET ));
		GPIO_SetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
 800033c:	f3c0 2203 	ubfx	r2, r0, #8, #4
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 8000340:	f000 000f 	and.w	r0, r0, #15
	//
	GPIO_Init(Port[portpin>>8 & 0x0f], &GPIO_InitStructure);
}

void digitalWrite(GPIOPin portpin, uint8_t bit) {
	if (bit) {
 8000344:	b939      	cbnz	r1, 8000356 <digitalWrite+0x1a>
		//? Bit_SET : Bit_RESET ));
		GPIO_SetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
	} else {
		GPIO_ResetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
 8000346:	4b08      	ldr	r3, [pc, #32]	; (8000368 <digitalWrite+0x2c>)
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 8000348:	2101      	movs	r1, #1
 800034a:	4081      	lsls	r1, r0
void digitalWrite(GPIOPin portpin, uint8_t bit) {
	if (bit) {
		//? Bit_SET : Bit_RESET ));
		GPIO_SetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
	} else {
		GPIO_ResetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
 800034c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000350:	b289      	uxth	r1, r1
 8000352:	f001 b885 	b.w	8001460 <GPIO_ResetBits>
}

void digitalWrite(GPIOPin portpin, uint8_t bit) {
	if (bit) {
		//? Bit_SET : Bit_RESET ));
		GPIO_SetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
 8000356:	4b04      	ldr	r3, [pc, #16]	; (8000368 <digitalWrite+0x2c>)
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 8000358:	2101      	movs	r1, #1
 800035a:	4081      	lsls	r1, r0
}

void digitalWrite(GPIOPin portpin, uint8_t bit) {
	if (bit) {
		//? Bit_SET : Bit_RESET ));
		GPIO_SetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
 800035c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000360:	b289      	uxth	r1, r1
 8000362:	f001 b87b 	b.w	800145c <GPIO_SetBits>
 8000366:	bf00      	nop
 8000368:	20000000 	.word	0x20000000

0800036c <digitalRead>:
		GPIO_ResetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
	}
}

uint8_t digitalRead(GPIOPin portpin) {
	GPIO_TypeDef * port = Port[portpin>>8 & 0x0f];
 800036c:	f3c0 2203 	ubfx	r2, r0, #8, #4
	} else {
		GPIO_ResetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
	}
}

uint8_t digitalRead(GPIOPin portpin) {
 8000370:	b508      	push	{r3, lr}
	GPIO_TypeDef * port = Port[portpin>>8 & 0x0f];
 8000372:	4b0e      	ldr	r3, [pc, #56]	; (80003ac <digitalRead+0x40>)
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 8000374:	f000 010f 	and.w	r1, r0, #15
		GPIO_ResetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
	}
}

uint8_t digitalRead(GPIOPin portpin) {
	GPIO_TypeDef * port = Port[portpin>>8 & 0x0f];
 8000378:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 800037c:	2301      	movs	r3, #1
 800037e:	fa13 f101 	lsls.w	r1, r3, r1
	}
}

uint8_t digitalRead(GPIOPin portpin) {
	GPIO_TypeDef * port = Port[portpin>>8 & 0x0f];
	uint8_t mode = (port->MODER) >> (PinBit(portpin) * 2);
 8000382:	6802      	ldr	r2, [r0, #0]
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 8000384:	b289      	uxth	r1, r1
	}
}

uint8_t digitalRead(GPIOPin portpin) {
	GPIO_TypeDef * port = Port[portpin>>8 & 0x0f];
	uint8_t mode = (port->MODER) >> (PinBit(portpin) * 2);
 8000386:	fa11 f303 	lsls.w	r3, r1, r3
 800038a:	fa32 f303 	lsrs.w	r3, r2, r3
	if (mode == GPIO_Mode_OUT)
 800038e:	b2db      	uxtb	r3, r3
 8000390:	2b01      	cmp	r3, #1
 8000392:	d005      	beq.n	80003a0 <digitalRead+0x34>
		return (GPIO_ReadOutputDataBit(port, PinBit(portpin)) ? SET : RESET);
	return (GPIO_ReadInputDataBit(port, PinBit(portpin)) ? SET : RESET);
 8000394:	f001 f84e 	bl	8001434 <GPIO_ReadInputDataBit>
 8000398:	3000      	adds	r0, #0
 800039a:	bf18      	it	ne
 800039c:	2001      	movne	r0, #1
}
 800039e:	bd08      	pop	{r3, pc}

uint8_t digitalRead(GPIOPin portpin) {
	GPIO_TypeDef * port = Port[portpin>>8 & 0x0f];
	uint8_t mode = (port->MODER) >> (PinBit(portpin) * 2);
	if (mode == GPIO_Mode_OUT)
		return (GPIO_ReadOutputDataBit(port, PinBit(portpin)) ? SET : RESET);
 80003a0:	f001 f852 	bl	8001448 <GPIO_ReadOutputDataBit>
 80003a4:	3000      	adds	r0, #0
 80003a6:	bf18      	it	ne
 80003a8:	2001      	movne	r0, #1
 80003aa:	bd08      	pop	{r3, pc}
 80003ac:	20000000 	.word	0x20000000

080003b0 <GPIOMode>:
	return (GPIO_ReadInputDataBit(port, PinBit(portpin)) ? SET : RESET);
}

void GPIOMode(GPIO_TypeDef * port, uint16_t pinbit, GPIOMode_TypeDef mode,
              GPIOSpeed_TypeDef clk, GPIOOType_TypeDef otype, GPIOPuPd_TypeDef pupd) {
 80003b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if ( port == GPIOB ) {
 80003b4:	f44f 6680 	mov.w	r6, #1024	; 0x400
 80003b8:	f2c4 0602 	movt	r6, #16386	; 0x4002
 80003bc:	42b0      	cmp	r0, r6
		return (GPIO_ReadOutputDataBit(port, PinBit(portpin)) ? SET : RESET);
	return (GPIO_ReadInputDataBit(port, PinBit(portpin)) ? SET : RESET);
}

void GPIOMode(GPIO_TypeDef * port, uint16_t pinbit, GPIOMode_TypeDef mode,
              GPIOSpeed_TypeDef clk, GPIOOType_TypeDef otype, GPIOPuPd_TypeDef pupd) {
 80003be:	b082      	sub	sp, #8
 80003c0:	4604      	mov	r4, r0
 80003c2:	460d      	mov	r5, r1
 80003c4:	4617      	mov	r7, r2
 80003c6:	4698      	mov	r8, r3
	if ( port == GPIOB ) {
 80003c8:	d047      	beq.n	800045a <GPIOMode+0xaa>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
	} else if ( port == GPIOC ) {
 80003ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80003ce:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80003d2:	4298      	cmp	r0, r3
 80003d4:	d046      	beq.n	8000464 <GPIOMode+0xb4>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
	} else if ( port == GPIOD ) {
 80003d6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80003da:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80003de:	4298      	cmp	r0, r3
 80003e0:	d045      	beq.n	800046e <GPIOMode+0xbe>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
	} else if ( port == GPIOE ) {
 80003e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003e6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80003ea:	4298      	cmp	r0, r3
 80003ec:	d044      	beq.n	8000478 <GPIOMode+0xc8>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
	} else if ( port == GPIOF ) {
 80003ee:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80003f2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d043      	beq.n	8000482 <GPIOMode+0xd2>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOF, ENABLE);
	} else if ( port == GPIOG ) {
 80003fa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80003fe:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000402:	4298      	cmp	r0, r3
 8000404:	d042      	beq.n	800048c <GPIOMode+0xdc>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOG, ENABLE);
	} else if ( port == GPIOH ) {
 8000406:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800040a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800040e:	4298      	cmp	r0, r3
 8000410:	d041      	beq.n	8000496 <GPIOMode+0xe6>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOH, ENABLE);
	} else if ( port == GPIOI ) {
 8000412:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000416:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800041a:	4298      	cmp	r0, r3
 800041c:	d040      	beq.n	80004a0 <GPIOMode+0xf0>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOI, ENABLE);
	} else if ( port == GPIOA ) {
 800041e:	2300      	movs	r3, #0
 8000420:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000424:	4298      	cmp	r0, r3
 8000426:	d013      	beq.n	8000450 <GPIOMode+0xa0>

	GPIO_InitTypeDef GPIO_InitStructure;
        
	GPIO_InitStructure.GPIO_Pin = pinbit;
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = otype;
 8000428:	f89d 3020 	ldrb.w	r3, [sp, #32]
	}
	// assumes port is already waked up.

	GPIO_InitTypeDef GPIO_InitStructure;
        
	GPIO_InitStructure.GPIO_Pin = pinbit;
 800042c:	9500      	str	r5, [sp, #0]
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = otype;
 800042e:	f88d 3006 	strb.w	r3, [sp, #6]
	GPIO_InitStructure.GPIO_PuPd = pupd;
 8000432:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
	// assumes port is already waked up.

	GPIO_InitTypeDef GPIO_InitStructure;
        
	GPIO_InitStructure.GPIO_Pin = pinbit;
	GPIO_InitStructure.GPIO_Mode = mode;
 8000436:	f88d 7004 	strb.w	r7, [sp, #4]
	GPIO_InitStructure.GPIO_OType = otype;
	GPIO_InitStructure.GPIO_PuPd = pupd;
	GPIO_InitStructure.GPIO_Speed = clk;
	//
	GPIO_Init(port, &GPIO_InitStructure);
 800043a:	4620      	mov	r0, r4
 800043c:	4669      	mov	r1, sp
	GPIO_InitTypeDef GPIO_InitStructure;
        
	GPIO_InitStructure.GPIO_Pin = pinbit;
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = otype;
	GPIO_InitStructure.GPIO_PuPd = pupd;
 800043e:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_InitStructure.GPIO_Speed = clk;
 8000442:	f88d 8005 	strb.w	r8, [sp, #5]
	//
	GPIO_Init(port, &GPIO_InitStructure);
 8000446:	f000 ff7d 	bl	8001344 <GPIO_Init>
}
 800044a:	b002      	add	sp, #8
 800044c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if ( port == GPIOH ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOH, ENABLE);
	} else if ( port == GPIOI ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOI, ENABLE);
	} else if ( port == GPIOA ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8000450:	2001      	movs	r0, #1
 8000452:	4601      	mov	r1, r0
 8000454:	f001 fbb2 	bl	8001bbc <RCC_AHB1PeriphClockCmd>
 8000458:	e7e6      	b.n	8000428 <GPIOMode+0x78>
}

void GPIOMode(GPIO_TypeDef * port, uint16_t pinbit, GPIOMode_TypeDef mode,
              GPIOSpeed_TypeDef clk, GPIOOType_TypeDef otype, GPIOPuPd_TypeDef pupd) {
	if ( port == GPIOB ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 800045a:	2002      	movs	r0, #2
 800045c:	2101      	movs	r1, #1
 800045e:	f001 fbad 	bl	8001bbc <RCC_AHB1PeriphClockCmd>
 8000462:	e7e1      	b.n	8000428 <GPIOMode+0x78>
	} else if ( port == GPIOC ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8000464:	2004      	movs	r0, #4
 8000466:	2101      	movs	r1, #1
 8000468:	f001 fba8 	bl	8001bbc <RCC_AHB1PeriphClockCmd>
 800046c:	e7dc      	b.n	8000428 <GPIOMode+0x78>
	} else if ( port == GPIOD ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 800046e:	2008      	movs	r0, #8
 8000470:	2101      	movs	r1, #1
 8000472:	f001 fba3 	bl	8001bbc <RCC_AHB1PeriphClockCmd>
 8000476:	e7d7      	b.n	8000428 <GPIOMode+0x78>
	} else if ( port == GPIOE ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 8000478:	2010      	movs	r0, #16
 800047a:	2101      	movs	r1, #1
 800047c:	f001 fb9e 	bl	8001bbc <RCC_AHB1PeriphClockCmd>
 8000480:	e7d2      	b.n	8000428 <GPIOMode+0x78>
	} else if ( port == GPIOF ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 8000482:	2020      	movs	r0, #32
 8000484:	2101      	movs	r1, #1
 8000486:	f001 fb99 	bl	8001bbc <RCC_AHB1PeriphClockCmd>
 800048a:	e7cd      	b.n	8000428 <GPIOMode+0x78>
	} else if ( port == GPIOG ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 800048c:	2040      	movs	r0, #64	; 0x40
 800048e:	2101      	movs	r1, #1
 8000490:	f001 fb94 	bl	8001bbc <RCC_AHB1PeriphClockCmd>
 8000494:	e7c8      	b.n	8000428 <GPIOMode+0x78>
	} else if ( port == GPIOH ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 8000496:	2080      	movs	r0, #128	; 0x80
 8000498:	2101      	movs	r1, #1
 800049a:	f001 fb8f 	bl	8001bbc <RCC_AHB1PeriphClockCmd>
 800049e:	e7c3      	b.n	8000428 <GPIOMode+0x78>
	} else if ( port == GPIOI ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 80004a0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80004a4:	2101      	movs	r1, #1
 80004a6:	f001 fb89 	bl	8001bbc <RCC_AHB1PeriphClockCmd>
 80004aa:	e7bd      	b.n	8000428 <GPIOMode+0x78>

080004ac <GPIOWrite>:
	GPIO_Init(port, &GPIO_InitStructure);
}


inline void GPIOWrite(GPIO_TypeDef * port, uint16_t bits) {
	GPIO_Write(port, bits);
 80004ac:	f000 bfe0 	b.w	8001470 <GPIO_Write>

080004b0 <i2c_begin>:
I2CBus Wire1, Wire2, Wire3;

//I2C_Status i2c1_status;
//CommDirection i2c1_direction;

boolean i2c_begin(uint32_t clkspeed) {
 80004b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
//	GPIO_InitTypeDef GPIO_InitStructure;
	I2C_InitTypeDef I2C_InitStructure;

	Wire1.I2Cx = I2C1;
 80004b4:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 80004b8:	4d3a      	ldr	r5, [pc, #232]	; (80005a4 <i2c_begin+0xf4>)
I2CBus Wire1, Wire2, Wire3;

//I2C_Status i2c1_status;
//CommDirection i2c1_direction;

boolean i2c_begin(uint32_t clkspeed) {
 80004ba:	b086      	sub	sp, #24
	Wire1.I2Cx = I2C1;
	Wire1.sda = PB9;
	Wire1.scl = PB6;

	/* I2C Periph clock enable */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE); //  RCC_APB1PeriphClockCmd(I2C1_RCC, ENABLE);
 80004bc:	2101      	movs	r1, #1

boolean i2c_begin(uint32_t clkspeed) {
//	GPIO_InitTypeDef GPIO_InitStructure;
	I2C_InitTypeDef I2C_InitStructure;

	Wire1.I2Cx = I2C1;
 80004be:	f2c4 0300 	movt	r3, #16384	; 0x4000
	Wire1.sda = PB9;
	Wire1.scl = PB6;
 80004c2:	f240 2406 	movw	r4, #518	; 0x206
boolean i2c_begin(uint32_t clkspeed) {
//	GPIO_InitTypeDef GPIO_InitStructure;
	I2C_InitTypeDef I2C_InitStructure;

	Wire1.I2Cx = I2C1;
	Wire1.sda = PB9;
 80004c6:	f240 2709 	movw	r7, #521	; 0x209
I2CBus Wire1, Wire2, Wire3;

//I2C_Status i2c1_status;
//CommDirection i2c1_direction;

boolean i2c_begin(uint32_t clkspeed) {
 80004ca:	4606      	mov	r6, r0
	Wire1.I2Cx = I2C1;
	Wire1.sda = PB9;
	Wire1.scl = PB6;

	/* I2C Periph clock enable */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE); //  RCC_APB1PeriphClockCmd(I2C1_RCC, ENABLE);
 80004cc:	f44f 1000 	mov.w	r0, #2097152	; 0x200000

boolean i2c_begin(uint32_t clkspeed) {
//	GPIO_InitTypeDef GPIO_InitStructure;
	I2C_InitTypeDef I2C_InitStructure;

	Wire1.I2Cx = I2C1;
 80004d0:	602b      	str	r3, [r5, #0]
	Wire1.sda = PB9;
	Wire1.scl = PB6;
 80004d2:	80ec      	strh	r4, [r5, #6]
boolean i2c_begin(uint32_t clkspeed) {
//	GPIO_InitTypeDef GPIO_InitStructure;
	I2C_InitTypeDef I2C_InitStructure;

	Wire1.I2Cx = I2C1;
	Wire1.sda = PB9;
 80004d4:	80af      	strh	r7, [r5, #4]
	Wire1.scl = PB6;

	/* I2C Periph clock enable */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE); //  RCC_APB1PeriphClockCmd(I2C1_RCC, ENABLE);
 80004d6:	f001 fb9b 	bl	8001c10 <RCC_APB1PeriphClockCmd>
	/* GPIO Periph clock enable */
	//RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE); // PB5 (SMBA), PB6 (SCL), PB9 (SDA)  // RCC_APB2PeriphClockCmd(I2C1_GPIO_RCC, ENABLE);
	GPIOMode(PinPort(PB6), PinBit(PB6), GPIO_Mode_AF, GPIO_Speed_50MHz,
 80004da:	4620      	mov	r0, r4
 80004dc:	f7ff fef0 	bl	80002c0 <PinPort>
 80004e0:	4680      	mov	r8, r0
 80004e2:	4620      	mov	r0, r4
 80004e4:	f7ff fef6 	bl	80002d4 <PinBit>
 80004e8:	2202      	movs	r2, #2
 80004ea:	2401      	movs	r4, #1
 80004ec:	4601      	mov	r1, r0
 80004ee:	4613      	mov	r3, r2
 80004f0:	4640      	mov	r0, r8
 80004f2:	9400      	str	r4, [sp, #0]
 80004f4:	9401      	str	r4, [sp, #4]
 80004f6:	f7ff ff5b 	bl	80003b0 <GPIOMode>
			GPIO_OType_OD, GPIO_PuPd_UP);
	GPIOMode(PinPort(PB9), PinBit(PB9), GPIO_Mode_AF, GPIO_Speed_50MHz,
 80004fa:	4638      	mov	r0, r7
 80004fc:	f7ff fee0 	bl	80002c0 <PinPort>
 8000500:	4680      	mov	r8, r0
 8000502:	4638      	mov	r0, r7
 8000504:	f7ff fee6 	bl	80002d4 <PinBit>
 8000508:	2202      	movs	r2, #2
 800050a:	4613      	mov	r3, r2
 800050c:	4601      	mov	r1, r0
 800050e:	4640      	mov	r0, r8
 8000510:	9400      	str	r4, [sp, #0]
 8000512:	9401      	str	r4, [sp, #4]
 8000514:	f7ff ff4c 	bl	80003b0 <GPIOMode>
			GPIO_OType_OD, GPIO_PuPd_UP);

	/* Configure I2C pins: SCL and SDA */
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_I2C1 );
 8000518:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800051c:	2106      	movs	r1, #6
 800051e:	2204      	movs	r2, #4
 8000520:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000524:	f000 ffaa 	bl	800147c <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_I2C1 );
 8000528:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800052c:	2109      	movs	r1, #9
 800052e:	2204      	movs	r2, #4
 8000530:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000534:	f000 ffa2 	bl	800147c <GPIO_PinAFConfig>

	//#if defined (REMAP_I2C1)
//Remap_I2C1_Configuration();
//#endif
	switch (clkspeed) {
 8000538:	f248 63a0 	movw	r3, #34464	; 0x86a0
 800053c:	f364 431f 	bfi	r3, r4, #16, #16
 8000540:	429e      	cmp	r6, r3
 8000542:	d00b      	beq.n	800055c <i2c_begin+0xac>
 8000544:	f44f 53d4 	mov.w	r3, #6784	; 0x1a80
	case 100000:
	case 400000:
		break;
	default:
		clkspeed = 100000;
 8000548:	f248 62a0 	movw	r2, #34464	; 0x86a0
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_I2C1 );

	//#if defined (REMAP_I2C1)
//Remap_I2C1_Configuration();
//#endif
	switch (clkspeed) {
 800054c:	f2c0 0306 	movt	r3, #6
	case 100000:
	case 400000:
		break;
	default:
		clkspeed = 100000;
 8000550:	f364 421f 	bfi	r2, r4, #16, #16
 8000554:	429e      	cmp	r6, r3
 8000556:	bf0c      	ite	eq
 8000558:	461e      	moveq	r6, r3
 800055a:	4616      	movne	r6, r2
	/* I2C configuration */
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
	I2C_InitStructure.I2C_ClockSpeed = clkspeed;
 800055c:	a906      	add	r1, sp, #24
	}
	/* I2C configuration */
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 800055e:	f44f 4480 	mov.w	r4, #16384	; 0x4000
	default:
		clkspeed = 100000;
		break;
	}
	/* I2C configuration */
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 8000562:	2300      	movs	r3, #0
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
	I2C_InitStructure.I2C_ClockSpeed = clkspeed;
 8000564:	f841 6d10 	str.w	r6, [r1, #-16]!
	default:
		clkspeed = 100000;
		break;
	}
	/* I2C configuration */
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 8000568:	f8ad 300c 	strh.w	r3, [sp, #12]
 800056c:	461e      	mov	r6, r3
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
	I2C_InitStructure.I2C_ClockSpeed = clkspeed;

	/* Apply I2C configuration after enabling it */
	I2C_Init(I2C1, &I2C_InitStructure);
 800056e:	0420      	lsls	r0, r4, #16
		clkspeed = 100000;
		break;
	}
	/* I2C configuration */
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
 8000570:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8000574:	f8ad 300e 	strh.w	r3, [sp, #14]
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
	I2C_InitStructure.I2C_ClockSpeed = clkspeed;

	/* Apply I2C configuration after enabling it */
	I2C_Init(I2C1, &I2C_InitStructure);
 8000578:	f440 40a8 	orr.w	r0, r0, #21504	; 0x5400
		break;
	}
	/* I2C configuration */
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 800057c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000580:	f8ad 3012 	strh.w	r3, [sp, #18]
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8000584:	f8ad 4014 	strh.w	r4, [sp, #20]
	I2C_InitStructure.I2C_ClockSpeed = clkspeed;

	/* Apply I2C configuration after enabling it */
	I2C_Init(I2C1, &I2C_InitStructure);
 8000588:	f000 ffc8 	bl	800151c <I2C_Init>
	/* I2C Peripheral Enable */
	I2C_Cmd(I2C1, ENABLE);
 800058c:	0420      	lsls	r0, r4, #16
 800058e:	f440 40a8 	orr.w	r0, r0, #21504	; 0x5400
 8000592:	2101      	movs	r1, #1
 8000594:	f001 f840 	bl	8001618 <I2C_Cmd>

	Wire1.status = NOT_READY;
 8000598:	20ff      	movs	r0, #255	; 0xff
 800059a:	7268      	strb	r0, [r5, #9]
	Wire1.direction = DIRECTION_NOT_DEFINED;
 800059c:	72ae      	strb	r6, [r5, #10]

	return true;
}
 800059e:	b006      	add	sp, #24
 80005a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80005a4:	200009ac 	.word	0x200009ac

080005a8 <i2c_start>:
	Wire1.direction = DIRECTION_NOT_DEFINED;

	return true;
}

boolean i2c_start(uint8_t addr) {
 80005a8:	b570      	push	{r4, r5, r6, lr}
	uint32_t wcount;
	//
	wcount = 5;
	Wire1.status = NOT_READY;
 80005aa:	4c2a      	ldr	r4, [pc, #168]	; (8000654 <i2c_start+0xac>)
 80005ac:	23ff      	movs	r3, #255	; 0xff
	Wire1.direction = DIRECTION_NOT_DEFINED;

	return true;
}

boolean i2c_start(uint8_t addr) {
 80005ae:	4606      	mov	r6, r0
	uint32_t wcount;
	//
	wcount = 5;
	Wire1.status = NOT_READY;
 80005b0:	7263      	strb	r3, [r4, #9]
	while (I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY )) {
 80005b2:	2506      	movs	r5, #6
 80005b4:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 80005b8:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80005bc:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80005c0:	f001 f96a 	bl	8001898 <I2C_GetFlagStatus>
 80005c4:	4603      	mov	r3, r0
		delay_us(667);
 80005c6:	f240 209b 	movw	r0, #667	; 0x29b
boolean i2c_start(uint8_t addr) {
	uint32_t wcount;
	//
	wcount = 5;
	Wire1.status = NOT_READY;
	while (I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY )) {
 80005ca:	b12b      	cbz	r3, 80005d8 <i2c_start+0x30>
		delay_us(667);
 80005cc:	f7ff fe4c 	bl	8000268 <delay_us>
		if (wcount == 0)
 80005d0:	3d01      	subs	r5, #1
 80005d2:	d1ef      	bne.n	80005b4 <i2c_start+0xc>
			return false;
 80005d4:	4628      	mov	r0, r5
 80005d6:	bd70      	pop	{r4, r5, r6, pc}
	}
	Wire1.status = READY;

	/* Send STRAT condition */
	wcount = 5;
	I2C_GenerateSTART(I2C1, ENABLE);
 80005d8:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 80005dc:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80005e0:	2101      	movs	r1, #1
		delay_us(667);
		if (wcount == 0)
			return false;
		wcount--;
	}
	Wire1.status = READY;
 80005e2:	7263      	strb	r3, [r4, #9]

	/* Send STRAT condition */
	wcount = 5;
	I2C_GenerateSTART(I2C1, ENABLE);
	/* Test on EV5 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT )) {
 80005e4:	2506      	movs	r5, #6
	}
	Wire1.status = READY;

	/* Send STRAT condition */
	wcount = 5;
	I2C_GenerateSTART(I2C1, ENABLE);
 80005e6:	f001 f825 	bl	8001634 <I2C_GenerateSTART>
	/* Test on EV5 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT )) {
 80005ea:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 80005ee:	2101      	movs	r1, #1
 80005f0:	f2c0 0103 	movt	r1, #3
 80005f4:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80005f8:	f001 f938 	bl	800186c <I2C_CheckEvent>
 80005fc:	b938      	cbnz	r0, 800060e <i2c_start+0x66>
		delay_us(667);
 80005fe:	f240 209b 	movw	r0, #667	; 0x29b
 8000602:	f7ff fe31 	bl	8000268 <delay_us>
		if (wcount == 0)
 8000606:	3d01      	subs	r5, #1
 8000608:	d1ef      	bne.n	80005ea <i2c_start+0x42>
			return false;
 800060a:	4628      	mov	r0, r5
		wcount--;
	}
	Wire1.status = DST_ADDRESS_SENT;

return true;
}
 800060c:	bd70      	pop	{r4, r5, r6, pc}
	}
	Wire1.status = START_ISSUED;

	/* Send address for write */
	wcount = 5;
	I2C_Send7bitAddress(I2C1, addr << 1, I2C_Direction_Transmitter);
 800060e:	0071      	lsls	r1, r6, #1
 8000610:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
		delay_us(667);
		if (wcount == 0)
			return false;
		wcount--;
	}
	Wire1.status = START_ISSUED;
 8000614:	2301      	movs	r3, #1

	/* Send address for write */
	wcount = 5;
	I2C_Send7bitAddress(I2C1, addr << 1, I2C_Direction_Transmitter);
 8000616:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800061a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 800061e:	2200      	movs	r2, #0
		delay_us(667);
		if (wcount == 0)
			return false;
		wcount--;
	}
	Wire1.status = START_ISSUED;
 8000620:	7263      	strb	r3, [r4, #9]

	/* Send address for write */
	wcount = 5;
	I2C_Send7bitAddress(I2C1, addr << 1, I2C_Direction_Transmitter);
 8000622:	2506      	movs	r5, #6
 8000624:	f001 f822 	bl	800166c <I2C_Send7bitAddress>
	/* Test on EV6 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED )) {
 8000628:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 800062c:	2182      	movs	r1, #130	; 0x82
 800062e:	f2c0 0107 	movt	r1, #7
 8000632:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000636:	f001 f919 	bl	800186c <I2C_CheckEvent>
 800063a:	b930      	cbnz	r0, 800064a <i2c_start+0xa2>
		delay_us(667);
 800063c:	f240 209b 	movw	r0, #667	; 0x29b
 8000640:	f7ff fe12 	bl	8000268 <delay_us>
		if (wcount == 0)
 8000644:	3d01      	subs	r5, #1
 8000646:	d1ef      	bne.n	8000628 <i2c_start+0x80>
 8000648:	e7c4      	b.n	80005d4 <i2c_start+0x2c>
			return false;
		wcount--;
	}
	Wire1.status = DST_ADDRESS_SENT;
 800064a:	2302      	movs	r3, #2
 800064c:	7263      	strb	r3, [r4, #9]

return true;
 800064e:	20ff      	movs	r0, #255	; 0xff
 8000650:	bd70      	pop	{r4, r5, r6, pc}
 8000652:	bf00      	nop
 8000654:	200009ac 	.word	0x200009ac

08000658 <i2c_receive>:
	Wire1.direction = DIRECTION_NOT_DEFINED;

	return true;
}

boolean i2c_receive(uint8_t addr, uint8_t req, uint8_t * recv, uint16_t lim) {
 8000658:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint16_t i;
	uint32_t wcount;

	Wire1.direction = RECEIVER;
 800065c:	4c64      	ldr	r4, [pc, #400]	; (80007f0 <i2c_receive+0x198>)
	Wire1.direction = DIRECTION_NOT_DEFINED;

	return true;
}

boolean i2c_receive(uint8_t addr, uint8_t req, uint8_t * recv, uint16_t lim) {
 800065e:	4698      	mov	r8, r3
	uint16_t i;
	uint32_t wcount;

	Wire1.direction = RECEIVER;
 8000660:	2302      	movs	r3, #2
	Wire1.direction = DIRECTION_NOT_DEFINED;

	return true;
}

boolean i2c_receive(uint8_t addr, uint8_t req, uint8_t * recv, uint16_t lim) {
 8000662:	4605      	mov	r5, r0
 8000664:	460f      	mov	r7, r1
 8000666:	4616      	mov	r6, r2
	uint16_t i;
	uint32_t wcount;

	Wire1.direction = RECEIVER;
 8000668:	72a3      	strb	r3, [r4, #10]
	//
	if ( !i2c_start(addr) )
 800066a:	f7ff ff9d 	bl	80005a8 <i2c_start>
 800066e:	b908      	cbnz	r0, 8000674 <i2c_receive+0x1c>
	I2C_AcknowledgeConfig(I2C1, ENABLE);
	Wire1.status = NOT_READY;
	Wire1.direction = DIRECTION_NOT_DEFINED;

	return true;
}
 8000670:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return false;
	}
	i2c1_status = DST_ADDRESS_SENT;
*/
	/* Send the EEPROM's internal address to read from: MSB of the address first */
	I2C_SendData(I2C1, req);
 8000674:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8000678:	4639      	mov	r1, r7
 800067a:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800067e:	f001 f88d 	bl	800179c <I2C_SendData>
	Wire1.status = BYTE_TRANSMITTING;
 8000682:	2304      	movs	r3, #4
 8000684:	7263      	strb	r3, [r4, #9]
	/* Test on EV8 and clear it */
	wcount = 5;
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED )) {
 8000686:	2706      	movs	r7, #6
 8000688:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 800068c:	2184      	movs	r1, #132	; 0x84
 800068e:	f2c0 0107 	movt	r1, #7
 8000692:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000696:	f001 f8e9 	bl	800186c <I2C_CheckEvent>
 800069a:	b940      	cbnz	r0, 80006ae <i2c_receive+0x56>
		delay_us(667);
 800069c:	f240 209b 	movw	r0, #667	; 0x29b
 80006a0:	f7ff fde2 	bl	8000268 <delay_us>
		if (wcount == 0)
 80006a4:	3f01      	subs	r7, #1
 80006a6:	d1ef      	bne.n	8000688 <i2c_receive+0x30>
	for (i = 1; i < lim; i++) {
		Wire1.status = RECEIVE_BYTE_READY;
		while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_RECEIVED )) {
			delay_us(667);
			if (wcount == 0)
				return false;
 80006a8:	4638      	mov	r0, r7
 80006aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	Wire1.status = TRANSMISSION_COMPLETED;

	//  I2C_GenerateSTOP(I2C1, ENABLE);

	/* Send STRAT condition a second time */
	I2C_GenerateSTART(I2C1, ENABLE);
 80006ae:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
		delay_us(667);
		if (wcount == 0)
			return false;
		wcount--;
	}
	Wire1.status = TRANSMISSION_COMPLETED;
 80006b2:	2706      	movs	r7, #6

	//  I2C_GenerateSTOP(I2C1, ENABLE);

	/* Send STRAT condition a second time */
	I2C_GenerateSTART(I2C1, ENABLE);
 80006b4:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80006b8:	2101      	movs	r1, #1
		delay_us(667);
		if (wcount == 0)
			return false;
		wcount--;
	}
	Wire1.status = TRANSMISSION_COMPLETED;
 80006ba:	7267      	strb	r7, [r4, #9]

	//  I2C_GenerateSTOP(I2C1, ENABLE);

	/* Send STRAT condition a second time */
	I2C_GenerateSTART(I2C1, ENABLE);
 80006bc:	f000 ffba 	bl	8001634 <I2C_GenerateSTART>
	/* Test on EV5 and clear it */
	wcount = 5;
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT )) {
 80006c0:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 80006c4:	2101      	movs	r1, #1
 80006c6:	f2c0 0103 	movt	r1, #3
 80006ca:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80006ce:	f001 f8cd 	bl	800186c <I2C_CheckEvent>
 80006d2:	b930      	cbnz	r0, 80006e2 <i2c_receive+0x8a>
		delay_us(667);
 80006d4:	f240 209b 	movw	r0, #667	; 0x29b
 80006d8:	f7ff fdc6 	bl	8000268 <delay_us>
		if (wcount == 0)
 80006dc:	3f01      	subs	r7, #1
 80006de:	d1ef      	bne.n	80006c0 <i2c_receive+0x68>
 80006e0:	e7e2      	b.n	80006a8 <i2c_receive+0x50>
		wcount--;
	}
	Wire1.status = RESTART_ISSUED;

	/* Send EEPROM address for read */
	I2C_Send7bitAddress(I2C1, addr << 1, I2C_Direction_Receiver );
 80006e2:	0069      	lsls	r1, r5, #1
 80006e4:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
		delay_us(667);
		if (wcount == 0)
			return false;
		wcount--;
	}
	Wire1.status = RESTART_ISSUED;
 80006e8:	2307      	movs	r3, #7

	/* Send EEPROM address for read */
	I2C_Send7bitAddress(I2C1, addr << 1, I2C_Direction_Receiver );
 80006ea:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80006ee:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 80006f2:	2201      	movs	r2, #1
		delay_us(667);
		if (wcount == 0)
			return false;
		wcount--;
	}
	Wire1.status = RESTART_ISSUED;
 80006f4:	7263      	strb	r3, [r4, #9]

	/* Send EEPROM address for read */
	I2C_Send7bitAddress(I2C1, addr << 1, I2C_Direction_Receiver );
	/* Test on EV6 and clear it */
	wcount = 5;
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED )) {
 80006f6:	2506      	movs	r5, #6
		wcount--;
	}
	Wire1.status = RESTART_ISSUED;

	/* Send EEPROM address for read */
	I2C_Send7bitAddress(I2C1, addr << 1, I2C_Direction_Receiver );
 80006f8:	f000 ffb8 	bl	800166c <I2C_Send7bitAddress>
	/* Test on EV6 and clear it */
	wcount = 5;
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED )) {
 80006fc:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8000700:	2102      	movs	r1, #2
 8000702:	f2c0 0103 	movt	r1, #3
 8000706:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800070a:	f001 f8af 	bl	800186c <I2C_CheckEvent>
 800070e:	b940      	cbnz	r0, 8000722 <i2c_receive+0xca>
		delay_us(667);
 8000710:	f240 209b 	movw	r0, #667	; 0x29b
 8000714:	f7ff fda8 	bl	8000268 <delay_us>
		if (wcount == 0)
 8000718:	3d01      	subs	r5, #1
 800071a:	d1ef      	bne.n	80006fc <i2c_receive+0xa4>
			return false;
 800071c:	4628      	mov	r0, r5
 800071e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		wcount--;
	}
	Wire1.status = SRC_ADDRESS_SENT;
	wcount = 5;
	for (i = 1; i < lim; i++) {
 8000722:	f1b8 0f01 	cmp.w	r8, #1
 8000726:	d928      	bls.n	800077a <i2c_receive+0x122>
	Wire1.direction = DIRECTION_NOT_DEFINED;

	return true;
}

boolean i2c_receive(uint8_t addr, uint8_t req, uint8_t * recv, uint16_t lim) {
 8000728:	f1a8 0802 	sub.w	r8, r8, #2
 800072c:	1c73      	adds	r3, r6, #1
 800072e:	fa13 f988 	uxtah	r9, r3, r8
			return false;
		wcount--;
	}
	Wire1.status = SRC_ADDRESS_SENT;
	wcount = 5;
	for (i = 1; i < lim; i++) {
 8000732:	4635      	mov	r5, r6
		if (wcount == 0)
			return false;
		wcount--;
	}
	Wire1.status = SRC_ADDRESS_SENT;
	wcount = 5;
 8000734:	2705      	movs	r7, #5
	for (i = 1; i < lim; i++) {
		Wire1.status = RECEIVE_BYTE_READY;
 8000736:	f04f 0808 	mov.w	r8, #8
 800073a:	f884 8009 	strb.w	r8, [r4, #9]
		while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_RECEIVED )) {
 800073e:	e006      	b.n	800074e <i2c_receive+0xf6>
			delay_us(667);
 8000740:	f240 209b 	movw	r0, #667	; 0x29b
 8000744:	f7ff fd90 	bl	8000268 <delay_us>
			if (wcount == 0)
 8000748:	2f00      	cmp	r7, #0
 800074a:	d0ad      	beq.n	80006a8 <i2c_receive+0x50>
				return false;
			wcount--;
 800074c:	3f01      	subs	r7, #1
	}
	Wire1.status = SRC_ADDRESS_SENT;
	wcount = 5;
	for (i = 1; i < lim; i++) {
		Wire1.status = RECEIVE_BYTE_READY;
		while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_RECEIVED )) {
 800074e:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8000752:	2140      	movs	r1, #64	; 0x40
 8000754:	f2c0 0103 	movt	r1, #3
 8000758:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800075c:	f001 f886 	bl	800186c <I2C_CheckEvent>
 8000760:	2800      	cmp	r0, #0
 8000762:	d0ed      	beq.n	8000740 <i2c_receive+0xe8>
			if (wcount == 0)
				return false;
			wcount--;
		}
		/* Read a byte from the EEPROM */
		*recv++ = I2C_ReceiveData(I2C1 );
 8000764:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8000768:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800076c:	f001 f818 	bl	80017a0 <I2C_ReceiveData>
 8000770:	f805 0b01 	strb.w	r0, [r5], #1
			return false;
		wcount--;
	}
	Wire1.status = SRC_ADDRESS_SENT;
	wcount = 5;
	for (i = 1; i < lim; i++) {
 8000774:	454d      	cmp	r5, r9
			if (wcount == 0)
				return false;
			wcount--;
		}
		/* Read a byte from the EEPROM */
		*recv++ = I2C_ReceiveData(I2C1 );
 8000776:	462e      	mov	r6, r5
			return false;
		wcount--;
	}
	Wire1.status = SRC_ADDRESS_SENT;
	wcount = 5;
	for (i = 1; i < lim; i++) {
 8000778:	d1df      	bne.n	800073a <i2c_receive+0xe2>
		Wire1.status = BYTE_RECEIVED;
	}
	Wire1.status = BEFORELAST_BYTE_RECEIVED;

	/* Disable Acknowledgement */
	I2C_AcknowledgeConfig(I2C1, DISABLE);
 800077a:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
		}
		/* Read a byte from the EEPROM */
		*recv++ = I2C_ReceiveData(I2C1 );
		Wire1.status = BYTE_RECEIVED;
	}
	Wire1.status = BEFORELAST_BYTE_RECEIVED;
 800077e:	230a      	movs	r3, #10

	/* Disable Acknowledgement */
	I2C_AcknowledgeConfig(I2C1, DISABLE);
 8000780:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000784:	2100      	movs	r1, #0
		}
		/* Read a byte from the EEPROM */
		*recv++ = I2C_ReceiveData(I2C1 );
		Wire1.status = BYTE_RECEIVED;
	}
	Wire1.status = BEFORELAST_BYTE_RECEIVED;
 8000786:	7263      	strb	r3, [r4, #9]

	/* Disable Acknowledgement */
	I2C_AcknowledgeConfig(I2C1, DISABLE);
 8000788:	f000 ff7a 	bl	8001680 <I2C_AcknowledgeConfig>
	/* Send STOP Condition */
	I2C_GenerateSTOP(I2C1, ENABLE);
 800078c:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8000790:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000794:	2101      	movs	r1, #1
 8000796:	f000 ff5b 	bl	8001650 <I2C_GenerateSTOP>
	Wire1.status = LAST_BYTE_READY;
 800079a:	230b      	movs	r3, #11
 800079c:	7263      	strb	r3, [r4, #9]

	wcount = 5;
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_RECEIVED )) {
 800079e:	2506      	movs	r5, #6
 80007a0:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 80007a4:	2140      	movs	r1, #64	; 0x40
 80007a6:	f2c0 0103 	movt	r1, #3
 80007aa:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80007ae:	f001 f85d 	bl	800186c <I2C_CheckEvent>
 80007b2:	b938      	cbnz	r0, 80007c4 <i2c_receive+0x16c>
		delay_us(667);
 80007b4:	f240 209b 	movw	r0, #667	; 0x29b
 80007b8:	f7ff fd56 	bl	8000268 <delay_us>
		if (wcount == 0)
 80007bc:	3d01      	subs	r5, #1
 80007be:	d1ef      	bne.n	80007a0 <i2c_receive+0x148>
			return false;
 80007c0:	4628      	mov	r0, r5
 80007c2:	e755      	b.n	8000670 <i2c_receive+0x18>
		wcount--;
	}
	/* Read a byte from the EEPROM */
	*recv = I2C_ReceiveData(I2C1 );
 80007c4:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 80007c8:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80007cc:	f000 ffe8 	bl	80017a0 <I2C_ReceiveData>
 80007d0:	7030      	strb	r0, [r6, #0]
	Wire1.status = RECEIVE_BYTE_COMPLETED;

	/* Enable Acknowledgement to be ready for another reception */
	I2C_AcknowledgeConfig(I2C1, ENABLE);
 80007d2:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
			return false;
		wcount--;
	}
	/* Read a byte from the EEPROM */
	*recv = I2C_ReceiveData(I2C1 );
	Wire1.status = RECEIVE_BYTE_COMPLETED;
 80007d6:	230c      	movs	r3, #12

	/* Enable Acknowledgement to be ready for another reception */
	I2C_AcknowledgeConfig(I2C1, ENABLE);
 80007d8:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80007dc:	2101      	movs	r1, #1
			return false;
		wcount--;
	}
	/* Read a byte from the EEPROM */
	*recv = I2C_ReceiveData(I2C1 );
	Wire1.status = RECEIVE_BYTE_COMPLETED;
 80007de:	7263      	strb	r3, [r4, #9]

	/* Enable Acknowledgement to be ready for another reception */
	I2C_AcknowledgeConfig(I2C1, ENABLE);
 80007e0:	f000 ff4e 	bl	8001680 <I2C_AcknowledgeConfig>
	Wire1.status = NOT_READY;
 80007e4:	20ff      	movs	r0, #255	; 0xff
	Wire1.direction = DIRECTION_NOT_DEFINED;
 80007e6:	2300      	movs	r3, #0
	*recv = I2C_ReceiveData(I2C1 );
	Wire1.status = RECEIVE_BYTE_COMPLETED;

	/* Enable Acknowledgement to be ready for another reception */
	I2C_AcknowledgeConfig(I2C1, ENABLE);
	Wire1.status = NOT_READY;
 80007e8:	7260      	strb	r0, [r4, #9]
	Wire1.direction = DIRECTION_NOT_DEFINED;
 80007ea:	72a3      	strb	r3, [r4, #10]

	return true;
 80007ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80007f0:	200009ac 	.word	0x200009ac

080007f4 <i2c_transmit>:
	Wire1.direction = DIRECTION_NOT_DEFINED;

	return true;
}

boolean i2c_transmit(uint8_t addr, uint8_t * data, uint16_t length) {
 80007f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint16_t i;
	uint32_t wcount;

	Wire1.direction = TRANSMITTER;
 80007f8:	4c21      	ldr	r4, [pc, #132]	; (8000880 <i2c_transmit+0x8c>)
 80007fa:	2301      	movs	r3, #1
	Wire1.direction = DIRECTION_NOT_DEFINED;

	return true;
}

boolean i2c_transmit(uint8_t addr, uint8_t * data, uint16_t length) {
 80007fc:	460d      	mov	r5, r1
 80007fe:	4690      	mov	r8, r2
	uint16_t i;
	uint32_t wcount;

	Wire1.direction = TRANSMITTER;
 8000800:	72a3      	strb	r3, [r4, #10]
	//
	if ( !i2c_start(addr) )
 8000802:	f7ff fed1 	bl	80005a8 <i2c_start>
 8000806:	2800      	cmp	r0, #0
 8000808:	d038      	beq.n	800087c <i2c_transmit+0x88>
			return false;
	}
	i2c1_status = DST_ADDRESS_SENT;
*/
	wcount = 5;
	for (i = 0; i < length; i++) {
 800080a:	f1b8 0f00 	cmp.w	r8, #0
 800080e:	d025      	beq.n	800085c <i2c_transmit+0x68>
 8000810:	2605      	movs	r6, #5
 8000812:	2700      	movs	r7, #0
		I2C_SendData(I2C1, data[i]);
		Wire1.status = BYTE_TRANSMITTING;
 8000814:	f04f 0904 	mov.w	r9, #4
			delay_us(667);
			if (wcount == 0)
				return false;
			wcount--;
		}
		Wire1.status = BYTE_TRANSMITTED;
 8000818:	46b2      	mov	sl, r6
	}
	i2c1_status = DST_ADDRESS_SENT;
*/
	wcount = 5;
	for (i = 0; i < length; i++) {
		I2C_SendData(I2C1, data[i]);
 800081a:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 800081e:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000822:	5de9      	ldrb	r1, [r5, r7]
 8000824:	f000 ffba 	bl	800179c <I2C_SendData>
		Wire1.status = BYTE_TRANSMITTING;
 8000828:	f884 9009 	strb.w	r9, [r4, #9]
		// Test on EV8 and clear it
		while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED )) {
 800082c:	e005      	b.n	800083a <i2c_transmit+0x46>
			delay_us(667);
 800082e:	f240 209b 	movw	r0, #667	; 0x29b
 8000832:	f7ff fd19 	bl	8000268 <delay_us>
			if (wcount == 0)
 8000836:	b306      	cbz	r6, 800087a <i2c_transmit+0x86>
				return false;
			wcount--;
 8000838:	3e01      	subs	r6, #1
	wcount = 5;
	for (i = 0; i < length; i++) {
		I2C_SendData(I2C1, data[i]);
		Wire1.status = BYTE_TRANSMITTING;
		// Test on EV8 and clear it
		while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED )) {
 800083a:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 800083e:	2184      	movs	r1, #132	; 0x84
 8000840:	f2c0 0107 	movt	r1, #7
 8000844:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000848:	f001 f810 	bl	800186c <I2C_CheckEvent>
 800084c:	2800      	cmp	r0, #0
 800084e:	d0ee      	beq.n	800082e <i2c_transmit+0x3a>
			delay_us(667);
			if (wcount == 0)
				return false;
			wcount--;
		}
		Wire1.status = BYTE_TRANSMITTED;
 8000850:	3701      	adds	r7, #1
			return false;
	}
	i2c1_status = DST_ADDRESS_SENT;
*/
	wcount = 5;
	for (i = 0; i < length; i++) {
 8000852:	b2bb      	uxth	r3, r7
 8000854:	4598      	cmp	r8, r3
			delay_us(667);
			if (wcount == 0)
				return false;
			wcount--;
		}
		Wire1.status = BYTE_TRANSMITTED;
 8000856:	f884 a009 	strb.w	sl, [r4, #9]
			return false;
	}
	i2c1_status = DST_ADDRESS_SENT;
*/
	wcount = 5;
	for (i = 0; i < length; i++) {
 800085a:	d8de      	bhi.n	800081a <i2c_transmit+0x26>
		}
		Wire1.status = BYTE_TRANSMITTED;
	}
	Wire1.status = TRANSMISSION_COMPLETED;

	I2C_GenerateSTOP(I2C1, ENABLE);
 800085c:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
				return false;
			wcount--;
		}
		Wire1.status = BYTE_TRANSMITTED;
	}
	Wire1.status = TRANSMISSION_COMPLETED;
 8000860:	2306      	movs	r3, #6

	I2C_GenerateSTOP(I2C1, ENABLE);
 8000862:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000866:	2101      	movs	r1, #1
				return false;
			wcount--;
		}
		Wire1.status = BYTE_TRANSMITTED;
	}
	Wire1.status = TRANSMISSION_COMPLETED;
 8000868:	7263      	strb	r3, [r4, #9]

	I2C_GenerateSTOP(I2C1, ENABLE);
 800086a:	f000 fef1 	bl	8001650 <I2C_GenerateSTOP>
	Wire1.status = NOT_READY;
 800086e:	20ff      	movs	r0, #255	; 0xff
	Wire1.direction = DIRECTION_NOT_DEFINED;
 8000870:	2300      	movs	r3, #0
		Wire1.status = BYTE_TRANSMITTED;
	}
	Wire1.status = TRANSMISSION_COMPLETED;

	I2C_GenerateSTOP(I2C1, ENABLE);
	Wire1.status = NOT_READY;
 8000872:	7260      	strb	r0, [r4, #9]
	Wire1.direction = DIRECTION_NOT_DEFINED;
 8000874:	72a3      	strb	r3, [r4, #10]

	return true;
 8000876:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		Wire1.status = BYTE_TRANSMITTING;
		// Test on EV8 and clear it
		while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED )) {
			delay_us(667);
			if (wcount == 0)
				return false;
 800087a:	4630      	mov	r0, r6
	I2C_GenerateSTOP(I2C1, ENABLE);
	Wire1.status = NOT_READY;
	Wire1.direction = DIRECTION_NOT_DEFINED;

	return true;
}
 800087c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000880:	200009ac 	.word	0x200009ac

08000884 <spi_begin>:
#include "spi.h"

//SPI_TypeDef * spix[] = { SPI1, SPI2, SPI3 };

void spi_begin(SPI_TypeDef * SPIx, GPIOPin sck, GPIOPin miso, GPIOPin mosi,
		GPIOPin nss) {
 8000884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
//	GPIOPin sck, miso, mosi, nss;

	/* PCLK2 = HCLK/2 */
	//RCC_PCLK2Config(RCC_HCLK_Div2);
//	SPIx = spix[spibus];
	if (SPIx == SPI1) {
 8000888:	f44f 5440 	mov.w	r4, #12288	; 0x3000
#include "spi.h"

//SPI_TypeDef * spix[] = { SPI1, SPI2, SPI3 };

void spi_begin(SPI_TypeDef * SPIx, GPIOPin sck, GPIOPin miso, GPIOPin mosi,
		GPIOPin nss) {
 800088c:	b08b      	sub	sp, #44	; 0x2c
//	GPIOPin sck, miso, mosi, nss;

	/* PCLK2 = HCLK/2 */
	//RCC_PCLK2Config(RCC_HCLK_Div2);
//	SPIx = spix[spibus];
	if (SPIx == SPI1) {
 800088e:	f2c4 0401 	movt	r4, #16385	; 0x4001
 8000892:	42a0      	cmp	r0, r4
#include "spi.h"

//SPI_TypeDef * spix[] = { SPI1, SPI2, SPI3 };

void spi_begin(SPI_TypeDef * SPIx, GPIOPin sck, GPIOPin miso, GPIOPin mosi,
		GPIOPin nss) {
 8000894:	4681      	mov	r9, r0
 8000896:	460f      	mov	r7, r1
 8000898:	4616      	mov	r6, r2
 800089a:	4698      	mov	r8, r3
 800089c:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
//	GPIOPin sck, miso, mosi, nss;

	/* PCLK2 = HCLK/2 */
	//RCC_PCLK2Config(RCC_HCLK_Div2);
//	SPIx = spix[spibus];
	if (SPIx == SPI1) {
 80008a0:	f000 80ac 	beq.w	80009fc <spi_begin+0x178>
//		 sck = PA5; // PB3
//		 miso = PA6; // PB4
//		 mosi = PA7; // PB5
//		 nss = PA4; // PA15
//		break;
	} else if ( SPIx == SPI2 ) {
 80008a4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80008a8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80008ac:	4298      	cmp	r0, r3
 80008ae:	f000 809d 	beq.w	80009ec <spi_begin+0x168>
		// PB12, 13, 14, 15
//		break;
	} else {
//	case SPI3Bus:
//	default:
		RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 80008b2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80008b6:	2101      	movs	r1, #1
 80008b8:	f001 f9f0 	bl	8001c9c <RCC_APB1PeriphResetCmd>
		af = GPIO_AF_SPI3;
 80008bc:	f04f 0b06 	mov.w	fp, #6
//		 mosi = PB5;
//		 nss = PA15; // PA4;
//		break;
	}

	GPIOMode(PinPort(sck), PinBit(sck), GPIO_Mode_AF, GPIO_Speed_25MHz,
 80008c0:	4638      	mov	r0, r7
 80008c2:	f7ff fcfd 	bl	80002c0 <PinPort>
 80008c6:	4684      	mov	ip, r0
 80008c8:	4638      	mov	r0, r7
 80008ca:	f8cd c00c 	str.w	ip, [sp, #12]
 80008ce:	f7ff fd01 	bl	80002d4 <PinBit>
 80008d2:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80008d6:	2401      	movs	r4, #1
 80008d8:	2500      	movs	r5, #0
 80008da:	4601      	mov	r1, r0
 80008dc:	2202      	movs	r2, #2
 80008de:	4623      	mov	r3, r4
 80008e0:	4660      	mov	r0, ip
 80008e2:	9500      	str	r5, [sp, #0]
 80008e4:	9401      	str	r4, [sp, #4]
 80008e6:	f7ff fd63 	bl	80003b0 <GPIOMode>
			GPIO_OType_PP, GPIO_PuPd_UP);
	GPIOMode(PinPort(miso), PinBit(miso), GPIO_Mode_AF, GPIO_Speed_25MHz,
 80008ea:	4630      	mov	r0, r6
 80008ec:	f7ff fce8 	bl	80002c0 <PinPort>
 80008f0:	4684      	mov	ip, r0
 80008f2:	4630      	mov	r0, r6
 80008f4:	f8cd c00c 	str.w	ip, [sp, #12]
 80008f8:	f7ff fcec 	bl	80002d4 <PinBit>
 80008fc:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8000900:	9500      	str	r5, [sp, #0]
 8000902:	4601      	mov	r1, r0
 8000904:	2202      	movs	r2, #2
 8000906:	4623      	mov	r3, r4
 8000908:	4660      	mov	r0, ip
 800090a:	9401      	str	r4, [sp, #4]
 800090c:	f7ff fd50 	bl	80003b0 <GPIOMode>
			GPIO_OType_PP, GPIO_PuPd_UP);
	GPIOMode(PinPort(mosi), PinBit(mosi), GPIO_Mode_AF, GPIO_Speed_25MHz,
 8000910:	4640      	mov	r0, r8
 8000912:	f7ff fcd5 	bl	80002c0 <PinPort>
 8000916:	4684      	mov	ip, r0
 8000918:	4640      	mov	r0, r8
 800091a:	f8cd c00c 	str.w	ip, [sp, #12]
 800091e:	f7ff fcd9 	bl	80002d4 <PinBit>
 8000922:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8000926:	9500      	str	r5, [sp, #0]
 8000928:	4601      	mov	r1, r0
 800092a:	2202      	movs	r2, #2
 800092c:	4660      	mov	r0, ip
 800092e:	4623      	mov	r3, r4
 8000930:	9401      	str	r4, [sp, #4]
 8000932:	f7ff fd3d 	bl	80003b0 <GPIOMode>
			GPIO_OType_PP, GPIO_PuPd_UP);
	GPIO_PinAFConfig(PinPort(sck), PinSource(sck), af);
 8000936:	4638      	mov	r0, r7
 8000938:	f7ff fcc2 	bl	80002c0 <PinPort>
 800093c:	4603      	mov	r3, r0
 800093e:	4638      	mov	r0, r7
 8000940:	9303      	str	r3, [sp, #12]
 8000942:	f7ff fccf 	bl	80002e4 <PinSource>
 8000946:	9b03      	ldr	r3, [sp, #12]
 8000948:	4601      	mov	r1, r0
 800094a:	465a      	mov	r2, fp
 800094c:	4618      	mov	r0, r3
 800094e:	f000 fd95 	bl	800147c <GPIO_PinAFConfig>
	GPIO_PinAFConfig(PinPort(miso), PinSource(miso), af);
 8000952:	4630      	mov	r0, r6
 8000954:	f7ff fcb4 	bl	80002c0 <PinPort>
 8000958:	4607      	mov	r7, r0
 800095a:	4630      	mov	r0, r6
 800095c:	f7ff fcc2 	bl	80002e4 <PinSource>
 8000960:	465a      	mov	r2, fp
 8000962:	4601      	mov	r1, r0
 8000964:	4638      	mov	r0, r7
 8000966:	f000 fd89 	bl	800147c <GPIO_PinAFConfig>
	GPIO_PinAFConfig(PinPort(mosi), PinSource(mosi), af);
 800096a:	4640      	mov	r0, r8
 800096c:	f7ff fca8 	bl	80002c0 <PinPort>
 8000970:	4606      	mov	r6, r0
 8000972:	4640      	mov	r0, r8
 8000974:	f7ff fcb6 	bl	80002e4 <PinSource>
 8000978:	465a      	mov	r2, fp
 800097a:	4601      	mov	r1, r0
 800097c:	4630      	mov	r0, r6
 800097e:	f000 fd7d 	bl	800147c <GPIO_PinAFConfig>
	// nSS by software
	GPIOMode(PinPort(nss), PinBit(nss), GPIO_Mode_OUT, GPIO_Speed_25MHz,
 8000982:	4650      	mov	r0, sl
 8000984:	f7ff fc9c 	bl	80002c0 <PinPort>
 8000988:	4606      	mov	r6, r0
 800098a:	4650      	mov	r0, sl
 800098c:	f7ff fca2 	bl	80002d4 <PinBit>
 8000990:	4622      	mov	r2, r4
 8000992:	4623      	mov	r3, r4
 8000994:	4601      	mov	r1, r0
 8000996:	4630      	mov	r0, r6
 8000998:	9500      	str	r5, [sp, #0]
 800099a:	9401      	str	r4, [sp, #4]
 800099c:	f7ff fd08 	bl	80003b0 <GPIOMode>
			GPIO_OType_PP, GPIO_PuPd_UP);
	digitalWrite(nss, HIGH);
 80009a0:	4650      	mov	r0, sl
 80009a2:	4621      	mov	r1, r4
 80009a4:	f7ff fcca 	bl	800033c <digitalWrite>
	//GPIO_PinAFConfig(PinPort(nss), PinSource(nss), af);

	SPI_InitStruct.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
	SPI_InitStruct.SPI_Mode = SPI_Mode_Master;
 80009a8:	f44f 7382 	mov.w	r3, #260	; 0x104
 80009ac:	f8ad 3016 	strh.w	r3, [sp, #22]
	SPI_InitStruct.SPI_DataSize = SPI_DataSize_8b;
	SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;
	SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
	SPI_InitStruct.SPI_NSS = SPI_NSS_Soft;
 80009b0:	f44f 7300 	mov.w	r3, #512	; 0x200
	SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_8;
	SPI_InitStruct.SPI_FirstBit = SPI_FirstBit_MSB;
	SPI_InitStruct.SPI_CRCPolynomial = SPI_CRC_Rx;

	SPI_Init(SPIx, &SPI_InitStruct);
 80009b4:	4648      	mov	r0, r9
 80009b6:	a905      	add	r1, sp, #20
	SPI_InitStruct.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
	SPI_InitStruct.SPI_Mode = SPI_Mode_Master;
	SPI_InitStruct.SPI_DataSize = SPI_DataSize_8b;
	SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;
	SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
	SPI_InitStruct.SPI_NSS = SPI_NSS_Soft;
 80009b8:	f8ad 301e 	strh.w	r3, [sp, #30]
	SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_8;
 80009bc:	2310      	movs	r3, #16
	GPIOMode(PinPort(nss), PinBit(nss), GPIO_Mode_OUT, GPIO_Speed_25MHz,
			GPIO_OType_PP, GPIO_PuPd_UP);
	digitalWrite(nss, HIGH);
	//GPIO_PinAFConfig(PinPort(nss), PinSource(nss), af);

	SPI_InitStruct.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 80009be:	f8ad 5014 	strh.w	r5, [sp, #20]
	SPI_InitStruct.SPI_Mode = SPI_Mode_Master;
	SPI_InitStruct.SPI_DataSize = SPI_DataSize_8b;
 80009c2:	f8ad 5018 	strh.w	r5, [sp, #24]
	SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;
 80009c6:	f8ad 501a 	strh.w	r5, [sp, #26]
	SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
 80009ca:	f8ad 501c 	strh.w	r5, [sp, #28]
	SPI_InitStruct.SPI_NSS = SPI_NSS_Soft;
	SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_8;
 80009ce:	f8ad 3020 	strh.w	r3, [sp, #32]
	SPI_InitStruct.SPI_FirstBit = SPI_FirstBit_MSB;
 80009d2:	f8ad 5022 	strh.w	r5, [sp, #34]	; 0x22
	SPI_InitStruct.SPI_CRCPolynomial = SPI_CRC_Rx;
 80009d6:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24

	SPI_Init(SPIx, &SPI_InitStruct);
 80009da:	f001 fa39 	bl	8001e50 <SPI_Init>

	SPI_Cmd(SPIx, ENABLE);
 80009de:	4648      	mov	r0, r9
 80009e0:	4621      	mov	r1, r4
 80009e2:	f001 fae9 	bl	8001fb8 <SPI_Cmd>
	 *              - Enable or disable the SS output using the SPI_SSOutputCmd() function
	 *
	 *          10. To use the CRC Hardware calculation feature refer to the Peripheral
	 *              CRC hardware Calculation subsection.
	 */
}
 80009e6:	b00b      	add	sp, #44	; 0x2c
 80009e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
//		 mosi = PA7; // PB5
//		 nss = PA4; // PA15
//		break;
	} else if ( SPIx == SPI2 ) {
//	case SPI2Bus:
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE);
 80009ec:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80009f0:	2101      	movs	r1, #1
 80009f2:	f001 f90d 	bl	8001c10 <RCC_APB1PeriphClockCmd>
		af = GPIO_AF_SPI2;
 80009f6:	f04f 0b05 	mov.w	fp, #5
 80009fa:	e761      	b.n	80008c0 <spi_begin+0x3c>
	/* PCLK2 = HCLK/2 */
	//RCC_PCLK2Config(RCC_HCLK_Div2);
//	SPIx = spix[spibus];
	if (SPIx == SPI1) {
//	case SPI1Bus:
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
 80009fc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000a00:	2101      	movs	r1, #1
 8000a02:	f001 f913 	bl	8001c2c <RCC_APB2PeriphClockCmd>
		af = GPIO_AF_SPI1;
 8000a06:	f04f 0b05 	mov.w	fp, #5
 8000a0a:	e759      	b.n	80008c0 <spi_begin+0x3c>

08000a0c <spi_transfer>:
	 *          10. To use the CRC Hardware calculation feature refer to the Peripheral
	 *              CRC hardware Calculation subsection.
	 */
}

void spi_transfer(SPI_TypeDef * SPIx, /*SPIBus spibus,*/ uint8_t * data, uint16_t nbytes) {
 8000a0c:	b570      	push	{r4, r5, r6, lr}
//	SPI_TypeDef * SPIx = spix[spibus];
	uint8_t rcvdata;

	for (; nbytes; nbytes--) {
 8000a0e:	4615      	mov	r5, r2
	 *          10. To use the CRC Hardware calculation feature refer to the Peripheral
	 *              CRC hardware Calculation subsection.
	 */
}

void spi_transfer(SPI_TypeDef * SPIx, /*SPIBus spibus,*/ uint8_t * data, uint16_t nbytes) {
 8000a10:	4604      	mov	r4, r0
//	SPI_TypeDef * SPIx = spix[spibus];
	uint8_t rcvdata;

	for (; nbytes; nbytes--) {
 8000a12:	b1ca      	cbz	r2, 8000a48 <spi_transfer+0x3c>
	 *          10. To use the CRC Hardware calculation feature refer to the Peripheral
	 *              CRC hardware Calculation subsection.
	 */
}

void spi_transfer(SPI_TypeDef * SPIx, /*SPIBus spibus,*/ uint8_t * data, uint16_t nbytes) {
 8000a14:	1e4e      	subs	r6, r1, #1
//	SPI_TypeDef * SPIx = spix[spibus];
	uint8_t rcvdata;

	for (; nbytes; nbytes--) {
		/* Wait for SPIx Tx buffer empty */
		while (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_TXE ) == RESET)
 8000a16:	4620      	mov	r0, r4
 8000a18:	2102      	movs	r1, #2
 8000a1a:	f001 fb99 	bl	8002150 <SPI_I2S_GetFlagStatus>
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	d0f9      	beq.n	8000a16 <spi_transfer+0xa>
			;
		SPI_I2S_SendData(SPIx, (uint16_t) *data);
 8000a22:	4620      	mov	r0, r4
 8000a24:	7871      	ldrb	r1, [r6, #1]
 8000a26:	f001 fb57 	bl	80020d8 <SPI_I2S_SendData>
		/* Wait for SPIx data reception */
		while (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_RXNE ) == RESET)
 8000a2a:	4620      	mov	r0, r4
 8000a2c:	2101      	movs	r1, #1
 8000a2e:	f001 fb8f 	bl	8002150 <SPI_I2S_GetFlagStatus>
 8000a32:	2800      	cmp	r0, #0
 8000a34:	d0f9      	beq.n	8000a2a <spi_transfer+0x1e>
			;
		/* Read SPIy received data */
		rcvdata = SPI_I2S_ReceiveData(SPIx);
 8000a36:	4620      	mov	r0, r4
 8000a38:	f001 fb4a 	bl	80020d0 <SPI_I2S_ReceiveData>

void spi_transfer(SPI_TypeDef * SPIx, /*SPIBus spibus,*/ uint8_t * data, uint16_t nbytes) {
//	SPI_TypeDef * SPIx = spix[spibus];
	uint8_t rcvdata;

	for (; nbytes; nbytes--) {
 8000a3c:	3d01      	subs	r5, #1
 8000a3e:	b2ad      	uxth	r5, r5
		SPI_I2S_SendData(SPIx, (uint16_t) *data);
		/* Wait for SPIx data reception */
		while (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_RXNE ) == RESET)
			;
		/* Read SPIy received data */
		rcvdata = SPI_I2S_ReceiveData(SPIx);
 8000a40:	f806 0f01 	strb.w	r0, [r6, #1]!

void spi_transfer(SPI_TypeDef * SPIx, /*SPIBus spibus,*/ uint8_t * data, uint16_t nbytes) {
//	SPI_TypeDef * SPIx = spix[spibus];
	uint8_t rcvdata;

	for (; nbytes; nbytes--) {
 8000a44:	2d00      	cmp	r5, #0
 8000a46:	d1e6      	bne.n	8000a16 <spi_transfer+0xa>
 8000a48:	bd70      	pop	{r4, r5, r6, pc}
 8000a4a:	bf00      	nop

08000a4c <SysTick_Handler>:
#include "systick.h"

volatile uint32_t _systick_counter;

void SysTick_Handler(void) {
	_systick_counter++; /* increment timeTicks counter */
 8000a4c:	f640 13d0 	movw	r3, #2512	; 0x9d0
 8000a50:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000a54:	681a      	ldr	r2, [r3, #0]
 8000a56:	3201      	adds	r2, #1
 8000a58:	601a      	str	r2, [r3, #0]
}
 8000a5a:	4770      	bx	lr

08000a5c <SysTick_delay>:

void SysTick_delay(const uint32_t dlyTicks) {
	uint32_t currTicks = _systick_counter;
 8000a5c:	4b03      	ldr	r3, [pc, #12]	; (8000a6c <SysTick_delay+0x10>)
 8000a5e:	681a      	ldr	r2, [r3, #0]

	while ((_systick_counter - currTicks) < dlyTicks)
 8000a60:	6819      	ldr	r1, [r3, #0]
 8000a62:	1a89      	subs	r1, r1, r2
 8000a64:	4281      	cmp	r1, r0
 8000a66:	d3fb      	bcc.n	8000a60 <SysTick_delay+0x4>
		;
}
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	200009d0 	.word	0x200009d0

08000a70 <SysTick_Start>:

void SysTick_Start(void) {
 8000a70:	b500      	push	{lr}
 8000a72:	b085      	sub	sp, #20
	RCC_ClocksTypeDef RCC_Clocks;
	  /* SysTick end of count event each 1ms */
	  RCC_GetClocksFreq(&RCC_Clocks);
 8000a74:	4668      	mov	r0, sp
 8000a76:	f001 f81d 	bl	8001ab4 <RCC_GetClocksFreq>
	  SysTick_Config(RCC_Clocks.HCLK_Frequency / 1000);
 8000a7a:	9901      	ldr	r1, [sp, #4]
 8000a7c:	f644 53d3 	movw	r3, #19923	; 0x4dd3
 8000a80:	f2c1 0362 	movt	r3, #4194	; 0x1062
 8000a84:	fba3 2101 	umull	r2, r1, r3, r1
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8000a88:	f24e 0310 	movw	r3, #57360	; 0xe010
 8000a8c:	f2ce 0300 	movt	r3, #57344	; 0xe000
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000a90:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 8000a94:	0989      	lsrs	r1, r1, #6
 8000a96:	f2ce 0200 	movt	r2, #57344	; 0xe000
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8000a9a:	3901      	subs	r1, #1
 8000a9c:	6059      	str	r1, [r3, #4]
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000a9e:	21f0      	movs	r1, #240	; 0xf0
 8000aa0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aa8:	2207      	movs	r2, #7
 8000aaa:	601a      	str	r2, [r3, #0]
		// Handle Error
		while (1)
			;
	}
*/
}
 8000aac:	b005      	add	sp, #20
 8000aae:	bd00      	pop	{pc}

08000ab0 <SysTick_count>:

uint32_t SysTick_count() {
	return _systick_counter;
 8000ab0:	f640 13d0 	movw	r3, #2512	; 0x9d0
 8000ab4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ab8:	6818      	ldr	r0, [r3, #0]
}
 8000aba:	4770      	bx	lr

08000abc <buffer_clear>:

Serial Serial1, Serial2, Serial3, Serial4, Serial5, Serial6;
USARTRing rxring[6], txring[6];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 8000abc:	2300      	movs	r3, #0
 8000abe:	f8a0 3100 	strh.w	r3, [r0, #256]	; 0x100
	r->tail = 0;
 8000ac2:	f8a0 3102 	strh.w	r3, [r0, #258]	; 0x102
	r->count = 0;
 8000ac6:	f8a0 3104 	strh.w	r3, [r0, #260]	; 0x104
}
 8000aca:	4770      	bx	lr

08000acc <buffer_count>:

uint16_t buffer_count(USARTRing * r) {
	return r->count;
}
 8000acc:	f8b0 0104 	ldrh.w	r0, [r0, #260]	; 0x104
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <buffer_is_full>:

uint8_t buffer_is_full(USARTRing * r) {
	if ((r->head == r->tail) && (r->count > 0)) {
 8000ad4:	f9b0 2100 	ldrsh.w	r2, [r0, #256]	; 0x100
 8000ad8:	f9b0 3102 	ldrsh.w	r3, [r0, #258]	; 0x102
 8000adc:	429a      	cmp	r2, r3
 8000ade:	d001      	beq.n	8000ae4 <buffer_is_full+0x10>
		return 1;
	}
	return 0;
 8000ae0:	2000      	movs	r0, #0
}
 8000ae2:	4770      	bx	lr

uint16_t buffer_count(USARTRing * r) {
	return r->count;
}

uint8_t buffer_is_full(USARTRing * r) {
 8000ae4:	f8b0 0104 	ldrh.w	r0, [r0, #260]	; 0x104
	if ((r->head == r->tail) && (r->count > 0)) {
		return 1;
 8000ae8:	3000      	adds	r0, #0
 8000aea:	bf18      	it	ne
 8000aec:	2001      	movne	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <buffer_enque>:
	}
	return 0;
}

uint16_t buffer_enque(USARTRing * r, uint16_t w) {
 8000af0:	4603      	mov	r3, r0
uint16_t buffer_count(USARTRing * r) {
	return r->count;
}

uint8_t buffer_is_full(USARTRing * r) {
	if ((r->head == r->tail) && (r->count > 0)) {
 8000af2:	f8b0 0100 	ldrh.w	r0, [r0, #256]	; 0x100
		return 1;
	}
	return 0;
}

uint16_t buffer_enque(USARTRing * r, uint16_t w) {
 8000af6:	b430      	push	{r4, r5}
uint16_t buffer_count(USARTRing * r) {
	return r->count;
}

uint8_t buffer_is_full(USARTRing * r) {
	if ((r->head == r->tail) && (r->count > 0)) {
 8000af8:	f9b3 4102 	ldrsh.w	r4, [r3, #258]	; 0x102
 8000afc:	b202      	sxth	r2, r0
 8000afe:	4294      	cmp	r4, r2
 8000b00:	d013      	beq.n	8000b2a <buffer_enque+0x3a>
}

uint16_t buffer_enque(USARTRing * r, uint16_t w) {
	if (buffer_is_full(r))
		return 0xffff;
	r->buf[r->head++] = w;
 8000b02:	3001      	adds	r0, #1
	r->count++;
	r->head %= USART_BUFFER_SIZE;
 8000b04:	b200      	sxth	r0, r0
 8000b06:	17c4      	asrs	r4, r0, #31
 8000b08:	0e64      	lsrs	r4, r4, #25

uint16_t buffer_enque(USARTRing * r, uint16_t w) {
	if (buffer_is_full(r))
		return 0xffff;
	r->buf[r->head++] = w;
	r->count++;
 8000b0a:	f8b3 5104 	ldrh.w	r5, [r3, #260]	; 0x104
}

uint16_t buffer_enque(USARTRing * r, uint16_t w) {
	if (buffer_is_full(r))
		return 0xffff;
	r->buf[r->head++] = w;
 8000b0e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	r->count++;
	r->head %= USART_BUFFER_SIZE;
 8000b12:	1900      	adds	r0, r0, r4
 8000b14:	f000 007f 	and.w	r0, r0, #127	; 0x7f

uint16_t buffer_enque(USARTRing * r, uint16_t w) {
	if (buffer_is_full(r))
		return 0xffff;
	r->buf[r->head++] = w;
	r->count++;
 8000b18:	1c6a      	adds	r2, r5, #1
	r->head %= USART_BUFFER_SIZE;
 8000b1a:	1b04      	subs	r4, r0, r4

uint16_t buffer_enque(USARTRing * r, uint16_t w) {
	if (buffer_is_full(r))
		return 0xffff;
	r->buf[r->head++] = w;
	r->count++;
 8000b1c:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
	r->head %= USART_BUFFER_SIZE;
 8000b20:	f8a3 4100 	strh.w	r4, [r3, #256]	; 0x100
	return w;
}
 8000b24:	4608      	mov	r0, r1
 8000b26:	bc30      	pop	{r4, r5}
 8000b28:	4770      	bx	lr
uint16_t buffer_count(USARTRing * r) {
	return r->count;
}

uint8_t buffer_is_full(USARTRing * r) {
	if ((r->head == r->tail) && (r->count > 0)) {
 8000b2a:	f8b3 4104 	ldrh.w	r4, [r3, #260]	; 0x104
 8000b2e:	2c00      	cmp	r4, #0
 8000b30:	d0e7      	beq.n	8000b02 <buffer_enque+0x12>
	return 0;
}

uint16_t buffer_enque(USARTRing * r, uint16_t w) {
	if (buffer_is_full(r))
		return 0xffff;
 8000b32:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000b36:	e7f5      	b.n	8000b24 <buffer_enque+0x34>

08000b38 <buffer_deque>:
	r->tail = 0;
	r->count = 0;
}

uint16_t buffer_count(USARTRing * r) {
	return r->count;
 8000b38:	f8b0 2104 	ldrh.w	r2, [r0, #260]	; 0x104
	r->count++;
	r->head %= USART_BUFFER_SIZE;
	return w;
}

uint16_t buffer_deque(USARTRing * r) {
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	b410      	push	{r4}
	uint16_t w;
	if (buffer_count(r) == 0)
		return 0xffff;
 8000b40:	f64f 70ff 	movw	r0, #65535	; 0xffff
	return w;
}

uint16_t buffer_deque(USARTRing * r) {
	uint16_t w;
	if (buffer_count(r) == 0)
 8000b44:	b90a      	cbnz	r2, 8000b4a <buffer_deque+0x12>
		return 0xffff;
	w = r->buf[r->tail++];
	r->count--;
	r->tail %= USART_BUFFER_SIZE;
	return w;
}
 8000b46:	bc10      	pop	{r4}
 8000b48:	4770      	bx	lr

uint16_t buffer_deque(USARTRing * r) {
	uint16_t w;
	if (buffer_count(r) == 0)
		return 0xffff;
	w = r->buf[r->tail++];
 8000b4a:	f8b3 0102 	ldrh.w	r0, [r3, #258]	; 0x102
 8000b4e:	1c44      	adds	r4, r0, #1
	r->count--;
	r->tail %= USART_BUFFER_SIZE;
 8000b50:	b224      	sxth	r4, r4
 8000b52:	17e1      	asrs	r1, r4, #31
 8000b54:	0e49      	lsrs	r1, r1, #25
 8000b56:	1864      	adds	r4, r4, r1

uint16_t buffer_deque(USARTRing * r) {
	uint16_t w;
	if (buffer_count(r) == 0)
		return 0xffff;
	w = r->buf[r->tail++];
 8000b58:	b200      	sxth	r0, r0
	r->count--;
	r->tail %= USART_BUFFER_SIZE;
 8000b5a:	f004 047f 	and.w	r4, r4, #127	; 0x7f
uint16_t buffer_deque(USARTRing * r) {
	uint16_t w;
	if (buffer_count(r) == 0)
		return 0xffff;
	w = r->buf[r->tail++];
	r->count--;
 8000b5e:	3a01      	subs	r2, #1
	r->tail %= USART_BUFFER_SIZE;
 8000b60:	1a61      	subs	r1, r4, r1

uint16_t buffer_deque(USARTRing * r) {
	uint16_t w;
	if (buffer_count(r) == 0)
		return 0xffff;
	w = r->buf[r->tail++];
 8000b62:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
	r->count--;
 8000b66:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
	r->tail %= USART_BUFFER_SIZE;
 8000b6a:	f8a3 1102 	strh.w	r1, [r3, #258]	; 0x102
 8000b6e:	e7ea      	b.n	8000b46 <buffer_deque+0xe>

08000b70 <buffer_peek>:
	return w;
}

uint16_t buffer_peek(USARTRing * r) {
	if (buffer_count(r) == 0)
 8000b70:	f8b0 3104 	ldrh.w	r3, [r0, #260]	; 0x104
 8000b74:	b913      	cbnz	r3, 8000b7c <buffer_peek+0xc>
		return 0xffff;
 8000b76:	f64f 70ff 	movw	r0, #65535	; 0xffff
	return r->buf[r->tail];
}
 8000b7a:	4770      	bx	lr
}

uint16_t buffer_peek(USARTRing * r) {
	if (buffer_count(r) == 0)
		return 0xffff;
	return r->buf[r->tail];
 8000b7c:	f9b0 3102 	ldrsh.w	r3, [r0, #258]	; 0x102
 8000b80:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop

08000b88 <usart_begin>:
}

void usart_begin(Serial * usx, GPIOPin rx, GPIOPin tx, uint32_t baud) {
 8000b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b8c:	469a      	mov	sl, r3
	NVIC_InitTypeDef NVIC_InitStructure; // this is used to configure the NVIC (nested vector interrupt controller)
	//
	uint8_t af = GPIO_AF_USART1;
	IRQn_Type irq = USART1_IRQn;

	if (usx == &Serial1) {
 8000b8e:	4b84      	ldr	r3, [pc, #528]	; (8000da0 <usart_begin+0x218>)
 8000b90:	4298      	cmp	r0, r3
	if (buffer_count(r) == 0)
		return 0xffff;
	return r->buf[r->tail];
}

void usart_begin(Serial * usx, GPIOPin rx, GPIOPin tx, uint32_t baud) {
 8000b92:	b089      	sub	sp, #36	; 0x24
 8000b94:	4605      	mov	r5, r0
 8000b96:	460f      	mov	r7, r1
 8000b98:	4616      	mov	r6, r2
	NVIC_InitTypeDef NVIC_InitStructure; // this is used to configure the NVIC (nested vector interrupt controller)
	//
	uint8_t af = GPIO_AF_USART1;
	IRQn_Type irq = USART1_IRQn;

	if (usx == &Serial1) {
 8000b9a:	f000 80ad 	beq.w	8000cf8 <usart_begin+0x170>
		irq = USART1_IRQn;
		usx->usid = USART1Serial;
		usx->USARTx = USART1;
		usx->rxring = &rxring[USART1Serial];
		usx->txring = &txring[USART1Serial];
	} else if (usx == &Serial2) {
 8000b9e:	4b81      	ldr	r3, [pc, #516]	; (8000da4 <usart_begin+0x21c>)
 8000ba0:	4298      	cmp	r0, r3
 8000ba2:	f000 80bd 	beq.w	8000d20 <usart_begin+0x198>
		irq = USART2_IRQn;
		usx->usid = USART2Serial;
		usx->USARTx = USART2;
		usx->rxring = &rxring[USART2Serial];
		usx->txring = &txring[USART2Serial];
	} else if (usx == &Serial3) {
 8000ba6:	4b80      	ldr	r3, [pc, #512]	; (8000da8 <usart_begin+0x220>)
 8000ba8:	4298      	cmp	r0, r3
 8000baa:	f000 80ce 	beq.w	8000d4a <usart_begin+0x1c2>
		irq = USART3_IRQn;
		usx->usid = USART3Serial;
		usx->USARTx = USART3;
		usx->rxring = &rxring[USART3Serial];
		usx->txring = &txring[USART3Serial];
	} else if (usx == &Serial4) {
 8000bae:	4b7f      	ldr	r3, [pc, #508]	; (8000dac <usart_begin+0x224>)
 8000bb0:	4298      	cmp	r0, r3
 8000bb2:	f000 80df 	beq.w	8000d74 <usart_begin+0x1ec>
		irq = UART4_IRQn;
		usx->usid = UART4Serial;
		usx->USARTx = UART4;
		usx->rxring = &rxring[UART4Serial];
		usx->txring = &txring[UART4Serial];
	} else if (usx == &Serial5) {
 8000bb6:	4b7e      	ldr	r3, [pc, #504]	; (8000db0 <usart_begin+0x228>)
 8000bb8:	4298      	cmp	r0, r3
 8000bba:	f000 8088 	beq.w	8000cce <usart_begin+0x146>
		usx->usid = UART5Serial;
		usx->USARTx = UART5;
		usx->rxring = &rxring[UART5Serial];
		usx->txring = &txring[UART5Serial];
	} else { // Serial6
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART6, ENABLE);
 8000bbe:	2020      	movs	r0, #32
 8000bc0:	2101      	movs	r1, #1
 8000bc2:	f001 f833 	bl	8001c2c <RCC_APB2PeriphClockCmd>
		af = GPIO_AF_USART6;
		irq = USART6_IRQn;
		usx->usid = USART6Serial;
		usx->USARTx = USART6;
 8000bc6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
		usx->rxring = &rxring[USART6Serial];
 8000bca:	4a7a      	ldr	r2, [pc, #488]	; (8000db4 <usart_begin+0x22c>)
	} else { // Serial6
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART6, ENABLE);
		af = GPIO_AF_USART6;
		irq = USART6_IRQn;
		usx->usid = USART6Serial;
		usx->USARTx = USART6;
 8000bcc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000bd0:	606b      	str	r3, [r5, #4]
		usx->rxring = &rxring[USART6Serial];
		usx->txring = &txring[USART6Serial];
 8000bd2:	4b79      	ldr	r3, [pc, #484]	; (8000db8 <usart_begin+0x230>)
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART6, ENABLE);
		af = GPIO_AF_USART6;
		irq = USART6_IRQn;
		usx->usid = USART6Serial;
		usx->USARTx = USART6;
		usx->rxring = &rxring[USART6Serial];
 8000bd4:	60aa      	str	r2, [r5, #8]
		usx->txring = &txring[UART5Serial];
	} else { // Serial6
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART6, ENABLE);
		af = GPIO_AF_USART6;
		irq = USART6_IRQn;
		usx->usid = USART6Serial;
 8000bd6:	2205      	movs	r2, #5
 8000bd8:	702a      	strb	r2, [r5, #0]
		usx->USARTx = USART6;
		usx->rxring = &rxring[USART6Serial];
		usx->txring = &txring[USART6Serial];
 8000bda:	60eb      	str	r3, [r5, #12]
 8000bdc:	f04f 0b47 	mov.w	fp, #71	; 0x47
		usx->USARTx = UART5;
		usx->rxring = &rxring[UART5Serial];
		usx->txring = &txring[UART5Serial];
	} else { // Serial6
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART6, ENABLE);
		af = GPIO_AF_USART6;
 8000be0:	f04f 0808 	mov.w	r8, #8
		usx->USARTx = USART6;
		usx->rxring = &rxring[USART6Serial];
		usx->txring = &txring[USART6Serial];
	}

	GPIOMode(PinPort(rx), PinBit(rx), GPIO_Mode_AF, GPIO_Speed_50MHz,
 8000be4:	4638      	mov	r0, r7
 8000be6:	f7ff fb6b 	bl	80002c0 <PinPort>
 8000bea:	4681      	mov	r9, r0
 8000bec:	4638      	mov	r0, r7
 8000bee:	f7ff fb71 	bl	80002d4 <PinBit>
 8000bf2:	2202      	movs	r2, #2
 8000bf4:	2400      	movs	r4, #0
 8000bf6:	4601      	mov	r1, r0
 8000bf8:	4613      	mov	r3, r2
 8000bfa:	4648      	mov	r0, r9
 8000bfc:	9400      	str	r4, [sp, #0]
 8000bfe:	9401      	str	r4, [sp, #4]
 8000c00:	f7ff fbd6 	bl	80003b0 <GPIOMode>
			GPIO_OType_PP, GPIO_PuPd_NOPULL);
	GPIOMode(PinPort(tx), PinBit(tx), GPIO_Mode_AF, GPIO_Speed_50MHz,
 8000c04:	4630      	mov	r0, r6
 8000c06:	f7ff fb5b 	bl	80002c0 <PinPort>
 8000c0a:	4681      	mov	r9, r0
 8000c0c:	4630      	mov	r0, r6
 8000c0e:	f7ff fb61 	bl	80002d4 <PinBit>
 8000c12:	2202      	movs	r2, #2
 8000c14:	4613      	mov	r3, r2
 8000c16:	4601      	mov	r1, r0
 8000c18:	4648      	mov	r0, r9
 8000c1a:	9400      	str	r4, [sp, #0]
 8000c1c:	9401      	str	r4, [sp, #4]
 8000c1e:	f7ff fbc7 	bl	80003b0 <GPIOMode>
			GPIO_OType_PP, GPIO_PuPd_NOPULL);

	GPIO_PinAFConfig(PinPort(rx), PinSource(rx), af);
 8000c22:	4638      	mov	r0, r7
 8000c24:	f7ff fb4c 	bl	80002c0 <PinPort>
 8000c28:	4681      	mov	r9, r0
 8000c2a:	4638      	mov	r0, r7
 8000c2c:	f7ff fb5a 	bl	80002e4 <PinSource>
 8000c30:	4642      	mov	r2, r8
 8000c32:	4601      	mov	r1, r0
 8000c34:	4648      	mov	r0, r9
 8000c36:	f000 fc21 	bl	800147c <GPIO_PinAFConfig>
	GPIO_PinAFConfig(PinPort(tx), PinSource(tx), af);
 8000c3a:	4630      	mov	r0, r6
 8000c3c:	f7ff fb40 	bl	80002c0 <PinPort>
 8000c40:	4607      	mov	r7, r0
 8000c42:	4630      	mov	r0, r6
 8000c44:	f7ff fb4e 	bl	80002e4 <PinSource>
 8000c48:	4642      	mov	r2, r8
 8000c4a:	4601      	mov	r1, r0
 8000c4c:	4638      	mov	r0, r7
 8000c4e:	f000 fc15 	bl	800147c <GPIO_PinAFConfig>
	USART_InitStruct.USART_BaudRate = baud;	// the baudrate is set to the value we passed into this init function
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
	USART_InitStruct.USART_StopBits = USART_StopBits_1;	// we want 1 stop bit (standard)
	USART_InitStruct.USART_Parity = USART_Parity_No;// we don't want a parity bit (standard)
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver
 8000c52:	230c      	movs	r3, #12

	USART_Init(usx->USARTx, &USART_InitStruct); // again all the properties are passed to the USART_Init function which takes care of all the bit setting
 8000c54:	6868      	ldr	r0, [r5, #4]
	USART_InitStruct.USART_BaudRate = baud;	// the baudrate is set to the value we passed into this init function
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
	USART_InitStruct.USART_StopBits = USART_StopBits_1;	// we want 1 stop bit (standard)
	USART_InitStruct.USART_Parity = USART_Parity_No;// we don't want a parity bit (standard)
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver
 8000c56:	f8ad 3016 	strh.w	r3, [sp, #22]

	USART_Init(usx->USARTx, &USART_InitStruct); // again all the properties are passed to the USART_Init function which takes care of all the bit setting
 8000c5a:	a903      	add	r1, sp, #12
			GPIO_OType_PP, GPIO_PuPd_NOPULL);

	GPIO_PinAFConfig(PinPort(rx), PinSource(rx), af);
	GPIO_PinAFConfig(PinPort(tx), PinSource(tx), af);

	USART_InitStruct.USART_BaudRate = baud;	// the baudrate is set to the value we passed into this init function
 8000c5c:	f8cd a00c 	str.w	sl, [sp, #12]
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
 8000c60:	f8ad 4010 	strh.w	r4, [sp, #16]
	USART_InitStruct.USART_StopBits = USART_StopBits_1;	// we want 1 stop bit (standard)
 8000c64:	f8ad 4012 	strh.w	r4, [sp, #18]
	USART_InitStruct.USART_Parity = USART_Parity_No;// we don't want a parity bit (standard)
 8000c68:	f8ad 4014 	strh.w	r4, [sp, #20]
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
 8000c6c:	f8ad 4018 	strh.w	r4, [sp, #24]
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver

	USART_Init(usx->USARTx, &USART_InitStruct); // again all the properties are passed to the USART_Init function which takes care of all the bit setting
 8000c70:	f002 fa0e 	bl	8003090 <USART_Init>

	USART_ITConfig(usx->USARTx, USART_IT_RXNE, ENABLE); // enable the USART3 receive interrupt
 8000c74:	6868      	ldr	r0, [r5, #4]
 8000c76:	2201      	movs	r2, #1
 8000c78:	f240 5125 	movw	r1, #1317	; 0x525
 8000c7c:	f002 fb72 	bl	8003364 <USART_ITConfig>
	USART_ITConfig(usx->USARTx, USART_IT_TXE, DISABLE);
 8000c80:	4622      	mov	r2, r4
 8000c82:	f240 7127 	movw	r1, #1831	; 0x727
 8000c86:	6868      	ldr	r0, [r5, #4]
 8000c88:	f002 fb6c 	bl	8003364 <USART_ITConfig>

	NVIC_InitStructure.NVIC_IRQChannel = irq;
	// we want to configure the USART3 interrupts
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0; // this sets the priority group of the USART3 interrupts
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0; // this sets the subpriority inside the group
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;	// the USART3 interrupts are globally enabled
 8000c8c:	2601      	movs	r6, #1
	NVIC_Init(&NVIC_InitStructure);	// the properties are passed to the NVIC_Init function which takes care of the low level stuff
 8000c8e:	a807      	add	r0, sp, #28
	USART_Init(usx->USARTx, &USART_InitStruct); // again all the properties are passed to the USART_Init function which takes care of all the bit setting

	USART_ITConfig(usx->USARTx, USART_IT_RXNE, ENABLE); // enable the USART3 receive interrupt
	USART_ITConfig(usx->USARTx, USART_IT_TXE, DISABLE);

	NVIC_InitStructure.NVIC_IRQChannel = irq;
 8000c90:	f88d b01c 	strb.w	fp, [sp, #28]
	// we want to configure the USART3 interrupts
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0; // this sets the priority group of the USART3 interrupts
 8000c94:	f88d 401d 	strb.w	r4, [sp, #29]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0; // this sets the subpriority inside the group
 8000c98:	f88d 401e 	strb.w	r4, [sp, #30]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;	// the USART3 interrupts are globally enabled
 8000c9c:	f88d 601f 	strb.w	r6, [sp, #31]
	NVIC_Init(&NVIC_InitStructure);	// the properties are passed to the NVIC_Init function which takes care of the low level stuff
 8000ca0:	f000 fa54 	bl	800114c <NVIC_Init>
	//
	buffer_clear(usx->rxring); //&rxring[usx->usid]);
 8000ca4:	68aa      	ldr	r2, [r5, #8]
	buffer_clear(usx->txring); //&txring[usx->usid]);
 8000ca6:	68eb      	ldr	r3, [r5, #12]
	// finally this enables the complete USART3 peripheral
	USART_Cmd(usx->USARTx, ENABLE);
 8000ca8:	6868      	ldr	r0, [r5, #4]

Serial Serial1, Serial2, Serial3, Serial4, Serial5, Serial6;
USARTRing rxring[6], txring[6];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 8000caa:	f8a2 4100 	strh.w	r4, [r2, #256]	; 0x100
	r->tail = 0;
 8000cae:	f8a2 4102 	strh.w	r4, [r2, #258]	; 0x102
	r->count = 0;
 8000cb2:	f8a2 4104 	strh.w	r4, [r2, #260]	; 0x104

Serial Serial1, Serial2, Serial3, Serial4, Serial5, Serial6;
USARTRing rxring[6], txring[6];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 8000cb6:	f8a3 4100 	strh.w	r4, [r3, #256]	; 0x100
	r->tail = 0;
 8000cba:	f8a3 4102 	strh.w	r4, [r3, #258]	; 0x102
	r->count = 0;
 8000cbe:	f8a3 4104 	strh.w	r4, [r3, #260]	; 0x104
	NVIC_Init(&NVIC_InitStructure);	// the properties are passed to the NVIC_Init function which takes care of the low level stuff
	//
	buffer_clear(usx->rxring); //&rxring[usx->usid]);
	buffer_clear(usx->txring); //&txring[usx->usid]);
	// finally this enables the complete USART3 peripheral
	USART_Cmd(usx->USARTx, ENABLE);
 8000cc2:	4631      	mov	r1, r6
 8000cc4:	f002 fa74 	bl	80031b0 <USART_Cmd>
}
 8000cc8:	b009      	add	sp, #36	; 0x24
 8000cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		usx->usid = UART4Serial;
		usx->USARTx = UART4;
		usx->rxring = &rxring[UART4Serial];
		usx->txring = &txring[UART4Serial];
	} else if (usx == &Serial5) {
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART5, ENABLE);
 8000cce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	f000 ff9c 	bl	8001c10 <RCC_APB1PeriphClockCmd>
		af = GPIO_AF_UART5;
		irq = UART5_IRQn;
		usx->usid = UART5Serial;
		usx->USARTx = UART5;
 8000cd8:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
		usx->rxring = &rxring[UART5Serial];
 8000cdc:	4a37      	ldr	r2, [pc, #220]	; (8000dbc <usart_begin+0x234>)
	} else if (usx == &Serial5) {
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART5, ENABLE);
		af = GPIO_AF_UART5;
		irq = UART5_IRQn;
		usx->usid = UART5Serial;
		usx->USARTx = UART5;
 8000cde:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000ce2:	606b      	str	r3, [r5, #4]
		usx->rxring = &rxring[UART5Serial];
		usx->txring = &txring[UART5Serial];
 8000ce4:	4b36      	ldr	r3, [pc, #216]	; (8000dc0 <usart_begin+0x238>)
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART5, ENABLE);
		af = GPIO_AF_UART5;
		irq = UART5_IRQn;
		usx->usid = UART5Serial;
		usx->USARTx = UART5;
		usx->rxring = &rxring[UART5Serial];
 8000ce6:	60aa      	str	r2, [r5, #8]
		usx->txring = &txring[UART4Serial];
	} else if (usx == &Serial5) {
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART5, ENABLE);
		af = GPIO_AF_UART5;
		irq = UART5_IRQn;
		usx->usid = UART5Serial;
 8000ce8:	2204      	movs	r2, #4
 8000cea:	702a      	strb	r2, [r5, #0]
		usx->USARTx = UART5;
		usx->rxring = &rxring[UART5Serial];
		usx->txring = &txring[UART5Serial];
 8000cec:	60eb      	str	r3, [r5, #12]
 8000cee:	f04f 0b35 	mov.w	fp, #53	; 0x35
		usx->USARTx = UART4;
		usx->rxring = &rxring[UART4Serial];
		usx->txring = &txring[UART4Serial];
	} else if (usx == &Serial5) {
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART5, ENABLE);
		af = GPIO_AF_UART5;
 8000cf2:	f04f 0808 	mov.w	r8, #8
 8000cf6:	e775      	b.n	8000be4 <usart_begin+0x5c>
	//
	uint8_t af = GPIO_AF_USART1;
	IRQn_Type irq = USART1_IRQn;

	if (usx == &Serial1) {
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 8000cf8:	2010      	movs	r0, #16
 8000cfa:	2101      	movs	r1, #1
 8000cfc:	f000 ff96 	bl	8001c2c <RCC_APB2PeriphClockCmd>
		af = GPIO_AF_USART1;
		irq = USART1_IRQn;
		usx->usid = USART1Serial;
		usx->USARTx = USART1;
 8000d00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
		usx->rxring = &rxring[USART1Serial];
 8000d04:	4a2f      	ldr	r2, [pc, #188]	; (8000dc4 <usart_begin+0x23c>)
	if (usx == &Serial1) {
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
		af = GPIO_AF_USART1;
		irq = USART1_IRQn;
		usx->usid = USART1Serial;
		usx->USARTx = USART1;
 8000d06:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000d0a:	606b      	str	r3, [r5, #4]
		usx->rxring = &rxring[USART1Serial];
		usx->txring = &txring[USART1Serial];
 8000d0c:	4b2e      	ldr	r3, [pc, #184]	; (8000dc8 <usart_begin+0x240>)
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
		af = GPIO_AF_USART1;
		irq = USART1_IRQn;
		usx->usid = USART1Serial;
		usx->USARTx = USART1;
		usx->rxring = &rxring[USART1Serial];
 8000d0e:	60aa      	str	r2, [r5, #8]

	if (usx == &Serial1) {
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
		af = GPIO_AF_USART1;
		irq = USART1_IRQn;
		usx->usid = USART1Serial;
 8000d10:	2200      	movs	r2, #0
 8000d12:	702a      	strb	r2, [r5, #0]
		usx->USARTx = USART1;
		usx->rxring = &rxring[USART1Serial];
		usx->txring = &txring[USART1Serial];
 8000d14:	60eb      	str	r3, [r5, #12]
 8000d16:	f04f 0b25 	mov.w	fp, #37	; 0x25
	uint8_t af = GPIO_AF_USART1;
	IRQn_Type irq = USART1_IRQn;

	if (usx == &Serial1) {
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
		af = GPIO_AF_USART1;
 8000d1a:	f04f 0807 	mov.w	r8, #7
 8000d1e:	e761      	b.n	8000be4 <usart_begin+0x5c>
		usx->usid = USART1Serial;
		usx->USARTx = USART1;
		usx->rxring = &rxring[USART1Serial];
		usx->txring = &txring[USART1Serial];
	} else if (usx == &Serial2) {
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 8000d20:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000d24:	2101      	movs	r1, #1
 8000d26:	f000 ff73 	bl	8001c10 <RCC_APB1PeriphClockCmd>
		af = GPIO_AF_USART2;
		irq = USART2_IRQn;
		usx->usid = USART2Serial;
		usx->USARTx = USART2;
 8000d2a:	f44f 4388 	mov.w	r3, #17408	; 0x4400
		usx->rxring = &rxring[USART2Serial];
 8000d2e:	4a27      	ldr	r2, [pc, #156]	; (8000dcc <usart_begin+0x244>)
	} else if (usx == &Serial2) {
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
		af = GPIO_AF_USART2;
		irq = USART2_IRQn;
		usx->usid = USART2Serial;
		usx->USARTx = USART2;
 8000d30:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000d34:	606b      	str	r3, [r5, #4]
		usx->rxring = &rxring[USART2Serial];
		usx->txring = &txring[USART2Serial];
 8000d36:	4b26      	ldr	r3, [pc, #152]	; (8000dd0 <usart_begin+0x248>)
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
		af = GPIO_AF_USART2;
		irq = USART2_IRQn;
		usx->usid = USART2Serial;
		usx->USARTx = USART2;
		usx->rxring = &rxring[USART2Serial];
 8000d38:	60aa      	str	r2, [r5, #8]
		usx->txring = &txring[USART1Serial];
	} else if (usx == &Serial2) {
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
		af = GPIO_AF_USART2;
		irq = USART2_IRQn;
		usx->usid = USART2Serial;
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	702a      	strb	r2, [r5, #0]
		usx->USARTx = USART2;
		usx->rxring = &rxring[USART2Serial];
		usx->txring = &txring[USART2Serial];
 8000d3e:	60eb      	str	r3, [r5, #12]
 8000d40:	f04f 0b26 	mov.w	fp, #38	; 0x26
		usx->USARTx = USART1;
		usx->rxring = &rxring[USART1Serial];
		usx->txring = &txring[USART1Serial];
	} else if (usx == &Serial2) {
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
		af = GPIO_AF_USART2;
 8000d44:	f04f 0807 	mov.w	r8, #7
 8000d48:	e74c      	b.n	8000be4 <usart_begin+0x5c>
		usx->usid = USART2Serial;
		usx->USARTx = USART2;
		usx->rxring = &rxring[USART2Serial];
		usx->txring = &txring[USART2Serial];
	} else if (usx == &Serial3) {
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
 8000d4a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000d4e:	2101      	movs	r1, #1
 8000d50:	f000 ff5e 	bl	8001c10 <RCC_APB1PeriphClockCmd>
		af = GPIO_AF_USART3;
		irq = USART3_IRQn;
		usx->usid = USART3Serial;
		usx->USARTx = USART3;
 8000d54:	f44f 4390 	mov.w	r3, #18432	; 0x4800
		usx->rxring = &rxring[USART3Serial];
 8000d58:	4a1e      	ldr	r2, [pc, #120]	; (8000dd4 <usart_begin+0x24c>)
	} else if (usx == &Serial3) {
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
		af = GPIO_AF_USART3;
		irq = USART3_IRQn;
		usx->usid = USART3Serial;
		usx->USARTx = USART3;
 8000d5a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000d5e:	606b      	str	r3, [r5, #4]
		usx->rxring = &rxring[USART3Serial];
		usx->txring = &txring[USART3Serial];
 8000d60:	4b1d      	ldr	r3, [pc, #116]	; (8000dd8 <usart_begin+0x250>)
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
		af = GPIO_AF_USART3;
		irq = USART3_IRQn;
		usx->usid = USART3Serial;
		usx->USARTx = USART3;
		usx->rxring = &rxring[USART3Serial];
 8000d62:	60aa      	str	r2, [r5, #8]
		usx->txring = &txring[USART2Serial];
	} else if (usx == &Serial3) {
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
		af = GPIO_AF_USART3;
		irq = USART3_IRQn;
		usx->usid = USART3Serial;
 8000d64:	2202      	movs	r2, #2
 8000d66:	702a      	strb	r2, [r5, #0]
		usx->USARTx = USART3;
		usx->rxring = &rxring[USART3Serial];
		usx->txring = &txring[USART3Serial];
 8000d68:	60eb      	str	r3, [r5, #12]
 8000d6a:	f04f 0b27 	mov.w	fp, #39	; 0x27
		usx->USARTx = USART2;
		usx->rxring = &rxring[USART2Serial];
		usx->txring = &txring[USART2Serial];
	} else if (usx == &Serial3) {
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
		af = GPIO_AF_USART3;
 8000d6e:	f04f 0807 	mov.w	r8, #7
 8000d72:	e737      	b.n	8000be4 <usart_begin+0x5c>
		usx->usid = USART3Serial;
		usx->USARTx = USART3;
		usx->rxring = &rxring[USART3Serial];
		usx->txring = &txring[USART3Serial];
	} else if (usx == &Serial4) {
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART4, ENABLE);
 8000d74:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000d78:	2101      	movs	r1, #1
 8000d7a:	f000 ff49 	bl	8001c10 <RCC_APB1PeriphClockCmd>
		af = GPIO_AF_UART4;
		irq = UART4_IRQn;
		usx->usid = UART4Serial;
		usx->USARTx = UART4;
 8000d7e:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
		usx->rxring = &rxring[UART4Serial];
 8000d82:	4a16      	ldr	r2, [pc, #88]	; (8000ddc <usart_begin+0x254>)
	} else if (usx == &Serial4) {
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART4, ENABLE);
		af = GPIO_AF_UART4;
		irq = UART4_IRQn;
		usx->usid = UART4Serial;
		usx->USARTx = UART4;
 8000d84:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000d88:	606b      	str	r3, [r5, #4]
		usx->rxring = &rxring[UART4Serial];
		usx->txring = &txring[UART4Serial];
 8000d8a:	4b15      	ldr	r3, [pc, #84]	; (8000de0 <usart_begin+0x258>)
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART4, ENABLE);
		af = GPIO_AF_UART4;
		irq = UART4_IRQn;
		usx->usid = UART4Serial;
		usx->USARTx = UART4;
		usx->rxring = &rxring[UART4Serial];
 8000d8c:	60aa      	str	r2, [r5, #8]
		usx->txring = &txring[USART3Serial];
	} else if (usx == &Serial4) {
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART4, ENABLE);
		af = GPIO_AF_UART4;
		irq = UART4_IRQn;
		usx->usid = UART4Serial;
 8000d8e:	2203      	movs	r2, #3
 8000d90:	702a      	strb	r2, [r5, #0]
		usx->USARTx = UART4;
		usx->rxring = &rxring[UART4Serial];
		usx->txring = &txring[UART4Serial];
 8000d92:	60eb      	str	r3, [r5, #12]
 8000d94:	f04f 0b34 	mov.w	fp, #52	; 0x34
		usx->USARTx = USART3;
		usx->rxring = &rxring[USART3Serial];
		usx->txring = &txring[USART3Serial];
	} else if (usx == &Serial4) {
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART4, ENABLE);
		af = GPIO_AF_UART4;
 8000d98:	f04f 0808 	mov.w	r8, #8
 8000d9c:	e722      	b.n	8000be4 <usart_begin+0x5c>
 8000d9e:	bf00      	nop
 8000da0:	20001008 	.word	0x20001008
 8000da4:	2000166c 	.word	0x2000166c
 8000da8:	20001018 	.word	0x20001018
 8000dac:	2000165c 	.word	0x2000165c
 8000db0:	20000ff8 	.word	0x20000ff8
 8000db4:	20001556 	.word	0x20001556
 8000db8:	20000ef2 	.word	0x20000ef2
 8000dbc:	20001450 	.word	0x20001450
 8000dc0:	20000dec 	.word	0x20000dec
 8000dc4:	20001038 	.word	0x20001038
 8000dc8:	200009d4 	.word	0x200009d4
 8000dcc:	2000113e 	.word	0x2000113e
 8000dd0:	20000ada 	.word	0x20000ada
 8000dd4:	20001244 	.word	0x20001244
 8000dd8:	20000be0 	.word	0x20000be0
 8000ddc:	2000134a 	.word	0x2000134a
 8000de0:	20000ce6 	.word	0x20000ce6

08000de4 <usart_bare_write>:
	buffer_clear(usx->txring); //&txring[usx->usid]);
	// finally this enables the complete USART3 peripheral
	USART_Cmd(usx->USARTx, ENABLE);
}

void usart_bare_write(Serial * usx, const uint16_t w) {
 8000de4:	b538      	push	{r3, r4, r5, lr}
 8000de6:	4604      	mov	r4, r0
 8000de8:	460d      	mov	r5, r1
	while (USART_GetFlagStatus(usx->USARTx, USART_FLAG_TXE ) == RESET)
 8000dea:	6860      	ldr	r0, [r4, #4]
 8000dec:	2180      	movs	r1, #128	; 0x80
 8000dee:	f002 fad5 	bl	800339c <USART_GetFlagStatus>
 8000df2:	2800      	cmp	r0, #0
 8000df4:	d0f9      	beq.n	8000dea <usart_bare_write+0x6>
		;
	USART_SendData(usx->USARTx, w);
 8000df6:	6860      	ldr	r0, [r4, #4]
 8000df8:	4629      	mov	r1, r5
//	while (USART_GetFlagStatus(USART3, USART_FLAG_TC ) == RESET) ;
}
 8000dfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
}

void usart_bare_write(Serial * usx, const uint16_t w) {
	while (USART_GetFlagStatus(usx->USARTx, USART_FLAG_TXE ) == RESET)
		;
	USART_SendData(usx->USARTx, w);
 8000dfe:	f002 ba0b 	b.w	8003218 <USART_SendData>
 8000e02:	bf00      	nop

08000e04 <usart_write>:
//	while (USART_GetFlagStatus(USART3, USART_FLAG_TC ) == RESET) ;
}

void usart_write(Serial * usx, const uint16_t w) {
	uint16_t waitcount = 3;
	while (buffer_is_full(usx->txring) && (waitcount > 0) ) {
 8000e04:	68c3      	ldr	r3, [r0, #12]
		;
	USART_SendData(usx->USARTx, w);
//	while (USART_GetFlagStatus(USART3, USART_FLAG_TC ) == RESET) ;
}

void usart_write(Serial * usx, const uint16_t w) {
 8000e06:	b570      	push	{r4, r5, r6, lr}
uint16_t buffer_count(USARTRing * r) {
	return r->count;
}

uint8_t buffer_is_full(USARTRing * r) {
	if ((r->head == r->tail) && (r->count > 0)) {
 8000e08:	f9b3 2102 	ldrsh.w	r2, [r3, #258]	; 0x102
		;
	USART_SendData(usx->USARTx, w);
//	while (USART_GetFlagStatus(USART3, USART_FLAG_TC ) == RESET) ;
}

void usart_write(Serial * usx, const uint16_t w) {
 8000e0c:	460d      	mov	r5, r1
uint16_t buffer_count(USARTRing * r) {
	return r->count;
}

uint8_t buffer_is_full(USARTRing * r) {
	if ((r->head == r->tail) && (r->count > 0)) {
 8000e0e:	f9b3 1100 	ldrsh.w	r1, [r3, #256]	; 0x100
 8000e12:	4291      	cmp	r1, r2
		;
	USART_SendData(usx->USARTx, w);
//	while (USART_GetFlagStatus(USART3, USART_FLAG_TC ) == RESET) ;
}

void usart_write(Serial * usx, const uint16_t w) {
 8000e14:	4604      	mov	r4, r0
uint16_t buffer_count(USARTRing * r) {
	return r->count;
}

uint8_t buffer_is_full(USARTRing * r) {
	if ((r->head == r->tail) && (r->count > 0)) {
 8000e16:	d011      	beq.n	8000e3c <usart_write+0x38>
	uint16_t waitcount = 3;
	while (buffer_is_full(usx->txring) && (waitcount > 0) ) {
		delay_us(667);
		waitcount--;
	}
	USART_ITConfig(usx->USARTx, USART_IT_TXE, DISABLE);
 8000e18:	2200      	movs	r2, #0
 8000e1a:	6860      	ldr	r0, [r4, #4]
 8000e1c:	f240 7127 	movw	r1, #1831	; 0x727
 8000e20:	f002 faa0 	bl	8003364 <USART_ITConfig>
	buffer_enque(usx->txring, w); //&txring[usx->usid], w);
 8000e24:	4629      	mov	r1, r5
 8000e26:	68e0      	ldr	r0, [r4, #12]
 8000e28:	f7ff fe62 	bl	8000af0 <buffer_enque>
	USART_ITConfig(usx->USARTx, USART_IT_TXE, ENABLE);
 8000e2c:	6860      	ldr	r0, [r4, #4]
 8000e2e:	f240 7127 	movw	r1, #1831	; 0x727
 8000e32:	2201      	movs	r2, #1
}
 8000e34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		delay_us(667);
		waitcount--;
	}
	USART_ITConfig(usx->USARTx, USART_IT_TXE, DISABLE);
	buffer_enque(usx->txring, w); //&txring[usx->usid], w);
	USART_ITConfig(usx->USARTx, USART_IT_TXE, ENABLE);
 8000e38:	f002 ba94 	b.w	8003364 <USART_ITConfig>
uint16_t buffer_count(USARTRing * r) {
	return r->count;
}

uint8_t buffer_is_full(USARTRing * r) {
	if ((r->head == r->tail) && (r->count > 0)) {
 8000e3c:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d0e9      	beq.n	8000e18 <usart_write+0x14>
 8000e44:	2603      	movs	r6, #3
}

void usart_write(Serial * usx, const uint16_t w) {
	uint16_t waitcount = 3;
	while (buffer_is_full(usx->txring) && (waitcount > 0) ) {
		delay_us(667);
 8000e46:	f240 209b 	movw	r0, #667	; 0x29b
 8000e4a:	f7ff fa0d 	bl	8000268 <delay_us>
//	while (USART_GetFlagStatus(USART3, USART_FLAG_TC ) == RESET) ;
}

void usart_write(Serial * usx, const uint16_t w) {
	uint16_t waitcount = 3;
	while (buffer_is_full(usx->txring) && (waitcount > 0) ) {
 8000e4e:	68e3      	ldr	r3, [r4, #12]
uint16_t buffer_count(USARTRing * r) {
	return r->count;
}

uint8_t buffer_is_full(USARTRing * r) {
	if ((r->head == r->tail) && (r->count > 0)) {
 8000e50:	f9b3 1100 	ldrsh.w	r1, [r3, #256]	; 0x100
 8000e54:	f9b3 2102 	ldrsh.w	r2, [r3, #258]	; 0x102
 8000e58:	4291      	cmp	r1, r2
 8000e5a:	d1dd      	bne.n	8000e18 <usart_write+0x14>
 8000e5c:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8000e60:	3e01      	subs	r6, #1
 8000e62:	b2b6      	uxth	r6, r6
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d0d7      	beq.n	8000e18 <usart_write+0x14>
//	while (USART_GetFlagStatus(USART3, USART_FLAG_TC ) == RESET) ;
}

void usart_write(Serial * usx, const uint16_t w) {
	uint16_t waitcount = 3;
	while (buffer_is_full(usx->txring) && (waitcount > 0) ) {
 8000e68:	2e00      	cmp	r6, #0
 8000e6a:	d1ec      	bne.n	8000e46 <usart_write+0x42>
 8000e6c:	e7d4      	b.n	8000e18 <usart_write+0x14>
 8000e6e:	bf00      	nop

08000e70 <usart_print>:
	USART_ITConfig(usx->USARTx, USART_IT_TXE, DISABLE);
	buffer_enque(usx->txring, w); //&txring[usx->usid], w);
	USART_ITConfig(usx->USARTx, USART_IT_TXE, ENABLE);
}

void usart_print(Serial * usx, const char * s) {
 8000e70:	b538      	push	{r3, r4, r5, lr}
 8000e72:	460c      	mov	r4, r1
	while (*s)
 8000e74:	7809      	ldrb	r1, [r1, #0]
	USART_ITConfig(usx->USARTx, USART_IT_TXE, DISABLE);
	buffer_enque(usx->txring, w); //&txring[usx->usid], w);
	USART_ITConfig(usx->USARTx, USART_IT_TXE, ENABLE);
}

void usart_print(Serial * usx, const char * s) {
 8000e76:	4605      	mov	r5, r0
	while (*s)
 8000e78:	b131      	cbz	r1, 8000e88 <usart_print+0x18>
		usart_write(usx, (uint16_t) *s++);
 8000e7a:	4628      	mov	r0, r5
 8000e7c:	f7ff ffc2 	bl	8000e04 <usart_write>
	buffer_enque(usx->txring, w); //&txring[usx->usid], w);
	USART_ITConfig(usx->USARTx, USART_IT_TXE, ENABLE);
}

void usart_print(Serial * usx, const char * s) {
	while (*s)
 8000e80:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8000e84:	2900      	cmp	r1, #0
 8000e86:	d1f8      	bne.n	8000e7a <usart_print+0xa>
 8000e88:	bd38      	pop	{r3, r4, r5, pc}
 8000e8a:	bf00      	nop

08000e8c <usart_bare_read>:
		usart_write(usx, (uint16_t) *s++);
}

uint16_t usart_bare_read(USART_TypeDef * USARTx /*usartx[usx]*/) {
	return USART_ReceiveData(USARTx);
 8000e8c:	f002 b9c8 	b.w	8003220 <USART_ReceiveData>

08000e90 <usart_read>:
}

uint16_t usart_read(Serial * usx) {
 8000e90:	b508      	push	{r3, lr}
	uint16_t w = buffer_deque(usx->rxring); //&rxring[usx->usid]);
 8000e92:	6880      	ldr	r0, [r0, #8]
 8000e94:	f7ff fe50 	bl	8000b38 <buffer_deque>
	if (w == 0xffff)
 8000e98:	f64f 73ff 	movw	r3, #65535	; 0xffff
		return 0; // buffer is empty
	return w;
}
 8000e9c:	4298      	cmp	r0, r3
 8000e9e:	bf08      	it	eq
 8000ea0:	2000      	moveq	r0, #0
 8000ea2:	bd08      	pop	{r3, pc}

08000ea4 <usart_flush>:

void usart_flush(Serial * usx) {
 8000ea4:	b538      	push	{r3, r4, r5, lr}
 8000ea6:	4604      	mov	r4, r0
	uint32_t wtill = millis() + 100;
 8000ea8:	f7ff f9c8 	bl	800023c <millis>
 8000eac:	f100 0564 	add.w	r5, r0, #100	; 0x64
	while (buffer_count(usx->txring) > 0) {
 8000eb0:	e003      	b.n	8000eba <usart_flush+0x16>
		if (millis() > wtill)
 8000eb2:	f7ff f9c3 	bl	800023c <millis>
 8000eb6:	4285      	cmp	r5, r0
 8000eb8:	d304      	bcc.n	8000ec4 <usart_flush+0x20>
	r->tail = 0;
	r->count = 0;
}

uint16_t buffer_count(USARTRing * r) {
	return r->count;
 8000eba:	68e3      	ldr	r3, [r4, #12]
	return w;
}

void usart_flush(Serial * usx) {
	uint32_t wtill = millis() + 100;
	while (buffer_count(usx->txring) > 0) {
 8000ebc:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d1f6      	bne.n	8000eb2 <usart_flush+0xe>
	 USART_SendData(usx->USARTx, buffer_deque(usx->txring)); //&txring[usx->usid]));
	 while (USART_GetFlagStatus(usx->USARTx, USART_FLAG_TC ) == RESET);
	 }
	 USART_ClearITPendingBit(usx->USARTx, USART_IT_TXE );
	 */
	buffer_clear(usx->rxring); //&txring[usx->usid]);
 8000ec4:	68a3      	ldr	r3, [r4, #8]

Serial Serial1, Serial2, Serial3, Serial4, Serial5, Serial6;
USARTRing rxring[6], txring[6];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
	r->tail = 0;
 8000ecc:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
	r->count = 0;
 8000ed0:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
	 while (USART_GetFlagStatus(usx->USARTx, USART_FLAG_TC ) == RESET);
	 }
	 USART_ClearITPendingBit(usx->USARTx, USART_IT_TXE );
	 */
	buffer_clear(usx->rxring); //&txring[usx->usid]);
}
 8000ed4:	bd38      	pop	{r3, r4, r5, pc}
 8000ed6:	bf00      	nop

08000ed8 <usart_peek>:

uint16_t usart_peek(Serial * usx) {
//	if ( buffer_count(&(usx->rxring)) == 0 )
//		return 0xffff;
	return buffer_peek(usx->rxring); //	rxring[usx->usid].buf[rxring[usx->usid].tail];
 8000ed8:	6883      	ldr	r3, [r0, #8]
	r->tail %= USART_BUFFER_SIZE;
	return w;
}

uint16_t buffer_peek(USARTRing * r) {
	if (buffer_count(r) == 0)
 8000eda:	f8b3 2104 	ldrh.w	r2, [r3, #260]	; 0x104
 8000ede:	b912      	cbnz	r2, 8000ee6 <usart_peek+0xe>
		return 0xffff;
 8000ee0:	f64f 70ff 	movw	r0, #65535	; 0xffff

uint16_t usart_peek(Serial * usx) {
//	if ( buffer_count(&(usx->rxring)) == 0 )
//		return 0xffff;
	return buffer_peek(usx->rxring); //	rxring[usx->usid].buf[rxring[usx->usid].tail];
}
 8000ee4:	4770      	bx	lr
}

uint16_t buffer_peek(USARTRing * r) {
	if (buffer_count(r) == 0)
		return 0xffff;
	return r->buf[r->tail];
 8000ee6:	f9b3 2102 	ldrsh.w	r2, [r3, #258]	; 0x102
 8000eea:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8000eee:	4770      	bx	lr

08000ef0 <usart_available>:
	r->tail = 0;
	r->count = 0;
}

uint16_t buffer_count(USARTRing * r) {
	return r->count;
 8000ef0:	6883      	ldr	r3, [r0, #8]
}

uint16_t usart_available(Serial * usx) {
	return buffer_count(usx->rxring);
	//return buffer_count(&rxring[usx->usid]);
}
 8000ef2:	f8b3 0104 	ldrh.w	r0, [r3, #260]	; 0x104
 8000ef6:	4770      	bx	lr

08000ef8 <USART1_IRQHandler>:

// this is the interrupt request handler (IRQ) for ALL USART3 interrupts

void USART1_IRQHandler(void) {
	if (USART_GetITStatus(USART1, USART_IT_RXNE )) {
 8000ef8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
	//return buffer_count(&rxring[usx->usid]);
}

// this is the interrupt request handler (IRQ) for ALL USART3 interrupts

void USART1_IRQHandler(void) {
 8000efc:	b510      	push	{r4, lr}
	if (USART_GetITStatus(USART1, USART_IT_RXNE )) {
 8000efe:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000f02:	f240 5125 	movw	r1, #1317	; 0x525
 8000f06:	f002 fa53 	bl	80033b0 <USART_GetITStatus>
 8000f0a:	2800      	cmp	r0, #0
 8000f0c:	d12d      	bne.n	8000f6a <USART1_IRQHandler+0x72>
		buffer_enque(Serial1.rxring,
		//&rxring[USART1Serial],
				USART_ReceiveData(USART1 ));
	}

	if (USART_GetITStatus(USART1, USART_IT_TXE )) {
 8000f0e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000f12:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000f16:	f240 7127 	movw	r1, #1831	; 0x727
 8000f1a:	f002 fa49 	bl	80033b0 <USART_GetITStatus>
 8000f1e:	2800      	cmp	r0, #0
 8000f20:	d022      	beq.n	8000f68 <USART1_IRQHandler+0x70>
		if (Serial1.rxring->count
 8000f22:	4b18      	ldr	r3, [pc, #96]	; (8000f84 <USART1_IRQHandler+0x8c>)
 8000f24:	689a      	ldr	r2, [r3, #8]
 8000f26:	f8b2 2104 	ldrh.w	r2, [r2, #260]	; 0x104
 8000f2a:	b15a      	cbz	r2, 8000f44 <USART1_IRQHandler+0x4c>
		//txring[USART1Serial].count
				== 0) {
			USART_ITConfig(USART1, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART1, USART_IT_TXE );
		} else {
			USART_SendData(USART1, buffer_deque(Serial1.txring)); // &txring[USART1Serial]) );
 8000f2c:	68d8      	ldr	r0, [r3, #12]
 8000f2e:	f7ff fe03 	bl	8000b38 <buffer_deque>
 8000f32:	4601      	mov	r1, r0
 8000f34:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000f38:	f2c4 0001 	movt	r0, #16385	; 0x4001
		}
	}
}
 8000f3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		//txring[USART1Serial].count
				== 0) {
			USART_ITConfig(USART1, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART1, USART_IT_TXE );
		} else {
			USART_SendData(USART1, buffer_deque(Serial1.txring)); // &txring[USART1Serial]) );
 8000f40:	f002 b96a 	b.w	8003218 <USART_SendData>

	if (USART_GetITStatus(USART1, USART_IT_TXE )) {
		if (Serial1.rxring->count
		//txring[USART1Serial].count
				== 0) {
			USART_ITConfig(USART1, USART_IT_TXE, (FunctionalState) DISABLE);
 8000f44:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000f48:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000f4c:	f240 7127 	movw	r1, #1831	; 0x727
 8000f50:	f002 fa08 	bl	8003364 <USART_ITConfig>
			USART_ClearITPendingBit(USART1, USART_IT_TXE );
 8000f54:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000f58:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000f5c:	f240 7127 	movw	r1, #1831	; 0x727
		} else {
			USART_SendData(USART1, buffer_deque(Serial1.txring)); // &txring[USART1Serial]) );
		}
	}
}
 8000f60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (USART_GetITStatus(USART1, USART_IT_TXE )) {
		if (Serial1.rxring->count
		//txring[USART1Serial].count
				== 0) {
			USART_ITConfig(USART1, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART1, USART_IT_TXE );
 8000f64:	f002 ba48 	b.w	80033f8 <USART_ClearITPendingBit>
 8000f68:	bd10      	pop	{r4, pc}

// this is the interrupt request handler (IRQ) for ALL USART3 interrupts

void USART1_IRQHandler(void) {
	if (USART_GetITStatus(USART1, USART_IT_RXNE )) {
		buffer_enque(Serial1.rxring,
 8000f6a:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <USART1_IRQHandler+0x8c>)
 8000f6c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000f70:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000f74:	689c      	ldr	r4, [r3, #8]
 8000f76:	f002 f953 	bl	8003220 <USART_ReceiveData>
 8000f7a:	4601      	mov	r1, r0
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	f7ff fdb7 	bl	8000af0 <buffer_enque>
 8000f82:	e7c4      	b.n	8000f0e <USART1_IRQHandler+0x16>
 8000f84:	20001008 	.word	0x20001008

08000f88 <USART2_IRQHandler>:
		}
	}
}

void USART2_IRQHandler(void) {
	if (USART_GetITStatus(USART2, USART_IT_RXNE )) {
 8000f88:	f44f 4088 	mov.w	r0, #17408	; 0x4400
			USART_SendData(USART1, buffer_deque(Serial1.txring)); // &txring[USART1Serial]) );
		}
	}
}

void USART2_IRQHandler(void) {
 8000f8c:	b510      	push	{r4, lr}
	if (USART_GetITStatus(USART2, USART_IT_RXNE )) {
 8000f8e:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000f92:	f240 5125 	movw	r1, #1317	; 0x525
 8000f96:	f002 fa0b 	bl	80033b0 <USART_GetITStatus>
 8000f9a:	2800      	cmp	r0, #0
 8000f9c:	d12c      	bne.n	8000ff8 <USART2_IRQHandler+0x70>
		buffer_enque(Serial2.rxring //&rxring[USART2Serial]/
				, USART_ReceiveData(USART2 ));
	}
	if (USART_GetITStatus(USART2, USART_IT_TXE )) {
 8000f9e:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8000fa2:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000fa6:	f240 7127 	movw	r1, #1831	; 0x727
 8000faa:	f002 fa01 	bl	80033b0 <USART_GetITStatus>
 8000fae:	2800      	cmp	r0, #0
 8000fb0:	d021      	beq.n	8000ff6 <USART2_IRQHandler+0x6e>
		if (Serial2.txring->count //txring[USART2Serial].count
 8000fb2:	4b18      	ldr	r3, [pc, #96]	; (8001014 <USART2_IRQHandler+0x8c>)
 8000fb4:	68d8      	ldr	r0, [r3, #12]
 8000fb6:	f8b0 2104 	ldrh.w	r2, [r0, #260]	; 0x104
 8000fba:	b152      	cbz	r2, 8000fd2 <USART2_IRQHandler+0x4a>
		== 0) {
			USART_ITConfig(USART2, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART2, USART_IT_TXE );
		} else {
			USART_SendData(USART2, buffer_deque(Serial2.txring)); //&txring[USART2Serial]));
 8000fbc:	f7ff fdbc 	bl	8000b38 <buffer_deque>
 8000fc0:	4601      	mov	r1, r0
 8000fc2:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8000fc6:	f2c4 0000 	movt	r0, #16384	; 0x4000
		}
	}
}
 8000fca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if (Serial2.txring->count //txring[USART2Serial].count
		== 0) {
			USART_ITConfig(USART2, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART2, USART_IT_TXE );
		} else {
			USART_SendData(USART2, buffer_deque(Serial2.txring)); //&txring[USART2Serial]));
 8000fce:	f002 b923 	b.w	8003218 <USART_SendData>
				, USART_ReceiveData(USART2 ));
	}
	if (USART_GetITStatus(USART2, USART_IT_TXE )) {
		if (Serial2.txring->count //txring[USART2Serial].count
		== 0) {
			USART_ITConfig(USART2, USART_IT_TXE, (FunctionalState) DISABLE);
 8000fd2:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8000fd6:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000fda:	f240 7127 	movw	r1, #1831	; 0x727
 8000fde:	f002 f9c1 	bl	8003364 <USART_ITConfig>
			USART_ClearITPendingBit(USART2, USART_IT_TXE );
 8000fe2:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8000fe6:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000fea:	f240 7127 	movw	r1, #1831	; 0x727
		} else {
			USART_SendData(USART2, buffer_deque(Serial2.txring)); //&txring[USART2Serial]));
		}
	}
}
 8000fee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	}
	if (USART_GetITStatus(USART2, USART_IT_TXE )) {
		if (Serial2.txring->count //txring[USART2Serial].count
		== 0) {
			USART_ITConfig(USART2, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART2, USART_IT_TXE );
 8000ff2:	f002 ba01 	b.w	80033f8 <USART_ClearITPendingBit>
 8000ff6:	bd10      	pop	{r4, pc}
	}
}

void USART2_IRQHandler(void) {
	if (USART_GetITStatus(USART2, USART_IT_RXNE )) {
		buffer_enque(Serial2.rxring //&rxring[USART2Serial]/
 8000ff8:	4b06      	ldr	r3, [pc, #24]	; (8001014 <USART2_IRQHandler+0x8c>)
 8000ffa:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8000ffe:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8001002:	689c      	ldr	r4, [r3, #8]
 8001004:	f002 f90c 	bl	8003220 <USART_ReceiveData>
 8001008:	4601      	mov	r1, r0
 800100a:	4620      	mov	r0, r4
 800100c:	f7ff fd70 	bl	8000af0 <buffer_enque>
 8001010:	e7c5      	b.n	8000f9e <USART2_IRQHandler+0x16>
 8001012:	bf00      	nop
 8001014:	2000166c 	.word	0x2000166c

08001018 <USART3_IRQHandler>:
		}
	}
}

void USART3_IRQHandler(void) {
	if (USART_GetITStatus(USART3, USART_IT_RXNE )) {
 8001018:	f44f 4090 	mov.w	r0, #18432	; 0x4800
			USART_SendData(USART2, buffer_deque(Serial2.txring)); //&txring[USART2Serial]));
		}
	}
}

void USART3_IRQHandler(void) {
 800101c:	b510      	push	{r4, lr}
	if (USART_GetITStatus(USART3, USART_IT_RXNE )) {
 800101e:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8001022:	f240 5125 	movw	r1, #1317	; 0x525
 8001026:	f002 f9c3 	bl	80033b0 <USART_GetITStatus>
 800102a:	2800      	cmp	r0, #0
 800102c:	d12c      	bne.n	8001088 <USART3_IRQHandler+0x70>
		buffer_enque(Serial3.rxring /*&rxring[USART3Serial]*/,
				USART_ReceiveData(USART3 ));
	}

	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
 800102e:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 8001032:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8001036:	f240 7127 	movw	r1, #1831	; 0x727
 800103a:	f002 f9b9 	bl	80033b0 <USART_GetITStatus>
 800103e:	2800      	cmp	r0, #0
 8001040:	d021      	beq.n	8001086 <USART3_IRQHandler+0x6e>
		if (Serial3.txring->count == 0) {
 8001042:	4b18      	ldr	r3, [pc, #96]	; (80010a4 <USART3_IRQHandler+0x8c>)
 8001044:	68d8      	ldr	r0, [r3, #12]
 8001046:	f8b0 2104 	ldrh.w	r2, [r0, #260]	; 0x104
 800104a:	b152      	cbz	r2, 8001062 <USART3_IRQHandler+0x4a>
			USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART3, USART_IT_TXE );
		} else {
			USART_SendData(USART3,
 800104c:	f7ff fd74 	bl	8000b38 <buffer_deque>
 8001050:	4601      	mov	r1, r0
 8001052:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 8001056:	f2c4 0000 	movt	r0, #16384	; 0x4000
					buffer_deque(Serial3.txring /*&txring[USART3Serial]*/));
		}
	}
}
 800105a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
		if (Serial3.txring->count == 0) {
			USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART3, USART_IT_TXE );
		} else {
			USART_SendData(USART3,
 800105e:	f002 b8db 	b.w	8003218 <USART_SendData>
				USART_ReceiveData(USART3 ));
	}

	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
		if (Serial3.txring->count == 0) {
			USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) DISABLE);
 8001062:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 8001066:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800106a:	f240 7127 	movw	r1, #1831	; 0x727
 800106e:	f002 f979 	bl	8003364 <USART_ITConfig>
			USART_ClearITPendingBit(USART3, USART_IT_TXE );
 8001072:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 8001076:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800107a:	f240 7127 	movw	r1, #1831	; 0x727
		} else {
			USART_SendData(USART3,
					buffer_deque(Serial3.txring /*&txring[USART3Serial]*/));
		}
	}
}
 800107e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	}

	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
		if (Serial3.txring->count == 0) {
			USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART3, USART_IT_TXE );
 8001082:	f002 b9b9 	b.w	80033f8 <USART_ClearITPendingBit>
 8001086:	bd10      	pop	{r4, pc}
	}
}

void USART3_IRQHandler(void) {
	if (USART_GetITStatus(USART3, USART_IT_RXNE )) {
		buffer_enque(Serial3.rxring /*&rxring[USART3Serial]*/,
 8001088:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <USART3_IRQHandler+0x8c>)
 800108a:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 800108e:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8001092:	689c      	ldr	r4, [r3, #8]
 8001094:	f002 f8c4 	bl	8003220 <USART_ReceiveData>
 8001098:	4601      	mov	r1, r0
 800109a:	4620      	mov	r0, r4
 800109c:	f7ff fd28 	bl	8000af0 <buffer_enque>
 80010a0:	e7c5      	b.n	800102e <USART3_IRQHandler+0x16>
 80010a2:	bf00      	nop
 80010a4:	20001018 	.word	0x20001018

080010a8 <UART4_IRQHandler>:
		}
	}
}

void UART4_IRQHandler(void) {
	if (USART_GetITStatus(UART4, USART_IT_RXNE )) {
 80010a8:	f44f 4098 	mov.w	r0, #19456	; 0x4c00
					buffer_deque(Serial3.txring /*&txring[USART3Serial]*/));
		}
	}
}

void UART4_IRQHandler(void) {
 80010ac:	b510      	push	{r4, lr}
	if (USART_GetITStatus(UART4, USART_IT_RXNE )) {
 80010ae:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80010b2:	f240 5125 	movw	r1, #1317	; 0x525
 80010b6:	f002 f97b 	bl	80033b0 <USART_GetITStatus>
 80010ba:	2800      	cmp	r0, #0
 80010bc:	d12c      	bne.n	8001118 <UART4_IRQHandler+0x70>
		buffer_enque(Serial4.rxring, USART_ReceiveData(UART4 ));
	}

	if (USART_GetITStatus(UART4, USART_IT_TXE )) {
 80010be:	f44f 4098 	mov.w	r0, #19456	; 0x4c00
 80010c2:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80010c6:	f240 7127 	movw	r1, #1831	; 0x727
 80010ca:	f002 f971 	bl	80033b0 <USART_GetITStatus>
 80010ce:	2800      	cmp	r0, #0
 80010d0:	d021      	beq.n	8001116 <UART4_IRQHandler+0x6e>
		if (Serial4.txring->count == 0) {
 80010d2:	4b18      	ldr	r3, [pc, #96]	; (8001134 <UART4_IRQHandler+0x8c>)
 80010d4:	68d8      	ldr	r0, [r3, #12]
 80010d6:	f8b0 2104 	ldrh.w	r2, [r0, #260]	; 0x104
 80010da:	b152      	cbz	r2, 80010f2 <UART4_IRQHandler+0x4a>
			USART_ITConfig(UART4, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(UART4, USART_IT_TXE );
		} else {
			USART_SendData(UART4, buffer_deque(Serial4.txring));
 80010dc:	f7ff fd2c 	bl	8000b38 <buffer_deque>
 80010e0:	4601      	mov	r1, r0
 80010e2:	f44f 4098 	mov.w	r0, #19456	; 0x4c00
 80010e6:	f2c4 0000 	movt	r0, #16384	; 0x4000
		}
	}
}
 80010ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (USART_GetITStatus(UART4, USART_IT_TXE )) {
		if (Serial4.txring->count == 0) {
			USART_ITConfig(UART4, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(UART4, USART_IT_TXE );
		} else {
			USART_SendData(UART4, buffer_deque(Serial4.txring));
 80010ee:	f002 b893 	b.w	8003218 <USART_SendData>
		buffer_enque(Serial4.rxring, USART_ReceiveData(UART4 ));
	}

	if (USART_GetITStatus(UART4, USART_IT_TXE )) {
		if (Serial4.txring->count == 0) {
			USART_ITConfig(UART4, USART_IT_TXE, (FunctionalState) DISABLE);
 80010f2:	f44f 4098 	mov.w	r0, #19456	; 0x4c00
 80010f6:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80010fa:	f240 7127 	movw	r1, #1831	; 0x727
 80010fe:	f002 f931 	bl	8003364 <USART_ITConfig>
			USART_ClearITPendingBit(UART4, USART_IT_TXE );
 8001102:	f44f 4098 	mov.w	r0, #19456	; 0x4c00
 8001106:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800110a:	f240 7127 	movw	r1, #1831	; 0x727
		} else {
			USART_SendData(UART4, buffer_deque(Serial4.txring));
		}
	}
}
 800110e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	}

	if (USART_GetITStatus(UART4, USART_IT_TXE )) {
		if (Serial4.txring->count == 0) {
			USART_ITConfig(UART4, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(UART4, USART_IT_TXE );
 8001112:	f002 b971 	b.w	80033f8 <USART_ClearITPendingBit>
 8001116:	bd10      	pop	{r4, pc}
	}
}

void UART4_IRQHandler(void) {
	if (USART_GetITStatus(UART4, USART_IT_RXNE )) {
		buffer_enque(Serial4.rxring, USART_ReceiveData(UART4 ));
 8001118:	4b06      	ldr	r3, [pc, #24]	; (8001134 <UART4_IRQHandler+0x8c>)
 800111a:	f44f 4098 	mov.w	r0, #19456	; 0x4c00
 800111e:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8001122:	689c      	ldr	r4, [r3, #8]
 8001124:	f002 f87c 	bl	8003220 <USART_ReceiveData>
 8001128:	4601      	mov	r1, r0
 800112a:	4620      	mov	r0, r4
 800112c:	f7ff fce0 	bl	8000af0 <buffer_enque>
 8001130:	e7c5      	b.n	80010be <UART4_IRQHandler+0x16>
 8001132:	bf00      	nop
 8001134:	2000165c 	.word	0x2000165c

08001138 <NVIC_PriorityGroupConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8001138:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800113c:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8001140:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001144:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8001148:	60d8      	str	r0, [r3, #12]
}
 800114a:	4770      	bx	lr

0800114c <NVIC_Init>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 800114c:	78c3      	ldrb	r3, [r0, #3]
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 800114e:	b430      	push	{r4, r5}
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8001150:	b97b      	cbnz	r3, 8001172 <NVIC_Init+0x26>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001152:	7802      	ldrb	r2, [r0, #0]
 8001154:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8001158:	0951      	lsrs	r1, r2, #5
 800115a:	f2ce 0300 	movt	r3, #57344	; 0xe000
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800115e:	f002 021f 	and.w	r2, r2, #31
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001162:	3120      	adds	r1, #32
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8001164:	2001      	movs	r0, #1
 8001166:	fa10 f202 	lsls.w	r2, r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800116a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800116e:	bc30      	pop	{r4, r5}
 8001170:	4770      	bx	lr
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8001172:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8001176:	f2ce 0300 	movt	r3, #57344	; 0xe000
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800117a:	7845      	ldrb	r5, [r0, #1]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800117c:	68da      	ldr	r2, [r3, #12]
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 800117e:	7884      	ldrb	r4, [r0, #2]
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8001180:	7803      	ldrb	r3, [r0, #0]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8001182:	43d2      	mvns	r2, r2
 8001184:	f3c2 2202 	ubfx	r2, r2, #8, #3
    tmppre = (0x4 - tmppriority);
 8001188:	f1c2 0104 	rsb	r1, r2, #4
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800118c:	b2c9      	uxtb	r1, r1
 800118e:	fa15 f101 	lsls.w	r1, r5, r1
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
 8001192:	250f      	movs	r5, #15
 8001194:	fa55 f202 	asrs.w	r2, r5, r2

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8001198:	b2c9      	uxtb	r1, r1
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 800119a:	4022      	ands	r2, r4
 800119c:	430a      	orrs	r2, r1
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800119e:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80011a2:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
        
    tmppriority = tmppriority << 0x04;
 80011a6:	0112      	lsls	r2, r2, #4
 80011a8:	b2d2      	uxtb	r2, r2
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80011aa:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80011ae:	7802      	ldrb	r2, [r0, #0]
    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80011b0:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80011b4:	0951      	lsrs	r1, r2, #5
    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80011b6:	f2ce 0300 	movt	r3, #57344	; 0xe000
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80011ba:	f002 021f 	and.w	r2, r2, #31
 80011be:	2001      	movs	r0, #1
 80011c0:	fa10 f202 	lsls.w	r2, r0, r2
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80011c4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 80011c8:	e7d1      	b.n	800116e <NVIC_Init+0x22>
 80011ca:	bf00      	nop

080011cc <NVIC_SetVectorTable>:
{ 
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 80011cc:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
 80011d0:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 80011d4:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 80011d8:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80011dc:	4301      	orrs	r1, r0
 80011de:	6099      	str	r1, [r3, #8]
}
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop

080011e4 <NVIC_SystemLPConfig>:
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
  {
    SCB->SCR |= LowPowerMode;
 80011e4:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 80011e8:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80011ec:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 80011ee:	b919      	cbnz	r1, 80011f8 <NVIC_SystemLPConfig+0x14>
  {
    SCB->SCR |= LowPowerMode;
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 80011f0:	ea22 0000 	bic.w	r0, r2, r0
 80011f4:	6118      	str	r0, [r3, #16]
 80011f6:	4770      	bx	lr
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
  {
    SCB->SCR |= LowPowerMode;
 80011f8:	4310      	orrs	r0, r2
 80011fa:	6118      	str	r0, [r3, #16]
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop

08001200 <SysTick_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8001200:	f24e 0310 	movw	r3, #57360	; 0xe010
 8001204:	f2ce 0300 	movt	r3, #57344	; 0xe000
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 8001208:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	bf0c      	ite	eq
 800120e:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 8001212:	f022 0204 	bicne.w	r2, r2, #4
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop

0800121c <GPIO_DeInit>:
  * @note   By default, The GPIO pins are configured in input floating mode (except JTAG pins).
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 800121c:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
 800121e:	2300      	movs	r3, #0
 8001220:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001224:	4298      	cmp	r0, r3
 8001226:	d03c      	beq.n	80012a2 <GPIO_DeInit+0x86>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
  }
  else if (GPIOx == GPIOB)
 8001228:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800122c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001230:	4298      	cmp	r0, r3
 8001232:	d040      	beq.n	80012b6 <GPIO_DeInit+0x9a>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
  }
  else if (GPIOx == GPIOC)
 8001234:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001238:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800123c:	4298      	cmp	r0, r3
 800123e:	d044      	beq.n	80012ca <GPIO_DeInit+0xae>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
  }
  else if (GPIOx == GPIOD)
 8001240:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001244:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001248:	4298      	cmp	r0, r3
 800124a:	d048      	beq.n	80012de <GPIO_DeInit+0xc2>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
  }
  else if (GPIOx == GPIOE)
 800124c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001250:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001254:	4298      	cmp	r0, r3
 8001256:	d04c      	beq.n	80012f2 <GPIO_DeInit+0xd6>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
  }
  else if (GPIOx == GPIOF)
 8001258:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800125c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001260:	4298      	cmp	r0, r3
 8001262:	d050      	beq.n	8001306 <GPIO_DeInit+0xea>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
  }
  else if (GPIOx == GPIOG)
 8001264:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001268:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800126c:	4298      	cmp	r0, r3
 800126e:	d054      	beq.n	800131a <GPIO_DeInit+0xfe>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
  }
  else if (GPIOx == GPIOH)
 8001270:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001274:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001278:	4298      	cmp	r0, r3
 800127a:	d058      	beq.n	800132e <GPIO_DeInit+0x112>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
  }
  else
  {
    if (GPIOx == GPIOI)
 800127c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001280:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001284:	4298      	cmp	r0, r3
 8001286:	d000      	beq.n	800128a <GPIO_DeInit+0x6e>
 8001288:	bd08      	pop	{r3, pc}
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 800128a:	2101      	movs	r1, #1
 800128c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001290:	f000 fcda 	bl	8001c48 <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 8001294:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001298:	2100      	movs	r1, #0
    }
  }
}
 800129a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (GPIOx == GPIOI)
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 800129e:	f000 bcd3 	b.w	8001c48 <RCC_AHB1PeriphResetCmd>
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 80012a2:	2001      	movs	r0, #1
 80012a4:	4601      	mov	r1, r0
 80012a6:	f000 fccf 	bl	8001c48 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 80012aa:	2001      	movs	r0, #1
 80012ac:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 80012ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 80012b2:	f000 bcc9 	b.w	8001c48 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOB)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 80012b6:	2002      	movs	r0, #2
 80012b8:	2101      	movs	r1, #1
 80012ba:	f000 fcc5 	bl	8001c48 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 80012be:	2002      	movs	r0, #2
 80012c0:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 80012c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
  }
  else if (GPIOx == GPIOB)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 80012c6:	f000 bcbf 	b.w	8001c48 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOC)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 80012ca:	2004      	movs	r0, #4
 80012cc:	2101      	movs	r1, #1
 80012ce:	f000 fcbb 	bl	8001c48 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 80012d2:	2004      	movs	r0, #4
 80012d4:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 80012d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
  }
  else if (GPIOx == GPIOC)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 80012da:	f000 bcb5 	b.w	8001c48 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOD)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 80012de:	2008      	movs	r0, #8
 80012e0:	2101      	movs	r1, #1
 80012e2:	f000 fcb1 	bl	8001c48 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 80012e6:	2008      	movs	r0, #8
 80012e8:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 80012ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
  }
  else if (GPIOx == GPIOD)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 80012ee:	f000 bcab 	b.w	8001c48 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOE)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 80012f2:	2010      	movs	r0, #16
 80012f4:	2101      	movs	r1, #1
 80012f6:	f000 fca7 	bl	8001c48 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 80012fa:	2010      	movs	r0, #16
 80012fc:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 80012fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
  }
  else if (GPIOx == GPIOE)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 8001302:	f000 bca1 	b.w	8001c48 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOF)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 8001306:	2020      	movs	r0, #32
 8001308:	2101      	movs	r1, #1
 800130a:	f000 fc9d 	bl	8001c48 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 800130e:	2020      	movs	r0, #32
 8001310:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 8001312:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
  }
  else if (GPIOx == GPIOF)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 8001316:	f000 bc97 	b.w	8001c48 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOG)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 800131a:	2040      	movs	r0, #64	; 0x40
 800131c:	2101      	movs	r1, #1
 800131e:	f000 fc93 	bl	8001c48 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 8001322:	2040      	movs	r0, #64	; 0x40
 8001324:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 8001326:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
  }
  else if (GPIOx == GPIOG)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 800132a:	f000 bc8d 	b.w	8001c48 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOH)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 800132e:	2080      	movs	r0, #128	; 0x80
 8001330:	2101      	movs	r1, #1
 8001332:	f000 fc89 	bl	8001c48 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 8001336:	2080      	movs	r0, #128	; 0x80
 8001338:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 800133a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
  }
  else if (GPIOx == GPIOH)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 800133e:	f000 bc83 	b.w	8001c48 <RCC_AHB1PeriphResetCmd>
 8001342:	bf00      	nop

08001344 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8001344:	2300      	movs	r3, #0
 8001346:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800134a:	680a      	ldr	r2, [r1, #0]
 800134c:	461c      	mov	r4, r3
  {
    pos = ((uint32_t)0x01) << pinpos;
 800134e:	2701      	movs	r7, #1
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8001350:	f04f 0803 	mov.w	r8, #3
 8001354:	e003      	b.n	800135e <GPIO_Init+0x1a>
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001356:	3401      	adds	r4, #1
 8001358:	3302      	adds	r3, #2
 800135a:	2c10      	cmp	r4, #16
 800135c:	d02b      	beq.n	80013b6 <GPIO_Init+0x72>
  {
    pos = ((uint32_t)0x01) << pinpos;
 800135e:	fa17 f504 	lsls.w	r5, r7, r4
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8001362:	ea05 0602 	and.w	r6, r5, r2

    if (currentpin == pos)
 8001366:	42ae      	cmp	r6, r5
 8001368:	d1f5      	bne.n	8001356 <GPIO_Init+0x12>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800136a:	f8d0 9000 	ldr.w	r9, [r0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800136e:	f891 c004 	ldrb.w	ip, [r1, #4]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8001372:	fa08 f503 	lsl.w	r5, r8, r3
 8001376:	43ed      	mvns	r5, r5
 8001378:	ea05 0909 	and.w	r9, r5, r9
 800137c:	f8c0 9000 	str.w	r9, [r0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8001380:	f8d0 9000 	ldr.w	r9, [r0]
 8001384:	fa0c fa03 	lsl.w	sl, ip, r3

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8001388:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800138c:	ea4a 0909 	orr.w	r9, sl, r9

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8001390:	f1bc 0f01 	cmp.w	ip, #1
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8001394:	f8c0 9000 	str.w	r9, [r0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8001398:	d910      	bls.n	80013bc <GPIO_Init+0x78>
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 800139a:	68c6      	ldr	r6, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800139c:	f891 c007 	ldrb.w	ip, [r1, #7]
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80013a0:	4035      	ands	r5, r6
 80013a2:	60c5      	str	r5, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80013a4:	68c6      	ldr	r6, [r0, #12]
 80013a6:	fa0c f503 	lsl.w	r5, ip, r3
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80013aa:	3401      	adds	r4, #1
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80013ac:	4335      	orrs	r5, r6
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80013ae:	3302      	adds	r3, #2
 80013b0:	2c10      	cmp	r4, #16
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80013b2:	60c5      	str	r5, [r0, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80013b4:	d1d3      	bne.n	800135e <GPIO_Init+0x1a>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 80013b6:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 80013ba:	4770      	bx	lr
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80013bc:	f8d0 a008 	ldr.w	sl, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80013c0:	f891 9005 	ldrb.w	r9, [r1, #5]
        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80013c4:	f891 c006 	ldrb.w	ip, [r1, #6]
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80013c8:	ea05 0a0a 	and.w	sl, r5, sl
 80013cc:	f8c0 a008 	str.w	sl, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80013d0:	f8d0 a008 	ldr.w	sl, [r0, #8]
 80013d4:	fa09 f903 	lsl.w	r9, r9, r3
 80013d8:	ea49 090a 	orr.w	r9, r9, sl
 80013dc:	f8c0 9008 	str.w	r9, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80013e0:	f8d0 9004 	ldr.w	r9, [r0, #4]
 80013e4:	ea29 0606 	bic.w	r6, r9, r6
 80013e8:	6046      	str	r6, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80013ea:	6846      	ldr	r6, [r0, #4]
 80013ec:	fa0c fc04 	lsl.w	ip, ip, r4
 80013f0:	fa1f fc8c 	uxth.w	ip, ip
 80013f4:	ea4c 0606 	orr.w	r6, ip, r6
 80013f8:	6046      	str	r6, [r0, #4]
 80013fa:	e7ce      	b.n	800139a <GPIO_Init+0x56>

080013fc <GPIO_StructInit>:
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 80013fc:	2300      	movs	r3, #0
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 80013fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001402:	6002      	str	r2, [r0, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8001404:	7103      	strb	r3, [r0, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8001406:	7143      	strb	r3, [r0, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 8001408:	7183      	strb	r3, [r0, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 800140a:	71c3      	strb	r3, [r0, #7]
}
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop

08001410 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001410:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0x00010000;
 8001412:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001416:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
 8001418:	9b01      	ldr	r3, [sp, #4]
 800141a:	430b      	orrs	r3, r1
 800141c:	9301      	str	r3, [sp, #4]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 800141e:	9b01      	ldr	r3, [sp, #4]
 8001420:	61c3      	str	r3, [r0, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 8001422:	61c1      	str	r1, [r0, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8001424:	9b01      	ldr	r3, [sp, #4]
 8001426:	61c3      	str	r3, [r0, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8001428:	69c3      	ldr	r3, [r0, #28]
 800142a:	9301      	str	r3, [sp, #4]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 800142c:	69c3      	ldr	r3, [r0, #28]
 800142e:	9301      	str	r3, [sp, #4]
}
 8001430:	b002      	add	sp, #8
 8001432:	4770      	bx	lr

08001434 <GPIO_ReadInputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8001434:	6903      	ldr	r3, [r0, #16]
  {
    bitstatus = (uint8_t)Bit_SET;
 8001436:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 8001438:	bf0c      	ite	eq
 800143a:	2000      	moveq	r0, #0
 800143c:	2001      	movne	r0, #1
 800143e:	4770      	bx	lr

08001440 <GPIO_ReadInputData>:
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 8001440:	6900      	ldr	r0, [r0, #16]
}
 8001442:	b280      	uxth	r0, r0
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop

08001448 <GPIO_ReadOutputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8001448:	6943      	ldr	r3, [r0, #20]
  {
    bitstatus = (uint8_t)Bit_SET;
 800144a:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 800144c:	bf0c      	ite	eq
 800144e:	2000      	moveq	r0, #0
 8001450:	2001      	movne	r0, #1
 8001452:	4770      	bx	lr

08001454 <GPIO_ReadOutputData>:
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
 8001454:	6940      	ldr	r0, [r0, #20]
}
 8001456:	b280      	uxth	r0, r0
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop

0800145c <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 800145c:	8301      	strh	r1, [r0, #24]
}
 800145e:	4770      	bx	lr

08001460 <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8001460:	8341      	strh	r1, [r0, #26]
}
 8001462:	4770      	bx	lr

08001464 <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 8001464:	b90a      	cbnz	r2, 800146a <GPIO_WriteBit+0x6>
  {
    GPIOx->BSRRL = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 8001466:	8341      	strh	r1, [r0, #26]
 8001468:	4770      	bx	lr
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
  {
    GPIOx->BSRRL = GPIO_Pin;
 800146a:	8301      	strh	r1, [r0, #24]
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop

08001470 <GPIO_Write>:
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 8001470:	6141      	str	r1, [r0, #20]
}
 8001472:	4770      	bx	lr

08001474 <GPIO_ToggleBits>:
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 8001474:	6943      	ldr	r3, [r0, #20]
 8001476:	404b      	eors	r3, r1
 8001478:	6143      	str	r3, [r0, #20]
}
 800147a:	4770      	bx	lr

0800147c <GPIO_PinAFConfig>:
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800147c:	08cb      	lsrs	r3, r1, #3
 800147e:	3308      	adds	r3, #8
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001480:	f001 0107 	and.w	r1, r1, #7
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8001484:	b430      	push	{r4, r5}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001486:	0089      	lsls	r1, r1, #2
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001488:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
 800148c:	240f      	movs	r4, #15
 800148e:	408c      	lsls	r4, r1
 8001490:	ea25 0404 	bic.w	r4, r5, r4
 8001494:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8001498:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800149c:	fa12 f101 	lsls.w	r1, r2, r1
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80014a0:	430c      	orrs	r4, r1
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80014a2:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
}
 80014a6:	bc30      	pop	{r4, r5}
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop

080014ac <I2C_DeInit>:
  * @brief  Deinitialize the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 80014ac:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 80014ae:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 80014b2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80014b6:	4298      	cmp	r0, r3
 80014b8:	d018      	beq.n	80014ec <I2C_DeInit+0x40>
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
  }
  else if (I2Cx == I2C2)
 80014ba:	f44f 43b0 	mov.w	r3, #22528	; 0x5800
 80014be:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80014c2:	4298      	cmp	r0, r3
 80014c4:	d01e      	beq.n	8001504 <I2C_DeInit+0x58>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
  }
  else 
  {
    if (I2Cx == I2C3)
 80014c6:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 80014ca:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80014ce:	4298      	cmp	r0, r3
 80014d0:	d000      	beq.n	80014d4 <I2C_DeInit+0x28>
 80014d2:	bd08      	pop	{r3, pc}
    {
      /* Enable I2C3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
 80014d4:	2101      	movs	r1, #1
 80014d6:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80014da:	f000 fbdf 	bl	8001c9c <RCC_APB1PeriphResetCmd>
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 80014de:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80014e2:	2100      	movs	r1, #0
    }
  }
}
 80014e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if (I2Cx == I2C3)
    {
      /* Enable I2C3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 80014e8:	f000 bbd8 	b.w	8001c9c <RCC_APB1PeriphResetCmd>
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 80014ec:	2101      	movs	r1, #1
 80014ee:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80014f2:	f000 fbd3 	bl	8001c9c <RCC_APB1PeriphResetCmd>
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
 80014f6:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80014fa:	2100      	movs	r1, #0
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
    }
  }
}
 80014fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  if (I2Cx == I2C1)
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
 8001500:	f000 bbcc 	b.w	8001c9c <RCC_APB1PeriphResetCmd>
  }
  else if (I2Cx == I2C2)
  {
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 8001504:	2101      	movs	r1, #1
 8001506:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800150a:	f000 fbc7 	bl	8001c9c <RCC_APB1PeriphResetCmd>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
 800150e:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001512:	2100      	movs	r1, #0
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
    }
  }
}
 8001514:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else if (I2Cx == I2C2)
  {
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
 8001518:	f000 bbc0 	b.w	8001c9c <RCC_APB1PeriphResetCmd>

0800151c <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 800151c:	b570      	push	{r4, r5, r6, lr}
 800151e:	4604      	mov	r4, r0
 8001520:	b084      	sub	sp, #16
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 8001522:	4668      	mov	r0, sp
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 8001524:	88a6      	ldrh	r6, [r4, #4]
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8001526:	460d      	mov	r5, r1
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 8001528:	f000 fac4 	bl	8001ab4 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 800152c:	9802      	ldr	r0, [sp, #8]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 800152e:	682a      	ldr	r2, [r5, #0]
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
  pclk1 = rcc_clocks.PCLK1_Frequency;
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 8001530:	f64d 6183 	movw	r1, #56963	; 0xde83

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 8001534:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
  pclk1 = rcc_clocks.PCLK1_Frequency;
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 8001538:	f2c4 311b 	movt	r1, #17179	; 0x431b

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 800153c:	0436      	lsls	r6, r6, #16
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
  pclk1 = rcc_clocks.PCLK1_Frequency;
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 800153e:	fba1 3100 	umull	r3, r1, r1, r0

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 8001542:	0c36      	lsrs	r6, r6, #16
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
  pclk1 = rcc_clocks.PCLK1_Frequency;
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 8001544:	0c89      	lsrs	r1, r1, #18
  tmpreg |= freqrange;
 8001546:	430e      	orrs	r6, r1
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 8001548:	80a6      	strh	r6, [r4, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 800154a:	8823      	ldrh	r3, [r4, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 800154c:	f248 66a0 	movw	r6, #34464	; 0x86a0
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8001550:	f023 0301 	bic.w	r3, r3, #1
 8001554:	041b      	lsls	r3, r3, #16
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8001556:	f2c0 0601 	movt	r6, #1
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 800155a:	0c1b      	lsrs	r3, r3, #16
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 800155c:	42b2      	cmp	r2, r6
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 800155e:	8023      	strh	r3, [r4, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8001560:	d822      	bhi.n	80015a8 <I2C_Init+0x8c>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 8001562:	0052      	lsls	r2, r2, #1
 8001564:	fbb0 f0f2 	udiv	r0, r0, r2
 8001568:	b280      	uxth	r0, r0
      result = 0x04;  
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 800156a:	3101      	adds	r1, #1
 800156c:	8421      	strh	r1, [r4, #32]
    {
      /* Set minimum allowed value */
      result = 0x04;  
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 800156e:	2803      	cmp	r0, #3
 8001570:	bf98      	it	ls
 8001572:	2004      	movls	r0, #4
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 8001574:	83a0      	strh	r0, [r4, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 8001576:	8823      	ldrh	r3, [r4, #0]
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8001578:	896e      	ldrh	r6, [r5, #10]
 800157a:	88a8      	ldrh	r0, [r5, #4]
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 800157c:	8929      	ldrh	r1, [r5, #8]
 800157e:	89aa      	ldrh	r2, [r5, #12]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 8001580:	b29b      	uxth	r3, r3
 8001582:	f043 0301 	orr.w	r3, r3, #1
 8001586:	8023      	strh	r3, [r4, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 8001588:	8823      	ldrh	r3, [r4, #0]
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 800158a:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 800158e:	f023 0302 	bic.w	r3, r3, #2
 8001592:	041b      	lsls	r3, r3, #16
 8001594:	0c1b      	lsrs	r3, r3, #16
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8001596:	4330      	orrs	r0, r6
 8001598:	4303      	orrs	r3, r0
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 800159a:	430a      	orrs	r2, r1
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 800159c:	b29b      	uxth	r3, r3
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 800159e:	b292      	uxth	r2, r2
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 80015a0:	8023      	strh	r3, [r4, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 80015a2:	8122      	strh	r2, [r4, #8]
}
 80015a4:	b004      	add	sp, #16
 80015a6:	bd70      	pop	{r4, r5, r6, pc}
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 80015a8:	88ee      	ldrh	r6, [r5, #6]
 80015aa:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 80015ae:	429e      	cmp	r6, r3
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 80015b0:	bf1d      	ittte	ne
 80015b2:	eb02 0282 	addne.w	r2, r2, r2, lsl #2
 80015b6:	eb02 0282 	addne.w	r2, r2, r2, lsl #2
 80015ba:	fbb0 f0f2 	udivne	r0, r0, r2
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 80015be:	eb02 0242 	addeq.w	r2, r2, r2, lsl #1
 80015c2:	bf0b      	itete	eq
 80015c4:	fbb0 f0f2 	udiveq	r0, r0, r2
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 80015c8:	b280      	uxthne	r0, r0
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 80015ca:	b280      	uxtheq	r0, r0
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 80015cc:	f440 4080 	orrne.w	r0, r0, #16384	; 0x4000
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 80015d0:	0503      	lsls	r3, r0, #20
 80015d2:	0d1b      	lsrs	r3, r3, #20
 80015d4:	b90b      	cbnz	r3, 80015da <I2C_Init+0xbe>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 80015d6:	f040 0001 	orr.w	r0, r0, #1
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 80015da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80015de:	f644 53d3 	movw	r3, #19923	; 0x4dd3
 80015e2:	fb02 f101 	mul.w	r1, r2, r1
 80015e6:	f2c1 0362 	movt	r3, #4194	; 0x1062
 80015ea:	fb83 2301 	smull	r2, r3, r3, r1
 80015ee:	099b      	lsrs	r3, r3, #6
 80015f0:	3301      	adds	r3, #1
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 80015f2:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 80015f6:	8423      	strh	r3, [r4, #32]
 80015f8:	e7bc      	b.n	8001574 <I2C_Init+0x58>
 80015fa:	bf00      	nop

080015fc <I2C_StructInit>:
{
/*---------------- Reset I2C init structure parameters values ----------------*/
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 80015fc:	2300      	movs	r3, #0
  */
void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
{
/*---------------- Reset I2C init structure parameters values ----------------*/
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
 80015fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001602:	6002      	str	r2, [r0, #0]
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 8001604:	8083      	strh	r3, [r0, #4]
  /* Initialize the I2C_DutyCycle member */
  I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 8001606:	f64b 72ff 	movw	r2, #49151	; 0xbfff
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
 800160a:	8103      	strh	r3, [r0, #8]
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
 800160c:	8143      	strh	r3, [r0, #10]
  /* Initialize the I2C_AcknowledgedAddress member */
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 800160e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
  /* Initialize the I2C_DutyCycle member */
  I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 8001612:	80c2      	strh	r2, [r0, #6]
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
  /* Initialize the I2C_AcknowledgedAddress member */
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8001614:	8183      	strh	r3, [r0, #12]
}
 8001616:	4770      	bx	lr

08001618 <I2C_Cmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 8001618:	8803      	ldrh	r3, [r0, #0]
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800161a:	b929      	cbnz	r1, 8001628 <I2C_Cmd+0x10>
    I2Cx->CR1 |= I2C_CR1_PE;
  }
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 800161c:	f023 0301 	bic.w	r3, r3, #1
 8001620:	041b      	lsls	r3, r3, #16
 8001622:	0c1b      	lsrs	r3, r3, #16
 8001624:	8003      	strh	r3, [r0, #0]
 8001626:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 8001628:	b29b      	uxth	r3, r3
 800162a:	f043 0301 	orr.w	r3, r3, #1
 800162e:	8003      	strh	r3, [r0, #0]
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop

08001634 <I2C_GenerateSTART>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 8001634:	8803      	ldrh	r3, [r0, #0]
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001636:	b929      	cbnz	r1, 8001644 <I2C_GenerateSTART+0x10>
    I2Cx->CR1 |= I2C_CR1_START;
  }
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 8001638:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800163c:	041b      	lsls	r3, r3, #16
 800163e:	0c1b      	lsrs	r3, r3, #16
 8001640:	8003      	strh	r3, [r0, #0]
 8001642:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 8001644:	b29b      	uxth	r3, r3
 8001646:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800164a:	8003      	strh	r3, [r0, #0]
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop

08001650 <I2C_GenerateSTOP>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 8001650:	8803      	ldrh	r3, [r0, #0]
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001652:	b929      	cbnz	r1, 8001660 <I2C_GenerateSTOP+0x10>
    I2Cx->CR1 |= I2C_CR1_STOP;
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 8001654:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001658:	041b      	lsls	r3, r3, #16
 800165a:	0c1b      	lsrs	r3, r3, #16
 800165c:	8003      	strh	r3, [r0, #0]
 800165e:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 8001660:	b29b      	uxth	r3, r3
 8001662:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001666:	8003      	strh	r3, [r0, #0]
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop

0800166c <I2C_Send7bitAddress>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 800166c:	b91a      	cbnz	r2, 8001676 <I2C_Send7bitAddress+0xa>
    Address |= I2C_OAR1_ADD0;
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 800166e:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
  }
  /* Send the address */
  I2Cx->DR = Address;
 8001672:	8201      	strh	r1, [r0, #16]
}
 8001674:	4770      	bx	lr
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
  {
    /* Set the address bit0 for read */
    Address |= I2C_OAR1_ADD0;
 8001676:	f041 0101 	orr.w	r1, r1, #1
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
  }
  /* Send the address */
  I2Cx->DR = Address;
 800167a:	8201      	strh	r1, [r0, #16]
}
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop

08001680 <I2C_AcknowledgeConfig>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 8001680:	8803      	ldrh	r3, [r0, #0]
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001682:	b929      	cbnz	r1, 8001690 <I2C_AcknowledgeConfig+0x10>
    I2Cx->CR1 |= I2C_CR1_ACK;
  }
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 8001684:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001688:	041b      	lsls	r3, r3, #16
 800168a:	0c1b      	lsrs	r3, r3, #16
 800168c:	8003      	strh	r3, [r0, #0]
 800168e:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 8001690:	b29b      	uxth	r3, r3
 8001692:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001696:	8003      	strh	r3, [r0, #0]
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop

0800169c <I2C_OwnAddress2Config>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Get the old register value */
  tmpreg = I2Cx->OAR2;
 800169c:	8983      	ldrh	r3, [r0, #12]

  /* Reset I2Cx Own address2 bit [7:1] */
  tmpreg &= (uint16_t)~((uint16_t)I2C_OAR2_ADD2);
 800169e:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 80016a2:	041b      	lsls	r3, r3, #16

  /* Set I2Cx Own address2 */
  tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
 80016a4:	f001 01fe 	and.w	r1, r1, #254	; 0xfe

  /* Get the old register value */
  tmpreg = I2Cx->OAR2;

  /* Reset I2Cx Own address2 bit [7:1] */
  tmpreg &= (uint16_t)~((uint16_t)I2C_OAR2_ADD2);
 80016a8:	0c1b      	lsrs	r3, r3, #16

  /* Set I2Cx Own address2 */
  tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
 80016aa:	430b      	orrs	r3, r1

  /* Store the new register value */
  I2Cx->OAR2 = tmpreg;
 80016ac:	8183      	strh	r3, [r0, #12]
}
 80016ae:	4770      	bx	lr

080016b0 <I2C_DualAddressCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable dual addressing mode */
    I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
 80016b0:	8983      	ldrh	r3, [r0, #12]
void I2C_DualAddressCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80016b2:	b929      	cbnz	r1, 80016c0 <I2C_DualAddressCmd+0x10>
    I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
  }
  else
  {
    /* Disable dual addressing mode */
    I2Cx->OAR2 &= (uint16_t)~((uint16_t)I2C_OAR2_ENDUAL);
 80016b4:	f023 0301 	bic.w	r3, r3, #1
 80016b8:	041b      	lsls	r3, r3, #16
 80016ba:	0c1b      	lsrs	r3, r3, #16
 80016bc:	8183      	strh	r3, [r0, #12]
 80016be:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable dual addressing mode */
    I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	f043 0301 	orr.w	r3, r3, #1
 80016c6:	8183      	strh	r3, [r0, #12]
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop

080016cc <I2C_GeneralCallCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable generall call */
    I2Cx->CR1 |= I2C_CR1_ENGC;
 80016cc:	8803      	ldrh	r3, [r0, #0]
void I2C_GeneralCallCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80016ce:	b929      	cbnz	r1, 80016dc <I2C_GeneralCallCmd+0x10>
    I2Cx->CR1 |= I2C_CR1_ENGC;
  }
  else
  {
    /* Disable generall call */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENGC);
 80016d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80016d4:	041b      	lsls	r3, r3, #16
 80016d6:	0c1b      	lsrs	r3, r3, #16
 80016d8:	8003      	strh	r3, [r0, #0]
 80016da:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable generall call */
    I2Cx->CR1 |= I2C_CR1_ENGC;
 80016dc:	b29b      	uxth	r3, r3
 80016de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016e2:	8003      	strh	r3, [r0, #0]
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop

080016e8 <I2C_SoftwareResetCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Peripheral under reset */
    I2Cx->CR1 |= I2C_CR1_SWRST;
 80016e8:	8803      	ldrh	r3, [r0, #0]
void I2C_SoftwareResetCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80016ea:	b919      	cbnz	r1, 80016f4 <I2C_SoftwareResetCmd+0xc>
    I2Cx->CR1 |= I2C_CR1_SWRST;
  }
  else
  {
    /* Peripheral not under reset */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_SWRST);
 80016ec:	045b      	lsls	r3, r3, #17
 80016ee:	0c5b      	lsrs	r3, r3, #17
 80016f0:	8003      	strh	r3, [r0, #0]
 80016f2:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Peripheral under reset */
    I2Cx->CR1 |= I2C_CR1_SWRST;
 80016f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80016f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80016fc:	b29b      	uxth	r3, r3
 80016fe:	8003      	strh	r3, [r0, #0]
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop

08001704 <I2C_StretchClockCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState == DISABLE)
  {
    /* Enable the selected I2C Clock stretching */
    I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 8001704:	8803      	ldrh	r3, [r0, #0]
void I2C_StretchClockCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState == DISABLE)
 8001706:	b129      	cbz	r1, 8001714 <I2C_StretchClockCmd+0x10>
    I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
  }
  else
  {
    /* Disable the selected I2C Clock stretching */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_NOSTRETCH);
 8001708:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800170c:	041b      	lsls	r3, r3, #16
 800170e:	0c1b      	lsrs	r3, r3, #16
 8001710:	8003      	strh	r3, [r0, #0]
 8001712:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState == DISABLE)
  {
    /* Enable the selected I2C Clock stretching */
    I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 8001714:	b29b      	uxth	r3, r3
 8001716:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800171a:	8003      	strh	r3, [r0, #0]
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop

08001720 <I2C_FastModeDutyCycleConfig>:
void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
  if (I2C_DutyCycle != I2C_DutyCycle_16_9)
 8001720:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
  {
    /* I2C fast mode Tlow/Thigh=2 */
    I2Cx->CCR &= I2C_DutyCycle_2;
 8001724:	8b83      	ldrh	r3, [r0, #28]
void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
  if (I2C_DutyCycle != I2C_DutyCycle_16_9)
 8001726:	d005      	beq.n	8001734 <I2C_FastModeDutyCycleConfig+0x14>
  {
    /* I2C fast mode Tlow/Thigh=2 */
    I2Cx->CCR &= I2C_DutyCycle_2;
 8001728:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800172c:	041b      	lsls	r3, r3, #16
 800172e:	0c1b      	lsrs	r3, r3, #16
 8001730:	8383      	strh	r3, [r0, #28]
 8001732:	4770      	bx	lr
  }
  else
  {
    /* I2C fast mode Tlow/Thigh=16/9 */
    I2Cx->CCR |= I2C_DutyCycle_16_9;
 8001734:	b29b      	uxth	r3, r3
 8001736:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800173a:	8383      	strh	r3, [r0, #28]
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop

08001740 <I2C_NACKPositionConfig>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_NACK_POSITION(I2C_NACKPosition));
  
  /* Check the input parameter */
  if (I2C_NACKPosition == I2C_NACKPosition_Next)
 8001740:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
  {
    /* Next byte in shift register is the last received byte */
    I2Cx->CR1 |= I2C_NACKPosition_Next;
 8001744:	8803      	ldrh	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_NACK_POSITION(I2C_NACKPosition));
  
  /* Check the input parameter */
  if (I2C_NACKPosition == I2C_NACKPosition_Next)
 8001746:	d005      	beq.n	8001754 <I2C_NACKPositionConfig+0x14>
    I2Cx->CR1 |= I2C_NACKPosition_Next;
  }
  else
  {
    /* Current byte in shift register is the last received byte */
    I2Cx->CR1 &= I2C_NACKPosition_Current;
 8001748:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800174c:	041b      	lsls	r3, r3, #16
 800174e:	0c1b      	lsrs	r3, r3, #16
 8001750:	8003      	strh	r3, [r0, #0]
 8001752:	4770      	bx	lr
  
  /* Check the input parameter */
  if (I2C_NACKPosition == I2C_NACKPosition_Next)
  {
    /* Next byte in shift register is the last received byte */
    I2Cx->CR1 |= I2C_NACKPosition_Next;
 8001754:	b29b      	uxth	r3, r3
 8001756:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800175a:	8003      	strh	r3, [r0, #0]
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop

08001760 <I2C_SMBusAlertConfig>:
void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
 8001760:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
  {
    /* Drive the SMBusAlert pin Low */
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
 8001764:	8803      	ldrh	r3, [r0, #0]
void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
 8001766:	d005      	beq.n	8001774 <I2C_SMBusAlertConfig+0x14>
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
  }
  else
  {
    /* Drive the SMBusAlert pin High  */
    I2Cx->CR1 &= I2C_SMBusAlert_High;
 8001768:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800176c:	041b      	lsls	r3, r3, #16
 800176e:	0c1b      	lsrs	r3, r3, #16
 8001770:	8003      	strh	r3, [r0, #0]
 8001772:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
  {
    /* Drive the SMBusAlert pin Low */
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
 8001774:	b29b      	uxth	r3, r3
 8001776:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800177a:	8003      	strh	r3, [r0, #0]
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop

08001780 <I2C_ARPCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C ARP */
    I2Cx->CR1 |= I2C_CR1_ENARP;
 8001780:	8803      	ldrh	r3, [r0, #0]
void I2C_ARPCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001782:	b929      	cbnz	r1, 8001790 <I2C_ARPCmd+0x10>
    I2Cx->CR1 |= I2C_CR1_ENARP;
  }
  else
  {
    /* Disable the selected I2C ARP */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENARP);
 8001784:	f023 0310 	bic.w	r3, r3, #16
 8001788:	041b      	lsls	r3, r3, #16
 800178a:	0c1b      	lsrs	r3, r3, #16
 800178c:	8003      	strh	r3, [r0, #0]
 800178e:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C ARP */
    I2Cx->CR1 |= I2C_CR1_ENARP;
 8001790:	b29b      	uxth	r3, r3
 8001792:	f043 0310 	orr.w	r3, r3, #16
 8001796:	8003      	strh	r3, [r0, #0]
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop

0800179c <I2C_SendData>:
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 800179c:	8201      	strh	r1, [r0, #16]
}
 800179e:	4770      	bx	lr

080017a0 <I2C_ReceiveData>:
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 80017a0:	8a00      	ldrh	r0, [r0, #16]
}
 80017a2:	b2c0      	uxtb	r0, r0
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop

080017a8 <I2C_TransmitPEC>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C PEC transmission */
    I2Cx->CR1 |= I2C_CR1_PEC;
 80017a8:	8803      	ldrh	r3, [r0, #0]
void I2C_TransmitPEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80017aa:	b929      	cbnz	r1, 80017b8 <I2C_TransmitPEC+0x10>
    I2Cx->CR1 |= I2C_CR1_PEC;
  }
  else
  {
    /* Disable the selected I2C PEC transmission */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PEC);
 80017ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80017b0:	041b      	lsls	r3, r3, #16
 80017b2:	0c1b      	lsrs	r3, r3, #16
 80017b4:	8003      	strh	r3, [r0, #0]
 80017b6:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C PEC transmission */
    I2Cx->CR1 |= I2C_CR1_PEC;
 80017b8:	b29b      	uxth	r3, r3
 80017ba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017be:	8003      	strh	r3, [r0, #0]
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop

080017c4 <I2C_PECPositionConfig>:
void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
 80017c4:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
  {
    /* Next byte in shift register is PEC */
    I2Cx->CR1 |= I2C_PECPosition_Next;
 80017c8:	8803      	ldrh	r3, [r0, #0]
void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
 80017ca:	d005      	beq.n	80017d8 <I2C_PECPositionConfig+0x14>
    I2Cx->CR1 |= I2C_PECPosition_Next;
  }
  else
  {
    /* Current byte in shift register is PEC */
    I2Cx->CR1 &= I2C_PECPosition_Current;
 80017cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80017d0:	041b      	lsls	r3, r3, #16
 80017d2:	0c1b      	lsrs	r3, r3, #16
 80017d4:	8003      	strh	r3, [r0, #0]
 80017d6:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
  {
    /* Next byte in shift register is PEC */
    I2Cx->CR1 |= I2C_PECPosition_Next;
 80017d8:	b29b      	uxth	r3, r3
 80017da:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80017de:	8003      	strh	r3, [r0, #0]
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop

080017e4 <I2C_CalculatePEC>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C PEC calculation */
    I2Cx->CR1 |= I2C_CR1_ENPEC;
 80017e4:	8803      	ldrh	r3, [r0, #0]
void I2C_CalculatePEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80017e6:	b929      	cbnz	r1, 80017f4 <I2C_CalculatePEC+0x10>
    I2Cx->CR1 |= I2C_CR1_ENPEC;
  }
  else
  {
    /* Disable the selected I2C PEC calculation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENPEC);
 80017e8:	f023 0320 	bic.w	r3, r3, #32
 80017ec:	041b      	lsls	r3, r3, #16
 80017ee:	0c1b      	lsrs	r3, r3, #16
 80017f0:	8003      	strh	r3, [r0, #0]
 80017f2:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C PEC calculation */
    I2Cx->CR1 |= I2C_CR1_ENPEC;
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	f043 0320 	orr.w	r3, r3, #32
 80017fa:	8003      	strh	r3, [r0, #0]
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop

08001800 <I2C_GetPEC>:
uint8_t I2C_GetPEC(I2C_TypeDef* I2Cx)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the selected I2C PEC value */
  return ((I2Cx->SR2) >> 8);
 8001800:	8b00      	ldrh	r0, [r0, #24]
}
 8001802:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8001806:	4770      	bx	lr

08001808 <I2C_DMACmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR2 |= I2C_CR2_DMAEN;
 8001808:	8883      	ldrh	r3, [r0, #4]
void I2C_DMACmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800180a:	b929      	cbnz	r1, 8001818 <I2C_DMACmd+0x10>
    I2Cx->CR2 |= I2C_CR2_DMAEN;
  }
  else
  {
    /* Disable the selected I2C DMA requests */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_DMAEN);
 800180c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001810:	041b      	lsls	r3, r3, #16
 8001812:	0c1b      	lsrs	r3, r3, #16
 8001814:	8083      	strh	r3, [r0, #4]
 8001816:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR2 |= I2C_CR2_DMAEN;
 8001818:	b29b      	uxth	r3, r3
 800181a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800181e:	8083      	strh	r3, [r0, #4]
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop

08001824 <I2C_DMALastTransferCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Next DMA transfer is the last transfer */
    I2Cx->CR2 |= I2C_CR2_LAST;
 8001824:	8883      	ldrh	r3, [r0, #4]
void I2C_DMALastTransferCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001826:	b929      	cbnz	r1, 8001834 <I2C_DMALastTransferCmd+0x10>
    I2Cx->CR2 |= I2C_CR2_LAST;
  }
  else
  {
    /* Next DMA transfer is not the last transfer */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_LAST);
 8001828:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800182c:	041b      	lsls	r3, r3, #16
 800182e:	0c1b      	lsrs	r3, r3, #16
 8001830:	8083      	strh	r3, [r0, #4]
 8001832:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Next DMA transfer is the last transfer */
    I2Cx->CR2 |= I2C_CR2_LAST;
 8001834:	b29b      	uxth	r3, r3
 8001836:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800183a:	8083      	strh	r3, [r0, #4]
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop

08001840 <I2C_ReadRegister>:
  *            @arg I2C_Register_CCR:   CCR register.
  *            @arg I2C_Register_TRISE: TRISE register.
  * @retval The value of the read register.
  */
uint16_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register)
{
 8001840:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 8001842:	2300      	movs	r3, #0
 8001844:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_REGISTER(I2C_Register));

  tmp = (uint32_t) I2Cx;
 8001846:	9001      	str	r0, [sp, #4]
  tmp += I2C_Register;
 8001848:	9b01      	ldr	r3, [sp, #4]
 800184a:	18cb      	adds	r3, r1, r3
 800184c:	9301      	str	r3, [sp, #4]

  /* Return the selected register value */
  return (*(__IO uint16_t *) tmp);
 800184e:	9b01      	ldr	r3, [sp, #4]
 8001850:	8818      	ldrh	r0, [r3, #0]
}
 8001852:	b280      	uxth	r0, r0
 8001854:	b002      	add	sp, #8
 8001856:	4770      	bx	lr

08001858 <I2C_ITConfig>:
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 8001858:	8883      	ldrh	r3, [r0, #4]
 800185a:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
 800185c:	b91a      	cbnz	r2, 8001866 <I2C_ITConfig+0xe>
    I2Cx->CR2 |= I2C_IT;
  }
  else
  {
    /* Disable the selected I2C interrupts */
    I2Cx->CR2 &= (uint16_t)~I2C_IT;
 800185e:	ea23 0101 	bic.w	r1, r3, r1
 8001862:	8081      	strh	r1, [r0, #4]
 8001864:	4770      	bx	lr
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 8001866:	4319      	orrs	r1, r3
 8001868:	8081      	strh	r1, [r0, #4]
 800186a:	4770      	bx	lr

0800186c <I2C_CheckEvent>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 800186c:	8a82      	ldrh	r2, [r0, #20]
  flag2 = I2Cx->SR2;
 800186e:	8b03      	ldrh	r3, [r0, #24]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8001870:	b290      	uxth	r0, r2
  flag2 = I2Cx->SR2;
  flag2 = flag2 << 16;

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 8001872:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001876:	4008      	ands	r0, r1

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 8001878:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
  }
  /* Return status */
  return status;
}
 800187c:	1a0b      	subs	r3, r1, r0
 800187e:	4258      	negs	r0, r3
 8001880:	eb40 0003 	adc.w	r0, r0, r3
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop

08001888 <I2C_GetLastEvent>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8001888:	8a82      	ldrh	r2, [r0, #20]
  flag2 = I2Cx->SR2;
 800188a:	8b03      	ldrh	r3, [r0, #24]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 800188c:	b290      	uxth	r0, r2
  flag2 = I2Cx->SR2;
  flag2 = flag2 << 16;

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 800188e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16

  /* Return status */
  return lastevent;
}
 8001892:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8001896:	4770      	bx	lr

08001898 <I2C_GetFlagStatus>:
  *                                Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8001898:	b082      	sub	sp, #8
  FlagStatus bitstatus = RESET;
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 800189a:	2300      	movs	r3, #0

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 800189c:	0f0a      	lsrs	r2, r1, #28
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
  FlagStatus bitstatus = RESET;
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 800189e:	9300      	str	r3, [sp, #0]
 80018a0:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 80018a2:	9001      	str	r0, [sp, #4]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 80018a4:	9200      	str	r2, [sp, #0]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
  
  if(i2creg != 0)
 80018a6:	9b00      	ldr	r3, [sp, #0]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 80018a8:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
  
  if(i2creg != 0)
 80018ac:	b153      	cbz	r3, 80018c4 <I2C_GetFlagStatus+0x2c>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 80018ae:	9b01      	ldr	r3, [sp, #4]
 80018b0:	3314      	adds	r3, #20
 80018b2:	9301      	str	r3, [sp, #4]
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 80018b4:	9b01      	ldr	r3, [sp, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 80018b8:	4219      	tst	r1, r3
    bitstatus = RESET;
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
}
 80018ba:	bf0c      	ite	eq
 80018bc:	2000      	moveq	r0, #0
 80018be:	2001      	movne	r0, #1
 80018c0:	b002      	add	sp, #8
 80018c2:	4770      	bx	lr
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 80018c4:	9b01      	ldr	r3, [sp, #4]
 80018c6:	3318      	adds	r3, #24
    i2cxbase += 0x14;
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 80018c8:	0c09      	lsrs	r1, r1, #16
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 80018ca:	9301      	str	r3, [sp, #4]
 80018cc:	e7f2      	b.n	80018b4 <I2C_GetFlagStatus+0x1c>
 80018ce:	bf00      	nop

080018d0 <I2C_ClearFlag>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));
  /* Get the I2C flag position */
  flagpos = I2C_FLAG & FLAG_MASK;
  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 80018d0:	43c9      	mvns	r1, r1
 80018d2:	b289      	uxth	r1, r1
 80018d4:	8281      	strh	r1, [r0, #20]
}
 80018d6:	4770      	bx	lr

080018d8 <I2C_GetITStatus>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 80018d8:	8883      	ldrh	r3, [r0, #4]
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_MASK;

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 80018da:	8a80      	ldrh	r0, [r0, #20]
 80018dc:	b280      	uxth	r0, r0
 80018de:	4008      	ands	r0, r1
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 80018e0:	b29b      	uxth	r3, r3
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_MASK;

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 80018e2:	d006      	beq.n	80018f2 <I2C_GetITStatus+0x1a>
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 80018e4:	f001 61e0 	and.w	r1, r1, #117440512	; 0x7000000
  *            @arg I2C_IT_ADDR: Address sent flag (Master mode) "ADSL"
  *                              Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_IT_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_IT (SET or RESET).
  */
ITStatus I2C_GetITStatus(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
 80018e8:	ea13 4111 	ands.w	r1, r3, r1, lsr #16

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
  {
    /* I2C_IT is set */
    bitstatus = SET;
 80018ec:	bf0c      	ite	eq
 80018ee:	2000      	moveq	r0, #0
 80018f0:	2001      	movne	r0, #1
    /* I2C_IT is reset */
    bitstatus = RESET;
  }
  /* Return the I2C_IT status */
  return  bitstatus;
}
 80018f2:	4770      	bx	lr

080018f4 <I2C_ClearITPendingBit>:

  /* Get the I2C flag position */
  flagpos = I2C_IT & FLAG_MASK;

  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 80018f4:	43c9      	mvns	r1, r1
 80018f6:	b289      	uxth	r1, r1
 80018f8:	8281      	strh	r1, [r0, #20]
}
 80018fa:	4770      	bx	lr

080018fc <RCC_DeInit>:
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80018fc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001900:	f2c4 0302 	movt	r3, #16386	; 0x4002

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001904:	2200      	movs	r2, #0
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001906:	6819      	ldr	r1, [r3, #0]
 8001908:	f041 0101 	orr.w	r1, r1, #1
 800190c:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800190e:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001910:	6818      	ldr	r0, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001912:	f243 0110 	movw	r1, #12304	; 0x3010

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001916:	f020 7084 	bic.w	r0, r0, #17301504	; 0x1080000

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800191a:	f2c2 4100 	movt	r1, #9216	; 0x2400

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800191e:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8001922:	6018      	str	r0, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001924:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001926:	6819      	ldr	r1, [r3, #0]
 8001928:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800192c:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800192e:	60da      	str	r2, [r3, #12]
}
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop

08001934 <RCC_HSEConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 8001934:	f643 0302 	movw	r3, #14338	; 0x3802
 8001938:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800193c:	2200      	movs	r2, #0
 800193e:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 8001940:	7018      	strb	r0, [r3, #0]
}
 8001942:	4770      	bx	lr

08001944 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8001944:	b082      	sub	sp, #8

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 8001946:	f44f 5160 	mov.w	r1, #14336	; 0x3800
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
  __IO uint32_t startupcounter = 0;
 800194a:	2300      	movs	r3, #0
 800194c:	9301      	str	r3, [sp, #4]

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 800194e:	f2c4 0102 	movt	r1, #16386	; 0x4002
 8001952:	680a      	ldr	r2, [r1, #0]
  FlagStatus hsestatus = RESET;
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    startupcounter++;
 8001954:	9b01      	ldr	r3, [sp, #4]
 8001956:	3301      	adds	r3, #1
 8001958:	9301      	str	r3, [sp, #4]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 800195a:	9b01      	ldr	r3, [sp, #4]
 800195c:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001960:	d001      	beq.n	8001966 <RCC_WaitForHSEStartUp+0x22>
 8001962:	0393      	lsls	r3, r2, #14
 8001964:	d5f5      	bpl.n	8001952 <RCC_WaitForHSEStartUp+0xe>

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 8001966:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800196a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800196e:	6818      	ldr	r0, [r3, #0]
  else
  {
    status = ERROR;
  }
  return (status);
}
 8001970:	f3c0 4040 	ubfx	r0, r0, #17, #1
 8001974:	b002      	add	sp, #8
 8001976:	4770      	bx	lr

08001978 <RCC_AdjustHSICalibrationValue>:
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
 8001978:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800197c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001980:	681a      	ldr	r2, [r3, #0]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 8001982:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 8001986:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3

  /* Store the new value */
  RCC->CR = tmpreg;
 800198a:	601a      	str	r2, [r3, #0]
}
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop

08001990 <RCC_HSICmd>:
void RCC_HSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 8001990:	2300      	movs	r3, #0
 8001992:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8001996:	6018      	str	r0, [r3, #0]
}
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop

0800199c <RCC_LSEConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 800199c:	f643 0370 	movw	r3, #14448	; 0x3870
 80019a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80019a4:	2200      	movs	r2, #0

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 80019a6:	2801      	cmp	r0, #1
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 80019a8:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 80019aa:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 80019ac:	d004      	beq.n	80019b8 <RCC_LSEConfig+0x1c>
 80019ae:	2804      	cmp	r0, #4
 80019b0:	d101      	bne.n	80019b6 <RCC_LSEConfig+0x1a>
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
      break;
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 80019b2:	2205      	movs	r2, #5
 80019b4:	701a      	strb	r2, [r3, #0]
 80019b6:	4770      	bx	lr
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 80019b8:	7018      	strb	r0, [r3, #0]
      break;
 80019ba:	4770      	bx	lr

080019bc <RCC_LSICmd>:
void RCC_LSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 80019bc:	f44f 6368 	mov.w	r3, #3712	; 0xe80
 80019c0:	f2c4 2347 	movt	r3, #16967	; 0x4247
 80019c4:	6018      	str	r0, [r3, #0]
}
 80019c6:	4770      	bx	lr

080019c8 <RCC_PLLConfig>:
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 80019c8:	4301      	orrs	r1, r0
 80019ca:	ea41 1282 	orr.w	r2, r1, r2, lsl #6
 80019ce:	9900      	ldr	r1, [sp, #0]
 80019d0:	085b      	lsrs	r3, r3, #1
 80019d2:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 80019d6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80019da:	3b01      	subs	r3, #1
 80019dc:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80019e0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80019e4:	6042      	str	r2, [r0, #4]
                 (PLLQ << 24);
}
 80019e6:	4770      	bx	lr

080019e8 <RCC_PLLCmd>:
  */
void RCC_PLLCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 80019e8:	2360      	movs	r3, #96	; 0x60
 80019ea:	f2c4 2347 	movt	r3, #16967	; 0x4247
 80019ee:	6018      	str	r0, [r3, #0]
}
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop

080019f4 <RCC_PLLI2SConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
 80019f4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80019f8:	0180      	lsls	r0, r0, #6
 80019fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80019fe:	ea40 7101 	orr.w	r1, r0, r1, lsl #28
 8001a02:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
}
 8001a06:	4770      	bx	lr

08001a08 <RCC_PLLI2SCmd>:
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 8001a08:	2368      	movs	r3, #104	; 0x68
 8001a0a:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8001a0e:	6018      	str	r0, [r3, #0]
}
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop

08001a14 <RCC_ClockSecuritySystemCmd>:
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 8001a14:	234c      	movs	r3, #76	; 0x4c
 8001a16:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8001a1a:	6018      	str	r0, [r3, #0]
}
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop

08001a20 <RCC_MCO1Config>:
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
 8001a20:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001a24:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001a28:	689a      	ldr	r2, [r3, #8]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
 8001a2a:	f022 62ec 	bic.w	r2, r2, #123731968	; 0x7600000

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 8001a2e:	4302      	orrs	r2, r0
 8001a30:	430a      	orrs	r2, r1

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 8001a32:	609a      	str	r2, [r3, #8]
}
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop

08001a38 <RCC_MCO2Config>:
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
 8001a38:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001a3c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001a40:	689a      	ldr	r2, [r3, #8]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
 8001a42:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 8001a46:	4302      	orrs	r2, r0
 8001a48:	430a      	orrs	r2, r1

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 8001a4a:	609a      	str	r2, [r3, #8]
}
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop

08001a50 <RCC_SYSCLKConfig>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 8001a50:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001a54:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001a58:	689a      	ldr	r2, [r3, #8]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 8001a5a:	f022 0203 	bic.w	r2, r2, #3

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8001a5e:	4302      	orrs	r2, r0

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001a60:	609a      	str	r2, [r3, #8]
}
 8001a62:	4770      	bx	lr

08001a64 <RCC_GetSYSCLKSource>:
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 8001a64:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001a68:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001a6c:	6898      	ldr	r0, [r3, #8]
}
 8001a6e:	f000 000c 	and.w	r0, r0, #12
 8001a72:	4770      	bx	lr

08001a74 <RCC_HCLKConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 8001a74:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001a78:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001a7c:	689a      	ldr	r2, [r3, #8]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 8001a7e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8001a82:	4302      	orrs	r2, r0

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001a84:	609a      	str	r2, [r3, #8]
}
 8001a86:	4770      	bx	lr

08001a88 <RCC_PCLK1Config>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8001a88:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001a8c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001a90:	689a      	ldr	r2, [r3, #8]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 8001a92:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8001a96:	4302      	orrs	r2, r0

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001a98:	609a      	str	r2, [r3, #8]
}
 8001a9a:	4770      	bx	lr

08001a9c <RCC_PCLK2Config>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8001a9c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001aa0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001aa4:	689a      	ldr	r2, [r3, #8]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 8001aa6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 8001aaa:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001aae:	609a      	str	r2, [r3, #8]
}
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop

08001ab4 <RCC_GetClocksFreq>:
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001ab4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001ab8:	f2c4 0302 	movt	r3, #16386	; 0x4002
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8001abc:	b410      	push	{r4}
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001abe:	689a      	ldr	r2, [r3, #8]
 8001ac0:	f002 020c 	and.w	r2, r2, #12

  switch (tmp)
 8001ac4:	2a04      	cmp	r2, #4
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8001ac6:	bf02      	ittt	eq
 8001ac8:	f44f 5290 	moveq.w	r2, #4608	; 0x1200
 8001acc:	f2c0 027a 	movteq	r2, #122	; 0x7a
 8001ad0:	6002      	streq	r2, [r0, #0]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;

  switch (tmp)
 8001ad2:	d006      	beq.n	8001ae2 <RCC_GetClocksFreq+0x2e>
 8001ad4:	2a08      	cmp	r2, #8
 8001ad6:	d01e      	beq.n	8001b16 <RCC_GetClocksFreq+0x62>

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
      break;
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001ad8:	f44f 5210 	mov.w	r2, #9216	; 0x2400
 8001adc:	f2c0 02f4 	movt	r2, #244	; 0xf4
 8001ae0:	6002      	str	r2, [r0, #0]
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8001ae2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001ae6:	f2c4 0302 	movt	r3, #16386	; 0x4002
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];
 8001aea:	491c      	ldr	r1, [pc, #112]	; (8001b5c <RCC_GetClocksFreq+0xa8>)
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8001aec:	689c      	ldr	r4, [r3, #8]
  tmp = tmp >> 4;
 8001aee:	f3c4 1403 	ubfx	r4, r4, #4, #4
  presc = APBAHBPrescTable[tmp];
 8001af2:	5d0c      	ldrb	r4, [r1, r4]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8001af4:	40e2      	lsrs	r2, r4
 8001af6:	6042      	str	r2, [r0, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8001af8:	689c      	ldr	r4, [r3, #8]
  tmp = tmp >> 10;
 8001afa:	f3c4 2482 	ubfx	r4, r4, #10, #3
  presc = APBAHBPrescTable[tmp];
 8001afe:	5d0c      	ldrb	r4, [r1, r4]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001b00:	fa32 f404 	lsrs.w	r4, r2, r4
 8001b04:	6084      	str	r4, [r0, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8001b06:	689b      	ldr	r3, [r3, #8]
  tmp = tmp >> 13;
 8001b08:	f3c3 3342 	ubfx	r3, r3, #13, #3
  presc = APBAHBPrescTable[tmp];
 8001b0c:	5ccb      	ldrb	r3, [r1, r3]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001b0e:	40da      	lsrs	r2, r3
 8001b10:	60c2      	str	r2, [r0, #12]
}
 8001b12:	bc10      	pop	{r4}
 8001b14:	4770      	bx	lr
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8001b16:	685c      	ldr	r4, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b18:	6859      	ldr	r1, [r3, #4]
      
      if (pllsource != 0)
 8001b1a:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001b1e:	685c      	ldr	r4, [r3, #4]
 8001b20:	bf15      	itete	ne
 8001b22:	f44f 5390 	movne.w	r3, #4608	; 0x1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8001b26:	f44f 5310 	moveq.w	r3, #9216	; 0x2400
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001b2a:	f2c0 037a 	movtne	r3, #122	; 0x7a
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8001b2e:	f2c0 03f4 	movteq	r3, #244	; 0xf4

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b32:	f001 013f 	and.w	r1, r1, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8001b36:	fbb3 f2f1 	udiv	r2, r3, r1
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001b3a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001b3e:	f2c4 0302 	movt	r3, #16386	; 0x4002
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8001b42:	f3c4 1488 	ubfx	r4, r4, #6, #9
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001b4c:	3301      	adds	r3, #1
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8001b4e:	fb02 f204 	mul.w	r2, r2, r4
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001b52:	005b      	lsls	r3, r3, #1
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8001b54:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b58:	6002      	str	r2, [r0, #0]
      break;
 8001b5a:	e7c2      	b.n	8001ae2 <RCC_GetClocksFreq+0x2e>
 8001b5c:	20000074 	.word	0x20000074

08001b60 <RCC_RTCCLKConfig>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 8001b60:	f400 7340 	and.w	r3, r0, #768	; 0x300
 8001b64:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001b68:	d10c      	bne.n	8001b84 <RCC_RTCCLKConfig+0x24>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 8001b6a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001b6e:	f2c4 0302 	movt	r3, #16386	; 0x4002

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8001b72:	f020 4170 	bic.w	r1, r0, #4026531840	; 0xf0000000
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 8001b76:	689a      	ldr	r2, [r3, #8]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8001b78:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
 8001b7c:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8001b80:	430a      	orrs	r2, r1

    /* Store the new value */
    RCC->CFGR = tmpreg;
 8001b82:	609a      	str	r2, [r3, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 8001b84:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001b88:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001b8c:	0500      	lsls	r0, r0, #20
 8001b8e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001b90:	0d00      	lsrs	r0, r0, #20
 8001b92:	4310      	orrs	r0, r2
 8001b94:	6718      	str	r0, [r3, #112]	; 0x70
}
 8001b96:	4770      	bx	lr

08001b98 <RCC_RTCCLKCmd>:
void RCC_RTCCLKCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 8001b98:	f640 633c 	movw	r3, #3644	; 0xe3c
 8001b9c:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8001ba0:	6018      	str	r0, [r3, #0]
}
 8001ba2:	4770      	bx	lr

08001ba4 <RCC_BackupResetCmd>:
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 8001ba4:	f44f 6364 	mov.w	r3, #3648	; 0xe40
 8001ba8:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8001bac:	6018      	str	r0, [r3, #0]
}
 8001bae:	4770      	bx	lr

08001bb0 <RCC_I2SCLKConfig>:
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 8001bb0:	f44f 73ae 	mov.w	r3, #348	; 0x15c
 8001bb4:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8001bb8:	6018      	str	r0, [r3, #0]
}
 8001bba:	4770      	bx	lr

08001bbc <RCC_AHB1PeriphClockCmd>:
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8001bbc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001bc0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001bc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001bc6:	b919      	cbnz	r1, 8001bd0 <RCC_AHB1PeriphClockCmd+0x14>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8001bc8:	ea22 0000 	bic.w	r0, r2, r0
 8001bcc:	6318      	str	r0, [r3, #48]	; 0x30
 8001bce:	4770      	bx	lr
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8001bd0:	4310      	orrs	r0, r2
 8001bd2:	6318      	str	r0, [r3, #48]	; 0x30
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop

08001bd8 <RCC_AHB2PeriphClockCmd>:
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 8001bd8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001bdc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001be0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001be2:	b919      	cbnz	r1, 8001bec <RCC_AHB2PeriphClockCmd+0x14>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
 8001be4:	ea22 0000 	bic.w	r0, r2, r0
 8001be8:	6358      	str	r0, [r3, #52]	; 0x34
 8001bea:	4770      	bx	lr
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 8001bec:	4310      	orrs	r0, r2
 8001bee:	6358      	str	r0, [r3, #52]	; 0x34
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop

08001bf4 <RCC_AHB3PeriphClockCmd>:
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 8001bf4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001bf8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001bfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001bfe:	b919      	cbnz	r1, 8001c08 <RCC_AHB3PeriphClockCmd+0x14>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
 8001c00:	ea22 0000 	bic.w	r0, r2, r0
 8001c04:	6398      	str	r0, [r3, #56]	; 0x38
 8001c06:	4770      	bx	lr
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 8001c08:	4310      	orrs	r0, r2
 8001c0a:	6398      	str	r0, [r3, #56]	; 0x38
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop

08001c10 <RCC_APB1PeriphClockCmd>:
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001c10:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001c14:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001c18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001c1a:	b919      	cbnz	r1, 8001c24 <RCC_APB1PeriphClockCmd+0x14>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001c1c:	ea22 0000 	bic.w	r0, r2, r0
 8001c20:	6418      	str	r0, [r3, #64]	; 0x40
 8001c22:	4770      	bx	lr
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001c24:	4310      	orrs	r0, r2
 8001c26:	6418      	str	r0, [r3, #64]	; 0x40
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop

08001c2c <RCC_APB2PeriphClockCmd>:
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001c2c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001c30:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001c34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001c36:	b919      	cbnz	r1, 8001c40 <RCC_APB2PeriphClockCmd+0x14>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001c38:	ea22 0000 	bic.w	r0, r2, r0
 8001c3c:	6458      	str	r0, [r3, #68]	; 0x44
 8001c3e:	4770      	bx	lr
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001c40:	4310      	orrs	r0, r2
 8001c42:	6458      	str	r0, [r3, #68]	; 0x44
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop

08001c48 <RCC_AHB1PeriphResetCmd>:
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 8001c48:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001c4c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001c50:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001c52:	b919      	cbnz	r1, 8001c5c <RCC_AHB1PeriphResetCmd+0x14>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 8001c54:	ea22 0000 	bic.w	r0, r2, r0
 8001c58:	6118      	str	r0, [r3, #16]
 8001c5a:	4770      	bx	lr
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 8001c5c:	4310      	orrs	r0, r2
 8001c5e:	6118      	str	r0, [r3, #16]
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop

08001c64 <RCC_AHB2PeriphResetCmd>:
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 8001c64:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001c68:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001c6c:	695a      	ldr	r2, [r3, #20]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001c6e:	b919      	cbnz	r1, 8001c78 <RCC_AHB2PeriphResetCmd+0x14>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 8001c70:	ea22 0000 	bic.w	r0, r2, r0
 8001c74:	6158      	str	r0, [r3, #20]
 8001c76:	4770      	bx	lr
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 8001c78:	4310      	orrs	r0, r2
 8001c7a:	6158      	str	r0, [r3, #20]
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop

08001c80 <RCC_AHB3PeriphResetCmd>:
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 8001c80:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001c84:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001c88:	699a      	ldr	r2, [r3, #24]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001c8a:	b919      	cbnz	r1, 8001c94 <RCC_AHB3PeriphResetCmd+0x14>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
 8001c8c:	ea22 0000 	bic.w	r0, r2, r0
 8001c90:	6198      	str	r0, [r3, #24]
 8001c92:	4770      	bx	lr
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 8001c94:	4310      	orrs	r0, r2
 8001c96:	6198      	str	r0, [r3, #24]
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop

08001c9c <RCC_APB1PeriphResetCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8001c9c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001ca0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001ca4:	6a1a      	ldr	r2, [r3, #32]
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001ca6:	b919      	cbnz	r1, 8001cb0 <RCC_APB1PeriphResetCmd+0x14>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8001ca8:	ea22 0000 	bic.w	r0, r2, r0
 8001cac:	6218      	str	r0, [r3, #32]
 8001cae:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8001cb0:	4310      	orrs	r0, r2
 8001cb2:	6218      	str	r0, [r3, #32]
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop

08001cb8 <RCC_APB2PeriphResetCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8001cb8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001cbc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001cc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001cc2:	b919      	cbnz	r1, 8001ccc <RCC_APB2PeriphResetCmd+0x14>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8001cc4:	ea22 0000 	bic.w	r0, r2, r0
 8001cc8:	6258      	str	r0, [r3, #36]	; 0x24
 8001cca:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8001ccc:	4310      	orrs	r0, r2
 8001cce:	6258      	str	r0, [r3, #36]	; 0x24
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop

08001cd4 <RCC_AHB1PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 8001cd4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001cd8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001cdc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001cde:	b919      	cbnz	r1, 8001ce8 <RCC_AHB1PeriphClockLPModeCmd+0x14>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
 8001ce0:	ea22 0000 	bic.w	r0, r2, r0
 8001ce4:	6518      	str	r0, [r3, #80]	; 0x50
 8001ce6:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 8001ce8:	4310      	orrs	r0, r2
 8001cea:	6518      	str	r0, [r3, #80]	; 0x50
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop

08001cf0 <RCC_AHB2PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 8001cf0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001cf4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001cf8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001cfa:	b919      	cbnz	r1, 8001d04 <RCC_AHB2PeriphClockLPModeCmd+0x14>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
 8001cfc:	ea22 0000 	bic.w	r0, r2, r0
 8001d00:	6558      	str	r0, [r3, #84]	; 0x54
 8001d02:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 8001d04:	4310      	orrs	r0, r2
 8001d06:	6558      	str	r0, [r3, #84]	; 0x54
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop

08001d0c <RCC_AHB3PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 8001d0c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001d10:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001d14:	6d9a      	ldr	r2, [r3, #88]	; 0x58
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001d16:	b919      	cbnz	r1, 8001d20 <RCC_AHB3PeriphClockLPModeCmd+0x14>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
 8001d18:	ea22 0000 	bic.w	r0, r2, r0
 8001d1c:	6598      	str	r0, [r3, #88]	; 0x58
 8001d1e:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 8001d20:	4310      	orrs	r0, r2
 8001d22:	6598      	str	r0, [r3, #88]	; 0x58
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop

08001d28 <RCC_APB1PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 8001d28:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001d2c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001d30:	6e1a      	ldr	r2, [r3, #96]	; 0x60
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001d32:	b919      	cbnz	r1, 8001d3c <RCC_APB1PeriphClockLPModeCmd+0x14>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
 8001d34:	ea22 0000 	bic.w	r0, r2, r0
 8001d38:	6618      	str	r0, [r3, #96]	; 0x60
 8001d3a:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 8001d3c:	4310      	orrs	r0, r2
 8001d3e:	6618      	str	r0, [r3, #96]	; 0x60
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop

08001d44 <RCC_APB2PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 8001d44:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001d48:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001d4c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001d4e:	b919      	cbnz	r1, 8001d58 <RCC_APB2PeriphClockLPModeCmd+0x14>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
 8001d50:	ea22 0000 	bic.w	r0, r2, r0
 8001d54:	6658      	str	r0, [r3, #100]	; 0x64
 8001d56:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 8001d58:	4310      	orrs	r0, r2
 8001d5a:	6658      	str	r0, [r3, #100]	; 0x64
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop

08001d60 <RCC_ITConfig>:
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8001d60:	f643 030d 	movw	r3, #14349	; 0x380d
 8001d64:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001d68:	781a      	ldrb	r2, [r3, #0]
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001d6a:	b919      	cbnz	r1, 8001d74 <RCC_ITConfig+0x14>
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
  }
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 8001d6c:	ea22 0000 	bic.w	r0, r2, r0
 8001d70:	7018      	strb	r0, [r3, #0]
 8001d72:	4770      	bx	lr
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8001d74:	4310      	orrs	r0, r2
 8001d76:	7018      	strb	r0, [r3, #0]
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop

08001d7c <RCC_GetFlagStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8001d7c:	0943      	lsrs	r3, r0, #5
  if (tmp == 1)               /* The flag to check is in CR register */
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d00e      	beq.n	8001da0 <RCC_GetFlagStatus+0x24>
  {
    statusreg = RCC->CR;
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8001d82:	2b02      	cmp	r3, #2
  {
    statusreg = RCC->BDCR;
 8001d84:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001d88:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001d8c:	bf0c      	ite	eq
 8001d8e:	6f1b      	ldreq	r3, [r3, #112]	; 0x70
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8001d90:	6f5b      	ldrne	r3, [r3, #116]	; 0x74
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 8001d92:	f000 001f 	and.w	r0, r0, #31
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8001d96:	fa33 f000 	lsrs.w	r0, r3, r0
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
}
 8001d9a:	f000 0001 	and.w	r0, r0, #1
 8001d9e:	4770      	bx	lr

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 8001da0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001da4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	e7f2      	b.n	8001d92 <RCC_GetFlagStatus+0x16>

08001dac <RCC_ClearFlag>:
  * @retval None
  */
void RCC_ClearFlag(void)
{
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 8001dac:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001db0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001db4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001db6:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001dba:	675a      	str	r2, [r3, #116]	; 0x74
}
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop

08001dc0 <RCC_GetITStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 8001dc0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001dc4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001dc8:	68db      	ldr	r3, [r3, #12]
  {
    bitstatus = SET;
 8001dca:	4218      	tst	r0, r3
  {
    bitstatus = RESET;
  }
  /* Return the RCC_IT status */
  return  bitstatus;
}
 8001dcc:	bf0c      	ite	eq
 8001dce:	2000      	moveq	r0, #0
 8001dd0:	2001      	movne	r0, #1
 8001dd2:	4770      	bx	lr

08001dd4 <RCC_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 8001dd4:	f643 030e 	movw	r3, #14350	; 0x380e
 8001dd8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001ddc:	7018      	strb	r0, [r3, #0]
}
 8001dde:	4770      	bx	lr

08001de0 <SPI_I2S_DeInit>:
  *         is managed by the I2S peripheral clock).
  *             
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 8001de0:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 8001de2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001de6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001dea:	4298      	cmp	r0, r3
 8001dec:	d018      	beq.n	8001e20 <SPI_I2S_DeInit+0x40>
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
  }
  else if (SPIx == SPI2)
 8001dee:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001df2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001df6:	4298      	cmp	r0, r3
 8001df8:	d01e      	beq.n	8001e38 <SPI_I2S_DeInit+0x58>
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
    }
  else
  {
    if (SPIx == SPI3)
 8001dfa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001dfe:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001e02:	4298      	cmp	r0, r3
 8001e04:	d000      	beq.n	8001e08 <SPI_I2S_DeInit+0x28>
 8001e06:	bd08      	pop	{r3, pc}
    {
      /* Enable SPI3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 8001e08:	2101      	movs	r1, #1
 8001e0a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001e0e:	f7ff ff45 	bl	8001c9c <RCC_APB1PeriphResetCmd>
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 8001e12:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001e16:	2100      	movs	r1, #0
    }
  }
}
 8001e18:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if (SPIx == SPI3)
    {
      /* Enable SPI3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 8001e1c:	f7ff bf3e 	b.w	8001c9c <RCC_APB1PeriphResetCmd>
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 8001e20:	2101      	movs	r1, #1
 8001e22:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001e26:	f7ff ff47 	bl	8001cb8 <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 8001e2a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001e2e:	2100      	movs	r1, #0
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
    }
  }
}
 8001e30:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  if (SPIx == SPI1)
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 8001e34:	f7ff bf40 	b.w	8001cb8 <RCC_APB2PeriphResetCmd>
  }
  else if (SPIx == SPI2)
  {
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 8001e38:	2101      	movs	r1, #1
 8001e3a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001e3e:	f7ff ff2d 	bl	8001c9c <RCC_APB1PeriphResetCmd>
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 8001e42:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001e46:	2100      	movs	r1, #0
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
    }
  }
}
 8001e48:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else if (SPIx == SPI2)
  {
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 8001e4c:	f7ff bf26 	b.w	8001c9c <RCC_APB1PeriphResetCmd>

08001e50 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8001e50:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001e54:	880b      	ldrh	r3, [r1, #0]
 8001e56:	f8b1 a002 	ldrh.w	sl, [r1, #2]
 8001e5a:	f8b1 9004 	ldrh.w	r9, [r1, #4]
 8001e5e:	f8b1 8006 	ldrh.w	r8, [r1, #6]
 8001e62:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 8001e66:	894f      	ldrh	r7, [r1, #10]
 8001e68:	898e      	ldrh	r6, [r1, #12]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8001e6a:	8805      	ldrh	r5, [r0, #0]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001e6c:	89cc      	ldrh	r4, [r1, #14]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8001e6e:	8a0a      	ldrh	r2, [r1, #16]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001e70:	ea4a 0303 	orr.w	r3, sl, r3
 8001e74:	ea43 0309 	orr.w	r3, r3, r9
 8001e78:	ea43 0308 	orr.w	r3, r3, r8
 8001e7c:	ea43 030c 	orr.w	r3, r3, ip
 8001e80:	433b      	orrs	r3, r7
 8001e82:	4333      	orrs	r3, r6

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8001e84:	f405 5141 	and.w	r1, r5, #12352	; 0x3040
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001e88:	4323      	orrs	r3, r4
 8001e8a:	430b      	orrs	r3, r1
 8001e8c:	b29b      	uxth	r3, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8001e8e:	8003      	strh	r3, [r0, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 8001e90:	8b83      	ldrh	r3, [r0, #28]
 8001e92:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001e96:	041b      	lsls	r3, r3, #16
 8001e98:	0c1b      	lsrs	r3, r3, #16
 8001e9a:	8383      	strh	r3, [r0, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8001e9c:	8202      	strh	r2, [r0, #16]
}
 8001e9e:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 8001ea2:	4770      	bx	lr

08001ea4 <I2S_Init>:
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 8001ea4:	8b83      	ldrh	r3, [r0, #28]
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 8001ea6:	688a      	ldr	r2, [r1, #8]
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 8001ea8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001eac:	f023 030f 	bic.w	r3, r3, #15
 8001eb0:	041b      	lsls	r3, r3, #16
 8001eb2:	0c1b      	lsrs	r3, r3, #16
 8001eb4:	8383      	strh	r3, [r0, #28]
  SPIx->I2SPR = 0x0002;
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	8403      	strh	r3, [r0, #32]
  *         to the value of the the source clock frequency (in Hz).
  *  
  * @retval None
  */
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
 8001eba:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
  SPIx->I2SPR = 0x0002;
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 8001ebe:	8b86      	ldrh	r6, [r0, #28]
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 8001ec0:	429a      	cmp	r2, r3
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
  SPIx->I2SPR = 0x0002;
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 8001ec2:	b2b6      	uxth	r6, r6
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 8001ec4:	d05d      	beq.n	8001f82 <I2S_Init+0xde>
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 8001ec6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001eca:	f2c4 0302 	movt	r3, #16386	; 0x4002
  }
  /* If the requested audio frequency is not the default, compute the prescaler */
  else
  {
    /* Check the frame length (For the Prescaler computing) *******************/
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 8001ece:	888c      	ldrh	r4, [r1, #4]
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 8001ed0:	689d      	ldr	r5, [r3, #8]
      packetlength = 1;
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 2;
 8001ed2:	2c00      	cmp	r4, #0
 8001ed4:	bf0c      	ite	eq
 8001ed6:	f04f 0c01 	moveq.w	ip, #1
 8001eda:	f04f 0c02 	movne.w	ip, #2
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 8001ede:	022d      	lsls	r5, r5, #8
    {
      RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
 8001ee0:	bf42      	ittt	mi
 8001ee2:	689d      	ldrmi	r5, [r3, #8]
 8001ee4:	f425 0500 	bicmi.w	r5, r5, #8388608	; 0x800000
 8001ee8:	609d      	strmi	r5, [r3, #8]
    }    
    
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 8001eea:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001eee:	f2c4 0302 	movt	r3, #16386	; 0x4002
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
    
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 8001ef2:	f44f 5590 	mov.w	r5, #4608	; 0x1200
    {
      RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
    }    
    
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 8001ef6:	f8d3 8084 	ldr.w	r8, [r3, #132]	; 0x84
                      (RCC_PLLI2SCFGR_PLLI2SN >> 6));
    
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
 8001efa:	f8d3 7084 	ldr.w	r7, [r3, #132]	; 0x84
                      (RCC_PLLI2SCFGR_PLLI2SR >> 28));
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
 8001efe:	f8d3 9004 	ldr.w	r9, [r3, #4]
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
  #endif /* I2S_EXTERNAL_CLOCK_VAL */
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 8001f02:	88cb      	ldrh	r3, [r1, #6]
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
                      (RCC_PLLI2SCFGR_PLLI2SR >> 28));
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
 8001f04:	f009 093f 	and.w	r9, r9, #63	; 0x3f
    
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 8001f08:	f2c0 057a 	movt	r5, #122	; 0x7a
 8001f0c:	fbb5 f5f9 	udiv	r5, r5, r9
    {
      RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
    }    
    
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 8001f10:	f3c8 1888 	ubfx	r8, r8, #6, #9
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
    
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 8001f14:	fb08 f505 	mul.w	r5, r8, r5
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
                      (RCC_PLLI2SCFGR_PLLI2SN >> 6));
    
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
 8001f18:	f3c7 7702 	ubfx	r7, r7, #28, #3
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
  #endif /* I2S_EXTERNAL_CLOCK_VAL */
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 8001f1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
    
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 8001f20:	fbb5 f5f7 	udiv	r5, r5, r7
  #endif /* I2S_EXTERNAL_CLOCK_VAL */
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 8001f24:	d030      	beq.n	8001f88 <I2S_Init+0xe4>
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8001f26:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
 8001f2a:	fbb5 f5fc 	udiv	r5, r5, ip
 8001f2e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8001f32:	006d      	lsls	r5, r5, #1
 8001f34:	fbb5 f2f2 	udiv	r2, r5, r2
 8001f38:	3205      	adds	r2, #5
    }
    
    /* Remove the flatting point */
    tmp = tmp / 10;  
 8001f3a:	f64c 45cd 	movw	r5, #52429	; 0xcccd
 8001f3e:	f6cc 45cc 	movt	r5, #52428	; 0xcccc
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8001f42:	b292      	uxth	r2, r2
    }
    
    /* Remove the flatting point */
    tmp = tmp / 10;  
 8001f44:	fba5 7202 	umull	r7, r2, r5, r2
 8001f48:	08d2      	lsrs	r2, r2, #3
      
    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 8001f4a:	0855      	lsrs	r5, r2, #1
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 8001f4c:	1eaf      	subs	r7, r5, #2
      
    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 8001f4e:	f002 0201 	and.w	r2, r2, #1
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 8001f52:	2ffd      	cmp	r7, #253	; 0xfd
 8001f54:	bf94      	ite	ls
 8001f56:	ea45 2202 	orrls.w	r2, r5, r2, lsl #8
 8001f5a:	2202      	movhi	r2, #2
  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8001f5c:	f8b1 c000 	ldrh.w	ip, [r1]

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 8001f60:	884f      	ldrh	r7, [r1, #2]
 8001f62:	898d      	ldrh	r5, [r1, #12]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8001f64:	ea46 010c 	orr.w	r1, r6, ip
 8001f68:	f441 6100 	orr.w	r1, r1, #2048	; 0x800

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 8001f6c:	4339      	orrs	r1, r7
 8001f6e:	4329      	orrs	r1, r5
    i2sdiv = 2;
    i2sodd = 0;
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 8001f70:	4313      	orrs	r3, r2
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 8001f72:	b289      	uxth	r1, r1
    i2sdiv = 2;
    i2sodd = 0;
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 8001f74:	b29b      	uxth	r3, r3
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 8001f76:	430c      	orrs	r4, r1
    i2sdiv = 2;
    i2sodd = 0;
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 8001f78:	8403      	strh	r3, [r0, #32]
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  SPIx->I2SCFGR = tmpreg;
 8001f7a:	8384      	strh	r4, [r0, #28]
}
 8001f7c:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8001f80:	4770      	bx	lr
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 8001f82:	888c      	ldrh	r4, [r1, #4]
 8001f84:	88cb      	ldrh	r3, [r1, #6]
 8001f86:	e7e9      	b.n	8001f5c <I2S_Init+0xb8>
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
    {
      /* MCLK output is enabled */
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8001f88:	0a2d      	lsrs	r5, r5, #8
 8001f8a:	e7d0      	b.n	8001f2e <I2S_Init+0x8a>

08001f8c <SPI_StructInit>:
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	8003      	strh	r3, [r0, #0]
  /* initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 8001f90:	8043      	strh	r3, [r0, #2]
  /* initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 8001f92:	8083      	strh	r3, [r0, #4]
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 8001f94:	80c3      	strh	r3, [r0, #6]
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 8001f96:	8103      	strh	r3, [r0, #8]
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 8001f98:	8143      	strh	r3, [r0, #10]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 8001f9a:	8183      	strh	r3, [r0, #12]
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 8001f9c:	81c3      	strh	r3, [r0, #14]
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 8001f9e:	2307      	movs	r3, #7
 8001fa0:	8203      	strh	r3, [r0, #16]
}
 8001fa2:	4770      	bx	lr

08001fa4 <I2S_StructInit>:
  */
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
{
/*--------------- Reset I2S init structure parameters values -----------------*/
  /* Initialize the I2S_Mode member */
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 8001fa4:	2300      	movs	r3, #0
  
  /* Initialize the I2S_MCLKOutput member */
  I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
  
  /* Initialize the I2S_AudioFreq member */
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 8001fa6:	2202      	movs	r2, #2
  */
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
{
/*--------------- Reset I2S init structure parameters values -----------------*/
  /* Initialize the I2S_Mode member */
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 8001fa8:	8003      	strh	r3, [r0, #0]
  
  /* Initialize the I2S_Standard member */
  I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
 8001faa:	8043      	strh	r3, [r0, #2]
  
  /* Initialize the I2S_DataFormat member */
  I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
 8001fac:	8083      	strh	r3, [r0, #4]
  
  /* Initialize the I2S_MCLKOutput member */
  I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
 8001fae:	80c3      	strh	r3, [r0, #6]
  
  /* Initialize the I2S_AudioFreq member */
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 8001fb0:	6082      	str	r2, [r0, #8]
  
  /* Initialize the I2S_CPOL member */
  I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
 8001fb2:	8183      	strh	r3, [r0, #12]
}
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop

08001fb8 <SPI_Cmd>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8001fb8:	8803      	ldrh	r3, [r0, #0]
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001fba:	b929      	cbnz	r1, 8001fc8 <SPI_Cmd+0x10>
    SPIx->CR1 |= SPI_CR1_SPE;
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 8001fbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001fc0:	041b      	lsls	r3, r3, #16
 8001fc2:	0c1b      	lsrs	r3, r3, #16
 8001fc4:	8003      	strh	r3, [r0, #0]
 8001fc6:	4770      	bx	lr
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fce:	8003      	strh	r3, [r0, #0]
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop

08001fd4 <I2S_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 8001fd4:	8b83      	ldrh	r3, [r0, #28]
{
  /* Check the parameters */
  assert_param(IS_SPI_23_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001fd6:	b929      	cbnz	r1, 8001fe4 <I2S_Cmd+0x10>
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
  }
  else
  {
    /* Disable the selected SPI peripheral in I2S mode */
    SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
 8001fd8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001fdc:	041b      	lsls	r3, r3, #16
 8001fde:	0c1b      	lsrs	r3, r3, #16
 8001fe0:	8383      	strh	r3, [r0, #28]
 8001fe2:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fea:	8383      	strh	r3, [r0, #28]
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop

08001ff0 <SPI_DataSizeConfig>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DATASIZE(SPI_DataSize));
  /* Clear DFF bit */
  SPIx->CR1 &= (uint16_t)~SPI_DataSize_16b;
 8001ff0:	8803      	ldrh	r3, [r0, #0]
 8001ff2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001ff6:	041b      	lsls	r3, r3, #16
 8001ff8:	0c1b      	lsrs	r3, r3, #16
 8001ffa:	8003      	strh	r3, [r0, #0]
  /* Set new DFF bit value */
  SPIx->CR1 |= SPI_DataSize;
 8001ffc:	8803      	ldrh	r3, [r0, #0]
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	430b      	orrs	r3, r1
 8002002:	8003      	strh	r3, [r0, #0]
}
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop

08002008 <SPI_BiDirectionalLineConfig>:
void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
 8002008:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
  {
    /* Set the Tx only mode */
    SPIx->CR1 |= SPI_Direction_Tx;
 800200c:	8803      	ldrh	r3, [r0, #0]
void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
 800200e:	d005      	beq.n	800201c <SPI_BiDirectionalLineConfig+0x14>
    SPIx->CR1 |= SPI_Direction_Tx;
  }
  else
  {
    /* Set the Rx only mode */
    SPIx->CR1 &= SPI_Direction_Rx;
 8002010:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002014:	041b      	lsls	r3, r3, #16
 8002016:	0c1b      	lsrs	r3, r3, #16
 8002018:	8003      	strh	r3, [r0, #0]
 800201a:	4770      	bx	lr
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
  {
    /* Set the Tx only mode */
    SPIx->CR1 |= SPI_Direction_Tx;
 800201c:	b29b      	uxth	r3, r3
 800201e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002022:	8003      	strh	r3, [r0, #0]
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop

08002028 <SPI_NSSInternalSoftwareConfig>:
void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 8002028:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800202c:	4299      	cmp	r1, r3
  {
    /* Set NSS pin internally by software */
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 800202e:	8803      	ldrh	r3, [r0, #0]
void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 8002030:	d004      	beq.n	800203c <SPI_NSSInternalSoftwareConfig+0x14>
  {
    /* Set NSS pin internally by software */
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 8002032:	b29b      	uxth	r3, r3
 8002034:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002038:	8003      	strh	r3, [r0, #0]
 800203a:	4770      	bx	lr
  }
  else
  {
    /* Reset NSS pin internally by software */
    SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 800203c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002040:	041b      	lsls	r3, r3, #16
 8002042:	0c1b      	lsrs	r3, r3, #16
 8002044:	8003      	strh	r3, [r0, #0]
 8002046:	4770      	bx	lr

08002048 <SPI_SSOutputCmd>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
 8002048:	8883      	ldrh	r3, [r0, #4]
void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800204a:	b929      	cbnz	r1, 8002058 <SPI_SSOutputCmd+0x10>
    SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
  }
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_SSOE);
 800204c:	f023 0304 	bic.w	r3, r3, #4
 8002050:	041b      	lsls	r3, r3, #16
 8002052:	0c1b      	lsrs	r3, r3, #16
 8002054:	8083      	strh	r3, [r0, #4]
 8002056:	4770      	bx	lr
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
 8002058:	b29b      	uxth	r3, r3
 800205a:	f043 0304 	orr.w	r3, r3, #4
 800205e:	8083      	strh	r3, [r0, #4]
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop

08002064 <SPI_TIModeCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TI mode for the selected SPI peripheral */
    SPIx->CR2 |= SPI_CR2_FRF;
 8002064:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002066:	b929      	cbnz	r1, 8002074 <SPI_TIModeCmd+0x10>
    SPIx->CR2 |= SPI_CR2_FRF;
  }
  else
  {
    /* Disable the TI mode for the selected SPI peripheral */
    SPIx->CR2 &= (uint16_t)~SPI_CR2_FRF;
 8002068:	f023 0310 	bic.w	r3, r3, #16
 800206c:	041b      	lsls	r3, r3, #16
 800206e:	0c1b      	lsrs	r3, r3, #16
 8002070:	8083      	strh	r3, [r0, #4]
 8002072:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TI mode for the selected SPI peripheral */
    SPIx->CR2 |= SPI_CR2_FRF;
 8002074:	b29b      	uxth	r3, r3
 8002076:	f043 0310 	orr.w	r3, r3, #16
 800207a:	8083      	strh	r3, [r0, #4]
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop

08002080 <I2S_FullDuplexConfig>:
  assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 8002080:	8b83      	ldrh	r3, [r0, #28]
    }
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8002082:	898a      	ldrh	r2, [r1, #12]
  assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 8002084:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002088:	f023 030f 	bic.w	r3, r3, #15
 800208c:	041b      	lsls	r3, r3, #16
 800208e:	0c1b      	lsrs	r3, r3, #16
 8002090:	8383      	strh	r3, [r0, #28]
  I2Sxext->I2SPR = 0x0002;
 8002092:	2302      	movs	r3, #2
 8002094:	8403      	strh	r3, [r0, #32]
  * @note   The I2S full duplex extension can be configured in slave mode only.    
  *  
  * @retval None
  */
void I2S_FullDuplexConfig(SPI_TypeDef* I2Sxext, I2S_InitTypeDef* I2S_InitStruct)
{
 8002096:	b470      	push	{r4, r5, r6}
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
  I2Sxext->I2SPR = 0x0002;
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
 8002098:	8b86      	ldrh	r6, [r0, #28]
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 800209a:	884d      	ldrh	r5, [r1, #2]
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 800209c:	880b      	ldrh	r3, [r1, #0]
    }
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800209e:	888c      	ldrh	r4, [r1, #4]
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
  I2Sxext->I2SPR = 0x0002;
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
 80020a0:	b2b1      	uxth	r1, r6
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 80020a2:	4329      	orrs	r1, r5
 80020a4:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 80020a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020ac:	bf18      	it	ne
 80020ae:	2b00      	cmpne	r3, #0
    }
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80020b0:	ea41 0104 	orr.w	r1, r1, r4
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 80020b4:	bf14      	ite	ne
 80020b6:	2300      	movne	r3, #0
 80020b8:	2301      	moveq	r3, #1
    }
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80020ba:	ea41 0102 	orr.w	r1, r1, r2
  tmpreg = I2Sxext->I2SCFGR;
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
  {
    tmp = I2S_Mode_SlaveRx;
 80020be:	bf14      	ite	ne
 80020c0:	461a      	movne	r2, r3
 80020c2:	f44f 7280 	moveq.w	r2, #256	; 0x100
    }
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80020c6:	b28b      	uxth	r3, r1
 80020c8:	4313      	orrs	r3, r2
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  I2Sxext->I2SCFGR = tmpreg;
 80020ca:	8383      	strh	r3, [r0, #28]
}
 80020cc:	bc70      	pop	{r4, r5, r6}
 80020ce:	4770      	bx	lr

080020d0 <SPI_I2S_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 80020d0:	8980      	ldrh	r0, [r0, #12]
}
 80020d2:	b280      	uxth	r0, r0
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop

080020d8 <SPI_I2S_SendData>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 80020d8:	8181      	strh	r1, [r0, #12]
}
 80020da:	4770      	bx	lr

080020dc <SPI_CalculateCRC>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI CRC calculation */
    SPIx->CR1 |= SPI_CR1_CRCEN;
 80020dc:	8803      	ldrh	r3, [r0, #0]
void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80020de:	b929      	cbnz	r1, 80020ec <SPI_CalculateCRC+0x10>
    SPIx->CR1 |= SPI_CR1_CRCEN;
  }
  else
  {
    /* Disable the selected SPI CRC calculation */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCEN);
 80020e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80020e4:	041b      	lsls	r3, r3, #16
 80020e6:	0c1b      	lsrs	r3, r3, #16
 80020e8:	8003      	strh	r3, [r0, #0]
 80020ea:	4770      	bx	lr
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI CRC calculation */
    SPIx->CR1 |= SPI_CR1_CRCEN;
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80020f2:	8003      	strh	r3, [r0, #0]
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop

080020f8 <SPI_TransmitCRC>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Enable the selected SPI CRC transmission */
  SPIx->CR1 |= SPI_CR1_CRCNEXT;
 80020f8:	8803      	ldrh	r3, [r0, #0]
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002100:	8003      	strh	r3, [r0, #0]
}
 8002102:	4770      	bx	lr

08002104 <SPI_GetCRC>:
{
  uint16_t crcreg = 0;
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_CRC(SPI_CRC));
  if (SPI_CRC != SPI_CRC_Rx)
 8002104:	2901      	cmp	r1, #1
  {
    /* Get the Tx CRC register */
    crcreg = SPIx->TXCRCR;
 8002106:	bf15      	itete	ne
 8002108:	8b00      	ldrhne	r0, [r0, #24]
  }
  else
  {
    /* Get the Rx CRC register */
    crcreg = SPIx->RXCRCR;
 800210a:	8a80      	ldrheq	r0, [r0, #20]
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_CRC(SPI_CRC));
  if (SPI_CRC != SPI_CRC_Rx)
  {
    /* Get the Tx CRC register */
    crcreg = SPIx->TXCRCR;
 800210c:	b280      	uxthne	r0, r0
  }
  else
  {
    /* Get the Rx CRC register */
    crcreg = SPIx->RXCRCR;
 800210e:	b280      	uxtheq	r0, r0
  }
  /* Return the selected CRC register */
  return crcreg;
}
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop

08002114 <SPI_GetCRCPolynomial>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the CRC polynomial register */
  return SPIx->CRCPR;
 8002114:	8a00      	ldrh	r0, [r0, #16]
}
 8002116:	b280      	uxth	r0, r0
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop

0800211c <SPI_I2S_DMACmd>:
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 800211c:	8883      	ldrh	r3, [r0, #4]
 800211e:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
 8002120:	b91a      	cbnz	r2, 800212a <SPI_I2S_DMACmd+0xe>
    SPIx->CR2 |= SPI_I2S_DMAReq;
  }
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 8002122:	ea23 0101 	bic.w	r1, r3, r1
 8002126:	8081      	strh	r1, [r0, #4]
 8002128:	4770      	bx	lr
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 800212a:	4319      	orrs	r1, r3
 800212c:	8081      	strh	r1, [r0, #4]
 800212e:	4770      	bx	lr

08002130 <SPI_I2S_ITConfig>:

  /* Get the SPI IT index */
  itpos = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 8002130:	2301      	movs	r3, #1
 8002132:	0909      	lsrs	r1, r1, #4
 8002134:	fa13 f101 	lsls.w	r1, r3, r1

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 8002138:	8883      	ldrh	r3, [r0, #4]

  /* Get the SPI IT index */
  itpos = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 800213a:	b289      	uxth	r1, r1

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 800213c:	b29b      	uxth	r3, r3
  itpos = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;

  if (NewState != DISABLE)
 800213e:	b91a      	cbnz	r2, 8002148 <SPI_I2S_ITConfig+0x18>
    SPIx->CR2 |= itmask;
  }
  else
  {
    /* Disable the selected SPI interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
 8002140:	ea23 0101 	bic.w	r1, r3, r1
 8002144:	8081      	strh	r1, [r0, #4]
 8002146:	4770      	bx	lr
  itmask = (uint16_t)1 << (uint16_t)itpos;

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 8002148:	4319      	orrs	r1, r3
 800214a:	8081      	strh	r1, [r0, #4]
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop

08002150 <SPI_I2S_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8002150:	8903      	ldrh	r3, [r0, #8]
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8002152:	4219      	tst	r1, r3
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
}
 8002154:	bf0c      	ite	eq
 8002156:	2000      	moveq	r0, #0
 8002158:	2001      	movne	r0, #1
 800215a:	4770      	bx	lr

0800215c <SPI_I2S_ClearFlag>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));
    
  /* Clear the selected SPI CRC Error (CRCERR) flag */
  SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
 800215c:	43c9      	mvns	r1, r1
 800215e:	b289      	uxth	r1, r1
 8002160:	8101      	strh	r1, [r0, #8]
}
 8002162:	4770      	bx	lr

08002164 <SPI_I2S_GetITStatus>:
  *            @arg I2S_IT_UDR: Underrun interrupt.  
  *            @arg SPI_I2S_IT_TIFRFE: Format Error interrupt.  
  * @retval The new state of SPI_I2S_IT (SET or RESET).
  */
ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
{
 8002164:	b410      	push	{r4}

  /* Set the IT mask */
  itmask = 0x01 << itmask;

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 8002166:	8884      	ldrh	r4, [r0, #4]

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8002168:	8900      	ldrh	r0, [r0, #8]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));

  /* Get the SPI_I2S_IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 800216a:	2201      	movs	r2, #1
 800216c:	f001 030f 	and.w	r3, r1, #15

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8002170:	b280      	uxth	r0, r0
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));

  /* Get the SPI_I2S_IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 8002172:	fa12 f303 	lsls.w	r3, r2, r3

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8002176:	4018      	ands	r0, r3

  /* Set the IT mask */
  itmask = 0x01 << itmask;

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 8002178:	b2a4      	uxth	r4, r4

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 800217a:	d005      	beq.n	8002188 <SPI_I2S_GetITStatus+0x24>

  /* Get the SPI_I2S_IT IT mask */
  itmask = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = 0x01 << itmask;
 800217c:	0909      	lsrs	r1, r1, #4
 800217e:	408a      	lsls	r2, r1
  *            @arg SPI_IT_CRCERR: CRC Error interrupt.
  *            @arg I2S_IT_UDR: Underrun interrupt.  
  *            @arg SPI_I2S_IT_TIFRFE: Format Error interrupt.  
  * @retval The new state of SPI_I2S_IT (SET or RESET).
  */
ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
 8002180:	4214      	tst	r4, r2

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
  {
    /* SPI_I2S_IT is set */
    bitstatus = SET;
 8002182:	bf0c      	ite	eq
 8002184:	2000      	moveq	r0, #0
 8002186:	2001      	movne	r0, #1
    /* SPI_I2S_IT is reset */
    bitstatus = RESET;
  }
  /* Return the SPI_I2S_IT status */
  return bitstatus;
}
 8002188:	bc10      	pop	{r4}
 800218a:	4770      	bx	lr

0800218c <SPI_I2S_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_IT(SPI_I2S_IT));

  /* Get the SPI_I2S IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 800218c:	f001 010f 	and.w	r1, r1, #15
 8002190:	2301      	movs	r3, #1
 8002192:	fa13 f101 	lsls.w	r1, r3, r1

  /* Clear the selected SPI CRC Error (CRCERR) interrupt pending bit */
  SPIx->SR = (uint16_t)~itpos;
 8002196:	43c9      	mvns	r1, r1
 8002198:	b289      	uxth	r1, r1
 800219a:	8101      	strh	r1, [r0, #8]
}
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop

080021a0 <TIM_DeInit>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval None

  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 80021a0:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
 80021a2:	2300      	movs	r3, #0
 80021a4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80021a8:	4298      	cmp	r0, r3
 80021aa:	d05b      	beq.n	8002264 <TIM_DeInit+0xc4>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
  } 
  else if (TIMx == TIM2) 
 80021ac:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80021b0:	d062      	beq.n	8002278 <TIM_DeInit+0xd8>
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
  }  
  else if (TIMx == TIM3)
 80021b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021b6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80021ba:	4298      	cmp	r0, r3
 80021bc:	d066      	beq.n	800228c <TIM_DeInit+0xec>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
  }  
  else if (TIMx == TIM4)
 80021be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80021c2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80021c6:	4298      	cmp	r0, r3
 80021c8:	d06a      	beq.n	80022a0 <TIM_DeInit+0x100>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
  }  
  else if (TIMx == TIM5)
 80021ca:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80021ce:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80021d2:	4298      	cmp	r0, r3
 80021d4:	d06e      	beq.n	80022b4 <TIM_DeInit+0x114>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
  }  
  else if (TIMx == TIM6)  
 80021d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021da:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80021de:	4298      	cmp	r0, r3
 80021e0:	d072      	beq.n	80022c8 <TIM_DeInit+0x128>
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
  }  
  else if (TIMx == TIM7)
 80021e2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80021e6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80021ea:	4298      	cmp	r0, r3
 80021ec:	d076      	beq.n	80022dc <TIM_DeInit+0x13c>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
  }  
  else if (TIMx == TIM8)
 80021ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021f2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80021f6:	4298      	cmp	r0, r3
 80021f8:	d07a      	beq.n	80022f0 <TIM_DeInit+0x150>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
  }  
  else if (TIMx == TIM9)
 80021fa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80021fe:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002202:	4298      	cmp	r0, r3
 8002204:	d07e      	beq.n	8002304 <TIM_DeInit+0x164>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
   }  
  else if (TIMx == TIM10)
 8002206:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 800220a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800220e:	4298      	cmp	r0, r3
 8002210:	f000 8084 	beq.w	800231c <TIM_DeInit+0x17c>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
  }  
  else if (TIMx == TIM11) 
 8002214:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8002218:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800221c:	4298      	cmp	r0, r3
 800221e:	f000 8089 	beq.w	8002334 <TIM_DeInit+0x194>
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
  }  
  else if (TIMx == TIM12)
 8002222:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002226:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800222a:	4298      	cmp	r0, r3
 800222c:	f000 808e 	beq.w	800234c <TIM_DeInit+0x1ac>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
  }  
  else if (TIMx == TIM13) 
 8002230:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002234:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002238:	4298      	cmp	r0, r3
 800223a:	f000 8091 	beq.w	8002360 <TIM_DeInit+0x1c0>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
  }  
  else
  { 
    if (TIMx == TIM14) 
 800223e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002242:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002246:	4298      	cmp	r0, r3
 8002248:	d000      	beq.n	800224c <TIM_DeInit+0xac>
 800224a:	bd08      	pop	{r3, pc}
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 800224c:	2101      	movs	r1, #1
 800224e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002252:	f7ff fd23 	bl	8001c9c <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 8002256:	f44f 7080 	mov.w	r0, #256	; 0x100
 800225a:	2100      	movs	r1, #0
    }   
  }
}
 800225c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  { 
    if (TIMx == TIM14) 
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 8002260:	f7ff bd1c 	b.w	8001c9c <RCC_APB1PeriphResetCmd>
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 8002264:	2001      	movs	r0, #1
 8002266:	4601      	mov	r1, r0
 8002268:	f7ff fd26 	bl	8001cb8 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 800226c:	2001      	movs	r0, #1
 800226e:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8002270:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 8002274:	f7ff bd20 	b.w	8001cb8 <RCC_APB2PeriphResetCmd>
  } 
  else if (TIMx == TIM2) 
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 8002278:	2001      	movs	r0, #1
 800227a:	4601      	mov	r1, r0
 800227c:	f7ff fd0e 	bl	8001c9c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 8002280:	2001      	movs	r0, #1
 8002282:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8002284:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
  } 
  else if (TIMx == TIM2) 
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 8002288:	f7ff bd08 	b.w	8001c9c <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM3)
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 800228c:	2002      	movs	r0, #2
 800228e:	2101      	movs	r1, #1
 8002290:	f7ff fd04 	bl	8001c9c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 8002294:	2002      	movs	r0, #2
 8002296:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8002298:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
  }  
  else if (TIMx == TIM3)
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 800229c:	f7ff bcfe 	b.w	8001c9c <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM4)
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 80022a0:	2004      	movs	r0, #4
 80022a2:	2101      	movs	r1, #1
 80022a4:	f7ff fcfa 	bl	8001c9c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 80022a8:	2004      	movs	r0, #4
 80022aa:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 80022ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
  }  
  else if (TIMx == TIM4)
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 80022b0:	f7ff bcf4 	b.w	8001c9c <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM5)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 80022b4:	2008      	movs	r0, #8
 80022b6:	2101      	movs	r1, #1
 80022b8:	f7ff fcf0 	bl	8001c9c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 80022bc:	2008      	movs	r0, #8
 80022be:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 80022c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
  }  
  else if (TIMx == TIM5)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 80022c4:	f7ff bcea 	b.w	8001c9c <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM6)  
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 80022c8:	2010      	movs	r0, #16
 80022ca:	2101      	movs	r1, #1
 80022cc:	f7ff fce6 	bl	8001c9c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 80022d0:	2010      	movs	r0, #16
 80022d2:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 80022d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
  }  
  else if (TIMx == TIM6)  
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 80022d8:	f7ff bce0 	b.w	8001c9c <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM7)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 80022dc:	2020      	movs	r0, #32
 80022de:	2101      	movs	r1, #1
 80022e0:	f7ff fcdc 	bl	8001c9c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 80022e4:	2020      	movs	r0, #32
 80022e6:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 80022e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
  }  
  else if (TIMx == TIM7)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 80022ec:	f7ff bcd6 	b.w	8001c9c <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM8)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 80022f0:	2002      	movs	r0, #2
 80022f2:	2101      	movs	r1, #1
 80022f4:	f7ff fce0 	bl	8001cb8 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 80022f8:	2002      	movs	r0, #2
 80022fa:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 80022fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
  }  
  else if (TIMx == TIM8)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 8002300:	f7ff bcda 	b.w	8001cb8 <RCC_APB2PeriphResetCmd>
  }  
  else if (TIMx == TIM9)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
 8002304:	2101      	movs	r1, #1
 8002306:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800230a:	f7ff fcd5 	bl	8001cb8 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 800230e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8002312:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8002314:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
  }  
  else if (TIMx == TIM9)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 8002318:	f7ff bcce 	b.w	8001cb8 <RCC_APB2PeriphResetCmd>
   }  
  else if (TIMx == TIM10)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
 800231c:	2101      	movs	r1, #1
 800231e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002322:	f7ff fcc9 	bl	8001cb8 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 8002326:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800232a:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 800232c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
   }  
  else if (TIMx == TIM10)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 8002330:	f7ff bcc2 	b.w	8001cb8 <RCC_APB2PeriphResetCmd>
  }  
  else if (TIMx == TIM11) 
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
 8002334:	2101      	movs	r1, #1
 8002336:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800233a:	f7ff fcbd 	bl	8001cb8 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 800233e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002342:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8002344:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
  }  
  else if (TIMx == TIM11) 
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 8002348:	f7ff bcb6 	b.w	8001cb8 <RCC_APB2PeriphResetCmd>
  }  
  else if (TIMx == TIM12)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
 800234c:	2040      	movs	r0, #64	; 0x40
 800234e:	2101      	movs	r1, #1
 8002350:	f7ff fca4 	bl	8001c9c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 8002354:	2040      	movs	r0, #64	; 0x40
 8002356:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8002358:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
  }  
  else if (TIMx == TIM12)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 800235c:	f7ff bc9e 	b.w	8001c9c <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM13) 
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
 8002360:	2080      	movs	r0, #128	; 0x80
 8002362:	2101      	movs	r1, #1
 8002364:	f7ff fc9a 	bl	8001c9c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 8002368:	2080      	movs	r0, #128	; 0x80
 800236a:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 800236c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
  }  
  else if (TIMx == TIM13) 
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 8002370:	f7ff bc94 	b.w	8001c9c <RCC_APB1PeriphResetCmd>

08002374 <TIM_TimeBaseInit>:
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8002374:	2300      	movs	r3, #0
 8002376:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800237a:	f2c4 0301 	movt	r3, #16385	; 0x4001
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 800237e:	b470      	push	{r4, r5, r6}
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8002380:	f2c4 0201 	movt	r2, #16385	; 0x4001
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8002384:	8804      	ldrh	r4, [r0, #0]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8002386:	4298      	cmp	r0, r3
 8002388:	bf18      	it	ne
 800238a:	4290      	cmpne	r0, r2
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 800238c:	b2a4      	uxth	r4, r4

  if((TIMx == TIM1) || (TIMx == TIM8)||
 800238e:	bf14      	ite	ne
 8002390:	2300      	movne	r3, #0
 8002392:	2301      	moveq	r3, #1
 8002394:	d008      	beq.n	80023a8 <TIM_TimeBaseInit+0x34>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8002396:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800239a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800239e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80023a2:	bf18      	it	ne
 80023a4:	4290      	cmpne	r0, r2
 80023a6:	d123      	bne.n	80023f0 <TIM_TimeBaseInit+0x7c>
     (TIMx == TIM4) || (TIMx == TIM5)) 
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 80023a8:	f64f 758f 	movw	r5, #65423	; 0xff8f
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80023ac:	884a      	ldrh	r2, [r1, #2]
  if((TIMx == TIM1) || (TIMx == TIM8)||
     (TIMx == TIM2) || (TIMx == TIM3)||
     (TIMx == TIM4) || (TIMx == TIM5)) 
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 80023ae:	4025      	ands	r5, r4
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80023b0:	ea45 0402 	orr.w	r4, r5, r2
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 80023b4:	f44f 56a0 	mov.w	r6, #5120	; 0x1400
 80023b8:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 80023bc:	f2c4 0500 	movt	r5, #16384	; 0x4000
 80023c0:	f2c4 0600 	movt	r6, #16384	; 0x4000
 80023c4:	42b0      	cmp	r0, r6
 80023c6:	bf18      	it	ne
 80023c8:	42a8      	cmpne	r0, r5
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80023ca:	bf1f      	itttt	ne
 80023cc:	890d      	ldrhne	r5, [r1, #8]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 80023ce:	f64f 42ff 	movwne	r2, #64767	; 0xfcff
 80023d2:	4022      	andne	r2, r4
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80023d4:	ea42 0405 	orrne.w	r4, r2, r5
  }

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80023d8:	684d      	ldr	r5, [r1, #4]
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80023da:	880a      	ldrh	r2, [r1, #0]
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 80023dc:	8004      	strh	r4, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80023de:	62c5      	str	r5, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80023e0:	8502      	strh	r2, [r0, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 80023e2:	b10b      	cbz	r3, 80023e8 <TIM_TimeBaseInit+0x74>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 80023e4:	7a8b      	ldrb	r3, [r1, #10]
 80023e6:	8603      	strh	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 80023e8:	2301      	movs	r3, #1
 80023ea:	8283      	strh	r3, [r0, #20]
}
 80023ec:	bc70      	pop	{r4, r5, r6}
 80023ee:	4770      	bx	lr

  tmpcr1 = TIMx->CR1;  

  if((TIMx == TIM1) || (TIMx == TIM8)||
     (TIMx == TIM2) || (TIMx == TIM3)||
     (TIMx == TIM4) || (TIMx == TIM5)) 
 80023f0:	f44f 6540 	mov.w	r5, #3072	; 0xc00
 80023f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80023f8:	f2c4 0500 	movt	r5, #16384	; 0x4000
 80023fc:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8002400:	4290      	cmp	r0, r2
 8002402:	bf18      	it	ne
 8002404:	42a8      	cmpne	r0, r5
 8002406:	d1d5      	bne.n	80023b4 <TIM_TimeBaseInit+0x40>
 8002408:	e7ce      	b.n	80023a8 <TIM_TimeBaseInit+0x34>
 800240a:	bf00      	nop

0800240c <TIM_TimeBaseStructInit>:
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 800240c:	2300      	movs	r3, #0
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 800240e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002412:	6041      	str	r1, [r0, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 8002414:	8003      	strh	r3, [r0, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 8002416:	8103      	strh	r3, [r0, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 8002418:	8043      	strh	r3, [r0, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 800241a:	7283      	strb	r3, [r0, #10]
}
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop

08002420 <TIM_PrescalerConfig>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
 8002420:	8501      	strh	r1, [r0, #40]	; 0x28
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
 8002422:	8282      	strh	r2, [r0, #20]
}
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop

08002428 <TIM_CounterModeConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));

  tmpcr1 = TIMx->CR1;
 8002428:	8803      	ldrh	r3, [r0, #0]

  /* Reset the CMS and DIR Bits */
  tmpcr1 &= (uint16_t)~(TIM_CR1_DIR | TIM_CR1_CMS);
 800242a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800242e:	041b      	lsls	r3, r3, #16
 8002430:	0c1b      	lsrs	r3, r3, #16

  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
 8002432:	430b      	orrs	r3, r1

  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
 8002434:	8003      	strh	r3, [r0, #0]
}
 8002436:	4770      	bx	lr

08002438 <TIM_SetCounter>:
{
  /* Check the parameters */
   assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 8002438:	6241      	str	r1, [r0, #36]	; 0x24
}
 800243a:	4770      	bx	lr

0800243c <TIM_SetAutoreload>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 800243c:	62c1      	str	r1, [r0, #44]	; 0x2c
}
 800243e:	4770      	bx	lr

08002440 <TIM_GetCounter>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Counter Register value */
  return TIMx->CNT;
 8002440:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
 8002442:	4770      	bx	lr

08002444 <TIM_GetPrescaler>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Prescaler Register value */
  return TIMx->PSC;
 8002444:	8d00      	ldrh	r0, [r0, #40]	; 0x28
}
 8002446:	b280      	uxth	r0, r0
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop

0800244c <TIM_UpdateDisableConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 800244c:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800244e:	b929      	cbnz	r1, 800245c <TIM_UpdateDisableConfig+0x10>
    TIMx->CR1 |= TIM_CR1_UDIS;
  }
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_UDIS;
 8002450:	f023 0302 	bic.w	r3, r3, #2
 8002454:	041b      	lsls	r3, r3, #16
 8002456:	0c1b      	lsrs	r3, r3, #16
 8002458:	8003      	strh	r3, [r0, #0]
 800245a:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 800245c:	b29b      	uxth	r3, r3
 800245e:	f043 0302 	orr.w	r3, r3, #2
 8002462:	8003      	strh	r3, [r0, #0]
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop

08002468 <TIM_UpdateRequestConfig>:
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 8002468:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
 800246a:	b929      	cbnz	r1, 8002478 <TIM_UpdateRequestConfig+0x10>
    TIMx->CR1 |= TIM_CR1_URS;
  }
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_URS;
 800246c:	f023 0304 	bic.w	r3, r3, #4
 8002470:	041b      	lsls	r3, r3, #16
 8002472:	0c1b      	lsrs	r3, r3, #16
 8002474:	8003      	strh	r3, [r0, #0]
 8002476:	4770      	bx	lr
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 8002478:	b29b      	uxth	r3, r3
 800247a:	f043 0304 	orr.w	r3, r3, #4
 800247e:	8003      	strh	r3, [r0, #0]
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop

08002484 <TIM_ARRPreloadConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 8002484:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002486:	b929      	cbnz	r1, 8002494 <TIM_ARRPreloadConfig+0x10>
    TIMx->CR1 |= TIM_CR1_ARPE;
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 8002488:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800248c:	041b      	lsls	r3, r3, #16
 800248e:	0c1b      	lsrs	r3, r3, #16
 8002490:	8003      	strh	r3, [r0, #0]
 8002492:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 8002494:	b29b      	uxth	r3, r3
 8002496:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800249a:	8003      	strh	r3, [r0, #0]
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop

080024a0 <TIM_SelectOnePulseMode>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));

  /* Reset the OPM Bit */
  TIMx->CR1 &= (uint16_t)~TIM_CR1_OPM;
 80024a0:	8803      	ldrh	r3, [r0, #0]
 80024a2:	f023 0308 	bic.w	r3, r3, #8
 80024a6:	041b      	lsls	r3, r3, #16
 80024a8:	0c1b      	lsrs	r3, r3, #16
 80024aa:	8003      	strh	r3, [r0, #0]

  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
 80024ac:	8803      	ldrh	r3, [r0, #0]
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	430b      	orrs	r3, r1
 80024b2:	8003      	strh	r3, [r0, #0]
}
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop

080024b8 <TIM_SetClockDivision>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));

  /* Reset the CKD Bits */
  TIMx->CR1 &= (uint16_t)(~TIM_CR1_CKD);
 80024b8:	8803      	ldrh	r3, [r0, #0]
 80024ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024be:	041b      	lsls	r3, r3, #16
 80024c0:	0c1b      	lsrs	r3, r3, #16
 80024c2:	8003      	strh	r3, [r0, #0]

  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
 80024c4:	8803      	ldrh	r3, [r0, #0]
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	430b      	orrs	r3, r1
 80024ca:	8003      	strh	r3, [r0, #0]
}
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop

080024d0 <TIM_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80024d0:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80024d2:	b929      	cbnz	r1, 80024e0 <TIM_Cmd+0x10>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 80024d4:	f023 0301 	bic.w	r3, r3, #1
 80024d8:	041b      	lsls	r3, r3, #16
 80024da:	0c1b      	lsrs	r3, r3, #16
 80024dc:	8003      	strh	r3, [r0, #0]
 80024de:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	f043 0301 	orr.w	r3, r3, #1
 80024e6:	8003      	strh	r3, [r0, #0]
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop

080024ec <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80024ec:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 80024f0:	8c04      	ldrh	r4, [r0, #32]
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 80024f2:	898d      	ldrh	r5, [r1, #12]
 80024f4:	884f      	ldrh	r7, [r1, #2]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80024f6:	f8b1 c000 	ldrh.w	ip, [r1]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 80024fa:	f024 0401 	bic.w	r4, r4, #1
 80024fe:	0424      	lsls	r4, r4, #16
 8002500:	0c24      	lsrs	r4, r4, #16
 8002502:	8404      	strh	r4, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002504:	8c03      	ldrh	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002506:	8884      	ldrh	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002508:	8b02      	ldrh	r2, [r0, #24]
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 800250a:	432f      	orrs	r7, r5
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 800250c:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002510:	2500      	movs	r5, #0
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 8002512:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002516:	f44f 6680 	mov.w	r6, #1024	; 0x400
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 800251a:	0412      	lsls	r2, r2, #16
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 800251c:	041b      	lsls	r3, r3, #16
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800251e:	f2c4 0601 	movt	r6, #16385	; 0x4001
 8002522:	f2c4 0501 	movt	r5, #16385	; 0x4001
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 8002526:	0c12      	lsrs	r2, r2, #16
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 8002528:	0c1b      	lsrs	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 800252a:	b2bf      	uxth	r7, r7
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800252c:	42a8      	cmp	r0, r5
 800252e:	bf18      	it	ne
 8002530:	42b0      	cmpne	r0, r6
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002532:	b2a4      	uxth	r4, r4
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8002534:	ea42 020c 	orr.w	r2, r2, ip
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8002538:	ea47 0303 	orr.w	r3, r7, r3
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800253c:	d116      	bne.n	800256c <TIM_OC1Init+0x80>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 800253e:	f64f 75f7 	movw	r5, #65527	; 0xfff7
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8002542:	f8b1 c00e 	ldrh.w	ip, [r1, #14]
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 8002546:	f8b1 8012 	ldrh.w	r8, [r1, #18]
 800254a:	8a0f      	ldrh	r7, [r1, #16]
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 800254c:	888e      	ldrh	r6, [r1, #4]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 800254e:	401d      	ands	r5, r3
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8002550:	ea45 0c0c 	orr.w	ip, r5, ip
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 8002554:	f64f 73fb 	movw	r3, #65531	; 0xfffb
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 8002558:	f64f 45ff 	movw	r5, #64767	; 0xfcff
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 800255c:	ea48 0707 	orr.w	r7, r8, r7
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 8002560:	4025      	ands	r5, r4
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 8002562:	ea0c 0303 	and.w	r3, ip, r3
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 8002566:	b2bc      	uxth	r4, r7
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8002568:	4333      	orrs	r3, r6
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 800256a:	432c      	orrs	r4, r5
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 800256c:	6889      	ldr	r1, [r1, #8]
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800256e:	8084      	strh	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002570:	8302      	strh	r2, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 8002572:	6341      	str	r1, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002574:	8403      	strh	r3, [r0, #32]
}
 8002576:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 800257a:	4770      	bx	lr

0800257c <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800257c:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8002580:	8c04      	ldrh	r4, [r0, #32]
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 8002582:	898d      	ldrh	r5, [r1, #12]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8002584:	f8b1 c000 	ldrh.w	ip, [r1]
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8002588:	884f      	ldrh	r7, [r1, #2]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 800258a:	f024 0410 	bic.w	r4, r4, #16
 800258e:	0424      	lsls	r4, r4, #16
 8002590:	0c24      	lsrs	r4, r4, #16
 8002592:	8404      	strh	r4, [r0, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8002594:	8c02      	ldrh	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002596:	8884      	ldrh	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002598:	8b03      	ldrh	r3, [r0, #24]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 800259a:	f022 0220 	bic.w	r2, r2, #32
 800259e:	0412      	lsls	r2, r2, #16
 80025a0:	0c12      	lsrs	r2, r2, #16
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 80025a2:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
 80025a6:	041b      	lsls	r3, r3, #16
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 80025a8:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80025ac:	f44f 6680 	mov.w	r6, #1024	; 0x400
 80025b0:	2500      	movs	r5, #0
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 80025b2:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80025b4:	f2c4 0601 	movt	r6, #16385	; 0x4001
 80025b8:	f2c4 0501 	movt	r5, #16385	; 0x4001
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80025bc:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 80025c0:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80025c4:	42a8      	cmp	r0, r5
 80025c6:	bf18      	it	ne
 80025c8:	42b0      	cmpne	r0, r6
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025ca:	b2a4      	uxth	r4, r4
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80025cc:	b29b      	uxth	r3, r3
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 80025ce:	b292      	uxth	r2, r2
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80025d0:	d119      	bne.n	8002606 <TIM_OC2Init+0x8a>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 80025d2:	f64f 767f 	movw	r6, #65407	; 0xff7f
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 80025d6:	f8b1 900e 	ldrh.w	r9, [r1, #14]
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 80025da:	f8b1 8010 	ldrh.w	r8, [r1, #16]
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 80025de:	f8b1 c004 	ldrh.w	ip, [r1, #4]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 80025e2:	8a4f      	ldrh	r7, [r1, #18]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 80025e4:	4016      	ands	r6, r2
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
 80025e6:	f24f 35ff 	movw	r5, #62463	; 0xf3ff
 80025ea:	4025      	ands	r5, r4
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 80025ec:	ea46 1609 	orr.w	r6, r6, r9, lsl #4
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
 80025f0:	f64f 72bf 	movw	r2, #65471	; 0xffbf
 80025f4:	4032      	ands	r2, r6
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 80025f6:	ea45 0488 	orr.w	r4, r5, r8, lsl #2
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 80025fa:	ea42 120c 	orr.w	r2, r2, ip, lsl #4
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 80025fe:	ea44 0487 	orr.w	r4, r4, r7, lsl #2
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8002602:	b292      	uxth	r2, r2
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8002604:	b2a4      	uxth	r4, r4
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8002606:	6889      	ldr	r1, [r1, #8]
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002608:	8084      	strh	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800260a:	8303      	strh	r3, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 800260c:	6381      	str	r1, [r0, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800260e:	8402      	strh	r2, [r0, #32]
}
 8002610:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop

08002618 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8002618:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 800261c:	8c04      	ldrh	r4, [r0, #32]
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 800261e:	898d      	ldrh	r5, [r1, #12]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8002620:	f8b1 c002 	ldrh.w	ip, [r1, #2]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8002624:	880f      	ldrh	r7, [r1, #0]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8002626:	f424 7480 	bic.w	r4, r4, #256	; 0x100
 800262a:	0424      	lsls	r4, r4, #16
 800262c:	0c24      	lsrs	r4, r4, #16
 800262e:	8404      	strh	r4, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002630:	8c02      	ldrh	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002632:	8884      	ldrh	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002634:	8b83      	ldrh	r3, [r0, #28]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 8002636:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800263a:	0412      	lsls	r2, r2, #16
 800263c:	0c12      	lsrs	r2, r2, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 800263e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 8002642:	f023 0373 	bic.w	r3, r3, #115	; 0x73
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002646:	2500      	movs	r5, #0
 8002648:	f44f 6680 	mov.w	r6, #1024	; 0x400
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 800264c:	041b      	lsls	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800264e:	f2c4 0601 	movt	r6, #16385	; 0x4001
 8002652:	f2c4 0501 	movt	r5, #16385	; 0x4001
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 8002656:	0c1b      	lsrs	r3, r3, #16
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8002658:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800265c:	42a8      	cmp	r0, r5
 800265e:	bf18      	it	ne
 8002660:	42b0      	cmpne	r0, r6
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002662:	b2a4      	uxth	r4, r4
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8002664:	ea43 0307 	orr.w	r3, r3, r7
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8002668:	b292      	uxth	r2, r2
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800266a:	d119      	bne.n	80026a0 <TIM_OC3Init+0x88>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 800266c:	f24f 76ff 	movw	r6, #63487	; 0xf7ff
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8002670:	f8b1 900e 	ldrh.w	r9, [r1, #14]
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8002674:	f8b1 8010 	ldrh.w	r8, [r1, #16]
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8002678:	f8b1 c004 	ldrh.w	ip, [r1, #4]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 800267c:	8a4f      	ldrh	r7, [r1, #18]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 800267e:	4016      	ands	r6, r2
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 8002680:	f64c 75ff 	movw	r5, #53247	; 0xcfff
 8002684:	4025      	ands	r5, r4
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8002686:	ea46 2609 	orr.w	r6, r6, r9, lsl #8
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 800268a:	f64f 32ff 	movw	r2, #64511	; 0xfbff
 800268e:	4032      	ands	r2, r6
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8002690:	ea45 1408 	orr.w	r4, r5, r8, lsl #4
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8002694:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8002698:	ea44 1407 	orr.w	r4, r4, r7, lsl #4
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 800269c:	b292      	uxth	r2, r2
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 800269e:	b2a4      	uxth	r4, r4
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 80026a0:	6889      	ldr	r1, [r1, #8]
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026a2:	8084      	strh	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80026a4:	8383      	strh	r3, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 80026a6:	63c1      	str	r1, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026a8:	8402      	strh	r2, [r0, #32]
}
 80026aa:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80026ae:	4770      	bx	lr

080026b0 <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80026b0:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 80026b2:	8c04      	ldrh	r4, [r0, #32]
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 80026b4:	898d      	ldrh	r5, [r1, #12]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80026b6:	f8b1 c000 	ldrh.w	ip, [r1]
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 80026ba:	884f      	ldrh	r7, [r1, #2]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 80026bc:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 80026c0:	0424      	lsls	r4, r4, #16
 80026c2:	0c24      	lsrs	r4, r4, #16
 80026c4:	8404      	strh	r4, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026c6:	8c02      	ldrh	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026c8:	8884      	ldrh	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80026ca:	8b83      	ldrh	r3, [r0, #28]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 80026cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026d0:	0412      	lsls	r2, r2, #16
 80026d2:	0c12      	lsrs	r2, r2, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 80026d4:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 80026d8:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 80026dc:	2500      	movs	r5, #0
 80026de:	f44f 6680 	mov.w	r6, #1024	; 0x400
 80026e2:	f2c4 0501 	movt	r5, #16385	; 0x4001
 80026e6:	f2c4 0601 	movt	r6, #16385	; 0x4001
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 80026ea:	041b      	lsls	r3, r3, #16
 80026ec:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 80026ee:	42a8      	cmp	r0, r5
 80026f0:	bf18      	it	ne
 80026f2:	42b0      	cmpne	r0, r6
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 80026f4:	bf08      	it	eq
 80026f6:	8a0e      	ldrheq	r6, [r1, #16]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 80026f8:	6889      	ldr	r1, [r1, #8]
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026fa:	b2a4      	uxth	r4, r4
  
  if((TIMx == TIM1) || (TIMx == TIM8))
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 80026fc:	bf02      	ittt	eq
 80026fe:	f64b 75ff 	movweq	r5, #49151	; 0xbfff
 8002702:	4025      	andeq	r5, r4
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8002704:	ea45 1486 	orreq.w	r4, r5, r6, lsl #6
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8002708:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 800270c:	ea42 3207 	orr.w	r2, r2, r7, lsl #12
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8002710:	b29b      	uxth	r3, r3
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8002712:	b292      	uxth	r2, r2
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8002714:	bf08      	it	eq
 8002716:	b2a4      	uxtheq	r4, r4
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002718:	8084      	strh	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 800271a:	8383      	strh	r3, [r0, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 800271c:	6401      	str	r1, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800271e:	8402      	strh	r2, [r0, #32]
}
 8002720:	bcf0      	pop	{r4, r5, r6, r7}
 8002722:	4770      	bx	lr

08002724 <TIM_OCStructInit>:
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 8002724:	2300      	movs	r3, #0
 8002726:	8003      	strh	r3, [r0, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 8002728:	8043      	strh	r3, [r0, #2]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 800272a:	8083      	strh	r3, [r0, #4]
  TIM_OCInitStruct->TIM_Pulse = 0x00000000;
 800272c:	6083      	str	r3, [r0, #8]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 800272e:	8183      	strh	r3, [r0, #12]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 8002730:	81c3      	strh	r3, [r0, #14]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 8002732:	8203      	strh	r3, [r0, #16]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 8002734:	8243      	strh	r3, [r0, #18]
}
 8002736:	4770      	bx	lr

08002738 <TIM_SelectOCxM>:
  *            @arg TIM_ForcedAction_Active
  *            @arg TIM_ForcedAction_InActive
  * @retval None
  */
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
{
 8002738:	b410      	push	{r4}
  tmp += CCMR_OFFSET;

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 800273a:	8c04      	ldrh	r4, [r0, #32]
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
  tmp += CCMR_OFFSET;

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;
 800273c:	2301      	movs	r3, #1
 800273e:	408b      	lsls	r3, r1

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 8002740:	b2a4      	uxth	r4, r4
 8002742:	ea24 0303 	bic.w	r3, r4, r3
 8002746:	8403      	strh	r3, [r0, #32]
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
  tmp += CCMR_OFFSET;
 8002748:	3018      	adds	r0, #24
  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 800274a:	2900      	cmp	r1, #0
 800274c:	bf18      	it	ne
 800274e:	2908      	cmpne	r1, #8
 8002750:	d00e      	beq.n	8002770 <TIM_SelectOCxM+0x38>
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
  }
  else
  {
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
 8002752:	3904      	subs	r1, #4
 8002754:	f3c1 014e 	ubfx	r1, r1, #1, #15

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC24M_MASK;
 8002758:	f648 73ff 	movw	r3, #36863	; 0x8fff
 800275c:	580c      	ldr	r4, [r1, r0]
 800275e:	4023      	ands	r3, r4
 8002760:	500b      	str	r3, [r1, r0]
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 8002762:	0212      	lsls	r2, r2, #8
 8002764:	580b      	ldr	r3, [r1, r0]
 8002766:	b292      	uxth	r2, r2
 8002768:	431a      	orrs	r2, r3
 800276a:	500a      	str	r2, [r1, r0]
  }
}
 800276c:	bc10      	pop	{r4}
 800276e:	4770      	bx	lr
  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
  {
    tmp += (TIM_Channel>>1);
 8002770:	0849      	lsrs	r1, r1, #1

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC13M_MASK;
 8002772:	f64f 738f 	movw	r3, #65423	; 0xff8f
 8002776:	580c      	ldr	r4, [r1, r0]
 8002778:	4023      	ands	r3, r4
 800277a:	500b      	str	r3, [r1, r0]
   
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
 800277c:	580b      	ldr	r3, [r1, r0]
 800277e:	431a      	orrs	r2, r3
 8002780:	500a      	str	r2, [r1, r0]
 8002782:	e7f3      	b.n	800276c <TIM_SelectOCxM+0x34>

08002784 <TIM_SetCompare1>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 8002784:	6341      	str	r1, [r0, #52]	; 0x34
}
 8002786:	4770      	bx	lr

08002788 <TIM_SetCompare2>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 8002788:	6381      	str	r1, [r0, #56]	; 0x38
}
 800278a:	4770      	bx	lr

0800278c <TIM_SetCompare3>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 800278c:	63c1      	str	r1, [r0, #60]	; 0x3c
}
 800278e:	4770      	bx	lr

08002790 <TIM_SetCompare4>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
 8002790:	6401      	str	r1, [r0, #64]	; 0x40
}
 8002792:	4770      	bx	lr

08002794 <TIM_ForcedOC1Config>:
  uint16_t tmpccmr1 = 0;

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 8002794:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1M;
 8002796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800279a:	041b      	lsls	r3, r3, #16
 800279c:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
 800279e:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80027a0:	8303      	strh	r3, [r0, #24]
}
 80027a2:	4770      	bx	lr

080027a4 <TIM_ForcedOC2Config>:
  uint16_t tmpccmr1 = 0;

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 80027a4:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2M;
 80027a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027aa:	041b      	lsls	r3, r3, #16
 80027ac:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
 80027ae:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80027b2:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80027b4:	8303      	strh	r3, [r0, #24]
}
 80027b6:	4770      	bx	lr

080027b8 <TIM_ForcedOC3Config>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));

  tmpccmr2 = TIMx->CCMR2;
 80027b8:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC1M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3M;
 80027ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027be:	041b      	lsls	r3, r3, #16
 80027c0:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
 80027c2:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80027c4:	8383      	strh	r3, [r0, #28]
}
 80027c6:	4770      	bx	lr

080027c8 <TIM_ForcedOC4Config>:
  uint16_t tmpccmr2 = 0;

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
 80027c8:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC2M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4M;
 80027ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027ce:	041b      	lsls	r3, r3, #16
 80027d0:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
 80027d2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80027d6:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80027d8:	8383      	strh	r3, [r0, #28]
}
 80027da:	4770      	bx	lr

080027dc <TIM_OC1PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 80027dc:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC1PE);
 80027de:	f023 0308 	bic.w	r3, r3, #8
 80027e2:	041b      	lsls	r3, r3, #16
 80027e4:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 80027e6:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80027e8:	8303      	strh	r3, [r0, #24]
}
 80027ea:	4770      	bx	lr

080027ec <TIM_OC2PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 80027ec:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2PE);
 80027ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80027f2:	041b      	lsls	r3, r3, #16
 80027f4:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 80027f6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80027fa:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80027fc:	8303      	strh	r3, [r0, #24]
}
 80027fe:	4770      	bx	lr

08002800 <TIM_OC3PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8002800:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 8002802:	f023 0308 	bic.w	r3, r3, #8
 8002806:	041b      	lsls	r3, r3, #16
 8002808:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 800280a:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800280c:	8383      	strh	r3, [r0, #28]
}
 800280e:	4770      	bx	lr

08002810 <TIM_OC4PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8002810:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
 8002812:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002816:	041b      	lsls	r3, r3, #16
 8002818:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 800281a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800281e:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8002820:	8383      	strh	r3, [r0, #28]
}
 8002822:	4770      	bx	lr

08002824 <TIM_OC1FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8002824:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1FE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1FE;
 8002826:	f023 0304 	bic.w	r3, r3, #4
 800282a:	041b      	lsls	r3, r3, #16
 800282c:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
 800282e:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8002830:	8303      	strh	r3, [r0, #24]
}
 8002832:	4770      	bx	lr

08002834 <TIM_OC2FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8002834:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2FE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2FE);
 8002836:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800283a:	041b      	lsls	r3, r3, #16
 800283c:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
 800283e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002842:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8002844:	8303      	strh	r3, [r0, #24]
}
 8002846:	4770      	bx	lr

08002848 <TIM_OC3FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 8002848:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC3FE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3FE;
 800284a:	f023 0304 	bic.w	r3, r3, #4
 800284e:	041b      	lsls	r3, r3, #16
 8002850:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
 8002852:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 8002854:	8383      	strh	r3, [r0, #28]
}
 8002856:	4770      	bx	lr

08002858 <TIM_OC4FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 8002858:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC4FE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4FE);
 800285a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800285e:	041b      	lsls	r3, r3, #16
 8002860:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
 8002862:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002866:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 8002868:	8383      	strh	r3, [r0, #28]
}
 800286a:	4770      	bx	lr

0800286c <TIM_ClearOC1Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 800286c:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1CE;
 800286e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002872:	041b      	lsls	r3, r3, #16
 8002874:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
 8002876:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8002878:	8303      	strh	r3, [r0, #24]
}
 800287a:	4770      	bx	lr

0800287c <TIM_ClearOC2Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 800287c:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2CE;
 800287e:	045b      	lsls	r3, r3, #17
 8002880:	0c5b      	lsrs	r3, r3, #17

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
 8002882:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002886:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8002888:	8303      	strh	r3, [r0, #24]
}
 800288a:	4770      	bx	lr

0800288c <TIM_ClearOC3Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 800288c:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC3CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3CE;
 800288e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002892:	041b      	lsls	r3, r3, #16
 8002894:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
 8002896:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8002898:	8383      	strh	r3, [r0, #28]
}
 800289a:	4770      	bx	lr

0800289c <TIM_ClearOC4Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 800289c:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4CE;
 800289e:	045b      	lsls	r3, r3, #17
 80028a0:	0c5b      	lsrs	r3, r3, #17

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
 80028a2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80028a6:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80028a8:	8383      	strh	r3, [r0, #28]
}
 80028aa:	4770      	bx	lr

080028ac <TIM_OC1PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 80028ac:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC1P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC1P);
 80028ae:	f023 0302 	bic.w	r3, r3, #2
 80028b2:	041b      	lsls	r3, r3, #16
 80028b4:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= TIM_OCPolarity;
 80028b6:	430b      	orrs	r3, r1

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80028b8:	8403      	strh	r3, [r0, #32]
}
 80028ba:	4770      	bx	lr

080028bc <TIM_OC1NPolarityConfig>:
  uint16_t tmpccer = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
 80028bc:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC1NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 80028be:	f023 0308 	bic.w	r3, r3, #8
 80028c2:	041b      	lsls	r3, r3, #16
 80028c4:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= TIM_OCNPolarity;
 80028c6:	430b      	orrs	r3, r1

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80028c8:	8403      	strh	r3, [r0, #32]
}
 80028ca:	4770      	bx	lr

080028cc <TIM_OC2PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 80028cc:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC2P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC2P);
 80028ce:	f023 0320 	bic.w	r3, r3, #32
 80028d2:	041b      	lsls	r3, r3, #16
 80028d4:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
 80028d6:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 80028da:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80028dc:	8403      	strh	r3, [r0, #32]
}
 80028de:	4770      	bx	lr

080028e0 <TIM_OC2NPolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
 80028e0:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC2NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 80028e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028e6:	041b      	lsls	r3, r3, #16
 80028e8:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
 80028ea:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 80028ee:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80028f0:	8403      	strh	r3, [r0, #32]
}
 80028f2:	4770      	bx	lr

080028f4 <TIM_OC3PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 80028f4:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC3P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 80028f6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80028fa:	041b      	lsls	r3, r3, #16
 80028fc:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
 80028fe:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002902:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8002904:	8403      	strh	r3, [r0, #32]
}
 8002906:	4770      	bx	lr

08002908 <TIM_OC3NPolarityConfig>:
 
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
 8002908:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC3NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 800290a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800290e:	041b      	lsls	r3, r3, #16
 8002910:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
 8002912:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002916:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8002918:	8403      	strh	r3, [r0, #32]
}
 800291a:	4770      	bx	lr

0800291c <TIM_OC4PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 800291c:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC4P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 800291e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002922:	041b      	lsls	r3, r3, #16
 8002924:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
 8002926:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 800292a:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800292c:	8403      	strh	r3, [r0, #32]
}
 800292e:	4770      	bx	lr

08002930 <TIM_CCxCmd>:
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
 8002930:	b410      	push	{r4}
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 8002932:	8c04      	ldrh	r4, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;
 8002934:	2301      	movs	r3, #1
 8002936:	408b      	lsls	r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 8002938:	b2a4      	uxth	r4, r4
 800293a:	ea24 0303 	bic.w	r3, r4, r3
 800293e:	8403      	strh	r3, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
 8002940:	8c03      	ldrh	r3, [r0, #32]
 8002942:	fa12 f101 	lsls.w	r1, r2, r1
 8002946:	430b      	orrs	r3, r1
 8002948:	b29b      	uxth	r3, r3
 800294a:	8403      	strh	r3, [r0, #32]
}
 800294c:	bc10      	pop	{r4}
 800294e:	4770      	bx	lr

08002950 <TIM_CCxNCmd>:
  * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
  * @retval None
  */
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
{
 8002950:	b410      	push	{r4}
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_SET << TIM_Channel;

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 8002952:	8c04      	ldrh	r4, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_SET << TIM_Channel;
 8002954:	2304      	movs	r3, #4
 8002956:	408b      	lsls	r3, r1

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 8002958:	b2a4      	uxth	r4, r4
 800295a:	ea24 0303 	bic.w	r3, r4, r3
 800295e:	8403      	strh	r3, [r0, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
 8002960:	8c03      	ldrh	r3, [r0, #32]
 8002962:	fa12 f101 	lsls.w	r1, r2, r1
 8002966:	430b      	orrs	r3, r1
 8002968:	b29b      	uxth	r3, r3
 800296a:	8403      	strh	r3, [r0, #32]
}
 800296c:	bc10      	pop	{r4}
 800296e:	4770      	bx	lr

08002970 <TIM_ICInit>:
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8002970:	880b      	ldrh	r3, [r1, #0]
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8002972:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8002974:	2b00      	cmp	r3, #0
 8002976:	d032      	beq.n	80029de <TIM_ICInit+0x6e>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 8002978:	2b04      	cmp	r3, #4
 800297a:	d058      	beq.n	8002a2e <TIM_ICInit+0xbe>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 800297c:	2b08      	cmp	r3, #8
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 800297e:	884e      	ldrh	r6, [r1, #2]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8002980:	8c03      	ldrh	r3, [r0, #32]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 8002982:	f000 8082 	beq.w	8002a8a <TIM_ICInit+0x11a>
  }
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8002986:	888f      	ldrh	r7, [r1, #4]
 8002988:	890d      	ldrh	r5, [r1, #8]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800298a:	88cc      	ldrh	r4, [r1, #6]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 800298c:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002990:	0409      	lsls	r1, r1, #16
 8002992:	0c09      	lsrs	r1, r1, #16
 8002994:	8401      	strh	r1, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002996:	8b82      	ldrh	r2, [r0, #28]
  tmpccer = TIMx->CCER;
 8002998:	8c03      	ldrh	r3, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 800299a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800299e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 80029a2:	0512      	lsls	r2, r2, #20
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80029a4:	045b      	lsls	r3, r3, #17
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 80029a6:	0d12      	lsrs	r2, r2, #20
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80029a8:	0c5b      	lsrs	r3, r3, #17
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 80029aa:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 80029ae:	ea43 3306 	orr.w	r3, r3, r6, lsl #12
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 80029b2:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 80029bc:	b292      	uxth	r2, r2
  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80029be:	8382      	strh	r2, [r0, #28]
  TIMx->CCER = tmpccer ;
 80029c0:	8403      	strh	r3, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC4PSC;
 80029c2:	8b83      	ldrh	r3, [r0, #28]
 80029c4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80029c8:	041b      	lsls	r3, r3, #16
 80029ca:	0c1b      	lsrs	r3, r3, #16
 80029cc:	8383      	strh	r3, [r0, #28]

  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 80029ce:	8b83      	ldrh	r3, [r0, #28]
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	8383      	strh	r3, [r0, #28]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 80029da:	bcf0      	pop	{r4, r5, r6, r7}
 80029dc:	4770      	bx	lr
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 80029de:	8c03      	ldrh	r3, [r0, #32]
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 80029e0:	884e      	ldrh	r6, [r1, #2]
 80029e2:	888d      	ldrh	r5, [r1, #4]
 80029e4:	890f      	ldrh	r7, [r1, #8]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80029e6:	88cc      	ldrh	r4, [r1, #6]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 80029e8:	f023 0101 	bic.w	r1, r3, #1
 80029ec:	0409      	lsls	r1, r1, #16
 80029ee:	0c09      	lsrs	r1, r1, #16
 80029f0:	8401      	strh	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029f2:	8b02      	ldrh	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 80029f4:	8c03      	ldrh	r3, [r0, #32]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 80029f6:	f022 02f3 	bic.w	r2, r2, #243	; 0xf3
 80029fa:	0412      	lsls	r2, r2, #16
 80029fc:	0c12      	lsrs	r2, r2, #16
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80029fe:	f023 030a 	bic.w	r3, r3, #10
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002a02:	ea42 1207 	orr.w	r2, r2, r7, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a06:	041b      	lsls	r3, r3, #16
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002a08:	b292      	uxth	r2, r2

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a0a:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8002a0c:	f046 0101 	orr.w	r1, r6, #1
 8002a10:	430b      	orrs	r3, r1
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002a12:	432a      	orrs	r2, r5
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a14:	8302      	strh	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002a16:	8403      	strh	r3, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
 8002a18:	8b03      	ldrh	r3, [r0, #24]
 8002a1a:	f023 030c 	bic.w	r3, r3, #12
 8002a1e:	041b      	lsls	r3, r3, #16
 8002a20:	0c1b      	lsrs	r3, r3, #16
 8002a22:	8303      	strh	r3, [r0, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8002a24:	8b03      	ldrh	r3, [r0, #24]
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	4323      	orrs	r3, r4
 8002a2a:	8303      	strh	r3, [r0, #24]
 8002a2c:	e7d5      	b.n	80029da <TIM_ICInit+0x6a>
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8002a2e:	8c03      	ldrh	r3, [r0, #32]
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_LIST2_PERIPH(TIMx));
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8002a30:	884e      	ldrh	r6, [r1, #2]
 8002a32:	888d      	ldrh	r5, [r1, #4]
 8002a34:	890f      	ldrh	r7, [r1, #8]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002a36:	88cc      	ldrh	r4, [r1, #6]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8002a38:	f023 0110 	bic.w	r1, r3, #16
 8002a3c:	0409      	lsls	r1, r1, #16
 8002a3e:	0c09      	lsrs	r1, r1, #16
 8002a40:	8401      	strh	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a42:	8b02      	ldrh	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8002a44:	8c03      	ldrh	r3, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8002a46:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002a4a:	0512      	lsls	r2, r2, #20
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a4c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8002a50:	0d12      	lsrs	r2, r2, #20
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a52:	041b      	lsls	r3, r3, #16
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8002a54:	ea42 3207 	orr.w	r2, r2, r7, lsl #12
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a58:	0c1b      	lsrs	r3, r3, #16
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8002a5a:	b292      	uxth	r2, r2
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8002a5c:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8002a60:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	f043 0310 	orr.w	r3, r3, #16
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8002a6a:	b292      	uxth	r2, r2
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a6c:	8302      	strh	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002a6e:	8403      	strh	r3, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
 8002a70:	8b03      	ldrh	r3, [r0, #24]
 8002a72:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002a76:	041b      	lsls	r3, r3, #16
 8002a78:	0c1b      	lsrs	r3, r3, #16
 8002a7a:	8303      	strh	r3, [r0, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8002a7c:	8b03      	ldrh	r3, [r0, #24]
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	8303      	strh	r3, [r0, #24]
 8002a88:	e7a7      	b.n	80029da <TIM_ICInit+0x6a>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 8002a8a:	888d      	ldrh	r5, [r1, #4]
 8002a8c:	890f      	ldrh	r7, [r1, #8]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002a8e:	88cc      	ldrh	r4, [r1, #6]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8002a90:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8002a94:	0409      	lsls	r1, r1, #16
 8002a96:	0c09      	lsrs	r1, r1, #16
 8002a98:	8401      	strh	r1, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002a9a:	8b82      	ldrh	r2, [r0, #28]
  tmpccer = TIMx->CCER;
 8002a9c:	8c03      	ldrh	r3, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
 8002a9e:	f022 02f3 	bic.w	r2, r2, #243	; 0xf3
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002aa2:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
 8002aa6:	0412      	lsls	r2, r2, #16
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002aa8:	041b      	lsls	r3, r3, #16
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
 8002aaa:	0c12      	lsrs	r2, r2, #16
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002aac:	0c1b      	lsrs	r3, r3, #16
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002aae:	ea42 1207 	orr.w	r2, r2, r7, lsl #4

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 8002ab2:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002ab6:	b292      	uxth	r2, r2

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002abe:	432a      	orrs	r2, r5
  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002ac0:	8382      	strh	r2, [r0, #28]
  TIMx->CCER = tmpccer;
 8002ac2:	8403      	strh	r3, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC3PSC;
 8002ac4:	8b83      	ldrh	r3, [r0, #28]
 8002ac6:	f023 030c 	bic.w	r3, r3, #12
 8002aca:	041b      	lsls	r3, r3, #16
 8002acc:	0c1b      	lsrs	r3, r3, #16
 8002ace:	8383      	strh	r3, [r0, #28]

  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 8002ad0:	8b83      	ldrh	r3, [r0, #28]
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	4323      	orrs	r3, r4
 8002ad6:	8383      	strh	r3, [r0, #28]
 8002ad8:	e77f      	b.n	80029da <TIM_ICInit+0x6a>
 8002ada:	bf00      	nop

08002adc <TIM_ICStructInit>:
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 8002adc:	2300      	movs	r3, #0
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 8002ade:	2201      	movs	r2, #1
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 8002ae0:	8003      	strh	r3, [r0, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 8002ae2:	8043      	strh	r3, [r0, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 8002ae4:	8082      	strh	r2, [r0, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 8002ae6:	80c3      	strh	r3, [r0, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
 8002ae8:	8103      	strh	r3, [r0, #8]
}
 8002aea:	4770      	bx	lr

08002aec <TIM_PWMIConfig>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8002aec:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 8002af0:	888a      	ldrh	r2, [r1, #4]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 8002af2:	f8b1 8002 	ldrh.w	r8, [r1, #2]
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8002af6:	880b      	ldrh	r3, [r1, #0]
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
 8002af8:	f1b8 0f00 	cmp.w	r8, #0
 8002afc:	bf0c      	ite	eq
 8002afe:	2502      	moveq	r5, #2
 8002b00:	2500      	movne	r5, #0
    icoppositepolarity = TIM_ICPolarity_Rising;
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
 8002b02:	2a01      	cmp	r2, #1
 8002b04:	bf14      	ite	ne
 8002b06:	2601      	movne	r6, #1
 8002b08:	2602      	moveq	r6, #2
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d051      	beq.n	8002bb2 <TIM_PWMIConfig+0xc6>
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8002b0e:	8c03      	ldrh	r3, [r0, #32]
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 8002b10:	f8b1 c008 	ldrh.w	ip, [r1, #8]
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002b14:	88cf      	ldrh	r7, [r1, #6]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8002b16:	f023 0310 	bic.w	r3, r3, #16
 8002b1a:	041b      	lsls	r3, r3, #16
 8002b1c:	0c1b      	lsrs	r3, r3, #16
 8002b1e:	8403      	strh	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b20:	8b04      	ldrh	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8002b22:	8c01      	ldrh	r1, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8002b24:	f424 7440 	bic.w	r4, r4, #768	; 0x300
 8002b28:	0524      	lsls	r4, r4, #20
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b2a:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8002b2e:	0d24      	lsrs	r4, r4, #20
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b30:	0409      	lsls	r1, r1, #16
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8002b32:	ea44 340c 	orr.w	r4, r4, ip, lsl #12
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b36:	0c09      	lsrs	r1, r1, #16
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8002b38:	b2a4      	uxth	r4, r4
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8002b3a:	ea41 1108 	orr.w	r1, r1, r8, lsl #4
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8002b3e:	ea44 2202 	orr.w	r2, r4, r2, lsl #8

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8002b42:	b289      	uxth	r1, r1
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8002b44:	b292      	uxth	r2, r2

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8002b46:	f041 0110 	orr.w	r1, r1, #16

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b4a:	8302      	strh	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002b4c:	8401      	strh	r1, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
 8002b4e:	8b01      	ldrh	r1, [r0, #24]
 8002b50:	f421 6140 	bic.w	r1, r1, #3072	; 0xc00
 8002b54:	0409      	lsls	r1, r1, #16
 8002b56:	0c09      	lsrs	r1, r1, #16
 8002b58:	8301      	strh	r1, [r0, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8002b5a:	8b03      	ldrh	r3, [r0, #24]
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	8303      	strh	r3, [r0, #24]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8002b66:	8c01      	ldrh	r1, [r0, #32]
 8002b68:	f021 0101 	bic.w	r1, r1, #1
 8002b6c:	0409      	lsls	r1, r1, #16
 8002b6e:	0c09      	lsrs	r1, r1, #16
 8002b70:	8401      	strh	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b72:	8b02      	ldrh	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8002b74:	8c03      	ldrh	r3, [r0, #32]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 8002b76:	f022 02f3 	bic.w	r2, r2, #243	; 0xf3
 8002b7a:	0412      	lsls	r2, r2, #16
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b7c:	f023 030a 	bic.w	r3, r3, #10
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 8002b80:	0c12      	lsrs	r2, r2, #16
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b82:	041b      	lsls	r3, r3, #16
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002b84:	ea42 120c 	orr.w	r2, r2, ip, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b88:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8002b8a:	f043 0301 	orr.w	r3, r3, #1
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002b8e:	b292      	uxth	r2, r2

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8002b90:	431d      	orrs	r5, r3
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002b92:	4316      	orrs	r6, r2
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b94:	8306      	strh	r6, [r0, #24]
  TIMx->CCER = tmpccer;
 8002b96:	8405      	strh	r5, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
 8002b98:	8b03      	ldrh	r3, [r0, #24]
 8002b9a:	f023 030c 	bic.w	r3, r3, #12
 8002b9e:	041b      	lsls	r3, r3, #16
 8002ba0:	0c1b      	lsrs	r3, r3, #16
 8002ba2:	8303      	strh	r3, [r0, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8002ba4:	8b03      	ldrh	r3, [r0, #24]
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	431f      	orrs	r7, r3
 8002baa:	8307      	strh	r7, [r0, #24]
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8002bac:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8002bb0:	4770      	bx	lr
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8002bb2:	8c03      	ldrh	r3, [r0, #32]
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 8002bb4:	890f      	ldrh	r7, [r1, #8]
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002bb6:	88cc      	ldrh	r4, [r1, #6]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8002bb8:	f023 0301 	bic.w	r3, r3, #1
 8002bbc:	041b      	lsls	r3, r3, #16
 8002bbe:	0c1b      	lsrs	r3, r3, #16
 8002bc0:	8403      	strh	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bc2:	8b01      	ldrh	r1, [r0, #24]
  tmpccer = TIMx->CCER;
 8002bc4:	8c03      	ldrh	r3, [r0, #32]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 8002bc6:	f021 01f3 	bic.w	r1, r1, #243	; 0xf3
 8002bca:	0409      	lsls	r1, r1, #16
 8002bcc:	0c09      	lsrs	r1, r1, #16
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002bce:	f023 030a 	bic.w	r3, r3, #10
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002bd2:	ea41 1107 	orr.w	r1, r1, r7, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002bd6:	041b      	lsls	r3, r3, #16
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002bd8:	b289      	uxth	r1, r1

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002bda:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8002bdc:	f048 0801 	orr.w	r8, r8, #1
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002be0:	430a      	orrs	r2, r1

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8002be2:	ea43 0308 	orr.w	r3, r3, r8

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002be6:	8302      	strh	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002be8:	8403      	strh	r3, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
 8002bea:	8b03      	ldrh	r3, [r0, #24]
 8002bec:	f023 030c 	bic.w	r3, r3, #12
 8002bf0:	041b      	lsls	r3, r3, #16
 8002bf2:	0c1b      	lsrs	r3, r3, #16
 8002bf4:	8303      	strh	r3, [r0, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8002bf6:	8b03      	ldrh	r3, [r0, #24]
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	4323      	orrs	r3, r4
 8002bfc:	8303      	strh	r3, [r0, #24]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8002bfe:	8c03      	ldrh	r3, [r0, #32]
 8002c00:	f023 0310 	bic.w	r3, r3, #16
 8002c04:	041b      	lsls	r3, r3, #16
 8002c06:	0c1b      	lsrs	r3, r3, #16
 8002c08:	8403      	strh	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c0a:	8b02      	ldrh	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8002c0c:	8c03      	ldrh	r3, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8002c0e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002c12:	0512      	lsls	r2, r2, #20
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c14:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8002c18:	0d12      	lsrs	r2, r2, #20
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c1a:	041b      	lsls	r3, r3, #16
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8002c1c:	ea42 3207 	orr.w	r2, r2, r7, lsl #12
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c20:	0c1b      	lsrs	r3, r3, #16
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8002c22:	f043 0310 	orr.w	r3, r3, #16
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8002c26:	b292      	uxth	r2, r2
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8002c28:	ea43 1505 	orr.w	r5, r3, r5, lsl #4
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8002c2c:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c30:	8306      	strh	r6, [r0, #24]
  TIMx->CCER = tmpccer;
 8002c32:	8405      	strh	r5, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
 8002c34:	8b03      	ldrh	r3, [r0, #24]
 8002c36:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002c3a:	041b      	lsls	r3, r3, #16
 8002c3c:	0c1b      	lsrs	r3, r3, #16
 8002c3e:	8303      	strh	r3, [r0, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8002c40:	8b03      	ldrh	r3, [r0, #24]
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
 8002c48:	b2a4      	uxth	r4, r4
 8002c4a:	8304      	strh	r4, [r0, #24]
 8002c4c:	e7ae      	b.n	8002bac <TIM_PWMIConfig+0xc0>
 8002c4e:	bf00      	nop

08002c50 <TIM_GetCapture1>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 8002c50:	6b40      	ldr	r0, [r0, #52]	; 0x34
}
 8002c52:	4770      	bx	lr

08002c54 <TIM_GetCapture2>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 8002c54:	6b80      	ldr	r0, [r0, #56]	; 0x38
}
 8002c56:	4770      	bx	lr

08002c58 <TIM_GetCapture3>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 

  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
 8002c58:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
}
 8002c5a:	4770      	bx	lr

08002c5c <TIM_GetCapture4>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
 8002c5c:	6c00      	ldr	r0, [r0, #64]	; 0x40
}
 8002c5e:	4770      	bx	lr

08002c60 <TIM_SetIC1Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
 8002c60:	8b03      	ldrh	r3, [r0, #24]
 8002c62:	f023 030c 	bic.w	r3, r3, #12
 8002c66:	041b      	lsls	r3, r3, #16
 8002c68:	0c1b      	lsrs	r3, r3, #16
 8002c6a:	8303      	strh	r3, [r0, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8002c6c:	8b03      	ldrh	r3, [r0, #24]
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	430b      	orrs	r3, r1
 8002c72:	8303      	strh	r3, [r0, #24]
}
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop

08002c78 <TIM_SetIC2Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
 8002c78:	8b03      	ldrh	r3, [r0, #24]
 8002c7a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002c7e:	041b      	lsls	r3, r3, #16
 8002c80:	0c1b      	lsrs	r3, r3, #16
 8002c82:	8303      	strh	r3, [r0, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8002c84:	8b03      	ldrh	r3, [r0, #24]
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	8303      	strh	r3, [r0, #24]
}
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop

08002c94 <TIM_SetIC3Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC3PSC;
 8002c94:	8b83      	ldrh	r3, [r0, #28]
 8002c96:	f023 030c 	bic.w	r3, r3, #12
 8002c9a:	041b      	lsls	r3, r3, #16
 8002c9c:	0c1b      	lsrs	r3, r3, #16
 8002c9e:	8383      	strh	r3, [r0, #28]

  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 8002ca0:	8b83      	ldrh	r3, [r0, #28]
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	430b      	orrs	r3, r1
 8002ca6:	8383      	strh	r3, [r0, #28]
}
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop

08002cac <TIM_SetIC4Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC4PSC;
 8002cac:	8b83      	ldrh	r3, [r0, #28]
 8002cae:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002cb2:	041b      	lsls	r3, r3, #16
 8002cb4:	0c1b      	lsrs	r3, r3, #16
 8002cb6:	8383      	strh	r3, [r0, #28]

  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 8002cb8:	8b83      	ldrh	r3, [r0, #28]
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	8383      	strh	r3, [r0, #28]
}
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop

08002cc8 <TIM_BDTRConfig>:
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8002cc8:	f8b1 c002 	ldrh.w	ip, [r1, #2]
 8002ccc:	880b      	ldrh	r3, [r1, #0]
 8002cce:	898a      	ldrh	r2, [r1, #12]
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure that
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval None
  */
void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
{
 8002cd0:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8002cd2:	888f      	ldrh	r7, [r1, #4]
 8002cd4:	88ce      	ldrh	r6, [r1, #6]
 8002cd6:	890d      	ldrh	r5, [r1, #8]
 8002cd8:	894c      	ldrh	r4, [r1, #10]
 8002cda:	ea4c 0303 	orr.w	r3, ip, r3
 8002cde:	433b      	orrs	r3, r7
 8002ce0:	4333      	orrs	r3, r6
 8002ce2:	432b      	orrs	r3, r5
 8002ce4:	4323      	orrs	r3, r4
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
}
 8002cee:	bcf0      	pop	{r4, r5, r6, r7}
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop

08002cf4 <TIM_BDTRStructInit>:
  * @retval None
  */
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	8003      	strh	r3, [r0, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
 8002cf8:	8043      	strh	r3, [r0, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 8002cfa:	8083      	strh	r3, [r0, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
 8002cfc:	80c3      	strh	r3, [r0, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
 8002cfe:	8103      	strh	r3, [r0, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
 8002d00:	8143      	strh	r3, [r0, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 8002d02:	8183      	strh	r3, [r0, #12]
}
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop

08002d08 <TIM_CtrlPWMOutputs>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8002d08:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002d0c:	b921      	cbnz	r1, 8002d18 <TIM_CtrlPWMOutputs+0x10>
    TIMx->BDTR |= TIM_BDTR_MOE;
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
 8002d0e:	045b      	lsls	r3, r3, #17
 8002d10:	0c5b      	lsrs	r3, r3, #17
 8002d12:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 8002d16:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8002d18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 8002d26:	4770      	bx	lr

08002d28 <TIM_SelectCOM>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 8002d28:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002d2a:	b929      	cbnz	r1, 8002d38 <TIM_SelectCOM+0x10>
    TIMx->CR2 |= TIM_CR2_CCUS;
  }
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCUS;
 8002d2c:	f023 0304 	bic.w	r3, r3, #4
 8002d30:	041b      	lsls	r3, r3, #16
 8002d32:	0c1b      	lsrs	r3, r3, #16
 8002d34:	8083      	strh	r3, [r0, #4]
 8002d36:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	f043 0304 	orr.w	r3, r3, #4
 8002d3e:	8083      	strh	r3, [r0, #4]
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop

08002d44 <TIM_CCPreloadControl>:
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 8002d44:	8883      	ldrh	r3, [r0, #4]
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002d46:	b929      	cbnz	r1, 8002d54 <TIM_CCPreloadControl+0x10>
    TIMx->CR2 |= TIM_CR2_CCPC;
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCPC;
 8002d48:	f023 0301 	bic.w	r3, r3, #1
 8002d4c:	041b      	lsls	r3, r3, #16
 8002d4e:	0c1b      	lsrs	r3, r3, #16
 8002d50:	8083      	strh	r3, [r0, #4]
 8002d52:	4770      	bx	lr
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	f043 0301 	orr.w	r3, r3, #1
 8002d5a:	8083      	strh	r3, [r0, #4]
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop

08002d60 <TIM_ITConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8002d60:	8983      	ldrh	r3, [r0, #12]
 8002d62:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002d64:	b91a      	cbnz	r2, 8002d6e <TIM_ITConfig+0xe>
    TIMx->DIER |= TIM_IT;
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8002d66:	ea23 0101 	bic.w	r1, r3, r1
 8002d6a:	8181      	strh	r1, [r0, #12]
 8002d6c:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8002d6e:	4319      	orrs	r1, r3
 8002d70:	8181      	strh	r1, [r0, #12]
 8002d72:	4770      	bx	lr

08002d74 <TIM_GenerateEvent>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
 
  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
 8002d74:	8281      	strh	r1, [r0, #20]
}
 8002d76:	4770      	bx	lr

08002d78 <TIM_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));

  
  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
 8002d78:	8a03      	ldrh	r3, [r0, #16]
  {
    bitstatus = SET;
 8002d7a:	4219      	tst	r1, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8002d7c:	bf0c      	ite	eq
 8002d7e:	2000      	moveq	r0, #0
 8002d80:	2001      	movne	r0, #1
 8002d82:	4770      	bx	lr

08002d84 <TIM_ClearFlag>:
{  
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
 8002d84:	43c9      	mvns	r1, r1
 8002d86:	b289      	uxth	r1, r1
 8002d88:	8201      	strh	r1, [r0, #16]
}
 8002d8a:	4770      	bx	lr

08002d8c <TIM_GetITStatus>:
  uint16_t itstatus = 0x0, itenable = 0x0;
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8002d8c:	8a03      	ldrh	r3, [r0, #16]
  
  itenable = TIMx->DIER & TIM_IT;
 8002d8e:	8982      	ldrh	r2, [r0, #12]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8002d90:	4211      	tst	r1, r2
 8002d92:	bf0c      	ite	eq
 8002d94:	2000      	moveq	r0, #0
 8002d96:	2001      	movne	r0, #1
 8002d98:	4219      	tst	r1, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8002d9a:	bf0c      	ite	eq
 8002d9c:	2000      	moveq	r0, #0
 8002d9e:	f000 0001 	andne.w	r0, r0, #1
 8002da2:	4770      	bx	lr

08002da4 <TIM_ClearITPendingBit>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8002da4:	43c9      	mvns	r1, r1
 8002da6:	b289      	uxth	r1, r1
 8002da8:	8201      	strh	r1, [r0, #16]
}
 8002daa:	4770      	bx	lr

08002dac <TIM_DMAConfig>:
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase)); 
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));

  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
 8002dac:	430a      	orrs	r2, r1
 8002dae:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
}
 8002db2:	4770      	bx	lr

08002db4 <TIM_DMACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 8002db4:	8983      	ldrh	r3, [r0, #12]
 8002db6:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx)); 
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002db8:	b91a      	cbnz	r2, 8002dc2 <TIM_DMACmd+0xe>
    TIMx->DIER |= TIM_DMASource; 
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 8002dba:	ea23 0101 	bic.w	r1, r3, r1
 8002dbe:	8181      	strh	r1, [r0, #12]
 8002dc0:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 8002dc2:	4319      	orrs	r1, r3
 8002dc4:	8181      	strh	r1, [r0, #12]
 8002dc6:	4770      	bx	lr

08002dc8 <TIM_SelectCCDMA>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 8002dc8:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002dca:	b929      	cbnz	r1, 8002dd8 <TIM_SelectCCDMA+0x10>
    TIMx->CR2 |= TIM_CR2_CCDS;
  }
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCDS;
 8002dcc:	f023 0308 	bic.w	r3, r3, #8
 8002dd0:	041b      	lsls	r3, r3, #16
 8002dd2:	0c1b      	lsrs	r3, r3, #16
 8002dd4:	8083      	strh	r3, [r0, #4]
 8002dd6:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	f043 0308 	orr.w	r3, r3, #8
 8002dde:	8083      	strh	r3, [r0, #4]
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop

08002de4 <TIM_InternalClockConfig>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  (uint16_t)~TIM_SMCR_SMS;
 8002de4:	8903      	ldrh	r3, [r0, #8]
 8002de6:	f023 0307 	bic.w	r3, r3, #7
 8002dea:	041b      	lsls	r3, r3, #16
 8002dec:	0c1b      	lsrs	r3, r3, #16
 8002dee:	8103      	strh	r3, [r0, #8]
}
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop

08002df4 <TIM_ITRxExternalClockConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002df4:	8903      	ldrh	r3, [r0, #8]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 8002df6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dfa:	041b      	lsls	r3, r3, #16
 8002dfc:	0c1b      	lsrs	r3, r3, #16

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 8002dfe:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e00:	8103      	strh	r3, [r0, #8]

  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);

  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 8002e02:	8903      	ldrh	r3, [r0, #8]
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	f043 0307 	orr.w	r3, r3, #7
 8002e0a:	8103      	strh	r3, [r0, #8]
}
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop

08002e10 <TIM_TIxExternalClockConfig>:
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 8002e10:	2960      	cmp	r1, #96	; 0x60
  *          This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
 8002e12:	b430      	push	{r4, r5}
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8002e14:	8c04      	ldrh	r4, [r0, #32]
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 8002e16:	d026      	beq.n	8002e66 <TIM_TIxExternalClockConfig+0x56>
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8002e18:	f024 0401 	bic.w	r4, r4, #1
 8002e1c:	0424      	lsls	r4, r4, #16
 8002e1e:	0c24      	lsrs	r4, r4, #16
 8002e20:	8404      	strh	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e22:	8b05      	ldrh	r5, [r0, #24]
  tmpccer = TIMx->CCER;
 8002e24:	8c04      	ldrh	r4, [r0, #32]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 8002e26:	f025 05f3 	bic.w	r5, r5, #243	; 0xf3
 8002e2a:	042d      	lsls	r5, r5, #16
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e2c:	f024 040a 	bic.w	r4, r4, #10
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 8002e30:	0c2d      	lsrs	r5, r5, #16
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e32:	0424      	lsls	r4, r4, #16
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002e34:	f045 0501 	orr.w	r5, r5, #1

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e38:	0c24      	lsrs	r4, r4, #16
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002e3a:	ea45 1303 	orr.w	r3, r5, r3, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8002e3e:	f044 0401 	orr.w	r4, r4, #1
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002e42:	b29b      	uxth	r3, r3

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8002e44:	4322      	orrs	r2, r4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e46:	8303      	strh	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002e48:	8402      	strh	r2, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e4a:	8903      	ldrh	r3, [r0, #8]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 8002e4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e50:	041b      	lsls	r3, r3, #16
 8002e52:	0c1b      	lsrs	r3, r3, #16

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 8002e54:	4319      	orrs	r1, r3

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e56:	8101      	strh	r1, [r0, #8]
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
  }
  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 8002e58:	8903      	ldrh	r3, [r0, #8]
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	f043 0307 	orr.w	r3, r3, #7
 8002e60:	8103      	strh	r3, [r0, #8]
}
 8002e62:	bc30      	pop	{r4, r5}
 8002e64:	4770      	bx	lr
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8002e66:	f024 0410 	bic.w	r4, r4, #16
 8002e6a:	0424      	lsls	r4, r4, #16
 8002e6c:	0c24      	lsrs	r4, r4, #16
 8002e6e:	8404      	strh	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e70:	8b05      	ldrh	r5, [r0, #24]
  tmpccer = TIMx->CCER;
 8002e72:	8c04      	ldrh	r4, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8002e74:	f425 7540 	bic.w	r5, r5, #768	; 0x300
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e78:	f024 04a0 	bic.w	r4, r4, #160	; 0xa0
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8002e7c:	052d      	lsls	r5, r5, #20
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e7e:	0424      	lsls	r4, r4, #16
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8002e80:	0d2d      	lsrs	r5, r5, #20
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e82:	0c24      	lsrs	r4, r4, #16
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8002e84:	f445 7580 	orr.w	r5, r5, #256	; 0x100
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8002e88:	f044 0410 	orr.w	r4, r4, #16
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8002e8c:	ea45 3303 	orr.w	r3, r5, r3, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8002e90:	ea44 1202 	orr.w	r2, r4, r2, lsl #4
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8002e94:	b29b      	uxth	r3, r3

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8002e96:	b292      	uxth	r2, r2

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e98:	8303      	strh	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002e9a:	8402      	strh	r2, [r0, #32]
 8002e9c:	e7d5      	b.n	8002e4a <TIM_TIxExternalClockConfig+0x3a>
 8002e9e:	bf00      	nop

08002ea0 <TIM_ETRClockMode1Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                            uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 8002ea0:	b410      	push	{r4}
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
 8002ea2:	8904      	ldrh	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
 8002ea4:	b2e4      	uxtb	r4, r4

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 8002ea6:	430c      	orrs	r4, r1
 8002ea8:	4314      	orrs	r4, r2
 8002eaa:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 8002eae:	b2a4      	uxth	r4, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002eb0:	8104      	strh	r4, [r0, #8]
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002eb2:	8903      	ldrh	r3, [r0, #8]

  /* Reset the SMS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;

  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;
 8002eb4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002eb8:	041b      	lsls	r3, r3, #16
 8002eba:	0c1b      	lsrs	r3, r3, #16

  /* Select the Trigger selection : ETRF */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
  tmpsmcr |= TIM_TS_ETRF;
 8002ebc:	f043 0377 	orr.w	r3, r3, #119	; 0x77

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ec0:	8103      	strh	r3, [r0, #8]
}
 8002ec2:	bc10      	pop	{r4}
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop

08002ec8 <TIM_ETRClockMode2Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 8002ec8:	b410      	push	{r4}
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
 8002eca:	8904      	ldrh	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
 8002ecc:	b2e4      	uxtb	r4, r4

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 8002ece:	430c      	orrs	r4, r1
 8002ed0:	4314      	orrs	r4, r2
 8002ed2:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 8002ed6:	b2a4      	uxth	r4, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ed8:	8104      	strh	r4, [r0, #8]

  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);

  /* Enable the External clock mode2 */
  TIMx->SMCR |= TIM_SMCR_ECE;
 8002eda:	8903      	ldrh	r3, [r0, #8]
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ee2:	8103      	strh	r3, [r0, #8]
}
 8002ee4:	bc10      	pop	{r4}
 8002ee6:	4770      	bx	lr

08002ee8 <TIM_SelectInputTrigger>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ee8:	8903      	ldrh	r3, [r0, #8]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 8002eea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eee:	041b      	lsls	r3, r3, #16
 8002ef0:	0c1b      	lsrs	r3, r3, #16

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 8002ef2:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ef4:	8103      	strh	r3, [r0, #8]
}
 8002ef6:	4770      	bx	lr

08002ef8 <TIM_SelectOutputTrigger>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
 8002ef8:	8883      	ldrh	r3, [r0, #4]
 8002efa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002efe:	041b      	lsls	r3, r3, #16
 8002f00:	0c1b      	lsrs	r3, r3, #16
 8002f02:	8083      	strh	r3, [r0, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 8002f04:	8883      	ldrh	r3, [r0, #4]
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	430b      	orrs	r3, r1
 8002f0a:	8083      	strh	r3, [r0, #4]
}
 8002f0c:	4770      	bx	lr
 8002f0e:	bf00      	nop

08002f10 <TIM_SelectSlaveMode>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));

  /* Reset the SMS Bits */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_SMS;
 8002f10:	8903      	ldrh	r3, [r0, #8]
 8002f12:	f023 0307 	bic.w	r3, r3, #7
 8002f16:	041b      	lsls	r3, r3, #16
 8002f18:	0c1b      	lsrs	r3, r3, #16
 8002f1a:	8103      	strh	r3, [r0, #8]

  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
 8002f1c:	8903      	ldrh	r3, [r0, #8]
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	430b      	orrs	r3, r1
 8002f22:	8103      	strh	r3, [r0, #8]
}
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop

08002f28 <TIM_SelectMasterSlaveMode>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));

  /* Reset the MSM Bit */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_MSM;
 8002f28:	8903      	ldrh	r3, [r0, #8]
 8002f2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f2e:	041b      	lsls	r3, r3, #16
 8002f30:	0c1b      	lsrs	r3, r3, #16
 8002f32:	8103      	strh	r3, [r0, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
 8002f34:	8903      	ldrh	r3, [r0, #8]
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	430b      	orrs	r3, r1
 8002f3a:	8103      	strh	r3, [r0, #8]
}
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop

08002f40 <TIM_ETRConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                   uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 8002f40:	b410      	push	{r4}
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
 8002f42:	8904      	ldrh	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
 8002f44:	b2e4      	uxtb	r4, r4

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 8002f46:	430c      	orrs	r4, r1
 8002f48:	4314      	orrs	r4, r2
 8002f4a:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 8002f4e:	b2a4      	uxth	r4, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f50:	8104      	strh	r4, [r0, #8]
}
 8002f52:	bc10      	pop	{r4}
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop

08002f58 <TIM_EncoderInterfaceConfig>:
  *            @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
 8002f58:	b470      	push	{r4, r5, r6}
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f5a:	8905      	ldrh	r5, [r0, #8]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8002f5c:	8b04      	ldrh	r4, [r0, #24]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f5e:	8c06      	ldrh	r6, [r0, #32]
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 8002f60:	f424 7440 	bic.w	r4, r4, #768	; 0x300
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
 8002f64:	f026 0622 	bic.w	r6, r6, #34	; 0x22
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 8002f68:	f024 0403 	bic.w	r4, r4, #3
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
 8002f6c:	0436      	lsls	r6, r6, #16

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 8002f6e:	f025 0507 	bic.w	r5, r5, #7
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 8002f72:	0424      	lsls	r4, r4, #16
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
 8002f74:	0c36      	lsrs	r6, r6, #16

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 8002f76:	042d      	lsls	r5, r5, #16
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 8002f78:	0c24      	lsrs	r4, r4, #16
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 8002f7a:	4316      	orrs	r6, r2

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 8002f7c:	0c2d      	lsrs	r5, r5, #16
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 8002f7e:	f444 7480 	orr.w	r4, r4, #256	; 0x100

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 8002f82:	ea46 1603 	orr.w	r6, r6, r3, lsl #4
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
  tmpsmcr |= TIM_EncoderMode;
 8002f86:	4329      	orrs	r1, r5

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 8002f88:	f044 0401 	orr.w	r4, r4, #1

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 8002f8c:	b2b6      	uxth	r6, r6

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f8e:	8101      	strh	r1, [r0, #8]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8002f90:	8304      	strh	r4, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f92:	8406      	strh	r6, [r0, #32]
}
 8002f94:	bc70      	pop	{r4, r5, r6}
 8002f96:	4770      	bx	lr

08002f98 <TIM_SelectHallSensor>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 8002f98:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002f9a:	b929      	cbnz	r1, 8002fa8 <TIM_SelectHallSensor+0x10>
    TIMx->CR2 |= TIM_CR2_TI1S;
  }
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_TI1S;
 8002f9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fa0:	041b      	lsls	r3, r3, #16
 8002fa2:	0c1b      	lsrs	r3, r3, #16
 8002fa4:	8083      	strh	r3, [r0, #4]
 8002fa6:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fae:	8083      	strh	r3, [r0, #4]
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop

08002fb4 <TIM_RemapConfig>:
 /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_REMAP(TIM_Remap));

  /* Set the Timer remapping configuration */
  TIMx->OR =  TIM_Remap;
 8002fb4:	f8a0 1050 	strh.w	r1, [r0, #80]	; 0x50
}
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop

08002fbc <USART_DeInit>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 8002fbc:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 8002fbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fc2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002fc6:	4298      	cmp	r0, r3
 8002fc8:	d028      	beq.n	800301c <USART_DeInit+0x60>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
  }
  else if (USARTx == USART2)
 8002fca:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8002fce:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002fd2:	4298      	cmp	r0, r3
 8002fd4:	d02c      	beq.n	8003030 <USART_DeInit+0x74>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
  }
  else if (USARTx == USART3)
 8002fd6:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8002fda:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002fde:	4298      	cmp	r0, r3
 8002fe0:	d032      	beq.n	8003048 <USART_DeInit+0x8c>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
  }    
  else if (USARTx == UART4)
 8002fe2:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
 8002fe6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002fea:	4298      	cmp	r0, r3
 8002fec:	d038      	beq.n	8003060 <USART_DeInit+0xa4>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
  }
  else if (USARTx == UART5)
 8002fee:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8002ff2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002ff6:	4298      	cmp	r0, r3
 8002ff8:	d03e      	beq.n	8003078 <USART_DeInit+0xbc>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
  }     
  else
  {
    if (USARTx == USART6)
 8002ffa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002ffe:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003002:	4298      	cmp	r0, r3
 8003004:	d000      	beq.n	8003008 <USART_DeInit+0x4c>
 8003006:	bd08      	pop	{r3, pc}
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
 8003008:	2020      	movs	r0, #32
 800300a:	2101      	movs	r1, #1
 800300c:	f7fe fe54 	bl	8001cb8 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 8003010:	2020      	movs	r0, #32
 8003012:	2100      	movs	r1, #0
    }
  }
}
 8003014:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (USARTx == USART6)
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 8003018:	f7fe be4e 	b.w	8001cb8 <RCC_APB2PeriphResetCmd>
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 800301c:	2010      	movs	r0, #16
 800301e:	2101      	movs	r1, #1
 8003020:	f7fe fe4a 	bl	8001cb8 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 8003024:	2010      	movs	r0, #16
 8003026:	2100      	movs	r1, #0
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
    }
  }
}
 8003028:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 800302c:	f7fe be44 	b.w	8001cb8 <RCC_APB2PeriphResetCmd>
  }
  else if (USARTx == USART2)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 8003030:	2101      	movs	r1, #1
 8003032:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003036:	f7fe fe31 	bl	8001c9c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 800303a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800303e:	2100      	movs	r1, #0
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
    }
  }
}
 8003040:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
  }
  else if (USARTx == USART2)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 8003044:	f7fe be2a 	b.w	8001c9c <RCC_APB1PeriphResetCmd>
  }
  else if (USARTx == USART3)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 8003048:	2101      	movs	r1, #1
 800304a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800304e:	f7fe fe25 	bl	8001c9c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 8003052:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8003056:	2100      	movs	r1, #0
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
    }
  }
}
 8003058:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
  }
  else if (USARTx == USART3)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 800305c:	f7fe be1e 	b.w	8001c9c <RCC_APB1PeriphResetCmd>
  }    
  else if (USARTx == UART4)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 8003060:	2101      	movs	r1, #1
 8003062:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003066:	f7fe fe19 	bl	8001c9c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 800306a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800306e:	2100      	movs	r1, #0
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
    }
  }
}
 8003070:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
  }    
  else if (USARTx == UART4)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 8003074:	f7fe be12 	b.w	8001c9c <RCC_APB1PeriphResetCmd>
  }
  else if (USARTx == UART5)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 8003078:	2101      	movs	r1, #1
 800307a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800307e:	f7fe fe0d 	bl	8001c9c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 8003082:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003086:	2100      	movs	r1, #0
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
    }
  }
}
 8003088:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
  }
  else if (USARTx == UART5)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 800308c:	f7fe be06 	b.w	8001c9c <RCC_APB1PeriphResetCmd>

08003090 <USART_Init>:
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8003090:	8a02      	ldrh	r2, [r0, #16]
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8003092:	88cb      	ldrh	r3, [r1, #6]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8003094:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003098:	0412      	lsls	r2, r2, #16
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 800309a:	b5f0      	push	{r4, r5, r6, r7, lr}

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800309c:	0c12      	lsrs	r2, r2, #16
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 800309e:	4604      	mov	r4, r0
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80030a0:	431a      	orrs	r2, r3

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80030a2:	8948      	ldrh	r0, [r1, #10]
 80030a4:	890f      	ldrh	r7, [r1, #8]
 80030a6:	888e      	ldrh	r6, [r1, #4]
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80030a8:	460d      	mov	r5, r1
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 80030aa:	8989      	ldrh	r1, [r1, #12]
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80030ac:	8222      	strh	r2, [r4, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80030ae:	89a3      	ldrh	r3, [r4, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 80030b0:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80030b4:	f023 030c 	bic.w	r3, r3, #12

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80030b8:	ea47 0206 	orr.w	r2, r7, r6

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 80030bc:	041b      	lsls	r3, r3, #16

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80030be:	4302      	orrs	r2, r0
 80030c0:	b292      	uxth	r2, r2

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 80030c2:	0c1b      	lsrs	r3, r3, #16
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 80030c4:	4313      	orrs	r3, r2
 80030c6:	81a3      	strh	r3, [r4, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 80030c8:	8aa3      	ldrh	r3, [r4, #20]

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 80030ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030ce:	041b      	lsls	r3, r3, #16
 80030d0:	0c1b      	lsrs	r3, r3, #16
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80030d2:	b085      	sub	sp, #20
  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 80030d4:	430b      	orrs	r3, r1
 80030d6:	82a3      	strh	r3, [r4, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 80030d8:	4668      	mov	r0, sp
 80030da:	f7fe fceb 	bl	8001ab4 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 80030de:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 80030e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030e6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80030ea:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80030ee:	429c      	cmp	r4, r3
 80030f0:	bf18      	it	ne
 80030f2:	4294      	cmpne	r4, r2
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80030f4:	89a2      	ldrh	r2, [r4, #12]
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);

  if ((USARTx == USART1) || (USARTx == USART6))
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 80030f6:	bf0c      	ite	eq
 80030f8:	9b03      	ldreq	r3, [sp, #12]
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 80030fa:	9b02      	ldrne	r3, [sp, #8]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80030fc:	b212      	sxth	r2, r2
 80030fe:	2a00      	cmp	r2, #0
 8003100:	db21      	blt.n	8003146 <USART_Init+0xb6>
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8003102:	6828      	ldr	r0, [r5, #0]
 8003104:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003108:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800310c:	0080      	lsls	r0, r0, #2
 800310e:	fbb3 f1f0 	udiv	r1, r3, r0
  }
  tmpreg = (integerdivider / 100) << 4;
 8003112:	f248 531f 	movw	r3, #34079	; 0x851f

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8003116:	89a0      	ldrh	r0, [r4, #12]
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
  }
  tmpreg = (integerdivider / 100) << 4;
 8003118:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 800311c:	fba3 5201 	umull	r5, r2, r3, r1
 8003120:	0952      	lsrs	r2, r2, #5

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8003122:	b200      	sxth	r0, r0
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
  }
  tmpreg = (integerdivider / 100) << 4;

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8003124:	0116      	lsls	r6, r2, #4
 8003126:	2564      	movs	r5, #100	; 0x64

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8003128:	2800      	cmp	r0, #0
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
  }
  tmpreg = (integerdivider / 100) << 4;

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 800312a:	fb02 1215 	mls	r2, r2, r5, r1

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800312e:	db13      	blt.n	8003158 <USART_Init+0xc8>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8003130:	0112      	lsls	r2, r2, #4
 8003132:	3232      	adds	r2, #50	; 0x32
 8003134:	fba3 5302 	umull	r5, r3, r3, r2
 8003138:	f3c3 1343 	ubfx	r3, r3, #5, #4
 800313c:	4333      	orrs	r3, r6
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 800313e:	b29b      	uxth	r3, r3
 8003140:	8123      	strh	r3, [r4, #8]
}
 8003142:	b005      	add	sp, #20
 8003144:	bdf0      	pop	{r4, r5, r6, r7, pc}
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8003146:	682a      	ldr	r2, [r5, #0]
 8003148:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800314c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003150:	0052      	lsls	r2, r2, #1
 8003152:	fbb3 f1f2 	udiv	r1, r3, r2
 8003156:	e7dc      	b.n	8003112 <USART_Init+0x82>
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8003158:	00d2      	lsls	r2, r2, #3
 800315a:	3232      	adds	r2, #50	; 0x32
 800315c:	fba3 1302 	umull	r1, r3, r3, r2
 8003160:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8003164:	4333      	orrs	r3, r6
 8003166:	e7ea      	b.n	800313e <USART_Init+0xae>

08003168 <USART_StructInit>:
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 8003168:	f44f 5216 	mov.w	r2, #9600	; 0x2580
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 800316c:	2300      	movs	r3, #0
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 800316e:	6002      	str	r2, [r0, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
  USART_InitStruct->USART_Parity = USART_Parity_No ;
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8003170:	220c      	movs	r2, #12
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 8003172:	8083      	strh	r3, [r0, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 8003174:	80c3      	strh	r3, [r0, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 8003176:	8103      	strh	r3, [r0, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8003178:	8142      	strh	r2, [r0, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 800317a:	8183      	strh	r3, [r0, #12]
}
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop

08003180 <USART_ClockInit>:
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8003180:	880a      	ldrh	r2, [r1, #0]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8003182:	8a03      	ldrh	r3, [r0, #16]
  *         contains the configuration information for the specified  USART peripheral.
  * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 8003184:	b430      	push	{r4, r5}
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8003186:	884d      	ldrh	r5, [r1, #2]
 8003188:	888c      	ldrh	r4, [r1, #4]
 800318a:	88c9      	ldrh	r1, [r1, #6]
 800318c:	432a      	orrs	r2, r5
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 800318e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8003192:	4322      	orrs	r2, r4
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 8003194:	041b      	lsls	r3, r3, #16
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8003196:	430a      	orrs	r2, r1
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 8003198:	0c1b      	lsrs	r3, r3, #16
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 800319a:	b292      	uxth	r2, r2
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 800319c:	4313      	orrs	r3, r2
 800319e:	8203      	strh	r3, [r0, #16]
}
 80031a0:	bc30      	pop	{r4, r5}
 80031a2:	4770      	bx	lr

080031a4 <USART_ClockStructInit>:
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 80031a4:	2300      	movs	r3, #0
 80031a6:	8003      	strh	r3, [r0, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 80031a8:	8043      	strh	r3, [r0, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 80031aa:	8083      	strh	r3, [r0, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 80031ac:	80c3      	strh	r3, [r0, #6]
}
 80031ae:	4770      	bx	lr

080031b0 <USART_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 80031b0:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80031b2:	b929      	cbnz	r1, 80031c0 <USART_Cmd+0x10>
    USARTx->CR1 |= USART_CR1_UE;
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 80031b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80031b8:	041b      	lsls	r3, r3, #16
 80031ba:	0c1b      	lsrs	r3, r3, #16
 80031bc:	8183      	strh	r3, [r0, #12]
 80031be:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80031c6:	8183      	strh	r3, [r0, #12]
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop

080031cc <USART_SetPrescaler>:
{ 
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= USART_GTPR_GT;
 80031cc:	8b03      	ldrh	r3, [r0, #24]
 80031ce:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80031d2:	8303      	strh	r3, [r0, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 80031d4:	8b03      	ldrh	r3, [r0, #24]
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	430b      	orrs	r3, r1
 80031da:	8303      	strh	r3, [r0, #24]
}
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop

080031e0 <USART_OverSampling8Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 80031e0:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80031e2:	b919      	cbnz	r1, 80031ec <USART_OverSampling8Cmd+0xc>
    USARTx->CR1 |= USART_CR1_OVER8;
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
 80031e4:	045b      	lsls	r3, r3, #17
 80031e6:	0c5b      	lsrs	r3, r3, #17
 80031e8:	8183      	strh	r3, [r0, #12]
 80031ea:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 80031ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	8183      	strh	r3, [r0, #12]
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop

080031fc <USART_OneBitMethodCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 80031fc:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80031fe:	b929      	cbnz	r1, 800320c <USART_OneBitMethodCmd+0x10>
    USARTx->CR3 |= USART_CR3_ONEBIT;
  }
  else
  {
    /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
 8003200:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003204:	041b      	lsls	r3, r3, #16
 8003206:	0c1b      	lsrs	r3, r3, #16
 8003208:	8283      	strh	r3, [r0, #20]
 800320a:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 800320c:	b29b      	uxth	r3, r3
 800320e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003212:	8283      	strh	r3, [r0, #20]
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop

08003218 <USART_SendData>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8003218:	05c9      	lsls	r1, r1, #23
 800321a:	0dc9      	lsrs	r1, r1, #23
 800321c:	8081      	strh	r1, [r0, #4]
}
 800321e:	4770      	bx	lr

08003220 <USART_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8003220:	8880      	ldrh	r0, [r0, #4]
}
 8003222:	05c0      	lsls	r0, r0, #23
 8003224:	0dc0      	lsrs	r0, r0, #23
 8003226:	4770      	bx	lr

08003228 <USART_SetAddress>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
 8003228:	8a03      	ldrh	r3, [r0, #16]
 800322a:	f023 030f 	bic.w	r3, r3, #15
 800322e:	041b      	lsls	r3, r3, #16
 8003230:	0c1b      	lsrs	r3, r3, #16
 8003232:	8203      	strh	r3, [r0, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
 8003234:	8a03      	ldrh	r3, [r0, #16]
 8003236:	b29b      	uxth	r3, r3
 8003238:	430b      	orrs	r3, r1
 800323a:	8203      	strh	r3, [r0, #16]
}
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop

08003240 <USART_ReceiverWakeUpCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 8003240:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
 8003242:	b929      	cbnz	r1, 8003250 <USART_ReceiverWakeUpCmd+0x10>
    USARTx->CR1 |= USART_CR1_RWU;
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
 8003244:	f023 0302 	bic.w	r3, r3, #2
 8003248:	041b      	lsls	r3, r3, #16
 800324a:	0c1b      	lsrs	r3, r3, #16
 800324c:	8183      	strh	r3, [r0, #12]
 800324e:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 8003250:	b29b      	uxth	r3, r3
 8003252:	f043 0302 	orr.w	r3, r3, #2
 8003256:	8183      	strh	r3, [r0, #12]
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop

0800325c <USART_WakeUpConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
 800325c:	8983      	ldrh	r3, [r0, #12]
 800325e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003262:	041b      	lsls	r3, r3, #16
 8003264:	0c1b      	lsrs	r3, r3, #16
 8003266:	8183      	strh	r3, [r0, #12]
  USARTx->CR1 |= USART_WakeUp;
 8003268:	8983      	ldrh	r3, [r0, #12]
 800326a:	b29b      	uxth	r3, r3
 800326c:	430b      	orrs	r3, r1
 800326e:	8183      	strh	r3, [r0, #12]
}
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop

08003274 <USART_LINBreakDetectLengthConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
 8003274:	8a03      	ldrh	r3, [r0, #16]
 8003276:	f023 0320 	bic.w	r3, r3, #32
 800327a:	041b      	lsls	r3, r3, #16
 800327c:	0c1b      	lsrs	r3, r3, #16
 800327e:	8203      	strh	r3, [r0, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 8003280:	8a03      	ldrh	r3, [r0, #16]
 8003282:	b29b      	uxth	r3, r3
 8003284:	430b      	orrs	r3, r1
 8003286:	8203      	strh	r3, [r0, #16]
}
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop

0800328c <USART_LINCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 800328c:	8a03      	ldrh	r3, [r0, #16]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800328e:	b929      	cbnz	r1, 800329c <USART_LINCmd+0x10>
    USARTx->CR2 |= USART_CR2_LINEN;
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
 8003290:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003294:	041b      	lsls	r3, r3, #16
 8003296:	0c1b      	lsrs	r3, r3, #16
 8003298:	8203      	strh	r3, [r0, #16]
 800329a:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 800329c:	b29b      	uxth	r3, r3
 800329e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032a2:	8203      	strh	r3, [r0, #16]
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop

080032a8 <USART_SendBreak>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= USART_CR1_SBK;
 80032a8:	8983      	ldrh	r3, [r0, #12]
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	f043 0301 	orr.w	r3, r3, #1
 80032b0:	8183      	strh	r3, [r0, #12]
}
 80032b2:	4770      	bx	lr

080032b4 <USART_HalfDuplexCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 80032b4:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80032b6:	b929      	cbnz	r1, 80032c4 <USART_HalfDuplexCmd+0x10>
    USARTx->CR3 |= USART_CR3_HDSEL;
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
 80032b8:	f023 0308 	bic.w	r3, r3, #8
 80032bc:	041b      	lsls	r3, r3, #16
 80032be:	0c1b      	lsrs	r3, r3, #16
 80032c0:	8283      	strh	r3, [r0, #20]
 80032c2:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	f043 0308 	orr.w	r3, r3, #8
 80032ca:	8283      	strh	r3, [r0, #20]
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop

080032d0 <USART_SetGuardTime>:
{    
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= USART_GTPR_PSC;
 80032d0:	8b03      	ldrh	r3, [r0, #24]
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	8303      	strh	r3, [r0, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 80032d6:	8b03      	ldrh	r3, [r0, #24]
 80032d8:	b29b      	uxth	r3, r3
 80032da:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80032de:	8303      	strh	r3, [r0, #24]
}
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop

080032e4 <USART_SmartCardCmd>:
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 80032e4:	8a83      	ldrh	r3, [r0, #20]
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80032e6:	b929      	cbnz	r1, 80032f4 <USART_SmartCardCmd+0x10>
    USARTx->CR3 |= USART_CR3_SCEN;
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
 80032e8:	f023 0320 	bic.w	r3, r3, #32
 80032ec:	041b      	lsls	r3, r3, #16
 80032ee:	0c1b      	lsrs	r3, r3, #16
 80032f0:	8283      	strh	r3, [r0, #20]
 80032f2:	4770      	bx	lr
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	f043 0320 	orr.w	r3, r3, #32
 80032fa:	8283      	strh	r3, [r0, #20]
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop

08003300 <USART_SmartCardNACKCmd>:
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 8003300:	8a83      	ldrh	r3, [r0, #20]
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003302:	b929      	cbnz	r1, 8003310 <USART_SmartCardNACKCmd+0x10>
    USARTx->CR3 |= USART_CR3_NACK;
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
 8003304:	f023 0310 	bic.w	r3, r3, #16
 8003308:	041b      	lsls	r3, r3, #16
 800330a:	0c1b      	lsrs	r3, r3, #16
 800330c:	8283      	strh	r3, [r0, #20]
 800330e:	4770      	bx	lr
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 8003310:	b29b      	uxth	r3, r3
 8003312:	f043 0310 	orr.w	r3, r3, #16
 8003316:	8283      	strh	r3, [r0, #20]
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop

0800331c <USART_IrDAConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
 800331c:	8a83      	ldrh	r3, [r0, #20]
 800331e:	f023 0304 	bic.w	r3, r3, #4
 8003322:	041b      	lsls	r3, r3, #16
 8003324:	0c1b      	lsrs	r3, r3, #16
 8003326:	8283      	strh	r3, [r0, #20]
  USARTx->CR3 |= USART_IrDAMode;
 8003328:	8a83      	ldrh	r3, [r0, #20]
 800332a:	b29b      	uxth	r3, r3
 800332c:	430b      	orrs	r3, r1
 800332e:	8283      	strh	r3, [r0, #20]
}
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop

08003334 <USART_IrDACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 8003334:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 8003336:	b929      	cbnz	r1, 8003344 <USART_IrDACmd+0x10>
    USARTx->CR3 |= USART_CR3_IREN;
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
 8003338:	f023 0302 	bic.w	r3, r3, #2
 800333c:	041b      	lsls	r3, r3, #16
 800333e:	0c1b      	lsrs	r3, r3, #16
 8003340:	8283      	strh	r3, [r0, #20]
 8003342:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 8003344:	b29b      	uxth	r3, r3
 8003346:	f043 0302 	orr.w	r3, r3, #2
 800334a:	8283      	strh	r3, [r0, #20]
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop

08003350 <USART_DMACmd>:

  if (NewState != DISABLE)
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8003350:	8a83      	ldrh	r3, [r0, #20]
 8003352:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 8003354:	b91a      	cbnz	r2, 800335e <USART_DMACmd+0xe>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 8003356:	ea23 0101 	bic.w	r1, r3, r1
 800335a:	8281      	strh	r1, [r0, #20]
 800335c:	4770      	bx	lr

  if (NewState != DISABLE)
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 800335e:	4319      	orrs	r1, r3
 8003360:	8281      	strh	r1, [r0, #20]
 8003362:	4770      	bx	lr

08003364 <USART_ITConfig>:

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8003364:	f001 031f 	and.w	r3, r1, #31
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8003368:	b410      	push	{r4}
  } 
    
  usartxbase = (uint32_t)USARTx;

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 800336a:	f3c1 1142 	ubfx	r1, r1, #5, #3

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
 800336e:	2401      	movs	r4, #1
 8003370:	fa14 f303 	lsls.w	r3, r4, r3
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8003374:	42a1      	cmp	r1, r4
 8003376:	d00d      	beq.n	8003394 <USART_ITConfig+0x30>
  {
    usartxbase += 0x0C;
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8003378:	2902      	cmp	r1, #2
 800337a:	d00d      	beq.n	8003398 <USART_ITConfig+0x34>
  {
    usartxbase += 0x10;
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 800337c:	3014      	adds	r0, #20
  }
  if (NewState != DISABLE)
 800337e:	b92a      	cbnz	r2, 800338c <USART_ITConfig+0x28>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8003380:	6802      	ldr	r2, [r0, #0]
 8003382:	ea22 0303 	bic.w	r3, r2, r3
 8003386:	6003      	str	r3, [r0, #0]
  }
}
 8003388:	bc10      	pop	{r4}
 800338a:	4770      	bx	lr
  {
    usartxbase += 0x14; 
  }
  if (NewState != DISABLE)
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 800338c:	6802      	ldr	r2, [r0, #0]
 800338e:	4313      	orrs	r3, r2
 8003390:	6003      	str	r3, [r0, #0]
 8003392:	e7f9      	b.n	8003388 <USART_ITConfig+0x24>
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
  {
    usartxbase += 0x0C;
 8003394:	300c      	adds	r0, #12
 8003396:	e7f2      	b.n	800337e <USART_ITConfig+0x1a>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
  {
    usartxbase += 0x10;
 8003398:	3010      	adds	r0, #16
 800339a:	e7f0      	b.n	800337e <USART_ITConfig+0x1a>

0800339c <USART_GetFlagStatus>:
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 800339c:	8803      	ldrh	r3, [r0, #0]
  {
    bitstatus = SET;
 800339e:	4219      	tst	r1, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 80033a0:	bf0c      	ite	eq
 80033a2:	2000      	moveq	r0, #0
 80033a4:	2001      	movne	r0, #1
 80033a6:	4770      	bx	lr

080033a8 <USART_ClearFlag>:
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
       
  USARTx->SR = (uint16_t)~USART_FLAG;
 80033a8:	43c9      	mvns	r1, r1
 80033aa:	b289      	uxth	r1, r1
 80033ac:	8001      	strh	r1, [r0, #0]
}
 80033ae:	4770      	bx	lr

080033b0 <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 80033b0:	b410      	push	{r4}
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 80033b2:	f001 021f 	and.w	r2, r1, #31
  itmask = (uint32_t)0x01 << itmask;
 80033b6:	2401      	movs	r4, #1
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 80033b8:	f3c1 1342 	ubfx	r3, r1, #5, #3
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
 80033bc:	4094      	lsls	r4, r2
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d016      	beq.n	80033f0 <USART_GetITStatus+0x40>
  {
    itmask &= USARTx->CR1;
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 80033c2:	2b02      	cmp	r3, #2
  {
    itmask &= USARTx->CR2;
 80033c4:	bf0c      	ite	eq
 80033c6:	8a02      	ldrheq	r2, [r0, #16]
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 80033c8:	8a82      	ldrhne	r2, [r0, #20]
 80033ca:	b292      	uxth	r2, r2
 80033cc:	4022      	ands	r2, r4
  }
  
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
  bitpos &= USARTx->SR;
 80033ce:	8803      	ldrh	r3, [r0, #0]
  {
    itmask &= USARTx->CR3;
  }
  
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
 80033d0:	2401      	movs	r4, #1
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
  }
  
  bitpos = USART_IT >> 0x08;
 80033d2:	0a09      	lsrs	r1, r1, #8
  bitpos = (uint32_t)0x01 << bitpos;
 80033d4:	fa14 f101 	lsls.w	r1, r4, r1
  bitpos &= USARTx->SR;
 80033d8:	b29b      	uxth	r3, r3
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 80033da:	4219      	tst	r1, r3
 80033dc:	bf0c      	ite	eq
 80033de:	2300      	moveq	r3, #0
 80033e0:	2301      	movne	r3, #1
  {
    bitstatus = RESET;
  }
  
  return bitstatus;  
}
 80033e2:	2a00      	cmp	r2, #0
 80033e4:	bf0c      	ite	eq
 80033e6:	2000      	moveq	r0, #0
 80033e8:	f003 0001 	andne.w	r0, r3, #1
 80033ec:	bc10      	pop	{r4}
 80033ee:	4770      	bx	lr
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
  {
    itmask &= USARTx->CR1;
 80033f0:	8982      	ldrh	r2, [r0, #12]
 80033f2:	b292      	uxth	r2, r2
 80033f4:	4022      	ands	r2, r4
 80033f6:	e7ea      	b.n	80033ce <USART_GetITStatus+0x1e>

080033f8 <USART_ClearITPendingBit>:
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 80033f8:	0a09      	lsrs	r1, r1, #8
 80033fa:	2301      	movs	r3, #1
 80033fc:	fa13 f101 	lsls.w	r1, r3, r1
  USARTx->SR = (uint16_t)~itmask;
 8003400:	43c9      	mvns	r1, r1
 8003402:	b289      	uxth	r1, r1
 8003404:	8001      	strh	r1, [r0, #0]
}
 8003406:	4770      	bx	lr

08003408 <ST7032i_command>:

 0x0F, 0b10000, //
 };
 */

void ST7032i_command(ST7032i * lcd, uint8_t value) {
 8003408:	b500      	push	{lr}
 800340a:	b083      	sub	sp, #12
	uint8_t buf[2];
	buf[0] = (byte) 0x00;
 800340c:	2300      	movs	r3, #0
	buf[1] = value;
 800340e:	f88d 1005 	strb.w	r1, [sp, #5]
	i2c_transmit(lcd->i2c_address, buf, 2);
 8003412:	2202      	movs	r2, #2
 8003414:	a901      	add	r1, sp, #4
 8003416:	7a00      	ldrb	r0, [r0, #8]
 };
 */

void ST7032i_command(ST7032i * lcd, uint8_t value) {
	uint8_t buf[2];
	buf[0] = (byte) 0x00;
 8003418:	f88d 3004 	strb.w	r3, [sp, #4]
	buf[1] = value;
	i2c_transmit(lcd->i2c_address, buf, 2);
 800341c:	f7fd f9ea 	bl	80007f4 <i2c_transmit>
	delay_us(CMDDELAY);
 8003420:	2032      	movs	r0, #50	; 0x32
 8003422:	f7fc ff21 	bl	8000268 <delay_us>
}
 8003426:	b003      	add	sp, #12
 8003428:	bd00      	pop	{pc}
 800342a:	bf00      	nop

0800342c <ST7032i_write>:

size_t ST7032i_write(ST7032i * lcd, uint8_t value) {
 800342c:	b500      	push	{lr}
 800342e:	b083      	sub	sp, #12
	uint8_t buf[2];
	buf[0] = 0b01000000;
 8003430:	2340      	movs	r3, #64	; 0x40
	buf[1] = value & 0xff;
 8003432:	f88d 1005 	strb.w	r1, [sp, #5]
	i2c_transmit(lcd->i2c_address, buf, 2);
 8003436:	2202      	movs	r2, #2
 8003438:	a901      	add	r1, sp, #4
 800343a:	7a00      	ldrb	r0, [r0, #8]
	delay_us(CMDDELAY);
}

size_t ST7032i_write(ST7032i * lcd, uint8_t value) {
	uint8_t buf[2];
	buf[0] = 0b01000000;
 800343c:	f88d 3004 	strb.w	r3, [sp, #4]
	buf[1] = value & 0xff;
	i2c_transmit(lcd->i2c_address, buf, 2);
 8003440:	f7fd f9d8 	bl	80007f4 <i2c_transmit>
	delay_us(CMDDELAY);
 8003444:	2032      	movs	r0, #50	; 0x32
 8003446:	f7fc ff0f 	bl	8000268 <delay_us>
	return 1; // assume success
}
 800344a:	2001      	movs	r0, #1
 800344c:	b003      	add	sp, #12
 800344e:	bd00      	pop	{pc}

08003450 <ST7032i_print>:

size_t ST7032i_print(ST7032i * lcd, const char * str) {
 8003450:	b570      	push	{r4, r5, r6, lr}
 8003452:	460d      	mov	r5, r1
	uint16_t i;
	for(i = 0; str[i] ; i++)
 8003454:	7809      	ldrb	r1, [r1, #0]
	i2c_transmit(lcd->i2c_address, buf, 2);
	delay_us(CMDDELAY);
	return 1; // assume success
}

size_t ST7032i_print(ST7032i * lcd, const char * str) {
 8003456:	4606      	mov	r6, r0
	uint16_t i;
	for(i = 0; str[i] ; i++)
 8003458:	b151      	cbz	r1, 8003470 <ST7032i_print+0x20>
 800345a:	2400      	movs	r4, #0
 800345c:	3401      	adds	r4, #1
 800345e:	b2a4      	uxth	r4, r4
		ST7032i_write(lcd, str[i]);
 8003460:	4630      	mov	r0, r6
 8003462:	f7ff ffe3 	bl	800342c <ST7032i_write>
	return 1; // assume success
}

size_t ST7032i_print(ST7032i * lcd, const char * str) {
	uint16_t i;
	for(i = 0; str[i] ; i++)
 8003466:	5d29      	ldrb	r1, [r5, r4]
 8003468:	4620      	mov	r0, r4
 800346a:	2900      	cmp	r1, #0
 800346c:	d1f6      	bne.n	800345c <ST7032i_print+0xc>
 800346e:	bd70      	pop	{r4, r5, r6, pc}
 8003470:	4608      	mov	r0, r1
		ST7032i_write(lcd, str[i]);
	return i; // assume success
}
 8003472:	bd70      	pop	{r4, r5, r6, pc}

08003474 <ST7032i_init>:
	// set the entry mode
	ST7032i_command(lcd, LCD_ENTRYMODESET | lcd->_displaymode);
}

void ST7032i_init(ST7032i * lcd) {
	lcd->_numlines = 2;
 8003474:	2302      	movs	r3, #2
 8003476:	7103      	strb	r3, [r0, #4]
	lcd->_numcolumns = 16;
 8003478:	2310      	movs	r3, #16
 800347a:	7143      	strb	r3, [r0, #5]
	lcd->_position = 0;
 800347c:	2300      	movs	r3, #0
 800347e:	7183      	strb	r3, [r0, #6]
	lcd->i2c_address = DEFAULT_I2C_ADDRESS;
 8003480:	233e      	movs	r3, #62	; 0x3e
 8003482:	7203      	strb	r3, [r0, #8]
	lcd->contrast = DEFAULTCONTRAST;
 8003484:	232a      	movs	r3, #42	; 0x2a
 8003486:	71c3      	strb	r3, [r0, #7]
	lcd->pin_bklight = PIN_NOT_DEFINED;
 8003488:	23ff      	movs	r3, #255	; 0xff
 800348a:	8143      	strh	r3, [r0, #10]
	 }
	 */
	if (lcd->pin_bklight != PIN_NOT_DEFINED ) {
		pinMode(lcd->pin_bklight, OUTPUT);
	}
}
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop

08003490 <ST7032i_display>:
 command(0b10000000 | position);
 }
 */

//Turn the LCD ON
void ST7032i_display(ST7032i * lcd) {
 8003490:	b510      	push	{r4, lr}
	ST7032i_command(lcd, 0b00111000); // function set
 8003492:	2138      	movs	r1, #56	; 0x38
 command(0b10000000 | position);
 }
 */

//Turn the LCD ON
void ST7032i_display(ST7032i * lcd) {
 8003494:	4604      	mov	r4, r0
	ST7032i_command(lcd, 0b00111000); // function set
 8003496:	f7ff ffb7 	bl	8003408 <ST7032i_command>
	ST7032i_command(lcd, LCD_DISPLAYCONTROL | LCD_DISPLAYON); // Display On
 800349a:	4620      	mov	r0, r4
 800349c:	210c      	movs	r1, #12
}
 800349e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 */

//Turn the LCD ON
void ST7032i_display(ST7032i * lcd) {
	ST7032i_command(lcd, 0b00111000); // function set
	ST7032i_command(lcd, LCD_DISPLAYCONTROL | LCD_DISPLAYON); // Display On
 80034a2:	e7b1      	b.n	8003408 <ST7032i_command>

080034a4 <ST7032i_noDisplay>:
}

// Turn the LCD OFF

void ST7032i_noDisplay(ST7032i * lcd) {
 80034a4:	b510      	push	{r4, lr}
	ST7032i_command(lcd, 0xFE);
 80034a6:	21fe      	movs	r1, #254	; 0xfe
	ST7032i_command(lcd, LCD_DISPLAYCONTROL | LCD_DISPLAYON); // Display On
}

// Turn the LCD OFF

void ST7032i_noDisplay(ST7032i * lcd) {
 80034a8:	4604      	mov	r4, r0
	ST7032i_command(lcd, 0xFE);
 80034aa:	f7ff ffad 	bl	8003408 <ST7032i_command>
	ST7032i_command(lcd, 0x0B);
 80034ae:	4620      	mov	r0, r4
 80034b0:	210b      	movs	r1, #11
}
 80034b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

// Turn the LCD OFF

void ST7032i_noDisplay(ST7032i * lcd) {
	ST7032i_command(lcd, 0xFE);
	ST7032i_command(lcd, 0x0B);
 80034b6:	e7a7      	b.n	8003408 <ST7032i_command>

080034b8 <ST7032i_setContrast>:
}

void ST7032i_setContrast(ST7032i * lcd, byte val) {
	lcd->contrast = 0x7f & val;
 80034b8:	f001 017f 	and.w	r1, r1, #127	; 0x7f
void ST7032i_noDisplay(ST7032i * lcd) {
	ST7032i_command(lcd, 0xFE);
	ST7032i_command(lcd, 0x0B);
}

void ST7032i_setContrast(ST7032i * lcd, byte val) {
 80034bc:	b510      	push	{r4, lr}
 80034be:	4604      	mov	r4, r0
	lcd->contrast = 0x7f & val;
 80034c0:	71c1      	strb	r1, [r0, #7]
	ST7032i_command(lcd, 0b00111000); //function set
 80034c2:	2138      	movs	r1, #56	; 0x38
 80034c4:	f7ff ffa0 	bl	8003408 <ST7032i_command>
	ST7032i_command(lcd, 0b00111001); // function set
 80034c8:	2139      	movs	r1, #57	; 0x39
 80034ca:	4620      	mov	r0, r4
 80034cc:	f7ff ff9c 	bl	8003408 <ST7032i_command>
	delay_ms(2);
 80034d0:	2002      	movs	r0, #2
 80034d2:	f7fc feb9 	bl	8000248 <delay_ms>
	ST7032i_command(lcd, 0b01110000 | (lcd->contrast & 0xf)); // contrast Low 4 bits
 80034d6:	79e1      	ldrb	r1, [r4, #7]
 80034d8:	f001 010f 	and.w	r1, r1, #15
 80034dc:	f041 0170 	orr.w	r1, r1, #112	; 0x70
 80034e0:	4620      	mov	r0, r4
 80034e2:	f7ff ff91 	bl	8003408 <ST7032i_command>
	delay_ms(2);
 80034e6:	2002      	movs	r0, #2
 80034e8:	f7fc feae 	bl	8000248 <delay_ms>
	ST7032i_command(lcd, 0b01011100 | ((lcd->contrast >> 4) & 0x3)); // contast High/icon/power
 80034ec:	79e1      	ldrb	r1, [r4, #7]
 80034ee:	f3c1 1101 	ubfx	r1, r1, #4, #2
 80034f2:	4620      	mov	r0, r4
 80034f4:	f041 015c 	orr.w	r1, r1, #92	; 0x5c
 80034f8:	f7ff ff86 	bl	8003408 <ST7032i_command>
	ST7032i_command(lcd, 0b00111000); // function set
 80034fc:	4620      	mov	r0, r4
 80034fe:	2138      	movs	r1, #56	; 0x38
 8003500:	f7ff ff82 	bl	8003408 <ST7032i_command>
	delay_ms(2);
 8003504:	2002      	movs	r0, #2
}
 8003506:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	delay_ms(2);
	ST7032i_command(lcd, 0b01110000 | (lcd->contrast & 0xf)); // contrast Low 4 bits
	delay_ms(2);
	ST7032i_command(lcd, 0b01011100 | ((lcd->contrast >> 4) & 0x3)); // contast High/icon/power
	ST7032i_command(lcd, 0b00111000); // function set
	delay_ms(2);
 800350a:	f7fc be9d 	b.w	8000248 <delay_ms>
 800350e:	bf00      	nop

08003510 <ST7032i_clear>:
}

/* ------------------ */

void ST7032i_clear(ST7032i * lcd) {
 8003510:	b508      	push	{r3, lr}
	ST7032i_command(lcd, LCD_CLEARDISPLAY); // clear display, set cursor position to zero
 8003512:	2101      	movs	r1, #1
 8003514:	f7ff ff78 	bl	8003408 <ST7032i_command>
	delay_ms(200);  // this command takes a long time!
 8003518:	20c8      	movs	r0, #200	; 0xc8
}
 800351a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* ------------------ */

void ST7032i_clear(ST7032i * lcd) {
	ST7032i_command(lcd, LCD_CLEARDISPLAY); // clear display, set cursor position to zero
	delay_ms(200);  // this command takes a long time!
 800351e:	f7fc be93 	b.w	8000248 <delay_ms>
 8003522:	bf00      	nop

08003524 <ST7032i_home>:
}

void ST7032i_home(ST7032i * lcd) {
 8003524:	b508      	push	{r3, lr}
	ST7032i_command(lcd, LCD_RETURNHOME);  // set cursor position to zero
 8003526:	2102      	movs	r1, #2
 8003528:	f7ff ff6e 	bl	8003408 <ST7032i_command>
	delay_ms(200);  // this command takes a long time!
 800352c:	20c8      	movs	r0, #200	; 0xc8
}
 800352e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	delay_ms(200);  // this command takes a long time!
}

void ST7032i_home(ST7032i * lcd) {
	ST7032i_command(lcd, LCD_RETURNHOME);  // set cursor position to zero
	delay_ms(200);  // this command takes a long time!
 8003532:	f7fc be89 	b.w	8000248 <delay_ms>
 8003536:	bf00      	nop

08003538 <ST7032i_begin>:
	for(i = 0; str[i] ; i++)
		ST7032i_write(lcd, str[i]);
	return i; // assume success
}

void ST7032i_begin(ST7032i * lcd) {
 8003538:	b510      	push	{r4, lr}
//	delay(40);
	ST7032i_command(lcd, 0b00111000); //function set
 800353a:	2138      	movs	r1, #56	; 0x38
	for(i = 0; str[i] ; i++)
		ST7032i_write(lcd, str[i]);
	return i; // assume success
}

void ST7032i_begin(ST7032i * lcd) {
 800353c:	4604      	mov	r4, r0
//	delay(40);
	ST7032i_command(lcd, 0b00111000); //function set
 800353e:	f7ff ff63 	bl	8003408 <ST7032i_command>
	ST7032i_command(lcd, 0b00111001); // function set
 8003542:	2139      	movs	r1, #57	; 0x39
 8003544:	4620      	mov	r0, r4
 8003546:	f7ff ff5f 	bl	8003408 <ST7032i_command>
	delay_ms(2);
 800354a:	2002      	movs	r0, #2
 800354c:	f7fc fe7c 	bl	8000248 <delay_ms>

	ST7032i_command(lcd, 0b00010100); // interval osc
 8003550:	4620      	mov	r0, r4
 8003552:	2114      	movs	r1, #20
 8003554:	f7ff ff58 	bl	8003408 <ST7032i_command>
	ST7032i_command(lcd, 0b01110000 | (lcd->contrast & 0xf)); // contrast Low 4 bits
 8003558:	79e1      	ldrb	r1, [r4, #7]
 800355a:	f001 010f 	and.w	r1, r1, #15
 800355e:	f041 0170 	orr.w	r1, r1, #112	; 0x70
 8003562:	4620      	mov	r0, r4
 8003564:	f7ff ff50 	bl	8003408 <ST7032i_command>
	delay_ms(2);
 8003568:	2002      	movs	r0, #2
 800356a:	f7fc fe6d 	bl	8000248 <delay_ms>

	ST7032i_command(lcd, 0b01011100 | ((lcd->contrast >> 4) & 0x3)); // contast High/icon/power
 800356e:	79e1      	ldrb	r1, [r4, #7]
 8003570:	f3c1 1101 	ubfx	r1, r1, #4, #2
 8003574:	4620      	mov	r0, r4
 8003576:	f041 015c 	orr.w	r1, r1, #92	; 0x5c
 800357a:	f7ff ff45 	bl	8003408 <ST7032i_command>
	ST7032i_command(lcd, 0b01101100); // follower control
 800357e:	216c      	movs	r1, #108	; 0x6c
 8003580:	4620      	mov	r0, r4
 8003582:	f7ff ff41 	bl	8003408 <ST7032i_command>
	delay_ms(300);
 8003586:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800358a:	f7fc fe5d 	bl	8000248 <delay_ms>

	ST7032i_command(lcd, 0b00111000); // function set
 800358e:	4620      	mov	r0, r4
 8003590:	2138      	movs	r1, #56	; 0x38
 8003592:	f7ff ff39 	bl	8003408 <ST7032i_command>
	ST7032i_command(lcd, 0b00001100); // Display On
 8003596:	210c      	movs	r1, #12
 8003598:	4620      	mov	r0, r4
 800359a:	f7ff ff35 	bl	8003408 <ST7032i_command>
	delay_ms(2);
 800359e:	2002      	movs	r0, #2
 80035a0:	f7fc fe52 	bl	8000248 <delay_ms>

	ST7032i_command(lcd, 0b00000001); // Clear Display
 80035a4:	2101      	movs	r1, #1
 80035a6:	4620      	mov	r0, r4
 80035a8:	f7ff ff2e 	bl	8003408 <ST7032i_command>
	delay_ms(2); // Clear Display needs additional wait
 80035ac:	2002      	movs	r0, #2
 80035ae:	f7fc fe4b 	bl	8000248 <delay_ms>
	ST7032i_command(lcd, 0b00000010); // home, but does not work
 80035b2:	2102      	movs	r1, #2
 80035b4:	4620      	mov	r0, r4
 80035b6:	f7ff ff27 	bl	8003408 <ST7032i_command>
	delay_ms(2);
 80035ba:	2002      	movs	r0, #2
 80035bc:	f7fc fe44 	bl	8000248 <delay_ms>

	// finally, set # lines, font size, etc.
	ST7032i_command(lcd, LCD_FUNCTIONSET | lcd->_displayfunction);
 80035c0:	7821      	ldrb	r1, [r4, #0]
 80035c2:	4620      	mov	r0, r4
 80035c4:	f041 0120 	orr.w	r1, r1, #32
 80035c8:	f7ff ff1e 	bl	8003408 <ST7032i_command>

	// turn the display on with no cursor or blinking default
	lcd->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80035cc:	2304      	movs	r3, #4
 80035ce:	7063      	strb	r3, [r4, #1]
	ST7032i_display(lcd);
 80035d0:	4620      	mov	r0, r4
 80035d2:	f7ff ff5d 	bl	8003490 <ST7032i_display>

	// clear it off
	ST7032i_clear(lcd);
 80035d6:	4620      	mov	r0, r4
 80035d8:	f7ff ff9a 	bl	8003510 <ST7032i_clear>
	ST7032i_home(lcd);
 80035dc:	4620      	mov	r0, r4
 80035de:	f7ff ffa1 	bl	8003524 <ST7032i_home>

	// Initialize to default text direction (for romance languages)
	lcd->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80035e2:	2302      	movs	r3, #2
	// set the entry mode
	ST7032i_command(lcd, LCD_ENTRYMODESET | lcd->_displaymode);
 80035e4:	4620      	mov	r0, r4
 80035e6:	2106      	movs	r1, #6
	// clear it off
	ST7032i_clear(lcd);
	ST7032i_home(lcd);

	// Initialize to default text direction (for romance languages)
	lcd->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80035e8:	70a3      	strb	r3, [r4, #2]
	// set the entry mode
	ST7032i_command(lcd, LCD_ENTRYMODESET | lcd->_displaymode);
}
 80035ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ST7032i_home(lcd);

	// Initialize to default text direction (for romance languages)
	lcd->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
	// set the entry mode
	ST7032i_command(lcd, LCD_ENTRYMODESET | lcd->_displaymode);
 80035ee:	e70b      	b.n	8003408 <ST7032i_command>

080035f0 <ST7032i_setCursor>:
void ST7032i_home(ST7032i * lcd) {
	ST7032i_command(lcd, LCD_RETURNHOME);  // set cursor position to zero
	delay_ms(200);  // this command takes a long time!
}

void ST7032i_setCursor(ST7032i * lcd, uint8_t c, uint8_t r) {
 80035f0:	b4f0      	push	{r4, r5, r6, r7}
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 80035f2:	4b10      	ldr	r3, [pc, #64]	; (8003634 <ST7032i_setCursor+0x44>)
void ST7032i_home(ST7032i * lcd) {
	ST7032i_command(lcd, LCD_RETURNHOME);  // set cursor position to zero
	delay_ms(200);  // this command takes a long time!
}

void ST7032i_setCursor(ST7032i * lcd, uint8_t c, uint8_t r) {
 80035f4:	4614      	mov	r4, r2
 80035f6:	4605      	mov	r5, r0
 80035f8:	460f      	mov	r7, r1
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 80035fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
	if (r >= lcd->_numlines) {
 80035fc:	792e      	ldrb	r6, [r5, #4]
void ST7032i_home(ST7032i * lcd) {
	ST7032i_command(lcd, LCD_RETURNHOME);  // set cursor position to zero
	delay_ms(200);  // this command takes a long time!
}

void ST7032i_setCursor(ST7032i * lcd, uint8_t c, uint8_t r) {
 80035fe:	b084      	sub	sp, #16
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
	if (r >= lcd->_numlines) {
 8003600:	42a6      	cmp	r6, r4
	ST7032i_command(lcd, LCD_RETURNHOME);  // set cursor position to zero
	delay_ms(200);  // this command takes a long time!
}

void ST7032i_setCursor(ST7032i * lcd, uint8_t c, uint8_t r) {
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8003602:	f10d 0c10 	add.w	ip, sp, #16
 8003606:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
	if (r >= lcd->_numlines) {
		r %= lcd->_numlines;    // we count rows starting w/ 0
 800360a:	bf9e      	ittt	ls
 800360c:	fbb4 f3f6 	udivls	r3, r4, r6
 8003610:	fb06 4413 	mlsls	r4, r6, r3, r4
 8003614:	b2e4      	uxtbls	r4, r4
	}
	lcd->_position = c + row_offsets[r];
 8003616:	ab04      	add	r3, sp, #16
 8003618:	eb03 0484 	add.w	r4, r3, r4, lsl #2
	ST7032i_command(lcd, LCD_SETDDRAMADDR | lcd->_position);
 800361c:	4628      	mov	r0, r5
void ST7032i_setCursor(ST7032i * lcd, uint8_t c, uint8_t r) {
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
	if (r >= lcd->_numlines) {
		r %= lcd->_numlines;    // we count rows starting w/ 0
	}
	lcd->_position = c + row_offsets[r];
 800361e:	f854 1c10 	ldr.w	r1, [r4, #-16]
 8003622:	187f      	adds	r7, r7, r1
 8003624:	b2f9      	uxtb	r1, r7
 8003626:	71a9      	strb	r1, [r5, #6]
	ST7032i_command(lcd, LCD_SETDDRAMADDR | lcd->_position);
 8003628:	f041 0180 	orr.w	r1, r1, #128	; 0x80
}
 800362c:	b004      	add	sp, #16
 800362e:	bcf0      	pop	{r4, r5, r6, r7}
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
	if (r >= lcd->_numlines) {
		r %= lcd->_numlines;    // we count rows starting w/ 0
	}
	lcd->_position = c + row_offsets[r];
	ST7032i_command(lcd, LCD_SETDDRAMADDR | lcd->_position);
 8003630:	e6ea      	b.n	8003408 <ST7032i_command>
 8003632:	bf00      	nop
 8003634:	08008e1c 	.word	0x08008e1c

08003638 <_close>:
	}
}

int _close(int file) {
	return -1;
}
 8003638:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800363c:	4770      	bx	lr
 800363e:	bf00      	nop

08003640 <_execve>:
/*
 execve
 Transfer control to a new process. Minimal implementation (for a system without processes):
 */
int _execve(char *name, char **argv, char **env) {
	errno = ENOMEM;
 8003640:	f241 637c 	movw	r3, #5756	; 0x167c
 8003644:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003648:	220c      	movs	r2, #12
 800364a:	601a      	str	r2, [r3, #0]
	return -1;
}
 800364c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop

08003654 <_fork>:
 fork
 Create a new process. Minimal implementation (for a system without processes):
 */

int _fork() {
	errno = EAGAIN;
 8003654:	f241 637c 	movw	r3, #5756	; 0x167c
 8003658:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800365c:	220b      	movs	r2, #11
 800365e:	601a      	str	r2, [r3, #0]
	return -1;
}
 8003660:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop

08003668 <_fstat>:
 Status of an open file. For consistency with other minimal implementations in these examples,
 all files are regarded as character special devices.
 The `sys/stat.h' header file required is distributed in the `include' subdirectory for this C library.
 */
int _fstat(int file, struct stat *st) {
	st->st_mode = S_IFCHR;
 8003668:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800366c:	604b      	str	r3, [r1, #4]
	return 0;
}
 800366e:	2000      	movs	r0, #0
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop

08003674 <_getpid>:
 Process-ID; this is sometimes used to generate strings unlikely to conflict with other processes. Minimal implementation, for a system without processes:
 */

int _getpid() {
	return 1;
}
 8003674:	2001      	movs	r0, #1
 8003676:	4770      	bx	lr

08003678 <_isatty>:
/*
 isatty
 Query whether output stream is a terminal. For consistency with the other minimal implementations,
 */
int _isatty(int file) {
	switch (file) {
 8003678:	2802      	cmp	r0, #2
 800367a:	d801      	bhi.n	8003680 <_isatty+0x8>
	case STDOUT_FILENO:
	case STDERR_FILENO:
	case STDIN_FILENO:
		return 1;
 800367c:	2001      	movs	r0, #1
	default:
		//errno = ENOTTY;
		errno = EBADF;
		return 0;
	}
}
 800367e:	4770      	bx	lr
	case STDERR_FILENO:
	case STDIN_FILENO:
		return 1;
	default:
		//errno = ENOTTY;
		errno = EBADF;
 8003680:	4b02      	ldr	r3, [pc, #8]	; (800368c <_isatty+0x14>)
 8003682:	2209      	movs	r2, #9
 8003684:	601a      	str	r2, [r3, #0]
		return 0;
 8003686:	2000      	movs	r0, #0
 8003688:	4770      	bx	lr
 800368a:	bf00      	nop
 800368c:	2000167c 	.word	0x2000167c

08003690 <_kill>:
/*
 kill
 Send a signal. Minimal implementation:
 */
int _kill(int pid, int sig) {
	errno = EINVAL;
 8003690:	f241 637c 	movw	r3, #5756	; 0x167c
 8003694:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003698:	2216      	movs	r2, #22
 800369a:	601a      	str	r2, [r3, #0]
	return (-1);
}
 800369c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80036a0:	4770      	bx	lr
 80036a2:	bf00      	nop

080036a4 <_link>:
 link
 Establish a new name for an existing file. Minimal implementation:
 */

int _link(char *old, char *new) {
	errno = EMLINK;
 80036a4:	f241 637c 	movw	r3, #5756	; 0x167c
 80036a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80036ac:	221f      	movs	r2, #31
 80036ae:	601a      	str	r2, [r3, #0]
	return -1;
}
 80036b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop

080036b8 <_lseek>:
 lseek
 Set position in a file. Minimal implementation:
 */
int _lseek(int file, int ptr, int dir) {
	return 0;
}
 80036b8:	2000      	movs	r0, #0
 80036ba:	4770      	bx	lr

080036bc <_read>:
 read
 Read a character to a file. `libc' subroutines will use this system routine for input from all files, including stdin
 Returns -1 on error or blocks until the number of characters have been read.
 */

int _read(int file, char *ptr, int len) {
 80036bc:	b430      	push	{r4, r5}
	int n;
	int num = 0;
	switch (file) {
 80036be:	b130      	cbz	r0, 80036ce <_read+0x12>
					*ptr++ = c;
					num++;
				}
				break;
				default:
				errno = EBADF;
 80036c0:	4b0b      	ldr	r3, [pc, #44]	; (80036f0 <_read+0x34>)
 80036c2:	2209      	movs	r2, #9
 80036c4:	601a      	str	r2, [r3, #0]
				return -1;
 80036c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			}
	return num;
}
 80036ca:	bc30      	pop	{r4, r5}
 80036cc:	4770      	bx	lr
int _read(int file, char *ptr, int len) {
	int n;
	int num = 0;
	switch (file) {
	case STDIN_FILENO:
		for (n = 0; n < len; n++) {
 80036ce:	2a00      	cmp	r2, #0
 80036d0:	ddfb      	ble.n	80036ca <_read+0xe>
#if   STDIN_USART == 1
			while ((USART1->SR & USART_FLAG_RXNE) == (uint16_t)RESET) {}
 80036d2:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 read
 Read a character to a file. `libc' subroutines will use this system routine for input from all files, including stdin
 Returns -1 on error or blocks until the number of characters have been read.
 */

int _read(int file, char *ptr, int len) {
 80036d6:	188d      	adds	r5, r1, r2
	int num = 0;
	switch (file) {
	case STDIN_FILENO:
		for (n = 0; n < len; n++) {
#if   STDIN_USART == 1
			while ((USART1->SR & USART_FLAG_RXNE) == (uint16_t)RESET) {}
 80036d8:	f2c4 0401 	movt	r4, #16385	; 0x4001
 80036dc:	8823      	ldrh	r3, [r4, #0]
 80036de:	069b      	lsls	r3, r3, #26
 80036e0:	d5fc      	bpl.n	80036dc <_read+0x20>
			char c = (char)(USART1->DR & (uint16_t)0x01FF);
 80036e2:	88a3      	ldrh	r3, [r4, #4]
 80036e4:	f801 3b01 	strb.w	r3, [r1], #1
int _read(int file, char *ptr, int len) {
	int n;
	int num = 0;
	switch (file) {
	case STDIN_FILENO:
		for (n = 0; n < len; n++) {
 80036e8:	42a9      	cmp	r1, r5
 80036ea:	d1f7      	bne.n	80036dc <_read+0x20>
 80036ec:	4610      	mov	r0, r2
 80036ee:	e7ec      	b.n	80036ca <_read+0xe>
 80036f0:	2000167c 	.word	0x2000167c

080036f4 <_stat>:
 Status of a file (by name). Minimal implementation:
 int    _EXFUN(stat,( const char *__path, struct stat *__sbuf ));
 */

int _stat(const char *filepath, struct stat *st) {
	st->st_mode = S_IFCHR;
 80036f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80036f8:	604b      	str	r3, [r1, #4]
	return 0;
}
 80036fa:	2000      	movs	r0, #0
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop

08003700 <_times>:
 Timing information for current process. Minimal implementation:
 */

clock_t _times(struct tms *buf) {
	return -1;
}
 8003700:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop

08003708 <_unlink>:
/*
 unlink
 Remove a file's directory entry. Minimal implementation:
 */
int _unlink(char *name) {
	errno = ENOENT;
 8003708:	f241 637c 	movw	r3, #5756	; 0x167c
 800370c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003710:	2202      	movs	r2, #2
 8003712:	601a      	str	r2, [r3, #0]
	return -1;
}
 8003714:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop

0800371c <_wait>:
/*
 wait
 Wait for a child process. Minimal implementation:
 */
int _wait(int *status) {
	errno = ECHILD;
 800371c:	f241 637c 	movw	r3, #5756	; 0x167c
 8003720:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003724:	220a      	movs	r2, #10
 8003726:	601a      	str	r2, [r3, #0]
	return -1;
}
 8003728:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop

08003730 <_write>:
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
 8003730:	2801      	cmp	r0, #1
/*
 write
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
 8003732:	b430      	push	{r4, r5}
	int n;
	switch (file) {
 8003734:	d009      	beq.n	800374a <_write+0x1a>
 8003736:	2802      	cmp	r0, #2
 8003738:	d017      	beq.n	800376a <_write+0x3a>
					USART3->DR = (*ptr++ & (uint16_t)0x01FF);
#endif
				}
				break;
				default:
				errno = EBADF;
 800373a:	4b14      	ldr	r3, [pc, #80]	; (800378c <_write+0x5c>)
 800373c:	2209      	movs	r2, #9
 800373e:	601a      	str	r2, [r3, #0]
				return -1;
 8003740:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
			}
	return len;
}
 8003744:	4610      	mov	r0, r2
 8003746:	bc30      	pop	{r4, r5}
 8003748:	4770      	bx	lr
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
 800374a:	2a00      	cmp	r2, #0
 800374c:	ddfa      	ble.n	8003744 <_write+0x14>
#if STDOUT_USART == 1
			while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 800374e:	f44f 5480 	mov.w	r4, #4096	; 0x1000
/*
 write
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
 8003752:	188d      	adds	r5, r1, r2
	int n;
	switch (file) {
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
#if STDOUT_USART == 1
			while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 8003754:	f2c4 0401 	movt	r4, #16385	; 0x4001
 8003758:	8823      	ldrh	r3, [r4, #0]
 800375a:	065b      	lsls	r3, r3, #25
 800375c:	d5fc      	bpl.n	8003758 <_write+0x28>
			USART1->DR = (*ptr++ & (uint16_t)0x01FF);
 800375e:	f811 3b01 	ldrb.w	r3, [r1], #1
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
 8003762:	42a9      	cmp	r1, r5
#if STDOUT_USART == 1
			while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
			USART1->DR = (*ptr++ & (uint16_t)0x01FF);
 8003764:	80a3      	strh	r3, [r4, #4]
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
 8003766:	d1f7      	bne.n	8003758 <_write+0x28>
 8003768:	e7ec      	b.n	8003744 <_write+0x14>
					USART3->DR = (*ptr++ & (uint16_t)0x01FF);
#endif
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
 800376a:	2a00      	cmp	r2, #0
#if STDERR_USART == 1
					while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 800376c:	bfc2      	ittt	gt
 800376e:	f44f 5480 	movgt.w	r4, #4096	; 0x1000
/*
 write
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
 8003772:	188d      	addgt	r5, r1, r2
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
#if STDERR_USART == 1
					while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 8003774:	f2c4 0401 	movtgt	r4, #16385	; 0x4001
					USART3->DR = (*ptr++ & (uint16_t)0x01FF);
#endif
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
 8003778:	dde4      	ble.n	8003744 <_write+0x14>
#if STDERR_USART == 1
					while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 800377a:	8823      	ldrh	r3, [r4, #0]
 800377c:	0658      	lsls	r0, r3, #25
 800377e:	d5fc      	bpl.n	800377a <_write+0x4a>
					USART1->DR = (*ptr++ & (uint16_t)0x01FF);
 8003780:	f811 3b01 	ldrb.w	r3, [r1], #1
					USART3->DR = (*ptr++ & (uint16_t)0x01FF);
#endif
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
 8003784:	42a9      	cmp	r1, r5
#if STDERR_USART == 1
					while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
					USART1->DR = (*ptr++ & (uint16_t)0x01FF);
 8003786:	80a3      	strh	r3, [r4, #4]
					USART3->DR = (*ptr++ & (uint16_t)0x01FF);
#endif
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
 8003788:	d1f7      	bne.n	800377a <_write+0x4a>
 800378a:	e7db      	b.n	8003744 <_write+0x14>
 800378c:	2000167c 	.word	0x2000167c

08003790 <_sbrk>:

	extern char _ebss; // Defined by the linker
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0) {
 8003790:	4a0d      	ldr	r2, [pc, #52]	; (80037c8 <_sbrk+0x38>)
/*
 sbrk
 Increase program data space.
 Malloc and related functions depend on this
 */
caddr_t _sbrk(int incr) {
 8003792:	b508      	push	{r3, lr}

	extern char _ebss; // Defined by the linker
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0) {
 8003794:	6813      	ldr	r3, [r2, #0]
 8003796:	b1a3      	cbz	r3, 80037c2 <_sbrk+0x32>
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __get_MSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 8003798:	f3ef 8108 	mrs	r1, MSP
		heap_end = &_ebss;
	}
	prev_heap_end = heap_end;

	char * stack = (char*) __get_MSP();
	if (heap_end + incr > stack) {
 800379c:	1818      	adds	r0, r3, r0
 800379e:	4288      	cmp	r0, r1
		errno = ENOMEM;
		return (caddr_t) -1;
		//abort ();
	}

	heap_end += incr;
 80037a0:	bf98      	it	ls
 80037a2:	6010      	strls	r0, [r2, #0]
		heap_end = &_ebss;
	}
	prev_heap_end = heap_end;

	char * stack = (char*) __get_MSP();
	if (heap_end + incr > stack) {
 80037a4:	d801      	bhi.n	80037aa <_sbrk+0x1a>
	}

	heap_end += incr;
	return (caddr_t) prev_heap_end;

}
 80037a6:	4618      	mov	r0, r3
 80037a8:	bd08      	pop	{r3, pc}
	}
	prev_heap_end = heap_end;

	char * stack = (char*) __get_MSP();
	if (heap_end + incr > stack) {
		_write(STDERR_FILENO, "Heap and stack collision\n", 25);
 80037aa:	2219      	movs	r2, #25
 80037ac:	2002      	movs	r0, #2
 80037ae:	4907      	ldr	r1, [pc, #28]	; (80037cc <_sbrk+0x3c>)
 80037b0:	f7ff ffbe 	bl	8003730 <_write>
		errno = ENOMEM;
 80037b4:	4b06      	ldr	r3, [pc, #24]	; (80037d0 <_sbrk+0x40>)
 80037b6:	220c      	movs	r2, #12
 80037b8:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80037ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}

	heap_end += incr;
	return (caddr_t) prev_heap_end;

}
 80037be:	4618      	mov	r0, r3
 80037c0:	bd08      	pop	{r3, pc}
	extern char _ebss; // Defined by the linker
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0) {
		heap_end = &_ebss;
 80037c2:	4b04      	ldr	r3, [pc, #16]	; (80037d4 <_sbrk+0x44>)
 80037c4:	6013      	str	r3, [r2, #0]
 80037c6:	e7e7      	b.n	8003798 <_sbrk+0x8>
 80037c8:	2000095c 	.word	0x2000095c
 80037cc:	080090a8 	.word	0x080090a8
 80037d0:	2000167c 	.word	0x2000167c
 80037d4:	20001680 	.word	0x20001680

080037d8 <_exit>:
char *__env[1] = { 0 };
char **environ = __env;

int _write(int file, char *ptr, int len);

void _exit(int status) {
 80037d8:	b508      	push	{r3, lr}
	_write(1, "exit", 4);
 80037da:	2001      	movs	r0, #1
 80037dc:	4902      	ldr	r1, [pc, #8]	; (80037e8 <_exit+0x10>)
 80037de:	2204      	movs	r2, #4
 80037e0:	f7ff ffa6 	bl	8003730 <_write>
 80037e4:	e7fe      	b.n	80037e4 <_exit+0xc>
 80037e6:	bf00      	nop
 80037e8:	080090c4 	.word	0x080090c4
 80037ec:	08009130 	.word	0x08009130
 80037f0:	20000000 	.word	0x20000000
 80037f4:	2000095c 	.word	0x2000095c
 80037f8:	2000095c 	.word	0x2000095c
 80037fc:	20001680 	.word	0x20001680

08003800 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8003800:	4770      	bx	lr
 8003802:	bf00      	nop

08003804 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8003804:	e7fe      	b.n	8003804 <HardFault_Handler>
 8003806:	bf00      	nop

08003808 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8003808:	e7fe      	b.n	8003808 <MemManage_Handler>
 800380a:	bf00      	nop

0800380c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800380c:	e7fe      	b.n	800380c <BusFault_Handler>
 800380e:	bf00      	nop

08003810 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8003810:	e7fe      	b.n	8003810 <UsageFault_Handler>
 8003812:	bf00      	nop

08003814 <SVC_Handler>:
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
}
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop

08003818 <DebugMon_Handler>:
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
}
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop

0800381c <PendSV_Handler>:
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
}
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop

08003820 <SystemInit>:
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003820:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003824:	f2c4 0302 	movt	r3, #16386	; 0x4002

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003828:	2200      	movs	r2, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800382a:	6819      	ldr	r1, [r3, #0]
 800382c:	f041 0101 	orr.w	r1, r1, #1
 8003830:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003832:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003834:	6818      	ldr	r0, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003836:	f243 0110 	movw	r1, #12304	; 0x3010

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800383a:	f020 7084 	bic.w	r0, r0, #17301504	; 0x1080000

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800383e:	f2c2 4100 	movt	r1, #9216	; 0x2400

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003842:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8003846:	6018      	str	r0, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003848:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800384a:	6819      	ldr	r1, [r3, #0]
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800384c:	b082      	sub	sp, #8

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800384e:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8003852:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003854:	60da      	str	r2, [r3, #12]
static void SetSysClock(void)
{
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8003856:	9200      	str	r2, [sp, #0]
 8003858:	9201      	str	r2, [sp, #4]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003860:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8003862:	461a      	mov	r2, r3
 8003864:	e003      	b.n	800386e <SystemInit+0x4e>
    StartUpCounter++;
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8003866:	9b00      	ldr	r3, [sp, #0]
 8003868:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800386c:	d009      	beq.n	8003882 <SystemInit+0x62>
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800386e:	6813      	ldr	r3, [r2, #0]
 8003870:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003874:	9301      	str	r3, [sp, #4]
    StartUpCounter++;
 8003876:	9b00      	ldr	r3, [sp, #0]
 8003878:	3301      	adds	r3, #1
 800387a:	9300      	str	r3, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800387c:	9b01      	ldr	r3, [sp, #4]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d0f1      	beq.n	8003866 <SystemInit+0x46>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8003882:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003886:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8003890:	bf08      	it	eq
 8003892:	9301      	streq	r3, [sp, #4]
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
    StartUpCounter++;
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8003894:	d001      	beq.n	800389a <SystemInit+0x7a>
  {
    HSEStatus = (uint32_t)0x01;
 8003896:	2301      	movs	r3, #1
 8003898:	9301      	str	r3, [sp, #4]
  else
  {
    HSEStatus = (uint32_t)0x00;
  }

  if (HSEStatus == (uint32_t)0x01)
 800389a:	9b01      	ldr	r3, [sp, #4]
 800389c:	2b01      	cmp	r3, #1
 800389e:	d008      	beq.n	80038b2 <SystemInit+0x92>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80038a0:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 80038a4:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80038a8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80038ac:	609a      	str	r2, [r3, #8]
#endif
}
 80038ae:	b002      	add	sp, #8
 80038b0:	4770      	bx	lr
  }

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80038b2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80038b6:	f2c4 0302 	movt	r3, #16386	; 0x4002
    PWR->CR |= PWR_CR_VOS;
 80038ba:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
  }

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80038be:	6c19      	ldr	r1, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80038c0:	f2c4 0200 	movt	r2, #16384	; 0x4000
  }

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80038c4:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80038c8:	6419      	str	r1, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80038ca:	6811      	ldr	r1, [r2, #0]
 80038cc:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80038d0:	6011      	str	r1, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80038d2:	689a      	ldr	r2, [r3, #8]
 80038d4:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80038d6:	689a      	ldr	r2, [r3, #8]
 80038d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038dc:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80038de:	6899      	ldr	r1, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80038e0:	f245 4208 	movw	r2, #21512	; 0x5408
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80038e4:	f441 51a0 	orr.w	r1, r1, #5120	; 0x1400

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80038e8:	f2c0 7240 	movt	r2, #1856	; 0x740
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80038ec:	6099      	str	r1, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80038ee:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80038f6:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80038f8:	4619      	mov	r1, r3
 80038fa:	680a      	ldr	r2, [r1, #0]
 80038fc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003900:	0192      	lsls	r2, r2, #6
 8003902:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003906:	d5f8      	bpl.n	80038fa <SystemInit+0xda>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8003908:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 800390c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003910:	f240 6105 	movw	r1, #1541	; 0x605
 8003914:	6011      	str	r1, [r2, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8003916:	689a      	ldr	r2, [r3, #8]
 8003918:	f022 0203 	bic.w	r2, r2, #3
 800391c:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 800391e:	689a      	ldr	r2, [r3, #8]
 8003920:	f042 0202 	orr.w	r2, r2, #2
 8003924:	609a      	str	r2, [r3, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8003926:	689a      	ldr	r2, [r3, #8]
 8003928:	f002 020c 	and.w	r2, r2, #12
 800392c:	2a08      	cmp	r2, #8
 800392e:	d1fa      	bne.n	8003926 <SystemInit+0x106>
 8003930:	e7b6      	b.n	80038a0 <SystemInit+0x80>
 8003932:	bf00      	nop

08003934 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8003934:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003938:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800393c:	689a      	ldr	r2, [r3, #8]
 800393e:	f002 020c 	and.w	r2, r2, #12

  switch (tmp)
 8003942:	2a04      	cmp	r2, #4
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
      break;
 8003944:	bf04      	itt	eq
 8003946:	f44f 5190 	moveq.w	r1, #4608	; 0x1200
 800394a:	f2c0 017a 	movteq	r1, #122	; 0x7a
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;

  switch (tmp)
 800394e:	d006      	beq.n	800395e <SystemCoreClockUpdate+0x2a>
 8003950:	2a08      	cmp	r2, #8
 8003952:	bf1c      	itt	ne
 8003954:	f44f 5110 	movne.w	r1, #9216	; 0x2400
 8003958:	f2c0 01f4 	movtne	r1, #244	; 0xf4
 800395c:	d00b      	beq.n	8003976 <SystemCoreClockUpdate+0x42>
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800395e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003962:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003966:	4b15      	ldr	r3, [pc, #84]	; (80039bc <SystemCoreClockUpdate+0x88>)
 8003968:	6892      	ldr	r2, [r2, #8]
 800396a:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800396e:	5c9a      	ldrb	r2, [r3, r2]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8003970:	40d1      	lsrs	r1, r2
 8003972:	6119      	str	r1, [r3, #16]
}
 8003974:	4770      	bx	lr
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8003976:	6858      	ldr	r0, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003978:	685a      	ldr	r2, [r3, #4]
      
      if (pllsource != 0)
 800397a:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800397e:	6858      	ldr	r0, [r3, #4]
 8003980:	bf15      	itete	ne
 8003982:	f44f 5390 	movne.w	r3, #4608	; 0x1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8003986:	f44f 5310 	moveq.w	r3, #9216	; 0x2400
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800398a:	f2c0 037a 	movtne	r3, #122	; 0x7a
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800398e:	f2c0 03f4 	movteq	r3, #244	; 0xf4

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003992:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8003996:	fbb3 f1f2 	udiv	r1, r3, r2
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800399a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800399e:	f2c4 0302 	movt	r3, #16386	; 0x4002
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80039a2:	f3c0 1088 	ubfx	r0, r0, #6, #9
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80039ac:	3301      	adds	r3, #1
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80039ae:	fb01 f100 	mul.w	r1, r1, r0
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80039b2:	005b      	lsls	r3, r3, #1
      SystemCoreClock = pllvco/pllp;
 80039b4:	fbb1 f1f3 	udiv	r1, r1, r3
      break;
 80039b8:	e7d1      	b.n	800395e <SystemCoreClockUpdate+0x2a>
 80039ba:	bf00      	nop
 80039bc:	20000088 	.word	0x20000088

080039c0 <cleanup_glue>:
 80039c0:	b538      	push	{r3, r4, r5, lr}
 80039c2:	460c      	mov	r4, r1
 80039c4:	6809      	ldr	r1, [r1, #0]
 80039c6:	4605      	mov	r5, r0
 80039c8:	b109      	cbz	r1, 80039ce <cleanup_glue+0xe>
 80039ca:	f7ff fff9 	bl	80039c0 <cleanup_glue>
 80039ce:	4628      	mov	r0, r5
 80039d0:	4621      	mov	r1, r4
 80039d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80039d6:	f002 ba23 	b.w	8005e20 <_free_r>
 80039da:	bf00      	nop

080039dc <_reclaim_reent>:
 80039dc:	4b22      	ldr	r3, [pc, #136]	; (8003a68 <_reclaim_reent+0x8c>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4298      	cmp	r0, r3
 80039e2:	b570      	push	{r4, r5, r6, lr}
 80039e4:	4605      	mov	r5, r0
 80039e6:	d032      	beq.n	8003a4e <_reclaim_reent+0x72>
 80039e8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80039ea:	b1ab      	cbz	r3, 8003a18 <_reclaim_reent+0x3c>
 80039ec:	2200      	movs	r2, #0
 80039ee:	4616      	mov	r6, r2
 80039f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80039f4:	b909      	cbnz	r1, 80039fa <_reclaim_reent+0x1e>
 80039f6:	e007      	b.n	8003a08 <_reclaim_reent+0x2c>
 80039f8:	4621      	mov	r1, r4
 80039fa:	680c      	ldr	r4, [r1, #0]
 80039fc:	4628      	mov	r0, r5
 80039fe:	f002 fa0f 	bl	8005e20 <_free_r>
 8003a02:	2c00      	cmp	r4, #0
 8003a04:	d1f8      	bne.n	80039f8 <_reclaim_reent+0x1c>
 8003a06:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8003a08:	3601      	adds	r6, #1
 8003a0a:	2e20      	cmp	r6, #32
 8003a0c:	4632      	mov	r2, r6
 8003a0e:	d1ef      	bne.n	80039f0 <_reclaim_reent+0x14>
 8003a10:	4628      	mov	r0, r5
 8003a12:	4619      	mov	r1, r3
 8003a14:	f002 fa04 	bl	8005e20 <_free_r>
 8003a18:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8003a1a:	b111      	cbz	r1, 8003a22 <_reclaim_reent+0x46>
 8003a1c:	4628      	mov	r0, r5
 8003a1e:	f002 f9ff 	bl	8005e20 <_free_r>
 8003a22:	f8d5 1148 	ldr.w	r1, [r5, #328]	; 0x148
 8003a26:	b159      	cbz	r1, 8003a40 <_reclaim_reent+0x64>
 8003a28:	f505 76a6 	add.w	r6, r5, #332	; 0x14c
 8003a2c:	42b1      	cmp	r1, r6
 8003a2e:	d101      	bne.n	8003a34 <_reclaim_reent+0x58>
 8003a30:	e006      	b.n	8003a40 <_reclaim_reent+0x64>
 8003a32:	4621      	mov	r1, r4
 8003a34:	680c      	ldr	r4, [r1, #0]
 8003a36:	4628      	mov	r0, r5
 8003a38:	f002 f9f2 	bl	8005e20 <_free_r>
 8003a3c:	42a6      	cmp	r6, r4
 8003a3e:	d1f8      	bne.n	8003a32 <_reclaim_reent+0x56>
 8003a40:	6d69      	ldr	r1, [r5, #84]	; 0x54
 8003a42:	b111      	cbz	r1, 8003a4a <_reclaim_reent+0x6e>
 8003a44:	4628      	mov	r0, r5
 8003a46:	f002 f9eb 	bl	8005e20 <_free_r>
 8003a4a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8003a4c:	b903      	cbnz	r3, 8003a50 <_reclaim_reent+0x74>
 8003a4e:	bd70      	pop	{r4, r5, r6, pc}
 8003a50:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8003a52:	4628      	mov	r0, r5
 8003a54:	4798      	blx	r3
 8003a56:	f8d5 12e0 	ldr.w	r1, [r5, #736]	; 0x2e0
 8003a5a:	2900      	cmp	r1, #0
 8003a5c:	d0f7      	beq.n	8003a4e <_reclaim_reent+0x72>
 8003a5e:	4628      	mov	r0, r5
 8003a60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003a64:	e7ac      	b.n	80039c0 <cleanup_glue>
 8003a66:	bf00      	nop
 8003a68:	200000a0 	.word	0x200000a0

08003a6c <_wrapup_reent>:
 8003a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a6e:	4607      	mov	r7, r0
 8003a70:	b1b0      	cbz	r0, 8003aa0 <_wrapup_reent+0x34>
 8003a72:	f8d7 6148 	ldr.w	r6, [r7, #328]	; 0x148
 8003a76:	b176      	cbz	r6, 8003a96 <_wrapup_reent+0x2a>
 8003a78:	6875      	ldr	r5, [r6, #4]
 8003a7a:	1e6c      	subs	r4, r5, #1
 8003a7c:	d408      	bmi.n	8003a90 <_wrapup_reent+0x24>
 8003a7e:	3502      	adds	r5, #2
 8003a80:	eb06 0585 	add.w	r5, r6, r5, lsl #2
 8003a84:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8003a88:	3c01      	subs	r4, #1
 8003a8a:	4798      	blx	r3
 8003a8c:	1c63      	adds	r3, r4, #1
 8003a8e:	d1f9      	bne.n	8003a84 <_wrapup_reent+0x18>
 8003a90:	6836      	ldr	r6, [r6, #0]
 8003a92:	2e00      	cmp	r6, #0
 8003a94:	d1f0      	bne.n	8003a78 <_wrapup_reent+0xc>
 8003a96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a98:	b10b      	cbz	r3, 8003a9e <_wrapup_reent+0x32>
 8003a9a:	4638      	mov	r0, r7
 8003a9c:	4798      	blx	r3
 8003a9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003aa0:	4b01      	ldr	r3, [pc, #4]	; (8003aa8 <_wrapup_reent+0x3c>)
 8003aa2:	681f      	ldr	r7, [r3, #0]
 8003aa4:	e7e5      	b.n	8003a72 <_wrapup_reent+0x6>
 8003aa6:	bf00      	nop
 8003aa8:	200000a0 	.word	0x200000a0

08003aac <_sprintf_r>:
 8003aac:	b40c      	push	{r2, r3}
 8003aae:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ab0:	b09d      	sub	sp, #116	; 0x74
 8003ab2:	ac22      	add	r4, sp, #136	; 0x88
 8003ab4:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 8003ab8:	f854 2b04 	ldr.w	r2, [r4], #4
 8003abc:	9101      	str	r1, [sp, #4]
 8003abe:	460e      	mov	r6, r1
 8003ac0:	4623      	mov	r3, r4
 8003ac2:	9503      	str	r5, [sp, #12]
 8003ac4:	9506      	str	r5, [sp, #24]
 8003ac6:	a901      	add	r1, sp, #4
 8003ac8:	f44f 7702 	mov.w	r7, #520	; 0x208
 8003acc:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8003ad0:	f8ad 7010 	strh.w	r7, [sp, #16]
 8003ad4:	9605      	str	r6, [sp, #20]
 8003ad6:	f8ad 5012 	strh.w	r5, [sp, #18]
 8003ada:	941b      	str	r4, [sp, #108]	; 0x6c
 8003adc:	f000 f830 	bl	8003b40 <_svfprintf_r>
 8003ae0:	9b01      	ldr	r3, [sp, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	701a      	strb	r2, [r3, #0]
 8003ae6:	b01d      	add	sp, #116	; 0x74
 8003ae8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8003aec:	b002      	add	sp, #8
 8003aee:	4770      	bx	lr

08003af0 <sprintf>:
 8003af0:	b40e      	push	{r1, r2, r3}
 8003af2:	b570      	push	{r4, r5, r6, lr}
 8003af4:	b09d      	sub	sp, #116	; 0x74
 8003af6:	ac21      	add	r4, sp, #132	; 0x84
 8003af8:	f240 03a0 	movw	r3, #160	; 0xa0
 8003afc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003b00:	f854 2b04 	ldr.w	r2, [r4], #4
 8003b04:	4606      	mov	r6, r0
 8003b06:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 8003b0a:	6818      	ldr	r0, [r3, #0]
 8003b0c:	9503      	str	r5, [sp, #12]
 8003b0e:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003b12:	f8ad 3010 	strh.w	r3, [sp, #16]
 8003b16:	9506      	str	r5, [sp, #24]
 8003b18:	4623      	mov	r3, r4
 8003b1a:	a901      	add	r1, sp, #4
 8003b1c:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8003b20:	9601      	str	r6, [sp, #4]
 8003b22:	9605      	str	r6, [sp, #20]
 8003b24:	f8ad 5012 	strh.w	r5, [sp, #18]
 8003b28:	941b      	str	r4, [sp, #108]	; 0x6c
 8003b2a:	f000 f809 	bl	8003b40 <_svfprintf_r>
 8003b2e:	9b01      	ldr	r3, [sp, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	701a      	strb	r2, [r3, #0]
 8003b34:	b01d      	add	sp, #116	; 0x74
 8003b36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003b3a:	b003      	add	sp, #12
 8003b3c:	4770      	bx	lr
 8003b3e:	bf00      	nop

08003b40 <_svfprintf_r>:
 8003b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b44:	b0c5      	sub	sp, #276	; 0x114
 8003b46:	468a      	mov	sl, r1
 8003b48:	4614      	mov	r4, r2
 8003b4a:	930e      	str	r3, [sp, #56]	; 0x38
 8003b4c:	900f      	str	r0, [sp, #60]	; 0x3c
 8003b4e:	f002 fa5f 	bl	8006010 <_localeconv_r>
 8003b52:	6800      	ldr	r0, [r0, #0]
 8003b54:	9017      	str	r0, [sp, #92]	; 0x5c
 8003b56:	f003 fb35 	bl	80071c4 <strlen>
 8003b5a:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8003b5e:	901a      	str	r0, [sp, #104]	; 0x68
 8003b60:	2100      	movs	r1, #0
 8003b62:	2000      	movs	r0, #0
 8003b64:	061a      	lsls	r2, r3, #24
 8003b66:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
 8003b6a:	d504      	bpl.n	8003b76 <_svfprintf_r+0x36>
 8003b6c:	f8da 3010 	ldr.w	r3, [sl, #16]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	f001 8004 	beq.w	8004b7e <_svfprintf_r+0x103e>
 8003b76:	2300      	movs	r3, #0
 8003b78:	f10d 00e3 	add.w	r0, sp, #227	; 0xe3
 8003b7c:	f10d 0be4 	add.w	fp, sp, #228	; 0xe4
 8003b80:	a91f      	add	r1, sp, #124	; 0x7c
 8003b82:	9310      	str	r3, [sp, #64]	; 0x40
 8003b84:	933b      	str	r3, [sp, #236]	; 0xec
 8003b86:	933a      	str	r3, [sp, #232]	; 0xe8
 8003b88:	931c      	str	r3, [sp, #112]	; 0x70
 8003b8a:	931b      	str	r3, [sp, #108]	; 0x6c
 8003b8c:	930c      	str	r3, [sp, #48]	; 0x30
 8003b8e:	ebc0 030b 	rsb	r3, r0, fp
 8003b92:	9007      	str	r0, [sp, #28]
 8003b94:	9139      	str	r1, [sp, #228]	; 0xe4
 8003b96:	9409      	str	r4, [sp, #36]	; 0x24
 8003b98:	460e      	mov	r6, r1
 8003b9a:	931d      	str	r3, [sp, #116]	; 0x74
 8003b9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003b9e:	7803      	ldrb	r3, [r0, #0]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	bf18      	it	ne
 8003ba4:	2b25      	cmpne	r3, #37	; 0x25
 8003ba6:	f000 80af 	beq.w	8003d08 <_svfprintf_r+0x1c8>
 8003baa:	4607      	mov	r7, r0
 8003bac:	f817 3f01 	ldrb.w	r3, [r7, #1]!
 8003bb0:	2b25      	cmp	r3, #37	; 0x25
 8003bb2:	bf18      	it	ne
 8003bb4:	2b00      	cmpne	r3, #0
 8003bb6:	d1f9      	bne.n	8003bac <_svfprintf_r+0x6c>
 8003bb8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003bba:	ebb7 0801 	subs.w	r8, r7, r1
 8003bbe:	d00e      	beq.n	8003bde <_svfprintf_r+0x9e>
 8003bc0:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003bc2:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003bc4:	6031      	str	r1, [r6, #0]
 8003bc6:	3401      	adds	r4, #1
 8003bc8:	4445      	add	r5, r8
 8003bca:	2c07      	cmp	r4, #7
 8003bcc:	f8c6 8004 	str.w	r8, [r6, #4]
 8003bd0:	953b      	str	r5, [sp, #236]	; 0xec
 8003bd2:	943a      	str	r4, [sp, #232]	; 0xe8
 8003bd4:	dc7c      	bgt.n	8003cd0 <_svfprintf_r+0x190>
 8003bd6:	3608      	adds	r6, #8
 8003bd8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003bda:	4442      	add	r2, r8
 8003bdc:	920c      	str	r2, [sp, #48]	; 0x30
 8003bde:	783b      	ldrb	r3, [r7, #0]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d07d      	beq.n	8003ce0 <_svfprintf_r+0x1a0>
 8003be4:	3701      	adds	r7, #1
 8003be6:	9709      	str	r7, [sp, #36]	; 0x24
 8003be8:	2300      	movs	r3, #0
 8003bea:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003bec:	930b      	str	r3, [sp, #44]	; 0x2c
 8003bee:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
 8003bf2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003bf6:	9308      	str	r3, [sp, #32]
 8003bf8:	2720      	movs	r7, #32
 8003bfa:	252b      	movs	r5, #43	; 0x2b
 8003bfc:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003c00:	f1a3 0220 	sub.w	r2, r3, #32
 8003c04:	2a58      	cmp	r2, #88	; 0x58
 8003c06:	f200 823b 	bhi.w	8004080 <_svfprintf_r+0x540>
 8003c0a:	e8df f012 	tbh	[pc, r2, lsl #1]
 8003c0e:	024c      	.short	0x024c
 8003c10:	02390239 	.word	0x02390239
 8003c14:	02390254 	.word	0x02390254
 8003c18:	02390239 	.word	0x02390239
 8003c1c:	02390239 	.word	0x02390239
 8003c20:	02590239 	.word	0x02590239
 8003c24:	0239007f 	.word	0x0239007f
 8003c28:	0082005c 	.word	0x0082005c
 8003c2c:	009d0239 	.word	0x009d0239
 8003c30:	00a200a2 	.word	0x00a200a2
 8003c34:	00a200a2 	.word	0x00a200a2
 8003c38:	00a200a2 	.word	0x00a200a2
 8003c3c:	00a200a2 	.word	0x00a200a2
 8003c40:	023900a2 	.word	0x023900a2
 8003c44:	02390239 	.word	0x02390239
 8003c48:	02390239 	.word	0x02390239
 8003c4c:	02390239 	.word	0x02390239
 8003c50:	02390239 	.word	0x02390239
 8003c54:	00b50239 	.word	0x00b50239
 8003c58:	02390154 	.word	0x02390154
 8003c5c:	02390154 	.word	0x02390154
 8003c60:	02390239 	.word	0x02390239
 8003c64:	018b0239 	.word	0x018b0239
 8003c68:	02390239 	.word	0x02390239
 8003c6c:	02390190 	.word	0x02390190
 8003c70:	02390239 	.word	0x02390239
 8003c74:	02390239 	.word	0x02390239
 8003c78:	023901a7 	.word	0x023901a7
 8003c7c:	01ba0239 	.word	0x01ba0239
 8003c80:	02390239 	.word	0x02390239
 8003c84:	02390239 	.word	0x02390239
 8003c88:	02390239 	.word	0x02390239
 8003c8c:	02390239 	.word	0x02390239
 8003c90:	02390239 	.word	0x02390239
 8003c94:	02780293 	.word	0x02780293
 8003c98:	01540154 	.word	0x01540154
 8003c9c:	028e0154 	.word	0x028e0154
 8003ca0:	02390278 	.word	0x02390278
 8003ca4:	02130239 	.word	0x02130239
 8003ca8:	02180239 	.word	0x02180239
 8003cac:	02a50224 	.word	0x02a50224
 8003cb0:	023901de 	.word	0x023901de
 8003cb4:	023901e3 	.word	0x023901e3
 8003cb8:	02390264 	.word	0x02390264
 8003cbc:	02c70239 	.word	0x02c70239
 8003cc0:	4252      	negs	r2, r2
 8003cc2:	920b      	str	r2, [sp, #44]	; 0x2c
 8003cc4:	930e      	str	r3, [sp, #56]	; 0x38
 8003cc6:	9b08      	ldr	r3, [sp, #32]
 8003cc8:	f043 0304 	orr.w	r3, r3, #4
 8003ccc:	9308      	str	r3, [sp, #32]
 8003cce:	e795      	b.n	8003bfc <_svfprintf_r+0xbc>
 8003cd0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8003cd2:	4651      	mov	r1, sl
 8003cd4:	465a      	mov	r2, fp
 8003cd6:	f003 faa5 	bl	8007224 <__ssprint_r>
 8003cda:	b940      	cbnz	r0, 8003cee <_svfprintf_r+0x1ae>
 8003cdc:	ae1f      	add	r6, sp, #124	; 0x7c
 8003cde:	e77b      	b.n	8003bd8 <_svfprintf_r+0x98>
 8003ce0:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 8003ce2:	b123      	cbz	r3, 8003cee <_svfprintf_r+0x1ae>
 8003ce4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8003ce6:	4651      	mov	r1, sl
 8003ce8:	aa39      	add	r2, sp, #228	; 0xe4
 8003cea:	f003 fa9b 	bl	8007224 <__ssprint_r>
 8003cee:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8003cf2:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003cf6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003cf8:	bf18      	it	ne
 8003cfa:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 8003cfe:	930c      	str	r3, [sp, #48]	; 0x30
 8003d00:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003d02:	b045      	add	sp, #276	; 0x114
 8003d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d08:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8003d0a:	e768      	b.n	8003bde <_svfprintf_r+0x9e>
 8003d0c:	f88d 510f 	strb.w	r5, [sp, #271]	; 0x10f
 8003d10:	e774      	b.n	8003bfc <_svfprintf_r+0xbc>
 8003d12:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003d16:	2b2a      	cmp	r3, #42	; 0x2a
 8003d18:	f001 804c 	beq.w	8004db4 <_svfprintf_r+0x1274>
 8003d1c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003d20:	2400      	movs	r4, #0
 8003d22:	2a09      	cmp	r2, #9
 8003d24:	f63f af6c 	bhi.w	8003c00 <_svfprintf_r+0xc0>
 8003d28:	4601      	mov	r1, r0
 8003d2a:	2400      	movs	r4, #0
 8003d2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d30:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8003d34:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8003d38:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003d3c:	2a09      	cmp	r2, #9
 8003d3e:	4608      	mov	r0, r1
 8003d40:	d9f4      	bls.n	8003d2c <_svfprintf_r+0x1ec>
 8003d42:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
 8003d46:	e75b      	b.n	8003c00 <_svfprintf_r+0xc0>
 8003d48:	9a08      	ldr	r2, [sp, #32]
 8003d4a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003d4e:	9208      	str	r2, [sp, #32]
 8003d50:	e754      	b.n	8003bfc <_svfprintf_r+0xbc>
 8003d52:	4601      	mov	r1, r0
 8003d54:	2200      	movs	r2, #0
 8003d56:	46b4      	mov	ip, r6
 8003d58:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8003d5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d60:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8003d64:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003d68:	2e09      	cmp	r6, #9
 8003d6a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8003d6e:	4608      	mov	r0, r1
 8003d70:	d9f2      	bls.n	8003d58 <_svfprintf_r+0x218>
 8003d72:	4666      	mov	r6, ip
 8003d74:	920b      	str	r2, [sp, #44]	; 0x2c
 8003d76:	e743      	b.n	8003c00 <_svfprintf_r+0xc0>
 8003d78:	9315      	str	r3, [sp, #84]	; 0x54
 8003d7a:	9b08      	ldr	r3, [sp, #32]
 8003d7c:	9009      	str	r0, [sp, #36]	; 0x24
 8003d7e:	f043 0310 	orr.w	r3, r3, #16
 8003d82:	9308      	str	r3, [sp, #32]
 8003d84:	9808      	ldr	r0, [sp, #32]
 8003d86:	06c3      	lsls	r3, r0, #27
 8003d88:	f100 81bf 	bmi.w	800410a <_svfprintf_r+0x5ca>
 8003d8c:	9a08      	ldr	r2, [sp, #32]
 8003d8e:	0655      	lsls	r5, r2, #25
 8003d90:	f140 81bb 	bpl.w	800410a <_svfprintf_r+0x5ca>
 8003d94:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003d96:	f9b0 3000 	ldrsh.w	r3, [r0]
 8003d9a:	3004      	adds	r0, #4
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	900e      	str	r0, [sp, #56]	; 0x38
 8003da0:	f2c0 81ba 	blt.w	8004118 <_svfprintf_r+0x5d8>
 8003da4:	bf0c      	ite	eq
 8003da6:	2100      	moveq	r1, #0
 8003da8:	2101      	movne	r1, #1
 8003daa:	2201      	movs	r2, #1
 8003dac:	2c00      	cmp	r4, #0
 8003dae:	bfa2      	ittt	ge
 8003db0:	9808      	ldrge	r0, [sp, #32]
 8003db2:	f020 0080 	bicge.w	r0, r0, #128	; 0x80
 8003db6:	9008      	strge	r0, [sp, #32]
 8003db8:	2c00      	cmp	r4, #0
 8003dba:	bf18      	it	ne
 8003dbc:	f041 0101 	orrne.w	r1, r1, #1
 8003dc0:	2900      	cmp	r1, #0
 8003dc2:	f000 8323 	beq.w	800440c <_svfprintf_r+0x8cc>
 8003dc6:	2a01      	cmp	r2, #1
 8003dc8:	f000 845f 	beq.w	800468a <_svfprintf_r+0xb4a>
 8003dcc:	2a02      	cmp	r2, #2
 8003dce:	bf18      	it	ne
 8003dd0:	465a      	movne	r2, fp
 8003dd2:	d102      	bne.n	8003dda <_svfprintf_r+0x29a>
 8003dd4:	f000 bc48 	b.w	8004668 <_svfprintf_r+0xb28>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	f003 0107 	and.w	r1, r3, #7
 8003dde:	3130      	adds	r1, #48	; 0x30
 8003de0:	1e50      	subs	r0, r2, #1
 8003de2:	08db      	lsrs	r3, r3, #3
 8003de4:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003de8:	d1f6      	bne.n	8003dd8 <_svfprintf_r+0x298>
 8003dea:	9b08      	ldr	r3, [sp, #32]
 8003dec:	9011      	str	r0, [sp, #68]	; 0x44
 8003dee:	07dd      	lsls	r5, r3, #31
 8003df0:	d507      	bpl.n	8003e02 <_svfprintf_r+0x2c2>
 8003df2:	2930      	cmp	r1, #48	; 0x30
 8003df4:	f000 8733 	beq.w	8004c5e <_svfprintf_r+0x111e>
 8003df8:	1e90      	subs	r0, r2, #2
 8003dfa:	2330      	movs	r3, #48	; 0x30
 8003dfc:	9011      	str	r0, [sp, #68]	; 0x44
 8003dfe:	f802 3c02 	strb.w	r3, [r2, #-2]
 8003e02:	ebc0 030b 	rsb	r3, r0, fp
 8003e06:	930d      	str	r3, [sp, #52]	; 0x34
 8003e08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003e0a:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 8003e0e:	9412      	str	r4, [sp, #72]	; 0x48
 8003e10:	42a3      	cmp	r3, r4
 8003e12:	bfb8      	it	lt
 8003e14:	4623      	movlt	r3, r4
 8003e16:	2000      	movs	r0, #0
 8003e18:	930a      	str	r3, [sp, #40]	; 0x28
 8003e1a:	9016      	str	r0, [sp, #88]	; 0x58
 8003e1c:	b111      	cbz	r1, 8003e24 <_svfprintf_r+0x2e4>
 8003e1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e20:	3301      	adds	r3, #1
 8003e22:	930a      	str	r3, [sp, #40]	; 0x28
 8003e24:	9b08      	ldr	r3, [sp, #32]
 8003e26:	f013 0302 	ands.w	r3, r3, #2
 8003e2a:	9313      	str	r3, [sp, #76]	; 0x4c
 8003e2c:	d002      	beq.n	8003e34 <_svfprintf_r+0x2f4>
 8003e2e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003e30:	3002      	adds	r0, #2
 8003e32:	900a      	str	r0, [sp, #40]	; 0x28
 8003e34:	9b08      	ldr	r3, [sp, #32]
 8003e36:	f013 0384 	ands.w	r3, r3, #132	; 0x84
 8003e3a:	9314      	str	r3, [sp, #80]	; 0x50
 8003e3c:	f040 81bb 	bne.w	80041b6 <_svfprintf_r+0x676>
 8003e40:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003e42:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003e44:	1a47      	subs	r7, r0, r1
 8003e46:	2f00      	cmp	r7, #0
 8003e48:	f340 81b5 	ble.w	80041b6 <_svfprintf_r+0x676>
 8003e4c:	2f10      	cmp	r7, #16
 8003e4e:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003e50:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003e52:	f8df 8344 	ldr.w	r8, [pc, #836]	; 8004198 <_svfprintf_r+0x658>
 8003e56:	dd22      	ble.n	8003e9e <_svfprintf_r+0x35e>
 8003e58:	4623      	mov	r3, r4
 8003e5a:	f04f 0910 	mov.w	r9, #16
 8003e5e:	4644      	mov	r4, r8
 8003e60:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8003e64:	e003      	b.n	8003e6e <_svfprintf_r+0x32e>
 8003e66:	3f10      	subs	r7, #16
 8003e68:	3608      	adds	r6, #8
 8003e6a:	2f10      	cmp	r7, #16
 8003e6c:	dd15      	ble.n	8003e9a <_svfprintf_r+0x35a>
 8003e6e:	3301      	adds	r3, #1
 8003e70:	3510      	adds	r5, #16
 8003e72:	2b07      	cmp	r3, #7
 8003e74:	e886 0210 	stmia.w	r6, {r4, r9}
 8003e78:	953b      	str	r5, [sp, #236]	; 0xec
 8003e7a:	933a      	str	r3, [sp, #232]	; 0xe8
 8003e7c:	ddf3      	ble.n	8003e66 <_svfprintf_r+0x326>
 8003e7e:	4640      	mov	r0, r8
 8003e80:	4651      	mov	r1, sl
 8003e82:	465a      	mov	r2, fp
 8003e84:	f003 f9ce 	bl	8007224 <__ssprint_r>
 8003e88:	2800      	cmp	r0, #0
 8003e8a:	f47f af30 	bne.w	8003cee <_svfprintf_r+0x1ae>
 8003e8e:	3f10      	subs	r7, #16
 8003e90:	2f10      	cmp	r7, #16
 8003e92:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003e94:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8003e96:	ae1f      	add	r6, sp, #124	; 0x7c
 8003e98:	dce9      	bgt.n	8003e6e <_svfprintf_r+0x32e>
 8003e9a:	46a0      	mov	r8, r4
 8003e9c:	461c      	mov	r4, r3
 8003e9e:	3401      	adds	r4, #1
 8003ea0:	19ed      	adds	r5, r5, r7
 8003ea2:	2c07      	cmp	r4, #7
 8003ea4:	f8c6 8000 	str.w	r8, [r6]
 8003ea8:	6077      	str	r7, [r6, #4]
 8003eaa:	953b      	str	r5, [sp, #236]	; 0xec
 8003eac:	943a      	str	r4, [sp, #232]	; 0xe8
 8003eae:	f300 8414 	bgt.w	80046da <_svfprintf_r+0xb9a>
 8003eb2:	3608      	adds	r6, #8
 8003eb4:	e180      	b.n	80041b8 <_svfprintf_r+0x678>
 8003eb6:	9009      	str	r0, [sp, #36]	; 0x24
 8003eb8:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003eba:	9315      	str	r3, [sp, #84]	; 0x54
 8003ebc:	1dc3      	adds	r3, r0, #7
 8003ebe:	f023 0307 	bic.w	r3, r3, #7
 8003ec2:	f103 0108 	add.w	r1, r3, #8
 8003ec6:	910e      	str	r1, [sp, #56]	; 0x38
 8003ec8:	f8d3 8000 	ldr.w	r8, [r3]
 8003ecc:	685d      	ldr	r5, [r3, #4]
 8003ece:	4642      	mov	r2, r8
 8003ed0:	462b      	mov	r3, r5
 8003ed2:	4629      	mov	r1, r5
 8003ed4:	4640      	mov	r0, r8
 8003ed6:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
 8003eda:	f003 f83b 	bl	8006f54 <__fpclassifyd>
 8003ede:	2801      	cmp	r0, #1
 8003ee0:	4629      	mov	r1, r5
 8003ee2:	4640      	mov	r0, r8
 8003ee4:	f040 84d0 	bne.w	8004888 <_svfprintf_r+0xd48>
 8003ee8:	2200      	movs	r2, #0
 8003eea:	2300      	movs	r3, #0
 8003eec:	f004 fd62 	bl	80089b4 <__aeabi_dcmplt>
 8003ef0:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 8003ef4:	b110      	cbz	r0, 8003efc <_svfprintf_r+0x3bc>
 8003ef6:	212d      	movs	r1, #45	; 0x2d
 8003ef8:	f88d 110f 	strb.w	r1, [sp, #271]	; 0x10f
 8003efc:	2303      	movs	r3, #3
 8003efe:	930a      	str	r3, [sp, #40]	; 0x28
 8003f00:	2300      	movs	r3, #0
 8003f02:	9312      	str	r3, [sp, #72]	; 0x48
 8003f04:	4aa0      	ldr	r2, [pc, #640]	; (8004188 <_svfprintf_r+0x648>)
 8003f06:	4ba1      	ldr	r3, [pc, #644]	; (800418c <_svfprintf_r+0x64c>)
 8003f08:	9815      	ldr	r0, [sp, #84]	; 0x54
 8003f0a:	2847      	cmp	r0, #71	; 0x47
 8003f0c:	bfd8      	it	le
 8003f0e:	461a      	movle	r2, r3
 8003f10:	9211      	str	r2, [sp, #68]	; 0x44
 8003f12:	9a08      	ldr	r2, [sp, #32]
 8003f14:	2303      	movs	r3, #3
 8003f16:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f1a:	930d      	str	r3, [sp, #52]	; 0x34
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	9208      	str	r2, [sp, #32]
 8003f20:	9316      	str	r3, [sp, #88]	; 0x58
 8003f22:	e77b      	b.n	8003e1c <_svfprintf_r+0x2dc>
 8003f24:	9b08      	ldr	r3, [sp, #32]
 8003f26:	f043 0308 	orr.w	r3, r3, #8
 8003f2a:	9308      	str	r3, [sp, #32]
 8003f2c:	e666      	b.n	8003bfc <_svfprintf_r+0xbc>
 8003f2e:	9908      	ldr	r1, [sp, #32]
 8003f30:	9009      	str	r0, [sp, #36]	; 0x24
 8003f32:	f041 0110 	orr.w	r1, r1, #16
 8003f36:	9108      	str	r1, [sp, #32]
 8003f38:	9a08      	ldr	r2, [sp, #32]
 8003f3a:	9315      	str	r3, [sp, #84]	; 0x54
 8003f3c:	f012 0110 	ands.w	r1, r2, #16
 8003f40:	f000 8090 	beq.w	8004064 <_svfprintf_r+0x524>
 8003f44:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003f46:	6803      	ldr	r3, [r0, #0]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	1a99      	subs	r1, r3, r2
 8003f4c:	bf18      	it	ne
 8003f4e:	2101      	movne	r1, #1
 8003f50:	3004      	adds	r0, #4
 8003f52:	900e      	str	r0, [sp, #56]	; 0x38
 8003f54:	2000      	movs	r0, #0
 8003f56:	f88d 010f 	strb.w	r0, [sp, #271]	; 0x10f
 8003f5a:	e727      	b.n	8003dac <_svfprintf_r+0x26c>
 8003f5c:	9908      	ldr	r1, [sp, #32]
 8003f5e:	9009      	str	r0, [sp, #36]	; 0x24
 8003f60:	f041 0110 	orr.w	r1, r1, #16
 8003f64:	9108      	str	r1, [sp, #32]
 8003f66:	9a08      	ldr	r2, [sp, #32]
 8003f68:	9315      	str	r3, [sp, #84]	; 0x54
 8003f6a:	06d0      	lsls	r0, r2, #27
 8003f6c:	f140 80b9 	bpl.w	80040e2 <_svfprintf_r+0x5a2>
 8003f70:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003f72:	6803      	ldr	r3, [r0, #0]
 8003f74:	2201      	movs	r2, #1
 8003f76:	1c19      	adds	r1, r3, #0
 8003f78:	bf18      	it	ne
 8003f7a:	2101      	movne	r1, #1
 8003f7c:	3004      	adds	r0, #4
 8003f7e:	900e      	str	r0, [sp, #56]	; 0x38
 8003f80:	e7e8      	b.n	8003f54 <_svfprintf_r+0x414>
 8003f82:	4a83      	ldr	r2, [pc, #524]	; (8004190 <_svfprintf_r+0x650>)
 8003f84:	9315      	str	r3, [sp, #84]	; 0x54
 8003f86:	9b08      	ldr	r3, [sp, #32]
 8003f88:	921c      	str	r2, [sp, #112]	; 0x70
 8003f8a:	06da      	lsls	r2, r3, #27
 8003f8c:	9009      	str	r0, [sp, #36]	; 0x24
 8003f8e:	f100 810d 	bmi.w	80041ac <_svfprintf_r+0x66c>
 8003f92:	9908      	ldr	r1, [sp, #32]
 8003f94:	064b      	lsls	r3, r1, #25
 8003f96:	f140 8109 	bpl.w	80041ac <_svfprintf_r+0x66c>
 8003f9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003f9c:	8813      	ldrh	r3, [r2, #0]
 8003f9e:	3204      	adds	r2, #4
 8003fa0:	920e      	str	r2, [sp, #56]	; 0x38
 8003fa2:	1c19      	adds	r1, r3, #0
 8003fa4:	9a08      	ldr	r2, [sp, #32]
 8003fa6:	bf18      	it	ne
 8003fa8:	2101      	movne	r1, #1
 8003faa:	420a      	tst	r2, r1
 8003fac:	f000 83ca 	beq.w	8004744 <_svfprintf_r+0xc04>
 8003fb0:	9908      	ldr	r1, [sp, #32]
 8003fb2:	9815      	ldr	r0, [sp, #84]	; 0x54
 8003fb4:	2230      	movs	r2, #48	; 0x30
 8003fb6:	f041 0102 	orr.w	r1, r1, #2
 8003fba:	f88d 210c 	strb.w	r2, [sp, #268]	; 0x10c
 8003fbe:	9108      	str	r1, [sp, #32]
 8003fc0:	f88d 010d 	strb.w	r0, [sp, #269]	; 0x10d
 8003fc4:	2101      	movs	r1, #1
 8003fc6:	2202      	movs	r2, #2
 8003fc8:	e7c4      	b.n	8003f54 <_svfprintf_r+0x414>
 8003fca:	9b08      	ldr	r3, [sp, #32]
 8003fcc:	f043 0310 	orr.w	r3, r3, #16
 8003fd0:	9308      	str	r3, [sp, #32]
 8003fd2:	e613      	b.n	8003bfc <_svfprintf_r+0xbc>
 8003fd4:	2500      	movs	r5, #0
 8003fd6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003fd8:	f88d 510f 	strb.w	r5, [sp, #271]	; 0x10f
 8003fdc:	9315      	str	r3, [sp, #84]	; 0x54
 8003fde:	6812      	ldr	r2, [r2, #0]
 8003fe0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003fe2:	9009      	str	r0, [sp, #36]	; 0x24
 8003fe4:	9211      	str	r2, [sp, #68]	; 0x44
 8003fe6:	1d1f      	adds	r7, r3, #4
 8003fe8:	2a00      	cmp	r2, #0
 8003fea:	f000 864b 	beq.w	8004c84 <_svfprintf_r+0x1144>
 8003fee:	2c00      	cmp	r4, #0
 8003ff0:	9811      	ldr	r0, [sp, #68]	; 0x44
 8003ff2:	f2c0 8602 	blt.w	8004bfa <_svfprintf_r+0x10ba>
 8003ff6:	4629      	mov	r1, r5
 8003ff8:	4622      	mov	r2, r4
 8003ffa:	f002 fad1 	bl	80065a0 <memchr>
 8003ffe:	2800      	cmp	r0, #0
 8004000:	f000 866f 	beq.w	8004ce2 <_svfprintf_r+0x11a2>
 8004004:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004006:	9512      	str	r5, [sp, #72]	; 0x48
 8004008:	1ac0      	subs	r0, r0, r3
 800400a:	42a0      	cmp	r0, r4
 800400c:	900d      	str	r0, [sp, #52]	; 0x34
 800400e:	bfd1      	iteee	le
 8004010:	9b0d      	ldrle	r3, [sp, #52]	; 0x34
 8004012:	f89d 110f 	ldrbgt.w	r1, [sp, #271]	; 0x10f
 8004016:	970e      	strgt	r7, [sp, #56]	; 0x38
 8004018:	ea24 70e4 	bicgt.w	r0, r4, r4, asr #31
 800401c:	bfd3      	iteet	le
 800401e:	ea23 73e3 	bicle.w	r3, r3, r3, asr #31
 8004022:	900a      	strgt	r0, [sp, #40]	; 0x28
 8004024:	940d      	strgt	r4, [sp, #52]	; 0x34
 8004026:	930a      	strle	r3, [sp, #40]	; 0x28
 8004028:	bfdc      	itt	le
 800402a:	f89d 110f 	ldrble.w	r1, [sp, #271]	; 0x10f
 800402e:	970e      	strle	r7, [sp, #56]	; 0x38
 8004030:	9516      	str	r5, [sp, #88]	; 0x58
 8004032:	e6f3      	b.n	8003e1c <_svfprintf_r+0x2dc>
 8004034:	9a08      	ldr	r2, [sp, #32]
 8004036:	f042 0210 	orr.w	r2, r2, #16
 800403a:	9208      	str	r2, [sp, #32]
 800403c:	e5de      	b.n	8003bfc <_svfprintf_r+0xbc>
 800403e:	9009      	str	r0, [sp, #36]	; 0x24
 8004040:	9808      	ldr	r0, [sp, #32]
 8004042:	06c3      	lsls	r3, r0, #27
 8004044:	f140 843f 	bpl.w	80048c6 <_svfprintf_r+0xd86>
 8004048:	990e      	ldr	r1, [sp, #56]	; 0x38
 800404a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800404c:	680b      	ldr	r3, [r1, #0]
 800404e:	3104      	adds	r1, #4
 8004050:	910e      	str	r1, [sp, #56]	; 0x38
 8004052:	601a      	str	r2, [r3, #0]
 8004054:	e5a2      	b.n	8003b9c <_svfprintf_r+0x5c>
 8004056:	9a08      	ldr	r2, [sp, #32]
 8004058:	9009      	str	r0, [sp, #36]	; 0x24
 800405a:	f012 0110 	ands.w	r1, r2, #16
 800405e:	9315      	str	r3, [sp, #84]	; 0x54
 8004060:	f47f af70 	bne.w	8003f44 <_svfprintf_r+0x404>
 8004064:	9b08      	ldr	r3, [sp, #32]
 8004066:	f013 0240 	ands.w	r2, r3, #64	; 0x40
 800406a:	f000 8437 	beq.w	80048dc <_svfprintf_r+0xd9c>
 800406e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8004070:	8803      	ldrh	r3, [r0, #0]
 8004072:	460a      	mov	r2, r1
 8004074:	1c19      	adds	r1, r3, #0
 8004076:	bf18      	it	ne
 8004078:	2101      	movne	r1, #1
 800407a:	3004      	adds	r0, #4
 800407c:	900e      	str	r0, [sp, #56]	; 0x38
 800407e:	e769      	b.n	8003f54 <_svfprintf_r+0x414>
 8004080:	9009      	str	r0, [sp, #36]	; 0x24
 8004082:	9315      	str	r3, [sp, #84]	; 0x54
 8004084:	2b00      	cmp	r3, #0
 8004086:	f43f ae2b 	beq.w	8003ce0 <_svfprintf_r+0x1a0>
 800408a:	2101      	movs	r1, #1
 800408c:	f88d 30bc 	strb.w	r3, [sp, #188]	; 0xbc
 8004090:	aa2f      	add	r2, sp, #188	; 0xbc
 8004092:	2300      	movs	r3, #0
 8004094:	910a      	str	r1, [sp, #40]	; 0x28
 8004096:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
 800409a:	910d      	str	r1, [sp, #52]	; 0x34
 800409c:	9211      	str	r2, [sp, #68]	; 0x44
 800409e:	2300      	movs	r3, #0
 80040a0:	9312      	str	r3, [sp, #72]	; 0x48
 80040a2:	9316      	str	r3, [sp, #88]	; 0x58
 80040a4:	e6be      	b.n	8003e24 <_svfprintf_r+0x2e4>
 80040a6:	f89d 310f 	ldrb.w	r3, [sp, #271]	; 0x10f
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	f47f ada6 	bne.w	8003bfc <_svfprintf_r+0xbc>
 80040b0:	f88d 710f 	strb.w	r7, [sp, #271]	; 0x10f
 80040b4:	e5a2      	b.n	8003bfc <_svfprintf_r+0xbc>
 80040b6:	9a08      	ldr	r2, [sp, #32]
 80040b8:	f042 0201 	orr.w	r2, r2, #1
 80040bc:	9208      	str	r2, [sp, #32]
 80040be:	e59d      	b.n	8003bfc <_svfprintf_r+0xbc>
 80040c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80040c2:	990e      	ldr	r1, [sp, #56]	; 0x38
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80040c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80040ca:	1d0b      	adds	r3, r1, #4
 80040cc:	2a00      	cmp	r2, #0
 80040ce:	f6ff adf7 	blt.w	8003cc0 <_svfprintf_r+0x180>
 80040d2:	930e      	str	r3, [sp, #56]	; 0x38
 80040d4:	e592      	b.n	8003bfc <_svfprintf_r+0xbc>
 80040d6:	9a08      	ldr	r2, [sp, #32]
 80040d8:	9009      	str	r0, [sp, #36]	; 0x24
 80040da:	06d0      	lsls	r0, r2, #27
 80040dc:	9315      	str	r3, [sp, #84]	; 0x54
 80040de:	f53f af47 	bmi.w	8003f70 <_svfprintf_r+0x430>
 80040e2:	9908      	ldr	r1, [sp, #32]
 80040e4:	0649      	lsls	r1, r1, #25
 80040e6:	f140 83ea 	bpl.w	80048be <_svfprintf_r+0xd7e>
 80040ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80040ec:	8813      	ldrh	r3, [r2, #0]
 80040ee:	2201      	movs	r2, #1
 80040f0:	980e      	ldr	r0, [sp, #56]	; 0x38
 80040f2:	1c19      	adds	r1, r3, #0
 80040f4:	bf18      	it	ne
 80040f6:	2101      	movne	r1, #1
 80040f8:	3004      	adds	r0, #4
 80040fa:	900e      	str	r0, [sp, #56]	; 0x38
 80040fc:	e72a      	b.n	8003f54 <_svfprintf_r+0x414>
 80040fe:	9009      	str	r0, [sp, #36]	; 0x24
 8004100:	9808      	ldr	r0, [sp, #32]
 8004102:	9315      	str	r3, [sp, #84]	; 0x54
 8004104:	06c3      	lsls	r3, r0, #27
 8004106:	f57f ae41 	bpl.w	8003d8c <_svfprintf_r+0x24c>
 800410a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800410c:	680b      	ldr	r3, [r1, #0]
 800410e:	3104      	adds	r1, #4
 8004110:	2b00      	cmp	r3, #0
 8004112:	910e      	str	r1, [sp, #56]	; 0x38
 8004114:	f6bf ae46 	bge.w	8003da4 <_svfprintf_r+0x264>
 8004118:	425b      	negs	r3, r3
 800411a:	222d      	movs	r2, #45	; 0x2d
 800411c:	1c19      	adds	r1, r3, #0
 800411e:	f88d 210f 	strb.w	r2, [sp, #271]	; 0x10f
 8004122:	bf18      	it	ne
 8004124:	2101      	movne	r1, #1
 8004126:	2201      	movs	r2, #1
 8004128:	e640      	b.n	8003dac <_svfprintf_r+0x26c>
 800412a:	9908      	ldr	r1, [sp, #32]
 800412c:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8004130:	9108      	str	r1, [sp, #32]
 8004132:	e563      	b.n	8003bfc <_svfprintf_r+0xbc>
 8004134:	9315      	str	r3, [sp, #84]	; 0x54
 8004136:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004138:	990e      	ldr	r1, [sp, #56]	; 0x38
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	9009      	str	r0, [sp, #36]	; 0x24
 800413e:	2200      	movs	r2, #0
 8004140:	2001      	movs	r0, #1
 8004142:	f88d 210f 	strb.w	r2, [sp, #271]	; 0x10f
 8004146:	3104      	adds	r1, #4
 8004148:	aa2f      	add	r2, sp, #188	; 0xbc
 800414a:	900a      	str	r0, [sp, #40]	; 0x28
 800414c:	910e      	str	r1, [sp, #56]	; 0x38
 800414e:	f88d 30bc 	strb.w	r3, [sp, #188]	; 0xbc
 8004152:	900d      	str	r0, [sp, #52]	; 0x34
 8004154:	9211      	str	r2, [sp, #68]	; 0x44
 8004156:	e7a2      	b.n	800409e <_svfprintf_r+0x55e>
 8004158:	490e      	ldr	r1, [pc, #56]	; (8004194 <_svfprintf_r+0x654>)
 800415a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800415c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800415e:	911c      	str	r1, [sp, #112]	; 0x70
 8004160:	9908      	ldr	r1, [sp, #32]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	9009      	str	r0, [sp, #36]	; 0x24
 8004166:	3204      	adds	r2, #4
 8004168:	f041 0102 	orr.w	r1, r1, #2
 800416c:	2078      	movs	r0, #120	; 0x78
 800416e:	920e      	str	r2, [sp, #56]	; 0x38
 8004170:	9108      	str	r1, [sp, #32]
 8004172:	2230      	movs	r2, #48	; 0x30
 8004174:	1c19      	adds	r1, r3, #0
 8004176:	f88d 210c 	strb.w	r2, [sp, #268]	; 0x10c
 800417a:	bf18      	it	ne
 800417c:	2101      	movne	r1, #1
 800417e:	f88d 010d 	strb.w	r0, [sp, #269]	; 0x10d
 8004182:	2202      	movs	r2, #2
 8004184:	9015      	str	r0, [sp, #84]	; 0x54
 8004186:	e6e5      	b.n	8003f54 <_svfprintf_r+0x414>
 8004188:	080090d0 	.word	0x080090d0
 800418c:	080090cc 	.word	0x080090cc
 8004190:	080090dc 	.word	0x080090dc
 8004194:	080090f0 	.word	0x080090f0
 8004198:	08008e2c 	.word	0x08008e2c
 800419c:	9315      	str	r3, [sp, #84]	; 0x54
 800419e:	9b08      	ldr	r3, [sp, #32]
 80041a0:	49a4      	ldr	r1, [pc, #656]	; (8004434 <_svfprintf_r+0x8f4>)
 80041a2:	9009      	str	r0, [sp, #36]	; 0x24
 80041a4:	06da      	lsls	r2, r3, #27
 80041a6:	911c      	str	r1, [sp, #112]	; 0x70
 80041a8:	f57f aef3 	bpl.w	8003f92 <_svfprintf_r+0x452>
 80041ac:	980e      	ldr	r0, [sp, #56]	; 0x38
 80041ae:	6803      	ldr	r3, [r0, #0]
 80041b0:	3004      	adds	r0, #4
 80041b2:	900e      	str	r0, [sp, #56]	; 0x38
 80041b4:	e6f5      	b.n	8003fa2 <_svfprintf_r+0x462>
 80041b6:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80041b8:	f89d 310f 	ldrb.w	r3, [sp, #271]	; 0x10f
 80041bc:	b16b      	cbz	r3, 80041da <_svfprintf_r+0x69a>
 80041be:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80041c0:	f20d 130f 	addw	r3, sp, #271	; 0x10f
 80041c4:	3401      	adds	r4, #1
 80041c6:	6033      	str	r3, [r6, #0]
 80041c8:	3501      	adds	r5, #1
 80041ca:	2301      	movs	r3, #1
 80041cc:	2c07      	cmp	r4, #7
 80041ce:	6073      	str	r3, [r6, #4]
 80041d0:	953b      	str	r5, [sp, #236]	; 0xec
 80041d2:	943a      	str	r4, [sp, #232]	; 0xe8
 80041d4:	f300 81f5 	bgt.w	80045c2 <_svfprintf_r+0xa82>
 80041d8:	3608      	adds	r6, #8
 80041da:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80041dc:	b163      	cbz	r3, 80041f8 <_svfprintf_r+0x6b8>
 80041de:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80041e0:	ab43      	add	r3, sp, #268	; 0x10c
 80041e2:	3401      	adds	r4, #1
 80041e4:	6033      	str	r3, [r6, #0]
 80041e6:	3502      	adds	r5, #2
 80041e8:	2302      	movs	r3, #2
 80041ea:	2c07      	cmp	r4, #7
 80041ec:	6073      	str	r3, [r6, #4]
 80041ee:	953b      	str	r5, [sp, #236]	; 0xec
 80041f0:	943a      	str	r4, [sp, #232]	; 0xe8
 80041f2:	f300 81db 	bgt.w	80045ac <_svfprintf_r+0xa6c>
 80041f6:	3608      	adds	r6, #8
 80041f8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80041fa:	2b80      	cmp	r3, #128	; 0x80
 80041fc:	f000 8122 	beq.w	8004444 <_svfprintf_r+0x904>
 8004200:	9812      	ldr	r0, [sp, #72]	; 0x48
 8004202:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004204:	1ac7      	subs	r7, r0, r3
 8004206:	2f00      	cmp	r7, #0
 8004208:	dd32      	ble.n	8004270 <_svfprintf_r+0x730>
 800420a:	2f10      	cmp	r7, #16
 800420c:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 800420e:	f8df 822c 	ldr.w	r8, [pc, #556]	; 800443c <_svfprintf_r+0x8fc>
 8004212:	dd22      	ble.n	800425a <_svfprintf_r+0x71a>
 8004214:	4623      	mov	r3, r4
 8004216:	f04f 0910 	mov.w	r9, #16
 800421a:	4644      	mov	r4, r8
 800421c:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8004220:	e003      	b.n	800422a <_svfprintf_r+0x6ea>
 8004222:	3f10      	subs	r7, #16
 8004224:	3608      	adds	r6, #8
 8004226:	2f10      	cmp	r7, #16
 8004228:	dd15      	ble.n	8004256 <_svfprintf_r+0x716>
 800422a:	3301      	adds	r3, #1
 800422c:	3510      	adds	r5, #16
 800422e:	2b07      	cmp	r3, #7
 8004230:	e886 0210 	stmia.w	r6, {r4, r9}
 8004234:	953b      	str	r5, [sp, #236]	; 0xec
 8004236:	933a      	str	r3, [sp, #232]	; 0xe8
 8004238:	ddf3      	ble.n	8004222 <_svfprintf_r+0x6e2>
 800423a:	4640      	mov	r0, r8
 800423c:	4651      	mov	r1, sl
 800423e:	465a      	mov	r2, fp
 8004240:	f002 fff0 	bl	8007224 <__ssprint_r>
 8004244:	2800      	cmp	r0, #0
 8004246:	f47f ad52 	bne.w	8003cee <_svfprintf_r+0x1ae>
 800424a:	3f10      	subs	r7, #16
 800424c:	2f10      	cmp	r7, #16
 800424e:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004250:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8004252:	ae1f      	add	r6, sp, #124	; 0x7c
 8004254:	dce9      	bgt.n	800422a <_svfprintf_r+0x6ea>
 8004256:	46a0      	mov	r8, r4
 8004258:	461c      	mov	r4, r3
 800425a:	3401      	adds	r4, #1
 800425c:	19ed      	adds	r5, r5, r7
 800425e:	2c07      	cmp	r4, #7
 8004260:	f8c6 8000 	str.w	r8, [r6]
 8004264:	6077      	str	r7, [r6, #4]
 8004266:	953b      	str	r5, [sp, #236]	; 0xec
 8004268:	943a      	str	r4, [sp, #232]	; 0xe8
 800426a:	f300 8194 	bgt.w	8004596 <_svfprintf_r+0xa56>
 800426e:	3608      	adds	r6, #8
 8004270:	9908      	ldr	r1, [sp, #32]
 8004272:	05ca      	lsls	r2, r1, #23
 8004274:	d472      	bmi.n	800435c <_svfprintf_r+0x81c>
 8004276:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8004278:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800427a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800427c:	6073      	str	r3, [r6, #4]
 800427e:	3401      	adds	r4, #1
 8004280:	18ed      	adds	r5, r5, r3
 8004282:	2c07      	cmp	r4, #7
 8004284:	6032      	str	r2, [r6, #0]
 8004286:	953b      	str	r5, [sp, #236]	; 0xec
 8004288:	943a      	str	r4, [sp, #232]	; 0xe8
 800428a:	dc5c      	bgt.n	8004346 <_svfprintf_r+0x806>
 800428c:	3608      	adds	r6, #8
 800428e:	9908      	ldr	r1, [sp, #32]
 8004290:	074b      	lsls	r3, r1, #29
 8004292:	d53e      	bpl.n	8004312 <_svfprintf_r+0x7d2>
 8004294:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004296:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004298:	1ad7      	subs	r7, r2, r3
 800429a:	2f00      	cmp	r7, #0
 800429c:	dd39      	ble.n	8004312 <_svfprintf_r+0x7d2>
 800429e:	2f10      	cmp	r7, #16
 80042a0:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80042a2:	f8df 819c 	ldr.w	r8, [pc, #412]	; 8004440 <_svfprintf_r+0x900>
 80042a6:	dd22      	ble.n	80042ee <_svfprintf_r+0x7ae>
 80042a8:	4623      	mov	r3, r4
 80042aa:	f04f 0910 	mov.w	r9, #16
 80042ae:	4644      	mov	r4, r8
 80042b0:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 80042b4:	e003      	b.n	80042be <_svfprintf_r+0x77e>
 80042b6:	3f10      	subs	r7, #16
 80042b8:	3608      	adds	r6, #8
 80042ba:	2f10      	cmp	r7, #16
 80042bc:	dd15      	ble.n	80042ea <_svfprintf_r+0x7aa>
 80042be:	3301      	adds	r3, #1
 80042c0:	3510      	adds	r5, #16
 80042c2:	2b07      	cmp	r3, #7
 80042c4:	e886 0210 	stmia.w	r6, {r4, r9}
 80042c8:	953b      	str	r5, [sp, #236]	; 0xec
 80042ca:	933a      	str	r3, [sp, #232]	; 0xe8
 80042cc:	ddf3      	ble.n	80042b6 <_svfprintf_r+0x776>
 80042ce:	4640      	mov	r0, r8
 80042d0:	4651      	mov	r1, sl
 80042d2:	465a      	mov	r2, fp
 80042d4:	f002 ffa6 	bl	8007224 <__ssprint_r>
 80042d8:	2800      	cmp	r0, #0
 80042da:	f47f ad08 	bne.w	8003cee <_svfprintf_r+0x1ae>
 80042de:	3f10      	subs	r7, #16
 80042e0:	2f10      	cmp	r7, #16
 80042e2:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80042e4:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 80042e6:	ae1f      	add	r6, sp, #124	; 0x7c
 80042e8:	dce9      	bgt.n	80042be <_svfprintf_r+0x77e>
 80042ea:	46a0      	mov	r8, r4
 80042ec:	461c      	mov	r4, r3
 80042ee:	3401      	adds	r4, #1
 80042f0:	197d      	adds	r5, r7, r5
 80042f2:	2c07      	cmp	r4, #7
 80042f4:	f8c6 8000 	str.w	r8, [r6]
 80042f8:	6077      	str	r7, [r6, #4]
 80042fa:	953b      	str	r5, [sp, #236]	; 0xec
 80042fc:	943a      	str	r4, [sp, #232]	; 0xe8
 80042fe:	dd08      	ble.n	8004312 <_svfprintf_r+0x7d2>
 8004300:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004302:	4651      	mov	r1, sl
 8004304:	465a      	mov	r2, fp
 8004306:	f002 ff8d 	bl	8007224 <__ssprint_r>
 800430a:	2800      	cmp	r0, #0
 800430c:	f47f acef 	bne.w	8003cee <_svfprintf_r+0x1ae>
 8004310:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004312:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004314:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004316:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004318:	428a      	cmp	r2, r1
 800431a:	bfac      	ite	ge
 800431c:	1880      	addge	r0, r0, r2
 800431e:	1840      	addlt	r0, r0, r1
 8004320:	900c      	str	r0, [sp, #48]	; 0x30
 8004322:	2d00      	cmp	r5, #0
 8004324:	f040 8129 	bne.w	800457a <_svfprintf_r+0xa3a>
 8004328:	2300      	movs	r3, #0
 800432a:	933a      	str	r3, [sp, #232]	; 0xe8
 800432c:	ae1f      	add	r6, sp, #124	; 0x7c
 800432e:	e435      	b.n	8003b9c <_svfprintf_r+0x5c>
 8004330:	46a0      	mov	r8, r4
 8004332:	461c      	mov	r4, r3
 8004334:	3401      	adds	r4, #1
 8004336:	19ed      	adds	r5, r5, r7
 8004338:	2c07      	cmp	r4, #7
 800433a:	f8c6 8000 	str.w	r8, [r6]
 800433e:	6077      	str	r7, [r6, #4]
 8004340:	953b      	str	r5, [sp, #236]	; 0xec
 8004342:	943a      	str	r4, [sp, #232]	; 0xe8
 8004344:	dda2      	ble.n	800428c <_svfprintf_r+0x74c>
 8004346:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004348:	4651      	mov	r1, sl
 800434a:	465a      	mov	r2, fp
 800434c:	f002 ff6a 	bl	8007224 <__ssprint_r>
 8004350:	2800      	cmp	r0, #0
 8004352:	f47f accc 	bne.w	8003cee <_svfprintf_r+0x1ae>
 8004356:	ae1f      	add	r6, sp, #124	; 0x7c
 8004358:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 800435a:	e798      	b.n	800428e <_svfprintf_r+0x74e>
 800435c:	9815      	ldr	r0, [sp, #84]	; 0x54
 800435e:	2865      	cmp	r0, #101	; 0x65
 8004360:	f340 80aa 	ble.w	80044b8 <_svfprintf_r+0x978>
 8004364:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 8004368:	2200      	movs	r2, #0
 800436a:	2300      	movs	r3, #0
 800436c:	f004 fb18 	bl	80089a0 <__aeabi_dcmpeq>
 8004370:	2800      	cmp	r0, #0
 8004372:	f000 8131 	beq.w	80045d8 <_svfprintf_r+0xa98>
 8004376:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8004378:	4b2f      	ldr	r3, [pc, #188]	; (8004438 <_svfprintf_r+0x8f8>)
 800437a:	3401      	adds	r4, #1
 800437c:	6033      	str	r3, [r6, #0]
 800437e:	3501      	adds	r5, #1
 8004380:	2301      	movs	r3, #1
 8004382:	2c07      	cmp	r4, #7
 8004384:	6073      	str	r3, [r6, #4]
 8004386:	953b      	str	r5, [sp, #236]	; 0xec
 8004388:	943a      	str	r4, [sp, #232]	; 0xe8
 800438a:	f300 82b8 	bgt.w	80048fe <_svfprintf_r+0xdbe>
 800438e:	3608      	adds	r6, #8
 8004390:	9b40      	ldr	r3, [sp, #256]	; 0x100
 8004392:	9910      	ldr	r1, [sp, #64]	; 0x40
 8004394:	4299      	cmp	r1, r3
 8004396:	dc03      	bgt.n	80043a0 <_svfprintf_r+0x860>
 8004398:	9a08      	ldr	r2, [sp, #32]
 800439a:	07d3      	lsls	r3, r2, #31
 800439c:	f57f af77 	bpl.w	800428e <_svfprintf_r+0x74e>
 80043a0:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80043a2:	981a      	ldr	r0, [sp, #104]	; 0x68
 80043a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80043a6:	6070      	str	r0, [r6, #4]
 80043a8:	3401      	adds	r4, #1
 80043aa:	182d      	adds	r5, r5, r0
 80043ac:	2c07      	cmp	r4, #7
 80043ae:	6033      	str	r3, [r6, #0]
 80043b0:	953b      	str	r5, [sp, #236]	; 0xec
 80043b2:	943a      	str	r4, [sp, #232]	; 0xe8
 80043b4:	f300 8300 	bgt.w	80049b8 <_svfprintf_r+0xe78>
 80043b8:	3608      	adds	r6, #8
 80043ba:	9910      	ldr	r1, [sp, #64]	; 0x40
 80043bc:	1e4f      	subs	r7, r1, #1
 80043be:	2f00      	cmp	r7, #0
 80043c0:	f77f af65 	ble.w	800428e <_svfprintf_r+0x74e>
 80043c4:	2f10      	cmp	r7, #16
 80043c6:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80043c8:	f8df 8070 	ldr.w	r8, [pc, #112]	; 800443c <_svfprintf_r+0x8fc>
 80043cc:	ddb2      	ble.n	8004334 <_svfprintf_r+0x7f4>
 80043ce:	4623      	mov	r3, r4
 80043d0:	f04f 0910 	mov.w	r9, #16
 80043d4:	4644      	mov	r4, r8
 80043d6:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 80043da:	e003      	b.n	80043e4 <_svfprintf_r+0x8a4>
 80043dc:	3608      	adds	r6, #8
 80043de:	3f10      	subs	r7, #16
 80043e0:	2f10      	cmp	r7, #16
 80043e2:	dda5      	ble.n	8004330 <_svfprintf_r+0x7f0>
 80043e4:	3301      	adds	r3, #1
 80043e6:	3510      	adds	r5, #16
 80043e8:	2b07      	cmp	r3, #7
 80043ea:	e886 0210 	stmia.w	r6, {r4, r9}
 80043ee:	953b      	str	r5, [sp, #236]	; 0xec
 80043f0:	933a      	str	r3, [sp, #232]	; 0xe8
 80043f2:	ddf3      	ble.n	80043dc <_svfprintf_r+0x89c>
 80043f4:	4640      	mov	r0, r8
 80043f6:	4651      	mov	r1, sl
 80043f8:	465a      	mov	r2, fp
 80043fa:	f002 ff13 	bl	8007224 <__ssprint_r>
 80043fe:	2800      	cmp	r0, #0
 8004400:	f47f ac75 	bne.w	8003cee <_svfprintf_r+0x1ae>
 8004404:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004406:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8004408:	ae1f      	add	r6, sp, #124	; 0x7c
 800440a:	e7e8      	b.n	80043de <_svfprintf_r+0x89e>
 800440c:	2a00      	cmp	r2, #0
 800440e:	f040 80be 	bne.w	800458e <_svfprintf_r+0xa4e>
 8004412:	9808      	ldr	r0, [sp, #32]
 8004414:	07c1      	lsls	r1, r0, #31
 8004416:	bf5c      	itt	pl
 8004418:	920d      	strpl	r2, [sp, #52]	; 0x34
 800441a:	f8cd b044 	strpl.w	fp, [sp, #68]	; 0x44
 800441e:	f57f acf3 	bpl.w	8003e08 <_svfprintf_r+0x2c8>
 8004422:	991d      	ldr	r1, [sp, #116]	; 0x74
 8004424:	2330      	movs	r3, #48	; 0x30
 8004426:	f10d 02e3 	add.w	r2, sp, #227	; 0xe3
 800442a:	f88d 30e3 	strb.w	r3, [sp, #227]	; 0xe3
 800442e:	910d      	str	r1, [sp, #52]	; 0x34
 8004430:	9211      	str	r2, [sp, #68]	; 0x44
 8004432:	e4e9      	b.n	8003e08 <_svfprintf_r+0x2c8>
 8004434:	080090f0 	.word	0x080090f0
 8004438:	0800910c 	.word	0x0800910c
 800443c:	08008e3c 	.word	0x08008e3c
 8004440:	08008e2c 	.word	0x08008e2c
 8004444:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004446:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004448:	1a47      	subs	r7, r0, r1
 800444a:	2f00      	cmp	r7, #0
 800444c:	f77f aed8 	ble.w	8004200 <_svfprintf_r+0x6c0>
 8004450:	2f10      	cmp	r7, #16
 8004452:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8004454:	f8df 86d8 	ldr.w	r8, [pc, #1752]	; 8004b30 <_svfprintf_r+0xff0>
 8004458:	dd22      	ble.n	80044a0 <_svfprintf_r+0x960>
 800445a:	4623      	mov	r3, r4
 800445c:	f04f 0910 	mov.w	r9, #16
 8004460:	4644      	mov	r4, r8
 8004462:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8004466:	e003      	b.n	8004470 <_svfprintf_r+0x930>
 8004468:	3f10      	subs	r7, #16
 800446a:	3608      	adds	r6, #8
 800446c:	2f10      	cmp	r7, #16
 800446e:	dd15      	ble.n	800449c <_svfprintf_r+0x95c>
 8004470:	3301      	adds	r3, #1
 8004472:	3510      	adds	r5, #16
 8004474:	2b07      	cmp	r3, #7
 8004476:	e886 0210 	stmia.w	r6, {r4, r9}
 800447a:	953b      	str	r5, [sp, #236]	; 0xec
 800447c:	933a      	str	r3, [sp, #232]	; 0xe8
 800447e:	ddf3      	ble.n	8004468 <_svfprintf_r+0x928>
 8004480:	4640      	mov	r0, r8
 8004482:	4651      	mov	r1, sl
 8004484:	465a      	mov	r2, fp
 8004486:	f002 fecd 	bl	8007224 <__ssprint_r>
 800448a:	2800      	cmp	r0, #0
 800448c:	f47f ac2f 	bne.w	8003cee <_svfprintf_r+0x1ae>
 8004490:	3f10      	subs	r7, #16
 8004492:	2f10      	cmp	r7, #16
 8004494:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004496:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8004498:	ae1f      	add	r6, sp, #124	; 0x7c
 800449a:	dce9      	bgt.n	8004470 <_svfprintf_r+0x930>
 800449c:	46a0      	mov	r8, r4
 800449e:	461c      	mov	r4, r3
 80044a0:	3401      	adds	r4, #1
 80044a2:	19ed      	adds	r5, r5, r7
 80044a4:	2c07      	cmp	r4, #7
 80044a6:	f8c6 8000 	str.w	r8, [r6]
 80044aa:	6077      	str	r7, [r6, #4]
 80044ac:	953b      	str	r5, [sp, #236]	; 0xec
 80044ae:	943a      	str	r4, [sp, #232]	; 0xe8
 80044b0:	f300 81df 	bgt.w	8004872 <_svfprintf_r+0xd32>
 80044b4:	3608      	adds	r6, #8
 80044b6:	e6a3      	b.n	8004200 <_svfprintf_r+0x6c0>
 80044b8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80044ba:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80044bc:	2a01      	cmp	r2, #1
 80044be:	f340 81a5 	ble.w	800480c <_svfprintf_r+0xccc>
 80044c2:	3401      	adds	r4, #1
 80044c4:	9811      	ldr	r0, [sp, #68]	; 0x44
 80044c6:	3501      	adds	r5, #1
 80044c8:	2301      	movs	r3, #1
 80044ca:	2c07      	cmp	r4, #7
 80044cc:	6030      	str	r0, [r6, #0]
 80044ce:	6073      	str	r3, [r6, #4]
 80044d0:	953b      	str	r5, [sp, #236]	; 0xec
 80044d2:	943a      	str	r4, [sp, #232]	; 0xe8
 80044d4:	f300 81c1 	bgt.w	800485a <_svfprintf_r+0xd1a>
 80044d8:	3608      	adds	r6, #8
 80044da:	991a      	ldr	r1, [sp, #104]	; 0x68
 80044dc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80044de:	6071      	str	r1, [r6, #4]
 80044e0:	3401      	adds	r4, #1
 80044e2:	186d      	adds	r5, r5, r1
 80044e4:	2c07      	cmp	r4, #7
 80044e6:	6032      	str	r2, [r6, #0]
 80044e8:	953b      	str	r5, [sp, #236]	; 0xec
 80044ea:	943a      	str	r4, [sp, #232]	; 0xe8
 80044ec:	f300 81a9 	bgt.w	8004842 <_svfprintf_r+0xd02>
 80044f0:	3608      	adds	r6, #8
 80044f2:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 80044f6:	2200      	movs	r2, #0
 80044f8:	2300      	movs	r3, #0
 80044fa:	f004 fa51 	bl	80089a0 <__aeabi_dcmpeq>
 80044fe:	2800      	cmp	r0, #0
 8004500:	f040 80f6 	bne.w	80046f0 <_svfprintf_r+0xbb0>
 8004504:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004506:	9811      	ldr	r0, [sp, #68]	; 0x44
 8004508:	1e5a      	subs	r2, r3, #1
 800450a:	3401      	adds	r4, #1
 800450c:	1c43      	adds	r3, r0, #1
 800450e:	18ad      	adds	r5, r5, r2
 8004510:	2c07      	cmp	r4, #7
 8004512:	6033      	str	r3, [r6, #0]
 8004514:	6072      	str	r2, [r6, #4]
 8004516:	953b      	str	r5, [sp, #236]	; 0xec
 8004518:	943a      	str	r4, [sp, #232]	; 0xe8
 800451a:	dc22      	bgt.n	8004562 <_svfprintf_r+0xa22>
 800451c:	3608      	adds	r6, #8
 800451e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004520:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8004522:	3401      	adds	r4, #1
 8004524:	18ed      	adds	r5, r5, r3
 8004526:	2c07      	cmp	r4, #7
 8004528:	ab3c      	add	r3, sp, #240	; 0xf0
 800452a:	6033      	str	r3, [r6, #0]
 800452c:	6070      	str	r0, [r6, #4]
 800452e:	953b      	str	r5, [sp, #236]	; 0xec
 8004530:	943a      	str	r4, [sp, #232]	; 0xe8
 8004532:	f77f aeab 	ble.w	800428c <_svfprintf_r+0x74c>
 8004536:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004538:	4651      	mov	r1, sl
 800453a:	465a      	mov	r2, fp
 800453c:	f002 fe72 	bl	8007224 <__ssprint_r>
 8004540:	2800      	cmp	r0, #0
 8004542:	f47f abd4 	bne.w	8003cee <_svfprintf_r+0x1ae>
 8004546:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004548:	ae1f      	add	r6, sp, #124	; 0x7c
 800454a:	e6a0      	b.n	800428e <_svfprintf_r+0x74e>
 800454c:	46a0      	mov	r8, r4
 800454e:	461c      	mov	r4, r3
 8004550:	3401      	adds	r4, #1
 8004552:	19ed      	adds	r5, r5, r7
 8004554:	2c07      	cmp	r4, #7
 8004556:	f8c6 8000 	str.w	r8, [r6]
 800455a:	6077      	str	r7, [r6, #4]
 800455c:	953b      	str	r5, [sp, #236]	; 0xec
 800455e:	943a      	str	r4, [sp, #232]	; 0xe8
 8004560:	dddc      	ble.n	800451c <_svfprintf_r+0x9dc>
 8004562:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004564:	4651      	mov	r1, sl
 8004566:	465a      	mov	r2, fp
 8004568:	f002 fe5c 	bl	8007224 <__ssprint_r>
 800456c:	2800      	cmp	r0, #0
 800456e:	f47f abbe 	bne.w	8003cee <_svfprintf_r+0x1ae>
 8004572:	ae1f      	add	r6, sp, #124	; 0x7c
 8004574:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004576:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8004578:	e7d1      	b.n	800451e <_svfprintf_r+0x9de>
 800457a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800457c:	4651      	mov	r1, sl
 800457e:	465a      	mov	r2, fp
 8004580:	f002 fe50 	bl	8007224 <__ssprint_r>
 8004584:	2800      	cmp	r0, #0
 8004586:	f43f aecf 	beq.w	8004328 <_svfprintf_r+0x7e8>
 800458a:	f7ff bbb0 	b.w	8003cee <_svfprintf_r+0x1ae>
 800458e:	910d      	str	r1, [sp, #52]	; 0x34
 8004590:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8004594:	e438      	b.n	8003e08 <_svfprintf_r+0x2c8>
 8004596:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004598:	4651      	mov	r1, sl
 800459a:	465a      	mov	r2, fp
 800459c:	f002 fe42 	bl	8007224 <__ssprint_r>
 80045a0:	2800      	cmp	r0, #0
 80045a2:	f47f aba4 	bne.w	8003cee <_svfprintf_r+0x1ae>
 80045a6:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80045a8:	ae1f      	add	r6, sp, #124	; 0x7c
 80045aa:	e661      	b.n	8004270 <_svfprintf_r+0x730>
 80045ac:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80045ae:	4651      	mov	r1, sl
 80045b0:	465a      	mov	r2, fp
 80045b2:	f002 fe37 	bl	8007224 <__ssprint_r>
 80045b6:	2800      	cmp	r0, #0
 80045b8:	f47f ab99 	bne.w	8003cee <_svfprintf_r+0x1ae>
 80045bc:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80045be:	ae1f      	add	r6, sp, #124	; 0x7c
 80045c0:	e61a      	b.n	80041f8 <_svfprintf_r+0x6b8>
 80045c2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80045c4:	4651      	mov	r1, sl
 80045c6:	465a      	mov	r2, fp
 80045c8:	f002 fe2c 	bl	8007224 <__ssprint_r>
 80045cc:	2800      	cmp	r0, #0
 80045ce:	f47f ab8e 	bne.w	8003cee <_svfprintf_r+0x1ae>
 80045d2:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80045d4:	ae1f      	add	r6, sp, #124	; 0x7c
 80045d6:	e600      	b.n	80041da <_svfprintf_r+0x69a>
 80045d8:	9f40      	ldr	r7, [sp, #256]	; 0x100
 80045da:	2f00      	cmp	r7, #0
 80045dc:	f340 819a 	ble.w	8004914 <_svfprintf_r+0xdd4>
 80045e0:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80045e2:	9816      	ldr	r0, [sp, #88]	; 0x58
 80045e4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80045e6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80045e8:	4287      	cmp	r7, r0
 80045ea:	bfa8      	it	ge
 80045ec:	4607      	movge	r7, r0
 80045ee:	1889      	adds	r1, r1, r2
 80045f0:	2f00      	cmp	r7, #0
 80045f2:	910d      	str	r1, [sp, #52]	; 0x34
 80045f4:	dd0b      	ble.n	800460e <_svfprintf_r+0xace>
 80045f6:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80045f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80045fa:	6077      	str	r7, [r6, #4]
 80045fc:	3401      	adds	r4, #1
 80045fe:	19ed      	adds	r5, r5, r7
 8004600:	2c07      	cmp	r4, #7
 8004602:	6032      	str	r2, [r6, #0]
 8004604:	953b      	str	r5, [sp, #236]	; 0xec
 8004606:	943a      	str	r4, [sp, #232]	; 0xe8
 8004608:	f300 8304 	bgt.w	8004c14 <_svfprintf_r+0x10d4>
 800460c:	3608      	adds	r6, #8
 800460e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004610:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
 8004614:	1bdf      	subs	r7, r3, r7
 8004616:	2f00      	cmp	r7, #0
 8004618:	f340 80a0 	ble.w	800475c <_svfprintf_r+0xc1c>
 800461c:	2f10      	cmp	r7, #16
 800461e:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8004620:	f8df 850c 	ldr.w	r8, [pc, #1292]	; 8004b30 <_svfprintf_r+0xff0>
 8004624:	f340 815f 	ble.w	80048e6 <_svfprintf_r+0xda6>
 8004628:	4623      	mov	r3, r4
 800462a:	f04f 0910 	mov.w	r9, #16
 800462e:	4644      	mov	r4, r8
 8004630:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8004634:	e004      	b.n	8004640 <_svfprintf_r+0xb00>
 8004636:	3608      	adds	r6, #8
 8004638:	3f10      	subs	r7, #16
 800463a:	2f10      	cmp	r7, #16
 800463c:	f340 8151 	ble.w	80048e2 <_svfprintf_r+0xda2>
 8004640:	3301      	adds	r3, #1
 8004642:	3510      	adds	r5, #16
 8004644:	2b07      	cmp	r3, #7
 8004646:	e886 0210 	stmia.w	r6, {r4, r9}
 800464a:	953b      	str	r5, [sp, #236]	; 0xec
 800464c:	933a      	str	r3, [sp, #232]	; 0xe8
 800464e:	ddf2      	ble.n	8004636 <_svfprintf_r+0xaf6>
 8004650:	4640      	mov	r0, r8
 8004652:	4651      	mov	r1, sl
 8004654:	465a      	mov	r2, fp
 8004656:	f002 fde5 	bl	8007224 <__ssprint_r>
 800465a:	2800      	cmp	r0, #0
 800465c:	f47f ab47 	bne.w	8003cee <_svfprintf_r+0x1ae>
 8004660:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004662:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8004664:	ae1f      	add	r6, sp, #124	; 0x7c
 8004666:	e7e7      	b.n	8004638 <_svfprintf_r+0xaf8>
 8004668:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 800466a:	f10d 01e3 	add.w	r1, sp, #227	; 0xe3
 800466e:	f003 000f 	and.w	r0, r3, #15
 8004672:	460a      	mov	r2, r1
 8004674:	5c28      	ldrb	r0, [r5, r0]
 8004676:	3901      	subs	r1, #1
 8004678:	091b      	lsrs	r3, r3, #4
 800467a:	7010      	strb	r0, [r2, #0]
 800467c:	d1f7      	bne.n	800466e <_svfprintf_r+0xb2e>
 800467e:	ebc2 030b 	rsb	r3, r2, fp
 8004682:	9211      	str	r2, [sp, #68]	; 0x44
 8004684:	930d      	str	r3, [sp, #52]	; 0x34
 8004686:	f7ff bbbf 	b.w	8003e08 <_svfprintf_r+0x2c8>
 800468a:	2b09      	cmp	r3, #9
 800468c:	bf82      	ittt	hi
 800468e:	f64c 45cd 	movwhi	r5, #52429	; 0xcccd
 8004692:	f10d 01e3 	addhi.w	r1, sp, #227	; 0xe3
 8004696:	f6cc 45cc 	movthi	r5, #52428	; 0xcccc
 800469a:	d809      	bhi.n	80046b0 <_svfprintf_r+0xb70>
 800469c:	981d      	ldr	r0, [sp, #116]	; 0x74
 800469e:	3330      	adds	r3, #48	; 0x30
 80046a0:	f10d 01e3 	add.w	r1, sp, #227	; 0xe3
 80046a4:	f88d 30e3 	strb.w	r3, [sp, #227]	; 0xe3
 80046a8:	900d      	str	r0, [sp, #52]	; 0x34
 80046aa:	9111      	str	r1, [sp, #68]	; 0x44
 80046ac:	f7ff bbac 	b.w	8003e08 <_svfprintf_r+0x2c8>
 80046b0:	fba5 0203 	umull	r0, r2, r5, r3
 80046b4:	08d2      	lsrs	r2, r2, #3
 80046b6:	eb02 0782 	add.w	r7, r2, r2, lsl #2
 80046ba:	4608      	mov	r0, r1
 80046bc:	eba3 0347 	sub.w	r3, r3, r7, lsl #1
 80046c0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80046c4:	7001      	strb	r1, [r0, #0]
 80046c6:	4613      	mov	r3, r2
 80046c8:	1e41      	subs	r1, r0, #1
 80046ca:	2a00      	cmp	r2, #0
 80046cc:	d1f0      	bne.n	80046b0 <_svfprintf_r+0xb70>
 80046ce:	ebc0 030b 	rsb	r3, r0, fp
 80046d2:	9011      	str	r0, [sp, #68]	; 0x44
 80046d4:	930d      	str	r3, [sp, #52]	; 0x34
 80046d6:	f7ff bb97 	b.w	8003e08 <_svfprintf_r+0x2c8>
 80046da:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80046dc:	4651      	mov	r1, sl
 80046de:	465a      	mov	r2, fp
 80046e0:	f002 fda0 	bl	8007224 <__ssprint_r>
 80046e4:	2800      	cmp	r0, #0
 80046e6:	f47f ab02 	bne.w	8003cee <_svfprintf_r+0x1ae>
 80046ea:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80046ec:	ae1f      	add	r6, sp, #124	; 0x7c
 80046ee:	e563      	b.n	80041b8 <_svfprintf_r+0x678>
 80046f0:	9910      	ldr	r1, [sp, #64]	; 0x40
 80046f2:	1e4f      	subs	r7, r1, #1
 80046f4:	2f00      	cmp	r7, #0
 80046f6:	f77f af12 	ble.w	800451e <_svfprintf_r+0x9de>
 80046fa:	2f10      	cmp	r7, #16
 80046fc:	f8df 8430 	ldr.w	r8, [pc, #1072]	; 8004b30 <_svfprintf_r+0xff0>
 8004700:	f77f af26 	ble.w	8004550 <_svfprintf_r+0xa10>
 8004704:	4623      	mov	r3, r4
 8004706:	f04f 0910 	mov.w	r9, #16
 800470a:	4644      	mov	r4, r8
 800470c:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8004710:	e004      	b.n	800471c <_svfprintf_r+0xbdc>
 8004712:	3608      	adds	r6, #8
 8004714:	3f10      	subs	r7, #16
 8004716:	2f10      	cmp	r7, #16
 8004718:	f77f af18 	ble.w	800454c <_svfprintf_r+0xa0c>
 800471c:	3301      	adds	r3, #1
 800471e:	3510      	adds	r5, #16
 8004720:	2b07      	cmp	r3, #7
 8004722:	e886 0210 	stmia.w	r6, {r4, r9}
 8004726:	953b      	str	r5, [sp, #236]	; 0xec
 8004728:	933a      	str	r3, [sp, #232]	; 0xe8
 800472a:	ddf2      	ble.n	8004712 <_svfprintf_r+0xbd2>
 800472c:	4640      	mov	r0, r8
 800472e:	4651      	mov	r1, sl
 8004730:	465a      	mov	r2, fp
 8004732:	f002 fd77 	bl	8007224 <__ssprint_r>
 8004736:	2800      	cmp	r0, #0
 8004738:	f47f aad9 	bne.w	8003cee <_svfprintf_r+0x1ae>
 800473c:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 800473e:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8004740:	ae1f      	add	r6, sp, #124	; 0x7c
 8004742:	e7e7      	b.n	8004714 <_svfprintf_r+0xbd4>
 8004744:	2202      	movs	r2, #2
 8004746:	e405      	b.n	8003f54 <_svfprintf_r+0x414>
 8004748:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800474a:	4651      	mov	r1, sl
 800474c:	465a      	mov	r2, fp
 800474e:	f002 fd69 	bl	8007224 <__ssprint_r>
 8004752:	2800      	cmp	r0, #0
 8004754:	f47f aacb 	bne.w	8003cee <_svfprintf_r+0x1ae>
 8004758:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 800475a:	ae1f      	add	r6, sp, #124	; 0x7c
 800475c:	9b40      	ldr	r3, [sp, #256]	; 0x100
 800475e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8004760:	4298      	cmp	r0, r3
 8004762:	dc45      	bgt.n	80047f0 <_svfprintf_r+0xcb0>
 8004764:	9908      	ldr	r1, [sp, #32]
 8004766:	07c9      	lsls	r1, r1, #31
 8004768:	d442      	bmi.n	80047f0 <_svfprintf_r+0xcb0>
 800476a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800476c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800476e:	180a      	adds	r2, r1, r0
 8004770:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004772:	9810      	ldr	r0, [sp, #64]	; 0x40
 8004774:	1a8f      	subs	r7, r1, r2
 8004776:	1ac3      	subs	r3, r0, r3
 8004778:	42bb      	cmp	r3, r7
 800477a:	bfb8      	it	lt
 800477c:	461f      	movlt	r7, r3
 800477e:	2f00      	cmp	r7, #0
 8004780:	dd0a      	ble.n	8004798 <_svfprintf_r+0xc58>
 8004782:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8004784:	6032      	str	r2, [r6, #0]
 8004786:	3401      	adds	r4, #1
 8004788:	19ed      	adds	r5, r5, r7
 800478a:	2c07      	cmp	r4, #7
 800478c:	6077      	str	r7, [r6, #4]
 800478e:	953b      	str	r5, [sp, #236]	; 0xec
 8004790:	943a      	str	r4, [sp, #232]	; 0xe8
 8004792:	f300 8256 	bgt.w	8004c42 <_svfprintf_r+0x1102>
 8004796:	3608      	adds	r6, #8
 8004798:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
 800479c:	1bdf      	subs	r7, r3, r7
 800479e:	2f00      	cmp	r7, #0
 80047a0:	f77f ad75 	ble.w	800428e <_svfprintf_r+0x74e>
 80047a4:	2f10      	cmp	r7, #16
 80047a6:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80047a8:	f8df 8384 	ldr.w	r8, [pc, #900]	; 8004b30 <_svfprintf_r+0xff0>
 80047ac:	f77f adc2 	ble.w	8004334 <_svfprintf_r+0x7f4>
 80047b0:	4623      	mov	r3, r4
 80047b2:	f04f 0910 	mov.w	r9, #16
 80047b6:	4644      	mov	r4, r8
 80047b8:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 80047bc:	e004      	b.n	80047c8 <_svfprintf_r+0xc88>
 80047be:	3608      	adds	r6, #8
 80047c0:	3f10      	subs	r7, #16
 80047c2:	2f10      	cmp	r7, #16
 80047c4:	f77f adb4 	ble.w	8004330 <_svfprintf_r+0x7f0>
 80047c8:	3301      	adds	r3, #1
 80047ca:	3510      	adds	r5, #16
 80047cc:	2b07      	cmp	r3, #7
 80047ce:	e886 0210 	stmia.w	r6, {r4, r9}
 80047d2:	953b      	str	r5, [sp, #236]	; 0xec
 80047d4:	933a      	str	r3, [sp, #232]	; 0xe8
 80047d6:	ddf2      	ble.n	80047be <_svfprintf_r+0xc7e>
 80047d8:	4640      	mov	r0, r8
 80047da:	4651      	mov	r1, sl
 80047dc:	465a      	mov	r2, fp
 80047de:	f002 fd21 	bl	8007224 <__ssprint_r>
 80047e2:	2800      	cmp	r0, #0
 80047e4:	f47f aa83 	bne.w	8003cee <_svfprintf_r+0x1ae>
 80047e8:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80047ea:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 80047ec:	ae1f      	add	r6, sp, #124	; 0x7c
 80047ee:	e7e7      	b.n	80047c0 <_svfprintf_r+0xc80>
 80047f0:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80047f2:	981a      	ldr	r0, [sp, #104]	; 0x68
 80047f4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80047f6:	6070      	str	r0, [r6, #4]
 80047f8:	3401      	adds	r4, #1
 80047fa:	182d      	adds	r5, r5, r0
 80047fc:	2c07      	cmp	r4, #7
 80047fe:	6032      	str	r2, [r6, #0]
 8004800:	953b      	str	r5, [sp, #236]	; 0xec
 8004802:	943a      	str	r4, [sp, #232]	; 0xe8
 8004804:	f300 8211 	bgt.w	8004c2a <_svfprintf_r+0x10ea>
 8004808:	3608      	adds	r6, #8
 800480a:	e7ae      	b.n	800476a <_svfprintf_r+0xc2a>
 800480c:	9b08      	ldr	r3, [sp, #32]
 800480e:	07da      	lsls	r2, r3, #31
 8004810:	f53f ae57 	bmi.w	80044c2 <_svfprintf_r+0x982>
 8004814:	3401      	adds	r4, #1
 8004816:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004818:	3501      	adds	r5, #1
 800481a:	2301      	movs	r3, #1
 800481c:	2c07      	cmp	r4, #7
 800481e:	6032      	str	r2, [r6, #0]
 8004820:	6073      	str	r3, [r6, #4]
 8004822:	953b      	str	r5, [sp, #236]	; 0xec
 8004824:	943a      	str	r4, [sp, #232]	; 0xe8
 8004826:	f77f ae79 	ble.w	800451c <_svfprintf_r+0x9dc>
 800482a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800482c:	4651      	mov	r1, sl
 800482e:	465a      	mov	r2, fp
 8004830:	f002 fcf8 	bl	8007224 <__ssprint_r>
 8004834:	2800      	cmp	r0, #0
 8004836:	f47f aa5a 	bne.w	8003cee <_svfprintf_r+0x1ae>
 800483a:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 800483c:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 800483e:	ae1f      	add	r6, sp, #124	; 0x7c
 8004840:	e66d      	b.n	800451e <_svfprintf_r+0x9de>
 8004842:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004844:	4651      	mov	r1, sl
 8004846:	465a      	mov	r2, fp
 8004848:	f002 fcec 	bl	8007224 <__ssprint_r>
 800484c:	2800      	cmp	r0, #0
 800484e:	f47f aa4e 	bne.w	8003cee <_svfprintf_r+0x1ae>
 8004852:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004854:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8004856:	ae1f      	add	r6, sp, #124	; 0x7c
 8004858:	e64b      	b.n	80044f2 <_svfprintf_r+0x9b2>
 800485a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800485c:	4651      	mov	r1, sl
 800485e:	465a      	mov	r2, fp
 8004860:	f002 fce0 	bl	8007224 <__ssprint_r>
 8004864:	2800      	cmp	r0, #0
 8004866:	f47f aa42 	bne.w	8003cee <_svfprintf_r+0x1ae>
 800486a:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 800486c:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 800486e:	ae1f      	add	r6, sp, #124	; 0x7c
 8004870:	e633      	b.n	80044da <_svfprintf_r+0x99a>
 8004872:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004874:	4651      	mov	r1, sl
 8004876:	465a      	mov	r2, fp
 8004878:	f002 fcd4 	bl	8007224 <__ssprint_r>
 800487c:	2800      	cmp	r0, #0
 800487e:	f47f aa36 	bne.w	8003cee <_svfprintf_r+0x1ae>
 8004882:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004884:	ae1f      	add	r6, sp, #124	; 0x7c
 8004886:	e4bb      	b.n	8004200 <_svfprintf_r+0x6c0>
 8004888:	f002 fb64 	bl	8006f54 <__fpclassifyd>
 800488c:	2800      	cmp	r0, #0
 800488e:	f040 809e 	bne.w	80049ce <_svfprintf_r+0xe8e>
 8004892:	2203      	movs	r2, #3
 8004894:	9012      	str	r0, [sp, #72]	; 0x48
 8004896:	4ba3      	ldr	r3, [pc, #652]	; (8004b24 <_svfprintf_r+0xfe4>)
 8004898:	920a      	str	r2, [sp, #40]	; 0x28
 800489a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800489c:	4aa2      	ldr	r2, [pc, #648]	; (8004b28 <_svfprintf_r+0xfe8>)
 800489e:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 80048a2:	2847      	cmp	r0, #71	; 0x47
 80048a4:	bfd8      	it	le
 80048a6:	461a      	movle	r2, r3
 80048a8:	9211      	str	r2, [sp, #68]	; 0x44
 80048aa:	2303      	movs	r3, #3
 80048ac:	9a08      	ldr	r2, [sp, #32]
 80048ae:	930d      	str	r3, [sp, #52]	; 0x34
 80048b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80048b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80048b6:	9208      	str	r2, [sp, #32]
 80048b8:	9316      	str	r3, [sp, #88]	; 0x58
 80048ba:	f7ff baaf 	b.w	8003e1c <_svfprintf_r+0x2dc>
 80048be:	990e      	ldr	r1, [sp, #56]	; 0x38
 80048c0:	2201      	movs	r2, #1
 80048c2:	680b      	ldr	r3, [r1, #0]
 80048c4:	e414      	b.n	80040f0 <_svfprintf_r+0x5b0>
 80048c6:	9b08      	ldr	r3, [sp, #32]
 80048c8:	065f      	lsls	r7, r3, #25
 80048ca:	d56d      	bpl.n	80049a8 <_svfprintf_r+0xe68>
 80048cc:	980e      	ldr	r0, [sp, #56]	; 0x38
 80048ce:	990c      	ldr	r1, [sp, #48]	; 0x30
 80048d0:	6803      	ldr	r3, [r0, #0]
 80048d2:	3004      	adds	r0, #4
 80048d4:	900e      	str	r0, [sp, #56]	; 0x38
 80048d6:	8019      	strh	r1, [r3, #0]
 80048d8:	f7ff b960 	b.w	8003b9c <_svfprintf_r+0x5c>
 80048dc:	990e      	ldr	r1, [sp, #56]	; 0x38
 80048de:	680b      	ldr	r3, [r1, #0]
 80048e0:	e406      	b.n	80040f0 <_svfprintf_r+0x5b0>
 80048e2:	46a0      	mov	r8, r4
 80048e4:	461c      	mov	r4, r3
 80048e6:	3401      	adds	r4, #1
 80048e8:	19ed      	adds	r5, r5, r7
 80048ea:	2c07      	cmp	r4, #7
 80048ec:	f8c6 8000 	str.w	r8, [r6]
 80048f0:	6077      	str	r7, [r6, #4]
 80048f2:	953b      	str	r5, [sp, #236]	; 0xec
 80048f4:	943a      	str	r4, [sp, #232]	; 0xe8
 80048f6:	f73f af27 	bgt.w	8004748 <_svfprintf_r+0xc08>
 80048fa:	3608      	adds	r6, #8
 80048fc:	e72e      	b.n	800475c <_svfprintf_r+0xc1c>
 80048fe:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004900:	4651      	mov	r1, sl
 8004902:	465a      	mov	r2, fp
 8004904:	f002 fc8e 	bl	8007224 <__ssprint_r>
 8004908:	2800      	cmp	r0, #0
 800490a:	f47f a9f0 	bne.w	8003cee <_svfprintf_r+0x1ae>
 800490e:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004910:	ae1f      	add	r6, sp, #124	; 0x7c
 8004912:	e53d      	b.n	8004390 <_svfprintf_r+0x850>
 8004914:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8004916:	4b85      	ldr	r3, [pc, #532]	; (8004b2c <_svfprintf_r+0xfec>)
 8004918:	3401      	adds	r4, #1
 800491a:	6033      	str	r3, [r6, #0]
 800491c:	3501      	adds	r5, #1
 800491e:	2301      	movs	r3, #1
 8004920:	2c07      	cmp	r4, #7
 8004922:	6073      	str	r3, [r6, #4]
 8004924:	953b      	str	r5, [sp, #236]	; 0xec
 8004926:	943a      	str	r4, [sp, #232]	; 0xe8
 8004928:	f300 8139 	bgt.w	8004b9e <_svfprintf_r+0x105e>
 800492c:	3608      	adds	r6, #8
 800492e:	b92f      	cbnz	r7, 800493c <_svfprintf_r+0xdfc>
 8004930:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004932:	b91a      	cbnz	r2, 800493c <_svfprintf_r+0xdfc>
 8004934:	9b08      	ldr	r3, [sp, #32]
 8004936:	07d8      	lsls	r0, r3, #31
 8004938:	f57f aca9 	bpl.w	800428e <_svfprintf_r+0x74e>
 800493c:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 800493e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004940:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8004942:	6071      	str	r1, [r6, #4]
 8004944:	3401      	adds	r4, #1
 8004946:	186d      	adds	r5, r5, r1
 8004948:	2c07      	cmp	r4, #7
 800494a:	6030      	str	r0, [r6, #0]
 800494c:	953b      	str	r5, [sp, #236]	; 0xec
 800494e:	943a      	str	r4, [sp, #232]	; 0xe8
 8004950:	f300 81d2 	bgt.w	8004cf8 <_svfprintf_r+0x11b8>
 8004954:	3608      	adds	r6, #8
 8004956:	427f      	negs	r7, r7
 8004958:	2f00      	cmp	r7, #0
 800495a:	f340 8141 	ble.w	8004be0 <_svfprintf_r+0x10a0>
 800495e:	2f10      	cmp	r7, #16
 8004960:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 8004b30 <_svfprintf_r+0xff0>
 8004964:	f340 8183 	ble.w	8004c6e <_svfprintf_r+0x112e>
 8004968:	4623      	mov	r3, r4
 800496a:	f04f 0910 	mov.w	r9, #16
 800496e:	4644      	mov	r4, r8
 8004970:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8004974:	e004      	b.n	8004980 <_svfprintf_r+0xe40>
 8004976:	3608      	adds	r6, #8
 8004978:	3f10      	subs	r7, #16
 800497a:	2f10      	cmp	r7, #16
 800497c:	f340 8175 	ble.w	8004c6a <_svfprintf_r+0x112a>
 8004980:	3301      	adds	r3, #1
 8004982:	3510      	adds	r5, #16
 8004984:	2b07      	cmp	r3, #7
 8004986:	e886 0210 	stmia.w	r6, {r4, r9}
 800498a:	953b      	str	r5, [sp, #236]	; 0xec
 800498c:	933a      	str	r3, [sp, #232]	; 0xe8
 800498e:	ddf2      	ble.n	8004976 <_svfprintf_r+0xe36>
 8004990:	4640      	mov	r0, r8
 8004992:	4651      	mov	r1, sl
 8004994:	465a      	mov	r2, fp
 8004996:	f002 fc45 	bl	8007224 <__ssprint_r>
 800499a:	2800      	cmp	r0, #0
 800499c:	f47f a9a7 	bne.w	8003cee <_svfprintf_r+0x1ae>
 80049a0:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80049a2:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 80049a4:	ae1f      	add	r6, sp, #124	; 0x7c
 80049a6:	e7e7      	b.n	8004978 <_svfprintf_r+0xe38>
 80049a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80049aa:	980c      	ldr	r0, [sp, #48]	; 0x30
 80049ac:	6813      	ldr	r3, [r2, #0]
 80049ae:	3204      	adds	r2, #4
 80049b0:	920e      	str	r2, [sp, #56]	; 0x38
 80049b2:	6018      	str	r0, [r3, #0]
 80049b4:	f7ff b8f2 	b.w	8003b9c <_svfprintf_r+0x5c>
 80049b8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80049ba:	4651      	mov	r1, sl
 80049bc:	465a      	mov	r2, fp
 80049be:	f002 fc31 	bl	8007224 <__ssprint_r>
 80049c2:	2800      	cmp	r0, #0
 80049c4:	f47f a993 	bne.w	8003cee <_svfprintf_r+0x1ae>
 80049c8:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80049ca:	ae1f      	add	r6, sp, #124	; 0x7c
 80049cc:	e4f5      	b.n	80043ba <_svfprintf_r+0x87a>
 80049ce:	1c60      	adds	r0, r4, #1
 80049d0:	f000 80f1 	beq.w	8004bb6 <_svfprintf_r+0x1076>
 80049d4:	9915      	ldr	r1, [sp, #84]	; 0x54
 80049d6:	2967      	cmp	r1, #103	; 0x67
 80049d8:	bf18      	it	ne
 80049da:	2947      	cmpne	r1, #71	; 0x47
 80049dc:	bf14      	ite	ne
 80049de:	2300      	movne	r3, #0
 80049e0:	2301      	moveq	r3, #1
 80049e2:	bf18      	it	ne
 80049e4:	930a      	strne	r3, [sp, #40]	; 0x28
 80049e6:	d104      	bne.n	80049f2 <_svfprintf_r+0xeb2>
 80049e8:	2c00      	cmp	r4, #0
 80049ea:	f000 81ad 	beq.w	8004d48 <_svfprintf_r+0x1208>
 80049ee:	2201      	movs	r2, #1
 80049f0:	920a      	str	r2, [sp, #40]	; 0x28
 80049f2:	9808      	ldr	r0, [sp, #32]
 80049f4:	2d00      	cmp	r5, #0
 80049f6:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 80049fa:	9008      	str	r0, [sp, #32]
 80049fc:	f2c0 8189 	blt.w	8004d12 <_svfprintf_r+0x11d2>
 8004a00:	2200      	movs	r2, #0
 8004a02:	9212      	str	r2, [sp, #72]	; 0x48
 8004a04:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004a06:	9815      	ldr	r0, [sp, #84]	; 0x54
 8004a08:	f1a3 0166 	sub.w	r1, r3, #102	; 0x66
 8004a0c:	424b      	negs	r3, r1
 8004a0e:	eb43 0301 	adc.w	r3, r3, r1
 8004a12:	469c      	mov	ip, r3
 8004a14:	2846      	cmp	r0, #70	; 0x46
 8004a16:	bf08      	it	eq
 8004a18:	f04c 0c01 	orreq.w	ip, ip, #1
 8004a1c:	930d      	str	r3, [sp, #52]	; 0x34
 8004a1e:	46a1      	mov	r9, r4
 8004a20:	2103      	movs	r1, #3
 8004a22:	f1bc 0f00 	cmp.w	ip, #0
 8004a26:	d107      	bne.n	8004a38 <_svfprintf_r+0xef8>
 8004a28:	2865      	cmp	r0, #101	; 0x65
 8004a2a:	bf18      	it	ne
 8004a2c:	2845      	cmpne	r0, #69	; 0x45
 8004a2e:	bf0c      	ite	eq
 8004a30:	f104 0901 	addeq.w	r9, r4, #1
 8004a34:	46a1      	movne	r9, r4
 8004a36:	2102      	movs	r1, #2
 8004a38:	e88d 0202 	stmia.w	sp, {r1, r9}
 8004a3c:	a940      	add	r1, sp, #256	; 0x100
 8004a3e:	9102      	str	r1, [sp, #8]
 8004a40:	a941      	add	r1, sp, #260	; 0x104
 8004a42:	9103      	str	r1, [sp, #12]
 8004a44:	4642      	mov	r2, r8
 8004a46:	a942      	add	r1, sp, #264	; 0x108
 8004a48:	462b      	mov	r3, r5
 8004a4a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004a4c:	9104      	str	r1, [sp, #16]
 8004a4e:	f8cd c018 	str.w	ip, [sp, #24]
 8004a52:	f000 fa6d 	bl	8004f30 <_dtoa_r>
 8004a56:	9915      	ldr	r1, [sp, #84]	; 0x54
 8004a58:	9011      	str	r0, [sp, #68]	; 0x44
 8004a5a:	2947      	cmp	r1, #71	; 0x47
 8004a5c:	bf18      	it	ne
 8004a5e:	2967      	cmpne	r1, #103	; 0x67
 8004a60:	f8dd c018 	ldr.w	ip, [sp, #24]
 8004a64:	d104      	bne.n	8004a70 <_svfprintf_r+0xf30>
 8004a66:	9a08      	ldr	r2, [sp, #32]
 8004a68:	07d2      	lsls	r2, r2, #31
 8004a6a:	bf58      	it	pl
 8004a6c:	9f42      	ldrpl	r7, [sp, #264]	; 0x108
 8004a6e:	d515      	bpl.n	8004a9c <_svfprintf_r+0xf5c>
 8004a70:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004a72:	eb03 0709 	add.w	r7, r3, r9
 8004a76:	f1bc 0f00 	cmp.w	ip, #0
 8004a7a:	d005      	beq.n	8004a88 <_svfprintf_r+0xf48>
 8004a7c:	781b      	ldrb	r3, [r3, #0]
 8004a7e:	2b30      	cmp	r3, #48	; 0x30
 8004a80:	f000 8165 	beq.w	8004d4e <_svfprintf_r+0x120e>
 8004a84:	9b40      	ldr	r3, [sp, #256]	; 0x100
 8004a86:	18ff      	adds	r7, r7, r3
 8004a88:	4640      	mov	r0, r8
 8004a8a:	4629      	mov	r1, r5
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	2300      	movs	r3, #0
 8004a90:	f003 ff86 	bl	80089a0 <__aeabi_dcmpeq>
 8004a94:	2800      	cmp	r0, #0
 8004a96:	f000 8117 	beq.w	8004cc8 <_svfprintf_r+0x1188>
 8004a9a:	9742      	str	r7, [sp, #264]	; 0x108
 8004a9c:	9811      	ldr	r0, [sp, #68]	; 0x44
 8004a9e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004aa0:	1a3f      	subs	r7, r7, r0
 8004aa2:	9710      	str	r7, [sp, #64]	; 0x40
 8004aa4:	2900      	cmp	r1, #0
 8004aa6:	f000 80f9 	beq.w	8004c9c <_svfprintf_r+0x115c>
 8004aaa:	9940      	ldr	r1, [sp, #256]	; 0x100
 8004aac:	1ccb      	adds	r3, r1, #3
 8004aae:	db02      	blt.n	8004ab6 <_svfprintf_r+0xf76>
 8004ab0:	428c      	cmp	r4, r1
 8004ab2:	f280 80fa 	bge.w	8004caa <_svfprintf_r+0x116a>
 8004ab6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004ab8:	3a02      	subs	r2, #2
 8004aba:	9215      	str	r2, [sp, #84]	; 0x54
 8004abc:	3901      	subs	r1, #1
 8004abe:	9815      	ldr	r0, [sp, #84]	; 0x54
 8004ac0:	9140      	str	r1, [sp, #256]	; 0x100
 8004ac2:	2900      	cmp	r1, #0
 8004ac4:	f88d 00f0 	strb.w	r0, [sp, #240]	; 0xf0
 8004ac8:	f2c0 815d 	blt.w	8004d86 <_svfprintf_r+0x1246>
 8004acc:	232b      	movs	r3, #43	; 0x2b
 8004ace:	f88d 30f1 	strb.w	r3, [sp, #241]	; 0xf1
 8004ad2:	2909      	cmp	r1, #9
 8004ad4:	f340 8122 	ble.w	8004d1c <_svfprintf_r+0x11dc>
 8004ad8:	f10d 07ff 	add.w	r7, sp, #255	; 0xff
 8004adc:	f246 6467 	movw	r4, #26215	; 0x6667
 8004ae0:	4638      	mov	r0, r7
 8004ae2:	f2c6 6466 	movt	r4, #26214	; 0x6666
 8004ae6:	fb84 3201 	smull	r3, r2, r4, r1
 8004aea:	17cb      	asrs	r3, r1, #31
 8004aec:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 8004af0:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8004af4:	eba1 0242 	sub.w	r2, r1, r2, lsl #1
 8004af8:	3230      	adds	r2, #48	; 0x30
 8004afa:	2b09      	cmp	r3, #9
 8004afc:	4605      	mov	r5, r0
 8004afe:	4619      	mov	r1, r3
 8004b00:	f800 2d01 	strb.w	r2, [r0, #-1]!
 8004b04:	dcef      	bgt.n	8004ae6 <_svfprintf_r+0xfa6>
 8004b06:	3130      	adds	r1, #48	; 0x30
 8004b08:	1eaa      	subs	r2, r5, #2
 8004b0a:	b2c9      	uxtb	r1, r1
 8004b0c:	42ba      	cmp	r2, r7
 8004b0e:	f805 1c02 	strb.w	r1, [r5, #-2]
 8004b12:	bf28      	it	cs
 8004b14:	f10d 01f2 	addcs.w	r1, sp, #242	; 0xf2
 8004b18:	d213      	bcs.n	8004b42 <_svfprintf_r+0x1002>
 8004b1a:	f10d 03f2 	add.w	r3, sp, #242	; 0xf2
 8004b1e:	f10d 00fe 	add.w	r0, sp, #254	; 0xfe
 8004b22:	e009      	b.n	8004b38 <_svfprintf_r+0xff8>
 8004b24:	080090d4 	.word	0x080090d4
 8004b28:	080090d8 	.word	0x080090d8
 8004b2c:	0800910c 	.word	0x0800910c
 8004b30:	08008e3c 	.word	0x08008e3c
 8004b34:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8004b38:	f803 1b01 	strb.w	r1, [r3], #1
 8004b3c:	4282      	cmp	r2, r0
 8004b3e:	4619      	mov	r1, r3
 8004b40:	d1f8      	bne.n	8004b34 <_svfprintf_r+0xff4>
 8004b42:	9810      	ldr	r0, [sp, #64]	; 0x40
 8004b44:	ab3c      	add	r3, sp, #240	; 0xf0
 8004b46:	1acb      	subs	r3, r1, r3
 8004b48:	931b      	str	r3, [sp, #108]	; 0x6c
 8004b4a:	2801      	cmp	r0, #1
 8004b4c:	4403      	add	r3, r0
 8004b4e:	930d      	str	r3, [sp, #52]	; 0x34
 8004b50:	f340 8125 	ble.w	8004d9e <_svfprintf_r+0x125e>
 8004b54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004b56:	3301      	adds	r3, #1
 8004b58:	ea23 70e3 	bic.w	r0, r3, r3, asr #31
 8004b5c:	2100      	movs	r1, #0
 8004b5e:	930d      	str	r3, [sp, #52]	; 0x34
 8004b60:	900a      	str	r0, [sp, #40]	; 0x28
 8004b62:	9116      	str	r1, [sp, #88]	; 0x58
 8004b64:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004b66:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	f43f a956 	beq.w	8003e1c <_svfprintf_r+0x2dc>
 8004b70:	232d      	movs	r3, #45	; 0x2d
 8004b72:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
 8004b76:	2300      	movs	r3, #0
 8004b78:	9312      	str	r3, [sp, #72]	; 0x48
 8004b7a:	f7ff b950 	b.w	8003e1e <_svfprintf_r+0x2de>
 8004b7e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004b80:	2140      	movs	r1, #64	; 0x40
 8004b82:	f001 fa59 	bl	8006038 <_malloc_r>
 8004b86:	f8ca 0000 	str.w	r0, [sl]
 8004b8a:	f8ca 0010 	str.w	r0, [sl, #16]
 8004b8e:	2800      	cmp	r0, #0
 8004b90:	f000 812b 	beq.w	8004dea <_svfprintf_r+0x12aa>
 8004b94:	2340      	movs	r3, #64	; 0x40
 8004b96:	f8ca 3014 	str.w	r3, [sl, #20]
 8004b9a:	f7fe bfec 	b.w	8003b76 <_svfprintf_r+0x36>
 8004b9e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004ba0:	4651      	mov	r1, sl
 8004ba2:	465a      	mov	r2, fp
 8004ba4:	f002 fb3e 	bl	8007224 <__ssprint_r>
 8004ba8:	2800      	cmp	r0, #0
 8004baa:	f47f a8a0 	bne.w	8003cee <_svfprintf_r+0x1ae>
 8004bae:	9f40      	ldr	r7, [sp, #256]	; 0x100
 8004bb0:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004bb2:	ae1f      	add	r6, sp, #124	; 0x7c
 8004bb4:	e6bb      	b.n	800492e <_svfprintf_r+0xdee>
 8004bb6:	9815      	ldr	r0, [sp, #84]	; 0x54
 8004bb8:	2847      	cmp	r0, #71	; 0x47
 8004bba:	bf18      	it	ne
 8004bbc:	2867      	cmpne	r0, #103	; 0x67
 8004bbe:	bf14      	ite	ne
 8004bc0:	2000      	movne	r0, #0
 8004bc2:	2001      	moveq	r0, #1
 8004bc4:	900a      	str	r0, [sp, #40]	; 0x28
 8004bc6:	2406      	movs	r4, #6
 8004bc8:	e713      	b.n	80049f2 <_svfprintf_r+0xeb2>
 8004bca:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004bcc:	4651      	mov	r1, sl
 8004bce:	465a      	mov	r2, fp
 8004bd0:	f002 fb28 	bl	8007224 <__ssprint_r>
 8004bd4:	2800      	cmp	r0, #0
 8004bd6:	f47f a88a 	bne.w	8003cee <_svfprintf_r+0x1ae>
 8004bda:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004bdc:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8004bde:	ae1f      	add	r6, sp, #124	; 0x7c
 8004be0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004be2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004be4:	6072      	str	r2, [r6, #4]
 8004be6:	3401      	adds	r4, #1
 8004be8:	18ad      	adds	r5, r5, r2
 8004bea:	2c07      	cmp	r4, #7
 8004bec:	6033      	str	r3, [r6, #0]
 8004bee:	953b      	str	r5, [sp, #236]	; 0xec
 8004bf0:	943a      	str	r4, [sp, #232]	; 0xe8
 8004bf2:	f77f ab4b 	ble.w	800428c <_svfprintf_r+0x74c>
 8004bf6:	f7ff bba6 	b.w	8004346 <_svfprintf_r+0x806>
 8004bfa:	f002 fae3 	bl	80071c4 <strlen>
 8004bfe:	900d      	str	r0, [sp, #52]	; 0x34
 8004c00:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8004c04:	9512      	str	r5, [sp, #72]	; 0x48
 8004c06:	900a      	str	r0, [sp, #40]	; 0x28
 8004c08:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 8004c0c:	970e      	str	r7, [sp, #56]	; 0x38
 8004c0e:	9516      	str	r5, [sp, #88]	; 0x58
 8004c10:	f7ff b904 	b.w	8003e1c <_svfprintf_r+0x2dc>
 8004c14:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004c16:	4651      	mov	r1, sl
 8004c18:	465a      	mov	r2, fp
 8004c1a:	f002 fb03 	bl	8007224 <__ssprint_r>
 8004c1e:	2800      	cmp	r0, #0
 8004c20:	f47f a865 	bne.w	8003cee <_svfprintf_r+0x1ae>
 8004c24:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004c26:	ae1f      	add	r6, sp, #124	; 0x7c
 8004c28:	e4f1      	b.n	800460e <_svfprintf_r+0xace>
 8004c2a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004c2c:	4651      	mov	r1, sl
 8004c2e:	465a      	mov	r2, fp
 8004c30:	f002 faf8 	bl	8007224 <__ssprint_r>
 8004c34:	2800      	cmp	r0, #0
 8004c36:	f47f a85a 	bne.w	8003cee <_svfprintf_r+0x1ae>
 8004c3a:	9b40      	ldr	r3, [sp, #256]	; 0x100
 8004c3c:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004c3e:	ae1f      	add	r6, sp, #124	; 0x7c
 8004c40:	e593      	b.n	800476a <_svfprintf_r+0xc2a>
 8004c42:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004c44:	4651      	mov	r1, sl
 8004c46:	465a      	mov	r2, fp
 8004c48:	f002 faec 	bl	8007224 <__ssprint_r>
 8004c4c:	2800      	cmp	r0, #0
 8004c4e:	f47f a84e 	bne.w	8003cee <_svfprintf_r+0x1ae>
 8004c52:	9b40      	ldr	r3, [sp, #256]	; 0x100
 8004c54:	9910      	ldr	r1, [sp, #64]	; 0x40
 8004c56:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004c58:	1acb      	subs	r3, r1, r3
 8004c5a:	ae1f      	add	r6, sp, #124	; 0x7c
 8004c5c:	e59c      	b.n	8004798 <_svfprintf_r+0xc58>
 8004c5e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004c60:	ebc3 030b 	rsb	r3, r3, fp
 8004c64:	930d      	str	r3, [sp, #52]	; 0x34
 8004c66:	f7ff b8cf 	b.w	8003e08 <_svfprintf_r+0x2c8>
 8004c6a:	46a0      	mov	r8, r4
 8004c6c:	461c      	mov	r4, r3
 8004c6e:	3401      	adds	r4, #1
 8004c70:	19ed      	adds	r5, r5, r7
 8004c72:	2c07      	cmp	r4, #7
 8004c74:	f8c6 8000 	str.w	r8, [r6]
 8004c78:	6077      	str	r7, [r6, #4]
 8004c7a:	953b      	str	r5, [sp, #236]	; 0xec
 8004c7c:	943a      	str	r4, [sp, #232]	; 0xe8
 8004c7e:	dca4      	bgt.n	8004bca <_svfprintf_r+0x108a>
 8004c80:	3608      	adds	r6, #8
 8004c82:	e7ad      	b.n	8004be0 <_svfprintf_r+0x10a0>
 8004c84:	2c06      	cmp	r4, #6
 8004c86:	bf28      	it	cs
 8004c88:	2406      	movcs	r4, #6
 8004c8a:	495f      	ldr	r1, [pc, #380]	; (8004e08 <_svfprintf_r+0x12c8>)
 8004c8c:	940d      	str	r4, [sp, #52]	; 0x34
 8004c8e:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
 8004c92:	900a      	str	r0, [sp, #40]	; 0x28
 8004c94:	970e      	str	r7, [sp, #56]	; 0x38
 8004c96:	9111      	str	r1, [sp, #68]	; 0x44
 8004c98:	f7ff ba01 	b.w	800409e <_svfprintf_r+0x55e>
 8004c9c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004c9e:	2b65      	cmp	r3, #101	; 0x65
 8004ca0:	dd6f      	ble.n	8004d82 <_svfprintf_r+0x1242>
 8004ca2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004ca4:	9940      	ldr	r1, [sp, #256]	; 0x100
 8004ca6:	2a00      	cmp	r2, #0
 8004ca8:	d15e      	bne.n	8004d68 <_svfprintf_r+0x1228>
 8004caa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004cac:	428a      	cmp	r2, r1
 8004cae:	dc3d      	bgt.n	8004d2c <_svfprintf_r+0x11ec>
 8004cb0:	9b08      	ldr	r3, [sp, #32]
 8004cb2:	07da      	lsls	r2, r3, #31
 8004cb4:	d56c      	bpl.n	8004d90 <_svfprintf_r+0x1250>
 8004cb6:	1c4b      	adds	r3, r1, #1
 8004cb8:	ea23 70e3 	bic.w	r0, r3, r3, asr #31
 8004cbc:	2267      	movs	r2, #103	; 0x67
 8004cbe:	930d      	str	r3, [sp, #52]	; 0x34
 8004cc0:	900a      	str	r0, [sp, #40]	; 0x28
 8004cc2:	9215      	str	r2, [sp, #84]	; 0x54
 8004cc4:	9116      	str	r1, [sp, #88]	; 0x58
 8004cc6:	e74d      	b.n	8004b64 <_svfprintf_r+0x1024>
 8004cc8:	9b42      	ldr	r3, [sp, #264]	; 0x108
 8004cca:	429f      	cmp	r7, r3
 8004ccc:	bf98      	it	ls
 8004cce:	461f      	movls	r7, r3
 8004cd0:	f67f aee4 	bls.w	8004a9c <_svfprintf_r+0xf5c>
 8004cd4:	2230      	movs	r2, #48	; 0x30
 8004cd6:	f803 2b01 	strb.w	r2, [r3], #1
 8004cda:	42bb      	cmp	r3, r7
 8004cdc:	9342      	str	r3, [sp, #264]	; 0x108
 8004cde:	d1fa      	bne.n	8004cd6 <_svfprintf_r+0x1196>
 8004ce0:	e6dc      	b.n	8004a9c <_svfprintf_r+0xf5c>
 8004ce2:	ea24 72e4 	bic.w	r2, r4, r4, asr #31
 8004ce6:	9012      	str	r0, [sp, #72]	; 0x48
 8004ce8:	920a      	str	r2, [sp, #40]	; 0x28
 8004cea:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 8004cee:	970e      	str	r7, [sp, #56]	; 0x38
 8004cf0:	940d      	str	r4, [sp, #52]	; 0x34
 8004cf2:	9016      	str	r0, [sp, #88]	; 0x58
 8004cf4:	f7ff b892 	b.w	8003e1c <_svfprintf_r+0x2dc>
 8004cf8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004cfa:	4651      	mov	r1, sl
 8004cfc:	465a      	mov	r2, fp
 8004cfe:	f002 fa91 	bl	8007224 <__ssprint_r>
 8004d02:	2800      	cmp	r0, #0
 8004d04:	f47e aff3 	bne.w	8003cee <_svfprintf_r+0x1ae>
 8004d08:	9f40      	ldr	r7, [sp, #256]	; 0x100
 8004d0a:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004d0c:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8004d0e:	ae1f      	add	r6, sp, #124	; 0x7c
 8004d10:	e621      	b.n	8004956 <_svfprintf_r+0xe16>
 8004d12:	212d      	movs	r1, #45	; 0x2d
 8004d14:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8004d18:	9112      	str	r1, [sp, #72]	; 0x48
 8004d1a:	e673      	b.n	8004a04 <_svfprintf_r+0xec4>
 8004d1c:	3130      	adds	r1, #48	; 0x30
 8004d1e:	2330      	movs	r3, #48	; 0x30
 8004d20:	f88d 10f3 	strb.w	r1, [sp, #243]	; 0xf3
 8004d24:	f88d 30f2 	strb.w	r3, [sp, #242]	; 0xf2
 8004d28:	a93d      	add	r1, sp, #244	; 0xf4
 8004d2a:	e70a      	b.n	8004b42 <_svfprintf_r+0x1002>
 8004d2c:	2900      	cmp	r1, #0
 8004d2e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8004d30:	bfd4      	ite	le
 8004d32:	f1c1 0302 	rsble	r3, r1, #2
 8004d36:	2301      	movgt	r3, #1
 8004d38:	181b      	adds	r3, r3, r0
 8004d3a:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8004d3e:	930d      	str	r3, [sp, #52]	; 0x34
 8004d40:	2367      	movs	r3, #103	; 0x67
 8004d42:	920a      	str	r2, [sp, #40]	; 0x28
 8004d44:	9315      	str	r3, [sp, #84]	; 0x54
 8004d46:	e7bd      	b.n	8004cc4 <_svfprintf_r+0x1184>
 8004d48:	2401      	movs	r4, #1
 8004d4a:	940a      	str	r4, [sp, #40]	; 0x28
 8004d4c:	e651      	b.n	80049f2 <_svfprintf_r+0xeb2>
 8004d4e:	4640      	mov	r0, r8
 8004d50:	4629      	mov	r1, r5
 8004d52:	2200      	movs	r2, #0
 8004d54:	2300      	movs	r3, #0
 8004d56:	f003 fe23 	bl	80089a0 <__aeabi_dcmpeq>
 8004d5a:	2800      	cmp	r0, #0
 8004d5c:	f47f ae92 	bne.w	8004a84 <_svfprintf_r+0xf44>
 8004d60:	f1c9 0301 	rsb	r3, r9, #1
 8004d64:	9340      	str	r3, [sp, #256]	; 0x100
 8004d66:	e68e      	b.n	8004a86 <_svfprintf_r+0xf46>
 8004d68:	2900      	cmp	r1, #0
 8004d6a:	dd38      	ble.n	8004dde <_svfprintf_r+0x129e>
 8004d6c:	bb74      	cbnz	r4, 8004dcc <_svfprintf_r+0x128c>
 8004d6e:	9b08      	ldr	r3, [sp, #32]
 8004d70:	07dd      	lsls	r5, r3, #31
 8004d72:	d42b      	bmi.n	8004dcc <_svfprintf_r+0x128c>
 8004d74:	ea21 70e1 	bic.w	r0, r1, r1, asr #31
 8004d78:	2266      	movs	r2, #102	; 0x66
 8004d7a:	900a      	str	r0, [sp, #40]	; 0x28
 8004d7c:	910d      	str	r1, [sp, #52]	; 0x34
 8004d7e:	9215      	str	r2, [sp, #84]	; 0x54
 8004d80:	e7a0      	b.n	8004cc4 <_svfprintf_r+0x1184>
 8004d82:	9940      	ldr	r1, [sp, #256]	; 0x100
 8004d84:	e69a      	b.n	8004abc <_svfprintf_r+0xf7c>
 8004d86:	232d      	movs	r3, #45	; 0x2d
 8004d88:	4249      	negs	r1, r1
 8004d8a:	f88d 30f1 	strb.w	r3, [sp, #241]	; 0xf1
 8004d8e:	e6a0      	b.n	8004ad2 <_svfprintf_r+0xf92>
 8004d90:	ea21 70e1 	bic.w	r0, r1, r1, asr #31
 8004d94:	2267      	movs	r2, #103	; 0x67
 8004d96:	900a      	str	r0, [sp, #40]	; 0x28
 8004d98:	910d      	str	r1, [sp, #52]	; 0x34
 8004d9a:	9215      	str	r2, [sp, #84]	; 0x54
 8004d9c:	e792      	b.n	8004cc4 <_svfprintf_r+0x1184>
 8004d9e:	9908      	ldr	r1, [sp, #32]
 8004da0:	f011 0301 	ands.w	r3, r1, #1
 8004da4:	f47f aed6 	bne.w	8004b54 <_svfprintf_r+0x1014>
 8004da8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004daa:	9316      	str	r3, [sp, #88]	; 0x58
 8004dac:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8004db0:	920a      	str	r2, [sp, #40]	; 0x28
 8004db2:	e6d7      	b.n	8004b64 <_svfprintf_r+0x1024>
 8004db4:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004db6:	680c      	ldr	r4, [r1, #0]
 8004db8:	1d0b      	adds	r3, r1, #4
 8004dba:	2c00      	cmp	r4, #0
 8004dbc:	bfbc      	itt	lt
 8004dbe:	930e      	strlt	r3, [sp, #56]	; 0x38
 8004dc0:	f04f 34ff 	movlt.w	r4, #4294967295	; 0xffffffff
 8004dc4:	f6bf a985 	bge.w	80040d2 <_svfprintf_r+0x592>
 8004dc8:	f7fe bf18 	b.w	8003bfc <_svfprintf_r+0xbc>
 8004dcc:	3401      	adds	r4, #1
 8004dce:	190c      	adds	r4, r1, r4
 8004dd0:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
 8004dd4:	2066      	movs	r0, #102	; 0x66
 8004dd6:	940d      	str	r4, [sp, #52]	; 0x34
 8004dd8:	930a      	str	r3, [sp, #40]	; 0x28
 8004dda:	9015      	str	r0, [sp, #84]	; 0x54
 8004ddc:	e772      	b.n	8004cc4 <_svfprintf_r+0x1184>
 8004dde:	b914      	cbnz	r4, 8004de6 <_svfprintf_r+0x12a6>
 8004de0:	9a08      	ldr	r2, [sp, #32]
 8004de2:	07d0      	lsls	r0, r2, #31
 8004de4:	d509      	bpl.n	8004dfa <_svfprintf_r+0x12ba>
 8004de6:	3402      	adds	r4, #2
 8004de8:	e7f2      	b.n	8004dd0 <_svfprintf_r+0x1290>
 8004dea:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004dec:	230c      	movs	r3, #12
 8004dee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004df2:	600b      	str	r3, [r1, #0]
 8004df4:	920c      	str	r2, [sp, #48]	; 0x30
 8004df6:	f7fe bf83 	b.w	8003d00 <_svfprintf_r+0x1c0>
 8004dfa:	2001      	movs	r0, #1
 8004dfc:	2266      	movs	r2, #102	; 0x66
 8004dfe:	900a      	str	r0, [sp, #40]	; 0x28
 8004e00:	9215      	str	r2, [sp, #84]	; 0x54
 8004e02:	900d      	str	r0, [sp, #52]	; 0x34
 8004e04:	e75e      	b.n	8004cc4 <_svfprintf_r+0x1184>
 8004e06:	bf00      	nop
 8004e08:	08009104 	.word	0x08009104
 8004e0c:	00000000 	.word	0x00000000

08004e10 <quorem>:
 8004e10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e14:	6903      	ldr	r3, [r0, #16]
 8004e16:	690d      	ldr	r5, [r1, #16]
 8004e18:	429d      	cmp	r5, r3
 8004e1a:	4681      	mov	r9, r0
 8004e1c:	f300 8084 	bgt.w	8004f28 <quorem+0x118>
 8004e20:	1ceb      	adds	r3, r5, #3
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	18cf      	adds	r7, r1, r3
 8004e26:	18c3      	adds	r3, r0, r3
 8004e28:	687e      	ldr	r6, [r7, #4]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	3601      	adds	r6, #1
 8004e2e:	fbb3 f6f6 	udiv	r6, r3, r6
 8004e32:	f101 0414 	add.w	r4, r1, #20
 8004e36:	3d01      	subs	r5, #1
 8004e38:	3704      	adds	r7, #4
 8004e3a:	f100 0814 	add.w	r8, r0, #20
 8004e3e:	2e00      	cmp	r6, #0
 8004e40:	d03c      	beq.n	8004ebc <quorem+0xac>
 8004e42:	f04f 0e00 	mov.w	lr, #0
 8004e46:	4642      	mov	r2, r8
 8004e48:	4623      	mov	r3, r4
 8004e4a:	46f4      	mov	ip, lr
 8004e4c:	f853 bb04 	ldr.w	fp, [r3], #4
 8004e50:	6810      	ldr	r0, [r2, #0]
 8004e52:	fa1f fa8b 	uxth.w	sl, fp
 8004e56:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
 8004e5a:	fb06 ea0a 	mla	sl, r6, sl, lr
 8004e5e:	fb06 fe0b 	mul.w	lr, r6, fp
 8004e62:	eb0e 4e1a 	add.w	lr, lr, sl, lsr #16
 8004e66:	fa1c fc80 	uxtah	ip, ip, r0
 8004e6a:	fa1f fb8e 	uxth.w	fp, lr
 8004e6e:	fa1f fa8a 	uxth.w	sl, sl
 8004e72:	ebca 0c0c 	rsb	ip, sl, ip
 8004e76:	ebcb 4010 	rsb	r0, fp, r0, lsr #16
 8004e7a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8004e7e:	fa1f fc8c 	uxth.w	ip, ip
 8004e82:	ea4c 4c00 	orr.w	ip, ip, r0, lsl #16
 8004e86:	429f      	cmp	r7, r3
 8004e88:	f842 cb04 	str.w	ip, [r2], #4
 8004e8c:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8004e90:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004e94:	d2da      	bcs.n	8004e4c <quorem+0x3c>
 8004e96:	1d2a      	adds	r2, r5, #4
 8004e98:	eb09 0382 	add.w	r3, r9, r2, lsl #2
 8004e9c:	6858      	ldr	r0, [r3, #4]
 8004e9e:	b968      	cbnz	r0, 8004ebc <quorem+0xac>
 8004ea0:	4598      	cmp	r8, r3
 8004ea2:	d209      	bcs.n	8004eb8 <quorem+0xa8>
 8004ea4:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 8004ea8:	b112      	cbz	r2, 8004eb0 <quorem+0xa0>
 8004eaa:	e005      	b.n	8004eb8 <quorem+0xa8>
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	b91a      	cbnz	r2, 8004eb8 <quorem+0xa8>
 8004eb0:	3b04      	subs	r3, #4
 8004eb2:	3d01      	subs	r5, #1
 8004eb4:	4598      	cmp	r8, r3
 8004eb6:	d3f9      	bcc.n	8004eac <quorem+0x9c>
 8004eb8:	f8c9 5010 	str.w	r5, [r9, #16]
 8004ebc:	4648      	mov	r0, r9
 8004ebe:	f001 fe4f 	bl	8006b60 <__mcmp>
 8004ec2:	2800      	cmp	r0, #0
 8004ec4:	db2d      	blt.n	8004f22 <quorem+0x112>
 8004ec6:	3601      	adds	r6, #1
 8004ec8:	4643      	mov	r3, r8
 8004eca:	f04f 0c00 	mov.w	ip, #0
 8004ece:	f854 2b04 	ldr.w	r2, [r4], #4
 8004ed2:	6818      	ldr	r0, [r3, #0]
 8004ed4:	b291      	uxth	r1, r2
 8004ed6:	fa1f fa80 	uxth.w	sl, r0
 8004eda:	0c12      	lsrs	r2, r2, #16
 8004edc:	ebc1 010a 	rsb	r1, r1, sl
 8004ee0:	4461      	add	r1, ip
 8004ee2:	ebc2 4210 	rsb	r2, r2, r0, lsr #16
 8004ee6:	eb02 4221 	add.w	r2, r2, r1, asr #16
 8004eea:	b289      	uxth	r1, r1
 8004eec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004ef0:	42a7      	cmp	r7, r4
 8004ef2:	f843 1b04 	str.w	r1, [r3], #4
 8004ef6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004efa:	d2e8      	bcs.n	8004ece <quorem+0xbe>
 8004efc:	1d2a      	adds	r2, r5, #4
 8004efe:	eb09 0382 	add.w	r3, r9, r2, lsl #2
 8004f02:	6859      	ldr	r1, [r3, #4]
 8004f04:	b969      	cbnz	r1, 8004f22 <quorem+0x112>
 8004f06:	4598      	cmp	r8, r3
 8004f08:	d209      	bcs.n	8004f1e <quorem+0x10e>
 8004f0a:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 8004f0e:	b112      	cbz	r2, 8004f16 <quorem+0x106>
 8004f10:	e005      	b.n	8004f1e <quorem+0x10e>
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	b91a      	cbnz	r2, 8004f1e <quorem+0x10e>
 8004f16:	3b04      	subs	r3, #4
 8004f18:	3d01      	subs	r5, #1
 8004f1a:	4598      	cmp	r8, r3
 8004f1c:	d3f9      	bcc.n	8004f12 <quorem+0x102>
 8004f1e:	f8c9 5010 	str.w	r5, [r9, #16]
 8004f22:	4630      	mov	r0, r6
 8004f24:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f28:	2000      	movs	r0, #0
 8004f2a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f2e:	bf00      	nop

08004f30 <_dtoa_r>:
 8004f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f34:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004f36:	b09d      	sub	sp, #116	; 0x74
 8004f38:	4607      	mov	r7, r0
 8004f3a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8004f3c:	4692      	mov	sl, r2
 8004f3e:	469b      	mov	fp, r3
 8004f40:	b141      	cbz	r1, 8004f54 <_dtoa_r+0x24>
 8004f42:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004f44:	2201      	movs	r2, #1
 8004f46:	409a      	lsls	r2, r3
 8004f48:	604b      	str	r3, [r1, #4]
 8004f4a:	608a      	str	r2, [r1, #8]
 8004f4c:	f001 fbd4 	bl	80066f8 <_Bfree>
 8004f50:	2300      	movs	r3, #0
 8004f52:	643b      	str	r3, [r7, #64]	; 0x40
 8004f54:	f1bb 0500 	subs.w	r5, fp, #0
 8004f58:	f2c0 80df 	blt.w	800511a <_dtoa_r+0x1ea>
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	6023      	str	r3, [r4, #0]
 8004f60:	2300      	movs	r3, #0
 8004f62:	461a      	mov	r2, r3
 8004f64:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 8004f68:	f6c7 72f0 	movt	r2, #32752	; 0x7ff0
 8004f6c:	402b      	ands	r3, r5
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	f000 80be 	beq.w	80050f0 <_dtoa_r+0x1c0>
 8004f74:	4650      	mov	r0, sl
 8004f76:	4659      	mov	r1, fp
 8004f78:	2200      	movs	r2, #0
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	46d0      	mov	r8, sl
 8004f7e:	46d9      	mov	r9, fp
 8004f80:	2401      	movs	r4, #1
 8004f82:	f003 fd0d 	bl	80089a0 <__aeabi_dcmpeq>
 8004f86:	b978      	cbnz	r0, 8004fa8 <_dtoa_r+0x78>
 8004f88:	f014 0fff 	tst.w	r4, #255	; 0xff
 8004f8c:	d110      	bne.n	8004fb0 <_dtoa_r+0x80>
 8004f8e:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8004f90:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8004f92:	2301      	movs	r3, #1
 8004f94:	602b      	str	r3, [r5, #0]
 8004f96:	4d78      	ldr	r5, [pc, #480]	; (8005178 <_dtoa_r+0x248>)
 8004f98:	b114      	cbz	r4, 8004fa0 <_dtoa_r+0x70>
 8004f9a:	4d78      	ldr	r5, [pc, #480]	; (800517c <_dtoa_r+0x24c>)
 8004f9c:	6025      	str	r5, [r4, #0]
 8004f9e:	3d01      	subs	r5, #1
 8004fa0:	4628      	mov	r0, r5
 8004fa2:	b01d      	add	sp, #116	; 0x74
 8004fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fa8:	2400      	movs	r4, #0
 8004faa:	f014 0fff 	tst.w	r4, #255	; 0xff
 8004fae:	d0ee      	beq.n	8004f8e <_dtoa_r+0x5e>
 8004fb0:	a91b      	add	r1, sp, #108	; 0x6c
 8004fb2:	9100      	str	r1, [sp, #0]
 8004fb4:	4638      	mov	r0, r7
 8004fb6:	a91a      	add	r1, sp, #104	; 0x68
 8004fb8:	4642      	mov	r2, r8
 8004fba:	464b      	mov	r3, r9
 8004fbc:	9101      	str	r1, [sp, #4]
 8004fbe:	f001 fed1 	bl	8006d64 <__d2b>
 8004fc2:	f3c5 540a 	ubfx	r4, r5, #20, #11
 8004fc6:	900a      	str	r0, [sp, #40]	; 0x28
 8004fc8:	2c00      	cmp	r4, #0
 8004fca:	f040 80b5 	bne.w	8005138 <_dtoa_r+0x208>
 8004fce:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8004fd0:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8004fd2:	f46f 6382 	mvn.w	r3, #1040	; 0x410
 8004fd6:	1934      	adds	r4, r6, r4
 8004fd8:	429c      	cmp	r4, r3
 8004fda:	f2c0 8281 	blt.w	80054e0 <_dtoa_r+0x5b0>
 8004fde:	f64f 430e 	movw	r3, #64526	; 0xfc0e
 8004fe2:	f6cf 73ff 	movt	r3, #65535	; 0xffff
 8004fe6:	1b1b      	subs	r3, r3, r4
 8004fe8:	f204 4212 	addw	r2, r4, #1042	; 0x412
 8004fec:	fa15 f303 	lsls.w	r3, r5, r3
 8004ff0:	fa2a f002 	lsr.w	r0, sl, r2
 8004ff4:	4318      	orrs	r0, r3
 8004ff6:	f003 f9f5 	bl	80083e4 <__aeabi_ui2d>
 8004ffa:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004ffe:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005000:	2501      	movs	r5, #1
 8005002:	f1a0 70f8 	sub.w	r0, r0, #32505856	; 0x1f00000
 8005006:	900d      	str	r0, [sp, #52]	; 0x34
 8005008:	3c01      	subs	r4, #1
 800500a:	9516      	str	r5, [sp, #88]	; 0x58
 800500c:	2300      	movs	r3, #0
 800500e:	2200      	movs	r2, #0
 8005010:	f6c3 73f8 	movt	r3, #16376	; 0x3ff8
 8005014:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005018:	f003 f8a6 	bl	8008168 <__aeabi_dsub>
 800501c:	a350      	add	r3, pc, #320	; (adr r3, 8005160 <_dtoa_r+0x230>)
 800501e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005022:	f003 fa55 	bl	80084d0 <__aeabi_dmul>
 8005026:	a350      	add	r3, pc, #320	; (adr r3, 8005168 <_dtoa_r+0x238>)
 8005028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800502c:	f003 f89e 	bl	800816c <__adddf3>
 8005030:	4680      	mov	r8, r0
 8005032:	4620      	mov	r0, r4
 8005034:	4689      	mov	r9, r1
 8005036:	f003 f9e5 	bl	8008404 <__aeabi_i2d>
 800503a:	a34d      	add	r3, pc, #308	; (adr r3, 8005170 <_dtoa_r+0x240>)
 800503c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005040:	f003 fa46 	bl	80084d0 <__aeabi_dmul>
 8005044:	4602      	mov	r2, r0
 8005046:	460b      	mov	r3, r1
 8005048:	4640      	mov	r0, r8
 800504a:	4649      	mov	r1, r9
 800504c:	f003 f88e 	bl	800816c <__adddf3>
 8005050:	4680      	mov	r8, r0
 8005052:	4689      	mov	r9, r1
 8005054:	f003 fcd6 	bl	8008a04 <__aeabi_d2iz>
 8005058:	4649      	mov	r1, r9
 800505a:	9005      	str	r0, [sp, #20]
 800505c:	2200      	movs	r2, #0
 800505e:	4640      	mov	r0, r8
 8005060:	2300      	movs	r3, #0
 8005062:	f003 fca7 	bl	80089b4 <__aeabi_dcmplt>
 8005066:	b150      	cbz	r0, 800507e <_dtoa_r+0x14e>
 8005068:	9805      	ldr	r0, [sp, #20]
 800506a:	f003 f9cb 	bl	8008404 <__aeabi_i2d>
 800506e:	4642      	mov	r2, r8
 8005070:	464b      	mov	r3, r9
 8005072:	f003 fc95 	bl	80089a0 <__aeabi_dcmpeq>
 8005076:	b910      	cbnz	r0, 800507e <_dtoa_r+0x14e>
 8005078:	9d05      	ldr	r5, [sp, #20]
 800507a:	3d01      	subs	r5, #1
 800507c:	9505      	str	r5, [sp, #20]
 800507e:	9d05      	ldr	r5, [sp, #20]
 8005080:	2d16      	cmp	r5, #22
 8005082:	f200 815e 	bhi.w	8005342 <_dtoa_r+0x412>
 8005086:	4b3e      	ldr	r3, [pc, #248]	; (8005180 <_dtoa_r+0x250>)
 8005088:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800508c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005090:	4652      	mov	r2, sl
 8005092:	465b      	mov	r3, fp
 8005094:	f003 fcac 	bl	80089f0 <__aeabi_dcmpgt>
 8005098:	2800      	cmp	r0, #0
 800509a:	f000 8229 	beq.w	80054f0 <_dtoa_r+0x5c0>
 800509e:	9d05      	ldr	r5, [sp, #20]
 80050a0:	3d01      	subs	r5, #1
 80050a2:	9505      	str	r5, [sp, #20]
 80050a4:	2500      	movs	r5, #0
 80050a6:	9514      	str	r5, [sp, #80]	; 0x50
 80050a8:	1b34      	subs	r4, r6, r4
 80050aa:	3c01      	subs	r4, #1
 80050ac:	f100 8213 	bmi.w	80054d6 <_dtoa_r+0x5a6>
 80050b0:	2500      	movs	r5, #0
 80050b2:	940b      	str	r4, [sp, #44]	; 0x2c
 80050b4:	950f      	str	r5, [sp, #60]	; 0x3c
 80050b6:	9c05      	ldr	r4, [sp, #20]
 80050b8:	2c00      	cmp	r4, #0
 80050ba:	f2c0 8203 	blt.w	80054c4 <_dtoa_r+0x594>
 80050be:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80050c0:	9413      	str	r4, [sp, #76]	; 0x4c
 80050c2:	192d      	adds	r5, r5, r4
 80050c4:	2400      	movs	r4, #0
 80050c6:	950b      	str	r5, [sp, #44]	; 0x2c
 80050c8:	9410      	str	r4, [sp, #64]	; 0x40
 80050ca:	9d26      	ldr	r5, [sp, #152]	; 0x98
 80050cc:	2d09      	cmp	r5, #9
 80050ce:	d85d      	bhi.n	800518c <_dtoa_r+0x25c>
 80050d0:	2401      	movs	r4, #1
 80050d2:	2d05      	cmp	r5, #5
 80050d4:	dd02      	ble.n	80050dc <_dtoa_r+0x1ac>
 80050d6:	3d04      	subs	r5, #4
 80050d8:	9526      	str	r5, [sp, #152]	; 0x98
 80050da:	2400      	movs	r4, #0
 80050dc:	9d26      	ldr	r5, [sp, #152]	; 0x98
 80050de:	1eab      	subs	r3, r5, #2
 80050e0:	2b03      	cmp	r3, #3
 80050e2:	d855      	bhi.n	8005190 <_dtoa_r+0x260>
 80050e4:	e8df f013 	tbh	[pc, r3, lsl #1]
 80050e8:	036d0382 	.word	0x036d0382
 80050ec:	03850246 	.word	0x03850246
 80050f0:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 80050f2:	f242 730f 	movw	r3, #9999	; 0x270f
 80050f6:	6023      	str	r3, [r4, #0]
 80050f8:	f1ba 0f00 	cmp.w	sl, #0
 80050fc:	d013      	beq.n	8005126 <_dtoa_r+0x1f6>
 80050fe:	4d21      	ldr	r5, [pc, #132]	; (8005184 <_dtoa_r+0x254>)
 8005100:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8005102:	2c00      	cmp	r4, #0
 8005104:	f43f af4c 	beq.w	8004fa0 <_dtoa_r+0x70>
 8005108:	78eb      	ldrb	r3, [r5, #3]
 800510a:	2b00      	cmp	r3, #0
 800510c:	f000 8117 	beq.w	800533e <_dtoa_r+0x40e>
 8005110:	f105 0308 	add.w	r3, r5, #8
 8005114:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8005116:	6023      	str	r3, [r4, #0]
 8005118:	e742      	b.n	8004fa0 <_dtoa_r+0x70>
 800511a:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
 800511e:	2301      	movs	r3, #1
 8005120:	6023      	str	r3, [r4, #0]
 8005122:	46ab      	mov	fp, r5
 8005124:	e71c      	b.n	8004f60 <_dtoa_r+0x30>
 8005126:	4b17      	ldr	r3, [pc, #92]	; (8005184 <_dtoa_r+0x254>)
 8005128:	4a17      	ldr	r2, [pc, #92]	; (8005188 <_dtoa_r+0x258>)
 800512a:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800512e:	2d00      	cmp	r5, #0
 8005130:	bf0c      	ite	eq
 8005132:	4615      	moveq	r5, r2
 8005134:	461d      	movne	r5, r3
 8005136:	e7e3      	b.n	8005100 <_dtoa_r+0x1d0>
 8005138:	4649      	mov	r1, r9
 800513a:	4640      	mov	r0, r8
 800513c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005140:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005142:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8005144:	f021 437f 	bic.w	r3, r1, #4278190080	; 0xff000000
 8005148:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800514c:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005150:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005154:	2500      	movs	r5, #0
 8005156:	930d      	str	r3, [sp, #52]	; 0x34
 8005158:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800515c:	9516      	str	r5, [sp, #88]	; 0x58
 800515e:	e755      	b.n	800500c <_dtoa_r+0xdc>
 8005160:	636f4361 	.word	0x636f4361
 8005164:	3fd287a7 	.word	0x3fd287a7
 8005168:	8b60c8b3 	.word	0x8b60c8b3
 800516c:	3fc68a28 	.word	0x3fc68a28
 8005170:	509f79fb 	.word	0x509f79fb
 8005174:	3fd34413 	.word	0x3fd34413
 8005178:	0800910c 	.word	0x0800910c
 800517c:	0800910d 	.word	0x0800910d
 8005180:	08008e60 	.word	0x08008e60
 8005184:	0800911c 	.word	0x0800911c
 8005188:	08009110 	.word	0x08009110
 800518c:	2400      	movs	r4, #0
 800518e:	9426      	str	r4, [sp, #152]	; 0x98
 8005190:	2400      	movs	r4, #0
 8005192:	647c      	str	r4, [r7, #68]	; 0x44
 8005194:	4638      	mov	r0, r7
 8005196:	4621      	mov	r1, r4
 8005198:	f001 fa88 	bl	80066ac <_Balloc>
 800519c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80051a0:	950e      	str	r5, [sp, #56]	; 0x38
 80051a2:	2501      	movs	r5, #1
 80051a4:	9512      	str	r5, [sp, #72]	; 0x48
 80051a6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80051aa:	9009      	str	r0, [sp, #36]	; 0x24
 80051ac:	6438      	str	r0, [r7, #64]	; 0x40
 80051ae:	9515      	str	r5, [sp, #84]	; 0x54
 80051b0:	9427      	str	r4, [sp, #156]	; 0x9c
 80051b2:	9c05      	ldr	r4, [sp, #20]
 80051b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80051b6:	2c0e      	cmp	r4, #14
 80051b8:	bfcc      	ite	gt
 80051ba:	2500      	movgt	r5, #0
 80051bc:	2501      	movle	r5, #1
 80051be:	2b00      	cmp	r3, #0
 80051c0:	bfb8      	it	lt
 80051c2:	2500      	movlt	r5, #0
 80051c4:	2d00      	cmp	r5, #0
 80051c6:	f000 80c1 	beq.w	800534c <_dtoa_r+0x41c>
 80051ca:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 80051cc:	4b5e      	ldr	r3, [pc, #376]	; (8005348 <_dtoa_r+0x418>)
 80051ce:	0fe5      	lsrs	r5, r4, #31
 80051d0:	9c05      	ldr	r4, [sp, #20]
 80051d2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80051d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80051da:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80051dc:	2c00      	cmp	r4, #0
 80051de:	bfcc      	ite	gt
 80051e0:	2500      	movgt	r5, #0
 80051e2:	f005 0501 	andle.w	r5, r5, #1
 80051e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80051ea:	2d00      	cmp	r5, #0
 80051ec:	f040 81a8 	bne.w	8005540 <_dtoa_r+0x610>
 80051f0:	4602      	mov	r2, r0
 80051f2:	460b      	mov	r3, r1
 80051f4:	4650      	mov	r0, sl
 80051f6:	4659      	mov	r1, fp
 80051f8:	f003 fa94 	bl	8008724 <__aeabi_ddiv>
 80051fc:	f003 fc02 	bl	8008a04 <__aeabi_d2iz>
 8005200:	4606      	mov	r6, r0
 8005202:	f003 f8ff 	bl	8008404 <__aeabi_i2d>
 8005206:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800520a:	f003 f961 	bl	80084d0 <__aeabi_dmul>
 800520e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8005210:	460b      	mov	r3, r1
 8005212:	4602      	mov	r2, r0
 8005214:	4659      	mov	r1, fp
 8005216:	4650      	mov	r0, sl
 8005218:	f002 ffa6 	bl	8008168 <__aeabi_dsub>
 800521c:	f106 0330 	add.w	r3, r6, #48	; 0x30
 8005220:	f804 3b01 	strb.w	r3, [r4], #1
 8005224:	9411      	str	r4, [sp, #68]	; 0x44
 8005226:	46a0      	mov	r8, r4
 8005228:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800522a:	2c01      	cmp	r4, #1
 800522c:	4682      	mov	sl, r0
 800522e:	468b      	mov	fp, r1
 8005230:	d04c      	beq.n	80052cc <_dtoa_r+0x39c>
 8005232:	2300      	movs	r3, #0
 8005234:	2200      	movs	r2, #0
 8005236:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800523a:	f003 f949 	bl	80084d0 <__aeabi_dmul>
 800523e:	2200      	movs	r2, #0
 8005240:	2300      	movs	r3, #0
 8005242:	4682      	mov	sl, r0
 8005244:	468b      	mov	fp, r1
 8005246:	2401      	movs	r4, #1
 8005248:	f003 fbaa 	bl	80089a0 <__aeabi_dcmpeq>
 800524c:	b100      	cbz	r0, 8005250 <_dtoa_r+0x320>
 800524e:	462c      	mov	r4, r5
 8005250:	f014 0fff 	tst.w	r4, #255	; 0xff
 8005254:	f000 8575 	beq.w	8005d42 <_dtoa_r+0xe12>
 8005258:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800525a:	980e      	ldr	r0, [sp, #56]	; 0x38
 800525c:	1ca5      	adds	r5, r4, #2
 800525e:	eb04 0900 	add.w	r9, r4, r0
 8005262:	e00d      	b.n	8005280 <_dtoa_r+0x350>
 8005264:	f003 f934 	bl	80084d0 <__aeabi_dmul>
 8005268:	2200      	movs	r2, #0
 800526a:	2300      	movs	r3, #0
 800526c:	4682      	mov	sl, r0
 800526e:	468b      	mov	fp, r1
 8005270:	f003 fb96 	bl	80089a0 <__aeabi_dcmpeq>
 8005274:	b100      	cbz	r0, 8005278 <_dtoa_r+0x348>
 8005276:	2400      	movs	r4, #0
 8005278:	f014 0fff 	tst.w	r4, #255	; 0xff
 800527c:	f000 8423 	beq.w	8005ac6 <_dtoa_r+0xb96>
 8005280:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005284:	4650      	mov	r0, sl
 8005286:	4659      	mov	r1, fp
 8005288:	f003 fa4c 	bl	8008724 <__aeabi_ddiv>
 800528c:	f003 fbba 	bl	8008a04 <__aeabi_d2iz>
 8005290:	4606      	mov	r6, r0
 8005292:	f003 f8b7 	bl	8008404 <__aeabi_i2d>
 8005296:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800529a:	f003 f919 	bl	80084d0 <__aeabi_dmul>
 800529e:	4602      	mov	r2, r0
 80052a0:	460b      	mov	r3, r1
 80052a2:	4650      	mov	r0, sl
 80052a4:	4659      	mov	r1, fp
 80052a6:	f002 ff5f 	bl	8008168 <__aeabi_dsub>
 80052aa:	f106 0430 	add.w	r4, r6, #48	; 0x30
 80052ae:	2300      	movs	r3, #0
 80052b0:	2200      	movs	r2, #0
 80052b2:	454d      	cmp	r5, r9
 80052b4:	f805 4c01 	strb.w	r4, [r5, #-1]
 80052b8:	46a8      	mov	r8, r5
 80052ba:	4682      	mov	sl, r0
 80052bc:	468b      	mov	fp, r1
 80052be:	f2c4 0324 	movt	r3, #16420	; 0x4024
 80052c2:	f04f 0401 	mov.w	r4, #1
 80052c6:	f105 0501 	add.w	r5, r5, #1
 80052ca:	d1cb      	bne.n	8005264 <_dtoa_r+0x334>
 80052cc:	4652      	mov	r2, sl
 80052ce:	465b      	mov	r3, fp
 80052d0:	4650      	mov	r0, sl
 80052d2:	4659      	mov	r1, fp
 80052d4:	f002 ff4a 	bl	800816c <__adddf3>
 80052d8:	4604      	mov	r4, r0
 80052da:	460d      	mov	r5, r1
 80052dc:	4622      	mov	r2, r4
 80052de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052e2:	462b      	mov	r3, r5
 80052e4:	f003 fb66 	bl	80089b4 <__aeabi_dcmplt>
 80052e8:	b958      	cbnz	r0, 8005302 <_dtoa_r+0x3d2>
 80052ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052ee:	4622      	mov	r2, r4
 80052f0:	462b      	mov	r3, r5
 80052f2:	f003 fb55 	bl	80089a0 <__aeabi_dcmpeq>
 80052f6:	2800      	cmp	r0, #0
 80052f8:	f000 83e5 	beq.w	8005ac6 <_dtoa_r+0xb96>
 80052fc:	07f3      	lsls	r3, r6, #31
 80052fe:	f140 83e2 	bpl.w	8005ac6 <_dtoa_r+0xb96>
 8005302:	9c05      	ldr	r4, [sp, #20]
 8005304:	f818 6c01 	ldrb.w	r6, [r8, #-1]
 8005308:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800530a:	9417      	str	r4, [sp, #92]	; 0x5c
 800530c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800530e:	e003      	b.n	8005318 <_dtoa_r+0x3e8>
 8005310:	f818 6c02 	ldrb.w	r6, [r8, #-2]
 8005314:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8005318:	2e39      	cmp	r6, #57	; 0x39
 800531a:	4643      	mov	r3, r8
 800531c:	f040 8489 	bne.w	8005c32 <_dtoa_r+0xd02>
 8005320:	4590      	cmp	r8, r2
 8005322:	d1f5      	bne.n	8005310 <_dtoa_r+0x3e0>
 8005324:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8005326:	9309      	str	r3, [sp, #36]	; 0x24
 8005328:	3401      	adds	r4, #1
 800532a:	9405      	str	r4, [sp, #20]
 800532c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800532e:	2330      	movs	r3, #48	; 0x30
 8005330:	f804 3c01 	strb.w	r3, [r4, #-1]
 8005334:	2231      	movs	r2, #49	; 0x31
 8005336:	4623      	mov	r3, r4
 8005338:	f803 2c01 	strb.w	r2, [r3, #-1]
 800533c:	e0b0      	b.n	80054a0 <_dtoa_r+0x570>
 800533e:	1ceb      	adds	r3, r5, #3
 8005340:	e6e8      	b.n	8005114 <_dtoa_r+0x1e4>
 8005342:	2501      	movs	r5, #1
 8005344:	9514      	str	r5, [sp, #80]	; 0x50
 8005346:	e6af      	b.n	80050a8 <_dtoa_r+0x178>
 8005348:	08008e60 	.word	0x08008e60
 800534c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800534e:	2c00      	cmp	r4, #0
 8005350:	f040 80d1 	bne.w	80054f6 <_dtoa_r+0x5c6>
 8005354:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005356:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005358:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800535a:	9306      	str	r3, [sp, #24]
 800535c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800535e:	2800      	cmp	r0, #0
 8005360:	bfc8      	it	gt
 8005362:	2c00      	cmpgt	r4, #0
 8005364:	dd09      	ble.n	800537a <_dtoa_r+0x44a>
 8005366:	4603      	mov	r3, r0
 8005368:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800536a:	42a3      	cmp	r3, r4
 800536c:	bfa8      	it	ge
 800536e:	4623      	movge	r3, r4
 8005370:	1ac9      	subs	r1, r1, r3
 8005372:	1ac0      	subs	r0, r0, r3
 8005374:	910f      	str	r1, [sp, #60]	; 0x3c
 8005376:	1ae4      	subs	r4, r4, r3
 8005378:	900b      	str	r0, [sp, #44]	; 0x2c
 800537a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800537c:	2a00      	cmp	r2, #0
 800537e:	dd1a      	ble.n	80053b6 <_dtoa_r+0x486>
 8005380:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005382:	2b00      	cmp	r3, #0
 8005384:	f000 841d 	beq.w	8005bc2 <_dtoa_r+0xc92>
 8005388:	2d00      	cmp	r5, #0
 800538a:	dd10      	ble.n	80053ae <_dtoa_r+0x47e>
 800538c:	9906      	ldr	r1, [sp, #24]
 800538e:	462a      	mov	r2, r5
 8005390:	4638      	mov	r0, r7
 8005392:	f001 fb39 	bl	8006a08 <__pow5mult>
 8005396:	9006      	str	r0, [sp, #24]
 8005398:	9906      	ldr	r1, [sp, #24]
 800539a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800539c:	4638      	mov	r0, r7
 800539e:	f001 fa9b 	bl	80068d8 <__multiply>
 80053a2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80053a4:	4606      	mov	r6, r0
 80053a6:	4638      	mov	r0, r7
 80053a8:	f001 f9a6 	bl	80066f8 <_Bfree>
 80053ac:	960a      	str	r6, [sp, #40]	; 0x28
 80053ae:	9810      	ldr	r0, [sp, #64]	; 0x40
 80053b0:	1b42      	subs	r2, r0, r5
 80053b2:	f040 8429 	bne.w	8005c08 <_dtoa_r+0xcd8>
 80053b6:	2101      	movs	r1, #1
 80053b8:	4638      	mov	r0, r7
 80053ba:	f001 fa83 	bl	80068c4 <__i2b>
 80053be:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80053c0:	2d00      	cmp	r5, #0
 80053c2:	4606      	mov	r6, r0
 80053c4:	dd05      	ble.n	80053d2 <_dtoa_r+0x4a2>
 80053c6:	4631      	mov	r1, r6
 80053c8:	4638      	mov	r0, r7
 80053ca:	462a      	mov	r2, r5
 80053cc:	f001 fb1c 	bl	8006a08 <__pow5mult>
 80053d0:	4606      	mov	r6, r0
 80053d2:	9d26      	ldr	r5, [sp, #152]	; 0x98
 80053d4:	2d01      	cmp	r5, #1
 80053d6:	f340 820f 	ble.w	80057f8 <_dtoa_r+0x8c8>
 80053da:	2500      	movs	r5, #0
 80053dc:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80053de:	2301      	movs	r3, #1
 80053e0:	2800      	cmp	r0, #0
 80053e2:	f040 838c 	bne.w	8005afe <_dtoa_r+0xbce>
 80053e6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80053e8:	185b      	adds	r3, r3, r1
 80053ea:	f013 031f 	ands.w	r3, r3, #31
 80053ee:	f000 82cb 	beq.w	8005988 <_dtoa_r+0xa58>
 80053f2:	f1c3 0220 	rsb	r2, r3, #32
 80053f6:	2a04      	cmp	r2, #4
 80053f8:	f340 84bf 	ble.w	8005d7a <_dtoa_r+0xe4a>
 80053fc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80053fe:	f1c3 031c 	rsb	r3, r3, #28
 8005402:	18d2      	adds	r2, r2, r3
 8005404:	18c9      	adds	r1, r1, r3
 8005406:	920f      	str	r2, [sp, #60]	; 0x3c
 8005408:	18e4      	adds	r4, r4, r3
 800540a:	910b      	str	r1, [sp, #44]	; 0x2c
 800540c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800540e:	2a00      	cmp	r2, #0
 8005410:	dd04      	ble.n	800541c <_dtoa_r+0x4ec>
 8005412:	4638      	mov	r0, r7
 8005414:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005416:	f001 fb43 	bl	8006aa0 <__lshift>
 800541a:	900a      	str	r0, [sp, #40]	; 0x28
 800541c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800541e:	2b00      	cmp	r3, #0
 8005420:	dd05      	ble.n	800542e <_dtoa_r+0x4fe>
 8005422:	4631      	mov	r1, r6
 8005424:	4638      	mov	r0, r7
 8005426:	461a      	mov	r2, r3
 8005428:	f001 fb3a 	bl	8006aa0 <__lshift>
 800542c:	4606      	mov	r6, r0
 800542e:	9814      	ldr	r0, [sp, #80]	; 0x50
 8005430:	2800      	cmp	r0, #0
 8005432:	f040 834c 	bne.w	8005ace <_dtoa_r+0xb9e>
 8005436:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005438:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800543a:	2900      	cmp	r1, #0
 800543c:	bfcc      	ite	gt
 800543e:	2300      	movgt	r3, #0
 8005440:	2301      	movle	r3, #1
 8005442:	2a02      	cmp	r2, #2
 8005444:	bfd8      	it	le
 8005446:	2300      	movle	r3, #0
 8005448:	2b00      	cmp	r3, #0
 800544a:	f000 8226 	beq.w	800589a <_dtoa_r+0x96a>
 800544e:	2900      	cmp	r1, #0
 8005450:	f040 808a 	bne.w	8005568 <_dtoa_r+0x638>
 8005454:	4631      	mov	r1, r6
 8005456:	2205      	movs	r2, #5
 8005458:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800545a:	4638      	mov	r0, r7
 800545c:	f001 f956 	bl	800670c <__multadd>
 8005460:	4606      	mov	r6, r0
 8005462:	4631      	mov	r1, r6
 8005464:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005466:	f001 fb7b 	bl	8006b60 <__mcmp>
 800546a:	2800      	cmp	r0, #0
 800546c:	dd7c      	ble.n	8005568 <_dtoa_r+0x638>
 800546e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005470:	9c05      	ldr	r4, [sp, #20]
 8005472:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005474:	2231      	movs	r2, #49	; 0x31
 8005476:	f803 2b01 	strb.w	r2, [r3], #1
 800547a:	3401      	adds	r4, #1
 800547c:	9405      	str	r4, [sp, #20]
 800547e:	9309      	str	r3, [sp, #36]	; 0x24
 8005480:	2400      	movs	r4, #0
 8005482:	4638      	mov	r0, r7
 8005484:	4631      	mov	r1, r6
 8005486:	f001 f937 	bl	80066f8 <_Bfree>
 800548a:	9806      	ldr	r0, [sp, #24]
 800548c:	b140      	cbz	r0, 80054a0 <_dtoa_r+0x570>
 800548e:	4284      	cmp	r4, r0
 8005490:	bf18      	it	ne
 8005492:	2c00      	cmpne	r4, #0
 8005494:	f040 8273 	bne.w	800597e <_dtoa_r+0xa4e>
 8005498:	4638      	mov	r0, r7
 800549a:	9906      	ldr	r1, [sp, #24]
 800549c:	f001 f92c 	bl	80066f8 <_Bfree>
 80054a0:	4638      	mov	r0, r7
 80054a2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80054a4:	f001 f928 	bl	80066f8 <_Bfree>
 80054a8:	9c05      	ldr	r4, [sp, #20]
 80054aa:	1c63      	adds	r3, r4, #1
 80054ac:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80054ae:	2200      	movs	r2, #0
 80054b0:	7022      	strb	r2, [r4, #0]
 80054b2:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 80054b4:	6023      	str	r3, [r4, #0]
 80054b6:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 80054b8:	2c00      	cmp	r4, #0
 80054ba:	f43f ad71 	beq.w	8004fa0 <_dtoa_r+0x70>
 80054be:	9809      	ldr	r0, [sp, #36]	; 0x24
 80054c0:	6020      	str	r0, [r4, #0]
 80054c2:	e56d      	b.n	8004fa0 <_dtoa_r+0x70>
 80054c4:	9c05      	ldr	r4, [sp, #20]
 80054c6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80054c8:	1b2d      	subs	r5, r5, r4
 80054ca:	950f      	str	r5, [sp, #60]	; 0x3c
 80054cc:	4265      	negs	r5, r4
 80054ce:	2400      	movs	r4, #0
 80054d0:	9510      	str	r5, [sp, #64]	; 0x40
 80054d2:	9413      	str	r4, [sp, #76]	; 0x4c
 80054d4:	e5f9      	b.n	80050ca <_dtoa_r+0x19a>
 80054d6:	4264      	negs	r4, r4
 80054d8:	940f      	str	r4, [sp, #60]	; 0x3c
 80054da:	2400      	movs	r4, #0
 80054dc:	940b      	str	r4, [sp, #44]	; 0x2c
 80054de:	e5ea      	b.n	80050b6 <_dtoa_r+0x186>
 80054e0:	f64f 30ee 	movw	r0, #64494	; 0xfbee
 80054e4:	f6cf 70ff 	movt	r0, #65535	; 0xffff
 80054e8:	1b00      	subs	r0, r0, r4
 80054ea:	fa0a f000 	lsl.w	r0, sl, r0
 80054ee:	e582      	b.n	8004ff6 <_dtoa_r+0xc6>
 80054f0:	2500      	movs	r5, #0
 80054f2:	9514      	str	r5, [sp, #80]	; 0x50
 80054f4:	e5d8      	b.n	80050a8 <_dtoa_r+0x178>
 80054f6:	9c26      	ldr	r4, [sp, #152]	; 0x98
 80054f8:	2c01      	cmp	r4, #1
 80054fa:	f340 838f 	ble.w	8005c1c <_dtoa_r+0xcec>
 80054fe:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8005500:	1e62      	subs	r2, r4, #1
 8005502:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8005504:	4294      	cmp	r4, r2
 8005506:	bfbf      	itttt	lt
 8005508:	9c10      	ldrlt	r4, [sp, #64]	; 0x40
 800550a:	9210      	strlt	r2, [sp, #64]	; 0x40
 800550c:	ebc4 0302 	rsblt	r3, r4, r2
 8005510:	9c13      	ldrlt	r4, [sp, #76]	; 0x4c
 8005512:	bfb6      	itet	lt
 8005514:	18e4      	addlt	r4, r4, r3
 8005516:	ebc2 0504 	rsbge	r5, r2, r4
 800551a:	9413      	strlt	r4, [sp, #76]	; 0x4c
 800551c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800551e:	2c00      	cmp	r4, #0
 8005520:	f2c0 838f 	blt.w	8005c42 <_dtoa_r+0xd12>
 8005524:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8005526:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005528:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800552a:	18d2      	adds	r2, r2, r3
 800552c:	920f      	str	r2, [sp, #60]	; 0x3c
 800552e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005530:	4638      	mov	r0, r7
 8005532:	18d2      	adds	r2, r2, r3
 8005534:	2101      	movs	r1, #1
 8005536:	920b      	str	r2, [sp, #44]	; 0x2c
 8005538:	f001 f9c4 	bl	80068c4 <__i2b>
 800553c:	9006      	str	r0, [sp, #24]
 800553e:	e70d      	b.n	800535c <_dtoa_r+0x42c>
 8005540:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8005542:	2d00      	cmp	r5, #0
 8005544:	f040 8367 	bne.w	8005c16 <_dtoa_r+0xce6>
 8005548:	2300      	movs	r3, #0
 800554a:	2200      	movs	r2, #0
 800554c:	f2c4 0314 	movt	r3, #16404	; 0x4014
 8005550:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005554:	f002 ffbc 	bl	80084d0 <__aeabi_dmul>
 8005558:	4652      	mov	r2, sl
 800555a:	465b      	mov	r3, fp
 800555c:	f003 fa3e 	bl	80089dc <__aeabi_dcmpge>
 8005560:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8005562:	9606      	str	r6, [sp, #24]
 8005564:	2800      	cmp	r0, #0
 8005566:	d082      	beq.n	800546e <_dtoa_r+0x53e>
 8005568:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 800556a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800556c:	43e4      	mvns	r4, r4
 800556e:	9405      	str	r4, [sp, #20]
 8005570:	2400      	movs	r4, #0
 8005572:	e786      	b.n	8005482 <_dtoa_r+0x552>
 8005574:	2501      	movs	r5, #1
 8005576:	9512      	str	r5, [sp, #72]	; 0x48
 8005578:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 800557a:	2d00      	cmp	r5, #0
 800557c:	f340 82d3 	ble.w	8005b26 <_dtoa_r+0xbf6>
 8005580:	46a9      	mov	r9, r5
 8005582:	2d0e      	cmp	r5, #14
 8005584:	bf8c      	ite	hi
 8005586:	2400      	movhi	r4, #0
 8005588:	f004 0401 	andls.w	r4, r4, #1
 800558c:	9515      	str	r5, [sp, #84]	; 0x54
 800558e:	950e      	str	r5, [sp, #56]	; 0x38
 8005590:	2100      	movs	r1, #0
 8005592:	f1b9 0f17 	cmp.w	r9, #23
 8005596:	6479      	str	r1, [r7, #68]	; 0x44
 8005598:	d909      	bls.n	80055ae <_dtoa_r+0x67e>
 800559a:	2201      	movs	r2, #1
 800559c:	2304      	movs	r3, #4
 800559e:	005b      	lsls	r3, r3, #1
 80055a0:	f103 0014 	add.w	r0, r3, #20
 80055a4:	4611      	mov	r1, r2
 80055a6:	3201      	adds	r2, #1
 80055a8:	4548      	cmp	r0, r9
 80055aa:	d9f8      	bls.n	800559e <_dtoa_r+0x66e>
 80055ac:	6479      	str	r1, [r7, #68]	; 0x44
 80055ae:	4638      	mov	r0, r7
 80055b0:	f001 f87c 	bl	80066ac <_Balloc>
 80055b4:	9009      	str	r0, [sp, #36]	; 0x24
 80055b6:	6438      	str	r0, [r7, #64]	; 0x40
 80055b8:	2c00      	cmp	r4, #0
 80055ba:	f43f adfa 	beq.w	80051b2 <_dtoa_r+0x282>
 80055be:	9c05      	ldr	r4, [sp, #20]
 80055c0:	4652      	mov	r2, sl
 80055c2:	465b      	mov	r3, fp
 80055c4:	2c00      	cmp	r4, #0
 80055c6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80055ca:	f340 81f8 	ble.w	80059be <_dtoa_r+0xa8e>
 80055ce:	4b97      	ldr	r3, [pc, #604]	; (800582c <_dtoa_r+0x8fc>)
 80055d0:	f004 020f 	and.w	r2, r4, #15
 80055d4:	1124      	asrs	r4, r4, #4
 80055d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80055da:	2602      	movs	r6, #2
 80055dc:	06e2      	lsls	r2, r4, #27
 80055de:	e9d3 8900 	ldrd	r8, r9, [r3]
 80055e2:	d50b      	bpl.n	80055fc <_dtoa_r+0x6cc>
 80055e4:	4b92      	ldr	r3, [pc, #584]	; (8005830 <_dtoa_r+0x900>)
 80055e6:	4650      	mov	r0, sl
 80055e8:	4659      	mov	r1, fp
 80055ea:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80055ee:	f003 f899 	bl	8008724 <__aeabi_ddiv>
 80055f2:	f004 040f 	and.w	r4, r4, #15
 80055f6:	4682      	mov	sl, r0
 80055f8:	468b      	mov	fp, r1
 80055fa:	2603      	movs	r6, #3
 80055fc:	b174      	cbz	r4, 800561c <_dtoa_r+0x6ec>
 80055fe:	4d8c      	ldr	r5, [pc, #560]	; (8005830 <_dtoa_r+0x900>)
 8005600:	4640      	mov	r0, r8
 8005602:	4649      	mov	r1, r9
 8005604:	07e3      	lsls	r3, r4, #31
 8005606:	d504      	bpl.n	8005612 <_dtoa_r+0x6e2>
 8005608:	e9d5 2300 	ldrd	r2, r3, [r5]
 800560c:	f002 ff60 	bl	80084d0 <__aeabi_dmul>
 8005610:	3601      	adds	r6, #1
 8005612:	3508      	adds	r5, #8
 8005614:	1064      	asrs	r4, r4, #1
 8005616:	d1f5      	bne.n	8005604 <_dtoa_r+0x6d4>
 8005618:	4680      	mov	r8, r0
 800561a:	4689      	mov	r9, r1
 800561c:	4650      	mov	r0, sl
 800561e:	4659      	mov	r1, fp
 8005620:	4642      	mov	r2, r8
 8005622:	464b      	mov	r3, r9
 8005624:	f003 f87e 	bl	8008724 <__aeabi_ddiv>
 8005628:	4682      	mov	sl, r0
 800562a:	468b      	mov	fp, r1
 800562c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 800562e:	2c00      	cmp	r4, #0
 8005630:	f000 8100 	beq.w	8005834 <_dtoa_r+0x904>
 8005634:	2300      	movs	r3, #0
 8005636:	4650      	mov	r0, sl
 8005638:	4659      	mov	r1, fp
 800563a:	2200      	movs	r2, #0
 800563c:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 8005640:	2401      	movs	r4, #1
 8005642:	f003 f9b7 	bl	80089b4 <__aeabi_dcmplt>
 8005646:	b900      	cbnz	r0, 800564a <_dtoa_r+0x71a>
 8005648:	2400      	movs	r4, #0
 800564a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800564c:	2d00      	cmp	r5, #0
 800564e:	bfd4      	ite	le
 8005650:	2400      	movle	r4, #0
 8005652:	f004 0401 	andgt.w	r4, r4, #1
 8005656:	2c00      	cmp	r4, #0
 8005658:	f000 80ec 	beq.w	8005834 <_dtoa_r+0x904>
 800565c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800565e:	2c00      	cmp	r4, #0
 8005660:	f340 819b 	ble.w	800599a <_dtoa_r+0xa6a>
 8005664:	2300      	movs	r3, #0
 8005666:	2200      	movs	r2, #0
 8005668:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800566c:	4650      	mov	r0, sl
 800566e:	4659      	mov	r1, fp
 8005670:	f002 ff2e 	bl	80084d0 <__aeabi_dmul>
 8005674:	4682      	mov	sl, r0
 8005676:	1c70      	adds	r0, r6, #1
 8005678:	468b      	mov	fp, r1
 800567a:	f002 fec3 	bl	8008404 <__aeabi_i2d>
 800567e:	4602      	mov	r2, r0
 8005680:	460b      	mov	r3, r1
 8005682:	4650      	mov	r0, sl
 8005684:	4659      	mov	r1, fp
 8005686:	f002 ff23 	bl	80084d0 <__aeabi_dmul>
 800568a:	2300      	movs	r3, #0
 800568c:	2200      	movs	r2, #0
 800568e:	f2c4 031c 	movt	r3, #16412	; 0x401c
 8005692:	f002 fd6b 	bl	800816c <__adddf3>
 8005696:	9d05      	ldr	r5, [sp, #20]
 8005698:	3d01      	subs	r5, #1
 800569a:	9517      	str	r5, [sp, #92]	; 0x5c
 800569c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800569e:	4680      	mov	r8, r0
 80056a0:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 80056a4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80056a6:	2c00      	cmp	r4, #0
 80056a8:	f000 81b0 	beq.w	8005a0c <_dtoa_r+0xadc>
 80056ac:	4b5f      	ldr	r3, [pc, #380]	; (800582c <_dtoa_r+0x8fc>)
 80056ae:	2100      	movs	r1, #0
 80056b0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80056b4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80056b8:	2000      	movs	r0, #0
 80056ba:	f6c3 71e0 	movt	r1, #16352	; 0x3fe0
 80056be:	f003 f831 	bl	8008724 <__aeabi_ddiv>
 80056c2:	4642      	mov	r2, r8
 80056c4:	464b      	mov	r3, r9
 80056c6:	f002 fd4f 	bl	8008168 <__aeabi_dsub>
 80056ca:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80056ce:	4659      	mov	r1, fp
 80056d0:	4650      	mov	r0, sl
 80056d2:	f003 f997 	bl	8008a04 <__aeabi_d2iz>
 80056d6:	4606      	mov	r6, r0
 80056d8:	f002 fe94 	bl	8008404 <__aeabi_i2d>
 80056dc:	4602      	mov	r2, r0
 80056de:	460b      	mov	r3, r1
 80056e0:	4650      	mov	r0, sl
 80056e2:	4659      	mov	r1, fp
 80056e4:	f002 fd40 	bl	8008168 <__aeabi_dsub>
 80056e8:	3630      	adds	r6, #48	; 0x30
 80056ea:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80056ec:	b2f6      	uxtb	r6, r6
 80056ee:	4682      	mov	sl, r0
 80056f0:	468b      	mov	fp, r1
 80056f2:	f804 6b01 	strb.w	r6, [r4], #1
 80056f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80056fa:	4652      	mov	r2, sl
 80056fc:	465b      	mov	r3, fp
 80056fe:	9411      	str	r4, [sp, #68]	; 0x44
 8005700:	46a0      	mov	r8, r4
 8005702:	f003 f975 	bl	80089f0 <__aeabi_dcmpgt>
 8005706:	2800      	cmp	r0, #0
 8005708:	f040 8325 	bne.w	8005d56 <_dtoa_r+0xe26>
 800570c:	2100      	movs	r1, #0
 800570e:	4652      	mov	r2, sl
 8005710:	465b      	mov	r3, fp
 8005712:	2000      	movs	r0, #0
 8005714:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 8005718:	f002 fd26 	bl	8008168 <__aeabi_dsub>
 800571c:	4602      	mov	r2, r0
 800571e:	460b      	mov	r3, r1
 8005720:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005724:	f003 f964 	bl	80089f0 <__aeabi_dcmpgt>
 8005728:	2800      	cmp	r0, #0
 800572a:	f040 827f 	bne.w	8005c2c <_dtoa_r+0xcfc>
 800572e:	2d01      	cmp	r5, #1
 8005730:	f340 8133 	ble.w	800599a <_dtoa_r+0xa6a>
 8005734:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005736:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8005738:	1945      	adds	r5, r0, r5
 800573a:	e00f      	b.n	800575c <_dtoa_r+0x82c>
 800573c:	2100      	movs	r1, #0
 800573e:	2000      	movs	r0, #0
 8005740:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 8005744:	f002 fd10 	bl	8008168 <__aeabi_dsub>
 8005748:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800574c:	f003 f932 	bl	80089b4 <__aeabi_dcmplt>
 8005750:	2800      	cmp	r0, #0
 8005752:	f040 826b 	bne.w	8005c2c <_dtoa_r+0xcfc>
 8005756:	42ac      	cmp	r4, r5
 8005758:	f000 811f 	beq.w	800599a <_dtoa_r+0xa6a>
 800575c:	2300      	movs	r3, #0
 800575e:	2200      	movs	r2, #0
 8005760:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8005764:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005768:	f002 feb2 	bl	80084d0 <__aeabi_dmul>
 800576c:	2300      	movs	r3, #0
 800576e:	2200      	movs	r2, #0
 8005770:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8005774:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005778:	4650      	mov	r0, sl
 800577a:	4659      	mov	r1, fp
 800577c:	f002 fea8 	bl	80084d0 <__aeabi_dmul>
 8005780:	4680      	mov	r8, r0
 8005782:	4689      	mov	r9, r1
 8005784:	f003 f93e 	bl	8008a04 <__aeabi_d2iz>
 8005788:	4606      	mov	r6, r0
 800578a:	f002 fe3b 	bl	8008404 <__aeabi_i2d>
 800578e:	4602      	mov	r2, r0
 8005790:	460b      	mov	r3, r1
 8005792:	4640      	mov	r0, r8
 8005794:	4649      	mov	r1, r9
 8005796:	f002 fce7 	bl	8008168 <__aeabi_dsub>
 800579a:	3630      	adds	r6, #48	; 0x30
 800579c:	b2f6      	uxtb	r6, r6
 800579e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80057a2:	f804 6b01 	strb.w	r6, [r4], #1
 80057a6:	4682      	mov	sl, r0
 80057a8:	468b      	mov	fp, r1
 80057aa:	f003 f903 	bl	80089b4 <__aeabi_dcmplt>
 80057ae:	46a0      	mov	r8, r4
 80057b0:	4652      	mov	r2, sl
 80057b2:	465b      	mov	r3, fp
 80057b4:	2800      	cmp	r0, #0
 80057b6:	d0c1      	beq.n	800573c <_dtoa_r+0x80c>
 80057b8:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80057ba:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80057bc:	9005      	str	r0, [sp, #20]
 80057be:	9409      	str	r4, [sp, #36]	; 0x24
 80057c0:	e66e      	b.n	80054a0 <_dtoa_r+0x570>
 80057c2:	2500      	movs	r5, #0
 80057c4:	9512      	str	r5, [sp, #72]	; 0x48
 80057c6:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 80057c8:	9805      	ldr	r0, [sp, #20]
 80057ca:	182d      	adds	r5, r5, r0
 80057cc:	f105 0901 	add.w	r9, r5, #1
 80057d0:	f1b9 0f00 	cmp.w	r9, #0
 80057d4:	9515      	str	r5, [sp, #84]	; 0x54
 80057d6:	f340 819b 	ble.w	8005b10 <_dtoa_r+0xbe0>
 80057da:	f1b9 0f0e 	cmp.w	r9, #14
 80057de:	bf8c      	ite	hi
 80057e0:	2400      	movhi	r4, #0
 80057e2:	f004 0401 	andls.w	r4, r4, #1
 80057e6:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80057ea:	e6d1      	b.n	8005590 <_dtoa_r+0x660>
 80057ec:	2500      	movs	r5, #0
 80057ee:	9512      	str	r5, [sp, #72]	; 0x48
 80057f0:	e6c2      	b.n	8005578 <_dtoa_r+0x648>
 80057f2:	2501      	movs	r5, #1
 80057f4:	9512      	str	r5, [sp, #72]	; 0x48
 80057f6:	e7e6      	b.n	80057c6 <_dtoa_r+0x896>
 80057f8:	f1ba 0f00 	cmp.w	sl, #0
 80057fc:	f47f aded 	bne.w	80053da <_dtoa_r+0x4aa>
 8005800:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005804:	4655      	mov	r5, sl
 8005806:	2b00      	cmp	r3, #0
 8005808:	f47f ade8 	bne.w	80053dc <_dtoa_r+0x4ac>
 800580c:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 8005810:	ea0b 0303 	and.w	r3, fp, r3
 8005814:	461d      	mov	r5, r3
 8005816:	2b00      	cmp	r3, #0
 8005818:	f43f ade0 	beq.w	80053dc <_dtoa_r+0x4ac>
 800581c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800581e:	3501      	adds	r5, #1
 8005820:	950f      	str	r5, [sp, #60]	; 0x3c
 8005822:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8005824:	3501      	adds	r5, #1
 8005826:	950b      	str	r5, [sp, #44]	; 0x2c
 8005828:	2501      	movs	r5, #1
 800582a:	e5d7      	b.n	80053dc <_dtoa_r+0x4ac>
 800582c:	08008e60 	.word	0x08008e60
 8005830:	08008f50 	.word	0x08008f50
 8005834:	4630      	mov	r0, r6
 8005836:	f002 fde5 	bl	8008404 <__aeabi_i2d>
 800583a:	4652      	mov	r2, sl
 800583c:	465b      	mov	r3, fp
 800583e:	f002 fe47 	bl	80084d0 <__aeabi_dmul>
 8005842:	2300      	movs	r3, #0
 8005844:	2200      	movs	r2, #0
 8005846:	f2c4 031c 	movt	r3, #16412	; 0x401c
 800584a:	f002 fc8f 	bl	800816c <__adddf3>
 800584e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8005850:	f1a1 7450 	sub.w	r4, r1, #54525952	; 0x3400000
 8005854:	4680      	mov	r8, r0
 8005856:	46a1      	mov	r9, r4
 8005858:	2d00      	cmp	r5, #0
 800585a:	f040 80ac 	bne.w	80059b6 <_dtoa_r+0xa86>
 800585e:	2300      	movs	r3, #0
 8005860:	2200      	movs	r2, #0
 8005862:	f2c4 0314 	movt	r3, #16404	; 0x4014
 8005866:	4650      	mov	r0, sl
 8005868:	4659      	mov	r1, fp
 800586a:	f002 fc7d 	bl	8008168 <__aeabi_dsub>
 800586e:	4642      	mov	r2, r8
 8005870:	4623      	mov	r3, r4
 8005872:	4682      	mov	sl, r0
 8005874:	468b      	mov	fp, r1
 8005876:	f003 f8bb 	bl	80089f0 <__aeabi_dcmpgt>
 800587a:	2800      	cmp	r0, #0
 800587c:	f040 80c3 	bne.w	8005a06 <_dtoa_r+0xad6>
 8005880:	4642      	mov	r2, r8
 8005882:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
 8005886:	4650      	mov	r0, sl
 8005888:	4659      	mov	r1, fp
 800588a:	f003 f893 	bl	80089b4 <__aeabi_dcmplt>
 800588e:	2800      	cmp	r0, #0
 8005890:	f000 8083 	beq.w	800599a <_dtoa_r+0xa6a>
 8005894:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8005896:	9606      	str	r6, [sp, #24]
 8005898:	e666      	b.n	8005568 <_dtoa_r+0x638>
 800589a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800589c:	2800      	cmp	r0, #0
 800589e:	f000 8147 	beq.w	8005b30 <_dtoa_r+0xc00>
 80058a2:	2c00      	cmp	r4, #0
 80058a4:	dd05      	ble.n	80058b2 <_dtoa_r+0x982>
 80058a6:	4638      	mov	r0, r7
 80058a8:	9906      	ldr	r1, [sp, #24]
 80058aa:	4622      	mov	r2, r4
 80058ac:	f001 f8f8 	bl	8006aa0 <__lshift>
 80058b0:	9006      	str	r0, [sp, #24]
 80058b2:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80058b6:	2d00      	cmp	r5, #0
 80058b8:	f040 8201 	bne.w	8005cbe <_dtoa_r+0xd8e>
 80058bc:	f00a 0001 	and.w	r0, sl, #1
 80058c0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80058c2:	9c06      	ldr	r4, [sp, #24]
 80058c4:	900b      	str	r0, [sp, #44]	; 0x2c
 80058c6:	4631      	mov	r1, r6
 80058c8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80058ca:	f7ff faa1 	bl	8004e10 <quorem>
 80058ce:	4621      	mov	r1, r4
 80058d0:	9008      	str	r0, [sp, #32]
 80058d2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80058d4:	f001 f944 	bl	8006b60 <__mcmp>
 80058d8:	4642      	mov	r2, r8
 80058da:	4681      	mov	r9, r0
 80058dc:	4631      	mov	r1, r6
 80058de:	4638      	mov	r0, r7
 80058e0:	f001 f95e 	bl	8006ba0 <__mdiff>
 80058e4:	9a08      	ldr	r2, [sp, #32]
 80058e6:	68c3      	ldr	r3, [r0, #12]
 80058e8:	3230      	adds	r2, #48	; 0x30
 80058ea:	4682      	mov	sl, r0
 80058ec:	9206      	str	r2, [sp, #24]
 80058ee:	f04f 0b01 	mov.w	fp, #1
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d03d      	beq.n	8005972 <_dtoa_r+0xa42>
 80058f6:	4638      	mov	r0, r7
 80058f8:	4651      	mov	r1, sl
 80058fa:	f000 fefd 	bl	80066f8 <_Bfree>
 80058fe:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005900:	ea5b 0303 	orrs.w	r3, fp, r3
 8005904:	d103      	bne.n	800590e <_dtoa_r+0x9de>
 8005906:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005908:	2800      	cmp	r0, #0
 800590a:	f000 8211 	beq.w	8005d30 <_dtoa_r+0xe00>
 800590e:	f1b9 0f00 	cmp.w	r9, #0
 8005912:	f2c0 819f 	blt.w	8005c54 <_dtoa_r+0xd24>
 8005916:	9826      	ldr	r0, [sp, #152]	; 0x98
 8005918:	ea59 0000 	orrs.w	r0, r9, r0
 800591c:	d103      	bne.n	8005926 <_dtoa_r+0x9f6>
 800591e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005920:	2900      	cmp	r1, #0
 8005922:	f000 8197 	beq.w	8005c54 <_dtoa_r+0xd24>
 8005926:	f1bb 0f00 	cmp.w	fp, #0
 800592a:	f300 81ea 	bgt.w	8005d02 <_dtoa_r+0xdd2>
 800592e:	9a06      	ldr	r2, [sp, #24]
 8005930:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005932:	f805 2b01 	strb.w	r2, [r5], #1
 8005936:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005938:	1a2b      	subs	r3, r5, r0
 800593a:	428b      	cmp	r3, r1
 800593c:	46aa      	mov	sl, r5
 800593e:	f000 81db 	beq.w	8005cf8 <_dtoa_r+0xdc8>
 8005942:	220a      	movs	r2, #10
 8005944:	2300      	movs	r3, #0
 8005946:	4638      	mov	r0, r7
 8005948:	990a      	ldr	r1, [sp, #40]	; 0x28
 800594a:	f000 fedf 	bl	800670c <__multadd>
 800594e:	4544      	cmp	r4, r8
 8005950:	900a      	str	r0, [sp, #40]	; 0x28
 8005952:	d027      	beq.n	80059a4 <_dtoa_r+0xa74>
 8005954:	4621      	mov	r1, r4
 8005956:	220a      	movs	r2, #10
 8005958:	2300      	movs	r3, #0
 800595a:	4638      	mov	r0, r7
 800595c:	f000 fed6 	bl	800670c <__multadd>
 8005960:	4641      	mov	r1, r8
 8005962:	4604      	mov	r4, r0
 8005964:	220a      	movs	r2, #10
 8005966:	4638      	mov	r0, r7
 8005968:	2300      	movs	r3, #0
 800596a:	f000 fecf 	bl	800670c <__multadd>
 800596e:	4680      	mov	r8, r0
 8005970:	e7a9      	b.n	80058c6 <_dtoa_r+0x996>
 8005972:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005974:	4651      	mov	r1, sl
 8005976:	f001 f8f3 	bl	8006b60 <__mcmp>
 800597a:	4683      	mov	fp, r0
 800597c:	e7bb      	b.n	80058f6 <_dtoa_r+0x9c6>
 800597e:	4638      	mov	r0, r7
 8005980:	4621      	mov	r1, r4
 8005982:	f000 feb9 	bl	80066f8 <_Bfree>
 8005986:	e587      	b.n	8005498 <_dtoa_r+0x568>
 8005988:	231c      	movs	r3, #28
 800598a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800598c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800598e:	18c0      	adds	r0, r0, r3
 8005990:	18c9      	adds	r1, r1, r3
 8005992:	900f      	str	r0, [sp, #60]	; 0x3c
 8005994:	18e4      	adds	r4, r4, r3
 8005996:	910b      	str	r1, [sp, #44]	; 0x2c
 8005998:	e538      	b.n	800540c <_dtoa_r+0x4dc>
 800599a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800599e:	4682      	mov	sl, r0
 80059a0:	468b      	mov	fp, r1
 80059a2:	e406      	b.n	80051b2 <_dtoa_r+0x282>
 80059a4:	4621      	mov	r1, r4
 80059a6:	4638      	mov	r0, r7
 80059a8:	220a      	movs	r2, #10
 80059aa:	2300      	movs	r3, #0
 80059ac:	f000 feae 	bl	800670c <__multadd>
 80059b0:	4604      	mov	r4, r0
 80059b2:	4680      	mov	r8, r0
 80059b4:	e787      	b.n	80058c6 <_dtoa_r+0x996>
 80059b6:	9c05      	ldr	r4, [sp, #20]
 80059b8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80059ba:	9417      	str	r4, [sp, #92]	; 0x5c
 80059bc:	e672      	b.n	80056a4 <_dtoa_r+0x774>
 80059be:	9d05      	ldr	r5, [sp, #20]
 80059c0:	426c      	negs	r4, r5
 80059c2:	2c00      	cmp	r4, #0
 80059c4:	f000 80fb 	beq.w	8005bbe <_dtoa_r+0xc8e>
 80059c8:	4ba0      	ldr	r3, [pc, #640]	; (8005c4c <_dtoa_r+0xd1c>)
 80059ca:	f004 020f 	and.w	r2, r4, #15
 80059ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80059d2:	4650      	mov	r0, sl
 80059d4:	4659      	mov	r1, fp
 80059d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059da:	f002 fd79 	bl	80084d0 <__aeabi_dmul>
 80059de:	1124      	asrs	r4, r4, #4
 80059e0:	4682      	mov	sl, r0
 80059e2:	468b      	mov	fp, r1
 80059e4:	f000 80eb 	beq.w	8005bbe <_dtoa_r+0xc8e>
 80059e8:	4d99      	ldr	r5, [pc, #612]	; (8005c50 <_dtoa_r+0xd20>)
 80059ea:	2602      	movs	r6, #2
 80059ec:	07e2      	lsls	r2, r4, #31
 80059ee:	d504      	bpl.n	80059fa <_dtoa_r+0xaca>
 80059f0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80059f4:	f002 fd6c 	bl	80084d0 <__aeabi_dmul>
 80059f8:	3601      	adds	r6, #1
 80059fa:	3508      	adds	r5, #8
 80059fc:	1064      	asrs	r4, r4, #1
 80059fe:	d1f5      	bne.n	80059ec <_dtoa_r+0xabc>
 8005a00:	4682      	mov	sl, r0
 8005a02:	468b      	mov	fp, r1
 8005a04:	e612      	b.n	800562c <_dtoa_r+0x6fc>
 8005a06:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8005a08:	9606      	str	r6, [sp, #24]
 8005a0a:	e530      	b.n	800546e <_dtoa_r+0x53e>
 8005a0c:	498f      	ldr	r1, [pc, #572]	; (8005c4c <_dtoa_r+0xd1c>)
 8005a0e:	1e6c      	subs	r4, r5, #1
 8005a10:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8005a14:	4642      	mov	r2, r8
 8005a16:	464b      	mov	r3, r9
 8005a18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005a1c:	9406      	str	r4, [sp, #24]
 8005a1e:	f002 fd57 	bl	80084d0 <__aeabi_dmul>
 8005a22:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
 8005a26:	4659      	mov	r1, fp
 8005a28:	4650      	mov	r0, sl
 8005a2a:	f002 ffeb 	bl	8008a04 <__aeabi_d2iz>
 8005a2e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a30:	4604      	mov	r4, r0
 8005a32:	9111      	str	r1, [sp, #68]	; 0x44
 8005a34:	f002 fce6 	bl	8008404 <__aeabi_i2d>
 8005a38:	460b      	mov	r3, r1
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	4659      	mov	r1, fp
 8005a3e:	4650      	mov	r0, sl
 8005a40:	f002 fb92 	bl	8008168 <__aeabi_dsub>
 8005a44:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8005a48:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8005a4a:	f804 3b01 	strb.w	r3, [r4], #1
 8005a4e:	2d01      	cmp	r5, #1
 8005a50:	4682      	mov	sl, r0
 8005a52:	468b      	mov	fp, r1
 8005a54:	9411      	str	r4, [sp, #68]	; 0x44
 8005a56:	46a0      	mov	r8, r4
 8005a58:	d020      	beq.n	8005a9c <_dtoa_r+0xb6c>
 8005a5a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8005a5c:	1e66      	subs	r6, r4, #1
 8005a5e:	1976      	adds	r6, r6, r5
 8005a60:	2300      	movs	r3, #0
 8005a62:	2200      	movs	r2, #0
 8005a64:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8005a68:	f002 fd32 	bl	80084d0 <__aeabi_dmul>
 8005a6c:	4689      	mov	r9, r1
 8005a6e:	4680      	mov	r8, r0
 8005a70:	f002 ffc8 	bl	8008a04 <__aeabi_d2iz>
 8005a74:	4605      	mov	r5, r0
 8005a76:	f002 fcc5 	bl	8008404 <__aeabi_i2d>
 8005a7a:	3530      	adds	r5, #48	; 0x30
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	460b      	mov	r3, r1
 8005a80:	4640      	mov	r0, r8
 8005a82:	4649      	mov	r1, r9
 8005a84:	f002 fb70 	bl	8008168 <__aeabi_dsub>
 8005a88:	f804 5f01 	strb.w	r5, [r4, #1]!
 8005a8c:	42b4      	cmp	r4, r6
 8005a8e:	d1e7      	bne.n	8005a60 <_dtoa_r+0xb30>
 8005a90:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8005a92:	9c06      	ldr	r4, [sp, #24]
 8005a94:	4682      	mov	sl, r0
 8005a96:	468b      	mov	fp, r1
 8005a98:	eb05 0804 	add.w	r8, r5, r4
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
 8005aa4:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 8005aa8:	f002 fb60 	bl	800816c <__adddf3>
 8005aac:	4602      	mov	r2, r0
 8005aae:	460b      	mov	r3, r1
 8005ab0:	4650      	mov	r0, sl
 8005ab2:	4659      	mov	r1, fp
 8005ab4:	f002 ff9c 	bl	80089f0 <__aeabi_dcmpgt>
 8005ab8:	2800      	cmp	r0, #0
 8005aba:	f000 808a 	beq.w	8005bd2 <_dtoa_r+0xca2>
 8005abe:	f818 6c01 	ldrb.w	r6, [r8, #-1]
 8005ac2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005ac4:	e422      	b.n	800530c <_dtoa_r+0x3dc>
 8005ac6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005ac8:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8005acc:	e4e8      	b.n	80054a0 <_dtoa_r+0x570>
 8005ace:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005ad0:	4631      	mov	r1, r6
 8005ad2:	f001 f845 	bl	8006b60 <__mcmp>
 8005ad6:	2800      	cmp	r0, #0
 8005ad8:	f6bf acad 	bge.w	8005436 <_dtoa_r+0x506>
 8005adc:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005ade:	220a      	movs	r2, #10
 8005ae0:	4638      	mov	r0, r7
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	f000 fe12 	bl	800670c <__multadd>
 8005ae8:	9905      	ldr	r1, [sp, #20]
 8005aea:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005aec:	900a      	str	r0, [sp, #40]	; 0x28
 8005aee:	3901      	subs	r1, #1
 8005af0:	9105      	str	r1, [sp, #20]
 8005af2:	2a00      	cmp	r2, #0
 8005af4:	f040 8136 	bne.w	8005d64 <_dtoa_r+0xe34>
 8005af8:	9815      	ldr	r0, [sp, #84]	; 0x54
 8005afa:	900e      	str	r0, [sp, #56]	; 0x38
 8005afc:	e49b      	b.n	8005436 <_dtoa_r+0x506>
 8005afe:	6933      	ldr	r3, [r6, #16]
 8005b00:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005b04:	6918      	ldr	r0, [r3, #16]
 8005b06:	f000 fe91 	bl	800682c <__hi0bits>
 8005b0a:	f1c0 0320 	rsb	r3, r0, #32
 8005b0e:	e46a      	b.n	80053e6 <_dtoa_r+0x4b6>
 8005b10:	f1b9 0f0e 	cmp.w	r9, #14
 8005b14:	bf8c      	ite	hi
 8005b16:	2300      	movhi	r3, #0
 8005b18:	2301      	movls	r3, #1
 8005b1a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005b1e:	2100      	movs	r1, #0
 8005b20:	6479      	str	r1, [r7, #68]	; 0x44
 8005b22:	401c      	ands	r4, r3
 8005b24:	e543      	b.n	80055ae <_dtoa_r+0x67e>
 8005b26:	2301      	movs	r3, #1
 8005b28:	9315      	str	r3, [sp, #84]	; 0x54
 8005b2a:	930e      	str	r3, [sp, #56]	; 0x38
 8005b2c:	9327      	str	r3, [sp, #156]	; 0x9c
 8005b2e:	e7f6      	b.n	8005b1e <_dtoa_r+0xbee>
 8005b30:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8005b32:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 8005b36:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005b3a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005b3c:	e006      	b.n	8005b4c <_dtoa_r+0xc1c>
 8005b3e:	4651      	mov	r1, sl
 8005b40:	4638      	mov	r0, r7
 8005b42:	220a      	movs	r2, #10
 8005b44:	2300      	movs	r3, #0
 8005b46:	f000 fde1 	bl	800670c <__multadd>
 8005b4a:	4682      	mov	sl, r0
 8005b4c:	4631      	mov	r1, r6
 8005b4e:	4650      	mov	r0, sl
 8005b50:	f7ff f95e 	bl	8004e10 <quorem>
 8005b54:	3030      	adds	r0, #48	; 0x30
 8005b56:	5528      	strb	r0, [r5, r4]
 8005b58:	3401      	adds	r4, #1
 8005b5a:	45a0      	cmp	r8, r4
 8005b5c:	dcef      	bgt.n	8005b3e <_dtoa_r+0xc0e>
 8005b5e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8005b60:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8005b64:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8005b68:	4681      	mov	r9, r0
 8005b6a:	2c01      	cmp	r4, #1
 8005b6c:	bfac      	ite	ge
 8005b6e:	44a2      	addge	sl, r4
 8005b70:	f10a 0a01 	addlt.w	sl, sl, #1
 8005b74:	2400      	movs	r4, #0
 8005b76:	2201      	movs	r2, #1
 8005b78:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005b7a:	4638      	mov	r0, r7
 8005b7c:	f000 ff90 	bl	8006aa0 <__lshift>
 8005b80:	4631      	mov	r1, r6
 8005b82:	900a      	str	r0, [sp, #40]	; 0x28
 8005b84:	f000 ffec 	bl	8006b60 <__mcmp>
 8005b88:	2800      	cmp	r0, #0
 8005b8a:	f340 8082 	ble.w	8005c92 <_dtoa_r+0xd62>
 8005b8e:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
 8005b92:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005b94:	1c6a      	adds	r2, r5, #1
 8005b96:	e003      	b.n	8005ba0 <_dtoa_r+0xc70>
 8005b98:	f81a 3c02 	ldrb.w	r3, [sl, #-2]
 8005b9c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005ba0:	2b39      	cmp	r3, #57	; 0x39
 8005ba2:	f040 8084 	bne.w	8005cae <_dtoa_r+0xd7e>
 8005ba6:	4592      	cmp	sl, r2
 8005ba8:	d1f6      	bne.n	8005b98 <_dtoa_r+0xc68>
 8005baa:	9805      	ldr	r0, [sp, #20]
 8005bac:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005bae:	3001      	adds	r0, #1
 8005bb0:	2331      	movs	r3, #49	; 0x31
 8005bb2:	9005      	str	r0, [sp, #20]
 8005bb4:	f80a 3c01 	strb.w	r3, [sl, #-1]
 8005bb8:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8005bbc:	e461      	b.n	8005482 <_dtoa_r+0x552>
 8005bbe:	2602      	movs	r6, #2
 8005bc0:	e534      	b.n	800562c <_dtoa_r+0x6fc>
 8005bc2:	4638      	mov	r0, r7
 8005bc4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005bc6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005bc8:	f000 ff1e 	bl	8006a08 <__pow5mult>
 8005bcc:	900a      	str	r0, [sp, #40]	; 0x28
 8005bce:	f7ff bbf2 	b.w	80053b6 <_dtoa_r+0x486>
 8005bd2:	2100      	movs	r1, #0
 8005bd4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8005bd8:	2000      	movs	r0, #0
 8005bda:	f6c3 71e0 	movt	r1, #16352	; 0x3fe0
 8005bde:	f002 fac3 	bl	8008168 <__aeabi_dsub>
 8005be2:	4602      	mov	r2, r0
 8005be4:	460b      	mov	r3, r1
 8005be6:	4650      	mov	r0, sl
 8005be8:	4659      	mov	r1, fp
 8005bea:	f002 fee3 	bl	80089b4 <__aeabi_dcmplt>
 8005bee:	2800      	cmp	r0, #0
 8005bf0:	f43f aed3 	beq.w	800599a <_dtoa_r+0xa6a>
 8005bf4:	4642      	mov	r2, r8
 8005bf6:	f818 3d01 	ldrb.w	r3, [r8, #-1]!
 8005bfa:	2b30      	cmp	r3, #48	; 0x30
 8005bfc:	d0fa      	beq.n	8005bf4 <_dtoa_r+0xcc4>
 8005bfe:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8005c00:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005c02:	9405      	str	r4, [sp, #20]
 8005c04:	9209      	str	r2, [sp, #36]	; 0x24
 8005c06:	e44b      	b.n	80054a0 <_dtoa_r+0x570>
 8005c08:	4638      	mov	r0, r7
 8005c0a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005c0c:	f000 fefc 	bl	8006a08 <__pow5mult>
 8005c10:	900a      	str	r0, [sp, #40]	; 0x28
 8005c12:	f7ff bbd0 	b.w	80053b6 <_dtoa_r+0x486>
 8005c16:	2600      	movs	r6, #0
 8005c18:	9606      	str	r6, [sp, #24]
 8005c1a:	e4a5      	b.n	8005568 <_dtoa_r+0x638>
 8005c1c:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8005c1e:	2d00      	cmp	r5, #0
 8005c20:	d064      	beq.n	8005cec <_dtoa_r+0xdbc>
 8005c22:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005c26:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005c28:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8005c2a:	e47d      	b.n	8005528 <_dtoa_r+0x5f8>
 8005c2c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005c2e:	f7ff bb6d 	b.w	800530c <_dtoa_r+0x3dc>
 8005c32:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8005c34:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8005c38:	1c72      	adds	r2, r6, #1
 8005c3a:	b2d2      	uxtb	r2, r2
 8005c3c:	9405      	str	r4, [sp, #20]
 8005c3e:	f7ff bb7b 	b.w	8005338 <_dtoa_r+0x408>
 8005c42:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005c44:	2300      	movs	r3, #0
 8005c46:	1b04      	subs	r4, r0, r4
 8005c48:	e46e      	b.n	8005528 <_dtoa_r+0x5f8>
 8005c4a:	bf00      	nop
 8005c4c:	08008e60 	.word	0x08008e60
 8005c50:	08008f50 	.word	0x08008f50
 8005c54:	f1bb 0f00 	cmp.w	fp, #0
 8005c58:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8005c5c:	dd10      	ble.n	8005c80 <_dtoa_r+0xd50>
 8005c5e:	2201      	movs	r2, #1
 8005c60:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005c62:	4638      	mov	r0, r7
 8005c64:	f000 ff1c 	bl	8006aa0 <__lshift>
 8005c68:	4631      	mov	r1, r6
 8005c6a:	900a      	str	r0, [sp, #40]	; 0x28
 8005c6c:	f000 ff78 	bl	8006b60 <__mcmp>
 8005c70:	2800      	cmp	r0, #0
 8005c72:	dd6b      	ble.n	8005d4c <_dtoa_r+0xe1c>
 8005c74:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005c78:	d053      	beq.n	8005d22 <_dtoa_r+0xdf2>
 8005c7a:	9b08      	ldr	r3, [sp, #32]
 8005c7c:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8005c80:	462b      	mov	r3, r5
 8005c82:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005c84:	f803 9b01 	strb.w	r9, [r3], #1
 8005c88:	f8cd 8018 	str.w	r8, [sp, #24]
 8005c8c:	9309      	str	r3, [sp, #36]	; 0x24
 8005c8e:	f7ff bbf8 	b.w	8005482 <_dtoa_r+0x552>
 8005c92:	d103      	bne.n	8005c9c <_dtoa_r+0xd6c>
 8005c94:	f019 0f01 	tst.w	r9, #1
 8005c98:	f47f af79 	bne.w	8005b8e <_dtoa_r+0xc5e>
 8005c9c:	4652      	mov	r2, sl
 8005c9e:	f81a 3d01 	ldrb.w	r3, [sl, #-1]!
 8005ca2:	2b30      	cmp	r3, #48	; 0x30
 8005ca4:	d0fa      	beq.n	8005c9c <_dtoa_r+0xd6c>
 8005ca6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005ca8:	9209      	str	r2, [sp, #36]	; 0x24
 8005caa:	f7ff bbea 	b.w	8005482 <_dtoa_r+0x552>
 8005cae:	3301      	adds	r3, #1
 8005cb0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005cb2:	f80a 3c01 	strb.w	r3, [sl, #-1]
 8005cb6:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8005cba:	f7ff bbe2 	b.w	8005482 <_dtoa_r+0x552>
 8005cbe:	9c06      	ldr	r4, [sp, #24]
 8005cc0:	4638      	mov	r0, r7
 8005cc2:	6861      	ldr	r1, [r4, #4]
 8005cc4:	f000 fcf2 	bl	80066ac <_Balloc>
 8005cc8:	9d06      	ldr	r5, [sp, #24]
 8005cca:	692a      	ldr	r2, [r5, #16]
 8005ccc:	3202      	adds	r2, #2
 8005cce:	4604      	mov	r4, r0
 8005cd0:	0092      	lsls	r2, r2, #2
 8005cd2:	f105 010c 	add.w	r1, r5, #12
 8005cd6:	f100 000c 	add.w	r0, r0, #12
 8005cda:	f000 fc9f 	bl	800661c <memcpy>
 8005cde:	4638      	mov	r0, r7
 8005ce0:	4621      	mov	r1, r4
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	f000 fedc 	bl	8006aa0 <__lshift>
 8005ce8:	4680      	mov	r8, r0
 8005cea:	e5e7      	b.n	80058bc <_dtoa_r+0x98c>
 8005cec:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8005cee:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005cf0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8005cf2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005cf6:	e417      	b.n	8005528 <_dtoa_r+0x5f8>
 8005cf8:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8005cfc:	f8cd 8018 	str.w	r8, [sp, #24]
 8005d00:	e739      	b.n	8005b76 <_dtoa_r+0xc46>
 8005d02:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8005d06:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005d0a:	d00a      	beq.n	8005d22 <_dtoa_r+0xdf2>
 8005d0c:	462b      	mov	r3, r5
 8005d0e:	f109 0901 	add.w	r9, r9, #1
 8005d12:	f803 9b01 	strb.w	r9, [r3], #1
 8005d16:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005d18:	f8cd 8018 	str.w	r8, [sp, #24]
 8005d1c:	9309      	str	r3, [sp, #36]	; 0x24
 8005d1e:	f7ff bbb0 	b.w	8005482 <_dtoa_r+0x552>
 8005d22:	46aa      	mov	sl, r5
 8005d24:	2339      	movs	r3, #57	; 0x39
 8005d26:	f80a 3b01 	strb.w	r3, [sl], #1
 8005d2a:	f8cd 8018 	str.w	r8, [sp, #24]
 8005d2e:	e730      	b.n	8005b92 <_dtoa_r+0xc62>
 8005d30:	464b      	mov	r3, r9
 8005d32:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8005d36:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005d3a:	d0f2      	beq.n	8005d22 <_dtoa_r+0xdf2>
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	dc9c      	bgt.n	8005c7a <_dtoa_r+0xd4a>
 8005d40:	e79e      	b.n	8005c80 <_dtoa_r+0xd50>
 8005d42:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8005d44:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005d46:	9409      	str	r4, [sp, #36]	; 0x24
 8005d48:	f7ff bbaa 	b.w	80054a0 <_dtoa_r+0x570>
 8005d4c:	d198      	bne.n	8005c80 <_dtoa_r+0xd50>
 8005d4e:	f019 0f01 	tst.w	r9, #1
 8005d52:	d095      	beq.n	8005c80 <_dtoa_r+0xd50>
 8005d54:	e78e      	b.n	8005c74 <_dtoa_r+0xd44>
 8005d56:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8005d58:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005d5a:	9405      	str	r4, [sp, #20]
 8005d5c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8005d5e:	9409      	str	r4, [sp, #36]	; 0x24
 8005d60:	f7ff bb9e 	b.w	80054a0 <_dtoa_r+0x570>
 8005d64:	2300      	movs	r3, #0
 8005d66:	4638      	mov	r0, r7
 8005d68:	9906      	ldr	r1, [sp, #24]
 8005d6a:	220a      	movs	r2, #10
 8005d6c:	f000 fcce 	bl	800670c <__multadd>
 8005d70:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005d72:	9006      	str	r0, [sp, #24]
 8005d74:	930e      	str	r3, [sp, #56]	; 0x38
 8005d76:	f7ff bb5e 	b.w	8005436 <_dtoa_r+0x506>
 8005d7a:	f43f ab47 	beq.w	800540c <_dtoa_r+0x4dc>
 8005d7e:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
 8005d82:	e602      	b.n	800598a <_dtoa_r+0xa5a>
 8005d84:	f3af 8000 	nop.w

08005d88 <_malloc_trim_r>:
 8005d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d8a:	4d22      	ldr	r5, [pc, #136]	; (8005e14 <_malloc_trim_r+0x8c>)
 8005d8c:	460f      	mov	r7, r1
 8005d8e:	4604      	mov	r4, r0
 8005d90:	f000 fc88 	bl	80066a4 <__malloc_lock>
 8005d94:	68ab      	ldr	r3, [r5, #8]
 8005d96:	685e      	ldr	r6, [r3, #4]
 8005d98:	f026 0603 	bic.w	r6, r6, #3
 8005d9c:	f606 73ef 	addw	r3, r6, #4079	; 0xfef
 8005da0:	1bdf      	subs	r7, r3, r7
 8005da2:	0b3f      	lsrs	r7, r7, #12
 8005da4:	3f01      	subs	r7, #1
 8005da6:	033f      	lsls	r7, r7, #12
 8005da8:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
 8005dac:	4620      	mov	r0, r4
 8005dae:	db07      	blt.n	8005dc0 <_malloc_trim_r+0x38>
 8005db0:	2100      	movs	r1, #0
 8005db2:	f001 f907 	bl	8006fc4 <_sbrk_r>
 8005db6:	68ab      	ldr	r3, [r5, #8]
 8005db8:	199b      	adds	r3, r3, r6
 8005dba:	4298      	cmp	r0, r3
 8005dbc:	4620      	mov	r0, r4
 8005dbe:	d003      	beq.n	8005dc8 <_malloc_trim_r+0x40>
 8005dc0:	f000 fc72 	bl	80066a8 <__malloc_unlock>
 8005dc4:	2000      	movs	r0, #0
 8005dc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005dc8:	4279      	negs	r1, r7
 8005dca:	f001 f8fb 	bl	8006fc4 <_sbrk_r>
 8005dce:	3001      	adds	r0, #1
 8005dd0:	d00d      	beq.n	8005dee <_malloc_trim_r+0x66>
 8005dd2:	4b11      	ldr	r3, [pc, #68]	; (8005e18 <_malloc_trim_r+0x90>)
 8005dd4:	68aa      	ldr	r2, [r5, #8]
 8005dd6:	6819      	ldr	r1, [r3, #0]
 8005dd8:	1bf6      	subs	r6, r6, r7
 8005dda:	f046 0601 	orr.w	r6, r6, #1
 8005dde:	1bcf      	subs	r7, r1, r7
 8005de0:	4620      	mov	r0, r4
 8005de2:	6056      	str	r6, [r2, #4]
 8005de4:	601f      	str	r7, [r3, #0]
 8005de6:	f000 fc5f 	bl	80066a8 <__malloc_unlock>
 8005dea:	2001      	movs	r0, #1
 8005dec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005dee:	2100      	movs	r1, #0
 8005df0:	4620      	mov	r0, r4
 8005df2:	f001 f8e7 	bl	8006fc4 <_sbrk_r>
 8005df6:	68ab      	ldr	r3, [r5, #8]
 8005df8:	1ac2      	subs	r2, r0, r3
 8005dfa:	2a0f      	cmp	r2, #15
 8005dfc:	dd07      	ble.n	8005e0e <_malloc_trim_r+0x86>
 8005dfe:	4907      	ldr	r1, [pc, #28]	; (8005e1c <_malloc_trim_r+0x94>)
 8005e00:	6809      	ldr	r1, [r1, #0]
 8005e02:	1a40      	subs	r0, r0, r1
 8005e04:	4904      	ldr	r1, [pc, #16]	; (8005e18 <_malloc_trim_r+0x90>)
 8005e06:	f042 0201 	orr.w	r2, r2, #1
 8005e0a:	6008      	str	r0, [r1, #0]
 8005e0c:	605a      	str	r2, [r3, #4]
 8005e0e:	4620      	mov	r0, r4
 8005e10:	e7d6      	b.n	8005dc0 <_malloc_trim_r+0x38>
 8005e12:	bf00      	nop
 8005e14:	2000054c 	.word	0x2000054c
 8005e18:	20000974 	.word	0x20000974
 8005e1c:	20000954 	.word	0x20000954

08005e20 <_free_r>:
 8005e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e24:	460d      	mov	r5, r1
 8005e26:	4604      	mov	r4, r0
 8005e28:	2900      	cmp	r1, #0
 8005e2a:	d06f      	beq.n	8005f0c <_free_r+0xec>
 8005e2c:	f000 fc3a 	bl	80066a4 <__malloc_lock>
 8005e30:	f855 0c04 	ldr.w	r0, [r5, #-4]
 8005e34:	4e58      	ldr	r6, [pc, #352]	; (8005f98 <_free_r+0x178>)
 8005e36:	f1a5 0108 	sub.w	r1, r5, #8
 8005e3a:	f020 0301 	bic.w	r3, r0, #1
 8005e3e:	18ca      	adds	r2, r1, r3
 8005e40:	f8d6 c008 	ldr.w	ip, [r6, #8]
 8005e44:	6857      	ldr	r7, [r2, #4]
 8005e46:	4594      	cmp	ip, r2
 8005e48:	f027 0703 	bic.w	r7, r7, #3
 8005e4c:	d07c      	beq.n	8005f48 <_free_r+0x128>
 8005e4e:	f010 0001 	ands.w	r0, r0, #1
 8005e52:	6057      	str	r7, [r2, #4]
 8005e54:	d049      	beq.n	8005eea <_free_r+0xca>
 8005e56:	2000      	movs	r0, #0
 8005e58:	19d5      	adds	r5, r2, r7
 8005e5a:	686d      	ldr	r5, [r5, #4]
 8005e5c:	f015 0f01 	tst.w	r5, #1
 8005e60:	d106      	bne.n	8005e70 <_free_r+0x50>
 8005e62:	19db      	adds	r3, r3, r7
 8005e64:	6895      	ldr	r5, [r2, #8]
 8005e66:	2800      	cmp	r0, #0
 8005e68:	d062      	beq.n	8005f30 <_free_r+0x110>
 8005e6a:	68d2      	ldr	r2, [r2, #12]
 8005e6c:	60ea      	str	r2, [r5, #12]
 8005e6e:	6095      	str	r5, [r2, #8]
 8005e70:	f043 0201 	orr.w	r2, r3, #1
 8005e74:	604a      	str	r2, [r1, #4]
 8005e76:	50cb      	str	r3, [r1, r3]
 8005e78:	bb90      	cbnz	r0, 8005ee0 <_free_r+0xc0>
 8005e7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e7e:	d347      	bcc.n	8005f10 <_free_r+0xf0>
 8005e80:	099d      	lsrs	r5, r3, #6
 8005e82:	3538      	adds	r5, #56	; 0x38
 8005e84:	0a5a      	lsrs	r2, r3, #9
 8005e86:	00e8      	lsls	r0, r5, #3
 8005e88:	2a04      	cmp	r2, #4
 8005e8a:	d916      	bls.n	8005eba <_free_r+0x9a>
 8005e8c:	f102 055b 	add.w	r5, r2, #91	; 0x5b
 8005e90:	00e8      	lsls	r0, r5, #3
 8005e92:	2a14      	cmp	r2, #20
 8005e94:	d911      	bls.n	8005eba <_free_r+0x9a>
 8005e96:	0b1d      	lsrs	r5, r3, #12
 8005e98:	356e      	adds	r5, #110	; 0x6e
 8005e9a:	00e8      	lsls	r0, r5, #3
 8005e9c:	2a54      	cmp	r2, #84	; 0x54
 8005e9e:	d90c      	bls.n	8005eba <_free_r+0x9a>
 8005ea0:	0bdd      	lsrs	r5, r3, #15
 8005ea2:	3577      	adds	r5, #119	; 0x77
 8005ea4:	00e8      	lsls	r0, r5, #3
 8005ea6:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8005eaa:	d906      	bls.n	8005eba <_free_r+0x9a>
 8005eac:	f240 5054 	movw	r0, #1364	; 0x554
 8005eb0:	4282      	cmp	r2, r0
 8005eb2:	d86d      	bhi.n	8005f90 <_free_r+0x170>
 8005eb4:	0c9d      	lsrs	r5, r3, #18
 8005eb6:	357c      	adds	r5, #124	; 0x7c
 8005eb8:	00e8      	lsls	r0, r5, #3
 8005eba:	1986      	adds	r6, r0, r6
 8005ebc:	4836      	ldr	r0, [pc, #216]	; (8005f98 <_free_r+0x178>)
 8005ebe:	68b2      	ldr	r2, [r6, #8]
 8005ec0:	42b2      	cmp	r2, r6
 8005ec2:	d103      	bne.n	8005ecc <_free_r+0xac>
 8005ec4:	e05b      	b.n	8005f7e <_free_r+0x15e>
 8005ec6:	6892      	ldr	r2, [r2, #8]
 8005ec8:	4296      	cmp	r6, r2
 8005eca:	d004      	beq.n	8005ed6 <_free_r+0xb6>
 8005ecc:	6850      	ldr	r0, [r2, #4]
 8005ece:	f020 0003 	bic.w	r0, r0, #3
 8005ed2:	4283      	cmp	r3, r0
 8005ed4:	d3f7      	bcc.n	8005ec6 <_free_r+0xa6>
 8005ed6:	68d3      	ldr	r3, [r2, #12]
 8005ed8:	60cb      	str	r3, [r1, #12]
 8005eda:	608a      	str	r2, [r1, #8]
 8005edc:	60d1      	str	r1, [r2, #12]
 8005ede:	6099      	str	r1, [r3, #8]
 8005ee0:	4620      	mov	r0, r4
 8005ee2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ee6:	f000 bbdf 	b.w	80066a8 <__malloc_unlock>
 8005eea:	f855 cc08 	ldr.w	ip, [r5, #-8]
 8005eee:	ebcc 0101 	rsb	r1, ip, r1
 8005ef2:	f106 0808 	add.w	r8, r6, #8
 8005ef6:	688d      	ldr	r5, [r1, #8]
 8005ef8:	4545      	cmp	r5, r8
 8005efa:	4463      	add	r3, ip
 8005efc:	d03d      	beq.n	8005f7a <_free_r+0x15a>
 8005efe:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8005f02:	f8c5 c00c 	str.w	ip, [r5, #12]
 8005f06:	f8cc 5008 	str.w	r5, [ip, #8]
 8005f0a:	e7a5      	b.n	8005e58 <_free_r+0x38>
 8005f0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f10:	08db      	lsrs	r3, r3, #3
 8005f12:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 8005f16:	6875      	ldr	r5, [r6, #4]
 8005f18:	6890      	ldr	r0, [r2, #8]
 8005f1a:	60ca      	str	r2, [r1, #12]
 8005f1c:	109b      	asrs	r3, r3, #2
 8005f1e:	2701      	movs	r7, #1
 8005f20:	fa17 f303 	lsls.w	r3, r7, r3
 8005f24:	432b      	orrs	r3, r5
 8005f26:	6088      	str	r0, [r1, #8]
 8005f28:	6073      	str	r3, [r6, #4]
 8005f2a:	6091      	str	r1, [r2, #8]
 8005f2c:	60c1      	str	r1, [r0, #12]
 8005f2e:	e7d7      	b.n	8005ee0 <_free_r+0xc0>
 8005f30:	4f1a      	ldr	r7, [pc, #104]	; (8005f9c <_free_r+0x17c>)
 8005f32:	42bd      	cmp	r5, r7
 8005f34:	d199      	bne.n	8005e6a <_free_r+0x4a>
 8005f36:	f043 0201 	orr.w	r2, r3, #1
 8005f3a:	6171      	str	r1, [r6, #20]
 8005f3c:	6131      	str	r1, [r6, #16]
 8005f3e:	60cd      	str	r5, [r1, #12]
 8005f40:	608d      	str	r5, [r1, #8]
 8005f42:	604a      	str	r2, [r1, #4]
 8005f44:	50cb      	str	r3, [r1, r3]
 8005f46:	e7cb      	b.n	8005ee0 <_free_r+0xc0>
 8005f48:	07c2      	lsls	r2, r0, #31
 8005f4a:	443b      	add	r3, r7
 8005f4c:	d407      	bmi.n	8005f5e <_free_r+0x13e>
 8005f4e:	f855 2c08 	ldr.w	r2, [r5, #-8]
 8005f52:	1a89      	subs	r1, r1, r2
 8005f54:	189b      	adds	r3, r3, r2
 8005f56:	6888      	ldr	r0, [r1, #8]
 8005f58:	68ca      	ldr	r2, [r1, #12]
 8005f5a:	60c2      	str	r2, [r0, #12]
 8005f5c:	6090      	str	r0, [r2, #8]
 8005f5e:	4a10      	ldr	r2, [pc, #64]	; (8005fa0 <_free_r+0x180>)
 8005f60:	60b1      	str	r1, [r6, #8]
 8005f62:	6812      	ldr	r2, [r2, #0]
 8005f64:	f043 0001 	orr.w	r0, r3, #1
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	6048      	str	r0, [r1, #4]
 8005f6c:	d3b8      	bcc.n	8005ee0 <_free_r+0xc0>
 8005f6e:	4b0d      	ldr	r3, [pc, #52]	; (8005fa4 <_free_r+0x184>)
 8005f70:	4620      	mov	r0, r4
 8005f72:	6819      	ldr	r1, [r3, #0]
 8005f74:	f7ff ff08 	bl	8005d88 <_malloc_trim_r>
 8005f78:	e7b2      	b.n	8005ee0 <_free_r+0xc0>
 8005f7a:	2001      	movs	r0, #1
 8005f7c:	e76c      	b.n	8005e58 <_free_r+0x38>
 8005f7e:	6843      	ldr	r3, [r0, #4]
 8005f80:	10ad      	asrs	r5, r5, #2
 8005f82:	2601      	movs	r6, #1
 8005f84:	fa16 f505 	lsls.w	r5, r6, r5
 8005f88:	432b      	orrs	r3, r5
 8005f8a:	6043      	str	r3, [r0, #4]
 8005f8c:	4613      	mov	r3, r2
 8005f8e:	e7a3      	b.n	8005ed8 <_free_r+0xb8>
 8005f90:	f44f 707c 	mov.w	r0, #1008	; 0x3f0
 8005f94:	257e      	movs	r5, #126	; 0x7e
 8005f96:	e790      	b.n	8005eba <_free_r+0x9a>
 8005f98:	2000054c 	.word	0x2000054c
 8005f9c:	20000554 	.word	0x20000554
 8005fa0:	20000958 	.word	0x20000958
 8005fa4:	20000970 	.word	0x20000970

08005fa8 <_setlocale_r>:
 8005fa8:	b510      	push	{r4, lr}
 8005faa:	4614      	mov	r4, r2
 8005fac:	b122      	cbz	r2, 8005fb8 <_setlocale_r+0x10>
 8005fae:	4610      	mov	r0, r2
 8005fb0:	490b      	ldr	r1, [pc, #44]	; (8005fe0 <_setlocale_r+0x38>)
 8005fb2:	f001 f819 	bl	8006fe8 <strcmp>
 8005fb6:	b908      	cbnz	r0, 8005fbc <_setlocale_r+0x14>
 8005fb8:	480a      	ldr	r0, [pc, #40]	; (8005fe4 <_setlocale_r+0x3c>)
 8005fba:	bd10      	pop	{r4, pc}
 8005fbc:	4620      	mov	r0, r4
 8005fbe:	4909      	ldr	r1, [pc, #36]	; (8005fe4 <_setlocale_r+0x3c>)
 8005fc0:	f001 f812 	bl	8006fe8 <strcmp>
 8005fc4:	b908      	cbnz	r0, 8005fca <_setlocale_r+0x22>
 8005fc6:	4807      	ldr	r0, [pc, #28]	; (8005fe4 <_setlocale_r+0x3c>)
 8005fc8:	bd10      	pop	{r4, pc}
 8005fca:	4620      	mov	r0, r4
 8005fcc:	4906      	ldr	r1, [pc, #24]	; (8005fe8 <_setlocale_r+0x40>)
 8005fce:	f001 f80b 	bl	8006fe8 <strcmp>
 8005fd2:	4b04      	ldr	r3, [pc, #16]	; (8005fe4 <_setlocale_r+0x3c>)
 8005fd4:	2800      	cmp	r0, #0
 8005fd6:	bf0c      	ite	eq
 8005fd8:	4618      	moveq	r0, r3
 8005fda:	2000      	movne	r0, #0
 8005fdc:	bd10      	pop	{r4, pc}
 8005fde:	bf00      	nop
 8005fe0:	08009124 	.word	0x08009124
 8005fe4:	08009120 	.word	0x08009120
 8005fe8:	0800906c 	.word	0x0800906c

08005fec <__locale_charset>:
 8005fec:	f240 40d0 	movw	r0, #1232	; 0x4d0
 8005ff0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8005ff4:	4770      	bx	lr
 8005ff6:	bf00      	nop

08005ff8 <__locale_mb_cur_max>:
 8005ff8:	f240 43d0 	movw	r3, #1232	; 0x4d0
 8005ffc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006000:	6a18      	ldr	r0, [r3, #32]
 8006002:	4770      	bx	lr

08006004 <__locale_msgcharset>:
 8006004:	4800      	ldr	r0, [pc, #0]	; (8006008 <__locale_msgcharset+0x4>)
 8006006:	4770      	bx	lr
 8006008:	200004f4 	.word	0x200004f4

0800600c <__locale_cjk_lang>:
 800600c:	2000      	movs	r0, #0
 800600e:	4770      	bx	lr

08006010 <_localeconv_r>:
 8006010:	4800      	ldr	r0, [pc, #0]	; (8006014 <_localeconv_r+0x4>)
 8006012:	4770      	bx	lr
 8006014:	20000514 	.word	0x20000514

08006018 <setlocale>:
 8006018:	b410      	push	{r4}
 800601a:	f240 03a0 	movw	r3, #160	; 0xa0
 800601e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006022:	4604      	mov	r4, r0
 8006024:	6818      	ldr	r0, [r3, #0]
 8006026:	460a      	mov	r2, r1
 8006028:	4621      	mov	r1, r4
 800602a:	bc10      	pop	{r4}
 800602c:	e7bc      	b.n	8005fa8 <_setlocale_r>
 800602e:	bf00      	nop

08006030 <localeconv>:
 8006030:	4800      	ldr	r0, [pc, #0]	; (8006034 <localeconv+0x4>)
 8006032:	4770      	bx	lr
 8006034:	20000514 	.word	0x20000514

08006038 <_malloc_r>:
 8006038:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800603c:	f101 040b 	add.w	r4, r1, #11
 8006040:	2c16      	cmp	r4, #22
 8006042:	4605      	mov	r5, r0
 8006044:	d92a      	bls.n	800609c <_malloc_r+0x64>
 8006046:	f024 0407 	bic.w	r4, r4, #7
 800604a:	0fe3      	lsrs	r3, r4, #31
 800604c:	428c      	cmp	r4, r1
 800604e:	bf2c      	ite	cs
 8006050:	4619      	movcs	r1, r3
 8006052:	f043 0101 	orrcc.w	r1, r3, #1
 8006056:	bb51      	cbnz	r1, 80060ae <_malloc_r+0x76>
 8006058:	4628      	mov	r0, r5
 800605a:	f000 fb23 	bl	80066a4 <__malloc_lock>
 800605e:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8006062:	d22a      	bcs.n	80060ba <_malloc_r+0x82>
 8006064:	4e7d      	ldr	r6, [pc, #500]	; (800625c <_malloc_r+0x224>)
 8006066:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
 800606a:	eb06 03ce 	add.w	r3, r6, lr, lsl #3
 800606e:	68df      	ldr	r7, [r3, #12]
 8006070:	429f      	cmp	r7, r3
 8006072:	f000 8235 	beq.w	80064e0 <_malloc_r+0x4a8>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	68fa      	ldr	r2, [r7, #12]
 800607a:	68b9      	ldr	r1, [r7, #8]
 800607c:	f023 0303 	bic.w	r3, r3, #3
 8006080:	18fb      	adds	r3, r7, r3
 8006082:	60ca      	str	r2, [r1, #12]
 8006084:	6858      	ldr	r0, [r3, #4]
 8006086:	6091      	str	r1, [r2, #8]
 8006088:	f040 0201 	orr.w	r2, r0, #1
 800608c:	605a      	str	r2, [r3, #4]
 800608e:	4628      	mov	r0, r5
 8006090:	f000 fb0a 	bl	80066a8 <__malloc_unlock>
 8006094:	3708      	adds	r7, #8
 8006096:	4638      	mov	r0, r7
 8006098:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800609c:	2300      	movs	r3, #0
 800609e:	2410      	movs	r4, #16
 80060a0:	428c      	cmp	r4, r1
 80060a2:	bf2c      	ite	cs
 80060a4:	4619      	movcs	r1, r3
 80060a6:	f043 0101 	orrcc.w	r1, r3, #1
 80060aa:	2900      	cmp	r1, #0
 80060ac:	d0d4      	beq.n	8006058 <_malloc_r+0x20>
 80060ae:	230c      	movs	r3, #12
 80060b0:	2700      	movs	r7, #0
 80060b2:	602b      	str	r3, [r5, #0]
 80060b4:	4638      	mov	r0, r7
 80060b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060ba:	ea5f 2e54 	movs.w	lr, r4, lsr #9
 80060be:	bf04      	itt	eq
 80060c0:	ea4f 0ed4 	moveq.w	lr, r4, lsr #3
 80060c4:	ea4f 01ce 	moveq.w	r1, lr, lsl #3
 80060c8:	f040 8081 	bne.w	80061ce <_malloc_r+0x196>
 80060cc:	4e63      	ldr	r6, [pc, #396]	; (800625c <_malloc_r+0x224>)
 80060ce:	1871      	adds	r1, r6, r1
 80060d0:	68cf      	ldr	r7, [r1, #12]
 80060d2:	42b9      	cmp	r1, r7
 80060d4:	d106      	bne.n	80060e4 <_malloc_r+0xac>
 80060d6:	e00d      	b.n	80060f4 <_malloc_r+0xbc>
 80060d8:	2b00      	cmp	r3, #0
 80060da:	f280 8169 	bge.w	80063b0 <_malloc_r+0x378>
 80060de:	68ff      	ldr	r7, [r7, #12]
 80060e0:	42b9      	cmp	r1, r7
 80060e2:	d007      	beq.n	80060f4 <_malloc_r+0xbc>
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	f022 0203 	bic.w	r2, r2, #3
 80060ea:	1b13      	subs	r3, r2, r4
 80060ec:	2b0f      	cmp	r3, #15
 80060ee:	ddf3      	ble.n	80060d8 <_malloc_r+0xa0>
 80060f0:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 80060f4:	f10e 0e01 	add.w	lr, lr, #1
 80060f8:	4a58      	ldr	r2, [pc, #352]	; (800625c <_malloc_r+0x224>)
 80060fa:	6937      	ldr	r7, [r6, #16]
 80060fc:	f102 0c08 	add.w	ip, r2, #8
 8006100:	4567      	cmp	r7, ip
 8006102:	bf08      	it	eq
 8006104:	6853      	ldreq	r3, [r2, #4]
 8006106:	d023      	beq.n	8006150 <_malloc_r+0x118>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f023 0303 	bic.w	r3, r3, #3
 800610e:	1b19      	subs	r1, r3, r4
 8006110:	290f      	cmp	r1, #15
 8006112:	f300 81b4 	bgt.w	800647e <_malloc_r+0x446>
 8006116:	2900      	cmp	r1, #0
 8006118:	f8c2 c014 	str.w	ip, [r2, #20]
 800611c:	f8c2 c010 	str.w	ip, [r2, #16]
 8006120:	f280 808f 	bge.w	8006242 <_malloc_r+0x20a>
 8006124:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006128:	f080 8161 	bcs.w	80063ee <_malloc_r+0x3b6>
 800612c:	08db      	lsrs	r3, r3, #3
 800612e:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8006132:	f8d2 8004 	ldr.w	r8, [r2, #4]
 8006136:	6888      	ldr	r0, [r1, #8]
 8006138:	60f9      	str	r1, [r7, #12]
 800613a:	109b      	asrs	r3, r3, #2
 800613c:	f04f 0901 	mov.w	r9, #1
 8006140:	fa09 f303 	lsl.w	r3, r9, r3
 8006144:	ea43 0308 	orr.w	r3, r3, r8
 8006148:	60b8      	str	r0, [r7, #8]
 800614a:	6053      	str	r3, [r2, #4]
 800614c:	608f      	str	r7, [r1, #8]
 800614e:	60c7      	str	r7, [r0, #12]
 8006150:	2001      	movs	r0, #1
 8006152:	ea4f 02ae 	mov.w	r2, lr, asr #2
 8006156:	4090      	lsls	r0, r2
 8006158:	4298      	cmp	r0, r3
 800615a:	f200 8081 	bhi.w	8006260 <_malloc_r+0x228>
 800615e:	4203      	tst	r3, r0
 8006160:	d106      	bne.n	8006170 <_malloc_r+0x138>
 8006162:	f02e 0e03 	bic.w	lr, lr, #3
 8006166:	0040      	lsls	r0, r0, #1
 8006168:	4203      	tst	r3, r0
 800616a:	f10e 0e04 	add.w	lr, lr, #4
 800616e:	d0fa      	beq.n	8006166 <_malloc_r+0x12e>
 8006170:	eb06 09ce 	add.w	r9, r6, lr, lsl #3
 8006174:	464f      	mov	r7, r9
 8006176:	46f0      	mov	r8, lr
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	429f      	cmp	r7, r3
 800617c:	d107      	bne.n	800618e <_malloc_r+0x156>
 800617e:	e191      	b.n	80064a4 <_malloc_r+0x46c>
 8006180:	2a00      	cmp	r2, #0
 8006182:	f280 81b7 	bge.w	80064f4 <_malloc_r+0x4bc>
 8006186:	68db      	ldr	r3, [r3, #12]
 8006188:	429f      	cmp	r7, r3
 800618a:	f000 818b 	beq.w	80064a4 <_malloc_r+0x46c>
 800618e:	6859      	ldr	r1, [r3, #4]
 8006190:	f021 0103 	bic.w	r1, r1, #3
 8006194:	1b0a      	subs	r2, r1, r4
 8006196:	2a0f      	cmp	r2, #15
 8006198:	ddf2      	ble.n	8006180 <_malloc_r+0x148>
 800619a:	461f      	mov	r7, r3
 800619c:	1919      	adds	r1, r3, r4
 800619e:	68d8      	ldr	r0, [r3, #12]
 80061a0:	f857 ef08 	ldr.w	lr, [r7, #8]!
 80061a4:	508a      	str	r2, [r1, r2]
 80061a6:	f044 0401 	orr.w	r4, r4, #1
 80061aa:	f042 0201 	orr.w	r2, r2, #1
 80061ae:	f8ce 000c 	str.w	r0, [lr, #12]
 80061b2:	f8c0 e008 	str.w	lr, [r0, #8]
 80061b6:	605c      	str	r4, [r3, #4]
 80061b8:	6171      	str	r1, [r6, #20]
 80061ba:	6131      	str	r1, [r6, #16]
 80061bc:	f8c1 c00c 	str.w	ip, [r1, #12]
 80061c0:	f8c1 c008 	str.w	ip, [r1, #8]
 80061c4:	604a      	str	r2, [r1, #4]
 80061c6:	4628      	mov	r0, r5
 80061c8:	f000 fa6e 	bl	80066a8 <__malloc_unlock>
 80061cc:	e763      	b.n	8006096 <_malloc_r+0x5e>
 80061ce:	f1be 0f04 	cmp.w	lr, #4
 80061d2:	bf9e      	ittt	ls
 80061d4:	ea4f 1e94 	movls.w	lr, r4, lsr #6
 80061d8:	f10e 0e38 	addls.w	lr, lr, #56	; 0x38
 80061dc:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 80061e0:	f67f af74 	bls.w	80060cc <_malloc_r+0x94>
 80061e4:	f1be 0f14 	cmp.w	lr, #20
 80061e8:	bf9c      	itt	ls
 80061ea:	f10e 0e5b 	addls.w	lr, lr, #91	; 0x5b
 80061ee:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 80061f2:	f67f af6b 	bls.w	80060cc <_malloc_r+0x94>
 80061f6:	f1be 0f54 	cmp.w	lr, #84	; 0x54
 80061fa:	bf9e      	ittt	ls
 80061fc:	ea4f 3e14 	movls.w	lr, r4, lsr #12
 8006200:	f10e 0e6e 	addls.w	lr, lr, #110	; 0x6e
 8006204:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 8006208:	f67f af60 	bls.w	80060cc <_malloc_r+0x94>
 800620c:	f5be 7faa 	cmp.w	lr, #340	; 0x154
 8006210:	bf9e      	ittt	ls
 8006212:	ea4f 3ed4 	movls.w	lr, r4, lsr #15
 8006216:	f10e 0e77 	addls.w	lr, lr, #119	; 0x77
 800621a:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 800621e:	f67f af55 	bls.w	80060cc <_malloc_r+0x94>
 8006222:	f240 5354 	movw	r3, #1364	; 0x554
 8006226:	459e      	cmp	lr, r3
 8006228:	bf9d      	ittte	ls
 800622a:	ea4f 4e94 	movls.w	lr, r4, lsr #18
 800622e:	f10e 0e7c 	addls.w	lr, lr, #124	; 0x7c
 8006232:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 8006236:	f44f 717c 	movhi.w	r1, #1008	; 0x3f0
 800623a:	bf88      	it	hi
 800623c:	f04f 0e7e 	movhi.w	lr, #126	; 0x7e
 8006240:	e744      	b.n	80060cc <_malloc_r+0x94>
 8006242:	18fb      	adds	r3, r7, r3
 8006244:	4628      	mov	r0, r5
 8006246:	685a      	ldr	r2, [r3, #4]
 8006248:	f042 0201 	orr.w	r2, r2, #1
 800624c:	605a      	str	r2, [r3, #4]
 800624e:	3708      	adds	r7, #8
 8006250:	f000 fa2a 	bl	80066a8 <__malloc_unlock>
 8006254:	4638      	mov	r0, r7
 8006256:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800625a:	bf00      	nop
 800625c:	2000054c 	.word	0x2000054c
 8006260:	68b7      	ldr	r7, [r6, #8]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f023 0803 	bic.w	r8, r3, #3
 8006268:	4544      	cmp	r4, r8
 800626a:	ebc4 0208 	rsb	r2, r4, r8
 800626e:	bf94      	ite	ls
 8006270:	2300      	movls	r3, #0
 8006272:	2301      	movhi	r3, #1
 8006274:	2a0f      	cmp	r2, #15
 8006276:	bfd8      	it	le
 8006278:	f043 0301 	orrle.w	r3, r3, #1
 800627c:	2b00      	cmp	r3, #0
 800627e:	f000 80a7 	beq.w	80063d0 <_malloc_r+0x398>
 8006282:	4bb3      	ldr	r3, [pc, #716]	; (8006550 <_malloc_r+0x518>)
 8006284:	f8df a2cc 	ldr.w	sl, [pc, #716]	; 8006554 <_malloc_r+0x51c>
 8006288:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800628c:	f8da 3000 	ldr.w	r3, [sl]
 8006290:	3201      	adds	r2, #1
 8006292:	4423      	add	r3, r4
 8006294:	bf08      	it	eq
 8006296:	f103 0b10 	addeq.w	fp, r3, #16
 800629a:	d006      	beq.n	80062aa <_malloc_r+0x272>
 800629c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062a0:	330f      	adds	r3, #15
 80062a2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80062a6:	f023 0b0f 	bic.w	fp, r3, #15
 80062aa:	4628      	mov	r0, r5
 80062ac:	4659      	mov	r1, fp
 80062ae:	f000 fe89 	bl	8006fc4 <_sbrk_r>
 80062b2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80062b6:	4681      	mov	r9, r0
 80062b8:	f000 8144 	beq.w	8006544 <_malloc_r+0x50c>
 80062bc:	eb07 0208 	add.w	r2, r7, r8
 80062c0:	4282      	cmp	r2, r0
 80062c2:	f200 8126 	bhi.w	8006512 <_malloc_r+0x4da>
 80062c6:	f8da 3004 	ldr.w	r3, [sl, #4]
 80062ca:	454a      	cmp	r2, r9
 80062cc:	445b      	add	r3, fp
 80062ce:	f8ca 3004 	str.w	r3, [sl, #4]
 80062d2:	f000 8141 	beq.w	8006558 <_malloc_r+0x520>
 80062d6:	f8d6 1408 	ldr.w	r1, [r6, #1032]	; 0x408
 80062da:	3101      	adds	r1, #1
 80062dc:	bf15      	itete	ne
 80062de:	ebc2 0209 	rsbne	r2, r2, r9
 80062e2:	4b9b      	ldreq	r3, [pc, #620]	; (8006550 <_malloc_r+0x518>)
 80062e4:	189b      	addne	r3, r3, r2
 80062e6:	f8c3 9408 	streq.w	r9, [r3, #1032]	; 0x408
 80062ea:	bf18      	it	ne
 80062ec:	f8ca 3004 	strne.w	r3, [sl, #4]
 80062f0:	f019 0307 	ands.w	r3, r9, #7
 80062f4:	bf1f      	itttt	ne
 80062f6:	f1c3 0208 	rsbne	r2, r3, #8
 80062fa:	4491      	addne	r9, r2
 80062fc:	f5c3 5380 	rsbne	r3, r3, #4096	; 0x1000
 8006300:	f103 0208 	addne.w	r2, r3, #8
 8006304:	eb09 030b 	add.w	r3, r9, fp
 8006308:	bf08      	it	eq
 800630a:	f44f 5280 	moveq.w	r2, #4096	; 0x1000
 800630e:	051b      	lsls	r3, r3, #20
 8006310:	0d1b      	lsrs	r3, r3, #20
 8006312:	ebc3 0b02 	rsb	fp, r3, r2
 8006316:	4628      	mov	r0, r5
 8006318:	4659      	mov	r1, fp
 800631a:	f000 fe53 	bl	8006fc4 <_sbrk_r>
 800631e:	1c43      	adds	r3, r0, #1
 8006320:	f000 8126 	beq.w	8006570 <_malloc_r+0x538>
 8006324:	ebc9 0200 	rsb	r2, r9, r0
 8006328:	445a      	add	r2, fp
 800632a:	f042 0201 	orr.w	r2, r2, #1
 800632e:	f8da 3004 	ldr.w	r3, [sl, #4]
 8006332:	f8c6 9008 	str.w	r9, [r6, #8]
 8006336:	445b      	add	r3, fp
 8006338:	42b7      	cmp	r7, r6
 800633a:	f8ca 3004 	str.w	r3, [sl, #4]
 800633e:	f8c9 2004 	str.w	r2, [r9, #4]
 8006342:	d015      	beq.n	8006370 <_malloc_r+0x338>
 8006344:	f1b8 0f0f 	cmp.w	r8, #15
 8006348:	f240 80f6 	bls.w	8006538 <_malloc_r+0x500>
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f1a8 020c 	sub.w	r2, r8, #12
 8006352:	f022 0207 	bic.w	r2, r2, #7
 8006356:	18b9      	adds	r1, r7, r2
 8006358:	f000 0e01 	and.w	lr, r0, #1
 800635c:	ea42 0e0e 	orr.w	lr, r2, lr
 8006360:	2005      	movs	r0, #5
 8006362:	2a0f      	cmp	r2, #15
 8006364:	f8c7 e004 	str.w	lr, [r7, #4]
 8006368:	6048      	str	r0, [r1, #4]
 800636a:	6088      	str	r0, [r1, #8]
 800636c:	f200 8104 	bhi.w	8006578 <_malloc_r+0x540>
 8006370:	f8da 202c 	ldr.w	r2, [sl, #44]	; 0x2c
 8006374:	68b7      	ldr	r7, [r6, #8]
 8006376:	4293      	cmp	r3, r2
 8006378:	bf84      	itt	hi
 800637a:	4a76      	ldrhi	r2, [pc, #472]	; (8006554 <_malloc_r+0x51c>)
 800637c:	62d3      	strhi	r3, [r2, #44]	; 0x2c
 800637e:	f8da 2030 	ldr.w	r2, [sl, #48]	; 0x30
 8006382:	4293      	cmp	r3, r2
 8006384:	bf84      	itt	hi
 8006386:	4a73      	ldrhi	r2, [pc, #460]	; (8006554 <_malloc_r+0x51c>)
 8006388:	6313      	strhi	r3, [r2, #48]	; 0x30
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f023 0303 	bic.w	r3, r3, #3
 8006390:	429c      	cmp	r4, r3
 8006392:	ebc4 0203 	rsb	r2, r4, r3
 8006396:	bf94      	ite	ls
 8006398:	2300      	movls	r3, #0
 800639a:	2301      	movhi	r3, #1
 800639c:	2a0f      	cmp	r2, #15
 800639e:	bfd8      	it	le
 80063a0:	f043 0301 	orrle.w	r3, r3, #1
 80063a4:	b1a3      	cbz	r3, 80063d0 <_malloc_r+0x398>
 80063a6:	4628      	mov	r0, r5
 80063a8:	f000 f97e 	bl	80066a8 <__malloc_unlock>
 80063ac:	2700      	movs	r7, #0
 80063ae:	e672      	b.n	8006096 <_malloc_r+0x5e>
 80063b0:	18ba      	adds	r2, r7, r2
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	6850      	ldr	r0, [r2, #4]
 80063b6:	68b9      	ldr	r1, [r7, #8]
 80063b8:	f040 0001 	orr.w	r0, r0, #1
 80063bc:	6050      	str	r0, [r2, #4]
 80063be:	60cb      	str	r3, [r1, #12]
 80063c0:	4628      	mov	r0, r5
 80063c2:	6099      	str	r1, [r3, #8]
 80063c4:	3708      	adds	r7, #8
 80063c6:	f000 f96f 	bl	80066a8 <__malloc_unlock>
 80063ca:	4638      	mov	r0, r7
 80063cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063d0:	193b      	adds	r3, r7, r4
 80063d2:	f042 0201 	orr.w	r2, r2, #1
 80063d6:	f044 0401 	orr.w	r4, r4, #1
 80063da:	607c      	str	r4, [r7, #4]
 80063dc:	4628      	mov	r0, r5
 80063de:	605a      	str	r2, [r3, #4]
 80063e0:	3708      	adds	r7, #8
 80063e2:	60b3      	str	r3, [r6, #8]
 80063e4:	f000 f960 	bl	80066a8 <__malloc_unlock>
 80063e8:	4638      	mov	r0, r7
 80063ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063ee:	0a5a      	lsrs	r2, r3, #9
 80063f0:	2a04      	cmp	r2, #4
 80063f2:	bf9e      	ittt	ls
 80063f4:	ea4f 1893 	movls.w	r8, r3, lsr #6
 80063f8:	f108 0838 	addls.w	r8, r8, #56	; 0x38
 80063fc:	ea4f 00c8 	movls.w	r0, r8, lsl #3
 8006400:	d928      	bls.n	8006454 <_malloc_r+0x41c>
 8006402:	2a14      	cmp	r2, #20
 8006404:	bf9c      	itt	ls
 8006406:	f102 085b 	addls.w	r8, r2, #91	; 0x5b
 800640a:	ea4f 00c8 	movls.w	r0, r8, lsl #3
 800640e:	d921      	bls.n	8006454 <_malloc_r+0x41c>
 8006410:	2a54      	cmp	r2, #84	; 0x54
 8006412:	bf9e      	ittt	ls
 8006414:	ea4f 3813 	movls.w	r8, r3, lsr #12
 8006418:	f108 086e 	addls.w	r8, r8, #110	; 0x6e
 800641c:	ea4f 00c8 	movls.w	r0, r8, lsl #3
 8006420:	d918      	bls.n	8006454 <_malloc_r+0x41c>
 8006422:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8006426:	bf9e      	ittt	ls
 8006428:	ea4f 38d3 	movls.w	r8, r3, lsr #15
 800642c:	f108 0877 	addls.w	r8, r8, #119	; 0x77
 8006430:	ea4f 00c8 	movls.w	r0, r8, lsl #3
 8006434:	d90e      	bls.n	8006454 <_malloc_r+0x41c>
 8006436:	f240 5154 	movw	r1, #1364	; 0x554
 800643a:	428a      	cmp	r2, r1
 800643c:	bf9d      	ittte	ls
 800643e:	ea4f 4893 	movls.w	r8, r3, lsr #18
 8006442:	f108 087c 	addls.w	r8, r8, #124	; 0x7c
 8006446:	ea4f 00c8 	movls.w	r0, r8, lsl #3
 800644a:	f44f 707c 	movhi.w	r0, #1008	; 0x3f0
 800644e:	bf88      	it	hi
 8006450:	f04f 087e 	movhi.w	r8, #126	; 0x7e
 8006454:	1830      	adds	r0, r6, r0
 8006456:	493e      	ldr	r1, [pc, #248]	; (8006550 <_malloc_r+0x518>)
 8006458:	6882      	ldr	r2, [r0, #8]
 800645a:	4282      	cmp	r2, r0
 800645c:	d103      	bne.n	8006466 <_malloc_r+0x42e>
 800645e:	e061      	b.n	8006524 <_malloc_r+0x4ec>
 8006460:	6892      	ldr	r2, [r2, #8]
 8006462:	4290      	cmp	r0, r2
 8006464:	d004      	beq.n	8006470 <_malloc_r+0x438>
 8006466:	6851      	ldr	r1, [r2, #4]
 8006468:	f021 0103 	bic.w	r1, r1, #3
 800646c:	428b      	cmp	r3, r1
 800646e:	d3f7      	bcc.n	8006460 <_malloc_r+0x428>
 8006470:	68d1      	ldr	r1, [r2, #12]
 8006472:	6873      	ldr	r3, [r6, #4]
 8006474:	60f9      	str	r1, [r7, #12]
 8006476:	60ba      	str	r2, [r7, #8]
 8006478:	60d7      	str	r7, [r2, #12]
 800647a:	608f      	str	r7, [r1, #8]
 800647c:	e668      	b.n	8006150 <_malloc_r+0x118>
 800647e:	193b      	adds	r3, r7, r4
 8006480:	f041 0001 	orr.w	r0, r1, #1
 8006484:	f044 0401 	orr.w	r4, r4, #1
 8006488:	607c      	str	r4, [r7, #4]
 800648a:	6153      	str	r3, [r2, #20]
 800648c:	6113      	str	r3, [r2, #16]
 800648e:	6058      	str	r0, [r3, #4]
 8006490:	f8c3 c00c 	str.w	ip, [r3, #12]
 8006494:	f8c3 c008 	str.w	ip, [r3, #8]
 8006498:	5059      	str	r1, [r3, r1]
 800649a:	4628      	mov	r0, r5
 800649c:	f000 f904 	bl	80066a8 <__malloc_unlock>
 80064a0:	3708      	adds	r7, #8
 80064a2:	e5f8      	b.n	8006096 <_malloc_r+0x5e>
 80064a4:	f108 0801 	add.w	r8, r8, #1
 80064a8:	3708      	adds	r7, #8
 80064aa:	f018 0f03 	tst.w	r8, #3
 80064ae:	f47f ae63 	bne.w	8006178 <_malloc_r+0x140>
 80064b2:	464b      	mov	r3, r9
 80064b4:	f01e 0f03 	tst.w	lr, #3
 80064b8:	f1a3 0208 	sub.w	r2, r3, #8
 80064bc:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 80064c0:	d062      	beq.n	8006588 <_malloc_r+0x550>
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d0f5      	beq.n	80064b4 <_malloc_r+0x47c>
 80064c8:	6873      	ldr	r3, [r6, #4]
 80064ca:	0040      	lsls	r0, r0, #1
 80064cc:	4298      	cmp	r0, r3
 80064ce:	f63f aec7 	bhi.w	8006260 <_malloc_r+0x228>
 80064d2:	2800      	cmp	r0, #0
 80064d4:	f43f aec4 	beq.w	8006260 <_malloc_r+0x228>
 80064d8:	4218      	tst	r0, r3
 80064da:	d05a      	beq.n	8006592 <_malloc_r+0x55a>
 80064dc:	46c6      	mov	lr, r8
 80064de:	e647      	b.n	8006170 <_malloc_r+0x138>
 80064e0:	f107 0308 	add.w	r3, r7, #8
 80064e4:	697f      	ldr	r7, [r7, #20]
 80064e6:	42bb      	cmp	r3, r7
 80064e8:	bf08      	it	eq
 80064ea:	f10e 0e02 	addeq.w	lr, lr, #2
 80064ee:	f43f ae03 	beq.w	80060f8 <_malloc_r+0xc0>
 80064f2:	e5c0      	b.n	8006076 <_malloc_r+0x3e>
 80064f4:	1859      	adds	r1, r3, r1
 80064f6:	461f      	mov	r7, r3
 80064f8:	6848      	ldr	r0, [r1, #4]
 80064fa:	68db      	ldr	r3, [r3, #12]
 80064fc:	f857 2f08 	ldr.w	r2, [r7, #8]!
 8006500:	f040 0001 	orr.w	r0, r0, #1
 8006504:	6048      	str	r0, [r1, #4]
 8006506:	60d3      	str	r3, [r2, #12]
 8006508:	609a      	str	r2, [r3, #8]
 800650a:	4628      	mov	r0, r5
 800650c:	f000 f8cc 	bl	80066a8 <__malloc_unlock>
 8006510:	e5c1      	b.n	8006096 <_malloc_r+0x5e>
 8006512:	42b7      	cmp	r7, r6
 8006514:	f43f aed7 	beq.w	80062c6 <_malloc_r+0x28e>
 8006518:	4b0d      	ldr	r3, [pc, #52]	; (8006550 <_malloc_r+0x518>)
 800651a:	689f      	ldr	r7, [r3, #8]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f023 0303 	bic.w	r3, r3, #3
 8006522:	e735      	b.n	8006390 <_malloc_r+0x358>
 8006524:	684b      	ldr	r3, [r1, #4]
 8006526:	ea4f 08a8 	mov.w	r8, r8, asr #2
 800652a:	2001      	movs	r0, #1
 800652c:	fa00 f008 	lsl.w	r0, r0, r8
 8006530:	4303      	orrs	r3, r0
 8006532:	604b      	str	r3, [r1, #4]
 8006534:	4611      	mov	r1, r2
 8006536:	e79d      	b.n	8006474 <_malloc_r+0x43c>
 8006538:	2301      	movs	r3, #1
 800653a:	f8c9 3004 	str.w	r3, [r9, #4]
 800653e:	464f      	mov	r7, r9
 8006540:	2300      	movs	r3, #0
 8006542:	e725      	b.n	8006390 <_malloc_r+0x358>
 8006544:	68b7      	ldr	r7, [r6, #8]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f023 0303 	bic.w	r3, r3, #3
 800654c:	e720      	b.n	8006390 <_malloc_r+0x358>
 800654e:	bf00      	nop
 8006550:	2000054c 	.word	0x2000054c
 8006554:	20000970 	.word	0x20000970
 8006558:	0511      	lsls	r1, r2, #20
 800655a:	0d09      	lsrs	r1, r1, #20
 800655c:	2900      	cmp	r1, #0
 800655e:	f47f aeba 	bne.w	80062d6 <_malloc_r+0x29e>
 8006562:	68b2      	ldr	r2, [r6, #8]
 8006564:	eb0b 0108 	add.w	r1, fp, r8
 8006568:	f041 0101 	orr.w	r1, r1, #1
 800656c:	6051      	str	r1, [r2, #4]
 800656e:	e6ff      	b.n	8006370 <_malloc_r+0x338>
 8006570:	2201      	movs	r2, #1
 8006572:	f04f 0b00 	mov.w	fp, #0
 8006576:	e6da      	b.n	800632e <_malloc_r+0x2f6>
 8006578:	4628      	mov	r0, r5
 800657a:	f107 0108 	add.w	r1, r7, #8
 800657e:	f7ff fc4f 	bl	8005e20 <_free_r>
 8006582:	4b06      	ldr	r3, [pc, #24]	; (800659c <_malloc_r+0x564>)
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	e6f3      	b.n	8006370 <_malloc_r+0x338>
 8006588:	6873      	ldr	r3, [r6, #4]
 800658a:	ea23 0300 	bic.w	r3, r3, r0
 800658e:	6073      	str	r3, [r6, #4]
 8006590:	e79b      	b.n	80064ca <_malloc_r+0x492>
 8006592:	0040      	lsls	r0, r0, #1
 8006594:	f108 0804 	add.w	r8, r8, #4
 8006598:	e79e      	b.n	80064d8 <_malloc_r+0x4a0>
 800659a:	bf00      	nop
 800659c:	20000970 	.word	0x20000970

080065a0 <memchr>:
 80065a0:	0783      	lsls	r3, r0, #30
 80065a2:	b470      	push	{r4, r5, r6}
 80065a4:	b2c9      	uxtb	r1, r1
 80065a6:	d00f      	beq.n	80065c8 <memchr+0x28>
 80065a8:	2a00      	cmp	r2, #0
 80065aa:	d033      	beq.n	8006614 <memchr+0x74>
 80065ac:	7803      	ldrb	r3, [r0, #0]
 80065ae:	3a01      	subs	r2, #1
 80065b0:	428b      	cmp	r3, r1
 80065b2:	d106      	bne.n	80065c2 <memchr+0x22>
 80065b4:	e01d      	b.n	80065f2 <memchr+0x52>
 80065b6:	2a00      	cmp	r2, #0
 80065b8:	d02c      	beq.n	8006614 <memchr+0x74>
 80065ba:	7803      	ldrb	r3, [r0, #0]
 80065bc:	3a01      	subs	r2, #1
 80065be:	428b      	cmp	r3, r1
 80065c0:	d017      	beq.n	80065f2 <memchr+0x52>
 80065c2:	3001      	adds	r0, #1
 80065c4:	0783      	lsls	r3, r0, #30
 80065c6:	d1f6      	bne.n	80065b6 <memchr+0x16>
 80065c8:	2a03      	cmp	r2, #3
 80065ca:	bf84      	itt	hi
 80065cc:	ea41 2601 	orrhi.w	r6, r1, r1, lsl #8
 80065d0:	ea46 4606 	orrhi.w	r6, r6, r6, lsl #16
 80065d4:	d80f      	bhi.n	80065f6 <memchr+0x56>
 80065d6:	b1ea      	cbz	r2, 8006614 <memchr+0x74>
 80065d8:	7803      	ldrb	r3, [r0, #0]
 80065da:	3a01      	subs	r2, #1
 80065dc:	428b      	cmp	r3, r1
 80065de:	4402      	add	r2, r0
 80065e0:	d104      	bne.n	80065ec <memchr+0x4c>
 80065e2:	e006      	b.n	80065f2 <memchr+0x52>
 80065e4:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80065e8:	428b      	cmp	r3, r1
 80065ea:	d002      	beq.n	80065f2 <memchr+0x52>
 80065ec:	4290      	cmp	r0, r2
 80065ee:	d1f9      	bne.n	80065e4 <memchr+0x44>
 80065f0:	2000      	movs	r0, #0
 80065f2:	bc70      	pop	{r4, r5, r6}
 80065f4:	4770      	bx	lr
 80065f6:	4604      	mov	r4, r0
 80065f8:	3004      	adds	r0, #4
 80065fa:	6823      	ldr	r3, [r4, #0]
 80065fc:	4073      	eors	r3, r6
 80065fe:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
 8006602:	ea25 0303 	bic.w	r3, r5, r3
 8006606:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 800660a:	d105      	bne.n	8006618 <memchr+0x78>
 800660c:	3a04      	subs	r2, #4
 800660e:	2a03      	cmp	r2, #3
 8006610:	d8f1      	bhi.n	80065f6 <memchr+0x56>
 8006612:	e7e0      	b.n	80065d6 <memchr+0x36>
 8006614:	4610      	mov	r0, r2
 8006616:	e7ec      	b.n	80065f2 <memchr+0x52>
 8006618:	4620      	mov	r0, r4
 800661a:	e7dc      	b.n	80065d6 <memchr+0x36>

0800661c <memcpy>:
 800661c:	2a0f      	cmp	r2, #15
 800661e:	b4f0      	push	{r4, r5, r6, r7}
 8006620:	bf98      	it	ls
 8006622:	4603      	movls	r3, r0
 8006624:	d931      	bls.n	800668a <memcpy+0x6e>
 8006626:	ea41 0300 	orr.w	r3, r1, r0
 800662a:	079b      	lsls	r3, r3, #30
 800662c:	d137      	bne.n	800669e <memcpy+0x82>
 800662e:	460c      	mov	r4, r1
 8006630:	4603      	mov	r3, r0
 8006632:	4615      	mov	r5, r2
 8006634:	6826      	ldr	r6, [r4, #0]
 8006636:	601e      	str	r6, [r3, #0]
 8006638:	6866      	ldr	r6, [r4, #4]
 800663a:	605e      	str	r6, [r3, #4]
 800663c:	68a6      	ldr	r6, [r4, #8]
 800663e:	609e      	str	r6, [r3, #8]
 8006640:	68e6      	ldr	r6, [r4, #12]
 8006642:	3d10      	subs	r5, #16
 8006644:	60de      	str	r6, [r3, #12]
 8006646:	3410      	adds	r4, #16
 8006648:	3310      	adds	r3, #16
 800664a:	2d0f      	cmp	r5, #15
 800664c:	d8f2      	bhi.n	8006634 <memcpy+0x18>
 800664e:	f1a2 0410 	sub.w	r4, r2, #16
 8006652:	f024 040f 	bic.w	r4, r4, #15
 8006656:	f002 020f 	and.w	r2, r2, #15
 800665a:	3410      	adds	r4, #16
 800665c:	2a03      	cmp	r2, #3
 800665e:	eb00 0304 	add.w	r3, r0, r4
 8006662:	4421      	add	r1, r4
 8006664:	d911      	bls.n	800668a <memcpy+0x6e>
 8006666:	1f0e      	subs	r6, r1, #4
 8006668:	461d      	mov	r5, r3
 800666a:	4614      	mov	r4, r2
 800666c:	f856 7f04 	ldr.w	r7, [r6, #4]!
 8006670:	3c04      	subs	r4, #4
 8006672:	2c03      	cmp	r4, #3
 8006674:	f845 7b04 	str.w	r7, [r5], #4
 8006678:	d8f8      	bhi.n	800666c <memcpy+0x50>
 800667a:	1f14      	subs	r4, r2, #4
 800667c:	f024 0403 	bic.w	r4, r4, #3
 8006680:	3404      	adds	r4, #4
 8006682:	f002 0203 	and.w	r2, r2, #3
 8006686:	1909      	adds	r1, r1, r4
 8006688:	191b      	adds	r3, r3, r4
 800668a:	b132      	cbz	r2, 800669a <memcpy+0x7e>
 800668c:	3901      	subs	r1, #1
 800668e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006692:	3a01      	subs	r2, #1
 8006694:	f803 4b01 	strb.w	r4, [r3], #1
 8006698:	d1f9      	bne.n	800668e <memcpy+0x72>
 800669a:	bcf0      	pop	{r4, r5, r6, r7}
 800669c:	4770      	bx	lr
 800669e:	4603      	mov	r3, r0
 80066a0:	e7f4      	b.n	800668c <memcpy+0x70>
 80066a2:	bf00      	nop

080066a4 <__malloc_lock>:
 80066a4:	4770      	bx	lr
 80066a6:	bf00      	nop

080066a8 <__malloc_unlock>:
 80066a8:	4770      	bx	lr
 80066aa:	bf00      	nop

080066ac <_Balloc>:
 80066ac:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80066ae:	b570      	push	{r4, r5, r6, lr}
 80066b0:	4605      	mov	r5, r0
 80066b2:	460c      	mov	r4, r1
 80066b4:	b14b      	cbz	r3, 80066ca <_Balloc+0x1e>
 80066b6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80066ba:	b178      	cbz	r0, 80066dc <_Balloc+0x30>
 80066bc:	6802      	ldr	r2, [r0, #0]
 80066be:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 80066c2:	2300      	movs	r3, #0
 80066c4:	6103      	str	r3, [r0, #16]
 80066c6:	60c3      	str	r3, [r0, #12]
 80066c8:	bd70      	pop	{r4, r5, r6, pc}
 80066ca:	2104      	movs	r1, #4
 80066cc:	2221      	movs	r2, #33	; 0x21
 80066ce:	f001 fa7f 	bl	8007bd0 <_calloc_r>
 80066d2:	4603      	mov	r3, r0
 80066d4:	64e8      	str	r0, [r5, #76]	; 0x4c
 80066d6:	2800      	cmp	r0, #0
 80066d8:	d1ed      	bne.n	80066b6 <_Balloc+0xa>
 80066da:	bd70      	pop	{r4, r5, r6, pc}
 80066dc:	2101      	movs	r1, #1
 80066de:	fa11 f604 	lsls.w	r6, r1, r4
 80066e2:	1d72      	adds	r2, r6, #5
 80066e4:	4628      	mov	r0, r5
 80066e6:	0092      	lsls	r2, r2, #2
 80066e8:	f001 fa72 	bl	8007bd0 <_calloc_r>
 80066ec:	2800      	cmp	r0, #0
 80066ee:	d0f4      	beq.n	80066da <_Balloc+0x2e>
 80066f0:	6044      	str	r4, [r0, #4]
 80066f2:	6086      	str	r6, [r0, #8]
 80066f4:	e7e5      	b.n	80066c2 <_Balloc+0x16>
 80066f6:	bf00      	nop

080066f8 <_Bfree>:
 80066f8:	b131      	cbz	r1, 8006708 <_Bfree+0x10>
 80066fa:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80066fc:	684a      	ldr	r2, [r1, #4]
 80066fe:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8006702:	6008      	str	r0, [r1, #0]
 8006704:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006708:	4770      	bx	lr
 800670a:	bf00      	nop

0800670c <__multadd>:
 800670c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800670e:	460d      	mov	r5, r1
 8006710:	4606      	mov	r6, r0
 8006712:	690c      	ldr	r4, [r1, #16]
 8006714:	f101 0014 	add.w	r0, r1, #20
 8006718:	b083      	sub	sp, #12
 800671a:	2100      	movs	r1, #0
 800671c:	6807      	ldr	r7, [r0, #0]
 800671e:	fa1f fc87 	uxth.w	ip, r7
 8006722:	0c3f      	lsrs	r7, r7, #16
 8006724:	fb02 330c 	mla	r3, r2, ip, r3
 8006728:	fb02 f707 	mul.w	r7, r2, r7
 800672c:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006730:	b29b      	uxth	r3, r3
 8006732:	eb03 4307 	add.w	r3, r3, r7, lsl #16
 8006736:	3101      	adds	r1, #1
 8006738:	f840 3b04 	str.w	r3, [r0], #4
 800673c:	0c3b      	lsrs	r3, r7, #16
 800673e:	428c      	cmp	r4, r1
 8006740:	dcec      	bgt.n	800671c <__multadd+0x10>
 8006742:	b13b      	cbz	r3, 8006754 <__multadd+0x48>
 8006744:	68aa      	ldr	r2, [r5, #8]
 8006746:	4294      	cmp	r4, r2
 8006748:	da07      	bge.n	800675a <__multadd+0x4e>
 800674a:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 800674e:	3401      	adds	r4, #1
 8006750:	6153      	str	r3, [r2, #20]
 8006752:	612c      	str	r4, [r5, #16]
 8006754:	4628      	mov	r0, r5
 8006756:	b003      	add	sp, #12
 8006758:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800675a:	6869      	ldr	r1, [r5, #4]
 800675c:	9301      	str	r3, [sp, #4]
 800675e:	3101      	adds	r1, #1
 8006760:	4630      	mov	r0, r6
 8006762:	f7ff ffa3 	bl	80066ac <_Balloc>
 8006766:	692a      	ldr	r2, [r5, #16]
 8006768:	3202      	adds	r2, #2
 800676a:	f105 010c 	add.w	r1, r5, #12
 800676e:	4607      	mov	r7, r0
 8006770:	0092      	lsls	r2, r2, #2
 8006772:	f100 000c 	add.w	r0, r0, #12
 8006776:	f7ff ff51 	bl	800661c <memcpy>
 800677a:	6869      	ldr	r1, [r5, #4]
 800677c:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 800677e:	9b01      	ldr	r3, [sp, #4]
 8006780:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 8006784:	6028      	str	r0, [r5, #0]
 8006786:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 800678a:	463d      	mov	r5, r7
 800678c:	e7dd      	b.n	800674a <__multadd+0x3e>
 800678e:	bf00      	nop

08006790 <__s2b>:
 8006790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006794:	461e      	mov	r6, r3
 8006796:	f648 6339 	movw	r3, #36409	; 0x8e39
 800679a:	f106 0408 	add.w	r4, r6, #8
 800679e:	f6c3 03e3 	movt	r3, #14563	; 0x38e3
 80067a2:	fb83 5304 	smull	r5, r3, r3, r4
 80067a6:	17e4      	asrs	r4, r4, #31
 80067a8:	ebc4 0363 	rsb	r3, r4, r3, asr #1
 80067ac:	460f      	mov	r7, r1
 80067ae:	2100      	movs	r1, #0
 80067b0:	2b01      	cmp	r3, #1
 80067b2:	4604      	mov	r4, r0
 80067b4:	4690      	mov	r8, r2
 80067b6:	dd05      	ble.n	80067c4 <__s2b+0x34>
 80067b8:	2201      	movs	r2, #1
 80067ba:	2100      	movs	r1, #0
 80067bc:	0052      	lsls	r2, r2, #1
 80067be:	3101      	adds	r1, #1
 80067c0:	4293      	cmp	r3, r2
 80067c2:	dcfb      	bgt.n	80067bc <__s2b+0x2c>
 80067c4:	4620      	mov	r0, r4
 80067c6:	f7ff ff71 	bl	80066ac <_Balloc>
 80067ca:	9b08      	ldr	r3, [sp, #32]
 80067cc:	6143      	str	r3, [r0, #20]
 80067ce:	2301      	movs	r3, #1
 80067d0:	f1b8 0f09 	cmp.w	r8, #9
 80067d4:	4601      	mov	r1, r0
 80067d6:	6103      	str	r3, [r0, #16]
 80067d8:	dd23      	ble.n	8006822 <__s2b+0x92>
 80067da:	f107 0909 	add.w	r9, r7, #9
 80067de:	464d      	mov	r5, r9
 80067e0:	4447      	add	r7, r8
 80067e2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80067e6:	220a      	movs	r2, #10
 80067e8:	3b30      	subs	r3, #48	; 0x30
 80067ea:	4620      	mov	r0, r4
 80067ec:	f7ff ff8e 	bl	800670c <__multadd>
 80067f0:	42bd      	cmp	r5, r7
 80067f2:	4601      	mov	r1, r0
 80067f4:	d1f5      	bne.n	80067e2 <__s2b+0x52>
 80067f6:	eb09 0708 	add.w	r7, r9, r8
 80067fa:	3f08      	subs	r7, #8
 80067fc:	4546      	cmp	r6, r8
 80067fe:	dd0d      	ble.n	800681c <__s2b+0x8c>
 8006800:	ebc8 0707 	rsb	r7, r8, r7
 8006804:	f817 3008 	ldrb.w	r3, [r7, r8]
 8006808:	220a      	movs	r2, #10
 800680a:	3b30      	subs	r3, #48	; 0x30
 800680c:	4620      	mov	r0, r4
 800680e:	f7ff ff7d 	bl	800670c <__multadd>
 8006812:	f108 0801 	add.w	r8, r8, #1
 8006816:	45b0      	cmp	r8, r6
 8006818:	4601      	mov	r1, r0
 800681a:	d1f3      	bne.n	8006804 <__s2b+0x74>
 800681c:	4608      	mov	r0, r1
 800681e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006822:	370a      	adds	r7, #10
 8006824:	f04f 0809 	mov.w	r8, #9
 8006828:	e7e8      	b.n	80067fc <__s2b+0x6c>
 800682a:	bf00      	nop

0800682c <__hi0bits>:
 800682c:	4603      	mov	r3, r0
 800682e:	2000      	movs	r0, #0
 8006830:	0c1a      	lsrs	r2, r3, #16
 8006832:	d101      	bne.n	8006838 <__hi0bits+0xc>
 8006834:	041b      	lsls	r3, r3, #16
 8006836:	2010      	movs	r0, #16
 8006838:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800683c:	d101      	bne.n	8006842 <__hi0bits+0x16>
 800683e:	3008      	adds	r0, #8
 8006840:	021b      	lsls	r3, r3, #8
 8006842:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006846:	d101      	bne.n	800684c <__hi0bits+0x20>
 8006848:	3004      	adds	r0, #4
 800684a:	011b      	lsls	r3, r3, #4
 800684c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006850:	d101      	bne.n	8006856 <__hi0bits+0x2a>
 8006852:	3002      	adds	r0, #2
 8006854:	009b      	lsls	r3, r3, #2
 8006856:	2b00      	cmp	r3, #0
 8006858:	db02      	blt.n	8006860 <__hi0bits+0x34>
 800685a:	005b      	lsls	r3, r3, #1
 800685c:	d401      	bmi.n	8006862 <__hi0bits+0x36>
 800685e:	2020      	movs	r0, #32
 8006860:	4770      	bx	lr
 8006862:	3001      	adds	r0, #1
 8006864:	4770      	bx	lr
 8006866:	bf00      	nop

08006868 <__lo0bits>:
 8006868:	6803      	ldr	r3, [r0, #0]
 800686a:	4602      	mov	r2, r0
 800686c:	f013 0007 	ands.w	r0, r3, #7
 8006870:	d007      	beq.n	8006882 <__lo0bits+0x1a>
 8006872:	07d9      	lsls	r1, r3, #31
 8006874:	d41f      	bmi.n	80068b6 <__lo0bits+0x4e>
 8006876:	0798      	lsls	r0, r3, #30
 8006878:	d41f      	bmi.n	80068ba <__lo0bits+0x52>
 800687a:	089b      	lsrs	r3, r3, #2
 800687c:	6013      	str	r3, [r2, #0]
 800687e:	2002      	movs	r0, #2
 8006880:	4770      	bx	lr
 8006882:	b299      	uxth	r1, r3
 8006884:	b909      	cbnz	r1, 800688a <__lo0bits+0x22>
 8006886:	0c1b      	lsrs	r3, r3, #16
 8006888:	2010      	movs	r0, #16
 800688a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800688e:	d101      	bne.n	8006894 <__lo0bits+0x2c>
 8006890:	3008      	adds	r0, #8
 8006892:	0a1b      	lsrs	r3, r3, #8
 8006894:	0719      	lsls	r1, r3, #28
 8006896:	d101      	bne.n	800689c <__lo0bits+0x34>
 8006898:	3004      	adds	r0, #4
 800689a:	091b      	lsrs	r3, r3, #4
 800689c:	0799      	lsls	r1, r3, #30
 800689e:	d101      	bne.n	80068a4 <__lo0bits+0x3c>
 80068a0:	3002      	adds	r0, #2
 80068a2:	089b      	lsrs	r3, r3, #2
 80068a4:	07d9      	lsls	r1, r3, #31
 80068a6:	d404      	bmi.n	80068b2 <__lo0bits+0x4a>
 80068a8:	085b      	lsrs	r3, r3, #1
 80068aa:	d101      	bne.n	80068b0 <__lo0bits+0x48>
 80068ac:	2020      	movs	r0, #32
 80068ae:	4770      	bx	lr
 80068b0:	3001      	adds	r0, #1
 80068b2:	6013      	str	r3, [r2, #0]
 80068b4:	4770      	bx	lr
 80068b6:	2000      	movs	r0, #0
 80068b8:	4770      	bx	lr
 80068ba:	085b      	lsrs	r3, r3, #1
 80068bc:	6013      	str	r3, [r2, #0]
 80068be:	2001      	movs	r0, #1
 80068c0:	4770      	bx	lr
 80068c2:	bf00      	nop

080068c4 <__i2b>:
 80068c4:	b510      	push	{r4, lr}
 80068c6:	460c      	mov	r4, r1
 80068c8:	2101      	movs	r1, #1
 80068ca:	f7ff feef 	bl	80066ac <_Balloc>
 80068ce:	2201      	movs	r2, #1
 80068d0:	6144      	str	r4, [r0, #20]
 80068d2:	6102      	str	r2, [r0, #16]
 80068d4:	bd10      	pop	{r4, pc}
 80068d6:	bf00      	nop

080068d8 <__multiply>:
 80068d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068dc:	690f      	ldr	r7, [r1, #16]
 80068de:	6916      	ldr	r6, [r2, #16]
 80068e0:	42b7      	cmp	r7, r6
 80068e2:	b085      	sub	sp, #20
 80068e4:	460d      	mov	r5, r1
 80068e6:	4692      	mov	sl, r2
 80068e8:	da04      	bge.n	80068f4 <__multiply+0x1c>
 80068ea:	463a      	mov	r2, r7
 80068ec:	4655      	mov	r5, sl
 80068ee:	4637      	mov	r7, r6
 80068f0:	468a      	mov	sl, r1
 80068f2:	4616      	mov	r6, r2
 80068f4:	68ab      	ldr	r3, [r5, #8]
 80068f6:	6869      	ldr	r1, [r5, #4]
 80068f8:	19bc      	adds	r4, r7, r6
 80068fa:	429c      	cmp	r4, r3
 80068fc:	bfc8      	it	gt
 80068fe:	3101      	addgt	r1, #1
 8006900:	f7ff fed4 	bl	80066ac <_Balloc>
 8006904:	1d21      	adds	r1, r4, #4
 8006906:	eb00 0b81 	add.w	fp, r0, r1, lsl #2
 800690a:	f100 0914 	add.w	r9, r0, #20
 800690e:	f10b 0b04 	add.w	fp, fp, #4
 8006912:	45d9      	cmp	r9, fp
 8006914:	9000      	str	r0, [sp, #0]
 8006916:	9101      	str	r1, [sp, #4]
 8006918:	d205      	bcs.n	8006926 <__multiply+0x4e>
 800691a:	464b      	mov	r3, r9
 800691c:	2200      	movs	r2, #0
 800691e:	f843 2b04 	str.w	r2, [r3], #4
 8006922:	459b      	cmp	fp, r3
 8006924:	d8fb      	bhi.n	800691e <__multiply+0x46>
 8006926:	eb0a 0686 	add.w	r6, sl, r6, lsl #2
 800692a:	eb05 0787 	add.w	r7, r5, r7, lsl #2
 800692e:	f10a 0a14 	add.w	sl, sl, #20
 8006932:	f106 0814 	add.w	r8, r6, #20
 8006936:	3514      	adds	r5, #20
 8006938:	3714      	adds	r7, #20
 800693a:	45c2      	cmp	sl, r8
 800693c:	d24f      	bcs.n	80069de <__multiply+0x106>
 800693e:	f8cd b008 	str.w	fp, [sp, #8]
 8006942:	9403      	str	r4, [sp, #12]
 8006944:	46ab      	mov	fp, r5
 8006946:	f85a 5b04 	ldr.w	r5, [sl], #4
 800694a:	b2ac      	uxth	r4, r5
 800694c:	b1e4      	cbz	r4, 8006988 <__multiply+0xb0>
 800694e:	465a      	mov	r2, fp
 8006950:	464b      	mov	r3, r9
 8006952:	2100      	movs	r1, #0
 8006954:	f852 6b04 	ldr.w	r6, [r2], #4
 8006958:	681d      	ldr	r5, [r3, #0]
 800695a:	b2b0      	uxth	r0, r6
 800695c:	fa11 f185 	uxtah	r1, r1, r5
 8006960:	0c36      	lsrs	r6, r6, #16
 8006962:	0c2d      	lsrs	r5, r5, #16
 8006964:	fb04 1000 	mla	r0, r4, r0, r1
 8006968:	fb04 5106 	mla	r1, r4, r6, r5
 800696c:	eb01 4110 	add.w	r1, r1, r0, lsr #16
 8006970:	b280      	uxth	r0, r0
 8006972:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8006976:	0c09      	lsrs	r1, r1, #16
 8006978:	4297      	cmp	r7, r2
 800697a:	461d      	mov	r5, r3
 800697c:	f843 0b04 	str.w	r0, [r3], #4
 8006980:	d8e8      	bhi.n	8006954 <__multiply+0x7c>
 8006982:	6069      	str	r1, [r5, #4]
 8006984:	f85a 5c04 	ldr.w	r5, [sl, #-4]
 8006988:	0c2d      	lsrs	r5, r5, #16
 800698a:	d021      	beq.n	80069d0 <__multiply+0xf8>
 800698c:	f8d9 6000 	ldr.w	r6, [r9]
 8006990:	465b      	mov	r3, fp
 8006992:	4630      	mov	r0, r6
 8006994:	4649      	mov	r1, r9
 8006996:	f04f 0c00 	mov.w	ip, #0
 800699a:	e000      	b.n	800699e <__multiply+0xc6>
 800699c:	4611      	mov	r1, r2
 800699e:	881a      	ldrh	r2, [r3, #0]
 80069a0:	eb0c 4c10 	add.w	ip, ip, r0, lsr #16
 80069a4:	fb05 cc02 	mla	ip, r5, r2, ip
 80069a8:	b2b6      	uxth	r6, r6
 80069aa:	460a      	mov	r2, r1
 80069ac:	ea46 460c 	orr.w	r6, r6, ip, lsl #16
 80069b0:	f842 6b04 	str.w	r6, [r2], #4
 80069b4:	f853 6b04 	ldr.w	r6, [r3], #4
 80069b8:	6848      	ldr	r0, [r1, #4]
 80069ba:	0c36      	lsrs	r6, r6, #16
 80069bc:	b284      	uxth	r4, r0
 80069be:	fb05 4606 	mla	r6, r5, r6, r4
 80069c2:	eb06 461c 	add.w	r6, r6, ip, lsr #16
 80069c6:	429f      	cmp	r7, r3
 80069c8:	ea4f 4c16 	mov.w	ip, r6, lsr #16
 80069cc:	d8e6      	bhi.n	800699c <__multiply+0xc4>
 80069ce:	604e      	str	r6, [r1, #4]
 80069d0:	45d0      	cmp	r8, sl
 80069d2:	f109 0904 	add.w	r9, r9, #4
 80069d6:	d8b6      	bhi.n	8006946 <__multiply+0x6e>
 80069d8:	f8dd b008 	ldr.w	fp, [sp, #8]
 80069dc:	9c03      	ldr	r4, [sp, #12]
 80069de:	2c00      	cmp	r4, #0
 80069e0:	dd0c      	ble.n	80069fc <__multiply+0x124>
 80069e2:	e89d 0006 	ldmia.w	sp, {r1, r2}
 80069e6:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 80069ea:	b93b      	cbnz	r3, 80069fc <__multiply+0x124>
 80069ec:	f1ab 0b04 	sub.w	fp, fp, #4
 80069f0:	e002      	b.n	80069f8 <__multiply+0x120>
 80069f2:	f85b 3d04 	ldr.w	r3, [fp, #-4]!
 80069f6:	b90b      	cbnz	r3, 80069fc <__multiply+0x124>
 80069f8:	3c01      	subs	r4, #1
 80069fa:	d1fa      	bne.n	80069f2 <__multiply+0x11a>
 80069fc:	9a00      	ldr	r2, [sp, #0]
 80069fe:	6114      	str	r4, [r2, #16]
 8006a00:	4610      	mov	r0, r2
 8006a02:	b005      	add	sp, #20
 8006a04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006a08 <__pow5mult>:
 8006a08:	f012 0303 	ands.w	r3, r2, #3
 8006a0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a10:	4615      	mov	r5, r2
 8006a12:	4604      	mov	r4, r0
 8006a14:	4688      	mov	r8, r1
 8006a16:	d12d      	bne.n	8006a74 <__pow5mult+0x6c>
 8006a18:	10ad      	asrs	r5, r5, #2
 8006a1a:	d01d      	beq.n	8006a58 <__pow5mult+0x50>
 8006a1c:	6ca7      	ldr	r7, [r4, #72]	; 0x48
 8006a1e:	b92f      	cbnz	r7, 8006a2c <__pow5mult+0x24>
 8006a20:	e031      	b.n	8006a86 <__pow5mult+0x7e>
 8006a22:	106d      	asrs	r5, r5, #1
 8006a24:	d018      	beq.n	8006a58 <__pow5mult+0x50>
 8006a26:	683e      	ldr	r6, [r7, #0]
 8006a28:	b1ce      	cbz	r6, 8006a5e <__pow5mult+0x56>
 8006a2a:	4637      	mov	r7, r6
 8006a2c:	07e8      	lsls	r0, r5, #31
 8006a2e:	d5f8      	bpl.n	8006a22 <__pow5mult+0x1a>
 8006a30:	4641      	mov	r1, r8
 8006a32:	463a      	mov	r2, r7
 8006a34:	4620      	mov	r0, r4
 8006a36:	f7ff ff4f 	bl	80068d8 <__multiply>
 8006a3a:	f1b8 0f00 	cmp.w	r8, #0
 8006a3e:	d017      	beq.n	8006a70 <__pow5mult+0x68>
 8006a40:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8006a44:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006a46:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006a4a:	106d      	asrs	r5, r5, #1
 8006a4c:	f8c8 1000 	str.w	r1, [r8]
 8006a50:	f843 8022 	str.w	r8, [r3, r2, lsl #2]
 8006a54:	4680      	mov	r8, r0
 8006a56:	d1e6      	bne.n	8006a26 <__pow5mult+0x1e>
 8006a58:	4640      	mov	r0, r8
 8006a5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a5e:	4639      	mov	r1, r7
 8006a60:	463a      	mov	r2, r7
 8006a62:	4620      	mov	r0, r4
 8006a64:	f7ff ff38 	bl	80068d8 <__multiply>
 8006a68:	6038      	str	r0, [r7, #0]
 8006a6a:	6006      	str	r6, [r0, #0]
 8006a6c:	4607      	mov	r7, r0
 8006a6e:	e7dd      	b.n	8006a2c <__pow5mult+0x24>
 8006a70:	4680      	mov	r8, r0
 8006a72:	e7d6      	b.n	8006a22 <__pow5mult+0x1a>
 8006a74:	1e5e      	subs	r6, r3, #1
 8006a76:	4a09      	ldr	r2, [pc, #36]	; (8006a9c <__pow5mult+0x94>)
 8006a78:	2300      	movs	r3, #0
 8006a7a:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 8006a7e:	f7ff fe45 	bl	800670c <__multadd>
 8006a82:	4680      	mov	r8, r0
 8006a84:	e7c8      	b.n	8006a18 <__pow5mult+0x10>
 8006a86:	4620      	mov	r0, r4
 8006a88:	f240 2171 	movw	r1, #625	; 0x271
 8006a8c:	f7ff ff1a 	bl	80068c4 <__i2b>
 8006a90:	2300      	movs	r3, #0
 8006a92:	64a0      	str	r0, [r4, #72]	; 0x48
 8006a94:	4607      	mov	r7, r0
 8006a96:	6003      	str	r3, [r0, #0]
 8006a98:	e7c8      	b.n	8006a2c <__pow5mult+0x24>
 8006a9a:	bf00      	nop
 8006a9c:	08008e50 	.word	0x08008e50

08006aa0 <__lshift>:
 8006aa0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aa4:	4691      	mov	r9, r2
 8006aa6:	690a      	ldr	r2, [r1, #16]
 8006aa8:	688b      	ldr	r3, [r1, #8]
 8006aaa:	ea4f 1769 	mov.w	r7, r9, asr #5
 8006aae:	eb07 0b02 	add.w	fp, r7, r2
 8006ab2:	f10b 0501 	add.w	r5, fp, #1
 8006ab6:	429d      	cmp	r5, r3
 8006ab8:	460c      	mov	r4, r1
 8006aba:	4606      	mov	r6, r0
 8006abc:	6849      	ldr	r1, [r1, #4]
 8006abe:	dd03      	ble.n	8006ac8 <__lshift+0x28>
 8006ac0:	005b      	lsls	r3, r3, #1
 8006ac2:	3101      	adds	r1, #1
 8006ac4:	429d      	cmp	r5, r3
 8006ac6:	dcfb      	bgt.n	8006ac0 <__lshift+0x20>
 8006ac8:	4630      	mov	r0, r6
 8006aca:	f7ff fdef 	bl	80066ac <_Balloc>
 8006ace:	2f00      	cmp	r7, #0
 8006ad0:	f100 0314 	add.w	r3, r0, #20
 8006ad4:	dd09      	ble.n	8006aea <__lshift+0x4a>
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	4611      	mov	r1, r2
 8006ada:	3201      	adds	r2, #1
 8006adc:	42ba      	cmp	r2, r7
 8006ade:	f843 1b04 	str.w	r1, [r3], #4
 8006ae2:	d1fa      	bne.n	8006ada <__lshift+0x3a>
 8006ae4:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 8006ae8:	3314      	adds	r3, #20
 8006aea:	6922      	ldr	r2, [r4, #16]
 8006aec:	f019 091f 	ands.w	r9, r9, #31
 8006af0:	eb04 0c82 	add.w	ip, r4, r2, lsl #2
 8006af4:	f104 0114 	add.w	r1, r4, #20
 8006af8:	f10c 0c14 	add.w	ip, ip, #20
 8006afc:	d022      	beq.n	8006b44 <__lshift+0xa4>
 8006afe:	f1c9 0a20 	rsb	sl, r9, #32
 8006b02:	2200      	movs	r2, #0
 8006b04:	e000      	b.n	8006b08 <__lshift+0x68>
 8006b06:	463b      	mov	r3, r7
 8006b08:	f8d1 8000 	ldr.w	r8, [r1]
 8006b0c:	461f      	mov	r7, r3
 8006b0e:	fa08 f809 	lsl.w	r8, r8, r9
 8006b12:	ea48 0202 	orr.w	r2, r8, r2
 8006b16:	f847 2b04 	str.w	r2, [r7], #4
 8006b1a:	f851 2b04 	ldr.w	r2, [r1], #4
 8006b1e:	458c      	cmp	ip, r1
 8006b20:	fa22 f20a 	lsr.w	r2, r2, sl
 8006b24:	d8ef      	bhi.n	8006b06 <__lshift+0x66>
 8006b26:	605a      	str	r2, [r3, #4]
 8006b28:	b10a      	cbz	r2, 8006b2e <__lshift+0x8e>
 8006b2a:	f10b 0502 	add.w	r5, fp, #2
 8006b2e:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 8006b30:	6862      	ldr	r2, [r4, #4]
 8006b32:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006b36:	3d01      	subs	r5, #1
 8006b38:	6105      	str	r5, [r0, #16]
 8006b3a:	6021      	str	r1, [r4, #0]
 8006b3c:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006b40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b44:	f851 2b04 	ldr.w	r2, [r1], #4
 8006b48:	458c      	cmp	ip, r1
 8006b4a:	f843 2b04 	str.w	r2, [r3], #4
 8006b4e:	d9ee      	bls.n	8006b2e <__lshift+0x8e>
 8006b50:	f851 2b04 	ldr.w	r2, [r1], #4
 8006b54:	458c      	cmp	ip, r1
 8006b56:	f843 2b04 	str.w	r2, [r3], #4
 8006b5a:	d8f3      	bhi.n	8006b44 <__lshift+0xa4>
 8006b5c:	e7e7      	b.n	8006b2e <__lshift+0x8e>
 8006b5e:	bf00      	nop

08006b60 <__mcmp>:
 8006b60:	4603      	mov	r3, r0
 8006b62:	690a      	ldr	r2, [r1, #16]
 8006b64:	6900      	ldr	r0, [r0, #16]
 8006b66:	1a80      	subs	r0, r0, r2
 8006b68:	b430      	push	{r4, r5}
 8006b6a:	d111      	bne.n	8006b90 <__mcmp+0x30>
 8006b6c:	3204      	adds	r2, #4
 8006b6e:	0094      	lsls	r4, r2, #2
 8006b70:	191a      	adds	r2, r3, r4
 8006b72:	1909      	adds	r1, r1, r4
 8006b74:	3314      	adds	r3, #20
 8006b76:	3204      	adds	r2, #4
 8006b78:	3104      	adds	r1, #4
 8006b7a:	f852 5c04 	ldr.w	r5, [r2, #-4]
 8006b7e:	f851 4c04 	ldr.w	r4, [r1, #-4]
 8006b82:	3a04      	subs	r2, #4
 8006b84:	42a5      	cmp	r5, r4
 8006b86:	f1a1 0104 	sub.w	r1, r1, #4
 8006b8a:	d103      	bne.n	8006b94 <__mcmp+0x34>
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d3f4      	bcc.n	8006b7a <__mcmp+0x1a>
 8006b90:	bc30      	pop	{r4, r5}
 8006b92:	4770      	bx	lr
 8006b94:	bf38      	it	cc
 8006b96:	f04f 30ff 	movcc.w	r0, #4294967295	; 0xffffffff
 8006b9a:	d3f9      	bcc.n	8006b90 <__mcmp+0x30>
 8006b9c:	2001      	movs	r0, #1
 8006b9e:	e7f7      	b.n	8006b90 <__mcmp+0x30>

08006ba0 <__mdiff>:
 8006ba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ba4:	460c      	mov	r4, r1
 8006ba6:	4606      	mov	r6, r0
 8006ba8:	4611      	mov	r1, r2
 8006baa:	4620      	mov	r0, r4
 8006bac:	4615      	mov	r5, r2
 8006bae:	f7ff ffd7 	bl	8006b60 <__mcmp>
 8006bb2:	1e07      	subs	r7, r0, #0
 8006bb4:	d058      	beq.n	8006c68 <__mdiff+0xc8>
 8006bb6:	db52      	blt.n	8006c5e <__mdiff+0xbe>
 8006bb8:	2700      	movs	r7, #0
 8006bba:	4630      	mov	r0, r6
 8006bbc:	6861      	ldr	r1, [r4, #4]
 8006bbe:	f7ff fd75 	bl	80066ac <_Balloc>
 8006bc2:	f8d4 c010 	ldr.w	ip, [r4, #16]
 8006bc6:	692b      	ldr	r3, [r5, #16]
 8006bc8:	60c7      	str	r7, [r0, #12]
 8006bca:	eb05 0883 	add.w	r8, r5, r3, lsl #2
 8006bce:	eb04 078c 	add.w	r7, r4, ip, lsl #2
 8006bd2:	3714      	adds	r7, #20
 8006bd4:	f108 0814 	add.w	r8, r8, #20
 8006bd8:	3414      	adds	r4, #20
 8006bda:	3514      	adds	r5, #20
 8006bdc:	f100 0914 	add.w	r9, r0, #20
 8006be0:	2600      	movs	r6, #0
 8006be2:	f854 3b04 	ldr.w	r3, [r4], #4
 8006be6:	f855 2b04 	ldr.w	r2, [r5], #4
 8006bea:	fa16 f183 	uxtah	r1, r6, r3
 8006bee:	fa1f fa82 	uxth.w	sl, r2
 8006bf2:	0c12      	lsrs	r2, r2, #16
 8006bf4:	ebc2 4613 	rsb	r6, r2, r3, lsr #16
 8006bf8:	ebca 0101 	rsb	r1, sl, r1
 8006bfc:	eb06 4621 	add.w	r6, r6, r1, asr #16
 8006c00:	464b      	mov	r3, r9
 8006c02:	b289      	uxth	r1, r1
 8006c04:	ea41 4106 	orr.w	r1, r1, r6, lsl #16
 8006c08:	f843 1b04 	str.w	r1, [r3], #4
 8006c0c:	1436      	asrs	r6, r6, #16
 8006c0e:	45a8      	cmp	r8, r5
 8006c10:	4622      	mov	r2, r4
 8006c12:	4699      	mov	r9, r3
 8006c14:	d8e5      	bhi.n	8006be2 <__mdiff+0x42>
 8006c16:	42a7      	cmp	r7, r4
 8006c18:	4698      	mov	r8, r3
 8006c1a:	d914      	bls.n	8006c46 <__mdiff+0xa6>
 8006c1c:	f852 5b04 	ldr.w	r5, [r2], #4
 8006c20:	fa16 f685 	uxtah	r6, r6, r5
 8006c24:	0c2d      	lsrs	r5, r5, #16
 8006c26:	eb05 4526 	add.w	r5, r5, r6, asr #16
 8006c2a:	b2b6      	uxth	r6, r6
 8006c2c:	ea46 4105 	orr.w	r1, r6, r5, lsl #16
 8006c30:	142e      	asrs	r6, r5, #16
 8006c32:	4297      	cmp	r7, r2
 8006c34:	f843 1b04 	str.w	r1, [r3], #4
 8006c38:	d8f0      	bhi.n	8006c1c <__mdiff+0x7c>
 8006c3a:	43e3      	mvns	r3, r4
 8006c3c:	19db      	adds	r3, r3, r7
 8006c3e:	f023 0303 	bic.w	r3, r3, #3
 8006c42:	3304      	adds	r3, #4
 8006c44:	4443      	add	r3, r8
 8006c46:	b931      	cbnz	r1, 8006c56 <__mdiff+0xb6>
 8006c48:	3b04      	subs	r3, #4
 8006c4a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006c4e:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8006c52:	2a00      	cmp	r2, #0
 8006c54:	d0f9      	beq.n	8006c4a <__mdiff+0xaa>
 8006c56:	f8c0 c010 	str.w	ip, [r0, #16]
 8006c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c5e:	4623      	mov	r3, r4
 8006c60:	2701      	movs	r7, #1
 8006c62:	462c      	mov	r4, r5
 8006c64:	461d      	mov	r5, r3
 8006c66:	e7a8      	b.n	8006bba <__mdiff+0x1a>
 8006c68:	4630      	mov	r0, r6
 8006c6a:	4639      	mov	r1, r7
 8006c6c:	f7ff fd1e 	bl	80066ac <_Balloc>
 8006c70:	2301      	movs	r3, #1
 8006c72:	6103      	str	r3, [r0, #16]
 8006c74:	6147      	str	r7, [r0, #20]
 8006c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c7a:	bf00      	nop

08006c7c <__ulp>:
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 8006c82:	400b      	ands	r3, r1
 8006c84:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	dd02      	ble.n	8006c92 <__ulp+0x16>
 8006c8c:	4619      	mov	r1, r3
 8006c8e:	2000      	movs	r0, #0
 8006c90:	4770      	bx	lr
 8006c92:	425b      	negs	r3, r3
 8006c94:	151b      	asrs	r3, r3, #20
 8006c96:	2100      	movs	r1, #0
 8006c98:	2b13      	cmp	r3, #19
 8006c9a:	dd0b      	ble.n	8006cb4 <__ulp+0x38>
 8006c9c:	2b32      	cmp	r3, #50	; 0x32
 8006c9e:	dd02      	ble.n	8006ca6 <__ulp+0x2a>
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	4770      	bx	lr
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	f1c3 0333 	rsb	r3, r3, #51	; 0x33
 8006cac:	fa12 f303 	lsls.w	r3, r2, r3
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	4770      	bx	lr
 8006cb4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006cb8:	fa52 f103 	asrs.w	r1, r2, r3
 8006cbc:	2000      	movs	r0, #0
 8006cbe:	4770      	bx	lr

08006cc0 <__b2d>:
 8006cc0:	6902      	ldr	r2, [r0, #16]
 8006cc2:	3204      	adds	r2, #4
 8006cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cc6:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 8006cca:	4603      	mov	r3, r0
 8006ccc:	eb00 0482 	add.w	r4, r0, r2, lsl #2
 8006cd0:	4628      	mov	r0, r5
 8006cd2:	460f      	mov	r7, r1
 8006cd4:	f103 0614 	add.w	r6, r3, #20
 8006cd8:	f7ff fda8 	bl	800682c <__hi0bits>
 8006cdc:	f1c0 0320 	rsb	r3, r0, #32
 8006ce0:	280a      	cmp	r0, #10
 8006ce2:	603b      	str	r3, [r7, #0]
 8006ce4:	4623      	mov	r3, r4
 8006ce6:	dc14      	bgt.n	8006d12 <__b2d+0x52>
 8006ce8:	f1c0 010b 	rsb	r1, r0, #11
 8006cec:	fa35 f701 	lsrs.w	r7, r5, r1
 8006cf0:	f047 577f 	orr.w	r7, r7, #1069547520	; 0x3fc00000
 8006cf4:	42a6      	cmp	r6, r4
 8006cf6:	f447 1340 	orr.w	r3, r7, #3145728	; 0x300000
 8006cfa:	d22e      	bcs.n	8006d5a <__b2d+0x9a>
 8006cfc:	f854 4c04 	ldr.w	r4, [r4, #-4]
 8006d00:	fa34 f101 	lsrs.w	r1, r4, r1
 8006d04:	3015      	adds	r0, #21
 8006d06:	4085      	lsls	r5, r0
 8006d08:	ea41 0205 	orr.w	r2, r1, r5
 8006d0c:	4610      	mov	r0, r2
 8006d0e:	4619      	mov	r1, r3
 8006d10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d12:	2100      	movs	r1, #0
 8006d14:	42a6      	cmp	r6, r4
 8006d16:	d202      	bcs.n	8006d1e <__b2d+0x5e>
 8006d18:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8006d1c:	3c04      	subs	r4, #4
 8006d1e:	f1b0 070b 	subs.w	r7, r0, #11
 8006d22:	bf02      	ittt	eq
 8006d24:	f045 557f 	orreq.w	r5, r5, #1069547520	; 0x3fc00000
 8006d28:	f445 1340 	orreq.w	r3, r5, #3145728	; 0x300000
 8006d2c:	460a      	moveq	r2, r1
 8006d2e:	d0ed      	beq.n	8006d0c <__b2d+0x4c>
 8006d30:	40bd      	lsls	r5, r7
 8006d32:	f1c0 002b 	rsb	r0, r0, #43	; 0x2b
 8006d36:	f045 557f 	orr.w	r5, r5, #1069547520	; 0x3fc00000
 8006d3a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006d3e:	fa21 fc00 	lsr.w	ip, r1, r0
 8006d42:	42b4      	cmp	r4, r6
 8006d44:	ea45 030c 	orr.w	r3, r5, ip
 8006d48:	d909      	bls.n	8006d5e <__b2d+0x9e>
 8006d4a:	f854 4c04 	ldr.w	r4, [r4, #-4]
 8006d4e:	fa34 f000 	lsrs.w	r0, r4, r0
 8006d52:	40b9      	lsls	r1, r7
 8006d54:	ea40 0201 	orr.w	r2, r0, r1
 8006d58:	e7d8      	b.n	8006d0c <__b2d+0x4c>
 8006d5a:	2100      	movs	r1, #0
 8006d5c:	e7d2      	b.n	8006d04 <__b2d+0x44>
 8006d5e:	2000      	movs	r0, #0
 8006d60:	e7f7      	b.n	8006d52 <__b2d+0x92>
 8006d62:	bf00      	nop

08006d64 <__d2b>:
 8006d64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006d68:	b083      	sub	sp, #12
 8006d6a:	2101      	movs	r1, #1
 8006d6c:	461d      	mov	r5, r3
 8006d6e:	4614      	mov	r4, r2
 8006d70:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8006d72:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006d74:	f7ff fc9a 	bl	80066ac <_Balloc>
 8006d78:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
 8006d7c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006d80:	f3c5 590a 	ubfx	r9, r5, #20, #11
 8006d84:	4680      	mov	r8, r0
 8006d86:	9301      	str	r3, [sp, #4]
 8006d88:	f1b9 0f00 	cmp.w	r9, #0
 8006d8c:	d002      	beq.n	8006d94 <__d2b+0x30>
 8006d8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006d92:	9301      	str	r3, [sp, #4]
 8006d94:	2c00      	cmp	r4, #0
 8006d96:	d025      	beq.n	8006de4 <__d2b+0x80>
 8006d98:	a802      	add	r0, sp, #8
 8006d9a:	f840 4d08 	str.w	r4, [r0, #-8]!
 8006d9e:	4668      	mov	r0, sp
 8006da0:	f7ff fd62 	bl	8006868 <__lo0bits>
 8006da4:	9b01      	ldr	r3, [sp, #4]
 8006da6:	2800      	cmp	r0, #0
 8006da8:	d132      	bne.n	8006e10 <__d2b+0xac>
 8006daa:	9a00      	ldr	r2, [sp, #0]
 8006dac:	f8c8 2014 	str.w	r2, [r8, #20]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	bf0c      	ite	eq
 8006db4:	2401      	moveq	r4, #1
 8006db6:	2402      	movne	r4, #2
 8006db8:	f8c8 3018 	str.w	r3, [r8, #24]
 8006dbc:	f8c8 4010 	str.w	r4, [r8, #16]
 8006dc0:	f1b9 0f00 	cmp.w	r9, #0
 8006dc4:	d11b      	bne.n	8006dfe <__d2b+0x9a>
 8006dc6:	eb08 0284 	add.w	r2, r8, r4, lsl #2
 8006dca:	f2a0 4332 	subw	r3, r0, #1074	; 0x432
 8006dce:	6910      	ldr	r0, [r2, #16]
 8006dd0:	603b      	str	r3, [r7, #0]
 8006dd2:	f7ff fd2b 	bl	800682c <__hi0bits>
 8006dd6:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 8006dda:	6030      	str	r0, [r6, #0]
 8006ddc:	4640      	mov	r0, r8
 8006dde:	b003      	add	sp, #12
 8006de0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006de4:	a801      	add	r0, sp, #4
 8006de6:	f7ff fd3f 	bl	8006868 <__lo0bits>
 8006dea:	9b01      	ldr	r3, [sp, #4]
 8006dec:	2401      	movs	r4, #1
 8006dee:	f8c8 3014 	str.w	r3, [r8, #20]
 8006df2:	f8c8 4010 	str.w	r4, [r8, #16]
 8006df6:	3020      	adds	r0, #32
 8006df8:	f1b9 0f00 	cmp.w	r9, #0
 8006dfc:	d0e3      	beq.n	8006dc6 <__d2b+0x62>
 8006dfe:	f2a9 4933 	subw	r9, r9, #1075	; 0x433
 8006e02:	eb09 0300 	add.w	r3, r9, r0
 8006e06:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006e0a:	603b      	str	r3, [r7, #0]
 8006e0c:	6030      	str	r0, [r6, #0]
 8006e0e:	e7e5      	b.n	8006ddc <__d2b+0x78>
 8006e10:	f1c0 0220 	rsb	r2, r0, #32
 8006e14:	9900      	ldr	r1, [sp, #0]
 8006e16:	fa13 f202 	lsls.w	r2, r3, r2
 8006e1a:	430a      	orrs	r2, r1
 8006e1c:	40c3      	lsrs	r3, r0
 8006e1e:	f8c8 2014 	str.w	r2, [r8, #20]
 8006e22:	9301      	str	r3, [sp, #4]
 8006e24:	e7c4      	b.n	8006db0 <__d2b+0x4c>
 8006e26:	bf00      	nop

08006e28 <__ratio>:
 8006e28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006e2c:	b083      	sub	sp, #12
 8006e2e:	460d      	mov	r5, r1
 8006e30:	4669      	mov	r1, sp
 8006e32:	4604      	mov	r4, r0
 8006e34:	f7ff ff44 	bl	8006cc0 <__b2d>
 8006e38:	4689      	mov	r9, r1
 8006e3a:	4680      	mov	r8, r0
 8006e3c:	a901      	add	r1, sp, #4
 8006e3e:	4628      	mov	r0, r5
 8006e40:	f7ff ff3e 	bl	8006cc0 <__b2d>
 8006e44:	460f      	mov	r7, r1
 8006e46:	e89d 000a 	ldmia.w	sp, {r1, r3}
 8006e4a:	692a      	ldr	r2, [r5, #16]
 8006e4c:	6924      	ldr	r4, [r4, #16]
 8006e4e:	1acb      	subs	r3, r1, r3
 8006e50:	1aa4      	subs	r4, r4, r2
 8006e52:	eb03 1444 	add.w	r4, r3, r4, lsl #5
 8006e56:	2c00      	cmp	r4, #0
 8006e58:	4606      	mov	r6, r0
 8006e5a:	464b      	mov	r3, r9
 8006e5c:	4639      	mov	r1, r7
 8006e5e:	bfcb      	itete	gt
 8006e60:	eb09 5304 	addgt.w	r3, r9, r4, lsl #20
 8006e64:	eba7 5104 	suble.w	r1, r7, r4, lsl #20
 8006e68:	4699      	movgt	r9, r3
 8006e6a:	460f      	movle	r7, r1
 8006e6c:	bfcc      	ite	gt
 8006e6e:	46c0      	nopgt			; (mov r8, r8)
 8006e70:	4636      	movle	r6, r6
 8006e72:	4640      	mov	r0, r8
 8006e74:	4649      	mov	r1, r9
 8006e76:	4632      	mov	r2, r6
 8006e78:	463b      	mov	r3, r7
 8006e7a:	f001 fc53 	bl	8008724 <__aeabi_ddiv>
 8006e7e:	b003      	add	sp, #12
 8006e80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08006e84 <_mprec_log10>:
 8006e84:	b510      	push	{r4, lr}
 8006e86:	4604      	mov	r4, r0
 8006e88:	2100      	movs	r1, #0
 8006e8a:	2000      	movs	r0, #0
 8006e8c:	2c17      	cmp	r4, #23
 8006e8e:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 8006e92:	dd08      	ble.n	8006ea6 <_mprec_log10+0x22>
 8006e94:	2300      	movs	r3, #0
 8006e96:	2200      	movs	r2, #0
 8006e98:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8006e9c:	f001 fb18 	bl	80084d0 <__aeabi_dmul>
 8006ea0:	3c01      	subs	r4, #1
 8006ea2:	d1f7      	bne.n	8006e94 <_mprec_log10+0x10>
 8006ea4:	bd10      	pop	{r4, pc}
 8006ea6:	4b03      	ldr	r3, [pc, #12]	; (8006eb4 <_mprec_log10+0x30>)
 8006ea8:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8006eac:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 8006eb0:	bd10      	pop	{r4, pc}
 8006eb2:	bf00      	nop
 8006eb4:	08008e50 	.word	0x08008e50

08006eb8 <__copybits>:
 8006eb8:	6913      	ldr	r3, [r2, #16]
 8006eba:	3901      	subs	r1, #1
 8006ebc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006ec0:	1149      	asrs	r1, r1, #5
 8006ec2:	b470      	push	{r4, r5, r6}
 8006ec4:	3314      	adds	r3, #20
 8006ec6:	f102 0414 	add.w	r4, r2, #20
 8006eca:	3101      	adds	r1, #1
 8006ecc:	429c      	cmp	r4, r3
 8006ece:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006ed2:	d20c      	bcs.n	8006eee <__copybits+0x36>
 8006ed4:	4605      	mov	r5, r0
 8006ed6:	f854 6b04 	ldr.w	r6, [r4], #4
 8006eda:	42a3      	cmp	r3, r4
 8006edc:	f845 6b04 	str.w	r6, [r5], #4
 8006ee0:	d8f9      	bhi.n	8006ed6 <__copybits+0x1e>
 8006ee2:	1a9b      	subs	r3, r3, r2
 8006ee4:	3b15      	subs	r3, #21
 8006ee6:	f023 0303 	bic.w	r3, r3, #3
 8006eea:	3304      	adds	r3, #4
 8006eec:	18c0      	adds	r0, r0, r3
 8006eee:	4281      	cmp	r1, r0
 8006ef0:	d904      	bls.n	8006efc <__copybits+0x44>
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	f840 3b04 	str.w	r3, [r0], #4
 8006ef8:	4281      	cmp	r1, r0
 8006efa:	d8fb      	bhi.n	8006ef4 <__copybits+0x3c>
 8006efc:	bc70      	pop	{r4, r5, r6}
 8006efe:	4770      	bx	lr

08006f00 <__any_on>:
 8006f00:	6902      	ldr	r2, [r0, #16]
 8006f02:	114b      	asrs	r3, r1, #5
 8006f04:	429a      	cmp	r2, r3
 8006f06:	b410      	push	{r4}
 8006f08:	db01      	blt.n	8006f0e <__any_on+0xe>
 8006f0a:	461a      	mov	r2, r3
 8006f0c:	dc13      	bgt.n	8006f36 <__any_on+0x36>
 8006f0e:	3204      	adds	r2, #4
 8006f10:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 8006f14:	f100 0114 	add.w	r1, r0, #20
 8006f18:	1d1c      	adds	r4, r3, #4
 8006f1a:	42a1      	cmp	r1, r4
 8006f1c:	d218      	bcs.n	8006f50 <__any_on+0x50>
 8006f1e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8006f22:	b92a      	cbnz	r2, 8006f30 <__any_on+0x30>
 8006f24:	4299      	cmp	r1, r3
 8006f26:	d213      	bcs.n	8006f50 <__any_on+0x50>
 8006f28:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006f2c:	2a00      	cmp	r2, #0
 8006f2e:	d0f9      	beq.n	8006f24 <__any_on+0x24>
 8006f30:	2001      	movs	r0, #1
 8006f32:	bc10      	pop	{r4}
 8006f34:	4770      	bx	lr
 8006f36:	f011 011f 	ands.w	r1, r1, #31
 8006f3a:	d0e8      	beq.n	8006f0e <__any_on+0xe>
 8006f3c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8006f40:	695b      	ldr	r3, [r3, #20]
 8006f42:	fa33 f401 	lsrs.w	r4, r3, r1
 8006f46:	fa14 f101 	lsls.w	r1, r4, r1
 8006f4a:	4299      	cmp	r1, r3
 8006f4c:	d1f0      	bne.n	8006f30 <__any_on+0x30>
 8006f4e:	e7de      	b.n	8006f0e <__any_on+0xe>
 8006f50:	2000      	movs	r0, #0
 8006f52:	e7ee      	b.n	8006f32 <__any_on+0x32>

08006f54 <__fpclassifyd>:
 8006f54:	ea50 0201 	orrs.w	r2, r0, r1
 8006f58:	b410      	push	{r4}
 8006f5a:	460b      	mov	r3, r1
 8006f5c:	d102      	bne.n	8006f64 <__fpclassifyd+0x10>
 8006f5e:	2002      	movs	r0, #2
 8006f60:	bc10      	pop	{r4}
 8006f62:	4770      	bx	lr
 8006f64:	f1d0 0101 	rsbs	r1, r0, #1
 8006f68:	bf38      	it	cc
 8006f6a:	2100      	movcc	r1, #0
 8006f6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f70:	bf08      	it	eq
 8006f72:	2800      	cmpeq	r0, #0
 8006f74:	d0f3      	beq.n	8006f5e <__fpclassifyd+0xa>
 8006f76:	f103 44ff 	add.w	r4, r3, #2139095040	; 0x7f800000
 8006f7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006f7e:	f504 04e0 	add.w	r4, r4, #7340032	; 0x700000
 8006f82:	f6c7 72df 	movt	r2, #32735	; 0x7fdf
 8006f86:	f5a3 1080 	sub.w	r0, r3, #1048576	; 0x100000
 8006f8a:	4290      	cmp	r0, r2
 8006f8c:	bf88      	it	hi
 8006f8e:	4294      	cmphi	r4, r2
 8006f90:	d801      	bhi.n	8006f96 <__fpclassifyd+0x42>
 8006f92:	2004      	movs	r0, #4
 8006f94:	e7e4      	b.n	8006f60 <__fpclassifyd+0xc>
 8006f96:	f103 4200 	add.w	r2, r3, #2147483648	; 0x80000000
 8006f9a:	2003      	movs	r0, #3
 8006f9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006fa0:	bf28      	it	cs
 8006fa2:	f5b2 1f80 	cmpcs.w	r2, #1048576	; 0x100000
 8006fa6:	d3db      	bcc.n	8006f60 <__fpclassifyd+0xc>
 8006fa8:	2200      	movs	r2, #0
 8006faa:	f6c7 72f0 	movt	r2, #32752	; 0x7ff0
 8006fae:	f513 1f80 	cmn.w	r3, #1048576	; 0x100000
 8006fb2:	bf18      	it	ne
 8006fb4:	4293      	cmpne	r3, r2
 8006fb6:	bf14      	ite	ne
 8006fb8:	2300      	movne	r3, #0
 8006fba:	2301      	moveq	r3, #1
 8006fbc:	ea01 0003 	and.w	r0, r1, r3
 8006fc0:	e7ce      	b.n	8006f60 <__fpclassifyd+0xc>
 8006fc2:	bf00      	nop

08006fc4 <_sbrk_r>:
 8006fc4:	b538      	push	{r3, r4, r5, lr}
 8006fc6:	4c07      	ldr	r4, [pc, #28]	; (8006fe4 <_sbrk_r+0x20>)
 8006fc8:	2300      	movs	r3, #0
 8006fca:	4605      	mov	r5, r0
 8006fcc:	4608      	mov	r0, r1
 8006fce:	6023      	str	r3, [r4, #0]
 8006fd0:	f7fc fbde 	bl	8003790 <_sbrk>
 8006fd4:	1c43      	adds	r3, r0, #1
 8006fd6:	d000      	beq.n	8006fda <_sbrk_r+0x16>
 8006fd8:	bd38      	pop	{r3, r4, r5, pc}
 8006fda:	6823      	ldr	r3, [r4, #0]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d0fb      	beq.n	8006fd8 <_sbrk_r+0x14>
 8006fe0:	602b      	str	r3, [r5, #0]
 8006fe2:	bd38      	pop	{r3, r4, r5, pc}
 8006fe4:	2000167c 	.word	0x2000167c

08006fe8 <strcmp>:
 8006fe8:	ea80 0201 	eor.w	r2, r0, r1
 8006fec:	f012 0f03 	tst.w	r2, #3
 8006ff0:	d13a      	bne.n	8007068 <strcmp_unaligned>
 8006ff2:	f010 0203 	ands.w	r2, r0, #3
 8006ff6:	f020 0003 	bic.w	r0, r0, #3
 8006ffa:	f021 0103 	bic.w	r1, r1, #3
 8006ffe:	f850 cb04 	ldr.w	ip, [r0], #4
 8007002:	bf08      	it	eq
 8007004:	f851 3b04 	ldreq.w	r3, [r1], #4
 8007008:	d00d      	beq.n	8007026 <strcmp+0x3e>
 800700a:	f082 0203 	eor.w	r2, r2, #3
 800700e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8007012:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8007016:	fa23 f202 	lsr.w	r2, r3, r2
 800701a:	f851 3b04 	ldr.w	r3, [r1], #4
 800701e:	ea4c 0c02 	orr.w	ip, ip, r2
 8007022:	ea43 0302 	orr.w	r3, r3, r2
 8007026:	bf00      	nop
 8007028:	f1ac 3201 	sub.w	r2, ip, #16843009	; 0x1010101
 800702c:	459c      	cmp	ip, r3
 800702e:	bf01      	itttt	eq
 8007030:	ea22 020c 	biceq.w	r2, r2, ip
 8007034:	f012 3f80 	tsteq.w	r2, #2155905152	; 0x80808080
 8007038:	f850 cb04 	ldreq.w	ip, [r0], #4
 800703c:	f851 3b04 	ldreq.w	r3, [r1], #4
 8007040:	d0f2      	beq.n	8007028 <strcmp+0x40>
 8007042:	ea4f 600c 	mov.w	r0, ip, lsl #24
 8007046:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 800704a:	2801      	cmp	r0, #1
 800704c:	bf28      	it	cs
 800704e:	ebb0 6f03 	cmpcs.w	r0, r3, lsl #24
 8007052:	bf08      	it	eq
 8007054:	0a1b      	lsreq	r3, r3, #8
 8007056:	d0f4      	beq.n	8007042 <strcmp+0x5a>
 8007058:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 800705c:	ea4f 6010 	mov.w	r0, r0, lsr #24
 8007060:	eba0 0003 	sub.w	r0, r0, r3
 8007064:	4770      	bx	lr
 8007066:	bf00      	nop

08007068 <strcmp_unaligned>:
 8007068:	f010 0f03 	tst.w	r0, #3
 800706c:	d00a      	beq.n	8007084 <strcmp_unaligned+0x1c>
 800706e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007072:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007076:	2a01      	cmp	r2, #1
 8007078:	bf28      	it	cs
 800707a:	429a      	cmpcs	r2, r3
 800707c:	d0f4      	beq.n	8007068 <strcmp_unaligned>
 800707e:	eba2 0003 	sub.w	r0, r2, r3
 8007082:	4770      	bx	lr
 8007084:	f84d 5d04 	str.w	r5, [sp, #-4]!
 8007088:	f84d 4d04 	str.w	r4, [sp, #-4]!
 800708c:	f04f 0201 	mov.w	r2, #1
 8007090:	ea42 2202 	orr.w	r2, r2, r2, lsl #8
 8007094:	ea42 4202 	orr.w	r2, r2, r2, lsl #16
 8007098:	f001 0c03 	and.w	ip, r1, #3
 800709c:	f021 0103 	bic.w	r1, r1, #3
 80070a0:	f850 4b04 	ldr.w	r4, [r0], #4
 80070a4:	f851 5b04 	ldr.w	r5, [r1], #4
 80070a8:	f1bc 0f02 	cmp.w	ip, #2
 80070ac:	d026      	beq.n	80070fc <strcmp_unaligned+0x94>
 80070ae:	d84b      	bhi.n	8007148 <strcmp_unaligned+0xe0>
 80070b0:	f024 4c7f 	bic.w	ip, r4, #4278190080	; 0xff000000
 80070b4:	ebbc 2f15 	cmp.w	ip, r5, lsr #8
 80070b8:	eba4 0302 	sub.w	r3, r4, r2
 80070bc:	ea23 0304 	bic.w	r3, r3, r4
 80070c0:	d10d      	bne.n	80070de <strcmp_unaligned+0x76>
 80070c2:	ea13 13c2 	ands.w	r3, r3, r2, lsl #7
 80070c6:	bf08      	it	eq
 80070c8:	f851 5b04 	ldreq.w	r5, [r1], #4
 80070cc:	d10a      	bne.n	80070e4 <strcmp_unaligned+0x7c>
 80070ce:	ea8c 0c04 	eor.w	ip, ip, r4
 80070d2:	ebbc 6f05 	cmp.w	ip, r5, lsl #24
 80070d6:	d10c      	bne.n	80070f2 <strcmp_unaligned+0x8a>
 80070d8:	f850 4b04 	ldr.w	r4, [r0], #4
 80070dc:	e7e8      	b.n	80070b0 <strcmp_unaligned+0x48>
 80070de:	ea4f 2515 	mov.w	r5, r5, lsr #8
 80070e2:	e05c      	b.n	800719e <strcmp_unaligned+0x136>
 80070e4:	f033 437f 	bics.w	r3, r3, #4278190080	; 0xff000000
 80070e8:	d152      	bne.n	8007190 <strcmp_unaligned+0x128>
 80070ea:	780d      	ldrb	r5, [r1, #0]
 80070ec:	ea4f 6c14 	mov.w	ip, r4, lsr #24
 80070f0:	e055      	b.n	800719e <strcmp_unaligned+0x136>
 80070f2:	ea4f 6c14 	mov.w	ip, r4, lsr #24
 80070f6:	f005 05ff 	and.w	r5, r5, #255	; 0xff
 80070fa:	e050      	b.n	800719e <strcmp_unaligned+0x136>
 80070fc:	ea4f 4c04 	mov.w	ip, r4, lsl #16
 8007100:	eba4 0302 	sub.w	r3, r4, r2
 8007104:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007108:	ea23 0304 	bic.w	r3, r3, r4
 800710c:	ebbc 4f15 	cmp.w	ip, r5, lsr #16
 8007110:	d117      	bne.n	8007142 <strcmp_unaligned+0xda>
 8007112:	ea13 13c2 	ands.w	r3, r3, r2, lsl #7
 8007116:	bf08      	it	eq
 8007118:	f851 5b04 	ldreq.w	r5, [r1], #4
 800711c:	d107      	bne.n	800712e <strcmp_unaligned+0xc6>
 800711e:	ea8c 0c04 	eor.w	ip, ip, r4
 8007122:	ebbc 4f05 	cmp.w	ip, r5, lsl #16
 8007126:	d108      	bne.n	800713a <strcmp_unaligned+0xd2>
 8007128:	f850 4b04 	ldr.w	r4, [r0], #4
 800712c:	e7e6      	b.n	80070fc <strcmp_unaligned+0x94>
 800712e:	041b      	lsls	r3, r3, #16
 8007130:	d12e      	bne.n	8007190 <strcmp_unaligned+0x128>
 8007132:	880d      	ldrh	r5, [r1, #0]
 8007134:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8007138:	e031      	b.n	800719e <strcmp_unaligned+0x136>
 800713a:	ea4f 4505 	mov.w	r5, r5, lsl #16
 800713e:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8007142:	ea4f 4515 	mov.w	r5, r5, lsr #16
 8007146:	e02a      	b.n	800719e <strcmp_unaligned+0x136>
 8007148:	f004 0cff 	and.w	ip, r4, #255	; 0xff
 800714c:	ebbc 6f15 	cmp.w	ip, r5, lsr #24
 8007150:	eba4 0302 	sub.w	r3, r4, r2
 8007154:	ea23 0304 	bic.w	r3, r3, r4
 8007158:	d10d      	bne.n	8007176 <strcmp_unaligned+0x10e>
 800715a:	ea13 13c2 	ands.w	r3, r3, r2, lsl #7
 800715e:	bf08      	it	eq
 8007160:	f851 5b04 	ldreq.w	r5, [r1], #4
 8007164:	d10a      	bne.n	800717c <strcmp_unaligned+0x114>
 8007166:	ea8c 0c04 	eor.w	ip, ip, r4
 800716a:	ebbc 2f05 	cmp.w	ip, r5, lsl #8
 800716e:	d10a      	bne.n	8007186 <strcmp_unaligned+0x11e>
 8007170:	f850 4b04 	ldr.w	r4, [r0], #4
 8007174:	e7e8      	b.n	8007148 <strcmp_unaligned+0xe0>
 8007176:	ea4f 6515 	mov.w	r5, r5, lsr #24
 800717a:	e010      	b.n	800719e <strcmp_unaligned+0x136>
 800717c:	f014 0fff 	tst.w	r4, #255	; 0xff
 8007180:	d006      	beq.n	8007190 <strcmp_unaligned+0x128>
 8007182:	f851 5b04 	ldr.w	r5, [r1], #4
 8007186:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 800718a:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 800718e:	e006      	b.n	800719e <strcmp_unaligned+0x136>
 8007190:	f04f 0000 	mov.w	r0, #0
 8007194:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007198:	f85d 5b04 	ldr.w	r5, [sp], #4
 800719c:	4770      	bx	lr
 800719e:	f00c 02ff 	and.w	r2, ip, #255	; 0xff
 80071a2:	f005 00ff 	and.w	r0, r5, #255	; 0xff
 80071a6:	2801      	cmp	r0, #1
 80071a8:	bf28      	it	cs
 80071aa:	4290      	cmpcs	r0, r2
 80071ac:	bf04      	itt	eq
 80071ae:	ea4f 2c1c 	moveq.w	ip, ip, lsr #8
 80071b2:	0a2d      	lsreq	r5, r5, #8
 80071b4:	d0f3      	beq.n	800719e <strcmp_unaligned+0x136>
 80071b6:	eba2 0000 	sub.w	r0, r2, r0
 80071ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80071be:	f85d 5b04 	ldr.w	r5, [sp], #4
 80071c2:	4770      	bx	lr

080071c4 <strlen>:
 80071c4:	f020 0103 	bic.w	r1, r0, #3
 80071c8:	f010 0003 	ands.w	r0, r0, #3
 80071cc:	f1c0 0000 	rsb	r0, r0, #0
 80071d0:	f851 3b04 	ldr.w	r3, [r1], #4
 80071d4:	f100 0c04 	add.w	ip, r0, #4
 80071d8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80071dc:	f06f 0200 	mvn.w	r2, #0
 80071e0:	bf1c      	itt	ne
 80071e2:	fa22 f20c 	lsrne.w	r2, r2, ip
 80071e6:	4313      	orrne	r3, r2
 80071e8:	f04f 0c01 	mov.w	ip, #1
 80071ec:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 80071f0:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 80071f4:	eba3 020c 	sub.w	r2, r3, ip
 80071f8:	ea22 0203 	bic.w	r2, r2, r3
 80071fc:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 8007200:	bf04      	itt	eq
 8007202:	f851 3b04 	ldreq.w	r3, [r1], #4
 8007206:	3004      	addeq	r0, #4
 8007208:	d0f4      	beq.n	80071f4 <strlen+0x30>
 800720a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800720e:	bf1f      	itttt	ne
 8007210:	3001      	addne	r0, #1
 8007212:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
 8007216:	3001      	addne	r0, #1
 8007218:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
 800721c:	bf18      	it	ne
 800721e:	3001      	addne	r0, #1
 8007220:	4770      	bx	lr
 8007222:	bf00      	nop

08007224 <__ssprint_r>:
 8007224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007228:	b083      	sub	sp, #12
 800722a:	4691      	mov	r9, r2
 800722c:	9001      	str	r0, [sp, #4]
 800722e:	6890      	ldr	r0, [r2, #8]
 8007230:	6817      	ldr	r7, [r2, #0]
 8007232:	460d      	mov	r5, r1
 8007234:	2800      	cmp	r0, #0
 8007236:	d072      	beq.n	800731e <__ssprint_r+0xfa>
 8007238:	f04f 0a00 	mov.w	sl, #0
 800723c:	6808      	ldr	r0, [r1, #0]
 800723e:	688b      	ldr	r3, [r1, #8]
 8007240:	4654      	mov	r4, sl
 8007242:	2c00      	cmp	r4, #0
 8007244:	d048      	beq.n	80072d8 <__ssprint_r+0xb4>
 8007246:	429c      	cmp	r4, r3
 8007248:	461e      	mov	r6, r3
 800724a:	4698      	mov	r8, r3
 800724c:	bf3c      	itt	cc
 800724e:	4626      	movcc	r6, r4
 8007250:	46a0      	movcc	r8, r4
 8007252:	d331      	bcc.n	80072b8 <__ssprint_r+0x94>
 8007254:	89ab      	ldrh	r3, [r5, #12]
 8007256:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800725a:	d02d      	beq.n	80072b8 <__ssprint_r+0x94>
 800725c:	696e      	ldr	r6, [r5, #20]
 800725e:	6929      	ldr	r1, [r5, #16]
 8007260:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8007264:	ebc1 0800 	rsb	r8, r1, r0
 8007268:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 800726c:	1c60      	adds	r0, r4, #1
 800726e:	1076      	asrs	r6, r6, #1
 8007270:	4440      	add	r0, r8
 8007272:	4286      	cmp	r6, r0
 8007274:	4632      	mov	r2, r6
 8007276:	bf3c      	itt	cc
 8007278:	4606      	movcc	r6, r0
 800727a:	4632      	movcc	r2, r6
 800727c:	055b      	lsls	r3, r3, #21
 800727e:	9801      	ldr	r0, [sp, #4]
 8007280:	d52f      	bpl.n	80072e2 <__ssprint_r+0xbe>
 8007282:	4611      	mov	r1, r2
 8007284:	f7fe fed8 	bl	8006038 <_malloc_r>
 8007288:	4683      	mov	fp, r0
 800728a:	2800      	cmp	r0, #0
 800728c:	d032      	beq.n	80072f4 <__ssprint_r+0xd0>
 800728e:	6929      	ldr	r1, [r5, #16]
 8007290:	4642      	mov	r2, r8
 8007292:	f7ff f9c3 	bl	800661c <memcpy>
 8007296:	89ab      	ldrh	r3, [r5, #12]
 8007298:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800729c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072a0:	81ab      	strh	r3, [r5, #12]
 80072a2:	ebc8 0306 	rsb	r3, r8, r6
 80072a6:	eb0b 0008 	add.w	r0, fp, r8
 80072aa:	616e      	str	r6, [r5, #20]
 80072ac:	f8c5 b010 	str.w	fp, [r5, #16]
 80072b0:	6028      	str	r0, [r5, #0]
 80072b2:	4626      	mov	r6, r4
 80072b4:	60ab      	str	r3, [r5, #8]
 80072b6:	46a0      	mov	r8, r4
 80072b8:	4642      	mov	r2, r8
 80072ba:	4651      	mov	r1, sl
 80072bc:	f000 fcb8 	bl	8007c30 <memmove>
 80072c0:	f8d9 2008 	ldr.w	r2, [r9, #8]
 80072c4:	68ab      	ldr	r3, [r5, #8]
 80072c6:	6828      	ldr	r0, [r5, #0]
 80072c8:	1b9b      	subs	r3, r3, r6
 80072ca:	4440      	add	r0, r8
 80072cc:	1b14      	subs	r4, r2, r4
 80072ce:	60ab      	str	r3, [r5, #8]
 80072d0:	6028      	str	r0, [r5, #0]
 80072d2:	f8c9 4008 	str.w	r4, [r9, #8]
 80072d6:	b1e4      	cbz	r4, 8007312 <__ssprint_r+0xee>
 80072d8:	f8d7 a000 	ldr.w	sl, [r7]
 80072dc:	687c      	ldr	r4, [r7, #4]
 80072de:	3708      	adds	r7, #8
 80072e0:	e7af      	b.n	8007242 <__ssprint_r+0x1e>
 80072e2:	f000 fd47 	bl	8007d74 <_realloc_r>
 80072e6:	4683      	mov	fp, r0
 80072e8:	2800      	cmp	r0, #0
 80072ea:	d1da      	bne.n	80072a2 <__ssprint_r+0x7e>
 80072ec:	9801      	ldr	r0, [sp, #4]
 80072ee:	6929      	ldr	r1, [r5, #16]
 80072f0:	f7fe fd96 	bl	8005e20 <_free_r>
 80072f4:	9a01      	ldr	r2, [sp, #4]
 80072f6:	230c      	movs	r3, #12
 80072f8:	6013      	str	r3, [r2, #0]
 80072fa:	89aa      	ldrh	r2, [r5, #12]
 80072fc:	2300      	movs	r3, #0
 80072fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007302:	81aa      	strh	r2, [r5, #12]
 8007304:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007308:	f8c9 3008 	str.w	r3, [r9, #8]
 800730c:	f8c9 3004 	str.w	r3, [r9, #4]
 8007310:	e002      	b.n	8007318 <__ssprint_r+0xf4>
 8007312:	f8c9 4004 	str.w	r4, [r9, #4]
 8007316:	4620      	mov	r0, r4
 8007318:	b003      	add	sp, #12
 800731a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800731e:	6050      	str	r0, [r2, #4]
 8007320:	e7fa      	b.n	8007318 <__ssprint_r+0xf4>
 8007322:	bf00      	nop

08007324 <_svfiprintf_r>:
 8007324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007328:	468a      	mov	sl, r1
 800732a:	8989      	ldrh	r1, [r1, #12]
 800732c:	b0ad      	sub	sp, #180	; 0xb4
 800732e:	0609      	lsls	r1, r1, #24
 8007330:	9007      	str	r0, [sp, #28]
 8007332:	9305      	str	r3, [sp, #20]
 8007334:	d504      	bpl.n	8007340 <_svfiprintf_r+0x1c>
 8007336:	f8da 3010 	ldr.w	r3, [sl, #16]
 800733a:	2b00      	cmp	r3, #0
 800733c:	f000 8422 	beq.w	8007b84 <_svfiprintf_r+0x860>
 8007340:	2300      	movs	r3, #0
 8007342:	f10d 009f 	add.w	r0, sp, #159	; 0x9f
 8007346:	f10d 08a0 	add.w	r8, sp, #160	; 0xa0
 800734a:	a90e      	add	r1, sp, #56	; 0x38
 800734c:	930c      	str	r3, [sp, #48]	; 0x30
 800734e:	932a      	str	r3, [sp, #168]	; 0xa8
 8007350:	9329      	str	r3, [sp, #164]	; 0xa4
 8007352:	9304      	str	r3, [sp, #16]
 8007354:	ebc0 0308 	rsb	r3, r0, r8
 8007358:	9001      	str	r0, [sp, #4]
 800735a:	9128      	str	r1, [sp, #160]	; 0xa0
 800735c:	4617      	mov	r7, r2
 800735e:	460c      	mov	r4, r1
 8007360:	930d      	str	r3, [sp, #52]	; 0x34
 8007362:	783b      	ldrb	r3, [r7, #0]
 8007364:	2b00      	cmp	r3, #0
 8007366:	bf18      	it	ne
 8007368:	2b25      	cmpne	r3, #37	; 0x25
 800736a:	463d      	mov	r5, r7
 800736c:	d016      	beq.n	800739c <_svfiprintf_r+0x78>
 800736e:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8007372:	2b25      	cmp	r3, #37	; 0x25
 8007374:	bf18      	it	ne
 8007376:	2b00      	cmpne	r3, #0
 8007378:	d1f9      	bne.n	800736e <_svfiprintf_r+0x4a>
 800737a:	1bee      	subs	r6, r5, r7
 800737c:	d00e      	beq.n	800739c <_svfiprintf_r+0x78>
 800737e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007380:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8007382:	6027      	str	r7, [r4, #0]
 8007384:	3301      	adds	r3, #1
 8007386:	1992      	adds	r2, r2, r6
 8007388:	2b07      	cmp	r3, #7
 800738a:	6066      	str	r6, [r4, #4]
 800738c:	922a      	str	r2, [sp, #168]	; 0xa8
 800738e:	9329      	str	r3, [sp, #164]	; 0xa4
 8007390:	f300 832a 	bgt.w	80079e8 <_svfiprintf_r+0x6c4>
 8007394:	3408      	adds	r4, #8
 8007396:	9b04      	ldr	r3, [sp, #16]
 8007398:	199b      	adds	r3, r3, r6
 800739a:	9304      	str	r3, [sp, #16]
 800739c:	782b      	ldrb	r3, [r5, #0]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	f000 82c5 	beq.w	800792e <_svfiprintf_r+0x60a>
 80073a4:	2200      	movs	r2, #0
 80073a6:	1c6f      	adds	r7, r5, #1
 80073a8:	4613      	mov	r3, r2
 80073aa:	f88d 20af 	strb.w	r2, [sp, #175]	; 0xaf
 80073ae:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80073b2:	9206      	str	r2, [sp, #24]
 80073b4:	4693      	mov	fp, r2
 80073b6:	f817 2b01 	ldrb.w	r2, [r7], #1
 80073ba:	f1a2 0120 	sub.w	r1, r2, #32
 80073be:	2958      	cmp	r1, #88	; 0x58
 80073c0:	f200 8178 	bhi.w	80076b4 <_svfiprintf_r+0x390>
 80073c4:	e8df f011 	tbh	[pc, r1, lsl #1]
 80073c8:	01760172 	.word	0x01760172
 80073cc:	016f0176 	.word	0x016f0176
 80073d0:	01760176 	.word	0x01760176
 80073d4:	01760176 	.word	0x01760176
 80073d8:	01760176 	.word	0x01760176
 80073dc:	01d800af 	.word	0x01d800af
 80073e0:	00ba0176 	.word	0x00ba0176
 80073e4:	017601da 	.word	0x017601da
 80073e8:	01c401d5 	.word	0x01c401d5
 80073ec:	01c401c4 	.word	0x01c401c4
 80073f0:	01c401c4 	.word	0x01c401c4
 80073f4:	01c401c4 	.word	0x01c401c4
 80073f8:	01c401c4 	.word	0x01c401c4
 80073fc:	01760176 	.word	0x01760176
 8007400:	01760176 	.word	0x01760176
 8007404:	01760176 	.word	0x01760176
 8007408:	01760176 	.word	0x01760176
 800740c:	01760176 	.word	0x01760176
 8007410:	017601a7 	.word	0x017601a7
 8007414:	01760176 	.word	0x01760176
 8007418:	01760176 	.word	0x01760176
 800741c:	01760176 	.word	0x01760176
 8007420:	01760176 	.word	0x01760176
 8007424:	005c0176 	.word	0x005c0176
 8007428:	01760176 	.word	0x01760176
 800742c:	01760176 	.word	0x01760176
 8007430:	00a00176 	.word	0x00a00176
 8007434:	01760176 	.word	0x01760176
 8007438:	0176016a 	.word	0x0176016a
 800743c:	01760176 	.word	0x01760176
 8007440:	01760176 	.word	0x01760176
 8007444:	01760176 	.word	0x01760176
 8007448:	01760176 	.word	0x01760176
 800744c:	01170176 	.word	0x01170176
 8007450:	01760105 	.word	0x01760105
 8007454:	01760176 	.word	0x01760176
 8007458:	01050102 	.word	0x01050102
 800745c:	01760176 	.word	0x01760176
 8007460:	01760059 	.word	0x01760059
 8007464:	005e00d1 	.word	0x005e00d1
 8007468:	005900bd 	.word	0x005900bd
 800746c:	01870176 	.word	0x01870176
 8007470:	00a20176 	.word	0x00a20176
 8007474:	01760176 	.word	0x01760176
 8007478:	00e2      	.short	0x00e2
 800747a:	f04b 0b10 	orr.w	fp, fp, #16
 800747e:	e79a      	b.n	80073b6 <_svfiprintf_r+0x92>
 8007480:	f04b 0b10 	orr.w	fp, fp, #16
 8007484:	f01b 0210 	ands.w	r2, fp, #16
 8007488:	f000 8313 	beq.w	8007ab2 <_svfiprintf_r+0x78e>
 800748c:	9805      	ldr	r0, [sp, #20]
 800748e:	6803      	ldr	r3, [r0, #0]
 8007490:	2200      	movs	r2, #0
 8007492:	1a99      	subs	r1, r3, r2
 8007494:	bf18      	it	ne
 8007496:	2101      	movne	r1, #1
 8007498:	3004      	adds	r0, #4
 800749a:	9005      	str	r0, [sp, #20]
 800749c:	2000      	movs	r0, #0
 800749e:	f88d 00af 	strb.w	r0, [sp, #175]	; 0xaf
 80074a2:	2d00      	cmp	r5, #0
 80074a4:	bfa8      	it	ge
 80074a6:	f02b 0b80 	bicge.w	fp, fp, #128	; 0x80
 80074aa:	2d00      	cmp	r5, #0
 80074ac:	bf18      	it	ne
 80074ae:	f041 0101 	orrne.w	r1, r1, #1
 80074b2:	2900      	cmp	r1, #0
 80074b4:	f000 8228 	beq.w	8007908 <_svfiprintf_r+0x5e4>
 80074b8:	2a01      	cmp	r2, #1
 80074ba:	f000 82cf 	beq.w	8007a5c <_svfiprintf_r+0x738>
 80074be:	2a02      	cmp	r2, #2
 80074c0:	bf18      	it	ne
 80074c2:	4642      	movne	r2, r8
 80074c4:	d101      	bne.n	80074ca <_svfiprintf_r+0x1a6>
 80074c6:	e2b9      	b.n	8007a3c <_svfiprintf_r+0x718>
 80074c8:	4602      	mov	r2, r0
 80074ca:	f003 0107 	and.w	r1, r3, #7
 80074ce:	3130      	adds	r1, #48	; 0x30
 80074d0:	1e50      	subs	r0, r2, #1
 80074d2:	08db      	lsrs	r3, r3, #3
 80074d4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80074d8:	d1f6      	bne.n	80074c8 <_svfiprintf_r+0x1a4>
 80074da:	f01b 0f01 	tst.w	fp, #1
 80074de:	9009      	str	r0, [sp, #36]	; 0x24
 80074e0:	f040 831a 	bne.w	8007b18 <_svfiprintf_r+0x7f4>
 80074e4:	ebc0 0308 	rsb	r3, r0, r8
 80074e8:	9303      	str	r3, [sp, #12]
 80074ea:	9508      	str	r5, [sp, #32]
 80074ec:	9803      	ldr	r0, [sp, #12]
 80074ee:	9908      	ldr	r1, [sp, #32]
 80074f0:	f89d 30af 	ldrb.w	r3, [sp, #175]	; 0xaf
 80074f4:	4288      	cmp	r0, r1
 80074f6:	bfb8      	it	lt
 80074f8:	4608      	movlt	r0, r1
 80074fa:	9002      	str	r0, [sp, #8]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	f000 808b 	beq.w	8007618 <_svfiprintf_r+0x2f4>
 8007502:	3001      	adds	r0, #1
 8007504:	9002      	str	r0, [sp, #8]
 8007506:	e087      	b.n	8007618 <_svfiprintf_r+0x2f4>
 8007508:	f04b 0b10 	orr.w	fp, fp, #16
 800750c:	f01b 0f10 	tst.w	fp, #16
 8007510:	f000 82c1 	beq.w	8007a96 <_svfiprintf_r+0x772>
 8007514:	9805      	ldr	r0, [sp, #20]
 8007516:	6803      	ldr	r3, [r0, #0]
 8007518:	2201      	movs	r2, #1
 800751a:	1c19      	adds	r1, r3, #0
 800751c:	bf18      	it	ne
 800751e:	2101      	movne	r1, #1
 8007520:	3004      	adds	r0, #4
 8007522:	9005      	str	r0, [sp, #20]
 8007524:	e7ba      	b.n	800749c <_svfiprintf_r+0x178>
 8007526:	9805      	ldr	r0, [sp, #20]
 8007528:	9905      	ldr	r1, [sp, #20]
 800752a:	6800      	ldr	r0, [r0, #0]
 800752c:	1d0a      	adds	r2, r1, #4
 800752e:	2800      	cmp	r0, #0
 8007530:	9006      	str	r0, [sp, #24]
 8007532:	f280 82e0 	bge.w	8007af6 <_svfiprintf_r+0x7d2>
 8007536:	4240      	negs	r0, r0
 8007538:	9006      	str	r0, [sp, #24]
 800753a:	9205      	str	r2, [sp, #20]
 800753c:	f04b 0b04 	orr.w	fp, fp, #4
 8007540:	e739      	b.n	80073b6 <_svfiprintf_r+0x92>
 8007542:	9b05      	ldr	r3, [sp, #20]
 8007544:	9905      	ldr	r1, [sp, #20]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	2230      	movs	r2, #48	; 0x30
 800754a:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
 800754e:	2278      	movs	r2, #120	; 0x78
 8007550:	3104      	adds	r1, #4
 8007552:	f88d 20ad 	strb.w	r2, [sp, #173]	; 0xad
 8007556:	4aaf      	ldr	r2, [pc, #700]	; (8007814 <_svfiprintf_r+0x4f0>)
 8007558:	9105      	str	r1, [sp, #20]
 800755a:	1c19      	adds	r1, r3, #0
 800755c:	bf18      	it	ne
 800755e:	2101      	movne	r1, #1
 8007560:	920c      	str	r2, [sp, #48]	; 0x30
 8007562:	f04b 0b02 	orr.w	fp, fp, #2
 8007566:	2202      	movs	r2, #2
 8007568:	e798      	b.n	800749c <_svfiprintf_r+0x178>
 800756a:	f01b 0f10 	tst.w	fp, #16
 800756e:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 8007572:	f040 82dd 	bne.w	8007b30 <_svfiprintf_r+0x80c>
 8007576:	f01b 0f40 	tst.w	fp, #64	; 0x40
 800757a:	f000 82fb 	beq.w	8007b74 <_svfiprintf_r+0x850>
 800757e:	9a05      	ldr	r2, [sp, #20]
 8007580:	9804      	ldr	r0, [sp, #16]
 8007582:	6813      	ldr	r3, [r2, #0]
 8007584:	3204      	adds	r2, #4
 8007586:	9205      	str	r2, [sp, #20]
 8007588:	8018      	strh	r0, [r3, #0]
 800758a:	e6ea      	b.n	8007362 <_svfiprintf_r+0x3e>
 800758c:	49a1      	ldr	r1, [pc, #644]	; (8007814 <_svfiprintf_r+0x4f0>)
 800758e:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 8007592:	910c      	str	r1, [sp, #48]	; 0x30
 8007594:	f01b 0f10 	tst.w	fp, #16
 8007598:	d103      	bne.n	80075a2 <_svfiprintf_r+0x27e>
 800759a:	f01b 0f40 	tst.w	fp, #64	; 0x40
 800759e:	f040 82d3 	bne.w	8007b48 <_svfiprintf_r+0x824>
 80075a2:	9805      	ldr	r0, [sp, #20]
 80075a4:	6803      	ldr	r3, [r0, #0]
 80075a6:	3004      	adds	r0, #4
 80075a8:	9005      	str	r0, [sp, #20]
 80075aa:	1c19      	adds	r1, r3, #0
 80075ac:	bf18      	it	ne
 80075ae:	2101      	movne	r1, #1
 80075b0:	ea1b 0f01 	tst.w	fp, r1
 80075b4:	f000 8287 	beq.w	8007ac6 <_svfiprintf_r+0x7a2>
 80075b8:	2130      	movs	r1, #48	; 0x30
 80075ba:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
 80075be:	f88d 20ad 	strb.w	r2, [sp, #173]	; 0xad
 80075c2:	f04b 0b02 	orr.w	fp, fp, #2
 80075c6:	2101      	movs	r1, #1
 80075c8:	2202      	movs	r2, #2
 80075ca:	e767      	b.n	800749c <_svfiprintf_r+0x178>
 80075cc:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
 80075d0:	e6f1      	b.n	80073b6 <_svfiprintf_r+0x92>
 80075d2:	f01b 0f10 	tst.w	fp, #16
 80075d6:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 80075da:	f000 80a4 	beq.w	8007726 <_svfiprintf_r+0x402>
 80075de:	9805      	ldr	r0, [sp, #20]
 80075e0:	6803      	ldr	r3, [r0, #0]
 80075e2:	3004      	adds	r0, #4
 80075e4:	9005      	str	r0, [sp, #20]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	f2c0 80a9 	blt.w	800773e <_svfiprintf_r+0x41a>
 80075ec:	bf0c      	ite	eq
 80075ee:	2100      	moveq	r1, #0
 80075f0:	2101      	movne	r1, #1
 80075f2:	2201      	movs	r2, #1
 80075f4:	e755      	b.n	80074a2 <_svfiprintf_r+0x17e>
 80075f6:	9b05      	ldr	r3, [sp, #20]
 80075f8:	9905      	ldr	r1, [sp, #20]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	2001      	movs	r0, #1
 80075fe:	2200      	movs	r2, #0
 8007600:	3104      	adds	r1, #4
 8007602:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
 8007606:	ab1e      	add	r3, sp, #120	; 0x78
 8007608:	f88d 20af 	strb.w	r2, [sp, #175]	; 0xaf
 800760c:	9002      	str	r0, [sp, #8]
 800760e:	9105      	str	r1, [sp, #20]
 8007610:	9003      	str	r0, [sp, #12]
 8007612:	9309      	str	r3, [sp, #36]	; 0x24
 8007614:	2300      	movs	r3, #0
 8007616:	9308      	str	r3, [sp, #32]
 8007618:	f01b 0302 	ands.w	r3, fp, #2
 800761c:	930a      	str	r3, [sp, #40]	; 0x28
 800761e:	d002      	beq.n	8007626 <_svfiprintf_r+0x302>
 8007620:	9b02      	ldr	r3, [sp, #8]
 8007622:	3302      	adds	r3, #2
 8007624:	9302      	str	r3, [sp, #8]
 8007626:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
 800762a:	930b      	str	r3, [sp, #44]	; 0x2c
 800762c:	f040 80c1 	bne.w	80077b2 <_svfiprintf_r+0x48e>
 8007630:	9b06      	ldr	r3, [sp, #24]
 8007632:	9802      	ldr	r0, [sp, #8]
 8007634:	1a1d      	subs	r5, r3, r0
 8007636:	2d00      	cmp	r5, #0
 8007638:	f340 80bb 	ble.w	80077b2 <_svfiprintf_r+0x48e>
 800763c:	2d10      	cmp	r5, #16
 800763e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8007640:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007642:	4e75      	ldr	r6, [pc, #468]	; (8007818 <_svfiprintf_r+0x4f4>)
 8007644:	dd1f      	ble.n	8007686 <_svfiprintf_r+0x362>
 8007646:	4621      	mov	r1, r4
 8007648:	f04f 0910 	mov.w	r9, #16
 800764c:	9c07      	ldr	r4, [sp, #28]
 800764e:	e002      	b.n	8007656 <_svfiprintf_r+0x332>
 8007650:	3d10      	subs	r5, #16
 8007652:	2d10      	cmp	r5, #16
 8007654:	dd16      	ble.n	8007684 <_svfiprintf_r+0x360>
 8007656:	3301      	adds	r3, #1
 8007658:	3210      	adds	r2, #16
 800765a:	e881 0240 	stmia.w	r1, {r6, r9}
 800765e:	3108      	adds	r1, #8
 8007660:	2b07      	cmp	r3, #7
 8007662:	922a      	str	r2, [sp, #168]	; 0xa8
 8007664:	9329      	str	r3, [sp, #164]	; 0xa4
 8007666:	ddf3      	ble.n	8007650 <_svfiprintf_r+0x32c>
 8007668:	4620      	mov	r0, r4
 800766a:	4651      	mov	r1, sl
 800766c:	4642      	mov	r2, r8
 800766e:	f7ff fdd9 	bl	8007224 <__ssprint_r>
 8007672:	2800      	cmp	r0, #0
 8007674:	f040 8162 	bne.w	800793c <_svfiprintf_r+0x618>
 8007678:	3d10      	subs	r5, #16
 800767a:	2d10      	cmp	r5, #16
 800767c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800767e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007680:	a90e      	add	r1, sp, #56	; 0x38
 8007682:	dce8      	bgt.n	8007656 <_svfiprintf_r+0x332>
 8007684:	460c      	mov	r4, r1
 8007686:	3301      	adds	r3, #1
 8007688:	1952      	adds	r2, r2, r5
 800768a:	2b07      	cmp	r3, #7
 800768c:	6026      	str	r6, [r4, #0]
 800768e:	6065      	str	r5, [r4, #4]
 8007690:	922a      	str	r2, [sp, #168]	; 0xa8
 8007692:	9329      	str	r3, [sp, #164]	; 0xa4
 8007694:	f300 8219 	bgt.w	8007aca <_svfiprintf_r+0x7a6>
 8007698:	3408      	adds	r4, #8
 800769a:	e08c      	b.n	80077b6 <_svfiprintf_r+0x492>
 800769c:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 80076a0:	4b5e      	ldr	r3, [pc, #376]	; (800781c <_svfiprintf_r+0x4f8>)
 80076a2:	930c      	str	r3, [sp, #48]	; 0x30
 80076a4:	e776      	b.n	8007594 <_svfiprintf_r+0x270>
 80076a6:	f04b 0b01 	orr.w	fp, fp, #1
 80076aa:	e684      	b.n	80073b6 <_svfiprintf_r+0x92>
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	bf08      	it	eq
 80076b0:	2320      	moveq	r3, #32
 80076b2:	e680      	b.n	80073b6 <_svfiprintf_r+0x92>
 80076b4:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 80076b8:	2a00      	cmp	r2, #0
 80076ba:	f000 8138 	beq.w	800792e <_svfiprintf_r+0x60a>
 80076be:	2301      	movs	r3, #1
 80076c0:	9302      	str	r3, [sp, #8]
 80076c2:	2300      	movs	r3, #0
 80076c4:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 80076c8:	2301      	movs	r3, #1
 80076ca:	9303      	str	r3, [sp, #12]
 80076cc:	ab1e      	add	r3, sp, #120	; 0x78
 80076ce:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 80076d2:	9309      	str	r3, [sp, #36]	; 0x24
 80076d4:	e79e      	b.n	8007614 <_svfiprintf_r+0x2f0>
 80076d6:	9b05      	ldr	r3, [sp, #20]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	9309      	str	r3, [sp, #36]	; 0x24
 80076dc:	9b05      	ldr	r3, [sp, #20]
 80076de:	3304      	adds	r3, #4
 80076e0:	9305      	str	r3, [sp, #20]
 80076e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076e4:	2600      	movs	r6, #0
 80076e6:	f88d 60af 	strb.w	r6, [sp, #175]	; 0xaf
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	f000 8259 	beq.w	8007ba2 <_svfiprintf_r+0x87e>
 80076f0:	2d00      	cmp	r5, #0
 80076f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80076f4:	f2c0 822d 	blt.w	8007b52 <_svfiprintf_r+0x82e>
 80076f8:	4631      	mov	r1, r6
 80076fa:	462a      	mov	r2, r5
 80076fc:	f7fe ff50 	bl	80065a0 <memchr>
 8007700:	2800      	cmp	r0, #0
 8007702:	f000 8258 	beq.w	8007bb6 <_svfiprintf_r+0x892>
 8007706:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007708:	9608      	str	r6, [sp, #32]
 800770a:	1ac0      	subs	r0, r0, r3
 800770c:	42a8      	cmp	r0, r5
 800770e:	9003      	str	r0, [sp, #12]
 8007710:	bfc8      	it	gt
 8007712:	9503      	strgt	r5, [sp, #12]
 8007714:	e6ea      	b.n	80074ec <_svfiprintf_r+0x1c8>
 8007716:	f04b 0b10 	orr.w	fp, fp, #16
 800771a:	f01b 0f10 	tst.w	fp, #16
 800771e:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 8007722:	f47f af5c 	bne.w	80075de <_svfiprintf_r+0x2ba>
 8007726:	f01b 0f40 	tst.w	fp, #64	; 0x40
 800772a:	f000 8208 	beq.w	8007b3e <_svfiprintf_r+0x81a>
 800772e:	9905      	ldr	r1, [sp, #20]
 8007730:	f9b1 3000 	ldrsh.w	r3, [r1]
 8007734:	3104      	adds	r1, #4
 8007736:	2b00      	cmp	r3, #0
 8007738:	9105      	str	r1, [sp, #20]
 800773a:	f6bf af57 	bge.w	80075ec <_svfiprintf_r+0x2c8>
 800773e:	425b      	negs	r3, r3
 8007740:	222d      	movs	r2, #45	; 0x2d
 8007742:	1c19      	adds	r1, r3, #0
 8007744:	f88d 20af 	strb.w	r2, [sp, #175]	; 0xaf
 8007748:	bf18      	it	ne
 800774a:	2101      	movne	r1, #1
 800774c:	2201      	movs	r2, #1
 800774e:	e6a8      	b.n	80074a2 <_svfiprintf_r+0x17e>
 8007750:	4638      	mov	r0, r7
 8007752:	2100      	movs	r1, #0
 8007754:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 8007758:	f810 2b01 	ldrb.w	r2, [r0], #1
 800775c:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8007760:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8007764:	2e09      	cmp	r6, #9
 8007766:	eb07 0141 	add.w	r1, r7, r1, lsl #1
 800776a:	4607      	mov	r7, r0
 800776c:	d9f2      	bls.n	8007754 <_svfiprintf_r+0x430>
 800776e:	9106      	str	r1, [sp, #24]
 8007770:	e623      	b.n	80073ba <_svfiprintf_r+0x96>
 8007772:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 8007776:	e61e      	b.n	80073b6 <_svfiprintf_r+0x92>
 8007778:	232b      	movs	r3, #43	; 0x2b
 800777a:	e61c      	b.n	80073b6 <_svfiprintf_r+0x92>
 800777c:	f817 2b01 	ldrb.w	r2, [r7], #1
 8007780:	2a2a      	cmp	r2, #42	; 0x2a
 8007782:	f000 81ae 	beq.w	8007ae2 <_svfiprintf_r+0x7be>
 8007786:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800778a:	2500      	movs	r5, #0
 800778c:	2909      	cmp	r1, #9
 800778e:	f63f ae14 	bhi.w	80073ba <_svfiprintf_r+0x96>
 8007792:	4638      	mov	r0, r7
 8007794:	2500      	movs	r5, #0
 8007796:	f810 2b01 	ldrb.w	r2, [r0], #1
 800779a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800779e:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 80077a2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80077a6:	2909      	cmp	r1, #9
 80077a8:	4607      	mov	r7, r0
 80077aa:	d9f4      	bls.n	8007796 <_svfiprintf_r+0x472>
 80077ac:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 80077b0:	e603      	b.n	80073ba <_svfiprintf_r+0x96>
 80077b2:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80077b4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80077b6:	f89d 10af 	ldrb.w	r1, [sp, #175]	; 0xaf
 80077ba:	b161      	cbz	r1, 80077d6 <_svfiprintf_r+0x4b2>
 80077bc:	3301      	adds	r3, #1
 80077be:	f10d 01af 	add.w	r1, sp, #175	; 0xaf
 80077c2:	3201      	adds	r2, #1
 80077c4:	6021      	str	r1, [r4, #0]
 80077c6:	2101      	movs	r1, #1
 80077c8:	2b07      	cmp	r3, #7
 80077ca:	6061      	str	r1, [r4, #4]
 80077cc:	922a      	str	r2, [sp, #168]	; 0xa8
 80077ce:	9329      	str	r3, [sp, #164]	; 0xa4
 80077d0:	f300 811e 	bgt.w	8007a10 <_svfiprintf_r+0x6ec>
 80077d4:	3408      	adds	r4, #8
 80077d6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80077d8:	b159      	cbz	r1, 80077f2 <_svfiprintf_r+0x4ce>
 80077da:	3301      	adds	r3, #1
 80077dc:	a92b      	add	r1, sp, #172	; 0xac
 80077de:	3202      	adds	r2, #2
 80077e0:	6021      	str	r1, [r4, #0]
 80077e2:	2102      	movs	r1, #2
 80077e4:	2b07      	cmp	r3, #7
 80077e6:	6061      	str	r1, [r4, #4]
 80077e8:	922a      	str	r2, [sp, #168]	; 0xa8
 80077ea:	9329      	str	r3, [sp, #164]	; 0xa4
 80077ec:	f300 811b 	bgt.w	8007a26 <_svfiprintf_r+0x702>
 80077f0:	3408      	adds	r4, #8
 80077f2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80077f4:	2880      	cmp	r0, #128	; 0x80
 80077f6:	f000 80ae 	beq.w	8007956 <_svfiprintf_r+0x632>
 80077fa:	9808      	ldr	r0, [sp, #32]
 80077fc:	9903      	ldr	r1, [sp, #12]
 80077fe:	1a45      	subs	r5, r0, r1
 8007800:	2d00      	cmp	r5, #0
 8007802:	dd33      	ble.n	800786c <_svfiprintf_r+0x548>
 8007804:	2d10      	cmp	r5, #16
 8007806:	4e06      	ldr	r6, [pc, #24]	; (8007820 <_svfiprintf_r+0x4fc>)
 8007808:	dd26      	ble.n	8007858 <_svfiprintf_r+0x534>
 800780a:	4621      	mov	r1, r4
 800780c:	f04f 0910 	mov.w	r9, #16
 8007810:	9c07      	ldr	r4, [sp, #28]
 8007812:	e00a      	b.n	800782a <_svfiprintf_r+0x506>
 8007814:	080090f0 	.word	0x080090f0
 8007818:	08008f78 	.word	0x08008f78
 800781c:	080090dc 	.word	0x080090dc
 8007820:	08008f88 	.word	0x08008f88
 8007824:	3d10      	subs	r5, #16
 8007826:	2d10      	cmp	r5, #16
 8007828:	dd15      	ble.n	8007856 <_svfiprintf_r+0x532>
 800782a:	3301      	adds	r3, #1
 800782c:	3210      	adds	r2, #16
 800782e:	e881 0240 	stmia.w	r1, {r6, r9}
 8007832:	3108      	adds	r1, #8
 8007834:	2b07      	cmp	r3, #7
 8007836:	922a      	str	r2, [sp, #168]	; 0xa8
 8007838:	9329      	str	r3, [sp, #164]	; 0xa4
 800783a:	ddf3      	ble.n	8007824 <_svfiprintf_r+0x500>
 800783c:	4620      	mov	r0, r4
 800783e:	4651      	mov	r1, sl
 8007840:	4642      	mov	r2, r8
 8007842:	f7ff fcef 	bl	8007224 <__ssprint_r>
 8007846:	2800      	cmp	r0, #0
 8007848:	d178      	bne.n	800793c <_svfiprintf_r+0x618>
 800784a:	3d10      	subs	r5, #16
 800784c:	2d10      	cmp	r5, #16
 800784e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8007850:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007852:	a90e      	add	r1, sp, #56	; 0x38
 8007854:	dce9      	bgt.n	800782a <_svfiprintf_r+0x506>
 8007856:	460c      	mov	r4, r1
 8007858:	3301      	adds	r3, #1
 800785a:	1952      	adds	r2, r2, r5
 800785c:	2b07      	cmp	r3, #7
 800785e:	6026      	str	r6, [r4, #0]
 8007860:	6065      	str	r5, [r4, #4]
 8007862:	922a      	str	r2, [sp, #168]	; 0xa8
 8007864:	9329      	str	r3, [sp, #164]	; 0xa4
 8007866:	f300 80c8 	bgt.w	80079fa <_svfiprintf_r+0x6d6>
 800786a:	3408      	adds	r4, #8
 800786c:	9903      	ldr	r1, [sp, #12]
 800786e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007870:	3301      	adds	r3, #1
 8007872:	1852      	adds	r2, r2, r1
 8007874:	2b07      	cmp	r3, #7
 8007876:	e884 0003 	stmia.w	r4, {r0, r1}
 800787a:	922a      	str	r2, [sp, #168]	; 0xa8
 800787c:	9329      	str	r3, [sp, #164]	; 0xa4
 800787e:	bfd8      	it	le
 8007880:	f104 0108 	addle.w	r1, r4, #8
 8007884:	f300 809a 	bgt.w	80079bc <_svfiprintf_r+0x698>
 8007888:	f01b 0f04 	tst.w	fp, #4
 800788c:	d02e      	beq.n	80078ec <_svfiprintf_r+0x5c8>
 800788e:	9b06      	ldr	r3, [sp, #24]
 8007890:	9802      	ldr	r0, [sp, #8]
 8007892:	1a1d      	subs	r5, r3, r0
 8007894:	2d00      	cmp	r5, #0
 8007896:	dd29      	ble.n	80078ec <_svfiprintf_r+0x5c8>
 8007898:	2d10      	cmp	r5, #16
 800789a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800789c:	4e97      	ldr	r6, [pc, #604]	; (8007afc <_svfiprintf_r+0x7d8>)
 800789e:	dd1c      	ble.n	80078da <_svfiprintf_r+0x5b6>
 80078a0:	2410      	movs	r4, #16
 80078a2:	f8dd 901c 	ldr.w	r9, [sp, #28]
 80078a6:	e002      	b.n	80078ae <_svfiprintf_r+0x58a>
 80078a8:	3d10      	subs	r5, #16
 80078aa:	2d10      	cmp	r5, #16
 80078ac:	dd15      	ble.n	80078da <_svfiprintf_r+0x5b6>
 80078ae:	3301      	adds	r3, #1
 80078b0:	3210      	adds	r2, #16
 80078b2:	600e      	str	r6, [r1, #0]
 80078b4:	604c      	str	r4, [r1, #4]
 80078b6:	3108      	adds	r1, #8
 80078b8:	2b07      	cmp	r3, #7
 80078ba:	922a      	str	r2, [sp, #168]	; 0xa8
 80078bc:	9329      	str	r3, [sp, #164]	; 0xa4
 80078be:	ddf3      	ble.n	80078a8 <_svfiprintf_r+0x584>
 80078c0:	4648      	mov	r0, r9
 80078c2:	4651      	mov	r1, sl
 80078c4:	4642      	mov	r2, r8
 80078c6:	f7ff fcad 	bl	8007224 <__ssprint_r>
 80078ca:	2800      	cmp	r0, #0
 80078cc:	d136      	bne.n	800793c <_svfiprintf_r+0x618>
 80078ce:	3d10      	subs	r5, #16
 80078d0:	2d10      	cmp	r5, #16
 80078d2:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80078d4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80078d6:	a90e      	add	r1, sp, #56	; 0x38
 80078d8:	dce9      	bgt.n	80078ae <_svfiprintf_r+0x58a>
 80078da:	3301      	adds	r3, #1
 80078dc:	18aa      	adds	r2, r5, r2
 80078de:	2b07      	cmp	r3, #7
 80078e0:	600e      	str	r6, [r1, #0]
 80078e2:	604d      	str	r5, [r1, #4]
 80078e4:	922a      	str	r2, [sp, #168]	; 0xa8
 80078e6:	9329      	str	r3, [sp, #164]	; 0xa4
 80078e8:	f300 810c 	bgt.w	8007b04 <_svfiprintf_r+0x7e0>
 80078ec:	9b04      	ldr	r3, [sp, #16]
 80078ee:	9902      	ldr	r1, [sp, #8]
 80078f0:	9806      	ldr	r0, [sp, #24]
 80078f2:	4281      	cmp	r1, r0
 80078f4:	bfac      	ite	ge
 80078f6:	185b      	addge	r3, r3, r1
 80078f8:	181b      	addlt	r3, r3, r0
 80078fa:	9304      	str	r3, [sp, #16]
 80078fc:	2a00      	cmp	r2, #0
 80078fe:	d167      	bne.n	80079d0 <_svfiprintf_r+0x6ac>
 8007900:	2300      	movs	r3, #0
 8007902:	9329      	str	r3, [sp, #164]	; 0xa4
 8007904:	ac0e      	add	r4, sp, #56	; 0x38
 8007906:	e52c      	b.n	8007362 <_svfiprintf_r+0x3e>
 8007908:	2a00      	cmp	r2, #0
 800790a:	d169      	bne.n	80079e0 <_svfiprintf_r+0x6bc>
 800790c:	f01b 0f01 	tst.w	fp, #1
 8007910:	bf04      	itt	eq
 8007912:	9203      	streq	r2, [sp, #12]
 8007914:	f8cd 8024 	streq.w	r8, [sp, #36]	; 0x24
 8007918:	f43f ade7 	beq.w	80074ea <_svfiprintf_r+0x1c6>
 800791c:	2330      	movs	r3, #48	; 0x30
 800791e:	f88d 309f 	strb.w	r3, [sp, #159]	; 0x9f
 8007922:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007924:	9303      	str	r3, [sp, #12]
 8007926:	f10d 039f 	add.w	r3, sp, #159	; 0x9f
 800792a:	9309      	str	r3, [sp, #36]	; 0x24
 800792c:	e5dd      	b.n	80074ea <_svfiprintf_r+0x1c6>
 800792e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8007930:	b123      	cbz	r3, 800793c <_svfiprintf_r+0x618>
 8007932:	9807      	ldr	r0, [sp, #28]
 8007934:	4651      	mov	r1, sl
 8007936:	aa28      	add	r2, sp, #160	; 0xa0
 8007938:	f7ff fc74 	bl	8007224 <__ssprint_r>
 800793c:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8007940:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007944:	9b04      	ldr	r3, [sp, #16]
 8007946:	bf18      	it	ne
 8007948:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 800794c:	9304      	str	r3, [sp, #16]
 800794e:	9804      	ldr	r0, [sp, #16]
 8007950:	b02d      	add	sp, #180	; 0xb4
 8007952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007956:	9906      	ldr	r1, [sp, #24]
 8007958:	9802      	ldr	r0, [sp, #8]
 800795a:	1a0d      	subs	r5, r1, r0
 800795c:	2d00      	cmp	r5, #0
 800795e:	f77f af4c 	ble.w	80077fa <_svfiprintf_r+0x4d6>
 8007962:	2d10      	cmp	r5, #16
 8007964:	4e66      	ldr	r6, [pc, #408]	; (8007b00 <_svfiprintf_r+0x7dc>)
 8007966:	dd1e      	ble.n	80079a6 <_svfiprintf_r+0x682>
 8007968:	4621      	mov	r1, r4
 800796a:	f04f 0910 	mov.w	r9, #16
 800796e:	9c07      	ldr	r4, [sp, #28]
 8007970:	e002      	b.n	8007978 <_svfiprintf_r+0x654>
 8007972:	3d10      	subs	r5, #16
 8007974:	2d10      	cmp	r5, #16
 8007976:	dd15      	ble.n	80079a4 <_svfiprintf_r+0x680>
 8007978:	3301      	adds	r3, #1
 800797a:	3210      	adds	r2, #16
 800797c:	e881 0240 	stmia.w	r1, {r6, r9}
 8007980:	3108      	adds	r1, #8
 8007982:	2b07      	cmp	r3, #7
 8007984:	922a      	str	r2, [sp, #168]	; 0xa8
 8007986:	9329      	str	r3, [sp, #164]	; 0xa4
 8007988:	ddf3      	ble.n	8007972 <_svfiprintf_r+0x64e>
 800798a:	4620      	mov	r0, r4
 800798c:	4651      	mov	r1, sl
 800798e:	4642      	mov	r2, r8
 8007990:	f7ff fc48 	bl	8007224 <__ssprint_r>
 8007994:	2800      	cmp	r0, #0
 8007996:	d1d1      	bne.n	800793c <_svfiprintf_r+0x618>
 8007998:	3d10      	subs	r5, #16
 800799a:	2d10      	cmp	r5, #16
 800799c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800799e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80079a0:	a90e      	add	r1, sp, #56	; 0x38
 80079a2:	dce9      	bgt.n	8007978 <_svfiprintf_r+0x654>
 80079a4:	460c      	mov	r4, r1
 80079a6:	3301      	adds	r3, #1
 80079a8:	1952      	adds	r2, r2, r5
 80079aa:	2b07      	cmp	r3, #7
 80079ac:	6026      	str	r6, [r4, #0]
 80079ae:	6065      	str	r5, [r4, #4]
 80079b0:	922a      	str	r2, [sp, #168]	; 0xa8
 80079b2:	9329      	str	r3, [sp, #164]	; 0xa4
 80079b4:	f300 80d2 	bgt.w	8007b5c <_svfiprintf_r+0x838>
 80079b8:	3408      	adds	r4, #8
 80079ba:	e71e      	b.n	80077fa <_svfiprintf_r+0x4d6>
 80079bc:	9807      	ldr	r0, [sp, #28]
 80079be:	4651      	mov	r1, sl
 80079c0:	4642      	mov	r2, r8
 80079c2:	f7ff fc2f 	bl	8007224 <__ssprint_r>
 80079c6:	2800      	cmp	r0, #0
 80079c8:	d1b8      	bne.n	800793c <_svfiprintf_r+0x618>
 80079ca:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80079cc:	a90e      	add	r1, sp, #56	; 0x38
 80079ce:	e75b      	b.n	8007888 <_svfiprintf_r+0x564>
 80079d0:	9807      	ldr	r0, [sp, #28]
 80079d2:	4651      	mov	r1, sl
 80079d4:	4642      	mov	r2, r8
 80079d6:	f7ff fc25 	bl	8007224 <__ssprint_r>
 80079da:	2800      	cmp	r0, #0
 80079dc:	d090      	beq.n	8007900 <_svfiprintf_r+0x5dc>
 80079de:	e7ad      	b.n	800793c <_svfiprintf_r+0x618>
 80079e0:	9103      	str	r1, [sp, #12]
 80079e2:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 80079e6:	e580      	b.n	80074ea <_svfiprintf_r+0x1c6>
 80079e8:	9807      	ldr	r0, [sp, #28]
 80079ea:	4651      	mov	r1, sl
 80079ec:	4642      	mov	r2, r8
 80079ee:	f7ff fc19 	bl	8007224 <__ssprint_r>
 80079f2:	2800      	cmp	r0, #0
 80079f4:	d1a2      	bne.n	800793c <_svfiprintf_r+0x618>
 80079f6:	ac0e      	add	r4, sp, #56	; 0x38
 80079f8:	e4cd      	b.n	8007396 <_svfiprintf_r+0x72>
 80079fa:	9807      	ldr	r0, [sp, #28]
 80079fc:	4651      	mov	r1, sl
 80079fe:	4642      	mov	r2, r8
 8007a00:	f7ff fc10 	bl	8007224 <__ssprint_r>
 8007a04:	2800      	cmp	r0, #0
 8007a06:	d199      	bne.n	800793c <_svfiprintf_r+0x618>
 8007a08:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8007a0a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007a0c:	ac0e      	add	r4, sp, #56	; 0x38
 8007a0e:	e72d      	b.n	800786c <_svfiprintf_r+0x548>
 8007a10:	9807      	ldr	r0, [sp, #28]
 8007a12:	4651      	mov	r1, sl
 8007a14:	4642      	mov	r2, r8
 8007a16:	f7ff fc05 	bl	8007224 <__ssprint_r>
 8007a1a:	2800      	cmp	r0, #0
 8007a1c:	d18e      	bne.n	800793c <_svfiprintf_r+0x618>
 8007a1e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8007a20:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007a22:	ac0e      	add	r4, sp, #56	; 0x38
 8007a24:	e6d7      	b.n	80077d6 <_svfiprintf_r+0x4b2>
 8007a26:	9807      	ldr	r0, [sp, #28]
 8007a28:	4651      	mov	r1, sl
 8007a2a:	4642      	mov	r2, r8
 8007a2c:	f7ff fbfa 	bl	8007224 <__ssprint_r>
 8007a30:	2800      	cmp	r0, #0
 8007a32:	d183      	bne.n	800793c <_svfiprintf_r+0x618>
 8007a34:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8007a36:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007a38:	ac0e      	add	r4, sp, #56	; 0x38
 8007a3a:	e6da      	b.n	80077f2 <_svfiprintf_r+0x4ce>
 8007a3c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007a3e:	f10d 029f 	add.w	r2, sp, #159	; 0x9f
 8007a42:	f003 000f 	and.w	r0, r3, #15
 8007a46:	4611      	mov	r1, r2
 8007a48:	5c30      	ldrb	r0, [r6, r0]
 8007a4a:	3a01      	subs	r2, #1
 8007a4c:	091b      	lsrs	r3, r3, #4
 8007a4e:	7008      	strb	r0, [r1, #0]
 8007a50:	d1f7      	bne.n	8007a42 <_svfiprintf_r+0x71e>
 8007a52:	ebc1 0308 	rsb	r3, r1, r8
 8007a56:	9109      	str	r1, [sp, #36]	; 0x24
 8007a58:	9303      	str	r3, [sp, #12]
 8007a5a:	e546      	b.n	80074ea <_svfiprintf_r+0x1c6>
 8007a5c:	2b09      	cmp	r3, #9
 8007a5e:	bf82      	ittt	hi
 8007a60:	f64c 46cd 	movwhi	r6, #52429	; 0xcccd
 8007a64:	f10d 019f 	addhi.w	r1, sp, #159	; 0x9f
 8007a68:	f6cc 46cc 	movthi	r6, #52428	; 0xcccc
 8007a6c:	d801      	bhi.n	8007a72 <_svfiprintf_r+0x74e>
 8007a6e:	3330      	adds	r3, #48	; 0x30
 8007a70:	e755      	b.n	800791e <_svfiprintf_r+0x5fa>
 8007a72:	fba6 0203 	umull	r0, r2, r6, r3
 8007a76:	08d2      	lsrs	r2, r2, #3
 8007a78:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
 8007a7c:	eba3 0c4c 	sub.w	ip, r3, ip, lsl #1
 8007a80:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8007a84:	4608      	mov	r0, r1
 8007a86:	f881 c000 	strb.w	ip, [r1]
 8007a8a:	4613      	mov	r3, r2
 8007a8c:	3901      	subs	r1, #1
 8007a8e:	2a00      	cmp	r2, #0
 8007a90:	d1ef      	bne.n	8007a72 <_svfiprintf_r+0x74e>
 8007a92:	9009      	str	r0, [sp, #36]	; 0x24
 8007a94:	e526      	b.n	80074e4 <_svfiprintf_r+0x1c0>
 8007a96:	9905      	ldr	r1, [sp, #20]
 8007a98:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8007a9c:	bf14      	ite	ne
 8007a9e:	880b      	ldrhne	r3, [r1, #0]
 8007aa0:	680b      	ldreq	r3, [r1, #0]
 8007aa2:	2201      	movs	r2, #1
 8007aa4:	9805      	ldr	r0, [sp, #20]
 8007aa6:	1c19      	adds	r1, r3, #0
 8007aa8:	bf18      	it	ne
 8007aaa:	2101      	movne	r1, #1
 8007aac:	3004      	adds	r0, #4
 8007aae:	9005      	str	r0, [sp, #20]
 8007ab0:	e4f4      	b.n	800749c <_svfiprintf_r+0x178>
 8007ab2:	f01b 0140 	ands.w	r1, fp, #64	; 0x40
 8007ab6:	bf0b      	itete	eq
 8007ab8:	9a05      	ldreq	r2, [sp, #20]
 8007aba:	9905      	ldrne	r1, [sp, #20]
 8007abc:	6813      	ldreq	r3, [r2, #0]
 8007abe:	880b      	ldrhne	r3, [r1, #0]
 8007ac0:	bf08      	it	eq
 8007ac2:	460a      	moveq	r2, r1
 8007ac4:	e7ee      	b.n	8007aa4 <_svfiprintf_r+0x780>
 8007ac6:	2202      	movs	r2, #2
 8007ac8:	e4e8      	b.n	800749c <_svfiprintf_r+0x178>
 8007aca:	9807      	ldr	r0, [sp, #28]
 8007acc:	4651      	mov	r1, sl
 8007ace:	4642      	mov	r2, r8
 8007ad0:	f7ff fba8 	bl	8007224 <__ssprint_r>
 8007ad4:	2800      	cmp	r0, #0
 8007ad6:	f47f af31 	bne.w	800793c <_svfiprintf_r+0x618>
 8007ada:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8007adc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007ade:	ac0e      	add	r4, sp, #56	; 0x38
 8007ae0:	e669      	b.n	80077b6 <_svfiprintf_r+0x492>
 8007ae2:	9a05      	ldr	r2, [sp, #20]
 8007ae4:	6815      	ldr	r5, [r2, #0]
 8007ae6:	3204      	adds	r2, #4
 8007ae8:	2d00      	cmp	r5, #0
 8007aea:	bfbc      	itt	lt
 8007aec:	9205      	strlt	r2, [sp, #20]
 8007aee:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
 8007af2:	f6ff ac60 	blt.w	80073b6 <_svfiprintf_r+0x92>
 8007af6:	9205      	str	r2, [sp, #20]
 8007af8:	e45d      	b.n	80073b6 <_svfiprintf_r+0x92>
 8007afa:	bf00      	nop
 8007afc:	08008f78 	.word	0x08008f78
 8007b00:	08008f88 	.word	0x08008f88
 8007b04:	9807      	ldr	r0, [sp, #28]
 8007b06:	4651      	mov	r1, sl
 8007b08:	4642      	mov	r2, r8
 8007b0a:	f7ff fb8b 	bl	8007224 <__ssprint_r>
 8007b0e:	2800      	cmp	r0, #0
 8007b10:	f47f af14 	bne.w	800793c <_svfiprintf_r+0x618>
 8007b14:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8007b16:	e6e9      	b.n	80078ec <_svfiprintf_r+0x5c8>
 8007b18:	2930      	cmp	r1, #48	; 0x30
 8007b1a:	d004      	beq.n	8007b26 <_svfiprintf_r+0x802>
 8007b1c:	1e93      	subs	r3, r2, #2
 8007b1e:	9309      	str	r3, [sp, #36]	; 0x24
 8007b20:	2330      	movs	r3, #48	; 0x30
 8007b22:	f802 3c02 	strb.w	r3, [r2, #-2]
 8007b26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b28:	ebc3 0308 	rsb	r3, r3, r8
 8007b2c:	9303      	str	r3, [sp, #12]
 8007b2e:	e4dc      	b.n	80074ea <_svfiprintf_r+0x1c6>
 8007b30:	9805      	ldr	r0, [sp, #20]
 8007b32:	9904      	ldr	r1, [sp, #16]
 8007b34:	6803      	ldr	r3, [r0, #0]
 8007b36:	3004      	adds	r0, #4
 8007b38:	9005      	str	r0, [sp, #20]
 8007b3a:	6019      	str	r1, [r3, #0]
 8007b3c:	e411      	b.n	8007362 <_svfiprintf_r+0x3e>
 8007b3e:	9a05      	ldr	r2, [sp, #20]
 8007b40:	6813      	ldr	r3, [r2, #0]
 8007b42:	3204      	adds	r2, #4
 8007b44:	9205      	str	r2, [sp, #20]
 8007b46:	e54e      	b.n	80075e6 <_svfiprintf_r+0x2c2>
 8007b48:	9905      	ldr	r1, [sp, #20]
 8007b4a:	880b      	ldrh	r3, [r1, #0]
 8007b4c:	3104      	adds	r1, #4
 8007b4e:	9105      	str	r1, [sp, #20]
 8007b50:	e52b      	b.n	80075aa <_svfiprintf_r+0x286>
 8007b52:	f7ff fb37 	bl	80071c4 <strlen>
 8007b56:	9608      	str	r6, [sp, #32]
 8007b58:	9003      	str	r0, [sp, #12]
 8007b5a:	e4c7      	b.n	80074ec <_svfiprintf_r+0x1c8>
 8007b5c:	9807      	ldr	r0, [sp, #28]
 8007b5e:	4651      	mov	r1, sl
 8007b60:	4642      	mov	r2, r8
 8007b62:	f7ff fb5f 	bl	8007224 <__ssprint_r>
 8007b66:	2800      	cmp	r0, #0
 8007b68:	f47f aee8 	bne.w	800793c <_svfiprintf_r+0x618>
 8007b6c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8007b6e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007b70:	ac0e      	add	r4, sp, #56	; 0x38
 8007b72:	e642      	b.n	80077fa <_svfiprintf_r+0x4d6>
 8007b74:	9905      	ldr	r1, [sp, #20]
 8007b76:	9a04      	ldr	r2, [sp, #16]
 8007b78:	680b      	ldr	r3, [r1, #0]
 8007b7a:	3104      	adds	r1, #4
 8007b7c:	9105      	str	r1, [sp, #20]
 8007b7e:	601a      	str	r2, [r3, #0]
 8007b80:	f7ff bbef 	b.w	8007362 <_svfiprintf_r+0x3e>
 8007b84:	2140      	movs	r1, #64	; 0x40
 8007b86:	9200      	str	r2, [sp, #0]
 8007b88:	f7fe fa56 	bl	8006038 <_malloc_r>
 8007b8c:	9a00      	ldr	r2, [sp, #0]
 8007b8e:	f8ca 0000 	str.w	r0, [sl]
 8007b92:	f8ca 0010 	str.w	r0, [sl, #16]
 8007b96:	b188      	cbz	r0, 8007bbc <_svfiprintf_r+0x898>
 8007b98:	2340      	movs	r3, #64	; 0x40
 8007b9a:	f8ca 3014 	str.w	r3, [sl, #20]
 8007b9e:	f7ff bbcf 	b.w	8007340 <_svfiprintf_r+0x1c>
 8007ba2:	2d06      	cmp	r5, #6
 8007ba4:	bf28      	it	cs
 8007ba6:	2506      	movcs	r5, #6
 8007ba8:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 8007bac:	9302      	str	r3, [sp, #8]
 8007bae:	4b07      	ldr	r3, [pc, #28]	; (8007bcc <_svfiprintf_r+0x8a8>)
 8007bb0:	9503      	str	r5, [sp, #12]
 8007bb2:	9309      	str	r3, [sp, #36]	; 0x24
 8007bb4:	e52e      	b.n	8007614 <_svfiprintf_r+0x2f0>
 8007bb6:	9503      	str	r5, [sp, #12]
 8007bb8:	9008      	str	r0, [sp, #32]
 8007bba:	e497      	b.n	80074ec <_svfiprintf_r+0x1c8>
 8007bbc:	9807      	ldr	r0, [sp, #28]
 8007bbe:	230c      	movs	r3, #12
 8007bc0:	6003      	str	r3, [r0, #0]
 8007bc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007bc6:	9304      	str	r3, [sp, #16]
 8007bc8:	e6c1      	b.n	800794e <_svfiprintf_r+0x62a>
 8007bca:	bf00      	nop
 8007bcc:	08009104 	.word	0x08009104

08007bd0 <_calloc_r>:
 8007bd0:	b510      	push	{r4, lr}
 8007bd2:	fb01 f102 	mul.w	r1, r1, r2
 8007bd6:	f7fe fa2f 	bl	8006038 <_malloc_r>
 8007bda:	4604      	mov	r4, r0
 8007bdc:	b300      	cbz	r0, 8007c20 <_calloc_r+0x50>
 8007bde:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8007be2:	f022 0203 	bic.w	r2, r2, #3
 8007be6:	3a04      	subs	r2, #4
 8007be8:	2a24      	cmp	r2, #36	; 0x24
 8007bea:	d81b      	bhi.n	8007c24 <_calloc_r+0x54>
 8007bec:	2a13      	cmp	r2, #19
 8007bee:	bf98      	it	ls
 8007bf0:	4602      	movls	r2, r0
 8007bf2:	d911      	bls.n	8007c18 <_calloc_r+0x48>
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	2a1b      	cmp	r2, #27
 8007bf8:	6003      	str	r3, [r0, #0]
 8007bfa:	6043      	str	r3, [r0, #4]
 8007bfc:	bf98      	it	ls
 8007bfe:	f100 0208 	addls.w	r2, r0, #8
 8007c02:	d909      	bls.n	8007c18 <_calloc_r+0x48>
 8007c04:	2a24      	cmp	r2, #36	; 0x24
 8007c06:	6083      	str	r3, [r0, #8]
 8007c08:	60c3      	str	r3, [r0, #12]
 8007c0a:	bf11      	iteee	ne
 8007c0c:	f100 0210 	addne.w	r2, r0, #16
 8007c10:	6103      	streq	r3, [r0, #16]
 8007c12:	6143      	streq	r3, [r0, #20]
 8007c14:	f100 0218 	addeq.w	r2, r0, #24
 8007c18:	2300      	movs	r3, #0
 8007c1a:	6013      	str	r3, [r2, #0]
 8007c1c:	6053      	str	r3, [r2, #4]
 8007c1e:	6093      	str	r3, [r2, #8]
 8007c20:	4620      	mov	r0, r4
 8007c22:	bd10      	pop	{r4, pc}
 8007c24:	2100      	movs	r1, #0
 8007c26:	f000 f85b 	bl	8007ce0 <memset>
 8007c2a:	4620      	mov	r0, r4
 8007c2c:	bd10      	pop	{r4, pc}
 8007c2e:	bf00      	nop

08007c30 <memmove>:
 8007c30:	4288      	cmp	r0, r1
 8007c32:	b4f0      	push	{r4, r5, r6, r7}
 8007c34:	d912      	bls.n	8007c5c <memmove+0x2c>
 8007c36:	188d      	adds	r5, r1, r2
 8007c38:	42a8      	cmp	r0, r5
 8007c3a:	d20f      	bcs.n	8007c5c <memmove+0x2c>
 8007c3c:	b162      	cbz	r2, 8007c58 <memmove+0x28>
 8007c3e:	4251      	negs	r1, r2
 8007c40:	4613      	mov	r3, r2
 8007c42:	1882      	adds	r2, r0, r2
 8007c44:	186d      	adds	r5, r5, r1
 8007c46:	1852      	adds	r2, r2, r1
 8007c48:	18ec      	adds	r4, r5, r3
 8007c4a:	18d1      	adds	r1, r2, r3
 8007c4c:	f814 4c01 	ldrb.w	r4, [r4, #-1]
 8007c50:	3b01      	subs	r3, #1
 8007c52:	f801 4c01 	strb.w	r4, [r1, #-1]
 8007c56:	d1f7      	bne.n	8007c48 <memmove+0x18>
 8007c58:	bcf0      	pop	{r4, r5, r6, r7}
 8007c5a:	4770      	bx	lr
 8007c5c:	2a0f      	cmp	r2, #15
 8007c5e:	bf98      	it	ls
 8007c60:	4603      	movls	r3, r0
 8007c62:	d931      	bls.n	8007cc8 <memmove+0x98>
 8007c64:	ea41 0300 	orr.w	r3, r1, r0
 8007c68:	079b      	lsls	r3, r3, #30
 8007c6a:	d137      	bne.n	8007cdc <memmove+0xac>
 8007c6c:	460c      	mov	r4, r1
 8007c6e:	4603      	mov	r3, r0
 8007c70:	4615      	mov	r5, r2
 8007c72:	6826      	ldr	r6, [r4, #0]
 8007c74:	601e      	str	r6, [r3, #0]
 8007c76:	6866      	ldr	r6, [r4, #4]
 8007c78:	605e      	str	r6, [r3, #4]
 8007c7a:	68a6      	ldr	r6, [r4, #8]
 8007c7c:	609e      	str	r6, [r3, #8]
 8007c7e:	68e6      	ldr	r6, [r4, #12]
 8007c80:	3d10      	subs	r5, #16
 8007c82:	60de      	str	r6, [r3, #12]
 8007c84:	3410      	adds	r4, #16
 8007c86:	3310      	adds	r3, #16
 8007c88:	2d0f      	cmp	r5, #15
 8007c8a:	d8f2      	bhi.n	8007c72 <memmove+0x42>
 8007c8c:	f1a2 0410 	sub.w	r4, r2, #16
 8007c90:	f024 040f 	bic.w	r4, r4, #15
 8007c94:	f002 020f 	and.w	r2, r2, #15
 8007c98:	3410      	adds	r4, #16
 8007c9a:	2a03      	cmp	r2, #3
 8007c9c:	eb00 0304 	add.w	r3, r0, r4
 8007ca0:	4421      	add	r1, r4
 8007ca2:	d911      	bls.n	8007cc8 <memmove+0x98>
 8007ca4:	1f0e      	subs	r6, r1, #4
 8007ca6:	461d      	mov	r5, r3
 8007ca8:	4614      	mov	r4, r2
 8007caa:	f856 7f04 	ldr.w	r7, [r6, #4]!
 8007cae:	3c04      	subs	r4, #4
 8007cb0:	2c03      	cmp	r4, #3
 8007cb2:	f845 7b04 	str.w	r7, [r5], #4
 8007cb6:	d8f8      	bhi.n	8007caa <memmove+0x7a>
 8007cb8:	1f14      	subs	r4, r2, #4
 8007cba:	f024 0403 	bic.w	r4, r4, #3
 8007cbe:	3404      	adds	r4, #4
 8007cc0:	f002 0203 	and.w	r2, r2, #3
 8007cc4:	1909      	adds	r1, r1, r4
 8007cc6:	191b      	adds	r3, r3, r4
 8007cc8:	2a00      	cmp	r2, #0
 8007cca:	d0c5      	beq.n	8007c58 <memmove+0x28>
 8007ccc:	3901      	subs	r1, #1
 8007cce:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007cd2:	3a01      	subs	r2, #1
 8007cd4:	f803 4b01 	strb.w	r4, [r3], #1
 8007cd8:	d1f9      	bne.n	8007cce <memmove+0x9e>
 8007cda:	e7bd      	b.n	8007c58 <memmove+0x28>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	e7f5      	b.n	8007ccc <memmove+0x9c>

08007ce0 <memset>:
 8007ce0:	f010 0f03 	tst.w	r0, #3
 8007ce4:	b470      	push	{r4, r5, r6}
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	d042      	beq.n	8007d70 <memset+0x90>
 8007cea:	2a00      	cmp	r2, #0
 8007cec:	d03e      	beq.n	8007d6c <memset+0x8c>
 8007cee:	3a01      	subs	r2, #1
 8007cf0:	b2cd      	uxtb	r5, r1
 8007cf2:	e003      	b.n	8007cfc <memset+0x1c>
 8007cf4:	1e54      	subs	r4, r2, #1
 8007cf6:	2a00      	cmp	r2, #0
 8007cf8:	d038      	beq.n	8007d6c <memset+0x8c>
 8007cfa:	4622      	mov	r2, r4
 8007cfc:	f803 5b01 	strb.w	r5, [r3], #1
 8007d00:	f013 0f03 	tst.w	r3, #3
 8007d04:	461c      	mov	r4, r3
 8007d06:	d1f5      	bne.n	8007cf4 <memset+0x14>
 8007d08:	2a03      	cmp	r2, #3
 8007d0a:	d929      	bls.n	8007d60 <memset+0x80>
 8007d0c:	b2cd      	uxtb	r5, r1
 8007d0e:	2a0f      	cmp	r2, #15
 8007d10:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8007d14:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8007d18:	bf84      	itt	hi
 8007d1a:	4623      	movhi	r3, r4
 8007d1c:	4616      	movhi	r6, r2
 8007d1e:	d911      	bls.n	8007d44 <memset+0x64>
 8007d20:	3e10      	subs	r6, #16
 8007d22:	601d      	str	r5, [r3, #0]
 8007d24:	605d      	str	r5, [r3, #4]
 8007d26:	609d      	str	r5, [r3, #8]
 8007d28:	60dd      	str	r5, [r3, #12]
 8007d2a:	3310      	adds	r3, #16
 8007d2c:	2e0f      	cmp	r6, #15
 8007d2e:	d8f7      	bhi.n	8007d20 <memset+0x40>
 8007d30:	f1a2 0310 	sub.w	r3, r2, #16
 8007d34:	f023 030f 	bic.w	r3, r3, #15
 8007d38:	f002 020f 	and.w	r2, r2, #15
 8007d3c:	3310      	adds	r3, #16
 8007d3e:	2a03      	cmp	r2, #3
 8007d40:	441c      	add	r4, r3
 8007d42:	d90d      	bls.n	8007d60 <memset+0x80>
 8007d44:	4626      	mov	r6, r4
 8007d46:	4613      	mov	r3, r2
 8007d48:	3b04      	subs	r3, #4
 8007d4a:	2b03      	cmp	r3, #3
 8007d4c:	f846 5b04 	str.w	r5, [r6], #4
 8007d50:	d8fa      	bhi.n	8007d48 <memset+0x68>
 8007d52:	1f13      	subs	r3, r2, #4
 8007d54:	f023 0303 	bic.w	r3, r3, #3
 8007d58:	3304      	adds	r3, #4
 8007d5a:	f002 0203 	and.w	r2, r2, #3
 8007d5e:	18e4      	adds	r4, r4, r3
 8007d60:	b2c9      	uxtb	r1, r1
 8007d62:	b11a      	cbz	r2, 8007d6c <memset+0x8c>
 8007d64:	3a01      	subs	r2, #1
 8007d66:	f804 1b01 	strb.w	r1, [r4], #1
 8007d6a:	d1fb      	bne.n	8007d64 <memset+0x84>
 8007d6c:	bc70      	pop	{r4, r5, r6}
 8007d6e:	4770      	bx	lr
 8007d70:	4604      	mov	r4, r0
 8007d72:	e7c9      	b.n	8007d08 <memset+0x28>

08007d74 <_realloc_r>:
 8007d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d78:	460c      	mov	r4, r1
 8007d7a:	b083      	sub	sp, #12
 8007d7c:	4607      	mov	r7, r0
 8007d7e:	4690      	mov	r8, r2
 8007d80:	2900      	cmp	r1, #0
 8007d82:	f000 80fe 	beq.w	8007f82 <_realloc_r+0x20e>
 8007d86:	f108 050b 	add.w	r5, r8, #11
 8007d8a:	f7fe fc8b 	bl	80066a4 <__malloc_lock>
 8007d8e:	2d16      	cmp	r5, #22
 8007d90:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8007d94:	d87d      	bhi.n	8007e92 <_realloc_r+0x11e>
 8007d96:	2210      	movs	r2, #16
 8007d98:	2600      	movs	r6, #0
 8007d9a:	4615      	mov	r5, r2
 8007d9c:	4545      	cmp	r5, r8
 8007d9e:	bf38      	it	cc
 8007da0:	f046 0601 	orrcc.w	r6, r6, #1
 8007da4:	2e00      	cmp	r6, #0
 8007da6:	f040 80f2 	bne.w	8007f8e <_realloc_r+0x21a>
 8007daa:	f021 0a03 	bic.w	sl, r1, #3
 8007dae:	4592      	cmp	sl, r2
 8007db0:	f1a4 0b08 	sub.w	fp, r4, #8
 8007db4:	bfa8      	it	ge
 8007db6:	4656      	movge	r6, sl
 8007db8:	da55      	bge.n	8007e66 <_realloc_r+0xf2>
 8007dba:	4ba0      	ldr	r3, [pc, #640]	; (800803c <_realloc_r+0x2c8>)
 8007dbc:	f8d3 c008 	ldr.w	ip, [r3, #8]
 8007dc0:	eb0b 000a 	add.w	r0, fp, sl
 8007dc4:	4584      	cmp	ip, r0
 8007dc6:	f000 80e7 	beq.w	8007f98 <_realloc_r+0x224>
 8007dca:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8007dce:	f02e 0901 	bic.w	r9, lr, #1
 8007dd2:	4481      	add	r9, r0
 8007dd4:	f8d9 9004 	ldr.w	r9, [r9, #4]
 8007dd8:	f019 0f01 	tst.w	r9, #1
 8007ddc:	bf1c      	itt	ne
 8007dde:	46b6      	movne	lr, r6
 8007de0:	4670      	movne	r0, lr
 8007de2:	d05b      	beq.n	8007e9c <_realloc_r+0x128>
 8007de4:	07c9      	lsls	r1, r1, #31
 8007de6:	d479      	bmi.n	8007edc <_realloc_r+0x168>
 8007de8:	f854 1c08 	ldr.w	r1, [r4, #-8]
 8007dec:	ebc1 090b 	rsb	r9, r1, fp
 8007df0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007df4:	f021 0103 	bic.w	r1, r1, #3
 8007df8:	2800      	cmp	r0, #0
 8007dfa:	f000 8097 	beq.w	8007f2c <_realloc_r+0x1b8>
 8007dfe:	4560      	cmp	r0, ip
 8007e00:	eb01 0c0a 	add.w	ip, r1, sl
 8007e04:	eb0e 060c 	add.w	r6, lr, ip
 8007e08:	f000 811a 	beq.w	8008040 <_realloc_r+0x2cc>
 8007e0c:	42b2      	cmp	r2, r6
 8007e0e:	f300 808f 	bgt.w	8007f30 <_realloc_r+0x1bc>
 8007e12:	68c3      	ldr	r3, [r0, #12]
 8007e14:	6882      	ldr	r2, [r0, #8]
 8007e16:	46c8      	mov	r8, r9
 8007e18:	609a      	str	r2, [r3, #8]
 8007e1a:	60d3      	str	r3, [r2, #12]
 8007e1c:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8007e20:	f858 1f08 	ldr.w	r1, [r8, #8]!
 8007e24:	f1aa 0204 	sub.w	r2, sl, #4
 8007e28:	2a24      	cmp	r2, #36	; 0x24
 8007e2a:	60cb      	str	r3, [r1, #12]
 8007e2c:	6099      	str	r1, [r3, #8]
 8007e2e:	f200 8144 	bhi.w	80080ba <_realloc_r+0x346>
 8007e32:	2a13      	cmp	r2, #19
 8007e34:	bf98      	it	ls
 8007e36:	4643      	movls	r3, r8
 8007e38:	d90b      	bls.n	8007e52 <_realloc_r+0xde>
 8007e3a:	6823      	ldr	r3, [r4, #0]
 8007e3c:	f8c9 3008 	str.w	r3, [r9, #8]
 8007e40:	6863      	ldr	r3, [r4, #4]
 8007e42:	2a1b      	cmp	r2, #27
 8007e44:	f8c9 300c 	str.w	r3, [r9, #12]
 8007e48:	f200 8140 	bhi.w	80080cc <_realloc_r+0x358>
 8007e4c:	f109 0310 	add.w	r3, r9, #16
 8007e50:	3408      	adds	r4, #8
 8007e52:	6822      	ldr	r2, [r4, #0]
 8007e54:	601a      	str	r2, [r3, #0]
 8007e56:	6862      	ldr	r2, [r4, #4]
 8007e58:	605a      	str	r2, [r3, #4]
 8007e5a:	68a2      	ldr	r2, [r4, #8]
 8007e5c:	609a      	str	r2, [r3, #8]
 8007e5e:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007e62:	4644      	mov	r4, r8
 8007e64:	46cb      	mov	fp, r9
 8007e66:	1b72      	subs	r2, r6, r5
 8007e68:	2a0f      	cmp	r2, #15
 8007e6a:	d822      	bhi.n	8007eb2 <_realloc_r+0x13e>
 8007e6c:	f001 0101 	and.w	r1, r1, #1
 8007e70:	eb0b 0306 	add.w	r3, fp, r6
 8007e74:	430e      	orrs	r6, r1
 8007e76:	f8cb 6004 	str.w	r6, [fp, #4]
 8007e7a:	685a      	ldr	r2, [r3, #4]
 8007e7c:	f042 0201 	orr.w	r2, r2, #1
 8007e80:	605a      	str	r2, [r3, #4]
 8007e82:	4638      	mov	r0, r7
 8007e84:	f7fe fc10 	bl	80066a8 <__malloc_unlock>
 8007e88:	46a0      	mov	r8, r4
 8007e8a:	4640      	mov	r0, r8
 8007e8c:	b003      	add	sp, #12
 8007e8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e92:	f025 0507 	bic.w	r5, r5, #7
 8007e96:	462a      	mov	r2, r5
 8007e98:	0fee      	lsrs	r6, r5, #31
 8007e9a:	e77f      	b.n	8007d9c <_realloc_r+0x28>
 8007e9c:	f02e 0e03 	bic.w	lr, lr, #3
 8007ea0:	eb0e 060a 	add.w	r6, lr, sl
 8007ea4:	42b2      	cmp	r2, r6
 8007ea6:	dc9d      	bgt.n	8007de4 <_realloc_r+0x70>
 8007ea8:	68c3      	ldr	r3, [r0, #12]
 8007eaa:	6882      	ldr	r2, [r0, #8]
 8007eac:	60d3      	str	r3, [r2, #12]
 8007eae:	609a      	str	r2, [r3, #8]
 8007eb0:	e7d9      	b.n	8007e66 <_realloc_r+0xf2>
 8007eb2:	eb0b 0305 	add.w	r3, fp, r5
 8007eb6:	f001 0101 	and.w	r1, r1, #1
 8007eba:	1898      	adds	r0, r3, r2
 8007ebc:	430d      	orrs	r5, r1
 8007ebe:	f042 0201 	orr.w	r2, r2, #1
 8007ec2:	f8cb 5004 	str.w	r5, [fp, #4]
 8007ec6:	605a      	str	r2, [r3, #4]
 8007ec8:	6842      	ldr	r2, [r0, #4]
 8007eca:	f042 0201 	orr.w	r2, r2, #1
 8007ece:	6042      	str	r2, [r0, #4]
 8007ed0:	f103 0108 	add.w	r1, r3, #8
 8007ed4:	4638      	mov	r0, r7
 8007ed6:	f7fd ffa3 	bl	8005e20 <_free_r>
 8007eda:	e7d2      	b.n	8007e82 <_realloc_r+0x10e>
 8007edc:	4641      	mov	r1, r8
 8007ede:	4638      	mov	r0, r7
 8007ee0:	f7fe f8aa 	bl	8006038 <_malloc_r>
 8007ee4:	4680      	mov	r8, r0
 8007ee6:	b1e8      	cbz	r0, 8007f24 <_realloc_r+0x1b0>
 8007ee8:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8007eec:	f021 0301 	bic.w	r3, r1, #1
 8007ef0:	f1a0 0208 	sub.w	r2, r0, #8
 8007ef4:	445b      	add	r3, fp
 8007ef6:	429a      	cmp	r2, r3
 8007ef8:	f000 80d9 	beq.w	80080ae <_realloc_r+0x33a>
 8007efc:	f1aa 0204 	sub.w	r2, sl, #4
 8007f00:	2a24      	cmp	r2, #36	; 0x24
 8007f02:	f200 8096 	bhi.w	8008032 <_realloc_r+0x2be>
 8007f06:	2a13      	cmp	r2, #19
 8007f08:	bf9c      	itt	ls
 8007f0a:	4603      	movls	r3, r0
 8007f0c:	4622      	movls	r2, r4
 8007f0e:	d863      	bhi.n	8007fd8 <_realloc_r+0x264>
 8007f10:	6811      	ldr	r1, [r2, #0]
 8007f12:	6019      	str	r1, [r3, #0]
 8007f14:	6851      	ldr	r1, [r2, #4]
 8007f16:	6059      	str	r1, [r3, #4]
 8007f18:	6892      	ldr	r2, [r2, #8]
 8007f1a:	609a      	str	r2, [r3, #8]
 8007f1c:	4638      	mov	r0, r7
 8007f1e:	4621      	mov	r1, r4
 8007f20:	f7fd ff7e 	bl	8005e20 <_free_r>
 8007f24:	4638      	mov	r0, r7
 8007f26:	f7fe fbbf 	bl	80066a8 <__malloc_unlock>
 8007f2a:	e7ae      	b.n	8007e8a <_realloc_r+0x116>
 8007f2c:	eb01 0c0a 	add.w	ip, r1, sl
 8007f30:	4562      	cmp	r2, ip
 8007f32:	dcd3      	bgt.n	8007edc <_realloc_r+0x168>
 8007f34:	464e      	mov	r6, r9
 8007f36:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8007f3a:	f856 1f08 	ldr.w	r1, [r6, #8]!
 8007f3e:	f1aa 0204 	sub.w	r2, sl, #4
 8007f42:	2a24      	cmp	r2, #36	; 0x24
 8007f44:	60cb      	str	r3, [r1, #12]
 8007f46:	6099      	str	r1, [r3, #8]
 8007f48:	d865      	bhi.n	8008016 <_realloc_r+0x2a2>
 8007f4a:	2a13      	cmp	r2, #19
 8007f4c:	bf98      	it	ls
 8007f4e:	4633      	movls	r3, r6
 8007f50:	d90b      	bls.n	8007f6a <_realloc_r+0x1f6>
 8007f52:	6823      	ldr	r3, [r4, #0]
 8007f54:	f8c9 3008 	str.w	r3, [r9, #8]
 8007f58:	6863      	ldr	r3, [r4, #4]
 8007f5a:	2a1b      	cmp	r2, #27
 8007f5c:	f8c9 300c 	str.w	r3, [r9, #12]
 8007f60:	f200 80c0 	bhi.w	80080e4 <_realloc_r+0x370>
 8007f64:	f109 0310 	add.w	r3, r9, #16
 8007f68:	3408      	adds	r4, #8
 8007f6a:	6822      	ldr	r2, [r4, #0]
 8007f6c:	601a      	str	r2, [r3, #0]
 8007f6e:	6862      	ldr	r2, [r4, #4]
 8007f70:	605a      	str	r2, [r3, #4]
 8007f72:	68a2      	ldr	r2, [r4, #8]
 8007f74:	609a      	str	r2, [r3, #8]
 8007f76:	4634      	mov	r4, r6
 8007f78:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007f7c:	4666      	mov	r6, ip
 8007f7e:	46cb      	mov	fp, r9
 8007f80:	e771      	b.n	8007e66 <_realloc_r+0xf2>
 8007f82:	4611      	mov	r1, r2
 8007f84:	b003      	add	sp, #12
 8007f86:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f8a:	f7fe b855 	b.w	8006038 <_malloc_r>
 8007f8e:	230c      	movs	r3, #12
 8007f90:	603b      	str	r3, [r7, #0]
 8007f92:	f04f 0800 	mov.w	r8, #0
 8007f96:	e778      	b.n	8007e8a <_realloc_r+0x116>
 8007f98:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8007f9c:	f026 0e03 	bic.w	lr, r6, #3
 8007fa0:	eb0e 000a 	add.w	r0, lr, sl
 8007fa4:	f105 0610 	add.w	r6, r5, #16
 8007fa8:	42b0      	cmp	r0, r6
 8007faa:	bfb8      	it	lt
 8007fac:	4660      	movlt	r0, ip
 8007fae:	f6ff af19 	blt.w	8007de4 <_realloc_r+0x70>
 8007fb2:	eb0b 0205 	add.w	r2, fp, r5
 8007fb6:	1b41      	subs	r1, r0, r5
 8007fb8:	f041 0101 	orr.w	r1, r1, #1
 8007fbc:	6051      	str	r1, [r2, #4]
 8007fbe:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8007fc2:	609a      	str	r2, [r3, #8]
 8007fc4:	f001 0301 	and.w	r3, r1, #1
 8007fc8:	431d      	orrs	r5, r3
 8007fca:	f844 5c04 	str.w	r5, [r4, #-4]
 8007fce:	4638      	mov	r0, r7
 8007fd0:	f7fe fb6a 	bl	80066a8 <__malloc_unlock>
 8007fd4:	46a0      	mov	r8, r4
 8007fd6:	e758      	b.n	8007e8a <_realloc_r+0x116>
 8007fd8:	6823      	ldr	r3, [r4, #0]
 8007fda:	6003      	str	r3, [r0, #0]
 8007fdc:	6863      	ldr	r3, [r4, #4]
 8007fde:	2a1b      	cmp	r2, #27
 8007fe0:	6043      	str	r3, [r0, #4]
 8007fe2:	bf9c      	itt	ls
 8007fe4:	f104 0208 	addls.w	r2, r4, #8
 8007fe8:	f100 0308 	addls.w	r3, r0, #8
 8007fec:	d990      	bls.n	8007f10 <_realloc_r+0x19c>
 8007fee:	68a3      	ldr	r3, [r4, #8]
 8007ff0:	6083      	str	r3, [r0, #8]
 8007ff2:	68e3      	ldr	r3, [r4, #12]
 8007ff4:	2a24      	cmp	r2, #36	; 0x24
 8007ff6:	60c3      	str	r3, [r0, #12]
 8007ff8:	bf03      	ittte	eq
 8007ffa:	6923      	ldreq	r3, [r4, #16]
 8007ffc:	6103      	streq	r3, [r0, #16]
 8007ffe:	6962      	ldreq	r2, [r4, #20]
 8008000:	f100 0310 	addne.w	r3, r0, #16
 8008004:	bf09      	itett	eq
 8008006:	6142      	streq	r2, [r0, #20]
 8008008:	f104 0210 	addne.w	r2, r4, #16
 800800c:	f100 0318 	addeq.w	r3, r0, #24
 8008010:	f104 0218 	addeq.w	r2, r4, #24
 8008014:	e77c      	b.n	8007f10 <_realloc_r+0x19c>
 8008016:	4621      	mov	r1, r4
 8008018:	4630      	mov	r0, r6
 800801a:	f8cd c004 	str.w	ip, [sp, #4]
 800801e:	f7ff fe07 	bl	8007c30 <memmove>
 8008022:	f8dd c004 	ldr.w	ip, [sp, #4]
 8008026:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800802a:	4634      	mov	r4, r6
 800802c:	46cb      	mov	fp, r9
 800802e:	4666      	mov	r6, ip
 8008030:	e719      	b.n	8007e66 <_realloc_r+0xf2>
 8008032:	4621      	mov	r1, r4
 8008034:	f7ff fdfc 	bl	8007c30 <memmove>
 8008038:	e770      	b.n	8007f1c <_realloc_r+0x1a8>
 800803a:	bf00      	nop
 800803c:	2000054c 	.word	0x2000054c
 8008040:	f105 0110 	add.w	r1, r5, #16
 8008044:	428e      	cmp	r6, r1
 8008046:	f6ff af73 	blt.w	8007f30 <_realloc_r+0x1bc>
 800804a:	46c8      	mov	r8, r9
 800804c:	f8d9 100c 	ldr.w	r1, [r9, #12]
 8008050:	f858 0f08 	ldr.w	r0, [r8, #8]!
 8008054:	f1aa 0204 	sub.w	r2, sl, #4
 8008058:	2a24      	cmp	r2, #36	; 0x24
 800805a:	60c1      	str	r1, [r0, #12]
 800805c:	6088      	str	r0, [r1, #8]
 800805e:	d861      	bhi.n	8008124 <_realloc_r+0x3b0>
 8008060:	2a13      	cmp	r2, #19
 8008062:	bf98      	it	ls
 8008064:	4642      	movls	r2, r8
 8008066:	d90a      	bls.n	800807e <_realloc_r+0x30a>
 8008068:	6821      	ldr	r1, [r4, #0]
 800806a:	f8c9 1008 	str.w	r1, [r9, #8]
 800806e:	6861      	ldr	r1, [r4, #4]
 8008070:	2a1b      	cmp	r2, #27
 8008072:	f8c9 100c 	str.w	r1, [r9, #12]
 8008076:	d85c      	bhi.n	8008132 <_realloc_r+0x3be>
 8008078:	f109 0210 	add.w	r2, r9, #16
 800807c:	3408      	adds	r4, #8
 800807e:	6821      	ldr	r1, [r4, #0]
 8008080:	6011      	str	r1, [r2, #0]
 8008082:	6861      	ldr	r1, [r4, #4]
 8008084:	6051      	str	r1, [r2, #4]
 8008086:	68a1      	ldr	r1, [r4, #8]
 8008088:	6091      	str	r1, [r2, #8]
 800808a:	eb09 0205 	add.w	r2, r9, r5
 800808e:	1b71      	subs	r1, r6, r5
 8008090:	f041 0101 	orr.w	r1, r1, #1
 8008094:	6051      	str	r1, [r2, #4]
 8008096:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800809a:	609a      	str	r2, [r3, #8]
 800809c:	f001 0301 	and.w	r3, r1, #1
 80080a0:	431d      	orrs	r5, r3
 80080a2:	f8c9 5004 	str.w	r5, [r9, #4]
 80080a6:	4638      	mov	r0, r7
 80080a8:	f7fe fafe 	bl	80066a8 <__malloc_unlock>
 80080ac:	e6ed      	b.n	8007e8a <_realloc_r+0x116>
 80080ae:	f850 6c04 	ldr.w	r6, [r0, #-4]
 80080b2:	f026 0603 	bic.w	r6, r6, #3
 80080b6:	4456      	add	r6, sl
 80080b8:	e6d5      	b.n	8007e66 <_realloc_r+0xf2>
 80080ba:	4621      	mov	r1, r4
 80080bc:	4640      	mov	r0, r8
 80080be:	f7ff fdb7 	bl	8007c30 <memmove>
 80080c2:	4644      	mov	r4, r8
 80080c4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80080c8:	46cb      	mov	fp, r9
 80080ca:	e6cc      	b.n	8007e66 <_realloc_r+0xf2>
 80080cc:	68a3      	ldr	r3, [r4, #8]
 80080ce:	f8c9 3010 	str.w	r3, [r9, #16]
 80080d2:	68e3      	ldr	r3, [r4, #12]
 80080d4:	2a24      	cmp	r2, #36	; 0x24
 80080d6:	f8c9 3014 	str.w	r3, [r9, #20]
 80080da:	d00f      	beq.n	80080fc <_realloc_r+0x388>
 80080dc:	f109 0318 	add.w	r3, r9, #24
 80080e0:	3410      	adds	r4, #16
 80080e2:	e6b6      	b.n	8007e52 <_realloc_r+0xde>
 80080e4:	68a3      	ldr	r3, [r4, #8]
 80080e6:	f8c9 3010 	str.w	r3, [r9, #16]
 80080ea:	68e3      	ldr	r3, [r4, #12]
 80080ec:	2a24      	cmp	r2, #36	; 0x24
 80080ee:	f8c9 3014 	str.w	r3, [r9, #20]
 80080f2:	d00d      	beq.n	8008110 <_realloc_r+0x39c>
 80080f4:	f109 0318 	add.w	r3, r9, #24
 80080f8:	3410      	adds	r4, #16
 80080fa:	e736      	b.n	8007f6a <_realloc_r+0x1f6>
 80080fc:	6923      	ldr	r3, [r4, #16]
 80080fe:	f8c9 3018 	str.w	r3, [r9, #24]
 8008102:	6962      	ldr	r2, [r4, #20]
 8008104:	f109 0320 	add.w	r3, r9, #32
 8008108:	f8c9 201c 	str.w	r2, [r9, #28]
 800810c:	3418      	adds	r4, #24
 800810e:	e6a0      	b.n	8007e52 <_realloc_r+0xde>
 8008110:	6923      	ldr	r3, [r4, #16]
 8008112:	f8c9 3018 	str.w	r3, [r9, #24]
 8008116:	6962      	ldr	r2, [r4, #20]
 8008118:	f109 0320 	add.w	r3, r9, #32
 800811c:	f8c9 201c 	str.w	r2, [r9, #28]
 8008120:	3418      	adds	r4, #24
 8008122:	e722      	b.n	8007f6a <_realloc_r+0x1f6>
 8008124:	4640      	mov	r0, r8
 8008126:	4621      	mov	r1, r4
 8008128:	9301      	str	r3, [sp, #4]
 800812a:	f7ff fd81 	bl	8007c30 <memmove>
 800812e:	9b01      	ldr	r3, [sp, #4]
 8008130:	e7ab      	b.n	800808a <_realloc_r+0x316>
 8008132:	68a1      	ldr	r1, [r4, #8]
 8008134:	f8c9 1010 	str.w	r1, [r9, #16]
 8008138:	68e1      	ldr	r1, [r4, #12]
 800813a:	2a24      	cmp	r2, #36	; 0x24
 800813c:	f8c9 1014 	str.w	r1, [r9, #20]
 8008140:	d003      	beq.n	800814a <_realloc_r+0x3d6>
 8008142:	f109 0218 	add.w	r2, r9, #24
 8008146:	3410      	adds	r4, #16
 8008148:	e799      	b.n	800807e <_realloc_r+0x30a>
 800814a:	6922      	ldr	r2, [r4, #16]
 800814c:	f8c9 2018 	str.w	r2, [r9, #24]
 8008150:	6961      	ldr	r1, [r4, #20]
 8008152:	f109 0220 	add.w	r2, r9, #32
 8008156:	f8c9 101c 	str.w	r1, [r9, #28]
 800815a:	3418      	adds	r4, #24
 800815c:	e78f      	b.n	800807e <_realloc_r+0x30a>
 800815e:	bf00      	nop

08008160 <__aeabi_drsub>:
 8008160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8008164:	e002      	b.n	800816c <__adddf3>
 8008166:	bf00      	nop

08008168 <__aeabi_dsub>:
 8008168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800816c <__adddf3>:
 800816c:	b530      	push	{r4, r5, lr}
 800816e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8008172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8008176:	ea94 0f05 	teq	r4, r5
 800817a:	bf08      	it	eq
 800817c:	ea90 0f02 	teqeq	r0, r2
 8008180:	bf1f      	itttt	ne
 8008182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8008186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800818a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800818e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008192:	f000 80e2 	beq.w	800835a <__adddf3+0x1ee>
 8008196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800819a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800819e:	bfb8      	it	lt
 80081a0:	426d      	neglt	r5, r5
 80081a2:	dd0c      	ble.n	80081be <__adddf3+0x52>
 80081a4:	442c      	add	r4, r5
 80081a6:	ea80 0202 	eor.w	r2, r0, r2
 80081aa:	ea81 0303 	eor.w	r3, r1, r3
 80081ae:	ea82 0000 	eor.w	r0, r2, r0
 80081b2:	ea83 0101 	eor.w	r1, r3, r1
 80081b6:	ea80 0202 	eor.w	r2, r0, r2
 80081ba:	ea81 0303 	eor.w	r3, r1, r3
 80081be:	2d36      	cmp	r5, #54	; 0x36
 80081c0:	bf88      	it	hi
 80081c2:	bd30      	pophi	{r4, r5, pc}
 80081c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80081c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80081cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80081d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80081d4:	d002      	beq.n	80081dc <__adddf3+0x70>
 80081d6:	4240      	negs	r0, r0
 80081d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80081dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80081e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80081e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80081e8:	d002      	beq.n	80081f0 <__adddf3+0x84>
 80081ea:	4252      	negs	r2, r2
 80081ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80081f0:	ea94 0f05 	teq	r4, r5
 80081f4:	f000 80a7 	beq.w	8008346 <__adddf3+0x1da>
 80081f8:	f1a4 0401 	sub.w	r4, r4, #1
 80081fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8008200:	db0d      	blt.n	800821e <__adddf3+0xb2>
 8008202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8008206:	fa22 f205 	lsr.w	r2, r2, r5
 800820a:	1880      	adds	r0, r0, r2
 800820c:	f141 0100 	adc.w	r1, r1, #0
 8008210:	fa03 f20e 	lsl.w	r2, r3, lr
 8008214:	1880      	adds	r0, r0, r2
 8008216:	fa43 f305 	asr.w	r3, r3, r5
 800821a:	4159      	adcs	r1, r3
 800821c:	e00e      	b.n	800823c <__adddf3+0xd0>
 800821e:	f1a5 0520 	sub.w	r5, r5, #32
 8008222:	f10e 0e20 	add.w	lr, lr, #32
 8008226:	2a01      	cmp	r2, #1
 8008228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800822c:	bf28      	it	cs
 800822e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8008232:	fa43 f305 	asr.w	r3, r3, r5
 8008236:	18c0      	adds	r0, r0, r3
 8008238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800823c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8008240:	d507      	bpl.n	8008252 <__adddf3+0xe6>
 8008242:	f04f 0e00 	mov.w	lr, #0
 8008246:	f1dc 0c00 	rsbs	ip, ip, #0
 800824a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800824e:	eb6e 0101 	sbc.w	r1, lr, r1
 8008252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8008256:	d31b      	bcc.n	8008290 <__adddf3+0x124>
 8008258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800825c:	d30c      	bcc.n	8008278 <__adddf3+0x10c>
 800825e:	0849      	lsrs	r1, r1, #1
 8008260:	ea5f 0030 	movs.w	r0, r0, rrx
 8008264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8008268:	f104 0401 	add.w	r4, r4, #1
 800826c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8008270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8008274:	f080 809a 	bcs.w	80083ac <__adddf3+0x240>
 8008278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800827c:	bf08      	it	eq
 800827e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008282:	f150 0000 	adcs.w	r0, r0, #0
 8008286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800828a:	ea41 0105 	orr.w	r1, r1, r5
 800828e:	bd30      	pop	{r4, r5, pc}
 8008290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008294:	4140      	adcs	r0, r0
 8008296:	eb41 0101 	adc.w	r1, r1, r1
 800829a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800829e:	f1a4 0401 	sub.w	r4, r4, #1
 80082a2:	d1e9      	bne.n	8008278 <__adddf3+0x10c>
 80082a4:	f091 0f00 	teq	r1, #0
 80082a8:	bf04      	itt	eq
 80082aa:	4601      	moveq	r1, r0
 80082ac:	2000      	moveq	r0, #0
 80082ae:	fab1 f381 	clz	r3, r1
 80082b2:	bf08      	it	eq
 80082b4:	3320      	addeq	r3, #32
 80082b6:	f1a3 030b 	sub.w	r3, r3, #11
 80082ba:	f1b3 0220 	subs.w	r2, r3, #32
 80082be:	da0c      	bge.n	80082da <__adddf3+0x16e>
 80082c0:	320c      	adds	r2, #12
 80082c2:	dd08      	ble.n	80082d6 <__adddf3+0x16a>
 80082c4:	f102 0c14 	add.w	ip, r2, #20
 80082c8:	f1c2 020c 	rsb	r2, r2, #12
 80082cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80082d0:	fa21 f102 	lsr.w	r1, r1, r2
 80082d4:	e00c      	b.n	80082f0 <__adddf3+0x184>
 80082d6:	f102 0214 	add.w	r2, r2, #20
 80082da:	bfd8      	it	le
 80082dc:	f1c2 0c20 	rsble	ip, r2, #32
 80082e0:	fa01 f102 	lsl.w	r1, r1, r2
 80082e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80082e8:	bfdc      	itt	le
 80082ea:	ea41 010c 	orrle.w	r1, r1, ip
 80082ee:	4090      	lslle	r0, r2
 80082f0:	1ae4      	subs	r4, r4, r3
 80082f2:	bfa2      	ittt	ge
 80082f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80082f8:	4329      	orrge	r1, r5
 80082fa:	bd30      	popge	{r4, r5, pc}
 80082fc:	ea6f 0404 	mvn.w	r4, r4
 8008300:	3c1f      	subs	r4, #31
 8008302:	da1c      	bge.n	800833e <__adddf3+0x1d2>
 8008304:	340c      	adds	r4, #12
 8008306:	dc0e      	bgt.n	8008326 <__adddf3+0x1ba>
 8008308:	f104 0414 	add.w	r4, r4, #20
 800830c:	f1c4 0220 	rsb	r2, r4, #32
 8008310:	fa20 f004 	lsr.w	r0, r0, r4
 8008314:	fa01 f302 	lsl.w	r3, r1, r2
 8008318:	ea40 0003 	orr.w	r0, r0, r3
 800831c:	fa21 f304 	lsr.w	r3, r1, r4
 8008320:	ea45 0103 	orr.w	r1, r5, r3
 8008324:	bd30      	pop	{r4, r5, pc}
 8008326:	f1c4 040c 	rsb	r4, r4, #12
 800832a:	f1c4 0220 	rsb	r2, r4, #32
 800832e:	fa20 f002 	lsr.w	r0, r0, r2
 8008332:	fa01 f304 	lsl.w	r3, r1, r4
 8008336:	ea40 0003 	orr.w	r0, r0, r3
 800833a:	4629      	mov	r1, r5
 800833c:	bd30      	pop	{r4, r5, pc}
 800833e:	fa21 f004 	lsr.w	r0, r1, r4
 8008342:	4629      	mov	r1, r5
 8008344:	bd30      	pop	{r4, r5, pc}
 8008346:	f094 0f00 	teq	r4, #0
 800834a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800834e:	bf06      	itte	eq
 8008350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8008354:	3401      	addeq	r4, #1
 8008356:	3d01      	subne	r5, #1
 8008358:	e74e      	b.n	80081f8 <__adddf3+0x8c>
 800835a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800835e:	bf18      	it	ne
 8008360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008364:	d029      	beq.n	80083ba <__adddf3+0x24e>
 8008366:	ea94 0f05 	teq	r4, r5
 800836a:	bf08      	it	eq
 800836c:	ea90 0f02 	teqeq	r0, r2
 8008370:	d005      	beq.n	800837e <__adddf3+0x212>
 8008372:	ea54 0c00 	orrs.w	ip, r4, r0
 8008376:	bf04      	itt	eq
 8008378:	4619      	moveq	r1, r3
 800837a:	4610      	moveq	r0, r2
 800837c:	bd30      	pop	{r4, r5, pc}
 800837e:	ea91 0f03 	teq	r1, r3
 8008382:	bf1e      	ittt	ne
 8008384:	2100      	movne	r1, #0
 8008386:	2000      	movne	r0, #0
 8008388:	bd30      	popne	{r4, r5, pc}
 800838a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800838e:	d105      	bne.n	800839c <__adddf3+0x230>
 8008390:	0040      	lsls	r0, r0, #1
 8008392:	4149      	adcs	r1, r1
 8008394:	bf28      	it	cs
 8008396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800839a:	bd30      	pop	{r4, r5, pc}
 800839c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80083a0:	bf3c      	itt	cc
 80083a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80083a6:	bd30      	popcc	{r4, r5, pc}
 80083a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80083ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80083b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80083b4:	f04f 0000 	mov.w	r0, #0
 80083b8:	bd30      	pop	{r4, r5, pc}
 80083ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80083be:	bf1a      	itte	ne
 80083c0:	4619      	movne	r1, r3
 80083c2:	4610      	movne	r0, r2
 80083c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80083c8:	bf1c      	itt	ne
 80083ca:	460b      	movne	r3, r1
 80083cc:	4602      	movne	r2, r0
 80083ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80083d2:	bf06      	itte	eq
 80083d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80083d8:	ea91 0f03 	teqeq	r1, r3
 80083dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80083e0:	bd30      	pop	{r4, r5, pc}
 80083e2:	bf00      	nop

080083e4 <__aeabi_ui2d>:
 80083e4:	f090 0f00 	teq	r0, #0
 80083e8:	bf04      	itt	eq
 80083ea:	2100      	moveq	r1, #0
 80083ec:	4770      	bxeq	lr
 80083ee:	b530      	push	{r4, r5, lr}
 80083f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80083f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80083f8:	f04f 0500 	mov.w	r5, #0
 80083fc:	f04f 0100 	mov.w	r1, #0
 8008400:	e750      	b.n	80082a4 <__adddf3+0x138>
 8008402:	bf00      	nop

08008404 <__aeabi_i2d>:
 8008404:	f090 0f00 	teq	r0, #0
 8008408:	bf04      	itt	eq
 800840a:	2100      	moveq	r1, #0
 800840c:	4770      	bxeq	lr
 800840e:	b530      	push	{r4, r5, lr}
 8008410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800841c:	bf48      	it	mi
 800841e:	4240      	negmi	r0, r0
 8008420:	f04f 0100 	mov.w	r1, #0
 8008424:	e73e      	b.n	80082a4 <__adddf3+0x138>
 8008426:	bf00      	nop

08008428 <__aeabi_f2d>:
 8008428:	0042      	lsls	r2, r0, #1
 800842a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800842e:	ea4f 0131 	mov.w	r1, r1, rrx
 8008432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8008436:	bf1f      	itttt	ne
 8008438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800843c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8008440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8008444:	4770      	bxne	lr
 8008446:	f092 0f00 	teq	r2, #0
 800844a:	bf14      	ite	ne
 800844c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8008450:	4770      	bxeq	lr
 8008452:	b530      	push	{r4, r5, lr}
 8008454:	f44f 7460 	mov.w	r4, #896	; 0x380
 8008458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800845c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008460:	e720      	b.n	80082a4 <__adddf3+0x138>
 8008462:	bf00      	nop

08008464 <__aeabi_ul2d>:
 8008464:	ea50 0201 	orrs.w	r2, r0, r1
 8008468:	bf08      	it	eq
 800846a:	4770      	bxeq	lr
 800846c:	b530      	push	{r4, r5, lr}
 800846e:	f04f 0500 	mov.w	r5, #0
 8008472:	e00a      	b.n	800848a <__aeabi_l2d+0x16>

08008474 <__aeabi_l2d>:
 8008474:	ea50 0201 	orrs.w	r2, r0, r1
 8008478:	bf08      	it	eq
 800847a:	4770      	bxeq	lr
 800847c:	b530      	push	{r4, r5, lr}
 800847e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8008482:	d502      	bpl.n	800848a <__aeabi_l2d+0x16>
 8008484:	4240      	negs	r0, r0
 8008486:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800848a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800848e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008492:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8008496:	f43f aedc 	beq.w	8008252 <__adddf3+0xe6>
 800849a:	f04f 0203 	mov.w	r2, #3
 800849e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80084a2:	bf18      	it	ne
 80084a4:	3203      	addne	r2, #3
 80084a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80084aa:	bf18      	it	ne
 80084ac:	3203      	addne	r2, #3
 80084ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80084b2:	f1c2 0320 	rsb	r3, r2, #32
 80084b6:	fa00 fc03 	lsl.w	ip, r0, r3
 80084ba:	fa20 f002 	lsr.w	r0, r0, r2
 80084be:	fa01 fe03 	lsl.w	lr, r1, r3
 80084c2:	ea40 000e 	orr.w	r0, r0, lr
 80084c6:	fa21 f102 	lsr.w	r1, r1, r2
 80084ca:	4414      	add	r4, r2
 80084cc:	e6c1      	b.n	8008252 <__adddf3+0xe6>
 80084ce:	bf00      	nop

080084d0 <__aeabi_dmul>:
 80084d0:	b570      	push	{r4, r5, r6, lr}
 80084d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80084d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80084da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80084de:	bf1d      	ittte	ne
 80084e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80084e4:	ea94 0f0c 	teqne	r4, ip
 80084e8:	ea95 0f0c 	teqne	r5, ip
 80084ec:	f000 f8de 	bleq	80086ac <__aeabi_dmul+0x1dc>
 80084f0:	442c      	add	r4, r5
 80084f2:	ea81 0603 	eor.w	r6, r1, r3
 80084f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80084fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80084fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8008502:	bf18      	it	ne
 8008504:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8008508:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800850c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008510:	d038      	beq.n	8008584 <__aeabi_dmul+0xb4>
 8008512:	fba0 ce02 	umull	ip, lr, r0, r2
 8008516:	f04f 0500 	mov.w	r5, #0
 800851a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800851e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8008522:	fbe0 e503 	umlal	lr, r5, r0, r3
 8008526:	f04f 0600 	mov.w	r6, #0
 800852a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800852e:	f09c 0f00 	teq	ip, #0
 8008532:	bf18      	it	ne
 8008534:	f04e 0e01 	orrne.w	lr, lr, #1
 8008538:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800853c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8008540:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8008544:	d204      	bcs.n	8008550 <__aeabi_dmul+0x80>
 8008546:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800854a:	416d      	adcs	r5, r5
 800854c:	eb46 0606 	adc.w	r6, r6, r6
 8008550:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8008554:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8008558:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800855c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8008560:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8008564:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8008568:	bf88      	it	hi
 800856a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800856e:	d81e      	bhi.n	80085ae <__aeabi_dmul+0xde>
 8008570:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8008574:	bf08      	it	eq
 8008576:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800857a:	f150 0000 	adcs.w	r0, r0, #0
 800857e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8008582:	bd70      	pop	{r4, r5, r6, pc}
 8008584:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8008588:	ea46 0101 	orr.w	r1, r6, r1
 800858c:	ea40 0002 	orr.w	r0, r0, r2
 8008590:	ea81 0103 	eor.w	r1, r1, r3
 8008594:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8008598:	bfc2      	ittt	gt
 800859a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800859e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80085a2:	bd70      	popgt	{r4, r5, r6, pc}
 80085a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80085a8:	f04f 0e00 	mov.w	lr, #0
 80085ac:	3c01      	subs	r4, #1
 80085ae:	f300 80ab 	bgt.w	8008708 <__aeabi_dmul+0x238>
 80085b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80085b6:	bfde      	ittt	le
 80085b8:	2000      	movle	r0, #0
 80085ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80085be:	bd70      	pople	{r4, r5, r6, pc}
 80085c0:	f1c4 0400 	rsb	r4, r4, #0
 80085c4:	3c20      	subs	r4, #32
 80085c6:	da35      	bge.n	8008634 <__aeabi_dmul+0x164>
 80085c8:	340c      	adds	r4, #12
 80085ca:	dc1b      	bgt.n	8008604 <__aeabi_dmul+0x134>
 80085cc:	f104 0414 	add.w	r4, r4, #20
 80085d0:	f1c4 0520 	rsb	r5, r4, #32
 80085d4:	fa00 f305 	lsl.w	r3, r0, r5
 80085d8:	fa20 f004 	lsr.w	r0, r0, r4
 80085dc:	fa01 f205 	lsl.w	r2, r1, r5
 80085e0:	ea40 0002 	orr.w	r0, r0, r2
 80085e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80085e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80085ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80085f0:	fa21 f604 	lsr.w	r6, r1, r4
 80085f4:	eb42 0106 	adc.w	r1, r2, r6
 80085f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085fc:	bf08      	it	eq
 80085fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008602:	bd70      	pop	{r4, r5, r6, pc}
 8008604:	f1c4 040c 	rsb	r4, r4, #12
 8008608:	f1c4 0520 	rsb	r5, r4, #32
 800860c:	fa00 f304 	lsl.w	r3, r0, r4
 8008610:	fa20 f005 	lsr.w	r0, r0, r5
 8008614:	fa01 f204 	lsl.w	r2, r1, r4
 8008618:	ea40 0002 	orr.w	r0, r0, r2
 800861c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008620:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008624:	f141 0100 	adc.w	r1, r1, #0
 8008628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800862c:	bf08      	it	eq
 800862e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008632:	bd70      	pop	{r4, r5, r6, pc}
 8008634:	f1c4 0520 	rsb	r5, r4, #32
 8008638:	fa00 f205 	lsl.w	r2, r0, r5
 800863c:	ea4e 0e02 	orr.w	lr, lr, r2
 8008640:	fa20 f304 	lsr.w	r3, r0, r4
 8008644:	fa01 f205 	lsl.w	r2, r1, r5
 8008648:	ea43 0302 	orr.w	r3, r3, r2
 800864c:	fa21 f004 	lsr.w	r0, r1, r4
 8008650:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008654:	fa21 f204 	lsr.w	r2, r1, r4
 8008658:	ea20 0002 	bic.w	r0, r0, r2
 800865c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8008660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008664:	bf08      	it	eq
 8008666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800866a:	bd70      	pop	{r4, r5, r6, pc}
 800866c:	f094 0f00 	teq	r4, #0
 8008670:	d10f      	bne.n	8008692 <__aeabi_dmul+0x1c2>
 8008672:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8008676:	0040      	lsls	r0, r0, #1
 8008678:	eb41 0101 	adc.w	r1, r1, r1
 800867c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008680:	bf08      	it	eq
 8008682:	3c01      	subeq	r4, #1
 8008684:	d0f7      	beq.n	8008676 <__aeabi_dmul+0x1a6>
 8008686:	ea41 0106 	orr.w	r1, r1, r6
 800868a:	f095 0f00 	teq	r5, #0
 800868e:	bf18      	it	ne
 8008690:	4770      	bxne	lr
 8008692:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8008696:	0052      	lsls	r2, r2, #1
 8008698:	eb43 0303 	adc.w	r3, r3, r3
 800869c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80086a0:	bf08      	it	eq
 80086a2:	3d01      	subeq	r5, #1
 80086a4:	d0f7      	beq.n	8008696 <__aeabi_dmul+0x1c6>
 80086a6:	ea43 0306 	orr.w	r3, r3, r6
 80086aa:	4770      	bx	lr
 80086ac:	ea94 0f0c 	teq	r4, ip
 80086b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80086b4:	bf18      	it	ne
 80086b6:	ea95 0f0c 	teqne	r5, ip
 80086ba:	d00c      	beq.n	80086d6 <__aeabi_dmul+0x206>
 80086bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80086c0:	bf18      	it	ne
 80086c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80086c6:	d1d1      	bne.n	800866c <__aeabi_dmul+0x19c>
 80086c8:	ea81 0103 	eor.w	r1, r1, r3
 80086cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80086d0:	f04f 0000 	mov.w	r0, #0
 80086d4:	bd70      	pop	{r4, r5, r6, pc}
 80086d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80086da:	bf06      	itte	eq
 80086dc:	4610      	moveq	r0, r2
 80086de:	4619      	moveq	r1, r3
 80086e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80086e4:	d019      	beq.n	800871a <__aeabi_dmul+0x24a>
 80086e6:	ea94 0f0c 	teq	r4, ip
 80086ea:	d102      	bne.n	80086f2 <__aeabi_dmul+0x222>
 80086ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80086f0:	d113      	bne.n	800871a <__aeabi_dmul+0x24a>
 80086f2:	ea95 0f0c 	teq	r5, ip
 80086f6:	d105      	bne.n	8008704 <__aeabi_dmul+0x234>
 80086f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80086fc:	bf1c      	itt	ne
 80086fe:	4610      	movne	r0, r2
 8008700:	4619      	movne	r1, r3
 8008702:	d10a      	bne.n	800871a <__aeabi_dmul+0x24a>
 8008704:	ea81 0103 	eor.w	r1, r1, r3
 8008708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800870c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8008710:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008714:	f04f 0000 	mov.w	r0, #0
 8008718:	bd70      	pop	{r4, r5, r6, pc}
 800871a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800871e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8008722:	bd70      	pop	{r4, r5, r6, pc}

08008724 <__aeabi_ddiv>:
 8008724:	b570      	push	{r4, r5, r6, lr}
 8008726:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800872a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800872e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008732:	bf1d      	ittte	ne
 8008734:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8008738:	ea94 0f0c 	teqne	r4, ip
 800873c:	ea95 0f0c 	teqne	r5, ip
 8008740:	f000 f8a7 	bleq	8008892 <__aeabi_ddiv+0x16e>
 8008744:	eba4 0405 	sub.w	r4, r4, r5
 8008748:	ea81 0e03 	eor.w	lr, r1, r3
 800874c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008750:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8008754:	f000 8088 	beq.w	8008868 <__aeabi_ddiv+0x144>
 8008758:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800875c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8008760:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8008764:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8008768:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800876c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8008770:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8008774:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8008778:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800877c:	429d      	cmp	r5, r3
 800877e:	bf08      	it	eq
 8008780:	4296      	cmpeq	r6, r2
 8008782:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8008786:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800878a:	d202      	bcs.n	8008792 <__aeabi_ddiv+0x6e>
 800878c:	085b      	lsrs	r3, r3, #1
 800878e:	ea4f 0232 	mov.w	r2, r2, rrx
 8008792:	1ab6      	subs	r6, r6, r2
 8008794:	eb65 0503 	sbc.w	r5, r5, r3
 8008798:	085b      	lsrs	r3, r3, #1
 800879a:	ea4f 0232 	mov.w	r2, r2, rrx
 800879e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80087a2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80087a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80087aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80087ae:	bf22      	ittt	cs
 80087b0:	1ab6      	subcs	r6, r6, r2
 80087b2:	4675      	movcs	r5, lr
 80087b4:	ea40 000c 	orrcs.w	r0, r0, ip
 80087b8:	085b      	lsrs	r3, r3, #1
 80087ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80087be:	ebb6 0e02 	subs.w	lr, r6, r2
 80087c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80087c6:	bf22      	ittt	cs
 80087c8:	1ab6      	subcs	r6, r6, r2
 80087ca:	4675      	movcs	r5, lr
 80087cc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80087d0:	085b      	lsrs	r3, r3, #1
 80087d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80087d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80087da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80087de:	bf22      	ittt	cs
 80087e0:	1ab6      	subcs	r6, r6, r2
 80087e2:	4675      	movcs	r5, lr
 80087e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80087e8:	085b      	lsrs	r3, r3, #1
 80087ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80087ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80087f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80087f6:	bf22      	ittt	cs
 80087f8:	1ab6      	subcs	r6, r6, r2
 80087fa:	4675      	movcs	r5, lr
 80087fc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008800:	ea55 0e06 	orrs.w	lr, r5, r6
 8008804:	d018      	beq.n	8008838 <__aeabi_ddiv+0x114>
 8008806:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800880a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800880e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8008812:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8008816:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800881a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800881e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8008822:	d1c0      	bne.n	80087a6 <__aeabi_ddiv+0x82>
 8008824:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008828:	d10b      	bne.n	8008842 <__aeabi_ddiv+0x11e>
 800882a:	ea41 0100 	orr.w	r1, r1, r0
 800882e:	f04f 0000 	mov.w	r0, #0
 8008832:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8008836:	e7b6      	b.n	80087a6 <__aeabi_ddiv+0x82>
 8008838:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800883c:	bf04      	itt	eq
 800883e:	4301      	orreq	r1, r0
 8008840:	2000      	moveq	r0, #0
 8008842:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8008846:	bf88      	it	hi
 8008848:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800884c:	f63f aeaf 	bhi.w	80085ae <__aeabi_dmul+0xde>
 8008850:	ebb5 0c03 	subs.w	ip, r5, r3
 8008854:	bf04      	itt	eq
 8008856:	ebb6 0c02 	subseq.w	ip, r6, r2
 800885a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800885e:	f150 0000 	adcs.w	r0, r0, #0
 8008862:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8008866:	bd70      	pop	{r4, r5, r6, pc}
 8008868:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800886c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8008870:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8008874:	bfc2      	ittt	gt
 8008876:	ebd4 050c 	rsbsgt	r5, r4, ip
 800887a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800887e:	bd70      	popgt	{r4, r5, r6, pc}
 8008880:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008884:	f04f 0e00 	mov.w	lr, #0
 8008888:	3c01      	subs	r4, #1
 800888a:	e690      	b.n	80085ae <__aeabi_dmul+0xde>
 800888c:	ea45 0e06 	orr.w	lr, r5, r6
 8008890:	e68d      	b.n	80085ae <__aeabi_dmul+0xde>
 8008892:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8008896:	ea94 0f0c 	teq	r4, ip
 800889a:	bf08      	it	eq
 800889c:	ea95 0f0c 	teqeq	r5, ip
 80088a0:	f43f af3b 	beq.w	800871a <__aeabi_dmul+0x24a>
 80088a4:	ea94 0f0c 	teq	r4, ip
 80088a8:	d10a      	bne.n	80088c0 <__aeabi_ddiv+0x19c>
 80088aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80088ae:	f47f af34 	bne.w	800871a <__aeabi_dmul+0x24a>
 80088b2:	ea95 0f0c 	teq	r5, ip
 80088b6:	f47f af25 	bne.w	8008704 <__aeabi_dmul+0x234>
 80088ba:	4610      	mov	r0, r2
 80088bc:	4619      	mov	r1, r3
 80088be:	e72c      	b.n	800871a <__aeabi_dmul+0x24a>
 80088c0:	ea95 0f0c 	teq	r5, ip
 80088c4:	d106      	bne.n	80088d4 <__aeabi_ddiv+0x1b0>
 80088c6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80088ca:	f43f aefd 	beq.w	80086c8 <__aeabi_dmul+0x1f8>
 80088ce:	4610      	mov	r0, r2
 80088d0:	4619      	mov	r1, r3
 80088d2:	e722      	b.n	800871a <__aeabi_dmul+0x24a>
 80088d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80088d8:	bf18      	it	ne
 80088da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80088de:	f47f aec5 	bne.w	800866c <__aeabi_dmul+0x19c>
 80088e2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80088e6:	f47f af0d 	bne.w	8008704 <__aeabi_dmul+0x234>
 80088ea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80088ee:	f47f aeeb 	bne.w	80086c8 <__aeabi_dmul+0x1f8>
 80088f2:	e712      	b.n	800871a <__aeabi_dmul+0x24a>

080088f4 <__gedf2>:
 80088f4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80088f8:	e006      	b.n	8008908 <__cmpdf2+0x4>
 80088fa:	bf00      	nop

080088fc <__ledf2>:
 80088fc:	f04f 0c01 	mov.w	ip, #1
 8008900:	e002      	b.n	8008908 <__cmpdf2+0x4>
 8008902:	bf00      	nop

08008904 <__cmpdf2>:
 8008904:	f04f 0c01 	mov.w	ip, #1
 8008908:	f84d cd04 	str.w	ip, [sp, #-4]!
 800890c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008910:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008914:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008918:	bf18      	it	ne
 800891a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800891e:	d01b      	beq.n	8008958 <__cmpdf2+0x54>
 8008920:	b001      	add	sp, #4
 8008922:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8008926:	bf0c      	ite	eq
 8008928:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800892c:	ea91 0f03 	teqne	r1, r3
 8008930:	bf02      	ittt	eq
 8008932:	ea90 0f02 	teqeq	r0, r2
 8008936:	2000      	moveq	r0, #0
 8008938:	4770      	bxeq	lr
 800893a:	f110 0f00 	cmn.w	r0, #0
 800893e:	ea91 0f03 	teq	r1, r3
 8008942:	bf58      	it	pl
 8008944:	4299      	cmppl	r1, r3
 8008946:	bf08      	it	eq
 8008948:	4290      	cmpeq	r0, r2
 800894a:	bf2c      	ite	cs
 800894c:	17d8      	asrcs	r0, r3, #31
 800894e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8008952:	f040 0001 	orr.w	r0, r0, #1
 8008956:	4770      	bx	lr
 8008958:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800895c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008960:	d102      	bne.n	8008968 <__cmpdf2+0x64>
 8008962:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8008966:	d107      	bne.n	8008978 <__cmpdf2+0x74>
 8008968:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800896c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008970:	d1d6      	bne.n	8008920 <__cmpdf2+0x1c>
 8008972:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8008976:	d0d3      	beq.n	8008920 <__cmpdf2+0x1c>
 8008978:	f85d 0b04 	ldr.w	r0, [sp], #4
 800897c:	4770      	bx	lr
 800897e:	bf00      	nop

08008980 <__aeabi_cdrcmple>:
 8008980:	4684      	mov	ip, r0
 8008982:	4610      	mov	r0, r2
 8008984:	4662      	mov	r2, ip
 8008986:	468c      	mov	ip, r1
 8008988:	4619      	mov	r1, r3
 800898a:	4663      	mov	r3, ip
 800898c:	e000      	b.n	8008990 <__aeabi_cdcmpeq>
 800898e:	bf00      	nop

08008990 <__aeabi_cdcmpeq>:
 8008990:	b501      	push	{r0, lr}
 8008992:	f7ff ffb7 	bl	8008904 <__cmpdf2>
 8008996:	2800      	cmp	r0, #0
 8008998:	bf48      	it	mi
 800899a:	f110 0f00 	cmnmi.w	r0, #0
 800899e:	bd01      	pop	{r0, pc}

080089a0 <__aeabi_dcmpeq>:
 80089a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80089a4:	f7ff fff4 	bl	8008990 <__aeabi_cdcmpeq>
 80089a8:	bf0c      	ite	eq
 80089aa:	2001      	moveq	r0, #1
 80089ac:	2000      	movne	r0, #0
 80089ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80089b2:	bf00      	nop

080089b4 <__aeabi_dcmplt>:
 80089b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80089b8:	f7ff ffea 	bl	8008990 <__aeabi_cdcmpeq>
 80089bc:	bf34      	ite	cc
 80089be:	2001      	movcc	r0, #1
 80089c0:	2000      	movcs	r0, #0
 80089c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80089c6:	bf00      	nop

080089c8 <__aeabi_dcmple>:
 80089c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80089cc:	f7ff ffe0 	bl	8008990 <__aeabi_cdcmpeq>
 80089d0:	bf94      	ite	ls
 80089d2:	2001      	movls	r0, #1
 80089d4:	2000      	movhi	r0, #0
 80089d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80089da:	bf00      	nop

080089dc <__aeabi_dcmpge>:
 80089dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80089e0:	f7ff ffce 	bl	8008980 <__aeabi_cdrcmple>
 80089e4:	bf94      	ite	ls
 80089e6:	2001      	movls	r0, #1
 80089e8:	2000      	movhi	r0, #0
 80089ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80089ee:	bf00      	nop

080089f0 <__aeabi_dcmpgt>:
 80089f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80089f4:	f7ff ffc4 	bl	8008980 <__aeabi_cdrcmple>
 80089f8:	bf34      	ite	cc
 80089fa:	2001      	movcc	r0, #1
 80089fc:	2000      	movcs	r0, #0
 80089fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8008a02:	bf00      	nop

08008a04 <__aeabi_d2iz>:
 8008a04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008a08:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8008a0c:	d215      	bcs.n	8008a3a <__aeabi_d2iz+0x36>
 8008a0e:	d511      	bpl.n	8008a34 <__aeabi_d2iz+0x30>
 8008a10:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8008a14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8008a18:	d912      	bls.n	8008a40 <__aeabi_d2iz+0x3c>
 8008a1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008a1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008a22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8008a26:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008a2a:	fa23 f002 	lsr.w	r0, r3, r2
 8008a2e:	bf18      	it	ne
 8008a30:	4240      	negne	r0, r0
 8008a32:	4770      	bx	lr
 8008a34:	f04f 0000 	mov.w	r0, #0
 8008a38:	4770      	bx	lr
 8008a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008a3e:	d105      	bne.n	8008a4c <__aeabi_d2iz+0x48>
 8008a40:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8008a44:	bf08      	it	eq
 8008a46:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8008a4a:	4770      	bx	lr
 8008a4c:	f04f 0000 	mov.w	r0, #0
 8008a50:	4770      	bx	lr
 8008a52:	bf00      	nop

08008a54 <main>:
#include "spi.h"

#include "i2c.h"
#include "ST7032i.h"

int main(void) {
 8008a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a58:	b0a0      	sub	sp, #128	; 0x80
	uint32_t intval = 40;
	uint32_t tnow;
	char tmp[92];
	ST7032i lcd;

	TIM2_timer_start();
 8008a5a:	f7f7 fb95 	bl	8000188 <TIM2_timer_start>

	usart_begin(&Serial2, PA3, PA2, 19200);
 8008a5e:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
 8008a62:	f44f 7281 	mov.w	r2, #258	; 0x102
 8008a66:	48cd      	ldr	r0, [pc, #820]	; (8008d9c <main+0x348>)
 8008a68:	f240 1103 	movw	r1, #259	; 0x103
 8008a6c:	f7f8 f88c 	bl	8000b88 <usart_begin>
	usart_print(&Serial2,
 8008a70:	48ca      	ldr	r0, [pc, #808]	; (8008d9c <main+0x348>)
 8008a72:	49cb      	ldr	r1, [pc, #812]	; (8008da0 <main+0x34c>)
 8008a74:	f7f8 f9fc 	bl	8000e70 <usart_print>
			"Happy are those who know they are spiritually poor; \n");
	usart_print(&Serial2, "The kingdom of heaven belongs to them!\n");
 8008a78:	48c8      	ldr	r0, [pc, #800]	; (8008d9c <main+0x348>)
 8008a7a:	49ca      	ldr	r1, [pc, #808]	; (8008da4 <main+0x350>)
 8008a7c:	f7f8 f9f8 	bl	8000e70 <usart_print>
	usart_print(&Serial2, "How many eyes does Mississipi river have?\n");
 8008a80:	48c6      	ldr	r0, [pc, #792]	; (8008d9c <main+0x348>)
 8008a82:	49c9      	ldr	r1, [pc, #804]	; (8008da8 <main+0x354>)
 8008a84:	f7f8 f9f4 	bl	8000e70 <usart_print>
	usart_print(&Serial2, "Quick brown fox jumped over the lazy dog!\n");
 8008a88:	49c8      	ldr	r1, [pc, #800]	; (8008dac <main+0x358>)
 8008a8a:	48c4      	ldr	r0, [pc, #784]	; (8008d9c <main+0x348>)
 8008a8c:	f7f8 f9f0 	bl	8000e70 <usart_print>
	usart_flush(&Serial2);
 8008a90:	48c2      	ldr	r0, [pc, #776]	; (8008d9c <main+0x348>)

	RCC_ClocksTypeDef RCC_Clocks;
	RCC_GetClocksFreq(&RCC_Clocks);

	sprintf(tmp, "SYSCLK = %ld, ", RCC_Clocks.SYSCLK_Frequency);
 8008a92:	ac02      	add	r4, sp, #8
	usart_print(&Serial2,
			"Happy are those who know they are spiritually poor; \n");
	usart_print(&Serial2, "The kingdom of heaven belongs to them!\n");
	usart_print(&Serial2, "How many eyes does Mississipi river have?\n");
	usart_print(&Serial2, "Quick brown fox jumped over the lazy dog!\n");
	usart_flush(&Serial2);
 8008a94:	f7f8 fa06 	bl	8000ea4 <usart_flush>

	RCC_ClocksTypeDef RCC_Clocks;
	RCC_GetClocksFreq(&RCC_Clocks);
 8008a98:	a819      	add	r0, sp, #100	; 0x64
 8008a9a:	f7f9 f80b 	bl	8001ab4 <RCC_GetClocksFreq>

	sprintf(tmp, "SYSCLK = %ld, ", RCC_Clocks.SYSCLK_Frequency);
 8008a9e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008aa0:	49c3      	ldr	r1, [pc, #780]	; (8008db0 <main+0x35c>)
 8008aa2:	4620      	mov	r0, r4
 8008aa4:	f7fb f824 	bl	8003af0 <sprintf>
	usart_print(&Serial2, tmp);
 8008aa8:	4621      	mov	r1, r4
 8008aaa:	48bc      	ldr	r0, [pc, #752]	; (8008d9c <main+0x348>)
 8008aac:	f7f8 f9e0 	bl	8000e70 <usart_print>
	sprintf(tmp, "HCLK = %ld, ", RCC_Clocks.HCLK_Frequency);
 8008ab0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008ab2:	49c0      	ldr	r1, [pc, #768]	; (8008db4 <main+0x360>)
 8008ab4:	4620      	mov	r0, r4
 8008ab6:	f7fb f81b 	bl	8003af0 <sprintf>
	usart_print(&Serial2, tmp);
 8008aba:	4621      	mov	r1, r4
 8008abc:	48b7      	ldr	r0, [pc, #732]	; (8008d9c <main+0x348>)
 8008abe:	f7f8 f9d7 	bl	8000e70 <usart_print>
	sprintf(tmp, "PCLK1 = %ld, ", RCC_Clocks.PCLK1_Frequency);
 8008ac2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008ac4:	49bc      	ldr	r1, [pc, #752]	; (8008db8 <main+0x364>)
 8008ac6:	4620      	mov	r0, r4
 8008ac8:	f7fb f812 	bl	8003af0 <sprintf>
	usart_print(&Serial2, tmp);
 8008acc:	4621      	mov	r1, r4
 8008ace:	48b3      	ldr	r0, [pc, #716]	; (8008d9c <main+0x348>)
 8008ad0:	f7f8 f9ce 	bl	8000e70 <usart_print>
	sprintf(tmp, "PCLK2 = %ld\r\n", RCC_Clocks.PCLK2_Frequency);
 8008ad4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008ad6:	49b9      	ldr	r1, [pc, #740]	; (8008dbc <main+0x368>)
 8008ad8:	4620      	mov	r0, r4
 8008ada:	f7fb f809 	bl	8003af0 <sprintf>
	usart_print(&Serial2, tmp);
 8008ade:	4621      	mov	r1, r4
 8008ae0:	48ae      	ldr	r0, [pc, #696]	; (8008d9c <main+0x348>)
 8008ae2:	f7f8 f9c5 	bl	8000e70 <usart_print>
//	usart_flush(USART2Serial);

	GPIOMode(PinPort(PD12),
 8008ae6:	f240 400c 	movw	r0, #1036	; 0x40c
 8008aea:	f7f7 fbe9 	bl	80002c0 <PinPort>
 8008aee:	4606      	mov	r6, r0
			(PinBit(PD12) | PinBit(PD13) | PinBit(PD14) | PinBit(PD15)), OUTPUT,
 8008af0:	f240 400c 	movw	r0, #1036	; 0x40c
 8008af4:	f7f7 fbee 	bl	80002d4 <PinBit>
 8008af8:	4605      	mov	r5, r0
 8008afa:	f240 400d 	movw	r0, #1037	; 0x40d
 8008afe:	f7f7 fbe9 	bl	80002d4 <PinBit>
	usart_print(&Serial2, tmp);
	sprintf(tmp, "PCLK2 = %ld\r\n", RCC_Clocks.PCLK2_Frequency);
	usart_print(&Serial2, tmp);
//	usart_flush(USART2Serial);

	GPIOMode(PinPort(PD12),
 8008b02:	4305      	orrs	r5, r0
			(PinBit(PD12) | PinBit(PD13) | PinBit(PD14) | PinBit(PD15)), OUTPUT,
 8008b04:	f240 400e 	movw	r0, #1038	; 0x40e
 8008b08:	f7f7 fbe4 	bl	80002d4 <PinBit>
	usart_print(&Serial2, tmp);
	sprintf(tmp, "PCLK2 = %ld\r\n", RCC_Clocks.PCLK2_Frequency);
	usart_print(&Serial2, tmp);
//	usart_flush(USART2Serial);

	GPIOMode(PinPort(PD12),
 8008b0c:	b2ad      	uxth	r5, r5
 8008b0e:	4305      	orrs	r5, r0
			(PinBit(PD12) | PinBit(PD13) | PinBit(PD14) | PinBit(PD15)), OUTPUT,
 8008b10:	f240 400f 	movw	r0, #1039	; 0x40f
 8008b14:	f7f7 fbde 	bl	80002d4 <PinBit>
	usart_print(&Serial2, tmp);
	sprintf(tmp, "PCLK2 = %ld\r\n", RCC_Clocks.PCLK2_Frequency);
	usart_print(&Serial2, tmp);
//	usart_flush(USART2Serial);

	GPIOMode(PinPort(PD12),
 8008b18:	b2ad      	uxth	r5, r5
 8008b1a:	ea45 0100 	orr.w	r1, r5, r0
 8008b1e:	2201      	movs	r2, #1
 8008b20:	2500      	movs	r5, #0
 8008b22:	4630      	mov	r0, r6
 8008b24:	2302      	movs	r3, #2
 8008b26:	b289      	uxth	r1, r1
 8008b28:	9500      	str	r5, [sp, #0]
 8008b2a:	9501      	str	r5, [sp, #4]
 8008b2c:	f7f7 fc40 	bl	80003b0 <GPIOMode>
	 pinMode(PD14, OUTPUT);
	 pinMode(PD15, OUTPUT);
	 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15),
	 GPIO_Mode_OUT, GPIO_Speed_50MHz, GPIO_OType_PP, GPIO_PuPd_NOPULL);
	 */
	spi_begin(SPI2, PB13, PB14, PB15, PB12);
 8008b30:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 8008b34:	f240 220e 	movw	r2, #526	; 0x20e
 8008b38:	f240 230f 	movw	r3, #527	; 0x20f
 8008b3c:	f44f 7503 	mov.w	r5, #524	; 0x20c
 8008b40:	f240 210d 	movw	r1, #525	; 0x20d
 8008b44:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8008b48:	9500      	str	r5, [sp, #0]
 8008b4a:	f7f7 fe9b 	bl	8000884 <spi_begin>
	digitalWrite(PB12, HIGH);
 8008b4e:	2101      	movs	r1, #1
 8008b50:	4628      	mov	r0, r5
 8008b52:	f7f7 fbf3 	bl	800033c <digitalWrite>

	i2c_begin(100000);
 8008b56:	f248 60a0 	movw	r0, #34464	; 0x86a0
 8008b5a:	f2c0 0001 	movt	r0, #1
 8008b5e:	f7f7 fca7 	bl	80004b0 <i2c_begin>
	ST7032i_init(&lcd);
 8008b62:	a81d      	add	r0, sp, #116	; 0x74
 8008b64:	f7fa fc86 	bl	8003474 <ST7032i_init>
	ST7032i_begin(&lcd);
 8008b68:	a81d      	add	r0, sp, #116	; 0x74
 8008b6a:	f7fa fce5 	bl	8003538 <ST7032i_begin>
	ST7032i_setContrast(&lcd, 46);
 8008b6e:	212e      	movs	r1, #46	; 0x2e
 8008b70:	a81d      	add	r0, sp, #116	; 0x74
 8008b72:	f7fa fca1 	bl	80034b8 <ST7032i_setContrast>
	ST7032i_print(&lcd, "Hi there!");       // Classic Hello World!
 8008b76:	4992      	ldr	r1, [pc, #584]	; (8008dc0 <main+0x36c>)
 8008b78:	a81d      	add	r0, sp, #116	; 0x74
 8008b7a:	f7fa fc69 	bl	8003450 <ST7032i_print>

	bits = GPIO_ReadOutputData(GPIOD );
 8008b7e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8008b82:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8008b86:	f7f8 fc65 	bl	8001454 <GPIO_ReadOutputData>
 8008b8a:	4605      	mov	r5, r0
	GPIOWrite(GPIOD, PinBit(PD13) | (bits & 0x0fff));
 8008b8c:	f240 400d 	movw	r0, #1037	; 0x40d
 8008b90:	f7f7 fba0 	bl	80002d4 <PinBit>
 8008b94:	0529      	lsls	r1, r5, #20
 8008b96:	ea40 5111 	orr.w	r1, r0, r1, lsr #20
 8008b9a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8008b9e:	b289      	uxth	r1, r1
 8008ba0:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8008ba4:	f7f7 fc82 	bl	80004ac <GPIOWrite>
	delay_ms(intval);
 8008ba8:	2028      	movs	r0, #40	; 0x28
 8008baa:	f7f7 fb4d 	bl	8000248 <delay_ms>
	tnow = millis() / 1000;
 8008bae:	f7f7 fb45 	bl	800023c <millis>
	while (tnow == millis() / 1000)
 8008bb2:	f644 55d3 	movw	r5, #19923	; 0x4dd3
	ST7032i_print(&lcd, "Hi there!");       // Classic Hello World!

	bits = GPIO_ReadOutputData(GPIOD );
	GPIOWrite(GPIOD, PinBit(PD13) | (bits & 0x0fff));
	delay_ms(intval);
	tnow = millis() / 1000;
 8008bb6:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8008bba:	fbb0 f6f6 	udiv	r6, r0, r6
	while (tnow == millis() / 1000)
 8008bbe:	f2c1 0562 	movt	r5, #4194	; 0x1062
 8008bc2:	f7f7 fb3b 	bl	800023c <millis>
 8008bc6:	fba5 1300 	umull	r1, r3, r5, r0
 8008bca:	ebb6 1f93 	cmp.w	r6, r3, lsr #6
 8008bce:	d0f8      	beq.n	8008bc2 <main+0x16e>
		;
	tnow = millis() / 1000;
 8008bd0:	f7f7 fb34 	bl	800023c <millis>
			bits |= PinBit(PD13);
			break;
		}
		GPIOWrite(GPIOD, bits);

		while (tnow == millis() / 1000)
 8008bd4:	f644 56d3 	movw	r6, #19923	; 0x4dd3
	GPIOWrite(GPIOD, PinBit(PD13) | (bits & 0x0fff));
	delay_ms(intval);
	tnow = millis() / 1000;
	while (tnow == millis() / 1000)
		;
	tnow = millis() / 1000;
 8008bd8:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8008bdc:	fbb0 f5f5 	udiv	r5, r0, r5
			bits |= PinBit(PD13);
			break;
		}
		GPIOWrite(GPIOD, bits);

		while (tnow == millis() / 1000)
 8008be0:	f2c1 0662 	movt	r6, #4194	; 0x1062
	while (tnow == millis() / 1000)
		;
	tnow = millis() / 1000;

	while (1) {
		bits = GPIO_ReadOutputData(GPIOD );
 8008be4:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8008be8:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8008bec:	f7f8 fc32 	bl	8001454 <GPIO_ReadOutputData>
 8008bf0:	4607      	mov	r7, r0

		GPIOWrite(GPIOD, PinBit(PD13) | (bits & 0x0fff));
 8008bf2:	f240 400d 	movw	r0, #1037	; 0x40d
 8008bf6:	f7f7 fb6d 	bl	80002d4 <PinBit>
 8008bfa:	053f      	lsls	r7, r7, #20
 8008bfc:	0d3f      	lsrs	r7, r7, #20
 8008bfe:	ea47 0100 	orr.w	r1, r7, r0
 8008c02:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8008c06:	b289      	uxth	r1, r1
 8008c08:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8008c0c:	f7f7 fc4e 	bl	80004ac <GPIOWrite>
		delay_ms(intval);
 8008c10:	2028      	movs	r0, #40	; 0x28
 8008c12:	f7f7 fb19 	bl	8000248 <delay_ms>

		GPIOWrite(GPIOD, PinBit(PD14) | (bits & 0x0fff));
 8008c16:	f240 400e 	movw	r0, #1038	; 0x40e
 8008c1a:	f7f7 fb5b 	bl	80002d4 <PinBit>
 8008c1e:	ea47 0100 	orr.w	r1, r7, r0
 8008c22:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8008c26:	b289      	uxth	r1, r1
 8008c28:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8008c2c:	f7f7 fc3e 	bl	80004ac <GPIOWrite>
		delay_ms(intval);
 8008c30:	2028      	movs	r0, #40	; 0x28
 8008c32:	f7f7 fb09 	bl	8000248 <delay_ms>

		GPIOWrite(GPIOD, PinBit(PD15) | (bits & 0x0fff));
 8008c36:	f240 400f 	movw	r0, #1039	; 0x40f
 8008c3a:	f7f7 fb4b 	bl	80002d4 <PinBit>
 8008c3e:	ea47 0100 	orr.w	r1, r7, r0
 8008c42:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8008c46:	b289      	uxth	r1, r1
 8008c48:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8008c4c:	f7f7 fc2e 	bl	80004ac <GPIOWrite>
		delay_ms(intval);
 8008c50:	2028      	movs	r0, #40	; 0x28
 8008c52:	f7f7 faf9 	bl	8000248 <delay_ms>

		GPIOWrite(GPIOD, PinBit(PD12) | (bits & 0x0fff));
 8008c56:	f240 400c 	movw	r0, #1036	; 0x40c
 8008c5a:	f7f7 fb3b 	bl	80002d4 <PinBit>
 8008c5e:	ea47 0100 	orr.w	r1, r7, r0
 8008c62:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8008c66:	b289      	uxth	r1, r1
 8008c68:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8008c6c:	f7f7 fc1e 	bl	80004ac <GPIOWrite>
		delay_ms(intval);
 8008c70:	2028      	movs	r0, #40	; 0x28
 8008c72:	f7f7 fae9 	bl	8000248 <delay_ms>
		//
		bits &= 0x0fff;
		switch ((tnow % 60) / 15) {
 8008c76:	f648 0389 	movw	r3, #34953	; 0x8889
 8008c7a:	f6c8 0388 	movt	r3, #34952	; 0x8888
 8008c7e:	fba3 1205 	umull	r1, r2, r3, r5
 8008c82:	0952      	lsrs	r2, r2, #5
 8008c84:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8008c88:	eba5 0282 	sub.w	r2, r5, r2, lsl #2
 8008c8c:	fba3 1302 	umull	r1, r3, r3, r2
 8008c90:	08db      	lsrs	r3, r3, #3
 8008c92:	2b02      	cmp	r3, #2
 8008c94:	d075      	beq.n	8008d82 <main+0x32e>
 8008c96:	2b03      	cmp	r3, #3
 8008c98:	d06d      	beq.n	8008d76 <main+0x322>
 8008c9a:	2b01      	cmp	r3, #1
 8008c9c:	d077      	beq.n	8008d8e <main+0x33a>
			bits |= PinBit(PD15);
		case 1:
			bits |= PinBit(PD14);
		case 0:
		default:
			bits |= PinBit(PD13);
 8008c9e:	f240 400d 	movw	r0, #1037	; 0x40d
 8008ca2:	f7f7 fb17 	bl	80002d4 <PinBit>
 8008ca6:	4307      	orrs	r7, r0
			break;
		}
		GPIOWrite(GPIOD, bits);
 8008ca8:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8008cac:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8008cb0:	b2b9      	uxth	r1, r7
 8008cb2:	f7f7 fbfb 	bl	80004ac <GPIOWrite>

		while (tnow == millis() / 1000)
 8008cb6:	f7f7 fac1 	bl	800023c <millis>
 8008cba:	fba6 2000 	umull	r2, r0, r6, r0
 8008cbe:	f644 57d3 	movw	r7, #19923	; 0x4dd3
 8008cc2:	ebb5 1f90 	cmp.w	r5, r0, lsr #6
 8008cc6:	f2c1 0762 	movt	r7, #4194	; 0x1062
 8008cca:	d0f4      	beq.n	8008cb6 <main+0x262>
			;
		tnow = millis() / 1000;
 8008ccc:	f7f7 fab6 	bl	800023c <millis>
 8008cd0:	fba7 3500 	umull	r3, r5, r7, r0

		sprintf(tmp, "%04ld", millis());
 8008cd4:	f7f7 fab2 	bl	800023c <millis>
 8008cd8:	493a      	ldr	r1, [pc, #232]	; (8008dc4 <main+0x370>)
 8008cda:	4602      	mov	r2, r0
 8008cdc:	4620      	mov	r0, r4
 8008cde:	f7fa ff07 	bl	8003af0 <sprintf>
		usart_print(&Serial2, tmp);
 8008ce2:	482e      	ldr	r0, [pc, #184]	; (8008d9c <main+0x348>)
 8008ce4:	4621      	mov	r1, r4
 8008ce6:	f7f8 f8c3 	bl	8000e70 <usart_print>
		usart_print(&Serial2, "\n");
 8008cea:	4937      	ldr	r1, [pc, #220]	; (8008dc8 <main+0x374>)
 8008cec:	482b      	ldr	r0, [pc, #172]	; (8008d9c <main+0x348>)
 8008cee:	f7f8 f8bf 	bl	8000e70 <usart_print>

		ST7032i_setCursor(&lcd, 0, 1);
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	a81d      	add	r0, sp, #116	; 0x74
 8008cf6:	2100      	movs	r1, #0
 8008cf8:	f7fa fc7a 	bl	80035f0 <ST7032i_setCursor>
		ST7032i_print(&lcd, tmp);
 8008cfc:	4621      	mov	r1, r4
 8008cfe:	a81d      	add	r0, sp, #116	; 0x74
 8008d00:	f7fa fba6 	bl	8003450 <ST7032i_print>

		digitalWrite(PB12, LOW);
 8008d04:	f44f 7003 	mov.w	r0, #524	; 0x20c
 8008d08:	2100      	movs	r1, #0
 8008d0a:	f7f7 fb17 	bl	800033c <digitalWrite>
		spi_transfer(SPI2, (uint8_t *) tmp, 8);
 8008d0e:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 8008d12:	2208      	movs	r2, #8
 8008d14:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8008d18:	4621      	mov	r1, r4
 8008d1a:	f7f7 fe77 	bl	8000a0c <spi_transfer>
		digitalWrite(PB12, HIGH);
 8008d1e:	f44f 7003 	mov.w	r0, #524	; 0x20c
 8008d22:	2101      	movs	r1, #1
 8008d24:	f7f7 fb0a 	bl	800033c <digitalWrite>
		/*
		 dval = (uint32) (100.0f + 64*sinf( (count % (uint32)(3.14159 * 2 * 32))/32.0f));
		 usart3.println(dval);
		 */
		uint16_t i = 0;
		if (usart_available(&Serial2) > 0) {
 8008d28:	481c      	ldr	r0, [pc, #112]	; (8008d9c <main+0x348>)
 8008d2a:	f7f8 f8e1 	bl	8000ef0 <usart_available>
		}
		GPIOWrite(GPIOD, bits);

		while (tnow == millis() / 1000)
			;
		tnow = millis() / 1000;
 8008d2e:	09ad      	lsrs	r5, r5, #6
		/*
		 dval = (uint32) (100.0f + 64*sinf( (count % (uint32)(3.14159 * 2 * 32))/32.0f));
		 usart3.println(dval);
		 */
		uint16_t i = 0;
		if (usart_available(&Serial2) > 0) {
 8008d30:	2700      	movs	r7, #0
 8008d32:	b938      	cbnz	r0, 8008d44 <main+0x2f0>
 8008d34:	e756      	b.n	8008be4 <main+0x190>
			while (usart_available(&Serial2) > 0 && i < 92) {
 8008d36:	2f5c      	cmp	r7, #92	; 0x5c
				tmp[i++] = (char) usart_read(&Serial2);
 8008d38:	4818      	ldr	r0, [pc, #96]	; (8008d9c <main+0x348>)
		 dval = (uint32) (100.0f + 64*sinf( (count % (uint32)(3.14159 * 2 * 32))/32.0f));
		 usart3.println(dval);
		 */
		uint16_t i = 0;
		if (usart_available(&Serial2) > 0) {
			while (usart_available(&Serial2) > 0 && i < 92) {
 8008d3a:	d049      	beq.n	8008dd0 <main+0x37c>
				tmp[i++] = (char) usart_read(&Serial2);
 8008d3c:	f7f8 f8a8 	bl	8000e90 <usart_read>
 8008d40:	55e0      	strb	r0, [r4, r7]
 8008d42:	3701      	adds	r7, #1
		 dval = (uint32) (100.0f + 64*sinf( (count % (uint32)(3.14159 * 2 * 32))/32.0f));
		 usart3.println(dval);
		 */
		uint16_t i = 0;
		if (usart_available(&Serial2) > 0) {
			while (usart_available(&Serial2) > 0 && i < 92) {
 8008d44:	4815      	ldr	r0, [pc, #84]	; (8008d9c <main+0x348>)
				tmp[i++] = (char) usart_read(&Serial2);
 8008d46:	fa1f f887 	uxth.w	r8, r7
		 dval = (uint32) (100.0f + 64*sinf( (count % (uint32)(3.14159 * 2 * 32))/32.0f));
		 usart3.println(dval);
		 */
		uint16_t i = 0;
		if (usart_available(&Serial2) > 0) {
			while (usart_available(&Serial2) > 0 && i < 92) {
 8008d4a:	f7f8 f8d1 	bl	8000ef0 <usart_available>
 8008d4e:	2800      	cmp	r0, #0
 8008d50:	d1f1      	bne.n	8008d36 <main+0x2e2>
				tmp[i++] = (char) usart_read(&Serial2);
			}
			tmp[i] = 0;
 8008d52:	a920      	add	r1, sp, #128	; 0x80
 8008d54:	4488      	add	r8, r1
 8008d56:	2300      	movs	r3, #0
 8008d58:	f808 3c78 	strb.w	r3, [r8, #-120]
			usart_print(&Serial2, "> ");
 8008d5c:	480f      	ldr	r0, [pc, #60]	; (8008d9c <main+0x348>)
 8008d5e:	491b      	ldr	r1, [pc, #108]	; (8008dcc <main+0x378>)
 8008d60:	f7f8 f886 	bl	8000e70 <usart_print>
			usart_print(&Serial2, tmp);
 8008d64:	4621      	mov	r1, r4
 8008d66:	480d      	ldr	r0, [pc, #52]	; (8008d9c <main+0x348>)
 8008d68:	f7f8 f882 	bl	8000e70 <usart_print>
			usart_print(&Serial2, "\n");
 8008d6c:	480b      	ldr	r0, [pc, #44]	; (8008d9c <main+0x348>)
 8008d6e:	4916      	ldr	r1, [pc, #88]	; (8008dc8 <main+0x374>)
 8008d70:	f7f8 f87e 	bl	8000e70 <usart_print>
 8008d74:	e736      	b.n	8008be4 <main+0x190>
		delay_ms(intval);
		//
		bits &= 0x0fff;
		switch ((tnow % 60) / 15) {
		case 3:
			bits |= PinBit(PD12);
 8008d76:	f240 400c 	movw	r0, #1036	; 0x40c
 8008d7a:	f7f7 faab 	bl	80002d4 <PinBit>
 8008d7e:	4307      	orrs	r7, r0
 8008d80:	b2bf      	uxth	r7, r7
		case 2:
			bits |= PinBit(PD15);
 8008d82:	f240 400f 	movw	r0, #1039	; 0x40f
 8008d86:	f7f7 faa5 	bl	80002d4 <PinBit>
 8008d8a:	4307      	orrs	r7, r0
 8008d8c:	b2bf      	uxth	r7, r7
		case 1:
			bits |= PinBit(PD14);
 8008d8e:	f240 400e 	movw	r0, #1038	; 0x40e
 8008d92:	f7f7 fa9f 	bl	80002d4 <PinBit>
 8008d96:	4307      	orrs	r7, r0
 8008d98:	b2bf      	uxth	r7, r7
 8008d9a:	e780      	b.n	8008c9e <main+0x24a>
 8008d9c:	2000166c 	.word	0x2000166c
 8008da0:	08008f98 	.word	0x08008f98
 8008da4:	08008fd0 	.word	0x08008fd0
 8008da8:	08008ff8 	.word	0x08008ff8
 8008dac:	08009024 	.word	0x08009024
 8008db0:	08009050 	.word	0x08009050
 8008db4:	08009060 	.word	0x08009060
 8008db8:	08009070 	.word	0x08009070
 8008dbc:	08009080 	.word	0x08009080
 8008dc0:	08009090 	.word	0x08009090
 8008dc4:	0800909c 	.word	0x0800909c
 8008dc8:	0800908c 	.word	0x0800908c
 8008dcc:	080090a4 	.word	0x080090a4
		 dval = (uint32) (100.0f + 64*sinf( (count % (uint32)(3.14159 * 2 * 32))/32.0f));
		 usart3.println(dval);
		 */
		uint16_t i = 0;
		if (usart_available(&Serial2) > 0) {
			while (usart_available(&Serial2) > 0 && i < 92) {
 8008dd0:	46b8      	mov	r8, r7
 8008dd2:	e7be      	b.n	8008d52 <main+0x2fe>

08008dd4 <Reset_Handler>:
 8008dd4:	2100      	movs	r1, #0
 8008dd6:	e003      	b.n	8008de0 <LoopCopyDataInit>

08008dd8 <CopyDataInit>:
 8008dd8:	4b0a      	ldr	r3, [pc, #40]	; (8008e04 <LoopFillZerobss+0x10>)
 8008dda:	585b      	ldr	r3, [r3, r1]
 8008ddc:	5043      	str	r3, [r0, r1]
 8008dde:	3104      	adds	r1, #4

08008de0 <LoopCopyDataInit>:
 8008de0:	4809      	ldr	r0, [pc, #36]	; (8008e08 <LoopFillZerobss+0x14>)
 8008de2:	4b0a      	ldr	r3, [pc, #40]	; (8008e0c <LoopFillZerobss+0x18>)
 8008de4:	1842      	adds	r2, r0, r1
 8008de6:	429a      	cmp	r2, r3
 8008de8:	d3f6      	bcc.n	8008dd8 <CopyDataInit>
 8008dea:	4a09      	ldr	r2, [pc, #36]	; (8008e10 <LoopFillZerobss+0x1c>)
 8008dec:	e002      	b.n	8008df4 <LoopFillZerobss>

08008dee <FillZerobss>:
 8008dee:	2300      	movs	r3, #0
 8008df0:	f842 3b04 	str.w	r3, [r2], #4

08008df4 <LoopFillZerobss>:
 8008df4:	4b07      	ldr	r3, [pc, #28]	; (8008e14 <LoopFillZerobss+0x20>)
 8008df6:	429a      	cmp	r2, r3
 8008df8:	d3f9      	bcc.n	8008dee <FillZerobss>
 8008dfa:	f7fa fd11 	bl	8003820 <SystemInit>
 8008dfe:	f7ff fe29 	bl	8008a54 <main>
 8008e02:	4770      	bx	lr
 8008e04:	08009130 	.word	0x08009130
 8008e08:	20000000 	.word	0x20000000
 8008e0c:	2000095c 	.word	0x2000095c
 8008e10:	2000095c 	.word	0x2000095c
 8008e14:	20001680 	.word	0x20001680

08008e18 <ADC_IRQHandler>:
 8008e18:	e7fe      	b.n	8008e18 <ADC_IRQHandler>
 8008e1a:	0000      	movs	r0, r0
 8008e1c:	00000000 	.word	0x00000000
 8008e20:	00000040 	.word	0x00000040
 8008e24:	00000014 	.word	0x00000014
 8008e28:	00000054 	.word	0x00000054

08008e2c <blanks.3927>:
 8008e2c:	20202020 20202020 20202020 20202020                     

08008e3c <zeroes.3928>:
 8008e3c:	30303030 30303030 30303030 30303030     0000000000000000

08008e4c <_global_impure_ptr>:
 8008e4c:	200000a8                                ... 

08008e50 <p05.2449>:
 8008e50:	00000005 00000019 0000007d 00000000     ........}.......

08008e60 <__mprec_tens>:
 8008e60:	00000000 3ff00000 00000000 40240000     .......?......$@
 8008e70:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
 8008e80:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
 8008e90:	00000000 412e8480 00000000 416312d0     .......A......cA
 8008ea0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
 8008eb0:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
 8008ec0:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
 8008ed0:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
 8008ee0:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
 8008ef0:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
 8008f00:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
 8008f10:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
 8008f20:	79d99db4 44ea7843                       ...yCx.D

08008f28 <__mprec_tinytens>:
 8008f28:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
 8008f38:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
 8008f48:	64ac6f43 0ac80628                       Co.d(...

08008f50 <__mprec_bigtens>:
 8008f50:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
 8008f60:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
 8008f70:	7f73bf3c 75154fdd                       <.s..O.u

08008f78 <blanks.3871>:
 8008f78:	20202020 20202020 20202020 20202020                     

08008f88 <zeroes.3872>:
 8008f88:	30303030 30303030 30303030 30303030     0000000000000000
 8008f98:	70706148 72612079 68742065 2065736f     Happy are those 
 8008fa8:	206f6877 776f6e6b 65687420 72612079     who know they ar
 8008fb8:	70732065 74697269 6c6c6175 6f702079     e spiritually po
 8008fc8:	203b726f 0000000a 20656854 676e696b     or; ....The king
 8008fd8:	206d6f64 6820666f 65766165 6562206e     dom of heaven be
 8008fe8:	676e6f6c 6f742073 65687420 000a216d     longs to them!..
 8008ff8:	20776f48 796e616d 65796520 6f642073     How many eyes do
 8009008:	4d207365 69737369 70697373 69722069     es Mississipi ri
 8009018:	20726576 65766168 00000a3f 63697551     ver have?...Quic
 8009028:	7262206b 206e776f 20786f66 706d756a     k brown fox jump
 8009038:	6f206465 20726576 20656874 797a616c     ed over the lazy
 8009048:	676f6420 00000a21 43535953 3d204b4c      dog!...SYSCLK =
 8009058:	646c2520 0000202c 4b4c4348 25203d20      %ld, ..HCLK = %
 8009068:	202c646c 00000000 4b4c4350 203d2031     ld, ....PCLK1 = 
 8009078:	2c646c25 00000020 4b4c4350 203d2032     %ld, ...PCLK2 = 
 8009088:	0d646c25 0000000a 74206948 65726568     %ld.....Hi there
 8009098:	00000021 6c343025 00000064 0000203e     !...%04ld...> ..
 80090a8:	70616548 646e6120 61747320 63206b63     Heap and stack c
 80090b8:	696c6c6f 6e6f6973 0000000a 74697865     ollision....exit
 80090c8:	00000000 00464e49 00666e69 004e414e     ....INF.inf.NAN.
 80090d8:	006e616e 33323130 37363534 42413938     nan.0123456789AB
 80090e8:	46454443 00000000 33323130 37363534     CDEF....01234567
 80090f8:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
 8009108:	0000296c 00000030 69666e49 7974696e     l)..0...Infinity
 8009118:	00000000 004e614e 00000043 49534f50     ....NaN.C...POSI
 8009128:	00000058 0000002e                       X.......
