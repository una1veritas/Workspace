/*
	A basic extension of the java.applet.Applet class
 */

import java.applet.Applet;
import java.awt.*;
import TravelingSalesmanProblem;
import symantec.itools.awt.util.spinner.NumericSpinner;

public class TSP2OptApplet extends Applet 
{
	public void init()
	{
	
		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
		//{{INIT_CONTROLS
		setLayout(null);
		setSize(384,292);
		button1.setLabel("Improve");
		add(button1);
		button1.setBackground(java.awt.Color.lightGray);
		button1.setBounds(276,132,96,28);
		button2.setLabel("Random tour");
		add(button2);
		button2.setBackground(java.awt.Color.lightGray);
		button2.setBounds(276,84,96,28);
		button3.setLabel("Repeat");
		add(button3);
		button3.setBackground(java.awt.Color.lightGray);
		button3.setBounds(276,168,96,28);
		button4.setLabel("New");
		add(button4);
		button4.setBackground(java.awt.Color.lightGray);
		button4.setBounds(276,12,96,28);
		label1.setText("Cities:");
		label1.setAlignment(java.awt.Label.RIGHT);
		add(label1);
		label1.setBounds(276,48,36,24);
		checkbox1.setLabel("Local optima");
		checkbox1.setEnabled(false);
		add(checkbox1);
		checkbox1.setFont(new Font("Dialog", Font.PLAIN, 12));
		checkbox1.setBounds(276,204,96,24);
		add(label2);
		label2.setBounds(216,260,62,24);
		try {
			numericSpinner1.setMin(3);
		}
		catch(java.beans.PropertyVetoException e) { }
		try {
			numericSpinner1.setCurrent(32);
		}
		catch(java.beans.PropertyVetoException e) { }
		try {
			numericSpinner1.setMax(512);
		}
		catch(java.beans.PropertyVetoException e) { }
		add(numericSpinner1);
		numericSpinner1.setBounds(316,48,52,28);
		label3.setText("Tour length:");
		add(label3);
		label3.setBounds(144,260,68,24);
		//}}
		add(canvas1);
		canvas1.setBounds(0,0,270,270);
	
		//{{REGISTER_LISTENERS
		SymAction lSymAction = new SymAction();
		button1.addActionListener(lSymAction);
		button2.addActionListener(lSymAction);
		button3.addActionListener(lSymAction);
		button4.addActionListener(lSymAction);
		//}}
	}
	
	//{{DECLARE_CONTROLS
	java.awt.Button button1 = new java.awt.Button();
	java.awt.Button button2 = new java.awt.Button();
	java.awt.Button button3 = new java.awt.Button();
	java.awt.Button button4 = new java.awt.Button();
	java.awt.Label label1 = new java.awt.Label();
	java.awt.Checkbox checkbox1 = new java.awt.Checkbox();
	java.awt.Label label2 = new java.awt.Label();
	symantec.itools.awt.util.spinner.NumericSpinner numericSpinner1 = new symantec.itools.awt.util.spinner.NumericSpinner();
	java.awt.Label label3 = new java.awt.Label();
	//}}
	TSPCanvas canvas1 = new TSPCanvas();

	class SymAction implements java.awt.event.ActionListener
	{
		public void actionPerformed(java.awt.event.ActionEvent event)
		{
			Object object = event.getSource();
			if (object == button1)
				button1_ActionPerformed(event);
			else if (object == button2)
				button2_ActionPerformed(event);
			else if (object == button3)
				button3_ActionPerformed(event);
			else if (object == button4)
				button4_ActionPerformed(event);
		}
	}

	void button1_ActionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
		if (solution == null) {
		    return;
		}
        if (!tsp.findBetterNeighbor(solution)) {
            checkbox1.setState(true);
            return;
        }
        //for (int i = 0; i < tsp.size(); i++) {
	    //    System.out.print(solution[i] + " ");
	    //}
	    //System.out.println();
        label2.setText(String.valueOf(tsp.tourLength(solution)));
	    repaint();
	}
	
	class TSPCanvas extends java.awt.Canvas {
	    	    
        public void paint(Graphics g) {
            int margin = 15;
            int i, x, y;

            g.setColor(Color.lightGray);

            if (tsp == null) {
                return;
            }
            g.fillRect(tsp.boundRect().x+margin, tsp.boundRect().y+margin, 
            tsp.boundRect().width, tsp.boundRect().height);
            for (i = 0; i < tsp.size(); i++) {
                x = tsp.cityAt(i).x + margin;
                y = tsp.cityAt(i).y + margin;
                g.setColor(Color.blue);
                g.drawOval(x-1, y-1, 3, 3);
                g.setColor(Color.black);
                g.drawString(String.valueOf(i), x+3, y-3);
            }
            if (solution == null) {
                return;
            }
            g.setColor(Color.yellow);
            for (i = 0; i < solution.length; i++) {
                g.drawLine(tsp.cityAt(solution[i]).x+margin, tsp.cityAt(solution[i]).y+margin, 
                            tsp.cityAt(solution[(i+1)%solution.length]).x+margin, tsp.cityAt(solution[(i+1)%solution.length]).y+margin);
            }
        }
    }
    
    int defaultCitySize = 32;
	TravelingSalesmanProblem tsp = new TravelingSalesmanProblem(defaultCitySize);
	int [] solution = null;	
	
	public void paint(Graphics g) {
	    canvas1.repaint();
	}
	

	void button2_ActionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
        solution = tsp.randomSolution();	
        checkbox1.setState(false);
        label2.setText(String.valueOf((int) tsp.tourLength(solution)));
		canvas1.repaint();
	}
	
	class SearchThread extends Thread {
	    public void run() {
	        button1.setEnabled(false);
	        button2.setEnabled(false);
	        button3.setEnabled(false);
	        button4.setEnabled(false);
    	    
    	    while (tsp.findBetterNeighbor(solution)) {
                label2.setText(String.valueOf((int) tsp.tourLength(solution)));
                canvas1.repaint(); 
            }
            checkbox1.setState(true);
            
            button1.setEnabled(true);
            button2.setEnabled(true);
            button3.setEnabled(true);
            button4.setEnabled(true);
	    }
	}

	void button3_ActionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
		if (solution == null) {
		    return;
		}

        SearchThread searcher = new SearchThread();
        searcher.start();
	}

	void button4_ActionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
		int tmp;
		try {
		    tmp = Integer.parseInt(numericSpinner1.getCurrentText());
		} catch (Exception e) {
		    tmp = defaultCitySize;
		}
		defaultCitySize = tmp;
        tsp = new TravelingSalesmanProblem(defaultCitySize);
        solution = null;
        label2.setText("");
        checkbox1.setState(false);
	    canvas1.repaint();
	}
    
}
