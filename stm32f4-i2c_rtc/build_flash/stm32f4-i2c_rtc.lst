
stm32f4-i2c_rtc.elf:     file format elf32-littlearm


Disassembly of section .text:

08000188 <TIM2_timer_start>:
/**
 * @brief  millisecond
 * @param  none
 * @retval None
 */
void TIM2_timer_start(void) {
 8000188:	b530      	push	{r4, r5, lr}
 800018a:	b089      	sub	sp, #36	; 0x24
	// TIM_TimeBaseInitTypeDef's order is {uint16_t TIM_Prescaler, uint16_t TIM_CounterMode, uint16_t TIM_Period, uint16_t TIM_ClockDivision, uint8_t TIM_RepetitionCounter}
	TIM_TimeBaseInitTypeDef TimeBaseStructure;
//			= { 84, TIM_CounterMode_Up, 999, TIM_CKD_DIV1, 0 };

	RCC_ClocksTypeDef RCC_Clocks;
	RCC_GetClocksFreq(&RCC_Clocks);
 800018c:	4668      	mov	r0, sp
 800018e:	f001 fba5 	bl	80018dc <RCC_GetClocksFreq>
	TimeBaseStructure.TIM_Prescaler = (RCC_Clocks.SYSCLK_Frequency>>1)/1000000L ;
 8000192:	9b00      	ldr	r3, [sp, #0]
 8000194:	4a1e      	ldr	r2, [pc, #120]	; (8000210 <TIM2_timer_start+0x88>)
 8000196:	085b      	lsrs	r3, r3, #1
 8000198:	fbb3 f3f2 	udiv	r3, r3, r2
	TimeBaseStructure.TIM_Period = 1000 - 1;
	TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
	TimeBaseStructure.TIM_RepetitionCounter = 0;

	//Supply APB1 Clock
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 800019c:	2001      	movs	r0, #1
//			= { 84, TIM_CounterMode_Up, 999, TIM_CKD_DIV1, 0 };

	RCC_ClocksTypeDef RCC_Clocks;
	RCC_GetClocksFreq(&RCC_Clocks);
	TimeBaseStructure.TIM_Prescaler = (RCC_Clocks.SYSCLK_Frequency>>1)/1000000L ;
	TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 800019e:	2400      	movs	r4, #0
	TimeBaseStructure.TIM_Period = 1000 - 1;
	TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
	TimeBaseStructure.TIM_RepetitionCounter = 0;

	//Supply APB1 Clock
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 80001a0:	4601      	mov	r1, r0
	TIM_TimeBaseInitTypeDef TimeBaseStructure;
//			= { 84, TIM_CounterMode_Up, 999, TIM_CKD_DIV1, 0 };

	RCC_ClocksTypeDef RCC_Clocks;
	RCC_GetClocksFreq(&RCC_Clocks);
	TimeBaseStructure.TIM_Prescaler = (RCC_Clocks.SYSCLK_Frequency>>1)/1000000L ;
 80001a2:	f8ad 3010 	strh.w	r3, [sp, #16]
	TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
	TimeBaseStructure.TIM_Period = 1000 - 1;
 80001a6:	f240 33e7 	movw	r3, #999	; 0x3e7
 80001aa:	9305      	str	r3, [sp, #20]
//			= { 84, TIM_CounterMode_Up, 999, TIM_CKD_DIV1, 0 };

	RCC_ClocksTypeDef RCC_Clocks;
	RCC_GetClocksFreq(&RCC_Clocks);
	TimeBaseStructure.TIM_Prescaler = (RCC_Clocks.SYSCLK_Frequency>>1)/1000000L ;
	TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80001ac:	f8ad 4012 	strh.w	r4, [sp, #18]
	TimeBaseStructure.TIM_Period = 1000 - 1;
	TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 80001b0:	f8ad 4018 	strh.w	r4, [sp, #24]
	TimeBaseStructure.TIM_RepetitionCounter = 0;
 80001b4:	f88d 401a 	strb.w	r4, [sp, #26]

	//Supply APB1 Clock
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 80001b8:	f001 fc24 	bl	8001a04 <RCC_APB1PeriphClockCmd>

	/* Time base configuration */
	TIM_TimeBaseInit(TIM2, &TimeBaseStructure);
 80001bc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80001c0:	a904      	add	r1, sp, #16
 80001c2:	f001 ffc7 	bl	8002154 <TIM_TimeBaseInit>
//  TIM_SelectOnePulseMode(TIM2, TIM_OPMode_Repetitive);
	TIM_SetCounter(TIM2, 0);
 80001c6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80001ca:	4621      	mov	r1, r4
 80001cc:	f002 f814 	bl	80021f8 <TIM_SetCounter>
	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);
 80001d0:	2101      	movs	r1, #1
 80001d2:	460a      	mov	r2, r1
 80001d4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80001d8:	f002 fb81 	bl	80028de <TIM_ITConfig>

	NVIC_InitTypeDef NVIC_InitStructure;
	/* Enable the TIM2 gloabal Interrupt */
	NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
 80001dc:	231c      	movs	r3, #28
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
 80001de:	eb0d 0003 	add.w	r0, sp, r3

	NVIC_InitTypeDef NVIC_InitStructure;
	/* Enable the TIM2 gloabal Interrupt */
	NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 80001e2:	2501      	movs	r5, #1
	TIM_SetCounter(TIM2, 0);
	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);

	NVIC_InitTypeDef NVIC_InitStructure;
	/* Enable the TIM2 gloabal Interrupt */
	NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
 80001e4:	f88d 301c 	strb.w	r3, [sp, #28]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80001e8:	f88d 401d 	strb.w	r4, [sp, #29]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 80001ec:	f88d 501e 	strb.w	r5, [sp, #30]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80001f0:	f88d 501f 	strb.w	r5, [sp, #31]
	NVIC_Init(&NVIC_InitStructure);
 80001f4:	f000 ff76 	bl	80010e4 <NVIC_Init>

	/* TIM enable counter */
	TIM_Cmd(TIM2, ENABLE);
 80001f8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80001fc:	4629      	mov	r1, r5
 80001fe:	f002 f83e 	bl	800227e <TIM_Cmd>

	__counter_micros = 0;
 8000202:	4b04      	ldr	r3, [pc, #16]	; (8000214 <TIM2_timer_start+0x8c>)
 8000204:	601c      	str	r4, [r3, #0]
	__counter_millis = 0;
 8000206:	4b04      	ldr	r3, [pc, #16]	; (8000218 <TIM2_timer_start+0x90>)
 8000208:	601c      	str	r4, [r3, #0]
}
 800020a:	b009      	add	sp, #36	; 0x24
 800020c:	bd30      	pop	{r4, r5, pc}
 800020e:	bf00      	nop
 8000210:	000f4240 	.word	0x000f4240
 8000214:	200009c8 	.word	0x200009c8
 8000218:	200009cc 	.word	0x200009cc

0800021c <micros>:

uint32_t micros(void) {
	return __counter_micros + TIM_GetCounter(TIM2 );
 800021c:	4b04      	ldr	r3, [pc, #16]	; (8000230 <micros+0x14>)

	__counter_micros = 0;
	__counter_millis = 0;
}

uint32_t micros(void) {
 800021e:	b510      	push	{r4, lr}
	return __counter_micros + TIM_GetCounter(TIM2 );
 8000220:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000224:	681c      	ldr	r4, [r3, #0]
 8000226:	f001 ffeb 	bl	8002200 <TIM_GetCounter>
}
 800022a:	1900      	adds	r0, r0, r4
 800022c:	bd10      	pop	{r4, pc}
 800022e:	bf00      	nop
 8000230:	200009c8 	.word	0x200009c8

08000234 <millis>:

uint32_t millis(void) {
	return __counter_millis;
 8000234:	4b01      	ldr	r3, [pc, #4]	; (800023c <millis+0x8>)
 8000236:	6818      	ldr	r0, [r3, #0]
}
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop
 800023c:	200009cc 	.word	0x200009cc

08000240 <delay_ms>:
uint32_t micros(void) {
	return __counter_micros + TIM_GetCounter(TIM2 );
}

uint32_t millis(void) {
	return __counter_millis;
 8000240:	4b03      	ldr	r3, [pc, #12]	; (8000250 <delay_ms+0x10>)
 8000242:	681a      	ldr	r2, [r3, #0]
}

void delay_ms(uint32_t w) {
	uint32_t wtill = millis() + w;
 8000244:	1882      	adds	r2, r0, r2
uint32_t micros(void) {
	return __counter_micros + TIM_GetCounter(TIM2 );
}

uint32_t millis(void) {
	return __counter_millis;
 8000246:	6819      	ldr	r1, [r3, #0]
}

void delay_ms(uint32_t w) {
	uint32_t wtill = millis() + w;
	while (millis() < wtill)
 8000248:	4291      	cmp	r1, r2
 800024a:	d3fc      	bcc.n	8000246 <delay_ms+0x6>
		;
}
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop
 8000250:	200009cc 	.word	0x200009cc

08000254 <delay_us>:

void delay_us(uint32_t w) {
 8000254:	b510      	push	{r4, lr}
 8000256:	4604      	mov	r4, r0
	uint32_t wtill = micros() + w;
 8000258:	f7ff ffe0 	bl	800021c <micros>
 800025c:	1904      	adds	r4, r0, r4
	while (micros() < wtill)
 800025e:	f7ff ffdd 	bl	800021c <micros>
 8000262:	42a0      	cmp	r0, r4
 8000264:	d3fb      	bcc.n	800025e <delay_us+0xa>
		;
}
 8000266:	bd10      	pop	{r4, pc}

08000268 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void) {
 8000268:	b508      	push	{r3, lr}
	if (TIM_GetITStatus(TIM2, TIM_IT_Update ) != RESET) {
 800026a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800026e:	2101      	movs	r1, #1
 8000270:	f002 fb4a 	bl	8002908 <TIM_GetITStatus>
 8000274:	b168      	cbz	r0, 8000292 <TIM2_IRQHandler+0x2a>
		TIM_ClearITPendingBit(TIM2, TIM_IT_Update );
 8000276:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800027a:	2101      	movs	r1, #1
 800027c:	f002 fb4f 	bl	800291e <TIM_ClearITPendingBit>
		__counter_micros += 1000;
 8000280:	4b04      	ldr	r3, [pc, #16]	; (8000294 <TIM2_IRQHandler+0x2c>)
 8000282:	681a      	ldr	r2, [r3, #0]
 8000284:	f502 727a 	add.w	r2, r2, #1000	; 0x3e8
 8000288:	601a      	str	r2, [r3, #0]
		__counter_millis += 1;
 800028a:	4b03      	ldr	r3, [pc, #12]	; (8000298 <TIM2_IRQHandler+0x30>)
 800028c:	681a      	ldr	r2, [r3, #0]
 800028e:	3201      	adds	r2, #1
 8000290:	601a      	str	r2, [r3, #0]
 8000292:	bd08      	pop	{r3, pc}
 8000294:	200009c8 	.word	0x200009c8
 8000298:	200009cc 	.word	0x200009cc

0800029c <pinMode>:
	}
	return 16;
}
*/

void pinMode(GPIOPin portpin, GPIOMode_TypeDef mode) {
 800029c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);
 800029e:	f3c0 2503 	ubfx	r5, r0, #8, #4
 80002a2:	4c10      	ldr	r4, [pc, #64]	; (80002e4 <pinMode+0x48>)
	}
	return 16;
}
*/

void pinMode(GPIOPin portpin, GPIOMode_TypeDef mode) {
 80002a4:	460f      	mov	r7, r1
 80002a6:	4606      	mov	r6, r0

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);
 80002a8:	2101      	movs	r1, #1
 80002aa:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 80002ae:	f001 fb85 	bl	80019bc <RCC_AHB1PeriphClockCmd>
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	//
	GPIO_Init(Port[portpin>>8 & 0x0f], &GPIO_InitStructure);
 80002b2:	eb04 0485 	add.w	r4, r4, r5, lsl #2
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 80002b6:	2301      	movs	r3, #1
 80002b8:	f006 060f 	and.w	r6, r6, #15
 80002bc:	fa13 f606 	lsls.w	r6, r3, r6

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);

	GPIO_InitStructure.GPIO_Pin = PinBit(portpin);
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80002c0:	2300      	movs	r3, #0

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);

	GPIO_InitStructure.GPIO_Pin = PinBit(portpin);
 80002c2:	b2b6      	uxth	r6, r6
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80002c4:	f88d 3006 	strb.w	r3, [sp, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80002c8:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	//
	GPIO_Init(Port[portpin>>8 & 0x0f], &GPIO_InitStructure);
 80002cc:	6aa0      	ldr	r0, [r4, #40]	; 0x28

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);

	GPIO_InitStructure.GPIO_Pin = PinBit(portpin);
 80002ce:	9600      	str	r6, [sp, #0]
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80002d0:	2302      	movs	r3, #2
	//
	GPIO_Init(Port[portpin>>8 & 0x0f], &GPIO_InitStructure);
 80002d2:	4669      	mov	r1, sp
	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);

	GPIO_InitStructure.GPIO_Pin = PinBit(portpin);
	GPIO_InitStructure.GPIO_Mode = mode;
 80002d4:	f88d 7004 	strb.w	r7, [sp, #4]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80002d8:	f88d 3005 	strb.w	r3, [sp, #5]
	//
	GPIO_Init(Port[portpin>>8 & 0x0f], &GPIO_InitStructure);
 80002dc:	f000 ffc6 	bl	800126c <GPIO_Init>
}
 80002e0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80002e2:	bf00      	nop
 80002e4:	20000000 	.word	0x20000000

080002e8 <digitalWrite>:

void digitalWrite(GPIOPin portpin, uint8_t bit) {
 80002e8:	0a02      	lsrs	r2, r0, #8
 80002ea:	4b0a      	ldr	r3, [pc, #40]	; (8000314 <digitalWrite+0x2c>)
	if (bit) {
		//? Bit_SET : Bit_RESET ));
		GPIO_SetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
 80002ec:	f002 020f 	and.w	r2, r2, #15
 80002f0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 80002f4:	f000 000f 	and.w	r0, r0, #15
	//
	GPIO_Init(Port[portpin>>8 & 0x0f], &GPIO_InitStructure);
}

void digitalWrite(GPIOPin portpin, uint8_t bit) {
	if (bit) {
 80002f8:	b129      	cbz	r1, 8000306 <digitalWrite+0x1e>
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 80002fa:	2101      	movs	r1, #1
 80002fc:	4081      	lsls	r1, r0
}

void digitalWrite(GPIOPin portpin, uint8_t bit) {
	if (bit) {
		//? Bit_SET : Bit_RESET ));
		GPIO_SetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
 80002fe:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000300:	b289      	uxth	r1, r1
 8000302:	f001 b824 	b.w	800134e <GPIO_SetBits>
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 8000306:	2101      	movs	r1, #1
 8000308:	4081      	lsls	r1, r0
void digitalWrite(GPIOPin portpin, uint8_t bit) {
	if (bit) {
		//? Bit_SET : Bit_RESET ));
		GPIO_SetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
	} else {
		GPIO_ResetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
 800030a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800030c:	b289      	uxth	r1, r1
 800030e:	f001 b820 	b.w	8001352 <GPIO_ResetBits>
 8000312:	bf00      	nop
 8000314:	20000000 	.word	0x20000000

08000318 <digitalRead>:
	}
}

uint8_t digitalRead(GPIOPin portpin) {
 8000318:	b508      	push	{r3, lr}
	GPIO_TypeDef * port = Port[portpin>>8 & 0x0f];
 800031a:	4b10      	ldr	r3, [pc, #64]	; (800035c <digitalRead+0x44>)
 800031c:	f3c0 2203 	ubfx	r2, r0, #8, #4
 8000320:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	} else {
		GPIO_ResetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
	}
}

uint8_t digitalRead(GPIOPin portpin) {
 8000324:	4601      	mov	r1, r0
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 8000326:	f001 010f 	and.w	r1, r1, #15
		GPIO_ResetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
	}
}

uint8_t digitalRead(GPIOPin portpin) {
	GPIO_TypeDef * port = Port[portpin>>8 & 0x0f];
 800032a:	6a98      	ldr	r0, [r3, #40]	; 0x28
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 800032c:	2301      	movs	r3, #1
 800032e:	fa13 f101 	lsls.w	r1, r3, r1
	}
}

uint8_t digitalRead(GPIOPin portpin) {
	GPIO_TypeDef * port = Port[portpin>>8 & 0x0f];
	uint8_t mode = (port->MODER) >> (PinBit(portpin) * 2);
 8000332:	6802      	ldr	r2, [r0, #0]
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 8000334:	b289      	uxth	r1, r1
	}
}

uint8_t digitalRead(GPIOPin portpin) {
	GPIO_TypeDef * port = Port[portpin>>8 & 0x0f];
	uint8_t mode = (port->MODER) >> (PinBit(portpin) * 2);
 8000336:	fa11 f303 	lsls.w	r3, r1, r3
 800033a:	fa32 f303 	lsrs.w	r3, r2, r3
	if (mode == GPIO_Mode_OUT)
 800033e:	b2db      	uxtb	r3, r3
 8000340:	2b01      	cmp	r3, #1
 8000342:	d105      	bne.n	8000350 <digitalRead+0x38>
		return (GPIO_ReadOutputDataBit(port, PinBit(portpin)) ? SET : RESET);
 8000344:	f000 fffa 	bl	800133c <GPIO_ReadOutputDataBit>
 8000348:	3000      	adds	r0, #0
 800034a:	bf18      	it	ne
 800034c:	2001      	movne	r0, #1
 800034e:	bd08      	pop	{r3, pc}
	return (GPIO_ReadInputDataBit(port, PinBit(portpin)) ? SET : RESET);
 8000350:	f000 ffeb 	bl	800132a <GPIO_ReadInputDataBit>
 8000354:	3000      	adds	r0, #0
 8000356:	bf18      	it	ne
 8000358:	2001      	movne	r0, #1
}
 800035a:	bd08      	pop	{r3, pc}
 800035c:	20000000 	.word	0x20000000

08000360 <PinPort>:

GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
 8000360:	4b03      	ldr	r3, [pc, #12]	; (8000370 <PinPort+0x10>)
 8000362:	f3c0 2003 	ubfx	r0, r0, #8, #4
 8000366:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
 800036a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop
 8000370:	20000000 	.word	0x20000000

08000374 <PinBit>:

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 8000374:	2301      	movs	r3, #1
 8000376:	f000 000f 	and.w	r0, r0, #15
 800037a:	fa13 f000 	lsls.w	r0, r3, r0
}
 800037e:	b280      	uxth	r0, r0
 8000380:	4770      	bx	lr

08000382 <PinSource>:

uint8_t PinSource(GPIOPin portpin) {
	return portpin & 0x0f;
}
 8000382:	f000 000f 	and.w	r0, r0, #15
 8000386:	4770      	bx	lr

08000388 <GPIOMode>:

void GPIOMode(GPIO_TypeDef * port, uint16_t pinbit, GPIOMode_TypeDef mode,
              GPIOSpeed_TypeDef clk, GPIOOType_TypeDef otype, GPIOPuPd_TypeDef pupd) {
 8000388:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800038a:	461f      	mov	r7, r3
	if ( port == GPIOB ) {
 800038c:	4b22      	ldr	r3, [pc, #136]	; (8000418 <GPIOMode+0x90>)
 800038e:	4298      	cmp	r0, r3
uint8_t PinSource(GPIOPin portpin) {
	return portpin & 0x0f;
}

void GPIOMode(GPIO_TypeDef * port, uint16_t pinbit, GPIOMode_TypeDef mode,
              GPIOSpeed_TypeDef clk, GPIOOType_TypeDef otype, GPIOPuPd_TypeDef pupd) {
 8000390:	4604      	mov	r4, r0
 8000392:	460d      	mov	r5, r1
 8000394:	4616      	mov	r6, r2
	if ( port == GPIOB ) {
 8000396:	d101      	bne.n	800039c <GPIOMode+0x14>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8000398:	2002      	movs	r0, #2
 800039a:	e022      	b.n	80003e2 <GPIOMode+0x5a>
	} else if ( port == GPIOC ) {
 800039c:	4b1f      	ldr	r3, [pc, #124]	; (800041c <GPIOMode+0x94>)
 800039e:	4298      	cmp	r0, r3
 80003a0:	d101      	bne.n	80003a6 <GPIOMode+0x1e>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 80003a2:	2004      	movs	r0, #4
 80003a4:	e01d      	b.n	80003e2 <GPIOMode+0x5a>
	} else if ( port == GPIOD ) {
 80003a6:	4b1e      	ldr	r3, [pc, #120]	; (8000420 <GPIOMode+0x98>)
 80003a8:	4298      	cmp	r0, r3
 80003aa:	d101      	bne.n	80003b0 <GPIOMode+0x28>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 80003ac:	2008      	movs	r0, #8
 80003ae:	e018      	b.n	80003e2 <GPIOMode+0x5a>
	} else if ( port == GPIOE ) {
 80003b0:	4b1c      	ldr	r3, [pc, #112]	; (8000424 <GPIOMode+0x9c>)
 80003b2:	4298      	cmp	r0, r3
 80003b4:	d101      	bne.n	80003ba <GPIOMode+0x32>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 80003b6:	2010      	movs	r0, #16
 80003b8:	e013      	b.n	80003e2 <GPIOMode+0x5a>
	} else if ( port == GPIOF ) {
 80003ba:	4b1b      	ldr	r3, [pc, #108]	; (8000428 <GPIOMode+0xa0>)
 80003bc:	4298      	cmp	r0, r3
 80003be:	d101      	bne.n	80003c4 <GPIOMode+0x3c>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 80003c0:	2020      	movs	r0, #32
 80003c2:	e00e      	b.n	80003e2 <GPIOMode+0x5a>
	} else if ( port == GPIOG ) {
 80003c4:	4b19      	ldr	r3, [pc, #100]	; (800042c <GPIOMode+0xa4>)
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d101      	bne.n	80003ce <GPIOMode+0x46>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 80003ca:	2040      	movs	r0, #64	; 0x40
 80003cc:	e009      	b.n	80003e2 <GPIOMode+0x5a>
	} else if ( port == GPIOH ) {
 80003ce:	4b18      	ldr	r3, [pc, #96]	; (8000430 <GPIOMode+0xa8>)
 80003d0:	4298      	cmp	r0, r3
 80003d2:	d101      	bne.n	80003d8 <GPIOMode+0x50>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 80003d4:	2080      	movs	r0, #128	; 0x80
 80003d6:	e004      	b.n	80003e2 <GPIOMode+0x5a>
	} else if ( port == GPIOI ) {
 80003d8:	4b16      	ldr	r3, [pc, #88]	; (8000434 <GPIOMode+0xac>)
 80003da:	4298      	cmp	r0, r3
 80003dc:	d103      	bne.n	80003e6 <GPIOMode+0x5e>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 80003de:	f44f 7080 	mov.w	r0, #256	; 0x100
 80003e2:	2101      	movs	r1, #1
 80003e4:	e004      	b.n	80003f0 <GPIOMode+0x68>
	} else if ( port == GPIOA ) {
 80003e6:	4b14      	ldr	r3, [pc, #80]	; (8000438 <GPIOMode+0xb0>)
 80003e8:	4298      	cmp	r0, r3
 80003ea:	d103      	bne.n	80003f4 <GPIOMode+0x6c>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 80003ec:	2001      	movs	r0, #1
 80003ee:	4601      	mov	r1, r0
 80003f0:	f001 fae4 	bl	80019bc <RCC_AHB1PeriphClockCmd>

	GPIO_InitTypeDef GPIO_InitStructure;
        
	GPIO_InitStructure.GPIO_Pin = pinbit;
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = otype;
 80003f4:	f89d 3020 	ldrb.w	r3, [sp, #32]
	}
	// assumes port is already waked up.

	GPIO_InitTypeDef GPIO_InitStructure;
        
	GPIO_InitStructure.GPIO_Pin = pinbit;
 80003f8:	9500      	str	r5, [sp, #0]
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = otype;
 80003fa:	f88d 3006 	strb.w	r3, [sp, #6]
	GPIO_InitStructure.GPIO_PuPd = pupd;
 80003fe:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
	// assumes port is already waked up.

	GPIO_InitTypeDef GPIO_InitStructure;
        
	GPIO_InitStructure.GPIO_Pin = pinbit;
	GPIO_InitStructure.GPIO_Mode = mode;
 8000402:	f88d 6004 	strb.w	r6, [sp, #4]
	GPIO_InitStructure.GPIO_OType = otype;
	GPIO_InitStructure.GPIO_PuPd = pupd;
	GPIO_InitStructure.GPIO_Speed = clk;
	//
	GPIO_Init(port, &GPIO_InitStructure);
 8000406:	4620      	mov	r0, r4
 8000408:	4669      	mov	r1, sp
	GPIO_InitTypeDef GPIO_InitStructure;
        
	GPIO_InitStructure.GPIO_Pin = pinbit;
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = otype;
	GPIO_InitStructure.GPIO_PuPd = pupd;
 800040a:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_InitStructure.GPIO_Speed = clk;
 800040e:	f88d 7005 	strb.w	r7, [sp, #5]
	//
	GPIO_Init(port, &GPIO_InitStructure);
 8000412:	f000 ff2b 	bl	800126c <GPIO_Init>
}
 8000416:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8000418:	40020400 	.word	0x40020400
 800041c:	40020800 	.word	0x40020800
 8000420:	40020c00 	.word	0x40020c00
 8000424:	40021000 	.word	0x40021000
 8000428:	40021400 	.word	0x40021400
 800042c:	40021800 	.word	0x40021800
 8000430:	40021c00 	.word	0x40021c00
 8000434:	40022000 	.word	0x40022000
 8000438:	40020000 	.word	0x40020000

0800043c <GPIOWrite>:


inline void GPIOWrite(GPIO_TypeDef * port, uint16_t bits) {
	GPIO_Write(port, bits);
 800043c:	f000 bf90 	b.w	8001360 <GPIO_Write>

08000440 <i2c_begin>:
} CommDirection;

I2C_Status i2c1_status;
CommDirection i2c1_direction;

void i2c_begin(uint32_t clkspeed) {
 8000440:	b530      	push	{r4, r5, lr}
	GPIO_InitTypeDef GPIO_InitStructure;
	I2C_InitTypeDef I2C_InitStructure;

	/* I2C Periph clock enable */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE); //  RCC_APB1PeriphClockCmd(I2C1_RCC, ENABLE);
 8000442:	2101      	movs	r1, #1
} CommDirection;

I2C_Status i2c1_status;
CommDirection i2c1_direction;

void i2c_begin(uint32_t clkspeed) {
 8000444:	b087      	sub	sp, #28
 8000446:	4604      	mov	r4, r0
	GPIO_InitTypeDef GPIO_InitStructure;
	I2C_InitTypeDef I2C_InitStructure;

	/* I2C Periph clock enable */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE); //  RCC_APB1PeriphClockCmd(I2C1_RCC, ENABLE);
 8000448:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800044c:	f001 fada 	bl	8001a04 <RCC_APB1PeriphClockCmd>
	/* GPIO Periph clock enable */
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE); // PB5 (SMBA), PB6 (SCL), PB9 (SDA)  // RCC_APB2PeriphClockCmd(I2C1_GPIO_RCC, ENABLE);
 8000450:	2002      	movs	r0, #2
 8000452:	2101      	movs	r1, #1
 8000454:	f001 fab2 	bl	80019bc <RCC_AHB1PeriphClockCmd>

	/* Configure I2C pins: SCL and SDA */
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_I2C1 );
 8000458:	2106      	movs	r1, #6
 800045a:	2204      	movs	r2, #4
 800045c:	4821      	ldr	r0, [pc, #132]	; (80004e4 <i2c_begin+0xa4>)
 800045e:	f000 ff85 	bl	800136c <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_I2C1 );
 8000462:	2109      	movs	r1, #9
 8000464:	2204      	movs	r2, #4
 8000466:	481f      	ldr	r0, [pc, #124]	; (80004e4 <i2c_begin+0xa4>)
 8000468:	f000 ff80 	bl	800136c <GPIO_PinAFConfig>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_9;
 800046c:	f44f 7310 	mov.w	r3, #576	; 0x240
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 8000470:	2201      	movs	r2, #1

	/* Configure I2C pins: SCL and SDA */
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_I2C1 );
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_I2C1 );

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_9;
 8000472:	9304      	str	r3, [sp, #16]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000474:	481b      	ldr	r0, [pc, #108]	; (80004e4 <i2c_begin+0xa4>)
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_I2C1 );
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_I2C1 );

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_9;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 8000476:	f88d 2016 	strb.w	r2, [sp, #22]
	/* Configure I2C pins: SCL and SDA */
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_I2C1 );
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_I2C1 );

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_9;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800047a:	2302      	movs	r3, #2
	GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 800047c:	a904      	add	r1, sp, #16
	/* Configure I2C pins: SCL and SDA */
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_I2C1 );
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_I2C1 );

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_9;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800047e:	f88d 3015 	strb.w	r3, [sp, #21]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8000482:	f88d 3014 	strb.w	r3, [sp, #20]
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_I2C1 );

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_9;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8000486:	f88d 2017 	strb.w	r2, [sp, #23]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 800048a:	f000 feef 	bl	800126c <GPIO_Init>

//#if defined (REMAP_I2C1)
//Remap_I2C1_Configuration();
//#endif

	switch (clkspeed) {
 800048e:	4b16      	ldr	r3, [pc, #88]	; (80004e8 <i2c_begin+0xa8>)
 8000490:	429c      	cmp	r4, r3
 8000492:	d004      	beq.n	800049e <i2c_begin+0x5e>
 8000494:	4a15      	ldr	r2, [pc, #84]	; (80004ec <i2c_begin+0xac>)
	case 100000:
	case 400000:
		break;
	default:
		clkspeed = 100000;
 8000496:	4294      	cmp	r4, r2
 8000498:	bf0c      	ite	eq
 800049a:	4614      	moveq	r4, r2
 800049c:	461c      	movne	r4, r3
		break;
	}
	/* I2C configuration */
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 800049e:	2300      	movs	r3, #0
 80004a0:	461d      	mov	r5, r3
 80004a2:	f8ad 3004 	strh.w	r3, [sp, #4]
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
	I2C_InitStructure.I2C_ClockSpeed = clkspeed;
 80004a6:	a906      	add	r1, sp, #24
		clkspeed = 100000;
		break;
	}
	/* I2C configuration */
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
 80004a8:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 80004ac:	f8ad 3006 	strh.w	r3, [sp, #6]
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 80004b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004b4:	f8ad 300a 	strh.w	r3, [sp, #10]
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
	I2C_InitStructure.I2C_ClockSpeed = clkspeed;
 80004b8:	f841 4d18 	str.w	r4, [r1, #-24]!
	}
	/* I2C configuration */
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 80004bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
	I2C_InitStructure.I2C_ClockSpeed = clkspeed;

	/* Apply I2C configuration after enabling it */
	I2C_Init(I2C1, &I2C_InitStructure);
 80004c0:	480b      	ldr	r0, [pc, #44]	; (80004f0 <i2c_begin+0xb0>)
	}
	/* I2C configuration */
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 80004c2:	f8ad 300c 	strh.w	r3, [sp, #12]
	I2C_InitStructure.I2C_ClockSpeed = clkspeed;

	/* Apply I2C configuration after enabling it */
	I2C_Init(I2C1, &I2C_InitStructure);
 80004c6:	4669      	mov	r1, sp
 80004c8:	f000 ff94 	bl	80013f4 <I2C_Init>
	/* I2C Peripheral Enable */
	I2C_Cmd(I2C1, ENABLE);
 80004cc:	4808      	ldr	r0, [pc, #32]	; (80004f0 <i2c_begin+0xb0>)
 80004ce:	2101      	movs	r1, #1
 80004d0:	f001 f804 	bl	80014dc <I2C_Cmd>

	i2c1_status = NOT_READY;
 80004d4:	4b07      	ldr	r3, [pc, #28]	; (80004f4 <i2c_begin+0xb4>)
 80004d6:	22ff      	movs	r2, #255	; 0xff
 80004d8:	701a      	strb	r2, [r3, #0]
	i2c1_direction = NOT_DEFINED;
 80004da:	4b07      	ldr	r3, [pc, #28]	; (80004f8 <i2c_begin+0xb8>)
 80004dc:	701d      	strb	r5, [r3, #0]
}
 80004de:	b007      	add	sp, #28
 80004e0:	bd30      	pop	{r4, r5, pc}
 80004e2:	bf00      	nop
 80004e4:	40020400 	.word	0x40020400
 80004e8:	000186a0 	.word	0x000186a0
 80004ec:	00061a80 	.word	0x00061a80
 80004f0:	40005400 	.word	0x40005400
 80004f4:	200009d1 	.word	0x200009d1
 80004f8:	200009d0 	.word	0x200009d0

080004fc <i2c_transmit>:

void i2c_transmit(uint8_t addr, uint8_t * data, uint16_t length) {
	uint16_t i;

	i2c1_direction = TRANSMITTER;
 80004fc:	4b2a      	ldr	r3, [pc, #168]	; (80005a8 <i2c_transmit+0xac>)

	i2c1_status = NOT_READY;
	i2c1_direction = NOT_DEFINED;
}

void i2c_transmit(uint8_t addr, uint8_t * data, uint16_t length) {
 80004fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000502:	4616      	mov	r6, r2
	uint16_t i;

	i2c1_direction = TRANSMITTER;
	//
	i2c1_status = NOT_READY;
 8000504:	4c29      	ldr	r4, [pc, #164]	; (80005ac <i2c_transmit+0xb0>)
}

void i2c_transmit(uint8_t addr, uint8_t * data, uint16_t length) {
	uint16_t i;

	i2c1_direction = TRANSMITTER;
 8000506:	2201      	movs	r2, #1
 8000508:	701a      	strb	r2, [r3, #0]
	//
	i2c1_status = NOT_READY;
 800050a:	23ff      	movs	r3, #255	; 0xff

	i2c1_status = NOT_READY;
	i2c1_direction = NOT_DEFINED;
}

void i2c_transmit(uint8_t addr, uint8_t * data, uint16_t length) {
 800050c:	4607      	mov	r7, r0
 800050e:	460d      	mov	r5, r1
	uint16_t i;

	i2c1_direction = TRANSMITTER;
	//
	i2c1_status = NOT_READY;
 8000510:	7023      	strb	r3, [r4, #0]
	while (I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY ))
 8000512:	4827      	ldr	r0, [pc, #156]	; (80005b0 <i2c_transmit+0xb4>)
 8000514:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8000518:	f001 f8f8 	bl	800170c <I2C_GetFlagStatus>
 800051c:	2800      	cmp	r0, #0
 800051e:	d1f8      	bne.n	8000512 <i2c_transmit+0x16>
		;
	i2c1_status = READY;
 8000520:	7020      	strb	r0, [r4, #0]

	/* Send STRAT condition */
	I2C_GenerateSTART(I2C1, ENABLE);
 8000522:	2101      	movs	r1, #1
 8000524:	4822      	ldr	r0, [pc, #136]	; (80005b0 <i2c_transmit+0xb4>)
 8000526:	f000 ffe5 	bl	80014f4 <I2C_GenerateSTART>
	/* Test on EV5 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT ))
 800052a:	4821      	ldr	r0, [pc, #132]	; (80005b0 <i2c_transmit+0xb4>)
 800052c:	4921      	ldr	r1, [pc, #132]	; (80005b4 <i2c_transmit+0xb8>)
 800052e:	f001 f8d8 	bl	80016e2 <I2C_CheckEvent>
 8000532:	2800      	cmp	r0, #0
 8000534:	d0f9      	beq.n	800052a <i2c_transmit+0x2e>
		;
	i2c1_status = START_ISSUED;
 8000536:	2301      	movs	r3, #1
 8000538:	4c1c      	ldr	r4, [pc, #112]	; (80005ac <i2c_transmit+0xb0>)

	/* Send address for write */
	I2C_Send7bitAddress(I2C1, addr << 1, I2C_Direction_Transmitter );
 800053a:	481d      	ldr	r0, [pc, #116]	; (80005b0 <i2c_transmit+0xb4>)
	/* Send STRAT condition */
	I2C_GenerateSTART(I2C1, ENABLE);
	/* Test on EV5 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT ))
		;
	i2c1_status = START_ISSUED;
 800053c:	7023      	strb	r3, [r4, #0]

	/* Send address for write */
	I2C_Send7bitAddress(I2C1, addr << 1, I2C_Direction_Transmitter );
 800053e:	fa17 f103 	lsls.w	r1, r7, r3
 8000542:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 8000546:	2200      	movs	r2, #0
 8000548:	f000 ffec 	bl	8001524 <I2C_Send7bitAddress>
	/* Test on EV6 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED ))
 800054c:	4818      	ldr	r0, [pc, #96]	; (80005b0 <i2c_transmit+0xb4>)
 800054e:	491a      	ldr	r1, [pc, #104]	; (80005b8 <i2c_transmit+0xbc>)
 8000550:	f001 f8c7 	bl	80016e2 <I2C_CheckEvent>
 8000554:	2800      	cmp	r0, #0
 8000556:	d0f9      	beq.n	800054c <i2c_transmit+0x50>
		;
	i2c1_status = DST_ADDRESS_SENT;
 8000558:	2302      	movs	r3, #2
 800055a:	7023      	strb	r3, [r4, #0]
 800055c:	f8df 804c 	ldr.w	r8, [pc, #76]	; 80005ac <i2c_transmit+0xb0>

	for (i = 0; i < length; i++) {
 8000560:	2400      	movs	r4, #0
 8000562:	e010      	b.n	8000586 <i2c_transmit+0x8a>
		I2C_SendData(I2C1, data[i]);
 8000564:	4812      	ldr	r0, [pc, #72]	; (80005b0 <i2c_transmit+0xb4>)
 8000566:	5d29      	ldrb	r1, [r5, r4]
 8000568:	f001 f85f 	bl	800162a <I2C_SendData>
		i2c1_status = BYTE_TRANSMITTING;
 800056c:	2304      	movs	r3, #4
 800056e:	f888 3000 	strb.w	r3, [r8]
		/* Test on EV8 and clear it */
		while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED ))
 8000572:	480f      	ldr	r0, [pc, #60]	; (80005b0 <i2c_transmit+0xb4>)
 8000574:	4911      	ldr	r1, [pc, #68]	; (80005bc <i2c_transmit+0xc0>)
 8000576:	f001 f8b4 	bl	80016e2 <I2C_CheckEvent>
 800057a:	2800      	cmp	r0, #0
 800057c:	d0f9      	beq.n	8000572 <i2c_transmit+0x76>
			;
		i2c1_status = BYTE_TRANSMITTED;
 800057e:	2305      	movs	r3, #5
 8000580:	f888 3000 	strb.w	r3, [r8]
 8000584:	3401      	adds	r4, #1
	/* Test on EV6 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED ))
		;
	i2c1_status = DST_ADDRESS_SENT;

	for (i = 0; i < length; i++) {
 8000586:	b2a3      	uxth	r3, r4
 8000588:	42b3      	cmp	r3, r6
 800058a:	4f08      	ldr	r7, [pc, #32]	; (80005ac <i2c_transmit+0xb0>)
 800058c:	d3ea      	bcc.n	8000564 <i2c_transmit+0x68>
		/* Test on EV8 and clear it */
		while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED ))
			;
		i2c1_status = BYTE_TRANSMITTED;
	}
	i2c1_status = TRANSMISSION_COMPLETED;
 800058e:	2306      	movs	r3, #6
 8000590:	703b      	strb	r3, [r7, #0]

	I2C_GenerateSTOP(I2C1, ENABLE);
 8000592:	4807      	ldr	r0, [pc, #28]	; (80005b0 <i2c_transmit+0xb4>)
 8000594:	2101      	movs	r1, #1
 8000596:	f000 ffb9 	bl	800150c <I2C_GenerateSTOP>
	i2c1_status = NOT_READY;
 800059a:	23ff      	movs	r3, #255	; 0xff
 800059c:	703b      	strb	r3, [r7, #0]
	i2c1_direction = NOT_DEFINED;
 800059e:	4b02      	ldr	r3, [pc, #8]	; (80005a8 <i2c_transmit+0xac>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	701a      	strb	r2, [r3, #0]
}
 80005a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80005a8:	200009d0 	.word	0x200009d0
 80005ac:	200009d1 	.word	0x200009d1
 80005b0:	40005400 	.word	0x40005400
 80005b4:	00030001 	.word	0x00030001
 80005b8:	00070082 	.word	0x00070082
 80005bc:	00070084 	.word	0x00070084

080005c0 <i2c_requestFrom>:


void i2c_requestFrom(uint8_t addr, uint8_t req, uint8_t * recv, uint16_t lim) {
 80005c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80005c4:	4698      	mov	r8, r3
	uint16_t i;
	i2c1_direction = RECEIVER;
 80005c6:	4b46      	ldr	r3, [pc, #280]	; (80006e0 <i2c_requestFrom+0x120>)
	//
	i2c1_status = NOT_READY;
 80005c8:	4f46      	ldr	r7, [pc, #280]	; (80006e4 <i2c_requestFrom+0x124>)
	i2c1_status = NOT_READY;
	i2c1_direction = NOT_DEFINED;
}


void i2c_requestFrom(uint8_t addr, uint8_t req, uint8_t * recv, uint16_t lim) {
 80005ca:	4614      	mov	r4, r2
	uint16_t i;
	i2c1_direction = RECEIVER;
 80005cc:	2202      	movs	r2, #2
 80005ce:	701a      	strb	r2, [r3, #0]
	//
	i2c1_status = NOT_READY;
 80005d0:	23ff      	movs	r3, #255	; 0xff
	i2c1_status = NOT_READY;
	i2c1_direction = NOT_DEFINED;
}


void i2c_requestFrom(uint8_t addr, uint8_t req, uint8_t * recv, uint16_t lim) {
 80005d2:	4606      	mov	r6, r0
 80005d4:	460d      	mov	r5, r1
	uint16_t i;
	i2c1_direction = RECEIVER;
	//
	i2c1_status = NOT_READY;
 80005d6:	703b      	strb	r3, [r7, #0]
	/* While the bus is busy */
	while (I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY ))
 80005d8:	4843      	ldr	r0, [pc, #268]	; (80006e8 <i2c_requestFrom+0x128>)
 80005da:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80005de:	f001 f895 	bl	800170c <I2C_GetFlagStatus>
 80005e2:	2800      	cmp	r0, #0
 80005e4:	d1f8      	bne.n	80005d8 <i2c_requestFrom+0x18>
		;
	i2c1_status = READY;
 80005e6:	7038      	strb	r0, [r7, #0]

	/* Send START condition */
	I2C_GenerateSTART(I2C1, ENABLE);
 80005e8:	2101      	movs	r1, #1
 80005ea:	483f      	ldr	r0, [pc, #252]	; (80006e8 <i2c_requestFrom+0x128>)
 80005ec:	f000 ff82 	bl	80014f4 <I2C_GenerateSTART>
	/* Test on EV5 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT ))
 80005f0:	483d      	ldr	r0, [pc, #244]	; (80006e8 <i2c_requestFrom+0x128>)
 80005f2:	493e      	ldr	r1, [pc, #248]	; (80006ec <i2c_requestFrom+0x12c>)
 80005f4:	f001 f875 	bl	80016e2 <I2C_CheckEvent>
 80005f8:	2800      	cmp	r0, #0
 80005fa:	d0f9      	beq.n	80005f0 <i2c_requestFrom+0x30>
		;
	i2c1_status = START_ISSUED;
 80005fc:	2301      	movs	r3, #1
 80005fe:	4f39      	ldr	r7, [pc, #228]	; (80006e4 <i2c_requestFrom+0x124>)

	/* Send EEPROM address for write */
	I2C_Send7bitAddress(I2C1, addr << 1, I2C_Direction_Transmitter );
 8000600:	4839      	ldr	r0, [pc, #228]	; (80006e8 <i2c_requestFrom+0x128>)
	/* Send START condition */
	I2C_GenerateSTART(I2C1, ENABLE);
	/* Test on EV5 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT ))
		;
	i2c1_status = START_ISSUED;
 8000602:	703b      	strb	r3, [r7, #0]

	/* Send EEPROM address for write */
	I2C_Send7bitAddress(I2C1, addr << 1, I2C_Direction_Transmitter );
 8000604:	409e      	lsls	r6, r3
 8000606:	b2f6      	uxtb	r6, r6
 8000608:	4631      	mov	r1, r6
 800060a:	2200      	movs	r2, #0
 800060c:	f000 ff8a 	bl	8001524 <I2C_Send7bitAddress>
	/* Test on EV6 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED )) {
 8000610:	4835      	ldr	r0, [pc, #212]	; (80006e8 <i2c_requestFrom+0x128>)
 8000612:	4937      	ldr	r1, [pc, #220]	; (80006f0 <i2c_requestFrom+0x130>)
 8000614:	f001 f865 	bl	80016e2 <I2C_CheckEvent>
 8000618:	2800      	cmp	r0, #0
 800061a:	d0f9      	beq.n	8000610 <i2c_requestFrom+0x50>
	}
	i2c1_status = DST_ADDRESS_SENT;
 800061c:	2302      	movs	r3, #2
 800061e:	703b      	strb	r3, [r7, #0]

	/* Send the EEPROM's internal address to read from: MSB of the address first */
	I2C_SendData(I2C1, req);
 8000620:	4831      	ldr	r0, [pc, #196]	; (80006e8 <i2c_requestFrom+0x128>)
 8000622:	4629      	mov	r1, r5
 8000624:	f001 f801 	bl	800162a <I2C_SendData>
	i2c1_status = BYTE_TRANSMITTING;
 8000628:	2304      	movs	r3, #4
 800062a:	703b      	strb	r3, [r7, #0]
	/* Test on EV8 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED ))
 800062c:	482e      	ldr	r0, [pc, #184]	; (80006e8 <i2c_requestFrom+0x128>)
 800062e:	4931      	ldr	r1, [pc, #196]	; (80006f4 <i2c_requestFrom+0x134>)
 8000630:	f001 f857 	bl	80016e2 <I2C_CheckEvent>
 8000634:	2800      	cmp	r0, #0
 8000636:	d0f9      	beq.n	800062c <i2c_requestFrom+0x6c>
		;
	i2c1_status = TRANSMISSION_COMPLETED;
 8000638:	4d2a      	ldr	r5, [pc, #168]	; (80006e4 <i2c_requestFrom+0x124>)

	//	  I2C_GenerateSTOP(I2C1, ENABLE);

	/* Send STRAT condition a second time */
	I2C_GenerateSTART(I2C1, ENABLE);
 800063a:	482b      	ldr	r0, [pc, #172]	; (80006e8 <i2c_requestFrom+0x128>)
	I2C_SendData(I2C1, req);
	i2c1_status = BYTE_TRANSMITTING;
	/* Test on EV8 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED ))
		;
	i2c1_status = TRANSMISSION_COMPLETED;
 800063c:	2306      	movs	r3, #6
 800063e:	702b      	strb	r3, [r5, #0]

	//	  I2C_GenerateSTOP(I2C1, ENABLE);

	/* Send STRAT condition a second time */
	I2C_GenerateSTART(I2C1, ENABLE);
 8000640:	2101      	movs	r1, #1
 8000642:	f000 ff57 	bl	80014f4 <I2C_GenerateSTART>
	/* Test on EV5 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT ))
 8000646:	4828      	ldr	r0, [pc, #160]	; (80006e8 <i2c_requestFrom+0x128>)
 8000648:	4928      	ldr	r1, [pc, #160]	; (80006ec <i2c_requestFrom+0x12c>)
 800064a:	f001 f84a 	bl	80016e2 <I2C_CheckEvent>
 800064e:	2800      	cmp	r0, #0
 8000650:	d0f9      	beq.n	8000646 <i2c_requestFrom+0x86>
		;
	i2c1_status = RESTART_ISSUED;
 8000652:	2307      	movs	r3, #7
 8000654:	702b      	strb	r3, [r5, #0]

	/* Send EEPROM address for read */
	I2C_Send7bitAddress(I2C1, addr << 1, I2C_Direction_Receiver );
 8000656:	4824      	ldr	r0, [pc, #144]	; (80006e8 <i2c_requestFrom+0x128>)
 8000658:	4631      	mov	r1, r6
 800065a:	2201      	movs	r2, #1
 800065c:	f000 ff62 	bl	8001524 <I2C_Send7bitAddress>
	/* Test on EV6 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED ))
 8000660:	4821      	ldr	r0, [pc, #132]	; (80006e8 <i2c_requestFrom+0x128>)
 8000662:	4925      	ldr	r1, [pc, #148]	; (80006f8 <i2c_requestFrom+0x138>)
 8000664:	f001 f83d 	bl	80016e2 <I2C_CheckEvent>
 8000668:	2800      	cmp	r0, #0
 800066a:	d0f9      	beq.n	8000660 <i2c_requestFrom+0xa0>
		;
	i2c1_status = SRC_ADDRESS_SENT;

	for (i = 1; i < lim; i++) {
 800066c:	2501      	movs	r5, #1
 800066e:	4f1d      	ldr	r7, [pc, #116]	; (80006e4 <i2c_requestFrom+0x124>)
 8000670:	e00e      	b.n	8000690 <i2c_requestFrom+0xd0>
		i2c1_status = RECEIVE_BYTE_READY;
 8000672:	2308      	movs	r3, #8
 8000674:	703b      	strb	r3, [r7, #0]
		while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_RECEIVED )) {
 8000676:	481c      	ldr	r0, [pc, #112]	; (80006e8 <i2c_requestFrom+0x128>)
 8000678:	4920      	ldr	r1, [pc, #128]	; (80006fc <i2c_requestFrom+0x13c>)
 800067a:	f001 f832 	bl	80016e2 <I2C_CheckEvent>
 800067e:	2800      	cmp	r0, #0
 8000680:	d0f9      	beq.n	8000676 <i2c_requestFrom+0xb6>
		}
		/* Read a byte from the EEPROM */
		*recv++ = I2C_ReceiveData(I2C1 );
 8000682:	4819      	ldr	r0, [pc, #100]	; (80006e8 <i2c_requestFrom+0x128>)
 8000684:	f000 ffd3 	bl	800162e <I2C_ReceiveData>
	/* Test on EV6 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED ))
		;
	i2c1_status = SRC_ADDRESS_SENT;

	for (i = 1; i < lim; i++) {
 8000688:	3501      	adds	r5, #1
		i2c1_status = RECEIVE_BYTE_READY;
		while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_RECEIVED )) {
		}
		/* Read a byte from the EEPROM */
		*recv++ = I2C_ReceiveData(I2C1 );
 800068a:	f804 0b01 	strb.w	r0, [r4], #1
	/* Test on EV6 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED ))
		;
	i2c1_status = SRC_ADDRESS_SENT;

	for (i = 1; i < lim; i++) {
 800068e:	b2ad      	uxth	r5, r5
 8000690:	4545      	cmp	r5, r8
 8000692:	4e14      	ldr	r6, [pc, #80]	; (80006e4 <i2c_requestFrom+0x124>)
 8000694:	d3ed      	bcc.n	8000672 <i2c_requestFrom+0xb2>
		}
		/* Read a byte from the EEPROM */
		*recv++ = I2C_ReceiveData(I2C1 );
		i2c1_status = BYTE_RECEIVED;
	}
	i2c1_status = BEFORELAST_BYTE_RECEIVED;
 8000696:	230a      	movs	r3, #10
 8000698:	7033      	strb	r3, [r6, #0]

	/* Disable Acknowledgement */
	I2C_AcknowledgeConfig(I2C1, DISABLE);
 800069a:	4813      	ldr	r0, [pc, #76]	; (80006e8 <i2c_requestFrom+0x128>)
 800069c:	2100      	movs	r1, #0
 800069e:	f000 ff49 	bl	8001534 <I2C_AcknowledgeConfig>
	/* Send STOP Condition */
	I2C_GenerateSTOP(I2C1, ENABLE);
 80006a2:	4811      	ldr	r0, [pc, #68]	; (80006e8 <i2c_requestFrom+0x128>)
 80006a4:	2101      	movs	r1, #1
 80006a6:	f000 ff31 	bl	800150c <I2C_GenerateSTOP>
	i2c1_status = LAST_BYTE_READY;
 80006aa:	230b      	movs	r3, #11
 80006ac:	7033      	strb	r3, [r6, #0]

	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_RECEIVED )) {
 80006ae:	480e      	ldr	r0, [pc, #56]	; (80006e8 <i2c_requestFrom+0x128>)
 80006b0:	4912      	ldr	r1, [pc, #72]	; (80006fc <i2c_requestFrom+0x13c>)
 80006b2:	f001 f816 	bl	80016e2 <I2C_CheckEvent>
 80006b6:	2800      	cmp	r0, #0
 80006b8:	d0f9      	beq.n	80006ae <i2c_requestFrom+0xee>
	}
	/* Read a byte from the EEPROM */
	*recv = I2C_ReceiveData(I2C1 );
 80006ba:	480b      	ldr	r0, [pc, #44]	; (80006e8 <i2c_requestFrom+0x128>)
 80006bc:	f000 ffb7 	bl	800162e <I2C_ReceiveData>
 80006c0:	7020      	strb	r0, [r4, #0]
	i2c1_status = RECEIVE_BYTE_COMPLETED;
 80006c2:	4c08      	ldr	r4, [pc, #32]	; (80006e4 <i2c_requestFrom+0x124>)

	/* Enable Acknowledgement to be ready for another reception */
	I2C_AcknowledgeConfig(I2C1, ENABLE);
 80006c4:	4808      	ldr	r0, [pc, #32]	; (80006e8 <i2c_requestFrom+0x128>)

	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_RECEIVED )) {
	}
	/* Read a byte from the EEPROM */
	*recv = I2C_ReceiveData(I2C1 );
	i2c1_status = RECEIVE_BYTE_COMPLETED;
 80006c6:	230c      	movs	r3, #12
 80006c8:	7023      	strb	r3, [r4, #0]

	/* Enable Acknowledgement to be ready for another reception */
	I2C_AcknowledgeConfig(I2C1, ENABLE);
 80006ca:	2101      	movs	r1, #1
 80006cc:	f000 ff32 	bl	8001534 <I2C_AcknowledgeConfig>
	i2c1_status = NOT_READY;
 80006d0:	23ff      	movs	r3, #255	; 0xff
 80006d2:	7023      	strb	r3, [r4, #0]
	i2c1_direction = NOT_DEFINED;
 80006d4:	4b02      	ldr	r3, [pc, #8]	; (80006e0 <i2c_requestFrom+0x120>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	701a      	strb	r2, [r3, #0]
}
 80006da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80006de:	bf00      	nop
 80006e0:	200009d0 	.word	0x200009d0
 80006e4:	200009d1 	.word	0x200009d1
 80006e8:	40005400 	.word	0x40005400
 80006ec:	00030001 	.word	0x00030001
 80006f0:	00070082 	.word	0x00070082
 80006f4:	00070084 	.word	0x00070084
 80006f8:	00030002 	.word	0x00030002
 80006fc:	00030040 	.word	0x00030040

08000700 <i2c_send>:

void i2c_send(uint8_t addr, uint8_t * data, uint16_t length) {

}
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop

08000704 <spi_begin>:
#include "spi.h"

//SPI_TypeDef * spix[] = { SPI1, SPI2, SPI3 };

void spi_begin(SPI_TypeDef * SPIx,/*SPIBus spibus,*/ GPIOPin sck, GPIOPin miso, GPIOPin mosi,
		GPIOPin nss) {
 8000704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000708:	4699      	mov	r9, r3
//	GPIOPin sck, miso, mosi, nss;

	/* PCLK2 = HCLK/2 */
	//RCC_PCLK2Config(RCC_HCLK_Div2);
//	SPIx = spix[spibus];
	if (SPIx == SPI1) {
 800070a:	4b57      	ldr	r3, [pc, #348]	; (8000868 <spi_begin+0x164>)
#include "spi.h"

//SPI_TypeDef * spix[] = { SPI1, SPI2, SPI3 };

void spi_begin(SPI_TypeDef * SPIx,/*SPIBus spibus,*/ GPIOPin sck, GPIOPin miso, GPIOPin mosi,
		GPIOPin nss) {
 800070c:	b08b      	sub	sp, #44	; 0x2c
//	GPIOPin sck, miso, mosi, nss;

	/* PCLK2 = HCLK/2 */
	//RCC_PCLK2Config(RCC_HCLK_Div2);
//	SPIx = spix[spibus];
	if (SPIx == SPI1) {
 800070e:	4298      	cmp	r0, r3
#include "spi.h"

//SPI_TypeDef * spix[] = { SPI1, SPI2, SPI3 };

void spi_begin(SPI_TypeDef * SPIx,/*SPIBus spibus,*/ GPIOPin sck, GPIOPin miso, GPIOPin mosi,
		GPIOPin nss) {
 8000710:	4682      	mov	sl, r0
 8000712:	460f      	mov	r7, r1
 8000714:	4690      	mov	r8, r2
 8000716:	f8bd b050 	ldrh.w	fp, [sp, #80]	; 0x50
//	GPIOPin sck, miso, mosi, nss;

	/* PCLK2 = HCLK/2 */
	//RCC_PCLK2Config(RCC_HCLK_Div2);
//	SPIx = spix[spibus];
	if (SPIx == SPI1) {
 800071a:	d105      	bne.n	8000728 <spi_begin+0x24>
//	case SPI1Bus:
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
 800071c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000720:	2101      	movs	r1, #1
 8000722:	f001 f97b 	bl	8001a1c <RCC_APB2PeriphClockCmd>
 8000726:	e007      	b.n	8000738 <spi_begin+0x34>
//		 sck = PA5; // PB3
//		 miso = PA6; // PB4
//		 mosi = PA7; // PB5
//		 nss = PA4; // PA15
//		break;
	} else if ( SPIx == SPI2 ) {
 8000728:	4b50      	ldr	r3, [pc, #320]	; (800086c <spi_begin+0x168>)
 800072a:	4298      	cmp	r0, r3
 800072c:	d106      	bne.n	800073c <spi_begin+0x38>
//	case SPI2Bus:
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE);
 800072e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000732:	2101      	movs	r1, #1
 8000734:	f001 f966 	bl	8001a04 <RCC_APB1PeriphClockCmd>
		af = GPIO_AF_SPI2;
 8000738:	2605      	movs	r6, #5
 800073a:	e005      	b.n	8000748 <spi_begin+0x44>
		// PB12, 13, 14, 15
//		break;
	} else {
//	case SPI3Bus:
//	default:
		RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 800073c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000740:	2101      	movs	r1, #1
 8000742:	f001 f99b 	bl	8001a7c <RCC_APB1PeriphResetCmd>
		af = GPIO_AF_SPI3;
 8000746:	2606      	movs	r6, #6
//		 mosi = PB5;
//		 nss = PA15; // PA4;
//		break;
	}

	GPIOMode(PinPort(sck), PinBit(sck), GPIO_Mode_AF, GPIO_Speed_25MHz,
 8000748:	4638      	mov	r0, r7
 800074a:	f7ff fe09 	bl	8000360 <PinPort>
 800074e:	4603      	mov	r3, r0
 8000750:	4638      	mov	r0, r7
 8000752:	9303      	str	r3, [sp, #12]
 8000754:	f7ff fe0e 	bl	8000374 <PinBit>
 8000758:	9b03      	ldr	r3, [sp, #12]
 800075a:	2401      	movs	r4, #1
 800075c:	2500      	movs	r5, #0
 800075e:	4601      	mov	r1, r0
 8000760:	2202      	movs	r2, #2
 8000762:	4618      	mov	r0, r3
 8000764:	4623      	mov	r3, r4
 8000766:	9500      	str	r5, [sp, #0]
 8000768:	9401      	str	r4, [sp, #4]
 800076a:	f7ff fe0d 	bl	8000388 <GPIOMode>
			GPIO_OType_PP, GPIO_PuPd_UP);
	GPIOMode(PinPort(miso), PinBit(miso), GPIO_Mode_AF, GPIO_Speed_25MHz,
 800076e:	4640      	mov	r0, r8
 8000770:	f7ff fdf6 	bl	8000360 <PinPort>
 8000774:	4603      	mov	r3, r0
 8000776:	4640      	mov	r0, r8
 8000778:	9303      	str	r3, [sp, #12]
 800077a:	f7ff fdfb 	bl	8000374 <PinBit>
 800077e:	9b03      	ldr	r3, [sp, #12]
 8000780:	9500      	str	r5, [sp, #0]
 8000782:	4601      	mov	r1, r0
 8000784:	2202      	movs	r2, #2
 8000786:	4618      	mov	r0, r3
 8000788:	4623      	mov	r3, r4
 800078a:	9401      	str	r4, [sp, #4]
 800078c:	f7ff fdfc 	bl	8000388 <GPIOMode>
			GPIO_OType_PP, GPIO_PuPd_UP);
	GPIOMode(PinPort(mosi), PinBit(mosi), GPIO_Mode_AF, GPIO_Speed_25MHz,
 8000790:	4648      	mov	r0, r9
 8000792:	f7ff fde5 	bl	8000360 <PinPort>
 8000796:	4603      	mov	r3, r0
 8000798:	4648      	mov	r0, r9
 800079a:	9303      	str	r3, [sp, #12]
 800079c:	f7ff fdea 	bl	8000374 <PinBit>
 80007a0:	9b03      	ldr	r3, [sp, #12]
 80007a2:	9500      	str	r5, [sp, #0]
 80007a4:	4601      	mov	r1, r0
 80007a6:	2202      	movs	r2, #2
 80007a8:	4618      	mov	r0, r3
 80007aa:	4623      	mov	r3, r4
 80007ac:	9401      	str	r4, [sp, #4]
 80007ae:	f7ff fdeb 	bl	8000388 <GPIOMode>
			GPIO_OType_PP, GPIO_PuPd_UP);
	GPIO_PinAFConfig(PinPort(sck), PinSource(sck), af);
 80007b2:	4638      	mov	r0, r7
 80007b4:	f7ff fdd4 	bl	8000360 <PinPort>
 80007b8:	4603      	mov	r3, r0
 80007ba:	4638      	mov	r0, r7
 80007bc:	9303      	str	r3, [sp, #12]
 80007be:	f7ff fde0 	bl	8000382 <PinSource>
 80007c2:	9b03      	ldr	r3, [sp, #12]
 80007c4:	4601      	mov	r1, r0
 80007c6:	4632      	mov	r2, r6
 80007c8:	4618      	mov	r0, r3
 80007ca:	f000 fdcf 	bl	800136c <GPIO_PinAFConfig>
	GPIO_PinAFConfig(PinPort(miso), PinSource(miso), af);
 80007ce:	4640      	mov	r0, r8
 80007d0:	f7ff fdc6 	bl	8000360 <PinPort>
 80007d4:	4607      	mov	r7, r0
 80007d6:	4640      	mov	r0, r8
 80007d8:	f7ff fdd3 	bl	8000382 <PinSource>
 80007dc:	4632      	mov	r2, r6
 80007de:	4601      	mov	r1, r0
 80007e0:	4638      	mov	r0, r7
 80007e2:	f000 fdc3 	bl	800136c <GPIO_PinAFConfig>
	GPIO_PinAFConfig(PinPort(mosi), PinSource(mosi), af);
 80007e6:	4648      	mov	r0, r9
 80007e8:	f7ff fdba 	bl	8000360 <PinPort>
 80007ec:	4607      	mov	r7, r0
 80007ee:	4648      	mov	r0, r9
 80007f0:	f7ff fdc7 	bl	8000382 <PinSource>
 80007f4:	4632      	mov	r2, r6
 80007f6:	4601      	mov	r1, r0
 80007f8:	4638      	mov	r0, r7
 80007fa:	f000 fdb7 	bl	800136c <GPIO_PinAFConfig>
	// nSS by software
	GPIOMode(PinPort(nss), PinBit(nss), GPIO_Mode_OUT, GPIO_Speed_25MHz,
 80007fe:	4658      	mov	r0, fp
 8000800:	f7ff fdae 	bl	8000360 <PinPort>
 8000804:	4606      	mov	r6, r0
 8000806:	4658      	mov	r0, fp
 8000808:	f7ff fdb4 	bl	8000374 <PinBit>
 800080c:	4622      	mov	r2, r4
 800080e:	4623      	mov	r3, r4
 8000810:	4601      	mov	r1, r0
 8000812:	4630      	mov	r0, r6
 8000814:	9500      	str	r5, [sp, #0]
 8000816:	9401      	str	r4, [sp, #4]
 8000818:	f7ff fdb6 	bl	8000388 <GPIOMode>
			GPIO_OType_PP, GPIO_PuPd_UP);
	digitalWrite(nss, HIGH);
 800081c:	4658      	mov	r0, fp
 800081e:	4621      	mov	r1, r4
 8000820:	f7ff fd62 	bl	80002e8 <digitalWrite>
	//GPIO_PinAFConfig(PinPort(nss), PinSource(nss), af);

	SPI_InitStruct.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
	SPI_InitStruct.SPI_Mode = SPI_Mode_Master;
 8000824:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000828:	f8ad 3016 	strh.w	r3, [sp, #22]
	SPI_InitStruct.SPI_DataSize = SPI_DataSize_8b;
	SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;
	SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
	SPI_InitStruct.SPI_NSS = SPI_NSS_Soft;
 800082c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000830:	f8ad 301e 	strh.w	r3, [sp, #30]
	SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_8;
	SPI_InitStruct.SPI_FirstBit = SPI_FirstBit_MSB;
	SPI_InitStruct.SPI_CRCPolynomial = SPI_CRC_Rx;

	SPI_Init(SPIx, &SPI_InitStruct);
 8000834:	4650      	mov	r0, sl
	SPI_InitStruct.SPI_Mode = SPI_Mode_Master;
	SPI_InitStruct.SPI_DataSize = SPI_DataSize_8b;
	SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;
	SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
	SPI_InitStruct.SPI_NSS = SPI_NSS_Soft;
	SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_8;
 8000836:	2310      	movs	r3, #16
	SPI_InitStruct.SPI_FirstBit = SPI_FirstBit_MSB;
	SPI_InitStruct.SPI_CRCPolynomial = SPI_CRC_Rx;

	SPI_Init(SPIx, &SPI_InitStruct);
 8000838:	a905      	add	r1, sp, #20
	GPIOMode(PinPort(nss), PinBit(nss), GPIO_Mode_OUT, GPIO_Speed_25MHz,
			GPIO_OType_PP, GPIO_PuPd_UP);
	digitalWrite(nss, HIGH);
	//GPIO_PinAFConfig(PinPort(nss), PinSource(nss), af);

	SPI_InitStruct.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 800083a:	f8ad 5014 	strh.w	r5, [sp, #20]
	SPI_InitStruct.SPI_Mode = SPI_Mode_Master;
	SPI_InitStruct.SPI_DataSize = SPI_DataSize_8b;
 800083e:	f8ad 5018 	strh.w	r5, [sp, #24]
	SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;
 8000842:	f8ad 501a 	strh.w	r5, [sp, #26]
	SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
 8000846:	f8ad 501c 	strh.w	r5, [sp, #28]
	SPI_InitStruct.SPI_NSS = SPI_NSS_Soft;
	SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_8;
 800084a:	f8ad 3020 	strh.w	r3, [sp, #32]
	SPI_InitStruct.SPI_FirstBit = SPI_FirstBit_MSB;
 800084e:	f8ad 5022 	strh.w	r5, [sp, #34]	; 0x22
	SPI_InitStruct.SPI_CRCPolynomial = SPI_CRC_Rx;
 8000852:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24

	SPI_Init(SPIx, &SPI_InitStruct);
 8000856:	f001 f9e5 	bl	8001c24 <SPI_Init>

	SPI_Cmd(SPIx, ENABLE);
 800085a:	4650      	mov	r0, sl
 800085c:	4621      	mov	r1, r4
 800085e:	f001 fa7c 	bl	8001d5a <SPI_Cmd>
	 *              - Enable or disable the SS output using the SPI_SSOutputCmd() function
	 *
	 *          10. To use the CRC Hardware calculation feature refer to the Peripheral
	 *              CRC hardware Calculation subsection.
	 */
}
 8000862:	b00b      	add	sp, #44	; 0x2c
 8000864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000868:	40013000 	.word	0x40013000
 800086c:	40003800 	.word	0x40003800

08000870 <spi_transfer>:

void spi_transfer(SPI_TypeDef * SPIx, /*SPIBus spibus,*/ uint8_t * data, uint16_t nbytes) {
 8000870:	b570      	push	{r4, r5, r6, lr}
 8000872:	4604      	mov	r4, r0
 8000874:	4616      	mov	r6, r2
 8000876:	460d      	mov	r5, r1
//	SPI_TypeDef * SPIx = spix[spibus];
	uint8_t rcvdata;

	for (; nbytes; nbytes--) {
 8000878:	e017      	b.n	80008aa <spi_transfer+0x3a>
		/* Wait for SPIx Tx buffer empty */
		while (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_TXE ) == RESET)
 800087a:	4620      	mov	r0, r4
 800087c:	2102      	movs	r1, #2
 800087e:	f001 fb23 	bl	8001ec8 <SPI_I2S_GetFlagStatus>
 8000882:	2800      	cmp	r0, #0
 8000884:	d0f9      	beq.n	800087a <spi_transfer+0xa>
			;
		SPI_I2S_SendData(SPIx, (uint16_t) *data);
 8000886:	4620      	mov	r0, r4
 8000888:	f815 1b01 	ldrb.w	r1, [r5], #1
 800088c:	f001 fae5 	bl	8001e5a <SPI_I2S_SendData>
		/* Wait for SPIx data reception */
		while (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_RXNE ) == RESET)
 8000890:	4620      	mov	r0, r4
 8000892:	2101      	movs	r1, #1
 8000894:	f001 fb18 	bl	8001ec8 <SPI_I2S_GetFlagStatus>
 8000898:	2800      	cmp	r0, #0
 800089a:	d0f9      	beq.n	8000890 <spi_transfer+0x20>
			;
		/* Read SPIy received data */
		rcvdata = SPI_I2S_ReceiveData(SPIx);
 800089c:	4620      	mov	r0, r4
 800089e:	f001 fad9 	bl	8001e54 <SPI_I2S_ReceiveData>

void spi_transfer(SPI_TypeDef * SPIx, /*SPIBus spibus,*/ uint8_t * data, uint16_t nbytes) {
//	SPI_TypeDef * SPIx = spix[spibus];
	uint8_t rcvdata;

	for (; nbytes; nbytes--) {
 80008a2:	3e01      	subs	r6, #1
		SPI_I2S_SendData(SPIx, (uint16_t) *data);
		/* Wait for SPIx data reception */
		while (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_RXNE ) == RESET)
			;
		/* Read SPIy received data */
		rcvdata = SPI_I2S_ReceiveData(SPIx);
 80008a4:	f805 0c01 	strb.w	r0, [r5, #-1]

void spi_transfer(SPI_TypeDef * SPIx, /*SPIBus spibus,*/ uint8_t * data, uint16_t nbytes) {
//	SPI_TypeDef * SPIx = spix[spibus];
	uint8_t rcvdata;

	for (; nbytes; nbytes--) {
 80008a8:	b2b6      	uxth	r6, r6
 80008aa:	2e00      	cmp	r6, #0
 80008ac:	d1e5      	bne.n	800087a <spi_transfer+0xa>
		/* Read SPIy received data */
		rcvdata = SPI_I2S_ReceiveData(SPIx);
		*data = rcvdata;
		data++;
	}
}
 80008ae:	bd70      	pop	{r4, r5, r6, pc}

080008b0 <SysTick_Handler>:
#include "systick.h"

volatile uint32_t _systick_counter;

void SysTick_Handler(void) {
	_systick_counter++; /* increment timeTicks counter */
 80008b0:	4b02      	ldr	r3, [pc, #8]	; (80008bc <SysTick_Handler+0xc>)
 80008b2:	681a      	ldr	r2, [r3, #0]
 80008b4:	3201      	adds	r2, #1
 80008b6:	601a      	str	r2, [r3, #0]
}
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	200009d4 	.word	0x200009d4

080008c0 <SysTick_delay>:

void SysTick_delay(const uint32_t dlyTicks) {
	uint32_t currTicks = _systick_counter;
 80008c0:	4b03      	ldr	r3, [pc, #12]	; (80008d0 <SysTick_delay+0x10>)
 80008c2:	681a      	ldr	r2, [r3, #0]

	while ((_systick_counter - currTicks) < dlyTicks)
 80008c4:	6819      	ldr	r1, [r3, #0]
 80008c6:	1a89      	subs	r1, r1, r2
 80008c8:	4281      	cmp	r1, r0
 80008ca:	d3fb      	bcc.n	80008c4 <SysTick_delay+0x4>
		;
}
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	200009d4 	.word	0x200009d4

080008d4 <SysTick_Start>:

void SysTick_Start(void) {
 80008d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	RCC_ClocksTypeDef RCC_Clocks;
	  /* SysTick end of count event each 1ms */
	  RCC_GetClocksFreq(&RCC_Clocks);
 80008d6:	4668      	mov	r0, sp
 80008d8:	f001 f800 	bl	80018dc <RCC_GetClocksFreq>
	  SysTick_Config(RCC_Clocks.HCLK_Frequency / 1000);
 80008dc:	9a01      	ldr	r2, [sp, #4]
 80008de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008e2:	fbb2 f2f3 	udiv	r2, r2, r3
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 80008e6:	4b06      	ldr	r3, [pc, #24]	; (8000900 <SysTick_Start+0x2c>)
 80008e8:	3a01      	subs	r2, #1
 80008ea:	605a      	str	r2, [r3, #4]
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80008ec:	4a05      	ldr	r2, [pc, #20]	; (8000904 <SysTick_Start+0x30>)
 80008ee:	21f0      	movs	r1, #240	; 0xf0
 80008f0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80008f4:	2200      	movs	r2, #0
 80008f6:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008f8:	2207      	movs	r2, #7
 80008fa:	601a      	str	r2, [r3, #0]
		// Handle Error
		while (1)
			;
	}
*/
}
 80008fc:	b005      	add	sp, #20
 80008fe:	bd00      	pop	{pc}
 8000900:	e000e010 	.word	0xe000e010
 8000904:	e000ed00 	.word	0xe000ed00

08000908 <SysTick_count>:

uint32_t SysTick_count() {
	return _systick_counter;
 8000908:	4b01      	ldr	r3, [pc, #4]	; (8000910 <SysTick_count+0x8>)
 800090a:	6818      	ldr	r0, [r3, #0]
}
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	200009d4 	.word	0x200009d4

08000914 <buffer_clear>:
*/

USARTRing rxring[6], txring[6];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 8000914:	2300      	movs	r3, #0
 8000916:	f8a0 3100 	strh.w	r3, [r0, #256]	; 0x100
	r->tail = 0;
 800091a:	f8a0 3102 	strh.w	r3, [r0, #258]	; 0x102
	r->count = 0;
 800091e:	f8a0 3104 	strh.w	r3, [r0, #260]	; 0x104
}
 8000922:	4770      	bx	lr

08000924 <buffer_count>:

uint16_t buffer_count(USARTRing * r) {
	return r->count;
}
 8000924:	f8b0 0104 	ldrh.w	r0, [r0, #260]	; 0x104
 8000928:	4770      	bx	lr

0800092a <buffer_is_full>:

uint8_t buffer_is_full(USARTRing * r) {
	if ( (r->head == r->tail) && (r->count > 0) ) {
 800092a:	f9b0 2100 	ldrsh.w	r2, [r0, #256]	; 0x100
 800092e:	f9b0 3102 	ldrsh.w	r3, [r0, #258]	; 0x102
 8000932:	429a      	cmp	r2, r3
 8000934:	d105      	bne.n	8000942 <buffer_is_full+0x18>

uint16_t buffer_count(USARTRing * r) {
	return r->count;
}

uint8_t buffer_is_full(USARTRing * r) {
 8000936:	f8b0 0104 	ldrh.w	r0, [r0, #260]	; 0x104
	if ( (r->head == r->tail) && (r->count > 0) ) {
		return 1;
 800093a:	3000      	adds	r0, #0
 800093c:	bf18      	it	ne
 800093e:	2001      	movne	r0, #1
 8000940:	4770      	bx	lr
	}
	return 0;
 8000942:	2000      	movs	r0, #0
}
 8000944:	4770      	bx	lr

08000946 <buffer_enque>:

uint16_t buffer_enque(USARTRing * r, uint16_t w) {
 8000946:	b538      	push	{r3, r4, r5, lr}
 8000948:	4604      	mov	r4, r0
 800094a:	460d      	mov	r5, r1
	if ( buffer_is_full(r) )
 800094c:	f7ff ffed 	bl	800092a <buffer_is_full>
 8000950:	b9b0      	cbnz	r0, 8000980 <buffer_enque+0x3a>
		return 0xffff;
	r->buf[r->head++] = w;
 8000952:	f8b4 3100 	ldrh.w	r3, [r4, #256]	; 0x100
 8000956:	b21a      	sxth	r2, r3
 8000958:	3301      	adds	r3, #1
 800095a:	f824 5012 	strh.w	r5, [r4, r2, lsl #1]
	r->count++;
 800095e:	f8b4 2104 	ldrh.w	r2, [r4, #260]	; 0x104
 8000962:	3201      	adds	r2, #1
 8000964:	f8a4 2104 	strh.w	r2, [r4, #260]	; 0x104
	r->head %= USART_BUFFER_SIZE;
 8000968:	b21a      	sxth	r2, r3
 800096a:	4b07      	ldr	r3, [pc, #28]	; (8000988 <buffer_enque+0x42>)
 800096c:	4013      	ands	r3, r2
 800096e:	2b00      	cmp	r3, #0
 8000970:	da03      	bge.n	800097a <buffer_enque+0x34>
 8000972:	3b01      	subs	r3, #1
 8000974:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000978:	3301      	adds	r3, #1
 800097a:	f8a4 3100 	strh.w	r3, [r4, #256]	; 0x100
 800097e:	e001      	b.n	8000984 <buffer_enque+0x3e>
	return 0;
}

uint16_t buffer_enque(USARTRing * r, uint16_t w) {
	if ( buffer_is_full(r) )
		return 0xffff;
 8000980:	f64f 75ff 	movw	r5, #65535	; 0xffff
	r->buf[r->head++] = w;
	r->count++;
	r->head %= USART_BUFFER_SIZE;
	return w;
}
 8000984:	4628      	mov	r0, r5
 8000986:	bd38      	pop	{r3, r4, r5, pc}
 8000988:	8000007f 	.word	0x8000007f

0800098c <buffer_deque>:
	r->tail = 0;
	r->count = 0;
}

uint16_t buffer_count(USARTRing * r) {
	return r->count;
 800098c:	f8b0 1104 	ldrh.w	r1, [r0, #260]	; 0x104
	r->count++;
	r->head %= USART_BUFFER_SIZE;
	return w;
}

uint16_t buffer_deque(USARTRing * r) {
 8000990:	4602      	mov	r2, r0
	uint16_t w;
	if ( buffer_count(r) == 0 )
 8000992:	b1a1      	cbz	r1, 80009be <buffer_deque+0x32>
		return 0xffff;
	w = r->buf[r->tail++];
 8000994:	f8b0 3102 	ldrh.w	r3, [r0, #258]	; 0x102
	r->count--;
 8000998:	3901      	subs	r1, #1

uint16_t buffer_deque(USARTRing * r) {
	uint16_t w;
	if ( buffer_count(r) == 0 )
		return 0xffff;
	w = r->buf[r->tail++];
 800099a:	b218      	sxth	r0, r3
 800099c:	3301      	adds	r3, #1
	r->count--;
 800099e:	f8a2 1104 	strh.w	r1, [r2, #260]	; 0x104
	r->tail %= USART_BUFFER_SIZE;
 80009a2:	b219      	sxth	r1, r3
 80009a4:	4b07      	ldr	r3, [pc, #28]	; (80009c4 <buffer_deque+0x38>)

uint16_t buffer_deque(USARTRing * r) {
	uint16_t w;
	if ( buffer_count(r) == 0 )
		return 0xffff;
	w = r->buf[r->tail++];
 80009a6:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
	r->count--;
	r->tail %= USART_BUFFER_SIZE;
 80009aa:	400b      	ands	r3, r1
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	da03      	bge.n	80009b8 <buffer_deque+0x2c>
 80009b0:	3b01      	subs	r3, #1
 80009b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80009b6:	3301      	adds	r3, #1
 80009b8:	f8a2 3102 	strh.w	r3, [r2, #258]	; 0x102
 80009bc:	4770      	bx	lr
}

uint16_t buffer_deque(USARTRing * r) {
	uint16_t w;
	if ( buffer_count(r) == 0 )
		return 0xffff;
 80009be:	f64f 70ff 	movw	r0, #65535	; 0xffff
	w = r->buf[r->tail++];
	r->count--;
	r->tail %= USART_BUFFER_SIZE;
	return w;
}
 80009c2:	4770      	bx	lr
 80009c4:	8000007f 	.word	0x8000007f

080009c8 <usart_begin>:

void usart_begin(USART_TypeDef * /*USARTSerial*/ USARTx, GPIOPin rx, GPIOPin tx, uint32_t baud) {
 80009c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009cc:	469b      	mov	fp, r3
	uint8_t af = GPIO_AF_USART1;
	IRQn_Type irq = USART1_IRQn;

//	switch(usx) {
//	case USART1Serial:
	if ( USARTx == USART1 ) {
 80009ce:	4b66      	ldr	r3, [pc, #408]	; (8000b68 <usart_begin+0x1a0>)
 80009d0:	4298      	cmp	r0, r3
	r->count--;
	r->tail %= USART_BUFFER_SIZE;
	return w;
}

void usart_begin(USART_TypeDef * /*USARTSerial*/ USARTx, GPIOPin rx, GPIOPin tx, uint32_t baud) {
 80009d2:	b08b      	sub	sp, #44	; 0x2c
 80009d4:	4605      	mov	r5, r0
 80009d6:	4689      	mov	r9, r1
 80009d8:	4692      	mov	sl, r2
	uint8_t af = GPIO_AF_USART1;
	IRQn_Type irq = USART1_IRQn;

//	switch(usx) {
//	case USART1Serial:
	if ( USARTx == USART1 ) {
 80009da:	d108      	bne.n	80009ee <usart_begin+0x26>
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 80009dc:	2010      	movs	r0, #16
 80009de:	2101      	movs	r1, #1
 80009e0:	f001 f81c 	bl	8001a1c <RCC_APB2PeriphClockCmd>
		af = GPIO_AF_USART1;
		irq = USART1_IRQn;
 80009e4:	2725      	movs	r7, #37	; 0x25

//	switch(usx) {
//	case USART1Serial:
	if ( USARTx == USART1 ) {
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
		af = GPIO_AF_USART1;
 80009e6:	2607      	movs	r6, #7
		irq = USART1_IRQn;
		usx = 0;
 80009e8:	f04f 0800 	mov.w	r8, #0
 80009ec:	e03b      	b.n	8000a66 <usart_begin+0x9e>
//	break;
	} else if ( USARTx == USART2 ) {
 80009ee:	4b5f      	ldr	r3, [pc, #380]	; (8000b6c <usart_begin+0x1a4>)
 80009f0:	4298      	cmp	r0, r3
 80009f2:	d109      	bne.n	8000a08 <usart_begin+0x40>
//	case USART2Serial:
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 80009f4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80009f8:	2101      	movs	r1, #1
 80009fa:	f001 f803 	bl	8001a04 <RCC_APB1PeriphClockCmd>
		af = GPIO_AF_USART2;
		irq = USART2_IRQn;
 80009fe:	2726      	movs	r7, #38	; 0x26
		usx = 0;
//	break;
	} else if ( USARTx == USART2 ) {
//	case USART2Serial:
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
		af = GPIO_AF_USART2;
 8000a00:	2607      	movs	r6, #7
		irq = USART2_IRQn;
		usx = 1;
 8000a02:	f04f 0801 	mov.w	r8, #1
 8000a06:	e02e      	b.n	8000a66 <usart_begin+0x9e>
//	break;
	} else if ( USARTx == USART3 ) {
 8000a08:	4b59      	ldr	r3, [pc, #356]	; (8000b70 <usart_begin+0x1a8>)
 8000a0a:	4298      	cmp	r0, r3
 8000a0c:	d109      	bne.n	8000a22 <usart_begin+0x5a>
//	case USART3Serial:
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
 8000a0e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000a12:	2101      	movs	r1, #1
 8000a14:	f000 fff6 	bl	8001a04 <RCC_APB1PeriphClockCmd>
		af = GPIO_AF_USART3;
		irq = USART3_IRQn;
 8000a18:	2727      	movs	r7, #39	; 0x27
		usx = 1;
//	break;
	} else if ( USARTx == USART3 ) {
//	case USART3Serial:
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
		af = GPIO_AF_USART3;
 8000a1a:	2607      	movs	r6, #7
		irq = USART3_IRQn;
		usx = 2;
 8000a1c:	f04f 0802 	mov.w	r8, #2
 8000a20:	e021      	b.n	8000a66 <usart_begin+0x9e>
//	break;
	} else if ( USARTx == UART4 ) {
 8000a22:	4b54      	ldr	r3, [pc, #336]	; (8000b74 <usart_begin+0x1ac>)
 8000a24:	4298      	cmp	r0, r3
 8000a26:	d109      	bne.n	8000a3c <usart_begin+0x74>
//	case UART4Serial:
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART4, ENABLE);
 8000a28:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000a2c:	2101      	movs	r1, #1
 8000a2e:	f000 ffe9 	bl	8001a04 <RCC_APB1PeriphClockCmd>
		af = GPIO_AF_UART4;
		irq = UART4_IRQn;
 8000a32:	2734      	movs	r7, #52	; 0x34
		usx = 2;
//	break;
	} else if ( USARTx == UART4 ) {
//	case UART4Serial:
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART4, ENABLE);
		af = GPIO_AF_UART4;
 8000a34:	2608      	movs	r6, #8
		irq = UART4_IRQn;
		usx = 3;
 8000a36:	f04f 0803 	mov.w	r8, #3
 8000a3a:	e014      	b.n	8000a66 <usart_begin+0x9e>
//	break;
	} else if ( USARTx == UART5 ) {
 8000a3c:	4b4e      	ldr	r3, [pc, #312]	; (8000b78 <usart_begin+0x1b0>)
 8000a3e:	4298      	cmp	r0, r3
 8000a40:	d109      	bne.n	8000a56 <usart_begin+0x8e>
//	case UART5Serial:
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART5, ENABLE);
 8000a42:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000a46:	2101      	movs	r1, #1
 8000a48:	f000 ffdc 	bl	8001a04 <RCC_APB1PeriphClockCmd>
		af = GPIO_AF_UART5;
		irq = UART5_IRQn;
 8000a4c:	2735      	movs	r7, #53	; 0x35
		usx = 3;
//	break;
	} else if ( USARTx == UART5 ) {
//	case UART5Serial:
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART5, ENABLE);
		af = GPIO_AF_UART5;
 8000a4e:	2608      	movs	r6, #8
		irq = UART5_IRQn;
		usx = 4;
 8000a50:	f04f 0804 	mov.w	r8, #4
 8000a54:	e007      	b.n	8000a66 <usart_begin+0x9e>
//		break;
	} else { //if ( USARTx == USART6 ) {
//	case USART6Serial:
//	default:
//		usx = USART6Serial;
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART6, ENABLE);
 8000a56:	2020      	movs	r0, #32
 8000a58:	2101      	movs	r1, #1
 8000a5a:	f000 ffdf 	bl	8001a1c <RCC_APB2PeriphClockCmd>
		af = GPIO_AF_USART6;
		irq = USART6_IRQn;
 8000a5e:	2747      	movs	r7, #71	; 0x47
	} else { //if ( USARTx == USART6 ) {
//	case USART6Serial:
//	default:
//		usx = USART6Serial;
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART6, ENABLE);
		af = GPIO_AF_USART6;
 8000a60:	2608      	movs	r6, #8
		irq = USART6_IRQn;
		usx = 5;
 8000a62:	f04f 0805 	mov.w	r8, #5
//		break;
	}
	GPIOMode(PinPort(rx), PinBit(rx), GPIO_Mode_AF, GPIO_Speed_50MHz, GPIO_OType_PP, GPIO_PuPd_NOPULL);
 8000a66:	4648      	mov	r0, r9
 8000a68:	f7ff fc7a 	bl	8000360 <PinPort>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	4648      	mov	r0, r9
 8000a70:	9303      	str	r3, [sp, #12]
 8000a72:	f7ff fc7f 	bl	8000374 <PinBit>
 8000a76:	9b03      	ldr	r3, [sp, #12]
 8000a78:	2202      	movs	r2, #2
 8000a7a:	2400      	movs	r4, #0
 8000a7c:	4601      	mov	r1, r0
 8000a7e:	4618      	mov	r0, r3
 8000a80:	4613      	mov	r3, r2
 8000a82:	9400      	str	r4, [sp, #0]
 8000a84:	9401      	str	r4, [sp, #4]
 8000a86:	f7ff fc7f 	bl	8000388 <GPIOMode>
	GPIOMode(PinPort(tx), PinBit(tx), GPIO_Mode_AF, GPIO_Speed_50MHz, GPIO_OType_PP, GPIO_PuPd_NOPULL);
 8000a8a:	4650      	mov	r0, sl
 8000a8c:	f7ff fc68 	bl	8000360 <PinPort>
 8000a90:	4603      	mov	r3, r0
 8000a92:	4650      	mov	r0, sl
 8000a94:	9303      	str	r3, [sp, #12]
 8000a96:	f7ff fc6d 	bl	8000374 <PinBit>
 8000a9a:	9b03      	ldr	r3, [sp, #12]
 8000a9c:	9400      	str	r4, [sp, #0]
 8000a9e:	2202      	movs	r2, #2
 8000aa0:	4601      	mov	r1, r0
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	4613      	mov	r3, r2
 8000aa6:	9401      	str	r4, [sp, #4]
 8000aa8:	f7ff fc6e 	bl	8000388 <GPIOMode>

	GPIO_PinAFConfig(PinPort(rx), PinSource(rx), af );
 8000aac:	4648      	mov	r0, r9
 8000aae:	f7ff fc57 	bl	8000360 <PinPort>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	4648      	mov	r0, r9
 8000ab6:	9303      	str	r3, [sp, #12]
 8000ab8:	f7ff fc63 	bl	8000382 <PinSource>
 8000abc:	9b03      	ldr	r3, [sp, #12]
 8000abe:	4601      	mov	r1, r0
 8000ac0:	4632      	mov	r2, r6
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f000 fc52 	bl	800136c <GPIO_PinAFConfig>
	GPIO_PinAFConfig(PinPort(tx), PinSource(tx), af );
 8000ac8:	4650      	mov	r0, sl
 8000aca:	f7ff fc49 	bl	8000360 <PinPort>
 8000ace:	4681      	mov	r9, r0
 8000ad0:	4650      	mov	r0, sl
 8000ad2:	f7ff fc56 	bl	8000382 <PinSource>
 8000ad6:	4632      	mov	r2, r6
 8000ad8:	4601      	mov	r1, r0
 8000ada:	4648      	mov	r0, r9
 8000adc:	f000 fc46 	bl	800136c <GPIO_PinAFConfig>
	USART_InitStruct.USART_BaudRate = baud;	// the baudrate is set to the value we passed into this init function
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
	USART_InitStruct.USART_StopBits = USART_StopBits_1;	// we want 1 stop bit (standard)
	USART_InitStruct.USART_Parity = USART_Parity_No;// we don't want a parity bit (standard)
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver
 8000ae0:	230c      	movs	r3, #12

	USART_Init(USARTx /*usartx[usx]*/, &USART_InitStruct); // again all the properties are passed to the USART_Init function which takes care of all the bit setting
 8000ae2:	4628      	mov	r0, r5
 8000ae4:	a905      	add	r1, sp, #20
	USART_InitStruct.USART_BaudRate = baud;	// the baudrate is set to the value we passed into this init function
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
	USART_InitStruct.USART_StopBits = USART_StopBits_1;	// we want 1 stop bit (standard)
	USART_InitStruct.USART_Parity = USART_Parity_No;// we don't want a parity bit (standard)
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver
 8000ae6:	f8ad 301e 	strh.w	r3, [sp, #30]
	GPIOMode(PinPort(tx), PinBit(tx), GPIO_Mode_AF, GPIO_Speed_50MHz, GPIO_OType_PP, GPIO_PuPd_NOPULL);

	GPIO_PinAFConfig(PinPort(rx), PinSource(rx), af );
	GPIO_PinAFConfig(PinPort(tx), PinSource(tx), af );

	USART_InitStruct.USART_BaudRate = baud;	// the baudrate is set to the value we passed into this init function
 8000aea:	f8cd b014 	str.w	fp, [sp, #20]
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
 8000aee:	f8ad 4018 	strh.w	r4, [sp, #24]
	USART_InitStruct.USART_StopBits = USART_StopBits_1;	// we want 1 stop bit (standard)
 8000af2:	f8ad 401a 	strh.w	r4, [sp, #26]
	USART_InitStruct.USART_Parity = USART_Parity_No;// we don't want a parity bit (standard)
 8000af6:	f8ad 401c 	strh.w	r4, [sp, #28]
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
 8000afa:	f8ad 4020 	strh.w	r4, [sp, #32]
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver

	USART_Init(USARTx /*usartx[usx]*/, &USART_InitStruct); // again all the properties are passed to the USART_Init function which takes care of all the bit setting
 8000afe:	f002 f823 	bl	8002b48 <USART_Init>

	USART_ITConfig(USARTx /*usartx[usx]*/, USART_IT_RXNE, ENABLE); // enable the USART3 receive interrupt
 8000b02:	4628      	mov	r0, r5
 8000b04:	2201      	movs	r2, #1
 8000b06:	f240 5125 	movw	r1, #1317	; 0x525
 8000b0a:	f002 f95b 	bl	8002dc4 <USART_ITConfig>
	USART_ITConfig(USARTx /*usartx[usx]*/, USART_IT_TXE, DISABLE);
 8000b0e:	4622      	mov	r2, r4
 8000b10:	4628      	mov	r0, r5
 8000b12:	f240 7127 	movw	r1, #1831	; 0x727
 8000b16:	f002 f955 	bl	8002dc4 <USART_ITConfig>

	NVIC_InitStructure.NVIC_IRQChannel = irq;
	// we want to configure the USART3 interrupts
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0; // this sets the priority group of the USART3 interrupts
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0; // this sets the subpriority inside the group
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;	// the USART3 interrupts are globally enabled
 8000b1a:	2601      	movs	r6, #1
	NVIC_Init(&NVIC_InitStructure);	// the properties are passed to the NVIC_Init function which takes care of the low level stuff
 8000b1c:	a809      	add	r0, sp, #36	; 0x24
	USART_Init(USARTx /*usartx[usx]*/, &USART_InitStruct); // again all the properties are passed to the USART_Init function which takes care of all the bit setting

	USART_ITConfig(USARTx /*usartx[usx]*/, USART_IT_RXNE, ENABLE); // enable the USART3 receive interrupt
	USART_ITConfig(USARTx /*usartx[usx]*/, USART_IT_TXE, DISABLE);

	NVIC_InitStructure.NVIC_IRQChannel = irq;
 8000b1e:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
	// we want to configure the USART3 interrupts
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0; // this sets the priority group of the USART3 interrupts
 8000b22:	f88d 4025 	strb.w	r4, [sp, #37]	; 0x25
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0; // this sets the subpriority inside the group
 8000b26:	f88d 4026 	strb.w	r4, [sp, #38]	; 0x26
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;	// the USART3 interrupts are globally enabled
 8000b2a:	f88d 6027 	strb.w	r6, [sp, #39]	; 0x27
	NVIC_Init(&NVIC_InitStructure);	// the properties are passed to the NVIC_Init function which takes care of the low level stuff
 8000b2e:	f000 fad9 	bl	80010e4 <NVIC_Init>
	//
	buffer_clear(&rxring[usx]);
 8000b32:	f44f 7383 	mov.w	r3, #262	; 0x106
 8000b36:	fb03 f808 	mul.w	r8, r3, r8
 8000b3a:	4a10      	ldr	r2, [pc, #64]	; (8000b7c <usart_begin+0x1b4>)
	buffer_clear(&txring[usx]);
 8000b3c:	4b10      	ldr	r3, [pc, #64]	; (8000b80 <usart_begin+0x1b8>)
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0; // this sets the priority group of the USART3 interrupts
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0; // this sets the subpriority inside the group
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;	// the USART3 interrupts are globally enabled
	NVIC_Init(&NVIC_InitStructure);	// the properties are passed to the NVIC_Init function which takes care of the low level stuff
	//
	buffer_clear(&rxring[usx]);
 8000b3e:	4442      	add	r2, r8
	buffer_clear(&txring[usx]);
 8000b40:	4443      	add	r3, r8
*/

USARTRing rxring[6], txring[6];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 8000b42:	f8a2 4100 	strh.w	r4, [r2, #256]	; 0x100
	r->tail = 0;
 8000b46:	f8a2 4102 	strh.w	r4, [r2, #258]	; 0x102
	r->count = 0;
 8000b4a:	f8a2 4104 	strh.w	r4, [r2, #260]	; 0x104
*/

USARTRing rxring[6], txring[6];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 8000b4e:	f8a3 4100 	strh.w	r4, [r3, #256]	; 0x100
	r->tail = 0;
 8000b52:	f8a3 4102 	strh.w	r4, [r3, #258]	; 0x102
	r->count = 0;
 8000b56:	f8a3 4104 	strh.w	r4, [r3, #260]	; 0x104
	NVIC_Init(&NVIC_InitStructure);	// the properties are passed to the NVIC_Init function which takes care of the low level stuff
	//
	buffer_clear(&rxring[usx]);
	buffer_clear(&txring[usx]);
	// finally this enables the complete USART3 peripheral
	USART_Cmd(USARTx /*usartx[usx]*/, ENABLE);
 8000b5a:	4628      	mov	r0, r5
 8000b5c:	4631      	mov	r1, r6
 8000b5e:	f002 f870 	bl	8002c42 <USART_Cmd>
}
 8000b62:	b00b      	add	sp, #44	; 0x2c
 8000b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b68:	40011000 	.word	0x40011000
 8000b6c:	40004400 	.word	0x40004400
 8000b70:	40004800 	.word	0x40004800
 8000b74:	40004c00 	.word	0x40004c00
 8000b78:	40005000 	.word	0x40005000
 8000b7c:	20000ffc 	.word	0x20000ffc
 8000b80:	200009d8 	.word	0x200009d8

08000b84 <usart_bare_write>:

void usart_bare_write(USART_TypeDef * USARTx /*usartx[usx]*/, const uint16_t w) {
 8000b84:	b538      	push	{r3, r4, r5, lr}
 8000b86:	4604      	mov	r4, r0
 8000b88:	460d      	mov	r5, r1
	while (USART_GetFlagStatus(USARTx /*usartx[usx]*/, USART_FLAG_TXE ) == RESET) ;
 8000b8a:	4620      	mov	r0, r4
 8000b8c:	2180      	movs	r1, #128	; 0x80
 8000b8e:	f002 f932 	bl	8002df6 <USART_GetFlagStatus>
 8000b92:	2800      	cmp	r0, #0
 8000b94:	d0f9      	beq.n	8000b8a <usart_bare_write+0x6>
	USART_SendData(USARTx /*usartx[usx]*/, w) ;
 8000b96:	4620      	mov	r0, r4
 8000b98:	4629      	mov	r1, r5
//	while (USART_GetFlagStatus(USART3, USART_FLAG_TC ) == RESET) ;
}
 8000b9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	USART_Cmd(USARTx /*usartx[usx]*/, ENABLE);
}

void usart_bare_write(USART_TypeDef * USARTx /*usartx[usx]*/, const uint16_t w) {
	while (USART_GetFlagStatus(USARTx /*usartx[usx]*/, USART_FLAG_TXE ) == RESET) ;
	USART_SendData(USARTx /*usartx[usx]*/, w) ;
 8000b9e:	f002 b87d 	b.w	8002c9c <USART_SendData>

08000ba2 <usart_write>:
//	while (USART_GetFlagStatus(USART3, USART_FLAG_TC ) == RESET) ;
}

void usart_write(USART_TypeDef * USARTx /*usartx[usx]*/, const uint16_t w) {
	uint8_t usx;
	if ( USARTx == USART1 ) {
 8000ba2:	4b1f      	ldr	r3, [pc, #124]	; (8000c20 <usart_write+0x7e>)
 8000ba4:	4298      	cmp	r0, r3
	while (USART_GetFlagStatus(USARTx /*usartx[usx]*/, USART_FLAG_TXE ) == RESET) ;
	USART_SendData(USARTx /*usartx[usx]*/, w) ;
//	while (USART_GetFlagStatus(USART3, USART_FLAG_TC ) == RESET) ;
}

void usart_write(USART_TypeDef * USARTx /*usartx[usx]*/, const uint16_t w) {
 8000ba6:	b570      	push	{r4, r5, r6, lr}
 8000ba8:	4604      	mov	r4, r0
 8000baa:	460e      	mov	r6, r1
	uint8_t usx;
	if ( USARTx == USART1 ) {
 8000bac:	d012      	beq.n	8000bd4 <usart_write+0x32>
		usx = 0;
	} else if ( USARTx == USART2 ) {
 8000bae:	f5a3 434c 	sub.w	r3, r3, #52224	; 0xcc00
 8000bb2:	4298      	cmp	r0, r3
 8000bb4:	d010      	beq.n	8000bd8 <usart_write+0x36>
		usx = 1;
	} else if ( USARTx == USART3 ) {
 8000bb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000bba:	4298      	cmp	r0, r3
 8000bbc:	d00e      	beq.n	8000bdc <usart_write+0x3a>
		usx = 2;
	} else if ( USARTx == UART4 ) {
 8000bbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000bc2:	4298      	cmp	r0, r3
 8000bc4:	d00c      	beq.n	8000be0 <usart_write+0x3e>
		usx = 3;
	} else if ( USARTx == UART5 ) {
		usx = 4;
 8000bc6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000bca:	4298      	cmp	r0, r3
 8000bcc:	bf14      	ite	ne
 8000bce:	2305      	movne	r3, #5
 8000bd0:	2304      	moveq	r3, #4
 8000bd2:	e006      	b.n	8000be2 <usart_write+0x40>
}

void usart_write(USART_TypeDef * USARTx /*usartx[usx]*/, const uint16_t w) {
	uint8_t usx;
	if ( USARTx == USART1 ) {
		usx = 0;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	e004      	b.n	8000be2 <usart_write+0x40>
	} else if ( USARTx == USART2 ) {
		usx = 1;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	e002      	b.n	8000be2 <usart_write+0x40>
	} else if ( USARTx == USART3 ) {
		usx = 2;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	e000      	b.n	8000be2 <usart_write+0x40>
	} else if ( USARTx == UART4 ) {
		usx = 3;
 8000be0:	2303      	movs	r3, #3
		usx = 4;
	} else { //if ( USARTx == USART6 ) {
		usx = 5;
	}
	//	uint16_t waitcount = 1000;
	if ( buffer_is_full(&txring[usx]) )
 8000be2:	4a10      	ldr	r2, [pc, #64]	; (8000c24 <usart_write+0x82>)
 8000be4:	f44f 7583 	mov.w	r5, #262	; 0x106
 8000be8:	fb05 2503 	mla	r5, r5, r3, r2
 8000bec:	4628      	mov	r0, r5
 8000bee:	f7ff fe9c 	bl	800092a <buffer_is_full>
 8000bf2:	b118      	cbz	r0, 8000bfc <usart_write+0x5a>
		delay_us(833);
 8000bf4:	f240 3041 	movw	r0, #833	; 0x341
 8000bf8:	f7ff fb2c 	bl	8000254 <delay_us>
	USART_ITConfig(USARTx /*usartx[usx]*/, USART_IT_TXE, DISABLE);
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	4620      	mov	r0, r4
 8000c00:	f240 7127 	movw	r1, #1831	; 0x727
 8000c04:	f002 f8de 	bl	8002dc4 <USART_ITConfig>
	buffer_enque(&txring[usx], w);
 8000c08:	4631      	mov	r1, r6
 8000c0a:	4628      	mov	r0, r5
 8000c0c:	f7ff fe9b 	bl	8000946 <buffer_enque>
	USART_ITConfig(USARTx /*usartx[usx]*/, USART_IT_TXE, ENABLE);
 8000c10:	4620      	mov	r0, r4
 8000c12:	f240 7127 	movw	r1, #1831	; 0x727
 8000c16:	2201      	movs	r2, #1
}
 8000c18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	//	uint16_t waitcount = 1000;
	if ( buffer_is_full(&txring[usx]) )
		delay_us(833);
	USART_ITConfig(USARTx /*usartx[usx]*/, USART_IT_TXE, DISABLE);
	buffer_enque(&txring[usx], w);
	USART_ITConfig(USARTx /*usartx[usx]*/, USART_IT_TXE, ENABLE);
 8000c1c:	f002 b8d2 	b.w	8002dc4 <USART_ITConfig>
 8000c20:	40011000 	.word	0x40011000
 8000c24:	200009d8 	.word	0x200009d8

08000c28 <usart_print>:
}

void usart_print(USART_TypeDef * USARTx /*usartx[usx]*/, const char * s) {
 8000c28:	b538      	push	{r3, r4, r5, lr}
 8000c2a:	4605      	mov	r5, r0
 8000c2c:	460c      	mov	r4, r1
	while (*s)
 8000c2e:	e002      	b.n	8000c36 <usart_print+0xe>
		usart_write(USARTx /*usartx[usx]*/, (uint16_t) *s++);
 8000c30:	4628      	mov	r0, r5
 8000c32:	f7ff ffb6 	bl	8000ba2 <usart_write>
	buffer_enque(&txring[usx], w);
	USART_ITConfig(USARTx /*usartx[usx]*/, USART_IT_TXE, ENABLE);
}

void usart_print(USART_TypeDef * USARTx /*usartx[usx]*/, const char * s) {
	while (*s)
 8000c36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c3a:	2900      	cmp	r1, #0
 8000c3c:	d1f8      	bne.n	8000c30 <usart_print+0x8>
		usart_write(USARTx /*usartx[usx]*/, (uint16_t) *s++);
}
 8000c3e:	bd38      	pop	{r3, r4, r5, pc}

08000c40 <usart_bare_read>:

uint16_t usart_bare_read(USART_TypeDef * USARTx /*usartx[usx]*/) {
	return USART_ReceiveData(USARTx);
 8000c40:	f002 b830 	b.w	8002ca4 <USART_ReceiveData>

08000c44 <usart_read>:
}

uint16_t usart_read(USART_TypeDef * USARTx /*usartx[usx]*/) {
 8000c44:	b508      	push	{r3, lr}
	uint8_t usx;
	if ( USARTx == USART1 ) {
 8000c46:	4b15      	ldr	r3, [pc, #84]	; (8000c9c <usart_read+0x58>)
 8000c48:	4298      	cmp	r0, r3
 8000c4a:	d012      	beq.n	8000c72 <usart_read+0x2e>
		usx = 0;
	} else if ( USARTx == USART2 ) {
 8000c4c:	f5a3 434c 	sub.w	r3, r3, #52224	; 0xcc00
 8000c50:	4298      	cmp	r0, r3
 8000c52:	d010      	beq.n	8000c76 <usart_read+0x32>
		usx = 1;
	} else if ( USARTx == USART3 ) {
 8000c54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000c58:	4298      	cmp	r0, r3
 8000c5a:	d00e      	beq.n	8000c7a <usart_read+0x36>
		usx = 2;
	} else if ( USARTx == UART4 ) {
 8000c5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000c60:	4298      	cmp	r0, r3
 8000c62:	d00c      	beq.n	8000c7e <usart_read+0x3a>
		usx = 3;
	} else if ( USARTx == UART5 ) {
		usx = 4;
 8000c64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000c68:	4298      	cmp	r0, r3
 8000c6a:	bf14      	ite	ne
 8000c6c:	2305      	movne	r3, #5
 8000c6e:	2304      	moveq	r3, #4
 8000c70:	e006      	b.n	8000c80 <usart_read+0x3c>
}

uint16_t usart_read(USART_TypeDef * USARTx /*usartx[usx]*/) {
	uint8_t usx;
	if ( USARTx == USART1 ) {
		usx = 0;
 8000c72:	2300      	movs	r3, #0
 8000c74:	e004      	b.n	8000c80 <usart_read+0x3c>
	} else if ( USARTx == USART2 ) {
		usx = 1;
 8000c76:	2301      	movs	r3, #1
 8000c78:	e002      	b.n	8000c80 <usart_read+0x3c>
	} else if ( USARTx == USART3 ) {
		usx = 2;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	e000      	b.n	8000c80 <usart_read+0x3c>
	} else if ( USARTx == UART4 ) {
		usx = 3;
 8000c7e:	2303      	movs	r3, #3
	} else if ( USARTx == UART5 ) {
		usx = 4;
	} else { //if ( USARTx == USART6 ) {
		usx = 5;
	}
	uint16_t w = buffer_deque(&rxring[usx]);
 8000c80:	4a07      	ldr	r2, [pc, #28]	; (8000ca0 <usart_read+0x5c>)
 8000c82:	f44f 7083 	mov.w	r0, #262	; 0x106
 8000c86:	fb00 2003 	mla	r0, r0, r3, r2
 8000c8a:	f7ff fe7f 	bl	800098c <buffer_deque>
	if ( w == 0xffff ) return 0; // buffer is empty
	return w;
}
 8000c8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c92:	4298      	cmp	r0, r3
 8000c94:	bf08      	it	eq
 8000c96:	2000      	moveq	r0, #0
 8000c98:	bd08      	pop	{r3, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40011000 	.word	0x40011000
 8000ca0:	20000ffc 	.word	0x20000ffc

08000ca4 <usart_flush>:

void usart_flush(USART_TypeDef * USARTx /*usartx[usx]*/) {
	uint8_t usx;
	if ( USARTx == USART1 ) {
 8000ca4:	4b33      	ldr	r3, [pc, #204]	; (8000d74 <usart_flush+0xd0>)
 8000ca6:	4298      	cmp	r0, r3
	uint16_t w = buffer_deque(&rxring[usx]);
	if ( w == 0xffff ) return 0; // buffer is empty
	return w;
}

void usart_flush(USART_TypeDef * USARTx /*usartx[usx]*/) {
 8000ca8:	b570      	push	{r4, r5, r6, lr}
 8000caa:	4604      	mov	r4, r0
	uint8_t usx;
	if ( USARTx == USART1 ) {
 8000cac:	d011      	beq.n	8000cd2 <usart_flush+0x2e>
		usx = 0;
	} else if ( USARTx == USART2 ) {
 8000cae:	f5a3 434c 	sub.w	r3, r3, #52224	; 0xcc00
 8000cb2:	4298      	cmp	r0, r3
 8000cb4:	d00f      	beq.n	8000cd6 <usart_flush+0x32>
		usx = 1;
	} else if ( USARTx == USART3 ) {
 8000cb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000cba:	4298      	cmp	r0, r3
 8000cbc:	d00d      	beq.n	8000cda <usart_flush+0x36>
		usx = 2;
	} else if ( USARTx == UART4 ) {
 8000cbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000cc2:	4298      	cmp	r0, r3
 8000cc4:	d00b      	beq.n	8000cde <usart_flush+0x3a>
		usx = 3;
	} else if ( USARTx == UART5 ) {
		usx = 4;
 8000cc6:	4d2c      	ldr	r5, [pc, #176]	; (8000d78 <usart_flush+0xd4>)
 8000cc8:	42a8      	cmp	r0, r5
 8000cca:	bf14      	ite	ne
 8000ccc:	2505      	movne	r5, #5
 8000cce:	2504      	moveq	r5, #4
 8000cd0:	e006      	b.n	8000ce0 <usart_flush+0x3c>
}

void usart_flush(USART_TypeDef * USARTx /*usartx[usx]*/) {
	uint8_t usx;
	if ( USARTx == USART1 ) {
		usx = 0;
 8000cd2:	2500      	movs	r5, #0
 8000cd4:	e004      	b.n	8000ce0 <usart_flush+0x3c>
	} else if ( USARTx == USART2 ) {
		usx = 1;
 8000cd6:	2501      	movs	r5, #1
 8000cd8:	e002      	b.n	8000ce0 <usart_flush+0x3c>
	} else if ( USARTx == USART3 ) {
		usx = 2;
 8000cda:	2502      	movs	r5, #2
 8000cdc:	e000      	b.n	8000ce0 <usart_flush+0x3c>
	} else if ( USARTx == UART4 ) {
		usx = 3;
 8000cde:	2503      	movs	r5, #3
	} else if ( USARTx == UART5 ) {
		usx = 4;
	} else { //if ( USARTx == USART6 ) {
		usx = 5;
	}
	USART_ITConfig(USARTx, USART_IT_RXNE, DISABLE); // enable the USART3 receive interrupt
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	4620      	mov	r0, r4
 8000ce4:	f240 5125 	movw	r1, #1317	; 0x525
 8000ce8:	f002 f86c 	bl	8002dc4 <USART_ITConfig>
	buffer_clear(&rxring[usx]);
 8000cec:	f44f 7383 	mov.w	r3, #262	; 0x106
 8000cf0:	435d      	muls	r5, r3
 8000cf2:	4b22      	ldr	r3, [pc, #136]	; (8000d7c <usart_flush+0xd8>)
 8000cf4:	18eb      	adds	r3, r5, r3
*/

USARTRing rxring[6], txring[6];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 8000cf6:	2600      	movs	r6, #0
 8000cf8:	f8a3 6100 	strh.w	r6, [r3, #256]	; 0x100
	r->tail = 0;
 8000cfc:	f8a3 6102 	strh.w	r6, [r3, #258]	; 0x102
	r->count = 0;
 8000d00:	f8a3 6104 	strh.w	r6, [r3, #260]	; 0x104
	} else { //if ( USARTx == USART6 ) {
		usx = 5;
	}
	USART_ITConfig(USARTx, USART_IT_RXNE, DISABLE); // enable the USART3 receive interrupt
	buffer_clear(&rxring[usx]);
	USART_ClearITPendingBit(USARTx, USART_IT_RXNE );
 8000d04:	4620      	mov	r0, r4
 8000d06:	f240 5125 	movw	r1, #1317	; 0x525
 8000d0a:	f002 f89d 	bl	8002e48 <USART_ClearITPendingBit>
	USART_ITConfig(USARTx, USART_IT_RXNE, ENABLE); // enable the USART3 receive interrupt
 8000d0e:	4620      	mov	r0, r4
 8000d10:	f240 5125 	movw	r1, #1317	; 0x525
 8000d14:	2201      	movs	r2, #1
 8000d16:	f002 f855 	bl	8002dc4 <USART_ITConfig>
	USART_ITConfig(USARTx, USART_IT_TXE, DISABLE);
 8000d1a:	4620      	mov	r0, r4
 8000d1c:	f240 7127 	movw	r1, #1831	; 0x727
 8000d20:	4632      	mov	r2, r6
 8000d22:	f002 f84f 	bl	8002dc4 <USART_ITConfig>
	while ( buffer_count(&txring[usx]) > 0 ) {
 8000d26:	4b16      	ldr	r3, [pc, #88]	; (8000d80 <usart_flush+0xdc>)
 8000d28:	195d      	adds	r5, r3, r5
 8000d2a:	e012      	b.n	8000d52 <usart_flush+0xae>
		while (USART_GetFlagStatus(USARTx, USART_FLAG_TXE ) == RESET);
 8000d2c:	4620      	mov	r0, r4
 8000d2e:	2180      	movs	r1, #128	; 0x80
 8000d30:	f002 f861 	bl	8002df6 <USART_GetFlagStatus>
 8000d34:	2800      	cmp	r0, #0
 8000d36:	d0f9      	beq.n	8000d2c <usart_flush+0x88>
		USART_SendData(USARTx, buffer_deque(&txring[usx]));
 8000d38:	4628      	mov	r0, r5
 8000d3a:	f7ff fe27 	bl	800098c <buffer_deque>
 8000d3e:	4601      	mov	r1, r0
 8000d40:	4620      	mov	r0, r4
 8000d42:	f001 ffab 	bl	8002c9c <USART_SendData>
		while (USART_GetFlagStatus(USARTx, USART_FLAG_TC ) == RESET);
 8000d46:	4620      	mov	r0, r4
 8000d48:	2140      	movs	r1, #64	; 0x40
 8000d4a:	f002 f854 	bl	8002df6 <USART_GetFlagStatus>
 8000d4e:	2800      	cmp	r0, #0
 8000d50:	d0f9      	beq.n	8000d46 <usart_flush+0xa2>
	USART_ITConfig(USARTx, USART_IT_RXNE, DISABLE); // enable the USART3 receive interrupt
	buffer_clear(&rxring[usx]);
	USART_ClearITPendingBit(USARTx, USART_IT_RXNE );
	USART_ITConfig(USARTx, USART_IT_RXNE, ENABLE); // enable the USART3 receive interrupt
	USART_ITConfig(USARTx, USART_IT_TXE, DISABLE);
	while ( buffer_count(&txring[usx]) > 0 ) {
 8000d52:	f8b5 6104 	ldrh.w	r6, [r5, #260]	; 0x104
 8000d56:	2e00      	cmp	r6, #0
 8000d58:	d1e8      	bne.n	8000d2c <usart_flush+0x88>
		while (USART_GetFlagStatus(USARTx, USART_FLAG_TXE ) == RESET);
		USART_SendData(USARTx, buffer_deque(&txring[usx]));
		while (USART_GetFlagStatus(USARTx, USART_FLAG_TC ) == RESET);
	}
	USART_ClearITPendingBit(USARTx, USART_IT_TXE );
 8000d5a:	4620      	mov	r0, r4
 8000d5c:	f240 7127 	movw	r1, #1831	; 0x727
 8000d60:	f002 f872 	bl	8002e48 <USART_ClearITPendingBit>
*/

USARTRing rxring[6], txring[6];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 8000d64:	f8a5 6100 	strh.w	r6, [r5, #256]	; 0x100
	r->tail = 0;
 8000d68:	f8a5 6102 	strh.w	r6, [r5, #258]	; 0x102
	r->count = 0;
 8000d6c:	f8a5 6104 	strh.w	r6, [r5, #260]	; 0x104
		USART_SendData(USARTx, buffer_deque(&txring[usx]));
		while (USART_GetFlagStatus(USARTx, USART_FLAG_TC ) == RESET);
	}
	USART_ClearITPendingBit(USARTx, USART_IT_TXE );
	buffer_clear(&txring[usx]);
}
 8000d70:	bd70      	pop	{r4, r5, r6, pc}
 8000d72:	bf00      	nop
 8000d74:	40011000 	.word	0x40011000
 8000d78:	40005000 	.word	0x40005000
 8000d7c:	20000ffc 	.word	0x20000ffc
 8000d80:	200009d8 	.word	0x200009d8

08000d84 <usart_peek>:

uint16_t usart_peek(USART_TypeDef * USARTx /*usartx[usx]*/) {
	uint8_t usx;
	if ( USARTx == USART1 ) {
 8000d84:	4b17      	ldr	r3, [pc, #92]	; (8000de4 <usart_peek+0x60>)
 8000d86:	4298      	cmp	r0, r3
 8000d88:	d012      	beq.n	8000db0 <usart_peek+0x2c>
		usx = 0;
	} else if ( USARTx == USART2 ) {
 8000d8a:	f5a3 434c 	sub.w	r3, r3, #52224	; 0xcc00
 8000d8e:	4298      	cmp	r0, r3
 8000d90:	d010      	beq.n	8000db4 <usart_peek+0x30>
		usx = 1;
	} else if ( USARTx == USART3 ) {
 8000d92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000d96:	4298      	cmp	r0, r3
 8000d98:	d00e      	beq.n	8000db8 <usart_peek+0x34>
		usx = 2;
	} else if ( USARTx == UART4 ) {
 8000d9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000d9e:	4298      	cmp	r0, r3
 8000da0:	d00c      	beq.n	8000dbc <usart_peek+0x38>
		usx = 3;
	} else if ( USARTx == UART5 ) {
		usx = 4;
 8000da2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000da6:	4298      	cmp	r0, r3
 8000da8:	bf14      	ite	ne
 8000daa:	2005      	movne	r0, #5
 8000dac:	2004      	moveq	r0, #4
 8000dae:	e006      	b.n	8000dbe <usart_peek+0x3a>
}

uint16_t usart_peek(USART_TypeDef * USARTx /*usartx[usx]*/) {
	uint8_t usx;
	if ( USARTx == USART1 ) {
		usx = 0;
 8000db0:	2000      	movs	r0, #0
 8000db2:	e004      	b.n	8000dbe <usart_peek+0x3a>
	} else if ( USARTx == USART2 ) {
		usx = 1;
 8000db4:	2001      	movs	r0, #1
 8000db6:	e002      	b.n	8000dbe <usart_peek+0x3a>
	} else if ( USARTx == USART3 ) {
		usx = 2;
 8000db8:	2002      	movs	r0, #2
 8000dba:	e000      	b.n	8000dbe <usart_peek+0x3a>
	} else if ( USARTx == UART4 ) {
		usx = 3;
 8000dbc:	2003      	movs	r0, #3
	r->tail = 0;
	r->count = 0;
}

uint16_t buffer_count(USARTRing * r) {
	return r->count;
 8000dbe:	4b0a      	ldr	r3, [pc, #40]	; (8000de8 <usart_peek+0x64>)
 8000dc0:	f44f 7283 	mov.w	r2, #262	; 0x106
 8000dc4:	fb02 3200 	mla	r2, r2, r0, r3
	} else if ( USARTx == UART5 ) {
		usx = 4;
	} else { //if ( USARTx == USART6 ) {
		usx = 5;
	}
	if ( ! buffer_count(&rxring[usx]) == 0 )
 8000dc8:	f8b2 1104 	ldrh.w	r1, [r2, #260]	; 0x104
 8000dcc:	b139      	cbz	r1, 8000dde <usart_peek+0x5a>
		return rxring[usx].buf[rxring[usx].tail];
 8000dce:	f9b2 2102 	ldrsh.w	r2, [r2, #258]	; 0x102
 8000dd2:	2183      	movs	r1, #131	; 0x83
 8000dd4:	fb01 2000 	mla	r0, r1, r0, r2
 8000dd8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8000ddc:	4770      	bx	lr
	return 0xffff;
 8000dde:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 8000de2:	4770      	bx	lr
 8000de4:	40011000 	.word	0x40011000
 8000de8:	20000ffc 	.word	0x20000ffc

08000dec <usart_available>:

uint16_t usart_available(USART_TypeDef * USARTx /*usartx[usx]*/) {
	uint8_t usx;
	if ( USARTx == USART1 ) {
 8000dec:	4b12      	ldr	r3, [pc, #72]	; (8000e38 <usart_available+0x4c>)
 8000dee:	4298      	cmp	r0, r3
 8000df0:	d012      	beq.n	8000e18 <usart_available+0x2c>
		usx = 0;
	} else if ( USARTx == USART2 ) {
 8000df2:	f5a3 434c 	sub.w	r3, r3, #52224	; 0xcc00
 8000df6:	4298      	cmp	r0, r3
 8000df8:	d010      	beq.n	8000e1c <usart_available+0x30>
		usx = 1;
	} else if ( USARTx == USART3 ) {
 8000dfa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000dfe:	4298      	cmp	r0, r3
 8000e00:	d00e      	beq.n	8000e20 <usart_available+0x34>
		usx = 2;
	} else if ( USARTx == UART4 ) {
 8000e02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000e06:	4298      	cmp	r0, r3
 8000e08:	d00c      	beq.n	8000e24 <usart_available+0x38>
		usx = 3;
	} else if ( USARTx == UART5 ) {
		usx = 4;
 8000e0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000e0e:	4298      	cmp	r0, r3
 8000e10:	bf14      	ite	ne
 8000e12:	2005      	movne	r0, #5
 8000e14:	2004      	moveq	r0, #4
 8000e16:	e006      	b.n	8000e26 <usart_available+0x3a>
}

uint16_t usart_available(USART_TypeDef * USARTx /*usartx[usx]*/) {
	uint8_t usx;
	if ( USARTx == USART1 ) {
		usx = 0;
 8000e18:	2000      	movs	r0, #0
 8000e1a:	e004      	b.n	8000e26 <usart_available+0x3a>
	} else if ( USARTx == USART2 ) {
		usx = 1;
 8000e1c:	2001      	movs	r0, #1
 8000e1e:	e002      	b.n	8000e26 <usart_available+0x3a>
	} else if ( USARTx == USART3 ) {
		usx = 2;
 8000e20:	2002      	movs	r0, #2
 8000e22:	e000      	b.n	8000e26 <usart_available+0x3a>
	} else if ( USARTx == UART4 ) {
		usx = 3;
 8000e24:	2003      	movs	r0, #3
	r->tail = 0;
	r->count = 0;
}

uint16_t buffer_count(USARTRing * r) {
	return r->count;
 8000e26:	4b05      	ldr	r3, [pc, #20]	; (8000e3c <usart_available+0x50>)
 8000e28:	f44f 7283 	mov.w	r2, #262	; 0x106
 8000e2c:	fb02 3000 	mla	r0, r2, r0, r3
		usx = 4;
	} else { //if ( USARTx == USART6 ) {
		usx = 5;
	}
	return buffer_count(&rxring[usx]);
}
 8000e30:	f8b0 0104 	ldrh.w	r0, [r0, #260]	; 0x104
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	40011000 	.word	0x40011000
 8000e3c:	20000ffc 	.word	0x20000ffc

08000e40 <USART1_IRQHandler>:


// this is the interrupt request handler (IRQ) for ALL USART3 interrupts

void USART1_IRQHandler(void) {
 8000e40:	b508      	push	{r3, lr}
	if (USART_GetITStatus(USART1, USART_IT_RXNE )) {
 8000e42:	4816      	ldr	r0, [pc, #88]	; (8000e9c <USART1_IRQHandler+0x5c>)
 8000e44:	f240 5125 	movw	r1, #1317	; 0x525
 8000e48:	f001 ffdf 	bl	8002e0a <USART_GetITStatus>
 8000e4c:	b130      	cbz	r0, 8000e5c <USART1_IRQHandler+0x1c>
		buffer_enque(&rxring[USART1Serial], USART_ReceiveData(USART1) );
 8000e4e:	4813      	ldr	r0, [pc, #76]	; (8000e9c <USART1_IRQHandler+0x5c>)
 8000e50:	f001 ff28 	bl	8002ca4 <USART_ReceiveData>
 8000e54:	4601      	mov	r1, r0
 8000e56:	4812      	ldr	r0, [pc, #72]	; (8000ea0 <USART1_IRQHandler+0x60>)
 8000e58:	f7ff fd75 	bl	8000946 <buffer_enque>
	}

	if (USART_GetITStatus(USART1, USART_IT_TXE )) {
 8000e5c:	480f      	ldr	r0, [pc, #60]	; (8000e9c <USART1_IRQHandler+0x5c>)
 8000e5e:	f240 7127 	movw	r1, #1831	; 0x727
 8000e62:	f001 ffd2 	bl	8002e0a <USART_GetITStatus>
 8000e66:	2800      	cmp	r0, #0
 8000e68:	d017      	beq.n	8000e9a <USART1_IRQHandler+0x5a>
		if (txring[USART1Serial].count == 0) {
 8000e6a:	480e      	ldr	r0, [pc, #56]	; (8000ea4 <USART1_IRQHandler+0x64>)
 8000e6c:	f8b0 2104 	ldrh.w	r2, [r0, #260]	; 0x104
 8000e70:	b95a      	cbnz	r2, 8000e8a <USART1_IRQHandler+0x4a>
			USART_ITConfig(USART1, USART_IT_TXE, (FunctionalState) DISABLE);
 8000e72:	480a      	ldr	r0, [pc, #40]	; (8000e9c <USART1_IRQHandler+0x5c>)
 8000e74:	f240 7127 	movw	r1, #1831	; 0x727
 8000e78:	f001 ffa4 	bl	8002dc4 <USART_ITConfig>
			USART_ClearITPendingBit(USART1, USART_IT_TXE );
 8000e7c:	4807      	ldr	r0, [pc, #28]	; (8000e9c <USART1_IRQHandler+0x5c>)
 8000e7e:	f240 7127 	movw	r1, #1831	; 0x727
		} else {
			USART_SendData(USART1, buffer_deque(&txring[USART1Serial]));
		}
	}
}
 8000e82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	}

	if (USART_GetITStatus(USART1, USART_IT_TXE )) {
		if (txring[USART1Serial].count == 0) {
			USART_ITConfig(USART1, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART1, USART_IT_TXE );
 8000e86:	f001 bfdf 	b.w	8002e48 <USART_ClearITPendingBit>
		} else {
			USART_SendData(USART1, buffer_deque(&txring[USART1Serial]));
 8000e8a:	f7ff fd7f 	bl	800098c <buffer_deque>
 8000e8e:	4601      	mov	r1, r0
 8000e90:	4802      	ldr	r0, [pc, #8]	; (8000e9c <USART1_IRQHandler+0x5c>)
		}
	}
}
 8000e92:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	if (USART_GetITStatus(USART1, USART_IT_TXE )) {
		if (txring[USART1Serial].count == 0) {
			USART_ITConfig(USART1, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART1, USART_IT_TXE );
		} else {
			USART_SendData(USART1, buffer_deque(&txring[USART1Serial]));
 8000e96:	f001 bf01 	b.w	8002c9c <USART_SendData>
 8000e9a:	bd08      	pop	{r3, pc}
 8000e9c:	40011000 	.word	0x40011000
 8000ea0:	20000ffc 	.word	0x20000ffc
 8000ea4:	200009d8 	.word	0x200009d8

08000ea8 <USART2_IRQHandler>:
		}
	}
}

void USART2_IRQHandler(void) {
 8000ea8:	b508      	push	{r3, lr}
	if (USART_GetITStatus(USART2, USART_IT_RXNE )) {
 8000eaa:	4817      	ldr	r0, [pc, #92]	; (8000f08 <USART2_IRQHandler+0x60>)
 8000eac:	f240 5125 	movw	r1, #1317	; 0x525
 8000eb0:	f001 ffab 	bl	8002e0a <USART_GetITStatus>
 8000eb4:	b130      	cbz	r0, 8000ec4 <USART2_IRQHandler+0x1c>
		buffer_enque(&rxring[USART2Serial], USART_ReceiveData(USART2) );
 8000eb6:	4814      	ldr	r0, [pc, #80]	; (8000f08 <USART2_IRQHandler+0x60>)
 8000eb8:	f001 fef4 	bl	8002ca4 <USART_ReceiveData>
 8000ebc:	4601      	mov	r1, r0
 8000ebe:	4813      	ldr	r0, [pc, #76]	; (8000f0c <USART2_IRQHandler+0x64>)
 8000ec0:	f7ff fd41 	bl	8000946 <buffer_enque>
	}
	if (USART_GetITStatus(USART2, USART_IT_TXE )) {
 8000ec4:	4810      	ldr	r0, [pc, #64]	; (8000f08 <USART2_IRQHandler+0x60>)
 8000ec6:	f240 7127 	movw	r1, #1831	; 0x727
 8000eca:	f001 ff9e 	bl	8002e0a <USART_GetITStatus>
 8000ece:	2800      	cmp	r0, #0
 8000ed0:	d019      	beq.n	8000f06 <USART2_IRQHandler+0x5e>
		if (txring[USART2Serial].count == 0) {
 8000ed2:	480f      	ldr	r0, [pc, #60]	; (8000f10 <USART2_IRQHandler+0x68>)
 8000ed4:	f8b0 220a 	ldrh.w	r2, [r0, #522]	; 0x20a
 8000ed8:	b95a      	cbnz	r2, 8000ef2 <USART2_IRQHandler+0x4a>
			USART_ITConfig(USART2, USART_IT_TXE, (FunctionalState) DISABLE);
 8000eda:	480b      	ldr	r0, [pc, #44]	; (8000f08 <USART2_IRQHandler+0x60>)
 8000edc:	f240 7127 	movw	r1, #1831	; 0x727
 8000ee0:	f001 ff70 	bl	8002dc4 <USART_ITConfig>
			USART_ClearITPendingBit(USART2, USART_IT_TXE );
 8000ee4:	4808      	ldr	r0, [pc, #32]	; (8000f08 <USART2_IRQHandler+0x60>)
 8000ee6:	f240 7127 	movw	r1, #1831	; 0x727
		} else {
			USART_SendData(USART2, buffer_deque(&txring[USART2Serial]));
		}
	}
}
 8000eea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		buffer_enque(&rxring[USART2Serial], USART_ReceiveData(USART2) );
	}
	if (USART_GetITStatus(USART2, USART_IT_TXE )) {
		if (txring[USART2Serial].count == 0) {
			USART_ITConfig(USART2, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART2, USART_IT_TXE );
 8000eee:	f001 bfab 	b.w	8002e48 <USART_ClearITPendingBit>
		} else {
			USART_SendData(USART2, buffer_deque(&txring[USART2Serial]));
 8000ef2:	f500 7083 	add.w	r0, r0, #262	; 0x106
 8000ef6:	f7ff fd49 	bl	800098c <buffer_deque>
 8000efa:	4601      	mov	r1, r0
 8000efc:	4802      	ldr	r0, [pc, #8]	; (8000f08 <USART2_IRQHandler+0x60>)
		}
	}
}
 8000efe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	if (USART_GetITStatus(USART2, USART_IT_TXE )) {
		if (txring[USART2Serial].count == 0) {
			USART_ITConfig(USART2, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART2, USART_IT_TXE );
		} else {
			USART_SendData(USART2, buffer_deque(&txring[USART2Serial]));
 8000f02:	f001 becb 	b.w	8002c9c <USART_SendData>
 8000f06:	bd08      	pop	{r3, pc}
 8000f08:	40004400 	.word	0x40004400
 8000f0c:	20001102 	.word	0x20001102
 8000f10:	200009d8 	.word	0x200009d8

08000f14 <USART3_IRQHandler>:
		}
	}
}

void USART3_IRQHandler(void) {
 8000f14:	b508      	push	{r3, lr}
	if (USART_GetITStatus(USART3, USART_IT_RXNE )) {
 8000f16:	4817      	ldr	r0, [pc, #92]	; (8000f74 <USART3_IRQHandler+0x60>)
 8000f18:	f240 5125 	movw	r1, #1317	; 0x525
 8000f1c:	f001 ff75 	bl	8002e0a <USART_GetITStatus>
 8000f20:	b130      	cbz	r0, 8000f30 <USART3_IRQHandler+0x1c>
		buffer_enque(&rxring[USART3Serial], USART_ReceiveData(USART3) );
 8000f22:	4814      	ldr	r0, [pc, #80]	; (8000f74 <USART3_IRQHandler+0x60>)
 8000f24:	f001 febe 	bl	8002ca4 <USART_ReceiveData>
 8000f28:	4601      	mov	r1, r0
 8000f2a:	4813      	ldr	r0, [pc, #76]	; (8000f78 <USART3_IRQHandler+0x64>)
 8000f2c:	f7ff fd0b 	bl	8000946 <buffer_enque>
	}

	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
 8000f30:	4810      	ldr	r0, [pc, #64]	; (8000f74 <USART3_IRQHandler+0x60>)
 8000f32:	f240 7127 	movw	r1, #1831	; 0x727
 8000f36:	f001 ff68 	bl	8002e0a <USART_GetITStatus>
 8000f3a:	2800      	cmp	r0, #0
 8000f3c:	d019      	beq.n	8000f72 <USART3_IRQHandler+0x5e>
		if (txring[USART3Serial].count == 0) {
 8000f3e:	480f      	ldr	r0, [pc, #60]	; (8000f7c <USART3_IRQHandler+0x68>)
 8000f40:	f8b0 2310 	ldrh.w	r2, [r0, #784]	; 0x310
 8000f44:	b95a      	cbnz	r2, 8000f5e <USART3_IRQHandler+0x4a>
			USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) DISABLE);
 8000f46:	480b      	ldr	r0, [pc, #44]	; (8000f74 <USART3_IRQHandler+0x60>)
 8000f48:	f240 7127 	movw	r1, #1831	; 0x727
 8000f4c:	f001 ff3a 	bl	8002dc4 <USART_ITConfig>
			USART_ClearITPendingBit(USART3, USART_IT_TXE );
 8000f50:	4808      	ldr	r0, [pc, #32]	; (8000f74 <USART3_IRQHandler+0x60>)
 8000f52:	f240 7127 	movw	r1, #1831	; 0x727
		} else {
			USART_SendData(USART3, buffer_deque(&txring[USART3Serial]));
		}
	}
}
 8000f56:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	}

	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
		if (txring[USART3Serial].count == 0) {
			USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART3, USART_IT_TXE );
 8000f5a:	f001 bf75 	b.w	8002e48 <USART_ClearITPendingBit>
		} else {
			USART_SendData(USART3, buffer_deque(&txring[USART3Serial]));
 8000f5e:	f500 7003 	add.w	r0, r0, #524	; 0x20c
 8000f62:	f7ff fd13 	bl	800098c <buffer_deque>
 8000f66:	4601      	mov	r1, r0
 8000f68:	4802      	ldr	r0, [pc, #8]	; (8000f74 <USART3_IRQHandler+0x60>)
		}
	}
}
 8000f6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
		if (txring[USART3Serial].count == 0) {
			USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART3, USART_IT_TXE );
		} else {
			USART_SendData(USART3, buffer_deque(&txring[USART3Serial]));
 8000f6e:	f001 be95 	b.w	8002c9c <USART_SendData>
 8000f72:	bd08      	pop	{r3, pc}
 8000f74:	40004800 	.word	0x40004800
 8000f78:	20001208 	.word	0x20001208
 8000f7c:	200009d8 	.word	0x200009d8

08000f80 <UART4_IRQHandler>:
		}
	}
}

void UART4_IRQHandler(void) {
 8000f80:	b508      	push	{r3, lr}
	if (USART_GetITStatus(UART4, USART_IT_RXNE )) {
 8000f82:	4817      	ldr	r0, [pc, #92]	; (8000fe0 <UART4_IRQHandler+0x60>)
 8000f84:	f240 5125 	movw	r1, #1317	; 0x525
 8000f88:	f001 ff3f 	bl	8002e0a <USART_GetITStatus>
 8000f8c:	b130      	cbz	r0, 8000f9c <UART4_IRQHandler+0x1c>
		buffer_enque(&rxring[UART4Serial], USART_ReceiveData(UART4) );
 8000f8e:	4814      	ldr	r0, [pc, #80]	; (8000fe0 <UART4_IRQHandler+0x60>)
 8000f90:	f001 fe88 	bl	8002ca4 <USART_ReceiveData>
 8000f94:	4601      	mov	r1, r0
 8000f96:	4813      	ldr	r0, [pc, #76]	; (8000fe4 <UART4_IRQHandler+0x64>)
 8000f98:	f7ff fcd5 	bl	8000946 <buffer_enque>
	}

	if (USART_GetITStatus(UART4, USART_IT_TXE )) {
 8000f9c:	4810      	ldr	r0, [pc, #64]	; (8000fe0 <UART4_IRQHandler+0x60>)
 8000f9e:	f240 7127 	movw	r1, #1831	; 0x727
 8000fa2:	f001 ff32 	bl	8002e0a <USART_GetITStatus>
 8000fa6:	2800      	cmp	r0, #0
 8000fa8:	d018      	beq.n	8000fdc <UART4_IRQHandler+0x5c>
		if (txring[UART4Serial].count == 0) {
 8000faa:	4b0f      	ldr	r3, [pc, #60]	; (8000fe8 <UART4_IRQHandler+0x68>)
 8000fac:	f8b3 2416 	ldrh.w	r2, [r3, #1046]	; 0x416
 8000fb0:	b95a      	cbnz	r2, 8000fca <UART4_IRQHandler+0x4a>
			USART_ITConfig(UART4, USART_IT_TXE, (FunctionalState) DISABLE);
 8000fb2:	480b      	ldr	r0, [pc, #44]	; (8000fe0 <UART4_IRQHandler+0x60>)
 8000fb4:	f240 7127 	movw	r1, #1831	; 0x727
 8000fb8:	f001 ff04 	bl	8002dc4 <USART_ITConfig>
			USART_ClearITPendingBit(UART4, USART_IT_TXE );
 8000fbc:	4808      	ldr	r0, [pc, #32]	; (8000fe0 <UART4_IRQHandler+0x60>)
 8000fbe:	f240 7127 	movw	r1, #1831	; 0x727
		} else {
			USART_SendData(UART4, buffer_deque(&txring[UART4Serial]));
		}
	}
}
 8000fc2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	}

	if (USART_GetITStatus(UART4, USART_IT_TXE )) {
		if (txring[UART4Serial].count == 0) {
			USART_ITConfig(UART4, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(UART4, USART_IT_TXE );
 8000fc6:	f001 bf3f 	b.w	8002e48 <USART_ClearITPendingBit>
		} else {
			USART_SendData(UART4, buffer_deque(&txring[UART4Serial]));
 8000fca:	4808      	ldr	r0, [pc, #32]	; (8000fec <UART4_IRQHandler+0x6c>)
 8000fcc:	f7ff fcde 	bl	800098c <buffer_deque>
 8000fd0:	4601      	mov	r1, r0
 8000fd2:	4803      	ldr	r0, [pc, #12]	; (8000fe0 <UART4_IRQHandler+0x60>)
		}
	}
}
 8000fd4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	if (USART_GetITStatus(UART4, USART_IT_TXE )) {
		if (txring[UART4Serial].count == 0) {
			USART_ITConfig(UART4, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(UART4, USART_IT_TXE );
		} else {
			USART_SendData(UART4, buffer_deque(&txring[UART4Serial]));
 8000fd8:	f001 be60 	b.w	8002c9c <USART_SendData>
 8000fdc:	bd08      	pop	{r3, pc}
 8000fde:	bf00      	nop
 8000fe0:	40004c00 	.word	0x40004c00
 8000fe4:	2000130e 	.word	0x2000130e
 8000fe8:	200009d8 	.word	0x200009d8
 8000fec:	20000cea 	.word	0x20000cea

08000ff0 <UART5_IRQHandler>:
		}
	}
}

void UART5_IRQHandler(void) {
 8000ff0:	b508      	push	{r3, lr}
	if (USART_GetITStatus(UART5, USART_IT_RXNE )) {
 8000ff2:	4817      	ldr	r0, [pc, #92]	; (8001050 <UART5_IRQHandler+0x60>)
 8000ff4:	f240 5125 	movw	r1, #1317	; 0x525
 8000ff8:	f001 ff07 	bl	8002e0a <USART_GetITStatus>
 8000ffc:	b130      	cbz	r0, 800100c <UART5_IRQHandler+0x1c>
		buffer_enque(&rxring[UART5Serial], USART_ReceiveData(UART5) );
 8000ffe:	4814      	ldr	r0, [pc, #80]	; (8001050 <UART5_IRQHandler+0x60>)
 8001000:	f001 fe50 	bl	8002ca4 <USART_ReceiveData>
 8001004:	4601      	mov	r1, r0
 8001006:	4813      	ldr	r0, [pc, #76]	; (8001054 <UART5_IRQHandler+0x64>)
 8001008:	f7ff fc9d 	bl	8000946 <buffer_enque>
	}

	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
 800100c:	4812      	ldr	r0, [pc, #72]	; (8001058 <UART5_IRQHandler+0x68>)
 800100e:	f240 7127 	movw	r1, #1831	; 0x727
 8001012:	f001 fefa 	bl	8002e0a <USART_GetITStatus>
 8001016:	2800      	cmp	r0, #0
 8001018:	d019      	beq.n	800104e <UART5_IRQHandler+0x5e>
		if (txring[UART5Serial].count == 0) {
 800101a:	4810      	ldr	r0, [pc, #64]	; (800105c <UART5_IRQHandler+0x6c>)
 800101c:	f8b0 251c 	ldrh.w	r2, [r0, #1308]	; 0x51c
 8001020:	b95a      	cbnz	r2, 800103a <UART5_IRQHandler+0x4a>
			USART_ITConfig(UART5, USART_IT_TXE, (FunctionalState) DISABLE);
 8001022:	480b      	ldr	r0, [pc, #44]	; (8001050 <UART5_IRQHandler+0x60>)
 8001024:	f240 7127 	movw	r1, #1831	; 0x727
 8001028:	f001 fecc 	bl	8002dc4 <USART_ITConfig>
			USART_ClearITPendingBit(UART5, USART_IT_TXE );
 800102c:	4808      	ldr	r0, [pc, #32]	; (8001050 <UART5_IRQHandler+0x60>)
 800102e:	f240 7127 	movw	r1, #1831	; 0x727
		} else {
			USART_SendData(UART5, buffer_deque(&txring[UART5Serial]));
		}
	}
}
 8001032:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	}

	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
		if (txring[UART5Serial].count == 0) {
			USART_ITConfig(UART5, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(UART5, USART_IT_TXE );
 8001036:	f001 bf07 	b.w	8002e48 <USART_ClearITPendingBit>
		} else {
			USART_SendData(UART5, buffer_deque(&txring[UART5Serial]));
 800103a:	f500 6083 	add.w	r0, r0, #1048	; 0x418
 800103e:	f7ff fca5 	bl	800098c <buffer_deque>
 8001042:	4601      	mov	r1, r0
 8001044:	4802      	ldr	r0, [pc, #8]	; (8001050 <UART5_IRQHandler+0x60>)
		}
	}
}
 8001046:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
		if (txring[UART5Serial].count == 0) {
			USART_ITConfig(UART5, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(UART5, USART_IT_TXE );
		} else {
			USART_SendData(UART5, buffer_deque(&txring[UART5Serial]));
 800104a:	f001 be27 	b.w	8002c9c <USART_SendData>
 800104e:	bd08      	pop	{r3, pc}
 8001050:	40005000 	.word	0x40005000
 8001054:	20001414 	.word	0x20001414
 8001058:	40004800 	.word	0x40004800
 800105c:	200009d8 	.word	0x200009d8

08001060 <USART6_IRQHandler>:
		}
	}
}

void USART6_IRQHandler(void) {
 8001060:	b508      	push	{r3, lr}
	if (USART_GetITStatus(USART6, USART_IT_RXNE )) {
 8001062:	4817      	ldr	r0, [pc, #92]	; (80010c0 <USART6_IRQHandler+0x60>)
 8001064:	f240 5125 	movw	r1, #1317	; 0x525
 8001068:	f001 fecf 	bl	8002e0a <USART_GetITStatus>
 800106c:	b130      	cbz	r0, 800107c <USART6_IRQHandler+0x1c>
		buffer_enque(&rxring[USART6Serial], USART_ReceiveData(USART6) );
 800106e:	4814      	ldr	r0, [pc, #80]	; (80010c0 <USART6_IRQHandler+0x60>)
 8001070:	f001 fe18 	bl	8002ca4 <USART_ReceiveData>
 8001074:	4601      	mov	r1, r0
 8001076:	4813      	ldr	r0, [pc, #76]	; (80010c4 <USART6_IRQHandler+0x64>)
 8001078:	f7ff fc65 	bl	8000946 <buffer_enque>
	}

	if (USART_GetITStatus(USART6, USART_IT_TXE )) {
 800107c:	4810      	ldr	r0, [pc, #64]	; (80010c0 <USART6_IRQHandler+0x60>)
 800107e:	f240 7127 	movw	r1, #1831	; 0x727
 8001082:	f001 fec2 	bl	8002e0a <USART_GetITStatus>
 8001086:	2800      	cmp	r0, #0
 8001088:	d018      	beq.n	80010bc <USART6_IRQHandler+0x5c>
		if (txring[USART6Serial].count == 0) {
 800108a:	4b0f      	ldr	r3, [pc, #60]	; (80010c8 <USART6_IRQHandler+0x68>)
 800108c:	f8b3 2622 	ldrh.w	r2, [r3, #1570]	; 0x622
 8001090:	b95a      	cbnz	r2, 80010aa <USART6_IRQHandler+0x4a>
			USART_ITConfig(USART6, USART_IT_TXE, (FunctionalState) DISABLE);
 8001092:	480b      	ldr	r0, [pc, #44]	; (80010c0 <USART6_IRQHandler+0x60>)
 8001094:	f240 7127 	movw	r1, #1831	; 0x727
 8001098:	f001 fe94 	bl	8002dc4 <USART_ITConfig>
			USART_ClearITPendingBit(USART6, USART_IT_TXE );
 800109c:	4808      	ldr	r0, [pc, #32]	; (80010c0 <USART6_IRQHandler+0x60>)
 800109e:	f240 7127 	movw	r1, #1831	; 0x727
		} else {
			USART_SendData(USART6, buffer_deque(&txring[USART6Serial]));
		}
	}
}
 80010a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	}

	if (USART_GetITStatus(USART6, USART_IT_TXE )) {
		if (txring[USART6Serial].count == 0) {
			USART_ITConfig(USART6, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART6, USART_IT_TXE );
 80010a6:	f001 becf 	b.w	8002e48 <USART_ClearITPendingBit>
		} else {
			USART_SendData(USART6, buffer_deque(&txring[USART6Serial]));
 80010aa:	4808      	ldr	r0, [pc, #32]	; (80010cc <USART6_IRQHandler+0x6c>)
 80010ac:	f7ff fc6e 	bl	800098c <buffer_deque>
 80010b0:	4601      	mov	r1, r0
 80010b2:	4803      	ldr	r0, [pc, #12]	; (80010c0 <USART6_IRQHandler+0x60>)
		}
	}
}
 80010b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	if (USART_GetITStatus(USART6, USART_IT_TXE )) {
		if (txring[USART6Serial].count == 0) {
			USART_ITConfig(USART6, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART6, USART_IT_TXE );
		} else {
			USART_SendData(USART6, buffer_deque(&txring[USART6Serial]));
 80010b8:	f001 bdf0 	b.w	8002c9c <USART_SendData>
 80010bc:	bd08      	pop	{r3, pc}
 80010be:	bf00      	nop
 80010c0:	40011400 	.word	0x40011400
 80010c4:	2000151a 	.word	0x2000151a
 80010c8:	200009d8 	.word	0x200009d8
 80010cc:	20000ef6 	.word	0x20000ef6

080010d0 <NVIC_PriorityGroupConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 80010d0:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 80010d4:	4b02      	ldr	r3, [pc, #8]	; (80010e0 <NVIC_PriorityGroupConfig+0x10>)
 80010d6:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 80010da:	60d8      	str	r0, [r3, #12]
}
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	e000ed00 	.word	0xe000ed00

080010e4 <NVIC_Init>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80010e4:	78c3      	ldrb	r3, [r0, #3]
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80010e6:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80010e8:	b30b      	cbz	r3, 800112e <NVIC_Init+0x4a>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80010ea:	4b17      	ldr	r3, [pc, #92]	; (8001148 <NVIC_Init+0x64>)
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80010ec:	7842      	ldrb	r2, [r0, #1]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80010ee:	68db      	ldr	r3, [r3, #12]
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 80010f0:	7884      	ldrb	r4, [r0, #2]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80010f2:	43db      	mvns	r3, r3
 80010f4:	f3c3 2302 	ubfx	r3, r3, #8, #3
    tmppre = (0x4 - tmppriority);
 80010f8:	f1c3 0104 	rsb	r1, r3, #4
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80010fc:	b2c9      	uxtb	r1, r1
 80010fe:	fa12 f101 	lsls.w	r1, r2, r1
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
 8001102:	220f      	movs	r2, #15
 8001104:	411a      	asrs	r2, r3
    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8001106:	7803      	ldrb	r3, [r0, #0]
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8001108:	b2c9      	uxtb	r1, r1
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 800110a:	4022      	ands	r2, r4
 800110c:	430a      	orrs	r2, r1
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800110e:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8001112:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
        
    tmppriority = tmppriority << 0x04;
 8001116:	0112      	lsls	r2, r2, #4
 8001118:	b2d2      	uxtb	r2, r2
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800111a:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800111e:	7803      	ldrb	r3, [r0, #0]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8001120:	2201      	movs	r2, #1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001122:	0959      	lsrs	r1, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8001124:	f003 031f 	and.w	r3, r3, #31
 8001128:	fa12 f303 	lsls.w	r3, r2, r3
 800112c:	e007      	b.n	800113e <NVIC_Init+0x5a>
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800112e:	7803      	ldrb	r3, [r0, #0]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8001130:	2201      	movs	r2, #1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001132:	0959      	lsrs	r1, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8001134:	f003 031f 	and.w	r3, r3, #31
 8001138:	fa12 f303 	lsls.w	r3, r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800113c:	3120      	adds	r1, #32
 800113e:	4a03      	ldr	r2, [pc, #12]	; (800114c <NVIC_Init+0x68>)
 8001140:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8001144:	bd10      	pop	{r4, pc}
 8001146:	bf00      	nop
 8001148:	e000ed00 	.word	0xe000ed00
 800114c:	e000e100 	.word	0xe000e100

08001150 <NVIC_SetVectorTable>:
{ 
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 8001150:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
 8001154:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 8001158:	4b01      	ldr	r3, [pc, #4]	; (8001160 <NVIC_SetVectorTable+0x10>)
 800115a:	4301      	orrs	r1, r0
 800115c:	6099      	str	r1, [r3, #8]
}
 800115e:	4770      	bx	lr
 8001160:	e000ed00 	.word	0xe000ed00

08001164 <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT: Low Power Sleep on Exit.
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
 8001164:	4b04      	ldr	r3, [pc, #16]	; (8001178 <NVIC_SystemLPConfig+0x14>)
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
  {
    SCB->SCR |= LowPowerMode;
 8001166:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 8001168:	b109      	cbz	r1, 800116e <NVIC_SystemLPConfig+0xa>
  {
    SCB->SCR |= LowPowerMode;
 800116a:	4310      	orrs	r0, r2
 800116c:	e001      	b.n	8001172 <NVIC_SystemLPConfig+0xe>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 800116e:	ea22 0000 	bic.w	r0, r2, r0
 8001172:	6118      	str	r0, [r3, #16]
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	e000ed00 	.word	0xe000ed00

0800117c <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
 800117c:	4b04      	ldr	r3, [pc, #16]	; (8001190 <SysTick_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 800117e:	681a      	ldr	r2, [r3, #0]
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 8001180:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8001182:	bf0c      	ite	eq
 8001184:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 8001188:	f022 0204 	bicne.w	r2, r2, #4
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	4770      	bx	lr
 8001190:	e000e010 	.word	0xe000e010

08001194 <GPIO_DeInit>:
  * @note   By default, The GPIO pins are configured in input floating mode (except JTAG pins).
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 8001194:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
 8001196:	4b2c      	ldr	r3, [pc, #176]	; (8001248 <GPIO_DeInit+0xb4>)
 8001198:	4298      	cmp	r0, r3
 800119a:	d105      	bne.n	80011a8 <GPIO_DeInit+0x14>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 800119c:	2001      	movs	r0, #1
 800119e:	4601      	mov	r1, r0
 80011a0:	f000 fc48 	bl	8001a34 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 80011a4:	2001      	movs	r0, #1
 80011a6:	e048      	b.n	800123a <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOB)
 80011a8:	4b28      	ldr	r3, [pc, #160]	; (800124c <GPIO_DeInit+0xb8>)
 80011aa:	4298      	cmp	r0, r3
 80011ac:	d105      	bne.n	80011ba <GPIO_DeInit+0x26>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 80011ae:	2002      	movs	r0, #2
 80011b0:	2101      	movs	r1, #1
 80011b2:	f000 fc3f 	bl	8001a34 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 80011b6:	2002      	movs	r0, #2
 80011b8:	e03f      	b.n	800123a <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOC)
 80011ba:	4b25      	ldr	r3, [pc, #148]	; (8001250 <GPIO_DeInit+0xbc>)
 80011bc:	4298      	cmp	r0, r3
 80011be:	d105      	bne.n	80011cc <GPIO_DeInit+0x38>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 80011c0:	2004      	movs	r0, #4
 80011c2:	2101      	movs	r1, #1
 80011c4:	f000 fc36 	bl	8001a34 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 80011c8:	2004      	movs	r0, #4
 80011ca:	e036      	b.n	800123a <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOD)
 80011cc:	4b21      	ldr	r3, [pc, #132]	; (8001254 <GPIO_DeInit+0xc0>)
 80011ce:	4298      	cmp	r0, r3
 80011d0:	d105      	bne.n	80011de <GPIO_DeInit+0x4a>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 80011d2:	2008      	movs	r0, #8
 80011d4:	2101      	movs	r1, #1
 80011d6:	f000 fc2d 	bl	8001a34 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 80011da:	2008      	movs	r0, #8
 80011dc:	e02d      	b.n	800123a <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOE)
 80011de:	4b1e      	ldr	r3, [pc, #120]	; (8001258 <GPIO_DeInit+0xc4>)
 80011e0:	4298      	cmp	r0, r3
 80011e2:	d105      	bne.n	80011f0 <GPIO_DeInit+0x5c>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 80011e4:	2010      	movs	r0, #16
 80011e6:	2101      	movs	r1, #1
 80011e8:	f000 fc24 	bl	8001a34 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 80011ec:	2010      	movs	r0, #16
 80011ee:	e024      	b.n	800123a <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOF)
 80011f0:	4b1a      	ldr	r3, [pc, #104]	; (800125c <GPIO_DeInit+0xc8>)
 80011f2:	4298      	cmp	r0, r3
 80011f4:	d105      	bne.n	8001202 <GPIO_DeInit+0x6e>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 80011f6:	2020      	movs	r0, #32
 80011f8:	2101      	movs	r1, #1
 80011fa:	f000 fc1b 	bl	8001a34 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 80011fe:	2020      	movs	r0, #32
 8001200:	e01b      	b.n	800123a <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOG)
 8001202:	4b17      	ldr	r3, [pc, #92]	; (8001260 <GPIO_DeInit+0xcc>)
 8001204:	4298      	cmp	r0, r3
 8001206:	d105      	bne.n	8001214 <GPIO_DeInit+0x80>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 8001208:	2040      	movs	r0, #64	; 0x40
 800120a:	2101      	movs	r1, #1
 800120c:	f000 fc12 	bl	8001a34 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 8001210:	2040      	movs	r0, #64	; 0x40
 8001212:	e012      	b.n	800123a <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOH)
 8001214:	4b13      	ldr	r3, [pc, #76]	; (8001264 <GPIO_DeInit+0xd0>)
 8001216:	4298      	cmp	r0, r3
 8001218:	d105      	bne.n	8001226 <GPIO_DeInit+0x92>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 800121a:	2080      	movs	r0, #128	; 0x80
 800121c:	2101      	movs	r1, #1
 800121e:	f000 fc09 	bl	8001a34 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 8001222:	2080      	movs	r0, #128	; 0x80
 8001224:	e009      	b.n	800123a <GPIO_DeInit+0xa6>
  }
  else
  {
    if (GPIOx == GPIOI)
 8001226:	4b10      	ldr	r3, [pc, #64]	; (8001268 <GPIO_DeInit+0xd4>)
 8001228:	4298      	cmp	r0, r3
 800122a:	d10b      	bne.n	8001244 <GPIO_DeInit+0xb0>
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 800122c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001230:	2101      	movs	r1, #1
 8001232:	f000 fbff 	bl	8001a34 <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 8001236:	f44f 7080 	mov.w	r0, #256	; 0x100
 800123a:	2100      	movs	r1, #0
    }
  }
}
 800123c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (GPIOx == GPIOI)
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 8001240:	f000 bbf8 	b.w	8001a34 <RCC_AHB1PeriphResetCmd>
 8001244:	bd08      	pop	{r3, pc}
 8001246:	bf00      	nop
 8001248:	40020000 	.word	0x40020000
 800124c:	40020400 	.word	0x40020400
 8001250:	40020800 	.word	0x40020800
 8001254:	40020c00 	.word	0x40020c00
 8001258:	40021000 	.word	0x40021000
 800125c:	40021400 	.word	0x40021400
 8001260:	40021800 	.word	0x40021800
 8001264:	40021c00 	.word	0x40021c00
 8001268:	40022000 	.word	0x40022000

0800126c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800126c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
  {
    pos = ((uint32_t)0x01) << pinpos;
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8001270:	2300      	movs	r3, #0
 8001272:	f8d1 8000 	ldr.w	r8, [r1]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001276:	461a      	mov	r2, r3
  {
    pos = ((uint32_t)0x01) << pinpos;
 8001278:	f04f 0c01 	mov.w	ip, #1
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800127c:	2703      	movs	r7, #3

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
  {
    pos = ((uint32_t)0x01) << pinpos;
 800127e:	fa0c f402 	lsl.w	r4, ip, r2
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8001282:	ea04 0508 	and.w	r5, r4, r8

    if (currentpin == pos)
 8001286:	42a5      	cmp	r5, r4
 8001288:	d12e      	bne.n	80012e8 <GPIO_Init+0x7c>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800128a:	6806      	ldr	r6, [r0, #0]
 800128c:	fa17 f403 	lsls.w	r4, r7, r3
 8001290:	43e4      	mvns	r4, r4
 8001292:	4026      	ands	r6, r4
 8001294:	6006      	str	r6, [r0, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8001296:	790e      	ldrb	r6, [r1, #4]
 8001298:	f8d0 9000 	ldr.w	r9, [r0]
 800129c:	fa06 fa03 	lsl.w	sl, r6, r3

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80012a0:	3e01      	subs	r6, #1
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80012a2:	ea4a 0909 	orr.w	r9, sl, r9

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80012a6:	2e01      	cmp	r6, #1
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80012a8:	f8c0 9000 	str.w	r9, [r0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80012ac:	d814      	bhi.n	80012d8 <GPIO_Init+0x6c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80012ae:	6886      	ldr	r6, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80012b0:	f891 9005 	ldrb.w	r9, [r1, #5]
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80012b4:	4026      	ands	r6, r4
 80012b6:	6086      	str	r6, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80012b8:	6886      	ldr	r6, [r0, #8]
 80012ba:	fa09 f903 	lsl.w	r9, r9, r3
 80012be:	ea49 0606 	orr.w	r6, r9, r6
 80012c2:	6086      	str	r6, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80012c4:	6846      	ldr	r6, [r0, #4]
 80012c6:	ea26 0505 	bic.w	r5, r6, r5
 80012ca:	6045      	str	r5, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80012cc:	798d      	ldrb	r5, [r1, #6]
 80012ce:	6846      	ldr	r6, [r0, #4]
 80012d0:	4095      	lsls	r5, r2
 80012d2:	b2ad      	uxth	r5, r5
 80012d4:	4335      	orrs	r5, r6
 80012d6:	6045      	str	r5, [r0, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80012d8:	68c5      	ldr	r5, [r0, #12]
 80012da:	402c      	ands	r4, r5
 80012dc:	60c4      	str	r4, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80012de:	79cc      	ldrb	r4, [r1, #7]
 80012e0:	68c5      	ldr	r5, [r0, #12]
 80012e2:	409c      	lsls	r4, r3
 80012e4:	432c      	orrs	r4, r5
 80012e6:	60c4      	str	r4, [r0, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80012e8:	3201      	adds	r2, #1
 80012ea:	3302      	adds	r3, #2
 80012ec:	2a10      	cmp	r2, #16
 80012ee:	d1c6      	bne.n	800127e <GPIO_Init+0x12>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 80012f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080012f4 <GPIO_StructInit>:
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 80012f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012f8:	6003      	str	r3, [r0, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 80012fa:	2300      	movs	r3, #0
 80012fc:	7103      	strb	r3, [r0, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 80012fe:	7143      	strb	r3, [r0, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 8001300:	7183      	strb	r3, [r0, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001302:	71c3      	strb	r3, [r0, #7]
}
 8001304:	4770      	bx	lr

08001306 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001306:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0x00010000;
 8001308:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800130c:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
 800130e:	9b01      	ldr	r3, [sp, #4]
 8001310:	430b      	orrs	r3, r1
 8001312:	9301      	str	r3, [sp, #4]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8001314:	9b01      	ldr	r3, [sp, #4]
 8001316:	61c3      	str	r3, [r0, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 8001318:	61c1      	str	r1, [r0, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 800131a:	9b01      	ldr	r3, [sp, #4]
 800131c:	61c3      	str	r3, [r0, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 800131e:	69c3      	ldr	r3, [r0, #28]
 8001320:	9301      	str	r3, [sp, #4]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8001322:	69c3      	ldr	r3, [r0, #28]
 8001324:	9301      	str	r3, [sp, #4]
}
 8001326:	b002      	add	sp, #8
 8001328:	4770      	bx	lr

0800132a <GPIO_ReadInputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 800132a:	6903      	ldr	r3, [r0, #16]
  {
    bitstatus = (uint8_t)Bit_SET;
 800132c:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 800132e:	bf0c      	ite	eq
 8001330:	2000      	moveq	r0, #0
 8001332:	2001      	movne	r0, #1
 8001334:	4770      	bx	lr

08001336 <GPIO_ReadInputData>:
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 8001336:	6900      	ldr	r0, [r0, #16]
}
 8001338:	b280      	uxth	r0, r0
 800133a:	4770      	bx	lr

0800133c <GPIO_ReadOutputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 800133c:	6943      	ldr	r3, [r0, #20]
  {
    bitstatus = (uint8_t)Bit_SET;
 800133e:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 8001340:	bf0c      	ite	eq
 8001342:	2000      	moveq	r0, #0
 8001344:	2001      	movne	r0, #1
 8001346:	4770      	bx	lr

08001348 <GPIO_ReadOutputData>:
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
 8001348:	6940      	ldr	r0, [r0, #20]
}
 800134a:	b280      	uxth	r0, r0
 800134c:	4770      	bx	lr

0800134e <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 800134e:	8301      	strh	r1, [r0, #24]
}
 8001350:	4770      	bx	lr

08001352 <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8001352:	8341      	strh	r1, [r0, #26]
}
 8001354:	4770      	bx	lr

08001356 <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 8001356:	b10a      	cbz	r2, 800135c <GPIO_WriteBit+0x6>
  {
    GPIOx->BSRRL = GPIO_Pin;
 8001358:	8301      	strh	r1, [r0, #24]
 800135a:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 800135c:	8341      	strh	r1, [r0, #26]
 800135e:	4770      	bx	lr

08001360 <GPIO_Write>:
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 8001360:	6141      	str	r1, [r0, #20]
}
 8001362:	4770      	bx	lr

08001364 <GPIO_ToggleBits>:
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 8001364:	6943      	ldr	r3, [r0, #20]
 8001366:	404b      	eors	r3, r1
 8001368:	6143      	str	r3, [r0, #20]
}
 800136a:	4770      	bx	lr

0800136c <GPIO_PinAFConfig>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800136c:	f001 0307 	and.w	r3, r1, #7
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001370:	08c9      	lsrs	r1, r1, #3
 8001372:	3108      	adds	r1, #8
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8001374:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001376:	009b      	lsls	r3, r3, #2
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001378:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
 800137c:	240f      	movs	r4, #15
 800137e:	409c      	lsls	r4, r3
 8001380:	ea25 0404 	bic.w	r4, r5, r4
 8001384:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8001388:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800138c:	fa12 f303 	lsls.w	r3, r2, r3
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8001390:	431c      	orrs	r4, r3
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8001392:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
}
 8001396:	bd30      	pop	{r4, r5, pc}

08001398 <I2C_DeInit>:
  * @brief  Deinitialize the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 8001398:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 800139a:	4b13      	ldr	r3, [pc, #76]	; (80013e8 <I2C_DeInit+0x50>)
 800139c:	4298      	cmp	r0, r3
 800139e:	d107      	bne.n	80013b0 <I2C_DeInit+0x18>
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 80013a0:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80013a4:	2101      	movs	r1, #1
 80013a6:	f000 fb69 	bl	8001a7c <RCC_APB1PeriphResetCmd>
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
 80013aa:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80013ae:	e014      	b.n	80013da <I2C_DeInit+0x42>
  }
  else if (I2Cx == I2C2)
 80013b0:	4b0e      	ldr	r3, [pc, #56]	; (80013ec <I2C_DeInit+0x54>)
 80013b2:	4298      	cmp	r0, r3
 80013b4:	d107      	bne.n	80013c6 <I2C_DeInit+0x2e>
  {
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 80013b6:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80013ba:	2101      	movs	r1, #1
 80013bc:	f000 fb5e 	bl	8001a7c <RCC_APB1PeriphResetCmd>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
 80013c0:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80013c4:	e009      	b.n	80013da <I2C_DeInit+0x42>
  }
  else 
  {
    if (I2Cx == I2C3)
 80013c6:	4b0a      	ldr	r3, [pc, #40]	; (80013f0 <I2C_DeInit+0x58>)
 80013c8:	4298      	cmp	r0, r3
 80013ca:	d10b      	bne.n	80013e4 <I2C_DeInit+0x4c>
    {
      /* Enable I2C3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
 80013cc:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80013d0:	2101      	movs	r1, #1
 80013d2:	f000 fb53 	bl	8001a7c <RCC_APB1PeriphResetCmd>
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 80013d6:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80013da:	2100      	movs	r1, #0
    }
  }
}
 80013dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if (I2Cx == I2C3)
    {
      /* Enable I2C3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 80013e0:	f000 bb4c 	b.w	8001a7c <RCC_APB1PeriphResetCmd>
 80013e4:	bd08      	pop	{r3, pc}
 80013e6:	bf00      	nop
 80013e8:	40005400 	.word	0x40005400
 80013ec:	40005800 	.word	0x40005800
 80013f0:	40005c00 	.word	0x40005c00

080013f4 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 80013f4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80013f6:	4604      	mov	r4, r0
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 80013f8:	8886      	ldrh	r6, [r0, #4]
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 80013fa:	4668      	mov	r0, sp
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 80013fc:	460d      	mov	r5, r1
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 80013fe:	f000 fa6d 	bl	80018dc <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 8001402:	9902      	ldr	r1, [sp, #8]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 8001404:	482c      	ldr	r0, [pc, #176]	; (80014b8 <I2C_Init+0xc4>)
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8001406:	682b      	ldr	r3, [r5, #0]

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 8001408:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
 800140c:	0436      	lsls	r6, r6, #16
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
  pclk1 = rcc_clocks.PCLK1_Frequency;
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 800140e:	fbb1 f0f0 	udiv	r0, r1, r0

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 8001412:	0c36      	lsrs	r6, r6, #16
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
  pclk1 = rcc_clocks.PCLK1_Frequency;
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 8001414:	b280      	uxth	r0, r0
  tmpreg |= freqrange;
 8001416:	4306      	orrs	r6, r0
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 8001418:	80a6      	strh	r6, [r4, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 800141a:	8822      	ldrh	r2, [r4, #0]
 800141c:	f022 0201 	bic.w	r2, r2, #1
 8001420:	0412      	lsls	r2, r2, #16
 8001422:	0c12      	lsrs	r2, r2, #16
 8001424:	8022      	strh	r2, [r4, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8001426:	4a25      	ldr	r2, [pc, #148]	; (80014bc <I2C_Init+0xc8>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d80a      	bhi.n	8001442 <I2C_Init+0x4e>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	fbb1 f3f3 	udiv	r3, r1, r3
      result = 0x04;  
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 8001432:	3001      	adds	r0, #1

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 8001434:	b29b      	uxth	r3, r3
      result = 0x04;  
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 8001436:	b280      	uxth	r0, r0
 8001438:	8420      	strh	r0, [r4, #32]
    {
      /* Set minimum allowed value */
      result = 0x04;  
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 800143a:	2b03      	cmp	r3, #3
 800143c:	bf98      	it	ls
 800143e:	2304      	movls	r3, #4
 8001440:	e021      	b.n	8001486 <I2C_Init+0x92>
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 8001442:	88ee      	ldrh	r6, [r5, #6]
 8001444:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 8001448:	4296      	cmp	r6, r2
 800144a:	d105      	bne.n	8001458 <I2C_Init+0x64>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 800144c:	2203      	movs	r2, #3
 800144e:	4353      	muls	r3, r2
 8001450:	fbb1 f3f3 	udiv	r3, r1, r3
 8001454:	b29b      	uxth	r3, r3
 8001456:	e006      	b.n	8001466 <I2C_Init+0x72>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 8001458:	2219      	movs	r2, #25
 800145a:	4353      	muls	r3, r2
 800145c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001460:	b29b      	uxth	r3, r3
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 8001462:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 8001466:	051a      	lsls	r2, r3, #20
      result |= (uint16_t)0x0001;  
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8001468:	f44f 7296 	mov.w	r2, #300	; 0x12c

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 800146c:	bf08      	it	eq
 800146e:	f043 0301 	orreq.w	r3, r3, #1
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8001472:	4350      	muls	r0, r2
 8001474:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001478:	fb90 f0f2 	sdiv	r0, r0, r2
 800147c:	3001      	adds	r0, #1
 800147e:	b280      	uxth	r0, r0
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 8001480:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8001484:	8420      	strh	r0, [r4, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 8001486:	83a3      	strh	r3, [r4, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 8001488:	8823      	ldrh	r3, [r4, #0]
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 800148a:	8969      	ldrh	r1, [r5, #10]
 800148c:	88aa      	ldrh	r2, [r5, #4]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 800148e:	b29b      	uxth	r3, r3
 8001490:	f043 0301 	orr.w	r3, r3, #1
 8001494:	8023      	strh	r3, [r4, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 8001496:	8823      	ldrh	r3, [r4, #0]
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 8001498:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 800149c:	f023 0302 	bic.w	r3, r3, #2
 80014a0:	041b      	lsls	r3, r3, #16
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 80014a2:	430a      	orrs	r2, r1

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 80014a4:	0c1b      	lsrs	r3, r3, #16
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 80014a6:	4313      	orrs	r3, r2
 80014a8:	b29b      	uxth	r3, r3
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 80014aa:	8023      	strh	r3, [r4, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 80014ac:	892a      	ldrh	r2, [r5, #8]
 80014ae:	89ab      	ldrh	r3, [r5, #12]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	b29b      	uxth	r3, r3
 80014b4:	8123      	strh	r3, [r4, #8]
}
 80014b6:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
 80014b8:	000f4240 	.word	0x000f4240
 80014bc:	000186a0 	.word	0x000186a0

080014c0 <I2C_StructInit>:
  */
void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
{
/*---------------- Reset I2C init structure parameters values ----------------*/
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
 80014c0:	f241 3388 	movw	r3, #5000	; 0x1388
 80014c4:	6003      	str	r3, [r0, #0]
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 80014c6:	2300      	movs	r3, #0
 80014c8:	8083      	strh	r3, [r0, #4]
  /* Initialize the I2C_DutyCycle member */
  I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 80014ca:	f64b 72ff 	movw	r2, #49151	; 0xbfff
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
 80014ce:	8103      	strh	r3, [r0, #8]
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
 80014d0:	8143      	strh	r3, [r0, #10]
  /* Initialize the I2C_AcknowledgedAddress member */
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 80014d2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
  /* Initialize the I2C_DutyCycle member */
  I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 80014d6:	80c2      	strh	r2, [r0, #6]
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
  /* Initialize the I2C_AcknowledgedAddress member */
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 80014d8:	8183      	strh	r3, [r0, #12]
}
 80014da:	4770      	bx	lr

080014dc <I2C_Cmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 80014dc:	8803      	ldrh	r3, [r0, #0]
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80014de:	b119      	cbz	r1, 80014e8 <I2C_Cmd+0xc>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	f043 0301 	orr.w	r3, r3, #1
 80014e6:	e003      	b.n	80014f0 <I2C_Cmd+0x14>
  }
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 80014e8:	f023 0301 	bic.w	r3, r3, #1
 80014ec:	041b      	lsls	r3, r3, #16
 80014ee:	0c1b      	lsrs	r3, r3, #16
 80014f0:	8003      	strh	r3, [r0, #0]
 80014f2:	4770      	bx	lr

080014f4 <I2C_GenerateSTART>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 80014f4:	8803      	ldrh	r3, [r0, #0]
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80014f6:	b119      	cbz	r1, 8001500 <I2C_GenerateSTART+0xc>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 80014f8:	b29b      	uxth	r3, r3
 80014fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014fe:	e003      	b.n	8001508 <I2C_GenerateSTART+0x14>
  }
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 8001500:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001504:	041b      	lsls	r3, r3, #16
 8001506:	0c1b      	lsrs	r3, r3, #16
 8001508:	8003      	strh	r3, [r0, #0]
 800150a:	4770      	bx	lr

0800150c <I2C_GenerateSTOP>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 800150c:	8803      	ldrh	r3, [r0, #0]
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800150e:	b119      	cbz	r1, 8001518 <I2C_GenerateSTOP+0xc>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 8001510:	b29b      	uxth	r3, r3
 8001512:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001516:	e003      	b.n	8001520 <I2C_GenerateSTOP+0x14>
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 8001518:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800151c:	041b      	lsls	r3, r3, #16
 800151e:	0c1b      	lsrs	r3, r3, #16
 8001520:	8003      	strh	r3, [r0, #0]
 8001522:	4770      	bx	lr

08001524 <I2C_Send7bitAddress>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 8001524:	b112      	cbz	r2, 800152c <I2C_Send7bitAddress+0x8>
  {
    /* Set the address bit0 for read */
    Address |= I2C_OAR1_ADD0;
 8001526:	f041 0101 	orr.w	r1, r1, #1
 800152a:	e001      	b.n	8001530 <I2C_Send7bitAddress+0xc>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 800152c:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
  }
  /* Send the address */
  I2Cx->DR = Address;
 8001530:	8201      	strh	r1, [r0, #16]
}
 8001532:	4770      	bx	lr

08001534 <I2C_AcknowledgeConfig>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 8001534:	8803      	ldrh	r3, [r0, #0]
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001536:	b119      	cbz	r1, 8001540 <I2C_AcknowledgeConfig+0xc>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 8001538:	b29b      	uxth	r3, r3
 800153a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800153e:	e003      	b.n	8001548 <I2C_AcknowledgeConfig+0x14>
  }
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 8001540:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001544:	041b      	lsls	r3, r3, #16
 8001546:	0c1b      	lsrs	r3, r3, #16
 8001548:	8003      	strh	r3, [r0, #0]
 800154a:	4770      	bx	lr

0800154c <I2C_OwnAddress2Config>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Get the old register value */
  tmpreg = I2Cx->OAR2;
 800154c:	8983      	ldrh	r3, [r0, #12]
 800154e:	b29b      	uxth	r3, r3

  /* Reset I2Cx Own address2 bit [7:1] */
  tmpreg &= (uint16_t)~((uint16_t)I2C_OAR2_ADD2);

  /* Set I2Cx Own address2 */
  tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
 8001550:	f001 01fe 	and.w	r1, r1, #254	; 0xfe

  /* Get the old register value */
  tmpreg = I2Cx->OAR2;

  /* Reset I2Cx Own address2 bit [7:1] */
  tmpreg &= (uint16_t)~((uint16_t)I2C_OAR2_ADD2);
 8001554:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe

  /* Set I2Cx Own address2 */
  tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
 8001558:	430b      	orrs	r3, r1

  /* Store the new register value */
  I2Cx->OAR2 = tmpreg;
 800155a:	8183      	strh	r3, [r0, #12]
}
 800155c:	4770      	bx	lr

0800155e <I2C_DualAddressCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable dual addressing mode */
    I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
 800155e:	8983      	ldrh	r3, [r0, #12]
void I2C_DualAddressCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001560:	b119      	cbz	r1, 800156a <I2C_DualAddressCmd+0xc>
  {
    /* Enable dual addressing mode */
    I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
 8001562:	b29b      	uxth	r3, r3
 8001564:	f043 0301 	orr.w	r3, r3, #1
 8001568:	e003      	b.n	8001572 <I2C_DualAddressCmd+0x14>
  }
  else
  {
    /* Disable dual addressing mode */
    I2Cx->OAR2 &= (uint16_t)~((uint16_t)I2C_OAR2_ENDUAL);
 800156a:	f023 0301 	bic.w	r3, r3, #1
 800156e:	041b      	lsls	r3, r3, #16
 8001570:	0c1b      	lsrs	r3, r3, #16
 8001572:	8183      	strh	r3, [r0, #12]
 8001574:	4770      	bx	lr

08001576 <I2C_GeneralCallCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable generall call */
    I2Cx->CR1 |= I2C_CR1_ENGC;
 8001576:	8803      	ldrh	r3, [r0, #0]
void I2C_GeneralCallCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001578:	b119      	cbz	r1, 8001582 <I2C_GeneralCallCmd+0xc>
  {
    /* Enable generall call */
    I2Cx->CR1 |= I2C_CR1_ENGC;
 800157a:	b29b      	uxth	r3, r3
 800157c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001580:	e003      	b.n	800158a <I2C_GeneralCallCmd+0x14>
  }
  else
  {
    /* Disable generall call */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENGC);
 8001582:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001586:	041b      	lsls	r3, r3, #16
 8001588:	0c1b      	lsrs	r3, r3, #16
 800158a:	8003      	strh	r3, [r0, #0]
 800158c:	4770      	bx	lr

0800158e <I2C_SoftwareResetCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Peripheral under reset */
    I2Cx->CR1 |= I2C_CR1_SWRST;
 800158e:	8803      	ldrh	r3, [r0, #0]
void I2C_SoftwareResetCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001590:	b129      	cbz	r1, 800159e <I2C_SoftwareResetCmd+0x10>
  {
    /* Peripheral under reset */
    I2Cx->CR1 |= I2C_CR1_SWRST;
 8001592:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001596:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800159a:	b29b      	uxth	r3, r3
 800159c:	e001      	b.n	80015a2 <I2C_SoftwareResetCmd+0x14>
  }
  else
  {
    /* Peripheral not under reset */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_SWRST);
 800159e:	045b      	lsls	r3, r3, #17
 80015a0:	0c5b      	lsrs	r3, r3, #17
 80015a2:	8003      	strh	r3, [r0, #0]
 80015a4:	4770      	bx	lr

080015a6 <I2C_StretchClockCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState == DISABLE)
  {
    /* Enable the selected I2C Clock stretching */
    I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 80015a6:	8803      	ldrh	r3, [r0, #0]
void I2C_StretchClockCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState == DISABLE)
 80015a8:	b919      	cbnz	r1, 80015b2 <I2C_StretchClockCmd+0xc>
  {
    /* Enable the selected I2C Clock stretching */
    I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015b0:	e003      	b.n	80015ba <I2C_StretchClockCmd+0x14>
  }
  else
  {
    /* Disable the selected I2C Clock stretching */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_NOSTRETCH);
 80015b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80015b6:	041b      	lsls	r3, r3, #16
 80015b8:	0c1b      	lsrs	r3, r3, #16
 80015ba:	8003      	strh	r3, [r0, #0]
 80015bc:	4770      	bx	lr

080015be <I2C_FastModeDutyCycleConfig>:
void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
  if (I2C_DutyCycle != I2C_DutyCycle_16_9)
 80015be:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
  {
    /* I2C fast mode Tlow/Thigh=2 */
    I2Cx->CCR &= I2C_DutyCycle_2;
 80015c2:	8b83      	ldrh	r3, [r0, #28]
void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
  if (I2C_DutyCycle != I2C_DutyCycle_16_9)
 80015c4:	d004      	beq.n	80015d0 <I2C_FastModeDutyCycleConfig+0x12>
  {
    /* I2C fast mode Tlow/Thigh=2 */
    I2Cx->CCR &= I2C_DutyCycle_2;
 80015c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80015ca:	041b      	lsls	r3, r3, #16
 80015cc:	0c1b      	lsrs	r3, r3, #16
 80015ce:	e002      	b.n	80015d6 <I2C_FastModeDutyCycleConfig+0x18>
  }
  else
  {
    /* I2C fast mode Tlow/Thigh=16/9 */
    I2Cx->CCR |= I2C_DutyCycle_16_9;
 80015d0:	b29b      	uxth	r3, r3
 80015d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015d6:	8383      	strh	r3, [r0, #28]
 80015d8:	4770      	bx	lr

080015da <I2C_NACKPositionConfig>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_NACK_POSITION(I2C_NACKPosition));
  
  /* Check the input parameter */
  if (I2C_NACKPosition == I2C_NACKPosition_Next)
 80015da:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
  {
    /* Next byte in shift register is the last received byte */
    I2Cx->CR1 |= I2C_NACKPosition_Next;
 80015de:	8803      	ldrh	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_NACK_POSITION(I2C_NACKPosition));
  
  /* Check the input parameter */
  if (I2C_NACKPosition == I2C_NACKPosition_Next)
 80015e0:	d103      	bne.n	80015ea <I2C_NACKPositionConfig+0x10>
  {
    /* Next byte in shift register is the last received byte */
    I2Cx->CR1 |= I2C_NACKPosition_Next;
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80015e8:	e003      	b.n	80015f2 <I2C_NACKPositionConfig+0x18>
  }
  else
  {
    /* Current byte in shift register is the last received byte */
    I2Cx->CR1 &= I2C_NACKPosition_Current;
 80015ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80015ee:	041b      	lsls	r3, r3, #16
 80015f0:	0c1b      	lsrs	r3, r3, #16
 80015f2:	8003      	strh	r3, [r0, #0]
 80015f4:	4770      	bx	lr

080015f6 <I2C_SMBusAlertConfig>:
void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
 80015f6:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
  {
    /* Drive the SMBusAlert pin Low */
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
 80015fa:	8803      	ldrh	r3, [r0, #0]
void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
 80015fc:	d103      	bne.n	8001606 <I2C_SMBusAlertConfig+0x10>
  {
    /* Drive the SMBusAlert pin Low */
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
 80015fe:	b29b      	uxth	r3, r3
 8001600:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001604:	e003      	b.n	800160e <I2C_SMBusAlertConfig+0x18>
  }
  else
  {
    /* Drive the SMBusAlert pin High  */
    I2Cx->CR1 &= I2C_SMBusAlert_High;
 8001606:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800160a:	041b      	lsls	r3, r3, #16
 800160c:	0c1b      	lsrs	r3, r3, #16
 800160e:	8003      	strh	r3, [r0, #0]
 8001610:	4770      	bx	lr

08001612 <I2C_ARPCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C ARP */
    I2Cx->CR1 |= I2C_CR1_ENARP;
 8001612:	8803      	ldrh	r3, [r0, #0]
void I2C_ARPCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001614:	b119      	cbz	r1, 800161e <I2C_ARPCmd+0xc>
  {
    /* Enable the selected I2C ARP */
    I2Cx->CR1 |= I2C_CR1_ENARP;
 8001616:	b29b      	uxth	r3, r3
 8001618:	f043 0310 	orr.w	r3, r3, #16
 800161c:	e003      	b.n	8001626 <I2C_ARPCmd+0x14>
  }
  else
  {
    /* Disable the selected I2C ARP */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENARP);
 800161e:	f023 0310 	bic.w	r3, r3, #16
 8001622:	041b      	lsls	r3, r3, #16
 8001624:	0c1b      	lsrs	r3, r3, #16
 8001626:	8003      	strh	r3, [r0, #0]
 8001628:	4770      	bx	lr

0800162a <I2C_SendData>:
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 800162a:	8201      	strh	r1, [r0, #16]
}
 800162c:	4770      	bx	lr

0800162e <I2C_ReceiveData>:
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 800162e:	8a00      	ldrh	r0, [r0, #16]
}
 8001630:	b2c0      	uxtb	r0, r0
 8001632:	4770      	bx	lr

08001634 <I2C_TransmitPEC>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C PEC transmission */
    I2Cx->CR1 |= I2C_CR1_PEC;
 8001634:	8803      	ldrh	r3, [r0, #0]
void I2C_TransmitPEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001636:	b119      	cbz	r1, 8001640 <I2C_TransmitPEC+0xc>
  {
    /* Enable the selected I2C PEC transmission */
    I2Cx->CR1 |= I2C_CR1_PEC;
 8001638:	b29b      	uxth	r3, r3
 800163a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800163e:	e003      	b.n	8001648 <I2C_TransmitPEC+0x14>
  }
  else
  {
    /* Disable the selected I2C PEC transmission */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PEC);
 8001640:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001644:	041b      	lsls	r3, r3, #16
 8001646:	0c1b      	lsrs	r3, r3, #16
 8001648:	8003      	strh	r3, [r0, #0]
 800164a:	4770      	bx	lr

0800164c <I2C_PECPositionConfig>:
void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
 800164c:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
  {
    /* Next byte in shift register is PEC */
    I2Cx->CR1 |= I2C_PECPosition_Next;
 8001650:	8803      	ldrh	r3, [r0, #0]
void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
 8001652:	d103      	bne.n	800165c <I2C_PECPositionConfig+0x10>
  {
    /* Next byte in shift register is PEC */
    I2Cx->CR1 |= I2C_PECPosition_Next;
 8001654:	b29b      	uxth	r3, r3
 8001656:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800165a:	e003      	b.n	8001664 <I2C_PECPositionConfig+0x18>
  }
  else
  {
    /* Current byte in shift register is PEC */
    I2Cx->CR1 &= I2C_PECPosition_Current;
 800165c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001660:	041b      	lsls	r3, r3, #16
 8001662:	0c1b      	lsrs	r3, r3, #16
 8001664:	8003      	strh	r3, [r0, #0]
 8001666:	4770      	bx	lr

08001668 <I2C_CalculatePEC>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C PEC calculation */
    I2Cx->CR1 |= I2C_CR1_ENPEC;
 8001668:	8803      	ldrh	r3, [r0, #0]
void I2C_CalculatePEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800166a:	b119      	cbz	r1, 8001674 <I2C_CalculatePEC+0xc>
  {
    /* Enable the selected I2C PEC calculation */
    I2Cx->CR1 |= I2C_CR1_ENPEC;
 800166c:	b29b      	uxth	r3, r3
 800166e:	f043 0320 	orr.w	r3, r3, #32
 8001672:	e003      	b.n	800167c <I2C_CalculatePEC+0x14>
  }
  else
  {
    /* Disable the selected I2C PEC calculation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENPEC);
 8001674:	f023 0320 	bic.w	r3, r3, #32
 8001678:	041b      	lsls	r3, r3, #16
 800167a:	0c1b      	lsrs	r3, r3, #16
 800167c:	8003      	strh	r3, [r0, #0]
 800167e:	4770      	bx	lr

08001680 <I2C_GetPEC>:
uint8_t I2C_GetPEC(I2C_TypeDef* I2Cx)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the selected I2C PEC value */
  return ((I2Cx->SR2) >> 8);
 8001680:	8b00      	ldrh	r0, [r0, #24]
}
 8001682:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8001686:	4770      	bx	lr

08001688 <I2C_DMACmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR2 |= I2C_CR2_DMAEN;
 8001688:	8883      	ldrh	r3, [r0, #4]
void I2C_DMACmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800168a:	b119      	cbz	r1, 8001694 <I2C_DMACmd+0xc>
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR2 |= I2C_CR2_DMAEN;
 800168c:	b29b      	uxth	r3, r3
 800168e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001692:	e003      	b.n	800169c <I2C_DMACmd+0x14>
  }
  else
  {
    /* Disable the selected I2C DMA requests */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_DMAEN);
 8001694:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001698:	041b      	lsls	r3, r3, #16
 800169a:	0c1b      	lsrs	r3, r3, #16
 800169c:	8083      	strh	r3, [r0, #4]
 800169e:	4770      	bx	lr

080016a0 <I2C_DMALastTransferCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Next DMA transfer is the last transfer */
    I2Cx->CR2 |= I2C_CR2_LAST;
 80016a0:	8883      	ldrh	r3, [r0, #4]
void I2C_DMALastTransferCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80016a2:	b119      	cbz	r1, 80016ac <I2C_DMALastTransferCmd+0xc>
  {
    /* Next DMA transfer is the last transfer */
    I2Cx->CR2 |= I2C_CR2_LAST;
 80016a4:	b29b      	uxth	r3, r3
 80016a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016aa:	e003      	b.n	80016b4 <I2C_DMALastTransferCmd+0x14>
  }
  else
  {
    /* Next DMA transfer is not the last transfer */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_LAST);
 80016ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80016b0:	041b      	lsls	r3, r3, #16
 80016b2:	0c1b      	lsrs	r3, r3, #16
 80016b4:	8083      	strh	r3, [r0, #4]
 80016b6:	4770      	bx	lr

080016b8 <I2C_ReadRegister>:
  *            @arg I2C_Register_CCR:   CCR register.
  *            @arg I2C_Register_TRISE: TRISE register.
  * @retval The value of the read register.
  */
uint16_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register)
{
 80016b8:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 80016ba:	2300      	movs	r3, #0
 80016bc:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_REGISTER(I2C_Register));

  tmp = (uint32_t) I2Cx;
 80016be:	9001      	str	r0, [sp, #4]
  tmp += I2C_Register;
 80016c0:	9b01      	ldr	r3, [sp, #4]
 80016c2:	18cb      	adds	r3, r1, r3
 80016c4:	9301      	str	r3, [sp, #4]

  /* Return the selected register value */
  return (*(__IO uint16_t *) tmp);
 80016c6:	9b01      	ldr	r3, [sp, #4]
 80016c8:	8818      	ldrh	r0, [r3, #0]
}
 80016ca:	b280      	uxth	r0, r0
 80016cc:	b002      	add	sp, #8
 80016ce:	4770      	bx	lr

080016d0 <I2C_ITConfig>:
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 80016d0:	8883      	ldrh	r3, [r0, #4]
 80016d2:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
 80016d4:	b10a      	cbz	r2, 80016da <I2C_ITConfig+0xa>
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 80016d6:	4319      	orrs	r1, r3
 80016d8:	e001      	b.n	80016de <I2C_ITConfig+0xe>
  }
  else
  {
    /* Disable the selected I2C interrupts */
    I2Cx->CR2 &= (uint16_t)~I2C_IT;
 80016da:	ea23 0101 	bic.w	r1, r3, r1
 80016de:	8081      	strh	r1, [r0, #4]
 80016e0:	4770      	bx	lr

080016e2 <I2C_CheckEvent>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 80016e2:	8a83      	ldrh	r3, [r0, #20]
  flag2 = I2Cx->SR2;
 80016e4:	8b00      	ldrh	r0, [r0, #24]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 80016e6:	b29b      	uxth	r3, r3
  flag2 = I2Cx->SR2;
  flag2 = flag2 << 16;

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 80016e8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80016ec:	4008      	ands	r0, r1

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 80016ee:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
  }
  /* Return status */
  return status;
}
 80016f2:	1a43      	subs	r3, r0, r1
 80016f4:	4258      	negs	r0, r3
 80016f6:	eb40 0003 	adc.w	r0, r0, r3
 80016fa:	4770      	bx	lr

080016fc <I2C_GetLastEvent>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 80016fc:	8a83      	ldrh	r3, [r0, #20]
  flag2 = I2Cx->SR2;
 80016fe:	8b00      	ldrh	r0, [r0, #24]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8001700:	b29b      	uxth	r3, r3
  flag2 = I2Cx->SR2;
  flag2 = flag2 << 16;

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 8001702:	ea43 4000 	orr.w	r0, r3, r0, lsl #16

  /* Return status */
  return lastevent;
}
 8001706:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800170a:	4770      	bx	lr

0800170c <I2C_GetFlagStatus>:
  *                                Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 800170c:	b082      	sub	sp, #8
  FlagStatus bitstatus = RESET;
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 800170e:	2300      	movs	r3, #0
 8001710:	9300      	str	r3, [sp, #0]
 8001712:	9301      	str	r3, [sp, #4]

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 8001714:	0f0b      	lsrs	r3, r1, #28
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 8001716:	9001      	str	r0, [sp, #4]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 8001718:	9300      	str	r3, [sp, #0]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
  
  if(i2creg != 0)
 800171a:	9b00      	ldr	r3, [sp, #0]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 800171c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
  
  if(i2creg != 0)
 8001720:	b113      	cbz	r3, 8001728 <I2C_GetFlagStatus+0x1c>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 8001722:	9b01      	ldr	r3, [sp, #4]
 8001724:	3314      	adds	r3, #20
 8001726:	e002      	b.n	800172e <I2C_GetFlagStatus+0x22>
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 8001728:	9b01      	ldr	r3, [sp, #4]
    i2cxbase += 0x14;
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 800172a:	0c09      	lsrs	r1, r1, #16
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 800172c:	3318      	adds	r3, #24
 800172e:	9301      	str	r3, [sp, #4]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 8001730:	9b01      	ldr	r3, [sp, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 8001734:	4219      	tst	r1, r3
    bitstatus = RESET;
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
}
 8001736:	bf0c      	ite	eq
 8001738:	2000      	moveq	r0, #0
 800173a:	2001      	movne	r0, #1
 800173c:	b002      	add	sp, #8
 800173e:	4770      	bx	lr

08001740 <I2C_ClearFlag>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));
  /* Get the I2C flag position */
  flagpos = I2C_FLAG & FLAG_MASK;
  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 8001740:	43c9      	mvns	r1, r1
 8001742:	b289      	uxth	r1, r1
 8001744:	8281      	strh	r1, [r0, #20]
}
 8001746:	4770      	bx	lr

08001748 <I2C_GetITStatus>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 8001748:	8883      	ldrh	r3, [r0, #4]
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_MASK;

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 800174a:	8a80      	ldrh	r0, [r0, #20]
 800174c:	b280      	uxth	r0, r0
 800174e:	4008      	ands	r0, r1
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 8001750:	b29b      	uxth	r3, r3
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_MASK;

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 8001752:	d006      	beq.n	8001762 <I2C_GetITStatus+0x1a>
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 8001754:	f001 61e0 	and.w	r1, r1, #117440512	; 0x7000000
  *            @arg I2C_IT_ADDR: Address sent flag (Master mode) "ADSL"
  *                              Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_IT_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_IT (SET or RESET).
  */
ITStatus I2C_GetITStatus(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
 8001758:	ea13 4111 	ands.w	r1, r3, r1, lsr #16

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
  {
    /* I2C_IT is set */
    bitstatus = SET;
 800175c:	bf0c      	ite	eq
 800175e:	2000      	moveq	r0, #0
 8001760:	2001      	movne	r0, #1
    /* I2C_IT is reset */
    bitstatus = RESET;
  }
  /* Return the I2C_IT status */
  return  bitstatus;
}
 8001762:	4770      	bx	lr

08001764 <I2C_ClearITPendingBit>:

  /* Get the I2C flag position */
  flagpos = I2C_IT & FLAG_MASK;

  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 8001764:	43c9      	mvns	r1, r1
 8001766:	b289      	uxth	r1, r1
 8001768:	8281      	strh	r1, [r0, #20]
}
 800176a:	4770      	bx	lr

0800176c <RCC_DeInit>:
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800176c:	4b0a      	ldr	r3, [pc, #40]	; (8001798 <RCC_DeInit+0x2c>)
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	f042 0201 	orr.w	r2, r2, #1
 8001774:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001776:	2200      	movs	r2, #0
 8001778:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800177a:	6819      	ldr	r1, [r3, #0]
 800177c:	f021 7184 	bic.w	r1, r1, #17301504	; 0x1080000
 8001780:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8001784:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001786:	4905      	ldr	r1, [pc, #20]	; (800179c <RCC_DeInit+0x30>)
 8001788:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800178a:	6819      	ldr	r1, [r3, #0]
 800178c:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8001790:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001792:	60da      	str	r2, [r3, #12]
}
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	40023800 	.word	0x40023800
 800179c:	24003010 	.word	0x24003010

080017a0 <RCC_HSEConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 80017a0:	4b02      	ldr	r3, [pc, #8]	; (80017ac <RCC_HSEConfig+0xc>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 80017a6:	7018      	strb	r0, [r3, #0]
}
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	40023802 	.word	0x40023802

080017b0 <RCC_AdjustHSICalibrationValue>:
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
 80017b0:	4b03      	ldr	r3, [pc, #12]	; (80017c0 <RCC_AdjustHSICalibrationValue+0x10>)
 80017b2:	681a      	ldr	r2, [r3, #0]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 80017b4:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 80017b8:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3

  /* Store the new value */
  RCC->CR = tmpreg;
 80017bc:	601a      	str	r2, [r3, #0]
}
 80017be:	4770      	bx	lr
 80017c0:	40023800 	.word	0x40023800

080017c4 <RCC_HSICmd>:
void RCC_HSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 80017c4:	4b01      	ldr	r3, [pc, #4]	; (80017cc <RCC_HSICmd+0x8>)
 80017c6:	6018      	str	r0, [r3, #0]
}
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	42470000 	.word	0x42470000

080017d0 <RCC_LSEConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 80017d0:	4b06      	ldr	r3, [pc, #24]	; (80017ec <RCC_LSEConfig+0x1c>)
 80017d2:	2200      	movs	r2, #0

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 80017d4:	2801      	cmp	r0, #1
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 80017d6:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 80017d8:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 80017da:	d002      	beq.n	80017e2 <RCC_LSEConfig+0x12>
 80017dc:	2804      	cmp	r0, #4
 80017de:	d104      	bne.n	80017ea <RCC_LSEConfig+0x1a>
 80017e0:	e001      	b.n	80017e6 <RCC_LSEConfig+0x16>
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 80017e2:	7018      	strb	r0, [r3, #0]
      break;
 80017e4:	4770      	bx	lr
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 80017e6:	2205      	movs	r2, #5
 80017e8:	701a      	strb	r2, [r3, #0]
 80017ea:	4770      	bx	lr
 80017ec:	40023870 	.word	0x40023870

080017f0 <RCC_LSICmd>:
void RCC_LSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 80017f0:	4b01      	ldr	r3, [pc, #4]	; (80017f8 <RCC_LSICmd+0x8>)
 80017f2:	6018      	str	r0, [r3, #0]
}
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	42470e80 	.word	0x42470e80

080017fc <RCC_PLLConfig>:
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 80017fc:	4301      	orrs	r1, r0
 80017fe:	ea41 1282 	orr.w	r2, r1, r2, lsl #6
 8001802:	9900      	ldr	r1, [sp, #0]
 8001804:	085b      	lsrs	r3, r3, #1
 8001806:	3b01      	subs	r3, #1
 8001808:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 800180c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001810:	4b01      	ldr	r3, [pc, #4]	; (8001818 <RCC_PLLConfig+0x1c>)
 8001812:	6059      	str	r1, [r3, #4]
                 (PLLQ << 24);
}
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	40023800 	.word	0x40023800

0800181c <RCC_PLLCmd>:
  */
void RCC_PLLCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 800181c:	4b01      	ldr	r3, [pc, #4]	; (8001824 <RCC_PLLCmd+0x8>)
 800181e:	6018      	str	r0, [r3, #0]
}
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	42470060 	.word	0x42470060

08001828 <RCC_PLLI2SConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
 8001828:	0180      	lsls	r0, r0, #6
 800182a:	4b03      	ldr	r3, [pc, #12]	; (8001838 <RCC_PLLI2SConfig+0x10>)
 800182c:	ea40 7101 	orr.w	r1, r0, r1, lsl #28
 8001830:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
}
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	40023800 	.word	0x40023800

0800183c <RCC_PLLI2SCmd>:
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 800183c:	4b01      	ldr	r3, [pc, #4]	; (8001844 <RCC_PLLI2SCmd+0x8>)
 800183e:	6018      	str	r0, [r3, #0]
}
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	42470068 	.word	0x42470068

08001848 <RCC_ClockSecuritySystemCmd>:
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 8001848:	4b01      	ldr	r3, [pc, #4]	; (8001850 <RCC_ClockSecuritySystemCmd+0x8>)
 800184a:	6018      	str	r0, [r3, #0]
}
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	4247004c 	.word	0x4247004c

08001854 <RCC_MCO1Config>:
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
 8001854:	4b03      	ldr	r3, [pc, #12]	; (8001864 <RCC_MCO1Config+0x10>)
 8001856:	689a      	ldr	r2, [r3, #8]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
 8001858:	f022 62ec 	bic.w	r2, r2, #123731968	; 0x7600000

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 800185c:	4302      	orrs	r2, r0
 800185e:	430a      	orrs	r2, r1

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 8001860:	609a      	str	r2, [r3, #8]
}
 8001862:	4770      	bx	lr
 8001864:	40023800 	.word	0x40023800

08001868 <RCC_MCO2Config>:
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
 8001868:	4b03      	ldr	r3, [pc, #12]	; (8001878 <RCC_MCO2Config+0x10>)
 800186a:	689a      	ldr	r2, [r3, #8]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
 800186c:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 8001870:	4302      	orrs	r2, r0
 8001872:	430a      	orrs	r2, r1

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 8001874:	609a      	str	r2, [r3, #8]
}
 8001876:	4770      	bx	lr
 8001878:	40023800 	.word	0x40023800

0800187c <RCC_SYSCLKConfig>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 800187c:	4b03      	ldr	r3, [pc, #12]	; (800188c <RCC_SYSCLKConfig+0x10>)
 800187e:	689a      	ldr	r2, [r3, #8]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 8001880:	f022 0203 	bic.w	r2, r2, #3

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8001884:	4302      	orrs	r2, r0

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001886:	609a      	str	r2, [r3, #8]
}
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	40023800 	.word	0x40023800

08001890 <RCC_GetSYSCLKSource>:
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 8001890:	4b02      	ldr	r3, [pc, #8]	; (800189c <RCC_GetSYSCLKSource+0xc>)
 8001892:	6898      	ldr	r0, [r3, #8]
}
 8001894:	f000 000c 	and.w	r0, r0, #12
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	40023800 	.word	0x40023800

080018a0 <RCC_HCLKConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 80018a0:	4b03      	ldr	r3, [pc, #12]	; (80018b0 <RCC_HCLKConfig+0x10>)
 80018a2:	689a      	ldr	r2, [r3, #8]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 80018a4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 80018a8:	4302      	orrs	r2, r0

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80018aa:	609a      	str	r2, [r3, #8]
}
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	40023800 	.word	0x40023800

080018b4 <RCC_PCLK1Config>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 80018b4:	4b03      	ldr	r3, [pc, #12]	; (80018c4 <RCC_PCLK1Config+0x10>)
 80018b6:	689a      	ldr	r2, [r3, #8]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 80018b8:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 80018bc:	4302      	orrs	r2, r0

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80018be:	609a      	str	r2, [r3, #8]
}
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	40023800 	.word	0x40023800

080018c8 <RCC_PCLK2Config>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 80018c8:	4b03      	ldr	r3, [pc, #12]	; (80018d8 <RCC_PCLK2Config+0x10>)
 80018ca:	689a      	ldr	r2, [r3, #8]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 80018cc:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 80018d0:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80018d4:	609a      	str	r2, [r3, #8]
}
 80018d6:	4770      	bx	lr
 80018d8:	40023800 	.word	0x40023800

080018dc <RCC_GetClocksFreq>:
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80018dc:	4b1e      	ldr	r3, [pc, #120]	; (8001958 <RCC_GetClocksFreq+0x7c>)
 80018de:	689a      	ldr	r2, [r3, #8]
 80018e0:	f002 020c 	and.w	r2, r2, #12

  switch (tmp)
 80018e4:	2a04      	cmp	r2, #4
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80018e6:	b510      	push	{r4, lr}
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;

  switch (tmp)
 80018e8:	d003      	beq.n	80018f2 <RCC_GetClocksFreq+0x16>
 80018ea:	2a08      	cmp	r2, #8
 80018ec:	d003      	beq.n	80018f6 <RCC_GetClocksFreq+0x1a>
 80018ee:	4b1b      	ldr	r3, [pc, #108]	; (800195c <RCC_GetClocksFreq+0x80>)
 80018f0:	e018      	b.n	8001924 <RCC_GetClocksFreq+0x48>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80018f2:	4b1b      	ldr	r3, [pc, #108]	; (8001960 <RCC_GetClocksFreq+0x84>)
 80018f4:	e016      	b.n	8001924 <RCC_GetClocksFreq+0x48>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80018f6:	6859      	ldr	r1, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018f8:	685a      	ldr	r2, [r3, #4]
      
      if (pllsource != 0)
 80018fa:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80018fe:	6859      	ldr	r1, [r3, #4]
 8001900:	bf14      	ite	ne
 8001902:	4b17      	ldrne	r3, [pc, #92]	; (8001960 <RCC_GetClocksFreq+0x84>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8001904:	4b15      	ldreq	r3, [pc, #84]	; (800195c <RCC_GetClocksFreq+0x80>)

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001906:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800190a:	fbb3 f3f2 	udiv	r3, r3, r2
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800190e:	4a12      	ldr	r2, [pc, #72]	; (8001958 <RCC_GetClocksFreq+0x7c>)
 8001910:	6852      	ldr	r2, [r2, #4]
 8001912:	f3c2 4201 	ubfx	r2, r2, #16, #2
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001916:	f3c1 1188 	ubfx	r1, r1, #6, #9
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800191a:	3201      	adds	r2, #1
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800191c:	434b      	muls	r3, r1
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800191e:	0052      	lsls	r2, r2, #1
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8001920:	fbb3 f3f2 	udiv	r3, r3, r2
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8001924:	490c      	ldr	r1, [pc, #48]	; (8001958 <RCC_GetClocksFreq+0x7c>)
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8001926:	6003      	str	r3, [r0, #0]
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8001928:	688b      	ldr	r3, [r1, #8]
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];
 800192a:	4a0e      	ldr	r2, [pc, #56]	; (8001964 <RCC_GetClocksFreq+0x88>)
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 800192c:	6804      	ldr	r4, [r0, #0]
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
  tmp = tmp >> 4;
 800192e:	f3c3 1303 	ubfx	r3, r3, #4, #4
  presc = APBAHBPrescTable[tmp];
 8001932:	5cd3      	ldrb	r3, [r2, r3]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8001934:	fa34 f303 	lsrs.w	r3, r4, r3
 8001938:	6043      	str	r3, [r0, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 800193a:	688c      	ldr	r4, [r1, #8]
  tmp = tmp >> 10;
 800193c:	f3c4 2482 	ubfx	r4, r4, #10, #3
  presc = APBAHBPrescTable[tmp];
 8001940:	5d14      	ldrb	r4, [r2, r4]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001942:	fa33 f404 	lsrs.w	r4, r3, r4
 8001946:	6084      	str	r4, [r0, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8001948:	6889      	ldr	r1, [r1, #8]
  tmp = tmp >> 13;
 800194a:	f3c1 3142 	ubfx	r1, r1, #13, #3
  presc = APBAHBPrescTable[tmp];
 800194e:	5c52      	ldrb	r2, [r2, r1]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001950:	40d3      	lsrs	r3, r2
 8001952:	60c3      	str	r3, [r0, #12]
}
 8001954:	bd10      	pop	{r4, pc}
 8001956:	bf00      	nop
 8001958:	40023800 	.word	0x40023800
 800195c:	00f42400 	.word	0x00f42400
 8001960:	007a1200 	.word	0x007a1200
 8001964:	20000074 	.word	0x20000074

08001968 <RCC_RTCCLKConfig>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 8001968:	f400 7340 	and.w	r3, r0, #768	; 0x300
 800196c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001970:	4b08      	ldr	r3, [pc, #32]	; (8001994 <RCC_RTCCLKConfig+0x2c>)
 8001972:	d108      	bne.n	8001986 <RCC_RTCCLKConfig+0x1e>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 8001974:	6899      	ldr	r1, [r3, #8]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8001976:	f020 4270 	bic.w	r2, r0, #4026531840	; 0xf0000000
  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
 800197a:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 800197e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001982:	430a      	orrs	r2, r1

    /* Store the new value */
    RCC->CFGR = tmpreg;
 8001984:	609a      	str	r2, [r3, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 8001986:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001988:	0500      	lsls	r0, r0, #20
 800198a:	ea42 5010 	orr.w	r0, r2, r0, lsr #20
 800198e:	6718      	str	r0, [r3, #112]	; 0x70
}
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	40023800 	.word	0x40023800

08001998 <RCC_RTCCLKCmd>:
void RCC_RTCCLKCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 8001998:	4b01      	ldr	r3, [pc, #4]	; (80019a0 <RCC_RTCCLKCmd+0x8>)
 800199a:	6018      	str	r0, [r3, #0]
}
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	42470e3c 	.word	0x42470e3c

080019a4 <RCC_BackupResetCmd>:
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 80019a4:	4b01      	ldr	r3, [pc, #4]	; (80019ac <RCC_BackupResetCmd+0x8>)
 80019a6:	6018      	str	r0, [r3, #0]
}
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	42470e40 	.word	0x42470e40

080019b0 <RCC_I2SCLKConfig>:
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 80019b0:	4b01      	ldr	r3, [pc, #4]	; (80019b8 <RCC_I2SCLKConfig+0x8>)
 80019b2:	6018      	str	r0, [r3, #0]
}
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	4247015c 	.word	0x4247015c

080019bc <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80019bc:	4b04      	ldr	r3, [pc, #16]	; (80019d0 <RCC_AHB1PeriphClockCmd+0x14>)
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80019be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80019c0:	b109      	cbz	r1, 80019c6 <RCC_AHB1PeriphClockCmd+0xa>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80019c2:	4310      	orrs	r0, r2
 80019c4:	e001      	b.n	80019ca <RCC_AHB1PeriphClockCmd+0xe>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80019c6:	ea22 0000 	bic.w	r0, r2, r0
 80019ca:	6318      	str	r0, [r3, #48]	; 0x30
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	40023800 	.word	0x40023800

080019d4 <RCC_AHB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 80019d4:	4b04      	ldr	r3, [pc, #16]	; (80019e8 <RCC_AHB2PeriphClockCmd+0x14>)
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 80019d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80019d8:	b109      	cbz	r1, 80019de <RCC_AHB2PeriphClockCmd+0xa>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 80019da:	4310      	orrs	r0, r2
 80019dc:	e001      	b.n	80019e2 <RCC_AHB2PeriphClockCmd+0xe>
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
 80019de:	ea22 0000 	bic.w	r0, r2, r0
 80019e2:	6358      	str	r0, [r3, #52]	; 0x34
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	40023800 	.word	0x40023800

080019ec <RCC_AHB3PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 80019ec:	4b04      	ldr	r3, [pc, #16]	; (8001a00 <RCC_AHB3PeriphClockCmd+0x14>)
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 80019ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80019f0:	b109      	cbz	r1, 80019f6 <RCC_AHB3PeriphClockCmd+0xa>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 80019f2:	4310      	orrs	r0, r2
 80019f4:	e001      	b.n	80019fa <RCC_AHB3PeriphClockCmd+0xe>
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
 80019f6:	ea22 0000 	bic.w	r0, r2, r0
 80019fa:	6398      	str	r0, [r3, #56]	; 0x38
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	40023800 	.word	0x40023800

08001a04 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001a04:	4b04      	ldr	r3, [pc, #16]	; (8001a18 <RCC_APB1PeriphClockCmd+0x14>)
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001a06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001a08:	b109      	cbz	r1, 8001a0e <RCC_APB1PeriphClockCmd+0xa>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001a0a:	4310      	orrs	r0, r2
 8001a0c:	e001      	b.n	8001a12 <RCC_APB1PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001a0e:	ea22 0000 	bic.w	r0, r2, r0
 8001a12:	6418      	str	r0, [r3, #64]	; 0x40
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	40023800 	.word	0x40023800

08001a1c <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001a1c:	4b04      	ldr	r3, [pc, #16]	; (8001a30 <RCC_APB2PeriphClockCmd+0x14>)
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001a1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001a20:	b109      	cbz	r1, 8001a26 <RCC_APB2PeriphClockCmd+0xa>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001a22:	4310      	orrs	r0, r2
 8001a24:	e001      	b.n	8001a2a <RCC_APB2PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001a26:	ea22 0000 	bic.w	r0, r2, r0
 8001a2a:	6458      	str	r0, [r3, #68]	; 0x44
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	40023800 	.word	0x40023800

08001a34 <RCC_AHB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8001a34:	4b04      	ldr	r3, [pc, #16]	; (8001a48 <RCC_AHB1PeriphResetCmd+0x14>)
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 8001a36:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001a38:	b109      	cbz	r1, 8001a3e <RCC_AHB1PeriphResetCmd+0xa>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 8001a3a:	4310      	orrs	r0, r2
 8001a3c:	e001      	b.n	8001a42 <RCC_AHB1PeriphResetCmd+0xe>
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 8001a3e:	ea22 0000 	bic.w	r0, r2, r0
 8001a42:	6118      	str	r0, [r3, #16]
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	40023800 	.word	0x40023800

08001a4c <RCC_AHB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 8001a4c:	4b04      	ldr	r3, [pc, #16]	; (8001a60 <RCC_AHB2PeriphResetCmd+0x14>)
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 8001a4e:	695a      	ldr	r2, [r3, #20]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001a50:	b109      	cbz	r1, 8001a56 <RCC_AHB2PeriphResetCmd+0xa>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 8001a52:	4310      	orrs	r0, r2
 8001a54:	e001      	b.n	8001a5a <RCC_AHB2PeriphResetCmd+0xe>
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 8001a56:	ea22 0000 	bic.w	r0, r2, r0
 8001a5a:	6158      	str	r0, [r3, #20]
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	40023800 	.word	0x40023800

08001a64 <RCC_AHB3PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 8001a64:	4b04      	ldr	r3, [pc, #16]	; (8001a78 <RCC_AHB3PeriphResetCmd+0x14>)
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 8001a66:	699a      	ldr	r2, [r3, #24]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001a68:	b109      	cbz	r1, 8001a6e <RCC_AHB3PeriphResetCmd+0xa>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 8001a6a:	4310      	orrs	r0, r2
 8001a6c:	e001      	b.n	8001a72 <RCC_AHB3PeriphResetCmd+0xe>
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
 8001a6e:	ea22 0000 	bic.w	r0, r2, r0
 8001a72:	6198      	str	r0, [r3, #24]
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	40023800 	.word	0x40023800

08001a7c <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001a7c:	4b04      	ldr	r3, [pc, #16]	; (8001a90 <RCC_APB1PeriphResetCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8001a7e:	6a1a      	ldr	r2, [r3, #32]
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001a80:	b109      	cbz	r1, 8001a86 <RCC_APB1PeriphResetCmd+0xa>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8001a82:	4310      	orrs	r0, r2
 8001a84:	e001      	b.n	8001a8a <RCC_APB1PeriphResetCmd+0xe>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8001a86:	ea22 0000 	bic.w	r0, r2, r0
 8001a8a:	6218      	str	r0, [r3, #32]
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	40023800 	.word	0x40023800

08001a94 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001a94:	4b04      	ldr	r3, [pc, #16]	; (8001aa8 <RCC_APB2PeriphResetCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8001a96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001a98:	b109      	cbz	r1, 8001a9e <RCC_APB2PeriphResetCmd+0xa>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8001a9a:	4310      	orrs	r0, r2
 8001a9c:	e001      	b.n	8001aa2 <RCC_APB2PeriphResetCmd+0xe>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8001a9e:	ea22 0000 	bic.w	r0, r2, r0
 8001aa2:	6258      	str	r0, [r3, #36]	; 0x24
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	40023800 	.word	0x40023800

08001aac <RCC_AHB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8001aac:	4b04      	ldr	r3, [pc, #16]	; (8001ac0 <RCC_AHB1PeriphClockLPModeCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 8001aae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001ab0:	b109      	cbz	r1, 8001ab6 <RCC_AHB1PeriphClockLPModeCmd+0xa>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 8001ab2:	4310      	orrs	r0, r2
 8001ab4:	e001      	b.n	8001aba <RCC_AHB1PeriphClockLPModeCmd+0xe>
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
 8001ab6:	ea22 0000 	bic.w	r0, r2, r0
 8001aba:	6518      	str	r0, [r3, #80]	; 0x50
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	40023800 	.word	0x40023800

08001ac4 <RCC_AHB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 8001ac4:	4b04      	ldr	r3, [pc, #16]	; (8001ad8 <RCC_AHB2PeriphClockLPModeCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 8001ac6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001ac8:	b109      	cbz	r1, 8001ace <RCC_AHB2PeriphClockLPModeCmd+0xa>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 8001aca:	4310      	orrs	r0, r2
 8001acc:	e001      	b.n	8001ad2 <RCC_AHB2PeriphClockLPModeCmd+0xe>
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
 8001ace:	ea22 0000 	bic.w	r0, r2, r0
 8001ad2:	6558      	str	r0, [r3, #84]	; 0x54
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	40023800 	.word	0x40023800

08001adc <RCC_AHB3PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 8001adc:	4b04      	ldr	r3, [pc, #16]	; (8001af0 <RCC_AHB3PeriphClockLPModeCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 8001ade:	6d9a      	ldr	r2, [r3, #88]	; 0x58
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001ae0:	b109      	cbz	r1, 8001ae6 <RCC_AHB3PeriphClockLPModeCmd+0xa>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 8001ae2:	4310      	orrs	r0, r2
 8001ae4:	e001      	b.n	8001aea <RCC_AHB3PeriphClockLPModeCmd+0xe>
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
 8001ae6:	ea22 0000 	bic.w	r0, r2, r0
 8001aea:	6598      	str	r0, [r3, #88]	; 0x58
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	40023800 	.word	0x40023800

08001af4 <RCC_APB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001af4:	4b04      	ldr	r3, [pc, #16]	; (8001b08 <RCC_APB1PeriphClockLPModeCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 8001af6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001af8:	b109      	cbz	r1, 8001afe <RCC_APB1PeriphClockLPModeCmd+0xa>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 8001afa:	4310      	orrs	r0, r2
 8001afc:	e001      	b.n	8001b02 <RCC_APB1PeriphClockLPModeCmd+0xe>
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
 8001afe:	ea22 0000 	bic.w	r0, r2, r0
 8001b02:	6618      	str	r0, [r3, #96]	; 0x60
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	40023800 	.word	0x40023800

08001b0c <RCC_APB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001b0c:	4b04      	ldr	r3, [pc, #16]	; (8001b20 <RCC_APB2PeriphClockLPModeCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 8001b0e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001b10:	b109      	cbz	r1, 8001b16 <RCC_APB2PeriphClockLPModeCmd+0xa>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 8001b12:	4310      	orrs	r0, r2
 8001b14:	e001      	b.n	8001b1a <RCC_APB2PeriphClockLPModeCmd+0xe>
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
 8001b16:	ea22 0000 	bic.w	r0, r2, r0
 8001b1a:	6658      	str	r0, [r3, #100]	; 0x64
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	40023800 	.word	0x40023800

08001b24 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
 8001b24:	4b04      	ldr	r3, [pc, #16]	; (8001b38 <RCC_ITConfig+0x14>)
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8001b26:	781a      	ldrb	r2, [r3, #0]
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001b28:	b109      	cbz	r1, 8001b2e <RCC_ITConfig+0xa>
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8001b2a:	4310      	orrs	r0, r2
 8001b2c:	e001      	b.n	8001b32 <RCC_ITConfig+0xe>
  }
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 8001b2e:	ea22 0000 	bic.w	r0, r2, r0
 8001b32:	7018      	strb	r0, [r3, #0]
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	4002380d 	.word	0x4002380d

08001b3c <RCC_GetFlagStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8001b3c:	0943      	lsrs	r3, r0, #5
  if (tmp == 1)               /* The flag to check is in CR register */
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	4a07      	ldr	r2, [pc, #28]	; (8001b60 <RCC_GetFlagStatus+0x24>)
 8001b42:	d101      	bne.n	8001b48 <RCC_GetFlagStatus+0xc>
  {
    statusreg = RCC->CR;
 8001b44:	6813      	ldr	r3, [r2, #0]
 8001b46:	e003      	b.n	8001b50 <RCC_GetFlagStatus+0x14>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8001b48:	2b02      	cmp	r3, #2
  {
    statusreg = RCC->BDCR;
 8001b4a:	bf0c      	ite	eq
 8001b4c:	6f13      	ldreq	r3, [r2, #112]	; 0x70
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8001b4e:	6f53      	ldrne	r3, [r2, #116]	; 0x74
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 8001b50:	f000 001f 	and.w	r0, r0, #31
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8001b54:	fa33 f000 	lsrs.w	r0, r3, r0
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
}
 8001b58:	f000 0001 	and.w	r0, r0, #1
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	40023800 	.word	0x40023800

08001b64 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8001b64:	b507      	push	{r0, r1, r2, lr}
  __IO uint32_t startupcounter = 0;
 8001b66:	2300      	movs	r3, #0
 8001b68:	9301      	str	r3, [sp, #4]
  ErrorStatus status = ERROR;
  FlagStatus hsestatus = RESET;
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 8001b6a:	2031      	movs	r0, #49	; 0x31
 8001b6c:	f7ff ffe6 	bl	8001b3c <RCC_GetFlagStatus>
    startupcounter++;
 8001b70:	9b01      	ldr	r3, [sp, #4]
 8001b72:	3301      	adds	r3, #1
 8001b74:	9301      	str	r3, [sp, #4]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 8001b76:	9b01      	ldr	r3, [sp, #4]
 8001b78:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001b7c:	d001      	beq.n	8001b82 <RCC_WaitForHSEStartUp+0x1e>
 8001b7e:	2800      	cmp	r0, #0
 8001b80:	d0f3      	beq.n	8001b6a <RCC_WaitForHSEStartUp+0x6>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 8001b82:	2031      	movs	r0, #49	; 0x31
 8001b84:	f7ff ffda 	bl	8001b3c <RCC_GetFlagStatus>
  else
  {
    status = ERROR;
  }
  return (status);
}
 8001b88:	3000      	adds	r0, #0
 8001b8a:	bf18      	it	ne
 8001b8c:	2001      	movne	r0, #1
 8001b8e:	bd0e      	pop	{r1, r2, r3, pc}

08001b90 <RCC_ClearFlag>:
  * @retval None
  */
void RCC_ClearFlag(void)
{
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 8001b90:	4b02      	ldr	r3, [pc, #8]	; (8001b9c <RCC_ClearFlag+0xc>)
 8001b92:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001b94:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001b98:	675a      	str	r2, [r3, #116]	; 0x74
}
 8001b9a:	4770      	bx	lr
 8001b9c:	40023800 	.word	0x40023800

08001ba0 <RCC_GetITStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 8001ba0:	4b03      	ldr	r3, [pc, #12]	; (8001bb0 <RCC_GetITStatus+0x10>)
 8001ba2:	68db      	ldr	r3, [r3, #12]
  {
    bitstatus = SET;
 8001ba4:	4218      	tst	r0, r3
  {
    bitstatus = RESET;
  }
  /* Return the RCC_IT status */
  return  bitstatus;
}
 8001ba6:	bf0c      	ite	eq
 8001ba8:	2000      	moveq	r0, #0
 8001baa:	2001      	movne	r0, #1
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	40023800 	.word	0x40023800

08001bb4 <RCC_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 8001bb4:	4b01      	ldr	r3, [pc, #4]	; (8001bbc <RCC_ClearITPendingBit+0x8>)
 8001bb6:	7018      	strb	r0, [r3, #0]
}
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	4002380e 	.word	0x4002380e

08001bc0 <SPI_I2S_DeInit>:
  *         is managed by the I2S peripheral clock).
  *             
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 8001bc0:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 8001bc2:	4b15      	ldr	r3, [pc, #84]	; (8001c18 <SPI_I2S_DeInit+0x58>)
 8001bc4:	4298      	cmp	r0, r3
 8001bc6:	d10b      	bne.n	8001be0 <SPI_I2S_DeInit+0x20>
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 8001bc8:	2101      	movs	r1, #1
 8001bca:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001bce:	f7ff ff61 	bl	8001a94 <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 8001bd2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001bd6:	2100      	movs	r1, #0
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
    }
  }
}
 8001bd8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  if (SPIx == SPI1)
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 8001bdc:	f7ff bf5a 	b.w	8001a94 <RCC_APB2PeriphResetCmd>
  }
  else if (SPIx == SPI2)
 8001be0:	4b0e      	ldr	r3, [pc, #56]	; (8001c1c <SPI_I2S_DeInit+0x5c>)
 8001be2:	4298      	cmp	r0, r3
 8001be4:	d107      	bne.n	8001bf6 <SPI_I2S_DeInit+0x36>
  {
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 8001be6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001bea:	2101      	movs	r1, #1
 8001bec:	f7ff ff46 	bl	8001a7c <RCC_APB1PeriphResetCmd>
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 8001bf0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001bf4:	e009      	b.n	8001c0a <SPI_I2S_DeInit+0x4a>
    }
  else
  {
    if (SPIx == SPI3)
 8001bf6:	4b0a      	ldr	r3, [pc, #40]	; (8001c20 <SPI_I2S_DeInit+0x60>)
 8001bf8:	4298      	cmp	r0, r3
 8001bfa:	d10b      	bne.n	8001c14 <SPI_I2S_DeInit+0x54>
    {
      /* Enable SPI3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 8001bfc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001c00:	2101      	movs	r1, #1
 8001c02:	f7ff ff3b 	bl	8001a7c <RCC_APB1PeriphResetCmd>
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 8001c06:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001c0a:	2100      	movs	r1, #0
    }
  }
}
 8001c0c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if (SPIx == SPI3)
    {
      /* Enable SPI3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 8001c10:	f7ff bf34 	b.w	8001a7c <RCC_APB1PeriphResetCmd>
 8001c14:	bd08      	pop	{r3, pc}
 8001c16:	bf00      	nop
 8001c18:	40013000 	.word	0x40013000
 8001c1c:	40003800 	.word	0x40003800
 8001c20:	40003c00 	.word	0x40003c00

08001c24 <SPI_Init>:
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001c24:	880b      	ldrh	r3, [r1, #0]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8001c26:	8802      	ldrh	r2, [r0, #0]
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8001c28:	b510      	push	{r4, lr}
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001c2a:	884c      	ldrh	r4, [r1, #2]
 8001c2c:	4323      	orrs	r3, r4
 8001c2e:	888c      	ldrh	r4, [r1, #4]
 8001c30:	4323      	orrs	r3, r4
 8001c32:	88cc      	ldrh	r4, [r1, #6]
 8001c34:	4323      	orrs	r3, r4
 8001c36:	890c      	ldrh	r4, [r1, #8]
 8001c38:	4323      	orrs	r3, r4
 8001c3a:	894c      	ldrh	r4, [r1, #10]
 8001c3c:	4323      	orrs	r3, r4
 8001c3e:	898c      	ldrh	r4, [r1, #12]
 8001c40:	4323      	orrs	r3, r4
 8001c42:	89cc      	ldrh	r4, [r1, #14]

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8001c44:	f402 5241 	and.w	r2, r2, #12352	; 0x3040
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001c48:	4323      	orrs	r3, r4
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	b29b      	uxth	r3, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8001c4e:	8003      	strh	r3, [r0, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 8001c50:	8b83      	ldrh	r3, [r0, #28]
 8001c52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001c56:	041b      	lsls	r3, r3, #16
 8001c58:	0c1b      	lsrs	r3, r3, #16
 8001c5a:	8383      	strh	r3, [r0, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8001c5c:	8a0b      	ldrh	r3, [r1, #16]
 8001c5e:	8203      	strh	r3, [r0, #16]
}
 8001c60:	bd10      	pop	{r4, pc}

08001c62 <I2S_Init>:
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 8001c62:	8b83      	ldrh	r3, [r0, #28]
 8001c64:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001c68:	f023 030f 	bic.w	r3, r3, #15
 8001c6c:	041b      	lsls	r3, r3, #16
 8001c6e:	0c1b      	lsrs	r3, r3, #16
 8001c70:	8383      	strh	r3, [r0, #28]
  SPIx->I2SPR = 0x0002;
 8001c72:	2302      	movs	r3, #2
 8001c74:	8403      	strh	r3, [r0, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 8001c76:	688b      	ldr	r3, [r1, #8]
  *         to the value of the the source clock frequency (in Hz).
  *  
  * @retval None
  */
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
 8001c78:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
  SPIx->I2SPR = 0x0002;
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 8001c7a:	8b85      	ldrh	r5, [r0, #28]
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 8001c7c:	2b02      	cmp	r3, #2
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
  SPIx->I2SPR = 0x0002;
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 8001c7e:	b2ad      	uxth	r5, r5
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 8001c80:	d038      	beq.n	8001cf4 <I2S_Init+0x92>
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 8001c82:	4a29      	ldr	r2, [pc, #164]	; (8001d28 <I2S_Init+0xc6>)
  }
  /* If the requested audio frequency is not the default, compute the prescaler */
  else
  {
    /* Check the frame length (For the Prescaler computing) *******************/
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 8001c84:	888e      	ldrh	r6, [r1, #4]
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 8001c86:	6894      	ldr	r4, [r2, #8]
  {
    /* Check the frame length (For the Prescaler computing) *******************/
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
    {
      /* Packet length is 16 bits */
      packetlength = 1;
 8001c88:	2e00      	cmp	r6, #0
 8001c8a:	bf14      	ite	ne
 8001c8c:	2602      	movne	r6, #2
 8001c8e:	2601      	moveq	r6, #1
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 8001c90:	0224      	lsls	r4, r4, #8
 8001c92:	d503      	bpl.n	8001c9c <I2S_Init+0x3a>
    {
      RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
 8001c94:	6894      	ldr	r4, [r2, #8]
 8001c96:	f424 0400 	bic.w	r4, r4, #8388608	; 0x800000
 8001c9a:	6094      	str	r4, [r2, #8]
    }    
    
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 8001c9c:	f8d2 4084 	ldr.w	r4, [r2, #132]	; 0x84
                      (RCC_PLLI2SCFGR_PLLI2SN >> 6));
    
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
 8001ca0:	f8d2 7084 	ldr.w	r7, [r2, #132]	; 0x84
                      (RCC_PLLI2SCFGR_PLLI2SR >> 28));
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
 8001ca4:	6852      	ldr	r2, [r2, #4]
    
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 8001ca6:	f8df c084 	ldr.w	ip, [pc, #132]	; 8001d2c <I2S_Init+0xca>
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
                      (RCC_PLLI2SCFGR_PLLI2SR >> 28));
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
 8001caa:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 8001cae:	fbbc f2f2 	udiv	r2, ip, r2
    {
      RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
    }    
    
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 8001cb2:	f3c4 1488 	ubfx	r4, r4, #6, #9
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
    
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 8001cb6:	4354      	muls	r4, r2
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
                      (RCC_PLLI2SCFGR_PLLI2SN >> 6));
    
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
 8001cb8:	f3c7 7202 	ubfx	r2, r7, #28, #3
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
    
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 8001cbc:	fbb4 f4f2 	udiv	r4, r4, r2
  #endif /* I2S_EXTERNAL_CLOCK_VAL */
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 8001cc0:	88ca      	ldrh	r2, [r1, #6]
 8001cc2:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8001cc6:	f04f 020a 	mov.w	r2, #10
 8001cca:	d101      	bne.n	8001cd0 <I2S_Init+0x6e>
    {
      /* MCLK output is enabled */
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8001ccc:	0a24      	lsrs	r4, r4, #8
 8001cce:	e002      	b.n	8001cd6 <I2S_Init+0x74>
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8001cd0:	0176      	lsls	r6, r6, #5
 8001cd2:	fbb4 f4f6 	udiv	r4, r4, r6
 8001cd6:	4362      	muls	r2, r4
 8001cd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cdc:	3305      	adds	r3, #5
    }
    
    /* Remove the flatting point */
    tmp = tmp / 10;  
 8001cde:	220a      	movs	r2, #10
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8001ce0:	b29b      	uxth	r3, r3
    }
    
    /* Remove the flatting point */
    tmp = tmp / 10;  
 8001ce2:	fbb3 f3f2 	udiv	r3, r3, r2
      
    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 8001ce6:	f003 0201 	and.w	r2, r3, #1
   
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
 8001cea:	0212      	lsls	r2, r2, #8
      
    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 8001cec:	f3c3 034f 	ubfx	r3, r3, #1, #16
   
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
 8001cf0:	b292      	uxth	r2, r2
 8001cf2:	e000      	b.n	8001cf6 <I2S_Init+0x94>
  tmpreg = SPIx->I2SCFGR;
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
  {
    i2sodd = (uint16_t)0;
 8001cf4:	2200      	movs	r2, #0
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 8001cf6:	1e9c      	subs	r4, r3, #2
 8001cf8:	b2a4      	uxth	r4, r4
  {
    /* Set the default values */
    i2sdiv = 2;
    i2sodd = 0;
 8001cfa:	2cfe      	cmp	r4, #254	; 0xfe
 8001cfc:	bf28      	it	cs
 8001cfe:	2200      	movcs	r2, #0
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 8001d00:	88cc      	ldrh	r4, [r1, #6]
  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
  {
    /* Set the default values */
    i2sdiv = 2;
    i2sodd = 0;
 8001d02:	bf28      	it	cs
 8001d04:	2302      	movcs	r3, #2
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 8001d06:	4313      	orrs	r3, r2
 8001d08:	4323      	orrs	r3, r4
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	8403      	strh	r3, [r0, #32]
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8001d0e:	880b      	ldrh	r3, [r1, #0]

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 8001d10:	884a      	ldrh	r2, [r1, #2]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8001d12:	432b      	orrs	r3, r5
 8001d14:	f443 6300 	orr.w	r3, r3, #2048	; 0x800

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	888a      	ldrh	r2, [r1, #4]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	898a      	ldrh	r2, [r1, #12]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	b29b      	uxth	r3, r3
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  SPIx->I2SCFGR = tmpreg;
 8001d24:	8383      	strh	r3, [r0, #28]
}
 8001d26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d28:	40023800 	.word	0x40023800
 8001d2c:	007a1200 	.word	0x007a1200

08001d30 <SPI_StructInit>:
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8001d30:	2300      	movs	r3, #0
 8001d32:	8003      	strh	r3, [r0, #0]
  /* initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 8001d34:	8043      	strh	r3, [r0, #2]
  /* initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 8001d36:	8083      	strh	r3, [r0, #4]
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 8001d38:	80c3      	strh	r3, [r0, #6]
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 8001d3a:	8103      	strh	r3, [r0, #8]
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 8001d3c:	8143      	strh	r3, [r0, #10]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 8001d3e:	8183      	strh	r3, [r0, #12]
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 8001d40:	81c3      	strh	r3, [r0, #14]
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 8001d42:	2307      	movs	r3, #7
 8001d44:	8203      	strh	r3, [r0, #16]
}
 8001d46:	4770      	bx	lr

08001d48 <I2S_StructInit>:
  */
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
{
/*--------------- Reset I2S init structure parameters values -----------------*/
  /* Initialize the I2S_Mode member */
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 8001d48:	2300      	movs	r3, #0
  
  /* Initialize the I2S_MCLKOutput member */
  I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
  
  /* Initialize the I2S_AudioFreq member */
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 8001d4a:	2202      	movs	r2, #2
  */
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
{
/*--------------- Reset I2S init structure parameters values -----------------*/
  /* Initialize the I2S_Mode member */
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 8001d4c:	8003      	strh	r3, [r0, #0]
  
  /* Initialize the I2S_Standard member */
  I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
 8001d4e:	8043      	strh	r3, [r0, #2]
  
  /* Initialize the I2S_DataFormat member */
  I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
 8001d50:	8083      	strh	r3, [r0, #4]
  
  /* Initialize the I2S_MCLKOutput member */
  I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
 8001d52:	80c3      	strh	r3, [r0, #6]
  
  /* Initialize the I2S_AudioFreq member */
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 8001d54:	6082      	str	r2, [r0, #8]
  
  /* Initialize the I2S_CPOL member */
  I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
 8001d56:	8183      	strh	r3, [r0, #12]
}
 8001d58:	4770      	bx	lr

08001d5a <SPI_Cmd>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8001d5a:	8803      	ldrh	r3, [r0, #0]
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001d5c:	b119      	cbz	r1, 8001d66 <SPI_Cmd+0xc>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d64:	e003      	b.n	8001d6e <SPI_Cmd+0x14>
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 8001d66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001d6a:	041b      	lsls	r3, r3, #16
 8001d6c:	0c1b      	lsrs	r3, r3, #16
 8001d6e:	8003      	strh	r3, [r0, #0]
 8001d70:	4770      	bx	lr

08001d72 <I2S_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 8001d72:	8b83      	ldrh	r3, [r0, #28]
{
  /* Check the parameters */
  assert_param(IS_SPI_23_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001d74:	b119      	cbz	r1, 8001d7e <I2S_Cmd+0xc>
  {
    /* Enable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d7c:	e003      	b.n	8001d86 <I2S_Cmd+0x14>
  }
  else
  {
    /* Disable the selected SPI peripheral in I2S mode */
    SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
 8001d7e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001d82:	041b      	lsls	r3, r3, #16
 8001d84:	0c1b      	lsrs	r3, r3, #16
 8001d86:	8383      	strh	r3, [r0, #28]
 8001d88:	4770      	bx	lr

08001d8a <SPI_DataSizeConfig>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DATASIZE(SPI_DataSize));
  /* Clear DFF bit */
  SPIx->CR1 &= (uint16_t)~SPI_DataSize_16b;
 8001d8a:	8803      	ldrh	r3, [r0, #0]
 8001d8c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001d90:	041b      	lsls	r3, r3, #16
 8001d92:	0c1b      	lsrs	r3, r3, #16
 8001d94:	8003      	strh	r3, [r0, #0]
  /* Set new DFF bit value */
  SPIx->CR1 |= SPI_DataSize;
 8001d96:	8803      	ldrh	r3, [r0, #0]
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	430b      	orrs	r3, r1
 8001d9c:	8003      	strh	r3, [r0, #0]
}
 8001d9e:	4770      	bx	lr

08001da0 <SPI_BiDirectionalLineConfig>:
void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
 8001da0:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
  {
    /* Set the Tx only mode */
    SPIx->CR1 |= SPI_Direction_Tx;
 8001da4:	8803      	ldrh	r3, [r0, #0]
void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
 8001da6:	d103      	bne.n	8001db0 <SPI_BiDirectionalLineConfig+0x10>
  {
    /* Set the Tx only mode */
    SPIx->CR1 |= SPI_Direction_Tx;
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dae:	e003      	b.n	8001db8 <SPI_BiDirectionalLineConfig+0x18>
  }
  else
  {
    /* Set the Rx only mode */
    SPIx->CR1 &= SPI_Direction_Rx;
 8001db0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001db4:	041b      	lsls	r3, r3, #16
 8001db6:	0c1b      	lsrs	r3, r3, #16
 8001db8:	8003      	strh	r3, [r0, #0]
 8001dba:	4770      	bx	lr

08001dbc <SPI_NSSInternalSoftwareConfig>:
void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 8001dbc:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8001dc0:	4299      	cmp	r1, r3
  {
    /* Set NSS pin internally by software */
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 8001dc2:	8803      	ldrh	r3, [r0, #0]
void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 8001dc4:	d003      	beq.n	8001dce <SPI_NSSInternalSoftwareConfig+0x12>
  {
    /* Set NSS pin internally by software */
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dcc:	e003      	b.n	8001dd6 <SPI_NSSInternalSoftwareConfig+0x1a>
  }
  else
  {
    /* Reset NSS pin internally by software */
    SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 8001dce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001dd2:	041b      	lsls	r3, r3, #16
 8001dd4:	0c1b      	lsrs	r3, r3, #16
 8001dd6:	8003      	strh	r3, [r0, #0]
 8001dd8:	4770      	bx	lr

08001dda <SPI_SSOutputCmd>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
 8001dda:	8883      	ldrh	r3, [r0, #4]
void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001ddc:	b119      	cbz	r1, 8001de6 <SPI_SSOutputCmd+0xc>
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	f043 0304 	orr.w	r3, r3, #4
 8001de4:	e003      	b.n	8001dee <SPI_SSOutputCmd+0x14>
  }
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_SSOE);
 8001de6:	f023 0304 	bic.w	r3, r3, #4
 8001dea:	041b      	lsls	r3, r3, #16
 8001dec:	0c1b      	lsrs	r3, r3, #16
 8001dee:	8083      	strh	r3, [r0, #4]
 8001df0:	4770      	bx	lr

08001df2 <SPI_TIModeCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TI mode for the selected SPI peripheral */
    SPIx->CR2 |= SPI_CR2_FRF;
 8001df2:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001df4:	b119      	cbz	r1, 8001dfe <SPI_TIModeCmd+0xc>
  {
    /* Enable the TI mode for the selected SPI peripheral */
    SPIx->CR2 |= SPI_CR2_FRF;
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	f043 0310 	orr.w	r3, r3, #16
 8001dfc:	e003      	b.n	8001e06 <SPI_TIModeCmd+0x14>
  }
  else
  {
    /* Disable the TI mode for the selected SPI peripheral */
    SPIx->CR2 &= (uint16_t)~SPI_CR2_FRF;
 8001dfe:	f023 0310 	bic.w	r3, r3, #16
 8001e02:	041b      	lsls	r3, r3, #16
 8001e04:	0c1b      	lsrs	r3, r3, #16
 8001e06:	8083      	strh	r3, [r0, #4]
 8001e08:	4770      	bx	lr

08001e0a <I2S_FullDuplexConfig>:
  assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 8001e0a:	8b83      	ldrh	r3, [r0, #28]
 8001e0c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001e10:	f023 030f 	bic.w	r3, r3, #15
 8001e14:	041b      	lsls	r3, r3, #16
 8001e16:	0c1b      	lsrs	r3, r3, #16
 8001e18:	8383      	strh	r3, [r0, #28]
  I2Sxext->I2SPR = 0x0002;
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	8403      	strh	r3, [r0, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 8001e1e:	880b      	ldrh	r3, [r1, #0]
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
  I2Sxext->I2SPR = 0x0002;
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
 8001e20:	8b82      	ldrh	r2, [r0, #28]
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 8001e22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  * @note   The I2S full duplex extension can be configured in slave mode only.    
  *  
  * @retval None
  */
void I2S_FullDuplexConfig(SPI_TypeDef* I2Sxext, I2S_InitTypeDef* I2S_InitStruct)
{
 8001e26:	b510      	push	{r4, lr}
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
  I2Sxext->I2SPR = 0x0002;
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
 8001e28:	b292      	uxth	r2, r2
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 8001e2a:	d005      	beq.n	8001e38 <I2S_FullDuplexConfig+0x2e>
  {
    tmp = I2S_Mode_SlaveRx;
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	bf0c      	ite	eq
 8001e30:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8001e34:	2300      	movne	r3, #0
 8001e36:	e001      	b.n	8001e3c <I2S_FullDuplexConfig+0x32>
 8001e38:	f44f 7380 	mov.w	r3, #256	; 0x100
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8001e3c:	884c      	ldrh	r4, [r1, #2]
 8001e3e:	4322      	orrs	r2, r4
    }
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8001e40:	888c      	ldrh	r4, [r1, #4]
 8001e42:	8989      	ldrh	r1, [r1, #12]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8001e44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    }
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8001e48:	4322      	orrs	r2, r4
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	b292      	uxth	r2, r2
 8001e4e:	4313      	orrs	r3, r2
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  I2Sxext->I2SCFGR = tmpreg;
 8001e50:	8383      	strh	r3, [r0, #28]
}
 8001e52:	bd10      	pop	{r4, pc}

08001e54 <SPI_I2S_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 8001e54:	8980      	ldrh	r0, [r0, #12]
}
 8001e56:	b280      	uxth	r0, r0
 8001e58:	4770      	bx	lr

08001e5a <SPI_I2S_SendData>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8001e5a:	8181      	strh	r1, [r0, #12]
}
 8001e5c:	4770      	bx	lr

08001e5e <SPI_CalculateCRC>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI CRC calculation */
    SPIx->CR1 |= SPI_CR1_CRCEN;
 8001e5e:	8803      	ldrh	r3, [r0, #0]
void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001e60:	b119      	cbz	r1, 8001e6a <SPI_CalculateCRC+0xc>
  {
    /* Enable the selected SPI CRC calculation */
    SPIx->CR1 |= SPI_CR1_CRCEN;
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e68:	e003      	b.n	8001e72 <SPI_CalculateCRC+0x14>
  }
  else
  {
    /* Disable the selected SPI CRC calculation */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCEN);
 8001e6a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001e6e:	041b      	lsls	r3, r3, #16
 8001e70:	0c1b      	lsrs	r3, r3, #16
 8001e72:	8003      	strh	r3, [r0, #0]
 8001e74:	4770      	bx	lr

08001e76 <SPI_TransmitCRC>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Enable the selected SPI CRC transmission */
  SPIx->CR1 |= SPI_CR1_CRCNEXT;
 8001e76:	8803      	ldrh	r3, [r0, #0]
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e7e:	8003      	strh	r3, [r0, #0]
}
 8001e80:	4770      	bx	lr

08001e82 <SPI_GetCRC>:
{
  uint16_t crcreg = 0;
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_CRC(SPI_CRC));
  if (SPI_CRC != SPI_CRC_Rx)
 8001e82:	2901      	cmp	r1, #1
 8001e84:	d002      	beq.n	8001e8c <SPI_GetCRC+0xa>
  {
    /* Get the Tx CRC register */
    crcreg = SPIx->TXCRCR;
 8001e86:	8b00      	ldrh	r0, [r0, #24]
 8001e88:	b280      	uxth	r0, r0
 8001e8a:	4770      	bx	lr
  }
  else
  {
    /* Get the Rx CRC register */
    crcreg = SPIx->RXCRCR;
 8001e8c:	8a80      	ldrh	r0, [r0, #20]
 8001e8e:	b280      	uxth	r0, r0
  }
  /* Return the selected CRC register */
  return crcreg;
}
 8001e90:	4770      	bx	lr

08001e92 <SPI_GetCRCPolynomial>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the CRC polynomial register */
  return SPIx->CRCPR;
 8001e92:	8a00      	ldrh	r0, [r0, #16]
}
 8001e94:	b280      	uxth	r0, r0
 8001e96:	4770      	bx	lr

08001e98 <SPI_I2S_DMACmd>:
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 8001e98:	8883      	ldrh	r3, [r0, #4]
 8001e9a:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
 8001e9c:	b10a      	cbz	r2, 8001ea2 <SPI_I2S_DMACmd+0xa>
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 8001e9e:	4319      	orrs	r1, r3
 8001ea0:	e001      	b.n	8001ea6 <SPI_I2S_DMACmd+0xe>
  }
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 8001ea2:	ea23 0101 	bic.w	r1, r3, r1
 8001ea6:	8081      	strh	r1, [r0, #4]
 8001ea8:	4770      	bx	lr

08001eaa <SPI_I2S_ITConfig>:

  /* Get the SPI IT index */
  itpos = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 8001eaa:	0909      	lsrs	r1, r1, #4
 8001eac:	2301      	movs	r3, #1
 8001eae:	408b      	lsls	r3, r1
 8001eb0:	b29b      	uxth	r3, r3

  if (NewState != DISABLE)
 8001eb2:	b11a      	cbz	r2, 8001ebc <SPI_I2S_ITConfig+0x12>
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 8001eb4:	8882      	ldrh	r2, [r0, #4]
 8001eb6:	b292      	uxth	r2, r2
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	e003      	b.n	8001ec4 <SPI_I2S_ITConfig+0x1a>
  }
  else
  {
    /* Disable the selected SPI interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
 8001ebc:	8882      	ldrh	r2, [r0, #4]
 8001ebe:	b292      	uxth	r2, r2
 8001ec0:	ea22 0303 	bic.w	r3, r2, r3
 8001ec4:	8083      	strh	r3, [r0, #4]
 8001ec6:	4770      	bx	lr

08001ec8 <SPI_I2S_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8001ec8:	8903      	ldrh	r3, [r0, #8]
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8001eca:	4219      	tst	r1, r3
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
}
 8001ecc:	bf0c      	ite	eq
 8001ece:	2000      	moveq	r0, #0
 8001ed0:	2001      	movne	r0, #1
 8001ed2:	4770      	bx	lr

08001ed4 <SPI_I2S_ClearFlag>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));
    
  /* Clear the selected SPI CRC Error (CRCERR) flag */
  SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
 8001ed4:	43c9      	mvns	r1, r1
 8001ed6:	b289      	uxth	r1, r1
 8001ed8:	8101      	strh	r1, [r0, #8]
}
 8001eda:	4770      	bx	lr

08001edc <SPI_I2S_GetITStatus>:
  *            @arg I2S_IT_UDR: Underrun interrupt.  
  *            @arg SPI_I2S_IT_TIFRFE: Format Error interrupt.  
  * @retval The new state of SPI_I2S_IT (SET or RESET).
  */
ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
{
 8001edc:	b510      	push	{r4, lr}

  /* Set the IT mask */
  itmask = 0x01 << itmask;

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 8001ede:	8884      	ldrh	r4, [r0, #4]

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8001ee0:	8900      	ldrh	r0, [r0, #8]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));

  /* Get the SPI_I2S_IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	f001 020f 	and.w	r2, r1, #15

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8001ee8:	b280      	uxth	r0, r0
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));

  /* Get the SPI_I2S_IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 8001eea:	fa13 f202 	lsls.w	r2, r3, r2

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8001eee:	4010      	ands	r0, r2

  /* Set the IT mask */
  itmask = 0x01 << itmask;

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 8001ef0:	b2a4      	uxth	r4, r4

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8001ef2:	d005      	beq.n	8001f00 <SPI_I2S_GetITStatus+0x24>

  /* Get the SPI_I2S_IT IT mask */
  itmask = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = 0x01 << itmask;
 8001ef4:	0909      	lsrs	r1, r1, #4
 8001ef6:	408b      	lsls	r3, r1
  *            @arg SPI_IT_CRCERR: CRC Error interrupt.
  *            @arg I2S_IT_UDR: Underrun interrupt.  
  *            @arg SPI_I2S_IT_TIFRFE: Format Error interrupt.  
  * @retval The new state of SPI_I2S_IT (SET or RESET).
  */
ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
 8001ef8:	421c      	tst	r4, r3

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
  {
    /* SPI_I2S_IT is set */
    bitstatus = SET;
 8001efa:	bf0c      	ite	eq
 8001efc:	2000      	moveq	r0, #0
 8001efe:	2001      	movne	r0, #1
    /* SPI_I2S_IT is reset */
    bitstatus = RESET;
  }
  /* Return the SPI_I2S_IT status */
  return bitstatus;
}
 8001f00:	bd10      	pop	{r4, pc}

08001f02 <SPI_I2S_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_IT(SPI_I2S_IT));

  /* Get the SPI_I2S IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 8001f02:	f001 010f 	and.w	r1, r1, #15
 8001f06:	2301      	movs	r3, #1
 8001f08:	408b      	lsls	r3, r1

  /* Clear the selected SPI CRC Error (CRCERR) interrupt pending bit */
  SPIx->SR = (uint16_t)~itpos;
 8001f0a:	43db      	mvns	r3, r3
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	8103      	strh	r3, [r0, #8]
}
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop

08001f14 <SYSCFG_DeInit>:
  *   registers to their default reset values.
  * @param  None
  * @retval None
  */
void SYSCFG_DeInit(void)
{
 8001f14:	b508      	push	{r3, lr}
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8001f16:	2101      	movs	r1, #1
 8001f18:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001f1c:	f7ff fdba 	bl	8001a94 <RCC_APB2PeriphResetCmd>
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, DISABLE);
 8001f20:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001f24:	2100      	movs	r1, #0
}
 8001f26:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  * @retval None
  */
void SYSCFG_DeInit(void)
{
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, ENABLE);
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, DISABLE);
 8001f2a:	f7ff bdb3 	b.w	8001a94 <RCC_APB2PeriphResetCmd>

08001f2e <SYSCFG_MemoryRemapConfig>:
void SYSCFG_MemoryRemapConfig(uint8_t SYSCFG_MemoryRemap)
{
  /* Check the parameters */
  assert_param(IS_SYSCFG_MEMORY_REMAP_CONFING(SYSCFG_MemoryRemap));

  SYSCFG->MEMRMP = SYSCFG_MemoryRemap;
 8001f2e:	4b01      	ldr	r3, [pc, #4]	; (8001f34 <SYSCFG_MemoryRemapConfig+0x6>)
 8001f30:	6018      	str	r0, [r3, #0]
}
 8001f32:	4770      	bx	lr
 8001f34:	40013800 	.word	0x40013800

08001f38 <SYSCFG_EXTILineConfig>:

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8001f38:	f001 0203 	and.w	r2, r1, #3
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8001f3c:	0889      	lsrs	r1, r1, #2
 8001f3e:	4b0a      	ldr	r3, [pc, #40]	; (8001f68 <SYSCFG_EXTILineConfig+0x30>)
 8001f40:	3102      	adds	r1, #2
  *           This parameter can be EXTI_PinSourcex where x can be (0..15, except
  *           for EXTI_PortSourceGPIOI x can be (0..11).
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 8001f42:	b530      	push	{r4, r5, lr}

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8001f44:	0092      	lsls	r2, r2, #2
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8001f46:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8001f4a:	240f      	movs	r4, #15
 8001f4c:	4094      	lsls	r4, r2
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8001f4e:	ea25 0404 	bic.w	r4, r5, r4
 8001f52:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8001f56:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
 8001f5a:	fa10 f202 	lsls.w	r2, r0, r2
 8001f5e:	4314      	orrs	r4, r2
 8001f60:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
}
 8001f64:	bd30      	pop	{r4, r5, pc}
 8001f66:	bf00      	nop
 8001f68:	40013800 	.word	0x40013800

08001f6c <SYSCFG_ETH_MediaInterfaceConfig>:
  */
void SYSCFG_ETH_MediaInterfaceConfig(uint32_t SYSCFG_ETH_MediaInterface) 
{ 
  assert_param(IS_SYSCFG_ETH_MEDIA_INTERFACE(SYSCFG_ETH_MediaInterface)); 
  /* Configure MII_RMII selection bit */ 
  *(__IO uint32_t *) PMC_MII_RMII_SEL_BB = SYSCFG_ETH_MediaInterface; 
 8001f6c:	4b01      	ldr	r3, [pc, #4]	; (8001f74 <SYSCFG_ETH_MediaInterfaceConfig+0x8>)
 8001f6e:	6018      	str	r0, [r3, #0]
}
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	422700dc 	.word	0x422700dc

08001f78 <SYSCFG_CompensationCellCmd>:
void SYSCFG_CompensationCellCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CMPCR_CMP_PD_BB = (uint32_t)NewState;
 8001f78:	4b01      	ldr	r3, [pc, #4]	; (8001f80 <SYSCFG_CompensationCellCmd+0x8>)
 8001f7a:	6018      	str	r0, [r3, #0]
}
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	42270400 	.word	0x42270400

08001f84 <SYSCFG_GetCompensationCellStatus>:
  */
FlagStatus SYSCFG_GetCompensationCellStatus(void)
{
  FlagStatus bitstatus = RESET;
    
  if ((SYSCFG->CMPCR & SYSCFG_CMPCR_READY ) != (uint32_t)RESET)
 8001f84:	4b02      	ldr	r3, [pc, #8]	; (8001f90 <SYSCFG_GetCompensationCellStatus+0xc>)
 8001f86:	6a18      	ldr	r0, [r3, #32]
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8001f88:	f3c0 2000 	ubfx	r0, r0, #8, #1
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	40013800 	.word	0x40013800

08001f94 <TI1_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8001f94:	b530      	push	{r4, r5, lr}
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8001f96:	8c04      	ldrh	r4, [r0, #32]
 8001f98:	f024 0401 	bic.w	r4, r4, #1
 8001f9c:	0424      	lsls	r4, r4, #16
 8001f9e:	0c24      	lsrs	r4, r4, #16
 8001fa0:	8404      	strh	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001fa2:	8b05      	ldrh	r5, [r0, #24]
  tmpccer = TIMx->CCER;
 8001fa4:	8c04      	ldrh	r4, [r0, #32]
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;
 8001fa6:	b2ad      	uxth	r5, r5
  tmpccer = TIMx->CCER;
 8001fa8:	b2a4      	uxth	r4, r4

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 8001faa:	f025 05f3 	bic.w	r5, r5, #243	; 0xf3
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8001fae:	4315      	orrs	r5, r2

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001fb0:	f024 040a 	bic.w	r4, r4, #10
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8001fb4:	ea45 1503 	orr.w	r5, r5, r3, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8001fb8:	f044 0401 	orr.w	r4, r4, #1
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8001fbc:	b2ad      	uxth	r5, r5

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8001fbe:	430c      	orrs	r4, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001fc0:	8305      	strh	r5, [r0, #24]
  TIMx->CCER = tmpccer;
 8001fc2:	8404      	strh	r4, [r0, #32]
}
 8001fc4:	bd30      	pop	{r4, r5, pc}

08001fc6 <TI2_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8001fc6:	b530      	push	{r4, r5, lr}
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8001fc8:	8c04      	ldrh	r4, [r0, #32]
 8001fca:	f024 0410 	bic.w	r4, r4, #16
 8001fce:	0424      	lsls	r4, r4, #16
 8001fd0:	0c24      	lsrs	r4, r4, #16
 8001fd2:	8404      	strh	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001fd4:	8b04      	ldrh	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8001fd6:	8c05      	ldrh	r5, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8001fd8:	f424 7440 	bic.w	r4, r4, #768	; 0x300
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
 8001fdc:	b2ad      	uxth	r5, r5
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8001fde:	0524      	lsls	r4, r4, #20
 8001fe0:	0d24      	lsrs	r4, r4, #20
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001fe2:	f025 05a0 	bic.w	r5, r5, #160	; 0xa0
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8001fe6:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8001fea:	f045 0510 	orr.w	r5, r5, #16
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8001fee:	ea44 3403 	orr.w	r4, r4, r3, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8001ff2:	ea45 1501 	orr.w	r5, r5, r1, lsl #4
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8001ff6:	b2a4      	uxth	r4, r4

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8001ff8:	b2ad      	uxth	r5, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001ffa:	8304      	strh	r4, [r0, #24]
  TIMx->CCER = tmpccer;
 8001ffc:	8405      	strh	r5, [r0, #32]
}
 8001ffe:	bd30      	pop	{r4, r5, pc}

08002000 <TIM_DeInit>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval None

  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 8002000:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
 8002002:	4b47      	ldr	r3, [pc, #284]	; (8002120 <TIM_DeInit+0x120>)
 8002004:	4298      	cmp	r0, r3
 8002006:	d105      	bne.n	8002014 <TIM_DeInit+0x14>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 8002008:	2001      	movs	r0, #1
 800200a:	4601      	mov	r1, r0
 800200c:	f7ff fd42 	bl	8001a94 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 8002010:	2001      	movs	r0, #1
 8002012:	e03d      	b.n	8002090 <TIM_DeInit+0x90>
  } 
  else if (TIMx == TIM2) 
 8002014:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002018:	d105      	bne.n	8002026 <TIM_DeInit+0x26>
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 800201a:	2001      	movs	r0, #1
 800201c:	4601      	mov	r1, r0
 800201e:	f7ff fd2d 	bl	8001a7c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 8002022:	2001      	movs	r0, #1
 8002024:	e076      	b.n	8002114 <TIM_DeInit+0x114>
  }  
  else if (TIMx == TIM3)
 8002026:	4b3f      	ldr	r3, [pc, #252]	; (8002124 <TIM_DeInit+0x124>)
 8002028:	4298      	cmp	r0, r3
 800202a:	d105      	bne.n	8002038 <TIM_DeInit+0x38>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 800202c:	2002      	movs	r0, #2
 800202e:	2101      	movs	r1, #1
 8002030:	f7ff fd24 	bl	8001a7c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 8002034:	2002      	movs	r0, #2
 8002036:	e06d      	b.n	8002114 <TIM_DeInit+0x114>
  }  
  else if (TIMx == TIM4)
 8002038:	4b3b      	ldr	r3, [pc, #236]	; (8002128 <TIM_DeInit+0x128>)
 800203a:	4298      	cmp	r0, r3
 800203c:	d105      	bne.n	800204a <TIM_DeInit+0x4a>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 800203e:	2004      	movs	r0, #4
 8002040:	2101      	movs	r1, #1
 8002042:	f7ff fd1b 	bl	8001a7c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 8002046:	2004      	movs	r0, #4
 8002048:	e064      	b.n	8002114 <TIM_DeInit+0x114>
  }  
  else if (TIMx == TIM5)
 800204a:	4b38      	ldr	r3, [pc, #224]	; (800212c <TIM_DeInit+0x12c>)
 800204c:	4298      	cmp	r0, r3
 800204e:	d105      	bne.n	800205c <TIM_DeInit+0x5c>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 8002050:	2008      	movs	r0, #8
 8002052:	2101      	movs	r1, #1
 8002054:	f7ff fd12 	bl	8001a7c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 8002058:	2008      	movs	r0, #8
 800205a:	e05b      	b.n	8002114 <TIM_DeInit+0x114>
  }  
  else if (TIMx == TIM6)  
 800205c:	4b34      	ldr	r3, [pc, #208]	; (8002130 <TIM_DeInit+0x130>)
 800205e:	4298      	cmp	r0, r3
 8002060:	d105      	bne.n	800206e <TIM_DeInit+0x6e>
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 8002062:	2010      	movs	r0, #16
 8002064:	2101      	movs	r1, #1
 8002066:	f7ff fd09 	bl	8001a7c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 800206a:	2010      	movs	r0, #16
 800206c:	e052      	b.n	8002114 <TIM_DeInit+0x114>
  }  
  else if (TIMx == TIM7)
 800206e:	4b31      	ldr	r3, [pc, #196]	; (8002134 <TIM_DeInit+0x134>)
 8002070:	4298      	cmp	r0, r3
 8002072:	d105      	bne.n	8002080 <TIM_DeInit+0x80>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 8002074:	2020      	movs	r0, #32
 8002076:	2101      	movs	r1, #1
 8002078:	f7ff fd00 	bl	8001a7c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 800207c:	2020      	movs	r0, #32
 800207e:	e049      	b.n	8002114 <TIM_DeInit+0x114>
  }  
  else if (TIMx == TIM8)
 8002080:	4b2d      	ldr	r3, [pc, #180]	; (8002138 <TIM_DeInit+0x138>)
 8002082:	4298      	cmp	r0, r3
 8002084:	d109      	bne.n	800209a <TIM_DeInit+0x9a>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 8002086:	2002      	movs	r0, #2
 8002088:	2101      	movs	r1, #1
 800208a:	f7ff fd03 	bl	8001a94 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 800208e:	2002      	movs	r0, #2
 8002090:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8002092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
  }  
  else if (TIMx == TIM8)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 8002096:	f7ff bcfd 	b.w	8001a94 <RCC_APB2PeriphResetCmd>
  }  
  else if (TIMx == TIM9)
 800209a:	4b28      	ldr	r3, [pc, #160]	; (800213c <TIM_DeInit+0x13c>)
 800209c:	4298      	cmp	r0, r3
 800209e:	d107      	bne.n	80020b0 <TIM_DeInit+0xb0>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
 80020a0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80020a4:	2101      	movs	r1, #1
 80020a6:	f7ff fcf5 	bl	8001a94 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 80020aa:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80020ae:	e7ef      	b.n	8002090 <TIM_DeInit+0x90>
   }  
  else if (TIMx == TIM10)
 80020b0:	4b23      	ldr	r3, [pc, #140]	; (8002140 <TIM_DeInit+0x140>)
 80020b2:	4298      	cmp	r0, r3
 80020b4:	d107      	bne.n	80020c6 <TIM_DeInit+0xc6>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
 80020b6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80020ba:	2101      	movs	r1, #1
 80020bc:	f7ff fcea 	bl	8001a94 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 80020c0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80020c4:	e7e4      	b.n	8002090 <TIM_DeInit+0x90>
  }  
  else if (TIMx == TIM11) 
 80020c6:	4b1f      	ldr	r3, [pc, #124]	; (8002144 <TIM_DeInit+0x144>)
 80020c8:	4298      	cmp	r0, r3
 80020ca:	d107      	bne.n	80020dc <TIM_DeInit+0xdc>
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
 80020cc:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80020d0:	2101      	movs	r1, #1
 80020d2:	f7ff fcdf 	bl	8001a94 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 80020d6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80020da:	e7d9      	b.n	8002090 <TIM_DeInit+0x90>
  }  
  else if (TIMx == TIM12)
 80020dc:	4b1a      	ldr	r3, [pc, #104]	; (8002148 <TIM_DeInit+0x148>)
 80020de:	4298      	cmp	r0, r3
 80020e0:	d105      	bne.n	80020ee <TIM_DeInit+0xee>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
 80020e2:	2040      	movs	r0, #64	; 0x40
 80020e4:	2101      	movs	r1, #1
 80020e6:	f7ff fcc9 	bl	8001a7c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 80020ea:	2040      	movs	r0, #64	; 0x40
 80020ec:	e012      	b.n	8002114 <TIM_DeInit+0x114>
  }  
  else if (TIMx == TIM13) 
 80020ee:	4b17      	ldr	r3, [pc, #92]	; (800214c <TIM_DeInit+0x14c>)
 80020f0:	4298      	cmp	r0, r3
 80020f2:	d105      	bne.n	8002100 <TIM_DeInit+0x100>
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
 80020f4:	2080      	movs	r0, #128	; 0x80
 80020f6:	2101      	movs	r1, #1
 80020f8:	f7ff fcc0 	bl	8001a7c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 80020fc:	2080      	movs	r0, #128	; 0x80
 80020fe:	e009      	b.n	8002114 <TIM_DeInit+0x114>
  }  
  else
  { 
    if (TIMx == TIM14) 
 8002100:	4b13      	ldr	r3, [pc, #76]	; (8002150 <TIM_DeInit+0x150>)
 8002102:	4298      	cmp	r0, r3
 8002104:	d10b      	bne.n	800211e <TIM_DeInit+0x11e>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 8002106:	f44f 7080 	mov.w	r0, #256	; 0x100
 800210a:	2101      	movs	r1, #1
 800210c:	f7ff fcb6 	bl	8001a7c <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 8002110:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002114:	2100      	movs	r1, #0
    }   
  }
}
 8002116:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  { 
    if (TIMx == TIM14) 
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 800211a:	f7ff bcaf 	b.w	8001a7c <RCC_APB1PeriphResetCmd>
 800211e:	bd08      	pop	{r3, pc}
 8002120:	40010000 	.word	0x40010000
 8002124:	40000400 	.word	0x40000400
 8002128:	40000800 	.word	0x40000800
 800212c:	40000c00 	.word	0x40000c00
 8002130:	40001000 	.word	0x40001000
 8002134:	40001400 	.word	0x40001400
 8002138:	40010400 	.word	0x40010400
 800213c:	40014000 	.word	0x40014000
 8002140:	40014400 	.word	0x40014400
 8002144:	40014800 	.word	0x40014800
 8002148:	40001800 	.word	0x40001800
 800214c:	40001c00 	.word	0x40001c00
 8002150:	40002000 	.word	0x40002000

08002154 <TIM_TimeBaseInit>:
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8002154:	4a1c      	ldr	r2, [pc, #112]	; (80021c8 <TIM_TimeBaseInit+0x74>)
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8002156:	8803      	ldrh	r3, [r0, #0]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8002158:	4290      	cmp	r0, r2
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 800215a:	b29b      	uxth	r3, r3

  if((TIMx == TIM1) || (TIMx == TIM8)||
 800215c:	d012      	beq.n	8002184 <TIM_TimeBaseInit+0x30>
 800215e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002162:	4290      	cmp	r0, r2
 8002164:	d00e      	beq.n	8002184 <TIM_TimeBaseInit+0x30>
 8002166:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800216a:	d00b      	beq.n	8002184 <TIM_TimeBaseInit+0x30>
     (TIMx == TIM2) || (TIMx == TIM3)||
 800216c:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 8002170:	4290      	cmp	r0, r2
 8002172:	d007      	beq.n	8002184 <TIM_TimeBaseInit+0x30>
 8002174:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002178:	4290      	cmp	r0, r2
 800217a:	d003      	beq.n	8002184 <TIM_TimeBaseInit+0x30>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 800217c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002180:	4290      	cmp	r0, r2
 8002182:	d103      	bne.n	800218c <TIM_TimeBaseInit+0x38>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8002184:	884a      	ldrh	r2, [r1, #2]
  if((TIMx == TIM1) || (TIMx == TIM8)||
     (TIMx == TIM2) || (TIMx == TIM3)||
     (TIMx == TIM4) || (TIMx == TIM5)) 
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8002186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 800218a:	4313      	orrs	r3, r2
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 800218c:	4a0f      	ldr	r2, [pc, #60]	; (80021cc <TIM_TimeBaseInit+0x78>)
 800218e:	4290      	cmp	r0, r2
 8002190:	d008      	beq.n	80021a4 <TIM_TimeBaseInit+0x50>
 8002192:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002196:	4290      	cmp	r0, r2
 8002198:	d004      	beq.n	80021a4 <TIM_TimeBaseInit+0x50>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 800219a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800219e:	890a      	ldrh	r2, [r1, #8]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 80021a0:	b29b      	uxth	r3, r3
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80021a2:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 80021a4:	8003      	strh	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80021a6:	684b      	ldr	r3, [r1, #4]
 80021a8:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80021aa:	880b      	ldrh	r3, [r1, #0]
 80021ac:	8503      	strh	r3, [r0, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 80021ae:	4b06      	ldr	r3, [pc, #24]	; (80021c8 <TIM_TimeBaseInit+0x74>)
 80021b0:	4298      	cmp	r0, r3
 80021b2:	d003      	beq.n	80021bc <TIM_TimeBaseInit+0x68>
 80021b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021b8:	4298      	cmp	r0, r3
 80021ba:	d101      	bne.n	80021c0 <TIM_TimeBaseInit+0x6c>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 80021bc:	7a8b      	ldrb	r3, [r1, #10]
 80021be:	8603      	strh	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 80021c0:	2301      	movs	r3, #1
 80021c2:	8283      	strh	r3, [r0, #20]
}
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	40010000 	.word	0x40010000
 80021cc:	40001000 	.word	0x40001000

080021d0 <TIM_TimeBaseStructInit>:
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 80021d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021d4:	6043      	str	r3, [r0, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 80021d6:	2300      	movs	r3, #0
 80021d8:	8003      	strh	r3, [r0, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 80021da:	8103      	strh	r3, [r0, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 80021dc:	8043      	strh	r3, [r0, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 80021de:	7283      	strb	r3, [r0, #10]
}
 80021e0:	4770      	bx	lr

080021e2 <TIM_PrescalerConfig>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
 80021e2:	8501      	strh	r1, [r0, #40]	; 0x28
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
 80021e4:	8282      	strh	r2, [r0, #20]
}
 80021e6:	4770      	bx	lr

080021e8 <TIM_CounterModeConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));

  tmpcr1 = TIMx->CR1;
 80021e8:	8803      	ldrh	r3, [r0, #0]

  /* Reset the CMS and DIR Bits */
  tmpcr1 &= (uint16_t)~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021ee:	041b      	lsls	r3, r3, #16
 80021f0:	0c1b      	lsrs	r3, r3, #16

  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
 80021f2:	430b      	orrs	r3, r1

  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
 80021f4:	8003      	strh	r3, [r0, #0]
}
 80021f6:	4770      	bx	lr

080021f8 <TIM_SetCounter>:
{
  /* Check the parameters */
   assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 80021f8:	6241      	str	r1, [r0, #36]	; 0x24
}
 80021fa:	4770      	bx	lr

080021fc <TIM_SetAutoreload>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 80021fc:	62c1      	str	r1, [r0, #44]	; 0x2c
}
 80021fe:	4770      	bx	lr

08002200 <TIM_GetCounter>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Counter Register value */
  return TIMx->CNT;
 8002200:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
 8002202:	4770      	bx	lr

08002204 <TIM_GetPrescaler>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Prescaler Register value */
  return TIMx->PSC;
 8002204:	8d00      	ldrh	r0, [r0, #40]	; 0x28
}
 8002206:	b280      	uxth	r0, r0
 8002208:	4770      	bx	lr

0800220a <TIM_UpdateDisableConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 800220a:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800220c:	b119      	cbz	r1, 8002216 <TIM_UpdateDisableConfig+0xc>
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 800220e:	b29b      	uxth	r3, r3
 8002210:	f043 0302 	orr.w	r3, r3, #2
 8002214:	e003      	b.n	800221e <TIM_UpdateDisableConfig+0x14>
  }
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_UDIS;
 8002216:	f023 0302 	bic.w	r3, r3, #2
 800221a:	041b      	lsls	r3, r3, #16
 800221c:	0c1b      	lsrs	r3, r3, #16
 800221e:	8003      	strh	r3, [r0, #0]
 8002220:	4770      	bx	lr

08002222 <TIM_UpdateRequestConfig>:
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 8002222:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
 8002224:	b119      	cbz	r1, 800222e <TIM_UpdateRequestConfig+0xc>
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 8002226:	b29b      	uxth	r3, r3
 8002228:	f043 0304 	orr.w	r3, r3, #4
 800222c:	e003      	b.n	8002236 <TIM_UpdateRequestConfig+0x14>
  }
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_URS;
 800222e:	f023 0304 	bic.w	r3, r3, #4
 8002232:	041b      	lsls	r3, r3, #16
 8002234:	0c1b      	lsrs	r3, r3, #16
 8002236:	8003      	strh	r3, [r0, #0]
 8002238:	4770      	bx	lr

0800223a <TIM_ARRPreloadConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 800223a:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800223c:	b119      	cbz	r1, 8002246 <TIM_ARRPreloadConfig+0xc>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 800223e:	b29b      	uxth	r3, r3
 8002240:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002244:	e003      	b.n	800224e <TIM_ARRPreloadConfig+0x14>
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 8002246:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800224a:	041b      	lsls	r3, r3, #16
 800224c:	0c1b      	lsrs	r3, r3, #16
 800224e:	8003      	strh	r3, [r0, #0]
 8002250:	4770      	bx	lr

08002252 <TIM_SelectOnePulseMode>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));

  /* Reset the OPM Bit */
  TIMx->CR1 &= (uint16_t)~TIM_CR1_OPM;
 8002252:	8803      	ldrh	r3, [r0, #0]
 8002254:	f023 0308 	bic.w	r3, r3, #8
 8002258:	041b      	lsls	r3, r3, #16
 800225a:	0c1b      	lsrs	r3, r3, #16
 800225c:	8003      	strh	r3, [r0, #0]

  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
 800225e:	8803      	ldrh	r3, [r0, #0]
 8002260:	b29b      	uxth	r3, r3
 8002262:	430b      	orrs	r3, r1
 8002264:	8003      	strh	r3, [r0, #0]
}
 8002266:	4770      	bx	lr

08002268 <TIM_SetClockDivision>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));

  /* Reset the CKD Bits */
  TIMx->CR1 &= (uint16_t)(~TIM_CR1_CKD);
 8002268:	8803      	ldrh	r3, [r0, #0]
 800226a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800226e:	041b      	lsls	r3, r3, #16
 8002270:	0c1b      	lsrs	r3, r3, #16
 8002272:	8003      	strh	r3, [r0, #0]

  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
 8002274:	8803      	ldrh	r3, [r0, #0]
 8002276:	b29b      	uxth	r3, r3
 8002278:	430b      	orrs	r3, r1
 800227a:	8003      	strh	r3, [r0, #0]
}
 800227c:	4770      	bx	lr

0800227e <TIM_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 800227e:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002280:	b119      	cbz	r1, 800228a <TIM_Cmd+0xc>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8002282:	b29b      	uxth	r3, r3
 8002284:	f043 0301 	orr.w	r3, r3, #1
 8002288:	e003      	b.n	8002292 <TIM_Cmd+0x14>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 800228a:	f023 0301 	bic.w	r3, r3, #1
 800228e:	041b      	lsls	r3, r3, #16
 8002290:	0c1b      	lsrs	r3, r3, #16
 8002292:	8003      	strh	r3, [r0, #0]
 8002294:	4770      	bx	lr

08002296 <TIM_OC1Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8002296:	8c03      	ldrh	r3, [r0, #32]
 8002298:	f023 0301 	bic.w	r3, r3, #1
 800229c:	041b      	lsls	r3, r3, #16
 800229e:	0c1b      	lsrs	r3, r3, #16
 80022a0:	8403      	strh	r3, [r0, #32]
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80022a2:	b570      	push	{r4, r5, r6, lr}

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022a4:	8c03      	ldrh	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022a6:	8884      	ldrh	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80022a8:	8b02      	ldrh	r2, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80022aa:	880d      	ldrh	r5, [r1, #0]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 80022ac:	884e      	ldrh	r6, [r1, #2]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 80022ae:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 80022b2:	0412      	lsls	r2, r2, #16
 80022b4:	0c12      	lsrs	r2, r2, #16
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80022b6:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 80022b8:	898d      	ldrh	r5, [r1, #12]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 80022ba:	f023 0302 	bic.w	r3, r3, #2
 80022be:	041b      	lsls	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 80022c0:	4335      	orrs	r5, r6
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 80022c2:	0c1b      	lsrs	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 80022c4:	b2ad      	uxth	r5, r5
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 80022c6:	432b      	orrs	r3, r5
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80022c8:	4d0e      	ldr	r5, [pc, #56]	; (8002304 <TIM_OC1Init+0x6e>)
 80022ca:	42a8      	cmp	r0, r5
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022cc:	b2a4      	uxth	r4, r4
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80022ce:	d003      	beq.n	80022d8 <TIM_OC1Init+0x42>
 80022d0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80022d4:	42a8      	cmp	r0, r5
 80022d6:	d10e      	bne.n	80022f6 <TIM_OC1Init+0x60>
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 80022d8:	89cd      	ldrh	r5, [r1, #14]
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 80022da:	8a4e      	ldrh	r6, [r1, #18]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 80022dc:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 80022e0:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 80022e2:	888d      	ldrh	r5, [r1, #4]
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 80022e4:	f023 0304 	bic.w	r3, r3, #4
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 80022e8:	432b      	orrs	r3, r5
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 80022ea:	8a0d      	ldrh	r5, [r1, #16]
 80022ec:	4335      	orrs	r5, r6
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 80022ee:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 80022f2:	b2ad      	uxth	r5, r5
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 80022f4:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022f6:	8084      	strh	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80022f8:	8302      	strh	r2, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 80022fa:	688a      	ldr	r2, [r1, #8]
 80022fc:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022fe:	8403      	strh	r3, [r0, #32]
}
 8002300:	bd70      	pop	{r4, r5, r6, pc}
 8002302:	bf00      	nop
 8002304:	40010000 	.word	0x40010000

08002308 <TIM_OC2Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8002308:	8c03      	ldrh	r3, [r0, #32]
 800230a:	f023 0310 	bic.w	r3, r3, #16
 800230e:	041b      	lsls	r3, r3, #16
 8002310:	0c1b      	lsrs	r3, r3, #16
 8002312:	8403      	strh	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8002314:	8c03      	ldrh	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002316:	8882      	ldrh	r2, [r0, #4]
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8002318:	b530      	push	{r4, r5, lr}
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800231a:	8b04      	ldrh	r4, [r0, #24]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 800231c:	880d      	ldrh	r5, [r1, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 800231e:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
 8002322:	0424      	lsls	r4, r4, #16
 8002324:	0c24      	lsrs	r4, r4, #16
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 8002326:	f023 0320 	bic.w	r3, r3, #32
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 800232a:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 800232e:	041b      	lsls	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 8002330:	898d      	ldrh	r5, [r1, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 8002332:	0c1b      	lsrs	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 8002334:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8002338:	884d      	ldrh	r5, [r1, #2]
 800233a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800233e:	4d13      	ldr	r5, [pc, #76]	; (800238c <TIM_OC2Init+0x84>)
 8002340:	42a8      	cmp	r0, r5
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002342:	b292      	uxth	r2, r2
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8002344:	b2a4      	uxth	r4, r4
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8002346:	b29b      	uxth	r3, r3
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002348:	d003      	beq.n	8002352 <TIM_OC2Init+0x4a>
 800234a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800234e:	42a8      	cmp	r0, r5
 8002350:	d115      	bne.n	800237e <TIM_OC2Init+0x76>
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 8002352:	89cd      	ldrh	r5, [r1, #14]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 8002354:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002358:	b29b      	uxth	r3, r3
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 800235a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
 800235e:	f64f 75bf 	movw	r5, #65471	; 0xffbf
 8002362:	401d      	ands	r5, r3
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8002364:	888b      	ldrh	r3, [r1, #4]
 8002366:	ea45 1303 	orr.w	r3, r5, r3, lsl #4
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 800236a:	8a0d      	ldrh	r5, [r1, #16]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
 800236c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 8002370:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8002374:	8a4d      	ldrh	r5, [r1, #18]
 8002376:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 800237a:	b29b      	uxth	r3, r3
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 800237c:	b292      	uxth	r2, r2
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800237e:	8082      	strh	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8002380:	688a      	ldr	r2, [r1, #8]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002382:	8304      	strh	r4, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8002384:	6382      	str	r2, [r0, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002386:	8403      	strh	r3, [r0, #32]
}
 8002388:	bd30      	pop	{r4, r5, pc}
 800238a:	bf00      	nop
 800238c:	40010000 	.word	0x40010000

08002390 <TIM_OC3Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8002390:	8c03      	ldrh	r3, [r0, #32]
 8002392:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002396:	041b      	lsls	r3, r3, #16
 8002398:	0c1b      	lsrs	r3, r3, #16
 800239a:	8403      	strh	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800239c:	8c03      	ldrh	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800239e:	8882      	ldrh	r2, [r0, #4]
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80023a0:	b530      	push	{r4, r5, lr}
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80023a2:	8b84      	ldrh	r4, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80023a4:	880d      	ldrh	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 80023a6:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 80023aa:	0424      	lsls	r4, r4, #16
 80023ac:	0c24      	lsrs	r4, r4, #16
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 80023ae:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80023b2:	041b      	lsls	r3, r3, #16
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80023b4:	432c      	orrs	r4, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 80023b6:	898d      	ldrh	r5, [r1, #12]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 80023b8:	0c1b      	lsrs	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 80023ba:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 80023be:	884d      	ldrh	r5, [r1, #2]
 80023c0:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80023c4:	4d12      	ldr	r5, [pc, #72]	; (8002410 <TIM_OC3Init+0x80>)
 80023c6:	42a8      	cmp	r0, r5
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023c8:	b292      	uxth	r2, r2
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 80023ca:	b29b      	uxth	r3, r3
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80023cc:	d003      	beq.n	80023d6 <TIM_OC3Init+0x46>
 80023ce:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80023d2:	42a8      	cmp	r0, r5
 80023d4:	d115      	bne.n	8002402 <TIM_OC3Init+0x72>
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 80023d6:	89cd      	ldrh	r5, [r1, #14]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 80023d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80023dc:	b29b      	uxth	r3, r3
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 80023de:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 80023e2:	f64f 35ff 	movw	r5, #64511	; 0xfbff
 80023e6:	401d      	ands	r5, r3
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 80023e8:	888b      	ldrh	r3, [r1, #4]
 80023ea:	ea45 2303 	orr.w	r3, r5, r3, lsl #8
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 80023ee:	8a0d      	ldrh	r5, [r1, #16]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 80023f0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 80023f4:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 80023f8:	8a4d      	ldrh	r5, [r1, #18]
 80023fa:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 80023fe:	b29b      	uxth	r3, r3
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8002400:	b292      	uxth	r2, r2
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002402:	8082      	strh	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8002404:	688a      	ldr	r2, [r1, #8]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002406:	8384      	strh	r4, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8002408:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800240a:	8403      	strh	r3, [r0, #32]
}
 800240c:	bd30      	pop	{r4, r5, pc}
 800240e:	bf00      	nop
 8002410:	40010000 	.word	0x40010000

08002414 <TIM_OC4Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8002414:	8c03      	ldrh	r3, [r0, #32]
 8002416:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800241a:	041b      	lsls	r3, r3, #16
 800241c:	0c1b      	lsrs	r3, r3, #16
 800241e:	8403      	strh	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002420:	8c03      	ldrh	r3, [r0, #32]
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8002422:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002424:	8884      	ldrh	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002426:	8b82      	ldrh	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8002428:	880d      	ldrh	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 800242a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 800242e:	0412      	lsls	r2, r2, #16
 8002430:	0c12      	lsrs	r2, r2, #16
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 8002432:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8002436:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 800243a:	041b      	lsls	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 800243c:	898d      	ldrh	r5, [r1, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 800243e:	0c1b      	lsrs	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8002440:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8002444:	884d      	ldrh	r5, [r1, #2]
 8002446:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 800244a:	4d0b      	ldr	r5, [pc, #44]	; (8002478 <TIM_OC4Init+0x64>)
 800244c:	42a8      	cmp	r0, r5
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800244e:	b2a4      	uxth	r4, r4
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8002450:	b292      	uxth	r2, r2
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8002452:	b29b      	uxth	r3, r3
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002454:	d003      	beq.n	800245e <TIM_OC4Init+0x4a>
 8002456:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800245a:	42a8      	cmp	r0, r5
 800245c:	d105      	bne.n	800246a <TIM_OC4Init+0x56>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 800245e:	8a0d      	ldrh	r5, [r1, #16]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 8002460:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8002464:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8002468:	b2a4      	uxth	r4, r4
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800246a:	8084      	strh	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 800246c:	8382      	strh	r2, [r0, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 800246e:	688a      	ldr	r2, [r1, #8]
 8002470:	6402      	str	r2, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002472:	8403      	strh	r3, [r0, #32]
}
 8002474:	bd30      	pop	{r4, r5, pc}
 8002476:	bf00      	nop
 8002478:	40010000 	.word	0x40010000

0800247c <TIM_OCStructInit>:
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 800247c:	2300      	movs	r3, #0
 800247e:	8003      	strh	r3, [r0, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 8002480:	8043      	strh	r3, [r0, #2]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 8002482:	8083      	strh	r3, [r0, #4]
  TIM_OCInitStruct->TIM_Pulse = 0x00000000;
 8002484:	6083      	str	r3, [r0, #8]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 8002486:	8183      	strh	r3, [r0, #12]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 8002488:	81c3      	strh	r3, [r0, #14]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 800248a:	8203      	strh	r3, [r0, #16]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 800248c:	8243      	strh	r3, [r0, #18]
}
 800248e:	4770      	bx	lr

08002490 <TIM_SelectOCxM>:
  *            @arg TIM_ForcedAction_Active
  *            @arg TIM_ForcedAction_InActive
  * @retval None
  */
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
{
 8002490:	b530      	push	{r4, r5, lr}
  tmp += CCMR_OFFSET;

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 8002492:	8c05      	ldrh	r5, [r0, #32]
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
  tmp += CCMR_OFFSET;

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;
 8002494:	2401      	movs	r4, #1

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 8002496:	b2ad      	uxth	r5, r5
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
  tmp += CCMR_OFFSET;

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;
 8002498:	408c      	lsls	r4, r1

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 800249a:	ea25 0404 	bic.w	r4, r5, r4
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
  tmp += CCMR_OFFSET;
 800249e:	f100 0318 	add.w	r3, r0, #24

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 80024a2:	8404      	strh	r4, [r0, #32]

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 80024a4:	b109      	cbz	r1, 80024aa <TIM_SelectOCxM+0x1a>
 80024a6:	2908      	cmp	r1, #8
 80024a8:	d107      	bne.n	80024ba <TIM_SelectOCxM+0x2a>
  {
    tmp += (TIM_Channel>>1);
 80024aa:	0849      	lsrs	r1, r1, #1

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC13M_MASK;
 80024ac:	f64f 708f 	movw	r0, #65423	; 0xff8f
 80024b0:	58cc      	ldr	r4, [r1, r3]
 80024b2:	4020      	ands	r0, r4
 80024b4:	50c8      	str	r0, [r1, r3]
   
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
 80024b6:	58c8      	ldr	r0, [r1, r3]
 80024b8:	e00a      	b.n	80024d0 <TIM_SelectOCxM+0x40>
  }
  else
  {
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
 80024ba:	3904      	subs	r1, #4
 80024bc:	f3c1 014e 	ubfx	r1, r1, #1, #15

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC24M_MASK;
 80024c0:	f648 70ff 	movw	r0, #36863	; 0x8fff
 80024c4:	58cc      	ldr	r4, [r1, r3]
 80024c6:	4020      	ands	r0, r4
 80024c8:	50c8      	str	r0, [r1, r3]
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 80024ca:	0212      	lsls	r2, r2, #8
 80024cc:	58c8      	ldr	r0, [r1, r3]
 80024ce:	b292      	uxth	r2, r2
 80024d0:	4302      	orrs	r2, r0
 80024d2:	50ca      	str	r2, [r1, r3]
 80024d4:	bd30      	pop	{r4, r5, pc}

080024d6 <TIM_SetCompare1>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 80024d6:	6341      	str	r1, [r0, #52]	; 0x34
}
 80024d8:	4770      	bx	lr

080024da <TIM_SetCompare2>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 80024da:	6381      	str	r1, [r0, #56]	; 0x38
}
 80024dc:	4770      	bx	lr

080024de <TIM_SetCompare3>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 80024de:	63c1      	str	r1, [r0, #60]	; 0x3c
}
 80024e0:	4770      	bx	lr

080024e2 <TIM_SetCompare4>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
 80024e2:	6401      	str	r1, [r0, #64]	; 0x40
}
 80024e4:	4770      	bx	lr

080024e6 <TIM_ForcedOC1Config>:
  uint16_t tmpccmr1 = 0;

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 80024e6:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1M;
 80024e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024ec:	041b      	lsls	r3, r3, #16
 80024ee:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
 80024f0:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80024f2:	8303      	strh	r3, [r0, #24]
}
 80024f4:	4770      	bx	lr

080024f6 <TIM_ForcedOC2Config>:
  uint16_t tmpccmr1 = 0;

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 80024f6:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2M;
 80024f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024fc:	041b      	lsls	r3, r3, #16
 80024fe:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
 8002500:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002504:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8002506:	8303      	strh	r3, [r0, #24]
}
 8002508:	4770      	bx	lr

0800250a <TIM_ForcedOC3Config>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));

  tmpccmr2 = TIMx->CCMR2;
 800250a:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC1M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3M;
 800250c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002510:	041b      	lsls	r3, r3, #16
 8002512:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
 8002514:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8002516:	8383      	strh	r3, [r0, #28]
}
 8002518:	4770      	bx	lr

0800251a <TIM_ForcedOC4Config>:
  uint16_t tmpccmr2 = 0;

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
 800251a:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC2M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4M;
 800251c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002520:	041b      	lsls	r3, r3, #16
 8002522:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
 8002524:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002528:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800252a:	8383      	strh	r3, [r0, #28]
}
 800252c:	4770      	bx	lr

0800252e <TIM_OC1PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 800252e:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC1PE);
 8002530:	f023 0308 	bic.w	r3, r3, #8
 8002534:	041b      	lsls	r3, r3, #16
 8002536:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 8002538:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800253a:	8303      	strh	r3, [r0, #24]
}
 800253c:	4770      	bx	lr

0800253e <TIM_OC2PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 800253e:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2PE);
 8002540:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002544:	041b      	lsls	r3, r3, #16
 8002546:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 8002548:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800254c:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800254e:	8303      	strh	r3, [r0, #24]
}
 8002550:	4770      	bx	lr

08002552 <TIM_OC3PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8002552:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 8002554:	f023 0308 	bic.w	r3, r3, #8
 8002558:	041b      	lsls	r3, r3, #16
 800255a:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 800255c:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800255e:	8383      	strh	r3, [r0, #28]
}
 8002560:	4770      	bx	lr

08002562 <TIM_OC4PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8002562:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
 8002564:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002568:	041b      	lsls	r3, r3, #16
 800256a:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 800256c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002570:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8002572:	8383      	strh	r3, [r0, #28]
}
 8002574:	4770      	bx	lr

08002576 <TIM_OC1FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8002576:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1FE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1FE;
 8002578:	f023 0304 	bic.w	r3, r3, #4
 800257c:	041b      	lsls	r3, r3, #16
 800257e:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
 8002580:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8002582:	8303      	strh	r3, [r0, #24]
}
 8002584:	4770      	bx	lr

08002586 <TIM_OC2FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8002586:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2FE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2FE);
 8002588:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800258c:	041b      	lsls	r3, r3, #16
 800258e:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
 8002590:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002594:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8002596:	8303      	strh	r3, [r0, #24]
}
 8002598:	4770      	bx	lr

0800259a <TIM_OC3FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 800259a:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC3FE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3FE;
 800259c:	f023 0304 	bic.w	r3, r3, #4
 80025a0:	041b      	lsls	r3, r3, #16
 80025a2:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
 80025a4:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 80025a6:	8383      	strh	r3, [r0, #28]
}
 80025a8:	4770      	bx	lr

080025aa <TIM_OC4FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 80025aa:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC4FE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4FE);
 80025ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80025b0:	041b      	lsls	r3, r3, #16
 80025b2:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
 80025b4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80025b8:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 80025ba:	8383      	strh	r3, [r0, #28]
}
 80025bc:	4770      	bx	lr

080025be <TIM_ClearOC1Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 80025be:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1CE;
 80025c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025c4:	041b      	lsls	r3, r3, #16
 80025c6:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
 80025c8:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80025ca:	8303      	strh	r3, [r0, #24]
}
 80025cc:	4770      	bx	lr

080025ce <TIM_ClearOC2Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 80025ce:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2CE;

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
 80025d0:	0209      	lsls	r1, r1, #8
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;

  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2CE;
 80025d2:	045b      	lsls	r3, r3, #17

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
 80025d4:	ea41 4353 	orr.w	r3, r1, r3, lsr #17
 80025d8:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80025da:	8303      	strh	r3, [r0, #24]
}
 80025dc:	4770      	bx	lr

080025de <TIM_ClearOC3Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 80025de:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC3CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3CE;
 80025e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025e4:	041b      	lsls	r3, r3, #16
 80025e6:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
 80025e8:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80025ea:	8383      	strh	r3, [r0, #28]
}
 80025ec:	4770      	bx	lr

080025ee <TIM_ClearOC4Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 80025ee:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4CE;

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
 80025f0:	0209      	lsls	r1, r1, #8
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;

  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4CE;
 80025f2:	045b      	lsls	r3, r3, #17

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
 80025f4:	ea41 4353 	orr.w	r3, r1, r3, lsr #17
 80025f8:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80025fa:	8383      	strh	r3, [r0, #28]
}
 80025fc:	4770      	bx	lr

080025fe <TIM_OC1PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 80025fe:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC1P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC1P);
 8002600:	f023 0302 	bic.w	r3, r3, #2
 8002604:	041b      	lsls	r3, r3, #16
 8002606:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= TIM_OCPolarity;
 8002608:	430b      	orrs	r3, r1

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800260a:	8403      	strh	r3, [r0, #32]
}
 800260c:	4770      	bx	lr

0800260e <TIM_OC1NPolarityConfig>:
  uint16_t tmpccer = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
 800260e:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC1NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 8002610:	f023 0308 	bic.w	r3, r3, #8
 8002614:	041b      	lsls	r3, r3, #16
 8002616:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= TIM_OCNPolarity;
 8002618:	430b      	orrs	r3, r1

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800261a:	8403      	strh	r3, [r0, #32]
}
 800261c:	4770      	bx	lr

0800261e <TIM_OC2PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 800261e:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC2P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC2P);
 8002620:	f023 0320 	bic.w	r3, r3, #32
 8002624:	041b      	lsls	r3, r3, #16
 8002626:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
 8002628:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 800262c:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800262e:	8403      	strh	r3, [r0, #32]
}
 8002630:	4770      	bx	lr

08002632 <TIM_OC2NPolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
 8002632:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC2NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 8002634:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002638:	041b      	lsls	r3, r3, #16
 800263a:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
 800263c:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8002640:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8002642:	8403      	strh	r3, [r0, #32]
}
 8002644:	4770      	bx	lr

08002646 <TIM_OC3PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8002646:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC3P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 8002648:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800264c:	041b      	lsls	r3, r3, #16
 800264e:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
 8002650:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002654:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8002656:	8403      	strh	r3, [r0, #32]
}
 8002658:	4770      	bx	lr

0800265a <TIM_OC3NPolarityConfig>:
 
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
 800265a:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC3NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 800265c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002660:	041b      	lsls	r3, r3, #16
 8002662:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
 8002664:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002668:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800266a:	8403      	strh	r3, [r0, #32]
}
 800266c:	4770      	bx	lr

0800266e <TIM_OC4PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 800266e:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC4P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 8002670:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002674:	041b      	lsls	r3, r3, #16
 8002676:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
 8002678:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 800267c:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800267e:	8403      	strh	r3, [r0, #32]
}
 8002680:	4770      	bx	lr

08002682 <TIM_CCxCmd>:
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
 8002682:	b510      	push	{r4, lr}
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 8002684:	8c04      	ldrh	r4, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;
 8002686:	2301      	movs	r3, #1
 8002688:	408b      	lsls	r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 800268a:	b2a4      	uxth	r4, r4
 800268c:	ea24 0303 	bic.w	r3, r4, r3
 8002690:	8403      	strh	r3, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
 8002692:	8c03      	ldrh	r3, [r0, #32]
 8002694:	fa12 f101 	lsls.w	r1, r2, r1
 8002698:	430b      	orrs	r3, r1
 800269a:	b29b      	uxth	r3, r3
 800269c:	8403      	strh	r3, [r0, #32]
}
 800269e:	bd10      	pop	{r4, pc}

080026a0 <TIM_CCxNCmd>:
  * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
  * @retval None
  */
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
{
 80026a0:	b510      	push	{r4, lr}
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_SET << TIM_Channel;

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 80026a2:	8c04      	ldrh	r4, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_SET << TIM_Channel;
 80026a4:	2304      	movs	r3, #4
 80026a6:	408b      	lsls	r3, r1

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 80026a8:	b2a4      	uxth	r4, r4
 80026aa:	ea24 0303 	bic.w	r3, r4, r3
 80026ae:	8403      	strh	r3, [r0, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
 80026b0:	8c03      	ldrh	r3, [r0, #32]
 80026b2:	fa12 f101 	lsls.w	r1, r2, r1
 80026b6:	430b      	orrs	r3, r1
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	8403      	strh	r3, [r0, #32]
}
 80026bc:	bd10      	pop	{r4, pc}

080026be <TIM_ICStructInit>:
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 80026be:	2300      	movs	r3, #0
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 80026c0:	2201      	movs	r2, #1
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 80026c2:	8003      	strh	r3, [r0, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 80026c4:	8043      	strh	r3, [r0, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 80026c6:	8082      	strh	r2, [r0, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 80026c8:	80c3      	strh	r3, [r0, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
 80026ca:	8103      	strh	r3, [r0, #8]
}
 80026cc:	4770      	bx	lr

080026ce <TIM_GetCapture1>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 80026ce:	6b40      	ldr	r0, [r0, #52]	; 0x34
}
 80026d0:	4770      	bx	lr

080026d2 <TIM_GetCapture2>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 80026d2:	6b80      	ldr	r0, [r0, #56]	; 0x38
}
 80026d4:	4770      	bx	lr

080026d6 <TIM_GetCapture3>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 

  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
 80026d6:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
}
 80026d8:	4770      	bx	lr

080026da <TIM_GetCapture4>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
 80026da:	6c00      	ldr	r0, [r0, #64]	; 0x40
}
 80026dc:	4770      	bx	lr

080026de <TIM_SetIC1Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
 80026de:	8b03      	ldrh	r3, [r0, #24]
 80026e0:	f023 030c 	bic.w	r3, r3, #12
 80026e4:	041b      	lsls	r3, r3, #16
 80026e6:	0c1b      	lsrs	r3, r3, #16
 80026e8:	8303      	strh	r3, [r0, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 80026ea:	8b03      	ldrh	r3, [r0, #24]
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	430b      	orrs	r3, r1
 80026f0:	8303      	strh	r3, [r0, #24]
}
 80026f2:	4770      	bx	lr

080026f4 <TIM_SetIC2Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
 80026f4:	8b03      	ldrh	r3, [r0, #24]
 80026f6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80026fa:	041b      	lsls	r3, r3, #16
 80026fc:	0c1b      	lsrs	r3, r3, #16
 80026fe:	8303      	strh	r3, [r0, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8002700:	8b03      	ldrh	r3, [r0, #24]
 8002702:	b29b      	uxth	r3, r3
 8002704:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002708:	b29b      	uxth	r3, r3
 800270a:	8303      	strh	r3, [r0, #24]
}
 800270c:	4770      	bx	lr

0800270e <TIM_PWMIConfig>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 800270e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002710:	460c      	mov	r4, r1

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 8002712:	8849      	ldrh	r1, [r1, #2]
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 8002714:	88a2      	ldrh	r2, [r4, #4]
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8002716:	f8b4 e000 	ldrh.w	lr, [r4]
 800271a:	8923      	ldrh	r3, [r4, #8]
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 800271c:	4605      	mov	r5, r0
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
 800271e:	2900      	cmp	r1, #0
 8002720:	bf0c      	ite	eq
 8002722:	2702      	moveq	r7, #2
 8002724:	2700      	movne	r7, #0
    icoppositepolarity = TIM_ICPolarity_Rising;
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
 8002726:	2a01      	cmp	r2, #1
 8002728:	bf14      	ite	ne
 800272a:	2601      	movne	r6, #1
 800272c:	2602      	moveq	r6, #2
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 800272e:	f1be 0f00 	cmp.w	lr, #0
 8002732:	d110      	bne.n	8002756 <TIM_PWMIConfig+0x48>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 8002734:	f7ff fc2e 	bl	8001f94 <TI1_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002738:	4628      	mov	r0, r5
 800273a:	88e1      	ldrh	r1, [r4, #6]
 800273c:	f7ff ffcf 	bl	80026de <TIM_SetIC1Prescaler>
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 8002740:	4628      	mov	r0, r5
 8002742:	4639      	mov	r1, r7
 8002744:	4632      	mov	r2, r6
 8002746:	8923      	ldrh	r3, [r4, #8]
 8002748:	f7ff fc3d 	bl	8001fc6 <TI2_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800274c:	88e1      	ldrh	r1, [r4, #6]
 800274e:	4628      	mov	r0, r5
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8002750:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002754:	e7ce      	b.n	80026f4 <TIM_SetIC2Prescaler>
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 8002756:	f7ff fc36 	bl	8001fc6 <TI2_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800275a:	4628      	mov	r0, r5
 800275c:	88e1      	ldrh	r1, [r4, #6]
 800275e:	f7ff ffc9 	bl	80026f4 <TIM_SetIC2Prescaler>
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 8002762:	4628      	mov	r0, r5
 8002764:	4639      	mov	r1, r7
 8002766:	4632      	mov	r2, r6
 8002768:	8923      	ldrh	r3, [r4, #8]
 800276a:	f7ff fc13 	bl	8001f94 <TI1_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800276e:	88e1      	ldrh	r1, [r4, #6]
 8002770:	4628      	mov	r0, r5
  }
}
 8002772:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002776:	e7b2      	b.n	80026de <TIM_SetIC1Prescaler>

08002778 <TIM_SetIC3Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC3PSC;
 8002778:	8b83      	ldrh	r3, [r0, #28]
 800277a:	f023 030c 	bic.w	r3, r3, #12
 800277e:	041b      	lsls	r3, r3, #16
 8002780:	0c1b      	lsrs	r3, r3, #16
 8002782:	8383      	strh	r3, [r0, #28]

  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 8002784:	8b83      	ldrh	r3, [r0, #28]
 8002786:	b29b      	uxth	r3, r3
 8002788:	430b      	orrs	r3, r1
 800278a:	8383      	strh	r3, [r0, #28]
}
 800278c:	4770      	bx	lr

0800278e <TIM_SetIC4Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC4PSC;
 800278e:	8b83      	ldrh	r3, [r0, #28]
 8002790:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002794:	041b      	lsls	r3, r3, #16
 8002796:	0c1b      	lsrs	r3, r3, #16
 8002798:	8383      	strh	r3, [r0, #28]

  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 800279a:	8b83      	ldrh	r3, [r0, #28]
 800279c:	b29b      	uxth	r3, r3
 800279e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	8383      	strh	r3, [r0, #28]
}
 80027a6:	4770      	bx	lr

080027a8 <TIM_ICInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 80027a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027aa:	460d      	mov	r5, r1
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 80027ac:	880b      	ldrh	r3, [r1, #0]
 80027ae:	88aa      	ldrh	r2, [r5, #4]
 80027b0:	8849      	ldrh	r1, [r1, #2]
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 80027b2:	4604      	mov	r4, r0
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 80027b4:	b93b      	cbnz	r3, 80027c6 <TIM_ICInit+0x1e>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 80027b6:	892b      	ldrh	r3, [r5, #8]
 80027b8:	f7ff fbec 	bl	8001f94 <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80027bc:	88e9      	ldrh	r1, [r5, #6]
 80027be:	4620      	mov	r0, r4
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 80027c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80027c4:	e78b      	b.n	80026de <TIM_SetIC1Prescaler>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 80027c6:	2b04      	cmp	r3, #4
 80027c8:	d107      	bne.n	80027da <TIM_ICInit+0x32>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_LIST2_PERIPH(TIMx));
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 80027ca:	892b      	ldrh	r3, [r5, #8]
 80027cc:	f7ff fbfb 	bl	8001fc6 <TI2_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80027d0:	88e9      	ldrh	r1, [r5, #6]
 80027d2:	4620      	mov	r0, r4
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 80027d4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    assert_param(IS_TIM_LIST2_PERIPH(TIMx));
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80027d8:	e78c      	b.n	80026f4 <TIM_SetIC2Prescaler>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 80027da:	2b08      	cmp	r3, #8
 80027dc:	f8b5 c008 	ldrh.w	ip, [r5, #8]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 80027e0:	8c07      	ldrh	r7, [r0, #32]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 80027e2:	d11d      	bne.n	8002820 <TIM_ICInit+0x78>
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 80027e4:	f427 7780 	bic.w	r7, r7, #256	; 0x100
 80027e8:	043f      	lsls	r7, r7, #16
 80027ea:	0c3f      	lsrs	r7, r7, #16
 80027ec:	8407      	strh	r7, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 80027ee:	8b86      	ldrh	r6, [r0, #28]
  tmpccer = TIMx->CCER;
 80027f0:	8c03      	ldrh	r3, [r0, #32]
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
  tmpccmr2 = TIMx->CCMR2;
 80027f2:	b2b6      	uxth	r6, r6
  tmpccer = TIMx->CCER;
 80027f4:	b29b      	uxth	r3, r3
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
 80027f6:	f026 06f3 	bic.w	r6, r6, #243	; 0xf3
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80027fa:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 80027fe:	ea46 1c0c 	orr.w	ip, r6, ip, lsl #4

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 8002802:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002806:	fa1f fc8c 	uxth.w	ip, ip

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 800280a:	b289      	uxth	r1, r1
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 800280c:	ea4c 0202 	orr.w	r2, ip, r2

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 8002810:	f441 7180 	orr.w	r1, r1, #256	; 0x100

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002814:	8382      	strh	r2, [r0, #28]
  TIMx->CCER = tmpccer;
 8002816:	8401      	strh	r1, [r0, #32]
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002818:	88e9      	ldrh	r1, [r5, #6]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 800281a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800281e:	e7ab      	b.n	8002778 <TIM_SetIC3Prescaler>
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8002820:	f427 5780 	bic.w	r7, r7, #4096	; 0x1000
 8002824:	043f      	lsls	r7, r7, #16
 8002826:	0c3f      	lsrs	r7, r7, #16
 8002828:	8407      	strh	r7, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 800282a:	8b86      	ldrh	r6, [r0, #28]
  tmpccer = TIMx->CCER;
 800282c:	8c03      	ldrh	r3, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 800282e:	f426 7640 	bic.w	r6, r6, #768	; 0x300
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002832:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8002836:	0536      	lsls	r6, r6, #20
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002838:	045b      	lsls	r3, r3, #17
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 800283a:	0d36      	lsrs	r6, r6, #20
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800283c:	0c5b      	lsrs	r3, r3, #17
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 800283e:	ea46 2202 	orr.w	r2, r6, r2, lsl #8
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 8002842:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 8002846:	ea42 320c 	orr.w	r2, r2, ip, lsl #12

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 800284a:	b29b      	uxth	r3, r3
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800284c:	88e9      	ldrh	r1, [r5, #6]
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 800284e:	b292      	uxth	r2, r2

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 8002850:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002854:	8382      	strh	r2, [r0, #28]
  TIMx->CCER = tmpccer ;
 8002856:	8403      	strh	r3, [r0, #32]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8002858:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800285c:	e797      	b.n	800278e <TIM_SetIC4Prescaler>

0800285e <TIM_BDTRConfig>:
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 800285e:	884a      	ldrh	r2, [r1, #2]
 8002860:	880b      	ldrh	r3, [r1, #0]
 8002862:	4313      	orrs	r3, r2
 8002864:	888a      	ldrh	r2, [r1, #4]
 8002866:	4313      	orrs	r3, r2
 8002868:	88ca      	ldrh	r2, [r1, #6]
 800286a:	4313      	orrs	r3, r2
 800286c:	890a      	ldrh	r2, [r1, #8]
 800286e:	4313      	orrs	r3, r2
 8002870:	894a      	ldrh	r2, [r1, #10]
 8002872:	4313      	orrs	r3, r2
 8002874:	898a      	ldrh	r2, [r1, #12]
 8002876:	4313      	orrs	r3, r2
 8002878:	b29b      	uxth	r3, r3
 800287a:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
}
 800287e:	4770      	bx	lr

08002880 <TIM_BDTRStructInit>:
  * @retval None
  */
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
 8002880:	2300      	movs	r3, #0
 8002882:	8003      	strh	r3, [r0, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
 8002884:	8043      	strh	r3, [r0, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 8002886:	8083      	strh	r3, [r0, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
 8002888:	80c3      	strh	r3, [r0, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
 800288a:	8103      	strh	r3, [r0, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
 800288c:	8143      	strh	r3, [r0, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 800288e:	8183      	strh	r3, [r0, #12]
}
 8002890:	4770      	bx	lr

08002892 <TIM_CtrlPWMOutputs>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8002892:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002896:	b129      	cbz	r1, 80028a4 <TIM_CtrlPWMOutputs+0x12>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8002898:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800289c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	e001      	b.n	80028a8 <TIM_CtrlPWMOutputs+0x16>
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
 80028a4:	045b      	lsls	r3, r3, #17
 80028a6:	0c5b      	lsrs	r3, r3, #17
 80028a8:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 80028ac:	4770      	bx	lr

080028ae <TIM_SelectCOM>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 80028ae:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80028b0:	b119      	cbz	r1, 80028ba <TIM_SelectCOM+0xc>
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	f043 0304 	orr.w	r3, r3, #4
 80028b8:	e003      	b.n	80028c2 <TIM_SelectCOM+0x14>
  }
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCUS;
 80028ba:	f023 0304 	bic.w	r3, r3, #4
 80028be:	041b      	lsls	r3, r3, #16
 80028c0:	0c1b      	lsrs	r3, r3, #16
 80028c2:	8083      	strh	r3, [r0, #4]
 80028c4:	4770      	bx	lr

080028c6 <TIM_CCPreloadControl>:
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 80028c6:	8883      	ldrh	r3, [r0, #4]
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80028c8:	b119      	cbz	r1, 80028d2 <TIM_CCPreloadControl+0xc>
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	f043 0301 	orr.w	r3, r3, #1
 80028d0:	e003      	b.n	80028da <TIM_CCPreloadControl+0x14>
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCPC;
 80028d2:	f023 0301 	bic.w	r3, r3, #1
 80028d6:	041b      	lsls	r3, r3, #16
 80028d8:	0c1b      	lsrs	r3, r3, #16
 80028da:	8083      	strh	r3, [r0, #4]
 80028dc:	4770      	bx	lr

080028de <TIM_ITConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 80028de:	8983      	ldrh	r3, [r0, #12]
 80028e0:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80028e2:	b10a      	cbz	r2, 80028e8 <TIM_ITConfig+0xa>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 80028e4:	4319      	orrs	r1, r3
 80028e6:	e001      	b.n	80028ec <TIM_ITConfig+0xe>
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 80028e8:	ea23 0101 	bic.w	r1, r3, r1
 80028ec:	8181      	strh	r1, [r0, #12]
 80028ee:	4770      	bx	lr

080028f0 <TIM_GenerateEvent>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
 
  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
 80028f0:	8281      	strh	r1, [r0, #20]
}
 80028f2:	4770      	bx	lr

080028f4 <TIM_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));

  
  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
 80028f4:	8a03      	ldrh	r3, [r0, #16]
  {
    bitstatus = SET;
 80028f6:	4219      	tst	r1, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 80028f8:	bf0c      	ite	eq
 80028fa:	2000      	moveq	r0, #0
 80028fc:	2001      	movne	r0, #1
 80028fe:	4770      	bx	lr

08002900 <TIM_ClearFlag>:
{  
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
 8002900:	43c9      	mvns	r1, r1
 8002902:	b289      	uxth	r1, r1
 8002904:	8201      	strh	r1, [r0, #16]
}
 8002906:	4770      	bx	lr

08002908 <TIM_GetITStatus>:
  uint16_t itstatus = 0x0, itenable = 0x0;
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8002908:	8a03      	ldrh	r3, [r0, #16]
  
  itenable = TIMx->DIER & TIM_IT;
 800290a:	8982      	ldrh	r2, [r0, #12]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 800290c:	ea11 0003 	ands.w	r0, r1, r3
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
  
  itenable = TIMx->DIER & TIM_IT;
 8002910:	b292      	uxth	r2, r2
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8002912:	d003      	beq.n	800291c <TIM_GetITStatus+0x14>
  {
    bitstatus = SET;
 8002914:	4211      	tst	r1, r2
 8002916:	bf0c      	ite	eq
 8002918:	2000      	moveq	r0, #0
 800291a:	2001      	movne	r0, #1
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 800291c:	4770      	bx	lr

0800291e <TIM_ClearITPendingBit>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 800291e:	43c9      	mvns	r1, r1
 8002920:	b289      	uxth	r1, r1
 8002922:	8201      	strh	r1, [r0, #16]
}
 8002924:	4770      	bx	lr

08002926 <TIM_DMAConfig>:
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase)); 
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));

  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
 8002926:	430a      	orrs	r2, r1
 8002928:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
}
 800292c:	4770      	bx	lr

0800292e <TIM_DMACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 800292e:	8983      	ldrh	r3, [r0, #12]
 8002930:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx)); 
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002932:	b10a      	cbz	r2, 8002938 <TIM_DMACmd+0xa>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 8002934:	4319      	orrs	r1, r3
 8002936:	e001      	b.n	800293c <TIM_DMACmd+0xe>
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 8002938:	ea23 0101 	bic.w	r1, r3, r1
 800293c:	8181      	strh	r1, [r0, #12]
 800293e:	4770      	bx	lr

08002940 <TIM_SelectCCDMA>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 8002940:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002942:	b119      	cbz	r1, 800294c <TIM_SelectCCDMA+0xc>
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 8002944:	b29b      	uxth	r3, r3
 8002946:	f043 0308 	orr.w	r3, r3, #8
 800294a:	e003      	b.n	8002954 <TIM_SelectCCDMA+0x14>
  }
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCDS;
 800294c:	f023 0308 	bic.w	r3, r3, #8
 8002950:	041b      	lsls	r3, r3, #16
 8002952:	0c1b      	lsrs	r3, r3, #16
 8002954:	8083      	strh	r3, [r0, #4]
 8002956:	4770      	bx	lr

08002958 <TIM_InternalClockConfig>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  (uint16_t)~TIM_SMCR_SMS;
 8002958:	8903      	ldrh	r3, [r0, #8]
 800295a:	f023 0307 	bic.w	r3, r3, #7
 800295e:	041b      	lsls	r3, r3, #16
 8002960:	0c1b      	lsrs	r3, r3, #16
 8002962:	8103      	strh	r3, [r0, #8]
}
 8002964:	4770      	bx	lr

08002966 <TIM_ITRxExternalClockConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002966:	8903      	ldrh	r3, [r0, #8]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 8002968:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800296c:	041b      	lsls	r3, r3, #16
 800296e:	0c1b      	lsrs	r3, r3, #16

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 8002970:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002972:	8103      	strh	r3, [r0, #8]

  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);

  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 8002974:	8903      	ldrh	r3, [r0, #8]
 8002976:	b29b      	uxth	r3, r3
 8002978:	f043 0307 	orr.w	r3, r3, #7
 800297c:	8103      	strh	r3, [r0, #8]
}
 800297e:	4770      	bx	lr

08002980 <TIM_TIxExternalClockConfig>:
  *          This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
 8002980:	b538      	push	{r3, r4, r5, lr}
 8002982:	460d      	mov	r5, r1
 8002984:	4611      	mov	r1, r2
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 8002986:	2201      	movs	r2, #1
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 8002988:	2d60      	cmp	r5, #96	; 0x60
  *          This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
 800298a:	4604      	mov	r4, r0
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 800298c:	d102      	bne.n	8002994 <TIM_TIxExternalClockConfig+0x14>
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 800298e:	f7ff fb1a 	bl	8001fc6 <TI2_Config>
 8002992:	e001      	b.n	8002998 <TIM_TIxExternalClockConfig+0x18>
  }
  else
  {
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 8002994:	f7ff fafe 	bl	8001f94 <TI1_Config>
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002998:	8923      	ldrh	r3, [r4, #8]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 800299a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800299e:	041b      	lsls	r3, r3, #16
 80029a0:	0c1b      	lsrs	r3, r3, #16

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 80029a2:	431d      	orrs	r5, r3

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029a4:	8125      	strh	r5, [r4, #8]
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
  }
  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 80029a6:	8923      	ldrh	r3, [r4, #8]
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	f043 0307 	orr.w	r3, r3, #7
 80029ae:	8123      	strh	r3, [r4, #8]
}
 80029b0:	bd38      	pop	{r3, r4, r5, pc}

080029b2 <TIM_SelectInputTrigger>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80029b2:	8903      	ldrh	r3, [r0, #8]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 80029b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029b8:	041b      	lsls	r3, r3, #16
 80029ba:	0c1b      	lsrs	r3, r3, #16

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 80029bc:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029be:	8103      	strh	r3, [r0, #8]
}
 80029c0:	4770      	bx	lr

080029c2 <TIM_SelectOutputTrigger>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
 80029c2:	8883      	ldrh	r3, [r0, #4]
 80029c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029c8:	041b      	lsls	r3, r3, #16
 80029ca:	0c1b      	lsrs	r3, r3, #16
 80029cc:	8083      	strh	r3, [r0, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 80029ce:	8883      	ldrh	r3, [r0, #4]
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	430b      	orrs	r3, r1
 80029d4:	8083      	strh	r3, [r0, #4]
}
 80029d6:	4770      	bx	lr

080029d8 <TIM_SelectSlaveMode>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));

  /* Reset the SMS Bits */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_SMS;
 80029d8:	8903      	ldrh	r3, [r0, #8]
 80029da:	f023 0307 	bic.w	r3, r3, #7
 80029de:	041b      	lsls	r3, r3, #16
 80029e0:	0c1b      	lsrs	r3, r3, #16
 80029e2:	8103      	strh	r3, [r0, #8]

  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
 80029e4:	8903      	ldrh	r3, [r0, #8]
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	430b      	orrs	r3, r1
 80029ea:	8103      	strh	r3, [r0, #8]
}
 80029ec:	4770      	bx	lr

080029ee <TIM_SelectMasterSlaveMode>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));

  /* Reset the MSM Bit */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_MSM;
 80029ee:	8903      	ldrh	r3, [r0, #8]
 80029f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029f4:	041b      	lsls	r3, r3, #16
 80029f6:	0c1b      	lsrs	r3, r3, #16
 80029f8:	8103      	strh	r3, [r0, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
 80029fa:	8903      	ldrh	r3, [r0, #8]
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	430b      	orrs	r3, r1
 8002a00:	8103      	strh	r3, [r0, #8]
}
 8002a02:	4770      	bx	lr

08002a04 <TIM_ETRConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                   uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 8002a04:	b510      	push	{r4, lr}
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
 8002a06:	8904      	ldrh	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
 8002a08:	b2e4      	uxtb	r4, r4

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 8002a0a:	430c      	orrs	r4, r1
 8002a0c:	4314      	orrs	r4, r2
 8002a0e:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 8002a12:	b2a4      	uxth	r4, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a14:	8104      	strh	r4, [r0, #8]
}
 8002a16:	bd10      	pop	{r4, pc}

08002a18 <TIM_ETRClockMode2Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 8002a18:	b510      	push	{r4, lr}
 8002a1a:	4604      	mov	r4, r0
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 8002a1c:	f7ff fff2 	bl	8002a04 <TIM_ETRConfig>

  /* Enable the External clock mode2 */
  TIMx->SMCR |= TIM_SMCR_ECE;
 8002a20:	8923      	ldrh	r3, [r4, #8]
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a28:	8123      	strh	r3, [r4, #8]
}
 8002a2a:	bd10      	pop	{r4, pc}

08002a2c <TIM_ETRClockMode1Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                            uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 8002a2c:	b510      	push	{r4, lr}
 8002a2e:	4604      	mov	r4, r0
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 8002a30:	f7ff ffe8 	bl	8002a04 <TIM_ETRConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a34:	8923      	ldrh	r3, [r4, #8]

  /* Reset the SMS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;

  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;
 8002a36:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002a3a:	041b      	lsls	r3, r3, #16
 8002a3c:	0c1b      	lsrs	r3, r3, #16

  /* Select the Trigger selection : ETRF */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
  tmpsmcr |= TIM_TS_ETRF;
 8002a3e:	f043 0377 	orr.w	r3, r3, #119	; 0x77

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a42:	8123      	strh	r3, [r4, #8]
}
 8002a44:	bd10      	pop	{r4, pc}

08002a46 <TIM_EncoderInterfaceConfig>:
  *            @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
 8002a46:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a48:	8904      	ldrh	r4, [r0, #8]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8002a4a:	8b06      	ldrh	r6, [r0, #24]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a4c:	8c05      	ldrh	r5, [r0, #32]
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 8002a4e:	f426 7640 	bic.w	r6, r6, #768	; 0x300

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a52:	b2ad      	uxth	r5, r5
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 8002a54:	f026 0603 	bic.w	r6, r6, #3

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 8002a58:	f024 0407 	bic.w	r4, r4, #7
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 8002a5c:	0436      	lsls	r6, r6, #16
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
 8002a5e:	f025 0522 	bic.w	r5, r5, #34	; 0x22

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 8002a62:	0424      	lsls	r4, r4, #16
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 8002a64:	0c36      	lsrs	r6, r6, #16
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 8002a66:	4315      	orrs	r5, r2

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 8002a68:	0c24      	lsrs	r4, r4, #16
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 8002a6a:	f446 7680 	orr.w	r6, r6, #256	; 0x100

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 8002a6e:	ea45 1503 	orr.w	r5, r5, r3, lsl #4
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
  tmpsmcr |= TIM_EncoderMode;
 8002a72:	4321      	orrs	r1, r4

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 8002a74:	f046 0601 	orr.w	r6, r6, #1

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 8002a78:	b2ad      	uxth	r5, r5

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a7a:	8101      	strh	r1, [r0, #8]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8002a7c:	8306      	strh	r6, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a7e:	8405      	strh	r5, [r0, #32]
}
 8002a80:	bd70      	pop	{r4, r5, r6, pc}

08002a82 <TIM_SelectHallSensor>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 8002a82:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002a84:	b119      	cbz	r1, 8002a8e <TIM_SelectHallSensor+0xc>
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a8c:	e003      	b.n	8002a96 <TIM_SelectHallSensor+0x14>
  }
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_TI1S;
 8002a8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a92:	041b      	lsls	r3, r3, #16
 8002a94:	0c1b      	lsrs	r3, r3, #16
 8002a96:	8083      	strh	r3, [r0, #4]
 8002a98:	4770      	bx	lr

08002a9a <TIM_RemapConfig>:
 /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_REMAP(TIM_Remap));

  /* Set the Timer remapping configuration */
  TIMx->OR =  TIM_Remap;
 8002a9a:	f8a0 1050 	strh.w	r1, [r0, #80]	; 0x50
}
 8002a9e:	4770      	bx	lr

08002aa0 <USART_DeInit>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 8002aa0:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 8002aa2:	4b23      	ldr	r3, [pc, #140]	; (8002b30 <USART_DeInit+0x90>)
 8002aa4:	4298      	cmp	r0, r3
 8002aa6:	d105      	bne.n	8002ab4 <USART_DeInit+0x14>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 8002aa8:	2010      	movs	r0, #16
 8002aaa:	2101      	movs	r1, #1
 8002aac:	f7fe fff2 	bl	8001a94 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 8002ab0:	2010      	movs	r0, #16
 8002ab2:	e037      	b.n	8002b24 <USART_DeInit+0x84>
  }
  else if (USARTx == USART2)
 8002ab4:	4b1f      	ldr	r3, [pc, #124]	; (8002b34 <USART_DeInit+0x94>)
 8002ab6:	4298      	cmp	r0, r3
 8002ab8:	d107      	bne.n	8002aca <USART_DeInit+0x2a>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 8002aba:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002abe:	2101      	movs	r1, #1
 8002ac0:	f7fe ffdc 	bl	8001a7c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 8002ac4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002ac8:	e009      	b.n	8002ade <USART_DeInit+0x3e>
  }
  else if (USARTx == USART3)
 8002aca:	4b1b      	ldr	r3, [pc, #108]	; (8002b38 <USART_DeInit+0x98>)
 8002acc:	4298      	cmp	r0, r3
 8002ace:	d10b      	bne.n	8002ae8 <USART_DeInit+0x48>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 8002ad0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002ad4:	2101      	movs	r1, #1
 8002ad6:	f7fe ffd1 	bl	8001a7c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 8002ada:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002ade:	2100      	movs	r1, #0
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
    }
  }
}
 8002ae0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
  }
  else if (USARTx == USART3)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 8002ae4:	f7fe bfca 	b.w	8001a7c <RCC_APB1PeriphResetCmd>
  }    
  else if (USARTx == UART4)
 8002ae8:	4b14      	ldr	r3, [pc, #80]	; (8002b3c <USART_DeInit+0x9c>)
 8002aea:	4298      	cmp	r0, r3
 8002aec:	d107      	bne.n	8002afe <USART_DeInit+0x5e>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 8002aee:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002af2:	2101      	movs	r1, #1
 8002af4:	f7fe ffc2 	bl	8001a7c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 8002af8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002afc:	e7ef      	b.n	8002ade <USART_DeInit+0x3e>
  }
  else if (USARTx == UART5)
 8002afe:	4b10      	ldr	r3, [pc, #64]	; (8002b40 <USART_DeInit+0xa0>)
 8002b00:	4298      	cmp	r0, r3
 8002b02:	d107      	bne.n	8002b14 <USART_DeInit+0x74>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 8002b04:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002b08:	2101      	movs	r1, #1
 8002b0a:	f7fe ffb7 	bl	8001a7c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 8002b0e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002b12:	e7e4      	b.n	8002ade <USART_DeInit+0x3e>
  }     
  else
  {
    if (USARTx == USART6)
 8002b14:	4b0b      	ldr	r3, [pc, #44]	; (8002b44 <USART_DeInit+0xa4>)
 8002b16:	4298      	cmp	r0, r3
 8002b18:	d109      	bne.n	8002b2e <USART_DeInit+0x8e>
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
 8002b1a:	2020      	movs	r0, #32
 8002b1c:	2101      	movs	r1, #1
 8002b1e:	f7fe ffb9 	bl	8001a94 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 8002b22:	2020      	movs	r0, #32
 8002b24:	2100      	movs	r1, #0
    }
  }
}
 8002b26:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (USARTx == USART6)
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 8002b2a:	f7fe bfb3 	b.w	8001a94 <RCC_APB2PeriphResetCmd>
 8002b2e:	bd08      	pop	{r3, pc}
 8002b30:	40011000 	.word	0x40011000
 8002b34:	40004400 	.word	0x40004400
 8002b38:	40004800 	.word	0x40004800
 8002b3c:	40004c00 	.word	0x40004c00
 8002b40:	40005000 	.word	0x40005000
 8002b44:	40011400 	.word	0x40011400

08002b48 <USART_Init>:
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8002b48:	8a03      	ldrh	r3, [r0, #16]
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8002b4a:	88ca      	ldrh	r2, [r1, #6]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8002b4c:	b29b      	uxth	r3, r3

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8002b4e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8002b52:	b530      	push	{r4, r5, lr}
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8002b54:	4313      	orrs	r3, r2
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8002b56:	460d      	mov	r5, r1
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8002b58:	8203      	strh	r3, [r0, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8002b5a:	8983      	ldrh	r3, [r0, #12]

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8002b5c:	8909      	ldrh	r1, [r1, #8]
 8002b5e:	88aa      	ldrh	r2, [r5, #4]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8002b60:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8002b64:	430a      	orrs	r2, r1
 8002b66:	8969      	ldrh	r1, [r5, #10]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8002b68:	f023 030c 	bic.w	r3, r3, #12
 8002b6c:	041b      	lsls	r3, r3, #16

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8002b6e:	430a      	orrs	r2, r1

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8002b70:	0c1b      	lsrs	r3, r3, #16

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8002b72:	b292      	uxth	r2, r2
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8002b74:	4313      	orrs	r3, r2
 8002b76:	8183      	strh	r3, [r0, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8002b78:	8a83      	ldrh	r3, [r0, #20]
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8002b7a:	89aa      	ldrh	r2, [r5, #12]

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8002b7c:	b29b      	uxth	r3, r3

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8002b7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8002b82:	4313      	orrs	r3, r2
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8002b84:	b085      	sub	sp, #20
  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8002b86:	8283      	strh	r3, [r0, #20]
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8002b88:	4604      	mov	r4, r0
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8002b8a:	4668      	mov	r0, sp
 8002b8c:	f7fe fea6 	bl	80018dc <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8002b90:	4b1a      	ldr	r3, [pc, #104]	; (8002bfc <USART_Init+0xb4>)
 8002b92:	429c      	cmp	r4, r3
 8002b94:	d003      	beq.n	8002b9e <USART_Init+0x56>
 8002b96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b9a:	429c      	cmp	r4, r3
 8002b9c:	d101      	bne.n	8002ba2 <USART_Init+0x5a>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8002b9e:	9b03      	ldr	r3, [sp, #12]
 8002ba0:	e000      	b.n	8002ba4 <USART_Init+0x5c>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8002ba2:	9b02      	ldr	r3, [sp, #8]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8002ba4:	89a2      	ldrh	r2, [r4, #12]
 8002ba6:	b212      	sxth	r2, r2
 8002ba8:	2a00      	cmp	r2, #0
 8002baa:	f04f 0119 	mov.w	r1, #25
 8002bae:	682a      	ldr	r2, [r5, #0]
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8002bb0:	fb01 f103 	mul.w	r1, r1, r3
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8002bb4:	da01      	bge.n	8002bba <USART_Init+0x72>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8002bb6:	0052      	lsls	r2, r2, #1
 8002bb8:	e000      	b.n	8002bbc <USART_Init+0x74>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8002bba:	0092      	lsls	r2, r2, #2
  }
  tmpreg = (integerdivider / 100) << 4;
 8002bbc:	2364      	movs	r3, #100	; 0x64
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8002bbe:	fbb1 f1f2 	udiv	r1, r1, r2
  }
  tmpreg = (integerdivider / 100) << 4;
 8002bc2:	fbb1 f2f3 	udiv	r2, r1, r3
 8002bc6:	0112      	lsls	r2, r2, #4

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8002bc8:	0910      	lsrs	r0, r2, #4
 8002bca:	fb03 1110 	mls	r1, r3, r0, r1

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8002bce:	89a0      	ldrh	r0, [r4, #12]
 8002bd0:	b200      	sxth	r0, r0
 8002bd2:	2800      	cmp	r0, #0
 8002bd4:	da06      	bge.n	8002be4 <USART_Init+0x9c>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8002bd6:	00c9      	lsls	r1, r1, #3
 8002bd8:	3132      	adds	r1, #50	; 0x32
 8002bda:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bde:	f003 0307 	and.w	r3, r3, #7
 8002be2:	e005      	b.n	8002bf0 <USART_Init+0xa8>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8002be4:	0109      	lsls	r1, r1, #4
 8002be6:	3132      	adds	r1, #50	; 0x32
 8002be8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bec:	f003 030f 	and.w	r3, r3, #15
 8002bf0:	431a      	orrs	r2, r3
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8002bf2:	b292      	uxth	r2, r2
 8002bf4:	8122      	strh	r2, [r4, #8]
}
 8002bf6:	b005      	add	sp, #20
 8002bf8:	bd30      	pop	{r4, r5, pc}
 8002bfa:	bf00      	nop
 8002bfc:	40011000 	.word	0x40011000

08002c00 <USART_StructInit>:
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 8002c00:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8002c04:	6003      	str	r3, [r0, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
  USART_InitStruct->USART_Parity = USART_Parity_No ;
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8002c06:	220c      	movs	r2, #12
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	8083      	strh	r3, [r0, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 8002c0c:	80c3      	strh	r3, [r0, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 8002c0e:	8103      	strh	r3, [r0, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8002c10:	8142      	strh	r2, [r0, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 8002c12:	8183      	strh	r3, [r0, #12]
}
 8002c14:	4770      	bx	lr

08002c16 <USART_ClockInit>:
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8002c16:	880b      	ldrh	r3, [r1, #0]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8002c18:	8a02      	ldrh	r2, [r0, #16]
  *         contains the configuration information for the specified  USART peripheral.
  * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 8002c1a:	b510      	push	{r4, lr}
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8002c1c:	884c      	ldrh	r4, [r1, #2]
 8002c1e:	4323      	orrs	r3, r4
 8002c20:	888c      	ldrh	r4, [r1, #4]
 8002c22:	88c9      	ldrh	r1, [r1, #6]
 8002c24:	4323      	orrs	r3, r4
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8002c26:	b292      	uxth	r2, r2
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8002c28:	430b      	orrs	r3, r1
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 8002c2a:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8002c2e:	b29b      	uxth	r3, r3
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8002c30:	4313      	orrs	r3, r2
 8002c32:	8203      	strh	r3, [r0, #16]
}
 8002c34:	bd10      	pop	{r4, pc}

08002c36 <USART_ClockStructInit>:
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 8002c36:	2300      	movs	r3, #0
 8002c38:	8003      	strh	r3, [r0, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 8002c3a:	8043      	strh	r3, [r0, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 8002c3c:	8083      	strh	r3, [r0, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 8002c3e:	80c3      	strh	r3, [r0, #6]
}
 8002c40:	4770      	bx	lr

08002c42 <USART_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8002c42:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002c44:	b119      	cbz	r1, 8002c4e <USART_Cmd+0xc>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002c4c:	e003      	b.n	8002c56 <USART_Cmd+0x14>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8002c4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c52:	041b      	lsls	r3, r3, #16
 8002c54:	0c1b      	lsrs	r3, r3, #16
 8002c56:	8183      	strh	r3, [r0, #12]
 8002c58:	4770      	bx	lr

08002c5a <USART_SetPrescaler>:
{ 
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= USART_GTPR_GT;
 8002c5a:	8b03      	ldrh	r3, [r0, #24]
 8002c5c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002c60:	8303      	strh	r3, [r0, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 8002c62:	8b03      	ldrh	r3, [r0, #24]
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	430b      	orrs	r3, r1
 8002c68:	8303      	strh	r3, [r0, #24]
}
 8002c6a:	4770      	bx	lr

08002c6c <USART_OverSampling8Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 8002c6c:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002c6e:	b129      	cbz	r1, 8002c7c <USART_OverSampling8Cmd+0x10>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 8002c70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	e001      	b.n	8002c80 <USART_OverSampling8Cmd+0x14>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
 8002c7c:	045b      	lsls	r3, r3, #17
 8002c7e:	0c5b      	lsrs	r3, r3, #17
 8002c80:	8183      	strh	r3, [r0, #12]
 8002c82:	4770      	bx	lr

08002c84 <USART_OneBitMethodCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 8002c84:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002c86:	b119      	cbz	r1, 8002c90 <USART_OneBitMethodCmd+0xc>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002c8e:	e003      	b.n	8002c98 <USART_OneBitMethodCmd+0x14>
  }
  else
  {
    /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
 8002c90:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c94:	041b      	lsls	r3, r3, #16
 8002c96:	0c1b      	lsrs	r3, r3, #16
 8002c98:	8283      	strh	r3, [r0, #20]
 8002c9a:	4770      	bx	lr

08002c9c <USART_SendData>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8002c9c:	05c9      	lsls	r1, r1, #23
 8002c9e:	0dc9      	lsrs	r1, r1, #23
 8002ca0:	8081      	strh	r1, [r0, #4]
}
 8002ca2:	4770      	bx	lr

08002ca4 <USART_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8002ca4:	8880      	ldrh	r0, [r0, #4]
 8002ca6:	05c0      	lsls	r0, r0, #23
}
 8002ca8:	0dc0      	lsrs	r0, r0, #23
 8002caa:	4770      	bx	lr

08002cac <USART_SetAddress>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
 8002cac:	8a03      	ldrh	r3, [r0, #16]
 8002cae:	f023 030f 	bic.w	r3, r3, #15
 8002cb2:	041b      	lsls	r3, r3, #16
 8002cb4:	0c1b      	lsrs	r3, r3, #16
 8002cb6:	8203      	strh	r3, [r0, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
 8002cb8:	8a03      	ldrh	r3, [r0, #16]
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	430b      	orrs	r3, r1
 8002cbe:	8203      	strh	r3, [r0, #16]
}
 8002cc0:	4770      	bx	lr

08002cc2 <USART_ReceiverWakeUpCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 8002cc2:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
 8002cc4:	b119      	cbz	r1, 8002cce <USART_ReceiverWakeUpCmd+0xc>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	f043 0302 	orr.w	r3, r3, #2
 8002ccc:	e003      	b.n	8002cd6 <USART_ReceiverWakeUpCmd+0x14>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
 8002cce:	f023 0302 	bic.w	r3, r3, #2
 8002cd2:	041b      	lsls	r3, r3, #16
 8002cd4:	0c1b      	lsrs	r3, r3, #16
 8002cd6:	8183      	strh	r3, [r0, #12]
 8002cd8:	4770      	bx	lr

08002cda <USART_WakeUpConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
 8002cda:	8983      	ldrh	r3, [r0, #12]
 8002cdc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ce0:	041b      	lsls	r3, r3, #16
 8002ce2:	0c1b      	lsrs	r3, r3, #16
 8002ce4:	8183      	strh	r3, [r0, #12]
  USARTx->CR1 |= USART_WakeUp;
 8002ce6:	8983      	ldrh	r3, [r0, #12]
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	430b      	orrs	r3, r1
 8002cec:	8183      	strh	r3, [r0, #12]
}
 8002cee:	4770      	bx	lr

08002cf0 <USART_LINBreakDetectLengthConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
 8002cf0:	8a03      	ldrh	r3, [r0, #16]
 8002cf2:	f023 0320 	bic.w	r3, r3, #32
 8002cf6:	041b      	lsls	r3, r3, #16
 8002cf8:	0c1b      	lsrs	r3, r3, #16
 8002cfa:	8203      	strh	r3, [r0, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 8002cfc:	8a03      	ldrh	r3, [r0, #16]
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	430b      	orrs	r3, r1
 8002d02:	8203      	strh	r3, [r0, #16]
}
 8002d04:	4770      	bx	lr

08002d06 <USART_LINCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 8002d06:	8a03      	ldrh	r3, [r0, #16]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002d08:	b119      	cbz	r1, 8002d12 <USART_LINCmd+0xc>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d10:	e003      	b.n	8002d1a <USART_LINCmd+0x14>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
 8002d12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d16:	041b      	lsls	r3, r3, #16
 8002d18:	0c1b      	lsrs	r3, r3, #16
 8002d1a:	8203      	strh	r3, [r0, #16]
 8002d1c:	4770      	bx	lr

08002d1e <USART_SendBreak>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= USART_CR1_SBK;
 8002d1e:	8983      	ldrh	r3, [r0, #12]
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	f043 0301 	orr.w	r3, r3, #1
 8002d26:	8183      	strh	r3, [r0, #12]
}
 8002d28:	4770      	bx	lr

08002d2a <USART_HalfDuplexCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 8002d2a:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002d2c:	b119      	cbz	r1, 8002d36 <USART_HalfDuplexCmd+0xc>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	f043 0308 	orr.w	r3, r3, #8
 8002d34:	e003      	b.n	8002d3e <USART_HalfDuplexCmd+0x14>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
 8002d36:	f023 0308 	bic.w	r3, r3, #8
 8002d3a:	041b      	lsls	r3, r3, #16
 8002d3c:	0c1b      	lsrs	r3, r3, #16
 8002d3e:	8283      	strh	r3, [r0, #20]
 8002d40:	4770      	bx	lr

08002d42 <USART_SetGuardTime>:
{    
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= USART_GTPR_PSC;
 8002d42:	8b03      	ldrh	r3, [r0, #24]
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	8303      	strh	r3, [r0, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 8002d48:	8b03      	ldrh	r3, [r0, #24]
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002d50:	8303      	strh	r3, [r0, #24]
}
 8002d52:	4770      	bx	lr

08002d54 <USART_SmartCardCmd>:
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 8002d54:	8a83      	ldrh	r3, [r0, #20]
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002d56:	b119      	cbz	r1, 8002d60 <USART_SmartCardCmd+0xc>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	f043 0320 	orr.w	r3, r3, #32
 8002d5e:	e003      	b.n	8002d68 <USART_SmartCardCmd+0x14>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
 8002d60:	f023 0320 	bic.w	r3, r3, #32
 8002d64:	041b      	lsls	r3, r3, #16
 8002d66:	0c1b      	lsrs	r3, r3, #16
 8002d68:	8283      	strh	r3, [r0, #20]
 8002d6a:	4770      	bx	lr

08002d6c <USART_SmartCardNACKCmd>:
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 8002d6c:	8a83      	ldrh	r3, [r0, #20]
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002d6e:	b119      	cbz	r1, 8002d78 <USART_SmartCardNACKCmd+0xc>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	f043 0310 	orr.w	r3, r3, #16
 8002d76:	e003      	b.n	8002d80 <USART_SmartCardNACKCmd+0x14>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
 8002d78:	f023 0310 	bic.w	r3, r3, #16
 8002d7c:	041b      	lsls	r3, r3, #16
 8002d7e:	0c1b      	lsrs	r3, r3, #16
 8002d80:	8283      	strh	r3, [r0, #20]
 8002d82:	4770      	bx	lr

08002d84 <USART_IrDAConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
 8002d84:	8a83      	ldrh	r3, [r0, #20]
 8002d86:	f023 0304 	bic.w	r3, r3, #4
 8002d8a:	041b      	lsls	r3, r3, #16
 8002d8c:	0c1b      	lsrs	r3, r3, #16
 8002d8e:	8283      	strh	r3, [r0, #20]
  USARTx->CR3 |= USART_IrDAMode;
 8002d90:	8a83      	ldrh	r3, [r0, #20]
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	430b      	orrs	r3, r1
 8002d96:	8283      	strh	r3, [r0, #20]
}
 8002d98:	4770      	bx	lr

08002d9a <USART_IrDACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 8002d9a:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 8002d9c:	b119      	cbz	r1, 8002da6 <USART_IrDACmd+0xc>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	f043 0302 	orr.w	r3, r3, #2
 8002da4:	e003      	b.n	8002dae <USART_IrDACmd+0x14>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
 8002da6:	f023 0302 	bic.w	r3, r3, #2
 8002daa:	041b      	lsls	r3, r3, #16
 8002dac:	0c1b      	lsrs	r3, r3, #16
 8002dae:	8283      	strh	r3, [r0, #20]
 8002db0:	4770      	bx	lr

08002db2 <USART_DMACmd>:

  if (NewState != DISABLE)
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8002db2:	8a83      	ldrh	r3, [r0, #20]
 8002db4:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 8002db6:	b10a      	cbz	r2, 8002dbc <USART_DMACmd+0xa>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8002db8:	4319      	orrs	r1, r3
 8002dba:	e001      	b.n	8002dc0 <USART_DMACmd+0xe>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 8002dbc:	ea23 0101 	bic.w	r1, r3, r1
 8002dc0:	8281      	strh	r1, [r0, #20]
 8002dc2:	4770      	bx	lr

08002dc4 <USART_ITConfig>:
  } 
    
  usartxbase = (uint32_t)USARTx;

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8002dc4:	f3c1 1342 	ubfx	r3, r1, #5, #3
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8002dc8:	b510      	push	{r4, lr}

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8002dca:	f001 011f 	and.w	r1, r1, #31
  itmask = (((uint32_t)0x01) << itpos);
 8002dce:	2401      	movs	r4, #1
 8002dd0:	fa14 f101 	lsls.w	r1, r4, r1
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8002dd4:	42a3      	cmp	r3, r4
 8002dd6:	d101      	bne.n	8002ddc <USART_ITConfig+0x18>
  {
    usartxbase += 0x0C;
 8002dd8:	300c      	adds	r0, #12
 8002dda:	e004      	b.n	8002de6 <USART_ITConfig+0x22>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d101      	bne.n	8002de4 <USART_ITConfig+0x20>
  {
    usartxbase += 0x10;
 8002de0:	3010      	adds	r0, #16
 8002de2:	e000      	b.n	8002de6 <USART_ITConfig+0x22>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8002de4:	3014      	adds	r0, #20
  }
  if (NewState != DISABLE)
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8002de6:	6803      	ldr	r3, [r0, #0]
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
  }
  if (NewState != DISABLE)
 8002de8:	b10a      	cbz	r2, 8002dee <USART_ITConfig+0x2a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8002dea:	4319      	orrs	r1, r3
 8002dec:	e001      	b.n	8002df2 <USART_ITConfig+0x2e>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8002dee:	ea23 0101 	bic.w	r1, r3, r1
 8002df2:	6001      	str	r1, [r0, #0]
 8002df4:	bd10      	pop	{r4, pc}

08002df6 <USART_GetFlagStatus>:
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8002df6:	8803      	ldrh	r3, [r0, #0]
  {
    bitstatus = SET;
 8002df8:	4219      	tst	r1, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8002dfa:	bf0c      	ite	eq
 8002dfc:	2000      	moveq	r0, #0
 8002dfe:	2001      	movne	r0, #1
 8002e00:	4770      	bx	lr

08002e02 <USART_ClearFlag>:
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
       
  USARTx->SR = (uint16_t)~USART_FLAG;
 8002e02:	43c9      	mvns	r1, r1
 8002e04:	b289      	uxth	r1, r1
 8002e06:	8001      	strh	r1, [r0, #0]
}
 8002e08:	4770      	bx	lr

08002e0a <USART_GetITStatus>:
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
 8002e0a:	2201      	movs	r2, #1
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8002e0c:	b510      	push	{r4, lr}
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8002e0e:	f001 031f 	and.w	r3, r1, #31
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8002e12:	f3c1 1442 	ubfx	r4, r1, #5, #3
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
 8002e16:	409a      	lsls	r2, r3
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8002e18:	2c01      	cmp	r4, #1
 8002e1a:	d101      	bne.n	8002e20 <USART_GetITStatus+0x16>
  {
    itmask &= USARTx->CR1;
 8002e1c:	8983      	ldrh	r3, [r0, #12]
 8002e1e:	e003      	b.n	8002e28 <USART_GetITStatus+0x1e>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8002e20:	2c02      	cmp	r4, #2
  {
    itmask &= USARTx->CR2;
 8002e22:	bf0c      	ite	eq
 8002e24:	8a03      	ldrheq	r3, [r0, #16]
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8002e26:	8a83      	ldrhne	r3, [r0, #20]
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	4013      	ands	r3, r2
  }
  
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
  bitpos &= USARTx->SR;
 8002e2c:	8802      	ldrh	r2, [r0, #0]
 8002e2e:	b292      	uxth	r2, r2
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8002e30:	b143      	cbz	r3, 8002e44 <USART_GetITStatus+0x3a>
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
  }
  
  bitpos = USART_IT >> 0x08;
 8002e32:	0a09      	lsrs	r1, r1, #8
  bitpos = (uint32_t)0x01 << bitpos;
 8002e34:	2301      	movs	r3, #1
 8002e36:	fa13 f101 	lsls.w	r1, r3, r1
  *            @arg USART_IT_NE:   Noise Error interrupt
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
 8002e3a:	4211      	tst	r1, r2
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
  bitpos &= USARTx->SR;
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
  {
    bitstatus = SET;
 8002e3c:	bf0c      	ite	eq
 8002e3e:	2000      	moveq	r0, #0
 8002e40:	2001      	movne	r0, #1
 8002e42:	bd10      	pop	{r4, pc}
  }
  else
  {
    bitstatus = RESET;
 8002e44:	4618      	mov	r0, r3
  }
  
  return bitstatus;  
}
 8002e46:	bd10      	pop	{r4, pc}

08002e48 <USART_ClearITPendingBit>:
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 8002e48:	0a09      	lsrs	r1, r1, #8
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	408b      	lsls	r3, r1
  USARTx->SR = (uint16_t)~itmask;
 8002e4e:	43db      	mvns	r3, r3
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	8003      	strh	r3, [r0, #0]
}
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop

08002e58 <_close>:
	}
}

int _close(int file) {
	return -1;
}
 8002e58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e5c:	4770      	bx	lr

08002e5e <_execve>:
/*
 execve
 Transfer control to a new process. Minimal implementation (for a system without processes):
 */
int _execve(char *name, char **argv, char **env) {
	errno = ENOMEM;
 8002e5e:	4b03      	ldr	r3, [pc, #12]	; (8002e6c <_execve+0xe>)
 8002e60:	220c      	movs	r2, #12
 8002e62:	601a      	str	r2, [r3, #0]
	return -1;
}
 8002e64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	20001650 	.word	0x20001650

08002e70 <_fork>:
 fork
 Create a new process. Minimal implementation (for a system without processes):
 */

int _fork() {
	errno = EAGAIN;
 8002e70:	4b02      	ldr	r3, [pc, #8]	; (8002e7c <_fork+0xc>)
 8002e72:	220b      	movs	r2, #11
 8002e74:	601a      	str	r2, [r3, #0]
	return -1;
}
 8002e76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e7a:	4770      	bx	lr
 8002e7c:	20001650 	.word	0x20001650

08002e80 <_fstat>:
 Status of an open file. For consistency with other minimal implementations in these examples,
 all files are regarded as character special devices.
 The `sys/stat.h' header file required is distributed in the `include' subdirectory for this C library.
 */
int _fstat(int file, struct stat *st) {
	st->st_mode = S_IFCHR;
 8002e80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e84:	604b      	str	r3, [r1, #4]
	return 0;
}
 8002e86:	2000      	movs	r0, #0
 8002e88:	4770      	bx	lr

08002e8a <_getpid>:
 Process-ID; this is sometimes used to generate strings unlikely to conflict with other processes. Minimal implementation, for a system without processes:
 */

int _getpid() {
	return 1;
}
 8002e8a:	2001      	movs	r0, #1
 8002e8c:	4770      	bx	lr

08002e8e <_isatty>:
/*
 isatty
 Query whether output stream is a terminal. For consistency with the other minimal implementations,
 */
int _isatty(int file) {
	switch (file) {
 8002e8e:	2802      	cmp	r0, #2
 8002e90:	d904      	bls.n	8002e9c <_isatty+0xe>
	case STDERR_FILENO:
	case STDIN_FILENO:
		return 1;
	default:
		//errno = ENOTTY;
		errno = EBADF;
 8002e92:	4b03      	ldr	r3, [pc, #12]	; (8002ea0 <_isatty+0x12>)
 8002e94:	2209      	movs	r2, #9
 8002e96:	601a      	str	r2, [r3, #0]
		return 0;
 8002e98:	2000      	movs	r0, #0
 8002e9a:	4770      	bx	lr
int _isatty(int file) {
	switch (file) {
	case STDOUT_FILENO:
	case STDERR_FILENO:
	case STDIN_FILENO:
		return 1;
 8002e9c:	2001      	movs	r0, #1
	default:
		//errno = ENOTTY;
		errno = EBADF;
		return 0;
	}
}
 8002e9e:	4770      	bx	lr
 8002ea0:	20001650 	.word	0x20001650

08002ea4 <_kill>:
/*
 kill
 Send a signal. Minimal implementation:
 */
int _kill(int pid, int sig) {
	errno = EINVAL;
 8002ea4:	4b02      	ldr	r3, [pc, #8]	; (8002eb0 <_kill+0xc>)
 8002ea6:	2216      	movs	r2, #22
 8002ea8:	601a      	str	r2, [r3, #0]
	return (-1);
}
 8002eaa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002eae:	4770      	bx	lr
 8002eb0:	20001650 	.word	0x20001650

08002eb4 <_link>:
 link
 Establish a new name for an existing file. Minimal implementation:
 */

int _link(char *old, char *new) {
	errno = EMLINK;
 8002eb4:	4b02      	ldr	r3, [pc, #8]	; (8002ec0 <_link+0xc>)
 8002eb6:	221f      	movs	r2, #31
 8002eb8:	601a      	str	r2, [r3, #0]
	return -1;
}
 8002eba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ebe:	4770      	bx	lr
 8002ec0:	20001650 	.word	0x20001650

08002ec4 <_lseek>:
 lseek
 Set position in a file. Minimal implementation:
 */
int _lseek(int file, int ptr, int dir) {
	return 0;
}
 8002ec4:	2000      	movs	r0, #0
 8002ec6:	4770      	bx	lr

08002ec8 <_read>:
 read
 Read a character to a file. `libc' subroutines will use this system routine for input from all files, including stdin
 Returns -1 on error or blocks until the number of characters have been read.
 */

int _read(int file, char *ptr, int len) {
 8002ec8:	b530      	push	{r4, r5, lr}
	int n;
	int num = 0;
	switch (file) {
 8002eca:	b138      	cbz	r0, 8002edc <_read+0x14>
 8002ecc:	e00d      	b.n	8002eea <_read+0x22>
	case STDIN_FILENO:
		for (n = 0; n < len; n++) {
#if   STDIN_USART == 1
			while ((USART1->SR & USART_FLAG_RXNE) == (uint16_t)RESET) {}
 8002ece:	881d      	ldrh	r5, [r3, #0]
 8002ed0:	06ad      	lsls	r5, r5, #26
 8002ed2:	d5fc      	bpl.n	8002ece <_read+0x6>
			char c = (char)(USART1->DR & (uint16_t)0x01FF);
 8002ed4:	88a5      	ldrh	r5, [r4, #4]
 8002ed6:	540d      	strb	r5, [r1, r0]
int _read(int file, char *ptr, int len) {
	int n;
	int num = 0;
	switch (file) {
	case STDIN_FILENO:
		for (n = 0; n < len; n++) {
 8002ed8:	3001      	adds	r0, #1
 8002eda:	e001      	b.n	8002ee0 <_read+0x18>
#if   STDIN_USART == 1
			while ((USART1->SR & USART_FLAG_RXNE) == (uint16_t)RESET) {}
 8002edc:	4b06      	ldr	r3, [pc, #24]	; (8002ef8 <_read+0x30>)
 8002ede:	461c      	mov	r4, r3
int _read(int file, char *ptr, int len) {
	int n;
	int num = 0;
	switch (file) {
	case STDIN_FILENO:
		for (n = 0; n < len; n++) {
 8002ee0:	4290      	cmp	r0, r2
 8002ee2:	dbf4      	blt.n	8002ece <_read+0x6>
 8002ee4:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8002ee8:	bd30      	pop	{r4, r5, pc}
					*ptr++ = c;
					num++;
				}
				break;
				default:
				errno = EBADF;
 8002eea:	4b04      	ldr	r3, [pc, #16]	; (8002efc <_read+0x34>)
 8002eec:	2209      	movs	r2, #9
 8002eee:	601a      	str	r2, [r3, #0]
				return -1;
 8002ef0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			}
	return num;
}
 8002ef4:	bd30      	pop	{r4, r5, pc}
 8002ef6:	bf00      	nop
 8002ef8:	40011000 	.word	0x40011000
 8002efc:	20001650 	.word	0x20001650

08002f00 <_stat>:
 Status of a file (by name). Minimal implementation:
 int    _EXFUN(stat,( const char *__path, struct stat *__sbuf ));
 */

int _stat(const char *filepath, struct stat *st) {
	st->st_mode = S_IFCHR;
 8002f00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f04:	604b      	str	r3, [r1, #4]
	return 0;
}
 8002f06:	2000      	movs	r0, #0
 8002f08:	4770      	bx	lr

08002f0a <_times>:
 Timing information for current process. Minimal implementation:
 */

clock_t _times(struct tms *buf) {
	return -1;
}
 8002f0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f0e:	4770      	bx	lr

08002f10 <_unlink>:
/*
 unlink
 Remove a file's directory entry. Minimal implementation:
 */
int _unlink(char *name) {
	errno = ENOENT;
 8002f10:	4b02      	ldr	r3, [pc, #8]	; (8002f1c <_unlink+0xc>)
 8002f12:	2202      	movs	r2, #2
 8002f14:	601a      	str	r2, [r3, #0]
	return -1;
}
 8002f16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f1a:	4770      	bx	lr
 8002f1c:	20001650 	.word	0x20001650

08002f20 <_wait>:
/*
 wait
 Wait for a child process. Minimal implementation:
 */
int _wait(int *status) {
	errno = ECHILD;
 8002f20:	4b02      	ldr	r3, [pc, #8]	; (8002f2c <_wait+0xc>)
 8002f22:	220a      	movs	r2, #10
 8002f24:	601a      	str	r2, [r3, #0]
	return -1;
}
 8002f26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f2a:	4770      	bx	lr
 8002f2c:	20001650 	.word	0x20001650

08002f30 <_write>:
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
 8002f30:	2801      	cmp	r0, #1
/*
 write
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
 8002f32:	b530      	push	{r4, r5, lr}
	int n;
	switch (file) {
 8002f34:	d009      	beq.n	8002f4a <_write+0x1a>
 8002f36:	2802      	cmp	r0, #2
 8002f38:	d11a      	bne.n	8002f70 <_write+0x40>
 8002f3a:	e013      	b.n	8002f64 <_write+0x34>
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
#if STDOUT_USART == 1
			while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 8002f3c:	8805      	ldrh	r5, [r0, #0]
 8002f3e:	066d      	lsls	r5, r5, #25
 8002f40:	d5fc      	bpl.n	8002f3c <_write+0xc>
			USART1->DR = (*ptr++ & (uint16_t)0x01FF);
 8002f42:	5ccd      	ldrb	r5, [r1, r3]
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
 8002f44:	3301      	adds	r3, #1
#if STDOUT_USART == 1
			while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
			USART1->DR = (*ptr++ & (uint16_t)0x01FF);
 8002f46:	80a5      	strh	r5, [r4, #4]
 8002f48:	e002      	b.n	8002f50 <_write+0x20>
	int n;
	switch (file) {
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
#if STDOUT_USART == 1
			while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 8002f4a:	480d      	ldr	r0, [pc, #52]	; (8002f80 <_write+0x50>)
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
 8002f4c:	2300      	movs	r3, #0
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
#if STDOUT_USART == 1
			while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 8002f4e:	4604      	mov	r4, r0
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
 8002f50:	4293      	cmp	r3, r2
 8002f52:	dbf3      	blt.n	8002f3c <_write+0xc>
 8002f54:	e011      	b.n	8002f7a <_write+0x4a>
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
#if STDERR_USART == 1
					while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 8002f56:	8805      	ldrh	r5, [r0, #0]
 8002f58:	066d      	lsls	r5, r5, #25
 8002f5a:	d5fc      	bpl.n	8002f56 <_write+0x26>
					USART1->DR = (*ptr++ & (uint16_t)0x01FF);
 8002f5c:	5ccd      	ldrb	r5, [r1, r3]
					USART3->DR = (*ptr++ & (uint16_t)0x01FF);
#endif
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
 8002f5e:	3301      	adds	r3, #1
#if STDERR_USART == 1
					while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
					USART1->DR = (*ptr++ & (uint16_t)0x01FF);
 8002f60:	80a5      	strh	r5, [r4, #4]
 8002f62:	e002      	b.n	8002f6a <_write+0x3a>
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
#if STDERR_USART == 1
					while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 8002f64:	4806      	ldr	r0, [pc, #24]	; (8002f80 <_write+0x50>)
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
 8002f66:	2300      	movs	r3, #0
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
#if STDERR_USART == 1
					while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 8002f68:	4604      	mov	r4, r0
					USART3->DR = (*ptr++ & (uint16_t)0x01FF);
#endif
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	dbf3      	blt.n	8002f56 <_write+0x26>
 8002f6e:	e004      	b.n	8002f7a <_write+0x4a>
					USART3->DR = (*ptr++ & (uint16_t)0x01FF);
#endif
				}
				break;
				default:
				errno = EBADF;
 8002f70:	4b04      	ldr	r3, [pc, #16]	; (8002f84 <_write+0x54>)
 8002f72:	2209      	movs	r2, #9
 8002f74:	601a      	str	r2, [r3, #0]
				return -1;
 8002f76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
			}
	return len;
}
 8002f7a:	4610      	mov	r0, r2
 8002f7c:	bd30      	pop	{r4, r5, pc}
 8002f7e:	bf00      	nop
 8002f80:	40011000 	.word	0x40011000
 8002f84:	20001650 	.word	0x20001650

08002f88 <_sbrk>:
/*
 sbrk
 Increase program data space.
 Malloc and related functions depend on this
 */
caddr_t _sbrk(int incr) {
 8002f88:	b508      	push	{r3, lr}

	extern char _ebss; // Defined by the linker
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0) {
 8002f8a:	4b0d      	ldr	r3, [pc, #52]	; (8002fc0 <_sbrk+0x38>)
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	b90a      	cbnz	r2, 8002f94 <_sbrk+0xc>
		heap_end = &_ebss;
 8002f90:	4a0c      	ldr	r2, [pc, #48]	; (8002fc4 <_sbrk+0x3c>)
 8002f92:	601a      	str	r2, [r3, #0]
	}
	prev_heap_end = heap_end;
 8002f94:	681b      	ldr	r3, [r3, #0]
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __get_MSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 8002f96:	f3ef 8208 	mrs	r2, MSP

	char * stack = (char*) __get_MSP();
	if (heap_end + incr > stack) {
 8002f9a:	1818      	adds	r0, r3, r0
 8002f9c:	4290      	cmp	r0, r2
 8002f9e:	d90a      	bls.n	8002fb6 <_sbrk+0x2e>
		_write(STDERR_FILENO, "Heap and stack collision\n", 25);
 8002fa0:	2219      	movs	r2, #25
 8002fa2:	2002      	movs	r0, #2
 8002fa4:	4908      	ldr	r1, [pc, #32]	; (8002fc8 <_sbrk+0x40>)
 8002fa6:	f7ff ffc3 	bl	8002f30 <_write>
		errno = ENOMEM;
 8002faa:	4b08      	ldr	r3, [pc, #32]	; (8002fcc <_sbrk+0x44>)
 8002fac:	220c      	movs	r2, #12
 8002fae:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8002fb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002fb4:	e001      	b.n	8002fba <_sbrk+0x32>
		//abort ();
	}

	heap_end += incr;
 8002fb6:	4a02      	ldr	r2, [pc, #8]	; (8002fc0 <_sbrk+0x38>)
 8002fb8:	6010      	str	r0, [r2, #0]
	return (caddr_t) prev_heap_end;

}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	bd08      	pop	{r3, pc}
 8002fbe:	bf00      	nop
 8002fc0:	2000097c 	.word	0x2000097c
 8002fc4:	20001654 	.word	0x20001654
 8002fc8:	08008a88 	.word	0x08008a88
 8002fcc:	20001650 	.word	0x20001650

08002fd0 <_exit>:
char *__env[1] = { 0 };
char **environ = __env;

int _write(int file, char *ptr, int len);

void _exit(int status) {
 8002fd0:	b508      	push	{r3, lr}
	_write(1, "exit", 4);
 8002fd2:	2001      	movs	r0, #1
 8002fd4:	4902      	ldr	r1, [pc, #8]	; (8002fe0 <_exit+0x10>)
 8002fd6:	2204      	movs	r2, #4
 8002fd8:	f7ff ffaa 	bl	8002f30 <_write>
 8002fdc:	e7fe      	b.n	8002fdc <_exit+0xc>
 8002fde:	bf00      	nop
 8002fe0:	08008aa2 	.word	0x08008aa2

08002fe4 <I2C_Configuration>:
  * @brief  I2C Configuration
  * @param  None
  * @retval None
  */
void I2C_Configuration(void)
{
 8002fe4:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef  GPIO_InitStructure;
  I2C_InitTypeDef  I2C_InitStructure;

  /* I2C Periph clock enable */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);  //  RCC_APB1PeriphClockCmd(I2C1_RCC, ENABLE);
 8002fe6:	2101      	movs	r1, #1
  * @brief  I2C Configuration
  * @param  None
  * @retval None
  */
void I2C_Configuration(void)
{
 8002fe8:	b087      	sub	sp, #28
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);  //  RCC_APB1PeriphClockCmd(I2C1_RCC, ENABLE);
  /* GPIO Periph clock enable */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE); // PB5 (SMBA), PB6 (SCL), PB9 (SDA)  // RCC_APB2PeriphClockCmd(I2C1_GPIO_RCC, ENABLE);

  /* Configure I2C pins: SCL and SDA */
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_I2C1);
 8002fea:	4c21      	ldr	r4, [pc, #132]	; (8003070 <I2C_Configuration+0x8c>)
{
  GPIO_InitTypeDef  GPIO_InitStructure;
  I2C_InitTypeDef  I2C_InitStructure;

  /* I2C Periph clock enable */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);  //  RCC_APB1PeriphClockCmd(I2C1_RCC, ENABLE);
 8002fec:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002ff0:	f7fe fd08 	bl	8001a04 <RCC_APB1PeriphClockCmd>
  /* GPIO Periph clock enable */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE); // PB5 (SMBA), PB6 (SCL), PB9 (SDA)  // RCC_APB2PeriphClockCmd(I2C1_GPIO_RCC, ENABLE);
 8002ff4:	2002      	movs	r0, #2
 8002ff6:	2101      	movs	r1, #1
 8002ff8:	f7fe fce0 	bl	80019bc <RCC_AHB1PeriphClockCmd>

  /* Configure I2C pins: SCL and SDA */
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_I2C1);
 8002ffc:	4620      	mov	r0, r4
 8002ffe:	2106      	movs	r1, #6
 8003000:	2204      	movs	r2, #4
 8003002:	f7fe f9b3 	bl	800136c <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_I2C1);
 8003006:	2204      	movs	r2, #4
 8003008:	4620      	mov	r0, r4
 800300a:	2109      	movs	r1, #9
 800300c:	f7fe f9ae 	bl	800136c <GPIO_PinAFConfig>

  GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_6 | GPIO_Pin_9;
 8003010:	f44f 7310 	mov.w	r3, #576	; 0x240
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 8003014:	2501      	movs	r5, #1

  /* Configure I2C pins: SCL and SDA */
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_I2C1);
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_I2C1);

  GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_6 | GPIO_Pin_9;
 8003016:	9304      	str	r3, [sp, #16]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003018:	4620      	mov	r0, r4
  /* Configure I2C pins: SCL and SDA */
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_I2C1);
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_I2C1);

  GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_6 | GPIO_Pin_9;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800301a:	2302      	movs	r3, #2
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 800301c:	a904      	add	r1, sp, #16
  /* Configure I2C pins: SCL and SDA */
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_I2C1);
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_I2C1);

  GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_6 | GPIO_Pin_9;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800301e:	f88d 3015 	strb.w	r3, [sp, #21]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8003022:	f88d 3014 	strb.w	r3, [sp, #20]
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_I2C1);
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_I2C1);

  GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_6 | GPIO_Pin_9;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 8003026:	f88d 5016 	strb.w	r5, [sp, #22]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 800302a:	f88d 5017 	strb.w	r5, [sp, #23]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 800302e:	f7fe f91d 	bl	800126c <GPIO_Init>
//#if defined (REMAP_I2C1)
//Remap_I2C1_Configuration();
//#endif

  /* I2C configuration */
  I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 8003032:	2300      	movs	r3, #0
 8003034:	f8ad 3004 	strh.w	r3, [sp, #4]
  I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
 8003038:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 800303c:	f8ad 3006 	strh.w	r3, [sp, #6]
  I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 8003040:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003044:	f8ad 300a 	strh.w	r3, [sp, #10]
  I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8003048:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800304c:	f8ad 300c 	strh.w	r3, [sp, #12]
  I2C_InitStructure.I2C_ClockSpeed = I2C_CLOCK;
 8003050:	a906      	add	r1, sp, #24
 8003052:	4b08      	ldr	r3, [pc, #32]	; (8003074 <I2C_Configuration+0x90>)

  /* Apply I2C configuration after enabling it */
  I2C_Init(I2C1, &I2C_InitStructure);
 8003054:	f5a4 34d8 	sub.w	r4, r4, #110592	; 0x1b000
  /* I2C configuration */
  I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
  I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
  I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
  I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
  I2C_InitStructure.I2C_ClockSpeed = I2C_CLOCK;
 8003058:	f841 3d18 	str.w	r3, [r1, #-24]!

  /* Apply I2C configuration after enabling it */
  I2C_Init(I2C1, &I2C_InitStructure);
 800305c:	4620      	mov	r0, r4
 800305e:	4669      	mov	r1, sp
 8003060:	f7fe f9c8 	bl	80013f4 <I2C_Init>
  /* I2C Peripheral Enable */
  I2C_Cmd(I2C1, ENABLE);
 8003064:	4620      	mov	r0, r4
 8003066:	4629      	mov	r1, r5
 8003068:	f7fe fa38 	bl	80014dc <I2C_Cmd>
}
 800306c:	b007      	add	sp, #28
 800306e:	bd30      	pop	{r4, r5, pc}
 8003070:	40020400 	.word	0x40020400
 8003074:	000186a0 	.word	0x000186a0

08003078 <ST7032i_Command_Write>:
  * @brief  Write Command to ST7032i
  * @param  Data : Command Data
  * @retval None
  */
void ST7032i_Command_Write(uint8_t Data)
{
 8003078:	b507      	push	{r0, r1, r2, lr}
	uint8_t data[] = { 0b00000000, Data };
 800307a:	2300      	movs	r3, #0
 800307c:	f88d 0005 	strb.w	r0, [sp, #5]
	i2c_transmit(ST7032I_ADDR, data, 2);
 8003080:	a901      	add	r1, sp, #4
 8003082:	203e      	movs	r0, #62	; 0x3e
 8003084:	2202      	movs	r2, #2
  * @param  Data : Command Data
  * @retval None
  */
void ST7032i_Command_Write(uint8_t Data)
{
	uint8_t data[] = { 0b00000000, Data };
 8003086:	f88d 3004 	strb.w	r3, [sp, #4]
	i2c_transmit(ST7032I_ADDR, data, 2);
 800308a:	f7fd fa37 	bl	80004fc <i2c_transmit>
  I2C_SendData(I2C1, Data);
  /* Test on EV8 and clear it */
  while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
  /* Send STOP condition */
  I2C_GenerateSTOP(I2C1, ENABLE);
}
 800308e:	bd0e      	pop	{r1, r2, r3, pc}

08003090 <ST7032i_Icon_Off>:
  * @brief  Put off icon whili Icon RAM is kept
  * @param  None
  * @retval None
  */
void ST7032i_Icon_Off(void)
{
 8003090:	b508      	push	{r3, lr}
  //Power/Icon/Contrast control
  ST7032i_Command_Write( (Power_Icon_Contrast | ( (Contrast >> 4) & 0b00000011 )) & 0b11110111);
 8003092:	4b07      	ldr	r3, [pc, #28]	; (80030b0 <ST7032i_Icon_Off+0x20>)
 8003094:	781a      	ldrb	r2, [r3, #0]
 8003096:	7858      	ldrb	r0, [r3, #1]
 8003098:	f3c0 1001 	ubfx	r0, r0, #4, #2
 800309c:	4310      	orrs	r0, r2
 800309e:	f000 00f7 	and.w	r0, r0, #247	; 0xf7
 80030a2:	f7ff ffe9 	bl	8003078 <ST7032i_Command_Write>
  delay_us(27);
 80030a6:	201b      	movs	r0, #27
}
 80030a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  */
void ST7032i_Icon_Off(void)
{
  //Power/Icon/Contrast control
  ST7032i_Command_Write( (Power_Icon_Contrast | ( (Contrast >> 4) & 0b00000011 )) & 0b11110111);
  delay_us(27);
 80030ac:	f7fd b8d2 	b.w	8000254 <delay_us>
 80030b0:	20000088 	.word	0x20000088

080030b4 <ST7032i_Icon_On>:
  * @brief  Display icon
  * @param  None
  * @retval None
  */
void ST7032i_Icon_On(void)
{
 80030b4:	b508      	push	{r3, lr}
  //Power/Icon/Contrast control
  ST7032i_Command_Write(Power_Icon_Contrast | ( (Contrast >> 4) & 0b00000011 ) | 0b00001000 );
 80030b6:	4b07      	ldr	r3, [pc, #28]	; (80030d4 <ST7032i_Icon_On+0x20>)
 80030b8:	7818      	ldrb	r0, [r3, #0]
 80030ba:	785b      	ldrb	r3, [r3, #1]
 80030bc:	f040 0008 	orr.w	r0, r0, #8
 80030c0:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80030c4:	4318      	orrs	r0, r3
 80030c6:	f7ff ffd7 	bl	8003078 <ST7032i_Command_Write>
  delay_us(27);
 80030ca:	201b      	movs	r0, #27
}
 80030cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  */
void ST7032i_Icon_On(void)
{
  //Power/Icon/Contrast control
  ST7032i_Command_Write(Power_Icon_Contrast | ( (Contrast >> 4) & 0b00000011 ) | 0b00001000 );
  delay_us(27);
 80030d0:	f7fd b8c0 	b.w	8000254 <delay_us>
 80030d4:	20000088 	.word	0x20000088

080030d8 <ST7032i_Set_Contrast>:
  * @brief  Set display contrast. value is to be 0 - 63
  * @param  contrast: contrast
  * @retval None
  */
void ST7032i_Set_Contrast(uint8_t contrast)
{
 80030d8:	b510      	push	{r4, lr}
 80030da:	4604      	mov	r4, r0
  //Contrast set
  ST7032i_Command_Write(0b01110000 | (contrast & 0b00001111));
 80030dc:	f000 000f 	and.w	r0, r0, #15
 80030e0:	f040 0070 	orr.w	r0, r0, #112	; 0x70
 80030e4:	f7ff ffc8 	bl	8003078 <ST7032i_Command_Write>

  delay_us(27);
 80030e8:	201b      	movs	r0, #27
 80030ea:	f7fd f8b3 	bl	8000254 <delay_us>

  //Power/Icon/Contrast control
  ST7032i_Command_Write(Power_Icon_Contrast | ( (contrast >> 4) & 0b00000011 ) );
 80030ee:	4b06      	ldr	r3, [pc, #24]	; (8003108 <ST7032i_Set_Contrast+0x30>)
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	f3c4 1001 	ubfx	r0, r4, #4, #2
 80030f6:	4318      	orrs	r0, r3
 80030f8:	f7ff ffbe 	bl	8003078 <ST7032i_Command_Write>

  delay_us(27);
 80030fc:	201b      	movs	r0, #27
}
 80030fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  delay_us(27);

  //Power/Icon/Contrast control
  ST7032i_Command_Write(Power_Icon_Contrast | ( (contrast >> 4) & 0b00000011 ) );

  delay_us(27);
 8003102:	f7fd b8a7 	b.w	8000254 <delay_us>
 8003106:	bf00      	nop
 8003108:	20000088 	.word	0x20000088

0800310c <ST7032i_Set_DDRAM>:
  * @brief  set DDRAM address
  * @param  address : DDRAM address
  * @retval None
  */
void ST7032i_Set_DDRAM(uint8_t address)
{
 800310c:	b510      	push	{r4, lr}
 800310e:	4604      	mov	r4, r0
  ST7032i_Command_Write(0b10000000 | address);
 8003110:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8003114:	f7ff ffb0 	bl	8003078 <ST7032i_Command_Write>
  DDRAM_Address = address;
 8003118:	4b03      	ldr	r3, [pc, #12]	; (8003128 <ST7032i_Set_DDRAM+0x1c>)
  delay_us(27);
 800311a:	201b      	movs	r0, #27
  * @retval None
  */
void ST7032i_Set_DDRAM(uint8_t address)
{
  ST7032i_Command_Write(0b10000000 | address);
  DDRAM_Address = address;
 800311c:	701c      	strb	r4, [r3, #0]
  delay_us(27);
}
 800311e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  */
void ST7032i_Set_DDRAM(uint8_t address)
{
  ST7032i_Command_Write(0b10000000 | address);
  DDRAM_Address = address;
  delay_us(27);
 8003122:	f7fd b897 	b.w	8000254 <delay_us>
 8003126:	bf00      	nop
 8003128:	20000984 	.word	0x20000984

0800312c <ST7032i_Cursor_Blink_Off>:
  * @brief  display square cursor
  * @param  None
  * @retval None
  */
void ST7032i_Cursor_Blink_Off(void)
{
 800312c:	b508      	push	{r3, lr}
  ST7032i_Command_Write(( Display & 0b11111110) | 0b00000000);
 800312e:	4b05      	ldr	r3, [pc, #20]	; (8003144 <ST7032i_Cursor_Blink_Off+0x18>)
 8003130:	7898      	ldrb	r0, [r3, #2]
 8003132:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
 8003136:	f7ff ff9f 	bl	8003078 <ST7032i_Command_Write>
  delay_us(27);
 800313a:	201b      	movs	r0, #27
}
 800313c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  * @retval None
  */
void ST7032i_Cursor_Blink_Off(void)
{
  ST7032i_Command_Write(( Display & 0b11111110) | 0b00000000);
  delay_us(27);
 8003140:	f7fd b888 	b.w	8000254 <delay_us>
 8003144:	20000088 	.word	0x20000088

08003148 <ST7032i_Cursor_Blink_On>:
  * @brief  make square cursor brink
  * @param  None
  * @retval None
  */
void ST7032i_Cursor_Blink_On(void)
{
 8003148:	b508      	push	{r3, lr}
  ST7032i_Command_Write(( Display & 0b11111110) | 0b00000001);
 800314a:	4b05      	ldr	r3, [pc, #20]	; (8003160 <ST7032i_Cursor_Blink_On+0x18>)
 800314c:	7898      	ldrb	r0, [r3, #2]
 800314e:	f040 0001 	orr.w	r0, r0, #1
 8003152:	f7ff ff91 	bl	8003078 <ST7032i_Command_Write>
  delay_us(27);
 8003156:	201b      	movs	r0, #27
}
 8003158:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  * @retval None
  */
void ST7032i_Cursor_Blink_On(void)
{
  ST7032i_Command_Write(( Display & 0b11111110) | 0b00000001);
  delay_us(27);
 800315c:	f7fd b87a 	b.w	8000254 <delay_us>
 8003160:	20000088 	.word	0x20000088

08003164 <ST7032i_Cursor_Off>:
  * @brief  put off cursor
  * @param  None
  * @retval None
  */
void ST7032i_Cursor_Off(void)
{
 8003164:	b508      	push	{r3, lr}
  ST7032i_Command_Write(( Display & 0b11111101) | 0b00000000);
 8003166:	4b05      	ldr	r3, [pc, #20]	; (800317c <ST7032i_Cursor_Off+0x18>)
 8003168:	7898      	ldrb	r0, [r3, #2]
 800316a:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
 800316e:	f7ff ff83 	bl	8003078 <ST7032i_Command_Write>
  delay_us(27);
 8003172:	201b      	movs	r0, #27
}
 8003174:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  * @retval None
  */
void ST7032i_Cursor_Off(void)
{
  ST7032i_Command_Write(( Display & 0b11111101) | 0b00000000);
  delay_us(27);
 8003178:	f7fd b86c 	b.w	8000254 <delay_us>
 800317c:	20000088 	.word	0x20000088

08003180 <ST7032i_Cursor_On>:
  * @brief  display under line cursor
  * @param  None
  * @retval None
  */
void ST7032i_Cursor_On(void)
{
 8003180:	b508      	push	{r3, lr}
  ST7032i_Command_Write(( Display & 0b11111101) | 0b00000010);
 8003182:	4b05      	ldr	r3, [pc, #20]	; (8003198 <ST7032i_Cursor_On+0x18>)
 8003184:	7898      	ldrb	r0, [r3, #2]
 8003186:	f040 0002 	orr.w	r0, r0, #2
 800318a:	f7ff ff75 	bl	8003078 <ST7032i_Command_Write>
  delay_us(27);
 800318e:	201b      	movs	r0, #27
}
 8003190:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  * @retval None
  */
void ST7032i_Cursor_On(void)
{
  ST7032i_Command_Write(( Display & 0b11111101) | 0b00000010);
  delay_us(27);
 8003194:	f7fd b85e 	b.w	8000254 <delay_us>
 8003198:	20000088 	.word	0x20000088

0800319c <ST7032i_Display_Off>:
  * @brief  put off display while DDRAM is kept
  * @param  None
  * @retval None
  */
void ST7032i_Display_Off(void)
{
 800319c:	b508      	push	{r3, lr}
  ST7032i_Command_Write(( Display & 0b11111011) | 0b00000000);
 800319e:	4b05      	ldr	r3, [pc, #20]	; (80031b4 <ST7032i_Display_Off+0x18>)
 80031a0:	7898      	ldrb	r0, [r3, #2]
 80031a2:	f000 00fb 	and.w	r0, r0, #251	; 0xfb
 80031a6:	f7ff ff67 	bl	8003078 <ST7032i_Command_Write>
  delay_us(27);
 80031aa:	201b      	movs	r0, #27
}
 80031ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  * @retval None
  */
void ST7032i_Display_Off(void)
{
  ST7032i_Command_Write(( Display & 0b11111011) | 0b00000000);
  delay_us(27);
 80031b0:	f7fd b850 	b.w	8000254 <delay_us>
 80031b4:	20000088 	.word	0x20000088

080031b8 <ST7032i_Display_On>:
  * @brief  put on display
  * @param  None
  * @retval None
  */
void ST7032i_Display_On(void)
{
 80031b8:	b508      	push	{r3, lr}
  ST7032i_Command_Write(( Display & 0b11111011) | 0b00000100);
 80031ba:	4b05      	ldr	r3, [pc, #20]	; (80031d0 <ST7032i_Display_On+0x18>)
 80031bc:	7898      	ldrb	r0, [r3, #2]
 80031be:	f040 0004 	orr.w	r0, r0, #4
 80031c2:	f7ff ff59 	bl	8003078 <ST7032i_Command_Write>
  delay_us(27);
 80031c6:	201b      	movs	r0, #27
}
 80031c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  * @retval None
  */
void ST7032i_Display_On(void)
{
  ST7032i_Command_Write(( Display & 0b11111011) | 0b00000100);
  delay_us(27);
 80031cc:	f7fd b842 	b.w	8000254 <delay_us>
 80031d0:	20000088 	.word	0x20000088

080031d4 <ST7032i_Shift_Disable>:
  * @brief  disables shift fucntion
  * @param  None
  * @retval None
  */
void ST7032i_Shift_Disable(void)
{
 80031d4:	b508      	push	{r3, lr}
  ST7032i_Command_Write(( Entry_Mode & 0b11111110) | 0b00000000);
 80031d6:	4b07      	ldr	r3, [pc, #28]	; (80031f4 <ST7032i_Shift_Disable+0x20>)
 80031d8:	78d8      	ldrb	r0, [r3, #3]
 80031da:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
 80031de:	f7ff ff4b 	bl	8003078 <ST7032i_Command_Write>
  Shift = 0;
 80031e2:	4b05      	ldr	r3, [pc, #20]	; (80031f8 <ST7032i_Shift_Disable+0x24>)
 80031e4:	2200      	movs	r2, #0
  delay_us(27);
 80031e6:	201b      	movs	r0, #27
  * @retval None
  */
void ST7032i_Shift_Disable(void)
{
  ST7032i_Command_Write(( Entry_Mode & 0b11111110) | 0b00000000);
  Shift = 0;
 80031e8:	705a      	strb	r2, [r3, #1]
  delay_us(27);
}
 80031ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  */
void ST7032i_Shift_Disable(void)
{
  ST7032i_Command_Write(( Entry_Mode & 0b11111110) | 0b00000000);
  Shift = 0;
  delay_us(27);
 80031ee:	f7fd b831 	b.w	8000254 <delay_us>
 80031f2:	bf00      	nop
 80031f4:	20000088 	.word	0x20000088
 80031f8:	20000984 	.word	0x20000984

080031fc <ST7032i_Shift_Enable>:
  * @brief  shift entire display data is send
  * @param  None
  * @retval None
  */
void ST7032i_Shift_Enable(void)
{
 80031fc:	b508      	push	{r3, lr}
  ST7032i_Command_Write(( Entry_Mode & 0b11111110) | 0b00000001);
 80031fe:	4b07      	ldr	r3, [pc, #28]	; (800321c <ST7032i_Shift_Enable+0x20>)
 8003200:	78d8      	ldrb	r0, [r3, #3]
 8003202:	f040 0001 	orr.w	r0, r0, #1
 8003206:	f7ff ff37 	bl	8003078 <ST7032i_Command_Write>
  Shift = 1;
 800320a:	4b05      	ldr	r3, [pc, #20]	; (8003220 <ST7032i_Shift_Enable+0x24>)
 800320c:	2201      	movs	r2, #1
  delay_us(27);
 800320e:	201b      	movs	r0, #27
  * @retval None
  */
void ST7032i_Shift_Enable(void)
{
  ST7032i_Command_Write(( Entry_Mode & 0b11111110) | 0b00000001);
  Shift = 1;
 8003210:	705a      	strb	r2, [r3, #1]
  delay_us(27);
}
 8003212:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  */
void ST7032i_Shift_Enable(void)
{
  ST7032i_Command_Write(( Entry_Mode & 0b11111110) | 0b00000001);
  Shift = 1;
  delay_us(27);
 8003216:	f7fd b81d 	b.w	8000254 <delay_us>
 800321a:	bf00      	nop
 800321c:	20000088 	.word	0x20000088
 8003220:	20000984 	.word	0x20000984

08003224 <ST7032i_Decrement>:
  * @brief  decrement address when data is send and put
  * @param  None
  * @retval None
  */
void ST7032i_Decrement(void)
{
 8003224:	b510      	push	{r4, lr}
  ST7032i_Command_Write(( Entry_Mode & 0b11111101) | 0b00000000);
 8003226:	4c06      	ldr	r4, [pc, #24]	; (8003240 <ST7032i_Decrement+0x1c>)
 8003228:	78e0      	ldrb	r0, [r4, #3]
 800322a:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
 800322e:	f7ff ff23 	bl	8003078 <ST7032i_Command_Write>
  Increment = -1;
 8003232:	23ff      	movs	r3, #255	; 0xff
  delay_us(27);
 8003234:	201b      	movs	r0, #27
  * @retval None
  */
void ST7032i_Decrement(void)
{
  ST7032i_Command_Write(( Entry_Mode & 0b11111101) | 0b00000000);
  Increment = -1;
 8003236:	7123      	strb	r3, [r4, #4]
  delay_us(27);
}
 8003238:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  */
void ST7032i_Decrement(void)
{
  ST7032i_Command_Write(( Entry_Mode & 0b11111101) | 0b00000000);
  Increment = -1;
  delay_us(27);
 800323c:	f7fd b80a 	b.w	8000254 <delay_us>
 8003240:	20000088 	.word	0x20000088

08003244 <ST7032i_Increment>:
  * @brief  increment address when data is send and put
  * @param  None
  * @retval None
  */
void ST7032i_Increment(void)
{
 8003244:	b510      	push	{r4, lr}
  ST7032i_Command_Write(( Entry_Mode & 0b11111101) | 0b00000010);
 8003246:	4c06      	ldr	r4, [pc, #24]	; (8003260 <ST7032i_Increment+0x1c>)
 8003248:	78e0      	ldrb	r0, [r4, #3]
 800324a:	f040 0002 	orr.w	r0, r0, #2
 800324e:	f7ff ff13 	bl	8003078 <ST7032i_Command_Write>
  Increment = 1;
 8003252:	2301      	movs	r3, #1
  delay_us(27);
 8003254:	201b      	movs	r0, #27
  * @retval None
  */
void ST7032i_Increment(void)
{
  ST7032i_Command_Write(( Entry_Mode & 0b11111101) | 0b00000010);
  Increment = 1;
 8003256:	7123      	strb	r3, [r4, #4]
  delay_us(27);
}
 8003258:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  */
void ST7032i_Increment(void)
{
  ST7032i_Command_Write(( Entry_Mode & 0b11111101) | 0b00000010);
  Increment = 1;
  delay_us(27);
 800325c:	f7fc bffa 	b.w	8000254 <delay_us>
 8003260:	20000088 	.word	0x20000088

08003264 <ST7032i_Return>:
  * @brief  Return to home position
  * @param  None
  * @retval None
  */
void ST7032i_Return(void)
{
 8003264:	b508      	push	{r3, lr}
  ST7032i_Command_Write(0b00000010);
 8003266:	2002      	movs	r0, #2
 8003268:	f7ff ff06 	bl	8003078 <ST7032i_Command_Write>
  DDRAM_Address = 0;
 800326c:	4b03      	ldr	r3, [pc, #12]	; (800327c <ST7032i_Return+0x18>)
 800326e:	2200      	movs	r2, #0
  delay_ms(2);
 8003270:	2002      	movs	r0, #2
  * @retval None
  */
void ST7032i_Return(void)
{
  ST7032i_Command_Write(0b00000010);
  DDRAM_Address = 0;
 8003272:	701a      	strb	r2, [r3, #0]
  delay_ms(2);
}
 8003274:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  */
void ST7032i_Return(void)
{
  ST7032i_Command_Write(0b00000010);
  DDRAM_Address = 0;
  delay_ms(2);
 8003278:	f7fc bfe2 	b.w	8000240 <delay_ms>
 800327c:	20000984 	.word	0x20000984

08003280 <ST7032i_Clear>:
  * @brief  Clear Display
  * @param  None
  * @retval None
  */
void ST7032i_Clear(void)
{
 8003280:	b508      	push	{r3, lr}
  uint32_t i;

  ST7032i_Command_Write(0b00000001);
 8003282:	2001      	movs	r0, #1
 8003284:	f7ff fef8 	bl	8003078 <ST7032i_Command_Write>
  DDRAM_Address = 0;
 8003288:	4a07      	ldr	r2, [pc, #28]	; (80032a8 <ST7032i_Clear+0x28>)
  for(i=0;i<16;i++)
    {
      DDRAM_Data[0][i] =  ' ';
 800328a:	4908      	ldr	r1, [pc, #32]	; (80032ac <ST7032i_Clear+0x2c>)
void ST7032i_Clear(void)
{
  uint32_t i;

  ST7032i_Command_Write(0b00000001);
  DDRAM_Address = 0;
 800328c:	2300      	movs	r3, #0
 800328e:	7013      	strb	r3, [r2, #0]
  for(i=0;i<16;i++)
    {
      DDRAM_Data[0][i] =  ' ';
 8003290:	2220      	movs	r2, #32
 8003292:	54ca      	strb	r2, [r1, r3]
      DDRAM_Data[1][i] =  ' ';
 8003294:	18c8      	adds	r0, r1, r3
{
  uint32_t i;

  ST7032i_Command_Write(0b00000001);
  DDRAM_Address = 0;
  for(i=0;i<16;i++)
 8003296:	3301      	adds	r3, #1
 8003298:	2b10      	cmp	r3, #16
    {
      DDRAM_Data[0][i] =  ' ';
      DDRAM_Data[1][i] =  ' ';
 800329a:	7402      	strb	r2, [r0, #16]
{
  uint32_t i;

  ST7032i_Command_Write(0b00000001);
  DDRAM_Address = 0;
  for(i=0;i<16;i++)
 800329c:	d1f9      	bne.n	8003292 <ST7032i_Clear+0x12>
    {
      DDRAM_Data[0][i] =  ' ';
      DDRAM_Data[1][i] =  ' ';
    }
  delay_ms(2);
 800329e:	2002      	movs	r0, #2
}
 80032a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  for(i=0;i<16;i++)
    {
      DDRAM_Data[0][i] =  ' ';
      DDRAM_Data[1][i] =  ' ';
    }
  delay_ms(2);
 80032a4:	f7fc bfcc 	b.w	8000240 <delay_ms>
 80032a8:	20000984 	.word	0x20000984
 80032ac:	20001620 	.word	0x20001620

080032b0 <ST7032i_Init>:
  * @brief  Initialize ST7032i LCD and I2C interface
  * @param  None
  * @retval None
  */
void ST7032i_Init(void)
{
 80032b0:	b510      	push	{r4, lr}
//  delay_ms(40);

//  I2C_Configuration();

  //Function Set
  ST7032i_Command_Write(0b00111000);
 80032b2:	2038      	movs	r0, #56	; 0x38
 80032b4:	f7ff fee0 	bl	8003078 <ST7032i_Command_Write>

  delay_us(27);
 80032b8:	201b      	movs	r0, #27
 80032ba:	f7fc ffcb 	bl	8000254 <delay_us>

  //Function Set
  ST7032i_Command_Write(0b00111001);
 80032be:	2039      	movs	r0, #57	; 0x39
 80032c0:	f7ff feda 	bl	8003078 <ST7032i_Command_Write>

  delay_us(27);
 80032c4:	201b      	movs	r0, #27
 80032c6:	f7fc ffc5 	bl	8000254 <delay_us>

  //Bias and OSC frequency
  ST7032i_Command_Write(0b00010100);
 80032ca:	2014      	movs	r0, #20
 80032cc:	f7ff fed4 	bl	8003078 <ST7032i_Command_Write>

  delay_us(27);
 80032d0:	201b      	movs	r0, #27
  ST7032i_Command_Write(0b01110000);

  delay_us(27);

  //Power/Icon/Contrast control
  ST7032i_Command_Write(Power_Icon_Contrast);
 80032d2:	4c16      	ldr	r4, [pc, #88]	; (800332c <ST7032i_Init+0x7c>)
  delay_us(27);

  //Bias and OSC frequency
  ST7032i_Command_Write(0b00010100);

  delay_us(27);
 80032d4:	f7fc ffbe 	bl	8000254 <delay_us>

  //Contrast set
  ST7032i_Command_Write(0b01110000);
 80032d8:	2070      	movs	r0, #112	; 0x70
 80032da:	f7ff fecd 	bl	8003078 <ST7032i_Command_Write>

  delay_us(27);
 80032de:	201b      	movs	r0, #27
 80032e0:	f7fc ffb8 	bl	8000254 <delay_us>

  //Power/Icon/Contrast control
  ST7032i_Command_Write(Power_Icon_Contrast);
 80032e4:	7820      	ldrb	r0, [r4, #0]
 80032e6:	f7ff fec7 	bl	8003078 <ST7032i_Command_Write>

  delay_us(27);
 80032ea:	201b      	movs	r0, #27
 80032ec:	f7fc ffb2 	bl	8000254 <delay_us>

  //Contrast set
  ST7032i_Set_Contrast(Contrast);
 80032f0:	7860      	ldrb	r0, [r4, #1]
 80032f2:	f7ff fef1 	bl	80030d8 <ST7032i_Set_Contrast>

  //Follower control
  ST7032i_Command_Write(0b01101100);
 80032f6:	206c      	movs	r0, #108	; 0x6c
 80032f8:	f7ff febe 	bl	8003078 <ST7032i_Command_Write>

  delay_ms(200);
 80032fc:	20c8      	movs	r0, #200	; 0xc8
 80032fe:	f7fc ff9f 	bl	8000240 <delay_ms>

  //Function Set
  ST7032i_Command_Write(0b00111001);
 8003302:	2039      	movs	r0, #57	; 0x39
 8003304:	f7ff feb8 	bl	8003078 <ST7032i_Command_Write>

  delay_us(27);
 8003308:	201b      	movs	r0, #27
 800330a:	f7fc ffa3 	bl	8000254 <delay_us>

  //Entry mode
  ST7032i_Command_Write(Entry_Mode);
 800330e:	78e0      	ldrb	r0, [r4, #3]
 8003310:	f7ff feb2 	bl	8003078 <ST7032i_Command_Write>

  delay_us(27);
 8003314:	201b      	movs	r0, #27
 8003316:	f7fc ff9d 	bl	8000254 <delay_us>

  //Display control : on
  ST7032i_Command_Write(Display);
 800331a:	78a0      	ldrb	r0, [r4, #2]
 800331c:	f7ff feac 	bl	8003078 <ST7032i_Command_Write>

  delay_us(27);
 8003320:	201b      	movs	r0, #27
 8003322:	f7fc ff97 	bl	8000254 <delay_us>

  //Clear
  ST7032i_Clear();
}
 8003326:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ST7032i_Command_Write(Display);

  delay_us(27);

  //Clear
  ST7032i_Clear();
 800332a:	e7a9      	b.n	8003280 <ST7032i_Clear>
 800332c:	20000088 	.word	0x20000088

08003330 <ST7032i_Data_Write>:
  * @brief  Write Data to ST7032i
  * @param  Data : "Data" Data
  * @retval None
  */
void ST7032i_Data_Write(uint8_t Data)
{
 8003330:	b507      	push	{r0, r1, r2, lr}
	uint8_t data[] = { 0b01000000, Data };
 8003332:	2340      	movs	r3, #64	; 0x40
 8003334:	f88d 0005 	strb.w	r0, [sp, #5]
	i2c_transmit(ST7032I_ADDR, data, 2);
 8003338:	a901      	add	r1, sp, #4
 800333a:	203e      	movs	r0, #62	; 0x3e
 800333c:	2202      	movs	r2, #2
  * @param  Data : "Data" Data
  * @retval None
  */
void ST7032i_Data_Write(uint8_t Data)
{
	uint8_t data[] = { 0b01000000, Data };
 800333e:	f88d 3004 	strb.w	r3, [sp, #4]
	i2c_transmit(ST7032I_ADDR, data, 2);
 8003342:	f7fd f8db 	bl	80004fc <i2c_transmit>
  I2C_SendData(I2C1, Data);
  /* Test on EV8 and clear it */
  while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
  /* Send STOP condition */
  I2C_GenerateSTOP(I2C1, ENABLE);
}
 8003346:	bd0e      	pop	{r1, r2, r3, pc}

08003348 <ST7032i_Putchar>:
  * @brief  put character on st7032i lcd
  * @param  None
  * @retval None
  */
void ST7032i_Putchar(int8_t chardata)
{
 8003348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800334c:	4604      	mov	r4, r0
  uint32_t i;

  ST7032i_Data_Write((uint8_t)chardata);
 800334e:	b2c0      	uxtb	r0, r0
 8003350:	f7ff ffee 	bl	8003330 <ST7032i_Data_Write>
  delay_us(27);
 8003354:	201b      	movs	r0, #27
 8003356:	f7fc ff7d 	bl	8000254 <delay_us>
  if(DDRAM_Address < 0x10)
 800335a:	4b57      	ldr	r3, [pc, #348]	; (80034b8 <ST7032i_Putchar+0x170>)
 800335c:	781a      	ldrb	r2, [r3, #0]
 800335e:	2a0f      	cmp	r2, #15
    {
      DDRAM_Data[0][DDRAM_Address] = chardata;
 8003360:	781a      	ldrb	r2, [r3, #0]
{
  uint32_t i;

  ST7032i_Data_Write((uint8_t)chardata);
  delay_us(27);
  if(DDRAM_Address < 0x10)
 8003362:	d802      	bhi.n	800336a <ST7032i_Putchar+0x22>
    {
      DDRAM_Data[0][DDRAM_Address] = chardata;
 8003364:	4955      	ldr	r1, [pc, #340]	; (80034bc <ST7032i_Putchar+0x174>)
 8003366:	548c      	strb	r4, [r1, r2]
 8003368:	e008      	b.n	800337c <ST7032i_Putchar+0x34>
    }
  else if (DDRAM_Address >= 0x40 && DDRAM_Address < 0x50)
 800336a:	2a3f      	cmp	r2, #63	; 0x3f
 800336c:	d906      	bls.n	800337c <ST7032i_Putchar+0x34>
 800336e:	781a      	ldrb	r2, [r3, #0]
 8003370:	2a4f      	cmp	r2, #79	; 0x4f
 8003372:	d803      	bhi.n	800337c <ST7032i_Putchar+0x34>
    {
      DDRAM_Data[1][DDRAM_Address - 0x40] = chardata;
 8003374:	7819      	ldrb	r1, [r3, #0]
 8003376:	4a52      	ldr	r2, [pc, #328]	; (80034c0 <ST7032i_Putchar+0x178>)
 8003378:	188a      	adds	r2, r1, r2
 800337a:	7414      	strb	r4, [r2, #16]
    }
  if (Shift == 0)
 800337c:	785b      	ldrb	r3, [r3, #1]
 800337e:	4a4e      	ldr	r2, [pc, #312]	; (80034b8 <ST7032i_Putchar+0x170>)
 8003380:	b933      	cbnz	r3, 8003390 <ST7032i_Putchar+0x48>
    {
      DDRAM_Address = DDRAM_Address + Increment;
 8003382:	4b50      	ldr	r3, [pc, #320]	; (80034c4 <ST7032i_Putchar+0x17c>)
 8003384:	7811      	ldrb	r1, [r2, #0]
 8003386:	791b      	ldrb	r3, [r3, #4]
 8003388:	18cb      	adds	r3, r1, r3
 800338a:	b2db      	uxtb	r3, r3
 800338c:	7013      	strb	r3, [r2, #0]
 800338e:	e032      	b.n	80033f6 <ST7032i_Putchar+0xae>
    }
  else if (Shift == 1 && Increment == 1)
 8003390:	7853      	ldrb	r3, [r2, #1]
 8003392:	2b01      	cmp	r3, #1
 8003394:	d116      	bne.n	80033c4 <ST7032i_Putchar+0x7c>
 8003396:	4b4b      	ldr	r3, [pc, #300]	; (80034c4 <ST7032i_Putchar+0x17c>)
 8003398:	791b      	ldrb	r3, [r3, #4]
 800339a:	2b01      	cmp	r3, #1
 800339c:	d112      	bne.n	80033c4 <ST7032i_Putchar+0x7c>
 800339e:	2200      	movs	r2, #0
    {
      for (i = 0 ; i< 15; i++)
        {
          DDRAM_Data[0][i] = DDRAM_Data[0][i+1];
 80033a0:	4b46      	ldr	r3, [pc, #280]	; (80034bc <ST7032i_Putchar+0x174>)
 80033a2:	e000      	b.n	80033a6 <ST7032i_Putchar+0x5e>
    {
      DDRAM_Address = DDRAM_Address + Increment;
    }
  else if (Shift == 1 && Increment == 1)
    {
      for (i = 0 ; i< 15; i++)
 80033a4:	460a      	mov	r2, r1
        {
          DDRAM_Data[0][i] = DDRAM_Data[0][i+1];
 80033a6:	1c51      	adds	r1, r2, #1
    {
      DDRAM_Address = DDRAM_Address + Increment;
    }
  else if (Shift == 1 && Increment == 1)
    {
      for (i = 0 ; i< 15; i++)
 80033a8:	290f      	cmp	r1, #15
        {
          DDRAM_Data[0][i] = DDRAM_Data[0][i+1];
 80033aa:	5c5c      	ldrb	r4, [r3, r1]
 80033ac:	4843      	ldr	r0, [pc, #268]	; (80034bc <ST7032i_Putchar+0x174>)
 80033ae:	549c      	strb	r4, [r3, r2]
          DDRAM_Data[1][i] = DDRAM_Data[1][i+1];
 80033b0:	eb03 0401 	add.w	r4, r3, r1
 80033b4:	441a      	add	r2, r3
 80033b6:	7c24      	ldrb	r4, [r4, #16]
 80033b8:	7414      	strb	r4, [r2, #16]
    {
      DDRAM_Address = DDRAM_Address + Increment;
    }
  else if (Shift == 1 && Increment == 1)
    {
      for (i = 0 ; i< 15; i++)
 80033ba:	d1f3      	bne.n	80033a4 <ST7032i_Putchar+0x5c>
        {
          DDRAM_Data[0][i] = DDRAM_Data[0][i+1];
          DDRAM_Data[1][i] = DDRAM_Data[1][i+1];
        }
      DDRAM_Data[0][15] = ' ';
 80033bc:	2320      	movs	r3, #32
 80033be:	73c3      	strb	r3, [r0, #15]
      DDRAM_Data[1][15] = ' ';
 80033c0:	77c3      	strb	r3, [r0, #31]
 80033c2:	e018      	b.n	80033f6 <ST7032i_Putchar+0xae>
    }
  else if (Shift == 1 && Increment == -1)
 80033c4:	4b3c      	ldr	r3, [pc, #240]	; (80034b8 <ST7032i_Putchar+0x170>)
 80033c6:	785b      	ldrb	r3, [r3, #1]
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d114      	bne.n	80033f6 <ST7032i_Putchar+0xae>
 80033cc:	4b3d      	ldr	r3, [pc, #244]	; (80034c4 <ST7032i_Putchar+0x17c>)
 80033ce:	791b      	ldrb	r3, [r3, #4]
 80033d0:	b25b      	sxtb	r3, r3
 80033d2:	3301      	adds	r3, #1
 80033d4:	d10f      	bne.n	80033f6 <ST7032i_Putchar+0xae>
    {
      for (i = 15 ; i> 0; i--)
        {
          DDRAM_Data[0][i] = DDRAM_Data[0][i-1];
 80033d6:	4a39      	ldr	r2, [pc, #228]	; (80034bc <ST7032i_Putchar+0x174>)
          DDRAM_Data[1][i] = DDRAM_Data[1][i+1];
        }
      DDRAM_Data[0][15] = ' ';
      DDRAM_Data[1][15] = ' ';
    }
  else if (Shift == 1 && Increment == -1)
 80033d8:	230f      	movs	r3, #15
/**
  * @brief  put character on st7032i lcd
  * @param  None
  * @retval None
  */
void ST7032i_Putchar(int8_t chardata)
 80033da:	1e59      	subs	r1, r3, #1
    }
  else if (Shift == 1 && Increment == -1)
    {
      for (i = 15 ; i> 0; i--)
        {
          DDRAM_Data[0][i] = DDRAM_Data[0][i-1];
 80033dc:	4837      	ldr	r0, [pc, #220]	; (80034bc <ST7032i_Putchar+0x174>)
 80033de:	5c54      	ldrb	r4, [r2, r1]
 80033e0:	54d4      	strb	r4, [r2, r3]
          DDRAM_Data[1][i] = DDRAM_Data[1][i-1];
 80033e2:	1854      	adds	r4, r2, r1
 80033e4:	18d3      	adds	r3, r2, r3
 80033e6:	7c24      	ldrb	r4, [r4, #16]
 80033e8:	741c      	strb	r4, [r3, #16]
      DDRAM_Data[0][15] = ' ';
      DDRAM_Data[1][15] = ' ';
    }
  else if (Shift == 1 && Increment == -1)
    {
      for (i = 15 ; i> 0; i--)
 80033ea:	460b      	mov	r3, r1
 80033ec:	2900      	cmp	r1, #0
 80033ee:	d1f4      	bne.n	80033da <ST7032i_Putchar+0x92>
        {
          DDRAM_Data[0][i] = DDRAM_Data[0][i-1];
          DDRAM_Data[1][i] = DDRAM_Data[1][i-1];
        }
      DDRAM_Data[0][0] = ' ';
 80033f0:	2320      	movs	r3, #32
 80033f2:	7003      	strb	r3, [r0, #0]
      DDRAM_Data[1][0] = ' ';
 80033f4:	7403      	strb	r3, [r0, #16]
    }

  if (DDRAM_Address == 0x10)
 80033f6:	4b30      	ldr	r3, [pc, #192]	; (80034b8 <ST7032i_Putchar+0x170>)
 80033f8:	781a      	ldrb	r2, [r3, #0]
 80033fa:	2a10      	cmp	r2, #16
 80033fc:	d109      	bne.n	8003412 <ST7032i_Putchar+0xca>
    {
      DDRAM_Address = 0x40;
 80033fe:	2240      	movs	r2, #64	; 0x40
 8003400:	701a      	strb	r2, [r3, #0]
      ST7032i_Command_Write(0b10000000 | DDRAM_Address);
 8003402:	7818      	ldrb	r0, [r3, #0]
 8003404:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8003408:	f7ff fe36 	bl	8003078 <ST7032i_Command_Write>
      delay_us(27);
 800340c:	201b      	movs	r0, #27
 800340e:	f7fc ff21 	bl	8000254 <delay_us>
    }

  if (DDRAM_Address == 0x3F)
 8003412:	4b29      	ldr	r3, [pc, #164]	; (80034b8 <ST7032i_Putchar+0x170>)
 8003414:	781a      	ldrb	r2, [r3, #0]
 8003416:	2a3f      	cmp	r2, #63	; 0x3f
 8003418:	d109      	bne.n	800342e <ST7032i_Putchar+0xe6>
    {
      DDRAM_Address = 0x0F;
 800341a:	220f      	movs	r2, #15
 800341c:	701a      	strb	r2, [r3, #0]
      ST7032i_Command_Write(0b10000000 | DDRAM_Address);
 800341e:	7818      	ldrb	r0, [r3, #0]
 8003420:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8003424:	f7ff fe28 	bl	8003078 <ST7032i_Command_Write>
      delay_us(27);
 8003428:	201b      	movs	r0, #27
 800342a:	f7fc ff13 	bl	8000254 <delay_us>
    }

  if (DDRAM_Address == 0xFF)
 800342e:	4b22      	ldr	r3, [pc, #136]	; (80034b8 <ST7032i_Putchar+0x170>)
 8003430:	781a      	ldrb	r2, [r3, #0]
 8003432:	2aff      	cmp	r2, #255	; 0xff
 8003434:	d109      	bne.n	800344a <ST7032i_Putchar+0x102>
    {
      DDRAM_Address = 0x0;
 8003436:	2200      	movs	r2, #0
 8003438:	701a      	strb	r2, [r3, #0]
      ST7032i_Command_Write(0b10000000 | DDRAM_Address);
 800343a:	7818      	ldrb	r0, [r3, #0]
 800343c:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8003440:	f7ff fe1a 	bl	8003078 <ST7032i_Command_Write>
      delay_us(27);
 8003444:	201b      	movs	r0, #27
 8003446:	f7fc ff05 	bl	8000254 <delay_us>
    }

  if (DDRAM_Address == 0x50)
 800344a:	4b1b      	ldr	r3, [pc, #108]	; (80034b8 <ST7032i_Putchar+0x170>)
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	2b50      	cmp	r3, #80	; 0x50
 8003450:	d130      	bne.n	80034b4 <ST7032i_Putchar+0x16c>
    {
      for(i=0;i<16;i++)
        {
          DDRAM_Data[0][i] =  DDRAM_Data[1][i];
 8003452:	4d1a      	ldr	r5, [pc, #104]	; (80034bc <ST7032i_Putchar+0x174>)
      DDRAM_Address = 0x0;
      ST7032i_Command_Write(0b10000000 | DDRAM_Address);
      delay_us(27);
    }

  if (DDRAM_Address == 0x50)
 8003454:	2400      	movs	r4, #0
    {
      for(i=0;i<16;i++)
        {
          DDRAM_Data[0][i] =  DDRAM_Data[1][i];
 8003456:	192b      	adds	r3, r5, r4
          ST7032i_Command_Write(0b10000000 | (0x00 + i));
 8003458:	f064 007f 	orn	r0, r4, #127	; 0x7f

  if (DDRAM_Address == 0x50)
    {
      for(i=0;i<16;i++)
        {
          DDRAM_Data[0][i] =  DDRAM_Data[1][i];
 800345c:	7c1b      	ldrb	r3, [r3, #16]
          ST7032i_Command_Write(0b10000000 | (0x00 + i));
 800345e:	b2c0      	uxtb	r0, r0

  if (DDRAM_Address == 0x50)
    {
      for(i=0;i<16;i++)
        {
          DDRAM_Data[0][i] =  DDRAM_Data[1][i];
 8003460:	552b      	strb	r3, [r5, r4]
          ST7032i_Command_Write(0b10000000 | (0x00 + i));
 8003462:	f7ff fe09 	bl	8003078 <ST7032i_Command_Write>
          ST7032i_Data_Write(DDRAM_Data[0][i]);
 8003466:	5d28      	ldrb	r0, [r5, r4]
      delay_us(27);
    }

  if (DDRAM_Address == 0x50)
    {
      for(i=0;i<16;i++)
 8003468:	3401      	adds	r4, #1
        {
          DDRAM_Data[0][i] =  DDRAM_Data[1][i];
          ST7032i_Command_Write(0b10000000 | (0x00 + i));
          ST7032i_Data_Write(DDRAM_Data[0][i]);
 800346a:	f7ff ff61 	bl	8003330 <ST7032i_Data_Write>
      delay_us(27);
    }

  if (DDRAM_Address == 0x50)
    {
      for(i=0;i<16;i++)
 800346e:	2c10      	cmp	r4, #16
 8003470:	d1f1      	bne.n	8003456 <ST7032i_Putchar+0x10e>
          ST7032i_Command_Write(0b10000000 | (0x00 + i));
          ST7032i_Data_Write(DDRAM_Data[0][i]);
        }
      for(i=0;i<16;i++)
        {
          DDRAM_Data[1][i] =  ' ';
 8003472:	f8df 8048 	ldr.w	r8, [pc, #72]	; 80034bc <ST7032i_Putchar+0x174>
      delay_us(27);
    }

  if (DDRAM_Address == 0x50)
    {
      for(i=0;i<16;i++)
 8003476:	2540      	movs	r5, #64	; 0x40
 8003478:	2400      	movs	r4, #0
          ST7032i_Command_Write(0b10000000 | (0x00 + i));
          ST7032i_Data_Write(DDRAM_Data[0][i]);
        }
      for(i=0;i<16;i++)
        {
          DDRAM_Data[1][i] =  ' ';
 800347a:	2720      	movs	r7, #32
 800347c:	eb08 0604 	add.w	r6, r8, r4
          ST7032i_Command_Write(0b10000000 | (0x40 + i));
 8003480:	f045 0080 	orr.w	r0, r5, #128	; 0x80
          ST7032i_Command_Write(0b10000000 | (0x00 + i));
          ST7032i_Data_Write(DDRAM_Data[0][i]);
        }
      for(i=0;i<16;i++)
        {
          DDRAM_Data[1][i] =  ' ';
 8003484:	7437      	strb	r7, [r6, #16]
          ST7032i_Command_Write(0b10000000 | (0x40 + i));
 8003486:	f7ff fdf7 	bl	8003078 <ST7032i_Command_Write>
        {
          DDRAM_Data[0][i] =  DDRAM_Data[1][i];
          ST7032i_Command_Write(0b10000000 | (0x00 + i));
          ST7032i_Data_Write(DDRAM_Data[0][i]);
        }
      for(i=0;i<16;i++)
 800348a:	3401      	adds	r4, #1
        {
          DDRAM_Data[1][i] =  ' ';
          ST7032i_Command_Write(0b10000000 | (0x40 + i));
          ST7032i_Data_Write(DDRAM_Data[1][i]);
 800348c:	7c30      	ldrb	r0, [r6, #16]
        {
          DDRAM_Data[0][i] =  DDRAM_Data[1][i];
          ST7032i_Command_Write(0b10000000 | (0x00 + i));
          ST7032i_Data_Write(DDRAM_Data[0][i]);
        }
      for(i=0;i<16;i++)
 800348e:	3501      	adds	r5, #1
        {
          DDRAM_Data[1][i] =  ' ';
          ST7032i_Command_Write(0b10000000 | (0x40 + i));
          ST7032i_Data_Write(DDRAM_Data[1][i]);
 8003490:	f7ff ff4e 	bl	8003330 <ST7032i_Data_Write>
        {
          DDRAM_Data[0][i] =  DDRAM_Data[1][i];
          ST7032i_Command_Write(0b10000000 | (0x00 + i));
          ST7032i_Data_Write(DDRAM_Data[0][i]);
        }
      for(i=0;i<16;i++)
 8003494:	2c10      	cmp	r4, #16
 8003496:	b2ed      	uxtb	r5, r5
 8003498:	d1f0      	bne.n	800347c <ST7032i_Putchar+0x134>
          DDRAM_Data[1][i] =  ' ';
          ST7032i_Command_Write(0b10000000 | (0x40 + i));
          ST7032i_Data_Write(DDRAM_Data[1][i]);
        }

      DDRAM_Address = 0x40;
 800349a:	4b07      	ldr	r3, [pc, #28]	; (80034b8 <ST7032i_Putchar+0x170>)
 800349c:	2240      	movs	r2, #64	; 0x40
 800349e:	701a      	strb	r2, [r3, #0]
      ST7032i_Command_Write(0b10000000 | DDRAM_Address);
 80034a0:	7818      	ldrb	r0, [r3, #0]
 80034a2:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 80034a6:	f7ff fde7 	bl	8003078 <ST7032i_Command_Write>
      delay_us(27);
 80034aa:	201b      	movs	r0, #27
    }
}
 80034ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
          ST7032i_Data_Write(DDRAM_Data[1][i]);
        }

      DDRAM_Address = 0x40;
      ST7032i_Command_Write(0b10000000 | DDRAM_Address);
      delay_us(27);
 80034b0:	f7fc bed0 	b.w	8000254 <delay_us>
 80034b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80034b8:	20000984 	.word	0x20000984
 80034bc:	20001620 	.word	0x20001620
 80034c0:	200015e0 	.word	0x200015e0
 80034c4:	20000088 	.word	0x20000088

080034c8 <ST7032i_Print_String>:
  * @brief  Print string to LCD
  * @param  String: Array which contain string
  * @retval None
  */
void ST7032i_Print_String(const int8_t String[])
{
 80034c8:	b538      	push	{r3, r4, r5, lr}
 80034ca:	4605      	mov	r5, r0
  uint8_t i = 0;
 80034cc:	2400      	movs	r4, #0
  while(String[i] != '\0')
 80034ce:	e004      	b.n	80034da <ST7032i_Print_String+0x12>
    {
      ST7032i_Putchar(String[i]);
 80034d0:	b240      	sxtb	r0, r0
 80034d2:	f7ff ff39 	bl	8003348 <ST7032i_Putchar>
      i++;
 80034d6:	3401      	adds	r4, #1
 80034d8:	b2e4      	uxtb	r4, r4
  * @retval None
  */
void ST7032i_Print_String(const int8_t String[])
{
  uint8_t i = 0;
  while(String[i] != '\0')
 80034da:	5d28      	ldrb	r0, [r5, r4]
 80034dc:	2800      	cmp	r0, #0
 80034de:	d1f7      	bne.n	80034d0 <ST7032i_Print_String+0x8>
    {
      ST7032i_Putchar(String[i]);
      i++;
    }
}
 80034e0:	bd38      	pop	{r3, r4, r5, pc}

080034e2 <ST7032i_Icon_Clear>:
  * @brief  Clear icon. value is to be 0 - 12
  * @param  numbet : icon number
  * @retval None
  */
void ST7032i_Icon_Clear(uint8_t number)
{
 80034e2:	b538      	push	{r3, r4, r5, lr}
  //icon address set
  ST7032i_Command_Write(0b01000000 | Icon_Table[number][0] );
 80034e4:	4c10      	ldr	r4, [pc, #64]	; (8003528 <ST7032i_Icon_Clear+0x46>)
 80034e6:	eb04 0440 	add.w	r4, r4, r0, lsl #1
  * @brief  Clear icon. value is to be 0 - 12
  * @param  numbet : icon number
  * @retval None
  */
void ST7032i_Icon_Clear(uint8_t number)
{
 80034ea:	4605      	mov	r5, r0
  //icon address set
  ST7032i_Command_Write(0b01000000 | Icon_Table[number][0] );
 80034ec:	7960      	ldrb	r0, [r4, #5]
 80034ee:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 80034f2:	f7ff fdc1 	bl	8003078 <ST7032i_Command_Write>
  delay_us(27);
 80034f6:	201b      	movs	r0, #27
 80034f8:	f7fc feac 	bl	8000254 <delay_us>

  //icon data reset
  ST7032i_Data_Write(IconRAM[number] & (~Icon_Table[number][1]));
 80034fc:	4b0b      	ldr	r3, [pc, #44]	; (800352c <ST7032i_Icon_Clear+0x4a>)
 80034fe:	5d5b      	ldrb	r3, [r3, r5]
 8003500:	79a0      	ldrb	r0, [r4, #6]
 8003502:	ea23 0000 	bic.w	r0, r3, r0
 8003506:	f7ff ff13 	bl	8003330 <ST7032i_Data_Write>
  delay_us(27);
 800350a:	201b      	movs	r0, #27
 800350c:	f7fc fea2 	bl	8000254 <delay_us>

  //restore DDRAM address to ac
  ST7032i_Command_Write(0b10000000 | DDRAM_Address);
 8003510:	4b07      	ldr	r3, [pc, #28]	; (8003530 <ST7032i_Icon_Clear+0x4e>)
 8003512:	7818      	ldrb	r0, [r3, #0]
 8003514:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8003518:	f7ff fdae 	bl	8003078 <ST7032i_Command_Write>
  delay_us(27);
 800351c:	201b      	movs	r0, #27

}
 800351e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  ST7032i_Data_Write(IconRAM[number] & (~Icon_Table[number][1]));
  delay_us(27);

  //restore DDRAM address to ac
  ST7032i_Command_Write(0b10000000 | DDRAM_Address);
  delay_us(27);
 8003522:	f7fc be97 	b.w	8000254 <delay_us>
 8003526:	bf00      	nop
 8003528:	20000088 	.word	0x20000088
 800352c:	20001640 	.word	0x20001640
 8003530:	20000984 	.word	0x20000984

08003534 <ST7032i_Icon_Set>:
  * @brief  Put icon. value is to be 0 - 12
  * @param  numbet : icon number
  * @retval None
  */
void ST7032i_Icon_Set(uint8_t number)
{
 8003534:	b538      	push	{r3, r4, r5, lr}
  //icon address set
  ST7032i_Command_Write(0b01000000 | Icon_Table[number][0] );
 8003536:	4c10      	ldr	r4, [pc, #64]	; (8003578 <ST7032i_Icon_Set+0x44>)
 8003538:	eb04 0440 	add.w	r4, r4, r0, lsl #1
  * @brief  Put icon. value is to be 0 - 12
  * @param  numbet : icon number
  * @retval None
  */
void ST7032i_Icon_Set(uint8_t number)
{
 800353c:	4605      	mov	r5, r0
  //icon address set
  ST7032i_Command_Write(0b01000000 | Icon_Table[number][0] );
 800353e:	7960      	ldrb	r0, [r4, #5]
 8003540:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8003544:	f7ff fd98 	bl	8003078 <ST7032i_Command_Write>
  delay_us(27);
 8003548:	201b      	movs	r0, #27
 800354a:	f7fc fe83 	bl	8000254 <delay_us>

  //icon data set
  ST7032i_Data_Write(IconRAM[number] | Icon_Table[number][1]);
 800354e:	4b0b      	ldr	r3, [pc, #44]	; (800357c <ST7032i_Icon_Set+0x48>)
 8003550:	5d58      	ldrb	r0, [r3, r5]
 8003552:	79a3      	ldrb	r3, [r4, #6]
 8003554:	4318      	orrs	r0, r3
 8003556:	f7ff feeb 	bl	8003330 <ST7032i_Data_Write>
  delay_us(27);
 800355a:	201b      	movs	r0, #27
 800355c:	f7fc fe7a 	bl	8000254 <delay_us>

  //restore DDRAM address to ac
  ST7032i_Command_Write(0b10000000 | DDRAM_Address);
 8003560:	4b07      	ldr	r3, [pc, #28]	; (8003580 <ST7032i_Icon_Set+0x4c>)
 8003562:	7818      	ldrb	r0, [r3, #0]
 8003564:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8003568:	f7ff fd86 	bl	8003078 <ST7032i_Command_Write>
  delay_us(27);
 800356c:	201b      	movs	r0, #27
}
 800356e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  ST7032i_Data_Write(IconRAM[number] | Icon_Table[number][1]);
  delay_us(27);

  //restore DDRAM address to ac
  ST7032i_Command_Write(0b10000000 | DDRAM_Address);
  delay_us(27);
 8003572:	f7fc be6f 	b.w	8000254 <delay_us>
 8003576:	bf00      	nop
 8003578:	20000088 	.word	0x20000088
 800357c:	20001640 	.word	0x20001640
 8003580:	20000984 	.word	0x20000984
 8003584:	08008b0c 	.word	0x08008b0c
 8003588:	20000000 	.word	0x20000000
 800358c:	2000097c 	.word	0x2000097c
 8003590:	2000097c 	.word	0x2000097c
 8003594:	20001654 	.word	0x20001654

08003598 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8003598:	4770      	bx	lr

0800359a <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800359a:	e7fe      	b.n	800359a <HardFault_Handler>

0800359c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800359c:	e7fe      	b.n	800359c <MemManage_Handler>

0800359e <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800359e:	e7fe      	b.n	800359e <BusFault_Handler>

080035a0 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80035a0:	e7fe      	b.n	80035a0 <UsageFault_Handler>

080035a2 <SVC_Handler>:
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
}
 80035a2:	4770      	bx	lr

080035a4 <DebugMon_Handler>:
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
}
 80035a4:	4770      	bx	lr

080035a6 <PendSV_Handler>:
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
}
 80035a6:	4770      	bx	lr

080035a8 <SystemInit>:
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80035a8:	4b33      	ldr	r3, [pc, #204]	; (8003678 <SystemInit+0xd0>)
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	f042 0201 	orr.w	r2, r2, #1
 80035b0:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80035b2:	2200      	movs	r2, #0
 80035b4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80035b6:	6819      	ldr	r1, [r3, #0]
 80035b8:	f021 7184 	bic.w	r1, r1, #17301504	; 0x1080000
 80035bc:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80035c0:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80035c2:	492e      	ldr	r1, [pc, #184]	; (800367c <SystemInit+0xd4>)
 80035c4:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80035c6:	6819      	ldr	r1, [r3, #0]
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80035c8:	b082      	sub	sp, #8

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80035ca:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 80035ce:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80035d0:	60da      	str	r2, [r3, #12]
static void SetSysClock(void)
{
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80035d2:	9200      	str	r2, [sp, #0]
 80035d4:	9201      	str	r2, [sp, #4]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80035dc:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80035e4:	9201      	str	r2, [sp, #4]
    StartUpCounter++;
 80035e6:	9a00      	ldr	r2, [sp, #0]
 80035e8:	3201      	adds	r2, #1
 80035ea:	9200      	str	r2, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80035ec:	9a01      	ldr	r2, [sp, #4]
 80035ee:	b91a      	cbnz	r2, 80035f8 <SystemInit+0x50>
 80035f0:	9a00      	ldr	r2, [sp, #0]
 80035f2:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 80035f6:	d1f2      	bne.n	80035de <SystemInit+0x36>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80035f8:	4b1f      	ldr	r3, [pc, #124]	; (8003678 <SystemInit+0xd0>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
 8003600:	bf18      	it	ne
 8003602:	2301      	movne	r3, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8003604:	9301      	str	r3, [sp, #4]
  }

  if (HSEStatus == (uint32_t)0x01)
 8003606:	9b01      	ldr	r3, [sp, #4]
 8003608:	2b01      	cmp	r3, #1
 800360a:	d12e      	bne.n	800366a <SystemInit+0xc2>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800360c:	4b1a      	ldr	r3, [pc, #104]	; (8003678 <SystemInit+0xd0>)
 800360e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003610:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003614:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8003616:	4a1a      	ldr	r2, [pc, #104]	; (8003680 <SystemInit+0xd8>)
 8003618:	6811      	ldr	r1, [r2, #0]
 800361a:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800361e:	6011      	str	r1, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8003620:	689a      	ldr	r2, [r3, #8]
 8003622:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8003624:	689a      	ldr	r2, [r3, #8]
 8003626:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800362a:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 800362c:	689a      	ldr	r2, [r3, #8]
 800362e:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 8003632:	609a      	str	r2, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8003634:	4a13      	ldr	r2, [pc, #76]	; (8003684 <SystemInit+0xdc>)
 8003636:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800363e:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8003640:	6819      	ldr	r1, [r3, #0]
 8003642:	4a0d      	ldr	r2, [pc, #52]	; (8003678 <SystemInit+0xd0>)
 8003644:	0189      	lsls	r1, r1, #6
 8003646:	d5fb      	bpl.n	8003640 <SystemInit+0x98>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8003648:	4b0f      	ldr	r3, [pc, #60]	; (8003688 <SystemInit+0xe0>)
 800364a:	f240 6105 	movw	r1, #1541	; 0x605
 800364e:	6019      	str	r1, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8003650:	6893      	ldr	r3, [r2, #8]
 8003652:	f023 0303 	bic.w	r3, r3, #3
 8003656:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8003658:	6893      	ldr	r3, [r2, #8]
 800365a:	f043 0302 	orr.w	r3, r3, #2
 800365e:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8003660:	6893      	ldr	r3, [r2, #8]
 8003662:	f003 030c 	and.w	r3, r3, #12
 8003666:	2b08      	cmp	r3, #8
 8003668:	d1fa      	bne.n	8003660 <SystemInit+0xb8>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800366a:	4b08      	ldr	r3, [pc, #32]	; (800368c <SystemInit+0xe4>)
 800366c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003670:	609a      	str	r2, [r3, #8]
#endif
}
 8003672:	b002      	add	sp, #8
 8003674:	4770      	bx	lr
 8003676:	bf00      	nop
 8003678:	40023800 	.word	0x40023800
 800367c:	24003010 	.word	0x24003010
 8003680:	40007000 	.word	0x40007000
 8003684:	07405419 	.word	0x07405419
 8003688:	40023c00 	.word	0x40023c00
 800368c:	e000ed00 	.word	0xe000ed00

08003690 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8003690:	4b18      	ldr	r3, [pc, #96]	; (80036f4 <SystemCoreClockUpdate+0x64>)
 8003692:	4a19      	ldr	r2, [pc, #100]	; (80036f8 <SystemCoreClockUpdate+0x68>)
 8003694:	6899      	ldr	r1, [r3, #8]
 8003696:	f001 010c 	and.w	r1, r1, #12

  switch (tmp)
 800369a:	2904      	cmp	r1, #4
 800369c:	d003      	beq.n	80036a6 <SystemCoreClockUpdate+0x16>
 800369e:	2908      	cmp	r1, #8
 80036a0:	d003      	beq.n	80036aa <SystemCoreClockUpdate+0x1a>
 80036a2:	4b16      	ldr	r3, [pc, #88]	; (80036fc <SystemCoreClockUpdate+0x6c>)
 80036a4:	e019      	b.n	80036da <SystemCoreClockUpdate+0x4a>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80036a6:	4b16      	ldr	r3, [pc, #88]	; (8003700 <SystemCoreClockUpdate+0x70>)
 80036a8:	e017      	b.n	80036da <SystemCoreClockUpdate+0x4a>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80036aa:	6859      	ldr	r1, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036ac:	685a      	ldr	r2, [r3, #4]
      
      if (pllsource != 0)
 80036ae:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80036b2:	6859      	ldr	r1, [r3, #4]
 80036b4:	bf14      	ite	ne
 80036b6:	4b12      	ldrne	r3, [pc, #72]	; (8003700 <SystemCoreClockUpdate+0x70>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80036b8:	4b10      	ldreq	r3, [pc, #64]	; (80036fc <SystemCoreClockUpdate+0x6c>)

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036ba:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80036be:	fbb3 f3f2 	udiv	r3, r3, r2
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80036c2:	4a0c      	ldr	r2, [pc, #48]	; (80036f4 <SystemCoreClockUpdate+0x64>)
 80036c4:	6852      	ldr	r2, [r2, #4]
 80036c6:	f3c2 4201 	ubfx	r2, r2, #16, #2
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80036ca:	f3c1 1188 	ubfx	r1, r1, #6, #9
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80036ce:	3201      	adds	r2, #1
 80036d0:	0052      	lsls	r2, r2, #1
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80036d2:	434b      	muls	r3, r1
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
      SystemCoreClock = pllvco/pllp;
 80036d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80036d8:	4a07      	ldr	r2, [pc, #28]	; (80036f8 <SystemCoreClockUpdate+0x68>)
 80036da:	6013      	str	r3, [r2, #0]
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80036dc:	4b05      	ldr	r3, [pc, #20]	; (80036f4 <SystemCoreClockUpdate+0x64>)
 80036de:	689a      	ldr	r2, [r3, #8]
 80036e0:	4b05      	ldr	r3, [pc, #20]	; (80036f8 <SystemCoreClockUpdate+0x68>)
 80036e2:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80036e6:	189a      	adds	r2, r3, r2
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80036e8:	6819      	ldr	r1, [r3, #0]
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80036ea:	7912      	ldrb	r2, [r2, #4]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80036ec:	fa31 f202 	lsrs.w	r2, r1, r2
 80036f0:	601a      	str	r2, [r3, #0]
}
 80036f2:	4770      	bx	lr
 80036f4:	40023800 	.word	0x40023800
 80036f8:	200000a8 	.word	0x200000a8
 80036fc:	00f42400 	.word	0x00f42400
 8003700:	007a1200 	.word	0x007a1200

08003704 <cleanup_glue>:
 8003704:	b538      	push	{r3, r4, r5, lr}
 8003706:	460c      	mov	r4, r1
 8003708:	6809      	ldr	r1, [r1, #0]
 800370a:	4605      	mov	r5, r0
 800370c:	b109      	cbz	r1, 8003712 <cleanup_glue+0xe>
 800370e:	f7ff fff9 	bl	8003704 <cleanup_glue>
 8003712:	4628      	mov	r0, r5
 8003714:	4621      	mov	r1, r4
 8003716:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800371a:	f002 ba21 	b.w	8005b60 <_free_r>
 800371e:	bf00      	nop

08003720 <_reclaim_reent>:
 8003720:	4b22      	ldr	r3, [pc, #136]	; (80037ac <_reclaim_reent+0x8c>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4298      	cmp	r0, r3
 8003726:	b570      	push	{r4, r5, r6, lr}
 8003728:	4605      	mov	r5, r0
 800372a:	d032      	beq.n	8003792 <_reclaim_reent+0x72>
 800372c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800372e:	b1ab      	cbz	r3, 800375c <_reclaim_reent+0x3c>
 8003730:	2200      	movs	r2, #0
 8003732:	4616      	mov	r6, r2
 8003734:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003738:	b909      	cbnz	r1, 800373e <_reclaim_reent+0x1e>
 800373a:	e007      	b.n	800374c <_reclaim_reent+0x2c>
 800373c:	4621      	mov	r1, r4
 800373e:	680c      	ldr	r4, [r1, #0]
 8003740:	4628      	mov	r0, r5
 8003742:	f002 fa0d 	bl	8005b60 <_free_r>
 8003746:	2c00      	cmp	r4, #0
 8003748:	d1f8      	bne.n	800373c <_reclaim_reent+0x1c>
 800374a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800374c:	3601      	adds	r6, #1
 800374e:	2e20      	cmp	r6, #32
 8003750:	4632      	mov	r2, r6
 8003752:	d1ef      	bne.n	8003734 <_reclaim_reent+0x14>
 8003754:	4628      	mov	r0, r5
 8003756:	4619      	mov	r1, r3
 8003758:	f002 fa02 	bl	8005b60 <_free_r>
 800375c:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800375e:	b111      	cbz	r1, 8003766 <_reclaim_reent+0x46>
 8003760:	4628      	mov	r0, r5
 8003762:	f002 f9fd 	bl	8005b60 <_free_r>
 8003766:	f8d5 1148 	ldr.w	r1, [r5, #328]	; 0x148
 800376a:	b159      	cbz	r1, 8003784 <_reclaim_reent+0x64>
 800376c:	f505 76a6 	add.w	r6, r5, #332	; 0x14c
 8003770:	42b1      	cmp	r1, r6
 8003772:	d101      	bne.n	8003778 <_reclaim_reent+0x58>
 8003774:	e006      	b.n	8003784 <_reclaim_reent+0x64>
 8003776:	4621      	mov	r1, r4
 8003778:	680c      	ldr	r4, [r1, #0]
 800377a:	4628      	mov	r0, r5
 800377c:	f002 f9f0 	bl	8005b60 <_free_r>
 8003780:	42a6      	cmp	r6, r4
 8003782:	d1f8      	bne.n	8003776 <_reclaim_reent+0x56>
 8003784:	6d69      	ldr	r1, [r5, #84]	; 0x54
 8003786:	b111      	cbz	r1, 800378e <_reclaim_reent+0x6e>
 8003788:	4628      	mov	r0, r5
 800378a:	f002 f9e9 	bl	8005b60 <_free_r>
 800378e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8003790:	b903      	cbnz	r3, 8003794 <_reclaim_reent+0x74>
 8003792:	bd70      	pop	{r4, r5, r6, pc}
 8003794:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8003796:	4628      	mov	r0, r5
 8003798:	4798      	blx	r3
 800379a:	f8d5 12e0 	ldr.w	r1, [r5, #736]	; 0x2e0
 800379e:	2900      	cmp	r1, #0
 80037a0:	d0f7      	beq.n	8003792 <_reclaim_reent+0x72>
 80037a2:	4628      	mov	r0, r5
 80037a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80037a8:	e7ac      	b.n	8003704 <cleanup_glue>
 80037aa:	bf00      	nop
 80037ac:	200000c0 	.word	0x200000c0

080037b0 <_wrapup_reent>:
 80037b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037b2:	4607      	mov	r7, r0
 80037b4:	b1b0      	cbz	r0, 80037e4 <_wrapup_reent+0x34>
 80037b6:	f8d7 6148 	ldr.w	r6, [r7, #328]	; 0x148
 80037ba:	b176      	cbz	r6, 80037da <_wrapup_reent+0x2a>
 80037bc:	6875      	ldr	r5, [r6, #4]
 80037be:	1e6c      	subs	r4, r5, #1
 80037c0:	d408      	bmi.n	80037d4 <_wrapup_reent+0x24>
 80037c2:	3502      	adds	r5, #2
 80037c4:	eb06 0585 	add.w	r5, r6, r5, lsl #2
 80037c8:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80037cc:	3c01      	subs	r4, #1
 80037ce:	4798      	blx	r3
 80037d0:	1c63      	adds	r3, r4, #1
 80037d2:	d1f9      	bne.n	80037c8 <_wrapup_reent+0x18>
 80037d4:	6836      	ldr	r6, [r6, #0]
 80037d6:	2e00      	cmp	r6, #0
 80037d8:	d1f0      	bne.n	80037bc <_wrapup_reent+0xc>
 80037da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037dc:	b10b      	cbz	r3, 80037e2 <_wrapup_reent+0x32>
 80037de:	4638      	mov	r0, r7
 80037e0:	4798      	blx	r3
 80037e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037e4:	4b01      	ldr	r3, [pc, #4]	; (80037ec <_wrapup_reent+0x3c>)
 80037e6:	681f      	ldr	r7, [r3, #0]
 80037e8:	e7e5      	b.n	80037b6 <_wrapup_reent+0x6>
 80037ea:	bf00      	nop
 80037ec:	200000c0 	.word	0x200000c0

080037f0 <_sprintf_r>:
 80037f0:	b40c      	push	{r2, r3}
 80037f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037f4:	b09d      	sub	sp, #116	; 0x74
 80037f6:	ac22      	add	r4, sp, #136	; 0x88
 80037f8:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 80037fc:	f854 2b04 	ldr.w	r2, [r4], #4
 8003800:	9101      	str	r1, [sp, #4]
 8003802:	460e      	mov	r6, r1
 8003804:	4623      	mov	r3, r4
 8003806:	9503      	str	r5, [sp, #12]
 8003808:	9506      	str	r5, [sp, #24]
 800380a:	a901      	add	r1, sp, #4
 800380c:	f44f 7702 	mov.w	r7, #520	; 0x208
 8003810:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8003814:	f8ad 7010 	strh.w	r7, [sp, #16]
 8003818:	9605      	str	r6, [sp, #20]
 800381a:	f8ad 5012 	strh.w	r5, [sp, #18]
 800381e:	941b      	str	r4, [sp, #108]	; 0x6c
 8003820:	f000 f830 	bl	8003884 <_svfprintf_r>
 8003824:	9b01      	ldr	r3, [sp, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	701a      	strb	r2, [r3, #0]
 800382a:	b01d      	add	sp, #116	; 0x74
 800382c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8003830:	b002      	add	sp, #8
 8003832:	4770      	bx	lr

08003834 <sprintf>:
 8003834:	b40e      	push	{r1, r2, r3}
 8003836:	b570      	push	{r4, r5, r6, lr}
 8003838:	b09d      	sub	sp, #116	; 0x74
 800383a:	ac21      	add	r4, sp, #132	; 0x84
 800383c:	f240 03c0 	movw	r3, #192	; 0xc0
 8003840:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003844:	f854 2b04 	ldr.w	r2, [r4], #4
 8003848:	4606      	mov	r6, r0
 800384a:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 800384e:	6818      	ldr	r0, [r3, #0]
 8003850:	9503      	str	r5, [sp, #12]
 8003852:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003856:	f8ad 3010 	strh.w	r3, [sp, #16]
 800385a:	9506      	str	r5, [sp, #24]
 800385c:	4623      	mov	r3, r4
 800385e:	a901      	add	r1, sp, #4
 8003860:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8003864:	9601      	str	r6, [sp, #4]
 8003866:	9605      	str	r6, [sp, #20]
 8003868:	f8ad 5012 	strh.w	r5, [sp, #18]
 800386c:	941b      	str	r4, [sp, #108]	; 0x6c
 800386e:	f000 f809 	bl	8003884 <_svfprintf_r>
 8003872:	9b01      	ldr	r3, [sp, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	701a      	strb	r2, [r3, #0]
 8003878:	b01d      	add	sp, #116	; 0x74
 800387a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800387e:	b003      	add	sp, #12
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop

08003884 <_svfprintf_r>:
 8003884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003888:	b0c5      	sub	sp, #276	; 0x114
 800388a:	468a      	mov	sl, r1
 800388c:	4614      	mov	r4, r2
 800388e:	930e      	str	r3, [sp, #56]	; 0x38
 8003890:	900f      	str	r0, [sp, #60]	; 0x3c
 8003892:	f002 fa5d 	bl	8005d50 <_localeconv_r>
 8003896:	6800      	ldr	r0, [r0, #0]
 8003898:	9017      	str	r0, [sp, #92]	; 0x5c
 800389a:	f003 fb33 	bl	8006f04 <strlen>
 800389e:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 80038a2:	901a      	str	r0, [sp, #104]	; 0x68
 80038a4:	2100      	movs	r1, #0
 80038a6:	2000      	movs	r0, #0
 80038a8:	061a      	lsls	r2, r3, #24
 80038aa:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
 80038ae:	d504      	bpl.n	80038ba <_svfprintf_r+0x36>
 80038b0:	f8da 3010 	ldr.w	r3, [sl, #16]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	f001 8004 	beq.w	80048c2 <_svfprintf_r+0x103e>
 80038ba:	2300      	movs	r3, #0
 80038bc:	f10d 00e3 	add.w	r0, sp, #227	; 0xe3
 80038c0:	f10d 0be4 	add.w	fp, sp, #228	; 0xe4
 80038c4:	a91f      	add	r1, sp, #124	; 0x7c
 80038c6:	9310      	str	r3, [sp, #64]	; 0x40
 80038c8:	933b      	str	r3, [sp, #236]	; 0xec
 80038ca:	933a      	str	r3, [sp, #232]	; 0xe8
 80038cc:	931c      	str	r3, [sp, #112]	; 0x70
 80038ce:	931b      	str	r3, [sp, #108]	; 0x6c
 80038d0:	930c      	str	r3, [sp, #48]	; 0x30
 80038d2:	ebc0 030b 	rsb	r3, r0, fp
 80038d6:	9007      	str	r0, [sp, #28]
 80038d8:	9139      	str	r1, [sp, #228]	; 0xe4
 80038da:	9409      	str	r4, [sp, #36]	; 0x24
 80038dc:	460e      	mov	r6, r1
 80038de:	931d      	str	r3, [sp, #116]	; 0x74
 80038e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80038e2:	7803      	ldrb	r3, [r0, #0]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	bf18      	it	ne
 80038e8:	2b25      	cmpne	r3, #37	; 0x25
 80038ea:	f000 80af 	beq.w	8003a4c <_svfprintf_r+0x1c8>
 80038ee:	4607      	mov	r7, r0
 80038f0:	f817 3f01 	ldrb.w	r3, [r7, #1]!
 80038f4:	2b25      	cmp	r3, #37	; 0x25
 80038f6:	bf18      	it	ne
 80038f8:	2b00      	cmpne	r3, #0
 80038fa:	d1f9      	bne.n	80038f0 <_svfprintf_r+0x6c>
 80038fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80038fe:	ebb7 0801 	subs.w	r8, r7, r1
 8003902:	d00e      	beq.n	8003922 <_svfprintf_r+0x9e>
 8003904:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003906:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003908:	6031      	str	r1, [r6, #0]
 800390a:	3401      	adds	r4, #1
 800390c:	4445      	add	r5, r8
 800390e:	2c07      	cmp	r4, #7
 8003910:	f8c6 8004 	str.w	r8, [r6, #4]
 8003914:	953b      	str	r5, [sp, #236]	; 0xec
 8003916:	943a      	str	r4, [sp, #232]	; 0xe8
 8003918:	dc7c      	bgt.n	8003a14 <_svfprintf_r+0x190>
 800391a:	3608      	adds	r6, #8
 800391c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800391e:	4442      	add	r2, r8
 8003920:	920c      	str	r2, [sp, #48]	; 0x30
 8003922:	783b      	ldrb	r3, [r7, #0]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d07d      	beq.n	8003a24 <_svfprintf_r+0x1a0>
 8003928:	3701      	adds	r7, #1
 800392a:	9709      	str	r7, [sp, #36]	; 0x24
 800392c:	2300      	movs	r3, #0
 800392e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003930:	930b      	str	r3, [sp, #44]	; 0x2c
 8003932:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
 8003936:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800393a:	9308      	str	r3, [sp, #32]
 800393c:	2720      	movs	r7, #32
 800393e:	252b      	movs	r5, #43	; 0x2b
 8003940:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003944:	f1a3 0220 	sub.w	r2, r3, #32
 8003948:	2a58      	cmp	r2, #88	; 0x58
 800394a:	f200 823b 	bhi.w	8003dc4 <_svfprintf_r+0x540>
 800394e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8003952:	024c      	.short	0x024c
 8003954:	02390239 	.word	0x02390239
 8003958:	02390254 	.word	0x02390254
 800395c:	02390239 	.word	0x02390239
 8003960:	02390239 	.word	0x02390239
 8003964:	02590239 	.word	0x02590239
 8003968:	0239007f 	.word	0x0239007f
 800396c:	0082005c 	.word	0x0082005c
 8003970:	009d0239 	.word	0x009d0239
 8003974:	00a200a2 	.word	0x00a200a2
 8003978:	00a200a2 	.word	0x00a200a2
 800397c:	00a200a2 	.word	0x00a200a2
 8003980:	00a200a2 	.word	0x00a200a2
 8003984:	023900a2 	.word	0x023900a2
 8003988:	02390239 	.word	0x02390239
 800398c:	02390239 	.word	0x02390239
 8003990:	02390239 	.word	0x02390239
 8003994:	02390239 	.word	0x02390239
 8003998:	00b50239 	.word	0x00b50239
 800399c:	02390154 	.word	0x02390154
 80039a0:	02390154 	.word	0x02390154
 80039a4:	02390239 	.word	0x02390239
 80039a8:	018b0239 	.word	0x018b0239
 80039ac:	02390239 	.word	0x02390239
 80039b0:	02390190 	.word	0x02390190
 80039b4:	02390239 	.word	0x02390239
 80039b8:	02390239 	.word	0x02390239
 80039bc:	023901a7 	.word	0x023901a7
 80039c0:	01ba0239 	.word	0x01ba0239
 80039c4:	02390239 	.word	0x02390239
 80039c8:	02390239 	.word	0x02390239
 80039cc:	02390239 	.word	0x02390239
 80039d0:	02390239 	.word	0x02390239
 80039d4:	02390239 	.word	0x02390239
 80039d8:	02780293 	.word	0x02780293
 80039dc:	01540154 	.word	0x01540154
 80039e0:	028e0154 	.word	0x028e0154
 80039e4:	02390278 	.word	0x02390278
 80039e8:	02130239 	.word	0x02130239
 80039ec:	02180239 	.word	0x02180239
 80039f0:	02a50224 	.word	0x02a50224
 80039f4:	023901de 	.word	0x023901de
 80039f8:	023901e3 	.word	0x023901e3
 80039fc:	02390264 	.word	0x02390264
 8003a00:	02c70239 	.word	0x02c70239
 8003a04:	4252      	negs	r2, r2
 8003a06:	920b      	str	r2, [sp, #44]	; 0x2c
 8003a08:	930e      	str	r3, [sp, #56]	; 0x38
 8003a0a:	9b08      	ldr	r3, [sp, #32]
 8003a0c:	f043 0304 	orr.w	r3, r3, #4
 8003a10:	9308      	str	r3, [sp, #32]
 8003a12:	e795      	b.n	8003940 <_svfprintf_r+0xbc>
 8003a14:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8003a16:	4651      	mov	r1, sl
 8003a18:	465a      	mov	r2, fp
 8003a1a:	f003 faa3 	bl	8006f64 <__ssprint_r>
 8003a1e:	b940      	cbnz	r0, 8003a32 <_svfprintf_r+0x1ae>
 8003a20:	ae1f      	add	r6, sp, #124	; 0x7c
 8003a22:	e77b      	b.n	800391c <_svfprintf_r+0x98>
 8003a24:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 8003a26:	b123      	cbz	r3, 8003a32 <_svfprintf_r+0x1ae>
 8003a28:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8003a2a:	4651      	mov	r1, sl
 8003a2c:	aa39      	add	r2, sp, #228	; 0xe4
 8003a2e:	f003 fa99 	bl	8006f64 <__ssprint_r>
 8003a32:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8003a36:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003a3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003a3c:	bf18      	it	ne
 8003a3e:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 8003a42:	930c      	str	r3, [sp, #48]	; 0x30
 8003a44:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003a46:	b045      	add	sp, #276	; 0x114
 8003a48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a4c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8003a4e:	e768      	b.n	8003922 <_svfprintf_r+0x9e>
 8003a50:	f88d 510f 	strb.w	r5, [sp, #271]	; 0x10f
 8003a54:	e774      	b.n	8003940 <_svfprintf_r+0xbc>
 8003a56:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003a5a:	2b2a      	cmp	r3, #42	; 0x2a
 8003a5c:	f001 804c 	beq.w	8004af8 <_svfprintf_r+0x1274>
 8003a60:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003a64:	2400      	movs	r4, #0
 8003a66:	2a09      	cmp	r2, #9
 8003a68:	f63f af6c 	bhi.w	8003944 <_svfprintf_r+0xc0>
 8003a6c:	4601      	mov	r1, r0
 8003a6e:	2400      	movs	r4, #0
 8003a70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a74:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8003a78:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8003a7c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003a80:	2a09      	cmp	r2, #9
 8003a82:	4608      	mov	r0, r1
 8003a84:	d9f4      	bls.n	8003a70 <_svfprintf_r+0x1ec>
 8003a86:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
 8003a8a:	e75b      	b.n	8003944 <_svfprintf_r+0xc0>
 8003a8c:	9a08      	ldr	r2, [sp, #32]
 8003a8e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003a92:	9208      	str	r2, [sp, #32]
 8003a94:	e754      	b.n	8003940 <_svfprintf_r+0xbc>
 8003a96:	4601      	mov	r1, r0
 8003a98:	2200      	movs	r2, #0
 8003a9a:	46b4      	mov	ip, r6
 8003a9c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8003aa0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003aa4:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8003aa8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003aac:	2e09      	cmp	r6, #9
 8003aae:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8003ab2:	4608      	mov	r0, r1
 8003ab4:	d9f2      	bls.n	8003a9c <_svfprintf_r+0x218>
 8003ab6:	4666      	mov	r6, ip
 8003ab8:	920b      	str	r2, [sp, #44]	; 0x2c
 8003aba:	e743      	b.n	8003944 <_svfprintf_r+0xc0>
 8003abc:	9315      	str	r3, [sp, #84]	; 0x54
 8003abe:	9b08      	ldr	r3, [sp, #32]
 8003ac0:	9009      	str	r0, [sp, #36]	; 0x24
 8003ac2:	f043 0310 	orr.w	r3, r3, #16
 8003ac6:	9308      	str	r3, [sp, #32]
 8003ac8:	9808      	ldr	r0, [sp, #32]
 8003aca:	06c3      	lsls	r3, r0, #27
 8003acc:	f100 81bf 	bmi.w	8003e4e <_svfprintf_r+0x5ca>
 8003ad0:	9a08      	ldr	r2, [sp, #32]
 8003ad2:	0655      	lsls	r5, r2, #25
 8003ad4:	f140 81bb 	bpl.w	8003e4e <_svfprintf_r+0x5ca>
 8003ad8:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003ada:	f9b0 3000 	ldrsh.w	r3, [r0]
 8003ade:	3004      	adds	r0, #4
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	900e      	str	r0, [sp, #56]	; 0x38
 8003ae4:	f2c0 81ba 	blt.w	8003e5c <_svfprintf_r+0x5d8>
 8003ae8:	bf0c      	ite	eq
 8003aea:	2100      	moveq	r1, #0
 8003aec:	2101      	movne	r1, #1
 8003aee:	2201      	movs	r2, #1
 8003af0:	2c00      	cmp	r4, #0
 8003af2:	bfa2      	ittt	ge
 8003af4:	9808      	ldrge	r0, [sp, #32]
 8003af6:	f020 0080 	bicge.w	r0, r0, #128	; 0x80
 8003afa:	9008      	strge	r0, [sp, #32]
 8003afc:	2c00      	cmp	r4, #0
 8003afe:	bf18      	it	ne
 8003b00:	f041 0101 	orrne.w	r1, r1, #1
 8003b04:	2900      	cmp	r1, #0
 8003b06:	f000 8323 	beq.w	8004150 <_svfprintf_r+0x8cc>
 8003b0a:	2a01      	cmp	r2, #1
 8003b0c:	f000 845f 	beq.w	80043ce <_svfprintf_r+0xb4a>
 8003b10:	2a02      	cmp	r2, #2
 8003b12:	bf18      	it	ne
 8003b14:	465a      	movne	r2, fp
 8003b16:	d102      	bne.n	8003b1e <_svfprintf_r+0x29a>
 8003b18:	f000 bc48 	b.w	80043ac <_svfprintf_r+0xb28>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	f003 0107 	and.w	r1, r3, #7
 8003b22:	3130      	adds	r1, #48	; 0x30
 8003b24:	1e50      	subs	r0, r2, #1
 8003b26:	08db      	lsrs	r3, r3, #3
 8003b28:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003b2c:	d1f6      	bne.n	8003b1c <_svfprintf_r+0x298>
 8003b2e:	9b08      	ldr	r3, [sp, #32]
 8003b30:	9011      	str	r0, [sp, #68]	; 0x44
 8003b32:	07dd      	lsls	r5, r3, #31
 8003b34:	d507      	bpl.n	8003b46 <_svfprintf_r+0x2c2>
 8003b36:	2930      	cmp	r1, #48	; 0x30
 8003b38:	f000 8733 	beq.w	80049a2 <_svfprintf_r+0x111e>
 8003b3c:	1e90      	subs	r0, r2, #2
 8003b3e:	2330      	movs	r3, #48	; 0x30
 8003b40:	9011      	str	r0, [sp, #68]	; 0x44
 8003b42:	f802 3c02 	strb.w	r3, [r2, #-2]
 8003b46:	ebc0 030b 	rsb	r3, r0, fp
 8003b4a:	930d      	str	r3, [sp, #52]	; 0x34
 8003b4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003b4e:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 8003b52:	9412      	str	r4, [sp, #72]	; 0x48
 8003b54:	42a3      	cmp	r3, r4
 8003b56:	bfb8      	it	lt
 8003b58:	4623      	movlt	r3, r4
 8003b5a:	2000      	movs	r0, #0
 8003b5c:	930a      	str	r3, [sp, #40]	; 0x28
 8003b5e:	9016      	str	r0, [sp, #88]	; 0x58
 8003b60:	b111      	cbz	r1, 8003b68 <_svfprintf_r+0x2e4>
 8003b62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003b64:	3301      	adds	r3, #1
 8003b66:	930a      	str	r3, [sp, #40]	; 0x28
 8003b68:	9b08      	ldr	r3, [sp, #32]
 8003b6a:	f013 0302 	ands.w	r3, r3, #2
 8003b6e:	9313      	str	r3, [sp, #76]	; 0x4c
 8003b70:	d002      	beq.n	8003b78 <_svfprintf_r+0x2f4>
 8003b72:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003b74:	3002      	adds	r0, #2
 8003b76:	900a      	str	r0, [sp, #40]	; 0x28
 8003b78:	9b08      	ldr	r3, [sp, #32]
 8003b7a:	f013 0384 	ands.w	r3, r3, #132	; 0x84
 8003b7e:	9314      	str	r3, [sp, #80]	; 0x50
 8003b80:	f040 81bb 	bne.w	8003efa <_svfprintf_r+0x676>
 8003b84:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003b86:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003b88:	1a47      	subs	r7, r0, r1
 8003b8a:	2f00      	cmp	r7, #0
 8003b8c:	f340 81b5 	ble.w	8003efa <_svfprintf_r+0x676>
 8003b90:	2f10      	cmp	r7, #16
 8003b92:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003b94:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003b96:	f8df 8344 	ldr.w	r8, [pc, #836]	; 8003edc <_svfprintf_r+0x658>
 8003b9a:	dd22      	ble.n	8003be2 <_svfprintf_r+0x35e>
 8003b9c:	4623      	mov	r3, r4
 8003b9e:	f04f 0910 	mov.w	r9, #16
 8003ba2:	4644      	mov	r4, r8
 8003ba4:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8003ba8:	e003      	b.n	8003bb2 <_svfprintf_r+0x32e>
 8003baa:	3f10      	subs	r7, #16
 8003bac:	3608      	adds	r6, #8
 8003bae:	2f10      	cmp	r7, #16
 8003bb0:	dd15      	ble.n	8003bde <_svfprintf_r+0x35a>
 8003bb2:	3301      	adds	r3, #1
 8003bb4:	3510      	adds	r5, #16
 8003bb6:	2b07      	cmp	r3, #7
 8003bb8:	e886 0210 	stmia.w	r6, {r4, r9}
 8003bbc:	953b      	str	r5, [sp, #236]	; 0xec
 8003bbe:	933a      	str	r3, [sp, #232]	; 0xe8
 8003bc0:	ddf3      	ble.n	8003baa <_svfprintf_r+0x326>
 8003bc2:	4640      	mov	r0, r8
 8003bc4:	4651      	mov	r1, sl
 8003bc6:	465a      	mov	r2, fp
 8003bc8:	f003 f9cc 	bl	8006f64 <__ssprint_r>
 8003bcc:	2800      	cmp	r0, #0
 8003bce:	f47f af30 	bne.w	8003a32 <_svfprintf_r+0x1ae>
 8003bd2:	3f10      	subs	r7, #16
 8003bd4:	2f10      	cmp	r7, #16
 8003bd6:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003bd8:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8003bda:	ae1f      	add	r6, sp, #124	; 0x7c
 8003bdc:	dce9      	bgt.n	8003bb2 <_svfprintf_r+0x32e>
 8003bde:	46a0      	mov	r8, r4
 8003be0:	461c      	mov	r4, r3
 8003be2:	3401      	adds	r4, #1
 8003be4:	19ed      	adds	r5, r5, r7
 8003be6:	2c07      	cmp	r4, #7
 8003be8:	f8c6 8000 	str.w	r8, [r6]
 8003bec:	6077      	str	r7, [r6, #4]
 8003bee:	953b      	str	r5, [sp, #236]	; 0xec
 8003bf0:	943a      	str	r4, [sp, #232]	; 0xe8
 8003bf2:	f300 8414 	bgt.w	800441e <_svfprintf_r+0xb9a>
 8003bf6:	3608      	adds	r6, #8
 8003bf8:	e180      	b.n	8003efc <_svfprintf_r+0x678>
 8003bfa:	9009      	str	r0, [sp, #36]	; 0x24
 8003bfc:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003bfe:	9315      	str	r3, [sp, #84]	; 0x54
 8003c00:	1dc3      	adds	r3, r0, #7
 8003c02:	f023 0307 	bic.w	r3, r3, #7
 8003c06:	f103 0108 	add.w	r1, r3, #8
 8003c0a:	910e      	str	r1, [sp, #56]	; 0x38
 8003c0c:	f8d3 8000 	ldr.w	r8, [r3]
 8003c10:	685d      	ldr	r5, [r3, #4]
 8003c12:	4642      	mov	r2, r8
 8003c14:	462b      	mov	r3, r5
 8003c16:	4629      	mov	r1, r5
 8003c18:	4640      	mov	r0, r8
 8003c1a:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
 8003c1e:	f003 f839 	bl	8006c94 <__fpclassifyd>
 8003c22:	2801      	cmp	r0, #1
 8003c24:	4629      	mov	r1, r5
 8003c26:	4640      	mov	r0, r8
 8003c28:	f040 84d0 	bne.w	80045cc <_svfprintf_r+0xd48>
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	2300      	movs	r3, #0
 8003c30:	f004 fd60 	bl	80086f4 <__aeabi_dcmplt>
 8003c34:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 8003c38:	b110      	cbz	r0, 8003c40 <_svfprintf_r+0x3bc>
 8003c3a:	212d      	movs	r1, #45	; 0x2d
 8003c3c:	f88d 110f 	strb.w	r1, [sp, #271]	; 0x10f
 8003c40:	2303      	movs	r3, #3
 8003c42:	930a      	str	r3, [sp, #40]	; 0x28
 8003c44:	2300      	movs	r3, #0
 8003c46:	9312      	str	r3, [sp, #72]	; 0x48
 8003c48:	4aa0      	ldr	r2, [pc, #640]	; (8003ecc <_svfprintf_r+0x648>)
 8003c4a:	4ba1      	ldr	r3, [pc, #644]	; (8003ed0 <_svfprintf_r+0x64c>)
 8003c4c:	9815      	ldr	r0, [sp, #84]	; 0x54
 8003c4e:	2847      	cmp	r0, #71	; 0x47
 8003c50:	bfd8      	it	le
 8003c52:	461a      	movle	r2, r3
 8003c54:	9211      	str	r2, [sp, #68]	; 0x44
 8003c56:	9a08      	ldr	r2, [sp, #32]
 8003c58:	2303      	movs	r3, #3
 8003c5a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c5e:	930d      	str	r3, [sp, #52]	; 0x34
 8003c60:	2300      	movs	r3, #0
 8003c62:	9208      	str	r2, [sp, #32]
 8003c64:	9316      	str	r3, [sp, #88]	; 0x58
 8003c66:	e77b      	b.n	8003b60 <_svfprintf_r+0x2dc>
 8003c68:	9b08      	ldr	r3, [sp, #32]
 8003c6a:	f043 0308 	orr.w	r3, r3, #8
 8003c6e:	9308      	str	r3, [sp, #32]
 8003c70:	e666      	b.n	8003940 <_svfprintf_r+0xbc>
 8003c72:	9908      	ldr	r1, [sp, #32]
 8003c74:	9009      	str	r0, [sp, #36]	; 0x24
 8003c76:	f041 0110 	orr.w	r1, r1, #16
 8003c7a:	9108      	str	r1, [sp, #32]
 8003c7c:	9a08      	ldr	r2, [sp, #32]
 8003c7e:	9315      	str	r3, [sp, #84]	; 0x54
 8003c80:	f012 0110 	ands.w	r1, r2, #16
 8003c84:	f000 8090 	beq.w	8003da8 <_svfprintf_r+0x524>
 8003c88:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003c8a:	6803      	ldr	r3, [r0, #0]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	1a99      	subs	r1, r3, r2
 8003c90:	bf18      	it	ne
 8003c92:	2101      	movne	r1, #1
 8003c94:	3004      	adds	r0, #4
 8003c96:	900e      	str	r0, [sp, #56]	; 0x38
 8003c98:	2000      	movs	r0, #0
 8003c9a:	f88d 010f 	strb.w	r0, [sp, #271]	; 0x10f
 8003c9e:	e727      	b.n	8003af0 <_svfprintf_r+0x26c>
 8003ca0:	9908      	ldr	r1, [sp, #32]
 8003ca2:	9009      	str	r0, [sp, #36]	; 0x24
 8003ca4:	f041 0110 	orr.w	r1, r1, #16
 8003ca8:	9108      	str	r1, [sp, #32]
 8003caa:	9a08      	ldr	r2, [sp, #32]
 8003cac:	9315      	str	r3, [sp, #84]	; 0x54
 8003cae:	06d0      	lsls	r0, r2, #27
 8003cb0:	f140 80b9 	bpl.w	8003e26 <_svfprintf_r+0x5a2>
 8003cb4:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003cb6:	6803      	ldr	r3, [r0, #0]
 8003cb8:	2201      	movs	r2, #1
 8003cba:	1c19      	adds	r1, r3, #0
 8003cbc:	bf18      	it	ne
 8003cbe:	2101      	movne	r1, #1
 8003cc0:	3004      	adds	r0, #4
 8003cc2:	900e      	str	r0, [sp, #56]	; 0x38
 8003cc4:	e7e8      	b.n	8003c98 <_svfprintf_r+0x414>
 8003cc6:	4a83      	ldr	r2, [pc, #524]	; (8003ed4 <_svfprintf_r+0x650>)
 8003cc8:	9315      	str	r3, [sp, #84]	; 0x54
 8003cca:	9b08      	ldr	r3, [sp, #32]
 8003ccc:	921c      	str	r2, [sp, #112]	; 0x70
 8003cce:	06da      	lsls	r2, r3, #27
 8003cd0:	9009      	str	r0, [sp, #36]	; 0x24
 8003cd2:	f100 810d 	bmi.w	8003ef0 <_svfprintf_r+0x66c>
 8003cd6:	9908      	ldr	r1, [sp, #32]
 8003cd8:	064b      	lsls	r3, r1, #25
 8003cda:	f140 8109 	bpl.w	8003ef0 <_svfprintf_r+0x66c>
 8003cde:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003ce0:	8813      	ldrh	r3, [r2, #0]
 8003ce2:	3204      	adds	r2, #4
 8003ce4:	920e      	str	r2, [sp, #56]	; 0x38
 8003ce6:	1c19      	adds	r1, r3, #0
 8003ce8:	9a08      	ldr	r2, [sp, #32]
 8003cea:	bf18      	it	ne
 8003cec:	2101      	movne	r1, #1
 8003cee:	420a      	tst	r2, r1
 8003cf0:	f000 83ca 	beq.w	8004488 <_svfprintf_r+0xc04>
 8003cf4:	9908      	ldr	r1, [sp, #32]
 8003cf6:	9815      	ldr	r0, [sp, #84]	; 0x54
 8003cf8:	2230      	movs	r2, #48	; 0x30
 8003cfa:	f041 0102 	orr.w	r1, r1, #2
 8003cfe:	f88d 210c 	strb.w	r2, [sp, #268]	; 0x10c
 8003d02:	9108      	str	r1, [sp, #32]
 8003d04:	f88d 010d 	strb.w	r0, [sp, #269]	; 0x10d
 8003d08:	2101      	movs	r1, #1
 8003d0a:	2202      	movs	r2, #2
 8003d0c:	e7c4      	b.n	8003c98 <_svfprintf_r+0x414>
 8003d0e:	9b08      	ldr	r3, [sp, #32]
 8003d10:	f043 0310 	orr.w	r3, r3, #16
 8003d14:	9308      	str	r3, [sp, #32]
 8003d16:	e613      	b.n	8003940 <_svfprintf_r+0xbc>
 8003d18:	2500      	movs	r5, #0
 8003d1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003d1c:	f88d 510f 	strb.w	r5, [sp, #271]	; 0x10f
 8003d20:	9315      	str	r3, [sp, #84]	; 0x54
 8003d22:	6812      	ldr	r2, [r2, #0]
 8003d24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003d26:	9009      	str	r0, [sp, #36]	; 0x24
 8003d28:	9211      	str	r2, [sp, #68]	; 0x44
 8003d2a:	1d1f      	adds	r7, r3, #4
 8003d2c:	2a00      	cmp	r2, #0
 8003d2e:	f000 864b 	beq.w	80049c8 <_svfprintf_r+0x1144>
 8003d32:	2c00      	cmp	r4, #0
 8003d34:	9811      	ldr	r0, [sp, #68]	; 0x44
 8003d36:	f2c0 8602 	blt.w	800493e <_svfprintf_r+0x10ba>
 8003d3a:	4629      	mov	r1, r5
 8003d3c:	4622      	mov	r2, r4
 8003d3e:	f002 facf 	bl	80062e0 <memchr>
 8003d42:	2800      	cmp	r0, #0
 8003d44:	f000 866f 	beq.w	8004a26 <_svfprintf_r+0x11a2>
 8003d48:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003d4a:	9512      	str	r5, [sp, #72]	; 0x48
 8003d4c:	1ac0      	subs	r0, r0, r3
 8003d4e:	42a0      	cmp	r0, r4
 8003d50:	900d      	str	r0, [sp, #52]	; 0x34
 8003d52:	bfd1      	iteee	le
 8003d54:	9b0d      	ldrle	r3, [sp, #52]	; 0x34
 8003d56:	f89d 110f 	ldrbgt.w	r1, [sp, #271]	; 0x10f
 8003d5a:	970e      	strgt	r7, [sp, #56]	; 0x38
 8003d5c:	ea24 70e4 	bicgt.w	r0, r4, r4, asr #31
 8003d60:	bfd3      	iteet	le
 8003d62:	ea23 73e3 	bicle.w	r3, r3, r3, asr #31
 8003d66:	900a      	strgt	r0, [sp, #40]	; 0x28
 8003d68:	940d      	strgt	r4, [sp, #52]	; 0x34
 8003d6a:	930a      	strle	r3, [sp, #40]	; 0x28
 8003d6c:	bfdc      	itt	le
 8003d6e:	f89d 110f 	ldrble.w	r1, [sp, #271]	; 0x10f
 8003d72:	970e      	strle	r7, [sp, #56]	; 0x38
 8003d74:	9516      	str	r5, [sp, #88]	; 0x58
 8003d76:	e6f3      	b.n	8003b60 <_svfprintf_r+0x2dc>
 8003d78:	9a08      	ldr	r2, [sp, #32]
 8003d7a:	f042 0210 	orr.w	r2, r2, #16
 8003d7e:	9208      	str	r2, [sp, #32]
 8003d80:	e5de      	b.n	8003940 <_svfprintf_r+0xbc>
 8003d82:	9009      	str	r0, [sp, #36]	; 0x24
 8003d84:	9808      	ldr	r0, [sp, #32]
 8003d86:	06c3      	lsls	r3, r0, #27
 8003d88:	f140 843f 	bpl.w	800460a <_svfprintf_r+0xd86>
 8003d8c:	990e      	ldr	r1, [sp, #56]	; 0x38
 8003d8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003d90:	680b      	ldr	r3, [r1, #0]
 8003d92:	3104      	adds	r1, #4
 8003d94:	910e      	str	r1, [sp, #56]	; 0x38
 8003d96:	601a      	str	r2, [r3, #0]
 8003d98:	e5a2      	b.n	80038e0 <_svfprintf_r+0x5c>
 8003d9a:	9a08      	ldr	r2, [sp, #32]
 8003d9c:	9009      	str	r0, [sp, #36]	; 0x24
 8003d9e:	f012 0110 	ands.w	r1, r2, #16
 8003da2:	9315      	str	r3, [sp, #84]	; 0x54
 8003da4:	f47f af70 	bne.w	8003c88 <_svfprintf_r+0x404>
 8003da8:	9b08      	ldr	r3, [sp, #32]
 8003daa:	f013 0240 	ands.w	r2, r3, #64	; 0x40
 8003dae:	f000 8437 	beq.w	8004620 <_svfprintf_r+0xd9c>
 8003db2:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003db4:	8803      	ldrh	r3, [r0, #0]
 8003db6:	460a      	mov	r2, r1
 8003db8:	1c19      	adds	r1, r3, #0
 8003dba:	bf18      	it	ne
 8003dbc:	2101      	movne	r1, #1
 8003dbe:	3004      	adds	r0, #4
 8003dc0:	900e      	str	r0, [sp, #56]	; 0x38
 8003dc2:	e769      	b.n	8003c98 <_svfprintf_r+0x414>
 8003dc4:	9009      	str	r0, [sp, #36]	; 0x24
 8003dc6:	9315      	str	r3, [sp, #84]	; 0x54
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	f43f ae2b 	beq.w	8003a24 <_svfprintf_r+0x1a0>
 8003dce:	2101      	movs	r1, #1
 8003dd0:	f88d 30bc 	strb.w	r3, [sp, #188]	; 0xbc
 8003dd4:	aa2f      	add	r2, sp, #188	; 0xbc
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	910a      	str	r1, [sp, #40]	; 0x28
 8003dda:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
 8003dde:	910d      	str	r1, [sp, #52]	; 0x34
 8003de0:	9211      	str	r2, [sp, #68]	; 0x44
 8003de2:	2300      	movs	r3, #0
 8003de4:	9312      	str	r3, [sp, #72]	; 0x48
 8003de6:	9316      	str	r3, [sp, #88]	; 0x58
 8003de8:	e6be      	b.n	8003b68 <_svfprintf_r+0x2e4>
 8003dea:	f89d 310f 	ldrb.w	r3, [sp, #271]	; 0x10f
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	f47f ada6 	bne.w	8003940 <_svfprintf_r+0xbc>
 8003df4:	f88d 710f 	strb.w	r7, [sp, #271]	; 0x10f
 8003df8:	e5a2      	b.n	8003940 <_svfprintf_r+0xbc>
 8003dfa:	9a08      	ldr	r2, [sp, #32]
 8003dfc:	f042 0201 	orr.w	r2, r2, #1
 8003e00:	9208      	str	r2, [sp, #32]
 8003e02:	e59d      	b.n	8003940 <_svfprintf_r+0xbc>
 8003e04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003e06:	990e      	ldr	r1, [sp, #56]	; 0x38
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	930b      	str	r3, [sp, #44]	; 0x2c
 8003e0c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003e0e:	1d0b      	adds	r3, r1, #4
 8003e10:	2a00      	cmp	r2, #0
 8003e12:	f6ff adf7 	blt.w	8003a04 <_svfprintf_r+0x180>
 8003e16:	930e      	str	r3, [sp, #56]	; 0x38
 8003e18:	e592      	b.n	8003940 <_svfprintf_r+0xbc>
 8003e1a:	9a08      	ldr	r2, [sp, #32]
 8003e1c:	9009      	str	r0, [sp, #36]	; 0x24
 8003e1e:	06d0      	lsls	r0, r2, #27
 8003e20:	9315      	str	r3, [sp, #84]	; 0x54
 8003e22:	f53f af47 	bmi.w	8003cb4 <_svfprintf_r+0x430>
 8003e26:	9908      	ldr	r1, [sp, #32]
 8003e28:	0649      	lsls	r1, r1, #25
 8003e2a:	f140 83ea 	bpl.w	8004602 <_svfprintf_r+0xd7e>
 8003e2e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003e30:	8813      	ldrh	r3, [r2, #0]
 8003e32:	2201      	movs	r2, #1
 8003e34:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003e36:	1c19      	adds	r1, r3, #0
 8003e38:	bf18      	it	ne
 8003e3a:	2101      	movne	r1, #1
 8003e3c:	3004      	adds	r0, #4
 8003e3e:	900e      	str	r0, [sp, #56]	; 0x38
 8003e40:	e72a      	b.n	8003c98 <_svfprintf_r+0x414>
 8003e42:	9009      	str	r0, [sp, #36]	; 0x24
 8003e44:	9808      	ldr	r0, [sp, #32]
 8003e46:	9315      	str	r3, [sp, #84]	; 0x54
 8003e48:	06c3      	lsls	r3, r0, #27
 8003e4a:	f57f ae41 	bpl.w	8003ad0 <_svfprintf_r+0x24c>
 8003e4e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8003e50:	680b      	ldr	r3, [r1, #0]
 8003e52:	3104      	adds	r1, #4
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	910e      	str	r1, [sp, #56]	; 0x38
 8003e58:	f6bf ae46 	bge.w	8003ae8 <_svfprintf_r+0x264>
 8003e5c:	425b      	negs	r3, r3
 8003e5e:	222d      	movs	r2, #45	; 0x2d
 8003e60:	1c19      	adds	r1, r3, #0
 8003e62:	f88d 210f 	strb.w	r2, [sp, #271]	; 0x10f
 8003e66:	bf18      	it	ne
 8003e68:	2101      	movne	r1, #1
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	e640      	b.n	8003af0 <_svfprintf_r+0x26c>
 8003e6e:	9908      	ldr	r1, [sp, #32]
 8003e70:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8003e74:	9108      	str	r1, [sp, #32]
 8003e76:	e563      	b.n	8003940 <_svfprintf_r+0xbc>
 8003e78:	9315      	str	r3, [sp, #84]	; 0x54
 8003e7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003e7c:	990e      	ldr	r1, [sp, #56]	; 0x38
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	9009      	str	r0, [sp, #36]	; 0x24
 8003e82:	2200      	movs	r2, #0
 8003e84:	2001      	movs	r0, #1
 8003e86:	f88d 210f 	strb.w	r2, [sp, #271]	; 0x10f
 8003e8a:	3104      	adds	r1, #4
 8003e8c:	aa2f      	add	r2, sp, #188	; 0xbc
 8003e8e:	900a      	str	r0, [sp, #40]	; 0x28
 8003e90:	910e      	str	r1, [sp, #56]	; 0x38
 8003e92:	f88d 30bc 	strb.w	r3, [sp, #188]	; 0xbc
 8003e96:	900d      	str	r0, [sp, #52]	; 0x34
 8003e98:	9211      	str	r2, [sp, #68]	; 0x44
 8003e9a:	e7a2      	b.n	8003de2 <_svfprintf_r+0x55e>
 8003e9c:	490e      	ldr	r1, [pc, #56]	; (8003ed8 <_svfprintf_r+0x654>)
 8003e9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003ea0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003ea2:	911c      	str	r1, [sp, #112]	; 0x70
 8003ea4:	9908      	ldr	r1, [sp, #32]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	9009      	str	r0, [sp, #36]	; 0x24
 8003eaa:	3204      	adds	r2, #4
 8003eac:	f041 0102 	orr.w	r1, r1, #2
 8003eb0:	2078      	movs	r0, #120	; 0x78
 8003eb2:	920e      	str	r2, [sp, #56]	; 0x38
 8003eb4:	9108      	str	r1, [sp, #32]
 8003eb6:	2230      	movs	r2, #48	; 0x30
 8003eb8:	1c19      	adds	r1, r3, #0
 8003eba:	f88d 210c 	strb.w	r2, [sp, #268]	; 0x10c
 8003ebe:	bf18      	it	ne
 8003ec0:	2101      	movne	r1, #1
 8003ec2:	f88d 010d 	strb.w	r0, [sp, #269]	; 0x10d
 8003ec6:	2202      	movs	r2, #2
 8003ec8:	9015      	str	r0, [sp, #84]	; 0x54
 8003eca:	e6e5      	b.n	8003c98 <_svfprintf_r+0x414>
 8003ecc:	08008aac 	.word	0x08008aac
 8003ed0:	08008aa8 	.word	0x08008aa8
 8003ed4:	08008ab8 	.word	0x08008ab8
 8003ed8:	08008acc 	.word	0x08008acc
 8003edc:	080088c8 	.word	0x080088c8
 8003ee0:	9315      	str	r3, [sp, #84]	; 0x54
 8003ee2:	9b08      	ldr	r3, [sp, #32]
 8003ee4:	49a4      	ldr	r1, [pc, #656]	; (8004178 <_svfprintf_r+0x8f4>)
 8003ee6:	9009      	str	r0, [sp, #36]	; 0x24
 8003ee8:	06da      	lsls	r2, r3, #27
 8003eea:	911c      	str	r1, [sp, #112]	; 0x70
 8003eec:	f57f aef3 	bpl.w	8003cd6 <_svfprintf_r+0x452>
 8003ef0:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003ef2:	6803      	ldr	r3, [r0, #0]
 8003ef4:	3004      	adds	r0, #4
 8003ef6:	900e      	str	r0, [sp, #56]	; 0x38
 8003ef8:	e6f5      	b.n	8003ce6 <_svfprintf_r+0x462>
 8003efa:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003efc:	f89d 310f 	ldrb.w	r3, [sp, #271]	; 0x10f
 8003f00:	b16b      	cbz	r3, 8003f1e <_svfprintf_r+0x69a>
 8003f02:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003f04:	f20d 130f 	addw	r3, sp, #271	; 0x10f
 8003f08:	3401      	adds	r4, #1
 8003f0a:	6033      	str	r3, [r6, #0]
 8003f0c:	3501      	adds	r5, #1
 8003f0e:	2301      	movs	r3, #1
 8003f10:	2c07      	cmp	r4, #7
 8003f12:	6073      	str	r3, [r6, #4]
 8003f14:	953b      	str	r5, [sp, #236]	; 0xec
 8003f16:	943a      	str	r4, [sp, #232]	; 0xe8
 8003f18:	f300 81f5 	bgt.w	8004306 <_svfprintf_r+0xa82>
 8003f1c:	3608      	adds	r6, #8
 8003f1e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003f20:	b163      	cbz	r3, 8003f3c <_svfprintf_r+0x6b8>
 8003f22:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003f24:	ab43      	add	r3, sp, #268	; 0x10c
 8003f26:	3401      	adds	r4, #1
 8003f28:	6033      	str	r3, [r6, #0]
 8003f2a:	3502      	adds	r5, #2
 8003f2c:	2302      	movs	r3, #2
 8003f2e:	2c07      	cmp	r4, #7
 8003f30:	6073      	str	r3, [r6, #4]
 8003f32:	953b      	str	r5, [sp, #236]	; 0xec
 8003f34:	943a      	str	r4, [sp, #232]	; 0xe8
 8003f36:	f300 81db 	bgt.w	80042f0 <_svfprintf_r+0xa6c>
 8003f3a:	3608      	adds	r6, #8
 8003f3c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003f3e:	2b80      	cmp	r3, #128	; 0x80
 8003f40:	f000 8122 	beq.w	8004188 <_svfprintf_r+0x904>
 8003f44:	9812      	ldr	r0, [sp, #72]	; 0x48
 8003f46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003f48:	1ac7      	subs	r7, r0, r3
 8003f4a:	2f00      	cmp	r7, #0
 8003f4c:	dd32      	ble.n	8003fb4 <_svfprintf_r+0x730>
 8003f4e:	2f10      	cmp	r7, #16
 8003f50:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003f52:	f8df 822c 	ldr.w	r8, [pc, #556]	; 8004180 <_svfprintf_r+0x8fc>
 8003f56:	dd22      	ble.n	8003f9e <_svfprintf_r+0x71a>
 8003f58:	4623      	mov	r3, r4
 8003f5a:	f04f 0910 	mov.w	r9, #16
 8003f5e:	4644      	mov	r4, r8
 8003f60:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8003f64:	e003      	b.n	8003f6e <_svfprintf_r+0x6ea>
 8003f66:	3f10      	subs	r7, #16
 8003f68:	3608      	adds	r6, #8
 8003f6a:	2f10      	cmp	r7, #16
 8003f6c:	dd15      	ble.n	8003f9a <_svfprintf_r+0x716>
 8003f6e:	3301      	adds	r3, #1
 8003f70:	3510      	adds	r5, #16
 8003f72:	2b07      	cmp	r3, #7
 8003f74:	e886 0210 	stmia.w	r6, {r4, r9}
 8003f78:	953b      	str	r5, [sp, #236]	; 0xec
 8003f7a:	933a      	str	r3, [sp, #232]	; 0xe8
 8003f7c:	ddf3      	ble.n	8003f66 <_svfprintf_r+0x6e2>
 8003f7e:	4640      	mov	r0, r8
 8003f80:	4651      	mov	r1, sl
 8003f82:	465a      	mov	r2, fp
 8003f84:	f002 ffee 	bl	8006f64 <__ssprint_r>
 8003f88:	2800      	cmp	r0, #0
 8003f8a:	f47f ad52 	bne.w	8003a32 <_svfprintf_r+0x1ae>
 8003f8e:	3f10      	subs	r7, #16
 8003f90:	2f10      	cmp	r7, #16
 8003f92:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003f94:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8003f96:	ae1f      	add	r6, sp, #124	; 0x7c
 8003f98:	dce9      	bgt.n	8003f6e <_svfprintf_r+0x6ea>
 8003f9a:	46a0      	mov	r8, r4
 8003f9c:	461c      	mov	r4, r3
 8003f9e:	3401      	adds	r4, #1
 8003fa0:	19ed      	adds	r5, r5, r7
 8003fa2:	2c07      	cmp	r4, #7
 8003fa4:	f8c6 8000 	str.w	r8, [r6]
 8003fa8:	6077      	str	r7, [r6, #4]
 8003faa:	953b      	str	r5, [sp, #236]	; 0xec
 8003fac:	943a      	str	r4, [sp, #232]	; 0xe8
 8003fae:	f300 8194 	bgt.w	80042da <_svfprintf_r+0xa56>
 8003fb2:	3608      	adds	r6, #8
 8003fb4:	9908      	ldr	r1, [sp, #32]
 8003fb6:	05ca      	lsls	r2, r1, #23
 8003fb8:	d472      	bmi.n	80040a0 <_svfprintf_r+0x81c>
 8003fba:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003fbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003fbe:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8003fc0:	6073      	str	r3, [r6, #4]
 8003fc2:	3401      	adds	r4, #1
 8003fc4:	18ed      	adds	r5, r5, r3
 8003fc6:	2c07      	cmp	r4, #7
 8003fc8:	6032      	str	r2, [r6, #0]
 8003fca:	953b      	str	r5, [sp, #236]	; 0xec
 8003fcc:	943a      	str	r4, [sp, #232]	; 0xe8
 8003fce:	dc5c      	bgt.n	800408a <_svfprintf_r+0x806>
 8003fd0:	3608      	adds	r6, #8
 8003fd2:	9908      	ldr	r1, [sp, #32]
 8003fd4:	074b      	lsls	r3, r1, #29
 8003fd6:	d53e      	bpl.n	8004056 <_svfprintf_r+0x7d2>
 8003fd8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003fda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003fdc:	1ad7      	subs	r7, r2, r3
 8003fde:	2f00      	cmp	r7, #0
 8003fe0:	dd39      	ble.n	8004056 <_svfprintf_r+0x7d2>
 8003fe2:	2f10      	cmp	r7, #16
 8003fe4:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003fe6:	f8df 819c 	ldr.w	r8, [pc, #412]	; 8004184 <_svfprintf_r+0x900>
 8003fea:	dd22      	ble.n	8004032 <_svfprintf_r+0x7ae>
 8003fec:	4623      	mov	r3, r4
 8003fee:	f04f 0910 	mov.w	r9, #16
 8003ff2:	4644      	mov	r4, r8
 8003ff4:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8003ff8:	e003      	b.n	8004002 <_svfprintf_r+0x77e>
 8003ffa:	3f10      	subs	r7, #16
 8003ffc:	3608      	adds	r6, #8
 8003ffe:	2f10      	cmp	r7, #16
 8004000:	dd15      	ble.n	800402e <_svfprintf_r+0x7aa>
 8004002:	3301      	adds	r3, #1
 8004004:	3510      	adds	r5, #16
 8004006:	2b07      	cmp	r3, #7
 8004008:	e886 0210 	stmia.w	r6, {r4, r9}
 800400c:	953b      	str	r5, [sp, #236]	; 0xec
 800400e:	933a      	str	r3, [sp, #232]	; 0xe8
 8004010:	ddf3      	ble.n	8003ffa <_svfprintf_r+0x776>
 8004012:	4640      	mov	r0, r8
 8004014:	4651      	mov	r1, sl
 8004016:	465a      	mov	r2, fp
 8004018:	f002 ffa4 	bl	8006f64 <__ssprint_r>
 800401c:	2800      	cmp	r0, #0
 800401e:	f47f ad08 	bne.w	8003a32 <_svfprintf_r+0x1ae>
 8004022:	3f10      	subs	r7, #16
 8004024:	2f10      	cmp	r7, #16
 8004026:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004028:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 800402a:	ae1f      	add	r6, sp, #124	; 0x7c
 800402c:	dce9      	bgt.n	8004002 <_svfprintf_r+0x77e>
 800402e:	46a0      	mov	r8, r4
 8004030:	461c      	mov	r4, r3
 8004032:	3401      	adds	r4, #1
 8004034:	197d      	adds	r5, r7, r5
 8004036:	2c07      	cmp	r4, #7
 8004038:	f8c6 8000 	str.w	r8, [r6]
 800403c:	6077      	str	r7, [r6, #4]
 800403e:	953b      	str	r5, [sp, #236]	; 0xec
 8004040:	943a      	str	r4, [sp, #232]	; 0xe8
 8004042:	dd08      	ble.n	8004056 <_svfprintf_r+0x7d2>
 8004044:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004046:	4651      	mov	r1, sl
 8004048:	465a      	mov	r2, fp
 800404a:	f002 ff8b 	bl	8006f64 <__ssprint_r>
 800404e:	2800      	cmp	r0, #0
 8004050:	f47f acef 	bne.w	8003a32 <_svfprintf_r+0x1ae>
 8004054:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004056:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004058:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800405a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800405c:	428a      	cmp	r2, r1
 800405e:	bfac      	ite	ge
 8004060:	1880      	addge	r0, r0, r2
 8004062:	1840      	addlt	r0, r0, r1
 8004064:	900c      	str	r0, [sp, #48]	; 0x30
 8004066:	2d00      	cmp	r5, #0
 8004068:	f040 8129 	bne.w	80042be <_svfprintf_r+0xa3a>
 800406c:	2300      	movs	r3, #0
 800406e:	933a      	str	r3, [sp, #232]	; 0xe8
 8004070:	ae1f      	add	r6, sp, #124	; 0x7c
 8004072:	e435      	b.n	80038e0 <_svfprintf_r+0x5c>
 8004074:	46a0      	mov	r8, r4
 8004076:	461c      	mov	r4, r3
 8004078:	3401      	adds	r4, #1
 800407a:	19ed      	adds	r5, r5, r7
 800407c:	2c07      	cmp	r4, #7
 800407e:	f8c6 8000 	str.w	r8, [r6]
 8004082:	6077      	str	r7, [r6, #4]
 8004084:	953b      	str	r5, [sp, #236]	; 0xec
 8004086:	943a      	str	r4, [sp, #232]	; 0xe8
 8004088:	dda2      	ble.n	8003fd0 <_svfprintf_r+0x74c>
 800408a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800408c:	4651      	mov	r1, sl
 800408e:	465a      	mov	r2, fp
 8004090:	f002 ff68 	bl	8006f64 <__ssprint_r>
 8004094:	2800      	cmp	r0, #0
 8004096:	f47f accc 	bne.w	8003a32 <_svfprintf_r+0x1ae>
 800409a:	ae1f      	add	r6, sp, #124	; 0x7c
 800409c:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 800409e:	e798      	b.n	8003fd2 <_svfprintf_r+0x74e>
 80040a0:	9815      	ldr	r0, [sp, #84]	; 0x54
 80040a2:	2865      	cmp	r0, #101	; 0x65
 80040a4:	f340 80aa 	ble.w	80041fc <_svfprintf_r+0x978>
 80040a8:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 80040ac:	2200      	movs	r2, #0
 80040ae:	2300      	movs	r3, #0
 80040b0:	f004 fb16 	bl	80086e0 <__aeabi_dcmpeq>
 80040b4:	2800      	cmp	r0, #0
 80040b6:	f000 8131 	beq.w	800431c <_svfprintf_r+0xa98>
 80040ba:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80040bc:	4b2f      	ldr	r3, [pc, #188]	; (800417c <_svfprintf_r+0x8f8>)
 80040be:	3401      	adds	r4, #1
 80040c0:	6033      	str	r3, [r6, #0]
 80040c2:	3501      	adds	r5, #1
 80040c4:	2301      	movs	r3, #1
 80040c6:	2c07      	cmp	r4, #7
 80040c8:	6073      	str	r3, [r6, #4]
 80040ca:	953b      	str	r5, [sp, #236]	; 0xec
 80040cc:	943a      	str	r4, [sp, #232]	; 0xe8
 80040ce:	f300 82b8 	bgt.w	8004642 <_svfprintf_r+0xdbe>
 80040d2:	3608      	adds	r6, #8
 80040d4:	9b40      	ldr	r3, [sp, #256]	; 0x100
 80040d6:	9910      	ldr	r1, [sp, #64]	; 0x40
 80040d8:	4299      	cmp	r1, r3
 80040da:	dc03      	bgt.n	80040e4 <_svfprintf_r+0x860>
 80040dc:	9a08      	ldr	r2, [sp, #32]
 80040de:	07d3      	lsls	r3, r2, #31
 80040e0:	f57f af77 	bpl.w	8003fd2 <_svfprintf_r+0x74e>
 80040e4:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80040e6:	981a      	ldr	r0, [sp, #104]	; 0x68
 80040e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80040ea:	6070      	str	r0, [r6, #4]
 80040ec:	3401      	adds	r4, #1
 80040ee:	182d      	adds	r5, r5, r0
 80040f0:	2c07      	cmp	r4, #7
 80040f2:	6033      	str	r3, [r6, #0]
 80040f4:	953b      	str	r5, [sp, #236]	; 0xec
 80040f6:	943a      	str	r4, [sp, #232]	; 0xe8
 80040f8:	f300 8300 	bgt.w	80046fc <_svfprintf_r+0xe78>
 80040fc:	3608      	adds	r6, #8
 80040fe:	9910      	ldr	r1, [sp, #64]	; 0x40
 8004100:	1e4f      	subs	r7, r1, #1
 8004102:	2f00      	cmp	r7, #0
 8004104:	f77f af65 	ble.w	8003fd2 <_svfprintf_r+0x74e>
 8004108:	2f10      	cmp	r7, #16
 800410a:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 800410c:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8004180 <_svfprintf_r+0x8fc>
 8004110:	ddb2      	ble.n	8004078 <_svfprintf_r+0x7f4>
 8004112:	4623      	mov	r3, r4
 8004114:	f04f 0910 	mov.w	r9, #16
 8004118:	4644      	mov	r4, r8
 800411a:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 800411e:	e003      	b.n	8004128 <_svfprintf_r+0x8a4>
 8004120:	3608      	adds	r6, #8
 8004122:	3f10      	subs	r7, #16
 8004124:	2f10      	cmp	r7, #16
 8004126:	dda5      	ble.n	8004074 <_svfprintf_r+0x7f0>
 8004128:	3301      	adds	r3, #1
 800412a:	3510      	adds	r5, #16
 800412c:	2b07      	cmp	r3, #7
 800412e:	e886 0210 	stmia.w	r6, {r4, r9}
 8004132:	953b      	str	r5, [sp, #236]	; 0xec
 8004134:	933a      	str	r3, [sp, #232]	; 0xe8
 8004136:	ddf3      	ble.n	8004120 <_svfprintf_r+0x89c>
 8004138:	4640      	mov	r0, r8
 800413a:	4651      	mov	r1, sl
 800413c:	465a      	mov	r2, fp
 800413e:	f002 ff11 	bl	8006f64 <__ssprint_r>
 8004142:	2800      	cmp	r0, #0
 8004144:	f47f ac75 	bne.w	8003a32 <_svfprintf_r+0x1ae>
 8004148:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 800414a:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 800414c:	ae1f      	add	r6, sp, #124	; 0x7c
 800414e:	e7e8      	b.n	8004122 <_svfprintf_r+0x89e>
 8004150:	2a00      	cmp	r2, #0
 8004152:	f040 80be 	bne.w	80042d2 <_svfprintf_r+0xa4e>
 8004156:	9808      	ldr	r0, [sp, #32]
 8004158:	07c1      	lsls	r1, r0, #31
 800415a:	bf5c      	itt	pl
 800415c:	920d      	strpl	r2, [sp, #52]	; 0x34
 800415e:	f8cd b044 	strpl.w	fp, [sp, #68]	; 0x44
 8004162:	f57f acf3 	bpl.w	8003b4c <_svfprintf_r+0x2c8>
 8004166:	991d      	ldr	r1, [sp, #116]	; 0x74
 8004168:	2330      	movs	r3, #48	; 0x30
 800416a:	f10d 02e3 	add.w	r2, sp, #227	; 0xe3
 800416e:	f88d 30e3 	strb.w	r3, [sp, #227]	; 0xe3
 8004172:	910d      	str	r1, [sp, #52]	; 0x34
 8004174:	9211      	str	r2, [sp, #68]	; 0x44
 8004176:	e4e9      	b.n	8003b4c <_svfprintf_r+0x2c8>
 8004178:	08008acc 	.word	0x08008acc
 800417c:	08008ae8 	.word	0x08008ae8
 8004180:	080088d8 	.word	0x080088d8
 8004184:	080088c8 	.word	0x080088c8
 8004188:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800418a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800418c:	1a47      	subs	r7, r0, r1
 800418e:	2f00      	cmp	r7, #0
 8004190:	f77f aed8 	ble.w	8003f44 <_svfprintf_r+0x6c0>
 8004194:	2f10      	cmp	r7, #16
 8004196:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8004198:	f8df 86d8 	ldr.w	r8, [pc, #1752]	; 8004874 <_svfprintf_r+0xff0>
 800419c:	dd22      	ble.n	80041e4 <_svfprintf_r+0x960>
 800419e:	4623      	mov	r3, r4
 80041a0:	f04f 0910 	mov.w	r9, #16
 80041a4:	4644      	mov	r4, r8
 80041a6:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 80041aa:	e003      	b.n	80041b4 <_svfprintf_r+0x930>
 80041ac:	3f10      	subs	r7, #16
 80041ae:	3608      	adds	r6, #8
 80041b0:	2f10      	cmp	r7, #16
 80041b2:	dd15      	ble.n	80041e0 <_svfprintf_r+0x95c>
 80041b4:	3301      	adds	r3, #1
 80041b6:	3510      	adds	r5, #16
 80041b8:	2b07      	cmp	r3, #7
 80041ba:	e886 0210 	stmia.w	r6, {r4, r9}
 80041be:	953b      	str	r5, [sp, #236]	; 0xec
 80041c0:	933a      	str	r3, [sp, #232]	; 0xe8
 80041c2:	ddf3      	ble.n	80041ac <_svfprintf_r+0x928>
 80041c4:	4640      	mov	r0, r8
 80041c6:	4651      	mov	r1, sl
 80041c8:	465a      	mov	r2, fp
 80041ca:	f002 fecb 	bl	8006f64 <__ssprint_r>
 80041ce:	2800      	cmp	r0, #0
 80041d0:	f47f ac2f 	bne.w	8003a32 <_svfprintf_r+0x1ae>
 80041d4:	3f10      	subs	r7, #16
 80041d6:	2f10      	cmp	r7, #16
 80041d8:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80041da:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 80041dc:	ae1f      	add	r6, sp, #124	; 0x7c
 80041de:	dce9      	bgt.n	80041b4 <_svfprintf_r+0x930>
 80041e0:	46a0      	mov	r8, r4
 80041e2:	461c      	mov	r4, r3
 80041e4:	3401      	adds	r4, #1
 80041e6:	19ed      	adds	r5, r5, r7
 80041e8:	2c07      	cmp	r4, #7
 80041ea:	f8c6 8000 	str.w	r8, [r6]
 80041ee:	6077      	str	r7, [r6, #4]
 80041f0:	953b      	str	r5, [sp, #236]	; 0xec
 80041f2:	943a      	str	r4, [sp, #232]	; 0xe8
 80041f4:	f300 81df 	bgt.w	80045b6 <_svfprintf_r+0xd32>
 80041f8:	3608      	adds	r6, #8
 80041fa:	e6a3      	b.n	8003f44 <_svfprintf_r+0x6c0>
 80041fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80041fe:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8004200:	2a01      	cmp	r2, #1
 8004202:	f340 81a5 	ble.w	8004550 <_svfprintf_r+0xccc>
 8004206:	3401      	adds	r4, #1
 8004208:	9811      	ldr	r0, [sp, #68]	; 0x44
 800420a:	3501      	adds	r5, #1
 800420c:	2301      	movs	r3, #1
 800420e:	2c07      	cmp	r4, #7
 8004210:	6030      	str	r0, [r6, #0]
 8004212:	6073      	str	r3, [r6, #4]
 8004214:	953b      	str	r5, [sp, #236]	; 0xec
 8004216:	943a      	str	r4, [sp, #232]	; 0xe8
 8004218:	f300 81c1 	bgt.w	800459e <_svfprintf_r+0xd1a>
 800421c:	3608      	adds	r6, #8
 800421e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004220:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004222:	6071      	str	r1, [r6, #4]
 8004224:	3401      	adds	r4, #1
 8004226:	186d      	adds	r5, r5, r1
 8004228:	2c07      	cmp	r4, #7
 800422a:	6032      	str	r2, [r6, #0]
 800422c:	953b      	str	r5, [sp, #236]	; 0xec
 800422e:	943a      	str	r4, [sp, #232]	; 0xe8
 8004230:	f300 81a9 	bgt.w	8004586 <_svfprintf_r+0xd02>
 8004234:	3608      	adds	r6, #8
 8004236:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 800423a:	2200      	movs	r2, #0
 800423c:	2300      	movs	r3, #0
 800423e:	f004 fa4f 	bl	80086e0 <__aeabi_dcmpeq>
 8004242:	2800      	cmp	r0, #0
 8004244:	f040 80f6 	bne.w	8004434 <_svfprintf_r+0xbb0>
 8004248:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800424a:	9811      	ldr	r0, [sp, #68]	; 0x44
 800424c:	1e5a      	subs	r2, r3, #1
 800424e:	3401      	adds	r4, #1
 8004250:	1c43      	adds	r3, r0, #1
 8004252:	18ad      	adds	r5, r5, r2
 8004254:	2c07      	cmp	r4, #7
 8004256:	6033      	str	r3, [r6, #0]
 8004258:	6072      	str	r2, [r6, #4]
 800425a:	953b      	str	r5, [sp, #236]	; 0xec
 800425c:	943a      	str	r4, [sp, #232]	; 0xe8
 800425e:	dc22      	bgt.n	80042a6 <_svfprintf_r+0xa22>
 8004260:	3608      	adds	r6, #8
 8004262:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004264:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8004266:	3401      	adds	r4, #1
 8004268:	18ed      	adds	r5, r5, r3
 800426a:	2c07      	cmp	r4, #7
 800426c:	ab3c      	add	r3, sp, #240	; 0xf0
 800426e:	6033      	str	r3, [r6, #0]
 8004270:	6070      	str	r0, [r6, #4]
 8004272:	953b      	str	r5, [sp, #236]	; 0xec
 8004274:	943a      	str	r4, [sp, #232]	; 0xe8
 8004276:	f77f aeab 	ble.w	8003fd0 <_svfprintf_r+0x74c>
 800427a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800427c:	4651      	mov	r1, sl
 800427e:	465a      	mov	r2, fp
 8004280:	f002 fe70 	bl	8006f64 <__ssprint_r>
 8004284:	2800      	cmp	r0, #0
 8004286:	f47f abd4 	bne.w	8003a32 <_svfprintf_r+0x1ae>
 800428a:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 800428c:	ae1f      	add	r6, sp, #124	; 0x7c
 800428e:	e6a0      	b.n	8003fd2 <_svfprintf_r+0x74e>
 8004290:	46a0      	mov	r8, r4
 8004292:	461c      	mov	r4, r3
 8004294:	3401      	adds	r4, #1
 8004296:	19ed      	adds	r5, r5, r7
 8004298:	2c07      	cmp	r4, #7
 800429a:	f8c6 8000 	str.w	r8, [r6]
 800429e:	6077      	str	r7, [r6, #4]
 80042a0:	953b      	str	r5, [sp, #236]	; 0xec
 80042a2:	943a      	str	r4, [sp, #232]	; 0xe8
 80042a4:	dddc      	ble.n	8004260 <_svfprintf_r+0x9dc>
 80042a6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80042a8:	4651      	mov	r1, sl
 80042aa:	465a      	mov	r2, fp
 80042ac:	f002 fe5a 	bl	8006f64 <__ssprint_r>
 80042b0:	2800      	cmp	r0, #0
 80042b2:	f47f abbe 	bne.w	8003a32 <_svfprintf_r+0x1ae>
 80042b6:	ae1f      	add	r6, sp, #124	; 0x7c
 80042b8:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80042ba:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80042bc:	e7d1      	b.n	8004262 <_svfprintf_r+0x9de>
 80042be:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80042c0:	4651      	mov	r1, sl
 80042c2:	465a      	mov	r2, fp
 80042c4:	f002 fe4e 	bl	8006f64 <__ssprint_r>
 80042c8:	2800      	cmp	r0, #0
 80042ca:	f43f aecf 	beq.w	800406c <_svfprintf_r+0x7e8>
 80042ce:	f7ff bbb0 	b.w	8003a32 <_svfprintf_r+0x1ae>
 80042d2:	910d      	str	r1, [sp, #52]	; 0x34
 80042d4:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 80042d8:	e438      	b.n	8003b4c <_svfprintf_r+0x2c8>
 80042da:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80042dc:	4651      	mov	r1, sl
 80042de:	465a      	mov	r2, fp
 80042e0:	f002 fe40 	bl	8006f64 <__ssprint_r>
 80042e4:	2800      	cmp	r0, #0
 80042e6:	f47f aba4 	bne.w	8003a32 <_svfprintf_r+0x1ae>
 80042ea:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80042ec:	ae1f      	add	r6, sp, #124	; 0x7c
 80042ee:	e661      	b.n	8003fb4 <_svfprintf_r+0x730>
 80042f0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80042f2:	4651      	mov	r1, sl
 80042f4:	465a      	mov	r2, fp
 80042f6:	f002 fe35 	bl	8006f64 <__ssprint_r>
 80042fa:	2800      	cmp	r0, #0
 80042fc:	f47f ab99 	bne.w	8003a32 <_svfprintf_r+0x1ae>
 8004300:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004302:	ae1f      	add	r6, sp, #124	; 0x7c
 8004304:	e61a      	b.n	8003f3c <_svfprintf_r+0x6b8>
 8004306:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004308:	4651      	mov	r1, sl
 800430a:	465a      	mov	r2, fp
 800430c:	f002 fe2a 	bl	8006f64 <__ssprint_r>
 8004310:	2800      	cmp	r0, #0
 8004312:	f47f ab8e 	bne.w	8003a32 <_svfprintf_r+0x1ae>
 8004316:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004318:	ae1f      	add	r6, sp, #124	; 0x7c
 800431a:	e600      	b.n	8003f1e <_svfprintf_r+0x69a>
 800431c:	9f40      	ldr	r7, [sp, #256]	; 0x100
 800431e:	2f00      	cmp	r7, #0
 8004320:	f340 819a 	ble.w	8004658 <_svfprintf_r+0xdd4>
 8004324:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8004326:	9816      	ldr	r0, [sp, #88]	; 0x58
 8004328:	9911      	ldr	r1, [sp, #68]	; 0x44
 800432a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800432c:	4287      	cmp	r7, r0
 800432e:	bfa8      	it	ge
 8004330:	4607      	movge	r7, r0
 8004332:	1889      	adds	r1, r1, r2
 8004334:	2f00      	cmp	r7, #0
 8004336:	910d      	str	r1, [sp, #52]	; 0x34
 8004338:	dd0b      	ble.n	8004352 <_svfprintf_r+0xace>
 800433a:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 800433c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800433e:	6077      	str	r7, [r6, #4]
 8004340:	3401      	adds	r4, #1
 8004342:	19ed      	adds	r5, r5, r7
 8004344:	2c07      	cmp	r4, #7
 8004346:	6032      	str	r2, [r6, #0]
 8004348:	953b      	str	r5, [sp, #236]	; 0xec
 800434a:	943a      	str	r4, [sp, #232]	; 0xe8
 800434c:	f300 8304 	bgt.w	8004958 <_svfprintf_r+0x10d4>
 8004350:	3608      	adds	r6, #8
 8004352:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004354:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
 8004358:	1bdf      	subs	r7, r3, r7
 800435a:	2f00      	cmp	r7, #0
 800435c:	f340 80a0 	ble.w	80044a0 <_svfprintf_r+0xc1c>
 8004360:	2f10      	cmp	r7, #16
 8004362:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8004364:	f8df 850c 	ldr.w	r8, [pc, #1292]	; 8004874 <_svfprintf_r+0xff0>
 8004368:	f340 815f 	ble.w	800462a <_svfprintf_r+0xda6>
 800436c:	4623      	mov	r3, r4
 800436e:	f04f 0910 	mov.w	r9, #16
 8004372:	4644      	mov	r4, r8
 8004374:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8004378:	e004      	b.n	8004384 <_svfprintf_r+0xb00>
 800437a:	3608      	adds	r6, #8
 800437c:	3f10      	subs	r7, #16
 800437e:	2f10      	cmp	r7, #16
 8004380:	f340 8151 	ble.w	8004626 <_svfprintf_r+0xda2>
 8004384:	3301      	adds	r3, #1
 8004386:	3510      	adds	r5, #16
 8004388:	2b07      	cmp	r3, #7
 800438a:	e886 0210 	stmia.w	r6, {r4, r9}
 800438e:	953b      	str	r5, [sp, #236]	; 0xec
 8004390:	933a      	str	r3, [sp, #232]	; 0xe8
 8004392:	ddf2      	ble.n	800437a <_svfprintf_r+0xaf6>
 8004394:	4640      	mov	r0, r8
 8004396:	4651      	mov	r1, sl
 8004398:	465a      	mov	r2, fp
 800439a:	f002 fde3 	bl	8006f64 <__ssprint_r>
 800439e:	2800      	cmp	r0, #0
 80043a0:	f47f ab47 	bne.w	8003a32 <_svfprintf_r+0x1ae>
 80043a4:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80043a6:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 80043a8:	ae1f      	add	r6, sp, #124	; 0x7c
 80043aa:	e7e7      	b.n	800437c <_svfprintf_r+0xaf8>
 80043ac:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 80043ae:	f10d 01e3 	add.w	r1, sp, #227	; 0xe3
 80043b2:	f003 000f 	and.w	r0, r3, #15
 80043b6:	460a      	mov	r2, r1
 80043b8:	5c28      	ldrb	r0, [r5, r0]
 80043ba:	3901      	subs	r1, #1
 80043bc:	091b      	lsrs	r3, r3, #4
 80043be:	7010      	strb	r0, [r2, #0]
 80043c0:	d1f7      	bne.n	80043b2 <_svfprintf_r+0xb2e>
 80043c2:	ebc2 030b 	rsb	r3, r2, fp
 80043c6:	9211      	str	r2, [sp, #68]	; 0x44
 80043c8:	930d      	str	r3, [sp, #52]	; 0x34
 80043ca:	f7ff bbbf 	b.w	8003b4c <_svfprintf_r+0x2c8>
 80043ce:	2b09      	cmp	r3, #9
 80043d0:	bf82      	ittt	hi
 80043d2:	f64c 45cd 	movwhi	r5, #52429	; 0xcccd
 80043d6:	f10d 01e3 	addhi.w	r1, sp, #227	; 0xe3
 80043da:	f6cc 45cc 	movthi	r5, #52428	; 0xcccc
 80043de:	d809      	bhi.n	80043f4 <_svfprintf_r+0xb70>
 80043e0:	981d      	ldr	r0, [sp, #116]	; 0x74
 80043e2:	3330      	adds	r3, #48	; 0x30
 80043e4:	f10d 01e3 	add.w	r1, sp, #227	; 0xe3
 80043e8:	f88d 30e3 	strb.w	r3, [sp, #227]	; 0xe3
 80043ec:	900d      	str	r0, [sp, #52]	; 0x34
 80043ee:	9111      	str	r1, [sp, #68]	; 0x44
 80043f0:	f7ff bbac 	b.w	8003b4c <_svfprintf_r+0x2c8>
 80043f4:	fba5 0203 	umull	r0, r2, r5, r3
 80043f8:	08d2      	lsrs	r2, r2, #3
 80043fa:	eb02 0782 	add.w	r7, r2, r2, lsl #2
 80043fe:	4608      	mov	r0, r1
 8004400:	eba3 0347 	sub.w	r3, r3, r7, lsl #1
 8004404:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004408:	7001      	strb	r1, [r0, #0]
 800440a:	4613      	mov	r3, r2
 800440c:	1e41      	subs	r1, r0, #1
 800440e:	2a00      	cmp	r2, #0
 8004410:	d1f0      	bne.n	80043f4 <_svfprintf_r+0xb70>
 8004412:	ebc0 030b 	rsb	r3, r0, fp
 8004416:	9011      	str	r0, [sp, #68]	; 0x44
 8004418:	930d      	str	r3, [sp, #52]	; 0x34
 800441a:	f7ff bb97 	b.w	8003b4c <_svfprintf_r+0x2c8>
 800441e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004420:	4651      	mov	r1, sl
 8004422:	465a      	mov	r2, fp
 8004424:	f002 fd9e 	bl	8006f64 <__ssprint_r>
 8004428:	2800      	cmp	r0, #0
 800442a:	f47f ab02 	bne.w	8003a32 <_svfprintf_r+0x1ae>
 800442e:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004430:	ae1f      	add	r6, sp, #124	; 0x7c
 8004432:	e563      	b.n	8003efc <_svfprintf_r+0x678>
 8004434:	9910      	ldr	r1, [sp, #64]	; 0x40
 8004436:	1e4f      	subs	r7, r1, #1
 8004438:	2f00      	cmp	r7, #0
 800443a:	f77f af12 	ble.w	8004262 <_svfprintf_r+0x9de>
 800443e:	2f10      	cmp	r7, #16
 8004440:	f8df 8430 	ldr.w	r8, [pc, #1072]	; 8004874 <_svfprintf_r+0xff0>
 8004444:	f77f af26 	ble.w	8004294 <_svfprintf_r+0xa10>
 8004448:	4623      	mov	r3, r4
 800444a:	f04f 0910 	mov.w	r9, #16
 800444e:	4644      	mov	r4, r8
 8004450:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8004454:	e004      	b.n	8004460 <_svfprintf_r+0xbdc>
 8004456:	3608      	adds	r6, #8
 8004458:	3f10      	subs	r7, #16
 800445a:	2f10      	cmp	r7, #16
 800445c:	f77f af18 	ble.w	8004290 <_svfprintf_r+0xa0c>
 8004460:	3301      	adds	r3, #1
 8004462:	3510      	adds	r5, #16
 8004464:	2b07      	cmp	r3, #7
 8004466:	e886 0210 	stmia.w	r6, {r4, r9}
 800446a:	953b      	str	r5, [sp, #236]	; 0xec
 800446c:	933a      	str	r3, [sp, #232]	; 0xe8
 800446e:	ddf2      	ble.n	8004456 <_svfprintf_r+0xbd2>
 8004470:	4640      	mov	r0, r8
 8004472:	4651      	mov	r1, sl
 8004474:	465a      	mov	r2, fp
 8004476:	f002 fd75 	bl	8006f64 <__ssprint_r>
 800447a:	2800      	cmp	r0, #0
 800447c:	f47f aad9 	bne.w	8003a32 <_svfprintf_r+0x1ae>
 8004480:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004482:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8004484:	ae1f      	add	r6, sp, #124	; 0x7c
 8004486:	e7e7      	b.n	8004458 <_svfprintf_r+0xbd4>
 8004488:	2202      	movs	r2, #2
 800448a:	e405      	b.n	8003c98 <_svfprintf_r+0x414>
 800448c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800448e:	4651      	mov	r1, sl
 8004490:	465a      	mov	r2, fp
 8004492:	f002 fd67 	bl	8006f64 <__ssprint_r>
 8004496:	2800      	cmp	r0, #0
 8004498:	f47f aacb 	bne.w	8003a32 <_svfprintf_r+0x1ae>
 800449c:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 800449e:	ae1f      	add	r6, sp, #124	; 0x7c
 80044a0:	9b40      	ldr	r3, [sp, #256]	; 0x100
 80044a2:	9810      	ldr	r0, [sp, #64]	; 0x40
 80044a4:	4298      	cmp	r0, r3
 80044a6:	dc45      	bgt.n	8004534 <_svfprintf_r+0xcb0>
 80044a8:	9908      	ldr	r1, [sp, #32]
 80044aa:	07c9      	lsls	r1, r1, #31
 80044ac:	d442      	bmi.n	8004534 <_svfprintf_r+0xcb0>
 80044ae:	9911      	ldr	r1, [sp, #68]	; 0x44
 80044b0:	9816      	ldr	r0, [sp, #88]	; 0x58
 80044b2:	180a      	adds	r2, r1, r0
 80044b4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80044b6:	9810      	ldr	r0, [sp, #64]	; 0x40
 80044b8:	1a8f      	subs	r7, r1, r2
 80044ba:	1ac3      	subs	r3, r0, r3
 80044bc:	42bb      	cmp	r3, r7
 80044be:	bfb8      	it	lt
 80044c0:	461f      	movlt	r7, r3
 80044c2:	2f00      	cmp	r7, #0
 80044c4:	dd0a      	ble.n	80044dc <_svfprintf_r+0xc58>
 80044c6:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80044c8:	6032      	str	r2, [r6, #0]
 80044ca:	3401      	adds	r4, #1
 80044cc:	19ed      	adds	r5, r5, r7
 80044ce:	2c07      	cmp	r4, #7
 80044d0:	6077      	str	r7, [r6, #4]
 80044d2:	953b      	str	r5, [sp, #236]	; 0xec
 80044d4:	943a      	str	r4, [sp, #232]	; 0xe8
 80044d6:	f300 8256 	bgt.w	8004986 <_svfprintf_r+0x1102>
 80044da:	3608      	adds	r6, #8
 80044dc:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
 80044e0:	1bdf      	subs	r7, r3, r7
 80044e2:	2f00      	cmp	r7, #0
 80044e4:	f77f ad75 	ble.w	8003fd2 <_svfprintf_r+0x74e>
 80044e8:	2f10      	cmp	r7, #16
 80044ea:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80044ec:	f8df 8384 	ldr.w	r8, [pc, #900]	; 8004874 <_svfprintf_r+0xff0>
 80044f0:	f77f adc2 	ble.w	8004078 <_svfprintf_r+0x7f4>
 80044f4:	4623      	mov	r3, r4
 80044f6:	f04f 0910 	mov.w	r9, #16
 80044fa:	4644      	mov	r4, r8
 80044fc:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8004500:	e004      	b.n	800450c <_svfprintf_r+0xc88>
 8004502:	3608      	adds	r6, #8
 8004504:	3f10      	subs	r7, #16
 8004506:	2f10      	cmp	r7, #16
 8004508:	f77f adb4 	ble.w	8004074 <_svfprintf_r+0x7f0>
 800450c:	3301      	adds	r3, #1
 800450e:	3510      	adds	r5, #16
 8004510:	2b07      	cmp	r3, #7
 8004512:	e886 0210 	stmia.w	r6, {r4, r9}
 8004516:	953b      	str	r5, [sp, #236]	; 0xec
 8004518:	933a      	str	r3, [sp, #232]	; 0xe8
 800451a:	ddf2      	ble.n	8004502 <_svfprintf_r+0xc7e>
 800451c:	4640      	mov	r0, r8
 800451e:	4651      	mov	r1, sl
 8004520:	465a      	mov	r2, fp
 8004522:	f002 fd1f 	bl	8006f64 <__ssprint_r>
 8004526:	2800      	cmp	r0, #0
 8004528:	f47f aa83 	bne.w	8003a32 <_svfprintf_r+0x1ae>
 800452c:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 800452e:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8004530:	ae1f      	add	r6, sp, #124	; 0x7c
 8004532:	e7e7      	b.n	8004504 <_svfprintf_r+0xc80>
 8004534:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8004536:	981a      	ldr	r0, [sp, #104]	; 0x68
 8004538:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800453a:	6070      	str	r0, [r6, #4]
 800453c:	3401      	adds	r4, #1
 800453e:	182d      	adds	r5, r5, r0
 8004540:	2c07      	cmp	r4, #7
 8004542:	6032      	str	r2, [r6, #0]
 8004544:	953b      	str	r5, [sp, #236]	; 0xec
 8004546:	943a      	str	r4, [sp, #232]	; 0xe8
 8004548:	f300 8211 	bgt.w	800496e <_svfprintf_r+0x10ea>
 800454c:	3608      	adds	r6, #8
 800454e:	e7ae      	b.n	80044ae <_svfprintf_r+0xc2a>
 8004550:	9b08      	ldr	r3, [sp, #32]
 8004552:	07da      	lsls	r2, r3, #31
 8004554:	f53f ae57 	bmi.w	8004206 <_svfprintf_r+0x982>
 8004558:	3401      	adds	r4, #1
 800455a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800455c:	3501      	adds	r5, #1
 800455e:	2301      	movs	r3, #1
 8004560:	2c07      	cmp	r4, #7
 8004562:	6032      	str	r2, [r6, #0]
 8004564:	6073      	str	r3, [r6, #4]
 8004566:	953b      	str	r5, [sp, #236]	; 0xec
 8004568:	943a      	str	r4, [sp, #232]	; 0xe8
 800456a:	f77f ae79 	ble.w	8004260 <_svfprintf_r+0x9dc>
 800456e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004570:	4651      	mov	r1, sl
 8004572:	465a      	mov	r2, fp
 8004574:	f002 fcf6 	bl	8006f64 <__ssprint_r>
 8004578:	2800      	cmp	r0, #0
 800457a:	f47f aa5a 	bne.w	8003a32 <_svfprintf_r+0x1ae>
 800457e:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004580:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8004582:	ae1f      	add	r6, sp, #124	; 0x7c
 8004584:	e66d      	b.n	8004262 <_svfprintf_r+0x9de>
 8004586:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004588:	4651      	mov	r1, sl
 800458a:	465a      	mov	r2, fp
 800458c:	f002 fcea 	bl	8006f64 <__ssprint_r>
 8004590:	2800      	cmp	r0, #0
 8004592:	f47f aa4e 	bne.w	8003a32 <_svfprintf_r+0x1ae>
 8004596:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004598:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 800459a:	ae1f      	add	r6, sp, #124	; 0x7c
 800459c:	e64b      	b.n	8004236 <_svfprintf_r+0x9b2>
 800459e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80045a0:	4651      	mov	r1, sl
 80045a2:	465a      	mov	r2, fp
 80045a4:	f002 fcde 	bl	8006f64 <__ssprint_r>
 80045a8:	2800      	cmp	r0, #0
 80045aa:	f47f aa42 	bne.w	8003a32 <_svfprintf_r+0x1ae>
 80045ae:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80045b0:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80045b2:	ae1f      	add	r6, sp, #124	; 0x7c
 80045b4:	e633      	b.n	800421e <_svfprintf_r+0x99a>
 80045b6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80045b8:	4651      	mov	r1, sl
 80045ba:	465a      	mov	r2, fp
 80045bc:	f002 fcd2 	bl	8006f64 <__ssprint_r>
 80045c0:	2800      	cmp	r0, #0
 80045c2:	f47f aa36 	bne.w	8003a32 <_svfprintf_r+0x1ae>
 80045c6:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80045c8:	ae1f      	add	r6, sp, #124	; 0x7c
 80045ca:	e4bb      	b.n	8003f44 <_svfprintf_r+0x6c0>
 80045cc:	f002 fb62 	bl	8006c94 <__fpclassifyd>
 80045d0:	2800      	cmp	r0, #0
 80045d2:	f040 809e 	bne.w	8004712 <_svfprintf_r+0xe8e>
 80045d6:	2203      	movs	r2, #3
 80045d8:	9012      	str	r0, [sp, #72]	; 0x48
 80045da:	4ba3      	ldr	r3, [pc, #652]	; (8004868 <_svfprintf_r+0xfe4>)
 80045dc:	920a      	str	r2, [sp, #40]	; 0x28
 80045de:	9815      	ldr	r0, [sp, #84]	; 0x54
 80045e0:	4aa2      	ldr	r2, [pc, #648]	; (800486c <_svfprintf_r+0xfe8>)
 80045e2:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 80045e6:	2847      	cmp	r0, #71	; 0x47
 80045e8:	bfd8      	it	le
 80045ea:	461a      	movle	r2, r3
 80045ec:	9211      	str	r2, [sp, #68]	; 0x44
 80045ee:	2303      	movs	r3, #3
 80045f0:	9a08      	ldr	r2, [sp, #32]
 80045f2:	930d      	str	r3, [sp, #52]	; 0x34
 80045f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80045f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045fa:	9208      	str	r2, [sp, #32]
 80045fc:	9316      	str	r3, [sp, #88]	; 0x58
 80045fe:	f7ff baaf 	b.w	8003b60 <_svfprintf_r+0x2dc>
 8004602:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004604:	2201      	movs	r2, #1
 8004606:	680b      	ldr	r3, [r1, #0]
 8004608:	e414      	b.n	8003e34 <_svfprintf_r+0x5b0>
 800460a:	9b08      	ldr	r3, [sp, #32]
 800460c:	065f      	lsls	r7, r3, #25
 800460e:	d56d      	bpl.n	80046ec <_svfprintf_r+0xe68>
 8004610:	980e      	ldr	r0, [sp, #56]	; 0x38
 8004612:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004614:	6803      	ldr	r3, [r0, #0]
 8004616:	3004      	adds	r0, #4
 8004618:	900e      	str	r0, [sp, #56]	; 0x38
 800461a:	8019      	strh	r1, [r3, #0]
 800461c:	f7ff b960 	b.w	80038e0 <_svfprintf_r+0x5c>
 8004620:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004622:	680b      	ldr	r3, [r1, #0]
 8004624:	e406      	b.n	8003e34 <_svfprintf_r+0x5b0>
 8004626:	46a0      	mov	r8, r4
 8004628:	461c      	mov	r4, r3
 800462a:	3401      	adds	r4, #1
 800462c:	19ed      	adds	r5, r5, r7
 800462e:	2c07      	cmp	r4, #7
 8004630:	f8c6 8000 	str.w	r8, [r6]
 8004634:	6077      	str	r7, [r6, #4]
 8004636:	953b      	str	r5, [sp, #236]	; 0xec
 8004638:	943a      	str	r4, [sp, #232]	; 0xe8
 800463a:	f73f af27 	bgt.w	800448c <_svfprintf_r+0xc08>
 800463e:	3608      	adds	r6, #8
 8004640:	e72e      	b.n	80044a0 <_svfprintf_r+0xc1c>
 8004642:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004644:	4651      	mov	r1, sl
 8004646:	465a      	mov	r2, fp
 8004648:	f002 fc8c 	bl	8006f64 <__ssprint_r>
 800464c:	2800      	cmp	r0, #0
 800464e:	f47f a9f0 	bne.w	8003a32 <_svfprintf_r+0x1ae>
 8004652:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004654:	ae1f      	add	r6, sp, #124	; 0x7c
 8004656:	e53d      	b.n	80040d4 <_svfprintf_r+0x850>
 8004658:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 800465a:	4b85      	ldr	r3, [pc, #532]	; (8004870 <_svfprintf_r+0xfec>)
 800465c:	3401      	adds	r4, #1
 800465e:	6033      	str	r3, [r6, #0]
 8004660:	3501      	adds	r5, #1
 8004662:	2301      	movs	r3, #1
 8004664:	2c07      	cmp	r4, #7
 8004666:	6073      	str	r3, [r6, #4]
 8004668:	953b      	str	r5, [sp, #236]	; 0xec
 800466a:	943a      	str	r4, [sp, #232]	; 0xe8
 800466c:	f300 8139 	bgt.w	80048e2 <_svfprintf_r+0x105e>
 8004670:	3608      	adds	r6, #8
 8004672:	b92f      	cbnz	r7, 8004680 <_svfprintf_r+0xdfc>
 8004674:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004676:	b91a      	cbnz	r2, 8004680 <_svfprintf_r+0xdfc>
 8004678:	9b08      	ldr	r3, [sp, #32]
 800467a:	07d8      	lsls	r0, r3, #31
 800467c:	f57f aca9 	bpl.w	8003fd2 <_svfprintf_r+0x74e>
 8004680:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8004682:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004684:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8004686:	6071      	str	r1, [r6, #4]
 8004688:	3401      	adds	r4, #1
 800468a:	186d      	adds	r5, r5, r1
 800468c:	2c07      	cmp	r4, #7
 800468e:	6030      	str	r0, [r6, #0]
 8004690:	953b      	str	r5, [sp, #236]	; 0xec
 8004692:	943a      	str	r4, [sp, #232]	; 0xe8
 8004694:	f300 81d2 	bgt.w	8004a3c <_svfprintf_r+0x11b8>
 8004698:	3608      	adds	r6, #8
 800469a:	427f      	negs	r7, r7
 800469c:	2f00      	cmp	r7, #0
 800469e:	f340 8141 	ble.w	8004924 <_svfprintf_r+0x10a0>
 80046a2:	2f10      	cmp	r7, #16
 80046a4:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 8004874 <_svfprintf_r+0xff0>
 80046a8:	f340 8183 	ble.w	80049b2 <_svfprintf_r+0x112e>
 80046ac:	4623      	mov	r3, r4
 80046ae:	f04f 0910 	mov.w	r9, #16
 80046b2:	4644      	mov	r4, r8
 80046b4:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 80046b8:	e004      	b.n	80046c4 <_svfprintf_r+0xe40>
 80046ba:	3608      	adds	r6, #8
 80046bc:	3f10      	subs	r7, #16
 80046be:	2f10      	cmp	r7, #16
 80046c0:	f340 8175 	ble.w	80049ae <_svfprintf_r+0x112a>
 80046c4:	3301      	adds	r3, #1
 80046c6:	3510      	adds	r5, #16
 80046c8:	2b07      	cmp	r3, #7
 80046ca:	e886 0210 	stmia.w	r6, {r4, r9}
 80046ce:	953b      	str	r5, [sp, #236]	; 0xec
 80046d0:	933a      	str	r3, [sp, #232]	; 0xe8
 80046d2:	ddf2      	ble.n	80046ba <_svfprintf_r+0xe36>
 80046d4:	4640      	mov	r0, r8
 80046d6:	4651      	mov	r1, sl
 80046d8:	465a      	mov	r2, fp
 80046da:	f002 fc43 	bl	8006f64 <__ssprint_r>
 80046de:	2800      	cmp	r0, #0
 80046e0:	f47f a9a7 	bne.w	8003a32 <_svfprintf_r+0x1ae>
 80046e4:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80046e6:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 80046e8:	ae1f      	add	r6, sp, #124	; 0x7c
 80046ea:	e7e7      	b.n	80046bc <_svfprintf_r+0xe38>
 80046ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80046ee:	980c      	ldr	r0, [sp, #48]	; 0x30
 80046f0:	6813      	ldr	r3, [r2, #0]
 80046f2:	3204      	adds	r2, #4
 80046f4:	920e      	str	r2, [sp, #56]	; 0x38
 80046f6:	6018      	str	r0, [r3, #0]
 80046f8:	f7ff b8f2 	b.w	80038e0 <_svfprintf_r+0x5c>
 80046fc:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80046fe:	4651      	mov	r1, sl
 8004700:	465a      	mov	r2, fp
 8004702:	f002 fc2f 	bl	8006f64 <__ssprint_r>
 8004706:	2800      	cmp	r0, #0
 8004708:	f47f a993 	bne.w	8003a32 <_svfprintf_r+0x1ae>
 800470c:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 800470e:	ae1f      	add	r6, sp, #124	; 0x7c
 8004710:	e4f5      	b.n	80040fe <_svfprintf_r+0x87a>
 8004712:	1c60      	adds	r0, r4, #1
 8004714:	f000 80f1 	beq.w	80048fa <_svfprintf_r+0x1076>
 8004718:	9915      	ldr	r1, [sp, #84]	; 0x54
 800471a:	2967      	cmp	r1, #103	; 0x67
 800471c:	bf18      	it	ne
 800471e:	2947      	cmpne	r1, #71	; 0x47
 8004720:	bf14      	ite	ne
 8004722:	2300      	movne	r3, #0
 8004724:	2301      	moveq	r3, #1
 8004726:	bf18      	it	ne
 8004728:	930a      	strne	r3, [sp, #40]	; 0x28
 800472a:	d104      	bne.n	8004736 <_svfprintf_r+0xeb2>
 800472c:	2c00      	cmp	r4, #0
 800472e:	f000 81ad 	beq.w	8004a8c <_svfprintf_r+0x1208>
 8004732:	2201      	movs	r2, #1
 8004734:	920a      	str	r2, [sp, #40]	; 0x28
 8004736:	9808      	ldr	r0, [sp, #32]
 8004738:	2d00      	cmp	r5, #0
 800473a:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 800473e:	9008      	str	r0, [sp, #32]
 8004740:	f2c0 8189 	blt.w	8004a56 <_svfprintf_r+0x11d2>
 8004744:	2200      	movs	r2, #0
 8004746:	9212      	str	r2, [sp, #72]	; 0x48
 8004748:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800474a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800474c:	f1a3 0166 	sub.w	r1, r3, #102	; 0x66
 8004750:	424b      	negs	r3, r1
 8004752:	eb43 0301 	adc.w	r3, r3, r1
 8004756:	469c      	mov	ip, r3
 8004758:	2846      	cmp	r0, #70	; 0x46
 800475a:	bf08      	it	eq
 800475c:	f04c 0c01 	orreq.w	ip, ip, #1
 8004760:	930d      	str	r3, [sp, #52]	; 0x34
 8004762:	46a1      	mov	r9, r4
 8004764:	2103      	movs	r1, #3
 8004766:	f1bc 0f00 	cmp.w	ip, #0
 800476a:	d107      	bne.n	800477c <_svfprintf_r+0xef8>
 800476c:	2865      	cmp	r0, #101	; 0x65
 800476e:	bf18      	it	ne
 8004770:	2845      	cmpne	r0, #69	; 0x45
 8004772:	bf0c      	ite	eq
 8004774:	f104 0901 	addeq.w	r9, r4, #1
 8004778:	46a1      	movne	r9, r4
 800477a:	2102      	movs	r1, #2
 800477c:	e88d 0202 	stmia.w	sp, {r1, r9}
 8004780:	a940      	add	r1, sp, #256	; 0x100
 8004782:	9102      	str	r1, [sp, #8]
 8004784:	a941      	add	r1, sp, #260	; 0x104
 8004786:	9103      	str	r1, [sp, #12]
 8004788:	4642      	mov	r2, r8
 800478a:	a942      	add	r1, sp, #264	; 0x108
 800478c:	462b      	mov	r3, r5
 800478e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004790:	9104      	str	r1, [sp, #16]
 8004792:	f8cd c018 	str.w	ip, [sp, #24]
 8004796:	f000 fa6b 	bl	8004c70 <_dtoa_r>
 800479a:	9915      	ldr	r1, [sp, #84]	; 0x54
 800479c:	9011      	str	r0, [sp, #68]	; 0x44
 800479e:	2947      	cmp	r1, #71	; 0x47
 80047a0:	bf18      	it	ne
 80047a2:	2967      	cmpne	r1, #103	; 0x67
 80047a4:	f8dd c018 	ldr.w	ip, [sp, #24]
 80047a8:	d104      	bne.n	80047b4 <_svfprintf_r+0xf30>
 80047aa:	9a08      	ldr	r2, [sp, #32]
 80047ac:	07d2      	lsls	r2, r2, #31
 80047ae:	bf58      	it	pl
 80047b0:	9f42      	ldrpl	r7, [sp, #264]	; 0x108
 80047b2:	d515      	bpl.n	80047e0 <_svfprintf_r+0xf5c>
 80047b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80047b6:	eb03 0709 	add.w	r7, r3, r9
 80047ba:	f1bc 0f00 	cmp.w	ip, #0
 80047be:	d005      	beq.n	80047cc <_svfprintf_r+0xf48>
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	2b30      	cmp	r3, #48	; 0x30
 80047c4:	f000 8165 	beq.w	8004a92 <_svfprintf_r+0x120e>
 80047c8:	9b40      	ldr	r3, [sp, #256]	; 0x100
 80047ca:	18ff      	adds	r7, r7, r3
 80047cc:	4640      	mov	r0, r8
 80047ce:	4629      	mov	r1, r5
 80047d0:	2200      	movs	r2, #0
 80047d2:	2300      	movs	r3, #0
 80047d4:	f003 ff84 	bl	80086e0 <__aeabi_dcmpeq>
 80047d8:	2800      	cmp	r0, #0
 80047da:	f000 8117 	beq.w	8004a0c <_svfprintf_r+0x1188>
 80047de:	9742      	str	r7, [sp, #264]	; 0x108
 80047e0:	9811      	ldr	r0, [sp, #68]	; 0x44
 80047e2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80047e4:	1a3f      	subs	r7, r7, r0
 80047e6:	9710      	str	r7, [sp, #64]	; 0x40
 80047e8:	2900      	cmp	r1, #0
 80047ea:	f000 80f9 	beq.w	80049e0 <_svfprintf_r+0x115c>
 80047ee:	9940      	ldr	r1, [sp, #256]	; 0x100
 80047f0:	1ccb      	adds	r3, r1, #3
 80047f2:	db02      	blt.n	80047fa <_svfprintf_r+0xf76>
 80047f4:	428c      	cmp	r4, r1
 80047f6:	f280 80fa 	bge.w	80049ee <_svfprintf_r+0x116a>
 80047fa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80047fc:	3a02      	subs	r2, #2
 80047fe:	9215      	str	r2, [sp, #84]	; 0x54
 8004800:	3901      	subs	r1, #1
 8004802:	9815      	ldr	r0, [sp, #84]	; 0x54
 8004804:	9140      	str	r1, [sp, #256]	; 0x100
 8004806:	2900      	cmp	r1, #0
 8004808:	f88d 00f0 	strb.w	r0, [sp, #240]	; 0xf0
 800480c:	f2c0 815d 	blt.w	8004aca <_svfprintf_r+0x1246>
 8004810:	232b      	movs	r3, #43	; 0x2b
 8004812:	f88d 30f1 	strb.w	r3, [sp, #241]	; 0xf1
 8004816:	2909      	cmp	r1, #9
 8004818:	f340 8122 	ble.w	8004a60 <_svfprintf_r+0x11dc>
 800481c:	f10d 07ff 	add.w	r7, sp, #255	; 0xff
 8004820:	f246 6467 	movw	r4, #26215	; 0x6667
 8004824:	4638      	mov	r0, r7
 8004826:	f2c6 6466 	movt	r4, #26214	; 0x6666
 800482a:	fb84 3201 	smull	r3, r2, r4, r1
 800482e:	17cb      	asrs	r3, r1, #31
 8004830:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 8004834:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8004838:	eba1 0242 	sub.w	r2, r1, r2, lsl #1
 800483c:	3230      	adds	r2, #48	; 0x30
 800483e:	2b09      	cmp	r3, #9
 8004840:	4605      	mov	r5, r0
 8004842:	4619      	mov	r1, r3
 8004844:	f800 2d01 	strb.w	r2, [r0, #-1]!
 8004848:	dcef      	bgt.n	800482a <_svfprintf_r+0xfa6>
 800484a:	3130      	adds	r1, #48	; 0x30
 800484c:	1eaa      	subs	r2, r5, #2
 800484e:	b2c9      	uxtb	r1, r1
 8004850:	42ba      	cmp	r2, r7
 8004852:	f805 1c02 	strb.w	r1, [r5, #-2]
 8004856:	bf28      	it	cs
 8004858:	f10d 01f2 	addcs.w	r1, sp, #242	; 0xf2
 800485c:	d213      	bcs.n	8004886 <_svfprintf_r+0x1002>
 800485e:	f10d 03f2 	add.w	r3, sp, #242	; 0xf2
 8004862:	f10d 00fe 	add.w	r0, sp, #254	; 0xfe
 8004866:	e009      	b.n	800487c <_svfprintf_r+0xff8>
 8004868:	08008ab0 	.word	0x08008ab0
 800486c:	08008ab4 	.word	0x08008ab4
 8004870:	08008ae8 	.word	0x08008ae8
 8004874:	080088d8 	.word	0x080088d8
 8004878:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800487c:	f803 1b01 	strb.w	r1, [r3], #1
 8004880:	4282      	cmp	r2, r0
 8004882:	4619      	mov	r1, r3
 8004884:	d1f8      	bne.n	8004878 <_svfprintf_r+0xff4>
 8004886:	9810      	ldr	r0, [sp, #64]	; 0x40
 8004888:	ab3c      	add	r3, sp, #240	; 0xf0
 800488a:	1acb      	subs	r3, r1, r3
 800488c:	931b      	str	r3, [sp, #108]	; 0x6c
 800488e:	2801      	cmp	r0, #1
 8004890:	4403      	add	r3, r0
 8004892:	930d      	str	r3, [sp, #52]	; 0x34
 8004894:	f340 8125 	ble.w	8004ae2 <_svfprintf_r+0x125e>
 8004898:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800489a:	3301      	adds	r3, #1
 800489c:	ea23 70e3 	bic.w	r0, r3, r3, asr #31
 80048a0:	2100      	movs	r1, #0
 80048a2:	930d      	str	r3, [sp, #52]	; 0x34
 80048a4:	900a      	str	r0, [sp, #40]	; 0x28
 80048a6:	9116      	str	r1, [sp, #88]	; 0x58
 80048a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80048aa:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	f43f a956 	beq.w	8003b60 <_svfprintf_r+0x2dc>
 80048b4:	232d      	movs	r3, #45	; 0x2d
 80048b6:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
 80048ba:	2300      	movs	r3, #0
 80048bc:	9312      	str	r3, [sp, #72]	; 0x48
 80048be:	f7ff b950 	b.w	8003b62 <_svfprintf_r+0x2de>
 80048c2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80048c4:	2140      	movs	r1, #64	; 0x40
 80048c6:	f001 fa57 	bl	8005d78 <_malloc_r>
 80048ca:	f8ca 0000 	str.w	r0, [sl]
 80048ce:	f8ca 0010 	str.w	r0, [sl, #16]
 80048d2:	2800      	cmp	r0, #0
 80048d4:	f000 812b 	beq.w	8004b2e <_svfprintf_r+0x12aa>
 80048d8:	2340      	movs	r3, #64	; 0x40
 80048da:	f8ca 3014 	str.w	r3, [sl, #20]
 80048de:	f7fe bfec 	b.w	80038ba <_svfprintf_r+0x36>
 80048e2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80048e4:	4651      	mov	r1, sl
 80048e6:	465a      	mov	r2, fp
 80048e8:	f002 fb3c 	bl	8006f64 <__ssprint_r>
 80048ec:	2800      	cmp	r0, #0
 80048ee:	f47f a8a0 	bne.w	8003a32 <_svfprintf_r+0x1ae>
 80048f2:	9f40      	ldr	r7, [sp, #256]	; 0x100
 80048f4:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80048f6:	ae1f      	add	r6, sp, #124	; 0x7c
 80048f8:	e6bb      	b.n	8004672 <_svfprintf_r+0xdee>
 80048fa:	9815      	ldr	r0, [sp, #84]	; 0x54
 80048fc:	2847      	cmp	r0, #71	; 0x47
 80048fe:	bf18      	it	ne
 8004900:	2867      	cmpne	r0, #103	; 0x67
 8004902:	bf14      	ite	ne
 8004904:	2000      	movne	r0, #0
 8004906:	2001      	moveq	r0, #1
 8004908:	900a      	str	r0, [sp, #40]	; 0x28
 800490a:	2406      	movs	r4, #6
 800490c:	e713      	b.n	8004736 <_svfprintf_r+0xeb2>
 800490e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004910:	4651      	mov	r1, sl
 8004912:	465a      	mov	r2, fp
 8004914:	f002 fb26 	bl	8006f64 <__ssprint_r>
 8004918:	2800      	cmp	r0, #0
 800491a:	f47f a88a 	bne.w	8003a32 <_svfprintf_r+0x1ae>
 800491e:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004920:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8004922:	ae1f      	add	r6, sp, #124	; 0x7c
 8004924:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004926:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004928:	6072      	str	r2, [r6, #4]
 800492a:	3401      	adds	r4, #1
 800492c:	18ad      	adds	r5, r5, r2
 800492e:	2c07      	cmp	r4, #7
 8004930:	6033      	str	r3, [r6, #0]
 8004932:	953b      	str	r5, [sp, #236]	; 0xec
 8004934:	943a      	str	r4, [sp, #232]	; 0xe8
 8004936:	f77f ab4b 	ble.w	8003fd0 <_svfprintf_r+0x74c>
 800493a:	f7ff bba6 	b.w	800408a <_svfprintf_r+0x806>
 800493e:	f002 fae1 	bl	8006f04 <strlen>
 8004942:	900d      	str	r0, [sp, #52]	; 0x34
 8004944:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8004948:	9512      	str	r5, [sp, #72]	; 0x48
 800494a:	900a      	str	r0, [sp, #40]	; 0x28
 800494c:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 8004950:	970e      	str	r7, [sp, #56]	; 0x38
 8004952:	9516      	str	r5, [sp, #88]	; 0x58
 8004954:	f7ff b904 	b.w	8003b60 <_svfprintf_r+0x2dc>
 8004958:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800495a:	4651      	mov	r1, sl
 800495c:	465a      	mov	r2, fp
 800495e:	f002 fb01 	bl	8006f64 <__ssprint_r>
 8004962:	2800      	cmp	r0, #0
 8004964:	f47f a865 	bne.w	8003a32 <_svfprintf_r+0x1ae>
 8004968:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 800496a:	ae1f      	add	r6, sp, #124	; 0x7c
 800496c:	e4f1      	b.n	8004352 <_svfprintf_r+0xace>
 800496e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004970:	4651      	mov	r1, sl
 8004972:	465a      	mov	r2, fp
 8004974:	f002 faf6 	bl	8006f64 <__ssprint_r>
 8004978:	2800      	cmp	r0, #0
 800497a:	f47f a85a 	bne.w	8003a32 <_svfprintf_r+0x1ae>
 800497e:	9b40      	ldr	r3, [sp, #256]	; 0x100
 8004980:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004982:	ae1f      	add	r6, sp, #124	; 0x7c
 8004984:	e593      	b.n	80044ae <_svfprintf_r+0xc2a>
 8004986:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004988:	4651      	mov	r1, sl
 800498a:	465a      	mov	r2, fp
 800498c:	f002 faea 	bl	8006f64 <__ssprint_r>
 8004990:	2800      	cmp	r0, #0
 8004992:	f47f a84e 	bne.w	8003a32 <_svfprintf_r+0x1ae>
 8004996:	9b40      	ldr	r3, [sp, #256]	; 0x100
 8004998:	9910      	ldr	r1, [sp, #64]	; 0x40
 800499a:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 800499c:	1acb      	subs	r3, r1, r3
 800499e:	ae1f      	add	r6, sp, #124	; 0x7c
 80049a0:	e59c      	b.n	80044dc <_svfprintf_r+0xc58>
 80049a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80049a4:	ebc3 030b 	rsb	r3, r3, fp
 80049a8:	930d      	str	r3, [sp, #52]	; 0x34
 80049aa:	f7ff b8cf 	b.w	8003b4c <_svfprintf_r+0x2c8>
 80049ae:	46a0      	mov	r8, r4
 80049b0:	461c      	mov	r4, r3
 80049b2:	3401      	adds	r4, #1
 80049b4:	19ed      	adds	r5, r5, r7
 80049b6:	2c07      	cmp	r4, #7
 80049b8:	f8c6 8000 	str.w	r8, [r6]
 80049bc:	6077      	str	r7, [r6, #4]
 80049be:	953b      	str	r5, [sp, #236]	; 0xec
 80049c0:	943a      	str	r4, [sp, #232]	; 0xe8
 80049c2:	dca4      	bgt.n	800490e <_svfprintf_r+0x108a>
 80049c4:	3608      	adds	r6, #8
 80049c6:	e7ad      	b.n	8004924 <_svfprintf_r+0x10a0>
 80049c8:	2c06      	cmp	r4, #6
 80049ca:	bf28      	it	cs
 80049cc:	2406      	movcs	r4, #6
 80049ce:	495f      	ldr	r1, [pc, #380]	; (8004b4c <_svfprintf_r+0x12c8>)
 80049d0:	940d      	str	r4, [sp, #52]	; 0x34
 80049d2:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
 80049d6:	900a      	str	r0, [sp, #40]	; 0x28
 80049d8:	970e      	str	r7, [sp, #56]	; 0x38
 80049da:	9111      	str	r1, [sp, #68]	; 0x44
 80049dc:	f7ff ba01 	b.w	8003de2 <_svfprintf_r+0x55e>
 80049e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80049e2:	2b65      	cmp	r3, #101	; 0x65
 80049e4:	dd6f      	ble.n	8004ac6 <_svfprintf_r+0x1242>
 80049e6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80049e8:	9940      	ldr	r1, [sp, #256]	; 0x100
 80049ea:	2a00      	cmp	r2, #0
 80049ec:	d15e      	bne.n	8004aac <_svfprintf_r+0x1228>
 80049ee:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80049f0:	428a      	cmp	r2, r1
 80049f2:	dc3d      	bgt.n	8004a70 <_svfprintf_r+0x11ec>
 80049f4:	9b08      	ldr	r3, [sp, #32]
 80049f6:	07da      	lsls	r2, r3, #31
 80049f8:	d56c      	bpl.n	8004ad4 <_svfprintf_r+0x1250>
 80049fa:	1c4b      	adds	r3, r1, #1
 80049fc:	ea23 70e3 	bic.w	r0, r3, r3, asr #31
 8004a00:	2267      	movs	r2, #103	; 0x67
 8004a02:	930d      	str	r3, [sp, #52]	; 0x34
 8004a04:	900a      	str	r0, [sp, #40]	; 0x28
 8004a06:	9215      	str	r2, [sp, #84]	; 0x54
 8004a08:	9116      	str	r1, [sp, #88]	; 0x58
 8004a0a:	e74d      	b.n	80048a8 <_svfprintf_r+0x1024>
 8004a0c:	9b42      	ldr	r3, [sp, #264]	; 0x108
 8004a0e:	429f      	cmp	r7, r3
 8004a10:	bf98      	it	ls
 8004a12:	461f      	movls	r7, r3
 8004a14:	f67f aee4 	bls.w	80047e0 <_svfprintf_r+0xf5c>
 8004a18:	2230      	movs	r2, #48	; 0x30
 8004a1a:	f803 2b01 	strb.w	r2, [r3], #1
 8004a1e:	42bb      	cmp	r3, r7
 8004a20:	9342      	str	r3, [sp, #264]	; 0x108
 8004a22:	d1fa      	bne.n	8004a1a <_svfprintf_r+0x1196>
 8004a24:	e6dc      	b.n	80047e0 <_svfprintf_r+0xf5c>
 8004a26:	ea24 72e4 	bic.w	r2, r4, r4, asr #31
 8004a2a:	9012      	str	r0, [sp, #72]	; 0x48
 8004a2c:	920a      	str	r2, [sp, #40]	; 0x28
 8004a2e:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 8004a32:	970e      	str	r7, [sp, #56]	; 0x38
 8004a34:	940d      	str	r4, [sp, #52]	; 0x34
 8004a36:	9016      	str	r0, [sp, #88]	; 0x58
 8004a38:	f7ff b892 	b.w	8003b60 <_svfprintf_r+0x2dc>
 8004a3c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004a3e:	4651      	mov	r1, sl
 8004a40:	465a      	mov	r2, fp
 8004a42:	f002 fa8f 	bl	8006f64 <__ssprint_r>
 8004a46:	2800      	cmp	r0, #0
 8004a48:	f47e aff3 	bne.w	8003a32 <_svfprintf_r+0x1ae>
 8004a4c:	9f40      	ldr	r7, [sp, #256]	; 0x100
 8004a4e:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004a50:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8004a52:	ae1f      	add	r6, sp, #124	; 0x7c
 8004a54:	e621      	b.n	800469a <_svfprintf_r+0xe16>
 8004a56:	212d      	movs	r1, #45	; 0x2d
 8004a58:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8004a5c:	9112      	str	r1, [sp, #72]	; 0x48
 8004a5e:	e673      	b.n	8004748 <_svfprintf_r+0xec4>
 8004a60:	3130      	adds	r1, #48	; 0x30
 8004a62:	2330      	movs	r3, #48	; 0x30
 8004a64:	f88d 10f3 	strb.w	r1, [sp, #243]	; 0xf3
 8004a68:	f88d 30f2 	strb.w	r3, [sp, #242]	; 0xf2
 8004a6c:	a93d      	add	r1, sp, #244	; 0xf4
 8004a6e:	e70a      	b.n	8004886 <_svfprintf_r+0x1002>
 8004a70:	2900      	cmp	r1, #0
 8004a72:	9810      	ldr	r0, [sp, #64]	; 0x40
 8004a74:	bfd4      	ite	le
 8004a76:	f1c1 0302 	rsble	r3, r1, #2
 8004a7a:	2301      	movgt	r3, #1
 8004a7c:	181b      	adds	r3, r3, r0
 8004a7e:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8004a82:	930d      	str	r3, [sp, #52]	; 0x34
 8004a84:	2367      	movs	r3, #103	; 0x67
 8004a86:	920a      	str	r2, [sp, #40]	; 0x28
 8004a88:	9315      	str	r3, [sp, #84]	; 0x54
 8004a8a:	e7bd      	b.n	8004a08 <_svfprintf_r+0x1184>
 8004a8c:	2401      	movs	r4, #1
 8004a8e:	940a      	str	r4, [sp, #40]	; 0x28
 8004a90:	e651      	b.n	8004736 <_svfprintf_r+0xeb2>
 8004a92:	4640      	mov	r0, r8
 8004a94:	4629      	mov	r1, r5
 8004a96:	2200      	movs	r2, #0
 8004a98:	2300      	movs	r3, #0
 8004a9a:	f003 fe21 	bl	80086e0 <__aeabi_dcmpeq>
 8004a9e:	2800      	cmp	r0, #0
 8004aa0:	f47f ae92 	bne.w	80047c8 <_svfprintf_r+0xf44>
 8004aa4:	f1c9 0301 	rsb	r3, r9, #1
 8004aa8:	9340      	str	r3, [sp, #256]	; 0x100
 8004aaa:	e68e      	b.n	80047ca <_svfprintf_r+0xf46>
 8004aac:	2900      	cmp	r1, #0
 8004aae:	dd38      	ble.n	8004b22 <_svfprintf_r+0x129e>
 8004ab0:	bb74      	cbnz	r4, 8004b10 <_svfprintf_r+0x128c>
 8004ab2:	9b08      	ldr	r3, [sp, #32]
 8004ab4:	07dd      	lsls	r5, r3, #31
 8004ab6:	d42b      	bmi.n	8004b10 <_svfprintf_r+0x128c>
 8004ab8:	ea21 70e1 	bic.w	r0, r1, r1, asr #31
 8004abc:	2266      	movs	r2, #102	; 0x66
 8004abe:	900a      	str	r0, [sp, #40]	; 0x28
 8004ac0:	910d      	str	r1, [sp, #52]	; 0x34
 8004ac2:	9215      	str	r2, [sp, #84]	; 0x54
 8004ac4:	e7a0      	b.n	8004a08 <_svfprintf_r+0x1184>
 8004ac6:	9940      	ldr	r1, [sp, #256]	; 0x100
 8004ac8:	e69a      	b.n	8004800 <_svfprintf_r+0xf7c>
 8004aca:	232d      	movs	r3, #45	; 0x2d
 8004acc:	4249      	negs	r1, r1
 8004ace:	f88d 30f1 	strb.w	r3, [sp, #241]	; 0xf1
 8004ad2:	e6a0      	b.n	8004816 <_svfprintf_r+0xf92>
 8004ad4:	ea21 70e1 	bic.w	r0, r1, r1, asr #31
 8004ad8:	2267      	movs	r2, #103	; 0x67
 8004ada:	900a      	str	r0, [sp, #40]	; 0x28
 8004adc:	910d      	str	r1, [sp, #52]	; 0x34
 8004ade:	9215      	str	r2, [sp, #84]	; 0x54
 8004ae0:	e792      	b.n	8004a08 <_svfprintf_r+0x1184>
 8004ae2:	9908      	ldr	r1, [sp, #32]
 8004ae4:	f011 0301 	ands.w	r3, r1, #1
 8004ae8:	f47f aed6 	bne.w	8004898 <_svfprintf_r+0x1014>
 8004aec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004aee:	9316      	str	r3, [sp, #88]	; 0x58
 8004af0:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8004af4:	920a      	str	r2, [sp, #40]	; 0x28
 8004af6:	e6d7      	b.n	80048a8 <_svfprintf_r+0x1024>
 8004af8:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004afa:	680c      	ldr	r4, [r1, #0]
 8004afc:	1d0b      	adds	r3, r1, #4
 8004afe:	2c00      	cmp	r4, #0
 8004b00:	bfbc      	itt	lt
 8004b02:	930e      	strlt	r3, [sp, #56]	; 0x38
 8004b04:	f04f 34ff 	movlt.w	r4, #4294967295	; 0xffffffff
 8004b08:	f6bf a985 	bge.w	8003e16 <_svfprintf_r+0x592>
 8004b0c:	f7fe bf18 	b.w	8003940 <_svfprintf_r+0xbc>
 8004b10:	3401      	adds	r4, #1
 8004b12:	190c      	adds	r4, r1, r4
 8004b14:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
 8004b18:	2066      	movs	r0, #102	; 0x66
 8004b1a:	940d      	str	r4, [sp, #52]	; 0x34
 8004b1c:	930a      	str	r3, [sp, #40]	; 0x28
 8004b1e:	9015      	str	r0, [sp, #84]	; 0x54
 8004b20:	e772      	b.n	8004a08 <_svfprintf_r+0x1184>
 8004b22:	b914      	cbnz	r4, 8004b2a <_svfprintf_r+0x12a6>
 8004b24:	9a08      	ldr	r2, [sp, #32]
 8004b26:	07d0      	lsls	r0, r2, #31
 8004b28:	d509      	bpl.n	8004b3e <_svfprintf_r+0x12ba>
 8004b2a:	3402      	adds	r4, #2
 8004b2c:	e7f2      	b.n	8004b14 <_svfprintf_r+0x1290>
 8004b2e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004b30:	230c      	movs	r3, #12
 8004b32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b36:	600b      	str	r3, [r1, #0]
 8004b38:	920c      	str	r2, [sp, #48]	; 0x30
 8004b3a:	f7fe bf83 	b.w	8003a44 <_svfprintf_r+0x1c0>
 8004b3e:	2001      	movs	r0, #1
 8004b40:	2266      	movs	r2, #102	; 0x66
 8004b42:	900a      	str	r0, [sp, #40]	; 0x28
 8004b44:	9215      	str	r2, [sp, #84]	; 0x54
 8004b46:	900d      	str	r0, [sp, #52]	; 0x34
 8004b48:	e75e      	b.n	8004a08 <_svfprintf_r+0x1184>
 8004b4a:	bf00      	nop
 8004b4c:	08008ae0 	.word	0x08008ae0

08004b50 <quorem>:
 8004b50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b54:	6903      	ldr	r3, [r0, #16]
 8004b56:	690d      	ldr	r5, [r1, #16]
 8004b58:	429d      	cmp	r5, r3
 8004b5a:	4681      	mov	r9, r0
 8004b5c:	f300 8084 	bgt.w	8004c68 <quorem+0x118>
 8004b60:	1ceb      	adds	r3, r5, #3
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	18cf      	adds	r7, r1, r3
 8004b66:	18c3      	adds	r3, r0, r3
 8004b68:	687e      	ldr	r6, [r7, #4]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	3601      	adds	r6, #1
 8004b6e:	fbb3 f6f6 	udiv	r6, r3, r6
 8004b72:	f101 0414 	add.w	r4, r1, #20
 8004b76:	3d01      	subs	r5, #1
 8004b78:	3704      	adds	r7, #4
 8004b7a:	f100 0814 	add.w	r8, r0, #20
 8004b7e:	2e00      	cmp	r6, #0
 8004b80:	d03c      	beq.n	8004bfc <quorem+0xac>
 8004b82:	f04f 0e00 	mov.w	lr, #0
 8004b86:	4642      	mov	r2, r8
 8004b88:	4623      	mov	r3, r4
 8004b8a:	46f4      	mov	ip, lr
 8004b8c:	f853 bb04 	ldr.w	fp, [r3], #4
 8004b90:	6810      	ldr	r0, [r2, #0]
 8004b92:	fa1f fa8b 	uxth.w	sl, fp
 8004b96:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
 8004b9a:	fb06 ea0a 	mla	sl, r6, sl, lr
 8004b9e:	fb06 fe0b 	mul.w	lr, r6, fp
 8004ba2:	eb0e 4e1a 	add.w	lr, lr, sl, lsr #16
 8004ba6:	fa1c fc80 	uxtah	ip, ip, r0
 8004baa:	fa1f fb8e 	uxth.w	fp, lr
 8004bae:	fa1f fa8a 	uxth.w	sl, sl
 8004bb2:	ebca 0c0c 	rsb	ip, sl, ip
 8004bb6:	ebcb 4010 	rsb	r0, fp, r0, lsr #16
 8004bba:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8004bbe:	fa1f fc8c 	uxth.w	ip, ip
 8004bc2:	ea4c 4c00 	orr.w	ip, ip, r0, lsl #16
 8004bc6:	429f      	cmp	r7, r3
 8004bc8:	f842 cb04 	str.w	ip, [r2], #4
 8004bcc:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8004bd0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004bd4:	d2da      	bcs.n	8004b8c <quorem+0x3c>
 8004bd6:	1d2a      	adds	r2, r5, #4
 8004bd8:	eb09 0382 	add.w	r3, r9, r2, lsl #2
 8004bdc:	6858      	ldr	r0, [r3, #4]
 8004bde:	b968      	cbnz	r0, 8004bfc <quorem+0xac>
 8004be0:	4598      	cmp	r8, r3
 8004be2:	d209      	bcs.n	8004bf8 <quorem+0xa8>
 8004be4:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 8004be8:	b112      	cbz	r2, 8004bf0 <quorem+0xa0>
 8004bea:	e005      	b.n	8004bf8 <quorem+0xa8>
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	b91a      	cbnz	r2, 8004bf8 <quorem+0xa8>
 8004bf0:	3b04      	subs	r3, #4
 8004bf2:	3d01      	subs	r5, #1
 8004bf4:	4598      	cmp	r8, r3
 8004bf6:	d3f9      	bcc.n	8004bec <quorem+0x9c>
 8004bf8:	f8c9 5010 	str.w	r5, [r9, #16]
 8004bfc:	4648      	mov	r0, r9
 8004bfe:	f001 fe4f 	bl	80068a0 <__mcmp>
 8004c02:	2800      	cmp	r0, #0
 8004c04:	db2d      	blt.n	8004c62 <quorem+0x112>
 8004c06:	3601      	adds	r6, #1
 8004c08:	4643      	mov	r3, r8
 8004c0a:	f04f 0c00 	mov.w	ip, #0
 8004c0e:	f854 2b04 	ldr.w	r2, [r4], #4
 8004c12:	6818      	ldr	r0, [r3, #0]
 8004c14:	b291      	uxth	r1, r2
 8004c16:	fa1f fa80 	uxth.w	sl, r0
 8004c1a:	0c12      	lsrs	r2, r2, #16
 8004c1c:	ebc1 010a 	rsb	r1, r1, sl
 8004c20:	4461      	add	r1, ip
 8004c22:	ebc2 4210 	rsb	r2, r2, r0, lsr #16
 8004c26:	eb02 4221 	add.w	r2, r2, r1, asr #16
 8004c2a:	b289      	uxth	r1, r1
 8004c2c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004c30:	42a7      	cmp	r7, r4
 8004c32:	f843 1b04 	str.w	r1, [r3], #4
 8004c36:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004c3a:	d2e8      	bcs.n	8004c0e <quorem+0xbe>
 8004c3c:	1d2a      	adds	r2, r5, #4
 8004c3e:	eb09 0382 	add.w	r3, r9, r2, lsl #2
 8004c42:	6859      	ldr	r1, [r3, #4]
 8004c44:	b969      	cbnz	r1, 8004c62 <quorem+0x112>
 8004c46:	4598      	cmp	r8, r3
 8004c48:	d209      	bcs.n	8004c5e <quorem+0x10e>
 8004c4a:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 8004c4e:	b112      	cbz	r2, 8004c56 <quorem+0x106>
 8004c50:	e005      	b.n	8004c5e <quorem+0x10e>
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	b91a      	cbnz	r2, 8004c5e <quorem+0x10e>
 8004c56:	3b04      	subs	r3, #4
 8004c58:	3d01      	subs	r5, #1
 8004c5a:	4598      	cmp	r8, r3
 8004c5c:	d3f9      	bcc.n	8004c52 <quorem+0x102>
 8004c5e:	f8c9 5010 	str.w	r5, [r9, #16]
 8004c62:	4630      	mov	r0, r6
 8004c64:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c68:	2000      	movs	r0, #0
 8004c6a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c6e:	bf00      	nop

08004c70 <_dtoa_r>:
 8004c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c74:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004c76:	b09d      	sub	sp, #116	; 0x74
 8004c78:	4607      	mov	r7, r0
 8004c7a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8004c7c:	4692      	mov	sl, r2
 8004c7e:	469b      	mov	fp, r3
 8004c80:	b141      	cbz	r1, 8004c94 <_dtoa_r+0x24>
 8004c82:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004c84:	2201      	movs	r2, #1
 8004c86:	409a      	lsls	r2, r3
 8004c88:	604b      	str	r3, [r1, #4]
 8004c8a:	608a      	str	r2, [r1, #8]
 8004c8c:	f001 fbd4 	bl	8006438 <_Bfree>
 8004c90:	2300      	movs	r3, #0
 8004c92:	643b      	str	r3, [r7, #64]	; 0x40
 8004c94:	f1bb 0500 	subs.w	r5, fp, #0
 8004c98:	f2c0 80df 	blt.w	8004e5a <_dtoa_r+0x1ea>
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	6023      	str	r3, [r4, #0]
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 8004ca8:	f6c7 72f0 	movt	r2, #32752	; 0x7ff0
 8004cac:	402b      	ands	r3, r5
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	f000 80be 	beq.w	8004e30 <_dtoa_r+0x1c0>
 8004cb4:	4650      	mov	r0, sl
 8004cb6:	4659      	mov	r1, fp
 8004cb8:	2200      	movs	r2, #0
 8004cba:	2300      	movs	r3, #0
 8004cbc:	46d0      	mov	r8, sl
 8004cbe:	46d9      	mov	r9, fp
 8004cc0:	2401      	movs	r4, #1
 8004cc2:	f003 fd0d 	bl	80086e0 <__aeabi_dcmpeq>
 8004cc6:	b978      	cbnz	r0, 8004ce8 <_dtoa_r+0x78>
 8004cc8:	f014 0fff 	tst.w	r4, #255	; 0xff
 8004ccc:	d110      	bne.n	8004cf0 <_dtoa_r+0x80>
 8004cce:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8004cd0:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	602b      	str	r3, [r5, #0]
 8004cd6:	4d78      	ldr	r5, [pc, #480]	; (8004eb8 <_dtoa_r+0x248>)
 8004cd8:	b114      	cbz	r4, 8004ce0 <_dtoa_r+0x70>
 8004cda:	4d78      	ldr	r5, [pc, #480]	; (8004ebc <_dtoa_r+0x24c>)
 8004cdc:	6025      	str	r5, [r4, #0]
 8004cde:	3d01      	subs	r5, #1
 8004ce0:	4628      	mov	r0, r5
 8004ce2:	b01d      	add	sp, #116	; 0x74
 8004ce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ce8:	2400      	movs	r4, #0
 8004cea:	f014 0fff 	tst.w	r4, #255	; 0xff
 8004cee:	d0ee      	beq.n	8004cce <_dtoa_r+0x5e>
 8004cf0:	a91b      	add	r1, sp, #108	; 0x6c
 8004cf2:	9100      	str	r1, [sp, #0]
 8004cf4:	4638      	mov	r0, r7
 8004cf6:	a91a      	add	r1, sp, #104	; 0x68
 8004cf8:	4642      	mov	r2, r8
 8004cfa:	464b      	mov	r3, r9
 8004cfc:	9101      	str	r1, [sp, #4]
 8004cfe:	f001 fed1 	bl	8006aa4 <__d2b>
 8004d02:	f3c5 540a 	ubfx	r4, r5, #20, #11
 8004d06:	900a      	str	r0, [sp, #40]	; 0x28
 8004d08:	2c00      	cmp	r4, #0
 8004d0a:	f040 80b5 	bne.w	8004e78 <_dtoa_r+0x208>
 8004d0e:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8004d10:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8004d12:	f46f 6382 	mvn.w	r3, #1040	; 0x410
 8004d16:	1934      	adds	r4, r6, r4
 8004d18:	429c      	cmp	r4, r3
 8004d1a:	f2c0 8281 	blt.w	8005220 <_dtoa_r+0x5b0>
 8004d1e:	f64f 430e 	movw	r3, #64526	; 0xfc0e
 8004d22:	f6cf 73ff 	movt	r3, #65535	; 0xffff
 8004d26:	1b1b      	subs	r3, r3, r4
 8004d28:	f204 4212 	addw	r2, r4, #1042	; 0x412
 8004d2c:	fa15 f303 	lsls.w	r3, r5, r3
 8004d30:	fa2a f002 	lsr.w	r0, sl, r2
 8004d34:	4318      	orrs	r0, r3
 8004d36:	f003 f9f5 	bl	8008124 <__aeabi_ui2d>
 8004d3a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004d3e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004d40:	2501      	movs	r5, #1
 8004d42:	f1a0 70f8 	sub.w	r0, r0, #32505856	; 0x1f00000
 8004d46:	900d      	str	r0, [sp, #52]	; 0x34
 8004d48:	3c01      	subs	r4, #1
 8004d4a:	9516      	str	r5, [sp, #88]	; 0x58
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f6c3 73f8 	movt	r3, #16376	; 0x3ff8
 8004d54:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004d58:	f003 f8a6 	bl	8007ea8 <__aeabi_dsub>
 8004d5c:	a350      	add	r3, pc, #320	; (adr r3, 8004ea0 <_dtoa_r+0x230>)
 8004d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d62:	f003 fa55 	bl	8008210 <__aeabi_dmul>
 8004d66:	a350      	add	r3, pc, #320	; (adr r3, 8004ea8 <_dtoa_r+0x238>)
 8004d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d6c:	f003 f89e 	bl	8007eac <__adddf3>
 8004d70:	4680      	mov	r8, r0
 8004d72:	4620      	mov	r0, r4
 8004d74:	4689      	mov	r9, r1
 8004d76:	f003 f9e5 	bl	8008144 <__aeabi_i2d>
 8004d7a:	a34d      	add	r3, pc, #308	; (adr r3, 8004eb0 <_dtoa_r+0x240>)
 8004d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d80:	f003 fa46 	bl	8008210 <__aeabi_dmul>
 8004d84:	4602      	mov	r2, r0
 8004d86:	460b      	mov	r3, r1
 8004d88:	4640      	mov	r0, r8
 8004d8a:	4649      	mov	r1, r9
 8004d8c:	f003 f88e 	bl	8007eac <__adddf3>
 8004d90:	4680      	mov	r8, r0
 8004d92:	4689      	mov	r9, r1
 8004d94:	f003 fcd6 	bl	8008744 <__aeabi_d2iz>
 8004d98:	4649      	mov	r1, r9
 8004d9a:	9005      	str	r0, [sp, #20]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	4640      	mov	r0, r8
 8004da0:	2300      	movs	r3, #0
 8004da2:	f003 fca7 	bl	80086f4 <__aeabi_dcmplt>
 8004da6:	b150      	cbz	r0, 8004dbe <_dtoa_r+0x14e>
 8004da8:	9805      	ldr	r0, [sp, #20]
 8004daa:	f003 f9cb 	bl	8008144 <__aeabi_i2d>
 8004dae:	4642      	mov	r2, r8
 8004db0:	464b      	mov	r3, r9
 8004db2:	f003 fc95 	bl	80086e0 <__aeabi_dcmpeq>
 8004db6:	b910      	cbnz	r0, 8004dbe <_dtoa_r+0x14e>
 8004db8:	9d05      	ldr	r5, [sp, #20]
 8004dba:	3d01      	subs	r5, #1
 8004dbc:	9505      	str	r5, [sp, #20]
 8004dbe:	9d05      	ldr	r5, [sp, #20]
 8004dc0:	2d16      	cmp	r5, #22
 8004dc2:	f200 815e 	bhi.w	8005082 <_dtoa_r+0x412>
 8004dc6:	4b3e      	ldr	r3, [pc, #248]	; (8004ec0 <_dtoa_r+0x250>)
 8004dc8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8004dcc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004dd0:	4652      	mov	r2, sl
 8004dd2:	465b      	mov	r3, fp
 8004dd4:	f003 fcac 	bl	8008730 <__aeabi_dcmpgt>
 8004dd8:	2800      	cmp	r0, #0
 8004dda:	f000 8229 	beq.w	8005230 <_dtoa_r+0x5c0>
 8004dde:	9d05      	ldr	r5, [sp, #20]
 8004de0:	3d01      	subs	r5, #1
 8004de2:	9505      	str	r5, [sp, #20]
 8004de4:	2500      	movs	r5, #0
 8004de6:	9514      	str	r5, [sp, #80]	; 0x50
 8004de8:	1b34      	subs	r4, r6, r4
 8004dea:	3c01      	subs	r4, #1
 8004dec:	f100 8213 	bmi.w	8005216 <_dtoa_r+0x5a6>
 8004df0:	2500      	movs	r5, #0
 8004df2:	940b      	str	r4, [sp, #44]	; 0x2c
 8004df4:	950f      	str	r5, [sp, #60]	; 0x3c
 8004df6:	9c05      	ldr	r4, [sp, #20]
 8004df8:	2c00      	cmp	r4, #0
 8004dfa:	f2c0 8203 	blt.w	8005204 <_dtoa_r+0x594>
 8004dfe:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8004e00:	9413      	str	r4, [sp, #76]	; 0x4c
 8004e02:	192d      	adds	r5, r5, r4
 8004e04:	2400      	movs	r4, #0
 8004e06:	950b      	str	r5, [sp, #44]	; 0x2c
 8004e08:	9410      	str	r4, [sp, #64]	; 0x40
 8004e0a:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8004e0c:	2d09      	cmp	r5, #9
 8004e0e:	d85d      	bhi.n	8004ecc <_dtoa_r+0x25c>
 8004e10:	2401      	movs	r4, #1
 8004e12:	2d05      	cmp	r5, #5
 8004e14:	dd02      	ble.n	8004e1c <_dtoa_r+0x1ac>
 8004e16:	3d04      	subs	r5, #4
 8004e18:	9526      	str	r5, [sp, #152]	; 0x98
 8004e1a:	2400      	movs	r4, #0
 8004e1c:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8004e1e:	1eab      	subs	r3, r5, #2
 8004e20:	2b03      	cmp	r3, #3
 8004e22:	d855      	bhi.n	8004ed0 <_dtoa_r+0x260>
 8004e24:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004e28:	036d0382 	.word	0x036d0382
 8004e2c:	03850246 	.word	0x03850246
 8004e30:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 8004e32:	f242 730f 	movw	r3, #9999	; 0x270f
 8004e36:	6023      	str	r3, [r4, #0]
 8004e38:	f1ba 0f00 	cmp.w	sl, #0
 8004e3c:	d013      	beq.n	8004e66 <_dtoa_r+0x1f6>
 8004e3e:	4d21      	ldr	r5, [pc, #132]	; (8004ec4 <_dtoa_r+0x254>)
 8004e40:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8004e42:	2c00      	cmp	r4, #0
 8004e44:	f43f af4c 	beq.w	8004ce0 <_dtoa_r+0x70>
 8004e48:	78eb      	ldrb	r3, [r5, #3]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	f000 8117 	beq.w	800507e <_dtoa_r+0x40e>
 8004e50:	f105 0308 	add.w	r3, r5, #8
 8004e54:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8004e56:	6023      	str	r3, [r4, #0]
 8004e58:	e742      	b.n	8004ce0 <_dtoa_r+0x70>
 8004e5a:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
 8004e5e:	2301      	movs	r3, #1
 8004e60:	6023      	str	r3, [r4, #0]
 8004e62:	46ab      	mov	fp, r5
 8004e64:	e71c      	b.n	8004ca0 <_dtoa_r+0x30>
 8004e66:	4b17      	ldr	r3, [pc, #92]	; (8004ec4 <_dtoa_r+0x254>)
 8004e68:	4a17      	ldr	r2, [pc, #92]	; (8004ec8 <_dtoa_r+0x258>)
 8004e6a:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8004e6e:	2d00      	cmp	r5, #0
 8004e70:	bf0c      	ite	eq
 8004e72:	4615      	moveq	r5, r2
 8004e74:	461d      	movne	r5, r3
 8004e76:	e7e3      	b.n	8004e40 <_dtoa_r+0x1d0>
 8004e78:	4649      	mov	r1, r9
 8004e7a:	4640      	mov	r0, r8
 8004e7c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004e80:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004e82:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8004e84:	f021 437f 	bic.w	r3, r1, #4278190080	; 0xff000000
 8004e88:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004e8c:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8004e90:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004e94:	2500      	movs	r5, #0
 8004e96:	930d      	str	r3, [sp, #52]	; 0x34
 8004e98:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004e9c:	9516      	str	r5, [sp, #88]	; 0x58
 8004e9e:	e755      	b.n	8004d4c <_dtoa_r+0xdc>
 8004ea0:	636f4361 	.word	0x636f4361
 8004ea4:	3fd287a7 	.word	0x3fd287a7
 8004ea8:	8b60c8b3 	.word	0x8b60c8b3
 8004eac:	3fc68a28 	.word	0x3fc68a28
 8004eb0:	509f79fb 	.word	0x509f79fb
 8004eb4:	3fd34413 	.word	0x3fd34413
 8004eb8:	08008ae8 	.word	0x08008ae8
 8004ebc:	08008ae9 	.word	0x08008ae9
 8004ec0:	08008900 	.word	0x08008900
 8004ec4:	08008af8 	.word	0x08008af8
 8004ec8:	08008aec 	.word	0x08008aec
 8004ecc:	2400      	movs	r4, #0
 8004ece:	9426      	str	r4, [sp, #152]	; 0x98
 8004ed0:	2400      	movs	r4, #0
 8004ed2:	647c      	str	r4, [r7, #68]	; 0x44
 8004ed4:	4638      	mov	r0, r7
 8004ed6:	4621      	mov	r1, r4
 8004ed8:	f001 fa88 	bl	80063ec <_Balloc>
 8004edc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004ee0:	950e      	str	r5, [sp, #56]	; 0x38
 8004ee2:	2501      	movs	r5, #1
 8004ee4:	9512      	str	r5, [sp, #72]	; 0x48
 8004ee6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004eea:	9009      	str	r0, [sp, #36]	; 0x24
 8004eec:	6438      	str	r0, [r7, #64]	; 0x40
 8004eee:	9515      	str	r5, [sp, #84]	; 0x54
 8004ef0:	9427      	str	r4, [sp, #156]	; 0x9c
 8004ef2:	9c05      	ldr	r4, [sp, #20]
 8004ef4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004ef6:	2c0e      	cmp	r4, #14
 8004ef8:	bfcc      	ite	gt
 8004efa:	2500      	movgt	r5, #0
 8004efc:	2501      	movle	r5, #1
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	bfb8      	it	lt
 8004f02:	2500      	movlt	r5, #0
 8004f04:	2d00      	cmp	r5, #0
 8004f06:	f000 80c1 	beq.w	800508c <_dtoa_r+0x41c>
 8004f0a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8004f0c:	4b5e      	ldr	r3, [pc, #376]	; (8005088 <_dtoa_r+0x418>)
 8004f0e:	0fe5      	lsrs	r5, r4, #31
 8004f10:	9c05      	ldr	r4, [sp, #20]
 8004f12:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004f16:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004f1a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8004f1c:	2c00      	cmp	r4, #0
 8004f1e:	bfcc      	ite	gt
 8004f20:	2500      	movgt	r5, #0
 8004f22:	f005 0501 	andle.w	r5, r5, #1
 8004f26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f2a:	2d00      	cmp	r5, #0
 8004f2c:	f040 81a8 	bne.w	8005280 <_dtoa_r+0x610>
 8004f30:	4602      	mov	r2, r0
 8004f32:	460b      	mov	r3, r1
 8004f34:	4650      	mov	r0, sl
 8004f36:	4659      	mov	r1, fp
 8004f38:	f003 fa94 	bl	8008464 <__aeabi_ddiv>
 8004f3c:	f003 fc02 	bl	8008744 <__aeabi_d2iz>
 8004f40:	4606      	mov	r6, r0
 8004f42:	f003 f8ff 	bl	8008144 <__aeabi_i2d>
 8004f46:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004f4a:	f003 f961 	bl	8008210 <__aeabi_dmul>
 8004f4e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8004f50:	460b      	mov	r3, r1
 8004f52:	4602      	mov	r2, r0
 8004f54:	4659      	mov	r1, fp
 8004f56:	4650      	mov	r0, sl
 8004f58:	f002 ffa6 	bl	8007ea8 <__aeabi_dsub>
 8004f5c:	f106 0330 	add.w	r3, r6, #48	; 0x30
 8004f60:	f804 3b01 	strb.w	r3, [r4], #1
 8004f64:	9411      	str	r4, [sp, #68]	; 0x44
 8004f66:	46a0      	mov	r8, r4
 8004f68:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8004f6a:	2c01      	cmp	r4, #1
 8004f6c:	4682      	mov	sl, r0
 8004f6e:	468b      	mov	fp, r1
 8004f70:	d04c      	beq.n	800500c <_dtoa_r+0x39c>
 8004f72:	2300      	movs	r3, #0
 8004f74:	2200      	movs	r2, #0
 8004f76:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8004f7a:	f003 f949 	bl	8008210 <__aeabi_dmul>
 8004f7e:	2200      	movs	r2, #0
 8004f80:	2300      	movs	r3, #0
 8004f82:	4682      	mov	sl, r0
 8004f84:	468b      	mov	fp, r1
 8004f86:	2401      	movs	r4, #1
 8004f88:	f003 fbaa 	bl	80086e0 <__aeabi_dcmpeq>
 8004f8c:	b100      	cbz	r0, 8004f90 <_dtoa_r+0x320>
 8004f8e:	462c      	mov	r4, r5
 8004f90:	f014 0fff 	tst.w	r4, #255	; 0xff
 8004f94:	f000 8575 	beq.w	8005a82 <_dtoa_r+0xe12>
 8004f98:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8004f9a:	980e      	ldr	r0, [sp, #56]	; 0x38
 8004f9c:	1ca5      	adds	r5, r4, #2
 8004f9e:	eb04 0900 	add.w	r9, r4, r0
 8004fa2:	e00d      	b.n	8004fc0 <_dtoa_r+0x350>
 8004fa4:	f003 f934 	bl	8008210 <__aeabi_dmul>
 8004fa8:	2200      	movs	r2, #0
 8004faa:	2300      	movs	r3, #0
 8004fac:	4682      	mov	sl, r0
 8004fae:	468b      	mov	fp, r1
 8004fb0:	f003 fb96 	bl	80086e0 <__aeabi_dcmpeq>
 8004fb4:	b100      	cbz	r0, 8004fb8 <_dtoa_r+0x348>
 8004fb6:	2400      	movs	r4, #0
 8004fb8:	f014 0fff 	tst.w	r4, #255	; 0xff
 8004fbc:	f000 8423 	beq.w	8005806 <_dtoa_r+0xb96>
 8004fc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004fc4:	4650      	mov	r0, sl
 8004fc6:	4659      	mov	r1, fp
 8004fc8:	f003 fa4c 	bl	8008464 <__aeabi_ddiv>
 8004fcc:	f003 fbba 	bl	8008744 <__aeabi_d2iz>
 8004fd0:	4606      	mov	r6, r0
 8004fd2:	f003 f8b7 	bl	8008144 <__aeabi_i2d>
 8004fd6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004fda:	f003 f919 	bl	8008210 <__aeabi_dmul>
 8004fde:	4602      	mov	r2, r0
 8004fe0:	460b      	mov	r3, r1
 8004fe2:	4650      	mov	r0, sl
 8004fe4:	4659      	mov	r1, fp
 8004fe6:	f002 ff5f 	bl	8007ea8 <__aeabi_dsub>
 8004fea:	f106 0430 	add.w	r4, r6, #48	; 0x30
 8004fee:	2300      	movs	r3, #0
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	454d      	cmp	r5, r9
 8004ff4:	f805 4c01 	strb.w	r4, [r5, #-1]
 8004ff8:	46a8      	mov	r8, r5
 8004ffa:	4682      	mov	sl, r0
 8004ffc:	468b      	mov	fp, r1
 8004ffe:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8005002:	f04f 0401 	mov.w	r4, #1
 8005006:	f105 0501 	add.w	r5, r5, #1
 800500a:	d1cb      	bne.n	8004fa4 <_dtoa_r+0x334>
 800500c:	4652      	mov	r2, sl
 800500e:	465b      	mov	r3, fp
 8005010:	4650      	mov	r0, sl
 8005012:	4659      	mov	r1, fp
 8005014:	f002 ff4a 	bl	8007eac <__adddf3>
 8005018:	4604      	mov	r4, r0
 800501a:	460d      	mov	r5, r1
 800501c:	4622      	mov	r2, r4
 800501e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005022:	462b      	mov	r3, r5
 8005024:	f003 fb66 	bl	80086f4 <__aeabi_dcmplt>
 8005028:	b958      	cbnz	r0, 8005042 <_dtoa_r+0x3d2>
 800502a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800502e:	4622      	mov	r2, r4
 8005030:	462b      	mov	r3, r5
 8005032:	f003 fb55 	bl	80086e0 <__aeabi_dcmpeq>
 8005036:	2800      	cmp	r0, #0
 8005038:	f000 83e5 	beq.w	8005806 <_dtoa_r+0xb96>
 800503c:	07f3      	lsls	r3, r6, #31
 800503e:	f140 83e2 	bpl.w	8005806 <_dtoa_r+0xb96>
 8005042:	9c05      	ldr	r4, [sp, #20]
 8005044:	f818 6c01 	ldrb.w	r6, [r8, #-1]
 8005048:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800504a:	9417      	str	r4, [sp, #92]	; 0x5c
 800504c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800504e:	e003      	b.n	8005058 <_dtoa_r+0x3e8>
 8005050:	f818 6c02 	ldrb.w	r6, [r8, #-2]
 8005054:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8005058:	2e39      	cmp	r6, #57	; 0x39
 800505a:	4643      	mov	r3, r8
 800505c:	f040 8489 	bne.w	8005972 <_dtoa_r+0xd02>
 8005060:	4590      	cmp	r8, r2
 8005062:	d1f5      	bne.n	8005050 <_dtoa_r+0x3e0>
 8005064:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8005066:	9309      	str	r3, [sp, #36]	; 0x24
 8005068:	3401      	adds	r4, #1
 800506a:	9405      	str	r4, [sp, #20]
 800506c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800506e:	2330      	movs	r3, #48	; 0x30
 8005070:	f804 3c01 	strb.w	r3, [r4, #-1]
 8005074:	2231      	movs	r2, #49	; 0x31
 8005076:	4623      	mov	r3, r4
 8005078:	f803 2c01 	strb.w	r2, [r3, #-1]
 800507c:	e0b0      	b.n	80051e0 <_dtoa_r+0x570>
 800507e:	1ceb      	adds	r3, r5, #3
 8005080:	e6e8      	b.n	8004e54 <_dtoa_r+0x1e4>
 8005082:	2501      	movs	r5, #1
 8005084:	9514      	str	r5, [sp, #80]	; 0x50
 8005086:	e6af      	b.n	8004de8 <_dtoa_r+0x178>
 8005088:	08008900 	.word	0x08008900
 800508c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800508e:	2c00      	cmp	r4, #0
 8005090:	f040 80d1 	bne.w	8005236 <_dtoa_r+0x5c6>
 8005094:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005096:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005098:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800509a:	9306      	str	r3, [sp, #24]
 800509c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800509e:	2800      	cmp	r0, #0
 80050a0:	bfc8      	it	gt
 80050a2:	2c00      	cmpgt	r4, #0
 80050a4:	dd09      	ble.n	80050ba <_dtoa_r+0x44a>
 80050a6:	4603      	mov	r3, r0
 80050a8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80050aa:	42a3      	cmp	r3, r4
 80050ac:	bfa8      	it	ge
 80050ae:	4623      	movge	r3, r4
 80050b0:	1ac9      	subs	r1, r1, r3
 80050b2:	1ac0      	subs	r0, r0, r3
 80050b4:	910f      	str	r1, [sp, #60]	; 0x3c
 80050b6:	1ae4      	subs	r4, r4, r3
 80050b8:	900b      	str	r0, [sp, #44]	; 0x2c
 80050ba:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80050bc:	2a00      	cmp	r2, #0
 80050be:	dd1a      	ble.n	80050f6 <_dtoa_r+0x486>
 80050c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	f000 841d 	beq.w	8005902 <_dtoa_r+0xc92>
 80050c8:	2d00      	cmp	r5, #0
 80050ca:	dd10      	ble.n	80050ee <_dtoa_r+0x47e>
 80050cc:	9906      	ldr	r1, [sp, #24]
 80050ce:	462a      	mov	r2, r5
 80050d0:	4638      	mov	r0, r7
 80050d2:	f001 fb39 	bl	8006748 <__pow5mult>
 80050d6:	9006      	str	r0, [sp, #24]
 80050d8:	9906      	ldr	r1, [sp, #24]
 80050da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80050dc:	4638      	mov	r0, r7
 80050de:	f001 fa9b 	bl	8006618 <__multiply>
 80050e2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80050e4:	4606      	mov	r6, r0
 80050e6:	4638      	mov	r0, r7
 80050e8:	f001 f9a6 	bl	8006438 <_Bfree>
 80050ec:	960a      	str	r6, [sp, #40]	; 0x28
 80050ee:	9810      	ldr	r0, [sp, #64]	; 0x40
 80050f0:	1b42      	subs	r2, r0, r5
 80050f2:	f040 8429 	bne.w	8005948 <_dtoa_r+0xcd8>
 80050f6:	2101      	movs	r1, #1
 80050f8:	4638      	mov	r0, r7
 80050fa:	f001 fa83 	bl	8006604 <__i2b>
 80050fe:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8005100:	2d00      	cmp	r5, #0
 8005102:	4606      	mov	r6, r0
 8005104:	dd05      	ble.n	8005112 <_dtoa_r+0x4a2>
 8005106:	4631      	mov	r1, r6
 8005108:	4638      	mov	r0, r7
 800510a:	462a      	mov	r2, r5
 800510c:	f001 fb1c 	bl	8006748 <__pow5mult>
 8005110:	4606      	mov	r6, r0
 8005112:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8005114:	2d01      	cmp	r5, #1
 8005116:	f340 820f 	ble.w	8005538 <_dtoa_r+0x8c8>
 800511a:	2500      	movs	r5, #0
 800511c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800511e:	2301      	movs	r3, #1
 8005120:	2800      	cmp	r0, #0
 8005122:	f040 838c 	bne.w	800583e <_dtoa_r+0xbce>
 8005126:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005128:	185b      	adds	r3, r3, r1
 800512a:	f013 031f 	ands.w	r3, r3, #31
 800512e:	f000 82cb 	beq.w	80056c8 <_dtoa_r+0xa58>
 8005132:	f1c3 0220 	rsb	r2, r3, #32
 8005136:	2a04      	cmp	r2, #4
 8005138:	f340 84bf 	ble.w	8005aba <_dtoa_r+0xe4a>
 800513c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800513e:	f1c3 031c 	rsb	r3, r3, #28
 8005142:	18d2      	adds	r2, r2, r3
 8005144:	18c9      	adds	r1, r1, r3
 8005146:	920f      	str	r2, [sp, #60]	; 0x3c
 8005148:	18e4      	adds	r4, r4, r3
 800514a:	910b      	str	r1, [sp, #44]	; 0x2c
 800514c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800514e:	2a00      	cmp	r2, #0
 8005150:	dd04      	ble.n	800515c <_dtoa_r+0x4ec>
 8005152:	4638      	mov	r0, r7
 8005154:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005156:	f001 fb43 	bl	80067e0 <__lshift>
 800515a:	900a      	str	r0, [sp, #40]	; 0x28
 800515c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800515e:	2b00      	cmp	r3, #0
 8005160:	dd05      	ble.n	800516e <_dtoa_r+0x4fe>
 8005162:	4631      	mov	r1, r6
 8005164:	4638      	mov	r0, r7
 8005166:	461a      	mov	r2, r3
 8005168:	f001 fb3a 	bl	80067e0 <__lshift>
 800516c:	4606      	mov	r6, r0
 800516e:	9814      	ldr	r0, [sp, #80]	; 0x50
 8005170:	2800      	cmp	r0, #0
 8005172:	f040 834c 	bne.w	800580e <_dtoa_r+0xb9e>
 8005176:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005178:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800517a:	2900      	cmp	r1, #0
 800517c:	bfcc      	ite	gt
 800517e:	2300      	movgt	r3, #0
 8005180:	2301      	movle	r3, #1
 8005182:	2a02      	cmp	r2, #2
 8005184:	bfd8      	it	le
 8005186:	2300      	movle	r3, #0
 8005188:	2b00      	cmp	r3, #0
 800518a:	f000 8226 	beq.w	80055da <_dtoa_r+0x96a>
 800518e:	2900      	cmp	r1, #0
 8005190:	f040 808a 	bne.w	80052a8 <_dtoa_r+0x638>
 8005194:	4631      	mov	r1, r6
 8005196:	2205      	movs	r2, #5
 8005198:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800519a:	4638      	mov	r0, r7
 800519c:	f001 f956 	bl	800644c <__multadd>
 80051a0:	4606      	mov	r6, r0
 80051a2:	4631      	mov	r1, r6
 80051a4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80051a6:	f001 fb7b 	bl	80068a0 <__mcmp>
 80051aa:	2800      	cmp	r0, #0
 80051ac:	dd7c      	ble.n	80052a8 <_dtoa_r+0x638>
 80051ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051b0:	9c05      	ldr	r4, [sp, #20]
 80051b2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80051b4:	2231      	movs	r2, #49	; 0x31
 80051b6:	f803 2b01 	strb.w	r2, [r3], #1
 80051ba:	3401      	adds	r4, #1
 80051bc:	9405      	str	r4, [sp, #20]
 80051be:	9309      	str	r3, [sp, #36]	; 0x24
 80051c0:	2400      	movs	r4, #0
 80051c2:	4638      	mov	r0, r7
 80051c4:	4631      	mov	r1, r6
 80051c6:	f001 f937 	bl	8006438 <_Bfree>
 80051ca:	9806      	ldr	r0, [sp, #24]
 80051cc:	b140      	cbz	r0, 80051e0 <_dtoa_r+0x570>
 80051ce:	4284      	cmp	r4, r0
 80051d0:	bf18      	it	ne
 80051d2:	2c00      	cmpne	r4, #0
 80051d4:	f040 8273 	bne.w	80056be <_dtoa_r+0xa4e>
 80051d8:	4638      	mov	r0, r7
 80051da:	9906      	ldr	r1, [sp, #24]
 80051dc:	f001 f92c 	bl	8006438 <_Bfree>
 80051e0:	4638      	mov	r0, r7
 80051e2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80051e4:	f001 f928 	bl	8006438 <_Bfree>
 80051e8:	9c05      	ldr	r4, [sp, #20]
 80051ea:	1c63      	adds	r3, r4, #1
 80051ec:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80051ee:	2200      	movs	r2, #0
 80051f0:	7022      	strb	r2, [r4, #0]
 80051f2:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 80051f4:	6023      	str	r3, [r4, #0]
 80051f6:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 80051f8:	2c00      	cmp	r4, #0
 80051fa:	f43f ad71 	beq.w	8004ce0 <_dtoa_r+0x70>
 80051fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005200:	6020      	str	r0, [r4, #0]
 8005202:	e56d      	b.n	8004ce0 <_dtoa_r+0x70>
 8005204:	9c05      	ldr	r4, [sp, #20]
 8005206:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005208:	1b2d      	subs	r5, r5, r4
 800520a:	950f      	str	r5, [sp, #60]	; 0x3c
 800520c:	4265      	negs	r5, r4
 800520e:	2400      	movs	r4, #0
 8005210:	9510      	str	r5, [sp, #64]	; 0x40
 8005212:	9413      	str	r4, [sp, #76]	; 0x4c
 8005214:	e5f9      	b.n	8004e0a <_dtoa_r+0x19a>
 8005216:	4264      	negs	r4, r4
 8005218:	940f      	str	r4, [sp, #60]	; 0x3c
 800521a:	2400      	movs	r4, #0
 800521c:	940b      	str	r4, [sp, #44]	; 0x2c
 800521e:	e5ea      	b.n	8004df6 <_dtoa_r+0x186>
 8005220:	f64f 30ee 	movw	r0, #64494	; 0xfbee
 8005224:	f6cf 70ff 	movt	r0, #65535	; 0xffff
 8005228:	1b00      	subs	r0, r0, r4
 800522a:	fa0a f000 	lsl.w	r0, sl, r0
 800522e:	e582      	b.n	8004d36 <_dtoa_r+0xc6>
 8005230:	2500      	movs	r5, #0
 8005232:	9514      	str	r5, [sp, #80]	; 0x50
 8005234:	e5d8      	b.n	8004de8 <_dtoa_r+0x178>
 8005236:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8005238:	2c01      	cmp	r4, #1
 800523a:	f340 838f 	ble.w	800595c <_dtoa_r+0xcec>
 800523e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8005240:	1e62      	subs	r2, r4, #1
 8005242:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8005244:	4294      	cmp	r4, r2
 8005246:	bfbf      	itttt	lt
 8005248:	9c10      	ldrlt	r4, [sp, #64]	; 0x40
 800524a:	9210      	strlt	r2, [sp, #64]	; 0x40
 800524c:	ebc4 0302 	rsblt	r3, r4, r2
 8005250:	9c13      	ldrlt	r4, [sp, #76]	; 0x4c
 8005252:	bfb6      	itet	lt
 8005254:	18e4      	addlt	r4, r4, r3
 8005256:	ebc2 0504 	rsbge	r5, r2, r4
 800525a:	9413      	strlt	r4, [sp, #76]	; 0x4c
 800525c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800525e:	2c00      	cmp	r4, #0
 8005260:	f2c0 838f 	blt.w	8005982 <_dtoa_r+0xd12>
 8005264:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8005266:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005268:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800526a:	18d2      	adds	r2, r2, r3
 800526c:	920f      	str	r2, [sp, #60]	; 0x3c
 800526e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005270:	4638      	mov	r0, r7
 8005272:	18d2      	adds	r2, r2, r3
 8005274:	2101      	movs	r1, #1
 8005276:	920b      	str	r2, [sp, #44]	; 0x2c
 8005278:	f001 f9c4 	bl	8006604 <__i2b>
 800527c:	9006      	str	r0, [sp, #24]
 800527e:	e70d      	b.n	800509c <_dtoa_r+0x42c>
 8005280:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8005282:	2d00      	cmp	r5, #0
 8005284:	f040 8367 	bne.w	8005956 <_dtoa_r+0xce6>
 8005288:	2300      	movs	r3, #0
 800528a:	2200      	movs	r2, #0
 800528c:	f2c4 0314 	movt	r3, #16404	; 0x4014
 8005290:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005294:	f002 ffbc 	bl	8008210 <__aeabi_dmul>
 8005298:	4652      	mov	r2, sl
 800529a:	465b      	mov	r3, fp
 800529c:	f003 fa3e 	bl	800871c <__aeabi_dcmpge>
 80052a0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80052a2:	9606      	str	r6, [sp, #24]
 80052a4:	2800      	cmp	r0, #0
 80052a6:	d082      	beq.n	80051ae <_dtoa_r+0x53e>
 80052a8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 80052aa:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80052ac:	43e4      	mvns	r4, r4
 80052ae:	9405      	str	r4, [sp, #20]
 80052b0:	2400      	movs	r4, #0
 80052b2:	e786      	b.n	80051c2 <_dtoa_r+0x552>
 80052b4:	2501      	movs	r5, #1
 80052b6:	9512      	str	r5, [sp, #72]	; 0x48
 80052b8:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 80052ba:	2d00      	cmp	r5, #0
 80052bc:	f340 82d3 	ble.w	8005866 <_dtoa_r+0xbf6>
 80052c0:	46a9      	mov	r9, r5
 80052c2:	2d0e      	cmp	r5, #14
 80052c4:	bf8c      	ite	hi
 80052c6:	2400      	movhi	r4, #0
 80052c8:	f004 0401 	andls.w	r4, r4, #1
 80052cc:	9515      	str	r5, [sp, #84]	; 0x54
 80052ce:	950e      	str	r5, [sp, #56]	; 0x38
 80052d0:	2100      	movs	r1, #0
 80052d2:	f1b9 0f17 	cmp.w	r9, #23
 80052d6:	6479      	str	r1, [r7, #68]	; 0x44
 80052d8:	d909      	bls.n	80052ee <_dtoa_r+0x67e>
 80052da:	2201      	movs	r2, #1
 80052dc:	2304      	movs	r3, #4
 80052de:	005b      	lsls	r3, r3, #1
 80052e0:	f103 0014 	add.w	r0, r3, #20
 80052e4:	4611      	mov	r1, r2
 80052e6:	3201      	adds	r2, #1
 80052e8:	4548      	cmp	r0, r9
 80052ea:	d9f8      	bls.n	80052de <_dtoa_r+0x66e>
 80052ec:	6479      	str	r1, [r7, #68]	; 0x44
 80052ee:	4638      	mov	r0, r7
 80052f0:	f001 f87c 	bl	80063ec <_Balloc>
 80052f4:	9009      	str	r0, [sp, #36]	; 0x24
 80052f6:	6438      	str	r0, [r7, #64]	; 0x40
 80052f8:	2c00      	cmp	r4, #0
 80052fa:	f43f adfa 	beq.w	8004ef2 <_dtoa_r+0x282>
 80052fe:	9c05      	ldr	r4, [sp, #20]
 8005300:	4652      	mov	r2, sl
 8005302:	465b      	mov	r3, fp
 8005304:	2c00      	cmp	r4, #0
 8005306:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800530a:	f340 81f8 	ble.w	80056fe <_dtoa_r+0xa8e>
 800530e:	4b97      	ldr	r3, [pc, #604]	; (800556c <_dtoa_r+0x8fc>)
 8005310:	f004 020f 	and.w	r2, r4, #15
 8005314:	1124      	asrs	r4, r4, #4
 8005316:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800531a:	2602      	movs	r6, #2
 800531c:	06e2      	lsls	r2, r4, #27
 800531e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005322:	d50b      	bpl.n	800533c <_dtoa_r+0x6cc>
 8005324:	4b92      	ldr	r3, [pc, #584]	; (8005570 <_dtoa_r+0x900>)
 8005326:	4650      	mov	r0, sl
 8005328:	4659      	mov	r1, fp
 800532a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800532e:	f003 f899 	bl	8008464 <__aeabi_ddiv>
 8005332:	f004 040f 	and.w	r4, r4, #15
 8005336:	4682      	mov	sl, r0
 8005338:	468b      	mov	fp, r1
 800533a:	2603      	movs	r6, #3
 800533c:	b174      	cbz	r4, 800535c <_dtoa_r+0x6ec>
 800533e:	4d8c      	ldr	r5, [pc, #560]	; (8005570 <_dtoa_r+0x900>)
 8005340:	4640      	mov	r0, r8
 8005342:	4649      	mov	r1, r9
 8005344:	07e3      	lsls	r3, r4, #31
 8005346:	d504      	bpl.n	8005352 <_dtoa_r+0x6e2>
 8005348:	e9d5 2300 	ldrd	r2, r3, [r5]
 800534c:	f002 ff60 	bl	8008210 <__aeabi_dmul>
 8005350:	3601      	adds	r6, #1
 8005352:	3508      	adds	r5, #8
 8005354:	1064      	asrs	r4, r4, #1
 8005356:	d1f5      	bne.n	8005344 <_dtoa_r+0x6d4>
 8005358:	4680      	mov	r8, r0
 800535a:	4689      	mov	r9, r1
 800535c:	4650      	mov	r0, sl
 800535e:	4659      	mov	r1, fp
 8005360:	4642      	mov	r2, r8
 8005362:	464b      	mov	r3, r9
 8005364:	f003 f87e 	bl	8008464 <__aeabi_ddiv>
 8005368:	4682      	mov	sl, r0
 800536a:	468b      	mov	fp, r1
 800536c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 800536e:	2c00      	cmp	r4, #0
 8005370:	f000 8100 	beq.w	8005574 <_dtoa_r+0x904>
 8005374:	2300      	movs	r3, #0
 8005376:	4650      	mov	r0, sl
 8005378:	4659      	mov	r1, fp
 800537a:	2200      	movs	r2, #0
 800537c:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 8005380:	2401      	movs	r4, #1
 8005382:	f003 f9b7 	bl	80086f4 <__aeabi_dcmplt>
 8005386:	b900      	cbnz	r0, 800538a <_dtoa_r+0x71a>
 8005388:	2400      	movs	r4, #0
 800538a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800538c:	2d00      	cmp	r5, #0
 800538e:	bfd4      	ite	le
 8005390:	2400      	movle	r4, #0
 8005392:	f004 0401 	andgt.w	r4, r4, #1
 8005396:	2c00      	cmp	r4, #0
 8005398:	f000 80ec 	beq.w	8005574 <_dtoa_r+0x904>
 800539c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800539e:	2c00      	cmp	r4, #0
 80053a0:	f340 819b 	ble.w	80056da <_dtoa_r+0xa6a>
 80053a4:	2300      	movs	r3, #0
 80053a6:	2200      	movs	r2, #0
 80053a8:	f2c4 0324 	movt	r3, #16420	; 0x4024
 80053ac:	4650      	mov	r0, sl
 80053ae:	4659      	mov	r1, fp
 80053b0:	f002 ff2e 	bl	8008210 <__aeabi_dmul>
 80053b4:	4682      	mov	sl, r0
 80053b6:	1c70      	adds	r0, r6, #1
 80053b8:	468b      	mov	fp, r1
 80053ba:	f002 fec3 	bl	8008144 <__aeabi_i2d>
 80053be:	4602      	mov	r2, r0
 80053c0:	460b      	mov	r3, r1
 80053c2:	4650      	mov	r0, sl
 80053c4:	4659      	mov	r1, fp
 80053c6:	f002 ff23 	bl	8008210 <__aeabi_dmul>
 80053ca:	2300      	movs	r3, #0
 80053cc:	2200      	movs	r2, #0
 80053ce:	f2c4 031c 	movt	r3, #16412	; 0x401c
 80053d2:	f002 fd6b 	bl	8007eac <__adddf3>
 80053d6:	9d05      	ldr	r5, [sp, #20]
 80053d8:	3d01      	subs	r5, #1
 80053da:	9517      	str	r5, [sp, #92]	; 0x5c
 80053dc:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80053de:	4680      	mov	r8, r0
 80053e0:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 80053e4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80053e6:	2c00      	cmp	r4, #0
 80053e8:	f000 81b0 	beq.w	800574c <_dtoa_r+0xadc>
 80053ec:	4b5f      	ldr	r3, [pc, #380]	; (800556c <_dtoa_r+0x8fc>)
 80053ee:	2100      	movs	r1, #0
 80053f0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80053f4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80053f8:	2000      	movs	r0, #0
 80053fa:	f6c3 71e0 	movt	r1, #16352	; 0x3fe0
 80053fe:	f003 f831 	bl	8008464 <__aeabi_ddiv>
 8005402:	4642      	mov	r2, r8
 8005404:	464b      	mov	r3, r9
 8005406:	f002 fd4f 	bl	8007ea8 <__aeabi_dsub>
 800540a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800540e:	4659      	mov	r1, fp
 8005410:	4650      	mov	r0, sl
 8005412:	f003 f997 	bl	8008744 <__aeabi_d2iz>
 8005416:	4606      	mov	r6, r0
 8005418:	f002 fe94 	bl	8008144 <__aeabi_i2d>
 800541c:	4602      	mov	r2, r0
 800541e:	460b      	mov	r3, r1
 8005420:	4650      	mov	r0, sl
 8005422:	4659      	mov	r1, fp
 8005424:	f002 fd40 	bl	8007ea8 <__aeabi_dsub>
 8005428:	3630      	adds	r6, #48	; 0x30
 800542a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800542c:	b2f6      	uxtb	r6, r6
 800542e:	4682      	mov	sl, r0
 8005430:	468b      	mov	fp, r1
 8005432:	f804 6b01 	strb.w	r6, [r4], #1
 8005436:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800543a:	4652      	mov	r2, sl
 800543c:	465b      	mov	r3, fp
 800543e:	9411      	str	r4, [sp, #68]	; 0x44
 8005440:	46a0      	mov	r8, r4
 8005442:	f003 f975 	bl	8008730 <__aeabi_dcmpgt>
 8005446:	2800      	cmp	r0, #0
 8005448:	f040 8325 	bne.w	8005a96 <_dtoa_r+0xe26>
 800544c:	2100      	movs	r1, #0
 800544e:	4652      	mov	r2, sl
 8005450:	465b      	mov	r3, fp
 8005452:	2000      	movs	r0, #0
 8005454:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 8005458:	f002 fd26 	bl	8007ea8 <__aeabi_dsub>
 800545c:	4602      	mov	r2, r0
 800545e:	460b      	mov	r3, r1
 8005460:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005464:	f003 f964 	bl	8008730 <__aeabi_dcmpgt>
 8005468:	2800      	cmp	r0, #0
 800546a:	f040 827f 	bne.w	800596c <_dtoa_r+0xcfc>
 800546e:	2d01      	cmp	r5, #1
 8005470:	f340 8133 	ble.w	80056da <_dtoa_r+0xa6a>
 8005474:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005476:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8005478:	1945      	adds	r5, r0, r5
 800547a:	e00f      	b.n	800549c <_dtoa_r+0x82c>
 800547c:	2100      	movs	r1, #0
 800547e:	2000      	movs	r0, #0
 8005480:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 8005484:	f002 fd10 	bl	8007ea8 <__aeabi_dsub>
 8005488:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800548c:	f003 f932 	bl	80086f4 <__aeabi_dcmplt>
 8005490:	2800      	cmp	r0, #0
 8005492:	f040 826b 	bne.w	800596c <_dtoa_r+0xcfc>
 8005496:	42ac      	cmp	r4, r5
 8005498:	f000 811f 	beq.w	80056da <_dtoa_r+0xa6a>
 800549c:	2300      	movs	r3, #0
 800549e:	2200      	movs	r2, #0
 80054a0:	f2c4 0324 	movt	r3, #16420	; 0x4024
 80054a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80054a8:	f002 feb2 	bl	8008210 <__aeabi_dmul>
 80054ac:	2300      	movs	r3, #0
 80054ae:	2200      	movs	r2, #0
 80054b0:	f2c4 0324 	movt	r3, #16420	; 0x4024
 80054b4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80054b8:	4650      	mov	r0, sl
 80054ba:	4659      	mov	r1, fp
 80054bc:	f002 fea8 	bl	8008210 <__aeabi_dmul>
 80054c0:	4680      	mov	r8, r0
 80054c2:	4689      	mov	r9, r1
 80054c4:	f003 f93e 	bl	8008744 <__aeabi_d2iz>
 80054c8:	4606      	mov	r6, r0
 80054ca:	f002 fe3b 	bl	8008144 <__aeabi_i2d>
 80054ce:	4602      	mov	r2, r0
 80054d0:	460b      	mov	r3, r1
 80054d2:	4640      	mov	r0, r8
 80054d4:	4649      	mov	r1, r9
 80054d6:	f002 fce7 	bl	8007ea8 <__aeabi_dsub>
 80054da:	3630      	adds	r6, #48	; 0x30
 80054dc:	b2f6      	uxtb	r6, r6
 80054de:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80054e2:	f804 6b01 	strb.w	r6, [r4], #1
 80054e6:	4682      	mov	sl, r0
 80054e8:	468b      	mov	fp, r1
 80054ea:	f003 f903 	bl	80086f4 <__aeabi_dcmplt>
 80054ee:	46a0      	mov	r8, r4
 80054f0:	4652      	mov	r2, sl
 80054f2:	465b      	mov	r3, fp
 80054f4:	2800      	cmp	r0, #0
 80054f6:	d0c1      	beq.n	800547c <_dtoa_r+0x80c>
 80054f8:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80054fa:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80054fc:	9005      	str	r0, [sp, #20]
 80054fe:	9409      	str	r4, [sp, #36]	; 0x24
 8005500:	e66e      	b.n	80051e0 <_dtoa_r+0x570>
 8005502:	2500      	movs	r5, #0
 8005504:	9512      	str	r5, [sp, #72]	; 0x48
 8005506:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 8005508:	9805      	ldr	r0, [sp, #20]
 800550a:	182d      	adds	r5, r5, r0
 800550c:	f105 0901 	add.w	r9, r5, #1
 8005510:	f1b9 0f00 	cmp.w	r9, #0
 8005514:	9515      	str	r5, [sp, #84]	; 0x54
 8005516:	f340 819b 	ble.w	8005850 <_dtoa_r+0xbe0>
 800551a:	f1b9 0f0e 	cmp.w	r9, #14
 800551e:	bf8c      	ite	hi
 8005520:	2400      	movhi	r4, #0
 8005522:	f004 0401 	andls.w	r4, r4, #1
 8005526:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800552a:	e6d1      	b.n	80052d0 <_dtoa_r+0x660>
 800552c:	2500      	movs	r5, #0
 800552e:	9512      	str	r5, [sp, #72]	; 0x48
 8005530:	e6c2      	b.n	80052b8 <_dtoa_r+0x648>
 8005532:	2501      	movs	r5, #1
 8005534:	9512      	str	r5, [sp, #72]	; 0x48
 8005536:	e7e6      	b.n	8005506 <_dtoa_r+0x896>
 8005538:	f1ba 0f00 	cmp.w	sl, #0
 800553c:	f47f aded 	bne.w	800511a <_dtoa_r+0x4aa>
 8005540:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005544:	4655      	mov	r5, sl
 8005546:	2b00      	cmp	r3, #0
 8005548:	f47f ade8 	bne.w	800511c <_dtoa_r+0x4ac>
 800554c:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 8005550:	ea0b 0303 	and.w	r3, fp, r3
 8005554:	461d      	mov	r5, r3
 8005556:	2b00      	cmp	r3, #0
 8005558:	f43f ade0 	beq.w	800511c <_dtoa_r+0x4ac>
 800555c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800555e:	3501      	adds	r5, #1
 8005560:	950f      	str	r5, [sp, #60]	; 0x3c
 8005562:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8005564:	3501      	adds	r5, #1
 8005566:	950b      	str	r5, [sp, #44]	; 0x2c
 8005568:	2501      	movs	r5, #1
 800556a:	e5d7      	b.n	800511c <_dtoa_r+0x4ac>
 800556c:	08008900 	.word	0x08008900
 8005570:	080089f0 	.word	0x080089f0
 8005574:	4630      	mov	r0, r6
 8005576:	f002 fde5 	bl	8008144 <__aeabi_i2d>
 800557a:	4652      	mov	r2, sl
 800557c:	465b      	mov	r3, fp
 800557e:	f002 fe47 	bl	8008210 <__aeabi_dmul>
 8005582:	2300      	movs	r3, #0
 8005584:	2200      	movs	r2, #0
 8005586:	f2c4 031c 	movt	r3, #16412	; 0x401c
 800558a:	f002 fc8f 	bl	8007eac <__adddf3>
 800558e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8005590:	f1a1 7450 	sub.w	r4, r1, #54525952	; 0x3400000
 8005594:	4680      	mov	r8, r0
 8005596:	46a1      	mov	r9, r4
 8005598:	2d00      	cmp	r5, #0
 800559a:	f040 80ac 	bne.w	80056f6 <_dtoa_r+0xa86>
 800559e:	2300      	movs	r3, #0
 80055a0:	2200      	movs	r2, #0
 80055a2:	f2c4 0314 	movt	r3, #16404	; 0x4014
 80055a6:	4650      	mov	r0, sl
 80055a8:	4659      	mov	r1, fp
 80055aa:	f002 fc7d 	bl	8007ea8 <__aeabi_dsub>
 80055ae:	4642      	mov	r2, r8
 80055b0:	4623      	mov	r3, r4
 80055b2:	4682      	mov	sl, r0
 80055b4:	468b      	mov	fp, r1
 80055b6:	f003 f8bb 	bl	8008730 <__aeabi_dcmpgt>
 80055ba:	2800      	cmp	r0, #0
 80055bc:	f040 80c3 	bne.w	8005746 <_dtoa_r+0xad6>
 80055c0:	4642      	mov	r2, r8
 80055c2:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
 80055c6:	4650      	mov	r0, sl
 80055c8:	4659      	mov	r1, fp
 80055ca:	f003 f893 	bl	80086f4 <__aeabi_dcmplt>
 80055ce:	2800      	cmp	r0, #0
 80055d0:	f000 8083 	beq.w	80056da <_dtoa_r+0xa6a>
 80055d4:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80055d6:	9606      	str	r6, [sp, #24]
 80055d8:	e666      	b.n	80052a8 <_dtoa_r+0x638>
 80055da:	9812      	ldr	r0, [sp, #72]	; 0x48
 80055dc:	2800      	cmp	r0, #0
 80055de:	f000 8147 	beq.w	8005870 <_dtoa_r+0xc00>
 80055e2:	2c00      	cmp	r4, #0
 80055e4:	dd05      	ble.n	80055f2 <_dtoa_r+0x982>
 80055e6:	4638      	mov	r0, r7
 80055e8:	9906      	ldr	r1, [sp, #24]
 80055ea:	4622      	mov	r2, r4
 80055ec:	f001 f8f8 	bl	80067e0 <__lshift>
 80055f0:	9006      	str	r0, [sp, #24]
 80055f2:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80055f6:	2d00      	cmp	r5, #0
 80055f8:	f040 8201 	bne.w	80059fe <_dtoa_r+0xd8e>
 80055fc:	f00a 0001 	and.w	r0, sl, #1
 8005600:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005602:	9c06      	ldr	r4, [sp, #24]
 8005604:	900b      	str	r0, [sp, #44]	; 0x2c
 8005606:	4631      	mov	r1, r6
 8005608:	980a      	ldr	r0, [sp, #40]	; 0x28
 800560a:	f7ff faa1 	bl	8004b50 <quorem>
 800560e:	4621      	mov	r1, r4
 8005610:	9008      	str	r0, [sp, #32]
 8005612:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005614:	f001 f944 	bl	80068a0 <__mcmp>
 8005618:	4642      	mov	r2, r8
 800561a:	4681      	mov	r9, r0
 800561c:	4631      	mov	r1, r6
 800561e:	4638      	mov	r0, r7
 8005620:	f001 f95e 	bl	80068e0 <__mdiff>
 8005624:	9a08      	ldr	r2, [sp, #32]
 8005626:	68c3      	ldr	r3, [r0, #12]
 8005628:	3230      	adds	r2, #48	; 0x30
 800562a:	4682      	mov	sl, r0
 800562c:	9206      	str	r2, [sp, #24]
 800562e:	f04f 0b01 	mov.w	fp, #1
 8005632:	2b00      	cmp	r3, #0
 8005634:	d03d      	beq.n	80056b2 <_dtoa_r+0xa42>
 8005636:	4638      	mov	r0, r7
 8005638:	4651      	mov	r1, sl
 800563a:	f000 fefd 	bl	8006438 <_Bfree>
 800563e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005640:	ea5b 0303 	orrs.w	r3, fp, r3
 8005644:	d103      	bne.n	800564e <_dtoa_r+0x9de>
 8005646:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005648:	2800      	cmp	r0, #0
 800564a:	f000 8211 	beq.w	8005a70 <_dtoa_r+0xe00>
 800564e:	f1b9 0f00 	cmp.w	r9, #0
 8005652:	f2c0 819f 	blt.w	8005994 <_dtoa_r+0xd24>
 8005656:	9826      	ldr	r0, [sp, #152]	; 0x98
 8005658:	ea59 0000 	orrs.w	r0, r9, r0
 800565c:	d103      	bne.n	8005666 <_dtoa_r+0x9f6>
 800565e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005660:	2900      	cmp	r1, #0
 8005662:	f000 8197 	beq.w	8005994 <_dtoa_r+0xd24>
 8005666:	f1bb 0f00 	cmp.w	fp, #0
 800566a:	f300 81ea 	bgt.w	8005a42 <_dtoa_r+0xdd2>
 800566e:	9a06      	ldr	r2, [sp, #24]
 8005670:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005672:	f805 2b01 	strb.w	r2, [r5], #1
 8005676:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005678:	1a2b      	subs	r3, r5, r0
 800567a:	428b      	cmp	r3, r1
 800567c:	46aa      	mov	sl, r5
 800567e:	f000 81db 	beq.w	8005a38 <_dtoa_r+0xdc8>
 8005682:	220a      	movs	r2, #10
 8005684:	2300      	movs	r3, #0
 8005686:	4638      	mov	r0, r7
 8005688:	990a      	ldr	r1, [sp, #40]	; 0x28
 800568a:	f000 fedf 	bl	800644c <__multadd>
 800568e:	4544      	cmp	r4, r8
 8005690:	900a      	str	r0, [sp, #40]	; 0x28
 8005692:	d027      	beq.n	80056e4 <_dtoa_r+0xa74>
 8005694:	4621      	mov	r1, r4
 8005696:	220a      	movs	r2, #10
 8005698:	2300      	movs	r3, #0
 800569a:	4638      	mov	r0, r7
 800569c:	f000 fed6 	bl	800644c <__multadd>
 80056a0:	4641      	mov	r1, r8
 80056a2:	4604      	mov	r4, r0
 80056a4:	220a      	movs	r2, #10
 80056a6:	4638      	mov	r0, r7
 80056a8:	2300      	movs	r3, #0
 80056aa:	f000 fecf 	bl	800644c <__multadd>
 80056ae:	4680      	mov	r8, r0
 80056b0:	e7a9      	b.n	8005606 <_dtoa_r+0x996>
 80056b2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80056b4:	4651      	mov	r1, sl
 80056b6:	f001 f8f3 	bl	80068a0 <__mcmp>
 80056ba:	4683      	mov	fp, r0
 80056bc:	e7bb      	b.n	8005636 <_dtoa_r+0x9c6>
 80056be:	4638      	mov	r0, r7
 80056c0:	4621      	mov	r1, r4
 80056c2:	f000 feb9 	bl	8006438 <_Bfree>
 80056c6:	e587      	b.n	80051d8 <_dtoa_r+0x568>
 80056c8:	231c      	movs	r3, #28
 80056ca:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80056cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80056ce:	18c0      	adds	r0, r0, r3
 80056d0:	18c9      	adds	r1, r1, r3
 80056d2:	900f      	str	r0, [sp, #60]	; 0x3c
 80056d4:	18e4      	adds	r4, r4, r3
 80056d6:	910b      	str	r1, [sp, #44]	; 0x2c
 80056d8:	e538      	b.n	800514c <_dtoa_r+0x4dc>
 80056da:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80056de:	4682      	mov	sl, r0
 80056e0:	468b      	mov	fp, r1
 80056e2:	e406      	b.n	8004ef2 <_dtoa_r+0x282>
 80056e4:	4621      	mov	r1, r4
 80056e6:	4638      	mov	r0, r7
 80056e8:	220a      	movs	r2, #10
 80056ea:	2300      	movs	r3, #0
 80056ec:	f000 feae 	bl	800644c <__multadd>
 80056f0:	4604      	mov	r4, r0
 80056f2:	4680      	mov	r8, r0
 80056f4:	e787      	b.n	8005606 <_dtoa_r+0x996>
 80056f6:	9c05      	ldr	r4, [sp, #20]
 80056f8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80056fa:	9417      	str	r4, [sp, #92]	; 0x5c
 80056fc:	e672      	b.n	80053e4 <_dtoa_r+0x774>
 80056fe:	9d05      	ldr	r5, [sp, #20]
 8005700:	426c      	negs	r4, r5
 8005702:	2c00      	cmp	r4, #0
 8005704:	f000 80fb 	beq.w	80058fe <_dtoa_r+0xc8e>
 8005708:	4ba0      	ldr	r3, [pc, #640]	; (800598c <_dtoa_r+0xd1c>)
 800570a:	f004 020f 	and.w	r2, r4, #15
 800570e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005712:	4650      	mov	r0, sl
 8005714:	4659      	mov	r1, fp
 8005716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800571a:	f002 fd79 	bl	8008210 <__aeabi_dmul>
 800571e:	1124      	asrs	r4, r4, #4
 8005720:	4682      	mov	sl, r0
 8005722:	468b      	mov	fp, r1
 8005724:	f000 80eb 	beq.w	80058fe <_dtoa_r+0xc8e>
 8005728:	4d99      	ldr	r5, [pc, #612]	; (8005990 <_dtoa_r+0xd20>)
 800572a:	2602      	movs	r6, #2
 800572c:	07e2      	lsls	r2, r4, #31
 800572e:	d504      	bpl.n	800573a <_dtoa_r+0xaca>
 8005730:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005734:	f002 fd6c 	bl	8008210 <__aeabi_dmul>
 8005738:	3601      	adds	r6, #1
 800573a:	3508      	adds	r5, #8
 800573c:	1064      	asrs	r4, r4, #1
 800573e:	d1f5      	bne.n	800572c <_dtoa_r+0xabc>
 8005740:	4682      	mov	sl, r0
 8005742:	468b      	mov	fp, r1
 8005744:	e612      	b.n	800536c <_dtoa_r+0x6fc>
 8005746:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8005748:	9606      	str	r6, [sp, #24]
 800574a:	e530      	b.n	80051ae <_dtoa_r+0x53e>
 800574c:	498f      	ldr	r1, [pc, #572]	; (800598c <_dtoa_r+0xd1c>)
 800574e:	1e6c      	subs	r4, r5, #1
 8005750:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8005754:	4642      	mov	r2, r8
 8005756:	464b      	mov	r3, r9
 8005758:	e9d1 0100 	ldrd	r0, r1, [r1]
 800575c:	9406      	str	r4, [sp, #24]
 800575e:	f002 fd57 	bl	8008210 <__aeabi_dmul>
 8005762:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
 8005766:	4659      	mov	r1, fp
 8005768:	4650      	mov	r0, sl
 800576a:	f002 ffeb 	bl	8008744 <__aeabi_d2iz>
 800576e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005770:	4604      	mov	r4, r0
 8005772:	9111      	str	r1, [sp, #68]	; 0x44
 8005774:	f002 fce6 	bl	8008144 <__aeabi_i2d>
 8005778:	460b      	mov	r3, r1
 800577a:	4602      	mov	r2, r0
 800577c:	4659      	mov	r1, fp
 800577e:	4650      	mov	r0, sl
 8005780:	f002 fb92 	bl	8007ea8 <__aeabi_dsub>
 8005784:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8005788:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800578a:	f804 3b01 	strb.w	r3, [r4], #1
 800578e:	2d01      	cmp	r5, #1
 8005790:	4682      	mov	sl, r0
 8005792:	468b      	mov	fp, r1
 8005794:	9411      	str	r4, [sp, #68]	; 0x44
 8005796:	46a0      	mov	r8, r4
 8005798:	d020      	beq.n	80057dc <_dtoa_r+0xb6c>
 800579a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800579c:	1e66      	subs	r6, r4, #1
 800579e:	1976      	adds	r6, r6, r5
 80057a0:	2300      	movs	r3, #0
 80057a2:	2200      	movs	r2, #0
 80057a4:	f2c4 0324 	movt	r3, #16420	; 0x4024
 80057a8:	f002 fd32 	bl	8008210 <__aeabi_dmul>
 80057ac:	4689      	mov	r9, r1
 80057ae:	4680      	mov	r8, r0
 80057b0:	f002 ffc8 	bl	8008744 <__aeabi_d2iz>
 80057b4:	4605      	mov	r5, r0
 80057b6:	f002 fcc5 	bl	8008144 <__aeabi_i2d>
 80057ba:	3530      	adds	r5, #48	; 0x30
 80057bc:	4602      	mov	r2, r0
 80057be:	460b      	mov	r3, r1
 80057c0:	4640      	mov	r0, r8
 80057c2:	4649      	mov	r1, r9
 80057c4:	f002 fb70 	bl	8007ea8 <__aeabi_dsub>
 80057c8:	f804 5f01 	strb.w	r5, [r4, #1]!
 80057cc:	42b4      	cmp	r4, r6
 80057ce:	d1e7      	bne.n	80057a0 <_dtoa_r+0xb30>
 80057d0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80057d2:	9c06      	ldr	r4, [sp, #24]
 80057d4:	4682      	mov	sl, r0
 80057d6:	468b      	mov	fp, r1
 80057d8:	eb05 0804 	add.w	r8, r5, r4
 80057dc:	2300      	movs	r3, #0
 80057de:	2200      	movs	r2, #0
 80057e0:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
 80057e4:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 80057e8:	f002 fb60 	bl	8007eac <__adddf3>
 80057ec:	4602      	mov	r2, r0
 80057ee:	460b      	mov	r3, r1
 80057f0:	4650      	mov	r0, sl
 80057f2:	4659      	mov	r1, fp
 80057f4:	f002 ff9c 	bl	8008730 <__aeabi_dcmpgt>
 80057f8:	2800      	cmp	r0, #0
 80057fa:	f000 808a 	beq.w	8005912 <_dtoa_r+0xca2>
 80057fe:	f818 6c01 	ldrb.w	r6, [r8, #-1]
 8005802:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005804:	e422      	b.n	800504c <_dtoa_r+0x3dc>
 8005806:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005808:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 800580c:	e4e8      	b.n	80051e0 <_dtoa_r+0x570>
 800580e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005810:	4631      	mov	r1, r6
 8005812:	f001 f845 	bl	80068a0 <__mcmp>
 8005816:	2800      	cmp	r0, #0
 8005818:	f6bf acad 	bge.w	8005176 <_dtoa_r+0x506>
 800581c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800581e:	220a      	movs	r2, #10
 8005820:	4638      	mov	r0, r7
 8005822:	2300      	movs	r3, #0
 8005824:	f000 fe12 	bl	800644c <__multadd>
 8005828:	9905      	ldr	r1, [sp, #20]
 800582a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800582c:	900a      	str	r0, [sp, #40]	; 0x28
 800582e:	3901      	subs	r1, #1
 8005830:	9105      	str	r1, [sp, #20]
 8005832:	2a00      	cmp	r2, #0
 8005834:	f040 8136 	bne.w	8005aa4 <_dtoa_r+0xe34>
 8005838:	9815      	ldr	r0, [sp, #84]	; 0x54
 800583a:	900e      	str	r0, [sp, #56]	; 0x38
 800583c:	e49b      	b.n	8005176 <_dtoa_r+0x506>
 800583e:	6933      	ldr	r3, [r6, #16]
 8005840:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005844:	6918      	ldr	r0, [r3, #16]
 8005846:	f000 fe91 	bl	800656c <__hi0bits>
 800584a:	f1c0 0320 	rsb	r3, r0, #32
 800584e:	e46a      	b.n	8005126 <_dtoa_r+0x4b6>
 8005850:	f1b9 0f0e 	cmp.w	r9, #14
 8005854:	bf8c      	ite	hi
 8005856:	2300      	movhi	r3, #0
 8005858:	2301      	movls	r3, #1
 800585a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800585e:	2100      	movs	r1, #0
 8005860:	6479      	str	r1, [r7, #68]	; 0x44
 8005862:	401c      	ands	r4, r3
 8005864:	e543      	b.n	80052ee <_dtoa_r+0x67e>
 8005866:	2301      	movs	r3, #1
 8005868:	9315      	str	r3, [sp, #84]	; 0x54
 800586a:	930e      	str	r3, [sp, #56]	; 0x38
 800586c:	9327      	str	r3, [sp, #156]	; 0x9c
 800586e:	e7f6      	b.n	800585e <_dtoa_r+0xbee>
 8005870:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8005872:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 8005876:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800587a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800587c:	e006      	b.n	800588c <_dtoa_r+0xc1c>
 800587e:	4651      	mov	r1, sl
 8005880:	4638      	mov	r0, r7
 8005882:	220a      	movs	r2, #10
 8005884:	2300      	movs	r3, #0
 8005886:	f000 fde1 	bl	800644c <__multadd>
 800588a:	4682      	mov	sl, r0
 800588c:	4631      	mov	r1, r6
 800588e:	4650      	mov	r0, sl
 8005890:	f7ff f95e 	bl	8004b50 <quorem>
 8005894:	3030      	adds	r0, #48	; 0x30
 8005896:	5528      	strb	r0, [r5, r4]
 8005898:	3401      	adds	r4, #1
 800589a:	45a0      	cmp	r8, r4
 800589c:	dcef      	bgt.n	800587e <_dtoa_r+0xc0e>
 800589e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80058a0:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 80058a4:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 80058a8:	4681      	mov	r9, r0
 80058aa:	2c01      	cmp	r4, #1
 80058ac:	bfac      	ite	ge
 80058ae:	44a2      	addge	sl, r4
 80058b0:	f10a 0a01 	addlt.w	sl, sl, #1
 80058b4:	2400      	movs	r4, #0
 80058b6:	2201      	movs	r2, #1
 80058b8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80058ba:	4638      	mov	r0, r7
 80058bc:	f000 ff90 	bl	80067e0 <__lshift>
 80058c0:	4631      	mov	r1, r6
 80058c2:	900a      	str	r0, [sp, #40]	; 0x28
 80058c4:	f000 ffec 	bl	80068a0 <__mcmp>
 80058c8:	2800      	cmp	r0, #0
 80058ca:	f340 8082 	ble.w	80059d2 <_dtoa_r+0xd62>
 80058ce:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
 80058d2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80058d4:	1c6a      	adds	r2, r5, #1
 80058d6:	e003      	b.n	80058e0 <_dtoa_r+0xc70>
 80058d8:	f81a 3c02 	ldrb.w	r3, [sl, #-2]
 80058dc:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80058e0:	2b39      	cmp	r3, #57	; 0x39
 80058e2:	f040 8084 	bne.w	80059ee <_dtoa_r+0xd7e>
 80058e6:	4592      	cmp	sl, r2
 80058e8:	d1f6      	bne.n	80058d8 <_dtoa_r+0xc68>
 80058ea:	9805      	ldr	r0, [sp, #20]
 80058ec:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80058ee:	3001      	adds	r0, #1
 80058f0:	2331      	movs	r3, #49	; 0x31
 80058f2:	9005      	str	r0, [sp, #20]
 80058f4:	f80a 3c01 	strb.w	r3, [sl, #-1]
 80058f8:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80058fc:	e461      	b.n	80051c2 <_dtoa_r+0x552>
 80058fe:	2602      	movs	r6, #2
 8005900:	e534      	b.n	800536c <_dtoa_r+0x6fc>
 8005902:	4638      	mov	r0, r7
 8005904:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005906:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005908:	f000 ff1e 	bl	8006748 <__pow5mult>
 800590c:	900a      	str	r0, [sp, #40]	; 0x28
 800590e:	f7ff bbf2 	b.w	80050f6 <_dtoa_r+0x486>
 8005912:	2100      	movs	r1, #0
 8005914:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8005918:	2000      	movs	r0, #0
 800591a:	f6c3 71e0 	movt	r1, #16352	; 0x3fe0
 800591e:	f002 fac3 	bl	8007ea8 <__aeabi_dsub>
 8005922:	4602      	mov	r2, r0
 8005924:	460b      	mov	r3, r1
 8005926:	4650      	mov	r0, sl
 8005928:	4659      	mov	r1, fp
 800592a:	f002 fee3 	bl	80086f4 <__aeabi_dcmplt>
 800592e:	2800      	cmp	r0, #0
 8005930:	f43f aed3 	beq.w	80056da <_dtoa_r+0xa6a>
 8005934:	4642      	mov	r2, r8
 8005936:	f818 3d01 	ldrb.w	r3, [r8, #-1]!
 800593a:	2b30      	cmp	r3, #48	; 0x30
 800593c:	d0fa      	beq.n	8005934 <_dtoa_r+0xcc4>
 800593e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8005940:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005942:	9405      	str	r4, [sp, #20]
 8005944:	9209      	str	r2, [sp, #36]	; 0x24
 8005946:	e44b      	b.n	80051e0 <_dtoa_r+0x570>
 8005948:	4638      	mov	r0, r7
 800594a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800594c:	f000 fefc 	bl	8006748 <__pow5mult>
 8005950:	900a      	str	r0, [sp, #40]	; 0x28
 8005952:	f7ff bbd0 	b.w	80050f6 <_dtoa_r+0x486>
 8005956:	2600      	movs	r6, #0
 8005958:	9606      	str	r6, [sp, #24]
 800595a:	e4a5      	b.n	80052a8 <_dtoa_r+0x638>
 800595c:	9d16      	ldr	r5, [sp, #88]	; 0x58
 800595e:	2d00      	cmp	r5, #0
 8005960:	d064      	beq.n	8005a2c <_dtoa_r+0xdbc>
 8005962:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005966:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005968:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800596a:	e47d      	b.n	8005268 <_dtoa_r+0x5f8>
 800596c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800596e:	f7ff bb6d 	b.w	800504c <_dtoa_r+0x3dc>
 8005972:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8005974:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8005978:	1c72      	adds	r2, r6, #1
 800597a:	b2d2      	uxtb	r2, r2
 800597c:	9405      	str	r4, [sp, #20]
 800597e:	f7ff bb7b 	b.w	8005078 <_dtoa_r+0x408>
 8005982:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005984:	2300      	movs	r3, #0
 8005986:	1b04      	subs	r4, r0, r4
 8005988:	e46e      	b.n	8005268 <_dtoa_r+0x5f8>
 800598a:	bf00      	nop
 800598c:	08008900 	.word	0x08008900
 8005990:	080089f0 	.word	0x080089f0
 8005994:	f1bb 0f00 	cmp.w	fp, #0
 8005998:	f8dd 9018 	ldr.w	r9, [sp, #24]
 800599c:	dd10      	ble.n	80059c0 <_dtoa_r+0xd50>
 800599e:	2201      	movs	r2, #1
 80059a0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80059a2:	4638      	mov	r0, r7
 80059a4:	f000 ff1c 	bl	80067e0 <__lshift>
 80059a8:	4631      	mov	r1, r6
 80059aa:	900a      	str	r0, [sp, #40]	; 0x28
 80059ac:	f000 ff78 	bl	80068a0 <__mcmp>
 80059b0:	2800      	cmp	r0, #0
 80059b2:	dd6b      	ble.n	8005a8c <_dtoa_r+0xe1c>
 80059b4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80059b8:	d053      	beq.n	8005a62 <_dtoa_r+0xdf2>
 80059ba:	9b08      	ldr	r3, [sp, #32]
 80059bc:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80059c0:	462b      	mov	r3, r5
 80059c2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80059c4:	f803 9b01 	strb.w	r9, [r3], #1
 80059c8:	f8cd 8018 	str.w	r8, [sp, #24]
 80059cc:	9309      	str	r3, [sp, #36]	; 0x24
 80059ce:	f7ff bbf8 	b.w	80051c2 <_dtoa_r+0x552>
 80059d2:	d103      	bne.n	80059dc <_dtoa_r+0xd6c>
 80059d4:	f019 0f01 	tst.w	r9, #1
 80059d8:	f47f af79 	bne.w	80058ce <_dtoa_r+0xc5e>
 80059dc:	4652      	mov	r2, sl
 80059de:	f81a 3d01 	ldrb.w	r3, [sl, #-1]!
 80059e2:	2b30      	cmp	r3, #48	; 0x30
 80059e4:	d0fa      	beq.n	80059dc <_dtoa_r+0xd6c>
 80059e6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80059e8:	9209      	str	r2, [sp, #36]	; 0x24
 80059ea:	f7ff bbea 	b.w	80051c2 <_dtoa_r+0x552>
 80059ee:	3301      	adds	r3, #1
 80059f0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80059f2:	f80a 3c01 	strb.w	r3, [sl, #-1]
 80059f6:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80059fa:	f7ff bbe2 	b.w	80051c2 <_dtoa_r+0x552>
 80059fe:	9c06      	ldr	r4, [sp, #24]
 8005a00:	4638      	mov	r0, r7
 8005a02:	6861      	ldr	r1, [r4, #4]
 8005a04:	f000 fcf2 	bl	80063ec <_Balloc>
 8005a08:	9d06      	ldr	r5, [sp, #24]
 8005a0a:	692a      	ldr	r2, [r5, #16]
 8005a0c:	3202      	adds	r2, #2
 8005a0e:	4604      	mov	r4, r0
 8005a10:	0092      	lsls	r2, r2, #2
 8005a12:	f105 010c 	add.w	r1, r5, #12
 8005a16:	f100 000c 	add.w	r0, r0, #12
 8005a1a:	f000 fc9f 	bl	800635c <memcpy>
 8005a1e:	4638      	mov	r0, r7
 8005a20:	4621      	mov	r1, r4
 8005a22:	2201      	movs	r2, #1
 8005a24:	f000 fedc 	bl	80067e0 <__lshift>
 8005a28:	4680      	mov	r8, r0
 8005a2a:	e5e7      	b.n	80055fc <_dtoa_r+0x98c>
 8005a2c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8005a2e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005a30:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8005a32:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005a36:	e417      	b.n	8005268 <_dtoa_r+0x5f8>
 8005a38:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8005a3c:	f8cd 8018 	str.w	r8, [sp, #24]
 8005a40:	e739      	b.n	80058b6 <_dtoa_r+0xc46>
 8005a42:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8005a46:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005a4a:	d00a      	beq.n	8005a62 <_dtoa_r+0xdf2>
 8005a4c:	462b      	mov	r3, r5
 8005a4e:	f109 0901 	add.w	r9, r9, #1
 8005a52:	f803 9b01 	strb.w	r9, [r3], #1
 8005a56:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005a58:	f8cd 8018 	str.w	r8, [sp, #24]
 8005a5c:	9309      	str	r3, [sp, #36]	; 0x24
 8005a5e:	f7ff bbb0 	b.w	80051c2 <_dtoa_r+0x552>
 8005a62:	46aa      	mov	sl, r5
 8005a64:	2339      	movs	r3, #57	; 0x39
 8005a66:	f80a 3b01 	strb.w	r3, [sl], #1
 8005a6a:	f8cd 8018 	str.w	r8, [sp, #24]
 8005a6e:	e730      	b.n	80058d2 <_dtoa_r+0xc62>
 8005a70:	464b      	mov	r3, r9
 8005a72:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8005a76:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005a7a:	d0f2      	beq.n	8005a62 <_dtoa_r+0xdf2>
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	dc9c      	bgt.n	80059ba <_dtoa_r+0xd4a>
 8005a80:	e79e      	b.n	80059c0 <_dtoa_r+0xd50>
 8005a82:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8005a84:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005a86:	9409      	str	r4, [sp, #36]	; 0x24
 8005a88:	f7ff bbaa 	b.w	80051e0 <_dtoa_r+0x570>
 8005a8c:	d198      	bne.n	80059c0 <_dtoa_r+0xd50>
 8005a8e:	f019 0f01 	tst.w	r9, #1
 8005a92:	d095      	beq.n	80059c0 <_dtoa_r+0xd50>
 8005a94:	e78e      	b.n	80059b4 <_dtoa_r+0xd44>
 8005a96:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8005a98:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005a9a:	9405      	str	r4, [sp, #20]
 8005a9c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8005a9e:	9409      	str	r4, [sp, #36]	; 0x24
 8005aa0:	f7ff bb9e 	b.w	80051e0 <_dtoa_r+0x570>
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	4638      	mov	r0, r7
 8005aa8:	9906      	ldr	r1, [sp, #24]
 8005aaa:	220a      	movs	r2, #10
 8005aac:	f000 fcce 	bl	800644c <__multadd>
 8005ab0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005ab2:	9006      	str	r0, [sp, #24]
 8005ab4:	930e      	str	r3, [sp, #56]	; 0x38
 8005ab6:	f7ff bb5e 	b.w	8005176 <_dtoa_r+0x506>
 8005aba:	f43f ab47 	beq.w	800514c <_dtoa_r+0x4dc>
 8005abe:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
 8005ac2:	e602      	b.n	80056ca <_dtoa_r+0xa5a>
 8005ac4:	f3af 8000 	nop.w

08005ac8 <_malloc_trim_r>:
 8005ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aca:	4d22      	ldr	r5, [pc, #136]	; (8005b54 <_malloc_trim_r+0x8c>)
 8005acc:	460f      	mov	r7, r1
 8005ace:	4604      	mov	r4, r0
 8005ad0:	f000 fc88 	bl	80063e4 <__malloc_lock>
 8005ad4:	68ab      	ldr	r3, [r5, #8]
 8005ad6:	685e      	ldr	r6, [r3, #4]
 8005ad8:	f026 0603 	bic.w	r6, r6, #3
 8005adc:	f606 73ef 	addw	r3, r6, #4079	; 0xfef
 8005ae0:	1bdf      	subs	r7, r3, r7
 8005ae2:	0b3f      	lsrs	r7, r7, #12
 8005ae4:	3f01      	subs	r7, #1
 8005ae6:	033f      	lsls	r7, r7, #12
 8005ae8:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
 8005aec:	4620      	mov	r0, r4
 8005aee:	db07      	blt.n	8005b00 <_malloc_trim_r+0x38>
 8005af0:	2100      	movs	r1, #0
 8005af2:	f001 f907 	bl	8006d04 <_sbrk_r>
 8005af6:	68ab      	ldr	r3, [r5, #8]
 8005af8:	199b      	adds	r3, r3, r6
 8005afa:	4298      	cmp	r0, r3
 8005afc:	4620      	mov	r0, r4
 8005afe:	d003      	beq.n	8005b08 <_malloc_trim_r+0x40>
 8005b00:	f000 fc72 	bl	80063e8 <__malloc_unlock>
 8005b04:	2000      	movs	r0, #0
 8005b06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b08:	4279      	negs	r1, r7
 8005b0a:	f001 f8fb 	bl	8006d04 <_sbrk_r>
 8005b0e:	3001      	adds	r0, #1
 8005b10:	d00d      	beq.n	8005b2e <_malloc_trim_r+0x66>
 8005b12:	4b11      	ldr	r3, [pc, #68]	; (8005b58 <_malloc_trim_r+0x90>)
 8005b14:	68aa      	ldr	r2, [r5, #8]
 8005b16:	6819      	ldr	r1, [r3, #0]
 8005b18:	1bf6      	subs	r6, r6, r7
 8005b1a:	f046 0601 	orr.w	r6, r6, #1
 8005b1e:	1bcf      	subs	r7, r1, r7
 8005b20:	4620      	mov	r0, r4
 8005b22:	6056      	str	r6, [r2, #4]
 8005b24:	601f      	str	r7, [r3, #0]
 8005b26:	f000 fc5f 	bl	80063e8 <__malloc_unlock>
 8005b2a:	2001      	movs	r0, #1
 8005b2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b2e:	2100      	movs	r1, #0
 8005b30:	4620      	mov	r0, r4
 8005b32:	f001 f8e7 	bl	8006d04 <_sbrk_r>
 8005b36:	68ab      	ldr	r3, [r5, #8]
 8005b38:	1ac2      	subs	r2, r0, r3
 8005b3a:	2a0f      	cmp	r2, #15
 8005b3c:	dd07      	ble.n	8005b4e <_malloc_trim_r+0x86>
 8005b3e:	4907      	ldr	r1, [pc, #28]	; (8005b5c <_malloc_trim_r+0x94>)
 8005b40:	6809      	ldr	r1, [r1, #0]
 8005b42:	1a40      	subs	r0, r0, r1
 8005b44:	4904      	ldr	r1, [pc, #16]	; (8005b58 <_malloc_trim_r+0x90>)
 8005b46:	f042 0201 	orr.w	r2, r2, #1
 8005b4a:	6008      	str	r0, [r1, #0]
 8005b4c:	605a      	str	r2, [r3, #4]
 8005b4e:	4620      	mov	r0, r4
 8005b50:	e7d6      	b.n	8005b00 <_malloc_trim_r+0x38>
 8005b52:	bf00      	nop
 8005b54:	2000056c 	.word	0x2000056c
 8005b58:	20000998 	.word	0x20000998
 8005b5c:	20000974 	.word	0x20000974

08005b60 <_free_r>:
 8005b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b64:	460d      	mov	r5, r1
 8005b66:	4604      	mov	r4, r0
 8005b68:	2900      	cmp	r1, #0
 8005b6a:	d06f      	beq.n	8005c4c <_free_r+0xec>
 8005b6c:	f000 fc3a 	bl	80063e4 <__malloc_lock>
 8005b70:	f855 0c04 	ldr.w	r0, [r5, #-4]
 8005b74:	4e58      	ldr	r6, [pc, #352]	; (8005cd8 <_free_r+0x178>)
 8005b76:	f1a5 0108 	sub.w	r1, r5, #8
 8005b7a:	f020 0301 	bic.w	r3, r0, #1
 8005b7e:	18ca      	adds	r2, r1, r3
 8005b80:	f8d6 c008 	ldr.w	ip, [r6, #8]
 8005b84:	6857      	ldr	r7, [r2, #4]
 8005b86:	4594      	cmp	ip, r2
 8005b88:	f027 0703 	bic.w	r7, r7, #3
 8005b8c:	d07c      	beq.n	8005c88 <_free_r+0x128>
 8005b8e:	f010 0001 	ands.w	r0, r0, #1
 8005b92:	6057      	str	r7, [r2, #4]
 8005b94:	d049      	beq.n	8005c2a <_free_r+0xca>
 8005b96:	2000      	movs	r0, #0
 8005b98:	19d5      	adds	r5, r2, r7
 8005b9a:	686d      	ldr	r5, [r5, #4]
 8005b9c:	f015 0f01 	tst.w	r5, #1
 8005ba0:	d106      	bne.n	8005bb0 <_free_r+0x50>
 8005ba2:	19db      	adds	r3, r3, r7
 8005ba4:	6895      	ldr	r5, [r2, #8]
 8005ba6:	2800      	cmp	r0, #0
 8005ba8:	d062      	beq.n	8005c70 <_free_r+0x110>
 8005baa:	68d2      	ldr	r2, [r2, #12]
 8005bac:	60ea      	str	r2, [r5, #12]
 8005bae:	6095      	str	r5, [r2, #8]
 8005bb0:	f043 0201 	orr.w	r2, r3, #1
 8005bb4:	604a      	str	r2, [r1, #4]
 8005bb6:	50cb      	str	r3, [r1, r3]
 8005bb8:	bb90      	cbnz	r0, 8005c20 <_free_r+0xc0>
 8005bba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bbe:	d347      	bcc.n	8005c50 <_free_r+0xf0>
 8005bc0:	099d      	lsrs	r5, r3, #6
 8005bc2:	3538      	adds	r5, #56	; 0x38
 8005bc4:	0a5a      	lsrs	r2, r3, #9
 8005bc6:	00e8      	lsls	r0, r5, #3
 8005bc8:	2a04      	cmp	r2, #4
 8005bca:	d916      	bls.n	8005bfa <_free_r+0x9a>
 8005bcc:	f102 055b 	add.w	r5, r2, #91	; 0x5b
 8005bd0:	00e8      	lsls	r0, r5, #3
 8005bd2:	2a14      	cmp	r2, #20
 8005bd4:	d911      	bls.n	8005bfa <_free_r+0x9a>
 8005bd6:	0b1d      	lsrs	r5, r3, #12
 8005bd8:	356e      	adds	r5, #110	; 0x6e
 8005bda:	00e8      	lsls	r0, r5, #3
 8005bdc:	2a54      	cmp	r2, #84	; 0x54
 8005bde:	d90c      	bls.n	8005bfa <_free_r+0x9a>
 8005be0:	0bdd      	lsrs	r5, r3, #15
 8005be2:	3577      	adds	r5, #119	; 0x77
 8005be4:	00e8      	lsls	r0, r5, #3
 8005be6:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8005bea:	d906      	bls.n	8005bfa <_free_r+0x9a>
 8005bec:	f240 5054 	movw	r0, #1364	; 0x554
 8005bf0:	4282      	cmp	r2, r0
 8005bf2:	d86d      	bhi.n	8005cd0 <_free_r+0x170>
 8005bf4:	0c9d      	lsrs	r5, r3, #18
 8005bf6:	357c      	adds	r5, #124	; 0x7c
 8005bf8:	00e8      	lsls	r0, r5, #3
 8005bfa:	1986      	adds	r6, r0, r6
 8005bfc:	4836      	ldr	r0, [pc, #216]	; (8005cd8 <_free_r+0x178>)
 8005bfe:	68b2      	ldr	r2, [r6, #8]
 8005c00:	42b2      	cmp	r2, r6
 8005c02:	d103      	bne.n	8005c0c <_free_r+0xac>
 8005c04:	e05b      	b.n	8005cbe <_free_r+0x15e>
 8005c06:	6892      	ldr	r2, [r2, #8]
 8005c08:	4296      	cmp	r6, r2
 8005c0a:	d004      	beq.n	8005c16 <_free_r+0xb6>
 8005c0c:	6850      	ldr	r0, [r2, #4]
 8005c0e:	f020 0003 	bic.w	r0, r0, #3
 8005c12:	4283      	cmp	r3, r0
 8005c14:	d3f7      	bcc.n	8005c06 <_free_r+0xa6>
 8005c16:	68d3      	ldr	r3, [r2, #12]
 8005c18:	60cb      	str	r3, [r1, #12]
 8005c1a:	608a      	str	r2, [r1, #8]
 8005c1c:	60d1      	str	r1, [r2, #12]
 8005c1e:	6099      	str	r1, [r3, #8]
 8005c20:	4620      	mov	r0, r4
 8005c22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c26:	f000 bbdf 	b.w	80063e8 <__malloc_unlock>
 8005c2a:	f855 cc08 	ldr.w	ip, [r5, #-8]
 8005c2e:	ebcc 0101 	rsb	r1, ip, r1
 8005c32:	f106 0808 	add.w	r8, r6, #8
 8005c36:	688d      	ldr	r5, [r1, #8]
 8005c38:	4545      	cmp	r5, r8
 8005c3a:	4463      	add	r3, ip
 8005c3c:	d03d      	beq.n	8005cba <_free_r+0x15a>
 8005c3e:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8005c42:	f8c5 c00c 	str.w	ip, [r5, #12]
 8005c46:	f8cc 5008 	str.w	r5, [ip, #8]
 8005c4a:	e7a5      	b.n	8005b98 <_free_r+0x38>
 8005c4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c50:	08db      	lsrs	r3, r3, #3
 8005c52:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 8005c56:	6875      	ldr	r5, [r6, #4]
 8005c58:	6890      	ldr	r0, [r2, #8]
 8005c5a:	60ca      	str	r2, [r1, #12]
 8005c5c:	109b      	asrs	r3, r3, #2
 8005c5e:	2701      	movs	r7, #1
 8005c60:	fa17 f303 	lsls.w	r3, r7, r3
 8005c64:	432b      	orrs	r3, r5
 8005c66:	6088      	str	r0, [r1, #8]
 8005c68:	6073      	str	r3, [r6, #4]
 8005c6a:	6091      	str	r1, [r2, #8]
 8005c6c:	60c1      	str	r1, [r0, #12]
 8005c6e:	e7d7      	b.n	8005c20 <_free_r+0xc0>
 8005c70:	4f1a      	ldr	r7, [pc, #104]	; (8005cdc <_free_r+0x17c>)
 8005c72:	42bd      	cmp	r5, r7
 8005c74:	d199      	bne.n	8005baa <_free_r+0x4a>
 8005c76:	f043 0201 	orr.w	r2, r3, #1
 8005c7a:	6171      	str	r1, [r6, #20]
 8005c7c:	6131      	str	r1, [r6, #16]
 8005c7e:	60cd      	str	r5, [r1, #12]
 8005c80:	608d      	str	r5, [r1, #8]
 8005c82:	604a      	str	r2, [r1, #4]
 8005c84:	50cb      	str	r3, [r1, r3]
 8005c86:	e7cb      	b.n	8005c20 <_free_r+0xc0>
 8005c88:	07c2      	lsls	r2, r0, #31
 8005c8a:	443b      	add	r3, r7
 8005c8c:	d407      	bmi.n	8005c9e <_free_r+0x13e>
 8005c8e:	f855 2c08 	ldr.w	r2, [r5, #-8]
 8005c92:	1a89      	subs	r1, r1, r2
 8005c94:	189b      	adds	r3, r3, r2
 8005c96:	6888      	ldr	r0, [r1, #8]
 8005c98:	68ca      	ldr	r2, [r1, #12]
 8005c9a:	60c2      	str	r2, [r0, #12]
 8005c9c:	6090      	str	r0, [r2, #8]
 8005c9e:	4a10      	ldr	r2, [pc, #64]	; (8005ce0 <_free_r+0x180>)
 8005ca0:	60b1      	str	r1, [r6, #8]
 8005ca2:	6812      	ldr	r2, [r2, #0]
 8005ca4:	f043 0001 	orr.w	r0, r3, #1
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	6048      	str	r0, [r1, #4]
 8005cac:	d3b8      	bcc.n	8005c20 <_free_r+0xc0>
 8005cae:	4b0d      	ldr	r3, [pc, #52]	; (8005ce4 <_free_r+0x184>)
 8005cb0:	4620      	mov	r0, r4
 8005cb2:	6819      	ldr	r1, [r3, #0]
 8005cb4:	f7ff ff08 	bl	8005ac8 <_malloc_trim_r>
 8005cb8:	e7b2      	b.n	8005c20 <_free_r+0xc0>
 8005cba:	2001      	movs	r0, #1
 8005cbc:	e76c      	b.n	8005b98 <_free_r+0x38>
 8005cbe:	6843      	ldr	r3, [r0, #4]
 8005cc0:	10ad      	asrs	r5, r5, #2
 8005cc2:	2601      	movs	r6, #1
 8005cc4:	fa16 f505 	lsls.w	r5, r6, r5
 8005cc8:	432b      	orrs	r3, r5
 8005cca:	6043      	str	r3, [r0, #4]
 8005ccc:	4613      	mov	r3, r2
 8005cce:	e7a3      	b.n	8005c18 <_free_r+0xb8>
 8005cd0:	f44f 707c 	mov.w	r0, #1008	; 0x3f0
 8005cd4:	257e      	movs	r5, #126	; 0x7e
 8005cd6:	e790      	b.n	8005bfa <_free_r+0x9a>
 8005cd8:	2000056c 	.word	0x2000056c
 8005cdc:	20000574 	.word	0x20000574
 8005ce0:	20000978 	.word	0x20000978
 8005ce4:	20000994 	.word	0x20000994

08005ce8 <_setlocale_r>:
 8005ce8:	b510      	push	{r4, lr}
 8005cea:	4614      	mov	r4, r2
 8005cec:	b122      	cbz	r2, 8005cf8 <_setlocale_r+0x10>
 8005cee:	4610      	mov	r0, r2
 8005cf0:	490b      	ldr	r1, [pc, #44]	; (8005d20 <_setlocale_r+0x38>)
 8005cf2:	f001 f819 	bl	8006d28 <strcmp>
 8005cf6:	b908      	cbnz	r0, 8005cfc <_setlocale_r+0x14>
 8005cf8:	480a      	ldr	r0, [pc, #40]	; (8005d24 <_setlocale_r+0x3c>)
 8005cfa:	bd10      	pop	{r4, pc}
 8005cfc:	4620      	mov	r0, r4
 8005cfe:	4909      	ldr	r1, [pc, #36]	; (8005d24 <_setlocale_r+0x3c>)
 8005d00:	f001 f812 	bl	8006d28 <strcmp>
 8005d04:	b908      	cbnz	r0, 8005d0a <_setlocale_r+0x22>
 8005d06:	4807      	ldr	r0, [pc, #28]	; (8005d24 <_setlocale_r+0x3c>)
 8005d08:	bd10      	pop	{r4, pc}
 8005d0a:	4620      	mov	r0, r4
 8005d0c:	4906      	ldr	r1, [pc, #24]	; (8005d28 <_setlocale_r+0x40>)
 8005d0e:	f001 f80b 	bl	8006d28 <strcmp>
 8005d12:	4b04      	ldr	r3, [pc, #16]	; (8005d24 <_setlocale_r+0x3c>)
 8005d14:	2800      	cmp	r0, #0
 8005d16:	bf0c      	ite	eq
 8005d18:	4618      	moveq	r0, r3
 8005d1a:	2000      	movne	r0, #0
 8005d1c:	bd10      	pop	{r4, pc}
 8005d1e:	bf00      	nop
 8005d20:	08008b00 	.word	0x08008b00
 8005d24:	08008afc 	.word	0x08008afc
 8005d28:	08008ac8 	.word	0x08008ac8

08005d2c <__locale_charset>:
 8005d2c:	f240 40f0 	movw	r0, #1264	; 0x4f0
 8005d30:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8005d34:	4770      	bx	lr
 8005d36:	bf00      	nop

08005d38 <__locale_mb_cur_max>:
 8005d38:	f240 43f0 	movw	r3, #1264	; 0x4f0
 8005d3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005d40:	6a18      	ldr	r0, [r3, #32]
 8005d42:	4770      	bx	lr

08005d44 <__locale_msgcharset>:
 8005d44:	4800      	ldr	r0, [pc, #0]	; (8005d48 <__locale_msgcharset+0x4>)
 8005d46:	4770      	bx	lr
 8005d48:	20000514 	.word	0x20000514

08005d4c <__locale_cjk_lang>:
 8005d4c:	2000      	movs	r0, #0
 8005d4e:	4770      	bx	lr

08005d50 <_localeconv_r>:
 8005d50:	4800      	ldr	r0, [pc, #0]	; (8005d54 <_localeconv_r+0x4>)
 8005d52:	4770      	bx	lr
 8005d54:	20000534 	.word	0x20000534

08005d58 <setlocale>:
 8005d58:	b410      	push	{r4}
 8005d5a:	f240 03c0 	movw	r3, #192	; 0xc0
 8005d5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005d62:	4604      	mov	r4, r0
 8005d64:	6818      	ldr	r0, [r3, #0]
 8005d66:	460a      	mov	r2, r1
 8005d68:	4621      	mov	r1, r4
 8005d6a:	bc10      	pop	{r4}
 8005d6c:	e7bc      	b.n	8005ce8 <_setlocale_r>
 8005d6e:	bf00      	nop

08005d70 <localeconv>:
 8005d70:	4800      	ldr	r0, [pc, #0]	; (8005d74 <localeconv+0x4>)
 8005d72:	4770      	bx	lr
 8005d74:	20000534 	.word	0x20000534

08005d78 <_malloc_r>:
 8005d78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d7c:	f101 040b 	add.w	r4, r1, #11
 8005d80:	2c16      	cmp	r4, #22
 8005d82:	4605      	mov	r5, r0
 8005d84:	d92a      	bls.n	8005ddc <_malloc_r+0x64>
 8005d86:	f024 0407 	bic.w	r4, r4, #7
 8005d8a:	0fe3      	lsrs	r3, r4, #31
 8005d8c:	428c      	cmp	r4, r1
 8005d8e:	bf2c      	ite	cs
 8005d90:	4619      	movcs	r1, r3
 8005d92:	f043 0101 	orrcc.w	r1, r3, #1
 8005d96:	bb51      	cbnz	r1, 8005dee <_malloc_r+0x76>
 8005d98:	4628      	mov	r0, r5
 8005d9a:	f000 fb23 	bl	80063e4 <__malloc_lock>
 8005d9e:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8005da2:	d22a      	bcs.n	8005dfa <_malloc_r+0x82>
 8005da4:	4e7d      	ldr	r6, [pc, #500]	; (8005f9c <_malloc_r+0x224>)
 8005da6:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
 8005daa:	eb06 03ce 	add.w	r3, r6, lr, lsl #3
 8005dae:	68df      	ldr	r7, [r3, #12]
 8005db0:	429f      	cmp	r7, r3
 8005db2:	f000 8235 	beq.w	8006220 <_malloc_r+0x4a8>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	68fa      	ldr	r2, [r7, #12]
 8005dba:	68b9      	ldr	r1, [r7, #8]
 8005dbc:	f023 0303 	bic.w	r3, r3, #3
 8005dc0:	18fb      	adds	r3, r7, r3
 8005dc2:	60ca      	str	r2, [r1, #12]
 8005dc4:	6858      	ldr	r0, [r3, #4]
 8005dc6:	6091      	str	r1, [r2, #8]
 8005dc8:	f040 0201 	orr.w	r2, r0, #1
 8005dcc:	605a      	str	r2, [r3, #4]
 8005dce:	4628      	mov	r0, r5
 8005dd0:	f000 fb0a 	bl	80063e8 <__malloc_unlock>
 8005dd4:	3708      	adds	r7, #8
 8005dd6:	4638      	mov	r0, r7
 8005dd8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ddc:	2300      	movs	r3, #0
 8005dde:	2410      	movs	r4, #16
 8005de0:	428c      	cmp	r4, r1
 8005de2:	bf2c      	ite	cs
 8005de4:	4619      	movcs	r1, r3
 8005de6:	f043 0101 	orrcc.w	r1, r3, #1
 8005dea:	2900      	cmp	r1, #0
 8005dec:	d0d4      	beq.n	8005d98 <_malloc_r+0x20>
 8005dee:	230c      	movs	r3, #12
 8005df0:	2700      	movs	r7, #0
 8005df2:	602b      	str	r3, [r5, #0]
 8005df4:	4638      	mov	r0, r7
 8005df6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dfa:	ea5f 2e54 	movs.w	lr, r4, lsr #9
 8005dfe:	bf04      	itt	eq
 8005e00:	ea4f 0ed4 	moveq.w	lr, r4, lsr #3
 8005e04:	ea4f 01ce 	moveq.w	r1, lr, lsl #3
 8005e08:	f040 8081 	bne.w	8005f0e <_malloc_r+0x196>
 8005e0c:	4e63      	ldr	r6, [pc, #396]	; (8005f9c <_malloc_r+0x224>)
 8005e0e:	1871      	adds	r1, r6, r1
 8005e10:	68cf      	ldr	r7, [r1, #12]
 8005e12:	42b9      	cmp	r1, r7
 8005e14:	d106      	bne.n	8005e24 <_malloc_r+0xac>
 8005e16:	e00d      	b.n	8005e34 <_malloc_r+0xbc>
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	f280 8169 	bge.w	80060f0 <_malloc_r+0x378>
 8005e1e:	68ff      	ldr	r7, [r7, #12]
 8005e20:	42b9      	cmp	r1, r7
 8005e22:	d007      	beq.n	8005e34 <_malloc_r+0xbc>
 8005e24:	687a      	ldr	r2, [r7, #4]
 8005e26:	f022 0203 	bic.w	r2, r2, #3
 8005e2a:	1b13      	subs	r3, r2, r4
 8005e2c:	2b0f      	cmp	r3, #15
 8005e2e:	ddf3      	ble.n	8005e18 <_malloc_r+0xa0>
 8005e30:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 8005e34:	f10e 0e01 	add.w	lr, lr, #1
 8005e38:	4a58      	ldr	r2, [pc, #352]	; (8005f9c <_malloc_r+0x224>)
 8005e3a:	6937      	ldr	r7, [r6, #16]
 8005e3c:	f102 0c08 	add.w	ip, r2, #8
 8005e40:	4567      	cmp	r7, ip
 8005e42:	bf08      	it	eq
 8005e44:	6853      	ldreq	r3, [r2, #4]
 8005e46:	d023      	beq.n	8005e90 <_malloc_r+0x118>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f023 0303 	bic.w	r3, r3, #3
 8005e4e:	1b19      	subs	r1, r3, r4
 8005e50:	290f      	cmp	r1, #15
 8005e52:	f300 81b4 	bgt.w	80061be <_malloc_r+0x446>
 8005e56:	2900      	cmp	r1, #0
 8005e58:	f8c2 c014 	str.w	ip, [r2, #20]
 8005e5c:	f8c2 c010 	str.w	ip, [r2, #16]
 8005e60:	f280 808f 	bge.w	8005f82 <_malloc_r+0x20a>
 8005e64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e68:	f080 8161 	bcs.w	800612e <_malloc_r+0x3b6>
 8005e6c:	08db      	lsrs	r3, r3, #3
 8005e6e:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8005e72:	f8d2 8004 	ldr.w	r8, [r2, #4]
 8005e76:	6888      	ldr	r0, [r1, #8]
 8005e78:	60f9      	str	r1, [r7, #12]
 8005e7a:	109b      	asrs	r3, r3, #2
 8005e7c:	f04f 0901 	mov.w	r9, #1
 8005e80:	fa09 f303 	lsl.w	r3, r9, r3
 8005e84:	ea43 0308 	orr.w	r3, r3, r8
 8005e88:	60b8      	str	r0, [r7, #8]
 8005e8a:	6053      	str	r3, [r2, #4]
 8005e8c:	608f      	str	r7, [r1, #8]
 8005e8e:	60c7      	str	r7, [r0, #12]
 8005e90:	2001      	movs	r0, #1
 8005e92:	ea4f 02ae 	mov.w	r2, lr, asr #2
 8005e96:	4090      	lsls	r0, r2
 8005e98:	4298      	cmp	r0, r3
 8005e9a:	f200 8081 	bhi.w	8005fa0 <_malloc_r+0x228>
 8005e9e:	4203      	tst	r3, r0
 8005ea0:	d106      	bne.n	8005eb0 <_malloc_r+0x138>
 8005ea2:	f02e 0e03 	bic.w	lr, lr, #3
 8005ea6:	0040      	lsls	r0, r0, #1
 8005ea8:	4203      	tst	r3, r0
 8005eaa:	f10e 0e04 	add.w	lr, lr, #4
 8005eae:	d0fa      	beq.n	8005ea6 <_malloc_r+0x12e>
 8005eb0:	eb06 09ce 	add.w	r9, r6, lr, lsl #3
 8005eb4:	464f      	mov	r7, r9
 8005eb6:	46f0      	mov	r8, lr
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	429f      	cmp	r7, r3
 8005ebc:	d107      	bne.n	8005ece <_malloc_r+0x156>
 8005ebe:	e191      	b.n	80061e4 <_malloc_r+0x46c>
 8005ec0:	2a00      	cmp	r2, #0
 8005ec2:	f280 81b7 	bge.w	8006234 <_malloc_r+0x4bc>
 8005ec6:	68db      	ldr	r3, [r3, #12]
 8005ec8:	429f      	cmp	r7, r3
 8005eca:	f000 818b 	beq.w	80061e4 <_malloc_r+0x46c>
 8005ece:	6859      	ldr	r1, [r3, #4]
 8005ed0:	f021 0103 	bic.w	r1, r1, #3
 8005ed4:	1b0a      	subs	r2, r1, r4
 8005ed6:	2a0f      	cmp	r2, #15
 8005ed8:	ddf2      	ble.n	8005ec0 <_malloc_r+0x148>
 8005eda:	461f      	mov	r7, r3
 8005edc:	1919      	adds	r1, r3, r4
 8005ede:	68d8      	ldr	r0, [r3, #12]
 8005ee0:	f857 ef08 	ldr.w	lr, [r7, #8]!
 8005ee4:	508a      	str	r2, [r1, r2]
 8005ee6:	f044 0401 	orr.w	r4, r4, #1
 8005eea:	f042 0201 	orr.w	r2, r2, #1
 8005eee:	f8ce 000c 	str.w	r0, [lr, #12]
 8005ef2:	f8c0 e008 	str.w	lr, [r0, #8]
 8005ef6:	605c      	str	r4, [r3, #4]
 8005ef8:	6171      	str	r1, [r6, #20]
 8005efa:	6131      	str	r1, [r6, #16]
 8005efc:	f8c1 c00c 	str.w	ip, [r1, #12]
 8005f00:	f8c1 c008 	str.w	ip, [r1, #8]
 8005f04:	604a      	str	r2, [r1, #4]
 8005f06:	4628      	mov	r0, r5
 8005f08:	f000 fa6e 	bl	80063e8 <__malloc_unlock>
 8005f0c:	e763      	b.n	8005dd6 <_malloc_r+0x5e>
 8005f0e:	f1be 0f04 	cmp.w	lr, #4
 8005f12:	bf9e      	ittt	ls
 8005f14:	ea4f 1e94 	movls.w	lr, r4, lsr #6
 8005f18:	f10e 0e38 	addls.w	lr, lr, #56	; 0x38
 8005f1c:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 8005f20:	f67f af74 	bls.w	8005e0c <_malloc_r+0x94>
 8005f24:	f1be 0f14 	cmp.w	lr, #20
 8005f28:	bf9c      	itt	ls
 8005f2a:	f10e 0e5b 	addls.w	lr, lr, #91	; 0x5b
 8005f2e:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 8005f32:	f67f af6b 	bls.w	8005e0c <_malloc_r+0x94>
 8005f36:	f1be 0f54 	cmp.w	lr, #84	; 0x54
 8005f3a:	bf9e      	ittt	ls
 8005f3c:	ea4f 3e14 	movls.w	lr, r4, lsr #12
 8005f40:	f10e 0e6e 	addls.w	lr, lr, #110	; 0x6e
 8005f44:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 8005f48:	f67f af60 	bls.w	8005e0c <_malloc_r+0x94>
 8005f4c:	f5be 7faa 	cmp.w	lr, #340	; 0x154
 8005f50:	bf9e      	ittt	ls
 8005f52:	ea4f 3ed4 	movls.w	lr, r4, lsr #15
 8005f56:	f10e 0e77 	addls.w	lr, lr, #119	; 0x77
 8005f5a:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 8005f5e:	f67f af55 	bls.w	8005e0c <_malloc_r+0x94>
 8005f62:	f240 5354 	movw	r3, #1364	; 0x554
 8005f66:	459e      	cmp	lr, r3
 8005f68:	bf9d      	ittte	ls
 8005f6a:	ea4f 4e94 	movls.w	lr, r4, lsr #18
 8005f6e:	f10e 0e7c 	addls.w	lr, lr, #124	; 0x7c
 8005f72:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 8005f76:	f44f 717c 	movhi.w	r1, #1008	; 0x3f0
 8005f7a:	bf88      	it	hi
 8005f7c:	f04f 0e7e 	movhi.w	lr, #126	; 0x7e
 8005f80:	e744      	b.n	8005e0c <_malloc_r+0x94>
 8005f82:	18fb      	adds	r3, r7, r3
 8005f84:	4628      	mov	r0, r5
 8005f86:	685a      	ldr	r2, [r3, #4]
 8005f88:	f042 0201 	orr.w	r2, r2, #1
 8005f8c:	605a      	str	r2, [r3, #4]
 8005f8e:	3708      	adds	r7, #8
 8005f90:	f000 fa2a 	bl	80063e8 <__malloc_unlock>
 8005f94:	4638      	mov	r0, r7
 8005f96:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f9a:	bf00      	nop
 8005f9c:	2000056c 	.word	0x2000056c
 8005fa0:	68b7      	ldr	r7, [r6, #8]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f023 0803 	bic.w	r8, r3, #3
 8005fa8:	4544      	cmp	r4, r8
 8005faa:	ebc4 0208 	rsb	r2, r4, r8
 8005fae:	bf94      	ite	ls
 8005fb0:	2300      	movls	r3, #0
 8005fb2:	2301      	movhi	r3, #1
 8005fb4:	2a0f      	cmp	r2, #15
 8005fb6:	bfd8      	it	le
 8005fb8:	f043 0301 	orrle.w	r3, r3, #1
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	f000 80a7 	beq.w	8006110 <_malloc_r+0x398>
 8005fc2:	4bb3      	ldr	r3, [pc, #716]	; (8006290 <_malloc_r+0x518>)
 8005fc4:	f8df a2cc 	ldr.w	sl, [pc, #716]	; 8006294 <_malloc_r+0x51c>
 8005fc8:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8005fcc:	f8da 3000 	ldr.w	r3, [sl]
 8005fd0:	3201      	adds	r2, #1
 8005fd2:	4423      	add	r3, r4
 8005fd4:	bf08      	it	eq
 8005fd6:	f103 0b10 	addeq.w	fp, r3, #16
 8005fda:	d006      	beq.n	8005fea <_malloc_r+0x272>
 8005fdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fe0:	330f      	adds	r3, #15
 8005fe2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005fe6:	f023 0b0f 	bic.w	fp, r3, #15
 8005fea:	4628      	mov	r0, r5
 8005fec:	4659      	mov	r1, fp
 8005fee:	f000 fe89 	bl	8006d04 <_sbrk_r>
 8005ff2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005ff6:	4681      	mov	r9, r0
 8005ff8:	f000 8144 	beq.w	8006284 <_malloc_r+0x50c>
 8005ffc:	eb07 0208 	add.w	r2, r7, r8
 8006000:	4282      	cmp	r2, r0
 8006002:	f200 8126 	bhi.w	8006252 <_malloc_r+0x4da>
 8006006:	f8da 3004 	ldr.w	r3, [sl, #4]
 800600a:	454a      	cmp	r2, r9
 800600c:	445b      	add	r3, fp
 800600e:	f8ca 3004 	str.w	r3, [sl, #4]
 8006012:	f000 8141 	beq.w	8006298 <_malloc_r+0x520>
 8006016:	f8d6 1408 	ldr.w	r1, [r6, #1032]	; 0x408
 800601a:	3101      	adds	r1, #1
 800601c:	bf15      	itete	ne
 800601e:	ebc2 0209 	rsbne	r2, r2, r9
 8006022:	4b9b      	ldreq	r3, [pc, #620]	; (8006290 <_malloc_r+0x518>)
 8006024:	189b      	addne	r3, r3, r2
 8006026:	f8c3 9408 	streq.w	r9, [r3, #1032]	; 0x408
 800602a:	bf18      	it	ne
 800602c:	f8ca 3004 	strne.w	r3, [sl, #4]
 8006030:	f019 0307 	ands.w	r3, r9, #7
 8006034:	bf1f      	itttt	ne
 8006036:	f1c3 0208 	rsbne	r2, r3, #8
 800603a:	4491      	addne	r9, r2
 800603c:	f5c3 5380 	rsbne	r3, r3, #4096	; 0x1000
 8006040:	f103 0208 	addne.w	r2, r3, #8
 8006044:	eb09 030b 	add.w	r3, r9, fp
 8006048:	bf08      	it	eq
 800604a:	f44f 5280 	moveq.w	r2, #4096	; 0x1000
 800604e:	051b      	lsls	r3, r3, #20
 8006050:	0d1b      	lsrs	r3, r3, #20
 8006052:	ebc3 0b02 	rsb	fp, r3, r2
 8006056:	4628      	mov	r0, r5
 8006058:	4659      	mov	r1, fp
 800605a:	f000 fe53 	bl	8006d04 <_sbrk_r>
 800605e:	1c43      	adds	r3, r0, #1
 8006060:	f000 8126 	beq.w	80062b0 <_malloc_r+0x538>
 8006064:	ebc9 0200 	rsb	r2, r9, r0
 8006068:	445a      	add	r2, fp
 800606a:	f042 0201 	orr.w	r2, r2, #1
 800606e:	f8da 3004 	ldr.w	r3, [sl, #4]
 8006072:	f8c6 9008 	str.w	r9, [r6, #8]
 8006076:	445b      	add	r3, fp
 8006078:	42b7      	cmp	r7, r6
 800607a:	f8ca 3004 	str.w	r3, [sl, #4]
 800607e:	f8c9 2004 	str.w	r2, [r9, #4]
 8006082:	d015      	beq.n	80060b0 <_malloc_r+0x338>
 8006084:	f1b8 0f0f 	cmp.w	r8, #15
 8006088:	f240 80f6 	bls.w	8006278 <_malloc_r+0x500>
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f1a8 020c 	sub.w	r2, r8, #12
 8006092:	f022 0207 	bic.w	r2, r2, #7
 8006096:	18b9      	adds	r1, r7, r2
 8006098:	f000 0e01 	and.w	lr, r0, #1
 800609c:	ea42 0e0e 	orr.w	lr, r2, lr
 80060a0:	2005      	movs	r0, #5
 80060a2:	2a0f      	cmp	r2, #15
 80060a4:	f8c7 e004 	str.w	lr, [r7, #4]
 80060a8:	6048      	str	r0, [r1, #4]
 80060aa:	6088      	str	r0, [r1, #8]
 80060ac:	f200 8104 	bhi.w	80062b8 <_malloc_r+0x540>
 80060b0:	f8da 202c 	ldr.w	r2, [sl, #44]	; 0x2c
 80060b4:	68b7      	ldr	r7, [r6, #8]
 80060b6:	4293      	cmp	r3, r2
 80060b8:	bf84      	itt	hi
 80060ba:	4a76      	ldrhi	r2, [pc, #472]	; (8006294 <_malloc_r+0x51c>)
 80060bc:	62d3      	strhi	r3, [r2, #44]	; 0x2c
 80060be:	f8da 2030 	ldr.w	r2, [sl, #48]	; 0x30
 80060c2:	4293      	cmp	r3, r2
 80060c4:	bf84      	itt	hi
 80060c6:	4a73      	ldrhi	r2, [pc, #460]	; (8006294 <_malloc_r+0x51c>)
 80060c8:	6313      	strhi	r3, [r2, #48]	; 0x30
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f023 0303 	bic.w	r3, r3, #3
 80060d0:	429c      	cmp	r4, r3
 80060d2:	ebc4 0203 	rsb	r2, r4, r3
 80060d6:	bf94      	ite	ls
 80060d8:	2300      	movls	r3, #0
 80060da:	2301      	movhi	r3, #1
 80060dc:	2a0f      	cmp	r2, #15
 80060de:	bfd8      	it	le
 80060e0:	f043 0301 	orrle.w	r3, r3, #1
 80060e4:	b1a3      	cbz	r3, 8006110 <_malloc_r+0x398>
 80060e6:	4628      	mov	r0, r5
 80060e8:	f000 f97e 	bl	80063e8 <__malloc_unlock>
 80060ec:	2700      	movs	r7, #0
 80060ee:	e672      	b.n	8005dd6 <_malloc_r+0x5e>
 80060f0:	18ba      	adds	r2, r7, r2
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	6850      	ldr	r0, [r2, #4]
 80060f6:	68b9      	ldr	r1, [r7, #8]
 80060f8:	f040 0001 	orr.w	r0, r0, #1
 80060fc:	6050      	str	r0, [r2, #4]
 80060fe:	60cb      	str	r3, [r1, #12]
 8006100:	4628      	mov	r0, r5
 8006102:	6099      	str	r1, [r3, #8]
 8006104:	3708      	adds	r7, #8
 8006106:	f000 f96f 	bl	80063e8 <__malloc_unlock>
 800610a:	4638      	mov	r0, r7
 800610c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006110:	193b      	adds	r3, r7, r4
 8006112:	f042 0201 	orr.w	r2, r2, #1
 8006116:	f044 0401 	orr.w	r4, r4, #1
 800611a:	607c      	str	r4, [r7, #4]
 800611c:	4628      	mov	r0, r5
 800611e:	605a      	str	r2, [r3, #4]
 8006120:	3708      	adds	r7, #8
 8006122:	60b3      	str	r3, [r6, #8]
 8006124:	f000 f960 	bl	80063e8 <__malloc_unlock>
 8006128:	4638      	mov	r0, r7
 800612a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800612e:	0a5a      	lsrs	r2, r3, #9
 8006130:	2a04      	cmp	r2, #4
 8006132:	bf9e      	ittt	ls
 8006134:	ea4f 1893 	movls.w	r8, r3, lsr #6
 8006138:	f108 0838 	addls.w	r8, r8, #56	; 0x38
 800613c:	ea4f 00c8 	movls.w	r0, r8, lsl #3
 8006140:	d928      	bls.n	8006194 <_malloc_r+0x41c>
 8006142:	2a14      	cmp	r2, #20
 8006144:	bf9c      	itt	ls
 8006146:	f102 085b 	addls.w	r8, r2, #91	; 0x5b
 800614a:	ea4f 00c8 	movls.w	r0, r8, lsl #3
 800614e:	d921      	bls.n	8006194 <_malloc_r+0x41c>
 8006150:	2a54      	cmp	r2, #84	; 0x54
 8006152:	bf9e      	ittt	ls
 8006154:	ea4f 3813 	movls.w	r8, r3, lsr #12
 8006158:	f108 086e 	addls.w	r8, r8, #110	; 0x6e
 800615c:	ea4f 00c8 	movls.w	r0, r8, lsl #3
 8006160:	d918      	bls.n	8006194 <_malloc_r+0x41c>
 8006162:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8006166:	bf9e      	ittt	ls
 8006168:	ea4f 38d3 	movls.w	r8, r3, lsr #15
 800616c:	f108 0877 	addls.w	r8, r8, #119	; 0x77
 8006170:	ea4f 00c8 	movls.w	r0, r8, lsl #3
 8006174:	d90e      	bls.n	8006194 <_malloc_r+0x41c>
 8006176:	f240 5154 	movw	r1, #1364	; 0x554
 800617a:	428a      	cmp	r2, r1
 800617c:	bf9d      	ittte	ls
 800617e:	ea4f 4893 	movls.w	r8, r3, lsr #18
 8006182:	f108 087c 	addls.w	r8, r8, #124	; 0x7c
 8006186:	ea4f 00c8 	movls.w	r0, r8, lsl #3
 800618a:	f44f 707c 	movhi.w	r0, #1008	; 0x3f0
 800618e:	bf88      	it	hi
 8006190:	f04f 087e 	movhi.w	r8, #126	; 0x7e
 8006194:	1830      	adds	r0, r6, r0
 8006196:	493e      	ldr	r1, [pc, #248]	; (8006290 <_malloc_r+0x518>)
 8006198:	6882      	ldr	r2, [r0, #8]
 800619a:	4282      	cmp	r2, r0
 800619c:	d103      	bne.n	80061a6 <_malloc_r+0x42e>
 800619e:	e061      	b.n	8006264 <_malloc_r+0x4ec>
 80061a0:	6892      	ldr	r2, [r2, #8]
 80061a2:	4290      	cmp	r0, r2
 80061a4:	d004      	beq.n	80061b0 <_malloc_r+0x438>
 80061a6:	6851      	ldr	r1, [r2, #4]
 80061a8:	f021 0103 	bic.w	r1, r1, #3
 80061ac:	428b      	cmp	r3, r1
 80061ae:	d3f7      	bcc.n	80061a0 <_malloc_r+0x428>
 80061b0:	68d1      	ldr	r1, [r2, #12]
 80061b2:	6873      	ldr	r3, [r6, #4]
 80061b4:	60f9      	str	r1, [r7, #12]
 80061b6:	60ba      	str	r2, [r7, #8]
 80061b8:	60d7      	str	r7, [r2, #12]
 80061ba:	608f      	str	r7, [r1, #8]
 80061bc:	e668      	b.n	8005e90 <_malloc_r+0x118>
 80061be:	193b      	adds	r3, r7, r4
 80061c0:	f041 0001 	orr.w	r0, r1, #1
 80061c4:	f044 0401 	orr.w	r4, r4, #1
 80061c8:	607c      	str	r4, [r7, #4]
 80061ca:	6153      	str	r3, [r2, #20]
 80061cc:	6113      	str	r3, [r2, #16]
 80061ce:	6058      	str	r0, [r3, #4]
 80061d0:	f8c3 c00c 	str.w	ip, [r3, #12]
 80061d4:	f8c3 c008 	str.w	ip, [r3, #8]
 80061d8:	5059      	str	r1, [r3, r1]
 80061da:	4628      	mov	r0, r5
 80061dc:	f000 f904 	bl	80063e8 <__malloc_unlock>
 80061e0:	3708      	adds	r7, #8
 80061e2:	e5f8      	b.n	8005dd6 <_malloc_r+0x5e>
 80061e4:	f108 0801 	add.w	r8, r8, #1
 80061e8:	3708      	adds	r7, #8
 80061ea:	f018 0f03 	tst.w	r8, #3
 80061ee:	f47f ae63 	bne.w	8005eb8 <_malloc_r+0x140>
 80061f2:	464b      	mov	r3, r9
 80061f4:	f01e 0f03 	tst.w	lr, #3
 80061f8:	f1a3 0208 	sub.w	r2, r3, #8
 80061fc:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 8006200:	d062      	beq.n	80062c8 <_malloc_r+0x550>
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4293      	cmp	r3, r2
 8006206:	d0f5      	beq.n	80061f4 <_malloc_r+0x47c>
 8006208:	6873      	ldr	r3, [r6, #4]
 800620a:	0040      	lsls	r0, r0, #1
 800620c:	4298      	cmp	r0, r3
 800620e:	f63f aec7 	bhi.w	8005fa0 <_malloc_r+0x228>
 8006212:	2800      	cmp	r0, #0
 8006214:	f43f aec4 	beq.w	8005fa0 <_malloc_r+0x228>
 8006218:	4218      	tst	r0, r3
 800621a:	d05a      	beq.n	80062d2 <_malloc_r+0x55a>
 800621c:	46c6      	mov	lr, r8
 800621e:	e647      	b.n	8005eb0 <_malloc_r+0x138>
 8006220:	f107 0308 	add.w	r3, r7, #8
 8006224:	697f      	ldr	r7, [r7, #20]
 8006226:	42bb      	cmp	r3, r7
 8006228:	bf08      	it	eq
 800622a:	f10e 0e02 	addeq.w	lr, lr, #2
 800622e:	f43f ae03 	beq.w	8005e38 <_malloc_r+0xc0>
 8006232:	e5c0      	b.n	8005db6 <_malloc_r+0x3e>
 8006234:	1859      	adds	r1, r3, r1
 8006236:	461f      	mov	r7, r3
 8006238:	6848      	ldr	r0, [r1, #4]
 800623a:	68db      	ldr	r3, [r3, #12]
 800623c:	f857 2f08 	ldr.w	r2, [r7, #8]!
 8006240:	f040 0001 	orr.w	r0, r0, #1
 8006244:	6048      	str	r0, [r1, #4]
 8006246:	60d3      	str	r3, [r2, #12]
 8006248:	609a      	str	r2, [r3, #8]
 800624a:	4628      	mov	r0, r5
 800624c:	f000 f8cc 	bl	80063e8 <__malloc_unlock>
 8006250:	e5c1      	b.n	8005dd6 <_malloc_r+0x5e>
 8006252:	42b7      	cmp	r7, r6
 8006254:	f43f aed7 	beq.w	8006006 <_malloc_r+0x28e>
 8006258:	4b0d      	ldr	r3, [pc, #52]	; (8006290 <_malloc_r+0x518>)
 800625a:	689f      	ldr	r7, [r3, #8]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f023 0303 	bic.w	r3, r3, #3
 8006262:	e735      	b.n	80060d0 <_malloc_r+0x358>
 8006264:	684b      	ldr	r3, [r1, #4]
 8006266:	ea4f 08a8 	mov.w	r8, r8, asr #2
 800626a:	2001      	movs	r0, #1
 800626c:	fa00 f008 	lsl.w	r0, r0, r8
 8006270:	4303      	orrs	r3, r0
 8006272:	604b      	str	r3, [r1, #4]
 8006274:	4611      	mov	r1, r2
 8006276:	e79d      	b.n	80061b4 <_malloc_r+0x43c>
 8006278:	2301      	movs	r3, #1
 800627a:	f8c9 3004 	str.w	r3, [r9, #4]
 800627e:	464f      	mov	r7, r9
 8006280:	2300      	movs	r3, #0
 8006282:	e725      	b.n	80060d0 <_malloc_r+0x358>
 8006284:	68b7      	ldr	r7, [r6, #8]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f023 0303 	bic.w	r3, r3, #3
 800628c:	e720      	b.n	80060d0 <_malloc_r+0x358>
 800628e:	bf00      	nop
 8006290:	2000056c 	.word	0x2000056c
 8006294:	20000994 	.word	0x20000994
 8006298:	0511      	lsls	r1, r2, #20
 800629a:	0d09      	lsrs	r1, r1, #20
 800629c:	2900      	cmp	r1, #0
 800629e:	f47f aeba 	bne.w	8006016 <_malloc_r+0x29e>
 80062a2:	68b2      	ldr	r2, [r6, #8]
 80062a4:	eb0b 0108 	add.w	r1, fp, r8
 80062a8:	f041 0101 	orr.w	r1, r1, #1
 80062ac:	6051      	str	r1, [r2, #4]
 80062ae:	e6ff      	b.n	80060b0 <_malloc_r+0x338>
 80062b0:	2201      	movs	r2, #1
 80062b2:	f04f 0b00 	mov.w	fp, #0
 80062b6:	e6da      	b.n	800606e <_malloc_r+0x2f6>
 80062b8:	4628      	mov	r0, r5
 80062ba:	f107 0108 	add.w	r1, r7, #8
 80062be:	f7ff fc4f 	bl	8005b60 <_free_r>
 80062c2:	4b06      	ldr	r3, [pc, #24]	; (80062dc <_malloc_r+0x564>)
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	e6f3      	b.n	80060b0 <_malloc_r+0x338>
 80062c8:	6873      	ldr	r3, [r6, #4]
 80062ca:	ea23 0300 	bic.w	r3, r3, r0
 80062ce:	6073      	str	r3, [r6, #4]
 80062d0:	e79b      	b.n	800620a <_malloc_r+0x492>
 80062d2:	0040      	lsls	r0, r0, #1
 80062d4:	f108 0804 	add.w	r8, r8, #4
 80062d8:	e79e      	b.n	8006218 <_malloc_r+0x4a0>
 80062da:	bf00      	nop
 80062dc:	20000994 	.word	0x20000994

080062e0 <memchr>:
 80062e0:	0783      	lsls	r3, r0, #30
 80062e2:	b470      	push	{r4, r5, r6}
 80062e4:	b2c9      	uxtb	r1, r1
 80062e6:	d00f      	beq.n	8006308 <memchr+0x28>
 80062e8:	2a00      	cmp	r2, #0
 80062ea:	d033      	beq.n	8006354 <memchr+0x74>
 80062ec:	7803      	ldrb	r3, [r0, #0]
 80062ee:	3a01      	subs	r2, #1
 80062f0:	428b      	cmp	r3, r1
 80062f2:	d106      	bne.n	8006302 <memchr+0x22>
 80062f4:	e01d      	b.n	8006332 <memchr+0x52>
 80062f6:	2a00      	cmp	r2, #0
 80062f8:	d02c      	beq.n	8006354 <memchr+0x74>
 80062fa:	7803      	ldrb	r3, [r0, #0]
 80062fc:	3a01      	subs	r2, #1
 80062fe:	428b      	cmp	r3, r1
 8006300:	d017      	beq.n	8006332 <memchr+0x52>
 8006302:	3001      	adds	r0, #1
 8006304:	0783      	lsls	r3, r0, #30
 8006306:	d1f6      	bne.n	80062f6 <memchr+0x16>
 8006308:	2a03      	cmp	r2, #3
 800630a:	bf84      	itt	hi
 800630c:	ea41 2601 	orrhi.w	r6, r1, r1, lsl #8
 8006310:	ea46 4606 	orrhi.w	r6, r6, r6, lsl #16
 8006314:	d80f      	bhi.n	8006336 <memchr+0x56>
 8006316:	b1ea      	cbz	r2, 8006354 <memchr+0x74>
 8006318:	7803      	ldrb	r3, [r0, #0]
 800631a:	3a01      	subs	r2, #1
 800631c:	428b      	cmp	r3, r1
 800631e:	4402      	add	r2, r0
 8006320:	d104      	bne.n	800632c <memchr+0x4c>
 8006322:	e006      	b.n	8006332 <memchr+0x52>
 8006324:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8006328:	428b      	cmp	r3, r1
 800632a:	d002      	beq.n	8006332 <memchr+0x52>
 800632c:	4290      	cmp	r0, r2
 800632e:	d1f9      	bne.n	8006324 <memchr+0x44>
 8006330:	2000      	movs	r0, #0
 8006332:	bc70      	pop	{r4, r5, r6}
 8006334:	4770      	bx	lr
 8006336:	4604      	mov	r4, r0
 8006338:	3004      	adds	r0, #4
 800633a:	6823      	ldr	r3, [r4, #0]
 800633c:	4073      	eors	r3, r6
 800633e:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
 8006342:	ea25 0303 	bic.w	r3, r5, r3
 8006346:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 800634a:	d105      	bne.n	8006358 <memchr+0x78>
 800634c:	3a04      	subs	r2, #4
 800634e:	2a03      	cmp	r2, #3
 8006350:	d8f1      	bhi.n	8006336 <memchr+0x56>
 8006352:	e7e0      	b.n	8006316 <memchr+0x36>
 8006354:	4610      	mov	r0, r2
 8006356:	e7ec      	b.n	8006332 <memchr+0x52>
 8006358:	4620      	mov	r0, r4
 800635a:	e7dc      	b.n	8006316 <memchr+0x36>

0800635c <memcpy>:
 800635c:	2a0f      	cmp	r2, #15
 800635e:	b4f0      	push	{r4, r5, r6, r7}
 8006360:	bf98      	it	ls
 8006362:	4603      	movls	r3, r0
 8006364:	d931      	bls.n	80063ca <memcpy+0x6e>
 8006366:	ea41 0300 	orr.w	r3, r1, r0
 800636a:	079b      	lsls	r3, r3, #30
 800636c:	d137      	bne.n	80063de <memcpy+0x82>
 800636e:	460c      	mov	r4, r1
 8006370:	4603      	mov	r3, r0
 8006372:	4615      	mov	r5, r2
 8006374:	6826      	ldr	r6, [r4, #0]
 8006376:	601e      	str	r6, [r3, #0]
 8006378:	6866      	ldr	r6, [r4, #4]
 800637a:	605e      	str	r6, [r3, #4]
 800637c:	68a6      	ldr	r6, [r4, #8]
 800637e:	609e      	str	r6, [r3, #8]
 8006380:	68e6      	ldr	r6, [r4, #12]
 8006382:	3d10      	subs	r5, #16
 8006384:	60de      	str	r6, [r3, #12]
 8006386:	3410      	adds	r4, #16
 8006388:	3310      	adds	r3, #16
 800638a:	2d0f      	cmp	r5, #15
 800638c:	d8f2      	bhi.n	8006374 <memcpy+0x18>
 800638e:	f1a2 0410 	sub.w	r4, r2, #16
 8006392:	f024 040f 	bic.w	r4, r4, #15
 8006396:	f002 020f 	and.w	r2, r2, #15
 800639a:	3410      	adds	r4, #16
 800639c:	2a03      	cmp	r2, #3
 800639e:	eb00 0304 	add.w	r3, r0, r4
 80063a2:	4421      	add	r1, r4
 80063a4:	d911      	bls.n	80063ca <memcpy+0x6e>
 80063a6:	1f0e      	subs	r6, r1, #4
 80063a8:	461d      	mov	r5, r3
 80063aa:	4614      	mov	r4, r2
 80063ac:	f856 7f04 	ldr.w	r7, [r6, #4]!
 80063b0:	3c04      	subs	r4, #4
 80063b2:	2c03      	cmp	r4, #3
 80063b4:	f845 7b04 	str.w	r7, [r5], #4
 80063b8:	d8f8      	bhi.n	80063ac <memcpy+0x50>
 80063ba:	1f14      	subs	r4, r2, #4
 80063bc:	f024 0403 	bic.w	r4, r4, #3
 80063c0:	3404      	adds	r4, #4
 80063c2:	f002 0203 	and.w	r2, r2, #3
 80063c6:	1909      	adds	r1, r1, r4
 80063c8:	191b      	adds	r3, r3, r4
 80063ca:	b132      	cbz	r2, 80063da <memcpy+0x7e>
 80063cc:	3901      	subs	r1, #1
 80063ce:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80063d2:	3a01      	subs	r2, #1
 80063d4:	f803 4b01 	strb.w	r4, [r3], #1
 80063d8:	d1f9      	bne.n	80063ce <memcpy+0x72>
 80063da:	bcf0      	pop	{r4, r5, r6, r7}
 80063dc:	4770      	bx	lr
 80063de:	4603      	mov	r3, r0
 80063e0:	e7f4      	b.n	80063cc <memcpy+0x70>
 80063e2:	bf00      	nop

080063e4 <__malloc_lock>:
 80063e4:	4770      	bx	lr
 80063e6:	bf00      	nop

080063e8 <__malloc_unlock>:
 80063e8:	4770      	bx	lr
 80063ea:	bf00      	nop

080063ec <_Balloc>:
 80063ec:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80063ee:	b570      	push	{r4, r5, r6, lr}
 80063f0:	4605      	mov	r5, r0
 80063f2:	460c      	mov	r4, r1
 80063f4:	b14b      	cbz	r3, 800640a <_Balloc+0x1e>
 80063f6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80063fa:	b178      	cbz	r0, 800641c <_Balloc+0x30>
 80063fc:	6802      	ldr	r2, [r0, #0]
 80063fe:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8006402:	2300      	movs	r3, #0
 8006404:	6103      	str	r3, [r0, #16]
 8006406:	60c3      	str	r3, [r0, #12]
 8006408:	bd70      	pop	{r4, r5, r6, pc}
 800640a:	2104      	movs	r1, #4
 800640c:	2221      	movs	r2, #33	; 0x21
 800640e:	f001 fa7f 	bl	8007910 <_calloc_r>
 8006412:	4603      	mov	r3, r0
 8006414:	64e8      	str	r0, [r5, #76]	; 0x4c
 8006416:	2800      	cmp	r0, #0
 8006418:	d1ed      	bne.n	80063f6 <_Balloc+0xa>
 800641a:	bd70      	pop	{r4, r5, r6, pc}
 800641c:	2101      	movs	r1, #1
 800641e:	fa11 f604 	lsls.w	r6, r1, r4
 8006422:	1d72      	adds	r2, r6, #5
 8006424:	4628      	mov	r0, r5
 8006426:	0092      	lsls	r2, r2, #2
 8006428:	f001 fa72 	bl	8007910 <_calloc_r>
 800642c:	2800      	cmp	r0, #0
 800642e:	d0f4      	beq.n	800641a <_Balloc+0x2e>
 8006430:	6044      	str	r4, [r0, #4]
 8006432:	6086      	str	r6, [r0, #8]
 8006434:	e7e5      	b.n	8006402 <_Balloc+0x16>
 8006436:	bf00      	nop

08006438 <_Bfree>:
 8006438:	b131      	cbz	r1, 8006448 <_Bfree+0x10>
 800643a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800643c:	684a      	ldr	r2, [r1, #4]
 800643e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8006442:	6008      	str	r0, [r1, #0]
 8006444:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006448:	4770      	bx	lr
 800644a:	bf00      	nop

0800644c <__multadd>:
 800644c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800644e:	460d      	mov	r5, r1
 8006450:	4606      	mov	r6, r0
 8006452:	690c      	ldr	r4, [r1, #16]
 8006454:	f101 0014 	add.w	r0, r1, #20
 8006458:	b083      	sub	sp, #12
 800645a:	2100      	movs	r1, #0
 800645c:	6807      	ldr	r7, [r0, #0]
 800645e:	fa1f fc87 	uxth.w	ip, r7
 8006462:	0c3f      	lsrs	r7, r7, #16
 8006464:	fb02 330c 	mla	r3, r2, ip, r3
 8006468:	fb02 f707 	mul.w	r7, r2, r7
 800646c:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006470:	b29b      	uxth	r3, r3
 8006472:	eb03 4307 	add.w	r3, r3, r7, lsl #16
 8006476:	3101      	adds	r1, #1
 8006478:	f840 3b04 	str.w	r3, [r0], #4
 800647c:	0c3b      	lsrs	r3, r7, #16
 800647e:	428c      	cmp	r4, r1
 8006480:	dcec      	bgt.n	800645c <__multadd+0x10>
 8006482:	b13b      	cbz	r3, 8006494 <__multadd+0x48>
 8006484:	68aa      	ldr	r2, [r5, #8]
 8006486:	4294      	cmp	r4, r2
 8006488:	da07      	bge.n	800649a <__multadd+0x4e>
 800648a:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 800648e:	3401      	adds	r4, #1
 8006490:	6153      	str	r3, [r2, #20]
 8006492:	612c      	str	r4, [r5, #16]
 8006494:	4628      	mov	r0, r5
 8006496:	b003      	add	sp, #12
 8006498:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800649a:	6869      	ldr	r1, [r5, #4]
 800649c:	9301      	str	r3, [sp, #4]
 800649e:	3101      	adds	r1, #1
 80064a0:	4630      	mov	r0, r6
 80064a2:	f7ff ffa3 	bl	80063ec <_Balloc>
 80064a6:	692a      	ldr	r2, [r5, #16]
 80064a8:	3202      	adds	r2, #2
 80064aa:	f105 010c 	add.w	r1, r5, #12
 80064ae:	4607      	mov	r7, r0
 80064b0:	0092      	lsls	r2, r2, #2
 80064b2:	f100 000c 	add.w	r0, r0, #12
 80064b6:	f7ff ff51 	bl	800635c <memcpy>
 80064ba:	6869      	ldr	r1, [r5, #4]
 80064bc:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 80064be:	9b01      	ldr	r3, [sp, #4]
 80064c0:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 80064c4:	6028      	str	r0, [r5, #0]
 80064c6:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 80064ca:	463d      	mov	r5, r7
 80064cc:	e7dd      	b.n	800648a <__multadd+0x3e>
 80064ce:	bf00      	nop

080064d0 <__s2b>:
 80064d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064d4:	461e      	mov	r6, r3
 80064d6:	f648 6339 	movw	r3, #36409	; 0x8e39
 80064da:	f106 0408 	add.w	r4, r6, #8
 80064de:	f6c3 03e3 	movt	r3, #14563	; 0x38e3
 80064e2:	fb83 5304 	smull	r5, r3, r3, r4
 80064e6:	17e4      	asrs	r4, r4, #31
 80064e8:	ebc4 0363 	rsb	r3, r4, r3, asr #1
 80064ec:	460f      	mov	r7, r1
 80064ee:	2100      	movs	r1, #0
 80064f0:	2b01      	cmp	r3, #1
 80064f2:	4604      	mov	r4, r0
 80064f4:	4690      	mov	r8, r2
 80064f6:	dd05      	ble.n	8006504 <__s2b+0x34>
 80064f8:	2201      	movs	r2, #1
 80064fa:	2100      	movs	r1, #0
 80064fc:	0052      	lsls	r2, r2, #1
 80064fe:	3101      	adds	r1, #1
 8006500:	4293      	cmp	r3, r2
 8006502:	dcfb      	bgt.n	80064fc <__s2b+0x2c>
 8006504:	4620      	mov	r0, r4
 8006506:	f7ff ff71 	bl	80063ec <_Balloc>
 800650a:	9b08      	ldr	r3, [sp, #32]
 800650c:	6143      	str	r3, [r0, #20]
 800650e:	2301      	movs	r3, #1
 8006510:	f1b8 0f09 	cmp.w	r8, #9
 8006514:	4601      	mov	r1, r0
 8006516:	6103      	str	r3, [r0, #16]
 8006518:	dd23      	ble.n	8006562 <__s2b+0x92>
 800651a:	f107 0909 	add.w	r9, r7, #9
 800651e:	464d      	mov	r5, r9
 8006520:	4447      	add	r7, r8
 8006522:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006526:	220a      	movs	r2, #10
 8006528:	3b30      	subs	r3, #48	; 0x30
 800652a:	4620      	mov	r0, r4
 800652c:	f7ff ff8e 	bl	800644c <__multadd>
 8006530:	42bd      	cmp	r5, r7
 8006532:	4601      	mov	r1, r0
 8006534:	d1f5      	bne.n	8006522 <__s2b+0x52>
 8006536:	eb09 0708 	add.w	r7, r9, r8
 800653a:	3f08      	subs	r7, #8
 800653c:	4546      	cmp	r6, r8
 800653e:	dd0d      	ble.n	800655c <__s2b+0x8c>
 8006540:	ebc8 0707 	rsb	r7, r8, r7
 8006544:	f817 3008 	ldrb.w	r3, [r7, r8]
 8006548:	220a      	movs	r2, #10
 800654a:	3b30      	subs	r3, #48	; 0x30
 800654c:	4620      	mov	r0, r4
 800654e:	f7ff ff7d 	bl	800644c <__multadd>
 8006552:	f108 0801 	add.w	r8, r8, #1
 8006556:	45b0      	cmp	r8, r6
 8006558:	4601      	mov	r1, r0
 800655a:	d1f3      	bne.n	8006544 <__s2b+0x74>
 800655c:	4608      	mov	r0, r1
 800655e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006562:	370a      	adds	r7, #10
 8006564:	f04f 0809 	mov.w	r8, #9
 8006568:	e7e8      	b.n	800653c <__s2b+0x6c>
 800656a:	bf00      	nop

0800656c <__hi0bits>:
 800656c:	4603      	mov	r3, r0
 800656e:	2000      	movs	r0, #0
 8006570:	0c1a      	lsrs	r2, r3, #16
 8006572:	d101      	bne.n	8006578 <__hi0bits+0xc>
 8006574:	041b      	lsls	r3, r3, #16
 8006576:	2010      	movs	r0, #16
 8006578:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800657c:	d101      	bne.n	8006582 <__hi0bits+0x16>
 800657e:	3008      	adds	r0, #8
 8006580:	021b      	lsls	r3, r3, #8
 8006582:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006586:	d101      	bne.n	800658c <__hi0bits+0x20>
 8006588:	3004      	adds	r0, #4
 800658a:	011b      	lsls	r3, r3, #4
 800658c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006590:	d101      	bne.n	8006596 <__hi0bits+0x2a>
 8006592:	3002      	adds	r0, #2
 8006594:	009b      	lsls	r3, r3, #2
 8006596:	2b00      	cmp	r3, #0
 8006598:	db02      	blt.n	80065a0 <__hi0bits+0x34>
 800659a:	005b      	lsls	r3, r3, #1
 800659c:	d401      	bmi.n	80065a2 <__hi0bits+0x36>
 800659e:	2020      	movs	r0, #32
 80065a0:	4770      	bx	lr
 80065a2:	3001      	adds	r0, #1
 80065a4:	4770      	bx	lr
 80065a6:	bf00      	nop

080065a8 <__lo0bits>:
 80065a8:	6803      	ldr	r3, [r0, #0]
 80065aa:	4602      	mov	r2, r0
 80065ac:	f013 0007 	ands.w	r0, r3, #7
 80065b0:	d007      	beq.n	80065c2 <__lo0bits+0x1a>
 80065b2:	07d9      	lsls	r1, r3, #31
 80065b4:	d41f      	bmi.n	80065f6 <__lo0bits+0x4e>
 80065b6:	0798      	lsls	r0, r3, #30
 80065b8:	d41f      	bmi.n	80065fa <__lo0bits+0x52>
 80065ba:	089b      	lsrs	r3, r3, #2
 80065bc:	6013      	str	r3, [r2, #0]
 80065be:	2002      	movs	r0, #2
 80065c0:	4770      	bx	lr
 80065c2:	b299      	uxth	r1, r3
 80065c4:	b909      	cbnz	r1, 80065ca <__lo0bits+0x22>
 80065c6:	0c1b      	lsrs	r3, r3, #16
 80065c8:	2010      	movs	r0, #16
 80065ca:	f013 0fff 	tst.w	r3, #255	; 0xff
 80065ce:	d101      	bne.n	80065d4 <__lo0bits+0x2c>
 80065d0:	3008      	adds	r0, #8
 80065d2:	0a1b      	lsrs	r3, r3, #8
 80065d4:	0719      	lsls	r1, r3, #28
 80065d6:	d101      	bne.n	80065dc <__lo0bits+0x34>
 80065d8:	3004      	adds	r0, #4
 80065da:	091b      	lsrs	r3, r3, #4
 80065dc:	0799      	lsls	r1, r3, #30
 80065de:	d101      	bne.n	80065e4 <__lo0bits+0x3c>
 80065e0:	3002      	adds	r0, #2
 80065e2:	089b      	lsrs	r3, r3, #2
 80065e4:	07d9      	lsls	r1, r3, #31
 80065e6:	d404      	bmi.n	80065f2 <__lo0bits+0x4a>
 80065e8:	085b      	lsrs	r3, r3, #1
 80065ea:	d101      	bne.n	80065f0 <__lo0bits+0x48>
 80065ec:	2020      	movs	r0, #32
 80065ee:	4770      	bx	lr
 80065f0:	3001      	adds	r0, #1
 80065f2:	6013      	str	r3, [r2, #0]
 80065f4:	4770      	bx	lr
 80065f6:	2000      	movs	r0, #0
 80065f8:	4770      	bx	lr
 80065fa:	085b      	lsrs	r3, r3, #1
 80065fc:	6013      	str	r3, [r2, #0]
 80065fe:	2001      	movs	r0, #1
 8006600:	4770      	bx	lr
 8006602:	bf00      	nop

08006604 <__i2b>:
 8006604:	b510      	push	{r4, lr}
 8006606:	460c      	mov	r4, r1
 8006608:	2101      	movs	r1, #1
 800660a:	f7ff feef 	bl	80063ec <_Balloc>
 800660e:	2201      	movs	r2, #1
 8006610:	6144      	str	r4, [r0, #20]
 8006612:	6102      	str	r2, [r0, #16]
 8006614:	bd10      	pop	{r4, pc}
 8006616:	bf00      	nop

08006618 <__multiply>:
 8006618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800661c:	690f      	ldr	r7, [r1, #16]
 800661e:	6916      	ldr	r6, [r2, #16]
 8006620:	42b7      	cmp	r7, r6
 8006622:	b085      	sub	sp, #20
 8006624:	460d      	mov	r5, r1
 8006626:	4692      	mov	sl, r2
 8006628:	da04      	bge.n	8006634 <__multiply+0x1c>
 800662a:	463a      	mov	r2, r7
 800662c:	4655      	mov	r5, sl
 800662e:	4637      	mov	r7, r6
 8006630:	468a      	mov	sl, r1
 8006632:	4616      	mov	r6, r2
 8006634:	68ab      	ldr	r3, [r5, #8]
 8006636:	6869      	ldr	r1, [r5, #4]
 8006638:	19bc      	adds	r4, r7, r6
 800663a:	429c      	cmp	r4, r3
 800663c:	bfc8      	it	gt
 800663e:	3101      	addgt	r1, #1
 8006640:	f7ff fed4 	bl	80063ec <_Balloc>
 8006644:	1d21      	adds	r1, r4, #4
 8006646:	eb00 0b81 	add.w	fp, r0, r1, lsl #2
 800664a:	f100 0914 	add.w	r9, r0, #20
 800664e:	f10b 0b04 	add.w	fp, fp, #4
 8006652:	45d9      	cmp	r9, fp
 8006654:	9000      	str	r0, [sp, #0]
 8006656:	9101      	str	r1, [sp, #4]
 8006658:	d205      	bcs.n	8006666 <__multiply+0x4e>
 800665a:	464b      	mov	r3, r9
 800665c:	2200      	movs	r2, #0
 800665e:	f843 2b04 	str.w	r2, [r3], #4
 8006662:	459b      	cmp	fp, r3
 8006664:	d8fb      	bhi.n	800665e <__multiply+0x46>
 8006666:	eb0a 0686 	add.w	r6, sl, r6, lsl #2
 800666a:	eb05 0787 	add.w	r7, r5, r7, lsl #2
 800666e:	f10a 0a14 	add.w	sl, sl, #20
 8006672:	f106 0814 	add.w	r8, r6, #20
 8006676:	3514      	adds	r5, #20
 8006678:	3714      	adds	r7, #20
 800667a:	45c2      	cmp	sl, r8
 800667c:	d24f      	bcs.n	800671e <__multiply+0x106>
 800667e:	f8cd b008 	str.w	fp, [sp, #8]
 8006682:	9403      	str	r4, [sp, #12]
 8006684:	46ab      	mov	fp, r5
 8006686:	f85a 5b04 	ldr.w	r5, [sl], #4
 800668a:	b2ac      	uxth	r4, r5
 800668c:	b1e4      	cbz	r4, 80066c8 <__multiply+0xb0>
 800668e:	465a      	mov	r2, fp
 8006690:	464b      	mov	r3, r9
 8006692:	2100      	movs	r1, #0
 8006694:	f852 6b04 	ldr.w	r6, [r2], #4
 8006698:	681d      	ldr	r5, [r3, #0]
 800669a:	b2b0      	uxth	r0, r6
 800669c:	fa11 f185 	uxtah	r1, r1, r5
 80066a0:	0c36      	lsrs	r6, r6, #16
 80066a2:	0c2d      	lsrs	r5, r5, #16
 80066a4:	fb04 1000 	mla	r0, r4, r0, r1
 80066a8:	fb04 5106 	mla	r1, r4, r6, r5
 80066ac:	eb01 4110 	add.w	r1, r1, r0, lsr #16
 80066b0:	b280      	uxth	r0, r0
 80066b2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80066b6:	0c09      	lsrs	r1, r1, #16
 80066b8:	4297      	cmp	r7, r2
 80066ba:	461d      	mov	r5, r3
 80066bc:	f843 0b04 	str.w	r0, [r3], #4
 80066c0:	d8e8      	bhi.n	8006694 <__multiply+0x7c>
 80066c2:	6069      	str	r1, [r5, #4]
 80066c4:	f85a 5c04 	ldr.w	r5, [sl, #-4]
 80066c8:	0c2d      	lsrs	r5, r5, #16
 80066ca:	d021      	beq.n	8006710 <__multiply+0xf8>
 80066cc:	f8d9 6000 	ldr.w	r6, [r9]
 80066d0:	465b      	mov	r3, fp
 80066d2:	4630      	mov	r0, r6
 80066d4:	4649      	mov	r1, r9
 80066d6:	f04f 0c00 	mov.w	ip, #0
 80066da:	e000      	b.n	80066de <__multiply+0xc6>
 80066dc:	4611      	mov	r1, r2
 80066de:	881a      	ldrh	r2, [r3, #0]
 80066e0:	eb0c 4c10 	add.w	ip, ip, r0, lsr #16
 80066e4:	fb05 cc02 	mla	ip, r5, r2, ip
 80066e8:	b2b6      	uxth	r6, r6
 80066ea:	460a      	mov	r2, r1
 80066ec:	ea46 460c 	orr.w	r6, r6, ip, lsl #16
 80066f0:	f842 6b04 	str.w	r6, [r2], #4
 80066f4:	f853 6b04 	ldr.w	r6, [r3], #4
 80066f8:	6848      	ldr	r0, [r1, #4]
 80066fa:	0c36      	lsrs	r6, r6, #16
 80066fc:	b284      	uxth	r4, r0
 80066fe:	fb05 4606 	mla	r6, r5, r6, r4
 8006702:	eb06 461c 	add.w	r6, r6, ip, lsr #16
 8006706:	429f      	cmp	r7, r3
 8006708:	ea4f 4c16 	mov.w	ip, r6, lsr #16
 800670c:	d8e6      	bhi.n	80066dc <__multiply+0xc4>
 800670e:	604e      	str	r6, [r1, #4]
 8006710:	45d0      	cmp	r8, sl
 8006712:	f109 0904 	add.w	r9, r9, #4
 8006716:	d8b6      	bhi.n	8006686 <__multiply+0x6e>
 8006718:	f8dd b008 	ldr.w	fp, [sp, #8]
 800671c:	9c03      	ldr	r4, [sp, #12]
 800671e:	2c00      	cmp	r4, #0
 8006720:	dd0c      	ble.n	800673c <__multiply+0x124>
 8006722:	e89d 0006 	ldmia.w	sp, {r1, r2}
 8006726:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 800672a:	b93b      	cbnz	r3, 800673c <__multiply+0x124>
 800672c:	f1ab 0b04 	sub.w	fp, fp, #4
 8006730:	e002      	b.n	8006738 <__multiply+0x120>
 8006732:	f85b 3d04 	ldr.w	r3, [fp, #-4]!
 8006736:	b90b      	cbnz	r3, 800673c <__multiply+0x124>
 8006738:	3c01      	subs	r4, #1
 800673a:	d1fa      	bne.n	8006732 <__multiply+0x11a>
 800673c:	9a00      	ldr	r2, [sp, #0]
 800673e:	6114      	str	r4, [r2, #16]
 8006740:	4610      	mov	r0, r2
 8006742:	b005      	add	sp, #20
 8006744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006748 <__pow5mult>:
 8006748:	f012 0303 	ands.w	r3, r2, #3
 800674c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006750:	4615      	mov	r5, r2
 8006752:	4604      	mov	r4, r0
 8006754:	4688      	mov	r8, r1
 8006756:	d12d      	bne.n	80067b4 <__pow5mult+0x6c>
 8006758:	10ad      	asrs	r5, r5, #2
 800675a:	d01d      	beq.n	8006798 <__pow5mult+0x50>
 800675c:	6ca7      	ldr	r7, [r4, #72]	; 0x48
 800675e:	b92f      	cbnz	r7, 800676c <__pow5mult+0x24>
 8006760:	e031      	b.n	80067c6 <__pow5mult+0x7e>
 8006762:	106d      	asrs	r5, r5, #1
 8006764:	d018      	beq.n	8006798 <__pow5mult+0x50>
 8006766:	683e      	ldr	r6, [r7, #0]
 8006768:	b1ce      	cbz	r6, 800679e <__pow5mult+0x56>
 800676a:	4637      	mov	r7, r6
 800676c:	07e8      	lsls	r0, r5, #31
 800676e:	d5f8      	bpl.n	8006762 <__pow5mult+0x1a>
 8006770:	4641      	mov	r1, r8
 8006772:	463a      	mov	r2, r7
 8006774:	4620      	mov	r0, r4
 8006776:	f7ff ff4f 	bl	8006618 <__multiply>
 800677a:	f1b8 0f00 	cmp.w	r8, #0
 800677e:	d017      	beq.n	80067b0 <__pow5mult+0x68>
 8006780:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8006784:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006786:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800678a:	106d      	asrs	r5, r5, #1
 800678c:	f8c8 1000 	str.w	r1, [r8]
 8006790:	f843 8022 	str.w	r8, [r3, r2, lsl #2]
 8006794:	4680      	mov	r8, r0
 8006796:	d1e6      	bne.n	8006766 <__pow5mult+0x1e>
 8006798:	4640      	mov	r0, r8
 800679a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800679e:	4639      	mov	r1, r7
 80067a0:	463a      	mov	r2, r7
 80067a2:	4620      	mov	r0, r4
 80067a4:	f7ff ff38 	bl	8006618 <__multiply>
 80067a8:	6038      	str	r0, [r7, #0]
 80067aa:	6006      	str	r6, [r0, #0]
 80067ac:	4607      	mov	r7, r0
 80067ae:	e7dd      	b.n	800676c <__pow5mult+0x24>
 80067b0:	4680      	mov	r8, r0
 80067b2:	e7d6      	b.n	8006762 <__pow5mult+0x1a>
 80067b4:	1e5e      	subs	r6, r3, #1
 80067b6:	4a09      	ldr	r2, [pc, #36]	; (80067dc <__pow5mult+0x94>)
 80067b8:	2300      	movs	r3, #0
 80067ba:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 80067be:	f7ff fe45 	bl	800644c <__multadd>
 80067c2:	4680      	mov	r8, r0
 80067c4:	e7c8      	b.n	8006758 <__pow5mult+0x10>
 80067c6:	4620      	mov	r0, r4
 80067c8:	f240 2171 	movw	r1, #625	; 0x271
 80067cc:	f7ff ff1a 	bl	8006604 <__i2b>
 80067d0:	2300      	movs	r3, #0
 80067d2:	64a0      	str	r0, [r4, #72]	; 0x48
 80067d4:	4607      	mov	r7, r0
 80067d6:	6003      	str	r3, [r0, #0]
 80067d8:	e7c8      	b.n	800676c <__pow5mult+0x24>
 80067da:	bf00      	nop
 80067dc:	080088f0 	.word	0x080088f0

080067e0 <__lshift>:
 80067e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067e4:	4691      	mov	r9, r2
 80067e6:	690a      	ldr	r2, [r1, #16]
 80067e8:	688b      	ldr	r3, [r1, #8]
 80067ea:	ea4f 1769 	mov.w	r7, r9, asr #5
 80067ee:	eb07 0b02 	add.w	fp, r7, r2
 80067f2:	f10b 0501 	add.w	r5, fp, #1
 80067f6:	429d      	cmp	r5, r3
 80067f8:	460c      	mov	r4, r1
 80067fa:	4606      	mov	r6, r0
 80067fc:	6849      	ldr	r1, [r1, #4]
 80067fe:	dd03      	ble.n	8006808 <__lshift+0x28>
 8006800:	005b      	lsls	r3, r3, #1
 8006802:	3101      	adds	r1, #1
 8006804:	429d      	cmp	r5, r3
 8006806:	dcfb      	bgt.n	8006800 <__lshift+0x20>
 8006808:	4630      	mov	r0, r6
 800680a:	f7ff fdef 	bl	80063ec <_Balloc>
 800680e:	2f00      	cmp	r7, #0
 8006810:	f100 0314 	add.w	r3, r0, #20
 8006814:	dd09      	ble.n	800682a <__lshift+0x4a>
 8006816:	2200      	movs	r2, #0
 8006818:	4611      	mov	r1, r2
 800681a:	3201      	adds	r2, #1
 800681c:	42ba      	cmp	r2, r7
 800681e:	f843 1b04 	str.w	r1, [r3], #4
 8006822:	d1fa      	bne.n	800681a <__lshift+0x3a>
 8006824:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 8006828:	3314      	adds	r3, #20
 800682a:	6922      	ldr	r2, [r4, #16]
 800682c:	f019 091f 	ands.w	r9, r9, #31
 8006830:	eb04 0c82 	add.w	ip, r4, r2, lsl #2
 8006834:	f104 0114 	add.w	r1, r4, #20
 8006838:	f10c 0c14 	add.w	ip, ip, #20
 800683c:	d022      	beq.n	8006884 <__lshift+0xa4>
 800683e:	f1c9 0a20 	rsb	sl, r9, #32
 8006842:	2200      	movs	r2, #0
 8006844:	e000      	b.n	8006848 <__lshift+0x68>
 8006846:	463b      	mov	r3, r7
 8006848:	f8d1 8000 	ldr.w	r8, [r1]
 800684c:	461f      	mov	r7, r3
 800684e:	fa08 f809 	lsl.w	r8, r8, r9
 8006852:	ea48 0202 	orr.w	r2, r8, r2
 8006856:	f847 2b04 	str.w	r2, [r7], #4
 800685a:	f851 2b04 	ldr.w	r2, [r1], #4
 800685e:	458c      	cmp	ip, r1
 8006860:	fa22 f20a 	lsr.w	r2, r2, sl
 8006864:	d8ef      	bhi.n	8006846 <__lshift+0x66>
 8006866:	605a      	str	r2, [r3, #4]
 8006868:	b10a      	cbz	r2, 800686e <__lshift+0x8e>
 800686a:	f10b 0502 	add.w	r5, fp, #2
 800686e:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 8006870:	6862      	ldr	r2, [r4, #4]
 8006872:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006876:	3d01      	subs	r5, #1
 8006878:	6105      	str	r5, [r0, #16]
 800687a:	6021      	str	r1, [r4, #0]
 800687c:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006880:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006884:	f851 2b04 	ldr.w	r2, [r1], #4
 8006888:	458c      	cmp	ip, r1
 800688a:	f843 2b04 	str.w	r2, [r3], #4
 800688e:	d9ee      	bls.n	800686e <__lshift+0x8e>
 8006890:	f851 2b04 	ldr.w	r2, [r1], #4
 8006894:	458c      	cmp	ip, r1
 8006896:	f843 2b04 	str.w	r2, [r3], #4
 800689a:	d8f3      	bhi.n	8006884 <__lshift+0xa4>
 800689c:	e7e7      	b.n	800686e <__lshift+0x8e>
 800689e:	bf00      	nop

080068a0 <__mcmp>:
 80068a0:	4603      	mov	r3, r0
 80068a2:	690a      	ldr	r2, [r1, #16]
 80068a4:	6900      	ldr	r0, [r0, #16]
 80068a6:	1a80      	subs	r0, r0, r2
 80068a8:	b430      	push	{r4, r5}
 80068aa:	d111      	bne.n	80068d0 <__mcmp+0x30>
 80068ac:	3204      	adds	r2, #4
 80068ae:	0094      	lsls	r4, r2, #2
 80068b0:	191a      	adds	r2, r3, r4
 80068b2:	1909      	adds	r1, r1, r4
 80068b4:	3314      	adds	r3, #20
 80068b6:	3204      	adds	r2, #4
 80068b8:	3104      	adds	r1, #4
 80068ba:	f852 5c04 	ldr.w	r5, [r2, #-4]
 80068be:	f851 4c04 	ldr.w	r4, [r1, #-4]
 80068c2:	3a04      	subs	r2, #4
 80068c4:	42a5      	cmp	r5, r4
 80068c6:	f1a1 0104 	sub.w	r1, r1, #4
 80068ca:	d103      	bne.n	80068d4 <__mcmp+0x34>
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d3f4      	bcc.n	80068ba <__mcmp+0x1a>
 80068d0:	bc30      	pop	{r4, r5}
 80068d2:	4770      	bx	lr
 80068d4:	bf38      	it	cc
 80068d6:	f04f 30ff 	movcc.w	r0, #4294967295	; 0xffffffff
 80068da:	d3f9      	bcc.n	80068d0 <__mcmp+0x30>
 80068dc:	2001      	movs	r0, #1
 80068de:	e7f7      	b.n	80068d0 <__mcmp+0x30>

080068e0 <__mdiff>:
 80068e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068e4:	460c      	mov	r4, r1
 80068e6:	4606      	mov	r6, r0
 80068e8:	4611      	mov	r1, r2
 80068ea:	4620      	mov	r0, r4
 80068ec:	4615      	mov	r5, r2
 80068ee:	f7ff ffd7 	bl	80068a0 <__mcmp>
 80068f2:	1e07      	subs	r7, r0, #0
 80068f4:	d058      	beq.n	80069a8 <__mdiff+0xc8>
 80068f6:	db52      	blt.n	800699e <__mdiff+0xbe>
 80068f8:	2700      	movs	r7, #0
 80068fa:	4630      	mov	r0, r6
 80068fc:	6861      	ldr	r1, [r4, #4]
 80068fe:	f7ff fd75 	bl	80063ec <_Balloc>
 8006902:	f8d4 c010 	ldr.w	ip, [r4, #16]
 8006906:	692b      	ldr	r3, [r5, #16]
 8006908:	60c7      	str	r7, [r0, #12]
 800690a:	eb05 0883 	add.w	r8, r5, r3, lsl #2
 800690e:	eb04 078c 	add.w	r7, r4, ip, lsl #2
 8006912:	3714      	adds	r7, #20
 8006914:	f108 0814 	add.w	r8, r8, #20
 8006918:	3414      	adds	r4, #20
 800691a:	3514      	adds	r5, #20
 800691c:	f100 0914 	add.w	r9, r0, #20
 8006920:	2600      	movs	r6, #0
 8006922:	f854 3b04 	ldr.w	r3, [r4], #4
 8006926:	f855 2b04 	ldr.w	r2, [r5], #4
 800692a:	fa16 f183 	uxtah	r1, r6, r3
 800692e:	fa1f fa82 	uxth.w	sl, r2
 8006932:	0c12      	lsrs	r2, r2, #16
 8006934:	ebc2 4613 	rsb	r6, r2, r3, lsr #16
 8006938:	ebca 0101 	rsb	r1, sl, r1
 800693c:	eb06 4621 	add.w	r6, r6, r1, asr #16
 8006940:	464b      	mov	r3, r9
 8006942:	b289      	uxth	r1, r1
 8006944:	ea41 4106 	orr.w	r1, r1, r6, lsl #16
 8006948:	f843 1b04 	str.w	r1, [r3], #4
 800694c:	1436      	asrs	r6, r6, #16
 800694e:	45a8      	cmp	r8, r5
 8006950:	4622      	mov	r2, r4
 8006952:	4699      	mov	r9, r3
 8006954:	d8e5      	bhi.n	8006922 <__mdiff+0x42>
 8006956:	42a7      	cmp	r7, r4
 8006958:	4698      	mov	r8, r3
 800695a:	d914      	bls.n	8006986 <__mdiff+0xa6>
 800695c:	f852 5b04 	ldr.w	r5, [r2], #4
 8006960:	fa16 f685 	uxtah	r6, r6, r5
 8006964:	0c2d      	lsrs	r5, r5, #16
 8006966:	eb05 4526 	add.w	r5, r5, r6, asr #16
 800696a:	b2b6      	uxth	r6, r6
 800696c:	ea46 4105 	orr.w	r1, r6, r5, lsl #16
 8006970:	142e      	asrs	r6, r5, #16
 8006972:	4297      	cmp	r7, r2
 8006974:	f843 1b04 	str.w	r1, [r3], #4
 8006978:	d8f0      	bhi.n	800695c <__mdiff+0x7c>
 800697a:	43e3      	mvns	r3, r4
 800697c:	19db      	adds	r3, r3, r7
 800697e:	f023 0303 	bic.w	r3, r3, #3
 8006982:	3304      	adds	r3, #4
 8006984:	4443      	add	r3, r8
 8006986:	b931      	cbnz	r1, 8006996 <__mdiff+0xb6>
 8006988:	3b04      	subs	r3, #4
 800698a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800698e:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8006992:	2a00      	cmp	r2, #0
 8006994:	d0f9      	beq.n	800698a <__mdiff+0xaa>
 8006996:	f8c0 c010 	str.w	ip, [r0, #16]
 800699a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800699e:	4623      	mov	r3, r4
 80069a0:	2701      	movs	r7, #1
 80069a2:	462c      	mov	r4, r5
 80069a4:	461d      	mov	r5, r3
 80069a6:	e7a8      	b.n	80068fa <__mdiff+0x1a>
 80069a8:	4630      	mov	r0, r6
 80069aa:	4639      	mov	r1, r7
 80069ac:	f7ff fd1e 	bl	80063ec <_Balloc>
 80069b0:	2301      	movs	r3, #1
 80069b2:	6103      	str	r3, [r0, #16]
 80069b4:	6147      	str	r7, [r0, #20]
 80069b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069ba:	bf00      	nop

080069bc <__ulp>:
 80069bc:	2300      	movs	r3, #0
 80069be:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 80069c2:	400b      	ands	r3, r1
 80069c4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	dd02      	ble.n	80069d2 <__ulp+0x16>
 80069cc:	4619      	mov	r1, r3
 80069ce:	2000      	movs	r0, #0
 80069d0:	4770      	bx	lr
 80069d2:	425b      	negs	r3, r3
 80069d4:	151b      	asrs	r3, r3, #20
 80069d6:	2100      	movs	r1, #0
 80069d8:	2b13      	cmp	r3, #19
 80069da:	dd0b      	ble.n	80069f4 <__ulp+0x38>
 80069dc:	2b32      	cmp	r3, #50	; 0x32
 80069de:	dd02      	ble.n	80069e6 <__ulp+0x2a>
 80069e0:	2301      	movs	r3, #1
 80069e2:	4618      	mov	r0, r3
 80069e4:	4770      	bx	lr
 80069e6:	2201      	movs	r2, #1
 80069e8:	f1c3 0333 	rsb	r3, r3, #51	; 0x33
 80069ec:	fa12 f303 	lsls.w	r3, r2, r3
 80069f0:	4618      	mov	r0, r3
 80069f2:	4770      	bx	lr
 80069f4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80069f8:	fa52 f103 	asrs.w	r1, r2, r3
 80069fc:	2000      	movs	r0, #0
 80069fe:	4770      	bx	lr

08006a00 <__b2d>:
 8006a00:	6902      	ldr	r2, [r0, #16]
 8006a02:	3204      	adds	r2, #4
 8006a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a06:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	eb00 0482 	add.w	r4, r0, r2, lsl #2
 8006a10:	4628      	mov	r0, r5
 8006a12:	460f      	mov	r7, r1
 8006a14:	f103 0614 	add.w	r6, r3, #20
 8006a18:	f7ff fda8 	bl	800656c <__hi0bits>
 8006a1c:	f1c0 0320 	rsb	r3, r0, #32
 8006a20:	280a      	cmp	r0, #10
 8006a22:	603b      	str	r3, [r7, #0]
 8006a24:	4623      	mov	r3, r4
 8006a26:	dc14      	bgt.n	8006a52 <__b2d+0x52>
 8006a28:	f1c0 010b 	rsb	r1, r0, #11
 8006a2c:	fa35 f701 	lsrs.w	r7, r5, r1
 8006a30:	f047 577f 	orr.w	r7, r7, #1069547520	; 0x3fc00000
 8006a34:	42a6      	cmp	r6, r4
 8006a36:	f447 1340 	orr.w	r3, r7, #3145728	; 0x300000
 8006a3a:	d22e      	bcs.n	8006a9a <__b2d+0x9a>
 8006a3c:	f854 4c04 	ldr.w	r4, [r4, #-4]
 8006a40:	fa34 f101 	lsrs.w	r1, r4, r1
 8006a44:	3015      	adds	r0, #21
 8006a46:	4085      	lsls	r5, r0
 8006a48:	ea41 0205 	orr.w	r2, r1, r5
 8006a4c:	4610      	mov	r0, r2
 8006a4e:	4619      	mov	r1, r3
 8006a50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a52:	2100      	movs	r1, #0
 8006a54:	42a6      	cmp	r6, r4
 8006a56:	d202      	bcs.n	8006a5e <__b2d+0x5e>
 8006a58:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8006a5c:	3c04      	subs	r4, #4
 8006a5e:	f1b0 070b 	subs.w	r7, r0, #11
 8006a62:	bf02      	ittt	eq
 8006a64:	f045 557f 	orreq.w	r5, r5, #1069547520	; 0x3fc00000
 8006a68:	f445 1340 	orreq.w	r3, r5, #3145728	; 0x300000
 8006a6c:	460a      	moveq	r2, r1
 8006a6e:	d0ed      	beq.n	8006a4c <__b2d+0x4c>
 8006a70:	40bd      	lsls	r5, r7
 8006a72:	f1c0 002b 	rsb	r0, r0, #43	; 0x2b
 8006a76:	f045 557f 	orr.w	r5, r5, #1069547520	; 0x3fc00000
 8006a7a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006a7e:	fa21 fc00 	lsr.w	ip, r1, r0
 8006a82:	42b4      	cmp	r4, r6
 8006a84:	ea45 030c 	orr.w	r3, r5, ip
 8006a88:	d909      	bls.n	8006a9e <__b2d+0x9e>
 8006a8a:	f854 4c04 	ldr.w	r4, [r4, #-4]
 8006a8e:	fa34 f000 	lsrs.w	r0, r4, r0
 8006a92:	40b9      	lsls	r1, r7
 8006a94:	ea40 0201 	orr.w	r2, r0, r1
 8006a98:	e7d8      	b.n	8006a4c <__b2d+0x4c>
 8006a9a:	2100      	movs	r1, #0
 8006a9c:	e7d2      	b.n	8006a44 <__b2d+0x44>
 8006a9e:	2000      	movs	r0, #0
 8006aa0:	e7f7      	b.n	8006a92 <__b2d+0x92>
 8006aa2:	bf00      	nop

08006aa4 <__d2b>:
 8006aa4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006aa8:	b083      	sub	sp, #12
 8006aaa:	2101      	movs	r1, #1
 8006aac:	461d      	mov	r5, r3
 8006aae:	4614      	mov	r4, r2
 8006ab0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8006ab2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006ab4:	f7ff fc9a 	bl	80063ec <_Balloc>
 8006ab8:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
 8006abc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006ac0:	f3c5 590a 	ubfx	r9, r5, #20, #11
 8006ac4:	4680      	mov	r8, r0
 8006ac6:	9301      	str	r3, [sp, #4]
 8006ac8:	f1b9 0f00 	cmp.w	r9, #0
 8006acc:	d002      	beq.n	8006ad4 <__d2b+0x30>
 8006ace:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006ad2:	9301      	str	r3, [sp, #4]
 8006ad4:	2c00      	cmp	r4, #0
 8006ad6:	d025      	beq.n	8006b24 <__d2b+0x80>
 8006ad8:	a802      	add	r0, sp, #8
 8006ada:	f840 4d08 	str.w	r4, [r0, #-8]!
 8006ade:	4668      	mov	r0, sp
 8006ae0:	f7ff fd62 	bl	80065a8 <__lo0bits>
 8006ae4:	9b01      	ldr	r3, [sp, #4]
 8006ae6:	2800      	cmp	r0, #0
 8006ae8:	d132      	bne.n	8006b50 <__d2b+0xac>
 8006aea:	9a00      	ldr	r2, [sp, #0]
 8006aec:	f8c8 2014 	str.w	r2, [r8, #20]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	bf0c      	ite	eq
 8006af4:	2401      	moveq	r4, #1
 8006af6:	2402      	movne	r4, #2
 8006af8:	f8c8 3018 	str.w	r3, [r8, #24]
 8006afc:	f8c8 4010 	str.w	r4, [r8, #16]
 8006b00:	f1b9 0f00 	cmp.w	r9, #0
 8006b04:	d11b      	bne.n	8006b3e <__d2b+0x9a>
 8006b06:	eb08 0284 	add.w	r2, r8, r4, lsl #2
 8006b0a:	f2a0 4332 	subw	r3, r0, #1074	; 0x432
 8006b0e:	6910      	ldr	r0, [r2, #16]
 8006b10:	603b      	str	r3, [r7, #0]
 8006b12:	f7ff fd2b 	bl	800656c <__hi0bits>
 8006b16:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 8006b1a:	6030      	str	r0, [r6, #0]
 8006b1c:	4640      	mov	r0, r8
 8006b1e:	b003      	add	sp, #12
 8006b20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006b24:	a801      	add	r0, sp, #4
 8006b26:	f7ff fd3f 	bl	80065a8 <__lo0bits>
 8006b2a:	9b01      	ldr	r3, [sp, #4]
 8006b2c:	2401      	movs	r4, #1
 8006b2e:	f8c8 3014 	str.w	r3, [r8, #20]
 8006b32:	f8c8 4010 	str.w	r4, [r8, #16]
 8006b36:	3020      	adds	r0, #32
 8006b38:	f1b9 0f00 	cmp.w	r9, #0
 8006b3c:	d0e3      	beq.n	8006b06 <__d2b+0x62>
 8006b3e:	f2a9 4933 	subw	r9, r9, #1075	; 0x433
 8006b42:	eb09 0300 	add.w	r3, r9, r0
 8006b46:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006b4a:	603b      	str	r3, [r7, #0]
 8006b4c:	6030      	str	r0, [r6, #0]
 8006b4e:	e7e5      	b.n	8006b1c <__d2b+0x78>
 8006b50:	f1c0 0220 	rsb	r2, r0, #32
 8006b54:	9900      	ldr	r1, [sp, #0]
 8006b56:	fa13 f202 	lsls.w	r2, r3, r2
 8006b5a:	430a      	orrs	r2, r1
 8006b5c:	40c3      	lsrs	r3, r0
 8006b5e:	f8c8 2014 	str.w	r2, [r8, #20]
 8006b62:	9301      	str	r3, [sp, #4]
 8006b64:	e7c4      	b.n	8006af0 <__d2b+0x4c>
 8006b66:	bf00      	nop

08006b68 <__ratio>:
 8006b68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006b6c:	b083      	sub	sp, #12
 8006b6e:	460d      	mov	r5, r1
 8006b70:	4669      	mov	r1, sp
 8006b72:	4604      	mov	r4, r0
 8006b74:	f7ff ff44 	bl	8006a00 <__b2d>
 8006b78:	4689      	mov	r9, r1
 8006b7a:	4680      	mov	r8, r0
 8006b7c:	a901      	add	r1, sp, #4
 8006b7e:	4628      	mov	r0, r5
 8006b80:	f7ff ff3e 	bl	8006a00 <__b2d>
 8006b84:	460f      	mov	r7, r1
 8006b86:	e89d 000a 	ldmia.w	sp, {r1, r3}
 8006b8a:	692a      	ldr	r2, [r5, #16]
 8006b8c:	6924      	ldr	r4, [r4, #16]
 8006b8e:	1acb      	subs	r3, r1, r3
 8006b90:	1aa4      	subs	r4, r4, r2
 8006b92:	eb03 1444 	add.w	r4, r3, r4, lsl #5
 8006b96:	2c00      	cmp	r4, #0
 8006b98:	4606      	mov	r6, r0
 8006b9a:	464b      	mov	r3, r9
 8006b9c:	4639      	mov	r1, r7
 8006b9e:	bfcb      	itete	gt
 8006ba0:	eb09 5304 	addgt.w	r3, r9, r4, lsl #20
 8006ba4:	eba7 5104 	suble.w	r1, r7, r4, lsl #20
 8006ba8:	4699      	movgt	r9, r3
 8006baa:	460f      	movle	r7, r1
 8006bac:	bfcc      	ite	gt
 8006bae:	46c0      	nopgt			; (mov r8, r8)
 8006bb0:	4636      	movle	r6, r6
 8006bb2:	4640      	mov	r0, r8
 8006bb4:	4649      	mov	r1, r9
 8006bb6:	4632      	mov	r2, r6
 8006bb8:	463b      	mov	r3, r7
 8006bba:	f001 fc53 	bl	8008464 <__aeabi_ddiv>
 8006bbe:	b003      	add	sp, #12
 8006bc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08006bc4 <_mprec_log10>:
 8006bc4:	b510      	push	{r4, lr}
 8006bc6:	4604      	mov	r4, r0
 8006bc8:	2100      	movs	r1, #0
 8006bca:	2000      	movs	r0, #0
 8006bcc:	2c17      	cmp	r4, #23
 8006bce:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 8006bd2:	dd08      	ble.n	8006be6 <_mprec_log10+0x22>
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8006bdc:	f001 fb18 	bl	8008210 <__aeabi_dmul>
 8006be0:	3c01      	subs	r4, #1
 8006be2:	d1f7      	bne.n	8006bd4 <_mprec_log10+0x10>
 8006be4:	bd10      	pop	{r4, pc}
 8006be6:	4b03      	ldr	r3, [pc, #12]	; (8006bf4 <_mprec_log10+0x30>)
 8006be8:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8006bec:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 8006bf0:	bd10      	pop	{r4, pc}
 8006bf2:	bf00      	nop
 8006bf4:	080088f0 	.word	0x080088f0

08006bf8 <__copybits>:
 8006bf8:	6913      	ldr	r3, [r2, #16]
 8006bfa:	3901      	subs	r1, #1
 8006bfc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006c00:	1149      	asrs	r1, r1, #5
 8006c02:	b470      	push	{r4, r5, r6}
 8006c04:	3314      	adds	r3, #20
 8006c06:	f102 0414 	add.w	r4, r2, #20
 8006c0a:	3101      	adds	r1, #1
 8006c0c:	429c      	cmp	r4, r3
 8006c0e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006c12:	d20c      	bcs.n	8006c2e <__copybits+0x36>
 8006c14:	4605      	mov	r5, r0
 8006c16:	f854 6b04 	ldr.w	r6, [r4], #4
 8006c1a:	42a3      	cmp	r3, r4
 8006c1c:	f845 6b04 	str.w	r6, [r5], #4
 8006c20:	d8f9      	bhi.n	8006c16 <__copybits+0x1e>
 8006c22:	1a9b      	subs	r3, r3, r2
 8006c24:	3b15      	subs	r3, #21
 8006c26:	f023 0303 	bic.w	r3, r3, #3
 8006c2a:	3304      	adds	r3, #4
 8006c2c:	18c0      	adds	r0, r0, r3
 8006c2e:	4281      	cmp	r1, r0
 8006c30:	d904      	bls.n	8006c3c <__copybits+0x44>
 8006c32:	2300      	movs	r3, #0
 8006c34:	f840 3b04 	str.w	r3, [r0], #4
 8006c38:	4281      	cmp	r1, r0
 8006c3a:	d8fb      	bhi.n	8006c34 <__copybits+0x3c>
 8006c3c:	bc70      	pop	{r4, r5, r6}
 8006c3e:	4770      	bx	lr

08006c40 <__any_on>:
 8006c40:	6902      	ldr	r2, [r0, #16]
 8006c42:	114b      	asrs	r3, r1, #5
 8006c44:	429a      	cmp	r2, r3
 8006c46:	b410      	push	{r4}
 8006c48:	db01      	blt.n	8006c4e <__any_on+0xe>
 8006c4a:	461a      	mov	r2, r3
 8006c4c:	dc13      	bgt.n	8006c76 <__any_on+0x36>
 8006c4e:	3204      	adds	r2, #4
 8006c50:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 8006c54:	f100 0114 	add.w	r1, r0, #20
 8006c58:	1d1c      	adds	r4, r3, #4
 8006c5a:	42a1      	cmp	r1, r4
 8006c5c:	d218      	bcs.n	8006c90 <__any_on+0x50>
 8006c5e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8006c62:	b92a      	cbnz	r2, 8006c70 <__any_on+0x30>
 8006c64:	4299      	cmp	r1, r3
 8006c66:	d213      	bcs.n	8006c90 <__any_on+0x50>
 8006c68:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006c6c:	2a00      	cmp	r2, #0
 8006c6e:	d0f9      	beq.n	8006c64 <__any_on+0x24>
 8006c70:	2001      	movs	r0, #1
 8006c72:	bc10      	pop	{r4}
 8006c74:	4770      	bx	lr
 8006c76:	f011 011f 	ands.w	r1, r1, #31
 8006c7a:	d0e8      	beq.n	8006c4e <__any_on+0xe>
 8006c7c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8006c80:	695b      	ldr	r3, [r3, #20]
 8006c82:	fa33 f401 	lsrs.w	r4, r3, r1
 8006c86:	fa14 f101 	lsls.w	r1, r4, r1
 8006c8a:	4299      	cmp	r1, r3
 8006c8c:	d1f0      	bne.n	8006c70 <__any_on+0x30>
 8006c8e:	e7de      	b.n	8006c4e <__any_on+0xe>
 8006c90:	2000      	movs	r0, #0
 8006c92:	e7ee      	b.n	8006c72 <__any_on+0x32>

08006c94 <__fpclassifyd>:
 8006c94:	ea50 0201 	orrs.w	r2, r0, r1
 8006c98:	b410      	push	{r4}
 8006c9a:	460b      	mov	r3, r1
 8006c9c:	d102      	bne.n	8006ca4 <__fpclassifyd+0x10>
 8006c9e:	2002      	movs	r0, #2
 8006ca0:	bc10      	pop	{r4}
 8006ca2:	4770      	bx	lr
 8006ca4:	f1d0 0101 	rsbs	r1, r0, #1
 8006ca8:	bf38      	it	cc
 8006caa:	2100      	movcc	r1, #0
 8006cac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006cb0:	bf08      	it	eq
 8006cb2:	2800      	cmpeq	r0, #0
 8006cb4:	d0f3      	beq.n	8006c9e <__fpclassifyd+0xa>
 8006cb6:	f103 44ff 	add.w	r4, r3, #2139095040	; 0x7f800000
 8006cba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006cbe:	f504 04e0 	add.w	r4, r4, #7340032	; 0x700000
 8006cc2:	f6c7 72df 	movt	r2, #32735	; 0x7fdf
 8006cc6:	f5a3 1080 	sub.w	r0, r3, #1048576	; 0x100000
 8006cca:	4290      	cmp	r0, r2
 8006ccc:	bf88      	it	hi
 8006cce:	4294      	cmphi	r4, r2
 8006cd0:	d801      	bhi.n	8006cd6 <__fpclassifyd+0x42>
 8006cd2:	2004      	movs	r0, #4
 8006cd4:	e7e4      	b.n	8006ca0 <__fpclassifyd+0xc>
 8006cd6:	f103 4200 	add.w	r2, r3, #2147483648	; 0x80000000
 8006cda:	2003      	movs	r0, #3
 8006cdc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ce0:	bf28      	it	cs
 8006ce2:	f5b2 1f80 	cmpcs.w	r2, #1048576	; 0x100000
 8006ce6:	d3db      	bcc.n	8006ca0 <__fpclassifyd+0xc>
 8006ce8:	2200      	movs	r2, #0
 8006cea:	f6c7 72f0 	movt	r2, #32752	; 0x7ff0
 8006cee:	f513 1f80 	cmn.w	r3, #1048576	; 0x100000
 8006cf2:	bf18      	it	ne
 8006cf4:	4293      	cmpne	r3, r2
 8006cf6:	bf14      	ite	ne
 8006cf8:	2300      	movne	r3, #0
 8006cfa:	2301      	moveq	r3, #1
 8006cfc:	ea01 0003 	and.w	r0, r1, r3
 8006d00:	e7ce      	b.n	8006ca0 <__fpclassifyd+0xc>
 8006d02:	bf00      	nop

08006d04 <_sbrk_r>:
 8006d04:	b538      	push	{r3, r4, r5, lr}
 8006d06:	4c07      	ldr	r4, [pc, #28]	; (8006d24 <_sbrk_r+0x20>)
 8006d08:	2300      	movs	r3, #0
 8006d0a:	4605      	mov	r5, r0
 8006d0c:	4608      	mov	r0, r1
 8006d0e:	6023      	str	r3, [r4, #0]
 8006d10:	f7fc f93a 	bl	8002f88 <_sbrk>
 8006d14:	1c43      	adds	r3, r0, #1
 8006d16:	d000      	beq.n	8006d1a <_sbrk_r+0x16>
 8006d18:	bd38      	pop	{r3, r4, r5, pc}
 8006d1a:	6823      	ldr	r3, [r4, #0]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d0fb      	beq.n	8006d18 <_sbrk_r+0x14>
 8006d20:	602b      	str	r3, [r5, #0]
 8006d22:	bd38      	pop	{r3, r4, r5, pc}
 8006d24:	20001650 	.word	0x20001650

08006d28 <strcmp>:
 8006d28:	ea80 0201 	eor.w	r2, r0, r1
 8006d2c:	f012 0f03 	tst.w	r2, #3
 8006d30:	d13a      	bne.n	8006da8 <strcmp_unaligned>
 8006d32:	f010 0203 	ands.w	r2, r0, #3
 8006d36:	f020 0003 	bic.w	r0, r0, #3
 8006d3a:	f021 0103 	bic.w	r1, r1, #3
 8006d3e:	f850 cb04 	ldr.w	ip, [r0], #4
 8006d42:	bf08      	it	eq
 8006d44:	f851 3b04 	ldreq.w	r3, [r1], #4
 8006d48:	d00d      	beq.n	8006d66 <strcmp+0x3e>
 8006d4a:	f082 0203 	eor.w	r2, r2, #3
 8006d4e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8006d52:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8006d56:	fa23 f202 	lsr.w	r2, r3, r2
 8006d5a:	f851 3b04 	ldr.w	r3, [r1], #4
 8006d5e:	ea4c 0c02 	orr.w	ip, ip, r2
 8006d62:	ea43 0302 	orr.w	r3, r3, r2
 8006d66:	bf00      	nop
 8006d68:	f1ac 3201 	sub.w	r2, ip, #16843009	; 0x1010101
 8006d6c:	459c      	cmp	ip, r3
 8006d6e:	bf01      	itttt	eq
 8006d70:	ea22 020c 	biceq.w	r2, r2, ip
 8006d74:	f012 3f80 	tsteq.w	r2, #2155905152	; 0x80808080
 8006d78:	f850 cb04 	ldreq.w	ip, [r0], #4
 8006d7c:	f851 3b04 	ldreq.w	r3, [r1], #4
 8006d80:	d0f2      	beq.n	8006d68 <strcmp+0x40>
 8006d82:	ea4f 600c 	mov.w	r0, ip, lsl #24
 8006d86:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8006d8a:	2801      	cmp	r0, #1
 8006d8c:	bf28      	it	cs
 8006d8e:	ebb0 6f03 	cmpcs.w	r0, r3, lsl #24
 8006d92:	bf08      	it	eq
 8006d94:	0a1b      	lsreq	r3, r3, #8
 8006d96:	d0f4      	beq.n	8006d82 <strcmp+0x5a>
 8006d98:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8006d9c:	ea4f 6010 	mov.w	r0, r0, lsr #24
 8006da0:	eba0 0003 	sub.w	r0, r0, r3
 8006da4:	4770      	bx	lr
 8006da6:	bf00      	nop

08006da8 <strcmp_unaligned>:
 8006da8:	f010 0f03 	tst.w	r0, #3
 8006dac:	d00a      	beq.n	8006dc4 <strcmp_unaligned+0x1c>
 8006dae:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006db2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006db6:	2a01      	cmp	r2, #1
 8006db8:	bf28      	it	cs
 8006dba:	429a      	cmpcs	r2, r3
 8006dbc:	d0f4      	beq.n	8006da8 <strcmp_unaligned>
 8006dbe:	eba2 0003 	sub.w	r0, r2, r3
 8006dc2:	4770      	bx	lr
 8006dc4:	f84d 5d04 	str.w	r5, [sp, #-4]!
 8006dc8:	f84d 4d04 	str.w	r4, [sp, #-4]!
 8006dcc:	f04f 0201 	mov.w	r2, #1
 8006dd0:	ea42 2202 	orr.w	r2, r2, r2, lsl #8
 8006dd4:	ea42 4202 	orr.w	r2, r2, r2, lsl #16
 8006dd8:	f001 0c03 	and.w	ip, r1, #3
 8006ddc:	f021 0103 	bic.w	r1, r1, #3
 8006de0:	f850 4b04 	ldr.w	r4, [r0], #4
 8006de4:	f851 5b04 	ldr.w	r5, [r1], #4
 8006de8:	f1bc 0f02 	cmp.w	ip, #2
 8006dec:	d026      	beq.n	8006e3c <strcmp_unaligned+0x94>
 8006dee:	d84b      	bhi.n	8006e88 <strcmp_unaligned+0xe0>
 8006df0:	f024 4c7f 	bic.w	ip, r4, #4278190080	; 0xff000000
 8006df4:	ebbc 2f15 	cmp.w	ip, r5, lsr #8
 8006df8:	eba4 0302 	sub.w	r3, r4, r2
 8006dfc:	ea23 0304 	bic.w	r3, r3, r4
 8006e00:	d10d      	bne.n	8006e1e <strcmp_unaligned+0x76>
 8006e02:	ea13 13c2 	ands.w	r3, r3, r2, lsl #7
 8006e06:	bf08      	it	eq
 8006e08:	f851 5b04 	ldreq.w	r5, [r1], #4
 8006e0c:	d10a      	bne.n	8006e24 <strcmp_unaligned+0x7c>
 8006e0e:	ea8c 0c04 	eor.w	ip, ip, r4
 8006e12:	ebbc 6f05 	cmp.w	ip, r5, lsl #24
 8006e16:	d10c      	bne.n	8006e32 <strcmp_unaligned+0x8a>
 8006e18:	f850 4b04 	ldr.w	r4, [r0], #4
 8006e1c:	e7e8      	b.n	8006df0 <strcmp_unaligned+0x48>
 8006e1e:	ea4f 2515 	mov.w	r5, r5, lsr #8
 8006e22:	e05c      	b.n	8006ede <strcmp_unaligned+0x136>
 8006e24:	f033 437f 	bics.w	r3, r3, #4278190080	; 0xff000000
 8006e28:	d152      	bne.n	8006ed0 <strcmp_unaligned+0x128>
 8006e2a:	780d      	ldrb	r5, [r1, #0]
 8006e2c:	ea4f 6c14 	mov.w	ip, r4, lsr #24
 8006e30:	e055      	b.n	8006ede <strcmp_unaligned+0x136>
 8006e32:	ea4f 6c14 	mov.w	ip, r4, lsr #24
 8006e36:	f005 05ff 	and.w	r5, r5, #255	; 0xff
 8006e3a:	e050      	b.n	8006ede <strcmp_unaligned+0x136>
 8006e3c:	ea4f 4c04 	mov.w	ip, r4, lsl #16
 8006e40:	eba4 0302 	sub.w	r3, r4, r2
 8006e44:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006e48:	ea23 0304 	bic.w	r3, r3, r4
 8006e4c:	ebbc 4f15 	cmp.w	ip, r5, lsr #16
 8006e50:	d117      	bne.n	8006e82 <strcmp_unaligned+0xda>
 8006e52:	ea13 13c2 	ands.w	r3, r3, r2, lsl #7
 8006e56:	bf08      	it	eq
 8006e58:	f851 5b04 	ldreq.w	r5, [r1], #4
 8006e5c:	d107      	bne.n	8006e6e <strcmp_unaligned+0xc6>
 8006e5e:	ea8c 0c04 	eor.w	ip, ip, r4
 8006e62:	ebbc 4f05 	cmp.w	ip, r5, lsl #16
 8006e66:	d108      	bne.n	8006e7a <strcmp_unaligned+0xd2>
 8006e68:	f850 4b04 	ldr.w	r4, [r0], #4
 8006e6c:	e7e6      	b.n	8006e3c <strcmp_unaligned+0x94>
 8006e6e:	041b      	lsls	r3, r3, #16
 8006e70:	d12e      	bne.n	8006ed0 <strcmp_unaligned+0x128>
 8006e72:	880d      	ldrh	r5, [r1, #0]
 8006e74:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8006e78:	e031      	b.n	8006ede <strcmp_unaligned+0x136>
 8006e7a:	ea4f 4505 	mov.w	r5, r5, lsl #16
 8006e7e:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8006e82:	ea4f 4515 	mov.w	r5, r5, lsr #16
 8006e86:	e02a      	b.n	8006ede <strcmp_unaligned+0x136>
 8006e88:	f004 0cff 	and.w	ip, r4, #255	; 0xff
 8006e8c:	ebbc 6f15 	cmp.w	ip, r5, lsr #24
 8006e90:	eba4 0302 	sub.w	r3, r4, r2
 8006e94:	ea23 0304 	bic.w	r3, r3, r4
 8006e98:	d10d      	bne.n	8006eb6 <strcmp_unaligned+0x10e>
 8006e9a:	ea13 13c2 	ands.w	r3, r3, r2, lsl #7
 8006e9e:	bf08      	it	eq
 8006ea0:	f851 5b04 	ldreq.w	r5, [r1], #4
 8006ea4:	d10a      	bne.n	8006ebc <strcmp_unaligned+0x114>
 8006ea6:	ea8c 0c04 	eor.w	ip, ip, r4
 8006eaa:	ebbc 2f05 	cmp.w	ip, r5, lsl #8
 8006eae:	d10a      	bne.n	8006ec6 <strcmp_unaligned+0x11e>
 8006eb0:	f850 4b04 	ldr.w	r4, [r0], #4
 8006eb4:	e7e8      	b.n	8006e88 <strcmp_unaligned+0xe0>
 8006eb6:	ea4f 6515 	mov.w	r5, r5, lsr #24
 8006eba:	e010      	b.n	8006ede <strcmp_unaligned+0x136>
 8006ebc:	f014 0fff 	tst.w	r4, #255	; 0xff
 8006ec0:	d006      	beq.n	8006ed0 <strcmp_unaligned+0x128>
 8006ec2:	f851 5b04 	ldr.w	r5, [r1], #4
 8006ec6:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 8006eca:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 8006ece:	e006      	b.n	8006ede <strcmp_unaligned+0x136>
 8006ed0:	f04f 0000 	mov.w	r0, #0
 8006ed4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ed8:	f85d 5b04 	ldr.w	r5, [sp], #4
 8006edc:	4770      	bx	lr
 8006ede:	f00c 02ff 	and.w	r2, ip, #255	; 0xff
 8006ee2:	f005 00ff 	and.w	r0, r5, #255	; 0xff
 8006ee6:	2801      	cmp	r0, #1
 8006ee8:	bf28      	it	cs
 8006eea:	4290      	cmpcs	r0, r2
 8006eec:	bf04      	itt	eq
 8006eee:	ea4f 2c1c 	moveq.w	ip, ip, lsr #8
 8006ef2:	0a2d      	lsreq	r5, r5, #8
 8006ef4:	d0f3      	beq.n	8006ede <strcmp_unaligned+0x136>
 8006ef6:	eba2 0000 	sub.w	r0, r2, r0
 8006efa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006efe:	f85d 5b04 	ldr.w	r5, [sp], #4
 8006f02:	4770      	bx	lr

08006f04 <strlen>:
 8006f04:	f020 0103 	bic.w	r1, r0, #3
 8006f08:	f010 0003 	ands.w	r0, r0, #3
 8006f0c:	f1c0 0000 	rsb	r0, r0, #0
 8006f10:	f851 3b04 	ldr.w	r3, [r1], #4
 8006f14:	f100 0c04 	add.w	ip, r0, #4
 8006f18:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8006f1c:	f06f 0200 	mvn.w	r2, #0
 8006f20:	bf1c      	itt	ne
 8006f22:	fa22 f20c 	lsrne.w	r2, r2, ip
 8006f26:	4313      	orrne	r3, r2
 8006f28:	f04f 0c01 	mov.w	ip, #1
 8006f2c:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 8006f30:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 8006f34:	eba3 020c 	sub.w	r2, r3, ip
 8006f38:	ea22 0203 	bic.w	r2, r2, r3
 8006f3c:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 8006f40:	bf04      	itt	eq
 8006f42:	f851 3b04 	ldreq.w	r3, [r1], #4
 8006f46:	3004      	addeq	r0, #4
 8006f48:	d0f4      	beq.n	8006f34 <strlen+0x30>
 8006f4a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006f4e:	bf1f      	itttt	ne
 8006f50:	3001      	addne	r0, #1
 8006f52:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
 8006f56:	3001      	addne	r0, #1
 8006f58:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
 8006f5c:	bf18      	it	ne
 8006f5e:	3001      	addne	r0, #1
 8006f60:	4770      	bx	lr
 8006f62:	bf00      	nop

08006f64 <__ssprint_r>:
 8006f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f68:	b083      	sub	sp, #12
 8006f6a:	4691      	mov	r9, r2
 8006f6c:	9001      	str	r0, [sp, #4]
 8006f6e:	6890      	ldr	r0, [r2, #8]
 8006f70:	6817      	ldr	r7, [r2, #0]
 8006f72:	460d      	mov	r5, r1
 8006f74:	2800      	cmp	r0, #0
 8006f76:	d072      	beq.n	800705e <__ssprint_r+0xfa>
 8006f78:	f04f 0a00 	mov.w	sl, #0
 8006f7c:	6808      	ldr	r0, [r1, #0]
 8006f7e:	688b      	ldr	r3, [r1, #8]
 8006f80:	4654      	mov	r4, sl
 8006f82:	2c00      	cmp	r4, #0
 8006f84:	d048      	beq.n	8007018 <__ssprint_r+0xb4>
 8006f86:	429c      	cmp	r4, r3
 8006f88:	461e      	mov	r6, r3
 8006f8a:	4698      	mov	r8, r3
 8006f8c:	bf3c      	itt	cc
 8006f8e:	4626      	movcc	r6, r4
 8006f90:	46a0      	movcc	r8, r4
 8006f92:	d331      	bcc.n	8006ff8 <__ssprint_r+0x94>
 8006f94:	89ab      	ldrh	r3, [r5, #12]
 8006f96:	f413 6f90 	tst.w	r3, #1152	; 0x480
 8006f9a:	d02d      	beq.n	8006ff8 <__ssprint_r+0x94>
 8006f9c:	696e      	ldr	r6, [r5, #20]
 8006f9e:	6929      	ldr	r1, [r5, #16]
 8006fa0:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8006fa4:	ebc1 0800 	rsb	r8, r1, r0
 8006fa8:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 8006fac:	1c60      	adds	r0, r4, #1
 8006fae:	1076      	asrs	r6, r6, #1
 8006fb0:	4440      	add	r0, r8
 8006fb2:	4286      	cmp	r6, r0
 8006fb4:	4632      	mov	r2, r6
 8006fb6:	bf3c      	itt	cc
 8006fb8:	4606      	movcc	r6, r0
 8006fba:	4632      	movcc	r2, r6
 8006fbc:	055b      	lsls	r3, r3, #21
 8006fbe:	9801      	ldr	r0, [sp, #4]
 8006fc0:	d52f      	bpl.n	8007022 <__ssprint_r+0xbe>
 8006fc2:	4611      	mov	r1, r2
 8006fc4:	f7fe fed8 	bl	8005d78 <_malloc_r>
 8006fc8:	4683      	mov	fp, r0
 8006fca:	2800      	cmp	r0, #0
 8006fcc:	d032      	beq.n	8007034 <__ssprint_r+0xd0>
 8006fce:	6929      	ldr	r1, [r5, #16]
 8006fd0:	4642      	mov	r2, r8
 8006fd2:	f7ff f9c3 	bl	800635c <memcpy>
 8006fd6:	89ab      	ldrh	r3, [r5, #12]
 8006fd8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006fdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fe0:	81ab      	strh	r3, [r5, #12]
 8006fe2:	ebc8 0306 	rsb	r3, r8, r6
 8006fe6:	eb0b 0008 	add.w	r0, fp, r8
 8006fea:	616e      	str	r6, [r5, #20]
 8006fec:	f8c5 b010 	str.w	fp, [r5, #16]
 8006ff0:	6028      	str	r0, [r5, #0]
 8006ff2:	4626      	mov	r6, r4
 8006ff4:	60ab      	str	r3, [r5, #8]
 8006ff6:	46a0      	mov	r8, r4
 8006ff8:	4642      	mov	r2, r8
 8006ffa:	4651      	mov	r1, sl
 8006ffc:	f000 fcb8 	bl	8007970 <memmove>
 8007000:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8007004:	68ab      	ldr	r3, [r5, #8]
 8007006:	6828      	ldr	r0, [r5, #0]
 8007008:	1b9b      	subs	r3, r3, r6
 800700a:	4440      	add	r0, r8
 800700c:	1b14      	subs	r4, r2, r4
 800700e:	60ab      	str	r3, [r5, #8]
 8007010:	6028      	str	r0, [r5, #0]
 8007012:	f8c9 4008 	str.w	r4, [r9, #8]
 8007016:	b1e4      	cbz	r4, 8007052 <__ssprint_r+0xee>
 8007018:	f8d7 a000 	ldr.w	sl, [r7]
 800701c:	687c      	ldr	r4, [r7, #4]
 800701e:	3708      	adds	r7, #8
 8007020:	e7af      	b.n	8006f82 <__ssprint_r+0x1e>
 8007022:	f000 fd47 	bl	8007ab4 <_realloc_r>
 8007026:	4683      	mov	fp, r0
 8007028:	2800      	cmp	r0, #0
 800702a:	d1da      	bne.n	8006fe2 <__ssprint_r+0x7e>
 800702c:	9801      	ldr	r0, [sp, #4]
 800702e:	6929      	ldr	r1, [r5, #16]
 8007030:	f7fe fd96 	bl	8005b60 <_free_r>
 8007034:	9a01      	ldr	r2, [sp, #4]
 8007036:	230c      	movs	r3, #12
 8007038:	6013      	str	r3, [r2, #0]
 800703a:	89aa      	ldrh	r2, [r5, #12]
 800703c:	2300      	movs	r3, #0
 800703e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007042:	81aa      	strh	r2, [r5, #12]
 8007044:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007048:	f8c9 3008 	str.w	r3, [r9, #8]
 800704c:	f8c9 3004 	str.w	r3, [r9, #4]
 8007050:	e002      	b.n	8007058 <__ssprint_r+0xf4>
 8007052:	f8c9 4004 	str.w	r4, [r9, #4]
 8007056:	4620      	mov	r0, r4
 8007058:	b003      	add	sp, #12
 800705a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800705e:	6050      	str	r0, [r2, #4]
 8007060:	e7fa      	b.n	8007058 <__ssprint_r+0xf4>
 8007062:	bf00      	nop

08007064 <_svfiprintf_r>:
 8007064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007068:	468a      	mov	sl, r1
 800706a:	8989      	ldrh	r1, [r1, #12]
 800706c:	b0ad      	sub	sp, #180	; 0xb4
 800706e:	0609      	lsls	r1, r1, #24
 8007070:	9007      	str	r0, [sp, #28]
 8007072:	9305      	str	r3, [sp, #20]
 8007074:	d504      	bpl.n	8007080 <_svfiprintf_r+0x1c>
 8007076:	f8da 3010 	ldr.w	r3, [sl, #16]
 800707a:	2b00      	cmp	r3, #0
 800707c:	f000 8422 	beq.w	80078c4 <_svfiprintf_r+0x860>
 8007080:	2300      	movs	r3, #0
 8007082:	f10d 009f 	add.w	r0, sp, #159	; 0x9f
 8007086:	f10d 08a0 	add.w	r8, sp, #160	; 0xa0
 800708a:	a90e      	add	r1, sp, #56	; 0x38
 800708c:	930c      	str	r3, [sp, #48]	; 0x30
 800708e:	932a      	str	r3, [sp, #168]	; 0xa8
 8007090:	9329      	str	r3, [sp, #164]	; 0xa4
 8007092:	9304      	str	r3, [sp, #16]
 8007094:	ebc0 0308 	rsb	r3, r0, r8
 8007098:	9001      	str	r0, [sp, #4]
 800709a:	9128      	str	r1, [sp, #160]	; 0xa0
 800709c:	4617      	mov	r7, r2
 800709e:	460c      	mov	r4, r1
 80070a0:	930d      	str	r3, [sp, #52]	; 0x34
 80070a2:	783b      	ldrb	r3, [r7, #0]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	bf18      	it	ne
 80070a8:	2b25      	cmpne	r3, #37	; 0x25
 80070aa:	463d      	mov	r5, r7
 80070ac:	d016      	beq.n	80070dc <_svfiprintf_r+0x78>
 80070ae:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80070b2:	2b25      	cmp	r3, #37	; 0x25
 80070b4:	bf18      	it	ne
 80070b6:	2b00      	cmpne	r3, #0
 80070b8:	d1f9      	bne.n	80070ae <_svfiprintf_r+0x4a>
 80070ba:	1bee      	subs	r6, r5, r7
 80070bc:	d00e      	beq.n	80070dc <_svfiprintf_r+0x78>
 80070be:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80070c0:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80070c2:	6027      	str	r7, [r4, #0]
 80070c4:	3301      	adds	r3, #1
 80070c6:	1992      	adds	r2, r2, r6
 80070c8:	2b07      	cmp	r3, #7
 80070ca:	6066      	str	r6, [r4, #4]
 80070cc:	922a      	str	r2, [sp, #168]	; 0xa8
 80070ce:	9329      	str	r3, [sp, #164]	; 0xa4
 80070d0:	f300 832a 	bgt.w	8007728 <_svfiprintf_r+0x6c4>
 80070d4:	3408      	adds	r4, #8
 80070d6:	9b04      	ldr	r3, [sp, #16]
 80070d8:	199b      	adds	r3, r3, r6
 80070da:	9304      	str	r3, [sp, #16]
 80070dc:	782b      	ldrb	r3, [r5, #0]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	f000 82c5 	beq.w	800766e <_svfiprintf_r+0x60a>
 80070e4:	2200      	movs	r2, #0
 80070e6:	1c6f      	adds	r7, r5, #1
 80070e8:	4613      	mov	r3, r2
 80070ea:	f88d 20af 	strb.w	r2, [sp, #175]	; 0xaf
 80070ee:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80070f2:	9206      	str	r2, [sp, #24]
 80070f4:	4693      	mov	fp, r2
 80070f6:	f817 2b01 	ldrb.w	r2, [r7], #1
 80070fa:	f1a2 0120 	sub.w	r1, r2, #32
 80070fe:	2958      	cmp	r1, #88	; 0x58
 8007100:	f200 8178 	bhi.w	80073f4 <_svfiprintf_r+0x390>
 8007104:	e8df f011 	tbh	[pc, r1, lsl #1]
 8007108:	01760172 	.word	0x01760172
 800710c:	016f0176 	.word	0x016f0176
 8007110:	01760176 	.word	0x01760176
 8007114:	01760176 	.word	0x01760176
 8007118:	01760176 	.word	0x01760176
 800711c:	01d800af 	.word	0x01d800af
 8007120:	00ba0176 	.word	0x00ba0176
 8007124:	017601da 	.word	0x017601da
 8007128:	01c401d5 	.word	0x01c401d5
 800712c:	01c401c4 	.word	0x01c401c4
 8007130:	01c401c4 	.word	0x01c401c4
 8007134:	01c401c4 	.word	0x01c401c4
 8007138:	01c401c4 	.word	0x01c401c4
 800713c:	01760176 	.word	0x01760176
 8007140:	01760176 	.word	0x01760176
 8007144:	01760176 	.word	0x01760176
 8007148:	01760176 	.word	0x01760176
 800714c:	01760176 	.word	0x01760176
 8007150:	017601a7 	.word	0x017601a7
 8007154:	01760176 	.word	0x01760176
 8007158:	01760176 	.word	0x01760176
 800715c:	01760176 	.word	0x01760176
 8007160:	01760176 	.word	0x01760176
 8007164:	005c0176 	.word	0x005c0176
 8007168:	01760176 	.word	0x01760176
 800716c:	01760176 	.word	0x01760176
 8007170:	00a00176 	.word	0x00a00176
 8007174:	01760176 	.word	0x01760176
 8007178:	0176016a 	.word	0x0176016a
 800717c:	01760176 	.word	0x01760176
 8007180:	01760176 	.word	0x01760176
 8007184:	01760176 	.word	0x01760176
 8007188:	01760176 	.word	0x01760176
 800718c:	01170176 	.word	0x01170176
 8007190:	01760105 	.word	0x01760105
 8007194:	01760176 	.word	0x01760176
 8007198:	01050102 	.word	0x01050102
 800719c:	01760176 	.word	0x01760176
 80071a0:	01760059 	.word	0x01760059
 80071a4:	005e00d1 	.word	0x005e00d1
 80071a8:	005900bd 	.word	0x005900bd
 80071ac:	01870176 	.word	0x01870176
 80071b0:	00a20176 	.word	0x00a20176
 80071b4:	01760176 	.word	0x01760176
 80071b8:	00e2      	.short	0x00e2
 80071ba:	f04b 0b10 	orr.w	fp, fp, #16
 80071be:	e79a      	b.n	80070f6 <_svfiprintf_r+0x92>
 80071c0:	f04b 0b10 	orr.w	fp, fp, #16
 80071c4:	f01b 0210 	ands.w	r2, fp, #16
 80071c8:	f000 8313 	beq.w	80077f2 <_svfiprintf_r+0x78e>
 80071cc:	9805      	ldr	r0, [sp, #20]
 80071ce:	6803      	ldr	r3, [r0, #0]
 80071d0:	2200      	movs	r2, #0
 80071d2:	1a99      	subs	r1, r3, r2
 80071d4:	bf18      	it	ne
 80071d6:	2101      	movne	r1, #1
 80071d8:	3004      	adds	r0, #4
 80071da:	9005      	str	r0, [sp, #20]
 80071dc:	2000      	movs	r0, #0
 80071de:	f88d 00af 	strb.w	r0, [sp, #175]	; 0xaf
 80071e2:	2d00      	cmp	r5, #0
 80071e4:	bfa8      	it	ge
 80071e6:	f02b 0b80 	bicge.w	fp, fp, #128	; 0x80
 80071ea:	2d00      	cmp	r5, #0
 80071ec:	bf18      	it	ne
 80071ee:	f041 0101 	orrne.w	r1, r1, #1
 80071f2:	2900      	cmp	r1, #0
 80071f4:	f000 8228 	beq.w	8007648 <_svfiprintf_r+0x5e4>
 80071f8:	2a01      	cmp	r2, #1
 80071fa:	f000 82cf 	beq.w	800779c <_svfiprintf_r+0x738>
 80071fe:	2a02      	cmp	r2, #2
 8007200:	bf18      	it	ne
 8007202:	4642      	movne	r2, r8
 8007204:	d101      	bne.n	800720a <_svfiprintf_r+0x1a6>
 8007206:	e2b9      	b.n	800777c <_svfiprintf_r+0x718>
 8007208:	4602      	mov	r2, r0
 800720a:	f003 0107 	and.w	r1, r3, #7
 800720e:	3130      	adds	r1, #48	; 0x30
 8007210:	1e50      	subs	r0, r2, #1
 8007212:	08db      	lsrs	r3, r3, #3
 8007214:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007218:	d1f6      	bne.n	8007208 <_svfiprintf_r+0x1a4>
 800721a:	f01b 0f01 	tst.w	fp, #1
 800721e:	9009      	str	r0, [sp, #36]	; 0x24
 8007220:	f040 831a 	bne.w	8007858 <_svfiprintf_r+0x7f4>
 8007224:	ebc0 0308 	rsb	r3, r0, r8
 8007228:	9303      	str	r3, [sp, #12]
 800722a:	9508      	str	r5, [sp, #32]
 800722c:	9803      	ldr	r0, [sp, #12]
 800722e:	9908      	ldr	r1, [sp, #32]
 8007230:	f89d 30af 	ldrb.w	r3, [sp, #175]	; 0xaf
 8007234:	4288      	cmp	r0, r1
 8007236:	bfb8      	it	lt
 8007238:	4608      	movlt	r0, r1
 800723a:	9002      	str	r0, [sp, #8]
 800723c:	2b00      	cmp	r3, #0
 800723e:	f000 808b 	beq.w	8007358 <_svfiprintf_r+0x2f4>
 8007242:	3001      	adds	r0, #1
 8007244:	9002      	str	r0, [sp, #8]
 8007246:	e087      	b.n	8007358 <_svfiprintf_r+0x2f4>
 8007248:	f04b 0b10 	orr.w	fp, fp, #16
 800724c:	f01b 0f10 	tst.w	fp, #16
 8007250:	f000 82c1 	beq.w	80077d6 <_svfiprintf_r+0x772>
 8007254:	9805      	ldr	r0, [sp, #20]
 8007256:	6803      	ldr	r3, [r0, #0]
 8007258:	2201      	movs	r2, #1
 800725a:	1c19      	adds	r1, r3, #0
 800725c:	bf18      	it	ne
 800725e:	2101      	movne	r1, #1
 8007260:	3004      	adds	r0, #4
 8007262:	9005      	str	r0, [sp, #20]
 8007264:	e7ba      	b.n	80071dc <_svfiprintf_r+0x178>
 8007266:	9805      	ldr	r0, [sp, #20]
 8007268:	9905      	ldr	r1, [sp, #20]
 800726a:	6800      	ldr	r0, [r0, #0]
 800726c:	1d0a      	adds	r2, r1, #4
 800726e:	2800      	cmp	r0, #0
 8007270:	9006      	str	r0, [sp, #24]
 8007272:	f280 82e0 	bge.w	8007836 <_svfiprintf_r+0x7d2>
 8007276:	4240      	negs	r0, r0
 8007278:	9006      	str	r0, [sp, #24]
 800727a:	9205      	str	r2, [sp, #20]
 800727c:	f04b 0b04 	orr.w	fp, fp, #4
 8007280:	e739      	b.n	80070f6 <_svfiprintf_r+0x92>
 8007282:	9b05      	ldr	r3, [sp, #20]
 8007284:	9905      	ldr	r1, [sp, #20]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	2230      	movs	r2, #48	; 0x30
 800728a:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
 800728e:	2278      	movs	r2, #120	; 0x78
 8007290:	3104      	adds	r1, #4
 8007292:	f88d 20ad 	strb.w	r2, [sp, #173]	; 0xad
 8007296:	4aaf      	ldr	r2, [pc, #700]	; (8007554 <_svfiprintf_r+0x4f0>)
 8007298:	9105      	str	r1, [sp, #20]
 800729a:	1c19      	adds	r1, r3, #0
 800729c:	bf18      	it	ne
 800729e:	2101      	movne	r1, #1
 80072a0:	920c      	str	r2, [sp, #48]	; 0x30
 80072a2:	f04b 0b02 	orr.w	fp, fp, #2
 80072a6:	2202      	movs	r2, #2
 80072a8:	e798      	b.n	80071dc <_svfiprintf_r+0x178>
 80072aa:	f01b 0f10 	tst.w	fp, #16
 80072ae:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 80072b2:	f040 82dd 	bne.w	8007870 <_svfiprintf_r+0x80c>
 80072b6:	f01b 0f40 	tst.w	fp, #64	; 0x40
 80072ba:	f000 82fb 	beq.w	80078b4 <_svfiprintf_r+0x850>
 80072be:	9a05      	ldr	r2, [sp, #20]
 80072c0:	9804      	ldr	r0, [sp, #16]
 80072c2:	6813      	ldr	r3, [r2, #0]
 80072c4:	3204      	adds	r2, #4
 80072c6:	9205      	str	r2, [sp, #20]
 80072c8:	8018      	strh	r0, [r3, #0]
 80072ca:	e6ea      	b.n	80070a2 <_svfiprintf_r+0x3e>
 80072cc:	49a1      	ldr	r1, [pc, #644]	; (8007554 <_svfiprintf_r+0x4f0>)
 80072ce:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 80072d2:	910c      	str	r1, [sp, #48]	; 0x30
 80072d4:	f01b 0f10 	tst.w	fp, #16
 80072d8:	d103      	bne.n	80072e2 <_svfiprintf_r+0x27e>
 80072da:	f01b 0f40 	tst.w	fp, #64	; 0x40
 80072de:	f040 82d3 	bne.w	8007888 <_svfiprintf_r+0x824>
 80072e2:	9805      	ldr	r0, [sp, #20]
 80072e4:	6803      	ldr	r3, [r0, #0]
 80072e6:	3004      	adds	r0, #4
 80072e8:	9005      	str	r0, [sp, #20]
 80072ea:	1c19      	adds	r1, r3, #0
 80072ec:	bf18      	it	ne
 80072ee:	2101      	movne	r1, #1
 80072f0:	ea1b 0f01 	tst.w	fp, r1
 80072f4:	f000 8287 	beq.w	8007806 <_svfiprintf_r+0x7a2>
 80072f8:	2130      	movs	r1, #48	; 0x30
 80072fa:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
 80072fe:	f88d 20ad 	strb.w	r2, [sp, #173]	; 0xad
 8007302:	f04b 0b02 	orr.w	fp, fp, #2
 8007306:	2101      	movs	r1, #1
 8007308:	2202      	movs	r2, #2
 800730a:	e767      	b.n	80071dc <_svfiprintf_r+0x178>
 800730c:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
 8007310:	e6f1      	b.n	80070f6 <_svfiprintf_r+0x92>
 8007312:	f01b 0f10 	tst.w	fp, #16
 8007316:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 800731a:	f000 80a4 	beq.w	8007466 <_svfiprintf_r+0x402>
 800731e:	9805      	ldr	r0, [sp, #20]
 8007320:	6803      	ldr	r3, [r0, #0]
 8007322:	3004      	adds	r0, #4
 8007324:	9005      	str	r0, [sp, #20]
 8007326:	2b00      	cmp	r3, #0
 8007328:	f2c0 80a9 	blt.w	800747e <_svfiprintf_r+0x41a>
 800732c:	bf0c      	ite	eq
 800732e:	2100      	moveq	r1, #0
 8007330:	2101      	movne	r1, #1
 8007332:	2201      	movs	r2, #1
 8007334:	e755      	b.n	80071e2 <_svfiprintf_r+0x17e>
 8007336:	9b05      	ldr	r3, [sp, #20]
 8007338:	9905      	ldr	r1, [sp, #20]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	2001      	movs	r0, #1
 800733e:	2200      	movs	r2, #0
 8007340:	3104      	adds	r1, #4
 8007342:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
 8007346:	ab1e      	add	r3, sp, #120	; 0x78
 8007348:	f88d 20af 	strb.w	r2, [sp, #175]	; 0xaf
 800734c:	9002      	str	r0, [sp, #8]
 800734e:	9105      	str	r1, [sp, #20]
 8007350:	9003      	str	r0, [sp, #12]
 8007352:	9309      	str	r3, [sp, #36]	; 0x24
 8007354:	2300      	movs	r3, #0
 8007356:	9308      	str	r3, [sp, #32]
 8007358:	f01b 0302 	ands.w	r3, fp, #2
 800735c:	930a      	str	r3, [sp, #40]	; 0x28
 800735e:	d002      	beq.n	8007366 <_svfiprintf_r+0x302>
 8007360:	9b02      	ldr	r3, [sp, #8]
 8007362:	3302      	adds	r3, #2
 8007364:	9302      	str	r3, [sp, #8]
 8007366:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
 800736a:	930b      	str	r3, [sp, #44]	; 0x2c
 800736c:	f040 80c1 	bne.w	80074f2 <_svfiprintf_r+0x48e>
 8007370:	9b06      	ldr	r3, [sp, #24]
 8007372:	9802      	ldr	r0, [sp, #8]
 8007374:	1a1d      	subs	r5, r3, r0
 8007376:	2d00      	cmp	r5, #0
 8007378:	f340 80bb 	ble.w	80074f2 <_svfiprintf_r+0x48e>
 800737c:	2d10      	cmp	r5, #16
 800737e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8007380:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007382:	4e75      	ldr	r6, [pc, #468]	; (8007558 <_svfiprintf_r+0x4f4>)
 8007384:	dd1f      	ble.n	80073c6 <_svfiprintf_r+0x362>
 8007386:	4621      	mov	r1, r4
 8007388:	f04f 0910 	mov.w	r9, #16
 800738c:	9c07      	ldr	r4, [sp, #28]
 800738e:	e002      	b.n	8007396 <_svfiprintf_r+0x332>
 8007390:	3d10      	subs	r5, #16
 8007392:	2d10      	cmp	r5, #16
 8007394:	dd16      	ble.n	80073c4 <_svfiprintf_r+0x360>
 8007396:	3301      	adds	r3, #1
 8007398:	3210      	adds	r2, #16
 800739a:	e881 0240 	stmia.w	r1, {r6, r9}
 800739e:	3108      	adds	r1, #8
 80073a0:	2b07      	cmp	r3, #7
 80073a2:	922a      	str	r2, [sp, #168]	; 0xa8
 80073a4:	9329      	str	r3, [sp, #164]	; 0xa4
 80073a6:	ddf3      	ble.n	8007390 <_svfiprintf_r+0x32c>
 80073a8:	4620      	mov	r0, r4
 80073aa:	4651      	mov	r1, sl
 80073ac:	4642      	mov	r2, r8
 80073ae:	f7ff fdd9 	bl	8006f64 <__ssprint_r>
 80073b2:	2800      	cmp	r0, #0
 80073b4:	f040 8162 	bne.w	800767c <_svfiprintf_r+0x618>
 80073b8:	3d10      	subs	r5, #16
 80073ba:	2d10      	cmp	r5, #16
 80073bc:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80073be:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80073c0:	a90e      	add	r1, sp, #56	; 0x38
 80073c2:	dce8      	bgt.n	8007396 <_svfiprintf_r+0x332>
 80073c4:	460c      	mov	r4, r1
 80073c6:	3301      	adds	r3, #1
 80073c8:	1952      	adds	r2, r2, r5
 80073ca:	2b07      	cmp	r3, #7
 80073cc:	6026      	str	r6, [r4, #0]
 80073ce:	6065      	str	r5, [r4, #4]
 80073d0:	922a      	str	r2, [sp, #168]	; 0xa8
 80073d2:	9329      	str	r3, [sp, #164]	; 0xa4
 80073d4:	f300 8219 	bgt.w	800780a <_svfiprintf_r+0x7a6>
 80073d8:	3408      	adds	r4, #8
 80073da:	e08c      	b.n	80074f6 <_svfiprintf_r+0x492>
 80073dc:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 80073e0:	4b5e      	ldr	r3, [pc, #376]	; (800755c <_svfiprintf_r+0x4f8>)
 80073e2:	930c      	str	r3, [sp, #48]	; 0x30
 80073e4:	e776      	b.n	80072d4 <_svfiprintf_r+0x270>
 80073e6:	f04b 0b01 	orr.w	fp, fp, #1
 80073ea:	e684      	b.n	80070f6 <_svfiprintf_r+0x92>
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	bf08      	it	eq
 80073f0:	2320      	moveq	r3, #32
 80073f2:	e680      	b.n	80070f6 <_svfiprintf_r+0x92>
 80073f4:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 80073f8:	2a00      	cmp	r2, #0
 80073fa:	f000 8138 	beq.w	800766e <_svfiprintf_r+0x60a>
 80073fe:	2301      	movs	r3, #1
 8007400:	9302      	str	r3, [sp, #8]
 8007402:	2300      	movs	r3, #0
 8007404:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 8007408:	2301      	movs	r3, #1
 800740a:	9303      	str	r3, [sp, #12]
 800740c:	ab1e      	add	r3, sp, #120	; 0x78
 800740e:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 8007412:	9309      	str	r3, [sp, #36]	; 0x24
 8007414:	e79e      	b.n	8007354 <_svfiprintf_r+0x2f0>
 8007416:	9b05      	ldr	r3, [sp, #20]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	9309      	str	r3, [sp, #36]	; 0x24
 800741c:	9b05      	ldr	r3, [sp, #20]
 800741e:	3304      	adds	r3, #4
 8007420:	9305      	str	r3, [sp, #20]
 8007422:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007424:	2600      	movs	r6, #0
 8007426:	f88d 60af 	strb.w	r6, [sp, #175]	; 0xaf
 800742a:	2b00      	cmp	r3, #0
 800742c:	f000 8259 	beq.w	80078e2 <_svfiprintf_r+0x87e>
 8007430:	2d00      	cmp	r5, #0
 8007432:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007434:	f2c0 822d 	blt.w	8007892 <_svfiprintf_r+0x82e>
 8007438:	4631      	mov	r1, r6
 800743a:	462a      	mov	r2, r5
 800743c:	f7fe ff50 	bl	80062e0 <memchr>
 8007440:	2800      	cmp	r0, #0
 8007442:	f000 8258 	beq.w	80078f6 <_svfiprintf_r+0x892>
 8007446:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007448:	9608      	str	r6, [sp, #32]
 800744a:	1ac0      	subs	r0, r0, r3
 800744c:	42a8      	cmp	r0, r5
 800744e:	9003      	str	r0, [sp, #12]
 8007450:	bfc8      	it	gt
 8007452:	9503      	strgt	r5, [sp, #12]
 8007454:	e6ea      	b.n	800722c <_svfiprintf_r+0x1c8>
 8007456:	f04b 0b10 	orr.w	fp, fp, #16
 800745a:	f01b 0f10 	tst.w	fp, #16
 800745e:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 8007462:	f47f af5c 	bne.w	800731e <_svfiprintf_r+0x2ba>
 8007466:	f01b 0f40 	tst.w	fp, #64	; 0x40
 800746a:	f000 8208 	beq.w	800787e <_svfiprintf_r+0x81a>
 800746e:	9905      	ldr	r1, [sp, #20]
 8007470:	f9b1 3000 	ldrsh.w	r3, [r1]
 8007474:	3104      	adds	r1, #4
 8007476:	2b00      	cmp	r3, #0
 8007478:	9105      	str	r1, [sp, #20]
 800747a:	f6bf af57 	bge.w	800732c <_svfiprintf_r+0x2c8>
 800747e:	425b      	negs	r3, r3
 8007480:	222d      	movs	r2, #45	; 0x2d
 8007482:	1c19      	adds	r1, r3, #0
 8007484:	f88d 20af 	strb.w	r2, [sp, #175]	; 0xaf
 8007488:	bf18      	it	ne
 800748a:	2101      	movne	r1, #1
 800748c:	2201      	movs	r2, #1
 800748e:	e6a8      	b.n	80071e2 <_svfiprintf_r+0x17e>
 8007490:	4638      	mov	r0, r7
 8007492:	2100      	movs	r1, #0
 8007494:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 8007498:	f810 2b01 	ldrb.w	r2, [r0], #1
 800749c:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80074a0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80074a4:	2e09      	cmp	r6, #9
 80074a6:	eb07 0141 	add.w	r1, r7, r1, lsl #1
 80074aa:	4607      	mov	r7, r0
 80074ac:	d9f2      	bls.n	8007494 <_svfiprintf_r+0x430>
 80074ae:	9106      	str	r1, [sp, #24]
 80074b0:	e623      	b.n	80070fa <_svfiprintf_r+0x96>
 80074b2:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 80074b6:	e61e      	b.n	80070f6 <_svfiprintf_r+0x92>
 80074b8:	232b      	movs	r3, #43	; 0x2b
 80074ba:	e61c      	b.n	80070f6 <_svfiprintf_r+0x92>
 80074bc:	f817 2b01 	ldrb.w	r2, [r7], #1
 80074c0:	2a2a      	cmp	r2, #42	; 0x2a
 80074c2:	f000 81ae 	beq.w	8007822 <_svfiprintf_r+0x7be>
 80074c6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80074ca:	2500      	movs	r5, #0
 80074cc:	2909      	cmp	r1, #9
 80074ce:	f63f ae14 	bhi.w	80070fa <_svfiprintf_r+0x96>
 80074d2:	4638      	mov	r0, r7
 80074d4:	2500      	movs	r5, #0
 80074d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074da:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80074de:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 80074e2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80074e6:	2909      	cmp	r1, #9
 80074e8:	4607      	mov	r7, r0
 80074ea:	d9f4      	bls.n	80074d6 <_svfiprintf_r+0x472>
 80074ec:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 80074f0:	e603      	b.n	80070fa <_svfiprintf_r+0x96>
 80074f2:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80074f4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80074f6:	f89d 10af 	ldrb.w	r1, [sp, #175]	; 0xaf
 80074fa:	b161      	cbz	r1, 8007516 <_svfiprintf_r+0x4b2>
 80074fc:	3301      	adds	r3, #1
 80074fe:	f10d 01af 	add.w	r1, sp, #175	; 0xaf
 8007502:	3201      	adds	r2, #1
 8007504:	6021      	str	r1, [r4, #0]
 8007506:	2101      	movs	r1, #1
 8007508:	2b07      	cmp	r3, #7
 800750a:	6061      	str	r1, [r4, #4]
 800750c:	922a      	str	r2, [sp, #168]	; 0xa8
 800750e:	9329      	str	r3, [sp, #164]	; 0xa4
 8007510:	f300 811e 	bgt.w	8007750 <_svfiprintf_r+0x6ec>
 8007514:	3408      	adds	r4, #8
 8007516:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007518:	b159      	cbz	r1, 8007532 <_svfiprintf_r+0x4ce>
 800751a:	3301      	adds	r3, #1
 800751c:	a92b      	add	r1, sp, #172	; 0xac
 800751e:	3202      	adds	r2, #2
 8007520:	6021      	str	r1, [r4, #0]
 8007522:	2102      	movs	r1, #2
 8007524:	2b07      	cmp	r3, #7
 8007526:	6061      	str	r1, [r4, #4]
 8007528:	922a      	str	r2, [sp, #168]	; 0xa8
 800752a:	9329      	str	r3, [sp, #164]	; 0xa4
 800752c:	f300 811b 	bgt.w	8007766 <_svfiprintf_r+0x702>
 8007530:	3408      	adds	r4, #8
 8007532:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007534:	2880      	cmp	r0, #128	; 0x80
 8007536:	f000 80ae 	beq.w	8007696 <_svfiprintf_r+0x632>
 800753a:	9808      	ldr	r0, [sp, #32]
 800753c:	9903      	ldr	r1, [sp, #12]
 800753e:	1a45      	subs	r5, r0, r1
 8007540:	2d00      	cmp	r5, #0
 8007542:	dd33      	ble.n	80075ac <_svfiprintf_r+0x548>
 8007544:	2d10      	cmp	r5, #16
 8007546:	4e06      	ldr	r6, [pc, #24]	; (8007560 <_svfiprintf_r+0x4fc>)
 8007548:	dd26      	ble.n	8007598 <_svfiprintf_r+0x534>
 800754a:	4621      	mov	r1, r4
 800754c:	f04f 0910 	mov.w	r9, #16
 8007550:	9c07      	ldr	r4, [sp, #28]
 8007552:	e00a      	b.n	800756a <_svfiprintf_r+0x506>
 8007554:	08008acc 	.word	0x08008acc
 8007558:	08008a18 	.word	0x08008a18
 800755c:	08008ab8 	.word	0x08008ab8
 8007560:	08008a28 	.word	0x08008a28
 8007564:	3d10      	subs	r5, #16
 8007566:	2d10      	cmp	r5, #16
 8007568:	dd15      	ble.n	8007596 <_svfiprintf_r+0x532>
 800756a:	3301      	adds	r3, #1
 800756c:	3210      	adds	r2, #16
 800756e:	e881 0240 	stmia.w	r1, {r6, r9}
 8007572:	3108      	adds	r1, #8
 8007574:	2b07      	cmp	r3, #7
 8007576:	922a      	str	r2, [sp, #168]	; 0xa8
 8007578:	9329      	str	r3, [sp, #164]	; 0xa4
 800757a:	ddf3      	ble.n	8007564 <_svfiprintf_r+0x500>
 800757c:	4620      	mov	r0, r4
 800757e:	4651      	mov	r1, sl
 8007580:	4642      	mov	r2, r8
 8007582:	f7ff fcef 	bl	8006f64 <__ssprint_r>
 8007586:	2800      	cmp	r0, #0
 8007588:	d178      	bne.n	800767c <_svfiprintf_r+0x618>
 800758a:	3d10      	subs	r5, #16
 800758c:	2d10      	cmp	r5, #16
 800758e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8007590:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007592:	a90e      	add	r1, sp, #56	; 0x38
 8007594:	dce9      	bgt.n	800756a <_svfiprintf_r+0x506>
 8007596:	460c      	mov	r4, r1
 8007598:	3301      	adds	r3, #1
 800759a:	1952      	adds	r2, r2, r5
 800759c:	2b07      	cmp	r3, #7
 800759e:	6026      	str	r6, [r4, #0]
 80075a0:	6065      	str	r5, [r4, #4]
 80075a2:	922a      	str	r2, [sp, #168]	; 0xa8
 80075a4:	9329      	str	r3, [sp, #164]	; 0xa4
 80075a6:	f300 80c8 	bgt.w	800773a <_svfiprintf_r+0x6d6>
 80075aa:	3408      	adds	r4, #8
 80075ac:	9903      	ldr	r1, [sp, #12]
 80075ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 80075b0:	3301      	adds	r3, #1
 80075b2:	1852      	adds	r2, r2, r1
 80075b4:	2b07      	cmp	r3, #7
 80075b6:	e884 0003 	stmia.w	r4, {r0, r1}
 80075ba:	922a      	str	r2, [sp, #168]	; 0xa8
 80075bc:	9329      	str	r3, [sp, #164]	; 0xa4
 80075be:	bfd8      	it	le
 80075c0:	f104 0108 	addle.w	r1, r4, #8
 80075c4:	f300 809a 	bgt.w	80076fc <_svfiprintf_r+0x698>
 80075c8:	f01b 0f04 	tst.w	fp, #4
 80075cc:	d02e      	beq.n	800762c <_svfiprintf_r+0x5c8>
 80075ce:	9b06      	ldr	r3, [sp, #24]
 80075d0:	9802      	ldr	r0, [sp, #8]
 80075d2:	1a1d      	subs	r5, r3, r0
 80075d4:	2d00      	cmp	r5, #0
 80075d6:	dd29      	ble.n	800762c <_svfiprintf_r+0x5c8>
 80075d8:	2d10      	cmp	r5, #16
 80075da:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80075dc:	4e97      	ldr	r6, [pc, #604]	; (800783c <_svfiprintf_r+0x7d8>)
 80075de:	dd1c      	ble.n	800761a <_svfiprintf_r+0x5b6>
 80075e0:	2410      	movs	r4, #16
 80075e2:	f8dd 901c 	ldr.w	r9, [sp, #28]
 80075e6:	e002      	b.n	80075ee <_svfiprintf_r+0x58a>
 80075e8:	3d10      	subs	r5, #16
 80075ea:	2d10      	cmp	r5, #16
 80075ec:	dd15      	ble.n	800761a <_svfiprintf_r+0x5b6>
 80075ee:	3301      	adds	r3, #1
 80075f0:	3210      	adds	r2, #16
 80075f2:	600e      	str	r6, [r1, #0]
 80075f4:	604c      	str	r4, [r1, #4]
 80075f6:	3108      	adds	r1, #8
 80075f8:	2b07      	cmp	r3, #7
 80075fa:	922a      	str	r2, [sp, #168]	; 0xa8
 80075fc:	9329      	str	r3, [sp, #164]	; 0xa4
 80075fe:	ddf3      	ble.n	80075e8 <_svfiprintf_r+0x584>
 8007600:	4648      	mov	r0, r9
 8007602:	4651      	mov	r1, sl
 8007604:	4642      	mov	r2, r8
 8007606:	f7ff fcad 	bl	8006f64 <__ssprint_r>
 800760a:	2800      	cmp	r0, #0
 800760c:	d136      	bne.n	800767c <_svfiprintf_r+0x618>
 800760e:	3d10      	subs	r5, #16
 8007610:	2d10      	cmp	r5, #16
 8007612:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8007614:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007616:	a90e      	add	r1, sp, #56	; 0x38
 8007618:	dce9      	bgt.n	80075ee <_svfiprintf_r+0x58a>
 800761a:	3301      	adds	r3, #1
 800761c:	18aa      	adds	r2, r5, r2
 800761e:	2b07      	cmp	r3, #7
 8007620:	600e      	str	r6, [r1, #0]
 8007622:	604d      	str	r5, [r1, #4]
 8007624:	922a      	str	r2, [sp, #168]	; 0xa8
 8007626:	9329      	str	r3, [sp, #164]	; 0xa4
 8007628:	f300 810c 	bgt.w	8007844 <_svfiprintf_r+0x7e0>
 800762c:	9b04      	ldr	r3, [sp, #16]
 800762e:	9902      	ldr	r1, [sp, #8]
 8007630:	9806      	ldr	r0, [sp, #24]
 8007632:	4281      	cmp	r1, r0
 8007634:	bfac      	ite	ge
 8007636:	185b      	addge	r3, r3, r1
 8007638:	181b      	addlt	r3, r3, r0
 800763a:	9304      	str	r3, [sp, #16]
 800763c:	2a00      	cmp	r2, #0
 800763e:	d167      	bne.n	8007710 <_svfiprintf_r+0x6ac>
 8007640:	2300      	movs	r3, #0
 8007642:	9329      	str	r3, [sp, #164]	; 0xa4
 8007644:	ac0e      	add	r4, sp, #56	; 0x38
 8007646:	e52c      	b.n	80070a2 <_svfiprintf_r+0x3e>
 8007648:	2a00      	cmp	r2, #0
 800764a:	d169      	bne.n	8007720 <_svfiprintf_r+0x6bc>
 800764c:	f01b 0f01 	tst.w	fp, #1
 8007650:	bf04      	itt	eq
 8007652:	9203      	streq	r2, [sp, #12]
 8007654:	f8cd 8024 	streq.w	r8, [sp, #36]	; 0x24
 8007658:	f43f ade7 	beq.w	800722a <_svfiprintf_r+0x1c6>
 800765c:	2330      	movs	r3, #48	; 0x30
 800765e:	f88d 309f 	strb.w	r3, [sp, #159]	; 0x9f
 8007662:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007664:	9303      	str	r3, [sp, #12]
 8007666:	f10d 039f 	add.w	r3, sp, #159	; 0x9f
 800766a:	9309      	str	r3, [sp, #36]	; 0x24
 800766c:	e5dd      	b.n	800722a <_svfiprintf_r+0x1c6>
 800766e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8007670:	b123      	cbz	r3, 800767c <_svfiprintf_r+0x618>
 8007672:	9807      	ldr	r0, [sp, #28]
 8007674:	4651      	mov	r1, sl
 8007676:	aa28      	add	r2, sp, #160	; 0xa0
 8007678:	f7ff fc74 	bl	8006f64 <__ssprint_r>
 800767c:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8007680:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007684:	9b04      	ldr	r3, [sp, #16]
 8007686:	bf18      	it	ne
 8007688:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 800768c:	9304      	str	r3, [sp, #16]
 800768e:	9804      	ldr	r0, [sp, #16]
 8007690:	b02d      	add	sp, #180	; 0xb4
 8007692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007696:	9906      	ldr	r1, [sp, #24]
 8007698:	9802      	ldr	r0, [sp, #8]
 800769a:	1a0d      	subs	r5, r1, r0
 800769c:	2d00      	cmp	r5, #0
 800769e:	f77f af4c 	ble.w	800753a <_svfiprintf_r+0x4d6>
 80076a2:	2d10      	cmp	r5, #16
 80076a4:	4e66      	ldr	r6, [pc, #408]	; (8007840 <_svfiprintf_r+0x7dc>)
 80076a6:	dd1e      	ble.n	80076e6 <_svfiprintf_r+0x682>
 80076a8:	4621      	mov	r1, r4
 80076aa:	f04f 0910 	mov.w	r9, #16
 80076ae:	9c07      	ldr	r4, [sp, #28]
 80076b0:	e002      	b.n	80076b8 <_svfiprintf_r+0x654>
 80076b2:	3d10      	subs	r5, #16
 80076b4:	2d10      	cmp	r5, #16
 80076b6:	dd15      	ble.n	80076e4 <_svfiprintf_r+0x680>
 80076b8:	3301      	adds	r3, #1
 80076ba:	3210      	adds	r2, #16
 80076bc:	e881 0240 	stmia.w	r1, {r6, r9}
 80076c0:	3108      	adds	r1, #8
 80076c2:	2b07      	cmp	r3, #7
 80076c4:	922a      	str	r2, [sp, #168]	; 0xa8
 80076c6:	9329      	str	r3, [sp, #164]	; 0xa4
 80076c8:	ddf3      	ble.n	80076b2 <_svfiprintf_r+0x64e>
 80076ca:	4620      	mov	r0, r4
 80076cc:	4651      	mov	r1, sl
 80076ce:	4642      	mov	r2, r8
 80076d0:	f7ff fc48 	bl	8006f64 <__ssprint_r>
 80076d4:	2800      	cmp	r0, #0
 80076d6:	d1d1      	bne.n	800767c <_svfiprintf_r+0x618>
 80076d8:	3d10      	subs	r5, #16
 80076da:	2d10      	cmp	r5, #16
 80076dc:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80076de:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80076e0:	a90e      	add	r1, sp, #56	; 0x38
 80076e2:	dce9      	bgt.n	80076b8 <_svfiprintf_r+0x654>
 80076e4:	460c      	mov	r4, r1
 80076e6:	3301      	adds	r3, #1
 80076e8:	1952      	adds	r2, r2, r5
 80076ea:	2b07      	cmp	r3, #7
 80076ec:	6026      	str	r6, [r4, #0]
 80076ee:	6065      	str	r5, [r4, #4]
 80076f0:	922a      	str	r2, [sp, #168]	; 0xa8
 80076f2:	9329      	str	r3, [sp, #164]	; 0xa4
 80076f4:	f300 80d2 	bgt.w	800789c <_svfiprintf_r+0x838>
 80076f8:	3408      	adds	r4, #8
 80076fa:	e71e      	b.n	800753a <_svfiprintf_r+0x4d6>
 80076fc:	9807      	ldr	r0, [sp, #28]
 80076fe:	4651      	mov	r1, sl
 8007700:	4642      	mov	r2, r8
 8007702:	f7ff fc2f 	bl	8006f64 <__ssprint_r>
 8007706:	2800      	cmp	r0, #0
 8007708:	d1b8      	bne.n	800767c <_svfiprintf_r+0x618>
 800770a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800770c:	a90e      	add	r1, sp, #56	; 0x38
 800770e:	e75b      	b.n	80075c8 <_svfiprintf_r+0x564>
 8007710:	9807      	ldr	r0, [sp, #28]
 8007712:	4651      	mov	r1, sl
 8007714:	4642      	mov	r2, r8
 8007716:	f7ff fc25 	bl	8006f64 <__ssprint_r>
 800771a:	2800      	cmp	r0, #0
 800771c:	d090      	beq.n	8007640 <_svfiprintf_r+0x5dc>
 800771e:	e7ad      	b.n	800767c <_svfiprintf_r+0x618>
 8007720:	9103      	str	r1, [sp, #12]
 8007722:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8007726:	e580      	b.n	800722a <_svfiprintf_r+0x1c6>
 8007728:	9807      	ldr	r0, [sp, #28]
 800772a:	4651      	mov	r1, sl
 800772c:	4642      	mov	r2, r8
 800772e:	f7ff fc19 	bl	8006f64 <__ssprint_r>
 8007732:	2800      	cmp	r0, #0
 8007734:	d1a2      	bne.n	800767c <_svfiprintf_r+0x618>
 8007736:	ac0e      	add	r4, sp, #56	; 0x38
 8007738:	e4cd      	b.n	80070d6 <_svfiprintf_r+0x72>
 800773a:	9807      	ldr	r0, [sp, #28]
 800773c:	4651      	mov	r1, sl
 800773e:	4642      	mov	r2, r8
 8007740:	f7ff fc10 	bl	8006f64 <__ssprint_r>
 8007744:	2800      	cmp	r0, #0
 8007746:	d199      	bne.n	800767c <_svfiprintf_r+0x618>
 8007748:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800774a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800774c:	ac0e      	add	r4, sp, #56	; 0x38
 800774e:	e72d      	b.n	80075ac <_svfiprintf_r+0x548>
 8007750:	9807      	ldr	r0, [sp, #28]
 8007752:	4651      	mov	r1, sl
 8007754:	4642      	mov	r2, r8
 8007756:	f7ff fc05 	bl	8006f64 <__ssprint_r>
 800775a:	2800      	cmp	r0, #0
 800775c:	d18e      	bne.n	800767c <_svfiprintf_r+0x618>
 800775e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8007760:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007762:	ac0e      	add	r4, sp, #56	; 0x38
 8007764:	e6d7      	b.n	8007516 <_svfiprintf_r+0x4b2>
 8007766:	9807      	ldr	r0, [sp, #28]
 8007768:	4651      	mov	r1, sl
 800776a:	4642      	mov	r2, r8
 800776c:	f7ff fbfa 	bl	8006f64 <__ssprint_r>
 8007770:	2800      	cmp	r0, #0
 8007772:	d183      	bne.n	800767c <_svfiprintf_r+0x618>
 8007774:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8007776:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007778:	ac0e      	add	r4, sp, #56	; 0x38
 800777a:	e6da      	b.n	8007532 <_svfiprintf_r+0x4ce>
 800777c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800777e:	f10d 029f 	add.w	r2, sp, #159	; 0x9f
 8007782:	f003 000f 	and.w	r0, r3, #15
 8007786:	4611      	mov	r1, r2
 8007788:	5c30      	ldrb	r0, [r6, r0]
 800778a:	3a01      	subs	r2, #1
 800778c:	091b      	lsrs	r3, r3, #4
 800778e:	7008      	strb	r0, [r1, #0]
 8007790:	d1f7      	bne.n	8007782 <_svfiprintf_r+0x71e>
 8007792:	ebc1 0308 	rsb	r3, r1, r8
 8007796:	9109      	str	r1, [sp, #36]	; 0x24
 8007798:	9303      	str	r3, [sp, #12]
 800779a:	e546      	b.n	800722a <_svfiprintf_r+0x1c6>
 800779c:	2b09      	cmp	r3, #9
 800779e:	bf82      	ittt	hi
 80077a0:	f64c 46cd 	movwhi	r6, #52429	; 0xcccd
 80077a4:	f10d 019f 	addhi.w	r1, sp, #159	; 0x9f
 80077a8:	f6cc 46cc 	movthi	r6, #52428	; 0xcccc
 80077ac:	d801      	bhi.n	80077b2 <_svfiprintf_r+0x74e>
 80077ae:	3330      	adds	r3, #48	; 0x30
 80077b0:	e755      	b.n	800765e <_svfiprintf_r+0x5fa>
 80077b2:	fba6 0203 	umull	r0, r2, r6, r3
 80077b6:	08d2      	lsrs	r2, r2, #3
 80077b8:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
 80077bc:	eba3 0c4c 	sub.w	ip, r3, ip, lsl #1
 80077c0:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 80077c4:	4608      	mov	r0, r1
 80077c6:	f881 c000 	strb.w	ip, [r1]
 80077ca:	4613      	mov	r3, r2
 80077cc:	3901      	subs	r1, #1
 80077ce:	2a00      	cmp	r2, #0
 80077d0:	d1ef      	bne.n	80077b2 <_svfiprintf_r+0x74e>
 80077d2:	9009      	str	r0, [sp, #36]	; 0x24
 80077d4:	e526      	b.n	8007224 <_svfiprintf_r+0x1c0>
 80077d6:	9905      	ldr	r1, [sp, #20]
 80077d8:	f01b 0f40 	tst.w	fp, #64	; 0x40
 80077dc:	bf14      	ite	ne
 80077de:	880b      	ldrhne	r3, [r1, #0]
 80077e0:	680b      	ldreq	r3, [r1, #0]
 80077e2:	2201      	movs	r2, #1
 80077e4:	9805      	ldr	r0, [sp, #20]
 80077e6:	1c19      	adds	r1, r3, #0
 80077e8:	bf18      	it	ne
 80077ea:	2101      	movne	r1, #1
 80077ec:	3004      	adds	r0, #4
 80077ee:	9005      	str	r0, [sp, #20]
 80077f0:	e4f4      	b.n	80071dc <_svfiprintf_r+0x178>
 80077f2:	f01b 0140 	ands.w	r1, fp, #64	; 0x40
 80077f6:	bf0b      	itete	eq
 80077f8:	9a05      	ldreq	r2, [sp, #20]
 80077fa:	9905      	ldrne	r1, [sp, #20]
 80077fc:	6813      	ldreq	r3, [r2, #0]
 80077fe:	880b      	ldrhne	r3, [r1, #0]
 8007800:	bf08      	it	eq
 8007802:	460a      	moveq	r2, r1
 8007804:	e7ee      	b.n	80077e4 <_svfiprintf_r+0x780>
 8007806:	2202      	movs	r2, #2
 8007808:	e4e8      	b.n	80071dc <_svfiprintf_r+0x178>
 800780a:	9807      	ldr	r0, [sp, #28]
 800780c:	4651      	mov	r1, sl
 800780e:	4642      	mov	r2, r8
 8007810:	f7ff fba8 	bl	8006f64 <__ssprint_r>
 8007814:	2800      	cmp	r0, #0
 8007816:	f47f af31 	bne.w	800767c <_svfiprintf_r+0x618>
 800781a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800781c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800781e:	ac0e      	add	r4, sp, #56	; 0x38
 8007820:	e669      	b.n	80074f6 <_svfiprintf_r+0x492>
 8007822:	9a05      	ldr	r2, [sp, #20]
 8007824:	6815      	ldr	r5, [r2, #0]
 8007826:	3204      	adds	r2, #4
 8007828:	2d00      	cmp	r5, #0
 800782a:	bfbc      	itt	lt
 800782c:	9205      	strlt	r2, [sp, #20]
 800782e:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
 8007832:	f6ff ac60 	blt.w	80070f6 <_svfiprintf_r+0x92>
 8007836:	9205      	str	r2, [sp, #20]
 8007838:	e45d      	b.n	80070f6 <_svfiprintf_r+0x92>
 800783a:	bf00      	nop
 800783c:	08008a18 	.word	0x08008a18
 8007840:	08008a28 	.word	0x08008a28
 8007844:	9807      	ldr	r0, [sp, #28]
 8007846:	4651      	mov	r1, sl
 8007848:	4642      	mov	r2, r8
 800784a:	f7ff fb8b 	bl	8006f64 <__ssprint_r>
 800784e:	2800      	cmp	r0, #0
 8007850:	f47f af14 	bne.w	800767c <_svfiprintf_r+0x618>
 8007854:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8007856:	e6e9      	b.n	800762c <_svfiprintf_r+0x5c8>
 8007858:	2930      	cmp	r1, #48	; 0x30
 800785a:	d004      	beq.n	8007866 <_svfiprintf_r+0x802>
 800785c:	1e93      	subs	r3, r2, #2
 800785e:	9309      	str	r3, [sp, #36]	; 0x24
 8007860:	2330      	movs	r3, #48	; 0x30
 8007862:	f802 3c02 	strb.w	r3, [r2, #-2]
 8007866:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007868:	ebc3 0308 	rsb	r3, r3, r8
 800786c:	9303      	str	r3, [sp, #12]
 800786e:	e4dc      	b.n	800722a <_svfiprintf_r+0x1c6>
 8007870:	9805      	ldr	r0, [sp, #20]
 8007872:	9904      	ldr	r1, [sp, #16]
 8007874:	6803      	ldr	r3, [r0, #0]
 8007876:	3004      	adds	r0, #4
 8007878:	9005      	str	r0, [sp, #20]
 800787a:	6019      	str	r1, [r3, #0]
 800787c:	e411      	b.n	80070a2 <_svfiprintf_r+0x3e>
 800787e:	9a05      	ldr	r2, [sp, #20]
 8007880:	6813      	ldr	r3, [r2, #0]
 8007882:	3204      	adds	r2, #4
 8007884:	9205      	str	r2, [sp, #20]
 8007886:	e54e      	b.n	8007326 <_svfiprintf_r+0x2c2>
 8007888:	9905      	ldr	r1, [sp, #20]
 800788a:	880b      	ldrh	r3, [r1, #0]
 800788c:	3104      	adds	r1, #4
 800788e:	9105      	str	r1, [sp, #20]
 8007890:	e52b      	b.n	80072ea <_svfiprintf_r+0x286>
 8007892:	f7ff fb37 	bl	8006f04 <strlen>
 8007896:	9608      	str	r6, [sp, #32]
 8007898:	9003      	str	r0, [sp, #12]
 800789a:	e4c7      	b.n	800722c <_svfiprintf_r+0x1c8>
 800789c:	9807      	ldr	r0, [sp, #28]
 800789e:	4651      	mov	r1, sl
 80078a0:	4642      	mov	r2, r8
 80078a2:	f7ff fb5f 	bl	8006f64 <__ssprint_r>
 80078a6:	2800      	cmp	r0, #0
 80078a8:	f47f aee8 	bne.w	800767c <_svfiprintf_r+0x618>
 80078ac:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80078ae:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80078b0:	ac0e      	add	r4, sp, #56	; 0x38
 80078b2:	e642      	b.n	800753a <_svfiprintf_r+0x4d6>
 80078b4:	9905      	ldr	r1, [sp, #20]
 80078b6:	9a04      	ldr	r2, [sp, #16]
 80078b8:	680b      	ldr	r3, [r1, #0]
 80078ba:	3104      	adds	r1, #4
 80078bc:	9105      	str	r1, [sp, #20]
 80078be:	601a      	str	r2, [r3, #0]
 80078c0:	f7ff bbef 	b.w	80070a2 <_svfiprintf_r+0x3e>
 80078c4:	2140      	movs	r1, #64	; 0x40
 80078c6:	9200      	str	r2, [sp, #0]
 80078c8:	f7fe fa56 	bl	8005d78 <_malloc_r>
 80078cc:	9a00      	ldr	r2, [sp, #0]
 80078ce:	f8ca 0000 	str.w	r0, [sl]
 80078d2:	f8ca 0010 	str.w	r0, [sl, #16]
 80078d6:	b188      	cbz	r0, 80078fc <_svfiprintf_r+0x898>
 80078d8:	2340      	movs	r3, #64	; 0x40
 80078da:	f8ca 3014 	str.w	r3, [sl, #20]
 80078de:	f7ff bbcf 	b.w	8007080 <_svfiprintf_r+0x1c>
 80078e2:	2d06      	cmp	r5, #6
 80078e4:	bf28      	it	cs
 80078e6:	2506      	movcs	r5, #6
 80078e8:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 80078ec:	9302      	str	r3, [sp, #8]
 80078ee:	4b07      	ldr	r3, [pc, #28]	; (800790c <_svfiprintf_r+0x8a8>)
 80078f0:	9503      	str	r5, [sp, #12]
 80078f2:	9309      	str	r3, [sp, #36]	; 0x24
 80078f4:	e52e      	b.n	8007354 <_svfiprintf_r+0x2f0>
 80078f6:	9503      	str	r5, [sp, #12]
 80078f8:	9008      	str	r0, [sp, #32]
 80078fa:	e497      	b.n	800722c <_svfiprintf_r+0x1c8>
 80078fc:	9807      	ldr	r0, [sp, #28]
 80078fe:	230c      	movs	r3, #12
 8007900:	6003      	str	r3, [r0, #0]
 8007902:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007906:	9304      	str	r3, [sp, #16]
 8007908:	e6c1      	b.n	800768e <_svfiprintf_r+0x62a>
 800790a:	bf00      	nop
 800790c:	08008ae0 	.word	0x08008ae0

08007910 <_calloc_r>:
 8007910:	b510      	push	{r4, lr}
 8007912:	fb01 f102 	mul.w	r1, r1, r2
 8007916:	f7fe fa2f 	bl	8005d78 <_malloc_r>
 800791a:	4604      	mov	r4, r0
 800791c:	b300      	cbz	r0, 8007960 <_calloc_r+0x50>
 800791e:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8007922:	f022 0203 	bic.w	r2, r2, #3
 8007926:	3a04      	subs	r2, #4
 8007928:	2a24      	cmp	r2, #36	; 0x24
 800792a:	d81b      	bhi.n	8007964 <_calloc_r+0x54>
 800792c:	2a13      	cmp	r2, #19
 800792e:	bf98      	it	ls
 8007930:	4602      	movls	r2, r0
 8007932:	d911      	bls.n	8007958 <_calloc_r+0x48>
 8007934:	2300      	movs	r3, #0
 8007936:	2a1b      	cmp	r2, #27
 8007938:	6003      	str	r3, [r0, #0]
 800793a:	6043      	str	r3, [r0, #4]
 800793c:	bf98      	it	ls
 800793e:	f100 0208 	addls.w	r2, r0, #8
 8007942:	d909      	bls.n	8007958 <_calloc_r+0x48>
 8007944:	2a24      	cmp	r2, #36	; 0x24
 8007946:	6083      	str	r3, [r0, #8]
 8007948:	60c3      	str	r3, [r0, #12]
 800794a:	bf11      	iteee	ne
 800794c:	f100 0210 	addne.w	r2, r0, #16
 8007950:	6103      	streq	r3, [r0, #16]
 8007952:	6143      	streq	r3, [r0, #20]
 8007954:	f100 0218 	addeq.w	r2, r0, #24
 8007958:	2300      	movs	r3, #0
 800795a:	6013      	str	r3, [r2, #0]
 800795c:	6053      	str	r3, [r2, #4]
 800795e:	6093      	str	r3, [r2, #8]
 8007960:	4620      	mov	r0, r4
 8007962:	bd10      	pop	{r4, pc}
 8007964:	2100      	movs	r1, #0
 8007966:	f000 f85b 	bl	8007a20 <memset>
 800796a:	4620      	mov	r0, r4
 800796c:	bd10      	pop	{r4, pc}
 800796e:	bf00      	nop

08007970 <memmove>:
 8007970:	4288      	cmp	r0, r1
 8007972:	b4f0      	push	{r4, r5, r6, r7}
 8007974:	d912      	bls.n	800799c <memmove+0x2c>
 8007976:	188d      	adds	r5, r1, r2
 8007978:	42a8      	cmp	r0, r5
 800797a:	d20f      	bcs.n	800799c <memmove+0x2c>
 800797c:	b162      	cbz	r2, 8007998 <memmove+0x28>
 800797e:	4251      	negs	r1, r2
 8007980:	4613      	mov	r3, r2
 8007982:	1882      	adds	r2, r0, r2
 8007984:	186d      	adds	r5, r5, r1
 8007986:	1852      	adds	r2, r2, r1
 8007988:	18ec      	adds	r4, r5, r3
 800798a:	18d1      	adds	r1, r2, r3
 800798c:	f814 4c01 	ldrb.w	r4, [r4, #-1]
 8007990:	3b01      	subs	r3, #1
 8007992:	f801 4c01 	strb.w	r4, [r1, #-1]
 8007996:	d1f7      	bne.n	8007988 <memmove+0x18>
 8007998:	bcf0      	pop	{r4, r5, r6, r7}
 800799a:	4770      	bx	lr
 800799c:	2a0f      	cmp	r2, #15
 800799e:	bf98      	it	ls
 80079a0:	4603      	movls	r3, r0
 80079a2:	d931      	bls.n	8007a08 <memmove+0x98>
 80079a4:	ea41 0300 	orr.w	r3, r1, r0
 80079a8:	079b      	lsls	r3, r3, #30
 80079aa:	d137      	bne.n	8007a1c <memmove+0xac>
 80079ac:	460c      	mov	r4, r1
 80079ae:	4603      	mov	r3, r0
 80079b0:	4615      	mov	r5, r2
 80079b2:	6826      	ldr	r6, [r4, #0]
 80079b4:	601e      	str	r6, [r3, #0]
 80079b6:	6866      	ldr	r6, [r4, #4]
 80079b8:	605e      	str	r6, [r3, #4]
 80079ba:	68a6      	ldr	r6, [r4, #8]
 80079bc:	609e      	str	r6, [r3, #8]
 80079be:	68e6      	ldr	r6, [r4, #12]
 80079c0:	3d10      	subs	r5, #16
 80079c2:	60de      	str	r6, [r3, #12]
 80079c4:	3410      	adds	r4, #16
 80079c6:	3310      	adds	r3, #16
 80079c8:	2d0f      	cmp	r5, #15
 80079ca:	d8f2      	bhi.n	80079b2 <memmove+0x42>
 80079cc:	f1a2 0410 	sub.w	r4, r2, #16
 80079d0:	f024 040f 	bic.w	r4, r4, #15
 80079d4:	f002 020f 	and.w	r2, r2, #15
 80079d8:	3410      	adds	r4, #16
 80079da:	2a03      	cmp	r2, #3
 80079dc:	eb00 0304 	add.w	r3, r0, r4
 80079e0:	4421      	add	r1, r4
 80079e2:	d911      	bls.n	8007a08 <memmove+0x98>
 80079e4:	1f0e      	subs	r6, r1, #4
 80079e6:	461d      	mov	r5, r3
 80079e8:	4614      	mov	r4, r2
 80079ea:	f856 7f04 	ldr.w	r7, [r6, #4]!
 80079ee:	3c04      	subs	r4, #4
 80079f0:	2c03      	cmp	r4, #3
 80079f2:	f845 7b04 	str.w	r7, [r5], #4
 80079f6:	d8f8      	bhi.n	80079ea <memmove+0x7a>
 80079f8:	1f14      	subs	r4, r2, #4
 80079fa:	f024 0403 	bic.w	r4, r4, #3
 80079fe:	3404      	adds	r4, #4
 8007a00:	f002 0203 	and.w	r2, r2, #3
 8007a04:	1909      	adds	r1, r1, r4
 8007a06:	191b      	adds	r3, r3, r4
 8007a08:	2a00      	cmp	r2, #0
 8007a0a:	d0c5      	beq.n	8007998 <memmove+0x28>
 8007a0c:	3901      	subs	r1, #1
 8007a0e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007a12:	3a01      	subs	r2, #1
 8007a14:	f803 4b01 	strb.w	r4, [r3], #1
 8007a18:	d1f9      	bne.n	8007a0e <memmove+0x9e>
 8007a1a:	e7bd      	b.n	8007998 <memmove+0x28>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	e7f5      	b.n	8007a0c <memmove+0x9c>

08007a20 <memset>:
 8007a20:	f010 0f03 	tst.w	r0, #3
 8007a24:	b470      	push	{r4, r5, r6}
 8007a26:	4603      	mov	r3, r0
 8007a28:	d042      	beq.n	8007ab0 <memset+0x90>
 8007a2a:	2a00      	cmp	r2, #0
 8007a2c:	d03e      	beq.n	8007aac <memset+0x8c>
 8007a2e:	3a01      	subs	r2, #1
 8007a30:	b2cd      	uxtb	r5, r1
 8007a32:	e003      	b.n	8007a3c <memset+0x1c>
 8007a34:	1e54      	subs	r4, r2, #1
 8007a36:	2a00      	cmp	r2, #0
 8007a38:	d038      	beq.n	8007aac <memset+0x8c>
 8007a3a:	4622      	mov	r2, r4
 8007a3c:	f803 5b01 	strb.w	r5, [r3], #1
 8007a40:	f013 0f03 	tst.w	r3, #3
 8007a44:	461c      	mov	r4, r3
 8007a46:	d1f5      	bne.n	8007a34 <memset+0x14>
 8007a48:	2a03      	cmp	r2, #3
 8007a4a:	d929      	bls.n	8007aa0 <memset+0x80>
 8007a4c:	b2cd      	uxtb	r5, r1
 8007a4e:	2a0f      	cmp	r2, #15
 8007a50:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8007a54:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8007a58:	bf84      	itt	hi
 8007a5a:	4623      	movhi	r3, r4
 8007a5c:	4616      	movhi	r6, r2
 8007a5e:	d911      	bls.n	8007a84 <memset+0x64>
 8007a60:	3e10      	subs	r6, #16
 8007a62:	601d      	str	r5, [r3, #0]
 8007a64:	605d      	str	r5, [r3, #4]
 8007a66:	609d      	str	r5, [r3, #8]
 8007a68:	60dd      	str	r5, [r3, #12]
 8007a6a:	3310      	adds	r3, #16
 8007a6c:	2e0f      	cmp	r6, #15
 8007a6e:	d8f7      	bhi.n	8007a60 <memset+0x40>
 8007a70:	f1a2 0310 	sub.w	r3, r2, #16
 8007a74:	f023 030f 	bic.w	r3, r3, #15
 8007a78:	f002 020f 	and.w	r2, r2, #15
 8007a7c:	3310      	adds	r3, #16
 8007a7e:	2a03      	cmp	r2, #3
 8007a80:	441c      	add	r4, r3
 8007a82:	d90d      	bls.n	8007aa0 <memset+0x80>
 8007a84:	4626      	mov	r6, r4
 8007a86:	4613      	mov	r3, r2
 8007a88:	3b04      	subs	r3, #4
 8007a8a:	2b03      	cmp	r3, #3
 8007a8c:	f846 5b04 	str.w	r5, [r6], #4
 8007a90:	d8fa      	bhi.n	8007a88 <memset+0x68>
 8007a92:	1f13      	subs	r3, r2, #4
 8007a94:	f023 0303 	bic.w	r3, r3, #3
 8007a98:	3304      	adds	r3, #4
 8007a9a:	f002 0203 	and.w	r2, r2, #3
 8007a9e:	18e4      	adds	r4, r4, r3
 8007aa0:	b2c9      	uxtb	r1, r1
 8007aa2:	b11a      	cbz	r2, 8007aac <memset+0x8c>
 8007aa4:	3a01      	subs	r2, #1
 8007aa6:	f804 1b01 	strb.w	r1, [r4], #1
 8007aaa:	d1fb      	bne.n	8007aa4 <memset+0x84>
 8007aac:	bc70      	pop	{r4, r5, r6}
 8007aae:	4770      	bx	lr
 8007ab0:	4604      	mov	r4, r0
 8007ab2:	e7c9      	b.n	8007a48 <memset+0x28>

08007ab4 <_realloc_r>:
 8007ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ab8:	460c      	mov	r4, r1
 8007aba:	b083      	sub	sp, #12
 8007abc:	4607      	mov	r7, r0
 8007abe:	4690      	mov	r8, r2
 8007ac0:	2900      	cmp	r1, #0
 8007ac2:	f000 80fe 	beq.w	8007cc2 <_realloc_r+0x20e>
 8007ac6:	f108 050b 	add.w	r5, r8, #11
 8007aca:	f7fe fc8b 	bl	80063e4 <__malloc_lock>
 8007ace:	2d16      	cmp	r5, #22
 8007ad0:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8007ad4:	d87d      	bhi.n	8007bd2 <_realloc_r+0x11e>
 8007ad6:	2210      	movs	r2, #16
 8007ad8:	2600      	movs	r6, #0
 8007ada:	4615      	mov	r5, r2
 8007adc:	4545      	cmp	r5, r8
 8007ade:	bf38      	it	cc
 8007ae0:	f046 0601 	orrcc.w	r6, r6, #1
 8007ae4:	2e00      	cmp	r6, #0
 8007ae6:	f040 80f2 	bne.w	8007cce <_realloc_r+0x21a>
 8007aea:	f021 0a03 	bic.w	sl, r1, #3
 8007aee:	4592      	cmp	sl, r2
 8007af0:	f1a4 0b08 	sub.w	fp, r4, #8
 8007af4:	bfa8      	it	ge
 8007af6:	4656      	movge	r6, sl
 8007af8:	da55      	bge.n	8007ba6 <_realloc_r+0xf2>
 8007afa:	4ba0      	ldr	r3, [pc, #640]	; (8007d7c <_realloc_r+0x2c8>)
 8007afc:	f8d3 c008 	ldr.w	ip, [r3, #8]
 8007b00:	eb0b 000a 	add.w	r0, fp, sl
 8007b04:	4584      	cmp	ip, r0
 8007b06:	f000 80e7 	beq.w	8007cd8 <_realloc_r+0x224>
 8007b0a:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8007b0e:	f02e 0901 	bic.w	r9, lr, #1
 8007b12:	4481      	add	r9, r0
 8007b14:	f8d9 9004 	ldr.w	r9, [r9, #4]
 8007b18:	f019 0f01 	tst.w	r9, #1
 8007b1c:	bf1c      	itt	ne
 8007b1e:	46b6      	movne	lr, r6
 8007b20:	4670      	movne	r0, lr
 8007b22:	d05b      	beq.n	8007bdc <_realloc_r+0x128>
 8007b24:	07c9      	lsls	r1, r1, #31
 8007b26:	d479      	bmi.n	8007c1c <_realloc_r+0x168>
 8007b28:	f854 1c08 	ldr.w	r1, [r4, #-8]
 8007b2c:	ebc1 090b 	rsb	r9, r1, fp
 8007b30:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007b34:	f021 0103 	bic.w	r1, r1, #3
 8007b38:	2800      	cmp	r0, #0
 8007b3a:	f000 8097 	beq.w	8007c6c <_realloc_r+0x1b8>
 8007b3e:	4560      	cmp	r0, ip
 8007b40:	eb01 0c0a 	add.w	ip, r1, sl
 8007b44:	eb0e 060c 	add.w	r6, lr, ip
 8007b48:	f000 811a 	beq.w	8007d80 <_realloc_r+0x2cc>
 8007b4c:	42b2      	cmp	r2, r6
 8007b4e:	f300 808f 	bgt.w	8007c70 <_realloc_r+0x1bc>
 8007b52:	68c3      	ldr	r3, [r0, #12]
 8007b54:	6882      	ldr	r2, [r0, #8]
 8007b56:	46c8      	mov	r8, r9
 8007b58:	609a      	str	r2, [r3, #8]
 8007b5a:	60d3      	str	r3, [r2, #12]
 8007b5c:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8007b60:	f858 1f08 	ldr.w	r1, [r8, #8]!
 8007b64:	f1aa 0204 	sub.w	r2, sl, #4
 8007b68:	2a24      	cmp	r2, #36	; 0x24
 8007b6a:	60cb      	str	r3, [r1, #12]
 8007b6c:	6099      	str	r1, [r3, #8]
 8007b6e:	f200 8144 	bhi.w	8007dfa <_realloc_r+0x346>
 8007b72:	2a13      	cmp	r2, #19
 8007b74:	bf98      	it	ls
 8007b76:	4643      	movls	r3, r8
 8007b78:	d90b      	bls.n	8007b92 <_realloc_r+0xde>
 8007b7a:	6823      	ldr	r3, [r4, #0]
 8007b7c:	f8c9 3008 	str.w	r3, [r9, #8]
 8007b80:	6863      	ldr	r3, [r4, #4]
 8007b82:	2a1b      	cmp	r2, #27
 8007b84:	f8c9 300c 	str.w	r3, [r9, #12]
 8007b88:	f200 8140 	bhi.w	8007e0c <_realloc_r+0x358>
 8007b8c:	f109 0310 	add.w	r3, r9, #16
 8007b90:	3408      	adds	r4, #8
 8007b92:	6822      	ldr	r2, [r4, #0]
 8007b94:	601a      	str	r2, [r3, #0]
 8007b96:	6862      	ldr	r2, [r4, #4]
 8007b98:	605a      	str	r2, [r3, #4]
 8007b9a:	68a2      	ldr	r2, [r4, #8]
 8007b9c:	609a      	str	r2, [r3, #8]
 8007b9e:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007ba2:	4644      	mov	r4, r8
 8007ba4:	46cb      	mov	fp, r9
 8007ba6:	1b72      	subs	r2, r6, r5
 8007ba8:	2a0f      	cmp	r2, #15
 8007baa:	d822      	bhi.n	8007bf2 <_realloc_r+0x13e>
 8007bac:	f001 0101 	and.w	r1, r1, #1
 8007bb0:	eb0b 0306 	add.w	r3, fp, r6
 8007bb4:	430e      	orrs	r6, r1
 8007bb6:	f8cb 6004 	str.w	r6, [fp, #4]
 8007bba:	685a      	ldr	r2, [r3, #4]
 8007bbc:	f042 0201 	orr.w	r2, r2, #1
 8007bc0:	605a      	str	r2, [r3, #4]
 8007bc2:	4638      	mov	r0, r7
 8007bc4:	f7fe fc10 	bl	80063e8 <__malloc_unlock>
 8007bc8:	46a0      	mov	r8, r4
 8007bca:	4640      	mov	r0, r8
 8007bcc:	b003      	add	sp, #12
 8007bce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bd2:	f025 0507 	bic.w	r5, r5, #7
 8007bd6:	462a      	mov	r2, r5
 8007bd8:	0fee      	lsrs	r6, r5, #31
 8007bda:	e77f      	b.n	8007adc <_realloc_r+0x28>
 8007bdc:	f02e 0e03 	bic.w	lr, lr, #3
 8007be0:	eb0e 060a 	add.w	r6, lr, sl
 8007be4:	42b2      	cmp	r2, r6
 8007be6:	dc9d      	bgt.n	8007b24 <_realloc_r+0x70>
 8007be8:	68c3      	ldr	r3, [r0, #12]
 8007bea:	6882      	ldr	r2, [r0, #8]
 8007bec:	60d3      	str	r3, [r2, #12]
 8007bee:	609a      	str	r2, [r3, #8]
 8007bf0:	e7d9      	b.n	8007ba6 <_realloc_r+0xf2>
 8007bf2:	eb0b 0305 	add.w	r3, fp, r5
 8007bf6:	f001 0101 	and.w	r1, r1, #1
 8007bfa:	1898      	adds	r0, r3, r2
 8007bfc:	430d      	orrs	r5, r1
 8007bfe:	f042 0201 	orr.w	r2, r2, #1
 8007c02:	f8cb 5004 	str.w	r5, [fp, #4]
 8007c06:	605a      	str	r2, [r3, #4]
 8007c08:	6842      	ldr	r2, [r0, #4]
 8007c0a:	f042 0201 	orr.w	r2, r2, #1
 8007c0e:	6042      	str	r2, [r0, #4]
 8007c10:	f103 0108 	add.w	r1, r3, #8
 8007c14:	4638      	mov	r0, r7
 8007c16:	f7fd ffa3 	bl	8005b60 <_free_r>
 8007c1a:	e7d2      	b.n	8007bc2 <_realloc_r+0x10e>
 8007c1c:	4641      	mov	r1, r8
 8007c1e:	4638      	mov	r0, r7
 8007c20:	f7fe f8aa 	bl	8005d78 <_malloc_r>
 8007c24:	4680      	mov	r8, r0
 8007c26:	b1e8      	cbz	r0, 8007c64 <_realloc_r+0x1b0>
 8007c28:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8007c2c:	f021 0301 	bic.w	r3, r1, #1
 8007c30:	f1a0 0208 	sub.w	r2, r0, #8
 8007c34:	445b      	add	r3, fp
 8007c36:	429a      	cmp	r2, r3
 8007c38:	f000 80d9 	beq.w	8007dee <_realloc_r+0x33a>
 8007c3c:	f1aa 0204 	sub.w	r2, sl, #4
 8007c40:	2a24      	cmp	r2, #36	; 0x24
 8007c42:	f200 8096 	bhi.w	8007d72 <_realloc_r+0x2be>
 8007c46:	2a13      	cmp	r2, #19
 8007c48:	bf9c      	itt	ls
 8007c4a:	4603      	movls	r3, r0
 8007c4c:	4622      	movls	r2, r4
 8007c4e:	d863      	bhi.n	8007d18 <_realloc_r+0x264>
 8007c50:	6811      	ldr	r1, [r2, #0]
 8007c52:	6019      	str	r1, [r3, #0]
 8007c54:	6851      	ldr	r1, [r2, #4]
 8007c56:	6059      	str	r1, [r3, #4]
 8007c58:	6892      	ldr	r2, [r2, #8]
 8007c5a:	609a      	str	r2, [r3, #8]
 8007c5c:	4638      	mov	r0, r7
 8007c5e:	4621      	mov	r1, r4
 8007c60:	f7fd ff7e 	bl	8005b60 <_free_r>
 8007c64:	4638      	mov	r0, r7
 8007c66:	f7fe fbbf 	bl	80063e8 <__malloc_unlock>
 8007c6a:	e7ae      	b.n	8007bca <_realloc_r+0x116>
 8007c6c:	eb01 0c0a 	add.w	ip, r1, sl
 8007c70:	4562      	cmp	r2, ip
 8007c72:	dcd3      	bgt.n	8007c1c <_realloc_r+0x168>
 8007c74:	464e      	mov	r6, r9
 8007c76:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8007c7a:	f856 1f08 	ldr.w	r1, [r6, #8]!
 8007c7e:	f1aa 0204 	sub.w	r2, sl, #4
 8007c82:	2a24      	cmp	r2, #36	; 0x24
 8007c84:	60cb      	str	r3, [r1, #12]
 8007c86:	6099      	str	r1, [r3, #8]
 8007c88:	d865      	bhi.n	8007d56 <_realloc_r+0x2a2>
 8007c8a:	2a13      	cmp	r2, #19
 8007c8c:	bf98      	it	ls
 8007c8e:	4633      	movls	r3, r6
 8007c90:	d90b      	bls.n	8007caa <_realloc_r+0x1f6>
 8007c92:	6823      	ldr	r3, [r4, #0]
 8007c94:	f8c9 3008 	str.w	r3, [r9, #8]
 8007c98:	6863      	ldr	r3, [r4, #4]
 8007c9a:	2a1b      	cmp	r2, #27
 8007c9c:	f8c9 300c 	str.w	r3, [r9, #12]
 8007ca0:	f200 80c0 	bhi.w	8007e24 <_realloc_r+0x370>
 8007ca4:	f109 0310 	add.w	r3, r9, #16
 8007ca8:	3408      	adds	r4, #8
 8007caa:	6822      	ldr	r2, [r4, #0]
 8007cac:	601a      	str	r2, [r3, #0]
 8007cae:	6862      	ldr	r2, [r4, #4]
 8007cb0:	605a      	str	r2, [r3, #4]
 8007cb2:	68a2      	ldr	r2, [r4, #8]
 8007cb4:	609a      	str	r2, [r3, #8]
 8007cb6:	4634      	mov	r4, r6
 8007cb8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007cbc:	4666      	mov	r6, ip
 8007cbe:	46cb      	mov	fp, r9
 8007cc0:	e771      	b.n	8007ba6 <_realloc_r+0xf2>
 8007cc2:	4611      	mov	r1, r2
 8007cc4:	b003      	add	sp, #12
 8007cc6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cca:	f7fe b855 	b.w	8005d78 <_malloc_r>
 8007cce:	230c      	movs	r3, #12
 8007cd0:	603b      	str	r3, [r7, #0]
 8007cd2:	f04f 0800 	mov.w	r8, #0
 8007cd6:	e778      	b.n	8007bca <_realloc_r+0x116>
 8007cd8:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8007cdc:	f026 0e03 	bic.w	lr, r6, #3
 8007ce0:	eb0e 000a 	add.w	r0, lr, sl
 8007ce4:	f105 0610 	add.w	r6, r5, #16
 8007ce8:	42b0      	cmp	r0, r6
 8007cea:	bfb8      	it	lt
 8007cec:	4660      	movlt	r0, ip
 8007cee:	f6ff af19 	blt.w	8007b24 <_realloc_r+0x70>
 8007cf2:	eb0b 0205 	add.w	r2, fp, r5
 8007cf6:	1b41      	subs	r1, r0, r5
 8007cf8:	f041 0101 	orr.w	r1, r1, #1
 8007cfc:	6051      	str	r1, [r2, #4]
 8007cfe:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8007d02:	609a      	str	r2, [r3, #8]
 8007d04:	f001 0301 	and.w	r3, r1, #1
 8007d08:	431d      	orrs	r5, r3
 8007d0a:	f844 5c04 	str.w	r5, [r4, #-4]
 8007d0e:	4638      	mov	r0, r7
 8007d10:	f7fe fb6a 	bl	80063e8 <__malloc_unlock>
 8007d14:	46a0      	mov	r8, r4
 8007d16:	e758      	b.n	8007bca <_realloc_r+0x116>
 8007d18:	6823      	ldr	r3, [r4, #0]
 8007d1a:	6003      	str	r3, [r0, #0]
 8007d1c:	6863      	ldr	r3, [r4, #4]
 8007d1e:	2a1b      	cmp	r2, #27
 8007d20:	6043      	str	r3, [r0, #4]
 8007d22:	bf9c      	itt	ls
 8007d24:	f104 0208 	addls.w	r2, r4, #8
 8007d28:	f100 0308 	addls.w	r3, r0, #8
 8007d2c:	d990      	bls.n	8007c50 <_realloc_r+0x19c>
 8007d2e:	68a3      	ldr	r3, [r4, #8]
 8007d30:	6083      	str	r3, [r0, #8]
 8007d32:	68e3      	ldr	r3, [r4, #12]
 8007d34:	2a24      	cmp	r2, #36	; 0x24
 8007d36:	60c3      	str	r3, [r0, #12]
 8007d38:	bf03      	ittte	eq
 8007d3a:	6923      	ldreq	r3, [r4, #16]
 8007d3c:	6103      	streq	r3, [r0, #16]
 8007d3e:	6962      	ldreq	r2, [r4, #20]
 8007d40:	f100 0310 	addne.w	r3, r0, #16
 8007d44:	bf09      	itett	eq
 8007d46:	6142      	streq	r2, [r0, #20]
 8007d48:	f104 0210 	addne.w	r2, r4, #16
 8007d4c:	f100 0318 	addeq.w	r3, r0, #24
 8007d50:	f104 0218 	addeq.w	r2, r4, #24
 8007d54:	e77c      	b.n	8007c50 <_realloc_r+0x19c>
 8007d56:	4621      	mov	r1, r4
 8007d58:	4630      	mov	r0, r6
 8007d5a:	f8cd c004 	str.w	ip, [sp, #4]
 8007d5e:	f7ff fe07 	bl	8007970 <memmove>
 8007d62:	f8dd c004 	ldr.w	ip, [sp, #4]
 8007d66:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007d6a:	4634      	mov	r4, r6
 8007d6c:	46cb      	mov	fp, r9
 8007d6e:	4666      	mov	r6, ip
 8007d70:	e719      	b.n	8007ba6 <_realloc_r+0xf2>
 8007d72:	4621      	mov	r1, r4
 8007d74:	f7ff fdfc 	bl	8007970 <memmove>
 8007d78:	e770      	b.n	8007c5c <_realloc_r+0x1a8>
 8007d7a:	bf00      	nop
 8007d7c:	2000056c 	.word	0x2000056c
 8007d80:	f105 0110 	add.w	r1, r5, #16
 8007d84:	428e      	cmp	r6, r1
 8007d86:	f6ff af73 	blt.w	8007c70 <_realloc_r+0x1bc>
 8007d8a:	46c8      	mov	r8, r9
 8007d8c:	f8d9 100c 	ldr.w	r1, [r9, #12]
 8007d90:	f858 0f08 	ldr.w	r0, [r8, #8]!
 8007d94:	f1aa 0204 	sub.w	r2, sl, #4
 8007d98:	2a24      	cmp	r2, #36	; 0x24
 8007d9a:	60c1      	str	r1, [r0, #12]
 8007d9c:	6088      	str	r0, [r1, #8]
 8007d9e:	d861      	bhi.n	8007e64 <_realloc_r+0x3b0>
 8007da0:	2a13      	cmp	r2, #19
 8007da2:	bf98      	it	ls
 8007da4:	4642      	movls	r2, r8
 8007da6:	d90a      	bls.n	8007dbe <_realloc_r+0x30a>
 8007da8:	6821      	ldr	r1, [r4, #0]
 8007daa:	f8c9 1008 	str.w	r1, [r9, #8]
 8007dae:	6861      	ldr	r1, [r4, #4]
 8007db0:	2a1b      	cmp	r2, #27
 8007db2:	f8c9 100c 	str.w	r1, [r9, #12]
 8007db6:	d85c      	bhi.n	8007e72 <_realloc_r+0x3be>
 8007db8:	f109 0210 	add.w	r2, r9, #16
 8007dbc:	3408      	adds	r4, #8
 8007dbe:	6821      	ldr	r1, [r4, #0]
 8007dc0:	6011      	str	r1, [r2, #0]
 8007dc2:	6861      	ldr	r1, [r4, #4]
 8007dc4:	6051      	str	r1, [r2, #4]
 8007dc6:	68a1      	ldr	r1, [r4, #8]
 8007dc8:	6091      	str	r1, [r2, #8]
 8007dca:	eb09 0205 	add.w	r2, r9, r5
 8007dce:	1b71      	subs	r1, r6, r5
 8007dd0:	f041 0101 	orr.w	r1, r1, #1
 8007dd4:	6051      	str	r1, [r2, #4]
 8007dd6:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007dda:	609a      	str	r2, [r3, #8]
 8007ddc:	f001 0301 	and.w	r3, r1, #1
 8007de0:	431d      	orrs	r5, r3
 8007de2:	f8c9 5004 	str.w	r5, [r9, #4]
 8007de6:	4638      	mov	r0, r7
 8007de8:	f7fe fafe 	bl	80063e8 <__malloc_unlock>
 8007dec:	e6ed      	b.n	8007bca <_realloc_r+0x116>
 8007dee:	f850 6c04 	ldr.w	r6, [r0, #-4]
 8007df2:	f026 0603 	bic.w	r6, r6, #3
 8007df6:	4456      	add	r6, sl
 8007df8:	e6d5      	b.n	8007ba6 <_realloc_r+0xf2>
 8007dfa:	4621      	mov	r1, r4
 8007dfc:	4640      	mov	r0, r8
 8007dfe:	f7ff fdb7 	bl	8007970 <memmove>
 8007e02:	4644      	mov	r4, r8
 8007e04:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007e08:	46cb      	mov	fp, r9
 8007e0a:	e6cc      	b.n	8007ba6 <_realloc_r+0xf2>
 8007e0c:	68a3      	ldr	r3, [r4, #8]
 8007e0e:	f8c9 3010 	str.w	r3, [r9, #16]
 8007e12:	68e3      	ldr	r3, [r4, #12]
 8007e14:	2a24      	cmp	r2, #36	; 0x24
 8007e16:	f8c9 3014 	str.w	r3, [r9, #20]
 8007e1a:	d00f      	beq.n	8007e3c <_realloc_r+0x388>
 8007e1c:	f109 0318 	add.w	r3, r9, #24
 8007e20:	3410      	adds	r4, #16
 8007e22:	e6b6      	b.n	8007b92 <_realloc_r+0xde>
 8007e24:	68a3      	ldr	r3, [r4, #8]
 8007e26:	f8c9 3010 	str.w	r3, [r9, #16]
 8007e2a:	68e3      	ldr	r3, [r4, #12]
 8007e2c:	2a24      	cmp	r2, #36	; 0x24
 8007e2e:	f8c9 3014 	str.w	r3, [r9, #20]
 8007e32:	d00d      	beq.n	8007e50 <_realloc_r+0x39c>
 8007e34:	f109 0318 	add.w	r3, r9, #24
 8007e38:	3410      	adds	r4, #16
 8007e3a:	e736      	b.n	8007caa <_realloc_r+0x1f6>
 8007e3c:	6923      	ldr	r3, [r4, #16]
 8007e3e:	f8c9 3018 	str.w	r3, [r9, #24]
 8007e42:	6962      	ldr	r2, [r4, #20]
 8007e44:	f109 0320 	add.w	r3, r9, #32
 8007e48:	f8c9 201c 	str.w	r2, [r9, #28]
 8007e4c:	3418      	adds	r4, #24
 8007e4e:	e6a0      	b.n	8007b92 <_realloc_r+0xde>
 8007e50:	6923      	ldr	r3, [r4, #16]
 8007e52:	f8c9 3018 	str.w	r3, [r9, #24]
 8007e56:	6962      	ldr	r2, [r4, #20]
 8007e58:	f109 0320 	add.w	r3, r9, #32
 8007e5c:	f8c9 201c 	str.w	r2, [r9, #28]
 8007e60:	3418      	adds	r4, #24
 8007e62:	e722      	b.n	8007caa <_realloc_r+0x1f6>
 8007e64:	4640      	mov	r0, r8
 8007e66:	4621      	mov	r1, r4
 8007e68:	9301      	str	r3, [sp, #4]
 8007e6a:	f7ff fd81 	bl	8007970 <memmove>
 8007e6e:	9b01      	ldr	r3, [sp, #4]
 8007e70:	e7ab      	b.n	8007dca <_realloc_r+0x316>
 8007e72:	68a1      	ldr	r1, [r4, #8]
 8007e74:	f8c9 1010 	str.w	r1, [r9, #16]
 8007e78:	68e1      	ldr	r1, [r4, #12]
 8007e7a:	2a24      	cmp	r2, #36	; 0x24
 8007e7c:	f8c9 1014 	str.w	r1, [r9, #20]
 8007e80:	d003      	beq.n	8007e8a <_realloc_r+0x3d6>
 8007e82:	f109 0218 	add.w	r2, r9, #24
 8007e86:	3410      	adds	r4, #16
 8007e88:	e799      	b.n	8007dbe <_realloc_r+0x30a>
 8007e8a:	6922      	ldr	r2, [r4, #16]
 8007e8c:	f8c9 2018 	str.w	r2, [r9, #24]
 8007e90:	6961      	ldr	r1, [r4, #20]
 8007e92:	f109 0220 	add.w	r2, r9, #32
 8007e96:	f8c9 101c 	str.w	r1, [r9, #28]
 8007e9a:	3418      	adds	r4, #24
 8007e9c:	e78f      	b.n	8007dbe <_realloc_r+0x30a>
 8007e9e:	bf00      	nop

08007ea0 <__aeabi_drsub>:
 8007ea0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8007ea4:	e002      	b.n	8007eac <__adddf3>
 8007ea6:	bf00      	nop

08007ea8 <__aeabi_dsub>:
 8007ea8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08007eac <__adddf3>:
 8007eac:	b530      	push	{r4, r5, lr}
 8007eae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8007eb2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8007eb6:	ea94 0f05 	teq	r4, r5
 8007eba:	bf08      	it	eq
 8007ebc:	ea90 0f02 	teqeq	r0, r2
 8007ec0:	bf1f      	itttt	ne
 8007ec2:	ea54 0c00 	orrsne.w	ip, r4, r0
 8007ec6:	ea55 0c02 	orrsne.w	ip, r5, r2
 8007eca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8007ece:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8007ed2:	f000 80e2 	beq.w	800809a <__adddf3+0x1ee>
 8007ed6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8007eda:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8007ede:	bfb8      	it	lt
 8007ee0:	426d      	neglt	r5, r5
 8007ee2:	dd0c      	ble.n	8007efe <__adddf3+0x52>
 8007ee4:	442c      	add	r4, r5
 8007ee6:	ea80 0202 	eor.w	r2, r0, r2
 8007eea:	ea81 0303 	eor.w	r3, r1, r3
 8007eee:	ea82 0000 	eor.w	r0, r2, r0
 8007ef2:	ea83 0101 	eor.w	r1, r3, r1
 8007ef6:	ea80 0202 	eor.w	r2, r0, r2
 8007efa:	ea81 0303 	eor.w	r3, r1, r3
 8007efe:	2d36      	cmp	r5, #54	; 0x36
 8007f00:	bf88      	it	hi
 8007f02:	bd30      	pophi	{r4, r5, pc}
 8007f04:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8007f08:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8007f0c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8007f10:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8007f14:	d002      	beq.n	8007f1c <__adddf3+0x70>
 8007f16:	4240      	negs	r0, r0
 8007f18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8007f1c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8007f20:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8007f24:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8007f28:	d002      	beq.n	8007f30 <__adddf3+0x84>
 8007f2a:	4252      	negs	r2, r2
 8007f2c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8007f30:	ea94 0f05 	teq	r4, r5
 8007f34:	f000 80a7 	beq.w	8008086 <__adddf3+0x1da>
 8007f38:	f1a4 0401 	sub.w	r4, r4, #1
 8007f3c:	f1d5 0e20 	rsbs	lr, r5, #32
 8007f40:	db0d      	blt.n	8007f5e <__adddf3+0xb2>
 8007f42:	fa02 fc0e 	lsl.w	ip, r2, lr
 8007f46:	fa22 f205 	lsr.w	r2, r2, r5
 8007f4a:	1880      	adds	r0, r0, r2
 8007f4c:	f141 0100 	adc.w	r1, r1, #0
 8007f50:	fa03 f20e 	lsl.w	r2, r3, lr
 8007f54:	1880      	adds	r0, r0, r2
 8007f56:	fa43 f305 	asr.w	r3, r3, r5
 8007f5a:	4159      	adcs	r1, r3
 8007f5c:	e00e      	b.n	8007f7c <__adddf3+0xd0>
 8007f5e:	f1a5 0520 	sub.w	r5, r5, #32
 8007f62:	f10e 0e20 	add.w	lr, lr, #32
 8007f66:	2a01      	cmp	r2, #1
 8007f68:	fa03 fc0e 	lsl.w	ip, r3, lr
 8007f6c:	bf28      	it	cs
 8007f6e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8007f72:	fa43 f305 	asr.w	r3, r3, r5
 8007f76:	18c0      	adds	r0, r0, r3
 8007f78:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8007f7c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8007f80:	d507      	bpl.n	8007f92 <__adddf3+0xe6>
 8007f82:	f04f 0e00 	mov.w	lr, #0
 8007f86:	f1dc 0c00 	rsbs	ip, ip, #0
 8007f8a:	eb7e 0000 	sbcs.w	r0, lr, r0
 8007f8e:	eb6e 0101 	sbc.w	r1, lr, r1
 8007f92:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8007f96:	d31b      	bcc.n	8007fd0 <__adddf3+0x124>
 8007f98:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8007f9c:	d30c      	bcc.n	8007fb8 <__adddf3+0x10c>
 8007f9e:	0849      	lsrs	r1, r1, #1
 8007fa0:	ea5f 0030 	movs.w	r0, r0, rrx
 8007fa4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8007fa8:	f104 0401 	add.w	r4, r4, #1
 8007fac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8007fb0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8007fb4:	f080 809a 	bcs.w	80080ec <__adddf3+0x240>
 8007fb8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8007fbc:	bf08      	it	eq
 8007fbe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8007fc2:	f150 0000 	adcs.w	r0, r0, #0
 8007fc6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8007fca:	ea41 0105 	orr.w	r1, r1, r5
 8007fce:	bd30      	pop	{r4, r5, pc}
 8007fd0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8007fd4:	4140      	adcs	r0, r0
 8007fd6:	eb41 0101 	adc.w	r1, r1, r1
 8007fda:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8007fde:	f1a4 0401 	sub.w	r4, r4, #1
 8007fe2:	d1e9      	bne.n	8007fb8 <__adddf3+0x10c>
 8007fe4:	f091 0f00 	teq	r1, #0
 8007fe8:	bf04      	itt	eq
 8007fea:	4601      	moveq	r1, r0
 8007fec:	2000      	moveq	r0, #0
 8007fee:	fab1 f381 	clz	r3, r1
 8007ff2:	bf08      	it	eq
 8007ff4:	3320      	addeq	r3, #32
 8007ff6:	f1a3 030b 	sub.w	r3, r3, #11
 8007ffa:	f1b3 0220 	subs.w	r2, r3, #32
 8007ffe:	da0c      	bge.n	800801a <__adddf3+0x16e>
 8008000:	320c      	adds	r2, #12
 8008002:	dd08      	ble.n	8008016 <__adddf3+0x16a>
 8008004:	f102 0c14 	add.w	ip, r2, #20
 8008008:	f1c2 020c 	rsb	r2, r2, #12
 800800c:	fa01 f00c 	lsl.w	r0, r1, ip
 8008010:	fa21 f102 	lsr.w	r1, r1, r2
 8008014:	e00c      	b.n	8008030 <__adddf3+0x184>
 8008016:	f102 0214 	add.w	r2, r2, #20
 800801a:	bfd8      	it	le
 800801c:	f1c2 0c20 	rsble	ip, r2, #32
 8008020:	fa01 f102 	lsl.w	r1, r1, r2
 8008024:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008028:	bfdc      	itt	le
 800802a:	ea41 010c 	orrle.w	r1, r1, ip
 800802e:	4090      	lslle	r0, r2
 8008030:	1ae4      	subs	r4, r4, r3
 8008032:	bfa2      	ittt	ge
 8008034:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8008038:	4329      	orrge	r1, r5
 800803a:	bd30      	popge	{r4, r5, pc}
 800803c:	ea6f 0404 	mvn.w	r4, r4
 8008040:	3c1f      	subs	r4, #31
 8008042:	da1c      	bge.n	800807e <__adddf3+0x1d2>
 8008044:	340c      	adds	r4, #12
 8008046:	dc0e      	bgt.n	8008066 <__adddf3+0x1ba>
 8008048:	f104 0414 	add.w	r4, r4, #20
 800804c:	f1c4 0220 	rsb	r2, r4, #32
 8008050:	fa20 f004 	lsr.w	r0, r0, r4
 8008054:	fa01 f302 	lsl.w	r3, r1, r2
 8008058:	ea40 0003 	orr.w	r0, r0, r3
 800805c:	fa21 f304 	lsr.w	r3, r1, r4
 8008060:	ea45 0103 	orr.w	r1, r5, r3
 8008064:	bd30      	pop	{r4, r5, pc}
 8008066:	f1c4 040c 	rsb	r4, r4, #12
 800806a:	f1c4 0220 	rsb	r2, r4, #32
 800806e:	fa20 f002 	lsr.w	r0, r0, r2
 8008072:	fa01 f304 	lsl.w	r3, r1, r4
 8008076:	ea40 0003 	orr.w	r0, r0, r3
 800807a:	4629      	mov	r1, r5
 800807c:	bd30      	pop	{r4, r5, pc}
 800807e:	fa21 f004 	lsr.w	r0, r1, r4
 8008082:	4629      	mov	r1, r5
 8008084:	bd30      	pop	{r4, r5, pc}
 8008086:	f094 0f00 	teq	r4, #0
 800808a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800808e:	bf06      	itte	eq
 8008090:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8008094:	3401      	addeq	r4, #1
 8008096:	3d01      	subne	r5, #1
 8008098:	e74e      	b.n	8007f38 <__adddf3+0x8c>
 800809a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800809e:	bf18      	it	ne
 80080a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80080a4:	d029      	beq.n	80080fa <__adddf3+0x24e>
 80080a6:	ea94 0f05 	teq	r4, r5
 80080aa:	bf08      	it	eq
 80080ac:	ea90 0f02 	teqeq	r0, r2
 80080b0:	d005      	beq.n	80080be <__adddf3+0x212>
 80080b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80080b6:	bf04      	itt	eq
 80080b8:	4619      	moveq	r1, r3
 80080ba:	4610      	moveq	r0, r2
 80080bc:	bd30      	pop	{r4, r5, pc}
 80080be:	ea91 0f03 	teq	r1, r3
 80080c2:	bf1e      	ittt	ne
 80080c4:	2100      	movne	r1, #0
 80080c6:	2000      	movne	r0, #0
 80080c8:	bd30      	popne	{r4, r5, pc}
 80080ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80080ce:	d105      	bne.n	80080dc <__adddf3+0x230>
 80080d0:	0040      	lsls	r0, r0, #1
 80080d2:	4149      	adcs	r1, r1
 80080d4:	bf28      	it	cs
 80080d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80080da:	bd30      	pop	{r4, r5, pc}
 80080dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80080e0:	bf3c      	itt	cc
 80080e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80080e6:	bd30      	popcc	{r4, r5, pc}
 80080e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80080ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80080f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80080f4:	f04f 0000 	mov.w	r0, #0
 80080f8:	bd30      	pop	{r4, r5, pc}
 80080fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80080fe:	bf1a      	itte	ne
 8008100:	4619      	movne	r1, r3
 8008102:	4610      	movne	r0, r2
 8008104:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008108:	bf1c      	itt	ne
 800810a:	460b      	movne	r3, r1
 800810c:	4602      	movne	r2, r0
 800810e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008112:	bf06      	itte	eq
 8008114:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008118:	ea91 0f03 	teqeq	r1, r3
 800811c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8008120:	bd30      	pop	{r4, r5, pc}
 8008122:	bf00      	nop

08008124 <__aeabi_ui2d>:
 8008124:	f090 0f00 	teq	r0, #0
 8008128:	bf04      	itt	eq
 800812a:	2100      	moveq	r1, #0
 800812c:	4770      	bxeq	lr
 800812e:	b530      	push	{r4, r5, lr}
 8008130:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008134:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008138:	f04f 0500 	mov.w	r5, #0
 800813c:	f04f 0100 	mov.w	r1, #0
 8008140:	e750      	b.n	8007fe4 <__adddf3+0x138>
 8008142:	bf00      	nop

08008144 <__aeabi_i2d>:
 8008144:	f090 0f00 	teq	r0, #0
 8008148:	bf04      	itt	eq
 800814a:	2100      	moveq	r1, #0
 800814c:	4770      	bxeq	lr
 800814e:	b530      	push	{r4, r5, lr}
 8008150:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008154:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008158:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800815c:	bf48      	it	mi
 800815e:	4240      	negmi	r0, r0
 8008160:	f04f 0100 	mov.w	r1, #0
 8008164:	e73e      	b.n	8007fe4 <__adddf3+0x138>
 8008166:	bf00      	nop

08008168 <__aeabi_f2d>:
 8008168:	0042      	lsls	r2, r0, #1
 800816a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800816e:	ea4f 0131 	mov.w	r1, r1, rrx
 8008172:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8008176:	bf1f      	itttt	ne
 8008178:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800817c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8008180:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8008184:	4770      	bxne	lr
 8008186:	f092 0f00 	teq	r2, #0
 800818a:	bf14      	ite	ne
 800818c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8008190:	4770      	bxeq	lr
 8008192:	b530      	push	{r4, r5, lr}
 8008194:	f44f 7460 	mov.w	r4, #896	; 0x380
 8008198:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800819c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80081a0:	e720      	b.n	8007fe4 <__adddf3+0x138>
 80081a2:	bf00      	nop

080081a4 <__aeabi_ul2d>:
 80081a4:	ea50 0201 	orrs.w	r2, r0, r1
 80081a8:	bf08      	it	eq
 80081aa:	4770      	bxeq	lr
 80081ac:	b530      	push	{r4, r5, lr}
 80081ae:	f04f 0500 	mov.w	r5, #0
 80081b2:	e00a      	b.n	80081ca <__aeabi_l2d+0x16>

080081b4 <__aeabi_l2d>:
 80081b4:	ea50 0201 	orrs.w	r2, r0, r1
 80081b8:	bf08      	it	eq
 80081ba:	4770      	bxeq	lr
 80081bc:	b530      	push	{r4, r5, lr}
 80081be:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80081c2:	d502      	bpl.n	80081ca <__aeabi_l2d+0x16>
 80081c4:	4240      	negs	r0, r0
 80081c6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80081ca:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80081ce:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80081d2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80081d6:	f43f aedc 	beq.w	8007f92 <__adddf3+0xe6>
 80081da:	f04f 0203 	mov.w	r2, #3
 80081de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80081e2:	bf18      	it	ne
 80081e4:	3203      	addne	r2, #3
 80081e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80081ea:	bf18      	it	ne
 80081ec:	3203      	addne	r2, #3
 80081ee:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80081f2:	f1c2 0320 	rsb	r3, r2, #32
 80081f6:	fa00 fc03 	lsl.w	ip, r0, r3
 80081fa:	fa20 f002 	lsr.w	r0, r0, r2
 80081fe:	fa01 fe03 	lsl.w	lr, r1, r3
 8008202:	ea40 000e 	orr.w	r0, r0, lr
 8008206:	fa21 f102 	lsr.w	r1, r1, r2
 800820a:	4414      	add	r4, r2
 800820c:	e6c1      	b.n	8007f92 <__adddf3+0xe6>
 800820e:	bf00      	nop

08008210 <__aeabi_dmul>:
 8008210:	b570      	push	{r4, r5, r6, lr}
 8008212:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8008216:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800821a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800821e:	bf1d      	ittte	ne
 8008220:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8008224:	ea94 0f0c 	teqne	r4, ip
 8008228:	ea95 0f0c 	teqne	r5, ip
 800822c:	f000 f8de 	bleq	80083ec <__aeabi_dmul+0x1dc>
 8008230:	442c      	add	r4, r5
 8008232:	ea81 0603 	eor.w	r6, r1, r3
 8008236:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800823a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800823e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8008242:	bf18      	it	ne
 8008244:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8008248:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800824c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008250:	d038      	beq.n	80082c4 <__aeabi_dmul+0xb4>
 8008252:	fba0 ce02 	umull	ip, lr, r0, r2
 8008256:	f04f 0500 	mov.w	r5, #0
 800825a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800825e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8008262:	fbe0 e503 	umlal	lr, r5, r0, r3
 8008266:	f04f 0600 	mov.w	r6, #0
 800826a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800826e:	f09c 0f00 	teq	ip, #0
 8008272:	bf18      	it	ne
 8008274:	f04e 0e01 	orrne.w	lr, lr, #1
 8008278:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800827c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8008280:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8008284:	d204      	bcs.n	8008290 <__aeabi_dmul+0x80>
 8008286:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800828a:	416d      	adcs	r5, r5
 800828c:	eb46 0606 	adc.w	r6, r6, r6
 8008290:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8008294:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8008298:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800829c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80082a0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80082a4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80082a8:	bf88      	it	hi
 80082aa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80082ae:	d81e      	bhi.n	80082ee <__aeabi_dmul+0xde>
 80082b0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80082b4:	bf08      	it	eq
 80082b6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80082ba:	f150 0000 	adcs.w	r0, r0, #0
 80082be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80082c2:	bd70      	pop	{r4, r5, r6, pc}
 80082c4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80082c8:	ea46 0101 	orr.w	r1, r6, r1
 80082cc:	ea40 0002 	orr.w	r0, r0, r2
 80082d0:	ea81 0103 	eor.w	r1, r1, r3
 80082d4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80082d8:	bfc2      	ittt	gt
 80082da:	ebd4 050c 	rsbsgt	r5, r4, ip
 80082de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80082e2:	bd70      	popgt	{r4, r5, r6, pc}
 80082e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80082e8:	f04f 0e00 	mov.w	lr, #0
 80082ec:	3c01      	subs	r4, #1
 80082ee:	f300 80ab 	bgt.w	8008448 <__aeabi_dmul+0x238>
 80082f2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80082f6:	bfde      	ittt	le
 80082f8:	2000      	movle	r0, #0
 80082fa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80082fe:	bd70      	pople	{r4, r5, r6, pc}
 8008300:	f1c4 0400 	rsb	r4, r4, #0
 8008304:	3c20      	subs	r4, #32
 8008306:	da35      	bge.n	8008374 <__aeabi_dmul+0x164>
 8008308:	340c      	adds	r4, #12
 800830a:	dc1b      	bgt.n	8008344 <__aeabi_dmul+0x134>
 800830c:	f104 0414 	add.w	r4, r4, #20
 8008310:	f1c4 0520 	rsb	r5, r4, #32
 8008314:	fa00 f305 	lsl.w	r3, r0, r5
 8008318:	fa20 f004 	lsr.w	r0, r0, r4
 800831c:	fa01 f205 	lsl.w	r2, r1, r5
 8008320:	ea40 0002 	orr.w	r0, r0, r2
 8008324:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8008328:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800832c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008330:	fa21 f604 	lsr.w	r6, r1, r4
 8008334:	eb42 0106 	adc.w	r1, r2, r6
 8008338:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800833c:	bf08      	it	eq
 800833e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008342:	bd70      	pop	{r4, r5, r6, pc}
 8008344:	f1c4 040c 	rsb	r4, r4, #12
 8008348:	f1c4 0520 	rsb	r5, r4, #32
 800834c:	fa00 f304 	lsl.w	r3, r0, r4
 8008350:	fa20 f005 	lsr.w	r0, r0, r5
 8008354:	fa01 f204 	lsl.w	r2, r1, r4
 8008358:	ea40 0002 	orr.w	r0, r0, r2
 800835c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008360:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008364:	f141 0100 	adc.w	r1, r1, #0
 8008368:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800836c:	bf08      	it	eq
 800836e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008372:	bd70      	pop	{r4, r5, r6, pc}
 8008374:	f1c4 0520 	rsb	r5, r4, #32
 8008378:	fa00 f205 	lsl.w	r2, r0, r5
 800837c:	ea4e 0e02 	orr.w	lr, lr, r2
 8008380:	fa20 f304 	lsr.w	r3, r0, r4
 8008384:	fa01 f205 	lsl.w	r2, r1, r5
 8008388:	ea43 0302 	orr.w	r3, r3, r2
 800838c:	fa21 f004 	lsr.w	r0, r1, r4
 8008390:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008394:	fa21 f204 	lsr.w	r2, r1, r4
 8008398:	ea20 0002 	bic.w	r0, r0, r2
 800839c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80083a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80083a4:	bf08      	it	eq
 80083a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80083aa:	bd70      	pop	{r4, r5, r6, pc}
 80083ac:	f094 0f00 	teq	r4, #0
 80083b0:	d10f      	bne.n	80083d2 <__aeabi_dmul+0x1c2>
 80083b2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80083b6:	0040      	lsls	r0, r0, #1
 80083b8:	eb41 0101 	adc.w	r1, r1, r1
 80083bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80083c0:	bf08      	it	eq
 80083c2:	3c01      	subeq	r4, #1
 80083c4:	d0f7      	beq.n	80083b6 <__aeabi_dmul+0x1a6>
 80083c6:	ea41 0106 	orr.w	r1, r1, r6
 80083ca:	f095 0f00 	teq	r5, #0
 80083ce:	bf18      	it	ne
 80083d0:	4770      	bxne	lr
 80083d2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80083d6:	0052      	lsls	r2, r2, #1
 80083d8:	eb43 0303 	adc.w	r3, r3, r3
 80083dc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80083e0:	bf08      	it	eq
 80083e2:	3d01      	subeq	r5, #1
 80083e4:	d0f7      	beq.n	80083d6 <__aeabi_dmul+0x1c6>
 80083e6:	ea43 0306 	orr.w	r3, r3, r6
 80083ea:	4770      	bx	lr
 80083ec:	ea94 0f0c 	teq	r4, ip
 80083f0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80083f4:	bf18      	it	ne
 80083f6:	ea95 0f0c 	teqne	r5, ip
 80083fa:	d00c      	beq.n	8008416 <__aeabi_dmul+0x206>
 80083fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008400:	bf18      	it	ne
 8008402:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008406:	d1d1      	bne.n	80083ac <__aeabi_dmul+0x19c>
 8008408:	ea81 0103 	eor.w	r1, r1, r3
 800840c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008410:	f04f 0000 	mov.w	r0, #0
 8008414:	bd70      	pop	{r4, r5, r6, pc}
 8008416:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800841a:	bf06      	itte	eq
 800841c:	4610      	moveq	r0, r2
 800841e:	4619      	moveq	r1, r3
 8008420:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008424:	d019      	beq.n	800845a <__aeabi_dmul+0x24a>
 8008426:	ea94 0f0c 	teq	r4, ip
 800842a:	d102      	bne.n	8008432 <__aeabi_dmul+0x222>
 800842c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8008430:	d113      	bne.n	800845a <__aeabi_dmul+0x24a>
 8008432:	ea95 0f0c 	teq	r5, ip
 8008436:	d105      	bne.n	8008444 <__aeabi_dmul+0x234>
 8008438:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800843c:	bf1c      	itt	ne
 800843e:	4610      	movne	r0, r2
 8008440:	4619      	movne	r1, r3
 8008442:	d10a      	bne.n	800845a <__aeabi_dmul+0x24a>
 8008444:	ea81 0103 	eor.w	r1, r1, r3
 8008448:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800844c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8008450:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008454:	f04f 0000 	mov.w	r0, #0
 8008458:	bd70      	pop	{r4, r5, r6, pc}
 800845a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800845e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8008462:	bd70      	pop	{r4, r5, r6, pc}

08008464 <__aeabi_ddiv>:
 8008464:	b570      	push	{r4, r5, r6, lr}
 8008466:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800846a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800846e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008472:	bf1d      	ittte	ne
 8008474:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8008478:	ea94 0f0c 	teqne	r4, ip
 800847c:	ea95 0f0c 	teqne	r5, ip
 8008480:	f000 f8a7 	bleq	80085d2 <__aeabi_ddiv+0x16e>
 8008484:	eba4 0405 	sub.w	r4, r4, r5
 8008488:	ea81 0e03 	eor.w	lr, r1, r3
 800848c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008490:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8008494:	f000 8088 	beq.w	80085a8 <__aeabi_ddiv+0x144>
 8008498:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800849c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80084a0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80084a4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80084a8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80084ac:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80084b0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80084b4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80084b8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80084bc:	429d      	cmp	r5, r3
 80084be:	bf08      	it	eq
 80084c0:	4296      	cmpeq	r6, r2
 80084c2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80084c6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80084ca:	d202      	bcs.n	80084d2 <__aeabi_ddiv+0x6e>
 80084cc:	085b      	lsrs	r3, r3, #1
 80084ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80084d2:	1ab6      	subs	r6, r6, r2
 80084d4:	eb65 0503 	sbc.w	r5, r5, r3
 80084d8:	085b      	lsrs	r3, r3, #1
 80084da:	ea4f 0232 	mov.w	r2, r2, rrx
 80084de:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80084e2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80084e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80084ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80084ee:	bf22      	ittt	cs
 80084f0:	1ab6      	subcs	r6, r6, r2
 80084f2:	4675      	movcs	r5, lr
 80084f4:	ea40 000c 	orrcs.w	r0, r0, ip
 80084f8:	085b      	lsrs	r3, r3, #1
 80084fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80084fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8008502:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008506:	bf22      	ittt	cs
 8008508:	1ab6      	subcs	r6, r6, r2
 800850a:	4675      	movcs	r5, lr
 800850c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008510:	085b      	lsrs	r3, r3, #1
 8008512:	ea4f 0232 	mov.w	r2, r2, rrx
 8008516:	ebb6 0e02 	subs.w	lr, r6, r2
 800851a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800851e:	bf22      	ittt	cs
 8008520:	1ab6      	subcs	r6, r6, r2
 8008522:	4675      	movcs	r5, lr
 8008524:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008528:	085b      	lsrs	r3, r3, #1
 800852a:	ea4f 0232 	mov.w	r2, r2, rrx
 800852e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008532:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008536:	bf22      	ittt	cs
 8008538:	1ab6      	subcs	r6, r6, r2
 800853a:	4675      	movcs	r5, lr
 800853c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008540:	ea55 0e06 	orrs.w	lr, r5, r6
 8008544:	d018      	beq.n	8008578 <__aeabi_ddiv+0x114>
 8008546:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800854a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800854e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8008552:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8008556:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800855a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800855e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8008562:	d1c0      	bne.n	80084e6 <__aeabi_ddiv+0x82>
 8008564:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008568:	d10b      	bne.n	8008582 <__aeabi_ddiv+0x11e>
 800856a:	ea41 0100 	orr.w	r1, r1, r0
 800856e:	f04f 0000 	mov.w	r0, #0
 8008572:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8008576:	e7b6      	b.n	80084e6 <__aeabi_ddiv+0x82>
 8008578:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800857c:	bf04      	itt	eq
 800857e:	4301      	orreq	r1, r0
 8008580:	2000      	moveq	r0, #0
 8008582:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8008586:	bf88      	it	hi
 8008588:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800858c:	f63f aeaf 	bhi.w	80082ee <__aeabi_dmul+0xde>
 8008590:	ebb5 0c03 	subs.w	ip, r5, r3
 8008594:	bf04      	itt	eq
 8008596:	ebb6 0c02 	subseq.w	ip, r6, r2
 800859a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800859e:	f150 0000 	adcs.w	r0, r0, #0
 80085a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80085a6:	bd70      	pop	{r4, r5, r6, pc}
 80085a8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80085ac:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80085b0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80085b4:	bfc2      	ittt	gt
 80085b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80085ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80085be:	bd70      	popgt	{r4, r5, r6, pc}
 80085c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80085c4:	f04f 0e00 	mov.w	lr, #0
 80085c8:	3c01      	subs	r4, #1
 80085ca:	e690      	b.n	80082ee <__aeabi_dmul+0xde>
 80085cc:	ea45 0e06 	orr.w	lr, r5, r6
 80085d0:	e68d      	b.n	80082ee <__aeabi_dmul+0xde>
 80085d2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80085d6:	ea94 0f0c 	teq	r4, ip
 80085da:	bf08      	it	eq
 80085dc:	ea95 0f0c 	teqeq	r5, ip
 80085e0:	f43f af3b 	beq.w	800845a <__aeabi_dmul+0x24a>
 80085e4:	ea94 0f0c 	teq	r4, ip
 80085e8:	d10a      	bne.n	8008600 <__aeabi_ddiv+0x19c>
 80085ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80085ee:	f47f af34 	bne.w	800845a <__aeabi_dmul+0x24a>
 80085f2:	ea95 0f0c 	teq	r5, ip
 80085f6:	f47f af25 	bne.w	8008444 <__aeabi_dmul+0x234>
 80085fa:	4610      	mov	r0, r2
 80085fc:	4619      	mov	r1, r3
 80085fe:	e72c      	b.n	800845a <__aeabi_dmul+0x24a>
 8008600:	ea95 0f0c 	teq	r5, ip
 8008604:	d106      	bne.n	8008614 <__aeabi_ddiv+0x1b0>
 8008606:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800860a:	f43f aefd 	beq.w	8008408 <__aeabi_dmul+0x1f8>
 800860e:	4610      	mov	r0, r2
 8008610:	4619      	mov	r1, r3
 8008612:	e722      	b.n	800845a <__aeabi_dmul+0x24a>
 8008614:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008618:	bf18      	it	ne
 800861a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800861e:	f47f aec5 	bne.w	80083ac <__aeabi_dmul+0x19c>
 8008622:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8008626:	f47f af0d 	bne.w	8008444 <__aeabi_dmul+0x234>
 800862a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800862e:	f47f aeeb 	bne.w	8008408 <__aeabi_dmul+0x1f8>
 8008632:	e712      	b.n	800845a <__aeabi_dmul+0x24a>

08008634 <__gedf2>:
 8008634:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8008638:	e006      	b.n	8008648 <__cmpdf2+0x4>
 800863a:	bf00      	nop

0800863c <__ledf2>:
 800863c:	f04f 0c01 	mov.w	ip, #1
 8008640:	e002      	b.n	8008648 <__cmpdf2+0x4>
 8008642:	bf00      	nop

08008644 <__cmpdf2>:
 8008644:	f04f 0c01 	mov.w	ip, #1
 8008648:	f84d cd04 	str.w	ip, [sp, #-4]!
 800864c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008650:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008654:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008658:	bf18      	it	ne
 800865a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800865e:	d01b      	beq.n	8008698 <__cmpdf2+0x54>
 8008660:	b001      	add	sp, #4
 8008662:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8008666:	bf0c      	ite	eq
 8008668:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800866c:	ea91 0f03 	teqne	r1, r3
 8008670:	bf02      	ittt	eq
 8008672:	ea90 0f02 	teqeq	r0, r2
 8008676:	2000      	moveq	r0, #0
 8008678:	4770      	bxeq	lr
 800867a:	f110 0f00 	cmn.w	r0, #0
 800867e:	ea91 0f03 	teq	r1, r3
 8008682:	bf58      	it	pl
 8008684:	4299      	cmppl	r1, r3
 8008686:	bf08      	it	eq
 8008688:	4290      	cmpeq	r0, r2
 800868a:	bf2c      	ite	cs
 800868c:	17d8      	asrcs	r0, r3, #31
 800868e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8008692:	f040 0001 	orr.w	r0, r0, #1
 8008696:	4770      	bx	lr
 8008698:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800869c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80086a0:	d102      	bne.n	80086a8 <__cmpdf2+0x64>
 80086a2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80086a6:	d107      	bne.n	80086b8 <__cmpdf2+0x74>
 80086a8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80086ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80086b0:	d1d6      	bne.n	8008660 <__cmpdf2+0x1c>
 80086b2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80086b6:	d0d3      	beq.n	8008660 <__cmpdf2+0x1c>
 80086b8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80086bc:	4770      	bx	lr
 80086be:	bf00      	nop

080086c0 <__aeabi_cdrcmple>:
 80086c0:	4684      	mov	ip, r0
 80086c2:	4610      	mov	r0, r2
 80086c4:	4662      	mov	r2, ip
 80086c6:	468c      	mov	ip, r1
 80086c8:	4619      	mov	r1, r3
 80086ca:	4663      	mov	r3, ip
 80086cc:	e000      	b.n	80086d0 <__aeabi_cdcmpeq>
 80086ce:	bf00      	nop

080086d0 <__aeabi_cdcmpeq>:
 80086d0:	b501      	push	{r0, lr}
 80086d2:	f7ff ffb7 	bl	8008644 <__cmpdf2>
 80086d6:	2800      	cmp	r0, #0
 80086d8:	bf48      	it	mi
 80086da:	f110 0f00 	cmnmi.w	r0, #0
 80086de:	bd01      	pop	{r0, pc}

080086e0 <__aeabi_dcmpeq>:
 80086e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80086e4:	f7ff fff4 	bl	80086d0 <__aeabi_cdcmpeq>
 80086e8:	bf0c      	ite	eq
 80086ea:	2001      	moveq	r0, #1
 80086ec:	2000      	movne	r0, #0
 80086ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80086f2:	bf00      	nop

080086f4 <__aeabi_dcmplt>:
 80086f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80086f8:	f7ff ffea 	bl	80086d0 <__aeabi_cdcmpeq>
 80086fc:	bf34      	ite	cc
 80086fe:	2001      	movcc	r0, #1
 8008700:	2000      	movcs	r0, #0
 8008702:	f85d fb08 	ldr.w	pc, [sp], #8
 8008706:	bf00      	nop

08008708 <__aeabi_dcmple>:
 8008708:	f84d ed08 	str.w	lr, [sp, #-8]!
 800870c:	f7ff ffe0 	bl	80086d0 <__aeabi_cdcmpeq>
 8008710:	bf94      	ite	ls
 8008712:	2001      	movls	r0, #1
 8008714:	2000      	movhi	r0, #0
 8008716:	f85d fb08 	ldr.w	pc, [sp], #8
 800871a:	bf00      	nop

0800871c <__aeabi_dcmpge>:
 800871c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008720:	f7ff ffce 	bl	80086c0 <__aeabi_cdrcmple>
 8008724:	bf94      	ite	ls
 8008726:	2001      	movls	r0, #1
 8008728:	2000      	movhi	r0, #0
 800872a:	f85d fb08 	ldr.w	pc, [sp], #8
 800872e:	bf00      	nop

08008730 <__aeabi_dcmpgt>:
 8008730:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008734:	f7ff ffc4 	bl	80086c0 <__aeabi_cdrcmple>
 8008738:	bf34      	ite	cc
 800873a:	2001      	movcc	r0, #1
 800873c:	2000      	movcs	r0, #0
 800873e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008742:	bf00      	nop

08008744 <__aeabi_d2iz>:
 8008744:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008748:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800874c:	d215      	bcs.n	800877a <__aeabi_d2iz+0x36>
 800874e:	d511      	bpl.n	8008774 <__aeabi_d2iz+0x30>
 8008750:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8008754:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8008758:	d912      	bls.n	8008780 <__aeabi_d2iz+0x3c>
 800875a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800875e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008762:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8008766:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800876a:	fa23 f002 	lsr.w	r0, r3, r2
 800876e:	bf18      	it	ne
 8008770:	4240      	negne	r0, r0
 8008772:	4770      	bx	lr
 8008774:	f04f 0000 	mov.w	r0, #0
 8008778:	4770      	bx	lr
 800877a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800877e:	d105      	bne.n	800878c <__aeabi_d2iz+0x48>
 8008780:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8008784:	bf08      	it	eq
 8008786:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800878a:	4770      	bx	lr
 800878c:	f04f 0000 	mov.w	r0, #0
 8008790:	4770      	bx	lr
 8008792:	bf00      	nop

08008794 <main>:
/**
 * @brief  Main program.
 * @param  None
 * @retval : None
 */
int main(void) {
 8008794:	b5b0      	push	{r4, r5, r7, lr}
 8008796:	b094      	sub	sp, #80	; 0x50
 8008798:	af02      	add	r7, sp, #8
	int16_t i = 0;
	const int rxbufsize = 64;
	char rxbuf[rxbufsize];
 800879a:	b092      	sub	sp, #72	; 0x48
	char printbuf[64];
	uint32_t tmp32, rtctime = 0;

	TIM2_timer_start();
 800879c:	f7f7 fcf4 	bl	8000188 <TIM2_timer_start>

	usart_begin(USART3, PD9, PD8, 19200);
 80087a0:	f44f 6281 	mov.w	r2, #1032	; 0x408
 80087a4:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
 80087a8:	482f      	ldr	r0, [pc, #188]	; (8008868 <main+0xd4>)
 80087aa:	f240 4109 	movw	r1, #1033	; 0x409
 80087ae:	f7f8 f90b 	bl	80009c8 <usart_begin>
	usart_print(USART3, "\r\nWelcome to USART3.\r\n\r\n");
 80087b2:	492e      	ldr	r1, [pc, #184]	; (800886c <main+0xd8>)
 80087b4:	482c      	ldr	r0, [pc, #176]	; (8008868 <main+0xd4>)
 80087b6:	f7f8 fa37 	bl	8000c28 <usart_print>

	i2c_begin(100000);
 80087ba:	482d      	ldr	r0, [pc, #180]	; (8008870 <main+0xdc>)
 80087bc:	f7f7 fe40 	bl	8000440 <i2c_begin>
	ST7032i_Init();
 80087c0:	f7fa fd76 	bl	80032b0 <ST7032i_Init>

	ST7032i_Print_String((const int8_t *) "Welcome to lcd.");
 80087c4:	482b      	ldr	r0, [pc, #172]	; (8008874 <main+0xe0>)
 80087c6:	f7fa fe7f 	bl	80034c8 <ST7032i_Print_String>
	delay_ms(1000);
 80087ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80087ce:	f7f7 fd37 	bl	8000240 <delay_ms>
	ST7032i_Command_Write(0x01);
 80087d2:	2001      	movs	r0, #1
 80087d4:	f7fa fc50 	bl	8003078 <ST7032i_Command_Write>
	delay_ms(10);
 80087d8:	200a      	movs	r0, #10
 80087da:	f7f7 fd31 	bl	8000240 <delay_ms>
int main(void) {
	int16_t i = 0;
	const int rxbufsize = 64;
	char rxbuf[rxbufsize];
	char printbuf[64];
	uint32_t tmp32, rtctime = 0;
 80087de:	2500      	movs	r5, #0
	ST7032i_Command_Write(0x01);
	delay_ms(10);

	//Receive character from COM and put it on LCD
	while (1) {
		i2c_requestFrom(0b1101000, 0, (uint8_t *) &tmp32, 3);
 80087e0:	2068      	movs	r0, #104	; 0x68
 80087e2:	2100      	movs	r1, #0
 80087e4:	2303      	movs	r3, #3
 80087e6:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80087ea:	f7f7 fee9 	bl	80005c0 <i2c_requestFrom>
		if (rtctime != (tmp32 & 0xffffff)) {
 80087ee:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 80087f0:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 80087f4:	42a5      	cmp	r5, r4
 80087f6:	d031      	beq.n	800885c <main+0xc8>
			rtctime = tmp32 & 0xffffff;
			sprintf(printbuf, "%02x:%02x:%02x\r\n", UINT8(rtctime>>16),
 80087f8:	0c22      	lsrs	r2, r4, #16
 80087fa:	f3c4 2307 	ubfx	r3, r4, #8, #8
 80087fe:	b2e5      	uxtb	r5, r4
 8008800:	491d      	ldr	r1, [pc, #116]	; (8008878 <main+0xe4>)
 8008802:	9500      	str	r5, [sp, #0]
 8008804:	1d38      	adds	r0, r7, #4
 8008806:	f7fb f815 	bl	8003834 <sprintf>
					UINT8(rtctime>>8), UINT8(rtctime) );
			usart_print(USART3, printbuf);
 800880a:	4817      	ldr	r0, [pc, #92]	; (8008868 <main+0xd4>)
 800880c:	1d39      	adds	r1, r7, #4
 800880e:	f7f8 fa0b 	bl	8000c28 <usart_print>
			ST7032i_Set_DDRAM(((0 * 0x40) % 0x6c) + 0);
 8008812:	2000      	movs	r0, #0
 8008814:	f7fa fc7a 	bl	800310c <ST7032i_Set_DDRAM>
			ST7032i_Print_String((int8_t *) printbuf);
 8008818:	1d38      	adds	r0, r7, #4
 800881a:	f7fa fe55 	bl	80034c8 <ST7032i_Print_String>
			if ((rtctime & 0xff) == 0) {
 800881e:	b9ed      	cbnz	r5, 800885c <main+0xc8>
				i2c_requestFrom(0b1101000, 3, (uint8_t *) &tmp32, 4);
 8008820:	2068      	movs	r0, #104	; 0x68
 8008822:	2103      	movs	r1, #3
 8008824:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8008828:	2304      	movs	r3, #4
 800882a:	f7f7 fec9 	bl	80005c0 <i2c_requestFrom>
				sprintf(printbuf, "20%02x %02x/%02x (%x)", UINT8(tmp32>>24),
 800882e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008830:	4912      	ldr	r1, [pc, #72]	; (800887c <main+0xe8>)
 8008832:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8008836:	9200      	str	r2, [sp, #0]
 8008838:	b2da      	uxtb	r2, r3
 800883a:	9201      	str	r2, [sp, #4]
 800883c:	1d38      	adds	r0, r7, #4
 800883e:	0e1a      	lsrs	r2, r3, #24
 8008840:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8008844:	f7fa fff6 	bl	8003834 <sprintf>
						UINT8(tmp32>>16), UINT8(tmp32>>8), UINT8(tmp32) );
				usart_print(USART3, printbuf);
 8008848:	4807      	ldr	r0, [pc, #28]	; (8008868 <main+0xd4>)
 800884a:	1d39      	adds	r1, r7, #4
 800884c:	f7f8 f9ec 	bl	8000c28 <usart_print>
				ST7032i_Set_DDRAM(((1 * 0x40) % 0x6c) + 0);
 8008850:	2040      	movs	r0, #64	; 0x40
 8008852:	f7fa fc5b 	bl	800310c <ST7032i_Set_DDRAM>
				ST7032i_Print_String((int8_t *) printbuf);
 8008856:	1d38      	adds	r0, r7, #4
 8008858:	f7fa fe36 	bl	80034c8 <ST7032i_Print_String>
			}
		}
		delay_ms(100);
 800885c:	2064      	movs	r0, #100	; 0x64
 800885e:	f7f7 fcef 	bl	8000240 <delay_ms>
	}
 8008862:	4625      	mov	r5, r4
 8008864:	e7bc      	b.n	80087e0 <main+0x4c>
 8008866:	bf00      	nop
 8008868:	40004800 	.word	0x40004800
 800886c:	08008a38 	.word	0x08008a38
 8008870:	000186a0 	.word	0x000186a0
 8008874:	08008a51 	.word	0x08008a51
 8008878:	08008a61 	.word	0x08008a61
 800887c:	08008a72 	.word	0x08008a72

08008880 <Reset_Handler>:
 8008880:	2100      	movs	r1, #0
 8008882:	e003      	b.n	800888c <LoopCopyDataInit>

08008884 <CopyDataInit>:
 8008884:	4b0a      	ldr	r3, [pc, #40]	; (80088b0 <LoopFillZerobss+0x10>)
 8008886:	585b      	ldr	r3, [r3, r1]
 8008888:	5043      	str	r3, [r0, r1]
 800888a:	3104      	adds	r1, #4

0800888c <LoopCopyDataInit>:
 800888c:	4809      	ldr	r0, [pc, #36]	; (80088b4 <LoopFillZerobss+0x14>)
 800888e:	4b0a      	ldr	r3, [pc, #40]	; (80088b8 <LoopFillZerobss+0x18>)
 8008890:	1842      	adds	r2, r0, r1
 8008892:	429a      	cmp	r2, r3
 8008894:	d3f6      	bcc.n	8008884 <CopyDataInit>
 8008896:	4a09      	ldr	r2, [pc, #36]	; (80088bc <LoopFillZerobss+0x1c>)
 8008898:	e002      	b.n	80088a0 <LoopFillZerobss>

0800889a <FillZerobss>:
 800889a:	2300      	movs	r3, #0
 800889c:	f842 3b04 	str.w	r3, [r2], #4

080088a0 <LoopFillZerobss>:
 80088a0:	4b07      	ldr	r3, [pc, #28]	; (80088c0 <LoopFillZerobss+0x20>)
 80088a2:	429a      	cmp	r2, r3
 80088a4:	d3f9      	bcc.n	800889a <FillZerobss>
 80088a6:	f7fa fe7f 	bl	80035a8 <SystemInit>
 80088aa:	f7ff ff73 	bl	8008794 <main>
 80088ae:	4770      	bx	lr
 80088b0:	08008b0c 	.word	0x08008b0c
 80088b4:	20000000 	.word	0x20000000
 80088b8:	2000097c 	.word	0x2000097c
 80088bc:	2000097c 	.word	0x2000097c
 80088c0:	20001654 	.word	0x20001654

080088c4 <ADC_IRQHandler>:
 80088c4:	e7fe      	b.n	80088c4 <ADC_IRQHandler>
	...

080088c8 <blanks.3927>:
 80088c8:	2020 2020 2020 2020 2020 2020 2020 2020                     

080088d8 <zeroes.3928>:
 80088d8:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000

080088e8 <_global_impure_ptr>:
 80088e8:	00c8 2000 0000 0000                         ... ....

080088f0 <p05.2449>:
 80088f0:	0005 0000 0019 0000 007d 0000 0000 0000     ........}.......

08008900 <__mprec_tens>:
 8008900:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
 8008910:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
 8008920:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
 8008930:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
 8008940:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
 8008950:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
 8008960:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
 8008970:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
 8008980:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
 8008990:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
 80089a0:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
 80089b0:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
 80089c0:	9db4 79d9 7843 44ea                         ...yCx.D

080089c8 <__mprec_tinytens>:
 80089c8:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
 80089d8:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
 80089e8:	6f43 64ac 0628 0ac8                         Co.d(...

080089f0 <__mprec_bigtens>:
 80089f0:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
 8008a00:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
 8008a10:	bf3c 7f73 4fdd 7515                         <.s..O.u

08008a18 <blanks.3871>:
 8008a18:	2020 2020 2020 2020 2020 2020 2020 2020                     

08008a28 <zeroes.3872>:
 8008a28:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
 8008a38:	0a0d 6557 636c 6d6f 2065 6f74 5520 4153     ..Welcome to USA
 8008a48:	5452 2e33 0a0d 0a0d 5700 6c65 6f63 656d     RT3......Welcome
 8008a58:	7420 206f 636c 2e64 2500 3230 3a78 3025      to lcd..%02x:%0
 8008a68:	7832 253a 3230 0d78 000a 3032 3025 7832     2x:%02x...20%02x
 8008a78:	2520 3230 2f78 3025 7832 2820 7825 0029      %02x/%02x (%x).
 8008a88:	6548 7061 6120 646e 7320 6174 6b63 6320     Heap and stack c
 8008a98:	6c6f 696c 6973 6e6f 000a 7865 7469 0000     ollision..exit..
 8008aa8:	4e49 0046 6e69 0066 414e 004e 616e 006e     INF.inf.NAN.nan.
 8008ab8:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
 8008ac8:	0000 0000 3130 3332 3534 3736 3938 6261     ....0123456789ab
 8008ad8:	6463 6665 0000 0000 6e28 6c75 296c 0000     cdef....(null)..
 8008ae8:	0030 0000 6e49 6966 696e 7974 0000 0000     0...Infinity....
 8008af8:	614e 004e 0043 0000 4f50 4953 0058 0000     NaN.C...POSIX...
 8008b08:	002e 0000                                   ....
