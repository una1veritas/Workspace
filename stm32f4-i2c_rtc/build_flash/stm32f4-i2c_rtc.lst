
stm32f4-i2c_rtc.elf:     file format elf32-littlearm


Disassembly of section .text:

08000188 <delay_us>:
  * @brief  wait micro second
  * @param  wait_time : time to wait in micro second
  * @retval None
  */
void delay_us(uint16_t waittime)
{
 8000188:	b510      	push	{r4, lr}
 800018a:	4604      	mov	r4, r0
  //Supply APB1 Clock
  RCC_APB1PeriphClockCmd(TIM_RCC , ENABLE);
 800018c:	2001      	movs	r0, #1
 800018e:	4601      	mov	r1, r0
 8000190:	f001 fa8e 	bl	80016b0 <RCC_APB1PeriphClockCmd>

  /* Time base configuration */
  TIM_TimeBaseStructureMicro.TIM_Period = ((waittime+1) * 1)-1;
 8000194:	4910      	ldr	r1, [pc, #64]	; (80001d8 <delay_us+0x50>)
  TIM_TimeBaseInit(TIM_NUM, &TIM_TimeBaseStructureMicro);
 8000196:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
{
  //Supply APB1 Clock
  RCC_APB1PeriphClockCmd(TIM_RCC , ENABLE);

  /* Time base configuration */
  TIM_TimeBaseStructureMicro.TIM_Period = ((waittime+1) * 1)-1;
 800019a:	604c      	str	r4, [r1, #4]
  TIM_TimeBaseInit(TIM_NUM, &TIM_TimeBaseStructureMicro);
 800019c:	f001 fc86 	bl	8001aac <TIM_TimeBaseInit>

  TIM_SelectOnePulseMode(TIM_NUM, TIM_OPMode_Single);
 80001a0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80001a4:	2108      	movs	r1, #8
 80001a6:	f001 fd00 	bl	8001baa <TIM_SelectOnePulseMode>

  TIM_SetCounter(TIM_NUM,2);
 80001aa:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80001ae:	2102      	movs	r1, #2
 80001b0:	f001 fcce 	bl	8001b50 <TIM_SetCounter>

  /* TIM enable counter */
  TIM_Cmd(TIM_NUM, ENABLE);
 80001b4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80001b8:	2101      	movs	r1, #1
 80001ba:	f001 fd0c 	bl	8001bd6 <TIM_Cmd>

  while (TIM_GetCounter(TIM_NUM)){};
 80001be:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80001c2:	f001 fcc9 	bl	8001b58 <TIM_GetCounter>
 80001c6:	4601      	mov	r1, r0
 80001c8:	2800      	cmp	r0, #0
 80001ca:	d1f8      	bne.n	80001be <delay_us+0x36>

  /* TIM enable counter */
  TIM_Cmd(TIM_NUM, DISABLE);
 80001cc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000

}
 80001d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  TIM_Cmd(TIM_NUM, ENABLE);

  while (TIM_GetCounter(TIM_NUM)){};

  /* TIM enable counter */
  TIM_Cmd(TIM_NUM, DISABLE);
 80001d4:	f001 bcff 	b.w	8001bd6 <TIM_Cmd>
 80001d8:	20000000 	.word	0x20000000

080001dc <delay_ms>:
  * @brief  wait millisecond
  * @param  wait_time : time to wait in millisecond
  * @retval None
  */
void delay_ms(uint16_t waittime)
{
 80001dc:	b510      	push	{r4, lr}
 80001de:	4604      	mov	r4, r0
  //Supply APB1 Clock
  RCC_APB1PeriphClockCmd(TIM_RCC , ENABLE);
 80001e0:	2001      	movs	r0, #1
 80001e2:	4601      	mov	r1, r0
 80001e4:	f001 fa64 	bl	80016b0 <RCC_APB1PeriphClockCmd>

  /* Time base configuration */
  TIM_TimeBaseStructureMili.TIM_Period = ((waittime+1) * 1)-1;
 80001e8:	4911      	ldr	r1, [pc, #68]	; (8000230 <delay_ms+0x54>)
  TIM_TimeBaseInit(TIM_NUM, &TIM_TimeBaseStructureMili);
 80001ea:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
{
  //Supply APB1 Clock
  RCC_APB1PeriphClockCmd(TIM_RCC , ENABLE);

  /* Time base configuration */
  TIM_TimeBaseStructureMili.TIM_Period = ((waittime+1) * 1)-1;
 80001ee:	610c      	str	r4, [r1, #16]
  TIM_TimeBaseInit(TIM_NUM, &TIM_TimeBaseStructureMili);
 80001f0:	310c      	adds	r1, #12
 80001f2:	f001 fc5b 	bl	8001aac <TIM_TimeBaseInit>

  TIM_SelectOnePulseMode(TIM_NUM, TIM_OPMode_Single);
 80001f6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80001fa:	2108      	movs	r1, #8
 80001fc:	f001 fcd5 	bl	8001baa <TIM_SelectOnePulseMode>

  TIM_SetCounter(TIM_NUM,2);
 8000200:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000204:	2102      	movs	r1, #2
 8000206:	f001 fca3 	bl	8001b50 <TIM_SetCounter>

  /* TIM enable counter */
  TIM_Cmd(TIM_NUM, ENABLE);
 800020a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800020e:	2101      	movs	r1, #1
 8000210:	f001 fce1 	bl	8001bd6 <TIM_Cmd>

  while (TIM_GetCounter(TIM_NUM)){};
 8000214:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000218:	f001 fc9e 	bl	8001b58 <TIM_GetCounter>
 800021c:	4601      	mov	r1, r0
 800021e:	2800      	cmp	r0, #0
 8000220:	d1f8      	bne.n	8000214 <delay_ms+0x38>

  /* TIM enable counter */
  TIM_Cmd(TIM_NUM, DISABLE);
 8000222:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
}
 8000226:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  TIM_Cmd(TIM_NUM, ENABLE);

  while (TIM_GetCounter(TIM_NUM)){};

  /* TIM enable counter */
  TIM_Cmd(TIM_NUM, DISABLE);
 800022a:	f001 bcd4 	b.w	8001bd6 <TIM_Cmd>
 800022e:	bf00      	nop
 8000230:	20000000 	.word	0x20000000

08000234 <pinMode>:
	}
	return 16;
}
*/

void pinMode(GPIOPin portpin, GPIOMode_TypeDef mode) {
 8000234:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);
 8000236:	f3c0 2503 	ubfx	r5, r0, #8, #4
 800023a:	4c10      	ldr	r4, [pc, #64]	; (800027c <pinMode+0x48>)
	}
	return 16;
}
*/

void pinMode(GPIOPin portpin, GPIOMode_TypeDef mode) {
 800023c:	460f      	mov	r7, r1
 800023e:	4606      	mov	r6, r0

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);
 8000240:	2101      	movs	r1, #1
 8000242:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 8000246:	f001 fa0f 	bl	8001668 <RCC_AHB1PeriphClockCmd>
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	//
	GPIO_Init(Port[portpin>>8 & 0x0f], &GPIO_InitStructure);
 800024a:	eb04 0485 	add.w	r4, r4, r5, lsl #2
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 800024e:	2301      	movs	r3, #1
 8000250:	f006 060f 	and.w	r6, r6, #15
 8000254:	fa13 f606 	lsls.w	r6, r3, r6

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);

	GPIO_InitStructure.GPIO_Pin = PinBit(portpin);
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000258:	2300      	movs	r3, #0

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);

	GPIO_InitStructure.GPIO_Pin = PinBit(portpin);
 800025a:	b2b6      	uxth	r6, r6
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800025c:	f88d 3006 	strb.w	r3, [sp, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000260:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	//
	GPIO_Init(Port[portpin>>8 & 0x0f], &GPIO_InitStructure);
 8000264:	6aa0      	ldr	r0, [r4, #40]	; 0x28

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);

	GPIO_InitStructure.GPIO_Pin = PinBit(portpin);
 8000266:	9600      	str	r6, [sp, #0]
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000268:	2302      	movs	r3, #2
	//
	GPIO_Init(Port[portpin>>8 & 0x0f], &GPIO_InitStructure);
 800026a:	4669      	mov	r1, sp
	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);

	GPIO_InitStructure.GPIO_Pin = PinBit(portpin);
	GPIO_InitStructure.GPIO_Mode = mode;
 800026c:	f88d 7004 	strb.w	r7, [sp, #4]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000270:	f88d 3005 	strb.w	r3, [sp, #5]
	//
	GPIO_Init(Port[portpin>>8 & 0x0f], &GPIO_InitStructure);
 8000274:	f000 fe50 	bl	8000f18 <GPIO_Init>
}
 8000278:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800027a:	bf00      	nop
 800027c:	20000018 	.word	0x20000018

08000280 <digitalWrite>:

void digitalWrite(GPIOPin portpin, uint8_t bit) {
 8000280:	0a02      	lsrs	r2, r0, #8
 8000282:	4b0a      	ldr	r3, [pc, #40]	; (80002ac <digitalWrite+0x2c>)
	if (bit) {
		//? Bit_SET : Bit_RESET ));
		GPIO_SetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
 8000284:	f002 020f 	and.w	r2, r2, #15
 8000288:	eb03 0382 	add.w	r3, r3, r2, lsl #2
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 800028c:	f000 000f 	and.w	r0, r0, #15
	//
	GPIO_Init(Port[portpin>>8 & 0x0f], &GPIO_InitStructure);
}

void digitalWrite(GPIOPin portpin, uint8_t bit) {
	if (bit) {
 8000290:	b129      	cbz	r1, 800029e <digitalWrite+0x1e>
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 8000292:	2101      	movs	r1, #1
 8000294:	4081      	lsls	r1, r0
}

void digitalWrite(GPIOPin portpin, uint8_t bit) {
	if (bit) {
		//? Bit_SET : Bit_RESET ));
		GPIO_SetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
 8000296:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000298:	b289      	uxth	r1, r1
 800029a:	f000 beae 	b.w	8000ffa <GPIO_SetBits>
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 800029e:	2101      	movs	r1, #1
 80002a0:	4081      	lsls	r1, r0
void digitalWrite(GPIOPin portpin, uint8_t bit) {
	if (bit) {
		//? Bit_SET : Bit_RESET ));
		GPIO_SetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
	} else {
		GPIO_ResetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
 80002a2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80002a4:	b289      	uxth	r1, r1
 80002a6:	f000 beaa 	b.w	8000ffe <GPIO_ResetBits>
 80002aa:	bf00      	nop
 80002ac:	20000018 	.word	0x20000018

080002b0 <digitalRead>:
	}
}

uint8_t digitalRead(GPIOPin portpin) {
 80002b0:	b508      	push	{r3, lr}
	GPIO_TypeDef * port = Port[portpin>>8 & 0x0f];
 80002b2:	4b10      	ldr	r3, [pc, #64]	; (80002f4 <digitalRead+0x44>)
 80002b4:	f3c0 2203 	ubfx	r2, r0, #8, #4
 80002b8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	} else {
		GPIO_ResetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
	}
}

uint8_t digitalRead(GPIOPin portpin) {
 80002bc:	4601      	mov	r1, r0
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 80002be:	f001 010f 	and.w	r1, r1, #15
		GPIO_ResetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
	}
}

uint8_t digitalRead(GPIOPin portpin) {
	GPIO_TypeDef * port = Port[portpin>>8 & 0x0f];
 80002c2:	6a98      	ldr	r0, [r3, #40]	; 0x28
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 80002c4:	2301      	movs	r3, #1
 80002c6:	fa13 f101 	lsls.w	r1, r3, r1
	}
}

uint8_t digitalRead(GPIOPin portpin) {
	GPIO_TypeDef * port = Port[portpin>>8 & 0x0f];
	uint8_t mode = (port->MODER) >> (PinBit(portpin) * 2);
 80002ca:	6802      	ldr	r2, [r0, #0]
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 80002cc:	b289      	uxth	r1, r1
	}
}

uint8_t digitalRead(GPIOPin portpin) {
	GPIO_TypeDef * port = Port[portpin>>8 & 0x0f];
	uint8_t mode = (port->MODER) >> (PinBit(portpin) * 2);
 80002ce:	fa11 f303 	lsls.w	r3, r1, r3
 80002d2:	fa32 f303 	lsrs.w	r3, r2, r3
	if (mode == GPIO_Mode_OUT)
 80002d6:	b2db      	uxtb	r3, r3
 80002d8:	2b01      	cmp	r3, #1
 80002da:	d105      	bne.n	80002e8 <digitalRead+0x38>
		return (GPIO_ReadOutputDataBit(port, PinBit(portpin)) ? SET : RESET);
 80002dc:	f000 fe84 	bl	8000fe8 <GPIO_ReadOutputDataBit>
 80002e0:	3000      	adds	r0, #0
 80002e2:	bf18      	it	ne
 80002e4:	2001      	movne	r0, #1
 80002e6:	bd08      	pop	{r3, pc}
	return (GPIO_ReadInputDataBit(port, PinBit(portpin)) ? SET : RESET);
 80002e8:	f000 fe75 	bl	8000fd6 <GPIO_ReadInputDataBit>
 80002ec:	3000      	adds	r0, #0
 80002ee:	bf18      	it	ne
 80002f0:	2001      	movne	r0, #1
}
 80002f2:	bd08      	pop	{r3, pc}
 80002f4:	20000018 	.word	0x20000018

080002f8 <PinPort>:

GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
 80002f8:	4b03      	ldr	r3, [pc, #12]	; (8000308 <PinPort+0x10>)
 80002fa:	f3c0 2003 	ubfx	r0, r0, #8, #4
 80002fe:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
 8000302:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8000304:	4770      	bx	lr
 8000306:	bf00      	nop
 8000308:	20000018 	.word	0x20000018

0800030c <PinBit>:

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 800030c:	2301      	movs	r3, #1
 800030e:	f000 000f 	and.w	r0, r0, #15
 8000312:	fa13 f000 	lsls.w	r0, r3, r0
}
 8000316:	b280      	uxth	r0, r0
 8000318:	4770      	bx	lr

0800031a <PinSource>:

uint8_t PinSource(GPIOPin portpin) {
	return portpin & 0x0f;
}
 800031a:	f000 000f 	and.w	r0, r0, #15
 800031e:	4770      	bx	lr

08000320 <GPIOMode>:

void GPIOMode(GPIO_TypeDef * port, uint16_t pinbit, GPIOMode_TypeDef mode,
              GPIOSpeed_TypeDef clk, GPIOOType_TypeDef otype, GPIOPuPd_TypeDef pupd) {
 8000320:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000322:	461f      	mov	r7, r3
	if ( port == GPIOB ) {
 8000324:	4b22      	ldr	r3, [pc, #136]	; (80003b0 <GPIOMode+0x90>)
 8000326:	4298      	cmp	r0, r3
uint8_t PinSource(GPIOPin portpin) {
	return portpin & 0x0f;
}

void GPIOMode(GPIO_TypeDef * port, uint16_t pinbit, GPIOMode_TypeDef mode,
              GPIOSpeed_TypeDef clk, GPIOOType_TypeDef otype, GPIOPuPd_TypeDef pupd) {
 8000328:	4604      	mov	r4, r0
 800032a:	460d      	mov	r5, r1
 800032c:	4616      	mov	r6, r2
	if ( port == GPIOB ) {
 800032e:	d101      	bne.n	8000334 <GPIOMode+0x14>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8000330:	2002      	movs	r0, #2
 8000332:	e022      	b.n	800037a <GPIOMode+0x5a>
	} else if ( port == GPIOC ) {
 8000334:	4b1f      	ldr	r3, [pc, #124]	; (80003b4 <GPIOMode+0x94>)
 8000336:	4298      	cmp	r0, r3
 8000338:	d101      	bne.n	800033e <GPIOMode+0x1e>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 800033a:	2004      	movs	r0, #4
 800033c:	e01d      	b.n	800037a <GPIOMode+0x5a>
	} else if ( port == GPIOD ) {
 800033e:	4b1e      	ldr	r3, [pc, #120]	; (80003b8 <GPIOMode+0x98>)
 8000340:	4298      	cmp	r0, r3
 8000342:	d101      	bne.n	8000348 <GPIOMode+0x28>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8000344:	2008      	movs	r0, #8
 8000346:	e018      	b.n	800037a <GPIOMode+0x5a>
	} else if ( port == GPIOE ) {
 8000348:	4b1c      	ldr	r3, [pc, #112]	; (80003bc <GPIOMode+0x9c>)
 800034a:	4298      	cmp	r0, r3
 800034c:	d101      	bne.n	8000352 <GPIOMode+0x32>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 800034e:	2010      	movs	r0, #16
 8000350:	e013      	b.n	800037a <GPIOMode+0x5a>
	} else if ( port == GPIOF ) {
 8000352:	4b1b      	ldr	r3, [pc, #108]	; (80003c0 <GPIOMode+0xa0>)
 8000354:	4298      	cmp	r0, r3
 8000356:	d101      	bne.n	800035c <GPIOMode+0x3c>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 8000358:	2020      	movs	r0, #32
 800035a:	e00e      	b.n	800037a <GPIOMode+0x5a>
	} else if ( port == GPIOG ) {
 800035c:	4b19      	ldr	r3, [pc, #100]	; (80003c4 <GPIOMode+0xa4>)
 800035e:	4298      	cmp	r0, r3
 8000360:	d101      	bne.n	8000366 <GPIOMode+0x46>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 8000362:	2040      	movs	r0, #64	; 0x40
 8000364:	e009      	b.n	800037a <GPIOMode+0x5a>
	} else if ( port == GPIOH ) {
 8000366:	4b18      	ldr	r3, [pc, #96]	; (80003c8 <GPIOMode+0xa8>)
 8000368:	4298      	cmp	r0, r3
 800036a:	d101      	bne.n	8000370 <GPIOMode+0x50>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 800036c:	2080      	movs	r0, #128	; 0x80
 800036e:	e004      	b.n	800037a <GPIOMode+0x5a>
	} else if ( port == GPIOI ) {
 8000370:	4b16      	ldr	r3, [pc, #88]	; (80003cc <GPIOMode+0xac>)
 8000372:	4298      	cmp	r0, r3
 8000374:	d103      	bne.n	800037e <GPIOMode+0x5e>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 8000376:	f44f 7080 	mov.w	r0, #256	; 0x100
 800037a:	2101      	movs	r1, #1
 800037c:	e004      	b.n	8000388 <GPIOMode+0x68>
	} else if ( port == GPIOA ) {
 800037e:	4b14      	ldr	r3, [pc, #80]	; (80003d0 <GPIOMode+0xb0>)
 8000380:	4298      	cmp	r0, r3
 8000382:	d103      	bne.n	800038c <GPIOMode+0x6c>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8000384:	2001      	movs	r0, #1
 8000386:	4601      	mov	r1, r0
 8000388:	f001 f96e 	bl	8001668 <RCC_AHB1PeriphClockCmd>

	GPIO_InitTypeDef GPIO_InitStructure;
        
	GPIO_InitStructure.GPIO_Pin = pinbit;
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = otype;
 800038c:	f89d 3020 	ldrb.w	r3, [sp, #32]
	}
	// assumes port is already waked up.

	GPIO_InitTypeDef GPIO_InitStructure;
        
	GPIO_InitStructure.GPIO_Pin = pinbit;
 8000390:	9500      	str	r5, [sp, #0]
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = otype;
 8000392:	f88d 3006 	strb.w	r3, [sp, #6]
	GPIO_InitStructure.GPIO_PuPd = pupd;
 8000396:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
	// assumes port is already waked up.

	GPIO_InitTypeDef GPIO_InitStructure;
        
	GPIO_InitStructure.GPIO_Pin = pinbit;
	GPIO_InitStructure.GPIO_Mode = mode;
 800039a:	f88d 6004 	strb.w	r6, [sp, #4]
	GPIO_InitStructure.GPIO_OType = otype;
	GPIO_InitStructure.GPIO_PuPd = pupd;
	GPIO_InitStructure.GPIO_Speed = clk;
	//
	GPIO_Init(port, &GPIO_InitStructure);
 800039e:	4620      	mov	r0, r4
 80003a0:	4669      	mov	r1, sp
	GPIO_InitTypeDef GPIO_InitStructure;
        
	GPIO_InitStructure.GPIO_Pin = pinbit;
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = otype;
	GPIO_InitStructure.GPIO_PuPd = pupd;
 80003a2:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_InitStructure.GPIO_Speed = clk;
 80003a6:	f88d 7005 	strb.w	r7, [sp, #5]
	//
	GPIO_Init(port, &GPIO_InitStructure);
 80003aa:	f000 fdb5 	bl	8000f18 <GPIO_Init>
}
 80003ae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80003b0:	40020400 	.word	0x40020400
 80003b4:	40020800 	.word	0x40020800
 80003b8:	40020c00 	.word	0x40020c00
 80003bc:	40021000 	.word	0x40021000
 80003c0:	40021400 	.word	0x40021400
 80003c4:	40021800 	.word	0x40021800
 80003c8:	40021c00 	.word	0x40021c00
 80003cc:	40022000 	.word	0x40022000
 80003d0:	40020000 	.word	0x40020000

080003d4 <GPIOWrite>:


void GPIOWrite(GPIO_TypeDef * port, uint16_t bits) {
	GPIO_Write(port, bits);
 80003d4:	f000 be1a 	b.w	800100c <GPIO_Write>

080003d8 <i2c_begin>:
} CommDirection;

I2C_Status i2c1_status;
CommDirection i2c1_direction;

void i2c_begin(uint32_t clkspeed) {
 80003d8:	b530      	push	{r4, r5, lr}
	GPIO_InitTypeDef GPIO_InitStructure;
	I2C_InitTypeDef I2C_InitStructure;

	/* I2C Periph clock enable */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE); //  RCC_APB1PeriphClockCmd(I2C1_RCC, ENABLE);
 80003da:	2101      	movs	r1, #1
} CommDirection;

I2C_Status i2c1_status;
CommDirection i2c1_direction;

void i2c_begin(uint32_t clkspeed) {
 80003dc:	b087      	sub	sp, #28
 80003de:	4604      	mov	r4, r0
	GPIO_InitTypeDef GPIO_InitStructure;
	I2C_InitTypeDef I2C_InitStructure;

	/* I2C Periph clock enable */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE); //  RCC_APB1PeriphClockCmd(I2C1_RCC, ENABLE);
 80003e0:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80003e4:	f001 f964 	bl	80016b0 <RCC_APB1PeriphClockCmd>
	/* GPIO Periph clock enable */
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE); // PB5 (SMBA), PB6 (SCL), PB9 (SDA)  // RCC_APB2PeriphClockCmd(I2C1_GPIO_RCC, ENABLE);
 80003e8:	2002      	movs	r0, #2
 80003ea:	2101      	movs	r1, #1
 80003ec:	f001 f93c 	bl	8001668 <RCC_AHB1PeriphClockCmd>

	/* Configure I2C pins: SCL and SDA */
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_I2C1 );
 80003f0:	2106      	movs	r1, #6
 80003f2:	2204      	movs	r2, #4
 80003f4:	4821      	ldr	r0, [pc, #132]	; (800047c <i2c_begin+0xa4>)
 80003f6:	f000 fe0f 	bl	8001018 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_I2C1 );
 80003fa:	2109      	movs	r1, #9
 80003fc:	2204      	movs	r2, #4
 80003fe:	481f      	ldr	r0, [pc, #124]	; (800047c <i2c_begin+0xa4>)
 8000400:	f000 fe0a 	bl	8001018 <GPIO_PinAFConfig>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_9;
 8000404:	f44f 7310 	mov.w	r3, #576	; 0x240
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 8000408:	2201      	movs	r2, #1

	/* Configure I2C pins: SCL and SDA */
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_I2C1 );
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_I2C1 );

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_9;
 800040a:	9304      	str	r3, [sp, #16]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 800040c:	481b      	ldr	r0, [pc, #108]	; (800047c <i2c_begin+0xa4>)
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_I2C1 );
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_I2C1 );

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_9;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 800040e:	f88d 2016 	strb.w	r2, [sp, #22]
	/* Configure I2C pins: SCL and SDA */
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_I2C1 );
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_I2C1 );

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_9;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000412:	2302      	movs	r3, #2
	GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000414:	a904      	add	r1, sp, #16
	/* Configure I2C pins: SCL and SDA */
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_I2C1 );
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_I2C1 );

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_9;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000416:	f88d 3015 	strb.w	r3, [sp, #21]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 800041a:	f88d 3014 	strb.w	r3, [sp, #20]
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_I2C1 );

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_9;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 800041e:	f88d 2017 	strb.w	r2, [sp, #23]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000422:	f000 fd79 	bl	8000f18 <GPIO_Init>

//#if defined (REMAP_I2C1)
//Remap_I2C1_Configuration();
//#endif

	switch (clkspeed) {
 8000426:	4b16      	ldr	r3, [pc, #88]	; (8000480 <i2c_begin+0xa8>)
 8000428:	429c      	cmp	r4, r3
 800042a:	d004      	beq.n	8000436 <i2c_begin+0x5e>
 800042c:	4a15      	ldr	r2, [pc, #84]	; (8000484 <i2c_begin+0xac>)
	case 100000:
	case 400000:
		break;
	default:
		clkspeed = 100000;
 800042e:	4294      	cmp	r4, r2
 8000430:	bf0c      	ite	eq
 8000432:	4614      	moveq	r4, r2
 8000434:	461c      	movne	r4, r3
		break;
	}
	/* I2C configuration */
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 8000436:	2300      	movs	r3, #0
 8000438:	461d      	mov	r5, r3
 800043a:	f8ad 3004 	strh.w	r3, [sp, #4]
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
	I2C_InitStructure.I2C_ClockSpeed = clkspeed;
 800043e:	a906      	add	r1, sp, #24
		clkspeed = 100000;
		break;
	}
	/* I2C configuration */
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
 8000440:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8000444:	f8ad 3006 	strh.w	r3, [sp, #6]
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 8000448:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800044c:	f8ad 300a 	strh.w	r3, [sp, #10]
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
	I2C_InitStructure.I2C_ClockSpeed = clkspeed;
 8000450:	f841 4d18 	str.w	r4, [r1, #-24]!
	}
	/* I2C configuration */
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8000454:	f44f 4380 	mov.w	r3, #16384	; 0x4000
	I2C_InitStructure.I2C_ClockSpeed = clkspeed;

	/* Apply I2C configuration after enabling it */
	I2C_Init(I2C1, &I2C_InitStructure);
 8000458:	480b      	ldr	r0, [pc, #44]	; (8000488 <i2c_begin+0xb0>)
	}
	/* I2C configuration */
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 800045a:	f8ad 300c 	strh.w	r3, [sp, #12]
	I2C_InitStructure.I2C_ClockSpeed = clkspeed;

	/* Apply I2C configuration after enabling it */
	I2C_Init(I2C1, &I2C_InitStructure);
 800045e:	4669      	mov	r1, sp
 8000460:	f000 fe1e 	bl	80010a0 <I2C_Init>
	/* I2C Peripheral Enable */
	I2C_Cmd(I2C1, ENABLE);
 8000464:	4808      	ldr	r0, [pc, #32]	; (8000488 <i2c_begin+0xb0>)
 8000466:	2101      	movs	r1, #1
 8000468:	f000 fe8e 	bl	8001188 <I2C_Cmd>

	i2c1_status = NOT_READY;
 800046c:	4b07      	ldr	r3, [pc, #28]	; (800048c <i2c_begin+0xb4>)
 800046e:	22ff      	movs	r2, #255	; 0xff
 8000470:	701a      	strb	r2, [r3, #0]
	i2c1_direction = NOT_DEFINED;
 8000472:	4b07      	ldr	r3, [pc, #28]	; (8000490 <i2c_begin+0xb8>)
 8000474:	701d      	strb	r5, [r3, #0]
}
 8000476:	b007      	add	sp, #28
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	bf00      	nop
 800047c:	40020400 	.word	0x40020400
 8000480:	000186a0 	.word	0x000186a0
 8000484:	00061a80 	.word	0x00061a80
 8000488:	40005400 	.word	0x40005400
 800048c:	200009f9 	.word	0x200009f9
 8000490:	200009f8 	.word	0x200009f8

08000494 <i2c_transmit>:

void i2c_transmit(uint8_t addr, uint8_t * data, uint16_t length) {
 8000494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint16_t i;

	i2c1_direction = TRANSMITTER;
 8000498:	4b27      	ldr	r3, [pc, #156]	; (8000538 <i2c_transmit+0xa4>)
	//
	i2c1_status = NOT_READY;
 800049a:	4f28      	ldr	r7, [pc, #160]	; (800053c <i2c_transmit+0xa8>)

	i2c1_status = NOT_READY;
	i2c1_direction = NOT_DEFINED;
}

void i2c_transmit(uint8_t addr, uint8_t * data, uint16_t length) {
 800049c:	4615      	mov	r5, r2
	uint16_t i;

	i2c1_direction = TRANSMITTER;
 800049e:	2201      	movs	r2, #1
 80004a0:	701a      	strb	r2, [r3, #0]
	//
	i2c1_status = NOT_READY;
 80004a2:	23ff      	movs	r3, #255	; 0xff

	i2c1_status = NOT_READY;
	i2c1_direction = NOT_DEFINED;
}

void i2c_transmit(uint8_t addr, uint8_t * data, uint16_t length) {
 80004a4:	4606      	mov	r6, r0
 80004a6:	460c      	mov	r4, r1
	uint16_t i;

	i2c1_direction = TRANSMITTER;
	//
	i2c1_status = NOT_READY;
 80004a8:	703b      	strb	r3, [r7, #0]
	while (I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY ))
 80004aa:	4825      	ldr	r0, [pc, #148]	; (8000540 <i2c_transmit+0xac>)
 80004ac:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80004b0:	f000 ff82 	bl	80013b8 <I2C_GetFlagStatus>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d1f8      	bne.n	80004aa <i2c_transmit+0x16>
		;
	i2c1_status = READY;
 80004b8:	7038      	strb	r0, [r7, #0]

	/* Send STRAT condition */
	I2C_GenerateSTART(I2C1, ENABLE);
 80004ba:	2101      	movs	r1, #1
 80004bc:	4820      	ldr	r0, [pc, #128]	; (8000540 <i2c_transmit+0xac>)
 80004be:	f000 fe6f 	bl	80011a0 <I2C_GenerateSTART>
	/* Test on EV5 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT ))
 80004c2:	481f      	ldr	r0, [pc, #124]	; (8000540 <i2c_transmit+0xac>)
 80004c4:	491f      	ldr	r1, [pc, #124]	; (8000544 <i2c_transmit+0xb0>)
 80004c6:	f000 ff62 	bl	800138e <I2C_CheckEvent>
 80004ca:	2800      	cmp	r0, #0
 80004cc:	d0f9      	beq.n	80004c2 <i2c_transmit+0x2e>
		;
	i2c1_status = START_ISSUED;
 80004ce:	2201      	movs	r2, #1
 80004d0:	4b1a      	ldr	r3, [pc, #104]	; (800053c <i2c_transmit+0xa8>)

	/* Send address for write */
	I2C_Send7bitAddress(I2C1, addr << 1, I2C_Direction_Transmitter );
 80004d2:	481b      	ldr	r0, [pc, #108]	; (8000540 <i2c_transmit+0xac>)
	/* Send STRAT condition */
	I2C_GenerateSTART(I2C1, ENABLE);
	/* Test on EV5 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT ))
		;
	i2c1_status = START_ISSUED;
 80004d4:	701a      	strb	r2, [r3, #0]

	/* Send address for write */
	I2C_Send7bitAddress(I2C1, addr << 1, I2C_Direction_Transmitter );
 80004d6:	fa16 f102 	lsls.w	r1, r6, r2
 80004da:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 80004de:	2200      	movs	r2, #0
 80004e0:	f000 fe76 	bl	80011d0 <I2C_Send7bitAddress>
	/* Test on EV6 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED ))
 80004e4:	4816      	ldr	r0, [pc, #88]	; (8000540 <i2c_transmit+0xac>)
 80004e6:	4918      	ldr	r1, [pc, #96]	; (8000548 <i2c_transmit+0xb4>)
 80004e8:	f000 ff51 	bl	800138e <I2C_CheckEvent>
 80004ec:	2800      	cmp	r0, #0
 80004ee:	d0f9      	beq.n	80004e4 <i2c_transmit+0x50>
		;
	i2c1_status = DST_ADDRESS_SENT;

	for (i = 0; i < length; i++) {
 80004f0:	2600      	movs	r6, #0
 80004f2:	f8df 9048 	ldr.w	r9, [pc, #72]	; 800053c <i2c_transmit+0xa8>
		i2c1_status = TRANSMIT_BYTE_READY;
 80004f6:	f04f 0804 	mov.w	r8, #4
	/* Test on EV6 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED ))
		;
	i2c1_status = DST_ADDRESS_SENT;

	for (i = 0; i < length; i++) {
 80004fa:	e00c      	b.n	8000516 <i2c_transmit+0x82>
		i2c1_status = TRANSMIT_BYTE_READY;
 80004fc:	f889 8000 	strb.w	r8, [r9]
		I2C_SendData(I2C1, data[i]);
 8000500:	480f      	ldr	r0, [pc, #60]	; (8000540 <i2c_transmit+0xac>)
 8000502:	5da1      	ldrb	r1, [r4, r6]
 8000504:	f000 fee7 	bl	80012d6 <I2C_SendData>
		/* Test on EV8 and clear it */
		while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED ))
 8000508:	480d      	ldr	r0, [pc, #52]	; (8000540 <i2c_transmit+0xac>)
 800050a:	4910      	ldr	r1, [pc, #64]	; (800054c <i2c_transmit+0xb8>)
 800050c:	f000 ff3f 	bl	800138e <I2C_CheckEvent>
 8000510:	2800      	cmp	r0, #0
 8000512:	d0f9      	beq.n	8000508 <i2c_transmit+0x74>
			;
		i2c1_status = BYTE_TRANSMITTED;
 8000514:	3601      	adds	r6, #1
	/* Test on EV6 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED ))
		;
	i2c1_status = DST_ADDRESS_SENT;

	for (i = 0; i < length; i++) {
 8000516:	b2b3      	uxth	r3, r6
 8000518:	42ab      	cmp	r3, r5
 800051a:	4f08      	ldr	r7, [pc, #32]	; (800053c <i2c_transmit+0xa8>)
 800051c:	d3ee      	bcc.n	80004fc <i2c_transmit+0x68>
		/* Test on EV8 and clear it */
		while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED ))
			;
		i2c1_status = BYTE_TRANSMITTED;
	}
	i2c1_status = TRANSMIT_COMPLETED;
 800051e:	2306      	movs	r3, #6
 8000520:	703b      	strb	r3, [r7, #0]

	I2C_GenerateSTOP(I2C1, ENABLE);
 8000522:	4807      	ldr	r0, [pc, #28]	; (8000540 <i2c_transmit+0xac>)
 8000524:	2101      	movs	r1, #1
 8000526:	f000 fe47 	bl	80011b8 <I2C_GenerateSTOP>
	i2c1_status = NOT_READY;
 800052a:	23ff      	movs	r3, #255	; 0xff
 800052c:	703b      	strb	r3, [r7, #0]
	i2c1_direction = NOT_DEFINED;
 800052e:	4b02      	ldr	r3, [pc, #8]	; (8000538 <i2c_transmit+0xa4>)
 8000530:	2200      	movs	r2, #0
 8000532:	701a      	strb	r2, [r3, #0]
}
 8000534:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000538:	200009f8 	.word	0x200009f8
 800053c:	200009f9 	.word	0x200009f9
 8000540:	40005400 	.word	0x40005400
 8000544:	00030001 	.word	0x00030001
 8000548:	00070082 	.word	0x00070082
 800054c:	00070084 	.word	0x00070084

08000550 <i2c_requestFrom>:


void i2c_requestFrom(uint8_t addr, uint8_t req, uint8_t * recv, uint16_t lim) {
 8000550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000554:	4698      	mov	r8, r3
	uint16_t i;
	i2c1_direction = RECEIVER;
 8000556:	4b45      	ldr	r3, [pc, #276]	; (800066c <i2c_requestFrom+0x11c>)
	//
	i2c1_status = NOT_READY;
 8000558:	4f45      	ldr	r7, [pc, #276]	; (8000670 <i2c_requestFrom+0x120>)
	i2c1_status = NOT_READY;
	i2c1_direction = NOT_DEFINED;
}


void i2c_requestFrom(uint8_t addr, uint8_t req, uint8_t * recv, uint16_t lim) {
 800055a:	4614      	mov	r4, r2
	uint16_t i;
	i2c1_direction = RECEIVER;
 800055c:	2202      	movs	r2, #2
 800055e:	701a      	strb	r2, [r3, #0]
	//
	i2c1_status = NOT_READY;
 8000560:	23ff      	movs	r3, #255	; 0xff
	i2c1_status = NOT_READY;
	i2c1_direction = NOT_DEFINED;
}


void i2c_requestFrom(uint8_t addr, uint8_t req, uint8_t * recv, uint16_t lim) {
 8000562:	4606      	mov	r6, r0
 8000564:	460d      	mov	r5, r1
	uint16_t i;
	i2c1_direction = RECEIVER;
	//
	i2c1_status = NOT_READY;
 8000566:	703b      	strb	r3, [r7, #0]
	/* While the bus is busy */
	while (I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY ))
 8000568:	4842      	ldr	r0, [pc, #264]	; (8000674 <i2c_requestFrom+0x124>)
 800056a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800056e:	f000 ff23 	bl	80013b8 <I2C_GetFlagStatus>
 8000572:	2800      	cmp	r0, #0
 8000574:	d1f8      	bne.n	8000568 <i2c_requestFrom+0x18>
		;
	i2c1_status = READY;
 8000576:	7038      	strb	r0, [r7, #0]

	/* Send START condition */
	I2C_GenerateSTART(I2C1, ENABLE);
 8000578:	2101      	movs	r1, #1
 800057a:	483e      	ldr	r0, [pc, #248]	; (8000674 <i2c_requestFrom+0x124>)
 800057c:	f000 fe10 	bl	80011a0 <I2C_GenerateSTART>
	/* Test on EV5 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT ))
 8000580:	483c      	ldr	r0, [pc, #240]	; (8000674 <i2c_requestFrom+0x124>)
 8000582:	493d      	ldr	r1, [pc, #244]	; (8000678 <i2c_requestFrom+0x128>)
 8000584:	f000 ff03 	bl	800138e <I2C_CheckEvent>
 8000588:	2800      	cmp	r0, #0
 800058a:	d0f9      	beq.n	8000580 <i2c_requestFrom+0x30>
		;
	i2c1_status = START_ISSUED;
 800058c:	2301      	movs	r3, #1
 800058e:	4f38      	ldr	r7, [pc, #224]	; (8000670 <i2c_requestFrom+0x120>)

	/* Send EEPROM address for write */
	I2C_Send7bitAddress(I2C1, addr << 1, I2C_Direction_Transmitter );
 8000590:	4838      	ldr	r0, [pc, #224]	; (8000674 <i2c_requestFrom+0x124>)
	/* Send START condition */
	I2C_GenerateSTART(I2C1, ENABLE);
	/* Test on EV5 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT ))
		;
	i2c1_status = START_ISSUED;
 8000592:	703b      	strb	r3, [r7, #0]

	/* Send EEPROM address for write */
	I2C_Send7bitAddress(I2C1, addr << 1, I2C_Direction_Transmitter );
 8000594:	409e      	lsls	r6, r3
 8000596:	b2f6      	uxtb	r6, r6
 8000598:	4631      	mov	r1, r6
 800059a:	2200      	movs	r2, #0
 800059c:	f000 fe18 	bl	80011d0 <I2C_Send7bitAddress>
	/* Test on EV6 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED )) {
 80005a0:	4834      	ldr	r0, [pc, #208]	; (8000674 <i2c_requestFrom+0x124>)
 80005a2:	4936      	ldr	r1, [pc, #216]	; (800067c <i2c_requestFrom+0x12c>)
 80005a4:	f000 fef3 	bl	800138e <I2C_CheckEvent>
 80005a8:	2800      	cmp	r0, #0
 80005aa:	d0f9      	beq.n	80005a0 <i2c_requestFrom+0x50>
	}
	i2c1_status = DST_ADDRESS_SENT;

	i2c1_status = TRANSMIT_BYTE_READY;
 80005ac:	2304      	movs	r3, #4
 80005ae:	703b      	strb	r3, [r7, #0]
	/* Send the EEPROM's internal address to read from: MSB of the address first */
	I2C_SendData(I2C1, req);
 80005b0:	4830      	ldr	r0, [pc, #192]	; (8000674 <i2c_requestFrom+0x124>)
 80005b2:	4629      	mov	r1, r5
 80005b4:	f000 fe8f 	bl	80012d6 <I2C_SendData>
	/* Test on EV8 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED ))
 80005b8:	482e      	ldr	r0, [pc, #184]	; (8000674 <i2c_requestFrom+0x124>)
 80005ba:	4931      	ldr	r1, [pc, #196]	; (8000680 <i2c_requestFrom+0x130>)
 80005bc:	f000 fee7 	bl	800138e <I2C_CheckEvent>
 80005c0:	2800      	cmp	r0, #0
 80005c2:	d0f9      	beq.n	80005b8 <i2c_requestFrom+0x68>
		;
	i2c1_status = TRANSMIT_COMPLETED;
 80005c4:	4d2a      	ldr	r5, [pc, #168]	; (8000670 <i2c_requestFrom+0x120>)

	//	  I2C_GenerateSTOP(I2C1, ENABLE);

	/* Send STRAT condition a second time */
	I2C_GenerateSTART(I2C1, ENABLE);
 80005c6:	482b      	ldr	r0, [pc, #172]	; (8000674 <i2c_requestFrom+0x124>)
	/* Send the EEPROM's internal address to read from: MSB of the address first */
	I2C_SendData(I2C1, req);
	/* Test on EV8 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED ))
		;
	i2c1_status = TRANSMIT_COMPLETED;
 80005c8:	2306      	movs	r3, #6
 80005ca:	702b      	strb	r3, [r5, #0]

	//	  I2C_GenerateSTOP(I2C1, ENABLE);

	/* Send STRAT condition a second time */
	I2C_GenerateSTART(I2C1, ENABLE);
 80005cc:	2101      	movs	r1, #1
 80005ce:	f000 fde7 	bl	80011a0 <I2C_GenerateSTART>
	/* Test on EV5 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT ))
 80005d2:	4828      	ldr	r0, [pc, #160]	; (8000674 <i2c_requestFrom+0x124>)
 80005d4:	4928      	ldr	r1, [pc, #160]	; (8000678 <i2c_requestFrom+0x128>)
 80005d6:	f000 feda 	bl	800138e <I2C_CheckEvent>
 80005da:	2800      	cmp	r0, #0
 80005dc:	d0f9      	beq.n	80005d2 <i2c_requestFrom+0x82>
		;
	i2c1_status = RESTART_ISSUED;
 80005de:	2307      	movs	r3, #7
 80005e0:	702b      	strb	r3, [r5, #0]

	/* Send EEPROM address for read */
	I2C_Send7bitAddress(I2C1, addr << 1, I2C_Direction_Receiver );
 80005e2:	4824      	ldr	r0, [pc, #144]	; (8000674 <i2c_requestFrom+0x124>)
 80005e4:	4631      	mov	r1, r6
 80005e6:	2201      	movs	r2, #1
 80005e8:	f000 fdf2 	bl	80011d0 <I2C_Send7bitAddress>
	/* Test on EV6 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED ))
 80005ec:	4821      	ldr	r0, [pc, #132]	; (8000674 <i2c_requestFrom+0x124>)
 80005ee:	4925      	ldr	r1, [pc, #148]	; (8000684 <i2c_requestFrom+0x134>)
 80005f0:	f000 fecd 	bl	800138e <I2C_CheckEvent>
 80005f4:	2800      	cmp	r0, #0
 80005f6:	d0f9      	beq.n	80005ec <i2c_requestFrom+0x9c>
		;
	i2c1_status = SRC_ADDRESS_SENT;

	for (i = 1; i < lim; i++) {
 80005f8:	2501      	movs	r5, #1
 80005fa:	4f1d      	ldr	r7, [pc, #116]	; (8000670 <i2c_requestFrom+0x120>)
 80005fc:	e00e      	b.n	800061c <i2c_requestFrom+0xcc>
		i2c1_status = RECEIVE_BYTE_READY;
 80005fe:	2308      	movs	r3, #8
 8000600:	703b      	strb	r3, [r7, #0]
		while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_RECEIVED )) {
 8000602:	481c      	ldr	r0, [pc, #112]	; (8000674 <i2c_requestFrom+0x124>)
 8000604:	4920      	ldr	r1, [pc, #128]	; (8000688 <i2c_requestFrom+0x138>)
 8000606:	f000 fec2 	bl	800138e <I2C_CheckEvent>
 800060a:	2800      	cmp	r0, #0
 800060c:	d0f9      	beq.n	8000602 <i2c_requestFrom+0xb2>
		}
		/* Read a byte from the EEPROM */
		*recv++ = I2C_ReceiveData(I2C1 );
 800060e:	4819      	ldr	r0, [pc, #100]	; (8000674 <i2c_requestFrom+0x124>)
 8000610:	f000 fe63 	bl	80012da <I2C_ReceiveData>
	/* Test on EV6 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED ))
		;
	i2c1_status = SRC_ADDRESS_SENT;

	for (i = 1; i < lim; i++) {
 8000614:	3501      	adds	r5, #1
		i2c1_status = RECEIVE_BYTE_READY;
		while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_RECEIVED )) {
		}
		/* Read a byte from the EEPROM */
		*recv++ = I2C_ReceiveData(I2C1 );
 8000616:	f804 0b01 	strb.w	r0, [r4], #1
	/* Test on EV6 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED ))
		;
	i2c1_status = SRC_ADDRESS_SENT;

	for (i = 1; i < lim; i++) {
 800061a:	b2ad      	uxth	r5, r5
 800061c:	4545      	cmp	r5, r8
 800061e:	4e14      	ldr	r6, [pc, #80]	; (8000670 <i2c_requestFrom+0x120>)
 8000620:	d3ed      	bcc.n	80005fe <i2c_requestFrom+0xae>
		}
		/* Read a byte from the EEPROM */
		*recv++ = I2C_ReceiveData(I2C1 );
		i2c1_status = BYTE_RECEIVED;
	}
	i2c1_status = BEFORELAST_BYTE_RECEIVED;
 8000622:	230a      	movs	r3, #10
 8000624:	7033      	strb	r3, [r6, #0]

	/* Disable Acknowledgement */
	I2C_AcknowledgeConfig(I2C1, DISABLE);
 8000626:	4813      	ldr	r0, [pc, #76]	; (8000674 <i2c_requestFrom+0x124>)
 8000628:	2100      	movs	r1, #0
 800062a:	f000 fdd9 	bl	80011e0 <I2C_AcknowledgeConfig>
	/* Send STOP Condition */
	I2C_GenerateSTOP(I2C1, ENABLE);
 800062e:	4811      	ldr	r0, [pc, #68]	; (8000674 <i2c_requestFrom+0x124>)
 8000630:	2101      	movs	r1, #1
 8000632:	f000 fdc1 	bl	80011b8 <I2C_GenerateSTOP>
	i2c1_status = LAST_BYTE_READY;
 8000636:	230b      	movs	r3, #11
 8000638:	7033      	strb	r3, [r6, #0]

	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_RECEIVED )) {
 800063a:	480e      	ldr	r0, [pc, #56]	; (8000674 <i2c_requestFrom+0x124>)
 800063c:	4912      	ldr	r1, [pc, #72]	; (8000688 <i2c_requestFrom+0x138>)
 800063e:	f000 fea6 	bl	800138e <I2C_CheckEvent>
 8000642:	2800      	cmp	r0, #0
 8000644:	d0f9      	beq.n	800063a <i2c_requestFrom+0xea>
	}
	/* Read a byte from the EEPROM */
	*recv = I2C_ReceiveData(I2C1 );
 8000646:	480b      	ldr	r0, [pc, #44]	; (8000674 <i2c_requestFrom+0x124>)
 8000648:	f000 fe47 	bl	80012da <I2C_ReceiveData>
 800064c:	7020      	strb	r0, [r4, #0]
	i2c1_status = RECEIVE_BYTE_COMPLETED;
 800064e:	4c08      	ldr	r4, [pc, #32]	; (8000670 <i2c_requestFrom+0x120>)

	/* Enable Acknowledgement to be ready for another reception */
	I2C_AcknowledgeConfig(I2C1, ENABLE);
 8000650:	4808      	ldr	r0, [pc, #32]	; (8000674 <i2c_requestFrom+0x124>)

	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_RECEIVED )) {
	}
	/* Read a byte from the EEPROM */
	*recv = I2C_ReceiveData(I2C1 );
	i2c1_status = RECEIVE_BYTE_COMPLETED;
 8000652:	230c      	movs	r3, #12
 8000654:	7023      	strb	r3, [r4, #0]

	/* Enable Acknowledgement to be ready for another reception */
	I2C_AcknowledgeConfig(I2C1, ENABLE);
 8000656:	2101      	movs	r1, #1
 8000658:	f000 fdc2 	bl	80011e0 <I2C_AcknowledgeConfig>
	i2c1_status = NOT_READY;
 800065c:	23ff      	movs	r3, #255	; 0xff
 800065e:	7023      	strb	r3, [r4, #0]
	i2c1_direction = NOT_DEFINED;
 8000660:	4b02      	ldr	r3, [pc, #8]	; (800066c <i2c_requestFrom+0x11c>)
 8000662:	2200      	movs	r2, #0
 8000664:	701a      	strb	r2, [r3, #0]
}
 8000666:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800066a:	bf00      	nop
 800066c:	200009f8 	.word	0x200009f8
 8000670:	200009f9 	.word	0x200009f9
 8000674:	40005400 	.word	0x40005400
 8000678:	00030001 	.word	0x00030001
 800067c:	00070082 	.word	0x00070082
 8000680:	00070084 	.word	0x00070084
 8000684:	00030002 	.word	0x00030002
 8000688:	00030040 	.word	0x00030040

0800068c <i2c_send>:

void i2c_send(uint8_t addr, uint8_t * data, uint16_t length) {

}
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <SysTick_Handler>:
#include "systick.h"

volatile uint32_t _systick_counter;

void SysTick_Handler(void) {
	_systick_counter++; /* increment timeTicks counter */
 8000690:	4b02      	ldr	r3, [pc, #8]	; (800069c <SysTick_Handler+0xc>)
 8000692:	681a      	ldr	r2, [r3, #0]
 8000694:	3201      	adds	r2, #1
 8000696:	601a      	str	r2, [r3, #0]
}
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	200009fc 	.word	0x200009fc

080006a0 <SysTick_delay>:

void SysTick_delay(const uint32_t dlyTicks) {
	uint32_t currTicks = _systick_counter;
 80006a0:	4b03      	ldr	r3, [pc, #12]	; (80006b0 <SysTick_delay+0x10>)
 80006a2:	681a      	ldr	r2, [r3, #0]

	while ((_systick_counter - currTicks) < dlyTicks)
 80006a4:	6819      	ldr	r1, [r3, #0]
 80006a6:	1a89      	subs	r1, r1, r2
 80006a8:	4281      	cmp	r1, r0
 80006aa:	d3fb      	bcc.n	80006a4 <SysTick_delay+0x4>
		;
}
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	200009fc 	.word	0x200009fc

080006b4 <SysTick_Start>:

void SysTick_Start(void) {
 80006b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	RCC_ClocksTypeDef RCC_Clocks;
	  /* SysTick end of count event each 1ms */
	  RCC_GetClocksFreq(&RCC_Clocks);
 80006b6:	4668      	mov	r0, sp
 80006b8:	f000 ff66 	bl	8001588 <RCC_GetClocksFreq>
	  SysTick_Config(RCC_Clocks.HCLK_Frequency / 1000);
 80006bc:	9a01      	ldr	r2, [sp, #4]
 80006be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006c2:	fbb2 f2f3 	udiv	r2, r2, r3
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 80006c6:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <SysTick_Start+0x2c>)
 80006c8:	3a01      	subs	r2, #1
 80006ca:	605a      	str	r2, [r3, #4]
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80006cc:	4a05      	ldr	r2, [pc, #20]	; (80006e4 <SysTick_Start+0x30>)
 80006ce:	21f0      	movs	r1, #240	; 0xf0
 80006d0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006d8:	2207      	movs	r2, #7
 80006da:	601a      	str	r2, [r3, #0]
		// Handle Error
		while (1)
			;
	}
*/
}
 80006dc:	b005      	add	sp, #20
 80006de:	bd00      	pop	{pc}
 80006e0:	e000e010 	.word	0xe000e010
 80006e4:	e000ed00 	.word	0xe000ed00

080006e8 <SysTick_count>:

uint32_t SysTick_count() {
	return _systick_counter;
 80006e8:	4b01      	ldr	r3, [pc, #4]	; (80006f0 <SysTick_count+0x8>)
 80006ea:	6818      	ldr	r0, [r3, #0]
}
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	200009fc 	.word	0x200009fc

080006f4 <buffer_clear>:
};

USARTRing rxring[6], txring[6];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 80006f4:	2300      	movs	r3, #0
 80006f6:	f8a0 3100 	strh.w	r3, [r0, #256]	; 0x100
	r->tail = 0;
 80006fa:	f8a0 3102 	strh.w	r3, [r0, #258]	; 0x102
	r->count = 0;
 80006fe:	f8a0 3104 	strh.w	r3, [r0, #260]	; 0x104
}
 8000702:	4770      	bx	lr

08000704 <buffer_count>:

uint16_t buffer_count(USARTRing * r) {
	return r->count;
}
 8000704:	f8b0 0104 	ldrh.w	r0, [r0, #260]	; 0x104
 8000708:	4770      	bx	lr

0800070a <buffer_is_full>:

uint8_t buffer_is_full(USARTRing * r) {
	if ( (r->head == r->tail) && (r->count > 0) ) {
 800070a:	f9b0 2100 	ldrsh.w	r2, [r0, #256]	; 0x100
 800070e:	f9b0 3102 	ldrsh.w	r3, [r0, #258]	; 0x102
 8000712:	429a      	cmp	r2, r3
 8000714:	d105      	bne.n	8000722 <buffer_is_full+0x18>

uint16_t buffer_count(USARTRing * r) {
	return r->count;
}

uint8_t buffer_is_full(USARTRing * r) {
 8000716:	f8b0 0104 	ldrh.w	r0, [r0, #260]	; 0x104
	if ( (r->head == r->tail) && (r->count > 0) ) {
		return 1;
 800071a:	3000      	adds	r0, #0
 800071c:	bf18      	it	ne
 800071e:	2001      	movne	r0, #1
 8000720:	4770      	bx	lr
	}
	return 0;
 8000722:	2000      	movs	r0, #0
}
 8000724:	4770      	bx	lr

08000726 <buffer_enque>:

uint16_t buffer_enque(USARTRing * r, uint16_t w) {
 8000726:	b538      	push	{r3, r4, r5, lr}
 8000728:	4604      	mov	r4, r0
 800072a:	460d      	mov	r5, r1
	if ( buffer_is_full(r) )
 800072c:	f7ff ffed 	bl	800070a <buffer_is_full>
 8000730:	b9b0      	cbnz	r0, 8000760 <buffer_enque+0x3a>
		return 0xffff;
	r->buf[r->head++] = w;
 8000732:	f8b4 3100 	ldrh.w	r3, [r4, #256]	; 0x100
 8000736:	b21a      	sxth	r2, r3
 8000738:	3301      	adds	r3, #1
 800073a:	f824 5012 	strh.w	r5, [r4, r2, lsl #1]
	r->count++;
 800073e:	f8b4 2104 	ldrh.w	r2, [r4, #260]	; 0x104
 8000742:	3201      	adds	r2, #1
 8000744:	f8a4 2104 	strh.w	r2, [r4, #260]	; 0x104
	r->head %= USART_BUFFER_SIZE;
 8000748:	b21a      	sxth	r2, r3
 800074a:	4b07      	ldr	r3, [pc, #28]	; (8000768 <buffer_enque+0x42>)
 800074c:	4013      	ands	r3, r2
 800074e:	2b00      	cmp	r3, #0
 8000750:	da03      	bge.n	800075a <buffer_enque+0x34>
 8000752:	3b01      	subs	r3, #1
 8000754:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000758:	3301      	adds	r3, #1
 800075a:	f8a4 3100 	strh.w	r3, [r4, #256]	; 0x100
 800075e:	e001      	b.n	8000764 <buffer_enque+0x3e>
	return 0;
}

uint16_t buffer_enque(USARTRing * r, uint16_t w) {
	if ( buffer_is_full(r) )
		return 0xffff;
 8000760:	f64f 75ff 	movw	r5, #65535	; 0xffff
	r->buf[r->head++] = w;
	r->count++;
	r->head %= USART_BUFFER_SIZE;
	return w;
}
 8000764:	4628      	mov	r0, r5
 8000766:	bd38      	pop	{r3, r4, r5, pc}
 8000768:	8000007f 	.word	0x8000007f

0800076c <buffer_deque>:
	r->tail = 0;
	r->count = 0;
}

uint16_t buffer_count(USARTRing * r) {
	return r->count;
 800076c:	f8b0 1104 	ldrh.w	r1, [r0, #260]	; 0x104
	r->count++;
	r->head %= USART_BUFFER_SIZE;
	return w;
}

uint16_t buffer_deque(USARTRing * r) {
 8000770:	4602      	mov	r2, r0
	uint16_t w;
	if ( buffer_count(r) == 0 )
 8000772:	b1a1      	cbz	r1, 800079e <buffer_deque+0x32>
		return 0xffff;
	w = r->buf[r->tail++];
 8000774:	f8b0 3102 	ldrh.w	r3, [r0, #258]	; 0x102
	r->count--;
 8000778:	3901      	subs	r1, #1

uint16_t buffer_deque(USARTRing * r) {
	uint16_t w;
	if ( buffer_count(r) == 0 )
		return 0xffff;
	w = r->buf[r->tail++];
 800077a:	b218      	sxth	r0, r3
 800077c:	3301      	adds	r3, #1
	r->count--;
 800077e:	f8a2 1104 	strh.w	r1, [r2, #260]	; 0x104
	r->tail %= USART_BUFFER_SIZE;
 8000782:	b219      	sxth	r1, r3
 8000784:	4b07      	ldr	r3, [pc, #28]	; (80007a4 <buffer_deque+0x38>)

uint16_t buffer_deque(USARTRing * r) {
	uint16_t w;
	if ( buffer_count(r) == 0 )
		return 0xffff;
	w = r->buf[r->tail++];
 8000786:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
	r->count--;
	r->tail %= USART_BUFFER_SIZE;
 800078a:	400b      	ands	r3, r1
 800078c:	2b00      	cmp	r3, #0
 800078e:	da03      	bge.n	8000798 <buffer_deque+0x2c>
 8000790:	3b01      	subs	r3, #1
 8000792:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000796:	3301      	adds	r3, #1
 8000798:	f8a2 3102 	strh.w	r3, [r2, #258]	; 0x102
 800079c:	4770      	bx	lr
}

uint16_t buffer_deque(USARTRing * r) {
	uint16_t w;
	if ( buffer_count(r) == 0 )
		return 0xffff;
 800079e:	f64f 70ff 	movw	r0, #65535	; 0xffff
	w = r->buf[r->tail++];
	r->count--;
	r->tail %= USART_BUFFER_SIZE;
	return w;
}
 80007a2:	4770      	bx	lr
 80007a4:	8000007f 	.word	0x8000007f

080007a8 <usart_begin>:

void usart_begin(USARTSerial usx, GPIOPin rx, GPIOPin tx, uint32_t baud) {
 80007a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80007ac:	4605      	mov	r5, r0
 80007ae:	b089      	sub	sp, #36	; 0x24
 80007b0:	4688      	mov	r8, r1
 80007b2:	4691      	mov	r9, r2
 80007b4:	469a      	mov	sl, r3
	NVIC_InitTypeDef NVIC_InitStructure; // this is used to configure the NVIC (nested vector interrupt controller)

	uint8_t af = GPIO_AF_USART1;
	IRQn_Type irq = USART1_IRQn;

	switch(usx) {
 80007b6:	2804      	cmp	r0, #4
 80007b8:	d828      	bhi.n	800080c <usart_begin+0x64>
 80007ba:	e8df f000 	tbb	[pc, r0]
 80007be:	0903      	.short	0x0903
 80007c0:	1811      	.short	0x1811
 80007c2:	1f          	.byte	0x1f
 80007c3:	00          	.byte	0x00
	case USART1Serial:
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 80007c4:	2010      	movs	r0, #16
 80007c6:	2101      	movs	r1, #1
 80007c8:	f000 ff7e 	bl	80016c8 <RCC_APB2PeriphClockCmd>
		af = GPIO_AF_USART1;
		irq = USART1_IRQn;
 80007cc:	2725      	movs	r7, #37	; 0x25
 80007ce:	e005      	b.n	80007dc <usart_begin+0x34>
	break;
	case USART2Serial:
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 80007d0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80007d4:	2101      	movs	r1, #1
 80007d6:	f000 ff6b 	bl	80016b0 <RCC_APB1PeriphClockCmd>
		af = GPIO_AF_USART2;
		irq = USART2_IRQn;
 80007da:	2726      	movs	r7, #38	; 0x26
		af = GPIO_AF_USART1;
		irq = USART1_IRQn;
	break;
	case USART2Serial:
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
		af = GPIO_AF_USART2;
 80007dc:	2607      	movs	r6, #7
		irq = USART2_IRQn;
	break;
 80007de:	e01c      	b.n	800081a <usart_begin+0x72>
	case USART3Serial:
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
 80007e0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80007e4:	2101      	movs	r1, #1
 80007e6:	f000 ff63 	bl	80016b0 <RCC_APB1PeriphClockCmd>
		af = GPIO_AF_USART3;
		irq = USART3_IRQn;
 80007ea:	2727      	movs	r7, #39	; 0x27
 80007ec:	e7f6      	b.n	80007dc <usart_begin+0x34>
	break;
	case UART4Serial:
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART4, ENABLE);
 80007ee:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80007f2:	2101      	movs	r1, #1
 80007f4:	f000 ff5c 	bl	80016b0 <RCC_APB1PeriphClockCmd>
		af = GPIO_AF_UART4;
		irq = UART4_IRQn;
 80007f8:	2734      	movs	r7, #52	; 0x34
 80007fa:	e005      	b.n	8000808 <usart_begin+0x60>
	break;
	case UART5Serial:
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART5, ENABLE);
 80007fc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000800:	2101      	movs	r1, #1
 8000802:	f000 ff55 	bl	80016b0 <RCC_APB1PeriphClockCmd>
		af = GPIO_AF_UART5;
		irq = UART5_IRQn;
 8000806:	2735      	movs	r7, #53	; 0x35
		af = GPIO_AF_UART4;
		irq = UART4_IRQn;
	break;
	case UART5Serial:
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART5, ENABLE);
		af = GPIO_AF_UART5;
 8000808:	2608      	movs	r6, #8
		irq = UART5_IRQn;
		break;
 800080a:	e006      	b.n	800081a <usart_begin+0x72>
	case USART6Serial:
	default:
		usx = USART6Serial;
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART6, ENABLE);
 800080c:	2020      	movs	r0, #32
 800080e:	2101      	movs	r1, #1
 8000810:	f000 ff5a 	bl	80016c8 <RCC_APB2PeriphClockCmd>
		af = GPIO_AF_USART6;
		irq = USART6_IRQn;
 8000814:	2747      	movs	r7, #71	; 0x47
		break;
	case USART6Serial:
	default:
		usx = USART6Serial;
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART6, ENABLE);
		af = GPIO_AF_USART6;
 8000816:	2608      	movs	r6, #8
		af = GPIO_AF_UART5;
		irq = UART5_IRQn;
		break;
	case USART6Serial:
	default:
		usx = USART6Serial;
 8000818:	2505      	movs	r5, #5
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART6, ENABLE);
		af = GPIO_AF_USART6;
		irq = USART6_IRQn;
		break;
	}
	GPIOMode(PinPort(rx), PinBit(rx), GPIO_Mode_AF, GPIO_Speed_50MHz, GPIO_OType_PP, GPIO_PuPd_NOPULL);
 800081a:	4640      	mov	r0, r8
 800081c:	f7ff fd6c 	bl	80002f8 <PinPort>
 8000820:	4683      	mov	fp, r0
 8000822:	4640      	mov	r0, r8
 8000824:	f7ff fd72 	bl	800030c <PinBit>
 8000828:	2202      	movs	r2, #2
 800082a:	2400      	movs	r4, #0
 800082c:	4601      	mov	r1, r0
 800082e:	4613      	mov	r3, r2
 8000830:	4658      	mov	r0, fp
 8000832:	9400      	str	r4, [sp, #0]
 8000834:	9401      	str	r4, [sp, #4]
 8000836:	f7ff fd73 	bl	8000320 <GPIOMode>
	GPIOMode(PinPort(tx), PinBit(tx), GPIO_Mode_AF, GPIO_Speed_50MHz, GPIO_OType_PP, GPIO_PuPd_NOPULL);
 800083a:	4648      	mov	r0, r9
 800083c:	f7ff fd5c 	bl	80002f8 <PinPort>
 8000840:	4683      	mov	fp, r0
 8000842:	4648      	mov	r0, r9
 8000844:	f7ff fd62 	bl	800030c <PinBit>
 8000848:	2202      	movs	r2, #2
 800084a:	4613      	mov	r3, r2
 800084c:	4601      	mov	r1, r0
 800084e:	4658      	mov	r0, fp
 8000850:	9400      	str	r4, [sp, #0]
 8000852:	9401      	str	r4, [sp, #4]
 8000854:	f7ff fd64 	bl	8000320 <GPIOMode>

	GPIO_PinAFConfig(PinPort(rx), PinSource(rx), af );
 8000858:	4640      	mov	r0, r8
 800085a:	f7ff fd4d 	bl	80002f8 <PinPort>
 800085e:	4683      	mov	fp, r0
 8000860:	4640      	mov	r0, r8
 8000862:	f7ff fd5a 	bl	800031a <PinSource>
 8000866:	4632      	mov	r2, r6
 8000868:	4601      	mov	r1, r0
 800086a:	4658      	mov	r0, fp
 800086c:	f000 fbd4 	bl	8001018 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(PinPort(tx), PinSource(tx), af );
 8000870:	4648      	mov	r0, r9
 8000872:	f7ff fd41 	bl	80002f8 <PinPort>
 8000876:	4680      	mov	r8, r0
 8000878:	4648      	mov	r0, r9
 800087a:	f7ff fd4e 	bl	800031a <PinSource>
 800087e:	4632      	mov	r2, r6
 8000880:	4601      	mov	r1, r0
	USART_InitStruct.USART_StopBits = USART_StopBits_1;	// we want 1 stop bit (standard)
	USART_InitStruct.USART_Parity = USART_Parity_No;// we don't want a parity bit (standard)
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver

	USART_Init(usartx[usx], &USART_InitStruct); // again all the properties are passed to the USART_Init function which takes care of all the bit setting
 8000882:	4e26      	ldr	r6, [pc, #152]	; (800091c <usart_begin+0x174>)
	}
	GPIOMode(PinPort(rx), PinBit(rx), GPIO_Mode_AF, GPIO_Speed_50MHz, GPIO_OType_PP, GPIO_PuPd_NOPULL);
	GPIOMode(PinPort(tx), PinBit(tx), GPIO_Mode_AF, GPIO_Speed_50MHz, GPIO_OType_PP, GPIO_PuPd_NOPULL);

	GPIO_PinAFConfig(PinPort(rx), PinSource(rx), af );
	GPIO_PinAFConfig(PinPort(tx), PinSource(tx), af );
 8000884:	4640      	mov	r0, r8
 8000886:	f000 fbc7 	bl	8001018 <GPIO_PinAFConfig>
	USART_InitStruct.USART_BaudRate = baud;	// the baudrate is set to the value we passed into this init function
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
	USART_InitStruct.USART_StopBits = USART_StopBits_1;	// we want 1 stop bit (standard)
	USART_InitStruct.USART_Parity = USART_Parity_No;// we don't want a parity bit (standard)
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver
 800088a:	230c      	movs	r3, #12

	USART_Init(usartx[usx], &USART_InitStruct); // again all the properties are passed to the USART_Init function which takes care of all the bit setting
 800088c:	eb0d 0103 	add.w	r1, sp, r3
 8000890:	f856 0025 	ldr.w	r0, [r6, r5, lsl #2]
	USART_InitStruct.USART_BaudRate = baud;	// the baudrate is set to the value we passed into this init function
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
	USART_InitStruct.USART_StopBits = USART_StopBits_1;	// we want 1 stop bit (standard)
	USART_InitStruct.USART_Parity = USART_Parity_No;// we don't want a parity bit (standard)
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver
 8000894:	f8ad 3016 	strh.w	r3, [sp, #22]
	GPIOMode(PinPort(tx), PinBit(tx), GPIO_Mode_AF, GPIO_Speed_50MHz, GPIO_OType_PP, GPIO_PuPd_NOPULL);

	GPIO_PinAFConfig(PinPort(rx), PinSource(rx), af );
	GPIO_PinAFConfig(PinPort(tx), PinSource(tx), af );

	USART_InitStruct.USART_BaudRate = baud;	// the baudrate is set to the value we passed into this init function
 8000898:	f8cd a00c 	str.w	sl, [sp, #12]
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
 800089c:	f8ad 4010 	strh.w	r4, [sp, #16]
	USART_InitStruct.USART_StopBits = USART_StopBits_1;	// we want 1 stop bit (standard)
 80008a0:	f8ad 4012 	strh.w	r4, [sp, #18]
	USART_InitStruct.USART_Parity = USART_Parity_No;// we don't want a parity bit (standard)
 80008a4:	f8ad 4014 	strh.w	r4, [sp, #20]
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
 80008a8:	f8ad 4018 	strh.w	r4, [sp, #24]
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver

	USART_Init(usartx[usx], &USART_InitStruct); // again all the properties are passed to the USART_Init function which takes care of all the bit setting
 80008ac:	f001 fdf8 	bl	80024a0 <USART_Init>

	USART_ITConfig(usartx[usx], USART_IT_RXNE, ENABLE); // enable the USART3 receive interrupt
 80008b0:	f856 0025 	ldr.w	r0, [r6, r5, lsl #2]
 80008b4:	2201      	movs	r2, #1
 80008b6:	f240 5125 	movw	r1, #1317	; 0x525
 80008ba:	f001 ff2f 	bl	800271c <USART_ITConfig>
	USART_ITConfig(usartx[usx], USART_IT_TXE, DISABLE);
 80008be:	4622      	mov	r2, r4
 80008c0:	f856 0025 	ldr.w	r0, [r6, r5, lsl #2]
 80008c4:	f240 7127 	movw	r1, #1831	; 0x727
 80008c8:	f001 ff28 	bl	800271c <USART_ITConfig>

	NVIC_InitStructure.NVIC_IRQChannel = irq;
 80008cc:	f88d 701c 	strb.w	r7, [sp, #28]
	// we want to configure the USART3 interrupts
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0; // this sets the priority group of the USART3 interrupts
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0; // this sets the subpriority inside the group
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;	// the USART3 interrupts are globally enabled
	NVIC_Init(&NVIC_InitStructure);	// the properties are passed to the NVIC_Init function which takes care of the low level stuff
 80008d0:	a807      	add	r0, sp, #28

	NVIC_InitStructure.NVIC_IRQChannel = irq;
	// we want to configure the USART3 interrupts
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0; // this sets the priority group of the USART3 interrupts
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0; // this sets the subpriority inside the group
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;	// the USART3 interrupts are globally enabled
 80008d2:	2701      	movs	r7, #1
	USART_ITConfig(usartx[usx], USART_IT_RXNE, ENABLE); // enable the USART3 receive interrupt
	USART_ITConfig(usartx[usx], USART_IT_TXE, DISABLE);

	NVIC_InitStructure.NVIC_IRQChannel = irq;
	// we want to configure the USART3 interrupts
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0; // this sets the priority group of the USART3 interrupts
 80008d4:	f88d 401d 	strb.w	r4, [sp, #29]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0; // this sets the subpriority inside the group
 80008d8:	f88d 401e 	strb.w	r4, [sp, #30]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;	// the USART3 interrupts are globally enabled
 80008dc:	f88d 701f 	strb.w	r7, [sp, #31]
	NVIC_Init(&NVIC_InitStructure);	// the properties are passed to the NVIC_Init function which takes care of the low level stuff
 80008e0:	f000 fa56 	bl	8000d90 <NVIC_Init>
	//
	buffer_clear(&rxring[usx]);
 80008e4:	f44f 7383 	mov.w	r3, #262	; 0x106
 80008e8:	4a0d      	ldr	r2, [pc, #52]	; (8000920 <usart_begin+0x178>)
	buffer_clear(&txring[usx]);
	// finally this enables the complete USART3 peripheral
	USART_Cmd(usartx[usx], ENABLE);
 80008ea:	f856 0025 	ldr.w	r0, [r6, r5, lsl #2]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0; // this sets the priority group of the USART3 interrupts
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0; // this sets the subpriority inside the group
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;	// the USART3 interrupts are globally enabled
	NVIC_Init(&NVIC_InitStructure);	// the properties are passed to the NVIC_Init function which takes care of the low level stuff
	//
	buffer_clear(&rxring[usx]);
 80008ee:	436b      	muls	r3, r5
 80008f0:	189a      	adds	r2, r3, r2
	buffer_clear(&txring[usx]);
	// finally this enables the complete USART3 peripheral
	USART_Cmd(usartx[usx], ENABLE);
 80008f2:	4639      	mov	r1, r7
};

USARTRing rxring[6], txring[6];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 80008f4:	f8a2 4100 	strh.w	r4, [r2, #256]	; 0x100
	r->tail = 0;
 80008f8:	f8a2 4102 	strh.w	r4, [r2, #258]	; 0x102
	r->count = 0;
 80008fc:	f8a2 4104 	strh.w	r4, [r2, #260]	; 0x104
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0; // this sets the subpriority inside the group
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;	// the USART3 interrupts are globally enabled
	NVIC_Init(&NVIC_InitStructure);	// the properties are passed to the NVIC_Init function which takes care of the low level stuff
	//
	buffer_clear(&rxring[usx]);
	buffer_clear(&txring[usx]);
 8000900:	4a08      	ldr	r2, [pc, #32]	; (8000924 <usart_begin+0x17c>)
 8000902:	189b      	adds	r3, r3, r2

	GPIO_PinAFConfig(PinPort(rx), PinSource(rx), af );
	GPIO_PinAFConfig(PinPort(tx), PinSource(tx), af );

	USART_InitStruct.USART_BaudRate = baud;	// the baudrate is set to the value we passed into this init function
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
 8000904:	46a0      	mov	r8, r4
};

USARTRing rxring[6], txring[6];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 8000906:	f8a3 4100 	strh.w	r4, [r3, #256]	; 0x100
	r->tail = 0;
 800090a:	f8a3 4102 	strh.w	r4, [r3, #258]	; 0x102
	r->count = 0;
 800090e:	f8a3 4104 	strh.w	r4, [r3, #260]	; 0x104
	NVIC_Init(&NVIC_InitStructure);	// the properties are passed to the NVIC_Init function which takes care of the low level stuff
	//
	buffer_clear(&rxring[usx]);
	buffer_clear(&txring[usx]);
	// finally this enables the complete USART3 peripheral
	USART_Cmd(usartx[usx], ENABLE);
 8000912:	f001 fe42 	bl	800259a <USART_Cmd>
}
 8000916:	b009      	add	sp, #36	; 0x24
 8000918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800091c:	2000008c 	.word	0x2000008c
 8000920:	20001024 	.word	0x20001024
 8000924:	20000a00 	.word	0x20000a00

08000928 <usart_bare_write>:

void usart_bare_write(USARTSerial usx, const uint16_t w) {
 8000928:	b570      	push	{r4, r5, r6, lr}
	while (USART_GetFlagStatus(usartx[usx], USART_FLAG_TXE ) == RESET) ;
 800092a:	4e09      	ldr	r6, [pc, #36]	; (8000950 <usart_bare_write+0x28>)
	buffer_clear(&txring[usx]);
	// finally this enables the complete USART3 peripheral
	USART_Cmd(usartx[usx], ENABLE);
}

void usart_bare_write(USARTSerial usx, const uint16_t w) {
 800092c:	4604      	mov	r4, r0
 800092e:	460d      	mov	r5, r1
	while (USART_GetFlagStatus(usartx[usx], USART_FLAG_TXE ) == RESET) ;
 8000930:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8000934:	2180      	movs	r1, #128	; 0x80
 8000936:	f001 ff0a 	bl	800274e <USART_GetFlagStatus>
 800093a:	2800      	cmp	r0, #0
 800093c:	d0f8      	beq.n	8000930 <usart_bare_write+0x8>
	USART_SendData(usartx[usx], w) ;
 800093e:	4b04      	ldr	r3, [pc, #16]	; (8000950 <usart_bare_write+0x28>)
 8000940:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8000944:	4629      	mov	r1, r5
//	while (USART_GetFlagStatus(USART3, USART_FLAG_TC ) == RESET) ;
}
 8000946:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	USART_Cmd(usartx[usx], ENABLE);
}

void usart_bare_write(USARTSerial usx, const uint16_t w) {
	while (USART_GetFlagStatus(usartx[usx], USART_FLAG_TXE ) == RESET) ;
	USART_SendData(usartx[usx], w) ;
 800094a:	f001 be53 	b.w	80025f4 <USART_SendData>
 800094e:	bf00      	nop
 8000950:	2000008c 	.word	0x2000008c

08000954 <usart_write>:
//	while (USART_GetFlagStatus(USART3, USART_FLAG_TC ) == RESET) ;
}

void usart_write(USARTSerial usx, const uint16_t w) {
 8000954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
//	uint16_t waitcount = 1000;
	if ( buffer_is_full(&txring[usx]) )
 8000956:	4b12      	ldr	r3, [pc, #72]	; (80009a0 <usart_write+0x4c>)
 8000958:	f44f 7683 	mov.w	r6, #262	; 0x106
 800095c:	fb06 3600 	mla	r6, r6, r0, r3
	while (USART_GetFlagStatus(usartx[usx], USART_FLAG_TXE ) == RESET) ;
	USART_SendData(usartx[usx], w) ;
//	while (USART_GetFlagStatus(USART3, USART_FLAG_TC ) == RESET) ;
}

void usart_write(USARTSerial usx, const uint16_t w) {
 8000960:	4604      	mov	r4, r0
//	uint16_t waitcount = 1000;
	if ( buffer_is_full(&txring[usx]) )
 8000962:	4630      	mov	r0, r6
	while (USART_GetFlagStatus(usartx[usx], USART_FLAG_TXE ) == RESET) ;
	USART_SendData(usartx[usx], w) ;
//	while (USART_GetFlagStatus(USART3, USART_FLAG_TC ) == RESET) ;
}

void usart_write(USARTSerial usx, const uint16_t w) {
 8000964:	460f      	mov	r7, r1
//	uint16_t waitcount = 1000;
	if ( buffer_is_full(&txring[usx]) )
 8000966:	f7ff fed0 	bl	800070a <buffer_is_full>
 800096a:	b118      	cbz	r0, 8000974 <usart_write+0x20>
		delay_us(833);
 800096c:	f240 3041 	movw	r0, #833	; 0x341
 8000970:	f7ff fc0a 	bl	8000188 <delay_us>
	USART_ITConfig(usartx[usx], USART_IT_TXE, DISABLE);
 8000974:	4d0b      	ldr	r5, [pc, #44]	; (80009a4 <usart_write+0x50>)
 8000976:	2200      	movs	r2, #0
 8000978:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 800097c:	f240 7127 	movw	r1, #1831	; 0x727
 8000980:	f001 fecc 	bl	800271c <USART_ITConfig>
	buffer_enque(&txring[usx], w);
 8000984:	4639      	mov	r1, r7
 8000986:	4630      	mov	r0, r6
 8000988:	f7ff fecd 	bl	8000726 <buffer_enque>
	USART_ITConfig(usartx[usx], USART_IT_TXE, ENABLE);
 800098c:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8000990:	f240 7127 	movw	r1, #1831	; 0x727
 8000994:	2201      	movs	r2, #1
}
 8000996:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
//	uint16_t waitcount = 1000;
	if ( buffer_is_full(&txring[usx]) )
		delay_us(833);
	USART_ITConfig(usartx[usx], USART_IT_TXE, DISABLE);
	buffer_enque(&txring[usx], w);
	USART_ITConfig(usartx[usx], USART_IT_TXE, ENABLE);
 800099a:	f001 bebf 	b.w	800271c <USART_ITConfig>
 800099e:	bf00      	nop
 80009a0:	20000a00 	.word	0x20000a00
 80009a4:	2000008c 	.word	0x2000008c

080009a8 <usart_print>:
}

void usart_print(USARTSerial usx, const char * s) {
 80009a8:	b538      	push	{r3, r4, r5, lr}
 80009aa:	4605      	mov	r5, r0
 80009ac:	460c      	mov	r4, r1
	while (*s)
 80009ae:	e002      	b.n	80009b6 <usart_print+0xe>
		usart_write(usx, (uint16_t) *s++);
 80009b0:	4628      	mov	r0, r5
 80009b2:	f7ff ffcf 	bl	8000954 <usart_write>
	buffer_enque(&txring[usx], w);
	USART_ITConfig(usartx[usx], USART_IT_TXE, ENABLE);
}

void usart_print(USARTSerial usx, const char * s) {
	while (*s)
 80009b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80009ba:	2900      	cmp	r1, #0
 80009bc:	d1f8      	bne.n	80009b0 <usart_print+0x8>
		usart_write(usx, (uint16_t) *s++);
}
 80009be:	bd38      	pop	{r3, r4, r5, pc}

080009c0 <usart_bare_read>:

uint16_t usart_bare_read(USARTSerial usx) {
	return USART_ReceiveData(usartx[usx]);
 80009c0:	4b02      	ldr	r3, [pc, #8]	; (80009cc <usart_bare_read+0xc>)
 80009c2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80009c6:	f001 be19 	b.w	80025fc <USART_ReceiveData>
 80009ca:	bf00      	nop
 80009cc:	2000008c 	.word	0x2000008c

080009d0 <usart_read>:
}

uint16_t usart_read(USARTSerial usx) {
 80009d0:	b508      	push	{r3, lr}
	uint16_t w = buffer_deque(&rxring[usx]);
 80009d2:	4b06      	ldr	r3, [pc, #24]	; (80009ec <usart_read+0x1c>)
 80009d4:	f44f 7283 	mov.w	r2, #262	; 0x106
 80009d8:	fb02 3000 	mla	r0, r2, r0, r3
 80009dc:	f7ff fec6 	bl	800076c <buffer_deque>
	if ( w == 0xffff ) return 0; // buffer is empty
	return w;
}
 80009e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009e4:	4298      	cmp	r0, r3
 80009e6:	bf08      	it	eq
 80009e8:	2000      	moveq	r0, #0
 80009ea:	bd08      	pop	{r3, pc}
 80009ec:	20001024 	.word	0x20001024

080009f0 <usart_flush>:

void usart_flush(USARTSerial usx) {
 80009f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	USART_ITConfig(usartx[usx], USART_IT_RXNE, DISABLE); // enable the USART3 receive interrupt
 80009f2:	4d2b      	ldr	r5, [pc, #172]	; (8000aa0 <usart_flush+0xb0>)
	uint16_t w = buffer_deque(&rxring[usx]);
	if ( w == 0xffff ) return 0; // buffer is empty
	return w;
}

void usart_flush(USARTSerial usx) {
 80009f4:	4604      	mov	r4, r0
	USART_ITConfig(usartx[usx], USART_IT_RXNE, DISABLE); // enable the USART3 receive interrupt
 80009f6:	2200      	movs	r2, #0
 80009f8:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 80009fc:	f240 5125 	movw	r1, #1317	; 0x525
 8000a00:	f001 fe8c 	bl	800271c <USART_ITConfig>
	buffer_clear(&rxring[usx]);
 8000a04:	f44f 7783 	mov.w	r7, #262	; 0x106
 8000a08:	4b26      	ldr	r3, [pc, #152]	; (8000aa4 <usart_flush+0xb4>)
	USART_ClearITPendingBit(usartx[usx], USART_IT_RXNE );
 8000a0a:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
	return w;
}

void usart_flush(USARTSerial usx) {
	USART_ITConfig(usartx[usx], USART_IT_RXNE, DISABLE); // enable the USART3 receive interrupt
	buffer_clear(&rxring[usx]);
 8000a0e:	4367      	muls	r7, r4
 8000a10:	18fb      	adds	r3, r7, r3
};

USARTRing rxring[6], txring[6];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 8000a12:	2600      	movs	r6, #0
 8000a14:	f8a3 6100 	strh.w	r6, [r3, #256]	; 0x100
	r->tail = 0;
 8000a18:	f8a3 6102 	strh.w	r6, [r3, #258]	; 0x102
	r->count = 0;
 8000a1c:	f8a3 6104 	strh.w	r6, [r3, #260]	; 0x104
}

void usart_flush(USARTSerial usx) {
	USART_ITConfig(usartx[usx], USART_IT_RXNE, DISABLE); // enable the USART3 receive interrupt
	buffer_clear(&rxring[usx]);
	USART_ClearITPendingBit(usartx[usx], USART_IT_RXNE );
 8000a20:	f240 5125 	movw	r1, #1317	; 0x525
 8000a24:	f001 febc 	bl	80027a0 <USART_ClearITPendingBit>
	USART_ITConfig(usartx[usx], USART_IT_RXNE, ENABLE); // enable the USART3 receive interrupt
 8000a28:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8000a2c:	f240 5125 	movw	r1, #1317	; 0x525
 8000a30:	2201      	movs	r2, #1
 8000a32:	f001 fe73 	bl	800271c <USART_ITConfig>
	USART_ITConfig(usartx[usx], USART_IT_TXE, DISABLE);
 8000a36:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8000a3a:	f240 7127 	movw	r1, #1831	; 0x727
 8000a3e:	4632      	mov	r2, r6
 8000a40:	f001 fe6c 	bl	800271c <USART_ITConfig>
	while ( buffer_count(&txring[usx]) > 0 ) {
 8000a44:	4b18      	ldr	r3, [pc, #96]	; (8000aa8 <usart_flush+0xb8>)
 8000a46:	19df      	adds	r7, r3, r7
 8000a48:	e017      	b.n	8000a7a <usart_flush+0x8a>
		while (USART_GetFlagStatus(usartx[usx], USART_FLAG_TXE ) == RESET);
 8000a4a:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8000a4e:	2180      	movs	r1, #128	; 0x80
 8000a50:	f001 fe7d 	bl	800274e <USART_GetFlagStatus>
 8000a54:	2800      	cmp	r0, #0
 8000a56:	d0f8      	beq.n	8000a4a <usart_flush+0x5a>
		USART_SendData(usartx[usx], buffer_deque(&txring[usx]));
 8000a58:	4b11      	ldr	r3, [pc, #68]	; (8000aa0 <usart_flush+0xb0>)
 8000a5a:	4638      	mov	r0, r7
 8000a5c:	f853 6024 	ldr.w	r6, [r3, r4, lsl #2]
 8000a60:	f7ff fe84 	bl	800076c <buffer_deque>
 8000a64:	4601      	mov	r1, r0
 8000a66:	4630      	mov	r0, r6
 8000a68:	f001 fdc4 	bl	80025f4 <USART_SendData>
		while (USART_GetFlagStatus(usartx[usx], USART_FLAG_TC ) == RESET);
 8000a6c:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8000a70:	2140      	movs	r1, #64	; 0x40
 8000a72:	f001 fe6c 	bl	800274e <USART_GetFlagStatus>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	d0f8      	beq.n	8000a6c <usart_flush+0x7c>
	USART_ITConfig(usartx[usx], USART_IT_RXNE, DISABLE); // enable the USART3 receive interrupt
	buffer_clear(&rxring[usx]);
	USART_ClearITPendingBit(usartx[usx], USART_IT_RXNE );
	USART_ITConfig(usartx[usx], USART_IT_RXNE, ENABLE); // enable the USART3 receive interrupt
	USART_ITConfig(usartx[usx], USART_IT_TXE, DISABLE);
	while ( buffer_count(&txring[usx]) > 0 ) {
 8000a7a:	f8b7 6104 	ldrh.w	r6, [r7, #260]	; 0x104
 8000a7e:	2e00      	cmp	r6, #0
 8000a80:	d1e3      	bne.n	8000a4a <usart_flush+0x5a>
		while (USART_GetFlagStatus(usartx[usx], USART_FLAG_TXE ) == RESET);
		USART_SendData(usartx[usx], buffer_deque(&txring[usx]));
		while (USART_GetFlagStatus(usartx[usx], USART_FLAG_TC ) == RESET);
	}
	USART_ClearITPendingBit(usartx[usx], USART_IT_TXE );
 8000a82:	4b07      	ldr	r3, [pc, #28]	; (8000aa0 <usart_flush+0xb0>)
 8000a84:	f240 7127 	movw	r1, #1831	; 0x727
 8000a88:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8000a8c:	f001 fe88 	bl	80027a0 <USART_ClearITPendingBit>
};

USARTRing rxring[6], txring[6];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 8000a90:	f8a7 6100 	strh.w	r6, [r7, #256]	; 0x100
	r->tail = 0;
 8000a94:	f8a7 6102 	strh.w	r6, [r7, #258]	; 0x102
	r->count = 0;
 8000a98:	f8a7 6104 	strh.w	r6, [r7, #260]	; 0x104
		USART_SendData(usartx[usx], buffer_deque(&txring[usx]));
		while (USART_GetFlagStatus(usartx[usx], USART_FLAG_TC ) == RESET);
	}
	USART_ClearITPendingBit(usartx[usx], USART_IT_TXE );
	buffer_clear(&txring[usx]);
}
 8000a9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	2000008c 	.word	0x2000008c
 8000aa4:	20001024 	.word	0x20001024
 8000aa8:	20000a00 	.word	0x20000a00

08000aac <usart_peek>:
	r->tail = 0;
	r->count = 0;
}

uint16_t buffer_count(USARTRing * r) {
	return r->count;
 8000aac:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <usart_peek+0x28>)
 8000aae:	f44f 7283 	mov.w	r2, #262	; 0x106
 8000ab2:	fb02 3200 	mla	r2, r2, r0, r3
	USART_ClearITPendingBit(usartx[usx], USART_IT_TXE );
	buffer_clear(&txring[usx]);
}

uint16_t usart_peek(USARTSerial usx) {
	if ( ! buffer_count(&rxring[usx]) == 0 )
 8000ab6:	f8b2 1104 	ldrh.w	r1, [r2, #260]	; 0x104
 8000aba:	b139      	cbz	r1, 8000acc <usart_peek+0x20>
		return rxring[usx].buf[rxring[usx].tail];
 8000abc:	f9b2 2102 	ldrsh.w	r2, [r2, #258]	; 0x102
 8000ac0:	2183      	movs	r1, #131	; 0x83
 8000ac2:	fb01 2000 	mla	r0, r1, r0, r2
 8000ac6:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8000aca:	4770      	bx	lr
	return 0xffff;
 8000acc:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	20001024 	.word	0x20001024

08000ad8 <usart_available>:
	r->tail = 0;
	r->count = 0;
}

uint16_t buffer_count(USARTRing * r) {
	return r->count;
 8000ad8:	4b03      	ldr	r3, [pc, #12]	; (8000ae8 <usart_available+0x10>)
 8000ada:	f44f 7283 	mov.w	r2, #262	; 0x106
 8000ade:	fb02 3300 	mla	r3, r2, r0, r3
	return 0xffff;
}

uint16_t usart_available(USARTSerial usx) {
	return buffer_count(&rxring[usx]);
}
 8000ae2:	f8b3 0104 	ldrh.w	r0, [r3, #260]	; 0x104
 8000ae6:	4770      	bx	lr
 8000ae8:	20001024 	.word	0x20001024

08000aec <USART1_IRQHandler>:


// this is the interrupt request handler (IRQ) for ALL USART3 interrupts

void USART1_IRQHandler(void) {
 8000aec:	b508      	push	{r3, lr}
	if (USART_GetITStatus(USART1, USART_IT_RXNE )) {
 8000aee:	4816      	ldr	r0, [pc, #88]	; (8000b48 <USART1_IRQHandler+0x5c>)
 8000af0:	f240 5125 	movw	r1, #1317	; 0x525
 8000af4:	f001 fe35 	bl	8002762 <USART_GetITStatus>
 8000af8:	b130      	cbz	r0, 8000b08 <USART1_IRQHandler+0x1c>
		buffer_enque(&rxring[USART1Serial], USART_ReceiveData(USART1) );
 8000afa:	4813      	ldr	r0, [pc, #76]	; (8000b48 <USART1_IRQHandler+0x5c>)
 8000afc:	f001 fd7e 	bl	80025fc <USART_ReceiveData>
 8000b00:	4601      	mov	r1, r0
 8000b02:	4812      	ldr	r0, [pc, #72]	; (8000b4c <USART1_IRQHandler+0x60>)
 8000b04:	f7ff fe0f 	bl	8000726 <buffer_enque>
	}

	if (USART_GetITStatus(USART1, USART_IT_TXE )) {
 8000b08:	480f      	ldr	r0, [pc, #60]	; (8000b48 <USART1_IRQHandler+0x5c>)
 8000b0a:	f240 7127 	movw	r1, #1831	; 0x727
 8000b0e:	f001 fe28 	bl	8002762 <USART_GetITStatus>
 8000b12:	2800      	cmp	r0, #0
 8000b14:	d017      	beq.n	8000b46 <USART1_IRQHandler+0x5a>
		if (txring[USART1Serial].count == 0) {
 8000b16:	480e      	ldr	r0, [pc, #56]	; (8000b50 <USART1_IRQHandler+0x64>)
 8000b18:	f8b0 2104 	ldrh.w	r2, [r0, #260]	; 0x104
 8000b1c:	b95a      	cbnz	r2, 8000b36 <USART1_IRQHandler+0x4a>
			USART_ITConfig(USART1, USART_IT_TXE, (FunctionalState) DISABLE);
 8000b1e:	480a      	ldr	r0, [pc, #40]	; (8000b48 <USART1_IRQHandler+0x5c>)
 8000b20:	f240 7127 	movw	r1, #1831	; 0x727
 8000b24:	f001 fdfa 	bl	800271c <USART_ITConfig>
			USART_ClearITPendingBit(USART1, USART_IT_TXE );
 8000b28:	4807      	ldr	r0, [pc, #28]	; (8000b48 <USART1_IRQHandler+0x5c>)
 8000b2a:	f240 7127 	movw	r1, #1831	; 0x727
		} else {
			USART_SendData(USART1, buffer_deque(&txring[USART1Serial]));
		}
	}
}
 8000b2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	}

	if (USART_GetITStatus(USART1, USART_IT_TXE )) {
		if (txring[USART1Serial].count == 0) {
			USART_ITConfig(USART1, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART1, USART_IT_TXE );
 8000b32:	f001 be35 	b.w	80027a0 <USART_ClearITPendingBit>
		} else {
			USART_SendData(USART1, buffer_deque(&txring[USART1Serial]));
 8000b36:	f7ff fe19 	bl	800076c <buffer_deque>
 8000b3a:	4601      	mov	r1, r0
 8000b3c:	4802      	ldr	r0, [pc, #8]	; (8000b48 <USART1_IRQHandler+0x5c>)
		}
	}
}
 8000b3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	if (USART_GetITStatus(USART1, USART_IT_TXE )) {
		if (txring[USART1Serial].count == 0) {
			USART_ITConfig(USART1, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART1, USART_IT_TXE );
		} else {
			USART_SendData(USART1, buffer_deque(&txring[USART1Serial]));
 8000b42:	f001 bd57 	b.w	80025f4 <USART_SendData>
 8000b46:	bd08      	pop	{r3, pc}
 8000b48:	40011000 	.word	0x40011000
 8000b4c:	20001024 	.word	0x20001024
 8000b50:	20000a00 	.word	0x20000a00

08000b54 <USART2_IRQHandler>:
		}
	}
}

void USART2_IRQHandler(void) {
 8000b54:	b508      	push	{r3, lr}
	if (USART_GetITStatus(USART2, USART_IT_RXNE )) {
 8000b56:	4817      	ldr	r0, [pc, #92]	; (8000bb4 <USART2_IRQHandler+0x60>)
 8000b58:	f240 5125 	movw	r1, #1317	; 0x525
 8000b5c:	f001 fe01 	bl	8002762 <USART_GetITStatus>
 8000b60:	b130      	cbz	r0, 8000b70 <USART2_IRQHandler+0x1c>
		buffer_enque(&rxring[USART2Serial], USART_ReceiveData(USART2) );
 8000b62:	4814      	ldr	r0, [pc, #80]	; (8000bb4 <USART2_IRQHandler+0x60>)
 8000b64:	f001 fd4a 	bl	80025fc <USART_ReceiveData>
 8000b68:	4601      	mov	r1, r0
 8000b6a:	4813      	ldr	r0, [pc, #76]	; (8000bb8 <USART2_IRQHandler+0x64>)
 8000b6c:	f7ff fddb 	bl	8000726 <buffer_enque>
	}
	if (USART_GetITStatus(USART2, USART_IT_TXE )) {
 8000b70:	4810      	ldr	r0, [pc, #64]	; (8000bb4 <USART2_IRQHandler+0x60>)
 8000b72:	f240 7127 	movw	r1, #1831	; 0x727
 8000b76:	f001 fdf4 	bl	8002762 <USART_GetITStatus>
 8000b7a:	2800      	cmp	r0, #0
 8000b7c:	d019      	beq.n	8000bb2 <USART2_IRQHandler+0x5e>
		if (txring[USART2Serial].count == 0) {
 8000b7e:	480f      	ldr	r0, [pc, #60]	; (8000bbc <USART2_IRQHandler+0x68>)
 8000b80:	f8b0 220a 	ldrh.w	r2, [r0, #522]	; 0x20a
 8000b84:	b95a      	cbnz	r2, 8000b9e <USART2_IRQHandler+0x4a>
			USART_ITConfig(USART2, USART_IT_TXE, (FunctionalState) DISABLE);
 8000b86:	480b      	ldr	r0, [pc, #44]	; (8000bb4 <USART2_IRQHandler+0x60>)
 8000b88:	f240 7127 	movw	r1, #1831	; 0x727
 8000b8c:	f001 fdc6 	bl	800271c <USART_ITConfig>
			USART_ClearITPendingBit(USART2, USART_IT_TXE );
 8000b90:	4808      	ldr	r0, [pc, #32]	; (8000bb4 <USART2_IRQHandler+0x60>)
 8000b92:	f240 7127 	movw	r1, #1831	; 0x727
		} else {
			USART_SendData(USART2, buffer_deque(&txring[USART2Serial]));
		}
	}
}
 8000b96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		buffer_enque(&rxring[USART2Serial], USART_ReceiveData(USART2) );
	}
	if (USART_GetITStatus(USART2, USART_IT_TXE )) {
		if (txring[USART2Serial].count == 0) {
			USART_ITConfig(USART2, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART2, USART_IT_TXE );
 8000b9a:	f001 be01 	b.w	80027a0 <USART_ClearITPendingBit>
		} else {
			USART_SendData(USART2, buffer_deque(&txring[USART2Serial]));
 8000b9e:	f500 7083 	add.w	r0, r0, #262	; 0x106
 8000ba2:	f7ff fde3 	bl	800076c <buffer_deque>
 8000ba6:	4601      	mov	r1, r0
 8000ba8:	4802      	ldr	r0, [pc, #8]	; (8000bb4 <USART2_IRQHandler+0x60>)
		}
	}
}
 8000baa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	if (USART_GetITStatus(USART2, USART_IT_TXE )) {
		if (txring[USART2Serial].count == 0) {
			USART_ITConfig(USART2, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART2, USART_IT_TXE );
		} else {
			USART_SendData(USART2, buffer_deque(&txring[USART2Serial]));
 8000bae:	f001 bd21 	b.w	80025f4 <USART_SendData>
 8000bb2:	bd08      	pop	{r3, pc}
 8000bb4:	40004400 	.word	0x40004400
 8000bb8:	2000112a 	.word	0x2000112a
 8000bbc:	20000a00 	.word	0x20000a00

08000bc0 <USART3_IRQHandler>:
		}
	}
}

void USART3_IRQHandler(void) {
 8000bc0:	b508      	push	{r3, lr}
	if (USART_GetITStatus(USART3, USART_IT_RXNE )) {
 8000bc2:	4817      	ldr	r0, [pc, #92]	; (8000c20 <USART3_IRQHandler+0x60>)
 8000bc4:	f240 5125 	movw	r1, #1317	; 0x525
 8000bc8:	f001 fdcb 	bl	8002762 <USART_GetITStatus>
 8000bcc:	b130      	cbz	r0, 8000bdc <USART3_IRQHandler+0x1c>
		buffer_enque(&rxring[USART3Serial], USART_ReceiveData(USART3) );
 8000bce:	4814      	ldr	r0, [pc, #80]	; (8000c20 <USART3_IRQHandler+0x60>)
 8000bd0:	f001 fd14 	bl	80025fc <USART_ReceiveData>
 8000bd4:	4601      	mov	r1, r0
 8000bd6:	4813      	ldr	r0, [pc, #76]	; (8000c24 <USART3_IRQHandler+0x64>)
 8000bd8:	f7ff fda5 	bl	8000726 <buffer_enque>
	}

	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
 8000bdc:	4810      	ldr	r0, [pc, #64]	; (8000c20 <USART3_IRQHandler+0x60>)
 8000bde:	f240 7127 	movw	r1, #1831	; 0x727
 8000be2:	f001 fdbe 	bl	8002762 <USART_GetITStatus>
 8000be6:	2800      	cmp	r0, #0
 8000be8:	d019      	beq.n	8000c1e <USART3_IRQHandler+0x5e>
		if (txring[USART3Serial].count == 0) {
 8000bea:	480f      	ldr	r0, [pc, #60]	; (8000c28 <USART3_IRQHandler+0x68>)
 8000bec:	f8b0 2310 	ldrh.w	r2, [r0, #784]	; 0x310
 8000bf0:	b95a      	cbnz	r2, 8000c0a <USART3_IRQHandler+0x4a>
			USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) DISABLE);
 8000bf2:	480b      	ldr	r0, [pc, #44]	; (8000c20 <USART3_IRQHandler+0x60>)
 8000bf4:	f240 7127 	movw	r1, #1831	; 0x727
 8000bf8:	f001 fd90 	bl	800271c <USART_ITConfig>
			USART_ClearITPendingBit(USART3, USART_IT_TXE );
 8000bfc:	4808      	ldr	r0, [pc, #32]	; (8000c20 <USART3_IRQHandler+0x60>)
 8000bfe:	f240 7127 	movw	r1, #1831	; 0x727
		} else {
			USART_SendData(USART3, buffer_deque(&txring[USART3Serial]));
		}
	}
}
 8000c02:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	}

	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
		if (txring[USART3Serial].count == 0) {
			USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART3, USART_IT_TXE );
 8000c06:	f001 bdcb 	b.w	80027a0 <USART_ClearITPendingBit>
		} else {
			USART_SendData(USART3, buffer_deque(&txring[USART3Serial]));
 8000c0a:	f500 7003 	add.w	r0, r0, #524	; 0x20c
 8000c0e:	f7ff fdad 	bl	800076c <buffer_deque>
 8000c12:	4601      	mov	r1, r0
 8000c14:	4802      	ldr	r0, [pc, #8]	; (8000c20 <USART3_IRQHandler+0x60>)
		}
	}
}
 8000c16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
		if (txring[USART3Serial].count == 0) {
			USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART3, USART_IT_TXE );
		} else {
			USART_SendData(USART3, buffer_deque(&txring[USART3Serial]));
 8000c1a:	f001 bceb 	b.w	80025f4 <USART_SendData>
 8000c1e:	bd08      	pop	{r3, pc}
 8000c20:	40004800 	.word	0x40004800
 8000c24:	20001230 	.word	0x20001230
 8000c28:	20000a00 	.word	0x20000a00

08000c2c <UART4_IRQHandler>:
		}
	}
}

void UART4_IRQHandler(void) {
 8000c2c:	b508      	push	{r3, lr}
	if (USART_GetITStatus(UART4, USART_IT_RXNE )) {
 8000c2e:	4817      	ldr	r0, [pc, #92]	; (8000c8c <UART4_IRQHandler+0x60>)
 8000c30:	f240 5125 	movw	r1, #1317	; 0x525
 8000c34:	f001 fd95 	bl	8002762 <USART_GetITStatus>
 8000c38:	b130      	cbz	r0, 8000c48 <UART4_IRQHandler+0x1c>
		buffer_enque(&rxring[UART4Serial], USART_ReceiveData(UART4) );
 8000c3a:	4814      	ldr	r0, [pc, #80]	; (8000c8c <UART4_IRQHandler+0x60>)
 8000c3c:	f001 fcde 	bl	80025fc <USART_ReceiveData>
 8000c40:	4601      	mov	r1, r0
 8000c42:	4813      	ldr	r0, [pc, #76]	; (8000c90 <UART4_IRQHandler+0x64>)
 8000c44:	f7ff fd6f 	bl	8000726 <buffer_enque>
	}

	if (USART_GetITStatus(UART4, USART_IT_TXE )) {
 8000c48:	4810      	ldr	r0, [pc, #64]	; (8000c8c <UART4_IRQHandler+0x60>)
 8000c4a:	f240 7127 	movw	r1, #1831	; 0x727
 8000c4e:	f001 fd88 	bl	8002762 <USART_GetITStatus>
 8000c52:	2800      	cmp	r0, #0
 8000c54:	d018      	beq.n	8000c88 <UART4_IRQHandler+0x5c>
		if (txring[UART4Serial].count == 0) {
 8000c56:	4b0f      	ldr	r3, [pc, #60]	; (8000c94 <UART4_IRQHandler+0x68>)
 8000c58:	f8b3 2416 	ldrh.w	r2, [r3, #1046]	; 0x416
 8000c5c:	b95a      	cbnz	r2, 8000c76 <UART4_IRQHandler+0x4a>
			USART_ITConfig(UART4, USART_IT_TXE, (FunctionalState) DISABLE);
 8000c5e:	480b      	ldr	r0, [pc, #44]	; (8000c8c <UART4_IRQHandler+0x60>)
 8000c60:	f240 7127 	movw	r1, #1831	; 0x727
 8000c64:	f001 fd5a 	bl	800271c <USART_ITConfig>
			USART_ClearITPendingBit(UART4, USART_IT_TXE );
 8000c68:	4808      	ldr	r0, [pc, #32]	; (8000c8c <UART4_IRQHandler+0x60>)
 8000c6a:	f240 7127 	movw	r1, #1831	; 0x727
		} else {
			USART_SendData(UART4, buffer_deque(&txring[UART4Serial]));
		}
	}
}
 8000c6e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	}

	if (USART_GetITStatus(UART4, USART_IT_TXE )) {
		if (txring[UART4Serial].count == 0) {
			USART_ITConfig(UART4, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(UART4, USART_IT_TXE );
 8000c72:	f001 bd95 	b.w	80027a0 <USART_ClearITPendingBit>
		} else {
			USART_SendData(UART4, buffer_deque(&txring[UART4Serial]));
 8000c76:	4808      	ldr	r0, [pc, #32]	; (8000c98 <UART4_IRQHandler+0x6c>)
 8000c78:	f7ff fd78 	bl	800076c <buffer_deque>
 8000c7c:	4601      	mov	r1, r0
 8000c7e:	4803      	ldr	r0, [pc, #12]	; (8000c8c <UART4_IRQHandler+0x60>)
		}
	}
}
 8000c80:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	if (USART_GetITStatus(UART4, USART_IT_TXE )) {
		if (txring[UART4Serial].count == 0) {
			USART_ITConfig(UART4, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(UART4, USART_IT_TXE );
		} else {
			USART_SendData(UART4, buffer_deque(&txring[UART4Serial]));
 8000c84:	f001 bcb6 	b.w	80025f4 <USART_SendData>
 8000c88:	bd08      	pop	{r3, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40004c00 	.word	0x40004c00
 8000c90:	20001336 	.word	0x20001336
 8000c94:	20000a00 	.word	0x20000a00
 8000c98:	20000d12 	.word	0x20000d12

08000c9c <UART5_IRQHandler>:
		}
	}
}

void UART5_IRQHandler(void) {
 8000c9c:	b508      	push	{r3, lr}
	if (USART_GetITStatus(UART5, USART_IT_RXNE )) {
 8000c9e:	4817      	ldr	r0, [pc, #92]	; (8000cfc <UART5_IRQHandler+0x60>)
 8000ca0:	f240 5125 	movw	r1, #1317	; 0x525
 8000ca4:	f001 fd5d 	bl	8002762 <USART_GetITStatus>
 8000ca8:	b130      	cbz	r0, 8000cb8 <UART5_IRQHandler+0x1c>
		buffer_enque(&rxring[UART5Serial], USART_ReceiveData(UART5) );
 8000caa:	4814      	ldr	r0, [pc, #80]	; (8000cfc <UART5_IRQHandler+0x60>)
 8000cac:	f001 fca6 	bl	80025fc <USART_ReceiveData>
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	4813      	ldr	r0, [pc, #76]	; (8000d00 <UART5_IRQHandler+0x64>)
 8000cb4:	f7ff fd37 	bl	8000726 <buffer_enque>
	}

	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
 8000cb8:	4812      	ldr	r0, [pc, #72]	; (8000d04 <UART5_IRQHandler+0x68>)
 8000cba:	f240 7127 	movw	r1, #1831	; 0x727
 8000cbe:	f001 fd50 	bl	8002762 <USART_GetITStatus>
 8000cc2:	2800      	cmp	r0, #0
 8000cc4:	d019      	beq.n	8000cfa <UART5_IRQHandler+0x5e>
		if (txring[UART5Serial].count == 0) {
 8000cc6:	4810      	ldr	r0, [pc, #64]	; (8000d08 <UART5_IRQHandler+0x6c>)
 8000cc8:	f8b0 251c 	ldrh.w	r2, [r0, #1308]	; 0x51c
 8000ccc:	b95a      	cbnz	r2, 8000ce6 <UART5_IRQHandler+0x4a>
			USART_ITConfig(UART5, USART_IT_TXE, (FunctionalState) DISABLE);
 8000cce:	480b      	ldr	r0, [pc, #44]	; (8000cfc <UART5_IRQHandler+0x60>)
 8000cd0:	f240 7127 	movw	r1, #1831	; 0x727
 8000cd4:	f001 fd22 	bl	800271c <USART_ITConfig>
			USART_ClearITPendingBit(UART5, USART_IT_TXE );
 8000cd8:	4808      	ldr	r0, [pc, #32]	; (8000cfc <UART5_IRQHandler+0x60>)
 8000cda:	f240 7127 	movw	r1, #1831	; 0x727
		} else {
			USART_SendData(UART5, buffer_deque(&txring[UART5Serial]));
		}
	}
}
 8000cde:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	}

	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
		if (txring[UART5Serial].count == 0) {
			USART_ITConfig(UART5, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(UART5, USART_IT_TXE );
 8000ce2:	f001 bd5d 	b.w	80027a0 <USART_ClearITPendingBit>
		} else {
			USART_SendData(UART5, buffer_deque(&txring[UART5Serial]));
 8000ce6:	f500 6083 	add.w	r0, r0, #1048	; 0x418
 8000cea:	f7ff fd3f 	bl	800076c <buffer_deque>
 8000cee:	4601      	mov	r1, r0
 8000cf0:	4802      	ldr	r0, [pc, #8]	; (8000cfc <UART5_IRQHandler+0x60>)
		}
	}
}
 8000cf2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
		if (txring[UART5Serial].count == 0) {
			USART_ITConfig(UART5, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(UART5, USART_IT_TXE );
		} else {
			USART_SendData(UART5, buffer_deque(&txring[UART5Serial]));
 8000cf6:	f001 bc7d 	b.w	80025f4 <USART_SendData>
 8000cfa:	bd08      	pop	{r3, pc}
 8000cfc:	40005000 	.word	0x40005000
 8000d00:	2000143c 	.word	0x2000143c
 8000d04:	40004800 	.word	0x40004800
 8000d08:	20000a00 	.word	0x20000a00

08000d0c <USART6_IRQHandler>:
		}
	}
}

void USART6_IRQHandler(void) {
 8000d0c:	b508      	push	{r3, lr}
	if (USART_GetITStatus(USART6, USART_IT_RXNE )) {
 8000d0e:	4817      	ldr	r0, [pc, #92]	; (8000d6c <USART6_IRQHandler+0x60>)
 8000d10:	f240 5125 	movw	r1, #1317	; 0x525
 8000d14:	f001 fd25 	bl	8002762 <USART_GetITStatus>
 8000d18:	b130      	cbz	r0, 8000d28 <USART6_IRQHandler+0x1c>
		buffer_enque(&rxring[USART6Serial], USART_ReceiveData(USART6) );
 8000d1a:	4814      	ldr	r0, [pc, #80]	; (8000d6c <USART6_IRQHandler+0x60>)
 8000d1c:	f001 fc6e 	bl	80025fc <USART_ReceiveData>
 8000d20:	4601      	mov	r1, r0
 8000d22:	4813      	ldr	r0, [pc, #76]	; (8000d70 <USART6_IRQHandler+0x64>)
 8000d24:	f7ff fcff 	bl	8000726 <buffer_enque>
	}

	if (USART_GetITStatus(USART6, USART_IT_TXE )) {
 8000d28:	4810      	ldr	r0, [pc, #64]	; (8000d6c <USART6_IRQHandler+0x60>)
 8000d2a:	f240 7127 	movw	r1, #1831	; 0x727
 8000d2e:	f001 fd18 	bl	8002762 <USART_GetITStatus>
 8000d32:	2800      	cmp	r0, #0
 8000d34:	d018      	beq.n	8000d68 <USART6_IRQHandler+0x5c>
		if (txring[USART6Serial].count == 0) {
 8000d36:	4b0f      	ldr	r3, [pc, #60]	; (8000d74 <USART6_IRQHandler+0x68>)
 8000d38:	f8b3 2622 	ldrh.w	r2, [r3, #1570]	; 0x622
 8000d3c:	b95a      	cbnz	r2, 8000d56 <USART6_IRQHandler+0x4a>
			USART_ITConfig(USART6, USART_IT_TXE, (FunctionalState) DISABLE);
 8000d3e:	480b      	ldr	r0, [pc, #44]	; (8000d6c <USART6_IRQHandler+0x60>)
 8000d40:	f240 7127 	movw	r1, #1831	; 0x727
 8000d44:	f001 fcea 	bl	800271c <USART_ITConfig>
			USART_ClearITPendingBit(USART6, USART_IT_TXE );
 8000d48:	4808      	ldr	r0, [pc, #32]	; (8000d6c <USART6_IRQHandler+0x60>)
 8000d4a:	f240 7127 	movw	r1, #1831	; 0x727
		} else {
			USART_SendData(USART6, buffer_deque(&txring[USART6Serial]));
		}
	}
}
 8000d4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	}

	if (USART_GetITStatus(USART6, USART_IT_TXE )) {
		if (txring[USART6Serial].count == 0) {
			USART_ITConfig(USART6, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART6, USART_IT_TXE );
 8000d52:	f001 bd25 	b.w	80027a0 <USART_ClearITPendingBit>
		} else {
			USART_SendData(USART6, buffer_deque(&txring[USART6Serial]));
 8000d56:	4808      	ldr	r0, [pc, #32]	; (8000d78 <USART6_IRQHandler+0x6c>)
 8000d58:	f7ff fd08 	bl	800076c <buffer_deque>
 8000d5c:	4601      	mov	r1, r0
 8000d5e:	4803      	ldr	r0, [pc, #12]	; (8000d6c <USART6_IRQHandler+0x60>)
		}
	}
}
 8000d60:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	if (USART_GetITStatus(USART6, USART_IT_TXE )) {
		if (txring[USART6Serial].count == 0) {
			USART_ITConfig(USART6, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART6, USART_IT_TXE );
		} else {
			USART_SendData(USART6, buffer_deque(&txring[USART6Serial]));
 8000d64:	f001 bc46 	b.w	80025f4 <USART_SendData>
 8000d68:	bd08      	pop	{r3, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40011400 	.word	0x40011400
 8000d70:	20001542 	.word	0x20001542
 8000d74:	20000a00 	.word	0x20000a00
 8000d78:	20000f1e 	.word	0x20000f1e

08000d7c <NVIC_PriorityGroupConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8000d7c:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8000d80:	4b02      	ldr	r3, [pc, #8]	; (8000d8c <NVIC_PriorityGroupConfig+0x10>)
 8000d82:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8000d86:	60d8      	str	r0, [r3, #12]
}
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	e000ed00 	.word	0xe000ed00

08000d90 <NVIC_Init>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000d90:	78c3      	ldrb	r3, [r0, #3]
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000d92:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000d94:	b30b      	cbz	r3, 8000dda <NVIC_Init+0x4a>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000d96:	4b17      	ldr	r3, [pc, #92]	; (8000df4 <NVIC_Init+0x64>)
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000d98:	7842      	ldrb	r2, [r0, #1]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000d9a:	68db      	ldr	r3, [r3, #12]
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000d9c:	7884      	ldrb	r4, [r0, #2]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000d9e:	43db      	mvns	r3, r3
 8000da0:	f3c3 2302 	ubfx	r3, r3, #8, #3
    tmppre = (0x4 - tmppriority);
 8000da4:	f1c3 0104 	rsb	r1, r3, #4
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000da8:	b2c9      	uxtb	r1, r1
 8000daa:	fa12 f101 	lsls.w	r1, r2, r1
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
 8000dae:	220f      	movs	r2, #15
 8000db0:	411a      	asrs	r2, r3
    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000db2:	7803      	ldrb	r3, [r0, #0]
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000db4:	b2c9      	uxtb	r1, r1
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000db6:	4022      	ands	r2, r4
 8000db8:	430a      	orrs	r2, r1
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000dba:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000dbe:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
        
    tmppriority = tmppriority << 0x04;
 8000dc2:	0112      	lsls	r2, r2, #4
 8000dc4:	b2d2      	uxtb	r2, r2
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000dc6:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000dca:	7803      	ldrb	r3, [r0, #0]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000dcc:	2201      	movs	r2, #1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000dce:	0959      	lsrs	r1, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000dd0:	f003 031f 	and.w	r3, r3, #31
 8000dd4:	fa12 f303 	lsls.w	r3, r2, r3
 8000dd8:	e007      	b.n	8000dea <NVIC_Init+0x5a>
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000dda:	7803      	ldrb	r3, [r0, #0]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000ddc:	2201      	movs	r2, #1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000dde:	0959      	lsrs	r1, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000de0:	f003 031f 	and.w	r3, r3, #31
 8000de4:	fa12 f303 	lsls.w	r3, r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000de8:	3120      	adds	r1, #32
 8000dea:	4a03      	ldr	r2, [pc, #12]	; (8000df8 <NVIC_Init+0x68>)
 8000dec:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8000df0:	bd10      	pop	{r4, pc}
 8000df2:	bf00      	nop
 8000df4:	e000ed00 	.word	0xe000ed00
 8000df8:	e000e100 	.word	0xe000e100

08000dfc <NVIC_SetVectorTable>:
{ 
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 8000dfc:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
 8000e00:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 8000e04:	4b01      	ldr	r3, [pc, #4]	; (8000e0c <NVIC_SetVectorTable+0x10>)
 8000e06:	4301      	orrs	r1, r0
 8000e08:	6099      	str	r1, [r3, #8]
}
 8000e0a:	4770      	bx	lr
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT: Low Power Sleep on Exit.
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
 8000e10:	4b04      	ldr	r3, [pc, #16]	; (8000e24 <NVIC_SystemLPConfig+0x14>)
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
  {
    SCB->SCR |= LowPowerMode;
 8000e12:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 8000e14:	b109      	cbz	r1, 8000e1a <NVIC_SystemLPConfig+0xa>
  {
    SCB->SCR |= LowPowerMode;
 8000e16:	4310      	orrs	r0, r2
 8000e18:	e001      	b.n	8000e1e <NVIC_SystemLPConfig+0xe>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 8000e1a:	ea22 0000 	bic.w	r0, r2, r0
 8000e1e:	6118      	str	r0, [r3, #16]
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
 8000e28:	4b04      	ldr	r3, [pc, #16]	; (8000e3c <SysTick_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8000e2a:	681a      	ldr	r2, [r3, #0]
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 8000e2c:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8000e2e:	bf0c      	ite	eq
 8000e30:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 8000e34:	f022 0204 	bicne.w	r2, r2, #4
 8000e38:	601a      	str	r2, [r3, #0]
 8000e3a:	4770      	bx	lr
 8000e3c:	e000e010 	.word	0xe000e010

08000e40 <GPIO_DeInit>:
  * @note   By default, The GPIO pins are configured in input floating mode (except JTAG pins).
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 8000e40:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
 8000e42:	4b2c      	ldr	r3, [pc, #176]	; (8000ef4 <GPIO_DeInit+0xb4>)
 8000e44:	4298      	cmp	r0, r3
 8000e46:	d105      	bne.n	8000e54 <GPIO_DeInit+0x14>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8000e48:	2001      	movs	r0, #1
 8000e4a:	4601      	mov	r1, r0
 8000e4c:	f000 fc48 	bl	80016e0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 8000e50:	2001      	movs	r0, #1
 8000e52:	e048      	b.n	8000ee6 <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOB)
 8000e54:	4b28      	ldr	r3, [pc, #160]	; (8000ef8 <GPIO_DeInit+0xb8>)
 8000e56:	4298      	cmp	r0, r3
 8000e58:	d105      	bne.n	8000e66 <GPIO_DeInit+0x26>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8000e5a:	2002      	movs	r0, #2
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	f000 fc3f 	bl	80016e0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 8000e62:	2002      	movs	r0, #2
 8000e64:	e03f      	b.n	8000ee6 <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOC)
 8000e66:	4b25      	ldr	r3, [pc, #148]	; (8000efc <GPIO_DeInit+0xbc>)
 8000e68:	4298      	cmp	r0, r3
 8000e6a:	d105      	bne.n	8000e78 <GPIO_DeInit+0x38>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8000e6c:	2004      	movs	r0, #4
 8000e6e:	2101      	movs	r1, #1
 8000e70:	f000 fc36 	bl	80016e0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 8000e74:	2004      	movs	r0, #4
 8000e76:	e036      	b.n	8000ee6 <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOD)
 8000e78:	4b21      	ldr	r3, [pc, #132]	; (8000f00 <GPIO_DeInit+0xc0>)
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d105      	bne.n	8000e8a <GPIO_DeInit+0x4a>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8000e7e:	2008      	movs	r0, #8
 8000e80:	2101      	movs	r1, #1
 8000e82:	f000 fc2d 	bl	80016e0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 8000e86:	2008      	movs	r0, #8
 8000e88:	e02d      	b.n	8000ee6 <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOE)
 8000e8a:	4b1e      	ldr	r3, [pc, #120]	; (8000f04 <GPIO_DeInit+0xc4>)
 8000e8c:	4298      	cmp	r0, r3
 8000e8e:	d105      	bne.n	8000e9c <GPIO_DeInit+0x5c>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 8000e90:	2010      	movs	r0, #16
 8000e92:	2101      	movs	r1, #1
 8000e94:	f000 fc24 	bl	80016e0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 8000e98:	2010      	movs	r0, #16
 8000e9a:	e024      	b.n	8000ee6 <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOF)
 8000e9c:	4b1a      	ldr	r3, [pc, #104]	; (8000f08 <GPIO_DeInit+0xc8>)
 8000e9e:	4298      	cmp	r0, r3
 8000ea0:	d105      	bne.n	8000eae <GPIO_DeInit+0x6e>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 8000ea2:	2020      	movs	r0, #32
 8000ea4:	2101      	movs	r1, #1
 8000ea6:	f000 fc1b 	bl	80016e0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 8000eaa:	2020      	movs	r0, #32
 8000eac:	e01b      	b.n	8000ee6 <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOG)
 8000eae:	4b17      	ldr	r3, [pc, #92]	; (8000f0c <GPIO_DeInit+0xcc>)
 8000eb0:	4298      	cmp	r0, r3
 8000eb2:	d105      	bne.n	8000ec0 <GPIO_DeInit+0x80>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 8000eb4:	2040      	movs	r0, #64	; 0x40
 8000eb6:	2101      	movs	r1, #1
 8000eb8:	f000 fc12 	bl	80016e0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 8000ebc:	2040      	movs	r0, #64	; 0x40
 8000ebe:	e012      	b.n	8000ee6 <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOH)
 8000ec0:	4b13      	ldr	r3, [pc, #76]	; (8000f10 <GPIO_DeInit+0xd0>)
 8000ec2:	4298      	cmp	r0, r3
 8000ec4:	d105      	bne.n	8000ed2 <GPIO_DeInit+0x92>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 8000ec6:	2080      	movs	r0, #128	; 0x80
 8000ec8:	2101      	movs	r1, #1
 8000eca:	f000 fc09 	bl	80016e0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 8000ece:	2080      	movs	r0, #128	; 0x80
 8000ed0:	e009      	b.n	8000ee6 <GPIO_DeInit+0xa6>
  }
  else
  {
    if (GPIOx == GPIOI)
 8000ed2:	4b10      	ldr	r3, [pc, #64]	; (8000f14 <GPIO_DeInit+0xd4>)
 8000ed4:	4298      	cmp	r0, r3
 8000ed6:	d10b      	bne.n	8000ef0 <GPIO_DeInit+0xb0>
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 8000ed8:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000edc:	2101      	movs	r1, #1
 8000ede:	f000 fbff 	bl	80016e0 <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 8000ee2:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000ee6:	2100      	movs	r1, #0
    }
  }
}
 8000ee8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (GPIOx == GPIOI)
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 8000eec:	f000 bbf8 	b.w	80016e0 <RCC_AHB1PeriphResetCmd>
 8000ef0:	bd08      	pop	{r3, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40020000 	.word	0x40020000
 8000ef8:	40020400 	.word	0x40020400
 8000efc:	40020800 	.word	0x40020800
 8000f00:	40020c00 	.word	0x40020c00
 8000f04:	40021000 	.word	0x40021000
 8000f08:	40021400 	.word	0x40021400
 8000f0c:	40021800 	.word	0x40021800
 8000f10:	40021c00 	.word	0x40021c00
 8000f14:	40022000 	.word	0x40022000

08000f18 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000f18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
  {
    pos = ((uint32_t)0x01) << pinpos;
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	f8d1 8000 	ldr.w	r8, [r1]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000f22:	461a      	mov	r2, r3
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000f24:	f04f 0c01 	mov.w	ip, #1
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000f28:	2703      	movs	r7, #3

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000f2a:	fa0c f402 	lsl.w	r4, ip, r2
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000f2e:	ea04 0508 	and.w	r5, r4, r8

    if (currentpin == pos)
 8000f32:	42a5      	cmp	r5, r4
 8000f34:	d12e      	bne.n	8000f94 <GPIO_Init+0x7c>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000f36:	6806      	ldr	r6, [r0, #0]
 8000f38:	fa17 f403 	lsls.w	r4, r7, r3
 8000f3c:	43e4      	mvns	r4, r4
 8000f3e:	4026      	ands	r6, r4
 8000f40:	6006      	str	r6, [r0, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000f42:	790e      	ldrb	r6, [r1, #4]
 8000f44:	f8d0 9000 	ldr.w	r9, [r0]
 8000f48:	fa06 fa03 	lsl.w	sl, r6, r3

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000f4c:	3e01      	subs	r6, #1
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000f4e:	ea4a 0909 	orr.w	r9, sl, r9

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000f52:	2e01      	cmp	r6, #1
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000f54:	f8c0 9000 	str.w	r9, [r0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000f58:	d814      	bhi.n	8000f84 <GPIO_Init+0x6c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000f5a:	6886      	ldr	r6, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000f5c:	f891 9005 	ldrb.w	r9, [r1, #5]
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000f60:	4026      	ands	r6, r4
 8000f62:	6086      	str	r6, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000f64:	6886      	ldr	r6, [r0, #8]
 8000f66:	fa09 f903 	lsl.w	r9, r9, r3
 8000f6a:	ea49 0606 	orr.w	r6, r9, r6
 8000f6e:	6086      	str	r6, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000f70:	6846      	ldr	r6, [r0, #4]
 8000f72:	ea26 0505 	bic.w	r5, r6, r5
 8000f76:	6045      	str	r5, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000f78:	798d      	ldrb	r5, [r1, #6]
 8000f7a:	6846      	ldr	r6, [r0, #4]
 8000f7c:	4095      	lsls	r5, r2
 8000f7e:	b2ad      	uxth	r5, r5
 8000f80:	4335      	orrs	r5, r6
 8000f82:	6045      	str	r5, [r0, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000f84:	68c5      	ldr	r5, [r0, #12]
 8000f86:	402c      	ands	r4, r5
 8000f88:	60c4      	str	r4, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000f8a:	79cc      	ldrb	r4, [r1, #7]
 8000f8c:	68c5      	ldr	r5, [r0, #12]
 8000f8e:	409c      	lsls	r4, r3
 8000f90:	432c      	orrs	r4, r5
 8000f92:	60c4      	str	r4, [r0, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000f94:	3201      	adds	r2, #1
 8000f96:	3302      	adds	r3, #2
 8000f98:	2a10      	cmp	r2, #16
 8000f9a:	d1c6      	bne.n	8000f2a <GPIO_Init+0x12>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8000f9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08000fa0 <GPIO_StructInit>:
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8000fa0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fa4:	6003      	str	r3, [r0, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	7103      	strb	r3, [r0, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8000faa:	7143      	strb	r3, [r0, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 8000fac:	7183      	strb	r3, [r0, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000fae:	71c3      	strb	r3, [r0, #7]
}
 8000fb0:	4770      	bx	lr

08000fb2 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000fb2:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0x00010000;
 8000fb4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fb8:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
 8000fba:	9b01      	ldr	r3, [sp, #4]
 8000fbc:	430b      	orrs	r3, r1
 8000fbe:	9301      	str	r3, [sp, #4]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8000fc0:	9b01      	ldr	r3, [sp, #4]
 8000fc2:	61c3      	str	r3, [r0, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 8000fc4:	61c1      	str	r1, [r0, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8000fc6:	9b01      	ldr	r3, [sp, #4]
 8000fc8:	61c3      	str	r3, [r0, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8000fca:	69c3      	ldr	r3, [r0, #28]
 8000fcc:	9301      	str	r3, [sp, #4]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8000fce:	69c3      	ldr	r3, [r0, #28]
 8000fd0:	9301      	str	r3, [sp, #4]
}
 8000fd2:	b002      	add	sp, #8
 8000fd4:	4770      	bx	lr

08000fd6 <GPIO_ReadInputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000fd6:	6903      	ldr	r3, [r0, #16]
  {
    bitstatus = (uint8_t)Bit_SET;
 8000fd8:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 8000fda:	bf0c      	ite	eq
 8000fdc:	2000      	moveq	r0, #0
 8000fde:	2001      	movne	r0, #1
 8000fe0:	4770      	bx	lr

08000fe2 <GPIO_ReadInputData>:
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 8000fe2:	6900      	ldr	r0, [r0, #16]
}
 8000fe4:	b280      	uxth	r0, r0
 8000fe6:	4770      	bx	lr

08000fe8 <GPIO_ReadOutputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000fe8:	6943      	ldr	r3, [r0, #20]
  {
    bitstatus = (uint8_t)Bit_SET;
 8000fea:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 8000fec:	bf0c      	ite	eq
 8000fee:	2000      	moveq	r0, #0
 8000ff0:	2001      	movne	r0, #1
 8000ff2:	4770      	bx	lr

08000ff4 <GPIO_ReadOutputData>:
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
 8000ff4:	6940      	ldr	r0, [r0, #20]
}
 8000ff6:	b280      	uxth	r0, r0
 8000ff8:	4770      	bx	lr

08000ffa <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8000ffa:	8301      	strh	r1, [r0, #24]
}
 8000ffc:	4770      	bx	lr

08000ffe <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8000ffe:	8341      	strh	r1, [r0, #26]
}
 8001000:	4770      	bx	lr

08001002 <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 8001002:	b10a      	cbz	r2, 8001008 <GPIO_WriteBit+0x6>
  {
    GPIOx->BSRRL = GPIO_Pin;
 8001004:	8301      	strh	r1, [r0, #24]
 8001006:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 8001008:	8341      	strh	r1, [r0, #26]
 800100a:	4770      	bx	lr

0800100c <GPIO_Write>:
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 800100c:	6141      	str	r1, [r0, #20]
}
 800100e:	4770      	bx	lr

08001010 <GPIO_ToggleBits>:
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 8001010:	6943      	ldr	r3, [r0, #20]
 8001012:	404b      	eors	r3, r1
 8001014:	6143      	str	r3, [r0, #20]
}
 8001016:	4770      	bx	lr

08001018 <GPIO_PinAFConfig>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001018:	f001 0307 	and.w	r3, r1, #7
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800101c:	08c9      	lsrs	r1, r1, #3
 800101e:	3108      	adds	r1, #8
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8001020:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001022:	009b      	lsls	r3, r3, #2
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001024:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
 8001028:	240f      	movs	r4, #15
 800102a:	409c      	lsls	r4, r3
 800102c:	ea25 0404 	bic.w	r4, r5, r4
 8001030:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8001034:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001038:	fa12 f303 	lsls.w	r3, r2, r3
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800103c:	431c      	orrs	r4, r3
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 800103e:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
}
 8001042:	bd30      	pop	{r4, r5, pc}

08001044 <I2C_DeInit>:
  * @brief  Deinitialize the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 8001044:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 8001046:	4b13      	ldr	r3, [pc, #76]	; (8001094 <I2C_DeInit+0x50>)
 8001048:	4298      	cmp	r0, r3
 800104a:	d107      	bne.n	800105c <I2C_DeInit+0x18>
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 800104c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001050:	2101      	movs	r1, #1
 8001052:	f000 fb69 	bl	8001728 <RCC_APB1PeriphResetCmd>
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
 8001056:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800105a:	e014      	b.n	8001086 <I2C_DeInit+0x42>
  }
  else if (I2Cx == I2C2)
 800105c:	4b0e      	ldr	r3, [pc, #56]	; (8001098 <I2C_DeInit+0x54>)
 800105e:	4298      	cmp	r0, r3
 8001060:	d107      	bne.n	8001072 <I2C_DeInit+0x2e>
  {
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 8001062:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001066:	2101      	movs	r1, #1
 8001068:	f000 fb5e 	bl	8001728 <RCC_APB1PeriphResetCmd>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
 800106c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001070:	e009      	b.n	8001086 <I2C_DeInit+0x42>
  }
  else 
  {
    if (I2Cx == I2C3)
 8001072:	4b0a      	ldr	r3, [pc, #40]	; (800109c <I2C_DeInit+0x58>)
 8001074:	4298      	cmp	r0, r3
 8001076:	d10b      	bne.n	8001090 <I2C_DeInit+0x4c>
    {
      /* Enable I2C3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
 8001078:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800107c:	2101      	movs	r1, #1
 800107e:	f000 fb53 	bl	8001728 <RCC_APB1PeriphResetCmd>
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 8001082:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001086:	2100      	movs	r1, #0
    }
  }
}
 8001088:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if (I2Cx == I2C3)
    {
      /* Enable I2C3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 800108c:	f000 bb4c 	b.w	8001728 <RCC_APB1PeriphResetCmd>
 8001090:	bd08      	pop	{r3, pc}
 8001092:	bf00      	nop
 8001094:	40005400 	.word	0x40005400
 8001098:	40005800 	.word	0x40005800
 800109c:	40005c00 	.word	0x40005c00

080010a0 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 80010a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80010a2:	4604      	mov	r4, r0
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 80010a4:	8886      	ldrh	r6, [r0, #4]
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 80010a6:	4668      	mov	r0, sp
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 80010a8:	460d      	mov	r5, r1
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 80010aa:	f000 fa6d 	bl	8001588 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 80010ae:	9902      	ldr	r1, [sp, #8]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 80010b0:	482c      	ldr	r0, [pc, #176]	; (8001164 <I2C_Init+0xc4>)
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 80010b2:	682b      	ldr	r3, [r5, #0]

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 80010b4:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
 80010b8:	0436      	lsls	r6, r6, #16
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
  pclk1 = rcc_clocks.PCLK1_Frequency;
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 80010ba:	fbb1 f0f0 	udiv	r0, r1, r0

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 80010be:	0c36      	lsrs	r6, r6, #16
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
  pclk1 = rcc_clocks.PCLK1_Frequency;
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 80010c0:	b280      	uxth	r0, r0
  tmpreg |= freqrange;
 80010c2:	4306      	orrs	r6, r0
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 80010c4:	80a6      	strh	r6, [r4, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 80010c6:	8822      	ldrh	r2, [r4, #0]
 80010c8:	f022 0201 	bic.w	r2, r2, #1
 80010cc:	0412      	lsls	r2, r2, #16
 80010ce:	0c12      	lsrs	r2, r2, #16
 80010d0:	8022      	strh	r2, [r4, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 80010d2:	4a25      	ldr	r2, [pc, #148]	; (8001168 <I2C_Init+0xc8>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d80a      	bhi.n	80010ee <I2C_Init+0x4e>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	fbb1 f3f3 	udiv	r3, r1, r3
      result = 0x04;  
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 80010de:	3001      	adds	r0, #1

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 80010e0:	b29b      	uxth	r3, r3
      result = 0x04;  
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 80010e2:	b280      	uxth	r0, r0
 80010e4:	8420      	strh	r0, [r4, #32]
    {
      /* Set minimum allowed value */
      result = 0x04;  
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 80010e6:	2b03      	cmp	r3, #3
 80010e8:	bf98      	it	ls
 80010ea:	2304      	movls	r3, #4
 80010ec:	e021      	b.n	8001132 <I2C_Init+0x92>
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 80010ee:	88ee      	ldrh	r6, [r5, #6]
 80010f0:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 80010f4:	4296      	cmp	r6, r2
 80010f6:	d105      	bne.n	8001104 <I2C_Init+0x64>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 80010f8:	2203      	movs	r2, #3
 80010fa:	4353      	muls	r3, r2
 80010fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001100:	b29b      	uxth	r3, r3
 8001102:	e006      	b.n	8001112 <I2C_Init+0x72>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 8001104:	2219      	movs	r2, #25
 8001106:	4353      	muls	r3, r2
 8001108:	fbb1 f3f3 	udiv	r3, r1, r3
 800110c:	b29b      	uxth	r3, r3
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 800110e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 8001112:	051a      	lsls	r2, r3, #20
      result |= (uint16_t)0x0001;  
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8001114:	f44f 7296 	mov.w	r2, #300	; 0x12c

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 8001118:	bf08      	it	eq
 800111a:	f043 0301 	orreq.w	r3, r3, #1
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 800111e:	4350      	muls	r0, r2
 8001120:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001124:	fb90 f0f2 	sdiv	r0, r0, r2
 8001128:	3001      	adds	r0, #1
 800112a:	b280      	uxth	r0, r0
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 800112c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8001130:	8420      	strh	r0, [r4, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 8001132:	83a3      	strh	r3, [r4, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 8001134:	8823      	ldrh	r3, [r4, #0]
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8001136:	8969      	ldrh	r1, [r5, #10]
 8001138:	88aa      	ldrh	r2, [r5, #4]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 800113a:	b29b      	uxth	r3, r3
 800113c:	f043 0301 	orr.w	r3, r3, #1
 8001140:	8023      	strh	r3, [r4, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 8001142:	8823      	ldrh	r3, [r4, #0]
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 8001144:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 8001148:	f023 0302 	bic.w	r3, r3, #2
 800114c:	041b      	lsls	r3, r3, #16
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 800114e:	430a      	orrs	r2, r1

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 8001150:	0c1b      	lsrs	r3, r3, #16
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8001152:	4313      	orrs	r3, r2
 8001154:	b29b      	uxth	r3, r3
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 8001156:	8023      	strh	r3, [r4, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 8001158:	892a      	ldrh	r2, [r5, #8]
 800115a:	89ab      	ldrh	r3, [r5, #12]
 800115c:	4313      	orrs	r3, r2
 800115e:	b29b      	uxth	r3, r3
 8001160:	8123      	strh	r3, [r4, #8]
}
 8001162:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
 8001164:	000f4240 	.word	0x000f4240
 8001168:	000186a0 	.word	0x000186a0

0800116c <I2C_StructInit>:
  */
void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
{
/*---------------- Reset I2C init structure parameters values ----------------*/
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
 800116c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001170:	6003      	str	r3, [r0, #0]
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 8001172:	2300      	movs	r3, #0
 8001174:	8083      	strh	r3, [r0, #4]
  /* Initialize the I2C_DutyCycle member */
  I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 8001176:	f64b 72ff 	movw	r2, #49151	; 0xbfff
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
 800117a:	8103      	strh	r3, [r0, #8]
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
 800117c:	8143      	strh	r3, [r0, #10]
  /* Initialize the I2C_AcknowledgedAddress member */
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 800117e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
  /* Initialize the I2C_DutyCycle member */
  I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 8001182:	80c2      	strh	r2, [r0, #6]
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
  /* Initialize the I2C_AcknowledgedAddress member */
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8001184:	8183      	strh	r3, [r0, #12]
}
 8001186:	4770      	bx	lr

08001188 <I2C_Cmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 8001188:	8803      	ldrh	r3, [r0, #0]
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800118a:	b119      	cbz	r1, 8001194 <I2C_Cmd+0xc>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 800118c:	b29b      	uxth	r3, r3
 800118e:	f043 0301 	orr.w	r3, r3, #1
 8001192:	e003      	b.n	800119c <I2C_Cmd+0x14>
  }
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8001194:	f023 0301 	bic.w	r3, r3, #1
 8001198:	041b      	lsls	r3, r3, #16
 800119a:	0c1b      	lsrs	r3, r3, #16
 800119c:	8003      	strh	r3, [r0, #0]
 800119e:	4770      	bx	lr

080011a0 <I2C_GenerateSTART>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 80011a0:	8803      	ldrh	r3, [r0, #0]
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80011a2:	b119      	cbz	r1, 80011ac <I2C_GenerateSTART+0xc>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 80011a4:	b29b      	uxth	r3, r3
 80011a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011aa:	e003      	b.n	80011b4 <I2C_GenerateSTART+0x14>
  }
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 80011ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80011b0:	041b      	lsls	r3, r3, #16
 80011b2:	0c1b      	lsrs	r3, r3, #16
 80011b4:	8003      	strh	r3, [r0, #0]
 80011b6:	4770      	bx	lr

080011b8 <I2C_GenerateSTOP>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 80011b8:	8803      	ldrh	r3, [r0, #0]
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80011ba:	b119      	cbz	r1, 80011c4 <I2C_GenerateSTOP+0xc>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 80011bc:	b29b      	uxth	r3, r3
 80011be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011c2:	e003      	b.n	80011cc <I2C_GenerateSTOP+0x14>
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 80011c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80011c8:	041b      	lsls	r3, r3, #16
 80011ca:	0c1b      	lsrs	r3, r3, #16
 80011cc:	8003      	strh	r3, [r0, #0]
 80011ce:	4770      	bx	lr

080011d0 <I2C_Send7bitAddress>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 80011d0:	b112      	cbz	r2, 80011d8 <I2C_Send7bitAddress+0x8>
  {
    /* Set the address bit0 for read */
    Address |= I2C_OAR1_ADD0;
 80011d2:	f041 0101 	orr.w	r1, r1, #1
 80011d6:	e001      	b.n	80011dc <I2C_Send7bitAddress+0xc>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 80011d8:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
  }
  /* Send the address */
  I2Cx->DR = Address;
 80011dc:	8201      	strh	r1, [r0, #16]
}
 80011de:	4770      	bx	lr

080011e0 <I2C_AcknowledgeConfig>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 80011e0:	8803      	ldrh	r3, [r0, #0]
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80011e2:	b119      	cbz	r1, 80011ec <I2C_AcknowledgeConfig+0xc>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 80011e4:	b29b      	uxth	r3, r3
 80011e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011ea:	e003      	b.n	80011f4 <I2C_AcknowledgeConfig+0x14>
  }
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 80011ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80011f0:	041b      	lsls	r3, r3, #16
 80011f2:	0c1b      	lsrs	r3, r3, #16
 80011f4:	8003      	strh	r3, [r0, #0]
 80011f6:	4770      	bx	lr

080011f8 <I2C_OwnAddress2Config>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Get the old register value */
  tmpreg = I2Cx->OAR2;
 80011f8:	8983      	ldrh	r3, [r0, #12]
 80011fa:	b29b      	uxth	r3, r3

  /* Reset I2Cx Own address2 bit [7:1] */
  tmpreg &= (uint16_t)~((uint16_t)I2C_OAR2_ADD2);

  /* Set I2Cx Own address2 */
  tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
 80011fc:	f001 01fe 	and.w	r1, r1, #254	; 0xfe

  /* Get the old register value */
  tmpreg = I2Cx->OAR2;

  /* Reset I2Cx Own address2 bit [7:1] */
  tmpreg &= (uint16_t)~((uint16_t)I2C_OAR2_ADD2);
 8001200:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe

  /* Set I2Cx Own address2 */
  tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
 8001204:	430b      	orrs	r3, r1

  /* Store the new register value */
  I2Cx->OAR2 = tmpreg;
 8001206:	8183      	strh	r3, [r0, #12]
}
 8001208:	4770      	bx	lr

0800120a <I2C_DualAddressCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable dual addressing mode */
    I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
 800120a:	8983      	ldrh	r3, [r0, #12]
void I2C_DualAddressCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800120c:	b119      	cbz	r1, 8001216 <I2C_DualAddressCmd+0xc>
  {
    /* Enable dual addressing mode */
    I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
 800120e:	b29b      	uxth	r3, r3
 8001210:	f043 0301 	orr.w	r3, r3, #1
 8001214:	e003      	b.n	800121e <I2C_DualAddressCmd+0x14>
  }
  else
  {
    /* Disable dual addressing mode */
    I2Cx->OAR2 &= (uint16_t)~((uint16_t)I2C_OAR2_ENDUAL);
 8001216:	f023 0301 	bic.w	r3, r3, #1
 800121a:	041b      	lsls	r3, r3, #16
 800121c:	0c1b      	lsrs	r3, r3, #16
 800121e:	8183      	strh	r3, [r0, #12]
 8001220:	4770      	bx	lr

08001222 <I2C_GeneralCallCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable generall call */
    I2Cx->CR1 |= I2C_CR1_ENGC;
 8001222:	8803      	ldrh	r3, [r0, #0]
void I2C_GeneralCallCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001224:	b119      	cbz	r1, 800122e <I2C_GeneralCallCmd+0xc>
  {
    /* Enable generall call */
    I2Cx->CR1 |= I2C_CR1_ENGC;
 8001226:	b29b      	uxth	r3, r3
 8001228:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800122c:	e003      	b.n	8001236 <I2C_GeneralCallCmd+0x14>
  }
  else
  {
    /* Disable generall call */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENGC);
 800122e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001232:	041b      	lsls	r3, r3, #16
 8001234:	0c1b      	lsrs	r3, r3, #16
 8001236:	8003      	strh	r3, [r0, #0]
 8001238:	4770      	bx	lr

0800123a <I2C_SoftwareResetCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Peripheral under reset */
    I2Cx->CR1 |= I2C_CR1_SWRST;
 800123a:	8803      	ldrh	r3, [r0, #0]
void I2C_SoftwareResetCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800123c:	b129      	cbz	r1, 800124a <I2C_SoftwareResetCmd+0x10>
  {
    /* Peripheral under reset */
    I2Cx->CR1 |= I2C_CR1_SWRST;
 800123e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001242:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001246:	b29b      	uxth	r3, r3
 8001248:	e001      	b.n	800124e <I2C_SoftwareResetCmd+0x14>
  }
  else
  {
    /* Peripheral not under reset */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_SWRST);
 800124a:	045b      	lsls	r3, r3, #17
 800124c:	0c5b      	lsrs	r3, r3, #17
 800124e:	8003      	strh	r3, [r0, #0]
 8001250:	4770      	bx	lr

08001252 <I2C_StretchClockCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState == DISABLE)
  {
    /* Enable the selected I2C Clock stretching */
    I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 8001252:	8803      	ldrh	r3, [r0, #0]
void I2C_StretchClockCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState == DISABLE)
 8001254:	b919      	cbnz	r1, 800125e <I2C_StretchClockCmd+0xc>
  {
    /* Enable the selected I2C Clock stretching */
    I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 8001256:	b29b      	uxth	r3, r3
 8001258:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800125c:	e003      	b.n	8001266 <I2C_StretchClockCmd+0x14>
  }
  else
  {
    /* Disable the selected I2C Clock stretching */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_NOSTRETCH);
 800125e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001262:	041b      	lsls	r3, r3, #16
 8001264:	0c1b      	lsrs	r3, r3, #16
 8001266:	8003      	strh	r3, [r0, #0]
 8001268:	4770      	bx	lr

0800126a <I2C_FastModeDutyCycleConfig>:
void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
  if (I2C_DutyCycle != I2C_DutyCycle_16_9)
 800126a:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
  {
    /* I2C fast mode Tlow/Thigh=2 */
    I2Cx->CCR &= I2C_DutyCycle_2;
 800126e:	8b83      	ldrh	r3, [r0, #28]
void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
  if (I2C_DutyCycle != I2C_DutyCycle_16_9)
 8001270:	d004      	beq.n	800127c <I2C_FastModeDutyCycleConfig+0x12>
  {
    /* I2C fast mode Tlow/Thigh=2 */
    I2Cx->CCR &= I2C_DutyCycle_2;
 8001272:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001276:	041b      	lsls	r3, r3, #16
 8001278:	0c1b      	lsrs	r3, r3, #16
 800127a:	e002      	b.n	8001282 <I2C_FastModeDutyCycleConfig+0x18>
  }
  else
  {
    /* I2C fast mode Tlow/Thigh=16/9 */
    I2Cx->CCR |= I2C_DutyCycle_16_9;
 800127c:	b29b      	uxth	r3, r3
 800127e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001282:	8383      	strh	r3, [r0, #28]
 8001284:	4770      	bx	lr

08001286 <I2C_NACKPositionConfig>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_NACK_POSITION(I2C_NACKPosition));
  
  /* Check the input parameter */
  if (I2C_NACKPosition == I2C_NACKPosition_Next)
 8001286:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
  {
    /* Next byte in shift register is the last received byte */
    I2Cx->CR1 |= I2C_NACKPosition_Next;
 800128a:	8803      	ldrh	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_NACK_POSITION(I2C_NACKPosition));
  
  /* Check the input parameter */
  if (I2C_NACKPosition == I2C_NACKPosition_Next)
 800128c:	d103      	bne.n	8001296 <I2C_NACKPositionConfig+0x10>
  {
    /* Next byte in shift register is the last received byte */
    I2Cx->CR1 |= I2C_NACKPosition_Next;
 800128e:	b29b      	uxth	r3, r3
 8001290:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001294:	e003      	b.n	800129e <I2C_NACKPositionConfig+0x18>
  }
  else
  {
    /* Current byte in shift register is the last received byte */
    I2Cx->CR1 &= I2C_NACKPosition_Current;
 8001296:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800129a:	041b      	lsls	r3, r3, #16
 800129c:	0c1b      	lsrs	r3, r3, #16
 800129e:	8003      	strh	r3, [r0, #0]
 80012a0:	4770      	bx	lr

080012a2 <I2C_SMBusAlertConfig>:
void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
 80012a2:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
  {
    /* Drive the SMBusAlert pin Low */
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
 80012a6:	8803      	ldrh	r3, [r0, #0]
void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
 80012a8:	d103      	bne.n	80012b2 <I2C_SMBusAlertConfig+0x10>
  {
    /* Drive the SMBusAlert pin Low */
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80012b0:	e003      	b.n	80012ba <I2C_SMBusAlertConfig+0x18>
  }
  else
  {
    /* Drive the SMBusAlert pin High  */
    I2Cx->CR1 &= I2C_SMBusAlert_High;
 80012b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80012b6:	041b      	lsls	r3, r3, #16
 80012b8:	0c1b      	lsrs	r3, r3, #16
 80012ba:	8003      	strh	r3, [r0, #0]
 80012bc:	4770      	bx	lr

080012be <I2C_ARPCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C ARP */
    I2Cx->CR1 |= I2C_CR1_ENARP;
 80012be:	8803      	ldrh	r3, [r0, #0]
void I2C_ARPCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80012c0:	b119      	cbz	r1, 80012ca <I2C_ARPCmd+0xc>
  {
    /* Enable the selected I2C ARP */
    I2Cx->CR1 |= I2C_CR1_ENARP;
 80012c2:	b29b      	uxth	r3, r3
 80012c4:	f043 0310 	orr.w	r3, r3, #16
 80012c8:	e003      	b.n	80012d2 <I2C_ARPCmd+0x14>
  }
  else
  {
    /* Disable the selected I2C ARP */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENARP);
 80012ca:	f023 0310 	bic.w	r3, r3, #16
 80012ce:	041b      	lsls	r3, r3, #16
 80012d0:	0c1b      	lsrs	r3, r3, #16
 80012d2:	8003      	strh	r3, [r0, #0]
 80012d4:	4770      	bx	lr

080012d6 <I2C_SendData>:
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 80012d6:	8201      	strh	r1, [r0, #16]
}
 80012d8:	4770      	bx	lr

080012da <I2C_ReceiveData>:
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 80012da:	8a00      	ldrh	r0, [r0, #16]
}
 80012dc:	b2c0      	uxtb	r0, r0
 80012de:	4770      	bx	lr

080012e0 <I2C_TransmitPEC>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C PEC transmission */
    I2Cx->CR1 |= I2C_CR1_PEC;
 80012e0:	8803      	ldrh	r3, [r0, #0]
void I2C_TransmitPEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80012e2:	b119      	cbz	r1, 80012ec <I2C_TransmitPEC+0xc>
  {
    /* Enable the selected I2C PEC transmission */
    I2Cx->CR1 |= I2C_CR1_PEC;
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012ea:	e003      	b.n	80012f4 <I2C_TransmitPEC+0x14>
  }
  else
  {
    /* Disable the selected I2C PEC transmission */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PEC);
 80012ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80012f0:	041b      	lsls	r3, r3, #16
 80012f2:	0c1b      	lsrs	r3, r3, #16
 80012f4:	8003      	strh	r3, [r0, #0]
 80012f6:	4770      	bx	lr

080012f8 <I2C_PECPositionConfig>:
void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
 80012f8:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
  {
    /* Next byte in shift register is PEC */
    I2Cx->CR1 |= I2C_PECPosition_Next;
 80012fc:	8803      	ldrh	r3, [r0, #0]
void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
 80012fe:	d103      	bne.n	8001308 <I2C_PECPositionConfig+0x10>
  {
    /* Next byte in shift register is PEC */
    I2Cx->CR1 |= I2C_PECPosition_Next;
 8001300:	b29b      	uxth	r3, r3
 8001302:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001306:	e003      	b.n	8001310 <I2C_PECPositionConfig+0x18>
  }
  else
  {
    /* Current byte in shift register is PEC */
    I2Cx->CR1 &= I2C_PECPosition_Current;
 8001308:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800130c:	041b      	lsls	r3, r3, #16
 800130e:	0c1b      	lsrs	r3, r3, #16
 8001310:	8003      	strh	r3, [r0, #0]
 8001312:	4770      	bx	lr

08001314 <I2C_CalculatePEC>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C PEC calculation */
    I2Cx->CR1 |= I2C_CR1_ENPEC;
 8001314:	8803      	ldrh	r3, [r0, #0]
void I2C_CalculatePEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001316:	b119      	cbz	r1, 8001320 <I2C_CalculatePEC+0xc>
  {
    /* Enable the selected I2C PEC calculation */
    I2Cx->CR1 |= I2C_CR1_ENPEC;
 8001318:	b29b      	uxth	r3, r3
 800131a:	f043 0320 	orr.w	r3, r3, #32
 800131e:	e003      	b.n	8001328 <I2C_CalculatePEC+0x14>
  }
  else
  {
    /* Disable the selected I2C PEC calculation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENPEC);
 8001320:	f023 0320 	bic.w	r3, r3, #32
 8001324:	041b      	lsls	r3, r3, #16
 8001326:	0c1b      	lsrs	r3, r3, #16
 8001328:	8003      	strh	r3, [r0, #0]
 800132a:	4770      	bx	lr

0800132c <I2C_GetPEC>:
uint8_t I2C_GetPEC(I2C_TypeDef* I2Cx)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the selected I2C PEC value */
  return ((I2Cx->SR2) >> 8);
 800132c:	8b00      	ldrh	r0, [r0, #24]
}
 800132e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8001332:	4770      	bx	lr

08001334 <I2C_DMACmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR2 |= I2C_CR2_DMAEN;
 8001334:	8883      	ldrh	r3, [r0, #4]
void I2C_DMACmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001336:	b119      	cbz	r1, 8001340 <I2C_DMACmd+0xc>
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR2 |= I2C_CR2_DMAEN;
 8001338:	b29b      	uxth	r3, r3
 800133a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800133e:	e003      	b.n	8001348 <I2C_DMACmd+0x14>
  }
  else
  {
    /* Disable the selected I2C DMA requests */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_DMAEN);
 8001340:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001344:	041b      	lsls	r3, r3, #16
 8001346:	0c1b      	lsrs	r3, r3, #16
 8001348:	8083      	strh	r3, [r0, #4]
 800134a:	4770      	bx	lr

0800134c <I2C_DMALastTransferCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Next DMA transfer is the last transfer */
    I2Cx->CR2 |= I2C_CR2_LAST;
 800134c:	8883      	ldrh	r3, [r0, #4]
void I2C_DMALastTransferCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800134e:	b119      	cbz	r1, 8001358 <I2C_DMALastTransferCmd+0xc>
  {
    /* Next DMA transfer is the last transfer */
    I2Cx->CR2 |= I2C_CR2_LAST;
 8001350:	b29b      	uxth	r3, r3
 8001352:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001356:	e003      	b.n	8001360 <I2C_DMALastTransferCmd+0x14>
  }
  else
  {
    /* Next DMA transfer is not the last transfer */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_LAST);
 8001358:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800135c:	041b      	lsls	r3, r3, #16
 800135e:	0c1b      	lsrs	r3, r3, #16
 8001360:	8083      	strh	r3, [r0, #4]
 8001362:	4770      	bx	lr

08001364 <I2C_ReadRegister>:
  *            @arg I2C_Register_CCR:   CCR register.
  *            @arg I2C_Register_TRISE: TRISE register.
  * @retval The value of the read register.
  */
uint16_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register)
{
 8001364:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 8001366:	2300      	movs	r3, #0
 8001368:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_REGISTER(I2C_Register));

  tmp = (uint32_t) I2Cx;
 800136a:	9001      	str	r0, [sp, #4]
  tmp += I2C_Register;
 800136c:	9b01      	ldr	r3, [sp, #4]
 800136e:	18cb      	adds	r3, r1, r3
 8001370:	9301      	str	r3, [sp, #4]

  /* Return the selected register value */
  return (*(__IO uint16_t *) tmp);
 8001372:	9b01      	ldr	r3, [sp, #4]
 8001374:	8818      	ldrh	r0, [r3, #0]
}
 8001376:	b280      	uxth	r0, r0
 8001378:	b002      	add	sp, #8
 800137a:	4770      	bx	lr

0800137c <I2C_ITConfig>:
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 800137c:	8883      	ldrh	r3, [r0, #4]
 800137e:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
 8001380:	b10a      	cbz	r2, 8001386 <I2C_ITConfig+0xa>
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 8001382:	4319      	orrs	r1, r3
 8001384:	e001      	b.n	800138a <I2C_ITConfig+0xe>
  }
  else
  {
    /* Disable the selected I2C interrupts */
    I2Cx->CR2 &= (uint16_t)~I2C_IT;
 8001386:	ea23 0101 	bic.w	r1, r3, r1
 800138a:	8081      	strh	r1, [r0, #4]
 800138c:	4770      	bx	lr

0800138e <I2C_CheckEvent>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 800138e:	8a83      	ldrh	r3, [r0, #20]
  flag2 = I2Cx->SR2;
 8001390:	8b00      	ldrh	r0, [r0, #24]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8001392:	b29b      	uxth	r3, r3
  flag2 = I2Cx->SR2;
  flag2 = flag2 << 16;

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 8001394:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8001398:	4008      	ands	r0, r1

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 800139a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
  }
  /* Return status */
  return status;
}
 800139e:	1a43      	subs	r3, r0, r1
 80013a0:	4258      	negs	r0, r3
 80013a2:	eb40 0003 	adc.w	r0, r0, r3
 80013a6:	4770      	bx	lr

080013a8 <I2C_GetLastEvent>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 80013a8:	8a83      	ldrh	r3, [r0, #20]
  flag2 = I2Cx->SR2;
 80013aa:	8b00      	ldrh	r0, [r0, #24]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 80013ac:	b29b      	uxth	r3, r3
  flag2 = I2Cx->SR2;
  flag2 = flag2 << 16;

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 80013ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16

  /* Return status */
  return lastevent;
}
 80013b2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80013b6:	4770      	bx	lr

080013b8 <I2C_GetFlagStatus>:
  *                                Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 80013b8:	b082      	sub	sp, #8
  FlagStatus bitstatus = RESET;
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 80013ba:	2300      	movs	r3, #0
 80013bc:	9300      	str	r3, [sp, #0]
 80013be:	9301      	str	r3, [sp, #4]

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 80013c0:	0f0b      	lsrs	r3, r1, #28
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 80013c2:	9001      	str	r0, [sp, #4]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 80013c4:	9300      	str	r3, [sp, #0]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
  
  if(i2creg != 0)
 80013c6:	9b00      	ldr	r3, [sp, #0]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 80013c8:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
  
  if(i2creg != 0)
 80013cc:	b113      	cbz	r3, 80013d4 <I2C_GetFlagStatus+0x1c>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 80013ce:	9b01      	ldr	r3, [sp, #4]
 80013d0:	3314      	adds	r3, #20
 80013d2:	e002      	b.n	80013da <I2C_GetFlagStatus+0x22>
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 80013d4:	9b01      	ldr	r3, [sp, #4]
    i2cxbase += 0x14;
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 80013d6:	0c09      	lsrs	r1, r1, #16
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 80013d8:	3318      	adds	r3, #24
 80013da:	9301      	str	r3, [sp, #4]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 80013dc:	9b01      	ldr	r3, [sp, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 80013e0:	4219      	tst	r1, r3
    bitstatus = RESET;
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
}
 80013e2:	bf0c      	ite	eq
 80013e4:	2000      	moveq	r0, #0
 80013e6:	2001      	movne	r0, #1
 80013e8:	b002      	add	sp, #8
 80013ea:	4770      	bx	lr

080013ec <I2C_ClearFlag>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));
  /* Get the I2C flag position */
  flagpos = I2C_FLAG & FLAG_MASK;
  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 80013ec:	43c9      	mvns	r1, r1
 80013ee:	b289      	uxth	r1, r1
 80013f0:	8281      	strh	r1, [r0, #20]
}
 80013f2:	4770      	bx	lr

080013f4 <I2C_GetITStatus>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 80013f4:	8883      	ldrh	r3, [r0, #4]
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_MASK;

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 80013f6:	8a80      	ldrh	r0, [r0, #20]
 80013f8:	b280      	uxth	r0, r0
 80013fa:	4008      	ands	r0, r1
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 80013fc:	b29b      	uxth	r3, r3
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_MASK;

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 80013fe:	d006      	beq.n	800140e <I2C_GetITStatus+0x1a>
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 8001400:	f001 61e0 	and.w	r1, r1, #117440512	; 0x7000000
  *            @arg I2C_IT_ADDR: Address sent flag (Master mode) "ADSL"
  *                              Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_IT_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_IT (SET or RESET).
  */
ITStatus I2C_GetITStatus(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
 8001404:	ea13 4111 	ands.w	r1, r3, r1, lsr #16

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
  {
    /* I2C_IT is set */
    bitstatus = SET;
 8001408:	bf0c      	ite	eq
 800140a:	2000      	moveq	r0, #0
 800140c:	2001      	movne	r0, #1
    /* I2C_IT is reset */
    bitstatus = RESET;
  }
  /* Return the I2C_IT status */
  return  bitstatus;
}
 800140e:	4770      	bx	lr

08001410 <I2C_ClearITPendingBit>:

  /* Get the I2C flag position */
  flagpos = I2C_IT & FLAG_MASK;

  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 8001410:	43c9      	mvns	r1, r1
 8001412:	b289      	uxth	r1, r1
 8001414:	8281      	strh	r1, [r0, #20]
}
 8001416:	4770      	bx	lr

08001418 <RCC_DeInit>:
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001418:	4b0a      	ldr	r3, [pc, #40]	; (8001444 <RCC_DeInit+0x2c>)
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	f042 0201 	orr.w	r2, r2, #1
 8001420:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001422:	2200      	movs	r2, #0
 8001424:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001426:	6819      	ldr	r1, [r3, #0]
 8001428:	f021 7184 	bic.w	r1, r1, #17301504	; 0x1080000
 800142c:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8001430:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001432:	4905      	ldr	r1, [pc, #20]	; (8001448 <RCC_DeInit+0x30>)
 8001434:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001436:	6819      	ldr	r1, [r3, #0]
 8001438:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800143c:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800143e:	60da      	str	r2, [r3, #12]
}
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	40023800 	.word	0x40023800
 8001448:	24003010 	.word	0x24003010

0800144c <RCC_HSEConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 800144c:	4b02      	ldr	r3, [pc, #8]	; (8001458 <RCC_HSEConfig+0xc>)
 800144e:	2200      	movs	r2, #0
 8001450:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 8001452:	7018      	strb	r0, [r3, #0]
}
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	40023802 	.word	0x40023802

0800145c <RCC_AdjustHSICalibrationValue>:
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
 800145c:	4b03      	ldr	r3, [pc, #12]	; (800146c <RCC_AdjustHSICalibrationValue+0x10>)
 800145e:	681a      	ldr	r2, [r3, #0]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 8001460:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 8001464:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3

  /* Store the new value */
  RCC->CR = tmpreg;
 8001468:	601a      	str	r2, [r3, #0]
}
 800146a:	4770      	bx	lr
 800146c:	40023800 	.word	0x40023800

08001470 <RCC_HSICmd>:
void RCC_HSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 8001470:	4b01      	ldr	r3, [pc, #4]	; (8001478 <RCC_HSICmd+0x8>)
 8001472:	6018      	str	r0, [r3, #0]
}
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	42470000 	.word	0x42470000

0800147c <RCC_LSEConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 800147c:	4b06      	ldr	r3, [pc, #24]	; (8001498 <RCC_LSEConfig+0x1c>)
 800147e:	2200      	movs	r2, #0

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 8001480:	2801      	cmp	r0, #1
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8001482:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8001484:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 8001486:	d002      	beq.n	800148e <RCC_LSEConfig+0x12>
 8001488:	2804      	cmp	r0, #4
 800148a:	d104      	bne.n	8001496 <RCC_LSEConfig+0x1a>
 800148c:	e001      	b.n	8001492 <RCC_LSEConfig+0x16>
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 800148e:	7018      	strb	r0, [r3, #0]
      break;
 8001490:	4770      	bx	lr
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 8001492:	2205      	movs	r2, #5
 8001494:	701a      	strb	r2, [r3, #0]
 8001496:	4770      	bx	lr
 8001498:	40023870 	.word	0x40023870

0800149c <RCC_LSICmd>:
void RCC_LSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 800149c:	4b01      	ldr	r3, [pc, #4]	; (80014a4 <RCC_LSICmd+0x8>)
 800149e:	6018      	str	r0, [r3, #0]
}
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	42470e80 	.word	0x42470e80

080014a8 <RCC_PLLConfig>:
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 80014a8:	4301      	orrs	r1, r0
 80014aa:	ea41 1282 	orr.w	r2, r1, r2, lsl #6
 80014ae:	9900      	ldr	r1, [sp, #0]
 80014b0:	085b      	lsrs	r3, r3, #1
 80014b2:	3b01      	subs	r3, #1
 80014b4:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80014b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80014bc:	4b01      	ldr	r3, [pc, #4]	; (80014c4 <RCC_PLLConfig+0x1c>)
 80014be:	6059      	str	r1, [r3, #4]
                 (PLLQ << 24);
}
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	40023800 	.word	0x40023800

080014c8 <RCC_PLLCmd>:
  */
void RCC_PLLCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 80014c8:	4b01      	ldr	r3, [pc, #4]	; (80014d0 <RCC_PLLCmd+0x8>)
 80014ca:	6018      	str	r0, [r3, #0]
}
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	42470060 	.word	0x42470060

080014d4 <RCC_PLLI2SConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
 80014d4:	0180      	lsls	r0, r0, #6
 80014d6:	4b03      	ldr	r3, [pc, #12]	; (80014e4 <RCC_PLLI2SConfig+0x10>)
 80014d8:	ea40 7101 	orr.w	r1, r0, r1, lsl #28
 80014dc:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
}
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	40023800 	.word	0x40023800

080014e8 <RCC_PLLI2SCmd>:
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 80014e8:	4b01      	ldr	r3, [pc, #4]	; (80014f0 <RCC_PLLI2SCmd+0x8>)
 80014ea:	6018      	str	r0, [r3, #0]
}
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	42470068 	.word	0x42470068

080014f4 <RCC_ClockSecuritySystemCmd>:
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 80014f4:	4b01      	ldr	r3, [pc, #4]	; (80014fc <RCC_ClockSecuritySystemCmd+0x8>)
 80014f6:	6018      	str	r0, [r3, #0]
}
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	4247004c 	.word	0x4247004c

08001500 <RCC_MCO1Config>:
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
 8001500:	4b03      	ldr	r3, [pc, #12]	; (8001510 <RCC_MCO1Config+0x10>)
 8001502:	689a      	ldr	r2, [r3, #8]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
 8001504:	f022 62ec 	bic.w	r2, r2, #123731968	; 0x7600000

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 8001508:	4302      	orrs	r2, r0
 800150a:	430a      	orrs	r2, r1

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 800150c:	609a      	str	r2, [r3, #8]
}
 800150e:	4770      	bx	lr
 8001510:	40023800 	.word	0x40023800

08001514 <RCC_MCO2Config>:
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
 8001514:	4b03      	ldr	r3, [pc, #12]	; (8001524 <RCC_MCO2Config+0x10>)
 8001516:	689a      	ldr	r2, [r3, #8]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
 8001518:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 800151c:	4302      	orrs	r2, r0
 800151e:	430a      	orrs	r2, r1

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 8001520:	609a      	str	r2, [r3, #8]
}
 8001522:	4770      	bx	lr
 8001524:	40023800 	.word	0x40023800

08001528 <RCC_SYSCLKConfig>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 8001528:	4b03      	ldr	r3, [pc, #12]	; (8001538 <RCC_SYSCLKConfig+0x10>)
 800152a:	689a      	ldr	r2, [r3, #8]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 800152c:	f022 0203 	bic.w	r2, r2, #3

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8001530:	4302      	orrs	r2, r0

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001532:	609a      	str	r2, [r3, #8]
}
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	40023800 	.word	0x40023800

0800153c <RCC_GetSYSCLKSource>:
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 800153c:	4b02      	ldr	r3, [pc, #8]	; (8001548 <RCC_GetSYSCLKSource+0xc>)
 800153e:	6898      	ldr	r0, [r3, #8]
}
 8001540:	f000 000c 	and.w	r0, r0, #12
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	40023800 	.word	0x40023800

0800154c <RCC_HCLKConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 800154c:	4b03      	ldr	r3, [pc, #12]	; (800155c <RCC_HCLKConfig+0x10>)
 800154e:	689a      	ldr	r2, [r3, #8]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 8001550:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8001554:	4302      	orrs	r2, r0

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001556:	609a      	str	r2, [r3, #8]
}
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	40023800 	.word	0x40023800

08001560 <RCC_PCLK1Config>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8001560:	4b03      	ldr	r3, [pc, #12]	; (8001570 <RCC_PCLK1Config+0x10>)
 8001562:	689a      	ldr	r2, [r3, #8]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 8001564:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8001568:	4302      	orrs	r2, r0

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800156a:	609a      	str	r2, [r3, #8]
}
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	40023800 	.word	0x40023800

08001574 <RCC_PCLK2Config>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8001574:	4b03      	ldr	r3, [pc, #12]	; (8001584 <RCC_PCLK2Config+0x10>)
 8001576:	689a      	ldr	r2, [r3, #8]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 8001578:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 800157c:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001580:	609a      	str	r2, [r3, #8]
}
 8001582:	4770      	bx	lr
 8001584:	40023800 	.word	0x40023800

08001588 <RCC_GetClocksFreq>:
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001588:	4b1e      	ldr	r3, [pc, #120]	; (8001604 <RCC_GetClocksFreq+0x7c>)
 800158a:	689a      	ldr	r2, [r3, #8]
 800158c:	f002 020c 	and.w	r2, r2, #12

  switch (tmp)
 8001590:	2a04      	cmp	r2, #4
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8001592:	b510      	push	{r4, lr}
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;

  switch (tmp)
 8001594:	d003      	beq.n	800159e <RCC_GetClocksFreq+0x16>
 8001596:	2a08      	cmp	r2, #8
 8001598:	d003      	beq.n	80015a2 <RCC_GetClocksFreq+0x1a>
 800159a:	4b1b      	ldr	r3, [pc, #108]	; (8001608 <RCC_GetClocksFreq+0x80>)
 800159c:	e018      	b.n	80015d0 <RCC_GetClocksFreq+0x48>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 800159e:	4b1b      	ldr	r3, [pc, #108]	; (800160c <RCC_GetClocksFreq+0x84>)
 80015a0:	e016      	b.n	80015d0 <RCC_GetClocksFreq+0x48>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80015a2:	6859      	ldr	r1, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015a4:	685a      	ldr	r2, [r3, #4]
      
      if (pllsource != 0)
 80015a6:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80015aa:	6859      	ldr	r1, [r3, #4]
 80015ac:	bf14      	ite	ne
 80015ae:	4b17      	ldrne	r3, [pc, #92]	; (800160c <RCC_GetClocksFreq+0x84>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80015b0:	4b15      	ldreq	r3, [pc, #84]	; (8001608 <RCC_GetClocksFreq+0x80>)

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015b2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80015b6:	fbb3 f3f2 	udiv	r3, r3, r2
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80015ba:	4a12      	ldr	r2, [pc, #72]	; (8001604 <RCC_GetClocksFreq+0x7c>)
 80015bc:	6852      	ldr	r2, [r2, #4]
 80015be:	f3c2 4201 	ubfx	r2, r2, #16, #2
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80015c2:	f3c1 1188 	ubfx	r1, r1, #6, #9
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80015c6:	3201      	adds	r2, #1
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80015c8:	434b      	muls	r3, r1
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80015ca:	0052      	lsls	r2, r2, #1
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 80015cc:	fbb3 f3f2 	udiv	r3, r3, r2
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80015d0:	490c      	ldr	r1, [pc, #48]	; (8001604 <RCC_GetClocksFreq+0x7c>)
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 80015d2:	6003      	str	r3, [r0, #0]
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80015d4:	688b      	ldr	r3, [r1, #8]
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];
 80015d6:	4a0e      	ldr	r2, [pc, #56]	; (8001610 <RCC_GetClocksFreq+0x88>)
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80015d8:	6804      	ldr	r4, [r0, #0]
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
  tmp = tmp >> 4;
 80015da:	f3c3 1303 	ubfx	r3, r3, #4, #4
  presc = APBAHBPrescTable[tmp];
 80015de:	5cd3      	ldrb	r3, [r2, r3]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80015e0:	fa34 f303 	lsrs.w	r3, r4, r3
 80015e4:	6043      	str	r3, [r0, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80015e6:	688c      	ldr	r4, [r1, #8]
  tmp = tmp >> 10;
 80015e8:	f3c4 2482 	ubfx	r4, r4, #10, #3
  presc = APBAHBPrescTable[tmp];
 80015ec:	5d14      	ldrb	r4, [r2, r4]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80015ee:	fa33 f404 	lsrs.w	r4, r3, r4
 80015f2:	6084      	str	r4, [r0, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 80015f4:	6889      	ldr	r1, [r1, #8]
  tmp = tmp >> 13;
 80015f6:	f3c1 3142 	ubfx	r1, r1, #13, #3
  presc = APBAHBPrescTable[tmp];
 80015fa:	5c52      	ldrb	r2, [r2, r1]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80015fc:	40d3      	lsrs	r3, r2
 80015fe:	60c3      	str	r3, [r0, #12]
}
 8001600:	bd10      	pop	{r4, pc}
 8001602:	bf00      	nop
 8001604:	40023800 	.word	0x40023800
 8001608:	00f42400 	.word	0x00f42400
 800160c:	007a1200 	.word	0x007a1200
 8001610:	200000a4 	.word	0x200000a4

08001614 <RCC_RTCCLKConfig>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 8001614:	f400 7340 	and.w	r3, r0, #768	; 0x300
 8001618:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800161c:	4b08      	ldr	r3, [pc, #32]	; (8001640 <RCC_RTCCLKConfig+0x2c>)
 800161e:	d108      	bne.n	8001632 <RCC_RTCCLKConfig+0x1e>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 8001620:	6899      	ldr	r1, [r3, #8]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8001622:	f020 4270 	bic.w	r2, r0, #4026531840	; 0xf0000000
  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
 8001626:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 800162a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800162e:	430a      	orrs	r2, r1

    /* Store the new value */
    RCC->CFGR = tmpreg;
 8001630:	609a      	str	r2, [r3, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 8001632:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001634:	0500      	lsls	r0, r0, #20
 8001636:	ea42 5010 	orr.w	r0, r2, r0, lsr #20
 800163a:	6718      	str	r0, [r3, #112]	; 0x70
}
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	40023800 	.word	0x40023800

08001644 <RCC_RTCCLKCmd>:
void RCC_RTCCLKCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 8001644:	4b01      	ldr	r3, [pc, #4]	; (800164c <RCC_RTCCLKCmd+0x8>)
 8001646:	6018      	str	r0, [r3, #0]
}
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	42470e3c 	.word	0x42470e3c

08001650 <RCC_BackupResetCmd>:
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 8001650:	4b01      	ldr	r3, [pc, #4]	; (8001658 <RCC_BackupResetCmd+0x8>)
 8001652:	6018      	str	r0, [r3, #0]
}
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	42470e40 	.word	0x42470e40

0800165c <RCC_I2SCLKConfig>:
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 800165c:	4b01      	ldr	r3, [pc, #4]	; (8001664 <RCC_I2SCLKConfig+0x8>)
 800165e:	6018      	str	r0, [r3, #0]
}
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	4247015c 	.word	0x4247015c

08001668 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8001668:	4b04      	ldr	r3, [pc, #16]	; (800167c <RCC_AHB1PeriphClockCmd+0x14>)
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800166a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800166c:	b109      	cbz	r1, 8001672 <RCC_AHB1PeriphClockCmd+0xa>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800166e:	4310      	orrs	r0, r2
 8001670:	e001      	b.n	8001676 <RCC_AHB1PeriphClockCmd+0xe>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8001672:	ea22 0000 	bic.w	r0, r2, r0
 8001676:	6318      	str	r0, [r3, #48]	; 0x30
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	40023800 	.word	0x40023800

08001680 <RCC_AHB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 8001680:	4b04      	ldr	r3, [pc, #16]	; (8001694 <RCC_AHB2PeriphClockCmd+0x14>)
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 8001682:	6b5a      	ldr	r2, [r3, #52]	; 0x34
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001684:	b109      	cbz	r1, 800168a <RCC_AHB2PeriphClockCmd+0xa>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 8001686:	4310      	orrs	r0, r2
 8001688:	e001      	b.n	800168e <RCC_AHB2PeriphClockCmd+0xe>
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
 800168a:	ea22 0000 	bic.w	r0, r2, r0
 800168e:	6358      	str	r0, [r3, #52]	; 0x34
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	40023800 	.word	0x40023800

08001698 <RCC_AHB3PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 8001698:	4b04      	ldr	r3, [pc, #16]	; (80016ac <RCC_AHB3PeriphClockCmd+0x14>)
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 800169a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800169c:	b109      	cbz	r1, 80016a2 <RCC_AHB3PeriphClockCmd+0xa>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 800169e:	4310      	orrs	r0, r2
 80016a0:	e001      	b.n	80016a6 <RCC_AHB3PeriphClockCmd+0xe>
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
 80016a2:	ea22 0000 	bic.w	r0, r2, r0
 80016a6:	6398      	str	r0, [r3, #56]	; 0x38
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	40023800 	.word	0x40023800

080016b0 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80016b0:	4b04      	ldr	r3, [pc, #16]	; (80016c4 <RCC_APB1PeriphClockCmd+0x14>)
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80016b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80016b4:	b109      	cbz	r1, 80016ba <RCC_APB1PeriphClockCmd+0xa>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80016b6:	4310      	orrs	r0, r2
 80016b8:	e001      	b.n	80016be <RCC_APB1PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80016ba:	ea22 0000 	bic.w	r0, r2, r0
 80016be:	6418      	str	r0, [r3, #64]	; 0x40
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	40023800 	.word	0x40023800

080016c8 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80016c8:	4b04      	ldr	r3, [pc, #16]	; (80016dc <RCC_APB2PeriphClockCmd+0x14>)
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80016ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80016cc:	b109      	cbz	r1, 80016d2 <RCC_APB2PeriphClockCmd+0xa>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80016ce:	4310      	orrs	r0, r2
 80016d0:	e001      	b.n	80016d6 <RCC_APB2PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80016d2:	ea22 0000 	bic.w	r0, r2, r0
 80016d6:	6458      	str	r0, [r3, #68]	; 0x44
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	40023800 	.word	0x40023800

080016e0 <RCC_AHB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80016e0:	4b04      	ldr	r3, [pc, #16]	; (80016f4 <RCC_AHB1PeriphResetCmd+0x14>)
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 80016e2:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80016e4:	b109      	cbz	r1, 80016ea <RCC_AHB1PeriphResetCmd+0xa>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 80016e6:	4310      	orrs	r0, r2
 80016e8:	e001      	b.n	80016ee <RCC_AHB1PeriphResetCmd+0xe>
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 80016ea:	ea22 0000 	bic.w	r0, r2, r0
 80016ee:	6118      	str	r0, [r3, #16]
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	40023800 	.word	0x40023800

080016f8 <RCC_AHB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 80016f8:	4b04      	ldr	r3, [pc, #16]	; (800170c <RCC_AHB2PeriphResetCmd+0x14>)
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 80016fa:	695a      	ldr	r2, [r3, #20]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80016fc:	b109      	cbz	r1, 8001702 <RCC_AHB2PeriphResetCmd+0xa>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 80016fe:	4310      	orrs	r0, r2
 8001700:	e001      	b.n	8001706 <RCC_AHB2PeriphResetCmd+0xe>
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 8001702:	ea22 0000 	bic.w	r0, r2, r0
 8001706:	6158      	str	r0, [r3, #20]
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	40023800 	.word	0x40023800

08001710 <RCC_AHB3PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 8001710:	4b04      	ldr	r3, [pc, #16]	; (8001724 <RCC_AHB3PeriphResetCmd+0x14>)
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 8001712:	699a      	ldr	r2, [r3, #24]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001714:	b109      	cbz	r1, 800171a <RCC_AHB3PeriphResetCmd+0xa>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 8001716:	4310      	orrs	r0, r2
 8001718:	e001      	b.n	800171e <RCC_AHB3PeriphResetCmd+0xe>
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
 800171a:	ea22 0000 	bic.w	r0, r2, r0
 800171e:	6198      	str	r0, [r3, #24]
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	40023800 	.word	0x40023800

08001728 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001728:	4b04      	ldr	r3, [pc, #16]	; (800173c <RCC_APB1PeriphResetCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 800172a:	6a1a      	ldr	r2, [r3, #32]
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800172c:	b109      	cbz	r1, 8001732 <RCC_APB1PeriphResetCmd+0xa>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 800172e:	4310      	orrs	r0, r2
 8001730:	e001      	b.n	8001736 <RCC_APB1PeriphResetCmd+0xe>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8001732:	ea22 0000 	bic.w	r0, r2, r0
 8001736:	6218      	str	r0, [r3, #32]
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	40023800 	.word	0x40023800

08001740 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001740:	4b04      	ldr	r3, [pc, #16]	; (8001754 <RCC_APB2PeriphResetCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8001742:	6a5a      	ldr	r2, [r3, #36]	; 0x24
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001744:	b109      	cbz	r1, 800174a <RCC_APB2PeriphResetCmd+0xa>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8001746:	4310      	orrs	r0, r2
 8001748:	e001      	b.n	800174e <RCC_APB2PeriphResetCmd+0xe>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 800174a:	ea22 0000 	bic.w	r0, r2, r0
 800174e:	6258      	str	r0, [r3, #36]	; 0x24
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	40023800 	.word	0x40023800

08001758 <RCC_AHB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8001758:	4b04      	ldr	r3, [pc, #16]	; (800176c <RCC_AHB1PeriphClockLPModeCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 800175a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800175c:	b109      	cbz	r1, 8001762 <RCC_AHB1PeriphClockLPModeCmd+0xa>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 800175e:	4310      	orrs	r0, r2
 8001760:	e001      	b.n	8001766 <RCC_AHB1PeriphClockLPModeCmd+0xe>
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
 8001762:	ea22 0000 	bic.w	r0, r2, r0
 8001766:	6518      	str	r0, [r3, #80]	; 0x50
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	40023800 	.word	0x40023800

08001770 <RCC_AHB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 8001770:	4b04      	ldr	r3, [pc, #16]	; (8001784 <RCC_AHB2PeriphClockLPModeCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 8001772:	6d5a      	ldr	r2, [r3, #84]	; 0x54
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001774:	b109      	cbz	r1, 800177a <RCC_AHB2PeriphClockLPModeCmd+0xa>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 8001776:	4310      	orrs	r0, r2
 8001778:	e001      	b.n	800177e <RCC_AHB2PeriphClockLPModeCmd+0xe>
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
 800177a:	ea22 0000 	bic.w	r0, r2, r0
 800177e:	6558      	str	r0, [r3, #84]	; 0x54
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	40023800 	.word	0x40023800

08001788 <RCC_AHB3PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 8001788:	4b04      	ldr	r3, [pc, #16]	; (800179c <RCC_AHB3PeriphClockLPModeCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 800178a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800178c:	b109      	cbz	r1, 8001792 <RCC_AHB3PeriphClockLPModeCmd+0xa>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 800178e:	4310      	orrs	r0, r2
 8001790:	e001      	b.n	8001796 <RCC_AHB3PeriphClockLPModeCmd+0xe>
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
 8001792:	ea22 0000 	bic.w	r0, r2, r0
 8001796:	6598      	str	r0, [r3, #88]	; 0x58
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	40023800 	.word	0x40023800

080017a0 <RCC_APB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80017a0:	4b04      	ldr	r3, [pc, #16]	; (80017b4 <RCC_APB1PeriphClockLPModeCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 80017a2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80017a4:	b109      	cbz	r1, 80017aa <RCC_APB1PeriphClockLPModeCmd+0xa>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 80017a6:	4310      	orrs	r0, r2
 80017a8:	e001      	b.n	80017ae <RCC_APB1PeriphClockLPModeCmd+0xe>
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
 80017aa:	ea22 0000 	bic.w	r0, r2, r0
 80017ae:	6618      	str	r0, [r3, #96]	; 0x60
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	40023800 	.word	0x40023800

080017b8 <RCC_APB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80017b8:	4b04      	ldr	r3, [pc, #16]	; (80017cc <RCC_APB2PeriphClockLPModeCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 80017ba:	6e5a      	ldr	r2, [r3, #100]	; 0x64
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80017bc:	b109      	cbz	r1, 80017c2 <RCC_APB2PeriphClockLPModeCmd+0xa>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 80017be:	4310      	orrs	r0, r2
 80017c0:	e001      	b.n	80017c6 <RCC_APB2PeriphClockLPModeCmd+0xe>
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
 80017c2:	ea22 0000 	bic.w	r0, r2, r0
 80017c6:	6658      	str	r0, [r3, #100]	; 0x64
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	40023800 	.word	0x40023800

080017d0 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
 80017d0:	4b04      	ldr	r3, [pc, #16]	; (80017e4 <RCC_ITConfig+0x14>)
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 80017d2:	781a      	ldrb	r2, [r3, #0]
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80017d4:	b109      	cbz	r1, 80017da <RCC_ITConfig+0xa>
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 80017d6:	4310      	orrs	r0, r2
 80017d8:	e001      	b.n	80017de <RCC_ITConfig+0xe>
  }
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 80017da:	ea22 0000 	bic.w	r0, r2, r0
 80017de:	7018      	strb	r0, [r3, #0]
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	4002380d 	.word	0x4002380d

080017e8 <RCC_GetFlagStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 80017e8:	0943      	lsrs	r3, r0, #5
  if (tmp == 1)               /* The flag to check is in CR register */
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	4a07      	ldr	r2, [pc, #28]	; (800180c <RCC_GetFlagStatus+0x24>)
 80017ee:	d101      	bne.n	80017f4 <RCC_GetFlagStatus+0xc>
  {
    statusreg = RCC->CR;
 80017f0:	6813      	ldr	r3, [r2, #0]
 80017f2:	e003      	b.n	80017fc <RCC_GetFlagStatus+0x14>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 80017f4:	2b02      	cmp	r3, #2
  {
    statusreg = RCC->BDCR;
 80017f6:	bf0c      	ite	eq
 80017f8:	6f13      	ldreq	r3, [r2, #112]	; 0x70
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 80017fa:	6f53      	ldrne	r3, [r2, #116]	; 0x74
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 80017fc:	f000 001f 	and.w	r0, r0, #31
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8001800:	fa33 f000 	lsrs.w	r0, r3, r0
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
}
 8001804:	f000 0001 	and.w	r0, r0, #1
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	40023800 	.word	0x40023800

08001810 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8001810:	b507      	push	{r0, r1, r2, lr}
  __IO uint32_t startupcounter = 0;
 8001812:	2300      	movs	r3, #0
 8001814:	9301      	str	r3, [sp, #4]
  ErrorStatus status = ERROR;
  FlagStatus hsestatus = RESET;
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 8001816:	2031      	movs	r0, #49	; 0x31
 8001818:	f7ff ffe6 	bl	80017e8 <RCC_GetFlagStatus>
    startupcounter++;
 800181c:	9b01      	ldr	r3, [sp, #4]
 800181e:	3301      	adds	r3, #1
 8001820:	9301      	str	r3, [sp, #4]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 8001822:	9b01      	ldr	r3, [sp, #4]
 8001824:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001828:	d001      	beq.n	800182e <RCC_WaitForHSEStartUp+0x1e>
 800182a:	2800      	cmp	r0, #0
 800182c:	d0f3      	beq.n	8001816 <RCC_WaitForHSEStartUp+0x6>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 800182e:	2031      	movs	r0, #49	; 0x31
 8001830:	f7ff ffda 	bl	80017e8 <RCC_GetFlagStatus>
  else
  {
    status = ERROR;
  }
  return (status);
}
 8001834:	3000      	adds	r0, #0
 8001836:	bf18      	it	ne
 8001838:	2001      	movne	r0, #1
 800183a:	bd0e      	pop	{r1, r2, r3, pc}

0800183c <RCC_ClearFlag>:
  * @retval None
  */
void RCC_ClearFlag(void)
{
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 800183c:	4b02      	ldr	r3, [pc, #8]	; (8001848 <RCC_ClearFlag+0xc>)
 800183e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001840:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001844:	675a      	str	r2, [r3, #116]	; 0x74
}
 8001846:	4770      	bx	lr
 8001848:	40023800 	.word	0x40023800

0800184c <RCC_GetITStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 800184c:	4b03      	ldr	r3, [pc, #12]	; (800185c <RCC_GetITStatus+0x10>)
 800184e:	68db      	ldr	r3, [r3, #12]
  {
    bitstatus = SET;
 8001850:	4218      	tst	r0, r3
  {
    bitstatus = RESET;
  }
  /* Return the RCC_IT status */
  return  bitstatus;
}
 8001852:	bf0c      	ite	eq
 8001854:	2000      	moveq	r0, #0
 8001856:	2001      	movne	r0, #1
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	40023800 	.word	0x40023800

08001860 <RCC_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 8001860:	4b01      	ldr	r3, [pc, #4]	; (8001868 <RCC_ClearITPendingBit+0x8>)
 8001862:	7018      	strb	r0, [r3, #0]
}
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	4002380e 	.word	0x4002380e

0800186c <SYSCFG_DeInit>:
  *   registers to their default reset values.
  * @param  None
  * @retval None
  */
void SYSCFG_DeInit(void)
{
 800186c:	b508      	push	{r3, lr}
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 800186e:	2101      	movs	r1, #1
 8001870:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001874:	f7ff ff64 	bl	8001740 <RCC_APB2PeriphResetCmd>
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, DISABLE);
 8001878:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800187c:	2100      	movs	r1, #0
}
 800187e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  * @retval None
  */
void SYSCFG_DeInit(void)
{
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, ENABLE);
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, DISABLE);
 8001882:	f7ff bf5d 	b.w	8001740 <RCC_APB2PeriphResetCmd>

08001886 <SYSCFG_MemoryRemapConfig>:
void SYSCFG_MemoryRemapConfig(uint8_t SYSCFG_MemoryRemap)
{
  /* Check the parameters */
  assert_param(IS_SYSCFG_MEMORY_REMAP_CONFING(SYSCFG_MemoryRemap));

  SYSCFG->MEMRMP = SYSCFG_MemoryRemap;
 8001886:	4b01      	ldr	r3, [pc, #4]	; (800188c <SYSCFG_MemoryRemapConfig+0x6>)
 8001888:	6018      	str	r0, [r3, #0]
}
 800188a:	4770      	bx	lr
 800188c:	40013800 	.word	0x40013800

08001890 <SYSCFG_EXTILineConfig>:

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8001890:	f001 0203 	and.w	r2, r1, #3
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8001894:	0889      	lsrs	r1, r1, #2
 8001896:	4b0a      	ldr	r3, [pc, #40]	; (80018c0 <SYSCFG_EXTILineConfig+0x30>)
 8001898:	3102      	adds	r1, #2
  *           This parameter can be EXTI_PinSourcex where x can be (0..15, except
  *           for EXTI_PortSourceGPIOI x can be (0..11).
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 800189a:	b530      	push	{r4, r5, lr}

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 800189c:	0092      	lsls	r2, r2, #2
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 800189e:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 80018a2:	240f      	movs	r4, #15
 80018a4:	4094      	lsls	r4, r2
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 80018a6:	ea25 0404 	bic.w	r4, r5, r4
 80018aa:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 80018ae:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
 80018b2:	fa10 f202 	lsls.w	r2, r0, r2
 80018b6:	4314      	orrs	r4, r2
 80018b8:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
}
 80018bc:	bd30      	pop	{r4, r5, pc}
 80018be:	bf00      	nop
 80018c0:	40013800 	.word	0x40013800

080018c4 <SYSCFG_ETH_MediaInterfaceConfig>:
  */
void SYSCFG_ETH_MediaInterfaceConfig(uint32_t SYSCFG_ETH_MediaInterface) 
{ 
  assert_param(IS_SYSCFG_ETH_MEDIA_INTERFACE(SYSCFG_ETH_MediaInterface)); 
  /* Configure MII_RMII selection bit */ 
  *(__IO uint32_t *) PMC_MII_RMII_SEL_BB = SYSCFG_ETH_MediaInterface; 
 80018c4:	4b01      	ldr	r3, [pc, #4]	; (80018cc <SYSCFG_ETH_MediaInterfaceConfig+0x8>)
 80018c6:	6018      	str	r0, [r3, #0]
}
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	422700dc 	.word	0x422700dc

080018d0 <SYSCFG_CompensationCellCmd>:
void SYSCFG_CompensationCellCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CMPCR_CMP_PD_BB = (uint32_t)NewState;
 80018d0:	4b01      	ldr	r3, [pc, #4]	; (80018d8 <SYSCFG_CompensationCellCmd+0x8>)
 80018d2:	6018      	str	r0, [r3, #0]
}
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	42270400 	.word	0x42270400

080018dc <SYSCFG_GetCompensationCellStatus>:
  */
FlagStatus SYSCFG_GetCompensationCellStatus(void)
{
  FlagStatus bitstatus = RESET;
    
  if ((SYSCFG->CMPCR & SYSCFG_CMPCR_READY ) != (uint32_t)RESET)
 80018dc:	4b02      	ldr	r3, [pc, #8]	; (80018e8 <SYSCFG_GetCompensationCellStatus+0xc>)
 80018de:	6a18      	ldr	r0, [r3, #32]
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 80018e0:	f3c0 2000 	ubfx	r0, r0, #8, #1
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	40013800 	.word	0x40013800

080018ec <TI1_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 80018ec:	b530      	push	{r4, r5, lr}
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 80018ee:	8c04      	ldrh	r4, [r0, #32]
 80018f0:	f024 0401 	bic.w	r4, r4, #1
 80018f4:	0424      	lsls	r4, r4, #16
 80018f6:	0c24      	lsrs	r4, r4, #16
 80018f8:	8404      	strh	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80018fa:	8b05      	ldrh	r5, [r0, #24]
  tmpccer = TIMx->CCER;
 80018fc:	8c04      	ldrh	r4, [r0, #32]
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;
 80018fe:	b2ad      	uxth	r5, r5
  tmpccer = TIMx->CCER;
 8001900:	b2a4      	uxth	r4, r4

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 8001902:	f025 05f3 	bic.w	r5, r5, #243	; 0xf3
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8001906:	4315      	orrs	r5, r2

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001908:	f024 040a 	bic.w	r4, r4, #10
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 800190c:	ea45 1503 	orr.w	r5, r5, r3, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8001910:	f044 0401 	orr.w	r4, r4, #1
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8001914:	b2ad      	uxth	r5, r5

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8001916:	430c      	orrs	r4, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001918:	8305      	strh	r5, [r0, #24]
  TIMx->CCER = tmpccer;
 800191a:	8404      	strh	r4, [r0, #32]
}
 800191c:	bd30      	pop	{r4, r5, pc}

0800191e <TI2_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 800191e:	b530      	push	{r4, r5, lr}
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8001920:	8c04      	ldrh	r4, [r0, #32]
 8001922:	f024 0410 	bic.w	r4, r4, #16
 8001926:	0424      	lsls	r4, r4, #16
 8001928:	0c24      	lsrs	r4, r4, #16
 800192a:	8404      	strh	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800192c:	8b04      	ldrh	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 800192e:	8c05      	ldrh	r5, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8001930:	f424 7440 	bic.w	r4, r4, #768	; 0x300
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
 8001934:	b2ad      	uxth	r5, r5
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8001936:	0524      	lsls	r4, r4, #20
 8001938:	0d24      	lsrs	r4, r4, #20
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800193a:	f025 05a0 	bic.w	r5, r5, #160	; 0xa0
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 800193e:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8001942:	f045 0510 	orr.w	r5, r5, #16
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8001946:	ea44 3403 	orr.w	r4, r4, r3, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 800194a:	ea45 1501 	orr.w	r5, r5, r1, lsl #4
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 800194e:	b2a4      	uxth	r4, r4

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8001950:	b2ad      	uxth	r5, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001952:	8304      	strh	r4, [r0, #24]
  TIMx->CCER = tmpccer;
 8001954:	8405      	strh	r5, [r0, #32]
}
 8001956:	bd30      	pop	{r4, r5, pc}

08001958 <TIM_DeInit>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval None

  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 8001958:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
 800195a:	4b47      	ldr	r3, [pc, #284]	; (8001a78 <TIM_DeInit+0x120>)
 800195c:	4298      	cmp	r0, r3
 800195e:	d105      	bne.n	800196c <TIM_DeInit+0x14>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 8001960:	2001      	movs	r0, #1
 8001962:	4601      	mov	r1, r0
 8001964:	f7ff feec 	bl	8001740 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 8001968:	2001      	movs	r0, #1
 800196a:	e03d      	b.n	80019e8 <TIM_DeInit+0x90>
  } 
  else if (TIMx == TIM2) 
 800196c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001970:	d105      	bne.n	800197e <TIM_DeInit+0x26>
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 8001972:	2001      	movs	r0, #1
 8001974:	4601      	mov	r1, r0
 8001976:	f7ff fed7 	bl	8001728 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 800197a:	2001      	movs	r0, #1
 800197c:	e076      	b.n	8001a6c <TIM_DeInit+0x114>
  }  
  else if (TIMx == TIM3)
 800197e:	4b3f      	ldr	r3, [pc, #252]	; (8001a7c <TIM_DeInit+0x124>)
 8001980:	4298      	cmp	r0, r3
 8001982:	d105      	bne.n	8001990 <TIM_DeInit+0x38>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 8001984:	2002      	movs	r0, #2
 8001986:	2101      	movs	r1, #1
 8001988:	f7ff fece 	bl	8001728 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 800198c:	2002      	movs	r0, #2
 800198e:	e06d      	b.n	8001a6c <TIM_DeInit+0x114>
  }  
  else if (TIMx == TIM4)
 8001990:	4b3b      	ldr	r3, [pc, #236]	; (8001a80 <TIM_DeInit+0x128>)
 8001992:	4298      	cmp	r0, r3
 8001994:	d105      	bne.n	80019a2 <TIM_DeInit+0x4a>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 8001996:	2004      	movs	r0, #4
 8001998:	2101      	movs	r1, #1
 800199a:	f7ff fec5 	bl	8001728 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 800199e:	2004      	movs	r0, #4
 80019a0:	e064      	b.n	8001a6c <TIM_DeInit+0x114>
  }  
  else if (TIMx == TIM5)
 80019a2:	4b38      	ldr	r3, [pc, #224]	; (8001a84 <TIM_DeInit+0x12c>)
 80019a4:	4298      	cmp	r0, r3
 80019a6:	d105      	bne.n	80019b4 <TIM_DeInit+0x5c>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 80019a8:	2008      	movs	r0, #8
 80019aa:	2101      	movs	r1, #1
 80019ac:	f7ff febc 	bl	8001728 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 80019b0:	2008      	movs	r0, #8
 80019b2:	e05b      	b.n	8001a6c <TIM_DeInit+0x114>
  }  
  else if (TIMx == TIM6)  
 80019b4:	4b34      	ldr	r3, [pc, #208]	; (8001a88 <TIM_DeInit+0x130>)
 80019b6:	4298      	cmp	r0, r3
 80019b8:	d105      	bne.n	80019c6 <TIM_DeInit+0x6e>
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 80019ba:	2010      	movs	r0, #16
 80019bc:	2101      	movs	r1, #1
 80019be:	f7ff feb3 	bl	8001728 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 80019c2:	2010      	movs	r0, #16
 80019c4:	e052      	b.n	8001a6c <TIM_DeInit+0x114>
  }  
  else if (TIMx == TIM7)
 80019c6:	4b31      	ldr	r3, [pc, #196]	; (8001a8c <TIM_DeInit+0x134>)
 80019c8:	4298      	cmp	r0, r3
 80019ca:	d105      	bne.n	80019d8 <TIM_DeInit+0x80>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 80019cc:	2020      	movs	r0, #32
 80019ce:	2101      	movs	r1, #1
 80019d0:	f7ff feaa 	bl	8001728 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 80019d4:	2020      	movs	r0, #32
 80019d6:	e049      	b.n	8001a6c <TIM_DeInit+0x114>
  }  
  else if (TIMx == TIM8)
 80019d8:	4b2d      	ldr	r3, [pc, #180]	; (8001a90 <TIM_DeInit+0x138>)
 80019da:	4298      	cmp	r0, r3
 80019dc:	d109      	bne.n	80019f2 <TIM_DeInit+0x9a>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 80019de:	2002      	movs	r0, #2
 80019e0:	2101      	movs	r1, #1
 80019e2:	f7ff fead 	bl	8001740 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 80019e6:	2002      	movs	r0, #2
 80019e8:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 80019ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
  }  
  else if (TIMx == TIM8)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 80019ee:	f7ff bea7 	b.w	8001740 <RCC_APB2PeriphResetCmd>
  }  
  else if (TIMx == TIM9)
 80019f2:	4b28      	ldr	r3, [pc, #160]	; (8001a94 <TIM_DeInit+0x13c>)
 80019f4:	4298      	cmp	r0, r3
 80019f6:	d107      	bne.n	8001a08 <TIM_DeInit+0xb0>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
 80019f8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80019fc:	2101      	movs	r1, #1
 80019fe:	f7ff fe9f 	bl	8001740 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 8001a02:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001a06:	e7ef      	b.n	80019e8 <TIM_DeInit+0x90>
   }  
  else if (TIMx == TIM10)
 8001a08:	4b23      	ldr	r3, [pc, #140]	; (8001a98 <TIM_DeInit+0x140>)
 8001a0a:	4298      	cmp	r0, r3
 8001a0c:	d107      	bne.n	8001a1e <TIM_DeInit+0xc6>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
 8001a0e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001a12:	2101      	movs	r1, #1
 8001a14:	f7ff fe94 	bl	8001740 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 8001a18:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001a1c:	e7e4      	b.n	80019e8 <TIM_DeInit+0x90>
  }  
  else if (TIMx == TIM11) 
 8001a1e:	4b1f      	ldr	r3, [pc, #124]	; (8001a9c <TIM_DeInit+0x144>)
 8001a20:	4298      	cmp	r0, r3
 8001a22:	d107      	bne.n	8001a34 <TIM_DeInit+0xdc>
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
 8001a24:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001a28:	2101      	movs	r1, #1
 8001a2a:	f7ff fe89 	bl	8001740 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 8001a2e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001a32:	e7d9      	b.n	80019e8 <TIM_DeInit+0x90>
  }  
  else if (TIMx == TIM12)
 8001a34:	4b1a      	ldr	r3, [pc, #104]	; (8001aa0 <TIM_DeInit+0x148>)
 8001a36:	4298      	cmp	r0, r3
 8001a38:	d105      	bne.n	8001a46 <TIM_DeInit+0xee>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
 8001a3a:	2040      	movs	r0, #64	; 0x40
 8001a3c:	2101      	movs	r1, #1
 8001a3e:	f7ff fe73 	bl	8001728 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 8001a42:	2040      	movs	r0, #64	; 0x40
 8001a44:	e012      	b.n	8001a6c <TIM_DeInit+0x114>
  }  
  else if (TIMx == TIM13) 
 8001a46:	4b17      	ldr	r3, [pc, #92]	; (8001aa4 <TIM_DeInit+0x14c>)
 8001a48:	4298      	cmp	r0, r3
 8001a4a:	d105      	bne.n	8001a58 <TIM_DeInit+0x100>
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
 8001a4c:	2080      	movs	r0, #128	; 0x80
 8001a4e:	2101      	movs	r1, #1
 8001a50:	f7ff fe6a 	bl	8001728 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 8001a54:	2080      	movs	r0, #128	; 0x80
 8001a56:	e009      	b.n	8001a6c <TIM_DeInit+0x114>
  }  
  else
  { 
    if (TIMx == TIM14) 
 8001a58:	4b13      	ldr	r3, [pc, #76]	; (8001aa8 <TIM_DeInit+0x150>)
 8001a5a:	4298      	cmp	r0, r3
 8001a5c:	d10b      	bne.n	8001a76 <TIM_DeInit+0x11e>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 8001a5e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001a62:	2101      	movs	r1, #1
 8001a64:	f7ff fe60 	bl	8001728 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 8001a68:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001a6c:	2100      	movs	r1, #0
    }   
  }
}
 8001a6e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  { 
    if (TIMx == TIM14) 
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 8001a72:	f7ff be59 	b.w	8001728 <RCC_APB1PeriphResetCmd>
 8001a76:	bd08      	pop	{r3, pc}
 8001a78:	40010000 	.word	0x40010000
 8001a7c:	40000400 	.word	0x40000400
 8001a80:	40000800 	.word	0x40000800
 8001a84:	40000c00 	.word	0x40000c00
 8001a88:	40001000 	.word	0x40001000
 8001a8c:	40001400 	.word	0x40001400
 8001a90:	40010400 	.word	0x40010400
 8001a94:	40014000 	.word	0x40014000
 8001a98:	40014400 	.word	0x40014400
 8001a9c:	40014800 	.word	0x40014800
 8001aa0:	40001800 	.word	0x40001800
 8001aa4:	40001c00 	.word	0x40001c00
 8001aa8:	40002000 	.word	0x40002000

08001aac <TIM_TimeBaseInit>:
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8001aac:	4a1c      	ldr	r2, [pc, #112]	; (8001b20 <TIM_TimeBaseInit+0x74>)
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8001aae:	8803      	ldrh	r3, [r0, #0]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8001ab0:	4290      	cmp	r0, r2
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8001ab2:	b29b      	uxth	r3, r3

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8001ab4:	d012      	beq.n	8001adc <TIM_TimeBaseInit+0x30>
 8001ab6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001aba:	4290      	cmp	r0, r2
 8001abc:	d00e      	beq.n	8001adc <TIM_TimeBaseInit+0x30>
 8001abe:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001ac2:	d00b      	beq.n	8001adc <TIM_TimeBaseInit+0x30>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8001ac4:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 8001ac8:	4290      	cmp	r0, r2
 8001aca:	d007      	beq.n	8001adc <TIM_TimeBaseInit+0x30>
 8001acc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001ad0:	4290      	cmp	r0, r2
 8001ad2:	d003      	beq.n	8001adc <TIM_TimeBaseInit+0x30>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8001ad4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001ad8:	4290      	cmp	r0, r2
 8001ada:	d103      	bne.n	8001ae4 <TIM_TimeBaseInit+0x38>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8001adc:	884a      	ldrh	r2, [r1, #2]
  if((TIMx == TIM1) || (TIMx == TIM8)||
     (TIMx == TIM2) || (TIMx == TIM3)||
     (TIMx == TIM4) || (TIMx == TIM5)) 
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8001ade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8001ae2:	4313      	orrs	r3, r2
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8001ae4:	4a0f      	ldr	r2, [pc, #60]	; (8001b24 <TIM_TimeBaseInit+0x78>)
 8001ae6:	4290      	cmp	r0, r2
 8001ae8:	d008      	beq.n	8001afc <TIM_TimeBaseInit+0x50>
 8001aea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001aee:	4290      	cmp	r0, r2
 8001af0:	d004      	beq.n	8001afc <TIM_TimeBaseInit+0x50>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8001af2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8001af6:	890a      	ldrh	r2, [r1, #8]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8001af8:	b29b      	uxth	r3, r3
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8001afa:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 8001afc:	8003      	strh	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8001afe:	684b      	ldr	r3, [r1, #4]
 8001b00:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8001b02:	880b      	ldrh	r3, [r1, #0]
 8001b04:	8503      	strh	r3, [r0, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8001b06:	4b06      	ldr	r3, [pc, #24]	; (8001b20 <TIM_TimeBaseInit+0x74>)
 8001b08:	4298      	cmp	r0, r3
 8001b0a:	d003      	beq.n	8001b14 <TIM_TimeBaseInit+0x68>
 8001b0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b10:	4298      	cmp	r0, r3
 8001b12:	d101      	bne.n	8001b18 <TIM_TimeBaseInit+0x6c>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8001b14:	7a8b      	ldrb	r3, [r1, #10]
 8001b16:	8603      	strh	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8001b18:	2301      	movs	r3, #1
 8001b1a:	8283      	strh	r3, [r0, #20]
}
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	40010000 	.word	0x40010000
 8001b24:	40001000 	.word	0x40001000

08001b28 <TIM_TimeBaseStructInit>:
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 8001b28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b2c:	6043      	str	r3, [r0, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	8003      	strh	r3, [r0, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 8001b32:	8103      	strh	r3, [r0, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 8001b34:	8043      	strh	r3, [r0, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 8001b36:	7283      	strb	r3, [r0, #10]
}
 8001b38:	4770      	bx	lr

08001b3a <TIM_PrescalerConfig>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
 8001b3a:	8501      	strh	r1, [r0, #40]	; 0x28
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
 8001b3c:	8282      	strh	r2, [r0, #20]
}
 8001b3e:	4770      	bx	lr

08001b40 <TIM_CounterModeConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));

  tmpcr1 = TIMx->CR1;
 8001b40:	8803      	ldrh	r3, [r0, #0]

  /* Reset the CMS and DIR Bits */
  tmpcr1 &= (uint16_t)~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b46:	041b      	lsls	r3, r3, #16
 8001b48:	0c1b      	lsrs	r3, r3, #16

  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
 8001b4a:	430b      	orrs	r3, r1

  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
 8001b4c:	8003      	strh	r3, [r0, #0]
}
 8001b4e:	4770      	bx	lr

08001b50 <TIM_SetCounter>:
{
  /* Check the parameters */
   assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 8001b50:	6241      	str	r1, [r0, #36]	; 0x24
}
 8001b52:	4770      	bx	lr

08001b54 <TIM_SetAutoreload>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 8001b54:	62c1      	str	r1, [r0, #44]	; 0x2c
}
 8001b56:	4770      	bx	lr

08001b58 <TIM_GetCounter>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Counter Register value */
  return TIMx->CNT;
 8001b58:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
 8001b5a:	4770      	bx	lr

08001b5c <TIM_GetPrescaler>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Prescaler Register value */
  return TIMx->PSC;
 8001b5c:	8d00      	ldrh	r0, [r0, #40]	; 0x28
}
 8001b5e:	b280      	uxth	r0, r0
 8001b60:	4770      	bx	lr

08001b62 <TIM_UpdateDisableConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 8001b62:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001b64:	b119      	cbz	r1, 8001b6e <TIM_UpdateDisableConfig+0xc>
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	f043 0302 	orr.w	r3, r3, #2
 8001b6c:	e003      	b.n	8001b76 <TIM_UpdateDisableConfig+0x14>
  }
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_UDIS;
 8001b6e:	f023 0302 	bic.w	r3, r3, #2
 8001b72:	041b      	lsls	r3, r3, #16
 8001b74:	0c1b      	lsrs	r3, r3, #16
 8001b76:	8003      	strh	r3, [r0, #0]
 8001b78:	4770      	bx	lr

08001b7a <TIM_UpdateRequestConfig>:
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 8001b7a:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
 8001b7c:	b119      	cbz	r1, 8001b86 <TIM_UpdateRequestConfig+0xc>
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	f043 0304 	orr.w	r3, r3, #4
 8001b84:	e003      	b.n	8001b8e <TIM_UpdateRequestConfig+0x14>
  }
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_URS;
 8001b86:	f023 0304 	bic.w	r3, r3, #4
 8001b8a:	041b      	lsls	r3, r3, #16
 8001b8c:	0c1b      	lsrs	r3, r3, #16
 8001b8e:	8003      	strh	r3, [r0, #0]
 8001b90:	4770      	bx	lr

08001b92 <TIM_ARRPreloadConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 8001b92:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001b94:	b119      	cbz	r1, 8001b9e <TIM_ARRPreloadConfig+0xc>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b9c:	e003      	b.n	8001ba6 <TIM_ARRPreloadConfig+0x14>
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 8001b9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ba2:	041b      	lsls	r3, r3, #16
 8001ba4:	0c1b      	lsrs	r3, r3, #16
 8001ba6:	8003      	strh	r3, [r0, #0]
 8001ba8:	4770      	bx	lr

08001baa <TIM_SelectOnePulseMode>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));

  /* Reset the OPM Bit */
  TIMx->CR1 &= (uint16_t)~TIM_CR1_OPM;
 8001baa:	8803      	ldrh	r3, [r0, #0]
 8001bac:	f023 0308 	bic.w	r3, r3, #8
 8001bb0:	041b      	lsls	r3, r3, #16
 8001bb2:	0c1b      	lsrs	r3, r3, #16
 8001bb4:	8003      	strh	r3, [r0, #0]

  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
 8001bb6:	8803      	ldrh	r3, [r0, #0]
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	430b      	orrs	r3, r1
 8001bbc:	8003      	strh	r3, [r0, #0]
}
 8001bbe:	4770      	bx	lr

08001bc0 <TIM_SetClockDivision>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));

  /* Reset the CKD Bits */
  TIMx->CR1 &= (uint16_t)(~TIM_CR1_CKD);
 8001bc0:	8803      	ldrh	r3, [r0, #0]
 8001bc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bc6:	041b      	lsls	r3, r3, #16
 8001bc8:	0c1b      	lsrs	r3, r3, #16
 8001bca:	8003      	strh	r3, [r0, #0]

  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
 8001bcc:	8803      	ldrh	r3, [r0, #0]
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	430b      	orrs	r3, r1
 8001bd2:	8003      	strh	r3, [r0, #0]
}
 8001bd4:	4770      	bx	lr

08001bd6 <TIM_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8001bd6:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001bd8:	b119      	cbz	r1, 8001be2 <TIM_Cmd+0xc>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	f043 0301 	orr.w	r3, r3, #1
 8001be0:	e003      	b.n	8001bea <TIM_Cmd+0x14>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8001be2:	f023 0301 	bic.w	r3, r3, #1
 8001be6:	041b      	lsls	r3, r3, #16
 8001be8:	0c1b      	lsrs	r3, r3, #16
 8001bea:	8003      	strh	r3, [r0, #0]
 8001bec:	4770      	bx	lr

08001bee <TIM_OC1Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8001bee:	8c03      	ldrh	r3, [r0, #32]
 8001bf0:	f023 0301 	bic.w	r3, r3, #1
 8001bf4:	041b      	lsls	r3, r3, #16
 8001bf6:	0c1b      	lsrs	r3, r3, #16
 8001bf8:	8403      	strh	r3, [r0, #32]
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8001bfa:	b570      	push	{r4, r5, r6, lr}

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001bfc:	8c03      	ldrh	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001bfe:	8884      	ldrh	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001c00:	8b02      	ldrh	r2, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8001c02:	880d      	ldrh	r5, [r1, #0]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8001c04:	884e      	ldrh	r6, [r1, #2]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 8001c06:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8001c0a:	0412      	lsls	r2, r2, #16
 8001c0c:	0c12      	lsrs	r2, r2, #16
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8001c0e:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8001c10:	898d      	ldrh	r5, [r1, #12]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 8001c12:	f023 0302 	bic.w	r3, r3, #2
 8001c16:	041b      	lsls	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8001c18:	4335      	orrs	r5, r6
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 8001c1a:	0c1b      	lsrs	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8001c1c:	b2ad      	uxth	r5, r5
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8001c1e:	432b      	orrs	r3, r5
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001c20:	4d0e      	ldr	r5, [pc, #56]	; (8001c5c <TIM_OC1Init+0x6e>)
 8001c22:	42a8      	cmp	r0, r5
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001c24:	b2a4      	uxth	r4, r4
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001c26:	d003      	beq.n	8001c30 <TIM_OC1Init+0x42>
 8001c28:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001c2c:	42a8      	cmp	r0, r5
 8001c2e:	d10e      	bne.n	8001c4e <TIM_OC1Init+0x60>
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8001c30:	89cd      	ldrh	r5, [r1, #14]
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 8001c32:	8a4e      	ldrh	r6, [r1, #18]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 8001c34:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8001c38:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8001c3a:	888d      	ldrh	r5, [r1, #4]
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 8001c3c:	f023 0304 	bic.w	r3, r3, #4
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8001c40:	432b      	orrs	r3, r5
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 8001c42:	8a0d      	ldrh	r5, [r1, #16]
 8001c44:	4335      	orrs	r5, r6
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 8001c46:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 8001c4a:	b2ad      	uxth	r5, r5
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8001c4c:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001c4e:	8084      	strh	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001c50:	8302      	strh	r2, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 8001c52:	688a      	ldr	r2, [r1, #8]
 8001c54:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001c56:	8403      	strh	r3, [r0, #32]
}
 8001c58:	bd70      	pop	{r4, r5, r6, pc}
 8001c5a:	bf00      	nop
 8001c5c:	40010000 	.word	0x40010000

08001c60 <TIM_OC2Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8001c60:	8c03      	ldrh	r3, [r0, #32]
 8001c62:	f023 0310 	bic.w	r3, r3, #16
 8001c66:	041b      	lsls	r3, r3, #16
 8001c68:	0c1b      	lsrs	r3, r3, #16
 8001c6a:	8403      	strh	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8001c6c:	8c03      	ldrh	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001c6e:	8882      	ldrh	r2, [r0, #4]
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8001c70:	b530      	push	{r4, r5, lr}
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001c72:	8b04      	ldrh	r4, [r0, #24]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8001c74:	880d      	ldrh	r5, [r1, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 8001c76:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
 8001c7a:	0424      	lsls	r4, r4, #16
 8001c7c:	0c24      	lsrs	r4, r4, #16
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 8001c7e:	f023 0320 	bic.w	r3, r3, #32
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8001c82:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 8001c86:	041b      	lsls	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 8001c88:	898d      	ldrh	r5, [r1, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 8001c8a:	0c1b      	lsrs	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 8001c8c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8001c90:	884d      	ldrh	r5, [r1, #2]
 8001c92:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001c96:	4d13      	ldr	r5, [pc, #76]	; (8001ce4 <TIM_OC2Init+0x84>)
 8001c98:	42a8      	cmp	r0, r5
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001c9a:	b292      	uxth	r2, r2
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8001c9c:	b2a4      	uxth	r4, r4
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8001c9e:	b29b      	uxth	r3, r3
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001ca0:	d003      	beq.n	8001caa <TIM_OC2Init+0x4a>
 8001ca2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001ca6:	42a8      	cmp	r0, r5
 8001ca8:	d115      	bne.n	8001cd6 <TIM_OC2Init+0x76>
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 8001caa:	89cd      	ldrh	r5, [r1, #14]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 8001cac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001cb0:	b29b      	uxth	r3, r3
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 8001cb2:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
 8001cb6:	f64f 75bf 	movw	r5, #65471	; 0xffbf
 8001cba:	401d      	ands	r5, r3
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8001cbc:	888b      	ldrh	r3, [r1, #4]
 8001cbe:	ea45 1303 	orr.w	r3, r5, r3, lsl #4
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 8001cc2:	8a0d      	ldrh	r5, [r1, #16]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
 8001cc4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 8001cc8:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8001ccc:	8a4d      	ldrh	r5, [r1, #18]
 8001cce:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8001cd2:	b29b      	uxth	r3, r3
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8001cd4:	b292      	uxth	r2, r2
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001cd6:	8082      	strh	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8001cd8:	688a      	ldr	r2, [r1, #8]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001cda:	8304      	strh	r4, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8001cdc:	6382      	str	r2, [r0, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001cde:	8403      	strh	r3, [r0, #32]
}
 8001ce0:	bd30      	pop	{r4, r5, pc}
 8001ce2:	bf00      	nop
 8001ce4:	40010000 	.word	0x40010000

08001ce8 <TIM_OC3Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8001ce8:	8c03      	ldrh	r3, [r0, #32]
 8001cea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001cee:	041b      	lsls	r3, r3, #16
 8001cf0:	0c1b      	lsrs	r3, r3, #16
 8001cf2:	8403      	strh	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001cf4:	8c03      	ldrh	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001cf6:	8882      	ldrh	r2, [r0, #4]
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8001cf8:	b530      	push	{r4, r5, lr}
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001cfa:	8b84      	ldrh	r4, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8001cfc:	880d      	ldrh	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 8001cfe:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 8001d02:	0424      	lsls	r4, r4, #16
 8001d04:	0c24      	lsrs	r4, r4, #16
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 8001d06:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001d0a:	041b      	lsls	r3, r3, #16
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8001d0c:	432c      	orrs	r4, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 8001d0e:	898d      	ldrh	r5, [r1, #12]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 8001d10:	0c1b      	lsrs	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 8001d12:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8001d16:	884d      	ldrh	r5, [r1, #2]
 8001d18:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001d1c:	4d12      	ldr	r5, [pc, #72]	; (8001d68 <TIM_OC3Init+0x80>)
 8001d1e:	42a8      	cmp	r0, r5
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001d20:	b292      	uxth	r2, r2
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8001d22:	b29b      	uxth	r3, r3
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001d24:	d003      	beq.n	8001d2e <TIM_OC3Init+0x46>
 8001d26:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001d2a:	42a8      	cmp	r0, r5
 8001d2c:	d115      	bne.n	8001d5a <TIM_OC3Init+0x72>
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8001d2e:	89cd      	ldrh	r5, [r1, #14]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 8001d30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001d34:	b29b      	uxth	r3, r3
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8001d36:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 8001d3a:	f64f 35ff 	movw	r5, #64511	; 0xfbff
 8001d3e:	401d      	ands	r5, r3
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8001d40:	888b      	ldrh	r3, [r1, #4]
 8001d42:	ea45 2303 	orr.w	r3, r5, r3, lsl #8
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8001d46:	8a0d      	ldrh	r5, [r1, #16]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 8001d48:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8001d4c:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8001d50:	8a4d      	ldrh	r5, [r1, #18]
 8001d52:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8001d56:	b29b      	uxth	r3, r3
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8001d58:	b292      	uxth	r2, r2
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001d5a:	8082      	strh	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8001d5c:	688a      	ldr	r2, [r1, #8]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001d5e:	8384      	strh	r4, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8001d60:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001d62:	8403      	strh	r3, [r0, #32]
}
 8001d64:	bd30      	pop	{r4, r5, pc}
 8001d66:	bf00      	nop
 8001d68:	40010000 	.word	0x40010000

08001d6c <TIM_OC4Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8001d6c:	8c03      	ldrh	r3, [r0, #32]
 8001d6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001d72:	041b      	lsls	r3, r3, #16
 8001d74:	0c1b      	lsrs	r3, r3, #16
 8001d76:	8403      	strh	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001d78:	8c03      	ldrh	r3, [r0, #32]
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8001d7a:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001d7c:	8884      	ldrh	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001d7e:	8b82      	ldrh	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8001d80:	880d      	ldrh	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 8001d82:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8001d86:	0412      	lsls	r2, r2, #16
 8001d88:	0c12      	lsrs	r2, r2, #16
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 8001d8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8001d8e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 8001d92:	041b      	lsls	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8001d94:	898d      	ldrh	r5, [r1, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 8001d96:	0c1b      	lsrs	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8001d98:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8001d9c:	884d      	ldrh	r5, [r1, #2]
 8001d9e:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001da2:	4d0b      	ldr	r5, [pc, #44]	; (8001dd0 <TIM_OC4Init+0x64>)
 8001da4:	42a8      	cmp	r0, r5
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001da6:	b2a4      	uxth	r4, r4
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8001da8:	b292      	uxth	r2, r2
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8001daa:	b29b      	uxth	r3, r3
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001dac:	d003      	beq.n	8001db6 <TIM_OC4Init+0x4a>
 8001dae:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001db2:	42a8      	cmp	r0, r5
 8001db4:	d105      	bne.n	8001dc2 <TIM_OC4Init+0x56>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8001db6:	8a0d      	ldrh	r5, [r1, #16]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 8001db8:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8001dbc:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8001dc0:	b2a4      	uxth	r4, r4
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001dc2:	8084      	strh	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8001dc4:	8382      	strh	r2, [r0, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8001dc6:	688a      	ldr	r2, [r1, #8]
 8001dc8:	6402      	str	r2, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001dca:	8403      	strh	r3, [r0, #32]
}
 8001dcc:	bd30      	pop	{r4, r5, pc}
 8001dce:	bf00      	nop
 8001dd0:	40010000 	.word	0x40010000

08001dd4 <TIM_OCStructInit>:
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	8003      	strh	r3, [r0, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 8001dd8:	8043      	strh	r3, [r0, #2]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 8001dda:	8083      	strh	r3, [r0, #4]
  TIM_OCInitStruct->TIM_Pulse = 0x00000000;
 8001ddc:	6083      	str	r3, [r0, #8]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 8001dde:	8183      	strh	r3, [r0, #12]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 8001de0:	81c3      	strh	r3, [r0, #14]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 8001de2:	8203      	strh	r3, [r0, #16]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 8001de4:	8243      	strh	r3, [r0, #18]
}
 8001de6:	4770      	bx	lr

08001de8 <TIM_SelectOCxM>:
  *            @arg TIM_ForcedAction_Active
  *            @arg TIM_ForcedAction_InActive
  * @retval None
  */
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
{
 8001de8:	b530      	push	{r4, r5, lr}
  tmp += CCMR_OFFSET;

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 8001dea:	8c05      	ldrh	r5, [r0, #32]
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
  tmp += CCMR_OFFSET;

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;
 8001dec:	2401      	movs	r4, #1

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 8001dee:	b2ad      	uxth	r5, r5
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
  tmp += CCMR_OFFSET;

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;
 8001df0:	408c      	lsls	r4, r1

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 8001df2:	ea25 0404 	bic.w	r4, r5, r4
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
  tmp += CCMR_OFFSET;
 8001df6:	f100 0318 	add.w	r3, r0, #24

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 8001dfa:	8404      	strh	r4, [r0, #32]

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 8001dfc:	b109      	cbz	r1, 8001e02 <TIM_SelectOCxM+0x1a>
 8001dfe:	2908      	cmp	r1, #8
 8001e00:	d107      	bne.n	8001e12 <TIM_SelectOCxM+0x2a>
  {
    tmp += (TIM_Channel>>1);
 8001e02:	0849      	lsrs	r1, r1, #1

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC13M_MASK;
 8001e04:	f64f 708f 	movw	r0, #65423	; 0xff8f
 8001e08:	58cc      	ldr	r4, [r1, r3]
 8001e0a:	4020      	ands	r0, r4
 8001e0c:	50c8      	str	r0, [r1, r3]
   
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
 8001e0e:	58c8      	ldr	r0, [r1, r3]
 8001e10:	e00a      	b.n	8001e28 <TIM_SelectOCxM+0x40>
  }
  else
  {
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
 8001e12:	3904      	subs	r1, #4
 8001e14:	f3c1 014e 	ubfx	r1, r1, #1, #15

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC24M_MASK;
 8001e18:	f648 70ff 	movw	r0, #36863	; 0x8fff
 8001e1c:	58cc      	ldr	r4, [r1, r3]
 8001e1e:	4020      	ands	r0, r4
 8001e20:	50c8      	str	r0, [r1, r3]
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 8001e22:	0212      	lsls	r2, r2, #8
 8001e24:	58c8      	ldr	r0, [r1, r3]
 8001e26:	b292      	uxth	r2, r2
 8001e28:	4302      	orrs	r2, r0
 8001e2a:	50ca      	str	r2, [r1, r3]
 8001e2c:	bd30      	pop	{r4, r5, pc}

08001e2e <TIM_SetCompare1>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 8001e2e:	6341      	str	r1, [r0, #52]	; 0x34
}
 8001e30:	4770      	bx	lr

08001e32 <TIM_SetCompare2>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 8001e32:	6381      	str	r1, [r0, #56]	; 0x38
}
 8001e34:	4770      	bx	lr

08001e36 <TIM_SetCompare3>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 8001e36:	63c1      	str	r1, [r0, #60]	; 0x3c
}
 8001e38:	4770      	bx	lr

08001e3a <TIM_SetCompare4>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
 8001e3a:	6401      	str	r1, [r0, #64]	; 0x40
}
 8001e3c:	4770      	bx	lr

08001e3e <TIM_ForcedOC1Config>:
  uint16_t tmpccmr1 = 0;

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 8001e3e:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1M;
 8001e40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e44:	041b      	lsls	r3, r3, #16
 8001e46:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
 8001e48:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8001e4a:	8303      	strh	r3, [r0, #24]
}
 8001e4c:	4770      	bx	lr

08001e4e <TIM_ForcedOC2Config>:
  uint16_t tmpccmr1 = 0;

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 8001e4e:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2M;
 8001e50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e54:	041b      	lsls	r3, r3, #16
 8001e56:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
 8001e58:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001e5c:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8001e5e:	8303      	strh	r3, [r0, #24]
}
 8001e60:	4770      	bx	lr

08001e62 <TIM_ForcedOC3Config>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));

  tmpccmr2 = TIMx->CCMR2;
 8001e62:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC1M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3M;
 8001e64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e68:	041b      	lsls	r3, r3, #16
 8001e6a:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
 8001e6c:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8001e6e:	8383      	strh	r3, [r0, #28]
}
 8001e70:	4770      	bx	lr

08001e72 <TIM_ForcedOC4Config>:
  uint16_t tmpccmr2 = 0;

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
 8001e72:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC2M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4M;
 8001e74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e78:	041b      	lsls	r3, r3, #16
 8001e7a:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
 8001e7c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001e80:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8001e82:	8383      	strh	r3, [r0, #28]
}
 8001e84:	4770      	bx	lr

08001e86 <TIM_OC1PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8001e86:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC1PE);
 8001e88:	f023 0308 	bic.w	r3, r3, #8
 8001e8c:	041b      	lsls	r3, r3, #16
 8001e8e:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 8001e90:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8001e92:	8303      	strh	r3, [r0, #24]
}
 8001e94:	4770      	bx	lr

08001e96 <TIM_OC2PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8001e96:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2PE);
 8001e98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001e9c:	041b      	lsls	r3, r3, #16
 8001e9e:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 8001ea0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001ea4:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8001ea6:	8303      	strh	r3, [r0, #24]
}
 8001ea8:	4770      	bx	lr

08001eaa <TIM_OC3PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8001eaa:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 8001eac:	f023 0308 	bic.w	r3, r3, #8
 8001eb0:	041b      	lsls	r3, r3, #16
 8001eb2:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 8001eb4:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8001eb6:	8383      	strh	r3, [r0, #28]
}
 8001eb8:	4770      	bx	lr

08001eba <TIM_OC4PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8001eba:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
 8001ebc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001ec0:	041b      	lsls	r3, r3, #16
 8001ec2:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 8001ec4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001ec8:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8001eca:	8383      	strh	r3, [r0, #28]
}
 8001ecc:	4770      	bx	lr

08001ece <TIM_OC1FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8001ece:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1FE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1FE;
 8001ed0:	f023 0304 	bic.w	r3, r3, #4
 8001ed4:	041b      	lsls	r3, r3, #16
 8001ed6:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
 8001ed8:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8001eda:	8303      	strh	r3, [r0, #24]
}
 8001edc:	4770      	bx	lr

08001ede <TIM_OC2FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8001ede:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2FE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2FE);
 8001ee0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001ee4:	041b      	lsls	r3, r3, #16
 8001ee6:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
 8001ee8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001eec:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8001eee:	8303      	strh	r3, [r0, #24]
}
 8001ef0:	4770      	bx	lr

08001ef2 <TIM_OC3FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 8001ef2:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC3FE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3FE;
 8001ef4:	f023 0304 	bic.w	r3, r3, #4
 8001ef8:	041b      	lsls	r3, r3, #16
 8001efa:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
 8001efc:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 8001efe:	8383      	strh	r3, [r0, #28]
}
 8001f00:	4770      	bx	lr

08001f02 <TIM_OC4FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 8001f02:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC4FE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4FE);
 8001f04:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001f08:	041b      	lsls	r3, r3, #16
 8001f0a:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
 8001f0c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001f10:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 8001f12:	8383      	strh	r3, [r0, #28]
}
 8001f14:	4770      	bx	lr

08001f16 <TIM_ClearOC1Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 8001f16:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1CE;
 8001f18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f1c:	041b      	lsls	r3, r3, #16
 8001f1e:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
 8001f20:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8001f22:	8303      	strh	r3, [r0, #24]
}
 8001f24:	4770      	bx	lr

08001f26 <TIM_ClearOC2Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 8001f26:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2CE;

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
 8001f28:	0209      	lsls	r1, r1, #8
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;

  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2CE;
 8001f2a:	045b      	lsls	r3, r3, #17

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
 8001f2c:	ea41 4353 	orr.w	r3, r1, r3, lsr #17
 8001f30:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8001f32:	8303      	strh	r3, [r0, #24]
}
 8001f34:	4770      	bx	lr

08001f36 <TIM_ClearOC3Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 8001f36:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC3CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3CE;
 8001f38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f3c:	041b      	lsls	r3, r3, #16
 8001f3e:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
 8001f40:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8001f42:	8383      	strh	r3, [r0, #28]
}
 8001f44:	4770      	bx	lr

08001f46 <TIM_ClearOC4Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 8001f46:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4CE;

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
 8001f48:	0209      	lsls	r1, r1, #8
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;

  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4CE;
 8001f4a:	045b      	lsls	r3, r3, #17

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
 8001f4c:	ea41 4353 	orr.w	r3, r1, r3, lsr #17
 8001f50:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8001f52:	8383      	strh	r3, [r0, #28]
}
 8001f54:	4770      	bx	lr

08001f56 <TIM_OC1PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8001f56:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC1P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC1P);
 8001f58:	f023 0302 	bic.w	r3, r3, #2
 8001f5c:	041b      	lsls	r3, r3, #16
 8001f5e:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= TIM_OCPolarity;
 8001f60:	430b      	orrs	r3, r1

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8001f62:	8403      	strh	r3, [r0, #32]
}
 8001f64:	4770      	bx	lr

08001f66 <TIM_OC1NPolarityConfig>:
  uint16_t tmpccer = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
 8001f66:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC1NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 8001f68:	f023 0308 	bic.w	r3, r3, #8
 8001f6c:	041b      	lsls	r3, r3, #16
 8001f6e:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= TIM_OCNPolarity;
 8001f70:	430b      	orrs	r3, r1

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8001f72:	8403      	strh	r3, [r0, #32]
}
 8001f74:	4770      	bx	lr

08001f76 <TIM_OC2PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8001f76:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC2P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC2P);
 8001f78:	f023 0320 	bic.w	r3, r3, #32
 8001f7c:	041b      	lsls	r3, r3, #16
 8001f7e:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
 8001f80:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8001f84:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8001f86:	8403      	strh	r3, [r0, #32]
}
 8001f88:	4770      	bx	lr

08001f8a <TIM_OC2NPolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
 8001f8a:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC2NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 8001f8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f90:	041b      	lsls	r3, r3, #16
 8001f92:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
 8001f94:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8001f98:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8001f9a:	8403      	strh	r3, [r0, #32]
}
 8001f9c:	4770      	bx	lr

08001f9e <TIM_OC3PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8001f9e:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC3P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 8001fa0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001fa4:	041b      	lsls	r3, r3, #16
 8001fa6:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
 8001fa8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001fac:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8001fae:	8403      	strh	r3, [r0, #32]
}
 8001fb0:	4770      	bx	lr

08001fb2 <TIM_OC3NPolarityConfig>:
 
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
 8001fb2:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC3NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 8001fb4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001fb8:	041b      	lsls	r3, r3, #16
 8001fba:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
 8001fbc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001fc0:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8001fc2:	8403      	strh	r3, [r0, #32]
}
 8001fc4:	4770      	bx	lr

08001fc6 <TIM_OC4PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8001fc6:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC4P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 8001fc8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001fcc:	041b      	lsls	r3, r3, #16
 8001fce:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
 8001fd0:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 8001fd4:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8001fd6:	8403      	strh	r3, [r0, #32]
}
 8001fd8:	4770      	bx	lr

08001fda <TIM_CCxCmd>:
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
 8001fda:	b510      	push	{r4, lr}
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 8001fdc:	8c04      	ldrh	r4, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	408b      	lsls	r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 8001fe2:	b2a4      	uxth	r4, r4
 8001fe4:	ea24 0303 	bic.w	r3, r4, r3
 8001fe8:	8403      	strh	r3, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
 8001fea:	8c03      	ldrh	r3, [r0, #32]
 8001fec:	fa12 f101 	lsls.w	r1, r2, r1
 8001ff0:	430b      	orrs	r3, r1
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	8403      	strh	r3, [r0, #32]
}
 8001ff6:	bd10      	pop	{r4, pc}

08001ff8 <TIM_CCxNCmd>:
  * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
  * @retval None
  */
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
{
 8001ff8:	b510      	push	{r4, lr}
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_SET << TIM_Channel;

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 8001ffa:	8c04      	ldrh	r4, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_SET << TIM_Channel;
 8001ffc:	2304      	movs	r3, #4
 8001ffe:	408b      	lsls	r3, r1

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 8002000:	b2a4      	uxth	r4, r4
 8002002:	ea24 0303 	bic.w	r3, r4, r3
 8002006:	8403      	strh	r3, [r0, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
 8002008:	8c03      	ldrh	r3, [r0, #32]
 800200a:	fa12 f101 	lsls.w	r1, r2, r1
 800200e:	430b      	orrs	r3, r1
 8002010:	b29b      	uxth	r3, r3
 8002012:	8403      	strh	r3, [r0, #32]
}
 8002014:	bd10      	pop	{r4, pc}

08002016 <TIM_ICStructInit>:
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 8002016:	2300      	movs	r3, #0
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 8002018:	2201      	movs	r2, #1
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 800201a:	8003      	strh	r3, [r0, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 800201c:	8043      	strh	r3, [r0, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 800201e:	8082      	strh	r2, [r0, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 8002020:	80c3      	strh	r3, [r0, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
 8002022:	8103      	strh	r3, [r0, #8]
}
 8002024:	4770      	bx	lr

08002026 <TIM_GetCapture1>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 8002026:	6b40      	ldr	r0, [r0, #52]	; 0x34
}
 8002028:	4770      	bx	lr

0800202a <TIM_GetCapture2>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 800202a:	6b80      	ldr	r0, [r0, #56]	; 0x38
}
 800202c:	4770      	bx	lr

0800202e <TIM_GetCapture3>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 

  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
 800202e:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
}
 8002030:	4770      	bx	lr

08002032 <TIM_GetCapture4>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
 8002032:	6c00      	ldr	r0, [r0, #64]	; 0x40
}
 8002034:	4770      	bx	lr

08002036 <TIM_SetIC1Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
 8002036:	8b03      	ldrh	r3, [r0, #24]
 8002038:	f023 030c 	bic.w	r3, r3, #12
 800203c:	041b      	lsls	r3, r3, #16
 800203e:	0c1b      	lsrs	r3, r3, #16
 8002040:	8303      	strh	r3, [r0, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8002042:	8b03      	ldrh	r3, [r0, #24]
 8002044:	b29b      	uxth	r3, r3
 8002046:	430b      	orrs	r3, r1
 8002048:	8303      	strh	r3, [r0, #24]
}
 800204a:	4770      	bx	lr

0800204c <TIM_SetIC2Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
 800204c:	8b03      	ldrh	r3, [r0, #24]
 800204e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002052:	041b      	lsls	r3, r3, #16
 8002054:	0c1b      	lsrs	r3, r3, #16
 8002056:	8303      	strh	r3, [r0, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8002058:	8b03      	ldrh	r3, [r0, #24]
 800205a:	b29b      	uxth	r3, r3
 800205c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002060:	b29b      	uxth	r3, r3
 8002062:	8303      	strh	r3, [r0, #24]
}
 8002064:	4770      	bx	lr

08002066 <TIM_PWMIConfig>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8002066:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002068:	460c      	mov	r4, r1

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 800206a:	8849      	ldrh	r1, [r1, #2]
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 800206c:	88a2      	ldrh	r2, [r4, #4]
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 800206e:	f8b4 e000 	ldrh.w	lr, [r4]
 8002072:	8923      	ldrh	r3, [r4, #8]
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8002074:	4605      	mov	r5, r0
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
 8002076:	2900      	cmp	r1, #0
 8002078:	bf0c      	ite	eq
 800207a:	2702      	moveq	r7, #2
 800207c:	2700      	movne	r7, #0
    icoppositepolarity = TIM_ICPolarity_Rising;
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
 800207e:	2a01      	cmp	r2, #1
 8002080:	bf14      	ite	ne
 8002082:	2601      	movne	r6, #1
 8002084:	2602      	moveq	r6, #2
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8002086:	f1be 0f00 	cmp.w	lr, #0
 800208a:	d110      	bne.n	80020ae <TIM_PWMIConfig+0x48>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 800208c:	f7ff fc2e 	bl	80018ec <TI1_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002090:	4628      	mov	r0, r5
 8002092:	88e1      	ldrh	r1, [r4, #6]
 8002094:	f7ff ffcf 	bl	8002036 <TIM_SetIC1Prescaler>
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 8002098:	4628      	mov	r0, r5
 800209a:	4639      	mov	r1, r7
 800209c:	4632      	mov	r2, r6
 800209e:	8923      	ldrh	r3, [r4, #8]
 80020a0:	f7ff fc3d 	bl	800191e <TI2_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80020a4:	88e1      	ldrh	r1, [r4, #6]
 80020a6:	4628      	mov	r0, r5
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 80020a8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80020ac:	e7ce      	b.n	800204c <TIM_SetIC2Prescaler>
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 80020ae:	f7ff fc36 	bl	800191e <TI2_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80020b2:	4628      	mov	r0, r5
 80020b4:	88e1      	ldrh	r1, [r4, #6]
 80020b6:	f7ff ffc9 	bl	800204c <TIM_SetIC2Prescaler>
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 80020ba:	4628      	mov	r0, r5
 80020bc:	4639      	mov	r1, r7
 80020be:	4632      	mov	r2, r6
 80020c0:	8923      	ldrh	r3, [r4, #8]
 80020c2:	f7ff fc13 	bl	80018ec <TI1_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80020c6:	88e1      	ldrh	r1, [r4, #6]
 80020c8:	4628      	mov	r0, r5
  }
}
 80020ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80020ce:	e7b2      	b.n	8002036 <TIM_SetIC1Prescaler>

080020d0 <TIM_SetIC3Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC3PSC;
 80020d0:	8b83      	ldrh	r3, [r0, #28]
 80020d2:	f023 030c 	bic.w	r3, r3, #12
 80020d6:	041b      	lsls	r3, r3, #16
 80020d8:	0c1b      	lsrs	r3, r3, #16
 80020da:	8383      	strh	r3, [r0, #28]

  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 80020dc:	8b83      	ldrh	r3, [r0, #28]
 80020de:	b29b      	uxth	r3, r3
 80020e0:	430b      	orrs	r3, r1
 80020e2:	8383      	strh	r3, [r0, #28]
}
 80020e4:	4770      	bx	lr

080020e6 <TIM_SetIC4Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC4PSC;
 80020e6:	8b83      	ldrh	r3, [r0, #28]
 80020e8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80020ec:	041b      	lsls	r3, r3, #16
 80020ee:	0c1b      	lsrs	r3, r3, #16
 80020f0:	8383      	strh	r3, [r0, #28]

  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 80020f2:	8b83      	ldrh	r3, [r0, #28]
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	8383      	strh	r3, [r0, #28]
}
 80020fe:	4770      	bx	lr

08002100 <TIM_ICInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8002100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002102:	460d      	mov	r5, r1
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8002104:	880b      	ldrh	r3, [r1, #0]
 8002106:	88aa      	ldrh	r2, [r5, #4]
 8002108:	8849      	ldrh	r1, [r1, #2]
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 800210a:	4604      	mov	r4, r0
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 800210c:	b93b      	cbnz	r3, 800211e <TIM_ICInit+0x1e>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800210e:	892b      	ldrh	r3, [r5, #8]
 8002110:	f7ff fbec 	bl	80018ec <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002114:	88e9      	ldrh	r1, [r5, #6]
 8002116:	4620      	mov	r0, r4
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8002118:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800211c:	e78b      	b.n	8002036 <TIM_SetIC1Prescaler>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 800211e:	2b04      	cmp	r3, #4
 8002120:	d107      	bne.n	8002132 <TIM_ICInit+0x32>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_LIST2_PERIPH(TIMx));
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8002122:	892b      	ldrh	r3, [r5, #8]
 8002124:	f7ff fbfb 	bl	800191e <TI2_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002128:	88e9      	ldrh	r1, [r5, #6]
 800212a:	4620      	mov	r0, r4
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 800212c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    assert_param(IS_TIM_LIST2_PERIPH(TIMx));
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002130:	e78c      	b.n	800204c <TIM_SetIC2Prescaler>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 8002132:	2b08      	cmp	r3, #8
 8002134:	f8b5 c008 	ldrh.w	ip, [r5, #8]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8002138:	8c07      	ldrh	r7, [r0, #32]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 800213a:	d11d      	bne.n	8002178 <TIM_ICInit+0x78>
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 800213c:	f427 7780 	bic.w	r7, r7, #256	; 0x100
 8002140:	043f      	lsls	r7, r7, #16
 8002142:	0c3f      	lsrs	r7, r7, #16
 8002144:	8407      	strh	r7, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002146:	8b86      	ldrh	r6, [r0, #28]
  tmpccer = TIMx->CCER;
 8002148:	8c03      	ldrh	r3, [r0, #32]
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
  tmpccmr2 = TIMx->CCMR2;
 800214a:	b2b6      	uxth	r6, r6
  tmpccer = TIMx->CCER;
 800214c:	b29b      	uxth	r3, r3
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
 800214e:	f026 06f3 	bic.w	r6, r6, #243	; 0xf3
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002152:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002156:	ea46 1c0c 	orr.w	ip, r6, ip, lsl #4

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 800215a:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 800215e:	fa1f fc8c 	uxth.w	ip, ip

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 8002162:	b289      	uxth	r1, r1
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002164:	ea4c 0202 	orr.w	r2, ip, r2

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 8002168:	f441 7180 	orr.w	r1, r1, #256	; 0x100

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800216c:	8382      	strh	r2, [r0, #28]
  TIMx->CCER = tmpccer;
 800216e:	8401      	strh	r1, [r0, #32]
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002170:	88e9      	ldrh	r1, [r5, #6]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8002172:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002176:	e7ab      	b.n	80020d0 <TIM_SetIC3Prescaler>
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8002178:	f427 5780 	bic.w	r7, r7, #4096	; 0x1000
 800217c:	043f      	lsls	r7, r7, #16
 800217e:	0c3f      	lsrs	r7, r7, #16
 8002180:	8407      	strh	r7, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002182:	8b86      	ldrh	r6, [r0, #28]
  tmpccer = TIMx->CCER;
 8002184:	8c03      	ldrh	r3, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8002186:	f426 7640 	bic.w	r6, r6, #768	; 0x300
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800218a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 800218e:	0536      	lsls	r6, r6, #20
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002190:	045b      	lsls	r3, r3, #17
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8002192:	0d36      	lsrs	r6, r6, #20
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002194:	0c5b      	lsrs	r3, r3, #17
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 8002196:	ea46 2202 	orr.w	r2, r6, r2, lsl #8
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 800219a:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 800219e:	ea42 320c 	orr.w	r2, r2, ip, lsl #12

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 80021a2:	b29b      	uxth	r3, r3
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80021a4:	88e9      	ldrh	r1, [r5, #6]
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 80021a6:	b292      	uxth	r2, r2

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 80021a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80021ac:	8382      	strh	r2, [r0, #28]
  TIMx->CCER = tmpccer ;
 80021ae:	8403      	strh	r3, [r0, #32]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 80021b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80021b4:	e797      	b.n	80020e6 <TIM_SetIC4Prescaler>

080021b6 <TIM_BDTRConfig>:
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 80021b6:	884a      	ldrh	r2, [r1, #2]
 80021b8:	880b      	ldrh	r3, [r1, #0]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	888a      	ldrh	r2, [r1, #4]
 80021be:	4313      	orrs	r3, r2
 80021c0:	88ca      	ldrh	r2, [r1, #6]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	890a      	ldrh	r2, [r1, #8]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	894a      	ldrh	r2, [r1, #10]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	898a      	ldrh	r2, [r1, #12]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
}
 80021d6:	4770      	bx	lr

080021d8 <TIM_BDTRStructInit>:
  * @retval None
  */
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
 80021d8:	2300      	movs	r3, #0
 80021da:	8003      	strh	r3, [r0, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
 80021dc:	8043      	strh	r3, [r0, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 80021de:	8083      	strh	r3, [r0, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
 80021e0:	80c3      	strh	r3, [r0, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
 80021e2:	8103      	strh	r3, [r0, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
 80021e4:	8143      	strh	r3, [r0, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 80021e6:	8183      	strh	r3, [r0, #12]
}
 80021e8:	4770      	bx	lr

080021ea <TIM_CtrlPWMOutputs>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 80021ea:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80021ee:	b129      	cbz	r1, 80021fc <TIM_CtrlPWMOutputs+0x12>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 80021f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	e001      	b.n	8002200 <TIM_CtrlPWMOutputs+0x16>
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
 80021fc:	045b      	lsls	r3, r3, #17
 80021fe:	0c5b      	lsrs	r3, r3, #17
 8002200:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 8002204:	4770      	bx	lr

08002206 <TIM_SelectCOM>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 8002206:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002208:	b119      	cbz	r1, 8002212 <TIM_SelectCOM+0xc>
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 800220a:	b29b      	uxth	r3, r3
 800220c:	f043 0304 	orr.w	r3, r3, #4
 8002210:	e003      	b.n	800221a <TIM_SelectCOM+0x14>
  }
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCUS;
 8002212:	f023 0304 	bic.w	r3, r3, #4
 8002216:	041b      	lsls	r3, r3, #16
 8002218:	0c1b      	lsrs	r3, r3, #16
 800221a:	8083      	strh	r3, [r0, #4]
 800221c:	4770      	bx	lr

0800221e <TIM_CCPreloadControl>:
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 800221e:	8883      	ldrh	r3, [r0, #4]
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002220:	b119      	cbz	r1, 800222a <TIM_CCPreloadControl+0xc>
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 8002222:	b29b      	uxth	r3, r3
 8002224:	f043 0301 	orr.w	r3, r3, #1
 8002228:	e003      	b.n	8002232 <TIM_CCPreloadControl+0x14>
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCPC;
 800222a:	f023 0301 	bic.w	r3, r3, #1
 800222e:	041b      	lsls	r3, r3, #16
 8002230:	0c1b      	lsrs	r3, r3, #16
 8002232:	8083      	strh	r3, [r0, #4]
 8002234:	4770      	bx	lr

08002236 <TIM_ITConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8002236:	8983      	ldrh	r3, [r0, #12]
 8002238:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800223a:	b10a      	cbz	r2, 8002240 <TIM_ITConfig+0xa>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 800223c:	4319      	orrs	r1, r3
 800223e:	e001      	b.n	8002244 <TIM_ITConfig+0xe>
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8002240:	ea23 0101 	bic.w	r1, r3, r1
 8002244:	8181      	strh	r1, [r0, #12]
 8002246:	4770      	bx	lr

08002248 <TIM_GenerateEvent>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
 
  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
 8002248:	8281      	strh	r1, [r0, #20]
}
 800224a:	4770      	bx	lr

0800224c <TIM_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));

  
  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
 800224c:	8a03      	ldrh	r3, [r0, #16]
  {
    bitstatus = SET;
 800224e:	4219      	tst	r1, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8002250:	bf0c      	ite	eq
 8002252:	2000      	moveq	r0, #0
 8002254:	2001      	movne	r0, #1
 8002256:	4770      	bx	lr

08002258 <TIM_ClearFlag>:
{  
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
 8002258:	43c9      	mvns	r1, r1
 800225a:	b289      	uxth	r1, r1
 800225c:	8201      	strh	r1, [r0, #16]
}
 800225e:	4770      	bx	lr

08002260 <TIM_GetITStatus>:
  uint16_t itstatus = 0x0, itenable = 0x0;
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8002260:	8a03      	ldrh	r3, [r0, #16]
  
  itenable = TIMx->DIER & TIM_IT;
 8002262:	8982      	ldrh	r2, [r0, #12]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8002264:	ea11 0003 	ands.w	r0, r1, r3
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
  
  itenable = TIMx->DIER & TIM_IT;
 8002268:	b292      	uxth	r2, r2
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 800226a:	d003      	beq.n	8002274 <TIM_GetITStatus+0x14>
  {
    bitstatus = SET;
 800226c:	4211      	tst	r1, r2
 800226e:	bf0c      	ite	eq
 8002270:	2000      	moveq	r0, #0
 8002272:	2001      	movne	r0, #1
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8002274:	4770      	bx	lr

08002276 <TIM_ClearITPendingBit>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8002276:	43c9      	mvns	r1, r1
 8002278:	b289      	uxth	r1, r1
 800227a:	8201      	strh	r1, [r0, #16]
}
 800227c:	4770      	bx	lr

0800227e <TIM_DMAConfig>:
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase)); 
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));

  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
 800227e:	430a      	orrs	r2, r1
 8002280:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
}
 8002284:	4770      	bx	lr

08002286 <TIM_DMACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 8002286:	8983      	ldrh	r3, [r0, #12]
 8002288:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx)); 
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800228a:	b10a      	cbz	r2, 8002290 <TIM_DMACmd+0xa>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 800228c:	4319      	orrs	r1, r3
 800228e:	e001      	b.n	8002294 <TIM_DMACmd+0xe>
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 8002290:	ea23 0101 	bic.w	r1, r3, r1
 8002294:	8181      	strh	r1, [r0, #12]
 8002296:	4770      	bx	lr

08002298 <TIM_SelectCCDMA>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 8002298:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800229a:	b119      	cbz	r1, 80022a4 <TIM_SelectCCDMA+0xc>
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 800229c:	b29b      	uxth	r3, r3
 800229e:	f043 0308 	orr.w	r3, r3, #8
 80022a2:	e003      	b.n	80022ac <TIM_SelectCCDMA+0x14>
  }
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCDS;
 80022a4:	f023 0308 	bic.w	r3, r3, #8
 80022a8:	041b      	lsls	r3, r3, #16
 80022aa:	0c1b      	lsrs	r3, r3, #16
 80022ac:	8083      	strh	r3, [r0, #4]
 80022ae:	4770      	bx	lr

080022b0 <TIM_InternalClockConfig>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  (uint16_t)~TIM_SMCR_SMS;
 80022b0:	8903      	ldrh	r3, [r0, #8]
 80022b2:	f023 0307 	bic.w	r3, r3, #7
 80022b6:	041b      	lsls	r3, r3, #16
 80022b8:	0c1b      	lsrs	r3, r3, #16
 80022ba:	8103      	strh	r3, [r0, #8]
}
 80022bc:	4770      	bx	lr

080022be <TIM_ITRxExternalClockConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80022be:	8903      	ldrh	r3, [r0, #8]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 80022c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022c4:	041b      	lsls	r3, r3, #16
 80022c6:	0c1b      	lsrs	r3, r3, #16

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 80022c8:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80022ca:	8103      	strh	r3, [r0, #8]

  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);

  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 80022cc:	8903      	ldrh	r3, [r0, #8]
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	f043 0307 	orr.w	r3, r3, #7
 80022d4:	8103      	strh	r3, [r0, #8]
}
 80022d6:	4770      	bx	lr

080022d8 <TIM_TIxExternalClockConfig>:
  *          This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
 80022d8:	b538      	push	{r3, r4, r5, lr}
 80022da:	460d      	mov	r5, r1
 80022dc:	4611      	mov	r1, r2
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 80022de:	2201      	movs	r2, #1
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 80022e0:	2d60      	cmp	r5, #96	; 0x60
  *          This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
 80022e2:	4604      	mov	r4, r0
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 80022e4:	d102      	bne.n	80022ec <TIM_TIxExternalClockConfig+0x14>
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 80022e6:	f7ff fb1a 	bl	800191e <TI2_Config>
 80022ea:	e001      	b.n	80022f0 <TIM_TIxExternalClockConfig+0x18>
  }
  else
  {
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 80022ec:	f7ff fafe 	bl	80018ec <TI1_Config>
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80022f0:	8923      	ldrh	r3, [r4, #8]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 80022f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022f6:	041b      	lsls	r3, r3, #16
 80022f8:	0c1b      	lsrs	r3, r3, #16

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 80022fa:	431d      	orrs	r5, r3

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80022fc:	8125      	strh	r5, [r4, #8]
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
  }
  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 80022fe:	8923      	ldrh	r3, [r4, #8]
 8002300:	b29b      	uxth	r3, r3
 8002302:	f043 0307 	orr.w	r3, r3, #7
 8002306:	8123      	strh	r3, [r4, #8]
}
 8002308:	bd38      	pop	{r3, r4, r5, pc}

0800230a <TIM_SelectInputTrigger>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800230a:	8903      	ldrh	r3, [r0, #8]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 800230c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002310:	041b      	lsls	r3, r3, #16
 8002312:	0c1b      	lsrs	r3, r3, #16

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 8002314:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002316:	8103      	strh	r3, [r0, #8]
}
 8002318:	4770      	bx	lr

0800231a <TIM_SelectOutputTrigger>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
 800231a:	8883      	ldrh	r3, [r0, #4]
 800231c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002320:	041b      	lsls	r3, r3, #16
 8002322:	0c1b      	lsrs	r3, r3, #16
 8002324:	8083      	strh	r3, [r0, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 8002326:	8883      	ldrh	r3, [r0, #4]
 8002328:	b29b      	uxth	r3, r3
 800232a:	430b      	orrs	r3, r1
 800232c:	8083      	strh	r3, [r0, #4]
}
 800232e:	4770      	bx	lr

08002330 <TIM_SelectSlaveMode>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));

  /* Reset the SMS Bits */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_SMS;
 8002330:	8903      	ldrh	r3, [r0, #8]
 8002332:	f023 0307 	bic.w	r3, r3, #7
 8002336:	041b      	lsls	r3, r3, #16
 8002338:	0c1b      	lsrs	r3, r3, #16
 800233a:	8103      	strh	r3, [r0, #8]

  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
 800233c:	8903      	ldrh	r3, [r0, #8]
 800233e:	b29b      	uxth	r3, r3
 8002340:	430b      	orrs	r3, r1
 8002342:	8103      	strh	r3, [r0, #8]
}
 8002344:	4770      	bx	lr

08002346 <TIM_SelectMasterSlaveMode>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));

  /* Reset the MSM Bit */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_MSM;
 8002346:	8903      	ldrh	r3, [r0, #8]
 8002348:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800234c:	041b      	lsls	r3, r3, #16
 800234e:	0c1b      	lsrs	r3, r3, #16
 8002350:	8103      	strh	r3, [r0, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
 8002352:	8903      	ldrh	r3, [r0, #8]
 8002354:	b29b      	uxth	r3, r3
 8002356:	430b      	orrs	r3, r1
 8002358:	8103      	strh	r3, [r0, #8]
}
 800235a:	4770      	bx	lr

0800235c <TIM_ETRConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                   uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 800235c:	b510      	push	{r4, lr}
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
 800235e:	8904      	ldrh	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
 8002360:	b2e4      	uxtb	r4, r4

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 8002362:	430c      	orrs	r4, r1
 8002364:	4314      	orrs	r4, r2
 8002366:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 800236a:	b2a4      	uxth	r4, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800236c:	8104      	strh	r4, [r0, #8]
}
 800236e:	bd10      	pop	{r4, pc}

08002370 <TIM_ETRClockMode2Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 8002370:	b510      	push	{r4, lr}
 8002372:	4604      	mov	r4, r0
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 8002374:	f7ff fff2 	bl	800235c <TIM_ETRConfig>

  /* Enable the External clock mode2 */
  TIMx->SMCR |= TIM_SMCR_ECE;
 8002378:	8923      	ldrh	r3, [r4, #8]
 800237a:	b29b      	uxth	r3, r3
 800237c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002380:	8123      	strh	r3, [r4, #8]
}
 8002382:	bd10      	pop	{r4, pc}

08002384 <TIM_ETRClockMode1Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                            uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 8002384:	b510      	push	{r4, lr}
 8002386:	4604      	mov	r4, r0
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 8002388:	f7ff ffe8 	bl	800235c <TIM_ETRConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800238c:	8923      	ldrh	r3, [r4, #8]

  /* Reset the SMS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;

  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;
 800238e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002392:	041b      	lsls	r3, r3, #16
 8002394:	0c1b      	lsrs	r3, r3, #16

  /* Select the Trigger selection : ETRF */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
  tmpsmcr |= TIM_TS_ETRF;
 8002396:	f043 0377 	orr.w	r3, r3, #119	; 0x77

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800239a:	8123      	strh	r3, [r4, #8]
}
 800239c:	bd10      	pop	{r4, pc}

0800239e <TIM_EncoderInterfaceConfig>:
  *            @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
 800239e:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80023a0:	8904      	ldrh	r4, [r0, #8]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 80023a2:	8b06      	ldrh	r6, [r0, #24]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023a4:	8c05      	ldrh	r5, [r0, #32]
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 80023a6:	f426 7640 	bic.w	r6, r6, #768	; 0x300

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023aa:	b2ad      	uxth	r5, r5
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 80023ac:	f026 0603 	bic.w	r6, r6, #3

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 80023b0:	f024 0407 	bic.w	r4, r4, #7
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 80023b4:	0436      	lsls	r6, r6, #16
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
 80023b6:	f025 0522 	bic.w	r5, r5, #34	; 0x22

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 80023ba:	0424      	lsls	r4, r4, #16
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 80023bc:	0c36      	lsrs	r6, r6, #16
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 80023be:	4315      	orrs	r5, r2

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 80023c0:	0c24      	lsrs	r4, r4, #16
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 80023c2:	f446 7680 	orr.w	r6, r6, #256	; 0x100

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 80023c6:	ea45 1503 	orr.w	r5, r5, r3, lsl #4
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
  tmpsmcr |= TIM_EncoderMode;
 80023ca:	4321      	orrs	r1, r4

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 80023cc:	f046 0601 	orr.w	r6, r6, #1

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 80023d0:	b2ad      	uxth	r5, r5

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80023d2:	8101      	strh	r1, [r0, #8]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 80023d4:	8306      	strh	r6, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023d6:	8405      	strh	r5, [r0, #32]
}
 80023d8:	bd70      	pop	{r4, r5, r6, pc}

080023da <TIM_SelectHallSensor>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 80023da:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80023dc:	b119      	cbz	r1, 80023e6 <TIM_SelectHallSensor+0xc>
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 80023de:	b29b      	uxth	r3, r3
 80023e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023e4:	e003      	b.n	80023ee <TIM_SelectHallSensor+0x14>
  }
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_TI1S;
 80023e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80023ea:	041b      	lsls	r3, r3, #16
 80023ec:	0c1b      	lsrs	r3, r3, #16
 80023ee:	8083      	strh	r3, [r0, #4]
 80023f0:	4770      	bx	lr

080023f2 <TIM_RemapConfig>:
 /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_REMAP(TIM_Remap));

  /* Set the Timer remapping configuration */
  TIMx->OR =  TIM_Remap;
 80023f2:	f8a0 1050 	strh.w	r1, [r0, #80]	; 0x50
}
 80023f6:	4770      	bx	lr

080023f8 <USART_DeInit>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 80023f8:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 80023fa:	4b23      	ldr	r3, [pc, #140]	; (8002488 <USART_DeInit+0x90>)
 80023fc:	4298      	cmp	r0, r3
 80023fe:	d105      	bne.n	800240c <USART_DeInit+0x14>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 8002400:	2010      	movs	r0, #16
 8002402:	2101      	movs	r1, #1
 8002404:	f7ff f99c 	bl	8001740 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 8002408:	2010      	movs	r0, #16
 800240a:	e037      	b.n	800247c <USART_DeInit+0x84>
  }
  else if (USARTx == USART2)
 800240c:	4b1f      	ldr	r3, [pc, #124]	; (800248c <USART_DeInit+0x94>)
 800240e:	4298      	cmp	r0, r3
 8002410:	d107      	bne.n	8002422 <USART_DeInit+0x2a>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 8002412:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002416:	2101      	movs	r1, #1
 8002418:	f7ff f986 	bl	8001728 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 800241c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002420:	e009      	b.n	8002436 <USART_DeInit+0x3e>
  }
  else if (USARTx == USART3)
 8002422:	4b1b      	ldr	r3, [pc, #108]	; (8002490 <USART_DeInit+0x98>)
 8002424:	4298      	cmp	r0, r3
 8002426:	d10b      	bne.n	8002440 <USART_DeInit+0x48>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 8002428:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800242c:	2101      	movs	r1, #1
 800242e:	f7ff f97b 	bl	8001728 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 8002432:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002436:	2100      	movs	r1, #0
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
    }
  }
}
 8002438:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
  }
  else if (USARTx == USART3)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 800243c:	f7ff b974 	b.w	8001728 <RCC_APB1PeriphResetCmd>
  }    
  else if (USARTx == UART4)
 8002440:	4b14      	ldr	r3, [pc, #80]	; (8002494 <USART_DeInit+0x9c>)
 8002442:	4298      	cmp	r0, r3
 8002444:	d107      	bne.n	8002456 <USART_DeInit+0x5e>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 8002446:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800244a:	2101      	movs	r1, #1
 800244c:	f7ff f96c 	bl	8001728 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 8002450:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002454:	e7ef      	b.n	8002436 <USART_DeInit+0x3e>
  }
  else if (USARTx == UART5)
 8002456:	4b10      	ldr	r3, [pc, #64]	; (8002498 <USART_DeInit+0xa0>)
 8002458:	4298      	cmp	r0, r3
 800245a:	d107      	bne.n	800246c <USART_DeInit+0x74>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 800245c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002460:	2101      	movs	r1, #1
 8002462:	f7ff f961 	bl	8001728 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 8002466:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800246a:	e7e4      	b.n	8002436 <USART_DeInit+0x3e>
  }     
  else
  {
    if (USARTx == USART6)
 800246c:	4b0b      	ldr	r3, [pc, #44]	; (800249c <USART_DeInit+0xa4>)
 800246e:	4298      	cmp	r0, r3
 8002470:	d109      	bne.n	8002486 <USART_DeInit+0x8e>
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
 8002472:	2020      	movs	r0, #32
 8002474:	2101      	movs	r1, #1
 8002476:	f7ff f963 	bl	8001740 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 800247a:	2020      	movs	r0, #32
 800247c:	2100      	movs	r1, #0
    }
  }
}
 800247e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (USARTx == USART6)
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 8002482:	f7ff b95d 	b.w	8001740 <RCC_APB2PeriphResetCmd>
 8002486:	bd08      	pop	{r3, pc}
 8002488:	40011000 	.word	0x40011000
 800248c:	40004400 	.word	0x40004400
 8002490:	40004800 	.word	0x40004800
 8002494:	40004c00 	.word	0x40004c00
 8002498:	40005000 	.word	0x40005000
 800249c:	40011400 	.word	0x40011400

080024a0 <USART_Init>:
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80024a0:	8a03      	ldrh	r3, [r0, #16]
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80024a2:	88ca      	ldrh	r2, [r1, #6]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80024a4:	b29b      	uxth	r3, r3

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80024a6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80024aa:	b530      	push	{r4, r5, lr}
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80024ac:	4313      	orrs	r3, r2
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80024ae:	460d      	mov	r5, r1
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80024b0:	8203      	strh	r3, [r0, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80024b2:	8983      	ldrh	r3, [r0, #12]

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80024b4:	8909      	ldrh	r1, [r1, #8]
 80024b6:	88aa      	ldrh	r2, [r5, #4]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 80024b8:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80024bc:	430a      	orrs	r2, r1
 80024be:	8969      	ldrh	r1, [r5, #10]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 80024c0:	f023 030c 	bic.w	r3, r3, #12
 80024c4:	041b      	lsls	r3, r3, #16

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80024c6:	430a      	orrs	r2, r1

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 80024c8:	0c1b      	lsrs	r3, r3, #16

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80024ca:	b292      	uxth	r2, r2
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 80024cc:	4313      	orrs	r3, r2
 80024ce:	8183      	strh	r3, [r0, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 80024d0:	8a83      	ldrh	r3, [r0, #20]
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 80024d2:	89aa      	ldrh	r2, [r5, #12]

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 80024d4:	b29b      	uxth	r3, r3

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 80024d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 80024da:	4313      	orrs	r3, r2
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80024dc:	b085      	sub	sp, #20
  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 80024de:	8283      	strh	r3, [r0, #20]
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80024e0:	4604      	mov	r4, r0
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 80024e2:	4668      	mov	r0, sp
 80024e4:	f7ff f850 	bl	8001588 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 80024e8:	4b1a      	ldr	r3, [pc, #104]	; (8002554 <USART_Init+0xb4>)
 80024ea:	429c      	cmp	r4, r3
 80024ec:	d003      	beq.n	80024f6 <USART_Init+0x56>
 80024ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024f2:	429c      	cmp	r4, r3
 80024f4:	d101      	bne.n	80024fa <USART_Init+0x5a>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 80024f6:	9b03      	ldr	r3, [sp, #12]
 80024f8:	e000      	b.n	80024fc <USART_Init+0x5c>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 80024fa:	9b02      	ldr	r3, [sp, #8]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80024fc:	89a2      	ldrh	r2, [r4, #12]
 80024fe:	b212      	sxth	r2, r2
 8002500:	2a00      	cmp	r2, #0
 8002502:	f04f 0119 	mov.w	r1, #25
 8002506:	682a      	ldr	r2, [r5, #0]
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8002508:	fb01 f103 	mul.w	r1, r1, r3
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800250c:	da01      	bge.n	8002512 <USART_Init+0x72>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 800250e:	0052      	lsls	r2, r2, #1
 8002510:	e000      	b.n	8002514 <USART_Init+0x74>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8002512:	0092      	lsls	r2, r2, #2
  }
  tmpreg = (integerdivider / 100) << 4;
 8002514:	2364      	movs	r3, #100	; 0x64
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8002516:	fbb1 f1f2 	udiv	r1, r1, r2
  }
  tmpreg = (integerdivider / 100) << 4;
 800251a:	fbb1 f2f3 	udiv	r2, r1, r3
 800251e:	0112      	lsls	r2, r2, #4

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8002520:	0910      	lsrs	r0, r2, #4
 8002522:	fb03 1110 	mls	r1, r3, r0, r1

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8002526:	89a0      	ldrh	r0, [r4, #12]
 8002528:	b200      	sxth	r0, r0
 800252a:	2800      	cmp	r0, #0
 800252c:	da06      	bge.n	800253c <USART_Init+0x9c>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 800252e:	00c9      	lsls	r1, r1, #3
 8002530:	3132      	adds	r1, #50	; 0x32
 8002532:	fbb1 f3f3 	udiv	r3, r1, r3
 8002536:	f003 0307 	and.w	r3, r3, #7
 800253a:	e005      	b.n	8002548 <USART_Init+0xa8>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 800253c:	0109      	lsls	r1, r1, #4
 800253e:	3132      	adds	r1, #50	; 0x32
 8002540:	fbb1 f3f3 	udiv	r3, r1, r3
 8002544:	f003 030f 	and.w	r3, r3, #15
 8002548:	431a      	orrs	r2, r3
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 800254a:	b292      	uxth	r2, r2
 800254c:	8122      	strh	r2, [r4, #8]
}
 800254e:	b005      	add	sp, #20
 8002550:	bd30      	pop	{r4, r5, pc}
 8002552:	bf00      	nop
 8002554:	40011000 	.word	0x40011000

08002558 <USART_StructInit>:
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 8002558:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800255c:	6003      	str	r3, [r0, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
  USART_InitStruct->USART_Parity = USART_Parity_No ;
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800255e:	220c      	movs	r2, #12
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 8002560:	2300      	movs	r3, #0
 8002562:	8083      	strh	r3, [r0, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 8002564:	80c3      	strh	r3, [r0, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 8002566:	8103      	strh	r3, [r0, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8002568:	8142      	strh	r2, [r0, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 800256a:	8183      	strh	r3, [r0, #12]
}
 800256c:	4770      	bx	lr

0800256e <USART_ClockInit>:
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 800256e:	880b      	ldrh	r3, [r1, #0]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8002570:	8a02      	ldrh	r2, [r0, #16]
  *         contains the configuration information for the specified  USART peripheral.
  * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 8002572:	b510      	push	{r4, lr}
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8002574:	884c      	ldrh	r4, [r1, #2]
 8002576:	4323      	orrs	r3, r4
 8002578:	888c      	ldrh	r4, [r1, #4]
 800257a:	88c9      	ldrh	r1, [r1, #6]
 800257c:	4323      	orrs	r3, r4
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800257e:	b292      	uxth	r2, r2
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8002580:	430b      	orrs	r3, r1
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 8002582:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8002586:	b29b      	uxth	r3, r3
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8002588:	4313      	orrs	r3, r2
 800258a:	8203      	strh	r3, [r0, #16]
}
 800258c:	bd10      	pop	{r4, pc}

0800258e <USART_ClockStructInit>:
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 800258e:	2300      	movs	r3, #0
 8002590:	8003      	strh	r3, [r0, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 8002592:	8043      	strh	r3, [r0, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 8002594:	8083      	strh	r3, [r0, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 8002596:	80c3      	strh	r3, [r0, #6]
}
 8002598:	4770      	bx	lr

0800259a <USART_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 800259a:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800259c:	b119      	cbz	r1, 80025a6 <USART_Cmd+0xc>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 800259e:	b29b      	uxth	r3, r3
 80025a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80025a4:	e003      	b.n	80025ae <USART_Cmd+0x14>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 80025a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80025aa:	041b      	lsls	r3, r3, #16
 80025ac:	0c1b      	lsrs	r3, r3, #16
 80025ae:	8183      	strh	r3, [r0, #12]
 80025b0:	4770      	bx	lr

080025b2 <USART_SetPrescaler>:
{ 
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= USART_GTPR_GT;
 80025b2:	8b03      	ldrh	r3, [r0, #24]
 80025b4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80025b8:	8303      	strh	r3, [r0, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 80025ba:	8b03      	ldrh	r3, [r0, #24]
 80025bc:	b29b      	uxth	r3, r3
 80025be:	430b      	orrs	r3, r1
 80025c0:	8303      	strh	r3, [r0, #24]
}
 80025c2:	4770      	bx	lr

080025c4 <USART_OverSampling8Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 80025c4:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80025c6:	b129      	cbz	r1, 80025d4 <USART_OverSampling8Cmd+0x10>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 80025c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	e001      	b.n	80025d8 <USART_OverSampling8Cmd+0x14>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
 80025d4:	045b      	lsls	r3, r3, #17
 80025d6:	0c5b      	lsrs	r3, r3, #17
 80025d8:	8183      	strh	r3, [r0, #12]
 80025da:	4770      	bx	lr

080025dc <USART_OneBitMethodCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 80025dc:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80025de:	b119      	cbz	r1, 80025e8 <USART_OneBitMethodCmd+0xc>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80025e6:	e003      	b.n	80025f0 <USART_OneBitMethodCmd+0x14>
  }
  else
  {
    /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
 80025e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80025ec:	041b      	lsls	r3, r3, #16
 80025ee:	0c1b      	lsrs	r3, r3, #16
 80025f0:	8283      	strh	r3, [r0, #20]
 80025f2:	4770      	bx	lr

080025f4 <USART_SendData>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 80025f4:	05c9      	lsls	r1, r1, #23
 80025f6:	0dc9      	lsrs	r1, r1, #23
 80025f8:	8081      	strh	r1, [r0, #4]
}
 80025fa:	4770      	bx	lr

080025fc <USART_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 80025fc:	8880      	ldrh	r0, [r0, #4]
 80025fe:	05c0      	lsls	r0, r0, #23
}
 8002600:	0dc0      	lsrs	r0, r0, #23
 8002602:	4770      	bx	lr

08002604 <USART_SetAddress>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
 8002604:	8a03      	ldrh	r3, [r0, #16]
 8002606:	f023 030f 	bic.w	r3, r3, #15
 800260a:	041b      	lsls	r3, r3, #16
 800260c:	0c1b      	lsrs	r3, r3, #16
 800260e:	8203      	strh	r3, [r0, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
 8002610:	8a03      	ldrh	r3, [r0, #16]
 8002612:	b29b      	uxth	r3, r3
 8002614:	430b      	orrs	r3, r1
 8002616:	8203      	strh	r3, [r0, #16]
}
 8002618:	4770      	bx	lr

0800261a <USART_ReceiverWakeUpCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 800261a:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
 800261c:	b119      	cbz	r1, 8002626 <USART_ReceiverWakeUpCmd+0xc>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 800261e:	b29b      	uxth	r3, r3
 8002620:	f043 0302 	orr.w	r3, r3, #2
 8002624:	e003      	b.n	800262e <USART_ReceiverWakeUpCmd+0x14>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
 8002626:	f023 0302 	bic.w	r3, r3, #2
 800262a:	041b      	lsls	r3, r3, #16
 800262c:	0c1b      	lsrs	r3, r3, #16
 800262e:	8183      	strh	r3, [r0, #12]
 8002630:	4770      	bx	lr

08002632 <USART_WakeUpConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
 8002632:	8983      	ldrh	r3, [r0, #12]
 8002634:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002638:	041b      	lsls	r3, r3, #16
 800263a:	0c1b      	lsrs	r3, r3, #16
 800263c:	8183      	strh	r3, [r0, #12]
  USARTx->CR1 |= USART_WakeUp;
 800263e:	8983      	ldrh	r3, [r0, #12]
 8002640:	b29b      	uxth	r3, r3
 8002642:	430b      	orrs	r3, r1
 8002644:	8183      	strh	r3, [r0, #12]
}
 8002646:	4770      	bx	lr

08002648 <USART_LINBreakDetectLengthConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
 8002648:	8a03      	ldrh	r3, [r0, #16]
 800264a:	f023 0320 	bic.w	r3, r3, #32
 800264e:	041b      	lsls	r3, r3, #16
 8002650:	0c1b      	lsrs	r3, r3, #16
 8002652:	8203      	strh	r3, [r0, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 8002654:	8a03      	ldrh	r3, [r0, #16]
 8002656:	b29b      	uxth	r3, r3
 8002658:	430b      	orrs	r3, r1
 800265a:	8203      	strh	r3, [r0, #16]
}
 800265c:	4770      	bx	lr

0800265e <USART_LINCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 800265e:	8a03      	ldrh	r3, [r0, #16]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002660:	b119      	cbz	r1, 800266a <USART_LINCmd+0xc>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 8002662:	b29b      	uxth	r3, r3
 8002664:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002668:	e003      	b.n	8002672 <USART_LINCmd+0x14>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
 800266a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800266e:	041b      	lsls	r3, r3, #16
 8002670:	0c1b      	lsrs	r3, r3, #16
 8002672:	8203      	strh	r3, [r0, #16]
 8002674:	4770      	bx	lr

08002676 <USART_SendBreak>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= USART_CR1_SBK;
 8002676:	8983      	ldrh	r3, [r0, #12]
 8002678:	b29b      	uxth	r3, r3
 800267a:	f043 0301 	orr.w	r3, r3, #1
 800267e:	8183      	strh	r3, [r0, #12]
}
 8002680:	4770      	bx	lr

08002682 <USART_HalfDuplexCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 8002682:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002684:	b119      	cbz	r1, 800268e <USART_HalfDuplexCmd+0xc>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 8002686:	b29b      	uxth	r3, r3
 8002688:	f043 0308 	orr.w	r3, r3, #8
 800268c:	e003      	b.n	8002696 <USART_HalfDuplexCmd+0x14>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
 800268e:	f023 0308 	bic.w	r3, r3, #8
 8002692:	041b      	lsls	r3, r3, #16
 8002694:	0c1b      	lsrs	r3, r3, #16
 8002696:	8283      	strh	r3, [r0, #20]
 8002698:	4770      	bx	lr

0800269a <USART_SetGuardTime>:
{    
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= USART_GTPR_PSC;
 800269a:	8b03      	ldrh	r3, [r0, #24]
 800269c:	b2db      	uxtb	r3, r3
 800269e:	8303      	strh	r3, [r0, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 80026a0:	8b03      	ldrh	r3, [r0, #24]
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80026a8:	8303      	strh	r3, [r0, #24]
}
 80026aa:	4770      	bx	lr

080026ac <USART_SmartCardCmd>:
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 80026ac:	8a83      	ldrh	r3, [r0, #20]
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80026ae:	b119      	cbz	r1, 80026b8 <USART_SmartCardCmd+0xc>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	f043 0320 	orr.w	r3, r3, #32
 80026b6:	e003      	b.n	80026c0 <USART_SmartCardCmd+0x14>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
 80026b8:	f023 0320 	bic.w	r3, r3, #32
 80026bc:	041b      	lsls	r3, r3, #16
 80026be:	0c1b      	lsrs	r3, r3, #16
 80026c0:	8283      	strh	r3, [r0, #20]
 80026c2:	4770      	bx	lr

080026c4 <USART_SmartCardNACKCmd>:
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 80026c4:	8a83      	ldrh	r3, [r0, #20]
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80026c6:	b119      	cbz	r1, 80026d0 <USART_SmartCardNACKCmd+0xc>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	f043 0310 	orr.w	r3, r3, #16
 80026ce:	e003      	b.n	80026d8 <USART_SmartCardNACKCmd+0x14>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
 80026d0:	f023 0310 	bic.w	r3, r3, #16
 80026d4:	041b      	lsls	r3, r3, #16
 80026d6:	0c1b      	lsrs	r3, r3, #16
 80026d8:	8283      	strh	r3, [r0, #20]
 80026da:	4770      	bx	lr

080026dc <USART_IrDAConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
 80026dc:	8a83      	ldrh	r3, [r0, #20]
 80026de:	f023 0304 	bic.w	r3, r3, #4
 80026e2:	041b      	lsls	r3, r3, #16
 80026e4:	0c1b      	lsrs	r3, r3, #16
 80026e6:	8283      	strh	r3, [r0, #20]
  USARTx->CR3 |= USART_IrDAMode;
 80026e8:	8a83      	ldrh	r3, [r0, #20]
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	430b      	orrs	r3, r1
 80026ee:	8283      	strh	r3, [r0, #20]
}
 80026f0:	4770      	bx	lr

080026f2 <USART_IrDACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 80026f2:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 80026f4:	b119      	cbz	r1, 80026fe <USART_IrDACmd+0xc>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	f043 0302 	orr.w	r3, r3, #2
 80026fc:	e003      	b.n	8002706 <USART_IrDACmd+0x14>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
 80026fe:	f023 0302 	bic.w	r3, r3, #2
 8002702:	041b      	lsls	r3, r3, #16
 8002704:	0c1b      	lsrs	r3, r3, #16
 8002706:	8283      	strh	r3, [r0, #20]
 8002708:	4770      	bx	lr

0800270a <USART_DMACmd>:

  if (NewState != DISABLE)
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 800270a:	8a83      	ldrh	r3, [r0, #20]
 800270c:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 800270e:	b10a      	cbz	r2, 8002714 <USART_DMACmd+0xa>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8002710:	4319      	orrs	r1, r3
 8002712:	e001      	b.n	8002718 <USART_DMACmd+0xe>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 8002714:	ea23 0101 	bic.w	r1, r3, r1
 8002718:	8281      	strh	r1, [r0, #20]
 800271a:	4770      	bx	lr

0800271c <USART_ITConfig>:
  } 
    
  usartxbase = (uint32_t)USARTx;

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 800271c:	f3c1 1342 	ubfx	r3, r1, #5, #3
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8002720:	b510      	push	{r4, lr}

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8002722:	f001 011f 	and.w	r1, r1, #31
  itmask = (((uint32_t)0x01) << itpos);
 8002726:	2401      	movs	r4, #1
 8002728:	fa14 f101 	lsls.w	r1, r4, r1
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 800272c:	42a3      	cmp	r3, r4
 800272e:	d101      	bne.n	8002734 <USART_ITConfig+0x18>
  {
    usartxbase += 0x0C;
 8002730:	300c      	adds	r0, #12
 8002732:	e004      	b.n	800273e <USART_ITConfig+0x22>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8002734:	2b02      	cmp	r3, #2
 8002736:	d101      	bne.n	800273c <USART_ITConfig+0x20>
  {
    usartxbase += 0x10;
 8002738:	3010      	adds	r0, #16
 800273a:	e000      	b.n	800273e <USART_ITConfig+0x22>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 800273c:	3014      	adds	r0, #20
  }
  if (NewState != DISABLE)
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 800273e:	6803      	ldr	r3, [r0, #0]
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
  }
  if (NewState != DISABLE)
 8002740:	b10a      	cbz	r2, 8002746 <USART_ITConfig+0x2a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8002742:	4319      	orrs	r1, r3
 8002744:	e001      	b.n	800274a <USART_ITConfig+0x2e>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8002746:	ea23 0101 	bic.w	r1, r3, r1
 800274a:	6001      	str	r1, [r0, #0]
 800274c:	bd10      	pop	{r4, pc}

0800274e <USART_GetFlagStatus>:
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 800274e:	8803      	ldrh	r3, [r0, #0]
  {
    bitstatus = SET;
 8002750:	4219      	tst	r1, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8002752:	bf0c      	ite	eq
 8002754:	2000      	moveq	r0, #0
 8002756:	2001      	movne	r0, #1
 8002758:	4770      	bx	lr

0800275a <USART_ClearFlag>:
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
       
  USARTx->SR = (uint16_t)~USART_FLAG;
 800275a:	43c9      	mvns	r1, r1
 800275c:	b289      	uxth	r1, r1
 800275e:	8001      	strh	r1, [r0, #0]
}
 8002760:	4770      	bx	lr

08002762 <USART_GetITStatus>:
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
 8002762:	2201      	movs	r2, #1
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8002764:	b510      	push	{r4, lr}
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8002766:	f001 031f 	and.w	r3, r1, #31
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 800276a:	f3c1 1442 	ubfx	r4, r1, #5, #3
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
 800276e:	409a      	lsls	r2, r3
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8002770:	2c01      	cmp	r4, #1
 8002772:	d101      	bne.n	8002778 <USART_GetITStatus+0x16>
  {
    itmask &= USARTx->CR1;
 8002774:	8983      	ldrh	r3, [r0, #12]
 8002776:	e003      	b.n	8002780 <USART_GetITStatus+0x1e>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8002778:	2c02      	cmp	r4, #2
  {
    itmask &= USARTx->CR2;
 800277a:	bf0c      	ite	eq
 800277c:	8a03      	ldrheq	r3, [r0, #16]
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 800277e:	8a83      	ldrhne	r3, [r0, #20]
 8002780:	b29b      	uxth	r3, r3
 8002782:	4013      	ands	r3, r2
  }
  
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
  bitpos &= USARTx->SR;
 8002784:	8802      	ldrh	r2, [r0, #0]
 8002786:	b292      	uxth	r2, r2
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8002788:	b143      	cbz	r3, 800279c <USART_GetITStatus+0x3a>
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
  }
  
  bitpos = USART_IT >> 0x08;
 800278a:	0a09      	lsrs	r1, r1, #8
  bitpos = (uint32_t)0x01 << bitpos;
 800278c:	2301      	movs	r3, #1
 800278e:	fa13 f101 	lsls.w	r1, r3, r1
  *            @arg USART_IT_NE:   Noise Error interrupt
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
 8002792:	4211      	tst	r1, r2
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
  bitpos &= USARTx->SR;
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
  {
    bitstatus = SET;
 8002794:	bf0c      	ite	eq
 8002796:	2000      	moveq	r0, #0
 8002798:	2001      	movne	r0, #1
 800279a:	bd10      	pop	{r4, pc}
  }
  else
  {
    bitstatus = RESET;
 800279c:	4618      	mov	r0, r3
  }
  
  return bitstatus;  
}
 800279e:	bd10      	pop	{r4, pc}

080027a0 <USART_ClearITPendingBit>:
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 80027a0:	0a09      	lsrs	r1, r1, #8
 80027a2:	2301      	movs	r3, #1
 80027a4:	408b      	lsls	r3, r1
  USARTx->SR = (uint16_t)~itmask;
 80027a6:	43db      	mvns	r3, r3
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	8003      	strh	r3, [r0, #0]
}
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop

080027b0 <_close>:
	}
}

int _close(int file) {
	return -1;
}
 80027b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80027b4:	4770      	bx	lr

080027b6 <_execve>:
/*
 execve
 Transfer control to a new process. Minimal implementation (for a system without processes):
 */
int _execve(char *name, char **argv, char **env) {
	errno = ENOMEM;
 80027b6:	4b03      	ldr	r3, [pc, #12]	; (80027c4 <_execve+0xe>)
 80027b8:	220c      	movs	r2, #12
 80027ba:	601a      	str	r2, [r3, #0]
	return -1;
}
 80027bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	20001678 	.word	0x20001678

080027c8 <_fork>:
 fork
 Create a new process. Minimal implementation (for a system without processes):
 */

int _fork() {
	errno = EAGAIN;
 80027c8:	4b02      	ldr	r3, [pc, #8]	; (80027d4 <_fork+0xc>)
 80027ca:	220b      	movs	r2, #11
 80027cc:	601a      	str	r2, [r3, #0]
	return -1;
}
 80027ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80027d2:	4770      	bx	lr
 80027d4:	20001678 	.word	0x20001678

080027d8 <_fstat>:
 Status of an open file. For consistency with other minimal implementations in these examples,
 all files are regarded as character special devices.
 The `sys/stat.h' header file required is distributed in the `include' subdirectory for this C library.
 */
int _fstat(int file, struct stat *st) {
	st->st_mode = S_IFCHR;
 80027d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027dc:	604b      	str	r3, [r1, #4]
	return 0;
}
 80027de:	2000      	movs	r0, #0
 80027e0:	4770      	bx	lr

080027e2 <_getpid>:
 Process-ID; this is sometimes used to generate strings unlikely to conflict with other processes. Minimal implementation, for a system without processes:
 */

int _getpid() {
	return 1;
}
 80027e2:	2001      	movs	r0, #1
 80027e4:	4770      	bx	lr

080027e6 <_isatty>:
/*
 isatty
 Query whether output stream is a terminal. For consistency with the other minimal implementations,
 */
int _isatty(int file) {
	switch (file) {
 80027e6:	2802      	cmp	r0, #2
 80027e8:	d904      	bls.n	80027f4 <_isatty+0xe>
	case STDERR_FILENO:
	case STDIN_FILENO:
		return 1;
	default:
		//errno = ENOTTY;
		errno = EBADF;
 80027ea:	4b03      	ldr	r3, [pc, #12]	; (80027f8 <_isatty+0x12>)
 80027ec:	2209      	movs	r2, #9
 80027ee:	601a      	str	r2, [r3, #0]
		return 0;
 80027f0:	2000      	movs	r0, #0
 80027f2:	4770      	bx	lr
int _isatty(int file) {
	switch (file) {
	case STDOUT_FILENO:
	case STDERR_FILENO:
	case STDIN_FILENO:
		return 1;
 80027f4:	2001      	movs	r0, #1
	default:
		//errno = ENOTTY;
		errno = EBADF;
		return 0;
	}
}
 80027f6:	4770      	bx	lr
 80027f8:	20001678 	.word	0x20001678

080027fc <_kill>:
/*
 kill
 Send a signal. Minimal implementation:
 */
int _kill(int pid, int sig) {
	errno = EINVAL;
 80027fc:	4b02      	ldr	r3, [pc, #8]	; (8002808 <_kill+0xc>)
 80027fe:	2216      	movs	r2, #22
 8002800:	601a      	str	r2, [r3, #0]
	return (-1);
}
 8002802:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002806:	4770      	bx	lr
 8002808:	20001678 	.word	0x20001678

0800280c <_link>:
 link
 Establish a new name for an existing file. Minimal implementation:
 */

int _link(char *old, char *new) {
	errno = EMLINK;
 800280c:	4b02      	ldr	r3, [pc, #8]	; (8002818 <_link+0xc>)
 800280e:	221f      	movs	r2, #31
 8002810:	601a      	str	r2, [r3, #0]
	return -1;
}
 8002812:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002816:	4770      	bx	lr
 8002818:	20001678 	.word	0x20001678

0800281c <_lseek>:
 lseek
 Set position in a file. Minimal implementation:
 */
int _lseek(int file, int ptr, int dir) {
	return 0;
}
 800281c:	2000      	movs	r0, #0
 800281e:	4770      	bx	lr

08002820 <_read>:
 read
 Read a character to a file. `libc' subroutines will use this system routine for input from all files, including stdin
 Returns -1 on error or blocks until the number of characters have been read.
 */

int _read(int file, char *ptr, int len) {
 8002820:	b530      	push	{r4, r5, lr}
	int n;
	int num = 0;
	switch (file) {
 8002822:	b138      	cbz	r0, 8002834 <_read+0x14>
 8002824:	e00d      	b.n	8002842 <_read+0x22>
	case STDIN_FILENO:
		for (n = 0; n < len; n++) {
#if   STDIN_USART == 1
			while ((USART1->SR & USART_FLAG_RXNE) == (uint16_t)RESET) {}
 8002826:	881d      	ldrh	r5, [r3, #0]
 8002828:	06ad      	lsls	r5, r5, #26
 800282a:	d5fc      	bpl.n	8002826 <_read+0x6>
			char c = (char)(USART1->DR & (uint16_t)0x01FF);
 800282c:	88a5      	ldrh	r5, [r4, #4]
 800282e:	540d      	strb	r5, [r1, r0]
int _read(int file, char *ptr, int len) {
	int n;
	int num = 0;
	switch (file) {
	case STDIN_FILENO:
		for (n = 0; n < len; n++) {
 8002830:	3001      	adds	r0, #1
 8002832:	e001      	b.n	8002838 <_read+0x18>
#if   STDIN_USART == 1
			while ((USART1->SR & USART_FLAG_RXNE) == (uint16_t)RESET) {}
 8002834:	4b06      	ldr	r3, [pc, #24]	; (8002850 <_read+0x30>)
 8002836:	461c      	mov	r4, r3
int _read(int file, char *ptr, int len) {
	int n;
	int num = 0;
	switch (file) {
	case STDIN_FILENO:
		for (n = 0; n < len; n++) {
 8002838:	4290      	cmp	r0, r2
 800283a:	dbf4      	blt.n	8002826 <_read+0x6>
 800283c:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8002840:	bd30      	pop	{r4, r5, pc}
					*ptr++ = c;
					num++;
				}
				break;
				default:
				errno = EBADF;
 8002842:	4b04      	ldr	r3, [pc, #16]	; (8002854 <_read+0x34>)
 8002844:	2209      	movs	r2, #9
 8002846:	601a      	str	r2, [r3, #0]
				return -1;
 8002848:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			}
	return num;
}
 800284c:	bd30      	pop	{r4, r5, pc}
 800284e:	bf00      	nop
 8002850:	40011000 	.word	0x40011000
 8002854:	20001678 	.word	0x20001678

08002858 <_stat>:
 Status of a file (by name). Minimal implementation:
 int    _EXFUN(stat,( const char *__path, struct stat *__sbuf ));
 */

int _stat(const char *filepath, struct stat *st) {
	st->st_mode = S_IFCHR;
 8002858:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800285c:	604b      	str	r3, [r1, #4]
	return 0;
}
 800285e:	2000      	movs	r0, #0
 8002860:	4770      	bx	lr

08002862 <_times>:
 Timing information for current process. Minimal implementation:
 */

clock_t _times(struct tms *buf) {
	return -1;
}
 8002862:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002866:	4770      	bx	lr

08002868 <_unlink>:
/*
 unlink
 Remove a file's directory entry. Minimal implementation:
 */
int _unlink(char *name) {
	errno = ENOENT;
 8002868:	4b02      	ldr	r3, [pc, #8]	; (8002874 <_unlink+0xc>)
 800286a:	2202      	movs	r2, #2
 800286c:	601a      	str	r2, [r3, #0]
	return -1;
}
 800286e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002872:	4770      	bx	lr
 8002874:	20001678 	.word	0x20001678

08002878 <_wait>:
/*
 wait
 Wait for a child process. Minimal implementation:
 */
int _wait(int *status) {
	errno = ECHILD;
 8002878:	4b02      	ldr	r3, [pc, #8]	; (8002884 <_wait+0xc>)
 800287a:	220a      	movs	r2, #10
 800287c:	601a      	str	r2, [r3, #0]
	return -1;
}
 800287e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002882:	4770      	bx	lr
 8002884:	20001678 	.word	0x20001678

08002888 <_write>:
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
 8002888:	2801      	cmp	r0, #1
/*
 write
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
 800288a:	b530      	push	{r4, r5, lr}
	int n;
	switch (file) {
 800288c:	d009      	beq.n	80028a2 <_write+0x1a>
 800288e:	2802      	cmp	r0, #2
 8002890:	d11a      	bne.n	80028c8 <_write+0x40>
 8002892:	e013      	b.n	80028bc <_write+0x34>
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
#if STDOUT_USART == 1
			while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 8002894:	8805      	ldrh	r5, [r0, #0]
 8002896:	066d      	lsls	r5, r5, #25
 8002898:	d5fc      	bpl.n	8002894 <_write+0xc>
			USART1->DR = (*ptr++ & (uint16_t)0x01FF);
 800289a:	5ccd      	ldrb	r5, [r1, r3]
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
 800289c:	3301      	adds	r3, #1
#if STDOUT_USART == 1
			while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
			USART1->DR = (*ptr++ & (uint16_t)0x01FF);
 800289e:	80a5      	strh	r5, [r4, #4]
 80028a0:	e002      	b.n	80028a8 <_write+0x20>
	int n;
	switch (file) {
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
#if STDOUT_USART == 1
			while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 80028a2:	480d      	ldr	r0, [pc, #52]	; (80028d8 <_write+0x50>)
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
 80028a4:	2300      	movs	r3, #0
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
#if STDOUT_USART == 1
			while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 80028a6:	4604      	mov	r4, r0
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
 80028a8:	4293      	cmp	r3, r2
 80028aa:	dbf3      	blt.n	8002894 <_write+0xc>
 80028ac:	e011      	b.n	80028d2 <_write+0x4a>
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
#if STDERR_USART == 1
					while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 80028ae:	8805      	ldrh	r5, [r0, #0]
 80028b0:	066d      	lsls	r5, r5, #25
 80028b2:	d5fc      	bpl.n	80028ae <_write+0x26>
					USART1->DR = (*ptr++ & (uint16_t)0x01FF);
 80028b4:	5ccd      	ldrb	r5, [r1, r3]
					USART3->DR = (*ptr++ & (uint16_t)0x01FF);
#endif
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
 80028b6:	3301      	adds	r3, #1
#if STDERR_USART == 1
					while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
					USART1->DR = (*ptr++ & (uint16_t)0x01FF);
 80028b8:	80a5      	strh	r5, [r4, #4]
 80028ba:	e002      	b.n	80028c2 <_write+0x3a>
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
#if STDERR_USART == 1
					while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 80028bc:	4806      	ldr	r0, [pc, #24]	; (80028d8 <_write+0x50>)
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
 80028be:	2300      	movs	r3, #0
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
#if STDERR_USART == 1
					while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 80028c0:	4604      	mov	r4, r0
					USART3->DR = (*ptr++ & (uint16_t)0x01FF);
#endif
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
 80028c2:	4293      	cmp	r3, r2
 80028c4:	dbf3      	blt.n	80028ae <_write+0x26>
 80028c6:	e004      	b.n	80028d2 <_write+0x4a>
					USART3->DR = (*ptr++ & (uint16_t)0x01FF);
#endif
				}
				break;
				default:
				errno = EBADF;
 80028c8:	4b04      	ldr	r3, [pc, #16]	; (80028dc <_write+0x54>)
 80028ca:	2209      	movs	r2, #9
 80028cc:	601a      	str	r2, [r3, #0]
				return -1;
 80028ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
			}
	return len;
}
 80028d2:	4610      	mov	r0, r2
 80028d4:	bd30      	pop	{r4, r5, pc}
 80028d6:	bf00      	nop
 80028d8:	40011000 	.word	0x40011000
 80028dc:	20001678 	.word	0x20001678

080028e0 <_sbrk>:
/*
 sbrk
 Increase program data space.
 Malloc and related functions depend on this
 */
caddr_t _sbrk(int incr) {
 80028e0:	b508      	push	{r3, lr}

	extern char _ebss; // Defined by the linker
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0) {
 80028e2:	4b0d      	ldr	r3, [pc, #52]	; (8002918 <_sbrk+0x38>)
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	b90a      	cbnz	r2, 80028ec <_sbrk+0xc>
		heap_end = &_ebss;
 80028e8:	4a0c      	ldr	r2, [pc, #48]	; (800291c <_sbrk+0x3c>)
 80028ea:	601a      	str	r2, [r3, #0]
	}
	prev_heap_end = heap_end;
 80028ec:	681b      	ldr	r3, [r3, #0]
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __get_MSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 80028ee:	f3ef 8208 	mrs	r2, MSP

	char * stack = (char*) __get_MSP();
	if (heap_end + incr > stack) {
 80028f2:	1818      	adds	r0, r3, r0
 80028f4:	4290      	cmp	r0, r2
 80028f6:	d90a      	bls.n	800290e <_sbrk+0x2e>
		_write(STDERR_FILENO, "Heap and stack collision\n", 25);
 80028f8:	2219      	movs	r2, #25
 80028fa:	2002      	movs	r0, #2
 80028fc:	4908      	ldr	r1, [pc, #32]	; (8002920 <_sbrk+0x40>)
 80028fe:	f7ff ffc3 	bl	8002888 <_write>
		errno = ENOMEM;
 8002902:	4b08      	ldr	r3, [pc, #32]	; (8002924 <_sbrk+0x44>)
 8002904:	220c      	movs	r2, #12
 8002906:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8002908:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800290c:	e001      	b.n	8002912 <_sbrk+0x32>
		//abort ();
	}

	heap_end += incr;
 800290e:	4a02      	ldr	r2, [pc, #8]	; (8002918 <_sbrk+0x38>)
 8002910:	6010      	str	r0, [r2, #0]
	return (caddr_t) prev_heap_end;

}
 8002912:	4618      	mov	r0, r3
 8002914:	bd08      	pop	{r3, pc}
 8002916:	bf00      	nop
 8002918:	200009ac 	.word	0x200009ac
 800291c:	2000167c 	.word	0x2000167c
 8002920:	0800854d 	.word	0x0800854d
 8002924:	20001678 	.word	0x20001678

08002928 <_exit>:
char *__env[1] = { 0 };
char **environ = __env;

int _write(int file, char *ptr, int len);

void _exit(int status) {
 8002928:	b508      	push	{r3, lr}
	_write(1, "exit", 4);
 800292a:	2001      	movs	r0, #1
 800292c:	4902      	ldr	r1, [pc, #8]	; (8002938 <_exit+0x10>)
 800292e:	2204      	movs	r2, #4
 8002930:	f7ff ffaa 	bl	8002888 <_write>
 8002934:	e7fe      	b.n	8002934 <_exit+0xc>
 8002936:	bf00      	nop
 8002938:	08008567 	.word	0x08008567

0800293c <I2C_Configuration>:
  * @brief  I2C Configuration
  * @param  None
  * @retval None
  */
void I2C_Configuration(void)
{
 800293c:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef  GPIO_InitStructure;
  I2C_InitTypeDef  I2C_InitStructure;

  /* I2C Periph clock enable */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);  //  RCC_APB1PeriphClockCmd(I2C1_RCC, ENABLE);
 800293e:	2101      	movs	r1, #1
  * @brief  I2C Configuration
  * @param  None
  * @retval None
  */
void I2C_Configuration(void)
{
 8002940:	b087      	sub	sp, #28
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);  //  RCC_APB1PeriphClockCmd(I2C1_RCC, ENABLE);
  /* GPIO Periph clock enable */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE); // PB5 (SMBA), PB6 (SCL), PB9 (SDA)  // RCC_APB2PeriphClockCmd(I2C1_GPIO_RCC, ENABLE);

  /* Configure I2C pins: SCL and SDA */
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_I2C1);
 8002942:	4c21      	ldr	r4, [pc, #132]	; (80029c8 <I2C_Configuration+0x8c>)
{
  GPIO_InitTypeDef  GPIO_InitStructure;
  I2C_InitTypeDef  I2C_InitStructure;

  /* I2C Periph clock enable */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);  //  RCC_APB1PeriphClockCmd(I2C1_RCC, ENABLE);
 8002944:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002948:	f7fe feb2 	bl	80016b0 <RCC_APB1PeriphClockCmd>
  /* GPIO Periph clock enable */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE); // PB5 (SMBA), PB6 (SCL), PB9 (SDA)  // RCC_APB2PeriphClockCmd(I2C1_GPIO_RCC, ENABLE);
 800294c:	2002      	movs	r0, #2
 800294e:	2101      	movs	r1, #1
 8002950:	f7fe fe8a 	bl	8001668 <RCC_AHB1PeriphClockCmd>

  /* Configure I2C pins: SCL and SDA */
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_I2C1);
 8002954:	4620      	mov	r0, r4
 8002956:	2106      	movs	r1, #6
 8002958:	2204      	movs	r2, #4
 800295a:	f7fe fb5d 	bl	8001018 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_I2C1);
 800295e:	2204      	movs	r2, #4
 8002960:	4620      	mov	r0, r4
 8002962:	2109      	movs	r1, #9
 8002964:	f7fe fb58 	bl	8001018 <GPIO_PinAFConfig>

  GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_6 | GPIO_Pin_9;
 8002968:	f44f 7310 	mov.w	r3, #576	; 0x240
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 800296c:	2501      	movs	r5, #1

  /* Configure I2C pins: SCL and SDA */
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_I2C1);
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_I2C1);

  GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_6 | GPIO_Pin_9;
 800296e:	9304      	str	r3, [sp, #16]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002970:	4620      	mov	r0, r4
  /* Configure I2C pins: SCL and SDA */
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_I2C1);
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_I2C1);

  GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_6 | GPIO_Pin_9;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002972:	2302      	movs	r3, #2
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002974:	a904      	add	r1, sp, #16
  /* Configure I2C pins: SCL and SDA */
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_I2C1);
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_I2C1);

  GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_6 | GPIO_Pin_9;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002976:	f88d 3015 	strb.w	r3, [sp, #21]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 800297a:	f88d 3014 	strb.w	r3, [sp, #20]
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_I2C1);
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_I2C1);

  GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_6 | GPIO_Pin_9;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 800297e:	f88d 5016 	strb.w	r5, [sp, #22]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8002982:	f88d 5017 	strb.w	r5, [sp, #23]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002986:	f7fe fac7 	bl	8000f18 <GPIO_Init>
//#if defined (REMAP_I2C1)
//Remap_I2C1_Configuration();
//#endif

  /* I2C configuration */
  I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 800298a:	2300      	movs	r3, #0
 800298c:	f8ad 3004 	strh.w	r3, [sp, #4]
  I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
 8002990:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8002994:	f8ad 3006 	strh.w	r3, [sp, #6]
  I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 8002998:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800299c:	f8ad 300a 	strh.w	r3, [sp, #10]
  I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 80029a0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80029a4:	f8ad 300c 	strh.w	r3, [sp, #12]
  I2C_InitStructure.I2C_ClockSpeed = I2C_CLOCK;
 80029a8:	a906      	add	r1, sp, #24
 80029aa:	4b08      	ldr	r3, [pc, #32]	; (80029cc <I2C_Configuration+0x90>)

  /* Apply I2C configuration after enabling it */
  I2C_Init(I2C1, &I2C_InitStructure);
 80029ac:	f5a4 34d8 	sub.w	r4, r4, #110592	; 0x1b000
  /* I2C configuration */
  I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
  I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
  I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
  I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
  I2C_InitStructure.I2C_ClockSpeed = I2C_CLOCK;
 80029b0:	f841 3d18 	str.w	r3, [r1, #-24]!

  /* Apply I2C configuration after enabling it */
  I2C_Init(I2C1, &I2C_InitStructure);
 80029b4:	4620      	mov	r0, r4
 80029b6:	4669      	mov	r1, sp
 80029b8:	f7fe fb72 	bl	80010a0 <I2C_Init>
  /* I2C Peripheral Enable */
  I2C_Cmd(I2C1, ENABLE);
 80029bc:	4620      	mov	r0, r4
 80029be:	4629      	mov	r1, r5
 80029c0:	f7fe fbe2 	bl	8001188 <I2C_Cmd>
}
 80029c4:	b007      	add	sp, #28
 80029c6:	bd30      	pop	{r4, r5, pc}
 80029c8:	40020400 	.word	0x40020400
 80029cc:	000186a0 	.word	0x000186a0

080029d0 <ST7032i_Command_Write>:
  * @brief  Write Command to ST7032i
  * @param  Data : Command Data
  * @retval None
  */
void ST7032i_Command_Write(uint8_t Data)
{
 80029d0:	b507      	push	{r0, r1, r2, lr}
	uint8_t data[] = { 0b00000000, Data };
 80029d2:	2300      	movs	r3, #0
 80029d4:	f88d 0005 	strb.w	r0, [sp, #5]
	i2c_transmit(ST7032I_ADDR, data, 2);
 80029d8:	a901      	add	r1, sp, #4
 80029da:	203e      	movs	r0, #62	; 0x3e
 80029dc:	2202      	movs	r2, #2
  * @param  Data : Command Data
  * @retval None
  */
void ST7032i_Command_Write(uint8_t Data)
{
	uint8_t data[] = { 0b00000000, Data };
 80029de:	f88d 3004 	strb.w	r3, [sp, #4]
	i2c_transmit(ST7032I_ADDR, data, 2);
 80029e2:	f7fd fd57 	bl	8000494 <i2c_transmit>
  I2C_SendData(I2C1, Data);
  /* Test on EV8 and clear it */
  while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
  /* Send STOP condition */
  I2C_GenerateSTOP(I2C1, ENABLE);
}
 80029e6:	bd0e      	pop	{r1, r2, r3, pc}

080029e8 <ST7032i_Icon_Off>:
  * @brief  Put off icon whili Icon RAM is kept
  * @param  None
  * @retval None
  */
void ST7032i_Icon_Off(void)
{
 80029e8:	b508      	push	{r3, lr}
  //Power/Icon/Contrast control
  ST7032i_Command_Write( (Power_Icon_Contrast | ( (Contrast >> 4) & 0b00000011 )) & 0b11110111);
 80029ea:	4b07      	ldr	r3, [pc, #28]	; (8002a08 <ST7032i_Icon_Off+0x20>)
 80029ec:	781a      	ldrb	r2, [r3, #0]
 80029ee:	7858      	ldrb	r0, [r3, #1]
 80029f0:	f3c0 1001 	ubfx	r0, r0, #4, #2
 80029f4:	4310      	orrs	r0, r2
 80029f6:	f000 00f7 	and.w	r0, r0, #247	; 0xf7
 80029fa:	f7ff ffe9 	bl	80029d0 <ST7032i_Command_Write>
  delay_us(27);
 80029fe:	201b      	movs	r0, #27
}
 8002a00:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  */
void ST7032i_Icon_Off(void)
{
  //Power/Icon/Contrast control
  ST7032i_Command_Write( (Power_Icon_Contrast | ( (Contrast >> 4) & 0b00000011 )) & 0b11110111);
  delay_us(27);
 8002a04:	f7fd bbc0 	b.w	8000188 <delay_us>
 8002a08:	200000b8 	.word	0x200000b8

08002a0c <ST7032i_Icon_On>:
  * @brief  Display icon
  * @param  None
  * @retval None
  */
void ST7032i_Icon_On(void)
{
 8002a0c:	b508      	push	{r3, lr}
  //Power/Icon/Contrast control
  ST7032i_Command_Write(Power_Icon_Contrast | ( (Contrast >> 4) & 0b00000011 ) | 0b00001000 );
 8002a0e:	4b07      	ldr	r3, [pc, #28]	; (8002a2c <ST7032i_Icon_On+0x20>)
 8002a10:	7818      	ldrb	r0, [r3, #0]
 8002a12:	785b      	ldrb	r3, [r3, #1]
 8002a14:	f040 0008 	orr.w	r0, r0, #8
 8002a18:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8002a1c:	4318      	orrs	r0, r3
 8002a1e:	f7ff ffd7 	bl	80029d0 <ST7032i_Command_Write>
  delay_us(27);
 8002a22:	201b      	movs	r0, #27
}
 8002a24:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  */
void ST7032i_Icon_On(void)
{
  //Power/Icon/Contrast control
  ST7032i_Command_Write(Power_Icon_Contrast | ( (Contrast >> 4) & 0b00000011 ) | 0b00001000 );
  delay_us(27);
 8002a28:	f7fd bbae 	b.w	8000188 <delay_us>
 8002a2c:	200000b8 	.word	0x200000b8

08002a30 <ST7032i_Set_Contrast>:
  * @brief  Set display contrast. value is to be 0 - 63
  * @param  contrast: contrast
  * @retval None
  */
void ST7032i_Set_Contrast(uint8_t contrast)
{
 8002a30:	b510      	push	{r4, lr}
 8002a32:	4604      	mov	r4, r0
  //Contrast set
  ST7032i_Command_Write(0b01110000 | (contrast & 0b00001111));
 8002a34:	f000 000f 	and.w	r0, r0, #15
 8002a38:	f040 0070 	orr.w	r0, r0, #112	; 0x70
 8002a3c:	f7ff ffc8 	bl	80029d0 <ST7032i_Command_Write>

  delay_us(27);
 8002a40:	201b      	movs	r0, #27
 8002a42:	f7fd fba1 	bl	8000188 <delay_us>

  //Power/Icon/Contrast control
  ST7032i_Command_Write(Power_Icon_Contrast | ( (contrast >> 4) & 0b00000011 ) );
 8002a46:	4b06      	ldr	r3, [pc, #24]	; (8002a60 <ST7032i_Set_Contrast+0x30>)
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	f3c4 1001 	ubfx	r0, r4, #4, #2
 8002a4e:	4318      	orrs	r0, r3
 8002a50:	f7ff ffbe 	bl	80029d0 <ST7032i_Command_Write>

  delay_us(27);
 8002a54:	201b      	movs	r0, #27
}
 8002a56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  delay_us(27);

  //Power/Icon/Contrast control
  ST7032i_Command_Write(Power_Icon_Contrast | ( (contrast >> 4) & 0b00000011 ) );

  delay_us(27);
 8002a5a:	f7fd bb95 	b.w	8000188 <delay_us>
 8002a5e:	bf00      	nop
 8002a60:	200000b8 	.word	0x200000b8

08002a64 <ST7032i_Set_DDRAM>:
  * @brief  set DDRAM address
  * @param  address : DDRAM address
  * @retval None
  */
void ST7032i_Set_DDRAM(uint8_t address)
{
 8002a64:	b510      	push	{r4, lr}
 8002a66:	4604      	mov	r4, r0
  ST7032i_Command_Write(0b10000000 | address);
 8002a68:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8002a6c:	f7ff ffb0 	bl	80029d0 <ST7032i_Command_Write>
  DDRAM_Address = address;
 8002a70:	4b03      	ldr	r3, [pc, #12]	; (8002a80 <ST7032i_Set_DDRAM+0x1c>)
  delay_us(27);
 8002a72:	201b      	movs	r0, #27
  * @retval None
  */
void ST7032i_Set_DDRAM(uint8_t address)
{
  ST7032i_Command_Write(0b10000000 | address);
  DDRAM_Address = address;
 8002a74:	701c      	strb	r4, [r3, #0]
  delay_us(27);
}
 8002a76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  */
void ST7032i_Set_DDRAM(uint8_t address)
{
  ST7032i_Command_Write(0b10000000 | address);
  DDRAM_Address = address;
  delay_us(27);
 8002a7a:	f7fd bb85 	b.w	8000188 <delay_us>
 8002a7e:	bf00      	nop
 8002a80:	200009b4 	.word	0x200009b4

08002a84 <ST7032i_Cursor_Blink_Off>:
  * @brief  display square cursor
  * @param  None
  * @retval None
  */
void ST7032i_Cursor_Blink_Off(void)
{
 8002a84:	b508      	push	{r3, lr}
  ST7032i_Command_Write(( Display & 0b11111110) | 0b00000000);
 8002a86:	4b05      	ldr	r3, [pc, #20]	; (8002a9c <ST7032i_Cursor_Blink_Off+0x18>)
 8002a88:	7898      	ldrb	r0, [r3, #2]
 8002a8a:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
 8002a8e:	f7ff ff9f 	bl	80029d0 <ST7032i_Command_Write>
  delay_us(27);
 8002a92:	201b      	movs	r0, #27
}
 8002a94:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  * @retval None
  */
void ST7032i_Cursor_Blink_Off(void)
{
  ST7032i_Command_Write(( Display & 0b11111110) | 0b00000000);
  delay_us(27);
 8002a98:	f7fd bb76 	b.w	8000188 <delay_us>
 8002a9c:	200000b8 	.word	0x200000b8

08002aa0 <ST7032i_Cursor_Blink_On>:
  * @brief  make square cursor brink
  * @param  None
  * @retval None
  */
void ST7032i_Cursor_Blink_On(void)
{
 8002aa0:	b508      	push	{r3, lr}
  ST7032i_Command_Write(( Display & 0b11111110) | 0b00000001);
 8002aa2:	4b05      	ldr	r3, [pc, #20]	; (8002ab8 <ST7032i_Cursor_Blink_On+0x18>)
 8002aa4:	7898      	ldrb	r0, [r3, #2]
 8002aa6:	f040 0001 	orr.w	r0, r0, #1
 8002aaa:	f7ff ff91 	bl	80029d0 <ST7032i_Command_Write>
  delay_us(27);
 8002aae:	201b      	movs	r0, #27
}
 8002ab0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  * @retval None
  */
void ST7032i_Cursor_Blink_On(void)
{
  ST7032i_Command_Write(( Display & 0b11111110) | 0b00000001);
  delay_us(27);
 8002ab4:	f7fd bb68 	b.w	8000188 <delay_us>
 8002ab8:	200000b8 	.word	0x200000b8

08002abc <ST7032i_Cursor_Off>:
  * @brief  put off cursor
  * @param  None
  * @retval None
  */
void ST7032i_Cursor_Off(void)
{
 8002abc:	b508      	push	{r3, lr}
  ST7032i_Command_Write(( Display & 0b11111101) | 0b00000000);
 8002abe:	4b05      	ldr	r3, [pc, #20]	; (8002ad4 <ST7032i_Cursor_Off+0x18>)
 8002ac0:	7898      	ldrb	r0, [r3, #2]
 8002ac2:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
 8002ac6:	f7ff ff83 	bl	80029d0 <ST7032i_Command_Write>
  delay_us(27);
 8002aca:	201b      	movs	r0, #27
}
 8002acc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  * @retval None
  */
void ST7032i_Cursor_Off(void)
{
  ST7032i_Command_Write(( Display & 0b11111101) | 0b00000000);
  delay_us(27);
 8002ad0:	f7fd bb5a 	b.w	8000188 <delay_us>
 8002ad4:	200000b8 	.word	0x200000b8

08002ad8 <ST7032i_Cursor_On>:
  * @brief  display under line cursor
  * @param  None
  * @retval None
  */
void ST7032i_Cursor_On(void)
{
 8002ad8:	b508      	push	{r3, lr}
  ST7032i_Command_Write(( Display & 0b11111101) | 0b00000010);
 8002ada:	4b05      	ldr	r3, [pc, #20]	; (8002af0 <ST7032i_Cursor_On+0x18>)
 8002adc:	7898      	ldrb	r0, [r3, #2]
 8002ade:	f040 0002 	orr.w	r0, r0, #2
 8002ae2:	f7ff ff75 	bl	80029d0 <ST7032i_Command_Write>
  delay_us(27);
 8002ae6:	201b      	movs	r0, #27
}
 8002ae8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  * @retval None
  */
void ST7032i_Cursor_On(void)
{
  ST7032i_Command_Write(( Display & 0b11111101) | 0b00000010);
  delay_us(27);
 8002aec:	f7fd bb4c 	b.w	8000188 <delay_us>
 8002af0:	200000b8 	.word	0x200000b8

08002af4 <ST7032i_Display_Off>:
  * @brief  put off display while DDRAM is kept
  * @param  None
  * @retval None
  */
void ST7032i_Display_Off(void)
{
 8002af4:	b508      	push	{r3, lr}
  ST7032i_Command_Write(( Display & 0b11111011) | 0b00000000);
 8002af6:	4b05      	ldr	r3, [pc, #20]	; (8002b0c <ST7032i_Display_Off+0x18>)
 8002af8:	7898      	ldrb	r0, [r3, #2]
 8002afa:	f000 00fb 	and.w	r0, r0, #251	; 0xfb
 8002afe:	f7ff ff67 	bl	80029d0 <ST7032i_Command_Write>
  delay_us(27);
 8002b02:	201b      	movs	r0, #27
}
 8002b04:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  * @retval None
  */
void ST7032i_Display_Off(void)
{
  ST7032i_Command_Write(( Display & 0b11111011) | 0b00000000);
  delay_us(27);
 8002b08:	f7fd bb3e 	b.w	8000188 <delay_us>
 8002b0c:	200000b8 	.word	0x200000b8

08002b10 <ST7032i_Display_On>:
  * @brief  put on display
  * @param  None
  * @retval None
  */
void ST7032i_Display_On(void)
{
 8002b10:	b508      	push	{r3, lr}
  ST7032i_Command_Write(( Display & 0b11111011) | 0b00000100);
 8002b12:	4b05      	ldr	r3, [pc, #20]	; (8002b28 <ST7032i_Display_On+0x18>)
 8002b14:	7898      	ldrb	r0, [r3, #2]
 8002b16:	f040 0004 	orr.w	r0, r0, #4
 8002b1a:	f7ff ff59 	bl	80029d0 <ST7032i_Command_Write>
  delay_us(27);
 8002b1e:	201b      	movs	r0, #27
}
 8002b20:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  * @retval None
  */
void ST7032i_Display_On(void)
{
  ST7032i_Command_Write(( Display & 0b11111011) | 0b00000100);
  delay_us(27);
 8002b24:	f7fd bb30 	b.w	8000188 <delay_us>
 8002b28:	200000b8 	.word	0x200000b8

08002b2c <ST7032i_Shift_Disable>:
  * @brief  disables shift fucntion
  * @param  None
  * @retval None
  */
void ST7032i_Shift_Disable(void)
{
 8002b2c:	b508      	push	{r3, lr}
  ST7032i_Command_Write(( Entry_Mode & 0b11111110) | 0b00000000);
 8002b2e:	4b07      	ldr	r3, [pc, #28]	; (8002b4c <ST7032i_Shift_Disable+0x20>)
 8002b30:	78d8      	ldrb	r0, [r3, #3]
 8002b32:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
 8002b36:	f7ff ff4b 	bl	80029d0 <ST7032i_Command_Write>
  Shift = 0;
 8002b3a:	4b05      	ldr	r3, [pc, #20]	; (8002b50 <ST7032i_Shift_Disable+0x24>)
 8002b3c:	2200      	movs	r2, #0
  delay_us(27);
 8002b3e:	201b      	movs	r0, #27
  * @retval None
  */
void ST7032i_Shift_Disable(void)
{
  ST7032i_Command_Write(( Entry_Mode & 0b11111110) | 0b00000000);
  Shift = 0;
 8002b40:	705a      	strb	r2, [r3, #1]
  delay_us(27);
}
 8002b42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  */
void ST7032i_Shift_Disable(void)
{
  ST7032i_Command_Write(( Entry_Mode & 0b11111110) | 0b00000000);
  Shift = 0;
  delay_us(27);
 8002b46:	f7fd bb1f 	b.w	8000188 <delay_us>
 8002b4a:	bf00      	nop
 8002b4c:	200000b8 	.word	0x200000b8
 8002b50:	200009b4 	.word	0x200009b4

08002b54 <ST7032i_Shift_Enable>:
  * @brief  shift entire display data is send
  * @param  None
  * @retval None
  */
void ST7032i_Shift_Enable(void)
{
 8002b54:	b508      	push	{r3, lr}
  ST7032i_Command_Write(( Entry_Mode & 0b11111110) | 0b00000001);
 8002b56:	4b07      	ldr	r3, [pc, #28]	; (8002b74 <ST7032i_Shift_Enable+0x20>)
 8002b58:	78d8      	ldrb	r0, [r3, #3]
 8002b5a:	f040 0001 	orr.w	r0, r0, #1
 8002b5e:	f7ff ff37 	bl	80029d0 <ST7032i_Command_Write>
  Shift = 1;
 8002b62:	4b05      	ldr	r3, [pc, #20]	; (8002b78 <ST7032i_Shift_Enable+0x24>)
 8002b64:	2201      	movs	r2, #1
  delay_us(27);
 8002b66:	201b      	movs	r0, #27
  * @retval None
  */
void ST7032i_Shift_Enable(void)
{
  ST7032i_Command_Write(( Entry_Mode & 0b11111110) | 0b00000001);
  Shift = 1;
 8002b68:	705a      	strb	r2, [r3, #1]
  delay_us(27);
}
 8002b6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  */
void ST7032i_Shift_Enable(void)
{
  ST7032i_Command_Write(( Entry_Mode & 0b11111110) | 0b00000001);
  Shift = 1;
  delay_us(27);
 8002b6e:	f7fd bb0b 	b.w	8000188 <delay_us>
 8002b72:	bf00      	nop
 8002b74:	200000b8 	.word	0x200000b8
 8002b78:	200009b4 	.word	0x200009b4

08002b7c <ST7032i_Decrement>:
  * @brief  decrement address when data is send and put
  * @param  None
  * @retval None
  */
void ST7032i_Decrement(void)
{
 8002b7c:	b510      	push	{r4, lr}
  ST7032i_Command_Write(( Entry_Mode & 0b11111101) | 0b00000000);
 8002b7e:	4c06      	ldr	r4, [pc, #24]	; (8002b98 <ST7032i_Decrement+0x1c>)
 8002b80:	78e0      	ldrb	r0, [r4, #3]
 8002b82:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
 8002b86:	f7ff ff23 	bl	80029d0 <ST7032i_Command_Write>
  Increment = -1;
 8002b8a:	23ff      	movs	r3, #255	; 0xff
  delay_us(27);
 8002b8c:	201b      	movs	r0, #27
  * @retval None
  */
void ST7032i_Decrement(void)
{
  ST7032i_Command_Write(( Entry_Mode & 0b11111101) | 0b00000000);
  Increment = -1;
 8002b8e:	7123      	strb	r3, [r4, #4]
  delay_us(27);
}
 8002b90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  */
void ST7032i_Decrement(void)
{
  ST7032i_Command_Write(( Entry_Mode & 0b11111101) | 0b00000000);
  Increment = -1;
  delay_us(27);
 8002b94:	f7fd baf8 	b.w	8000188 <delay_us>
 8002b98:	200000b8 	.word	0x200000b8

08002b9c <ST7032i_Increment>:
  * @brief  increment address when data is send and put
  * @param  None
  * @retval None
  */
void ST7032i_Increment(void)
{
 8002b9c:	b510      	push	{r4, lr}
  ST7032i_Command_Write(( Entry_Mode & 0b11111101) | 0b00000010);
 8002b9e:	4c06      	ldr	r4, [pc, #24]	; (8002bb8 <ST7032i_Increment+0x1c>)
 8002ba0:	78e0      	ldrb	r0, [r4, #3]
 8002ba2:	f040 0002 	orr.w	r0, r0, #2
 8002ba6:	f7ff ff13 	bl	80029d0 <ST7032i_Command_Write>
  Increment = 1;
 8002baa:	2301      	movs	r3, #1
  delay_us(27);
 8002bac:	201b      	movs	r0, #27
  * @retval None
  */
void ST7032i_Increment(void)
{
  ST7032i_Command_Write(( Entry_Mode & 0b11111101) | 0b00000010);
  Increment = 1;
 8002bae:	7123      	strb	r3, [r4, #4]
  delay_us(27);
}
 8002bb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  */
void ST7032i_Increment(void)
{
  ST7032i_Command_Write(( Entry_Mode & 0b11111101) | 0b00000010);
  Increment = 1;
  delay_us(27);
 8002bb4:	f7fd bae8 	b.w	8000188 <delay_us>
 8002bb8:	200000b8 	.word	0x200000b8

08002bbc <ST7032i_Return>:
  * @brief  Return to home position
  * @param  None
  * @retval None
  */
void ST7032i_Return(void)
{
 8002bbc:	b508      	push	{r3, lr}
  ST7032i_Command_Write(0b00000010);
 8002bbe:	2002      	movs	r0, #2
 8002bc0:	f7ff ff06 	bl	80029d0 <ST7032i_Command_Write>
  DDRAM_Address = 0;
 8002bc4:	4b03      	ldr	r3, [pc, #12]	; (8002bd4 <ST7032i_Return+0x18>)
 8002bc6:	2200      	movs	r2, #0
  delay_ms(2);
 8002bc8:	2002      	movs	r0, #2
  * @retval None
  */
void ST7032i_Return(void)
{
  ST7032i_Command_Write(0b00000010);
  DDRAM_Address = 0;
 8002bca:	701a      	strb	r2, [r3, #0]
  delay_ms(2);
}
 8002bcc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  */
void ST7032i_Return(void)
{
  ST7032i_Command_Write(0b00000010);
  DDRAM_Address = 0;
  delay_ms(2);
 8002bd0:	f7fd bb04 	b.w	80001dc <delay_ms>
 8002bd4:	200009b4 	.word	0x200009b4

08002bd8 <ST7032i_Clear>:
  * @brief  Clear Display
  * @param  None
  * @retval None
  */
void ST7032i_Clear(void)
{
 8002bd8:	b508      	push	{r3, lr}
  uint32_t i;

  ST7032i_Command_Write(0b00000001);
 8002bda:	2001      	movs	r0, #1
 8002bdc:	f7ff fef8 	bl	80029d0 <ST7032i_Command_Write>
  DDRAM_Address = 0;
 8002be0:	4a07      	ldr	r2, [pc, #28]	; (8002c00 <ST7032i_Clear+0x28>)
  for(i=0;i<16;i++)
    {
      DDRAM_Data[0][i] =  ' ';
 8002be2:	4908      	ldr	r1, [pc, #32]	; (8002c04 <ST7032i_Clear+0x2c>)
void ST7032i_Clear(void)
{
  uint32_t i;

  ST7032i_Command_Write(0b00000001);
  DDRAM_Address = 0;
 8002be4:	2300      	movs	r3, #0
 8002be6:	7013      	strb	r3, [r2, #0]
  for(i=0;i<16;i++)
    {
      DDRAM_Data[0][i] =  ' ';
 8002be8:	2220      	movs	r2, #32
 8002bea:	54ca      	strb	r2, [r1, r3]
      DDRAM_Data[1][i] =  ' ';
 8002bec:	18c8      	adds	r0, r1, r3
{
  uint32_t i;

  ST7032i_Command_Write(0b00000001);
  DDRAM_Address = 0;
  for(i=0;i<16;i++)
 8002bee:	3301      	adds	r3, #1
 8002bf0:	2b10      	cmp	r3, #16
    {
      DDRAM_Data[0][i] =  ' ';
      DDRAM_Data[1][i] =  ' ';
 8002bf2:	7402      	strb	r2, [r0, #16]
{
  uint32_t i;

  ST7032i_Command_Write(0b00000001);
  DDRAM_Address = 0;
  for(i=0;i<16;i++)
 8002bf4:	d1f9      	bne.n	8002bea <ST7032i_Clear+0x12>
    {
      DDRAM_Data[0][i] =  ' ';
      DDRAM_Data[1][i] =  ' ';
    }
  delay_ms(2);
 8002bf6:	2002      	movs	r0, #2
}
 8002bf8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  for(i=0;i<16;i++)
    {
      DDRAM_Data[0][i] =  ' ';
      DDRAM_Data[1][i] =  ' ';
    }
  delay_ms(2);
 8002bfc:	f7fd baee 	b.w	80001dc <delay_ms>
 8002c00:	200009b4 	.word	0x200009b4
 8002c04:	20001648 	.word	0x20001648

08002c08 <ST7032i_Init>:
  * @brief  Initialize ST7032i LCD and I2C interface
  * @param  None
  * @retval None
  */
void ST7032i_Init(void)
{
 8002c08:	b510      	push	{r4, lr}
//  delay_ms(40);

//  I2C_Configuration();

  //Function Set
  ST7032i_Command_Write(0b00111000);
 8002c0a:	2038      	movs	r0, #56	; 0x38
 8002c0c:	f7ff fee0 	bl	80029d0 <ST7032i_Command_Write>

  delay_us(27);
 8002c10:	201b      	movs	r0, #27
 8002c12:	f7fd fab9 	bl	8000188 <delay_us>

  //Function Set
  ST7032i_Command_Write(0b00111001);
 8002c16:	2039      	movs	r0, #57	; 0x39
 8002c18:	f7ff feda 	bl	80029d0 <ST7032i_Command_Write>

  delay_us(27);
 8002c1c:	201b      	movs	r0, #27
 8002c1e:	f7fd fab3 	bl	8000188 <delay_us>

  //Bias and OSC frequency
  ST7032i_Command_Write(0b00010100);
 8002c22:	2014      	movs	r0, #20
 8002c24:	f7ff fed4 	bl	80029d0 <ST7032i_Command_Write>

  delay_us(27);
 8002c28:	201b      	movs	r0, #27
  ST7032i_Command_Write(0b01110000);

  delay_us(27);

  //Power/Icon/Contrast control
  ST7032i_Command_Write(Power_Icon_Contrast);
 8002c2a:	4c16      	ldr	r4, [pc, #88]	; (8002c84 <ST7032i_Init+0x7c>)
  delay_us(27);

  //Bias and OSC frequency
  ST7032i_Command_Write(0b00010100);

  delay_us(27);
 8002c2c:	f7fd faac 	bl	8000188 <delay_us>

  //Contrast set
  ST7032i_Command_Write(0b01110000);
 8002c30:	2070      	movs	r0, #112	; 0x70
 8002c32:	f7ff fecd 	bl	80029d0 <ST7032i_Command_Write>

  delay_us(27);
 8002c36:	201b      	movs	r0, #27
 8002c38:	f7fd faa6 	bl	8000188 <delay_us>

  //Power/Icon/Contrast control
  ST7032i_Command_Write(Power_Icon_Contrast);
 8002c3c:	7820      	ldrb	r0, [r4, #0]
 8002c3e:	f7ff fec7 	bl	80029d0 <ST7032i_Command_Write>

  delay_us(27);
 8002c42:	201b      	movs	r0, #27
 8002c44:	f7fd faa0 	bl	8000188 <delay_us>

  //Contrast set
  ST7032i_Set_Contrast(Contrast);
 8002c48:	7860      	ldrb	r0, [r4, #1]
 8002c4a:	f7ff fef1 	bl	8002a30 <ST7032i_Set_Contrast>

  //Follower control
  ST7032i_Command_Write(0b01101100);
 8002c4e:	206c      	movs	r0, #108	; 0x6c
 8002c50:	f7ff febe 	bl	80029d0 <ST7032i_Command_Write>

  delay_ms(200);
 8002c54:	20c8      	movs	r0, #200	; 0xc8
 8002c56:	f7fd fac1 	bl	80001dc <delay_ms>

  //Function Set
  ST7032i_Command_Write(0b00111001);
 8002c5a:	2039      	movs	r0, #57	; 0x39
 8002c5c:	f7ff feb8 	bl	80029d0 <ST7032i_Command_Write>

  delay_us(27);
 8002c60:	201b      	movs	r0, #27
 8002c62:	f7fd fa91 	bl	8000188 <delay_us>

  //Entry mode
  ST7032i_Command_Write(Entry_Mode);
 8002c66:	78e0      	ldrb	r0, [r4, #3]
 8002c68:	f7ff feb2 	bl	80029d0 <ST7032i_Command_Write>

  delay_us(27);
 8002c6c:	201b      	movs	r0, #27
 8002c6e:	f7fd fa8b 	bl	8000188 <delay_us>

  //Display control : on
  ST7032i_Command_Write(Display);
 8002c72:	78a0      	ldrb	r0, [r4, #2]
 8002c74:	f7ff feac 	bl	80029d0 <ST7032i_Command_Write>

  delay_us(27);
 8002c78:	201b      	movs	r0, #27
 8002c7a:	f7fd fa85 	bl	8000188 <delay_us>

  //Clear
  ST7032i_Clear();
}
 8002c7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ST7032i_Command_Write(Display);

  delay_us(27);

  //Clear
  ST7032i_Clear();
 8002c82:	e7a9      	b.n	8002bd8 <ST7032i_Clear>
 8002c84:	200000b8 	.word	0x200000b8

08002c88 <ST7032i_Data_Write>:
  * @brief  Write Data to ST7032i
  * @param  Data : "Data" Data
  * @retval None
  */
void ST7032i_Data_Write(uint8_t Data)
{
 8002c88:	b507      	push	{r0, r1, r2, lr}
	uint8_t data[] = { 0b01000000, Data };
 8002c8a:	2340      	movs	r3, #64	; 0x40
 8002c8c:	f88d 0005 	strb.w	r0, [sp, #5]
	i2c_transmit(ST7032I_ADDR, data, 2);
 8002c90:	a901      	add	r1, sp, #4
 8002c92:	203e      	movs	r0, #62	; 0x3e
 8002c94:	2202      	movs	r2, #2
  * @param  Data : "Data" Data
  * @retval None
  */
void ST7032i_Data_Write(uint8_t Data)
{
	uint8_t data[] = { 0b01000000, Data };
 8002c96:	f88d 3004 	strb.w	r3, [sp, #4]
	i2c_transmit(ST7032I_ADDR, data, 2);
 8002c9a:	f7fd fbfb 	bl	8000494 <i2c_transmit>
  I2C_SendData(I2C1, Data);
  /* Test on EV8 and clear it */
  while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
  /* Send STOP condition */
  I2C_GenerateSTOP(I2C1, ENABLE);
}
 8002c9e:	bd0e      	pop	{r1, r2, r3, pc}

08002ca0 <ST7032i_Putchar>:
  * @brief  put character on st7032i lcd
  * @param  None
  * @retval None
  */
void ST7032i_Putchar(int8_t chardata)
{
 8002ca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ca4:	4604      	mov	r4, r0
  uint32_t i;

  ST7032i_Data_Write((uint8_t)chardata);
 8002ca6:	b2c0      	uxtb	r0, r0
 8002ca8:	f7ff ffee 	bl	8002c88 <ST7032i_Data_Write>
  delay_us(27);
 8002cac:	201b      	movs	r0, #27
 8002cae:	f7fd fa6b 	bl	8000188 <delay_us>
  if(DDRAM_Address < 0x10)
 8002cb2:	4b57      	ldr	r3, [pc, #348]	; (8002e10 <ST7032i_Putchar+0x170>)
 8002cb4:	781a      	ldrb	r2, [r3, #0]
 8002cb6:	2a0f      	cmp	r2, #15
    {
      DDRAM_Data[0][DDRAM_Address] = chardata;
 8002cb8:	781a      	ldrb	r2, [r3, #0]
{
  uint32_t i;

  ST7032i_Data_Write((uint8_t)chardata);
  delay_us(27);
  if(DDRAM_Address < 0x10)
 8002cba:	d802      	bhi.n	8002cc2 <ST7032i_Putchar+0x22>
    {
      DDRAM_Data[0][DDRAM_Address] = chardata;
 8002cbc:	4955      	ldr	r1, [pc, #340]	; (8002e14 <ST7032i_Putchar+0x174>)
 8002cbe:	548c      	strb	r4, [r1, r2]
 8002cc0:	e008      	b.n	8002cd4 <ST7032i_Putchar+0x34>
    }
  else if (DDRAM_Address >= 0x40 && DDRAM_Address < 0x50)
 8002cc2:	2a3f      	cmp	r2, #63	; 0x3f
 8002cc4:	d906      	bls.n	8002cd4 <ST7032i_Putchar+0x34>
 8002cc6:	781a      	ldrb	r2, [r3, #0]
 8002cc8:	2a4f      	cmp	r2, #79	; 0x4f
 8002cca:	d803      	bhi.n	8002cd4 <ST7032i_Putchar+0x34>
    {
      DDRAM_Data[1][DDRAM_Address - 0x40] = chardata;
 8002ccc:	7819      	ldrb	r1, [r3, #0]
 8002cce:	4a52      	ldr	r2, [pc, #328]	; (8002e18 <ST7032i_Putchar+0x178>)
 8002cd0:	188a      	adds	r2, r1, r2
 8002cd2:	7414      	strb	r4, [r2, #16]
    }
  if (Shift == 0)
 8002cd4:	785b      	ldrb	r3, [r3, #1]
 8002cd6:	4a4e      	ldr	r2, [pc, #312]	; (8002e10 <ST7032i_Putchar+0x170>)
 8002cd8:	b933      	cbnz	r3, 8002ce8 <ST7032i_Putchar+0x48>
    {
      DDRAM_Address = DDRAM_Address + Increment;
 8002cda:	4b50      	ldr	r3, [pc, #320]	; (8002e1c <ST7032i_Putchar+0x17c>)
 8002cdc:	7811      	ldrb	r1, [r2, #0]
 8002cde:	791b      	ldrb	r3, [r3, #4]
 8002ce0:	18cb      	adds	r3, r1, r3
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	7013      	strb	r3, [r2, #0]
 8002ce6:	e032      	b.n	8002d4e <ST7032i_Putchar+0xae>
    }
  else if (Shift == 1 && Increment == 1)
 8002ce8:	7853      	ldrb	r3, [r2, #1]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d116      	bne.n	8002d1c <ST7032i_Putchar+0x7c>
 8002cee:	4b4b      	ldr	r3, [pc, #300]	; (8002e1c <ST7032i_Putchar+0x17c>)
 8002cf0:	791b      	ldrb	r3, [r3, #4]
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d112      	bne.n	8002d1c <ST7032i_Putchar+0x7c>
 8002cf6:	2200      	movs	r2, #0
    {
      for (i = 0 ; i< 15; i++)
        {
          DDRAM_Data[0][i] = DDRAM_Data[0][i+1];
 8002cf8:	4b46      	ldr	r3, [pc, #280]	; (8002e14 <ST7032i_Putchar+0x174>)
 8002cfa:	e000      	b.n	8002cfe <ST7032i_Putchar+0x5e>
    {
      DDRAM_Address = DDRAM_Address + Increment;
    }
  else if (Shift == 1 && Increment == 1)
    {
      for (i = 0 ; i< 15; i++)
 8002cfc:	460a      	mov	r2, r1
        {
          DDRAM_Data[0][i] = DDRAM_Data[0][i+1];
 8002cfe:	1c51      	adds	r1, r2, #1
    {
      DDRAM_Address = DDRAM_Address + Increment;
    }
  else if (Shift == 1 && Increment == 1)
    {
      for (i = 0 ; i< 15; i++)
 8002d00:	290f      	cmp	r1, #15
        {
          DDRAM_Data[0][i] = DDRAM_Data[0][i+1];
 8002d02:	5c5c      	ldrb	r4, [r3, r1]
 8002d04:	4843      	ldr	r0, [pc, #268]	; (8002e14 <ST7032i_Putchar+0x174>)
 8002d06:	549c      	strb	r4, [r3, r2]
          DDRAM_Data[1][i] = DDRAM_Data[1][i+1];
 8002d08:	eb03 0401 	add.w	r4, r3, r1
 8002d0c:	441a      	add	r2, r3
 8002d0e:	7c24      	ldrb	r4, [r4, #16]
 8002d10:	7414      	strb	r4, [r2, #16]
    {
      DDRAM_Address = DDRAM_Address + Increment;
    }
  else if (Shift == 1 && Increment == 1)
    {
      for (i = 0 ; i< 15; i++)
 8002d12:	d1f3      	bne.n	8002cfc <ST7032i_Putchar+0x5c>
        {
          DDRAM_Data[0][i] = DDRAM_Data[0][i+1];
          DDRAM_Data[1][i] = DDRAM_Data[1][i+1];
        }
      DDRAM_Data[0][15] = ' ';
 8002d14:	2320      	movs	r3, #32
 8002d16:	73c3      	strb	r3, [r0, #15]
      DDRAM_Data[1][15] = ' ';
 8002d18:	77c3      	strb	r3, [r0, #31]
 8002d1a:	e018      	b.n	8002d4e <ST7032i_Putchar+0xae>
    }
  else if (Shift == 1 && Increment == -1)
 8002d1c:	4b3c      	ldr	r3, [pc, #240]	; (8002e10 <ST7032i_Putchar+0x170>)
 8002d1e:	785b      	ldrb	r3, [r3, #1]
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d114      	bne.n	8002d4e <ST7032i_Putchar+0xae>
 8002d24:	4b3d      	ldr	r3, [pc, #244]	; (8002e1c <ST7032i_Putchar+0x17c>)
 8002d26:	791b      	ldrb	r3, [r3, #4]
 8002d28:	b25b      	sxtb	r3, r3
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	d10f      	bne.n	8002d4e <ST7032i_Putchar+0xae>
    {
      for (i = 15 ; i> 0; i--)
        {
          DDRAM_Data[0][i] = DDRAM_Data[0][i-1];
 8002d2e:	4a39      	ldr	r2, [pc, #228]	; (8002e14 <ST7032i_Putchar+0x174>)
          DDRAM_Data[1][i] = DDRAM_Data[1][i+1];
        }
      DDRAM_Data[0][15] = ' ';
      DDRAM_Data[1][15] = ' ';
    }
  else if (Shift == 1 && Increment == -1)
 8002d30:	230f      	movs	r3, #15
/**
  * @brief  put character on st7032i lcd
  * @param  None
  * @retval None
  */
void ST7032i_Putchar(int8_t chardata)
 8002d32:	1e59      	subs	r1, r3, #1
    }
  else if (Shift == 1 && Increment == -1)
    {
      for (i = 15 ; i> 0; i--)
        {
          DDRAM_Data[0][i] = DDRAM_Data[0][i-1];
 8002d34:	4837      	ldr	r0, [pc, #220]	; (8002e14 <ST7032i_Putchar+0x174>)
 8002d36:	5c54      	ldrb	r4, [r2, r1]
 8002d38:	54d4      	strb	r4, [r2, r3]
          DDRAM_Data[1][i] = DDRAM_Data[1][i-1];
 8002d3a:	1854      	adds	r4, r2, r1
 8002d3c:	18d3      	adds	r3, r2, r3
 8002d3e:	7c24      	ldrb	r4, [r4, #16]
 8002d40:	741c      	strb	r4, [r3, #16]
      DDRAM_Data[0][15] = ' ';
      DDRAM_Data[1][15] = ' ';
    }
  else if (Shift == 1 && Increment == -1)
    {
      for (i = 15 ; i> 0; i--)
 8002d42:	460b      	mov	r3, r1
 8002d44:	2900      	cmp	r1, #0
 8002d46:	d1f4      	bne.n	8002d32 <ST7032i_Putchar+0x92>
        {
          DDRAM_Data[0][i] = DDRAM_Data[0][i-1];
          DDRAM_Data[1][i] = DDRAM_Data[1][i-1];
        }
      DDRAM_Data[0][0] = ' ';
 8002d48:	2320      	movs	r3, #32
 8002d4a:	7003      	strb	r3, [r0, #0]
      DDRAM_Data[1][0] = ' ';
 8002d4c:	7403      	strb	r3, [r0, #16]
    }

  if (DDRAM_Address == 0x10)
 8002d4e:	4b30      	ldr	r3, [pc, #192]	; (8002e10 <ST7032i_Putchar+0x170>)
 8002d50:	781a      	ldrb	r2, [r3, #0]
 8002d52:	2a10      	cmp	r2, #16
 8002d54:	d109      	bne.n	8002d6a <ST7032i_Putchar+0xca>
    {
      DDRAM_Address = 0x40;
 8002d56:	2240      	movs	r2, #64	; 0x40
 8002d58:	701a      	strb	r2, [r3, #0]
      ST7032i_Command_Write(0b10000000 | DDRAM_Address);
 8002d5a:	7818      	ldrb	r0, [r3, #0]
 8002d5c:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8002d60:	f7ff fe36 	bl	80029d0 <ST7032i_Command_Write>
      delay_us(27);
 8002d64:	201b      	movs	r0, #27
 8002d66:	f7fd fa0f 	bl	8000188 <delay_us>
    }

  if (DDRAM_Address == 0x3F)
 8002d6a:	4b29      	ldr	r3, [pc, #164]	; (8002e10 <ST7032i_Putchar+0x170>)
 8002d6c:	781a      	ldrb	r2, [r3, #0]
 8002d6e:	2a3f      	cmp	r2, #63	; 0x3f
 8002d70:	d109      	bne.n	8002d86 <ST7032i_Putchar+0xe6>
    {
      DDRAM_Address = 0x0F;
 8002d72:	220f      	movs	r2, #15
 8002d74:	701a      	strb	r2, [r3, #0]
      ST7032i_Command_Write(0b10000000 | DDRAM_Address);
 8002d76:	7818      	ldrb	r0, [r3, #0]
 8002d78:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8002d7c:	f7ff fe28 	bl	80029d0 <ST7032i_Command_Write>
      delay_us(27);
 8002d80:	201b      	movs	r0, #27
 8002d82:	f7fd fa01 	bl	8000188 <delay_us>
    }

  if (DDRAM_Address == 0xFF)
 8002d86:	4b22      	ldr	r3, [pc, #136]	; (8002e10 <ST7032i_Putchar+0x170>)
 8002d88:	781a      	ldrb	r2, [r3, #0]
 8002d8a:	2aff      	cmp	r2, #255	; 0xff
 8002d8c:	d109      	bne.n	8002da2 <ST7032i_Putchar+0x102>
    {
      DDRAM_Address = 0x0;
 8002d8e:	2200      	movs	r2, #0
 8002d90:	701a      	strb	r2, [r3, #0]
      ST7032i_Command_Write(0b10000000 | DDRAM_Address);
 8002d92:	7818      	ldrb	r0, [r3, #0]
 8002d94:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8002d98:	f7ff fe1a 	bl	80029d0 <ST7032i_Command_Write>
      delay_us(27);
 8002d9c:	201b      	movs	r0, #27
 8002d9e:	f7fd f9f3 	bl	8000188 <delay_us>
    }

  if (DDRAM_Address == 0x50)
 8002da2:	4b1b      	ldr	r3, [pc, #108]	; (8002e10 <ST7032i_Putchar+0x170>)
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	2b50      	cmp	r3, #80	; 0x50
 8002da8:	d130      	bne.n	8002e0c <ST7032i_Putchar+0x16c>
    {
      for(i=0;i<16;i++)
        {
          DDRAM_Data[0][i] =  DDRAM_Data[1][i];
 8002daa:	4d1a      	ldr	r5, [pc, #104]	; (8002e14 <ST7032i_Putchar+0x174>)
      DDRAM_Address = 0x0;
      ST7032i_Command_Write(0b10000000 | DDRAM_Address);
      delay_us(27);
    }

  if (DDRAM_Address == 0x50)
 8002dac:	2400      	movs	r4, #0
    {
      for(i=0;i<16;i++)
        {
          DDRAM_Data[0][i] =  DDRAM_Data[1][i];
 8002dae:	192b      	adds	r3, r5, r4
          ST7032i_Command_Write(0b10000000 | (0x00 + i));
 8002db0:	f064 007f 	orn	r0, r4, #127	; 0x7f

  if (DDRAM_Address == 0x50)
    {
      for(i=0;i<16;i++)
        {
          DDRAM_Data[0][i] =  DDRAM_Data[1][i];
 8002db4:	7c1b      	ldrb	r3, [r3, #16]
          ST7032i_Command_Write(0b10000000 | (0x00 + i));
 8002db6:	b2c0      	uxtb	r0, r0

  if (DDRAM_Address == 0x50)
    {
      for(i=0;i<16;i++)
        {
          DDRAM_Data[0][i] =  DDRAM_Data[1][i];
 8002db8:	552b      	strb	r3, [r5, r4]
          ST7032i_Command_Write(0b10000000 | (0x00 + i));
 8002dba:	f7ff fe09 	bl	80029d0 <ST7032i_Command_Write>
          ST7032i_Data_Write(DDRAM_Data[0][i]);
 8002dbe:	5d28      	ldrb	r0, [r5, r4]
      delay_us(27);
    }

  if (DDRAM_Address == 0x50)
    {
      for(i=0;i<16;i++)
 8002dc0:	3401      	adds	r4, #1
        {
          DDRAM_Data[0][i] =  DDRAM_Data[1][i];
          ST7032i_Command_Write(0b10000000 | (0x00 + i));
          ST7032i_Data_Write(DDRAM_Data[0][i]);
 8002dc2:	f7ff ff61 	bl	8002c88 <ST7032i_Data_Write>
      delay_us(27);
    }

  if (DDRAM_Address == 0x50)
    {
      for(i=0;i<16;i++)
 8002dc6:	2c10      	cmp	r4, #16
 8002dc8:	d1f1      	bne.n	8002dae <ST7032i_Putchar+0x10e>
          ST7032i_Command_Write(0b10000000 | (0x00 + i));
          ST7032i_Data_Write(DDRAM_Data[0][i]);
        }
      for(i=0;i<16;i++)
        {
          DDRAM_Data[1][i] =  ' ';
 8002dca:	f8df 8048 	ldr.w	r8, [pc, #72]	; 8002e14 <ST7032i_Putchar+0x174>
      delay_us(27);
    }

  if (DDRAM_Address == 0x50)
    {
      for(i=0;i<16;i++)
 8002dce:	2540      	movs	r5, #64	; 0x40
 8002dd0:	2400      	movs	r4, #0
          ST7032i_Command_Write(0b10000000 | (0x00 + i));
          ST7032i_Data_Write(DDRAM_Data[0][i]);
        }
      for(i=0;i<16;i++)
        {
          DDRAM_Data[1][i] =  ' ';
 8002dd2:	2720      	movs	r7, #32
 8002dd4:	eb08 0604 	add.w	r6, r8, r4
          ST7032i_Command_Write(0b10000000 | (0x40 + i));
 8002dd8:	f045 0080 	orr.w	r0, r5, #128	; 0x80
          ST7032i_Command_Write(0b10000000 | (0x00 + i));
          ST7032i_Data_Write(DDRAM_Data[0][i]);
        }
      for(i=0;i<16;i++)
        {
          DDRAM_Data[1][i] =  ' ';
 8002ddc:	7437      	strb	r7, [r6, #16]
          ST7032i_Command_Write(0b10000000 | (0x40 + i));
 8002dde:	f7ff fdf7 	bl	80029d0 <ST7032i_Command_Write>
        {
          DDRAM_Data[0][i] =  DDRAM_Data[1][i];
          ST7032i_Command_Write(0b10000000 | (0x00 + i));
          ST7032i_Data_Write(DDRAM_Data[0][i]);
        }
      for(i=0;i<16;i++)
 8002de2:	3401      	adds	r4, #1
        {
          DDRAM_Data[1][i] =  ' ';
          ST7032i_Command_Write(0b10000000 | (0x40 + i));
          ST7032i_Data_Write(DDRAM_Data[1][i]);
 8002de4:	7c30      	ldrb	r0, [r6, #16]
        {
          DDRAM_Data[0][i] =  DDRAM_Data[1][i];
          ST7032i_Command_Write(0b10000000 | (0x00 + i));
          ST7032i_Data_Write(DDRAM_Data[0][i]);
        }
      for(i=0;i<16;i++)
 8002de6:	3501      	adds	r5, #1
        {
          DDRAM_Data[1][i] =  ' ';
          ST7032i_Command_Write(0b10000000 | (0x40 + i));
          ST7032i_Data_Write(DDRAM_Data[1][i]);
 8002de8:	f7ff ff4e 	bl	8002c88 <ST7032i_Data_Write>
        {
          DDRAM_Data[0][i] =  DDRAM_Data[1][i];
          ST7032i_Command_Write(0b10000000 | (0x00 + i));
          ST7032i_Data_Write(DDRAM_Data[0][i]);
        }
      for(i=0;i<16;i++)
 8002dec:	2c10      	cmp	r4, #16
 8002dee:	b2ed      	uxtb	r5, r5
 8002df0:	d1f0      	bne.n	8002dd4 <ST7032i_Putchar+0x134>
          DDRAM_Data[1][i] =  ' ';
          ST7032i_Command_Write(0b10000000 | (0x40 + i));
          ST7032i_Data_Write(DDRAM_Data[1][i]);
        }

      DDRAM_Address = 0x40;
 8002df2:	4b07      	ldr	r3, [pc, #28]	; (8002e10 <ST7032i_Putchar+0x170>)
 8002df4:	2240      	movs	r2, #64	; 0x40
 8002df6:	701a      	strb	r2, [r3, #0]
      ST7032i_Command_Write(0b10000000 | DDRAM_Address);
 8002df8:	7818      	ldrb	r0, [r3, #0]
 8002dfa:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8002dfe:	f7ff fde7 	bl	80029d0 <ST7032i_Command_Write>
      delay_us(27);
 8002e02:	201b      	movs	r0, #27
    }
}
 8002e04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
          ST7032i_Data_Write(DDRAM_Data[1][i]);
        }

      DDRAM_Address = 0x40;
      ST7032i_Command_Write(0b10000000 | DDRAM_Address);
      delay_us(27);
 8002e08:	f7fd b9be 	b.w	8000188 <delay_us>
 8002e0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002e10:	200009b4 	.word	0x200009b4
 8002e14:	20001648 	.word	0x20001648
 8002e18:	20001608 	.word	0x20001608
 8002e1c:	200000b8 	.word	0x200000b8

08002e20 <ST7032i_Print_String>:
  * @brief  Print string to LCD
  * @param  String: Array which contain string
  * @retval None
  */
void ST7032i_Print_String(const int8_t String[])
{
 8002e20:	b538      	push	{r3, r4, r5, lr}
 8002e22:	4605      	mov	r5, r0
  uint8_t i = 0;
 8002e24:	2400      	movs	r4, #0
  while(String[i] != '\0')
 8002e26:	e004      	b.n	8002e32 <ST7032i_Print_String+0x12>
    {
      ST7032i_Putchar(String[i]);
 8002e28:	b240      	sxtb	r0, r0
 8002e2a:	f7ff ff39 	bl	8002ca0 <ST7032i_Putchar>
      i++;
 8002e2e:	3401      	adds	r4, #1
 8002e30:	b2e4      	uxtb	r4, r4
  * @retval None
  */
void ST7032i_Print_String(const int8_t String[])
{
  uint8_t i = 0;
  while(String[i] != '\0')
 8002e32:	5d28      	ldrb	r0, [r5, r4]
 8002e34:	2800      	cmp	r0, #0
 8002e36:	d1f7      	bne.n	8002e28 <ST7032i_Print_String+0x8>
    {
      ST7032i_Putchar(String[i]);
      i++;
    }
}
 8002e38:	bd38      	pop	{r3, r4, r5, pc}

08002e3a <ST7032i_Icon_Clear>:
  * @brief  Clear icon. value is to be 0 - 12
  * @param  numbet : icon number
  * @retval None
  */
void ST7032i_Icon_Clear(uint8_t number)
{
 8002e3a:	b538      	push	{r3, r4, r5, lr}
  //icon address set
  ST7032i_Command_Write(0b01000000 | Icon_Table[number][0] );
 8002e3c:	4c10      	ldr	r4, [pc, #64]	; (8002e80 <ST7032i_Icon_Clear+0x46>)
 8002e3e:	eb04 0440 	add.w	r4, r4, r0, lsl #1
  * @brief  Clear icon. value is to be 0 - 12
  * @param  numbet : icon number
  * @retval None
  */
void ST7032i_Icon_Clear(uint8_t number)
{
 8002e42:	4605      	mov	r5, r0
  //icon address set
  ST7032i_Command_Write(0b01000000 | Icon_Table[number][0] );
 8002e44:	7960      	ldrb	r0, [r4, #5]
 8002e46:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8002e4a:	f7ff fdc1 	bl	80029d0 <ST7032i_Command_Write>
  delay_us(27);
 8002e4e:	201b      	movs	r0, #27
 8002e50:	f7fd f99a 	bl	8000188 <delay_us>

  //icon data reset
  ST7032i_Data_Write(IconRAM[number] & (~Icon_Table[number][1]));
 8002e54:	4b0b      	ldr	r3, [pc, #44]	; (8002e84 <ST7032i_Icon_Clear+0x4a>)
 8002e56:	5d5b      	ldrb	r3, [r3, r5]
 8002e58:	79a0      	ldrb	r0, [r4, #6]
 8002e5a:	ea23 0000 	bic.w	r0, r3, r0
 8002e5e:	f7ff ff13 	bl	8002c88 <ST7032i_Data_Write>
  delay_us(27);
 8002e62:	201b      	movs	r0, #27
 8002e64:	f7fd f990 	bl	8000188 <delay_us>

  //restore DDRAM address to ac
  ST7032i_Command_Write(0b10000000 | DDRAM_Address);
 8002e68:	4b07      	ldr	r3, [pc, #28]	; (8002e88 <ST7032i_Icon_Clear+0x4e>)
 8002e6a:	7818      	ldrb	r0, [r3, #0]
 8002e6c:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8002e70:	f7ff fdae 	bl	80029d0 <ST7032i_Command_Write>
  delay_us(27);
 8002e74:	201b      	movs	r0, #27

}
 8002e76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  ST7032i_Data_Write(IconRAM[number] & (~Icon_Table[number][1]));
  delay_us(27);

  //restore DDRAM address to ac
  ST7032i_Command_Write(0b10000000 | DDRAM_Address);
  delay_us(27);
 8002e7a:	f7fd b985 	b.w	8000188 <delay_us>
 8002e7e:	bf00      	nop
 8002e80:	200000b8 	.word	0x200000b8
 8002e84:	20001668 	.word	0x20001668
 8002e88:	200009b4 	.word	0x200009b4

08002e8c <ST7032i_Icon_Set>:
  * @brief  Put icon. value is to be 0 - 12
  * @param  numbet : icon number
  * @retval None
  */
void ST7032i_Icon_Set(uint8_t number)
{
 8002e8c:	b538      	push	{r3, r4, r5, lr}
  //icon address set
  ST7032i_Command_Write(0b01000000 | Icon_Table[number][0] );
 8002e8e:	4c10      	ldr	r4, [pc, #64]	; (8002ed0 <ST7032i_Icon_Set+0x44>)
 8002e90:	eb04 0440 	add.w	r4, r4, r0, lsl #1
  * @brief  Put icon. value is to be 0 - 12
  * @param  numbet : icon number
  * @retval None
  */
void ST7032i_Icon_Set(uint8_t number)
{
 8002e94:	4605      	mov	r5, r0
  //icon address set
  ST7032i_Command_Write(0b01000000 | Icon_Table[number][0] );
 8002e96:	7960      	ldrb	r0, [r4, #5]
 8002e98:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8002e9c:	f7ff fd98 	bl	80029d0 <ST7032i_Command_Write>
  delay_us(27);
 8002ea0:	201b      	movs	r0, #27
 8002ea2:	f7fd f971 	bl	8000188 <delay_us>

  //icon data set
  ST7032i_Data_Write(IconRAM[number] | Icon_Table[number][1]);
 8002ea6:	4b0b      	ldr	r3, [pc, #44]	; (8002ed4 <ST7032i_Icon_Set+0x48>)
 8002ea8:	5d58      	ldrb	r0, [r3, r5]
 8002eaa:	79a3      	ldrb	r3, [r4, #6]
 8002eac:	4318      	orrs	r0, r3
 8002eae:	f7ff feeb 	bl	8002c88 <ST7032i_Data_Write>
  delay_us(27);
 8002eb2:	201b      	movs	r0, #27
 8002eb4:	f7fd f968 	bl	8000188 <delay_us>

  //restore DDRAM address to ac
  ST7032i_Command_Write(0b10000000 | DDRAM_Address);
 8002eb8:	4b07      	ldr	r3, [pc, #28]	; (8002ed8 <ST7032i_Icon_Set+0x4c>)
 8002eba:	7818      	ldrb	r0, [r3, #0]
 8002ebc:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8002ec0:	f7ff fd86 	bl	80029d0 <ST7032i_Command_Write>
  delay_us(27);
 8002ec4:	201b      	movs	r0, #27
}
 8002ec6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  ST7032i_Data_Write(IconRAM[number] | Icon_Table[number][1]);
  delay_us(27);

  //restore DDRAM address to ac
  ST7032i_Command_Write(0b10000000 | DDRAM_Address);
  delay_us(27);
 8002eca:	f7fd b95d 	b.w	8000188 <delay_us>
 8002ece:	bf00      	nop
 8002ed0:	200000b8 	.word	0x200000b8
 8002ed4:	20001668 	.word	0x20001668
 8002ed8:	200009b4 	.word	0x200009b4
 8002edc:	080085d0 	.word	0x080085d0
 8002ee0:	20000000 	.word	0x20000000
 8002ee4:	200009ac 	.word	0x200009ac
 8002ee8:	200009ac 	.word	0x200009ac
 8002eec:	2000167c 	.word	0x2000167c

08002ef0 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8002ef0:	4770      	bx	lr

08002ef2 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8002ef2:	e7fe      	b.n	8002ef2 <HardFault_Handler>

08002ef4 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8002ef4:	e7fe      	b.n	8002ef4 <MemManage_Handler>

08002ef6 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8002ef6:	e7fe      	b.n	8002ef6 <BusFault_Handler>

08002ef8 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8002ef8:	e7fe      	b.n	8002ef8 <UsageFault_Handler>

08002efa <SVC_Handler>:
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
}
 8002efa:	4770      	bx	lr

08002efc <DebugMon_Handler>:
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
}
 8002efc:	4770      	bx	lr

08002efe <PendSV_Handler>:
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
}
 8002efe:	4770      	bx	lr

08002f00 <SystemInit>:
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002f00:	4b33      	ldr	r3, [pc, #204]	; (8002fd0 <SystemInit+0xd0>)
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	f042 0201 	orr.w	r2, r2, #1
 8002f08:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002f0e:	6819      	ldr	r1, [r3, #0]
 8002f10:	f021 7184 	bic.w	r1, r1, #17301504	; 0x1080000
 8002f14:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8002f18:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002f1a:	492e      	ldr	r1, [pc, #184]	; (8002fd4 <SystemInit+0xd4>)
 8002f1c:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002f1e:	6819      	ldr	r1, [r3, #0]
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f20:	b082      	sub	sp, #8

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002f22:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8002f26:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002f28:	60da      	str	r2, [r3, #12]
static void SetSysClock(void)
{
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8002f2a:	9200      	str	r2, [sp, #0]
 8002f2c:	9201      	str	r2, [sp, #4]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002f34:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002f3c:	9201      	str	r2, [sp, #4]
    StartUpCounter++;
 8002f3e:	9a00      	ldr	r2, [sp, #0]
 8002f40:	3201      	adds	r2, #1
 8002f42:	9200      	str	r2, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8002f44:	9a01      	ldr	r2, [sp, #4]
 8002f46:	b91a      	cbnz	r2, 8002f50 <SystemInit+0x50>
 8002f48:	9a00      	ldr	r2, [sp, #0]
 8002f4a:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 8002f4e:	d1f2      	bne.n	8002f36 <SystemInit+0x36>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8002f50:	4b1f      	ldr	r3, [pc, #124]	; (8002fd0 <SystemInit+0xd0>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
 8002f58:	bf18      	it	ne
 8002f5a:	2301      	movne	r3, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8002f5c:	9301      	str	r3, [sp, #4]
  }

  if (HSEStatus == (uint32_t)0x01)
 8002f5e:	9b01      	ldr	r3, [sp, #4]
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d12e      	bne.n	8002fc2 <SystemInit+0xc2>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8002f64:	4b1a      	ldr	r3, [pc, #104]	; (8002fd0 <SystemInit+0xd0>)
 8002f66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f68:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002f6c:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8002f6e:	4a1a      	ldr	r2, [pc, #104]	; (8002fd8 <SystemInit+0xd8>)
 8002f70:	6811      	ldr	r1, [r2, #0]
 8002f72:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8002f76:	6011      	str	r1, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8002f78:	689a      	ldr	r2, [r3, #8]
 8002f7a:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8002f7c:	689a      	ldr	r2, [r3, #8]
 8002f7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f82:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8002f84:	689a      	ldr	r2, [r3, #8]
 8002f86:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 8002f8a:	609a      	str	r2, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8002f8c:	4a13      	ldr	r2, [pc, #76]	; (8002fdc <SystemInit+0xdc>)
 8002f8e:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002f96:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8002f98:	6819      	ldr	r1, [r3, #0]
 8002f9a:	4a0d      	ldr	r2, [pc, #52]	; (8002fd0 <SystemInit+0xd0>)
 8002f9c:	0189      	lsls	r1, r1, #6
 8002f9e:	d5fb      	bpl.n	8002f98 <SystemInit+0x98>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8002fa0:	4b0f      	ldr	r3, [pc, #60]	; (8002fe0 <SystemInit+0xe0>)
 8002fa2:	f240 6105 	movw	r1, #1541	; 0x605
 8002fa6:	6019      	str	r1, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8002fa8:	6893      	ldr	r3, [r2, #8]
 8002faa:	f023 0303 	bic.w	r3, r3, #3
 8002fae:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8002fb0:	6893      	ldr	r3, [r2, #8]
 8002fb2:	f043 0302 	orr.w	r3, r3, #2
 8002fb6:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8002fb8:	6893      	ldr	r3, [r2, #8]
 8002fba:	f003 030c 	and.w	r3, r3, #12
 8002fbe:	2b08      	cmp	r3, #8
 8002fc0:	d1fa      	bne.n	8002fb8 <SystemInit+0xb8>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002fc2:	4b08      	ldr	r3, [pc, #32]	; (8002fe4 <SystemInit+0xe4>)
 8002fc4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002fc8:	609a      	str	r2, [r3, #8]
#endif
}
 8002fca:	b002      	add	sp, #8
 8002fcc:	4770      	bx	lr
 8002fce:	bf00      	nop
 8002fd0:	40023800 	.word	0x40023800
 8002fd4:	24003010 	.word	0x24003010
 8002fd8:	40007000 	.word	0x40007000
 8002fdc:	07405419 	.word	0x07405419
 8002fe0:	40023c00 	.word	0x40023c00
 8002fe4:	e000ed00 	.word	0xe000ed00

08002fe8 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8002fe8:	4b18      	ldr	r3, [pc, #96]	; (800304c <SystemCoreClockUpdate+0x64>)
 8002fea:	4a19      	ldr	r2, [pc, #100]	; (8003050 <SystemCoreClockUpdate+0x68>)
 8002fec:	6899      	ldr	r1, [r3, #8]
 8002fee:	f001 010c 	and.w	r1, r1, #12

  switch (tmp)
 8002ff2:	2904      	cmp	r1, #4
 8002ff4:	d003      	beq.n	8002ffe <SystemCoreClockUpdate+0x16>
 8002ff6:	2908      	cmp	r1, #8
 8002ff8:	d003      	beq.n	8003002 <SystemCoreClockUpdate+0x1a>
 8002ffa:	4b16      	ldr	r3, [pc, #88]	; (8003054 <SystemCoreClockUpdate+0x6c>)
 8002ffc:	e019      	b.n	8003032 <SystemCoreClockUpdate+0x4a>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8002ffe:	4b16      	ldr	r3, [pc, #88]	; (8003058 <SystemCoreClockUpdate+0x70>)
 8003000:	e017      	b.n	8003032 <SystemCoreClockUpdate+0x4a>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8003002:	6859      	ldr	r1, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003004:	685a      	ldr	r2, [r3, #4]
      
      if (pllsource != 0)
 8003006:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800300a:	6859      	ldr	r1, [r3, #4]
 800300c:	bf14      	ite	ne
 800300e:	4b12      	ldrne	r3, [pc, #72]	; (8003058 <SystemCoreClockUpdate+0x70>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8003010:	4b10      	ldreq	r3, [pc, #64]	; (8003054 <SystemCoreClockUpdate+0x6c>)

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003012:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8003016:	fbb3 f3f2 	udiv	r3, r3, r2
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800301a:	4a0c      	ldr	r2, [pc, #48]	; (800304c <SystemCoreClockUpdate+0x64>)
 800301c:	6852      	ldr	r2, [r2, #4]
 800301e:	f3c2 4201 	ubfx	r2, r2, #16, #2
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8003022:	f3c1 1188 	ubfx	r1, r1, #6, #9
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8003026:	3201      	adds	r2, #1
 8003028:	0052      	lsls	r2, r2, #1
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800302a:	434b      	muls	r3, r1
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
      SystemCoreClock = pllvco/pllp;
 800302c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003030:	4a07      	ldr	r2, [pc, #28]	; (8003050 <SystemCoreClockUpdate+0x68>)
 8003032:	6013      	str	r3, [r2, #0]
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8003034:	4b05      	ldr	r3, [pc, #20]	; (800304c <SystemCoreClockUpdate+0x64>)
 8003036:	689a      	ldr	r2, [r3, #8]
 8003038:	4b05      	ldr	r3, [pc, #20]	; (8003050 <SystemCoreClockUpdate+0x68>)
 800303a:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800303e:	189a      	adds	r2, r3, r2
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8003040:	6819      	ldr	r1, [r3, #0]
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8003042:	7912      	ldrb	r2, [r2, #4]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8003044:	fa31 f202 	lsrs.w	r2, r1, r2
 8003048:	601a      	str	r2, [r3, #0]
}
 800304a:	4770      	bx	lr
 800304c:	40023800 	.word	0x40023800
 8003050:	200000d8 	.word	0x200000d8
 8003054:	00f42400 	.word	0x00f42400
 8003058:	007a1200 	.word	0x007a1200

0800305c <cleanup_glue>:
 800305c:	b538      	push	{r3, r4, r5, lr}
 800305e:	460c      	mov	r4, r1
 8003060:	6809      	ldr	r1, [r1, #0]
 8003062:	4605      	mov	r5, r0
 8003064:	b109      	cbz	r1, 800306a <cleanup_glue+0xe>
 8003066:	f7ff fff9 	bl	800305c <cleanup_glue>
 800306a:	4628      	mov	r0, r5
 800306c:	4621      	mov	r1, r4
 800306e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003072:	f002 ba21 	b.w	80054b8 <_free_r>
 8003076:	bf00      	nop

08003078 <_reclaim_reent>:
 8003078:	4b22      	ldr	r3, [pc, #136]	; (8003104 <_reclaim_reent+0x8c>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4298      	cmp	r0, r3
 800307e:	b570      	push	{r4, r5, r6, lr}
 8003080:	4605      	mov	r5, r0
 8003082:	d032      	beq.n	80030ea <_reclaim_reent+0x72>
 8003084:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8003086:	b1ab      	cbz	r3, 80030b4 <_reclaim_reent+0x3c>
 8003088:	2200      	movs	r2, #0
 800308a:	4616      	mov	r6, r2
 800308c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003090:	b909      	cbnz	r1, 8003096 <_reclaim_reent+0x1e>
 8003092:	e007      	b.n	80030a4 <_reclaim_reent+0x2c>
 8003094:	4621      	mov	r1, r4
 8003096:	680c      	ldr	r4, [r1, #0]
 8003098:	4628      	mov	r0, r5
 800309a:	f002 fa0d 	bl	80054b8 <_free_r>
 800309e:	2c00      	cmp	r4, #0
 80030a0:	d1f8      	bne.n	8003094 <_reclaim_reent+0x1c>
 80030a2:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80030a4:	3601      	adds	r6, #1
 80030a6:	2e20      	cmp	r6, #32
 80030a8:	4632      	mov	r2, r6
 80030aa:	d1ef      	bne.n	800308c <_reclaim_reent+0x14>
 80030ac:	4628      	mov	r0, r5
 80030ae:	4619      	mov	r1, r3
 80030b0:	f002 fa02 	bl	80054b8 <_free_r>
 80030b4:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80030b6:	b111      	cbz	r1, 80030be <_reclaim_reent+0x46>
 80030b8:	4628      	mov	r0, r5
 80030ba:	f002 f9fd 	bl	80054b8 <_free_r>
 80030be:	f8d5 1148 	ldr.w	r1, [r5, #328]	; 0x148
 80030c2:	b159      	cbz	r1, 80030dc <_reclaim_reent+0x64>
 80030c4:	f505 76a6 	add.w	r6, r5, #332	; 0x14c
 80030c8:	42b1      	cmp	r1, r6
 80030ca:	d101      	bne.n	80030d0 <_reclaim_reent+0x58>
 80030cc:	e006      	b.n	80030dc <_reclaim_reent+0x64>
 80030ce:	4621      	mov	r1, r4
 80030d0:	680c      	ldr	r4, [r1, #0]
 80030d2:	4628      	mov	r0, r5
 80030d4:	f002 f9f0 	bl	80054b8 <_free_r>
 80030d8:	42a6      	cmp	r6, r4
 80030da:	d1f8      	bne.n	80030ce <_reclaim_reent+0x56>
 80030dc:	6d69      	ldr	r1, [r5, #84]	; 0x54
 80030de:	b111      	cbz	r1, 80030e6 <_reclaim_reent+0x6e>
 80030e0:	4628      	mov	r0, r5
 80030e2:	f002 f9e9 	bl	80054b8 <_free_r>
 80030e6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80030e8:	b903      	cbnz	r3, 80030ec <_reclaim_reent+0x74>
 80030ea:	bd70      	pop	{r4, r5, r6, pc}
 80030ec:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80030ee:	4628      	mov	r0, r5
 80030f0:	4798      	blx	r3
 80030f2:	f8d5 12e0 	ldr.w	r1, [r5, #736]	; 0x2e0
 80030f6:	2900      	cmp	r1, #0
 80030f8:	d0f7      	beq.n	80030ea <_reclaim_reent+0x72>
 80030fa:	4628      	mov	r0, r5
 80030fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003100:	e7ac      	b.n	800305c <cleanup_glue>
 8003102:	bf00      	nop
 8003104:	200000f0 	.word	0x200000f0

08003108 <_wrapup_reent>:
 8003108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800310a:	4607      	mov	r7, r0
 800310c:	b1b0      	cbz	r0, 800313c <_wrapup_reent+0x34>
 800310e:	f8d7 6148 	ldr.w	r6, [r7, #328]	; 0x148
 8003112:	b176      	cbz	r6, 8003132 <_wrapup_reent+0x2a>
 8003114:	6875      	ldr	r5, [r6, #4]
 8003116:	1e6c      	subs	r4, r5, #1
 8003118:	d408      	bmi.n	800312c <_wrapup_reent+0x24>
 800311a:	3502      	adds	r5, #2
 800311c:	eb06 0585 	add.w	r5, r6, r5, lsl #2
 8003120:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8003124:	3c01      	subs	r4, #1
 8003126:	4798      	blx	r3
 8003128:	1c63      	adds	r3, r4, #1
 800312a:	d1f9      	bne.n	8003120 <_wrapup_reent+0x18>
 800312c:	6836      	ldr	r6, [r6, #0]
 800312e:	2e00      	cmp	r6, #0
 8003130:	d1f0      	bne.n	8003114 <_wrapup_reent+0xc>
 8003132:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003134:	b10b      	cbz	r3, 800313a <_wrapup_reent+0x32>
 8003136:	4638      	mov	r0, r7
 8003138:	4798      	blx	r3
 800313a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800313c:	4b01      	ldr	r3, [pc, #4]	; (8003144 <_wrapup_reent+0x3c>)
 800313e:	681f      	ldr	r7, [r3, #0]
 8003140:	e7e5      	b.n	800310e <_wrapup_reent+0x6>
 8003142:	bf00      	nop
 8003144:	200000f0 	.word	0x200000f0

08003148 <_sprintf_r>:
 8003148:	b40c      	push	{r2, r3}
 800314a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800314c:	b09d      	sub	sp, #116	; 0x74
 800314e:	ac22      	add	r4, sp, #136	; 0x88
 8003150:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 8003154:	f854 2b04 	ldr.w	r2, [r4], #4
 8003158:	9101      	str	r1, [sp, #4]
 800315a:	460e      	mov	r6, r1
 800315c:	4623      	mov	r3, r4
 800315e:	9503      	str	r5, [sp, #12]
 8003160:	9506      	str	r5, [sp, #24]
 8003162:	a901      	add	r1, sp, #4
 8003164:	f44f 7702 	mov.w	r7, #520	; 0x208
 8003168:	f64f 75ff 	movw	r5, #65535	; 0xffff
 800316c:	f8ad 7010 	strh.w	r7, [sp, #16]
 8003170:	9605      	str	r6, [sp, #20]
 8003172:	f8ad 5012 	strh.w	r5, [sp, #18]
 8003176:	941b      	str	r4, [sp, #108]	; 0x6c
 8003178:	f000 f830 	bl	80031dc <_svfprintf_r>
 800317c:	9b01      	ldr	r3, [sp, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	701a      	strb	r2, [r3, #0]
 8003182:	b01d      	add	sp, #116	; 0x74
 8003184:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8003188:	b002      	add	sp, #8
 800318a:	4770      	bx	lr

0800318c <sprintf>:
 800318c:	b40e      	push	{r1, r2, r3}
 800318e:	b570      	push	{r4, r5, r6, lr}
 8003190:	b09d      	sub	sp, #116	; 0x74
 8003192:	ac21      	add	r4, sp, #132	; 0x84
 8003194:	f240 03f0 	movw	r3, #240	; 0xf0
 8003198:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800319c:	f854 2b04 	ldr.w	r2, [r4], #4
 80031a0:	4606      	mov	r6, r0
 80031a2:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 80031a6:	6818      	ldr	r0, [r3, #0]
 80031a8:	9503      	str	r5, [sp, #12]
 80031aa:	f44f 7302 	mov.w	r3, #520	; 0x208
 80031ae:	f8ad 3010 	strh.w	r3, [sp, #16]
 80031b2:	9506      	str	r5, [sp, #24]
 80031b4:	4623      	mov	r3, r4
 80031b6:	a901      	add	r1, sp, #4
 80031b8:	f64f 75ff 	movw	r5, #65535	; 0xffff
 80031bc:	9601      	str	r6, [sp, #4]
 80031be:	9605      	str	r6, [sp, #20]
 80031c0:	f8ad 5012 	strh.w	r5, [sp, #18]
 80031c4:	941b      	str	r4, [sp, #108]	; 0x6c
 80031c6:	f000 f809 	bl	80031dc <_svfprintf_r>
 80031ca:	9b01      	ldr	r3, [sp, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	701a      	strb	r2, [r3, #0]
 80031d0:	b01d      	add	sp, #116	; 0x74
 80031d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80031d6:	b003      	add	sp, #12
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop

080031dc <_svfprintf_r>:
 80031dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031e0:	b0c5      	sub	sp, #276	; 0x114
 80031e2:	468a      	mov	sl, r1
 80031e4:	4614      	mov	r4, r2
 80031e6:	930e      	str	r3, [sp, #56]	; 0x38
 80031e8:	900f      	str	r0, [sp, #60]	; 0x3c
 80031ea:	f002 fa5d 	bl	80056a8 <_localeconv_r>
 80031ee:	6800      	ldr	r0, [r0, #0]
 80031f0:	9017      	str	r0, [sp, #92]	; 0x5c
 80031f2:	f003 fb33 	bl	800685c <strlen>
 80031f6:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 80031fa:	901a      	str	r0, [sp, #104]	; 0x68
 80031fc:	2100      	movs	r1, #0
 80031fe:	2000      	movs	r0, #0
 8003200:	061a      	lsls	r2, r3, #24
 8003202:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
 8003206:	d504      	bpl.n	8003212 <_svfprintf_r+0x36>
 8003208:	f8da 3010 	ldr.w	r3, [sl, #16]
 800320c:	2b00      	cmp	r3, #0
 800320e:	f001 8004 	beq.w	800421a <_svfprintf_r+0x103e>
 8003212:	2300      	movs	r3, #0
 8003214:	f10d 00e3 	add.w	r0, sp, #227	; 0xe3
 8003218:	f10d 0be4 	add.w	fp, sp, #228	; 0xe4
 800321c:	a91f      	add	r1, sp, #124	; 0x7c
 800321e:	9310      	str	r3, [sp, #64]	; 0x40
 8003220:	933b      	str	r3, [sp, #236]	; 0xec
 8003222:	933a      	str	r3, [sp, #232]	; 0xe8
 8003224:	931c      	str	r3, [sp, #112]	; 0x70
 8003226:	931b      	str	r3, [sp, #108]	; 0x6c
 8003228:	930c      	str	r3, [sp, #48]	; 0x30
 800322a:	ebc0 030b 	rsb	r3, r0, fp
 800322e:	9007      	str	r0, [sp, #28]
 8003230:	9139      	str	r1, [sp, #228]	; 0xe4
 8003232:	9409      	str	r4, [sp, #36]	; 0x24
 8003234:	460e      	mov	r6, r1
 8003236:	931d      	str	r3, [sp, #116]	; 0x74
 8003238:	9809      	ldr	r0, [sp, #36]	; 0x24
 800323a:	7803      	ldrb	r3, [r0, #0]
 800323c:	2b00      	cmp	r3, #0
 800323e:	bf18      	it	ne
 8003240:	2b25      	cmpne	r3, #37	; 0x25
 8003242:	f000 80af 	beq.w	80033a4 <_svfprintf_r+0x1c8>
 8003246:	4607      	mov	r7, r0
 8003248:	f817 3f01 	ldrb.w	r3, [r7, #1]!
 800324c:	2b25      	cmp	r3, #37	; 0x25
 800324e:	bf18      	it	ne
 8003250:	2b00      	cmpne	r3, #0
 8003252:	d1f9      	bne.n	8003248 <_svfprintf_r+0x6c>
 8003254:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003256:	ebb7 0801 	subs.w	r8, r7, r1
 800325a:	d00e      	beq.n	800327a <_svfprintf_r+0x9e>
 800325c:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 800325e:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003260:	6031      	str	r1, [r6, #0]
 8003262:	3401      	adds	r4, #1
 8003264:	4445      	add	r5, r8
 8003266:	2c07      	cmp	r4, #7
 8003268:	f8c6 8004 	str.w	r8, [r6, #4]
 800326c:	953b      	str	r5, [sp, #236]	; 0xec
 800326e:	943a      	str	r4, [sp, #232]	; 0xe8
 8003270:	dc7c      	bgt.n	800336c <_svfprintf_r+0x190>
 8003272:	3608      	adds	r6, #8
 8003274:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003276:	4442      	add	r2, r8
 8003278:	920c      	str	r2, [sp, #48]	; 0x30
 800327a:	783b      	ldrb	r3, [r7, #0]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d07d      	beq.n	800337c <_svfprintf_r+0x1a0>
 8003280:	3701      	adds	r7, #1
 8003282:	9709      	str	r7, [sp, #36]	; 0x24
 8003284:	2300      	movs	r3, #0
 8003286:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003288:	930b      	str	r3, [sp, #44]	; 0x2c
 800328a:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
 800328e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003292:	9308      	str	r3, [sp, #32]
 8003294:	2720      	movs	r7, #32
 8003296:	252b      	movs	r5, #43	; 0x2b
 8003298:	f810 3b01 	ldrb.w	r3, [r0], #1
 800329c:	f1a3 0220 	sub.w	r2, r3, #32
 80032a0:	2a58      	cmp	r2, #88	; 0x58
 80032a2:	f200 823b 	bhi.w	800371c <_svfprintf_r+0x540>
 80032a6:	e8df f012 	tbh	[pc, r2, lsl #1]
 80032aa:	024c      	.short	0x024c
 80032ac:	02390239 	.word	0x02390239
 80032b0:	02390254 	.word	0x02390254
 80032b4:	02390239 	.word	0x02390239
 80032b8:	02390239 	.word	0x02390239
 80032bc:	02590239 	.word	0x02590239
 80032c0:	0239007f 	.word	0x0239007f
 80032c4:	0082005c 	.word	0x0082005c
 80032c8:	009d0239 	.word	0x009d0239
 80032cc:	00a200a2 	.word	0x00a200a2
 80032d0:	00a200a2 	.word	0x00a200a2
 80032d4:	00a200a2 	.word	0x00a200a2
 80032d8:	00a200a2 	.word	0x00a200a2
 80032dc:	023900a2 	.word	0x023900a2
 80032e0:	02390239 	.word	0x02390239
 80032e4:	02390239 	.word	0x02390239
 80032e8:	02390239 	.word	0x02390239
 80032ec:	02390239 	.word	0x02390239
 80032f0:	00b50239 	.word	0x00b50239
 80032f4:	02390154 	.word	0x02390154
 80032f8:	02390154 	.word	0x02390154
 80032fc:	02390239 	.word	0x02390239
 8003300:	018b0239 	.word	0x018b0239
 8003304:	02390239 	.word	0x02390239
 8003308:	02390190 	.word	0x02390190
 800330c:	02390239 	.word	0x02390239
 8003310:	02390239 	.word	0x02390239
 8003314:	023901a7 	.word	0x023901a7
 8003318:	01ba0239 	.word	0x01ba0239
 800331c:	02390239 	.word	0x02390239
 8003320:	02390239 	.word	0x02390239
 8003324:	02390239 	.word	0x02390239
 8003328:	02390239 	.word	0x02390239
 800332c:	02390239 	.word	0x02390239
 8003330:	02780293 	.word	0x02780293
 8003334:	01540154 	.word	0x01540154
 8003338:	028e0154 	.word	0x028e0154
 800333c:	02390278 	.word	0x02390278
 8003340:	02130239 	.word	0x02130239
 8003344:	02180239 	.word	0x02180239
 8003348:	02a50224 	.word	0x02a50224
 800334c:	023901de 	.word	0x023901de
 8003350:	023901e3 	.word	0x023901e3
 8003354:	02390264 	.word	0x02390264
 8003358:	02c70239 	.word	0x02c70239
 800335c:	4252      	negs	r2, r2
 800335e:	920b      	str	r2, [sp, #44]	; 0x2c
 8003360:	930e      	str	r3, [sp, #56]	; 0x38
 8003362:	9b08      	ldr	r3, [sp, #32]
 8003364:	f043 0304 	orr.w	r3, r3, #4
 8003368:	9308      	str	r3, [sp, #32]
 800336a:	e795      	b.n	8003298 <_svfprintf_r+0xbc>
 800336c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800336e:	4651      	mov	r1, sl
 8003370:	465a      	mov	r2, fp
 8003372:	f003 faa3 	bl	80068bc <__ssprint_r>
 8003376:	b940      	cbnz	r0, 800338a <_svfprintf_r+0x1ae>
 8003378:	ae1f      	add	r6, sp, #124	; 0x7c
 800337a:	e77b      	b.n	8003274 <_svfprintf_r+0x98>
 800337c:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 800337e:	b123      	cbz	r3, 800338a <_svfprintf_r+0x1ae>
 8003380:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8003382:	4651      	mov	r1, sl
 8003384:	aa39      	add	r2, sp, #228	; 0xe4
 8003386:	f003 fa99 	bl	80068bc <__ssprint_r>
 800338a:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800338e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003392:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003394:	bf18      	it	ne
 8003396:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 800339a:	930c      	str	r3, [sp, #48]	; 0x30
 800339c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800339e:	b045      	add	sp, #276	; 0x114
 80033a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033a4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80033a6:	e768      	b.n	800327a <_svfprintf_r+0x9e>
 80033a8:	f88d 510f 	strb.w	r5, [sp, #271]	; 0x10f
 80033ac:	e774      	b.n	8003298 <_svfprintf_r+0xbc>
 80033ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80033b2:	2b2a      	cmp	r3, #42	; 0x2a
 80033b4:	f001 804c 	beq.w	8004450 <_svfprintf_r+0x1274>
 80033b8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80033bc:	2400      	movs	r4, #0
 80033be:	2a09      	cmp	r2, #9
 80033c0:	f63f af6c 	bhi.w	800329c <_svfprintf_r+0xc0>
 80033c4:	4601      	mov	r1, r0
 80033c6:	2400      	movs	r4, #0
 80033c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80033cc:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80033d0:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80033d4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80033d8:	2a09      	cmp	r2, #9
 80033da:	4608      	mov	r0, r1
 80033dc:	d9f4      	bls.n	80033c8 <_svfprintf_r+0x1ec>
 80033de:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
 80033e2:	e75b      	b.n	800329c <_svfprintf_r+0xc0>
 80033e4:	9a08      	ldr	r2, [sp, #32]
 80033e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80033ea:	9208      	str	r2, [sp, #32]
 80033ec:	e754      	b.n	8003298 <_svfprintf_r+0xbc>
 80033ee:	4601      	mov	r1, r0
 80033f0:	2200      	movs	r2, #0
 80033f2:	46b4      	mov	ip, r6
 80033f4:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 80033f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80033fc:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8003400:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003404:	2e09      	cmp	r6, #9
 8003406:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800340a:	4608      	mov	r0, r1
 800340c:	d9f2      	bls.n	80033f4 <_svfprintf_r+0x218>
 800340e:	4666      	mov	r6, ip
 8003410:	920b      	str	r2, [sp, #44]	; 0x2c
 8003412:	e743      	b.n	800329c <_svfprintf_r+0xc0>
 8003414:	9315      	str	r3, [sp, #84]	; 0x54
 8003416:	9b08      	ldr	r3, [sp, #32]
 8003418:	9009      	str	r0, [sp, #36]	; 0x24
 800341a:	f043 0310 	orr.w	r3, r3, #16
 800341e:	9308      	str	r3, [sp, #32]
 8003420:	9808      	ldr	r0, [sp, #32]
 8003422:	06c3      	lsls	r3, r0, #27
 8003424:	f100 81bf 	bmi.w	80037a6 <_svfprintf_r+0x5ca>
 8003428:	9a08      	ldr	r2, [sp, #32]
 800342a:	0655      	lsls	r5, r2, #25
 800342c:	f140 81bb 	bpl.w	80037a6 <_svfprintf_r+0x5ca>
 8003430:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003432:	f9b0 3000 	ldrsh.w	r3, [r0]
 8003436:	3004      	adds	r0, #4
 8003438:	2b00      	cmp	r3, #0
 800343a:	900e      	str	r0, [sp, #56]	; 0x38
 800343c:	f2c0 81ba 	blt.w	80037b4 <_svfprintf_r+0x5d8>
 8003440:	bf0c      	ite	eq
 8003442:	2100      	moveq	r1, #0
 8003444:	2101      	movne	r1, #1
 8003446:	2201      	movs	r2, #1
 8003448:	2c00      	cmp	r4, #0
 800344a:	bfa2      	ittt	ge
 800344c:	9808      	ldrge	r0, [sp, #32]
 800344e:	f020 0080 	bicge.w	r0, r0, #128	; 0x80
 8003452:	9008      	strge	r0, [sp, #32]
 8003454:	2c00      	cmp	r4, #0
 8003456:	bf18      	it	ne
 8003458:	f041 0101 	orrne.w	r1, r1, #1
 800345c:	2900      	cmp	r1, #0
 800345e:	f000 8323 	beq.w	8003aa8 <_svfprintf_r+0x8cc>
 8003462:	2a01      	cmp	r2, #1
 8003464:	f000 845f 	beq.w	8003d26 <_svfprintf_r+0xb4a>
 8003468:	2a02      	cmp	r2, #2
 800346a:	bf18      	it	ne
 800346c:	465a      	movne	r2, fp
 800346e:	d102      	bne.n	8003476 <_svfprintf_r+0x29a>
 8003470:	f000 bc48 	b.w	8003d04 <_svfprintf_r+0xb28>
 8003474:	4602      	mov	r2, r0
 8003476:	f003 0107 	and.w	r1, r3, #7
 800347a:	3130      	adds	r1, #48	; 0x30
 800347c:	1e50      	subs	r0, r2, #1
 800347e:	08db      	lsrs	r3, r3, #3
 8003480:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003484:	d1f6      	bne.n	8003474 <_svfprintf_r+0x298>
 8003486:	9b08      	ldr	r3, [sp, #32]
 8003488:	9011      	str	r0, [sp, #68]	; 0x44
 800348a:	07dd      	lsls	r5, r3, #31
 800348c:	d507      	bpl.n	800349e <_svfprintf_r+0x2c2>
 800348e:	2930      	cmp	r1, #48	; 0x30
 8003490:	f000 8733 	beq.w	80042fa <_svfprintf_r+0x111e>
 8003494:	1e90      	subs	r0, r2, #2
 8003496:	2330      	movs	r3, #48	; 0x30
 8003498:	9011      	str	r0, [sp, #68]	; 0x44
 800349a:	f802 3c02 	strb.w	r3, [r2, #-2]
 800349e:	ebc0 030b 	rsb	r3, r0, fp
 80034a2:	930d      	str	r3, [sp, #52]	; 0x34
 80034a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80034a6:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 80034aa:	9412      	str	r4, [sp, #72]	; 0x48
 80034ac:	42a3      	cmp	r3, r4
 80034ae:	bfb8      	it	lt
 80034b0:	4623      	movlt	r3, r4
 80034b2:	2000      	movs	r0, #0
 80034b4:	930a      	str	r3, [sp, #40]	; 0x28
 80034b6:	9016      	str	r0, [sp, #88]	; 0x58
 80034b8:	b111      	cbz	r1, 80034c0 <_svfprintf_r+0x2e4>
 80034ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80034bc:	3301      	adds	r3, #1
 80034be:	930a      	str	r3, [sp, #40]	; 0x28
 80034c0:	9b08      	ldr	r3, [sp, #32]
 80034c2:	f013 0302 	ands.w	r3, r3, #2
 80034c6:	9313      	str	r3, [sp, #76]	; 0x4c
 80034c8:	d002      	beq.n	80034d0 <_svfprintf_r+0x2f4>
 80034ca:	980a      	ldr	r0, [sp, #40]	; 0x28
 80034cc:	3002      	adds	r0, #2
 80034ce:	900a      	str	r0, [sp, #40]	; 0x28
 80034d0:	9b08      	ldr	r3, [sp, #32]
 80034d2:	f013 0384 	ands.w	r3, r3, #132	; 0x84
 80034d6:	9314      	str	r3, [sp, #80]	; 0x50
 80034d8:	f040 81bb 	bne.w	8003852 <_svfprintf_r+0x676>
 80034dc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80034de:	990a      	ldr	r1, [sp, #40]	; 0x28
 80034e0:	1a47      	subs	r7, r0, r1
 80034e2:	2f00      	cmp	r7, #0
 80034e4:	f340 81b5 	ble.w	8003852 <_svfprintf_r+0x676>
 80034e8:	2f10      	cmp	r7, #16
 80034ea:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80034ec:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80034ee:	f8df 8344 	ldr.w	r8, [pc, #836]	; 8003834 <_svfprintf_r+0x658>
 80034f2:	dd22      	ble.n	800353a <_svfprintf_r+0x35e>
 80034f4:	4623      	mov	r3, r4
 80034f6:	f04f 0910 	mov.w	r9, #16
 80034fa:	4644      	mov	r4, r8
 80034fc:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8003500:	e003      	b.n	800350a <_svfprintf_r+0x32e>
 8003502:	3f10      	subs	r7, #16
 8003504:	3608      	adds	r6, #8
 8003506:	2f10      	cmp	r7, #16
 8003508:	dd15      	ble.n	8003536 <_svfprintf_r+0x35a>
 800350a:	3301      	adds	r3, #1
 800350c:	3510      	adds	r5, #16
 800350e:	2b07      	cmp	r3, #7
 8003510:	e886 0210 	stmia.w	r6, {r4, r9}
 8003514:	953b      	str	r5, [sp, #236]	; 0xec
 8003516:	933a      	str	r3, [sp, #232]	; 0xe8
 8003518:	ddf3      	ble.n	8003502 <_svfprintf_r+0x326>
 800351a:	4640      	mov	r0, r8
 800351c:	4651      	mov	r1, sl
 800351e:	465a      	mov	r2, fp
 8003520:	f003 f9cc 	bl	80068bc <__ssprint_r>
 8003524:	2800      	cmp	r0, #0
 8003526:	f47f af30 	bne.w	800338a <_svfprintf_r+0x1ae>
 800352a:	3f10      	subs	r7, #16
 800352c:	2f10      	cmp	r7, #16
 800352e:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003530:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8003532:	ae1f      	add	r6, sp, #124	; 0x7c
 8003534:	dce9      	bgt.n	800350a <_svfprintf_r+0x32e>
 8003536:	46a0      	mov	r8, r4
 8003538:	461c      	mov	r4, r3
 800353a:	3401      	adds	r4, #1
 800353c:	19ed      	adds	r5, r5, r7
 800353e:	2c07      	cmp	r4, #7
 8003540:	f8c6 8000 	str.w	r8, [r6]
 8003544:	6077      	str	r7, [r6, #4]
 8003546:	953b      	str	r5, [sp, #236]	; 0xec
 8003548:	943a      	str	r4, [sp, #232]	; 0xe8
 800354a:	f300 8414 	bgt.w	8003d76 <_svfprintf_r+0xb9a>
 800354e:	3608      	adds	r6, #8
 8003550:	e180      	b.n	8003854 <_svfprintf_r+0x678>
 8003552:	9009      	str	r0, [sp, #36]	; 0x24
 8003554:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003556:	9315      	str	r3, [sp, #84]	; 0x54
 8003558:	1dc3      	adds	r3, r0, #7
 800355a:	f023 0307 	bic.w	r3, r3, #7
 800355e:	f103 0108 	add.w	r1, r3, #8
 8003562:	910e      	str	r1, [sp, #56]	; 0x38
 8003564:	f8d3 8000 	ldr.w	r8, [r3]
 8003568:	685d      	ldr	r5, [r3, #4]
 800356a:	4642      	mov	r2, r8
 800356c:	462b      	mov	r3, r5
 800356e:	4629      	mov	r1, r5
 8003570:	4640      	mov	r0, r8
 8003572:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
 8003576:	f003 f839 	bl	80065ec <__fpclassifyd>
 800357a:	2801      	cmp	r0, #1
 800357c:	4629      	mov	r1, r5
 800357e:	4640      	mov	r0, r8
 8003580:	f040 84d0 	bne.w	8003f24 <_svfprintf_r+0xd48>
 8003584:	2200      	movs	r2, #0
 8003586:	2300      	movs	r3, #0
 8003588:	f004 fd60 	bl	800804c <__aeabi_dcmplt>
 800358c:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 8003590:	b110      	cbz	r0, 8003598 <_svfprintf_r+0x3bc>
 8003592:	212d      	movs	r1, #45	; 0x2d
 8003594:	f88d 110f 	strb.w	r1, [sp, #271]	; 0x10f
 8003598:	2303      	movs	r3, #3
 800359a:	930a      	str	r3, [sp, #40]	; 0x28
 800359c:	2300      	movs	r3, #0
 800359e:	9312      	str	r3, [sp, #72]	; 0x48
 80035a0:	4aa0      	ldr	r2, [pc, #640]	; (8003824 <_svfprintf_r+0x648>)
 80035a2:	4ba1      	ldr	r3, [pc, #644]	; (8003828 <_svfprintf_r+0x64c>)
 80035a4:	9815      	ldr	r0, [sp, #84]	; 0x54
 80035a6:	2847      	cmp	r0, #71	; 0x47
 80035a8:	bfd8      	it	le
 80035aa:	461a      	movle	r2, r3
 80035ac:	9211      	str	r2, [sp, #68]	; 0x44
 80035ae:	9a08      	ldr	r2, [sp, #32]
 80035b0:	2303      	movs	r3, #3
 80035b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035b6:	930d      	str	r3, [sp, #52]	; 0x34
 80035b8:	2300      	movs	r3, #0
 80035ba:	9208      	str	r2, [sp, #32]
 80035bc:	9316      	str	r3, [sp, #88]	; 0x58
 80035be:	e77b      	b.n	80034b8 <_svfprintf_r+0x2dc>
 80035c0:	9b08      	ldr	r3, [sp, #32]
 80035c2:	f043 0308 	orr.w	r3, r3, #8
 80035c6:	9308      	str	r3, [sp, #32]
 80035c8:	e666      	b.n	8003298 <_svfprintf_r+0xbc>
 80035ca:	9908      	ldr	r1, [sp, #32]
 80035cc:	9009      	str	r0, [sp, #36]	; 0x24
 80035ce:	f041 0110 	orr.w	r1, r1, #16
 80035d2:	9108      	str	r1, [sp, #32]
 80035d4:	9a08      	ldr	r2, [sp, #32]
 80035d6:	9315      	str	r3, [sp, #84]	; 0x54
 80035d8:	f012 0110 	ands.w	r1, r2, #16
 80035dc:	f000 8090 	beq.w	8003700 <_svfprintf_r+0x524>
 80035e0:	980e      	ldr	r0, [sp, #56]	; 0x38
 80035e2:	6803      	ldr	r3, [r0, #0]
 80035e4:	2200      	movs	r2, #0
 80035e6:	1a99      	subs	r1, r3, r2
 80035e8:	bf18      	it	ne
 80035ea:	2101      	movne	r1, #1
 80035ec:	3004      	adds	r0, #4
 80035ee:	900e      	str	r0, [sp, #56]	; 0x38
 80035f0:	2000      	movs	r0, #0
 80035f2:	f88d 010f 	strb.w	r0, [sp, #271]	; 0x10f
 80035f6:	e727      	b.n	8003448 <_svfprintf_r+0x26c>
 80035f8:	9908      	ldr	r1, [sp, #32]
 80035fa:	9009      	str	r0, [sp, #36]	; 0x24
 80035fc:	f041 0110 	orr.w	r1, r1, #16
 8003600:	9108      	str	r1, [sp, #32]
 8003602:	9a08      	ldr	r2, [sp, #32]
 8003604:	9315      	str	r3, [sp, #84]	; 0x54
 8003606:	06d0      	lsls	r0, r2, #27
 8003608:	f140 80b9 	bpl.w	800377e <_svfprintf_r+0x5a2>
 800360c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800360e:	6803      	ldr	r3, [r0, #0]
 8003610:	2201      	movs	r2, #1
 8003612:	1c19      	adds	r1, r3, #0
 8003614:	bf18      	it	ne
 8003616:	2101      	movne	r1, #1
 8003618:	3004      	adds	r0, #4
 800361a:	900e      	str	r0, [sp, #56]	; 0x38
 800361c:	e7e8      	b.n	80035f0 <_svfprintf_r+0x414>
 800361e:	4a83      	ldr	r2, [pc, #524]	; (800382c <_svfprintf_r+0x650>)
 8003620:	9315      	str	r3, [sp, #84]	; 0x54
 8003622:	9b08      	ldr	r3, [sp, #32]
 8003624:	921c      	str	r2, [sp, #112]	; 0x70
 8003626:	06da      	lsls	r2, r3, #27
 8003628:	9009      	str	r0, [sp, #36]	; 0x24
 800362a:	f100 810d 	bmi.w	8003848 <_svfprintf_r+0x66c>
 800362e:	9908      	ldr	r1, [sp, #32]
 8003630:	064b      	lsls	r3, r1, #25
 8003632:	f140 8109 	bpl.w	8003848 <_svfprintf_r+0x66c>
 8003636:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003638:	8813      	ldrh	r3, [r2, #0]
 800363a:	3204      	adds	r2, #4
 800363c:	920e      	str	r2, [sp, #56]	; 0x38
 800363e:	1c19      	adds	r1, r3, #0
 8003640:	9a08      	ldr	r2, [sp, #32]
 8003642:	bf18      	it	ne
 8003644:	2101      	movne	r1, #1
 8003646:	420a      	tst	r2, r1
 8003648:	f000 83ca 	beq.w	8003de0 <_svfprintf_r+0xc04>
 800364c:	9908      	ldr	r1, [sp, #32]
 800364e:	9815      	ldr	r0, [sp, #84]	; 0x54
 8003650:	2230      	movs	r2, #48	; 0x30
 8003652:	f041 0102 	orr.w	r1, r1, #2
 8003656:	f88d 210c 	strb.w	r2, [sp, #268]	; 0x10c
 800365a:	9108      	str	r1, [sp, #32]
 800365c:	f88d 010d 	strb.w	r0, [sp, #269]	; 0x10d
 8003660:	2101      	movs	r1, #1
 8003662:	2202      	movs	r2, #2
 8003664:	e7c4      	b.n	80035f0 <_svfprintf_r+0x414>
 8003666:	9b08      	ldr	r3, [sp, #32]
 8003668:	f043 0310 	orr.w	r3, r3, #16
 800366c:	9308      	str	r3, [sp, #32]
 800366e:	e613      	b.n	8003298 <_svfprintf_r+0xbc>
 8003670:	2500      	movs	r5, #0
 8003672:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003674:	f88d 510f 	strb.w	r5, [sp, #271]	; 0x10f
 8003678:	9315      	str	r3, [sp, #84]	; 0x54
 800367a:	6812      	ldr	r2, [r2, #0]
 800367c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800367e:	9009      	str	r0, [sp, #36]	; 0x24
 8003680:	9211      	str	r2, [sp, #68]	; 0x44
 8003682:	1d1f      	adds	r7, r3, #4
 8003684:	2a00      	cmp	r2, #0
 8003686:	f000 864b 	beq.w	8004320 <_svfprintf_r+0x1144>
 800368a:	2c00      	cmp	r4, #0
 800368c:	9811      	ldr	r0, [sp, #68]	; 0x44
 800368e:	f2c0 8602 	blt.w	8004296 <_svfprintf_r+0x10ba>
 8003692:	4629      	mov	r1, r5
 8003694:	4622      	mov	r2, r4
 8003696:	f002 facf 	bl	8005c38 <memchr>
 800369a:	2800      	cmp	r0, #0
 800369c:	f000 866f 	beq.w	800437e <_svfprintf_r+0x11a2>
 80036a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80036a2:	9512      	str	r5, [sp, #72]	; 0x48
 80036a4:	1ac0      	subs	r0, r0, r3
 80036a6:	42a0      	cmp	r0, r4
 80036a8:	900d      	str	r0, [sp, #52]	; 0x34
 80036aa:	bfd1      	iteee	le
 80036ac:	9b0d      	ldrle	r3, [sp, #52]	; 0x34
 80036ae:	f89d 110f 	ldrbgt.w	r1, [sp, #271]	; 0x10f
 80036b2:	970e      	strgt	r7, [sp, #56]	; 0x38
 80036b4:	ea24 70e4 	bicgt.w	r0, r4, r4, asr #31
 80036b8:	bfd3      	iteet	le
 80036ba:	ea23 73e3 	bicle.w	r3, r3, r3, asr #31
 80036be:	900a      	strgt	r0, [sp, #40]	; 0x28
 80036c0:	940d      	strgt	r4, [sp, #52]	; 0x34
 80036c2:	930a      	strle	r3, [sp, #40]	; 0x28
 80036c4:	bfdc      	itt	le
 80036c6:	f89d 110f 	ldrble.w	r1, [sp, #271]	; 0x10f
 80036ca:	970e      	strle	r7, [sp, #56]	; 0x38
 80036cc:	9516      	str	r5, [sp, #88]	; 0x58
 80036ce:	e6f3      	b.n	80034b8 <_svfprintf_r+0x2dc>
 80036d0:	9a08      	ldr	r2, [sp, #32]
 80036d2:	f042 0210 	orr.w	r2, r2, #16
 80036d6:	9208      	str	r2, [sp, #32]
 80036d8:	e5de      	b.n	8003298 <_svfprintf_r+0xbc>
 80036da:	9009      	str	r0, [sp, #36]	; 0x24
 80036dc:	9808      	ldr	r0, [sp, #32]
 80036de:	06c3      	lsls	r3, r0, #27
 80036e0:	f140 843f 	bpl.w	8003f62 <_svfprintf_r+0xd86>
 80036e4:	990e      	ldr	r1, [sp, #56]	; 0x38
 80036e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80036e8:	680b      	ldr	r3, [r1, #0]
 80036ea:	3104      	adds	r1, #4
 80036ec:	910e      	str	r1, [sp, #56]	; 0x38
 80036ee:	601a      	str	r2, [r3, #0]
 80036f0:	e5a2      	b.n	8003238 <_svfprintf_r+0x5c>
 80036f2:	9a08      	ldr	r2, [sp, #32]
 80036f4:	9009      	str	r0, [sp, #36]	; 0x24
 80036f6:	f012 0110 	ands.w	r1, r2, #16
 80036fa:	9315      	str	r3, [sp, #84]	; 0x54
 80036fc:	f47f af70 	bne.w	80035e0 <_svfprintf_r+0x404>
 8003700:	9b08      	ldr	r3, [sp, #32]
 8003702:	f013 0240 	ands.w	r2, r3, #64	; 0x40
 8003706:	f000 8437 	beq.w	8003f78 <_svfprintf_r+0xd9c>
 800370a:	980e      	ldr	r0, [sp, #56]	; 0x38
 800370c:	8803      	ldrh	r3, [r0, #0]
 800370e:	460a      	mov	r2, r1
 8003710:	1c19      	adds	r1, r3, #0
 8003712:	bf18      	it	ne
 8003714:	2101      	movne	r1, #1
 8003716:	3004      	adds	r0, #4
 8003718:	900e      	str	r0, [sp, #56]	; 0x38
 800371a:	e769      	b.n	80035f0 <_svfprintf_r+0x414>
 800371c:	9009      	str	r0, [sp, #36]	; 0x24
 800371e:	9315      	str	r3, [sp, #84]	; 0x54
 8003720:	2b00      	cmp	r3, #0
 8003722:	f43f ae2b 	beq.w	800337c <_svfprintf_r+0x1a0>
 8003726:	2101      	movs	r1, #1
 8003728:	f88d 30bc 	strb.w	r3, [sp, #188]	; 0xbc
 800372c:	aa2f      	add	r2, sp, #188	; 0xbc
 800372e:	2300      	movs	r3, #0
 8003730:	910a      	str	r1, [sp, #40]	; 0x28
 8003732:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
 8003736:	910d      	str	r1, [sp, #52]	; 0x34
 8003738:	9211      	str	r2, [sp, #68]	; 0x44
 800373a:	2300      	movs	r3, #0
 800373c:	9312      	str	r3, [sp, #72]	; 0x48
 800373e:	9316      	str	r3, [sp, #88]	; 0x58
 8003740:	e6be      	b.n	80034c0 <_svfprintf_r+0x2e4>
 8003742:	f89d 310f 	ldrb.w	r3, [sp, #271]	; 0x10f
 8003746:	2b00      	cmp	r3, #0
 8003748:	f47f ada6 	bne.w	8003298 <_svfprintf_r+0xbc>
 800374c:	f88d 710f 	strb.w	r7, [sp, #271]	; 0x10f
 8003750:	e5a2      	b.n	8003298 <_svfprintf_r+0xbc>
 8003752:	9a08      	ldr	r2, [sp, #32]
 8003754:	f042 0201 	orr.w	r2, r2, #1
 8003758:	9208      	str	r2, [sp, #32]
 800375a:	e59d      	b.n	8003298 <_svfprintf_r+0xbc>
 800375c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800375e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	930b      	str	r3, [sp, #44]	; 0x2c
 8003764:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003766:	1d0b      	adds	r3, r1, #4
 8003768:	2a00      	cmp	r2, #0
 800376a:	f6ff adf7 	blt.w	800335c <_svfprintf_r+0x180>
 800376e:	930e      	str	r3, [sp, #56]	; 0x38
 8003770:	e592      	b.n	8003298 <_svfprintf_r+0xbc>
 8003772:	9a08      	ldr	r2, [sp, #32]
 8003774:	9009      	str	r0, [sp, #36]	; 0x24
 8003776:	06d0      	lsls	r0, r2, #27
 8003778:	9315      	str	r3, [sp, #84]	; 0x54
 800377a:	f53f af47 	bmi.w	800360c <_svfprintf_r+0x430>
 800377e:	9908      	ldr	r1, [sp, #32]
 8003780:	0649      	lsls	r1, r1, #25
 8003782:	f140 83ea 	bpl.w	8003f5a <_svfprintf_r+0xd7e>
 8003786:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003788:	8813      	ldrh	r3, [r2, #0]
 800378a:	2201      	movs	r2, #1
 800378c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800378e:	1c19      	adds	r1, r3, #0
 8003790:	bf18      	it	ne
 8003792:	2101      	movne	r1, #1
 8003794:	3004      	adds	r0, #4
 8003796:	900e      	str	r0, [sp, #56]	; 0x38
 8003798:	e72a      	b.n	80035f0 <_svfprintf_r+0x414>
 800379a:	9009      	str	r0, [sp, #36]	; 0x24
 800379c:	9808      	ldr	r0, [sp, #32]
 800379e:	9315      	str	r3, [sp, #84]	; 0x54
 80037a0:	06c3      	lsls	r3, r0, #27
 80037a2:	f57f ae41 	bpl.w	8003428 <_svfprintf_r+0x24c>
 80037a6:	990e      	ldr	r1, [sp, #56]	; 0x38
 80037a8:	680b      	ldr	r3, [r1, #0]
 80037aa:	3104      	adds	r1, #4
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	910e      	str	r1, [sp, #56]	; 0x38
 80037b0:	f6bf ae46 	bge.w	8003440 <_svfprintf_r+0x264>
 80037b4:	425b      	negs	r3, r3
 80037b6:	222d      	movs	r2, #45	; 0x2d
 80037b8:	1c19      	adds	r1, r3, #0
 80037ba:	f88d 210f 	strb.w	r2, [sp, #271]	; 0x10f
 80037be:	bf18      	it	ne
 80037c0:	2101      	movne	r1, #1
 80037c2:	2201      	movs	r2, #1
 80037c4:	e640      	b.n	8003448 <_svfprintf_r+0x26c>
 80037c6:	9908      	ldr	r1, [sp, #32]
 80037c8:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80037cc:	9108      	str	r1, [sp, #32]
 80037ce:	e563      	b.n	8003298 <_svfprintf_r+0xbc>
 80037d0:	9315      	str	r3, [sp, #84]	; 0x54
 80037d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80037d4:	990e      	ldr	r1, [sp, #56]	; 0x38
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	9009      	str	r0, [sp, #36]	; 0x24
 80037da:	2200      	movs	r2, #0
 80037dc:	2001      	movs	r0, #1
 80037de:	f88d 210f 	strb.w	r2, [sp, #271]	; 0x10f
 80037e2:	3104      	adds	r1, #4
 80037e4:	aa2f      	add	r2, sp, #188	; 0xbc
 80037e6:	900a      	str	r0, [sp, #40]	; 0x28
 80037e8:	910e      	str	r1, [sp, #56]	; 0x38
 80037ea:	f88d 30bc 	strb.w	r3, [sp, #188]	; 0xbc
 80037ee:	900d      	str	r0, [sp, #52]	; 0x34
 80037f0:	9211      	str	r2, [sp, #68]	; 0x44
 80037f2:	e7a2      	b.n	800373a <_svfprintf_r+0x55e>
 80037f4:	490e      	ldr	r1, [pc, #56]	; (8003830 <_svfprintf_r+0x654>)
 80037f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80037f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80037fa:	911c      	str	r1, [sp, #112]	; 0x70
 80037fc:	9908      	ldr	r1, [sp, #32]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	9009      	str	r0, [sp, #36]	; 0x24
 8003802:	3204      	adds	r2, #4
 8003804:	f041 0102 	orr.w	r1, r1, #2
 8003808:	2078      	movs	r0, #120	; 0x78
 800380a:	920e      	str	r2, [sp, #56]	; 0x38
 800380c:	9108      	str	r1, [sp, #32]
 800380e:	2230      	movs	r2, #48	; 0x30
 8003810:	1c19      	adds	r1, r3, #0
 8003812:	f88d 210c 	strb.w	r2, [sp, #268]	; 0x10c
 8003816:	bf18      	it	ne
 8003818:	2101      	movne	r1, #1
 800381a:	f88d 010d 	strb.w	r0, [sp, #269]	; 0x10d
 800381e:	2202      	movs	r2, #2
 8003820:	9015      	str	r0, [sp, #84]	; 0x54
 8003822:	e6e5      	b.n	80035f0 <_svfprintf_r+0x414>
 8003824:	08008570 	.word	0x08008570
 8003828:	0800856c 	.word	0x0800856c
 800382c:	0800857c 	.word	0x0800857c
 8003830:	08008590 	.word	0x08008590
 8003834:	0800838c 	.word	0x0800838c
 8003838:	9315      	str	r3, [sp, #84]	; 0x54
 800383a:	9b08      	ldr	r3, [sp, #32]
 800383c:	49a4      	ldr	r1, [pc, #656]	; (8003ad0 <_svfprintf_r+0x8f4>)
 800383e:	9009      	str	r0, [sp, #36]	; 0x24
 8003840:	06da      	lsls	r2, r3, #27
 8003842:	911c      	str	r1, [sp, #112]	; 0x70
 8003844:	f57f aef3 	bpl.w	800362e <_svfprintf_r+0x452>
 8003848:	980e      	ldr	r0, [sp, #56]	; 0x38
 800384a:	6803      	ldr	r3, [r0, #0]
 800384c:	3004      	adds	r0, #4
 800384e:	900e      	str	r0, [sp, #56]	; 0x38
 8003850:	e6f5      	b.n	800363e <_svfprintf_r+0x462>
 8003852:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003854:	f89d 310f 	ldrb.w	r3, [sp, #271]	; 0x10f
 8003858:	b16b      	cbz	r3, 8003876 <_svfprintf_r+0x69a>
 800385a:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 800385c:	f20d 130f 	addw	r3, sp, #271	; 0x10f
 8003860:	3401      	adds	r4, #1
 8003862:	6033      	str	r3, [r6, #0]
 8003864:	3501      	adds	r5, #1
 8003866:	2301      	movs	r3, #1
 8003868:	2c07      	cmp	r4, #7
 800386a:	6073      	str	r3, [r6, #4]
 800386c:	953b      	str	r5, [sp, #236]	; 0xec
 800386e:	943a      	str	r4, [sp, #232]	; 0xe8
 8003870:	f300 81f5 	bgt.w	8003c5e <_svfprintf_r+0xa82>
 8003874:	3608      	adds	r6, #8
 8003876:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003878:	b163      	cbz	r3, 8003894 <_svfprintf_r+0x6b8>
 800387a:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 800387c:	ab43      	add	r3, sp, #268	; 0x10c
 800387e:	3401      	adds	r4, #1
 8003880:	6033      	str	r3, [r6, #0]
 8003882:	3502      	adds	r5, #2
 8003884:	2302      	movs	r3, #2
 8003886:	2c07      	cmp	r4, #7
 8003888:	6073      	str	r3, [r6, #4]
 800388a:	953b      	str	r5, [sp, #236]	; 0xec
 800388c:	943a      	str	r4, [sp, #232]	; 0xe8
 800388e:	f300 81db 	bgt.w	8003c48 <_svfprintf_r+0xa6c>
 8003892:	3608      	adds	r6, #8
 8003894:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003896:	2b80      	cmp	r3, #128	; 0x80
 8003898:	f000 8122 	beq.w	8003ae0 <_svfprintf_r+0x904>
 800389c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800389e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80038a0:	1ac7      	subs	r7, r0, r3
 80038a2:	2f00      	cmp	r7, #0
 80038a4:	dd32      	ble.n	800390c <_svfprintf_r+0x730>
 80038a6:	2f10      	cmp	r7, #16
 80038a8:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80038aa:	f8df 822c 	ldr.w	r8, [pc, #556]	; 8003ad8 <_svfprintf_r+0x8fc>
 80038ae:	dd22      	ble.n	80038f6 <_svfprintf_r+0x71a>
 80038b0:	4623      	mov	r3, r4
 80038b2:	f04f 0910 	mov.w	r9, #16
 80038b6:	4644      	mov	r4, r8
 80038b8:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 80038bc:	e003      	b.n	80038c6 <_svfprintf_r+0x6ea>
 80038be:	3f10      	subs	r7, #16
 80038c0:	3608      	adds	r6, #8
 80038c2:	2f10      	cmp	r7, #16
 80038c4:	dd15      	ble.n	80038f2 <_svfprintf_r+0x716>
 80038c6:	3301      	adds	r3, #1
 80038c8:	3510      	adds	r5, #16
 80038ca:	2b07      	cmp	r3, #7
 80038cc:	e886 0210 	stmia.w	r6, {r4, r9}
 80038d0:	953b      	str	r5, [sp, #236]	; 0xec
 80038d2:	933a      	str	r3, [sp, #232]	; 0xe8
 80038d4:	ddf3      	ble.n	80038be <_svfprintf_r+0x6e2>
 80038d6:	4640      	mov	r0, r8
 80038d8:	4651      	mov	r1, sl
 80038da:	465a      	mov	r2, fp
 80038dc:	f002 ffee 	bl	80068bc <__ssprint_r>
 80038e0:	2800      	cmp	r0, #0
 80038e2:	f47f ad52 	bne.w	800338a <_svfprintf_r+0x1ae>
 80038e6:	3f10      	subs	r7, #16
 80038e8:	2f10      	cmp	r7, #16
 80038ea:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80038ec:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 80038ee:	ae1f      	add	r6, sp, #124	; 0x7c
 80038f0:	dce9      	bgt.n	80038c6 <_svfprintf_r+0x6ea>
 80038f2:	46a0      	mov	r8, r4
 80038f4:	461c      	mov	r4, r3
 80038f6:	3401      	adds	r4, #1
 80038f8:	19ed      	adds	r5, r5, r7
 80038fa:	2c07      	cmp	r4, #7
 80038fc:	f8c6 8000 	str.w	r8, [r6]
 8003900:	6077      	str	r7, [r6, #4]
 8003902:	953b      	str	r5, [sp, #236]	; 0xec
 8003904:	943a      	str	r4, [sp, #232]	; 0xe8
 8003906:	f300 8194 	bgt.w	8003c32 <_svfprintf_r+0xa56>
 800390a:	3608      	adds	r6, #8
 800390c:	9908      	ldr	r1, [sp, #32]
 800390e:	05ca      	lsls	r2, r1, #23
 8003910:	d472      	bmi.n	80039f8 <_svfprintf_r+0x81c>
 8003912:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003914:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003916:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8003918:	6073      	str	r3, [r6, #4]
 800391a:	3401      	adds	r4, #1
 800391c:	18ed      	adds	r5, r5, r3
 800391e:	2c07      	cmp	r4, #7
 8003920:	6032      	str	r2, [r6, #0]
 8003922:	953b      	str	r5, [sp, #236]	; 0xec
 8003924:	943a      	str	r4, [sp, #232]	; 0xe8
 8003926:	dc5c      	bgt.n	80039e2 <_svfprintf_r+0x806>
 8003928:	3608      	adds	r6, #8
 800392a:	9908      	ldr	r1, [sp, #32]
 800392c:	074b      	lsls	r3, r1, #29
 800392e:	d53e      	bpl.n	80039ae <_svfprintf_r+0x7d2>
 8003930:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003932:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003934:	1ad7      	subs	r7, r2, r3
 8003936:	2f00      	cmp	r7, #0
 8003938:	dd39      	ble.n	80039ae <_svfprintf_r+0x7d2>
 800393a:	2f10      	cmp	r7, #16
 800393c:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 800393e:	f8df 819c 	ldr.w	r8, [pc, #412]	; 8003adc <_svfprintf_r+0x900>
 8003942:	dd22      	ble.n	800398a <_svfprintf_r+0x7ae>
 8003944:	4623      	mov	r3, r4
 8003946:	f04f 0910 	mov.w	r9, #16
 800394a:	4644      	mov	r4, r8
 800394c:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8003950:	e003      	b.n	800395a <_svfprintf_r+0x77e>
 8003952:	3f10      	subs	r7, #16
 8003954:	3608      	adds	r6, #8
 8003956:	2f10      	cmp	r7, #16
 8003958:	dd15      	ble.n	8003986 <_svfprintf_r+0x7aa>
 800395a:	3301      	adds	r3, #1
 800395c:	3510      	adds	r5, #16
 800395e:	2b07      	cmp	r3, #7
 8003960:	e886 0210 	stmia.w	r6, {r4, r9}
 8003964:	953b      	str	r5, [sp, #236]	; 0xec
 8003966:	933a      	str	r3, [sp, #232]	; 0xe8
 8003968:	ddf3      	ble.n	8003952 <_svfprintf_r+0x776>
 800396a:	4640      	mov	r0, r8
 800396c:	4651      	mov	r1, sl
 800396e:	465a      	mov	r2, fp
 8003970:	f002 ffa4 	bl	80068bc <__ssprint_r>
 8003974:	2800      	cmp	r0, #0
 8003976:	f47f ad08 	bne.w	800338a <_svfprintf_r+0x1ae>
 800397a:	3f10      	subs	r7, #16
 800397c:	2f10      	cmp	r7, #16
 800397e:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003980:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8003982:	ae1f      	add	r6, sp, #124	; 0x7c
 8003984:	dce9      	bgt.n	800395a <_svfprintf_r+0x77e>
 8003986:	46a0      	mov	r8, r4
 8003988:	461c      	mov	r4, r3
 800398a:	3401      	adds	r4, #1
 800398c:	197d      	adds	r5, r7, r5
 800398e:	2c07      	cmp	r4, #7
 8003990:	f8c6 8000 	str.w	r8, [r6]
 8003994:	6077      	str	r7, [r6, #4]
 8003996:	953b      	str	r5, [sp, #236]	; 0xec
 8003998:	943a      	str	r4, [sp, #232]	; 0xe8
 800399a:	dd08      	ble.n	80039ae <_svfprintf_r+0x7d2>
 800399c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800399e:	4651      	mov	r1, sl
 80039a0:	465a      	mov	r2, fp
 80039a2:	f002 ff8b 	bl	80068bc <__ssprint_r>
 80039a6:	2800      	cmp	r0, #0
 80039a8:	f47f acef 	bne.w	800338a <_svfprintf_r+0x1ae>
 80039ac:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80039ae:	980c      	ldr	r0, [sp, #48]	; 0x30
 80039b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80039b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80039b4:	428a      	cmp	r2, r1
 80039b6:	bfac      	ite	ge
 80039b8:	1880      	addge	r0, r0, r2
 80039ba:	1840      	addlt	r0, r0, r1
 80039bc:	900c      	str	r0, [sp, #48]	; 0x30
 80039be:	2d00      	cmp	r5, #0
 80039c0:	f040 8129 	bne.w	8003c16 <_svfprintf_r+0xa3a>
 80039c4:	2300      	movs	r3, #0
 80039c6:	933a      	str	r3, [sp, #232]	; 0xe8
 80039c8:	ae1f      	add	r6, sp, #124	; 0x7c
 80039ca:	e435      	b.n	8003238 <_svfprintf_r+0x5c>
 80039cc:	46a0      	mov	r8, r4
 80039ce:	461c      	mov	r4, r3
 80039d0:	3401      	adds	r4, #1
 80039d2:	19ed      	adds	r5, r5, r7
 80039d4:	2c07      	cmp	r4, #7
 80039d6:	f8c6 8000 	str.w	r8, [r6]
 80039da:	6077      	str	r7, [r6, #4]
 80039dc:	953b      	str	r5, [sp, #236]	; 0xec
 80039de:	943a      	str	r4, [sp, #232]	; 0xe8
 80039e0:	dda2      	ble.n	8003928 <_svfprintf_r+0x74c>
 80039e2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80039e4:	4651      	mov	r1, sl
 80039e6:	465a      	mov	r2, fp
 80039e8:	f002 ff68 	bl	80068bc <__ssprint_r>
 80039ec:	2800      	cmp	r0, #0
 80039ee:	f47f accc 	bne.w	800338a <_svfprintf_r+0x1ae>
 80039f2:	ae1f      	add	r6, sp, #124	; 0x7c
 80039f4:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80039f6:	e798      	b.n	800392a <_svfprintf_r+0x74e>
 80039f8:	9815      	ldr	r0, [sp, #84]	; 0x54
 80039fa:	2865      	cmp	r0, #101	; 0x65
 80039fc:	f340 80aa 	ble.w	8003b54 <_svfprintf_r+0x978>
 8003a00:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 8003a04:	2200      	movs	r2, #0
 8003a06:	2300      	movs	r3, #0
 8003a08:	f004 fb16 	bl	8008038 <__aeabi_dcmpeq>
 8003a0c:	2800      	cmp	r0, #0
 8003a0e:	f000 8131 	beq.w	8003c74 <_svfprintf_r+0xa98>
 8003a12:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003a14:	4b2f      	ldr	r3, [pc, #188]	; (8003ad4 <_svfprintf_r+0x8f8>)
 8003a16:	3401      	adds	r4, #1
 8003a18:	6033      	str	r3, [r6, #0]
 8003a1a:	3501      	adds	r5, #1
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	2c07      	cmp	r4, #7
 8003a20:	6073      	str	r3, [r6, #4]
 8003a22:	953b      	str	r5, [sp, #236]	; 0xec
 8003a24:	943a      	str	r4, [sp, #232]	; 0xe8
 8003a26:	f300 82b8 	bgt.w	8003f9a <_svfprintf_r+0xdbe>
 8003a2a:	3608      	adds	r6, #8
 8003a2c:	9b40      	ldr	r3, [sp, #256]	; 0x100
 8003a2e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8003a30:	4299      	cmp	r1, r3
 8003a32:	dc03      	bgt.n	8003a3c <_svfprintf_r+0x860>
 8003a34:	9a08      	ldr	r2, [sp, #32]
 8003a36:	07d3      	lsls	r3, r2, #31
 8003a38:	f57f af77 	bpl.w	800392a <_svfprintf_r+0x74e>
 8003a3c:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003a3e:	981a      	ldr	r0, [sp, #104]	; 0x68
 8003a40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003a42:	6070      	str	r0, [r6, #4]
 8003a44:	3401      	adds	r4, #1
 8003a46:	182d      	adds	r5, r5, r0
 8003a48:	2c07      	cmp	r4, #7
 8003a4a:	6033      	str	r3, [r6, #0]
 8003a4c:	953b      	str	r5, [sp, #236]	; 0xec
 8003a4e:	943a      	str	r4, [sp, #232]	; 0xe8
 8003a50:	f300 8300 	bgt.w	8004054 <_svfprintf_r+0xe78>
 8003a54:	3608      	adds	r6, #8
 8003a56:	9910      	ldr	r1, [sp, #64]	; 0x40
 8003a58:	1e4f      	subs	r7, r1, #1
 8003a5a:	2f00      	cmp	r7, #0
 8003a5c:	f77f af65 	ble.w	800392a <_svfprintf_r+0x74e>
 8003a60:	2f10      	cmp	r7, #16
 8003a62:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003a64:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8003ad8 <_svfprintf_r+0x8fc>
 8003a68:	ddb2      	ble.n	80039d0 <_svfprintf_r+0x7f4>
 8003a6a:	4623      	mov	r3, r4
 8003a6c:	f04f 0910 	mov.w	r9, #16
 8003a70:	4644      	mov	r4, r8
 8003a72:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8003a76:	e003      	b.n	8003a80 <_svfprintf_r+0x8a4>
 8003a78:	3608      	adds	r6, #8
 8003a7a:	3f10      	subs	r7, #16
 8003a7c:	2f10      	cmp	r7, #16
 8003a7e:	dda5      	ble.n	80039cc <_svfprintf_r+0x7f0>
 8003a80:	3301      	adds	r3, #1
 8003a82:	3510      	adds	r5, #16
 8003a84:	2b07      	cmp	r3, #7
 8003a86:	e886 0210 	stmia.w	r6, {r4, r9}
 8003a8a:	953b      	str	r5, [sp, #236]	; 0xec
 8003a8c:	933a      	str	r3, [sp, #232]	; 0xe8
 8003a8e:	ddf3      	ble.n	8003a78 <_svfprintf_r+0x89c>
 8003a90:	4640      	mov	r0, r8
 8003a92:	4651      	mov	r1, sl
 8003a94:	465a      	mov	r2, fp
 8003a96:	f002 ff11 	bl	80068bc <__ssprint_r>
 8003a9a:	2800      	cmp	r0, #0
 8003a9c:	f47f ac75 	bne.w	800338a <_svfprintf_r+0x1ae>
 8003aa0:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003aa2:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8003aa4:	ae1f      	add	r6, sp, #124	; 0x7c
 8003aa6:	e7e8      	b.n	8003a7a <_svfprintf_r+0x89e>
 8003aa8:	2a00      	cmp	r2, #0
 8003aaa:	f040 80be 	bne.w	8003c2a <_svfprintf_r+0xa4e>
 8003aae:	9808      	ldr	r0, [sp, #32]
 8003ab0:	07c1      	lsls	r1, r0, #31
 8003ab2:	bf5c      	itt	pl
 8003ab4:	920d      	strpl	r2, [sp, #52]	; 0x34
 8003ab6:	f8cd b044 	strpl.w	fp, [sp, #68]	; 0x44
 8003aba:	f57f acf3 	bpl.w	80034a4 <_svfprintf_r+0x2c8>
 8003abe:	991d      	ldr	r1, [sp, #116]	; 0x74
 8003ac0:	2330      	movs	r3, #48	; 0x30
 8003ac2:	f10d 02e3 	add.w	r2, sp, #227	; 0xe3
 8003ac6:	f88d 30e3 	strb.w	r3, [sp, #227]	; 0xe3
 8003aca:	910d      	str	r1, [sp, #52]	; 0x34
 8003acc:	9211      	str	r2, [sp, #68]	; 0x44
 8003ace:	e4e9      	b.n	80034a4 <_svfprintf_r+0x2c8>
 8003ad0:	08008590 	.word	0x08008590
 8003ad4:	080085ac 	.word	0x080085ac
 8003ad8:	0800839c 	.word	0x0800839c
 8003adc:	0800838c 	.word	0x0800838c
 8003ae0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003ae2:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003ae4:	1a47      	subs	r7, r0, r1
 8003ae6:	2f00      	cmp	r7, #0
 8003ae8:	f77f aed8 	ble.w	800389c <_svfprintf_r+0x6c0>
 8003aec:	2f10      	cmp	r7, #16
 8003aee:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003af0:	f8df 86d8 	ldr.w	r8, [pc, #1752]	; 80041cc <_svfprintf_r+0xff0>
 8003af4:	dd22      	ble.n	8003b3c <_svfprintf_r+0x960>
 8003af6:	4623      	mov	r3, r4
 8003af8:	f04f 0910 	mov.w	r9, #16
 8003afc:	4644      	mov	r4, r8
 8003afe:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8003b02:	e003      	b.n	8003b0c <_svfprintf_r+0x930>
 8003b04:	3f10      	subs	r7, #16
 8003b06:	3608      	adds	r6, #8
 8003b08:	2f10      	cmp	r7, #16
 8003b0a:	dd15      	ble.n	8003b38 <_svfprintf_r+0x95c>
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	3510      	adds	r5, #16
 8003b10:	2b07      	cmp	r3, #7
 8003b12:	e886 0210 	stmia.w	r6, {r4, r9}
 8003b16:	953b      	str	r5, [sp, #236]	; 0xec
 8003b18:	933a      	str	r3, [sp, #232]	; 0xe8
 8003b1a:	ddf3      	ble.n	8003b04 <_svfprintf_r+0x928>
 8003b1c:	4640      	mov	r0, r8
 8003b1e:	4651      	mov	r1, sl
 8003b20:	465a      	mov	r2, fp
 8003b22:	f002 fecb 	bl	80068bc <__ssprint_r>
 8003b26:	2800      	cmp	r0, #0
 8003b28:	f47f ac2f 	bne.w	800338a <_svfprintf_r+0x1ae>
 8003b2c:	3f10      	subs	r7, #16
 8003b2e:	2f10      	cmp	r7, #16
 8003b30:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003b32:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8003b34:	ae1f      	add	r6, sp, #124	; 0x7c
 8003b36:	dce9      	bgt.n	8003b0c <_svfprintf_r+0x930>
 8003b38:	46a0      	mov	r8, r4
 8003b3a:	461c      	mov	r4, r3
 8003b3c:	3401      	adds	r4, #1
 8003b3e:	19ed      	adds	r5, r5, r7
 8003b40:	2c07      	cmp	r4, #7
 8003b42:	f8c6 8000 	str.w	r8, [r6]
 8003b46:	6077      	str	r7, [r6, #4]
 8003b48:	953b      	str	r5, [sp, #236]	; 0xec
 8003b4a:	943a      	str	r4, [sp, #232]	; 0xe8
 8003b4c:	f300 81df 	bgt.w	8003f0e <_svfprintf_r+0xd32>
 8003b50:	3608      	adds	r6, #8
 8003b52:	e6a3      	b.n	800389c <_svfprintf_r+0x6c0>
 8003b54:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003b56:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003b58:	2a01      	cmp	r2, #1
 8003b5a:	f340 81a5 	ble.w	8003ea8 <_svfprintf_r+0xccc>
 8003b5e:	3401      	adds	r4, #1
 8003b60:	9811      	ldr	r0, [sp, #68]	; 0x44
 8003b62:	3501      	adds	r5, #1
 8003b64:	2301      	movs	r3, #1
 8003b66:	2c07      	cmp	r4, #7
 8003b68:	6030      	str	r0, [r6, #0]
 8003b6a:	6073      	str	r3, [r6, #4]
 8003b6c:	953b      	str	r5, [sp, #236]	; 0xec
 8003b6e:	943a      	str	r4, [sp, #232]	; 0xe8
 8003b70:	f300 81c1 	bgt.w	8003ef6 <_svfprintf_r+0xd1a>
 8003b74:	3608      	adds	r6, #8
 8003b76:	991a      	ldr	r1, [sp, #104]	; 0x68
 8003b78:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8003b7a:	6071      	str	r1, [r6, #4]
 8003b7c:	3401      	adds	r4, #1
 8003b7e:	186d      	adds	r5, r5, r1
 8003b80:	2c07      	cmp	r4, #7
 8003b82:	6032      	str	r2, [r6, #0]
 8003b84:	953b      	str	r5, [sp, #236]	; 0xec
 8003b86:	943a      	str	r4, [sp, #232]	; 0xe8
 8003b88:	f300 81a9 	bgt.w	8003ede <_svfprintf_r+0xd02>
 8003b8c:	3608      	adds	r6, #8
 8003b8e:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 8003b92:	2200      	movs	r2, #0
 8003b94:	2300      	movs	r3, #0
 8003b96:	f004 fa4f 	bl	8008038 <__aeabi_dcmpeq>
 8003b9a:	2800      	cmp	r0, #0
 8003b9c:	f040 80f6 	bne.w	8003d8c <_svfprintf_r+0xbb0>
 8003ba0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003ba2:	9811      	ldr	r0, [sp, #68]	; 0x44
 8003ba4:	1e5a      	subs	r2, r3, #1
 8003ba6:	3401      	adds	r4, #1
 8003ba8:	1c43      	adds	r3, r0, #1
 8003baa:	18ad      	adds	r5, r5, r2
 8003bac:	2c07      	cmp	r4, #7
 8003bae:	6033      	str	r3, [r6, #0]
 8003bb0:	6072      	str	r2, [r6, #4]
 8003bb2:	953b      	str	r5, [sp, #236]	; 0xec
 8003bb4:	943a      	str	r4, [sp, #232]	; 0xe8
 8003bb6:	dc22      	bgt.n	8003bfe <_svfprintf_r+0xa22>
 8003bb8:	3608      	adds	r6, #8
 8003bba:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003bbc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8003bbe:	3401      	adds	r4, #1
 8003bc0:	18ed      	adds	r5, r5, r3
 8003bc2:	2c07      	cmp	r4, #7
 8003bc4:	ab3c      	add	r3, sp, #240	; 0xf0
 8003bc6:	6033      	str	r3, [r6, #0]
 8003bc8:	6070      	str	r0, [r6, #4]
 8003bca:	953b      	str	r5, [sp, #236]	; 0xec
 8003bcc:	943a      	str	r4, [sp, #232]	; 0xe8
 8003bce:	f77f aeab 	ble.w	8003928 <_svfprintf_r+0x74c>
 8003bd2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8003bd4:	4651      	mov	r1, sl
 8003bd6:	465a      	mov	r2, fp
 8003bd8:	f002 fe70 	bl	80068bc <__ssprint_r>
 8003bdc:	2800      	cmp	r0, #0
 8003bde:	f47f abd4 	bne.w	800338a <_svfprintf_r+0x1ae>
 8003be2:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003be4:	ae1f      	add	r6, sp, #124	; 0x7c
 8003be6:	e6a0      	b.n	800392a <_svfprintf_r+0x74e>
 8003be8:	46a0      	mov	r8, r4
 8003bea:	461c      	mov	r4, r3
 8003bec:	3401      	adds	r4, #1
 8003bee:	19ed      	adds	r5, r5, r7
 8003bf0:	2c07      	cmp	r4, #7
 8003bf2:	f8c6 8000 	str.w	r8, [r6]
 8003bf6:	6077      	str	r7, [r6, #4]
 8003bf8:	953b      	str	r5, [sp, #236]	; 0xec
 8003bfa:	943a      	str	r4, [sp, #232]	; 0xe8
 8003bfc:	dddc      	ble.n	8003bb8 <_svfprintf_r+0x9dc>
 8003bfe:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8003c00:	4651      	mov	r1, sl
 8003c02:	465a      	mov	r2, fp
 8003c04:	f002 fe5a 	bl	80068bc <__ssprint_r>
 8003c08:	2800      	cmp	r0, #0
 8003c0a:	f47f abbe 	bne.w	800338a <_svfprintf_r+0x1ae>
 8003c0e:	ae1f      	add	r6, sp, #124	; 0x7c
 8003c10:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003c12:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003c14:	e7d1      	b.n	8003bba <_svfprintf_r+0x9de>
 8003c16:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8003c18:	4651      	mov	r1, sl
 8003c1a:	465a      	mov	r2, fp
 8003c1c:	f002 fe4e 	bl	80068bc <__ssprint_r>
 8003c20:	2800      	cmp	r0, #0
 8003c22:	f43f aecf 	beq.w	80039c4 <_svfprintf_r+0x7e8>
 8003c26:	f7ff bbb0 	b.w	800338a <_svfprintf_r+0x1ae>
 8003c2a:	910d      	str	r1, [sp, #52]	; 0x34
 8003c2c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8003c30:	e438      	b.n	80034a4 <_svfprintf_r+0x2c8>
 8003c32:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8003c34:	4651      	mov	r1, sl
 8003c36:	465a      	mov	r2, fp
 8003c38:	f002 fe40 	bl	80068bc <__ssprint_r>
 8003c3c:	2800      	cmp	r0, #0
 8003c3e:	f47f aba4 	bne.w	800338a <_svfprintf_r+0x1ae>
 8003c42:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003c44:	ae1f      	add	r6, sp, #124	; 0x7c
 8003c46:	e661      	b.n	800390c <_svfprintf_r+0x730>
 8003c48:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8003c4a:	4651      	mov	r1, sl
 8003c4c:	465a      	mov	r2, fp
 8003c4e:	f002 fe35 	bl	80068bc <__ssprint_r>
 8003c52:	2800      	cmp	r0, #0
 8003c54:	f47f ab99 	bne.w	800338a <_svfprintf_r+0x1ae>
 8003c58:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003c5a:	ae1f      	add	r6, sp, #124	; 0x7c
 8003c5c:	e61a      	b.n	8003894 <_svfprintf_r+0x6b8>
 8003c5e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8003c60:	4651      	mov	r1, sl
 8003c62:	465a      	mov	r2, fp
 8003c64:	f002 fe2a 	bl	80068bc <__ssprint_r>
 8003c68:	2800      	cmp	r0, #0
 8003c6a:	f47f ab8e 	bne.w	800338a <_svfprintf_r+0x1ae>
 8003c6e:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003c70:	ae1f      	add	r6, sp, #124	; 0x7c
 8003c72:	e600      	b.n	8003876 <_svfprintf_r+0x69a>
 8003c74:	9f40      	ldr	r7, [sp, #256]	; 0x100
 8003c76:	2f00      	cmp	r7, #0
 8003c78:	f340 819a 	ble.w	8003fb0 <_svfprintf_r+0xdd4>
 8003c7c:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8003c7e:	9816      	ldr	r0, [sp, #88]	; 0x58
 8003c80:	9911      	ldr	r1, [sp, #68]	; 0x44
 8003c82:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003c84:	4287      	cmp	r7, r0
 8003c86:	bfa8      	it	ge
 8003c88:	4607      	movge	r7, r0
 8003c8a:	1889      	adds	r1, r1, r2
 8003c8c:	2f00      	cmp	r7, #0
 8003c8e:	910d      	str	r1, [sp, #52]	; 0x34
 8003c90:	dd0b      	ble.n	8003caa <_svfprintf_r+0xace>
 8003c92:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003c94:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8003c96:	6077      	str	r7, [r6, #4]
 8003c98:	3401      	adds	r4, #1
 8003c9a:	19ed      	adds	r5, r5, r7
 8003c9c:	2c07      	cmp	r4, #7
 8003c9e:	6032      	str	r2, [r6, #0]
 8003ca0:	953b      	str	r5, [sp, #236]	; 0xec
 8003ca2:	943a      	str	r4, [sp, #232]	; 0xe8
 8003ca4:	f300 8304 	bgt.w	80042b0 <_svfprintf_r+0x10d4>
 8003ca8:	3608      	adds	r6, #8
 8003caa:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003cac:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
 8003cb0:	1bdf      	subs	r7, r3, r7
 8003cb2:	2f00      	cmp	r7, #0
 8003cb4:	f340 80a0 	ble.w	8003df8 <_svfprintf_r+0xc1c>
 8003cb8:	2f10      	cmp	r7, #16
 8003cba:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003cbc:	f8df 850c 	ldr.w	r8, [pc, #1292]	; 80041cc <_svfprintf_r+0xff0>
 8003cc0:	f340 815f 	ble.w	8003f82 <_svfprintf_r+0xda6>
 8003cc4:	4623      	mov	r3, r4
 8003cc6:	f04f 0910 	mov.w	r9, #16
 8003cca:	4644      	mov	r4, r8
 8003ccc:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8003cd0:	e004      	b.n	8003cdc <_svfprintf_r+0xb00>
 8003cd2:	3608      	adds	r6, #8
 8003cd4:	3f10      	subs	r7, #16
 8003cd6:	2f10      	cmp	r7, #16
 8003cd8:	f340 8151 	ble.w	8003f7e <_svfprintf_r+0xda2>
 8003cdc:	3301      	adds	r3, #1
 8003cde:	3510      	adds	r5, #16
 8003ce0:	2b07      	cmp	r3, #7
 8003ce2:	e886 0210 	stmia.w	r6, {r4, r9}
 8003ce6:	953b      	str	r5, [sp, #236]	; 0xec
 8003ce8:	933a      	str	r3, [sp, #232]	; 0xe8
 8003cea:	ddf2      	ble.n	8003cd2 <_svfprintf_r+0xaf6>
 8003cec:	4640      	mov	r0, r8
 8003cee:	4651      	mov	r1, sl
 8003cf0:	465a      	mov	r2, fp
 8003cf2:	f002 fde3 	bl	80068bc <__ssprint_r>
 8003cf6:	2800      	cmp	r0, #0
 8003cf8:	f47f ab47 	bne.w	800338a <_svfprintf_r+0x1ae>
 8003cfc:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003cfe:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8003d00:	ae1f      	add	r6, sp, #124	; 0x7c
 8003d02:	e7e7      	b.n	8003cd4 <_svfprintf_r+0xaf8>
 8003d04:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8003d06:	f10d 01e3 	add.w	r1, sp, #227	; 0xe3
 8003d0a:	f003 000f 	and.w	r0, r3, #15
 8003d0e:	460a      	mov	r2, r1
 8003d10:	5c28      	ldrb	r0, [r5, r0]
 8003d12:	3901      	subs	r1, #1
 8003d14:	091b      	lsrs	r3, r3, #4
 8003d16:	7010      	strb	r0, [r2, #0]
 8003d18:	d1f7      	bne.n	8003d0a <_svfprintf_r+0xb2e>
 8003d1a:	ebc2 030b 	rsb	r3, r2, fp
 8003d1e:	9211      	str	r2, [sp, #68]	; 0x44
 8003d20:	930d      	str	r3, [sp, #52]	; 0x34
 8003d22:	f7ff bbbf 	b.w	80034a4 <_svfprintf_r+0x2c8>
 8003d26:	2b09      	cmp	r3, #9
 8003d28:	bf82      	ittt	hi
 8003d2a:	f64c 45cd 	movwhi	r5, #52429	; 0xcccd
 8003d2e:	f10d 01e3 	addhi.w	r1, sp, #227	; 0xe3
 8003d32:	f6cc 45cc 	movthi	r5, #52428	; 0xcccc
 8003d36:	d809      	bhi.n	8003d4c <_svfprintf_r+0xb70>
 8003d38:	981d      	ldr	r0, [sp, #116]	; 0x74
 8003d3a:	3330      	adds	r3, #48	; 0x30
 8003d3c:	f10d 01e3 	add.w	r1, sp, #227	; 0xe3
 8003d40:	f88d 30e3 	strb.w	r3, [sp, #227]	; 0xe3
 8003d44:	900d      	str	r0, [sp, #52]	; 0x34
 8003d46:	9111      	str	r1, [sp, #68]	; 0x44
 8003d48:	f7ff bbac 	b.w	80034a4 <_svfprintf_r+0x2c8>
 8003d4c:	fba5 0203 	umull	r0, r2, r5, r3
 8003d50:	08d2      	lsrs	r2, r2, #3
 8003d52:	eb02 0782 	add.w	r7, r2, r2, lsl #2
 8003d56:	4608      	mov	r0, r1
 8003d58:	eba3 0347 	sub.w	r3, r3, r7, lsl #1
 8003d5c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8003d60:	7001      	strb	r1, [r0, #0]
 8003d62:	4613      	mov	r3, r2
 8003d64:	1e41      	subs	r1, r0, #1
 8003d66:	2a00      	cmp	r2, #0
 8003d68:	d1f0      	bne.n	8003d4c <_svfprintf_r+0xb70>
 8003d6a:	ebc0 030b 	rsb	r3, r0, fp
 8003d6e:	9011      	str	r0, [sp, #68]	; 0x44
 8003d70:	930d      	str	r3, [sp, #52]	; 0x34
 8003d72:	f7ff bb97 	b.w	80034a4 <_svfprintf_r+0x2c8>
 8003d76:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8003d78:	4651      	mov	r1, sl
 8003d7a:	465a      	mov	r2, fp
 8003d7c:	f002 fd9e 	bl	80068bc <__ssprint_r>
 8003d80:	2800      	cmp	r0, #0
 8003d82:	f47f ab02 	bne.w	800338a <_svfprintf_r+0x1ae>
 8003d86:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003d88:	ae1f      	add	r6, sp, #124	; 0x7c
 8003d8a:	e563      	b.n	8003854 <_svfprintf_r+0x678>
 8003d8c:	9910      	ldr	r1, [sp, #64]	; 0x40
 8003d8e:	1e4f      	subs	r7, r1, #1
 8003d90:	2f00      	cmp	r7, #0
 8003d92:	f77f af12 	ble.w	8003bba <_svfprintf_r+0x9de>
 8003d96:	2f10      	cmp	r7, #16
 8003d98:	f8df 8430 	ldr.w	r8, [pc, #1072]	; 80041cc <_svfprintf_r+0xff0>
 8003d9c:	f77f af26 	ble.w	8003bec <_svfprintf_r+0xa10>
 8003da0:	4623      	mov	r3, r4
 8003da2:	f04f 0910 	mov.w	r9, #16
 8003da6:	4644      	mov	r4, r8
 8003da8:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8003dac:	e004      	b.n	8003db8 <_svfprintf_r+0xbdc>
 8003dae:	3608      	adds	r6, #8
 8003db0:	3f10      	subs	r7, #16
 8003db2:	2f10      	cmp	r7, #16
 8003db4:	f77f af18 	ble.w	8003be8 <_svfprintf_r+0xa0c>
 8003db8:	3301      	adds	r3, #1
 8003dba:	3510      	adds	r5, #16
 8003dbc:	2b07      	cmp	r3, #7
 8003dbe:	e886 0210 	stmia.w	r6, {r4, r9}
 8003dc2:	953b      	str	r5, [sp, #236]	; 0xec
 8003dc4:	933a      	str	r3, [sp, #232]	; 0xe8
 8003dc6:	ddf2      	ble.n	8003dae <_svfprintf_r+0xbd2>
 8003dc8:	4640      	mov	r0, r8
 8003dca:	4651      	mov	r1, sl
 8003dcc:	465a      	mov	r2, fp
 8003dce:	f002 fd75 	bl	80068bc <__ssprint_r>
 8003dd2:	2800      	cmp	r0, #0
 8003dd4:	f47f aad9 	bne.w	800338a <_svfprintf_r+0x1ae>
 8003dd8:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003dda:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8003ddc:	ae1f      	add	r6, sp, #124	; 0x7c
 8003dde:	e7e7      	b.n	8003db0 <_svfprintf_r+0xbd4>
 8003de0:	2202      	movs	r2, #2
 8003de2:	e405      	b.n	80035f0 <_svfprintf_r+0x414>
 8003de4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8003de6:	4651      	mov	r1, sl
 8003de8:	465a      	mov	r2, fp
 8003dea:	f002 fd67 	bl	80068bc <__ssprint_r>
 8003dee:	2800      	cmp	r0, #0
 8003df0:	f47f aacb 	bne.w	800338a <_svfprintf_r+0x1ae>
 8003df4:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003df6:	ae1f      	add	r6, sp, #124	; 0x7c
 8003df8:	9b40      	ldr	r3, [sp, #256]	; 0x100
 8003dfa:	9810      	ldr	r0, [sp, #64]	; 0x40
 8003dfc:	4298      	cmp	r0, r3
 8003dfe:	dc45      	bgt.n	8003e8c <_svfprintf_r+0xcb0>
 8003e00:	9908      	ldr	r1, [sp, #32]
 8003e02:	07c9      	lsls	r1, r1, #31
 8003e04:	d442      	bmi.n	8003e8c <_svfprintf_r+0xcb0>
 8003e06:	9911      	ldr	r1, [sp, #68]	; 0x44
 8003e08:	9816      	ldr	r0, [sp, #88]	; 0x58
 8003e0a:	180a      	adds	r2, r1, r0
 8003e0c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003e0e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8003e10:	1a8f      	subs	r7, r1, r2
 8003e12:	1ac3      	subs	r3, r0, r3
 8003e14:	42bb      	cmp	r3, r7
 8003e16:	bfb8      	it	lt
 8003e18:	461f      	movlt	r7, r3
 8003e1a:	2f00      	cmp	r7, #0
 8003e1c:	dd0a      	ble.n	8003e34 <_svfprintf_r+0xc58>
 8003e1e:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003e20:	6032      	str	r2, [r6, #0]
 8003e22:	3401      	adds	r4, #1
 8003e24:	19ed      	adds	r5, r5, r7
 8003e26:	2c07      	cmp	r4, #7
 8003e28:	6077      	str	r7, [r6, #4]
 8003e2a:	953b      	str	r5, [sp, #236]	; 0xec
 8003e2c:	943a      	str	r4, [sp, #232]	; 0xe8
 8003e2e:	f300 8256 	bgt.w	80042de <_svfprintf_r+0x1102>
 8003e32:	3608      	adds	r6, #8
 8003e34:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
 8003e38:	1bdf      	subs	r7, r3, r7
 8003e3a:	2f00      	cmp	r7, #0
 8003e3c:	f77f ad75 	ble.w	800392a <_svfprintf_r+0x74e>
 8003e40:	2f10      	cmp	r7, #16
 8003e42:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003e44:	f8df 8384 	ldr.w	r8, [pc, #900]	; 80041cc <_svfprintf_r+0xff0>
 8003e48:	f77f adc2 	ble.w	80039d0 <_svfprintf_r+0x7f4>
 8003e4c:	4623      	mov	r3, r4
 8003e4e:	f04f 0910 	mov.w	r9, #16
 8003e52:	4644      	mov	r4, r8
 8003e54:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8003e58:	e004      	b.n	8003e64 <_svfprintf_r+0xc88>
 8003e5a:	3608      	adds	r6, #8
 8003e5c:	3f10      	subs	r7, #16
 8003e5e:	2f10      	cmp	r7, #16
 8003e60:	f77f adb4 	ble.w	80039cc <_svfprintf_r+0x7f0>
 8003e64:	3301      	adds	r3, #1
 8003e66:	3510      	adds	r5, #16
 8003e68:	2b07      	cmp	r3, #7
 8003e6a:	e886 0210 	stmia.w	r6, {r4, r9}
 8003e6e:	953b      	str	r5, [sp, #236]	; 0xec
 8003e70:	933a      	str	r3, [sp, #232]	; 0xe8
 8003e72:	ddf2      	ble.n	8003e5a <_svfprintf_r+0xc7e>
 8003e74:	4640      	mov	r0, r8
 8003e76:	4651      	mov	r1, sl
 8003e78:	465a      	mov	r2, fp
 8003e7a:	f002 fd1f 	bl	80068bc <__ssprint_r>
 8003e7e:	2800      	cmp	r0, #0
 8003e80:	f47f aa83 	bne.w	800338a <_svfprintf_r+0x1ae>
 8003e84:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003e86:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8003e88:	ae1f      	add	r6, sp, #124	; 0x7c
 8003e8a:	e7e7      	b.n	8003e5c <_svfprintf_r+0xc80>
 8003e8c:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003e8e:	981a      	ldr	r0, [sp, #104]	; 0x68
 8003e90:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8003e92:	6070      	str	r0, [r6, #4]
 8003e94:	3401      	adds	r4, #1
 8003e96:	182d      	adds	r5, r5, r0
 8003e98:	2c07      	cmp	r4, #7
 8003e9a:	6032      	str	r2, [r6, #0]
 8003e9c:	953b      	str	r5, [sp, #236]	; 0xec
 8003e9e:	943a      	str	r4, [sp, #232]	; 0xe8
 8003ea0:	f300 8211 	bgt.w	80042c6 <_svfprintf_r+0x10ea>
 8003ea4:	3608      	adds	r6, #8
 8003ea6:	e7ae      	b.n	8003e06 <_svfprintf_r+0xc2a>
 8003ea8:	9b08      	ldr	r3, [sp, #32]
 8003eaa:	07da      	lsls	r2, r3, #31
 8003eac:	f53f ae57 	bmi.w	8003b5e <_svfprintf_r+0x982>
 8003eb0:	3401      	adds	r4, #1
 8003eb2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8003eb4:	3501      	adds	r5, #1
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	2c07      	cmp	r4, #7
 8003eba:	6032      	str	r2, [r6, #0]
 8003ebc:	6073      	str	r3, [r6, #4]
 8003ebe:	953b      	str	r5, [sp, #236]	; 0xec
 8003ec0:	943a      	str	r4, [sp, #232]	; 0xe8
 8003ec2:	f77f ae79 	ble.w	8003bb8 <_svfprintf_r+0x9dc>
 8003ec6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8003ec8:	4651      	mov	r1, sl
 8003eca:	465a      	mov	r2, fp
 8003ecc:	f002 fcf6 	bl	80068bc <__ssprint_r>
 8003ed0:	2800      	cmp	r0, #0
 8003ed2:	f47f aa5a 	bne.w	800338a <_svfprintf_r+0x1ae>
 8003ed6:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003ed8:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003eda:	ae1f      	add	r6, sp, #124	; 0x7c
 8003edc:	e66d      	b.n	8003bba <_svfprintf_r+0x9de>
 8003ede:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8003ee0:	4651      	mov	r1, sl
 8003ee2:	465a      	mov	r2, fp
 8003ee4:	f002 fcea 	bl	80068bc <__ssprint_r>
 8003ee8:	2800      	cmp	r0, #0
 8003eea:	f47f aa4e 	bne.w	800338a <_svfprintf_r+0x1ae>
 8003eee:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003ef0:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003ef2:	ae1f      	add	r6, sp, #124	; 0x7c
 8003ef4:	e64b      	b.n	8003b8e <_svfprintf_r+0x9b2>
 8003ef6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8003ef8:	4651      	mov	r1, sl
 8003efa:	465a      	mov	r2, fp
 8003efc:	f002 fcde 	bl	80068bc <__ssprint_r>
 8003f00:	2800      	cmp	r0, #0
 8003f02:	f47f aa42 	bne.w	800338a <_svfprintf_r+0x1ae>
 8003f06:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003f08:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003f0a:	ae1f      	add	r6, sp, #124	; 0x7c
 8003f0c:	e633      	b.n	8003b76 <_svfprintf_r+0x99a>
 8003f0e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8003f10:	4651      	mov	r1, sl
 8003f12:	465a      	mov	r2, fp
 8003f14:	f002 fcd2 	bl	80068bc <__ssprint_r>
 8003f18:	2800      	cmp	r0, #0
 8003f1a:	f47f aa36 	bne.w	800338a <_svfprintf_r+0x1ae>
 8003f1e:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003f20:	ae1f      	add	r6, sp, #124	; 0x7c
 8003f22:	e4bb      	b.n	800389c <_svfprintf_r+0x6c0>
 8003f24:	f002 fb62 	bl	80065ec <__fpclassifyd>
 8003f28:	2800      	cmp	r0, #0
 8003f2a:	f040 809e 	bne.w	800406a <_svfprintf_r+0xe8e>
 8003f2e:	2203      	movs	r2, #3
 8003f30:	9012      	str	r0, [sp, #72]	; 0x48
 8003f32:	4ba3      	ldr	r3, [pc, #652]	; (80041c0 <_svfprintf_r+0xfe4>)
 8003f34:	920a      	str	r2, [sp, #40]	; 0x28
 8003f36:	9815      	ldr	r0, [sp, #84]	; 0x54
 8003f38:	4aa2      	ldr	r2, [pc, #648]	; (80041c4 <_svfprintf_r+0xfe8>)
 8003f3a:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 8003f3e:	2847      	cmp	r0, #71	; 0x47
 8003f40:	bfd8      	it	le
 8003f42:	461a      	movle	r2, r3
 8003f44:	9211      	str	r2, [sp, #68]	; 0x44
 8003f46:	2303      	movs	r3, #3
 8003f48:	9a08      	ldr	r2, [sp, #32]
 8003f4a:	930d      	str	r3, [sp, #52]	; 0x34
 8003f4c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003f4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f52:	9208      	str	r2, [sp, #32]
 8003f54:	9316      	str	r3, [sp, #88]	; 0x58
 8003f56:	f7ff baaf 	b.w	80034b8 <_svfprintf_r+0x2dc>
 8003f5a:	990e      	ldr	r1, [sp, #56]	; 0x38
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	680b      	ldr	r3, [r1, #0]
 8003f60:	e414      	b.n	800378c <_svfprintf_r+0x5b0>
 8003f62:	9b08      	ldr	r3, [sp, #32]
 8003f64:	065f      	lsls	r7, r3, #25
 8003f66:	d56d      	bpl.n	8004044 <_svfprintf_r+0xe68>
 8003f68:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003f6a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003f6c:	6803      	ldr	r3, [r0, #0]
 8003f6e:	3004      	adds	r0, #4
 8003f70:	900e      	str	r0, [sp, #56]	; 0x38
 8003f72:	8019      	strh	r1, [r3, #0]
 8003f74:	f7ff b960 	b.w	8003238 <_svfprintf_r+0x5c>
 8003f78:	990e      	ldr	r1, [sp, #56]	; 0x38
 8003f7a:	680b      	ldr	r3, [r1, #0]
 8003f7c:	e406      	b.n	800378c <_svfprintf_r+0x5b0>
 8003f7e:	46a0      	mov	r8, r4
 8003f80:	461c      	mov	r4, r3
 8003f82:	3401      	adds	r4, #1
 8003f84:	19ed      	adds	r5, r5, r7
 8003f86:	2c07      	cmp	r4, #7
 8003f88:	f8c6 8000 	str.w	r8, [r6]
 8003f8c:	6077      	str	r7, [r6, #4]
 8003f8e:	953b      	str	r5, [sp, #236]	; 0xec
 8003f90:	943a      	str	r4, [sp, #232]	; 0xe8
 8003f92:	f73f af27 	bgt.w	8003de4 <_svfprintf_r+0xc08>
 8003f96:	3608      	adds	r6, #8
 8003f98:	e72e      	b.n	8003df8 <_svfprintf_r+0xc1c>
 8003f9a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8003f9c:	4651      	mov	r1, sl
 8003f9e:	465a      	mov	r2, fp
 8003fa0:	f002 fc8c 	bl	80068bc <__ssprint_r>
 8003fa4:	2800      	cmp	r0, #0
 8003fa6:	f47f a9f0 	bne.w	800338a <_svfprintf_r+0x1ae>
 8003faa:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003fac:	ae1f      	add	r6, sp, #124	; 0x7c
 8003fae:	e53d      	b.n	8003a2c <_svfprintf_r+0x850>
 8003fb0:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003fb2:	4b85      	ldr	r3, [pc, #532]	; (80041c8 <_svfprintf_r+0xfec>)
 8003fb4:	3401      	adds	r4, #1
 8003fb6:	6033      	str	r3, [r6, #0]
 8003fb8:	3501      	adds	r5, #1
 8003fba:	2301      	movs	r3, #1
 8003fbc:	2c07      	cmp	r4, #7
 8003fbe:	6073      	str	r3, [r6, #4]
 8003fc0:	953b      	str	r5, [sp, #236]	; 0xec
 8003fc2:	943a      	str	r4, [sp, #232]	; 0xe8
 8003fc4:	f300 8139 	bgt.w	800423a <_svfprintf_r+0x105e>
 8003fc8:	3608      	adds	r6, #8
 8003fca:	b92f      	cbnz	r7, 8003fd8 <_svfprintf_r+0xdfc>
 8003fcc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003fce:	b91a      	cbnz	r2, 8003fd8 <_svfprintf_r+0xdfc>
 8003fd0:	9b08      	ldr	r3, [sp, #32]
 8003fd2:	07d8      	lsls	r0, r3, #31
 8003fd4:	f57f aca9 	bpl.w	800392a <_svfprintf_r+0x74e>
 8003fd8:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003fda:	991a      	ldr	r1, [sp, #104]	; 0x68
 8003fdc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8003fde:	6071      	str	r1, [r6, #4]
 8003fe0:	3401      	adds	r4, #1
 8003fe2:	186d      	adds	r5, r5, r1
 8003fe4:	2c07      	cmp	r4, #7
 8003fe6:	6030      	str	r0, [r6, #0]
 8003fe8:	953b      	str	r5, [sp, #236]	; 0xec
 8003fea:	943a      	str	r4, [sp, #232]	; 0xe8
 8003fec:	f300 81d2 	bgt.w	8004394 <_svfprintf_r+0x11b8>
 8003ff0:	3608      	adds	r6, #8
 8003ff2:	427f      	negs	r7, r7
 8003ff4:	2f00      	cmp	r7, #0
 8003ff6:	f340 8141 	ble.w	800427c <_svfprintf_r+0x10a0>
 8003ffa:	2f10      	cmp	r7, #16
 8003ffc:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 80041cc <_svfprintf_r+0xff0>
 8004000:	f340 8183 	ble.w	800430a <_svfprintf_r+0x112e>
 8004004:	4623      	mov	r3, r4
 8004006:	f04f 0910 	mov.w	r9, #16
 800400a:	4644      	mov	r4, r8
 800400c:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8004010:	e004      	b.n	800401c <_svfprintf_r+0xe40>
 8004012:	3608      	adds	r6, #8
 8004014:	3f10      	subs	r7, #16
 8004016:	2f10      	cmp	r7, #16
 8004018:	f340 8175 	ble.w	8004306 <_svfprintf_r+0x112a>
 800401c:	3301      	adds	r3, #1
 800401e:	3510      	adds	r5, #16
 8004020:	2b07      	cmp	r3, #7
 8004022:	e886 0210 	stmia.w	r6, {r4, r9}
 8004026:	953b      	str	r5, [sp, #236]	; 0xec
 8004028:	933a      	str	r3, [sp, #232]	; 0xe8
 800402a:	ddf2      	ble.n	8004012 <_svfprintf_r+0xe36>
 800402c:	4640      	mov	r0, r8
 800402e:	4651      	mov	r1, sl
 8004030:	465a      	mov	r2, fp
 8004032:	f002 fc43 	bl	80068bc <__ssprint_r>
 8004036:	2800      	cmp	r0, #0
 8004038:	f47f a9a7 	bne.w	800338a <_svfprintf_r+0x1ae>
 800403c:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 800403e:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8004040:	ae1f      	add	r6, sp, #124	; 0x7c
 8004042:	e7e7      	b.n	8004014 <_svfprintf_r+0xe38>
 8004044:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004046:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004048:	6813      	ldr	r3, [r2, #0]
 800404a:	3204      	adds	r2, #4
 800404c:	920e      	str	r2, [sp, #56]	; 0x38
 800404e:	6018      	str	r0, [r3, #0]
 8004050:	f7ff b8f2 	b.w	8003238 <_svfprintf_r+0x5c>
 8004054:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004056:	4651      	mov	r1, sl
 8004058:	465a      	mov	r2, fp
 800405a:	f002 fc2f 	bl	80068bc <__ssprint_r>
 800405e:	2800      	cmp	r0, #0
 8004060:	f47f a993 	bne.w	800338a <_svfprintf_r+0x1ae>
 8004064:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004066:	ae1f      	add	r6, sp, #124	; 0x7c
 8004068:	e4f5      	b.n	8003a56 <_svfprintf_r+0x87a>
 800406a:	1c60      	adds	r0, r4, #1
 800406c:	f000 80f1 	beq.w	8004252 <_svfprintf_r+0x1076>
 8004070:	9915      	ldr	r1, [sp, #84]	; 0x54
 8004072:	2967      	cmp	r1, #103	; 0x67
 8004074:	bf18      	it	ne
 8004076:	2947      	cmpne	r1, #71	; 0x47
 8004078:	bf14      	ite	ne
 800407a:	2300      	movne	r3, #0
 800407c:	2301      	moveq	r3, #1
 800407e:	bf18      	it	ne
 8004080:	930a      	strne	r3, [sp, #40]	; 0x28
 8004082:	d104      	bne.n	800408e <_svfprintf_r+0xeb2>
 8004084:	2c00      	cmp	r4, #0
 8004086:	f000 81ad 	beq.w	80043e4 <_svfprintf_r+0x1208>
 800408a:	2201      	movs	r2, #1
 800408c:	920a      	str	r2, [sp, #40]	; 0x28
 800408e:	9808      	ldr	r0, [sp, #32]
 8004090:	2d00      	cmp	r5, #0
 8004092:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8004096:	9008      	str	r0, [sp, #32]
 8004098:	f2c0 8189 	blt.w	80043ae <_svfprintf_r+0x11d2>
 800409c:	2200      	movs	r2, #0
 800409e:	9212      	str	r2, [sp, #72]	; 0x48
 80040a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80040a2:	9815      	ldr	r0, [sp, #84]	; 0x54
 80040a4:	f1a3 0166 	sub.w	r1, r3, #102	; 0x66
 80040a8:	424b      	negs	r3, r1
 80040aa:	eb43 0301 	adc.w	r3, r3, r1
 80040ae:	469c      	mov	ip, r3
 80040b0:	2846      	cmp	r0, #70	; 0x46
 80040b2:	bf08      	it	eq
 80040b4:	f04c 0c01 	orreq.w	ip, ip, #1
 80040b8:	930d      	str	r3, [sp, #52]	; 0x34
 80040ba:	46a1      	mov	r9, r4
 80040bc:	2103      	movs	r1, #3
 80040be:	f1bc 0f00 	cmp.w	ip, #0
 80040c2:	d107      	bne.n	80040d4 <_svfprintf_r+0xef8>
 80040c4:	2865      	cmp	r0, #101	; 0x65
 80040c6:	bf18      	it	ne
 80040c8:	2845      	cmpne	r0, #69	; 0x45
 80040ca:	bf0c      	ite	eq
 80040cc:	f104 0901 	addeq.w	r9, r4, #1
 80040d0:	46a1      	movne	r9, r4
 80040d2:	2102      	movs	r1, #2
 80040d4:	e88d 0202 	stmia.w	sp, {r1, r9}
 80040d8:	a940      	add	r1, sp, #256	; 0x100
 80040da:	9102      	str	r1, [sp, #8]
 80040dc:	a941      	add	r1, sp, #260	; 0x104
 80040de:	9103      	str	r1, [sp, #12]
 80040e0:	4642      	mov	r2, r8
 80040e2:	a942      	add	r1, sp, #264	; 0x108
 80040e4:	462b      	mov	r3, r5
 80040e6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80040e8:	9104      	str	r1, [sp, #16]
 80040ea:	f8cd c018 	str.w	ip, [sp, #24]
 80040ee:	f000 fa6b 	bl	80045c8 <_dtoa_r>
 80040f2:	9915      	ldr	r1, [sp, #84]	; 0x54
 80040f4:	9011      	str	r0, [sp, #68]	; 0x44
 80040f6:	2947      	cmp	r1, #71	; 0x47
 80040f8:	bf18      	it	ne
 80040fa:	2967      	cmpne	r1, #103	; 0x67
 80040fc:	f8dd c018 	ldr.w	ip, [sp, #24]
 8004100:	d104      	bne.n	800410c <_svfprintf_r+0xf30>
 8004102:	9a08      	ldr	r2, [sp, #32]
 8004104:	07d2      	lsls	r2, r2, #31
 8004106:	bf58      	it	pl
 8004108:	9f42      	ldrpl	r7, [sp, #264]	; 0x108
 800410a:	d515      	bpl.n	8004138 <_svfprintf_r+0xf5c>
 800410c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800410e:	eb03 0709 	add.w	r7, r3, r9
 8004112:	f1bc 0f00 	cmp.w	ip, #0
 8004116:	d005      	beq.n	8004124 <_svfprintf_r+0xf48>
 8004118:	781b      	ldrb	r3, [r3, #0]
 800411a:	2b30      	cmp	r3, #48	; 0x30
 800411c:	f000 8165 	beq.w	80043ea <_svfprintf_r+0x120e>
 8004120:	9b40      	ldr	r3, [sp, #256]	; 0x100
 8004122:	18ff      	adds	r7, r7, r3
 8004124:	4640      	mov	r0, r8
 8004126:	4629      	mov	r1, r5
 8004128:	2200      	movs	r2, #0
 800412a:	2300      	movs	r3, #0
 800412c:	f003 ff84 	bl	8008038 <__aeabi_dcmpeq>
 8004130:	2800      	cmp	r0, #0
 8004132:	f000 8117 	beq.w	8004364 <_svfprintf_r+0x1188>
 8004136:	9742      	str	r7, [sp, #264]	; 0x108
 8004138:	9811      	ldr	r0, [sp, #68]	; 0x44
 800413a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800413c:	1a3f      	subs	r7, r7, r0
 800413e:	9710      	str	r7, [sp, #64]	; 0x40
 8004140:	2900      	cmp	r1, #0
 8004142:	f000 80f9 	beq.w	8004338 <_svfprintf_r+0x115c>
 8004146:	9940      	ldr	r1, [sp, #256]	; 0x100
 8004148:	1ccb      	adds	r3, r1, #3
 800414a:	db02      	blt.n	8004152 <_svfprintf_r+0xf76>
 800414c:	428c      	cmp	r4, r1
 800414e:	f280 80fa 	bge.w	8004346 <_svfprintf_r+0x116a>
 8004152:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004154:	3a02      	subs	r2, #2
 8004156:	9215      	str	r2, [sp, #84]	; 0x54
 8004158:	3901      	subs	r1, #1
 800415a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800415c:	9140      	str	r1, [sp, #256]	; 0x100
 800415e:	2900      	cmp	r1, #0
 8004160:	f88d 00f0 	strb.w	r0, [sp, #240]	; 0xf0
 8004164:	f2c0 815d 	blt.w	8004422 <_svfprintf_r+0x1246>
 8004168:	232b      	movs	r3, #43	; 0x2b
 800416a:	f88d 30f1 	strb.w	r3, [sp, #241]	; 0xf1
 800416e:	2909      	cmp	r1, #9
 8004170:	f340 8122 	ble.w	80043b8 <_svfprintf_r+0x11dc>
 8004174:	f10d 07ff 	add.w	r7, sp, #255	; 0xff
 8004178:	f246 6467 	movw	r4, #26215	; 0x6667
 800417c:	4638      	mov	r0, r7
 800417e:	f2c6 6466 	movt	r4, #26214	; 0x6666
 8004182:	fb84 3201 	smull	r3, r2, r4, r1
 8004186:	17cb      	asrs	r3, r1, #31
 8004188:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 800418c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8004190:	eba1 0242 	sub.w	r2, r1, r2, lsl #1
 8004194:	3230      	adds	r2, #48	; 0x30
 8004196:	2b09      	cmp	r3, #9
 8004198:	4605      	mov	r5, r0
 800419a:	4619      	mov	r1, r3
 800419c:	f800 2d01 	strb.w	r2, [r0, #-1]!
 80041a0:	dcef      	bgt.n	8004182 <_svfprintf_r+0xfa6>
 80041a2:	3130      	adds	r1, #48	; 0x30
 80041a4:	1eaa      	subs	r2, r5, #2
 80041a6:	b2c9      	uxtb	r1, r1
 80041a8:	42ba      	cmp	r2, r7
 80041aa:	f805 1c02 	strb.w	r1, [r5, #-2]
 80041ae:	bf28      	it	cs
 80041b0:	f10d 01f2 	addcs.w	r1, sp, #242	; 0xf2
 80041b4:	d213      	bcs.n	80041de <_svfprintf_r+0x1002>
 80041b6:	f10d 03f2 	add.w	r3, sp, #242	; 0xf2
 80041ba:	f10d 00fe 	add.w	r0, sp, #254	; 0xfe
 80041be:	e009      	b.n	80041d4 <_svfprintf_r+0xff8>
 80041c0:	08008574 	.word	0x08008574
 80041c4:	08008578 	.word	0x08008578
 80041c8:	080085ac 	.word	0x080085ac
 80041cc:	0800839c 	.word	0x0800839c
 80041d0:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 80041d4:	f803 1b01 	strb.w	r1, [r3], #1
 80041d8:	4282      	cmp	r2, r0
 80041da:	4619      	mov	r1, r3
 80041dc:	d1f8      	bne.n	80041d0 <_svfprintf_r+0xff4>
 80041de:	9810      	ldr	r0, [sp, #64]	; 0x40
 80041e0:	ab3c      	add	r3, sp, #240	; 0xf0
 80041e2:	1acb      	subs	r3, r1, r3
 80041e4:	931b      	str	r3, [sp, #108]	; 0x6c
 80041e6:	2801      	cmp	r0, #1
 80041e8:	4403      	add	r3, r0
 80041ea:	930d      	str	r3, [sp, #52]	; 0x34
 80041ec:	f340 8125 	ble.w	800443a <_svfprintf_r+0x125e>
 80041f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80041f2:	3301      	adds	r3, #1
 80041f4:	ea23 70e3 	bic.w	r0, r3, r3, asr #31
 80041f8:	2100      	movs	r1, #0
 80041fa:	930d      	str	r3, [sp, #52]	; 0x34
 80041fc:	900a      	str	r0, [sp, #40]	; 0x28
 80041fe:	9116      	str	r1, [sp, #88]	; 0x58
 8004200:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004202:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 8004206:	2b00      	cmp	r3, #0
 8004208:	f43f a956 	beq.w	80034b8 <_svfprintf_r+0x2dc>
 800420c:	232d      	movs	r3, #45	; 0x2d
 800420e:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
 8004212:	2300      	movs	r3, #0
 8004214:	9312      	str	r3, [sp, #72]	; 0x48
 8004216:	f7ff b950 	b.w	80034ba <_svfprintf_r+0x2de>
 800421a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800421c:	2140      	movs	r1, #64	; 0x40
 800421e:	f001 fa57 	bl	80056d0 <_malloc_r>
 8004222:	f8ca 0000 	str.w	r0, [sl]
 8004226:	f8ca 0010 	str.w	r0, [sl, #16]
 800422a:	2800      	cmp	r0, #0
 800422c:	f000 812b 	beq.w	8004486 <_svfprintf_r+0x12aa>
 8004230:	2340      	movs	r3, #64	; 0x40
 8004232:	f8ca 3014 	str.w	r3, [sl, #20]
 8004236:	f7fe bfec 	b.w	8003212 <_svfprintf_r+0x36>
 800423a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800423c:	4651      	mov	r1, sl
 800423e:	465a      	mov	r2, fp
 8004240:	f002 fb3c 	bl	80068bc <__ssprint_r>
 8004244:	2800      	cmp	r0, #0
 8004246:	f47f a8a0 	bne.w	800338a <_svfprintf_r+0x1ae>
 800424a:	9f40      	ldr	r7, [sp, #256]	; 0x100
 800424c:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 800424e:	ae1f      	add	r6, sp, #124	; 0x7c
 8004250:	e6bb      	b.n	8003fca <_svfprintf_r+0xdee>
 8004252:	9815      	ldr	r0, [sp, #84]	; 0x54
 8004254:	2847      	cmp	r0, #71	; 0x47
 8004256:	bf18      	it	ne
 8004258:	2867      	cmpne	r0, #103	; 0x67
 800425a:	bf14      	ite	ne
 800425c:	2000      	movne	r0, #0
 800425e:	2001      	moveq	r0, #1
 8004260:	900a      	str	r0, [sp, #40]	; 0x28
 8004262:	2406      	movs	r4, #6
 8004264:	e713      	b.n	800408e <_svfprintf_r+0xeb2>
 8004266:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004268:	4651      	mov	r1, sl
 800426a:	465a      	mov	r2, fp
 800426c:	f002 fb26 	bl	80068bc <__ssprint_r>
 8004270:	2800      	cmp	r0, #0
 8004272:	f47f a88a 	bne.w	800338a <_svfprintf_r+0x1ae>
 8004276:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004278:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 800427a:	ae1f      	add	r6, sp, #124	; 0x7c
 800427c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800427e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004280:	6072      	str	r2, [r6, #4]
 8004282:	3401      	adds	r4, #1
 8004284:	18ad      	adds	r5, r5, r2
 8004286:	2c07      	cmp	r4, #7
 8004288:	6033      	str	r3, [r6, #0]
 800428a:	953b      	str	r5, [sp, #236]	; 0xec
 800428c:	943a      	str	r4, [sp, #232]	; 0xe8
 800428e:	f77f ab4b 	ble.w	8003928 <_svfprintf_r+0x74c>
 8004292:	f7ff bba6 	b.w	80039e2 <_svfprintf_r+0x806>
 8004296:	f002 fae1 	bl	800685c <strlen>
 800429a:	900d      	str	r0, [sp, #52]	; 0x34
 800429c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80042a0:	9512      	str	r5, [sp, #72]	; 0x48
 80042a2:	900a      	str	r0, [sp, #40]	; 0x28
 80042a4:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 80042a8:	970e      	str	r7, [sp, #56]	; 0x38
 80042aa:	9516      	str	r5, [sp, #88]	; 0x58
 80042ac:	f7ff b904 	b.w	80034b8 <_svfprintf_r+0x2dc>
 80042b0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80042b2:	4651      	mov	r1, sl
 80042b4:	465a      	mov	r2, fp
 80042b6:	f002 fb01 	bl	80068bc <__ssprint_r>
 80042ba:	2800      	cmp	r0, #0
 80042bc:	f47f a865 	bne.w	800338a <_svfprintf_r+0x1ae>
 80042c0:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80042c2:	ae1f      	add	r6, sp, #124	; 0x7c
 80042c4:	e4f1      	b.n	8003caa <_svfprintf_r+0xace>
 80042c6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80042c8:	4651      	mov	r1, sl
 80042ca:	465a      	mov	r2, fp
 80042cc:	f002 faf6 	bl	80068bc <__ssprint_r>
 80042d0:	2800      	cmp	r0, #0
 80042d2:	f47f a85a 	bne.w	800338a <_svfprintf_r+0x1ae>
 80042d6:	9b40      	ldr	r3, [sp, #256]	; 0x100
 80042d8:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80042da:	ae1f      	add	r6, sp, #124	; 0x7c
 80042dc:	e593      	b.n	8003e06 <_svfprintf_r+0xc2a>
 80042de:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80042e0:	4651      	mov	r1, sl
 80042e2:	465a      	mov	r2, fp
 80042e4:	f002 faea 	bl	80068bc <__ssprint_r>
 80042e8:	2800      	cmp	r0, #0
 80042ea:	f47f a84e 	bne.w	800338a <_svfprintf_r+0x1ae>
 80042ee:	9b40      	ldr	r3, [sp, #256]	; 0x100
 80042f0:	9910      	ldr	r1, [sp, #64]	; 0x40
 80042f2:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80042f4:	1acb      	subs	r3, r1, r3
 80042f6:	ae1f      	add	r6, sp, #124	; 0x7c
 80042f8:	e59c      	b.n	8003e34 <_svfprintf_r+0xc58>
 80042fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80042fc:	ebc3 030b 	rsb	r3, r3, fp
 8004300:	930d      	str	r3, [sp, #52]	; 0x34
 8004302:	f7ff b8cf 	b.w	80034a4 <_svfprintf_r+0x2c8>
 8004306:	46a0      	mov	r8, r4
 8004308:	461c      	mov	r4, r3
 800430a:	3401      	adds	r4, #1
 800430c:	19ed      	adds	r5, r5, r7
 800430e:	2c07      	cmp	r4, #7
 8004310:	f8c6 8000 	str.w	r8, [r6]
 8004314:	6077      	str	r7, [r6, #4]
 8004316:	953b      	str	r5, [sp, #236]	; 0xec
 8004318:	943a      	str	r4, [sp, #232]	; 0xe8
 800431a:	dca4      	bgt.n	8004266 <_svfprintf_r+0x108a>
 800431c:	3608      	adds	r6, #8
 800431e:	e7ad      	b.n	800427c <_svfprintf_r+0x10a0>
 8004320:	2c06      	cmp	r4, #6
 8004322:	bf28      	it	cs
 8004324:	2406      	movcs	r4, #6
 8004326:	495f      	ldr	r1, [pc, #380]	; (80044a4 <_svfprintf_r+0x12c8>)
 8004328:	940d      	str	r4, [sp, #52]	; 0x34
 800432a:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
 800432e:	900a      	str	r0, [sp, #40]	; 0x28
 8004330:	970e      	str	r7, [sp, #56]	; 0x38
 8004332:	9111      	str	r1, [sp, #68]	; 0x44
 8004334:	f7ff ba01 	b.w	800373a <_svfprintf_r+0x55e>
 8004338:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800433a:	2b65      	cmp	r3, #101	; 0x65
 800433c:	dd6f      	ble.n	800441e <_svfprintf_r+0x1242>
 800433e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004340:	9940      	ldr	r1, [sp, #256]	; 0x100
 8004342:	2a00      	cmp	r2, #0
 8004344:	d15e      	bne.n	8004404 <_svfprintf_r+0x1228>
 8004346:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004348:	428a      	cmp	r2, r1
 800434a:	dc3d      	bgt.n	80043c8 <_svfprintf_r+0x11ec>
 800434c:	9b08      	ldr	r3, [sp, #32]
 800434e:	07da      	lsls	r2, r3, #31
 8004350:	d56c      	bpl.n	800442c <_svfprintf_r+0x1250>
 8004352:	1c4b      	adds	r3, r1, #1
 8004354:	ea23 70e3 	bic.w	r0, r3, r3, asr #31
 8004358:	2267      	movs	r2, #103	; 0x67
 800435a:	930d      	str	r3, [sp, #52]	; 0x34
 800435c:	900a      	str	r0, [sp, #40]	; 0x28
 800435e:	9215      	str	r2, [sp, #84]	; 0x54
 8004360:	9116      	str	r1, [sp, #88]	; 0x58
 8004362:	e74d      	b.n	8004200 <_svfprintf_r+0x1024>
 8004364:	9b42      	ldr	r3, [sp, #264]	; 0x108
 8004366:	429f      	cmp	r7, r3
 8004368:	bf98      	it	ls
 800436a:	461f      	movls	r7, r3
 800436c:	f67f aee4 	bls.w	8004138 <_svfprintf_r+0xf5c>
 8004370:	2230      	movs	r2, #48	; 0x30
 8004372:	f803 2b01 	strb.w	r2, [r3], #1
 8004376:	42bb      	cmp	r3, r7
 8004378:	9342      	str	r3, [sp, #264]	; 0x108
 800437a:	d1fa      	bne.n	8004372 <_svfprintf_r+0x1196>
 800437c:	e6dc      	b.n	8004138 <_svfprintf_r+0xf5c>
 800437e:	ea24 72e4 	bic.w	r2, r4, r4, asr #31
 8004382:	9012      	str	r0, [sp, #72]	; 0x48
 8004384:	920a      	str	r2, [sp, #40]	; 0x28
 8004386:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 800438a:	970e      	str	r7, [sp, #56]	; 0x38
 800438c:	940d      	str	r4, [sp, #52]	; 0x34
 800438e:	9016      	str	r0, [sp, #88]	; 0x58
 8004390:	f7ff b892 	b.w	80034b8 <_svfprintf_r+0x2dc>
 8004394:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004396:	4651      	mov	r1, sl
 8004398:	465a      	mov	r2, fp
 800439a:	f002 fa8f 	bl	80068bc <__ssprint_r>
 800439e:	2800      	cmp	r0, #0
 80043a0:	f47e aff3 	bne.w	800338a <_svfprintf_r+0x1ae>
 80043a4:	9f40      	ldr	r7, [sp, #256]	; 0x100
 80043a6:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80043a8:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80043aa:	ae1f      	add	r6, sp, #124	; 0x7c
 80043ac:	e621      	b.n	8003ff2 <_svfprintf_r+0xe16>
 80043ae:	212d      	movs	r1, #45	; 0x2d
 80043b0:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 80043b4:	9112      	str	r1, [sp, #72]	; 0x48
 80043b6:	e673      	b.n	80040a0 <_svfprintf_r+0xec4>
 80043b8:	3130      	adds	r1, #48	; 0x30
 80043ba:	2330      	movs	r3, #48	; 0x30
 80043bc:	f88d 10f3 	strb.w	r1, [sp, #243]	; 0xf3
 80043c0:	f88d 30f2 	strb.w	r3, [sp, #242]	; 0xf2
 80043c4:	a93d      	add	r1, sp, #244	; 0xf4
 80043c6:	e70a      	b.n	80041de <_svfprintf_r+0x1002>
 80043c8:	2900      	cmp	r1, #0
 80043ca:	9810      	ldr	r0, [sp, #64]	; 0x40
 80043cc:	bfd4      	ite	le
 80043ce:	f1c1 0302 	rsble	r3, r1, #2
 80043d2:	2301      	movgt	r3, #1
 80043d4:	181b      	adds	r3, r3, r0
 80043d6:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 80043da:	930d      	str	r3, [sp, #52]	; 0x34
 80043dc:	2367      	movs	r3, #103	; 0x67
 80043de:	920a      	str	r2, [sp, #40]	; 0x28
 80043e0:	9315      	str	r3, [sp, #84]	; 0x54
 80043e2:	e7bd      	b.n	8004360 <_svfprintf_r+0x1184>
 80043e4:	2401      	movs	r4, #1
 80043e6:	940a      	str	r4, [sp, #40]	; 0x28
 80043e8:	e651      	b.n	800408e <_svfprintf_r+0xeb2>
 80043ea:	4640      	mov	r0, r8
 80043ec:	4629      	mov	r1, r5
 80043ee:	2200      	movs	r2, #0
 80043f0:	2300      	movs	r3, #0
 80043f2:	f003 fe21 	bl	8008038 <__aeabi_dcmpeq>
 80043f6:	2800      	cmp	r0, #0
 80043f8:	f47f ae92 	bne.w	8004120 <_svfprintf_r+0xf44>
 80043fc:	f1c9 0301 	rsb	r3, r9, #1
 8004400:	9340      	str	r3, [sp, #256]	; 0x100
 8004402:	e68e      	b.n	8004122 <_svfprintf_r+0xf46>
 8004404:	2900      	cmp	r1, #0
 8004406:	dd38      	ble.n	800447a <_svfprintf_r+0x129e>
 8004408:	bb74      	cbnz	r4, 8004468 <_svfprintf_r+0x128c>
 800440a:	9b08      	ldr	r3, [sp, #32]
 800440c:	07dd      	lsls	r5, r3, #31
 800440e:	d42b      	bmi.n	8004468 <_svfprintf_r+0x128c>
 8004410:	ea21 70e1 	bic.w	r0, r1, r1, asr #31
 8004414:	2266      	movs	r2, #102	; 0x66
 8004416:	900a      	str	r0, [sp, #40]	; 0x28
 8004418:	910d      	str	r1, [sp, #52]	; 0x34
 800441a:	9215      	str	r2, [sp, #84]	; 0x54
 800441c:	e7a0      	b.n	8004360 <_svfprintf_r+0x1184>
 800441e:	9940      	ldr	r1, [sp, #256]	; 0x100
 8004420:	e69a      	b.n	8004158 <_svfprintf_r+0xf7c>
 8004422:	232d      	movs	r3, #45	; 0x2d
 8004424:	4249      	negs	r1, r1
 8004426:	f88d 30f1 	strb.w	r3, [sp, #241]	; 0xf1
 800442a:	e6a0      	b.n	800416e <_svfprintf_r+0xf92>
 800442c:	ea21 70e1 	bic.w	r0, r1, r1, asr #31
 8004430:	2267      	movs	r2, #103	; 0x67
 8004432:	900a      	str	r0, [sp, #40]	; 0x28
 8004434:	910d      	str	r1, [sp, #52]	; 0x34
 8004436:	9215      	str	r2, [sp, #84]	; 0x54
 8004438:	e792      	b.n	8004360 <_svfprintf_r+0x1184>
 800443a:	9908      	ldr	r1, [sp, #32]
 800443c:	f011 0301 	ands.w	r3, r1, #1
 8004440:	f47f aed6 	bne.w	80041f0 <_svfprintf_r+0x1014>
 8004444:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004446:	9316      	str	r3, [sp, #88]	; 0x58
 8004448:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 800444c:	920a      	str	r2, [sp, #40]	; 0x28
 800444e:	e6d7      	b.n	8004200 <_svfprintf_r+0x1024>
 8004450:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004452:	680c      	ldr	r4, [r1, #0]
 8004454:	1d0b      	adds	r3, r1, #4
 8004456:	2c00      	cmp	r4, #0
 8004458:	bfbc      	itt	lt
 800445a:	930e      	strlt	r3, [sp, #56]	; 0x38
 800445c:	f04f 34ff 	movlt.w	r4, #4294967295	; 0xffffffff
 8004460:	f6bf a985 	bge.w	800376e <_svfprintf_r+0x592>
 8004464:	f7fe bf18 	b.w	8003298 <_svfprintf_r+0xbc>
 8004468:	3401      	adds	r4, #1
 800446a:	190c      	adds	r4, r1, r4
 800446c:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
 8004470:	2066      	movs	r0, #102	; 0x66
 8004472:	940d      	str	r4, [sp, #52]	; 0x34
 8004474:	930a      	str	r3, [sp, #40]	; 0x28
 8004476:	9015      	str	r0, [sp, #84]	; 0x54
 8004478:	e772      	b.n	8004360 <_svfprintf_r+0x1184>
 800447a:	b914      	cbnz	r4, 8004482 <_svfprintf_r+0x12a6>
 800447c:	9a08      	ldr	r2, [sp, #32]
 800447e:	07d0      	lsls	r0, r2, #31
 8004480:	d509      	bpl.n	8004496 <_svfprintf_r+0x12ba>
 8004482:	3402      	adds	r4, #2
 8004484:	e7f2      	b.n	800446c <_svfprintf_r+0x1290>
 8004486:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004488:	230c      	movs	r3, #12
 800448a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800448e:	600b      	str	r3, [r1, #0]
 8004490:	920c      	str	r2, [sp, #48]	; 0x30
 8004492:	f7fe bf83 	b.w	800339c <_svfprintf_r+0x1c0>
 8004496:	2001      	movs	r0, #1
 8004498:	2266      	movs	r2, #102	; 0x66
 800449a:	900a      	str	r0, [sp, #40]	; 0x28
 800449c:	9215      	str	r2, [sp, #84]	; 0x54
 800449e:	900d      	str	r0, [sp, #52]	; 0x34
 80044a0:	e75e      	b.n	8004360 <_svfprintf_r+0x1184>
 80044a2:	bf00      	nop
 80044a4:	080085a4 	.word	0x080085a4

080044a8 <quorem>:
 80044a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044ac:	6903      	ldr	r3, [r0, #16]
 80044ae:	690d      	ldr	r5, [r1, #16]
 80044b0:	429d      	cmp	r5, r3
 80044b2:	4681      	mov	r9, r0
 80044b4:	f300 8084 	bgt.w	80045c0 <quorem+0x118>
 80044b8:	1ceb      	adds	r3, r5, #3
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	18cf      	adds	r7, r1, r3
 80044be:	18c3      	adds	r3, r0, r3
 80044c0:	687e      	ldr	r6, [r7, #4]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	3601      	adds	r6, #1
 80044c6:	fbb3 f6f6 	udiv	r6, r3, r6
 80044ca:	f101 0414 	add.w	r4, r1, #20
 80044ce:	3d01      	subs	r5, #1
 80044d0:	3704      	adds	r7, #4
 80044d2:	f100 0814 	add.w	r8, r0, #20
 80044d6:	2e00      	cmp	r6, #0
 80044d8:	d03c      	beq.n	8004554 <quorem+0xac>
 80044da:	f04f 0e00 	mov.w	lr, #0
 80044de:	4642      	mov	r2, r8
 80044e0:	4623      	mov	r3, r4
 80044e2:	46f4      	mov	ip, lr
 80044e4:	f853 bb04 	ldr.w	fp, [r3], #4
 80044e8:	6810      	ldr	r0, [r2, #0]
 80044ea:	fa1f fa8b 	uxth.w	sl, fp
 80044ee:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
 80044f2:	fb06 ea0a 	mla	sl, r6, sl, lr
 80044f6:	fb06 fe0b 	mul.w	lr, r6, fp
 80044fa:	eb0e 4e1a 	add.w	lr, lr, sl, lsr #16
 80044fe:	fa1c fc80 	uxtah	ip, ip, r0
 8004502:	fa1f fb8e 	uxth.w	fp, lr
 8004506:	fa1f fa8a 	uxth.w	sl, sl
 800450a:	ebca 0c0c 	rsb	ip, sl, ip
 800450e:	ebcb 4010 	rsb	r0, fp, r0, lsr #16
 8004512:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8004516:	fa1f fc8c 	uxth.w	ip, ip
 800451a:	ea4c 4c00 	orr.w	ip, ip, r0, lsl #16
 800451e:	429f      	cmp	r7, r3
 8004520:	f842 cb04 	str.w	ip, [r2], #4
 8004524:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8004528:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800452c:	d2da      	bcs.n	80044e4 <quorem+0x3c>
 800452e:	1d2a      	adds	r2, r5, #4
 8004530:	eb09 0382 	add.w	r3, r9, r2, lsl #2
 8004534:	6858      	ldr	r0, [r3, #4]
 8004536:	b968      	cbnz	r0, 8004554 <quorem+0xac>
 8004538:	4598      	cmp	r8, r3
 800453a:	d209      	bcs.n	8004550 <quorem+0xa8>
 800453c:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 8004540:	b112      	cbz	r2, 8004548 <quorem+0xa0>
 8004542:	e005      	b.n	8004550 <quorem+0xa8>
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	b91a      	cbnz	r2, 8004550 <quorem+0xa8>
 8004548:	3b04      	subs	r3, #4
 800454a:	3d01      	subs	r5, #1
 800454c:	4598      	cmp	r8, r3
 800454e:	d3f9      	bcc.n	8004544 <quorem+0x9c>
 8004550:	f8c9 5010 	str.w	r5, [r9, #16]
 8004554:	4648      	mov	r0, r9
 8004556:	f001 fe4f 	bl	80061f8 <__mcmp>
 800455a:	2800      	cmp	r0, #0
 800455c:	db2d      	blt.n	80045ba <quorem+0x112>
 800455e:	3601      	adds	r6, #1
 8004560:	4643      	mov	r3, r8
 8004562:	f04f 0c00 	mov.w	ip, #0
 8004566:	f854 2b04 	ldr.w	r2, [r4], #4
 800456a:	6818      	ldr	r0, [r3, #0]
 800456c:	b291      	uxth	r1, r2
 800456e:	fa1f fa80 	uxth.w	sl, r0
 8004572:	0c12      	lsrs	r2, r2, #16
 8004574:	ebc1 010a 	rsb	r1, r1, sl
 8004578:	4461      	add	r1, ip
 800457a:	ebc2 4210 	rsb	r2, r2, r0, lsr #16
 800457e:	eb02 4221 	add.w	r2, r2, r1, asr #16
 8004582:	b289      	uxth	r1, r1
 8004584:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004588:	42a7      	cmp	r7, r4
 800458a:	f843 1b04 	str.w	r1, [r3], #4
 800458e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004592:	d2e8      	bcs.n	8004566 <quorem+0xbe>
 8004594:	1d2a      	adds	r2, r5, #4
 8004596:	eb09 0382 	add.w	r3, r9, r2, lsl #2
 800459a:	6859      	ldr	r1, [r3, #4]
 800459c:	b969      	cbnz	r1, 80045ba <quorem+0x112>
 800459e:	4598      	cmp	r8, r3
 80045a0:	d209      	bcs.n	80045b6 <quorem+0x10e>
 80045a2:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 80045a6:	b112      	cbz	r2, 80045ae <quorem+0x106>
 80045a8:	e005      	b.n	80045b6 <quorem+0x10e>
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	b91a      	cbnz	r2, 80045b6 <quorem+0x10e>
 80045ae:	3b04      	subs	r3, #4
 80045b0:	3d01      	subs	r5, #1
 80045b2:	4598      	cmp	r8, r3
 80045b4:	d3f9      	bcc.n	80045aa <quorem+0x102>
 80045b6:	f8c9 5010 	str.w	r5, [r9, #16]
 80045ba:	4630      	mov	r0, r6
 80045bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045c0:	2000      	movs	r0, #0
 80045c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045c6:	bf00      	nop

080045c8 <_dtoa_r>:
 80045c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045cc:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80045ce:	b09d      	sub	sp, #116	; 0x74
 80045d0:	4607      	mov	r7, r0
 80045d2:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80045d4:	4692      	mov	sl, r2
 80045d6:	469b      	mov	fp, r3
 80045d8:	b141      	cbz	r1, 80045ec <_dtoa_r+0x24>
 80045da:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80045dc:	2201      	movs	r2, #1
 80045de:	409a      	lsls	r2, r3
 80045e0:	604b      	str	r3, [r1, #4]
 80045e2:	608a      	str	r2, [r1, #8]
 80045e4:	f001 fbd4 	bl	8005d90 <_Bfree>
 80045e8:	2300      	movs	r3, #0
 80045ea:	643b      	str	r3, [r7, #64]	; 0x40
 80045ec:	f1bb 0500 	subs.w	r5, fp, #0
 80045f0:	f2c0 80df 	blt.w	80047b2 <_dtoa_r+0x1ea>
 80045f4:	2300      	movs	r3, #0
 80045f6:	6023      	str	r3, [r4, #0]
 80045f8:	2300      	movs	r3, #0
 80045fa:	461a      	mov	r2, r3
 80045fc:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 8004600:	f6c7 72f0 	movt	r2, #32752	; 0x7ff0
 8004604:	402b      	ands	r3, r5
 8004606:	4293      	cmp	r3, r2
 8004608:	f000 80be 	beq.w	8004788 <_dtoa_r+0x1c0>
 800460c:	4650      	mov	r0, sl
 800460e:	4659      	mov	r1, fp
 8004610:	2200      	movs	r2, #0
 8004612:	2300      	movs	r3, #0
 8004614:	46d0      	mov	r8, sl
 8004616:	46d9      	mov	r9, fp
 8004618:	2401      	movs	r4, #1
 800461a:	f003 fd0d 	bl	8008038 <__aeabi_dcmpeq>
 800461e:	b978      	cbnz	r0, 8004640 <_dtoa_r+0x78>
 8004620:	f014 0fff 	tst.w	r4, #255	; 0xff
 8004624:	d110      	bne.n	8004648 <_dtoa_r+0x80>
 8004626:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8004628:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 800462a:	2301      	movs	r3, #1
 800462c:	602b      	str	r3, [r5, #0]
 800462e:	4d78      	ldr	r5, [pc, #480]	; (8004810 <_dtoa_r+0x248>)
 8004630:	b114      	cbz	r4, 8004638 <_dtoa_r+0x70>
 8004632:	4d78      	ldr	r5, [pc, #480]	; (8004814 <_dtoa_r+0x24c>)
 8004634:	6025      	str	r5, [r4, #0]
 8004636:	3d01      	subs	r5, #1
 8004638:	4628      	mov	r0, r5
 800463a:	b01d      	add	sp, #116	; 0x74
 800463c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004640:	2400      	movs	r4, #0
 8004642:	f014 0fff 	tst.w	r4, #255	; 0xff
 8004646:	d0ee      	beq.n	8004626 <_dtoa_r+0x5e>
 8004648:	a91b      	add	r1, sp, #108	; 0x6c
 800464a:	9100      	str	r1, [sp, #0]
 800464c:	4638      	mov	r0, r7
 800464e:	a91a      	add	r1, sp, #104	; 0x68
 8004650:	4642      	mov	r2, r8
 8004652:	464b      	mov	r3, r9
 8004654:	9101      	str	r1, [sp, #4]
 8004656:	f001 fed1 	bl	80063fc <__d2b>
 800465a:	f3c5 540a 	ubfx	r4, r5, #20, #11
 800465e:	900a      	str	r0, [sp, #40]	; 0x28
 8004660:	2c00      	cmp	r4, #0
 8004662:	f040 80b5 	bne.w	80047d0 <_dtoa_r+0x208>
 8004666:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8004668:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 800466a:	f46f 6382 	mvn.w	r3, #1040	; 0x410
 800466e:	1934      	adds	r4, r6, r4
 8004670:	429c      	cmp	r4, r3
 8004672:	f2c0 8281 	blt.w	8004b78 <_dtoa_r+0x5b0>
 8004676:	f64f 430e 	movw	r3, #64526	; 0xfc0e
 800467a:	f6cf 73ff 	movt	r3, #65535	; 0xffff
 800467e:	1b1b      	subs	r3, r3, r4
 8004680:	f204 4212 	addw	r2, r4, #1042	; 0x412
 8004684:	fa15 f303 	lsls.w	r3, r5, r3
 8004688:	fa2a f002 	lsr.w	r0, sl, r2
 800468c:	4318      	orrs	r0, r3
 800468e:	f003 f9f5 	bl	8007a7c <__aeabi_ui2d>
 8004692:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004696:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004698:	2501      	movs	r5, #1
 800469a:	f1a0 70f8 	sub.w	r0, r0, #32505856	; 0x1f00000
 800469e:	900d      	str	r0, [sp, #52]	; 0x34
 80046a0:	3c01      	subs	r4, #1
 80046a2:	9516      	str	r5, [sp, #88]	; 0x58
 80046a4:	2300      	movs	r3, #0
 80046a6:	2200      	movs	r2, #0
 80046a8:	f6c3 73f8 	movt	r3, #16376	; 0x3ff8
 80046ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80046b0:	f003 f8a6 	bl	8007800 <__aeabi_dsub>
 80046b4:	a350      	add	r3, pc, #320	; (adr r3, 80047f8 <_dtoa_r+0x230>)
 80046b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ba:	f003 fa55 	bl	8007b68 <__aeabi_dmul>
 80046be:	a350      	add	r3, pc, #320	; (adr r3, 8004800 <_dtoa_r+0x238>)
 80046c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c4:	f003 f89e 	bl	8007804 <__adddf3>
 80046c8:	4680      	mov	r8, r0
 80046ca:	4620      	mov	r0, r4
 80046cc:	4689      	mov	r9, r1
 80046ce:	f003 f9e5 	bl	8007a9c <__aeabi_i2d>
 80046d2:	a34d      	add	r3, pc, #308	; (adr r3, 8004808 <_dtoa_r+0x240>)
 80046d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d8:	f003 fa46 	bl	8007b68 <__aeabi_dmul>
 80046dc:	4602      	mov	r2, r0
 80046de:	460b      	mov	r3, r1
 80046e0:	4640      	mov	r0, r8
 80046e2:	4649      	mov	r1, r9
 80046e4:	f003 f88e 	bl	8007804 <__adddf3>
 80046e8:	4680      	mov	r8, r0
 80046ea:	4689      	mov	r9, r1
 80046ec:	f003 fcd6 	bl	800809c <__aeabi_d2iz>
 80046f0:	4649      	mov	r1, r9
 80046f2:	9005      	str	r0, [sp, #20]
 80046f4:	2200      	movs	r2, #0
 80046f6:	4640      	mov	r0, r8
 80046f8:	2300      	movs	r3, #0
 80046fa:	f003 fca7 	bl	800804c <__aeabi_dcmplt>
 80046fe:	b150      	cbz	r0, 8004716 <_dtoa_r+0x14e>
 8004700:	9805      	ldr	r0, [sp, #20]
 8004702:	f003 f9cb 	bl	8007a9c <__aeabi_i2d>
 8004706:	4642      	mov	r2, r8
 8004708:	464b      	mov	r3, r9
 800470a:	f003 fc95 	bl	8008038 <__aeabi_dcmpeq>
 800470e:	b910      	cbnz	r0, 8004716 <_dtoa_r+0x14e>
 8004710:	9d05      	ldr	r5, [sp, #20]
 8004712:	3d01      	subs	r5, #1
 8004714:	9505      	str	r5, [sp, #20]
 8004716:	9d05      	ldr	r5, [sp, #20]
 8004718:	2d16      	cmp	r5, #22
 800471a:	f200 815e 	bhi.w	80049da <_dtoa_r+0x412>
 800471e:	4b3e      	ldr	r3, [pc, #248]	; (8004818 <_dtoa_r+0x250>)
 8004720:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8004724:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004728:	4652      	mov	r2, sl
 800472a:	465b      	mov	r3, fp
 800472c:	f003 fcac 	bl	8008088 <__aeabi_dcmpgt>
 8004730:	2800      	cmp	r0, #0
 8004732:	f000 8229 	beq.w	8004b88 <_dtoa_r+0x5c0>
 8004736:	9d05      	ldr	r5, [sp, #20]
 8004738:	3d01      	subs	r5, #1
 800473a:	9505      	str	r5, [sp, #20]
 800473c:	2500      	movs	r5, #0
 800473e:	9514      	str	r5, [sp, #80]	; 0x50
 8004740:	1b34      	subs	r4, r6, r4
 8004742:	3c01      	subs	r4, #1
 8004744:	f100 8213 	bmi.w	8004b6e <_dtoa_r+0x5a6>
 8004748:	2500      	movs	r5, #0
 800474a:	940b      	str	r4, [sp, #44]	; 0x2c
 800474c:	950f      	str	r5, [sp, #60]	; 0x3c
 800474e:	9c05      	ldr	r4, [sp, #20]
 8004750:	2c00      	cmp	r4, #0
 8004752:	f2c0 8203 	blt.w	8004b5c <_dtoa_r+0x594>
 8004756:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8004758:	9413      	str	r4, [sp, #76]	; 0x4c
 800475a:	192d      	adds	r5, r5, r4
 800475c:	2400      	movs	r4, #0
 800475e:	950b      	str	r5, [sp, #44]	; 0x2c
 8004760:	9410      	str	r4, [sp, #64]	; 0x40
 8004762:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8004764:	2d09      	cmp	r5, #9
 8004766:	d85d      	bhi.n	8004824 <_dtoa_r+0x25c>
 8004768:	2401      	movs	r4, #1
 800476a:	2d05      	cmp	r5, #5
 800476c:	dd02      	ble.n	8004774 <_dtoa_r+0x1ac>
 800476e:	3d04      	subs	r5, #4
 8004770:	9526      	str	r5, [sp, #152]	; 0x98
 8004772:	2400      	movs	r4, #0
 8004774:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8004776:	1eab      	subs	r3, r5, #2
 8004778:	2b03      	cmp	r3, #3
 800477a:	d855      	bhi.n	8004828 <_dtoa_r+0x260>
 800477c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004780:	036d0382 	.word	0x036d0382
 8004784:	03850246 	.word	0x03850246
 8004788:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 800478a:	f242 730f 	movw	r3, #9999	; 0x270f
 800478e:	6023      	str	r3, [r4, #0]
 8004790:	f1ba 0f00 	cmp.w	sl, #0
 8004794:	d013      	beq.n	80047be <_dtoa_r+0x1f6>
 8004796:	4d21      	ldr	r5, [pc, #132]	; (800481c <_dtoa_r+0x254>)
 8004798:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 800479a:	2c00      	cmp	r4, #0
 800479c:	f43f af4c 	beq.w	8004638 <_dtoa_r+0x70>
 80047a0:	78eb      	ldrb	r3, [r5, #3]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	f000 8117 	beq.w	80049d6 <_dtoa_r+0x40e>
 80047a8:	f105 0308 	add.w	r3, r5, #8
 80047ac:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 80047ae:	6023      	str	r3, [r4, #0]
 80047b0:	e742      	b.n	8004638 <_dtoa_r+0x70>
 80047b2:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
 80047b6:	2301      	movs	r3, #1
 80047b8:	6023      	str	r3, [r4, #0]
 80047ba:	46ab      	mov	fp, r5
 80047bc:	e71c      	b.n	80045f8 <_dtoa_r+0x30>
 80047be:	4b17      	ldr	r3, [pc, #92]	; (800481c <_dtoa_r+0x254>)
 80047c0:	4a17      	ldr	r2, [pc, #92]	; (8004820 <_dtoa_r+0x258>)
 80047c2:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80047c6:	2d00      	cmp	r5, #0
 80047c8:	bf0c      	ite	eq
 80047ca:	4615      	moveq	r5, r2
 80047cc:	461d      	movne	r5, r3
 80047ce:	e7e3      	b.n	8004798 <_dtoa_r+0x1d0>
 80047d0:	4649      	mov	r1, r9
 80047d2:	4640      	mov	r0, r8
 80047d4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80047d8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80047da:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 80047dc:	f021 437f 	bic.w	r3, r1, #4278190080	; 0xff000000
 80047e0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80047e4:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80047e8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80047ec:	2500      	movs	r5, #0
 80047ee:	930d      	str	r3, [sp, #52]	; 0x34
 80047f0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80047f4:	9516      	str	r5, [sp, #88]	; 0x58
 80047f6:	e755      	b.n	80046a4 <_dtoa_r+0xdc>
 80047f8:	636f4361 	.word	0x636f4361
 80047fc:	3fd287a7 	.word	0x3fd287a7
 8004800:	8b60c8b3 	.word	0x8b60c8b3
 8004804:	3fc68a28 	.word	0x3fc68a28
 8004808:	509f79fb 	.word	0x509f79fb
 800480c:	3fd34413 	.word	0x3fd34413
 8004810:	080085ac 	.word	0x080085ac
 8004814:	080085ad 	.word	0x080085ad
 8004818:	080083c0 	.word	0x080083c0
 800481c:	080085bc 	.word	0x080085bc
 8004820:	080085b0 	.word	0x080085b0
 8004824:	2400      	movs	r4, #0
 8004826:	9426      	str	r4, [sp, #152]	; 0x98
 8004828:	2400      	movs	r4, #0
 800482a:	647c      	str	r4, [r7, #68]	; 0x44
 800482c:	4638      	mov	r0, r7
 800482e:	4621      	mov	r1, r4
 8004830:	f001 fa88 	bl	8005d44 <_Balloc>
 8004834:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004838:	950e      	str	r5, [sp, #56]	; 0x38
 800483a:	2501      	movs	r5, #1
 800483c:	9512      	str	r5, [sp, #72]	; 0x48
 800483e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004842:	9009      	str	r0, [sp, #36]	; 0x24
 8004844:	6438      	str	r0, [r7, #64]	; 0x40
 8004846:	9515      	str	r5, [sp, #84]	; 0x54
 8004848:	9427      	str	r4, [sp, #156]	; 0x9c
 800484a:	9c05      	ldr	r4, [sp, #20]
 800484c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800484e:	2c0e      	cmp	r4, #14
 8004850:	bfcc      	ite	gt
 8004852:	2500      	movgt	r5, #0
 8004854:	2501      	movle	r5, #1
 8004856:	2b00      	cmp	r3, #0
 8004858:	bfb8      	it	lt
 800485a:	2500      	movlt	r5, #0
 800485c:	2d00      	cmp	r5, #0
 800485e:	f000 80c1 	beq.w	80049e4 <_dtoa_r+0x41c>
 8004862:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8004864:	4b5e      	ldr	r3, [pc, #376]	; (80049e0 <_dtoa_r+0x418>)
 8004866:	0fe5      	lsrs	r5, r4, #31
 8004868:	9c05      	ldr	r4, [sp, #20]
 800486a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800486e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004872:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8004874:	2c00      	cmp	r4, #0
 8004876:	bfcc      	ite	gt
 8004878:	2500      	movgt	r5, #0
 800487a:	f005 0501 	andle.w	r5, r5, #1
 800487e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004882:	2d00      	cmp	r5, #0
 8004884:	f040 81a8 	bne.w	8004bd8 <_dtoa_r+0x610>
 8004888:	4602      	mov	r2, r0
 800488a:	460b      	mov	r3, r1
 800488c:	4650      	mov	r0, sl
 800488e:	4659      	mov	r1, fp
 8004890:	f003 fa94 	bl	8007dbc <__aeabi_ddiv>
 8004894:	f003 fc02 	bl	800809c <__aeabi_d2iz>
 8004898:	4606      	mov	r6, r0
 800489a:	f003 f8ff 	bl	8007a9c <__aeabi_i2d>
 800489e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80048a2:	f003 f961 	bl	8007b68 <__aeabi_dmul>
 80048a6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80048a8:	460b      	mov	r3, r1
 80048aa:	4602      	mov	r2, r0
 80048ac:	4659      	mov	r1, fp
 80048ae:	4650      	mov	r0, sl
 80048b0:	f002 ffa6 	bl	8007800 <__aeabi_dsub>
 80048b4:	f106 0330 	add.w	r3, r6, #48	; 0x30
 80048b8:	f804 3b01 	strb.w	r3, [r4], #1
 80048bc:	9411      	str	r4, [sp, #68]	; 0x44
 80048be:	46a0      	mov	r8, r4
 80048c0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80048c2:	2c01      	cmp	r4, #1
 80048c4:	4682      	mov	sl, r0
 80048c6:	468b      	mov	fp, r1
 80048c8:	d04c      	beq.n	8004964 <_dtoa_r+0x39c>
 80048ca:	2300      	movs	r3, #0
 80048cc:	2200      	movs	r2, #0
 80048ce:	f2c4 0324 	movt	r3, #16420	; 0x4024
 80048d2:	f003 f949 	bl	8007b68 <__aeabi_dmul>
 80048d6:	2200      	movs	r2, #0
 80048d8:	2300      	movs	r3, #0
 80048da:	4682      	mov	sl, r0
 80048dc:	468b      	mov	fp, r1
 80048de:	2401      	movs	r4, #1
 80048e0:	f003 fbaa 	bl	8008038 <__aeabi_dcmpeq>
 80048e4:	b100      	cbz	r0, 80048e8 <_dtoa_r+0x320>
 80048e6:	462c      	mov	r4, r5
 80048e8:	f014 0fff 	tst.w	r4, #255	; 0xff
 80048ec:	f000 8575 	beq.w	80053da <_dtoa_r+0xe12>
 80048f0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80048f2:	980e      	ldr	r0, [sp, #56]	; 0x38
 80048f4:	1ca5      	adds	r5, r4, #2
 80048f6:	eb04 0900 	add.w	r9, r4, r0
 80048fa:	e00d      	b.n	8004918 <_dtoa_r+0x350>
 80048fc:	f003 f934 	bl	8007b68 <__aeabi_dmul>
 8004900:	2200      	movs	r2, #0
 8004902:	2300      	movs	r3, #0
 8004904:	4682      	mov	sl, r0
 8004906:	468b      	mov	fp, r1
 8004908:	f003 fb96 	bl	8008038 <__aeabi_dcmpeq>
 800490c:	b100      	cbz	r0, 8004910 <_dtoa_r+0x348>
 800490e:	2400      	movs	r4, #0
 8004910:	f014 0fff 	tst.w	r4, #255	; 0xff
 8004914:	f000 8423 	beq.w	800515e <_dtoa_r+0xb96>
 8004918:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800491c:	4650      	mov	r0, sl
 800491e:	4659      	mov	r1, fp
 8004920:	f003 fa4c 	bl	8007dbc <__aeabi_ddiv>
 8004924:	f003 fbba 	bl	800809c <__aeabi_d2iz>
 8004928:	4606      	mov	r6, r0
 800492a:	f003 f8b7 	bl	8007a9c <__aeabi_i2d>
 800492e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004932:	f003 f919 	bl	8007b68 <__aeabi_dmul>
 8004936:	4602      	mov	r2, r0
 8004938:	460b      	mov	r3, r1
 800493a:	4650      	mov	r0, sl
 800493c:	4659      	mov	r1, fp
 800493e:	f002 ff5f 	bl	8007800 <__aeabi_dsub>
 8004942:	f106 0430 	add.w	r4, r6, #48	; 0x30
 8004946:	2300      	movs	r3, #0
 8004948:	2200      	movs	r2, #0
 800494a:	454d      	cmp	r5, r9
 800494c:	f805 4c01 	strb.w	r4, [r5, #-1]
 8004950:	46a8      	mov	r8, r5
 8004952:	4682      	mov	sl, r0
 8004954:	468b      	mov	fp, r1
 8004956:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800495a:	f04f 0401 	mov.w	r4, #1
 800495e:	f105 0501 	add.w	r5, r5, #1
 8004962:	d1cb      	bne.n	80048fc <_dtoa_r+0x334>
 8004964:	4652      	mov	r2, sl
 8004966:	465b      	mov	r3, fp
 8004968:	4650      	mov	r0, sl
 800496a:	4659      	mov	r1, fp
 800496c:	f002 ff4a 	bl	8007804 <__adddf3>
 8004970:	4604      	mov	r4, r0
 8004972:	460d      	mov	r5, r1
 8004974:	4622      	mov	r2, r4
 8004976:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800497a:	462b      	mov	r3, r5
 800497c:	f003 fb66 	bl	800804c <__aeabi_dcmplt>
 8004980:	b958      	cbnz	r0, 800499a <_dtoa_r+0x3d2>
 8004982:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004986:	4622      	mov	r2, r4
 8004988:	462b      	mov	r3, r5
 800498a:	f003 fb55 	bl	8008038 <__aeabi_dcmpeq>
 800498e:	2800      	cmp	r0, #0
 8004990:	f000 83e5 	beq.w	800515e <_dtoa_r+0xb96>
 8004994:	07f3      	lsls	r3, r6, #31
 8004996:	f140 83e2 	bpl.w	800515e <_dtoa_r+0xb96>
 800499a:	9c05      	ldr	r4, [sp, #20]
 800499c:	f818 6c01 	ldrb.w	r6, [r8, #-1]
 80049a0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80049a2:	9417      	str	r4, [sp, #92]	; 0x5c
 80049a4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80049a6:	e003      	b.n	80049b0 <_dtoa_r+0x3e8>
 80049a8:	f818 6c02 	ldrb.w	r6, [r8, #-2]
 80049ac:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80049b0:	2e39      	cmp	r6, #57	; 0x39
 80049b2:	4643      	mov	r3, r8
 80049b4:	f040 8489 	bne.w	80052ca <_dtoa_r+0xd02>
 80049b8:	4590      	cmp	r8, r2
 80049ba:	d1f5      	bne.n	80049a8 <_dtoa_r+0x3e0>
 80049bc:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80049be:	9309      	str	r3, [sp, #36]	; 0x24
 80049c0:	3401      	adds	r4, #1
 80049c2:	9405      	str	r4, [sp, #20]
 80049c4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80049c6:	2330      	movs	r3, #48	; 0x30
 80049c8:	f804 3c01 	strb.w	r3, [r4, #-1]
 80049cc:	2231      	movs	r2, #49	; 0x31
 80049ce:	4623      	mov	r3, r4
 80049d0:	f803 2c01 	strb.w	r2, [r3, #-1]
 80049d4:	e0b0      	b.n	8004b38 <_dtoa_r+0x570>
 80049d6:	1ceb      	adds	r3, r5, #3
 80049d8:	e6e8      	b.n	80047ac <_dtoa_r+0x1e4>
 80049da:	2501      	movs	r5, #1
 80049dc:	9514      	str	r5, [sp, #80]	; 0x50
 80049de:	e6af      	b.n	8004740 <_dtoa_r+0x178>
 80049e0:	080083c0 	.word	0x080083c0
 80049e4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80049e6:	2c00      	cmp	r4, #0
 80049e8:	f040 80d1 	bne.w	8004b8e <_dtoa_r+0x5c6>
 80049ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80049ee:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80049f0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80049f2:	9306      	str	r3, [sp, #24]
 80049f4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80049f6:	2800      	cmp	r0, #0
 80049f8:	bfc8      	it	gt
 80049fa:	2c00      	cmpgt	r4, #0
 80049fc:	dd09      	ble.n	8004a12 <_dtoa_r+0x44a>
 80049fe:	4603      	mov	r3, r0
 8004a00:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004a02:	42a3      	cmp	r3, r4
 8004a04:	bfa8      	it	ge
 8004a06:	4623      	movge	r3, r4
 8004a08:	1ac9      	subs	r1, r1, r3
 8004a0a:	1ac0      	subs	r0, r0, r3
 8004a0c:	910f      	str	r1, [sp, #60]	; 0x3c
 8004a0e:	1ae4      	subs	r4, r4, r3
 8004a10:	900b      	str	r0, [sp, #44]	; 0x2c
 8004a12:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004a14:	2a00      	cmp	r2, #0
 8004a16:	dd1a      	ble.n	8004a4e <_dtoa_r+0x486>
 8004a18:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	f000 841d 	beq.w	800525a <_dtoa_r+0xc92>
 8004a20:	2d00      	cmp	r5, #0
 8004a22:	dd10      	ble.n	8004a46 <_dtoa_r+0x47e>
 8004a24:	9906      	ldr	r1, [sp, #24]
 8004a26:	462a      	mov	r2, r5
 8004a28:	4638      	mov	r0, r7
 8004a2a:	f001 fb39 	bl	80060a0 <__pow5mult>
 8004a2e:	9006      	str	r0, [sp, #24]
 8004a30:	9906      	ldr	r1, [sp, #24]
 8004a32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004a34:	4638      	mov	r0, r7
 8004a36:	f001 fa9b 	bl	8005f70 <__multiply>
 8004a3a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004a3c:	4606      	mov	r6, r0
 8004a3e:	4638      	mov	r0, r7
 8004a40:	f001 f9a6 	bl	8005d90 <_Bfree>
 8004a44:	960a      	str	r6, [sp, #40]	; 0x28
 8004a46:	9810      	ldr	r0, [sp, #64]	; 0x40
 8004a48:	1b42      	subs	r2, r0, r5
 8004a4a:	f040 8429 	bne.w	80052a0 <_dtoa_r+0xcd8>
 8004a4e:	2101      	movs	r1, #1
 8004a50:	4638      	mov	r0, r7
 8004a52:	f001 fa83 	bl	8005f5c <__i2b>
 8004a56:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8004a58:	2d00      	cmp	r5, #0
 8004a5a:	4606      	mov	r6, r0
 8004a5c:	dd05      	ble.n	8004a6a <_dtoa_r+0x4a2>
 8004a5e:	4631      	mov	r1, r6
 8004a60:	4638      	mov	r0, r7
 8004a62:	462a      	mov	r2, r5
 8004a64:	f001 fb1c 	bl	80060a0 <__pow5mult>
 8004a68:	4606      	mov	r6, r0
 8004a6a:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8004a6c:	2d01      	cmp	r5, #1
 8004a6e:	f340 820f 	ble.w	8004e90 <_dtoa_r+0x8c8>
 8004a72:	2500      	movs	r5, #0
 8004a74:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8004a76:	2301      	movs	r3, #1
 8004a78:	2800      	cmp	r0, #0
 8004a7a:	f040 838c 	bne.w	8005196 <_dtoa_r+0xbce>
 8004a7e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004a80:	185b      	adds	r3, r3, r1
 8004a82:	f013 031f 	ands.w	r3, r3, #31
 8004a86:	f000 82cb 	beq.w	8005020 <_dtoa_r+0xa58>
 8004a8a:	f1c3 0220 	rsb	r2, r3, #32
 8004a8e:	2a04      	cmp	r2, #4
 8004a90:	f340 84bf 	ble.w	8005412 <_dtoa_r+0xe4a>
 8004a94:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004a96:	f1c3 031c 	rsb	r3, r3, #28
 8004a9a:	18d2      	adds	r2, r2, r3
 8004a9c:	18c9      	adds	r1, r1, r3
 8004a9e:	920f      	str	r2, [sp, #60]	; 0x3c
 8004aa0:	18e4      	adds	r4, r4, r3
 8004aa2:	910b      	str	r1, [sp, #44]	; 0x2c
 8004aa4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004aa6:	2a00      	cmp	r2, #0
 8004aa8:	dd04      	ble.n	8004ab4 <_dtoa_r+0x4ec>
 8004aaa:	4638      	mov	r0, r7
 8004aac:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004aae:	f001 fb43 	bl	8006138 <__lshift>
 8004ab2:	900a      	str	r0, [sp, #40]	; 0x28
 8004ab4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	dd05      	ble.n	8004ac6 <_dtoa_r+0x4fe>
 8004aba:	4631      	mov	r1, r6
 8004abc:	4638      	mov	r0, r7
 8004abe:	461a      	mov	r2, r3
 8004ac0:	f001 fb3a 	bl	8006138 <__lshift>
 8004ac4:	4606      	mov	r6, r0
 8004ac6:	9814      	ldr	r0, [sp, #80]	; 0x50
 8004ac8:	2800      	cmp	r0, #0
 8004aca:	f040 834c 	bne.w	8005166 <_dtoa_r+0xb9e>
 8004ace:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004ad0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004ad2:	2900      	cmp	r1, #0
 8004ad4:	bfcc      	ite	gt
 8004ad6:	2300      	movgt	r3, #0
 8004ad8:	2301      	movle	r3, #1
 8004ada:	2a02      	cmp	r2, #2
 8004adc:	bfd8      	it	le
 8004ade:	2300      	movle	r3, #0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	f000 8226 	beq.w	8004f32 <_dtoa_r+0x96a>
 8004ae6:	2900      	cmp	r1, #0
 8004ae8:	f040 808a 	bne.w	8004c00 <_dtoa_r+0x638>
 8004aec:	4631      	mov	r1, r6
 8004aee:	2205      	movs	r2, #5
 8004af0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004af2:	4638      	mov	r0, r7
 8004af4:	f001 f956 	bl	8005da4 <__multadd>
 8004af8:	4606      	mov	r6, r0
 8004afa:	4631      	mov	r1, r6
 8004afc:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004afe:	f001 fb7b 	bl	80061f8 <__mcmp>
 8004b02:	2800      	cmp	r0, #0
 8004b04:	dd7c      	ble.n	8004c00 <_dtoa_r+0x638>
 8004b06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b08:	9c05      	ldr	r4, [sp, #20]
 8004b0a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004b0c:	2231      	movs	r2, #49	; 0x31
 8004b0e:	f803 2b01 	strb.w	r2, [r3], #1
 8004b12:	3401      	adds	r4, #1
 8004b14:	9405      	str	r4, [sp, #20]
 8004b16:	9309      	str	r3, [sp, #36]	; 0x24
 8004b18:	2400      	movs	r4, #0
 8004b1a:	4638      	mov	r0, r7
 8004b1c:	4631      	mov	r1, r6
 8004b1e:	f001 f937 	bl	8005d90 <_Bfree>
 8004b22:	9806      	ldr	r0, [sp, #24]
 8004b24:	b140      	cbz	r0, 8004b38 <_dtoa_r+0x570>
 8004b26:	4284      	cmp	r4, r0
 8004b28:	bf18      	it	ne
 8004b2a:	2c00      	cmpne	r4, #0
 8004b2c:	f040 8273 	bne.w	8005016 <_dtoa_r+0xa4e>
 8004b30:	4638      	mov	r0, r7
 8004b32:	9906      	ldr	r1, [sp, #24]
 8004b34:	f001 f92c 	bl	8005d90 <_Bfree>
 8004b38:	4638      	mov	r0, r7
 8004b3a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004b3c:	f001 f928 	bl	8005d90 <_Bfree>
 8004b40:	9c05      	ldr	r4, [sp, #20]
 8004b42:	1c63      	adds	r3, r4, #1
 8004b44:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8004b46:	2200      	movs	r2, #0
 8004b48:	7022      	strb	r2, [r4, #0]
 8004b4a:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 8004b4c:	6023      	str	r3, [r4, #0]
 8004b4e:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8004b50:	2c00      	cmp	r4, #0
 8004b52:	f43f ad71 	beq.w	8004638 <_dtoa_r+0x70>
 8004b56:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004b58:	6020      	str	r0, [r4, #0]
 8004b5a:	e56d      	b.n	8004638 <_dtoa_r+0x70>
 8004b5c:	9c05      	ldr	r4, [sp, #20]
 8004b5e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8004b60:	1b2d      	subs	r5, r5, r4
 8004b62:	950f      	str	r5, [sp, #60]	; 0x3c
 8004b64:	4265      	negs	r5, r4
 8004b66:	2400      	movs	r4, #0
 8004b68:	9510      	str	r5, [sp, #64]	; 0x40
 8004b6a:	9413      	str	r4, [sp, #76]	; 0x4c
 8004b6c:	e5f9      	b.n	8004762 <_dtoa_r+0x19a>
 8004b6e:	4264      	negs	r4, r4
 8004b70:	940f      	str	r4, [sp, #60]	; 0x3c
 8004b72:	2400      	movs	r4, #0
 8004b74:	940b      	str	r4, [sp, #44]	; 0x2c
 8004b76:	e5ea      	b.n	800474e <_dtoa_r+0x186>
 8004b78:	f64f 30ee 	movw	r0, #64494	; 0xfbee
 8004b7c:	f6cf 70ff 	movt	r0, #65535	; 0xffff
 8004b80:	1b00      	subs	r0, r0, r4
 8004b82:	fa0a f000 	lsl.w	r0, sl, r0
 8004b86:	e582      	b.n	800468e <_dtoa_r+0xc6>
 8004b88:	2500      	movs	r5, #0
 8004b8a:	9514      	str	r5, [sp, #80]	; 0x50
 8004b8c:	e5d8      	b.n	8004740 <_dtoa_r+0x178>
 8004b8e:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8004b90:	2c01      	cmp	r4, #1
 8004b92:	f340 838f 	ble.w	80052b4 <_dtoa_r+0xcec>
 8004b96:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8004b98:	1e62      	subs	r2, r4, #1
 8004b9a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8004b9c:	4294      	cmp	r4, r2
 8004b9e:	bfbf      	itttt	lt
 8004ba0:	9c10      	ldrlt	r4, [sp, #64]	; 0x40
 8004ba2:	9210      	strlt	r2, [sp, #64]	; 0x40
 8004ba4:	ebc4 0302 	rsblt	r3, r4, r2
 8004ba8:	9c13      	ldrlt	r4, [sp, #76]	; 0x4c
 8004baa:	bfb6      	itet	lt
 8004bac:	18e4      	addlt	r4, r4, r3
 8004bae:	ebc2 0504 	rsbge	r5, r2, r4
 8004bb2:	9413      	strlt	r4, [sp, #76]	; 0x4c
 8004bb4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8004bb6:	2c00      	cmp	r4, #0
 8004bb8:	f2c0 838f 	blt.w	80052da <_dtoa_r+0xd12>
 8004bbc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8004bbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004bc0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004bc2:	18d2      	adds	r2, r2, r3
 8004bc4:	920f      	str	r2, [sp, #60]	; 0x3c
 8004bc6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004bc8:	4638      	mov	r0, r7
 8004bca:	18d2      	adds	r2, r2, r3
 8004bcc:	2101      	movs	r1, #1
 8004bce:	920b      	str	r2, [sp, #44]	; 0x2c
 8004bd0:	f001 f9c4 	bl	8005f5c <__i2b>
 8004bd4:	9006      	str	r0, [sp, #24]
 8004bd6:	e70d      	b.n	80049f4 <_dtoa_r+0x42c>
 8004bd8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8004bda:	2d00      	cmp	r5, #0
 8004bdc:	f040 8367 	bne.w	80052ae <_dtoa_r+0xce6>
 8004be0:	2300      	movs	r3, #0
 8004be2:	2200      	movs	r2, #0
 8004be4:	f2c4 0314 	movt	r3, #16404	; 0x4014
 8004be8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004bec:	f002 ffbc 	bl	8007b68 <__aeabi_dmul>
 8004bf0:	4652      	mov	r2, sl
 8004bf2:	465b      	mov	r3, fp
 8004bf4:	f003 fa3e 	bl	8008074 <__aeabi_dcmpge>
 8004bf8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8004bfa:	9606      	str	r6, [sp, #24]
 8004bfc:	2800      	cmp	r0, #0
 8004bfe:	d082      	beq.n	8004b06 <_dtoa_r+0x53e>
 8004c00:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8004c02:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004c04:	43e4      	mvns	r4, r4
 8004c06:	9405      	str	r4, [sp, #20]
 8004c08:	2400      	movs	r4, #0
 8004c0a:	e786      	b.n	8004b1a <_dtoa_r+0x552>
 8004c0c:	2501      	movs	r5, #1
 8004c0e:	9512      	str	r5, [sp, #72]	; 0x48
 8004c10:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 8004c12:	2d00      	cmp	r5, #0
 8004c14:	f340 82d3 	ble.w	80051be <_dtoa_r+0xbf6>
 8004c18:	46a9      	mov	r9, r5
 8004c1a:	2d0e      	cmp	r5, #14
 8004c1c:	bf8c      	ite	hi
 8004c1e:	2400      	movhi	r4, #0
 8004c20:	f004 0401 	andls.w	r4, r4, #1
 8004c24:	9515      	str	r5, [sp, #84]	; 0x54
 8004c26:	950e      	str	r5, [sp, #56]	; 0x38
 8004c28:	2100      	movs	r1, #0
 8004c2a:	f1b9 0f17 	cmp.w	r9, #23
 8004c2e:	6479      	str	r1, [r7, #68]	; 0x44
 8004c30:	d909      	bls.n	8004c46 <_dtoa_r+0x67e>
 8004c32:	2201      	movs	r2, #1
 8004c34:	2304      	movs	r3, #4
 8004c36:	005b      	lsls	r3, r3, #1
 8004c38:	f103 0014 	add.w	r0, r3, #20
 8004c3c:	4611      	mov	r1, r2
 8004c3e:	3201      	adds	r2, #1
 8004c40:	4548      	cmp	r0, r9
 8004c42:	d9f8      	bls.n	8004c36 <_dtoa_r+0x66e>
 8004c44:	6479      	str	r1, [r7, #68]	; 0x44
 8004c46:	4638      	mov	r0, r7
 8004c48:	f001 f87c 	bl	8005d44 <_Balloc>
 8004c4c:	9009      	str	r0, [sp, #36]	; 0x24
 8004c4e:	6438      	str	r0, [r7, #64]	; 0x40
 8004c50:	2c00      	cmp	r4, #0
 8004c52:	f43f adfa 	beq.w	800484a <_dtoa_r+0x282>
 8004c56:	9c05      	ldr	r4, [sp, #20]
 8004c58:	4652      	mov	r2, sl
 8004c5a:	465b      	mov	r3, fp
 8004c5c:	2c00      	cmp	r4, #0
 8004c5e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8004c62:	f340 81f8 	ble.w	8005056 <_dtoa_r+0xa8e>
 8004c66:	4b97      	ldr	r3, [pc, #604]	; (8004ec4 <_dtoa_r+0x8fc>)
 8004c68:	f004 020f 	and.w	r2, r4, #15
 8004c6c:	1124      	asrs	r4, r4, #4
 8004c6e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004c72:	2602      	movs	r6, #2
 8004c74:	06e2      	lsls	r2, r4, #27
 8004c76:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004c7a:	d50b      	bpl.n	8004c94 <_dtoa_r+0x6cc>
 8004c7c:	4b92      	ldr	r3, [pc, #584]	; (8004ec8 <_dtoa_r+0x900>)
 8004c7e:	4650      	mov	r0, sl
 8004c80:	4659      	mov	r1, fp
 8004c82:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004c86:	f003 f899 	bl	8007dbc <__aeabi_ddiv>
 8004c8a:	f004 040f 	and.w	r4, r4, #15
 8004c8e:	4682      	mov	sl, r0
 8004c90:	468b      	mov	fp, r1
 8004c92:	2603      	movs	r6, #3
 8004c94:	b174      	cbz	r4, 8004cb4 <_dtoa_r+0x6ec>
 8004c96:	4d8c      	ldr	r5, [pc, #560]	; (8004ec8 <_dtoa_r+0x900>)
 8004c98:	4640      	mov	r0, r8
 8004c9a:	4649      	mov	r1, r9
 8004c9c:	07e3      	lsls	r3, r4, #31
 8004c9e:	d504      	bpl.n	8004caa <_dtoa_r+0x6e2>
 8004ca0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004ca4:	f002 ff60 	bl	8007b68 <__aeabi_dmul>
 8004ca8:	3601      	adds	r6, #1
 8004caa:	3508      	adds	r5, #8
 8004cac:	1064      	asrs	r4, r4, #1
 8004cae:	d1f5      	bne.n	8004c9c <_dtoa_r+0x6d4>
 8004cb0:	4680      	mov	r8, r0
 8004cb2:	4689      	mov	r9, r1
 8004cb4:	4650      	mov	r0, sl
 8004cb6:	4659      	mov	r1, fp
 8004cb8:	4642      	mov	r2, r8
 8004cba:	464b      	mov	r3, r9
 8004cbc:	f003 f87e 	bl	8007dbc <__aeabi_ddiv>
 8004cc0:	4682      	mov	sl, r0
 8004cc2:	468b      	mov	fp, r1
 8004cc4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8004cc6:	2c00      	cmp	r4, #0
 8004cc8:	f000 8100 	beq.w	8004ecc <_dtoa_r+0x904>
 8004ccc:	2300      	movs	r3, #0
 8004cce:	4650      	mov	r0, sl
 8004cd0:	4659      	mov	r1, fp
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 8004cd8:	2401      	movs	r4, #1
 8004cda:	f003 f9b7 	bl	800804c <__aeabi_dcmplt>
 8004cde:	b900      	cbnz	r0, 8004ce2 <_dtoa_r+0x71a>
 8004ce0:	2400      	movs	r4, #0
 8004ce2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8004ce4:	2d00      	cmp	r5, #0
 8004ce6:	bfd4      	ite	le
 8004ce8:	2400      	movle	r4, #0
 8004cea:	f004 0401 	andgt.w	r4, r4, #1
 8004cee:	2c00      	cmp	r4, #0
 8004cf0:	f000 80ec 	beq.w	8004ecc <_dtoa_r+0x904>
 8004cf4:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8004cf6:	2c00      	cmp	r4, #0
 8004cf8:	f340 819b 	ble.w	8005032 <_dtoa_r+0xa6a>
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8004d04:	4650      	mov	r0, sl
 8004d06:	4659      	mov	r1, fp
 8004d08:	f002 ff2e 	bl	8007b68 <__aeabi_dmul>
 8004d0c:	4682      	mov	sl, r0
 8004d0e:	1c70      	adds	r0, r6, #1
 8004d10:	468b      	mov	fp, r1
 8004d12:	f002 fec3 	bl	8007a9c <__aeabi_i2d>
 8004d16:	4602      	mov	r2, r0
 8004d18:	460b      	mov	r3, r1
 8004d1a:	4650      	mov	r0, sl
 8004d1c:	4659      	mov	r1, fp
 8004d1e:	f002 ff23 	bl	8007b68 <__aeabi_dmul>
 8004d22:	2300      	movs	r3, #0
 8004d24:	2200      	movs	r2, #0
 8004d26:	f2c4 031c 	movt	r3, #16412	; 0x401c
 8004d2a:	f002 fd6b 	bl	8007804 <__adddf3>
 8004d2e:	9d05      	ldr	r5, [sp, #20]
 8004d30:	3d01      	subs	r5, #1
 8004d32:	9517      	str	r5, [sp, #92]	; 0x5c
 8004d34:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8004d36:	4680      	mov	r8, r0
 8004d38:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 8004d3c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8004d3e:	2c00      	cmp	r4, #0
 8004d40:	f000 81b0 	beq.w	80050a4 <_dtoa_r+0xadc>
 8004d44:	4b5f      	ldr	r3, [pc, #380]	; (8004ec4 <_dtoa_r+0x8fc>)
 8004d46:	2100      	movs	r1, #0
 8004d48:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8004d4c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004d50:	2000      	movs	r0, #0
 8004d52:	f6c3 71e0 	movt	r1, #16352	; 0x3fe0
 8004d56:	f003 f831 	bl	8007dbc <__aeabi_ddiv>
 8004d5a:	4642      	mov	r2, r8
 8004d5c:	464b      	mov	r3, r9
 8004d5e:	f002 fd4f 	bl	8007800 <__aeabi_dsub>
 8004d62:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004d66:	4659      	mov	r1, fp
 8004d68:	4650      	mov	r0, sl
 8004d6a:	f003 f997 	bl	800809c <__aeabi_d2iz>
 8004d6e:	4606      	mov	r6, r0
 8004d70:	f002 fe94 	bl	8007a9c <__aeabi_i2d>
 8004d74:	4602      	mov	r2, r0
 8004d76:	460b      	mov	r3, r1
 8004d78:	4650      	mov	r0, sl
 8004d7a:	4659      	mov	r1, fp
 8004d7c:	f002 fd40 	bl	8007800 <__aeabi_dsub>
 8004d80:	3630      	adds	r6, #48	; 0x30
 8004d82:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8004d84:	b2f6      	uxtb	r6, r6
 8004d86:	4682      	mov	sl, r0
 8004d88:	468b      	mov	fp, r1
 8004d8a:	f804 6b01 	strb.w	r6, [r4], #1
 8004d8e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d92:	4652      	mov	r2, sl
 8004d94:	465b      	mov	r3, fp
 8004d96:	9411      	str	r4, [sp, #68]	; 0x44
 8004d98:	46a0      	mov	r8, r4
 8004d9a:	f003 f975 	bl	8008088 <__aeabi_dcmpgt>
 8004d9e:	2800      	cmp	r0, #0
 8004da0:	f040 8325 	bne.w	80053ee <_dtoa_r+0xe26>
 8004da4:	2100      	movs	r1, #0
 8004da6:	4652      	mov	r2, sl
 8004da8:	465b      	mov	r3, fp
 8004daa:	2000      	movs	r0, #0
 8004dac:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 8004db0:	f002 fd26 	bl	8007800 <__aeabi_dsub>
 8004db4:	4602      	mov	r2, r0
 8004db6:	460b      	mov	r3, r1
 8004db8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004dbc:	f003 f964 	bl	8008088 <__aeabi_dcmpgt>
 8004dc0:	2800      	cmp	r0, #0
 8004dc2:	f040 827f 	bne.w	80052c4 <_dtoa_r+0xcfc>
 8004dc6:	2d01      	cmp	r5, #1
 8004dc8:	f340 8133 	ble.w	8005032 <_dtoa_r+0xa6a>
 8004dcc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004dce:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8004dd0:	1945      	adds	r5, r0, r5
 8004dd2:	e00f      	b.n	8004df4 <_dtoa_r+0x82c>
 8004dd4:	2100      	movs	r1, #0
 8004dd6:	2000      	movs	r0, #0
 8004dd8:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 8004ddc:	f002 fd10 	bl	8007800 <__aeabi_dsub>
 8004de0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004de4:	f003 f932 	bl	800804c <__aeabi_dcmplt>
 8004de8:	2800      	cmp	r0, #0
 8004dea:	f040 826b 	bne.w	80052c4 <_dtoa_r+0xcfc>
 8004dee:	42ac      	cmp	r4, r5
 8004df0:	f000 811f 	beq.w	8005032 <_dtoa_r+0xa6a>
 8004df4:	2300      	movs	r3, #0
 8004df6:	2200      	movs	r2, #0
 8004df8:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8004dfc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004e00:	f002 feb2 	bl	8007b68 <__aeabi_dmul>
 8004e04:	2300      	movs	r3, #0
 8004e06:	2200      	movs	r2, #0
 8004e08:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8004e0c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004e10:	4650      	mov	r0, sl
 8004e12:	4659      	mov	r1, fp
 8004e14:	f002 fea8 	bl	8007b68 <__aeabi_dmul>
 8004e18:	4680      	mov	r8, r0
 8004e1a:	4689      	mov	r9, r1
 8004e1c:	f003 f93e 	bl	800809c <__aeabi_d2iz>
 8004e20:	4606      	mov	r6, r0
 8004e22:	f002 fe3b 	bl	8007a9c <__aeabi_i2d>
 8004e26:	4602      	mov	r2, r0
 8004e28:	460b      	mov	r3, r1
 8004e2a:	4640      	mov	r0, r8
 8004e2c:	4649      	mov	r1, r9
 8004e2e:	f002 fce7 	bl	8007800 <__aeabi_dsub>
 8004e32:	3630      	adds	r6, #48	; 0x30
 8004e34:	b2f6      	uxtb	r6, r6
 8004e36:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004e3a:	f804 6b01 	strb.w	r6, [r4], #1
 8004e3e:	4682      	mov	sl, r0
 8004e40:	468b      	mov	fp, r1
 8004e42:	f003 f903 	bl	800804c <__aeabi_dcmplt>
 8004e46:	46a0      	mov	r8, r4
 8004e48:	4652      	mov	r2, sl
 8004e4a:	465b      	mov	r3, fp
 8004e4c:	2800      	cmp	r0, #0
 8004e4e:	d0c1      	beq.n	8004dd4 <_dtoa_r+0x80c>
 8004e50:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8004e52:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004e54:	9005      	str	r0, [sp, #20]
 8004e56:	9409      	str	r4, [sp, #36]	; 0x24
 8004e58:	e66e      	b.n	8004b38 <_dtoa_r+0x570>
 8004e5a:	2500      	movs	r5, #0
 8004e5c:	9512      	str	r5, [sp, #72]	; 0x48
 8004e5e:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 8004e60:	9805      	ldr	r0, [sp, #20]
 8004e62:	182d      	adds	r5, r5, r0
 8004e64:	f105 0901 	add.w	r9, r5, #1
 8004e68:	f1b9 0f00 	cmp.w	r9, #0
 8004e6c:	9515      	str	r5, [sp, #84]	; 0x54
 8004e6e:	f340 819b 	ble.w	80051a8 <_dtoa_r+0xbe0>
 8004e72:	f1b9 0f0e 	cmp.w	r9, #14
 8004e76:	bf8c      	ite	hi
 8004e78:	2400      	movhi	r4, #0
 8004e7a:	f004 0401 	andls.w	r4, r4, #1
 8004e7e:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8004e82:	e6d1      	b.n	8004c28 <_dtoa_r+0x660>
 8004e84:	2500      	movs	r5, #0
 8004e86:	9512      	str	r5, [sp, #72]	; 0x48
 8004e88:	e6c2      	b.n	8004c10 <_dtoa_r+0x648>
 8004e8a:	2501      	movs	r5, #1
 8004e8c:	9512      	str	r5, [sp, #72]	; 0x48
 8004e8e:	e7e6      	b.n	8004e5e <_dtoa_r+0x896>
 8004e90:	f1ba 0f00 	cmp.w	sl, #0
 8004e94:	f47f aded 	bne.w	8004a72 <_dtoa_r+0x4aa>
 8004e98:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004e9c:	4655      	mov	r5, sl
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	f47f ade8 	bne.w	8004a74 <_dtoa_r+0x4ac>
 8004ea4:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 8004ea8:	ea0b 0303 	and.w	r3, fp, r3
 8004eac:	461d      	mov	r5, r3
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	f43f ade0 	beq.w	8004a74 <_dtoa_r+0x4ac>
 8004eb4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8004eb6:	3501      	adds	r5, #1
 8004eb8:	950f      	str	r5, [sp, #60]	; 0x3c
 8004eba:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8004ebc:	3501      	adds	r5, #1
 8004ebe:	950b      	str	r5, [sp, #44]	; 0x2c
 8004ec0:	2501      	movs	r5, #1
 8004ec2:	e5d7      	b.n	8004a74 <_dtoa_r+0x4ac>
 8004ec4:	080083c0 	.word	0x080083c0
 8004ec8:	080084b0 	.word	0x080084b0
 8004ecc:	4630      	mov	r0, r6
 8004ece:	f002 fde5 	bl	8007a9c <__aeabi_i2d>
 8004ed2:	4652      	mov	r2, sl
 8004ed4:	465b      	mov	r3, fp
 8004ed6:	f002 fe47 	bl	8007b68 <__aeabi_dmul>
 8004eda:	2300      	movs	r3, #0
 8004edc:	2200      	movs	r2, #0
 8004ede:	f2c4 031c 	movt	r3, #16412	; 0x401c
 8004ee2:	f002 fc8f 	bl	8007804 <__adddf3>
 8004ee6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8004ee8:	f1a1 7450 	sub.w	r4, r1, #54525952	; 0x3400000
 8004eec:	4680      	mov	r8, r0
 8004eee:	46a1      	mov	r9, r4
 8004ef0:	2d00      	cmp	r5, #0
 8004ef2:	f040 80ac 	bne.w	800504e <_dtoa_r+0xa86>
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f2c4 0314 	movt	r3, #16404	; 0x4014
 8004efe:	4650      	mov	r0, sl
 8004f00:	4659      	mov	r1, fp
 8004f02:	f002 fc7d 	bl	8007800 <__aeabi_dsub>
 8004f06:	4642      	mov	r2, r8
 8004f08:	4623      	mov	r3, r4
 8004f0a:	4682      	mov	sl, r0
 8004f0c:	468b      	mov	fp, r1
 8004f0e:	f003 f8bb 	bl	8008088 <__aeabi_dcmpgt>
 8004f12:	2800      	cmp	r0, #0
 8004f14:	f040 80c3 	bne.w	800509e <_dtoa_r+0xad6>
 8004f18:	4642      	mov	r2, r8
 8004f1a:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
 8004f1e:	4650      	mov	r0, sl
 8004f20:	4659      	mov	r1, fp
 8004f22:	f003 f893 	bl	800804c <__aeabi_dcmplt>
 8004f26:	2800      	cmp	r0, #0
 8004f28:	f000 8083 	beq.w	8005032 <_dtoa_r+0xa6a>
 8004f2c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8004f2e:	9606      	str	r6, [sp, #24]
 8004f30:	e666      	b.n	8004c00 <_dtoa_r+0x638>
 8004f32:	9812      	ldr	r0, [sp, #72]	; 0x48
 8004f34:	2800      	cmp	r0, #0
 8004f36:	f000 8147 	beq.w	80051c8 <_dtoa_r+0xc00>
 8004f3a:	2c00      	cmp	r4, #0
 8004f3c:	dd05      	ble.n	8004f4a <_dtoa_r+0x982>
 8004f3e:	4638      	mov	r0, r7
 8004f40:	9906      	ldr	r1, [sp, #24]
 8004f42:	4622      	mov	r2, r4
 8004f44:	f001 f8f8 	bl	8006138 <__lshift>
 8004f48:	9006      	str	r0, [sp, #24]
 8004f4a:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8004f4e:	2d00      	cmp	r5, #0
 8004f50:	f040 8201 	bne.w	8005356 <_dtoa_r+0xd8e>
 8004f54:	f00a 0001 	and.w	r0, sl, #1
 8004f58:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004f5a:	9c06      	ldr	r4, [sp, #24]
 8004f5c:	900b      	str	r0, [sp, #44]	; 0x2c
 8004f5e:	4631      	mov	r1, r6
 8004f60:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004f62:	f7ff faa1 	bl	80044a8 <quorem>
 8004f66:	4621      	mov	r1, r4
 8004f68:	9008      	str	r0, [sp, #32]
 8004f6a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004f6c:	f001 f944 	bl	80061f8 <__mcmp>
 8004f70:	4642      	mov	r2, r8
 8004f72:	4681      	mov	r9, r0
 8004f74:	4631      	mov	r1, r6
 8004f76:	4638      	mov	r0, r7
 8004f78:	f001 f95e 	bl	8006238 <__mdiff>
 8004f7c:	9a08      	ldr	r2, [sp, #32]
 8004f7e:	68c3      	ldr	r3, [r0, #12]
 8004f80:	3230      	adds	r2, #48	; 0x30
 8004f82:	4682      	mov	sl, r0
 8004f84:	9206      	str	r2, [sp, #24]
 8004f86:	f04f 0b01 	mov.w	fp, #1
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d03d      	beq.n	800500a <_dtoa_r+0xa42>
 8004f8e:	4638      	mov	r0, r7
 8004f90:	4651      	mov	r1, sl
 8004f92:	f000 fefd 	bl	8005d90 <_Bfree>
 8004f96:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004f98:	ea5b 0303 	orrs.w	r3, fp, r3
 8004f9c:	d103      	bne.n	8004fa6 <_dtoa_r+0x9de>
 8004f9e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004fa0:	2800      	cmp	r0, #0
 8004fa2:	f000 8211 	beq.w	80053c8 <_dtoa_r+0xe00>
 8004fa6:	f1b9 0f00 	cmp.w	r9, #0
 8004faa:	f2c0 819f 	blt.w	80052ec <_dtoa_r+0xd24>
 8004fae:	9826      	ldr	r0, [sp, #152]	; 0x98
 8004fb0:	ea59 0000 	orrs.w	r0, r9, r0
 8004fb4:	d103      	bne.n	8004fbe <_dtoa_r+0x9f6>
 8004fb6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004fb8:	2900      	cmp	r1, #0
 8004fba:	f000 8197 	beq.w	80052ec <_dtoa_r+0xd24>
 8004fbe:	f1bb 0f00 	cmp.w	fp, #0
 8004fc2:	f300 81ea 	bgt.w	800539a <_dtoa_r+0xdd2>
 8004fc6:	9a06      	ldr	r2, [sp, #24]
 8004fc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004fca:	f805 2b01 	strb.w	r2, [r5], #1
 8004fce:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004fd0:	1a2b      	subs	r3, r5, r0
 8004fd2:	428b      	cmp	r3, r1
 8004fd4:	46aa      	mov	sl, r5
 8004fd6:	f000 81db 	beq.w	8005390 <_dtoa_r+0xdc8>
 8004fda:	220a      	movs	r2, #10
 8004fdc:	2300      	movs	r3, #0
 8004fde:	4638      	mov	r0, r7
 8004fe0:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004fe2:	f000 fedf 	bl	8005da4 <__multadd>
 8004fe6:	4544      	cmp	r4, r8
 8004fe8:	900a      	str	r0, [sp, #40]	; 0x28
 8004fea:	d027      	beq.n	800503c <_dtoa_r+0xa74>
 8004fec:	4621      	mov	r1, r4
 8004fee:	220a      	movs	r2, #10
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	4638      	mov	r0, r7
 8004ff4:	f000 fed6 	bl	8005da4 <__multadd>
 8004ff8:	4641      	mov	r1, r8
 8004ffa:	4604      	mov	r4, r0
 8004ffc:	220a      	movs	r2, #10
 8004ffe:	4638      	mov	r0, r7
 8005000:	2300      	movs	r3, #0
 8005002:	f000 fecf 	bl	8005da4 <__multadd>
 8005006:	4680      	mov	r8, r0
 8005008:	e7a9      	b.n	8004f5e <_dtoa_r+0x996>
 800500a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800500c:	4651      	mov	r1, sl
 800500e:	f001 f8f3 	bl	80061f8 <__mcmp>
 8005012:	4683      	mov	fp, r0
 8005014:	e7bb      	b.n	8004f8e <_dtoa_r+0x9c6>
 8005016:	4638      	mov	r0, r7
 8005018:	4621      	mov	r1, r4
 800501a:	f000 feb9 	bl	8005d90 <_Bfree>
 800501e:	e587      	b.n	8004b30 <_dtoa_r+0x568>
 8005020:	231c      	movs	r3, #28
 8005022:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005024:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005026:	18c0      	adds	r0, r0, r3
 8005028:	18c9      	adds	r1, r1, r3
 800502a:	900f      	str	r0, [sp, #60]	; 0x3c
 800502c:	18e4      	adds	r4, r4, r3
 800502e:	910b      	str	r1, [sp, #44]	; 0x2c
 8005030:	e538      	b.n	8004aa4 <_dtoa_r+0x4dc>
 8005032:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005036:	4682      	mov	sl, r0
 8005038:	468b      	mov	fp, r1
 800503a:	e406      	b.n	800484a <_dtoa_r+0x282>
 800503c:	4621      	mov	r1, r4
 800503e:	4638      	mov	r0, r7
 8005040:	220a      	movs	r2, #10
 8005042:	2300      	movs	r3, #0
 8005044:	f000 feae 	bl	8005da4 <__multadd>
 8005048:	4604      	mov	r4, r0
 800504a:	4680      	mov	r8, r0
 800504c:	e787      	b.n	8004f5e <_dtoa_r+0x996>
 800504e:	9c05      	ldr	r4, [sp, #20]
 8005050:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8005052:	9417      	str	r4, [sp, #92]	; 0x5c
 8005054:	e672      	b.n	8004d3c <_dtoa_r+0x774>
 8005056:	9d05      	ldr	r5, [sp, #20]
 8005058:	426c      	negs	r4, r5
 800505a:	2c00      	cmp	r4, #0
 800505c:	f000 80fb 	beq.w	8005256 <_dtoa_r+0xc8e>
 8005060:	4ba0      	ldr	r3, [pc, #640]	; (80052e4 <_dtoa_r+0xd1c>)
 8005062:	f004 020f 	and.w	r2, r4, #15
 8005066:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800506a:	4650      	mov	r0, sl
 800506c:	4659      	mov	r1, fp
 800506e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005072:	f002 fd79 	bl	8007b68 <__aeabi_dmul>
 8005076:	1124      	asrs	r4, r4, #4
 8005078:	4682      	mov	sl, r0
 800507a:	468b      	mov	fp, r1
 800507c:	f000 80eb 	beq.w	8005256 <_dtoa_r+0xc8e>
 8005080:	4d99      	ldr	r5, [pc, #612]	; (80052e8 <_dtoa_r+0xd20>)
 8005082:	2602      	movs	r6, #2
 8005084:	07e2      	lsls	r2, r4, #31
 8005086:	d504      	bpl.n	8005092 <_dtoa_r+0xaca>
 8005088:	e9d5 2300 	ldrd	r2, r3, [r5]
 800508c:	f002 fd6c 	bl	8007b68 <__aeabi_dmul>
 8005090:	3601      	adds	r6, #1
 8005092:	3508      	adds	r5, #8
 8005094:	1064      	asrs	r4, r4, #1
 8005096:	d1f5      	bne.n	8005084 <_dtoa_r+0xabc>
 8005098:	4682      	mov	sl, r0
 800509a:	468b      	mov	fp, r1
 800509c:	e612      	b.n	8004cc4 <_dtoa_r+0x6fc>
 800509e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80050a0:	9606      	str	r6, [sp, #24]
 80050a2:	e530      	b.n	8004b06 <_dtoa_r+0x53e>
 80050a4:	498f      	ldr	r1, [pc, #572]	; (80052e4 <_dtoa_r+0xd1c>)
 80050a6:	1e6c      	subs	r4, r5, #1
 80050a8:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 80050ac:	4642      	mov	r2, r8
 80050ae:	464b      	mov	r3, r9
 80050b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80050b4:	9406      	str	r4, [sp, #24]
 80050b6:	f002 fd57 	bl	8007b68 <__aeabi_dmul>
 80050ba:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
 80050be:	4659      	mov	r1, fp
 80050c0:	4650      	mov	r0, sl
 80050c2:	f002 ffeb 	bl	800809c <__aeabi_d2iz>
 80050c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80050c8:	4604      	mov	r4, r0
 80050ca:	9111      	str	r1, [sp, #68]	; 0x44
 80050cc:	f002 fce6 	bl	8007a9c <__aeabi_i2d>
 80050d0:	460b      	mov	r3, r1
 80050d2:	4602      	mov	r2, r0
 80050d4:	4659      	mov	r1, fp
 80050d6:	4650      	mov	r0, sl
 80050d8:	f002 fb92 	bl	8007800 <__aeabi_dsub>
 80050dc:	f104 0330 	add.w	r3, r4, #48	; 0x30
 80050e0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80050e2:	f804 3b01 	strb.w	r3, [r4], #1
 80050e6:	2d01      	cmp	r5, #1
 80050e8:	4682      	mov	sl, r0
 80050ea:	468b      	mov	fp, r1
 80050ec:	9411      	str	r4, [sp, #68]	; 0x44
 80050ee:	46a0      	mov	r8, r4
 80050f0:	d020      	beq.n	8005134 <_dtoa_r+0xb6c>
 80050f2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80050f4:	1e66      	subs	r6, r4, #1
 80050f6:	1976      	adds	r6, r6, r5
 80050f8:	2300      	movs	r3, #0
 80050fa:	2200      	movs	r2, #0
 80050fc:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8005100:	f002 fd32 	bl	8007b68 <__aeabi_dmul>
 8005104:	4689      	mov	r9, r1
 8005106:	4680      	mov	r8, r0
 8005108:	f002 ffc8 	bl	800809c <__aeabi_d2iz>
 800510c:	4605      	mov	r5, r0
 800510e:	f002 fcc5 	bl	8007a9c <__aeabi_i2d>
 8005112:	3530      	adds	r5, #48	; 0x30
 8005114:	4602      	mov	r2, r0
 8005116:	460b      	mov	r3, r1
 8005118:	4640      	mov	r0, r8
 800511a:	4649      	mov	r1, r9
 800511c:	f002 fb70 	bl	8007800 <__aeabi_dsub>
 8005120:	f804 5f01 	strb.w	r5, [r4, #1]!
 8005124:	42b4      	cmp	r4, r6
 8005126:	d1e7      	bne.n	80050f8 <_dtoa_r+0xb30>
 8005128:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800512a:	9c06      	ldr	r4, [sp, #24]
 800512c:	4682      	mov	sl, r0
 800512e:	468b      	mov	fp, r1
 8005130:	eb05 0804 	add.w	r8, r5, r4
 8005134:	2300      	movs	r3, #0
 8005136:	2200      	movs	r2, #0
 8005138:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
 800513c:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 8005140:	f002 fb60 	bl	8007804 <__adddf3>
 8005144:	4602      	mov	r2, r0
 8005146:	460b      	mov	r3, r1
 8005148:	4650      	mov	r0, sl
 800514a:	4659      	mov	r1, fp
 800514c:	f002 ff9c 	bl	8008088 <__aeabi_dcmpgt>
 8005150:	2800      	cmp	r0, #0
 8005152:	f000 808a 	beq.w	800526a <_dtoa_r+0xca2>
 8005156:	f818 6c01 	ldrb.w	r6, [r8, #-1]
 800515a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800515c:	e422      	b.n	80049a4 <_dtoa_r+0x3dc>
 800515e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005160:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8005164:	e4e8      	b.n	8004b38 <_dtoa_r+0x570>
 8005166:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005168:	4631      	mov	r1, r6
 800516a:	f001 f845 	bl	80061f8 <__mcmp>
 800516e:	2800      	cmp	r0, #0
 8005170:	f6bf acad 	bge.w	8004ace <_dtoa_r+0x506>
 8005174:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005176:	220a      	movs	r2, #10
 8005178:	4638      	mov	r0, r7
 800517a:	2300      	movs	r3, #0
 800517c:	f000 fe12 	bl	8005da4 <__multadd>
 8005180:	9905      	ldr	r1, [sp, #20]
 8005182:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005184:	900a      	str	r0, [sp, #40]	; 0x28
 8005186:	3901      	subs	r1, #1
 8005188:	9105      	str	r1, [sp, #20]
 800518a:	2a00      	cmp	r2, #0
 800518c:	f040 8136 	bne.w	80053fc <_dtoa_r+0xe34>
 8005190:	9815      	ldr	r0, [sp, #84]	; 0x54
 8005192:	900e      	str	r0, [sp, #56]	; 0x38
 8005194:	e49b      	b.n	8004ace <_dtoa_r+0x506>
 8005196:	6933      	ldr	r3, [r6, #16]
 8005198:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800519c:	6918      	ldr	r0, [r3, #16]
 800519e:	f000 fe91 	bl	8005ec4 <__hi0bits>
 80051a2:	f1c0 0320 	rsb	r3, r0, #32
 80051a6:	e46a      	b.n	8004a7e <_dtoa_r+0x4b6>
 80051a8:	f1b9 0f0e 	cmp.w	r9, #14
 80051ac:	bf8c      	ite	hi
 80051ae:	2300      	movhi	r3, #0
 80051b0:	2301      	movls	r3, #1
 80051b2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80051b6:	2100      	movs	r1, #0
 80051b8:	6479      	str	r1, [r7, #68]	; 0x44
 80051ba:	401c      	ands	r4, r3
 80051bc:	e543      	b.n	8004c46 <_dtoa_r+0x67e>
 80051be:	2301      	movs	r3, #1
 80051c0:	9315      	str	r3, [sp, #84]	; 0x54
 80051c2:	930e      	str	r3, [sp, #56]	; 0x38
 80051c4:	9327      	str	r3, [sp, #156]	; 0x9c
 80051c6:	e7f6      	b.n	80051b6 <_dtoa_r+0xbee>
 80051c8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80051ca:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 80051ce:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80051d2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80051d4:	e006      	b.n	80051e4 <_dtoa_r+0xc1c>
 80051d6:	4651      	mov	r1, sl
 80051d8:	4638      	mov	r0, r7
 80051da:	220a      	movs	r2, #10
 80051dc:	2300      	movs	r3, #0
 80051de:	f000 fde1 	bl	8005da4 <__multadd>
 80051e2:	4682      	mov	sl, r0
 80051e4:	4631      	mov	r1, r6
 80051e6:	4650      	mov	r0, sl
 80051e8:	f7ff f95e 	bl	80044a8 <quorem>
 80051ec:	3030      	adds	r0, #48	; 0x30
 80051ee:	5528      	strb	r0, [r5, r4]
 80051f0:	3401      	adds	r4, #1
 80051f2:	45a0      	cmp	r8, r4
 80051f4:	dcef      	bgt.n	80051d6 <_dtoa_r+0xc0e>
 80051f6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80051f8:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 80051fc:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8005200:	4681      	mov	r9, r0
 8005202:	2c01      	cmp	r4, #1
 8005204:	bfac      	ite	ge
 8005206:	44a2      	addge	sl, r4
 8005208:	f10a 0a01 	addlt.w	sl, sl, #1
 800520c:	2400      	movs	r4, #0
 800520e:	2201      	movs	r2, #1
 8005210:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005212:	4638      	mov	r0, r7
 8005214:	f000 ff90 	bl	8006138 <__lshift>
 8005218:	4631      	mov	r1, r6
 800521a:	900a      	str	r0, [sp, #40]	; 0x28
 800521c:	f000 ffec 	bl	80061f8 <__mcmp>
 8005220:	2800      	cmp	r0, #0
 8005222:	f340 8082 	ble.w	800532a <_dtoa_r+0xd62>
 8005226:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
 800522a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800522c:	1c6a      	adds	r2, r5, #1
 800522e:	e003      	b.n	8005238 <_dtoa_r+0xc70>
 8005230:	f81a 3c02 	ldrb.w	r3, [sl, #-2]
 8005234:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005238:	2b39      	cmp	r3, #57	; 0x39
 800523a:	f040 8084 	bne.w	8005346 <_dtoa_r+0xd7e>
 800523e:	4592      	cmp	sl, r2
 8005240:	d1f6      	bne.n	8005230 <_dtoa_r+0xc68>
 8005242:	9805      	ldr	r0, [sp, #20]
 8005244:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005246:	3001      	adds	r0, #1
 8005248:	2331      	movs	r3, #49	; 0x31
 800524a:	9005      	str	r0, [sp, #20]
 800524c:	f80a 3c01 	strb.w	r3, [sl, #-1]
 8005250:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8005254:	e461      	b.n	8004b1a <_dtoa_r+0x552>
 8005256:	2602      	movs	r6, #2
 8005258:	e534      	b.n	8004cc4 <_dtoa_r+0x6fc>
 800525a:	4638      	mov	r0, r7
 800525c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800525e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005260:	f000 ff1e 	bl	80060a0 <__pow5mult>
 8005264:	900a      	str	r0, [sp, #40]	; 0x28
 8005266:	f7ff bbf2 	b.w	8004a4e <_dtoa_r+0x486>
 800526a:	2100      	movs	r1, #0
 800526c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8005270:	2000      	movs	r0, #0
 8005272:	f6c3 71e0 	movt	r1, #16352	; 0x3fe0
 8005276:	f002 fac3 	bl	8007800 <__aeabi_dsub>
 800527a:	4602      	mov	r2, r0
 800527c:	460b      	mov	r3, r1
 800527e:	4650      	mov	r0, sl
 8005280:	4659      	mov	r1, fp
 8005282:	f002 fee3 	bl	800804c <__aeabi_dcmplt>
 8005286:	2800      	cmp	r0, #0
 8005288:	f43f aed3 	beq.w	8005032 <_dtoa_r+0xa6a>
 800528c:	4642      	mov	r2, r8
 800528e:	f818 3d01 	ldrb.w	r3, [r8, #-1]!
 8005292:	2b30      	cmp	r3, #48	; 0x30
 8005294:	d0fa      	beq.n	800528c <_dtoa_r+0xcc4>
 8005296:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8005298:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800529a:	9405      	str	r4, [sp, #20]
 800529c:	9209      	str	r2, [sp, #36]	; 0x24
 800529e:	e44b      	b.n	8004b38 <_dtoa_r+0x570>
 80052a0:	4638      	mov	r0, r7
 80052a2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80052a4:	f000 fefc 	bl	80060a0 <__pow5mult>
 80052a8:	900a      	str	r0, [sp, #40]	; 0x28
 80052aa:	f7ff bbd0 	b.w	8004a4e <_dtoa_r+0x486>
 80052ae:	2600      	movs	r6, #0
 80052b0:	9606      	str	r6, [sp, #24]
 80052b2:	e4a5      	b.n	8004c00 <_dtoa_r+0x638>
 80052b4:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80052b6:	2d00      	cmp	r5, #0
 80052b8:	d064      	beq.n	8005384 <_dtoa_r+0xdbc>
 80052ba:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80052be:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80052c0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80052c2:	e47d      	b.n	8004bc0 <_dtoa_r+0x5f8>
 80052c4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80052c6:	f7ff bb6d 	b.w	80049a4 <_dtoa_r+0x3dc>
 80052ca:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80052cc:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 80052d0:	1c72      	adds	r2, r6, #1
 80052d2:	b2d2      	uxtb	r2, r2
 80052d4:	9405      	str	r4, [sp, #20]
 80052d6:	f7ff bb7b 	b.w	80049d0 <_dtoa_r+0x408>
 80052da:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80052dc:	2300      	movs	r3, #0
 80052de:	1b04      	subs	r4, r0, r4
 80052e0:	e46e      	b.n	8004bc0 <_dtoa_r+0x5f8>
 80052e2:	bf00      	nop
 80052e4:	080083c0 	.word	0x080083c0
 80052e8:	080084b0 	.word	0x080084b0
 80052ec:	f1bb 0f00 	cmp.w	fp, #0
 80052f0:	f8dd 9018 	ldr.w	r9, [sp, #24]
 80052f4:	dd10      	ble.n	8005318 <_dtoa_r+0xd50>
 80052f6:	2201      	movs	r2, #1
 80052f8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80052fa:	4638      	mov	r0, r7
 80052fc:	f000 ff1c 	bl	8006138 <__lshift>
 8005300:	4631      	mov	r1, r6
 8005302:	900a      	str	r0, [sp, #40]	; 0x28
 8005304:	f000 ff78 	bl	80061f8 <__mcmp>
 8005308:	2800      	cmp	r0, #0
 800530a:	dd6b      	ble.n	80053e4 <_dtoa_r+0xe1c>
 800530c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005310:	d053      	beq.n	80053ba <_dtoa_r+0xdf2>
 8005312:	9b08      	ldr	r3, [sp, #32]
 8005314:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8005318:	462b      	mov	r3, r5
 800531a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800531c:	f803 9b01 	strb.w	r9, [r3], #1
 8005320:	f8cd 8018 	str.w	r8, [sp, #24]
 8005324:	9309      	str	r3, [sp, #36]	; 0x24
 8005326:	f7ff bbf8 	b.w	8004b1a <_dtoa_r+0x552>
 800532a:	d103      	bne.n	8005334 <_dtoa_r+0xd6c>
 800532c:	f019 0f01 	tst.w	r9, #1
 8005330:	f47f af79 	bne.w	8005226 <_dtoa_r+0xc5e>
 8005334:	4652      	mov	r2, sl
 8005336:	f81a 3d01 	ldrb.w	r3, [sl, #-1]!
 800533a:	2b30      	cmp	r3, #48	; 0x30
 800533c:	d0fa      	beq.n	8005334 <_dtoa_r+0xd6c>
 800533e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005340:	9209      	str	r2, [sp, #36]	; 0x24
 8005342:	f7ff bbea 	b.w	8004b1a <_dtoa_r+0x552>
 8005346:	3301      	adds	r3, #1
 8005348:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800534a:	f80a 3c01 	strb.w	r3, [sl, #-1]
 800534e:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8005352:	f7ff bbe2 	b.w	8004b1a <_dtoa_r+0x552>
 8005356:	9c06      	ldr	r4, [sp, #24]
 8005358:	4638      	mov	r0, r7
 800535a:	6861      	ldr	r1, [r4, #4]
 800535c:	f000 fcf2 	bl	8005d44 <_Balloc>
 8005360:	9d06      	ldr	r5, [sp, #24]
 8005362:	692a      	ldr	r2, [r5, #16]
 8005364:	3202      	adds	r2, #2
 8005366:	4604      	mov	r4, r0
 8005368:	0092      	lsls	r2, r2, #2
 800536a:	f105 010c 	add.w	r1, r5, #12
 800536e:	f100 000c 	add.w	r0, r0, #12
 8005372:	f000 fc9f 	bl	8005cb4 <memcpy>
 8005376:	4638      	mov	r0, r7
 8005378:	4621      	mov	r1, r4
 800537a:	2201      	movs	r2, #1
 800537c:	f000 fedc 	bl	8006138 <__lshift>
 8005380:	4680      	mov	r8, r0
 8005382:	e5e7      	b.n	8004f54 <_dtoa_r+0x98c>
 8005384:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8005386:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005388:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800538a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800538e:	e417      	b.n	8004bc0 <_dtoa_r+0x5f8>
 8005390:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8005394:	f8cd 8018 	str.w	r8, [sp, #24]
 8005398:	e739      	b.n	800520e <_dtoa_r+0xc46>
 800539a:	f8dd 9018 	ldr.w	r9, [sp, #24]
 800539e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80053a2:	d00a      	beq.n	80053ba <_dtoa_r+0xdf2>
 80053a4:	462b      	mov	r3, r5
 80053a6:	f109 0901 	add.w	r9, r9, #1
 80053aa:	f803 9b01 	strb.w	r9, [r3], #1
 80053ae:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80053b0:	f8cd 8018 	str.w	r8, [sp, #24]
 80053b4:	9309      	str	r3, [sp, #36]	; 0x24
 80053b6:	f7ff bbb0 	b.w	8004b1a <_dtoa_r+0x552>
 80053ba:	46aa      	mov	sl, r5
 80053bc:	2339      	movs	r3, #57	; 0x39
 80053be:	f80a 3b01 	strb.w	r3, [sl], #1
 80053c2:	f8cd 8018 	str.w	r8, [sp, #24]
 80053c6:	e730      	b.n	800522a <_dtoa_r+0xc62>
 80053c8:	464b      	mov	r3, r9
 80053ca:	f8dd 9018 	ldr.w	r9, [sp, #24]
 80053ce:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80053d2:	d0f2      	beq.n	80053ba <_dtoa_r+0xdf2>
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	dc9c      	bgt.n	8005312 <_dtoa_r+0xd4a>
 80053d8:	e79e      	b.n	8005318 <_dtoa_r+0xd50>
 80053da:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80053dc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80053de:	9409      	str	r4, [sp, #36]	; 0x24
 80053e0:	f7ff bbaa 	b.w	8004b38 <_dtoa_r+0x570>
 80053e4:	d198      	bne.n	8005318 <_dtoa_r+0xd50>
 80053e6:	f019 0f01 	tst.w	r9, #1
 80053ea:	d095      	beq.n	8005318 <_dtoa_r+0xd50>
 80053ec:	e78e      	b.n	800530c <_dtoa_r+0xd44>
 80053ee:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80053f0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80053f2:	9405      	str	r4, [sp, #20]
 80053f4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80053f6:	9409      	str	r4, [sp, #36]	; 0x24
 80053f8:	f7ff bb9e 	b.w	8004b38 <_dtoa_r+0x570>
 80053fc:	2300      	movs	r3, #0
 80053fe:	4638      	mov	r0, r7
 8005400:	9906      	ldr	r1, [sp, #24]
 8005402:	220a      	movs	r2, #10
 8005404:	f000 fcce 	bl	8005da4 <__multadd>
 8005408:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800540a:	9006      	str	r0, [sp, #24]
 800540c:	930e      	str	r3, [sp, #56]	; 0x38
 800540e:	f7ff bb5e 	b.w	8004ace <_dtoa_r+0x506>
 8005412:	f43f ab47 	beq.w	8004aa4 <_dtoa_r+0x4dc>
 8005416:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
 800541a:	e602      	b.n	8005022 <_dtoa_r+0xa5a>
 800541c:	f3af 8000 	nop.w

08005420 <_malloc_trim_r>:
 8005420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005422:	4d22      	ldr	r5, [pc, #136]	; (80054ac <_malloc_trim_r+0x8c>)
 8005424:	460f      	mov	r7, r1
 8005426:	4604      	mov	r4, r0
 8005428:	f000 fc88 	bl	8005d3c <__malloc_lock>
 800542c:	68ab      	ldr	r3, [r5, #8]
 800542e:	685e      	ldr	r6, [r3, #4]
 8005430:	f026 0603 	bic.w	r6, r6, #3
 8005434:	f606 73ef 	addw	r3, r6, #4079	; 0xfef
 8005438:	1bdf      	subs	r7, r3, r7
 800543a:	0b3f      	lsrs	r7, r7, #12
 800543c:	3f01      	subs	r7, #1
 800543e:	033f      	lsls	r7, r7, #12
 8005440:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
 8005444:	4620      	mov	r0, r4
 8005446:	db07      	blt.n	8005458 <_malloc_trim_r+0x38>
 8005448:	2100      	movs	r1, #0
 800544a:	f001 f907 	bl	800665c <_sbrk_r>
 800544e:	68ab      	ldr	r3, [r5, #8]
 8005450:	199b      	adds	r3, r3, r6
 8005452:	4298      	cmp	r0, r3
 8005454:	4620      	mov	r0, r4
 8005456:	d003      	beq.n	8005460 <_malloc_trim_r+0x40>
 8005458:	f000 fc72 	bl	8005d40 <__malloc_unlock>
 800545c:	2000      	movs	r0, #0
 800545e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005460:	4279      	negs	r1, r7
 8005462:	f001 f8fb 	bl	800665c <_sbrk_r>
 8005466:	3001      	adds	r0, #1
 8005468:	d00d      	beq.n	8005486 <_malloc_trim_r+0x66>
 800546a:	4b11      	ldr	r3, [pc, #68]	; (80054b0 <_malloc_trim_r+0x90>)
 800546c:	68aa      	ldr	r2, [r5, #8]
 800546e:	6819      	ldr	r1, [r3, #0]
 8005470:	1bf6      	subs	r6, r6, r7
 8005472:	f046 0601 	orr.w	r6, r6, #1
 8005476:	1bcf      	subs	r7, r1, r7
 8005478:	4620      	mov	r0, r4
 800547a:	6056      	str	r6, [r2, #4]
 800547c:	601f      	str	r7, [r3, #0]
 800547e:	f000 fc5f 	bl	8005d40 <__malloc_unlock>
 8005482:	2001      	movs	r0, #1
 8005484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005486:	2100      	movs	r1, #0
 8005488:	4620      	mov	r0, r4
 800548a:	f001 f8e7 	bl	800665c <_sbrk_r>
 800548e:	68ab      	ldr	r3, [r5, #8]
 8005490:	1ac2      	subs	r2, r0, r3
 8005492:	2a0f      	cmp	r2, #15
 8005494:	dd07      	ble.n	80054a6 <_malloc_trim_r+0x86>
 8005496:	4907      	ldr	r1, [pc, #28]	; (80054b4 <_malloc_trim_r+0x94>)
 8005498:	6809      	ldr	r1, [r1, #0]
 800549a:	1a40      	subs	r0, r0, r1
 800549c:	4904      	ldr	r1, [pc, #16]	; (80054b0 <_malloc_trim_r+0x90>)
 800549e:	f042 0201 	orr.w	r2, r2, #1
 80054a2:	6008      	str	r0, [r1, #0]
 80054a4:	605a      	str	r2, [r3, #4]
 80054a6:	4620      	mov	r0, r4
 80054a8:	e7d6      	b.n	8005458 <_malloc_trim_r+0x38>
 80054aa:	bf00      	nop
 80054ac:	2000059c 	.word	0x2000059c
 80054b0:	200009c8 	.word	0x200009c8
 80054b4:	200009a4 	.word	0x200009a4

080054b8 <_free_r>:
 80054b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054bc:	460d      	mov	r5, r1
 80054be:	4604      	mov	r4, r0
 80054c0:	2900      	cmp	r1, #0
 80054c2:	d06f      	beq.n	80055a4 <_free_r+0xec>
 80054c4:	f000 fc3a 	bl	8005d3c <__malloc_lock>
 80054c8:	f855 0c04 	ldr.w	r0, [r5, #-4]
 80054cc:	4e58      	ldr	r6, [pc, #352]	; (8005630 <_free_r+0x178>)
 80054ce:	f1a5 0108 	sub.w	r1, r5, #8
 80054d2:	f020 0301 	bic.w	r3, r0, #1
 80054d6:	18ca      	adds	r2, r1, r3
 80054d8:	f8d6 c008 	ldr.w	ip, [r6, #8]
 80054dc:	6857      	ldr	r7, [r2, #4]
 80054de:	4594      	cmp	ip, r2
 80054e0:	f027 0703 	bic.w	r7, r7, #3
 80054e4:	d07c      	beq.n	80055e0 <_free_r+0x128>
 80054e6:	f010 0001 	ands.w	r0, r0, #1
 80054ea:	6057      	str	r7, [r2, #4]
 80054ec:	d049      	beq.n	8005582 <_free_r+0xca>
 80054ee:	2000      	movs	r0, #0
 80054f0:	19d5      	adds	r5, r2, r7
 80054f2:	686d      	ldr	r5, [r5, #4]
 80054f4:	f015 0f01 	tst.w	r5, #1
 80054f8:	d106      	bne.n	8005508 <_free_r+0x50>
 80054fa:	19db      	adds	r3, r3, r7
 80054fc:	6895      	ldr	r5, [r2, #8]
 80054fe:	2800      	cmp	r0, #0
 8005500:	d062      	beq.n	80055c8 <_free_r+0x110>
 8005502:	68d2      	ldr	r2, [r2, #12]
 8005504:	60ea      	str	r2, [r5, #12]
 8005506:	6095      	str	r5, [r2, #8]
 8005508:	f043 0201 	orr.w	r2, r3, #1
 800550c:	604a      	str	r2, [r1, #4]
 800550e:	50cb      	str	r3, [r1, r3]
 8005510:	bb90      	cbnz	r0, 8005578 <_free_r+0xc0>
 8005512:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005516:	d347      	bcc.n	80055a8 <_free_r+0xf0>
 8005518:	099d      	lsrs	r5, r3, #6
 800551a:	3538      	adds	r5, #56	; 0x38
 800551c:	0a5a      	lsrs	r2, r3, #9
 800551e:	00e8      	lsls	r0, r5, #3
 8005520:	2a04      	cmp	r2, #4
 8005522:	d916      	bls.n	8005552 <_free_r+0x9a>
 8005524:	f102 055b 	add.w	r5, r2, #91	; 0x5b
 8005528:	00e8      	lsls	r0, r5, #3
 800552a:	2a14      	cmp	r2, #20
 800552c:	d911      	bls.n	8005552 <_free_r+0x9a>
 800552e:	0b1d      	lsrs	r5, r3, #12
 8005530:	356e      	adds	r5, #110	; 0x6e
 8005532:	00e8      	lsls	r0, r5, #3
 8005534:	2a54      	cmp	r2, #84	; 0x54
 8005536:	d90c      	bls.n	8005552 <_free_r+0x9a>
 8005538:	0bdd      	lsrs	r5, r3, #15
 800553a:	3577      	adds	r5, #119	; 0x77
 800553c:	00e8      	lsls	r0, r5, #3
 800553e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8005542:	d906      	bls.n	8005552 <_free_r+0x9a>
 8005544:	f240 5054 	movw	r0, #1364	; 0x554
 8005548:	4282      	cmp	r2, r0
 800554a:	d86d      	bhi.n	8005628 <_free_r+0x170>
 800554c:	0c9d      	lsrs	r5, r3, #18
 800554e:	357c      	adds	r5, #124	; 0x7c
 8005550:	00e8      	lsls	r0, r5, #3
 8005552:	1986      	adds	r6, r0, r6
 8005554:	4836      	ldr	r0, [pc, #216]	; (8005630 <_free_r+0x178>)
 8005556:	68b2      	ldr	r2, [r6, #8]
 8005558:	42b2      	cmp	r2, r6
 800555a:	d103      	bne.n	8005564 <_free_r+0xac>
 800555c:	e05b      	b.n	8005616 <_free_r+0x15e>
 800555e:	6892      	ldr	r2, [r2, #8]
 8005560:	4296      	cmp	r6, r2
 8005562:	d004      	beq.n	800556e <_free_r+0xb6>
 8005564:	6850      	ldr	r0, [r2, #4]
 8005566:	f020 0003 	bic.w	r0, r0, #3
 800556a:	4283      	cmp	r3, r0
 800556c:	d3f7      	bcc.n	800555e <_free_r+0xa6>
 800556e:	68d3      	ldr	r3, [r2, #12]
 8005570:	60cb      	str	r3, [r1, #12]
 8005572:	608a      	str	r2, [r1, #8]
 8005574:	60d1      	str	r1, [r2, #12]
 8005576:	6099      	str	r1, [r3, #8]
 8005578:	4620      	mov	r0, r4
 800557a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800557e:	f000 bbdf 	b.w	8005d40 <__malloc_unlock>
 8005582:	f855 cc08 	ldr.w	ip, [r5, #-8]
 8005586:	ebcc 0101 	rsb	r1, ip, r1
 800558a:	f106 0808 	add.w	r8, r6, #8
 800558e:	688d      	ldr	r5, [r1, #8]
 8005590:	4545      	cmp	r5, r8
 8005592:	4463      	add	r3, ip
 8005594:	d03d      	beq.n	8005612 <_free_r+0x15a>
 8005596:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 800559a:	f8c5 c00c 	str.w	ip, [r5, #12]
 800559e:	f8cc 5008 	str.w	r5, [ip, #8]
 80055a2:	e7a5      	b.n	80054f0 <_free_r+0x38>
 80055a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055a8:	08db      	lsrs	r3, r3, #3
 80055aa:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 80055ae:	6875      	ldr	r5, [r6, #4]
 80055b0:	6890      	ldr	r0, [r2, #8]
 80055b2:	60ca      	str	r2, [r1, #12]
 80055b4:	109b      	asrs	r3, r3, #2
 80055b6:	2701      	movs	r7, #1
 80055b8:	fa17 f303 	lsls.w	r3, r7, r3
 80055bc:	432b      	orrs	r3, r5
 80055be:	6088      	str	r0, [r1, #8]
 80055c0:	6073      	str	r3, [r6, #4]
 80055c2:	6091      	str	r1, [r2, #8]
 80055c4:	60c1      	str	r1, [r0, #12]
 80055c6:	e7d7      	b.n	8005578 <_free_r+0xc0>
 80055c8:	4f1a      	ldr	r7, [pc, #104]	; (8005634 <_free_r+0x17c>)
 80055ca:	42bd      	cmp	r5, r7
 80055cc:	d199      	bne.n	8005502 <_free_r+0x4a>
 80055ce:	f043 0201 	orr.w	r2, r3, #1
 80055d2:	6171      	str	r1, [r6, #20]
 80055d4:	6131      	str	r1, [r6, #16]
 80055d6:	60cd      	str	r5, [r1, #12]
 80055d8:	608d      	str	r5, [r1, #8]
 80055da:	604a      	str	r2, [r1, #4]
 80055dc:	50cb      	str	r3, [r1, r3]
 80055de:	e7cb      	b.n	8005578 <_free_r+0xc0>
 80055e0:	07c2      	lsls	r2, r0, #31
 80055e2:	443b      	add	r3, r7
 80055e4:	d407      	bmi.n	80055f6 <_free_r+0x13e>
 80055e6:	f855 2c08 	ldr.w	r2, [r5, #-8]
 80055ea:	1a89      	subs	r1, r1, r2
 80055ec:	189b      	adds	r3, r3, r2
 80055ee:	6888      	ldr	r0, [r1, #8]
 80055f0:	68ca      	ldr	r2, [r1, #12]
 80055f2:	60c2      	str	r2, [r0, #12]
 80055f4:	6090      	str	r0, [r2, #8]
 80055f6:	4a10      	ldr	r2, [pc, #64]	; (8005638 <_free_r+0x180>)
 80055f8:	60b1      	str	r1, [r6, #8]
 80055fa:	6812      	ldr	r2, [r2, #0]
 80055fc:	f043 0001 	orr.w	r0, r3, #1
 8005600:	4293      	cmp	r3, r2
 8005602:	6048      	str	r0, [r1, #4]
 8005604:	d3b8      	bcc.n	8005578 <_free_r+0xc0>
 8005606:	4b0d      	ldr	r3, [pc, #52]	; (800563c <_free_r+0x184>)
 8005608:	4620      	mov	r0, r4
 800560a:	6819      	ldr	r1, [r3, #0]
 800560c:	f7ff ff08 	bl	8005420 <_malloc_trim_r>
 8005610:	e7b2      	b.n	8005578 <_free_r+0xc0>
 8005612:	2001      	movs	r0, #1
 8005614:	e76c      	b.n	80054f0 <_free_r+0x38>
 8005616:	6843      	ldr	r3, [r0, #4]
 8005618:	10ad      	asrs	r5, r5, #2
 800561a:	2601      	movs	r6, #1
 800561c:	fa16 f505 	lsls.w	r5, r6, r5
 8005620:	432b      	orrs	r3, r5
 8005622:	6043      	str	r3, [r0, #4]
 8005624:	4613      	mov	r3, r2
 8005626:	e7a3      	b.n	8005570 <_free_r+0xb8>
 8005628:	f44f 707c 	mov.w	r0, #1008	; 0x3f0
 800562c:	257e      	movs	r5, #126	; 0x7e
 800562e:	e790      	b.n	8005552 <_free_r+0x9a>
 8005630:	2000059c 	.word	0x2000059c
 8005634:	200005a4 	.word	0x200005a4
 8005638:	200009a8 	.word	0x200009a8
 800563c:	200009c4 	.word	0x200009c4

08005640 <_setlocale_r>:
 8005640:	b510      	push	{r4, lr}
 8005642:	4614      	mov	r4, r2
 8005644:	b122      	cbz	r2, 8005650 <_setlocale_r+0x10>
 8005646:	4610      	mov	r0, r2
 8005648:	490b      	ldr	r1, [pc, #44]	; (8005678 <_setlocale_r+0x38>)
 800564a:	f001 f819 	bl	8006680 <strcmp>
 800564e:	b908      	cbnz	r0, 8005654 <_setlocale_r+0x14>
 8005650:	480a      	ldr	r0, [pc, #40]	; (800567c <_setlocale_r+0x3c>)
 8005652:	bd10      	pop	{r4, pc}
 8005654:	4620      	mov	r0, r4
 8005656:	4909      	ldr	r1, [pc, #36]	; (800567c <_setlocale_r+0x3c>)
 8005658:	f001 f812 	bl	8006680 <strcmp>
 800565c:	b908      	cbnz	r0, 8005662 <_setlocale_r+0x22>
 800565e:	4807      	ldr	r0, [pc, #28]	; (800567c <_setlocale_r+0x3c>)
 8005660:	bd10      	pop	{r4, pc}
 8005662:	4620      	mov	r0, r4
 8005664:	4906      	ldr	r1, [pc, #24]	; (8005680 <_setlocale_r+0x40>)
 8005666:	f001 f80b 	bl	8006680 <strcmp>
 800566a:	4b04      	ldr	r3, [pc, #16]	; (800567c <_setlocale_r+0x3c>)
 800566c:	2800      	cmp	r0, #0
 800566e:	bf0c      	ite	eq
 8005670:	4618      	moveq	r0, r3
 8005672:	2000      	movne	r0, #0
 8005674:	bd10      	pop	{r4, pc}
 8005676:	bf00      	nop
 8005678:	080085c4 	.word	0x080085c4
 800567c:	080085c0 	.word	0x080085c0
 8005680:	0800858c 	.word	0x0800858c

08005684 <__locale_charset>:
 8005684:	f240 5020 	movw	r0, #1312	; 0x520
 8005688:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800568c:	4770      	bx	lr
 800568e:	bf00      	nop

08005690 <__locale_mb_cur_max>:
 8005690:	f240 5320 	movw	r3, #1312	; 0x520
 8005694:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005698:	6a18      	ldr	r0, [r3, #32]
 800569a:	4770      	bx	lr

0800569c <__locale_msgcharset>:
 800569c:	4800      	ldr	r0, [pc, #0]	; (80056a0 <__locale_msgcharset+0x4>)
 800569e:	4770      	bx	lr
 80056a0:	20000544 	.word	0x20000544

080056a4 <__locale_cjk_lang>:
 80056a4:	2000      	movs	r0, #0
 80056a6:	4770      	bx	lr

080056a8 <_localeconv_r>:
 80056a8:	4800      	ldr	r0, [pc, #0]	; (80056ac <_localeconv_r+0x4>)
 80056aa:	4770      	bx	lr
 80056ac:	20000564 	.word	0x20000564

080056b0 <setlocale>:
 80056b0:	b410      	push	{r4}
 80056b2:	f240 03f0 	movw	r3, #240	; 0xf0
 80056b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80056ba:	4604      	mov	r4, r0
 80056bc:	6818      	ldr	r0, [r3, #0]
 80056be:	460a      	mov	r2, r1
 80056c0:	4621      	mov	r1, r4
 80056c2:	bc10      	pop	{r4}
 80056c4:	e7bc      	b.n	8005640 <_setlocale_r>
 80056c6:	bf00      	nop

080056c8 <localeconv>:
 80056c8:	4800      	ldr	r0, [pc, #0]	; (80056cc <localeconv+0x4>)
 80056ca:	4770      	bx	lr
 80056cc:	20000564 	.word	0x20000564

080056d0 <_malloc_r>:
 80056d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056d4:	f101 040b 	add.w	r4, r1, #11
 80056d8:	2c16      	cmp	r4, #22
 80056da:	4605      	mov	r5, r0
 80056dc:	d92a      	bls.n	8005734 <_malloc_r+0x64>
 80056de:	f024 0407 	bic.w	r4, r4, #7
 80056e2:	0fe3      	lsrs	r3, r4, #31
 80056e4:	428c      	cmp	r4, r1
 80056e6:	bf2c      	ite	cs
 80056e8:	4619      	movcs	r1, r3
 80056ea:	f043 0101 	orrcc.w	r1, r3, #1
 80056ee:	bb51      	cbnz	r1, 8005746 <_malloc_r+0x76>
 80056f0:	4628      	mov	r0, r5
 80056f2:	f000 fb23 	bl	8005d3c <__malloc_lock>
 80056f6:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 80056fa:	d22a      	bcs.n	8005752 <_malloc_r+0x82>
 80056fc:	4e7d      	ldr	r6, [pc, #500]	; (80058f4 <_malloc_r+0x224>)
 80056fe:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
 8005702:	eb06 03ce 	add.w	r3, r6, lr, lsl #3
 8005706:	68df      	ldr	r7, [r3, #12]
 8005708:	429f      	cmp	r7, r3
 800570a:	f000 8235 	beq.w	8005b78 <_malloc_r+0x4a8>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	68fa      	ldr	r2, [r7, #12]
 8005712:	68b9      	ldr	r1, [r7, #8]
 8005714:	f023 0303 	bic.w	r3, r3, #3
 8005718:	18fb      	adds	r3, r7, r3
 800571a:	60ca      	str	r2, [r1, #12]
 800571c:	6858      	ldr	r0, [r3, #4]
 800571e:	6091      	str	r1, [r2, #8]
 8005720:	f040 0201 	orr.w	r2, r0, #1
 8005724:	605a      	str	r2, [r3, #4]
 8005726:	4628      	mov	r0, r5
 8005728:	f000 fb0a 	bl	8005d40 <__malloc_unlock>
 800572c:	3708      	adds	r7, #8
 800572e:	4638      	mov	r0, r7
 8005730:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005734:	2300      	movs	r3, #0
 8005736:	2410      	movs	r4, #16
 8005738:	428c      	cmp	r4, r1
 800573a:	bf2c      	ite	cs
 800573c:	4619      	movcs	r1, r3
 800573e:	f043 0101 	orrcc.w	r1, r3, #1
 8005742:	2900      	cmp	r1, #0
 8005744:	d0d4      	beq.n	80056f0 <_malloc_r+0x20>
 8005746:	230c      	movs	r3, #12
 8005748:	2700      	movs	r7, #0
 800574a:	602b      	str	r3, [r5, #0]
 800574c:	4638      	mov	r0, r7
 800574e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005752:	ea5f 2e54 	movs.w	lr, r4, lsr #9
 8005756:	bf04      	itt	eq
 8005758:	ea4f 0ed4 	moveq.w	lr, r4, lsr #3
 800575c:	ea4f 01ce 	moveq.w	r1, lr, lsl #3
 8005760:	f040 8081 	bne.w	8005866 <_malloc_r+0x196>
 8005764:	4e63      	ldr	r6, [pc, #396]	; (80058f4 <_malloc_r+0x224>)
 8005766:	1871      	adds	r1, r6, r1
 8005768:	68cf      	ldr	r7, [r1, #12]
 800576a:	42b9      	cmp	r1, r7
 800576c:	d106      	bne.n	800577c <_malloc_r+0xac>
 800576e:	e00d      	b.n	800578c <_malloc_r+0xbc>
 8005770:	2b00      	cmp	r3, #0
 8005772:	f280 8169 	bge.w	8005a48 <_malloc_r+0x378>
 8005776:	68ff      	ldr	r7, [r7, #12]
 8005778:	42b9      	cmp	r1, r7
 800577a:	d007      	beq.n	800578c <_malloc_r+0xbc>
 800577c:	687a      	ldr	r2, [r7, #4]
 800577e:	f022 0203 	bic.w	r2, r2, #3
 8005782:	1b13      	subs	r3, r2, r4
 8005784:	2b0f      	cmp	r3, #15
 8005786:	ddf3      	ble.n	8005770 <_malloc_r+0xa0>
 8005788:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 800578c:	f10e 0e01 	add.w	lr, lr, #1
 8005790:	4a58      	ldr	r2, [pc, #352]	; (80058f4 <_malloc_r+0x224>)
 8005792:	6937      	ldr	r7, [r6, #16]
 8005794:	f102 0c08 	add.w	ip, r2, #8
 8005798:	4567      	cmp	r7, ip
 800579a:	bf08      	it	eq
 800579c:	6853      	ldreq	r3, [r2, #4]
 800579e:	d023      	beq.n	80057e8 <_malloc_r+0x118>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f023 0303 	bic.w	r3, r3, #3
 80057a6:	1b19      	subs	r1, r3, r4
 80057a8:	290f      	cmp	r1, #15
 80057aa:	f300 81b4 	bgt.w	8005b16 <_malloc_r+0x446>
 80057ae:	2900      	cmp	r1, #0
 80057b0:	f8c2 c014 	str.w	ip, [r2, #20]
 80057b4:	f8c2 c010 	str.w	ip, [r2, #16]
 80057b8:	f280 808f 	bge.w	80058da <_malloc_r+0x20a>
 80057bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057c0:	f080 8161 	bcs.w	8005a86 <_malloc_r+0x3b6>
 80057c4:	08db      	lsrs	r3, r3, #3
 80057c6:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 80057ca:	f8d2 8004 	ldr.w	r8, [r2, #4]
 80057ce:	6888      	ldr	r0, [r1, #8]
 80057d0:	60f9      	str	r1, [r7, #12]
 80057d2:	109b      	asrs	r3, r3, #2
 80057d4:	f04f 0901 	mov.w	r9, #1
 80057d8:	fa09 f303 	lsl.w	r3, r9, r3
 80057dc:	ea43 0308 	orr.w	r3, r3, r8
 80057e0:	60b8      	str	r0, [r7, #8]
 80057e2:	6053      	str	r3, [r2, #4]
 80057e4:	608f      	str	r7, [r1, #8]
 80057e6:	60c7      	str	r7, [r0, #12]
 80057e8:	2001      	movs	r0, #1
 80057ea:	ea4f 02ae 	mov.w	r2, lr, asr #2
 80057ee:	4090      	lsls	r0, r2
 80057f0:	4298      	cmp	r0, r3
 80057f2:	f200 8081 	bhi.w	80058f8 <_malloc_r+0x228>
 80057f6:	4203      	tst	r3, r0
 80057f8:	d106      	bne.n	8005808 <_malloc_r+0x138>
 80057fa:	f02e 0e03 	bic.w	lr, lr, #3
 80057fe:	0040      	lsls	r0, r0, #1
 8005800:	4203      	tst	r3, r0
 8005802:	f10e 0e04 	add.w	lr, lr, #4
 8005806:	d0fa      	beq.n	80057fe <_malloc_r+0x12e>
 8005808:	eb06 09ce 	add.w	r9, r6, lr, lsl #3
 800580c:	464f      	mov	r7, r9
 800580e:	46f0      	mov	r8, lr
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	429f      	cmp	r7, r3
 8005814:	d107      	bne.n	8005826 <_malloc_r+0x156>
 8005816:	e191      	b.n	8005b3c <_malloc_r+0x46c>
 8005818:	2a00      	cmp	r2, #0
 800581a:	f280 81b7 	bge.w	8005b8c <_malloc_r+0x4bc>
 800581e:	68db      	ldr	r3, [r3, #12]
 8005820:	429f      	cmp	r7, r3
 8005822:	f000 818b 	beq.w	8005b3c <_malloc_r+0x46c>
 8005826:	6859      	ldr	r1, [r3, #4]
 8005828:	f021 0103 	bic.w	r1, r1, #3
 800582c:	1b0a      	subs	r2, r1, r4
 800582e:	2a0f      	cmp	r2, #15
 8005830:	ddf2      	ble.n	8005818 <_malloc_r+0x148>
 8005832:	461f      	mov	r7, r3
 8005834:	1919      	adds	r1, r3, r4
 8005836:	68d8      	ldr	r0, [r3, #12]
 8005838:	f857 ef08 	ldr.w	lr, [r7, #8]!
 800583c:	508a      	str	r2, [r1, r2]
 800583e:	f044 0401 	orr.w	r4, r4, #1
 8005842:	f042 0201 	orr.w	r2, r2, #1
 8005846:	f8ce 000c 	str.w	r0, [lr, #12]
 800584a:	f8c0 e008 	str.w	lr, [r0, #8]
 800584e:	605c      	str	r4, [r3, #4]
 8005850:	6171      	str	r1, [r6, #20]
 8005852:	6131      	str	r1, [r6, #16]
 8005854:	f8c1 c00c 	str.w	ip, [r1, #12]
 8005858:	f8c1 c008 	str.w	ip, [r1, #8]
 800585c:	604a      	str	r2, [r1, #4]
 800585e:	4628      	mov	r0, r5
 8005860:	f000 fa6e 	bl	8005d40 <__malloc_unlock>
 8005864:	e763      	b.n	800572e <_malloc_r+0x5e>
 8005866:	f1be 0f04 	cmp.w	lr, #4
 800586a:	bf9e      	ittt	ls
 800586c:	ea4f 1e94 	movls.w	lr, r4, lsr #6
 8005870:	f10e 0e38 	addls.w	lr, lr, #56	; 0x38
 8005874:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 8005878:	f67f af74 	bls.w	8005764 <_malloc_r+0x94>
 800587c:	f1be 0f14 	cmp.w	lr, #20
 8005880:	bf9c      	itt	ls
 8005882:	f10e 0e5b 	addls.w	lr, lr, #91	; 0x5b
 8005886:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 800588a:	f67f af6b 	bls.w	8005764 <_malloc_r+0x94>
 800588e:	f1be 0f54 	cmp.w	lr, #84	; 0x54
 8005892:	bf9e      	ittt	ls
 8005894:	ea4f 3e14 	movls.w	lr, r4, lsr #12
 8005898:	f10e 0e6e 	addls.w	lr, lr, #110	; 0x6e
 800589c:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 80058a0:	f67f af60 	bls.w	8005764 <_malloc_r+0x94>
 80058a4:	f5be 7faa 	cmp.w	lr, #340	; 0x154
 80058a8:	bf9e      	ittt	ls
 80058aa:	ea4f 3ed4 	movls.w	lr, r4, lsr #15
 80058ae:	f10e 0e77 	addls.w	lr, lr, #119	; 0x77
 80058b2:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 80058b6:	f67f af55 	bls.w	8005764 <_malloc_r+0x94>
 80058ba:	f240 5354 	movw	r3, #1364	; 0x554
 80058be:	459e      	cmp	lr, r3
 80058c0:	bf9d      	ittte	ls
 80058c2:	ea4f 4e94 	movls.w	lr, r4, lsr #18
 80058c6:	f10e 0e7c 	addls.w	lr, lr, #124	; 0x7c
 80058ca:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 80058ce:	f44f 717c 	movhi.w	r1, #1008	; 0x3f0
 80058d2:	bf88      	it	hi
 80058d4:	f04f 0e7e 	movhi.w	lr, #126	; 0x7e
 80058d8:	e744      	b.n	8005764 <_malloc_r+0x94>
 80058da:	18fb      	adds	r3, r7, r3
 80058dc:	4628      	mov	r0, r5
 80058de:	685a      	ldr	r2, [r3, #4]
 80058e0:	f042 0201 	orr.w	r2, r2, #1
 80058e4:	605a      	str	r2, [r3, #4]
 80058e6:	3708      	adds	r7, #8
 80058e8:	f000 fa2a 	bl	8005d40 <__malloc_unlock>
 80058ec:	4638      	mov	r0, r7
 80058ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058f2:	bf00      	nop
 80058f4:	2000059c 	.word	0x2000059c
 80058f8:	68b7      	ldr	r7, [r6, #8]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f023 0803 	bic.w	r8, r3, #3
 8005900:	4544      	cmp	r4, r8
 8005902:	ebc4 0208 	rsb	r2, r4, r8
 8005906:	bf94      	ite	ls
 8005908:	2300      	movls	r3, #0
 800590a:	2301      	movhi	r3, #1
 800590c:	2a0f      	cmp	r2, #15
 800590e:	bfd8      	it	le
 8005910:	f043 0301 	orrle.w	r3, r3, #1
 8005914:	2b00      	cmp	r3, #0
 8005916:	f000 80a7 	beq.w	8005a68 <_malloc_r+0x398>
 800591a:	4bb3      	ldr	r3, [pc, #716]	; (8005be8 <_malloc_r+0x518>)
 800591c:	f8df a2cc 	ldr.w	sl, [pc, #716]	; 8005bec <_malloc_r+0x51c>
 8005920:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8005924:	f8da 3000 	ldr.w	r3, [sl]
 8005928:	3201      	adds	r2, #1
 800592a:	4423      	add	r3, r4
 800592c:	bf08      	it	eq
 800592e:	f103 0b10 	addeq.w	fp, r3, #16
 8005932:	d006      	beq.n	8005942 <_malloc_r+0x272>
 8005934:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005938:	330f      	adds	r3, #15
 800593a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800593e:	f023 0b0f 	bic.w	fp, r3, #15
 8005942:	4628      	mov	r0, r5
 8005944:	4659      	mov	r1, fp
 8005946:	f000 fe89 	bl	800665c <_sbrk_r>
 800594a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800594e:	4681      	mov	r9, r0
 8005950:	f000 8144 	beq.w	8005bdc <_malloc_r+0x50c>
 8005954:	eb07 0208 	add.w	r2, r7, r8
 8005958:	4282      	cmp	r2, r0
 800595a:	f200 8126 	bhi.w	8005baa <_malloc_r+0x4da>
 800595e:	f8da 3004 	ldr.w	r3, [sl, #4]
 8005962:	454a      	cmp	r2, r9
 8005964:	445b      	add	r3, fp
 8005966:	f8ca 3004 	str.w	r3, [sl, #4]
 800596a:	f000 8141 	beq.w	8005bf0 <_malloc_r+0x520>
 800596e:	f8d6 1408 	ldr.w	r1, [r6, #1032]	; 0x408
 8005972:	3101      	adds	r1, #1
 8005974:	bf15      	itete	ne
 8005976:	ebc2 0209 	rsbne	r2, r2, r9
 800597a:	4b9b      	ldreq	r3, [pc, #620]	; (8005be8 <_malloc_r+0x518>)
 800597c:	189b      	addne	r3, r3, r2
 800597e:	f8c3 9408 	streq.w	r9, [r3, #1032]	; 0x408
 8005982:	bf18      	it	ne
 8005984:	f8ca 3004 	strne.w	r3, [sl, #4]
 8005988:	f019 0307 	ands.w	r3, r9, #7
 800598c:	bf1f      	itttt	ne
 800598e:	f1c3 0208 	rsbne	r2, r3, #8
 8005992:	4491      	addne	r9, r2
 8005994:	f5c3 5380 	rsbne	r3, r3, #4096	; 0x1000
 8005998:	f103 0208 	addne.w	r2, r3, #8
 800599c:	eb09 030b 	add.w	r3, r9, fp
 80059a0:	bf08      	it	eq
 80059a2:	f44f 5280 	moveq.w	r2, #4096	; 0x1000
 80059a6:	051b      	lsls	r3, r3, #20
 80059a8:	0d1b      	lsrs	r3, r3, #20
 80059aa:	ebc3 0b02 	rsb	fp, r3, r2
 80059ae:	4628      	mov	r0, r5
 80059b0:	4659      	mov	r1, fp
 80059b2:	f000 fe53 	bl	800665c <_sbrk_r>
 80059b6:	1c43      	adds	r3, r0, #1
 80059b8:	f000 8126 	beq.w	8005c08 <_malloc_r+0x538>
 80059bc:	ebc9 0200 	rsb	r2, r9, r0
 80059c0:	445a      	add	r2, fp
 80059c2:	f042 0201 	orr.w	r2, r2, #1
 80059c6:	f8da 3004 	ldr.w	r3, [sl, #4]
 80059ca:	f8c6 9008 	str.w	r9, [r6, #8]
 80059ce:	445b      	add	r3, fp
 80059d0:	42b7      	cmp	r7, r6
 80059d2:	f8ca 3004 	str.w	r3, [sl, #4]
 80059d6:	f8c9 2004 	str.w	r2, [r9, #4]
 80059da:	d015      	beq.n	8005a08 <_malloc_r+0x338>
 80059dc:	f1b8 0f0f 	cmp.w	r8, #15
 80059e0:	f240 80f6 	bls.w	8005bd0 <_malloc_r+0x500>
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f1a8 020c 	sub.w	r2, r8, #12
 80059ea:	f022 0207 	bic.w	r2, r2, #7
 80059ee:	18b9      	adds	r1, r7, r2
 80059f0:	f000 0e01 	and.w	lr, r0, #1
 80059f4:	ea42 0e0e 	orr.w	lr, r2, lr
 80059f8:	2005      	movs	r0, #5
 80059fa:	2a0f      	cmp	r2, #15
 80059fc:	f8c7 e004 	str.w	lr, [r7, #4]
 8005a00:	6048      	str	r0, [r1, #4]
 8005a02:	6088      	str	r0, [r1, #8]
 8005a04:	f200 8104 	bhi.w	8005c10 <_malloc_r+0x540>
 8005a08:	f8da 202c 	ldr.w	r2, [sl, #44]	; 0x2c
 8005a0c:	68b7      	ldr	r7, [r6, #8]
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	bf84      	itt	hi
 8005a12:	4a76      	ldrhi	r2, [pc, #472]	; (8005bec <_malloc_r+0x51c>)
 8005a14:	62d3      	strhi	r3, [r2, #44]	; 0x2c
 8005a16:	f8da 2030 	ldr.w	r2, [sl, #48]	; 0x30
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	bf84      	itt	hi
 8005a1e:	4a73      	ldrhi	r2, [pc, #460]	; (8005bec <_malloc_r+0x51c>)
 8005a20:	6313      	strhi	r3, [r2, #48]	; 0x30
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f023 0303 	bic.w	r3, r3, #3
 8005a28:	429c      	cmp	r4, r3
 8005a2a:	ebc4 0203 	rsb	r2, r4, r3
 8005a2e:	bf94      	ite	ls
 8005a30:	2300      	movls	r3, #0
 8005a32:	2301      	movhi	r3, #1
 8005a34:	2a0f      	cmp	r2, #15
 8005a36:	bfd8      	it	le
 8005a38:	f043 0301 	orrle.w	r3, r3, #1
 8005a3c:	b1a3      	cbz	r3, 8005a68 <_malloc_r+0x398>
 8005a3e:	4628      	mov	r0, r5
 8005a40:	f000 f97e 	bl	8005d40 <__malloc_unlock>
 8005a44:	2700      	movs	r7, #0
 8005a46:	e672      	b.n	800572e <_malloc_r+0x5e>
 8005a48:	18ba      	adds	r2, r7, r2
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	6850      	ldr	r0, [r2, #4]
 8005a4e:	68b9      	ldr	r1, [r7, #8]
 8005a50:	f040 0001 	orr.w	r0, r0, #1
 8005a54:	6050      	str	r0, [r2, #4]
 8005a56:	60cb      	str	r3, [r1, #12]
 8005a58:	4628      	mov	r0, r5
 8005a5a:	6099      	str	r1, [r3, #8]
 8005a5c:	3708      	adds	r7, #8
 8005a5e:	f000 f96f 	bl	8005d40 <__malloc_unlock>
 8005a62:	4638      	mov	r0, r7
 8005a64:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a68:	193b      	adds	r3, r7, r4
 8005a6a:	f042 0201 	orr.w	r2, r2, #1
 8005a6e:	f044 0401 	orr.w	r4, r4, #1
 8005a72:	607c      	str	r4, [r7, #4]
 8005a74:	4628      	mov	r0, r5
 8005a76:	605a      	str	r2, [r3, #4]
 8005a78:	3708      	adds	r7, #8
 8005a7a:	60b3      	str	r3, [r6, #8]
 8005a7c:	f000 f960 	bl	8005d40 <__malloc_unlock>
 8005a80:	4638      	mov	r0, r7
 8005a82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a86:	0a5a      	lsrs	r2, r3, #9
 8005a88:	2a04      	cmp	r2, #4
 8005a8a:	bf9e      	ittt	ls
 8005a8c:	ea4f 1893 	movls.w	r8, r3, lsr #6
 8005a90:	f108 0838 	addls.w	r8, r8, #56	; 0x38
 8005a94:	ea4f 00c8 	movls.w	r0, r8, lsl #3
 8005a98:	d928      	bls.n	8005aec <_malloc_r+0x41c>
 8005a9a:	2a14      	cmp	r2, #20
 8005a9c:	bf9c      	itt	ls
 8005a9e:	f102 085b 	addls.w	r8, r2, #91	; 0x5b
 8005aa2:	ea4f 00c8 	movls.w	r0, r8, lsl #3
 8005aa6:	d921      	bls.n	8005aec <_malloc_r+0x41c>
 8005aa8:	2a54      	cmp	r2, #84	; 0x54
 8005aaa:	bf9e      	ittt	ls
 8005aac:	ea4f 3813 	movls.w	r8, r3, lsr #12
 8005ab0:	f108 086e 	addls.w	r8, r8, #110	; 0x6e
 8005ab4:	ea4f 00c8 	movls.w	r0, r8, lsl #3
 8005ab8:	d918      	bls.n	8005aec <_malloc_r+0x41c>
 8005aba:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8005abe:	bf9e      	ittt	ls
 8005ac0:	ea4f 38d3 	movls.w	r8, r3, lsr #15
 8005ac4:	f108 0877 	addls.w	r8, r8, #119	; 0x77
 8005ac8:	ea4f 00c8 	movls.w	r0, r8, lsl #3
 8005acc:	d90e      	bls.n	8005aec <_malloc_r+0x41c>
 8005ace:	f240 5154 	movw	r1, #1364	; 0x554
 8005ad2:	428a      	cmp	r2, r1
 8005ad4:	bf9d      	ittte	ls
 8005ad6:	ea4f 4893 	movls.w	r8, r3, lsr #18
 8005ada:	f108 087c 	addls.w	r8, r8, #124	; 0x7c
 8005ade:	ea4f 00c8 	movls.w	r0, r8, lsl #3
 8005ae2:	f44f 707c 	movhi.w	r0, #1008	; 0x3f0
 8005ae6:	bf88      	it	hi
 8005ae8:	f04f 087e 	movhi.w	r8, #126	; 0x7e
 8005aec:	1830      	adds	r0, r6, r0
 8005aee:	493e      	ldr	r1, [pc, #248]	; (8005be8 <_malloc_r+0x518>)
 8005af0:	6882      	ldr	r2, [r0, #8]
 8005af2:	4282      	cmp	r2, r0
 8005af4:	d103      	bne.n	8005afe <_malloc_r+0x42e>
 8005af6:	e061      	b.n	8005bbc <_malloc_r+0x4ec>
 8005af8:	6892      	ldr	r2, [r2, #8]
 8005afa:	4290      	cmp	r0, r2
 8005afc:	d004      	beq.n	8005b08 <_malloc_r+0x438>
 8005afe:	6851      	ldr	r1, [r2, #4]
 8005b00:	f021 0103 	bic.w	r1, r1, #3
 8005b04:	428b      	cmp	r3, r1
 8005b06:	d3f7      	bcc.n	8005af8 <_malloc_r+0x428>
 8005b08:	68d1      	ldr	r1, [r2, #12]
 8005b0a:	6873      	ldr	r3, [r6, #4]
 8005b0c:	60f9      	str	r1, [r7, #12]
 8005b0e:	60ba      	str	r2, [r7, #8]
 8005b10:	60d7      	str	r7, [r2, #12]
 8005b12:	608f      	str	r7, [r1, #8]
 8005b14:	e668      	b.n	80057e8 <_malloc_r+0x118>
 8005b16:	193b      	adds	r3, r7, r4
 8005b18:	f041 0001 	orr.w	r0, r1, #1
 8005b1c:	f044 0401 	orr.w	r4, r4, #1
 8005b20:	607c      	str	r4, [r7, #4]
 8005b22:	6153      	str	r3, [r2, #20]
 8005b24:	6113      	str	r3, [r2, #16]
 8005b26:	6058      	str	r0, [r3, #4]
 8005b28:	f8c3 c00c 	str.w	ip, [r3, #12]
 8005b2c:	f8c3 c008 	str.w	ip, [r3, #8]
 8005b30:	5059      	str	r1, [r3, r1]
 8005b32:	4628      	mov	r0, r5
 8005b34:	f000 f904 	bl	8005d40 <__malloc_unlock>
 8005b38:	3708      	adds	r7, #8
 8005b3a:	e5f8      	b.n	800572e <_malloc_r+0x5e>
 8005b3c:	f108 0801 	add.w	r8, r8, #1
 8005b40:	3708      	adds	r7, #8
 8005b42:	f018 0f03 	tst.w	r8, #3
 8005b46:	f47f ae63 	bne.w	8005810 <_malloc_r+0x140>
 8005b4a:	464b      	mov	r3, r9
 8005b4c:	f01e 0f03 	tst.w	lr, #3
 8005b50:	f1a3 0208 	sub.w	r2, r3, #8
 8005b54:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 8005b58:	d062      	beq.n	8005c20 <_malloc_r+0x550>
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d0f5      	beq.n	8005b4c <_malloc_r+0x47c>
 8005b60:	6873      	ldr	r3, [r6, #4]
 8005b62:	0040      	lsls	r0, r0, #1
 8005b64:	4298      	cmp	r0, r3
 8005b66:	f63f aec7 	bhi.w	80058f8 <_malloc_r+0x228>
 8005b6a:	2800      	cmp	r0, #0
 8005b6c:	f43f aec4 	beq.w	80058f8 <_malloc_r+0x228>
 8005b70:	4218      	tst	r0, r3
 8005b72:	d05a      	beq.n	8005c2a <_malloc_r+0x55a>
 8005b74:	46c6      	mov	lr, r8
 8005b76:	e647      	b.n	8005808 <_malloc_r+0x138>
 8005b78:	f107 0308 	add.w	r3, r7, #8
 8005b7c:	697f      	ldr	r7, [r7, #20]
 8005b7e:	42bb      	cmp	r3, r7
 8005b80:	bf08      	it	eq
 8005b82:	f10e 0e02 	addeq.w	lr, lr, #2
 8005b86:	f43f ae03 	beq.w	8005790 <_malloc_r+0xc0>
 8005b8a:	e5c0      	b.n	800570e <_malloc_r+0x3e>
 8005b8c:	1859      	adds	r1, r3, r1
 8005b8e:	461f      	mov	r7, r3
 8005b90:	6848      	ldr	r0, [r1, #4]
 8005b92:	68db      	ldr	r3, [r3, #12]
 8005b94:	f857 2f08 	ldr.w	r2, [r7, #8]!
 8005b98:	f040 0001 	orr.w	r0, r0, #1
 8005b9c:	6048      	str	r0, [r1, #4]
 8005b9e:	60d3      	str	r3, [r2, #12]
 8005ba0:	609a      	str	r2, [r3, #8]
 8005ba2:	4628      	mov	r0, r5
 8005ba4:	f000 f8cc 	bl	8005d40 <__malloc_unlock>
 8005ba8:	e5c1      	b.n	800572e <_malloc_r+0x5e>
 8005baa:	42b7      	cmp	r7, r6
 8005bac:	f43f aed7 	beq.w	800595e <_malloc_r+0x28e>
 8005bb0:	4b0d      	ldr	r3, [pc, #52]	; (8005be8 <_malloc_r+0x518>)
 8005bb2:	689f      	ldr	r7, [r3, #8]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f023 0303 	bic.w	r3, r3, #3
 8005bba:	e735      	b.n	8005a28 <_malloc_r+0x358>
 8005bbc:	684b      	ldr	r3, [r1, #4]
 8005bbe:	ea4f 08a8 	mov.w	r8, r8, asr #2
 8005bc2:	2001      	movs	r0, #1
 8005bc4:	fa00 f008 	lsl.w	r0, r0, r8
 8005bc8:	4303      	orrs	r3, r0
 8005bca:	604b      	str	r3, [r1, #4]
 8005bcc:	4611      	mov	r1, r2
 8005bce:	e79d      	b.n	8005b0c <_malloc_r+0x43c>
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	f8c9 3004 	str.w	r3, [r9, #4]
 8005bd6:	464f      	mov	r7, r9
 8005bd8:	2300      	movs	r3, #0
 8005bda:	e725      	b.n	8005a28 <_malloc_r+0x358>
 8005bdc:	68b7      	ldr	r7, [r6, #8]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f023 0303 	bic.w	r3, r3, #3
 8005be4:	e720      	b.n	8005a28 <_malloc_r+0x358>
 8005be6:	bf00      	nop
 8005be8:	2000059c 	.word	0x2000059c
 8005bec:	200009c4 	.word	0x200009c4
 8005bf0:	0511      	lsls	r1, r2, #20
 8005bf2:	0d09      	lsrs	r1, r1, #20
 8005bf4:	2900      	cmp	r1, #0
 8005bf6:	f47f aeba 	bne.w	800596e <_malloc_r+0x29e>
 8005bfa:	68b2      	ldr	r2, [r6, #8]
 8005bfc:	eb0b 0108 	add.w	r1, fp, r8
 8005c00:	f041 0101 	orr.w	r1, r1, #1
 8005c04:	6051      	str	r1, [r2, #4]
 8005c06:	e6ff      	b.n	8005a08 <_malloc_r+0x338>
 8005c08:	2201      	movs	r2, #1
 8005c0a:	f04f 0b00 	mov.w	fp, #0
 8005c0e:	e6da      	b.n	80059c6 <_malloc_r+0x2f6>
 8005c10:	4628      	mov	r0, r5
 8005c12:	f107 0108 	add.w	r1, r7, #8
 8005c16:	f7ff fc4f 	bl	80054b8 <_free_r>
 8005c1a:	4b06      	ldr	r3, [pc, #24]	; (8005c34 <_malloc_r+0x564>)
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	e6f3      	b.n	8005a08 <_malloc_r+0x338>
 8005c20:	6873      	ldr	r3, [r6, #4]
 8005c22:	ea23 0300 	bic.w	r3, r3, r0
 8005c26:	6073      	str	r3, [r6, #4]
 8005c28:	e79b      	b.n	8005b62 <_malloc_r+0x492>
 8005c2a:	0040      	lsls	r0, r0, #1
 8005c2c:	f108 0804 	add.w	r8, r8, #4
 8005c30:	e79e      	b.n	8005b70 <_malloc_r+0x4a0>
 8005c32:	bf00      	nop
 8005c34:	200009c4 	.word	0x200009c4

08005c38 <memchr>:
 8005c38:	0783      	lsls	r3, r0, #30
 8005c3a:	b470      	push	{r4, r5, r6}
 8005c3c:	b2c9      	uxtb	r1, r1
 8005c3e:	d00f      	beq.n	8005c60 <memchr+0x28>
 8005c40:	2a00      	cmp	r2, #0
 8005c42:	d033      	beq.n	8005cac <memchr+0x74>
 8005c44:	7803      	ldrb	r3, [r0, #0]
 8005c46:	3a01      	subs	r2, #1
 8005c48:	428b      	cmp	r3, r1
 8005c4a:	d106      	bne.n	8005c5a <memchr+0x22>
 8005c4c:	e01d      	b.n	8005c8a <memchr+0x52>
 8005c4e:	2a00      	cmp	r2, #0
 8005c50:	d02c      	beq.n	8005cac <memchr+0x74>
 8005c52:	7803      	ldrb	r3, [r0, #0]
 8005c54:	3a01      	subs	r2, #1
 8005c56:	428b      	cmp	r3, r1
 8005c58:	d017      	beq.n	8005c8a <memchr+0x52>
 8005c5a:	3001      	adds	r0, #1
 8005c5c:	0783      	lsls	r3, r0, #30
 8005c5e:	d1f6      	bne.n	8005c4e <memchr+0x16>
 8005c60:	2a03      	cmp	r2, #3
 8005c62:	bf84      	itt	hi
 8005c64:	ea41 2601 	orrhi.w	r6, r1, r1, lsl #8
 8005c68:	ea46 4606 	orrhi.w	r6, r6, r6, lsl #16
 8005c6c:	d80f      	bhi.n	8005c8e <memchr+0x56>
 8005c6e:	b1ea      	cbz	r2, 8005cac <memchr+0x74>
 8005c70:	7803      	ldrb	r3, [r0, #0]
 8005c72:	3a01      	subs	r2, #1
 8005c74:	428b      	cmp	r3, r1
 8005c76:	4402      	add	r2, r0
 8005c78:	d104      	bne.n	8005c84 <memchr+0x4c>
 8005c7a:	e006      	b.n	8005c8a <memchr+0x52>
 8005c7c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8005c80:	428b      	cmp	r3, r1
 8005c82:	d002      	beq.n	8005c8a <memchr+0x52>
 8005c84:	4290      	cmp	r0, r2
 8005c86:	d1f9      	bne.n	8005c7c <memchr+0x44>
 8005c88:	2000      	movs	r0, #0
 8005c8a:	bc70      	pop	{r4, r5, r6}
 8005c8c:	4770      	bx	lr
 8005c8e:	4604      	mov	r4, r0
 8005c90:	3004      	adds	r0, #4
 8005c92:	6823      	ldr	r3, [r4, #0]
 8005c94:	4073      	eors	r3, r6
 8005c96:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
 8005c9a:	ea25 0303 	bic.w	r3, r5, r3
 8005c9e:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 8005ca2:	d105      	bne.n	8005cb0 <memchr+0x78>
 8005ca4:	3a04      	subs	r2, #4
 8005ca6:	2a03      	cmp	r2, #3
 8005ca8:	d8f1      	bhi.n	8005c8e <memchr+0x56>
 8005caa:	e7e0      	b.n	8005c6e <memchr+0x36>
 8005cac:	4610      	mov	r0, r2
 8005cae:	e7ec      	b.n	8005c8a <memchr+0x52>
 8005cb0:	4620      	mov	r0, r4
 8005cb2:	e7dc      	b.n	8005c6e <memchr+0x36>

08005cb4 <memcpy>:
 8005cb4:	2a0f      	cmp	r2, #15
 8005cb6:	b4f0      	push	{r4, r5, r6, r7}
 8005cb8:	bf98      	it	ls
 8005cba:	4603      	movls	r3, r0
 8005cbc:	d931      	bls.n	8005d22 <memcpy+0x6e>
 8005cbe:	ea41 0300 	orr.w	r3, r1, r0
 8005cc2:	079b      	lsls	r3, r3, #30
 8005cc4:	d137      	bne.n	8005d36 <memcpy+0x82>
 8005cc6:	460c      	mov	r4, r1
 8005cc8:	4603      	mov	r3, r0
 8005cca:	4615      	mov	r5, r2
 8005ccc:	6826      	ldr	r6, [r4, #0]
 8005cce:	601e      	str	r6, [r3, #0]
 8005cd0:	6866      	ldr	r6, [r4, #4]
 8005cd2:	605e      	str	r6, [r3, #4]
 8005cd4:	68a6      	ldr	r6, [r4, #8]
 8005cd6:	609e      	str	r6, [r3, #8]
 8005cd8:	68e6      	ldr	r6, [r4, #12]
 8005cda:	3d10      	subs	r5, #16
 8005cdc:	60de      	str	r6, [r3, #12]
 8005cde:	3410      	adds	r4, #16
 8005ce0:	3310      	adds	r3, #16
 8005ce2:	2d0f      	cmp	r5, #15
 8005ce4:	d8f2      	bhi.n	8005ccc <memcpy+0x18>
 8005ce6:	f1a2 0410 	sub.w	r4, r2, #16
 8005cea:	f024 040f 	bic.w	r4, r4, #15
 8005cee:	f002 020f 	and.w	r2, r2, #15
 8005cf2:	3410      	adds	r4, #16
 8005cf4:	2a03      	cmp	r2, #3
 8005cf6:	eb00 0304 	add.w	r3, r0, r4
 8005cfa:	4421      	add	r1, r4
 8005cfc:	d911      	bls.n	8005d22 <memcpy+0x6e>
 8005cfe:	1f0e      	subs	r6, r1, #4
 8005d00:	461d      	mov	r5, r3
 8005d02:	4614      	mov	r4, r2
 8005d04:	f856 7f04 	ldr.w	r7, [r6, #4]!
 8005d08:	3c04      	subs	r4, #4
 8005d0a:	2c03      	cmp	r4, #3
 8005d0c:	f845 7b04 	str.w	r7, [r5], #4
 8005d10:	d8f8      	bhi.n	8005d04 <memcpy+0x50>
 8005d12:	1f14      	subs	r4, r2, #4
 8005d14:	f024 0403 	bic.w	r4, r4, #3
 8005d18:	3404      	adds	r4, #4
 8005d1a:	f002 0203 	and.w	r2, r2, #3
 8005d1e:	1909      	adds	r1, r1, r4
 8005d20:	191b      	adds	r3, r3, r4
 8005d22:	b132      	cbz	r2, 8005d32 <memcpy+0x7e>
 8005d24:	3901      	subs	r1, #1
 8005d26:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005d2a:	3a01      	subs	r2, #1
 8005d2c:	f803 4b01 	strb.w	r4, [r3], #1
 8005d30:	d1f9      	bne.n	8005d26 <memcpy+0x72>
 8005d32:	bcf0      	pop	{r4, r5, r6, r7}
 8005d34:	4770      	bx	lr
 8005d36:	4603      	mov	r3, r0
 8005d38:	e7f4      	b.n	8005d24 <memcpy+0x70>
 8005d3a:	bf00      	nop

08005d3c <__malloc_lock>:
 8005d3c:	4770      	bx	lr
 8005d3e:	bf00      	nop

08005d40 <__malloc_unlock>:
 8005d40:	4770      	bx	lr
 8005d42:	bf00      	nop

08005d44 <_Balloc>:
 8005d44:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8005d46:	b570      	push	{r4, r5, r6, lr}
 8005d48:	4605      	mov	r5, r0
 8005d4a:	460c      	mov	r4, r1
 8005d4c:	b14b      	cbz	r3, 8005d62 <_Balloc+0x1e>
 8005d4e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8005d52:	b178      	cbz	r0, 8005d74 <_Balloc+0x30>
 8005d54:	6802      	ldr	r2, [r0, #0]
 8005d56:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	6103      	str	r3, [r0, #16]
 8005d5e:	60c3      	str	r3, [r0, #12]
 8005d60:	bd70      	pop	{r4, r5, r6, pc}
 8005d62:	2104      	movs	r1, #4
 8005d64:	2221      	movs	r2, #33	; 0x21
 8005d66:	f001 fa7f 	bl	8007268 <_calloc_r>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	64e8      	str	r0, [r5, #76]	; 0x4c
 8005d6e:	2800      	cmp	r0, #0
 8005d70:	d1ed      	bne.n	8005d4e <_Balloc+0xa>
 8005d72:	bd70      	pop	{r4, r5, r6, pc}
 8005d74:	2101      	movs	r1, #1
 8005d76:	fa11 f604 	lsls.w	r6, r1, r4
 8005d7a:	1d72      	adds	r2, r6, #5
 8005d7c:	4628      	mov	r0, r5
 8005d7e:	0092      	lsls	r2, r2, #2
 8005d80:	f001 fa72 	bl	8007268 <_calloc_r>
 8005d84:	2800      	cmp	r0, #0
 8005d86:	d0f4      	beq.n	8005d72 <_Balloc+0x2e>
 8005d88:	6044      	str	r4, [r0, #4]
 8005d8a:	6086      	str	r6, [r0, #8]
 8005d8c:	e7e5      	b.n	8005d5a <_Balloc+0x16>
 8005d8e:	bf00      	nop

08005d90 <_Bfree>:
 8005d90:	b131      	cbz	r1, 8005da0 <_Bfree+0x10>
 8005d92:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8005d94:	684a      	ldr	r2, [r1, #4]
 8005d96:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8005d9a:	6008      	str	r0, [r1, #0]
 8005d9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005da0:	4770      	bx	lr
 8005da2:	bf00      	nop

08005da4 <__multadd>:
 8005da4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005da6:	460d      	mov	r5, r1
 8005da8:	4606      	mov	r6, r0
 8005daa:	690c      	ldr	r4, [r1, #16]
 8005dac:	f101 0014 	add.w	r0, r1, #20
 8005db0:	b083      	sub	sp, #12
 8005db2:	2100      	movs	r1, #0
 8005db4:	6807      	ldr	r7, [r0, #0]
 8005db6:	fa1f fc87 	uxth.w	ip, r7
 8005dba:	0c3f      	lsrs	r7, r7, #16
 8005dbc:	fb02 330c 	mla	r3, r2, ip, r3
 8005dc0:	fb02 f707 	mul.w	r7, r2, r7
 8005dc4:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	eb03 4307 	add.w	r3, r3, r7, lsl #16
 8005dce:	3101      	adds	r1, #1
 8005dd0:	f840 3b04 	str.w	r3, [r0], #4
 8005dd4:	0c3b      	lsrs	r3, r7, #16
 8005dd6:	428c      	cmp	r4, r1
 8005dd8:	dcec      	bgt.n	8005db4 <__multadd+0x10>
 8005dda:	b13b      	cbz	r3, 8005dec <__multadd+0x48>
 8005ddc:	68aa      	ldr	r2, [r5, #8]
 8005dde:	4294      	cmp	r4, r2
 8005de0:	da07      	bge.n	8005df2 <__multadd+0x4e>
 8005de2:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 8005de6:	3401      	adds	r4, #1
 8005de8:	6153      	str	r3, [r2, #20]
 8005dea:	612c      	str	r4, [r5, #16]
 8005dec:	4628      	mov	r0, r5
 8005dee:	b003      	add	sp, #12
 8005df0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005df2:	6869      	ldr	r1, [r5, #4]
 8005df4:	9301      	str	r3, [sp, #4]
 8005df6:	3101      	adds	r1, #1
 8005df8:	4630      	mov	r0, r6
 8005dfa:	f7ff ffa3 	bl	8005d44 <_Balloc>
 8005dfe:	692a      	ldr	r2, [r5, #16]
 8005e00:	3202      	adds	r2, #2
 8005e02:	f105 010c 	add.w	r1, r5, #12
 8005e06:	4607      	mov	r7, r0
 8005e08:	0092      	lsls	r2, r2, #2
 8005e0a:	f100 000c 	add.w	r0, r0, #12
 8005e0e:	f7ff ff51 	bl	8005cb4 <memcpy>
 8005e12:	6869      	ldr	r1, [r5, #4]
 8005e14:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 8005e16:	9b01      	ldr	r3, [sp, #4]
 8005e18:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 8005e1c:	6028      	str	r0, [r5, #0]
 8005e1e:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 8005e22:	463d      	mov	r5, r7
 8005e24:	e7dd      	b.n	8005de2 <__multadd+0x3e>
 8005e26:	bf00      	nop

08005e28 <__s2b>:
 8005e28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e2c:	461e      	mov	r6, r3
 8005e2e:	f648 6339 	movw	r3, #36409	; 0x8e39
 8005e32:	f106 0408 	add.w	r4, r6, #8
 8005e36:	f6c3 03e3 	movt	r3, #14563	; 0x38e3
 8005e3a:	fb83 5304 	smull	r5, r3, r3, r4
 8005e3e:	17e4      	asrs	r4, r4, #31
 8005e40:	ebc4 0363 	rsb	r3, r4, r3, asr #1
 8005e44:	460f      	mov	r7, r1
 8005e46:	2100      	movs	r1, #0
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	4604      	mov	r4, r0
 8005e4c:	4690      	mov	r8, r2
 8005e4e:	dd05      	ble.n	8005e5c <__s2b+0x34>
 8005e50:	2201      	movs	r2, #1
 8005e52:	2100      	movs	r1, #0
 8005e54:	0052      	lsls	r2, r2, #1
 8005e56:	3101      	adds	r1, #1
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	dcfb      	bgt.n	8005e54 <__s2b+0x2c>
 8005e5c:	4620      	mov	r0, r4
 8005e5e:	f7ff ff71 	bl	8005d44 <_Balloc>
 8005e62:	9b08      	ldr	r3, [sp, #32]
 8005e64:	6143      	str	r3, [r0, #20]
 8005e66:	2301      	movs	r3, #1
 8005e68:	f1b8 0f09 	cmp.w	r8, #9
 8005e6c:	4601      	mov	r1, r0
 8005e6e:	6103      	str	r3, [r0, #16]
 8005e70:	dd23      	ble.n	8005eba <__s2b+0x92>
 8005e72:	f107 0909 	add.w	r9, r7, #9
 8005e76:	464d      	mov	r5, r9
 8005e78:	4447      	add	r7, r8
 8005e7a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005e7e:	220a      	movs	r2, #10
 8005e80:	3b30      	subs	r3, #48	; 0x30
 8005e82:	4620      	mov	r0, r4
 8005e84:	f7ff ff8e 	bl	8005da4 <__multadd>
 8005e88:	42bd      	cmp	r5, r7
 8005e8a:	4601      	mov	r1, r0
 8005e8c:	d1f5      	bne.n	8005e7a <__s2b+0x52>
 8005e8e:	eb09 0708 	add.w	r7, r9, r8
 8005e92:	3f08      	subs	r7, #8
 8005e94:	4546      	cmp	r6, r8
 8005e96:	dd0d      	ble.n	8005eb4 <__s2b+0x8c>
 8005e98:	ebc8 0707 	rsb	r7, r8, r7
 8005e9c:	f817 3008 	ldrb.w	r3, [r7, r8]
 8005ea0:	220a      	movs	r2, #10
 8005ea2:	3b30      	subs	r3, #48	; 0x30
 8005ea4:	4620      	mov	r0, r4
 8005ea6:	f7ff ff7d 	bl	8005da4 <__multadd>
 8005eaa:	f108 0801 	add.w	r8, r8, #1
 8005eae:	45b0      	cmp	r8, r6
 8005eb0:	4601      	mov	r1, r0
 8005eb2:	d1f3      	bne.n	8005e9c <__s2b+0x74>
 8005eb4:	4608      	mov	r0, r1
 8005eb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005eba:	370a      	adds	r7, #10
 8005ebc:	f04f 0809 	mov.w	r8, #9
 8005ec0:	e7e8      	b.n	8005e94 <__s2b+0x6c>
 8005ec2:	bf00      	nop

08005ec4 <__hi0bits>:
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	2000      	movs	r0, #0
 8005ec8:	0c1a      	lsrs	r2, r3, #16
 8005eca:	d101      	bne.n	8005ed0 <__hi0bits+0xc>
 8005ecc:	041b      	lsls	r3, r3, #16
 8005ece:	2010      	movs	r0, #16
 8005ed0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005ed4:	d101      	bne.n	8005eda <__hi0bits+0x16>
 8005ed6:	3008      	adds	r0, #8
 8005ed8:	021b      	lsls	r3, r3, #8
 8005eda:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005ede:	d101      	bne.n	8005ee4 <__hi0bits+0x20>
 8005ee0:	3004      	adds	r0, #4
 8005ee2:	011b      	lsls	r3, r3, #4
 8005ee4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005ee8:	d101      	bne.n	8005eee <__hi0bits+0x2a>
 8005eea:	3002      	adds	r0, #2
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	db02      	blt.n	8005ef8 <__hi0bits+0x34>
 8005ef2:	005b      	lsls	r3, r3, #1
 8005ef4:	d401      	bmi.n	8005efa <__hi0bits+0x36>
 8005ef6:	2020      	movs	r0, #32
 8005ef8:	4770      	bx	lr
 8005efa:	3001      	adds	r0, #1
 8005efc:	4770      	bx	lr
 8005efe:	bf00      	nop

08005f00 <__lo0bits>:
 8005f00:	6803      	ldr	r3, [r0, #0]
 8005f02:	4602      	mov	r2, r0
 8005f04:	f013 0007 	ands.w	r0, r3, #7
 8005f08:	d007      	beq.n	8005f1a <__lo0bits+0x1a>
 8005f0a:	07d9      	lsls	r1, r3, #31
 8005f0c:	d41f      	bmi.n	8005f4e <__lo0bits+0x4e>
 8005f0e:	0798      	lsls	r0, r3, #30
 8005f10:	d41f      	bmi.n	8005f52 <__lo0bits+0x52>
 8005f12:	089b      	lsrs	r3, r3, #2
 8005f14:	6013      	str	r3, [r2, #0]
 8005f16:	2002      	movs	r0, #2
 8005f18:	4770      	bx	lr
 8005f1a:	b299      	uxth	r1, r3
 8005f1c:	b909      	cbnz	r1, 8005f22 <__lo0bits+0x22>
 8005f1e:	0c1b      	lsrs	r3, r3, #16
 8005f20:	2010      	movs	r0, #16
 8005f22:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005f26:	d101      	bne.n	8005f2c <__lo0bits+0x2c>
 8005f28:	3008      	adds	r0, #8
 8005f2a:	0a1b      	lsrs	r3, r3, #8
 8005f2c:	0719      	lsls	r1, r3, #28
 8005f2e:	d101      	bne.n	8005f34 <__lo0bits+0x34>
 8005f30:	3004      	adds	r0, #4
 8005f32:	091b      	lsrs	r3, r3, #4
 8005f34:	0799      	lsls	r1, r3, #30
 8005f36:	d101      	bne.n	8005f3c <__lo0bits+0x3c>
 8005f38:	3002      	adds	r0, #2
 8005f3a:	089b      	lsrs	r3, r3, #2
 8005f3c:	07d9      	lsls	r1, r3, #31
 8005f3e:	d404      	bmi.n	8005f4a <__lo0bits+0x4a>
 8005f40:	085b      	lsrs	r3, r3, #1
 8005f42:	d101      	bne.n	8005f48 <__lo0bits+0x48>
 8005f44:	2020      	movs	r0, #32
 8005f46:	4770      	bx	lr
 8005f48:	3001      	adds	r0, #1
 8005f4a:	6013      	str	r3, [r2, #0]
 8005f4c:	4770      	bx	lr
 8005f4e:	2000      	movs	r0, #0
 8005f50:	4770      	bx	lr
 8005f52:	085b      	lsrs	r3, r3, #1
 8005f54:	6013      	str	r3, [r2, #0]
 8005f56:	2001      	movs	r0, #1
 8005f58:	4770      	bx	lr
 8005f5a:	bf00      	nop

08005f5c <__i2b>:
 8005f5c:	b510      	push	{r4, lr}
 8005f5e:	460c      	mov	r4, r1
 8005f60:	2101      	movs	r1, #1
 8005f62:	f7ff feef 	bl	8005d44 <_Balloc>
 8005f66:	2201      	movs	r2, #1
 8005f68:	6144      	str	r4, [r0, #20]
 8005f6a:	6102      	str	r2, [r0, #16]
 8005f6c:	bd10      	pop	{r4, pc}
 8005f6e:	bf00      	nop

08005f70 <__multiply>:
 8005f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f74:	690f      	ldr	r7, [r1, #16]
 8005f76:	6916      	ldr	r6, [r2, #16]
 8005f78:	42b7      	cmp	r7, r6
 8005f7a:	b085      	sub	sp, #20
 8005f7c:	460d      	mov	r5, r1
 8005f7e:	4692      	mov	sl, r2
 8005f80:	da04      	bge.n	8005f8c <__multiply+0x1c>
 8005f82:	463a      	mov	r2, r7
 8005f84:	4655      	mov	r5, sl
 8005f86:	4637      	mov	r7, r6
 8005f88:	468a      	mov	sl, r1
 8005f8a:	4616      	mov	r6, r2
 8005f8c:	68ab      	ldr	r3, [r5, #8]
 8005f8e:	6869      	ldr	r1, [r5, #4]
 8005f90:	19bc      	adds	r4, r7, r6
 8005f92:	429c      	cmp	r4, r3
 8005f94:	bfc8      	it	gt
 8005f96:	3101      	addgt	r1, #1
 8005f98:	f7ff fed4 	bl	8005d44 <_Balloc>
 8005f9c:	1d21      	adds	r1, r4, #4
 8005f9e:	eb00 0b81 	add.w	fp, r0, r1, lsl #2
 8005fa2:	f100 0914 	add.w	r9, r0, #20
 8005fa6:	f10b 0b04 	add.w	fp, fp, #4
 8005faa:	45d9      	cmp	r9, fp
 8005fac:	9000      	str	r0, [sp, #0]
 8005fae:	9101      	str	r1, [sp, #4]
 8005fb0:	d205      	bcs.n	8005fbe <__multiply+0x4e>
 8005fb2:	464b      	mov	r3, r9
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	f843 2b04 	str.w	r2, [r3], #4
 8005fba:	459b      	cmp	fp, r3
 8005fbc:	d8fb      	bhi.n	8005fb6 <__multiply+0x46>
 8005fbe:	eb0a 0686 	add.w	r6, sl, r6, lsl #2
 8005fc2:	eb05 0787 	add.w	r7, r5, r7, lsl #2
 8005fc6:	f10a 0a14 	add.w	sl, sl, #20
 8005fca:	f106 0814 	add.w	r8, r6, #20
 8005fce:	3514      	adds	r5, #20
 8005fd0:	3714      	adds	r7, #20
 8005fd2:	45c2      	cmp	sl, r8
 8005fd4:	d24f      	bcs.n	8006076 <__multiply+0x106>
 8005fd6:	f8cd b008 	str.w	fp, [sp, #8]
 8005fda:	9403      	str	r4, [sp, #12]
 8005fdc:	46ab      	mov	fp, r5
 8005fde:	f85a 5b04 	ldr.w	r5, [sl], #4
 8005fe2:	b2ac      	uxth	r4, r5
 8005fe4:	b1e4      	cbz	r4, 8006020 <__multiply+0xb0>
 8005fe6:	465a      	mov	r2, fp
 8005fe8:	464b      	mov	r3, r9
 8005fea:	2100      	movs	r1, #0
 8005fec:	f852 6b04 	ldr.w	r6, [r2], #4
 8005ff0:	681d      	ldr	r5, [r3, #0]
 8005ff2:	b2b0      	uxth	r0, r6
 8005ff4:	fa11 f185 	uxtah	r1, r1, r5
 8005ff8:	0c36      	lsrs	r6, r6, #16
 8005ffa:	0c2d      	lsrs	r5, r5, #16
 8005ffc:	fb04 1000 	mla	r0, r4, r0, r1
 8006000:	fb04 5106 	mla	r1, r4, r6, r5
 8006004:	eb01 4110 	add.w	r1, r1, r0, lsr #16
 8006008:	b280      	uxth	r0, r0
 800600a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800600e:	0c09      	lsrs	r1, r1, #16
 8006010:	4297      	cmp	r7, r2
 8006012:	461d      	mov	r5, r3
 8006014:	f843 0b04 	str.w	r0, [r3], #4
 8006018:	d8e8      	bhi.n	8005fec <__multiply+0x7c>
 800601a:	6069      	str	r1, [r5, #4]
 800601c:	f85a 5c04 	ldr.w	r5, [sl, #-4]
 8006020:	0c2d      	lsrs	r5, r5, #16
 8006022:	d021      	beq.n	8006068 <__multiply+0xf8>
 8006024:	f8d9 6000 	ldr.w	r6, [r9]
 8006028:	465b      	mov	r3, fp
 800602a:	4630      	mov	r0, r6
 800602c:	4649      	mov	r1, r9
 800602e:	f04f 0c00 	mov.w	ip, #0
 8006032:	e000      	b.n	8006036 <__multiply+0xc6>
 8006034:	4611      	mov	r1, r2
 8006036:	881a      	ldrh	r2, [r3, #0]
 8006038:	eb0c 4c10 	add.w	ip, ip, r0, lsr #16
 800603c:	fb05 cc02 	mla	ip, r5, r2, ip
 8006040:	b2b6      	uxth	r6, r6
 8006042:	460a      	mov	r2, r1
 8006044:	ea46 460c 	orr.w	r6, r6, ip, lsl #16
 8006048:	f842 6b04 	str.w	r6, [r2], #4
 800604c:	f853 6b04 	ldr.w	r6, [r3], #4
 8006050:	6848      	ldr	r0, [r1, #4]
 8006052:	0c36      	lsrs	r6, r6, #16
 8006054:	b284      	uxth	r4, r0
 8006056:	fb05 4606 	mla	r6, r5, r6, r4
 800605a:	eb06 461c 	add.w	r6, r6, ip, lsr #16
 800605e:	429f      	cmp	r7, r3
 8006060:	ea4f 4c16 	mov.w	ip, r6, lsr #16
 8006064:	d8e6      	bhi.n	8006034 <__multiply+0xc4>
 8006066:	604e      	str	r6, [r1, #4]
 8006068:	45d0      	cmp	r8, sl
 800606a:	f109 0904 	add.w	r9, r9, #4
 800606e:	d8b6      	bhi.n	8005fde <__multiply+0x6e>
 8006070:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006074:	9c03      	ldr	r4, [sp, #12]
 8006076:	2c00      	cmp	r4, #0
 8006078:	dd0c      	ble.n	8006094 <__multiply+0x124>
 800607a:	e89d 0006 	ldmia.w	sp, {r1, r2}
 800607e:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 8006082:	b93b      	cbnz	r3, 8006094 <__multiply+0x124>
 8006084:	f1ab 0b04 	sub.w	fp, fp, #4
 8006088:	e002      	b.n	8006090 <__multiply+0x120>
 800608a:	f85b 3d04 	ldr.w	r3, [fp, #-4]!
 800608e:	b90b      	cbnz	r3, 8006094 <__multiply+0x124>
 8006090:	3c01      	subs	r4, #1
 8006092:	d1fa      	bne.n	800608a <__multiply+0x11a>
 8006094:	9a00      	ldr	r2, [sp, #0]
 8006096:	6114      	str	r4, [r2, #16]
 8006098:	4610      	mov	r0, r2
 800609a:	b005      	add	sp, #20
 800609c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080060a0 <__pow5mult>:
 80060a0:	f012 0303 	ands.w	r3, r2, #3
 80060a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060a8:	4615      	mov	r5, r2
 80060aa:	4604      	mov	r4, r0
 80060ac:	4688      	mov	r8, r1
 80060ae:	d12d      	bne.n	800610c <__pow5mult+0x6c>
 80060b0:	10ad      	asrs	r5, r5, #2
 80060b2:	d01d      	beq.n	80060f0 <__pow5mult+0x50>
 80060b4:	6ca7      	ldr	r7, [r4, #72]	; 0x48
 80060b6:	b92f      	cbnz	r7, 80060c4 <__pow5mult+0x24>
 80060b8:	e031      	b.n	800611e <__pow5mult+0x7e>
 80060ba:	106d      	asrs	r5, r5, #1
 80060bc:	d018      	beq.n	80060f0 <__pow5mult+0x50>
 80060be:	683e      	ldr	r6, [r7, #0]
 80060c0:	b1ce      	cbz	r6, 80060f6 <__pow5mult+0x56>
 80060c2:	4637      	mov	r7, r6
 80060c4:	07e8      	lsls	r0, r5, #31
 80060c6:	d5f8      	bpl.n	80060ba <__pow5mult+0x1a>
 80060c8:	4641      	mov	r1, r8
 80060ca:	463a      	mov	r2, r7
 80060cc:	4620      	mov	r0, r4
 80060ce:	f7ff ff4f 	bl	8005f70 <__multiply>
 80060d2:	f1b8 0f00 	cmp.w	r8, #0
 80060d6:	d017      	beq.n	8006108 <__pow5mult+0x68>
 80060d8:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80060dc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80060de:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80060e2:	106d      	asrs	r5, r5, #1
 80060e4:	f8c8 1000 	str.w	r1, [r8]
 80060e8:	f843 8022 	str.w	r8, [r3, r2, lsl #2]
 80060ec:	4680      	mov	r8, r0
 80060ee:	d1e6      	bne.n	80060be <__pow5mult+0x1e>
 80060f0:	4640      	mov	r0, r8
 80060f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060f6:	4639      	mov	r1, r7
 80060f8:	463a      	mov	r2, r7
 80060fa:	4620      	mov	r0, r4
 80060fc:	f7ff ff38 	bl	8005f70 <__multiply>
 8006100:	6038      	str	r0, [r7, #0]
 8006102:	6006      	str	r6, [r0, #0]
 8006104:	4607      	mov	r7, r0
 8006106:	e7dd      	b.n	80060c4 <__pow5mult+0x24>
 8006108:	4680      	mov	r8, r0
 800610a:	e7d6      	b.n	80060ba <__pow5mult+0x1a>
 800610c:	1e5e      	subs	r6, r3, #1
 800610e:	4a09      	ldr	r2, [pc, #36]	; (8006134 <__pow5mult+0x94>)
 8006110:	2300      	movs	r3, #0
 8006112:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 8006116:	f7ff fe45 	bl	8005da4 <__multadd>
 800611a:	4680      	mov	r8, r0
 800611c:	e7c8      	b.n	80060b0 <__pow5mult+0x10>
 800611e:	4620      	mov	r0, r4
 8006120:	f240 2171 	movw	r1, #625	; 0x271
 8006124:	f7ff ff1a 	bl	8005f5c <__i2b>
 8006128:	2300      	movs	r3, #0
 800612a:	64a0      	str	r0, [r4, #72]	; 0x48
 800612c:	4607      	mov	r7, r0
 800612e:	6003      	str	r3, [r0, #0]
 8006130:	e7c8      	b.n	80060c4 <__pow5mult+0x24>
 8006132:	bf00      	nop
 8006134:	080083b0 	.word	0x080083b0

08006138 <__lshift>:
 8006138:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800613c:	4691      	mov	r9, r2
 800613e:	690a      	ldr	r2, [r1, #16]
 8006140:	688b      	ldr	r3, [r1, #8]
 8006142:	ea4f 1769 	mov.w	r7, r9, asr #5
 8006146:	eb07 0b02 	add.w	fp, r7, r2
 800614a:	f10b 0501 	add.w	r5, fp, #1
 800614e:	429d      	cmp	r5, r3
 8006150:	460c      	mov	r4, r1
 8006152:	4606      	mov	r6, r0
 8006154:	6849      	ldr	r1, [r1, #4]
 8006156:	dd03      	ble.n	8006160 <__lshift+0x28>
 8006158:	005b      	lsls	r3, r3, #1
 800615a:	3101      	adds	r1, #1
 800615c:	429d      	cmp	r5, r3
 800615e:	dcfb      	bgt.n	8006158 <__lshift+0x20>
 8006160:	4630      	mov	r0, r6
 8006162:	f7ff fdef 	bl	8005d44 <_Balloc>
 8006166:	2f00      	cmp	r7, #0
 8006168:	f100 0314 	add.w	r3, r0, #20
 800616c:	dd09      	ble.n	8006182 <__lshift+0x4a>
 800616e:	2200      	movs	r2, #0
 8006170:	4611      	mov	r1, r2
 8006172:	3201      	adds	r2, #1
 8006174:	42ba      	cmp	r2, r7
 8006176:	f843 1b04 	str.w	r1, [r3], #4
 800617a:	d1fa      	bne.n	8006172 <__lshift+0x3a>
 800617c:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 8006180:	3314      	adds	r3, #20
 8006182:	6922      	ldr	r2, [r4, #16]
 8006184:	f019 091f 	ands.w	r9, r9, #31
 8006188:	eb04 0c82 	add.w	ip, r4, r2, lsl #2
 800618c:	f104 0114 	add.w	r1, r4, #20
 8006190:	f10c 0c14 	add.w	ip, ip, #20
 8006194:	d022      	beq.n	80061dc <__lshift+0xa4>
 8006196:	f1c9 0a20 	rsb	sl, r9, #32
 800619a:	2200      	movs	r2, #0
 800619c:	e000      	b.n	80061a0 <__lshift+0x68>
 800619e:	463b      	mov	r3, r7
 80061a0:	f8d1 8000 	ldr.w	r8, [r1]
 80061a4:	461f      	mov	r7, r3
 80061a6:	fa08 f809 	lsl.w	r8, r8, r9
 80061aa:	ea48 0202 	orr.w	r2, r8, r2
 80061ae:	f847 2b04 	str.w	r2, [r7], #4
 80061b2:	f851 2b04 	ldr.w	r2, [r1], #4
 80061b6:	458c      	cmp	ip, r1
 80061b8:	fa22 f20a 	lsr.w	r2, r2, sl
 80061bc:	d8ef      	bhi.n	800619e <__lshift+0x66>
 80061be:	605a      	str	r2, [r3, #4]
 80061c0:	b10a      	cbz	r2, 80061c6 <__lshift+0x8e>
 80061c2:	f10b 0502 	add.w	r5, fp, #2
 80061c6:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 80061c8:	6862      	ldr	r2, [r4, #4]
 80061ca:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80061ce:	3d01      	subs	r5, #1
 80061d0:	6105      	str	r5, [r0, #16]
 80061d2:	6021      	str	r1, [r4, #0]
 80061d4:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80061d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061dc:	f851 2b04 	ldr.w	r2, [r1], #4
 80061e0:	458c      	cmp	ip, r1
 80061e2:	f843 2b04 	str.w	r2, [r3], #4
 80061e6:	d9ee      	bls.n	80061c6 <__lshift+0x8e>
 80061e8:	f851 2b04 	ldr.w	r2, [r1], #4
 80061ec:	458c      	cmp	ip, r1
 80061ee:	f843 2b04 	str.w	r2, [r3], #4
 80061f2:	d8f3      	bhi.n	80061dc <__lshift+0xa4>
 80061f4:	e7e7      	b.n	80061c6 <__lshift+0x8e>
 80061f6:	bf00      	nop

080061f8 <__mcmp>:
 80061f8:	4603      	mov	r3, r0
 80061fa:	690a      	ldr	r2, [r1, #16]
 80061fc:	6900      	ldr	r0, [r0, #16]
 80061fe:	1a80      	subs	r0, r0, r2
 8006200:	b430      	push	{r4, r5}
 8006202:	d111      	bne.n	8006228 <__mcmp+0x30>
 8006204:	3204      	adds	r2, #4
 8006206:	0094      	lsls	r4, r2, #2
 8006208:	191a      	adds	r2, r3, r4
 800620a:	1909      	adds	r1, r1, r4
 800620c:	3314      	adds	r3, #20
 800620e:	3204      	adds	r2, #4
 8006210:	3104      	adds	r1, #4
 8006212:	f852 5c04 	ldr.w	r5, [r2, #-4]
 8006216:	f851 4c04 	ldr.w	r4, [r1, #-4]
 800621a:	3a04      	subs	r2, #4
 800621c:	42a5      	cmp	r5, r4
 800621e:	f1a1 0104 	sub.w	r1, r1, #4
 8006222:	d103      	bne.n	800622c <__mcmp+0x34>
 8006224:	4293      	cmp	r3, r2
 8006226:	d3f4      	bcc.n	8006212 <__mcmp+0x1a>
 8006228:	bc30      	pop	{r4, r5}
 800622a:	4770      	bx	lr
 800622c:	bf38      	it	cc
 800622e:	f04f 30ff 	movcc.w	r0, #4294967295	; 0xffffffff
 8006232:	d3f9      	bcc.n	8006228 <__mcmp+0x30>
 8006234:	2001      	movs	r0, #1
 8006236:	e7f7      	b.n	8006228 <__mcmp+0x30>

08006238 <__mdiff>:
 8006238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800623c:	460c      	mov	r4, r1
 800623e:	4606      	mov	r6, r0
 8006240:	4611      	mov	r1, r2
 8006242:	4620      	mov	r0, r4
 8006244:	4615      	mov	r5, r2
 8006246:	f7ff ffd7 	bl	80061f8 <__mcmp>
 800624a:	1e07      	subs	r7, r0, #0
 800624c:	d058      	beq.n	8006300 <__mdiff+0xc8>
 800624e:	db52      	blt.n	80062f6 <__mdiff+0xbe>
 8006250:	2700      	movs	r7, #0
 8006252:	4630      	mov	r0, r6
 8006254:	6861      	ldr	r1, [r4, #4]
 8006256:	f7ff fd75 	bl	8005d44 <_Balloc>
 800625a:	f8d4 c010 	ldr.w	ip, [r4, #16]
 800625e:	692b      	ldr	r3, [r5, #16]
 8006260:	60c7      	str	r7, [r0, #12]
 8006262:	eb05 0883 	add.w	r8, r5, r3, lsl #2
 8006266:	eb04 078c 	add.w	r7, r4, ip, lsl #2
 800626a:	3714      	adds	r7, #20
 800626c:	f108 0814 	add.w	r8, r8, #20
 8006270:	3414      	adds	r4, #20
 8006272:	3514      	adds	r5, #20
 8006274:	f100 0914 	add.w	r9, r0, #20
 8006278:	2600      	movs	r6, #0
 800627a:	f854 3b04 	ldr.w	r3, [r4], #4
 800627e:	f855 2b04 	ldr.w	r2, [r5], #4
 8006282:	fa16 f183 	uxtah	r1, r6, r3
 8006286:	fa1f fa82 	uxth.w	sl, r2
 800628a:	0c12      	lsrs	r2, r2, #16
 800628c:	ebc2 4613 	rsb	r6, r2, r3, lsr #16
 8006290:	ebca 0101 	rsb	r1, sl, r1
 8006294:	eb06 4621 	add.w	r6, r6, r1, asr #16
 8006298:	464b      	mov	r3, r9
 800629a:	b289      	uxth	r1, r1
 800629c:	ea41 4106 	orr.w	r1, r1, r6, lsl #16
 80062a0:	f843 1b04 	str.w	r1, [r3], #4
 80062a4:	1436      	asrs	r6, r6, #16
 80062a6:	45a8      	cmp	r8, r5
 80062a8:	4622      	mov	r2, r4
 80062aa:	4699      	mov	r9, r3
 80062ac:	d8e5      	bhi.n	800627a <__mdiff+0x42>
 80062ae:	42a7      	cmp	r7, r4
 80062b0:	4698      	mov	r8, r3
 80062b2:	d914      	bls.n	80062de <__mdiff+0xa6>
 80062b4:	f852 5b04 	ldr.w	r5, [r2], #4
 80062b8:	fa16 f685 	uxtah	r6, r6, r5
 80062bc:	0c2d      	lsrs	r5, r5, #16
 80062be:	eb05 4526 	add.w	r5, r5, r6, asr #16
 80062c2:	b2b6      	uxth	r6, r6
 80062c4:	ea46 4105 	orr.w	r1, r6, r5, lsl #16
 80062c8:	142e      	asrs	r6, r5, #16
 80062ca:	4297      	cmp	r7, r2
 80062cc:	f843 1b04 	str.w	r1, [r3], #4
 80062d0:	d8f0      	bhi.n	80062b4 <__mdiff+0x7c>
 80062d2:	43e3      	mvns	r3, r4
 80062d4:	19db      	adds	r3, r3, r7
 80062d6:	f023 0303 	bic.w	r3, r3, #3
 80062da:	3304      	adds	r3, #4
 80062dc:	4443      	add	r3, r8
 80062de:	b931      	cbnz	r1, 80062ee <__mdiff+0xb6>
 80062e0:	3b04      	subs	r3, #4
 80062e2:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80062e6:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 80062ea:	2a00      	cmp	r2, #0
 80062ec:	d0f9      	beq.n	80062e2 <__mdiff+0xaa>
 80062ee:	f8c0 c010 	str.w	ip, [r0, #16]
 80062f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062f6:	4623      	mov	r3, r4
 80062f8:	2701      	movs	r7, #1
 80062fa:	462c      	mov	r4, r5
 80062fc:	461d      	mov	r5, r3
 80062fe:	e7a8      	b.n	8006252 <__mdiff+0x1a>
 8006300:	4630      	mov	r0, r6
 8006302:	4639      	mov	r1, r7
 8006304:	f7ff fd1e 	bl	8005d44 <_Balloc>
 8006308:	2301      	movs	r3, #1
 800630a:	6103      	str	r3, [r0, #16]
 800630c:	6147      	str	r7, [r0, #20]
 800630e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006312:	bf00      	nop

08006314 <__ulp>:
 8006314:	2300      	movs	r3, #0
 8006316:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 800631a:	400b      	ands	r3, r1
 800631c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8006320:	2b00      	cmp	r3, #0
 8006322:	dd02      	ble.n	800632a <__ulp+0x16>
 8006324:	4619      	mov	r1, r3
 8006326:	2000      	movs	r0, #0
 8006328:	4770      	bx	lr
 800632a:	425b      	negs	r3, r3
 800632c:	151b      	asrs	r3, r3, #20
 800632e:	2100      	movs	r1, #0
 8006330:	2b13      	cmp	r3, #19
 8006332:	dd0b      	ble.n	800634c <__ulp+0x38>
 8006334:	2b32      	cmp	r3, #50	; 0x32
 8006336:	dd02      	ble.n	800633e <__ulp+0x2a>
 8006338:	2301      	movs	r3, #1
 800633a:	4618      	mov	r0, r3
 800633c:	4770      	bx	lr
 800633e:	2201      	movs	r2, #1
 8006340:	f1c3 0333 	rsb	r3, r3, #51	; 0x33
 8006344:	fa12 f303 	lsls.w	r3, r2, r3
 8006348:	4618      	mov	r0, r3
 800634a:	4770      	bx	lr
 800634c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006350:	fa52 f103 	asrs.w	r1, r2, r3
 8006354:	2000      	movs	r0, #0
 8006356:	4770      	bx	lr

08006358 <__b2d>:
 8006358:	6902      	ldr	r2, [r0, #16]
 800635a:	3204      	adds	r2, #4
 800635c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800635e:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 8006362:	4603      	mov	r3, r0
 8006364:	eb00 0482 	add.w	r4, r0, r2, lsl #2
 8006368:	4628      	mov	r0, r5
 800636a:	460f      	mov	r7, r1
 800636c:	f103 0614 	add.w	r6, r3, #20
 8006370:	f7ff fda8 	bl	8005ec4 <__hi0bits>
 8006374:	f1c0 0320 	rsb	r3, r0, #32
 8006378:	280a      	cmp	r0, #10
 800637a:	603b      	str	r3, [r7, #0]
 800637c:	4623      	mov	r3, r4
 800637e:	dc14      	bgt.n	80063aa <__b2d+0x52>
 8006380:	f1c0 010b 	rsb	r1, r0, #11
 8006384:	fa35 f701 	lsrs.w	r7, r5, r1
 8006388:	f047 577f 	orr.w	r7, r7, #1069547520	; 0x3fc00000
 800638c:	42a6      	cmp	r6, r4
 800638e:	f447 1340 	orr.w	r3, r7, #3145728	; 0x300000
 8006392:	d22e      	bcs.n	80063f2 <__b2d+0x9a>
 8006394:	f854 4c04 	ldr.w	r4, [r4, #-4]
 8006398:	fa34 f101 	lsrs.w	r1, r4, r1
 800639c:	3015      	adds	r0, #21
 800639e:	4085      	lsls	r5, r0
 80063a0:	ea41 0205 	orr.w	r2, r1, r5
 80063a4:	4610      	mov	r0, r2
 80063a6:	4619      	mov	r1, r3
 80063a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063aa:	2100      	movs	r1, #0
 80063ac:	42a6      	cmp	r6, r4
 80063ae:	d202      	bcs.n	80063b6 <__b2d+0x5e>
 80063b0:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80063b4:	3c04      	subs	r4, #4
 80063b6:	f1b0 070b 	subs.w	r7, r0, #11
 80063ba:	bf02      	ittt	eq
 80063bc:	f045 557f 	orreq.w	r5, r5, #1069547520	; 0x3fc00000
 80063c0:	f445 1340 	orreq.w	r3, r5, #3145728	; 0x300000
 80063c4:	460a      	moveq	r2, r1
 80063c6:	d0ed      	beq.n	80063a4 <__b2d+0x4c>
 80063c8:	40bd      	lsls	r5, r7
 80063ca:	f1c0 002b 	rsb	r0, r0, #43	; 0x2b
 80063ce:	f045 557f 	orr.w	r5, r5, #1069547520	; 0x3fc00000
 80063d2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80063d6:	fa21 fc00 	lsr.w	ip, r1, r0
 80063da:	42b4      	cmp	r4, r6
 80063dc:	ea45 030c 	orr.w	r3, r5, ip
 80063e0:	d909      	bls.n	80063f6 <__b2d+0x9e>
 80063e2:	f854 4c04 	ldr.w	r4, [r4, #-4]
 80063e6:	fa34 f000 	lsrs.w	r0, r4, r0
 80063ea:	40b9      	lsls	r1, r7
 80063ec:	ea40 0201 	orr.w	r2, r0, r1
 80063f0:	e7d8      	b.n	80063a4 <__b2d+0x4c>
 80063f2:	2100      	movs	r1, #0
 80063f4:	e7d2      	b.n	800639c <__b2d+0x44>
 80063f6:	2000      	movs	r0, #0
 80063f8:	e7f7      	b.n	80063ea <__b2d+0x92>
 80063fa:	bf00      	nop

080063fc <__d2b>:
 80063fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006400:	b083      	sub	sp, #12
 8006402:	2101      	movs	r1, #1
 8006404:	461d      	mov	r5, r3
 8006406:	4614      	mov	r4, r2
 8006408:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800640a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800640c:	f7ff fc9a 	bl	8005d44 <_Balloc>
 8006410:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
 8006414:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006418:	f3c5 590a 	ubfx	r9, r5, #20, #11
 800641c:	4680      	mov	r8, r0
 800641e:	9301      	str	r3, [sp, #4]
 8006420:	f1b9 0f00 	cmp.w	r9, #0
 8006424:	d002      	beq.n	800642c <__d2b+0x30>
 8006426:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800642a:	9301      	str	r3, [sp, #4]
 800642c:	2c00      	cmp	r4, #0
 800642e:	d025      	beq.n	800647c <__d2b+0x80>
 8006430:	a802      	add	r0, sp, #8
 8006432:	f840 4d08 	str.w	r4, [r0, #-8]!
 8006436:	4668      	mov	r0, sp
 8006438:	f7ff fd62 	bl	8005f00 <__lo0bits>
 800643c:	9b01      	ldr	r3, [sp, #4]
 800643e:	2800      	cmp	r0, #0
 8006440:	d132      	bne.n	80064a8 <__d2b+0xac>
 8006442:	9a00      	ldr	r2, [sp, #0]
 8006444:	f8c8 2014 	str.w	r2, [r8, #20]
 8006448:	2b00      	cmp	r3, #0
 800644a:	bf0c      	ite	eq
 800644c:	2401      	moveq	r4, #1
 800644e:	2402      	movne	r4, #2
 8006450:	f8c8 3018 	str.w	r3, [r8, #24]
 8006454:	f8c8 4010 	str.w	r4, [r8, #16]
 8006458:	f1b9 0f00 	cmp.w	r9, #0
 800645c:	d11b      	bne.n	8006496 <__d2b+0x9a>
 800645e:	eb08 0284 	add.w	r2, r8, r4, lsl #2
 8006462:	f2a0 4332 	subw	r3, r0, #1074	; 0x432
 8006466:	6910      	ldr	r0, [r2, #16]
 8006468:	603b      	str	r3, [r7, #0]
 800646a:	f7ff fd2b 	bl	8005ec4 <__hi0bits>
 800646e:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 8006472:	6030      	str	r0, [r6, #0]
 8006474:	4640      	mov	r0, r8
 8006476:	b003      	add	sp, #12
 8006478:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800647c:	a801      	add	r0, sp, #4
 800647e:	f7ff fd3f 	bl	8005f00 <__lo0bits>
 8006482:	9b01      	ldr	r3, [sp, #4]
 8006484:	2401      	movs	r4, #1
 8006486:	f8c8 3014 	str.w	r3, [r8, #20]
 800648a:	f8c8 4010 	str.w	r4, [r8, #16]
 800648e:	3020      	adds	r0, #32
 8006490:	f1b9 0f00 	cmp.w	r9, #0
 8006494:	d0e3      	beq.n	800645e <__d2b+0x62>
 8006496:	f2a9 4933 	subw	r9, r9, #1075	; 0x433
 800649a:	eb09 0300 	add.w	r3, r9, r0
 800649e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80064a2:	603b      	str	r3, [r7, #0]
 80064a4:	6030      	str	r0, [r6, #0]
 80064a6:	e7e5      	b.n	8006474 <__d2b+0x78>
 80064a8:	f1c0 0220 	rsb	r2, r0, #32
 80064ac:	9900      	ldr	r1, [sp, #0]
 80064ae:	fa13 f202 	lsls.w	r2, r3, r2
 80064b2:	430a      	orrs	r2, r1
 80064b4:	40c3      	lsrs	r3, r0
 80064b6:	f8c8 2014 	str.w	r2, [r8, #20]
 80064ba:	9301      	str	r3, [sp, #4]
 80064bc:	e7c4      	b.n	8006448 <__d2b+0x4c>
 80064be:	bf00      	nop

080064c0 <__ratio>:
 80064c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80064c4:	b083      	sub	sp, #12
 80064c6:	460d      	mov	r5, r1
 80064c8:	4669      	mov	r1, sp
 80064ca:	4604      	mov	r4, r0
 80064cc:	f7ff ff44 	bl	8006358 <__b2d>
 80064d0:	4689      	mov	r9, r1
 80064d2:	4680      	mov	r8, r0
 80064d4:	a901      	add	r1, sp, #4
 80064d6:	4628      	mov	r0, r5
 80064d8:	f7ff ff3e 	bl	8006358 <__b2d>
 80064dc:	460f      	mov	r7, r1
 80064de:	e89d 000a 	ldmia.w	sp, {r1, r3}
 80064e2:	692a      	ldr	r2, [r5, #16]
 80064e4:	6924      	ldr	r4, [r4, #16]
 80064e6:	1acb      	subs	r3, r1, r3
 80064e8:	1aa4      	subs	r4, r4, r2
 80064ea:	eb03 1444 	add.w	r4, r3, r4, lsl #5
 80064ee:	2c00      	cmp	r4, #0
 80064f0:	4606      	mov	r6, r0
 80064f2:	464b      	mov	r3, r9
 80064f4:	4639      	mov	r1, r7
 80064f6:	bfcb      	itete	gt
 80064f8:	eb09 5304 	addgt.w	r3, r9, r4, lsl #20
 80064fc:	eba7 5104 	suble.w	r1, r7, r4, lsl #20
 8006500:	4699      	movgt	r9, r3
 8006502:	460f      	movle	r7, r1
 8006504:	bfcc      	ite	gt
 8006506:	46c0      	nopgt			; (mov r8, r8)
 8006508:	4636      	movle	r6, r6
 800650a:	4640      	mov	r0, r8
 800650c:	4649      	mov	r1, r9
 800650e:	4632      	mov	r2, r6
 8006510:	463b      	mov	r3, r7
 8006512:	f001 fc53 	bl	8007dbc <__aeabi_ddiv>
 8006516:	b003      	add	sp, #12
 8006518:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800651c <_mprec_log10>:
 800651c:	b510      	push	{r4, lr}
 800651e:	4604      	mov	r4, r0
 8006520:	2100      	movs	r1, #0
 8006522:	2000      	movs	r0, #0
 8006524:	2c17      	cmp	r4, #23
 8006526:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 800652a:	dd08      	ble.n	800653e <_mprec_log10+0x22>
 800652c:	2300      	movs	r3, #0
 800652e:	2200      	movs	r2, #0
 8006530:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8006534:	f001 fb18 	bl	8007b68 <__aeabi_dmul>
 8006538:	3c01      	subs	r4, #1
 800653a:	d1f7      	bne.n	800652c <_mprec_log10+0x10>
 800653c:	bd10      	pop	{r4, pc}
 800653e:	4b03      	ldr	r3, [pc, #12]	; (800654c <_mprec_log10+0x30>)
 8006540:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8006544:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 8006548:	bd10      	pop	{r4, pc}
 800654a:	bf00      	nop
 800654c:	080083b0 	.word	0x080083b0

08006550 <__copybits>:
 8006550:	6913      	ldr	r3, [r2, #16]
 8006552:	3901      	subs	r1, #1
 8006554:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006558:	1149      	asrs	r1, r1, #5
 800655a:	b470      	push	{r4, r5, r6}
 800655c:	3314      	adds	r3, #20
 800655e:	f102 0414 	add.w	r4, r2, #20
 8006562:	3101      	adds	r1, #1
 8006564:	429c      	cmp	r4, r3
 8006566:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800656a:	d20c      	bcs.n	8006586 <__copybits+0x36>
 800656c:	4605      	mov	r5, r0
 800656e:	f854 6b04 	ldr.w	r6, [r4], #4
 8006572:	42a3      	cmp	r3, r4
 8006574:	f845 6b04 	str.w	r6, [r5], #4
 8006578:	d8f9      	bhi.n	800656e <__copybits+0x1e>
 800657a:	1a9b      	subs	r3, r3, r2
 800657c:	3b15      	subs	r3, #21
 800657e:	f023 0303 	bic.w	r3, r3, #3
 8006582:	3304      	adds	r3, #4
 8006584:	18c0      	adds	r0, r0, r3
 8006586:	4281      	cmp	r1, r0
 8006588:	d904      	bls.n	8006594 <__copybits+0x44>
 800658a:	2300      	movs	r3, #0
 800658c:	f840 3b04 	str.w	r3, [r0], #4
 8006590:	4281      	cmp	r1, r0
 8006592:	d8fb      	bhi.n	800658c <__copybits+0x3c>
 8006594:	bc70      	pop	{r4, r5, r6}
 8006596:	4770      	bx	lr

08006598 <__any_on>:
 8006598:	6902      	ldr	r2, [r0, #16]
 800659a:	114b      	asrs	r3, r1, #5
 800659c:	429a      	cmp	r2, r3
 800659e:	b410      	push	{r4}
 80065a0:	db01      	blt.n	80065a6 <__any_on+0xe>
 80065a2:	461a      	mov	r2, r3
 80065a4:	dc13      	bgt.n	80065ce <__any_on+0x36>
 80065a6:	3204      	adds	r2, #4
 80065a8:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 80065ac:	f100 0114 	add.w	r1, r0, #20
 80065b0:	1d1c      	adds	r4, r3, #4
 80065b2:	42a1      	cmp	r1, r4
 80065b4:	d218      	bcs.n	80065e8 <__any_on+0x50>
 80065b6:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 80065ba:	b92a      	cbnz	r2, 80065c8 <__any_on+0x30>
 80065bc:	4299      	cmp	r1, r3
 80065be:	d213      	bcs.n	80065e8 <__any_on+0x50>
 80065c0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80065c4:	2a00      	cmp	r2, #0
 80065c6:	d0f9      	beq.n	80065bc <__any_on+0x24>
 80065c8:	2001      	movs	r0, #1
 80065ca:	bc10      	pop	{r4}
 80065cc:	4770      	bx	lr
 80065ce:	f011 011f 	ands.w	r1, r1, #31
 80065d2:	d0e8      	beq.n	80065a6 <__any_on+0xe>
 80065d4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80065d8:	695b      	ldr	r3, [r3, #20]
 80065da:	fa33 f401 	lsrs.w	r4, r3, r1
 80065de:	fa14 f101 	lsls.w	r1, r4, r1
 80065e2:	4299      	cmp	r1, r3
 80065e4:	d1f0      	bne.n	80065c8 <__any_on+0x30>
 80065e6:	e7de      	b.n	80065a6 <__any_on+0xe>
 80065e8:	2000      	movs	r0, #0
 80065ea:	e7ee      	b.n	80065ca <__any_on+0x32>

080065ec <__fpclassifyd>:
 80065ec:	ea50 0201 	orrs.w	r2, r0, r1
 80065f0:	b410      	push	{r4}
 80065f2:	460b      	mov	r3, r1
 80065f4:	d102      	bne.n	80065fc <__fpclassifyd+0x10>
 80065f6:	2002      	movs	r0, #2
 80065f8:	bc10      	pop	{r4}
 80065fa:	4770      	bx	lr
 80065fc:	f1d0 0101 	rsbs	r1, r0, #1
 8006600:	bf38      	it	cc
 8006602:	2100      	movcc	r1, #0
 8006604:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006608:	bf08      	it	eq
 800660a:	2800      	cmpeq	r0, #0
 800660c:	d0f3      	beq.n	80065f6 <__fpclassifyd+0xa>
 800660e:	f103 44ff 	add.w	r4, r3, #2139095040	; 0x7f800000
 8006612:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006616:	f504 04e0 	add.w	r4, r4, #7340032	; 0x700000
 800661a:	f6c7 72df 	movt	r2, #32735	; 0x7fdf
 800661e:	f5a3 1080 	sub.w	r0, r3, #1048576	; 0x100000
 8006622:	4290      	cmp	r0, r2
 8006624:	bf88      	it	hi
 8006626:	4294      	cmphi	r4, r2
 8006628:	d801      	bhi.n	800662e <__fpclassifyd+0x42>
 800662a:	2004      	movs	r0, #4
 800662c:	e7e4      	b.n	80065f8 <__fpclassifyd+0xc>
 800662e:	f103 4200 	add.w	r2, r3, #2147483648	; 0x80000000
 8006632:	2003      	movs	r0, #3
 8006634:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006638:	bf28      	it	cs
 800663a:	f5b2 1f80 	cmpcs.w	r2, #1048576	; 0x100000
 800663e:	d3db      	bcc.n	80065f8 <__fpclassifyd+0xc>
 8006640:	2200      	movs	r2, #0
 8006642:	f6c7 72f0 	movt	r2, #32752	; 0x7ff0
 8006646:	f513 1f80 	cmn.w	r3, #1048576	; 0x100000
 800664a:	bf18      	it	ne
 800664c:	4293      	cmpne	r3, r2
 800664e:	bf14      	ite	ne
 8006650:	2300      	movne	r3, #0
 8006652:	2301      	moveq	r3, #1
 8006654:	ea01 0003 	and.w	r0, r1, r3
 8006658:	e7ce      	b.n	80065f8 <__fpclassifyd+0xc>
 800665a:	bf00      	nop

0800665c <_sbrk_r>:
 800665c:	b538      	push	{r3, r4, r5, lr}
 800665e:	4c07      	ldr	r4, [pc, #28]	; (800667c <_sbrk_r+0x20>)
 8006660:	2300      	movs	r3, #0
 8006662:	4605      	mov	r5, r0
 8006664:	4608      	mov	r0, r1
 8006666:	6023      	str	r3, [r4, #0]
 8006668:	f7fc f93a 	bl	80028e0 <_sbrk>
 800666c:	1c43      	adds	r3, r0, #1
 800666e:	d000      	beq.n	8006672 <_sbrk_r+0x16>
 8006670:	bd38      	pop	{r3, r4, r5, pc}
 8006672:	6823      	ldr	r3, [r4, #0]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d0fb      	beq.n	8006670 <_sbrk_r+0x14>
 8006678:	602b      	str	r3, [r5, #0]
 800667a:	bd38      	pop	{r3, r4, r5, pc}
 800667c:	20001678 	.word	0x20001678

08006680 <strcmp>:
 8006680:	ea80 0201 	eor.w	r2, r0, r1
 8006684:	f012 0f03 	tst.w	r2, #3
 8006688:	d13a      	bne.n	8006700 <strcmp_unaligned>
 800668a:	f010 0203 	ands.w	r2, r0, #3
 800668e:	f020 0003 	bic.w	r0, r0, #3
 8006692:	f021 0103 	bic.w	r1, r1, #3
 8006696:	f850 cb04 	ldr.w	ip, [r0], #4
 800669a:	bf08      	it	eq
 800669c:	f851 3b04 	ldreq.w	r3, [r1], #4
 80066a0:	d00d      	beq.n	80066be <strcmp+0x3e>
 80066a2:	f082 0203 	eor.w	r2, r2, #3
 80066a6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80066aa:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80066ae:	fa23 f202 	lsr.w	r2, r3, r2
 80066b2:	f851 3b04 	ldr.w	r3, [r1], #4
 80066b6:	ea4c 0c02 	orr.w	ip, ip, r2
 80066ba:	ea43 0302 	orr.w	r3, r3, r2
 80066be:	bf00      	nop
 80066c0:	f1ac 3201 	sub.w	r2, ip, #16843009	; 0x1010101
 80066c4:	459c      	cmp	ip, r3
 80066c6:	bf01      	itttt	eq
 80066c8:	ea22 020c 	biceq.w	r2, r2, ip
 80066cc:	f012 3f80 	tsteq.w	r2, #2155905152	; 0x80808080
 80066d0:	f850 cb04 	ldreq.w	ip, [r0], #4
 80066d4:	f851 3b04 	ldreq.w	r3, [r1], #4
 80066d8:	d0f2      	beq.n	80066c0 <strcmp+0x40>
 80066da:	ea4f 600c 	mov.w	r0, ip, lsl #24
 80066de:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80066e2:	2801      	cmp	r0, #1
 80066e4:	bf28      	it	cs
 80066e6:	ebb0 6f03 	cmpcs.w	r0, r3, lsl #24
 80066ea:	bf08      	it	eq
 80066ec:	0a1b      	lsreq	r3, r3, #8
 80066ee:	d0f4      	beq.n	80066da <strcmp+0x5a>
 80066f0:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 80066f4:	ea4f 6010 	mov.w	r0, r0, lsr #24
 80066f8:	eba0 0003 	sub.w	r0, r0, r3
 80066fc:	4770      	bx	lr
 80066fe:	bf00      	nop

08006700 <strcmp_unaligned>:
 8006700:	f010 0f03 	tst.w	r0, #3
 8006704:	d00a      	beq.n	800671c <strcmp_unaligned+0x1c>
 8006706:	f810 2b01 	ldrb.w	r2, [r0], #1
 800670a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800670e:	2a01      	cmp	r2, #1
 8006710:	bf28      	it	cs
 8006712:	429a      	cmpcs	r2, r3
 8006714:	d0f4      	beq.n	8006700 <strcmp_unaligned>
 8006716:	eba2 0003 	sub.w	r0, r2, r3
 800671a:	4770      	bx	lr
 800671c:	f84d 5d04 	str.w	r5, [sp, #-4]!
 8006720:	f84d 4d04 	str.w	r4, [sp, #-4]!
 8006724:	f04f 0201 	mov.w	r2, #1
 8006728:	ea42 2202 	orr.w	r2, r2, r2, lsl #8
 800672c:	ea42 4202 	orr.w	r2, r2, r2, lsl #16
 8006730:	f001 0c03 	and.w	ip, r1, #3
 8006734:	f021 0103 	bic.w	r1, r1, #3
 8006738:	f850 4b04 	ldr.w	r4, [r0], #4
 800673c:	f851 5b04 	ldr.w	r5, [r1], #4
 8006740:	f1bc 0f02 	cmp.w	ip, #2
 8006744:	d026      	beq.n	8006794 <strcmp_unaligned+0x94>
 8006746:	d84b      	bhi.n	80067e0 <strcmp_unaligned+0xe0>
 8006748:	f024 4c7f 	bic.w	ip, r4, #4278190080	; 0xff000000
 800674c:	ebbc 2f15 	cmp.w	ip, r5, lsr #8
 8006750:	eba4 0302 	sub.w	r3, r4, r2
 8006754:	ea23 0304 	bic.w	r3, r3, r4
 8006758:	d10d      	bne.n	8006776 <strcmp_unaligned+0x76>
 800675a:	ea13 13c2 	ands.w	r3, r3, r2, lsl #7
 800675e:	bf08      	it	eq
 8006760:	f851 5b04 	ldreq.w	r5, [r1], #4
 8006764:	d10a      	bne.n	800677c <strcmp_unaligned+0x7c>
 8006766:	ea8c 0c04 	eor.w	ip, ip, r4
 800676a:	ebbc 6f05 	cmp.w	ip, r5, lsl #24
 800676e:	d10c      	bne.n	800678a <strcmp_unaligned+0x8a>
 8006770:	f850 4b04 	ldr.w	r4, [r0], #4
 8006774:	e7e8      	b.n	8006748 <strcmp_unaligned+0x48>
 8006776:	ea4f 2515 	mov.w	r5, r5, lsr #8
 800677a:	e05c      	b.n	8006836 <strcmp_unaligned+0x136>
 800677c:	f033 437f 	bics.w	r3, r3, #4278190080	; 0xff000000
 8006780:	d152      	bne.n	8006828 <strcmp_unaligned+0x128>
 8006782:	780d      	ldrb	r5, [r1, #0]
 8006784:	ea4f 6c14 	mov.w	ip, r4, lsr #24
 8006788:	e055      	b.n	8006836 <strcmp_unaligned+0x136>
 800678a:	ea4f 6c14 	mov.w	ip, r4, lsr #24
 800678e:	f005 05ff 	and.w	r5, r5, #255	; 0xff
 8006792:	e050      	b.n	8006836 <strcmp_unaligned+0x136>
 8006794:	ea4f 4c04 	mov.w	ip, r4, lsl #16
 8006798:	eba4 0302 	sub.w	r3, r4, r2
 800679c:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80067a0:	ea23 0304 	bic.w	r3, r3, r4
 80067a4:	ebbc 4f15 	cmp.w	ip, r5, lsr #16
 80067a8:	d117      	bne.n	80067da <strcmp_unaligned+0xda>
 80067aa:	ea13 13c2 	ands.w	r3, r3, r2, lsl #7
 80067ae:	bf08      	it	eq
 80067b0:	f851 5b04 	ldreq.w	r5, [r1], #4
 80067b4:	d107      	bne.n	80067c6 <strcmp_unaligned+0xc6>
 80067b6:	ea8c 0c04 	eor.w	ip, ip, r4
 80067ba:	ebbc 4f05 	cmp.w	ip, r5, lsl #16
 80067be:	d108      	bne.n	80067d2 <strcmp_unaligned+0xd2>
 80067c0:	f850 4b04 	ldr.w	r4, [r0], #4
 80067c4:	e7e6      	b.n	8006794 <strcmp_unaligned+0x94>
 80067c6:	041b      	lsls	r3, r3, #16
 80067c8:	d12e      	bne.n	8006828 <strcmp_unaligned+0x128>
 80067ca:	880d      	ldrh	r5, [r1, #0]
 80067cc:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80067d0:	e031      	b.n	8006836 <strcmp_unaligned+0x136>
 80067d2:	ea4f 4505 	mov.w	r5, r5, lsl #16
 80067d6:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80067da:	ea4f 4515 	mov.w	r5, r5, lsr #16
 80067de:	e02a      	b.n	8006836 <strcmp_unaligned+0x136>
 80067e0:	f004 0cff 	and.w	ip, r4, #255	; 0xff
 80067e4:	ebbc 6f15 	cmp.w	ip, r5, lsr #24
 80067e8:	eba4 0302 	sub.w	r3, r4, r2
 80067ec:	ea23 0304 	bic.w	r3, r3, r4
 80067f0:	d10d      	bne.n	800680e <strcmp_unaligned+0x10e>
 80067f2:	ea13 13c2 	ands.w	r3, r3, r2, lsl #7
 80067f6:	bf08      	it	eq
 80067f8:	f851 5b04 	ldreq.w	r5, [r1], #4
 80067fc:	d10a      	bne.n	8006814 <strcmp_unaligned+0x114>
 80067fe:	ea8c 0c04 	eor.w	ip, ip, r4
 8006802:	ebbc 2f05 	cmp.w	ip, r5, lsl #8
 8006806:	d10a      	bne.n	800681e <strcmp_unaligned+0x11e>
 8006808:	f850 4b04 	ldr.w	r4, [r0], #4
 800680c:	e7e8      	b.n	80067e0 <strcmp_unaligned+0xe0>
 800680e:	ea4f 6515 	mov.w	r5, r5, lsr #24
 8006812:	e010      	b.n	8006836 <strcmp_unaligned+0x136>
 8006814:	f014 0fff 	tst.w	r4, #255	; 0xff
 8006818:	d006      	beq.n	8006828 <strcmp_unaligned+0x128>
 800681a:	f851 5b04 	ldr.w	r5, [r1], #4
 800681e:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 8006822:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 8006826:	e006      	b.n	8006836 <strcmp_unaligned+0x136>
 8006828:	f04f 0000 	mov.w	r0, #0
 800682c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006830:	f85d 5b04 	ldr.w	r5, [sp], #4
 8006834:	4770      	bx	lr
 8006836:	f00c 02ff 	and.w	r2, ip, #255	; 0xff
 800683a:	f005 00ff 	and.w	r0, r5, #255	; 0xff
 800683e:	2801      	cmp	r0, #1
 8006840:	bf28      	it	cs
 8006842:	4290      	cmpcs	r0, r2
 8006844:	bf04      	itt	eq
 8006846:	ea4f 2c1c 	moveq.w	ip, ip, lsr #8
 800684a:	0a2d      	lsreq	r5, r5, #8
 800684c:	d0f3      	beq.n	8006836 <strcmp_unaligned+0x136>
 800684e:	eba2 0000 	sub.w	r0, r2, r0
 8006852:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006856:	f85d 5b04 	ldr.w	r5, [sp], #4
 800685a:	4770      	bx	lr

0800685c <strlen>:
 800685c:	f020 0103 	bic.w	r1, r0, #3
 8006860:	f010 0003 	ands.w	r0, r0, #3
 8006864:	f1c0 0000 	rsb	r0, r0, #0
 8006868:	f851 3b04 	ldr.w	r3, [r1], #4
 800686c:	f100 0c04 	add.w	ip, r0, #4
 8006870:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8006874:	f06f 0200 	mvn.w	r2, #0
 8006878:	bf1c      	itt	ne
 800687a:	fa22 f20c 	lsrne.w	r2, r2, ip
 800687e:	4313      	orrne	r3, r2
 8006880:	f04f 0c01 	mov.w	ip, #1
 8006884:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 8006888:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 800688c:	eba3 020c 	sub.w	r2, r3, ip
 8006890:	ea22 0203 	bic.w	r2, r2, r3
 8006894:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 8006898:	bf04      	itt	eq
 800689a:	f851 3b04 	ldreq.w	r3, [r1], #4
 800689e:	3004      	addeq	r0, #4
 80068a0:	d0f4      	beq.n	800688c <strlen+0x30>
 80068a2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80068a6:	bf1f      	itttt	ne
 80068a8:	3001      	addne	r0, #1
 80068aa:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
 80068ae:	3001      	addne	r0, #1
 80068b0:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
 80068b4:	bf18      	it	ne
 80068b6:	3001      	addne	r0, #1
 80068b8:	4770      	bx	lr
 80068ba:	bf00      	nop

080068bc <__ssprint_r>:
 80068bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068c0:	b083      	sub	sp, #12
 80068c2:	4691      	mov	r9, r2
 80068c4:	9001      	str	r0, [sp, #4]
 80068c6:	6890      	ldr	r0, [r2, #8]
 80068c8:	6817      	ldr	r7, [r2, #0]
 80068ca:	460d      	mov	r5, r1
 80068cc:	2800      	cmp	r0, #0
 80068ce:	d072      	beq.n	80069b6 <__ssprint_r+0xfa>
 80068d0:	f04f 0a00 	mov.w	sl, #0
 80068d4:	6808      	ldr	r0, [r1, #0]
 80068d6:	688b      	ldr	r3, [r1, #8]
 80068d8:	4654      	mov	r4, sl
 80068da:	2c00      	cmp	r4, #0
 80068dc:	d048      	beq.n	8006970 <__ssprint_r+0xb4>
 80068de:	429c      	cmp	r4, r3
 80068e0:	461e      	mov	r6, r3
 80068e2:	4698      	mov	r8, r3
 80068e4:	bf3c      	itt	cc
 80068e6:	4626      	movcc	r6, r4
 80068e8:	46a0      	movcc	r8, r4
 80068ea:	d331      	bcc.n	8006950 <__ssprint_r+0x94>
 80068ec:	89ab      	ldrh	r3, [r5, #12]
 80068ee:	f413 6f90 	tst.w	r3, #1152	; 0x480
 80068f2:	d02d      	beq.n	8006950 <__ssprint_r+0x94>
 80068f4:	696e      	ldr	r6, [r5, #20]
 80068f6:	6929      	ldr	r1, [r5, #16]
 80068f8:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80068fc:	ebc1 0800 	rsb	r8, r1, r0
 8006900:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 8006904:	1c60      	adds	r0, r4, #1
 8006906:	1076      	asrs	r6, r6, #1
 8006908:	4440      	add	r0, r8
 800690a:	4286      	cmp	r6, r0
 800690c:	4632      	mov	r2, r6
 800690e:	bf3c      	itt	cc
 8006910:	4606      	movcc	r6, r0
 8006912:	4632      	movcc	r2, r6
 8006914:	055b      	lsls	r3, r3, #21
 8006916:	9801      	ldr	r0, [sp, #4]
 8006918:	d52f      	bpl.n	800697a <__ssprint_r+0xbe>
 800691a:	4611      	mov	r1, r2
 800691c:	f7fe fed8 	bl	80056d0 <_malloc_r>
 8006920:	4683      	mov	fp, r0
 8006922:	2800      	cmp	r0, #0
 8006924:	d032      	beq.n	800698c <__ssprint_r+0xd0>
 8006926:	6929      	ldr	r1, [r5, #16]
 8006928:	4642      	mov	r2, r8
 800692a:	f7ff f9c3 	bl	8005cb4 <memcpy>
 800692e:	89ab      	ldrh	r3, [r5, #12]
 8006930:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006934:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006938:	81ab      	strh	r3, [r5, #12]
 800693a:	ebc8 0306 	rsb	r3, r8, r6
 800693e:	eb0b 0008 	add.w	r0, fp, r8
 8006942:	616e      	str	r6, [r5, #20]
 8006944:	f8c5 b010 	str.w	fp, [r5, #16]
 8006948:	6028      	str	r0, [r5, #0]
 800694a:	4626      	mov	r6, r4
 800694c:	60ab      	str	r3, [r5, #8]
 800694e:	46a0      	mov	r8, r4
 8006950:	4642      	mov	r2, r8
 8006952:	4651      	mov	r1, sl
 8006954:	f000 fcb8 	bl	80072c8 <memmove>
 8006958:	f8d9 2008 	ldr.w	r2, [r9, #8]
 800695c:	68ab      	ldr	r3, [r5, #8]
 800695e:	6828      	ldr	r0, [r5, #0]
 8006960:	1b9b      	subs	r3, r3, r6
 8006962:	4440      	add	r0, r8
 8006964:	1b14      	subs	r4, r2, r4
 8006966:	60ab      	str	r3, [r5, #8]
 8006968:	6028      	str	r0, [r5, #0]
 800696a:	f8c9 4008 	str.w	r4, [r9, #8]
 800696e:	b1e4      	cbz	r4, 80069aa <__ssprint_r+0xee>
 8006970:	f8d7 a000 	ldr.w	sl, [r7]
 8006974:	687c      	ldr	r4, [r7, #4]
 8006976:	3708      	adds	r7, #8
 8006978:	e7af      	b.n	80068da <__ssprint_r+0x1e>
 800697a:	f000 fd47 	bl	800740c <_realloc_r>
 800697e:	4683      	mov	fp, r0
 8006980:	2800      	cmp	r0, #0
 8006982:	d1da      	bne.n	800693a <__ssprint_r+0x7e>
 8006984:	9801      	ldr	r0, [sp, #4]
 8006986:	6929      	ldr	r1, [r5, #16]
 8006988:	f7fe fd96 	bl	80054b8 <_free_r>
 800698c:	9a01      	ldr	r2, [sp, #4]
 800698e:	230c      	movs	r3, #12
 8006990:	6013      	str	r3, [r2, #0]
 8006992:	89aa      	ldrh	r2, [r5, #12]
 8006994:	2300      	movs	r3, #0
 8006996:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800699a:	81aa      	strh	r2, [r5, #12]
 800699c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80069a0:	f8c9 3008 	str.w	r3, [r9, #8]
 80069a4:	f8c9 3004 	str.w	r3, [r9, #4]
 80069a8:	e002      	b.n	80069b0 <__ssprint_r+0xf4>
 80069aa:	f8c9 4004 	str.w	r4, [r9, #4]
 80069ae:	4620      	mov	r0, r4
 80069b0:	b003      	add	sp, #12
 80069b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069b6:	6050      	str	r0, [r2, #4]
 80069b8:	e7fa      	b.n	80069b0 <__ssprint_r+0xf4>
 80069ba:	bf00      	nop

080069bc <_svfiprintf_r>:
 80069bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069c0:	468a      	mov	sl, r1
 80069c2:	8989      	ldrh	r1, [r1, #12]
 80069c4:	b0ad      	sub	sp, #180	; 0xb4
 80069c6:	0609      	lsls	r1, r1, #24
 80069c8:	9007      	str	r0, [sp, #28]
 80069ca:	9305      	str	r3, [sp, #20]
 80069cc:	d504      	bpl.n	80069d8 <_svfiprintf_r+0x1c>
 80069ce:	f8da 3010 	ldr.w	r3, [sl, #16]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	f000 8422 	beq.w	800721c <_svfiprintf_r+0x860>
 80069d8:	2300      	movs	r3, #0
 80069da:	f10d 009f 	add.w	r0, sp, #159	; 0x9f
 80069de:	f10d 08a0 	add.w	r8, sp, #160	; 0xa0
 80069e2:	a90e      	add	r1, sp, #56	; 0x38
 80069e4:	930c      	str	r3, [sp, #48]	; 0x30
 80069e6:	932a      	str	r3, [sp, #168]	; 0xa8
 80069e8:	9329      	str	r3, [sp, #164]	; 0xa4
 80069ea:	9304      	str	r3, [sp, #16]
 80069ec:	ebc0 0308 	rsb	r3, r0, r8
 80069f0:	9001      	str	r0, [sp, #4]
 80069f2:	9128      	str	r1, [sp, #160]	; 0xa0
 80069f4:	4617      	mov	r7, r2
 80069f6:	460c      	mov	r4, r1
 80069f8:	930d      	str	r3, [sp, #52]	; 0x34
 80069fa:	783b      	ldrb	r3, [r7, #0]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	bf18      	it	ne
 8006a00:	2b25      	cmpne	r3, #37	; 0x25
 8006a02:	463d      	mov	r5, r7
 8006a04:	d016      	beq.n	8006a34 <_svfiprintf_r+0x78>
 8006a06:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8006a0a:	2b25      	cmp	r3, #37	; 0x25
 8006a0c:	bf18      	it	ne
 8006a0e:	2b00      	cmpne	r3, #0
 8006a10:	d1f9      	bne.n	8006a06 <_svfiprintf_r+0x4a>
 8006a12:	1bee      	subs	r6, r5, r7
 8006a14:	d00e      	beq.n	8006a34 <_svfiprintf_r+0x78>
 8006a16:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8006a18:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8006a1a:	6027      	str	r7, [r4, #0]
 8006a1c:	3301      	adds	r3, #1
 8006a1e:	1992      	adds	r2, r2, r6
 8006a20:	2b07      	cmp	r3, #7
 8006a22:	6066      	str	r6, [r4, #4]
 8006a24:	922a      	str	r2, [sp, #168]	; 0xa8
 8006a26:	9329      	str	r3, [sp, #164]	; 0xa4
 8006a28:	f300 832a 	bgt.w	8007080 <_svfiprintf_r+0x6c4>
 8006a2c:	3408      	adds	r4, #8
 8006a2e:	9b04      	ldr	r3, [sp, #16]
 8006a30:	199b      	adds	r3, r3, r6
 8006a32:	9304      	str	r3, [sp, #16]
 8006a34:	782b      	ldrb	r3, [r5, #0]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	f000 82c5 	beq.w	8006fc6 <_svfiprintf_r+0x60a>
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	1c6f      	adds	r7, r5, #1
 8006a40:	4613      	mov	r3, r2
 8006a42:	f88d 20af 	strb.w	r2, [sp, #175]	; 0xaf
 8006a46:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006a4a:	9206      	str	r2, [sp, #24]
 8006a4c:	4693      	mov	fp, r2
 8006a4e:	f817 2b01 	ldrb.w	r2, [r7], #1
 8006a52:	f1a2 0120 	sub.w	r1, r2, #32
 8006a56:	2958      	cmp	r1, #88	; 0x58
 8006a58:	f200 8178 	bhi.w	8006d4c <_svfiprintf_r+0x390>
 8006a5c:	e8df f011 	tbh	[pc, r1, lsl #1]
 8006a60:	01760172 	.word	0x01760172
 8006a64:	016f0176 	.word	0x016f0176
 8006a68:	01760176 	.word	0x01760176
 8006a6c:	01760176 	.word	0x01760176
 8006a70:	01760176 	.word	0x01760176
 8006a74:	01d800af 	.word	0x01d800af
 8006a78:	00ba0176 	.word	0x00ba0176
 8006a7c:	017601da 	.word	0x017601da
 8006a80:	01c401d5 	.word	0x01c401d5
 8006a84:	01c401c4 	.word	0x01c401c4
 8006a88:	01c401c4 	.word	0x01c401c4
 8006a8c:	01c401c4 	.word	0x01c401c4
 8006a90:	01c401c4 	.word	0x01c401c4
 8006a94:	01760176 	.word	0x01760176
 8006a98:	01760176 	.word	0x01760176
 8006a9c:	01760176 	.word	0x01760176
 8006aa0:	01760176 	.word	0x01760176
 8006aa4:	01760176 	.word	0x01760176
 8006aa8:	017601a7 	.word	0x017601a7
 8006aac:	01760176 	.word	0x01760176
 8006ab0:	01760176 	.word	0x01760176
 8006ab4:	01760176 	.word	0x01760176
 8006ab8:	01760176 	.word	0x01760176
 8006abc:	005c0176 	.word	0x005c0176
 8006ac0:	01760176 	.word	0x01760176
 8006ac4:	01760176 	.word	0x01760176
 8006ac8:	00a00176 	.word	0x00a00176
 8006acc:	01760176 	.word	0x01760176
 8006ad0:	0176016a 	.word	0x0176016a
 8006ad4:	01760176 	.word	0x01760176
 8006ad8:	01760176 	.word	0x01760176
 8006adc:	01760176 	.word	0x01760176
 8006ae0:	01760176 	.word	0x01760176
 8006ae4:	01170176 	.word	0x01170176
 8006ae8:	01760105 	.word	0x01760105
 8006aec:	01760176 	.word	0x01760176
 8006af0:	01050102 	.word	0x01050102
 8006af4:	01760176 	.word	0x01760176
 8006af8:	01760059 	.word	0x01760059
 8006afc:	005e00d1 	.word	0x005e00d1
 8006b00:	005900bd 	.word	0x005900bd
 8006b04:	01870176 	.word	0x01870176
 8006b08:	00a20176 	.word	0x00a20176
 8006b0c:	01760176 	.word	0x01760176
 8006b10:	00e2      	.short	0x00e2
 8006b12:	f04b 0b10 	orr.w	fp, fp, #16
 8006b16:	e79a      	b.n	8006a4e <_svfiprintf_r+0x92>
 8006b18:	f04b 0b10 	orr.w	fp, fp, #16
 8006b1c:	f01b 0210 	ands.w	r2, fp, #16
 8006b20:	f000 8313 	beq.w	800714a <_svfiprintf_r+0x78e>
 8006b24:	9805      	ldr	r0, [sp, #20]
 8006b26:	6803      	ldr	r3, [r0, #0]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	1a99      	subs	r1, r3, r2
 8006b2c:	bf18      	it	ne
 8006b2e:	2101      	movne	r1, #1
 8006b30:	3004      	adds	r0, #4
 8006b32:	9005      	str	r0, [sp, #20]
 8006b34:	2000      	movs	r0, #0
 8006b36:	f88d 00af 	strb.w	r0, [sp, #175]	; 0xaf
 8006b3a:	2d00      	cmp	r5, #0
 8006b3c:	bfa8      	it	ge
 8006b3e:	f02b 0b80 	bicge.w	fp, fp, #128	; 0x80
 8006b42:	2d00      	cmp	r5, #0
 8006b44:	bf18      	it	ne
 8006b46:	f041 0101 	orrne.w	r1, r1, #1
 8006b4a:	2900      	cmp	r1, #0
 8006b4c:	f000 8228 	beq.w	8006fa0 <_svfiprintf_r+0x5e4>
 8006b50:	2a01      	cmp	r2, #1
 8006b52:	f000 82cf 	beq.w	80070f4 <_svfiprintf_r+0x738>
 8006b56:	2a02      	cmp	r2, #2
 8006b58:	bf18      	it	ne
 8006b5a:	4642      	movne	r2, r8
 8006b5c:	d101      	bne.n	8006b62 <_svfiprintf_r+0x1a6>
 8006b5e:	e2b9      	b.n	80070d4 <_svfiprintf_r+0x718>
 8006b60:	4602      	mov	r2, r0
 8006b62:	f003 0107 	and.w	r1, r3, #7
 8006b66:	3130      	adds	r1, #48	; 0x30
 8006b68:	1e50      	subs	r0, r2, #1
 8006b6a:	08db      	lsrs	r3, r3, #3
 8006b6c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006b70:	d1f6      	bne.n	8006b60 <_svfiprintf_r+0x1a4>
 8006b72:	f01b 0f01 	tst.w	fp, #1
 8006b76:	9009      	str	r0, [sp, #36]	; 0x24
 8006b78:	f040 831a 	bne.w	80071b0 <_svfiprintf_r+0x7f4>
 8006b7c:	ebc0 0308 	rsb	r3, r0, r8
 8006b80:	9303      	str	r3, [sp, #12]
 8006b82:	9508      	str	r5, [sp, #32]
 8006b84:	9803      	ldr	r0, [sp, #12]
 8006b86:	9908      	ldr	r1, [sp, #32]
 8006b88:	f89d 30af 	ldrb.w	r3, [sp, #175]	; 0xaf
 8006b8c:	4288      	cmp	r0, r1
 8006b8e:	bfb8      	it	lt
 8006b90:	4608      	movlt	r0, r1
 8006b92:	9002      	str	r0, [sp, #8]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	f000 808b 	beq.w	8006cb0 <_svfiprintf_r+0x2f4>
 8006b9a:	3001      	adds	r0, #1
 8006b9c:	9002      	str	r0, [sp, #8]
 8006b9e:	e087      	b.n	8006cb0 <_svfiprintf_r+0x2f4>
 8006ba0:	f04b 0b10 	orr.w	fp, fp, #16
 8006ba4:	f01b 0f10 	tst.w	fp, #16
 8006ba8:	f000 82c1 	beq.w	800712e <_svfiprintf_r+0x772>
 8006bac:	9805      	ldr	r0, [sp, #20]
 8006bae:	6803      	ldr	r3, [r0, #0]
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	1c19      	adds	r1, r3, #0
 8006bb4:	bf18      	it	ne
 8006bb6:	2101      	movne	r1, #1
 8006bb8:	3004      	adds	r0, #4
 8006bba:	9005      	str	r0, [sp, #20]
 8006bbc:	e7ba      	b.n	8006b34 <_svfiprintf_r+0x178>
 8006bbe:	9805      	ldr	r0, [sp, #20]
 8006bc0:	9905      	ldr	r1, [sp, #20]
 8006bc2:	6800      	ldr	r0, [r0, #0]
 8006bc4:	1d0a      	adds	r2, r1, #4
 8006bc6:	2800      	cmp	r0, #0
 8006bc8:	9006      	str	r0, [sp, #24]
 8006bca:	f280 82e0 	bge.w	800718e <_svfiprintf_r+0x7d2>
 8006bce:	4240      	negs	r0, r0
 8006bd0:	9006      	str	r0, [sp, #24]
 8006bd2:	9205      	str	r2, [sp, #20]
 8006bd4:	f04b 0b04 	orr.w	fp, fp, #4
 8006bd8:	e739      	b.n	8006a4e <_svfiprintf_r+0x92>
 8006bda:	9b05      	ldr	r3, [sp, #20]
 8006bdc:	9905      	ldr	r1, [sp, #20]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	2230      	movs	r2, #48	; 0x30
 8006be2:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
 8006be6:	2278      	movs	r2, #120	; 0x78
 8006be8:	3104      	adds	r1, #4
 8006bea:	f88d 20ad 	strb.w	r2, [sp, #173]	; 0xad
 8006bee:	4aaf      	ldr	r2, [pc, #700]	; (8006eac <_svfiprintf_r+0x4f0>)
 8006bf0:	9105      	str	r1, [sp, #20]
 8006bf2:	1c19      	adds	r1, r3, #0
 8006bf4:	bf18      	it	ne
 8006bf6:	2101      	movne	r1, #1
 8006bf8:	920c      	str	r2, [sp, #48]	; 0x30
 8006bfa:	f04b 0b02 	orr.w	fp, fp, #2
 8006bfe:	2202      	movs	r2, #2
 8006c00:	e798      	b.n	8006b34 <_svfiprintf_r+0x178>
 8006c02:	f01b 0f10 	tst.w	fp, #16
 8006c06:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 8006c0a:	f040 82dd 	bne.w	80071c8 <_svfiprintf_r+0x80c>
 8006c0e:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8006c12:	f000 82fb 	beq.w	800720c <_svfiprintf_r+0x850>
 8006c16:	9a05      	ldr	r2, [sp, #20]
 8006c18:	9804      	ldr	r0, [sp, #16]
 8006c1a:	6813      	ldr	r3, [r2, #0]
 8006c1c:	3204      	adds	r2, #4
 8006c1e:	9205      	str	r2, [sp, #20]
 8006c20:	8018      	strh	r0, [r3, #0]
 8006c22:	e6ea      	b.n	80069fa <_svfiprintf_r+0x3e>
 8006c24:	49a1      	ldr	r1, [pc, #644]	; (8006eac <_svfiprintf_r+0x4f0>)
 8006c26:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 8006c2a:	910c      	str	r1, [sp, #48]	; 0x30
 8006c2c:	f01b 0f10 	tst.w	fp, #16
 8006c30:	d103      	bne.n	8006c3a <_svfiprintf_r+0x27e>
 8006c32:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8006c36:	f040 82d3 	bne.w	80071e0 <_svfiprintf_r+0x824>
 8006c3a:	9805      	ldr	r0, [sp, #20]
 8006c3c:	6803      	ldr	r3, [r0, #0]
 8006c3e:	3004      	adds	r0, #4
 8006c40:	9005      	str	r0, [sp, #20]
 8006c42:	1c19      	adds	r1, r3, #0
 8006c44:	bf18      	it	ne
 8006c46:	2101      	movne	r1, #1
 8006c48:	ea1b 0f01 	tst.w	fp, r1
 8006c4c:	f000 8287 	beq.w	800715e <_svfiprintf_r+0x7a2>
 8006c50:	2130      	movs	r1, #48	; 0x30
 8006c52:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
 8006c56:	f88d 20ad 	strb.w	r2, [sp, #173]	; 0xad
 8006c5a:	f04b 0b02 	orr.w	fp, fp, #2
 8006c5e:	2101      	movs	r1, #1
 8006c60:	2202      	movs	r2, #2
 8006c62:	e767      	b.n	8006b34 <_svfiprintf_r+0x178>
 8006c64:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
 8006c68:	e6f1      	b.n	8006a4e <_svfiprintf_r+0x92>
 8006c6a:	f01b 0f10 	tst.w	fp, #16
 8006c6e:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 8006c72:	f000 80a4 	beq.w	8006dbe <_svfiprintf_r+0x402>
 8006c76:	9805      	ldr	r0, [sp, #20]
 8006c78:	6803      	ldr	r3, [r0, #0]
 8006c7a:	3004      	adds	r0, #4
 8006c7c:	9005      	str	r0, [sp, #20]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	f2c0 80a9 	blt.w	8006dd6 <_svfiprintf_r+0x41a>
 8006c84:	bf0c      	ite	eq
 8006c86:	2100      	moveq	r1, #0
 8006c88:	2101      	movne	r1, #1
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	e755      	b.n	8006b3a <_svfiprintf_r+0x17e>
 8006c8e:	9b05      	ldr	r3, [sp, #20]
 8006c90:	9905      	ldr	r1, [sp, #20]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	2001      	movs	r0, #1
 8006c96:	2200      	movs	r2, #0
 8006c98:	3104      	adds	r1, #4
 8006c9a:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
 8006c9e:	ab1e      	add	r3, sp, #120	; 0x78
 8006ca0:	f88d 20af 	strb.w	r2, [sp, #175]	; 0xaf
 8006ca4:	9002      	str	r0, [sp, #8]
 8006ca6:	9105      	str	r1, [sp, #20]
 8006ca8:	9003      	str	r0, [sp, #12]
 8006caa:	9309      	str	r3, [sp, #36]	; 0x24
 8006cac:	2300      	movs	r3, #0
 8006cae:	9308      	str	r3, [sp, #32]
 8006cb0:	f01b 0302 	ands.w	r3, fp, #2
 8006cb4:	930a      	str	r3, [sp, #40]	; 0x28
 8006cb6:	d002      	beq.n	8006cbe <_svfiprintf_r+0x302>
 8006cb8:	9b02      	ldr	r3, [sp, #8]
 8006cba:	3302      	adds	r3, #2
 8006cbc:	9302      	str	r3, [sp, #8]
 8006cbe:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
 8006cc2:	930b      	str	r3, [sp, #44]	; 0x2c
 8006cc4:	f040 80c1 	bne.w	8006e4a <_svfiprintf_r+0x48e>
 8006cc8:	9b06      	ldr	r3, [sp, #24]
 8006cca:	9802      	ldr	r0, [sp, #8]
 8006ccc:	1a1d      	subs	r5, r3, r0
 8006cce:	2d00      	cmp	r5, #0
 8006cd0:	f340 80bb 	ble.w	8006e4a <_svfiprintf_r+0x48e>
 8006cd4:	2d10      	cmp	r5, #16
 8006cd6:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8006cd8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8006cda:	4e75      	ldr	r6, [pc, #468]	; (8006eb0 <_svfiprintf_r+0x4f4>)
 8006cdc:	dd1f      	ble.n	8006d1e <_svfiprintf_r+0x362>
 8006cde:	4621      	mov	r1, r4
 8006ce0:	f04f 0910 	mov.w	r9, #16
 8006ce4:	9c07      	ldr	r4, [sp, #28]
 8006ce6:	e002      	b.n	8006cee <_svfiprintf_r+0x332>
 8006ce8:	3d10      	subs	r5, #16
 8006cea:	2d10      	cmp	r5, #16
 8006cec:	dd16      	ble.n	8006d1c <_svfiprintf_r+0x360>
 8006cee:	3301      	adds	r3, #1
 8006cf0:	3210      	adds	r2, #16
 8006cf2:	e881 0240 	stmia.w	r1, {r6, r9}
 8006cf6:	3108      	adds	r1, #8
 8006cf8:	2b07      	cmp	r3, #7
 8006cfa:	922a      	str	r2, [sp, #168]	; 0xa8
 8006cfc:	9329      	str	r3, [sp, #164]	; 0xa4
 8006cfe:	ddf3      	ble.n	8006ce8 <_svfiprintf_r+0x32c>
 8006d00:	4620      	mov	r0, r4
 8006d02:	4651      	mov	r1, sl
 8006d04:	4642      	mov	r2, r8
 8006d06:	f7ff fdd9 	bl	80068bc <__ssprint_r>
 8006d0a:	2800      	cmp	r0, #0
 8006d0c:	f040 8162 	bne.w	8006fd4 <_svfiprintf_r+0x618>
 8006d10:	3d10      	subs	r5, #16
 8006d12:	2d10      	cmp	r5, #16
 8006d14:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8006d16:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8006d18:	a90e      	add	r1, sp, #56	; 0x38
 8006d1a:	dce8      	bgt.n	8006cee <_svfiprintf_r+0x332>
 8006d1c:	460c      	mov	r4, r1
 8006d1e:	3301      	adds	r3, #1
 8006d20:	1952      	adds	r2, r2, r5
 8006d22:	2b07      	cmp	r3, #7
 8006d24:	6026      	str	r6, [r4, #0]
 8006d26:	6065      	str	r5, [r4, #4]
 8006d28:	922a      	str	r2, [sp, #168]	; 0xa8
 8006d2a:	9329      	str	r3, [sp, #164]	; 0xa4
 8006d2c:	f300 8219 	bgt.w	8007162 <_svfiprintf_r+0x7a6>
 8006d30:	3408      	adds	r4, #8
 8006d32:	e08c      	b.n	8006e4e <_svfiprintf_r+0x492>
 8006d34:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 8006d38:	4b5e      	ldr	r3, [pc, #376]	; (8006eb4 <_svfiprintf_r+0x4f8>)
 8006d3a:	930c      	str	r3, [sp, #48]	; 0x30
 8006d3c:	e776      	b.n	8006c2c <_svfiprintf_r+0x270>
 8006d3e:	f04b 0b01 	orr.w	fp, fp, #1
 8006d42:	e684      	b.n	8006a4e <_svfiprintf_r+0x92>
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	bf08      	it	eq
 8006d48:	2320      	moveq	r3, #32
 8006d4a:	e680      	b.n	8006a4e <_svfiprintf_r+0x92>
 8006d4c:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 8006d50:	2a00      	cmp	r2, #0
 8006d52:	f000 8138 	beq.w	8006fc6 <_svfiprintf_r+0x60a>
 8006d56:	2301      	movs	r3, #1
 8006d58:	9302      	str	r3, [sp, #8]
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 8006d60:	2301      	movs	r3, #1
 8006d62:	9303      	str	r3, [sp, #12]
 8006d64:	ab1e      	add	r3, sp, #120	; 0x78
 8006d66:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 8006d6a:	9309      	str	r3, [sp, #36]	; 0x24
 8006d6c:	e79e      	b.n	8006cac <_svfiprintf_r+0x2f0>
 8006d6e:	9b05      	ldr	r3, [sp, #20]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	9309      	str	r3, [sp, #36]	; 0x24
 8006d74:	9b05      	ldr	r3, [sp, #20]
 8006d76:	3304      	adds	r3, #4
 8006d78:	9305      	str	r3, [sp, #20]
 8006d7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d7c:	2600      	movs	r6, #0
 8006d7e:	f88d 60af 	strb.w	r6, [sp, #175]	; 0xaf
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	f000 8259 	beq.w	800723a <_svfiprintf_r+0x87e>
 8006d88:	2d00      	cmp	r5, #0
 8006d8a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006d8c:	f2c0 822d 	blt.w	80071ea <_svfiprintf_r+0x82e>
 8006d90:	4631      	mov	r1, r6
 8006d92:	462a      	mov	r2, r5
 8006d94:	f7fe ff50 	bl	8005c38 <memchr>
 8006d98:	2800      	cmp	r0, #0
 8006d9a:	f000 8258 	beq.w	800724e <_svfiprintf_r+0x892>
 8006d9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006da0:	9608      	str	r6, [sp, #32]
 8006da2:	1ac0      	subs	r0, r0, r3
 8006da4:	42a8      	cmp	r0, r5
 8006da6:	9003      	str	r0, [sp, #12]
 8006da8:	bfc8      	it	gt
 8006daa:	9503      	strgt	r5, [sp, #12]
 8006dac:	e6ea      	b.n	8006b84 <_svfiprintf_r+0x1c8>
 8006dae:	f04b 0b10 	orr.w	fp, fp, #16
 8006db2:	f01b 0f10 	tst.w	fp, #16
 8006db6:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 8006dba:	f47f af5c 	bne.w	8006c76 <_svfiprintf_r+0x2ba>
 8006dbe:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8006dc2:	f000 8208 	beq.w	80071d6 <_svfiprintf_r+0x81a>
 8006dc6:	9905      	ldr	r1, [sp, #20]
 8006dc8:	f9b1 3000 	ldrsh.w	r3, [r1]
 8006dcc:	3104      	adds	r1, #4
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	9105      	str	r1, [sp, #20]
 8006dd2:	f6bf af57 	bge.w	8006c84 <_svfiprintf_r+0x2c8>
 8006dd6:	425b      	negs	r3, r3
 8006dd8:	222d      	movs	r2, #45	; 0x2d
 8006dda:	1c19      	adds	r1, r3, #0
 8006ddc:	f88d 20af 	strb.w	r2, [sp, #175]	; 0xaf
 8006de0:	bf18      	it	ne
 8006de2:	2101      	movne	r1, #1
 8006de4:	2201      	movs	r2, #1
 8006de6:	e6a8      	b.n	8006b3a <_svfiprintf_r+0x17e>
 8006de8:	4638      	mov	r0, r7
 8006dea:	2100      	movs	r1, #0
 8006dec:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 8006df0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006df4:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8006df8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8006dfc:	2e09      	cmp	r6, #9
 8006dfe:	eb07 0141 	add.w	r1, r7, r1, lsl #1
 8006e02:	4607      	mov	r7, r0
 8006e04:	d9f2      	bls.n	8006dec <_svfiprintf_r+0x430>
 8006e06:	9106      	str	r1, [sp, #24]
 8006e08:	e623      	b.n	8006a52 <_svfiprintf_r+0x96>
 8006e0a:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 8006e0e:	e61e      	b.n	8006a4e <_svfiprintf_r+0x92>
 8006e10:	232b      	movs	r3, #43	; 0x2b
 8006e12:	e61c      	b.n	8006a4e <_svfiprintf_r+0x92>
 8006e14:	f817 2b01 	ldrb.w	r2, [r7], #1
 8006e18:	2a2a      	cmp	r2, #42	; 0x2a
 8006e1a:	f000 81ae 	beq.w	800717a <_svfiprintf_r+0x7be>
 8006e1e:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006e22:	2500      	movs	r5, #0
 8006e24:	2909      	cmp	r1, #9
 8006e26:	f63f ae14 	bhi.w	8006a52 <_svfiprintf_r+0x96>
 8006e2a:	4638      	mov	r0, r7
 8006e2c:	2500      	movs	r5, #0
 8006e2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e32:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8006e36:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 8006e3a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006e3e:	2909      	cmp	r1, #9
 8006e40:	4607      	mov	r7, r0
 8006e42:	d9f4      	bls.n	8006e2e <_svfiprintf_r+0x472>
 8006e44:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 8006e48:	e603      	b.n	8006a52 <_svfiprintf_r+0x96>
 8006e4a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8006e4c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8006e4e:	f89d 10af 	ldrb.w	r1, [sp, #175]	; 0xaf
 8006e52:	b161      	cbz	r1, 8006e6e <_svfiprintf_r+0x4b2>
 8006e54:	3301      	adds	r3, #1
 8006e56:	f10d 01af 	add.w	r1, sp, #175	; 0xaf
 8006e5a:	3201      	adds	r2, #1
 8006e5c:	6021      	str	r1, [r4, #0]
 8006e5e:	2101      	movs	r1, #1
 8006e60:	2b07      	cmp	r3, #7
 8006e62:	6061      	str	r1, [r4, #4]
 8006e64:	922a      	str	r2, [sp, #168]	; 0xa8
 8006e66:	9329      	str	r3, [sp, #164]	; 0xa4
 8006e68:	f300 811e 	bgt.w	80070a8 <_svfiprintf_r+0x6ec>
 8006e6c:	3408      	adds	r4, #8
 8006e6e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006e70:	b159      	cbz	r1, 8006e8a <_svfiprintf_r+0x4ce>
 8006e72:	3301      	adds	r3, #1
 8006e74:	a92b      	add	r1, sp, #172	; 0xac
 8006e76:	3202      	adds	r2, #2
 8006e78:	6021      	str	r1, [r4, #0]
 8006e7a:	2102      	movs	r1, #2
 8006e7c:	2b07      	cmp	r3, #7
 8006e7e:	6061      	str	r1, [r4, #4]
 8006e80:	922a      	str	r2, [sp, #168]	; 0xa8
 8006e82:	9329      	str	r3, [sp, #164]	; 0xa4
 8006e84:	f300 811b 	bgt.w	80070be <_svfiprintf_r+0x702>
 8006e88:	3408      	adds	r4, #8
 8006e8a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006e8c:	2880      	cmp	r0, #128	; 0x80
 8006e8e:	f000 80ae 	beq.w	8006fee <_svfiprintf_r+0x632>
 8006e92:	9808      	ldr	r0, [sp, #32]
 8006e94:	9903      	ldr	r1, [sp, #12]
 8006e96:	1a45      	subs	r5, r0, r1
 8006e98:	2d00      	cmp	r5, #0
 8006e9a:	dd33      	ble.n	8006f04 <_svfiprintf_r+0x548>
 8006e9c:	2d10      	cmp	r5, #16
 8006e9e:	4e06      	ldr	r6, [pc, #24]	; (8006eb8 <_svfiprintf_r+0x4fc>)
 8006ea0:	dd26      	ble.n	8006ef0 <_svfiprintf_r+0x534>
 8006ea2:	4621      	mov	r1, r4
 8006ea4:	f04f 0910 	mov.w	r9, #16
 8006ea8:	9c07      	ldr	r4, [sp, #28]
 8006eaa:	e00a      	b.n	8006ec2 <_svfiprintf_r+0x506>
 8006eac:	08008590 	.word	0x08008590
 8006eb0:	080084d8 	.word	0x080084d8
 8006eb4:	0800857c 	.word	0x0800857c
 8006eb8:	080084e8 	.word	0x080084e8
 8006ebc:	3d10      	subs	r5, #16
 8006ebe:	2d10      	cmp	r5, #16
 8006ec0:	dd15      	ble.n	8006eee <_svfiprintf_r+0x532>
 8006ec2:	3301      	adds	r3, #1
 8006ec4:	3210      	adds	r2, #16
 8006ec6:	e881 0240 	stmia.w	r1, {r6, r9}
 8006eca:	3108      	adds	r1, #8
 8006ecc:	2b07      	cmp	r3, #7
 8006ece:	922a      	str	r2, [sp, #168]	; 0xa8
 8006ed0:	9329      	str	r3, [sp, #164]	; 0xa4
 8006ed2:	ddf3      	ble.n	8006ebc <_svfiprintf_r+0x500>
 8006ed4:	4620      	mov	r0, r4
 8006ed6:	4651      	mov	r1, sl
 8006ed8:	4642      	mov	r2, r8
 8006eda:	f7ff fcef 	bl	80068bc <__ssprint_r>
 8006ede:	2800      	cmp	r0, #0
 8006ee0:	d178      	bne.n	8006fd4 <_svfiprintf_r+0x618>
 8006ee2:	3d10      	subs	r5, #16
 8006ee4:	2d10      	cmp	r5, #16
 8006ee6:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8006ee8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8006eea:	a90e      	add	r1, sp, #56	; 0x38
 8006eec:	dce9      	bgt.n	8006ec2 <_svfiprintf_r+0x506>
 8006eee:	460c      	mov	r4, r1
 8006ef0:	3301      	adds	r3, #1
 8006ef2:	1952      	adds	r2, r2, r5
 8006ef4:	2b07      	cmp	r3, #7
 8006ef6:	6026      	str	r6, [r4, #0]
 8006ef8:	6065      	str	r5, [r4, #4]
 8006efa:	922a      	str	r2, [sp, #168]	; 0xa8
 8006efc:	9329      	str	r3, [sp, #164]	; 0xa4
 8006efe:	f300 80c8 	bgt.w	8007092 <_svfiprintf_r+0x6d6>
 8006f02:	3408      	adds	r4, #8
 8006f04:	9903      	ldr	r1, [sp, #12]
 8006f06:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f08:	3301      	adds	r3, #1
 8006f0a:	1852      	adds	r2, r2, r1
 8006f0c:	2b07      	cmp	r3, #7
 8006f0e:	e884 0003 	stmia.w	r4, {r0, r1}
 8006f12:	922a      	str	r2, [sp, #168]	; 0xa8
 8006f14:	9329      	str	r3, [sp, #164]	; 0xa4
 8006f16:	bfd8      	it	le
 8006f18:	f104 0108 	addle.w	r1, r4, #8
 8006f1c:	f300 809a 	bgt.w	8007054 <_svfiprintf_r+0x698>
 8006f20:	f01b 0f04 	tst.w	fp, #4
 8006f24:	d02e      	beq.n	8006f84 <_svfiprintf_r+0x5c8>
 8006f26:	9b06      	ldr	r3, [sp, #24]
 8006f28:	9802      	ldr	r0, [sp, #8]
 8006f2a:	1a1d      	subs	r5, r3, r0
 8006f2c:	2d00      	cmp	r5, #0
 8006f2e:	dd29      	ble.n	8006f84 <_svfiprintf_r+0x5c8>
 8006f30:	2d10      	cmp	r5, #16
 8006f32:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8006f34:	4e97      	ldr	r6, [pc, #604]	; (8007194 <_svfiprintf_r+0x7d8>)
 8006f36:	dd1c      	ble.n	8006f72 <_svfiprintf_r+0x5b6>
 8006f38:	2410      	movs	r4, #16
 8006f3a:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8006f3e:	e002      	b.n	8006f46 <_svfiprintf_r+0x58a>
 8006f40:	3d10      	subs	r5, #16
 8006f42:	2d10      	cmp	r5, #16
 8006f44:	dd15      	ble.n	8006f72 <_svfiprintf_r+0x5b6>
 8006f46:	3301      	adds	r3, #1
 8006f48:	3210      	adds	r2, #16
 8006f4a:	600e      	str	r6, [r1, #0]
 8006f4c:	604c      	str	r4, [r1, #4]
 8006f4e:	3108      	adds	r1, #8
 8006f50:	2b07      	cmp	r3, #7
 8006f52:	922a      	str	r2, [sp, #168]	; 0xa8
 8006f54:	9329      	str	r3, [sp, #164]	; 0xa4
 8006f56:	ddf3      	ble.n	8006f40 <_svfiprintf_r+0x584>
 8006f58:	4648      	mov	r0, r9
 8006f5a:	4651      	mov	r1, sl
 8006f5c:	4642      	mov	r2, r8
 8006f5e:	f7ff fcad 	bl	80068bc <__ssprint_r>
 8006f62:	2800      	cmp	r0, #0
 8006f64:	d136      	bne.n	8006fd4 <_svfiprintf_r+0x618>
 8006f66:	3d10      	subs	r5, #16
 8006f68:	2d10      	cmp	r5, #16
 8006f6a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8006f6c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8006f6e:	a90e      	add	r1, sp, #56	; 0x38
 8006f70:	dce9      	bgt.n	8006f46 <_svfiprintf_r+0x58a>
 8006f72:	3301      	adds	r3, #1
 8006f74:	18aa      	adds	r2, r5, r2
 8006f76:	2b07      	cmp	r3, #7
 8006f78:	600e      	str	r6, [r1, #0]
 8006f7a:	604d      	str	r5, [r1, #4]
 8006f7c:	922a      	str	r2, [sp, #168]	; 0xa8
 8006f7e:	9329      	str	r3, [sp, #164]	; 0xa4
 8006f80:	f300 810c 	bgt.w	800719c <_svfiprintf_r+0x7e0>
 8006f84:	9b04      	ldr	r3, [sp, #16]
 8006f86:	9902      	ldr	r1, [sp, #8]
 8006f88:	9806      	ldr	r0, [sp, #24]
 8006f8a:	4281      	cmp	r1, r0
 8006f8c:	bfac      	ite	ge
 8006f8e:	185b      	addge	r3, r3, r1
 8006f90:	181b      	addlt	r3, r3, r0
 8006f92:	9304      	str	r3, [sp, #16]
 8006f94:	2a00      	cmp	r2, #0
 8006f96:	d167      	bne.n	8007068 <_svfiprintf_r+0x6ac>
 8006f98:	2300      	movs	r3, #0
 8006f9a:	9329      	str	r3, [sp, #164]	; 0xa4
 8006f9c:	ac0e      	add	r4, sp, #56	; 0x38
 8006f9e:	e52c      	b.n	80069fa <_svfiprintf_r+0x3e>
 8006fa0:	2a00      	cmp	r2, #0
 8006fa2:	d169      	bne.n	8007078 <_svfiprintf_r+0x6bc>
 8006fa4:	f01b 0f01 	tst.w	fp, #1
 8006fa8:	bf04      	itt	eq
 8006faa:	9203      	streq	r2, [sp, #12]
 8006fac:	f8cd 8024 	streq.w	r8, [sp, #36]	; 0x24
 8006fb0:	f43f ade7 	beq.w	8006b82 <_svfiprintf_r+0x1c6>
 8006fb4:	2330      	movs	r3, #48	; 0x30
 8006fb6:	f88d 309f 	strb.w	r3, [sp, #159]	; 0x9f
 8006fba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006fbc:	9303      	str	r3, [sp, #12]
 8006fbe:	f10d 039f 	add.w	r3, sp, #159	; 0x9f
 8006fc2:	9309      	str	r3, [sp, #36]	; 0x24
 8006fc4:	e5dd      	b.n	8006b82 <_svfiprintf_r+0x1c6>
 8006fc6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8006fc8:	b123      	cbz	r3, 8006fd4 <_svfiprintf_r+0x618>
 8006fca:	9807      	ldr	r0, [sp, #28]
 8006fcc:	4651      	mov	r1, sl
 8006fce:	aa28      	add	r2, sp, #160	; 0xa0
 8006fd0:	f7ff fc74 	bl	80068bc <__ssprint_r>
 8006fd4:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8006fd8:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006fdc:	9b04      	ldr	r3, [sp, #16]
 8006fde:	bf18      	it	ne
 8006fe0:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 8006fe4:	9304      	str	r3, [sp, #16]
 8006fe6:	9804      	ldr	r0, [sp, #16]
 8006fe8:	b02d      	add	sp, #180	; 0xb4
 8006fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fee:	9906      	ldr	r1, [sp, #24]
 8006ff0:	9802      	ldr	r0, [sp, #8]
 8006ff2:	1a0d      	subs	r5, r1, r0
 8006ff4:	2d00      	cmp	r5, #0
 8006ff6:	f77f af4c 	ble.w	8006e92 <_svfiprintf_r+0x4d6>
 8006ffa:	2d10      	cmp	r5, #16
 8006ffc:	4e66      	ldr	r6, [pc, #408]	; (8007198 <_svfiprintf_r+0x7dc>)
 8006ffe:	dd1e      	ble.n	800703e <_svfiprintf_r+0x682>
 8007000:	4621      	mov	r1, r4
 8007002:	f04f 0910 	mov.w	r9, #16
 8007006:	9c07      	ldr	r4, [sp, #28]
 8007008:	e002      	b.n	8007010 <_svfiprintf_r+0x654>
 800700a:	3d10      	subs	r5, #16
 800700c:	2d10      	cmp	r5, #16
 800700e:	dd15      	ble.n	800703c <_svfiprintf_r+0x680>
 8007010:	3301      	adds	r3, #1
 8007012:	3210      	adds	r2, #16
 8007014:	e881 0240 	stmia.w	r1, {r6, r9}
 8007018:	3108      	adds	r1, #8
 800701a:	2b07      	cmp	r3, #7
 800701c:	922a      	str	r2, [sp, #168]	; 0xa8
 800701e:	9329      	str	r3, [sp, #164]	; 0xa4
 8007020:	ddf3      	ble.n	800700a <_svfiprintf_r+0x64e>
 8007022:	4620      	mov	r0, r4
 8007024:	4651      	mov	r1, sl
 8007026:	4642      	mov	r2, r8
 8007028:	f7ff fc48 	bl	80068bc <__ssprint_r>
 800702c:	2800      	cmp	r0, #0
 800702e:	d1d1      	bne.n	8006fd4 <_svfiprintf_r+0x618>
 8007030:	3d10      	subs	r5, #16
 8007032:	2d10      	cmp	r5, #16
 8007034:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8007036:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007038:	a90e      	add	r1, sp, #56	; 0x38
 800703a:	dce9      	bgt.n	8007010 <_svfiprintf_r+0x654>
 800703c:	460c      	mov	r4, r1
 800703e:	3301      	adds	r3, #1
 8007040:	1952      	adds	r2, r2, r5
 8007042:	2b07      	cmp	r3, #7
 8007044:	6026      	str	r6, [r4, #0]
 8007046:	6065      	str	r5, [r4, #4]
 8007048:	922a      	str	r2, [sp, #168]	; 0xa8
 800704a:	9329      	str	r3, [sp, #164]	; 0xa4
 800704c:	f300 80d2 	bgt.w	80071f4 <_svfiprintf_r+0x838>
 8007050:	3408      	adds	r4, #8
 8007052:	e71e      	b.n	8006e92 <_svfiprintf_r+0x4d6>
 8007054:	9807      	ldr	r0, [sp, #28]
 8007056:	4651      	mov	r1, sl
 8007058:	4642      	mov	r2, r8
 800705a:	f7ff fc2f 	bl	80068bc <__ssprint_r>
 800705e:	2800      	cmp	r0, #0
 8007060:	d1b8      	bne.n	8006fd4 <_svfiprintf_r+0x618>
 8007062:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8007064:	a90e      	add	r1, sp, #56	; 0x38
 8007066:	e75b      	b.n	8006f20 <_svfiprintf_r+0x564>
 8007068:	9807      	ldr	r0, [sp, #28]
 800706a:	4651      	mov	r1, sl
 800706c:	4642      	mov	r2, r8
 800706e:	f7ff fc25 	bl	80068bc <__ssprint_r>
 8007072:	2800      	cmp	r0, #0
 8007074:	d090      	beq.n	8006f98 <_svfiprintf_r+0x5dc>
 8007076:	e7ad      	b.n	8006fd4 <_svfiprintf_r+0x618>
 8007078:	9103      	str	r1, [sp, #12]
 800707a:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 800707e:	e580      	b.n	8006b82 <_svfiprintf_r+0x1c6>
 8007080:	9807      	ldr	r0, [sp, #28]
 8007082:	4651      	mov	r1, sl
 8007084:	4642      	mov	r2, r8
 8007086:	f7ff fc19 	bl	80068bc <__ssprint_r>
 800708a:	2800      	cmp	r0, #0
 800708c:	d1a2      	bne.n	8006fd4 <_svfiprintf_r+0x618>
 800708e:	ac0e      	add	r4, sp, #56	; 0x38
 8007090:	e4cd      	b.n	8006a2e <_svfiprintf_r+0x72>
 8007092:	9807      	ldr	r0, [sp, #28]
 8007094:	4651      	mov	r1, sl
 8007096:	4642      	mov	r2, r8
 8007098:	f7ff fc10 	bl	80068bc <__ssprint_r>
 800709c:	2800      	cmp	r0, #0
 800709e:	d199      	bne.n	8006fd4 <_svfiprintf_r+0x618>
 80070a0:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80070a2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80070a4:	ac0e      	add	r4, sp, #56	; 0x38
 80070a6:	e72d      	b.n	8006f04 <_svfiprintf_r+0x548>
 80070a8:	9807      	ldr	r0, [sp, #28]
 80070aa:	4651      	mov	r1, sl
 80070ac:	4642      	mov	r2, r8
 80070ae:	f7ff fc05 	bl	80068bc <__ssprint_r>
 80070b2:	2800      	cmp	r0, #0
 80070b4:	d18e      	bne.n	8006fd4 <_svfiprintf_r+0x618>
 80070b6:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80070b8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80070ba:	ac0e      	add	r4, sp, #56	; 0x38
 80070bc:	e6d7      	b.n	8006e6e <_svfiprintf_r+0x4b2>
 80070be:	9807      	ldr	r0, [sp, #28]
 80070c0:	4651      	mov	r1, sl
 80070c2:	4642      	mov	r2, r8
 80070c4:	f7ff fbfa 	bl	80068bc <__ssprint_r>
 80070c8:	2800      	cmp	r0, #0
 80070ca:	d183      	bne.n	8006fd4 <_svfiprintf_r+0x618>
 80070cc:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80070ce:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80070d0:	ac0e      	add	r4, sp, #56	; 0x38
 80070d2:	e6da      	b.n	8006e8a <_svfiprintf_r+0x4ce>
 80070d4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80070d6:	f10d 029f 	add.w	r2, sp, #159	; 0x9f
 80070da:	f003 000f 	and.w	r0, r3, #15
 80070de:	4611      	mov	r1, r2
 80070e0:	5c30      	ldrb	r0, [r6, r0]
 80070e2:	3a01      	subs	r2, #1
 80070e4:	091b      	lsrs	r3, r3, #4
 80070e6:	7008      	strb	r0, [r1, #0]
 80070e8:	d1f7      	bne.n	80070da <_svfiprintf_r+0x71e>
 80070ea:	ebc1 0308 	rsb	r3, r1, r8
 80070ee:	9109      	str	r1, [sp, #36]	; 0x24
 80070f0:	9303      	str	r3, [sp, #12]
 80070f2:	e546      	b.n	8006b82 <_svfiprintf_r+0x1c6>
 80070f4:	2b09      	cmp	r3, #9
 80070f6:	bf82      	ittt	hi
 80070f8:	f64c 46cd 	movwhi	r6, #52429	; 0xcccd
 80070fc:	f10d 019f 	addhi.w	r1, sp, #159	; 0x9f
 8007100:	f6cc 46cc 	movthi	r6, #52428	; 0xcccc
 8007104:	d801      	bhi.n	800710a <_svfiprintf_r+0x74e>
 8007106:	3330      	adds	r3, #48	; 0x30
 8007108:	e755      	b.n	8006fb6 <_svfiprintf_r+0x5fa>
 800710a:	fba6 0203 	umull	r0, r2, r6, r3
 800710e:	08d2      	lsrs	r2, r2, #3
 8007110:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
 8007114:	eba3 0c4c 	sub.w	ip, r3, ip, lsl #1
 8007118:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 800711c:	4608      	mov	r0, r1
 800711e:	f881 c000 	strb.w	ip, [r1]
 8007122:	4613      	mov	r3, r2
 8007124:	3901      	subs	r1, #1
 8007126:	2a00      	cmp	r2, #0
 8007128:	d1ef      	bne.n	800710a <_svfiprintf_r+0x74e>
 800712a:	9009      	str	r0, [sp, #36]	; 0x24
 800712c:	e526      	b.n	8006b7c <_svfiprintf_r+0x1c0>
 800712e:	9905      	ldr	r1, [sp, #20]
 8007130:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8007134:	bf14      	ite	ne
 8007136:	880b      	ldrhne	r3, [r1, #0]
 8007138:	680b      	ldreq	r3, [r1, #0]
 800713a:	2201      	movs	r2, #1
 800713c:	9805      	ldr	r0, [sp, #20]
 800713e:	1c19      	adds	r1, r3, #0
 8007140:	bf18      	it	ne
 8007142:	2101      	movne	r1, #1
 8007144:	3004      	adds	r0, #4
 8007146:	9005      	str	r0, [sp, #20]
 8007148:	e4f4      	b.n	8006b34 <_svfiprintf_r+0x178>
 800714a:	f01b 0140 	ands.w	r1, fp, #64	; 0x40
 800714e:	bf0b      	itete	eq
 8007150:	9a05      	ldreq	r2, [sp, #20]
 8007152:	9905      	ldrne	r1, [sp, #20]
 8007154:	6813      	ldreq	r3, [r2, #0]
 8007156:	880b      	ldrhne	r3, [r1, #0]
 8007158:	bf08      	it	eq
 800715a:	460a      	moveq	r2, r1
 800715c:	e7ee      	b.n	800713c <_svfiprintf_r+0x780>
 800715e:	2202      	movs	r2, #2
 8007160:	e4e8      	b.n	8006b34 <_svfiprintf_r+0x178>
 8007162:	9807      	ldr	r0, [sp, #28]
 8007164:	4651      	mov	r1, sl
 8007166:	4642      	mov	r2, r8
 8007168:	f7ff fba8 	bl	80068bc <__ssprint_r>
 800716c:	2800      	cmp	r0, #0
 800716e:	f47f af31 	bne.w	8006fd4 <_svfiprintf_r+0x618>
 8007172:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8007174:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007176:	ac0e      	add	r4, sp, #56	; 0x38
 8007178:	e669      	b.n	8006e4e <_svfiprintf_r+0x492>
 800717a:	9a05      	ldr	r2, [sp, #20]
 800717c:	6815      	ldr	r5, [r2, #0]
 800717e:	3204      	adds	r2, #4
 8007180:	2d00      	cmp	r5, #0
 8007182:	bfbc      	itt	lt
 8007184:	9205      	strlt	r2, [sp, #20]
 8007186:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
 800718a:	f6ff ac60 	blt.w	8006a4e <_svfiprintf_r+0x92>
 800718e:	9205      	str	r2, [sp, #20]
 8007190:	e45d      	b.n	8006a4e <_svfiprintf_r+0x92>
 8007192:	bf00      	nop
 8007194:	080084d8 	.word	0x080084d8
 8007198:	080084e8 	.word	0x080084e8
 800719c:	9807      	ldr	r0, [sp, #28]
 800719e:	4651      	mov	r1, sl
 80071a0:	4642      	mov	r2, r8
 80071a2:	f7ff fb8b 	bl	80068bc <__ssprint_r>
 80071a6:	2800      	cmp	r0, #0
 80071a8:	f47f af14 	bne.w	8006fd4 <_svfiprintf_r+0x618>
 80071ac:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80071ae:	e6e9      	b.n	8006f84 <_svfiprintf_r+0x5c8>
 80071b0:	2930      	cmp	r1, #48	; 0x30
 80071b2:	d004      	beq.n	80071be <_svfiprintf_r+0x802>
 80071b4:	1e93      	subs	r3, r2, #2
 80071b6:	9309      	str	r3, [sp, #36]	; 0x24
 80071b8:	2330      	movs	r3, #48	; 0x30
 80071ba:	f802 3c02 	strb.w	r3, [r2, #-2]
 80071be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071c0:	ebc3 0308 	rsb	r3, r3, r8
 80071c4:	9303      	str	r3, [sp, #12]
 80071c6:	e4dc      	b.n	8006b82 <_svfiprintf_r+0x1c6>
 80071c8:	9805      	ldr	r0, [sp, #20]
 80071ca:	9904      	ldr	r1, [sp, #16]
 80071cc:	6803      	ldr	r3, [r0, #0]
 80071ce:	3004      	adds	r0, #4
 80071d0:	9005      	str	r0, [sp, #20]
 80071d2:	6019      	str	r1, [r3, #0]
 80071d4:	e411      	b.n	80069fa <_svfiprintf_r+0x3e>
 80071d6:	9a05      	ldr	r2, [sp, #20]
 80071d8:	6813      	ldr	r3, [r2, #0]
 80071da:	3204      	adds	r2, #4
 80071dc:	9205      	str	r2, [sp, #20]
 80071de:	e54e      	b.n	8006c7e <_svfiprintf_r+0x2c2>
 80071e0:	9905      	ldr	r1, [sp, #20]
 80071e2:	880b      	ldrh	r3, [r1, #0]
 80071e4:	3104      	adds	r1, #4
 80071e6:	9105      	str	r1, [sp, #20]
 80071e8:	e52b      	b.n	8006c42 <_svfiprintf_r+0x286>
 80071ea:	f7ff fb37 	bl	800685c <strlen>
 80071ee:	9608      	str	r6, [sp, #32]
 80071f0:	9003      	str	r0, [sp, #12]
 80071f2:	e4c7      	b.n	8006b84 <_svfiprintf_r+0x1c8>
 80071f4:	9807      	ldr	r0, [sp, #28]
 80071f6:	4651      	mov	r1, sl
 80071f8:	4642      	mov	r2, r8
 80071fa:	f7ff fb5f 	bl	80068bc <__ssprint_r>
 80071fe:	2800      	cmp	r0, #0
 8007200:	f47f aee8 	bne.w	8006fd4 <_svfiprintf_r+0x618>
 8007204:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8007206:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007208:	ac0e      	add	r4, sp, #56	; 0x38
 800720a:	e642      	b.n	8006e92 <_svfiprintf_r+0x4d6>
 800720c:	9905      	ldr	r1, [sp, #20]
 800720e:	9a04      	ldr	r2, [sp, #16]
 8007210:	680b      	ldr	r3, [r1, #0]
 8007212:	3104      	adds	r1, #4
 8007214:	9105      	str	r1, [sp, #20]
 8007216:	601a      	str	r2, [r3, #0]
 8007218:	f7ff bbef 	b.w	80069fa <_svfiprintf_r+0x3e>
 800721c:	2140      	movs	r1, #64	; 0x40
 800721e:	9200      	str	r2, [sp, #0]
 8007220:	f7fe fa56 	bl	80056d0 <_malloc_r>
 8007224:	9a00      	ldr	r2, [sp, #0]
 8007226:	f8ca 0000 	str.w	r0, [sl]
 800722a:	f8ca 0010 	str.w	r0, [sl, #16]
 800722e:	b188      	cbz	r0, 8007254 <_svfiprintf_r+0x898>
 8007230:	2340      	movs	r3, #64	; 0x40
 8007232:	f8ca 3014 	str.w	r3, [sl, #20]
 8007236:	f7ff bbcf 	b.w	80069d8 <_svfiprintf_r+0x1c>
 800723a:	2d06      	cmp	r5, #6
 800723c:	bf28      	it	cs
 800723e:	2506      	movcs	r5, #6
 8007240:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 8007244:	9302      	str	r3, [sp, #8]
 8007246:	4b07      	ldr	r3, [pc, #28]	; (8007264 <_svfiprintf_r+0x8a8>)
 8007248:	9503      	str	r5, [sp, #12]
 800724a:	9309      	str	r3, [sp, #36]	; 0x24
 800724c:	e52e      	b.n	8006cac <_svfiprintf_r+0x2f0>
 800724e:	9503      	str	r5, [sp, #12]
 8007250:	9008      	str	r0, [sp, #32]
 8007252:	e497      	b.n	8006b84 <_svfiprintf_r+0x1c8>
 8007254:	9807      	ldr	r0, [sp, #28]
 8007256:	230c      	movs	r3, #12
 8007258:	6003      	str	r3, [r0, #0]
 800725a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800725e:	9304      	str	r3, [sp, #16]
 8007260:	e6c1      	b.n	8006fe6 <_svfiprintf_r+0x62a>
 8007262:	bf00      	nop
 8007264:	080085a4 	.word	0x080085a4

08007268 <_calloc_r>:
 8007268:	b510      	push	{r4, lr}
 800726a:	fb01 f102 	mul.w	r1, r1, r2
 800726e:	f7fe fa2f 	bl	80056d0 <_malloc_r>
 8007272:	4604      	mov	r4, r0
 8007274:	b300      	cbz	r0, 80072b8 <_calloc_r+0x50>
 8007276:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800727a:	f022 0203 	bic.w	r2, r2, #3
 800727e:	3a04      	subs	r2, #4
 8007280:	2a24      	cmp	r2, #36	; 0x24
 8007282:	d81b      	bhi.n	80072bc <_calloc_r+0x54>
 8007284:	2a13      	cmp	r2, #19
 8007286:	bf98      	it	ls
 8007288:	4602      	movls	r2, r0
 800728a:	d911      	bls.n	80072b0 <_calloc_r+0x48>
 800728c:	2300      	movs	r3, #0
 800728e:	2a1b      	cmp	r2, #27
 8007290:	6003      	str	r3, [r0, #0]
 8007292:	6043      	str	r3, [r0, #4]
 8007294:	bf98      	it	ls
 8007296:	f100 0208 	addls.w	r2, r0, #8
 800729a:	d909      	bls.n	80072b0 <_calloc_r+0x48>
 800729c:	2a24      	cmp	r2, #36	; 0x24
 800729e:	6083      	str	r3, [r0, #8]
 80072a0:	60c3      	str	r3, [r0, #12]
 80072a2:	bf11      	iteee	ne
 80072a4:	f100 0210 	addne.w	r2, r0, #16
 80072a8:	6103      	streq	r3, [r0, #16]
 80072aa:	6143      	streq	r3, [r0, #20]
 80072ac:	f100 0218 	addeq.w	r2, r0, #24
 80072b0:	2300      	movs	r3, #0
 80072b2:	6013      	str	r3, [r2, #0]
 80072b4:	6053      	str	r3, [r2, #4]
 80072b6:	6093      	str	r3, [r2, #8]
 80072b8:	4620      	mov	r0, r4
 80072ba:	bd10      	pop	{r4, pc}
 80072bc:	2100      	movs	r1, #0
 80072be:	f000 f85b 	bl	8007378 <memset>
 80072c2:	4620      	mov	r0, r4
 80072c4:	bd10      	pop	{r4, pc}
 80072c6:	bf00      	nop

080072c8 <memmove>:
 80072c8:	4288      	cmp	r0, r1
 80072ca:	b4f0      	push	{r4, r5, r6, r7}
 80072cc:	d912      	bls.n	80072f4 <memmove+0x2c>
 80072ce:	188d      	adds	r5, r1, r2
 80072d0:	42a8      	cmp	r0, r5
 80072d2:	d20f      	bcs.n	80072f4 <memmove+0x2c>
 80072d4:	b162      	cbz	r2, 80072f0 <memmove+0x28>
 80072d6:	4251      	negs	r1, r2
 80072d8:	4613      	mov	r3, r2
 80072da:	1882      	adds	r2, r0, r2
 80072dc:	186d      	adds	r5, r5, r1
 80072de:	1852      	adds	r2, r2, r1
 80072e0:	18ec      	adds	r4, r5, r3
 80072e2:	18d1      	adds	r1, r2, r3
 80072e4:	f814 4c01 	ldrb.w	r4, [r4, #-1]
 80072e8:	3b01      	subs	r3, #1
 80072ea:	f801 4c01 	strb.w	r4, [r1, #-1]
 80072ee:	d1f7      	bne.n	80072e0 <memmove+0x18>
 80072f0:	bcf0      	pop	{r4, r5, r6, r7}
 80072f2:	4770      	bx	lr
 80072f4:	2a0f      	cmp	r2, #15
 80072f6:	bf98      	it	ls
 80072f8:	4603      	movls	r3, r0
 80072fa:	d931      	bls.n	8007360 <memmove+0x98>
 80072fc:	ea41 0300 	orr.w	r3, r1, r0
 8007300:	079b      	lsls	r3, r3, #30
 8007302:	d137      	bne.n	8007374 <memmove+0xac>
 8007304:	460c      	mov	r4, r1
 8007306:	4603      	mov	r3, r0
 8007308:	4615      	mov	r5, r2
 800730a:	6826      	ldr	r6, [r4, #0]
 800730c:	601e      	str	r6, [r3, #0]
 800730e:	6866      	ldr	r6, [r4, #4]
 8007310:	605e      	str	r6, [r3, #4]
 8007312:	68a6      	ldr	r6, [r4, #8]
 8007314:	609e      	str	r6, [r3, #8]
 8007316:	68e6      	ldr	r6, [r4, #12]
 8007318:	3d10      	subs	r5, #16
 800731a:	60de      	str	r6, [r3, #12]
 800731c:	3410      	adds	r4, #16
 800731e:	3310      	adds	r3, #16
 8007320:	2d0f      	cmp	r5, #15
 8007322:	d8f2      	bhi.n	800730a <memmove+0x42>
 8007324:	f1a2 0410 	sub.w	r4, r2, #16
 8007328:	f024 040f 	bic.w	r4, r4, #15
 800732c:	f002 020f 	and.w	r2, r2, #15
 8007330:	3410      	adds	r4, #16
 8007332:	2a03      	cmp	r2, #3
 8007334:	eb00 0304 	add.w	r3, r0, r4
 8007338:	4421      	add	r1, r4
 800733a:	d911      	bls.n	8007360 <memmove+0x98>
 800733c:	1f0e      	subs	r6, r1, #4
 800733e:	461d      	mov	r5, r3
 8007340:	4614      	mov	r4, r2
 8007342:	f856 7f04 	ldr.w	r7, [r6, #4]!
 8007346:	3c04      	subs	r4, #4
 8007348:	2c03      	cmp	r4, #3
 800734a:	f845 7b04 	str.w	r7, [r5], #4
 800734e:	d8f8      	bhi.n	8007342 <memmove+0x7a>
 8007350:	1f14      	subs	r4, r2, #4
 8007352:	f024 0403 	bic.w	r4, r4, #3
 8007356:	3404      	adds	r4, #4
 8007358:	f002 0203 	and.w	r2, r2, #3
 800735c:	1909      	adds	r1, r1, r4
 800735e:	191b      	adds	r3, r3, r4
 8007360:	2a00      	cmp	r2, #0
 8007362:	d0c5      	beq.n	80072f0 <memmove+0x28>
 8007364:	3901      	subs	r1, #1
 8007366:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800736a:	3a01      	subs	r2, #1
 800736c:	f803 4b01 	strb.w	r4, [r3], #1
 8007370:	d1f9      	bne.n	8007366 <memmove+0x9e>
 8007372:	e7bd      	b.n	80072f0 <memmove+0x28>
 8007374:	4603      	mov	r3, r0
 8007376:	e7f5      	b.n	8007364 <memmove+0x9c>

08007378 <memset>:
 8007378:	f010 0f03 	tst.w	r0, #3
 800737c:	b470      	push	{r4, r5, r6}
 800737e:	4603      	mov	r3, r0
 8007380:	d042      	beq.n	8007408 <memset+0x90>
 8007382:	2a00      	cmp	r2, #0
 8007384:	d03e      	beq.n	8007404 <memset+0x8c>
 8007386:	3a01      	subs	r2, #1
 8007388:	b2cd      	uxtb	r5, r1
 800738a:	e003      	b.n	8007394 <memset+0x1c>
 800738c:	1e54      	subs	r4, r2, #1
 800738e:	2a00      	cmp	r2, #0
 8007390:	d038      	beq.n	8007404 <memset+0x8c>
 8007392:	4622      	mov	r2, r4
 8007394:	f803 5b01 	strb.w	r5, [r3], #1
 8007398:	f013 0f03 	tst.w	r3, #3
 800739c:	461c      	mov	r4, r3
 800739e:	d1f5      	bne.n	800738c <memset+0x14>
 80073a0:	2a03      	cmp	r2, #3
 80073a2:	d929      	bls.n	80073f8 <memset+0x80>
 80073a4:	b2cd      	uxtb	r5, r1
 80073a6:	2a0f      	cmp	r2, #15
 80073a8:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 80073ac:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 80073b0:	bf84      	itt	hi
 80073b2:	4623      	movhi	r3, r4
 80073b4:	4616      	movhi	r6, r2
 80073b6:	d911      	bls.n	80073dc <memset+0x64>
 80073b8:	3e10      	subs	r6, #16
 80073ba:	601d      	str	r5, [r3, #0]
 80073bc:	605d      	str	r5, [r3, #4]
 80073be:	609d      	str	r5, [r3, #8]
 80073c0:	60dd      	str	r5, [r3, #12]
 80073c2:	3310      	adds	r3, #16
 80073c4:	2e0f      	cmp	r6, #15
 80073c6:	d8f7      	bhi.n	80073b8 <memset+0x40>
 80073c8:	f1a2 0310 	sub.w	r3, r2, #16
 80073cc:	f023 030f 	bic.w	r3, r3, #15
 80073d0:	f002 020f 	and.w	r2, r2, #15
 80073d4:	3310      	adds	r3, #16
 80073d6:	2a03      	cmp	r2, #3
 80073d8:	441c      	add	r4, r3
 80073da:	d90d      	bls.n	80073f8 <memset+0x80>
 80073dc:	4626      	mov	r6, r4
 80073de:	4613      	mov	r3, r2
 80073e0:	3b04      	subs	r3, #4
 80073e2:	2b03      	cmp	r3, #3
 80073e4:	f846 5b04 	str.w	r5, [r6], #4
 80073e8:	d8fa      	bhi.n	80073e0 <memset+0x68>
 80073ea:	1f13      	subs	r3, r2, #4
 80073ec:	f023 0303 	bic.w	r3, r3, #3
 80073f0:	3304      	adds	r3, #4
 80073f2:	f002 0203 	and.w	r2, r2, #3
 80073f6:	18e4      	adds	r4, r4, r3
 80073f8:	b2c9      	uxtb	r1, r1
 80073fa:	b11a      	cbz	r2, 8007404 <memset+0x8c>
 80073fc:	3a01      	subs	r2, #1
 80073fe:	f804 1b01 	strb.w	r1, [r4], #1
 8007402:	d1fb      	bne.n	80073fc <memset+0x84>
 8007404:	bc70      	pop	{r4, r5, r6}
 8007406:	4770      	bx	lr
 8007408:	4604      	mov	r4, r0
 800740a:	e7c9      	b.n	80073a0 <memset+0x28>

0800740c <_realloc_r>:
 800740c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007410:	460c      	mov	r4, r1
 8007412:	b083      	sub	sp, #12
 8007414:	4607      	mov	r7, r0
 8007416:	4690      	mov	r8, r2
 8007418:	2900      	cmp	r1, #0
 800741a:	f000 80fe 	beq.w	800761a <_realloc_r+0x20e>
 800741e:	f108 050b 	add.w	r5, r8, #11
 8007422:	f7fe fc8b 	bl	8005d3c <__malloc_lock>
 8007426:	2d16      	cmp	r5, #22
 8007428:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800742c:	d87d      	bhi.n	800752a <_realloc_r+0x11e>
 800742e:	2210      	movs	r2, #16
 8007430:	2600      	movs	r6, #0
 8007432:	4615      	mov	r5, r2
 8007434:	4545      	cmp	r5, r8
 8007436:	bf38      	it	cc
 8007438:	f046 0601 	orrcc.w	r6, r6, #1
 800743c:	2e00      	cmp	r6, #0
 800743e:	f040 80f2 	bne.w	8007626 <_realloc_r+0x21a>
 8007442:	f021 0a03 	bic.w	sl, r1, #3
 8007446:	4592      	cmp	sl, r2
 8007448:	f1a4 0b08 	sub.w	fp, r4, #8
 800744c:	bfa8      	it	ge
 800744e:	4656      	movge	r6, sl
 8007450:	da55      	bge.n	80074fe <_realloc_r+0xf2>
 8007452:	4ba0      	ldr	r3, [pc, #640]	; (80076d4 <_realloc_r+0x2c8>)
 8007454:	f8d3 c008 	ldr.w	ip, [r3, #8]
 8007458:	eb0b 000a 	add.w	r0, fp, sl
 800745c:	4584      	cmp	ip, r0
 800745e:	f000 80e7 	beq.w	8007630 <_realloc_r+0x224>
 8007462:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8007466:	f02e 0901 	bic.w	r9, lr, #1
 800746a:	4481      	add	r9, r0
 800746c:	f8d9 9004 	ldr.w	r9, [r9, #4]
 8007470:	f019 0f01 	tst.w	r9, #1
 8007474:	bf1c      	itt	ne
 8007476:	46b6      	movne	lr, r6
 8007478:	4670      	movne	r0, lr
 800747a:	d05b      	beq.n	8007534 <_realloc_r+0x128>
 800747c:	07c9      	lsls	r1, r1, #31
 800747e:	d479      	bmi.n	8007574 <_realloc_r+0x168>
 8007480:	f854 1c08 	ldr.w	r1, [r4, #-8]
 8007484:	ebc1 090b 	rsb	r9, r1, fp
 8007488:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800748c:	f021 0103 	bic.w	r1, r1, #3
 8007490:	2800      	cmp	r0, #0
 8007492:	f000 8097 	beq.w	80075c4 <_realloc_r+0x1b8>
 8007496:	4560      	cmp	r0, ip
 8007498:	eb01 0c0a 	add.w	ip, r1, sl
 800749c:	eb0e 060c 	add.w	r6, lr, ip
 80074a0:	f000 811a 	beq.w	80076d8 <_realloc_r+0x2cc>
 80074a4:	42b2      	cmp	r2, r6
 80074a6:	f300 808f 	bgt.w	80075c8 <_realloc_r+0x1bc>
 80074aa:	68c3      	ldr	r3, [r0, #12]
 80074ac:	6882      	ldr	r2, [r0, #8]
 80074ae:	46c8      	mov	r8, r9
 80074b0:	609a      	str	r2, [r3, #8]
 80074b2:	60d3      	str	r3, [r2, #12]
 80074b4:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80074b8:	f858 1f08 	ldr.w	r1, [r8, #8]!
 80074bc:	f1aa 0204 	sub.w	r2, sl, #4
 80074c0:	2a24      	cmp	r2, #36	; 0x24
 80074c2:	60cb      	str	r3, [r1, #12]
 80074c4:	6099      	str	r1, [r3, #8]
 80074c6:	f200 8144 	bhi.w	8007752 <_realloc_r+0x346>
 80074ca:	2a13      	cmp	r2, #19
 80074cc:	bf98      	it	ls
 80074ce:	4643      	movls	r3, r8
 80074d0:	d90b      	bls.n	80074ea <_realloc_r+0xde>
 80074d2:	6823      	ldr	r3, [r4, #0]
 80074d4:	f8c9 3008 	str.w	r3, [r9, #8]
 80074d8:	6863      	ldr	r3, [r4, #4]
 80074da:	2a1b      	cmp	r2, #27
 80074dc:	f8c9 300c 	str.w	r3, [r9, #12]
 80074e0:	f200 8140 	bhi.w	8007764 <_realloc_r+0x358>
 80074e4:	f109 0310 	add.w	r3, r9, #16
 80074e8:	3408      	adds	r4, #8
 80074ea:	6822      	ldr	r2, [r4, #0]
 80074ec:	601a      	str	r2, [r3, #0]
 80074ee:	6862      	ldr	r2, [r4, #4]
 80074f0:	605a      	str	r2, [r3, #4]
 80074f2:	68a2      	ldr	r2, [r4, #8]
 80074f4:	609a      	str	r2, [r3, #8]
 80074f6:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80074fa:	4644      	mov	r4, r8
 80074fc:	46cb      	mov	fp, r9
 80074fe:	1b72      	subs	r2, r6, r5
 8007500:	2a0f      	cmp	r2, #15
 8007502:	d822      	bhi.n	800754a <_realloc_r+0x13e>
 8007504:	f001 0101 	and.w	r1, r1, #1
 8007508:	eb0b 0306 	add.w	r3, fp, r6
 800750c:	430e      	orrs	r6, r1
 800750e:	f8cb 6004 	str.w	r6, [fp, #4]
 8007512:	685a      	ldr	r2, [r3, #4]
 8007514:	f042 0201 	orr.w	r2, r2, #1
 8007518:	605a      	str	r2, [r3, #4]
 800751a:	4638      	mov	r0, r7
 800751c:	f7fe fc10 	bl	8005d40 <__malloc_unlock>
 8007520:	46a0      	mov	r8, r4
 8007522:	4640      	mov	r0, r8
 8007524:	b003      	add	sp, #12
 8007526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800752a:	f025 0507 	bic.w	r5, r5, #7
 800752e:	462a      	mov	r2, r5
 8007530:	0fee      	lsrs	r6, r5, #31
 8007532:	e77f      	b.n	8007434 <_realloc_r+0x28>
 8007534:	f02e 0e03 	bic.w	lr, lr, #3
 8007538:	eb0e 060a 	add.w	r6, lr, sl
 800753c:	42b2      	cmp	r2, r6
 800753e:	dc9d      	bgt.n	800747c <_realloc_r+0x70>
 8007540:	68c3      	ldr	r3, [r0, #12]
 8007542:	6882      	ldr	r2, [r0, #8]
 8007544:	60d3      	str	r3, [r2, #12]
 8007546:	609a      	str	r2, [r3, #8]
 8007548:	e7d9      	b.n	80074fe <_realloc_r+0xf2>
 800754a:	eb0b 0305 	add.w	r3, fp, r5
 800754e:	f001 0101 	and.w	r1, r1, #1
 8007552:	1898      	adds	r0, r3, r2
 8007554:	430d      	orrs	r5, r1
 8007556:	f042 0201 	orr.w	r2, r2, #1
 800755a:	f8cb 5004 	str.w	r5, [fp, #4]
 800755e:	605a      	str	r2, [r3, #4]
 8007560:	6842      	ldr	r2, [r0, #4]
 8007562:	f042 0201 	orr.w	r2, r2, #1
 8007566:	6042      	str	r2, [r0, #4]
 8007568:	f103 0108 	add.w	r1, r3, #8
 800756c:	4638      	mov	r0, r7
 800756e:	f7fd ffa3 	bl	80054b8 <_free_r>
 8007572:	e7d2      	b.n	800751a <_realloc_r+0x10e>
 8007574:	4641      	mov	r1, r8
 8007576:	4638      	mov	r0, r7
 8007578:	f7fe f8aa 	bl	80056d0 <_malloc_r>
 800757c:	4680      	mov	r8, r0
 800757e:	b1e8      	cbz	r0, 80075bc <_realloc_r+0x1b0>
 8007580:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8007584:	f021 0301 	bic.w	r3, r1, #1
 8007588:	f1a0 0208 	sub.w	r2, r0, #8
 800758c:	445b      	add	r3, fp
 800758e:	429a      	cmp	r2, r3
 8007590:	f000 80d9 	beq.w	8007746 <_realloc_r+0x33a>
 8007594:	f1aa 0204 	sub.w	r2, sl, #4
 8007598:	2a24      	cmp	r2, #36	; 0x24
 800759a:	f200 8096 	bhi.w	80076ca <_realloc_r+0x2be>
 800759e:	2a13      	cmp	r2, #19
 80075a0:	bf9c      	itt	ls
 80075a2:	4603      	movls	r3, r0
 80075a4:	4622      	movls	r2, r4
 80075a6:	d863      	bhi.n	8007670 <_realloc_r+0x264>
 80075a8:	6811      	ldr	r1, [r2, #0]
 80075aa:	6019      	str	r1, [r3, #0]
 80075ac:	6851      	ldr	r1, [r2, #4]
 80075ae:	6059      	str	r1, [r3, #4]
 80075b0:	6892      	ldr	r2, [r2, #8]
 80075b2:	609a      	str	r2, [r3, #8]
 80075b4:	4638      	mov	r0, r7
 80075b6:	4621      	mov	r1, r4
 80075b8:	f7fd ff7e 	bl	80054b8 <_free_r>
 80075bc:	4638      	mov	r0, r7
 80075be:	f7fe fbbf 	bl	8005d40 <__malloc_unlock>
 80075c2:	e7ae      	b.n	8007522 <_realloc_r+0x116>
 80075c4:	eb01 0c0a 	add.w	ip, r1, sl
 80075c8:	4562      	cmp	r2, ip
 80075ca:	dcd3      	bgt.n	8007574 <_realloc_r+0x168>
 80075cc:	464e      	mov	r6, r9
 80075ce:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80075d2:	f856 1f08 	ldr.w	r1, [r6, #8]!
 80075d6:	f1aa 0204 	sub.w	r2, sl, #4
 80075da:	2a24      	cmp	r2, #36	; 0x24
 80075dc:	60cb      	str	r3, [r1, #12]
 80075de:	6099      	str	r1, [r3, #8]
 80075e0:	d865      	bhi.n	80076ae <_realloc_r+0x2a2>
 80075e2:	2a13      	cmp	r2, #19
 80075e4:	bf98      	it	ls
 80075e6:	4633      	movls	r3, r6
 80075e8:	d90b      	bls.n	8007602 <_realloc_r+0x1f6>
 80075ea:	6823      	ldr	r3, [r4, #0]
 80075ec:	f8c9 3008 	str.w	r3, [r9, #8]
 80075f0:	6863      	ldr	r3, [r4, #4]
 80075f2:	2a1b      	cmp	r2, #27
 80075f4:	f8c9 300c 	str.w	r3, [r9, #12]
 80075f8:	f200 80c0 	bhi.w	800777c <_realloc_r+0x370>
 80075fc:	f109 0310 	add.w	r3, r9, #16
 8007600:	3408      	adds	r4, #8
 8007602:	6822      	ldr	r2, [r4, #0]
 8007604:	601a      	str	r2, [r3, #0]
 8007606:	6862      	ldr	r2, [r4, #4]
 8007608:	605a      	str	r2, [r3, #4]
 800760a:	68a2      	ldr	r2, [r4, #8]
 800760c:	609a      	str	r2, [r3, #8]
 800760e:	4634      	mov	r4, r6
 8007610:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007614:	4666      	mov	r6, ip
 8007616:	46cb      	mov	fp, r9
 8007618:	e771      	b.n	80074fe <_realloc_r+0xf2>
 800761a:	4611      	mov	r1, r2
 800761c:	b003      	add	sp, #12
 800761e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007622:	f7fe b855 	b.w	80056d0 <_malloc_r>
 8007626:	230c      	movs	r3, #12
 8007628:	603b      	str	r3, [r7, #0]
 800762a:	f04f 0800 	mov.w	r8, #0
 800762e:	e778      	b.n	8007522 <_realloc_r+0x116>
 8007630:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8007634:	f026 0e03 	bic.w	lr, r6, #3
 8007638:	eb0e 000a 	add.w	r0, lr, sl
 800763c:	f105 0610 	add.w	r6, r5, #16
 8007640:	42b0      	cmp	r0, r6
 8007642:	bfb8      	it	lt
 8007644:	4660      	movlt	r0, ip
 8007646:	f6ff af19 	blt.w	800747c <_realloc_r+0x70>
 800764a:	eb0b 0205 	add.w	r2, fp, r5
 800764e:	1b41      	subs	r1, r0, r5
 8007650:	f041 0101 	orr.w	r1, r1, #1
 8007654:	6051      	str	r1, [r2, #4]
 8007656:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800765a:	609a      	str	r2, [r3, #8]
 800765c:	f001 0301 	and.w	r3, r1, #1
 8007660:	431d      	orrs	r5, r3
 8007662:	f844 5c04 	str.w	r5, [r4, #-4]
 8007666:	4638      	mov	r0, r7
 8007668:	f7fe fb6a 	bl	8005d40 <__malloc_unlock>
 800766c:	46a0      	mov	r8, r4
 800766e:	e758      	b.n	8007522 <_realloc_r+0x116>
 8007670:	6823      	ldr	r3, [r4, #0]
 8007672:	6003      	str	r3, [r0, #0]
 8007674:	6863      	ldr	r3, [r4, #4]
 8007676:	2a1b      	cmp	r2, #27
 8007678:	6043      	str	r3, [r0, #4]
 800767a:	bf9c      	itt	ls
 800767c:	f104 0208 	addls.w	r2, r4, #8
 8007680:	f100 0308 	addls.w	r3, r0, #8
 8007684:	d990      	bls.n	80075a8 <_realloc_r+0x19c>
 8007686:	68a3      	ldr	r3, [r4, #8]
 8007688:	6083      	str	r3, [r0, #8]
 800768a:	68e3      	ldr	r3, [r4, #12]
 800768c:	2a24      	cmp	r2, #36	; 0x24
 800768e:	60c3      	str	r3, [r0, #12]
 8007690:	bf03      	ittte	eq
 8007692:	6923      	ldreq	r3, [r4, #16]
 8007694:	6103      	streq	r3, [r0, #16]
 8007696:	6962      	ldreq	r2, [r4, #20]
 8007698:	f100 0310 	addne.w	r3, r0, #16
 800769c:	bf09      	itett	eq
 800769e:	6142      	streq	r2, [r0, #20]
 80076a0:	f104 0210 	addne.w	r2, r4, #16
 80076a4:	f100 0318 	addeq.w	r3, r0, #24
 80076a8:	f104 0218 	addeq.w	r2, r4, #24
 80076ac:	e77c      	b.n	80075a8 <_realloc_r+0x19c>
 80076ae:	4621      	mov	r1, r4
 80076b0:	4630      	mov	r0, r6
 80076b2:	f8cd c004 	str.w	ip, [sp, #4]
 80076b6:	f7ff fe07 	bl	80072c8 <memmove>
 80076ba:	f8dd c004 	ldr.w	ip, [sp, #4]
 80076be:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80076c2:	4634      	mov	r4, r6
 80076c4:	46cb      	mov	fp, r9
 80076c6:	4666      	mov	r6, ip
 80076c8:	e719      	b.n	80074fe <_realloc_r+0xf2>
 80076ca:	4621      	mov	r1, r4
 80076cc:	f7ff fdfc 	bl	80072c8 <memmove>
 80076d0:	e770      	b.n	80075b4 <_realloc_r+0x1a8>
 80076d2:	bf00      	nop
 80076d4:	2000059c 	.word	0x2000059c
 80076d8:	f105 0110 	add.w	r1, r5, #16
 80076dc:	428e      	cmp	r6, r1
 80076de:	f6ff af73 	blt.w	80075c8 <_realloc_r+0x1bc>
 80076e2:	46c8      	mov	r8, r9
 80076e4:	f8d9 100c 	ldr.w	r1, [r9, #12]
 80076e8:	f858 0f08 	ldr.w	r0, [r8, #8]!
 80076ec:	f1aa 0204 	sub.w	r2, sl, #4
 80076f0:	2a24      	cmp	r2, #36	; 0x24
 80076f2:	60c1      	str	r1, [r0, #12]
 80076f4:	6088      	str	r0, [r1, #8]
 80076f6:	d861      	bhi.n	80077bc <_realloc_r+0x3b0>
 80076f8:	2a13      	cmp	r2, #19
 80076fa:	bf98      	it	ls
 80076fc:	4642      	movls	r2, r8
 80076fe:	d90a      	bls.n	8007716 <_realloc_r+0x30a>
 8007700:	6821      	ldr	r1, [r4, #0]
 8007702:	f8c9 1008 	str.w	r1, [r9, #8]
 8007706:	6861      	ldr	r1, [r4, #4]
 8007708:	2a1b      	cmp	r2, #27
 800770a:	f8c9 100c 	str.w	r1, [r9, #12]
 800770e:	d85c      	bhi.n	80077ca <_realloc_r+0x3be>
 8007710:	f109 0210 	add.w	r2, r9, #16
 8007714:	3408      	adds	r4, #8
 8007716:	6821      	ldr	r1, [r4, #0]
 8007718:	6011      	str	r1, [r2, #0]
 800771a:	6861      	ldr	r1, [r4, #4]
 800771c:	6051      	str	r1, [r2, #4]
 800771e:	68a1      	ldr	r1, [r4, #8]
 8007720:	6091      	str	r1, [r2, #8]
 8007722:	eb09 0205 	add.w	r2, r9, r5
 8007726:	1b71      	subs	r1, r6, r5
 8007728:	f041 0101 	orr.w	r1, r1, #1
 800772c:	6051      	str	r1, [r2, #4]
 800772e:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007732:	609a      	str	r2, [r3, #8]
 8007734:	f001 0301 	and.w	r3, r1, #1
 8007738:	431d      	orrs	r5, r3
 800773a:	f8c9 5004 	str.w	r5, [r9, #4]
 800773e:	4638      	mov	r0, r7
 8007740:	f7fe fafe 	bl	8005d40 <__malloc_unlock>
 8007744:	e6ed      	b.n	8007522 <_realloc_r+0x116>
 8007746:	f850 6c04 	ldr.w	r6, [r0, #-4]
 800774a:	f026 0603 	bic.w	r6, r6, #3
 800774e:	4456      	add	r6, sl
 8007750:	e6d5      	b.n	80074fe <_realloc_r+0xf2>
 8007752:	4621      	mov	r1, r4
 8007754:	4640      	mov	r0, r8
 8007756:	f7ff fdb7 	bl	80072c8 <memmove>
 800775a:	4644      	mov	r4, r8
 800775c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007760:	46cb      	mov	fp, r9
 8007762:	e6cc      	b.n	80074fe <_realloc_r+0xf2>
 8007764:	68a3      	ldr	r3, [r4, #8]
 8007766:	f8c9 3010 	str.w	r3, [r9, #16]
 800776a:	68e3      	ldr	r3, [r4, #12]
 800776c:	2a24      	cmp	r2, #36	; 0x24
 800776e:	f8c9 3014 	str.w	r3, [r9, #20]
 8007772:	d00f      	beq.n	8007794 <_realloc_r+0x388>
 8007774:	f109 0318 	add.w	r3, r9, #24
 8007778:	3410      	adds	r4, #16
 800777a:	e6b6      	b.n	80074ea <_realloc_r+0xde>
 800777c:	68a3      	ldr	r3, [r4, #8]
 800777e:	f8c9 3010 	str.w	r3, [r9, #16]
 8007782:	68e3      	ldr	r3, [r4, #12]
 8007784:	2a24      	cmp	r2, #36	; 0x24
 8007786:	f8c9 3014 	str.w	r3, [r9, #20]
 800778a:	d00d      	beq.n	80077a8 <_realloc_r+0x39c>
 800778c:	f109 0318 	add.w	r3, r9, #24
 8007790:	3410      	adds	r4, #16
 8007792:	e736      	b.n	8007602 <_realloc_r+0x1f6>
 8007794:	6923      	ldr	r3, [r4, #16]
 8007796:	f8c9 3018 	str.w	r3, [r9, #24]
 800779a:	6962      	ldr	r2, [r4, #20]
 800779c:	f109 0320 	add.w	r3, r9, #32
 80077a0:	f8c9 201c 	str.w	r2, [r9, #28]
 80077a4:	3418      	adds	r4, #24
 80077a6:	e6a0      	b.n	80074ea <_realloc_r+0xde>
 80077a8:	6923      	ldr	r3, [r4, #16]
 80077aa:	f8c9 3018 	str.w	r3, [r9, #24]
 80077ae:	6962      	ldr	r2, [r4, #20]
 80077b0:	f109 0320 	add.w	r3, r9, #32
 80077b4:	f8c9 201c 	str.w	r2, [r9, #28]
 80077b8:	3418      	adds	r4, #24
 80077ba:	e722      	b.n	8007602 <_realloc_r+0x1f6>
 80077bc:	4640      	mov	r0, r8
 80077be:	4621      	mov	r1, r4
 80077c0:	9301      	str	r3, [sp, #4]
 80077c2:	f7ff fd81 	bl	80072c8 <memmove>
 80077c6:	9b01      	ldr	r3, [sp, #4]
 80077c8:	e7ab      	b.n	8007722 <_realloc_r+0x316>
 80077ca:	68a1      	ldr	r1, [r4, #8]
 80077cc:	f8c9 1010 	str.w	r1, [r9, #16]
 80077d0:	68e1      	ldr	r1, [r4, #12]
 80077d2:	2a24      	cmp	r2, #36	; 0x24
 80077d4:	f8c9 1014 	str.w	r1, [r9, #20]
 80077d8:	d003      	beq.n	80077e2 <_realloc_r+0x3d6>
 80077da:	f109 0218 	add.w	r2, r9, #24
 80077de:	3410      	adds	r4, #16
 80077e0:	e799      	b.n	8007716 <_realloc_r+0x30a>
 80077e2:	6922      	ldr	r2, [r4, #16]
 80077e4:	f8c9 2018 	str.w	r2, [r9, #24]
 80077e8:	6961      	ldr	r1, [r4, #20]
 80077ea:	f109 0220 	add.w	r2, r9, #32
 80077ee:	f8c9 101c 	str.w	r1, [r9, #28]
 80077f2:	3418      	adds	r4, #24
 80077f4:	e78f      	b.n	8007716 <_realloc_r+0x30a>
 80077f6:	bf00      	nop

080077f8 <__aeabi_drsub>:
 80077f8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80077fc:	e002      	b.n	8007804 <__adddf3>
 80077fe:	bf00      	nop

08007800 <__aeabi_dsub>:
 8007800:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08007804 <__adddf3>:
 8007804:	b530      	push	{r4, r5, lr}
 8007806:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800780a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800780e:	ea94 0f05 	teq	r4, r5
 8007812:	bf08      	it	eq
 8007814:	ea90 0f02 	teqeq	r0, r2
 8007818:	bf1f      	itttt	ne
 800781a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800781e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8007822:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8007826:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800782a:	f000 80e2 	beq.w	80079f2 <__adddf3+0x1ee>
 800782e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8007832:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8007836:	bfb8      	it	lt
 8007838:	426d      	neglt	r5, r5
 800783a:	dd0c      	ble.n	8007856 <__adddf3+0x52>
 800783c:	442c      	add	r4, r5
 800783e:	ea80 0202 	eor.w	r2, r0, r2
 8007842:	ea81 0303 	eor.w	r3, r1, r3
 8007846:	ea82 0000 	eor.w	r0, r2, r0
 800784a:	ea83 0101 	eor.w	r1, r3, r1
 800784e:	ea80 0202 	eor.w	r2, r0, r2
 8007852:	ea81 0303 	eor.w	r3, r1, r3
 8007856:	2d36      	cmp	r5, #54	; 0x36
 8007858:	bf88      	it	hi
 800785a:	bd30      	pophi	{r4, r5, pc}
 800785c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8007860:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8007864:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8007868:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800786c:	d002      	beq.n	8007874 <__adddf3+0x70>
 800786e:	4240      	negs	r0, r0
 8007870:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8007874:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8007878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800787c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8007880:	d002      	beq.n	8007888 <__adddf3+0x84>
 8007882:	4252      	negs	r2, r2
 8007884:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8007888:	ea94 0f05 	teq	r4, r5
 800788c:	f000 80a7 	beq.w	80079de <__adddf3+0x1da>
 8007890:	f1a4 0401 	sub.w	r4, r4, #1
 8007894:	f1d5 0e20 	rsbs	lr, r5, #32
 8007898:	db0d      	blt.n	80078b6 <__adddf3+0xb2>
 800789a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800789e:	fa22 f205 	lsr.w	r2, r2, r5
 80078a2:	1880      	adds	r0, r0, r2
 80078a4:	f141 0100 	adc.w	r1, r1, #0
 80078a8:	fa03 f20e 	lsl.w	r2, r3, lr
 80078ac:	1880      	adds	r0, r0, r2
 80078ae:	fa43 f305 	asr.w	r3, r3, r5
 80078b2:	4159      	adcs	r1, r3
 80078b4:	e00e      	b.n	80078d4 <__adddf3+0xd0>
 80078b6:	f1a5 0520 	sub.w	r5, r5, #32
 80078ba:	f10e 0e20 	add.w	lr, lr, #32
 80078be:	2a01      	cmp	r2, #1
 80078c0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80078c4:	bf28      	it	cs
 80078c6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80078ca:	fa43 f305 	asr.w	r3, r3, r5
 80078ce:	18c0      	adds	r0, r0, r3
 80078d0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80078d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80078d8:	d507      	bpl.n	80078ea <__adddf3+0xe6>
 80078da:	f04f 0e00 	mov.w	lr, #0
 80078de:	f1dc 0c00 	rsbs	ip, ip, #0
 80078e2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80078e6:	eb6e 0101 	sbc.w	r1, lr, r1
 80078ea:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80078ee:	d31b      	bcc.n	8007928 <__adddf3+0x124>
 80078f0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80078f4:	d30c      	bcc.n	8007910 <__adddf3+0x10c>
 80078f6:	0849      	lsrs	r1, r1, #1
 80078f8:	ea5f 0030 	movs.w	r0, r0, rrx
 80078fc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8007900:	f104 0401 	add.w	r4, r4, #1
 8007904:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8007908:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800790c:	f080 809a 	bcs.w	8007a44 <__adddf3+0x240>
 8007910:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8007914:	bf08      	it	eq
 8007916:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800791a:	f150 0000 	adcs.w	r0, r0, #0
 800791e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8007922:	ea41 0105 	orr.w	r1, r1, r5
 8007926:	bd30      	pop	{r4, r5, pc}
 8007928:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800792c:	4140      	adcs	r0, r0
 800792e:	eb41 0101 	adc.w	r1, r1, r1
 8007932:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8007936:	f1a4 0401 	sub.w	r4, r4, #1
 800793a:	d1e9      	bne.n	8007910 <__adddf3+0x10c>
 800793c:	f091 0f00 	teq	r1, #0
 8007940:	bf04      	itt	eq
 8007942:	4601      	moveq	r1, r0
 8007944:	2000      	moveq	r0, #0
 8007946:	fab1 f381 	clz	r3, r1
 800794a:	bf08      	it	eq
 800794c:	3320      	addeq	r3, #32
 800794e:	f1a3 030b 	sub.w	r3, r3, #11
 8007952:	f1b3 0220 	subs.w	r2, r3, #32
 8007956:	da0c      	bge.n	8007972 <__adddf3+0x16e>
 8007958:	320c      	adds	r2, #12
 800795a:	dd08      	ble.n	800796e <__adddf3+0x16a>
 800795c:	f102 0c14 	add.w	ip, r2, #20
 8007960:	f1c2 020c 	rsb	r2, r2, #12
 8007964:	fa01 f00c 	lsl.w	r0, r1, ip
 8007968:	fa21 f102 	lsr.w	r1, r1, r2
 800796c:	e00c      	b.n	8007988 <__adddf3+0x184>
 800796e:	f102 0214 	add.w	r2, r2, #20
 8007972:	bfd8      	it	le
 8007974:	f1c2 0c20 	rsble	ip, r2, #32
 8007978:	fa01 f102 	lsl.w	r1, r1, r2
 800797c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8007980:	bfdc      	itt	le
 8007982:	ea41 010c 	orrle.w	r1, r1, ip
 8007986:	4090      	lslle	r0, r2
 8007988:	1ae4      	subs	r4, r4, r3
 800798a:	bfa2      	ittt	ge
 800798c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8007990:	4329      	orrge	r1, r5
 8007992:	bd30      	popge	{r4, r5, pc}
 8007994:	ea6f 0404 	mvn.w	r4, r4
 8007998:	3c1f      	subs	r4, #31
 800799a:	da1c      	bge.n	80079d6 <__adddf3+0x1d2>
 800799c:	340c      	adds	r4, #12
 800799e:	dc0e      	bgt.n	80079be <__adddf3+0x1ba>
 80079a0:	f104 0414 	add.w	r4, r4, #20
 80079a4:	f1c4 0220 	rsb	r2, r4, #32
 80079a8:	fa20 f004 	lsr.w	r0, r0, r4
 80079ac:	fa01 f302 	lsl.w	r3, r1, r2
 80079b0:	ea40 0003 	orr.w	r0, r0, r3
 80079b4:	fa21 f304 	lsr.w	r3, r1, r4
 80079b8:	ea45 0103 	orr.w	r1, r5, r3
 80079bc:	bd30      	pop	{r4, r5, pc}
 80079be:	f1c4 040c 	rsb	r4, r4, #12
 80079c2:	f1c4 0220 	rsb	r2, r4, #32
 80079c6:	fa20 f002 	lsr.w	r0, r0, r2
 80079ca:	fa01 f304 	lsl.w	r3, r1, r4
 80079ce:	ea40 0003 	orr.w	r0, r0, r3
 80079d2:	4629      	mov	r1, r5
 80079d4:	bd30      	pop	{r4, r5, pc}
 80079d6:	fa21 f004 	lsr.w	r0, r1, r4
 80079da:	4629      	mov	r1, r5
 80079dc:	bd30      	pop	{r4, r5, pc}
 80079de:	f094 0f00 	teq	r4, #0
 80079e2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80079e6:	bf06      	itte	eq
 80079e8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80079ec:	3401      	addeq	r4, #1
 80079ee:	3d01      	subne	r5, #1
 80079f0:	e74e      	b.n	8007890 <__adddf3+0x8c>
 80079f2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80079f6:	bf18      	it	ne
 80079f8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80079fc:	d029      	beq.n	8007a52 <__adddf3+0x24e>
 80079fe:	ea94 0f05 	teq	r4, r5
 8007a02:	bf08      	it	eq
 8007a04:	ea90 0f02 	teqeq	r0, r2
 8007a08:	d005      	beq.n	8007a16 <__adddf3+0x212>
 8007a0a:	ea54 0c00 	orrs.w	ip, r4, r0
 8007a0e:	bf04      	itt	eq
 8007a10:	4619      	moveq	r1, r3
 8007a12:	4610      	moveq	r0, r2
 8007a14:	bd30      	pop	{r4, r5, pc}
 8007a16:	ea91 0f03 	teq	r1, r3
 8007a1a:	bf1e      	ittt	ne
 8007a1c:	2100      	movne	r1, #0
 8007a1e:	2000      	movne	r0, #0
 8007a20:	bd30      	popne	{r4, r5, pc}
 8007a22:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8007a26:	d105      	bne.n	8007a34 <__adddf3+0x230>
 8007a28:	0040      	lsls	r0, r0, #1
 8007a2a:	4149      	adcs	r1, r1
 8007a2c:	bf28      	it	cs
 8007a2e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8007a32:	bd30      	pop	{r4, r5, pc}
 8007a34:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8007a38:	bf3c      	itt	cc
 8007a3a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8007a3e:	bd30      	popcc	{r4, r5, pc}
 8007a40:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8007a44:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8007a48:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007a4c:	f04f 0000 	mov.w	r0, #0
 8007a50:	bd30      	pop	{r4, r5, pc}
 8007a52:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8007a56:	bf1a      	itte	ne
 8007a58:	4619      	movne	r1, r3
 8007a5a:	4610      	movne	r0, r2
 8007a5c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8007a60:	bf1c      	itt	ne
 8007a62:	460b      	movne	r3, r1
 8007a64:	4602      	movne	r2, r0
 8007a66:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8007a6a:	bf06      	itte	eq
 8007a6c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8007a70:	ea91 0f03 	teqeq	r1, r3
 8007a74:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8007a78:	bd30      	pop	{r4, r5, pc}
 8007a7a:	bf00      	nop

08007a7c <__aeabi_ui2d>:
 8007a7c:	f090 0f00 	teq	r0, #0
 8007a80:	bf04      	itt	eq
 8007a82:	2100      	moveq	r1, #0
 8007a84:	4770      	bxeq	lr
 8007a86:	b530      	push	{r4, r5, lr}
 8007a88:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8007a8c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8007a90:	f04f 0500 	mov.w	r5, #0
 8007a94:	f04f 0100 	mov.w	r1, #0
 8007a98:	e750      	b.n	800793c <__adddf3+0x138>
 8007a9a:	bf00      	nop

08007a9c <__aeabi_i2d>:
 8007a9c:	f090 0f00 	teq	r0, #0
 8007aa0:	bf04      	itt	eq
 8007aa2:	2100      	moveq	r1, #0
 8007aa4:	4770      	bxeq	lr
 8007aa6:	b530      	push	{r4, r5, lr}
 8007aa8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8007aac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8007ab0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8007ab4:	bf48      	it	mi
 8007ab6:	4240      	negmi	r0, r0
 8007ab8:	f04f 0100 	mov.w	r1, #0
 8007abc:	e73e      	b.n	800793c <__adddf3+0x138>
 8007abe:	bf00      	nop

08007ac0 <__aeabi_f2d>:
 8007ac0:	0042      	lsls	r2, r0, #1
 8007ac2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8007ac6:	ea4f 0131 	mov.w	r1, r1, rrx
 8007aca:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8007ace:	bf1f      	itttt	ne
 8007ad0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8007ad4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8007ad8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8007adc:	4770      	bxne	lr
 8007ade:	f092 0f00 	teq	r2, #0
 8007ae2:	bf14      	ite	ne
 8007ae4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8007ae8:	4770      	bxeq	lr
 8007aea:	b530      	push	{r4, r5, lr}
 8007aec:	f44f 7460 	mov.w	r4, #896	; 0x380
 8007af0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8007af4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007af8:	e720      	b.n	800793c <__adddf3+0x138>
 8007afa:	bf00      	nop

08007afc <__aeabi_ul2d>:
 8007afc:	ea50 0201 	orrs.w	r2, r0, r1
 8007b00:	bf08      	it	eq
 8007b02:	4770      	bxeq	lr
 8007b04:	b530      	push	{r4, r5, lr}
 8007b06:	f04f 0500 	mov.w	r5, #0
 8007b0a:	e00a      	b.n	8007b22 <__aeabi_l2d+0x16>

08007b0c <__aeabi_l2d>:
 8007b0c:	ea50 0201 	orrs.w	r2, r0, r1
 8007b10:	bf08      	it	eq
 8007b12:	4770      	bxeq	lr
 8007b14:	b530      	push	{r4, r5, lr}
 8007b16:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8007b1a:	d502      	bpl.n	8007b22 <__aeabi_l2d+0x16>
 8007b1c:	4240      	negs	r0, r0
 8007b1e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8007b22:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8007b26:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8007b2a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8007b2e:	f43f aedc 	beq.w	80078ea <__adddf3+0xe6>
 8007b32:	f04f 0203 	mov.w	r2, #3
 8007b36:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8007b3a:	bf18      	it	ne
 8007b3c:	3203      	addne	r2, #3
 8007b3e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8007b42:	bf18      	it	ne
 8007b44:	3203      	addne	r2, #3
 8007b46:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8007b4a:	f1c2 0320 	rsb	r3, r2, #32
 8007b4e:	fa00 fc03 	lsl.w	ip, r0, r3
 8007b52:	fa20 f002 	lsr.w	r0, r0, r2
 8007b56:	fa01 fe03 	lsl.w	lr, r1, r3
 8007b5a:	ea40 000e 	orr.w	r0, r0, lr
 8007b5e:	fa21 f102 	lsr.w	r1, r1, r2
 8007b62:	4414      	add	r4, r2
 8007b64:	e6c1      	b.n	80078ea <__adddf3+0xe6>
 8007b66:	bf00      	nop

08007b68 <__aeabi_dmul>:
 8007b68:	b570      	push	{r4, r5, r6, lr}
 8007b6a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8007b6e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8007b72:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8007b76:	bf1d      	ittte	ne
 8007b78:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8007b7c:	ea94 0f0c 	teqne	r4, ip
 8007b80:	ea95 0f0c 	teqne	r5, ip
 8007b84:	f000 f8de 	bleq	8007d44 <__aeabi_dmul+0x1dc>
 8007b88:	442c      	add	r4, r5
 8007b8a:	ea81 0603 	eor.w	r6, r1, r3
 8007b8e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8007b92:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8007b96:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8007b9a:	bf18      	it	ne
 8007b9c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8007ba0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007ba4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007ba8:	d038      	beq.n	8007c1c <__aeabi_dmul+0xb4>
 8007baa:	fba0 ce02 	umull	ip, lr, r0, r2
 8007bae:	f04f 0500 	mov.w	r5, #0
 8007bb2:	fbe1 e502 	umlal	lr, r5, r1, r2
 8007bb6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8007bba:	fbe0 e503 	umlal	lr, r5, r0, r3
 8007bbe:	f04f 0600 	mov.w	r6, #0
 8007bc2:	fbe1 5603 	umlal	r5, r6, r1, r3
 8007bc6:	f09c 0f00 	teq	ip, #0
 8007bca:	bf18      	it	ne
 8007bcc:	f04e 0e01 	orrne.w	lr, lr, #1
 8007bd0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8007bd4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8007bd8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8007bdc:	d204      	bcs.n	8007be8 <__aeabi_dmul+0x80>
 8007bde:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8007be2:	416d      	adcs	r5, r5
 8007be4:	eb46 0606 	adc.w	r6, r6, r6
 8007be8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8007bec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8007bf0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8007bf4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8007bf8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8007bfc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8007c00:	bf88      	it	hi
 8007c02:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8007c06:	d81e      	bhi.n	8007c46 <__aeabi_dmul+0xde>
 8007c08:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8007c0c:	bf08      	it	eq
 8007c0e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8007c12:	f150 0000 	adcs.w	r0, r0, #0
 8007c16:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8007c1a:	bd70      	pop	{r4, r5, r6, pc}
 8007c1c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8007c20:	ea46 0101 	orr.w	r1, r6, r1
 8007c24:	ea40 0002 	orr.w	r0, r0, r2
 8007c28:	ea81 0103 	eor.w	r1, r1, r3
 8007c2c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8007c30:	bfc2      	ittt	gt
 8007c32:	ebd4 050c 	rsbsgt	r5, r4, ip
 8007c36:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8007c3a:	bd70      	popgt	{r4, r5, r6, pc}
 8007c3c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007c40:	f04f 0e00 	mov.w	lr, #0
 8007c44:	3c01      	subs	r4, #1
 8007c46:	f300 80ab 	bgt.w	8007da0 <__aeabi_dmul+0x238>
 8007c4a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8007c4e:	bfde      	ittt	le
 8007c50:	2000      	movle	r0, #0
 8007c52:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8007c56:	bd70      	pople	{r4, r5, r6, pc}
 8007c58:	f1c4 0400 	rsb	r4, r4, #0
 8007c5c:	3c20      	subs	r4, #32
 8007c5e:	da35      	bge.n	8007ccc <__aeabi_dmul+0x164>
 8007c60:	340c      	adds	r4, #12
 8007c62:	dc1b      	bgt.n	8007c9c <__aeabi_dmul+0x134>
 8007c64:	f104 0414 	add.w	r4, r4, #20
 8007c68:	f1c4 0520 	rsb	r5, r4, #32
 8007c6c:	fa00 f305 	lsl.w	r3, r0, r5
 8007c70:	fa20 f004 	lsr.w	r0, r0, r4
 8007c74:	fa01 f205 	lsl.w	r2, r1, r5
 8007c78:	ea40 0002 	orr.w	r0, r0, r2
 8007c7c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8007c80:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007c84:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8007c88:	fa21 f604 	lsr.w	r6, r1, r4
 8007c8c:	eb42 0106 	adc.w	r1, r2, r6
 8007c90:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8007c94:	bf08      	it	eq
 8007c96:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8007c9a:	bd70      	pop	{r4, r5, r6, pc}
 8007c9c:	f1c4 040c 	rsb	r4, r4, #12
 8007ca0:	f1c4 0520 	rsb	r5, r4, #32
 8007ca4:	fa00 f304 	lsl.w	r3, r0, r4
 8007ca8:	fa20 f005 	lsr.w	r0, r0, r5
 8007cac:	fa01 f204 	lsl.w	r2, r1, r4
 8007cb0:	ea40 0002 	orr.w	r0, r0, r2
 8007cb4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8007cb8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8007cbc:	f141 0100 	adc.w	r1, r1, #0
 8007cc0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8007cc4:	bf08      	it	eq
 8007cc6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8007cca:	bd70      	pop	{r4, r5, r6, pc}
 8007ccc:	f1c4 0520 	rsb	r5, r4, #32
 8007cd0:	fa00 f205 	lsl.w	r2, r0, r5
 8007cd4:	ea4e 0e02 	orr.w	lr, lr, r2
 8007cd8:	fa20 f304 	lsr.w	r3, r0, r4
 8007cdc:	fa01 f205 	lsl.w	r2, r1, r5
 8007ce0:	ea43 0302 	orr.w	r3, r3, r2
 8007ce4:	fa21 f004 	lsr.w	r0, r1, r4
 8007ce8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8007cec:	fa21 f204 	lsr.w	r2, r1, r4
 8007cf0:	ea20 0002 	bic.w	r0, r0, r2
 8007cf4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8007cf8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8007cfc:	bf08      	it	eq
 8007cfe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8007d02:	bd70      	pop	{r4, r5, r6, pc}
 8007d04:	f094 0f00 	teq	r4, #0
 8007d08:	d10f      	bne.n	8007d2a <__aeabi_dmul+0x1c2>
 8007d0a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8007d0e:	0040      	lsls	r0, r0, #1
 8007d10:	eb41 0101 	adc.w	r1, r1, r1
 8007d14:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8007d18:	bf08      	it	eq
 8007d1a:	3c01      	subeq	r4, #1
 8007d1c:	d0f7      	beq.n	8007d0e <__aeabi_dmul+0x1a6>
 8007d1e:	ea41 0106 	orr.w	r1, r1, r6
 8007d22:	f095 0f00 	teq	r5, #0
 8007d26:	bf18      	it	ne
 8007d28:	4770      	bxne	lr
 8007d2a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8007d2e:	0052      	lsls	r2, r2, #1
 8007d30:	eb43 0303 	adc.w	r3, r3, r3
 8007d34:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8007d38:	bf08      	it	eq
 8007d3a:	3d01      	subeq	r5, #1
 8007d3c:	d0f7      	beq.n	8007d2e <__aeabi_dmul+0x1c6>
 8007d3e:	ea43 0306 	orr.w	r3, r3, r6
 8007d42:	4770      	bx	lr
 8007d44:	ea94 0f0c 	teq	r4, ip
 8007d48:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8007d4c:	bf18      	it	ne
 8007d4e:	ea95 0f0c 	teqne	r5, ip
 8007d52:	d00c      	beq.n	8007d6e <__aeabi_dmul+0x206>
 8007d54:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8007d58:	bf18      	it	ne
 8007d5a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8007d5e:	d1d1      	bne.n	8007d04 <__aeabi_dmul+0x19c>
 8007d60:	ea81 0103 	eor.w	r1, r1, r3
 8007d64:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8007d68:	f04f 0000 	mov.w	r0, #0
 8007d6c:	bd70      	pop	{r4, r5, r6, pc}
 8007d6e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8007d72:	bf06      	itte	eq
 8007d74:	4610      	moveq	r0, r2
 8007d76:	4619      	moveq	r1, r3
 8007d78:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8007d7c:	d019      	beq.n	8007db2 <__aeabi_dmul+0x24a>
 8007d7e:	ea94 0f0c 	teq	r4, ip
 8007d82:	d102      	bne.n	8007d8a <__aeabi_dmul+0x222>
 8007d84:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8007d88:	d113      	bne.n	8007db2 <__aeabi_dmul+0x24a>
 8007d8a:	ea95 0f0c 	teq	r5, ip
 8007d8e:	d105      	bne.n	8007d9c <__aeabi_dmul+0x234>
 8007d90:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8007d94:	bf1c      	itt	ne
 8007d96:	4610      	movne	r0, r2
 8007d98:	4619      	movne	r1, r3
 8007d9a:	d10a      	bne.n	8007db2 <__aeabi_dmul+0x24a>
 8007d9c:	ea81 0103 	eor.w	r1, r1, r3
 8007da0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8007da4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8007da8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007dac:	f04f 0000 	mov.w	r0, #0
 8007db0:	bd70      	pop	{r4, r5, r6, pc}
 8007db2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8007db6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8007dba:	bd70      	pop	{r4, r5, r6, pc}

08007dbc <__aeabi_ddiv>:
 8007dbc:	b570      	push	{r4, r5, r6, lr}
 8007dbe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8007dc2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8007dc6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8007dca:	bf1d      	ittte	ne
 8007dcc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8007dd0:	ea94 0f0c 	teqne	r4, ip
 8007dd4:	ea95 0f0c 	teqne	r5, ip
 8007dd8:	f000 f8a7 	bleq	8007f2a <__aeabi_ddiv+0x16e>
 8007ddc:	eba4 0405 	sub.w	r4, r4, r5
 8007de0:	ea81 0e03 	eor.w	lr, r1, r3
 8007de4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8007de8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8007dec:	f000 8088 	beq.w	8007f00 <__aeabi_ddiv+0x144>
 8007df0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8007df4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8007df8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8007dfc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8007e00:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8007e04:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8007e08:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8007e0c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8007e10:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8007e14:	429d      	cmp	r5, r3
 8007e16:	bf08      	it	eq
 8007e18:	4296      	cmpeq	r6, r2
 8007e1a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8007e1e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8007e22:	d202      	bcs.n	8007e2a <__aeabi_ddiv+0x6e>
 8007e24:	085b      	lsrs	r3, r3, #1
 8007e26:	ea4f 0232 	mov.w	r2, r2, rrx
 8007e2a:	1ab6      	subs	r6, r6, r2
 8007e2c:	eb65 0503 	sbc.w	r5, r5, r3
 8007e30:	085b      	lsrs	r3, r3, #1
 8007e32:	ea4f 0232 	mov.w	r2, r2, rrx
 8007e36:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8007e3a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8007e3e:	ebb6 0e02 	subs.w	lr, r6, r2
 8007e42:	eb75 0e03 	sbcs.w	lr, r5, r3
 8007e46:	bf22      	ittt	cs
 8007e48:	1ab6      	subcs	r6, r6, r2
 8007e4a:	4675      	movcs	r5, lr
 8007e4c:	ea40 000c 	orrcs.w	r0, r0, ip
 8007e50:	085b      	lsrs	r3, r3, #1
 8007e52:	ea4f 0232 	mov.w	r2, r2, rrx
 8007e56:	ebb6 0e02 	subs.w	lr, r6, r2
 8007e5a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8007e5e:	bf22      	ittt	cs
 8007e60:	1ab6      	subcs	r6, r6, r2
 8007e62:	4675      	movcs	r5, lr
 8007e64:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8007e68:	085b      	lsrs	r3, r3, #1
 8007e6a:	ea4f 0232 	mov.w	r2, r2, rrx
 8007e6e:	ebb6 0e02 	subs.w	lr, r6, r2
 8007e72:	eb75 0e03 	sbcs.w	lr, r5, r3
 8007e76:	bf22      	ittt	cs
 8007e78:	1ab6      	subcs	r6, r6, r2
 8007e7a:	4675      	movcs	r5, lr
 8007e7c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8007e80:	085b      	lsrs	r3, r3, #1
 8007e82:	ea4f 0232 	mov.w	r2, r2, rrx
 8007e86:	ebb6 0e02 	subs.w	lr, r6, r2
 8007e8a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8007e8e:	bf22      	ittt	cs
 8007e90:	1ab6      	subcs	r6, r6, r2
 8007e92:	4675      	movcs	r5, lr
 8007e94:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8007e98:	ea55 0e06 	orrs.w	lr, r5, r6
 8007e9c:	d018      	beq.n	8007ed0 <__aeabi_ddiv+0x114>
 8007e9e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8007ea2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8007ea6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8007eaa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8007eae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8007eb2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8007eb6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8007eba:	d1c0      	bne.n	8007e3e <__aeabi_ddiv+0x82>
 8007ebc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8007ec0:	d10b      	bne.n	8007eda <__aeabi_ddiv+0x11e>
 8007ec2:	ea41 0100 	orr.w	r1, r1, r0
 8007ec6:	f04f 0000 	mov.w	r0, #0
 8007eca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8007ece:	e7b6      	b.n	8007e3e <__aeabi_ddiv+0x82>
 8007ed0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8007ed4:	bf04      	itt	eq
 8007ed6:	4301      	orreq	r1, r0
 8007ed8:	2000      	moveq	r0, #0
 8007eda:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8007ede:	bf88      	it	hi
 8007ee0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8007ee4:	f63f aeaf 	bhi.w	8007c46 <__aeabi_dmul+0xde>
 8007ee8:	ebb5 0c03 	subs.w	ip, r5, r3
 8007eec:	bf04      	itt	eq
 8007eee:	ebb6 0c02 	subseq.w	ip, r6, r2
 8007ef2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8007ef6:	f150 0000 	adcs.w	r0, r0, #0
 8007efa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8007efe:	bd70      	pop	{r4, r5, r6, pc}
 8007f00:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8007f04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8007f08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8007f0c:	bfc2      	ittt	gt
 8007f0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8007f12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8007f16:	bd70      	popgt	{r4, r5, r6, pc}
 8007f18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007f1c:	f04f 0e00 	mov.w	lr, #0
 8007f20:	3c01      	subs	r4, #1
 8007f22:	e690      	b.n	8007c46 <__aeabi_dmul+0xde>
 8007f24:	ea45 0e06 	orr.w	lr, r5, r6
 8007f28:	e68d      	b.n	8007c46 <__aeabi_dmul+0xde>
 8007f2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8007f2e:	ea94 0f0c 	teq	r4, ip
 8007f32:	bf08      	it	eq
 8007f34:	ea95 0f0c 	teqeq	r5, ip
 8007f38:	f43f af3b 	beq.w	8007db2 <__aeabi_dmul+0x24a>
 8007f3c:	ea94 0f0c 	teq	r4, ip
 8007f40:	d10a      	bne.n	8007f58 <__aeabi_ddiv+0x19c>
 8007f42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8007f46:	f47f af34 	bne.w	8007db2 <__aeabi_dmul+0x24a>
 8007f4a:	ea95 0f0c 	teq	r5, ip
 8007f4e:	f47f af25 	bne.w	8007d9c <__aeabi_dmul+0x234>
 8007f52:	4610      	mov	r0, r2
 8007f54:	4619      	mov	r1, r3
 8007f56:	e72c      	b.n	8007db2 <__aeabi_dmul+0x24a>
 8007f58:	ea95 0f0c 	teq	r5, ip
 8007f5c:	d106      	bne.n	8007f6c <__aeabi_ddiv+0x1b0>
 8007f5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8007f62:	f43f aefd 	beq.w	8007d60 <__aeabi_dmul+0x1f8>
 8007f66:	4610      	mov	r0, r2
 8007f68:	4619      	mov	r1, r3
 8007f6a:	e722      	b.n	8007db2 <__aeabi_dmul+0x24a>
 8007f6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8007f70:	bf18      	it	ne
 8007f72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8007f76:	f47f aec5 	bne.w	8007d04 <__aeabi_dmul+0x19c>
 8007f7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8007f7e:	f47f af0d 	bne.w	8007d9c <__aeabi_dmul+0x234>
 8007f82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8007f86:	f47f aeeb 	bne.w	8007d60 <__aeabi_dmul+0x1f8>
 8007f8a:	e712      	b.n	8007db2 <__aeabi_dmul+0x24a>

08007f8c <__gedf2>:
 8007f8c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8007f90:	e006      	b.n	8007fa0 <__cmpdf2+0x4>
 8007f92:	bf00      	nop

08007f94 <__ledf2>:
 8007f94:	f04f 0c01 	mov.w	ip, #1
 8007f98:	e002      	b.n	8007fa0 <__cmpdf2+0x4>
 8007f9a:	bf00      	nop

08007f9c <__cmpdf2>:
 8007f9c:	f04f 0c01 	mov.w	ip, #1
 8007fa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8007fa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8007fa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8007fac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8007fb0:	bf18      	it	ne
 8007fb2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8007fb6:	d01b      	beq.n	8007ff0 <__cmpdf2+0x54>
 8007fb8:	b001      	add	sp, #4
 8007fba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8007fbe:	bf0c      	ite	eq
 8007fc0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8007fc4:	ea91 0f03 	teqne	r1, r3
 8007fc8:	bf02      	ittt	eq
 8007fca:	ea90 0f02 	teqeq	r0, r2
 8007fce:	2000      	moveq	r0, #0
 8007fd0:	4770      	bxeq	lr
 8007fd2:	f110 0f00 	cmn.w	r0, #0
 8007fd6:	ea91 0f03 	teq	r1, r3
 8007fda:	bf58      	it	pl
 8007fdc:	4299      	cmppl	r1, r3
 8007fde:	bf08      	it	eq
 8007fe0:	4290      	cmpeq	r0, r2
 8007fe2:	bf2c      	ite	cs
 8007fe4:	17d8      	asrcs	r0, r3, #31
 8007fe6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8007fea:	f040 0001 	orr.w	r0, r0, #1
 8007fee:	4770      	bx	lr
 8007ff0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8007ff4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8007ff8:	d102      	bne.n	8008000 <__cmpdf2+0x64>
 8007ffa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8007ffe:	d107      	bne.n	8008010 <__cmpdf2+0x74>
 8008000:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008004:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008008:	d1d6      	bne.n	8007fb8 <__cmpdf2+0x1c>
 800800a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800800e:	d0d3      	beq.n	8007fb8 <__cmpdf2+0x1c>
 8008010:	f85d 0b04 	ldr.w	r0, [sp], #4
 8008014:	4770      	bx	lr
 8008016:	bf00      	nop

08008018 <__aeabi_cdrcmple>:
 8008018:	4684      	mov	ip, r0
 800801a:	4610      	mov	r0, r2
 800801c:	4662      	mov	r2, ip
 800801e:	468c      	mov	ip, r1
 8008020:	4619      	mov	r1, r3
 8008022:	4663      	mov	r3, ip
 8008024:	e000      	b.n	8008028 <__aeabi_cdcmpeq>
 8008026:	bf00      	nop

08008028 <__aeabi_cdcmpeq>:
 8008028:	b501      	push	{r0, lr}
 800802a:	f7ff ffb7 	bl	8007f9c <__cmpdf2>
 800802e:	2800      	cmp	r0, #0
 8008030:	bf48      	it	mi
 8008032:	f110 0f00 	cmnmi.w	r0, #0
 8008036:	bd01      	pop	{r0, pc}

08008038 <__aeabi_dcmpeq>:
 8008038:	f84d ed08 	str.w	lr, [sp, #-8]!
 800803c:	f7ff fff4 	bl	8008028 <__aeabi_cdcmpeq>
 8008040:	bf0c      	ite	eq
 8008042:	2001      	moveq	r0, #1
 8008044:	2000      	movne	r0, #0
 8008046:	f85d fb08 	ldr.w	pc, [sp], #8
 800804a:	bf00      	nop

0800804c <__aeabi_dcmplt>:
 800804c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008050:	f7ff ffea 	bl	8008028 <__aeabi_cdcmpeq>
 8008054:	bf34      	ite	cc
 8008056:	2001      	movcc	r0, #1
 8008058:	2000      	movcs	r0, #0
 800805a:	f85d fb08 	ldr.w	pc, [sp], #8
 800805e:	bf00      	nop

08008060 <__aeabi_dcmple>:
 8008060:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008064:	f7ff ffe0 	bl	8008028 <__aeabi_cdcmpeq>
 8008068:	bf94      	ite	ls
 800806a:	2001      	movls	r0, #1
 800806c:	2000      	movhi	r0, #0
 800806e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008072:	bf00      	nop

08008074 <__aeabi_dcmpge>:
 8008074:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008078:	f7ff ffce 	bl	8008018 <__aeabi_cdrcmple>
 800807c:	bf94      	ite	ls
 800807e:	2001      	movls	r0, #1
 8008080:	2000      	movhi	r0, #0
 8008082:	f85d fb08 	ldr.w	pc, [sp], #8
 8008086:	bf00      	nop

08008088 <__aeabi_dcmpgt>:
 8008088:	f84d ed08 	str.w	lr, [sp, #-8]!
 800808c:	f7ff ffc4 	bl	8008018 <__aeabi_cdrcmple>
 8008090:	bf34      	ite	cc
 8008092:	2001      	movcc	r0, #1
 8008094:	2000      	movcs	r0, #0
 8008096:	f85d fb08 	ldr.w	pc, [sp], #8
 800809a:	bf00      	nop

0800809c <__aeabi_d2iz>:
 800809c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80080a0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80080a4:	d215      	bcs.n	80080d2 <__aeabi_d2iz+0x36>
 80080a6:	d511      	bpl.n	80080cc <__aeabi_d2iz+0x30>
 80080a8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80080ac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80080b0:	d912      	bls.n	80080d8 <__aeabi_d2iz+0x3c>
 80080b2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80080b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80080ba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80080be:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80080c2:	fa23 f002 	lsr.w	r0, r3, r2
 80080c6:	bf18      	it	ne
 80080c8:	4240      	negne	r0, r0
 80080ca:	4770      	bx	lr
 80080cc:	f04f 0000 	mov.w	r0, #0
 80080d0:	4770      	bx	lr
 80080d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80080d6:	d105      	bne.n	80080e4 <__aeabi_d2iz+0x48>
 80080d8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80080dc:	bf08      	it	eq
 80080de:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80080e2:	4770      	bx	lr
 80080e4:	f04f 0000 	mov.w	r0, #0
 80080e8:	4770      	bx	lr
 80080ea:	bf00      	nop

080080ec <main>:
/**
 * @brief  Main program.
 * @param  None
 * @retval : None
 */
int main(void) {
 80080ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80080f0:	b095      	sub	sp, #84	; 0x54
 80080f2:	af02      	add	r7, sp, #8
	int16_t i = 0;
	const int rxbufsize = 64;
	char rxbuf[rxbufsize];
 80080f4:	b092      	sub	sp, #72	; 0x48
	char printbuf[64];
	uint32_t tmp32, rtctime = 0;

	SysTick_Start();
 80080f6:	f7f8 fadd 	bl	80006b4 <SysTick_Start>

	usart_begin(USART3Serial, PD9, PD8, 19200);
 80080fa:	f44f 6281 	mov.w	r2, #1032	; 0x408
 80080fe:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
 8008102:	2002      	movs	r0, #2
 8008104:	f240 4109 	movw	r1, #1033	; 0x409
 8008108:	f7f8 fb4e 	bl	80007a8 <usart_begin>
	usart_print(USART3Serial, "Welcome to my serial.\r\n");
 800810c:	4945      	ldr	r1, [pc, #276]	; (8008224 <main+0x138>)
			i = 0;
			while ( usart_available(USART3Serial) > 0 && i < rxbufsize )
				rxbuf[i++] = (char) usart_read(USART3Serial);
			rxbuf[i] = 0;
			for (i = 0; rxbuf[i]; i++) {
				if ( isprint(rxbuf[i]) ) {
 800810e:	f8df 912c 	ldr.w	r9, [pc, #300]	; 800823c <main+0x150>
	uint32_t tmp32, rtctime = 0;

	SysTick_Start();

	usart_begin(USART3Serial, PD9, PD8, 19200);
	usart_print(USART3Serial, "Welcome to my serial.\r\n");
 8008112:	2002      	movs	r0, #2
 8008114:	f7f8 fc48 	bl	80009a8 <usart_print>

	i2c_begin(100000);
 8008118:	4843      	ldr	r0, [pc, #268]	; (8008228 <main+0x13c>)
 800811a:	f7f8 f95d 	bl	80003d8 <i2c_begin>
	ST7032i_Init();
 800811e:	f7fa fd73 	bl	8002c08 <ST7032i_Init>

	ST7032i_Print_String((const int8_t *)"Welcome to lcd.");
 8008122:	4842      	ldr	r0, [pc, #264]	; (800822c <main+0x140>)
 8008124:	f7fa fe7c 	bl	8002e20 <ST7032i_Print_String>
	delay_ms(1000);
 8008128:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800812c:	f7f8 f856 	bl	80001dc <delay_ms>
	ST7032i_Command_Write(0x01);
 8008130:	2001      	movs	r0, #1
 8008132:	f7fa fc4d 	bl	80029d0 <ST7032i_Command_Write>
	delay_ms(10);
 8008136:	200a      	movs	r0, #10
 8008138:	f7f8 f850 	bl	80001dc <delay_ms>
 * @retval : None
 */
int main(void) {
	int16_t i = 0;
	const int rxbufsize = 64;
	char rxbuf[rxbufsize];
 800813c:	f10d 0808 	add.w	r8, sp, #8
	char printbuf[64];
	uint32_t tmp32, rtctime = 0;
 8008140:	2500      	movs	r5, #0
	ST7032i_Command_Write(0x01);
	delay_ms(10);

	//Receive character from COM and put it on LCD
	while (1) {
		if (usart_available(USART3Serial) > 0) {
 8008142:	2002      	movs	r0, #2
 8008144:	f7f8 fcc8 	bl	8000ad8 <usart_available>
 8008148:	4606      	mov	r6, r0
 800814a:	b938      	cbnz	r0, 800815c <main+0x70>
 800814c:	e02e      	b.n	80081ac <main+0xc0>
			i = 0;
			while ( usart_available(USART3Serial) > 0 && i < rxbufsize )
				rxbuf[i++] = (char) usart_read(USART3Serial);
 800814e:	2002      	movs	r0, #2
 8008150:	f7f8 fc3e 	bl	80009d0 <usart_read>
 8008154:	f808 0004 	strb.w	r0, [r8, r4]
 8008158:	3401      	adds	r4, #1
 800815a:	e000      	b.n	800815e <main+0x72>
	ST7032i_Command_Write(0x01);
	delay_ms(10);

	//Receive character from COM and put it on LCD
	while (1) {
		if (usart_available(USART3Serial) > 0) {
 800815c:	2400      	movs	r4, #0
			i = 0;
			while ( usart_available(USART3Serial) > 0 && i < rxbufsize )
 800815e:	2002      	movs	r0, #2
				rxbuf[i++] = (char) usart_read(USART3Serial);
 8008160:	b2a6      	uxth	r6, r4

	//Receive character from COM and put it on LCD
	while (1) {
		if (usart_available(USART3Serial) > 0) {
			i = 0;
			while ( usart_available(USART3Serial) > 0 && i < rxbufsize )
 8008162:	f7f8 fcb9 	bl	8000ad8 <usart_available>
 8008166:	b110      	cbz	r0, 800816e <main+0x82>
 8008168:	2c40      	cmp	r4, #64	; 0x40
 800816a:	d1f0      	bne.n	800814e <main+0x62>
 800816c:	4626      	mov	r6, r4
				rxbuf[i++] = (char) usart_read(USART3Serial);
			rxbuf[i] = 0;
 800816e:	b236      	sxth	r6, r6
 8008170:	2300      	movs	r3, #0
 8008172:	f808 3006 	strb.w	r3, [r8, r6]
 8008176:	4644      	mov	r4, r8
			for (i = 0; rxbuf[i]; i++) {
 8008178:	e013      	b.n	80081a2 <main+0xb6>
				if ( isprint(rxbuf[i]) ) {
 800817a:	f8d9 3000 	ldr.w	r3, [r9]
 800817e:	189b      	adds	r3, r3, r2
 8008180:	785b      	ldrb	r3, [r3, #1]
 8008182:	f013 0f97 	tst.w	r3, #151	; 0x97
 8008186:	d004      	beq.n	8008192 <main+0xa6>
					usart_write(USART3Serial, rxbuf[i]);
 8008188:	2002      	movs	r0, #2
 800818a:	4611      	mov	r1, r2
 800818c:	f7f8 fbe2 	bl	8000954 <usart_write>
 8008190:	e007      	b.n	80081a2 <main+0xb6>
			//		ST7032i_Data_Write(rxbuf[i]);
				} else {
					sprintf(printbuf, "cmd %x\n", rxbuf[i]);
 8008192:	4927      	ldr	r1, [pc, #156]	; (8008230 <main+0x144>)
 8008194:	1d38      	adds	r0, r7, #4
 8008196:	f7fa fff9 	bl	800318c <sprintf>
					usart_print(USART3Serial, printbuf);
 800819a:	2002      	movs	r0, #2
 800819c:	1d39      	adds	r1, r7, #4
 800819e:	f7f8 fc03 	bl	80009a8 <usart_print>
		if (usart_available(USART3Serial) > 0) {
			i = 0;
			while ( usart_available(USART3Serial) > 0 && i < rxbufsize )
				rxbuf[i++] = (char) usart_read(USART3Serial);
			rxbuf[i] = 0;
			for (i = 0; rxbuf[i]; i++) {
 80081a2:	f814 2b01 	ldrb.w	r2, [r4], #1
 80081a6:	2a00      	cmp	r2, #0
 80081a8:	d1e7      	bne.n	800817a <main+0x8e>
 80081aa:	e036      	b.n	800821a <main+0x12e>
					usart_print(USART3Serial, printbuf);
			//		ST7032i_Command_Write(rxbuf[i]);
				}
			}
		} else {
			i2c_requestFrom(0b1101000, 0, (uint8_t *) &tmp32, 3);
 80081ac:	2068      	movs	r0, #104	; 0x68
 80081ae:	2303      	movs	r3, #3
 80081b0:	4631      	mov	r1, r6
 80081b2:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80081b6:	f7f8 f9cb 	bl	8000550 <i2c_requestFrom>
			if ( rtctime != (tmp32 & 0xffffff) ) {
 80081ba:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 80081bc:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 80081c0:	42a5      	cmp	r5, r4
 80081c2:	d02a      	beq.n	800821a <main+0x12e>
				rtctime = tmp32 & 0xffffff;
				sprintf(printbuf, "%02x:%02x:%02x", UINT8(rtctime>>16), UINT8(rtctime>>8), UINT8(rtctime));
 80081c4:	b2e5      	uxtb	r5, r4
 80081c6:	491b      	ldr	r1, [pc, #108]	; (8008234 <main+0x148>)
 80081c8:	9500      	str	r5, [sp, #0]
 80081ca:	0c22      	lsrs	r2, r4, #16
 80081cc:	f3c4 2307 	ubfx	r3, r4, #8, #8
 80081d0:	1d38      	adds	r0, r7, #4
 80081d2:	f7fa ffdb 	bl	800318c <sprintf>
				//usart_print(USART3Serial, printbuf);
			  	ST7032i_Set_DDRAM( ((0 * 0x40) % 0x6c) + 0);
 80081d6:	4630      	mov	r0, r6
 80081d8:	f7fa fc44 	bl	8002a64 <ST7032i_Set_DDRAM>
				ST7032i_Print_String((int8_t *)printbuf);
 80081dc:	1d38      	adds	r0, r7, #4
 80081de:	f7fa fe1f 	bl	8002e20 <ST7032i_Print_String>
				if ( (rtctime & 0xff) == 0 ) {
 80081e2:	b9cd      	cbnz	r5, 8008218 <main+0x12c>
				i2c_requestFrom(0b1101000, 3, (uint8_t *) &tmp32, 4);
 80081e4:	2068      	movs	r0, #104	; 0x68
 80081e6:	2103      	movs	r1, #3
 80081e8:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80081ec:	2304      	movs	r3, #4
 80081ee:	f7f8 f9af 	bl	8000550 <i2c_requestFrom>
				sprintf(printbuf, "20%02x %02x/%02x (%x)", UINT8(tmp32>>24), UINT8(tmp32>>16), UINT8(tmp32>>8), UINT8(tmp32));
 80081f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081f4:	4910      	ldr	r1, [pc, #64]	; (8008238 <main+0x14c>)
 80081f6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80081fa:	9200      	str	r2, [sp, #0]
 80081fc:	b2da      	uxtb	r2, r3
 80081fe:	9201      	str	r2, [sp, #4]
 8008200:	1d38      	adds	r0, r7, #4
 8008202:	0e1a      	lsrs	r2, r3, #24
 8008204:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8008208:	f7fa ffc0 	bl	800318c <sprintf>
				//sprintf(printbuf, "cal %lx.", tmp32);
//				usart_print(USART3Serial, printbuf);
//				usart_print(USART3Serial, "\r\n");
			  	ST7032i_Set_DDRAM( ((1 * 0x40) % 0x6c) + 0);
 800820c:	2040      	movs	r0, #64	; 0x40
 800820e:	f7fa fc29 	bl	8002a64 <ST7032i_Set_DDRAM>
				ST7032i_Print_String((int8_t *)printbuf);
 8008212:	1d38      	adds	r0, r7, #4
 8008214:	f7fa fe04 	bl	8002e20 <ST7032i_Print_String>
				rtctime = tmp32 & 0xffffff;
				sprintf(printbuf, "%02x:%02x:%02x", UINT8(rtctime>>16), UINT8(rtctime>>8), UINT8(rtctime));
				//usart_print(USART3Serial, printbuf);
			  	ST7032i_Set_DDRAM( ((0 * 0x40) % 0x6c) + 0);
				ST7032i_Print_String((int8_t *)printbuf);
				if ( (rtctime & 0xff) == 0 ) {
 8008218:	4625      	mov	r5, r4
			  	ST7032i_Set_DDRAM( ((1 * 0x40) % 0x6c) + 0);
				ST7032i_Print_String((int8_t *)printbuf);
				}
			}
		}
		delay_ms(100);
 800821a:	2064      	movs	r0, #100	; 0x64
 800821c:	f7f7 ffde 	bl	80001dc <delay_ms>
	}
 8008220:	e78f      	b.n	8008142 <main+0x56>
 8008222:	bf00      	nop
 8008224:	080084f8 	.word	0x080084f8
 8008228:	000186a0 	.word	0x000186a0
 800822c:	08008510 	.word	0x08008510
 8008230:	08008520 	.word	0x08008520
 8008234:	08008528 	.word	0x08008528
 8008238:	08008537 	.word	0x08008537
 800823c:	200000ec 	.word	0x200000ec

08008240 <Reset_Handler>:
 8008240:	2100      	movs	r1, #0
 8008242:	e003      	b.n	800824c <LoopCopyDataInit>

08008244 <CopyDataInit>:
 8008244:	4b0a      	ldr	r3, [pc, #40]	; (8008270 <LoopFillZerobss+0x10>)
 8008246:	585b      	ldr	r3, [r3, r1]
 8008248:	5043      	str	r3, [r0, r1]
 800824a:	3104      	adds	r1, #4

0800824c <LoopCopyDataInit>:
 800824c:	4809      	ldr	r0, [pc, #36]	; (8008274 <LoopFillZerobss+0x14>)
 800824e:	4b0a      	ldr	r3, [pc, #40]	; (8008278 <LoopFillZerobss+0x18>)
 8008250:	1842      	adds	r2, r0, r1
 8008252:	429a      	cmp	r2, r3
 8008254:	d3f6      	bcc.n	8008244 <CopyDataInit>
 8008256:	4a09      	ldr	r2, [pc, #36]	; (800827c <LoopFillZerobss+0x1c>)
 8008258:	e002      	b.n	8008260 <LoopFillZerobss>

0800825a <FillZerobss>:
 800825a:	2300      	movs	r3, #0
 800825c:	f842 3b04 	str.w	r3, [r2], #4

08008260 <LoopFillZerobss>:
 8008260:	4b07      	ldr	r3, [pc, #28]	; (8008280 <LoopFillZerobss+0x20>)
 8008262:	429a      	cmp	r2, r3
 8008264:	d3f9      	bcc.n	800825a <FillZerobss>
 8008266:	f7fa fe4b 	bl	8002f00 <SystemInit>
 800826a:	f7ff ff3f 	bl	80080ec <main>
 800826e:	4770      	bx	lr
 8008270:	080085d0 	.word	0x080085d0
 8008274:	20000000 	.word	0x20000000
 8008278:	200009ac 	.word	0x200009ac
 800827c:	200009ac 	.word	0x200009ac
 8008280:	2000167c 	.word	0x2000167c

08008284 <ADC_IRQHandler>:
 8008284:	e7fe      	b.n	8008284 <ADC_IRQHandler>
	...

08008288 <_ctype_>:
 8008288:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 8008298:	2020 2020 2020 2020 2020 2020 2020 2020                     
 80082a8:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 80082b8:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 80082c8:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 80082d8:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 80082e8:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 80082f8:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 8008308:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

0800838c <blanks.3927>:
 800838c:	2020 2020 2020 2020 2020 2020 2020 2020                     

0800839c <zeroes.3928>:
 800839c:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000

080083ac <_global_impure_ptr>:
 80083ac:	00f8 2000                                   ... 

080083b0 <p05.2449>:
 80083b0:	0005 0000 0019 0000 007d 0000 0000 0000     ........}.......

080083c0 <__mprec_tens>:
 80083c0:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
 80083d0:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
 80083e0:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
 80083f0:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
 8008400:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
 8008410:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
 8008420:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
 8008430:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
 8008440:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
 8008450:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
 8008460:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
 8008470:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
 8008480:	9db4 79d9 7843 44ea                         ...yCx.D

08008488 <__mprec_tinytens>:
 8008488:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
 8008498:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
 80084a8:	6f43 64ac 0628 0ac8                         Co.d(...

080084b0 <__mprec_bigtens>:
 80084b0:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
 80084c0:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
 80084d0:	bf3c 7f73 4fdd 7515                         <.s..O.u

080084d8 <blanks.3871>:
 80084d8:	2020 2020 2020 2020 2020 2020 2020 2020                     

080084e8 <zeroes.3872>:
 80084e8:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
 80084f8:	6557 636c 6d6f 2065 6f74 6d20 2079 6573     Welcome to my se
 8008508:	6972 6c61 0d2e 000a 6557 636c 6d6f 2065     rial....Welcome 
 8008518:	6f74 6c20 6463 002e 6d63 2064 7825 000a     to lcd..cmd %x..
 8008528:	3025 7832 253a 3230 3a78 3025 7832 3200     %02x:%02x:%02x.2
 8008538:	2530 3230 2078 3025 7832 252f 3230 2078     0%02x %02x/%02x 
 8008548:	2528 2978 4800 6165 2070 6e61 2064 7473     (%x).Heap and st
 8008558:	6361 206b 6f63 6c6c 7369 6f69 0a6e 6500     ack collision..e
 8008568:	6978 0074 4e49 0046 6e69 0066 414e 004e     xit.INF.inf.NAN.
 8008578:	616e 006e 3130 3332 3534 3736 3938 4241     nan.0123456789AB
 8008588:	4443 4645 0000 0000 3130 3332 3534 3736     CDEF....01234567
 8008598:	3938 6261 6463 6665 0000 0000 6e28 6c75     89abcdef....(nul
 80085a8:	296c 0000 0030 0000 6e49 6966 696e 7974     l)..0...Infinity
 80085b8:	0000 0000 614e 004e 0043 0000 4f50 4953     ....NaN.C...POSI
 80085c8:	0058 0000 002e 0000                         X.......
