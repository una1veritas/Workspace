
stm32f4-i2c_rtc.elf:     file format elf32-littlearm


Disassembly of section .text:

08000188 <TIM2_timer_start>:
/**
 * @brief  millisecond
 * @param  none
 * @retval None
 */
void TIM2_timer_start(void) {
 8000188:	b530      	push	{r4, r5, lr}
 800018a:	b089      	sub	sp, #36	; 0x24
	// TIM_TimeBaseInitTypeDef's order is {uint16_t TIM_Prescaler, uint16_t TIM_CounterMode, uint16_t TIM_Period, uint16_t TIM_ClockDivision, uint8_t TIM_RepetitionCounter}
	TIM_TimeBaseInitTypeDef TimeBaseStructure;
//			= { 84, TIM_CounterMode_Up, 999, TIM_CKD_DIV1, 0 };

	RCC_ClocksTypeDef RCC_Clocks;
	RCC_GetClocksFreq(&RCC_Clocks);
 800018c:	4668      	mov	r0, sp
 800018e:	f001 facb 	bl	8001728 <RCC_GetClocksFreq>
	TimeBaseStructure.TIM_Prescaler = (RCC_Clocks.SYSCLK_Frequency>>1)/1000000L ;
 8000192:	9b00      	ldr	r3, [sp, #0]
 8000194:	4a1e      	ldr	r2, [pc, #120]	; (8000210 <TIM2_timer_start+0x88>)
 8000196:	085b      	lsrs	r3, r3, #1
 8000198:	fbb3 f3f2 	udiv	r3, r3, r2
	TimeBaseStructure.TIM_Period = 1000 - 1;
	TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
	TimeBaseStructure.TIM_RepetitionCounter = 0;

	//Supply APB1 Clock
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 800019c:	2001      	movs	r0, #1
//			= { 84, TIM_CounterMode_Up, 999, TIM_CKD_DIV1, 0 };

	RCC_ClocksTypeDef RCC_Clocks;
	RCC_GetClocksFreq(&RCC_Clocks);
	TimeBaseStructure.TIM_Prescaler = (RCC_Clocks.SYSCLK_Frequency>>1)/1000000L ;
	TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 800019e:	2400      	movs	r4, #0
	TimeBaseStructure.TIM_Period = 1000 - 1;
	TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
	TimeBaseStructure.TIM_RepetitionCounter = 0;

	//Supply APB1 Clock
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 80001a0:	4601      	mov	r1, r0
	TIM_TimeBaseInitTypeDef TimeBaseStructure;
//			= { 84, TIM_CounterMode_Up, 999, TIM_CKD_DIV1, 0 };

	RCC_ClocksTypeDef RCC_Clocks;
	RCC_GetClocksFreq(&RCC_Clocks);
	TimeBaseStructure.TIM_Prescaler = (RCC_Clocks.SYSCLK_Frequency>>1)/1000000L ;
 80001a2:	f8ad 3010 	strh.w	r3, [sp, #16]
	TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
	TimeBaseStructure.TIM_Period = 1000 - 1;
 80001a6:	f240 33e7 	movw	r3, #999	; 0x3e7
 80001aa:	9305      	str	r3, [sp, #20]
//			= { 84, TIM_CounterMode_Up, 999, TIM_CKD_DIV1, 0 };

	RCC_ClocksTypeDef RCC_Clocks;
	RCC_GetClocksFreq(&RCC_Clocks);
	TimeBaseStructure.TIM_Prescaler = (RCC_Clocks.SYSCLK_Frequency>>1)/1000000L ;
	TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80001ac:	f8ad 4012 	strh.w	r4, [sp, #18]
	TimeBaseStructure.TIM_Period = 1000 - 1;
	TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 80001b0:	f8ad 4018 	strh.w	r4, [sp, #24]
	TimeBaseStructure.TIM_RepetitionCounter = 0;
 80001b4:	f88d 401a 	strb.w	r4, [sp, #26]

	//Supply APB1 Clock
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 80001b8:	f001 fb4a 	bl	8001850 <RCC_APB1PeriphClockCmd>

	/* Time base configuration */
	TIM_TimeBaseInit(TIM2, &TimeBaseStructure);
 80001bc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80001c0:	a904      	add	r1, sp, #16
 80001c2:	f001 feed 	bl	8001fa0 <TIM_TimeBaseInit>
//  TIM_SelectOnePulseMode(TIM2, TIM_OPMode_Repetitive);
	TIM_SetCounter(TIM2, 0);
 80001c6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80001ca:	4621      	mov	r1, r4
 80001cc:	f001 ff3a 	bl	8002044 <TIM_SetCounter>
	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);
 80001d0:	2101      	movs	r1, #1
 80001d2:	460a      	mov	r2, r1
 80001d4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80001d8:	f002 faa7 	bl	800272a <TIM_ITConfig>

	NVIC_InitTypeDef NVIC_InitStructure;
	/* Enable the TIM2 gloabal Interrupt */
	NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
 80001dc:	231c      	movs	r3, #28
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
 80001de:	eb0d 0003 	add.w	r0, sp, r3

	NVIC_InitTypeDef NVIC_InitStructure;
	/* Enable the TIM2 gloabal Interrupt */
	NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 80001e2:	2501      	movs	r5, #1
	TIM_SetCounter(TIM2, 0);
	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);

	NVIC_InitTypeDef NVIC_InitStructure;
	/* Enable the TIM2 gloabal Interrupt */
	NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
 80001e4:	f88d 301c 	strb.w	r3, [sp, #28]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80001e8:	f88d 401d 	strb.w	r4, [sp, #29]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 80001ec:	f88d 501e 	strb.w	r5, [sp, #30]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80001f0:	f88d 501f 	strb.w	r5, [sp, #31]
	NVIC_Init(&NVIC_InitStructure);
 80001f4:	f000 fe9c 	bl	8000f30 <NVIC_Init>

	/* TIM enable counter */
	TIM_Cmd(TIM2, ENABLE);
 80001f8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80001fc:	4629      	mov	r1, r5
 80001fe:	f001 ff64 	bl	80020ca <TIM_Cmd>

	__counter_micros = 0;
 8000202:	4b04      	ldr	r3, [pc, #16]	; (8000214 <TIM2_timer_start+0x8c>)
 8000204:	601c      	str	r4, [r3, #0]
	__counter_millis = 0;
 8000206:	4b04      	ldr	r3, [pc, #16]	; (8000218 <TIM2_timer_start+0x90>)
 8000208:	601c      	str	r4, [r3, #0]
}
 800020a:	b009      	add	sp, #36	; 0x24
 800020c:	bd30      	pop	{r4, r5, pc}
 800020e:	bf00      	nop
 8000210:	000f4240 	.word	0x000f4240
 8000214:	200009c8 	.word	0x200009c8
 8000218:	200009cc 	.word	0x200009cc

0800021c <micros>:

uint32_t micros(void) {
	return __counter_micros + TIM_GetCounter(TIM2 );
 800021c:	4b04      	ldr	r3, [pc, #16]	; (8000230 <micros+0x14>)

	__counter_micros = 0;
	__counter_millis = 0;
}

uint32_t micros(void) {
 800021e:	b510      	push	{r4, lr}
	return __counter_micros + TIM_GetCounter(TIM2 );
 8000220:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000224:	681c      	ldr	r4, [r3, #0]
 8000226:	f001 ff11 	bl	800204c <TIM_GetCounter>
}
 800022a:	1900      	adds	r0, r0, r4
 800022c:	bd10      	pop	{r4, pc}
 800022e:	bf00      	nop
 8000230:	200009c8 	.word	0x200009c8

08000234 <millis>:

uint32_t millis(void) {
	return __counter_millis;
 8000234:	4b01      	ldr	r3, [pc, #4]	; (800023c <millis+0x8>)
 8000236:	6818      	ldr	r0, [r3, #0]
}
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop
 800023c:	200009cc 	.word	0x200009cc

08000240 <delay_ms>:
uint32_t micros(void) {
	return __counter_micros + TIM_GetCounter(TIM2 );
}

uint32_t millis(void) {
	return __counter_millis;
 8000240:	4b03      	ldr	r3, [pc, #12]	; (8000250 <delay_ms+0x10>)
 8000242:	681a      	ldr	r2, [r3, #0]
}

void delay_ms(uint32_t w) {
	uint32_t wtill = millis() + w;
 8000244:	1882      	adds	r2, r0, r2
uint32_t micros(void) {
	return __counter_micros + TIM_GetCounter(TIM2 );
}

uint32_t millis(void) {
	return __counter_millis;
 8000246:	6819      	ldr	r1, [r3, #0]
}

void delay_ms(uint32_t w) {
	uint32_t wtill = millis() + w;
	while (millis() < wtill)
 8000248:	4291      	cmp	r1, r2
 800024a:	d3fc      	bcc.n	8000246 <delay_ms+0x6>
		;
}
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop
 8000250:	200009cc 	.word	0x200009cc

08000254 <delay_us>:

void delay_us(uint32_t w) {
 8000254:	b510      	push	{r4, lr}
 8000256:	4604      	mov	r4, r0
	uint32_t wtill = micros() + w;
 8000258:	f7ff ffe0 	bl	800021c <micros>
 800025c:	1904      	adds	r4, r0, r4
	while (micros() < wtill)
 800025e:	f7ff ffdd 	bl	800021c <micros>
 8000262:	42a0      	cmp	r0, r4
 8000264:	d3fb      	bcc.n	800025e <delay_us+0xa>
		;
}
 8000266:	bd10      	pop	{r4, pc}

08000268 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void) {
 8000268:	b508      	push	{r3, lr}
	if (TIM_GetITStatus(TIM2, TIM_IT_Update ) != RESET) {
 800026a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800026e:	2101      	movs	r1, #1
 8000270:	f002 fa70 	bl	8002754 <TIM_GetITStatus>
 8000274:	b168      	cbz	r0, 8000292 <TIM2_IRQHandler+0x2a>
		TIM_ClearITPendingBit(TIM2, TIM_IT_Update );
 8000276:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800027a:	2101      	movs	r1, #1
 800027c:	f002 fa75 	bl	800276a <TIM_ClearITPendingBit>
		__counter_micros += 1000;
 8000280:	4b04      	ldr	r3, [pc, #16]	; (8000294 <TIM2_IRQHandler+0x2c>)
 8000282:	681a      	ldr	r2, [r3, #0]
 8000284:	f502 727a 	add.w	r2, r2, #1000	; 0x3e8
 8000288:	601a      	str	r2, [r3, #0]
		__counter_millis += 1;
 800028a:	4b03      	ldr	r3, [pc, #12]	; (8000298 <TIM2_IRQHandler+0x30>)
 800028c:	681a      	ldr	r2, [r3, #0]
 800028e:	3201      	adds	r2, #1
 8000290:	601a      	str	r2, [r3, #0]
 8000292:	bd08      	pop	{r3, pc}
 8000294:	200009c8 	.word	0x200009c8
 8000298:	200009cc 	.word	0x200009cc

0800029c <PinPort>:
		GPIO_Pin_10, GPIO_Pin_11, GPIO_Pin_12, GPIO_Pin_13, GPIO_Pin_14,
		GPIO_Pin_15, GPIO_Pin_All };

GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}
 800029c:	4b02      	ldr	r3, [pc, #8]	; (80002a8 <PinPort+0xc>)
		GPIO_Pin_4, GPIO_Pin_5, GPIO_Pin_6, GPIO_Pin_7, GPIO_Pin_8, GPIO_Pin_9,
		GPIO_Pin_10, GPIO_Pin_11, GPIO_Pin_12, GPIO_Pin_13, GPIO_Pin_14,
		GPIO_Pin_15, GPIO_Pin_All };

GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
 800029e:	f3c0 2003 	ubfx	r0, r0, #8, #4
}
 80002a2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80002a6:	4770      	bx	lr
 80002a8:	20000000 	.word	0x20000000

080002ac <PinBit>:

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 80002ac:	2301      	movs	r3, #1
 80002ae:	f000 000f 	and.w	r0, r0, #15
 80002b2:	fa13 f000 	lsls.w	r0, r3, r0
}
 80002b6:	b280      	uxth	r0, r0
 80002b8:	4770      	bx	lr

080002ba <PinSource>:

uint8_t PinSource(GPIOPin portpin) {
	return portpin & 0x0f;
}
 80002ba:	f000 000f 	and.w	r0, r0, #15
 80002be:	4770      	bx	lr

080002c0 <pinMode>:

void pinMode(GPIOPin portpin, GPIOMode_TypeDef mode) {
 80002c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);
 80002c2:	4c11      	ldr	r4, [pc, #68]	; (8000308 <pinMode+0x48>)
 80002c4:	f3c0 2503 	ubfx	r5, r0, #8, #4
 80002c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2

uint8_t PinSource(GPIOPin portpin) {
	return portpin & 0x0f;
}

void pinMode(GPIOPin portpin, GPIOMode_TypeDef mode) {
 80002cc:	460f      	mov	r7, r1
 80002ce:	4606      	mov	r6, r0

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);
 80002d0:	2101      	movs	r1, #1
 80002d2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80002d4:	f001 fa98 	bl	8001808 <RCC_AHB1PeriphClockCmd>
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 80002d8:	f006 060f 	and.w	r6, r6, #15
 80002dc:	2301      	movs	r3, #1
 80002de:	fa13 f606 	lsls.w	r6, r3, r6

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);

	GPIO_InitStructure.GPIO_Pin = PinBit(portpin);
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80002e2:	2300      	movs	r3, #0

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);

	GPIO_InitStructure.GPIO_Pin = PinBit(portpin);
 80002e4:	b2b6      	uxth	r6, r6
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80002e6:	f88d 3006 	strb.w	r3, [sp, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80002ea:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	//
	GPIO_Init(Port[portpin>>8 & 0x0f], &GPIO_InitStructure);
 80002ee:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);

	GPIO_InitStructure.GPIO_Pin = PinBit(portpin);
 80002f2:	9600      	str	r6, [sp, #0]
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80002f4:	2302      	movs	r3, #2
	//
	GPIO_Init(Port[portpin>>8 & 0x0f], &GPIO_InitStructure);
 80002f6:	4669      	mov	r1, sp
	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);

	GPIO_InitStructure.GPIO_Pin = PinBit(portpin);
	GPIO_InitStructure.GPIO_Mode = mode;
 80002f8:	f88d 7004 	strb.w	r7, [sp, #4]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80002fc:	f88d 3005 	strb.w	r3, [sp, #5]
	//
	GPIO_Init(Port[portpin>>8 & 0x0f], &GPIO_InitStructure);
 8000300:	f000 feda 	bl	80010b8 <GPIO_Init>
}
 8000304:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8000306:	bf00      	nop
 8000308:	20000000 	.word	0x20000000

0800030c <digitalWrite>:

void digitalWrite(GPIOPin portpin, uint8_t bit) {
 800030c:	0a02      	lsrs	r2, r0, #8
 800030e:	4b0a      	ldr	r3, [pc, #40]	; (8000338 <digitalWrite+0x2c>)
	if (bit) {
		//? Bit_SET : Bit_RESET ));
		GPIO_SetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
 8000310:	f002 020f 	and.w	r2, r2, #15
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 8000314:	f000 000f 	and.w	r0, r0, #15
	//
	GPIO_Init(Port[portpin>>8 & 0x0f], &GPIO_InitStructure);
}

void digitalWrite(GPIOPin portpin, uint8_t bit) {
	if (bit) {
 8000318:	b131      	cbz	r1, 8000328 <digitalWrite+0x1c>
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 800031a:	2101      	movs	r1, #1
 800031c:	4081      	lsls	r1, r0
}

void digitalWrite(GPIOPin portpin, uint8_t bit) {
	if (bit) {
		//? Bit_SET : Bit_RESET ));
		GPIO_SetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
 800031e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000322:	b289      	uxth	r1, r1
 8000324:	f000 bf39 	b.w	800119a <GPIO_SetBits>
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 8000328:	2101      	movs	r1, #1
 800032a:	4081      	lsls	r1, r0
void digitalWrite(GPIOPin portpin, uint8_t bit) {
	if (bit) {
		//? Bit_SET : Bit_RESET ));
		GPIO_SetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
	} else {
		GPIO_ResetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
 800032c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000330:	b289      	uxth	r1, r1
 8000332:	f000 bf34 	b.w	800119e <GPIO_ResetBits>
 8000336:	bf00      	nop
 8000338:	20000000 	.word	0x20000000

0800033c <digitalRead>:
	}
}

uint8_t digitalRead(GPIOPin portpin) {
	GPIO_TypeDef * port = Port[portpin>>8 & 0x0f];
 800033c:	f3c0 2203 	ubfx	r2, r0, #8, #4
	} else {
		GPIO_ResetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
	}
}

uint8_t digitalRead(GPIOPin portpin) {
 8000340:	b508      	push	{r3, lr}
	GPIO_TypeDef * port = Port[portpin>>8 & 0x0f];
 8000342:	4b0f      	ldr	r3, [pc, #60]	; (8000380 <digitalRead+0x44>)
	} else {
		GPIO_ResetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
	}
}

uint8_t digitalRead(GPIOPin portpin) {
 8000344:	4601      	mov	r1, r0
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 8000346:	f001 010f 	and.w	r1, r1, #15
		GPIO_ResetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
	}
}

uint8_t digitalRead(GPIOPin portpin) {
	GPIO_TypeDef * port = Port[portpin>>8 & 0x0f];
 800034a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 800034e:	2301      	movs	r3, #1
 8000350:	fa13 f101 	lsls.w	r1, r3, r1
	}
}

uint8_t digitalRead(GPIOPin portpin) {
	GPIO_TypeDef * port = Port[portpin>>8 & 0x0f];
	uint8_t mode = (port->MODER) >> (PinBit(portpin) * 2);
 8000354:	6802      	ldr	r2, [r0, #0]
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 8000356:	b289      	uxth	r1, r1
	}
}

uint8_t digitalRead(GPIOPin portpin) {
	GPIO_TypeDef * port = Port[portpin>>8 & 0x0f];
	uint8_t mode = (port->MODER) >> (PinBit(portpin) * 2);
 8000358:	fa11 f303 	lsls.w	r3, r1, r3
 800035c:	fa32 f303 	lsrs.w	r3, r2, r3
	if (mode == GPIO_Mode_OUT)
 8000360:	b2db      	uxtb	r3, r3
 8000362:	2b01      	cmp	r3, #1
 8000364:	d105      	bne.n	8000372 <digitalRead+0x36>
		return (GPIO_ReadOutputDataBit(port, PinBit(portpin)) ? SET : RESET);
 8000366:	f000 ff0f 	bl	8001188 <GPIO_ReadOutputDataBit>
 800036a:	3000      	adds	r0, #0
 800036c:	bf18      	it	ne
 800036e:	2001      	movne	r0, #1
 8000370:	bd08      	pop	{r3, pc}
	return (GPIO_ReadInputDataBit(port, PinBit(portpin)) ? SET : RESET);
 8000372:	f000 ff00 	bl	8001176 <GPIO_ReadInputDataBit>
 8000376:	3000      	adds	r0, #0
 8000378:	bf18      	it	ne
 800037a:	2001      	movne	r0, #1
}
 800037c:	bd08      	pop	{r3, pc}
 800037e:	bf00      	nop
 8000380:	20000000 	.word	0x20000000

08000384 <GPIOMode>:

void GPIOMode(GPIO_TypeDef * port, uint16_t pinbit, GPIOMode_TypeDef mode,
              GPIOSpeed_TypeDef clk, GPIOOType_TypeDef otype, GPIOPuPd_TypeDef pupd) {
 8000384:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000386:	461f      	mov	r7, r3
	if ( port == GPIOB ) {
 8000388:	4b22      	ldr	r3, [pc, #136]	; (8000414 <GPIOMode+0x90>)
 800038a:	4298      	cmp	r0, r3
		return (GPIO_ReadOutputDataBit(port, PinBit(portpin)) ? SET : RESET);
	return (GPIO_ReadInputDataBit(port, PinBit(portpin)) ? SET : RESET);
}

void GPIOMode(GPIO_TypeDef * port, uint16_t pinbit, GPIOMode_TypeDef mode,
              GPIOSpeed_TypeDef clk, GPIOOType_TypeDef otype, GPIOPuPd_TypeDef pupd) {
 800038c:	4604      	mov	r4, r0
 800038e:	460d      	mov	r5, r1
 8000390:	4616      	mov	r6, r2
	if ( port == GPIOB ) {
 8000392:	d101      	bne.n	8000398 <GPIOMode+0x14>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8000394:	2002      	movs	r0, #2
 8000396:	e022      	b.n	80003de <GPIOMode+0x5a>
	} else if ( port == GPIOC ) {
 8000398:	4b1f      	ldr	r3, [pc, #124]	; (8000418 <GPIOMode+0x94>)
 800039a:	4298      	cmp	r0, r3
 800039c:	d101      	bne.n	80003a2 <GPIOMode+0x1e>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 800039e:	2004      	movs	r0, #4
 80003a0:	e01d      	b.n	80003de <GPIOMode+0x5a>
	} else if ( port == GPIOD ) {
 80003a2:	4b1e      	ldr	r3, [pc, #120]	; (800041c <GPIOMode+0x98>)
 80003a4:	4298      	cmp	r0, r3
 80003a6:	d101      	bne.n	80003ac <GPIOMode+0x28>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 80003a8:	2008      	movs	r0, #8
 80003aa:	e018      	b.n	80003de <GPIOMode+0x5a>
	} else if ( port == GPIOE ) {
 80003ac:	4b1c      	ldr	r3, [pc, #112]	; (8000420 <GPIOMode+0x9c>)
 80003ae:	4298      	cmp	r0, r3
 80003b0:	d101      	bne.n	80003b6 <GPIOMode+0x32>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 80003b2:	2010      	movs	r0, #16
 80003b4:	e013      	b.n	80003de <GPIOMode+0x5a>
	} else if ( port == GPIOF ) {
 80003b6:	4b1b      	ldr	r3, [pc, #108]	; (8000424 <GPIOMode+0xa0>)
 80003b8:	4298      	cmp	r0, r3
 80003ba:	d101      	bne.n	80003c0 <GPIOMode+0x3c>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 80003bc:	2020      	movs	r0, #32
 80003be:	e00e      	b.n	80003de <GPIOMode+0x5a>
	} else if ( port == GPIOG ) {
 80003c0:	4b19      	ldr	r3, [pc, #100]	; (8000428 <GPIOMode+0xa4>)
 80003c2:	4298      	cmp	r0, r3
 80003c4:	d101      	bne.n	80003ca <GPIOMode+0x46>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 80003c6:	2040      	movs	r0, #64	; 0x40
 80003c8:	e009      	b.n	80003de <GPIOMode+0x5a>
	} else if ( port == GPIOH ) {
 80003ca:	4b18      	ldr	r3, [pc, #96]	; (800042c <GPIOMode+0xa8>)
 80003cc:	4298      	cmp	r0, r3
 80003ce:	d101      	bne.n	80003d4 <GPIOMode+0x50>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 80003d0:	2080      	movs	r0, #128	; 0x80
 80003d2:	e004      	b.n	80003de <GPIOMode+0x5a>
	} else if ( port == GPIOI ) {
 80003d4:	4b16      	ldr	r3, [pc, #88]	; (8000430 <GPIOMode+0xac>)
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d103      	bne.n	80003e2 <GPIOMode+0x5e>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 80003da:	f44f 7080 	mov.w	r0, #256	; 0x100
 80003de:	2101      	movs	r1, #1
 80003e0:	e004      	b.n	80003ec <GPIOMode+0x68>
	} else if ( port == GPIOA ) {
 80003e2:	4b14      	ldr	r3, [pc, #80]	; (8000434 <GPIOMode+0xb0>)
 80003e4:	4298      	cmp	r0, r3
 80003e6:	d103      	bne.n	80003f0 <GPIOMode+0x6c>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 80003e8:	2001      	movs	r0, #1
 80003ea:	4601      	mov	r1, r0
 80003ec:	f001 fa0c 	bl	8001808 <RCC_AHB1PeriphClockCmd>

	GPIO_InitTypeDef GPIO_InitStructure;
        
	GPIO_InitStructure.GPIO_Pin = pinbit;
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = otype;
 80003f0:	f89d 3020 	ldrb.w	r3, [sp, #32]
	}
	// assumes port is already waked up.

	GPIO_InitTypeDef GPIO_InitStructure;
        
	GPIO_InitStructure.GPIO_Pin = pinbit;
 80003f4:	9500      	str	r5, [sp, #0]
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = otype;
 80003f6:	f88d 3006 	strb.w	r3, [sp, #6]
	GPIO_InitStructure.GPIO_PuPd = pupd;
 80003fa:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
	// assumes port is already waked up.

	GPIO_InitTypeDef GPIO_InitStructure;
        
	GPIO_InitStructure.GPIO_Pin = pinbit;
	GPIO_InitStructure.GPIO_Mode = mode;
 80003fe:	f88d 6004 	strb.w	r6, [sp, #4]
	GPIO_InitStructure.GPIO_OType = otype;
	GPIO_InitStructure.GPIO_PuPd = pupd;
	GPIO_InitStructure.GPIO_Speed = clk;
	//
	GPIO_Init(port, &GPIO_InitStructure);
 8000402:	4620      	mov	r0, r4
 8000404:	4669      	mov	r1, sp
	GPIO_InitTypeDef GPIO_InitStructure;
        
	GPIO_InitStructure.GPIO_Pin = pinbit;
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = otype;
	GPIO_InitStructure.GPIO_PuPd = pupd;
 8000406:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_InitStructure.GPIO_Speed = clk;
 800040a:	f88d 7005 	strb.w	r7, [sp, #5]
	//
	GPIO_Init(port, &GPIO_InitStructure);
 800040e:	f000 fe53 	bl	80010b8 <GPIO_Init>
}
 8000412:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8000414:	40020400 	.word	0x40020400
 8000418:	40020800 	.word	0x40020800
 800041c:	40020c00 	.word	0x40020c00
 8000420:	40021000 	.word	0x40021000
 8000424:	40021400 	.word	0x40021400
 8000428:	40021800 	.word	0x40021800
 800042c:	40021c00 	.word	0x40021c00
 8000430:	40022000 	.word	0x40022000
 8000434:	40020000 	.word	0x40020000

08000438 <GPIOWrite>:


inline void GPIOWrite(GPIO_TypeDef * port, uint16_t bits) {
	GPIO_Write(port, bits);
 8000438:	f000 beb8 	b.w	80011ac <GPIO_Write>

0800043c <i2c_begin>:
} CommDirection;

I2C_Status i2c1_status;
CommDirection i2c1_direction;

boolean i2c_begin(uint32_t clkspeed) {
 800043c:	b570      	push	{r4, r5, r6, lr}
	GPIO_InitTypeDef GPIO_InitStructure;
	I2C_InitTypeDef I2C_InitStructure;

	/* I2C Periph clock enable */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE); //  RCC_APB1PeriphClockCmd(I2C1_RCC, ENABLE);
 800043e:	2101      	movs	r1, #1
} CommDirection;

I2C_Status i2c1_status;
CommDirection i2c1_direction;

boolean i2c_begin(uint32_t clkspeed) {
 8000440:	b086      	sub	sp, #24
 8000442:	4604      	mov	r4, r0
	GPIO_InitTypeDef GPIO_InitStructure;
	I2C_InitTypeDef I2C_InitStructure;

	/* I2C Periph clock enable */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE); //  RCC_APB1PeriphClockCmd(I2C1_RCC, ENABLE);
 8000444:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000448:	f001 fa02 	bl	8001850 <RCC_APB1PeriphClockCmd>
	/* GPIO Periph clock enable */
	//RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE); // PB5 (SMBA), PB6 (SCL), PB9 (SDA)  // RCC_APB2PeriphClockCmd(I2C1_GPIO_RCC, ENABLE);
	GPIOMode(PinPort(PB6), PinBit(PB6), GPIO_Mode_AF, GPIO_Speed_50MHz,
 800044c:	f240 2006 	movw	r0, #518	; 0x206
 8000450:	f7ff ff24 	bl	800029c <PinPort>
 8000454:	4606      	mov	r6, r0
 8000456:	f240 2006 	movw	r0, #518	; 0x206
 800045a:	f7ff ff27 	bl	80002ac <PinBit>
 800045e:	2202      	movs	r2, #2
 8000460:	4601      	mov	r1, r0
 8000462:	2501      	movs	r5, #1
 8000464:	4613      	mov	r3, r2
 8000466:	4630      	mov	r0, r6
 8000468:	9500      	str	r5, [sp, #0]
 800046a:	9501      	str	r5, [sp, #4]
 800046c:	f7ff ff8a 	bl	8000384 <GPIOMode>
			GPIO_OType_OD, GPIO_PuPd_UP);
	GPIOMode(PinPort(PB9), PinBit(PB9), GPIO_Mode_AF, GPIO_Speed_50MHz,
 8000470:	f240 2009 	movw	r0, #521	; 0x209
 8000474:	f7ff ff12 	bl	800029c <PinPort>
 8000478:	4606      	mov	r6, r0
 800047a:	f240 2009 	movw	r0, #521	; 0x209
 800047e:	f7ff ff15 	bl	80002ac <PinBit>
 8000482:	2202      	movs	r2, #2
 8000484:	4613      	mov	r3, r2
 8000486:	4601      	mov	r1, r0
 8000488:	4630      	mov	r0, r6
 800048a:	9500      	str	r5, [sp, #0]
 800048c:	9501      	str	r5, [sp, #4]
 800048e:	f7ff ff79 	bl	8000384 <GPIOMode>
			GPIO_OType_OD, GPIO_PuPd_UP);

	/* Configure I2C pins: SCL and SDA */
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_I2C1 );
 8000492:	2106      	movs	r1, #6
 8000494:	2204      	movs	r2, #4
 8000496:	4818      	ldr	r0, [pc, #96]	; (80004f8 <i2c_begin+0xbc>)
 8000498:	f000 fe8e 	bl	80011b8 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_I2C1 );
 800049c:	2109      	movs	r1, #9
 800049e:	2204      	movs	r2, #4
 80004a0:	4815      	ldr	r0, [pc, #84]	; (80004f8 <i2c_begin+0xbc>)
 80004a2:	f000 fe89 	bl	80011b8 <GPIO_PinAFConfig>

	//#if defined (REMAP_I2C1)
//Remap_I2C1_Configuration();
//#endif
	switch (clkspeed) {
 80004a6:	4b15      	ldr	r3, [pc, #84]	; (80004fc <i2c_begin+0xc0>)
 80004a8:	429c      	cmp	r4, r3
 80004aa:	d004      	beq.n	80004b6 <i2c_begin+0x7a>
 80004ac:	4a14      	ldr	r2, [pc, #80]	; (8000500 <i2c_begin+0xc4>)
	case 100000:
	case 400000:
		break;
	default:
		clkspeed = 100000;
 80004ae:	4294      	cmp	r4, r2
 80004b0:	bf0c      	ite	eq
 80004b2:	4614      	moveq	r4, r2
 80004b4:	461c      	movne	r4, r3
		break;
	}
	/* I2C configuration */
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 80004b6:	2300      	movs	r3, #0
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
	I2C_InitStructure.I2C_ClockSpeed = clkspeed;
 80004b8:	a906      	add	r1, sp, #24
	default:
		clkspeed = 100000;
		break;
	}
	/* I2C configuration */
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 80004ba:	461d      	mov	r5, r3
 80004bc:	f8ad 300c 	strh.w	r3, [sp, #12]
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
 80004c0:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 80004c4:	f8ad 300e 	strh.w	r3, [sp, #14]
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 80004c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004cc:	f8ad 3012 	strh.w	r3, [sp, #18]
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
	I2C_InitStructure.I2C_ClockSpeed = clkspeed;
 80004d0:	f841 4d10 	str.w	r4, [r1, #-16]!
	}
	/* I2C configuration */
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 80004d4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
	I2C_InitStructure.I2C_ClockSpeed = clkspeed;

	/* Apply I2C configuration after enabling it */
	I2C_Init(I2C1, &I2C_InitStructure);
 80004d8:	480a      	ldr	r0, [pc, #40]	; (8000504 <i2c_begin+0xc8>)
	}
	/* I2C configuration */
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 80004da:	f8ad 3014 	strh.w	r3, [sp, #20]
	I2C_InitStructure.I2C_ClockSpeed = clkspeed;

	/* Apply I2C configuration after enabling it */
	I2C_Init(I2C1, &I2C_InitStructure);
 80004de:	f000 feaf 	bl	8001240 <I2C_Init>
	/* I2C Peripheral Enable */
	I2C_Cmd(I2C1, ENABLE);
 80004e2:	4808      	ldr	r0, [pc, #32]	; (8000504 <i2c_begin+0xc8>)
 80004e4:	2101      	movs	r1, #1
 80004e6:	f000 ff1f 	bl	8001328 <I2C_Cmd>

	i2c1_status = NOT_READY;
 80004ea:	4b07      	ldr	r3, [pc, #28]	; (8000508 <i2c_begin+0xcc>)
 80004ec:	20ff      	movs	r0, #255	; 0xff
 80004ee:	7018      	strb	r0, [r3, #0]
	i2c1_direction = NOT_DEFINED;
 80004f0:	4b06      	ldr	r3, [pc, #24]	; (800050c <i2c_begin+0xd0>)
 80004f2:	701d      	strb	r5, [r3, #0]

	return true;
}
 80004f4:	b006      	add	sp, #24
 80004f6:	bd70      	pop	{r4, r5, r6, pc}
 80004f8:	40020400 	.word	0x40020400
 80004fc:	000186a0 	.word	0x000186a0
 8000500:	00061a80 	.word	0x00061a80
 8000504:	40005400 	.word	0x40005400
 8000508:	200009d1 	.word	0x200009d1
 800050c:	200009d0 	.word	0x200009d0

08000510 <i2c_transmit>:

boolean i2c_transmit(uint8_t addr, uint8_t * data, uint16_t length) {
 8000510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000514:	4616      	mov	r6, r2
 8000516:	4607      	mov	r7, r0
 8000518:	460d      	mov	r5, r1
	uint16_t i;
	uint32_t resigmillis = millis() + 100;
 800051a:	f7ff fe8b 	bl	8000234 <millis>

	i2c1_direction = TRANSMITTER;
 800051e:	4b3b      	ldr	r3, [pc, #236]	; (800060c <i2c_transmit+0xfc>)
 8000520:	2201      	movs	r2, #1
 8000522:	701a      	strb	r2, [r3, #0]
	//
	i2c1_status = NOT_READY;
 8000524:	4b3a      	ldr	r3, [pc, #232]	; (8000610 <i2c_transmit+0x100>)
 8000526:	22ff      	movs	r2, #255	; 0xff
	return true;
}

boolean i2c_transmit(uint8_t addr, uint8_t * data, uint16_t length) {
	uint16_t i;
	uint32_t resigmillis = millis() + 100;
 8000528:	f100 0464 	add.w	r4, r0, #100	; 0x64

	i2c1_direction = TRANSMITTER;
	//
	i2c1_status = NOT_READY;
 800052c:	701a      	strb	r2, [r3, #0]
	while (I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY )) {
 800052e:	e003      	b.n	8000538 <i2c_transmit+0x28>
		if (millis() > resigmillis)
 8000530:	f7ff fe80 	bl	8000234 <millis>
 8000534:	42a0      	cmp	r0, r4
 8000536:	d862      	bhi.n	80005fe <i2c_transmit+0xee>
	uint32_t resigmillis = millis() + 100;

	i2c1_direction = TRANSMITTER;
	//
	i2c1_status = NOT_READY;
	while (I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY )) {
 8000538:	4836      	ldr	r0, [pc, #216]	; (8000614 <i2c_transmit+0x104>)
 800053a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800053e:	f001 f80b 	bl	8001558 <I2C_GetFlagStatus>
 8000542:	2800      	cmp	r0, #0
 8000544:	d1f4      	bne.n	8000530 <i2c_transmit+0x20>
		if (millis() > resigmillis)
			return false;
	}
	i2c1_status = READY;
 8000546:	4b32      	ldr	r3, [pc, #200]	; (8000610 <i2c_transmit+0x100>)

	/* Send STRAT condition */
	I2C_GenerateSTART(I2C1, ENABLE);
 8000548:	2101      	movs	r1, #1
	i2c1_status = NOT_READY;
	while (I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY )) {
		if (millis() > resigmillis)
			return false;
	}
	i2c1_status = READY;
 800054a:	7018      	strb	r0, [r3, #0]

	/* Send STRAT condition */
	I2C_GenerateSTART(I2C1, ENABLE);
 800054c:	4831      	ldr	r0, [pc, #196]	; (8000614 <i2c_transmit+0x104>)
 800054e:	f000 fef7 	bl	8001340 <I2C_GenerateSTART>
	/* Test on EV5 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT )) {
 8000552:	e003      	b.n	800055c <i2c_transmit+0x4c>
		if (millis() > resigmillis)
 8000554:	f7ff fe6e 	bl	8000234 <millis>
 8000558:	42a0      	cmp	r0, r4
 800055a:	d852      	bhi.n	8000602 <i2c_transmit+0xf2>
	i2c1_status = READY;

	/* Send STRAT condition */
	I2C_GenerateSTART(I2C1, ENABLE);
	/* Test on EV5 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT )) {
 800055c:	482d      	ldr	r0, [pc, #180]	; (8000614 <i2c_transmit+0x104>)
 800055e:	492e      	ldr	r1, [pc, #184]	; (8000618 <i2c_transmit+0x108>)
 8000560:	f000 ffe5 	bl	800152e <I2C_CheckEvent>
 8000564:	4680      	mov	r8, r0
 8000566:	2800      	cmp	r0, #0
 8000568:	d0f4      	beq.n	8000554 <i2c_transmit+0x44>
		if (millis() > resigmillis)
			return false;
	}
	i2c1_status = START_ISSUED;
 800056a:	2201      	movs	r2, #1
 800056c:	4b28      	ldr	r3, [pc, #160]	; (8000610 <i2c_transmit+0x100>)

	/* Send address for write */
	I2C_Send7bitAddress(I2C1, addr << 1, I2C_Direction_Transmitter );
 800056e:	4829      	ldr	r0, [pc, #164]	; (8000614 <i2c_transmit+0x104>)
	/* Test on EV5 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT )) {
		if (millis() > resigmillis)
			return false;
	}
	i2c1_status = START_ISSUED;
 8000570:	701a      	strb	r2, [r3, #0]

	/* Send address for write */
	I2C_Send7bitAddress(I2C1, addr << 1, I2C_Direction_Transmitter );
 8000572:	fa17 f102 	lsls.w	r1, r7, r2
 8000576:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 800057a:	2200      	movs	r2, #0
 800057c:	f000 fef8 	bl	8001370 <I2C_Send7bitAddress>
	/* Test on EV6 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED )) {
 8000580:	e003      	b.n	800058a <i2c_transmit+0x7a>
		if (millis() > resigmillis)
 8000582:	f7ff fe57 	bl	8000234 <millis>
 8000586:	42a0      	cmp	r0, r4
 8000588:	d83c      	bhi.n	8000604 <i2c_transmit+0xf4>
	i2c1_status = START_ISSUED;

	/* Send address for write */
	I2C_Send7bitAddress(I2C1, addr << 1, I2C_Direction_Transmitter );
	/* Test on EV6 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED )) {
 800058a:	4822      	ldr	r0, [pc, #136]	; (8000614 <i2c_transmit+0x104>)
 800058c:	4923      	ldr	r1, [pc, #140]	; (800061c <i2c_transmit+0x10c>)
 800058e:	f000 ffce 	bl	800152e <I2C_CheckEvent>
 8000592:	4607      	mov	r7, r0
 8000594:	2800      	cmp	r0, #0
 8000596:	d0f4      	beq.n	8000582 <i2c_transmit+0x72>
		if (millis() > resigmillis)
			return false;
	}
	i2c1_status = DST_ADDRESS_SENT;
 8000598:	4f1d      	ldr	r7, [pc, #116]	; (8000610 <i2c_transmit+0x100>)
 800059a:	2302      	movs	r3, #2
 800059c:	703b      	strb	r3, [r7, #0]

	resigmillis = millis() + 100;
 800059e:	f7ff fe49 	bl	8000234 <millis>
	for (i = 0; i < length; i++) {
 80005a2:	2400      	movs	r4, #0
		if (millis() > resigmillis)
			return false;
	}
	i2c1_status = DST_ADDRESS_SENT;

	resigmillis = millis() + 100;
 80005a4:	f100 0964 	add.w	r9, r0, #100	; 0x64
 80005a8:	46b8      	mov	r8, r7
	for (i = 0; i < length; i++) {
 80005aa:	e016      	b.n	80005da <i2c_transmit+0xca>
		I2C_SendData(I2C1, data[i]);
 80005ac:	4819      	ldr	r0, [pc, #100]	; (8000614 <i2c_transmit+0x104>)
 80005ae:	5d29      	ldrb	r1, [r5, r4]
 80005b0:	f000 ff61 	bl	8001476 <I2C_SendData>
		i2c1_status = BYTE_TRANSMITTING;
 80005b4:	2304      	movs	r3, #4
 80005b6:	f888 3000 	strb.w	r3, [r8]
		/* Test on EV8 and clear it */
		while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED )) {
 80005ba:	e003      	b.n	80005c4 <i2c_transmit+0xb4>
			if (millis() > resigmillis)
 80005bc:	f7ff fe3a 	bl	8000234 <millis>
 80005c0:	4548      	cmp	r0, r9
 80005c2:	d81f      	bhi.n	8000604 <i2c_transmit+0xf4>
	resigmillis = millis() + 100;
	for (i = 0; i < length; i++) {
		I2C_SendData(I2C1, data[i]);
		i2c1_status = BYTE_TRANSMITTING;
		/* Test on EV8 and clear it */
		while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED )) {
 80005c4:	4813      	ldr	r0, [pc, #76]	; (8000614 <i2c_transmit+0x104>)
 80005c6:	4916      	ldr	r1, [pc, #88]	; (8000620 <i2c_transmit+0x110>)
 80005c8:	f000 ffb1 	bl	800152e <I2C_CheckEvent>
 80005cc:	4607      	mov	r7, r0
 80005ce:	2800      	cmp	r0, #0
 80005d0:	d0f4      	beq.n	80005bc <i2c_transmit+0xac>
			if (millis() > resigmillis)
				return false;
		}
		i2c1_status = BYTE_TRANSMITTED;
 80005d2:	2305      	movs	r3, #5
 80005d4:	f888 3000 	strb.w	r3, [r8]
 80005d8:	3401      	adds	r4, #1
			return false;
	}
	i2c1_status = DST_ADDRESS_SENT;

	resigmillis = millis() + 100;
	for (i = 0; i < length; i++) {
 80005da:	b2a3      	uxth	r3, r4
 80005dc:	42b3      	cmp	r3, r6
 80005de:	4f0c      	ldr	r7, [pc, #48]	; (8000610 <i2c_transmit+0x100>)
 80005e0:	d3e4      	bcc.n	80005ac <i2c_transmit+0x9c>
			if (millis() > resigmillis)
				return false;
		}
		i2c1_status = BYTE_TRANSMITTED;
	}
	i2c1_status = TRANSMISSION_COMPLETED;
 80005e2:	2306      	movs	r3, #6
 80005e4:	703b      	strb	r3, [r7, #0]

	I2C_GenerateSTOP(I2C1, ENABLE);
 80005e6:	480b      	ldr	r0, [pc, #44]	; (8000614 <i2c_transmit+0x104>)
 80005e8:	2101      	movs	r1, #1
 80005ea:	f000 feb5 	bl	8001358 <I2C_GenerateSTOP>
	i2c1_status = NOT_READY;
	i2c1_direction = NOT_DEFINED;
 80005ee:	4b07      	ldr	r3, [pc, #28]	; (800060c <i2c_transmit+0xfc>)
		i2c1_status = BYTE_TRANSMITTED;
	}
	i2c1_status = TRANSMISSION_COMPLETED;

	I2C_GenerateSTOP(I2C1, ENABLE);
	i2c1_status = NOT_READY;
 80005f0:	f04f 08ff 	mov.w	r8, #255	; 0xff
	i2c1_direction = NOT_DEFINED;
 80005f4:	2200      	movs	r2, #0
		i2c1_status = BYTE_TRANSMITTED;
	}
	i2c1_status = TRANSMISSION_COMPLETED;

	I2C_GenerateSTOP(I2C1, ENABLE);
	i2c1_status = NOT_READY;
 80005f6:	f887 8000 	strb.w	r8, [r7]
	i2c1_direction = NOT_DEFINED;
 80005fa:	701a      	strb	r2, [r3, #0]
 80005fc:	e001      	b.n	8000602 <i2c_transmit+0xf2>
	i2c1_direction = TRANSMITTER;
	//
	i2c1_status = NOT_READY;
	while (I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY )) {
		if (millis() > resigmillis)
			return false;
 80005fe:	2700      	movs	r7, #0
 8000600:	e000      	b.n	8000604 <i2c_transmit+0xf4>
	/* Send STRAT condition */
	I2C_GenerateSTART(I2C1, ENABLE);
	/* Test on EV5 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT )) {
		if (millis() > resigmillis)
			return false;
 8000602:	4647      	mov	r7, r8
	I2C_GenerateSTOP(I2C1, ENABLE);
	i2c1_status = NOT_READY;
	i2c1_direction = NOT_DEFINED;

	return true;
}
 8000604:	4638      	mov	r0, r7
 8000606:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800060a:	bf00      	nop
 800060c:	200009d0 	.word	0x200009d0
 8000610:	200009d1 	.word	0x200009d1
 8000614:	40005400 	.word	0x40005400
 8000618:	00030001 	.word	0x00030001
 800061c:	00070082 	.word	0x00070082
 8000620:	00070084 	.word	0x00070084

08000624 <i2c_requestFrom>:

boolean i2c_requestFrom(uint8_t addr, uint8_t req, uint8_t * recv, uint16_t lim) {
 8000624:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000628:	4614      	mov	r4, r2
 800062a:	4698      	mov	r8, r3
 800062c:	4606      	mov	r6, r0
 800062e:	460d      	mov	r5, r1
	uint16_t i;
	uint32_t resigmillis = millis() + 100;
 8000630:	f7ff fe00 	bl	8000234 <millis>

	i2c1_direction = RECEIVER;
 8000634:	4b68      	ldr	r3, [pc, #416]	; (80007d8 <i2c_requestFrom+0x1b4>)
 8000636:	2202      	movs	r2, #2
 8000638:	701a      	strb	r2, [r3, #0]
	//
	i2c1_status = NOT_READY;
 800063a:	4b68      	ldr	r3, [pc, #416]	; (80007dc <i2c_requestFrom+0x1b8>)
 800063c:	22ff      	movs	r2, #255	; 0xff
	return true;
}

boolean i2c_requestFrom(uint8_t addr, uint8_t req, uint8_t * recv, uint16_t lim) {
	uint16_t i;
	uint32_t resigmillis = millis() + 100;
 800063e:	f100 0764 	add.w	r7, r0, #100	; 0x64

	i2c1_direction = RECEIVER;
	//
	i2c1_status = NOT_READY;
 8000642:	701a      	strb	r2, [r3, #0]
	/* While the bus is busy */
	while (I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY )) {
 8000644:	e004      	b.n	8000650 <i2c_requestFrom+0x2c>
		if (millis() > resigmillis)
 8000646:	f7ff fdf5 	bl	8000234 <millis>
 800064a:	42b8      	cmp	r0, r7
 800064c:	f200 80ba 	bhi.w	80007c4 <i2c_requestFrom+0x1a0>

	i2c1_direction = RECEIVER;
	//
	i2c1_status = NOT_READY;
	/* While the bus is busy */
	while (I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY )) {
 8000650:	4863      	ldr	r0, [pc, #396]	; (80007e0 <i2c_requestFrom+0x1bc>)
 8000652:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8000656:	f000 ff7f 	bl	8001558 <I2C_GetFlagStatus>
 800065a:	2800      	cmp	r0, #0
 800065c:	d1f3      	bne.n	8000646 <i2c_requestFrom+0x22>
		if (millis() > resigmillis)
			return false;
	}
	i2c1_status = READY;
 800065e:	4b5f      	ldr	r3, [pc, #380]	; (80007dc <i2c_requestFrom+0x1b8>)

	/* Send START condition */
	I2C_GenerateSTART(I2C1, ENABLE);
 8000660:	2101      	movs	r1, #1
	/* While the bus is busy */
	while (I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY )) {
		if (millis() > resigmillis)
			return false;
	}
	i2c1_status = READY;
 8000662:	7018      	strb	r0, [r3, #0]

	/* Send START condition */
	I2C_GenerateSTART(I2C1, ENABLE);
 8000664:	485e      	ldr	r0, [pc, #376]	; (80007e0 <i2c_requestFrom+0x1bc>)
 8000666:	f000 fe6b 	bl	8001340 <I2C_GenerateSTART>
	/* Test on EV5 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT )) {
 800066a:	e004      	b.n	8000676 <i2c_requestFrom+0x52>
		if (millis() > resigmillis)
 800066c:	f7ff fde2 	bl	8000234 <millis>
 8000670:	42b8      	cmp	r0, r7
 8000672:	f200 80a9 	bhi.w	80007c8 <i2c_requestFrom+0x1a4>
	i2c1_status = READY;

	/* Send START condition */
	I2C_GenerateSTART(I2C1, ENABLE);
	/* Test on EV5 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT )) {
 8000676:	485a      	ldr	r0, [pc, #360]	; (80007e0 <i2c_requestFrom+0x1bc>)
 8000678:	495a      	ldr	r1, [pc, #360]	; (80007e4 <i2c_requestFrom+0x1c0>)
 800067a:	f000 ff58 	bl	800152e <I2C_CheckEvent>
 800067e:	4681      	mov	r9, r0
 8000680:	2800      	cmp	r0, #0
 8000682:	d0f3      	beq.n	800066c <i2c_requestFrom+0x48>
		if (millis() > resigmillis)
			return false;
	}
	i2c1_status = START_ISSUED;
 8000684:	2201      	movs	r2, #1

	/* Send EEPROM address for write */
	I2C_Send7bitAddress(I2C1, addr << 1, I2C_Direction_Transmitter );
 8000686:	4096      	lsls	r6, r2
	/* Test on EV5 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT )) {
		if (millis() > resigmillis)
			return false;
	}
	i2c1_status = START_ISSUED;
 8000688:	4b54      	ldr	r3, [pc, #336]	; (80007dc <i2c_requestFrom+0x1b8>)

	/* Send EEPROM address for write */
	I2C_Send7bitAddress(I2C1, addr << 1, I2C_Direction_Transmitter );
 800068a:	4855      	ldr	r0, [pc, #340]	; (80007e0 <i2c_requestFrom+0x1bc>)
	/* Test on EV5 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT )) {
		if (millis() > resigmillis)
			return false;
	}
	i2c1_status = START_ISSUED;
 800068c:	701a      	strb	r2, [r3, #0]

	/* Send EEPROM address for write */
	I2C_Send7bitAddress(I2C1, addr << 1, I2C_Direction_Transmitter );
 800068e:	b2f6      	uxtb	r6, r6
 8000690:	4631      	mov	r1, r6
 8000692:	2200      	movs	r2, #0
 8000694:	f000 fe6c 	bl	8001370 <I2C_Send7bitAddress>
	/* Test on EV6 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED )) {
 8000698:	e004      	b.n	80006a4 <i2c_requestFrom+0x80>
		if (millis() > resigmillis)
 800069a:	f7ff fdcb 	bl	8000234 <millis>
 800069e:	42b8      	cmp	r0, r7
 80006a0:	f200 8092 	bhi.w	80007c8 <i2c_requestFrom+0x1a4>
	i2c1_status = START_ISSUED;

	/* Send EEPROM address for write */
	I2C_Send7bitAddress(I2C1, addr << 1, I2C_Direction_Transmitter );
	/* Test on EV6 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED )) {
 80006a4:	484e      	ldr	r0, [pc, #312]	; (80007e0 <i2c_requestFrom+0x1bc>)
 80006a6:	4950      	ldr	r1, [pc, #320]	; (80007e8 <i2c_requestFrom+0x1c4>)
 80006a8:	f000 ff41 	bl	800152e <I2C_CheckEvent>
 80006ac:	4681      	mov	r9, r0
 80006ae:	2800      	cmp	r0, #0
 80006b0:	d0f3      	beq.n	800069a <i2c_requestFrom+0x76>
		if (millis() > resigmillis)
			return false;
	}
	i2c1_status = DST_ADDRESS_SENT;
 80006b2:	f8df 9128 	ldr.w	r9, [pc, #296]	; 80007dc <i2c_requestFrom+0x1b8>

	/* Send the EEPROM's internal address to read from: MSB of the address first */
	I2C_SendData(I2C1, req);
 80006b6:	484a      	ldr	r0, [pc, #296]	; (80007e0 <i2c_requestFrom+0x1bc>)
	/* Test on EV6 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED )) {
		if (millis() > resigmillis)
			return false;
	}
	i2c1_status = DST_ADDRESS_SENT;
 80006b8:	2302      	movs	r3, #2
 80006ba:	f889 3000 	strb.w	r3, [r9]

	/* Send the EEPROM's internal address to read from: MSB of the address first */
	I2C_SendData(I2C1, req);
 80006be:	4629      	mov	r1, r5
 80006c0:	f000 fed9 	bl	8001476 <I2C_SendData>
	i2c1_status = BYTE_TRANSMITTING;
 80006c4:	2304      	movs	r3, #4
 80006c6:	f889 3000 	strb.w	r3, [r9]
	/* Test on EV8 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED )) {
 80006ca:	e003      	b.n	80006d4 <i2c_requestFrom+0xb0>
		if (millis() > resigmillis)
 80006cc:	f7ff fdb2 	bl	8000234 <millis>
 80006d0:	42b8      	cmp	r0, r7
 80006d2:	d87b      	bhi.n	80007cc <i2c_requestFrom+0x1a8>

	/* Send the EEPROM's internal address to read from: MSB of the address first */
	I2C_SendData(I2C1, req);
	i2c1_status = BYTE_TRANSMITTING;
	/* Test on EV8 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED )) {
 80006d4:	4842      	ldr	r0, [pc, #264]	; (80007e0 <i2c_requestFrom+0x1bc>)
 80006d6:	4945      	ldr	r1, [pc, #276]	; (80007ec <i2c_requestFrom+0x1c8>)
 80006d8:	f000 ff29 	bl	800152e <I2C_CheckEvent>
 80006dc:	4605      	mov	r5, r0
 80006de:	2800      	cmp	r0, #0
 80006e0:	d0f4      	beq.n	80006cc <i2c_requestFrom+0xa8>
		if (millis() > resigmillis)
			return false;
	}
	i2c1_status = TRANSMISSION_COMPLETED;
 80006e2:	4b3e      	ldr	r3, [pc, #248]	; (80007dc <i2c_requestFrom+0x1b8>)
 80006e4:	2206      	movs	r2, #6
 80006e6:	701a      	strb	r2, [r3, #0]

	//	  I2C_GenerateSTOP(I2C1, ENABLE);

	resigmillis = millis() + 100;
 80006e8:	f7ff fda4 	bl	8000234 <millis>
	/* Send STRAT condition a second time */
	I2C_GenerateSTART(I2C1, ENABLE);
 80006ec:	2101      	movs	r1, #1
	}
	i2c1_status = TRANSMISSION_COMPLETED;

	//	  I2C_GenerateSTOP(I2C1, ENABLE);

	resigmillis = millis() + 100;
 80006ee:	f100 0564 	add.w	r5, r0, #100	; 0x64
	/* Send STRAT condition a second time */
	I2C_GenerateSTART(I2C1, ENABLE);
 80006f2:	483b      	ldr	r0, [pc, #236]	; (80007e0 <i2c_requestFrom+0x1bc>)
 80006f4:	f000 fe24 	bl	8001340 <I2C_GenerateSTART>
	/* Test on EV5 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT )) {
 80006f8:	e003      	b.n	8000702 <i2c_requestFrom+0xde>
		if (millis() > resigmillis)
 80006fa:	f7ff fd9b 	bl	8000234 <millis>
 80006fe:	42a8      	cmp	r0, r5
 8000700:	d866      	bhi.n	80007d0 <i2c_requestFrom+0x1ac>

	resigmillis = millis() + 100;
	/* Send STRAT condition a second time */
	I2C_GenerateSTART(I2C1, ENABLE);
	/* Test on EV5 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT )) {
 8000702:	4837      	ldr	r0, [pc, #220]	; (80007e0 <i2c_requestFrom+0x1bc>)
 8000704:	4937      	ldr	r1, [pc, #220]	; (80007e4 <i2c_requestFrom+0x1c0>)
 8000706:	f000 ff12 	bl	800152e <I2C_CheckEvent>
 800070a:	4607      	mov	r7, r0
 800070c:	2800      	cmp	r0, #0
 800070e:	d0f4      	beq.n	80006fa <i2c_requestFrom+0xd6>
		if (millis() > resigmillis)
			return false;
	}
	i2c1_status = RESTART_ISSUED;
 8000710:	4b32      	ldr	r3, [pc, #200]	; (80007dc <i2c_requestFrom+0x1b8>)

	/* Send EEPROM address for read */
	I2C_Send7bitAddress(I2C1, addr << 1, I2C_Direction_Receiver );
 8000712:	4833      	ldr	r0, [pc, #204]	; (80007e0 <i2c_requestFrom+0x1bc>)
	/* Test on EV5 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT )) {
		if (millis() > resigmillis)
			return false;
	}
	i2c1_status = RESTART_ISSUED;
 8000714:	2207      	movs	r2, #7
 8000716:	701a      	strb	r2, [r3, #0]

	/* Send EEPROM address for read */
	I2C_Send7bitAddress(I2C1, addr << 1, I2C_Direction_Receiver );
 8000718:	4631      	mov	r1, r6
 800071a:	2201      	movs	r2, #1
 800071c:	f000 fe28 	bl	8001370 <I2C_Send7bitAddress>
	/* Test on EV6 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED )) {
 8000720:	e003      	b.n	800072a <i2c_requestFrom+0x106>
		if (millis() > resigmillis)
 8000722:	f7ff fd87 	bl	8000234 <millis>
 8000726:	42a8      	cmp	r0, r5
 8000728:	d853      	bhi.n	80007d2 <i2c_requestFrom+0x1ae>
	i2c1_status = RESTART_ISSUED;

	/* Send EEPROM address for read */
	I2C_Send7bitAddress(I2C1, addr << 1, I2C_Direction_Receiver );
	/* Test on EV6 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED )) {
 800072a:	482d      	ldr	r0, [pc, #180]	; (80007e0 <i2c_requestFrom+0x1bc>)
 800072c:	4930      	ldr	r1, [pc, #192]	; (80007f0 <i2c_requestFrom+0x1cc>)
 800072e:	f000 fefe 	bl	800152e <I2C_CheckEvent>
 8000732:	4606      	mov	r6, r0
 8000734:	2800      	cmp	r0, #0
 8000736:	d0f4      	beq.n	8000722 <i2c_requestFrom+0xfe>
		if (millis() > resigmillis)
			return false;
	}
	i2c1_status = SRC_ADDRESS_SENT;

	for (i = 1; i < lim; i++) {
 8000738:	2601      	movs	r6, #1
 800073a:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 80007dc <i2c_requestFrom+0x1b8>
 800073e:	e015      	b.n	800076c <i2c_requestFrom+0x148>
		i2c1_status = RECEIVE_BYTE_READY;
 8000740:	2308      	movs	r3, #8
 8000742:	f889 3000 	strb.w	r3, [r9]
		while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_RECEIVED )) {
 8000746:	e003      	b.n	8000750 <i2c_requestFrom+0x12c>
			if (millis() > resigmillis)
 8000748:	f7ff fd74 	bl	8000234 <millis>
 800074c:	42a8      	cmp	r0, r5
 800074e:	d83f      	bhi.n	80007d0 <i2c_requestFrom+0x1ac>
	}
	i2c1_status = SRC_ADDRESS_SENT;

	for (i = 1; i < lim; i++) {
		i2c1_status = RECEIVE_BYTE_READY;
		while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_RECEIVED )) {
 8000750:	4823      	ldr	r0, [pc, #140]	; (80007e0 <i2c_requestFrom+0x1bc>)
 8000752:	4928      	ldr	r1, [pc, #160]	; (80007f4 <i2c_requestFrom+0x1d0>)
 8000754:	f000 feeb 	bl	800152e <I2C_CheckEvent>
 8000758:	4607      	mov	r7, r0
 800075a:	2800      	cmp	r0, #0
 800075c:	d0f4      	beq.n	8000748 <i2c_requestFrom+0x124>
			if (millis() > resigmillis)
				return false;
		}
		/* Read a byte from the EEPROM */
		*recv++ = I2C_ReceiveData(I2C1 );
 800075e:	4820      	ldr	r0, [pc, #128]	; (80007e0 <i2c_requestFrom+0x1bc>)
 8000760:	f000 fe8b 	bl	800147a <I2C_ReceiveData>
		if (millis() > resigmillis)
			return false;
	}
	i2c1_status = SRC_ADDRESS_SENT;

	for (i = 1; i < lim; i++) {
 8000764:	3601      	adds	r6, #1
		while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_RECEIVED )) {
			if (millis() > resigmillis)
				return false;
		}
		/* Read a byte from the EEPROM */
		*recv++ = I2C_ReceiveData(I2C1 );
 8000766:	f804 0b01 	strb.w	r0, [r4], #1
		if (millis() > resigmillis)
			return false;
	}
	i2c1_status = SRC_ADDRESS_SENT;

	for (i = 1; i < lim; i++) {
 800076a:	b2b6      	uxth	r6, r6
 800076c:	4546      	cmp	r6, r8
 800076e:	4f1b      	ldr	r7, [pc, #108]	; (80007dc <i2c_requestFrom+0x1b8>)
 8000770:	d3e6      	bcc.n	8000740 <i2c_requestFrom+0x11c>
		}
		/* Read a byte from the EEPROM */
		*recv++ = I2C_ReceiveData(I2C1 );
		i2c1_status = BYTE_RECEIVED;
	}
	i2c1_status = BEFORELAST_BYTE_RECEIVED;
 8000772:	230a      	movs	r3, #10
 8000774:	703b      	strb	r3, [r7, #0]

	/* Disable Acknowledgement */
	I2C_AcknowledgeConfig(I2C1, DISABLE);
 8000776:	481a      	ldr	r0, [pc, #104]	; (80007e0 <i2c_requestFrom+0x1bc>)
 8000778:	2100      	movs	r1, #0
 800077a:	f000 fe01 	bl	8001380 <I2C_AcknowledgeConfig>
	/* Send STOP Condition */
	I2C_GenerateSTOP(I2C1, ENABLE);
 800077e:	4818      	ldr	r0, [pc, #96]	; (80007e0 <i2c_requestFrom+0x1bc>)
 8000780:	2101      	movs	r1, #1
 8000782:	f000 fde9 	bl	8001358 <I2C_GenerateSTOP>
	i2c1_status = LAST_BYTE_READY;
 8000786:	230b      	movs	r3, #11
 8000788:	703b      	strb	r3, [r7, #0]

	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_RECEIVED )) {
 800078a:	e003      	b.n	8000794 <i2c_requestFrom+0x170>
		if (millis() > resigmillis)
 800078c:	f7ff fd52 	bl	8000234 <millis>
 8000790:	42a8      	cmp	r0, r5
 8000792:	d81e      	bhi.n	80007d2 <i2c_requestFrom+0x1ae>
	I2C_AcknowledgeConfig(I2C1, DISABLE);
	/* Send STOP Condition */
	I2C_GenerateSTOP(I2C1, ENABLE);
	i2c1_status = LAST_BYTE_READY;

	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_RECEIVED )) {
 8000794:	4812      	ldr	r0, [pc, #72]	; (80007e0 <i2c_requestFrom+0x1bc>)
 8000796:	4917      	ldr	r1, [pc, #92]	; (80007f4 <i2c_requestFrom+0x1d0>)
 8000798:	f000 fec9 	bl	800152e <I2C_CheckEvent>
 800079c:	4606      	mov	r6, r0
 800079e:	2800      	cmp	r0, #0
 80007a0:	d0f4      	beq.n	800078c <i2c_requestFrom+0x168>
		if (millis() > resigmillis)
			return false;
	}
	/* Read a byte from the EEPROM */
	*recv = I2C_ReceiveData(I2C1 );
 80007a2:	480f      	ldr	r0, [pc, #60]	; (80007e0 <i2c_requestFrom+0x1bc>)
 80007a4:	f000 fe69 	bl	800147a <I2C_ReceiveData>
 80007a8:	7020      	strb	r0, [r4, #0]
	i2c1_status = RECEIVE_BYTE_COMPLETED;
 80007aa:	4c0c      	ldr	r4, [pc, #48]	; (80007dc <i2c_requestFrom+0x1b8>)

	/* Enable Acknowledgement to be ready for another reception */
	I2C_AcknowledgeConfig(I2C1, ENABLE);
 80007ac:	480c      	ldr	r0, [pc, #48]	; (80007e0 <i2c_requestFrom+0x1bc>)
		if (millis() > resigmillis)
			return false;
	}
	/* Read a byte from the EEPROM */
	*recv = I2C_ReceiveData(I2C1 );
	i2c1_status = RECEIVE_BYTE_COMPLETED;
 80007ae:	230c      	movs	r3, #12
 80007b0:	7023      	strb	r3, [r4, #0]

	/* Enable Acknowledgement to be ready for another reception */
	I2C_AcknowledgeConfig(I2C1, ENABLE);
 80007b2:	2101      	movs	r1, #1
 80007b4:	f000 fde4 	bl	8001380 <I2C_AcknowledgeConfig>
	i2c1_status = NOT_READY;
	i2c1_direction = NOT_DEFINED;
 80007b8:	4b07      	ldr	r3, [pc, #28]	; (80007d8 <i2c_requestFrom+0x1b4>)
	*recv = I2C_ReceiveData(I2C1 );
	i2c1_status = RECEIVE_BYTE_COMPLETED;

	/* Enable Acknowledgement to be ready for another reception */
	I2C_AcknowledgeConfig(I2C1, ENABLE);
	i2c1_status = NOT_READY;
 80007ba:	26ff      	movs	r6, #255	; 0xff
	i2c1_direction = NOT_DEFINED;
 80007bc:	2200      	movs	r2, #0
	*recv = I2C_ReceiveData(I2C1 );
	i2c1_status = RECEIVE_BYTE_COMPLETED;

	/* Enable Acknowledgement to be ready for another reception */
	I2C_AcknowledgeConfig(I2C1, ENABLE);
	i2c1_status = NOT_READY;
 80007be:	7026      	strb	r6, [r4, #0]
	i2c1_direction = NOT_DEFINED;
 80007c0:	701a      	strb	r2, [r3, #0]

	return true;
 80007c2:	e006      	b.n	80007d2 <i2c_requestFrom+0x1ae>
	//
	i2c1_status = NOT_READY;
	/* While the bus is busy */
	while (I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY )) {
		if (millis() > resigmillis)
			return false;
 80007c4:	2600      	movs	r6, #0
 80007c6:	e004      	b.n	80007d2 <i2c_requestFrom+0x1ae>
	/* Send EEPROM address for write */
	I2C_Send7bitAddress(I2C1, addr << 1, I2C_Direction_Transmitter );
	/* Test on EV6 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED )) {
		if (millis() > resigmillis)
			return false;
 80007c8:	464e      	mov	r6, r9
 80007ca:	e002      	b.n	80007d2 <i2c_requestFrom+0x1ae>
	I2C_SendData(I2C1, req);
	i2c1_status = BYTE_TRANSMITTING;
	/* Test on EV8 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED )) {
		if (millis() > resigmillis)
			return false;
 80007cc:	462e      	mov	r6, r5
 80007ce:	e000      	b.n	80007d2 <i2c_requestFrom+0x1ae>

	for (i = 1; i < lim; i++) {
		i2c1_status = RECEIVE_BYTE_READY;
		while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_RECEIVED )) {
			if (millis() > resigmillis)
				return false;
 80007d0:	463e      	mov	r6, r7
	I2C_AcknowledgeConfig(I2C1, ENABLE);
	i2c1_status = NOT_READY;
	i2c1_direction = NOT_DEFINED;

	return true;
}
 80007d2:	4630      	mov	r0, r6
 80007d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80007d8:	200009d0 	.word	0x200009d0
 80007dc:	200009d1 	.word	0x200009d1
 80007e0:	40005400 	.word	0x40005400
 80007e4:	00030001 	.word	0x00030001
 80007e8:	00070082 	.word	0x00070082
 80007ec:	00070084 	.word	0x00070084
 80007f0:	00030002 	.word	0x00030002
 80007f4:	00030040 	.word	0x00030040

080007f8 <i2c_send>:

boolean i2c_send(uint8_t addr, uint8_t * data, uint16_t length) {
return true;
}
 80007f8:	20ff      	movs	r0, #255	; 0xff
 80007fa:	4770      	bx	lr

080007fc <spi_begin>:
#include "spi.h"

//SPI_TypeDef * spix[] = { SPI1, SPI2, SPI3 };

void spi_begin(SPI_TypeDef * SPIx,/*SPIBus spibus,*/ GPIOPin sck, GPIOPin miso, GPIOPin mosi,
		GPIOPin nss) {
 80007fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000800:	4699      	mov	r9, r3
//	GPIOPin sck, miso, mosi, nss;

	/* PCLK2 = HCLK/2 */
	//RCC_PCLK2Config(RCC_HCLK_Div2);
//	SPIx = spix[spibus];
	if (SPIx == SPI1) {
 8000802:	4b57      	ldr	r3, [pc, #348]	; (8000960 <spi_begin+0x164>)
#include "spi.h"

//SPI_TypeDef * spix[] = { SPI1, SPI2, SPI3 };

void spi_begin(SPI_TypeDef * SPIx,/*SPIBus spibus,*/ GPIOPin sck, GPIOPin miso, GPIOPin mosi,
		GPIOPin nss) {
 8000804:	b08b      	sub	sp, #44	; 0x2c
//	GPIOPin sck, miso, mosi, nss;

	/* PCLK2 = HCLK/2 */
	//RCC_PCLK2Config(RCC_HCLK_Div2);
//	SPIx = spix[spibus];
	if (SPIx == SPI1) {
 8000806:	4298      	cmp	r0, r3
#include "spi.h"

//SPI_TypeDef * spix[] = { SPI1, SPI2, SPI3 };

void spi_begin(SPI_TypeDef * SPIx,/*SPIBus spibus,*/ GPIOPin sck, GPIOPin miso, GPIOPin mosi,
		GPIOPin nss) {
 8000808:	4682      	mov	sl, r0
 800080a:	460f      	mov	r7, r1
 800080c:	4690      	mov	r8, r2
 800080e:	f8bd b050 	ldrh.w	fp, [sp, #80]	; 0x50
//	GPIOPin sck, miso, mosi, nss;

	/* PCLK2 = HCLK/2 */
	//RCC_PCLK2Config(RCC_HCLK_Div2);
//	SPIx = spix[spibus];
	if (SPIx == SPI1) {
 8000812:	d105      	bne.n	8000820 <spi_begin+0x24>
//	case SPI1Bus:
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
 8000814:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000818:	2101      	movs	r1, #1
 800081a:	f001 f825 	bl	8001868 <RCC_APB2PeriphClockCmd>
 800081e:	e007      	b.n	8000830 <spi_begin+0x34>
//		 sck = PA5; // PB3
//		 miso = PA6; // PB4
//		 mosi = PA7; // PB5
//		 nss = PA4; // PA15
//		break;
	} else if ( SPIx == SPI2 ) {
 8000820:	4b50      	ldr	r3, [pc, #320]	; (8000964 <spi_begin+0x168>)
 8000822:	4298      	cmp	r0, r3
 8000824:	d106      	bne.n	8000834 <spi_begin+0x38>
//	case SPI2Bus:
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE);
 8000826:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800082a:	2101      	movs	r1, #1
 800082c:	f001 f810 	bl	8001850 <RCC_APB1PeriphClockCmd>
		af = GPIO_AF_SPI2;
 8000830:	2605      	movs	r6, #5
 8000832:	e005      	b.n	8000840 <spi_begin+0x44>
		// PB12, 13, 14, 15
//		break;
	} else {
//	case SPI3Bus:
//	default:
		RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 8000834:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000838:	2101      	movs	r1, #1
 800083a:	f001 f845 	bl	80018c8 <RCC_APB1PeriphResetCmd>
		af = GPIO_AF_SPI3;
 800083e:	2606      	movs	r6, #6
//		 mosi = PB5;
//		 nss = PA15; // PA4;
//		break;
	}

	GPIOMode(PinPort(sck), PinBit(sck), GPIO_Mode_AF, GPIO_Speed_25MHz,
 8000840:	4638      	mov	r0, r7
 8000842:	f7ff fd2b 	bl	800029c <PinPort>
 8000846:	4603      	mov	r3, r0
 8000848:	4638      	mov	r0, r7
 800084a:	9303      	str	r3, [sp, #12]
 800084c:	f7ff fd2e 	bl	80002ac <PinBit>
 8000850:	9b03      	ldr	r3, [sp, #12]
 8000852:	2401      	movs	r4, #1
 8000854:	2500      	movs	r5, #0
 8000856:	4601      	mov	r1, r0
 8000858:	2202      	movs	r2, #2
 800085a:	4618      	mov	r0, r3
 800085c:	4623      	mov	r3, r4
 800085e:	9500      	str	r5, [sp, #0]
 8000860:	9401      	str	r4, [sp, #4]
 8000862:	f7ff fd8f 	bl	8000384 <GPIOMode>
			GPIO_OType_PP, GPIO_PuPd_UP);
	GPIOMode(PinPort(miso), PinBit(miso), GPIO_Mode_AF, GPIO_Speed_25MHz,
 8000866:	4640      	mov	r0, r8
 8000868:	f7ff fd18 	bl	800029c <PinPort>
 800086c:	4603      	mov	r3, r0
 800086e:	4640      	mov	r0, r8
 8000870:	9303      	str	r3, [sp, #12]
 8000872:	f7ff fd1b 	bl	80002ac <PinBit>
 8000876:	9b03      	ldr	r3, [sp, #12]
 8000878:	9500      	str	r5, [sp, #0]
 800087a:	4601      	mov	r1, r0
 800087c:	2202      	movs	r2, #2
 800087e:	4618      	mov	r0, r3
 8000880:	4623      	mov	r3, r4
 8000882:	9401      	str	r4, [sp, #4]
 8000884:	f7ff fd7e 	bl	8000384 <GPIOMode>
			GPIO_OType_PP, GPIO_PuPd_UP);
	GPIOMode(PinPort(mosi), PinBit(mosi), GPIO_Mode_AF, GPIO_Speed_25MHz,
 8000888:	4648      	mov	r0, r9
 800088a:	f7ff fd07 	bl	800029c <PinPort>
 800088e:	4603      	mov	r3, r0
 8000890:	4648      	mov	r0, r9
 8000892:	9303      	str	r3, [sp, #12]
 8000894:	f7ff fd0a 	bl	80002ac <PinBit>
 8000898:	9b03      	ldr	r3, [sp, #12]
 800089a:	9500      	str	r5, [sp, #0]
 800089c:	4601      	mov	r1, r0
 800089e:	2202      	movs	r2, #2
 80008a0:	4618      	mov	r0, r3
 80008a2:	4623      	mov	r3, r4
 80008a4:	9401      	str	r4, [sp, #4]
 80008a6:	f7ff fd6d 	bl	8000384 <GPIOMode>
			GPIO_OType_PP, GPIO_PuPd_UP);
	GPIO_PinAFConfig(PinPort(sck), PinSource(sck), af);
 80008aa:	4638      	mov	r0, r7
 80008ac:	f7ff fcf6 	bl	800029c <PinPort>
 80008b0:	4603      	mov	r3, r0
 80008b2:	4638      	mov	r0, r7
 80008b4:	9303      	str	r3, [sp, #12]
 80008b6:	f7ff fd00 	bl	80002ba <PinSource>
 80008ba:	9b03      	ldr	r3, [sp, #12]
 80008bc:	4601      	mov	r1, r0
 80008be:	4632      	mov	r2, r6
 80008c0:	4618      	mov	r0, r3
 80008c2:	f000 fc79 	bl	80011b8 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(PinPort(miso), PinSource(miso), af);
 80008c6:	4640      	mov	r0, r8
 80008c8:	f7ff fce8 	bl	800029c <PinPort>
 80008cc:	4607      	mov	r7, r0
 80008ce:	4640      	mov	r0, r8
 80008d0:	f7ff fcf3 	bl	80002ba <PinSource>
 80008d4:	4632      	mov	r2, r6
 80008d6:	4601      	mov	r1, r0
 80008d8:	4638      	mov	r0, r7
 80008da:	f000 fc6d 	bl	80011b8 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(PinPort(mosi), PinSource(mosi), af);
 80008de:	4648      	mov	r0, r9
 80008e0:	f7ff fcdc 	bl	800029c <PinPort>
 80008e4:	4607      	mov	r7, r0
 80008e6:	4648      	mov	r0, r9
 80008e8:	f7ff fce7 	bl	80002ba <PinSource>
 80008ec:	4632      	mov	r2, r6
 80008ee:	4601      	mov	r1, r0
 80008f0:	4638      	mov	r0, r7
 80008f2:	f000 fc61 	bl	80011b8 <GPIO_PinAFConfig>
	// nSS by software
	GPIOMode(PinPort(nss), PinBit(nss), GPIO_Mode_OUT, GPIO_Speed_25MHz,
 80008f6:	4658      	mov	r0, fp
 80008f8:	f7ff fcd0 	bl	800029c <PinPort>
 80008fc:	4606      	mov	r6, r0
 80008fe:	4658      	mov	r0, fp
 8000900:	f7ff fcd4 	bl	80002ac <PinBit>
 8000904:	4622      	mov	r2, r4
 8000906:	4623      	mov	r3, r4
 8000908:	4601      	mov	r1, r0
 800090a:	4630      	mov	r0, r6
 800090c:	9500      	str	r5, [sp, #0]
 800090e:	9401      	str	r4, [sp, #4]
 8000910:	f7ff fd38 	bl	8000384 <GPIOMode>
			GPIO_OType_PP, GPIO_PuPd_UP);
	digitalWrite(nss, HIGH);
 8000914:	4658      	mov	r0, fp
 8000916:	4621      	mov	r1, r4
 8000918:	f7ff fcf8 	bl	800030c <digitalWrite>
	//GPIO_PinAFConfig(PinPort(nss), PinSource(nss), af);

	SPI_InitStruct.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
	SPI_InitStruct.SPI_Mode = SPI_Mode_Master;
 800091c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000920:	f8ad 3016 	strh.w	r3, [sp, #22]
	SPI_InitStruct.SPI_DataSize = SPI_DataSize_8b;
	SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;
	SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
	SPI_InitStruct.SPI_NSS = SPI_NSS_Soft;
 8000924:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000928:	f8ad 301e 	strh.w	r3, [sp, #30]
	SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_8;
	SPI_InitStruct.SPI_FirstBit = SPI_FirstBit_MSB;
	SPI_InitStruct.SPI_CRCPolynomial = SPI_CRC_Rx;

	SPI_Init(SPIx, &SPI_InitStruct);
 800092c:	4650      	mov	r0, sl
	SPI_InitStruct.SPI_Mode = SPI_Mode_Master;
	SPI_InitStruct.SPI_DataSize = SPI_DataSize_8b;
	SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;
	SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
	SPI_InitStruct.SPI_NSS = SPI_NSS_Soft;
	SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_8;
 800092e:	2310      	movs	r3, #16
	SPI_InitStruct.SPI_FirstBit = SPI_FirstBit_MSB;
	SPI_InitStruct.SPI_CRCPolynomial = SPI_CRC_Rx;

	SPI_Init(SPIx, &SPI_InitStruct);
 8000930:	a905      	add	r1, sp, #20
	GPIOMode(PinPort(nss), PinBit(nss), GPIO_Mode_OUT, GPIO_Speed_25MHz,
			GPIO_OType_PP, GPIO_PuPd_UP);
	digitalWrite(nss, HIGH);
	//GPIO_PinAFConfig(PinPort(nss), PinSource(nss), af);

	SPI_InitStruct.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8000932:	f8ad 5014 	strh.w	r5, [sp, #20]
	SPI_InitStruct.SPI_Mode = SPI_Mode_Master;
	SPI_InitStruct.SPI_DataSize = SPI_DataSize_8b;
 8000936:	f8ad 5018 	strh.w	r5, [sp, #24]
	SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;
 800093a:	f8ad 501a 	strh.w	r5, [sp, #26]
	SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
 800093e:	f8ad 501c 	strh.w	r5, [sp, #28]
	SPI_InitStruct.SPI_NSS = SPI_NSS_Soft;
	SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_8;
 8000942:	f8ad 3020 	strh.w	r3, [sp, #32]
	SPI_InitStruct.SPI_FirstBit = SPI_FirstBit_MSB;
 8000946:	f8ad 5022 	strh.w	r5, [sp, #34]	; 0x22
	SPI_InitStruct.SPI_CRCPolynomial = SPI_CRC_Rx;
 800094a:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24

	SPI_Init(SPIx, &SPI_InitStruct);
 800094e:	f001 f88f 	bl	8001a70 <SPI_Init>

	SPI_Cmd(SPIx, ENABLE);
 8000952:	4650      	mov	r0, sl
 8000954:	4621      	mov	r1, r4
 8000956:	f001 f926 	bl	8001ba6 <SPI_Cmd>
	 *              - Enable or disable the SS output using the SPI_SSOutputCmd() function
	 *
	 *          10. To use the CRC Hardware calculation feature refer to the Peripheral
	 *              CRC hardware Calculation subsection.
	 */
}
 800095a:	b00b      	add	sp, #44	; 0x2c
 800095c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000960:	40013000 	.word	0x40013000
 8000964:	40003800 	.word	0x40003800

08000968 <spi_transfer>:

void spi_transfer(SPI_TypeDef * SPIx, /*SPIBus spibus,*/ uint8_t * data, uint16_t nbytes) {
 8000968:	b570      	push	{r4, r5, r6, lr}
 800096a:	4604      	mov	r4, r0
 800096c:	4616      	mov	r6, r2
 800096e:	460d      	mov	r5, r1
//	SPI_TypeDef * SPIx = spix[spibus];
	uint8_t rcvdata;

	for (; nbytes; nbytes--) {
 8000970:	e017      	b.n	80009a2 <spi_transfer+0x3a>
		/* Wait for SPIx Tx buffer empty */
		while (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_TXE ) == RESET)
 8000972:	4620      	mov	r0, r4
 8000974:	2102      	movs	r1, #2
 8000976:	f001 f9cd 	bl	8001d14 <SPI_I2S_GetFlagStatus>
 800097a:	2800      	cmp	r0, #0
 800097c:	d0f9      	beq.n	8000972 <spi_transfer+0xa>
			;
		SPI_I2S_SendData(SPIx, (uint16_t) *data);
 800097e:	4620      	mov	r0, r4
 8000980:	f815 1b01 	ldrb.w	r1, [r5], #1
 8000984:	f001 f98f 	bl	8001ca6 <SPI_I2S_SendData>
		/* Wait for SPIx data reception */
		while (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_RXNE ) == RESET)
 8000988:	4620      	mov	r0, r4
 800098a:	2101      	movs	r1, #1
 800098c:	f001 f9c2 	bl	8001d14 <SPI_I2S_GetFlagStatus>
 8000990:	2800      	cmp	r0, #0
 8000992:	d0f9      	beq.n	8000988 <spi_transfer+0x20>
			;
		/* Read SPIy received data */
		rcvdata = SPI_I2S_ReceiveData(SPIx);
 8000994:	4620      	mov	r0, r4
 8000996:	f001 f983 	bl	8001ca0 <SPI_I2S_ReceiveData>

void spi_transfer(SPI_TypeDef * SPIx, /*SPIBus spibus,*/ uint8_t * data, uint16_t nbytes) {
//	SPI_TypeDef * SPIx = spix[spibus];
	uint8_t rcvdata;

	for (; nbytes; nbytes--) {
 800099a:	3e01      	subs	r6, #1
		SPI_I2S_SendData(SPIx, (uint16_t) *data);
		/* Wait for SPIx data reception */
		while (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_RXNE ) == RESET)
			;
		/* Read SPIy received data */
		rcvdata = SPI_I2S_ReceiveData(SPIx);
 800099c:	f805 0c01 	strb.w	r0, [r5, #-1]

void spi_transfer(SPI_TypeDef * SPIx, /*SPIBus spibus,*/ uint8_t * data, uint16_t nbytes) {
//	SPI_TypeDef * SPIx = spix[spibus];
	uint8_t rcvdata;

	for (; nbytes; nbytes--) {
 80009a0:	b2b6      	uxth	r6, r6
 80009a2:	2e00      	cmp	r6, #0
 80009a4:	d1e5      	bne.n	8000972 <spi_transfer+0xa>
		/* Read SPIy received data */
		rcvdata = SPI_I2S_ReceiveData(SPIx);
		*data = rcvdata;
		data++;
	}
}
 80009a6:	bd70      	pop	{r4, r5, r6, pc}

080009a8 <SysTick_Handler>:
#include "systick.h"

volatile uint32_t _systick_counter;

void SysTick_Handler(void) {
	_systick_counter++; /* increment timeTicks counter */
 80009a8:	4b02      	ldr	r3, [pc, #8]	; (80009b4 <SysTick_Handler+0xc>)
 80009aa:	681a      	ldr	r2, [r3, #0]
 80009ac:	3201      	adds	r2, #1
 80009ae:	601a      	str	r2, [r3, #0]
}
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	200009d4 	.word	0x200009d4

080009b8 <SysTick_delay>:

void SysTick_delay(const uint32_t dlyTicks) {
	uint32_t currTicks = _systick_counter;
 80009b8:	4b03      	ldr	r3, [pc, #12]	; (80009c8 <SysTick_delay+0x10>)
 80009ba:	681a      	ldr	r2, [r3, #0]

	while ((_systick_counter - currTicks) < dlyTicks)
 80009bc:	6819      	ldr	r1, [r3, #0]
 80009be:	1a89      	subs	r1, r1, r2
 80009c0:	4281      	cmp	r1, r0
 80009c2:	d3fb      	bcc.n	80009bc <SysTick_delay+0x4>
		;
}
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	200009d4 	.word	0x200009d4

080009cc <SysTick_Start>:

void SysTick_Start(void) {
 80009cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	RCC_ClocksTypeDef RCC_Clocks;
	  /* SysTick end of count event each 1ms */
	  RCC_GetClocksFreq(&RCC_Clocks);
 80009ce:	4668      	mov	r0, sp
 80009d0:	f000 feaa 	bl	8001728 <RCC_GetClocksFreq>
	  SysTick_Config(RCC_Clocks.HCLK_Frequency / 1000);
 80009d4:	9a01      	ldr	r2, [sp, #4]
 80009d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009da:	fbb2 f2f3 	udiv	r2, r2, r3
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 80009de:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <SysTick_Start+0x2c>)
 80009e0:	3a01      	subs	r2, #1
 80009e2:	605a      	str	r2, [r3, #4]
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80009e4:	4a05      	ldr	r2, [pc, #20]	; (80009fc <SysTick_Start+0x30>)
 80009e6:	21f0      	movs	r1, #240	; 0xf0
 80009e8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80009ec:	2200      	movs	r2, #0
 80009ee:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009f0:	2207      	movs	r2, #7
 80009f2:	601a      	str	r2, [r3, #0]
		// Handle Error
		while (1)
			;
	}
*/
}
 80009f4:	b005      	add	sp, #20
 80009f6:	bd00      	pop	{pc}
 80009f8:	e000e010 	.word	0xe000e010
 80009fc:	e000ed00 	.word	0xe000ed00

08000a00 <SysTick_count>:

uint32_t SysTick_count() {
	return _systick_counter;
 8000a00:	4b01      	ldr	r3, [pc, #4]	; (8000a08 <SysTick_count+0x8>)
 8000a02:	6818      	ldr	r0, [r3, #0]
}
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	200009d4 	.word	0x200009d4

08000a0c <buffer_clear>:

Serial Serial1, Serial2, Serial3, Serial4, Serial5, Serial6;
USARTRing rxring[6], txring[6];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	f8a0 3100 	strh.w	r3, [r0, #256]	; 0x100
	r->tail = 0;
 8000a12:	f8a0 3102 	strh.w	r3, [r0, #258]	; 0x102
	r->count = 0;
 8000a16:	f8a0 3104 	strh.w	r3, [r0, #260]	; 0x104
}
 8000a1a:	4770      	bx	lr

08000a1c <buffer_count>:

uint16_t buffer_count(USARTRing * r) {
	return r->count;
}
 8000a1c:	f8b0 0104 	ldrh.w	r0, [r0, #260]	; 0x104
 8000a20:	4770      	bx	lr

08000a22 <buffer_is_full>:

uint8_t buffer_is_full(USARTRing * r) {
	if ((r->head == r->tail) && (r->count > 0)) {
 8000a22:	f9b0 2100 	ldrsh.w	r2, [r0, #256]	; 0x100
 8000a26:	f9b0 3102 	ldrsh.w	r3, [r0, #258]	; 0x102
 8000a2a:	429a      	cmp	r2, r3
 8000a2c:	d105      	bne.n	8000a3a <buffer_is_full+0x18>

uint16_t buffer_count(USARTRing * r) {
	return r->count;
}

uint8_t buffer_is_full(USARTRing * r) {
 8000a2e:	f8b0 0104 	ldrh.w	r0, [r0, #260]	; 0x104
	if ((r->head == r->tail) && (r->count > 0)) {
		return 1;
 8000a32:	3000      	adds	r0, #0
 8000a34:	bf18      	it	ne
 8000a36:	2001      	movne	r0, #1
 8000a38:	4770      	bx	lr
	}
	return 0;
 8000a3a:	2000      	movs	r0, #0
}
 8000a3c:	4770      	bx	lr

08000a3e <buffer_enque>:

uint16_t buffer_enque(USARTRing * r, uint16_t w) {
 8000a3e:	b538      	push	{r3, r4, r5, lr}
 8000a40:	4604      	mov	r4, r0
 8000a42:	460d      	mov	r5, r1
	if (buffer_is_full(r))
 8000a44:	f7ff ffed 	bl	8000a22 <buffer_is_full>
 8000a48:	b9b0      	cbnz	r0, 8000a78 <buffer_enque+0x3a>
		return 0xffff;
	r->buf[r->head++] = w;
 8000a4a:	f8b4 3100 	ldrh.w	r3, [r4, #256]	; 0x100
 8000a4e:	b21a      	sxth	r2, r3
 8000a50:	3301      	adds	r3, #1
 8000a52:	f824 5012 	strh.w	r5, [r4, r2, lsl #1]
	r->count++;
 8000a56:	f8b4 2104 	ldrh.w	r2, [r4, #260]	; 0x104
 8000a5a:	3201      	adds	r2, #1
 8000a5c:	f8a4 2104 	strh.w	r2, [r4, #260]	; 0x104
	r->head %= USART_BUFFER_SIZE;
 8000a60:	b21a      	sxth	r2, r3
 8000a62:	4b07      	ldr	r3, [pc, #28]	; (8000a80 <buffer_enque+0x42>)
 8000a64:	4013      	ands	r3, r2
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	da03      	bge.n	8000a72 <buffer_enque+0x34>
 8000a6a:	3b01      	subs	r3, #1
 8000a6c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000a70:	3301      	adds	r3, #1
 8000a72:	f8a4 3100 	strh.w	r3, [r4, #256]	; 0x100
 8000a76:	e001      	b.n	8000a7c <buffer_enque+0x3e>
	return 0;
}

uint16_t buffer_enque(USARTRing * r, uint16_t w) {
	if (buffer_is_full(r))
		return 0xffff;
 8000a78:	f64f 75ff 	movw	r5, #65535	; 0xffff
	r->buf[r->head++] = w;
	r->count++;
	r->head %= USART_BUFFER_SIZE;
	return w;
}
 8000a7c:	4628      	mov	r0, r5
 8000a7e:	bd38      	pop	{r3, r4, r5, pc}
 8000a80:	8000007f 	.word	0x8000007f

08000a84 <buffer_deque>:
	r->tail = 0;
	r->count = 0;
}

uint16_t buffer_count(USARTRing * r) {
	return r->count;
 8000a84:	f8b0 1104 	ldrh.w	r1, [r0, #260]	; 0x104
	r->count++;
	r->head %= USART_BUFFER_SIZE;
	return w;
}

uint16_t buffer_deque(USARTRing * r) {
 8000a88:	4602      	mov	r2, r0
	uint16_t w;
	if (buffer_count(r) == 0)
 8000a8a:	b1a1      	cbz	r1, 8000ab6 <buffer_deque+0x32>
		return 0xffff;
	w = r->buf[r->tail++];
 8000a8c:	f8b0 3102 	ldrh.w	r3, [r0, #258]	; 0x102
	r->count--;
 8000a90:	3901      	subs	r1, #1

uint16_t buffer_deque(USARTRing * r) {
	uint16_t w;
	if (buffer_count(r) == 0)
		return 0xffff;
	w = r->buf[r->tail++];
 8000a92:	b218      	sxth	r0, r3
 8000a94:	3301      	adds	r3, #1
	r->count--;
 8000a96:	f8a2 1104 	strh.w	r1, [r2, #260]	; 0x104
	r->tail %= USART_BUFFER_SIZE;
 8000a9a:	b219      	sxth	r1, r3
 8000a9c:	4b07      	ldr	r3, [pc, #28]	; (8000abc <buffer_deque+0x38>)

uint16_t buffer_deque(USARTRing * r) {
	uint16_t w;
	if (buffer_count(r) == 0)
		return 0xffff;
	w = r->buf[r->tail++];
 8000a9e:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
	r->count--;
	r->tail %= USART_BUFFER_SIZE;
 8000aa2:	400b      	ands	r3, r1
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	da03      	bge.n	8000ab0 <buffer_deque+0x2c>
 8000aa8:	3b01      	subs	r3, #1
 8000aaa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000aae:	3301      	adds	r3, #1
 8000ab0:	f8a2 3102 	strh.w	r3, [r2, #258]	; 0x102
 8000ab4:	4770      	bx	lr
}

uint16_t buffer_deque(USARTRing * r) {
	uint16_t w;
	if (buffer_count(r) == 0)
		return 0xffff;
 8000ab6:	f64f 70ff 	movw	r0, #65535	; 0xffff
	w = r->buf[r->tail++];
	r->count--;
	r->tail %= USART_BUFFER_SIZE;
	return w;
}
 8000aba:	4770      	bx	lr
 8000abc:	8000007f 	.word	0x8000007f

08000ac0 <buffer_peek>:

uint16_t buffer_peek(USARTRing * r) {
	if (buffer_count(r) == 0)
 8000ac0:	f8b0 3104 	ldrh.w	r3, [r0, #260]	; 0x104
 8000ac4:	b123      	cbz	r3, 8000ad0 <buffer_peek+0x10>
		return 0xffff;
	return r->buf[r->tail];
 8000ac6:	f9b0 3102 	ldrsh.w	r3, [r0, #258]	; 0x102
 8000aca:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8000ace:	4770      	bx	lr
	return w;
}

uint16_t buffer_peek(USARTRing * r) {
	if (buffer_count(r) == 0)
		return 0xffff;
 8000ad0:	f64f 70ff 	movw	r0, #65535	; 0xffff
	return r->buf[r->tail];
}
 8000ad4:	4770      	bx	lr

08000ad6 <usart_begin>:

void usart_begin(Serial * usx, GPIOPin rx, GPIOPin tx, uint32_t baud) {
 8000ad6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ada:	469a      	mov	sl, r3
	NVIC_InitTypeDef NVIC_InitStructure; // this is used to configure the NVIC (nested vector interrupt controller)
	//
	uint8_t af = GPIO_AF_USART1;
	IRQn_Type irq = USART1_IRQn;

	if (usx == &Serial1) {
 8000adc:	4b70      	ldr	r3, [pc, #448]	; (8000ca0 <usart_begin+0x1ca>)
 8000ade:	4298      	cmp	r0, r3
	if (buffer_count(r) == 0)
		return 0xffff;
	return r->buf[r->tail];
}

void usart_begin(Serial * usx, GPIOPin rx, GPIOPin tx, uint32_t baud) {
 8000ae0:	b089      	sub	sp, #36	; 0x24
 8000ae2:	4604      	mov	r4, r0
 8000ae4:	4688      	mov	r8, r1
 8000ae6:	4691      	mov	r9, r2
	NVIC_InitTypeDef NVIC_InitStructure; // this is used to configure the NVIC (nested vector interrupt controller)
	//
	uint8_t af = GPIO_AF_USART1;
	IRQn_Type irq = USART1_IRQn;

	if (usx == &Serial1) {
 8000ae8:	d10d      	bne.n	8000b06 <usart_begin+0x30>
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 8000aea:	2010      	movs	r0, #16
 8000aec:	2101      	movs	r1, #1
 8000aee:	f000 febb 	bl	8001868 <RCC_APB2PeriphClockCmd>
		af = GPIO_AF_USART1;
		irq = USART1_IRQn;
		usx->usid = USART1Serial;
 8000af2:	2300      	movs	r3, #0
 8000af4:	7023      	strb	r3, [r4, #0]
		usx->USARTx = USART1;
 8000af6:	4b6b      	ldr	r3, [pc, #428]	; (8000ca4 <usart_begin+0x1ce>)
 8000af8:	6063      	str	r3, [r4, #4]
		usx->rxring = &rxring[USART1Serial];
 8000afa:	4b6b      	ldr	r3, [pc, #428]	; (8000ca8 <usart_begin+0x1d2>)
 8000afc:	60a3      	str	r3, [r4, #8]
		usx->txring = &txring[USART1Serial];
 8000afe:	4b6b      	ldr	r3, [pc, #428]	; (8000cac <usart_begin+0x1d6>)
	IRQn_Type irq = USART1_IRQn;

	if (usx == &Serial1) {
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
		af = GPIO_AF_USART1;
		irq = USART1_IRQn;
 8000b00:	2725      	movs	r7, #37	; 0x25
		usx->usid = USART1Serial;
		usx->USARTx = USART1;
		usx->rxring = &rxring[USART1Serial];
		usx->txring = &txring[USART1Serial];
 8000b02:	60e3      	str	r3, [r4, #12]
 8000b04:	e010      	b.n	8000b28 <usart_begin+0x52>
	} else if (usx == &Serial2) {
 8000b06:	4b6a      	ldr	r3, [pc, #424]	; (8000cb0 <usart_begin+0x1da>)
 8000b08:	4298      	cmp	r0, r3
 8000b0a:	d10f      	bne.n	8000b2c <usart_begin+0x56>
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 8000b0c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000b10:	2101      	movs	r1, #1
 8000b12:	f000 fe9d 	bl	8001850 <RCC_APB1PeriphClockCmd>
		af = GPIO_AF_USART2;
		irq = USART2_IRQn;
		usx->usid = USART2Serial;
 8000b16:	2301      	movs	r3, #1
 8000b18:	7023      	strb	r3, [r4, #0]
		usx->USARTx = USART2;
 8000b1a:	4b66      	ldr	r3, [pc, #408]	; (8000cb4 <usart_begin+0x1de>)
 8000b1c:	6063      	str	r3, [r4, #4]
		usx->rxring = &rxring[USART2Serial];
 8000b1e:	4b66      	ldr	r3, [pc, #408]	; (8000cb8 <usart_begin+0x1e2>)
 8000b20:	60a3      	str	r3, [r4, #8]
		usx->txring = &txring[USART2Serial];
 8000b22:	4b66      	ldr	r3, [pc, #408]	; (8000cbc <usart_begin+0x1e6>)
		usx->rxring = &rxring[USART1Serial];
		usx->txring = &txring[USART1Serial];
	} else if (usx == &Serial2) {
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
		af = GPIO_AF_USART2;
		irq = USART2_IRQn;
 8000b24:	2726      	movs	r7, #38	; 0x26
		usx->usid = USART2Serial;
		usx->USARTx = USART2;
		usx->rxring = &rxring[USART2Serial];
		usx->txring = &txring[USART2Serial];
 8000b26:	60e3      	str	r3, [r4, #12]
		usx->USARTx = USART1;
		usx->rxring = &rxring[USART1Serial];
		usx->txring = &txring[USART1Serial];
	} else if (usx == &Serial2) {
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
		af = GPIO_AF_USART2;
 8000b28:	2607      	movs	r6, #7
 8000b2a:	e043      	b.n	8000bb4 <usart_begin+0xde>
		irq = USART2_IRQn;
		usx->usid = USART2Serial;
		usx->USARTx = USART2;
		usx->rxring = &rxring[USART2Serial];
		usx->txring = &txring[USART2Serial];
	} else if (usx == &Serial3) {
 8000b2c:	4b64      	ldr	r3, [pc, #400]	; (8000cc0 <usart_begin+0x1ea>)
 8000b2e:	4298      	cmp	r0, r3
 8000b30:	d10e      	bne.n	8000b50 <usart_begin+0x7a>
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
 8000b32:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000b36:	2101      	movs	r1, #1
 8000b38:	f000 fe8a 	bl	8001850 <RCC_APB1PeriphClockCmd>
		af = GPIO_AF_USART3;
		irq = USART3_IRQn;
		usx->usid = USART3Serial;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	7023      	strb	r3, [r4, #0]
		usx->USARTx = USART3;
 8000b40:	4b60      	ldr	r3, [pc, #384]	; (8000cc4 <usart_begin+0x1ee>)
 8000b42:	6063      	str	r3, [r4, #4]
		usx->rxring = &rxring[USART3Serial];
 8000b44:	4b60      	ldr	r3, [pc, #384]	; (8000cc8 <usart_begin+0x1f2>)
 8000b46:	60a3      	str	r3, [r4, #8]
		usx->txring = &txring[USART3Serial];
 8000b48:	4b60      	ldr	r3, [pc, #384]	; (8000ccc <usart_begin+0x1f6>)
		usx->rxring = &rxring[USART2Serial];
		usx->txring = &txring[USART2Serial];
	} else if (usx == &Serial3) {
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
		af = GPIO_AF_USART3;
		irq = USART3_IRQn;
 8000b4a:	2727      	movs	r7, #39	; 0x27
		usx->usid = USART3Serial;
		usx->USARTx = USART3;
		usx->rxring = &rxring[USART3Serial];
		usx->txring = &txring[USART3Serial];
 8000b4c:	60e3      	str	r3, [r4, #12]
 8000b4e:	e7eb      	b.n	8000b28 <usart_begin+0x52>
	} else if (usx == &Serial4) {
 8000b50:	4b5f      	ldr	r3, [pc, #380]	; (8000cd0 <usart_begin+0x1fa>)
 8000b52:	4298      	cmp	r0, r3
 8000b54:	d10e      	bne.n	8000b74 <usart_begin+0x9e>
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART4, ENABLE);
 8000b56:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000b5a:	2101      	movs	r1, #1
 8000b5c:	f000 fe78 	bl	8001850 <RCC_APB1PeriphClockCmd>
		af = GPIO_AF_UART4;
		irq = UART4_IRQn;
		usx->usid = UART4Serial;
 8000b60:	2303      	movs	r3, #3
 8000b62:	7023      	strb	r3, [r4, #0]
		usx->USARTx = UART4;
 8000b64:	4b5b      	ldr	r3, [pc, #364]	; (8000cd4 <usart_begin+0x1fe>)
 8000b66:	6063      	str	r3, [r4, #4]
		usx->rxring = &rxring[UART4Serial];
 8000b68:	4b5b      	ldr	r3, [pc, #364]	; (8000cd8 <usart_begin+0x202>)
 8000b6a:	60a3      	str	r3, [r4, #8]
		usx->txring = &txring[UART4Serial];
 8000b6c:	4b5b      	ldr	r3, [pc, #364]	; (8000cdc <usart_begin+0x206>)
		usx->rxring = &rxring[USART3Serial];
		usx->txring = &txring[USART3Serial];
	} else if (usx == &Serial4) {
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART4, ENABLE);
		af = GPIO_AF_UART4;
		irq = UART4_IRQn;
 8000b6e:	2734      	movs	r7, #52	; 0x34
		usx->usid = UART4Serial;
		usx->USARTx = UART4;
		usx->rxring = &rxring[UART4Serial];
		usx->txring = &txring[UART4Serial];
 8000b70:	60e3      	str	r3, [r4, #12]
 8000b72:	e01e      	b.n	8000bb2 <usart_begin+0xdc>
	} else if (usx == &Serial5) {
 8000b74:	4b5a      	ldr	r3, [pc, #360]	; (8000ce0 <usart_begin+0x20a>)
 8000b76:	4298      	cmp	r0, r3
 8000b78:	d10e      	bne.n	8000b98 <usart_begin+0xc2>
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART5, ENABLE);
 8000b7a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000b7e:	2101      	movs	r1, #1
 8000b80:	f000 fe66 	bl	8001850 <RCC_APB1PeriphClockCmd>
		af = GPIO_AF_UART5;
		irq = UART5_IRQn;
		usx->usid = UART5Serial;
 8000b84:	2304      	movs	r3, #4
 8000b86:	7023      	strb	r3, [r4, #0]
		usx->USARTx = UART5;
 8000b88:	4b56      	ldr	r3, [pc, #344]	; (8000ce4 <usart_begin+0x20e>)
 8000b8a:	6063      	str	r3, [r4, #4]
		usx->rxring = &rxring[UART5Serial];
 8000b8c:	4b56      	ldr	r3, [pc, #344]	; (8000ce8 <usart_begin+0x212>)
 8000b8e:	60a3      	str	r3, [r4, #8]
		usx->txring = &txring[UART5Serial];
 8000b90:	4b56      	ldr	r3, [pc, #344]	; (8000cec <usart_begin+0x216>)
		usx->rxring = &rxring[UART4Serial];
		usx->txring = &txring[UART4Serial];
	} else if (usx == &Serial5) {
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART5, ENABLE);
		af = GPIO_AF_UART5;
		irq = UART5_IRQn;
 8000b92:	2735      	movs	r7, #53	; 0x35
		usx->usid = UART5Serial;
		usx->USARTx = UART5;
		usx->rxring = &rxring[UART5Serial];
		usx->txring = &txring[UART5Serial];
 8000b94:	60e3      	str	r3, [r4, #12]
 8000b96:	e00c      	b.n	8000bb2 <usart_begin+0xdc>
	} else { // Serial6
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART6, ENABLE);
 8000b98:	2020      	movs	r0, #32
 8000b9a:	2101      	movs	r1, #1
 8000b9c:	f000 fe64 	bl	8001868 <RCC_APB2PeriphClockCmd>
		af = GPIO_AF_USART6;
		irq = USART6_IRQn;
		usx->usid = USART6Serial;
 8000ba0:	2305      	movs	r3, #5
 8000ba2:	7023      	strb	r3, [r4, #0]
		usx->USARTx = USART6;
 8000ba4:	4b52      	ldr	r3, [pc, #328]	; (8000cf0 <usart_begin+0x21a>)
 8000ba6:	6063      	str	r3, [r4, #4]
		usx->rxring = &rxring[USART6Serial];
 8000ba8:	4b52      	ldr	r3, [pc, #328]	; (8000cf4 <usart_begin+0x21e>)
 8000baa:	60a3      	str	r3, [r4, #8]
		usx->txring = &txring[USART6Serial];
 8000bac:	4b52      	ldr	r3, [pc, #328]	; (8000cf8 <usart_begin+0x222>)
		usx->rxring = &rxring[UART5Serial];
		usx->txring = &txring[UART5Serial];
	} else { // Serial6
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART6, ENABLE);
		af = GPIO_AF_USART6;
		irq = USART6_IRQn;
 8000bae:	2747      	movs	r7, #71	; 0x47
		usx->usid = USART6Serial;
		usx->USARTx = USART6;
		usx->rxring = &rxring[USART6Serial];
		usx->txring = &txring[USART6Serial];
 8000bb0:	60e3      	str	r3, [r4, #12]
		usx->USARTx = UART5;
		usx->rxring = &rxring[UART5Serial];
		usx->txring = &txring[UART5Serial];
	} else { // Serial6
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART6, ENABLE);
		af = GPIO_AF_USART6;
 8000bb2:	2608      	movs	r6, #8
		usx->USARTx = USART6;
		usx->rxring = &rxring[USART6Serial];
		usx->txring = &txring[USART6Serial];
	}

	GPIOMode(PinPort(rx), PinBit(rx), GPIO_Mode_AF, GPIO_Speed_50MHz,
 8000bb4:	4640      	mov	r0, r8
 8000bb6:	f7ff fb71 	bl	800029c <PinPort>
 8000bba:	4683      	mov	fp, r0
 8000bbc:	4640      	mov	r0, r8
 8000bbe:	f7ff fb75 	bl	80002ac <PinBit>
 8000bc2:	2202      	movs	r2, #2
 8000bc4:	2500      	movs	r5, #0
 8000bc6:	4601      	mov	r1, r0
 8000bc8:	4613      	mov	r3, r2
 8000bca:	4658      	mov	r0, fp
 8000bcc:	9500      	str	r5, [sp, #0]
 8000bce:	9501      	str	r5, [sp, #4]
 8000bd0:	f7ff fbd8 	bl	8000384 <GPIOMode>
			GPIO_OType_PP, GPIO_PuPd_NOPULL);
	GPIOMode(PinPort(tx), PinBit(tx), GPIO_Mode_AF, GPIO_Speed_50MHz,
 8000bd4:	4648      	mov	r0, r9
 8000bd6:	f7ff fb61 	bl	800029c <PinPort>
 8000bda:	4683      	mov	fp, r0
 8000bdc:	4648      	mov	r0, r9
 8000bde:	f7ff fb65 	bl	80002ac <PinBit>
 8000be2:	2202      	movs	r2, #2
 8000be4:	4613      	mov	r3, r2
 8000be6:	4601      	mov	r1, r0
 8000be8:	4658      	mov	r0, fp
 8000bea:	9500      	str	r5, [sp, #0]
 8000bec:	9501      	str	r5, [sp, #4]
 8000bee:	f7ff fbc9 	bl	8000384 <GPIOMode>
			GPIO_OType_PP, GPIO_PuPd_NOPULL);

	GPIO_PinAFConfig(PinPort(rx), PinSource(rx), af);
 8000bf2:	4640      	mov	r0, r8
 8000bf4:	f7ff fb52 	bl	800029c <PinPort>
 8000bf8:	4683      	mov	fp, r0
 8000bfa:	4640      	mov	r0, r8
 8000bfc:	f7ff fb5d 	bl	80002ba <PinSource>
 8000c00:	4632      	mov	r2, r6
 8000c02:	4601      	mov	r1, r0
 8000c04:	4658      	mov	r0, fp
 8000c06:	f000 fad7 	bl	80011b8 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(PinPort(tx), PinSource(tx), af);
 8000c0a:	4648      	mov	r0, r9
 8000c0c:	f7ff fb46 	bl	800029c <PinPort>
 8000c10:	4680      	mov	r8, r0
 8000c12:	4648      	mov	r0, r9
 8000c14:	f7ff fb51 	bl	80002ba <PinSource>
 8000c18:	4632      	mov	r2, r6
 8000c1a:	4601      	mov	r1, r0
 8000c1c:	4640      	mov	r0, r8
 8000c1e:	f000 facb 	bl	80011b8 <GPIO_PinAFConfig>
	USART_InitStruct.USART_BaudRate = baud;	// the baudrate is set to the value we passed into this init function
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
	USART_InitStruct.USART_StopBits = USART_StopBits_1;	// we want 1 stop bit (standard)
	USART_InitStruct.USART_Parity = USART_Parity_No;// we don't want a parity bit (standard)
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver
 8000c22:	230c      	movs	r3, #12

	USART_Init(usx->USARTx, &USART_InitStruct); // again all the properties are passed to the USART_Init function which takes care of all the bit setting
 8000c24:	eb0d 0103 	add.w	r1, sp, r3
 8000c28:	6860      	ldr	r0, [r4, #4]
	USART_InitStruct.USART_BaudRate = baud;	// the baudrate is set to the value we passed into this init function
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
	USART_InitStruct.USART_StopBits = USART_StopBits_1;	// we want 1 stop bit (standard)
	USART_InitStruct.USART_Parity = USART_Parity_No;// we don't want a parity bit (standard)
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver
 8000c2a:	f8ad 3016 	strh.w	r3, [sp, #22]
			GPIO_OType_PP, GPIO_PuPd_NOPULL);

	GPIO_PinAFConfig(PinPort(rx), PinSource(rx), af);
	GPIO_PinAFConfig(PinPort(tx), PinSource(tx), af);

	USART_InitStruct.USART_BaudRate = baud;	// the baudrate is set to the value we passed into this init function
 8000c2e:	f8cd a00c 	str.w	sl, [sp, #12]
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
 8000c32:	f8ad 5010 	strh.w	r5, [sp, #16]
	USART_InitStruct.USART_StopBits = USART_StopBits_1;	// we want 1 stop bit (standard)
 8000c36:	f8ad 5012 	strh.w	r5, [sp, #18]
	USART_InitStruct.USART_Parity = USART_Parity_No;// we don't want a parity bit (standard)
 8000c3a:	f8ad 5014 	strh.w	r5, [sp, #20]
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
 8000c3e:	f8ad 5018 	strh.w	r5, [sp, #24]
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver

	USART_Init(usx->USARTx, &USART_InitStruct); // again all the properties are passed to the USART_Init function which takes care of all the bit setting
 8000c42:	f001 fea7 	bl	8002994 <USART_Init>

	USART_ITConfig(usx->USARTx, USART_IT_RXNE, ENABLE); // enable the USART3 receive interrupt
 8000c46:	6860      	ldr	r0, [r4, #4]
 8000c48:	2201      	movs	r2, #1
 8000c4a:	f240 5125 	movw	r1, #1317	; 0x525
 8000c4e:	f001 ffdf 	bl	8002c10 <USART_ITConfig>
	USART_ITConfig(usx->USARTx, USART_IT_TXE, DISABLE);
 8000c52:	6860      	ldr	r0, [r4, #4]
 8000c54:	f240 7127 	movw	r1, #1831	; 0x727
 8000c58:	462a      	mov	r2, r5
 8000c5a:	f001 ffd9 	bl	8002c10 <USART_ITConfig>

	NVIC_InitStructure.NVIC_IRQChannel = irq;
	// we want to configure the USART3 interrupts
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0; // this sets the priority group of the USART3 interrupts
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0; // this sets the subpriority inside the group
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;	// the USART3 interrupts are globally enabled
 8000c5e:	2601      	movs	r6, #1
	NVIC_Init(&NVIC_InitStructure);	// the properties are passed to the NVIC_Init function which takes care of the low level stuff
 8000c60:	a807      	add	r0, sp, #28
	USART_Init(usx->USARTx, &USART_InitStruct); // again all the properties are passed to the USART_Init function which takes care of all the bit setting

	USART_ITConfig(usx->USARTx, USART_IT_RXNE, ENABLE); // enable the USART3 receive interrupt
	USART_ITConfig(usx->USARTx, USART_IT_TXE, DISABLE);

	NVIC_InitStructure.NVIC_IRQChannel = irq;
 8000c62:	f88d 701c 	strb.w	r7, [sp, #28]
	// we want to configure the USART3 interrupts
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0; // this sets the priority group of the USART3 interrupts
 8000c66:	f88d 501d 	strb.w	r5, [sp, #29]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0; // this sets the subpriority inside the group
 8000c6a:	f88d 501e 	strb.w	r5, [sp, #30]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;	// the USART3 interrupts are globally enabled
 8000c6e:	f88d 601f 	strb.w	r6, [sp, #31]
	NVIC_Init(&NVIC_InitStructure);	// the properties are passed to the NVIC_Init function which takes care of the low level stuff
 8000c72:	f000 f95d 	bl	8000f30 <NVIC_Init>
	//
	buffer_clear(usx->rxring); //&rxring[usx->usid]);
 8000c76:	68a3      	ldr	r3, [r4, #8]
	buffer_clear(usx->txring); //&txring[usx->usid]);
	// finally this enables the complete USART3 peripheral
	USART_Cmd(usx->USARTx, ENABLE);
 8000c78:	6860      	ldr	r0, [r4, #4]

Serial Serial1, Serial2, Serial3, Serial4, Serial5, Serial6;
USARTRing rxring[6], txring[6];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 8000c7a:	f8a3 5100 	strh.w	r5, [r3, #256]	; 0x100
	r->tail = 0;
 8000c7e:	f8a3 5102 	strh.w	r5, [r3, #258]	; 0x102
	r->count = 0;
 8000c82:	f8a3 5104 	strh.w	r5, [r3, #260]	; 0x104
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0; // this sets the subpriority inside the group
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;	// the USART3 interrupts are globally enabled
	NVIC_Init(&NVIC_InitStructure);	// the properties are passed to the NVIC_Init function which takes care of the low level stuff
	//
	buffer_clear(usx->rxring); //&rxring[usx->usid]);
	buffer_clear(usx->txring); //&txring[usx->usid]);
 8000c86:	68e3      	ldr	r3, [r4, #12]
	// finally this enables the complete USART3 peripheral
	USART_Cmd(usx->USARTx, ENABLE);
 8000c88:	4631      	mov	r1, r6

Serial Serial1, Serial2, Serial3, Serial4, Serial5, Serial6;
USARTRing rxring[6], txring[6];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 8000c8a:	f8a3 5100 	strh.w	r5, [r3, #256]	; 0x100
	r->tail = 0;
 8000c8e:	f8a3 5102 	strh.w	r5, [r3, #258]	; 0x102
	r->count = 0;
 8000c92:	f8a3 5104 	strh.w	r5, [r3, #260]	; 0x104
	NVIC_Init(&NVIC_InitStructure);	// the properties are passed to the NVIC_Init function which takes care of the low level stuff
	//
	buffer_clear(usx->rxring); //&rxring[usx->usid]);
	buffer_clear(usx->txring); //&txring[usx->usid]);
	// finally this enables the complete USART3 peripheral
	USART_Cmd(usx->USARTx, ENABLE);
 8000c96:	f001 fefa 	bl	8002a8e <USART_Cmd>
}
 8000c9a:	b009      	add	sp, #36	; 0x24
 8000c9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ca0:	2000100c 	.word	0x2000100c
 8000ca4:	40011000 	.word	0x40011000
 8000ca8:	2000103c 	.word	0x2000103c
 8000cac:	200009e8 	.word	0x200009e8
 8000cb0:	20001670 	.word	0x20001670
 8000cb4:	40004400 	.word	0x40004400
 8000cb8:	20001142 	.word	0x20001142
 8000cbc:	20000aee 	.word	0x20000aee
 8000cc0:	2000101c 	.word	0x2000101c
 8000cc4:	40004800 	.word	0x40004800
 8000cc8:	20001248 	.word	0x20001248
 8000ccc:	20000bf4 	.word	0x20000bf4
 8000cd0:	20001660 	.word	0x20001660
 8000cd4:	40004c00 	.word	0x40004c00
 8000cd8:	2000134e 	.word	0x2000134e
 8000cdc:	20000cfa 	.word	0x20000cfa
 8000ce0:	200009d8 	.word	0x200009d8
 8000ce4:	40005000 	.word	0x40005000
 8000ce8:	20001454 	.word	0x20001454
 8000cec:	20000e00 	.word	0x20000e00
 8000cf0:	40011400 	.word	0x40011400
 8000cf4:	2000155a 	.word	0x2000155a
 8000cf8:	20000f06 	.word	0x20000f06

08000cfc <usart_bare_write>:

void usart_bare_write(Serial * usx, const uint16_t w) {
 8000cfc:	b538      	push	{r3, r4, r5, lr}
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
	while (USART_GetFlagStatus(usx->USARTx, USART_FLAG_TXE ) == RESET)
 8000d02:	6860      	ldr	r0, [r4, #4]
 8000d04:	2180      	movs	r1, #128	; 0x80
 8000d06:	f001 ff9c 	bl	8002c42 <USART_GetFlagStatus>
 8000d0a:	2800      	cmp	r0, #0
 8000d0c:	d0f9      	beq.n	8000d02 <usart_bare_write+0x6>
		;
	USART_SendData(usx->USARTx, w);
 8000d0e:	6860      	ldr	r0, [r4, #4]
 8000d10:	4629      	mov	r1, r5
//	while (USART_GetFlagStatus(USART3, USART_FLAG_TC ) == RESET) ;
}
 8000d12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
}

void usart_bare_write(Serial * usx, const uint16_t w) {
	while (USART_GetFlagStatus(usx->USARTx, USART_FLAG_TXE ) == RESET)
		;
	USART_SendData(usx->USARTx, w);
 8000d16:	f001 bee7 	b.w	8002ae8 <USART_SendData>

08000d1a <usart_write>:
//	while (USART_GetFlagStatus(USART3, USART_FLAG_TC ) == RESET) ;
}

void usart_write(Serial * usx, const uint16_t w) {
 8000d1a:	b538      	push	{r3, r4, r5, lr}
 8000d1c:	4604      	mov	r4, r0
	//	uint16_t waitcount = 1000;
	if (buffer_is_full(usx->txring))
 8000d1e:	68c0      	ldr	r0, [r0, #12]
		;
	USART_SendData(usx->USARTx, w);
//	while (USART_GetFlagStatus(USART3, USART_FLAG_TC ) == RESET) ;
}

void usart_write(Serial * usx, const uint16_t w) {
 8000d20:	460d      	mov	r5, r1
	//	uint16_t waitcount = 1000;
	if (buffer_is_full(usx->txring))
 8000d22:	f7ff fe7e 	bl	8000a22 <buffer_is_full>
 8000d26:	b118      	cbz	r0, 8000d30 <usart_write+0x16>
		delay_us(833);
 8000d28:	f240 3041 	movw	r0, #833	; 0x341
 8000d2c:	f7ff fa92 	bl	8000254 <delay_us>
	USART_ITConfig(usx->USARTx, USART_IT_TXE, DISABLE);
 8000d30:	2200      	movs	r2, #0
 8000d32:	6860      	ldr	r0, [r4, #4]
 8000d34:	f240 7127 	movw	r1, #1831	; 0x727
 8000d38:	f001 ff6a 	bl	8002c10 <USART_ITConfig>
	buffer_enque(usx->txring, w); //&txring[usx->usid], w);
 8000d3c:	4629      	mov	r1, r5
 8000d3e:	68e0      	ldr	r0, [r4, #12]
 8000d40:	f7ff fe7d 	bl	8000a3e <buffer_enque>
	USART_ITConfig(usx->USARTx, USART_IT_TXE, ENABLE);
 8000d44:	6860      	ldr	r0, [r4, #4]
 8000d46:	f240 7127 	movw	r1, #1831	; 0x727
 8000d4a:	2201      	movs	r2, #1
}
 8000d4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	//	uint16_t waitcount = 1000;
	if (buffer_is_full(usx->txring))
		delay_us(833);
	USART_ITConfig(usx->USARTx, USART_IT_TXE, DISABLE);
	buffer_enque(usx->txring, w); //&txring[usx->usid], w);
	USART_ITConfig(usx->USARTx, USART_IT_TXE, ENABLE);
 8000d50:	f001 bf5e 	b.w	8002c10 <USART_ITConfig>

08000d54 <usart_print>:
}

void usart_print(Serial * usx, const char * s) {
 8000d54:	b538      	push	{r3, r4, r5, lr}
 8000d56:	4605      	mov	r5, r0
 8000d58:	460c      	mov	r4, r1
	while (*s)
 8000d5a:	e002      	b.n	8000d62 <usart_print+0xe>
		usart_write(usx, (uint16_t) *s++);
 8000d5c:	4628      	mov	r0, r5
 8000d5e:	f7ff ffdc 	bl	8000d1a <usart_write>
	buffer_enque(usx->txring, w); //&txring[usx->usid], w);
	USART_ITConfig(usx->USARTx, USART_IT_TXE, ENABLE);
}

void usart_print(Serial * usx, const char * s) {
	while (*s)
 8000d62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d66:	2900      	cmp	r1, #0
 8000d68:	d1f8      	bne.n	8000d5c <usart_print+0x8>
		usart_write(usx, (uint16_t) *s++);
}
 8000d6a:	bd38      	pop	{r3, r4, r5, pc}

08000d6c <usart_bare_read>:

uint16_t usart_bare_read(USART_TypeDef * USARTx /*usartx[usx]*/) {
	return USART_ReceiveData(USARTx);
 8000d6c:	f001 bec0 	b.w	8002af0 <USART_ReceiveData>

08000d70 <usart_read>:
}

uint16_t usart_read(Serial * usx) {
 8000d70:	b508      	push	{r3, lr}
	uint16_t w = buffer_deque(usx->rxring); //&rxring[usx->usid]);
 8000d72:	6880      	ldr	r0, [r0, #8]
 8000d74:	f7ff fe86 	bl	8000a84 <buffer_deque>
	if (w == 0xffff)
		return 0; // buffer is empty
	return w;
}
 8000d78:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d7c:	4298      	cmp	r0, r3
 8000d7e:	bf08      	it	eq
 8000d80:	2000      	moveq	r0, #0
 8000d82:	bd08      	pop	{r3, pc}

08000d84 <usart_flush>:

void usart_flush(Serial * usx) {
 8000d84:	b538      	push	{r3, r4, r5, lr}
 8000d86:	4604      	mov	r4, r0
	uint32_t wtill = millis() + 100;
 8000d88:	f7ff fa54 	bl	8000234 <millis>
 8000d8c:	f100 0564 	add.w	r5, r0, #100	; 0x64
	while ( buffer_count(usx->txring) > 0 ) {
 8000d90:	e003      	b.n	8000d9a <usart_flush+0x16>
		if ( millis() > wtill )
 8000d92:	f7ff fa4f 	bl	8000234 <millis>
 8000d96:	42a8      	cmp	r0, r5
 8000d98:	d804      	bhi.n	8000da4 <usart_flush+0x20>
	r->tail = 0;
	r->count = 0;
}

uint16_t buffer_count(USARTRing * r) {
	return r->count;
 8000d9a:	68e3      	ldr	r3, [r4, #12]
	return w;
}

void usart_flush(Serial * usx) {
	uint32_t wtill = millis() + 100;
	while ( buffer_count(usx->txring) > 0 ) {
 8000d9c:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d1f6      	bne.n	8000d92 <usart_flush+0xe>
	 USART_SendData(usx->USARTx, buffer_deque(usx->txring)); //&txring[usx->usid]));
	 while (USART_GetFlagStatus(usx->USARTx, USART_FLAG_TC ) == RESET);
	 }
	 USART_ClearITPendingBit(usx->USARTx, USART_IT_TXE );
	 */
	 buffer_clear(usx->rxring); //&txring[usx->usid]);
 8000da4:	68a3      	ldr	r3, [r4, #8]

Serial Serial1, Serial2, Serial3, Serial4, Serial5, Serial6;
USARTRing rxring[6], txring[6];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 8000da6:	2200      	movs	r2, #0
 8000da8:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
	r->tail = 0;
 8000dac:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
	r->count = 0;
 8000db0:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
	 while (USART_GetFlagStatus(usx->USARTx, USART_FLAG_TC ) == RESET);
	 }
	 USART_ClearITPendingBit(usx->USARTx, USART_IT_TXE );
	 */
	 buffer_clear(usx->rxring); //&txring[usx->usid]);
}
 8000db4:	bd38      	pop	{r3, r4, r5, pc}

08000db6 <usart_peek>:

uint16_t usart_peek(Serial * usx) {
//	if ( buffer_count(&(usx->rxring)) == 0 )
//		return 0xffff;
	return buffer_peek(usx->rxring); //	rxring[usx->usid].buf[rxring[usx->usid].tail];
 8000db6:	6883      	ldr	r3, [r0, #8]
	r->tail %= USART_BUFFER_SIZE;
	return w;
}

uint16_t buffer_peek(USARTRing * r) {
	if (buffer_count(r) == 0)
 8000db8:	f8b3 2104 	ldrh.w	r2, [r3, #260]	; 0x104
 8000dbc:	b122      	cbz	r2, 8000dc8 <usart_peek+0x12>
		return 0xffff;
	return r->buf[r->tail];
 8000dbe:	f9b3 2102 	ldrsh.w	r2, [r3, #258]	; 0x102
 8000dc2:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8000dc6:	4770      	bx	lr
	return w;
}

uint16_t buffer_peek(USARTRing * r) {
	if (buffer_count(r) == 0)
		return 0xffff;
 8000dc8:	f64f 70ff 	movw	r0, #65535	; 0xffff

uint16_t usart_peek(Serial * usx) {
//	if ( buffer_count(&(usx->rxring)) == 0 )
//		return 0xffff;
	return buffer_peek(usx->rxring); //	rxring[usx->usid].buf[rxring[usx->usid].tail];
}
 8000dcc:	4770      	bx	lr

08000dce <usart_available>:
	r->tail = 0;
	r->count = 0;
}

uint16_t buffer_count(USARTRing * r) {
	return r->count;
 8000dce:	6883      	ldr	r3, [r0, #8]
}

uint16_t usart_available(Serial * usx) {
	return buffer_count(usx->rxring);
	//return buffer_count(&rxring[usx->usid]);
}
 8000dd0:	f8b3 0104 	ldrh.w	r0, [r3, #260]	; 0x104
 8000dd4:	4770      	bx	lr

08000dd6 <USART1_IRQHandler>:

// this is the interrupt request handler (IRQ) for ALL USART3 interrupts

void USART1_IRQHandler(void) {
 8000dd6:	b510      	push	{r4, lr}
	if (USART_GetITStatus(USART1, USART_IT_RXNE )) {
 8000dd8:	4818      	ldr	r0, [pc, #96]	; (8000e3c <USART1_IRQHandler+0x66>)
 8000dda:	f240 5125 	movw	r1, #1317	; 0x525
 8000dde:	f001 ff3a 	bl	8002c56 <USART_GetITStatus>
 8000de2:	b140      	cbz	r0, 8000df6 <USART1_IRQHandler+0x20>
		buffer_enque(Serial1.rxring,
 8000de4:	4b16      	ldr	r3, [pc, #88]	; (8000e40 <USART1_IRQHandler+0x6a>)
 8000de6:	4815      	ldr	r0, [pc, #84]	; (8000e3c <USART1_IRQHandler+0x66>)
 8000de8:	689c      	ldr	r4, [r3, #8]
 8000dea:	f001 fe81 	bl	8002af0 <USART_ReceiveData>
 8000dee:	4601      	mov	r1, r0
 8000df0:	4620      	mov	r0, r4
 8000df2:	f7ff fe24 	bl	8000a3e <buffer_enque>
		//&rxring[USART1Serial],
				USART_ReceiveData(USART1 ));
	}

	if (USART_GetITStatus(USART1, USART_IT_TXE )) {
 8000df6:	4811      	ldr	r0, [pc, #68]	; (8000e3c <USART1_IRQHandler+0x66>)
 8000df8:	f240 7127 	movw	r1, #1831	; 0x727
 8000dfc:	f001 ff2b 	bl	8002c56 <USART_GetITStatus>
 8000e00:	2800      	cmp	r0, #0
 8000e02:	d019      	beq.n	8000e38 <USART1_IRQHandler+0x62>
		if (Serial1.rxring->count
 8000e04:	4b0e      	ldr	r3, [pc, #56]	; (8000e40 <USART1_IRQHandler+0x6a>)
 8000e06:	689a      	ldr	r2, [r3, #8]
 8000e08:	f8b2 2104 	ldrh.w	r2, [r2, #260]	; 0x104
 8000e0c:	b95a      	cbnz	r2, 8000e26 <USART1_IRQHandler+0x50>
		//txring[USART1Serial].count
				== 0) {
			USART_ITConfig(USART1, USART_IT_TXE, (FunctionalState) DISABLE);
 8000e0e:	480b      	ldr	r0, [pc, #44]	; (8000e3c <USART1_IRQHandler+0x66>)
 8000e10:	f240 7127 	movw	r1, #1831	; 0x727
 8000e14:	f001 fefc 	bl	8002c10 <USART_ITConfig>
			USART_ClearITPendingBit(USART1, USART_IT_TXE );
 8000e18:	4808      	ldr	r0, [pc, #32]	; (8000e3c <USART1_IRQHandler+0x66>)
 8000e1a:	f240 7127 	movw	r1, #1831	; 0x727
		} else {
			USART_SendData(USART1, buffer_deque(Serial1.txring)); // &txring[USART1Serial]) );
		}
	}
}
 8000e1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (USART_GetITStatus(USART1, USART_IT_TXE )) {
		if (Serial1.rxring->count
		//txring[USART1Serial].count
				== 0) {
			USART_ITConfig(USART1, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART1, USART_IT_TXE );
 8000e22:	f001 bf37 	b.w	8002c94 <USART_ClearITPendingBit>
		} else {
			USART_SendData(USART1, buffer_deque(Serial1.txring)); // &txring[USART1Serial]) );
 8000e26:	68d8      	ldr	r0, [r3, #12]
 8000e28:	f7ff fe2c 	bl	8000a84 <buffer_deque>
 8000e2c:	4601      	mov	r1, r0
 8000e2e:	4803      	ldr	r0, [pc, #12]	; (8000e3c <USART1_IRQHandler+0x66>)
		}
	}
}
 8000e30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		//txring[USART1Serial].count
				== 0) {
			USART_ITConfig(USART1, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART1, USART_IT_TXE );
		} else {
			USART_SendData(USART1, buffer_deque(Serial1.txring)); // &txring[USART1Serial]) );
 8000e34:	f001 be58 	b.w	8002ae8 <USART_SendData>
 8000e38:	bd10      	pop	{r4, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40011000 	.word	0x40011000
 8000e40:	2000100c 	.word	0x2000100c

08000e44 <USART2_IRQHandler>:
		}
	}
}

void USART2_IRQHandler(void) {
 8000e44:	b510      	push	{r4, lr}
	if (USART_GetITStatus(USART2, USART_IT_RXNE )) {
 8000e46:	4818      	ldr	r0, [pc, #96]	; (8000ea8 <USART2_IRQHandler+0x64>)
 8000e48:	f240 5125 	movw	r1, #1317	; 0x525
 8000e4c:	f001 ff03 	bl	8002c56 <USART_GetITStatus>
 8000e50:	b140      	cbz	r0, 8000e64 <USART2_IRQHandler+0x20>
		buffer_enque(Serial2.rxring //&rxring[USART2Serial]/
 8000e52:	4b16      	ldr	r3, [pc, #88]	; (8000eac <USART2_IRQHandler+0x68>)
 8000e54:	4814      	ldr	r0, [pc, #80]	; (8000ea8 <USART2_IRQHandler+0x64>)
 8000e56:	689c      	ldr	r4, [r3, #8]
 8000e58:	f001 fe4a 	bl	8002af0 <USART_ReceiveData>
 8000e5c:	4601      	mov	r1, r0
 8000e5e:	4620      	mov	r0, r4
 8000e60:	f7ff fded 	bl	8000a3e <buffer_enque>
				, USART_ReceiveData(USART2 ));
	}
	if (USART_GetITStatus(USART2, USART_IT_TXE )) {
 8000e64:	4810      	ldr	r0, [pc, #64]	; (8000ea8 <USART2_IRQHandler+0x64>)
 8000e66:	f240 7127 	movw	r1, #1831	; 0x727
 8000e6a:	f001 fef4 	bl	8002c56 <USART_GetITStatus>
 8000e6e:	2800      	cmp	r0, #0
 8000e70:	d018      	beq.n	8000ea4 <USART2_IRQHandler+0x60>
		if (Serial2.txring->count //txring[USART2Serial].count
 8000e72:	4b0e      	ldr	r3, [pc, #56]	; (8000eac <USART2_IRQHandler+0x68>)
 8000e74:	68d8      	ldr	r0, [r3, #12]
 8000e76:	f8b0 2104 	ldrh.w	r2, [r0, #260]	; 0x104
 8000e7a:	b95a      	cbnz	r2, 8000e94 <USART2_IRQHandler+0x50>
		== 0) {
			USART_ITConfig(USART2, USART_IT_TXE, (FunctionalState) DISABLE);
 8000e7c:	480a      	ldr	r0, [pc, #40]	; (8000ea8 <USART2_IRQHandler+0x64>)
 8000e7e:	f240 7127 	movw	r1, #1831	; 0x727
 8000e82:	f001 fec5 	bl	8002c10 <USART_ITConfig>
			USART_ClearITPendingBit(USART2, USART_IT_TXE );
 8000e86:	4808      	ldr	r0, [pc, #32]	; (8000ea8 <USART2_IRQHandler+0x64>)
 8000e88:	f240 7127 	movw	r1, #1831	; 0x727
		} else {
			USART_SendData(USART2, buffer_deque(Serial2.txring)); //&txring[USART2Serial]));
		}
	}
}
 8000e8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	}
	if (USART_GetITStatus(USART2, USART_IT_TXE )) {
		if (Serial2.txring->count //txring[USART2Serial].count
		== 0) {
			USART_ITConfig(USART2, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART2, USART_IT_TXE );
 8000e90:	f001 bf00 	b.w	8002c94 <USART_ClearITPendingBit>
		} else {
			USART_SendData(USART2, buffer_deque(Serial2.txring)); //&txring[USART2Serial]));
 8000e94:	f7ff fdf6 	bl	8000a84 <buffer_deque>
 8000e98:	4601      	mov	r1, r0
 8000e9a:	4803      	ldr	r0, [pc, #12]	; (8000ea8 <USART2_IRQHandler+0x64>)
		}
	}
}
 8000e9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if (Serial2.txring->count //txring[USART2Serial].count
		== 0) {
			USART_ITConfig(USART2, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART2, USART_IT_TXE );
		} else {
			USART_SendData(USART2, buffer_deque(Serial2.txring)); //&txring[USART2Serial]));
 8000ea0:	f001 be22 	b.w	8002ae8 <USART_SendData>
 8000ea4:	bd10      	pop	{r4, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40004400 	.word	0x40004400
 8000eac:	20001670 	.word	0x20001670

08000eb0 <USART3_IRQHandler>:
		}
	}
}

void USART3_IRQHandler(void) {
 8000eb0:	b510      	push	{r4, lr}
	if (USART_GetITStatus(USART3, USART_IT_RXNE )) {
 8000eb2:	4818      	ldr	r0, [pc, #96]	; (8000f14 <USART3_IRQHandler+0x64>)
 8000eb4:	f240 5125 	movw	r1, #1317	; 0x525
 8000eb8:	f001 fecd 	bl	8002c56 <USART_GetITStatus>
 8000ebc:	b140      	cbz	r0, 8000ed0 <USART3_IRQHandler+0x20>
		buffer_enque(Serial3.rxring /*&rxring[USART3Serial]*/,
 8000ebe:	4b16      	ldr	r3, [pc, #88]	; (8000f18 <USART3_IRQHandler+0x68>)
 8000ec0:	4814      	ldr	r0, [pc, #80]	; (8000f14 <USART3_IRQHandler+0x64>)
 8000ec2:	689c      	ldr	r4, [r3, #8]
 8000ec4:	f001 fe14 	bl	8002af0 <USART_ReceiveData>
 8000ec8:	4601      	mov	r1, r0
 8000eca:	4620      	mov	r0, r4
 8000ecc:	f7ff fdb7 	bl	8000a3e <buffer_enque>
				USART_ReceiveData(USART3 ));
	}

	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
 8000ed0:	4810      	ldr	r0, [pc, #64]	; (8000f14 <USART3_IRQHandler+0x64>)
 8000ed2:	f240 7127 	movw	r1, #1831	; 0x727
 8000ed6:	f001 febe 	bl	8002c56 <USART_GetITStatus>
 8000eda:	2800      	cmp	r0, #0
 8000edc:	d018      	beq.n	8000f10 <USART3_IRQHandler+0x60>
		if (Serial3.txring->count/*txring[USART3Serial].count*/== 0) {
 8000ede:	4b0e      	ldr	r3, [pc, #56]	; (8000f18 <USART3_IRQHandler+0x68>)
 8000ee0:	68d8      	ldr	r0, [r3, #12]
 8000ee2:	f8b0 2104 	ldrh.w	r2, [r0, #260]	; 0x104
 8000ee6:	b95a      	cbnz	r2, 8000f00 <USART3_IRQHandler+0x50>
			USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) DISABLE);
 8000ee8:	480a      	ldr	r0, [pc, #40]	; (8000f14 <USART3_IRQHandler+0x64>)
 8000eea:	f240 7127 	movw	r1, #1831	; 0x727
 8000eee:	f001 fe8f 	bl	8002c10 <USART_ITConfig>
			USART_ClearITPendingBit(USART3, USART_IT_TXE );
 8000ef2:	4808      	ldr	r0, [pc, #32]	; (8000f14 <USART3_IRQHandler+0x64>)
 8000ef4:	f240 7127 	movw	r1, #1831	; 0x727
		} else {
			USART_SendData(USART3,
					buffer_deque(Serial3.txring /*&txring[USART3Serial]*/));
		}
	}
}
 8000ef8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	}

	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
		if (Serial3.txring->count/*txring[USART3Serial].count*/== 0) {
			USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART3, USART_IT_TXE );
 8000efc:	f001 beca 	b.w	8002c94 <USART_ClearITPendingBit>
		} else {
			USART_SendData(USART3,
 8000f00:	f7ff fdc0 	bl	8000a84 <buffer_deque>
 8000f04:	4601      	mov	r1, r0
 8000f06:	4803      	ldr	r0, [pc, #12]	; (8000f14 <USART3_IRQHandler+0x64>)
					buffer_deque(Serial3.txring /*&txring[USART3Serial]*/));
		}
	}
}
 8000f08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
		if (Serial3.txring->count/*txring[USART3Serial].count*/== 0) {
			USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART3, USART_IT_TXE );
		} else {
			USART_SendData(USART3,
 8000f0c:	f001 bdec 	b.w	8002ae8 <USART_SendData>
 8000f10:	bd10      	pop	{r4, pc}
 8000f12:	bf00      	nop
 8000f14:	40004800 	.word	0x40004800
 8000f18:	2000101c 	.word	0x2000101c

08000f1c <NVIC_PriorityGroupConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8000f1c:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8000f20:	4b02      	ldr	r3, [pc, #8]	; (8000f2c <NVIC_PriorityGroupConfig+0x10>)
 8000f22:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8000f26:	60d8      	str	r0, [r3, #12]
}
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	e000ed00 	.word	0xe000ed00

08000f30 <NVIC_Init>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000f30:	78c3      	ldrb	r3, [r0, #3]
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000f32:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000f34:	b30b      	cbz	r3, 8000f7a <NVIC_Init+0x4a>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000f36:	4b17      	ldr	r3, [pc, #92]	; (8000f94 <NVIC_Init+0x64>)
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000f38:	7842      	ldrb	r2, [r0, #1]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000f3a:	68db      	ldr	r3, [r3, #12]
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000f3c:	7884      	ldrb	r4, [r0, #2]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000f3e:	43db      	mvns	r3, r3
 8000f40:	f3c3 2302 	ubfx	r3, r3, #8, #3
    tmppre = (0x4 - tmppriority);
 8000f44:	f1c3 0104 	rsb	r1, r3, #4
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000f48:	b2c9      	uxtb	r1, r1
 8000f4a:	fa12 f101 	lsls.w	r1, r2, r1
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
 8000f4e:	220f      	movs	r2, #15
 8000f50:	411a      	asrs	r2, r3
    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000f52:	7803      	ldrb	r3, [r0, #0]
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000f54:	b2c9      	uxtb	r1, r1
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000f56:	4022      	ands	r2, r4
 8000f58:	430a      	orrs	r2, r1
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000f5a:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000f5e:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
        
    tmppriority = tmppriority << 0x04;
 8000f62:	0112      	lsls	r2, r2, #4
 8000f64:	b2d2      	uxtb	r2, r2
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000f66:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000f6a:	7803      	ldrb	r3, [r0, #0]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000f6c:	2201      	movs	r2, #1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000f6e:	0959      	lsrs	r1, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000f70:	f003 031f 	and.w	r3, r3, #31
 8000f74:	fa12 f303 	lsls.w	r3, r2, r3
 8000f78:	e007      	b.n	8000f8a <NVIC_Init+0x5a>
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000f7a:	7803      	ldrb	r3, [r0, #0]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000f7c:	2201      	movs	r2, #1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000f7e:	0959      	lsrs	r1, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000f80:	f003 031f 	and.w	r3, r3, #31
 8000f84:	fa12 f303 	lsls.w	r3, r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000f88:	3120      	adds	r1, #32
 8000f8a:	4a03      	ldr	r2, [pc, #12]	; (8000f98 <NVIC_Init+0x68>)
 8000f8c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8000f90:	bd10      	pop	{r4, pc}
 8000f92:	bf00      	nop
 8000f94:	e000ed00 	.word	0xe000ed00
 8000f98:	e000e100 	.word	0xe000e100

08000f9c <NVIC_SetVectorTable>:
{ 
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 8000f9c:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
 8000fa0:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 8000fa4:	4b01      	ldr	r3, [pc, #4]	; (8000fac <NVIC_SetVectorTable+0x10>)
 8000fa6:	4301      	orrs	r1, r0
 8000fa8:	6099      	str	r1, [r3, #8]
}
 8000faa:	4770      	bx	lr
 8000fac:	e000ed00 	.word	0xe000ed00

08000fb0 <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT: Low Power Sleep on Exit.
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
 8000fb0:	4b04      	ldr	r3, [pc, #16]	; (8000fc4 <NVIC_SystemLPConfig+0x14>)
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
  {
    SCB->SCR |= LowPowerMode;
 8000fb2:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 8000fb4:	b109      	cbz	r1, 8000fba <NVIC_SystemLPConfig+0xa>
  {
    SCB->SCR |= LowPowerMode;
 8000fb6:	4310      	orrs	r0, r2
 8000fb8:	e001      	b.n	8000fbe <NVIC_SystemLPConfig+0xe>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 8000fba:	ea22 0000 	bic.w	r0, r2, r0
 8000fbe:	6118      	str	r0, [r3, #16]
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	e000ed00 	.word	0xe000ed00

08000fc8 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
 8000fc8:	4b04      	ldr	r3, [pc, #16]	; (8000fdc <SysTick_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8000fca:	681a      	ldr	r2, [r3, #0]
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 8000fcc:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8000fce:	bf0c      	ite	eq
 8000fd0:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 8000fd4:	f022 0204 	bicne.w	r2, r2, #4
 8000fd8:	601a      	str	r2, [r3, #0]
 8000fda:	4770      	bx	lr
 8000fdc:	e000e010 	.word	0xe000e010

08000fe0 <GPIO_DeInit>:
  * @note   By default, The GPIO pins are configured in input floating mode (except JTAG pins).
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 8000fe0:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
 8000fe2:	4b2c      	ldr	r3, [pc, #176]	; (8001094 <GPIO_DeInit+0xb4>)
 8000fe4:	4298      	cmp	r0, r3
 8000fe6:	d105      	bne.n	8000ff4 <GPIO_DeInit+0x14>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8000fe8:	2001      	movs	r0, #1
 8000fea:	4601      	mov	r1, r0
 8000fec:	f000 fc48 	bl	8001880 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 8000ff0:	2001      	movs	r0, #1
 8000ff2:	e048      	b.n	8001086 <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOB)
 8000ff4:	4b28      	ldr	r3, [pc, #160]	; (8001098 <GPIO_DeInit+0xb8>)
 8000ff6:	4298      	cmp	r0, r3
 8000ff8:	d105      	bne.n	8001006 <GPIO_DeInit+0x26>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8000ffa:	2002      	movs	r0, #2
 8000ffc:	2101      	movs	r1, #1
 8000ffe:	f000 fc3f 	bl	8001880 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 8001002:	2002      	movs	r0, #2
 8001004:	e03f      	b.n	8001086 <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOC)
 8001006:	4b25      	ldr	r3, [pc, #148]	; (800109c <GPIO_DeInit+0xbc>)
 8001008:	4298      	cmp	r0, r3
 800100a:	d105      	bne.n	8001018 <GPIO_DeInit+0x38>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 800100c:	2004      	movs	r0, #4
 800100e:	2101      	movs	r1, #1
 8001010:	f000 fc36 	bl	8001880 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 8001014:	2004      	movs	r0, #4
 8001016:	e036      	b.n	8001086 <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOD)
 8001018:	4b21      	ldr	r3, [pc, #132]	; (80010a0 <GPIO_DeInit+0xc0>)
 800101a:	4298      	cmp	r0, r3
 800101c:	d105      	bne.n	800102a <GPIO_DeInit+0x4a>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 800101e:	2008      	movs	r0, #8
 8001020:	2101      	movs	r1, #1
 8001022:	f000 fc2d 	bl	8001880 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 8001026:	2008      	movs	r0, #8
 8001028:	e02d      	b.n	8001086 <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOE)
 800102a:	4b1e      	ldr	r3, [pc, #120]	; (80010a4 <GPIO_DeInit+0xc4>)
 800102c:	4298      	cmp	r0, r3
 800102e:	d105      	bne.n	800103c <GPIO_DeInit+0x5c>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 8001030:	2010      	movs	r0, #16
 8001032:	2101      	movs	r1, #1
 8001034:	f000 fc24 	bl	8001880 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 8001038:	2010      	movs	r0, #16
 800103a:	e024      	b.n	8001086 <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOF)
 800103c:	4b1a      	ldr	r3, [pc, #104]	; (80010a8 <GPIO_DeInit+0xc8>)
 800103e:	4298      	cmp	r0, r3
 8001040:	d105      	bne.n	800104e <GPIO_DeInit+0x6e>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 8001042:	2020      	movs	r0, #32
 8001044:	2101      	movs	r1, #1
 8001046:	f000 fc1b 	bl	8001880 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 800104a:	2020      	movs	r0, #32
 800104c:	e01b      	b.n	8001086 <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOG)
 800104e:	4b17      	ldr	r3, [pc, #92]	; (80010ac <GPIO_DeInit+0xcc>)
 8001050:	4298      	cmp	r0, r3
 8001052:	d105      	bne.n	8001060 <GPIO_DeInit+0x80>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 8001054:	2040      	movs	r0, #64	; 0x40
 8001056:	2101      	movs	r1, #1
 8001058:	f000 fc12 	bl	8001880 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 800105c:	2040      	movs	r0, #64	; 0x40
 800105e:	e012      	b.n	8001086 <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOH)
 8001060:	4b13      	ldr	r3, [pc, #76]	; (80010b0 <GPIO_DeInit+0xd0>)
 8001062:	4298      	cmp	r0, r3
 8001064:	d105      	bne.n	8001072 <GPIO_DeInit+0x92>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 8001066:	2080      	movs	r0, #128	; 0x80
 8001068:	2101      	movs	r1, #1
 800106a:	f000 fc09 	bl	8001880 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 800106e:	2080      	movs	r0, #128	; 0x80
 8001070:	e009      	b.n	8001086 <GPIO_DeInit+0xa6>
  }
  else
  {
    if (GPIOx == GPIOI)
 8001072:	4b10      	ldr	r3, [pc, #64]	; (80010b4 <GPIO_DeInit+0xd4>)
 8001074:	4298      	cmp	r0, r3
 8001076:	d10b      	bne.n	8001090 <GPIO_DeInit+0xb0>
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 8001078:	f44f 7080 	mov.w	r0, #256	; 0x100
 800107c:	2101      	movs	r1, #1
 800107e:	f000 fbff 	bl	8001880 <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 8001082:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001086:	2100      	movs	r1, #0
    }
  }
}
 8001088:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (GPIOx == GPIOI)
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 800108c:	f000 bbf8 	b.w	8001880 <RCC_AHB1PeriphResetCmd>
 8001090:	bd08      	pop	{r3, pc}
 8001092:	bf00      	nop
 8001094:	40020000 	.word	0x40020000
 8001098:	40020400 	.word	0x40020400
 800109c:	40020800 	.word	0x40020800
 80010a0:	40020c00 	.word	0x40020c00
 80010a4:	40021000 	.word	0x40021000
 80010a8:	40021400 	.word	0x40021400
 80010ac:	40021800 	.word	0x40021800
 80010b0:	40021c00 	.word	0x40021c00
 80010b4:	40022000 	.word	0x40022000

080010b8 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80010b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
  {
    pos = ((uint32_t)0x01) << pinpos;
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80010bc:	2300      	movs	r3, #0
 80010be:	f8d1 8000 	ldr.w	r8, [r1]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80010c2:	461a      	mov	r2, r3
  {
    pos = ((uint32_t)0x01) << pinpos;
 80010c4:	f04f 0c01 	mov.w	ip, #1
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80010c8:	2703      	movs	r7, #3

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
  {
    pos = ((uint32_t)0x01) << pinpos;
 80010ca:	fa0c f402 	lsl.w	r4, ip, r2
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80010ce:	ea04 0508 	and.w	r5, r4, r8

    if (currentpin == pos)
 80010d2:	42a5      	cmp	r5, r4
 80010d4:	d12e      	bne.n	8001134 <GPIO_Init+0x7c>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80010d6:	6806      	ldr	r6, [r0, #0]
 80010d8:	fa17 f403 	lsls.w	r4, r7, r3
 80010dc:	43e4      	mvns	r4, r4
 80010de:	4026      	ands	r6, r4
 80010e0:	6006      	str	r6, [r0, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80010e2:	790e      	ldrb	r6, [r1, #4]
 80010e4:	f8d0 9000 	ldr.w	r9, [r0]
 80010e8:	fa06 fa03 	lsl.w	sl, r6, r3

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80010ec:	3e01      	subs	r6, #1
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80010ee:	ea4a 0909 	orr.w	r9, sl, r9

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80010f2:	2e01      	cmp	r6, #1
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80010f4:	f8c0 9000 	str.w	r9, [r0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80010f8:	d814      	bhi.n	8001124 <GPIO_Init+0x6c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80010fa:	6886      	ldr	r6, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80010fc:	f891 9005 	ldrb.w	r9, [r1, #5]
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8001100:	4026      	ands	r6, r4
 8001102:	6086      	str	r6, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8001104:	6886      	ldr	r6, [r0, #8]
 8001106:	fa09 f903 	lsl.w	r9, r9, r3
 800110a:	ea49 0606 	orr.w	r6, r9, r6
 800110e:	6086      	str	r6, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8001110:	6846      	ldr	r6, [r0, #4]
 8001112:	ea26 0505 	bic.w	r5, r6, r5
 8001116:	6045      	str	r5, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8001118:	798d      	ldrb	r5, [r1, #6]
 800111a:	6846      	ldr	r6, [r0, #4]
 800111c:	4095      	lsls	r5, r2
 800111e:	b2ad      	uxth	r5, r5
 8001120:	4335      	orrs	r5, r6
 8001122:	6045      	str	r5, [r0, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8001124:	68c5      	ldr	r5, [r0, #12]
 8001126:	402c      	ands	r4, r5
 8001128:	60c4      	str	r4, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800112a:	79cc      	ldrb	r4, [r1, #7]
 800112c:	68c5      	ldr	r5, [r0, #12]
 800112e:	409c      	lsls	r4, r3
 8001130:	432c      	orrs	r4, r5
 8001132:	60c4      	str	r4, [r0, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001134:	3201      	adds	r2, #1
 8001136:	3302      	adds	r3, #2
 8001138:	2a10      	cmp	r2, #16
 800113a:	d1c6      	bne.n	80010ca <GPIO_Init+0x12>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 800113c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08001140 <GPIO_StructInit>:
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8001140:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001144:	6003      	str	r3, [r0, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8001146:	2300      	movs	r3, #0
 8001148:	7103      	strb	r3, [r0, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 800114a:	7143      	strb	r3, [r0, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 800114c:	7183      	strb	r3, [r0, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 800114e:	71c3      	strb	r3, [r0, #7]
}
 8001150:	4770      	bx	lr

08001152 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001152:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0x00010000;
 8001154:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001158:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
 800115a:	9b01      	ldr	r3, [sp, #4]
 800115c:	430b      	orrs	r3, r1
 800115e:	9301      	str	r3, [sp, #4]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8001160:	9b01      	ldr	r3, [sp, #4]
 8001162:	61c3      	str	r3, [r0, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 8001164:	61c1      	str	r1, [r0, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8001166:	9b01      	ldr	r3, [sp, #4]
 8001168:	61c3      	str	r3, [r0, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 800116a:	69c3      	ldr	r3, [r0, #28]
 800116c:	9301      	str	r3, [sp, #4]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 800116e:	69c3      	ldr	r3, [r0, #28]
 8001170:	9301      	str	r3, [sp, #4]
}
 8001172:	b002      	add	sp, #8
 8001174:	4770      	bx	lr

08001176 <GPIO_ReadInputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8001176:	6903      	ldr	r3, [r0, #16]
  {
    bitstatus = (uint8_t)Bit_SET;
 8001178:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 800117a:	bf0c      	ite	eq
 800117c:	2000      	moveq	r0, #0
 800117e:	2001      	movne	r0, #1
 8001180:	4770      	bx	lr

08001182 <GPIO_ReadInputData>:
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 8001182:	6900      	ldr	r0, [r0, #16]
}
 8001184:	b280      	uxth	r0, r0
 8001186:	4770      	bx	lr

08001188 <GPIO_ReadOutputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8001188:	6943      	ldr	r3, [r0, #20]
  {
    bitstatus = (uint8_t)Bit_SET;
 800118a:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 800118c:	bf0c      	ite	eq
 800118e:	2000      	moveq	r0, #0
 8001190:	2001      	movne	r0, #1
 8001192:	4770      	bx	lr

08001194 <GPIO_ReadOutputData>:
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
 8001194:	6940      	ldr	r0, [r0, #20]
}
 8001196:	b280      	uxth	r0, r0
 8001198:	4770      	bx	lr

0800119a <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 800119a:	8301      	strh	r1, [r0, #24]
}
 800119c:	4770      	bx	lr

0800119e <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 800119e:	8341      	strh	r1, [r0, #26]
}
 80011a0:	4770      	bx	lr

080011a2 <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 80011a2:	b10a      	cbz	r2, 80011a8 <GPIO_WriteBit+0x6>
  {
    GPIOx->BSRRL = GPIO_Pin;
 80011a4:	8301      	strh	r1, [r0, #24]
 80011a6:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 80011a8:	8341      	strh	r1, [r0, #26]
 80011aa:	4770      	bx	lr

080011ac <GPIO_Write>:
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 80011ac:	6141      	str	r1, [r0, #20]
}
 80011ae:	4770      	bx	lr

080011b0 <GPIO_ToggleBits>:
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 80011b0:	6943      	ldr	r3, [r0, #20]
 80011b2:	404b      	eors	r3, r1
 80011b4:	6143      	str	r3, [r0, #20]
}
 80011b6:	4770      	bx	lr

080011b8 <GPIO_PinAFConfig>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80011b8:	f001 0307 	and.w	r3, r1, #7
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80011bc:	08c9      	lsrs	r1, r1, #3
 80011be:	3108      	adds	r1, #8
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80011c0:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80011c2:	009b      	lsls	r3, r3, #2
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80011c4:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
 80011c8:	240f      	movs	r4, #15
 80011ca:	409c      	lsls	r4, r3
 80011cc:	ea25 0404 	bic.w	r4, r5, r4
 80011d0:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80011d4:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80011d8:	fa12 f303 	lsls.w	r3, r2, r3
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80011dc:	431c      	orrs	r4, r3
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80011de:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
}
 80011e2:	bd30      	pop	{r4, r5, pc}

080011e4 <I2C_DeInit>:
  * @brief  Deinitialize the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 80011e4:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 80011e6:	4b13      	ldr	r3, [pc, #76]	; (8001234 <I2C_DeInit+0x50>)
 80011e8:	4298      	cmp	r0, r3
 80011ea:	d107      	bne.n	80011fc <I2C_DeInit+0x18>
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 80011ec:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80011f0:	2101      	movs	r1, #1
 80011f2:	f000 fb69 	bl	80018c8 <RCC_APB1PeriphResetCmd>
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
 80011f6:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80011fa:	e014      	b.n	8001226 <I2C_DeInit+0x42>
  }
  else if (I2Cx == I2C2)
 80011fc:	4b0e      	ldr	r3, [pc, #56]	; (8001238 <I2C_DeInit+0x54>)
 80011fe:	4298      	cmp	r0, r3
 8001200:	d107      	bne.n	8001212 <I2C_DeInit+0x2e>
  {
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 8001202:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001206:	2101      	movs	r1, #1
 8001208:	f000 fb5e 	bl	80018c8 <RCC_APB1PeriphResetCmd>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
 800120c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001210:	e009      	b.n	8001226 <I2C_DeInit+0x42>
  }
  else 
  {
    if (I2Cx == I2C3)
 8001212:	4b0a      	ldr	r3, [pc, #40]	; (800123c <I2C_DeInit+0x58>)
 8001214:	4298      	cmp	r0, r3
 8001216:	d10b      	bne.n	8001230 <I2C_DeInit+0x4c>
    {
      /* Enable I2C3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
 8001218:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800121c:	2101      	movs	r1, #1
 800121e:	f000 fb53 	bl	80018c8 <RCC_APB1PeriphResetCmd>
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 8001222:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001226:	2100      	movs	r1, #0
    }
  }
}
 8001228:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if (I2Cx == I2C3)
    {
      /* Enable I2C3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 800122c:	f000 bb4c 	b.w	80018c8 <RCC_APB1PeriphResetCmd>
 8001230:	bd08      	pop	{r3, pc}
 8001232:	bf00      	nop
 8001234:	40005400 	.word	0x40005400
 8001238:	40005800 	.word	0x40005800
 800123c:	40005c00 	.word	0x40005c00

08001240 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8001240:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8001242:	4604      	mov	r4, r0
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 8001244:	8886      	ldrh	r6, [r0, #4]
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 8001246:	4668      	mov	r0, sp
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8001248:	460d      	mov	r5, r1
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 800124a:	f000 fa6d 	bl	8001728 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 800124e:	9902      	ldr	r1, [sp, #8]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 8001250:	482c      	ldr	r0, [pc, #176]	; (8001304 <I2C_Init+0xc4>)
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8001252:	682b      	ldr	r3, [r5, #0]

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 8001254:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
 8001258:	0436      	lsls	r6, r6, #16
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
  pclk1 = rcc_clocks.PCLK1_Frequency;
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 800125a:	fbb1 f0f0 	udiv	r0, r1, r0

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 800125e:	0c36      	lsrs	r6, r6, #16
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
  pclk1 = rcc_clocks.PCLK1_Frequency;
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 8001260:	b280      	uxth	r0, r0
  tmpreg |= freqrange;
 8001262:	4306      	orrs	r6, r0
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 8001264:	80a6      	strh	r6, [r4, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8001266:	8822      	ldrh	r2, [r4, #0]
 8001268:	f022 0201 	bic.w	r2, r2, #1
 800126c:	0412      	lsls	r2, r2, #16
 800126e:	0c12      	lsrs	r2, r2, #16
 8001270:	8022      	strh	r2, [r4, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8001272:	4a25      	ldr	r2, [pc, #148]	; (8001308 <I2C_Init+0xc8>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d80a      	bhi.n	800128e <I2C_Init+0x4e>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	fbb1 f3f3 	udiv	r3, r1, r3
      result = 0x04;  
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 800127e:	3001      	adds	r0, #1

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 8001280:	b29b      	uxth	r3, r3
      result = 0x04;  
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 8001282:	b280      	uxth	r0, r0
 8001284:	8420      	strh	r0, [r4, #32]
    {
      /* Set minimum allowed value */
      result = 0x04;  
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 8001286:	2b03      	cmp	r3, #3
 8001288:	bf98      	it	ls
 800128a:	2304      	movls	r3, #4
 800128c:	e021      	b.n	80012d2 <I2C_Init+0x92>
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 800128e:	88ee      	ldrh	r6, [r5, #6]
 8001290:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 8001294:	4296      	cmp	r6, r2
 8001296:	d105      	bne.n	80012a4 <I2C_Init+0x64>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 8001298:	2203      	movs	r2, #3
 800129a:	4353      	muls	r3, r2
 800129c:	fbb1 f3f3 	udiv	r3, r1, r3
 80012a0:	b29b      	uxth	r3, r3
 80012a2:	e006      	b.n	80012b2 <I2C_Init+0x72>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 80012a4:	2219      	movs	r2, #25
 80012a6:	4353      	muls	r3, r2
 80012a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80012ac:	b29b      	uxth	r3, r3
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 80012ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 80012b2:	051a      	lsls	r2, r3, #20
      result |= (uint16_t)0x0001;  
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 80012b4:	f44f 7296 	mov.w	r2, #300	; 0x12c

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 80012b8:	bf08      	it	eq
 80012ba:	f043 0301 	orreq.w	r3, r3, #1
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 80012be:	4350      	muls	r0, r2
 80012c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012c4:	fb90 f0f2 	sdiv	r0, r0, r2
 80012c8:	3001      	adds	r0, #1
 80012ca:	b280      	uxth	r0, r0
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 80012cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 80012d0:	8420      	strh	r0, [r4, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 80012d2:	83a3      	strh	r3, [r4, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 80012d4:	8823      	ldrh	r3, [r4, #0]
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 80012d6:	8969      	ldrh	r1, [r5, #10]
 80012d8:	88aa      	ldrh	r2, [r5, #4]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 80012da:	b29b      	uxth	r3, r3
 80012dc:	f043 0301 	orr.w	r3, r3, #1
 80012e0:	8023      	strh	r3, [r4, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 80012e2:	8823      	ldrh	r3, [r4, #0]
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 80012e4:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 80012e8:	f023 0302 	bic.w	r3, r3, #2
 80012ec:	041b      	lsls	r3, r3, #16
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 80012ee:	430a      	orrs	r2, r1

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 80012f0:	0c1b      	lsrs	r3, r3, #16
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 80012f2:	4313      	orrs	r3, r2
 80012f4:	b29b      	uxth	r3, r3
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 80012f6:	8023      	strh	r3, [r4, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 80012f8:	892a      	ldrh	r2, [r5, #8]
 80012fa:	89ab      	ldrh	r3, [r5, #12]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	b29b      	uxth	r3, r3
 8001300:	8123      	strh	r3, [r4, #8]
}
 8001302:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
 8001304:	000f4240 	.word	0x000f4240
 8001308:	000186a0 	.word	0x000186a0

0800130c <I2C_StructInit>:
  */
void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
{
/*---------------- Reset I2C init structure parameters values ----------------*/
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
 800130c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001310:	6003      	str	r3, [r0, #0]
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 8001312:	2300      	movs	r3, #0
 8001314:	8083      	strh	r3, [r0, #4]
  /* Initialize the I2C_DutyCycle member */
  I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 8001316:	f64b 72ff 	movw	r2, #49151	; 0xbfff
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
 800131a:	8103      	strh	r3, [r0, #8]
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
 800131c:	8143      	strh	r3, [r0, #10]
  /* Initialize the I2C_AcknowledgedAddress member */
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 800131e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
  /* Initialize the I2C_DutyCycle member */
  I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 8001322:	80c2      	strh	r2, [r0, #6]
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
  /* Initialize the I2C_AcknowledgedAddress member */
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8001324:	8183      	strh	r3, [r0, #12]
}
 8001326:	4770      	bx	lr

08001328 <I2C_Cmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 8001328:	8803      	ldrh	r3, [r0, #0]
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800132a:	b119      	cbz	r1, 8001334 <I2C_Cmd+0xc>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 800132c:	b29b      	uxth	r3, r3
 800132e:	f043 0301 	orr.w	r3, r3, #1
 8001332:	e003      	b.n	800133c <I2C_Cmd+0x14>
  }
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8001334:	f023 0301 	bic.w	r3, r3, #1
 8001338:	041b      	lsls	r3, r3, #16
 800133a:	0c1b      	lsrs	r3, r3, #16
 800133c:	8003      	strh	r3, [r0, #0]
 800133e:	4770      	bx	lr

08001340 <I2C_GenerateSTART>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 8001340:	8803      	ldrh	r3, [r0, #0]
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001342:	b119      	cbz	r1, 800134c <I2C_GenerateSTART+0xc>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 8001344:	b29b      	uxth	r3, r3
 8001346:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800134a:	e003      	b.n	8001354 <I2C_GenerateSTART+0x14>
  }
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 800134c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001350:	041b      	lsls	r3, r3, #16
 8001352:	0c1b      	lsrs	r3, r3, #16
 8001354:	8003      	strh	r3, [r0, #0]
 8001356:	4770      	bx	lr

08001358 <I2C_GenerateSTOP>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 8001358:	8803      	ldrh	r3, [r0, #0]
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800135a:	b119      	cbz	r1, 8001364 <I2C_GenerateSTOP+0xc>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 800135c:	b29b      	uxth	r3, r3
 800135e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001362:	e003      	b.n	800136c <I2C_GenerateSTOP+0x14>
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 8001364:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001368:	041b      	lsls	r3, r3, #16
 800136a:	0c1b      	lsrs	r3, r3, #16
 800136c:	8003      	strh	r3, [r0, #0]
 800136e:	4770      	bx	lr

08001370 <I2C_Send7bitAddress>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 8001370:	b112      	cbz	r2, 8001378 <I2C_Send7bitAddress+0x8>
  {
    /* Set the address bit0 for read */
    Address |= I2C_OAR1_ADD0;
 8001372:	f041 0101 	orr.w	r1, r1, #1
 8001376:	e001      	b.n	800137c <I2C_Send7bitAddress+0xc>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 8001378:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
  }
  /* Send the address */
  I2Cx->DR = Address;
 800137c:	8201      	strh	r1, [r0, #16]
}
 800137e:	4770      	bx	lr

08001380 <I2C_AcknowledgeConfig>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 8001380:	8803      	ldrh	r3, [r0, #0]
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001382:	b119      	cbz	r1, 800138c <I2C_AcknowledgeConfig+0xc>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 8001384:	b29b      	uxth	r3, r3
 8001386:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800138a:	e003      	b.n	8001394 <I2C_AcknowledgeConfig+0x14>
  }
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 800138c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001390:	041b      	lsls	r3, r3, #16
 8001392:	0c1b      	lsrs	r3, r3, #16
 8001394:	8003      	strh	r3, [r0, #0]
 8001396:	4770      	bx	lr

08001398 <I2C_OwnAddress2Config>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Get the old register value */
  tmpreg = I2Cx->OAR2;
 8001398:	8983      	ldrh	r3, [r0, #12]
 800139a:	b29b      	uxth	r3, r3

  /* Reset I2Cx Own address2 bit [7:1] */
  tmpreg &= (uint16_t)~((uint16_t)I2C_OAR2_ADD2);

  /* Set I2Cx Own address2 */
  tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
 800139c:	f001 01fe 	and.w	r1, r1, #254	; 0xfe

  /* Get the old register value */
  tmpreg = I2Cx->OAR2;

  /* Reset I2Cx Own address2 bit [7:1] */
  tmpreg &= (uint16_t)~((uint16_t)I2C_OAR2_ADD2);
 80013a0:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe

  /* Set I2Cx Own address2 */
  tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
 80013a4:	430b      	orrs	r3, r1

  /* Store the new register value */
  I2Cx->OAR2 = tmpreg;
 80013a6:	8183      	strh	r3, [r0, #12]
}
 80013a8:	4770      	bx	lr

080013aa <I2C_DualAddressCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable dual addressing mode */
    I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
 80013aa:	8983      	ldrh	r3, [r0, #12]
void I2C_DualAddressCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80013ac:	b119      	cbz	r1, 80013b6 <I2C_DualAddressCmd+0xc>
  {
    /* Enable dual addressing mode */
    I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	f043 0301 	orr.w	r3, r3, #1
 80013b4:	e003      	b.n	80013be <I2C_DualAddressCmd+0x14>
  }
  else
  {
    /* Disable dual addressing mode */
    I2Cx->OAR2 &= (uint16_t)~((uint16_t)I2C_OAR2_ENDUAL);
 80013b6:	f023 0301 	bic.w	r3, r3, #1
 80013ba:	041b      	lsls	r3, r3, #16
 80013bc:	0c1b      	lsrs	r3, r3, #16
 80013be:	8183      	strh	r3, [r0, #12]
 80013c0:	4770      	bx	lr

080013c2 <I2C_GeneralCallCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable generall call */
    I2Cx->CR1 |= I2C_CR1_ENGC;
 80013c2:	8803      	ldrh	r3, [r0, #0]
void I2C_GeneralCallCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80013c4:	b119      	cbz	r1, 80013ce <I2C_GeneralCallCmd+0xc>
  {
    /* Enable generall call */
    I2Cx->CR1 |= I2C_CR1_ENGC;
 80013c6:	b29b      	uxth	r3, r3
 80013c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013cc:	e003      	b.n	80013d6 <I2C_GeneralCallCmd+0x14>
  }
  else
  {
    /* Disable generall call */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENGC);
 80013ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80013d2:	041b      	lsls	r3, r3, #16
 80013d4:	0c1b      	lsrs	r3, r3, #16
 80013d6:	8003      	strh	r3, [r0, #0]
 80013d8:	4770      	bx	lr

080013da <I2C_SoftwareResetCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Peripheral under reset */
    I2Cx->CR1 |= I2C_CR1_SWRST;
 80013da:	8803      	ldrh	r3, [r0, #0]
void I2C_SoftwareResetCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80013dc:	b129      	cbz	r1, 80013ea <I2C_SoftwareResetCmd+0x10>
  {
    /* Peripheral under reset */
    I2Cx->CR1 |= I2C_CR1_SWRST;
 80013de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80013e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	e001      	b.n	80013ee <I2C_SoftwareResetCmd+0x14>
  }
  else
  {
    /* Peripheral not under reset */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_SWRST);
 80013ea:	045b      	lsls	r3, r3, #17
 80013ec:	0c5b      	lsrs	r3, r3, #17
 80013ee:	8003      	strh	r3, [r0, #0]
 80013f0:	4770      	bx	lr

080013f2 <I2C_StretchClockCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState == DISABLE)
  {
    /* Enable the selected I2C Clock stretching */
    I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 80013f2:	8803      	ldrh	r3, [r0, #0]
void I2C_StretchClockCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState == DISABLE)
 80013f4:	b919      	cbnz	r1, 80013fe <I2C_StretchClockCmd+0xc>
  {
    /* Enable the selected I2C Clock stretching */
    I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013fc:	e003      	b.n	8001406 <I2C_StretchClockCmd+0x14>
  }
  else
  {
    /* Disable the selected I2C Clock stretching */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_NOSTRETCH);
 80013fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001402:	041b      	lsls	r3, r3, #16
 8001404:	0c1b      	lsrs	r3, r3, #16
 8001406:	8003      	strh	r3, [r0, #0]
 8001408:	4770      	bx	lr

0800140a <I2C_FastModeDutyCycleConfig>:
void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
  if (I2C_DutyCycle != I2C_DutyCycle_16_9)
 800140a:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
  {
    /* I2C fast mode Tlow/Thigh=2 */
    I2Cx->CCR &= I2C_DutyCycle_2;
 800140e:	8b83      	ldrh	r3, [r0, #28]
void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
  if (I2C_DutyCycle != I2C_DutyCycle_16_9)
 8001410:	d004      	beq.n	800141c <I2C_FastModeDutyCycleConfig+0x12>
  {
    /* I2C fast mode Tlow/Thigh=2 */
    I2Cx->CCR &= I2C_DutyCycle_2;
 8001412:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001416:	041b      	lsls	r3, r3, #16
 8001418:	0c1b      	lsrs	r3, r3, #16
 800141a:	e002      	b.n	8001422 <I2C_FastModeDutyCycleConfig+0x18>
  }
  else
  {
    /* I2C fast mode Tlow/Thigh=16/9 */
    I2Cx->CCR |= I2C_DutyCycle_16_9;
 800141c:	b29b      	uxth	r3, r3
 800141e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001422:	8383      	strh	r3, [r0, #28]
 8001424:	4770      	bx	lr

08001426 <I2C_NACKPositionConfig>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_NACK_POSITION(I2C_NACKPosition));
  
  /* Check the input parameter */
  if (I2C_NACKPosition == I2C_NACKPosition_Next)
 8001426:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
  {
    /* Next byte in shift register is the last received byte */
    I2Cx->CR1 |= I2C_NACKPosition_Next;
 800142a:	8803      	ldrh	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_NACK_POSITION(I2C_NACKPosition));
  
  /* Check the input parameter */
  if (I2C_NACKPosition == I2C_NACKPosition_Next)
 800142c:	d103      	bne.n	8001436 <I2C_NACKPositionConfig+0x10>
  {
    /* Next byte in shift register is the last received byte */
    I2Cx->CR1 |= I2C_NACKPosition_Next;
 800142e:	b29b      	uxth	r3, r3
 8001430:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001434:	e003      	b.n	800143e <I2C_NACKPositionConfig+0x18>
  }
  else
  {
    /* Current byte in shift register is the last received byte */
    I2Cx->CR1 &= I2C_NACKPosition_Current;
 8001436:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800143a:	041b      	lsls	r3, r3, #16
 800143c:	0c1b      	lsrs	r3, r3, #16
 800143e:	8003      	strh	r3, [r0, #0]
 8001440:	4770      	bx	lr

08001442 <I2C_SMBusAlertConfig>:
void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
 8001442:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
  {
    /* Drive the SMBusAlert pin Low */
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
 8001446:	8803      	ldrh	r3, [r0, #0]
void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
 8001448:	d103      	bne.n	8001452 <I2C_SMBusAlertConfig+0x10>
  {
    /* Drive the SMBusAlert pin Low */
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
 800144a:	b29b      	uxth	r3, r3
 800144c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001450:	e003      	b.n	800145a <I2C_SMBusAlertConfig+0x18>
  }
  else
  {
    /* Drive the SMBusAlert pin High  */
    I2Cx->CR1 &= I2C_SMBusAlert_High;
 8001452:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001456:	041b      	lsls	r3, r3, #16
 8001458:	0c1b      	lsrs	r3, r3, #16
 800145a:	8003      	strh	r3, [r0, #0]
 800145c:	4770      	bx	lr

0800145e <I2C_ARPCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C ARP */
    I2Cx->CR1 |= I2C_CR1_ENARP;
 800145e:	8803      	ldrh	r3, [r0, #0]
void I2C_ARPCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001460:	b119      	cbz	r1, 800146a <I2C_ARPCmd+0xc>
  {
    /* Enable the selected I2C ARP */
    I2Cx->CR1 |= I2C_CR1_ENARP;
 8001462:	b29b      	uxth	r3, r3
 8001464:	f043 0310 	orr.w	r3, r3, #16
 8001468:	e003      	b.n	8001472 <I2C_ARPCmd+0x14>
  }
  else
  {
    /* Disable the selected I2C ARP */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENARP);
 800146a:	f023 0310 	bic.w	r3, r3, #16
 800146e:	041b      	lsls	r3, r3, #16
 8001470:	0c1b      	lsrs	r3, r3, #16
 8001472:	8003      	strh	r3, [r0, #0]
 8001474:	4770      	bx	lr

08001476 <I2C_SendData>:
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 8001476:	8201      	strh	r1, [r0, #16]
}
 8001478:	4770      	bx	lr

0800147a <I2C_ReceiveData>:
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 800147a:	8a00      	ldrh	r0, [r0, #16]
}
 800147c:	b2c0      	uxtb	r0, r0
 800147e:	4770      	bx	lr

08001480 <I2C_TransmitPEC>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C PEC transmission */
    I2Cx->CR1 |= I2C_CR1_PEC;
 8001480:	8803      	ldrh	r3, [r0, #0]
void I2C_TransmitPEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001482:	b119      	cbz	r1, 800148c <I2C_TransmitPEC+0xc>
  {
    /* Enable the selected I2C PEC transmission */
    I2Cx->CR1 |= I2C_CR1_PEC;
 8001484:	b29b      	uxth	r3, r3
 8001486:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800148a:	e003      	b.n	8001494 <I2C_TransmitPEC+0x14>
  }
  else
  {
    /* Disable the selected I2C PEC transmission */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PEC);
 800148c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001490:	041b      	lsls	r3, r3, #16
 8001492:	0c1b      	lsrs	r3, r3, #16
 8001494:	8003      	strh	r3, [r0, #0]
 8001496:	4770      	bx	lr

08001498 <I2C_PECPositionConfig>:
void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
 8001498:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
  {
    /* Next byte in shift register is PEC */
    I2Cx->CR1 |= I2C_PECPosition_Next;
 800149c:	8803      	ldrh	r3, [r0, #0]
void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
 800149e:	d103      	bne.n	80014a8 <I2C_PECPositionConfig+0x10>
  {
    /* Next byte in shift register is PEC */
    I2Cx->CR1 |= I2C_PECPosition_Next;
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014a6:	e003      	b.n	80014b0 <I2C_PECPositionConfig+0x18>
  }
  else
  {
    /* Current byte in shift register is PEC */
    I2Cx->CR1 &= I2C_PECPosition_Current;
 80014a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80014ac:	041b      	lsls	r3, r3, #16
 80014ae:	0c1b      	lsrs	r3, r3, #16
 80014b0:	8003      	strh	r3, [r0, #0]
 80014b2:	4770      	bx	lr

080014b4 <I2C_CalculatePEC>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C PEC calculation */
    I2Cx->CR1 |= I2C_CR1_ENPEC;
 80014b4:	8803      	ldrh	r3, [r0, #0]
void I2C_CalculatePEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80014b6:	b119      	cbz	r1, 80014c0 <I2C_CalculatePEC+0xc>
  {
    /* Enable the selected I2C PEC calculation */
    I2Cx->CR1 |= I2C_CR1_ENPEC;
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	f043 0320 	orr.w	r3, r3, #32
 80014be:	e003      	b.n	80014c8 <I2C_CalculatePEC+0x14>
  }
  else
  {
    /* Disable the selected I2C PEC calculation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENPEC);
 80014c0:	f023 0320 	bic.w	r3, r3, #32
 80014c4:	041b      	lsls	r3, r3, #16
 80014c6:	0c1b      	lsrs	r3, r3, #16
 80014c8:	8003      	strh	r3, [r0, #0]
 80014ca:	4770      	bx	lr

080014cc <I2C_GetPEC>:
uint8_t I2C_GetPEC(I2C_TypeDef* I2Cx)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the selected I2C PEC value */
  return ((I2Cx->SR2) >> 8);
 80014cc:	8b00      	ldrh	r0, [r0, #24]
}
 80014ce:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80014d2:	4770      	bx	lr

080014d4 <I2C_DMACmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR2 |= I2C_CR2_DMAEN;
 80014d4:	8883      	ldrh	r3, [r0, #4]
void I2C_DMACmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80014d6:	b119      	cbz	r1, 80014e0 <I2C_DMACmd+0xc>
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR2 |= I2C_CR2_DMAEN;
 80014d8:	b29b      	uxth	r3, r3
 80014da:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014de:	e003      	b.n	80014e8 <I2C_DMACmd+0x14>
  }
  else
  {
    /* Disable the selected I2C DMA requests */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_DMAEN);
 80014e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80014e4:	041b      	lsls	r3, r3, #16
 80014e6:	0c1b      	lsrs	r3, r3, #16
 80014e8:	8083      	strh	r3, [r0, #4]
 80014ea:	4770      	bx	lr

080014ec <I2C_DMALastTransferCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Next DMA transfer is the last transfer */
    I2Cx->CR2 |= I2C_CR2_LAST;
 80014ec:	8883      	ldrh	r3, [r0, #4]
void I2C_DMALastTransferCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80014ee:	b119      	cbz	r1, 80014f8 <I2C_DMALastTransferCmd+0xc>
  {
    /* Next DMA transfer is the last transfer */
    I2Cx->CR2 |= I2C_CR2_LAST;
 80014f0:	b29b      	uxth	r3, r3
 80014f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014f6:	e003      	b.n	8001500 <I2C_DMALastTransferCmd+0x14>
  }
  else
  {
    /* Next DMA transfer is not the last transfer */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_LAST);
 80014f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80014fc:	041b      	lsls	r3, r3, #16
 80014fe:	0c1b      	lsrs	r3, r3, #16
 8001500:	8083      	strh	r3, [r0, #4]
 8001502:	4770      	bx	lr

08001504 <I2C_ReadRegister>:
  *            @arg I2C_Register_CCR:   CCR register.
  *            @arg I2C_Register_TRISE: TRISE register.
  * @retval The value of the read register.
  */
uint16_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register)
{
 8001504:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 8001506:	2300      	movs	r3, #0
 8001508:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_REGISTER(I2C_Register));

  tmp = (uint32_t) I2Cx;
 800150a:	9001      	str	r0, [sp, #4]
  tmp += I2C_Register;
 800150c:	9b01      	ldr	r3, [sp, #4]
 800150e:	18cb      	adds	r3, r1, r3
 8001510:	9301      	str	r3, [sp, #4]

  /* Return the selected register value */
  return (*(__IO uint16_t *) tmp);
 8001512:	9b01      	ldr	r3, [sp, #4]
 8001514:	8818      	ldrh	r0, [r3, #0]
}
 8001516:	b280      	uxth	r0, r0
 8001518:	b002      	add	sp, #8
 800151a:	4770      	bx	lr

0800151c <I2C_ITConfig>:
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 800151c:	8883      	ldrh	r3, [r0, #4]
 800151e:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
 8001520:	b10a      	cbz	r2, 8001526 <I2C_ITConfig+0xa>
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 8001522:	4319      	orrs	r1, r3
 8001524:	e001      	b.n	800152a <I2C_ITConfig+0xe>
  }
  else
  {
    /* Disable the selected I2C interrupts */
    I2Cx->CR2 &= (uint16_t)~I2C_IT;
 8001526:	ea23 0101 	bic.w	r1, r3, r1
 800152a:	8081      	strh	r1, [r0, #4]
 800152c:	4770      	bx	lr

0800152e <I2C_CheckEvent>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 800152e:	8a83      	ldrh	r3, [r0, #20]
  flag2 = I2Cx->SR2;
 8001530:	8b00      	ldrh	r0, [r0, #24]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8001532:	b29b      	uxth	r3, r3
  flag2 = I2Cx->SR2;
  flag2 = flag2 << 16;

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 8001534:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8001538:	4008      	ands	r0, r1

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 800153a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
  }
  /* Return status */
  return status;
}
 800153e:	1a43      	subs	r3, r0, r1
 8001540:	4258      	negs	r0, r3
 8001542:	eb40 0003 	adc.w	r0, r0, r3
 8001546:	4770      	bx	lr

08001548 <I2C_GetLastEvent>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8001548:	8a83      	ldrh	r3, [r0, #20]
  flag2 = I2Cx->SR2;
 800154a:	8b00      	ldrh	r0, [r0, #24]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 800154c:	b29b      	uxth	r3, r3
  flag2 = I2Cx->SR2;
  flag2 = flag2 << 16;

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 800154e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16

  /* Return status */
  return lastevent;
}
 8001552:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8001556:	4770      	bx	lr

08001558 <I2C_GetFlagStatus>:
  *                                Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8001558:	b082      	sub	sp, #8
  FlagStatus bitstatus = RESET;
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 800155a:	2300      	movs	r3, #0
 800155c:	9300      	str	r3, [sp, #0]
 800155e:	9301      	str	r3, [sp, #4]

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 8001560:	0f0b      	lsrs	r3, r1, #28
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 8001562:	9001      	str	r0, [sp, #4]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 8001564:	9300      	str	r3, [sp, #0]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
  
  if(i2creg != 0)
 8001566:	9b00      	ldr	r3, [sp, #0]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 8001568:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
  
  if(i2creg != 0)
 800156c:	b113      	cbz	r3, 8001574 <I2C_GetFlagStatus+0x1c>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 800156e:	9b01      	ldr	r3, [sp, #4]
 8001570:	3314      	adds	r3, #20
 8001572:	e002      	b.n	800157a <I2C_GetFlagStatus+0x22>
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 8001574:	9b01      	ldr	r3, [sp, #4]
    i2cxbase += 0x14;
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 8001576:	0c09      	lsrs	r1, r1, #16
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 8001578:	3318      	adds	r3, #24
 800157a:	9301      	str	r3, [sp, #4]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 800157c:	9b01      	ldr	r3, [sp, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 8001580:	4219      	tst	r1, r3
    bitstatus = RESET;
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
}
 8001582:	bf0c      	ite	eq
 8001584:	2000      	moveq	r0, #0
 8001586:	2001      	movne	r0, #1
 8001588:	b002      	add	sp, #8
 800158a:	4770      	bx	lr

0800158c <I2C_ClearFlag>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));
  /* Get the I2C flag position */
  flagpos = I2C_FLAG & FLAG_MASK;
  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 800158c:	43c9      	mvns	r1, r1
 800158e:	b289      	uxth	r1, r1
 8001590:	8281      	strh	r1, [r0, #20]
}
 8001592:	4770      	bx	lr

08001594 <I2C_GetITStatus>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 8001594:	8883      	ldrh	r3, [r0, #4]
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_MASK;

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 8001596:	8a80      	ldrh	r0, [r0, #20]
 8001598:	b280      	uxth	r0, r0
 800159a:	4008      	ands	r0, r1
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 800159c:	b29b      	uxth	r3, r3
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_MASK;

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 800159e:	d006      	beq.n	80015ae <I2C_GetITStatus+0x1a>
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 80015a0:	f001 61e0 	and.w	r1, r1, #117440512	; 0x7000000
  *            @arg I2C_IT_ADDR: Address sent flag (Master mode) "ADSL"
  *                              Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_IT_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_IT (SET or RESET).
  */
ITStatus I2C_GetITStatus(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
 80015a4:	ea13 4111 	ands.w	r1, r3, r1, lsr #16

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
  {
    /* I2C_IT is set */
    bitstatus = SET;
 80015a8:	bf0c      	ite	eq
 80015aa:	2000      	moveq	r0, #0
 80015ac:	2001      	movne	r0, #1
    /* I2C_IT is reset */
    bitstatus = RESET;
  }
  /* Return the I2C_IT status */
  return  bitstatus;
}
 80015ae:	4770      	bx	lr

080015b0 <I2C_ClearITPendingBit>:

  /* Get the I2C flag position */
  flagpos = I2C_IT & FLAG_MASK;

  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 80015b0:	43c9      	mvns	r1, r1
 80015b2:	b289      	uxth	r1, r1
 80015b4:	8281      	strh	r1, [r0, #20]
}
 80015b6:	4770      	bx	lr

080015b8 <RCC_DeInit>:
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80015b8:	4b0a      	ldr	r3, [pc, #40]	; (80015e4 <RCC_DeInit+0x2c>)
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	f042 0201 	orr.w	r2, r2, #1
 80015c0:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80015c2:	2200      	movs	r2, #0
 80015c4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80015c6:	6819      	ldr	r1, [r3, #0]
 80015c8:	f021 7184 	bic.w	r1, r1, #17301504	; 0x1080000
 80015cc:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80015d0:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80015d2:	4905      	ldr	r1, [pc, #20]	; (80015e8 <RCC_DeInit+0x30>)
 80015d4:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80015d6:	6819      	ldr	r1, [r3, #0]
 80015d8:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 80015dc:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80015de:	60da      	str	r2, [r3, #12]
}
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	40023800 	.word	0x40023800
 80015e8:	24003010 	.word	0x24003010

080015ec <RCC_HSEConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 80015ec:	4b02      	ldr	r3, [pc, #8]	; (80015f8 <RCC_HSEConfig+0xc>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 80015f2:	7018      	strb	r0, [r3, #0]
}
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	40023802 	.word	0x40023802

080015fc <RCC_AdjustHSICalibrationValue>:
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
 80015fc:	4b03      	ldr	r3, [pc, #12]	; (800160c <RCC_AdjustHSICalibrationValue+0x10>)
 80015fe:	681a      	ldr	r2, [r3, #0]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 8001600:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 8001604:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3

  /* Store the new value */
  RCC->CR = tmpreg;
 8001608:	601a      	str	r2, [r3, #0]
}
 800160a:	4770      	bx	lr
 800160c:	40023800 	.word	0x40023800

08001610 <RCC_HSICmd>:
void RCC_HSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 8001610:	4b01      	ldr	r3, [pc, #4]	; (8001618 <RCC_HSICmd+0x8>)
 8001612:	6018      	str	r0, [r3, #0]
}
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	42470000 	.word	0x42470000

0800161c <RCC_LSEConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 800161c:	4b06      	ldr	r3, [pc, #24]	; (8001638 <RCC_LSEConfig+0x1c>)
 800161e:	2200      	movs	r2, #0

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 8001620:	2801      	cmp	r0, #1
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8001622:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8001624:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 8001626:	d002      	beq.n	800162e <RCC_LSEConfig+0x12>
 8001628:	2804      	cmp	r0, #4
 800162a:	d104      	bne.n	8001636 <RCC_LSEConfig+0x1a>
 800162c:	e001      	b.n	8001632 <RCC_LSEConfig+0x16>
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 800162e:	7018      	strb	r0, [r3, #0]
      break;
 8001630:	4770      	bx	lr
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 8001632:	2205      	movs	r2, #5
 8001634:	701a      	strb	r2, [r3, #0]
 8001636:	4770      	bx	lr
 8001638:	40023870 	.word	0x40023870

0800163c <RCC_LSICmd>:
void RCC_LSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 800163c:	4b01      	ldr	r3, [pc, #4]	; (8001644 <RCC_LSICmd+0x8>)
 800163e:	6018      	str	r0, [r3, #0]
}
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	42470e80 	.word	0x42470e80

08001648 <RCC_PLLConfig>:
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 8001648:	4301      	orrs	r1, r0
 800164a:	ea41 1282 	orr.w	r2, r1, r2, lsl #6
 800164e:	9900      	ldr	r1, [sp, #0]
 8001650:	085b      	lsrs	r3, r3, #1
 8001652:	3b01      	subs	r3, #1
 8001654:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 8001658:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800165c:	4b01      	ldr	r3, [pc, #4]	; (8001664 <RCC_PLLConfig+0x1c>)
 800165e:	6059      	str	r1, [r3, #4]
                 (PLLQ << 24);
}
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	40023800 	.word	0x40023800

08001668 <RCC_PLLCmd>:
  */
void RCC_PLLCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 8001668:	4b01      	ldr	r3, [pc, #4]	; (8001670 <RCC_PLLCmd+0x8>)
 800166a:	6018      	str	r0, [r3, #0]
}
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	42470060 	.word	0x42470060

08001674 <RCC_PLLI2SConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
 8001674:	0180      	lsls	r0, r0, #6
 8001676:	4b03      	ldr	r3, [pc, #12]	; (8001684 <RCC_PLLI2SConfig+0x10>)
 8001678:	ea40 7101 	orr.w	r1, r0, r1, lsl #28
 800167c:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
}
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	40023800 	.word	0x40023800

08001688 <RCC_PLLI2SCmd>:
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 8001688:	4b01      	ldr	r3, [pc, #4]	; (8001690 <RCC_PLLI2SCmd+0x8>)
 800168a:	6018      	str	r0, [r3, #0]
}
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	42470068 	.word	0x42470068

08001694 <RCC_ClockSecuritySystemCmd>:
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 8001694:	4b01      	ldr	r3, [pc, #4]	; (800169c <RCC_ClockSecuritySystemCmd+0x8>)
 8001696:	6018      	str	r0, [r3, #0]
}
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	4247004c 	.word	0x4247004c

080016a0 <RCC_MCO1Config>:
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
 80016a0:	4b03      	ldr	r3, [pc, #12]	; (80016b0 <RCC_MCO1Config+0x10>)
 80016a2:	689a      	ldr	r2, [r3, #8]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
 80016a4:	f022 62ec 	bic.w	r2, r2, #123731968	; 0x7600000

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 80016a8:	4302      	orrs	r2, r0
 80016aa:	430a      	orrs	r2, r1

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 80016ac:	609a      	str	r2, [r3, #8]
}
 80016ae:	4770      	bx	lr
 80016b0:	40023800 	.word	0x40023800

080016b4 <RCC_MCO2Config>:
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
 80016b4:	4b03      	ldr	r3, [pc, #12]	; (80016c4 <RCC_MCO2Config+0x10>)
 80016b6:	689a      	ldr	r2, [r3, #8]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
 80016b8:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 80016bc:	4302      	orrs	r2, r0
 80016be:	430a      	orrs	r2, r1

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 80016c0:	609a      	str	r2, [r3, #8]
}
 80016c2:	4770      	bx	lr
 80016c4:	40023800 	.word	0x40023800

080016c8 <RCC_SYSCLKConfig>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 80016c8:	4b03      	ldr	r3, [pc, #12]	; (80016d8 <RCC_SYSCLKConfig+0x10>)
 80016ca:	689a      	ldr	r2, [r3, #8]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 80016cc:	f022 0203 	bic.w	r2, r2, #3

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 80016d0:	4302      	orrs	r2, r0

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80016d2:	609a      	str	r2, [r3, #8]
}
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	40023800 	.word	0x40023800

080016dc <RCC_GetSYSCLKSource>:
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 80016dc:	4b02      	ldr	r3, [pc, #8]	; (80016e8 <RCC_GetSYSCLKSource+0xc>)
 80016de:	6898      	ldr	r0, [r3, #8]
}
 80016e0:	f000 000c 	and.w	r0, r0, #12
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	40023800 	.word	0x40023800

080016ec <RCC_HCLKConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 80016ec:	4b03      	ldr	r3, [pc, #12]	; (80016fc <RCC_HCLKConfig+0x10>)
 80016ee:	689a      	ldr	r2, [r3, #8]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 80016f0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 80016f4:	4302      	orrs	r2, r0

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80016f6:	609a      	str	r2, [r3, #8]
}
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	40023800 	.word	0x40023800

08001700 <RCC_PCLK1Config>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8001700:	4b03      	ldr	r3, [pc, #12]	; (8001710 <RCC_PCLK1Config+0x10>)
 8001702:	689a      	ldr	r2, [r3, #8]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 8001704:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8001708:	4302      	orrs	r2, r0

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800170a:	609a      	str	r2, [r3, #8]
}
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	40023800 	.word	0x40023800

08001714 <RCC_PCLK2Config>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8001714:	4b03      	ldr	r3, [pc, #12]	; (8001724 <RCC_PCLK2Config+0x10>)
 8001716:	689a      	ldr	r2, [r3, #8]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 8001718:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 800171c:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001720:	609a      	str	r2, [r3, #8]
}
 8001722:	4770      	bx	lr
 8001724:	40023800 	.word	0x40023800

08001728 <RCC_GetClocksFreq>:
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001728:	4b1e      	ldr	r3, [pc, #120]	; (80017a4 <RCC_GetClocksFreq+0x7c>)
 800172a:	689a      	ldr	r2, [r3, #8]
 800172c:	f002 020c 	and.w	r2, r2, #12

  switch (tmp)
 8001730:	2a04      	cmp	r2, #4
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8001732:	b510      	push	{r4, lr}
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;

  switch (tmp)
 8001734:	d003      	beq.n	800173e <RCC_GetClocksFreq+0x16>
 8001736:	2a08      	cmp	r2, #8
 8001738:	d003      	beq.n	8001742 <RCC_GetClocksFreq+0x1a>
 800173a:	4b1b      	ldr	r3, [pc, #108]	; (80017a8 <RCC_GetClocksFreq+0x80>)
 800173c:	e018      	b.n	8001770 <RCC_GetClocksFreq+0x48>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 800173e:	4b1b      	ldr	r3, [pc, #108]	; (80017ac <RCC_GetClocksFreq+0x84>)
 8001740:	e016      	b.n	8001770 <RCC_GetClocksFreq+0x48>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8001742:	6859      	ldr	r1, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001744:	685a      	ldr	r2, [r3, #4]
      
      if (pllsource != 0)
 8001746:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800174a:	6859      	ldr	r1, [r3, #4]
 800174c:	bf14      	ite	ne
 800174e:	4b17      	ldrne	r3, [pc, #92]	; (80017ac <RCC_GetClocksFreq+0x84>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8001750:	4b15      	ldreq	r3, [pc, #84]	; (80017a8 <RCC_GetClocksFreq+0x80>)

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001752:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8001756:	fbb3 f3f2 	udiv	r3, r3, r2
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800175a:	4a12      	ldr	r2, [pc, #72]	; (80017a4 <RCC_GetClocksFreq+0x7c>)
 800175c:	6852      	ldr	r2, [r2, #4]
 800175e:	f3c2 4201 	ubfx	r2, r2, #16, #2
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001762:	f3c1 1188 	ubfx	r1, r1, #6, #9
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001766:	3201      	adds	r2, #1
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8001768:	434b      	muls	r3, r1
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800176a:	0052      	lsls	r2, r2, #1
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 800176c:	fbb3 f3f2 	udiv	r3, r3, r2
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8001770:	490c      	ldr	r1, [pc, #48]	; (80017a4 <RCC_GetClocksFreq+0x7c>)
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8001772:	6003      	str	r3, [r0, #0]
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8001774:	688b      	ldr	r3, [r1, #8]
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];
 8001776:	4a0e      	ldr	r2, [pc, #56]	; (80017b0 <RCC_GetClocksFreq+0x88>)
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8001778:	6804      	ldr	r4, [r0, #0]
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
  tmp = tmp >> 4;
 800177a:	f3c3 1303 	ubfx	r3, r3, #4, #4
  presc = APBAHBPrescTable[tmp];
 800177e:	5cd3      	ldrb	r3, [r2, r3]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8001780:	fa34 f303 	lsrs.w	r3, r4, r3
 8001784:	6043      	str	r3, [r0, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8001786:	688c      	ldr	r4, [r1, #8]
  tmp = tmp >> 10;
 8001788:	f3c4 2482 	ubfx	r4, r4, #10, #3
  presc = APBAHBPrescTable[tmp];
 800178c:	5d14      	ldrb	r4, [r2, r4]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800178e:	fa33 f404 	lsrs.w	r4, r3, r4
 8001792:	6084      	str	r4, [r0, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8001794:	6889      	ldr	r1, [r1, #8]
  tmp = tmp >> 13;
 8001796:	f3c1 3142 	ubfx	r1, r1, #13, #3
  presc = APBAHBPrescTable[tmp];
 800179a:	5c52      	ldrb	r2, [r2, r1]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800179c:	40d3      	lsrs	r3, r2
 800179e:	60c3      	str	r3, [r0, #12]
}
 80017a0:	bd10      	pop	{r4, pc}
 80017a2:	bf00      	nop
 80017a4:	40023800 	.word	0x40023800
 80017a8:	00f42400 	.word	0x00f42400
 80017ac:	007a1200 	.word	0x007a1200
 80017b0:	20000074 	.word	0x20000074

080017b4 <RCC_RTCCLKConfig>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 80017b4:	f400 7340 	and.w	r3, r0, #768	; 0x300
 80017b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80017bc:	4b08      	ldr	r3, [pc, #32]	; (80017e0 <RCC_RTCCLKConfig+0x2c>)
 80017be:	d108      	bne.n	80017d2 <RCC_RTCCLKConfig+0x1e>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 80017c0:	6899      	ldr	r1, [r3, #8]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 80017c2:	f020 4270 	bic.w	r2, r0, #4026531840	; 0xf0000000
  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
 80017c6:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 80017ca:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80017ce:	430a      	orrs	r2, r1

    /* Store the new value */
    RCC->CFGR = tmpreg;
 80017d0:	609a      	str	r2, [r3, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 80017d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80017d4:	0500      	lsls	r0, r0, #20
 80017d6:	ea42 5010 	orr.w	r0, r2, r0, lsr #20
 80017da:	6718      	str	r0, [r3, #112]	; 0x70
}
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	40023800 	.word	0x40023800

080017e4 <RCC_RTCCLKCmd>:
void RCC_RTCCLKCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 80017e4:	4b01      	ldr	r3, [pc, #4]	; (80017ec <RCC_RTCCLKCmd+0x8>)
 80017e6:	6018      	str	r0, [r3, #0]
}
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	42470e3c 	.word	0x42470e3c

080017f0 <RCC_BackupResetCmd>:
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 80017f0:	4b01      	ldr	r3, [pc, #4]	; (80017f8 <RCC_BackupResetCmd+0x8>)
 80017f2:	6018      	str	r0, [r3, #0]
}
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	42470e40 	.word	0x42470e40

080017fc <RCC_I2SCLKConfig>:
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 80017fc:	4b01      	ldr	r3, [pc, #4]	; (8001804 <RCC_I2SCLKConfig+0x8>)
 80017fe:	6018      	str	r0, [r3, #0]
}
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	4247015c 	.word	0x4247015c

08001808 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8001808:	4b04      	ldr	r3, [pc, #16]	; (800181c <RCC_AHB1PeriphClockCmd+0x14>)
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800180a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800180c:	b109      	cbz	r1, 8001812 <RCC_AHB1PeriphClockCmd+0xa>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800180e:	4310      	orrs	r0, r2
 8001810:	e001      	b.n	8001816 <RCC_AHB1PeriphClockCmd+0xe>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8001812:	ea22 0000 	bic.w	r0, r2, r0
 8001816:	6318      	str	r0, [r3, #48]	; 0x30
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	40023800 	.word	0x40023800

08001820 <RCC_AHB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 8001820:	4b04      	ldr	r3, [pc, #16]	; (8001834 <RCC_AHB2PeriphClockCmd+0x14>)
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 8001822:	6b5a      	ldr	r2, [r3, #52]	; 0x34
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001824:	b109      	cbz	r1, 800182a <RCC_AHB2PeriphClockCmd+0xa>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 8001826:	4310      	orrs	r0, r2
 8001828:	e001      	b.n	800182e <RCC_AHB2PeriphClockCmd+0xe>
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
 800182a:	ea22 0000 	bic.w	r0, r2, r0
 800182e:	6358      	str	r0, [r3, #52]	; 0x34
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	40023800 	.word	0x40023800

08001838 <RCC_AHB3PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 8001838:	4b04      	ldr	r3, [pc, #16]	; (800184c <RCC_AHB3PeriphClockCmd+0x14>)
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 800183a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800183c:	b109      	cbz	r1, 8001842 <RCC_AHB3PeriphClockCmd+0xa>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 800183e:	4310      	orrs	r0, r2
 8001840:	e001      	b.n	8001846 <RCC_AHB3PeriphClockCmd+0xe>
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
 8001842:	ea22 0000 	bic.w	r0, r2, r0
 8001846:	6398      	str	r0, [r3, #56]	; 0x38
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	40023800 	.word	0x40023800

08001850 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001850:	4b04      	ldr	r3, [pc, #16]	; (8001864 <RCC_APB1PeriphClockCmd+0x14>)
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001852:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001854:	b109      	cbz	r1, 800185a <RCC_APB1PeriphClockCmd+0xa>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001856:	4310      	orrs	r0, r2
 8001858:	e001      	b.n	800185e <RCC_APB1PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 800185a:	ea22 0000 	bic.w	r0, r2, r0
 800185e:	6418      	str	r0, [r3, #64]	; 0x40
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	40023800 	.word	0x40023800

08001868 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001868:	4b04      	ldr	r3, [pc, #16]	; (800187c <RCC_APB2PeriphClockCmd+0x14>)
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800186a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800186c:	b109      	cbz	r1, 8001872 <RCC_APB2PeriphClockCmd+0xa>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800186e:	4310      	orrs	r0, r2
 8001870:	e001      	b.n	8001876 <RCC_APB2PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001872:	ea22 0000 	bic.w	r0, r2, r0
 8001876:	6458      	str	r0, [r3, #68]	; 0x44
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	40023800 	.word	0x40023800

08001880 <RCC_AHB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8001880:	4b04      	ldr	r3, [pc, #16]	; (8001894 <RCC_AHB1PeriphResetCmd+0x14>)
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 8001882:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001884:	b109      	cbz	r1, 800188a <RCC_AHB1PeriphResetCmd+0xa>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 8001886:	4310      	orrs	r0, r2
 8001888:	e001      	b.n	800188e <RCC_AHB1PeriphResetCmd+0xe>
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 800188a:	ea22 0000 	bic.w	r0, r2, r0
 800188e:	6118      	str	r0, [r3, #16]
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	40023800 	.word	0x40023800

08001898 <RCC_AHB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 8001898:	4b04      	ldr	r3, [pc, #16]	; (80018ac <RCC_AHB2PeriphResetCmd+0x14>)
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 800189a:	695a      	ldr	r2, [r3, #20]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800189c:	b109      	cbz	r1, 80018a2 <RCC_AHB2PeriphResetCmd+0xa>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 800189e:	4310      	orrs	r0, r2
 80018a0:	e001      	b.n	80018a6 <RCC_AHB2PeriphResetCmd+0xe>
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 80018a2:	ea22 0000 	bic.w	r0, r2, r0
 80018a6:	6158      	str	r0, [r3, #20]
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	40023800 	.word	0x40023800

080018b0 <RCC_AHB3PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 80018b0:	4b04      	ldr	r3, [pc, #16]	; (80018c4 <RCC_AHB3PeriphResetCmd+0x14>)
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 80018b2:	699a      	ldr	r2, [r3, #24]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80018b4:	b109      	cbz	r1, 80018ba <RCC_AHB3PeriphResetCmd+0xa>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 80018b6:	4310      	orrs	r0, r2
 80018b8:	e001      	b.n	80018be <RCC_AHB3PeriphResetCmd+0xe>
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
 80018ba:	ea22 0000 	bic.w	r0, r2, r0
 80018be:	6198      	str	r0, [r3, #24]
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	40023800 	.word	0x40023800

080018c8 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80018c8:	4b04      	ldr	r3, [pc, #16]	; (80018dc <RCC_APB1PeriphResetCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 80018ca:	6a1a      	ldr	r2, [r3, #32]
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80018cc:	b109      	cbz	r1, 80018d2 <RCC_APB1PeriphResetCmd+0xa>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 80018ce:	4310      	orrs	r0, r2
 80018d0:	e001      	b.n	80018d6 <RCC_APB1PeriphResetCmd+0xe>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 80018d2:	ea22 0000 	bic.w	r0, r2, r0
 80018d6:	6218      	str	r0, [r3, #32]
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	40023800 	.word	0x40023800

080018e0 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80018e0:	4b04      	ldr	r3, [pc, #16]	; (80018f4 <RCC_APB2PeriphResetCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 80018e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80018e4:	b109      	cbz	r1, 80018ea <RCC_APB2PeriphResetCmd+0xa>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 80018e6:	4310      	orrs	r0, r2
 80018e8:	e001      	b.n	80018ee <RCC_APB2PeriphResetCmd+0xe>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 80018ea:	ea22 0000 	bic.w	r0, r2, r0
 80018ee:	6258      	str	r0, [r3, #36]	; 0x24
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	40023800 	.word	0x40023800

080018f8 <RCC_AHB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80018f8:	4b04      	ldr	r3, [pc, #16]	; (800190c <RCC_AHB1PeriphClockLPModeCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 80018fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80018fc:	b109      	cbz	r1, 8001902 <RCC_AHB1PeriphClockLPModeCmd+0xa>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 80018fe:	4310      	orrs	r0, r2
 8001900:	e001      	b.n	8001906 <RCC_AHB1PeriphClockLPModeCmd+0xe>
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
 8001902:	ea22 0000 	bic.w	r0, r2, r0
 8001906:	6518      	str	r0, [r3, #80]	; 0x50
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	40023800 	.word	0x40023800

08001910 <RCC_AHB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 8001910:	4b04      	ldr	r3, [pc, #16]	; (8001924 <RCC_AHB2PeriphClockLPModeCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 8001912:	6d5a      	ldr	r2, [r3, #84]	; 0x54
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001914:	b109      	cbz	r1, 800191a <RCC_AHB2PeriphClockLPModeCmd+0xa>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 8001916:	4310      	orrs	r0, r2
 8001918:	e001      	b.n	800191e <RCC_AHB2PeriphClockLPModeCmd+0xe>
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
 800191a:	ea22 0000 	bic.w	r0, r2, r0
 800191e:	6558      	str	r0, [r3, #84]	; 0x54
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	40023800 	.word	0x40023800

08001928 <RCC_AHB3PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 8001928:	4b04      	ldr	r3, [pc, #16]	; (800193c <RCC_AHB3PeriphClockLPModeCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 800192a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800192c:	b109      	cbz	r1, 8001932 <RCC_AHB3PeriphClockLPModeCmd+0xa>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 800192e:	4310      	orrs	r0, r2
 8001930:	e001      	b.n	8001936 <RCC_AHB3PeriphClockLPModeCmd+0xe>
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
 8001932:	ea22 0000 	bic.w	r0, r2, r0
 8001936:	6598      	str	r0, [r3, #88]	; 0x58
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	40023800 	.word	0x40023800

08001940 <RCC_APB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001940:	4b04      	ldr	r3, [pc, #16]	; (8001954 <RCC_APB1PeriphClockLPModeCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 8001942:	6e1a      	ldr	r2, [r3, #96]	; 0x60
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001944:	b109      	cbz	r1, 800194a <RCC_APB1PeriphClockLPModeCmd+0xa>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 8001946:	4310      	orrs	r0, r2
 8001948:	e001      	b.n	800194e <RCC_APB1PeriphClockLPModeCmd+0xe>
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
 800194a:	ea22 0000 	bic.w	r0, r2, r0
 800194e:	6618      	str	r0, [r3, #96]	; 0x60
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	40023800 	.word	0x40023800

08001958 <RCC_APB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001958:	4b04      	ldr	r3, [pc, #16]	; (800196c <RCC_APB2PeriphClockLPModeCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 800195a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800195c:	b109      	cbz	r1, 8001962 <RCC_APB2PeriphClockLPModeCmd+0xa>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 800195e:	4310      	orrs	r0, r2
 8001960:	e001      	b.n	8001966 <RCC_APB2PeriphClockLPModeCmd+0xe>
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
 8001962:	ea22 0000 	bic.w	r0, r2, r0
 8001966:	6658      	str	r0, [r3, #100]	; 0x64
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	40023800 	.word	0x40023800

08001970 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
 8001970:	4b04      	ldr	r3, [pc, #16]	; (8001984 <RCC_ITConfig+0x14>)
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8001972:	781a      	ldrb	r2, [r3, #0]
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001974:	b109      	cbz	r1, 800197a <RCC_ITConfig+0xa>
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8001976:	4310      	orrs	r0, r2
 8001978:	e001      	b.n	800197e <RCC_ITConfig+0xe>
  }
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 800197a:	ea22 0000 	bic.w	r0, r2, r0
 800197e:	7018      	strb	r0, [r3, #0]
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	4002380d 	.word	0x4002380d

08001988 <RCC_GetFlagStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8001988:	0943      	lsrs	r3, r0, #5
  if (tmp == 1)               /* The flag to check is in CR register */
 800198a:	2b01      	cmp	r3, #1
 800198c:	4a07      	ldr	r2, [pc, #28]	; (80019ac <RCC_GetFlagStatus+0x24>)
 800198e:	d101      	bne.n	8001994 <RCC_GetFlagStatus+0xc>
  {
    statusreg = RCC->CR;
 8001990:	6813      	ldr	r3, [r2, #0]
 8001992:	e003      	b.n	800199c <RCC_GetFlagStatus+0x14>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8001994:	2b02      	cmp	r3, #2
  {
    statusreg = RCC->BDCR;
 8001996:	bf0c      	ite	eq
 8001998:	6f13      	ldreq	r3, [r2, #112]	; 0x70
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 800199a:	6f53      	ldrne	r3, [r2, #116]	; 0x74
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 800199c:	f000 001f 	and.w	r0, r0, #31
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 80019a0:	fa33 f000 	lsrs.w	r0, r3, r0
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
}
 80019a4:	f000 0001 	and.w	r0, r0, #1
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	40023800 	.word	0x40023800

080019b0 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 80019b0:	b507      	push	{r0, r1, r2, lr}
  __IO uint32_t startupcounter = 0;
 80019b2:	2300      	movs	r3, #0
 80019b4:	9301      	str	r3, [sp, #4]
  ErrorStatus status = ERROR;
  FlagStatus hsestatus = RESET;
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 80019b6:	2031      	movs	r0, #49	; 0x31
 80019b8:	f7ff ffe6 	bl	8001988 <RCC_GetFlagStatus>
    startupcounter++;
 80019bc:	9b01      	ldr	r3, [sp, #4]
 80019be:	3301      	adds	r3, #1
 80019c0:	9301      	str	r3, [sp, #4]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 80019c2:	9b01      	ldr	r3, [sp, #4]
 80019c4:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80019c8:	d001      	beq.n	80019ce <RCC_WaitForHSEStartUp+0x1e>
 80019ca:	2800      	cmp	r0, #0
 80019cc:	d0f3      	beq.n	80019b6 <RCC_WaitForHSEStartUp+0x6>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 80019ce:	2031      	movs	r0, #49	; 0x31
 80019d0:	f7ff ffda 	bl	8001988 <RCC_GetFlagStatus>
  else
  {
    status = ERROR;
  }
  return (status);
}
 80019d4:	3000      	adds	r0, #0
 80019d6:	bf18      	it	ne
 80019d8:	2001      	movne	r0, #1
 80019da:	bd0e      	pop	{r1, r2, r3, pc}

080019dc <RCC_ClearFlag>:
  * @retval None
  */
void RCC_ClearFlag(void)
{
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 80019dc:	4b02      	ldr	r3, [pc, #8]	; (80019e8 <RCC_ClearFlag+0xc>)
 80019de:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80019e0:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80019e4:	675a      	str	r2, [r3, #116]	; 0x74
}
 80019e6:	4770      	bx	lr
 80019e8:	40023800 	.word	0x40023800

080019ec <RCC_GetITStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 80019ec:	4b03      	ldr	r3, [pc, #12]	; (80019fc <RCC_GetITStatus+0x10>)
 80019ee:	68db      	ldr	r3, [r3, #12]
  {
    bitstatus = SET;
 80019f0:	4218      	tst	r0, r3
  {
    bitstatus = RESET;
  }
  /* Return the RCC_IT status */
  return  bitstatus;
}
 80019f2:	bf0c      	ite	eq
 80019f4:	2000      	moveq	r0, #0
 80019f6:	2001      	movne	r0, #1
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	40023800 	.word	0x40023800

08001a00 <RCC_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 8001a00:	4b01      	ldr	r3, [pc, #4]	; (8001a08 <RCC_ClearITPendingBit+0x8>)
 8001a02:	7018      	strb	r0, [r3, #0]
}
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	4002380e 	.word	0x4002380e

08001a0c <SPI_I2S_DeInit>:
  *         is managed by the I2S peripheral clock).
  *             
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 8001a0c:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 8001a0e:	4b15      	ldr	r3, [pc, #84]	; (8001a64 <SPI_I2S_DeInit+0x58>)
 8001a10:	4298      	cmp	r0, r3
 8001a12:	d10b      	bne.n	8001a2c <SPI_I2S_DeInit+0x20>
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 8001a14:	2101      	movs	r1, #1
 8001a16:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001a1a:	f7ff ff61 	bl	80018e0 <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 8001a1e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001a22:	2100      	movs	r1, #0
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
    }
  }
}
 8001a24:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  if (SPIx == SPI1)
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 8001a28:	f7ff bf5a 	b.w	80018e0 <RCC_APB2PeriphResetCmd>
  }
  else if (SPIx == SPI2)
 8001a2c:	4b0e      	ldr	r3, [pc, #56]	; (8001a68 <SPI_I2S_DeInit+0x5c>)
 8001a2e:	4298      	cmp	r0, r3
 8001a30:	d107      	bne.n	8001a42 <SPI_I2S_DeInit+0x36>
  {
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 8001a32:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001a36:	2101      	movs	r1, #1
 8001a38:	f7ff ff46 	bl	80018c8 <RCC_APB1PeriphResetCmd>
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 8001a3c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001a40:	e009      	b.n	8001a56 <SPI_I2S_DeInit+0x4a>
    }
  else
  {
    if (SPIx == SPI3)
 8001a42:	4b0a      	ldr	r3, [pc, #40]	; (8001a6c <SPI_I2S_DeInit+0x60>)
 8001a44:	4298      	cmp	r0, r3
 8001a46:	d10b      	bne.n	8001a60 <SPI_I2S_DeInit+0x54>
    {
      /* Enable SPI3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 8001a48:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001a4c:	2101      	movs	r1, #1
 8001a4e:	f7ff ff3b 	bl	80018c8 <RCC_APB1PeriphResetCmd>
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 8001a52:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001a56:	2100      	movs	r1, #0
    }
  }
}
 8001a58:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if (SPIx == SPI3)
    {
      /* Enable SPI3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 8001a5c:	f7ff bf34 	b.w	80018c8 <RCC_APB1PeriphResetCmd>
 8001a60:	bd08      	pop	{r3, pc}
 8001a62:	bf00      	nop
 8001a64:	40013000 	.word	0x40013000
 8001a68:	40003800 	.word	0x40003800
 8001a6c:	40003c00 	.word	0x40003c00

08001a70 <SPI_Init>:
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001a70:	880b      	ldrh	r3, [r1, #0]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8001a72:	8802      	ldrh	r2, [r0, #0]
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8001a74:	b510      	push	{r4, lr}
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001a76:	884c      	ldrh	r4, [r1, #2]
 8001a78:	4323      	orrs	r3, r4
 8001a7a:	888c      	ldrh	r4, [r1, #4]
 8001a7c:	4323      	orrs	r3, r4
 8001a7e:	88cc      	ldrh	r4, [r1, #6]
 8001a80:	4323      	orrs	r3, r4
 8001a82:	890c      	ldrh	r4, [r1, #8]
 8001a84:	4323      	orrs	r3, r4
 8001a86:	894c      	ldrh	r4, [r1, #10]
 8001a88:	4323      	orrs	r3, r4
 8001a8a:	898c      	ldrh	r4, [r1, #12]
 8001a8c:	4323      	orrs	r3, r4
 8001a8e:	89cc      	ldrh	r4, [r1, #14]

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8001a90:	f402 5241 	and.w	r2, r2, #12352	; 0x3040
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001a94:	4323      	orrs	r3, r4
 8001a96:	4313      	orrs	r3, r2
 8001a98:	b29b      	uxth	r3, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8001a9a:	8003      	strh	r3, [r0, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 8001a9c:	8b83      	ldrh	r3, [r0, #28]
 8001a9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001aa2:	041b      	lsls	r3, r3, #16
 8001aa4:	0c1b      	lsrs	r3, r3, #16
 8001aa6:	8383      	strh	r3, [r0, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8001aa8:	8a0b      	ldrh	r3, [r1, #16]
 8001aaa:	8203      	strh	r3, [r0, #16]
}
 8001aac:	bd10      	pop	{r4, pc}

08001aae <I2S_Init>:
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 8001aae:	8b83      	ldrh	r3, [r0, #28]
 8001ab0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001ab4:	f023 030f 	bic.w	r3, r3, #15
 8001ab8:	041b      	lsls	r3, r3, #16
 8001aba:	0c1b      	lsrs	r3, r3, #16
 8001abc:	8383      	strh	r3, [r0, #28]
  SPIx->I2SPR = 0x0002;
 8001abe:	2302      	movs	r3, #2
 8001ac0:	8403      	strh	r3, [r0, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 8001ac2:	688b      	ldr	r3, [r1, #8]
  *         to the value of the the source clock frequency (in Hz).
  *  
  * @retval None
  */
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
 8001ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
  SPIx->I2SPR = 0x0002;
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 8001ac6:	8b85      	ldrh	r5, [r0, #28]
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 8001ac8:	2b02      	cmp	r3, #2
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
  SPIx->I2SPR = 0x0002;
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 8001aca:	b2ad      	uxth	r5, r5
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 8001acc:	d038      	beq.n	8001b40 <I2S_Init+0x92>
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 8001ace:	4a29      	ldr	r2, [pc, #164]	; (8001b74 <I2S_Init+0xc6>)
  }
  /* If the requested audio frequency is not the default, compute the prescaler */
  else
  {
    /* Check the frame length (For the Prescaler computing) *******************/
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 8001ad0:	888e      	ldrh	r6, [r1, #4]
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 8001ad2:	6894      	ldr	r4, [r2, #8]
  {
    /* Check the frame length (For the Prescaler computing) *******************/
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
    {
      /* Packet length is 16 bits */
      packetlength = 1;
 8001ad4:	2e00      	cmp	r6, #0
 8001ad6:	bf14      	ite	ne
 8001ad8:	2602      	movne	r6, #2
 8001ada:	2601      	moveq	r6, #1
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 8001adc:	0224      	lsls	r4, r4, #8
 8001ade:	d503      	bpl.n	8001ae8 <I2S_Init+0x3a>
    {
      RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
 8001ae0:	6894      	ldr	r4, [r2, #8]
 8001ae2:	f424 0400 	bic.w	r4, r4, #8388608	; 0x800000
 8001ae6:	6094      	str	r4, [r2, #8]
    }    
    
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 8001ae8:	f8d2 4084 	ldr.w	r4, [r2, #132]	; 0x84
                      (RCC_PLLI2SCFGR_PLLI2SN >> 6));
    
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
 8001aec:	f8d2 7084 	ldr.w	r7, [r2, #132]	; 0x84
                      (RCC_PLLI2SCFGR_PLLI2SR >> 28));
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
 8001af0:	6852      	ldr	r2, [r2, #4]
    
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 8001af2:	f8df c084 	ldr.w	ip, [pc, #132]	; 8001b78 <I2S_Init+0xca>
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
                      (RCC_PLLI2SCFGR_PLLI2SR >> 28));
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
 8001af6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 8001afa:	fbbc f2f2 	udiv	r2, ip, r2
    {
      RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
    }    
    
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 8001afe:	f3c4 1488 	ubfx	r4, r4, #6, #9
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
    
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 8001b02:	4354      	muls	r4, r2
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
                      (RCC_PLLI2SCFGR_PLLI2SN >> 6));
    
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
 8001b04:	f3c7 7202 	ubfx	r2, r7, #28, #3
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
    
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 8001b08:	fbb4 f4f2 	udiv	r4, r4, r2
  #endif /* I2S_EXTERNAL_CLOCK_VAL */
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 8001b0c:	88ca      	ldrh	r2, [r1, #6]
 8001b0e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8001b12:	f04f 020a 	mov.w	r2, #10
 8001b16:	d101      	bne.n	8001b1c <I2S_Init+0x6e>
    {
      /* MCLK output is enabled */
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8001b18:	0a24      	lsrs	r4, r4, #8
 8001b1a:	e002      	b.n	8001b22 <I2S_Init+0x74>
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8001b1c:	0176      	lsls	r6, r6, #5
 8001b1e:	fbb4 f4f6 	udiv	r4, r4, r6
 8001b22:	4362      	muls	r2, r4
 8001b24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b28:	3305      	adds	r3, #5
    }
    
    /* Remove the flatting point */
    tmp = tmp / 10;  
 8001b2a:	220a      	movs	r2, #10
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8001b2c:	b29b      	uxth	r3, r3
    }
    
    /* Remove the flatting point */
    tmp = tmp / 10;  
 8001b2e:	fbb3 f3f2 	udiv	r3, r3, r2
      
    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 8001b32:	f003 0201 	and.w	r2, r3, #1
   
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
 8001b36:	0212      	lsls	r2, r2, #8
      
    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 8001b38:	f3c3 034f 	ubfx	r3, r3, #1, #16
   
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
 8001b3c:	b292      	uxth	r2, r2
 8001b3e:	e000      	b.n	8001b42 <I2S_Init+0x94>
  tmpreg = SPIx->I2SCFGR;
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
  {
    i2sodd = (uint16_t)0;
 8001b40:	2200      	movs	r2, #0
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 8001b42:	1e9c      	subs	r4, r3, #2
 8001b44:	b2a4      	uxth	r4, r4
  {
    /* Set the default values */
    i2sdiv = 2;
    i2sodd = 0;
 8001b46:	2cfe      	cmp	r4, #254	; 0xfe
 8001b48:	bf28      	it	cs
 8001b4a:	2200      	movcs	r2, #0
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 8001b4c:	88cc      	ldrh	r4, [r1, #6]
  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
  {
    /* Set the default values */
    i2sdiv = 2;
    i2sodd = 0;
 8001b4e:	bf28      	it	cs
 8001b50:	2302      	movcs	r3, #2
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 8001b52:	4313      	orrs	r3, r2
 8001b54:	4323      	orrs	r3, r4
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	8403      	strh	r3, [r0, #32]
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8001b5a:	880b      	ldrh	r3, [r1, #0]

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 8001b5c:	884a      	ldrh	r2, [r1, #2]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8001b5e:	432b      	orrs	r3, r5
 8001b60:	f443 6300 	orr.w	r3, r3, #2048	; 0x800

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 8001b64:	4313      	orrs	r3, r2
 8001b66:	888a      	ldrh	r2, [r1, #4]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	898a      	ldrh	r2, [r1, #12]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	b29b      	uxth	r3, r3
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  SPIx->I2SCFGR = tmpreg;
 8001b70:	8383      	strh	r3, [r0, #28]
}
 8001b72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b74:	40023800 	.word	0x40023800
 8001b78:	007a1200 	.word	0x007a1200

08001b7c <SPI_StructInit>:
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	8003      	strh	r3, [r0, #0]
  /* initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 8001b80:	8043      	strh	r3, [r0, #2]
  /* initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 8001b82:	8083      	strh	r3, [r0, #4]
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 8001b84:	80c3      	strh	r3, [r0, #6]
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 8001b86:	8103      	strh	r3, [r0, #8]
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 8001b88:	8143      	strh	r3, [r0, #10]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 8001b8a:	8183      	strh	r3, [r0, #12]
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 8001b8c:	81c3      	strh	r3, [r0, #14]
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 8001b8e:	2307      	movs	r3, #7
 8001b90:	8203      	strh	r3, [r0, #16]
}
 8001b92:	4770      	bx	lr

08001b94 <I2S_StructInit>:
  */
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
{
/*--------------- Reset I2S init structure parameters values -----------------*/
  /* Initialize the I2S_Mode member */
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 8001b94:	2300      	movs	r3, #0
  
  /* Initialize the I2S_MCLKOutput member */
  I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
  
  /* Initialize the I2S_AudioFreq member */
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 8001b96:	2202      	movs	r2, #2
  */
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
{
/*--------------- Reset I2S init structure parameters values -----------------*/
  /* Initialize the I2S_Mode member */
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 8001b98:	8003      	strh	r3, [r0, #0]
  
  /* Initialize the I2S_Standard member */
  I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
 8001b9a:	8043      	strh	r3, [r0, #2]
  
  /* Initialize the I2S_DataFormat member */
  I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
 8001b9c:	8083      	strh	r3, [r0, #4]
  
  /* Initialize the I2S_MCLKOutput member */
  I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
 8001b9e:	80c3      	strh	r3, [r0, #6]
  
  /* Initialize the I2S_AudioFreq member */
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 8001ba0:	6082      	str	r2, [r0, #8]
  
  /* Initialize the I2S_CPOL member */
  I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
 8001ba2:	8183      	strh	r3, [r0, #12]
}
 8001ba4:	4770      	bx	lr

08001ba6 <SPI_Cmd>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8001ba6:	8803      	ldrh	r3, [r0, #0]
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001ba8:	b119      	cbz	r1, 8001bb2 <SPI_Cmd+0xc>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bb0:	e003      	b.n	8001bba <SPI_Cmd+0x14>
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 8001bb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001bb6:	041b      	lsls	r3, r3, #16
 8001bb8:	0c1b      	lsrs	r3, r3, #16
 8001bba:	8003      	strh	r3, [r0, #0]
 8001bbc:	4770      	bx	lr

08001bbe <I2S_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 8001bbe:	8b83      	ldrh	r3, [r0, #28]
{
  /* Check the parameters */
  assert_param(IS_SPI_23_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001bc0:	b119      	cbz	r1, 8001bca <I2S_Cmd+0xc>
  {
    /* Enable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bc8:	e003      	b.n	8001bd2 <I2S_Cmd+0x14>
  }
  else
  {
    /* Disable the selected SPI peripheral in I2S mode */
    SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
 8001bca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001bce:	041b      	lsls	r3, r3, #16
 8001bd0:	0c1b      	lsrs	r3, r3, #16
 8001bd2:	8383      	strh	r3, [r0, #28]
 8001bd4:	4770      	bx	lr

08001bd6 <SPI_DataSizeConfig>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DATASIZE(SPI_DataSize));
  /* Clear DFF bit */
  SPIx->CR1 &= (uint16_t)~SPI_DataSize_16b;
 8001bd6:	8803      	ldrh	r3, [r0, #0]
 8001bd8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001bdc:	041b      	lsls	r3, r3, #16
 8001bde:	0c1b      	lsrs	r3, r3, #16
 8001be0:	8003      	strh	r3, [r0, #0]
  /* Set new DFF bit value */
  SPIx->CR1 |= SPI_DataSize;
 8001be2:	8803      	ldrh	r3, [r0, #0]
 8001be4:	b29b      	uxth	r3, r3
 8001be6:	430b      	orrs	r3, r1
 8001be8:	8003      	strh	r3, [r0, #0]
}
 8001bea:	4770      	bx	lr

08001bec <SPI_BiDirectionalLineConfig>:
void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
 8001bec:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
  {
    /* Set the Tx only mode */
    SPIx->CR1 |= SPI_Direction_Tx;
 8001bf0:	8803      	ldrh	r3, [r0, #0]
void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
 8001bf2:	d103      	bne.n	8001bfc <SPI_BiDirectionalLineConfig+0x10>
  {
    /* Set the Tx only mode */
    SPIx->CR1 |= SPI_Direction_Tx;
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bfa:	e003      	b.n	8001c04 <SPI_BiDirectionalLineConfig+0x18>
  }
  else
  {
    /* Set the Rx only mode */
    SPIx->CR1 &= SPI_Direction_Rx;
 8001bfc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c00:	041b      	lsls	r3, r3, #16
 8001c02:	0c1b      	lsrs	r3, r3, #16
 8001c04:	8003      	strh	r3, [r0, #0]
 8001c06:	4770      	bx	lr

08001c08 <SPI_NSSInternalSoftwareConfig>:
void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 8001c08:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8001c0c:	4299      	cmp	r1, r3
  {
    /* Set NSS pin internally by software */
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 8001c0e:	8803      	ldrh	r3, [r0, #0]
void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 8001c10:	d003      	beq.n	8001c1a <SPI_NSSInternalSoftwareConfig+0x12>
  {
    /* Set NSS pin internally by software */
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c18:	e003      	b.n	8001c22 <SPI_NSSInternalSoftwareConfig+0x1a>
  }
  else
  {
    /* Reset NSS pin internally by software */
    SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 8001c1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c1e:	041b      	lsls	r3, r3, #16
 8001c20:	0c1b      	lsrs	r3, r3, #16
 8001c22:	8003      	strh	r3, [r0, #0]
 8001c24:	4770      	bx	lr

08001c26 <SPI_SSOutputCmd>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
 8001c26:	8883      	ldrh	r3, [r0, #4]
void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001c28:	b119      	cbz	r1, 8001c32 <SPI_SSOutputCmd+0xc>
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	f043 0304 	orr.w	r3, r3, #4
 8001c30:	e003      	b.n	8001c3a <SPI_SSOutputCmd+0x14>
  }
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_SSOE);
 8001c32:	f023 0304 	bic.w	r3, r3, #4
 8001c36:	041b      	lsls	r3, r3, #16
 8001c38:	0c1b      	lsrs	r3, r3, #16
 8001c3a:	8083      	strh	r3, [r0, #4]
 8001c3c:	4770      	bx	lr

08001c3e <SPI_TIModeCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TI mode for the selected SPI peripheral */
    SPIx->CR2 |= SPI_CR2_FRF;
 8001c3e:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001c40:	b119      	cbz	r1, 8001c4a <SPI_TIModeCmd+0xc>
  {
    /* Enable the TI mode for the selected SPI peripheral */
    SPIx->CR2 |= SPI_CR2_FRF;
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	f043 0310 	orr.w	r3, r3, #16
 8001c48:	e003      	b.n	8001c52 <SPI_TIModeCmd+0x14>
  }
  else
  {
    /* Disable the TI mode for the selected SPI peripheral */
    SPIx->CR2 &= (uint16_t)~SPI_CR2_FRF;
 8001c4a:	f023 0310 	bic.w	r3, r3, #16
 8001c4e:	041b      	lsls	r3, r3, #16
 8001c50:	0c1b      	lsrs	r3, r3, #16
 8001c52:	8083      	strh	r3, [r0, #4]
 8001c54:	4770      	bx	lr

08001c56 <I2S_FullDuplexConfig>:
  assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 8001c56:	8b83      	ldrh	r3, [r0, #28]
 8001c58:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001c5c:	f023 030f 	bic.w	r3, r3, #15
 8001c60:	041b      	lsls	r3, r3, #16
 8001c62:	0c1b      	lsrs	r3, r3, #16
 8001c64:	8383      	strh	r3, [r0, #28]
  I2Sxext->I2SPR = 0x0002;
 8001c66:	2302      	movs	r3, #2
 8001c68:	8403      	strh	r3, [r0, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 8001c6a:	880b      	ldrh	r3, [r1, #0]
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
  I2Sxext->I2SPR = 0x0002;
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
 8001c6c:	8b82      	ldrh	r2, [r0, #28]
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 8001c6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  * @note   The I2S full duplex extension can be configured in slave mode only.    
  *  
  * @retval None
  */
void I2S_FullDuplexConfig(SPI_TypeDef* I2Sxext, I2S_InitTypeDef* I2S_InitStruct)
{
 8001c72:	b510      	push	{r4, lr}
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
  I2Sxext->I2SPR = 0x0002;
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
 8001c74:	b292      	uxth	r2, r2
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 8001c76:	d005      	beq.n	8001c84 <I2S_FullDuplexConfig+0x2e>
  {
    tmp = I2S_Mode_SlaveRx;
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	bf0c      	ite	eq
 8001c7c:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8001c80:	2300      	movne	r3, #0
 8001c82:	e001      	b.n	8001c88 <I2S_FullDuplexConfig+0x32>
 8001c84:	f44f 7380 	mov.w	r3, #256	; 0x100
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8001c88:	884c      	ldrh	r4, [r1, #2]
 8001c8a:	4322      	orrs	r2, r4
    }
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8001c8c:	888c      	ldrh	r4, [r1, #4]
 8001c8e:	8989      	ldrh	r1, [r1, #12]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8001c90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    }
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8001c94:	4322      	orrs	r2, r4
 8001c96:	430a      	orrs	r2, r1
 8001c98:	b292      	uxth	r2, r2
 8001c9a:	4313      	orrs	r3, r2
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  I2Sxext->I2SCFGR = tmpreg;
 8001c9c:	8383      	strh	r3, [r0, #28]
}
 8001c9e:	bd10      	pop	{r4, pc}

08001ca0 <SPI_I2S_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 8001ca0:	8980      	ldrh	r0, [r0, #12]
}
 8001ca2:	b280      	uxth	r0, r0
 8001ca4:	4770      	bx	lr

08001ca6 <SPI_I2S_SendData>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8001ca6:	8181      	strh	r1, [r0, #12]
}
 8001ca8:	4770      	bx	lr

08001caa <SPI_CalculateCRC>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI CRC calculation */
    SPIx->CR1 |= SPI_CR1_CRCEN;
 8001caa:	8803      	ldrh	r3, [r0, #0]
void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001cac:	b119      	cbz	r1, 8001cb6 <SPI_CalculateCRC+0xc>
  {
    /* Enable the selected SPI CRC calculation */
    SPIx->CR1 |= SPI_CR1_CRCEN;
 8001cae:	b29b      	uxth	r3, r3
 8001cb0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001cb4:	e003      	b.n	8001cbe <SPI_CalculateCRC+0x14>
  }
  else
  {
    /* Disable the selected SPI CRC calculation */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCEN);
 8001cb6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001cba:	041b      	lsls	r3, r3, #16
 8001cbc:	0c1b      	lsrs	r3, r3, #16
 8001cbe:	8003      	strh	r3, [r0, #0]
 8001cc0:	4770      	bx	lr

08001cc2 <SPI_TransmitCRC>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Enable the selected SPI CRC transmission */
  SPIx->CR1 |= SPI_CR1_CRCNEXT;
 8001cc2:	8803      	ldrh	r3, [r0, #0]
 8001cc4:	b29b      	uxth	r3, r3
 8001cc6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001cca:	8003      	strh	r3, [r0, #0]
}
 8001ccc:	4770      	bx	lr

08001cce <SPI_GetCRC>:
{
  uint16_t crcreg = 0;
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_CRC(SPI_CRC));
  if (SPI_CRC != SPI_CRC_Rx)
 8001cce:	2901      	cmp	r1, #1
 8001cd0:	d002      	beq.n	8001cd8 <SPI_GetCRC+0xa>
  {
    /* Get the Tx CRC register */
    crcreg = SPIx->TXCRCR;
 8001cd2:	8b00      	ldrh	r0, [r0, #24]
 8001cd4:	b280      	uxth	r0, r0
 8001cd6:	4770      	bx	lr
  }
  else
  {
    /* Get the Rx CRC register */
    crcreg = SPIx->RXCRCR;
 8001cd8:	8a80      	ldrh	r0, [r0, #20]
 8001cda:	b280      	uxth	r0, r0
  }
  /* Return the selected CRC register */
  return crcreg;
}
 8001cdc:	4770      	bx	lr

08001cde <SPI_GetCRCPolynomial>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the CRC polynomial register */
  return SPIx->CRCPR;
 8001cde:	8a00      	ldrh	r0, [r0, #16]
}
 8001ce0:	b280      	uxth	r0, r0
 8001ce2:	4770      	bx	lr

08001ce4 <SPI_I2S_DMACmd>:
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 8001ce4:	8883      	ldrh	r3, [r0, #4]
 8001ce6:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
 8001ce8:	b10a      	cbz	r2, 8001cee <SPI_I2S_DMACmd+0xa>
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 8001cea:	4319      	orrs	r1, r3
 8001cec:	e001      	b.n	8001cf2 <SPI_I2S_DMACmd+0xe>
  }
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 8001cee:	ea23 0101 	bic.w	r1, r3, r1
 8001cf2:	8081      	strh	r1, [r0, #4]
 8001cf4:	4770      	bx	lr

08001cf6 <SPI_I2S_ITConfig>:

  /* Get the SPI IT index */
  itpos = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 8001cf6:	0909      	lsrs	r1, r1, #4
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	408b      	lsls	r3, r1
 8001cfc:	b29b      	uxth	r3, r3

  if (NewState != DISABLE)
 8001cfe:	b11a      	cbz	r2, 8001d08 <SPI_I2S_ITConfig+0x12>
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 8001d00:	8882      	ldrh	r2, [r0, #4]
 8001d02:	b292      	uxth	r2, r2
 8001d04:	4313      	orrs	r3, r2
 8001d06:	e003      	b.n	8001d10 <SPI_I2S_ITConfig+0x1a>
  }
  else
  {
    /* Disable the selected SPI interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
 8001d08:	8882      	ldrh	r2, [r0, #4]
 8001d0a:	b292      	uxth	r2, r2
 8001d0c:	ea22 0303 	bic.w	r3, r2, r3
 8001d10:	8083      	strh	r3, [r0, #4]
 8001d12:	4770      	bx	lr

08001d14 <SPI_I2S_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8001d14:	8903      	ldrh	r3, [r0, #8]
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8001d16:	4219      	tst	r1, r3
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
}
 8001d18:	bf0c      	ite	eq
 8001d1a:	2000      	moveq	r0, #0
 8001d1c:	2001      	movne	r0, #1
 8001d1e:	4770      	bx	lr

08001d20 <SPI_I2S_ClearFlag>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));
    
  /* Clear the selected SPI CRC Error (CRCERR) flag */
  SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
 8001d20:	43c9      	mvns	r1, r1
 8001d22:	b289      	uxth	r1, r1
 8001d24:	8101      	strh	r1, [r0, #8]
}
 8001d26:	4770      	bx	lr

08001d28 <SPI_I2S_GetITStatus>:
  *            @arg I2S_IT_UDR: Underrun interrupt.  
  *            @arg SPI_I2S_IT_TIFRFE: Format Error interrupt.  
  * @retval The new state of SPI_I2S_IT (SET or RESET).
  */
ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
{
 8001d28:	b510      	push	{r4, lr}

  /* Set the IT mask */
  itmask = 0x01 << itmask;

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 8001d2a:	8884      	ldrh	r4, [r0, #4]

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8001d2c:	8900      	ldrh	r0, [r0, #8]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));

  /* Get the SPI_I2S_IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 8001d2e:	2301      	movs	r3, #1
 8001d30:	f001 020f 	and.w	r2, r1, #15

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8001d34:	b280      	uxth	r0, r0
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));

  /* Get the SPI_I2S_IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 8001d36:	fa13 f202 	lsls.w	r2, r3, r2

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8001d3a:	4010      	ands	r0, r2

  /* Set the IT mask */
  itmask = 0x01 << itmask;

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 8001d3c:	b2a4      	uxth	r4, r4

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8001d3e:	d005      	beq.n	8001d4c <SPI_I2S_GetITStatus+0x24>

  /* Get the SPI_I2S_IT IT mask */
  itmask = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = 0x01 << itmask;
 8001d40:	0909      	lsrs	r1, r1, #4
 8001d42:	408b      	lsls	r3, r1
  *            @arg SPI_IT_CRCERR: CRC Error interrupt.
  *            @arg I2S_IT_UDR: Underrun interrupt.  
  *            @arg SPI_I2S_IT_TIFRFE: Format Error interrupt.  
  * @retval The new state of SPI_I2S_IT (SET or RESET).
  */
ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
 8001d44:	421c      	tst	r4, r3

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
  {
    /* SPI_I2S_IT is set */
    bitstatus = SET;
 8001d46:	bf0c      	ite	eq
 8001d48:	2000      	moveq	r0, #0
 8001d4a:	2001      	movne	r0, #1
    /* SPI_I2S_IT is reset */
    bitstatus = RESET;
  }
  /* Return the SPI_I2S_IT status */
  return bitstatus;
}
 8001d4c:	bd10      	pop	{r4, pc}

08001d4e <SPI_I2S_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_IT(SPI_I2S_IT));

  /* Get the SPI_I2S IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 8001d4e:	f001 010f 	and.w	r1, r1, #15
 8001d52:	2301      	movs	r3, #1
 8001d54:	408b      	lsls	r3, r1

  /* Clear the selected SPI CRC Error (CRCERR) interrupt pending bit */
  SPIx->SR = (uint16_t)~itpos;
 8001d56:	43db      	mvns	r3, r3
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	8103      	strh	r3, [r0, #8]
}
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop

08001d60 <SYSCFG_DeInit>:
  *   registers to their default reset values.
  * @param  None
  * @retval None
  */
void SYSCFG_DeInit(void)
{
 8001d60:	b508      	push	{r3, lr}
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8001d62:	2101      	movs	r1, #1
 8001d64:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001d68:	f7ff fdba 	bl	80018e0 <RCC_APB2PeriphResetCmd>
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, DISABLE);
 8001d6c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001d70:	2100      	movs	r1, #0
}
 8001d72:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  * @retval None
  */
void SYSCFG_DeInit(void)
{
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, ENABLE);
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, DISABLE);
 8001d76:	f7ff bdb3 	b.w	80018e0 <RCC_APB2PeriphResetCmd>

08001d7a <SYSCFG_MemoryRemapConfig>:
void SYSCFG_MemoryRemapConfig(uint8_t SYSCFG_MemoryRemap)
{
  /* Check the parameters */
  assert_param(IS_SYSCFG_MEMORY_REMAP_CONFING(SYSCFG_MemoryRemap));

  SYSCFG->MEMRMP = SYSCFG_MemoryRemap;
 8001d7a:	4b01      	ldr	r3, [pc, #4]	; (8001d80 <SYSCFG_MemoryRemapConfig+0x6>)
 8001d7c:	6018      	str	r0, [r3, #0]
}
 8001d7e:	4770      	bx	lr
 8001d80:	40013800 	.word	0x40013800

08001d84 <SYSCFG_EXTILineConfig>:

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8001d84:	f001 0203 	and.w	r2, r1, #3
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8001d88:	0889      	lsrs	r1, r1, #2
 8001d8a:	4b0a      	ldr	r3, [pc, #40]	; (8001db4 <SYSCFG_EXTILineConfig+0x30>)
 8001d8c:	3102      	adds	r1, #2
  *           This parameter can be EXTI_PinSourcex where x can be (0..15, except
  *           for EXTI_PortSourceGPIOI x can be (0..11).
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 8001d8e:	b530      	push	{r4, r5, lr}

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8001d90:	0092      	lsls	r2, r2, #2
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8001d92:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8001d96:	240f      	movs	r4, #15
 8001d98:	4094      	lsls	r4, r2
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8001d9a:	ea25 0404 	bic.w	r4, r5, r4
 8001d9e:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8001da2:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
 8001da6:	fa10 f202 	lsls.w	r2, r0, r2
 8001daa:	4314      	orrs	r4, r2
 8001dac:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
}
 8001db0:	bd30      	pop	{r4, r5, pc}
 8001db2:	bf00      	nop
 8001db4:	40013800 	.word	0x40013800

08001db8 <SYSCFG_ETH_MediaInterfaceConfig>:
  */
void SYSCFG_ETH_MediaInterfaceConfig(uint32_t SYSCFG_ETH_MediaInterface) 
{ 
  assert_param(IS_SYSCFG_ETH_MEDIA_INTERFACE(SYSCFG_ETH_MediaInterface)); 
  /* Configure MII_RMII selection bit */ 
  *(__IO uint32_t *) PMC_MII_RMII_SEL_BB = SYSCFG_ETH_MediaInterface; 
 8001db8:	4b01      	ldr	r3, [pc, #4]	; (8001dc0 <SYSCFG_ETH_MediaInterfaceConfig+0x8>)
 8001dba:	6018      	str	r0, [r3, #0]
}
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	422700dc 	.word	0x422700dc

08001dc4 <SYSCFG_CompensationCellCmd>:
void SYSCFG_CompensationCellCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CMPCR_CMP_PD_BB = (uint32_t)NewState;
 8001dc4:	4b01      	ldr	r3, [pc, #4]	; (8001dcc <SYSCFG_CompensationCellCmd+0x8>)
 8001dc6:	6018      	str	r0, [r3, #0]
}
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	42270400 	.word	0x42270400

08001dd0 <SYSCFG_GetCompensationCellStatus>:
  */
FlagStatus SYSCFG_GetCompensationCellStatus(void)
{
  FlagStatus bitstatus = RESET;
    
  if ((SYSCFG->CMPCR & SYSCFG_CMPCR_READY ) != (uint32_t)RESET)
 8001dd0:	4b02      	ldr	r3, [pc, #8]	; (8001ddc <SYSCFG_GetCompensationCellStatus+0xc>)
 8001dd2:	6a18      	ldr	r0, [r3, #32]
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8001dd4:	f3c0 2000 	ubfx	r0, r0, #8, #1
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	40013800 	.word	0x40013800

08001de0 <TI1_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8001de0:	b530      	push	{r4, r5, lr}
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8001de2:	8c04      	ldrh	r4, [r0, #32]
 8001de4:	f024 0401 	bic.w	r4, r4, #1
 8001de8:	0424      	lsls	r4, r4, #16
 8001dea:	0c24      	lsrs	r4, r4, #16
 8001dec:	8404      	strh	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001dee:	8b05      	ldrh	r5, [r0, #24]
  tmpccer = TIMx->CCER;
 8001df0:	8c04      	ldrh	r4, [r0, #32]
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;
 8001df2:	b2ad      	uxth	r5, r5
  tmpccer = TIMx->CCER;
 8001df4:	b2a4      	uxth	r4, r4

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 8001df6:	f025 05f3 	bic.w	r5, r5, #243	; 0xf3
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8001dfa:	4315      	orrs	r5, r2

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001dfc:	f024 040a 	bic.w	r4, r4, #10
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8001e00:	ea45 1503 	orr.w	r5, r5, r3, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8001e04:	f044 0401 	orr.w	r4, r4, #1
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8001e08:	b2ad      	uxth	r5, r5

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8001e0a:	430c      	orrs	r4, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001e0c:	8305      	strh	r5, [r0, #24]
  TIMx->CCER = tmpccer;
 8001e0e:	8404      	strh	r4, [r0, #32]
}
 8001e10:	bd30      	pop	{r4, r5, pc}

08001e12 <TI2_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8001e12:	b530      	push	{r4, r5, lr}
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8001e14:	8c04      	ldrh	r4, [r0, #32]
 8001e16:	f024 0410 	bic.w	r4, r4, #16
 8001e1a:	0424      	lsls	r4, r4, #16
 8001e1c:	0c24      	lsrs	r4, r4, #16
 8001e1e:	8404      	strh	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001e20:	8b04      	ldrh	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8001e22:	8c05      	ldrh	r5, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8001e24:	f424 7440 	bic.w	r4, r4, #768	; 0x300
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
 8001e28:	b2ad      	uxth	r5, r5
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8001e2a:	0524      	lsls	r4, r4, #20
 8001e2c:	0d24      	lsrs	r4, r4, #20
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001e2e:	f025 05a0 	bic.w	r5, r5, #160	; 0xa0
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8001e32:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8001e36:	f045 0510 	orr.w	r5, r5, #16
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8001e3a:	ea44 3403 	orr.w	r4, r4, r3, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8001e3e:	ea45 1501 	orr.w	r5, r5, r1, lsl #4
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8001e42:	b2a4      	uxth	r4, r4

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8001e44:	b2ad      	uxth	r5, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001e46:	8304      	strh	r4, [r0, #24]
  TIMx->CCER = tmpccer;
 8001e48:	8405      	strh	r5, [r0, #32]
}
 8001e4a:	bd30      	pop	{r4, r5, pc}

08001e4c <TIM_DeInit>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval None

  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 8001e4c:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
 8001e4e:	4b47      	ldr	r3, [pc, #284]	; (8001f6c <TIM_DeInit+0x120>)
 8001e50:	4298      	cmp	r0, r3
 8001e52:	d105      	bne.n	8001e60 <TIM_DeInit+0x14>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 8001e54:	2001      	movs	r0, #1
 8001e56:	4601      	mov	r1, r0
 8001e58:	f7ff fd42 	bl	80018e0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 8001e5c:	2001      	movs	r0, #1
 8001e5e:	e03d      	b.n	8001edc <TIM_DeInit+0x90>
  } 
  else if (TIMx == TIM2) 
 8001e60:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001e64:	d105      	bne.n	8001e72 <TIM_DeInit+0x26>
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 8001e66:	2001      	movs	r0, #1
 8001e68:	4601      	mov	r1, r0
 8001e6a:	f7ff fd2d 	bl	80018c8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 8001e6e:	2001      	movs	r0, #1
 8001e70:	e076      	b.n	8001f60 <TIM_DeInit+0x114>
  }  
  else if (TIMx == TIM3)
 8001e72:	4b3f      	ldr	r3, [pc, #252]	; (8001f70 <TIM_DeInit+0x124>)
 8001e74:	4298      	cmp	r0, r3
 8001e76:	d105      	bne.n	8001e84 <TIM_DeInit+0x38>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 8001e78:	2002      	movs	r0, #2
 8001e7a:	2101      	movs	r1, #1
 8001e7c:	f7ff fd24 	bl	80018c8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 8001e80:	2002      	movs	r0, #2
 8001e82:	e06d      	b.n	8001f60 <TIM_DeInit+0x114>
  }  
  else if (TIMx == TIM4)
 8001e84:	4b3b      	ldr	r3, [pc, #236]	; (8001f74 <TIM_DeInit+0x128>)
 8001e86:	4298      	cmp	r0, r3
 8001e88:	d105      	bne.n	8001e96 <TIM_DeInit+0x4a>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 8001e8a:	2004      	movs	r0, #4
 8001e8c:	2101      	movs	r1, #1
 8001e8e:	f7ff fd1b 	bl	80018c8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 8001e92:	2004      	movs	r0, #4
 8001e94:	e064      	b.n	8001f60 <TIM_DeInit+0x114>
  }  
  else if (TIMx == TIM5)
 8001e96:	4b38      	ldr	r3, [pc, #224]	; (8001f78 <TIM_DeInit+0x12c>)
 8001e98:	4298      	cmp	r0, r3
 8001e9a:	d105      	bne.n	8001ea8 <TIM_DeInit+0x5c>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 8001e9c:	2008      	movs	r0, #8
 8001e9e:	2101      	movs	r1, #1
 8001ea0:	f7ff fd12 	bl	80018c8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 8001ea4:	2008      	movs	r0, #8
 8001ea6:	e05b      	b.n	8001f60 <TIM_DeInit+0x114>
  }  
  else if (TIMx == TIM6)  
 8001ea8:	4b34      	ldr	r3, [pc, #208]	; (8001f7c <TIM_DeInit+0x130>)
 8001eaa:	4298      	cmp	r0, r3
 8001eac:	d105      	bne.n	8001eba <TIM_DeInit+0x6e>
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 8001eae:	2010      	movs	r0, #16
 8001eb0:	2101      	movs	r1, #1
 8001eb2:	f7ff fd09 	bl	80018c8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 8001eb6:	2010      	movs	r0, #16
 8001eb8:	e052      	b.n	8001f60 <TIM_DeInit+0x114>
  }  
  else if (TIMx == TIM7)
 8001eba:	4b31      	ldr	r3, [pc, #196]	; (8001f80 <TIM_DeInit+0x134>)
 8001ebc:	4298      	cmp	r0, r3
 8001ebe:	d105      	bne.n	8001ecc <TIM_DeInit+0x80>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 8001ec0:	2020      	movs	r0, #32
 8001ec2:	2101      	movs	r1, #1
 8001ec4:	f7ff fd00 	bl	80018c8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 8001ec8:	2020      	movs	r0, #32
 8001eca:	e049      	b.n	8001f60 <TIM_DeInit+0x114>
  }  
  else if (TIMx == TIM8)
 8001ecc:	4b2d      	ldr	r3, [pc, #180]	; (8001f84 <TIM_DeInit+0x138>)
 8001ece:	4298      	cmp	r0, r3
 8001ed0:	d109      	bne.n	8001ee6 <TIM_DeInit+0x9a>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 8001ed2:	2002      	movs	r0, #2
 8001ed4:	2101      	movs	r1, #1
 8001ed6:	f7ff fd03 	bl	80018e0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 8001eda:	2002      	movs	r0, #2
 8001edc:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8001ede:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
  }  
  else if (TIMx == TIM8)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 8001ee2:	f7ff bcfd 	b.w	80018e0 <RCC_APB2PeriphResetCmd>
  }  
  else if (TIMx == TIM9)
 8001ee6:	4b28      	ldr	r3, [pc, #160]	; (8001f88 <TIM_DeInit+0x13c>)
 8001ee8:	4298      	cmp	r0, r3
 8001eea:	d107      	bne.n	8001efc <TIM_DeInit+0xb0>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
 8001eec:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001ef0:	2101      	movs	r1, #1
 8001ef2:	f7ff fcf5 	bl	80018e0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 8001ef6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001efa:	e7ef      	b.n	8001edc <TIM_DeInit+0x90>
   }  
  else if (TIMx == TIM10)
 8001efc:	4b23      	ldr	r3, [pc, #140]	; (8001f8c <TIM_DeInit+0x140>)
 8001efe:	4298      	cmp	r0, r3
 8001f00:	d107      	bne.n	8001f12 <TIM_DeInit+0xc6>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
 8001f02:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001f06:	2101      	movs	r1, #1
 8001f08:	f7ff fcea 	bl	80018e0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 8001f0c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001f10:	e7e4      	b.n	8001edc <TIM_DeInit+0x90>
  }  
  else if (TIMx == TIM11) 
 8001f12:	4b1f      	ldr	r3, [pc, #124]	; (8001f90 <TIM_DeInit+0x144>)
 8001f14:	4298      	cmp	r0, r3
 8001f16:	d107      	bne.n	8001f28 <TIM_DeInit+0xdc>
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
 8001f18:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001f1c:	2101      	movs	r1, #1
 8001f1e:	f7ff fcdf 	bl	80018e0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 8001f22:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001f26:	e7d9      	b.n	8001edc <TIM_DeInit+0x90>
  }  
  else if (TIMx == TIM12)
 8001f28:	4b1a      	ldr	r3, [pc, #104]	; (8001f94 <TIM_DeInit+0x148>)
 8001f2a:	4298      	cmp	r0, r3
 8001f2c:	d105      	bne.n	8001f3a <TIM_DeInit+0xee>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
 8001f2e:	2040      	movs	r0, #64	; 0x40
 8001f30:	2101      	movs	r1, #1
 8001f32:	f7ff fcc9 	bl	80018c8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 8001f36:	2040      	movs	r0, #64	; 0x40
 8001f38:	e012      	b.n	8001f60 <TIM_DeInit+0x114>
  }  
  else if (TIMx == TIM13) 
 8001f3a:	4b17      	ldr	r3, [pc, #92]	; (8001f98 <TIM_DeInit+0x14c>)
 8001f3c:	4298      	cmp	r0, r3
 8001f3e:	d105      	bne.n	8001f4c <TIM_DeInit+0x100>
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
 8001f40:	2080      	movs	r0, #128	; 0x80
 8001f42:	2101      	movs	r1, #1
 8001f44:	f7ff fcc0 	bl	80018c8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 8001f48:	2080      	movs	r0, #128	; 0x80
 8001f4a:	e009      	b.n	8001f60 <TIM_DeInit+0x114>
  }  
  else
  { 
    if (TIMx == TIM14) 
 8001f4c:	4b13      	ldr	r3, [pc, #76]	; (8001f9c <TIM_DeInit+0x150>)
 8001f4e:	4298      	cmp	r0, r3
 8001f50:	d10b      	bne.n	8001f6a <TIM_DeInit+0x11e>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 8001f52:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001f56:	2101      	movs	r1, #1
 8001f58:	f7ff fcb6 	bl	80018c8 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 8001f5c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001f60:	2100      	movs	r1, #0
    }   
  }
}
 8001f62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  { 
    if (TIMx == TIM14) 
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 8001f66:	f7ff bcaf 	b.w	80018c8 <RCC_APB1PeriphResetCmd>
 8001f6a:	bd08      	pop	{r3, pc}
 8001f6c:	40010000 	.word	0x40010000
 8001f70:	40000400 	.word	0x40000400
 8001f74:	40000800 	.word	0x40000800
 8001f78:	40000c00 	.word	0x40000c00
 8001f7c:	40001000 	.word	0x40001000
 8001f80:	40001400 	.word	0x40001400
 8001f84:	40010400 	.word	0x40010400
 8001f88:	40014000 	.word	0x40014000
 8001f8c:	40014400 	.word	0x40014400
 8001f90:	40014800 	.word	0x40014800
 8001f94:	40001800 	.word	0x40001800
 8001f98:	40001c00 	.word	0x40001c00
 8001f9c:	40002000 	.word	0x40002000

08001fa0 <TIM_TimeBaseInit>:
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8001fa0:	4a1c      	ldr	r2, [pc, #112]	; (8002014 <TIM_TimeBaseInit+0x74>)
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8001fa2:	8803      	ldrh	r3, [r0, #0]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8001fa4:	4290      	cmp	r0, r2
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8001fa6:	b29b      	uxth	r3, r3

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8001fa8:	d012      	beq.n	8001fd0 <TIM_TimeBaseInit+0x30>
 8001faa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001fae:	4290      	cmp	r0, r2
 8001fb0:	d00e      	beq.n	8001fd0 <TIM_TimeBaseInit+0x30>
 8001fb2:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001fb6:	d00b      	beq.n	8001fd0 <TIM_TimeBaseInit+0x30>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8001fb8:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 8001fbc:	4290      	cmp	r0, r2
 8001fbe:	d007      	beq.n	8001fd0 <TIM_TimeBaseInit+0x30>
 8001fc0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001fc4:	4290      	cmp	r0, r2
 8001fc6:	d003      	beq.n	8001fd0 <TIM_TimeBaseInit+0x30>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8001fc8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001fcc:	4290      	cmp	r0, r2
 8001fce:	d103      	bne.n	8001fd8 <TIM_TimeBaseInit+0x38>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8001fd0:	884a      	ldrh	r2, [r1, #2]
  if((TIMx == TIM1) || (TIMx == TIM8)||
     (TIMx == TIM2) || (TIMx == TIM3)||
     (TIMx == TIM4) || (TIMx == TIM5)) 
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8001fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8001fd6:	4313      	orrs	r3, r2
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8001fd8:	4a0f      	ldr	r2, [pc, #60]	; (8002018 <TIM_TimeBaseInit+0x78>)
 8001fda:	4290      	cmp	r0, r2
 8001fdc:	d008      	beq.n	8001ff0 <TIM_TimeBaseInit+0x50>
 8001fde:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001fe2:	4290      	cmp	r0, r2
 8001fe4:	d004      	beq.n	8001ff0 <TIM_TimeBaseInit+0x50>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8001fe6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8001fea:	890a      	ldrh	r2, [r1, #8]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8001fec:	b29b      	uxth	r3, r3
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8001fee:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 8001ff0:	8003      	strh	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8001ff2:	684b      	ldr	r3, [r1, #4]
 8001ff4:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8001ff6:	880b      	ldrh	r3, [r1, #0]
 8001ff8:	8503      	strh	r3, [r0, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8001ffa:	4b06      	ldr	r3, [pc, #24]	; (8002014 <TIM_TimeBaseInit+0x74>)
 8001ffc:	4298      	cmp	r0, r3
 8001ffe:	d003      	beq.n	8002008 <TIM_TimeBaseInit+0x68>
 8002000:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002004:	4298      	cmp	r0, r3
 8002006:	d101      	bne.n	800200c <TIM_TimeBaseInit+0x6c>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8002008:	7a8b      	ldrb	r3, [r1, #10]
 800200a:	8603      	strh	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 800200c:	2301      	movs	r3, #1
 800200e:	8283      	strh	r3, [r0, #20]
}
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	40010000 	.word	0x40010000
 8002018:	40001000 	.word	0x40001000

0800201c <TIM_TimeBaseStructInit>:
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 800201c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002020:	6043      	str	r3, [r0, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 8002022:	2300      	movs	r3, #0
 8002024:	8003      	strh	r3, [r0, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 8002026:	8103      	strh	r3, [r0, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 8002028:	8043      	strh	r3, [r0, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 800202a:	7283      	strb	r3, [r0, #10]
}
 800202c:	4770      	bx	lr

0800202e <TIM_PrescalerConfig>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
 800202e:	8501      	strh	r1, [r0, #40]	; 0x28
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
 8002030:	8282      	strh	r2, [r0, #20]
}
 8002032:	4770      	bx	lr

08002034 <TIM_CounterModeConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));

  tmpcr1 = TIMx->CR1;
 8002034:	8803      	ldrh	r3, [r0, #0]

  /* Reset the CMS and DIR Bits */
  tmpcr1 &= (uint16_t)~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800203a:	041b      	lsls	r3, r3, #16
 800203c:	0c1b      	lsrs	r3, r3, #16

  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
 800203e:	430b      	orrs	r3, r1

  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
 8002040:	8003      	strh	r3, [r0, #0]
}
 8002042:	4770      	bx	lr

08002044 <TIM_SetCounter>:
{
  /* Check the parameters */
   assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 8002044:	6241      	str	r1, [r0, #36]	; 0x24
}
 8002046:	4770      	bx	lr

08002048 <TIM_SetAutoreload>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 8002048:	62c1      	str	r1, [r0, #44]	; 0x2c
}
 800204a:	4770      	bx	lr

0800204c <TIM_GetCounter>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Counter Register value */
  return TIMx->CNT;
 800204c:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
 800204e:	4770      	bx	lr

08002050 <TIM_GetPrescaler>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Prescaler Register value */
  return TIMx->PSC;
 8002050:	8d00      	ldrh	r0, [r0, #40]	; 0x28
}
 8002052:	b280      	uxth	r0, r0
 8002054:	4770      	bx	lr

08002056 <TIM_UpdateDisableConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 8002056:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002058:	b119      	cbz	r1, 8002062 <TIM_UpdateDisableConfig+0xc>
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 800205a:	b29b      	uxth	r3, r3
 800205c:	f043 0302 	orr.w	r3, r3, #2
 8002060:	e003      	b.n	800206a <TIM_UpdateDisableConfig+0x14>
  }
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_UDIS;
 8002062:	f023 0302 	bic.w	r3, r3, #2
 8002066:	041b      	lsls	r3, r3, #16
 8002068:	0c1b      	lsrs	r3, r3, #16
 800206a:	8003      	strh	r3, [r0, #0]
 800206c:	4770      	bx	lr

0800206e <TIM_UpdateRequestConfig>:
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 800206e:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
 8002070:	b119      	cbz	r1, 800207a <TIM_UpdateRequestConfig+0xc>
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 8002072:	b29b      	uxth	r3, r3
 8002074:	f043 0304 	orr.w	r3, r3, #4
 8002078:	e003      	b.n	8002082 <TIM_UpdateRequestConfig+0x14>
  }
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_URS;
 800207a:	f023 0304 	bic.w	r3, r3, #4
 800207e:	041b      	lsls	r3, r3, #16
 8002080:	0c1b      	lsrs	r3, r3, #16
 8002082:	8003      	strh	r3, [r0, #0]
 8002084:	4770      	bx	lr

08002086 <TIM_ARRPreloadConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 8002086:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002088:	b119      	cbz	r1, 8002092 <TIM_ARRPreloadConfig+0xc>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 800208a:	b29b      	uxth	r3, r3
 800208c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002090:	e003      	b.n	800209a <TIM_ARRPreloadConfig+0x14>
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 8002092:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002096:	041b      	lsls	r3, r3, #16
 8002098:	0c1b      	lsrs	r3, r3, #16
 800209a:	8003      	strh	r3, [r0, #0]
 800209c:	4770      	bx	lr

0800209e <TIM_SelectOnePulseMode>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));

  /* Reset the OPM Bit */
  TIMx->CR1 &= (uint16_t)~TIM_CR1_OPM;
 800209e:	8803      	ldrh	r3, [r0, #0]
 80020a0:	f023 0308 	bic.w	r3, r3, #8
 80020a4:	041b      	lsls	r3, r3, #16
 80020a6:	0c1b      	lsrs	r3, r3, #16
 80020a8:	8003      	strh	r3, [r0, #0]

  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
 80020aa:	8803      	ldrh	r3, [r0, #0]
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	430b      	orrs	r3, r1
 80020b0:	8003      	strh	r3, [r0, #0]
}
 80020b2:	4770      	bx	lr

080020b4 <TIM_SetClockDivision>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));

  /* Reset the CKD Bits */
  TIMx->CR1 &= (uint16_t)(~TIM_CR1_CKD);
 80020b4:	8803      	ldrh	r3, [r0, #0]
 80020b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020ba:	041b      	lsls	r3, r3, #16
 80020bc:	0c1b      	lsrs	r3, r3, #16
 80020be:	8003      	strh	r3, [r0, #0]

  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
 80020c0:	8803      	ldrh	r3, [r0, #0]
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	430b      	orrs	r3, r1
 80020c6:	8003      	strh	r3, [r0, #0]
}
 80020c8:	4770      	bx	lr

080020ca <TIM_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80020ca:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80020cc:	b119      	cbz	r1, 80020d6 <TIM_Cmd+0xc>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	f043 0301 	orr.w	r3, r3, #1
 80020d4:	e003      	b.n	80020de <TIM_Cmd+0x14>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 80020d6:	f023 0301 	bic.w	r3, r3, #1
 80020da:	041b      	lsls	r3, r3, #16
 80020dc:	0c1b      	lsrs	r3, r3, #16
 80020de:	8003      	strh	r3, [r0, #0]
 80020e0:	4770      	bx	lr

080020e2 <TIM_OC1Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 80020e2:	8c03      	ldrh	r3, [r0, #32]
 80020e4:	f023 0301 	bic.w	r3, r3, #1
 80020e8:	041b      	lsls	r3, r3, #16
 80020ea:	0c1b      	lsrs	r3, r3, #16
 80020ec:	8403      	strh	r3, [r0, #32]
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80020ee:	b570      	push	{r4, r5, r6, lr}

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020f0:	8c03      	ldrh	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80020f2:	8884      	ldrh	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80020f4:	8b02      	ldrh	r2, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80020f6:	880d      	ldrh	r5, [r1, #0]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 80020f8:	884e      	ldrh	r6, [r1, #2]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 80020fa:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 80020fe:	0412      	lsls	r2, r2, #16
 8002100:	0c12      	lsrs	r2, r2, #16
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8002102:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8002104:	898d      	ldrh	r5, [r1, #12]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 8002106:	f023 0302 	bic.w	r3, r3, #2
 800210a:	041b      	lsls	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 800210c:	4335      	orrs	r5, r6
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 800210e:	0c1b      	lsrs	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8002110:	b2ad      	uxth	r5, r5
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8002112:	432b      	orrs	r3, r5
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002114:	4d0e      	ldr	r5, [pc, #56]	; (8002150 <TIM_OC1Init+0x6e>)
 8002116:	42a8      	cmp	r0, r5
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002118:	b2a4      	uxth	r4, r4
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800211a:	d003      	beq.n	8002124 <TIM_OC1Init+0x42>
 800211c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002120:	42a8      	cmp	r0, r5
 8002122:	d10e      	bne.n	8002142 <TIM_OC1Init+0x60>
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8002124:	89cd      	ldrh	r5, [r1, #14]
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 8002126:	8a4e      	ldrh	r6, [r1, #18]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 8002128:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 800212c:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 800212e:	888d      	ldrh	r5, [r1, #4]
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 8002130:	f023 0304 	bic.w	r3, r3, #4
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8002134:	432b      	orrs	r3, r5
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 8002136:	8a0d      	ldrh	r5, [r1, #16]
 8002138:	4335      	orrs	r5, r6
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 800213a:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 800213e:	b2ad      	uxth	r5, r5
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8002140:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002142:	8084      	strh	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002144:	8302      	strh	r2, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 8002146:	688a      	ldr	r2, [r1, #8]
 8002148:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800214a:	8403      	strh	r3, [r0, #32]
}
 800214c:	bd70      	pop	{r4, r5, r6, pc}
 800214e:	bf00      	nop
 8002150:	40010000 	.word	0x40010000

08002154 <TIM_OC2Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8002154:	8c03      	ldrh	r3, [r0, #32]
 8002156:	f023 0310 	bic.w	r3, r3, #16
 800215a:	041b      	lsls	r3, r3, #16
 800215c:	0c1b      	lsrs	r3, r3, #16
 800215e:	8403      	strh	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8002160:	8c03      	ldrh	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002162:	8882      	ldrh	r2, [r0, #4]
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8002164:	b530      	push	{r4, r5, lr}
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002166:	8b04      	ldrh	r4, [r0, #24]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8002168:	880d      	ldrh	r5, [r1, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 800216a:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
 800216e:	0424      	lsls	r4, r4, #16
 8002170:	0c24      	lsrs	r4, r4, #16
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 8002172:	f023 0320 	bic.w	r3, r3, #32
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8002176:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 800217a:	041b      	lsls	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 800217c:	898d      	ldrh	r5, [r1, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 800217e:	0c1b      	lsrs	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 8002180:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8002184:	884d      	ldrh	r5, [r1, #2]
 8002186:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800218a:	4d13      	ldr	r5, [pc, #76]	; (80021d8 <TIM_OC2Init+0x84>)
 800218c:	42a8      	cmp	r0, r5
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800218e:	b292      	uxth	r2, r2
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8002190:	b2a4      	uxth	r4, r4
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8002192:	b29b      	uxth	r3, r3
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002194:	d003      	beq.n	800219e <TIM_OC2Init+0x4a>
 8002196:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800219a:	42a8      	cmp	r0, r5
 800219c:	d115      	bne.n	80021ca <TIM_OC2Init+0x76>
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 800219e:	89cd      	ldrh	r5, [r1, #14]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 80021a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80021a4:	b29b      	uxth	r3, r3
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 80021a6:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
 80021aa:	f64f 75bf 	movw	r5, #65471	; 0xffbf
 80021ae:	401d      	ands	r5, r3
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 80021b0:	888b      	ldrh	r3, [r1, #4]
 80021b2:	ea45 1303 	orr.w	r3, r5, r3, lsl #4
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 80021b6:	8a0d      	ldrh	r5, [r1, #16]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
 80021b8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 80021bc:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 80021c0:	8a4d      	ldrh	r5, [r1, #18]
 80021c2:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 80021c6:	b29b      	uxth	r3, r3
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 80021c8:	b292      	uxth	r2, r2
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80021ca:	8082      	strh	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 80021cc:	688a      	ldr	r2, [r1, #8]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80021ce:	8304      	strh	r4, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 80021d0:	6382      	str	r2, [r0, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80021d2:	8403      	strh	r3, [r0, #32]
}
 80021d4:	bd30      	pop	{r4, r5, pc}
 80021d6:	bf00      	nop
 80021d8:	40010000 	.word	0x40010000

080021dc <TIM_OC3Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 80021dc:	8c03      	ldrh	r3, [r0, #32]
 80021de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021e2:	041b      	lsls	r3, r3, #16
 80021e4:	0c1b      	lsrs	r3, r3, #16
 80021e6:	8403      	strh	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021e8:	8c03      	ldrh	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021ea:	8882      	ldrh	r2, [r0, #4]
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80021ec:	b530      	push	{r4, r5, lr}
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80021ee:	8b84      	ldrh	r4, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80021f0:	880d      	ldrh	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 80021f2:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 80021f6:	0424      	lsls	r4, r4, #16
 80021f8:	0c24      	lsrs	r4, r4, #16
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 80021fa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80021fe:	041b      	lsls	r3, r3, #16
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8002200:	432c      	orrs	r4, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 8002202:	898d      	ldrh	r5, [r1, #12]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 8002204:	0c1b      	lsrs	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 8002206:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 800220a:	884d      	ldrh	r5, [r1, #2]
 800220c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002210:	4d12      	ldr	r5, [pc, #72]	; (800225c <TIM_OC3Init+0x80>)
 8002212:	42a8      	cmp	r0, r5
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002214:	b292      	uxth	r2, r2
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8002216:	b29b      	uxth	r3, r3
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002218:	d003      	beq.n	8002222 <TIM_OC3Init+0x46>
 800221a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800221e:	42a8      	cmp	r0, r5
 8002220:	d115      	bne.n	800224e <TIM_OC3Init+0x72>
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8002222:	89cd      	ldrh	r5, [r1, #14]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 8002224:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002228:	b29b      	uxth	r3, r3
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 800222a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 800222e:	f64f 35ff 	movw	r5, #64511	; 0xfbff
 8002232:	401d      	ands	r5, r3
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8002234:	888b      	ldrh	r3, [r1, #4]
 8002236:	ea45 2303 	orr.w	r3, r5, r3, lsl #8
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 800223a:	8a0d      	ldrh	r5, [r1, #16]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 800223c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8002240:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8002244:	8a4d      	ldrh	r5, [r1, #18]
 8002246:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 800224a:	b29b      	uxth	r3, r3
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 800224c:	b292      	uxth	r2, r2
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800224e:	8082      	strh	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8002250:	688a      	ldr	r2, [r1, #8]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002252:	8384      	strh	r4, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8002254:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002256:	8403      	strh	r3, [r0, #32]
}
 8002258:	bd30      	pop	{r4, r5, pc}
 800225a:	bf00      	nop
 800225c:	40010000 	.word	0x40010000

08002260 <TIM_OC4Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8002260:	8c03      	ldrh	r3, [r0, #32]
 8002262:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002266:	041b      	lsls	r3, r3, #16
 8002268:	0c1b      	lsrs	r3, r3, #16
 800226a:	8403      	strh	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800226c:	8c03      	ldrh	r3, [r0, #32]
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800226e:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002270:	8884      	ldrh	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002272:	8b82      	ldrh	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8002274:	880d      	ldrh	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 8002276:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 800227a:	0412      	lsls	r2, r2, #16
 800227c:	0c12      	lsrs	r2, r2, #16
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 800227e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8002282:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 8002286:	041b      	lsls	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8002288:	898d      	ldrh	r5, [r1, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 800228a:	0c1b      	lsrs	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 800228c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8002290:	884d      	ldrh	r5, [r1, #2]
 8002292:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002296:	4d0b      	ldr	r5, [pc, #44]	; (80022c4 <TIM_OC4Init+0x64>)
 8002298:	42a8      	cmp	r0, r5
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800229a:	b2a4      	uxth	r4, r4
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 800229c:	b292      	uxth	r2, r2
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 800229e:	b29b      	uxth	r3, r3
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 80022a0:	d003      	beq.n	80022aa <TIM_OC4Init+0x4a>
 80022a2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80022a6:	42a8      	cmp	r0, r5
 80022a8:	d105      	bne.n	80022b6 <TIM_OC4Init+0x56>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 80022aa:	8a0d      	ldrh	r5, [r1, #16]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 80022ac:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 80022b0:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 80022b4:	b2a4      	uxth	r4, r4
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022b6:	8084      	strh	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 80022b8:	8382      	strh	r2, [r0, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 80022ba:	688a      	ldr	r2, [r1, #8]
 80022bc:	6402      	str	r2, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022be:	8403      	strh	r3, [r0, #32]
}
 80022c0:	bd30      	pop	{r4, r5, pc}
 80022c2:	bf00      	nop
 80022c4:	40010000 	.word	0x40010000

080022c8 <TIM_OCStructInit>:
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 80022c8:	2300      	movs	r3, #0
 80022ca:	8003      	strh	r3, [r0, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 80022cc:	8043      	strh	r3, [r0, #2]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 80022ce:	8083      	strh	r3, [r0, #4]
  TIM_OCInitStruct->TIM_Pulse = 0x00000000;
 80022d0:	6083      	str	r3, [r0, #8]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 80022d2:	8183      	strh	r3, [r0, #12]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 80022d4:	81c3      	strh	r3, [r0, #14]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 80022d6:	8203      	strh	r3, [r0, #16]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 80022d8:	8243      	strh	r3, [r0, #18]
}
 80022da:	4770      	bx	lr

080022dc <TIM_SelectOCxM>:
  *            @arg TIM_ForcedAction_Active
  *            @arg TIM_ForcedAction_InActive
  * @retval None
  */
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
{
 80022dc:	b530      	push	{r4, r5, lr}
  tmp += CCMR_OFFSET;

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 80022de:	8c05      	ldrh	r5, [r0, #32]
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
  tmp += CCMR_OFFSET;

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;
 80022e0:	2401      	movs	r4, #1

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 80022e2:	b2ad      	uxth	r5, r5
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
  tmp += CCMR_OFFSET;

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;
 80022e4:	408c      	lsls	r4, r1

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 80022e6:	ea25 0404 	bic.w	r4, r5, r4
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
  tmp += CCMR_OFFSET;
 80022ea:	f100 0318 	add.w	r3, r0, #24

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 80022ee:	8404      	strh	r4, [r0, #32]

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 80022f0:	b109      	cbz	r1, 80022f6 <TIM_SelectOCxM+0x1a>
 80022f2:	2908      	cmp	r1, #8
 80022f4:	d107      	bne.n	8002306 <TIM_SelectOCxM+0x2a>
  {
    tmp += (TIM_Channel>>1);
 80022f6:	0849      	lsrs	r1, r1, #1

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC13M_MASK;
 80022f8:	f64f 708f 	movw	r0, #65423	; 0xff8f
 80022fc:	58cc      	ldr	r4, [r1, r3]
 80022fe:	4020      	ands	r0, r4
 8002300:	50c8      	str	r0, [r1, r3]
   
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
 8002302:	58c8      	ldr	r0, [r1, r3]
 8002304:	e00a      	b.n	800231c <TIM_SelectOCxM+0x40>
  }
  else
  {
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
 8002306:	3904      	subs	r1, #4
 8002308:	f3c1 014e 	ubfx	r1, r1, #1, #15

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC24M_MASK;
 800230c:	f648 70ff 	movw	r0, #36863	; 0x8fff
 8002310:	58cc      	ldr	r4, [r1, r3]
 8002312:	4020      	ands	r0, r4
 8002314:	50c8      	str	r0, [r1, r3]
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 8002316:	0212      	lsls	r2, r2, #8
 8002318:	58c8      	ldr	r0, [r1, r3]
 800231a:	b292      	uxth	r2, r2
 800231c:	4302      	orrs	r2, r0
 800231e:	50ca      	str	r2, [r1, r3]
 8002320:	bd30      	pop	{r4, r5, pc}

08002322 <TIM_SetCompare1>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 8002322:	6341      	str	r1, [r0, #52]	; 0x34
}
 8002324:	4770      	bx	lr

08002326 <TIM_SetCompare2>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 8002326:	6381      	str	r1, [r0, #56]	; 0x38
}
 8002328:	4770      	bx	lr

0800232a <TIM_SetCompare3>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 800232a:	63c1      	str	r1, [r0, #60]	; 0x3c
}
 800232c:	4770      	bx	lr

0800232e <TIM_SetCompare4>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
 800232e:	6401      	str	r1, [r0, #64]	; 0x40
}
 8002330:	4770      	bx	lr

08002332 <TIM_ForcedOC1Config>:
  uint16_t tmpccmr1 = 0;

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 8002332:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1M;
 8002334:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002338:	041b      	lsls	r3, r3, #16
 800233a:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
 800233c:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800233e:	8303      	strh	r3, [r0, #24]
}
 8002340:	4770      	bx	lr

08002342 <TIM_ForcedOC2Config>:
  uint16_t tmpccmr1 = 0;

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 8002342:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2M;
 8002344:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002348:	041b      	lsls	r3, r3, #16
 800234a:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
 800234c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002350:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8002352:	8303      	strh	r3, [r0, #24]
}
 8002354:	4770      	bx	lr

08002356 <TIM_ForcedOC3Config>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));

  tmpccmr2 = TIMx->CCMR2;
 8002356:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC1M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3M;
 8002358:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800235c:	041b      	lsls	r3, r3, #16
 800235e:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
 8002360:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8002362:	8383      	strh	r3, [r0, #28]
}
 8002364:	4770      	bx	lr

08002366 <TIM_ForcedOC4Config>:
  uint16_t tmpccmr2 = 0;

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
 8002366:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC2M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4M;
 8002368:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800236c:	041b      	lsls	r3, r3, #16
 800236e:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
 8002370:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002374:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8002376:	8383      	strh	r3, [r0, #28]
}
 8002378:	4770      	bx	lr

0800237a <TIM_OC1PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 800237a:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC1PE);
 800237c:	f023 0308 	bic.w	r3, r3, #8
 8002380:	041b      	lsls	r3, r3, #16
 8002382:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 8002384:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8002386:	8303      	strh	r3, [r0, #24]
}
 8002388:	4770      	bx	lr

0800238a <TIM_OC2PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 800238a:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2PE);
 800238c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002390:	041b      	lsls	r3, r3, #16
 8002392:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 8002394:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002398:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800239a:	8303      	strh	r3, [r0, #24]
}
 800239c:	4770      	bx	lr

0800239e <TIM_OC3PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 800239e:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 80023a0:	f023 0308 	bic.w	r3, r3, #8
 80023a4:	041b      	lsls	r3, r3, #16
 80023a6:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 80023a8:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80023aa:	8383      	strh	r3, [r0, #28]
}
 80023ac:	4770      	bx	lr

080023ae <TIM_OC4PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 80023ae:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
 80023b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80023b4:	041b      	lsls	r3, r3, #16
 80023b6:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 80023b8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80023bc:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80023be:	8383      	strh	r3, [r0, #28]
}
 80023c0:	4770      	bx	lr

080023c2 <TIM_OC1FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 80023c2:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1FE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1FE;
 80023c4:	f023 0304 	bic.w	r3, r3, #4
 80023c8:	041b      	lsls	r3, r3, #16
 80023ca:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
 80023cc:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 80023ce:	8303      	strh	r3, [r0, #24]
}
 80023d0:	4770      	bx	lr

080023d2 <TIM_OC2FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 80023d2:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2FE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2FE);
 80023d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80023d8:	041b      	lsls	r3, r3, #16
 80023da:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
 80023dc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80023e0:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 80023e2:	8303      	strh	r3, [r0, #24]
}
 80023e4:	4770      	bx	lr

080023e6 <TIM_OC3FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 80023e6:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC3FE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3FE;
 80023e8:	f023 0304 	bic.w	r3, r3, #4
 80023ec:	041b      	lsls	r3, r3, #16
 80023ee:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
 80023f0:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 80023f2:	8383      	strh	r3, [r0, #28]
}
 80023f4:	4770      	bx	lr

080023f6 <TIM_OC4FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 80023f6:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC4FE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4FE);
 80023f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80023fc:	041b      	lsls	r3, r3, #16
 80023fe:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
 8002400:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002404:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 8002406:	8383      	strh	r3, [r0, #28]
}
 8002408:	4770      	bx	lr

0800240a <TIM_ClearOC1Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 800240a:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1CE;
 800240c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002410:	041b      	lsls	r3, r3, #16
 8002412:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
 8002414:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8002416:	8303      	strh	r3, [r0, #24]
}
 8002418:	4770      	bx	lr

0800241a <TIM_ClearOC2Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 800241a:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2CE;

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
 800241c:	0209      	lsls	r1, r1, #8
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;

  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2CE;
 800241e:	045b      	lsls	r3, r3, #17

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
 8002420:	ea41 4353 	orr.w	r3, r1, r3, lsr #17
 8002424:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8002426:	8303      	strh	r3, [r0, #24]
}
 8002428:	4770      	bx	lr

0800242a <TIM_ClearOC3Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 800242a:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC3CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3CE;
 800242c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002430:	041b      	lsls	r3, r3, #16
 8002432:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
 8002434:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8002436:	8383      	strh	r3, [r0, #28]
}
 8002438:	4770      	bx	lr

0800243a <TIM_ClearOC4Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 800243a:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4CE;

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
 800243c:	0209      	lsls	r1, r1, #8
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;

  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4CE;
 800243e:	045b      	lsls	r3, r3, #17

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
 8002440:	ea41 4353 	orr.w	r3, r1, r3, lsr #17
 8002444:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8002446:	8383      	strh	r3, [r0, #28]
}
 8002448:	4770      	bx	lr

0800244a <TIM_OC1PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 800244a:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC1P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC1P);
 800244c:	f023 0302 	bic.w	r3, r3, #2
 8002450:	041b      	lsls	r3, r3, #16
 8002452:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= TIM_OCPolarity;
 8002454:	430b      	orrs	r3, r1

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8002456:	8403      	strh	r3, [r0, #32]
}
 8002458:	4770      	bx	lr

0800245a <TIM_OC1NPolarityConfig>:
  uint16_t tmpccer = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
 800245a:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC1NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 800245c:	f023 0308 	bic.w	r3, r3, #8
 8002460:	041b      	lsls	r3, r3, #16
 8002462:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= TIM_OCNPolarity;
 8002464:	430b      	orrs	r3, r1

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8002466:	8403      	strh	r3, [r0, #32]
}
 8002468:	4770      	bx	lr

0800246a <TIM_OC2PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 800246a:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC2P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC2P);
 800246c:	f023 0320 	bic.w	r3, r3, #32
 8002470:	041b      	lsls	r3, r3, #16
 8002472:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
 8002474:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8002478:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800247a:	8403      	strh	r3, [r0, #32]
}
 800247c:	4770      	bx	lr

0800247e <TIM_OC2NPolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
 800247e:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC2NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 8002480:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002484:	041b      	lsls	r3, r3, #16
 8002486:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
 8002488:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 800248c:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800248e:	8403      	strh	r3, [r0, #32]
}
 8002490:	4770      	bx	lr

08002492 <TIM_OC3PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8002492:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC3P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 8002494:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002498:	041b      	lsls	r3, r3, #16
 800249a:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
 800249c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80024a0:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80024a2:	8403      	strh	r3, [r0, #32]
}
 80024a4:	4770      	bx	lr

080024a6 <TIM_OC3NPolarityConfig>:
 
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
 80024a6:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC3NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 80024a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80024ac:	041b      	lsls	r3, r3, #16
 80024ae:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
 80024b0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80024b4:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80024b6:	8403      	strh	r3, [r0, #32]
}
 80024b8:	4770      	bx	lr

080024ba <TIM_OC4PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 80024ba:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC4P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 80024bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80024c0:	041b      	lsls	r3, r3, #16
 80024c2:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
 80024c4:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 80024c8:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80024ca:	8403      	strh	r3, [r0, #32]
}
 80024cc:	4770      	bx	lr

080024ce <TIM_CCxCmd>:
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
 80024ce:	b510      	push	{r4, lr}
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 80024d0:	8c04      	ldrh	r4, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;
 80024d2:	2301      	movs	r3, #1
 80024d4:	408b      	lsls	r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 80024d6:	b2a4      	uxth	r4, r4
 80024d8:	ea24 0303 	bic.w	r3, r4, r3
 80024dc:	8403      	strh	r3, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
 80024de:	8c03      	ldrh	r3, [r0, #32]
 80024e0:	fa12 f101 	lsls.w	r1, r2, r1
 80024e4:	430b      	orrs	r3, r1
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	8403      	strh	r3, [r0, #32]
}
 80024ea:	bd10      	pop	{r4, pc}

080024ec <TIM_CCxNCmd>:
  * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
  * @retval None
  */
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
{
 80024ec:	b510      	push	{r4, lr}
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_SET << TIM_Channel;

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 80024ee:	8c04      	ldrh	r4, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_SET << TIM_Channel;
 80024f0:	2304      	movs	r3, #4
 80024f2:	408b      	lsls	r3, r1

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 80024f4:	b2a4      	uxth	r4, r4
 80024f6:	ea24 0303 	bic.w	r3, r4, r3
 80024fa:	8403      	strh	r3, [r0, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
 80024fc:	8c03      	ldrh	r3, [r0, #32]
 80024fe:	fa12 f101 	lsls.w	r1, r2, r1
 8002502:	430b      	orrs	r3, r1
 8002504:	b29b      	uxth	r3, r3
 8002506:	8403      	strh	r3, [r0, #32]
}
 8002508:	bd10      	pop	{r4, pc}

0800250a <TIM_ICStructInit>:
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 800250a:	2300      	movs	r3, #0
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 800250c:	2201      	movs	r2, #1
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 800250e:	8003      	strh	r3, [r0, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 8002510:	8043      	strh	r3, [r0, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 8002512:	8082      	strh	r2, [r0, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 8002514:	80c3      	strh	r3, [r0, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
 8002516:	8103      	strh	r3, [r0, #8]
}
 8002518:	4770      	bx	lr

0800251a <TIM_GetCapture1>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 800251a:	6b40      	ldr	r0, [r0, #52]	; 0x34
}
 800251c:	4770      	bx	lr

0800251e <TIM_GetCapture2>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 800251e:	6b80      	ldr	r0, [r0, #56]	; 0x38
}
 8002520:	4770      	bx	lr

08002522 <TIM_GetCapture3>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 

  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
 8002522:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
}
 8002524:	4770      	bx	lr

08002526 <TIM_GetCapture4>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
 8002526:	6c00      	ldr	r0, [r0, #64]	; 0x40
}
 8002528:	4770      	bx	lr

0800252a <TIM_SetIC1Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
 800252a:	8b03      	ldrh	r3, [r0, #24]
 800252c:	f023 030c 	bic.w	r3, r3, #12
 8002530:	041b      	lsls	r3, r3, #16
 8002532:	0c1b      	lsrs	r3, r3, #16
 8002534:	8303      	strh	r3, [r0, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8002536:	8b03      	ldrh	r3, [r0, #24]
 8002538:	b29b      	uxth	r3, r3
 800253a:	430b      	orrs	r3, r1
 800253c:	8303      	strh	r3, [r0, #24]
}
 800253e:	4770      	bx	lr

08002540 <TIM_SetIC2Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
 8002540:	8b03      	ldrh	r3, [r0, #24]
 8002542:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002546:	041b      	lsls	r3, r3, #16
 8002548:	0c1b      	lsrs	r3, r3, #16
 800254a:	8303      	strh	r3, [r0, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 800254c:	8b03      	ldrh	r3, [r0, #24]
 800254e:	b29b      	uxth	r3, r3
 8002550:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002554:	b29b      	uxth	r3, r3
 8002556:	8303      	strh	r3, [r0, #24]
}
 8002558:	4770      	bx	lr

0800255a <TIM_PWMIConfig>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 800255a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800255c:	460c      	mov	r4, r1

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 800255e:	8849      	ldrh	r1, [r1, #2]
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 8002560:	88a2      	ldrh	r2, [r4, #4]
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8002562:	f8b4 e000 	ldrh.w	lr, [r4]
 8002566:	8923      	ldrh	r3, [r4, #8]
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8002568:	4605      	mov	r5, r0
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
 800256a:	2900      	cmp	r1, #0
 800256c:	bf0c      	ite	eq
 800256e:	2702      	moveq	r7, #2
 8002570:	2700      	movne	r7, #0
    icoppositepolarity = TIM_ICPolarity_Rising;
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
 8002572:	2a01      	cmp	r2, #1
 8002574:	bf14      	ite	ne
 8002576:	2601      	movne	r6, #1
 8002578:	2602      	moveq	r6, #2
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 800257a:	f1be 0f00 	cmp.w	lr, #0
 800257e:	d110      	bne.n	80025a2 <TIM_PWMIConfig+0x48>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 8002580:	f7ff fc2e 	bl	8001de0 <TI1_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002584:	4628      	mov	r0, r5
 8002586:	88e1      	ldrh	r1, [r4, #6]
 8002588:	f7ff ffcf 	bl	800252a <TIM_SetIC1Prescaler>
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 800258c:	4628      	mov	r0, r5
 800258e:	4639      	mov	r1, r7
 8002590:	4632      	mov	r2, r6
 8002592:	8923      	ldrh	r3, [r4, #8]
 8002594:	f7ff fc3d 	bl	8001e12 <TI2_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002598:	88e1      	ldrh	r1, [r4, #6]
 800259a:	4628      	mov	r0, r5
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 800259c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80025a0:	e7ce      	b.n	8002540 <TIM_SetIC2Prescaler>
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 80025a2:	f7ff fc36 	bl	8001e12 <TI2_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80025a6:	4628      	mov	r0, r5
 80025a8:	88e1      	ldrh	r1, [r4, #6]
 80025aa:	f7ff ffc9 	bl	8002540 <TIM_SetIC2Prescaler>
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 80025ae:	4628      	mov	r0, r5
 80025b0:	4639      	mov	r1, r7
 80025b2:	4632      	mov	r2, r6
 80025b4:	8923      	ldrh	r3, [r4, #8]
 80025b6:	f7ff fc13 	bl	8001de0 <TI1_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80025ba:	88e1      	ldrh	r1, [r4, #6]
 80025bc:	4628      	mov	r0, r5
  }
}
 80025be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80025c2:	e7b2      	b.n	800252a <TIM_SetIC1Prescaler>

080025c4 <TIM_SetIC3Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC3PSC;
 80025c4:	8b83      	ldrh	r3, [r0, #28]
 80025c6:	f023 030c 	bic.w	r3, r3, #12
 80025ca:	041b      	lsls	r3, r3, #16
 80025cc:	0c1b      	lsrs	r3, r3, #16
 80025ce:	8383      	strh	r3, [r0, #28]

  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 80025d0:	8b83      	ldrh	r3, [r0, #28]
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	430b      	orrs	r3, r1
 80025d6:	8383      	strh	r3, [r0, #28]
}
 80025d8:	4770      	bx	lr

080025da <TIM_SetIC4Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC4PSC;
 80025da:	8b83      	ldrh	r3, [r0, #28]
 80025dc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80025e0:	041b      	lsls	r3, r3, #16
 80025e2:	0c1b      	lsrs	r3, r3, #16
 80025e4:	8383      	strh	r3, [r0, #28]

  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 80025e6:	8b83      	ldrh	r3, [r0, #28]
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	8383      	strh	r3, [r0, #28]
}
 80025f2:	4770      	bx	lr

080025f4 <TIM_ICInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 80025f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025f6:	460d      	mov	r5, r1
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 80025f8:	880b      	ldrh	r3, [r1, #0]
 80025fa:	88aa      	ldrh	r2, [r5, #4]
 80025fc:	8849      	ldrh	r1, [r1, #2]
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 80025fe:	4604      	mov	r4, r0
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8002600:	b93b      	cbnz	r3, 8002612 <TIM_ICInit+0x1e>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8002602:	892b      	ldrh	r3, [r5, #8]
 8002604:	f7ff fbec 	bl	8001de0 <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002608:	88e9      	ldrh	r1, [r5, #6]
 800260a:	4620      	mov	r0, r4
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 800260c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002610:	e78b      	b.n	800252a <TIM_SetIC1Prescaler>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 8002612:	2b04      	cmp	r3, #4
 8002614:	d107      	bne.n	8002626 <TIM_ICInit+0x32>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_LIST2_PERIPH(TIMx));
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8002616:	892b      	ldrh	r3, [r5, #8]
 8002618:	f7ff fbfb 	bl	8001e12 <TI2_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800261c:	88e9      	ldrh	r1, [r5, #6]
 800261e:	4620      	mov	r0, r4
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8002620:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    assert_param(IS_TIM_LIST2_PERIPH(TIMx));
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002624:	e78c      	b.n	8002540 <TIM_SetIC2Prescaler>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 8002626:	2b08      	cmp	r3, #8
 8002628:	f8b5 c008 	ldrh.w	ip, [r5, #8]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 800262c:	8c07      	ldrh	r7, [r0, #32]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 800262e:	d11d      	bne.n	800266c <TIM_ICInit+0x78>
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8002630:	f427 7780 	bic.w	r7, r7, #256	; 0x100
 8002634:	043f      	lsls	r7, r7, #16
 8002636:	0c3f      	lsrs	r7, r7, #16
 8002638:	8407      	strh	r7, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 800263a:	8b86      	ldrh	r6, [r0, #28]
  tmpccer = TIMx->CCER;
 800263c:	8c03      	ldrh	r3, [r0, #32]
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
  tmpccmr2 = TIMx->CCMR2;
 800263e:	b2b6      	uxth	r6, r6
  tmpccer = TIMx->CCER;
 8002640:	b29b      	uxth	r3, r3
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
 8002642:	f026 06f3 	bic.w	r6, r6, #243	; 0xf3
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002646:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 800264a:	ea46 1c0c 	orr.w	ip, r6, ip, lsl #4

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 800264e:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002652:	fa1f fc8c 	uxth.w	ip, ip

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 8002656:	b289      	uxth	r1, r1
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002658:	ea4c 0202 	orr.w	r2, ip, r2

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 800265c:	f441 7180 	orr.w	r1, r1, #256	; 0x100

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002660:	8382      	strh	r2, [r0, #28]
  TIMx->CCER = tmpccer;
 8002662:	8401      	strh	r1, [r0, #32]
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002664:	88e9      	ldrh	r1, [r5, #6]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8002666:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800266a:	e7ab      	b.n	80025c4 <TIM_SetIC3Prescaler>
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 800266c:	f427 5780 	bic.w	r7, r7, #4096	; 0x1000
 8002670:	043f      	lsls	r7, r7, #16
 8002672:	0c3f      	lsrs	r7, r7, #16
 8002674:	8407      	strh	r7, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002676:	8b86      	ldrh	r6, [r0, #28]
  tmpccer = TIMx->CCER;
 8002678:	8c03      	ldrh	r3, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 800267a:	f426 7640 	bic.w	r6, r6, #768	; 0x300
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800267e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8002682:	0536      	lsls	r6, r6, #20
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002684:	045b      	lsls	r3, r3, #17
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8002686:	0d36      	lsrs	r6, r6, #20
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002688:	0c5b      	lsrs	r3, r3, #17
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 800268a:	ea46 2202 	orr.w	r2, r6, r2, lsl #8
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 800268e:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 8002692:	ea42 320c 	orr.w	r2, r2, ip, lsl #12

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 8002696:	b29b      	uxth	r3, r3
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002698:	88e9      	ldrh	r1, [r5, #6]
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 800269a:	b292      	uxth	r2, r2

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 800269c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80026a0:	8382      	strh	r2, [r0, #28]
  TIMx->CCER = tmpccer ;
 80026a2:	8403      	strh	r3, [r0, #32]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 80026a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80026a8:	e797      	b.n	80025da <TIM_SetIC4Prescaler>

080026aa <TIM_BDTRConfig>:
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 80026aa:	884a      	ldrh	r2, [r1, #2]
 80026ac:	880b      	ldrh	r3, [r1, #0]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	888a      	ldrh	r2, [r1, #4]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	88ca      	ldrh	r2, [r1, #6]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	890a      	ldrh	r2, [r1, #8]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	894a      	ldrh	r2, [r1, #10]
 80026be:	4313      	orrs	r3, r2
 80026c0:	898a      	ldrh	r2, [r1, #12]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
}
 80026ca:	4770      	bx	lr

080026cc <TIM_BDTRStructInit>:
  * @retval None
  */
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
 80026cc:	2300      	movs	r3, #0
 80026ce:	8003      	strh	r3, [r0, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
 80026d0:	8043      	strh	r3, [r0, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 80026d2:	8083      	strh	r3, [r0, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
 80026d4:	80c3      	strh	r3, [r0, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
 80026d6:	8103      	strh	r3, [r0, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
 80026d8:	8143      	strh	r3, [r0, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 80026da:	8183      	strh	r3, [r0, #12]
}
 80026dc:	4770      	bx	lr

080026de <TIM_CtrlPWMOutputs>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 80026de:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80026e2:	b129      	cbz	r1, 80026f0 <TIM_CtrlPWMOutputs+0x12>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 80026e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	e001      	b.n	80026f4 <TIM_CtrlPWMOutputs+0x16>
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
 80026f0:	045b      	lsls	r3, r3, #17
 80026f2:	0c5b      	lsrs	r3, r3, #17
 80026f4:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 80026f8:	4770      	bx	lr

080026fa <TIM_SelectCOM>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 80026fa:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80026fc:	b119      	cbz	r1, 8002706 <TIM_SelectCOM+0xc>
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 80026fe:	b29b      	uxth	r3, r3
 8002700:	f043 0304 	orr.w	r3, r3, #4
 8002704:	e003      	b.n	800270e <TIM_SelectCOM+0x14>
  }
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCUS;
 8002706:	f023 0304 	bic.w	r3, r3, #4
 800270a:	041b      	lsls	r3, r3, #16
 800270c:	0c1b      	lsrs	r3, r3, #16
 800270e:	8083      	strh	r3, [r0, #4]
 8002710:	4770      	bx	lr

08002712 <TIM_CCPreloadControl>:
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 8002712:	8883      	ldrh	r3, [r0, #4]
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002714:	b119      	cbz	r1, 800271e <TIM_CCPreloadControl+0xc>
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 8002716:	b29b      	uxth	r3, r3
 8002718:	f043 0301 	orr.w	r3, r3, #1
 800271c:	e003      	b.n	8002726 <TIM_CCPreloadControl+0x14>
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCPC;
 800271e:	f023 0301 	bic.w	r3, r3, #1
 8002722:	041b      	lsls	r3, r3, #16
 8002724:	0c1b      	lsrs	r3, r3, #16
 8002726:	8083      	strh	r3, [r0, #4]
 8002728:	4770      	bx	lr

0800272a <TIM_ITConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 800272a:	8983      	ldrh	r3, [r0, #12]
 800272c:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800272e:	b10a      	cbz	r2, 8002734 <TIM_ITConfig+0xa>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8002730:	4319      	orrs	r1, r3
 8002732:	e001      	b.n	8002738 <TIM_ITConfig+0xe>
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8002734:	ea23 0101 	bic.w	r1, r3, r1
 8002738:	8181      	strh	r1, [r0, #12]
 800273a:	4770      	bx	lr

0800273c <TIM_GenerateEvent>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
 
  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
 800273c:	8281      	strh	r1, [r0, #20]
}
 800273e:	4770      	bx	lr

08002740 <TIM_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));

  
  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
 8002740:	8a03      	ldrh	r3, [r0, #16]
  {
    bitstatus = SET;
 8002742:	4219      	tst	r1, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8002744:	bf0c      	ite	eq
 8002746:	2000      	moveq	r0, #0
 8002748:	2001      	movne	r0, #1
 800274a:	4770      	bx	lr

0800274c <TIM_ClearFlag>:
{  
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
 800274c:	43c9      	mvns	r1, r1
 800274e:	b289      	uxth	r1, r1
 8002750:	8201      	strh	r1, [r0, #16]
}
 8002752:	4770      	bx	lr

08002754 <TIM_GetITStatus>:
  uint16_t itstatus = 0x0, itenable = 0x0;
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8002754:	8a03      	ldrh	r3, [r0, #16]
  
  itenable = TIMx->DIER & TIM_IT;
 8002756:	8982      	ldrh	r2, [r0, #12]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8002758:	ea11 0003 	ands.w	r0, r1, r3
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
  
  itenable = TIMx->DIER & TIM_IT;
 800275c:	b292      	uxth	r2, r2
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 800275e:	d003      	beq.n	8002768 <TIM_GetITStatus+0x14>
  {
    bitstatus = SET;
 8002760:	4211      	tst	r1, r2
 8002762:	bf0c      	ite	eq
 8002764:	2000      	moveq	r0, #0
 8002766:	2001      	movne	r0, #1
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8002768:	4770      	bx	lr

0800276a <TIM_ClearITPendingBit>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 800276a:	43c9      	mvns	r1, r1
 800276c:	b289      	uxth	r1, r1
 800276e:	8201      	strh	r1, [r0, #16]
}
 8002770:	4770      	bx	lr

08002772 <TIM_DMAConfig>:
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase)); 
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));

  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
 8002772:	430a      	orrs	r2, r1
 8002774:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
}
 8002778:	4770      	bx	lr

0800277a <TIM_DMACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 800277a:	8983      	ldrh	r3, [r0, #12]
 800277c:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx)); 
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800277e:	b10a      	cbz	r2, 8002784 <TIM_DMACmd+0xa>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 8002780:	4319      	orrs	r1, r3
 8002782:	e001      	b.n	8002788 <TIM_DMACmd+0xe>
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 8002784:	ea23 0101 	bic.w	r1, r3, r1
 8002788:	8181      	strh	r1, [r0, #12]
 800278a:	4770      	bx	lr

0800278c <TIM_SelectCCDMA>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 800278c:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800278e:	b119      	cbz	r1, 8002798 <TIM_SelectCCDMA+0xc>
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 8002790:	b29b      	uxth	r3, r3
 8002792:	f043 0308 	orr.w	r3, r3, #8
 8002796:	e003      	b.n	80027a0 <TIM_SelectCCDMA+0x14>
  }
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCDS;
 8002798:	f023 0308 	bic.w	r3, r3, #8
 800279c:	041b      	lsls	r3, r3, #16
 800279e:	0c1b      	lsrs	r3, r3, #16
 80027a0:	8083      	strh	r3, [r0, #4]
 80027a2:	4770      	bx	lr

080027a4 <TIM_InternalClockConfig>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  (uint16_t)~TIM_SMCR_SMS;
 80027a4:	8903      	ldrh	r3, [r0, #8]
 80027a6:	f023 0307 	bic.w	r3, r3, #7
 80027aa:	041b      	lsls	r3, r3, #16
 80027ac:	0c1b      	lsrs	r3, r3, #16
 80027ae:	8103      	strh	r3, [r0, #8]
}
 80027b0:	4770      	bx	lr

080027b2 <TIM_ITRxExternalClockConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80027b2:	8903      	ldrh	r3, [r0, #8]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 80027b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027b8:	041b      	lsls	r3, r3, #16
 80027ba:	0c1b      	lsrs	r3, r3, #16

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 80027bc:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027be:	8103      	strh	r3, [r0, #8]

  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);

  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 80027c0:	8903      	ldrh	r3, [r0, #8]
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	f043 0307 	orr.w	r3, r3, #7
 80027c8:	8103      	strh	r3, [r0, #8]
}
 80027ca:	4770      	bx	lr

080027cc <TIM_TIxExternalClockConfig>:
  *          This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
 80027cc:	b538      	push	{r3, r4, r5, lr}
 80027ce:	460d      	mov	r5, r1
 80027d0:	4611      	mov	r1, r2
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 80027d2:	2201      	movs	r2, #1
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 80027d4:	2d60      	cmp	r5, #96	; 0x60
  *          This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
 80027d6:	4604      	mov	r4, r0
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 80027d8:	d102      	bne.n	80027e0 <TIM_TIxExternalClockConfig+0x14>
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 80027da:	f7ff fb1a 	bl	8001e12 <TI2_Config>
 80027de:	e001      	b.n	80027e4 <TIM_TIxExternalClockConfig+0x18>
  }
  else
  {
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 80027e0:	f7ff fafe 	bl	8001de0 <TI1_Config>
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80027e4:	8923      	ldrh	r3, [r4, #8]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 80027e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027ea:	041b      	lsls	r3, r3, #16
 80027ec:	0c1b      	lsrs	r3, r3, #16

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 80027ee:	431d      	orrs	r5, r3

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027f0:	8125      	strh	r5, [r4, #8]
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
  }
  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 80027f2:	8923      	ldrh	r3, [r4, #8]
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	f043 0307 	orr.w	r3, r3, #7
 80027fa:	8123      	strh	r3, [r4, #8]
}
 80027fc:	bd38      	pop	{r3, r4, r5, pc}

080027fe <TIM_SelectInputTrigger>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80027fe:	8903      	ldrh	r3, [r0, #8]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 8002800:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002804:	041b      	lsls	r3, r3, #16
 8002806:	0c1b      	lsrs	r3, r3, #16

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 8002808:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800280a:	8103      	strh	r3, [r0, #8]
}
 800280c:	4770      	bx	lr

0800280e <TIM_SelectOutputTrigger>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
 800280e:	8883      	ldrh	r3, [r0, #4]
 8002810:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002814:	041b      	lsls	r3, r3, #16
 8002816:	0c1b      	lsrs	r3, r3, #16
 8002818:	8083      	strh	r3, [r0, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 800281a:	8883      	ldrh	r3, [r0, #4]
 800281c:	b29b      	uxth	r3, r3
 800281e:	430b      	orrs	r3, r1
 8002820:	8083      	strh	r3, [r0, #4]
}
 8002822:	4770      	bx	lr

08002824 <TIM_SelectSlaveMode>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));

  /* Reset the SMS Bits */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_SMS;
 8002824:	8903      	ldrh	r3, [r0, #8]
 8002826:	f023 0307 	bic.w	r3, r3, #7
 800282a:	041b      	lsls	r3, r3, #16
 800282c:	0c1b      	lsrs	r3, r3, #16
 800282e:	8103      	strh	r3, [r0, #8]

  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
 8002830:	8903      	ldrh	r3, [r0, #8]
 8002832:	b29b      	uxth	r3, r3
 8002834:	430b      	orrs	r3, r1
 8002836:	8103      	strh	r3, [r0, #8]
}
 8002838:	4770      	bx	lr

0800283a <TIM_SelectMasterSlaveMode>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));

  /* Reset the MSM Bit */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_MSM;
 800283a:	8903      	ldrh	r3, [r0, #8]
 800283c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002840:	041b      	lsls	r3, r3, #16
 8002842:	0c1b      	lsrs	r3, r3, #16
 8002844:	8103      	strh	r3, [r0, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
 8002846:	8903      	ldrh	r3, [r0, #8]
 8002848:	b29b      	uxth	r3, r3
 800284a:	430b      	orrs	r3, r1
 800284c:	8103      	strh	r3, [r0, #8]
}
 800284e:	4770      	bx	lr

08002850 <TIM_ETRConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                   uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 8002850:	b510      	push	{r4, lr}
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
 8002852:	8904      	ldrh	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
 8002854:	b2e4      	uxtb	r4, r4

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 8002856:	430c      	orrs	r4, r1
 8002858:	4314      	orrs	r4, r2
 800285a:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 800285e:	b2a4      	uxth	r4, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002860:	8104      	strh	r4, [r0, #8]
}
 8002862:	bd10      	pop	{r4, pc}

08002864 <TIM_ETRClockMode2Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 8002864:	b510      	push	{r4, lr}
 8002866:	4604      	mov	r4, r0
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 8002868:	f7ff fff2 	bl	8002850 <TIM_ETRConfig>

  /* Enable the External clock mode2 */
  TIMx->SMCR |= TIM_SMCR_ECE;
 800286c:	8923      	ldrh	r3, [r4, #8]
 800286e:	b29b      	uxth	r3, r3
 8002870:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002874:	8123      	strh	r3, [r4, #8]
}
 8002876:	bd10      	pop	{r4, pc}

08002878 <TIM_ETRClockMode1Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                            uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 8002878:	b510      	push	{r4, lr}
 800287a:	4604      	mov	r4, r0
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 800287c:	f7ff ffe8 	bl	8002850 <TIM_ETRConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002880:	8923      	ldrh	r3, [r4, #8]

  /* Reset the SMS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;

  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;
 8002882:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002886:	041b      	lsls	r3, r3, #16
 8002888:	0c1b      	lsrs	r3, r3, #16

  /* Select the Trigger selection : ETRF */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
  tmpsmcr |= TIM_TS_ETRF;
 800288a:	f043 0377 	orr.w	r3, r3, #119	; 0x77

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800288e:	8123      	strh	r3, [r4, #8]
}
 8002890:	bd10      	pop	{r4, pc}

08002892 <TIM_EncoderInterfaceConfig>:
  *            @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
 8002892:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002894:	8904      	ldrh	r4, [r0, #8]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8002896:	8b06      	ldrh	r6, [r0, #24]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002898:	8c05      	ldrh	r5, [r0, #32]
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 800289a:	f426 7640 	bic.w	r6, r6, #768	; 0x300

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800289e:	b2ad      	uxth	r5, r5
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 80028a0:	f026 0603 	bic.w	r6, r6, #3

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 80028a4:	f024 0407 	bic.w	r4, r4, #7
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 80028a8:	0436      	lsls	r6, r6, #16
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
 80028aa:	f025 0522 	bic.w	r5, r5, #34	; 0x22

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 80028ae:	0424      	lsls	r4, r4, #16
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 80028b0:	0c36      	lsrs	r6, r6, #16
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 80028b2:	4315      	orrs	r5, r2

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 80028b4:	0c24      	lsrs	r4, r4, #16
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 80028b6:	f446 7680 	orr.w	r6, r6, #256	; 0x100

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 80028ba:	ea45 1503 	orr.w	r5, r5, r3, lsl #4
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
  tmpsmcr |= TIM_EncoderMode;
 80028be:	4321      	orrs	r1, r4

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 80028c0:	f046 0601 	orr.w	r6, r6, #1

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 80028c4:	b2ad      	uxth	r5, r5

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028c6:	8101      	strh	r1, [r0, #8]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 80028c8:	8306      	strh	r6, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028ca:	8405      	strh	r5, [r0, #32]
}
 80028cc:	bd70      	pop	{r4, r5, r6, pc}

080028ce <TIM_SelectHallSensor>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 80028ce:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80028d0:	b119      	cbz	r1, 80028da <TIM_SelectHallSensor+0xc>
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028d8:	e003      	b.n	80028e2 <TIM_SelectHallSensor+0x14>
  }
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_TI1S;
 80028da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028de:	041b      	lsls	r3, r3, #16
 80028e0:	0c1b      	lsrs	r3, r3, #16
 80028e2:	8083      	strh	r3, [r0, #4]
 80028e4:	4770      	bx	lr

080028e6 <TIM_RemapConfig>:
 /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_REMAP(TIM_Remap));

  /* Set the Timer remapping configuration */
  TIMx->OR =  TIM_Remap;
 80028e6:	f8a0 1050 	strh.w	r1, [r0, #80]	; 0x50
}
 80028ea:	4770      	bx	lr

080028ec <USART_DeInit>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 80028ec:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 80028ee:	4b23      	ldr	r3, [pc, #140]	; (800297c <USART_DeInit+0x90>)
 80028f0:	4298      	cmp	r0, r3
 80028f2:	d105      	bne.n	8002900 <USART_DeInit+0x14>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 80028f4:	2010      	movs	r0, #16
 80028f6:	2101      	movs	r1, #1
 80028f8:	f7fe fff2 	bl	80018e0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 80028fc:	2010      	movs	r0, #16
 80028fe:	e037      	b.n	8002970 <USART_DeInit+0x84>
  }
  else if (USARTx == USART2)
 8002900:	4b1f      	ldr	r3, [pc, #124]	; (8002980 <USART_DeInit+0x94>)
 8002902:	4298      	cmp	r0, r3
 8002904:	d107      	bne.n	8002916 <USART_DeInit+0x2a>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 8002906:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800290a:	2101      	movs	r1, #1
 800290c:	f7fe ffdc 	bl	80018c8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 8002910:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002914:	e009      	b.n	800292a <USART_DeInit+0x3e>
  }
  else if (USARTx == USART3)
 8002916:	4b1b      	ldr	r3, [pc, #108]	; (8002984 <USART_DeInit+0x98>)
 8002918:	4298      	cmp	r0, r3
 800291a:	d10b      	bne.n	8002934 <USART_DeInit+0x48>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 800291c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002920:	2101      	movs	r1, #1
 8002922:	f7fe ffd1 	bl	80018c8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 8002926:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800292a:	2100      	movs	r1, #0
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
    }
  }
}
 800292c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
  }
  else if (USARTx == USART3)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 8002930:	f7fe bfca 	b.w	80018c8 <RCC_APB1PeriphResetCmd>
  }    
  else if (USARTx == UART4)
 8002934:	4b14      	ldr	r3, [pc, #80]	; (8002988 <USART_DeInit+0x9c>)
 8002936:	4298      	cmp	r0, r3
 8002938:	d107      	bne.n	800294a <USART_DeInit+0x5e>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 800293a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800293e:	2101      	movs	r1, #1
 8002940:	f7fe ffc2 	bl	80018c8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 8002944:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002948:	e7ef      	b.n	800292a <USART_DeInit+0x3e>
  }
  else if (USARTx == UART5)
 800294a:	4b10      	ldr	r3, [pc, #64]	; (800298c <USART_DeInit+0xa0>)
 800294c:	4298      	cmp	r0, r3
 800294e:	d107      	bne.n	8002960 <USART_DeInit+0x74>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 8002950:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002954:	2101      	movs	r1, #1
 8002956:	f7fe ffb7 	bl	80018c8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 800295a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800295e:	e7e4      	b.n	800292a <USART_DeInit+0x3e>
  }     
  else
  {
    if (USARTx == USART6)
 8002960:	4b0b      	ldr	r3, [pc, #44]	; (8002990 <USART_DeInit+0xa4>)
 8002962:	4298      	cmp	r0, r3
 8002964:	d109      	bne.n	800297a <USART_DeInit+0x8e>
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
 8002966:	2020      	movs	r0, #32
 8002968:	2101      	movs	r1, #1
 800296a:	f7fe ffb9 	bl	80018e0 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 800296e:	2020      	movs	r0, #32
 8002970:	2100      	movs	r1, #0
    }
  }
}
 8002972:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (USARTx == USART6)
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 8002976:	f7fe bfb3 	b.w	80018e0 <RCC_APB2PeriphResetCmd>
 800297a:	bd08      	pop	{r3, pc}
 800297c:	40011000 	.word	0x40011000
 8002980:	40004400 	.word	0x40004400
 8002984:	40004800 	.word	0x40004800
 8002988:	40004c00 	.word	0x40004c00
 800298c:	40005000 	.word	0x40005000
 8002990:	40011400 	.word	0x40011400

08002994 <USART_Init>:
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8002994:	8a03      	ldrh	r3, [r0, #16]
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8002996:	88ca      	ldrh	r2, [r1, #6]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8002998:	b29b      	uxth	r3, r3

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800299a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 800299e:	b530      	push	{r4, r5, lr}
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80029a0:	4313      	orrs	r3, r2
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80029a2:	460d      	mov	r5, r1
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80029a4:	8203      	strh	r3, [r0, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80029a6:	8983      	ldrh	r3, [r0, #12]

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80029a8:	8909      	ldrh	r1, [r1, #8]
 80029aa:	88aa      	ldrh	r2, [r5, #4]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 80029ac:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80029b0:	430a      	orrs	r2, r1
 80029b2:	8969      	ldrh	r1, [r5, #10]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 80029b4:	f023 030c 	bic.w	r3, r3, #12
 80029b8:	041b      	lsls	r3, r3, #16

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80029ba:	430a      	orrs	r2, r1

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 80029bc:	0c1b      	lsrs	r3, r3, #16

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80029be:	b292      	uxth	r2, r2
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 80029c0:	4313      	orrs	r3, r2
 80029c2:	8183      	strh	r3, [r0, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 80029c4:	8a83      	ldrh	r3, [r0, #20]
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 80029c6:	89aa      	ldrh	r2, [r5, #12]

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 80029c8:	b29b      	uxth	r3, r3

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 80029ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 80029ce:	4313      	orrs	r3, r2
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80029d0:	b085      	sub	sp, #20
  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 80029d2:	8283      	strh	r3, [r0, #20]
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80029d4:	4604      	mov	r4, r0
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 80029d6:	4668      	mov	r0, sp
 80029d8:	f7fe fea6 	bl	8001728 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 80029dc:	4b1a      	ldr	r3, [pc, #104]	; (8002a48 <USART_Init+0xb4>)
 80029de:	429c      	cmp	r4, r3
 80029e0:	d003      	beq.n	80029ea <USART_Init+0x56>
 80029e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80029e6:	429c      	cmp	r4, r3
 80029e8:	d101      	bne.n	80029ee <USART_Init+0x5a>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 80029ea:	9b03      	ldr	r3, [sp, #12]
 80029ec:	e000      	b.n	80029f0 <USART_Init+0x5c>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 80029ee:	9b02      	ldr	r3, [sp, #8]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80029f0:	89a2      	ldrh	r2, [r4, #12]
 80029f2:	b212      	sxth	r2, r2
 80029f4:	2a00      	cmp	r2, #0
 80029f6:	f04f 0119 	mov.w	r1, #25
 80029fa:	682a      	ldr	r2, [r5, #0]
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 80029fc:	fb01 f103 	mul.w	r1, r1, r3
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8002a00:	da01      	bge.n	8002a06 <USART_Init+0x72>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8002a02:	0052      	lsls	r2, r2, #1
 8002a04:	e000      	b.n	8002a08 <USART_Init+0x74>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8002a06:	0092      	lsls	r2, r2, #2
  }
  tmpreg = (integerdivider / 100) << 4;
 8002a08:	2364      	movs	r3, #100	; 0x64
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8002a0a:	fbb1 f1f2 	udiv	r1, r1, r2
  }
  tmpreg = (integerdivider / 100) << 4;
 8002a0e:	fbb1 f2f3 	udiv	r2, r1, r3
 8002a12:	0112      	lsls	r2, r2, #4

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8002a14:	0910      	lsrs	r0, r2, #4
 8002a16:	fb03 1110 	mls	r1, r3, r0, r1

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8002a1a:	89a0      	ldrh	r0, [r4, #12]
 8002a1c:	b200      	sxth	r0, r0
 8002a1e:	2800      	cmp	r0, #0
 8002a20:	da06      	bge.n	8002a30 <USART_Init+0x9c>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8002a22:	00c9      	lsls	r1, r1, #3
 8002a24:	3132      	adds	r1, #50	; 0x32
 8002a26:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a2a:	f003 0307 	and.w	r3, r3, #7
 8002a2e:	e005      	b.n	8002a3c <USART_Init+0xa8>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8002a30:	0109      	lsls	r1, r1, #4
 8002a32:	3132      	adds	r1, #50	; 0x32
 8002a34:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a38:	f003 030f 	and.w	r3, r3, #15
 8002a3c:	431a      	orrs	r2, r3
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8002a3e:	b292      	uxth	r2, r2
 8002a40:	8122      	strh	r2, [r4, #8]
}
 8002a42:	b005      	add	sp, #20
 8002a44:	bd30      	pop	{r4, r5, pc}
 8002a46:	bf00      	nop
 8002a48:	40011000 	.word	0x40011000

08002a4c <USART_StructInit>:
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 8002a4c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8002a50:	6003      	str	r3, [r0, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
  USART_InitStruct->USART_Parity = USART_Parity_No ;
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8002a52:	220c      	movs	r2, #12
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 8002a54:	2300      	movs	r3, #0
 8002a56:	8083      	strh	r3, [r0, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 8002a58:	80c3      	strh	r3, [r0, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 8002a5a:	8103      	strh	r3, [r0, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8002a5c:	8142      	strh	r2, [r0, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 8002a5e:	8183      	strh	r3, [r0, #12]
}
 8002a60:	4770      	bx	lr

08002a62 <USART_ClockInit>:
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8002a62:	880b      	ldrh	r3, [r1, #0]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8002a64:	8a02      	ldrh	r2, [r0, #16]
  *         contains the configuration information for the specified  USART peripheral.
  * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 8002a66:	b510      	push	{r4, lr}
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8002a68:	884c      	ldrh	r4, [r1, #2]
 8002a6a:	4323      	orrs	r3, r4
 8002a6c:	888c      	ldrh	r4, [r1, #4]
 8002a6e:	88c9      	ldrh	r1, [r1, #6]
 8002a70:	4323      	orrs	r3, r4
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8002a72:	b292      	uxth	r2, r2
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8002a74:	430b      	orrs	r3, r1
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 8002a76:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8002a7a:	b29b      	uxth	r3, r3
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	8203      	strh	r3, [r0, #16]
}
 8002a80:	bd10      	pop	{r4, pc}

08002a82 <USART_ClockStructInit>:
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 8002a82:	2300      	movs	r3, #0
 8002a84:	8003      	strh	r3, [r0, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 8002a86:	8043      	strh	r3, [r0, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 8002a88:	8083      	strh	r3, [r0, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 8002a8a:	80c3      	strh	r3, [r0, #6]
}
 8002a8c:	4770      	bx	lr

08002a8e <USART_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8002a8e:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002a90:	b119      	cbz	r1, 8002a9a <USART_Cmd+0xc>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002a98:	e003      	b.n	8002aa2 <USART_Cmd+0x14>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8002a9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002a9e:	041b      	lsls	r3, r3, #16
 8002aa0:	0c1b      	lsrs	r3, r3, #16
 8002aa2:	8183      	strh	r3, [r0, #12]
 8002aa4:	4770      	bx	lr

08002aa6 <USART_SetPrescaler>:
{ 
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= USART_GTPR_GT;
 8002aa6:	8b03      	ldrh	r3, [r0, #24]
 8002aa8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002aac:	8303      	strh	r3, [r0, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 8002aae:	8b03      	ldrh	r3, [r0, #24]
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	430b      	orrs	r3, r1
 8002ab4:	8303      	strh	r3, [r0, #24]
}
 8002ab6:	4770      	bx	lr

08002ab8 <USART_OverSampling8Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 8002ab8:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002aba:	b129      	cbz	r1, 8002ac8 <USART_OverSampling8Cmd+0x10>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 8002abc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ac0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	e001      	b.n	8002acc <USART_OverSampling8Cmd+0x14>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
 8002ac8:	045b      	lsls	r3, r3, #17
 8002aca:	0c5b      	lsrs	r3, r3, #17
 8002acc:	8183      	strh	r3, [r0, #12]
 8002ace:	4770      	bx	lr

08002ad0 <USART_OneBitMethodCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 8002ad0:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002ad2:	b119      	cbz	r1, 8002adc <USART_OneBitMethodCmd+0xc>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002ada:	e003      	b.n	8002ae4 <USART_OneBitMethodCmd+0x14>
  }
  else
  {
    /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
 8002adc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ae0:	041b      	lsls	r3, r3, #16
 8002ae2:	0c1b      	lsrs	r3, r3, #16
 8002ae4:	8283      	strh	r3, [r0, #20]
 8002ae6:	4770      	bx	lr

08002ae8 <USART_SendData>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8002ae8:	05c9      	lsls	r1, r1, #23
 8002aea:	0dc9      	lsrs	r1, r1, #23
 8002aec:	8081      	strh	r1, [r0, #4]
}
 8002aee:	4770      	bx	lr

08002af0 <USART_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8002af0:	8880      	ldrh	r0, [r0, #4]
 8002af2:	05c0      	lsls	r0, r0, #23
}
 8002af4:	0dc0      	lsrs	r0, r0, #23
 8002af6:	4770      	bx	lr

08002af8 <USART_SetAddress>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
 8002af8:	8a03      	ldrh	r3, [r0, #16]
 8002afa:	f023 030f 	bic.w	r3, r3, #15
 8002afe:	041b      	lsls	r3, r3, #16
 8002b00:	0c1b      	lsrs	r3, r3, #16
 8002b02:	8203      	strh	r3, [r0, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
 8002b04:	8a03      	ldrh	r3, [r0, #16]
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	430b      	orrs	r3, r1
 8002b0a:	8203      	strh	r3, [r0, #16]
}
 8002b0c:	4770      	bx	lr

08002b0e <USART_ReceiverWakeUpCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 8002b0e:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
 8002b10:	b119      	cbz	r1, 8002b1a <USART_ReceiverWakeUpCmd+0xc>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	f043 0302 	orr.w	r3, r3, #2
 8002b18:	e003      	b.n	8002b22 <USART_ReceiverWakeUpCmd+0x14>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
 8002b1a:	f023 0302 	bic.w	r3, r3, #2
 8002b1e:	041b      	lsls	r3, r3, #16
 8002b20:	0c1b      	lsrs	r3, r3, #16
 8002b22:	8183      	strh	r3, [r0, #12]
 8002b24:	4770      	bx	lr

08002b26 <USART_WakeUpConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
 8002b26:	8983      	ldrh	r3, [r0, #12]
 8002b28:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b2c:	041b      	lsls	r3, r3, #16
 8002b2e:	0c1b      	lsrs	r3, r3, #16
 8002b30:	8183      	strh	r3, [r0, #12]
  USARTx->CR1 |= USART_WakeUp;
 8002b32:	8983      	ldrh	r3, [r0, #12]
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	430b      	orrs	r3, r1
 8002b38:	8183      	strh	r3, [r0, #12]
}
 8002b3a:	4770      	bx	lr

08002b3c <USART_LINBreakDetectLengthConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
 8002b3c:	8a03      	ldrh	r3, [r0, #16]
 8002b3e:	f023 0320 	bic.w	r3, r3, #32
 8002b42:	041b      	lsls	r3, r3, #16
 8002b44:	0c1b      	lsrs	r3, r3, #16
 8002b46:	8203      	strh	r3, [r0, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 8002b48:	8a03      	ldrh	r3, [r0, #16]
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	430b      	orrs	r3, r1
 8002b4e:	8203      	strh	r3, [r0, #16]
}
 8002b50:	4770      	bx	lr

08002b52 <USART_LINCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 8002b52:	8a03      	ldrh	r3, [r0, #16]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002b54:	b119      	cbz	r1, 8002b5e <USART_LINCmd+0xc>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b5c:	e003      	b.n	8002b66 <USART_LINCmd+0x14>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
 8002b5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b62:	041b      	lsls	r3, r3, #16
 8002b64:	0c1b      	lsrs	r3, r3, #16
 8002b66:	8203      	strh	r3, [r0, #16]
 8002b68:	4770      	bx	lr

08002b6a <USART_SendBreak>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= USART_CR1_SBK;
 8002b6a:	8983      	ldrh	r3, [r0, #12]
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	f043 0301 	orr.w	r3, r3, #1
 8002b72:	8183      	strh	r3, [r0, #12]
}
 8002b74:	4770      	bx	lr

08002b76 <USART_HalfDuplexCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 8002b76:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002b78:	b119      	cbz	r1, 8002b82 <USART_HalfDuplexCmd+0xc>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	f043 0308 	orr.w	r3, r3, #8
 8002b80:	e003      	b.n	8002b8a <USART_HalfDuplexCmd+0x14>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
 8002b82:	f023 0308 	bic.w	r3, r3, #8
 8002b86:	041b      	lsls	r3, r3, #16
 8002b88:	0c1b      	lsrs	r3, r3, #16
 8002b8a:	8283      	strh	r3, [r0, #20]
 8002b8c:	4770      	bx	lr

08002b8e <USART_SetGuardTime>:
{    
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= USART_GTPR_PSC;
 8002b8e:	8b03      	ldrh	r3, [r0, #24]
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	8303      	strh	r3, [r0, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 8002b94:	8b03      	ldrh	r3, [r0, #24]
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002b9c:	8303      	strh	r3, [r0, #24]
}
 8002b9e:	4770      	bx	lr

08002ba0 <USART_SmartCardCmd>:
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 8002ba0:	8a83      	ldrh	r3, [r0, #20]
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002ba2:	b119      	cbz	r1, 8002bac <USART_SmartCardCmd+0xc>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	f043 0320 	orr.w	r3, r3, #32
 8002baa:	e003      	b.n	8002bb4 <USART_SmartCardCmd+0x14>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
 8002bac:	f023 0320 	bic.w	r3, r3, #32
 8002bb0:	041b      	lsls	r3, r3, #16
 8002bb2:	0c1b      	lsrs	r3, r3, #16
 8002bb4:	8283      	strh	r3, [r0, #20]
 8002bb6:	4770      	bx	lr

08002bb8 <USART_SmartCardNACKCmd>:
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 8002bb8:	8a83      	ldrh	r3, [r0, #20]
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002bba:	b119      	cbz	r1, 8002bc4 <USART_SmartCardNACKCmd+0xc>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	f043 0310 	orr.w	r3, r3, #16
 8002bc2:	e003      	b.n	8002bcc <USART_SmartCardNACKCmd+0x14>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
 8002bc4:	f023 0310 	bic.w	r3, r3, #16
 8002bc8:	041b      	lsls	r3, r3, #16
 8002bca:	0c1b      	lsrs	r3, r3, #16
 8002bcc:	8283      	strh	r3, [r0, #20]
 8002bce:	4770      	bx	lr

08002bd0 <USART_IrDAConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
 8002bd0:	8a83      	ldrh	r3, [r0, #20]
 8002bd2:	f023 0304 	bic.w	r3, r3, #4
 8002bd6:	041b      	lsls	r3, r3, #16
 8002bd8:	0c1b      	lsrs	r3, r3, #16
 8002bda:	8283      	strh	r3, [r0, #20]
  USARTx->CR3 |= USART_IrDAMode;
 8002bdc:	8a83      	ldrh	r3, [r0, #20]
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	430b      	orrs	r3, r1
 8002be2:	8283      	strh	r3, [r0, #20]
}
 8002be4:	4770      	bx	lr

08002be6 <USART_IrDACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 8002be6:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 8002be8:	b119      	cbz	r1, 8002bf2 <USART_IrDACmd+0xc>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	f043 0302 	orr.w	r3, r3, #2
 8002bf0:	e003      	b.n	8002bfa <USART_IrDACmd+0x14>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
 8002bf2:	f023 0302 	bic.w	r3, r3, #2
 8002bf6:	041b      	lsls	r3, r3, #16
 8002bf8:	0c1b      	lsrs	r3, r3, #16
 8002bfa:	8283      	strh	r3, [r0, #20]
 8002bfc:	4770      	bx	lr

08002bfe <USART_DMACmd>:

  if (NewState != DISABLE)
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8002bfe:	8a83      	ldrh	r3, [r0, #20]
 8002c00:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 8002c02:	b10a      	cbz	r2, 8002c08 <USART_DMACmd+0xa>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8002c04:	4319      	orrs	r1, r3
 8002c06:	e001      	b.n	8002c0c <USART_DMACmd+0xe>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 8002c08:	ea23 0101 	bic.w	r1, r3, r1
 8002c0c:	8281      	strh	r1, [r0, #20]
 8002c0e:	4770      	bx	lr

08002c10 <USART_ITConfig>:
  } 
    
  usartxbase = (uint32_t)USARTx;

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8002c10:	f3c1 1342 	ubfx	r3, r1, #5, #3
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8002c14:	b510      	push	{r4, lr}

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8002c16:	f001 011f 	and.w	r1, r1, #31
  itmask = (((uint32_t)0x01) << itpos);
 8002c1a:	2401      	movs	r4, #1
 8002c1c:	fa14 f101 	lsls.w	r1, r4, r1
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8002c20:	42a3      	cmp	r3, r4
 8002c22:	d101      	bne.n	8002c28 <USART_ITConfig+0x18>
  {
    usartxbase += 0x0C;
 8002c24:	300c      	adds	r0, #12
 8002c26:	e004      	b.n	8002c32 <USART_ITConfig+0x22>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d101      	bne.n	8002c30 <USART_ITConfig+0x20>
  {
    usartxbase += 0x10;
 8002c2c:	3010      	adds	r0, #16
 8002c2e:	e000      	b.n	8002c32 <USART_ITConfig+0x22>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8002c30:	3014      	adds	r0, #20
  }
  if (NewState != DISABLE)
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8002c32:	6803      	ldr	r3, [r0, #0]
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
  }
  if (NewState != DISABLE)
 8002c34:	b10a      	cbz	r2, 8002c3a <USART_ITConfig+0x2a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8002c36:	4319      	orrs	r1, r3
 8002c38:	e001      	b.n	8002c3e <USART_ITConfig+0x2e>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8002c3a:	ea23 0101 	bic.w	r1, r3, r1
 8002c3e:	6001      	str	r1, [r0, #0]
 8002c40:	bd10      	pop	{r4, pc}

08002c42 <USART_GetFlagStatus>:
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8002c42:	8803      	ldrh	r3, [r0, #0]
  {
    bitstatus = SET;
 8002c44:	4219      	tst	r1, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8002c46:	bf0c      	ite	eq
 8002c48:	2000      	moveq	r0, #0
 8002c4a:	2001      	movne	r0, #1
 8002c4c:	4770      	bx	lr

08002c4e <USART_ClearFlag>:
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
       
  USARTx->SR = (uint16_t)~USART_FLAG;
 8002c4e:	43c9      	mvns	r1, r1
 8002c50:	b289      	uxth	r1, r1
 8002c52:	8001      	strh	r1, [r0, #0]
}
 8002c54:	4770      	bx	lr

08002c56 <USART_GetITStatus>:
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
 8002c56:	2201      	movs	r2, #1
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8002c58:	b510      	push	{r4, lr}
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8002c5a:	f001 031f 	and.w	r3, r1, #31
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8002c5e:	f3c1 1442 	ubfx	r4, r1, #5, #3
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
 8002c62:	409a      	lsls	r2, r3
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8002c64:	2c01      	cmp	r4, #1
 8002c66:	d101      	bne.n	8002c6c <USART_GetITStatus+0x16>
  {
    itmask &= USARTx->CR1;
 8002c68:	8983      	ldrh	r3, [r0, #12]
 8002c6a:	e003      	b.n	8002c74 <USART_GetITStatus+0x1e>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8002c6c:	2c02      	cmp	r4, #2
  {
    itmask &= USARTx->CR2;
 8002c6e:	bf0c      	ite	eq
 8002c70:	8a03      	ldrheq	r3, [r0, #16]
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8002c72:	8a83      	ldrhne	r3, [r0, #20]
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	4013      	ands	r3, r2
  }
  
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
  bitpos &= USARTx->SR;
 8002c78:	8802      	ldrh	r2, [r0, #0]
 8002c7a:	b292      	uxth	r2, r2
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8002c7c:	b143      	cbz	r3, 8002c90 <USART_GetITStatus+0x3a>
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
  }
  
  bitpos = USART_IT >> 0x08;
 8002c7e:	0a09      	lsrs	r1, r1, #8
  bitpos = (uint32_t)0x01 << bitpos;
 8002c80:	2301      	movs	r3, #1
 8002c82:	fa13 f101 	lsls.w	r1, r3, r1
  *            @arg USART_IT_NE:   Noise Error interrupt
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
 8002c86:	4211      	tst	r1, r2
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
  bitpos &= USARTx->SR;
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
  {
    bitstatus = SET;
 8002c88:	bf0c      	ite	eq
 8002c8a:	2000      	moveq	r0, #0
 8002c8c:	2001      	movne	r0, #1
 8002c8e:	bd10      	pop	{r4, pc}
  }
  else
  {
    bitstatus = RESET;
 8002c90:	4618      	mov	r0, r3
  }
  
  return bitstatus;  
}
 8002c92:	bd10      	pop	{r4, pc}

08002c94 <USART_ClearITPendingBit>:
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 8002c94:	0a09      	lsrs	r1, r1, #8
 8002c96:	2301      	movs	r3, #1
 8002c98:	408b      	lsls	r3, r1
  USARTx->SR = (uint16_t)~itmask;
 8002c9a:	43db      	mvns	r3, r3
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	8003      	strh	r3, [r0, #0]
}
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop

08002ca4 <_close>:
	}
}

int _close(int file) {
	return -1;
}
 8002ca4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ca8:	4770      	bx	lr

08002caa <_execve>:
/*
 execve
 Transfer control to a new process. Minimal implementation (for a system without processes):
 */
int _execve(char *name, char **argv, char **env) {
	errno = ENOMEM;
 8002caa:	4b03      	ldr	r3, [pc, #12]	; (8002cb8 <_execve+0xe>)
 8002cac:	220c      	movs	r2, #12
 8002cae:	601a      	str	r2, [r3, #0]
	return -1;
}
 8002cb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	200016b0 	.word	0x200016b0

08002cbc <_fork>:
 fork
 Create a new process. Minimal implementation (for a system without processes):
 */

int _fork() {
	errno = EAGAIN;
 8002cbc:	4b02      	ldr	r3, [pc, #8]	; (8002cc8 <_fork+0xc>)
 8002cbe:	220b      	movs	r2, #11
 8002cc0:	601a      	str	r2, [r3, #0]
	return -1;
}
 8002cc2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002cc6:	4770      	bx	lr
 8002cc8:	200016b0 	.word	0x200016b0

08002ccc <_fstat>:
 Status of an open file. For consistency with other minimal implementations in these examples,
 all files are regarded as character special devices.
 The `sys/stat.h' header file required is distributed in the `include' subdirectory for this C library.
 */
int _fstat(int file, struct stat *st) {
	st->st_mode = S_IFCHR;
 8002ccc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002cd0:	604b      	str	r3, [r1, #4]
	return 0;
}
 8002cd2:	2000      	movs	r0, #0
 8002cd4:	4770      	bx	lr

08002cd6 <_getpid>:
 Process-ID; this is sometimes used to generate strings unlikely to conflict with other processes. Minimal implementation, for a system without processes:
 */

int _getpid() {
	return 1;
}
 8002cd6:	2001      	movs	r0, #1
 8002cd8:	4770      	bx	lr

08002cda <_isatty>:
/*
 isatty
 Query whether output stream is a terminal. For consistency with the other minimal implementations,
 */
int _isatty(int file) {
	switch (file) {
 8002cda:	2802      	cmp	r0, #2
 8002cdc:	d904      	bls.n	8002ce8 <_isatty+0xe>
	case STDERR_FILENO:
	case STDIN_FILENO:
		return 1;
	default:
		//errno = ENOTTY;
		errno = EBADF;
 8002cde:	4b03      	ldr	r3, [pc, #12]	; (8002cec <_isatty+0x12>)
 8002ce0:	2209      	movs	r2, #9
 8002ce2:	601a      	str	r2, [r3, #0]
		return 0;
 8002ce4:	2000      	movs	r0, #0
 8002ce6:	4770      	bx	lr
int _isatty(int file) {
	switch (file) {
	case STDOUT_FILENO:
	case STDERR_FILENO:
	case STDIN_FILENO:
		return 1;
 8002ce8:	2001      	movs	r0, #1
	default:
		//errno = ENOTTY;
		errno = EBADF;
		return 0;
	}
}
 8002cea:	4770      	bx	lr
 8002cec:	200016b0 	.word	0x200016b0

08002cf0 <_kill>:
/*
 kill
 Send a signal. Minimal implementation:
 */
int _kill(int pid, int sig) {
	errno = EINVAL;
 8002cf0:	4b02      	ldr	r3, [pc, #8]	; (8002cfc <_kill+0xc>)
 8002cf2:	2216      	movs	r2, #22
 8002cf4:	601a      	str	r2, [r3, #0]
	return (-1);
}
 8002cf6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002cfa:	4770      	bx	lr
 8002cfc:	200016b0 	.word	0x200016b0

08002d00 <_link>:
 link
 Establish a new name for an existing file. Minimal implementation:
 */

int _link(char *old, char *new) {
	errno = EMLINK;
 8002d00:	4b02      	ldr	r3, [pc, #8]	; (8002d0c <_link+0xc>)
 8002d02:	221f      	movs	r2, #31
 8002d04:	601a      	str	r2, [r3, #0]
	return -1;
}
 8002d06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d0a:	4770      	bx	lr
 8002d0c:	200016b0 	.word	0x200016b0

08002d10 <_lseek>:
 lseek
 Set position in a file. Minimal implementation:
 */
int _lseek(int file, int ptr, int dir) {
	return 0;
}
 8002d10:	2000      	movs	r0, #0
 8002d12:	4770      	bx	lr

08002d14 <_read>:
 read
 Read a character to a file. `libc' subroutines will use this system routine for input from all files, including stdin
 Returns -1 on error or blocks until the number of characters have been read.
 */

int _read(int file, char *ptr, int len) {
 8002d14:	b530      	push	{r4, r5, lr}
	int n;
	int num = 0;
	switch (file) {
 8002d16:	b138      	cbz	r0, 8002d28 <_read+0x14>
 8002d18:	e00d      	b.n	8002d36 <_read+0x22>
	case STDIN_FILENO:
		for (n = 0; n < len; n++) {
#if   STDIN_USART == 1
			while ((USART1->SR & USART_FLAG_RXNE) == (uint16_t)RESET) {}
 8002d1a:	881d      	ldrh	r5, [r3, #0]
 8002d1c:	06ad      	lsls	r5, r5, #26
 8002d1e:	d5fc      	bpl.n	8002d1a <_read+0x6>
			char c = (char)(USART1->DR & (uint16_t)0x01FF);
 8002d20:	88a5      	ldrh	r5, [r4, #4]
 8002d22:	540d      	strb	r5, [r1, r0]
int _read(int file, char *ptr, int len) {
	int n;
	int num = 0;
	switch (file) {
	case STDIN_FILENO:
		for (n = 0; n < len; n++) {
 8002d24:	3001      	adds	r0, #1
 8002d26:	e001      	b.n	8002d2c <_read+0x18>
#if   STDIN_USART == 1
			while ((USART1->SR & USART_FLAG_RXNE) == (uint16_t)RESET) {}
 8002d28:	4b06      	ldr	r3, [pc, #24]	; (8002d44 <_read+0x30>)
 8002d2a:	461c      	mov	r4, r3
int _read(int file, char *ptr, int len) {
	int n;
	int num = 0;
	switch (file) {
	case STDIN_FILENO:
		for (n = 0; n < len; n++) {
 8002d2c:	4290      	cmp	r0, r2
 8002d2e:	dbf4      	blt.n	8002d1a <_read+0x6>
 8002d30:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8002d34:	bd30      	pop	{r4, r5, pc}
					*ptr++ = c;
					num++;
				}
				break;
				default:
				errno = EBADF;
 8002d36:	4b04      	ldr	r3, [pc, #16]	; (8002d48 <_read+0x34>)
 8002d38:	2209      	movs	r2, #9
 8002d3a:	601a      	str	r2, [r3, #0]
				return -1;
 8002d3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			}
	return num;
}
 8002d40:	bd30      	pop	{r4, r5, pc}
 8002d42:	bf00      	nop
 8002d44:	40011000 	.word	0x40011000
 8002d48:	200016b0 	.word	0x200016b0

08002d4c <_stat>:
 Status of a file (by name). Minimal implementation:
 int    _EXFUN(stat,( const char *__path, struct stat *__sbuf ));
 */

int _stat(const char *filepath, struct stat *st) {
	st->st_mode = S_IFCHR;
 8002d4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d50:	604b      	str	r3, [r1, #4]
	return 0;
}
 8002d52:	2000      	movs	r0, #0
 8002d54:	4770      	bx	lr

08002d56 <_times>:
 Timing information for current process. Minimal implementation:
 */

clock_t _times(struct tms *buf) {
	return -1;
}
 8002d56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d5a:	4770      	bx	lr

08002d5c <_unlink>:
/*
 unlink
 Remove a file's directory entry. Minimal implementation:
 */
int _unlink(char *name) {
	errno = ENOENT;
 8002d5c:	4b02      	ldr	r3, [pc, #8]	; (8002d68 <_unlink+0xc>)
 8002d5e:	2202      	movs	r2, #2
 8002d60:	601a      	str	r2, [r3, #0]
	return -1;
}
 8002d62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d66:	4770      	bx	lr
 8002d68:	200016b0 	.word	0x200016b0

08002d6c <_wait>:
/*
 wait
 Wait for a child process. Minimal implementation:
 */
int _wait(int *status) {
	errno = ECHILD;
 8002d6c:	4b02      	ldr	r3, [pc, #8]	; (8002d78 <_wait+0xc>)
 8002d6e:	220a      	movs	r2, #10
 8002d70:	601a      	str	r2, [r3, #0]
	return -1;
}
 8002d72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d76:	4770      	bx	lr
 8002d78:	200016b0 	.word	0x200016b0

08002d7c <_write>:
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
 8002d7c:	2801      	cmp	r0, #1
/*
 write
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
 8002d7e:	b530      	push	{r4, r5, lr}
	int n;
	switch (file) {
 8002d80:	d009      	beq.n	8002d96 <_write+0x1a>
 8002d82:	2802      	cmp	r0, #2
 8002d84:	d11a      	bne.n	8002dbc <_write+0x40>
 8002d86:	e013      	b.n	8002db0 <_write+0x34>
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
#if STDOUT_USART == 1
			while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 8002d88:	8805      	ldrh	r5, [r0, #0]
 8002d8a:	066d      	lsls	r5, r5, #25
 8002d8c:	d5fc      	bpl.n	8002d88 <_write+0xc>
			USART1->DR = (*ptr++ & (uint16_t)0x01FF);
 8002d8e:	5ccd      	ldrb	r5, [r1, r3]
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
 8002d90:	3301      	adds	r3, #1
#if STDOUT_USART == 1
			while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
			USART1->DR = (*ptr++ & (uint16_t)0x01FF);
 8002d92:	80a5      	strh	r5, [r4, #4]
 8002d94:	e002      	b.n	8002d9c <_write+0x20>
	int n;
	switch (file) {
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
#if STDOUT_USART == 1
			while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 8002d96:	480d      	ldr	r0, [pc, #52]	; (8002dcc <_write+0x50>)
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
 8002d98:	2300      	movs	r3, #0
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
#if STDOUT_USART == 1
			while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 8002d9a:	4604      	mov	r4, r0
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	dbf3      	blt.n	8002d88 <_write+0xc>
 8002da0:	e011      	b.n	8002dc6 <_write+0x4a>
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
#if STDERR_USART == 1
					while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 8002da2:	8805      	ldrh	r5, [r0, #0]
 8002da4:	066d      	lsls	r5, r5, #25
 8002da6:	d5fc      	bpl.n	8002da2 <_write+0x26>
					USART1->DR = (*ptr++ & (uint16_t)0x01FF);
 8002da8:	5ccd      	ldrb	r5, [r1, r3]
					USART3->DR = (*ptr++ & (uint16_t)0x01FF);
#endif
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
 8002daa:	3301      	adds	r3, #1
#if STDERR_USART == 1
					while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
					USART1->DR = (*ptr++ & (uint16_t)0x01FF);
 8002dac:	80a5      	strh	r5, [r4, #4]
 8002dae:	e002      	b.n	8002db6 <_write+0x3a>
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
#if STDERR_USART == 1
					while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 8002db0:	4806      	ldr	r0, [pc, #24]	; (8002dcc <_write+0x50>)
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
 8002db2:	2300      	movs	r3, #0
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
#if STDERR_USART == 1
					while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 8002db4:	4604      	mov	r4, r0
					USART3->DR = (*ptr++ & (uint16_t)0x01FF);
#endif
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
 8002db6:	4293      	cmp	r3, r2
 8002db8:	dbf3      	blt.n	8002da2 <_write+0x26>
 8002dba:	e004      	b.n	8002dc6 <_write+0x4a>
					USART3->DR = (*ptr++ & (uint16_t)0x01FF);
#endif
				}
				break;
				default:
				errno = EBADF;
 8002dbc:	4b04      	ldr	r3, [pc, #16]	; (8002dd0 <_write+0x54>)
 8002dbe:	2209      	movs	r2, #9
 8002dc0:	601a      	str	r2, [r3, #0]
				return -1;
 8002dc2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
			}
	return len;
}
 8002dc6:	4610      	mov	r0, r2
 8002dc8:	bd30      	pop	{r4, r5, pc}
 8002dca:	bf00      	nop
 8002dcc:	40011000 	.word	0x40011000
 8002dd0:	200016b0 	.word	0x200016b0

08002dd4 <_sbrk>:
/*
 sbrk
 Increase program data space.
 Malloc and related functions depend on this
 */
caddr_t _sbrk(int incr) {
 8002dd4:	b508      	push	{r3, lr}

	extern char _ebss; // Defined by the linker
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0) {
 8002dd6:	4b0d      	ldr	r3, [pc, #52]	; (8002e0c <_sbrk+0x38>)
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	b90a      	cbnz	r2, 8002de0 <_sbrk+0xc>
		heap_end = &_ebss;
 8002ddc:	4a0c      	ldr	r2, [pc, #48]	; (8002e10 <_sbrk+0x3c>)
 8002dde:	601a      	str	r2, [r3, #0]
	}
	prev_heap_end = heap_end;
 8002de0:	681b      	ldr	r3, [r3, #0]
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __get_MSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 8002de2:	f3ef 8208 	mrs	r2, MSP

	char * stack = (char*) __get_MSP();
	if (heap_end + incr > stack) {
 8002de6:	1818      	adds	r0, r3, r0
 8002de8:	4290      	cmp	r0, r2
 8002dea:	d90a      	bls.n	8002e02 <_sbrk+0x2e>
		_write(STDERR_FILENO, "Heap and stack collision\n", 25);
 8002dec:	2219      	movs	r2, #25
 8002dee:	2002      	movs	r0, #2
 8002df0:	4908      	ldr	r1, [pc, #32]	; (8002e14 <_sbrk+0x40>)
 8002df2:	f7ff ffc3 	bl	8002d7c <_write>
		errno = ENOMEM;
 8002df6:	4b08      	ldr	r3, [pc, #32]	; (8002e18 <_sbrk+0x44>)
 8002df8:	220c      	movs	r2, #12
 8002dfa:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8002dfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e00:	e001      	b.n	8002e06 <_sbrk+0x32>
		//abort ();
	}

	heap_end += incr;
 8002e02:	4a02      	ldr	r2, [pc, #8]	; (8002e0c <_sbrk+0x38>)
 8002e04:	6010      	str	r0, [r2, #0]
	return (caddr_t) prev_heap_end;

}
 8002e06:	4618      	mov	r0, r3
 8002e08:	bd08      	pop	{r3, pc}
 8002e0a:	bf00      	nop
 8002e0c:	2000097c 	.word	0x2000097c
 8002e10:	200016b4 	.word	0x200016b4
 8002e14:	080088da 	.word	0x080088da
 8002e18:	200016b0 	.word	0x200016b0

08002e1c <_exit>:
char *__env[1] = { 0 };
char **environ = __env;

int _write(int file, char *ptr, int len);

void _exit(int status) {
 8002e1c:	b508      	push	{r3, lr}
	_write(1, "exit", 4);
 8002e1e:	2001      	movs	r0, #1
 8002e20:	4902      	ldr	r1, [pc, #8]	; (8002e2c <_exit+0x10>)
 8002e22:	2204      	movs	r2, #4
 8002e24:	f7ff ffaa 	bl	8002d7c <_write>
 8002e28:	e7fe      	b.n	8002e28 <_exit+0xc>
 8002e2a:	bf00      	nop
 8002e2c:	080088f4 	.word	0x080088f4

08002e30 <I2C_Configuration>:
  * @brief  I2C Configuration
  * @param  None
  * @retval None
  */
void I2C_Configuration(void)
{
 8002e30:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef  GPIO_InitStructure;
  I2C_InitTypeDef  I2C_InitStructure;

  /* I2C Periph clock enable */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);  //  RCC_APB1PeriphClockCmd(I2C1_RCC, ENABLE);
 8002e32:	2101      	movs	r1, #1
  * @brief  I2C Configuration
  * @param  None
  * @retval None
  */
void I2C_Configuration(void)
{
 8002e34:	b087      	sub	sp, #28
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);  //  RCC_APB1PeriphClockCmd(I2C1_RCC, ENABLE);
  /* GPIO Periph clock enable */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE); // PB5 (SMBA), PB6 (SCL), PB9 (SDA)  // RCC_APB2PeriphClockCmd(I2C1_GPIO_RCC, ENABLE);

  /* Configure I2C pins: SCL and SDA */
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_I2C1);
 8002e36:	4c21      	ldr	r4, [pc, #132]	; (8002ebc <I2C_Configuration+0x8c>)
{
  GPIO_InitTypeDef  GPIO_InitStructure;
  I2C_InitTypeDef  I2C_InitStructure;

  /* I2C Periph clock enable */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);  //  RCC_APB1PeriphClockCmd(I2C1_RCC, ENABLE);
 8002e38:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002e3c:	f7fe fd08 	bl	8001850 <RCC_APB1PeriphClockCmd>
  /* GPIO Periph clock enable */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE); // PB5 (SMBA), PB6 (SCL), PB9 (SDA)  // RCC_APB2PeriphClockCmd(I2C1_GPIO_RCC, ENABLE);
 8002e40:	2002      	movs	r0, #2
 8002e42:	2101      	movs	r1, #1
 8002e44:	f7fe fce0 	bl	8001808 <RCC_AHB1PeriphClockCmd>

  /* Configure I2C pins: SCL and SDA */
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_I2C1);
 8002e48:	4620      	mov	r0, r4
 8002e4a:	2106      	movs	r1, #6
 8002e4c:	2204      	movs	r2, #4
 8002e4e:	f7fe f9b3 	bl	80011b8 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_I2C1);
 8002e52:	2204      	movs	r2, #4
 8002e54:	4620      	mov	r0, r4
 8002e56:	2109      	movs	r1, #9
 8002e58:	f7fe f9ae 	bl	80011b8 <GPIO_PinAFConfig>

  GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_6 | GPIO_Pin_9;
 8002e5c:	f44f 7310 	mov.w	r3, #576	; 0x240
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 8002e60:	2501      	movs	r5, #1

  /* Configure I2C pins: SCL and SDA */
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_I2C1);
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_I2C1);

  GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_6 | GPIO_Pin_9;
 8002e62:	9304      	str	r3, [sp, #16]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002e64:	4620      	mov	r0, r4
  /* Configure I2C pins: SCL and SDA */
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_I2C1);
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_I2C1);

  GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_6 | GPIO_Pin_9;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002e66:	2302      	movs	r3, #2
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002e68:	a904      	add	r1, sp, #16
  /* Configure I2C pins: SCL and SDA */
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_I2C1);
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_I2C1);

  GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_6 | GPIO_Pin_9;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002e6a:	f88d 3015 	strb.w	r3, [sp, #21]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8002e6e:	f88d 3014 	strb.w	r3, [sp, #20]
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_I2C1);
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_I2C1);

  GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_6 | GPIO_Pin_9;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 8002e72:	f88d 5016 	strb.w	r5, [sp, #22]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8002e76:	f88d 5017 	strb.w	r5, [sp, #23]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002e7a:	f7fe f91d 	bl	80010b8 <GPIO_Init>
//#if defined (REMAP_I2C1)
//Remap_I2C1_Configuration();
//#endif

  /* I2C configuration */
  I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	f8ad 3004 	strh.w	r3, [sp, #4]
  I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
 8002e84:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8002e88:	f8ad 3006 	strh.w	r3, [sp, #6]
  I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 8002e8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e90:	f8ad 300a 	strh.w	r3, [sp, #10]
  I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8002e94:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002e98:	f8ad 300c 	strh.w	r3, [sp, #12]
  I2C_InitStructure.I2C_ClockSpeed = I2C_CLOCK;
 8002e9c:	a906      	add	r1, sp, #24
 8002e9e:	4b08      	ldr	r3, [pc, #32]	; (8002ec0 <I2C_Configuration+0x90>)

  /* Apply I2C configuration after enabling it */
  I2C_Init(I2C1, &I2C_InitStructure);
 8002ea0:	f5a4 34d8 	sub.w	r4, r4, #110592	; 0x1b000
  /* I2C configuration */
  I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
  I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
  I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
  I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
  I2C_InitStructure.I2C_ClockSpeed = I2C_CLOCK;
 8002ea4:	f841 3d18 	str.w	r3, [r1, #-24]!

  /* Apply I2C configuration after enabling it */
  I2C_Init(I2C1, &I2C_InitStructure);
 8002ea8:	4620      	mov	r0, r4
 8002eaa:	4669      	mov	r1, sp
 8002eac:	f7fe f9c8 	bl	8001240 <I2C_Init>
  /* I2C Peripheral Enable */
  I2C_Cmd(I2C1, ENABLE);
 8002eb0:	4620      	mov	r0, r4
 8002eb2:	4629      	mov	r1, r5
 8002eb4:	f7fe fa38 	bl	8001328 <I2C_Cmd>
}
 8002eb8:	b007      	add	sp, #28
 8002eba:	bd30      	pop	{r4, r5, pc}
 8002ebc:	40020400 	.word	0x40020400
 8002ec0:	000186a0 	.word	0x000186a0

08002ec4 <ST7032i_Command_Write>:
  * @brief  Write Command to ST7032i
  * @param  Data : Command Data
  * @retval None
  */
void ST7032i_Command_Write(uint8_t Data)
{
 8002ec4:	b507      	push	{r0, r1, r2, lr}
	uint8_t data[] = { 0b00000000, Data };
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	f88d 0005 	strb.w	r0, [sp, #5]
	i2c_transmit(ST7032I_ADDR, data, 2);
 8002ecc:	a901      	add	r1, sp, #4
 8002ece:	203e      	movs	r0, #62	; 0x3e
 8002ed0:	2202      	movs	r2, #2
  * @param  Data : Command Data
  * @retval None
  */
void ST7032i_Command_Write(uint8_t Data)
{
	uint8_t data[] = { 0b00000000, Data };
 8002ed2:	f88d 3004 	strb.w	r3, [sp, #4]
	i2c_transmit(ST7032I_ADDR, data, 2);
 8002ed6:	f7fd fb1b 	bl	8000510 <i2c_transmit>
  I2C_SendData(I2C1, Data);
  /* Test on EV8 and clear it */
  while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
  /* Send STOP condition */
  I2C_GenerateSTOP(I2C1, ENABLE);
}
 8002eda:	bd0e      	pop	{r1, r2, r3, pc}

08002edc <ST7032i_Icon_Off>:
  * @brief  Put off icon whili Icon RAM is kept
  * @param  None
  * @retval None
  */
void ST7032i_Icon_Off(void)
{
 8002edc:	b508      	push	{r3, lr}
  //Power/Icon/Contrast control
  ST7032i_Command_Write( (Power_Icon_Contrast | ( (Contrast >> 4) & 0b00000011 )) & 0b11110111);
 8002ede:	4b07      	ldr	r3, [pc, #28]	; (8002efc <ST7032i_Icon_Off+0x20>)
 8002ee0:	781a      	ldrb	r2, [r3, #0]
 8002ee2:	7858      	ldrb	r0, [r3, #1]
 8002ee4:	f3c0 1001 	ubfx	r0, r0, #4, #2
 8002ee8:	4310      	orrs	r0, r2
 8002eea:	f000 00f7 	and.w	r0, r0, #247	; 0xf7
 8002eee:	f7ff ffe9 	bl	8002ec4 <ST7032i_Command_Write>
  delay_us(27);
 8002ef2:	201b      	movs	r0, #27
}
 8002ef4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  */
void ST7032i_Icon_Off(void)
{
  //Power/Icon/Contrast control
  ST7032i_Command_Write( (Power_Icon_Contrast | ( (Contrast >> 4) & 0b00000011 )) & 0b11110111);
  delay_us(27);
 8002ef8:	f7fd b9ac 	b.w	8000254 <delay_us>
 8002efc:	20000088 	.word	0x20000088

08002f00 <ST7032i_Icon_On>:
  * @brief  Display icon
  * @param  None
  * @retval None
  */
void ST7032i_Icon_On(void)
{
 8002f00:	b508      	push	{r3, lr}
  //Power/Icon/Contrast control
  ST7032i_Command_Write(Power_Icon_Contrast | ( (Contrast >> 4) & 0b00000011 ) | 0b00001000 );
 8002f02:	4b07      	ldr	r3, [pc, #28]	; (8002f20 <ST7032i_Icon_On+0x20>)
 8002f04:	7818      	ldrb	r0, [r3, #0]
 8002f06:	785b      	ldrb	r3, [r3, #1]
 8002f08:	f040 0008 	orr.w	r0, r0, #8
 8002f0c:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8002f10:	4318      	orrs	r0, r3
 8002f12:	f7ff ffd7 	bl	8002ec4 <ST7032i_Command_Write>
  delay_us(27);
 8002f16:	201b      	movs	r0, #27
}
 8002f18:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  */
void ST7032i_Icon_On(void)
{
  //Power/Icon/Contrast control
  ST7032i_Command_Write(Power_Icon_Contrast | ( (Contrast >> 4) & 0b00000011 ) | 0b00001000 );
  delay_us(27);
 8002f1c:	f7fd b99a 	b.w	8000254 <delay_us>
 8002f20:	20000088 	.word	0x20000088

08002f24 <ST7032i_Set_Contrast>:
  * @brief  Set display contrast. value is to be 0 - 63
  * @param  contrast: contrast
  * @retval None
  */
void ST7032i_Set_Contrast(uint8_t contrast)
{
 8002f24:	b510      	push	{r4, lr}
 8002f26:	4604      	mov	r4, r0
  //Contrast set
  ST7032i_Command_Write(0b01110000 | (contrast & 0b00001111));
 8002f28:	f000 000f 	and.w	r0, r0, #15
 8002f2c:	f040 0070 	orr.w	r0, r0, #112	; 0x70
 8002f30:	f7ff ffc8 	bl	8002ec4 <ST7032i_Command_Write>

  delay_us(27);
 8002f34:	201b      	movs	r0, #27
 8002f36:	f7fd f98d 	bl	8000254 <delay_us>

  //Power/Icon/Contrast control
  ST7032i_Command_Write(Power_Icon_Contrast | ( (contrast >> 4) & 0b00000011 ) );
 8002f3a:	4b06      	ldr	r3, [pc, #24]	; (8002f54 <ST7032i_Set_Contrast+0x30>)
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	f3c4 1001 	ubfx	r0, r4, #4, #2
 8002f42:	4318      	orrs	r0, r3
 8002f44:	f7ff ffbe 	bl	8002ec4 <ST7032i_Command_Write>

  delay_us(27);
 8002f48:	201b      	movs	r0, #27
}
 8002f4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  delay_us(27);

  //Power/Icon/Contrast control
  ST7032i_Command_Write(Power_Icon_Contrast | ( (contrast >> 4) & 0b00000011 ) );

  delay_us(27);
 8002f4e:	f7fd b981 	b.w	8000254 <delay_us>
 8002f52:	bf00      	nop
 8002f54:	20000088 	.word	0x20000088

08002f58 <ST7032i_Set_DDRAM>:
  * @brief  set DDRAM address
  * @param  address : DDRAM address
  * @retval None
  */
void ST7032i_Set_DDRAM(uint8_t address)
{
 8002f58:	b510      	push	{r4, lr}
 8002f5a:	4604      	mov	r4, r0
  ST7032i_Command_Write(0b10000000 | address);
 8002f5c:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8002f60:	f7ff ffb0 	bl	8002ec4 <ST7032i_Command_Write>
  DDRAM_Address = address;
 8002f64:	4b03      	ldr	r3, [pc, #12]	; (8002f74 <ST7032i_Set_DDRAM+0x1c>)
  delay_us(27);
 8002f66:	201b      	movs	r0, #27
  * @retval None
  */
void ST7032i_Set_DDRAM(uint8_t address)
{
  ST7032i_Command_Write(0b10000000 | address);
  DDRAM_Address = address;
 8002f68:	701c      	strb	r4, [r3, #0]
  delay_us(27);
}
 8002f6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  */
void ST7032i_Set_DDRAM(uint8_t address)
{
  ST7032i_Command_Write(0b10000000 | address);
  DDRAM_Address = address;
  delay_us(27);
 8002f6e:	f7fd b971 	b.w	8000254 <delay_us>
 8002f72:	bf00      	nop
 8002f74:	20000984 	.word	0x20000984

08002f78 <ST7032i_Cursor_Blink_Off>:
  * @brief  display square cursor
  * @param  None
  * @retval None
  */
void ST7032i_Cursor_Blink_Off(void)
{
 8002f78:	b508      	push	{r3, lr}
  ST7032i_Command_Write(( Display & 0b11111110) | 0b00000000);
 8002f7a:	4b05      	ldr	r3, [pc, #20]	; (8002f90 <ST7032i_Cursor_Blink_Off+0x18>)
 8002f7c:	7898      	ldrb	r0, [r3, #2]
 8002f7e:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
 8002f82:	f7ff ff9f 	bl	8002ec4 <ST7032i_Command_Write>
  delay_us(27);
 8002f86:	201b      	movs	r0, #27
}
 8002f88:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  * @retval None
  */
void ST7032i_Cursor_Blink_Off(void)
{
  ST7032i_Command_Write(( Display & 0b11111110) | 0b00000000);
  delay_us(27);
 8002f8c:	f7fd b962 	b.w	8000254 <delay_us>
 8002f90:	20000088 	.word	0x20000088

08002f94 <ST7032i_Cursor_Blink_On>:
  * @brief  make square cursor brink
  * @param  None
  * @retval None
  */
void ST7032i_Cursor_Blink_On(void)
{
 8002f94:	b508      	push	{r3, lr}
  ST7032i_Command_Write(( Display & 0b11111110) | 0b00000001);
 8002f96:	4b05      	ldr	r3, [pc, #20]	; (8002fac <ST7032i_Cursor_Blink_On+0x18>)
 8002f98:	7898      	ldrb	r0, [r3, #2]
 8002f9a:	f040 0001 	orr.w	r0, r0, #1
 8002f9e:	f7ff ff91 	bl	8002ec4 <ST7032i_Command_Write>
  delay_us(27);
 8002fa2:	201b      	movs	r0, #27
}
 8002fa4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  * @retval None
  */
void ST7032i_Cursor_Blink_On(void)
{
  ST7032i_Command_Write(( Display & 0b11111110) | 0b00000001);
  delay_us(27);
 8002fa8:	f7fd b954 	b.w	8000254 <delay_us>
 8002fac:	20000088 	.word	0x20000088

08002fb0 <ST7032i_Cursor_Off>:
  * @brief  put off cursor
  * @param  None
  * @retval None
  */
void ST7032i_Cursor_Off(void)
{
 8002fb0:	b508      	push	{r3, lr}
  ST7032i_Command_Write(( Display & 0b11111101) | 0b00000000);
 8002fb2:	4b05      	ldr	r3, [pc, #20]	; (8002fc8 <ST7032i_Cursor_Off+0x18>)
 8002fb4:	7898      	ldrb	r0, [r3, #2]
 8002fb6:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
 8002fba:	f7ff ff83 	bl	8002ec4 <ST7032i_Command_Write>
  delay_us(27);
 8002fbe:	201b      	movs	r0, #27
}
 8002fc0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  * @retval None
  */
void ST7032i_Cursor_Off(void)
{
  ST7032i_Command_Write(( Display & 0b11111101) | 0b00000000);
  delay_us(27);
 8002fc4:	f7fd b946 	b.w	8000254 <delay_us>
 8002fc8:	20000088 	.word	0x20000088

08002fcc <ST7032i_Cursor_On>:
  * @brief  display under line cursor
  * @param  None
  * @retval None
  */
void ST7032i_Cursor_On(void)
{
 8002fcc:	b508      	push	{r3, lr}
  ST7032i_Command_Write(( Display & 0b11111101) | 0b00000010);
 8002fce:	4b05      	ldr	r3, [pc, #20]	; (8002fe4 <ST7032i_Cursor_On+0x18>)
 8002fd0:	7898      	ldrb	r0, [r3, #2]
 8002fd2:	f040 0002 	orr.w	r0, r0, #2
 8002fd6:	f7ff ff75 	bl	8002ec4 <ST7032i_Command_Write>
  delay_us(27);
 8002fda:	201b      	movs	r0, #27
}
 8002fdc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  * @retval None
  */
void ST7032i_Cursor_On(void)
{
  ST7032i_Command_Write(( Display & 0b11111101) | 0b00000010);
  delay_us(27);
 8002fe0:	f7fd b938 	b.w	8000254 <delay_us>
 8002fe4:	20000088 	.word	0x20000088

08002fe8 <ST7032i_Display_Off>:
  * @brief  put off display while DDRAM is kept
  * @param  None
  * @retval None
  */
void ST7032i_Display_Off(void)
{
 8002fe8:	b508      	push	{r3, lr}
  ST7032i_Command_Write(( Display & 0b11111011) | 0b00000000);
 8002fea:	4b05      	ldr	r3, [pc, #20]	; (8003000 <ST7032i_Display_Off+0x18>)
 8002fec:	7898      	ldrb	r0, [r3, #2]
 8002fee:	f000 00fb 	and.w	r0, r0, #251	; 0xfb
 8002ff2:	f7ff ff67 	bl	8002ec4 <ST7032i_Command_Write>
  delay_us(27);
 8002ff6:	201b      	movs	r0, #27
}
 8002ff8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  * @retval None
  */
void ST7032i_Display_Off(void)
{
  ST7032i_Command_Write(( Display & 0b11111011) | 0b00000000);
  delay_us(27);
 8002ffc:	f7fd b92a 	b.w	8000254 <delay_us>
 8003000:	20000088 	.word	0x20000088

08003004 <ST7032i_Display_On>:
  * @brief  put on display
  * @param  None
  * @retval None
  */
void ST7032i_Display_On(void)
{
 8003004:	b508      	push	{r3, lr}
  ST7032i_Command_Write(( Display & 0b11111011) | 0b00000100);
 8003006:	4b05      	ldr	r3, [pc, #20]	; (800301c <ST7032i_Display_On+0x18>)
 8003008:	7898      	ldrb	r0, [r3, #2]
 800300a:	f040 0004 	orr.w	r0, r0, #4
 800300e:	f7ff ff59 	bl	8002ec4 <ST7032i_Command_Write>
  delay_us(27);
 8003012:	201b      	movs	r0, #27
}
 8003014:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  * @retval None
  */
void ST7032i_Display_On(void)
{
  ST7032i_Command_Write(( Display & 0b11111011) | 0b00000100);
  delay_us(27);
 8003018:	f7fd b91c 	b.w	8000254 <delay_us>
 800301c:	20000088 	.word	0x20000088

08003020 <ST7032i_Shift_Disable>:
  * @brief  disables shift fucntion
  * @param  None
  * @retval None
  */
void ST7032i_Shift_Disable(void)
{
 8003020:	b508      	push	{r3, lr}
  ST7032i_Command_Write(( Entry_Mode & 0b11111110) | 0b00000000);
 8003022:	4b07      	ldr	r3, [pc, #28]	; (8003040 <ST7032i_Shift_Disable+0x20>)
 8003024:	78d8      	ldrb	r0, [r3, #3]
 8003026:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
 800302a:	f7ff ff4b 	bl	8002ec4 <ST7032i_Command_Write>
  Shift = 0;
 800302e:	4b05      	ldr	r3, [pc, #20]	; (8003044 <ST7032i_Shift_Disable+0x24>)
 8003030:	2200      	movs	r2, #0
  delay_us(27);
 8003032:	201b      	movs	r0, #27
  * @retval None
  */
void ST7032i_Shift_Disable(void)
{
  ST7032i_Command_Write(( Entry_Mode & 0b11111110) | 0b00000000);
  Shift = 0;
 8003034:	705a      	strb	r2, [r3, #1]
  delay_us(27);
}
 8003036:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  */
void ST7032i_Shift_Disable(void)
{
  ST7032i_Command_Write(( Entry_Mode & 0b11111110) | 0b00000000);
  Shift = 0;
  delay_us(27);
 800303a:	f7fd b90b 	b.w	8000254 <delay_us>
 800303e:	bf00      	nop
 8003040:	20000088 	.word	0x20000088
 8003044:	20000984 	.word	0x20000984

08003048 <ST7032i_Shift_Enable>:
  * @brief  shift entire display data is send
  * @param  None
  * @retval None
  */
void ST7032i_Shift_Enable(void)
{
 8003048:	b508      	push	{r3, lr}
  ST7032i_Command_Write(( Entry_Mode & 0b11111110) | 0b00000001);
 800304a:	4b07      	ldr	r3, [pc, #28]	; (8003068 <ST7032i_Shift_Enable+0x20>)
 800304c:	78d8      	ldrb	r0, [r3, #3]
 800304e:	f040 0001 	orr.w	r0, r0, #1
 8003052:	f7ff ff37 	bl	8002ec4 <ST7032i_Command_Write>
  Shift = 1;
 8003056:	4b05      	ldr	r3, [pc, #20]	; (800306c <ST7032i_Shift_Enable+0x24>)
 8003058:	2201      	movs	r2, #1
  delay_us(27);
 800305a:	201b      	movs	r0, #27
  * @retval None
  */
void ST7032i_Shift_Enable(void)
{
  ST7032i_Command_Write(( Entry_Mode & 0b11111110) | 0b00000001);
  Shift = 1;
 800305c:	705a      	strb	r2, [r3, #1]
  delay_us(27);
}
 800305e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  */
void ST7032i_Shift_Enable(void)
{
  ST7032i_Command_Write(( Entry_Mode & 0b11111110) | 0b00000001);
  Shift = 1;
  delay_us(27);
 8003062:	f7fd b8f7 	b.w	8000254 <delay_us>
 8003066:	bf00      	nop
 8003068:	20000088 	.word	0x20000088
 800306c:	20000984 	.word	0x20000984

08003070 <ST7032i_Decrement>:
  * @brief  decrement address when data is send and put
  * @param  None
  * @retval None
  */
void ST7032i_Decrement(void)
{
 8003070:	b510      	push	{r4, lr}
  ST7032i_Command_Write(( Entry_Mode & 0b11111101) | 0b00000000);
 8003072:	4c06      	ldr	r4, [pc, #24]	; (800308c <ST7032i_Decrement+0x1c>)
 8003074:	78e0      	ldrb	r0, [r4, #3]
 8003076:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
 800307a:	f7ff ff23 	bl	8002ec4 <ST7032i_Command_Write>
  Increment = -1;
 800307e:	23ff      	movs	r3, #255	; 0xff
  delay_us(27);
 8003080:	201b      	movs	r0, #27
  * @retval None
  */
void ST7032i_Decrement(void)
{
  ST7032i_Command_Write(( Entry_Mode & 0b11111101) | 0b00000000);
  Increment = -1;
 8003082:	7123      	strb	r3, [r4, #4]
  delay_us(27);
}
 8003084:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  */
void ST7032i_Decrement(void)
{
  ST7032i_Command_Write(( Entry_Mode & 0b11111101) | 0b00000000);
  Increment = -1;
  delay_us(27);
 8003088:	f7fd b8e4 	b.w	8000254 <delay_us>
 800308c:	20000088 	.word	0x20000088

08003090 <ST7032i_Increment>:
  * @brief  increment address when data is send and put
  * @param  None
  * @retval None
  */
void ST7032i_Increment(void)
{
 8003090:	b510      	push	{r4, lr}
  ST7032i_Command_Write(( Entry_Mode & 0b11111101) | 0b00000010);
 8003092:	4c06      	ldr	r4, [pc, #24]	; (80030ac <ST7032i_Increment+0x1c>)
 8003094:	78e0      	ldrb	r0, [r4, #3]
 8003096:	f040 0002 	orr.w	r0, r0, #2
 800309a:	f7ff ff13 	bl	8002ec4 <ST7032i_Command_Write>
  Increment = 1;
 800309e:	2301      	movs	r3, #1
  delay_us(27);
 80030a0:	201b      	movs	r0, #27
  * @retval None
  */
void ST7032i_Increment(void)
{
  ST7032i_Command_Write(( Entry_Mode & 0b11111101) | 0b00000010);
  Increment = 1;
 80030a2:	7123      	strb	r3, [r4, #4]
  delay_us(27);
}
 80030a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  */
void ST7032i_Increment(void)
{
  ST7032i_Command_Write(( Entry_Mode & 0b11111101) | 0b00000010);
  Increment = 1;
  delay_us(27);
 80030a8:	f7fd b8d4 	b.w	8000254 <delay_us>
 80030ac:	20000088 	.word	0x20000088

080030b0 <ST7032i_Return>:
  * @brief  Return to home position
  * @param  None
  * @retval None
  */
void ST7032i_Return(void)
{
 80030b0:	b508      	push	{r3, lr}
  ST7032i_Command_Write(0b00000010);
 80030b2:	2002      	movs	r0, #2
 80030b4:	f7ff ff06 	bl	8002ec4 <ST7032i_Command_Write>
  DDRAM_Address = 0;
 80030b8:	4b03      	ldr	r3, [pc, #12]	; (80030c8 <ST7032i_Return+0x18>)
 80030ba:	2200      	movs	r2, #0
  delay_ms(2);
 80030bc:	2002      	movs	r0, #2
  * @retval None
  */
void ST7032i_Return(void)
{
  ST7032i_Command_Write(0b00000010);
  DDRAM_Address = 0;
 80030be:	701a      	strb	r2, [r3, #0]
  delay_ms(2);
}
 80030c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  */
void ST7032i_Return(void)
{
  ST7032i_Command_Write(0b00000010);
  DDRAM_Address = 0;
  delay_ms(2);
 80030c4:	f7fd b8bc 	b.w	8000240 <delay_ms>
 80030c8:	20000984 	.word	0x20000984

080030cc <ST7032i_Clear>:
  * @brief  Clear Display
  * @param  None
  * @retval None
  */
void ST7032i_Clear(void)
{
 80030cc:	b508      	push	{r3, lr}
  uint32_t i;

  ST7032i_Command_Write(0b00000001);
 80030ce:	2001      	movs	r0, #1
 80030d0:	f7ff fef8 	bl	8002ec4 <ST7032i_Command_Write>
  DDRAM_Address = 0;
 80030d4:	4a07      	ldr	r2, [pc, #28]	; (80030f4 <ST7032i_Clear+0x28>)
  for(i=0;i<16;i++)
    {
      DDRAM_Data[0][i] =  ' ';
 80030d6:	4908      	ldr	r1, [pc, #32]	; (80030f8 <ST7032i_Clear+0x2c>)
void ST7032i_Clear(void)
{
  uint32_t i;

  ST7032i_Command_Write(0b00000001);
  DDRAM_Address = 0;
 80030d8:	2300      	movs	r3, #0
 80030da:	7013      	strb	r3, [r2, #0]
  for(i=0;i<16;i++)
    {
      DDRAM_Data[0][i] =  ' ';
 80030dc:	2220      	movs	r2, #32
 80030de:	54ca      	strb	r2, [r1, r3]
      DDRAM_Data[1][i] =  ' ';
 80030e0:	18c8      	adds	r0, r1, r3
{
  uint32_t i;

  ST7032i_Command_Write(0b00000001);
  DDRAM_Address = 0;
  for(i=0;i<16;i++)
 80030e2:	3301      	adds	r3, #1
 80030e4:	2b10      	cmp	r3, #16
    {
      DDRAM_Data[0][i] =  ' ';
      DDRAM_Data[1][i] =  ' ';
 80030e6:	7402      	strb	r2, [r0, #16]
{
  uint32_t i;

  ST7032i_Command_Write(0b00000001);
  DDRAM_Address = 0;
  for(i=0;i<16;i++)
 80030e8:	d1f9      	bne.n	80030de <ST7032i_Clear+0x12>
    {
      DDRAM_Data[0][i] =  ' ';
      DDRAM_Data[1][i] =  ' ';
    }
  delay_ms(2);
 80030ea:	2002      	movs	r0, #2
}
 80030ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  for(i=0;i<16;i++)
    {
      DDRAM_Data[0][i] =  ' ';
      DDRAM_Data[1][i] =  ' ';
    }
  delay_ms(2);
 80030f0:	f7fd b8a6 	b.w	8000240 <delay_ms>
 80030f4:	20000984 	.word	0x20000984
 80030f8:	20001680 	.word	0x20001680

080030fc <ST7032i_Init>:
  * @brief  Initialize ST7032i LCD and I2C interface
  * @param  None
  * @retval None
  */
void ST7032i_Init(void)
{
 80030fc:	b510      	push	{r4, lr}
//  delay_ms(40);

//  I2C_Configuration();

  //Function Set
  ST7032i_Command_Write(0b00111000);
 80030fe:	2038      	movs	r0, #56	; 0x38
 8003100:	f7ff fee0 	bl	8002ec4 <ST7032i_Command_Write>

  delay_us(27);
 8003104:	201b      	movs	r0, #27
 8003106:	f7fd f8a5 	bl	8000254 <delay_us>

  //Function Set
  ST7032i_Command_Write(0b00111001);
 800310a:	2039      	movs	r0, #57	; 0x39
 800310c:	f7ff feda 	bl	8002ec4 <ST7032i_Command_Write>

  delay_us(27);
 8003110:	201b      	movs	r0, #27
 8003112:	f7fd f89f 	bl	8000254 <delay_us>

  //Bias and OSC frequency
  ST7032i_Command_Write(0b00010100);
 8003116:	2014      	movs	r0, #20
 8003118:	f7ff fed4 	bl	8002ec4 <ST7032i_Command_Write>

  delay_us(27);
 800311c:	201b      	movs	r0, #27
  ST7032i_Command_Write(0b01110000);

  delay_us(27);

  //Power/Icon/Contrast control
  ST7032i_Command_Write(Power_Icon_Contrast);
 800311e:	4c16      	ldr	r4, [pc, #88]	; (8003178 <ST7032i_Init+0x7c>)
  delay_us(27);

  //Bias and OSC frequency
  ST7032i_Command_Write(0b00010100);

  delay_us(27);
 8003120:	f7fd f898 	bl	8000254 <delay_us>

  //Contrast set
  ST7032i_Command_Write(0b01110000);
 8003124:	2070      	movs	r0, #112	; 0x70
 8003126:	f7ff fecd 	bl	8002ec4 <ST7032i_Command_Write>

  delay_us(27);
 800312a:	201b      	movs	r0, #27
 800312c:	f7fd f892 	bl	8000254 <delay_us>

  //Power/Icon/Contrast control
  ST7032i_Command_Write(Power_Icon_Contrast);
 8003130:	7820      	ldrb	r0, [r4, #0]
 8003132:	f7ff fec7 	bl	8002ec4 <ST7032i_Command_Write>

  delay_us(27);
 8003136:	201b      	movs	r0, #27
 8003138:	f7fd f88c 	bl	8000254 <delay_us>

  //Contrast set
  ST7032i_Set_Contrast(Contrast);
 800313c:	7860      	ldrb	r0, [r4, #1]
 800313e:	f7ff fef1 	bl	8002f24 <ST7032i_Set_Contrast>

  //Follower control
  ST7032i_Command_Write(0b01101100);
 8003142:	206c      	movs	r0, #108	; 0x6c
 8003144:	f7ff febe 	bl	8002ec4 <ST7032i_Command_Write>

  delay_ms(200);
 8003148:	20c8      	movs	r0, #200	; 0xc8
 800314a:	f7fd f879 	bl	8000240 <delay_ms>

  //Function Set
  ST7032i_Command_Write(0b00111001);
 800314e:	2039      	movs	r0, #57	; 0x39
 8003150:	f7ff feb8 	bl	8002ec4 <ST7032i_Command_Write>

  delay_us(27);
 8003154:	201b      	movs	r0, #27
 8003156:	f7fd f87d 	bl	8000254 <delay_us>

  //Entry mode
  ST7032i_Command_Write(Entry_Mode);
 800315a:	78e0      	ldrb	r0, [r4, #3]
 800315c:	f7ff feb2 	bl	8002ec4 <ST7032i_Command_Write>

  delay_us(27);
 8003160:	201b      	movs	r0, #27
 8003162:	f7fd f877 	bl	8000254 <delay_us>

  //Display control : on
  ST7032i_Command_Write(Display);
 8003166:	78a0      	ldrb	r0, [r4, #2]
 8003168:	f7ff feac 	bl	8002ec4 <ST7032i_Command_Write>

  delay_us(27);
 800316c:	201b      	movs	r0, #27
 800316e:	f7fd f871 	bl	8000254 <delay_us>

  //Clear
  ST7032i_Clear();
}
 8003172:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ST7032i_Command_Write(Display);

  delay_us(27);

  //Clear
  ST7032i_Clear();
 8003176:	e7a9      	b.n	80030cc <ST7032i_Clear>
 8003178:	20000088 	.word	0x20000088

0800317c <ST7032i_Data_Write>:
  * @brief  Write Data to ST7032i
  * @param  Data : "Data" Data
  * @retval None
  */
void ST7032i_Data_Write(uint8_t Data)
{
 800317c:	b507      	push	{r0, r1, r2, lr}
	uint8_t data[] = { 0b01000000, Data };
 800317e:	2340      	movs	r3, #64	; 0x40
 8003180:	f88d 0005 	strb.w	r0, [sp, #5]
	i2c_transmit(ST7032I_ADDR, data, 2);
 8003184:	a901      	add	r1, sp, #4
 8003186:	203e      	movs	r0, #62	; 0x3e
 8003188:	2202      	movs	r2, #2
  * @param  Data : "Data" Data
  * @retval None
  */
void ST7032i_Data_Write(uint8_t Data)
{
	uint8_t data[] = { 0b01000000, Data };
 800318a:	f88d 3004 	strb.w	r3, [sp, #4]
	i2c_transmit(ST7032I_ADDR, data, 2);
 800318e:	f7fd f9bf 	bl	8000510 <i2c_transmit>
  I2C_SendData(I2C1, Data);
  /* Test on EV8 and clear it */
  while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
  /* Send STOP condition */
  I2C_GenerateSTOP(I2C1, ENABLE);
}
 8003192:	bd0e      	pop	{r1, r2, r3, pc}

08003194 <ST7032i_Putchar>:
  * @brief  put character on st7032i lcd
  * @param  None
  * @retval None
  */
void ST7032i_Putchar(int8_t chardata)
{
 8003194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003198:	4604      	mov	r4, r0
  uint32_t i;

  ST7032i_Data_Write((uint8_t)chardata);
 800319a:	b2c0      	uxtb	r0, r0
 800319c:	f7ff ffee 	bl	800317c <ST7032i_Data_Write>
  delay_us(27);
 80031a0:	201b      	movs	r0, #27
 80031a2:	f7fd f857 	bl	8000254 <delay_us>
  if(DDRAM_Address < 0x10)
 80031a6:	4b57      	ldr	r3, [pc, #348]	; (8003304 <ST7032i_Putchar+0x170>)
 80031a8:	781a      	ldrb	r2, [r3, #0]
 80031aa:	2a0f      	cmp	r2, #15
    {
      DDRAM_Data[0][DDRAM_Address] = chardata;
 80031ac:	781a      	ldrb	r2, [r3, #0]
{
  uint32_t i;

  ST7032i_Data_Write((uint8_t)chardata);
  delay_us(27);
  if(DDRAM_Address < 0x10)
 80031ae:	d802      	bhi.n	80031b6 <ST7032i_Putchar+0x22>
    {
      DDRAM_Data[0][DDRAM_Address] = chardata;
 80031b0:	4955      	ldr	r1, [pc, #340]	; (8003308 <ST7032i_Putchar+0x174>)
 80031b2:	548c      	strb	r4, [r1, r2]
 80031b4:	e008      	b.n	80031c8 <ST7032i_Putchar+0x34>
    }
  else if (DDRAM_Address >= 0x40 && DDRAM_Address < 0x50)
 80031b6:	2a3f      	cmp	r2, #63	; 0x3f
 80031b8:	d906      	bls.n	80031c8 <ST7032i_Putchar+0x34>
 80031ba:	781a      	ldrb	r2, [r3, #0]
 80031bc:	2a4f      	cmp	r2, #79	; 0x4f
 80031be:	d803      	bhi.n	80031c8 <ST7032i_Putchar+0x34>
    {
      DDRAM_Data[1][DDRAM_Address - 0x40] = chardata;
 80031c0:	7819      	ldrb	r1, [r3, #0]
 80031c2:	4a52      	ldr	r2, [pc, #328]	; (800330c <ST7032i_Putchar+0x178>)
 80031c4:	188a      	adds	r2, r1, r2
 80031c6:	7414      	strb	r4, [r2, #16]
    }
  if (Shift == 0)
 80031c8:	785b      	ldrb	r3, [r3, #1]
 80031ca:	4a4e      	ldr	r2, [pc, #312]	; (8003304 <ST7032i_Putchar+0x170>)
 80031cc:	b933      	cbnz	r3, 80031dc <ST7032i_Putchar+0x48>
    {
      DDRAM_Address = DDRAM_Address + Increment;
 80031ce:	4b50      	ldr	r3, [pc, #320]	; (8003310 <ST7032i_Putchar+0x17c>)
 80031d0:	7811      	ldrb	r1, [r2, #0]
 80031d2:	791b      	ldrb	r3, [r3, #4]
 80031d4:	18cb      	adds	r3, r1, r3
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	7013      	strb	r3, [r2, #0]
 80031da:	e032      	b.n	8003242 <ST7032i_Putchar+0xae>
    }
  else if (Shift == 1 && Increment == 1)
 80031dc:	7853      	ldrb	r3, [r2, #1]
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d116      	bne.n	8003210 <ST7032i_Putchar+0x7c>
 80031e2:	4b4b      	ldr	r3, [pc, #300]	; (8003310 <ST7032i_Putchar+0x17c>)
 80031e4:	791b      	ldrb	r3, [r3, #4]
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d112      	bne.n	8003210 <ST7032i_Putchar+0x7c>
 80031ea:	2200      	movs	r2, #0
    {
      for (i = 0 ; i< 15; i++)
        {
          DDRAM_Data[0][i] = DDRAM_Data[0][i+1];
 80031ec:	4b46      	ldr	r3, [pc, #280]	; (8003308 <ST7032i_Putchar+0x174>)
 80031ee:	e000      	b.n	80031f2 <ST7032i_Putchar+0x5e>
    {
      DDRAM_Address = DDRAM_Address + Increment;
    }
  else if (Shift == 1 && Increment == 1)
    {
      for (i = 0 ; i< 15; i++)
 80031f0:	460a      	mov	r2, r1
        {
          DDRAM_Data[0][i] = DDRAM_Data[0][i+1];
 80031f2:	1c51      	adds	r1, r2, #1
    {
      DDRAM_Address = DDRAM_Address + Increment;
    }
  else if (Shift == 1 && Increment == 1)
    {
      for (i = 0 ; i< 15; i++)
 80031f4:	290f      	cmp	r1, #15
        {
          DDRAM_Data[0][i] = DDRAM_Data[0][i+1];
 80031f6:	5c5c      	ldrb	r4, [r3, r1]
 80031f8:	4843      	ldr	r0, [pc, #268]	; (8003308 <ST7032i_Putchar+0x174>)
 80031fa:	549c      	strb	r4, [r3, r2]
          DDRAM_Data[1][i] = DDRAM_Data[1][i+1];
 80031fc:	eb03 0401 	add.w	r4, r3, r1
 8003200:	441a      	add	r2, r3
 8003202:	7c24      	ldrb	r4, [r4, #16]
 8003204:	7414      	strb	r4, [r2, #16]
    {
      DDRAM_Address = DDRAM_Address + Increment;
    }
  else if (Shift == 1 && Increment == 1)
    {
      for (i = 0 ; i< 15; i++)
 8003206:	d1f3      	bne.n	80031f0 <ST7032i_Putchar+0x5c>
        {
          DDRAM_Data[0][i] = DDRAM_Data[0][i+1];
          DDRAM_Data[1][i] = DDRAM_Data[1][i+1];
        }
      DDRAM_Data[0][15] = ' ';
 8003208:	2320      	movs	r3, #32
 800320a:	73c3      	strb	r3, [r0, #15]
      DDRAM_Data[1][15] = ' ';
 800320c:	77c3      	strb	r3, [r0, #31]
 800320e:	e018      	b.n	8003242 <ST7032i_Putchar+0xae>
    }
  else if (Shift == 1 && Increment == -1)
 8003210:	4b3c      	ldr	r3, [pc, #240]	; (8003304 <ST7032i_Putchar+0x170>)
 8003212:	785b      	ldrb	r3, [r3, #1]
 8003214:	2b01      	cmp	r3, #1
 8003216:	d114      	bne.n	8003242 <ST7032i_Putchar+0xae>
 8003218:	4b3d      	ldr	r3, [pc, #244]	; (8003310 <ST7032i_Putchar+0x17c>)
 800321a:	791b      	ldrb	r3, [r3, #4]
 800321c:	b25b      	sxtb	r3, r3
 800321e:	3301      	adds	r3, #1
 8003220:	d10f      	bne.n	8003242 <ST7032i_Putchar+0xae>
    {
      for (i = 15 ; i> 0; i--)
        {
          DDRAM_Data[0][i] = DDRAM_Data[0][i-1];
 8003222:	4a39      	ldr	r2, [pc, #228]	; (8003308 <ST7032i_Putchar+0x174>)
          DDRAM_Data[1][i] = DDRAM_Data[1][i+1];
        }
      DDRAM_Data[0][15] = ' ';
      DDRAM_Data[1][15] = ' ';
    }
  else if (Shift == 1 && Increment == -1)
 8003224:	230f      	movs	r3, #15
/**
  * @brief  put character on st7032i lcd
  * @param  None
  * @retval None
  */
void ST7032i_Putchar(int8_t chardata)
 8003226:	1e59      	subs	r1, r3, #1
    }
  else if (Shift == 1 && Increment == -1)
    {
      for (i = 15 ; i> 0; i--)
        {
          DDRAM_Data[0][i] = DDRAM_Data[0][i-1];
 8003228:	4837      	ldr	r0, [pc, #220]	; (8003308 <ST7032i_Putchar+0x174>)
 800322a:	5c54      	ldrb	r4, [r2, r1]
 800322c:	54d4      	strb	r4, [r2, r3]
          DDRAM_Data[1][i] = DDRAM_Data[1][i-1];
 800322e:	1854      	adds	r4, r2, r1
 8003230:	18d3      	adds	r3, r2, r3
 8003232:	7c24      	ldrb	r4, [r4, #16]
 8003234:	741c      	strb	r4, [r3, #16]
      DDRAM_Data[0][15] = ' ';
      DDRAM_Data[1][15] = ' ';
    }
  else if (Shift == 1 && Increment == -1)
    {
      for (i = 15 ; i> 0; i--)
 8003236:	460b      	mov	r3, r1
 8003238:	2900      	cmp	r1, #0
 800323a:	d1f4      	bne.n	8003226 <ST7032i_Putchar+0x92>
        {
          DDRAM_Data[0][i] = DDRAM_Data[0][i-1];
          DDRAM_Data[1][i] = DDRAM_Data[1][i-1];
        }
      DDRAM_Data[0][0] = ' ';
 800323c:	2320      	movs	r3, #32
 800323e:	7003      	strb	r3, [r0, #0]
      DDRAM_Data[1][0] = ' ';
 8003240:	7403      	strb	r3, [r0, #16]
    }

  if (DDRAM_Address == 0x10)
 8003242:	4b30      	ldr	r3, [pc, #192]	; (8003304 <ST7032i_Putchar+0x170>)
 8003244:	781a      	ldrb	r2, [r3, #0]
 8003246:	2a10      	cmp	r2, #16
 8003248:	d109      	bne.n	800325e <ST7032i_Putchar+0xca>
    {
      DDRAM_Address = 0x40;
 800324a:	2240      	movs	r2, #64	; 0x40
 800324c:	701a      	strb	r2, [r3, #0]
      ST7032i_Command_Write(0b10000000 | DDRAM_Address);
 800324e:	7818      	ldrb	r0, [r3, #0]
 8003250:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8003254:	f7ff fe36 	bl	8002ec4 <ST7032i_Command_Write>
      delay_us(27);
 8003258:	201b      	movs	r0, #27
 800325a:	f7fc fffb 	bl	8000254 <delay_us>
    }

  if (DDRAM_Address == 0x3F)
 800325e:	4b29      	ldr	r3, [pc, #164]	; (8003304 <ST7032i_Putchar+0x170>)
 8003260:	781a      	ldrb	r2, [r3, #0]
 8003262:	2a3f      	cmp	r2, #63	; 0x3f
 8003264:	d109      	bne.n	800327a <ST7032i_Putchar+0xe6>
    {
      DDRAM_Address = 0x0F;
 8003266:	220f      	movs	r2, #15
 8003268:	701a      	strb	r2, [r3, #0]
      ST7032i_Command_Write(0b10000000 | DDRAM_Address);
 800326a:	7818      	ldrb	r0, [r3, #0]
 800326c:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8003270:	f7ff fe28 	bl	8002ec4 <ST7032i_Command_Write>
      delay_us(27);
 8003274:	201b      	movs	r0, #27
 8003276:	f7fc ffed 	bl	8000254 <delay_us>
    }

  if (DDRAM_Address == 0xFF)
 800327a:	4b22      	ldr	r3, [pc, #136]	; (8003304 <ST7032i_Putchar+0x170>)
 800327c:	781a      	ldrb	r2, [r3, #0]
 800327e:	2aff      	cmp	r2, #255	; 0xff
 8003280:	d109      	bne.n	8003296 <ST7032i_Putchar+0x102>
    {
      DDRAM_Address = 0x0;
 8003282:	2200      	movs	r2, #0
 8003284:	701a      	strb	r2, [r3, #0]
      ST7032i_Command_Write(0b10000000 | DDRAM_Address);
 8003286:	7818      	ldrb	r0, [r3, #0]
 8003288:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 800328c:	f7ff fe1a 	bl	8002ec4 <ST7032i_Command_Write>
      delay_us(27);
 8003290:	201b      	movs	r0, #27
 8003292:	f7fc ffdf 	bl	8000254 <delay_us>
    }

  if (DDRAM_Address == 0x50)
 8003296:	4b1b      	ldr	r3, [pc, #108]	; (8003304 <ST7032i_Putchar+0x170>)
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	2b50      	cmp	r3, #80	; 0x50
 800329c:	d130      	bne.n	8003300 <ST7032i_Putchar+0x16c>
    {
      for(i=0;i<16;i++)
        {
          DDRAM_Data[0][i] =  DDRAM_Data[1][i];
 800329e:	4d1a      	ldr	r5, [pc, #104]	; (8003308 <ST7032i_Putchar+0x174>)
      DDRAM_Address = 0x0;
      ST7032i_Command_Write(0b10000000 | DDRAM_Address);
      delay_us(27);
    }

  if (DDRAM_Address == 0x50)
 80032a0:	2400      	movs	r4, #0
    {
      for(i=0;i<16;i++)
        {
          DDRAM_Data[0][i] =  DDRAM_Data[1][i];
 80032a2:	192b      	adds	r3, r5, r4
          ST7032i_Command_Write(0b10000000 | (0x00 + i));
 80032a4:	f064 007f 	orn	r0, r4, #127	; 0x7f

  if (DDRAM_Address == 0x50)
    {
      for(i=0;i<16;i++)
        {
          DDRAM_Data[0][i] =  DDRAM_Data[1][i];
 80032a8:	7c1b      	ldrb	r3, [r3, #16]
          ST7032i_Command_Write(0b10000000 | (0x00 + i));
 80032aa:	b2c0      	uxtb	r0, r0

  if (DDRAM_Address == 0x50)
    {
      for(i=0;i<16;i++)
        {
          DDRAM_Data[0][i] =  DDRAM_Data[1][i];
 80032ac:	552b      	strb	r3, [r5, r4]
          ST7032i_Command_Write(0b10000000 | (0x00 + i));
 80032ae:	f7ff fe09 	bl	8002ec4 <ST7032i_Command_Write>
          ST7032i_Data_Write(DDRAM_Data[0][i]);
 80032b2:	5d28      	ldrb	r0, [r5, r4]
      delay_us(27);
    }

  if (DDRAM_Address == 0x50)
    {
      for(i=0;i<16;i++)
 80032b4:	3401      	adds	r4, #1
        {
          DDRAM_Data[0][i] =  DDRAM_Data[1][i];
          ST7032i_Command_Write(0b10000000 | (0x00 + i));
          ST7032i_Data_Write(DDRAM_Data[0][i]);
 80032b6:	f7ff ff61 	bl	800317c <ST7032i_Data_Write>
      delay_us(27);
    }

  if (DDRAM_Address == 0x50)
    {
      for(i=0;i<16;i++)
 80032ba:	2c10      	cmp	r4, #16
 80032bc:	d1f1      	bne.n	80032a2 <ST7032i_Putchar+0x10e>
          ST7032i_Command_Write(0b10000000 | (0x00 + i));
          ST7032i_Data_Write(DDRAM_Data[0][i]);
        }
      for(i=0;i<16;i++)
        {
          DDRAM_Data[1][i] =  ' ';
 80032be:	f8df 8048 	ldr.w	r8, [pc, #72]	; 8003308 <ST7032i_Putchar+0x174>
      delay_us(27);
    }

  if (DDRAM_Address == 0x50)
    {
      for(i=0;i<16;i++)
 80032c2:	2540      	movs	r5, #64	; 0x40
 80032c4:	2400      	movs	r4, #0
          ST7032i_Command_Write(0b10000000 | (0x00 + i));
          ST7032i_Data_Write(DDRAM_Data[0][i]);
        }
      for(i=0;i<16;i++)
        {
          DDRAM_Data[1][i] =  ' ';
 80032c6:	2720      	movs	r7, #32
 80032c8:	eb08 0604 	add.w	r6, r8, r4
          ST7032i_Command_Write(0b10000000 | (0x40 + i));
 80032cc:	f045 0080 	orr.w	r0, r5, #128	; 0x80
          ST7032i_Command_Write(0b10000000 | (0x00 + i));
          ST7032i_Data_Write(DDRAM_Data[0][i]);
        }
      for(i=0;i<16;i++)
        {
          DDRAM_Data[1][i] =  ' ';
 80032d0:	7437      	strb	r7, [r6, #16]
          ST7032i_Command_Write(0b10000000 | (0x40 + i));
 80032d2:	f7ff fdf7 	bl	8002ec4 <ST7032i_Command_Write>
        {
          DDRAM_Data[0][i] =  DDRAM_Data[1][i];
          ST7032i_Command_Write(0b10000000 | (0x00 + i));
          ST7032i_Data_Write(DDRAM_Data[0][i]);
        }
      for(i=0;i<16;i++)
 80032d6:	3401      	adds	r4, #1
        {
          DDRAM_Data[1][i] =  ' ';
          ST7032i_Command_Write(0b10000000 | (0x40 + i));
          ST7032i_Data_Write(DDRAM_Data[1][i]);
 80032d8:	7c30      	ldrb	r0, [r6, #16]
        {
          DDRAM_Data[0][i] =  DDRAM_Data[1][i];
          ST7032i_Command_Write(0b10000000 | (0x00 + i));
          ST7032i_Data_Write(DDRAM_Data[0][i]);
        }
      for(i=0;i<16;i++)
 80032da:	3501      	adds	r5, #1
        {
          DDRAM_Data[1][i] =  ' ';
          ST7032i_Command_Write(0b10000000 | (0x40 + i));
          ST7032i_Data_Write(DDRAM_Data[1][i]);
 80032dc:	f7ff ff4e 	bl	800317c <ST7032i_Data_Write>
        {
          DDRAM_Data[0][i] =  DDRAM_Data[1][i];
          ST7032i_Command_Write(0b10000000 | (0x00 + i));
          ST7032i_Data_Write(DDRAM_Data[0][i]);
        }
      for(i=0;i<16;i++)
 80032e0:	2c10      	cmp	r4, #16
 80032e2:	b2ed      	uxtb	r5, r5
 80032e4:	d1f0      	bne.n	80032c8 <ST7032i_Putchar+0x134>
          DDRAM_Data[1][i] =  ' ';
          ST7032i_Command_Write(0b10000000 | (0x40 + i));
          ST7032i_Data_Write(DDRAM_Data[1][i]);
        }

      DDRAM_Address = 0x40;
 80032e6:	4b07      	ldr	r3, [pc, #28]	; (8003304 <ST7032i_Putchar+0x170>)
 80032e8:	2240      	movs	r2, #64	; 0x40
 80032ea:	701a      	strb	r2, [r3, #0]
      ST7032i_Command_Write(0b10000000 | DDRAM_Address);
 80032ec:	7818      	ldrb	r0, [r3, #0]
 80032ee:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 80032f2:	f7ff fde7 	bl	8002ec4 <ST7032i_Command_Write>
      delay_us(27);
 80032f6:	201b      	movs	r0, #27
    }
}
 80032f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
          ST7032i_Data_Write(DDRAM_Data[1][i]);
        }

      DDRAM_Address = 0x40;
      ST7032i_Command_Write(0b10000000 | DDRAM_Address);
      delay_us(27);
 80032fc:	f7fc bfaa 	b.w	8000254 <delay_us>
 8003300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003304:	20000984 	.word	0x20000984
 8003308:	20001680 	.word	0x20001680
 800330c:	20001640 	.word	0x20001640
 8003310:	20000088 	.word	0x20000088

08003314 <ST7032i_Print_String>:
  * @brief  Print string to LCD
  * @param  String: Array which contain string
  * @retval None
  */
void ST7032i_Print_String(const int8_t String[])
{
 8003314:	b538      	push	{r3, r4, r5, lr}
 8003316:	4605      	mov	r5, r0
  uint8_t i = 0;
 8003318:	2400      	movs	r4, #0
  while(String[i] != '\0')
 800331a:	e004      	b.n	8003326 <ST7032i_Print_String+0x12>
    {
      ST7032i_Putchar(String[i]);
 800331c:	b240      	sxtb	r0, r0
 800331e:	f7ff ff39 	bl	8003194 <ST7032i_Putchar>
      i++;
 8003322:	3401      	adds	r4, #1
 8003324:	b2e4      	uxtb	r4, r4
  * @retval None
  */
void ST7032i_Print_String(const int8_t String[])
{
  uint8_t i = 0;
  while(String[i] != '\0')
 8003326:	5d28      	ldrb	r0, [r5, r4]
 8003328:	2800      	cmp	r0, #0
 800332a:	d1f7      	bne.n	800331c <ST7032i_Print_String+0x8>
    {
      ST7032i_Putchar(String[i]);
      i++;
    }
}
 800332c:	bd38      	pop	{r3, r4, r5, pc}

0800332e <ST7032i_Icon_Clear>:
  * @brief  Clear icon. value is to be 0 - 12
  * @param  numbet : icon number
  * @retval None
  */
void ST7032i_Icon_Clear(uint8_t number)
{
 800332e:	b538      	push	{r3, r4, r5, lr}
  //icon address set
  ST7032i_Command_Write(0b01000000 | Icon_Table[number][0] );
 8003330:	4c10      	ldr	r4, [pc, #64]	; (8003374 <ST7032i_Icon_Clear+0x46>)
 8003332:	eb04 0440 	add.w	r4, r4, r0, lsl #1
  * @brief  Clear icon. value is to be 0 - 12
  * @param  numbet : icon number
  * @retval None
  */
void ST7032i_Icon_Clear(uint8_t number)
{
 8003336:	4605      	mov	r5, r0
  //icon address set
  ST7032i_Command_Write(0b01000000 | Icon_Table[number][0] );
 8003338:	7960      	ldrb	r0, [r4, #5]
 800333a:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 800333e:	f7ff fdc1 	bl	8002ec4 <ST7032i_Command_Write>
  delay_us(27);
 8003342:	201b      	movs	r0, #27
 8003344:	f7fc ff86 	bl	8000254 <delay_us>

  //icon data reset
  ST7032i_Data_Write(IconRAM[number] & (~Icon_Table[number][1]));
 8003348:	4b0b      	ldr	r3, [pc, #44]	; (8003378 <ST7032i_Icon_Clear+0x4a>)
 800334a:	5d5b      	ldrb	r3, [r3, r5]
 800334c:	79a0      	ldrb	r0, [r4, #6]
 800334e:	ea23 0000 	bic.w	r0, r3, r0
 8003352:	f7ff ff13 	bl	800317c <ST7032i_Data_Write>
  delay_us(27);
 8003356:	201b      	movs	r0, #27
 8003358:	f7fc ff7c 	bl	8000254 <delay_us>

  //restore DDRAM address to ac
  ST7032i_Command_Write(0b10000000 | DDRAM_Address);
 800335c:	4b07      	ldr	r3, [pc, #28]	; (800337c <ST7032i_Icon_Clear+0x4e>)
 800335e:	7818      	ldrb	r0, [r3, #0]
 8003360:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8003364:	f7ff fdae 	bl	8002ec4 <ST7032i_Command_Write>
  delay_us(27);
 8003368:	201b      	movs	r0, #27

}
 800336a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  ST7032i_Data_Write(IconRAM[number] & (~Icon_Table[number][1]));
  delay_us(27);

  //restore DDRAM address to ac
  ST7032i_Command_Write(0b10000000 | DDRAM_Address);
  delay_us(27);
 800336e:	f7fc bf71 	b.w	8000254 <delay_us>
 8003372:	bf00      	nop
 8003374:	20000088 	.word	0x20000088
 8003378:	200016a0 	.word	0x200016a0
 800337c:	20000984 	.word	0x20000984

08003380 <ST7032i_Icon_Set>:
  * @brief  Put icon. value is to be 0 - 12
  * @param  numbet : icon number
  * @retval None
  */
void ST7032i_Icon_Set(uint8_t number)
{
 8003380:	b538      	push	{r3, r4, r5, lr}
  //icon address set
  ST7032i_Command_Write(0b01000000 | Icon_Table[number][0] );
 8003382:	4c10      	ldr	r4, [pc, #64]	; (80033c4 <ST7032i_Icon_Set+0x44>)
 8003384:	eb04 0440 	add.w	r4, r4, r0, lsl #1
  * @brief  Put icon. value is to be 0 - 12
  * @param  numbet : icon number
  * @retval None
  */
void ST7032i_Icon_Set(uint8_t number)
{
 8003388:	4605      	mov	r5, r0
  //icon address set
  ST7032i_Command_Write(0b01000000 | Icon_Table[number][0] );
 800338a:	7960      	ldrb	r0, [r4, #5]
 800338c:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8003390:	f7ff fd98 	bl	8002ec4 <ST7032i_Command_Write>
  delay_us(27);
 8003394:	201b      	movs	r0, #27
 8003396:	f7fc ff5d 	bl	8000254 <delay_us>

  //icon data set
  ST7032i_Data_Write(IconRAM[number] | Icon_Table[number][1]);
 800339a:	4b0b      	ldr	r3, [pc, #44]	; (80033c8 <ST7032i_Icon_Set+0x48>)
 800339c:	5d58      	ldrb	r0, [r3, r5]
 800339e:	79a3      	ldrb	r3, [r4, #6]
 80033a0:	4318      	orrs	r0, r3
 80033a2:	f7ff feeb 	bl	800317c <ST7032i_Data_Write>
  delay_us(27);
 80033a6:	201b      	movs	r0, #27
 80033a8:	f7fc ff54 	bl	8000254 <delay_us>

  //restore DDRAM address to ac
  ST7032i_Command_Write(0b10000000 | DDRAM_Address);
 80033ac:	4b07      	ldr	r3, [pc, #28]	; (80033cc <ST7032i_Icon_Set+0x4c>)
 80033ae:	7818      	ldrb	r0, [r3, #0]
 80033b0:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 80033b4:	f7ff fd86 	bl	8002ec4 <ST7032i_Command_Write>
  delay_us(27);
 80033b8:	201b      	movs	r0, #27
}
 80033ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  ST7032i_Data_Write(IconRAM[number] | Icon_Table[number][1]);
  delay_us(27);

  //restore DDRAM address to ac
  ST7032i_Command_Write(0b10000000 | DDRAM_Address);
  delay_us(27);
 80033be:	f7fc bf49 	b.w	8000254 <delay_us>
 80033c2:	bf00      	nop
 80033c4:	20000088 	.word	0x20000088
 80033c8:	200016a0 	.word	0x200016a0
 80033cc:	20000984 	.word	0x20000984
 80033d0:	08008960 	.word	0x08008960
 80033d4:	20000000 	.word	0x20000000
 80033d8:	2000097c 	.word	0x2000097c
 80033dc:	2000097c 	.word	0x2000097c
 80033e0:	200016b4 	.word	0x200016b4

080033e4 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 80033e4:	4770      	bx	lr

080033e6 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80033e6:	e7fe      	b.n	80033e6 <HardFault_Handler>

080033e8 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80033e8:	e7fe      	b.n	80033e8 <MemManage_Handler>

080033ea <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80033ea:	e7fe      	b.n	80033ea <BusFault_Handler>

080033ec <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80033ec:	e7fe      	b.n	80033ec <UsageFault_Handler>

080033ee <SVC_Handler>:
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
}
 80033ee:	4770      	bx	lr

080033f0 <DebugMon_Handler>:
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
}
 80033f0:	4770      	bx	lr

080033f2 <PendSV_Handler>:
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
}
 80033f2:	4770      	bx	lr

080033f4 <SystemInit>:
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80033f4:	4b33      	ldr	r3, [pc, #204]	; (80034c4 <SystemInit+0xd0>)
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	f042 0201 	orr.w	r2, r2, #1
 80033fc:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80033fe:	2200      	movs	r2, #0
 8003400:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003402:	6819      	ldr	r1, [r3, #0]
 8003404:	f021 7184 	bic.w	r1, r1, #17301504	; 0x1080000
 8003408:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800340c:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800340e:	492e      	ldr	r1, [pc, #184]	; (80034c8 <SystemInit+0xd4>)
 8003410:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003412:	6819      	ldr	r1, [r3, #0]
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003414:	b082      	sub	sp, #8

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003416:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800341a:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800341c:	60da      	str	r2, [r3, #12]
static void SetSysClock(void)
{
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800341e:	9200      	str	r2, [sp, #0]
 8003420:	9201      	str	r2, [sp, #4]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003428:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8003430:	9201      	str	r2, [sp, #4]
    StartUpCounter++;
 8003432:	9a00      	ldr	r2, [sp, #0]
 8003434:	3201      	adds	r2, #1
 8003436:	9200      	str	r2, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8003438:	9a01      	ldr	r2, [sp, #4]
 800343a:	b91a      	cbnz	r2, 8003444 <SystemInit+0x50>
 800343c:	9a00      	ldr	r2, [sp, #0]
 800343e:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 8003442:	d1f2      	bne.n	800342a <SystemInit+0x36>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8003444:	4b1f      	ldr	r3, [pc, #124]	; (80034c4 <SystemInit+0xd0>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
 800344c:	bf18      	it	ne
 800344e:	2301      	movne	r3, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8003450:	9301      	str	r3, [sp, #4]
  }

  if (HSEStatus == (uint32_t)0x01)
 8003452:	9b01      	ldr	r3, [sp, #4]
 8003454:	2b01      	cmp	r3, #1
 8003456:	d12e      	bne.n	80034b6 <SystemInit+0xc2>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8003458:	4b1a      	ldr	r3, [pc, #104]	; (80034c4 <SystemInit+0xd0>)
 800345a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800345c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003460:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8003462:	4a1a      	ldr	r2, [pc, #104]	; (80034cc <SystemInit+0xd8>)
 8003464:	6811      	ldr	r1, [r2, #0]
 8003466:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800346a:	6011      	str	r1, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800346c:	689a      	ldr	r2, [r3, #8]
 800346e:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8003470:	689a      	ldr	r2, [r3, #8]
 8003472:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003476:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8003478:	689a      	ldr	r2, [r3, #8]
 800347a:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 800347e:	609a      	str	r2, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8003480:	4a13      	ldr	r2, [pc, #76]	; (80034d0 <SystemInit+0xdc>)
 8003482:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800348a:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800348c:	6819      	ldr	r1, [r3, #0]
 800348e:	4a0d      	ldr	r2, [pc, #52]	; (80034c4 <SystemInit+0xd0>)
 8003490:	0189      	lsls	r1, r1, #6
 8003492:	d5fb      	bpl.n	800348c <SystemInit+0x98>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8003494:	4b0f      	ldr	r3, [pc, #60]	; (80034d4 <SystemInit+0xe0>)
 8003496:	f240 6105 	movw	r1, #1541	; 0x605
 800349a:	6019      	str	r1, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800349c:	6893      	ldr	r3, [r2, #8]
 800349e:	f023 0303 	bic.w	r3, r3, #3
 80034a2:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80034a4:	6893      	ldr	r3, [r2, #8]
 80034a6:	f043 0302 	orr.w	r3, r3, #2
 80034aa:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80034ac:	6893      	ldr	r3, [r2, #8]
 80034ae:	f003 030c 	and.w	r3, r3, #12
 80034b2:	2b08      	cmp	r3, #8
 80034b4:	d1fa      	bne.n	80034ac <SystemInit+0xb8>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80034b6:	4b08      	ldr	r3, [pc, #32]	; (80034d8 <SystemInit+0xe4>)
 80034b8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80034bc:	609a      	str	r2, [r3, #8]
#endif
}
 80034be:	b002      	add	sp, #8
 80034c0:	4770      	bx	lr
 80034c2:	bf00      	nop
 80034c4:	40023800 	.word	0x40023800
 80034c8:	24003010 	.word	0x24003010
 80034cc:	40007000 	.word	0x40007000
 80034d0:	07405419 	.word	0x07405419
 80034d4:	40023c00 	.word	0x40023c00
 80034d8:	e000ed00 	.word	0xe000ed00

080034dc <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80034dc:	4b18      	ldr	r3, [pc, #96]	; (8003540 <SystemCoreClockUpdate+0x64>)
 80034de:	4a19      	ldr	r2, [pc, #100]	; (8003544 <SystemCoreClockUpdate+0x68>)
 80034e0:	6899      	ldr	r1, [r3, #8]
 80034e2:	f001 010c 	and.w	r1, r1, #12

  switch (tmp)
 80034e6:	2904      	cmp	r1, #4
 80034e8:	d003      	beq.n	80034f2 <SystemCoreClockUpdate+0x16>
 80034ea:	2908      	cmp	r1, #8
 80034ec:	d003      	beq.n	80034f6 <SystemCoreClockUpdate+0x1a>
 80034ee:	4b16      	ldr	r3, [pc, #88]	; (8003548 <SystemCoreClockUpdate+0x6c>)
 80034f0:	e019      	b.n	8003526 <SystemCoreClockUpdate+0x4a>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80034f2:	4b16      	ldr	r3, [pc, #88]	; (800354c <SystemCoreClockUpdate+0x70>)
 80034f4:	e017      	b.n	8003526 <SystemCoreClockUpdate+0x4a>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80034f6:	6859      	ldr	r1, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034f8:	685a      	ldr	r2, [r3, #4]
      
      if (pllsource != 0)
 80034fa:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80034fe:	6859      	ldr	r1, [r3, #4]
 8003500:	bf14      	ite	ne
 8003502:	4b12      	ldrne	r3, [pc, #72]	; (800354c <SystemCoreClockUpdate+0x70>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8003504:	4b10      	ldreq	r3, [pc, #64]	; (8003548 <SystemCoreClockUpdate+0x6c>)

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003506:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800350a:	fbb3 f3f2 	udiv	r3, r3, r2
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800350e:	4a0c      	ldr	r2, [pc, #48]	; (8003540 <SystemCoreClockUpdate+0x64>)
 8003510:	6852      	ldr	r2, [r2, #4]
 8003512:	f3c2 4201 	ubfx	r2, r2, #16, #2
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8003516:	f3c1 1188 	ubfx	r1, r1, #6, #9
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800351a:	3201      	adds	r2, #1
 800351c:	0052      	lsls	r2, r2, #1
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800351e:	434b      	muls	r3, r1
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
      SystemCoreClock = pllvco/pllp;
 8003520:	fbb3 f3f2 	udiv	r3, r3, r2
 8003524:	4a07      	ldr	r2, [pc, #28]	; (8003544 <SystemCoreClockUpdate+0x68>)
 8003526:	6013      	str	r3, [r2, #0]
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8003528:	4b05      	ldr	r3, [pc, #20]	; (8003540 <SystemCoreClockUpdate+0x64>)
 800352a:	689a      	ldr	r2, [r3, #8]
 800352c:	4b05      	ldr	r3, [pc, #20]	; (8003544 <SystemCoreClockUpdate+0x68>)
 800352e:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8003532:	189a      	adds	r2, r3, r2
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8003534:	6819      	ldr	r1, [r3, #0]
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8003536:	7912      	ldrb	r2, [r2, #4]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8003538:	fa31 f202 	lsrs.w	r2, r1, r2
 800353c:	601a      	str	r2, [r3, #0]
}
 800353e:	4770      	bx	lr
 8003540:	40023800 	.word	0x40023800
 8003544:	200000a8 	.word	0x200000a8
 8003548:	00f42400 	.word	0x00f42400
 800354c:	007a1200 	.word	0x007a1200

08003550 <cleanup_glue>:
 8003550:	b538      	push	{r3, r4, r5, lr}
 8003552:	460c      	mov	r4, r1
 8003554:	6809      	ldr	r1, [r1, #0]
 8003556:	4605      	mov	r5, r0
 8003558:	b109      	cbz	r1, 800355e <cleanup_glue+0xe>
 800355a:	f7ff fff9 	bl	8003550 <cleanup_glue>
 800355e:	4628      	mov	r0, r5
 8003560:	4621      	mov	r1, r4
 8003562:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003566:	f002 ba23 	b.w	80059b0 <_free_r>
 800356a:	bf00      	nop

0800356c <_reclaim_reent>:
 800356c:	4b22      	ldr	r3, [pc, #136]	; (80035f8 <_reclaim_reent+0x8c>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4298      	cmp	r0, r3
 8003572:	b570      	push	{r4, r5, r6, lr}
 8003574:	4605      	mov	r5, r0
 8003576:	d032      	beq.n	80035de <_reclaim_reent+0x72>
 8003578:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800357a:	b1ab      	cbz	r3, 80035a8 <_reclaim_reent+0x3c>
 800357c:	2200      	movs	r2, #0
 800357e:	4616      	mov	r6, r2
 8003580:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003584:	b909      	cbnz	r1, 800358a <_reclaim_reent+0x1e>
 8003586:	e007      	b.n	8003598 <_reclaim_reent+0x2c>
 8003588:	4621      	mov	r1, r4
 800358a:	680c      	ldr	r4, [r1, #0]
 800358c:	4628      	mov	r0, r5
 800358e:	f002 fa0f 	bl	80059b0 <_free_r>
 8003592:	2c00      	cmp	r4, #0
 8003594:	d1f8      	bne.n	8003588 <_reclaim_reent+0x1c>
 8003596:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8003598:	3601      	adds	r6, #1
 800359a:	2e20      	cmp	r6, #32
 800359c:	4632      	mov	r2, r6
 800359e:	d1ef      	bne.n	8003580 <_reclaim_reent+0x14>
 80035a0:	4628      	mov	r0, r5
 80035a2:	4619      	mov	r1, r3
 80035a4:	f002 fa04 	bl	80059b0 <_free_r>
 80035a8:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80035aa:	b111      	cbz	r1, 80035b2 <_reclaim_reent+0x46>
 80035ac:	4628      	mov	r0, r5
 80035ae:	f002 f9ff 	bl	80059b0 <_free_r>
 80035b2:	f8d5 1148 	ldr.w	r1, [r5, #328]	; 0x148
 80035b6:	b159      	cbz	r1, 80035d0 <_reclaim_reent+0x64>
 80035b8:	f505 76a6 	add.w	r6, r5, #332	; 0x14c
 80035bc:	42b1      	cmp	r1, r6
 80035be:	d101      	bne.n	80035c4 <_reclaim_reent+0x58>
 80035c0:	e006      	b.n	80035d0 <_reclaim_reent+0x64>
 80035c2:	4621      	mov	r1, r4
 80035c4:	680c      	ldr	r4, [r1, #0]
 80035c6:	4628      	mov	r0, r5
 80035c8:	f002 f9f2 	bl	80059b0 <_free_r>
 80035cc:	42a6      	cmp	r6, r4
 80035ce:	d1f8      	bne.n	80035c2 <_reclaim_reent+0x56>
 80035d0:	6d69      	ldr	r1, [r5, #84]	; 0x54
 80035d2:	b111      	cbz	r1, 80035da <_reclaim_reent+0x6e>
 80035d4:	4628      	mov	r0, r5
 80035d6:	f002 f9eb 	bl	80059b0 <_free_r>
 80035da:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80035dc:	b903      	cbnz	r3, 80035e0 <_reclaim_reent+0x74>
 80035de:	bd70      	pop	{r4, r5, r6, pc}
 80035e0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80035e2:	4628      	mov	r0, r5
 80035e4:	4798      	blx	r3
 80035e6:	f8d5 12e0 	ldr.w	r1, [r5, #736]	; 0x2e0
 80035ea:	2900      	cmp	r1, #0
 80035ec:	d0f7      	beq.n	80035de <_reclaim_reent+0x72>
 80035ee:	4628      	mov	r0, r5
 80035f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80035f4:	e7ac      	b.n	8003550 <cleanup_glue>
 80035f6:	bf00      	nop
 80035f8:	200000c0 	.word	0x200000c0

080035fc <_wrapup_reent>:
 80035fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035fe:	4607      	mov	r7, r0
 8003600:	b1b0      	cbz	r0, 8003630 <_wrapup_reent+0x34>
 8003602:	f8d7 6148 	ldr.w	r6, [r7, #328]	; 0x148
 8003606:	b176      	cbz	r6, 8003626 <_wrapup_reent+0x2a>
 8003608:	6875      	ldr	r5, [r6, #4]
 800360a:	1e6c      	subs	r4, r5, #1
 800360c:	d408      	bmi.n	8003620 <_wrapup_reent+0x24>
 800360e:	3502      	adds	r5, #2
 8003610:	eb06 0585 	add.w	r5, r6, r5, lsl #2
 8003614:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8003618:	3c01      	subs	r4, #1
 800361a:	4798      	blx	r3
 800361c:	1c63      	adds	r3, r4, #1
 800361e:	d1f9      	bne.n	8003614 <_wrapup_reent+0x18>
 8003620:	6836      	ldr	r6, [r6, #0]
 8003622:	2e00      	cmp	r6, #0
 8003624:	d1f0      	bne.n	8003608 <_wrapup_reent+0xc>
 8003626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003628:	b10b      	cbz	r3, 800362e <_wrapup_reent+0x32>
 800362a:	4638      	mov	r0, r7
 800362c:	4798      	blx	r3
 800362e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003630:	4b01      	ldr	r3, [pc, #4]	; (8003638 <_wrapup_reent+0x3c>)
 8003632:	681f      	ldr	r7, [r3, #0]
 8003634:	e7e5      	b.n	8003602 <_wrapup_reent+0x6>
 8003636:	bf00      	nop
 8003638:	200000c0 	.word	0x200000c0

0800363c <_sprintf_r>:
 800363c:	b40c      	push	{r2, r3}
 800363e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003640:	b09d      	sub	sp, #116	; 0x74
 8003642:	ac22      	add	r4, sp, #136	; 0x88
 8003644:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 8003648:	f854 2b04 	ldr.w	r2, [r4], #4
 800364c:	9101      	str	r1, [sp, #4]
 800364e:	460e      	mov	r6, r1
 8003650:	4623      	mov	r3, r4
 8003652:	9503      	str	r5, [sp, #12]
 8003654:	9506      	str	r5, [sp, #24]
 8003656:	a901      	add	r1, sp, #4
 8003658:	f44f 7702 	mov.w	r7, #520	; 0x208
 800365c:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8003660:	f8ad 7010 	strh.w	r7, [sp, #16]
 8003664:	9605      	str	r6, [sp, #20]
 8003666:	f8ad 5012 	strh.w	r5, [sp, #18]
 800366a:	941b      	str	r4, [sp, #108]	; 0x6c
 800366c:	f000 f830 	bl	80036d0 <_svfprintf_r>
 8003670:	9b01      	ldr	r3, [sp, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	701a      	strb	r2, [r3, #0]
 8003676:	b01d      	add	sp, #116	; 0x74
 8003678:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800367c:	b002      	add	sp, #8
 800367e:	4770      	bx	lr

08003680 <sprintf>:
 8003680:	b40e      	push	{r1, r2, r3}
 8003682:	b570      	push	{r4, r5, r6, lr}
 8003684:	b09d      	sub	sp, #116	; 0x74
 8003686:	ac21      	add	r4, sp, #132	; 0x84
 8003688:	f240 03c0 	movw	r3, #192	; 0xc0
 800368c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003690:	f854 2b04 	ldr.w	r2, [r4], #4
 8003694:	4606      	mov	r6, r0
 8003696:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 800369a:	6818      	ldr	r0, [r3, #0]
 800369c:	9503      	str	r5, [sp, #12]
 800369e:	f44f 7302 	mov.w	r3, #520	; 0x208
 80036a2:	f8ad 3010 	strh.w	r3, [sp, #16]
 80036a6:	9506      	str	r5, [sp, #24]
 80036a8:	4623      	mov	r3, r4
 80036aa:	a901      	add	r1, sp, #4
 80036ac:	f64f 75ff 	movw	r5, #65535	; 0xffff
 80036b0:	9601      	str	r6, [sp, #4]
 80036b2:	9605      	str	r6, [sp, #20]
 80036b4:	f8ad 5012 	strh.w	r5, [sp, #18]
 80036b8:	941b      	str	r4, [sp, #108]	; 0x6c
 80036ba:	f000 f809 	bl	80036d0 <_svfprintf_r>
 80036be:	9b01      	ldr	r3, [sp, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	701a      	strb	r2, [r3, #0]
 80036c4:	b01d      	add	sp, #116	; 0x74
 80036c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80036ca:	b003      	add	sp, #12
 80036cc:	4770      	bx	lr
 80036ce:	bf00      	nop

080036d0 <_svfprintf_r>:
 80036d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036d4:	b0c5      	sub	sp, #276	; 0x114
 80036d6:	468a      	mov	sl, r1
 80036d8:	4614      	mov	r4, r2
 80036da:	930e      	str	r3, [sp, #56]	; 0x38
 80036dc:	900f      	str	r0, [sp, #60]	; 0x3c
 80036de:	f002 fa5f 	bl	8005ba0 <_localeconv_r>
 80036e2:	6800      	ldr	r0, [r0, #0]
 80036e4:	9017      	str	r0, [sp, #92]	; 0x5c
 80036e6:	f003 fb35 	bl	8006d54 <strlen>
 80036ea:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 80036ee:	901a      	str	r0, [sp, #104]	; 0x68
 80036f0:	2100      	movs	r1, #0
 80036f2:	2000      	movs	r0, #0
 80036f4:	061a      	lsls	r2, r3, #24
 80036f6:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
 80036fa:	d504      	bpl.n	8003706 <_svfprintf_r+0x36>
 80036fc:	f8da 3010 	ldr.w	r3, [sl, #16]
 8003700:	2b00      	cmp	r3, #0
 8003702:	f001 8004 	beq.w	800470e <_svfprintf_r+0x103e>
 8003706:	2300      	movs	r3, #0
 8003708:	f10d 00e3 	add.w	r0, sp, #227	; 0xe3
 800370c:	f10d 0be4 	add.w	fp, sp, #228	; 0xe4
 8003710:	a91f      	add	r1, sp, #124	; 0x7c
 8003712:	9310      	str	r3, [sp, #64]	; 0x40
 8003714:	933b      	str	r3, [sp, #236]	; 0xec
 8003716:	933a      	str	r3, [sp, #232]	; 0xe8
 8003718:	931c      	str	r3, [sp, #112]	; 0x70
 800371a:	931b      	str	r3, [sp, #108]	; 0x6c
 800371c:	930c      	str	r3, [sp, #48]	; 0x30
 800371e:	ebc0 030b 	rsb	r3, r0, fp
 8003722:	9007      	str	r0, [sp, #28]
 8003724:	9139      	str	r1, [sp, #228]	; 0xe4
 8003726:	9409      	str	r4, [sp, #36]	; 0x24
 8003728:	460e      	mov	r6, r1
 800372a:	931d      	str	r3, [sp, #116]	; 0x74
 800372c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800372e:	7803      	ldrb	r3, [r0, #0]
 8003730:	2b00      	cmp	r3, #0
 8003732:	bf18      	it	ne
 8003734:	2b25      	cmpne	r3, #37	; 0x25
 8003736:	f000 80af 	beq.w	8003898 <_svfprintf_r+0x1c8>
 800373a:	4607      	mov	r7, r0
 800373c:	f817 3f01 	ldrb.w	r3, [r7, #1]!
 8003740:	2b25      	cmp	r3, #37	; 0x25
 8003742:	bf18      	it	ne
 8003744:	2b00      	cmpne	r3, #0
 8003746:	d1f9      	bne.n	800373c <_svfprintf_r+0x6c>
 8003748:	9909      	ldr	r1, [sp, #36]	; 0x24
 800374a:	ebb7 0801 	subs.w	r8, r7, r1
 800374e:	d00e      	beq.n	800376e <_svfprintf_r+0x9e>
 8003750:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003752:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003754:	6031      	str	r1, [r6, #0]
 8003756:	3401      	adds	r4, #1
 8003758:	4445      	add	r5, r8
 800375a:	2c07      	cmp	r4, #7
 800375c:	f8c6 8004 	str.w	r8, [r6, #4]
 8003760:	953b      	str	r5, [sp, #236]	; 0xec
 8003762:	943a      	str	r4, [sp, #232]	; 0xe8
 8003764:	dc7c      	bgt.n	8003860 <_svfprintf_r+0x190>
 8003766:	3608      	adds	r6, #8
 8003768:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800376a:	4442      	add	r2, r8
 800376c:	920c      	str	r2, [sp, #48]	; 0x30
 800376e:	783b      	ldrb	r3, [r7, #0]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d07d      	beq.n	8003870 <_svfprintf_r+0x1a0>
 8003774:	3701      	adds	r7, #1
 8003776:	9709      	str	r7, [sp, #36]	; 0x24
 8003778:	2300      	movs	r3, #0
 800377a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800377c:	930b      	str	r3, [sp, #44]	; 0x2c
 800377e:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
 8003782:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003786:	9308      	str	r3, [sp, #32]
 8003788:	2720      	movs	r7, #32
 800378a:	252b      	movs	r5, #43	; 0x2b
 800378c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003790:	f1a3 0220 	sub.w	r2, r3, #32
 8003794:	2a58      	cmp	r2, #88	; 0x58
 8003796:	f200 823b 	bhi.w	8003c10 <_svfprintf_r+0x540>
 800379a:	e8df f012 	tbh	[pc, r2, lsl #1]
 800379e:	024c      	.short	0x024c
 80037a0:	02390239 	.word	0x02390239
 80037a4:	02390254 	.word	0x02390254
 80037a8:	02390239 	.word	0x02390239
 80037ac:	02390239 	.word	0x02390239
 80037b0:	02590239 	.word	0x02590239
 80037b4:	0239007f 	.word	0x0239007f
 80037b8:	0082005c 	.word	0x0082005c
 80037bc:	009d0239 	.word	0x009d0239
 80037c0:	00a200a2 	.word	0x00a200a2
 80037c4:	00a200a2 	.word	0x00a200a2
 80037c8:	00a200a2 	.word	0x00a200a2
 80037cc:	00a200a2 	.word	0x00a200a2
 80037d0:	023900a2 	.word	0x023900a2
 80037d4:	02390239 	.word	0x02390239
 80037d8:	02390239 	.word	0x02390239
 80037dc:	02390239 	.word	0x02390239
 80037e0:	02390239 	.word	0x02390239
 80037e4:	00b50239 	.word	0x00b50239
 80037e8:	02390154 	.word	0x02390154
 80037ec:	02390154 	.word	0x02390154
 80037f0:	02390239 	.word	0x02390239
 80037f4:	018b0239 	.word	0x018b0239
 80037f8:	02390239 	.word	0x02390239
 80037fc:	02390190 	.word	0x02390190
 8003800:	02390239 	.word	0x02390239
 8003804:	02390239 	.word	0x02390239
 8003808:	023901a7 	.word	0x023901a7
 800380c:	01ba0239 	.word	0x01ba0239
 8003810:	02390239 	.word	0x02390239
 8003814:	02390239 	.word	0x02390239
 8003818:	02390239 	.word	0x02390239
 800381c:	02390239 	.word	0x02390239
 8003820:	02390239 	.word	0x02390239
 8003824:	02780293 	.word	0x02780293
 8003828:	01540154 	.word	0x01540154
 800382c:	028e0154 	.word	0x028e0154
 8003830:	02390278 	.word	0x02390278
 8003834:	02130239 	.word	0x02130239
 8003838:	02180239 	.word	0x02180239
 800383c:	02a50224 	.word	0x02a50224
 8003840:	023901de 	.word	0x023901de
 8003844:	023901e3 	.word	0x023901e3
 8003848:	02390264 	.word	0x02390264
 800384c:	02c70239 	.word	0x02c70239
 8003850:	4252      	negs	r2, r2
 8003852:	920b      	str	r2, [sp, #44]	; 0x2c
 8003854:	930e      	str	r3, [sp, #56]	; 0x38
 8003856:	9b08      	ldr	r3, [sp, #32]
 8003858:	f043 0304 	orr.w	r3, r3, #4
 800385c:	9308      	str	r3, [sp, #32]
 800385e:	e795      	b.n	800378c <_svfprintf_r+0xbc>
 8003860:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8003862:	4651      	mov	r1, sl
 8003864:	465a      	mov	r2, fp
 8003866:	f003 faa5 	bl	8006db4 <__ssprint_r>
 800386a:	b940      	cbnz	r0, 800387e <_svfprintf_r+0x1ae>
 800386c:	ae1f      	add	r6, sp, #124	; 0x7c
 800386e:	e77b      	b.n	8003768 <_svfprintf_r+0x98>
 8003870:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 8003872:	b123      	cbz	r3, 800387e <_svfprintf_r+0x1ae>
 8003874:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8003876:	4651      	mov	r1, sl
 8003878:	aa39      	add	r2, sp, #228	; 0xe4
 800387a:	f003 fa9b 	bl	8006db4 <__ssprint_r>
 800387e:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8003882:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003886:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003888:	bf18      	it	ne
 800388a:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 800388e:	930c      	str	r3, [sp, #48]	; 0x30
 8003890:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003892:	b045      	add	sp, #276	; 0x114
 8003894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003898:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800389a:	e768      	b.n	800376e <_svfprintf_r+0x9e>
 800389c:	f88d 510f 	strb.w	r5, [sp, #271]	; 0x10f
 80038a0:	e774      	b.n	800378c <_svfprintf_r+0xbc>
 80038a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80038a6:	2b2a      	cmp	r3, #42	; 0x2a
 80038a8:	f001 804c 	beq.w	8004944 <_svfprintf_r+0x1274>
 80038ac:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80038b0:	2400      	movs	r4, #0
 80038b2:	2a09      	cmp	r2, #9
 80038b4:	f63f af6c 	bhi.w	8003790 <_svfprintf_r+0xc0>
 80038b8:	4601      	mov	r1, r0
 80038ba:	2400      	movs	r4, #0
 80038bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80038c0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80038c4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80038c8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80038cc:	2a09      	cmp	r2, #9
 80038ce:	4608      	mov	r0, r1
 80038d0:	d9f4      	bls.n	80038bc <_svfprintf_r+0x1ec>
 80038d2:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
 80038d6:	e75b      	b.n	8003790 <_svfprintf_r+0xc0>
 80038d8:	9a08      	ldr	r2, [sp, #32]
 80038da:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80038de:	9208      	str	r2, [sp, #32]
 80038e0:	e754      	b.n	800378c <_svfprintf_r+0xbc>
 80038e2:	4601      	mov	r1, r0
 80038e4:	2200      	movs	r2, #0
 80038e6:	46b4      	mov	ip, r6
 80038e8:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 80038ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80038f0:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80038f4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80038f8:	2e09      	cmp	r6, #9
 80038fa:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80038fe:	4608      	mov	r0, r1
 8003900:	d9f2      	bls.n	80038e8 <_svfprintf_r+0x218>
 8003902:	4666      	mov	r6, ip
 8003904:	920b      	str	r2, [sp, #44]	; 0x2c
 8003906:	e743      	b.n	8003790 <_svfprintf_r+0xc0>
 8003908:	9315      	str	r3, [sp, #84]	; 0x54
 800390a:	9b08      	ldr	r3, [sp, #32]
 800390c:	9009      	str	r0, [sp, #36]	; 0x24
 800390e:	f043 0310 	orr.w	r3, r3, #16
 8003912:	9308      	str	r3, [sp, #32]
 8003914:	9808      	ldr	r0, [sp, #32]
 8003916:	06c3      	lsls	r3, r0, #27
 8003918:	f100 81bf 	bmi.w	8003c9a <_svfprintf_r+0x5ca>
 800391c:	9a08      	ldr	r2, [sp, #32]
 800391e:	0655      	lsls	r5, r2, #25
 8003920:	f140 81bb 	bpl.w	8003c9a <_svfprintf_r+0x5ca>
 8003924:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003926:	f9b0 3000 	ldrsh.w	r3, [r0]
 800392a:	3004      	adds	r0, #4
 800392c:	2b00      	cmp	r3, #0
 800392e:	900e      	str	r0, [sp, #56]	; 0x38
 8003930:	f2c0 81ba 	blt.w	8003ca8 <_svfprintf_r+0x5d8>
 8003934:	bf0c      	ite	eq
 8003936:	2100      	moveq	r1, #0
 8003938:	2101      	movne	r1, #1
 800393a:	2201      	movs	r2, #1
 800393c:	2c00      	cmp	r4, #0
 800393e:	bfa2      	ittt	ge
 8003940:	9808      	ldrge	r0, [sp, #32]
 8003942:	f020 0080 	bicge.w	r0, r0, #128	; 0x80
 8003946:	9008      	strge	r0, [sp, #32]
 8003948:	2c00      	cmp	r4, #0
 800394a:	bf18      	it	ne
 800394c:	f041 0101 	orrne.w	r1, r1, #1
 8003950:	2900      	cmp	r1, #0
 8003952:	f000 8323 	beq.w	8003f9c <_svfprintf_r+0x8cc>
 8003956:	2a01      	cmp	r2, #1
 8003958:	f000 845f 	beq.w	800421a <_svfprintf_r+0xb4a>
 800395c:	2a02      	cmp	r2, #2
 800395e:	bf18      	it	ne
 8003960:	465a      	movne	r2, fp
 8003962:	d102      	bne.n	800396a <_svfprintf_r+0x29a>
 8003964:	f000 bc48 	b.w	80041f8 <_svfprintf_r+0xb28>
 8003968:	4602      	mov	r2, r0
 800396a:	f003 0107 	and.w	r1, r3, #7
 800396e:	3130      	adds	r1, #48	; 0x30
 8003970:	1e50      	subs	r0, r2, #1
 8003972:	08db      	lsrs	r3, r3, #3
 8003974:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003978:	d1f6      	bne.n	8003968 <_svfprintf_r+0x298>
 800397a:	9b08      	ldr	r3, [sp, #32]
 800397c:	9011      	str	r0, [sp, #68]	; 0x44
 800397e:	07dd      	lsls	r5, r3, #31
 8003980:	d507      	bpl.n	8003992 <_svfprintf_r+0x2c2>
 8003982:	2930      	cmp	r1, #48	; 0x30
 8003984:	f000 8733 	beq.w	80047ee <_svfprintf_r+0x111e>
 8003988:	1e90      	subs	r0, r2, #2
 800398a:	2330      	movs	r3, #48	; 0x30
 800398c:	9011      	str	r0, [sp, #68]	; 0x44
 800398e:	f802 3c02 	strb.w	r3, [r2, #-2]
 8003992:	ebc0 030b 	rsb	r3, r0, fp
 8003996:	930d      	str	r3, [sp, #52]	; 0x34
 8003998:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800399a:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 800399e:	9412      	str	r4, [sp, #72]	; 0x48
 80039a0:	42a3      	cmp	r3, r4
 80039a2:	bfb8      	it	lt
 80039a4:	4623      	movlt	r3, r4
 80039a6:	2000      	movs	r0, #0
 80039a8:	930a      	str	r3, [sp, #40]	; 0x28
 80039aa:	9016      	str	r0, [sp, #88]	; 0x58
 80039ac:	b111      	cbz	r1, 80039b4 <_svfprintf_r+0x2e4>
 80039ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80039b0:	3301      	adds	r3, #1
 80039b2:	930a      	str	r3, [sp, #40]	; 0x28
 80039b4:	9b08      	ldr	r3, [sp, #32]
 80039b6:	f013 0302 	ands.w	r3, r3, #2
 80039ba:	9313      	str	r3, [sp, #76]	; 0x4c
 80039bc:	d002      	beq.n	80039c4 <_svfprintf_r+0x2f4>
 80039be:	980a      	ldr	r0, [sp, #40]	; 0x28
 80039c0:	3002      	adds	r0, #2
 80039c2:	900a      	str	r0, [sp, #40]	; 0x28
 80039c4:	9b08      	ldr	r3, [sp, #32]
 80039c6:	f013 0384 	ands.w	r3, r3, #132	; 0x84
 80039ca:	9314      	str	r3, [sp, #80]	; 0x50
 80039cc:	f040 81bb 	bne.w	8003d46 <_svfprintf_r+0x676>
 80039d0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80039d2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80039d4:	1a47      	subs	r7, r0, r1
 80039d6:	2f00      	cmp	r7, #0
 80039d8:	f340 81b5 	ble.w	8003d46 <_svfprintf_r+0x676>
 80039dc:	2f10      	cmp	r7, #16
 80039de:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80039e0:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80039e2:	f8df 8344 	ldr.w	r8, [pc, #836]	; 8003d28 <_svfprintf_r+0x658>
 80039e6:	dd22      	ble.n	8003a2e <_svfprintf_r+0x35e>
 80039e8:	4623      	mov	r3, r4
 80039ea:	f04f 0910 	mov.w	r9, #16
 80039ee:	4644      	mov	r4, r8
 80039f0:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 80039f4:	e003      	b.n	80039fe <_svfprintf_r+0x32e>
 80039f6:	3f10      	subs	r7, #16
 80039f8:	3608      	adds	r6, #8
 80039fa:	2f10      	cmp	r7, #16
 80039fc:	dd15      	ble.n	8003a2a <_svfprintf_r+0x35a>
 80039fe:	3301      	adds	r3, #1
 8003a00:	3510      	adds	r5, #16
 8003a02:	2b07      	cmp	r3, #7
 8003a04:	e886 0210 	stmia.w	r6, {r4, r9}
 8003a08:	953b      	str	r5, [sp, #236]	; 0xec
 8003a0a:	933a      	str	r3, [sp, #232]	; 0xe8
 8003a0c:	ddf3      	ble.n	80039f6 <_svfprintf_r+0x326>
 8003a0e:	4640      	mov	r0, r8
 8003a10:	4651      	mov	r1, sl
 8003a12:	465a      	mov	r2, fp
 8003a14:	f003 f9ce 	bl	8006db4 <__ssprint_r>
 8003a18:	2800      	cmp	r0, #0
 8003a1a:	f47f af30 	bne.w	800387e <_svfprintf_r+0x1ae>
 8003a1e:	3f10      	subs	r7, #16
 8003a20:	2f10      	cmp	r7, #16
 8003a22:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003a24:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8003a26:	ae1f      	add	r6, sp, #124	; 0x7c
 8003a28:	dce9      	bgt.n	80039fe <_svfprintf_r+0x32e>
 8003a2a:	46a0      	mov	r8, r4
 8003a2c:	461c      	mov	r4, r3
 8003a2e:	3401      	adds	r4, #1
 8003a30:	19ed      	adds	r5, r5, r7
 8003a32:	2c07      	cmp	r4, #7
 8003a34:	f8c6 8000 	str.w	r8, [r6]
 8003a38:	6077      	str	r7, [r6, #4]
 8003a3a:	953b      	str	r5, [sp, #236]	; 0xec
 8003a3c:	943a      	str	r4, [sp, #232]	; 0xe8
 8003a3e:	f300 8414 	bgt.w	800426a <_svfprintf_r+0xb9a>
 8003a42:	3608      	adds	r6, #8
 8003a44:	e180      	b.n	8003d48 <_svfprintf_r+0x678>
 8003a46:	9009      	str	r0, [sp, #36]	; 0x24
 8003a48:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003a4a:	9315      	str	r3, [sp, #84]	; 0x54
 8003a4c:	1dc3      	adds	r3, r0, #7
 8003a4e:	f023 0307 	bic.w	r3, r3, #7
 8003a52:	f103 0108 	add.w	r1, r3, #8
 8003a56:	910e      	str	r1, [sp, #56]	; 0x38
 8003a58:	f8d3 8000 	ldr.w	r8, [r3]
 8003a5c:	685d      	ldr	r5, [r3, #4]
 8003a5e:	4642      	mov	r2, r8
 8003a60:	462b      	mov	r3, r5
 8003a62:	4629      	mov	r1, r5
 8003a64:	4640      	mov	r0, r8
 8003a66:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
 8003a6a:	f003 f83b 	bl	8006ae4 <__fpclassifyd>
 8003a6e:	2801      	cmp	r0, #1
 8003a70:	4629      	mov	r1, r5
 8003a72:	4640      	mov	r0, r8
 8003a74:	f040 84d0 	bne.w	8004418 <_svfprintf_r+0xd48>
 8003a78:	2200      	movs	r2, #0
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	f004 fd62 	bl	8008544 <__aeabi_dcmplt>
 8003a80:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 8003a84:	b110      	cbz	r0, 8003a8c <_svfprintf_r+0x3bc>
 8003a86:	212d      	movs	r1, #45	; 0x2d
 8003a88:	f88d 110f 	strb.w	r1, [sp, #271]	; 0x10f
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	930a      	str	r3, [sp, #40]	; 0x28
 8003a90:	2300      	movs	r3, #0
 8003a92:	9312      	str	r3, [sp, #72]	; 0x48
 8003a94:	4aa0      	ldr	r2, [pc, #640]	; (8003d18 <_svfprintf_r+0x648>)
 8003a96:	4ba1      	ldr	r3, [pc, #644]	; (8003d1c <_svfprintf_r+0x64c>)
 8003a98:	9815      	ldr	r0, [sp, #84]	; 0x54
 8003a9a:	2847      	cmp	r0, #71	; 0x47
 8003a9c:	bfd8      	it	le
 8003a9e:	461a      	movle	r2, r3
 8003aa0:	9211      	str	r2, [sp, #68]	; 0x44
 8003aa2:	9a08      	ldr	r2, [sp, #32]
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003aaa:	930d      	str	r3, [sp, #52]	; 0x34
 8003aac:	2300      	movs	r3, #0
 8003aae:	9208      	str	r2, [sp, #32]
 8003ab0:	9316      	str	r3, [sp, #88]	; 0x58
 8003ab2:	e77b      	b.n	80039ac <_svfprintf_r+0x2dc>
 8003ab4:	9b08      	ldr	r3, [sp, #32]
 8003ab6:	f043 0308 	orr.w	r3, r3, #8
 8003aba:	9308      	str	r3, [sp, #32]
 8003abc:	e666      	b.n	800378c <_svfprintf_r+0xbc>
 8003abe:	9908      	ldr	r1, [sp, #32]
 8003ac0:	9009      	str	r0, [sp, #36]	; 0x24
 8003ac2:	f041 0110 	orr.w	r1, r1, #16
 8003ac6:	9108      	str	r1, [sp, #32]
 8003ac8:	9a08      	ldr	r2, [sp, #32]
 8003aca:	9315      	str	r3, [sp, #84]	; 0x54
 8003acc:	f012 0110 	ands.w	r1, r2, #16
 8003ad0:	f000 8090 	beq.w	8003bf4 <_svfprintf_r+0x524>
 8003ad4:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003ad6:	6803      	ldr	r3, [r0, #0]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	1a99      	subs	r1, r3, r2
 8003adc:	bf18      	it	ne
 8003ade:	2101      	movne	r1, #1
 8003ae0:	3004      	adds	r0, #4
 8003ae2:	900e      	str	r0, [sp, #56]	; 0x38
 8003ae4:	2000      	movs	r0, #0
 8003ae6:	f88d 010f 	strb.w	r0, [sp, #271]	; 0x10f
 8003aea:	e727      	b.n	800393c <_svfprintf_r+0x26c>
 8003aec:	9908      	ldr	r1, [sp, #32]
 8003aee:	9009      	str	r0, [sp, #36]	; 0x24
 8003af0:	f041 0110 	orr.w	r1, r1, #16
 8003af4:	9108      	str	r1, [sp, #32]
 8003af6:	9a08      	ldr	r2, [sp, #32]
 8003af8:	9315      	str	r3, [sp, #84]	; 0x54
 8003afa:	06d0      	lsls	r0, r2, #27
 8003afc:	f140 80b9 	bpl.w	8003c72 <_svfprintf_r+0x5a2>
 8003b00:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003b02:	6803      	ldr	r3, [r0, #0]
 8003b04:	2201      	movs	r2, #1
 8003b06:	1c19      	adds	r1, r3, #0
 8003b08:	bf18      	it	ne
 8003b0a:	2101      	movne	r1, #1
 8003b0c:	3004      	adds	r0, #4
 8003b0e:	900e      	str	r0, [sp, #56]	; 0x38
 8003b10:	e7e8      	b.n	8003ae4 <_svfprintf_r+0x414>
 8003b12:	4a83      	ldr	r2, [pc, #524]	; (8003d20 <_svfprintf_r+0x650>)
 8003b14:	9315      	str	r3, [sp, #84]	; 0x54
 8003b16:	9b08      	ldr	r3, [sp, #32]
 8003b18:	921c      	str	r2, [sp, #112]	; 0x70
 8003b1a:	06da      	lsls	r2, r3, #27
 8003b1c:	9009      	str	r0, [sp, #36]	; 0x24
 8003b1e:	f100 810d 	bmi.w	8003d3c <_svfprintf_r+0x66c>
 8003b22:	9908      	ldr	r1, [sp, #32]
 8003b24:	064b      	lsls	r3, r1, #25
 8003b26:	f140 8109 	bpl.w	8003d3c <_svfprintf_r+0x66c>
 8003b2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003b2c:	8813      	ldrh	r3, [r2, #0]
 8003b2e:	3204      	adds	r2, #4
 8003b30:	920e      	str	r2, [sp, #56]	; 0x38
 8003b32:	1c19      	adds	r1, r3, #0
 8003b34:	9a08      	ldr	r2, [sp, #32]
 8003b36:	bf18      	it	ne
 8003b38:	2101      	movne	r1, #1
 8003b3a:	420a      	tst	r2, r1
 8003b3c:	f000 83ca 	beq.w	80042d4 <_svfprintf_r+0xc04>
 8003b40:	9908      	ldr	r1, [sp, #32]
 8003b42:	9815      	ldr	r0, [sp, #84]	; 0x54
 8003b44:	2230      	movs	r2, #48	; 0x30
 8003b46:	f041 0102 	orr.w	r1, r1, #2
 8003b4a:	f88d 210c 	strb.w	r2, [sp, #268]	; 0x10c
 8003b4e:	9108      	str	r1, [sp, #32]
 8003b50:	f88d 010d 	strb.w	r0, [sp, #269]	; 0x10d
 8003b54:	2101      	movs	r1, #1
 8003b56:	2202      	movs	r2, #2
 8003b58:	e7c4      	b.n	8003ae4 <_svfprintf_r+0x414>
 8003b5a:	9b08      	ldr	r3, [sp, #32]
 8003b5c:	f043 0310 	orr.w	r3, r3, #16
 8003b60:	9308      	str	r3, [sp, #32]
 8003b62:	e613      	b.n	800378c <_svfprintf_r+0xbc>
 8003b64:	2500      	movs	r5, #0
 8003b66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003b68:	f88d 510f 	strb.w	r5, [sp, #271]	; 0x10f
 8003b6c:	9315      	str	r3, [sp, #84]	; 0x54
 8003b6e:	6812      	ldr	r2, [r2, #0]
 8003b70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003b72:	9009      	str	r0, [sp, #36]	; 0x24
 8003b74:	9211      	str	r2, [sp, #68]	; 0x44
 8003b76:	1d1f      	adds	r7, r3, #4
 8003b78:	2a00      	cmp	r2, #0
 8003b7a:	f000 864b 	beq.w	8004814 <_svfprintf_r+0x1144>
 8003b7e:	2c00      	cmp	r4, #0
 8003b80:	9811      	ldr	r0, [sp, #68]	; 0x44
 8003b82:	f2c0 8602 	blt.w	800478a <_svfprintf_r+0x10ba>
 8003b86:	4629      	mov	r1, r5
 8003b88:	4622      	mov	r2, r4
 8003b8a:	f002 fad1 	bl	8006130 <memchr>
 8003b8e:	2800      	cmp	r0, #0
 8003b90:	f000 866f 	beq.w	8004872 <_svfprintf_r+0x11a2>
 8003b94:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003b96:	9512      	str	r5, [sp, #72]	; 0x48
 8003b98:	1ac0      	subs	r0, r0, r3
 8003b9a:	42a0      	cmp	r0, r4
 8003b9c:	900d      	str	r0, [sp, #52]	; 0x34
 8003b9e:	bfd1      	iteee	le
 8003ba0:	9b0d      	ldrle	r3, [sp, #52]	; 0x34
 8003ba2:	f89d 110f 	ldrbgt.w	r1, [sp, #271]	; 0x10f
 8003ba6:	970e      	strgt	r7, [sp, #56]	; 0x38
 8003ba8:	ea24 70e4 	bicgt.w	r0, r4, r4, asr #31
 8003bac:	bfd3      	iteet	le
 8003bae:	ea23 73e3 	bicle.w	r3, r3, r3, asr #31
 8003bb2:	900a      	strgt	r0, [sp, #40]	; 0x28
 8003bb4:	940d      	strgt	r4, [sp, #52]	; 0x34
 8003bb6:	930a      	strle	r3, [sp, #40]	; 0x28
 8003bb8:	bfdc      	itt	le
 8003bba:	f89d 110f 	ldrble.w	r1, [sp, #271]	; 0x10f
 8003bbe:	970e      	strle	r7, [sp, #56]	; 0x38
 8003bc0:	9516      	str	r5, [sp, #88]	; 0x58
 8003bc2:	e6f3      	b.n	80039ac <_svfprintf_r+0x2dc>
 8003bc4:	9a08      	ldr	r2, [sp, #32]
 8003bc6:	f042 0210 	orr.w	r2, r2, #16
 8003bca:	9208      	str	r2, [sp, #32]
 8003bcc:	e5de      	b.n	800378c <_svfprintf_r+0xbc>
 8003bce:	9009      	str	r0, [sp, #36]	; 0x24
 8003bd0:	9808      	ldr	r0, [sp, #32]
 8003bd2:	06c3      	lsls	r3, r0, #27
 8003bd4:	f140 843f 	bpl.w	8004456 <_svfprintf_r+0xd86>
 8003bd8:	990e      	ldr	r1, [sp, #56]	; 0x38
 8003bda:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003bdc:	680b      	ldr	r3, [r1, #0]
 8003bde:	3104      	adds	r1, #4
 8003be0:	910e      	str	r1, [sp, #56]	; 0x38
 8003be2:	601a      	str	r2, [r3, #0]
 8003be4:	e5a2      	b.n	800372c <_svfprintf_r+0x5c>
 8003be6:	9a08      	ldr	r2, [sp, #32]
 8003be8:	9009      	str	r0, [sp, #36]	; 0x24
 8003bea:	f012 0110 	ands.w	r1, r2, #16
 8003bee:	9315      	str	r3, [sp, #84]	; 0x54
 8003bf0:	f47f af70 	bne.w	8003ad4 <_svfprintf_r+0x404>
 8003bf4:	9b08      	ldr	r3, [sp, #32]
 8003bf6:	f013 0240 	ands.w	r2, r3, #64	; 0x40
 8003bfa:	f000 8437 	beq.w	800446c <_svfprintf_r+0xd9c>
 8003bfe:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003c00:	8803      	ldrh	r3, [r0, #0]
 8003c02:	460a      	mov	r2, r1
 8003c04:	1c19      	adds	r1, r3, #0
 8003c06:	bf18      	it	ne
 8003c08:	2101      	movne	r1, #1
 8003c0a:	3004      	adds	r0, #4
 8003c0c:	900e      	str	r0, [sp, #56]	; 0x38
 8003c0e:	e769      	b.n	8003ae4 <_svfprintf_r+0x414>
 8003c10:	9009      	str	r0, [sp, #36]	; 0x24
 8003c12:	9315      	str	r3, [sp, #84]	; 0x54
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	f43f ae2b 	beq.w	8003870 <_svfprintf_r+0x1a0>
 8003c1a:	2101      	movs	r1, #1
 8003c1c:	f88d 30bc 	strb.w	r3, [sp, #188]	; 0xbc
 8003c20:	aa2f      	add	r2, sp, #188	; 0xbc
 8003c22:	2300      	movs	r3, #0
 8003c24:	910a      	str	r1, [sp, #40]	; 0x28
 8003c26:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
 8003c2a:	910d      	str	r1, [sp, #52]	; 0x34
 8003c2c:	9211      	str	r2, [sp, #68]	; 0x44
 8003c2e:	2300      	movs	r3, #0
 8003c30:	9312      	str	r3, [sp, #72]	; 0x48
 8003c32:	9316      	str	r3, [sp, #88]	; 0x58
 8003c34:	e6be      	b.n	80039b4 <_svfprintf_r+0x2e4>
 8003c36:	f89d 310f 	ldrb.w	r3, [sp, #271]	; 0x10f
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	f47f ada6 	bne.w	800378c <_svfprintf_r+0xbc>
 8003c40:	f88d 710f 	strb.w	r7, [sp, #271]	; 0x10f
 8003c44:	e5a2      	b.n	800378c <_svfprintf_r+0xbc>
 8003c46:	9a08      	ldr	r2, [sp, #32]
 8003c48:	f042 0201 	orr.w	r2, r2, #1
 8003c4c:	9208      	str	r2, [sp, #32]
 8003c4e:	e59d      	b.n	800378c <_svfprintf_r+0xbc>
 8003c50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003c52:	990e      	ldr	r1, [sp, #56]	; 0x38
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	930b      	str	r3, [sp, #44]	; 0x2c
 8003c58:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003c5a:	1d0b      	adds	r3, r1, #4
 8003c5c:	2a00      	cmp	r2, #0
 8003c5e:	f6ff adf7 	blt.w	8003850 <_svfprintf_r+0x180>
 8003c62:	930e      	str	r3, [sp, #56]	; 0x38
 8003c64:	e592      	b.n	800378c <_svfprintf_r+0xbc>
 8003c66:	9a08      	ldr	r2, [sp, #32]
 8003c68:	9009      	str	r0, [sp, #36]	; 0x24
 8003c6a:	06d0      	lsls	r0, r2, #27
 8003c6c:	9315      	str	r3, [sp, #84]	; 0x54
 8003c6e:	f53f af47 	bmi.w	8003b00 <_svfprintf_r+0x430>
 8003c72:	9908      	ldr	r1, [sp, #32]
 8003c74:	0649      	lsls	r1, r1, #25
 8003c76:	f140 83ea 	bpl.w	800444e <_svfprintf_r+0xd7e>
 8003c7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003c7c:	8813      	ldrh	r3, [r2, #0]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003c82:	1c19      	adds	r1, r3, #0
 8003c84:	bf18      	it	ne
 8003c86:	2101      	movne	r1, #1
 8003c88:	3004      	adds	r0, #4
 8003c8a:	900e      	str	r0, [sp, #56]	; 0x38
 8003c8c:	e72a      	b.n	8003ae4 <_svfprintf_r+0x414>
 8003c8e:	9009      	str	r0, [sp, #36]	; 0x24
 8003c90:	9808      	ldr	r0, [sp, #32]
 8003c92:	9315      	str	r3, [sp, #84]	; 0x54
 8003c94:	06c3      	lsls	r3, r0, #27
 8003c96:	f57f ae41 	bpl.w	800391c <_svfprintf_r+0x24c>
 8003c9a:	990e      	ldr	r1, [sp, #56]	; 0x38
 8003c9c:	680b      	ldr	r3, [r1, #0]
 8003c9e:	3104      	adds	r1, #4
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	910e      	str	r1, [sp, #56]	; 0x38
 8003ca4:	f6bf ae46 	bge.w	8003934 <_svfprintf_r+0x264>
 8003ca8:	425b      	negs	r3, r3
 8003caa:	222d      	movs	r2, #45	; 0x2d
 8003cac:	1c19      	adds	r1, r3, #0
 8003cae:	f88d 210f 	strb.w	r2, [sp, #271]	; 0x10f
 8003cb2:	bf18      	it	ne
 8003cb4:	2101      	movne	r1, #1
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	e640      	b.n	800393c <_svfprintf_r+0x26c>
 8003cba:	9908      	ldr	r1, [sp, #32]
 8003cbc:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8003cc0:	9108      	str	r1, [sp, #32]
 8003cc2:	e563      	b.n	800378c <_svfprintf_r+0xbc>
 8003cc4:	9315      	str	r3, [sp, #84]	; 0x54
 8003cc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003cc8:	990e      	ldr	r1, [sp, #56]	; 0x38
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	9009      	str	r0, [sp, #36]	; 0x24
 8003cce:	2200      	movs	r2, #0
 8003cd0:	2001      	movs	r0, #1
 8003cd2:	f88d 210f 	strb.w	r2, [sp, #271]	; 0x10f
 8003cd6:	3104      	adds	r1, #4
 8003cd8:	aa2f      	add	r2, sp, #188	; 0xbc
 8003cda:	900a      	str	r0, [sp, #40]	; 0x28
 8003cdc:	910e      	str	r1, [sp, #56]	; 0x38
 8003cde:	f88d 30bc 	strb.w	r3, [sp, #188]	; 0xbc
 8003ce2:	900d      	str	r0, [sp, #52]	; 0x34
 8003ce4:	9211      	str	r2, [sp, #68]	; 0x44
 8003ce6:	e7a2      	b.n	8003c2e <_svfprintf_r+0x55e>
 8003ce8:	490e      	ldr	r1, [pc, #56]	; (8003d24 <_svfprintf_r+0x654>)
 8003cea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003cec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003cee:	911c      	str	r1, [sp, #112]	; 0x70
 8003cf0:	9908      	ldr	r1, [sp, #32]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	9009      	str	r0, [sp, #36]	; 0x24
 8003cf6:	3204      	adds	r2, #4
 8003cf8:	f041 0102 	orr.w	r1, r1, #2
 8003cfc:	2078      	movs	r0, #120	; 0x78
 8003cfe:	920e      	str	r2, [sp, #56]	; 0x38
 8003d00:	9108      	str	r1, [sp, #32]
 8003d02:	2230      	movs	r2, #48	; 0x30
 8003d04:	1c19      	adds	r1, r3, #0
 8003d06:	f88d 210c 	strb.w	r2, [sp, #268]	; 0x10c
 8003d0a:	bf18      	it	ne
 8003d0c:	2101      	movne	r1, #1
 8003d0e:	f88d 010d 	strb.w	r0, [sp, #269]	; 0x10d
 8003d12:	2202      	movs	r2, #2
 8003d14:	9015      	str	r0, [sp, #84]	; 0x54
 8003d16:	e6e5      	b.n	8003ae4 <_svfprintf_r+0x414>
 8003d18:	08008900 	.word	0x08008900
 8003d1c:	080088fc 	.word	0x080088fc
 8003d20:	0800890c 	.word	0x0800890c
 8003d24:	08008920 	.word	0x08008920
 8003d28:	0800871c 	.word	0x0800871c
 8003d2c:	9315      	str	r3, [sp, #84]	; 0x54
 8003d2e:	9b08      	ldr	r3, [sp, #32]
 8003d30:	49a4      	ldr	r1, [pc, #656]	; (8003fc4 <_svfprintf_r+0x8f4>)
 8003d32:	9009      	str	r0, [sp, #36]	; 0x24
 8003d34:	06da      	lsls	r2, r3, #27
 8003d36:	911c      	str	r1, [sp, #112]	; 0x70
 8003d38:	f57f aef3 	bpl.w	8003b22 <_svfprintf_r+0x452>
 8003d3c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003d3e:	6803      	ldr	r3, [r0, #0]
 8003d40:	3004      	adds	r0, #4
 8003d42:	900e      	str	r0, [sp, #56]	; 0x38
 8003d44:	e6f5      	b.n	8003b32 <_svfprintf_r+0x462>
 8003d46:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003d48:	f89d 310f 	ldrb.w	r3, [sp, #271]	; 0x10f
 8003d4c:	b16b      	cbz	r3, 8003d6a <_svfprintf_r+0x69a>
 8003d4e:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003d50:	f20d 130f 	addw	r3, sp, #271	; 0x10f
 8003d54:	3401      	adds	r4, #1
 8003d56:	6033      	str	r3, [r6, #0]
 8003d58:	3501      	adds	r5, #1
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	2c07      	cmp	r4, #7
 8003d5e:	6073      	str	r3, [r6, #4]
 8003d60:	953b      	str	r5, [sp, #236]	; 0xec
 8003d62:	943a      	str	r4, [sp, #232]	; 0xe8
 8003d64:	f300 81f5 	bgt.w	8004152 <_svfprintf_r+0xa82>
 8003d68:	3608      	adds	r6, #8
 8003d6a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003d6c:	b163      	cbz	r3, 8003d88 <_svfprintf_r+0x6b8>
 8003d6e:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003d70:	ab43      	add	r3, sp, #268	; 0x10c
 8003d72:	3401      	adds	r4, #1
 8003d74:	6033      	str	r3, [r6, #0]
 8003d76:	3502      	adds	r5, #2
 8003d78:	2302      	movs	r3, #2
 8003d7a:	2c07      	cmp	r4, #7
 8003d7c:	6073      	str	r3, [r6, #4]
 8003d7e:	953b      	str	r5, [sp, #236]	; 0xec
 8003d80:	943a      	str	r4, [sp, #232]	; 0xe8
 8003d82:	f300 81db 	bgt.w	800413c <_svfprintf_r+0xa6c>
 8003d86:	3608      	adds	r6, #8
 8003d88:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003d8a:	2b80      	cmp	r3, #128	; 0x80
 8003d8c:	f000 8122 	beq.w	8003fd4 <_svfprintf_r+0x904>
 8003d90:	9812      	ldr	r0, [sp, #72]	; 0x48
 8003d92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003d94:	1ac7      	subs	r7, r0, r3
 8003d96:	2f00      	cmp	r7, #0
 8003d98:	dd32      	ble.n	8003e00 <_svfprintf_r+0x730>
 8003d9a:	2f10      	cmp	r7, #16
 8003d9c:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003d9e:	f8df 822c 	ldr.w	r8, [pc, #556]	; 8003fcc <_svfprintf_r+0x8fc>
 8003da2:	dd22      	ble.n	8003dea <_svfprintf_r+0x71a>
 8003da4:	4623      	mov	r3, r4
 8003da6:	f04f 0910 	mov.w	r9, #16
 8003daa:	4644      	mov	r4, r8
 8003dac:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8003db0:	e003      	b.n	8003dba <_svfprintf_r+0x6ea>
 8003db2:	3f10      	subs	r7, #16
 8003db4:	3608      	adds	r6, #8
 8003db6:	2f10      	cmp	r7, #16
 8003db8:	dd15      	ble.n	8003de6 <_svfprintf_r+0x716>
 8003dba:	3301      	adds	r3, #1
 8003dbc:	3510      	adds	r5, #16
 8003dbe:	2b07      	cmp	r3, #7
 8003dc0:	e886 0210 	stmia.w	r6, {r4, r9}
 8003dc4:	953b      	str	r5, [sp, #236]	; 0xec
 8003dc6:	933a      	str	r3, [sp, #232]	; 0xe8
 8003dc8:	ddf3      	ble.n	8003db2 <_svfprintf_r+0x6e2>
 8003dca:	4640      	mov	r0, r8
 8003dcc:	4651      	mov	r1, sl
 8003dce:	465a      	mov	r2, fp
 8003dd0:	f002 fff0 	bl	8006db4 <__ssprint_r>
 8003dd4:	2800      	cmp	r0, #0
 8003dd6:	f47f ad52 	bne.w	800387e <_svfprintf_r+0x1ae>
 8003dda:	3f10      	subs	r7, #16
 8003ddc:	2f10      	cmp	r7, #16
 8003dde:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003de0:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8003de2:	ae1f      	add	r6, sp, #124	; 0x7c
 8003de4:	dce9      	bgt.n	8003dba <_svfprintf_r+0x6ea>
 8003de6:	46a0      	mov	r8, r4
 8003de8:	461c      	mov	r4, r3
 8003dea:	3401      	adds	r4, #1
 8003dec:	19ed      	adds	r5, r5, r7
 8003dee:	2c07      	cmp	r4, #7
 8003df0:	f8c6 8000 	str.w	r8, [r6]
 8003df4:	6077      	str	r7, [r6, #4]
 8003df6:	953b      	str	r5, [sp, #236]	; 0xec
 8003df8:	943a      	str	r4, [sp, #232]	; 0xe8
 8003dfa:	f300 8194 	bgt.w	8004126 <_svfprintf_r+0xa56>
 8003dfe:	3608      	adds	r6, #8
 8003e00:	9908      	ldr	r1, [sp, #32]
 8003e02:	05ca      	lsls	r2, r1, #23
 8003e04:	d472      	bmi.n	8003eec <_svfprintf_r+0x81c>
 8003e06:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003e08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003e0a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8003e0c:	6073      	str	r3, [r6, #4]
 8003e0e:	3401      	adds	r4, #1
 8003e10:	18ed      	adds	r5, r5, r3
 8003e12:	2c07      	cmp	r4, #7
 8003e14:	6032      	str	r2, [r6, #0]
 8003e16:	953b      	str	r5, [sp, #236]	; 0xec
 8003e18:	943a      	str	r4, [sp, #232]	; 0xe8
 8003e1a:	dc5c      	bgt.n	8003ed6 <_svfprintf_r+0x806>
 8003e1c:	3608      	adds	r6, #8
 8003e1e:	9908      	ldr	r1, [sp, #32]
 8003e20:	074b      	lsls	r3, r1, #29
 8003e22:	d53e      	bpl.n	8003ea2 <_svfprintf_r+0x7d2>
 8003e24:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003e26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e28:	1ad7      	subs	r7, r2, r3
 8003e2a:	2f00      	cmp	r7, #0
 8003e2c:	dd39      	ble.n	8003ea2 <_svfprintf_r+0x7d2>
 8003e2e:	2f10      	cmp	r7, #16
 8003e30:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003e32:	f8df 819c 	ldr.w	r8, [pc, #412]	; 8003fd0 <_svfprintf_r+0x900>
 8003e36:	dd22      	ble.n	8003e7e <_svfprintf_r+0x7ae>
 8003e38:	4623      	mov	r3, r4
 8003e3a:	f04f 0910 	mov.w	r9, #16
 8003e3e:	4644      	mov	r4, r8
 8003e40:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8003e44:	e003      	b.n	8003e4e <_svfprintf_r+0x77e>
 8003e46:	3f10      	subs	r7, #16
 8003e48:	3608      	adds	r6, #8
 8003e4a:	2f10      	cmp	r7, #16
 8003e4c:	dd15      	ble.n	8003e7a <_svfprintf_r+0x7aa>
 8003e4e:	3301      	adds	r3, #1
 8003e50:	3510      	adds	r5, #16
 8003e52:	2b07      	cmp	r3, #7
 8003e54:	e886 0210 	stmia.w	r6, {r4, r9}
 8003e58:	953b      	str	r5, [sp, #236]	; 0xec
 8003e5a:	933a      	str	r3, [sp, #232]	; 0xe8
 8003e5c:	ddf3      	ble.n	8003e46 <_svfprintf_r+0x776>
 8003e5e:	4640      	mov	r0, r8
 8003e60:	4651      	mov	r1, sl
 8003e62:	465a      	mov	r2, fp
 8003e64:	f002 ffa6 	bl	8006db4 <__ssprint_r>
 8003e68:	2800      	cmp	r0, #0
 8003e6a:	f47f ad08 	bne.w	800387e <_svfprintf_r+0x1ae>
 8003e6e:	3f10      	subs	r7, #16
 8003e70:	2f10      	cmp	r7, #16
 8003e72:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003e74:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8003e76:	ae1f      	add	r6, sp, #124	; 0x7c
 8003e78:	dce9      	bgt.n	8003e4e <_svfprintf_r+0x77e>
 8003e7a:	46a0      	mov	r8, r4
 8003e7c:	461c      	mov	r4, r3
 8003e7e:	3401      	adds	r4, #1
 8003e80:	197d      	adds	r5, r7, r5
 8003e82:	2c07      	cmp	r4, #7
 8003e84:	f8c6 8000 	str.w	r8, [r6]
 8003e88:	6077      	str	r7, [r6, #4]
 8003e8a:	953b      	str	r5, [sp, #236]	; 0xec
 8003e8c:	943a      	str	r4, [sp, #232]	; 0xe8
 8003e8e:	dd08      	ble.n	8003ea2 <_svfprintf_r+0x7d2>
 8003e90:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8003e92:	4651      	mov	r1, sl
 8003e94:	465a      	mov	r2, fp
 8003e96:	f002 ff8d 	bl	8006db4 <__ssprint_r>
 8003e9a:	2800      	cmp	r0, #0
 8003e9c:	f47f acef 	bne.w	800387e <_svfprintf_r+0x1ae>
 8003ea0:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003ea2:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003ea4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003ea6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003ea8:	428a      	cmp	r2, r1
 8003eaa:	bfac      	ite	ge
 8003eac:	1880      	addge	r0, r0, r2
 8003eae:	1840      	addlt	r0, r0, r1
 8003eb0:	900c      	str	r0, [sp, #48]	; 0x30
 8003eb2:	2d00      	cmp	r5, #0
 8003eb4:	f040 8129 	bne.w	800410a <_svfprintf_r+0xa3a>
 8003eb8:	2300      	movs	r3, #0
 8003eba:	933a      	str	r3, [sp, #232]	; 0xe8
 8003ebc:	ae1f      	add	r6, sp, #124	; 0x7c
 8003ebe:	e435      	b.n	800372c <_svfprintf_r+0x5c>
 8003ec0:	46a0      	mov	r8, r4
 8003ec2:	461c      	mov	r4, r3
 8003ec4:	3401      	adds	r4, #1
 8003ec6:	19ed      	adds	r5, r5, r7
 8003ec8:	2c07      	cmp	r4, #7
 8003eca:	f8c6 8000 	str.w	r8, [r6]
 8003ece:	6077      	str	r7, [r6, #4]
 8003ed0:	953b      	str	r5, [sp, #236]	; 0xec
 8003ed2:	943a      	str	r4, [sp, #232]	; 0xe8
 8003ed4:	dda2      	ble.n	8003e1c <_svfprintf_r+0x74c>
 8003ed6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8003ed8:	4651      	mov	r1, sl
 8003eda:	465a      	mov	r2, fp
 8003edc:	f002 ff6a 	bl	8006db4 <__ssprint_r>
 8003ee0:	2800      	cmp	r0, #0
 8003ee2:	f47f accc 	bne.w	800387e <_svfprintf_r+0x1ae>
 8003ee6:	ae1f      	add	r6, sp, #124	; 0x7c
 8003ee8:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003eea:	e798      	b.n	8003e1e <_svfprintf_r+0x74e>
 8003eec:	9815      	ldr	r0, [sp, #84]	; 0x54
 8003eee:	2865      	cmp	r0, #101	; 0x65
 8003ef0:	f340 80aa 	ble.w	8004048 <_svfprintf_r+0x978>
 8003ef4:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 8003ef8:	2200      	movs	r2, #0
 8003efa:	2300      	movs	r3, #0
 8003efc:	f004 fb18 	bl	8008530 <__aeabi_dcmpeq>
 8003f00:	2800      	cmp	r0, #0
 8003f02:	f000 8131 	beq.w	8004168 <_svfprintf_r+0xa98>
 8003f06:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003f08:	4b2f      	ldr	r3, [pc, #188]	; (8003fc8 <_svfprintf_r+0x8f8>)
 8003f0a:	3401      	adds	r4, #1
 8003f0c:	6033      	str	r3, [r6, #0]
 8003f0e:	3501      	adds	r5, #1
 8003f10:	2301      	movs	r3, #1
 8003f12:	2c07      	cmp	r4, #7
 8003f14:	6073      	str	r3, [r6, #4]
 8003f16:	953b      	str	r5, [sp, #236]	; 0xec
 8003f18:	943a      	str	r4, [sp, #232]	; 0xe8
 8003f1a:	f300 82b8 	bgt.w	800448e <_svfprintf_r+0xdbe>
 8003f1e:	3608      	adds	r6, #8
 8003f20:	9b40      	ldr	r3, [sp, #256]	; 0x100
 8003f22:	9910      	ldr	r1, [sp, #64]	; 0x40
 8003f24:	4299      	cmp	r1, r3
 8003f26:	dc03      	bgt.n	8003f30 <_svfprintf_r+0x860>
 8003f28:	9a08      	ldr	r2, [sp, #32]
 8003f2a:	07d3      	lsls	r3, r2, #31
 8003f2c:	f57f af77 	bpl.w	8003e1e <_svfprintf_r+0x74e>
 8003f30:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003f32:	981a      	ldr	r0, [sp, #104]	; 0x68
 8003f34:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003f36:	6070      	str	r0, [r6, #4]
 8003f38:	3401      	adds	r4, #1
 8003f3a:	182d      	adds	r5, r5, r0
 8003f3c:	2c07      	cmp	r4, #7
 8003f3e:	6033      	str	r3, [r6, #0]
 8003f40:	953b      	str	r5, [sp, #236]	; 0xec
 8003f42:	943a      	str	r4, [sp, #232]	; 0xe8
 8003f44:	f300 8300 	bgt.w	8004548 <_svfprintf_r+0xe78>
 8003f48:	3608      	adds	r6, #8
 8003f4a:	9910      	ldr	r1, [sp, #64]	; 0x40
 8003f4c:	1e4f      	subs	r7, r1, #1
 8003f4e:	2f00      	cmp	r7, #0
 8003f50:	f77f af65 	ble.w	8003e1e <_svfprintf_r+0x74e>
 8003f54:	2f10      	cmp	r7, #16
 8003f56:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003f58:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8003fcc <_svfprintf_r+0x8fc>
 8003f5c:	ddb2      	ble.n	8003ec4 <_svfprintf_r+0x7f4>
 8003f5e:	4623      	mov	r3, r4
 8003f60:	f04f 0910 	mov.w	r9, #16
 8003f64:	4644      	mov	r4, r8
 8003f66:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8003f6a:	e003      	b.n	8003f74 <_svfprintf_r+0x8a4>
 8003f6c:	3608      	adds	r6, #8
 8003f6e:	3f10      	subs	r7, #16
 8003f70:	2f10      	cmp	r7, #16
 8003f72:	dda5      	ble.n	8003ec0 <_svfprintf_r+0x7f0>
 8003f74:	3301      	adds	r3, #1
 8003f76:	3510      	adds	r5, #16
 8003f78:	2b07      	cmp	r3, #7
 8003f7a:	e886 0210 	stmia.w	r6, {r4, r9}
 8003f7e:	953b      	str	r5, [sp, #236]	; 0xec
 8003f80:	933a      	str	r3, [sp, #232]	; 0xe8
 8003f82:	ddf3      	ble.n	8003f6c <_svfprintf_r+0x89c>
 8003f84:	4640      	mov	r0, r8
 8003f86:	4651      	mov	r1, sl
 8003f88:	465a      	mov	r2, fp
 8003f8a:	f002 ff13 	bl	8006db4 <__ssprint_r>
 8003f8e:	2800      	cmp	r0, #0
 8003f90:	f47f ac75 	bne.w	800387e <_svfprintf_r+0x1ae>
 8003f94:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003f96:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8003f98:	ae1f      	add	r6, sp, #124	; 0x7c
 8003f9a:	e7e8      	b.n	8003f6e <_svfprintf_r+0x89e>
 8003f9c:	2a00      	cmp	r2, #0
 8003f9e:	f040 80be 	bne.w	800411e <_svfprintf_r+0xa4e>
 8003fa2:	9808      	ldr	r0, [sp, #32]
 8003fa4:	07c1      	lsls	r1, r0, #31
 8003fa6:	bf5c      	itt	pl
 8003fa8:	920d      	strpl	r2, [sp, #52]	; 0x34
 8003faa:	f8cd b044 	strpl.w	fp, [sp, #68]	; 0x44
 8003fae:	f57f acf3 	bpl.w	8003998 <_svfprintf_r+0x2c8>
 8003fb2:	991d      	ldr	r1, [sp, #116]	; 0x74
 8003fb4:	2330      	movs	r3, #48	; 0x30
 8003fb6:	f10d 02e3 	add.w	r2, sp, #227	; 0xe3
 8003fba:	f88d 30e3 	strb.w	r3, [sp, #227]	; 0xe3
 8003fbe:	910d      	str	r1, [sp, #52]	; 0x34
 8003fc0:	9211      	str	r2, [sp, #68]	; 0x44
 8003fc2:	e4e9      	b.n	8003998 <_svfprintf_r+0x2c8>
 8003fc4:	08008920 	.word	0x08008920
 8003fc8:	0800893c 	.word	0x0800893c
 8003fcc:	0800872c 	.word	0x0800872c
 8003fd0:	0800871c 	.word	0x0800871c
 8003fd4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003fd6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003fd8:	1a47      	subs	r7, r0, r1
 8003fda:	2f00      	cmp	r7, #0
 8003fdc:	f77f aed8 	ble.w	8003d90 <_svfprintf_r+0x6c0>
 8003fe0:	2f10      	cmp	r7, #16
 8003fe2:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003fe4:	f8df 86d8 	ldr.w	r8, [pc, #1752]	; 80046c0 <_svfprintf_r+0xff0>
 8003fe8:	dd22      	ble.n	8004030 <_svfprintf_r+0x960>
 8003fea:	4623      	mov	r3, r4
 8003fec:	f04f 0910 	mov.w	r9, #16
 8003ff0:	4644      	mov	r4, r8
 8003ff2:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8003ff6:	e003      	b.n	8004000 <_svfprintf_r+0x930>
 8003ff8:	3f10      	subs	r7, #16
 8003ffa:	3608      	adds	r6, #8
 8003ffc:	2f10      	cmp	r7, #16
 8003ffe:	dd15      	ble.n	800402c <_svfprintf_r+0x95c>
 8004000:	3301      	adds	r3, #1
 8004002:	3510      	adds	r5, #16
 8004004:	2b07      	cmp	r3, #7
 8004006:	e886 0210 	stmia.w	r6, {r4, r9}
 800400a:	953b      	str	r5, [sp, #236]	; 0xec
 800400c:	933a      	str	r3, [sp, #232]	; 0xe8
 800400e:	ddf3      	ble.n	8003ff8 <_svfprintf_r+0x928>
 8004010:	4640      	mov	r0, r8
 8004012:	4651      	mov	r1, sl
 8004014:	465a      	mov	r2, fp
 8004016:	f002 fecd 	bl	8006db4 <__ssprint_r>
 800401a:	2800      	cmp	r0, #0
 800401c:	f47f ac2f 	bne.w	800387e <_svfprintf_r+0x1ae>
 8004020:	3f10      	subs	r7, #16
 8004022:	2f10      	cmp	r7, #16
 8004024:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004026:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8004028:	ae1f      	add	r6, sp, #124	; 0x7c
 800402a:	dce9      	bgt.n	8004000 <_svfprintf_r+0x930>
 800402c:	46a0      	mov	r8, r4
 800402e:	461c      	mov	r4, r3
 8004030:	3401      	adds	r4, #1
 8004032:	19ed      	adds	r5, r5, r7
 8004034:	2c07      	cmp	r4, #7
 8004036:	f8c6 8000 	str.w	r8, [r6]
 800403a:	6077      	str	r7, [r6, #4]
 800403c:	953b      	str	r5, [sp, #236]	; 0xec
 800403e:	943a      	str	r4, [sp, #232]	; 0xe8
 8004040:	f300 81df 	bgt.w	8004402 <_svfprintf_r+0xd32>
 8004044:	3608      	adds	r6, #8
 8004046:	e6a3      	b.n	8003d90 <_svfprintf_r+0x6c0>
 8004048:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800404a:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 800404c:	2a01      	cmp	r2, #1
 800404e:	f340 81a5 	ble.w	800439c <_svfprintf_r+0xccc>
 8004052:	3401      	adds	r4, #1
 8004054:	9811      	ldr	r0, [sp, #68]	; 0x44
 8004056:	3501      	adds	r5, #1
 8004058:	2301      	movs	r3, #1
 800405a:	2c07      	cmp	r4, #7
 800405c:	6030      	str	r0, [r6, #0]
 800405e:	6073      	str	r3, [r6, #4]
 8004060:	953b      	str	r5, [sp, #236]	; 0xec
 8004062:	943a      	str	r4, [sp, #232]	; 0xe8
 8004064:	f300 81c1 	bgt.w	80043ea <_svfprintf_r+0xd1a>
 8004068:	3608      	adds	r6, #8
 800406a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800406c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800406e:	6071      	str	r1, [r6, #4]
 8004070:	3401      	adds	r4, #1
 8004072:	186d      	adds	r5, r5, r1
 8004074:	2c07      	cmp	r4, #7
 8004076:	6032      	str	r2, [r6, #0]
 8004078:	953b      	str	r5, [sp, #236]	; 0xec
 800407a:	943a      	str	r4, [sp, #232]	; 0xe8
 800407c:	f300 81a9 	bgt.w	80043d2 <_svfprintf_r+0xd02>
 8004080:	3608      	adds	r6, #8
 8004082:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 8004086:	2200      	movs	r2, #0
 8004088:	2300      	movs	r3, #0
 800408a:	f004 fa51 	bl	8008530 <__aeabi_dcmpeq>
 800408e:	2800      	cmp	r0, #0
 8004090:	f040 80f6 	bne.w	8004280 <_svfprintf_r+0xbb0>
 8004094:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004096:	9811      	ldr	r0, [sp, #68]	; 0x44
 8004098:	1e5a      	subs	r2, r3, #1
 800409a:	3401      	adds	r4, #1
 800409c:	1c43      	adds	r3, r0, #1
 800409e:	18ad      	adds	r5, r5, r2
 80040a0:	2c07      	cmp	r4, #7
 80040a2:	6033      	str	r3, [r6, #0]
 80040a4:	6072      	str	r2, [r6, #4]
 80040a6:	953b      	str	r5, [sp, #236]	; 0xec
 80040a8:	943a      	str	r4, [sp, #232]	; 0xe8
 80040aa:	dc22      	bgt.n	80040f2 <_svfprintf_r+0xa22>
 80040ac:	3608      	adds	r6, #8
 80040ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80040b0:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80040b2:	3401      	adds	r4, #1
 80040b4:	18ed      	adds	r5, r5, r3
 80040b6:	2c07      	cmp	r4, #7
 80040b8:	ab3c      	add	r3, sp, #240	; 0xf0
 80040ba:	6033      	str	r3, [r6, #0]
 80040bc:	6070      	str	r0, [r6, #4]
 80040be:	953b      	str	r5, [sp, #236]	; 0xec
 80040c0:	943a      	str	r4, [sp, #232]	; 0xe8
 80040c2:	f77f aeab 	ble.w	8003e1c <_svfprintf_r+0x74c>
 80040c6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80040c8:	4651      	mov	r1, sl
 80040ca:	465a      	mov	r2, fp
 80040cc:	f002 fe72 	bl	8006db4 <__ssprint_r>
 80040d0:	2800      	cmp	r0, #0
 80040d2:	f47f abd4 	bne.w	800387e <_svfprintf_r+0x1ae>
 80040d6:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80040d8:	ae1f      	add	r6, sp, #124	; 0x7c
 80040da:	e6a0      	b.n	8003e1e <_svfprintf_r+0x74e>
 80040dc:	46a0      	mov	r8, r4
 80040de:	461c      	mov	r4, r3
 80040e0:	3401      	adds	r4, #1
 80040e2:	19ed      	adds	r5, r5, r7
 80040e4:	2c07      	cmp	r4, #7
 80040e6:	f8c6 8000 	str.w	r8, [r6]
 80040ea:	6077      	str	r7, [r6, #4]
 80040ec:	953b      	str	r5, [sp, #236]	; 0xec
 80040ee:	943a      	str	r4, [sp, #232]	; 0xe8
 80040f0:	dddc      	ble.n	80040ac <_svfprintf_r+0x9dc>
 80040f2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80040f4:	4651      	mov	r1, sl
 80040f6:	465a      	mov	r2, fp
 80040f8:	f002 fe5c 	bl	8006db4 <__ssprint_r>
 80040fc:	2800      	cmp	r0, #0
 80040fe:	f47f abbe 	bne.w	800387e <_svfprintf_r+0x1ae>
 8004102:	ae1f      	add	r6, sp, #124	; 0x7c
 8004104:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004106:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8004108:	e7d1      	b.n	80040ae <_svfprintf_r+0x9de>
 800410a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800410c:	4651      	mov	r1, sl
 800410e:	465a      	mov	r2, fp
 8004110:	f002 fe50 	bl	8006db4 <__ssprint_r>
 8004114:	2800      	cmp	r0, #0
 8004116:	f43f aecf 	beq.w	8003eb8 <_svfprintf_r+0x7e8>
 800411a:	f7ff bbb0 	b.w	800387e <_svfprintf_r+0x1ae>
 800411e:	910d      	str	r1, [sp, #52]	; 0x34
 8004120:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8004124:	e438      	b.n	8003998 <_svfprintf_r+0x2c8>
 8004126:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004128:	4651      	mov	r1, sl
 800412a:	465a      	mov	r2, fp
 800412c:	f002 fe42 	bl	8006db4 <__ssprint_r>
 8004130:	2800      	cmp	r0, #0
 8004132:	f47f aba4 	bne.w	800387e <_svfprintf_r+0x1ae>
 8004136:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004138:	ae1f      	add	r6, sp, #124	; 0x7c
 800413a:	e661      	b.n	8003e00 <_svfprintf_r+0x730>
 800413c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800413e:	4651      	mov	r1, sl
 8004140:	465a      	mov	r2, fp
 8004142:	f002 fe37 	bl	8006db4 <__ssprint_r>
 8004146:	2800      	cmp	r0, #0
 8004148:	f47f ab99 	bne.w	800387e <_svfprintf_r+0x1ae>
 800414c:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 800414e:	ae1f      	add	r6, sp, #124	; 0x7c
 8004150:	e61a      	b.n	8003d88 <_svfprintf_r+0x6b8>
 8004152:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004154:	4651      	mov	r1, sl
 8004156:	465a      	mov	r2, fp
 8004158:	f002 fe2c 	bl	8006db4 <__ssprint_r>
 800415c:	2800      	cmp	r0, #0
 800415e:	f47f ab8e 	bne.w	800387e <_svfprintf_r+0x1ae>
 8004162:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004164:	ae1f      	add	r6, sp, #124	; 0x7c
 8004166:	e600      	b.n	8003d6a <_svfprintf_r+0x69a>
 8004168:	9f40      	ldr	r7, [sp, #256]	; 0x100
 800416a:	2f00      	cmp	r7, #0
 800416c:	f340 819a 	ble.w	80044a4 <_svfprintf_r+0xdd4>
 8004170:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8004172:	9816      	ldr	r0, [sp, #88]	; 0x58
 8004174:	9911      	ldr	r1, [sp, #68]	; 0x44
 8004176:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004178:	4287      	cmp	r7, r0
 800417a:	bfa8      	it	ge
 800417c:	4607      	movge	r7, r0
 800417e:	1889      	adds	r1, r1, r2
 8004180:	2f00      	cmp	r7, #0
 8004182:	910d      	str	r1, [sp, #52]	; 0x34
 8004184:	dd0b      	ble.n	800419e <_svfprintf_r+0xace>
 8004186:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8004188:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800418a:	6077      	str	r7, [r6, #4]
 800418c:	3401      	adds	r4, #1
 800418e:	19ed      	adds	r5, r5, r7
 8004190:	2c07      	cmp	r4, #7
 8004192:	6032      	str	r2, [r6, #0]
 8004194:	953b      	str	r5, [sp, #236]	; 0xec
 8004196:	943a      	str	r4, [sp, #232]	; 0xe8
 8004198:	f300 8304 	bgt.w	80047a4 <_svfprintf_r+0x10d4>
 800419c:	3608      	adds	r6, #8
 800419e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80041a0:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
 80041a4:	1bdf      	subs	r7, r3, r7
 80041a6:	2f00      	cmp	r7, #0
 80041a8:	f340 80a0 	ble.w	80042ec <_svfprintf_r+0xc1c>
 80041ac:	2f10      	cmp	r7, #16
 80041ae:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80041b0:	f8df 850c 	ldr.w	r8, [pc, #1292]	; 80046c0 <_svfprintf_r+0xff0>
 80041b4:	f340 815f 	ble.w	8004476 <_svfprintf_r+0xda6>
 80041b8:	4623      	mov	r3, r4
 80041ba:	f04f 0910 	mov.w	r9, #16
 80041be:	4644      	mov	r4, r8
 80041c0:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 80041c4:	e004      	b.n	80041d0 <_svfprintf_r+0xb00>
 80041c6:	3608      	adds	r6, #8
 80041c8:	3f10      	subs	r7, #16
 80041ca:	2f10      	cmp	r7, #16
 80041cc:	f340 8151 	ble.w	8004472 <_svfprintf_r+0xda2>
 80041d0:	3301      	adds	r3, #1
 80041d2:	3510      	adds	r5, #16
 80041d4:	2b07      	cmp	r3, #7
 80041d6:	e886 0210 	stmia.w	r6, {r4, r9}
 80041da:	953b      	str	r5, [sp, #236]	; 0xec
 80041dc:	933a      	str	r3, [sp, #232]	; 0xe8
 80041de:	ddf2      	ble.n	80041c6 <_svfprintf_r+0xaf6>
 80041e0:	4640      	mov	r0, r8
 80041e2:	4651      	mov	r1, sl
 80041e4:	465a      	mov	r2, fp
 80041e6:	f002 fde5 	bl	8006db4 <__ssprint_r>
 80041ea:	2800      	cmp	r0, #0
 80041ec:	f47f ab47 	bne.w	800387e <_svfprintf_r+0x1ae>
 80041f0:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80041f2:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 80041f4:	ae1f      	add	r6, sp, #124	; 0x7c
 80041f6:	e7e7      	b.n	80041c8 <_svfprintf_r+0xaf8>
 80041f8:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 80041fa:	f10d 01e3 	add.w	r1, sp, #227	; 0xe3
 80041fe:	f003 000f 	and.w	r0, r3, #15
 8004202:	460a      	mov	r2, r1
 8004204:	5c28      	ldrb	r0, [r5, r0]
 8004206:	3901      	subs	r1, #1
 8004208:	091b      	lsrs	r3, r3, #4
 800420a:	7010      	strb	r0, [r2, #0]
 800420c:	d1f7      	bne.n	80041fe <_svfprintf_r+0xb2e>
 800420e:	ebc2 030b 	rsb	r3, r2, fp
 8004212:	9211      	str	r2, [sp, #68]	; 0x44
 8004214:	930d      	str	r3, [sp, #52]	; 0x34
 8004216:	f7ff bbbf 	b.w	8003998 <_svfprintf_r+0x2c8>
 800421a:	2b09      	cmp	r3, #9
 800421c:	bf82      	ittt	hi
 800421e:	f64c 45cd 	movwhi	r5, #52429	; 0xcccd
 8004222:	f10d 01e3 	addhi.w	r1, sp, #227	; 0xe3
 8004226:	f6cc 45cc 	movthi	r5, #52428	; 0xcccc
 800422a:	d809      	bhi.n	8004240 <_svfprintf_r+0xb70>
 800422c:	981d      	ldr	r0, [sp, #116]	; 0x74
 800422e:	3330      	adds	r3, #48	; 0x30
 8004230:	f10d 01e3 	add.w	r1, sp, #227	; 0xe3
 8004234:	f88d 30e3 	strb.w	r3, [sp, #227]	; 0xe3
 8004238:	900d      	str	r0, [sp, #52]	; 0x34
 800423a:	9111      	str	r1, [sp, #68]	; 0x44
 800423c:	f7ff bbac 	b.w	8003998 <_svfprintf_r+0x2c8>
 8004240:	fba5 0203 	umull	r0, r2, r5, r3
 8004244:	08d2      	lsrs	r2, r2, #3
 8004246:	eb02 0782 	add.w	r7, r2, r2, lsl #2
 800424a:	4608      	mov	r0, r1
 800424c:	eba3 0347 	sub.w	r3, r3, r7, lsl #1
 8004250:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004254:	7001      	strb	r1, [r0, #0]
 8004256:	4613      	mov	r3, r2
 8004258:	1e41      	subs	r1, r0, #1
 800425a:	2a00      	cmp	r2, #0
 800425c:	d1f0      	bne.n	8004240 <_svfprintf_r+0xb70>
 800425e:	ebc0 030b 	rsb	r3, r0, fp
 8004262:	9011      	str	r0, [sp, #68]	; 0x44
 8004264:	930d      	str	r3, [sp, #52]	; 0x34
 8004266:	f7ff bb97 	b.w	8003998 <_svfprintf_r+0x2c8>
 800426a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800426c:	4651      	mov	r1, sl
 800426e:	465a      	mov	r2, fp
 8004270:	f002 fda0 	bl	8006db4 <__ssprint_r>
 8004274:	2800      	cmp	r0, #0
 8004276:	f47f ab02 	bne.w	800387e <_svfprintf_r+0x1ae>
 800427a:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 800427c:	ae1f      	add	r6, sp, #124	; 0x7c
 800427e:	e563      	b.n	8003d48 <_svfprintf_r+0x678>
 8004280:	9910      	ldr	r1, [sp, #64]	; 0x40
 8004282:	1e4f      	subs	r7, r1, #1
 8004284:	2f00      	cmp	r7, #0
 8004286:	f77f af12 	ble.w	80040ae <_svfprintf_r+0x9de>
 800428a:	2f10      	cmp	r7, #16
 800428c:	f8df 8430 	ldr.w	r8, [pc, #1072]	; 80046c0 <_svfprintf_r+0xff0>
 8004290:	f77f af26 	ble.w	80040e0 <_svfprintf_r+0xa10>
 8004294:	4623      	mov	r3, r4
 8004296:	f04f 0910 	mov.w	r9, #16
 800429a:	4644      	mov	r4, r8
 800429c:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 80042a0:	e004      	b.n	80042ac <_svfprintf_r+0xbdc>
 80042a2:	3608      	adds	r6, #8
 80042a4:	3f10      	subs	r7, #16
 80042a6:	2f10      	cmp	r7, #16
 80042a8:	f77f af18 	ble.w	80040dc <_svfprintf_r+0xa0c>
 80042ac:	3301      	adds	r3, #1
 80042ae:	3510      	adds	r5, #16
 80042b0:	2b07      	cmp	r3, #7
 80042b2:	e886 0210 	stmia.w	r6, {r4, r9}
 80042b6:	953b      	str	r5, [sp, #236]	; 0xec
 80042b8:	933a      	str	r3, [sp, #232]	; 0xe8
 80042ba:	ddf2      	ble.n	80042a2 <_svfprintf_r+0xbd2>
 80042bc:	4640      	mov	r0, r8
 80042be:	4651      	mov	r1, sl
 80042c0:	465a      	mov	r2, fp
 80042c2:	f002 fd77 	bl	8006db4 <__ssprint_r>
 80042c6:	2800      	cmp	r0, #0
 80042c8:	f47f aad9 	bne.w	800387e <_svfprintf_r+0x1ae>
 80042cc:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80042ce:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 80042d0:	ae1f      	add	r6, sp, #124	; 0x7c
 80042d2:	e7e7      	b.n	80042a4 <_svfprintf_r+0xbd4>
 80042d4:	2202      	movs	r2, #2
 80042d6:	e405      	b.n	8003ae4 <_svfprintf_r+0x414>
 80042d8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80042da:	4651      	mov	r1, sl
 80042dc:	465a      	mov	r2, fp
 80042de:	f002 fd69 	bl	8006db4 <__ssprint_r>
 80042e2:	2800      	cmp	r0, #0
 80042e4:	f47f aacb 	bne.w	800387e <_svfprintf_r+0x1ae>
 80042e8:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80042ea:	ae1f      	add	r6, sp, #124	; 0x7c
 80042ec:	9b40      	ldr	r3, [sp, #256]	; 0x100
 80042ee:	9810      	ldr	r0, [sp, #64]	; 0x40
 80042f0:	4298      	cmp	r0, r3
 80042f2:	dc45      	bgt.n	8004380 <_svfprintf_r+0xcb0>
 80042f4:	9908      	ldr	r1, [sp, #32]
 80042f6:	07c9      	lsls	r1, r1, #31
 80042f8:	d442      	bmi.n	8004380 <_svfprintf_r+0xcb0>
 80042fa:	9911      	ldr	r1, [sp, #68]	; 0x44
 80042fc:	9816      	ldr	r0, [sp, #88]	; 0x58
 80042fe:	180a      	adds	r2, r1, r0
 8004300:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004302:	9810      	ldr	r0, [sp, #64]	; 0x40
 8004304:	1a8f      	subs	r7, r1, r2
 8004306:	1ac3      	subs	r3, r0, r3
 8004308:	42bb      	cmp	r3, r7
 800430a:	bfb8      	it	lt
 800430c:	461f      	movlt	r7, r3
 800430e:	2f00      	cmp	r7, #0
 8004310:	dd0a      	ble.n	8004328 <_svfprintf_r+0xc58>
 8004312:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8004314:	6032      	str	r2, [r6, #0]
 8004316:	3401      	adds	r4, #1
 8004318:	19ed      	adds	r5, r5, r7
 800431a:	2c07      	cmp	r4, #7
 800431c:	6077      	str	r7, [r6, #4]
 800431e:	953b      	str	r5, [sp, #236]	; 0xec
 8004320:	943a      	str	r4, [sp, #232]	; 0xe8
 8004322:	f300 8256 	bgt.w	80047d2 <_svfprintf_r+0x1102>
 8004326:	3608      	adds	r6, #8
 8004328:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
 800432c:	1bdf      	subs	r7, r3, r7
 800432e:	2f00      	cmp	r7, #0
 8004330:	f77f ad75 	ble.w	8003e1e <_svfprintf_r+0x74e>
 8004334:	2f10      	cmp	r7, #16
 8004336:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8004338:	f8df 8384 	ldr.w	r8, [pc, #900]	; 80046c0 <_svfprintf_r+0xff0>
 800433c:	f77f adc2 	ble.w	8003ec4 <_svfprintf_r+0x7f4>
 8004340:	4623      	mov	r3, r4
 8004342:	f04f 0910 	mov.w	r9, #16
 8004346:	4644      	mov	r4, r8
 8004348:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 800434c:	e004      	b.n	8004358 <_svfprintf_r+0xc88>
 800434e:	3608      	adds	r6, #8
 8004350:	3f10      	subs	r7, #16
 8004352:	2f10      	cmp	r7, #16
 8004354:	f77f adb4 	ble.w	8003ec0 <_svfprintf_r+0x7f0>
 8004358:	3301      	adds	r3, #1
 800435a:	3510      	adds	r5, #16
 800435c:	2b07      	cmp	r3, #7
 800435e:	e886 0210 	stmia.w	r6, {r4, r9}
 8004362:	953b      	str	r5, [sp, #236]	; 0xec
 8004364:	933a      	str	r3, [sp, #232]	; 0xe8
 8004366:	ddf2      	ble.n	800434e <_svfprintf_r+0xc7e>
 8004368:	4640      	mov	r0, r8
 800436a:	4651      	mov	r1, sl
 800436c:	465a      	mov	r2, fp
 800436e:	f002 fd21 	bl	8006db4 <__ssprint_r>
 8004372:	2800      	cmp	r0, #0
 8004374:	f47f aa83 	bne.w	800387e <_svfprintf_r+0x1ae>
 8004378:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 800437a:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 800437c:	ae1f      	add	r6, sp, #124	; 0x7c
 800437e:	e7e7      	b.n	8004350 <_svfprintf_r+0xc80>
 8004380:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8004382:	981a      	ldr	r0, [sp, #104]	; 0x68
 8004384:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004386:	6070      	str	r0, [r6, #4]
 8004388:	3401      	adds	r4, #1
 800438a:	182d      	adds	r5, r5, r0
 800438c:	2c07      	cmp	r4, #7
 800438e:	6032      	str	r2, [r6, #0]
 8004390:	953b      	str	r5, [sp, #236]	; 0xec
 8004392:	943a      	str	r4, [sp, #232]	; 0xe8
 8004394:	f300 8211 	bgt.w	80047ba <_svfprintf_r+0x10ea>
 8004398:	3608      	adds	r6, #8
 800439a:	e7ae      	b.n	80042fa <_svfprintf_r+0xc2a>
 800439c:	9b08      	ldr	r3, [sp, #32]
 800439e:	07da      	lsls	r2, r3, #31
 80043a0:	f53f ae57 	bmi.w	8004052 <_svfprintf_r+0x982>
 80043a4:	3401      	adds	r4, #1
 80043a6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80043a8:	3501      	adds	r5, #1
 80043aa:	2301      	movs	r3, #1
 80043ac:	2c07      	cmp	r4, #7
 80043ae:	6032      	str	r2, [r6, #0]
 80043b0:	6073      	str	r3, [r6, #4]
 80043b2:	953b      	str	r5, [sp, #236]	; 0xec
 80043b4:	943a      	str	r4, [sp, #232]	; 0xe8
 80043b6:	f77f ae79 	ble.w	80040ac <_svfprintf_r+0x9dc>
 80043ba:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80043bc:	4651      	mov	r1, sl
 80043be:	465a      	mov	r2, fp
 80043c0:	f002 fcf8 	bl	8006db4 <__ssprint_r>
 80043c4:	2800      	cmp	r0, #0
 80043c6:	f47f aa5a 	bne.w	800387e <_svfprintf_r+0x1ae>
 80043ca:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80043cc:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80043ce:	ae1f      	add	r6, sp, #124	; 0x7c
 80043d0:	e66d      	b.n	80040ae <_svfprintf_r+0x9de>
 80043d2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80043d4:	4651      	mov	r1, sl
 80043d6:	465a      	mov	r2, fp
 80043d8:	f002 fcec 	bl	8006db4 <__ssprint_r>
 80043dc:	2800      	cmp	r0, #0
 80043de:	f47f aa4e 	bne.w	800387e <_svfprintf_r+0x1ae>
 80043e2:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80043e4:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80043e6:	ae1f      	add	r6, sp, #124	; 0x7c
 80043e8:	e64b      	b.n	8004082 <_svfprintf_r+0x9b2>
 80043ea:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80043ec:	4651      	mov	r1, sl
 80043ee:	465a      	mov	r2, fp
 80043f0:	f002 fce0 	bl	8006db4 <__ssprint_r>
 80043f4:	2800      	cmp	r0, #0
 80043f6:	f47f aa42 	bne.w	800387e <_svfprintf_r+0x1ae>
 80043fa:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80043fc:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80043fe:	ae1f      	add	r6, sp, #124	; 0x7c
 8004400:	e633      	b.n	800406a <_svfprintf_r+0x99a>
 8004402:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004404:	4651      	mov	r1, sl
 8004406:	465a      	mov	r2, fp
 8004408:	f002 fcd4 	bl	8006db4 <__ssprint_r>
 800440c:	2800      	cmp	r0, #0
 800440e:	f47f aa36 	bne.w	800387e <_svfprintf_r+0x1ae>
 8004412:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004414:	ae1f      	add	r6, sp, #124	; 0x7c
 8004416:	e4bb      	b.n	8003d90 <_svfprintf_r+0x6c0>
 8004418:	f002 fb64 	bl	8006ae4 <__fpclassifyd>
 800441c:	2800      	cmp	r0, #0
 800441e:	f040 809e 	bne.w	800455e <_svfprintf_r+0xe8e>
 8004422:	2203      	movs	r2, #3
 8004424:	9012      	str	r0, [sp, #72]	; 0x48
 8004426:	4ba3      	ldr	r3, [pc, #652]	; (80046b4 <_svfprintf_r+0xfe4>)
 8004428:	920a      	str	r2, [sp, #40]	; 0x28
 800442a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800442c:	4aa2      	ldr	r2, [pc, #648]	; (80046b8 <_svfprintf_r+0xfe8>)
 800442e:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 8004432:	2847      	cmp	r0, #71	; 0x47
 8004434:	bfd8      	it	le
 8004436:	461a      	movle	r2, r3
 8004438:	9211      	str	r2, [sp, #68]	; 0x44
 800443a:	2303      	movs	r3, #3
 800443c:	9a08      	ldr	r2, [sp, #32]
 800443e:	930d      	str	r3, [sp, #52]	; 0x34
 8004440:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004442:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004446:	9208      	str	r2, [sp, #32]
 8004448:	9316      	str	r3, [sp, #88]	; 0x58
 800444a:	f7ff baaf 	b.w	80039ac <_svfprintf_r+0x2dc>
 800444e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004450:	2201      	movs	r2, #1
 8004452:	680b      	ldr	r3, [r1, #0]
 8004454:	e414      	b.n	8003c80 <_svfprintf_r+0x5b0>
 8004456:	9b08      	ldr	r3, [sp, #32]
 8004458:	065f      	lsls	r7, r3, #25
 800445a:	d56d      	bpl.n	8004538 <_svfprintf_r+0xe68>
 800445c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800445e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004460:	6803      	ldr	r3, [r0, #0]
 8004462:	3004      	adds	r0, #4
 8004464:	900e      	str	r0, [sp, #56]	; 0x38
 8004466:	8019      	strh	r1, [r3, #0]
 8004468:	f7ff b960 	b.w	800372c <_svfprintf_r+0x5c>
 800446c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800446e:	680b      	ldr	r3, [r1, #0]
 8004470:	e406      	b.n	8003c80 <_svfprintf_r+0x5b0>
 8004472:	46a0      	mov	r8, r4
 8004474:	461c      	mov	r4, r3
 8004476:	3401      	adds	r4, #1
 8004478:	19ed      	adds	r5, r5, r7
 800447a:	2c07      	cmp	r4, #7
 800447c:	f8c6 8000 	str.w	r8, [r6]
 8004480:	6077      	str	r7, [r6, #4]
 8004482:	953b      	str	r5, [sp, #236]	; 0xec
 8004484:	943a      	str	r4, [sp, #232]	; 0xe8
 8004486:	f73f af27 	bgt.w	80042d8 <_svfprintf_r+0xc08>
 800448a:	3608      	adds	r6, #8
 800448c:	e72e      	b.n	80042ec <_svfprintf_r+0xc1c>
 800448e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004490:	4651      	mov	r1, sl
 8004492:	465a      	mov	r2, fp
 8004494:	f002 fc8e 	bl	8006db4 <__ssprint_r>
 8004498:	2800      	cmp	r0, #0
 800449a:	f47f a9f0 	bne.w	800387e <_svfprintf_r+0x1ae>
 800449e:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80044a0:	ae1f      	add	r6, sp, #124	; 0x7c
 80044a2:	e53d      	b.n	8003f20 <_svfprintf_r+0x850>
 80044a4:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80044a6:	4b85      	ldr	r3, [pc, #532]	; (80046bc <_svfprintf_r+0xfec>)
 80044a8:	3401      	adds	r4, #1
 80044aa:	6033      	str	r3, [r6, #0]
 80044ac:	3501      	adds	r5, #1
 80044ae:	2301      	movs	r3, #1
 80044b0:	2c07      	cmp	r4, #7
 80044b2:	6073      	str	r3, [r6, #4]
 80044b4:	953b      	str	r5, [sp, #236]	; 0xec
 80044b6:	943a      	str	r4, [sp, #232]	; 0xe8
 80044b8:	f300 8139 	bgt.w	800472e <_svfprintf_r+0x105e>
 80044bc:	3608      	adds	r6, #8
 80044be:	b92f      	cbnz	r7, 80044cc <_svfprintf_r+0xdfc>
 80044c0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80044c2:	b91a      	cbnz	r2, 80044cc <_svfprintf_r+0xdfc>
 80044c4:	9b08      	ldr	r3, [sp, #32]
 80044c6:	07d8      	lsls	r0, r3, #31
 80044c8:	f57f aca9 	bpl.w	8003e1e <_svfprintf_r+0x74e>
 80044cc:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80044ce:	991a      	ldr	r1, [sp, #104]	; 0x68
 80044d0:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80044d2:	6071      	str	r1, [r6, #4]
 80044d4:	3401      	adds	r4, #1
 80044d6:	186d      	adds	r5, r5, r1
 80044d8:	2c07      	cmp	r4, #7
 80044da:	6030      	str	r0, [r6, #0]
 80044dc:	953b      	str	r5, [sp, #236]	; 0xec
 80044de:	943a      	str	r4, [sp, #232]	; 0xe8
 80044e0:	f300 81d2 	bgt.w	8004888 <_svfprintf_r+0x11b8>
 80044e4:	3608      	adds	r6, #8
 80044e6:	427f      	negs	r7, r7
 80044e8:	2f00      	cmp	r7, #0
 80044ea:	f340 8141 	ble.w	8004770 <_svfprintf_r+0x10a0>
 80044ee:	2f10      	cmp	r7, #16
 80044f0:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 80046c0 <_svfprintf_r+0xff0>
 80044f4:	f340 8183 	ble.w	80047fe <_svfprintf_r+0x112e>
 80044f8:	4623      	mov	r3, r4
 80044fa:	f04f 0910 	mov.w	r9, #16
 80044fe:	4644      	mov	r4, r8
 8004500:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8004504:	e004      	b.n	8004510 <_svfprintf_r+0xe40>
 8004506:	3608      	adds	r6, #8
 8004508:	3f10      	subs	r7, #16
 800450a:	2f10      	cmp	r7, #16
 800450c:	f340 8175 	ble.w	80047fa <_svfprintf_r+0x112a>
 8004510:	3301      	adds	r3, #1
 8004512:	3510      	adds	r5, #16
 8004514:	2b07      	cmp	r3, #7
 8004516:	e886 0210 	stmia.w	r6, {r4, r9}
 800451a:	953b      	str	r5, [sp, #236]	; 0xec
 800451c:	933a      	str	r3, [sp, #232]	; 0xe8
 800451e:	ddf2      	ble.n	8004506 <_svfprintf_r+0xe36>
 8004520:	4640      	mov	r0, r8
 8004522:	4651      	mov	r1, sl
 8004524:	465a      	mov	r2, fp
 8004526:	f002 fc45 	bl	8006db4 <__ssprint_r>
 800452a:	2800      	cmp	r0, #0
 800452c:	f47f a9a7 	bne.w	800387e <_svfprintf_r+0x1ae>
 8004530:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004532:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8004534:	ae1f      	add	r6, sp, #124	; 0x7c
 8004536:	e7e7      	b.n	8004508 <_svfprintf_r+0xe38>
 8004538:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800453a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800453c:	6813      	ldr	r3, [r2, #0]
 800453e:	3204      	adds	r2, #4
 8004540:	920e      	str	r2, [sp, #56]	; 0x38
 8004542:	6018      	str	r0, [r3, #0]
 8004544:	f7ff b8f2 	b.w	800372c <_svfprintf_r+0x5c>
 8004548:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800454a:	4651      	mov	r1, sl
 800454c:	465a      	mov	r2, fp
 800454e:	f002 fc31 	bl	8006db4 <__ssprint_r>
 8004552:	2800      	cmp	r0, #0
 8004554:	f47f a993 	bne.w	800387e <_svfprintf_r+0x1ae>
 8004558:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 800455a:	ae1f      	add	r6, sp, #124	; 0x7c
 800455c:	e4f5      	b.n	8003f4a <_svfprintf_r+0x87a>
 800455e:	1c60      	adds	r0, r4, #1
 8004560:	f000 80f1 	beq.w	8004746 <_svfprintf_r+0x1076>
 8004564:	9915      	ldr	r1, [sp, #84]	; 0x54
 8004566:	2967      	cmp	r1, #103	; 0x67
 8004568:	bf18      	it	ne
 800456a:	2947      	cmpne	r1, #71	; 0x47
 800456c:	bf14      	ite	ne
 800456e:	2300      	movne	r3, #0
 8004570:	2301      	moveq	r3, #1
 8004572:	bf18      	it	ne
 8004574:	930a      	strne	r3, [sp, #40]	; 0x28
 8004576:	d104      	bne.n	8004582 <_svfprintf_r+0xeb2>
 8004578:	2c00      	cmp	r4, #0
 800457a:	f000 81ad 	beq.w	80048d8 <_svfprintf_r+0x1208>
 800457e:	2201      	movs	r2, #1
 8004580:	920a      	str	r2, [sp, #40]	; 0x28
 8004582:	9808      	ldr	r0, [sp, #32]
 8004584:	2d00      	cmp	r5, #0
 8004586:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 800458a:	9008      	str	r0, [sp, #32]
 800458c:	f2c0 8189 	blt.w	80048a2 <_svfprintf_r+0x11d2>
 8004590:	2200      	movs	r2, #0
 8004592:	9212      	str	r2, [sp, #72]	; 0x48
 8004594:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004596:	9815      	ldr	r0, [sp, #84]	; 0x54
 8004598:	f1a3 0166 	sub.w	r1, r3, #102	; 0x66
 800459c:	424b      	negs	r3, r1
 800459e:	eb43 0301 	adc.w	r3, r3, r1
 80045a2:	469c      	mov	ip, r3
 80045a4:	2846      	cmp	r0, #70	; 0x46
 80045a6:	bf08      	it	eq
 80045a8:	f04c 0c01 	orreq.w	ip, ip, #1
 80045ac:	930d      	str	r3, [sp, #52]	; 0x34
 80045ae:	46a1      	mov	r9, r4
 80045b0:	2103      	movs	r1, #3
 80045b2:	f1bc 0f00 	cmp.w	ip, #0
 80045b6:	d107      	bne.n	80045c8 <_svfprintf_r+0xef8>
 80045b8:	2865      	cmp	r0, #101	; 0x65
 80045ba:	bf18      	it	ne
 80045bc:	2845      	cmpne	r0, #69	; 0x45
 80045be:	bf0c      	ite	eq
 80045c0:	f104 0901 	addeq.w	r9, r4, #1
 80045c4:	46a1      	movne	r9, r4
 80045c6:	2102      	movs	r1, #2
 80045c8:	e88d 0202 	stmia.w	sp, {r1, r9}
 80045cc:	a940      	add	r1, sp, #256	; 0x100
 80045ce:	9102      	str	r1, [sp, #8]
 80045d0:	a941      	add	r1, sp, #260	; 0x104
 80045d2:	9103      	str	r1, [sp, #12]
 80045d4:	4642      	mov	r2, r8
 80045d6:	a942      	add	r1, sp, #264	; 0x108
 80045d8:	462b      	mov	r3, r5
 80045da:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80045dc:	9104      	str	r1, [sp, #16]
 80045de:	f8cd c018 	str.w	ip, [sp, #24]
 80045e2:	f000 fa6d 	bl	8004ac0 <_dtoa_r>
 80045e6:	9915      	ldr	r1, [sp, #84]	; 0x54
 80045e8:	9011      	str	r0, [sp, #68]	; 0x44
 80045ea:	2947      	cmp	r1, #71	; 0x47
 80045ec:	bf18      	it	ne
 80045ee:	2967      	cmpne	r1, #103	; 0x67
 80045f0:	f8dd c018 	ldr.w	ip, [sp, #24]
 80045f4:	d104      	bne.n	8004600 <_svfprintf_r+0xf30>
 80045f6:	9a08      	ldr	r2, [sp, #32]
 80045f8:	07d2      	lsls	r2, r2, #31
 80045fa:	bf58      	it	pl
 80045fc:	9f42      	ldrpl	r7, [sp, #264]	; 0x108
 80045fe:	d515      	bpl.n	800462c <_svfprintf_r+0xf5c>
 8004600:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004602:	eb03 0709 	add.w	r7, r3, r9
 8004606:	f1bc 0f00 	cmp.w	ip, #0
 800460a:	d005      	beq.n	8004618 <_svfprintf_r+0xf48>
 800460c:	781b      	ldrb	r3, [r3, #0]
 800460e:	2b30      	cmp	r3, #48	; 0x30
 8004610:	f000 8165 	beq.w	80048de <_svfprintf_r+0x120e>
 8004614:	9b40      	ldr	r3, [sp, #256]	; 0x100
 8004616:	18ff      	adds	r7, r7, r3
 8004618:	4640      	mov	r0, r8
 800461a:	4629      	mov	r1, r5
 800461c:	2200      	movs	r2, #0
 800461e:	2300      	movs	r3, #0
 8004620:	f003 ff86 	bl	8008530 <__aeabi_dcmpeq>
 8004624:	2800      	cmp	r0, #0
 8004626:	f000 8117 	beq.w	8004858 <_svfprintf_r+0x1188>
 800462a:	9742      	str	r7, [sp, #264]	; 0x108
 800462c:	9811      	ldr	r0, [sp, #68]	; 0x44
 800462e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004630:	1a3f      	subs	r7, r7, r0
 8004632:	9710      	str	r7, [sp, #64]	; 0x40
 8004634:	2900      	cmp	r1, #0
 8004636:	f000 80f9 	beq.w	800482c <_svfprintf_r+0x115c>
 800463a:	9940      	ldr	r1, [sp, #256]	; 0x100
 800463c:	1ccb      	adds	r3, r1, #3
 800463e:	db02      	blt.n	8004646 <_svfprintf_r+0xf76>
 8004640:	428c      	cmp	r4, r1
 8004642:	f280 80fa 	bge.w	800483a <_svfprintf_r+0x116a>
 8004646:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004648:	3a02      	subs	r2, #2
 800464a:	9215      	str	r2, [sp, #84]	; 0x54
 800464c:	3901      	subs	r1, #1
 800464e:	9815      	ldr	r0, [sp, #84]	; 0x54
 8004650:	9140      	str	r1, [sp, #256]	; 0x100
 8004652:	2900      	cmp	r1, #0
 8004654:	f88d 00f0 	strb.w	r0, [sp, #240]	; 0xf0
 8004658:	f2c0 815d 	blt.w	8004916 <_svfprintf_r+0x1246>
 800465c:	232b      	movs	r3, #43	; 0x2b
 800465e:	f88d 30f1 	strb.w	r3, [sp, #241]	; 0xf1
 8004662:	2909      	cmp	r1, #9
 8004664:	f340 8122 	ble.w	80048ac <_svfprintf_r+0x11dc>
 8004668:	f10d 07ff 	add.w	r7, sp, #255	; 0xff
 800466c:	f246 6467 	movw	r4, #26215	; 0x6667
 8004670:	4638      	mov	r0, r7
 8004672:	f2c6 6466 	movt	r4, #26214	; 0x6666
 8004676:	fb84 3201 	smull	r3, r2, r4, r1
 800467a:	17cb      	asrs	r3, r1, #31
 800467c:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 8004680:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8004684:	eba1 0242 	sub.w	r2, r1, r2, lsl #1
 8004688:	3230      	adds	r2, #48	; 0x30
 800468a:	2b09      	cmp	r3, #9
 800468c:	4605      	mov	r5, r0
 800468e:	4619      	mov	r1, r3
 8004690:	f800 2d01 	strb.w	r2, [r0, #-1]!
 8004694:	dcef      	bgt.n	8004676 <_svfprintf_r+0xfa6>
 8004696:	3130      	adds	r1, #48	; 0x30
 8004698:	1eaa      	subs	r2, r5, #2
 800469a:	b2c9      	uxtb	r1, r1
 800469c:	42ba      	cmp	r2, r7
 800469e:	f805 1c02 	strb.w	r1, [r5, #-2]
 80046a2:	bf28      	it	cs
 80046a4:	f10d 01f2 	addcs.w	r1, sp, #242	; 0xf2
 80046a8:	d213      	bcs.n	80046d2 <_svfprintf_r+0x1002>
 80046aa:	f10d 03f2 	add.w	r3, sp, #242	; 0xf2
 80046ae:	f10d 00fe 	add.w	r0, sp, #254	; 0xfe
 80046b2:	e009      	b.n	80046c8 <_svfprintf_r+0xff8>
 80046b4:	08008904 	.word	0x08008904
 80046b8:	08008908 	.word	0x08008908
 80046bc:	0800893c 	.word	0x0800893c
 80046c0:	0800872c 	.word	0x0800872c
 80046c4:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 80046c8:	f803 1b01 	strb.w	r1, [r3], #1
 80046cc:	4282      	cmp	r2, r0
 80046ce:	4619      	mov	r1, r3
 80046d0:	d1f8      	bne.n	80046c4 <_svfprintf_r+0xff4>
 80046d2:	9810      	ldr	r0, [sp, #64]	; 0x40
 80046d4:	ab3c      	add	r3, sp, #240	; 0xf0
 80046d6:	1acb      	subs	r3, r1, r3
 80046d8:	931b      	str	r3, [sp, #108]	; 0x6c
 80046da:	2801      	cmp	r0, #1
 80046dc:	4403      	add	r3, r0
 80046de:	930d      	str	r3, [sp, #52]	; 0x34
 80046e0:	f340 8125 	ble.w	800492e <_svfprintf_r+0x125e>
 80046e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80046e6:	3301      	adds	r3, #1
 80046e8:	ea23 70e3 	bic.w	r0, r3, r3, asr #31
 80046ec:	2100      	movs	r1, #0
 80046ee:	930d      	str	r3, [sp, #52]	; 0x34
 80046f0:	900a      	str	r0, [sp, #40]	; 0x28
 80046f2:	9116      	str	r1, [sp, #88]	; 0x58
 80046f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80046f6:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	f43f a956 	beq.w	80039ac <_svfprintf_r+0x2dc>
 8004700:	232d      	movs	r3, #45	; 0x2d
 8004702:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
 8004706:	2300      	movs	r3, #0
 8004708:	9312      	str	r3, [sp, #72]	; 0x48
 800470a:	f7ff b950 	b.w	80039ae <_svfprintf_r+0x2de>
 800470e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004710:	2140      	movs	r1, #64	; 0x40
 8004712:	f001 fa59 	bl	8005bc8 <_malloc_r>
 8004716:	f8ca 0000 	str.w	r0, [sl]
 800471a:	f8ca 0010 	str.w	r0, [sl, #16]
 800471e:	2800      	cmp	r0, #0
 8004720:	f000 812b 	beq.w	800497a <_svfprintf_r+0x12aa>
 8004724:	2340      	movs	r3, #64	; 0x40
 8004726:	f8ca 3014 	str.w	r3, [sl, #20]
 800472a:	f7fe bfec 	b.w	8003706 <_svfprintf_r+0x36>
 800472e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004730:	4651      	mov	r1, sl
 8004732:	465a      	mov	r2, fp
 8004734:	f002 fb3e 	bl	8006db4 <__ssprint_r>
 8004738:	2800      	cmp	r0, #0
 800473a:	f47f a8a0 	bne.w	800387e <_svfprintf_r+0x1ae>
 800473e:	9f40      	ldr	r7, [sp, #256]	; 0x100
 8004740:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004742:	ae1f      	add	r6, sp, #124	; 0x7c
 8004744:	e6bb      	b.n	80044be <_svfprintf_r+0xdee>
 8004746:	9815      	ldr	r0, [sp, #84]	; 0x54
 8004748:	2847      	cmp	r0, #71	; 0x47
 800474a:	bf18      	it	ne
 800474c:	2867      	cmpne	r0, #103	; 0x67
 800474e:	bf14      	ite	ne
 8004750:	2000      	movne	r0, #0
 8004752:	2001      	moveq	r0, #1
 8004754:	900a      	str	r0, [sp, #40]	; 0x28
 8004756:	2406      	movs	r4, #6
 8004758:	e713      	b.n	8004582 <_svfprintf_r+0xeb2>
 800475a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800475c:	4651      	mov	r1, sl
 800475e:	465a      	mov	r2, fp
 8004760:	f002 fb28 	bl	8006db4 <__ssprint_r>
 8004764:	2800      	cmp	r0, #0
 8004766:	f47f a88a 	bne.w	800387e <_svfprintf_r+0x1ae>
 800476a:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 800476c:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 800476e:	ae1f      	add	r6, sp, #124	; 0x7c
 8004770:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004772:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004774:	6072      	str	r2, [r6, #4]
 8004776:	3401      	adds	r4, #1
 8004778:	18ad      	adds	r5, r5, r2
 800477a:	2c07      	cmp	r4, #7
 800477c:	6033      	str	r3, [r6, #0]
 800477e:	953b      	str	r5, [sp, #236]	; 0xec
 8004780:	943a      	str	r4, [sp, #232]	; 0xe8
 8004782:	f77f ab4b 	ble.w	8003e1c <_svfprintf_r+0x74c>
 8004786:	f7ff bba6 	b.w	8003ed6 <_svfprintf_r+0x806>
 800478a:	f002 fae3 	bl	8006d54 <strlen>
 800478e:	900d      	str	r0, [sp, #52]	; 0x34
 8004790:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8004794:	9512      	str	r5, [sp, #72]	; 0x48
 8004796:	900a      	str	r0, [sp, #40]	; 0x28
 8004798:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 800479c:	970e      	str	r7, [sp, #56]	; 0x38
 800479e:	9516      	str	r5, [sp, #88]	; 0x58
 80047a0:	f7ff b904 	b.w	80039ac <_svfprintf_r+0x2dc>
 80047a4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80047a6:	4651      	mov	r1, sl
 80047a8:	465a      	mov	r2, fp
 80047aa:	f002 fb03 	bl	8006db4 <__ssprint_r>
 80047ae:	2800      	cmp	r0, #0
 80047b0:	f47f a865 	bne.w	800387e <_svfprintf_r+0x1ae>
 80047b4:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80047b6:	ae1f      	add	r6, sp, #124	; 0x7c
 80047b8:	e4f1      	b.n	800419e <_svfprintf_r+0xace>
 80047ba:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80047bc:	4651      	mov	r1, sl
 80047be:	465a      	mov	r2, fp
 80047c0:	f002 faf8 	bl	8006db4 <__ssprint_r>
 80047c4:	2800      	cmp	r0, #0
 80047c6:	f47f a85a 	bne.w	800387e <_svfprintf_r+0x1ae>
 80047ca:	9b40      	ldr	r3, [sp, #256]	; 0x100
 80047cc:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80047ce:	ae1f      	add	r6, sp, #124	; 0x7c
 80047d0:	e593      	b.n	80042fa <_svfprintf_r+0xc2a>
 80047d2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80047d4:	4651      	mov	r1, sl
 80047d6:	465a      	mov	r2, fp
 80047d8:	f002 faec 	bl	8006db4 <__ssprint_r>
 80047dc:	2800      	cmp	r0, #0
 80047de:	f47f a84e 	bne.w	800387e <_svfprintf_r+0x1ae>
 80047e2:	9b40      	ldr	r3, [sp, #256]	; 0x100
 80047e4:	9910      	ldr	r1, [sp, #64]	; 0x40
 80047e6:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80047e8:	1acb      	subs	r3, r1, r3
 80047ea:	ae1f      	add	r6, sp, #124	; 0x7c
 80047ec:	e59c      	b.n	8004328 <_svfprintf_r+0xc58>
 80047ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80047f0:	ebc3 030b 	rsb	r3, r3, fp
 80047f4:	930d      	str	r3, [sp, #52]	; 0x34
 80047f6:	f7ff b8cf 	b.w	8003998 <_svfprintf_r+0x2c8>
 80047fa:	46a0      	mov	r8, r4
 80047fc:	461c      	mov	r4, r3
 80047fe:	3401      	adds	r4, #1
 8004800:	19ed      	adds	r5, r5, r7
 8004802:	2c07      	cmp	r4, #7
 8004804:	f8c6 8000 	str.w	r8, [r6]
 8004808:	6077      	str	r7, [r6, #4]
 800480a:	953b      	str	r5, [sp, #236]	; 0xec
 800480c:	943a      	str	r4, [sp, #232]	; 0xe8
 800480e:	dca4      	bgt.n	800475a <_svfprintf_r+0x108a>
 8004810:	3608      	adds	r6, #8
 8004812:	e7ad      	b.n	8004770 <_svfprintf_r+0x10a0>
 8004814:	2c06      	cmp	r4, #6
 8004816:	bf28      	it	cs
 8004818:	2406      	movcs	r4, #6
 800481a:	495f      	ldr	r1, [pc, #380]	; (8004998 <_svfprintf_r+0x12c8>)
 800481c:	940d      	str	r4, [sp, #52]	; 0x34
 800481e:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
 8004822:	900a      	str	r0, [sp, #40]	; 0x28
 8004824:	970e      	str	r7, [sp, #56]	; 0x38
 8004826:	9111      	str	r1, [sp, #68]	; 0x44
 8004828:	f7ff ba01 	b.w	8003c2e <_svfprintf_r+0x55e>
 800482c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800482e:	2b65      	cmp	r3, #101	; 0x65
 8004830:	dd6f      	ble.n	8004912 <_svfprintf_r+0x1242>
 8004832:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004834:	9940      	ldr	r1, [sp, #256]	; 0x100
 8004836:	2a00      	cmp	r2, #0
 8004838:	d15e      	bne.n	80048f8 <_svfprintf_r+0x1228>
 800483a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800483c:	428a      	cmp	r2, r1
 800483e:	dc3d      	bgt.n	80048bc <_svfprintf_r+0x11ec>
 8004840:	9b08      	ldr	r3, [sp, #32]
 8004842:	07da      	lsls	r2, r3, #31
 8004844:	d56c      	bpl.n	8004920 <_svfprintf_r+0x1250>
 8004846:	1c4b      	adds	r3, r1, #1
 8004848:	ea23 70e3 	bic.w	r0, r3, r3, asr #31
 800484c:	2267      	movs	r2, #103	; 0x67
 800484e:	930d      	str	r3, [sp, #52]	; 0x34
 8004850:	900a      	str	r0, [sp, #40]	; 0x28
 8004852:	9215      	str	r2, [sp, #84]	; 0x54
 8004854:	9116      	str	r1, [sp, #88]	; 0x58
 8004856:	e74d      	b.n	80046f4 <_svfprintf_r+0x1024>
 8004858:	9b42      	ldr	r3, [sp, #264]	; 0x108
 800485a:	429f      	cmp	r7, r3
 800485c:	bf98      	it	ls
 800485e:	461f      	movls	r7, r3
 8004860:	f67f aee4 	bls.w	800462c <_svfprintf_r+0xf5c>
 8004864:	2230      	movs	r2, #48	; 0x30
 8004866:	f803 2b01 	strb.w	r2, [r3], #1
 800486a:	42bb      	cmp	r3, r7
 800486c:	9342      	str	r3, [sp, #264]	; 0x108
 800486e:	d1fa      	bne.n	8004866 <_svfprintf_r+0x1196>
 8004870:	e6dc      	b.n	800462c <_svfprintf_r+0xf5c>
 8004872:	ea24 72e4 	bic.w	r2, r4, r4, asr #31
 8004876:	9012      	str	r0, [sp, #72]	; 0x48
 8004878:	920a      	str	r2, [sp, #40]	; 0x28
 800487a:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 800487e:	970e      	str	r7, [sp, #56]	; 0x38
 8004880:	940d      	str	r4, [sp, #52]	; 0x34
 8004882:	9016      	str	r0, [sp, #88]	; 0x58
 8004884:	f7ff b892 	b.w	80039ac <_svfprintf_r+0x2dc>
 8004888:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800488a:	4651      	mov	r1, sl
 800488c:	465a      	mov	r2, fp
 800488e:	f002 fa91 	bl	8006db4 <__ssprint_r>
 8004892:	2800      	cmp	r0, #0
 8004894:	f47e aff3 	bne.w	800387e <_svfprintf_r+0x1ae>
 8004898:	9f40      	ldr	r7, [sp, #256]	; 0x100
 800489a:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 800489c:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 800489e:	ae1f      	add	r6, sp, #124	; 0x7c
 80048a0:	e621      	b.n	80044e6 <_svfprintf_r+0xe16>
 80048a2:	212d      	movs	r1, #45	; 0x2d
 80048a4:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 80048a8:	9112      	str	r1, [sp, #72]	; 0x48
 80048aa:	e673      	b.n	8004594 <_svfprintf_r+0xec4>
 80048ac:	3130      	adds	r1, #48	; 0x30
 80048ae:	2330      	movs	r3, #48	; 0x30
 80048b0:	f88d 10f3 	strb.w	r1, [sp, #243]	; 0xf3
 80048b4:	f88d 30f2 	strb.w	r3, [sp, #242]	; 0xf2
 80048b8:	a93d      	add	r1, sp, #244	; 0xf4
 80048ba:	e70a      	b.n	80046d2 <_svfprintf_r+0x1002>
 80048bc:	2900      	cmp	r1, #0
 80048be:	9810      	ldr	r0, [sp, #64]	; 0x40
 80048c0:	bfd4      	ite	le
 80048c2:	f1c1 0302 	rsble	r3, r1, #2
 80048c6:	2301      	movgt	r3, #1
 80048c8:	181b      	adds	r3, r3, r0
 80048ca:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 80048ce:	930d      	str	r3, [sp, #52]	; 0x34
 80048d0:	2367      	movs	r3, #103	; 0x67
 80048d2:	920a      	str	r2, [sp, #40]	; 0x28
 80048d4:	9315      	str	r3, [sp, #84]	; 0x54
 80048d6:	e7bd      	b.n	8004854 <_svfprintf_r+0x1184>
 80048d8:	2401      	movs	r4, #1
 80048da:	940a      	str	r4, [sp, #40]	; 0x28
 80048dc:	e651      	b.n	8004582 <_svfprintf_r+0xeb2>
 80048de:	4640      	mov	r0, r8
 80048e0:	4629      	mov	r1, r5
 80048e2:	2200      	movs	r2, #0
 80048e4:	2300      	movs	r3, #0
 80048e6:	f003 fe23 	bl	8008530 <__aeabi_dcmpeq>
 80048ea:	2800      	cmp	r0, #0
 80048ec:	f47f ae92 	bne.w	8004614 <_svfprintf_r+0xf44>
 80048f0:	f1c9 0301 	rsb	r3, r9, #1
 80048f4:	9340      	str	r3, [sp, #256]	; 0x100
 80048f6:	e68e      	b.n	8004616 <_svfprintf_r+0xf46>
 80048f8:	2900      	cmp	r1, #0
 80048fa:	dd38      	ble.n	800496e <_svfprintf_r+0x129e>
 80048fc:	bb74      	cbnz	r4, 800495c <_svfprintf_r+0x128c>
 80048fe:	9b08      	ldr	r3, [sp, #32]
 8004900:	07dd      	lsls	r5, r3, #31
 8004902:	d42b      	bmi.n	800495c <_svfprintf_r+0x128c>
 8004904:	ea21 70e1 	bic.w	r0, r1, r1, asr #31
 8004908:	2266      	movs	r2, #102	; 0x66
 800490a:	900a      	str	r0, [sp, #40]	; 0x28
 800490c:	910d      	str	r1, [sp, #52]	; 0x34
 800490e:	9215      	str	r2, [sp, #84]	; 0x54
 8004910:	e7a0      	b.n	8004854 <_svfprintf_r+0x1184>
 8004912:	9940      	ldr	r1, [sp, #256]	; 0x100
 8004914:	e69a      	b.n	800464c <_svfprintf_r+0xf7c>
 8004916:	232d      	movs	r3, #45	; 0x2d
 8004918:	4249      	negs	r1, r1
 800491a:	f88d 30f1 	strb.w	r3, [sp, #241]	; 0xf1
 800491e:	e6a0      	b.n	8004662 <_svfprintf_r+0xf92>
 8004920:	ea21 70e1 	bic.w	r0, r1, r1, asr #31
 8004924:	2267      	movs	r2, #103	; 0x67
 8004926:	900a      	str	r0, [sp, #40]	; 0x28
 8004928:	910d      	str	r1, [sp, #52]	; 0x34
 800492a:	9215      	str	r2, [sp, #84]	; 0x54
 800492c:	e792      	b.n	8004854 <_svfprintf_r+0x1184>
 800492e:	9908      	ldr	r1, [sp, #32]
 8004930:	f011 0301 	ands.w	r3, r1, #1
 8004934:	f47f aed6 	bne.w	80046e4 <_svfprintf_r+0x1014>
 8004938:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800493a:	9316      	str	r3, [sp, #88]	; 0x58
 800493c:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8004940:	920a      	str	r2, [sp, #40]	; 0x28
 8004942:	e6d7      	b.n	80046f4 <_svfprintf_r+0x1024>
 8004944:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004946:	680c      	ldr	r4, [r1, #0]
 8004948:	1d0b      	adds	r3, r1, #4
 800494a:	2c00      	cmp	r4, #0
 800494c:	bfbc      	itt	lt
 800494e:	930e      	strlt	r3, [sp, #56]	; 0x38
 8004950:	f04f 34ff 	movlt.w	r4, #4294967295	; 0xffffffff
 8004954:	f6bf a985 	bge.w	8003c62 <_svfprintf_r+0x592>
 8004958:	f7fe bf18 	b.w	800378c <_svfprintf_r+0xbc>
 800495c:	3401      	adds	r4, #1
 800495e:	190c      	adds	r4, r1, r4
 8004960:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
 8004964:	2066      	movs	r0, #102	; 0x66
 8004966:	940d      	str	r4, [sp, #52]	; 0x34
 8004968:	930a      	str	r3, [sp, #40]	; 0x28
 800496a:	9015      	str	r0, [sp, #84]	; 0x54
 800496c:	e772      	b.n	8004854 <_svfprintf_r+0x1184>
 800496e:	b914      	cbnz	r4, 8004976 <_svfprintf_r+0x12a6>
 8004970:	9a08      	ldr	r2, [sp, #32]
 8004972:	07d0      	lsls	r0, r2, #31
 8004974:	d509      	bpl.n	800498a <_svfprintf_r+0x12ba>
 8004976:	3402      	adds	r4, #2
 8004978:	e7f2      	b.n	8004960 <_svfprintf_r+0x1290>
 800497a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800497c:	230c      	movs	r3, #12
 800497e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004982:	600b      	str	r3, [r1, #0]
 8004984:	920c      	str	r2, [sp, #48]	; 0x30
 8004986:	f7fe bf83 	b.w	8003890 <_svfprintf_r+0x1c0>
 800498a:	2001      	movs	r0, #1
 800498c:	2266      	movs	r2, #102	; 0x66
 800498e:	900a      	str	r0, [sp, #40]	; 0x28
 8004990:	9215      	str	r2, [sp, #84]	; 0x54
 8004992:	900d      	str	r0, [sp, #52]	; 0x34
 8004994:	e75e      	b.n	8004854 <_svfprintf_r+0x1184>
 8004996:	bf00      	nop
 8004998:	08008934 	.word	0x08008934
 800499c:	00000000 	.word	0x00000000

080049a0 <quorem>:
 80049a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049a4:	6903      	ldr	r3, [r0, #16]
 80049a6:	690d      	ldr	r5, [r1, #16]
 80049a8:	429d      	cmp	r5, r3
 80049aa:	4681      	mov	r9, r0
 80049ac:	f300 8084 	bgt.w	8004ab8 <quorem+0x118>
 80049b0:	1ceb      	adds	r3, r5, #3
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	18cf      	adds	r7, r1, r3
 80049b6:	18c3      	adds	r3, r0, r3
 80049b8:	687e      	ldr	r6, [r7, #4]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	3601      	adds	r6, #1
 80049be:	fbb3 f6f6 	udiv	r6, r3, r6
 80049c2:	f101 0414 	add.w	r4, r1, #20
 80049c6:	3d01      	subs	r5, #1
 80049c8:	3704      	adds	r7, #4
 80049ca:	f100 0814 	add.w	r8, r0, #20
 80049ce:	2e00      	cmp	r6, #0
 80049d0:	d03c      	beq.n	8004a4c <quorem+0xac>
 80049d2:	f04f 0e00 	mov.w	lr, #0
 80049d6:	4642      	mov	r2, r8
 80049d8:	4623      	mov	r3, r4
 80049da:	46f4      	mov	ip, lr
 80049dc:	f853 bb04 	ldr.w	fp, [r3], #4
 80049e0:	6810      	ldr	r0, [r2, #0]
 80049e2:	fa1f fa8b 	uxth.w	sl, fp
 80049e6:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
 80049ea:	fb06 ea0a 	mla	sl, r6, sl, lr
 80049ee:	fb06 fe0b 	mul.w	lr, r6, fp
 80049f2:	eb0e 4e1a 	add.w	lr, lr, sl, lsr #16
 80049f6:	fa1c fc80 	uxtah	ip, ip, r0
 80049fa:	fa1f fb8e 	uxth.w	fp, lr
 80049fe:	fa1f fa8a 	uxth.w	sl, sl
 8004a02:	ebca 0c0c 	rsb	ip, sl, ip
 8004a06:	ebcb 4010 	rsb	r0, fp, r0, lsr #16
 8004a0a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8004a0e:	fa1f fc8c 	uxth.w	ip, ip
 8004a12:	ea4c 4c00 	orr.w	ip, ip, r0, lsl #16
 8004a16:	429f      	cmp	r7, r3
 8004a18:	f842 cb04 	str.w	ip, [r2], #4
 8004a1c:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8004a20:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004a24:	d2da      	bcs.n	80049dc <quorem+0x3c>
 8004a26:	1d2a      	adds	r2, r5, #4
 8004a28:	eb09 0382 	add.w	r3, r9, r2, lsl #2
 8004a2c:	6858      	ldr	r0, [r3, #4]
 8004a2e:	b968      	cbnz	r0, 8004a4c <quorem+0xac>
 8004a30:	4598      	cmp	r8, r3
 8004a32:	d209      	bcs.n	8004a48 <quorem+0xa8>
 8004a34:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 8004a38:	b112      	cbz	r2, 8004a40 <quorem+0xa0>
 8004a3a:	e005      	b.n	8004a48 <quorem+0xa8>
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	b91a      	cbnz	r2, 8004a48 <quorem+0xa8>
 8004a40:	3b04      	subs	r3, #4
 8004a42:	3d01      	subs	r5, #1
 8004a44:	4598      	cmp	r8, r3
 8004a46:	d3f9      	bcc.n	8004a3c <quorem+0x9c>
 8004a48:	f8c9 5010 	str.w	r5, [r9, #16]
 8004a4c:	4648      	mov	r0, r9
 8004a4e:	f001 fe4f 	bl	80066f0 <__mcmp>
 8004a52:	2800      	cmp	r0, #0
 8004a54:	db2d      	blt.n	8004ab2 <quorem+0x112>
 8004a56:	3601      	adds	r6, #1
 8004a58:	4643      	mov	r3, r8
 8004a5a:	f04f 0c00 	mov.w	ip, #0
 8004a5e:	f854 2b04 	ldr.w	r2, [r4], #4
 8004a62:	6818      	ldr	r0, [r3, #0]
 8004a64:	b291      	uxth	r1, r2
 8004a66:	fa1f fa80 	uxth.w	sl, r0
 8004a6a:	0c12      	lsrs	r2, r2, #16
 8004a6c:	ebc1 010a 	rsb	r1, r1, sl
 8004a70:	4461      	add	r1, ip
 8004a72:	ebc2 4210 	rsb	r2, r2, r0, lsr #16
 8004a76:	eb02 4221 	add.w	r2, r2, r1, asr #16
 8004a7a:	b289      	uxth	r1, r1
 8004a7c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004a80:	42a7      	cmp	r7, r4
 8004a82:	f843 1b04 	str.w	r1, [r3], #4
 8004a86:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004a8a:	d2e8      	bcs.n	8004a5e <quorem+0xbe>
 8004a8c:	1d2a      	adds	r2, r5, #4
 8004a8e:	eb09 0382 	add.w	r3, r9, r2, lsl #2
 8004a92:	6859      	ldr	r1, [r3, #4]
 8004a94:	b969      	cbnz	r1, 8004ab2 <quorem+0x112>
 8004a96:	4598      	cmp	r8, r3
 8004a98:	d209      	bcs.n	8004aae <quorem+0x10e>
 8004a9a:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 8004a9e:	b112      	cbz	r2, 8004aa6 <quorem+0x106>
 8004aa0:	e005      	b.n	8004aae <quorem+0x10e>
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	b91a      	cbnz	r2, 8004aae <quorem+0x10e>
 8004aa6:	3b04      	subs	r3, #4
 8004aa8:	3d01      	subs	r5, #1
 8004aaa:	4598      	cmp	r8, r3
 8004aac:	d3f9      	bcc.n	8004aa2 <quorem+0x102>
 8004aae:	f8c9 5010 	str.w	r5, [r9, #16]
 8004ab2:	4630      	mov	r0, r6
 8004ab4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ab8:	2000      	movs	r0, #0
 8004aba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004abe:	bf00      	nop

08004ac0 <_dtoa_r>:
 8004ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ac4:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004ac6:	b09d      	sub	sp, #116	; 0x74
 8004ac8:	4607      	mov	r7, r0
 8004aca:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8004acc:	4692      	mov	sl, r2
 8004ace:	469b      	mov	fp, r3
 8004ad0:	b141      	cbz	r1, 8004ae4 <_dtoa_r+0x24>
 8004ad2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	409a      	lsls	r2, r3
 8004ad8:	604b      	str	r3, [r1, #4]
 8004ada:	608a      	str	r2, [r1, #8]
 8004adc:	f001 fbd4 	bl	8006288 <_Bfree>
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	643b      	str	r3, [r7, #64]	; 0x40
 8004ae4:	f1bb 0500 	subs.w	r5, fp, #0
 8004ae8:	f2c0 80df 	blt.w	8004caa <_dtoa_r+0x1ea>
 8004aec:	2300      	movs	r3, #0
 8004aee:	6023      	str	r3, [r4, #0]
 8004af0:	2300      	movs	r3, #0
 8004af2:	461a      	mov	r2, r3
 8004af4:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 8004af8:	f6c7 72f0 	movt	r2, #32752	; 0x7ff0
 8004afc:	402b      	ands	r3, r5
 8004afe:	4293      	cmp	r3, r2
 8004b00:	f000 80be 	beq.w	8004c80 <_dtoa_r+0x1c0>
 8004b04:	4650      	mov	r0, sl
 8004b06:	4659      	mov	r1, fp
 8004b08:	2200      	movs	r2, #0
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	46d0      	mov	r8, sl
 8004b0e:	46d9      	mov	r9, fp
 8004b10:	2401      	movs	r4, #1
 8004b12:	f003 fd0d 	bl	8008530 <__aeabi_dcmpeq>
 8004b16:	b978      	cbnz	r0, 8004b38 <_dtoa_r+0x78>
 8004b18:	f014 0fff 	tst.w	r4, #255	; 0xff
 8004b1c:	d110      	bne.n	8004b40 <_dtoa_r+0x80>
 8004b1e:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8004b20:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8004b22:	2301      	movs	r3, #1
 8004b24:	602b      	str	r3, [r5, #0]
 8004b26:	4d78      	ldr	r5, [pc, #480]	; (8004d08 <_dtoa_r+0x248>)
 8004b28:	b114      	cbz	r4, 8004b30 <_dtoa_r+0x70>
 8004b2a:	4d78      	ldr	r5, [pc, #480]	; (8004d0c <_dtoa_r+0x24c>)
 8004b2c:	6025      	str	r5, [r4, #0]
 8004b2e:	3d01      	subs	r5, #1
 8004b30:	4628      	mov	r0, r5
 8004b32:	b01d      	add	sp, #116	; 0x74
 8004b34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b38:	2400      	movs	r4, #0
 8004b3a:	f014 0fff 	tst.w	r4, #255	; 0xff
 8004b3e:	d0ee      	beq.n	8004b1e <_dtoa_r+0x5e>
 8004b40:	a91b      	add	r1, sp, #108	; 0x6c
 8004b42:	9100      	str	r1, [sp, #0]
 8004b44:	4638      	mov	r0, r7
 8004b46:	a91a      	add	r1, sp, #104	; 0x68
 8004b48:	4642      	mov	r2, r8
 8004b4a:	464b      	mov	r3, r9
 8004b4c:	9101      	str	r1, [sp, #4]
 8004b4e:	f001 fed1 	bl	80068f4 <__d2b>
 8004b52:	f3c5 540a 	ubfx	r4, r5, #20, #11
 8004b56:	900a      	str	r0, [sp, #40]	; 0x28
 8004b58:	2c00      	cmp	r4, #0
 8004b5a:	f040 80b5 	bne.w	8004cc8 <_dtoa_r+0x208>
 8004b5e:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8004b60:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8004b62:	f46f 6382 	mvn.w	r3, #1040	; 0x410
 8004b66:	1934      	adds	r4, r6, r4
 8004b68:	429c      	cmp	r4, r3
 8004b6a:	f2c0 8281 	blt.w	8005070 <_dtoa_r+0x5b0>
 8004b6e:	f64f 430e 	movw	r3, #64526	; 0xfc0e
 8004b72:	f6cf 73ff 	movt	r3, #65535	; 0xffff
 8004b76:	1b1b      	subs	r3, r3, r4
 8004b78:	f204 4212 	addw	r2, r4, #1042	; 0x412
 8004b7c:	fa15 f303 	lsls.w	r3, r5, r3
 8004b80:	fa2a f002 	lsr.w	r0, sl, r2
 8004b84:	4318      	orrs	r0, r3
 8004b86:	f003 f9f5 	bl	8007f74 <__aeabi_ui2d>
 8004b8a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004b8e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004b90:	2501      	movs	r5, #1
 8004b92:	f1a0 70f8 	sub.w	r0, r0, #32505856	; 0x1f00000
 8004b96:	900d      	str	r0, [sp, #52]	; 0x34
 8004b98:	3c01      	subs	r4, #1
 8004b9a:	9516      	str	r5, [sp, #88]	; 0x58
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f6c3 73f8 	movt	r3, #16376	; 0x3ff8
 8004ba4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004ba8:	f003 f8a6 	bl	8007cf8 <__aeabi_dsub>
 8004bac:	a350      	add	r3, pc, #320	; (adr r3, 8004cf0 <_dtoa_r+0x230>)
 8004bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bb2:	f003 fa55 	bl	8008060 <__aeabi_dmul>
 8004bb6:	a350      	add	r3, pc, #320	; (adr r3, 8004cf8 <_dtoa_r+0x238>)
 8004bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bbc:	f003 f89e 	bl	8007cfc <__adddf3>
 8004bc0:	4680      	mov	r8, r0
 8004bc2:	4620      	mov	r0, r4
 8004bc4:	4689      	mov	r9, r1
 8004bc6:	f003 f9e5 	bl	8007f94 <__aeabi_i2d>
 8004bca:	a34d      	add	r3, pc, #308	; (adr r3, 8004d00 <_dtoa_r+0x240>)
 8004bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bd0:	f003 fa46 	bl	8008060 <__aeabi_dmul>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	460b      	mov	r3, r1
 8004bd8:	4640      	mov	r0, r8
 8004bda:	4649      	mov	r1, r9
 8004bdc:	f003 f88e 	bl	8007cfc <__adddf3>
 8004be0:	4680      	mov	r8, r0
 8004be2:	4689      	mov	r9, r1
 8004be4:	f003 fcd6 	bl	8008594 <__aeabi_d2iz>
 8004be8:	4649      	mov	r1, r9
 8004bea:	9005      	str	r0, [sp, #20]
 8004bec:	2200      	movs	r2, #0
 8004bee:	4640      	mov	r0, r8
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	f003 fca7 	bl	8008544 <__aeabi_dcmplt>
 8004bf6:	b150      	cbz	r0, 8004c0e <_dtoa_r+0x14e>
 8004bf8:	9805      	ldr	r0, [sp, #20]
 8004bfa:	f003 f9cb 	bl	8007f94 <__aeabi_i2d>
 8004bfe:	4642      	mov	r2, r8
 8004c00:	464b      	mov	r3, r9
 8004c02:	f003 fc95 	bl	8008530 <__aeabi_dcmpeq>
 8004c06:	b910      	cbnz	r0, 8004c0e <_dtoa_r+0x14e>
 8004c08:	9d05      	ldr	r5, [sp, #20]
 8004c0a:	3d01      	subs	r5, #1
 8004c0c:	9505      	str	r5, [sp, #20]
 8004c0e:	9d05      	ldr	r5, [sp, #20]
 8004c10:	2d16      	cmp	r5, #22
 8004c12:	f200 815e 	bhi.w	8004ed2 <_dtoa_r+0x412>
 8004c16:	4b3e      	ldr	r3, [pc, #248]	; (8004d10 <_dtoa_r+0x250>)
 8004c18:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8004c1c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004c20:	4652      	mov	r2, sl
 8004c22:	465b      	mov	r3, fp
 8004c24:	f003 fcac 	bl	8008580 <__aeabi_dcmpgt>
 8004c28:	2800      	cmp	r0, #0
 8004c2a:	f000 8229 	beq.w	8005080 <_dtoa_r+0x5c0>
 8004c2e:	9d05      	ldr	r5, [sp, #20]
 8004c30:	3d01      	subs	r5, #1
 8004c32:	9505      	str	r5, [sp, #20]
 8004c34:	2500      	movs	r5, #0
 8004c36:	9514      	str	r5, [sp, #80]	; 0x50
 8004c38:	1b34      	subs	r4, r6, r4
 8004c3a:	3c01      	subs	r4, #1
 8004c3c:	f100 8213 	bmi.w	8005066 <_dtoa_r+0x5a6>
 8004c40:	2500      	movs	r5, #0
 8004c42:	940b      	str	r4, [sp, #44]	; 0x2c
 8004c44:	950f      	str	r5, [sp, #60]	; 0x3c
 8004c46:	9c05      	ldr	r4, [sp, #20]
 8004c48:	2c00      	cmp	r4, #0
 8004c4a:	f2c0 8203 	blt.w	8005054 <_dtoa_r+0x594>
 8004c4e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8004c50:	9413      	str	r4, [sp, #76]	; 0x4c
 8004c52:	192d      	adds	r5, r5, r4
 8004c54:	2400      	movs	r4, #0
 8004c56:	950b      	str	r5, [sp, #44]	; 0x2c
 8004c58:	9410      	str	r4, [sp, #64]	; 0x40
 8004c5a:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8004c5c:	2d09      	cmp	r5, #9
 8004c5e:	d85d      	bhi.n	8004d1c <_dtoa_r+0x25c>
 8004c60:	2401      	movs	r4, #1
 8004c62:	2d05      	cmp	r5, #5
 8004c64:	dd02      	ble.n	8004c6c <_dtoa_r+0x1ac>
 8004c66:	3d04      	subs	r5, #4
 8004c68:	9526      	str	r5, [sp, #152]	; 0x98
 8004c6a:	2400      	movs	r4, #0
 8004c6c:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8004c6e:	1eab      	subs	r3, r5, #2
 8004c70:	2b03      	cmp	r3, #3
 8004c72:	d855      	bhi.n	8004d20 <_dtoa_r+0x260>
 8004c74:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004c78:	036d0382 	.word	0x036d0382
 8004c7c:	03850246 	.word	0x03850246
 8004c80:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 8004c82:	f242 730f 	movw	r3, #9999	; 0x270f
 8004c86:	6023      	str	r3, [r4, #0]
 8004c88:	f1ba 0f00 	cmp.w	sl, #0
 8004c8c:	d013      	beq.n	8004cb6 <_dtoa_r+0x1f6>
 8004c8e:	4d21      	ldr	r5, [pc, #132]	; (8004d14 <_dtoa_r+0x254>)
 8004c90:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8004c92:	2c00      	cmp	r4, #0
 8004c94:	f43f af4c 	beq.w	8004b30 <_dtoa_r+0x70>
 8004c98:	78eb      	ldrb	r3, [r5, #3]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	f000 8117 	beq.w	8004ece <_dtoa_r+0x40e>
 8004ca0:	f105 0308 	add.w	r3, r5, #8
 8004ca4:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8004ca6:	6023      	str	r3, [r4, #0]
 8004ca8:	e742      	b.n	8004b30 <_dtoa_r+0x70>
 8004caa:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
 8004cae:	2301      	movs	r3, #1
 8004cb0:	6023      	str	r3, [r4, #0]
 8004cb2:	46ab      	mov	fp, r5
 8004cb4:	e71c      	b.n	8004af0 <_dtoa_r+0x30>
 8004cb6:	4b17      	ldr	r3, [pc, #92]	; (8004d14 <_dtoa_r+0x254>)
 8004cb8:	4a17      	ldr	r2, [pc, #92]	; (8004d18 <_dtoa_r+0x258>)
 8004cba:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8004cbe:	2d00      	cmp	r5, #0
 8004cc0:	bf0c      	ite	eq
 8004cc2:	4615      	moveq	r5, r2
 8004cc4:	461d      	movne	r5, r3
 8004cc6:	e7e3      	b.n	8004c90 <_dtoa_r+0x1d0>
 8004cc8:	4649      	mov	r1, r9
 8004cca:	4640      	mov	r0, r8
 8004ccc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004cd0:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004cd2:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8004cd4:	f021 437f 	bic.w	r3, r1, #4278190080	; 0xff000000
 8004cd8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004cdc:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8004ce0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004ce4:	2500      	movs	r5, #0
 8004ce6:	930d      	str	r3, [sp, #52]	; 0x34
 8004ce8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004cec:	9516      	str	r5, [sp, #88]	; 0x58
 8004cee:	e755      	b.n	8004b9c <_dtoa_r+0xdc>
 8004cf0:	636f4361 	.word	0x636f4361
 8004cf4:	3fd287a7 	.word	0x3fd287a7
 8004cf8:	8b60c8b3 	.word	0x8b60c8b3
 8004cfc:	3fc68a28 	.word	0x3fc68a28
 8004d00:	509f79fb 	.word	0x509f79fb
 8004d04:	3fd34413 	.word	0x3fd34413
 8004d08:	0800893c 	.word	0x0800893c
 8004d0c:	0800893d 	.word	0x0800893d
 8004d10:	08008750 	.word	0x08008750
 8004d14:	0800894c 	.word	0x0800894c
 8004d18:	08008940 	.word	0x08008940
 8004d1c:	2400      	movs	r4, #0
 8004d1e:	9426      	str	r4, [sp, #152]	; 0x98
 8004d20:	2400      	movs	r4, #0
 8004d22:	647c      	str	r4, [r7, #68]	; 0x44
 8004d24:	4638      	mov	r0, r7
 8004d26:	4621      	mov	r1, r4
 8004d28:	f001 fa88 	bl	800623c <_Balloc>
 8004d2c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004d30:	950e      	str	r5, [sp, #56]	; 0x38
 8004d32:	2501      	movs	r5, #1
 8004d34:	9512      	str	r5, [sp, #72]	; 0x48
 8004d36:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004d3a:	9009      	str	r0, [sp, #36]	; 0x24
 8004d3c:	6438      	str	r0, [r7, #64]	; 0x40
 8004d3e:	9515      	str	r5, [sp, #84]	; 0x54
 8004d40:	9427      	str	r4, [sp, #156]	; 0x9c
 8004d42:	9c05      	ldr	r4, [sp, #20]
 8004d44:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004d46:	2c0e      	cmp	r4, #14
 8004d48:	bfcc      	ite	gt
 8004d4a:	2500      	movgt	r5, #0
 8004d4c:	2501      	movle	r5, #1
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	bfb8      	it	lt
 8004d52:	2500      	movlt	r5, #0
 8004d54:	2d00      	cmp	r5, #0
 8004d56:	f000 80c1 	beq.w	8004edc <_dtoa_r+0x41c>
 8004d5a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8004d5c:	4b5e      	ldr	r3, [pc, #376]	; (8004ed8 <_dtoa_r+0x418>)
 8004d5e:	0fe5      	lsrs	r5, r4, #31
 8004d60:	9c05      	ldr	r4, [sp, #20]
 8004d62:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004d66:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004d6a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8004d6c:	2c00      	cmp	r4, #0
 8004d6e:	bfcc      	ite	gt
 8004d70:	2500      	movgt	r5, #0
 8004d72:	f005 0501 	andle.w	r5, r5, #1
 8004d76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004d7a:	2d00      	cmp	r5, #0
 8004d7c:	f040 81a8 	bne.w	80050d0 <_dtoa_r+0x610>
 8004d80:	4602      	mov	r2, r0
 8004d82:	460b      	mov	r3, r1
 8004d84:	4650      	mov	r0, sl
 8004d86:	4659      	mov	r1, fp
 8004d88:	f003 fa94 	bl	80082b4 <__aeabi_ddiv>
 8004d8c:	f003 fc02 	bl	8008594 <__aeabi_d2iz>
 8004d90:	4606      	mov	r6, r0
 8004d92:	f003 f8ff 	bl	8007f94 <__aeabi_i2d>
 8004d96:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004d9a:	f003 f961 	bl	8008060 <__aeabi_dmul>
 8004d9e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8004da0:	460b      	mov	r3, r1
 8004da2:	4602      	mov	r2, r0
 8004da4:	4659      	mov	r1, fp
 8004da6:	4650      	mov	r0, sl
 8004da8:	f002 ffa6 	bl	8007cf8 <__aeabi_dsub>
 8004dac:	f106 0330 	add.w	r3, r6, #48	; 0x30
 8004db0:	f804 3b01 	strb.w	r3, [r4], #1
 8004db4:	9411      	str	r4, [sp, #68]	; 0x44
 8004db6:	46a0      	mov	r8, r4
 8004db8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8004dba:	2c01      	cmp	r4, #1
 8004dbc:	4682      	mov	sl, r0
 8004dbe:	468b      	mov	fp, r1
 8004dc0:	d04c      	beq.n	8004e5c <_dtoa_r+0x39c>
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8004dca:	f003 f949 	bl	8008060 <__aeabi_dmul>
 8004dce:	2200      	movs	r2, #0
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	4682      	mov	sl, r0
 8004dd4:	468b      	mov	fp, r1
 8004dd6:	2401      	movs	r4, #1
 8004dd8:	f003 fbaa 	bl	8008530 <__aeabi_dcmpeq>
 8004ddc:	b100      	cbz	r0, 8004de0 <_dtoa_r+0x320>
 8004dde:	462c      	mov	r4, r5
 8004de0:	f014 0fff 	tst.w	r4, #255	; 0xff
 8004de4:	f000 8575 	beq.w	80058d2 <_dtoa_r+0xe12>
 8004de8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8004dea:	980e      	ldr	r0, [sp, #56]	; 0x38
 8004dec:	1ca5      	adds	r5, r4, #2
 8004dee:	eb04 0900 	add.w	r9, r4, r0
 8004df2:	e00d      	b.n	8004e10 <_dtoa_r+0x350>
 8004df4:	f003 f934 	bl	8008060 <__aeabi_dmul>
 8004df8:	2200      	movs	r2, #0
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	4682      	mov	sl, r0
 8004dfe:	468b      	mov	fp, r1
 8004e00:	f003 fb96 	bl	8008530 <__aeabi_dcmpeq>
 8004e04:	b100      	cbz	r0, 8004e08 <_dtoa_r+0x348>
 8004e06:	2400      	movs	r4, #0
 8004e08:	f014 0fff 	tst.w	r4, #255	; 0xff
 8004e0c:	f000 8423 	beq.w	8005656 <_dtoa_r+0xb96>
 8004e10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004e14:	4650      	mov	r0, sl
 8004e16:	4659      	mov	r1, fp
 8004e18:	f003 fa4c 	bl	80082b4 <__aeabi_ddiv>
 8004e1c:	f003 fbba 	bl	8008594 <__aeabi_d2iz>
 8004e20:	4606      	mov	r6, r0
 8004e22:	f003 f8b7 	bl	8007f94 <__aeabi_i2d>
 8004e26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004e2a:	f003 f919 	bl	8008060 <__aeabi_dmul>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	460b      	mov	r3, r1
 8004e32:	4650      	mov	r0, sl
 8004e34:	4659      	mov	r1, fp
 8004e36:	f002 ff5f 	bl	8007cf8 <__aeabi_dsub>
 8004e3a:	f106 0430 	add.w	r4, r6, #48	; 0x30
 8004e3e:	2300      	movs	r3, #0
 8004e40:	2200      	movs	r2, #0
 8004e42:	454d      	cmp	r5, r9
 8004e44:	f805 4c01 	strb.w	r4, [r5, #-1]
 8004e48:	46a8      	mov	r8, r5
 8004e4a:	4682      	mov	sl, r0
 8004e4c:	468b      	mov	fp, r1
 8004e4e:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8004e52:	f04f 0401 	mov.w	r4, #1
 8004e56:	f105 0501 	add.w	r5, r5, #1
 8004e5a:	d1cb      	bne.n	8004df4 <_dtoa_r+0x334>
 8004e5c:	4652      	mov	r2, sl
 8004e5e:	465b      	mov	r3, fp
 8004e60:	4650      	mov	r0, sl
 8004e62:	4659      	mov	r1, fp
 8004e64:	f002 ff4a 	bl	8007cfc <__adddf3>
 8004e68:	4604      	mov	r4, r0
 8004e6a:	460d      	mov	r5, r1
 8004e6c:	4622      	mov	r2, r4
 8004e6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e72:	462b      	mov	r3, r5
 8004e74:	f003 fb66 	bl	8008544 <__aeabi_dcmplt>
 8004e78:	b958      	cbnz	r0, 8004e92 <_dtoa_r+0x3d2>
 8004e7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e7e:	4622      	mov	r2, r4
 8004e80:	462b      	mov	r3, r5
 8004e82:	f003 fb55 	bl	8008530 <__aeabi_dcmpeq>
 8004e86:	2800      	cmp	r0, #0
 8004e88:	f000 83e5 	beq.w	8005656 <_dtoa_r+0xb96>
 8004e8c:	07f3      	lsls	r3, r6, #31
 8004e8e:	f140 83e2 	bpl.w	8005656 <_dtoa_r+0xb96>
 8004e92:	9c05      	ldr	r4, [sp, #20]
 8004e94:	f818 6c01 	ldrb.w	r6, [r8, #-1]
 8004e98:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004e9a:	9417      	str	r4, [sp, #92]	; 0x5c
 8004e9c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004e9e:	e003      	b.n	8004ea8 <_dtoa_r+0x3e8>
 8004ea0:	f818 6c02 	ldrb.w	r6, [r8, #-2]
 8004ea4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8004ea8:	2e39      	cmp	r6, #57	; 0x39
 8004eaa:	4643      	mov	r3, r8
 8004eac:	f040 8489 	bne.w	80057c2 <_dtoa_r+0xd02>
 8004eb0:	4590      	cmp	r8, r2
 8004eb2:	d1f5      	bne.n	8004ea0 <_dtoa_r+0x3e0>
 8004eb4:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8004eb6:	9309      	str	r3, [sp, #36]	; 0x24
 8004eb8:	3401      	adds	r4, #1
 8004eba:	9405      	str	r4, [sp, #20]
 8004ebc:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8004ebe:	2330      	movs	r3, #48	; 0x30
 8004ec0:	f804 3c01 	strb.w	r3, [r4, #-1]
 8004ec4:	2231      	movs	r2, #49	; 0x31
 8004ec6:	4623      	mov	r3, r4
 8004ec8:	f803 2c01 	strb.w	r2, [r3, #-1]
 8004ecc:	e0b0      	b.n	8005030 <_dtoa_r+0x570>
 8004ece:	1ceb      	adds	r3, r5, #3
 8004ed0:	e6e8      	b.n	8004ca4 <_dtoa_r+0x1e4>
 8004ed2:	2501      	movs	r5, #1
 8004ed4:	9514      	str	r5, [sp, #80]	; 0x50
 8004ed6:	e6af      	b.n	8004c38 <_dtoa_r+0x178>
 8004ed8:	08008750 	.word	0x08008750
 8004edc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8004ede:	2c00      	cmp	r4, #0
 8004ee0:	f040 80d1 	bne.w	8005086 <_dtoa_r+0x5c6>
 8004ee4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004ee6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004ee8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8004eea:	9306      	str	r3, [sp, #24]
 8004eec:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004eee:	2800      	cmp	r0, #0
 8004ef0:	bfc8      	it	gt
 8004ef2:	2c00      	cmpgt	r4, #0
 8004ef4:	dd09      	ble.n	8004f0a <_dtoa_r+0x44a>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004efa:	42a3      	cmp	r3, r4
 8004efc:	bfa8      	it	ge
 8004efe:	4623      	movge	r3, r4
 8004f00:	1ac9      	subs	r1, r1, r3
 8004f02:	1ac0      	subs	r0, r0, r3
 8004f04:	910f      	str	r1, [sp, #60]	; 0x3c
 8004f06:	1ae4      	subs	r4, r4, r3
 8004f08:	900b      	str	r0, [sp, #44]	; 0x2c
 8004f0a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004f0c:	2a00      	cmp	r2, #0
 8004f0e:	dd1a      	ble.n	8004f46 <_dtoa_r+0x486>
 8004f10:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	f000 841d 	beq.w	8005752 <_dtoa_r+0xc92>
 8004f18:	2d00      	cmp	r5, #0
 8004f1a:	dd10      	ble.n	8004f3e <_dtoa_r+0x47e>
 8004f1c:	9906      	ldr	r1, [sp, #24]
 8004f1e:	462a      	mov	r2, r5
 8004f20:	4638      	mov	r0, r7
 8004f22:	f001 fb39 	bl	8006598 <__pow5mult>
 8004f26:	9006      	str	r0, [sp, #24]
 8004f28:	9906      	ldr	r1, [sp, #24]
 8004f2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004f2c:	4638      	mov	r0, r7
 8004f2e:	f001 fa9b 	bl	8006468 <__multiply>
 8004f32:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004f34:	4606      	mov	r6, r0
 8004f36:	4638      	mov	r0, r7
 8004f38:	f001 f9a6 	bl	8006288 <_Bfree>
 8004f3c:	960a      	str	r6, [sp, #40]	; 0x28
 8004f3e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8004f40:	1b42      	subs	r2, r0, r5
 8004f42:	f040 8429 	bne.w	8005798 <_dtoa_r+0xcd8>
 8004f46:	2101      	movs	r1, #1
 8004f48:	4638      	mov	r0, r7
 8004f4a:	f001 fa83 	bl	8006454 <__i2b>
 8004f4e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8004f50:	2d00      	cmp	r5, #0
 8004f52:	4606      	mov	r6, r0
 8004f54:	dd05      	ble.n	8004f62 <_dtoa_r+0x4a2>
 8004f56:	4631      	mov	r1, r6
 8004f58:	4638      	mov	r0, r7
 8004f5a:	462a      	mov	r2, r5
 8004f5c:	f001 fb1c 	bl	8006598 <__pow5mult>
 8004f60:	4606      	mov	r6, r0
 8004f62:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8004f64:	2d01      	cmp	r5, #1
 8004f66:	f340 820f 	ble.w	8005388 <_dtoa_r+0x8c8>
 8004f6a:	2500      	movs	r5, #0
 8004f6c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8004f6e:	2301      	movs	r3, #1
 8004f70:	2800      	cmp	r0, #0
 8004f72:	f040 838c 	bne.w	800568e <_dtoa_r+0xbce>
 8004f76:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004f78:	185b      	adds	r3, r3, r1
 8004f7a:	f013 031f 	ands.w	r3, r3, #31
 8004f7e:	f000 82cb 	beq.w	8005518 <_dtoa_r+0xa58>
 8004f82:	f1c3 0220 	rsb	r2, r3, #32
 8004f86:	2a04      	cmp	r2, #4
 8004f88:	f340 84bf 	ble.w	800590a <_dtoa_r+0xe4a>
 8004f8c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004f8e:	f1c3 031c 	rsb	r3, r3, #28
 8004f92:	18d2      	adds	r2, r2, r3
 8004f94:	18c9      	adds	r1, r1, r3
 8004f96:	920f      	str	r2, [sp, #60]	; 0x3c
 8004f98:	18e4      	adds	r4, r4, r3
 8004f9a:	910b      	str	r1, [sp, #44]	; 0x2c
 8004f9c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004f9e:	2a00      	cmp	r2, #0
 8004fa0:	dd04      	ble.n	8004fac <_dtoa_r+0x4ec>
 8004fa2:	4638      	mov	r0, r7
 8004fa4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004fa6:	f001 fb43 	bl	8006630 <__lshift>
 8004faa:	900a      	str	r0, [sp, #40]	; 0x28
 8004fac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	dd05      	ble.n	8004fbe <_dtoa_r+0x4fe>
 8004fb2:	4631      	mov	r1, r6
 8004fb4:	4638      	mov	r0, r7
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	f001 fb3a 	bl	8006630 <__lshift>
 8004fbc:	4606      	mov	r6, r0
 8004fbe:	9814      	ldr	r0, [sp, #80]	; 0x50
 8004fc0:	2800      	cmp	r0, #0
 8004fc2:	f040 834c 	bne.w	800565e <_dtoa_r+0xb9e>
 8004fc6:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004fc8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004fca:	2900      	cmp	r1, #0
 8004fcc:	bfcc      	ite	gt
 8004fce:	2300      	movgt	r3, #0
 8004fd0:	2301      	movle	r3, #1
 8004fd2:	2a02      	cmp	r2, #2
 8004fd4:	bfd8      	it	le
 8004fd6:	2300      	movle	r3, #0
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	f000 8226 	beq.w	800542a <_dtoa_r+0x96a>
 8004fde:	2900      	cmp	r1, #0
 8004fe0:	f040 808a 	bne.w	80050f8 <_dtoa_r+0x638>
 8004fe4:	4631      	mov	r1, r6
 8004fe6:	2205      	movs	r2, #5
 8004fe8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004fea:	4638      	mov	r0, r7
 8004fec:	f001 f956 	bl	800629c <__multadd>
 8004ff0:	4606      	mov	r6, r0
 8004ff2:	4631      	mov	r1, r6
 8004ff4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004ff6:	f001 fb7b 	bl	80066f0 <__mcmp>
 8004ffa:	2800      	cmp	r0, #0
 8004ffc:	dd7c      	ble.n	80050f8 <_dtoa_r+0x638>
 8004ffe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005000:	9c05      	ldr	r4, [sp, #20]
 8005002:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005004:	2231      	movs	r2, #49	; 0x31
 8005006:	f803 2b01 	strb.w	r2, [r3], #1
 800500a:	3401      	adds	r4, #1
 800500c:	9405      	str	r4, [sp, #20]
 800500e:	9309      	str	r3, [sp, #36]	; 0x24
 8005010:	2400      	movs	r4, #0
 8005012:	4638      	mov	r0, r7
 8005014:	4631      	mov	r1, r6
 8005016:	f001 f937 	bl	8006288 <_Bfree>
 800501a:	9806      	ldr	r0, [sp, #24]
 800501c:	b140      	cbz	r0, 8005030 <_dtoa_r+0x570>
 800501e:	4284      	cmp	r4, r0
 8005020:	bf18      	it	ne
 8005022:	2c00      	cmpne	r4, #0
 8005024:	f040 8273 	bne.w	800550e <_dtoa_r+0xa4e>
 8005028:	4638      	mov	r0, r7
 800502a:	9906      	ldr	r1, [sp, #24]
 800502c:	f001 f92c 	bl	8006288 <_Bfree>
 8005030:	4638      	mov	r0, r7
 8005032:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005034:	f001 f928 	bl	8006288 <_Bfree>
 8005038:	9c05      	ldr	r4, [sp, #20]
 800503a:	1c63      	adds	r3, r4, #1
 800503c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800503e:	2200      	movs	r2, #0
 8005040:	7022      	strb	r2, [r4, #0]
 8005042:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 8005044:	6023      	str	r3, [r4, #0]
 8005046:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8005048:	2c00      	cmp	r4, #0
 800504a:	f43f ad71 	beq.w	8004b30 <_dtoa_r+0x70>
 800504e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005050:	6020      	str	r0, [r4, #0]
 8005052:	e56d      	b.n	8004b30 <_dtoa_r+0x70>
 8005054:	9c05      	ldr	r4, [sp, #20]
 8005056:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005058:	1b2d      	subs	r5, r5, r4
 800505a:	950f      	str	r5, [sp, #60]	; 0x3c
 800505c:	4265      	negs	r5, r4
 800505e:	2400      	movs	r4, #0
 8005060:	9510      	str	r5, [sp, #64]	; 0x40
 8005062:	9413      	str	r4, [sp, #76]	; 0x4c
 8005064:	e5f9      	b.n	8004c5a <_dtoa_r+0x19a>
 8005066:	4264      	negs	r4, r4
 8005068:	940f      	str	r4, [sp, #60]	; 0x3c
 800506a:	2400      	movs	r4, #0
 800506c:	940b      	str	r4, [sp, #44]	; 0x2c
 800506e:	e5ea      	b.n	8004c46 <_dtoa_r+0x186>
 8005070:	f64f 30ee 	movw	r0, #64494	; 0xfbee
 8005074:	f6cf 70ff 	movt	r0, #65535	; 0xffff
 8005078:	1b00      	subs	r0, r0, r4
 800507a:	fa0a f000 	lsl.w	r0, sl, r0
 800507e:	e582      	b.n	8004b86 <_dtoa_r+0xc6>
 8005080:	2500      	movs	r5, #0
 8005082:	9514      	str	r5, [sp, #80]	; 0x50
 8005084:	e5d8      	b.n	8004c38 <_dtoa_r+0x178>
 8005086:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8005088:	2c01      	cmp	r4, #1
 800508a:	f340 838f 	ble.w	80057ac <_dtoa_r+0xcec>
 800508e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8005090:	1e62      	subs	r2, r4, #1
 8005092:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8005094:	4294      	cmp	r4, r2
 8005096:	bfbf      	itttt	lt
 8005098:	9c10      	ldrlt	r4, [sp, #64]	; 0x40
 800509a:	9210      	strlt	r2, [sp, #64]	; 0x40
 800509c:	ebc4 0302 	rsblt	r3, r4, r2
 80050a0:	9c13      	ldrlt	r4, [sp, #76]	; 0x4c
 80050a2:	bfb6      	itet	lt
 80050a4:	18e4      	addlt	r4, r4, r3
 80050a6:	ebc2 0504 	rsbge	r5, r2, r4
 80050aa:	9413      	strlt	r4, [sp, #76]	; 0x4c
 80050ac:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80050ae:	2c00      	cmp	r4, #0
 80050b0:	f2c0 838f 	blt.w	80057d2 <_dtoa_r+0xd12>
 80050b4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80050b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80050b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80050ba:	18d2      	adds	r2, r2, r3
 80050bc:	920f      	str	r2, [sp, #60]	; 0x3c
 80050be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80050c0:	4638      	mov	r0, r7
 80050c2:	18d2      	adds	r2, r2, r3
 80050c4:	2101      	movs	r1, #1
 80050c6:	920b      	str	r2, [sp, #44]	; 0x2c
 80050c8:	f001 f9c4 	bl	8006454 <__i2b>
 80050cc:	9006      	str	r0, [sp, #24]
 80050ce:	e70d      	b.n	8004eec <_dtoa_r+0x42c>
 80050d0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80050d2:	2d00      	cmp	r5, #0
 80050d4:	f040 8367 	bne.w	80057a6 <_dtoa_r+0xce6>
 80050d8:	2300      	movs	r3, #0
 80050da:	2200      	movs	r2, #0
 80050dc:	f2c4 0314 	movt	r3, #16404	; 0x4014
 80050e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050e4:	f002 ffbc 	bl	8008060 <__aeabi_dmul>
 80050e8:	4652      	mov	r2, sl
 80050ea:	465b      	mov	r3, fp
 80050ec:	f003 fa3e 	bl	800856c <__aeabi_dcmpge>
 80050f0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80050f2:	9606      	str	r6, [sp, #24]
 80050f4:	2800      	cmp	r0, #0
 80050f6:	d082      	beq.n	8004ffe <_dtoa_r+0x53e>
 80050f8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 80050fa:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80050fc:	43e4      	mvns	r4, r4
 80050fe:	9405      	str	r4, [sp, #20]
 8005100:	2400      	movs	r4, #0
 8005102:	e786      	b.n	8005012 <_dtoa_r+0x552>
 8005104:	2501      	movs	r5, #1
 8005106:	9512      	str	r5, [sp, #72]	; 0x48
 8005108:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 800510a:	2d00      	cmp	r5, #0
 800510c:	f340 82d3 	ble.w	80056b6 <_dtoa_r+0xbf6>
 8005110:	46a9      	mov	r9, r5
 8005112:	2d0e      	cmp	r5, #14
 8005114:	bf8c      	ite	hi
 8005116:	2400      	movhi	r4, #0
 8005118:	f004 0401 	andls.w	r4, r4, #1
 800511c:	9515      	str	r5, [sp, #84]	; 0x54
 800511e:	950e      	str	r5, [sp, #56]	; 0x38
 8005120:	2100      	movs	r1, #0
 8005122:	f1b9 0f17 	cmp.w	r9, #23
 8005126:	6479      	str	r1, [r7, #68]	; 0x44
 8005128:	d909      	bls.n	800513e <_dtoa_r+0x67e>
 800512a:	2201      	movs	r2, #1
 800512c:	2304      	movs	r3, #4
 800512e:	005b      	lsls	r3, r3, #1
 8005130:	f103 0014 	add.w	r0, r3, #20
 8005134:	4611      	mov	r1, r2
 8005136:	3201      	adds	r2, #1
 8005138:	4548      	cmp	r0, r9
 800513a:	d9f8      	bls.n	800512e <_dtoa_r+0x66e>
 800513c:	6479      	str	r1, [r7, #68]	; 0x44
 800513e:	4638      	mov	r0, r7
 8005140:	f001 f87c 	bl	800623c <_Balloc>
 8005144:	9009      	str	r0, [sp, #36]	; 0x24
 8005146:	6438      	str	r0, [r7, #64]	; 0x40
 8005148:	2c00      	cmp	r4, #0
 800514a:	f43f adfa 	beq.w	8004d42 <_dtoa_r+0x282>
 800514e:	9c05      	ldr	r4, [sp, #20]
 8005150:	4652      	mov	r2, sl
 8005152:	465b      	mov	r3, fp
 8005154:	2c00      	cmp	r4, #0
 8005156:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800515a:	f340 81f8 	ble.w	800554e <_dtoa_r+0xa8e>
 800515e:	4b97      	ldr	r3, [pc, #604]	; (80053bc <_dtoa_r+0x8fc>)
 8005160:	f004 020f 	and.w	r2, r4, #15
 8005164:	1124      	asrs	r4, r4, #4
 8005166:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800516a:	2602      	movs	r6, #2
 800516c:	06e2      	lsls	r2, r4, #27
 800516e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005172:	d50b      	bpl.n	800518c <_dtoa_r+0x6cc>
 8005174:	4b92      	ldr	r3, [pc, #584]	; (80053c0 <_dtoa_r+0x900>)
 8005176:	4650      	mov	r0, sl
 8005178:	4659      	mov	r1, fp
 800517a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800517e:	f003 f899 	bl	80082b4 <__aeabi_ddiv>
 8005182:	f004 040f 	and.w	r4, r4, #15
 8005186:	4682      	mov	sl, r0
 8005188:	468b      	mov	fp, r1
 800518a:	2603      	movs	r6, #3
 800518c:	b174      	cbz	r4, 80051ac <_dtoa_r+0x6ec>
 800518e:	4d8c      	ldr	r5, [pc, #560]	; (80053c0 <_dtoa_r+0x900>)
 8005190:	4640      	mov	r0, r8
 8005192:	4649      	mov	r1, r9
 8005194:	07e3      	lsls	r3, r4, #31
 8005196:	d504      	bpl.n	80051a2 <_dtoa_r+0x6e2>
 8005198:	e9d5 2300 	ldrd	r2, r3, [r5]
 800519c:	f002 ff60 	bl	8008060 <__aeabi_dmul>
 80051a0:	3601      	adds	r6, #1
 80051a2:	3508      	adds	r5, #8
 80051a4:	1064      	asrs	r4, r4, #1
 80051a6:	d1f5      	bne.n	8005194 <_dtoa_r+0x6d4>
 80051a8:	4680      	mov	r8, r0
 80051aa:	4689      	mov	r9, r1
 80051ac:	4650      	mov	r0, sl
 80051ae:	4659      	mov	r1, fp
 80051b0:	4642      	mov	r2, r8
 80051b2:	464b      	mov	r3, r9
 80051b4:	f003 f87e 	bl	80082b4 <__aeabi_ddiv>
 80051b8:	4682      	mov	sl, r0
 80051ba:	468b      	mov	fp, r1
 80051bc:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80051be:	2c00      	cmp	r4, #0
 80051c0:	f000 8100 	beq.w	80053c4 <_dtoa_r+0x904>
 80051c4:	2300      	movs	r3, #0
 80051c6:	4650      	mov	r0, sl
 80051c8:	4659      	mov	r1, fp
 80051ca:	2200      	movs	r2, #0
 80051cc:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 80051d0:	2401      	movs	r4, #1
 80051d2:	f003 f9b7 	bl	8008544 <__aeabi_dcmplt>
 80051d6:	b900      	cbnz	r0, 80051da <_dtoa_r+0x71a>
 80051d8:	2400      	movs	r4, #0
 80051da:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80051dc:	2d00      	cmp	r5, #0
 80051de:	bfd4      	ite	le
 80051e0:	2400      	movle	r4, #0
 80051e2:	f004 0401 	andgt.w	r4, r4, #1
 80051e6:	2c00      	cmp	r4, #0
 80051e8:	f000 80ec 	beq.w	80053c4 <_dtoa_r+0x904>
 80051ec:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80051ee:	2c00      	cmp	r4, #0
 80051f0:	f340 819b 	ble.w	800552a <_dtoa_r+0xa6a>
 80051f4:	2300      	movs	r3, #0
 80051f6:	2200      	movs	r2, #0
 80051f8:	f2c4 0324 	movt	r3, #16420	; 0x4024
 80051fc:	4650      	mov	r0, sl
 80051fe:	4659      	mov	r1, fp
 8005200:	f002 ff2e 	bl	8008060 <__aeabi_dmul>
 8005204:	4682      	mov	sl, r0
 8005206:	1c70      	adds	r0, r6, #1
 8005208:	468b      	mov	fp, r1
 800520a:	f002 fec3 	bl	8007f94 <__aeabi_i2d>
 800520e:	4602      	mov	r2, r0
 8005210:	460b      	mov	r3, r1
 8005212:	4650      	mov	r0, sl
 8005214:	4659      	mov	r1, fp
 8005216:	f002 ff23 	bl	8008060 <__aeabi_dmul>
 800521a:	2300      	movs	r3, #0
 800521c:	2200      	movs	r2, #0
 800521e:	f2c4 031c 	movt	r3, #16412	; 0x401c
 8005222:	f002 fd6b 	bl	8007cfc <__adddf3>
 8005226:	9d05      	ldr	r5, [sp, #20]
 8005228:	3d01      	subs	r5, #1
 800522a:	9517      	str	r5, [sp, #92]	; 0x5c
 800522c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800522e:	4680      	mov	r8, r0
 8005230:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 8005234:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8005236:	2c00      	cmp	r4, #0
 8005238:	f000 81b0 	beq.w	800559c <_dtoa_r+0xadc>
 800523c:	4b5f      	ldr	r3, [pc, #380]	; (80053bc <_dtoa_r+0x8fc>)
 800523e:	2100      	movs	r1, #0
 8005240:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8005244:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005248:	2000      	movs	r0, #0
 800524a:	f6c3 71e0 	movt	r1, #16352	; 0x3fe0
 800524e:	f003 f831 	bl	80082b4 <__aeabi_ddiv>
 8005252:	4642      	mov	r2, r8
 8005254:	464b      	mov	r3, r9
 8005256:	f002 fd4f 	bl	8007cf8 <__aeabi_dsub>
 800525a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800525e:	4659      	mov	r1, fp
 8005260:	4650      	mov	r0, sl
 8005262:	f003 f997 	bl	8008594 <__aeabi_d2iz>
 8005266:	4606      	mov	r6, r0
 8005268:	f002 fe94 	bl	8007f94 <__aeabi_i2d>
 800526c:	4602      	mov	r2, r0
 800526e:	460b      	mov	r3, r1
 8005270:	4650      	mov	r0, sl
 8005272:	4659      	mov	r1, fp
 8005274:	f002 fd40 	bl	8007cf8 <__aeabi_dsub>
 8005278:	3630      	adds	r6, #48	; 0x30
 800527a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800527c:	b2f6      	uxtb	r6, r6
 800527e:	4682      	mov	sl, r0
 8005280:	468b      	mov	fp, r1
 8005282:	f804 6b01 	strb.w	r6, [r4], #1
 8005286:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800528a:	4652      	mov	r2, sl
 800528c:	465b      	mov	r3, fp
 800528e:	9411      	str	r4, [sp, #68]	; 0x44
 8005290:	46a0      	mov	r8, r4
 8005292:	f003 f975 	bl	8008580 <__aeabi_dcmpgt>
 8005296:	2800      	cmp	r0, #0
 8005298:	f040 8325 	bne.w	80058e6 <_dtoa_r+0xe26>
 800529c:	2100      	movs	r1, #0
 800529e:	4652      	mov	r2, sl
 80052a0:	465b      	mov	r3, fp
 80052a2:	2000      	movs	r0, #0
 80052a4:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 80052a8:	f002 fd26 	bl	8007cf8 <__aeabi_dsub>
 80052ac:	4602      	mov	r2, r0
 80052ae:	460b      	mov	r3, r1
 80052b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80052b4:	f003 f964 	bl	8008580 <__aeabi_dcmpgt>
 80052b8:	2800      	cmp	r0, #0
 80052ba:	f040 827f 	bne.w	80057bc <_dtoa_r+0xcfc>
 80052be:	2d01      	cmp	r5, #1
 80052c0:	f340 8133 	ble.w	800552a <_dtoa_r+0xa6a>
 80052c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80052c6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80052c8:	1945      	adds	r5, r0, r5
 80052ca:	e00f      	b.n	80052ec <_dtoa_r+0x82c>
 80052cc:	2100      	movs	r1, #0
 80052ce:	2000      	movs	r0, #0
 80052d0:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 80052d4:	f002 fd10 	bl	8007cf8 <__aeabi_dsub>
 80052d8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80052dc:	f003 f932 	bl	8008544 <__aeabi_dcmplt>
 80052e0:	2800      	cmp	r0, #0
 80052e2:	f040 826b 	bne.w	80057bc <_dtoa_r+0xcfc>
 80052e6:	42ac      	cmp	r4, r5
 80052e8:	f000 811f 	beq.w	800552a <_dtoa_r+0xa6a>
 80052ec:	2300      	movs	r3, #0
 80052ee:	2200      	movs	r2, #0
 80052f0:	f2c4 0324 	movt	r3, #16420	; 0x4024
 80052f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80052f8:	f002 feb2 	bl	8008060 <__aeabi_dmul>
 80052fc:	2300      	movs	r3, #0
 80052fe:	2200      	movs	r2, #0
 8005300:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8005304:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005308:	4650      	mov	r0, sl
 800530a:	4659      	mov	r1, fp
 800530c:	f002 fea8 	bl	8008060 <__aeabi_dmul>
 8005310:	4680      	mov	r8, r0
 8005312:	4689      	mov	r9, r1
 8005314:	f003 f93e 	bl	8008594 <__aeabi_d2iz>
 8005318:	4606      	mov	r6, r0
 800531a:	f002 fe3b 	bl	8007f94 <__aeabi_i2d>
 800531e:	4602      	mov	r2, r0
 8005320:	460b      	mov	r3, r1
 8005322:	4640      	mov	r0, r8
 8005324:	4649      	mov	r1, r9
 8005326:	f002 fce7 	bl	8007cf8 <__aeabi_dsub>
 800532a:	3630      	adds	r6, #48	; 0x30
 800532c:	b2f6      	uxtb	r6, r6
 800532e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005332:	f804 6b01 	strb.w	r6, [r4], #1
 8005336:	4682      	mov	sl, r0
 8005338:	468b      	mov	fp, r1
 800533a:	f003 f903 	bl	8008544 <__aeabi_dcmplt>
 800533e:	46a0      	mov	r8, r4
 8005340:	4652      	mov	r2, sl
 8005342:	465b      	mov	r3, fp
 8005344:	2800      	cmp	r0, #0
 8005346:	d0c1      	beq.n	80052cc <_dtoa_r+0x80c>
 8005348:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800534a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800534c:	9005      	str	r0, [sp, #20]
 800534e:	9409      	str	r4, [sp, #36]	; 0x24
 8005350:	e66e      	b.n	8005030 <_dtoa_r+0x570>
 8005352:	2500      	movs	r5, #0
 8005354:	9512      	str	r5, [sp, #72]	; 0x48
 8005356:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 8005358:	9805      	ldr	r0, [sp, #20]
 800535a:	182d      	adds	r5, r5, r0
 800535c:	f105 0901 	add.w	r9, r5, #1
 8005360:	f1b9 0f00 	cmp.w	r9, #0
 8005364:	9515      	str	r5, [sp, #84]	; 0x54
 8005366:	f340 819b 	ble.w	80056a0 <_dtoa_r+0xbe0>
 800536a:	f1b9 0f0e 	cmp.w	r9, #14
 800536e:	bf8c      	ite	hi
 8005370:	2400      	movhi	r4, #0
 8005372:	f004 0401 	andls.w	r4, r4, #1
 8005376:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800537a:	e6d1      	b.n	8005120 <_dtoa_r+0x660>
 800537c:	2500      	movs	r5, #0
 800537e:	9512      	str	r5, [sp, #72]	; 0x48
 8005380:	e6c2      	b.n	8005108 <_dtoa_r+0x648>
 8005382:	2501      	movs	r5, #1
 8005384:	9512      	str	r5, [sp, #72]	; 0x48
 8005386:	e7e6      	b.n	8005356 <_dtoa_r+0x896>
 8005388:	f1ba 0f00 	cmp.w	sl, #0
 800538c:	f47f aded 	bne.w	8004f6a <_dtoa_r+0x4aa>
 8005390:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005394:	4655      	mov	r5, sl
 8005396:	2b00      	cmp	r3, #0
 8005398:	f47f ade8 	bne.w	8004f6c <_dtoa_r+0x4ac>
 800539c:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 80053a0:	ea0b 0303 	and.w	r3, fp, r3
 80053a4:	461d      	mov	r5, r3
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	f43f ade0 	beq.w	8004f6c <_dtoa_r+0x4ac>
 80053ac:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80053ae:	3501      	adds	r5, #1
 80053b0:	950f      	str	r5, [sp, #60]	; 0x3c
 80053b2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80053b4:	3501      	adds	r5, #1
 80053b6:	950b      	str	r5, [sp, #44]	; 0x2c
 80053b8:	2501      	movs	r5, #1
 80053ba:	e5d7      	b.n	8004f6c <_dtoa_r+0x4ac>
 80053bc:	08008750 	.word	0x08008750
 80053c0:	08008840 	.word	0x08008840
 80053c4:	4630      	mov	r0, r6
 80053c6:	f002 fde5 	bl	8007f94 <__aeabi_i2d>
 80053ca:	4652      	mov	r2, sl
 80053cc:	465b      	mov	r3, fp
 80053ce:	f002 fe47 	bl	8008060 <__aeabi_dmul>
 80053d2:	2300      	movs	r3, #0
 80053d4:	2200      	movs	r2, #0
 80053d6:	f2c4 031c 	movt	r3, #16412	; 0x401c
 80053da:	f002 fc8f 	bl	8007cfc <__adddf3>
 80053de:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80053e0:	f1a1 7450 	sub.w	r4, r1, #54525952	; 0x3400000
 80053e4:	4680      	mov	r8, r0
 80053e6:	46a1      	mov	r9, r4
 80053e8:	2d00      	cmp	r5, #0
 80053ea:	f040 80ac 	bne.w	8005546 <_dtoa_r+0xa86>
 80053ee:	2300      	movs	r3, #0
 80053f0:	2200      	movs	r2, #0
 80053f2:	f2c4 0314 	movt	r3, #16404	; 0x4014
 80053f6:	4650      	mov	r0, sl
 80053f8:	4659      	mov	r1, fp
 80053fa:	f002 fc7d 	bl	8007cf8 <__aeabi_dsub>
 80053fe:	4642      	mov	r2, r8
 8005400:	4623      	mov	r3, r4
 8005402:	4682      	mov	sl, r0
 8005404:	468b      	mov	fp, r1
 8005406:	f003 f8bb 	bl	8008580 <__aeabi_dcmpgt>
 800540a:	2800      	cmp	r0, #0
 800540c:	f040 80c3 	bne.w	8005596 <_dtoa_r+0xad6>
 8005410:	4642      	mov	r2, r8
 8005412:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
 8005416:	4650      	mov	r0, sl
 8005418:	4659      	mov	r1, fp
 800541a:	f003 f893 	bl	8008544 <__aeabi_dcmplt>
 800541e:	2800      	cmp	r0, #0
 8005420:	f000 8083 	beq.w	800552a <_dtoa_r+0xa6a>
 8005424:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8005426:	9606      	str	r6, [sp, #24]
 8005428:	e666      	b.n	80050f8 <_dtoa_r+0x638>
 800542a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800542c:	2800      	cmp	r0, #0
 800542e:	f000 8147 	beq.w	80056c0 <_dtoa_r+0xc00>
 8005432:	2c00      	cmp	r4, #0
 8005434:	dd05      	ble.n	8005442 <_dtoa_r+0x982>
 8005436:	4638      	mov	r0, r7
 8005438:	9906      	ldr	r1, [sp, #24]
 800543a:	4622      	mov	r2, r4
 800543c:	f001 f8f8 	bl	8006630 <__lshift>
 8005440:	9006      	str	r0, [sp, #24]
 8005442:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8005446:	2d00      	cmp	r5, #0
 8005448:	f040 8201 	bne.w	800584e <_dtoa_r+0xd8e>
 800544c:	f00a 0001 	and.w	r0, sl, #1
 8005450:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005452:	9c06      	ldr	r4, [sp, #24]
 8005454:	900b      	str	r0, [sp, #44]	; 0x2c
 8005456:	4631      	mov	r1, r6
 8005458:	980a      	ldr	r0, [sp, #40]	; 0x28
 800545a:	f7ff faa1 	bl	80049a0 <quorem>
 800545e:	4621      	mov	r1, r4
 8005460:	9008      	str	r0, [sp, #32]
 8005462:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005464:	f001 f944 	bl	80066f0 <__mcmp>
 8005468:	4642      	mov	r2, r8
 800546a:	4681      	mov	r9, r0
 800546c:	4631      	mov	r1, r6
 800546e:	4638      	mov	r0, r7
 8005470:	f001 f95e 	bl	8006730 <__mdiff>
 8005474:	9a08      	ldr	r2, [sp, #32]
 8005476:	68c3      	ldr	r3, [r0, #12]
 8005478:	3230      	adds	r2, #48	; 0x30
 800547a:	4682      	mov	sl, r0
 800547c:	9206      	str	r2, [sp, #24]
 800547e:	f04f 0b01 	mov.w	fp, #1
 8005482:	2b00      	cmp	r3, #0
 8005484:	d03d      	beq.n	8005502 <_dtoa_r+0xa42>
 8005486:	4638      	mov	r0, r7
 8005488:	4651      	mov	r1, sl
 800548a:	f000 fefd 	bl	8006288 <_Bfree>
 800548e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005490:	ea5b 0303 	orrs.w	r3, fp, r3
 8005494:	d103      	bne.n	800549e <_dtoa_r+0x9de>
 8005496:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005498:	2800      	cmp	r0, #0
 800549a:	f000 8211 	beq.w	80058c0 <_dtoa_r+0xe00>
 800549e:	f1b9 0f00 	cmp.w	r9, #0
 80054a2:	f2c0 819f 	blt.w	80057e4 <_dtoa_r+0xd24>
 80054a6:	9826      	ldr	r0, [sp, #152]	; 0x98
 80054a8:	ea59 0000 	orrs.w	r0, r9, r0
 80054ac:	d103      	bne.n	80054b6 <_dtoa_r+0x9f6>
 80054ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80054b0:	2900      	cmp	r1, #0
 80054b2:	f000 8197 	beq.w	80057e4 <_dtoa_r+0xd24>
 80054b6:	f1bb 0f00 	cmp.w	fp, #0
 80054ba:	f300 81ea 	bgt.w	8005892 <_dtoa_r+0xdd2>
 80054be:	9a06      	ldr	r2, [sp, #24]
 80054c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80054c2:	f805 2b01 	strb.w	r2, [r5], #1
 80054c6:	990e      	ldr	r1, [sp, #56]	; 0x38
 80054c8:	1a2b      	subs	r3, r5, r0
 80054ca:	428b      	cmp	r3, r1
 80054cc:	46aa      	mov	sl, r5
 80054ce:	f000 81db 	beq.w	8005888 <_dtoa_r+0xdc8>
 80054d2:	220a      	movs	r2, #10
 80054d4:	2300      	movs	r3, #0
 80054d6:	4638      	mov	r0, r7
 80054d8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80054da:	f000 fedf 	bl	800629c <__multadd>
 80054de:	4544      	cmp	r4, r8
 80054e0:	900a      	str	r0, [sp, #40]	; 0x28
 80054e2:	d027      	beq.n	8005534 <_dtoa_r+0xa74>
 80054e4:	4621      	mov	r1, r4
 80054e6:	220a      	movs	r2, #10
 80054e8:	2300      	movs	r3, #0
 80054ea:	4638      	mov	r0, r7
 80054ec:	f000 fed6 	bl	800629c <__multadd>
 80054f0:	4641      	mov	r1, r8
 80054f2:	4604      	mov	r4, r0
 80054f4:	220a      	movs	r2, #10
 80054f6:	4638      	mov	r0, r7
 80054f8:	2300      	movs	r3, #0
 80054fa:	f000 fecf 	bl	800629c <__multadd>
 80054fe:	4680      	mov	r8, r0
 8005500:	e7a9      	b.n	8005456 <_dtoa_r+0x996>
 8005502:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005504:	4651      	mov	r1, sl
 8005506:	f001 f8f3 	bl	80066f0 <__mcmp>
 800550a:	4683      	mov	fp, r0
 800550c:	e7bb      	b.n	8005486 <_dtoa_r+0x9c6>
 800550e:	4638      	mov	r0, r7
 8005510:	4621      	mov	r1, r4
 8005512:	f000 feb9 	bl	8006288 <_Bfree>
 8005516:	e587      	b.n	8005028 <_dtoa_r+0x568>
 8005518:	231c      	movs	r3, #28
 800551a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800551c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800551e:	18c0      	adds	r0, r0, r3
 8005520:	18c9      	adds	r1, r1, r3
 8005522:	900f      	str	r0, [sp, #60]	; 0x3c
 8005524:	18e4      	adds	r4, r4, r3
 8005526:	910b      	str	r1, [sp, #44]	; 0x2c
 8005528:	e538      	b.n	8004f9c <_dtoa_r+0x4dc>
 800552a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800552e:	4682      	mov	sl, r0
 8005530:	468b      	mov	fp, r1
 8005532:	e406      	b.n	8004d42 <_dtoa_r+0x282>
 8005534:	4621      	mov	r1, r4
 8005536:	4638      	mov	r0, r7
 8005538:	220a      	movs	r2, #10
 800553a:	2300      	movs	r3, #0
 800553c:	f000 feae 	bl	800629c <__multadd>
 8005540:	4604      	mov	r4, r0
 8005542:	4680      	mov	r8, r0
 8005544:	e787      	b.n	8005456 <_dtoa_r+0x996>
 8005546:	9c05      	ldr	r4, [sp, #20]
 8005548:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800554a:	9417      	str	r4, [sp, #92]	; 0x5c
 800554c:	e672      	b.n	8005234 <_dtoa_r+0x774>
 800554e:	9d05      	ldr	r5, [sp, #20]
 8005550:	426c      	negs	r4, r5
 8005552:	2c00      	cmp	r4, #0
 8005554:	f000 80fb 	beq.w	800574e <_dtoa_r+0xc8e>
 8005558:	4ba0      	ldr	r3, [pc, #640]	; (80057dc <_dtoa_r+0xd1c>)
 800555a:	f004 020f 	and.w	r2, r4, #15
 800555e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005562:	4650      	mov	r0, sl
 8005564:	4659      	mov	r1, fp
 8005566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800556a:	f002 fd79 	bl	8008060 <__aeabi_dmul>
 800556e:	1124      	asrs	r4, r4, #4
 8005570:	4682      	mov	sl, r0
 8005572:	468b      	mov	fp, r1
 8005574:	f000 80eb 	beq.w	800574e <_dtoa_r+0xc8e>
 8005578:	4d99      	ldr	r5, [pc, #612]	; (80057e0 <_dtoa_r+0xd20>)
 800557a:	2602      	movs	r6, #2
 800557c:	07e2      	lsls	r2, r4, #31
 800557e:	d504      	bpl.n	800558a <_dtoa_r+0xaca>
 8005580:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005584:	f002 fd6c 	bl	8008060 <__aeabi_dmul>
 8005588:	3601      	adds	r6, #1
 800558a:	3508      	adds	r5, #8
 800558c:	1064      	asrs	r4, r4, #1
 800558e:	d1f5      	bne.n	800557c <_dtoa_r+0xabc>
 8005590:	4682      	mov	sl, r0
 8005592:	468b      	mov	fp, r1
 8005594:	e612      	b.n	80051bc <_dtoa_r+0x6fc>
 8005596:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8005598:	9606      	str	r6, [sp, #24]
 800559a:	e530      	b.n	8004ffe <_dtoa_r+0x53e>
 800559c:	498f      	ldr	r1, [pc, #572]	; (80057dc <_dtoa_r+0xd1c>)
 800559e:	1e6c      	subs	r4, r5, #1
 80055a0:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 80055a4:	4642      	mov	r2, r8
 80055a6:	464b      	mov	r3, r9
 80055a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80055ac:	9406      	str	r4, [sp, #24]
 80055ae:	f002 fd57 	bl	8008060 <__aeabi_dmul>
 80055b2:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
 80055b6:	4659      	mov	r1, fp
 80055b8:	4650      	mov	r0, sl
 80055ba:	f002 ffeb 	bl	8008594 <__aeabi_d2iz>
 80055be:	9909      	ldr	r1, [sp, #36]	; 0x24
 80055c0:	4604      	mov	r4, r0
 80055c2:	9111      	str	r1, [sp, #68]	; 0x44
 80055c4:	f002 fce6 	bl	8007f94 <__aeabi_i2d>
 80055c8:	460b      	mov	r3, r1
 80055ca:	4602      	mov	r2, r0
 80055cc:	4659      	mov	r1, fp
 80055ce:	4650      	mov	r0, sl
 80055d0:	f002 fb92 	bl	8007cf8 <__aeabi_dsub>
 80055d4:	f104 0330 	add.w	r3, r4, #48	; 0x30
 80055d8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80055da:	f804 3b01 	strb.w	r3, [r4], #1
 80055de:	2d01      	cmp	r5, #1
 80055e0:	4682      	mov	sl, r0
 80055e2:	468b      	mov	fp, r1
 80055e4:	9411      	str	r4, [sp, #68]	; 0x44
 80055e6:	46a0      	mov	r8, r4
 80055e8:	d020      	beq.n	800562c <_dtoa_r+0xb6c>
 80055ea:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80055ec:	1e66      	subs	r6, r4, #1
 80055ee:	1976      	adds	r6, r6, r5
 80055f0:	2300      	movs	r3, #0
 80055f2:	2200      	movs	r2, #0
 80055f4:	f2c4 0324 	movt	r3, #16420	; 0x4024
 80055f8:	f002 fd32 	bl	8008060 <__aeabi_dmul>
 80055fc:	4689      	mov	r9, r1
 80055fe:	4680      	mov	r8, r0
 8005600:	f002 ffc8 	bl	8008594 <__aeabi_d2iz>
 8005604:	4605      	mov	r5, r0
 8005606:	f002 fcc5 	bl	8007f94 <__aeabi_i2d>
 800560a:	3530      	adds	r5, #48	; 0x30
 800560c:	4602      	mov	r2, r0
 800560e:	460b      	mov	r3, r1
 8005610:	4640      	mov	r0, r8
 8005612:	4649      	mov	r1, r9
 8005614:	f002 fb70 	bl	8007cf8 <__aeabi_dsub>
 8005618:	f804 5f01 	strb.w	r5, [r4, #1]!
 800561c:	42b4      	cmp	r4, r6
 800561e:	d1e7      	bne.n	80055f0 <_dtoa_r+0xb30>
 8005620:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8005622:	9c06      	ldr	r4, [sp, #24]
 8005624:	4682      	mov	sl, r0
 8005626:	468b      	mov	fp, r1
 8005628:	eb05 0804 	add.w	r8, r5, r4
 800562c:	2300      	movs	r3, #0
 800562e:	2200      	movs	r2, #0
 8005630:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
 8005634:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 8005638:	f002 fb60 	bl	8007cfc <__adddf3>
 800563c:	4602      	mov	r2, r0
 800563e:	460b      	mov	r3, r1
 8005640:	4650      	mov	r0, sl
 8005642:	4659      	mov	r1, fp
 8005644:	f002 ff9c 	bl	8008580 <__aeabi_dcmpgt>
 8005648:	2800      	cmp	r0, #0
 800564a:	f000 808a 	beq.w	8005762 <_dtoa_r+0xca2>
 800564e:	f818 6c01 	ldrb.w	r6, [r8, #-1]
 8005652:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005654:	e422      	b.n	8004e9c <_dtoa_r+0x3dc>
 8005656:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005658:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 800565c:	e4e8      	b.n	8005030 <_dtoa_r+0x570>
 800565e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005660:	4631      	mov	r1, r6
 8005662:	f001 f845 	bl	80066f0 <__mcmp>
 8005666:	2800      	cmp	r0, #0
 8005668:	f6bf acad 	bge.w	8004fc6 <_dtoa_r+0x506>
 800566c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800566e:	220a      	movs	r2, #10
 8005670:	4638      	mov	r0, r7
 8005672:	2300      	movs	r3, #0
 8005674:	f000 fe12 	bl	800629c <__multadd>
 8005678:	9905      	ldr	r1, [sp, #20]
 800567a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800567c:	900a      	str	r0, [sp, #40]	; 0x28
 800567e:	3901      	subs	r1, #1
 8005680:	9105      	str	r1, [sp, #20]
 8005682:	2a00      	cmp	r2, #0
 8005684:	f040 8136 	bne.w	80058f4 <_dtoa_r+0xe34>
 8005688:	9815      	ldr	r0, [sp, #84]	; 0x54
 800568a:	900e      	str	r0, [sp, #56]	; 0x38
 800568c:	e49b      	b.n	8004fc6 <_dtoa_r+0x506>
 800568e:	6933      	ldr	r3, [r6, #16]
 8005690:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005694:	6918      	ldr	r0, [r3, #16]
 8005696:	f000 fe91 	bl	80063bc <__hi0bits>
 800569a:	f1c0 0320 	rsb	r3, r0, #32
 800569e:	e46a      	b.n	8004f76 <_dtoa_r+0x4b6>
 80056a0:	f1b9 0f0e 	cmp.w	r9, #14
 80056a4:	bf8c      	ite	hi
 80056a6:	2300      	movhi	r3, #0
 80056a8:	2301      	movls	r3, #1
 80056aa:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80056ae:	2100      	movs	r1, #0
 80056b0:	6479      	str	r1, [r7, #68]	; 0x44
 80056b2:	401c      	ands	r4, r3
 80056b4:	e543      	b.n	800513e <_dtoa_r+0x67e>
 80056b6:	2301      	movs	r3, #1
 80056b8:	9315      	str	r3, [sp, #84]	; 0x54
 80056ba:	930e      	str	r3, [sp, #56]	; 0x38
 80056bc:	9327      	str	r3, [sp, #156]	; 0x9c
 80056be:	e7f6      	b.n	80056ae <_dtoa_r+0xbee>
 80056c0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80056c2:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 80056c6:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80056ca:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80056cc:	e006      	b.n	80056dc <_dtoa_r+0xc1c>
 80056ce:	4651      	mov	r1, sl
 80056d0:	4638      	mov	r0, r7
 80056d2:	220a      	movs	r2, #10
 80056d4:	2300      	movs	r3, #0
 80056d6:	f000 fde1 	bl	800629c <__multadd>
 80056da:	4682      	mov	sl, r0
 80056dc:	4631      	mov	r1, r6
 80056de:	4650      	mov	r0, sl
 80056e0:	f7ff f95e 	bl	80049a0 <quorem>
 80056e4:	3030      	adds	r0, #48	; 0x30
 80056e6:	5528      	strb	r0, [r5, r4]
 80056e8:	3401      	adds	r4, #1
 80056ea:	45a0      	cmp	r8, r4
 80056ec:	dcef      	bgt.n	80056ce <_dtoa_r+0xc0e>
 80056ee:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80056f0:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 80056f4:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 80056f8:	4681      	mov	r9, r0
 80056fa:	2c01      	cmp	r4, #1
 80056fc:	bfac      	ite	ge
 80056fe:	44a2      	addge	sl, r4
 8005700:	f10a 0a01 	addlt.w	sl, sl, #1
 8005704:	2400      	movs	r4, #0
 8005706:	2201      	movs	r2, #1
 8005708:	990a      	ldr	r1, [sp, #40]	; 0x28
 800570a:	4638      	mov	r0, r7
 800570c:	f000 ff90 	bl	8006630 <__lshift>
 8005710:	4631      	mov	r1, r6
 8005712:	900a      	str	r0, [sp, #40]	; 0x28
 8005714:	f000 ffec 	bl	80066f0 <__mcmp>
 8005718:	2800      	cmp	r0, #0
 800571a:	f340 8082 	ble.w	8005822 <_dtoa_r+0xd62>
 800571e:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
 8005722:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005724:	1c6a      	adds	r2, r5, #1
 8005726:	e003      	b.n	8005730 <_dtoa_r+0xc70>
 8005728:	f81a 3c02 	ldrb.w	r3, [sl, #-2]
 800572c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005730:	2b39      	cmp	r3, #57	; 0x39
 8005732:	f040 8084 	bne.w	800583e <_dtoa_r+0xd7e>
 8005736:	4592      	cmp	sl, r2
 8005738:	d1f6      	bne.n	8005728 <_dtoa_r+0xc68>
 800573a:	9805      	ldr	r0, [sp, #20]
 800573c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800573e:	3001      	adds	r0, #1
 8005740:	2331      	movs	r3, #49	; 0x31
 8005742:	9005      	str	r0, [sp, #20]
 8005744:	f80a 3c01 	strb.w	r3, [sl, #-1]
 8005748:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800574c:	e461      	b.n	8005012 <_dtoa_r+0x552>
 800574e:	2602      	movs	r6, #2
 8005750:	e534      	b.n	80051bc <_dtoa_r+0x6fc>
 8005752:	4638      	mov	r0, r7
 8005754:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005756:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005758:	f000 ff1e 	bl	8006598 <__pow5mult>
 800575c:	900a      	str	r0, [sp, #40]	; 0x28
 800575e:	f7ff bbf2 	b.w	8004f46 <_dtoa_r+0x486>
 8005762:	2100      	movs	r1, #0
 8005764:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8005768:	2000      	movs	r0, #0
 800576a:	f6c3 71e0 	movt	r1, #16352	; 0x3fe0
 800576e:	f002 fac3 	bl	8007cf8 <__aeabi_dsub>
 8005772:	4602      	mov	r2, r0
 8005774:	460b      	mov	r3, r1
 8005776:	4650      	mov	r0, sl
 8005778:	4659      	mov	r1, fp
 800577a:	f002 fee3 	bl	8008544 <__aeabi_dcmplt>
 800577e:	2800      	cmp	r0, #0
 8005780:	f43f aed3 	beq.w	800552a <_dtoa_r+0xa6a>
 8005784:	4642      	mov	r2, r8
 8005786:	f818 3d01 	ldrb.w	r3, [r8, #-1]!
 800578a:	2b30      	cmp	r3, #48	; 0x30
 800578c:	d0fa      	beq.n	8005784 <_dtoa_r+0xcc4>
 800578e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8005790:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005792:	9405      	str	r4, [sp, #20]
 8005794:	9209      	str	r2, [sp, #36]	; 0x24
 8005796:	e44b      	b.n	8005030 <_dtoa_r+0x570>
 8005798:	4638      	mov	r0, r7
 800579a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800579c:	f000 fefc 	bl	8006598 <__pow5mult>
 80057a0:	900a      	str	r0, [sp, #40]	; 0x28
 80057a2:	f7ff bbd0 	b.w	8004f46 <_dtoa_r+0x486>
 80057a6:	2600      	movs	r6, #0
 80057a8:	9606      	str	r6, [sp, #24]
 80057aa:	e4a5      	b.n	80050f8 <_dtoa_r+0x638>
 80057ac:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80057ae:	2d00      	cmp	r5, #0
 80057b0:	d064      	beq.n	800587c <_dtoa_r+0xdbc>
 80057b2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80057b6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80057b8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80057ba:	e47d      	b.n	80050b8 <_dtoa_r+0x5f8>
 80057bc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80057be:	f7ff bb6d 	b.w	8004e9c <_dtoa_r+0x3dc>
 80057c2:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80057c4:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 80057c8:	1c72      	adds	r2, r6, #1
 80057ca:	b2d2      	uxtb	r2, r2
 80057cc:	9405      	str	r4, [sp, #20]
 80057ce:	f7ff bb7b 	b.w	8004ec8 <_dtoa_r+0x408>
 80057d2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80057d4:	2300      	movs	r3, #0
 80057d6:	1b04      	subs	r4, r0, r4
 80057d8:	e46e      	b.n	80050b8 <_dtoa_r+0x5f8>
 80057da:	bf00      	nop
 80057dc:	08008750 	.word	0x08008750
 80057e0:	08008840 	.word	0x08008840
 80057e4:	f1bb 0f00 	cmp.w	fp, #0
 80057e8:	f8dd 9018 	ldr.w	r9, [sp, #24]
 80057ec:	dd10      	ble.n	8005810 <_dtoa_r+0xd50>
 80057ee:	2201      	movs	r2, #1
 80057f0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80057f2:	4638      	mov	r0, r7
 80057f4:	f000 ff1c 	bl	8006630 <__lshift>
 80057f8:	4631      	mov	r1, r6
 80057fa:	900a      	str	r0, [sp, #40]	; 0x28
 80057fc:	f000 ff78 	bl	80066f0 <__mcmp>
 8005800:	2800      	cmp	r0, #0
 8005802:	dd6b      	ble.n	80058dc <_dtoa_r+0xe1c>
 8005804:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005808:	d053      	beq.n	80058b2 <_dtoa_r+0xdf2>
 800580a:	9b08      	ldr	r3, [sp, #32]
 800580c:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8005810:	462b      	mov	r3, r5
 8005812:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005814:	f803 9b01 	strb.w	r9, [r3], #1
 8005818:	f8cd 8018 	str.w	r8, [sp, #24]
 800581c:	9309      	str	r3, [sp, #36]	; 0x24
 800581e:	f7ff bbf8 	b.w	8005012 <_dtoa_r+0x552>
 8005822:	d103      	bne.n	800582c <_dtoa_r+0xd6c>
 8005824:	f019 0f01 	tst.w	r9, #1
 8005828:	f47f af79 	bne.w	800571e <_dtoa_r+0xc5e>
 800582c:	4652      	mov	r2, sl
 800582e:	f81a 3d01 	ldrb.w	r3, [sl, #-1]!
 8005832:	2b30      	cmp	r3, #48	; 0x30
 8005834:	d0fa      	beq.n	800582c <_dtoa_r+0xd6c>
 8005836:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005838:	9209      	str	r2, [sp, #36]	; 0x24
 800583a:	f7ff bbea 	b.w	8005012 <_dtoa_r+0x552>
 800583e:	3301      	adds	r3, #1
 8005840:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005842:	f80a 3c01 	strb.w	r3, [sl, #-1]
 8005846:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800584a:	f7ff bbe2 	b.w	8005012 <_dtoa_r+0x552>
 800584e:	9c06      	ldr	r4, [sp, #24]
 8005850:	4638      	mov	r0, r7
 8005852:	6861      	ldr	r1, [r4, #4]
 8005854:	f000 fcf2 	bl	800623c <_Balloc>
 8005858:	9d06      	ldr	r5, [sp, #24]
 800585a:	692a      	ldr	r2, [r5, #16]
 800585c:	3202      	adds	r2, #2
 800585e:	4604      	mov	r4, r0
 8005860:	0092      	lsls	r2, r2, #2
 8005862:	f105 010c 	add.w	r1, r5, #12
 8005866:	f100 000c 	add.w	r0, r0, #12
 800586a:	f000 fc9f 	bl	80061ac <memcpy>
 800586e:	4638      	mov	r0, r7
 8005870:	4621      	mov	r1, r4
 8005872:	2201      	movs	r2, #1
 8005874:	f000 fedc 	bl	8006630 <__lshift>
 8005878:	4680      	mov	r8, r0
 800587a:	e5e7      	b.n	800544c <_dtoa_r+0x98c>
 800587c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800587e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005880:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8005882:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005886:	e417      	b.n	80050b8 <_dtoa_r+0x5f8>
 8005888:	f8dd 9018 	ldr.w	r9, [sp, #24]
 800588c:	f8cd 8018 	str.w	r8, [sp, #24]
 8005890:	e739      	b.n	8005706 <_dtoa_r+0xc46>
 8005892:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8005896:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800589a:	d00a      	beq.n	80058b2 <_dtoa_r+0xdf2>
 800589c:	462b      	mov	r3, r5
 800589e:	f109 0901 	add.w	r9, r9, #1
 80058a2:	f803 9b01 	strb.w	r9, [r3], #1
 80058a6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80058a8:	f8cd 8018 	str.w	r8, [sp, #24]
 80058ac:	9309      	str	r3, [sp, #36]	; 0x24
 80058ae:	f7ff bbb0 	b.w	8005012 <_dtoa_r+0x552>
 80058b2:	46aa      	mov	sl, r5
 80058b4:	2339      	movs	r3, #57	; 0x39
 80058b6:	f80a 3b01 	strb.w	r3, [sl], #1
 80058ba:	f8cd 8018 	str.w	r8, [sp, #24]
 80058be:	e730      	b.n	8005722 <_dtoa_r+0xc62>
 80058c0:	464b      	mov	r3, r9
 80058c2:	f8dd 9018 	ldr.w	r9, [sp, #24]
 80058c6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80058ca:	d0f2      	beq.n	80058b2 <_dtoa_r+0xdf2>
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	dc9c      	bgt.n	800580a <_dtoa_r+0xd4a>
 80058d0:	e79e      	b.n	8005810 <_dtoa_r+0xd50>
 80058d2:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80058d4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80058d6:	9409      	str	r4, [sp, #36]	; 0x24
 80058d8:	f7ff bbaa 	b.w	8005030 <_dtoa_r+0x570>
 80058dc:	d198      	bne.n	8005810 <_dtoa_r+0xd50>
 80058de:	f019 0f01 	tst.w	r9, #1
 80058e2:	d095      	beq.n	8005810 <_dtoa_r+0xd50>
 80058e4:	e78e      	b.n	8005804 <_dtoa_r+0xd44>
 80058e6:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80058e8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80058ea:	9405      	str	r4, [sp, #20]
 80058ec:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80058ee:	9409      	str	r4, [sp, #36]	; 0x24
 80058f0:	f7ff bb9e 	b.w	8005030 <_dtoa_r+0x570>
 80058f4:	2300      	movs	r3, #0
 80058f6:	4638      	mov	r0, r7
 80058f8:	9906      	ldr	r1, [sp, #24]
 80058fa:	220a      	movs	r2, #10
 80058fc:	f000 fcce 	bl	800629c <__multadd>
 8005900:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005902:	9006      	str	r0, [sp, #24]
 8005904:	930e      	str	r3, [sp, #56]	; 0x38
 8005906:	f7ff bb5e 	b.w	8004fc6 <_dtoa_r+0x506>
 800590a:	f43f ab47 	beq.w	8004f9c <_dtoa_r+0x4dc>
 800590e:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
 8005912:	e602      	b.n	800551a <_dtoa_r+0xa5a>
 8005914:	f3af 8000 	nop.w

08005918 <_malloc_trim_r>:
 8005918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800591a:	4d22      	ldr	r5, [pc, #136]	; (80059a4 <_malloc_trim_r+0x8c>)
 800591c:	460f      	mov	r7, r1
 800591e:	4604      	mov	r4, r0
 8005920:	f000 fc88 	bl	8006234 <__malloc_lock>
 8005924:	68ab      	ldr	r3, [r5, #8]
 8005926:	685e      	ldr	r6, [r3, #4]
 8005928:	f026 0603 	bic.w	r6, r6, #3
 800592c:	f606 73ef 	addw	r3, r6, #4079	; 0xfef
 8005930:	1bdf      	subs	r7, r3, r7
 8005932:	0b3f      	lsrs	r7, r7, #12
 8005934:	3f01      	subs	r7, #1
 8005936:	033f      	lsls	r7, r7, #12
 8005938:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
 800593c:	4620      	mov	r0, r4
 800593e:	db07      	blt.n	8005950 <_malloc_trim_r+0x38>
 8005940:	2100      	movs	r1, #0
 8005942:	f001 f907 	bl	8006b54 <_sbrk_r>
 8005946:	68ab      	ldr	r3, [r5, #8]
 8005948:	199b      	adds	r3, r3, r6
 800594a:	4298      	cmp	r0, r3
 800594c:	4620      	mov	r0, r4
 800594e:	d003      	beq.n	8005958 <_malloc_trim_r+0x40>
 8005950:	f000 fc72 	bl	8006238 <__malloc_unlock>
 8005954:	2000      	movs	r0, #0
 8005956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005958:	4279      	negs	r1, r7
 800595a:	f001 f8fb 	bl	8006b54 <_sbrk_r>
 800595e:	3001      	adds	r0, #1
 8005960:	d00d      	beq.n	800597e <_malloc_trim_r+0x66>
 8005962:	4b11      	ldr	r3, [pc, #68]	; (80059a8 <_malloc_trim_r+0x90>)
 8005964:	68aa      	ldr	r2, [r5, #8]
 8005966:	6819      	ldr	r1, [r3, #0]
 8005968:	1bf6      	subs	r6, r6, r7
 800596a:	f046 0601 	orr.w	r6, r6, #1
 800596e:	1bcf      	subs	r7, r1, r7
 8005970:	4620      	mov	r0, r4
 8005972:	6056      	str	r6, [r2, #4]
 8005974:	601f      	str	r7, [r3, #0]
 8005976:	f000 fc5f 	bl	8006238 <__malloc_unlock>
 800597a:	2001      	movs	r0, #1
 800597c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800597e:	2100      	movs	r1, #0
 8005980:	4620      	mov	r0, r4
 8005982:	f001 f8e7 	bl	8006b54 <_sbrk_r>
 8005986:	68ab      	ldr	r3, [r5, #8]
 8005988:	1ac2      	subs	r2, r0, r3
 800598a:	2a0f      	cmp	r2, #15
 800598c:	dd07      	ble.n	800599e <_malloc_trim_r+0x86>
 800598e:	4907      	ldr	r1, [pc, #28]	; (80059ac <_malloc_trim_r+0x94>)
 8005990:	6809      	ldr	r1, [r1, #0]
 8005992:	1a40      	subs	r0, r0, r1
 8005994:	4904      	ldr	r1, [pc, #16]	; (80059a8 <_malloc_trim_r+0x90>)
 8005996:	f042 0201 	orr.w	r2, r2, #1
 800599a:	6008      	str	r0, [r1, #0]
 800599c:	605a      	str	r2, [r3, #4]
 800599e:	4620      	mov	r0, r4
 80059a0:	e7d6      	b.n	8005950 <_malloc_trim_r+0x38>
 80059a2:	bf00      	nop
 80059a4:	2000056c 	.word	0x2000056c
 80059a8:	20000998 	.word	0x20000998
 80059ac:	20000974 	.word	0x20000974

080059b0 <_free_r>:
 80059b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059b4:	460d      	mov	r5, r1
 80059b6:	4604      	mov	r4, r0
 80059b8:	2900      	cmp	r1, #0
 80059ba:	d06f      	beq.n	8005a9c <_free_r+0xec>
 80059bc:	f000 fc3a 	bl	8006234 <__malloc_lock>
 80059c0:	f855 0c04 	ldr.w	r0, [r5, #-4]
 80059c4:	4e58      	ldr	r6, [pc, #352]	; (8005b28 <_free_r+0x178>)
 80059c6:	f1a5 0108 	sub.w	r1, r5, #8
 80059ca:	f020 0301 	bic.w	r3, r0, #1
 80059ce:	18ca      	adds	r2, r1, r3
 80059d0:	f8d6 c008 	ldr.w	ip, [r6, #8]
 80059d4:	6857      	ldr	r7, [r2, #4]
 80059d6:	4594      	cmp	ip, r2
 80059d8:	f027 0703 	bic.w	r7, r7, #3
 80059dc:	d07c      	beq.n	8005ad8 <_free_r+0x128>
 80059de:	f010 0001 	ands.w	r0, r0, #1
 80059e2:	6057      	str	r7, [r2, #4]
 80059e4:	d049      	beq.n	8005a7a <_free_r+0xca>
 80059e6:	2000      	movs	r0, #0
 80059e8:	19d5      	adds	r5, r2, r7
 80059ea:	686d      	ldr	r5, [r5, #4]
 80059ec:	f015 0f01 	tst.w	r5, #1
 80059f0:	d106      	bne.n	8005a00 <_free_r+0x50>
 80059f2:	19db      	adds	r3, r3, r7
 80059f4:	6895      	ldr	r5, [r2, #8]
 80059f6:	2800      	cmp	r0, #0
 80059f8:	d062      	beq.n	8005ac0 <_free_r+0x110>
 80059fa:	68d2      	ldr	r2, [r2, #12]
 80059fc:	60ea      	str	r2, [r5, #12]
 80059fe:	6095      	str	r5, [r2, #8]
 8005a00:	f043 0201 	orr.w	r2, r3, #1
 8005a04:	604a      	str	r2, [r1, #4]
 8005a06:	50cb      	str	r3, [r1, r3]
 8005a08:	bb90      	cbnz	r0, 8005a70 <_free_r+0xc0>
 8005a0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a0e:	d347      	bcc.n	8005aa0 <_free_r+0xf0>
 8005a10:	099d      	lsrs	r5, r3, #6
 8005a12:	3538      	adds	r5, #56	; 0x38
 8005a14:	0a5a      	lsrs	r2, r3, #9
 8005a16:	00e8      	lsls	r0, r5, #3
 8005a18:	2a04      	cmp	r2, #4
 8005a1a:	d916      	bls.n	8005a4a <_free_r+0x9a>
 8005a1c:	f102 055b 	add.w	r5, r2, #91	; 0x5b
 8005a20:	00e8      	lsls	r0, r5, #3
 8005a22:	2a14      	cmp	r2, #20
 8005a24:	d911      	bls.n	8005a4a <_free_r+0x9a>
 8005a26:	0b1d      	lsrs	r5, r3, #12
 8005a28:	356e      	adds	r5, #110	; 0x6e
 8005a2a:	00e8      	lsls	r0, r5, #3
 8005a2c:	2a54      	cmp	r2, #84	; 0x54
 8005a2e:	d90c      	bls.n	8005a4a <_free_r+0x9a>
 8005a30:	0bdd      	lsrs	r5, r3, #15
 8005a32:	3577      	adds	r5, #119	; 0x77
 8005a34:	00e8      	lsls	r0, r5, #3
 8005a36:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8005a3a:	d906      	bls.n	8005a4a <_free_r+0x9a>
 8005a3c:	f240 5054 	movw	r0, #1364	; 0x554
 8005a40:	4282      	cmp	r2, r0
 8005a42:	d86d      	bhi.n	8005b20 <_free_r+0x170>
 8005a44:	0c9d      	lsrs	r5, r3, #18
 8005a46:	357c      	adds	r5, #124	; 0x7c
 8005a48:	00e8      	lsls	r0, r5, #3
 8005a4a:	1986      	adds	r6, r0, r6
 8005a4c:	4836      	ldr	r0, [pc, #216]	; (8005b28 <_free_r+0x178>)
 8005a4e:	68b2      	ldr	r2, [r6, #8]
 8005a50:	42b2      	cmp	r2, r6
 8005a52:	d103      	bne.n	8005a5c <_free_r+0xac>
 8005a54:	e05b      	b.n	8005b0e <_free_r+0x15e>
 8005a56:	6892      	ldr	r2, [r2, #8]
 8005a58:	4296      	cmp	r6, r2
 8005a5a:	d004      	beq.n	8005a66 <_free_r+0xb6>
 8005a5c:	6850      	ldr	r0, [r2, #4]
 8005a5e:	f020 0003 	bic.w	r0, r0, #3
 8005a62:	4283      	cmp	r3, r0
 8005a64:	d3f7      	bcc.n	8005a56 <_free_r+0xa6>
 8005a66:	68d3      	ldr	r3, [r2, #12]
 8005a68:	60cb      	str	r3, [r1, #12]
 8005a6a:	608a      	str	r2, [r1, #8]
 8005a6c:	60d1      	str	r1, [r2, #12]
 8005a6e:	6099      	str	r1, [r3, #8]
 8005a70:	4620      	mov	r0, r4
 8005a72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a76:	f000 bbdf 	b.w	8006238 <__malloc_unlock>
 8005a7a:	f855 cc08 	ldr.w	ip, [r5, #-8]
 8005a7e:	ebcc 0101 	rsb	r1, ip, r1
 8005a82:	f106 0808 	add.w	r8, r6, #8
 8005a86:	688d      	ldr	r5, [r1, #8]
 8005a88:	4545      	cmp	r5, r8
 8005a8a:	4463      	add	r3, ip
 8005a8c:	d03d      	beq.n	8005b0a <_free_r+0x15a>
 8005a8e:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8005a92:	f8c5 c00c 	str.w	ip, [r5, #12]
 8005a96:	f8cc 5008 	str.w	r5, [ip, #8]
 8005a9a:	e7a5      	b.n	80059e8 <_free_r+0x38>
 8005a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005aa0:	08db      	lsrs	r3, r3, #3
 8005aa2:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 8005aa6:	6875      	ldr	r5, [r6, #4]
 8005aa8:	6890      	ldr	r0, [r2, #8]
 8005aaa:	60ca      	str	r2, [r1, #12]
 8005aac:	109b      	asrs	r3, r3, #2
 8005aae:	2701      	movs	r7, #1
 8005ab0:	fa17 f303 	lsls.w	r3, r7, r3
 8005ab4:	432b      	orrs	r3, r5
 8005ab6:	6088      	str	r0, [r1, #8]
 8005ab8:	6073      	str	r3, [r6, #4]
 8005aba:	6091      	str	r1, [r2, #8]
 8005abc:	60c1      	str	r1, [r0, #12]
 8005abe:	e7d7      	b.n	8005a70 <_free_r+0xc0>
 8005ac0:	4f1a      	ldr	r7, [pc, #104]	; (8005b2c <_free_r+0x17c>)
 8005ac2:	42bd      	cmp	r5, r7
 8005ac4:	d199      	bne.n	80059fa <_free_r+0x4a>
 8005ac6:	f043 0201 	orr.w	r2, r3, #1
 8005aca:	6171      	str	r1, [r6, #20]
 8005acc:	6131      	str	r1, [r6, #16]
 8005ace:	60cd      	str	r5, [r1, #12]
 8005ad0:	608d      	str	r5, [r1, #8]
 8005ad2:	604a      	str	r2, [r1, #4]
 8005ad4:	50cb      	str	r3, [r1, r3]
 8005ad6:	e7cb      	b.n	8005a70 <_free_r+0xc0>
 8005ad8:	07c2      	lsls	r2, r0, #31
 8005ada:	443b      	add	r3, r7
 8005adc:	d407      	bmi.n	8005aee <_free_r+0x13e>
 8005ade:	f855 2c08 	ldr.w	r2, [r5, #-8]
 8005ae2:	1a89      	subs	r1, r1, r2
 8005ae4:	189b      	adds	r3, r3, r2
 8005ae6:	6888      	ldr	r0, [r1, #8]
 8005ae8:	68ca      	ldr	r2, [r1, #12]
 8005aea:	60c2      	str	r2, [r0, #12]
 8005aec:	6090      	str	r0, [r2, #8]
 8005aee:	4a10      	ldr	r2, [pc, #64]	; (8005b30 <_free_r+0x180>)
 8005af0:	60b1      	str	r1, [r6, #8]
 8005af2:	6812      	ldr	r2, [r2, #0]
 8005af4:	f043 0001 	orr.w	r0, r3, #1
 8005af8:	4293      	cmp	r3, r2
 8005afa:	6048      	str	r0, [r1, #4]
 8005afc:	d3b8      	bcc.n	8005a70 <_free_r+0xc0>
 8005afe:	4b0d      	ldr	r3, [pc, #52]	; (8005b34 <_free_r+0x184>)
 8005b00:	4620      	mov	r0, r4
 8005b02:	6819      	ldr	r1, [r3, #0]
 8005b04:	f7ff ff08 	bl	8005918 <_malloc_trim_r>
 8005b08:	e7b2      	b.n	8005a70 <_free_r+0xc0>
 8005b0a:	2001      	movs	r0, #1
 8005b0c:	e76c      	b.n	80059e8 <_free_r+0x38>
 8005b0e:	6843      	ldr	r3, [r0, #4]
 8005b10:	10ad      	asrs	r5, r5, #2
 8005b12:	2601      	movs	r6, #1
 8005b14:	fa16 f505 	lsls.w	r5, r6, r5
 8005b18:	432b      	orrs	r3, r5
 8005b1a:	6043      	str	r3, [r0, #4]
 8005b1c:	4613      	mov	r3, r2
 8005b1e:	e7a3      	b.n	8005a68 <_free_r+0xb8>
 8005b20:	f44f 707c 	mov.w	r0, #1008	; 0x3f0
 8005b24:	257e      	movs	r5, #126	; 0x7e
 8005b26:	e790      	b.n	8005a4a <_free_r+0x9a>
 8005b28:	2000056c 	.word	0x2000056c
 8005b2c:	20000574 	.word	0x20000574
 8005b30:	20000978 	.word	0x20000978
 8005b34:	20000994 	.word	0x20000994

08005b38 <_setlocale_r>:
 8005b38:	b510      	push	{r4, lr}
 8005b3a:	4614      	mov	r4, r2
 8005b3c:	b122      	cbz	r2, 8005b48 <_setlocale_r+0x10>
 8005b3e:	4610      	mov	r0, r2
 8005b40:	490b      	ldr	r1, [pc, #44]	; (8005b70 <_setlocale_r+0x38>)
 8005b42:	f001 f819 	bl	8006b78 <strcmp>
 8005b46:	b908      	cbnz	r0, 8005b4c <_setlocale_r+0x14>
 8005b48:	480a      	ldr	r0, [pc, #40]	; (8005b74 <_setlocale_r+0x3c>)
 8005b4a:	bd10      	pop	{r4, pc}
 8005b4c:	4620      	mov	r0, r4
 8005b4e:	4909      	ldr	r1, [pc, #36]	; (8005b74 <_setlocale_r+0x3c>)
 8005b50:	f001 f812 	bl	8006b78 <strcmp>
 8005b54:	b908      	cbnz	r0, 8005b5a <_setlocale_r+0x22>
 8005b56:	4807      	ldr	r0, [pc, #28]	; (8005b74 <_setlocale_r+0x3c>)
 8005b58:	bd10      	pop	{r4, pc}
 8005b5a:	4620      	mov	r0, r4
 8005b5c:	4906      	ldr	r1, [pc, #24]	; (8005b78 <_setlocale_r+0x40>)
 8005b5e:	f001 f80b 	bl	8006b78 <strcmp>
 8005b62:	4b04      	ldr	r3, [pc, #16]	; (8005b74 <_setlocale_r+0x3c>)
 8005b64:	2800      	cmp	r0, #0
 8005b66:	bf0c      	ite	eq
 8005b68:	4618      	moveq	r0, r3
 8005b6a:	2000      	movne	r0, #0
 8005b6c:	bd10      	pop	{r4, pc}
 8005b6e:	bf00      	nop
 8005b70:	08008954 	.word	0x08008954
 8005b74:	08008950 	.word	0x08008950
 8005b78:	0800891c 	.word	0x0800891c

08005b7c <__locale_charset>:
 8005b7c:	f240 40f0 	movw	r0, #1264	; 0x4f0
 8005b80:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8005b84:	4770      	bx	lr
 8005b86:	bf00      	nop

08005b88 <__locale_mb_cur_max>:
 8005b88:	f240 43f0 	movw	r3, #1264	; 0x4f0
 8005b8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005b90:	6a18      	ldr	r0, [r3, #32]
 8005b92:	4770      	bx	lr

08005b94 <__locale_msgcharset>:
 8005b94:	4800      	ldr	r0, [pc, #0]	; (8005b98 <__locale_msgcharset+0x4>)
 8005b96:	4770      	bx	lr
 8005b98:	20000514 	.word	0x20000514

08005b9c <__locale_cjk_lang>:
 8005b9c:	2000      	movs	r0, #0
 8005b9e:	4770      	bx	lr

08005ba0 <_localeconv_r>:
 8005ba0:	4800      	ldr	r0, [pc, #0]	; (8005ba4 <_localeconv_r+0x4>)
 8005ba2:	4770      	bx	lr
 8005ba4:	20000534 	.word	0x20000534

08005ba8 <setlocale>:
 8005ba8:	b410      	push	{r4}
 8005baa:	f240 03c0 	movw	r3, #192	; 0xc0
 8005bae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005bb2:	4604      	mov	r4, r0
 8005bb4:	6818      	ldr	r0, [r3, #0]
 8005bb6:	460a      	mov	r2, r1
 8005bb8:	4621      	mov	r1, r4
 8005bba:	bc10      	pop	{r4}
 8005bbc:	e7bc      	b.n	8005b38 <_setlocale_r>
 8005bbe:	bf00      	nop

08005bc0 <localeconv>:
 8005bc0:	4800      	ldr	r0, [pc, #0]	; (8005bc4 <localeconv+0x4>)
 8005bc2:	4770      	bx	lr
 8005bc4:	20000534 	.word	0x20000534

08005bc8 <_malloc_r>:
 8005bc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bcc:	f101 040b 	add.w	r4, r1, #11
 8005bd0:	2c16      	cmp	r4, #22
 8005bd2:	4605      	mov	r5, r0
 8005bd4:	d92a      	bls.n	8005c2c <_malloc_r+0x64>
 8005bd6:	f024 0407 	bic.w	r4, r4, #7
 8005bda:	0fe3      	lsrs	r3, r4, #31
 8005bdc:	428c      	cmp	r4, r1
 8005bde:	bf2c      	ite	cs
 8005be0:	4619      	movcs	r1, r3
 8005be2:	f043 0101 	orrcc.w	r1, r3, #1
 8005be6:	bb51      	cbnz	r1, 8005c3e <_malloc_r+0x76>
 8005be8:	4628      	mov	r0, r5
 8005bea:	f000 fb23 	bl	8006234 <__malloc_lock>
 8005bee:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8005bf2:	d22a      	bcs.n	8005c4a <_malloc_r+0x82>
 8005bf4:	4e7d      	ldr	r6, [pc, #500]	; (8005dec <_malloc_r+0x224>)
 8005bf6:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
 8005bfa:	eb06 03ce 	add.w	r3, r6, lr, lsl #3
 8005bfe:	68df      	ldr	r7, [r3, #12]
 8005c00:	429f      	cmp	r7, r3
 8005c02:	f000 8235 	beq.w	8006070 <_malloc_r+0x4a8>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	68fa      	ldr	r2, [r7, #12]
 8005c0a:	68b9      	ldr	r1, [r7, #8]
 8005c0c:	f023 0303 	bic.w	r3, r3, #3
 8005c10:	18fb      	adds	r3, r7, r3
 8005c12:	60ca      	str	r2, [r1, #12]
 8005c14:	6858      	ldr	r0, [r3, #4]
 8005c16:	6091      	str	r1, [r2, #8]
 8005c18:	f040 0201 	orr.w	r2, r0, #1
 8005c1c:	605a      	str	r2, [r3, #4]
 8005c1e:	4628      	mov	r0, r5
 8005c20:	f000 fb0a 	bl	8006238 <__malloc_unlock>
 8005c24:	3708      	adds	r7, #8
 8005c26:	4638      	mov	r0, r7
 8005c28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	2410      	movs	r4, #16
 8005c30:	428c      	cmp	r4, r1
 8005c32:	bf2c      	ite	cs
 8005c34:	4619      	movcs	r1, r3
 8005c36:	f043 0101 	orrcc.w	r1, r3, #1
 8005c3a:	2900      	cmp	r1, #0
 8005c3c:	d0d4      	beq.n	8005be8 <_malloc_r+0x20>
 8005c3e:	230c      	movs	r3, #12
 8005c40:	2700      	movs	r7, #0
 8005c42:	602b      	str	r3, [r5, #0]
 8005c44:	4638      	mov	r0, r7
 8005c46:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c4a:	ea5f 2e54 	movs.w	lr, r4, lsr #9
 8005c4e:	bf04      	itt	eq
 8005c50:	ea4f 0ed4 	moveq.w	lr, r4, lsr #3
 8005c54:	ea4f 01ce 	moveq.w	r1, lr, lsl #3
 8005c58:	f040 8081 	bne.w	8005d5e <_malloc_r+0x196>
 8005c5c:	4e63      	ldr	r6, [pc, #396]	; (8005dec <_malloc_r+0x224>)
 8005c5e:	1871      	adds	r1, r6, r1
 8005c60:	68cf      	ldr	r7, [r1, #12]
 8005c62:	42b9      	cmp	r1, r7
 8005c64:	d106      	bne.n	8005c74 <_malloc_r+0xac>
 8005c66:	e00d      	b.n	8005c84 <_malloc_r+0xbc>
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	f280 8169 	bge.w	8005f40 <_malloc_r+0x378>
 8005c6e:	68ff      	ldr	r7, [r7, #12]
 8005c70:	42b9      	cmp	r1, r7
 8005c72:	d007      	beq.n	8005c84 <_malloc_r+0xbc>
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	f022 0203 	bic.w	r2, r2, #3
 8005c7a:	1b13      	subs	r3, r2, r4
 8005c7c:	2b0f      	cmp	r3, #15
 8005c7e:	ddf3      	ble.n	8005c68 <_malloc_r+0xa0>
 8005c80:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 8005c84:	f10e 0e01 	add.w	lr, lr, #1
 8005c88:	4a58      	ldr	r2, [pc, #352]	; (8005dec <_malloc_r+0x224>)
 8005c8a:	6937      	ldr	r7, [r6, #16]
 8005c8c:	f102 0c08 	add.w	ip, r2, #8
 8005c90:	4567      	cmp	r7, ip
 8005c92:	bf08      	it	eq
 8005c94:	6853      	ldreq	r3, [r2, #4]
 8005c96:	d023      	beq.n	8005ce0 <_malloc_r+0x118>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f023 0303 	bic.w	r3, r3, #3
 8005c9e:	1b19      	subs	r1, r3, r4
 8005ca0:	290f      	cmp	r1, #15
 8005ca2:	f300 81b4 	bgt.w	800600e <_malloc_r+0x446>
 8005ca6:	2900      	cmp	r1, #0
 8005ca8:	f8c2 c014 	str.w	ip, [r2, #20]
 8005cac:	f8c2 c010 	str.w	ip, [r2, #16]
 8005cb0:	f280 808f 	bge.w	8005dd2 <_malloc_r+0x20a>
 8005cb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cb8:	f080 8161 	bcs.w	8005f7e <_malloc_r+0x3b6>
 8005cbc:	08db      	lsrs	r3, r3, #3
 8005cbe:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8005cc2:	f8d2 8004 	ldr.w	r8, [r2, #4]
 8005cc6:	6888      	ldr	r0, [r1, #8]
 8005cc8:	60f9      	str	r1, [r7, #12]
 8005cca:	109b      	asrs	r3, r3, #2
 8005ccc:	f04f 0901 	mov.w	r9, #1
 8005cd0:	fa09 f303 	lsl.w	r3, r9, r3
 8005cd4:	ea43 0308 	orr.w	r3, r3, r8
 8005cd8:	60b8      	str	r0, [r7, #8]
 8005cda:	6053      	str	r3, [r2, #4]
 8005cdc:	608f      	str	r7, [r1, #8]
 8005cde:	60c7      	str	r7, [r0, #12]
 8005ce0:	2001      	movs	r0, #1
 8005ce2:	ea4f 02ae 	mov.w	r2, lr, asr #2
 8005ce6:	4090      	lsls	r0, r2
 8005ce8:	4298      	cmp	r0, r3
 8005cea:	f200 8081 	bhi.w	8005df0 <_malloc_r+0x228>
 8005cee:	4203      	tst	r3, r0
 8005cf0:	d106      	bne.n	8005d00 <_malloc_r+0x138>
 8005cf2:	f02e 0e03 	bic.w	lr, lr, #3
 8005cf6:	0040      	lsls	r0, r0, #1
 8005cf8:	4203      	tst	r3, r0
 8005cfa:	f10e 0e04 	add.w	lr, lr, #4
 8005cfe:	d0fa      	beq.n	8005cf6 <_malloc_r+0x12e>
 8005d00:	eb06 09ce 	add.w	r9, r6, lr, lsl #3
 8005d04:	464f      	mov	r7, r9
 8005d06:	46f0      	mov	r8, lr
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	429f      	cmp	r7, r3
 8005d0c:	d107      	bne.n	8005d1e <_malloc_r+0x156>
 8005d0e:	e191      	b.n	8006034 <_malloc_r+0x46c>
 8005d10:	2a00      	cmp	r2, #0
 8005d12:	f280 81b7 	bge.w	8006084 <_malloc_r+0x4bc>
 8005d16:	68db      	ldr	r3, [r3, #12]
 8005d18:	429f      	cmp	r7, r3
 8005d1a:	f000 818b 	beq.w	8006034 <_malloc_r+0x46c>
 8005d1e:	6859      	ldr	r1, [r3, #4]
 8005d20:	f021 0103 	bic.w	r1, r1, #3
 8005d24:	1b0a      	subs	r2, r1, r4
 8005d26:	2a0f      	cmp	r2, #15
 8005d28:	ddf2      	ble.n	8005d10 <_malloc_r+0x148>
 8005d2a:	461f      	mov	r7, r3
 8005d2c:	1919      	adds	r1, r3, r4
 8005d2e:	68d8      	ldr	r0, [r3, #12]
 8005d30:	f857 ef08 	ldr.w	lr, [r7, #8]!
 8005d34:	508a      	str	r2, [r1, r2]
 8005d36:	f044 0401 	orr.w	r4, r4, #1
 8005d3a:	f042 0201 	orr.w	r2, r2, #1
 8005d3e:	f8ce 000c 	str.w	r0, [lr, #12]
 8005d42:	f8c0 e008 	str.w	lr, [r0, #8]
 8005d46:	605c      	str	r4, [r3, #4]
 8005d48:	6171      	str	r1, [r6, #20]
 8005d4a:	6131      	str	r1, [r6, #16]
 8005d4c:	f8c1 c00c 	str.w	ip, [r1, #12]
 8005d50:	f8c1 c008 	str.w	ip, [r1, #8]
 8005d54:	604a      	str	r2, [r1, #4]
 8005d56:	4628      	mov	r0, r5
 8005d58:	f000 fa6e 	bl	8006238 <__malloc_unlock>
 8005d5c:	e763      	b.n	8005c26 <_malloc_r+0x5e>
 8005d5e:	f1be 0f04 	cmp.w	lr, #4
 8005d62:	bf9e      	ittt	ls
 8005d64:	ea4f 1e94 	movls.w	lr, r4, lsr #6
 8005d68:	f10e 0e38 	addls.w	lr, lr, #56	; 0x38
 8005d6c:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 8005d70:	f67f af74 	bls.w	8005c5c <_malloc_r+0x94>
 8005d74:	f1be 0f14 	cmp.w	lr, #20
 8005d78:	bf9c      	itt	ls
 8005d7a:	f10e 0e5b 	addls.w	lr, lr, #91	; 0x5b
 8005d7e:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 8005d82:	f67f af6b 	bls.w	8005c5c <_malloc_r+0x94>
 8005d86:	f1be 0f54 	cmp.w	lr, #84	; 0x54
 8005d8a:	bf9e      	ittt	ls
 8005d8c:	ea4f 3e14 	movls.w	lr, r4, lsr #12
 8005d90:	f10e 0e6e 	addls.w	lr, lr, #110	; 0x6e
 8005d94:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 8005d98:	f67f af60 	bls.w	8005c5c <_malloc_r+0x94>
 8005d9c:	f5be 7faa 	cmp.w	lr, #340	; 0x154
 8005da0:	bf9e      	ittt	ls
 8005da2:	ea4f 3ed4 	movls.w	lr, r4, lsr #15
 8005da6:	f10e 0e77 	addls.w	lr, lr, #119	; 0x77
 8005daa:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 8005dae:	f67f af55 	bls.w	8005c5c <_malloc_r+0x94>
 8005db2:	f240 5354 	movw	r3, #1364	; 0x554
 8005db6:	459e      	cmp	lr, r3
 8005db8:	bf9d      	ittte	ls
 8005dba:	ea4f 4e94 	movls.w	lr, r4, lsr #18
 8005dbe:	f10e 0e7c 	addls.w	lr, lr, #124	; 0x7c
 8005dc2:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 8005dc6:	f44f 717c 	movhi.w	r1, #1008	; 0x3f0
 8005dca:	bf88      	it	hi
 8005dcc:	f04f 0e7e 	movhi.w	lr, #126	; 0x7e
 8005dd0:	e744      	b.n	8005c5c <_malloc_r+0x94>
 8005dd2:	18fb      	adds	r3, r7, r3
 8005dd4:	4628      	mov	r0, r5
 8005dd6:	685a      	ldr	r2, [r3, #4]
 8005dd8:	f042 0201 	orr.w	r2, r2, #1
 8005ddc:	605a      	str	r2, [r3, #4]
 8005dde:	3708      	adds	r7, #8
 8005de0:	f000 fa2a 	bl	8006238 <__malloc_unlock>
 8005de4:	4638      	mov	r0, r7
 8005de6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dea:	bf00      	nop
 8005dec:	2000056c 	.word	0x2000056c
 8005df0:	68b7      	ldr	r7, [r6, #8]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f023 0803 	bic.w	r8, r3, #3
 8005df8:	4544      	cmp	r4, r8
 8005dfa:	ebc4 0208 	rsb	r2, r4, r8
 8005dfe:	bf94      	ite	ls
 8005e00:	2300      	movls	r3, #0
 8005e02:	2301      	movhi	r3, #1
 8005e04:	2a0f      	cmp	r2, #15
 8005e06:	bfd8      	it	le
 8005e08:	f043 0301 	orrle.w	r3, r3, #1
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	f000 80a7 	beq.w	8005f60 <_malloc_r+0x398>
 8005e12:	4bb3      	ldr	r3, [pc, #716]	; (80060e0 <_malloc_r+0x518>)
 8005e14:	f8df a2cc 	ldr.w	sl, [pc, #716]	; 80060e4 <_malloc_r+0x51c>
 8005e18:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8005e1c:	f8da 3000 	ldr.w	r3, [sl]
 8005e20:	3201      	adds	r2, #1
 8005e22:	4423      	add	r3, r4
 8005e24:	bf08      	it	eq
 8005e26:	f103 0b10 	addeq.w	fp, r3, #16
 8005e2a:	d006      	beq.n	8005e3a <_malloc_r+0x272>
 8005e2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e30:	330f      	adds	r3, #15
 8005e32:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005e36:	f023 0b0f 	bic.w	fp, r3, #15
 8005e3a:	4628      	mov	r0, r5
 8005e3c:	4659      	mov	r1, fp
 8005e3e:	f000 fe89 	bl	8006b54 <_sbrk_r>
 8005e42:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005e46:	4681      	mov	r9, r0
 8005e48:	f000 8144 	beq.w	80060d4 <_malloc_r+0x50c>
 8005e4c:	eb07 0208 	add.w	r2, r7, r8
 8005e50:	4282      	cmp	r2, r0
 8005e52:	f200 8126 	bhi.w	80060a2 <_malloc_r+0x4da>
 8005e56:	f8da 3004 	ldr.w	r3, [sl, #4]
 8005e5a:	454a      	cmp	r2, r9
 8005e5c:	445b      	add	r3, fp
 8005e5e:	f8ca 3004 	str.w	r3, [sl, #4]
 8005e62:	f000 8141 	beq.w	80060e8 <_malloc_r+0x520>
 8005e66:	f8d6 1408 	ldr.w	r1, [r6, #1032]	; 0x408
 8005e6a:	3101      	adds	r1, #1
 8005e6c:	bf15      	itete	ne
 8005e6e:	ebc2 0209 	rsbne	r2, r2, r9
 8005e72:	4b9b      	ldreq	r3, [pc, #620]	; (80060e0 <_malloc_r+0x518>)
 8005e74:	189b      	addne	r3, r3, r2
 8005e76:	f8c3 9408 	streq.w	r9, [r3, #1032]	; 0x408
 8005e7a:	bf18      	it	ne
 8005e7c:	f8ca 3004 	strne.w	r3, [sl, #4]
 8005e80:	f019 0307 	ands.w	r3, r9, #7
 8005e84:	bf1f      	itttt	ne
 8005e86:	f1c3 0208 	rsbne	r2, r3, #8
 8005e8a:	4491      	addne	r9, r2
 8005e8c:	f5c3 5380 	rsbne	r3, r3, #4096	; 0x1000
 8005e90:	f103 0208 	addne.w	r2, r3, #8
 8005e94:	eb09 030b 	add.w	r3, r9, fp
 8005e98:	bf08      	it	eq
 8005e9a:	f44f 5280 	moveq.w	r2, #4096	; 0x1000
 8005e9e:	051b      	lsls	r3, r3, #20
 8005ea0:	0d1b      	lsrs	r3, r3, #20
 8005ea2:	ebc3 0b02 	rsb	fp, r3, r2
 8005ea6:	4628      	mov	r0, r5
 8005ea8:	4659      	mov	r1, fp
 8005eaa:	f000 fe53 	bl	8006b54 <_sbrk_r>
 8005eae:	1c43      	adds	r3, r0, #1
 8005eb0:	f000 8126 	beq.w	8006100 <_malloc_r+0x538>
 8005eb4:	ebc9 0200 	rsb	r2, r9, r0
 8005eb8:	445a      	add	r2, fp
 8005eba:	f042 0201 	orr.w	r2, r2, #1
 8005ebe:	f8da 3004 	ldr.w	r3, [sl, #4]
 8005ec2:	f8c6 9008 	str.w	r9, [r6, #8]
 8005ec6:	445b      	add	r3, fp
 8005ec8:	42b7      	cmp	r7, r6
 8005eca:	f8ca 3004 	str.w	r3, [sl, #4]
 8005ece:	f8c9 2004 	str.w	r2, [r9, #4]
 8005ed2:	d015      	beq.n	8005f00 <_malloc_r+0x338>
 8005ed4:	f1b8 0f0f 	cmp.w	r8, #15
 8005ed8:	f240 80f6 	bls.w	80060c8 <_malloc_r+0x500>
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f1a8 020c 	sub.w	r2, r8, #12
 8005ee2:	f022 0207 	bic.w	r2, r2, #7
 8005ee6:	18b9      	adds	r1, r7, r2
 8005ee8:	f000 0e01 	and.w	lr, r0, #1
 8005eec:	ea42 0e0e 	orr.w	lr, r2, lr
 8005ef0:	2005      	movs	r0, #5
 8005ef2:	2a0f      	cmp	r2, #15
 8005ef4:	f8c7 e004 	str.w	lr, [r7, #4]
 8005ef8:	6048      	str	r0, [r1, #4]
 8005efa:	6088      	str	r0, [r1, #8]
 8005efc:	f200 8104 	bhi.w	8006108 <_malloc_r+0x540>
 8005f00:	f8da 202c 	ldr.w	r2, [sl, #44]	; 0x2c
 8005f04:	68b7      	ldr	r7, [r6, #8]
 8005f06:	4293      	cmp	r3, r2
 8005f08:	bf84      	itt	hi
 8005f0a:	4a76      	ldrhi	r2, [pc, #472]	; (80060e4 <_malloc_r+0x51c>)
 8005f0c:	62d3      	strhi	r3, [r2, #44]	; 0x2c
 8005f0e:	f8da 2030 	ldr.w	r2, [sl, #48]	; 0x30
 8005f12:	4293      	cmp	r3, r2
 8005f14:	bf84      	itt	hi
 8005f16:	4a73      	ldrhi	r2, [pc, #460]	; (80060e4 <_malloc_r+0x51c>)
 8005f18:	6313      	strhi	r3, [r2, #48]	; 0x30
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f023 0303 	bic.w	r3, r3, #3
 8005f20:	429c      	cmp	r4, r3
 8005f22:	ebc4 0203 	rsb	r2, r4, r3
 8005f26:	bf94      	ite	ls
 8005f28:	2300      	movls	r3, #0
 8005f2a:	2301      	movhi	r3, #1
 8005f2c:	2a0f      	cmp	r2, #15
 8005f2e:	bfd8      	it	le
 8005f30:	f043 0301 	orrle.w	r3, r3, #1
 8005f34:	b1a3      	cbz	r3, 8005f60 <_malloc_r+0x398>
 8005f36:	4628      	mov	r0, r5
 8005f38:	f000 f97e 	bl	8006238 <__malloc_unlock>
 8005f3c:	2700      	movs	r7, #0
 8005f3e:	e672      	b.n	8005c26 <_malloc_r+0x5e>
 8005f40:	18ba      	adds	r2, r7, r2
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	6850      	ldr	r0, [r2, #4]
 8005f46:	68b9      	ldr	r1, [r7, #8]
 8005f48:	f040 0001 	orr.w	r0, r0, #1
 8005f4c:	6050      	str	r0, [r2, #4]
 8005f4e:	60cb      	str	r3, [r1, #12]
 8005f50:	4628      	mov	r0, r5
 8005f52:	6099      	str	r1, [r3, #8]
 8005f54:	3708      	adds	r7, #8
 8005f56:	f000 f96f 	bl	8006238 <__malloc_unlock>
 8005f5a:	4638      	mov	r0, r7
 8005f5c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f60:	193b      	adds	r3, r7, r4
 8005f62:	f042 0201 	orr.w	r2, r2, #1
 8005f66:	f044 0401 	orr.w	r4, r4, #1
 8005f6a:	607c      	str	r4, [r7, #4]
 8005f6c:	4628      	mov	r0, r5
 8005f6e:	605a      	str	r2, [r3, #4]
 8005f70:	3708      	adds	r7, #8
 8005f72:	60b3      	str	r3, [r6, #8]
 8005f74:	f000 f960 	bl	8006238 <__malloc_unlock>
 8005f78:	4638      	mov	r0, r7
 8005f7a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f7e:	0a5a      	lsrs	r2, r3, #9
 8005f80:	2a04      	cmp	r2, #4
 8005f82:	bf9e      	ittt	ls
 8005f84:	ea4f 1893 	movls.w	r8, r3, lsr #6
 8005f88:	f108 0838 	addls.w	r8, r8, #56	; 0x38
 8005f8c:	ea4f 00c8 	movls.w	r0, r8, lsl #3
 8005f90:	d928      	bls.n	8005fe4 <_malloc_r+0x41c>
 8005f92:	2a14      	cmp	r2, #20
 8005f94:	bf9c      	itt	ls
 8005f96:	f102 085b 	addls.w	r8, r2, #91	; 0x5b
 8005f9a:	ea4f 00c8 	movls.w	r0, r8, lsl #3
 8005f9e:	d921      	bls.n	8005fe4 <_malloc_r+0x41c>
 8005fa0:	2a54      	cmp	r2, #84	; 0x54
 8005fa2:	bf9e      	ittt	ls
 8005fa4:	ea4f 3813 	movls.w	r8, r3, lsr #12
 8005fa8:	f108 086e 	addls.w	r8, r8, #110	; 0x6e
 8005fac:	ea4f 00c8 	movls.w	r0, r8, lsl #3
 8005fb0:	d918      	bls.n	8005fe4 <_malloc_r+0x41c>
 8005fb2:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8005fb6:	bf9e      	ittt	ls
 8005fb8:	ea4f 38d3 	movls.w	r8, r3, lsr #15
 8005fbc:	f108 0877 	addls.w	r8, r8, #119	; 0x77
 8005fc0:	ea4f 00c8 	movls.w	r0, r8, lsl #3
 8005fc4:	d90e      	bls.n	8005fe4 <_malloc_r+0x41c>
 8005fc6:	f240 5154 	movw	r1, #1364	; 0x554
 8005fca:	428a      	cmp	r2, r1
 8005fcc:	bf9d      	ittte	ls
 8005fce:	ea4f 4893 	movls.w	r8, r3, lsr #18
 8005fd2:	f108 087c 	addls.w	r8, r8, #124	; 0x7c
 8005fd6:	ea4f 00c8 	movls.w	r0, r8, lsl #3
 8005fda:	f44f 707c 	movhi.w	r0, #1008	; 0x3f0
 8005fde:	bf88      	it	hi
 8005fe0:	f04f 087e 	movhi.w	r8, #126	; 0x7e
 8005fe4:	1830      	adds	r0, r6, r0
 8005fe6:	493e      	ldr	r1, [pc, #248]	; (80060e0 <_malloc_r+0x518>)
 8005fe8:	6882      	ldr	r2, [r0, #8]
 8005fea:	4282      	cmp	r2, r0
 8005fec:	d103      	bne.n	8005ff6 <_malloc_r+0x42e>
 8005fee:	e061      	b.n	80060b4 <_malloc_r+0x4ec>
 8005ff0:	6892      	ldr	r2, [r2, #8]
 8005ff2:	4290      	cmp	r0, r2
 8005ff4:	d004      	beq.n	8006000 <_malloc_r+0x438>
 8005ff6:	6851      	ldr	r1, [r2, #4]
 8005ff8:	f021 0103 	bic.w	r1, r1, #3
 8005ffc:	428b      	cmp	r3, r1
 8005ffe:	d3f7      	bcc.n	8005ff0 <_malloc_r+0x428>
 8006000:	68d1      	ldr	r1, [r2, #12]
 8006002:	6873      	ldr	r3, [r6, #4]
 8006004:	60f9      	str	r1, [r7, #12]
 8006006:	60ba      	str	r2, [r7, #8]
 8006008:	60d7      	str	r7, [r2, #12]
 800600a:	608f      	str	r7, [r1, #8]
 800600c:	e668      	b.n	8005ce0 <_malloc_r+0x118>
 800600e:	193b      	adds	r3, r7, r4
 8006010:	f041 0001 	orr.w	r0, r1, #1
 8006014:	f044 0401 	orr.w	r4, r4, #1
 8006018:	607c      	str	r4, [r7, #4]
 800601a:	6153      	str	r3, [r2, #20]
 800601c:	6113      	str	r3, [r2, #16]
 800601e:	6058      	str	r0, [r3, #4]
 8006020:	f8c3 c00c 	str.w	ip, [r3, #12]
 8006024:	f8c3 c008 	str.w	ip, [r3, #8]
 8006028:	5059      	str	r1, [r3, r1]
 800602a:	4628      	mov	r0, r5
 800602c:	f000 f904 	bl	8006238 <__malloc_unlock>
 8006030:	3708      	adds	r7, #8
 8006032:	e5f8      	b.n	8005c26 <_malloc_r+0x5e>
 8006034:	f108 0801 	add.w	r8, r8, #1
 8006038:	3708      	adds	r7, #8
 800603a:	f018 0f03 	tst.w	r8, #3
 800603e:	f47f ae63 	bne.w	8005d08 <_malloc_r+0x140>
 8006042:	464b      	mov	r3, r9
 8006044:	f01e 0f03 	tst.w	lr, #3
 8006048:	f1a3 0208 	sub.w	r2, r3, #8
 800604c:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 8006050:	d062      	beq.n	8006118 <_malloc_r+0x550>
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4293      	cmp	r3, r2
 8006056:	d0f5      	beq.n	8006044 <_malloc_r+0x47c>
 8006058:	6873      	ldr	r3, [r6, #4]
 800605a:	0040      	lsls	r0, r0, #1
 800605c:	4298      	cmp	r0, r3
 800605e:	f63f aec7 	bhi.w	8005df0 <_malloc_r+0x228>
 8006062:	2800      	cmp	r0, #0
 8006064:	f43f aec4 	beq.w	8005df0 <_malloc_r+0x228>
 8006068:	4218      	tst	r0, r3
 800606a:	d05a      	beq.n	8006122 <_malloc_r+0x55a>
 800606c:	46c6      	mov	lr, r8
 800606e:	e647      	b.n	8005d00 <_malloc_r+0x138>
 8006070:	f107 0308 	add.w	r3, r7, #8
 8006074:	697f      	ldr	r7, [r7, #20]
 8006076:	42bb      	cmp	r3, r7
 8006078:	bf08      	it	eq
 800607a:	f10e 0e02 	addeq.w	lr, lr, #2
 800607e:	f43f ae03 	beq.w	8005c88 <_malloc_r+0xc0>
 8006082:	e5c0      	b.n	8005c06 <_malloc_r+0x3e>
 8006084:	1859      	adds	r1, r3, r1
 8006086:	461f      	mov	r7, r3
 8006088:	6848      	ldr	r0, [r1, #4]
 800608a:	68db      	ldr	r3, [r3, #12]
 800608c:	f857 2f08 	ldr.w	r2, [r7, #8]!
 8006090:	f040 0001 	orr.w	r0, r0, #1
 8006094:	6048      	str	r0, [r1, #4]
 8006096:	60d3      	str	r3, [r2, #12]
 8006098:	609a      	str	r2, [r3, #8]
 800609a:	4628      	mov	r0, r5
 800609c:	f000 f8cc 	bl	8006238 <__malloc_unlock>
 80060a0:	e5c1      	b.n	8005c26 <_malloc_r+0x5e>
 80060a2:	42b7      	cmp	r7, r6
 80060a4:	f43f aed7 	beq.w	8005e56 <_malloc_r+0x28e>
 80060a8:	4b0d      	ldr	r3, [pc, #52]	; (80060e0 <_malloc_r+0x518>)
 80060aa:	689f      	ldr	r7, [r3, #8]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f023 0303 	bic.w	r3, r3, #3
 80060b2:	e735      	b.n	8005f20 <_malloc_r+0x358>
 80060b4:	684b      	ldr	r3, [r1, #4]
 80060b6:	ea4f 08a8 	mov.w	r8, r8, asr #2
 80060ba:	2001      	movs	r0, #1
 80060bc:	fa00 f008 	lsl.w	r0, r0, r8
 80060c0:	4303      	orrs	r3, r0
 80060c2:	604b      	str	r3, [r1, #4]
 80060c4:	4611      	mov	r1, r2
 80060c6:	e79d      	b.n	8006004 <_malloc_r+0x43c>
 80060c8:	2301      	movs	r3, #1
 80060ca:	f8c9 3004 	str.w	r3, [r9, #4]
 80060ce:	464f      	mov	r7, r9
 80060d0:	2300      	movs	r3, #0
 80060d2:	e725      	b.n	8005f20 <_malloc_r+0x358>
 80060d4:	68b7      	ldr	r7, [r6, #8]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f023 0303 	bic.w	r3, r3, #3
 80060dc:	e720      	b.n	8005f20 <_malloc_r+0x358>
 80060de:	bf00      	nop
 80060e0:	2000056c 	.word	0x2000056c
 80060e4:	20000994 	.word	0x20000994
 80060e8:	0511      	lsls	r1, r2, #20
 80060ea:	0d09      	lsrs	r1, r1, #20
 80060ec:	2900      	cmp	r1, #0
 80060ee:	f47f aeba 	bne.w	8005e66 <_malloc_r+0x29e>
 80060f2:	68b2      	ldr	r2, [r6, #8]
 80060f4:	eb0b 0108 	add.w	r1, fp, r8
 80060f8:	f041 0101 	orr.w	r1, r1, #1
 80060fc:	6051      	str	r1, [r2, #4]
 80060fe:	e6ff      	b.n	8005f00 <_malloc_r+0x338>
 8006100:	2201      	movs	r2, #1
 8006102:	f04f 0b00 	mov.w	fp, #0
 8006106:	e6da      	b.n	8005ebe <_malloc_r+0x2f6>
 8006108:	4628      	mov	r0, r5
 800610a:	f107 0108 	add.w	r1, r7, #8
 800610e:	f7ff fc4f 	bl	80059b0 <_free_r>
 8006112:	4b06      	ldr	r3, [pc, #24]	; (800612c <_malloc_r+0x564>)
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	e6f3      	b.n	8005f00 <_malloc_r+0x338>
 8006118:	6873      	ldr	r3, [r6, #4]
 800611a:	ea23 0300 	bic.w	r3, r3, r0
 800611e:	6073      	str	r3, [r6, #4]
 8006120:	e79b      	b.n	800605a <_malloc_r+0x492>
 8006122:	0040      	lsls	r0, r0, #1
 8006124:	f108 0804 	add.w	r8, r8, #4
 8006128:	e79e      	b.n	8006068 <_malloc_r+0x4a0>
 800612a:	bf00      	nop
 800612c:	20000994 	.word	0x20000994

08006130 <memchr>:
 8006130:	0783      	lsls	r3, r0, #30
 8006132:	b470      	push	{r4, r5, r6}
 8006134:	b2c9      	uxtb	r1, r1
 8006136:	d00f      	beq.n	8006158 <memchr+0x28>
 8006138:	2a00      	cmp	r2, #0
 800613a:	d033      	beq.n	80061a4 <memchr+0x74>
 800613c:	7803      	ldrb	r3, [r0, #0]
 800613e:	3a01      	subs	r2, #1
 8006140:	428b      	cmp	r3, r1
 8006142:	d106      	bne.n	8006152 <memchr+0x22>
 8006144:	e01d      	b.n	8006182 <memchr+0x52>
 8006146:	2a00      	cmp	r2, #0
 8006148:	d02c      	beq.n	80061a4 <memchr+0x74>
 800614a:	7803      	ldrb	r3, [r0, #0]
 800614c:	3a01      	subs	r2, #1
 800614e:	428b      	cmp	r3, r1
 8006150:	d017      	beq.n	8006182 <memchr+0x52>
 8006152:	3001      	adds	r0, #1
 8006154:	0783      	lsls	r3, r0, #30
 8006156:	d1f6      	bne.n	8006146 <memchr+0x16>
 8006158:	2a03      	cmp	r2, #3
 800615a:	bf84      	itt	hi
 800615c:	ea41 2601 	orrhi.w	r6, r1, r1, lsl #8
 8006160:	ea46 4606 	orrhi.w	r6, r6, r6, lsl #16
 8006164:	d80f      	bhi.n	8006186 <memchr+0x56>
 8006166:	b1ea      	cbz	r2, 80061a4 <memchr+0x74>
 8006168:	7803      	ldrb	r3, [r0, #0]
 800616a:	3a01      	subs	r2, #1
 800616c:	428b      	cmp	r3, r1
 800616e:	4402      	add	r2, r0
 8006170:	d104      	bne.n	800617c <memchr+0x4c>
 8006172:	e006      	b.n	8006182 <memchr+0x52>
 8006174:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8006178:	428b      	cmp	r3, r1
 800617a:	d002      	beq.n	8006182 <memchr+0x52>
 800617c:	4290      	cmp	r0, r2
 800617e:	d1f9      	bne.n	8006174 <memchr+0x44>
 8006180:	2000      	movs	r0, #0
 8006182:	bc70      	pop	{r4, r5, r6}
 8006184:	4770      	bx	lr
 8006186:	4604      	mov	r4, r0
 8006188:	3004      	adds	r0, #4
 800618a:	6823      	ldr	r3, [r4, #0]
 800618c:	4073      	eors	r3, r6
 800618e:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
 8006192:	ea25 0303 	bic.w	r3, r5, r3
 8006196:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 800619a:	d105      	bne.n	80061a8 <memchr+0x78>
 800619c:	3a04      	subs	r2, #4
 800619e:	2a03      	cmp	r2, #3
 80061a0:	d8f1      	bhi.n	8006186 <memchr+0x56>
 80061a2:	e7e0      	b.n	8006166 <memchr+0x36>
 80061a4:	4610      	mov	r0, r2
 80061a6:	e7ec      	b.n	8006182 <memchr+0x52>
 80061a8:	4620      	mov	r0, r4
 80061aa:	e7dc      	b.n	8006166 <memchr+0x36>

080061ac <memcpy>:
 80061ac:	2a0f      	cmp	r2, #15
 80061ae:	b4f0      	push	{r4, r5, r6, r7}
 80061b0:	bf98      	it	ls
 80061b2:	4603      	movls	r3, r0
 80061b4:	d931      	bls.n	800621a <memcpy+0x6e>
 80061b6:	ea41 0300 	orr.w	r3, r1, r0
 80061ba:	079b      	lsls	r3, r3, #30
 80061bc:	d137      	bne.n	800622e <memcpy+0x82>
 80061be:	460c      	mov	r4, r1
 80061c0:	4603      	mov	r3, r0
 80061c2:	4615      	mov	r5, r2
 80061c4:	6826      	ldr	r6, [r4, #0]
 80061c6:	601e      	str	r6, [r3, #0]
 80061c8:	6866      	ldr	r6, [r4, #4]
 80061ca:	605e      	str	r6, [r3, #4]
 80061cc:	68a6      	ldr	r6, [r4, #8]
 80061ce:	609e      	str	r6, [r3, #8]
 80061d0:	68e6      	ldr	r6, [r4, #12]
 80061d2:	3d10      	subs	r5, #16
 80061d4:	60de      	str	r6, [r3, #12]
 80061d6:	3410      	adds	r4, #16
 80061d8:	3310      	adds	r3, #16
 80061da:	2d0f      	cmp	r5, #15
 80061dc:	d8f2      	bhi.n	80061c4 <memcpy+0x18>
 80061de:	f1a2 0410 	sub.w	r4, r2, #16
 80061e2:	f024 040f 	bic.w	r4, r4, #15
 80061e6:	f002 020f 	and.w	r2, r2, #15
 80061ea:	3410      	adds	r4, #16
 80061ec:	2a03      	cmp	r2, #3
 80061ee:	eb00 0304 	add.w	r3, r0, r4
 80061f2:	4421      	add	r1, r4
 80061f4:	d911      	bls.n	800621a <memcpy+0x6e>
 80061f6:	1f0e      	subs	r6, r1, #4
 80061f8:	461d      	mov	r5, r3
 80061fa:	4614      	mov	r4, r2
 80061fc:	f856 7f04 	ldr.w	r7, [r6, #4]!
 8006200:	3c04      	subs	r4, #4
 8006202:	2c03      	cmp	r4, #3
 8006204:	f845 7b04 	str.w	r7, [r5], #4
 8006208:	d8f8      	bhi.n	80061fc <memcpy+0x50>
 800620a:	1f14      	subs	r4, r2, #4
 800620c:	f024 0403 	bic.w	r4, r4, #3
 8006210:	3404      	adds	r4, #4
 8006212:	f002 0203 	and.w	r2, r2, #3
 8006216:	1909      	adds	r1, r1, r4
 8006218:	191b      	adds	r3, r3, r4
 800621a:	b132      	cbz	r2, 800622a <memcpy+0x7e>
 800621c:	3901      	subs	r1, #1
 800621e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006222:	3a01      	subs	r2, #1
 8006224:	f803 4b01 	strb.w	r4, [r3], #1
 8006228:	d1f9      	bne.n	800621e <memcpy+0x72>
 800622a:	bcf0      	pop	{r4, r5, r6, r7}
 800622c:	4770      	bx	lr
 800622e:	4603      	mov	r3, r0
 8006230:	e7f4      	b.n	800621c <memcpy+0x70>
 8006232:	bf00      	nop

08006234 <__malloc_lock>:
 8006234:	4770      	bx	lr
 8006236:	bf00      	nop

08006238 <__malloc_unlock>:
 8006238:	4770      	bx	lr
 800623a:	bf00      	nop

0800623c <_Balloc>:
 800623c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800623e:	b570      	push	{r4, r5, r6, lr}
 8006240:	4605      	mov	r5, r0
 8006242:	460c      	mov	r4, r1
 8006244:	b14b      	cbz	r3, 800625a <_Balloc+0x1e>
 8006246:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800624a:	b178      	cbz	r0, 800626c <_Balloc+0x30>
 800624c:	6802      	ldr	r2, [r0, #0]
 800624e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8006252:	2300      	movs	r3, #0
 8006254:	6103      	str	r3, [r0, #16]
 8006256:	60c3      	str	r3, [r0, #12]
 8006258:	bd70      	pop	{r4, r5, r6, pc}
 800625a:	2104      	movs	r1, #4
 800625c:	2221      	movs	r2, #33	; 0x21
 800625e:	f001 fa7f 	bl	8007760 <_calloc_r>
 8006262:	4603      	mov	r3, r0
 8006264:	64e8      	str	r0, [r5, #76]	; 0x4c
 8006266:	2800      	cmp	r0, #0
 8006268:	d1ed      	bne.n	8006246 <_Balloc+0xa>
 800626a:	bd70      	pop	{r4, r5, r6, pc}
 800626c:	2101      	movs	r1, #1
 800626e:	fa11 f604 	lsls.w	r6, r1, r4
 8006272:	1d72      	adds	r2, r6, #5
 8006274:	4628      	mov	r0, r5
 8006276:	0092      	lsls	r2, r2, #2
 8006278:	f001 fa72 	bl	8007760 <_calloc_r>
 800627c:	2800      	cmp	r0, #0
 800627e:	d0f4      	beq.n	800626a <_Balloc+0x2e>
 8006280:	6044      	str	r4, [r0, #4]
 8006282:	6086      	str	r6, [r0, #8]
 8006284:	e7e5      	b.n	8006252 <_Balloc+0x16>
 8006286:	bf00      	nop

08006288 <_Bfree>:
 8006288:	b131      	cbz	r1, 8006298 <_Bfree+0x10>
 800628a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800628c:	684a      	ldr	r2, [r1, #4]
 800628e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8006292:	6008      	str	r0, [r1, #0]
 8006294:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006298:	4770      	bx	lr
 800629a:	bf00      	nop

0800629c <__multadd>:
 800629c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800629e:	460d      	mov	r5, r1
 80062a0:	4606      	mov	r6, r0
 80062a2:	690c      	ldr	r4, [r1, #16]
 80062a4:	f101 0014 	add.w	r0, r1, #20
 80062a8:	b083      	sub	sp, #12
 80062aa:	2100      	movs	r1, #0
 80062ac:	6807      	ldr	r7, [r0, #0]
 80062ae:	fa1f fc87 	uxth.w	ip, r7
 80062b2:	0c3f      	lsrs	r7, r7, #16
 80062b4:	fb02 330c 	mla	r3, r2, ip, r3
 80062b8:	fb02 f707 	mul.w	r7, r2, r7
 80062bc:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80062c0:	b29b      	uxth	r3, r3
 80062c2:	eb03 4307 	add.w	r3, r3, r7, lsl #16
 80062c6:	3101      	adds	r1, #1
 80062c8:	f840 3b04 	str.w	r3, [r0], #4
 80062cc:	0c3b      	lsrs	r3, r7, #16
 80062ce:	428c      	cmp	r4, r1
 80062d0:	dcec      	bgt.n	80062ac <__multadd+0x10>
 80062d2:	b13b      	cbz	r3, 80062e4 <__multadd+0x48>
 80062d4:	68aa      	ldr	r2, [r5, #8]
 80062d6:	4294      	cmp	r4, r2
 80062d8:	da07      	bge.n	80062ea <__multadd+0x4e>
 80062da:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 80062de:	3401      	adds	r4, #1
 80062e0:	6153      	str	r3, [r2, #20]
 80062e2:	612c      	str	r4, [r5, #16]
 80062e4:	4628      	mov	r0, r5
 80062e6:	b003      	add	sp, #12
 80062e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062ea:	6869      	ldr	r1, [r5, #4]
 80062ec:	9301      	str	r3, [sp, #4]
 80062ee:	3101      	adds	r1, #1
 80062f0:	4630      	mov	r0, r6
 80062f2:	f7ff ffa3 	bl	800623c <_Balloc>
 80062f6:	692a      	ldr	r2, [r5, #16]
 80062f8:	3202      	adds	r2, #2
 80062fa:	f105 010c 	add.w	r1, r5, #12
 80062fe:	4607      	mov	r7, r0
 8006300:	0092      	lsls	r2, r2, #2
 8006302:	f100 000c 	add.w	r0, r0, #12
 8006306:	f7ff ff51 	bl	80061ac <memcpy>
 800630a:	6869      	ldr	r1, [r5, #4]
 800630c:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 800630e:	9b01      	ldr	r3, [sp, #4]
 8006310:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 8006314:	6028      	str	r0, [r5, #0]
 8006316:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 800631a:	463d      	mov	r5, r7
 800631c:	e7dd      	b.n	80062da <__multadd+0x3e>
 800631e:	bf00      	nop

08006320 <__s2b>:
 8006320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006324:	461e      	mov	r6, r3
 8006326:	f648 6339 	movw	r3, #36409	; 0x8e39
 800632a:	f106 0408 	add.w	r4, r6, #8
 800632e:	f6c3 03e3 	movt	r3, #14563	; 0x38e3
 8006332:	fb83 5304 	smull	r5, r3, r3, r4
 8006336:	17e4      	asrs	r4, r4, #31
 8006338:	ebc4 0363 	rsb	r3, r4, r3, asr #1
 800633c:	460f      	mov	r7, r1
 800633e:	2100      	movs	r1, #0
 8006340:	2b01      	cmp	r3, #1
 8006342:	4604      	mov	r4, r0
 8006344:	4690      	mov	r8, r2
 8006346:	dd05      	ble.n	8006354 <__s2b+0x34>
 8006348:	2201      	movs	r2, #1
 800634a:	2100      	movs	r1, #0
 800634c:	0052      	lsls	r2, r2, #1
 800634e:	3101      	adds	r1, #1
 8006350:	4293      	cmp	r3, r2
 8006352:	dcfb      	bgt.n	800634c <__s2b+0x2c>
 8006354:	4620      	mov	r0, r4
 8006356:	f7ff ff71 	bl	800623c <_Balloc>
 800635a:	9b08      	ldr	r3, [sp, #32]
 800635c:	6143      	str	r3, [r0, #20]
 800635e:	2301      	movs	r3, #1
 8006360:	f1b8 0f09 	cmp.w	r8, #9
 8006364:	4601      	mov	r1, r0
 8006366:	6103      	str	r3, [r0, #16]
 8006368:	dd23      	ble.n	80063b2 <__s2b+0x92>
 800636a:	f107 0909 	add.w	r9, r7, #9
 800636e:	464d      	mov	r5, r9
 8006370:	4447      	add	r7, r8
 8006372:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006376:	220a      	movs	r2, #10
 8006378:	3b30      	subs	r3, #48	; 0x30
 800637a:	4620      	mov	r0, r4
 800637c:	f7ff ff8e 	bl	800629c <__multadd>
 8006380:	42bd      	cmp	r5, r7
 8006382:	4601      	mov	r1, r0
 8006384:	d1f5      	bne.n	8006372 <__s2b+0x52>
 8006386:	eb09 0708 	add.w	r7, r9, r8
 800638a:	3f08      	subs	r7, #8
 800638c:	4546      	cmp	r6, r8
 800638e:	dd0d      	ble.n	80063ac <__s2b+0x8c>
 8006390:	ebc8 0707 	rsb	r7, r8, r7
 8006394:	f817 3008 	ldrb.w	r3, [r7, r8]
 8006398:	220a      	movs	r2, #10
 800639a:	3b30      	subs	r3, #48	; 0x30
 800639c:	4620      	mov	r0, r4
 800639e:	f7ff ff7d 	bl	800629c <__multadd>
 80063a2:	f108 0801 	add.w	r8, r8, #1
 80063a6:	45b0      	cmp	r8, r6
 80063a8:	4601      	mov	r1, r0
 80063aa:	d1f3      	bne.n	8006394 <__s2b+0x74>
 80063ac:	4608      	mov	r0, r1
 80063ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063b2:	370a      	adds	r7, #10
 80063b4:	f04f 0809 	mov.w	r8, #9
 80063b8:	e7e8      	b.n	800638c <__s2b+0x6c>
 80063ba:	bf00      	nop

080063bc <__hi0bits>:
 80063bc:	4603      	mov	r3, r0
 80063be:	2000      	movs	r0, #0
 80063c0:	0c1a      	lsrs	r2, r3, #16
 80063c2:	d101      	bne.n	80063c8 <__hi0bits+0xc>
 80063c4:	041b      	lsls	r3, r3, #16
 80063c6:	2010      	movs	r0, #16
 80063c8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80063cc:	d101      	bne.n	80063d2 <__hi0bits+0x16>
 80063ce:	3008      	adds	r0, #8
 80063d0:	021b      	lsls	r3, r3, #8
 80063d2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80063d6:	d101      	bne.n	80063dc <__hi0bits+0x20>
 80063d8:	3004      	adds	r0, #4
 80063da:	011b      	lsls	r3, r3, #4
 80063dc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80063e0:	d101      	bne.n	80063e6 <__hi0bits+0x2a>
 80063e2:	3002      	adds	r0, #2
 80063e4:	009b      	lsls	r3, r3, #2
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	db02      	blt.n	80063f0 <__hi0bits+0x34>
 80063ea:	005b      	lsls	r3, r3, #1
 80063ec:	d401      	bmi.n	80063f2 <__hi0bits+0x36>
 80063ee:	2020      	movs	r0, #32
 80063f0:	4770      	bx	lr
 80063f2:	3001      	adds	r0, #1
 80063f4:	4770      	bx	lr
 80063f6:	bf00      	nop

080063f8 <__lo0bits>:
 80063f8:	6803      	ldr	r3, [r0, #0]
 80063fa:	4602      	mov	r2, r0
 80063fc:	f013 0007 	ands.w	r0, r3, #7
 8006400:	d007      	beq.n	8006412 <__lo0bits+0x1a>
 8006402:	07d9      	lsls	r1, r3, #31
 8006404:	d41f      	bmi.n	8006446 <__lo0bits+0x4e>
 8006406:	0798      	lsls	r0, r3, #30
 8006408:	d41f      	bmi.n	800644a <__lo0bits+0x52>
 800640a:	089b      	lsrs	r3, r3, #2
 800640c:	6013      	str	r3, [r2, #0]
 800640e:	2002      	movs	r0, #2
 8006410:	4770      	bx	lr
 8006412:	b299      	uxth	r1, r3
 8006414:	b909      	cbnz	r1, 800641a <__lo0bits+0x22>
 8006416:	0c1b      	lsrs	r3, r3, #16
 8006418:	2010      	movs	r0, #16
 800641a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800641e:	d101      	bne.n	8006424 <__lo0bits+0x2c>
 8006420:	3008      	adds	r0, #8
 8006422:	0a1b      	lsrs	r3, r3, #8
 8006424:	0719      	lsls	r1, r3, #28
 8006426:	d101      	bne.n	800642c <__lo0bits+0x34>
 8006428:	3004      	adds	r0, #4
 800642a:	091b      	lsrs	r3, r3, #4
 800642c:	0799      	lsls	r1, r3, #30
 800642e:	d101      	bne.n	8006434 <__lo0bits+0x3c>
 8006430:	3002      	adds	r0, #2
 8006432:	089b      	lsrs	r3, r3, #2
 8006434:	07d9      	lsls	r1, r3, #31
 8006436:	d404      	bmi.n	8006442 <__lo0bits+0x4a>
 8006438:	085b      	lsrs	r3, r3, #1
 800643a:	d101      	bne.n	8006440 <__lo0bits+0x48>
 800643c:	2020      	movs	r0, #32
 800643e:	4770      	bx	lr
 8006440:	3001      	adds	r0, #1
 8006442:	6013      	str	r3, [r2, #0]
 8006444:	4770      	bx	lr
 8006446:	2000      	movs	r0, #0
 8006448:	4770      	bx	lr
 800644a:	085b      	lsrs	r3, r3, #1
 800644c:	6013      	str	r3, [r2, #0]
 800644e:	2001      	movs	r0, #1
 8006450:	4770      	bx	lr
 8006452:	bf00      	nop

08006454 <__i2b>:
 8006454:	b510      	push	{r4, lr}
 8006456:	460c      	mov	r4, r1
 8006458:	2101      	movs	r1, #1
 800645a:	f7ff feef 	bl	800623c <_Balloc>
 800645e:	2201      	movs	r2, #1
 8006460:	6144      	str	r4, [r0, #20]
 8006462:	6102      	str	r2, [r0, #16]
 8006464:	bd10      	pop	{r4, pc}
 8006466:	bf00      	nop

08006468 <__multiply>:
 8006468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800646c:	690f      	ldr	r7, [r1, #16]
 800646e:	6916      	ldr	r6, [r2, #16]
 8006470:	42b7      	cmp	r7, r6
 8006472:	b085      	sub	sp, #20
 8006474:	460d      	mov	r5, r1
 8006476:	4692      	mov	sl, r2
 8006478:	da04      	bge.n	8006484 <__multiply+0x1c>
 800647a:	463a      	mov	r2, r7
 800647c:	4655      	mov	r5, sl
 800647e:	4637      	mov	r7, r6
 8006480:	468a      	mov	sl, r1
 8006482:	4616      	mov	r6, r2
 8006484:	68ab      	ldr	r3, [r5, #8]
 8006486:	6869      	ldr	r1, [r5, #4]
 8006488:	19bc      	adds	r4, r7, r6
 800648a:	429c      	cmp	r4, r3
 800648c:	bfc8      	it	gt
 800648e:	3101      	addgt	r1, #1
 8006490:	f7ff fed4 	bl	800623c <_Balloc>
 8006494:	1d21      	adds	r1, r4, #4
 8006496:	eb00 0b81 	add.w	fp, r0, r1, lsl #2
 800649a:	f100 0914 	add.w	r9, r0, #20
 800649e:	f10b 0b04 	add.w	fp, fp, #4
 80064a2:	45d9      	cmp	r9, fp
 80064a4:	9000      	str	r0, [sp, #0]
 80064a6:	9101      	str	r1, [sp, #4]
 80064a8:	d205      	bcs.n	80064b6 <__multiply+0x4e>
 80064aa:	464b      	mov	r3, r9
 80064ac:	2200      	movs	r2, #0
 80064ae:	f843 2b04 	str.w	r2, [r3], #4
 80064b2:	459b      	cmp	fp, r3
 80064b4:	d8fb      	bhi.n	80064ae <__multiply+0x46>
 80064b6:	eb0a 0686 	add.w	r6, sl, r6, lsl #2
 80064ba:	eb05 0787 	add.w	r7, r5, r7, lsl #2
 80064be:	f10a 0a14 	add.w	sl, sl, #20
 80064c2:	f106 0814 	add.w	r8, r6, #20
 80064c6:	3514      	adds	r5, #20
 80064c8:	3714      	adds	r7, #20
 80064ca:	45c2      	cmp	sl, r8
 80064cc:	d24f      	bcs.n	800656e <__multiply+0x106>
 80064ce:	f8cd b008 	str.w	fp, [sp, #8]
 80064d2:	9403      	str	r4, [sp, #12]
 80064d4:	46ab      	mov	fp, r5
 80064d6:	f85a 5b04 	ldr.w	r5, [sl], #4
 80064da:	b2ac      	uxth	r4, r5
 80064dc:	b1e4      	cbz	r4, 8006518 <__multiply+0xb0>
 80064de:	465a      	mov	r2, fp
 80064e0:	464b      	mov	r3, r9
 80064e2:	2100      	movs	r1, #0
 80064e4:	f852 6b04 	ldr.w	r6, [r2], #4
 80064e8:	681d      	ldr	r5, [r3, #0]
 80064ea:	b2b0      	uxth	r0, r6
 80064ec:	fa11 f185 	uxtah	r1, r1, r5
 80064f0:	0c36      	lsrs	r6, r6, #16
 80064f2:	0c2d      	lsrs	r5, r5, #16
 80064f4:	fb04 1000 	mla	r0, r4, r0, r1
 80064f8:	fb04 5106 	mla	r1, r4, r6, r5
 80064fc:	eb01 4110 	add.w	r1, r1, r0, lsr #16
 8006500:	b280      	uxth	r0, r0
 8006502:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8006506:	0c09      	lsrs	r1, r1, #16
 8006508:	4297      	cmp	r7, r2
 800650a:	461d      	mov	r5, r3
 800650c:	f843 0b04 	str.w	r0, [r3], #4
 8006510:	d8e8      	bhi.n	80064e4 <__multiply+0x7c>
 8006512:	6069      	str	r1, [r5, #4]
 8006514:	f85a 5c04 	ldr.w	r5, [sl, #-4]
 8006518:	0c2d      	lsrs	r5, r5, #16
 800651a:	d021      	beq.n	8006560 <__multiply+0xf8>
 800651c:	f8d9 6000 	ldr.w	r6, [r9]
 8006520:	465b      	mov	r3, fp
 8006522:	4630      	mov	r0, r6
 8006524:	4649      	mov	r1, r9
 8006526:	f04f 0c00 	mov.w	ip, #0
 800652a:	e000      	b.n	800652e <__multiply+0xc6>
 800652c:	4611      	mov	r1, r2
 800652e:	881a      	ldrh	r2, [r3, #0]
 8006530:	eb0c 4c10 	add.w	ip, ip, r0, lsr #16
 8006534:	fb05 cc02 	mla	ip, r5, r2, ip
 8006538:	b2b6      	uxth	r6, r6
 800653a:	460a      	mov	r2, r1
 800653c:	ea46 460c 	orr.w	r6, r6, ip, lsl #16
 8006540:	f842 6b04 	str.w	r6, [r2], #4
 8006544:	f853 6b04 	ldr.w	r6, [r3], #4
 8006548:	6848      	ldr	r0, [r1, #4]
 800654a:	0c36      	lsrs	r6, r6, #16
 800654c:	b284      	uxth	r4, r0
 800654e:	fb05 4606 	mla	r6, r5, r6, r4
 8006552:	eb06 461c 	add.w	r6, r6, ip, lsr #16
 8006556:	429f      	cmp	r7, r3
 8006558:	ea4f 4c16 	mov.w	ip, r6, lsr #16
 800655c:	d8e6      	bhi.n	800652c <__multiply+0xc4>
 800655e:	604e      	str	r6, [r1, #4]
 8006560:	45d0      	cmp	r8, sl
 8006562:	f109 0904 	add.w	r9, r9, #4
 8006566:	d8b6      	bhi.n	80064d6 <__multiply+0x6e>
 8006568:	f8dd b008 	ldr.w	fp, [sp, #8]
 800656c:	9c03      	ldr	r4, [sp, #12]
 800656e:	2c00      	cmp	r4, #0
 8006570:	dd0c      	ble.n	800658c <__multiply+0x124>
 8006572:	e89d 0006 	ldmia.w	sp, {r1, r2}
 8006576:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 800657a:	b93b      	cbnz	r3, 800658c <__multiply+0x124>
 800657c:	f1ab 0b04 	sub.w	fp, fp, #4
 8006580:	e002      	b.n	8006588 <__multiply+0x120>
 8006582:	f85b 3d04 	ldr.w	r3, [fp, #-4]!
 8006586:	b90b      	cbnz	r3, 800658c <__multiply+0x124>
 8006588:	3c01      	subs	r4, #1
 800658a:	d1fa      	bne.n	8006582 <__multiply+0x11a>
 800658c:	9a00      	ldr	r2, [sp, #0]
 800658e:	6114      	str	r4, [r2, #16]
 8006590:	4610      	mov	r0, r2
 8006592:	b005      	add	sp, #20
 8006594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006598 <__pow5mult>:
 8006598:	f012 0303 	ands.w	r3, r2, #3
 800659c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065a0:	4615      	mov	r5, r2
 80065a2:	4604      	mov	r4, r0
 80065a4:	4688      	mov	r8, r1
 80065a6:	d12d      	bne.n	8006604 <__pow5mult+0x6c>
 80065a8:	10ad      	asrs	r5, r5, #2
 80065aa:	d01d      	beq.n	80065e8 <__pow5mult+0x50>
 80065ac:	6ca7      	ldr	r7, [r4, #72]	; 0x48
 80065ae:	b92f      	cbnz	r7, 80065bc <__pow5mult+0x24>
 80065b0:	e031      	b.n	8006616 <__pow5mult+0x7e>
 80065b2:	106d      	asrs	r5, r5, #1
 80065b4:	d018      	beq.n	80065e8 <__pow5mult+0x50>
 80065b6:	683e      	ldr	r6, [r7, #0]
 80065b8:	b1ce      	cbz	r6, 80065ee <__pow5mult+0x56>
 80065ba:	4637      	mov	r7, r6
 80065bc:	07e8      	lsls	r0, r5, #31
 80065be:	d5f8      	bpl.n	80065b2 <__pow5mult+0x1a>
 80065c0:	4641      	mov	r1, r8
 80065c2:	463a      	mov	r2, r7
 80065c4:	4620      	mov	r0, r4
 80065c6:	f7ff ff4f 	bl	8006468 <__multiply>
 80065ca:	f1b8 0f00 	cmp.w	r8, #0
 80065ce:	d017      	beq.n	8006600 <__pow5mult+0x68>
 80065d0:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80065d4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80065d6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80065da:	106d      	asrs	r5, r5, #1
 80065dc:	f8c8 1000 	str.w	r1, [r8]
 80065e0:	f843 8022 	str.w	r8, [r3, r2, lsl #2]
 80065e4:	4680      	mov	r8, r0
 80065e6:	d1e6      	bne.n	80065b6 <__pow5mult+0x1e>
 80065e8:	4640      	mov	r0, r8
 80065ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065ee:	4639      	mov	r1, r7
 80065f0:	463a      	mov	r2, r7
 80065f2:	4620      	mov	r0, r4
 80065f4:	f7ff ff38 	bl	8006468 <__multiply>
 80065f8:	6038      	str	r0, [r7, #0]
 80065fa:	6006      	str	r6, [r0, #0]
 80065fc:	4607      	mov	r7, r0
 80065fe:	e7dd      	b.n	80065bc <__pow5mult+0x24>
 8006600:	4680      	mov	r8, r0
 8006602:	e7d6      	b.n	80065b2 <__pow5mult+0x1a>
 8006604:	1e5e      	subs	r6, r3, #1
 8006606:	4a09      	ldr	r2, [pc, #36]	; (800662c <__pow5mult+0x94>)
 8006608:	2300      	movs	r3, #0
 800660a:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 800660e:	f7ff fe45 	bl	800629c <__multadd>
 8006612:	4680      	mov	r8, r0
 8006614:	e7c8      	b.n	80065a8 <__pow5mult+0x10>
 8006616:	4620      	mov	r0, r4
 8006618:	f240 2171 	movw	r1, #625	; 0x271
 800661c:	f7ff ff1a 	bl	8006454 <__i2b>
 8006620:	2300      	movs	r3, #0
 8006622:	64a0      	str	r0, [r4, #72]	; 0x48
 8006624:	4607      	mov	r7, r0
 8006626:	6003      	str	r3, [r0, #0]
 8006628:	e7c8      	b.n	80065bc <__pow5mult+0x24>
 800662a:	bf00      	nop
 800662c:	08008740 	.word	0x08008740

08006630 <__lshift>:
 8006630:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006634:	4691      	mov	r9, r2
 8006636:	690a      	ldr	r2, [r1, #16]
 8006638:	688b      	ldr	r3, [r1, #8]
 800663a:	ea4f 1769 	mov.w	r7, r9, asr #5
 800663e:	eb07 0b02 	add.w	fp, r7, r2
 8006642:	f10b 0501 	add.w	r5, fp, #1
 8006646:	429d      	cmp	r5, r3
 8006648:	460c      	mov	r4, r1
 800664a:	4606      	mov	r6, r0
 800664c:	6849      	ldr	r1, [r1, #4]
 800664e:	dd03      	ble.n	8006658 <__lshift+0x28>
 8006650:	005b      	lsls	r3, r3, #1
 8006652:	3101      	adds	r1, #1
 8006654:	429d      	cmp	r5, r3
 8006656:	dcfb      	bgt.n	8006650 <__lshift+0x20>
 8006658:	4630      	mov	r0, r6
 800665a:	f7ff fdef 	bl	800623c <_Balloc>
 800665e:	2f00      	cmp	r7, #0
 8006660:	f100 0314 	add.w	r3, r0, #20
 8006664:	dd09      	ble.n	800667a <__lshift+0x4a>
 8006666:	2200      	movs	r2, #0
 8006668:	4611      	mov	r1, r2
 800666a:	3201      	adds	r2, #1
 800666c:	42ba      	cmp	r2, r7
 800666e:	f843 1b04 	str.w	r1, [r3], #4
 8006672:	d1fa      	bne.n	800666a <__lshift+0x3a>
 8006674:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 8006678:	3314      	adds	r3, #20
 800667a:	6922      	ldr	r2, [r4, #16]
 800667c:	f019 091f 	ands.w	r9, r9, #31
 8006680:	eb04 0c82 	add.w	ip, r4, r2, lsl #2
 8006684:	f104 0114 	add.w	r1, r4, #20
 8006688:	f10c 0c14 	add.w	ip, ip, #20
 800668c:	d022      	beq.n	80066d4 <__lshift+0xa4>
 800668e:	f1c9 0a20 	rsb	sl, r9, #32
 8006692:	2200      	movs	r2, #0
 8006694:	e000      	b.n	8006698 <__lshift+0x68>
 8006696:	463b      	mov	r3, r7
 8006698:	f8d1 8000 	ldr.w	r8, [r1]
 800669c:	461f      	mov	r7, r3
 800669e:	fa08 f809 	lsl.w	r8, r8, r9
 80066a2:	ea48 0202 	orr.w	r2, r8, r2
 80066a6:	f847 2b04 	str.w	r2, [r7], #4
 80066aa:	f851 2b04 	ldr.w	r2, [r1], #4
 80066ae:	458c      	cmp	ip, r1
 80066b0:	fa22 f20a 	lsr.w	r2, r2, sl
 80066b4:	d8ef      	bhi.n	8006696 <__lshift+0x66>
 80066b6:	605a      	str	r2, [r3, #4]
 80066b8:	b10a      	cbz	r2, 80066be <__lshift+0x8e>
 80066ba:	f10b 0502 	add.w	r5, fp, #2
 80066be:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 80066c0:	6862      	ldr	r2, [r4, #4]
 80066c2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80066c6:	3d01      	subs	r5, #1
 80066c8:	6105      	str	r5, [r0, #16]
 80066ca:	6021      	str	r1, [r4, #0]
 80066cc:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80066d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066d4:	f851 2b04 	ldr.w	r2, [r1], #4
 80066d8:	458c      	cmp	ip, r1
 80066da:	f843 2b04 	str.w	r2, [r3], #4
 80066de:	d9ee      	bls.n	80066be <__lshift+0x8e>
 80066e0:	f851 2b04 	ldr.w	r2, [r1], #4
 80066e4:	458c      	cmp	ip, r1
 80066e6:	f843 2b04 	str.w	r2, [r3], #4
 80066ea:	d8f3      	bhi.n	80066d4 <__lshift+0xa4>
 80066ec:	e7e7      	b.n	80066be <__lshift+0x8e>
 80066ee:	bf00      	nop

080066f0 <__mcmp>:
 80066f0:	4603      	mov	r3, r0
 80066f2:	690a      	ldr	r2, [r1, #16]
 80066f4:	6900      	ldr	r0, [r0, #16]
 80066f6:	1a80      	subs	r0, r0, r2
 80066f8:	b430      	push	{r4, r5}
 80066fa:	d111      	bne.n	8006720 <__mcmp+0x30>
 80066fc:	3204      	adds	r2, #4
 80066fe:	0094      	lsls	r4, r2, #2
 8006700:	191a      	adds	r2, r3, r4
 8006702:	1909      	adds	r1, r1, r4
 8006704:	3314      	adds	r3, #20
 8006706:	3204      	adds	r2, #4
 8006708:	3104      	adds	r1, #4
 800670a:	f852 5c04 	ldr.w	r5, [r2, #-4]
 800670e:	f851 4c04 	ldr.w	r4, [r1, #-4]
 8006712:	3a04      	subs	r2, #4
 8006714:	42a5      	cmp	r5, r4
 8006716:	f1a1 0104 	sub.w	r1, r1, #4
 800671a:	d103      	bne.n	8006724 <__mcmp+0x34>
 800671c:	4293      	cmp	r3, r2
 800671e:	d3f4      	bcc.n	800670a <__mcmp+0x1a>
 8006720:	bc30      	pop	{r4, r5}
 8006722:	4770      	bx	lr
 8006724:	bf38      	it	cc
 8006726:	f04f 30ff 	movcc.w	r0, #4294967295	; 0xffffffff
 800672a:	d3f9      	bcc.n	8006720 <__mcmp+0x30>
 800672c:	2001      	movs	r0, #1
 800672e:	e7f7      	b.n	8006720 <__mcmp+0x30>

08006730 <__mdiff>:
 8006730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006734:	460c      	mov	r4, r1
 8006736:	4606      	mov	r6, r0
 8006738:	4611      	mov	r1, r2
 800673a:	4620      	mov	r0, r4
 800673c:	4615      	mov	r5, r2
 800673e:	f7ff ffd7 	bl	80066f0 <__mcmp>
 8006742:	1e07      	subs	r7, r0, #0
 8006744:	d058      	beq.n	80067f8 <__mdiff+0xc8>
 8006746:	db52      	blt.n	80067ee <__mdiff+0xbe>
 8006748:	2700      	movs	r7, #0
 800674a:	4630      	mov	r0, r6
 800674c:	6861      	ldr	r1, [r4, #4]
 800674e:	f7ff fd75 	bl	800623c <_Balloc>
 8006752:	f8d4 c010 	ldr.w	ip, [r4, #16]
 8006756:	692b      	ldr	r3, [r5, #16]
 8006758:	60c7      	str	r7, [r0, #12]
 800675a:	eb05 0883 	add.w	r8, r5, r3, lsl #2
 800675e:	eb04 078c 	add.w	r7, r4, ip, lsl #2
 8006762:	3714      	adds	r7, #20
 8006764:	f108 0814 	add.w	r8, r8, #20
 8006768:	3414      	adds	r4, #20
 800676a:	3514      	adds	r5, #20
 800676c:	f100 0914 	add.w	r9, r0, #20
 8006770:	2600      	movs	r6, #0
 8006772:	f854 3b04 	ldr.w	r3, [r4], #4
 8006776:	f855 2b04 	ldr.w	r2, [r5], #4
 800677a:	fa16 f183 	uxtah	r1, r6, r3
 800677e:	fa1f fa82 	uxth.w	sl, r2
 8006782:	0c12      	lsrs	r2, r2, #16
 8006784:	ebc2 4613 	rsb	r6, r2, r3, lsr #16
 8006788:	ebca 0101 	rsb	r1, sl, r1
 800678c:	eb06 4621 	add.w	r6, r6, r1, asr #16
 8006790:	464b      	mov	r3, r9
 8006792:	b289      	uxth	r1, r1
 8006794:	ea41 4106 	orr.w	r1, r1, r6, lsl #16
 8006798:	f843 1b04 	str.w	r1, [r3], #4
 800679c:	1436      	asrs	r6, r6, #16
 800679e:	45a8      	cmp	r8, r5
 80067a0:	4622      	mov	r2, r4
 80067a2:	4699      	mov	r9, r3
 80067a4:	d8e5      	bhi.n	8006772 <__mdiff+0x42>
 80067a6:	42a7      	cmp	r7, r4
 80067a8:	4698      	mov	r8, r3
 80067aa:	d914      	bls.n	80067d6 <__mdiff+0xa6>
 80067ac:	f852 5b04 	ldr.w	r5, [r2], #4
 80067b0:	fa16 f685 	uxtah	r6, r6, r5
 80067b4:	0c2d      	lsrs	r5, r5, #16
 80067b6:	eb05 4526 	add.w	r5, r5, r6, asr #16
 80067ba:	b2b6      	uxth	r6, r6
 80067bc:	ea46 4105 	orr.w	r1, r6, r5, lsl #16
 80067c0:	142e      	asrs	r6, r5, #16
 80067c2:	4297      	cmp	r7, r2
 80067c4:	f843 1b04 	str.w	r1, [r3], #4
 80067c8:	d8f0      	bhi.n	80067ac <__mdiff+0x7c>
 80067ca:	43e3      	mvns	r3, r4
 80067cc:	19db      	adds	r3, r3, r7
 80067ce:	f023 0303 	bic.w	r3, r3, #3
 80067d2:	3304      	adds	r3, #4
 80067d4:	4443      	add	r3, r8
 80067d6:	b931      	cbnz	r1, 80067e6 <__mdiff+0xb6>
 80067d8:	3b04      	subs	r3, #4
 80067da:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80067de:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 80067e2:	2a00      	cmp	r2, #0
 80067e4:	d0f9      	beq.n	80067da <__mdiff+0xaa>
 80067e6:	f8c0 c010 	str.w	ip, [r0, #16]
 80067ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067ee:	4623      	mov	r3, r4
 80067f0:	2701      	movs	r7, #1
 80067f2:	462c      	mov	r4, r5
 80067f4:	461d      	mov	r5, r3
 80067f6:	e7a8      	b.n	800674a <__mdiff+0x1a>
 80067f8:	4630      	mov	r0, r6
 80067fa:	4639      	mov	r1, r7
 80067fc:	f7ff fd1e 	bl	800623c <_Balloc>
 8006800:	2301      	movs	r3, #1
 8006802:	6103      	str	r3, [r0, #16]
 8006804:	6147      	str	r7, [r0, #20]
 8006806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800680a:	bf00      	nop

0800680c <__ulp>:
 800680c:	2300      	movs	r3, #0
 800680e:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 8006812:	400b      	ands	r3, r1
 8006814:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8006818:	2b00      	cmp	r3, #0
 800681a:	dd02      	ble.n	8006822 <__ulp+0x16>
 800681c:	4619      	mov	r1, r3
 800681e:	2000      	movs	r0, #0
 8006820:	4770      	bx	lr
 8006822:	425b      	negs	r3, r3
 8006824:	151b      	asrs	r3, r3, #20
 8006826:	2100      	movs	r1, #0
 8006828:	2b13      	cmp	r3, #19
 800682a:	dd0b      	ble.n	8006844 <__ulp+0x38>
 800682c:	2b32      	cmp	r3, #50	; 0x32
 800682e:	dd02      	ble.n	8006836 <__ulp+0x2a>
 8006830:	2301      	movs	r3, #1
 8006832:	4618      	mov	r0, r3
 8006834:	4770      	bx	lr
 8006836:	2201      	movs	r2, #1
 8006838:	f1c3 0333 	rsb	r3, r3, #51	; 0x33
 800683c:	fa12 f303 	lsls.w	r3, r2, r3
 8006840:	4618      	mov	r0, r3
 8006842:	4770      	bx	lr
 8006844:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006848:	fa52 f103 	asrs.w	r1, r2, r3
 800684c:	2000      	movs	r0, #0
 800684e:	4770      	bx	lr

08006850 <__b2d>:
 8006850:	6902      	ldr	r2, [r0, #16]
 8006852:	3204      	adds	r2, #4
 8006854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006856:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 800685a:	4603      	mov	r3, r0
 800685c:	eb00 0482 	add.w	r4, r0, r2, lsl #2
 8006860:	4628      	mov	r0, r5
 8006862:	460f      	mov	r7, r1
 8006864:	f103 0614 	add.w	r6, r3, #20
 8006868:	f7ff fda8 	bl	80063bc <__hi0bits>
 800686c:	f1c0 0320 	rsb	r3, r0, #32
 8006870:	280a      	cmp	r0, #10
 8006872:	603b      	str	r3, [r7, #0]
 8006874:	4623      	mov	r3, r4
 8006876:	dc14      	bgt.n	80068a2 <__b2d+0x52>
 8006878:	f1c0 010b 	rsb	r1, r0, #11
 800687c:	fa35 f701 	lsrs.w	r7, r5, r1
 8006880:	f047 577f 	orr.w	r7, r7, #1069547520	; 0x3fc00000
 8006884:	42a6      	cmp	r6, r4
 8006886:	f447 1340 	orr.w	r3, r7, #3145728	; 0x300000
 800688a:	d22e      	bcs.n	80068ea <__b2d+0x9a>
 800688c:	f854 4c04 	ldr.w	r4, [r4, #-4]
 8006890:	fa34 f101 	lsrs.w	r1, r4, r1
 8006894:	3015      	adds	r0, #21
 8006896:	4085      	lsls	r5, r0
 8006898:	ea41 0205 	orr.w	r2, r1, r5
 800689c:	4610      	mov	r0, r2
 800689e:	4619      	mov	r1, r3
 80068a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068a2:	2100      	movs	r1, #0
 80068a4:	42a6      	cmp	r6, r4
 80068a6:	d202      	bcs.n	80068ae <__b2d+0x5e>
 80068a8:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80068ac:	3c04      	subs	r4, #4
 80068ae:	f1b0 070b 	subs.w	r7, r0, #11
 80068b2:	bf02      	ittt	eq
 80068b4:	f045 557f 	orreq.w	r5, r5, #1069547520	; 0x3fc00000
 80068b8:	f445 1340 	orreq.w	r3, r5, #3145728	; 0x300000
 80068bc:	460a      	moveq	r2, r1
 80068be:	d0ed      	beq.n	800689c <__b2d+0x4c>
 80068c0:	40bd      	lsls	r5, r7
 80068c2:	f1c0 002b 	rsb	r0, r0, #43	; 0x2b
 80068c6:	f045 557f 	orr.w	r5, r5, #1069547520	; 0x3fc00000
 80068ca:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80068ce:	fa21 fc00 	lsr.w	ip, r1, r0
 80068d2:	42b4      	cmp	r4, r6
 80068d4:	ea45 030c 	orr.w	r3, r5, ip
 80068d8:	d909      	bls.n	80068ee <__b2d+0x9e>
 80068da:	f854 4c04 	ldr.w	r4, [r4, #-4]
 80068de:	fa34 f000 	lsrs.w	r0, r4, r0
 80068e2:	40b9      	lsls	r1, r7
 80068e4:	ea40 0201 	orr.w	r2, r0, r1
 80068e8:	e7d8      	b.n	800689c <__b2d+0x4c>
 80068ea:	2100      	movs	r1, #0
 80068ec:	e7d2      	b.n	8006894 <__b2d+0x44>
 80068ee:	2000      	movs	r0, #0
 80068f0:	e7f7      	b.n	80068e2 <__b2d+0x92>
 80068f2:	bf00      	nop

080068f4 <__d2b>:
 80068f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80068f8:	b083      	sub	sp, #12
 80068fa:	2101      	movs	r1, #1
 80068fc:	461d      	mov	r5, r3
 80068fe:	4614      	mov	r4, r2
 8006900:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8006902:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006904:	f7ff fc9a 	bl	800623c <_Balloc>
 8006908:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
 800690c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006910:	f3c5 590a 	ubfx	r9, r5, #20, #11
 8006914:	4680      	mov	r8, r0
 8006916:	9301      	str	r3, [sp, #4]
 8006918:	f1b9 0f00 	cmp.w	r9, #0
 800691c:	d002      	beq.n	8006924 <__d2b+0x30>
 800691e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006922:	9301      	str	r3, [sp, #4]
 8006924:	2c00      	cmp	r4, #0
 8006926:	d025      	beq.n	8006974 <__d2b+0x80>
 8006928:	a802      	add	r0, sp, #8
 800692a:	f840 4d08 	str.w	r4, [r0, #-8]!
 800692e:	4668      	mov	r0, sp
 8006930:	f7ff fd62 	bl	80063f8 <__lo0bits>
 8006934:	9b01      	ldr	r3, [sp, #4]
 8006936:	2800      	cmp	r0, #0
 8006938:	d132      	bne.n	80069a0 <__d2b+0xac>
 800693a:	9a00      	ldr	r2, [sp, #0]
 800693c:	f8c8 2014 	str.w	r2, [r8, #20]
 8006940:	2b00      	cmp	r3, #0
 8006942:	bf0c      	ite	eq
 8006944:	2401      	moveq	r4, #1
 8006946:	2402      	movne	r4, #2
 8006948:	f8c8 3018 	str.w	r3, [r8, #24]
 800694c:	f8c8 4010 	str.w	r4, [r8, #16]
 8006950:	f1b9 0f00 	cmp.w	r9, #0
 8006954:	d11b      	bne.n	800698e <__d2b+0x9a>
 8006956:	eb08 0284 	add.w	r2, r8, r4, lsl #2
 800695a:	f2a0 4332 	subw	r3, r0, #1074	; 0x432
 800695e:	6910      	ldr	r0, [r2, #16]
 8006960:	603b      	str	r3, [r7, #0]
 8006962:	f7ff fd2b 	bl	80063bc <__hi0bits>
 8006966:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 800696a:	6030      	str	r0, [r6, #0]
 800696c:	4640      	mov	r0, r8
 800696e:	b003      	add	sp, #12
 8006970:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006974:	a801      	add	r0, sp, #4
 8006976:	f7ff fd3f 	bl	80063f8 <__lo0bits>
 800697a:	9b01      	ldr	r3, [sp, #4]
 800697c:	2401      	movs	r4, #1
 800697e:	f8c8 3014 	str.w	r3, [r8, #20]
 8006982:	f8c8 4010 	str.w	r4, [r8, #16]
 8006986:	3020      	adds	r0, #32
 8006988:	f1b9 0f00 	cmp.w	r9, #0
 800698c:	d0e3      	beq.n	8006956 <__d2b+0x62>
 800698e:	f2a9 4933 	subw	r9, r9, #1075	; 0x433
 8006992:	eb09 0300 	add.w	r3, r9, r0
 8006996:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800699a:	603b      	str	r3, [r7, #0]
 800699c:	6030      	str	r0, [r6, #0]
 800699e:	e7e5      	b.n	800696c <__d2b+0x78>
 80069a0:	f1c0 0220 	rsb	r2, r0, #32
 80069a4:	9900      	ldr	r1, [sp, #0]
 80069a6:	fa13 f202 	lsls.w	r2, r3, r2
 80069aa:	430a      	orrs	r2, r1
 80069ac:	40c3      	lsrs	r3, r0
 80069ae:	f8c8 2014 	str.w	r2, [r8, #20]
 80069b2:	9301      	str	r3, [sp, #4]
 80069b4:	e7c4      	b.n	8006940 <__d2b+0x4c>
 80069b6:	bf00      	nop

080069b8 <__ratio>:
 80069b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80069bc:	b083      	sub	sp, #12
 80069be:	460d      	mov	r5, r1
 80069c0:	4669      	mov	r1, sp
 80069c2:	4604      	mov	r4, r0
 80069c4:	f7ff ff44 	bl	8006850 <__b2d>
 80069c8:	4689      	mov	r9, r1
 80069ca:	4680      	mov	r8, r0
 80069cc:	a901      	add	r1, sp, #4
 80069ce:	4628      	mov	r0, r5
 80069d0:	f7ff ff3e 	bl	8006850 <__b2d>
 80069d4:	460f      	mov	r7, r1
 80069d6:	e89d 000a 	ldmia.w	sp, {r1, r3}
 80069da:	692a      	ldr	r2, [r5, #16]
 80069dc:	6924      	ldr	r4, [r4, #16]
 80069de:	1acb      	subs	r3, r1, r3
 80069e0:	1aa4      	subs	r4, r4, r2
 80069e2:	eb03 1444 	add.w	r4, r3, r4, lsl #5
 80069e6:	2c00      	cmp	r4, #0
 80069e8:	4606      	mov	r6, r0
 80069ea:	464b      	mov	r3, r9
 80069ec:	4639      	mov	r1, r7
 80069ee:	bfcb      	itete	gt
 80069f0:	eb09 5304 	addgt.w	r3, r9, r4, lsl #20
 80069f4:	eba7 5104 	suble.w	r1, r7, r4, lsl #20
 80069f8:	4699      	movgt	r9, r3
 80069fa:	460f      	movle	r7, r1
 80069fc:	bfcc      	ite	gt
 80069fe:	46c0      	nopgt			; (mov r8, r8)
 8006a00:	4636      	movle	r6, r6
 8006a02:	4640      	mov	r0, r8
 8006a04:	4649      	mov	r1, r9
 8006a06:	4632      	mov	r2, r6
 8006a08:	463b      	mov	r3, r7
 8006a0a:	f001 fc53 	bl	80082b4 <__aeabi_ddiv>
 8006a0e:	b003      	add	sp, #12
 8006a10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08006a14 <_mprec_log10>:
 8006a14:	b510      	push	{r4, lr}
 8006a16:	4604      	mov	r4, r0
 8006a18:	2100      	movs	r1, #0
 8006a1a:	2000      	movs	r0, #0
 8006a1c:	2c17      	cmp	r4, #23
 8006a1e:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 8006a22:	dd08      	ble.n	8006a36 <_mprec_log10+0x22>
 8006a24:	2300      	movs	r3, #0
 8006a26:	2200      	movs	r2, #0
 8006a28:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8006a2c:	f001 fb18 	bl	8008060 <__aeabi_dmul>
 8006a30:	3c01      	subs	r4, #1
 8006a32:	d1f7      	bne.n	8006a24 <_mprec_log10+0x10>
 8006a34:	bd10      	pop	{r4, pc}
 8006a36:	4b03      	ldr	r3, [pc, #12]	; (8006a44 <_mprec_log10+0x30>)
 8006a38:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8006a3c:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 8006a40:	bd10      	pop	{r4, pc}
 8006a42:	bf00      	nop
 8006a44:	08008740 	.word	0x08008740

08006a48 <__copybits>:
 8006a48:	6913      	ldr	r3, [r2, #16]
 8006a4a:	3901      	subs	r1, #1
 8006a4c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006a50:	1149      	asrs	r1, r1, #5
 8006a52:	b470      	push	{r4, r5, r6}
 8006a54:	3314      	adds	r3, #20
 8006a56:	f102 0414 	add.w	r4, r2, #20
 8006a5a:	3101      	adds	r1, #1
 8006a5c:	429c      	cmp	r4, r3
 8006a5e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006a62:	d20c      	bcs.n	8006a7e <__copybits+0x36>
 8006a64:	4605      	mov	r5, r0
 8006a66:	f854 6b04 	ldr.w	r6, [r4], #4
 8006a6a:	42a3      	cmp	r3, r4
 8006a6c:	f845 6b04 	str.w	r6, [r5], #4
 8006a70:	d8f9      	bhi.n	8006a66 <__copybits+0x1e>
 8006a72:	1a9b      	subs	r3, r3, r2
 8006a74:	3b15      	subs	r3, #21
 8006a76:	f023 0303 	bic.w	r3, r3, #3
 8006a7a:	3304      	adds	r3, #4
 8006a7c:	18c0      	adds	r0, r0, r3
 8006a7e:	4281      	cmp	r1, r0
 8006a80:	d904      	bls.n	8006a8c <__copybits+0x44>
 8006a82:	2300      	movs	r3, #0
 8006a84:	f840 3b04 	str.w	r3, [r0], #4
 8006a88:	4281      	cmp	r1, r0
 8006a8a:	d8fb      	bhi.n	8006a84 <__copybits+0x3c>
 8006a8c:	bc70      	pop	{r4, r5, r6}
 8006a8e:	4770      	bx	lr

08006a90 <__any_on>:
 8006a90:	6902      	ldr	r2, [r0, #16]
 8006a92:	114b      	asrs	r3, r1, #5
 8006a94:	429a      	cmp	r2, r3
 8006a96:	b410      	push	{r4}
 8006a98:	db01      	blt.n	8006a9e <__any_on+0xe>
 8006a9a:	461a      	mov	r2, r3
 8006a9c:	dc13      	bgt.n	8006ac6 <__any_on+0x36>
 8006a9e:	3204      	adds	r2, #4
 8006aa0:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 8006aa4:	f100 0114 	add.w	r1, r0, #20
 8006aa8:	1d1c      	adds	r4, r3, #4
 8006aaa:	42a1      	cmp	r1, r4
 8006aac:	d218      	bcs.n	8006ae0 <__any_on+0x50>
 8006aae:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8006ab2:	b92a      	cbnz	r2, 8006ac0 <__any_on+0x30>
 8006ab4:	4299      	cmp	r1, r3
 8006ab6:	d213      	bcs.n	8006ae0 <__any_on+0x50>
 8006ab8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006abc:	2a00      	cmp	r2, #0
 8006abe:	d0f9      	beq.n	8006ab4 <__any_on+0x24>
 8006ac0:	2001      	movs	r0, #1
 8006ac2:	bc10      	pop	{r4}
 8006ac4:	4770      	bx	lr
 8006ac6:	f011 011f 	ands.w	r1, r1, #31
 8006aca:	d0e8      	beq.n	8006a9e <__any_on+0xe>
 8006acc:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8006ad0:	695b      	ldr	r3, [r3, #20]
 8006ad2:	fa33 f401 	lsrs.w	r4, r3, r1
 8006ad6:	fa14 f101 	lsls.w	r1, r4, r1
 8006ada:	4299      	cmp	r1, r3
 8006adc:	d1f0      	bne.n	8006ac0 <__any_on+0x30>
 8006ade:	e7de      	b.n	8006a9e <__any_on+0xe>
 8006ae0:	2000      	movs	r0, #0
 8006ae2:	e7ee      	b.n	8006ac2 <__any_on+0x32>

08006ae4 <__fpclassifyd>:
 8006ae4:	ea50 0201 	orrs.w	r2, r0, r1
 8006ae8:	b410      	push	{r4}
 8006aea:	460b      	mov	r3, r1
 8006aec:	d102      	bne.n	8006af4 <__fpclassifyd+0x10>
 8006aee:	2002      	movs	r0, #2
 8006af0:	bc10      	pop	{r4}
 8006af2:	4770      	bx	lr
 8006af4:	f1d0 0101 	rsbs	r1, r0, #1
 8006af8:	bf38      	it	cc
 8006afa:	2100      	movcc	r1, #0
 8006afc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b00:	bf08      	it	eq
 8006b02:	2800      	cmpeq	r0, #0
 8006b04:	d0f3      	beq.n	8006aee <__fpclassifyd+0xa>
 8006b06:	f103 44ff 	add.w	r4, r3, #2139095040	; 0x7f800000
 8006b0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006b0e:	f504 04e0 	add.w	r4, r4, #7340032	; 0x700000
 8006b12:	f6c7 72df 	movt	r2, #32735	; 0x7fdf
 8006b16:	f5a3 1080 	sub.w	r0, r3, #1048576	; 0x100000
 8006b1a:	4290      	cmp	r0, r2
 8006b1c:	bf88      	it	hi
 8006b1e:	4294      	cmphi	r4, r2
 8006b20:	d801      	bhi.n	8006b26 <__fpclassifyd+0x42>
 8006b22:	2004      	movs	r0, #4
 8006b24:	e7e4      	b.n	8006af0 <__fpclassifyd+0xc>
 8006b26:	f103 4200 	add.w	r2, r3, #2147483648	; 0x80000000
 8006b2a:	2003      	movs	r0, #3
 8006b2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b30:	bf28      	it	cs
 8006b32:	f5b2 1f80 	cmpcs.w	r2, #1048576	; 0x100000
 8006b36:	d3db      	bcc.n	8006af0 <__fpclassifyd+0xc>
 8006b38:	2200      	movs	r2, #0
 8006b3a:	f6c7 72f0 	movt	r2, #32752	; 0x7ff0
 8006b3e:	f513 1f80 	cmn.w	r3, #1048576	; 0x100000
 8006b42:	bf18      	it	ne
 8006b44:	4293      	cmpne	r3, r2
 8006b46:	bf14      	ite	ne
 8006b48:	2300      	movne	r3, #0
 8006b4a:	2301      	moveq	r3, #1
 8006b4c:	ea01 0003 	and.w	r0, r1, r3
 8006b50:	e7ce      	b.n	8006af0 <__fpclassifyd+0xc>
 8006b52:	bf00      	nop

08006b54 <_sbrk_r>:
 8006b54:	b538      	push	{r3, r4, r5, lr}
 8006b56:	4c07      	ldr	r4, [pc, #28]	; (8006b74 <_sbrk_r+0x20>)
 8006b58:	2300      	movs	r3, #0
 8006b5a:	4605      	mov	r5, r0
 8006b5c:	4608      	mov	r0, r1
 8006b5e:	6023      	str	r3, [r4, #0]
 8006b60:	f7fc f938 	bl	8002dd4 <_sbrk>
 8006b64:	1c43      	adds	r3, r0, #1
 8006b66:	d000      	beq.n	8006b6a <_sbrk_r+0x16>
 8006b68:	bd38      	pop	{r3, r4, r5, pc}
 8006b6a:	6823      	ldr	r3, [r4, #0]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d0fb      	beq.n	8006b68 <_sbrk_r+0x14>
 8006b70:	602b      	str	r3, [r5, #0]
 8006b72:	bd38      	pop	{r3, r4, r5, pc}
 8006b74:	200016b0 	.word	0x200016b0

08006b78 <strcmp>:
 8006b78:	ea80 0201 	eor.w	r2, r0, r1
 8006b7c:	f012 0f03 	tst.w	r2, #3
 8006b80:	d13a      	bne.n	8006bf8 <strcmp_unaligned>
 8006b82:	f010 0203 	ands.w	r2, r0, #3
 8006b86:	f020 0003 	bic.w	r0, r0, #3
 8006b8a:	f021 0103 	bic.w	r1, r1, #3
 8006b8e:	f850 cb04 	ldr.w	ip, [r0], #4
 8006b92:	bf08      	it	eq
 8006b94:	f851 3b04 	ldreq.w	r3, [r1], #4
 8006b98:	d00d      	beq.n	8006bb6 <strcmp+0x3e>
 8006b9a:	f082 0203 	eor.w	r2, r2, #3
 8006b9e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8006ba2:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8006ba6:	fa23 f202 	lsr.w	r2, r3, r2
 8006baa:	f851 3b04 	ldr.w	r3, [r1], #4
 8006bae:	ea4c 0c02 	orr.w	ip, ip, r2
 8006bb2:	ea43 0302 	orr.w	r3, r3, r2
 8006bb6:	bf00      	nop
 8006bb8:	f1ac 3201 	sub.w	r2, ip, #16843009	; 0x1010101
 8006bbc:	459c      	cmp	ip, r3
 8006bbe:	bf01      	itttt	eq
 8006bc0:	ea22 020c 	biceq.w	r2, r2, ip
 8006bc4:	f012 3f80 	tsteq.w	r2, #2155905152	; 0x80808080
 8006bc8:	f850 cb04 	ldreq.w	ip, [r0], #4
 8006bcc:	f851 3b04 	ldreq.w	r3, [r1], #4
 8006bd0:	d0f2      	beq.n	8006bb8 <strcmp+0x40>
 8006bd2:	ea4f 600c 	mov.w	r0, ip, lsl #24
 8006bd6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8006bda:	2801      	cmp	r0, #1
 8006bdc:	bf28      	it	cs
 8006bde:	ebb0 6f03 	cmpcs.w	r0, r3, lsl #24
 8006be2:	bf08      	it	eq
 8006be4:	0a1b      	lsreq	r3, r3, #8
 8006be6:	d0f4      	beq.n	8006bd2 <strcmp+0x5a>
 8006be8:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8006bec:	ea4f 6010 	mov.w	r0, r0, lsr #24
 8006bf0:	eba0 0003 	sub.w	r0, r0, r3
 8006bf4:	4770      	bx	lr
 8006bf6:	bf00      	nop

08006bf8 <strcmp_unaligned>:
 8006bf8:	f010 0f03 	tst.w	r0, #3
 8006bfc:	d00a      	beq.n	8006c14 <strcmp_unaligned+0x1c>
 8006bfe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c06:	2a01      	cmp	r2, #1
 8006c08:	bf28      	it	cs
 8006c0a:	429a      	cmpcs	r2, r3
 8006c0c:	d0f4      	beq.n	8006bf8 <strcmp_unaligned>
 8006c0e:	eba2 0003 	sub.w	r0, r2, r3
 8006c12:	4770      	bx	lr
 8006c14:	f84d 5d04 	str.w	r5, [sp, #-4]!
 8006c18:	f84d 4d04 	str.w	r4, [sp, #-4]!
 8006c1c:	f04f 0201 	mov.w	r2, #1
 8006c20:	ea42 2202 	orr.w	r2, r2, r2, lsl #8
 8006c24:	ea42 4202 	orr.w	r2, r2, r2, lsl #16
 8006c28:	f001 0c03 	and.w	ip, r1, #3
 8006c2c:	f021 0103 	bic.w	r1, r1, #3
 8006c30:	f850 4b04 	ldr.w	r4, [r0], #4
 8006c34:	f851 5b04 	ldr.w	r5, [r1], #4
 8006c38:	f1bc 0f02 	cmp.w	ip, #2
 8006c3c:	d026      	beq.n	8006c8c <strcmp_unaligned+0x94>
 8006c3e:	d84b      	bhi.n	8006cd8 <strcmp_unaligned+0xe0>
 8006c40:	f024 4c7f 	bic.w	ip, r4, #4278190080	; 0xff000000
 8006c44:	ebbc 2f15 	cmp.w	ip, r5, lsr #8
 8006c48:	eba4 0302 	sub.w	r3, r4, r2
 8006c4c:	ea23 0304 	bic.w	r3, r3, r4
 8006c50:	d10d      	bne.n	8006c6e <strcmp_unaligned+0x76>
 8006c52:	ea13 13c2 	ands.w	r3, r3, r2, lsl #7
 8006c56:	bf08      	it	eq
 8006c58:	f851 5b04 	ldreq.w	r5, [r1], #4
 8006c5c:	d10a      	bne.n	8006c74 <strcmp_unaligned+0x7c>
 8006c5e:	ea8c 0c04 	eor.w	ip, ip, r4
 8006c62:	ebbc 6f05 	cmp.w	ip, r5, lsl #24
 8006c66:	d10c      	bne.n	8006c82 <strcmp_unaligned+0x8a>
 8006c68:	f850 4b04 	ldr.w	r4, [r0], #4
 8006c6c:	e7e8      	b.n	8006c40 <strcmp_unaligned+0x48>
 8006c6e:	ea4f 2515 	mov.w	r5, r5, lsr #8
 8006c72:	e05c      	b.n	8006d2e <strcmp_unaligned+0x136>
 8006c74:	f033 437f 	bics.w	r3, r3, #4278190080	; 0xff000000
 8006c78:	d152      	bne.n	8006d20 <strcmp_unaligned+0x128>
 8006c7a:	780d      	ldrb	r5, [r1, #0]
 8006c7c:	ea4f 6c14 	mov.w	ip, r4, lsr #24
 8006c80:	e055      	b.n	8006d2e <strcmp_unaligned+0x136>
 8006c82:	ea4f 6c14 	mov.w	ip, r4, lsr #24
 8006c86:	f005 05ff 	and.w	r5, r5, #255	; 0xff
 8006c8a:	e050      	b.n	8006d2e <strcmp_unaligned+0x136>
 8006c8c:	ea4f 4c04 	mov.w	ip, r4, lsl #16
 8006c90:	eba4 0302 	sub.w	r3, r4, r2
 8006c94:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006c98:	ea23 0304 	bic.w	r3, r3, r4
 8006c9c:	ebbc 4f15 	cmp.w	ip, r5, lsr #16
 8006ca0:	d117      	bne.n	8006cd2 <strcmp_unaligned+0xda>
 8006ca2:	ea13 13c2 	ands.w	r3, r3, r2, lsl #7
 8006ca6:	bf08      	it	eq
 8006ca8:	f851 5b04 	ldreq.w	r5, [r1], #4
 8006cac:	d107      	bne.n	8006cbe <strcmp_unaligned+0xc6>
 8006cae:	ea8c 0c04 	eor.w	ip, ip, r4
 8006cb2:	ebbc 4f05 	cmp.w	ip, r5, lsl #16
 8006cb6:	d108      	bne.n	8006cca <strcmp_unaligned+0xd2>
 8006cb8:	f850 4b04 	ldr.w	r4, [r0], #4
 8006cbc:	e7e6      	b.n	8006c8c <strcmp_unaligned+0x94>
 8006cbe:	041b      	lsls	r3, r3, #16
 8006cc0:	d12e      	bne.n	8006d20 <strcmp_unaligned+0x128>
 8006cc2:	880d      	ldrh	r5, [r1, #0]
 8006cc4:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8006cc8:	e031      	b.n	8006d2e <strcmp_unaligned+0x136>
 8006cca:	ea4f 4505 	mov.w	r5, r5, lsl #16
 8006cce:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8006cd2:	ea4f 4515 	mov.w	r5, r5, lsr #16
 8006cd6:	e02a      	b.n	8006d2e <strcmp_unaligned+0x136>
 8006cd8:	f004 0cff 	and.w	ip, r4, #255	; 0xff
 8006cdc:	ebbc 6f15 	cmp.w	ip, r5, lsr #24
 8006ce0:	eba4 0302 	sub.w	r3, r4, r2
 8006ce4:	ea23 0304 	bic.w	r3, r3, r4
 8006ce8:	d10d      	bne.n	8006d06 <strcmp_unaligned+0x10e>
 8006cea:	ea13 13c2 	ands.w	r3, r3, r2, lsl #7
 8006cee:	bf08      	it	eq
 8006cf0:	f851 5b04 	ldreq.w	r5, [r1], #4
 8006cf4:	d10a      	bne.n	8006d0c <strcmp_unaligned+0x114>
 8006cf6:	ea8c 0c04 	eor.w	ip, ip, r4
 8006cfa:	ebbc 2f05 	cmp.w	ip, r5, lsl #8
 8006cfe:	d10a      	bne.n	8006d16 <strcmp_unaligned+0x11e>
 8006d00:	f850 4b04 	ldr.w	r4, [r0], #4
 8006d04:	e7e8      	b.n	8006cd8 <strcmp_unaligned+0xe0>
 8006d06:	ea4f 6515 	mov.w	r5, r5, lsr #24
 8006d0a:	e010      	b.n	8006d2e <strcmp_unaligned+0x136>
 8006d0c:	f014 0fff 	tst.w	r4, #255	; 0xff
 8006d10:	d006      	beq.n	8006d20 <strcmp_unaligned+0x128>
 8006d12:	f851 5b04 	ldr.w	r5, [r1], #4
 8006d16:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 8006d1a:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 8006d1e:	e006      	b.n	8006d2e <strcmp_unaligned+0x136>
 8006d20:	f04f 0000 	mov.w	r0, #0
 8006d24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d28:	f85d 5b04 	ldr.w	r5, [sp], #4
 8006d2c:	4770      	bx	lr
 8006d2e:	f00c 02ff 	and.w	r2, ip, #255	; 0xff
 8006d32:	f005 00ff 	and.w	r0, r5, #255	; 0xff
 8006d36:	2801      	cmp	r0, #1
 8006d38:	bf28      	it	cs
 8006d3a:	4290      	cmpcs	r0, r2
 8006d3c:	bf04      	itt	eq
 8006d3e:	ea4f 2c1c 	moveq.w	ip, ip, lsr #8
 8006d42:	0a2d      	lsreq	r5, r5, #8
 8006d44:	d0f3      	beq.n	8006d2e <strcmp_unaligned+0x136>
 8006d46:	eba2 0000 	sub.w	r0, r2, r0
 8006d4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d4e:	f85d 5b04 	ldr.w	r5, [sp], #4
 8006d52:	4770      	bx	lr

08006d54 <strlen>:
 8006d54:	f020 0103 	bic.w	r1, r0, #3
 8006d58:	f010 0003 	ands.w	r0, r0, #3
 8006d5c:	f1c0 0000 	rsb	r0, r0, #0
 8006d60:	f851 3b04 	ldr.w	r3, [r1], #4
 8006d64:	f100 0c04 	add.w	ip, r0, #4
 8006d68:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8006d6c:	f06f 0200 	mvn.w	r2, #0
 8006d70:	bf1c      	itt	ne
 8006d72:	fa22 f20c 	lsrne.w	r2, r2, ip
 8006d76:	4313      	orrne	r3, r2
 8006d78:	f04f 0c01 	mov.w	ip, #1
 8006d7c:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 8006d80:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 8006d84:	eba3 020c 	sub.w	r2, r3, ip
 8006d88:	ea22 0203 	bic.w	r2, r2, r3
 8006d8c:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 8006d90:	bf04      	itt	eq
 8006d92:	f851 3b04 	ldreq.w	r3, [r1], #4
 8006d96:	3004      	addeq	r0, #4
 8006d98:	d0f4      	beq.n	8006d84 <strlen+0x30>
 8006d9a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006d9e:	bf1f      	itttt	ne
 8006da0:	3001      	addne	r0, #1
 8006da2:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
 8006da6:	3001      	addne	r0, #1
 8006da8:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
 8006dac:	bf18      	it	ne
 8006dae:	3001      	addne	r0, #1
 8006db0:	4770      	bx	lr
 8006db2:	bf00      	nop

08006db4 <__ssprint_r>:
 8006db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006db8:	b083      	sub	sp, #12
 8006dba:	4691      	mov	r9, r2
 8006dbc:	9001      	str	r0, [sp, #4]
 8006dbe:	6890      	ldr	r0, [r2, #8]
 8006dc0:	6817      	ldr	r7, [r2, #0]
 8006dc2:	460d      	mov	r5, r1
 8006dc4:	2800      	cmp	r0, #0
 8006dc6:	d072      	beq.n	8006eae <__ssprint_r+0xfa>
 8006dc8:	f04f 0a00 	mov.w	sl, #0
 8006dcc:	6808      	ldr	r0, [r1, #0]
 8006dce:	688b      	ldr	r3, [r1, #8]
 8006dd0:	4654      	mov	r4, sl
 8006dd2:	2c00      	cmp	r4, #0
 8006dd4:	d048      	beq.n	8006e68 <__ssprint_r+0xb4>
 8006dd6:	429c      	cmp	r4, r3
 8006dd8:	461e      	mov	r6, r3
 8006dda:	4698      	mov	r8, r3
 8006ddc:	bf3c      	itt	cc
 8006dde:	4626      	movcc	r6, r4
 8006de0:	46a0      	movcc	r8, r4
 8006de2:	d331      	bcc.n	8006e48 <__ssprint_r+0x94>
 8006de4:	89ab      	ldrh	r3, [r5, #12]
 8006de6:	f413 6f90 	tst.w	r3, #1152	; 0x480
 8006dea:	d02d      	beq.n	8006e48 <__ssprint_r+0x94>
 8006dec:	696e      	ldr	r6, [r5, #20]
 8006dee:	6929      	ldr	r1, [r5, #16]
 8006df0:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8006df4:	ebc1 0800 	rsb	r8, r1, r0
 8006df8:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 8006dfc:	1c60      	adds	r0, r4, #1
 8006dfe:	1076      	asrs	r6, r6, #1
 8006e00:	4440      	add	r0, r8
 8006e02:	4286      	cmp	r6, r0
 8006e04:	4632      	mov	r2, r6
 8006e06:	bf3c      	itt	cc
 8006e08:	4606      	movcc	r6, r0
 8006e0a:	4632      	movcc	r2, r6
 8006e0c:	055b      	lsls	r3, r3, #21
 8006e0e:	9801      	ldr	r0, [sp, #4]
 8006e10:	d52f      	bpl.n	8006e72 <__ssprint_r+0xbe>
 8006e12:	4611      	mov	r1, r2
 8006e14:	f7fe fed8 	bl	8005bc8 <_malloc_r>
 8006e18:	4683      	mov	fp, r0
 8006e1a:	2800      	cmp	r0, #0
 8006e1c:	d032      	beq.n	8006e84 <__ssprint_r+0xd0>
 8006e1e:	6929      	ldr	r1, [r5, #16]
 8006e20:	4642      	mov	r2, r8
 8006e22:	f7ff f9c3 	bl	80061ac <memcpy>
 8006e26:	89ab      	ldrh	r3, [r5, #12]
 8006e28:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006e2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e30:	81ab      	strh	r3, [r5, #12]
 8006e32:	ebc8 0306 	rsb	r3, r8, r6
 8006e36:	eb0b 0008 	add.w	r0, fp, r8
 8006e3a:	616e      	str	r6, [r5, #20]
 8006e3c:	f8c5 b010 	str.w	fp, [r5, #16]
 8006e40:	6028      	str	r0, [r5, #0]
 8006e42:	4626      	mov	r6, r4
 8006e44:	60ab      	str	r3, [r5, #8]
 8006e46:	46a0      	mov	r8, r4
 8006e48:	4642      	mov	r2, r8
 8006e4a:	4651      	mov	r1, sl
 8006e4c:	f000 fcb8 	bl	80077c0 <memmove>
 8006e50:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8006e54:	68ab      	ldr	r3, [r5, #8]
 8006e56:	6828      	ldr	r0, [r5, #0]
 8006e58:	1b9b      	subs	r3, r3, r6
 8006e5a:	4440      	add	r0, r8
 8006e5c:	1b14      	subs	r4, r2, r4
 8006e5e:	60ab      	str	r3, [r5, #8]
 8006e60:	6028      	str	r0, [r5, #0]
 8006e62:	f8c9 4008 	str.w	r4, [r9, #8]
 8006e66:	b1e4      	cbz	r4, 8006ea2 <__ssprint_r+0xee>
 8006e68:	f8d7 a000 	ldr.w	sl, [r7]
 8006e6c:	687c      	ldr	r4, [r7, #4]
 8006e6e:	3708      	adds	r7, #8
 8006e70:	e7af      	b.n	8006dd2 <__ssprint_r+0x1e>
 8006e72:	f000 fd47 	bl	8007904 <_realloc_r>
 8006e76:	4683      	mov	fp, r0
 8006e78:	2800      	cmp	r0, #0
 8006e7a:	d1da      	bne.n	8006e32 <__ssprint_r+0x7e>
 8006e7c:	9801      	ldr	r0, [sp, #4]
 8006e7e:	6929      	ldr	r1, [r5, #16]
 8006e80:	f7fe fd96 	bl	80059b0 <_free_r>
 8006e84:	9a01      	ldr	r2, [sp, #4]
 8006e86:	230c      	movs	r3, #12
 8006e88:	6013      	str	r3, [r2, #0]
 8006e8a:	89aa      	ldrh	r2, [r5, #12]
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e92:	81aa      	strh	r2, [r5, #12]
 8006e94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e98:	f8c9 3008 	str.w	r3, [r9, #8]
 8006e9c:	f8c9 3004 	str.w	r3, [r9, #4]
 8006ea0:	e002      	b.n	8006ea8 <__ssprint_r+0xf4>
 8006ea2:	f8c9 4004 	str.w	r4, [r9, #4]
 8006ea6:	4620      	mov	r0, r4
 8006ea8:	b003      	add	sp, #12
 8006eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006eae:	6050      	str	r0, [r2, #4]
 8006eb0:	e7fa      	b.n	8006ea8 <__ssprint_r+0xf4>
 8006eb2:	bf00      	nop

08006eb4 <_svfiprintf_r>:
 8006eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eb8:	468a      	mov	sl, r1
 8006eba:	8989      	ldrh	r1, [r1, #12]
 8006ebc:	b0ad      	sub	sp, #180	; 0xb4
 8006ebe:	0609      	lsls	r1, r1, #24
 8006ec0:	9007      	str	r0, [sp, #28]
 8006ec2:	9305      	str	r3, [sp, #20]
 8006ec4:	d504      	bpl.n	8006ed0 <_svfiprintf_r+0x1c>
 8006ec6:	f8da 3010 	ldr.w	r3, [sl, #16]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	f000 8422 	beq.w	8007714 <_svfiprintf_r+0x860>
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	f10d 009f 	add.w	r0, sp, #159	; 0x9f
 8006ed6:	f10d 08a0 	add.w	r8, sp, #160	; 0xa0
 8006eda:	a90e      	add	r1, sp, #56	; 0x38
 8006edc:	930c      	str	r3, [sp, #48]	; 0x30
 8006ede:	932a      	str	r3, [sp, #168]	; 0xa8
 8006ee0:	9329      	str	r3, [sp, #164]	; 0xa4
 8006ee2:	9304      	str	r3, [sp, #16]
 8006ee4:	ebc0 0308 	rsb	r3, r0, r8
 8006ee8:	9001      	str	r0, [sp, #4]
 8006eea:	9128      	str	r1, [sp, #160]	; 0xa0
 8006eec:	4617      	mov	r7, r2
 8006eee:	460c      	mov	r4, r1
 8006ef0:	930d      	str	r3, [sp, #52]	; 0x34
 8006ef2:	783b      	ldrb	r3, [r7, #0]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	bf18      	it	ne
 8006ef8:	2b25      	cmpne	r3, #37	; 0x25
 8006efa:	463d      	mov	r5, r7
 8006efc:	d016      	beq.n	8006f2c <_svfiprintf_r+0x78>
 8006efe:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8006f02:	2b25      	cmp	r3, #37	; 0x25
 8006f04:	bf18      	it	ne
 8006f06:	2b00      	cmpne	r3, #0
 8006f08:	d1f9      	bne.n	8006efe <_svfiprintf_r+0x4a>
 8006f0a:	1bee      	subs	r6, r5, r7
 8006f0c:	d00e      	beq.n	8006f2c <_svfiprintf_r+0x78>
 8006f0e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8006f10:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8006f12:	6027      	str	r7, [r4, #0]
 8006f14:	3301      	adds	r3, #1
 8006f16:	1992      	adds	r2, r2, r6
 8006f18:	2b07      	cmp	r3, #7
 8006f1a:	6066      	str	r6, [r4, #4]
 8006f1c:	922a      	str	r2, [sp, #168]	; 0xa8
 8006f1e:	9329      	str	r3, [sp, #164]	; 0xa4
 8006f20:	f300 832a 	bgt.w	8007578 <_svfiprintf_r+0x6c4>
 8006f24:	3408      	adds	r4, #8
 8006f26:	9b04      	ldr	r3, [sp, #16]
 8006f28:	199b      	adds	r3, r3, r6
 8006f2a:	9304      	str	r3, [sp, #16]
 8006f2c:	782b      	ldrb	r3, [r5, #0]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	f000 82c5 	beq.w	80074be <_svfiprintf_r+0x60a>
 8006f34:	2200      	movs	r2, #0
 8006f36:	1c6f      	adds	r7, r5, #1
 8006f38:	4613      	mov	r3, r2
 8006f3a:	f88d 20af 	strb.w	r2, [sp, #175]	; 0xaf
 8006f3e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006f42:	9206      	str	r2, [sp, #24]
 8006f44:	4693      	mov	fp, r2
 8006f46:	f817 2b01 	ldrb.w	r2, [r7], #1
 8006f4a:	f1a2 0120 	sub.w	r1, r2, #32
 8006f4e:	2958      	cmp	r1, #88	; 0x58
 8006f50:	f200 8178 	bhi.w	8007244 <_svfiprintf_r+0x390>
 8006f54:	e8df f011 	tbh	[pc, r1, lsl #1]
 8006f58:	01760172 	.word	0x01760172
 8006f5c:	016f0176 	.word	0x016f0176
 8006f60:	01760176 	.word	0x01760176
 8006f64:	01760176 	.word	0x01760176
 8006f68:	01760176 	.word	0x01760176
 8006f6c:	01d800af 	.word	0x01d800af
 8006f70:	00ba0176 	.word	0x00ba0176
 8006f74:	017601da 	.word	0x017601da
 8006f78:	01c401d5 	.word	0x01c401d5
 8006f7c:	01c401c4 	.word	0x01c401c4
 8006f80:	01c401c4 	.word	0x01c401c4
 8006f84:	01c401c4 	.word	0x01c401c4
 8006f88:	01c401c4 	.word	0x01c401c4
 8006f8c:	01760176 	.word	0x01760176
 8006f90:	01760176 	.word	0x01760176
 8006f94:	01760176 	.word	0x01760176
 8006f98:	01760176 	.word	0x01760176
 8006f9c:	01760176 	.word	0x01760176
 8006fa0:	017601a7 	.word	0x017601a7
 8006fa4:	01760176 	.word	0x01760176
 8006fa8:	01760176 	.word	0x01760176
 8006fac:	01760176 	.word	0x01760176
 8006fb0:	01760176 	.word	0x01760176
 8006fb4:	005c0176 	.word	0x005c0176
 8006fb8:	01760176 	.word	0x01760176
 8006fbc:	01760176 	.word	0x01760176
 8006fc0:	00a00176 	.word	0x00a00176
 8006fc4:	01760176 	.word	0x01760176
 8006fc8:	0176016a 	.word	0x0176016a
 8006fcc:	01760176 	.word	0x01760176
 8006fd0:	01760176 	.word	0x01760176
 8006fd4:	01760176 	.word	0x01760176
 8006fd8:	01760176 	.word	0x01760176
 8006fdc:	01170176 	.word	0x01170176
 8006fe0:	01760105 	.word	0x01760105
 8006fe4:	01760176 	.word	0x01760176
 8006fe8:	01050102 	.word	0x01050102
 8006fec:	01760176 	.word	0x01760176
 8006ff0:	01760059 	.word	0x01760059
 8006ff4:	005e00d1 	.word	0x005e00d1
 8006ff8:	005900bd 	.word	0x005900bd
 8006ffc:	01870176 	.word	0x01870176
 8007000:	00a20176 	.word	0x00a20176
 8007004:	01760176 	.word	0x01760176
 8007008:	00e2      	.short	0x00e2
 800700a:	f04b 0b10 	orr.w	fp, fp, #16
 800700e:	e79a      	b.n	8006f46 <_svfiprintf_r+0x92>
 8007010:	f04b 0b10 	orr.w	fp, fp, #16
 8007014:	f01b 0210 	ands.w	r2, fp, #16
 8007018:	f000 8313 	beq.w	8007642 <_svfiprintf_r+0x78e>
 800701c:	9805      	ldr	r0, [sp, #20]
 800701e:	6803      	ldr	r3, [r0, #0]
 8007020:	2200      	movs	r2, #0
 8007022:	1a99      	subs	r1, r3, r2
 8007024:	bf18      	it	ne
 8007026:	2101      	movne	r1, #1
 8007028:	3004      	adds	r0, #4
 800702a:	9005      	str	r0, [sp, #20]
 800702c:	2000      	movs	r0, #0
 800702e:	f88d 00af 	strb.w	r0, [sp, #175]	; 0xaf
 8007032:	2d00      	cmp	r5, #0
 8007034:	bfa8      	it	ge
 8007036:	f02b 0b80 	bicge.w	fp, fp, #128	; 0x80
 800703a:	2d00      	cmp	r5, #0
 800703c:	bf18      	it	ne
 800703e:	f041 0101 	orrne.w	r1, r1, #1
 8007042:	2900      	cmp	r1, #0
 8007044:	f000 8228 	beq.w	8007498 <_svfiprintf_r+0x5e4>
 8007048:	2a01      	cmp	r2, #1
 800704a:	f000 82cf 	beq.w	80075ec <_svfiprintf_r+0x738>
 800704e:	2a02      	cmp	r2, #2
 8007050:	bf18      	it	ne
 8007052:	4642      	movne	r2, r8
 8007054:	d101      	bne.n	800705a <_svfiprintf_r+0x1a6>
 8007056:	e2b9      	b.n	80075cc <_svfiprintf_r+0x718>
 8007058:	4602      	mov	r2, r0
 800705a:	f003 0107 	and.w	r1, r3, #7
 800705e:	3130      	adds	r1, #48	; 0x30
 8007060:	1e50      	subs	r0, r2, #1
 8007062:	08db      	lsrs	r3, r3, #3
 8007064:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007068:	d1f6      	bne.n	8007058 <_svfiprintf_r+0x1a4>
 800706a:	f01b 0f01 	tst.w	fp, #1
 800706e:	9009      	str	r0, [sp, #36]	; 0x24
 8007070:	f040 831a 	bne.w	80076a8 <_svfiprintf_r+0x7f4>
 8007074:	ebc0 0308 	rsb	r3, r0, r8
 8007078:	9303      	str	r3, [sp, #12]
 800707a:	9508      	str	r5, [sp, #32]
 800707c:	9803      	ldr	r0, [sp, #12]
 800707e:	9908      	ldr	r1, [sp, #32]
 8007080:	f89d 30af 	ldrb.w	r3, [sp, #175]	; 0xaf
 8007084:	4288      	cmp	r0, r1
 8007086:	bfb8      	it	lt
 8007088:	4608      	movlt	r0, r1
 800708a:	9002      	str	r0, [sp, #8]
 800708c:	2b00      	cmp	r3, #0
 800708e:	f000 808b 	beq.w	80071a8 <_svfiprintf_r+0x2f4>
 8007092:	3001      	adds	r0, #1
 8007094:	9002      	str	r0, [sp, #8]
 8007096:	e087      	b.n	80071a8 <_svfiprintf_r+0x2f4>
 8007098:	f04b 0b10 	orr.w	fp, fp, #16
 800709c:	f01b 0f10 	tst.w	fp, #16
 80070a0:	f000 82c1 	beq.w	8007626 <_svfiprintf_r+0x772>
 80070a4:	9805      	ldr	r0, [sp, #20]
 80070a6:	6803      	ldr	r3, [r0, #0]
 80070a8:	2201      	movs	r2, #1
 80070aa:	1c19      	adds	r1, r3, #0
 80070ac:	bf18      	it	ne
 80070ae:	2101      	movne	r1, #1
 80070b0:	3004      	adds	r0, #4
 80070b2:	9005      	str	r0, [sp, #20]
 80070b4:	e7ba      	b.n	800702c <_svfiprintf_r+0x178>
 80070b6:	9805      	ldr	r0, [sp, #20]
 80070b8:	9905      	ldr	r1, [sp, #20]
 80070ba:	6800      	ldr	r0, [r0, #0]
 80070bc:	1d0a      	adds	r2, r1, #4
 80070be:	2800      	cmp	r0, #0
 80070c0:	9006      	str	r0, [sp, #24]
 80070c2:	f280 82e0 	bge.w	8007686 <_svfiprintf_r+0x7d2>
 80070c6:	4240      	negs	r0, r0
 80070c8:	9006      	str	r0, [sp, #24]
 80070ca:	9205      	str	r2, [sp, #20]
 80070cc:	f04b 0b04 	orr.w	fp, fp, #4
 80070d0:	e739      	b.n	8006f46 <_svfiprintf_r+0x92>
 80070d2:	9b05      	ldr	r3, [sp, #20]
 80070d4:	9905      	ldr	r1, [sp, #20]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	2230      	movs	r2, #48	; 0x30
 80070da:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
 80070de:	2278      	movs	r2, #120	; 0x78
 80070e0:	3104      	adds	r1, #4
 80070e2:	f88d 20ad 	strb.w	r2, [sp, #173]	; 0xad
 80070e6:	4aaf      	ldr	r2, [pc, #700]	; (80073a4 <_svfiprintf_r+0x4f0>)
 80070e8:	9105      	str	r1, [sp, #20]
 80070ea:	1c19      	adds	r1, r3, #0
 80070ec:	bf18      	it	ne
 80070ee:	2101      	movne	r1, #1
 80070f0:	920c      	str	r2, [sp, #48]	; 0x30
 80070f2:	f04b 0b02 	orr.w	fp, fp, #2
 80070f6:	2202      	movs	r2, #2
 80070f8:	e798      	b.n	800702c <_svfiprintf_r+0x178>
 80070fa:	f01b 0f10 	tst.w	fp, #16
 80070fe:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 8007102:	f040 82dd 	bne.w	80076c0 <_svfiprintf_r+0x80c>
 8007106:	f01b 0f40 	tst.w	fp, #64	; 0x40
 800710a:	f000 82fb 	beq.w	8007704 <_svfiprintf_r+0x850>
 800710e:	9a05      	ldr	r2, [sp, #20]
 8007110:	9804      	ldr	r0, [sp, #16]
 8007112:	6813      	ldr	r3, [r2, #0]
 8007114:	3204      	adds	r2, #4
 8007116:	9205      	str	r2, [sp, #20]
 8007118:	8018      	strh	r0, [r3, #0]
 800711a:	e6ea      	b.n	8006ef2 <_svfiprintf_r+0x3e>
 800711c:	49a1      	ldr	r1, [pc, #644]	; (80073a4 <_svfiprintf_r+0x4f0>)
 800711e:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 8007122:	910c      	str	r1, [sp, #48]	; 0x30
 8007124:	f01b 0f10 	tst.w	fp, #16
 8007128:	d103      	bne.n	8007132 <_svfiprintf_r+0x27e>
 800712a:	f01b 0f40 	tst.w	fp, #64	; 0x40
 800712e:	f040 82d3 	bne.w	80076d8 <_svfiprintf_r+0x824>
 8007132:	9805      	ldr	r0, [sp, #20]
 8007134:	6803      	ldr	r3, [r0, #0]
 8007136:	3004      	adds	r0, #4
 8007138:	9005      	str	r0, [sp, #20]
 800713a:	1c19      	adds	r1, r3, #0
 800713c:	bf18      	it	ne
 800713e:	2101      	movne	r1, #1
 8007140:	ea1b 0f01 	tst.w	fp, r1
 8007144:	f000 8287 	beq.w	8007656 <_svfiprintf_r+0x7a2>
 8007148:	2130      	movs	r1, #48	; 0x30
 800714a:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
 800714e:	f88d 20ad 	strb.w	r2, [sp, #173]	; 0xad
 8007152:	f04b 0b02 	orr.w	fp, fp, #2
 8007156:	2101      	movs	r1, #1
 8007158:	2202      	movs	r2, #2
 800715a:	e767      	b.n	800702c <_svfiprintf_r+0x178>
 800715c:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
 8007160:	e6f1      	b.n	8006f46 <_svfiprintf_r+0x92>
 8007162:	f01b 0f10 	tst.w	fp, #16
 8007166:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 800716a:	f000 80a4 	beq.w	80072b6 <_svfiprintf_r+0x402>
 800716e:	9805      	ldr	r0, [sp, #20]
 8007170:	6803      	ldr	r3, [r0, #0]
 8007172:	3004      	adds	r0, #4
 8007174:	9005      	str	r0, [sp, #20]
 8007176:	2b00      	cmp	r3, #0
 8007178:	f2c0 80a9 	blt.w	80072ce <_svfiprintf_r+0x41a>
 800717c:	bf0c      	ite	eq
 800717e:	2100      	moveq	r1, #0
 8007180:	2101      	movne	r1, #1
 8007182:	2201      	movs	r2, #1
 8007184:	e755      	b.n	8007032 <_svfiprintf_r+0x17e>
 8007186:	9b05      	ldr	r3, [sp, #20]
 8007188:	9905      	ldr	r1, [sp, #20]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	2001      	movs	r0, #1
 800718e:	2200      	movs	r2, #0
 8007190:	3104      	adds	r1, #4
 8007192:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
 8007196:	ab1e      	add	r3, sp, #120	; 0x78
 8007198:	f88d 20af 	strb.w	r2, [sp, #175]	; 0xaf
 800719c:	9002      	str	r0, [sp, #8]
 800719e:	9105      	str	r1, [sp, #20]
 80071a0:	9003      	str	r0, [sp, #12]
 80071a2:	9309      	str	r3, [sp, #36]	; 0x24
 80071a4:	2300      	movs	r3, #0
 80071a6:	9308      	str	r3, [sp, #32]
 80071a8:	f01b 0302 	ands.w	r3, fp, #2
 80071ac:	930a      	str	r3, [sp, #40]	; 0x28
 80071ae:	d002      	beq.n	80071b6 <_svfiprintf_r+0x302>
 80071b0:	9b02      	ldr	r3, [sp, #8]
 80071b2:	3302      	adds	r3, #2
 80071b4:	9302      	str	r3, [sp, #8]
 80071b6:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
 80071ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80071bc:	f040 80c1 	bne.w	8007342 <_svfiprintf_r+0x48e>
 80071c0:	9b06      	ldr	r3, [sp, #24]
 80071c2:	9802      	ldr	r0, [sp, #8]
 80071c4:	1a1d      	subs	r5, r3, r0
 80071c6:	2d00      	cmp	r5, #0
 80071c8:	f340 80bb 	ble.w	8007342 <_svfiprintf_r+0x48e>
 80071cc:	2d10      	cmp	r5, #16
 80071ce:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80071d0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80071d2:	4e75      	ldr	r6, [pc, #468]	; (80073a8 <_svfiprintf_r+0x4f4>)
 80071d4:	dd1f      	ble.n	8007216 <_svfiprintf_r+0x362>
 80071d6:	4621      	mov	r1, r4
 80071d8:	f04f 0910 	mov.w	r9, #16
 80071dc:	9c07      	ldr	r4, [sp, #28]
 80071de:	e002      	b.n	80071e6 <_svfiprintf_r+0x332>
 80071e0:	3d10      	subs	r5, #16
 80071e2:	2d10      	cmp	r5, #16
 80071e4:	dd16      	ble.n	8007214 <_svfiprintf_r+0x360>
 80071e6:	3301      	adds	r3, #1
 80071e8:	3210      	adds	r2, #16
 80071ea:	e881 0240 	stmia.w	r1, {r6, r9}
 80071ee:	3108      	adds	r1, #8
 80071f0:	2b07      	cmp	r3, #7
 80071f2:	922a      	str	r2, [sp, #168]	; 0xa8
 80071f4:	9329      	str	r3, [sp, #164]	; 0xa4
 80071f6:	ddf3      	ble.n	80071e0 <_svfiprintf_r+0x32c>
 80071f8:	4620      	mov	r0, r4
 80071fa:	4651      	mov	r1, sl
 80071fc:	4642      	mov	r2, r8
 80071fe:	f7ff fdd9 	bl	8006db4 <__ssprint_r>
 8007202:	2800      	cmp	r0, #0
 8007204:	f040 8162 	bne.w	80074cc <_svfiprintf_r+0x618>
 8007208:	3d10      	subs	r5, #16
 800720a:	2d10      	cmp	r5, #16
 800720c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800720e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007210:	a90e      	add	r1, sp, #56	; 0x38
 8007212:	dce8      	bgt.n	80071e6 <_svfiprintf_r+0x332>
 8007214:	460c      	mov	r4, r1
 8007216:	3301      	adds	r3, #1
 8007218:	1952      	adds	r2, r2, r5
 800721a:	2b07      	cmp	r3, #7
 800721c:	6026      	str	r6, [r4, #0]
 800721e:	6065      	str	r5, [r4, #4]
 8007220:	922a      	str	r2, [sp, #168]	; 0xa8
 8007222:	9329      	str	r3, [sp, #164]	; 0xa4
 8007224:	f300 8219 	bgt.w	800765a <_svfiprintf_r+0x7a6>
 8007228:	3408      	adds	r4, #8
 800722a:	e08c      	b.n	8007346 <_svfiprintf_r+0x492>
 800722c:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 8007230:	4b5e      	ldr	r3, [pc, #376]	; (80073ac <_svfiprintf_r+0x4f8>)
 8007232:	930c      	str	r3, [sp, #48]	; 0x30
 8007234:	e776      	b.n	8007124 <_svfiprintf_r+0x270>
 8007236:	f04b 0b01 	orr.w	fp, fp, #1
 800723a:	e684      	b.n	8006f46 <_svfiprintf_r+0x92>
 800723c:	2b00      	cmp	r3, #0
 800723e:	bf08      	it	eq
 8007240:	2320      	moveq	r3, #32
 8007242:	e680      	b.n	8006f46 <_svfiprintf_r+0x92>
 8007244:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 8007248:	2a00      	cmp	r2, #0
 800724a:	f000 8138 	beq.w	80074be <_svfiprintf_r+0x60a>
 800724e:	2301      	movs	r3, #1
 8007250:	9302      	str	r3, [sp, #8]
 8007252:	2300      	movs	r3, #0
 8007254:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 8007258:	2301      	movs	r3, #1
 800725a:	9303      	str	r3, [sp, #12]
 800725c:	ab1e      	add	r3, sp, #120	; 0x78
 800725e:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 8007262:	9309      	str	r3, [sp, #36]	; 0x24
 8007264:	e79e      	b.n	80071a4 <_svfiprintf_r+0x2f0>
 8007266:	9b05      	ldr	r3, [sp, #20]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	9309      	str	r3, [sp, #36]	; 0x24
 800726c:	9b05      	ldr	r3, [sp, #20]
 800726e:	3304      	adds	r3, #4
 8007270:	9305      	str	r3, [sp, #20]
 8007272:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007274:	2600      	movs	r6, #0
 8007276:	f88d 60af 	strb.w	r6, [sp, #175]	; 0xaf
 800727a:	2b00      	cmp	r3, #0
 800727c:	f000 8259 	beq.w	8007732 <_svfiprintf_r+0x87e>
 8007280:	2d00      	cmp	r5, #0
 8007282:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007284:	f2c0 822d 	blt.w	80076e2 <_svfiprintf_r+0x82e>
 8007288:	4631      	mov	r1, r6
 800728a:	462a      	mov	r2, r5
 800728c:	f7fe ff50 	bl	8006130 <memchr>
 8007290:	2800      	cmp	r0, #0
 8007292:	f000 8258 	beq.w	8007746 <_svfiprintf_r+0x892>
 8007296:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007298:	9608      	str	r6, [sp, #32]
 800729a:	1ac0      	subs	r0, r0, r3
 800729c:	42a8      	cmp	r0, r5
 800729e:	9003      	str	r0, [sp, #12]
 80072a0:	bfc8      	it	gt
 80072a2:	9503      	strgt	r5, [sp, #12]
 80072a4:	e6ea      	b.n	800707c <_svfiprintf_r+0x1c8>
 80072a6:	f04b 0b10 	orr.w	fp, fp, #16
 80072aa:	f01b 0f10 	tst.w	fp, #16
 80072ae:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 80072b2:	f47f af5c 	bne.w	800716e <_svfiprintf_r+0x2ba>
 80072b6:	f01b 0f40 	tst.w	fp, #64	; 0x40
 80072ba:	f000 8208 	beq.w	80076ce <_svfiprintf_r+0x81a>
 80072be:	9905      	ldr	r1, [sp, #20]
 80072c0:	f9b1 3000 	ldrsh.w	r3, [r1]
 80072c4:	3104      	adds	r1, #4
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	9105      	str	r1, [sp, #20]
 80072ca:	f6bf af57 	bge.w	800717c <_svfiprintf_r+0x2c8>
 80072ce:	425b      	negs	r3, r3
 80072d0:	222d      	movs	r2, #45	; 0x2d
 80072d2:	1c19      	adds	r1, r3, #0
 80072d4:	f88d 20af 	strb.w	r2, [sp, #175]	; 0xaf
 80072d8:	bf18      	it	ne
 80072da:	2101      	movne	r1, #1
 80072dc:	2201      	movs	r2, #1
 80072de:	e6a8      	b.n	8007032 <_svfiprintf_r+0x17e>
 80072e0:	4638      	mov	r0, r7
 80072e2:	2100      	movs	r1, #0
 80072e4:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 80072e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80072ec:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80072f0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80072f4:	2e09      	cmp	r6, #9
 80072f6:	eb07 0141 	add.w	r1, r7, r1, lsl #1
 80072fa:	4607      	mov	r7, r0
 80072fc:	d9f2      	bls.n	80072e4 <_svfiprintf_r+0x430>
 80072fe:	9106      	str	r1, [sp, #24]
 8007300:	e623      	b.n	8006f4a <_svfiprintf_r+0x96>
 8007302:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 8007306:	e61e      	b.n	8006f46 <_svfiprintf_r+0x92>
 8007308:	232b      	movs	r3, #43	; 0x2b
 800730a:	e61c      	b.n	8006f46 <_svfiprintf_r+0x92>
 800730c:	f817 2b01 	ldrb.w	r2, [r7], #1
 8007310:	2a2a      	cmp	r2, #42	; 0x2a
 8007312:	f000 81ae 	beq.w	8007672 <_svfiprintf_r+0x7be>
 8007316:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800731a:	2500      	movs	r5, #0
 800731c:	2909      	cmp	r1, #9
 800731e:	f63f ae14 	bhi.w	8006f4a <_svfiprintf_r+0x96>
 8007322:	4638      	mov	r0, r7
 8007324:	2500      	movs	r5, #0
 8007326:	f810 2b01 	ldrb.w	r2, [r0], #1
 800732a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800732e:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 8007332:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007336:	2909      	cmp	r1, #9
 8007338:	4607      	mov	r7, r0
 800733a:	d9f4      	bls.n	8007326 <_svfiprintf_r+0x472>
 800733c:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 8007340:	e603      	b.n	8006f4a <_svfiprintf_r+0x96>
 8007342:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8007344:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007346:	f89d 10af 	ldrb.w	r1, [sp, #175]	; 0xaf
 800734a:	b161      	cbz	r1, 8007366 <_svfiprintf_r+0x4b2>
 800734c:	3301      	adds	r3, #1
 800734e:	f10d 01af 	add.w	r1, sp, #175	; 0xaf
 8007352:	3201      	adds	r2, #1
 8007354:	6021      	str	r1, [r4, #0]
 8007356:	2101      	movs	r1, #1
 8007358:	2b07      	cmp	r3, #7
 800735a:	6061      	str	r1, [r4, #4]
 800735c:	922a      	str	r2, [sp, #168]	; 0xa8
 800735e:	9329      	str	r3, [sp, #164]	; 0xa4
 8007360:	f300 811e 	bgt.w	80075a0 <_svfiprintf_r+0x6ec>
 8007364:	3408      	adds	r4, #8
 8007366:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007368:	b159      	cbz	r1, 8007382 <_svfiprintf_r+0x4ce>
 800736a:	3301      	adds	r3, #1
 800736c:	a92b      	add	r1, sp, #172	; 0xac
 800736e:	3202      	adds	r2, #2
 8007370:	6021      	str	r1, [r4, #0]
 8007372:	2102      	movs	r1, #2
 8007374:	2b07      	cmp	r3, #7
 8007376:	6061      	str	r1, [r4, #4]
 8007378:	922a      	str	r2, [sp, #168]	; 0xa8
 800737a:	9329      	str	r3, [sp, #164]	; 0xa4
 800737c:	f300 811b 	bgt.w	80075b6 <_svfiprintf_r+0x702>
 8007380:	3408      	adds	r4, #8
 8007382:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007384:	2880      	cmp	r0, #128	; 0x80
 8007386:	f000 80ae 	beq.w	80074e6 <_svfiprintf_r+0x632>
 800738a:	9808      	ldr	r0, [sp, #32]
 800738c:	9903      	ldr	r1, [sp, #12]
 800738e:	1a45      	subs	r5, r0, r1
 8007390:	2d00      	cmp	r5, #0
 8007392:	dd33      	ble.n	80073fc <_svfiprintf_r+0x548>
 8007394:	2d10      	cmp	r5, #16
 8007396:	4e06      	ldr	r6, [pc, #24]	; (80073b0 <_svfiprintf_r+0x4fc>)
 8007398:	dd26      	ble.n	80073e8 <_svfiprintf_r+0x534>
 800739a:	4621      	mov	r1, r4
 800739c:	f04f 0910 	mov.w	r9, #16
 80073a0:	9c07      	ldr	r4, [sp, #28]
 80073a2:	e00a      	b.n	80073ba <_svfiprintf_r+0x506>
 80073a4:	08008920 	.word	0x08008920
 80073a8:	08008868 	.word	0x08008868
 80073ac:	0800890c 	.word	0x0800890c
 80073b0:	08008878 	.word	0x08008878
 80073b4:	3d10      	subs	r5, #16
 80073b6:	2d10      	cmp	r5, #16
 80073b8:	dd15      	ble.n	80073e6 <_svfiprintf_r+0x532>
 80073ba:	3301      	adds	r3, #1
 80073bc:	3210      	adds	r2, #16
 80073be:	e881 0240 	stmia.w	r1, {r6, r9}
 80073c2:	3108      	adds	r1, #8
 80073c4:	2b07      	cmp	r3, #7
 80073c6:	922a      	str	r2, [sp, #168]	; 0xa8
 80073c8:	9329      	str	r3, [sp, #164]	; 0xa4
 80073ca:	ddf3      	ble.n	80073b4 <_svfiprintf_r+0x500>
 80073cc:	4620      	mov	r0, r4
 80073ce:	4651      	mov	r1, sl
 80073d0:	4642      	mov	r2, r8
 80073d2:	f7ff fcef 	bl	8006db4 <__ssprint_r>
 80073d6:	2800      	cmp	r0, #0
 80073d8:	d178      	bne.n	80074cc <_svfiprintf_r+0x618>
 80073da:	3d10      	subs	r5, #16
 80073dc:	2d10      	cmp	r5, #16
 80073de:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80073e0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80073e2:	a90e      	add	r1, sp, #56	; 0x38
 80073e4:	dce9      	bgt.n	80073ba <_svfiprintf_r+0x506>
 80073e6:	460c      	mov	r4, r1
 80073e8:	3301      	adds	r3, #1
 80073ea:	1952      	adds	r2, r2, r5
 80073ec:	2b07      	cmp	r3, #7
 80073ee:	6026      	str	r6, [r4, #0]
 80073f0:	6065      	str	r5, [r4, #4]
 80073f2:	922a      	str	r2, [sp, #168]	; 0xa8
 80073f4:	9329      	str	r3, [sp, #164]	; 0xa4
 80073f6:	f300 80c8 	bgt.w	800758a <_svfiprintf_r+0x6d6>
 80073fa:	3408      	adds	r4, #8
 80073fc:	9903      	ldr	r1, [sp, #12]
 80073fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007400:	3301      	adds	r3, #1
 8007402:	1852      	adds	r2, r2, r1
 8007404:	2b07      	cmp	r3, #7
 8007406:	e884 0003 	stmia.w	r4, {r0, r1}
 800740a:	922a      	str	r2, [sp, #168]	; 0xa8
 800740c:	9329      	str	r3, [sp, #164]	; 0xa4
 800740e:	bfd8      	it	le
 8007410:	f104 0108 	addle.w	r1, r4, #8
 8007414:	f300 809a 	bgt.w	800754c <_svfiprintf_r+0x698>
 8007418:	f01b 0f04 	tst.w	fp, #4
 800741c:	d02e      	beq.n	800747c <_svfiprintf_r+0x5c8>
 800741e:	9b06      	ldr	r3, [sp, #24]
 8007420:	9802      	ldr	r0, [sp, #8]
 8007422:	1a1d      	subs	r5, r3, r0
 8007424:	2d00      	cmp	r5, #0
 8007426:	dd29      	ble.n	800747c <_svfiprintf_r+0x5c8>
 8007428:	2d10      	cmp	r5, #16
 800742a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800742c:	4e97      	ldr	r6, [pc, #604]	; (800768c <_svfiprintf_r+0x7d8>)
 800742e:	dd1c      	ble.n	800746a <_svfiprintf_r+0x5b6>
 8007430:	2410      	movs	r4, #16
 8007432:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8007436:	e002      	b.n	800743e <_svfiprintf_r+0x58a>
 8007438:	3d10      	subs	r5, #16
 800743a:	2d10      	cmp	r5, #16
 800743c:	dd15      	ble.n	800746a <_svfiprintf_r+0x5b6>
 800743e:	3301      	adds	r3, #1
 8007440:	3210      	adds	r2, #16
 8007442:	600e      	str	r6, [r1, #0]
 8007444:	604c      	str	r4, [r1, #4]
 8007446:	3108      	adds	r1, #8
 8007448:	2b07      	cmp	r3, #7
 800744a:	922a      	str	r2, [sp, #168]	; 0xa8
 800744c:	9329      	str	r3, [sp, #164]	; 0xa4
 800744e:	ddf3      	ble.n	8007438 <_svfiprintf_r+0x584>
 8007450:	4648      	mov	r0, r9
 8007452:	4651      	mov	r1, sl
 8007454:	4642      	mov	r2, r8
 8007456:	f7ff fcad 	bl	8006db4 <__ssprint_r>
 800745a:	2800      	cmp	r0, #0
 800745c:	d136      	bne.n	80074cc <_svfiprintf_r+0x618>
 800745e:	3d10      	subs	r5, #16
 8007460:	2d10      	cmp	r5, #16
 8007462:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8007464:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007466:	a90e      	add	r1, sp, #56	; 0x38
 8007468:	dce9      	bgt.n	800743e <_svfiprintf_r+0x58a>
 800746a:	3301      	adds	r3, #1
 800746c:	18aa      	adds	r2, r5, r2
 800746e:	2b07      	cmp	r3, #7
 8007470:	600e      	str	r6, [r1, #0]
 8007472:	604d      	str	r5, [r1, #4]
 8007474:	922a      	str	r2, [sp, #168]	; 0xa8
 8007476:	9329      	str	r3, [sp, #164]	; 0xa4
 8007478:	f300 810c 	bgt.w	8007694 <_svfiprintf_r+0x7e0>
 800747c:	9b04      	ldr	r3, [sp, #16]
 800747e:	9902      	ldr	r1, [sp, #8]
 8007480:	9806      	ldr	r0, [sp, #24]
 8007482:	4281      	cmp	r1, r0
 8007484:	bfac      	ite	ge
 8007486:	185b      	addge	r3, r3, r1
 8007488:	181b      	addlt	r3, r3, r0
 800748a:	9304      	str	r3, [sp, #16]
 800748c:	2a00      	cmp	r2, #0
 800748e:	d167      	bne.n	8007560 <_svfiprintf_r+0x6ac>
 8007490:	2300      	movs	r3, #0
 8007492:	9329      	str	r3, [sp, #164]	; 0xa4
 8007494:	ac0e      	add	r4, sp, #56	; 0x38
 8007496:	e52c      	b.n	8006ef2 <_svfiprintf_r+0x3e>
 8007498:	2a00      	cmp	r2, #0
 800749a:	d169      	bne.n	8007570 <_svfiprintf_r+0x6bc>
 800749c:	f01b 0f01 	tst.w	fp, #1
 80074a0:	bf04      	itt	eq
 80074a2:	9203      	streq	r2, [sp, #12]
 80074a4:	f8cd 8024 	streq.w	r8, [sp, #36]	; 0x24
 80074a8:	f43f ade7 	beq.w	800707a <_svfiprintf_r+0x1c6>
 80074ac:	2330      	movs	r3, #48	; 0x30
 80074ae:	f88d 309f 	strb.w	r3, [sp, #159]	; 0x9f
 80074b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80074b4:	9303      	str	r3, [sp, #12]
 80074b6:	f10d 039f 	add.w	r3, sp, #159	; 0x9f
 80074ba:	9309      	str	r3, [sp, #36]	; 0x24
 80074bc:	e5dd      	b.n	800707a <_svfiprintf_r+0x1c6>
 80074be:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80074c0:	b123      	cbz	r3, 80074cc <_svfiprintf_r+0x618>
 80074c2:	9807      	ldr	r0, [sp, #28]
 80074c4:	4651      	mov	r1, sl
 80074c6:	aa28      	add	r2, sp, #160	; 0xa0
 80074c8:	f7ff fc74 	bl	8006db4 <__ssprint_r>
 80074cc:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 80074d0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80074d4:	9b04      	ldr	r3, [sp, #16]
 80074d6:	bf18      	it	ne
 80074d8:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 80074dc:	9304      	str	r3, [sp, #16]
 80074de:	9804      	ldr	r0, [sp, #16]
 80074e0:	b02d      	add	sp, #180	; 0xb4
 80074e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074e6:	9906      	ldr	r1, [sp, #24]
 80074e8:	9802      	ldr	r0, [sp, #8]
 80074ea:	1a0d      	subs	r5, r1, r0
 80074ec:	2d00      	cmp	r5, #0
 80074ee:	f77f af4c 	ble.w	800738a <_svfiprintf_r+0x4d6>
 80074f2:	2d10      	cmp	r5, #16
 80074f4:	4e66      	ldr	r6, [pc, #408]	; (8007690 <_svfiprintf_r+0x7dc>)
 80074f6:	dd1e      	ble.n	8007536 <_svfiprintf_r+0x682>
 80074f8:	4621      	mov	r1, r4
 80074fa:	f04f 0910 	mov.w	r9, #16
 80074fe:	9c07      	ldr	r4, [sp, #28]
 8007500:	e002      	b.n	8007508 <_svfiprintf_r+0x654>
 8007502:	3d10      	subs	r5, #16
 8007504:	2d10      	cmp	r5, #16
 8007506:	dd15      	ble.n	8007534 <_svfiprintf_r+0x680>
 8007508:	3301      	adds	r3, #1
 800750a:	3210      	adds	r2, #16
 800750c:	e881 0240 	stmia.w	r1, {r6, r9}
 8007510:	3108      	adds	r1, #8
 8007512:	2b07      	cmp	r3, #7
 8007514:	922a      	str	r2, [sp, #168]	; 0xa8
 8007516:	9329      	str	r3, [sp, #164]	; 0xa4
 8007518:	ddf3      	ble.n	8007502 <_svfiprintf_r+0x64e>
 800751a:	4620      	mov	r0, r4
 800751c:	4651      	mov	r1, sl
 800751e:	4642      	mov	r2, r8
 8007520:	f7ff fc48 	bl	8006db4 <__ssprint_r>
 8007524:	2800      	cmp	r0, #0
 8007526:	d1d1      	bne.n	80074cc <_svfiprintf_r+0x618>
 8007528:	3d10      	subs	r5, #16
 800752a:	2d10      	cmp	r5, #16
 800752c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800752e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007530:	a90e      	add	r1, sp, #56	; 0x38
 8007532:	dce9      	bgt.n	8007508 <_svfiprintf_r+0x654>
 8007534:	460c      	mov	r4, r1
 8007536:	3301      	adds	r3, #1
 8007538:	1952      	adds	r2, r2, r5
 800753a:	2b07      	cmp	r3, #7
 800753c:	6026      	str	r6, [r4, #0]
 800753e:	6065      	str	r5, [r4, #4]
 8007540:	922a      	str	r2, [sp, #168]	; 0xa8
 8007542:	9329      	str	r3, [sp, #164]	; 0xa4
 8007544:	f300 80d2 	bgt.w	80076ec <_svfiprintf_r+0x838>
 8007548:	3408      	adds	r4, #8
 800754a:	e71e      	b.n	800738a <_svfiprintf_r+0x4d6>
 800754c:	9807      	ldr	r0, [sp, #28]
 800754e:	4651      	mov	r1, sl
 8007550:	4642      	mov	r2, r8
 8007552:	f7ff fc2f 	bl	8006db4 <__ssprint_r>
 8007556:	2800      	cmp	r0, #0
 8007558:	d1b8      	bne.n	80074cc <_svfiprintf_r+0x618>
 800755a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800755c:	a90e      	add	r1, sp, #56	; 0x38
 800755e:	e75b      	b.n	8007418 <_svfiprintf_r+0x564>
 8007560:	9807      	ldr	r0, [sp, #28]
 8007562:	4651      	mov	r1, sl
 8007564:	4642      	mov	r2, r8
 8007566:	f7ff fc25 	bl	8006db4 <__ssprint_r>
 800756a:	2800      	cmp	r0, #0
 800756c:	d090      	beq.n	8007490 <_svfiprintf_r+0x5dc>
 800756e:	e7ad      	b.n	80074cc <_svfiprintf_r+0x618>
 8007570:	9103      	str	r1, [sp, #12]
 8007572:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8007576:	e580      	b.n	800707a <_svfiprintf_r+0x1c6>
 8007578:	9807      	ldr	r0, [sp, #28]
 800757a:	4651      	mov	r1, sl
 800757c:	4642      	mov	r2, r8
 800757e:	f7ff fc19 	bl	8006db4 <__ssprint_r>
 8007582:	2800      	cmp	r0, #0
 8007584:	d1a2      	bne.n	80074cc <_svfiprintf_r+0x618>
 8007586:	ac0e      	add	r4, sp, #56	; 0x38
 8007588:	e4cd      	b.n	8006f26 <_svfiprintf_r+0x72>
 800758a:	9807      	ldr	r0, [sp, #28]
 800758c:	4651      	mov	r1, sl
 800758e:	4642      	mov	r2, r8
 8007590:	f7ff fc10 	bl	8006db4 <__ssprint_r>
 8007594:	2800      	cmp	r0, #0
 8007596:	d199      	bne.n	80074cc <_svfiprintf_r+0x618>
 8007598:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800759a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800759c:	ac0e      	add	r4, sp, #56	; 0x38
 800759e:	e72d      	b.n	80073fc <_svfiprintf_r+0x548>
 80075a0:	9807      	ldr	r0, [sp, #28]
 80075a2:	4651      	mov	r1, sl
 80075a4:	4642      	mov	r2, r8
 80075a6:	f7ff fc05 	bl	8006db4 <__ssprint_r>
 80075aa:	2800      	cmp	r0, #0
 80075ac:	d18e      	bne.n	80074cc <_svfiprintf_r+0x618>
 80075ae:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80075b0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80075b2:	ac0e      	add	r4, sp, #56	; 0x38
 80075b4:	e6d7      	b.n	8007366 <_svfiprintf_r+0x4b2>
 80075b6:	9807      	ldr	r0, [sp, #28]
 80075b8:	4651      	mov	r1, sl
 80075ba:	4642      	mov	r2, r8
 80075bc:	f7ff fbfa 	bl	8006db4 <__ssprint_r>
 80075c0:	2800      	cmp	r0, #0
 80075c2:	d183      	bne.n	80074cc <_svfiprintf_r+0x618>
 80075c4:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80075c6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80075c8:	ac0e      	add	r4, sp, #56	; 0x38
 80075ca:	e6da      	b.n	8007382 <_svfiprintf_r+0x4ce>
 80075cc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80075ce:	f10d 029f 	add.w	r2, sp, #159	; 0x9f
 80075d2:	f003 000f 	and.w	r0, r3, #15
 80075d6:	4611      	mov	r1, r2
 80075d8:	5c30      	ldrb	r0, [r6, r0]
 80075da:	3a01      	subs	r2, #1
 80075dc:	091b      	lsrs	r3, r3, #4
 80075de:	7008      	strb	r0, [r1, #0]
 80075e0:	d1f7      	bne.n	80075d2 <_svfiprintf_r+0x71e>
 80075e2:	ebc1 0308 	rsb	r3, r1, r8
 80075e6:	9109      	str	r1, [sp, #36]	; 0x24
 80075e8:	9303      	str	r3, [sp, #12]
 80075ea:	e546      	b.n	800707a <_svfiprintf_r+0x1c6>
 80075ec:	2b09      	cmp	r3, #9
 80075ee:	bf82      	ittt	hi
 80075f0:	f64c 46cd 	movwhi	r6, #52429	; 0xcccd
 80075f4:	f10d 019f 	addhi.w	r1, sp, #159	; 0x9f
 80075f8:	f6cc 46cc 	movthi	r6, #52428	; 0xcccc
 80075fc:	d801      	bhi.n	8007602 <_svfiprintf_r+0x74e>
 80075fe:	3330      	adds	r3, #48	; 0x30
 8007600:	e755      	b.n	80074ae <_svfiprintf_r+0x5fa>
 8007602:	fba6 0203 	umull	r0, r2, r6, r3
 8007606:	08d2      	lsrs	r2, r2, #3
 8007608:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
 800760c:	eba3 0c4c 	sub.w	ip, r3, ip, lsl #1
 8007610:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8007614:	4608      	mov	r0, r1
 8007616:	f881 c000 	strb.w	ip, [r1]
 800761a:	4613      	mov	r3, r2
 800761c:	3901      	subs	r1, #1
 800761e:	2a00      	cmp	r2, #0
 8007620:	d1ef      	bne.n	8007602 <_svfiprintf_r+0x74e>
 8007622:	9009      	str	r0, [sp, #36]	; 0x24
 8007624:	e526      	b.n	8007074 <_svfiprintf_r+0x1c0>
 8007626:	9905      	ldr	r1, [sp, #20]
 8007628:	f01b 0f40 	tst.w	fp, #64	; 0x40
 800762c:	bf14      	ite	ne
 800762e:	880b      	ldrhne	r3, [r1, #0]
 8007630:	680b      	ldreq	r3, [r1, #0]
 8007632:	2201      	movs	r2, #1
 8007634:	9805      	ldr	r0, [sp, #20]
 8007636:	1c19      	adds	r1, r3, #0
 8007638:	bf18      	it	ne
 800763a:	2101      	movne	r1, #1
 800763c:	3004      	adds	r0, #4
 800763e:	9005      	str	r0, [sp, #20]
 8007640:	e4f4      	b.n	800702c <_svfiprintf_r+0x178>
 8007642:	f01b 0140 	ands.w	r1, fp, #64	; 0x40
 8007646:	bf0b      	itete	eq
 8007648:	9a05      	ldreq	r2, [sp, #20]
 800764a:	9905      	ldrne	r1, [sp, #20]
 800764c:	6813      	ldreq	r3, [r2, #0]
 800764e:	880b      	ldrhne	r3, [r1, #0]
 8007650:	bf08      	it	eq
 8007652:	460a      	moveq	r2, r1
 8007654:	e7ee      	b.n	8007634 <_svfiprintf_r+0x780>
 8007656:	2202      	movs	r2, #2
 8007658:	e4e8      	b.n	800702c <_svfiprintf_r+0x178>
 800765a:	9807      	ldr	r0, [sp, #28]
 800765c:	4651      	mov	r1, sl
 800765e:	4642      	mov	r2, r8
 8007660:	f7ff fba8 	bl	8006db4 <__ssprint_r>
 8007664:	2800      	cmp	r0, #0
 8007666:	f47f af31 	bne.w	80074cc <_svfiprintf_r+0x618>
 800766a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800766c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800766e:	ac0e      	add	r4, sp, #56	; 0x38
 8007670:	e669      	b.n	8007346 <_svfiprintf_r+0x492>
 8007672:	9a05      	ldr	r2, [sp, #20]
 8007674:	6815      	ldr	r5, [r2, #0]
 8007676:	3204      	adds	r2, #4
 8007678:	2d00      	cmp	r5, #0
 800767a:	bfbc      	itt	lt
 800767c:	9205      	strlt	r2, [sp, #20]
 800767e:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
 8007682:	f6ff ac60 	blt.w	8006f46 <_svfiprintf_r+0x92>
 8007686:	9205      	str	r2, [sp, #20]
 8007688:	e45d      	b.n	8006f46 <_svfiprintf_r+0x92>
 800768a:	bf00      	nop
 800768c:	08008868 	.word	0x08008868
 8007690:	08008878 	.word	0x08008878
 8007694:	9807      	ldr	r0, [sp, #28]
 8007696:	4651      	mov	r1, sl
 8007698:	4642      	mov	r2, r8
 800769a:	f7ff fb8b 	bl	8006db4 <__ssprint_r>
 800769e:	2800      	cmp	r0, #0
 80076a0:	f47f af14 	bne.w	80074cc <_svfiprintf_r+0x618>
 80076a4:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80076a6:	e6e9      	b.n	800747c <_svfiprintf_r+0x5c8>
 80076a8:	2930      	cmp	r1, #48	; 0x30
 80076aa:	d004      	beq.n	80076b6 <_svfiprintf_r+0x802>
 80076ac:	1e93      	subs	r3, r2, #2
 80076ae:	9309      	str	r3, [sp, #36]	; 0x24
 80076b0:	2330      	movs	r3, #48	; 0x30
 80076b2:	f802 3c02 	strb.w	r3, [r2, #-2]
 80076b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076b8:	ebc3 0308 	rsb	r3, r3, r8
 80076bc:	9303      	str	r3, [sp, #12]
 80076be:	e4dc      	b.n	800707a <_svfiprintf_r+0x1c6>
 80076c0:	9805      	ldr	r0, [sp, #20]
 80076c2:	9904      	ldr	r1, [sp, #16]
 80076c4:	6803      	ldr	r3, [r0, #0]
 80076c6:	3004      	adds	r0, #4
 80076c8:	9005      	str	r0, [sp, #20]
 80076ca:	6019      	str	r1, [r3, #0]
 80076cc:	e411      	b.n	8006ef2 <_svfiprintf_r+0x3e>
 80076ce:	9a05      	ldr	r2, [sp, #20]
 80076d0:	6813      	ldr	r3, [r2, #0]
 80076d2:	3204      	adds	r2, #4
 80076d4:	9205      	str	r2, [sp, #20]
 80076d6:	e54e      	b.n	8007176 <_svfiprintf_r+0x2c2>
 80076d8:	9905      	ldr	r1, [sp, #20]
 80076da:	880b      	ldrh	r3, [r1, #0]
 80076dc:	3104      	adds	r1, #4
 80076de:	9105      	str	r1, [sp, #20]
 80076e0:	e52b      	b.n	800713a <_svfiprintf_r+0x286>
 80076e2:	f7ff fb37 	bl	8006d54 <strlen>
 80076e6:	9608      	str	r6, [sp, #32]
 80076e8:	9003      	str	r0, [sp, #12]
 80076ea:	e4c7      	b.n	800707c <_svfiprintf_r+0x1c8>
 80076ec:	9807      	ldr	r0, [sp, #28]
 80076ee:	4651      	mov	r1, sl
 80076f0:	4642      	mov	r2, r8
 80076f2:	f7ff fb5f 	bl	8006db4 <__ssprint_r>
 80076f6:	2800      	cmp	r0, #0
 80076f8:	f47f aee8 	bne.w	80074cc <_svfiprintf_r+0x618>
 80076fc:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80076fe:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007700:	ac0e      	add	r4, sp, #56	; 0x38
 8007702:	e642      	b.n	800738a <_svfiprintf_r+0x4d6>
 8007704:	9905      	ldr	r1, [sp, #20]
 8007706:	9a04      	ldr	r2, [sp, #16]
 8007708:	680b      	ldr	r3, [r1, #0]
 800770a:	3104      	adds	r1, #4
 800770c:	9105      	str	r1, [sp, #20]
 800770e:	601a      	str	r2, [r3, #0]
 8007710:	f7ff bbef 	b.w	8006ef2 <_svfiprintf_r+0x3e>
 8007714:	2140      	movs	r1, #64	; 0x40
 8007716:	9200      	str	r2, [sp, #0]
 8007718:	f7fe fa56 	bl	8005bc8 <_malloc_r>
 800771c:	9a00      	ldr	r2, [sp, #0]
 800771e:	f8ca 0000 	str.w	r0, [sl]
 8007722:	f8ca 0010 	str.w	r0, [sl, #16]
 8007726:	b188      	cbz	r0, 800774c <_svfiprintf_r+0x898>
 8007728:	2340      	movs	r3, #64	; 0x40
 800772a:	f8ca 3014 	str.w	r3, [sl, #20]
 800772e:	f7ff bbcf 	b.w	8006ed0 <_svfiprintf_r+0x1c>
 8007732:	2d06      	cmp	r5, #6
 8007734:	bf28      	it	cs
 8007736:	2506      	movcs	r5, #6
 8007738:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 800773c:	9302      	str	r3, [sp, #8]
 800773e:	4b07      	ldr	r3, [pc, #28]	; (800775c <_svfiprintf_r+0x8a8>)
 8007740:	9503      	str	r5, [sp, #12]
 8007742:	9309      	str	r3, [sp, #36]	; 0x24
 8007744:	e52e      	b.n	80071a4 <_svfiprintf_r+0x2f0>
 8007746:	9503      	str	r5, [sp, #12]
 8007748:	9008      	str	r0, [sp, #32]
 800774a:	e497      	b.n	800707c <_svfiprintf_r+0x1c8>
 800774c:	9807      	ldr	r0, [sp, #28]
 800774e:	230c      	movs	r3, #12
 8007750:	6003      	str	r3, [r0, #0]
 8007752:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007756:	9304      	str	r3, [sp, #16]
 8007758:	e6c1      	b.n	80074de <_svfiprintf_r+0x62a>
 800775a:	bf00      	nop
 800775c:	08008934 	.word	0x08008934

08007760 <_calloc_r>:
 8007760:	b510      	push	{r4, lr}
 8007762:	fb01 f102 	mul.w	r1, r1, r2
 8007766:	f7fe fa2f 	bl	8005bc8 <_malloc_r>
 800776a:	4604      	mov	r4, r0
 800776c:	b300      	cbz	r0, 80077b0 <_calloc_r+0x50>
 800776e:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8007772:	f022 0203 	bic.w	r2, r2, #3
 8007776:	3a04      	subs	r2, #4
 8007778:	2a24      	cmp	r2, #36	; 0x24
 800777a:	d81b      	bhi.n	80077b4 <_calloc_r+0x54>
 800777c:	2a13      	cmp	r2, #19
 800777e:	bf98      	it	ls
 8007780:	4602      	movls	r2, r0
 8007782:	d911      	bls.n	80077a8 <_calloc_r+0x48>
 8007784:	2300      	movs	r3, #0
 8007786:	2a1b      	cmp	r2, #27
 8007788:	6003      	str	r3, [r0, #0]
 800778a:	6043      	str	r3, [r0, #4]
 800778c:	bf98      	it	ls
 800778e:	f100 0208 	addls.w	r2, r0, #8
 8007792:	d909      	bls.n	80077a8 <_calloc_r+0x48>
 8007794:	2a24      	cmp	r2, #36	; 0x24
 8007796:	6083      	str	r3, [r0, #8]
 8007798:	60c3      	str	r3, [r0, #12]
 800779a:	bf11      	iteee	ne
 800779c:	f100 0210 	addne.w	r2, r0, #16
 80077a0:	6103      	streq	r3, [r0, #16]
 80077a2:	6143      	streq	r3, [r0, #20]
 80077a4:	f100 0218 	addeq.w	r2, r0, #24
 80077a8:	2300      	movs	r3, #0
 80077aa:	6013      	str	r3, [r2, #0]
 80077ac:	6053      	str	r3, [r2, #4]
 80077ae:	6093      	str	r3, [r2, #8]
 80077b0:	4620      	mov	r0, r4
 80077b2:	bd10      	pop	{r4, pc}
 80077b4:	2100      	movs	r1, #0
 80077b6:	f000 f85b 	bl	8007870 <memset>
 80077ba:	4620      	mov	r0, r4
 80077bc:	bd10      	pop	{r4, pc}
 80077be:	bf00      	nop

080077c0 <memmove>:
 80077c0:	4288      	cmp	r0, r1
 80077c2:	b4f0      	push	{r4, r5, r6, r7}
 80077c4:	d912      	bls.n	80077ec <memmove+0x2c>
 80077c6:	188d      	adds	r5, r1, r2
 80077c8:	42a8      	cmp	r0, r5
 80077ca:	d20f      	bcs.n	80077ec <memmove+0x2c>
 80077cc:	b162      	cbz	r2, 80077e8 <memmove+0x28>
 80077ce:	4251      	negs	r1, r2
 80077d0:	4613      	mov	r3, r2
 80077d2:	1882      	adds	r2, r0, r2
 80077d4:	186d      	adds	r5, r5, r1
 80077d6:	1852      	adds	r2, r2, r1
 80077d8:	18ec      	adds	r4, r5, r3
 80077da:	18d1      	adds	r1, r2, r3
 80077dc:	f814 4c01 	ldrb.w	r4, [r4, #-1]
 80077e0:	3b01      	subs	r3, #1
 80077e2:	f801 4c01 	strb.w	r4, [r1, #-1]
 80077e6:	d1f7      	bne.n	80077d8 <memmove+0x18>
 80077e8:	bcf0      	pop	{r4, r5, r6, r7}
 80077ea:	4770      	bx	lr
 80077ec:	2a0f      	cmp	r2, #15
 80077ee:	bf98      	it	ls
 80077f0:	4603      	movls	r3, r0
 80077f2:	d931      	bls.n	8007858 <memmove+0x98>
 80077f4:	ea41 0300 	orr.w	r3, r1, r0
 80077f8:	079b      	lsls	r3, r3, #30
 80077fa:	d137      	bne.n	800786c <memmove+0xac>
 80077fc:	460c      	mov	r4, r1
 80077fe:	4603      	mov	r3, r0
 8007800:	4615      	mov	r5, r2
 8007802:	6826      	ldr	r6, [r4, #0]
 8007804:	601e      	str	r6, [r3, #0]
 8007806:	6866      	ldr	r6, [r4, #4]
 8007808:	605e      	str	r6, [r3, #4]
 800780a:	68a6      	ldr	r6, [r4, #8]
 800780c:	609e      	str	r6, [r3, #8]
 800780e:	68e6      	ldr	r6, [r4, #12]
 8007810:	3d10      	subs	r5, #16
 8007812:	60de      	str	r6, [r3, #12]
 8007814:	3410      	adds	r4, #16
 8007816:	3310      	adds	r3, #16
 8007818:	2d0f      	cmp	r5, #15
 800781a:	d8f2      	bhi.n	8007802 <memmove+0x42>
 800781c:	f1a2 0410 	sub.w	r4, r2, #16
 8007820:	f024 040f 	bic.w	r4, r4, #15
 8007824:	f002 020f 	and.w	r2, r2, #15
 8007828:	3410      	adds	r4, #16
 800782a:	2a03      	cmp	r2, #3
 800782c:	eb00 0304 	add.w	r3, r0, r4
 8007830:	4421      	add	r1, r4
 8007832:	d911      	bls.n	8007858 <memmove+0x98>
 8007834:	1f0e      	subs	r6, r1, #4
 8007836:	461d      	mov	r5, r3
 8007838:	4614      	mov	r4, r2
 800783a:	f856 7f04 	ldr.w	r7, [r6, #4]!
 800783e:	3c04      	subs	r4, #4
 8007840:	2c03      	cmp	r4, #3
 8007842:	f845 7b04 	str.w	r7, [r5], #4
 8007846:	d8f8      	bhi.n	800783a <memmove+0x7a>
 8007848:	1f14      	subs	r4, r2, #4
 800784a:	f024 0403 	bic.w	r4, r4, #3
 800784e:	3404      	adds	r4, #4
 8007850:	f002 0203 	and.w	r2, r2, #3
 8007854:	1909      	adds	r1, r1, r4
 8007856:	191b      	adds	r3, r3, r4
 8007858:	2a00      	cmp	r2, #0
 800785a:	d0c5      	beq.n	80077e8 <memmove+0x28>
 800785c:	3901      	subs	r1, #1
 800785e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007862:	3a01      	subs	r2, #1
 8007864:	f803 4b01 	strb.w	r4, [r3], #1
 8007868:	d1f9      	bne.n	800785e <memmove+0x9e>
 800786a:	e7bd      	b.n	80077e8 <memmove+0x28>
 800786c:	4603      	mov	r3, r0
 800786e:	e7f5      	b.n	800785c <memmove+0x9c>

08007870 <memset>:
 8007870:	f010 0f03 	tst.w	r0, #3
 8007874:	b470      	push	{r4, r5, r6}
 8007876:	4603      	mov	r3, r0
 8007878:	d042      	beq.n	8007900 <memset+0x90>
 800787a:	2a00      	cmp	r2, #0
 800787c:	d03e      	beq.n	80078fc <memset+0x8c>
 800787e:	3a01      	subs	r2, #1
 8007880:	b2cd      	uxtb	r5, r1
 8007882:	e003      	b.n	800788c <memset+0x1c>
 8007884:	1e54      	subs	r4, r2, #1
 8007886:	2a00      	cmp	r2, #0
 8007888:	d038      	beq.n	80078fc <memset+0x8c>
 800788a:	4622      	mov	r2, r4
 800788c:	f803 5b01 	strb.w	r5, [r3], #1
 8007890:	f013 0f03 	tst.w	r3, #3
 8007894:	461c      	mov	r4, r3
 8007896:	d1f5      	bne.n	8007884 <memset+0x14>
 8007898:	2a03      	cmp	r2, #3
 800789a:	d929      	bls.n	80078f0 <memset+0x80>
 800789c:	b2cd      	uxtb	r5, r1
 800789e:	2a0f      	cmp	r2, #15
 80078a0:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 80078a4:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 80078a8:	bf84      	itt	hi
 80078aa:	4623      	movhi	r3, r4
 80078ac:	4616      	movhi	r6, r2
 80078ae:	d911      	bls.n	80078d4 <memset+0x64>
 80078b0:	3e10      	subs	r6, #16
 80078b2:	601d      	str	r5, [r3, #0]
 80078b4:	605d      	str	r5, [r3, #4]
 80078b6:	609d      	str	r5, [r3, #8]
 80078b8:	60dd      	str	r5, [r3, #12]
 80078ba:	3310      	adds	r3, #16
 80078bc:	2e0f      	cmp	r6, #15
 80078be:	d8f7      	bhi.n	80078b0 <memset+0x40>
 80078c0:	f1a2 0310 	sub.w	r3, r2, #16
 80078c4:	f023 030f 	bic.w	r3, r3, #15
 80078c8:	f002 020f 	and.w	r2, r2, #15
 80078cc:	3310      	adds	r3, #16
 80078ce:	2a03      	cmp	r2, #3
 80078d0:	441c      	add	r4, r3
 80078d2:	d90d      	bls.n	80078f0 <memset+0x80>
 80078d4:	4626      	mov	r6, r4
 80078d6:	4613      	mov	r3, r2
 80078d8:	3b04      	subs	r3, #4
 80078da:	2b03      	cmp	r3, #3
 80078dc:	f846 5b04 	str.w	r5, [r6], #4
 80078e0:	d8fa      	bhi.n	80078d8 <memset+0x68>
 80078e2:	1f13      	subs	r3, r2, #4
 80078e4:	f023 0303 	bic.w	r3, r3, #3
 80078e8:	3304      	adds	r3, #4
 80078ea:	f002 0203 	and.w	r2, r2, #3
 80078ee:	18e4      	adds	r4, r4, r3
 80078f0:	b2c9      	uxtb	r1, r1
 80078f2:	b11a      	cbz	r2, 80078fc <memset+0x8c>
 80078f4:	3a01      	subs	r2, #1
 80078f6:	f804 1b01 	strb.w	r1, [r4], #1
 80078fa:	d1fb      	bne.n	80078f4 <memset+0x84>
 80078fc:	bc70      	pop	{r4, r5, r6}
 80078fe:	4770      	bx	lr
 8007900:	4604      	mov	r4, r0
 8007902:	e7c9      	b.n	8007898 <memset+0x28>

08007904 <_realloc_r>:
 8007904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007908:	460c      	mov	r4, r1
 800790a:	b083      	sub	sp, #12
 800790c:	4607      	mov	r7, r0
 800790e:	4690      	mov	r8, r2
 8007910:	2900      	cmp	r1, #0
 8007912:	f000 80fe 	beq.w	8007b12 <_realloc_r+0x20e>
 8007916:	f108 050b 	add.w	r5, r8, #11
 800791a:	f7fe fc8b 	bl	8006234 <__malloc_lock>
 800791e:	2d16      	cmp	r5, #22
 8007920:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8007924:	d87d      	bhi.n	8007a22 <_realloc_r+0x11e>
 8007926:	2210      	movs	r2, #16
 8007928:	2600      	movs	r6, #0
 800792a:	4615      	mov	r5, r2
 800792c:	4545      	cmp	r5, r8
 800792e:	bf38      	it	cc
 8007930:	f046 0601 	orrcc.w	r6, r6, #1
 8007934:	2e00      	cmp	r6, #0
 8007936:	f040 80f2 	bne.w	8007b1e <_realloc_r+0x21a>
 800793a:	f021 0a03 	bic.w	sl, r1, #3
 800793e:	4592      	cmp	sl, r2
 8007940:	f1a4 0b08 	sub.w	fp, r4, #8
 8007944:	bfa8      	it	ge
 8007946:	4656      	movge	r6, sl
 8007948:	da55      	bge.n	80079f6 <_realloc_r+0xf2>
 800794a:	4ba0      	ldr	r3, [pc, #640]	; (8007bcc <_realloc_r+0x2c8>)
 800794c:	f8d3 c008 	ldr.w	ip, [r3, #8]
 8007950:	eb0b 000a 	add.w	r0, fp, sl
 8007954:	4584      	cmp	ip, r0
 8007956:	f000 80e7 	beq.w	8007b28 <_realloc_r+0x224>
 800795a:	f8d0 e004 	ldr.w	lr, [r0, #4]
 800795e:	f02e 0901 	bic.w	r9, lr, #1
 8007962:	4481      	add	r9, r0
 8007964:	f8d9 9004 	ldr.w	r9, [r9, #4]
 8007968:	f019 0f01 	tst.w	r9, #1
 800796c:	bf1c      	itt	ne
 800796e:	46b6      	movne	lr, r6
 8007970:	4670      	movne	r0, lr
 8007972:	d05b      	beq.n	8007a2c <_realloc_r+0x128>
 8007974:	07c9      	lsls	r1, r1, #31
 8007976:	d479      	bmi.n	8007a6c <_realloc_r+0x168>
 8007978:	f854 1c08 	ldr.w	r1, [r4, #-8]
 800797c:	ebc1 090b 	rsb	r9, r1, fp
 8007980:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007984:	f021 0103 	bic.w	r1, r1, #3
 8007988:	2800      	cmp	r0, #0
 800798a:	f000 8097 	beq.w	8007abc <_realloc_r+0x1b8>
 800798e:	4560      	cmp	r0, ip
 8007990:	eb01 0c0a 	add.w	ip, r1, sl
 8007994:	eb0e 060c 	add.w	r6, lr, ip
 8007998:	f000 811a 	beq.w	8007bd0 <_realloc_r+0x2cc>
 800799c:	42b2      	cmp	r2, r6
 800799e:	f300 808f 	bgt.w	8007ac0 <_realloc_r+0x1bc>
 80079a2:	68c3      	ldr	r3, [r0, #12]
 80079a4:	6882      	ldr	r2, [r0, #8]
 80079a6:	46c8      	mov	r8, r9
 80079a8:	609a      	str	r2, [r3, #8]
 80079aa:	60d3      	str	r3, [r2, #12]
 80079ac:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80079b0:	f858 1f08 	ldr.w	r1, [r8, #8]!
 80079b4:	f1aa 0204 	sub.w	r2, sl, #4
 80079b8:	2a24      	cmp	r2, #36	; 0x24
 80079ba:	60cb      	str	r3, [r1, #12]
 80079bc:	6099      	str	r1, [r3, #8]
 80079be:	f200 8144 	bhi.w	8007c4a <_realloc_r+0x346>
 80079c2:	2a13      	cmp	r2, #19
 80079c4:	bf98      	it	ls
 80079c6:	4643      	movls	r3, r8
 80079c8:	d90b      	bls.n	80079e2 <_realloc_r+0xde>
 80079ca:	6823      	ldr	r3, [r4, #0]
 80079cc:	f8c9 3008 	str.w	r3, [r9, #8]
 80079d0:	6863      	ldr	r3, [r4, #4]
 80079d2:	2a1b      	cmp	r2, #27
 80079d4:	f8c9 300c 	str.w	r3, [r9, #12]
 80079d8:	f200 8140 	bhi.w	8007c5c <_realloc_r+0x358>
 80079dc:	f109 0310 	add.w	r3, r9, #16
 80079e0:	3408      	adds	r4, #8
 80079e2:	6822      	ldr	r2, [r4, #0]
 80079e4:	601a      	str	r2, [r3, #0]
 80079e6:	6862      	ldr	r2, [r4, #4]
 80079e8:	605a      	str	r2, [r3, #4]
 80079ea:	68a2      	ldr	r2, [r4, #8]
 80079ec:	609a      	str	r2, [r3, #8]
 80079ee:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80079f2:	4644      	mov	r4, r8
 80079f4:	46cb      	mov	fp, r9
 80079f6:	1b72      	subs	r2, r6, r5
 80079f8:	2a0f      	cmp	r2, #15
 80079fa:	d822      	bhi.n	8007a42 <_realloc_r+0x13e>
 80079fc:	f001 0101 	and.w	r1, r1, #1
 8007a00:	eb0b 0306 	add.w	r3, fp, r6
 8007a04:	430e      	orrs	r6, r1
 8007a06:	f8cb 6004 	str.w	r6, [fp, #4]
 8007a0a:	685a      	ldr	r2, [r3, #4]
 8007a0c:	f042 0201 	orr.w	r2, r2, #1
 8007a10:	605a      	str	r2, [r3, #4]
 8007a12:	4638      	mov	r0, r7
 8007a14:	f7fe fc10 	bl	8006238 <__malloc_unlock>
 8007a18:	46a0      	mov	r8, r4
 8007a1a:	4640      	mov	r0, r8
 8007a1c:	b003      	add	sp, #12
 8007a1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a22:	f025 0507 	bic.w	r5, r5, #7
 8007a26:	462a      	mov	r2, r5
 8007a28:	0fee      	lsrs	r6, r5, #31
 8007a2a:	e77f      	b.n	800792c <_realloc_r+0x28>
 8007a2c:	f02e 0e03 	bic.w	lr, lr, #3
 8007a30:	eb0e 060a 	add.w	r6, lr, sl
 8007a34:	42b2      	cmp	r2, r6
 8007a36:	dc9d      	bgt.n	8007974 <_realloc_r+0x70>
 8007a38:	68c3      	ldr	r3, [r0, #12]
 8007a3a:	6882      	ldr	r2, [r0, #8]
 8007a3c:	60d3      	str	r3, [r2, #12]
 8007a3e:	609a      	str	r2, [r3, #8]
 8007a40:	e7d9      	b.n	80079f6 <_realloc_r+0xf2>
 8007a42:	eb0b 0305 	add.w	r3, fp, r5
 8007a46:	f001 0101 	and.w	r1, r1, #1
 8007a4a:	1898      	adds	r0, r3, r2
 8007a4c:	430d      	orrs	r5, r1
 8007a4e:	f042 0201 	orr.w	r2, r2, #1
 8007a52:	f8cb 5004 	str.w	r5, [fp, #4]
 8007a56:	605a      	str	r2, [r3, #4]
 8007a58:	6842      	ldr	r2, [r0, #4]
 8007a5a:	f042 0201 	orr.w	r2, r2, #1
 8007a5e:	6042      	str	r2, [r0, #4]
 8007a60:	f103 0108 	add.w	r1, r3, #8
 8007a64:	4638      	mov	r0, r7
 8007a66:	f7fd ffa3 	bl	80059b0 <_free_r>
 8007a6a:	e7d2      	b.n	8007a12 <_realloc_r+0x10e>
 8007a6c:	4641      	mov	r1, r8
 8007a6e:	4638      	mov	r0, r7
 8007a70:	f7fe f8aa 	bl	8005bc8 <_malloc_r>
 8007a74:	4680      	mov	r8, r0
 8007a76:	b1e8      	cbz	r0, 8007ab4 <_realloc_r+0x1b0>
 8007a78:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8007a7c:	f021 0301 	bic.w	r3, r1, #1
 8007a80:	f1a0 0208 	sub.w	r2, r0, #8
 8007a84:	445b      	add	r3, fp
 8007a86:	429a      	cmp	r2, r3
 8007a88:	f000 80d9 	beq.w	8007c3e <_realloc_r+0x33a>
 8007a8c:	f1aa 0204 	sub.w	r2, sl, #4
 8007a90:	2a24      	cmp	r2, #36	; 0x24
 8007a92:	f200 8096 	bhi.w	8007bc2 <_realloc_r+0x2be>
 8007a96:	2a13      	cmp	r2, #19
 8007a98:	bf9c      	itt	ls
 8007a9a:	4603      	movls	r3, r0
 8007a9c:	4622      	movls	r2, r4
 8007a9e:	d863      	bhi.n	8007b68 <_realloc_r+0x264>
 8007aa0:	6811      	ldr	r1, [r2, #0]
 8007aa2:	6019      	str	r1, [r3, #0]
 8007aa4:	6851      	ldr	r1, [r2, #4]
 8007aa6:	6059      	str	r1, [r3, #4]
 8007aa8:	6892      	ldr	r2, [r2, #8]
 8007aaa:	609a      	str	r2, [r3, #8]
 8007aac:	4638      	mov	r0, r7
 8007aae:	4621      	mov	r1, r4
 8007ab0:	f7fd ff7e 	bl	80059b0 <_free_r>
 8007ab4:	4638      	mov	r0, r7
 8007ab6:	f7fe fbbf 	bl	8006238 <__malloc_unlock>
 8007aba:	e7ae      	b.n	8007a1a <_realloc_r+0x116>
 8007abc:	eb01 0c0a 	add.w	ip, r1, sl
 8007ac0:	4562      	cmp	r2, ip
 8007ac2:	dcd3      	bgt.n	8007a6c <_realloc_r+0x168>
 8007ac4:	464e      	mov	r6, r9
 8007ac6:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8007aca:	f856 1f08 	ldr.w	r1, [r6, #8]!
 8007ace:	f1aa 0204 	sub.w	r2, sl, #4
 8007ad2:	2a24      	cmp	r2, #36	; 0x24
 8007ad4:	60cb      	str	r3, [r1, #12]
 8007ad6:	6099      	str	r1, [r3, #8]
 8007ad8:	d865      	bhi.n	8007ba6 <_realloc_r+0x2a2>
 8007ada:	2a13      	cmp	r2, #19
 8007adc:	bf98      	it	ls
 8007ade:	4633      	movls	r3, r6
 8007ae0:	d90b      	bls.n	8007afa <_realloc_r+0x1f6>
 8007ae2:	6823      	ldr	r3, [r4, #0]
 8007ae4:	f8c9 3008 	str.w	r3, [r9, #8]
 8007ae8:	6863      	ldr	r3, [r4, #4]
 8007aea:	2a1b      	cmp	r2, #27
 8007aec:	f8c9 300c 	str.w	r3, [r9, #12]
 8007af0:	f200 80c0 	bhi.w	8007c74 <_realloc_r+0x370>
 8007af4:	f109 0310 	add.w	r3, r9, #16
 8007af8:	3408      	adds	r4, #8
 8007afa:	6822      	ldr	r2, [r4, #0]
 8007afc:	601a      	str	r2, [r3, #0]
 8007afe:	6862      	ldr	r2, [r4, #4]
 8007b00:	605a      	str	r2, [r3, #4]
 8007b02:	68a2      	ldr	r2, [r4, #8]
 8007b04:	609a      	str	r2, [r3, #8]
 8007b06:	4634      	mov	r4, r6
 8007b08:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007b0c:	4666      	mov	r6, ip
 8007b0e:	46cb      	mov	fp, r9
 8007b10:	e771      	b.n	80079f6 <_realloc_r+0xf2>
 8007b12:	4611      	mov	r1, r2
 8007b14:	b003      	add	sp, #12
 8007b16:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b1a:	f7fe b855 	b.w	8005bc8 <_malloc_r>
 8007b1e:	230c      	movs	r3, #12
 8007b20:	603b      	str	r3, [r7, #0]
 8007b22:	f04f 0800 	mov.w	r8, #0
 8007b26:	e778      	b.n	8007a1a <_realloc_r+0x116>
 8007b28:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8007b2c:	f026 0e03 	bic.w	lr, r6, #3
 8007b30:	eb0e 000a 	add.w	r0, lr, sl
 8007b34:	f105 0610 	add.w	r6, r5, #16
 8007b38:	42b0      	cmp	r0, r6
 8007b3a:	bfb8      	it	lt
 8007b3c:	4660      	movlt	r0, ip
 8007b3e:	f6ff af19 	blt.w	8007974 <_realloc_r+0x70>
 8007b42:	eb0b 0205 	add.w	r2, fp, r5
 8007b46:	1b41      	subs	r1, r0, r5
 8007b48:	f041 0101 	orr.w	r1, r1, #1
 8007b4c:	6051      	str	r1, [r2, #4]
 8007b4e:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8007b52:	609a      	str	r2, [r3, #8]
 8007b54:	f001 0301 	and.w	r3, r1, #1
 8007b58:	431d      	orrs	r5, r3
 8007b5a:	f844 5c04 	str.w	r5, [r4, #-4]
 8007b5e:	4638      	mov	r0, r7
 8007b60:	f7fe fb6a 	bl	8006238 <__malloc_unlock>
 8007b64:	46a0      	mov	r8, r4
 8007b66:	e758      	b.n	8007a1a <_realloc_r+0x116>
 8007b68:	6823      	ldr	r3, [r4, #0]
 8007b6a:	6003      	str	r3, [r0, #0]
 8007b6c:	6863      	ldr	r3, [r4, #4]
 8007b6e:	2a1b      	cmp	r2, #27
 8007b70:	6043      	str	r3, [r0, #4]
 8007b72:	bf9c      	itt	ls
 8007b74:	f104 0208 	addls.w	r2, r4, #8
 8007b78:	f100 0308 	addls.w	r3, r0, #8
 8007b7c:	d990      	bls.n	8007aa0 <_realloc_r+0x19c>
 8007b7e:	68a3      	ldr	r3, [r4, #8]
 8007b80:	6083      	str	r3, [r0, #8]
 8007b82:	68e3      	ldr	r3, [r4, #12]
 8007b84:	2a24      	cmp	r2, #36	; 0x24
 8007b86:	60c3      	str	r3, [r0, #12]
 8007b88:	bf03      	ittte	eq
 8007b8a:	6923      	ldreq	r3, [r4, #16]
 8007b8c:	6103      	streq	r3, [r0, #16]
 8007b8e:	6962      	ldreq	r2, [r4, #20]
 8007b90:	f100 0310 	addne.w	r3, r0, #16
 8007b94:	bf09      	itett	eq
 8007b96:	6142      	streq	r2, [r0, #20]
 8007b98:	f104 0210 	addne.w	r2, r4, #16
 8007b9c:	f100 0318 	addeq.w	r3, r0, #24
 8007ba0:	f104 0218 	addeq.w	r2, r4, #24
 8007ba4:	e77c      	b.n	8007aa0 <_realloc_r+0x19c>
 8007ba6:	4621      	mov	r1, r4
 8007ba8:	4630      	mov	r0, r6
 8007baa:	f8cd c004 	str.w	ip, [sp, #4]
 8007bae:	f7ff fe07 	bl	80077c0 <memmove>
 8007bb2:	f8dd c004 	ldr.w	ip, [sp, #4]
 8007bb6:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007bba:	4634      	mov	r4, r6
 8007bbc:	46cb      	mov	fp, r9
 8007bbe:	4666      	mov	r6, ip
 8007bc0:	e719      	b.n	80079f6 <_realloc_r+0xf2>
 8007bc2:	4621      	mov	r1, r4
 8007bc4:	f7ff fdfc 	bl	80077c0 <memmove>
 8007bc8:	e770      	b.n	8007aac <_realloc_r+0x1a8>
 8007bca:	bf00      	nop
 8007bcc:	2000056c 	.word	0x2000056c
 8007bd0:	f105 0110 	add.w	r1, r5, #16
 8007bd4:	428e      	cmp	r6, r1
 8007bd6:	f6ff af73 	blt.w	8007ac0 <_realloc_r+0x1bc>
 8007bda:	46c8      	mov	r8, r9
 8007bdc:	f8d9 100c 	ldr.w	r1, [r9, #12]
 8007be0:	f858 0f08 	ldr.w	r0, [r8, #8]!
 8007be4:	f1aa 0204 	sub.w	r2, sl, #4
 8007be8:	2a24      	cmp	r2, #36	; 0x24
 8007bea:	60c1      	str	r1, [r0, #12]
 8007bec:	6088      	str	r0, [r1, #8]
 8007bee:	d861      	bhi.n	8007cb4 <_realloc_r+0x3b0>
 8007bf0:	2a13      	cmp	r2, #19
 8007bf2:	bf98      	it	ls
 8007bf4:	4642      	movls	r2, r8
 8007bf6:	d90a      	bls.n	8007c0e <_realloc_r+0x30a>
 8007bf8:	6821      	ldr	r1, [r4, #0]
 8007bfa:	f8c9 1008 	str.w	r1, [r9, #8]
 8007bfe:	6861      	ldr	r1, [r4, #4]
 8007c00:	2a1b      	cmp	r2, #27
 8007c02:	f8c9 100c 	str.w	r1, [r9, #12]
 8007c06:	d85c      	bhi.n	8007cc2 <_realloc_r+0x3be>
 8007c08:	f109 0210 	add.w	r2, r9, #16
 8007c0c:	3408      	adds	r4, #8
 8007c0e:	6821      	ldr	r1, [r4, #0]
 8007c10:	6011      	str	r1, [r2, #0]
 8007c12:	6861      	ldr	r1, [r4, #4]
 8007c14:	6051      	str	r1, [r2, #4]
 8007c16:	68a1      	ldr	r1, [r4, #8]
 8007c18:	6091      	str	r1, [r2, #8]
 8007c1a:	eb09 0205 	add.w	r2, r9, r5
 8007c1e:	1b71      	subs	r1, r6, r5
 8007c20:	f041 0101 	orr.w	r1, r1, #1
 8007c24:	6051      	str	r1, [r2, #4]
 8007c26:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007c2a:	609a      	str	r2, [r3, #8]
 8007c2c:	f001 0301 	and.w	r3, r1, #1
 8007c30:	431d      	orrs	r5, r3
 8007c32:	f8c9 5004 	str.w	r5, [r9, #4]
 8007c36:	4638      	mov	r0, r7
 8007c38:	f7fe fafe 	bl	8006238 <__malloc_unlock>
 8007c3c:	e6ed      	b.n	8007a1a <_realloc_r+0x116>
 8007c3e:	f850 6c04 	ldr.w	r6, [r0, #-4]
 8007c42:	f026 0603 	bic.w	r6, r6, #3
 8007c46:	4456      	add	r6, sl
 8007c48:	e6d5      	b.n	80079f6 <_realloc_r+0xf2>
 8007c4a:	4621      	mov	r1, r4
 8007c4c:	4640      	mov	r0, r8
 8007c4e:	f7ff fdb7 	bl	80077c0 <memmove>
 8007c52:	4644      	mov	r4, r8
 8007c54:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007c58:	46cb      	mov	fp, r9
 8007c5a:	e6cc      	b.n	80079f6 <_realloc_r+0xf2>
 8007c5c:	68a3      	ldr	r3, [r4, #8]
 8007c5e:	f8c9 3010 	str.w	r3, [r9, #16]
 8007c62:	68e3      	ldr	r3, [r4, #12]
 8007c64:	2a24      	cmp	r2, #36	; 0x24
 8007c66:	f8c9 3014 	str.w	r3, [r9, #20]
 8007c6a:	d00f      	beq.n	8007c8c <_realloc_r+0x388>
 8007c6c:	f109 0318 	add.w	r3, r9, #24
 8007c70:	3410      	adds	r4, #16
 8007c72:	e6b6      	b.n	80079e2 <_realloc_r+0xde>
 8007c74:	68a3      	ldr	r3, [r4, #8]
 8007c76:	f8c9 3010 	str.w	r3, [r9, #16]
 8007c7a:	68e3      	ldr	r3, [r4, #12]
 8007c7c:	2a24      	cmp	r2, #36	; 0x24
 8007c7e:	f8c9 3014 	str.w	r3, [r9, #20]
 8007c82:	d00d      	beq.n	8007ca0 <_realloc_r+0x39c>
 8007c84:	f109 0318 	add.w	r3, r9, #24
 8007c88:	3410      	adds	r4, #16
 8007c8a:	e736      	b.n	8007afa <_realloc_r+0x1f6>
 8007c8c:	6923      	ldr	r3, [r4, #16]
 8007c8e:	f8c9 3018 	str.w	r3, [r9, #24]
 8007c92:	6962      	ldr	r2, [r4, #20]
 8007c94:	f109 0320 	add.w	r3, r9, #32
 8007c98:	f8c9 201c 	str.w	r2, [r9, #28]
 8007c9c:	3418      	adds	r4, #24
 8007c9e:	e6a0      	b.n	80079e2 <_realloc_r+0xde>
 8007ca0:	6923      	ldr	r3, [r4, #16]
 8007ca2:	f8c9 3018 	str.w	r3, [r9, #24]
 8007ca6:	6962      	ldr	r2, [r4, #20]
 8007ca8:	f109 0320 	add.w	r3, r9, #32
 8007cac:	f8c9 201c 	str.w	r2, [r9, #28]
 8007cb0:	3418      	adds	r4, #24
 8007cb2:	e722      	b.n	8007afa <_realloc_r+0x1f6>
 8007cb4:	4640      	mov	r0, r8
 8007cb6:	4621      	mov	r1, r4
 8007cb8:	9301      	str	r3, [sp, #4]
 8007cba:	f7ff fd81 	bl	80077c0 <memmove>
 8007cbe:	9b01      	ldr	r3, [sp, #4]
 8007cc0:	e7ab      	b.n	8007c1a <_realloc_r+0x316>
 8007cc2:	68a1      	ldr	r1, [r4, #8]
 8007cc4:	f8c9 1010 	str.w	r1, [r9, #16]
 8007cc8:	68e1      	ldr	r1, [r4, #12]
 8007cca:	2a24      	cmp	r2, #36	; 0x24
 8007ccc:	f8c9 1014 	str.w	r1, [r9, #20]
 8007cd0:	d003      	beq.n	8007cda <_realloc_r+0x3d6>
 8007cd2:	f109 0218 	add.w	r2, r9, #24
 8007cd6:	3410      	adds	r4, #16
 8007cd8:	e799      	b.n	8007c0e <_realloc_r+0x30a>
 8007cda:	6922      	ldr	r2, [r4, #16]
 8007cdc:	f8c9 2018 	str.w	r2, [r9, #24]
 8007ce0:	6961      	ldr	r1, [r4, #20]
 8007ce2:	f109 0220 	add.w	r2, r9, #32
 8007ce6:	f8c9 101c 	str.w	r1, [r9, #28]
 8007cea:	3418      	adds	r4, #24
 8007cec:	e78f      	b.n	8007c0e <_realloc_r+0x30a>
 8007cee:	bf00      	nop

08007cf0 <__aeabi_drsub>:
 8007cf0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8007cf4:	e002      	b.n	8007cfc <__adddf3>
 8007cf6:	bf00      	nop

08007cf8 <__aeabi_dsub>:
 8007cf8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08007cfc <__adddf3>:
 8007cfc:	b530      	push	{r4, r5, lr}
 8007cfe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8007d02:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8007d06:	ea94 0f05 	teq	r4, r5
 8007d0a:	bf08      	it	eq
 8007d0c:	ea90 0f02 	teqeq	r0, r2
 8007d10:	bf1f      	itttt	ne
 8007d12:	ea54 0c00 	orrsne.w	ip, r4, r0
 8007d16:	ea55 0c02 	orrsne.w	ip, r5, r2
 8007d1a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8007d1e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8007d22:	f000 80e2 	beq.w	8007eea <__adddf3+0x1ee>
 8007d26:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8007d2a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8007d2e:	bfb8      	it	lt
 8007d30:	426d      	neglt	r5, r5
 8007d32:	dd0c      	ble.n	8007d4e <__adddf3+0x52>
 8007d34:	442c      	add	r4, r5
 8007d36:	ea80 0202 	eor.w	r2, r0, r2
 8007d3a:	ea81 0303 	eor.w	r3, r1, r3
 8007d3e:	ea82 0000 	eor.w	r0, r2, r0
 8007d42:	ea83 0101 	eor.w	r1, r3, r1
 8007d46:	ea80 0202 	eor.w	r2, r0, r2
 8007d4a:	ea81 0303 	eor.w	r3, r1, r3
 8007d4e:	2d36      	cmp	r5, #54	; 0x36
 8007d50:	bf88      	it	hi
 8007d52:	bd30      	pophi	{r4, r5, pc}
 8007d54:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8007d58:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8007d5c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8007d60:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8007d64:	d002      	beq.n	8007d6c <__adddf3+0x70>
 8007d66:	4240      	negs	r0, r0
 8007d68:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8007d6c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8007d70:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8007d74:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8007d78:	d002      	beq.n	8007d80 <__adddf3+0x84>
 8007d7a:	4252      	negs	r2, r2
 8007d7c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8007d80:	ea94 0f05 	teq	r4, r5
 8007d84:	f000 80a7 	beq.w	8007ed6 <__adddf3+0x1da>
 8007d88:	f1a4 0401 	sub.w	r4, r4, #1
 8007d8c:	f1d5 0e20 	rsbs	lr, r5, #32
 8007d90:	db0d      	blt.n	8007dae <__adddf3+0xb2>
 8007d92:	fa02 fc0e 	lsl.w	ip, r2, lr
 8007d96:	fa22 f205 	lsr.w	r2, r2, r5
 8007d9a:	1880      	adds	r0, r0, r2
 8007d9c:	f141 0100 	adc.w	r1, r1, #0
 8007da0:	fa03 f20e 	lsl.w	r2, r3, lr
 8007da4:	1880      	adds	r0, r0, r2
 8007da6:	fa43 f305 	asr.w	r3, r3, r5
 8007daa:	4159      	adcs	r1, r3
 8007dac:	e00e      	b.n	8007dcc <__adddf3+0xd0>
 8007dae:	f1a5 0520 	sub.w	r5, r5, #32
 8007db2:	f10e 0e20 	add.w	lr, lr, #32
 8007db6:	2a01      	cmp	r2, #1
 8007db8:	fa03 fc0e 	lsl.w	ip, r3, lr
 8007dbc:	bf28      	it	cs
 8007dbe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8007dc2:	fa43 f305 	asr.w	r3, r3, r5
 8007dc6:	18c0      	adds	r0, r0, r3
 8007dc8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8007dcc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8007dd0:	d507      	bpl.n	8007de2 <__adddf3+0xe6>
 8007dd2:	f04f 0e00 	mov.w	lr, #0
 8007dd6:	f1dc 0c00 	rsbs	ip, ip, #0
 8007dda:	eb7e 0000 	sbcs.w	r0, lr, r0
 8007dde:	eb6e 0101 	sbc.w	r1, lr, r1
 8007de2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8007de6:	d31b      	bcc.n	8007e20 <__adddf3+0x124>
 8007de8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8007dec:	d30c      	bcc.n	8007e08 <__adddf3+0x10c>
 8007dee:	0849      	lsrs	r1, r1, #1
 8007df0:	ea5f 0030 	movs.w	r0, r0, rrx
 8007df4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8007df8:	f104 0401 	add.w	r4, r4, #1
 8007dfc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8007e00:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8007e04:	f080 809a 	bcs.w	8007f3c <__adddf3+0x240>
 8007e08:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8007e0c:	bf08      	it	eq
 8007e0e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8007e12:	f150 0000 	adcs.w	r0, r0, #0
 8007e16:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8007e1a:	ea41 0105 	orr.w	r1, r1, r5
 8007e1e:	bd30      	pop	{r4, r5, pc}
 8007e20:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8007e24:	4140      	adcs	r0, r0
 8007e26:	eb41 0101 	adc.w	r1, r1, r1
 8007e2a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8007e2e:	f1a4 0401 	sub.w	r4, r4, #1
 8007e32:	d1e9      	bne.n	8007e08 <__adddf3+0x10c>
 8007e34:	f091 0f00 	teq	r1, #0
 8007e38:	bf04      	itt	eq
 8007e3a:	4601      	moveq	r1, r0
 8007e3c:	2000      	moveq	r0, #0
 8007e3e:	fab1 f381 	clz	r3, r1
 8007e42:	bf08      	it	eq
 8007e44:	3320      	addeq	r3, #32
 8007e46:	f1a3 030b 	sub.w	r3, r3, #11
 8007e4a:	f1b3 0220 	subs.w	r2, r3, #32
 8007e4e:	da0c      	bge.n	8007e6a <__adddf3+0x16e>
 8007e50:	320c      	adds	r2, #12
 8007e52:	dd08      	ble.n	8007e66 <__adddf3+0x16a>
 8007e54:	f102 0c14 	add.w	ip, r2, #20
 8007e58:	f1c2 020c 	rsb	r2, r2, #12
 8007e5c:	fa01 f00c 	lsl.w	r0, r1, ip
 8007e60:	fa21 f102 	lsr.w	r1, r1, r2
 8007e64:	e00c      	b.n	8007e80 <__adddf3+0x184>
 8007e66:	f102 0214 	add.w	r2, r2, #20
 8007e6a:	bfd8      	it	le
 8007e6c:	f1c2 0c20 	rsble	ip, r2, #32
 8007e70:	fa01 f102 	lsl.w	r1, r1, r2
 8007e74:	fa20 fc0c 	lsr.w	ip, r0, ip
 8007e78:	bfdc      	itt	le
 8007e7a:	ea41 010c 	orrle.w	r1, r1, ip
 8007e7e:	4090      	lslle	r0, r2
 8007e80:	1ae4      	subs	r4, r4, r3
 8007e82:	bfa2      	ittt	ge
 8007e84:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8007e88:	4329      	orrge	r1, r5
 8007e8a:	bd30      	popge	{r4, r5, pc}
 8007e8c:	ea6f 0404 	mvn.w	r4, r4
 8007e90:	3c1f      	subs	r4, #31
 8007e92:	da1c      	bge.n	8007ece <__adddf3+0x1d2>
 8007e94:	340c      	adds	r4, #12
 8007e96:	dc0e      	bgt.n	8007eb6 <__adddf3+0x1ba>
 8007e98:	f104 0414 	add.w	r4, r4, #20
 8007e9c:	f1c4 0220 	rsb	r2, r4, #32
 8007ea0:	fa20 f004 	lsr.w	r0, r0, r4
 8007ea4:	fa01 f302 	lsl.w	r3, r1, r2
 8007ea8:	ea40 0003 	orr.w	r0, r0, r3
 8007eac:	fa21 f304 	lsr.w	r3, r1, r4
 8007eb0:	ea45 0103 	orr.w	r1, r5, r3
 8007eb4:	bd30      	pop	{r4, r5, pc}
 8007eb6:	f1c4 040c 	rsb	r4, r4, #12
 8007eba:	f1c4 0220 	rsb	r2, r4, #32
 8007ebe:	fa20 f002 	lsr.w	r0, r0, r2
 8007ec2:	fa01 f304 	lsl.w	r3, r1, r4
 8007ec6:	ea40 0003 	orr.w	r0, r0, r3
 8007eca:	4629      	mov	r1, r5
 8007ecc:	bd30      	pop	{r4, r5, pc}
 8007ece:	fa21 f004 	lsr.w	r0, r1, r4
 8007ed2:	4629      	mov	r1, r5
 8007ed4:	bd30      	pop	{r4, r5, pc}
 8007ed6:	f094 0f00 	teq	r4, #0
 8007eda:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8007ede:	bf06      	itte	eq
 8007ee0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8007ee4:	3401      	addeq	r4, #1
 8007ee6:	3d01      	subne	r5, #1
 8007ee8:	e74e      	b.n	8007d88 <__adddf3+0x8c>
 8007eea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8007eee:	bf18      	it	ne
 8007ef0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8007ef4:	d029      	beq.n	8007f4a <__adddf3+0x24e>
 8007ef6:	ea94 0f05 	teq	r4, r5
 8007efa:	bf08      	it	eq
 8007efc:	ea90 0f02 	teqeq	r0, r2
 8007f00:	d005      	beq.n	8007f0e <__adddf3+0x212>
 8007f02:	ea54 0c00 	orrs.w	ip, r4, r0
 8007f06:	bf04      	itt	eq
 8007f08:	4619      	moveq	r1, r3
 8007f0a:	4610      	moveq	r0, r2
 8007f0c:	bd30      	pop	{r4, r5, pc}
 8007f0e:	ea91 0f03 	teq	r1, r3
 8007f12:	bf1e      	ittt	ne
 8007f14:	2100      	movne	r1, #0
 8007f16:	2000      	movne	r0, #0
 8007f18:	bd30      	popne	{r4, r5, pc}
 8007f1a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8007f1e:	d105      	bne.n	8007f2c <__adddf3+0x230>
 8007f20:	0040      	lsls	r0, r0, #1
 8007f22:	4149      	adcs	r1, r1
 8007f24:	bf28      	it	cs
 8007f26:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8007f2a:	bd30      	pop	{r4, r5, pc}
 8007f2c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8007f30:	bf3c      	itt	cc
 8007f32:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8007f36:	bd30      	popcc	{r4, r5, pc}
 8007f38:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8007f3c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8007f40:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007f44:	f04f 0000 	mov.w	r0, #0
 8007f48:	bd30      	pop	{r4, r5, pc}
 8007f4a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8007f4e:	bf1a      	itte	ne
 8007f50:	4619      	movne	r1, r3
 8007f52:	4610      	movne	r0, r2
 8007f54:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8007f58:	bf1c      	itt	ne
 8007f5a:	460b      	movne	r3, r1
 8007f5c:	4602      	movne	r2, r0
 8007f5e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8007f62:	bf06      	itte	eq
 8007f64:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8007f68:	ea91 0f03 	teqeq	r1, r3
 8007f6c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8007f70:	bd30      	pop	{r4, r5, pc}
 8007f72:	bf00      	nop

08007f74 <__aeabi_ui2d>:
 8007f74:	f090 0f00 	teq	r0, #0
 8007f78:	bf04      	itt	eq
 8007f7a:	2100      	moveq	r1, #0
 8007f7c:	4770      	bxeq	lr
 8007f7e:	b530      	push	{r4, r5, lr}
 8007f80:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8007f84:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8007f88:	f04f 0500 	mov.w	r5, #0
 8007f8c:	f04f 0100 	mov.w	r1, #0
 8007f90:	e750      	b.n	8007e34 <__adddf3+0x138>
 8007f92:	bf00      	nop

08007f94 <__aeabi_i2d>:
 8007f94:	f090 0f00 	teq	r0, #0
 8007f98:	bf04      	itt	eq
 8007f9a:	2100      	moveq	r1, #0
 8007f9c:	4770      	bxeq	lr
 8007f9e:	b530      	push	{r4, r5, lr}
 8007fa0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8007fa4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8007fa8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8007fac:	bf48      	it	mi
 8007fae:	4240      	negmi	r0, r0
 8007fb0:	f04f 0100 	mov.w	r1, #0
 8007fb4:	e73e      	b.n	8007e34 <__adddf3+0x138>
 8007fb6:	bf00      	nop

08007fb8 <__aeabi_f2d>:
 8007fb8:	0042      	lsls	r2, r0, #1
 8007fba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8007fbe:	ea4f 0131 	mov.w	r1, r1, rrx
 8007fc2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8007fc6:	bf1f      	itttt	ne
 8007fc8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8007fcc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8007fd0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8007fd4:	4770      	bxne	lr
 8007fd6:	f092 0f00 	teq	r2, #0
 8007fda:	bf14      	ite	ne
 8007fdc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8007fe0:	4770      	bxeq	lr
 8007fe2:	b530      	push	{r4, r5, lr}
 8007fe4:	f44f 7460 	mov.w	r4, #896	; 0x380
 8007fe8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8007fec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007ff0:	e720      	b.n	8007e34 <__adddf3+0x138>
 8007ff2:	bf00      	nop

08007ff4 <__aeabi_ul2d>:
 8007ff4:	ea50 0201 	orrs.w	r2, r0, r1
 8007ff8:	bf08      	it	eq
 8007ffa:	4770      	bxeq	lr
 8007ffc:	b530      	push	{r4, r5, lr}
 8007ffe:	f04f 0500 	mov.w	r5, #0
 8008002:	e00a      	b.n	800801a <__aeabi_l2d+0x16>

08008004 <__aeabi_l2d>:
 8008004:	ea50 0201 	orrs.w	r2, r0, r1
 8008008:	bf08      	it	eq
 800800a:	4770      	bxeq	lr
 800800c:	b530      	push	{r4, r5, lr}
 800800e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8008012:	d502      	bpl.n	800801a <__aeabi_l2d+0x16>
 8008014:	4240      	negs	r0, r0
 8008016:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800801a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800801e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008022:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8008026:	f43f aedc 	beq.w	8007de2 <__adddf3+0xe6>
 800802a:	f04f 0203 	mov.w	r2, #3
 800802e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008032:	bf18      	it	ne
 8008034:	3203      	addne	r2, #3
 8008036:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800803a:	bf18      	it	ne
 800803c:	3203      	addne	r2, #3
 800803e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8008042:	f1c2 0320 	rsb	r3, r2, #32
 8008046:	fa00 fc03 	lsl.w	ip, r0, r3
 800804a:	fa20 f002 	lsr.w	r0, r0, r2
 800804e:	fa01 fe03 	lsl.w	lr, r1, r3
 8008052:	ea40 000e 	orr.w	r0, r0, lr
 8008056:	fa21 f102 	lsr.w	r1, r1, r2
 800805a:	4414      	add	r4, r2
 800805c:	e6c1      	b.n	8007de2 <__adddf3+0xe6>
 800805e:	bf00      	nop

08008060 <__aeabi_dmul>:
 8008060:	b570      	push	{r4, r5, r6, lr}
 8008062:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8008066:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800806a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800806e:	bf1d      	ittte	ne
 8008070:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8008074:	ea94 0f0c 	teqne	r4, ip
 8008078:	ea95 0f0c 	teqne	r5, ip
 800807c:	f000 f8de 	bleq	800823c <__aeabi_dmul+0x1dc>
 8008080:	442c      	add	r4, r5
 8008082:	ea81 0603 	eor.w	r6, r1, r3
 8008086:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800808a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800808e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8008092:	bf18      	it	ne
 8008094:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8008098:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800809c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80080a0:	d038      	beq.n	8008114 <__aeabi_dmul+0xb4>
 80080a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80080a6:	f04f 0500 	mov.w	r5, #0
 80080aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80080ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80080b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80080b6:	f04f 0600 	mov.w	r6, #0
 80080ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80080be:	f09c 0f00 	teq	ip, #0
 80080c2:	bf18      	it	ne
 80080c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80080c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80080cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80080d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80080d4:	d204      	bcs.n	80080e0 <__aeabi_dmul+0x80>
 80080d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80080da:	416d      	adcs	r5, r5
 80080dc:	eb46 0606 	adc.w	r6, r6, r6
 80080e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80080e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80080e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80080ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80080f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80080f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80080f8:	bf88      	it	hi
 80080fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80080fe:	d81e      	bhi.n	800813e <__aeabi_dmul+0xde>
 8008100:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8008104:	bf08      	it	eq
 8008106:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800810a:	f150 0000 	adcs.w	r0, r0, #0
 800810e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8008112:	bd70      	pop	{r4, r5, r6, pc}
 8008114:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8008118:	ea46 0101 	orr.w	r1, r6, r1
 800811c:	ea40 0002 	orr.w	r0, r0, r2
 8008120:	ea81 0103 	eor.w	r1, r1, r3
 8008124:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8008128:	bfc2      	ittt	gt
 800812a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800812e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008132:	bd70      	popgt	{r4, r5, r6, pc}
 8008134:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008138:	f04f 0e00 	mov.w	lr, #0
 800813c:	3c01      	subs	r4, #1
 800813e:	f300 80ab 	bgt.w	8008298 <__aeabi_dmul+0x238>
 8008142:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8008146:	bfde      	ittt	le
 8008148:	2000      	movle	r0, #0
 800814a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800814e:	bd70      	pople	{r4, r5, r6, pc}
 8008150:	f1c4 0400 	rsb	r4, r4, #0
 8008154:	3c20      	subs	r4, #32
 8008156:	da35      	bge.n	80081c4 <__aeabi_dmul+0x164>
 8008158:	340c      	adds	r4, #12
 800815a:	dc1b      	bgt.n	8008194 <__aeabi_dmul+0x134>
 800815c:	f104 0414 	add.w	r4, r4, #20
 8008160:	f1c4 0520 	rsb	r5, r4, #32
 8008164:	fa00 f305 	lsl.w	r3, r0, r5
 8008168:	fa20 f004 	lsr.w	r0, r0, r4
 800816c:	fa01 f205 	lsl.w	r2, r1, r5
 8008170:	ea40 0002 	orr.w	r0, r0, r2
 8008174:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8008178:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800817c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008180:	fa21 f604 	lsr.w	r6, r1, r4
 8008184:	eb42 0106 	adc.w	r1, r2, r6
 8008188:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800818c:	bf08      	it	eq
 800818e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008192:	bd70      	pop	{r4, r5, r6, pc}
 8008194:	f1c4 040c 	rsb	r4, r4, #12
 8008198:	f1c4 0520 	rsb	r5, r4, #32
 800819c:	fa00 f304 	lsl.w	r3, r0, r4
 80081a0:	fa20 f005 	lsr.w	r0, r0, r5
 80081a4:	fa01 f204 	lsl.w	r2, r1, r4
 80081a8:	ea40 0002 	orr.w	r0, r0, r2
 80081ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80081b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80081b4:	f141 0100 	adc.w	r1, r1, #0
 80081b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80081bc:	bf08      	it	eq
 80081be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80081c2:	bd70      	pop	{r4, r5, r6, pc}
 80081c4:	f1c4 0520 	rsb	r5, r4, #32
 80081c8:	fa00 f205 	lsl.w	r2, r0, r5
 80081cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80081d0:	fa20 f304 	lsr.w	r3, r0, r4
 80081d4:	fa01 f205 	lsl.w	r2, r1, r5
 80081d8:	ea43 0302 	orr.w	r3, r3, r2
 80081dc:	fa21 f004 	lsr.w	r0, r1, r4
 80081e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80081e4:	fa21 f204 	lsr.w	r2, r1, r4
 80081e8:	ea20 0002 	bic.w	r0, r0, r2
 80081ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80081f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80081f4:	bf08      	it	eq
 80081f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80081fa:	bd70      	pop	{r4, r5, r6, pc}
 80081fc:	f094 0f00 	teq	r4, #0
 8008200:	d10f      	bne.n	8008222 <__aeabi_dmul+0x1c2>
 8008202:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8008206:	0040      	lsls	r0, r0, #1
 8008208:	eb41 0101 	adc.w	r1, r1, r1
 800820c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008210:	bf08      	it	eq
 8008212:	3c01      	subeq	r4, #1
 8008214:	d0f7      	beq.n	8008206 <__aeabi_dmul+0x1a6>
 8008216:	ea41 0106 	orr.w	r1, r1, r6
 800821a:	f095 0f00 	teq	r5, #0
 800821e:	bf18      	it	ne
 8008220:	4770      	bxne	lr
 8008222:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8008226:	0052      	lsls	r2, r2, #1
 8008228:	eb43 0303 	adc.w	r3, r3, r3
 800822c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8008230:	bf08      	it	eq
 8008232:	3d01      	subeq	r5, #1
 8008234:	d0f7      	beq.n	8008226 <__aeabi_dmul+0x1c6>
 8008236:	ea43 0306 	orr.w	r3, r3, r6
 800823a:	4770      	bx	lr
 800823c:	ea94 0f0c 	teq	r4, ip
 8008240:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8008244:	bf18      	it	ne
 8008246:	ea95 0f0c 	teqne	r5, ip
 800824a:	d00c      	beq.n	8008266 <__aeabi_dmul+0x206>
 800824c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008250:	bf18      	it	ne
 8008252:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008256:	d1d1      	bne.n	80081fc <__aeabi_dmul+0x19c>
 8008258:	ea81 0103 	eor.w	r1, r1, r3
 800825c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008260:	f04f 0000 	mov.w	r0, #0
 8008264:	bd70      	pop	{r4, r5, r6, pc}
 8008266:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800826a:	bf06      	itte	eq
 800826c:	4610      	moveq	r0, r2
 800826e:	4619      	moveq	r1, r3
 8008270:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008274:	d019      	beq.n	80082aa <__aeabi_dmul+0x24a>
 8008276:	ea94 0f0c 	teq	r4, ip
 800827a:	d102      	bne.n	8008282 <__aeabi_dmul+0x222>
 800827c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8008280:	d113      	bne.n	80082aa <__aeabi_dmul+0x24a>
 8008282:	ea95 0f0c 	teq	r5, ip
 8008286:	d105      	bne.n	8008294 <__aeabi_dmul+0x234>
 8008288:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800828c:	bf1c      	itt	ne
 800828e:	4610      	movne	r0, r2
 8008290:	4619      	movne	r1, r3
 8008292:	d10a      	bne.n	80082aa <__aeabi_dmul+0x24a>
 8008294:	ea81 0103 	eor.w	r1, r1, r3
 8008298:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800829c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80082a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80082a4:	f04f 0000 	mov.w	r0, #0
 80082a8:	bd70      	pop	{r4, r5, r6, pc}
 80082aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80082ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80082b2:	bd70      	pop	{r4, r5, r6, pc}

080082b4 <__aeabi_ddiv>:
 80082b4:	b570      	push	{r4, r5, r6, lr}
 80082b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80082ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80082be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80082c2:	bf1d      	ittte	ne
 80082c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80082c8:	ea94 0f0c 	teqne	r4, ip
 80082cc:	ea95 0f0c 	teqne	r5, ip
 80082d0:	f000 f8a7 	bleq	8008422 <__aeabi_ddiv+0x16e>
 80082d4:	eba4 0405 	sub.w	r4, r4, r5
 80082d8:	ea81 0e03 	eor.w	lr, r1, r3
 80082dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80082e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80082e4:	f000 8088 	beq.w	80083f8 <__aeabi_ddiv+0x144>
 80082e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80082ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80082f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80082f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80082f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80082fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8008300:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8008304:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8008308:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800830c:	429d      	cmp	r5, r3
 800830e:	bf08      	it	eq
 8008310:	4296      	cmpeq	r6, r2
 8008312:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8008316:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800831a:	d202      	bcs.n	8008322 <__aeabi_ddiv+0x6e>
 800831c:	085b      	lsrs	r3, r3, #1
 800831e:	ea4f 0232 	mov.w	r2, r2, rrx
 8008322:	1ab6      	subs	r6, r6, r2
 8008324:	eb65 0503 	sbc.w	r5, r5, r3
 8008328:	085b      	lsrs	r3, r3, #1
 800832a:	ea4f 0232 	mov.w	r2, r2, rrx
 800832e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8008332:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8008336:	ebb6 0e02 	subs.w	lr, r6, r2
 800833a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800833e:	bf22      	ittt	cs
 8008340:	1ab6      	subcs	r6, r6, r2
 8008342:	4675      	movcs	r5, lr
 8008344:	ea40 000c 	orrcs.w	r0, r0, ip
 8008348:	085b      	lsrs	r3, r3, #1
 800834a:	ea4f 0232 	mov.w	r2, r2, rrx
 800834e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008352:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008356:	bf22      	ittt	cs
 8008358:	1ab6      	subcs	r6, r6, r2
 800835a:	4675      	movcs	r5, lr
 800835c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008360:	085b      	lsrs	r3, r3, #1
 8008362:	ea4f 0232 	mov.w	r2, r2, rrx
 8008366:	ebb6 0e02 	subs.w	lr, r6, r2
 800836a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800836e:	bf22      	ittt	cs
 8008370:	1ab6      	subcs	r6, r6, r2
 8008372:	4675      	movcs	r5, lr
 8008374:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008378:	085b      	lsrs	r3, r3, #1
 800837a:	ea4f 0232 	mov.w	r2, r2, rrx
 800837e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008382:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008386:	bf22      	ittt	cs
 8008388:	1ab6      	subcs	r6, r6, r2
 800838a:	4675      	movcs	r5, lr
 800838c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008390:	ea55 0e06 	orrs.w	lr, r5, r6
 8008394:	d018      	beq.n	80083c8 <__aeabi_ddiv+0x114>
 8008396:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800839a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800839e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80083a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80083a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80083aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80083ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80083b2:	d1c0      	bne.n	8008336 <__aeabi_ddiv+0x82>
 80083b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80083b8:	d10b      	bne.n	80083d2 <__aeabi_ddiv+0x11e>
 80083ba:	ea41 0100 	orr.w	r1, r1, r0
 80083be:	f04f 0000 	mov.w	r0, #0
 80083c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80083c6:	e7b6      	b.n	8008336 <__aeabi_ddiv+0x82>
 80083c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80083cc:	bf04      	itt	eq
 80083ce:	4301      	orreq	r1, r0
 80083d0:	2000      	moveq	r0, #0
 80083d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80083d6:	bf88      	it	hi
 80083d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80083dc:	f63f aeaf 	bhi.w	800813e <__aeabi_dmul+0xde>
 80083e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80083e4:	bf04      	itt	eq
 80083e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80083ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80083ee:	f150 0000 	adcs.w	r0, r0, #0
 80083f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80083f6:	bd70      	pop	{r4, r5, r6, pc}
 80083f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80083fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8008400:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8008404:	bfc2      	ittt	gt
 8008406:	ebd4 050c 	rsbsgt	r5, r4, ip
 800840a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800840e:	bd70      	popgt	{r4, r5, r6, pc}
 8008410:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008414:	f04f 0e00 	mov.w	lr, #0
 8008418:	3c01      	subs	r4, #1
 800841a:	e690      	b.n	800813e <__aeabi_dmul+0xde>
 800841c:	ea45 0e06 	orr.w	lr, r5, r6
 8008420:	e68d      	b.n	800813e <__aeabi_dmul+0xde>
 8008422:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8008426:	ea94 0f0c 	teq	r4, ip
 800842a:	bf08      	it	eq
 800842c:	ea95 0f0c 	teqeq	r5, ip
 8008430:	f43f af3b 	beq.w	80082aa <__aeabi_dmul+0x24a>
 8008434:	ea94 0f0c 	teq	r4, ip
 8008438:	d10a      	bne.n	8008450 <__aeabi_ddiv+0x19c>
 800843a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800843e:	f47f af34 	bne.w	80082aa <__aeabi_dmul+0x24a>
 8008442:	ea95 0f0c 	teq	r5, ip
 8008446:	f47f af25 	bne.w	8008294 <__aeabi_dmul+0x234>
 800844a:	4610      	mov	r0, r2
 800844c:	4619      	mov	r1, r3
 800844e:	e72c      	b.n	80082aa <__aeabi_dmul+0x24a>
 8008450:	ea95 0f0c 	teq	r5, ip
 8008454:	d106      	bne.n	8008464 <__aeabi_ddiv+0x1b0>
 8008456:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800845a:	f43f aefd 	beq.w	8008258 <__aeabi_dmul+0x1f8>
 800845e:	4610      	mov	r0, r2
 8008460:	4619      	mov	r1, r3
 8008462:	e722      	b.n	80082aa <__aeabi_dmul+0x24a>
 8008464:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008468:	bf18      	it	ne
 800846a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800846e:	f47f aec5 	bne.w	80081fc <__aeabi_dmul+0x19c>
 8008472:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8008476:	f47f af0d 	bne.w	8008294 <__aeabi_dmul+0x234>
 800847a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800847e:	f47f aeeb 	bne.w	8008258 <__aeabi_dmul+0x1f8>
 8008482:	e712      	b.n	80082aa <__aeabi_dmul+0x24a>

08008484 <__gedf2>:
 8008484:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8008488:	e006      	b.n	8008498 <__cmpdf2+0x4>
 800848a:	bf00      	nop

0800848c <__ledf2>:
 800848c:	f04f 0c01 	mov.w	ip, #1
 8008490:	e002      	b.n	8008498 <__cmpdf2+0x4>
 8008492:	bf00      	nop

08008494 <__cmpdf2>:
 8008494:	f04f 0c01 	mov.w	ip, #1
 8008498:	f84d cd04 	str.w	ip, [sp, #-4]!
 800849c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80084a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80084a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80084a8:	bf18      	it	ne
 80084aa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80084ae:	d01b      	beq.n	80084e8 <__cmpdf2+0x54>
 80084b0:	b001      	add	sp, #4
 80084b2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80084b6:	bf0c      	ite	eq
 80084b8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80084bc:	ea91 0f03 	teqne	r1, r3
 80084c0:	bf02      	ittt	eq
 80084c2:	ea90 0f02 	teqeq	r0, r2
 80084c6:	2000      	moveq	r0, #0
 80084c8:	4770      	bxeq	lr
 80084ca:	f110 0f00 	cmn.w	r0, #0
 80084ce:	ea91 0f03 	teq	r1, r3
 80084d2:	bf58      	it	pl
 80084d4:	4299      	cmppl	r1, r3
 80084d6:	bf08      	it	eq
 80084d8:	4290      	cmpeq	r0, r2
 80084da:	bf2c      	ite	cs
 80084dc:	17d8      	asrcs	r0, r3, #31
 80084de:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80084e2:	f040 0001 	orr.w	r0, r0, #1
 80084e6:	4770      	bx	lr
 80084e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80084ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80084f0:	d102      	bne.n	80084f8 <__cmpdf2+0x64>
 80084f2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80084f6:	d107      	bne.n	8008508 <__cmpdf2+0x74>
 80084f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80084fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008500:	d1d6      	bne.n	80084b0 <__cmpdf2+0x1c>
 8008502:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8008506:	d0d3      	beq.n	80084b0 <__cmpdf2+0x1c>
 8008508:	f85d 0b04 	ldr.w	r0, [sp], #4
 800850c:	4770      	bx	lr
 800850e:	bf00      	nop

08008510 <__aeabi_cdrcmple>:
 8008510:	4684      	mov	ip, r0
 8008512:	4610      	mov	r0, r2
 8008514:	4662      	mov	r2, ip
 8008516:	468c      	mov	ip, r1
 8008518:	4619      	mov	r1, r3
 800851a:	4663      	mov	r3, ip
 800851c:	e000      	b.n	8008520 <__aeabi_cdcmpeq>
 800851e:	bf00      	nop

08008520 <__aeabi_cdcmpeq>:
 8008520:	b501      	push	{r0, lr}
 8008522:	f7ff ffb7 	bl	8008494 <__cmpdf2>
 8008526:	2800      	cmp	r0, #0
 8008528:	bf48      	it	mi
 800852a:	f110 0f00 	cmnmi.w	r0, #0
 800852e:	bd01      	pop	{r0, pc}

08008530 <__aeabi_dcmpeq>:
 8008530:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008534:	f7ff fff4 	bl	8008520 <__aeabi_cdcmpeq>
 8008538:	bf0c      	ite	eq
 800853a:	2001      	moveq	r0, #1
 800853c:	2000      	movne	r0, #0
 800853e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008542:	bf00      	nop

08008544 <__aeabi_dcmplt>:
 8008544:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008548:	f7ff ffea 	bl	8008520 <__aeabi_cdcmpeq>
 800854c:	bf34      	ite	cc
 800854e:	2001      	movcc	r0, #1
 8008550:	2000      	movcs	r0, #0
 8008552:	f85d fb08 	ldr.w	pc, [sp], #8
 8008556:	bf00      	nop

08008558 <__aeabi_dcmple>:
 8008558:	f84d ed08 	str.w	lr, [sp, #-8]!
 800855c:	f7ff ffe0 	bl	8008520 <__aeabi_cdcmpeq>
 8008560:	bf94      	ite	ls
 8008562:	2001      	movls	r0, #1
 8008564:	2000      	movhi	r0, #0
 8008566:	f85d fb08 	ldr.w	pc, [sp], #8
 800856a:	bf00      	nop

0800856c <__aeabi_dcmpge>:
 800856c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008570:	f7ff ffce 	bl	8008510 <__aeabi_cdrcmple>
 8008574:	bf94      	ite	ls
 8008576:	2001      	movls	r0, #1
 8008578:	2000      	movhi	r0, #0
 800857a:	f85d fb08 	ldr.w	pc, [sp], #8
 800857e:	bf00      	nop

08008580 <__aeabi_dcmpgt>:
 8008580:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008584:	f7ff ffc4 	bl	8008510 <__aeabi_cdrcmple>
 8008588:	bf34      	ite	cc
 800858a:	2001      	movcc	r0, #1
 800858c:	2000      	movcs	r0, #0
 800858e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008592:	bf00      	nop

08008594 <__aeabi_d2iz>:
 8008594:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008598:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800859c:	d215      	bcs.n	80085ca <__aeabi_d2iz+0x36>
 800859e:	d511      	bpl.n	80085c4 <__aeabi_d2iz+0x30>
 80085a0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80085a4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80085a8:	d912      	bls.n	80085d0 <__aeabi_d2iz+0x3c>
 80085aa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80085ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80085b2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80085b6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80085ba:	fa23 f002 	lsr.w	r0, r3, r2
 80085be:	bf18      	it	ne
 80085c0:	4240      	negne	r0, r0
 80085c2:	4770      	bx	lr
 80085c4:	f04f 0000 	mov.w	r0, #0
 80085c8:	4770      	bx	lr
 80085ca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80085ce:	d105      	bne.n	80085dc <__aeabi_d2iz+0x48>
 80085d0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80085d4:	bf08      	it	eq
 80085d6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80085da:	4770      	bx	lr
 80085dc:	f04f 0000 	mov.w	r0, #0
 80085e0:	4770      	bx	lr
 80085e2:	bf00      	nop

080085e4 <main>:
/**
 * @brief  Main program.
 * @param  None
 * @retval : None
 */
int main(void) {
 80085e4:	b5b0      	push	{r4, r5, r7, lr}
 80085e6:	b094      	sub	sp, #80	; 0x50
 80085e8:	af02      	add	r7, sp, #8
	int16_t i = 0;
	const int rxbufsize = 64;
	char rxbuf[rxbufsize];
 80085ea:	b092      	sub	sp, #72	; 0x48
	char printbuf[64];
	uint32_t tmp32, rtctime = 0;

	TIM2_timer_start();
 80085ec:	f7f7 fdcc 	bl	8000188 <TIM2_timer_start>

	usart_begin(&Serial3, PD9, PD8, 19200);
 80085f0:	f44f 6281 	mov.w	r2, #1032	; 0x408
 80085f4:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
 80085f8:	482f      	ldr	r0, [pc, #188]	; (80086b8 <main+0xd4>)
 80085fa:	f240 4109 	movw	r1, #1033	; 0x409
 80085fe:	f7f8 fa6a 	bl	8000ad6 <usart_begin>
	usart_print(&Serial3, "\r\nWelcome to USART3.\r\n\r\n");
 8008602:	492e      	ldr	r1, [pc, #184]	; (80086bc <main+0xd8>)
 8008604:	482c      	ldr	r0, [pc, #176]	; (80086b8 <main+0xd4>)
 8008606:	f7f8 fba5 	bl	8000d54 <usart_print>

	i2c_begin(100000);
 800860a:	482d      	ldr	r0, [pc, #180]	; (80086c0 <main+0xdc>)
 800860c:	f7f7 ff16 	bl	800043c <i2c_begin>
	ST7032i_Init();
 8008610:	f7fa fd74 	bl	80030fc <ST7032i_Init>

	ST7032i_Set_Contrast(44);
 8008614:	202c      	movs	r0, #44	; 0x2c
 8008616:	f7fa fc85 	bl	8002f24 <ST7032i_Set_Contrast>
	ST7032i_Print_String((const int8_t *) "Welcome to lcd.");
 800861a:	482a      	ldr	r0, [pc, #168]	; (80086c4 <main+0xe0>)
 800861c:	f7fa fe7a 	bl	8003314 <ST7032i_Print_String>
	usart_print(&Serial3, "2");
 8008620:	4825      	ldr	r0, [pc, #148]	; (80086b8 <main+0xd4>)
 8008622:	4929      	ldr	r1, [pc, #164]	; (80086c8 <main+0xe4>)
 8008624:	f7f8 fb96 	bl	8000d54 <usart_print>
	delay_ms(500);
 8008628:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800862c:	f7f7 fe08 	bl	8000240 <delay_ms>
int main(void) {
	int16_t i = 0;
	const int rxbufsize = 64;
	char rxbuf[rxbufsize];
	char printbuf[64];
	uint32_t tmp32, rtctime = 0;
 8008630:	2500      	movs	r5, #0
//	ST7032i_Command_Write(0x01);

	//Receive character from COM and put it on LCD
	while (1) {

		i2c_requestFrom(0b1101000, 0, (uint8_t *) &tmp32, 3);
 8008632:	2068      	movs	r0, #104	; 0x68
 8008634:	2100      	movs	r1, #0
 8008636:	2303      	movs	r3, #3
 8008638:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800863c:	f7f7 fff2 	bl	8000624 <i2c_requestFrom>
		if (rtctime != (tmp32 & 0xffffff)) {
 8008640:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8008642:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 8008646:	42a5      	cmp	r5, r4
 8008648:	d031      	beq.n	80086ae <main+0xca>
			rtctime = tmp32 & 0xffffff;
			sprintf(printbuf, "%02x:%02x:%02x\r\n", UINT8(rtctime>>16),
 800864a:	0c22      	lsrs	r2, r4, #16
 800864c:	f3c4 2307 	ubfx	r3, r4, #8, #8
 8008650:	b2e5      	uxtb	r5, r4
 8008652:	491e      	ldr	r1, [pc, #120]	; (80086cc <main+0xe8>)
 8008654:	9500      	str	r5, [sp, #0]
 8008656:	1d38      	adds	r0, r7, #4
 8008658:	f7fb f812 	bl	8003680 <sprintf>
					UINT8(rtctime>>8), UINT8(rtctime) );
			usart_print(&Serial3, printbuf);
 800865c:	4816      	ldr	r0, [pc, #88]	; (80086b8 <main+0xd4>)
 800865e:	1d39      	adds	r1, r7, #4
 8008660:	f7f8 fb78 	bl	8000d54 <usart_print>
			ST7032i_Set_DDRAM(((0 * 0x40) % 0x6c) + 0);
 8008664:	2000      	movs	r0, #0
 8008666:	f7fa fc77 	bl	8002f58 <ST7032i_Set_DDRAM>
			ST7032i_Print_String((int8_t *) printbuf);
 800866a:	1d38      	adds	r0, r7, #4
 800866c:	f7fa fe52 	bl	8003314 <ST7032i_Print_String>
			if ((rtctime & 0xff) == 0) {
 8008670:	b9ed      	cbnz	r5, 80086ae <main+0xca>
				i2c_requestFrom(0b1101000, 3, (uint8_t *) &tmp32, 4);
 8008672:	2103      	movs	r1, #3
 8008674:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8008678:	2304      	movs	r3, #4
 800867a:	2068      	movs	r0, #104	; 0x68
 800867c:	f7f7 ffd2 	bl	8000624 <i2c_requestFrom>
				sprintf(printbuf, "20%02x %02x/%02x (%x)", UINT8(tmp32>>24),
 8008680:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008682:	4913      	ldr	r1, [pc, #76]	; (80086d0 <main+0xec>)
 8008684:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8008688:	9200      	str	r2, [sp, #0]
 800868a:	b2da      	uxtb	r2, r3
 800868c:	9201      	str	r2, [sp, #4]
 800868e:	1d38      	adds	r0, r7, #4
 8008690:	0e1a      	lsrs	r2, r3, #24
 8008692:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8008696:	f7fa fff3 	bl	8003680 <sprintf>
						UINT8(tmp32>>16), UINT8(tmp32>>8), UINT8(tmp32) );
				usart_print(&Serial3, printbuf);
 800869a:	4807      	ldr	r0, [pc, #28]	; (80086b8 <main+0xd4>)
 800869c:	1d39      	adds	r1, r7, #4
 800869e:	f7f8 fb59 	bl	8000d54 <usart_print>
				ST7032i_Set_DDRAM(((1 * 0x40) % 0x6c) + 0);
 80086a2:	2040      	movs	r0, #64	; 0x40
 80086a4:	f7fa fc58 	bl	8002f58 <ST7032i_Set_DDRAM>
				ST7032i_Print_String((int8_t *) printbuf);
 80086a8:	1d38      	adds	r0, r7, #4
 80086aa:	f7fa fe33 	bl	8003314 <ST7032i_Print_String>
			}
		}
		delay_ms(50);
 80086ae:	2032      	movs	r0, #50	; 0x32
 80086b0:	f7f7 fdc6 	bl	8000240 <delay_ms>
	}
 80086b4:	4625      	mov	r5, r4
 80086b6:	e7bc      	b.n	8008632 <main+0x4e>
 80086b8:	2000101c 	.word	0x2000101c
 80086bc:	08008888 	.word	0x08008888
 80086c0:	000186a0 	.word	0x000186a0
 80086c4:	080088a1 	.word	0x080088a1
 80086c8:	080088b1 	.word	0x080088b1
 80086cc:	080088b3 	.word	0x080088b3
 80086d0:	080088c4 	.word	0x080088c4

080086d4 <Reset_Handler>:
 80086d4:	2100      	movs	r1, #0
 80086d6:	e003      	b.n	80086e0 <LoopCopyDataInit>

080086d8 <CopyDataInit>:
 80086d8:	4b0a      	ldr	r3, [pc, #40]	; (8008704 <LoopFillZerobss+0x10>)
 80086da:	585b      	ldr	r3, [r3, r1]
 80086dc:	5043      	str	r3, [r0, r1]
 80086de:	3104      	adds	r1, #4

080086e0 <LoopCopyDataInit>:
 80086e0:	4809      	ldr	r0, [pc, #36]	; (8008708 <LoopFillZerobss+0x14>)
 80086e2:	4b0a      	ldr	r3, [pc, #40]	; (800870c <LoopFillZerobss+0x18>)
 80086e4:	1842      	adds	r2, r0, r1
 80086e6:	429a      	cmp	r2, r3
 80086e8:	d3f6      	bcc.n	80086d8 <CopyDataInit>
 80086ea:	4a09      	ldr	r2, [pc, #36]	; (8008710 <LoopFillZerobss+0x1c>)
 80086ec:	e002      	b.n	80086f4 <LoopFillZerobss>

080086ee <FillZerobss>:
 80086ee:	2300      	movs	r3, #0
 80086f0:	f842 3b04 	str.w	r3, [r2], #4

080086f4 <LoopFillZerobss>:
 80086f4:	4b07      	ldr	r3, [pc, #28]	; (8008714 <LoopFillZerobss+0x20>)
 80086f6:	429a      	cmp	r2, r3
 80086f8:	d3f9      	bcc.n	80086ee <FillZerobss>
 80086fa:	f7fa fe7b 	bl	80033f4 <SystemInit>
 80086fe:	f7ff ff71 	bl	80085e4 <main>
 8008702:	4770      	bx	lr
 8008704:	08008960 	.word	0x08008960
 8008708:	20000000 	.word	0x20000000
 800870c:	2000097c 	.word	0x2000097c
 8008710:	2000097c 	.word	0x2000097c
 8008714:	200016b4 	.word	0x200016b4

08008718 <ADC_IRQHandler>:
 8008718:	e7fe      	b.n	8008718 <ADC_IRQHandler>
	...

0800871c <blanks.3927>:
 800871c:	2020 2020 2020 2020 2020 2020 2020 2020                     

0800872c <zeroes.3928>:
 800872c:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000

0800873c <_global_impure_ptr>:
 800873c:	00c8 2000                                   ... 

08008740 <p05.2449>:
 8008740:	0005 0000 0019 0000 007d 0000 0000 0000     ........}.......

08008750 <__mprec_tens>:
 8008750:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
 8008760:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
 8008770:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
 8008780:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
 8008790:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
 80087a0:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
 80087b0:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
 80087c0:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
 80087d0:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
 80087e0:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
 80087f0:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
 8008800:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
 8008810:	9db4 79d9 7843 44ea                         ...yCx.D

08008818 <__mprec_tinytens>:
 8008818:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
 8008828:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
 8008838:	6f43 64ac 0628 0ac8                         Co.d(...

08008840 <__mprec_bigtens>:
 8008840:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
 8008850:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
 8008860:	bf3c 7f73 4fdd 7515                         <.s..O.u

08008868 <blanks.3871>:
 8008868:	2020 2020 2020 2020 2020 2020 2020 2020                     

08008878 <zeroes.3872>:
 8008878:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
 8008888:	0a0d 6557 636c 6d6f 2065 6f74 5520 4153     ..Welcome to USA
 8008898:	5452 2e33 0a0d 0a0d 5700 6c65 6f63 656d     RT3......Welcome
 80088a8:	7420 206f 636c 2e64 3200 2500 3230 3a78      to lcd..2.%02x:
 80088b8:	3025 7832 253a 3230 0d78 000a 3032 3025     %02x:%02x...20%0
 80088c8:	7832 2520 3230 2f78 3025 7832 2820 7825     2x %02x/%02x (%x
 80088d8:	0029 6548 7061 6120 646e 7320 6174 6b63     ).Heap and stack
 80088e8:	6320 6c6f 696c 6973 6e6f 000a 7865 7469      collision..exit
 80088f8:	0000 0000 4e49 0046 6e69 0066 414e 004e     ....INF.inf.NAN.
 8008908:	616e 006e 3130 3332 3534 3736 3938 4241     nan.0123456789AB
 8008918:	4443 4645 0000 0000 3130 3332 3534 3736     CDEF....01234567
 8008928:	3938 6261 6463 6665 0000 0000 6e28 6c75     89abcdef....(nul
 8008938:	296c 0000 0030 0000 6e49 6966 696e 7974     l)..0...Infinity
 8008948:	0000 0000 614e 004e 0043 0000 4f50 4953     ....NaN.C...POSI
 8008958:	0058 0000 002e 0000                         X.......
