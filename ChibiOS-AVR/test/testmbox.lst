   1               		.file	"testmbox.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               		.section	.rodata.str1.1,"aMS",@progbits,1
  12               	.LC0:
  13 0000 4142 4344 		.string	"ABCDE"
  13      4500 
  14               		.text
  16               	mbox1_execute:
  17               	.LFB8:
  18               		.file 1 "../../test/testmbox.c"
   1:../../test/testmbox.c **** /*
   2:../../test/testmbox.c ****     ChibiOS/RT - Copyright (C) 2006,2007,2008,2009,2010,
   3:../../test/testmbox.c ****                  2011,2012 Giovanni Di Sirio.
   4:../../test/testmbox.c **** 
   5:../../test/testmbox.c ****     This file is part of ChibiOS/RT.
   6:../../test/testmbox.c **** 
   7:../../test/testmbox.c ****     ChibiOS/RT is free software; you can redistribute it and/or modify
   8:../../test/testmbox.c ****     it under the terms of the GNU General Public License as published by
   9:../../test/testmbox.c ****     the Free Software Foundation; either version 3 of the License, or
  10:../../test/testmbox.c ****     (at your option) any later version.
  11:../../test/testmbox.c **** 
  12:../../test/testmbox.c ****     ChibiOS/RT is distributed in the hope that it will be useful,
  13:../../test/testmbox.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:../../test/testmbox.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:../../test/testmbox.c ****     GNU General Public License for more details.
  16:../../test/testmbox.c **** 
  17:../../test/testmbox.c ****     You should have received a copy of the GNU General Public License
  18:../../test/testmbox.c ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  19:../../test/testmbox.c **** */
  20:../../test/testmbox.c **** 
  21:../../test/testmbox.c **** #include "ch.h"
  22:../../test/testmbox.c **** #include "test.h"
  23:../../test/testmbox.c **** 
  24:../../test/testmbox.c **** /**
  25:../../test/testmbox.c ****  * @page test_mbox Mailboxes test
  26:../../test/testmbox.c ****  *
  27:../../test/testmbox.c ****  * File: @ref testmbox.c
  28:../../test/testmbox.c ****  *
  29:../../test/testmbox.c ****  * <h2>Description</h2>
  30:../../test/testmbox.c ****  * This module implements the test sequence for the @ref mailboxes subsystem.
  31:../../test/testmbox.c ****  *
  32:../../test/testmbox.c ****  * <h2>Objective</h2>
  33:../../test/testmbox.c ****  * Objective of the test module is to cover 100% of the @ref mailboxes
  34:../../test/testmbox.c ****  * subsystem code.<br>
  35:../../test/testmbox.c ****  * Note that the @ref mailboxes subsystem depends on the @ref semaphores
  36:../../test/testmbox.c ****  * subsystem that has to met its testing objectives as well.
  37:../../test/testmbox.c ****  *
  38:../../test/testmbox.c ****  * <h2>Preconditions</h2>
  39:../../test/testmbox.c ****  * The module requires the following kernel options:
  40:../../test/testmbox.c ****  * - @p CH_USE_MAILBOXES
  41:../../test/testmbox.c ****  * .
  42:../../test/testmbox.c ****  * In case some of the required options are not enabled then some or all tests
  43:../../test/testmbox.c ****  * may be skipped.
  44:../../test/testmbox.c ****  *
  45:../../test/testmbox.c ****  * <h2>Test Cases</h2>
  46:../../test/testmbox.c ****  * - @subpage test_mbox_001
  47:../../test/testmbox.c ****  * .
  48:../../test/testmbox.c ****  * @file testmbox.c
  49:../../test/testmbox.c ****  * @brief Mailboxes test source file
  50:../../test/testmbox.c ****  * @file testmbox.h
  51:../../test/testmbox.c ****  * @brief Mailboxes header file
  52:../../test/testmbox.c ****  */
  53:../../test/testmbox.c **** 
  54:../../test/testmbox.c **** #if CH_USE_MAILBOXES || defined(__DOXYGEN__)
  55:../../test/testmbox.c **** 
  56:../../test/testmbox.c **** #define ALLOWED_DELAY MS2ST(5)
  57:../../test/testmbox.c **** #define MB_SIZE 5
  58:../../test/testmbox.c **** 
  59:../../test/testmbox.c **** /*
  60:../../test/testmbox.c ****  * Note, the static initializers are not really required because the
  61:../../test/testmbox.c ****  * variables are explicitly initialized in each test case. It is done in order
  62:../../test/testmbox.c ****  * to test the macros.
  63:../../test/testmbox.c ****  */
  64:../../test/testmbox.c **** static MAILBOX_DECL(mb1, test.wa.T0, MB_SIZE);
  65:../../test/testmbox.c **** 
  66:../../test/testmbox.c **** /**
  67:../../test/testmbox.c ****  * @page test_mbox_001 Queuing and timeouts
  68:../../test/testmbox.c ****  *
  69:../../test/testmbox.c ****  * <h2>Description</h2>
  70:../../test/testmbox.c ****  * Messages are posted/fetched from a mailbox in carefully designed sequences
  71:../../test/testmbox.c ****  * in order to stimulate all the possible code paths inside the mailbox.<br>
  72:../../test/testmbox.c ****  * The test expects to find a consistent mailbox status after each operation.
  73:../../test/testmbox.c ****  */
  74:../../test/testmbox.c **** 
  75:../../test/testmbox.c **** static void mbox1_setup(void) {
  76:../../test/testmbox.c **** 
  77:../../test/testmbox.c ****   chMBInit(&mb1, (msg_t *)test.wa.T0, MB_SIZE);
  78:../../test/testmbox.c **** }
  79:../../test/testmbox.c **** 
  80:../../test/testmbox.c **** static void mbox1_execute(void) {
  19               		.loc 1 80 0
  20               		.cfi_startproc
  21 0000 0F93      		push r16
  22               	.LCFI0:
  23               		.cfi_def_cfa_offset 3
  24               		.cfi_offset 16, -2
  25 0002 1F93      		push r17
  26               	.LCFI1:
  27               		.cfi_def_cfa_offset 4
  28               		.cfi_offset 17, -3
  29 0004 CF93      		push r28
  30               	.LCFI2:
  31               		.cfi_def_cfa_offset 5
  32               		.cfi_offset 28, -4
  33 0006 DF93      		push r29
  34               	.LCFI3:
  35               		.cfi_def_cfa_offset 6
  36               		.cfi_offset 29, -5
  37 0008 00D0      		rcall .
  38               	.LCFI4:
  39               		.cfi_def_cfa_offset 8
  40 000a CDB7      		in r28,__SP_L__
  41 000c DEB7      		in r29,__SP_H__
  42               	.LCFI5:
  43               		.cfi_def_cfa_register 28
  44               	/* prologue: function */
  45               	/* frame size = 2 */
  46               	/* stack size = 6 */
  47               	.L__stack_usage = 6
  81:../../test/testmbox.c ****   msg_t msg1, msg2;
  82:../../test/testmbox.c ****   unsigned i;
  83:../../test/testmbox.c **** 
  84:../../test/testmbox.c ****   /*
  85:../../test/testmbox.c ****    * Testing initial space.
  86:../../test/testmbox.c ****    */
  87:../../test/testmbox.c ****   test_assert(1, chMBGetFreeCountI(&mb1) == MB_SIZE, "wrong size");
  48               		.loc 1 87 0
  49 000e 61E0      		ldi r22,lo8(1)
  50 0010 8091 0000 		lds r24,mb1+17
  51 0014 8530      		cpi r24,lo8(5)
  52 0016 01F0      		breq .L2
  53 0018 60E0      		ldi r22,0
  54               	.L2:
  55 001a 81E0      		ldi r24,lo8(1)
  56 001c 90E0      		ldi r25,0
  57 001e 0E94 0000 		call _test_assert
  58               	.LVL0:
  59 0022 8111      		cpse r24,__zero_reg__
  60 0024 00C0      		rjmp .L1
  61 0026 02E4      		ldi r16,lo8(66)
  62 0028 10E0      		ldi r17,0
  63               	.L5:
  88:../../test/testmbox.c **** 
  89:../../test/testmbox.c ****   /*
  90:../../test/testmbox.c ****    * Testing enqueuing and backward circularity.
  91:../../test/testmbox.c ****    */
  92:../../test/testmbox.c ****   for (i = 0; i < MB_SIZE - 1; i++) {
  93:../../test/testmbox.c ****     msg1 = chMBPost(&mb1, 'B' + i, TIME_INFINITE);
  64               		.loc 1 93 0
  65 002a 4FEF      		ldi r20,lo8(-1)
  66 002c 5FEF      		ldi r21,lo8(-1)
  67 002e B801      		movw r22,r16
  68 0030 80E0      		ldi r24,lo8(mb1)
  69 0032 90E0      		ldi r25,hi8(mb1)
  70 0034 0E94 0000 		call chMBPost
  71               	.LVL1:
  94:../../test/testmbox.c ****     test_assert(2, msg1 == RDY_OK, "wrong wake-up message");
  72               		.loc 1 94 0
  73 0038 61E0      		ldi r22,lo8(1)
  74 003a 892B      		or r24,r25
  75 003c 01F0      		breq .L4
  76 003e 60E0      		ldi r22,0
  77               	.L4:
  78 0040 82E0      		ldi r24,lo8(2)
  79 0042 90E0      		ldi r25,0
  80               	.LVL2:
  81 0044 0E94 0000 		call _test_assert
  82               	.LVL3:
  83 0048 8111      		cpse r24,__zero_reg__
  84 004a 00C0      		rjmp .L1
  85               	.LVL4:
  86 004c 0F5F      		subi r16,-1
  87 004e 1F4F      		sbci r17,-1
  92:../../test/testmbox.c ****   for (i = 0; i < MB_SIZE - 1; i++) {
  88               		.loc 1 92 0
  89 0050 0634      		cpi r16,70
  90 0052 1105      		cpc r17,__zero_reg__
  91 0054 01F4      		brne .L5
  95:../../test/testmbox.c ****   }
  96:../../test/testmbox.c ****   msg1 = chMBPostAhead(&mb1, 'A', TIME_INFINITE);
  92               		.loc 1 96 0
  93 0056 4FEF      		ldi r20,lo8(-1)
  94 0058 5FEF      		ldi r21,lo8(-1)
  95 005a 61E4      		ldi r22,lo8(65)
  96 005c 70E0      		ldi r23,0
  97 005e 80E0      		ldi r24,lo8(mb1)
  98 0060 90E0      		ldi r25,hi8(mb1)
  99 0062 0E94 0000 		call chMBPostAhead
 100               	.LVL5:
  97:../../test/testmbox.c ****   test_assert(3, msg1 == RDY_OK, "wrong wake-up message");
 101               		.loc 1 97 0
 102 0066 61E0      		ldi r22,lo8(1)
 103 0068 892B      		or r24,r25
 104 006a 01F0      		breq .L6
 105 006c 60E0      		ldi r22,0
 106               	.L6:
 107 006e 83E0      		ldi r24,lo8(3)
 108 0070 90E0      		ldi r25,0
 109               	.LVL6:
 110 0072 0E94 0000 		call _test_assert
 111               	.LVL7:
 112 0076 8823      		tst r24
 113 0078 01F0      		breq .L174
 114               	.LVL8:
 115               	.L1:
 116               	/* epilogue start */
  98:../../test/testmbox.c **** 
  99:../../test/testmbox.c ****   /*
 100:../../test/testmbox.c ****    * Testing post timeout.
 101:../../test/testmbox.c ****    */
 102:../../test/testmbox.c ****   msg1 = chMBPost(&mb1, 'X', 1);
 103:../../test/testmbox.c ****   test_assert(4, msg1 == RDY_TIMEOUT, "wrong wake-up message");
 104:../../test/testmbox.c ****   chSysLock();
 105:../../test/testmbox.c ****   msg1 = chMBPostI(&mb1, 'X');
 106:../../test/testmbox.c ****   chSysUnlock();
 107:../../test/testmbox.c ****   test_assert(5, msg1 == RDY_TIMEOUT, "wrong wake-up message");
 108:../../test/testmbox.c ****   msg1 = chMBPostAhead(&mb1, 'X', 1);
 109:../../test/testmbox.c ****   test_assert(6, msg1 == RDY_TIMEOUT, "wrong wake-up message");
 110:../../test/testmbox.c ****   chSysLock();
 111:../../test/testmbox.c ****   msg1 = chMBPostAheadI(&mb1, 'X');
 112:../../test/testmbox.c ****   chSysUnlock();
 113:../../test/testmbox.c ****   test_assert(7, msg1 == RDY_TIMEOUT, "wrong wake-up message");
 114:../../test/testmbox.c **** 
 115:../../test/testmbox.c ****   /*
 116:../../test/testmbox.c ****    * Testing final conditions.
 117:../../test/testmbox.c ****    */
 118:../../test/testmbox.c ****   test_assert_lock(8, chMBGetFreeCountI(&mb1) == 0, "still empty");
 119:../../test/testmbox.c ****   test_assert_lock(9, chMBGetUsedCountI(&mb1) == MB_SIZE, "not full");
 120:../../test/testmbox.c ****   test_assert_lock(10, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 121:../../test/testmbox.c **** 
 122:../../test/testmbox.c ****   /*
 123:../../test/testmbox.c ****    * Testing dequeuing.
 124:../../test/testmbox.c ****    */
 125:../../test/testmbox.c ****   for (i = 0; i < MB_SIZE; i++) {
 126:../../test/testmbox.c ****     msg1 = chMBFetch(&mb1, &msg2, TIME_INFINITE);
 127:../../test/testmbox.c ****     test_assert(11, msg1 == RDY_OK, "wrong wake-up message");
 128:../../test/testmbox.c ****     test_emit_token(msg2);
 129:../../test/testmbox.c ****   }
 130:../../test/testmbox.c ****   test_assert_sequence(12, "ABCDE");
 131:../../test/testmbox.c **** 
 132:../../test/testmbox.c ****   /*
 133:../../test/testmbox.c ****    * Testing buffer circularity.
 134:../../test/testmbox.c ****    */
 135:../../test/testmbox.c ****   msg1 = chMBPost(&mb1, 'B' + i, TIME_INFINITE);
 136:../../test/testmbox.c ****   test_assert(13, msg1 == RDY_OK, "wrong wake-up message");
 137:../../test/testmbox.c ****   msg1 = chMBFetch(&mb1, &msg2, TIME_INFINITE);
 138:../../test/testmbox.c ****   test_assert(14, msg1 == RDY_OK, "wrong wake-up message");
 139:../../test/testmbox.c ****   test_assert(15, mb1.mb_buffer == mb1.mb_wrptr, "write pointer not aligned to base");
 140:../../test/testmbox.c ****   test_assert(16, mb1.mb_buffer == mb1.mb_rdptr, "read pointer not aligned to base");
 141:../../test/testmbox.c **** 
 142:../../test/testmbox.c ****   /*
 143:../../test/testmbox.c ****    * Testing fetch timeout.
 144:../../test/testmbox.c ****    */
 145:../../test/testmbox.c ****   msg1 = chMBFetch(&mb1, &msg2, 1);
 146:../../test/testmbox.c ****   test_assert(17, msg1 == RDY_TIMEOUT, "wrong wake-up message");
 147:../../test/testmbox.c ****   chSysLock();
 148:../../test/testmbox.c ****   msg1 = chMBFetchI(&mb1, &msg2);
 149:../../test/testmbox.c ****   chSysUnlock();
 150:../../test/testmbox.c ****   test_assert(18, msg1 == RDY_TIMEOUT, "wrong wake-up message");
 151:../../test/testmbox.c **** 
 152:../../test/testmbox.c ****   /*
 153:../../test/testmbox.c ****    * Testing final conditions.
 154:../../test/testmbox.c ****    */
 155:../../test/testmbox.c ****   test_assert_lock(19, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 156:../../test/testmbox.c ****   test_assert_lock(20, chMBGetUsedCountI(&mb1) == 0, "still full");
 157:../../test/testmbox.c ****   test_assert_lock(21, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 158:../../test/testmbox.c **** 
 159:../../test/testmbox.c ****   /*
 160:../../test/testmbox.c ****    * Testing I-Class.
 161:../../test/testmbox.c ****    */
 162:../../test/testmbox.c ****   chSysLock()
 163:../../test/testmbox.c ****   msg1 = chMBPostI(&mb1, 'A');
 164:../../test/testmbox.c ****   test_assert(22, msg1 == RDY_OK, "wrong wake-up message");
 165:../../test/testmbox.c ****   msg1 = chMBPostI(&mb1, 'B');
 166:../../test/testmbox.c ****   test_assert(23, msg1 == RDY_OK, "wrong wake-up message");
 167:../../test/testmbox.c ****   msg1 = chMBPostI(&mb1, 'C');
 168:../../test/testmbox.c ****   test_assert(24, msg1 == RDY_OK, "wrong wake-up message");
 169:../../test/testmbox.c ****   msg1 = chMBPostI(&mb1, 'D');
 170:../../test/testmbox.c ****   test_assert(25, msg1 == RDY_OK, "wrong wake-up message");
 171:../../test/testmbox.c ****   msg1 = chMBPostI(&mb1, 'E');
 172:../../test/testmbox.c ****   chSysUnlock();
 173:../../test/testmbox.c ****   test_assert(26, msg1 == RDY_OK, "wrong wake-up message");
 174:../../test/testmbox.c ****   test_assert(27, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 175:../../test/testmbox.c ****   for (i = 0; i < MB_SIZE; i++) {
 176:../../test/testmbox.c ****     chSysLock();
 177:../../test/testmbox.c ****     msg1 = chMBFetchI(&mb1, &msg2);
 178:../../test/testmbox.c ****     chSysUnlock();
 179:../../test/testmbox.c ****     test_assert(28, msg1 == RDY_OK, "wrong wake-up message");
 180:../../test/testmbox.c ****     test_emit_token(msg2);
 181:../../test/testmbox.c ****   }
 182:../../test/testmbox.c ****   test_assert_sequence(29, "ABCDE");
 183:../../test/testmbox.c ****   test_assert_lock(30, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 184:../../test/testmbox.c ****   test_assert_lock(31, chMBGetUsedCountI(&mb1) == 0, "still full");
 185:../../test/testmbox.c ****   test_assert(32, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 186:../../test/testmbox.c **** 
 187:../../test/testmbox.c ****   chSysLock();
 188:../../test/testmbox.c ****   msg1 = chMBPostAheadI(&mb1, 'E');
 189:../../test/testmbox.c ****   test_assert(33, msg1 == RDY_OK, "wrong wake-up message");
 190:../../test/testmbox.c ****   msg1 = chMBPostAheadI(&mb1, 'D');
 191:../../test/testmbox.c ****   test_assert(34, msg1 == RDY_OK, "wrong wake-up message");
 192:../../test/testmbox.c ****   msg1 = chMBPostAheadI(&mb1, 'C');
 193:../../test/testmbox.c ****   test_assert(35, msg1 == RDY_OK, "wrong wake-up message");
 194:../../test/testmbox.c ****   msg1 = chMBPostAheadI(&mb1, 'B');
 195:../../test/testmbox.c ****   test_assert(36, msg1 == RDY_OK, "wrong wake-up message");
 196:../../test/testmbox.c ****   msg1 = chMBPostAheadI(&mb1, 'A');
 197:../../test/testmbox.c ****   chSysUnlock();
 198:../../test/testmbox.c ****   test_assert(37, msg1 == RDY_OK, "wrong wake-up message");
 199:../../test/testmbox.c ****   test_assert(38, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 200:../../test/testmbox.c ****   for (i = 0; i < MB_SIZE; i++) {
 201:../../test/testmbox.c ****     chSysLock();
 202:../../test/testmbox.c ****     msg1 = chMBFetchI(&mb1, &msg2);
 203:../../test/testmbox.c ****     chSysUnlock();
 204:../../test/testmbox.c ****     test_assert(39, msg1 == RDY_OK, "wrong wake-up message");
 205:../../test/testmbox.c ****     test_emit_token(msg2);
 206:../../test/testmbox.c ****   }
 207:../../test/testmbox.c ****   test_assert_sequence(40, "ABCDE");
 208:../../test/testmbox.c ****   test_assert_lock(41, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 209:../../test/testmbox.c ****   test_assert_lock(42, chMBGetUsedCountI(&mb1) == 0, "still full");
 210:../../test/testmbox.c ****   test_assert(43, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 211:../../test/testmbox.c **** 
 212:../../test/testmbox.c ****   /*
 213:../../test/testmbox.c ****    * Testing reset.
 214:../../test/testmbox.c ****    */
 215:../../test/testmbox.c ****   chMBReset(&mb1);
 216:../../test/testmbox.c **** 
 217:../../test/testmbox.c ****   /*
 218:../../test/testmbox.c ****    * Re-testing final conditions.
 219:../../test/testmbox.c ****    */
 220:../../test/testmbox.c ****   test_assert_lock(44, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 221:../../test/testmbox.c ****   test_assert_lock(45, chMBGetUsedCountI(&mb1) == 0, "still full");
 222:../../test/testmbox.c ****   test_assert_lock(46, mb1.mb_buffer == mb1.mb_wrptr, "write pointer not aligned to base");
 223:../../test/testmbox.c ****   test_assert_lock(47, mb1.mb_buffer == mb1.mb_rdptr, "read pointer not aligned to base");
 224:../../test/testmbox.c **** }
 117               		.loc 1 224 0
 118 007a 0F90      		pop __tmp_reg__
 119 007c 0F90      		pop __tmp_reg__
 120 007e DF91      		pop r29
 121 0080 CF91      		pop r28
 122 0082 1F91      		pop r17
 123 0084 0F91      		pop r16
 124 0086 0895      		ret
 125               	.L174:
 102:../../test/testmbox.c ****   msg1 = chMBPost(&mb1, 'X', 1);
 126               		.loc 1 102 0
 127 0088 41E0      		ldi r20,lo8(1)
 128 008a 50E0      		ldi r21,0
 129 008c 68E5      		ldi r22,lo8(88)
 130 008e 70E0      		ldi r23,0
 131 0090 80E0      		ldi r24,lo8(mb1)
 132 0092 90E0      		ldi r25,hi8(mb1)
 133 0094 0E94 0000 		call chMBPost
 134               	.LVL9:
 103:../../test/testmbox.c ****   test_assert(4, msg1 == RDY_TIMEOUT, "wrong wake-up message");
 135               		.loc 1 103 0
 136 0098 61E0      		ldi r22,lo8(1)
 137 009a 0196      		adiw r24,1
 138 009c 01F0      		breq .L7
 139 009e 60E0      		ldi r22,0
 140               	.L7:
 141 00a0 84E0      		ldi r24,lo8(4)
 142 00a2 90E0      		ldi r25,0
 143               	.LVL10:
 144 00a4 0E94 0000 		call _test_assert
 145               	.LVL11:
 146 00a8 8111      		cpse r24,__zero_reg__
 147 00aa 00C0      		rjmp .L1
 104:../../test/testmbox.c ****   chSysLock();
 148               		.loc 1 104 0
 149               	/* #APP */
 150               	 ;  104 "../../test/testmbox.c" 1
 151 00ac F894      		cli
 152               	 ;  0 "" 2
 105:../../test/testmbox.c ****   msg1 = chMBPostI(&mb1, 'X');
 153               		.loc 1 105 0
 154               	/* #NOAPP */
 155 00ae 68E5      		ldi r22,lo8(88)
 156 00b0 70E0      		ldi r23,0
 157 00b2 80E0      		ldi r24,lo8(mb1)
 158 00b4 90E0      		ldi r25,hi8(mb1)
 159 00b6 0E94 0000 		call chMBPostI
 160               	.LVL12:
 106:../../test/testmbox.c ****   chSysUnlock();
 161               		.loc 1 106 0
 162               	/* #APP */
 163               	 ;  106 "../../test/testmbox.c" 1
 164 00ba 7894      		sei
 165               	 ;  0 "" 2
 107:../../test/testmbox.c ****   test_assert(5, msg1 == RDY_TIMEOUT, "wrong wake-up message");
 166               		.loc 1 107 0
 167               	/* #NOAPP */
 168 00bc 61E0      		ldi r22,lo8(1)
 169 00be 0196      		adiw r24,1
 170 00c0 01F0      		breq .L8
 171 00c2 60E0      		ldi r22,0
 172               	.L8:
 173 00c4 85E0      		ldi r24,lo8(5)
 174 00c6 90E0      		ldi r25,0
 175               	.LVL13:
 176 00c8 0E94 0000 		call _test_assert
 177               	.LVL14:
 178 00cc 8111      		cpse r24,__zero_reg__
 179 00ce 00C0      		rjmp .L1
 108:../../test/testmbox.c ****   msg1 = chMBPostAhead(&mb1, 'X', 1);
 180               		.loc 1 108 0
 181 00d0 41E0      		ldi r20,lo8(1)
 182 00d2 50E0      		ldi r21,0
 183 00d4 68E5      		ldi r22,lo8(88)
 184 00d6 70E0      		ldi r23,0
 185 00d8 80E0      		ldi r24,lo8(mb1)
 186 00da 90E0      		ldi r25,hi8(mb1)
 187 00dc 0E94 0000 		call chMBPostAhead
 188               	.LVL15:
 109:../../test/testmbox.c ****   test_assert(6, msg1 == RDY_TIMEOUT, "wrong wake-up message");
 189               		.loc 1 109 0
 190 00e0 61E0      		ldi r22,lo8(1)
 191 00e2 0196      		adiw r24,1
 192 00e4 01F0      		breq .L9
 193 00e6 60E0      		ldi r22,0
 194               	.L9:
 195 00e8 86E0      		ldi r24,lo8(6)
 196 00ea 90E0      		ldi r25,0
 197               	.LVL16:
 198 00ec 0E94 0000 		call _test_assert
 199               	.LVL17:
 200 00f0 8111      		cpse r24,__zero_reg__
 201 00f2 00C0      		rjmp .L1
 110:../../test/testmbox.c ****   chSysLock();
 202               		.loc 1 110 0
 203               	/* #APP */
 204               	 ;  110 "../../test/testmbox.c" 1
 205 00f4 F894      		cli
 206               	 ;  0 "" 2
 111:../../test/testmbox.c ****   msg1 = chMBPostAheadI(&mb1, 'X');
 207               		.loc 1 111 0
 208               	/* #NOAPP */
 209 00f6 68E5      		ldi r22,lo8(88)
 210 00f8 70E0      		ldi r23,0
 211 00fa 80E0      		ldi r24,lo8(mb1)
 212 00fc 90E0      		ldi r25,hi8(mb1)
 213 00fe 0E94 0000 		call chMBPostAheadI
 214               	.LVL18:
 112:../../test/testmbox.c ****   chSysUnlock();
 215               		.loc 1 112 0
 216               	/* #APP */
 217               	 ;  112 "../../test/testmbox.c" 1
 218 0102 7894      		sei
 219               	 ;  0 "" 2
 113:../../test/testmbox.c ****   test_assert(7, msg1 == RDY_TIMEOUT, "wrong wake-up message");
 220               		.loc 1 113 0
 221               	/* #NOAPP */
 222 0104 61E0      		ldi r22,lo8(1)
 223 0106 0196      		adiw r24,1
 224 0108 01F0      		breq .L10
 225 010a 60E0      		ldi r22,0
 226               	.L10:
 227 010c 87E0      		ldi r24,lo8(7)
 228 010e 90E0      		ldi r25,0
 229               	.LVL19:
 230 0110 0E94 0000 		call _test_assert
 231               	.LVL20:
 232 0114 8111      		cpse r24,__zero_reg__
 233 0116 00C0      		rjmp .L1
 118:../../test/testmbox.c ****   test_assert_lock(8, chMBGetFreeCountI(&mb1) == 0, "still empty");
 234               		.loc 1 118 0
 235               	/* #APP */
 236               	 ;  118 "../../test/testmbox.c" 1
 237 0118 F894      		cli
 238               	 ;  0 "" 2
 239               	/* #NOAPP */
 240 011a 61E0      		ldi r22,lo8(1)
 241 011c 8091 0000 		lds r24,mb1+17
 242 0120 8111      		cpse r24,__zero_reg__
 243 0122 60E0      		ldi r22,0
 244               	.L11:
 245 0124 88E0      		ldi r24,lo8(8)
 246 0126 90E0      		ldi r25,0
 247 0128 0E94 0000 		call _test_assert
 248               	.LVL21:
 249               	/* #APP */
 250               	 ;  118 "../../test/testmbox.c" 1
 251 012c 7894      		sei
 252               	 ;  0 "" 2
 253               	/* #NOAPP */
 254 012e 8111      		cpse r24,__zero_reg__
 255 0130 00C0      		rjmp .L1
 119:../../test/testmbox.c ****   test_assert_lock(9, chMBGetUsedCountI(&mb1) == MB_SIZE, "not full");
 256               		.loc 1 119 0 discriminator 2
 257               	/* #APP */
 258               	 ;  119 "../../test/testmbox.c" 1
 259 0132 F894      		cli
 260               	 ;  0 "" 2
 261               	/* #NOAPP */
 262 0134 61E0      		ldi r22,lo8(1)
 263 0136 8091 0000 		lds r24,mb1+12
 264 013a 8530      		cpi r24,lo8(5)
 265 013c 01F0      		breq .L14
 266 013e 60E0      		ldi r22,0
 267               	.L14:
 268 0140 89E0      		ldi r24,lo8(9)
 269 0142 90E0      		ldi r25,0
 270 0144 0E94 0000 		call _test_assert
 271               	.LVL22:
 272               	/* #APP */
 273               	 ;  119 "../../test/testmbox.c" 1
 274 0148 7894      		sei
 275               	 ;  0 "" 2
 276               	/* #NOAPP */
 277 014a 8111      		cpse r24,__zero_reg__
 278 014c 00C0      		rjmp .L1
 120:../../test/testmbox.c ****   test_assert_lock(10, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 279               		.loc 1 120 0 discriminator 2
 280               	/* #APP */
 281               	 ;  120 "../../test/testmbox.c" 1
 282 014e F894      		cli
 283               	 ;  0 "" 2
 284               	/* #NOAPP */
 285 0150 61E0      		ldi r22,lo8(1)
 286 0152 2091 0000 		lds r18,mb1+6
 287 0156 3091 0000 		lds r19,mb1+6+1
 288 015a 8091 0000 		lds r24,mb1+4
 289 015e 9091 0000 		lds r25,mb1+4+1
 290 0162 2817      		cp r18,r24
 291 0164 3907      		cpc r19,r25
 292 0166 01F0      		breq .L16
 293 0168 60E0      		ldi r22,0
 294               	.L16:
 295 016a 8AE0      		ldi r24,lo8(10)
 296 016c 90E0      		ldi r25,0
 297 016e 0E94 0000 		call _test_assert
 298               	.LVL23:
 299               	/* #APP */
 300               	 ;  120 "../../test/testmbox.c" 1
 301 0172 7894      		sei
 302               	 ;  0 "" 2
 303               	/* #NOAPP */
 304 0174 8111      		cpse r24,__zero_reg__
 305 0176 00C0      		rjmp .L1
 306               	.LVL24:
 307 0178 05E0      		ldi r16,lo8(5)
 308 017a 10E0      		ldi r17,0
 309 017c 00C0      		rjmp .L19
 310               	.LVL25:
 311               	.L176:
 128:../../test/testmbox.c ****     test_emit_token(msg2);
 312               		.loc 1 128 0
 313 017e 8981      		ldd r24,Y+1
 314 0180 0E94 0000 		call test_emit_token
 315               	.LVL26:
 316 0184 0150      		subi r16,1
 317 0186 1109      		sbc r17,__zero_reg__
 125:../../test/testmbox.c ****   for (i = 0; i < MB_SIZE; i++) {
 318               		.loc 1 125 0
 319 0188 01F0      		breq .L175
 320               	.L19:
 126:../../test/testmbox.c ****     msg1 = chMBFetch(&mb1, &msg2, TIME_INFINITE);
 321               		.loc 1 126 0
 322 018a 4FEF      		ldi r20,lo8(-1)
 323 018c 5FEF      		ldi r21,lo8(-1)
 324 018e BE01      		movw r22,r28
 325 0190 6F5F      		subi r22,-1
 326 0192 7F4F      		sbci r23,-1
 327 0194 80E0      		ldi r24,lo8(mb1)
 328 0196 90E0      		ldi r25,hi8(mb1)
 329 0198 0E94 0000 		call chMBFetch
 330               	.LVL27:
 127:../../test/testmbox.c ****     test_assert(11, msg1 == RDY_OK, "wrong wake-up message");
 331               		.loc 1 127 0
 332 019c 61E0      		ldi r22,lo8(1)
 333 019e 892B      		or r24,r25
 334 01a0 01F0      		breq .L18
 335 01a2 60E0      		ldi r22,0
 336               	.L18:
 337 01a4 8BE0      		ldi r24,lo8(11)
 338 01a6 90E0      		ldi r25,0
 339               	.LVL28:
 340 01a8 0E94 0000 		call _test_assert
 341               	.LVL29:
 342 01ac 8823      		tst r24
 343 01ae 01F0      		breq .L176
 344 01b0 00C0      		rjmp .L1
 345               	.L175:
 130:../../test/testmbox.c ****   test_assert_sequence(12, "ABCDE");
 346               		.loc 1 130 0
 347 01b2 60E0      		ldi r22,lo8(.LC0)
 348 01b4 70E0      		ldi r23,hi8(.LC0)
 349 01b6 8CE0      		ldi r24,lo8(12)
 350 01b8 90E0      		ldi r25,0
 351 01ba 0E94 0000 		call _test_assert_sequence
 352               	.LVL30:
 353 01be 8111      		cpse r24,__zero_reg__
 354 01c0 00C0      		rjmp .L1
 135:../../test/testmbox.c ****   msg1 = chMBPost(&mb1, 'B' + i, TIME_INFINITE);
 355               		.loc 1 135 0
 356 01c2 4FEF      		ldi r20,lo8(-1)
 357 01c4 5FEF      		ldi r21,lo8(-1)
 358 01c6 67E4      		ldi r22,lo8(71)
 359 01c8 70E0      		ldi r23,0
 360 01ca 80E0      		ldi r24,lo8(mb1)
 361 01cc 90E0      		ldi r25,hi8(mb1)
 362 01ce 0E94 0000 		call chMBPost
 363               	.LVL31:
 136:../../test/testmbox.c ****   test_assert(13, msg1 == RDY_OK, "wrong wake-up message");
 364               		.loc 1 136 0
 365 01d2 61E0      		ldi r22,lo8(1)
 366 01d4 892B      		or r24,r25
 367 01d6 01F0      		breq .L20
 368 01d8 60E0      		ldi r22,0
 369               	.L20:
 370 01da 8DE0      		ldi r24,lo8(13)
 371 01dc 90E0      		ldi r25,0
 372               	.LVL32:
 373 01de 0E94 0000 		call _test_assert
 374               	.LVL33:
 375 01e2 8111      		cpse r24,__zero_reg__
 376 01e4 00C0      		rjmp .L1
 137:../../test/testmbox.c ****   msg1 = chMBFetch(&mb1, &msg2, TIME_INFINITE);
 377               		.loc 1 137 0
 378 01e6 4FEF      		ldi r20,lo8(-1)
 379 01e8 5FEF      		ldi r21,lo8(-1)
 380 01ea BE01      		movw r22,r28
 381 01ec 6F5F      		subi r22,-1
 382 01ee 7F4F      		sbci r23,-1
 383 01f0 80E0      		ldi r24,lo8(mb1)
 384 01f2 90E0      		ldi r25,hi8(mb1)
 385 01f4 0E94 0000 		call chMBFetch
 386               	.LVL34:
 138:../../test/testmbox.c ****   test_assert(14, msg1 == RDY_OK, "wrong wake-up message");
 387               		.loc 1 138 0
 388 01f8 61E0      		ldi r22,lo8(1)
 389 01fa 892B      		or r24,r25
 390 01fc 01F0      		breq .L21
 391 01fe 60E0      		ldi r22,0
 392               	.L21:
 393 0200 8EE0      		ldi r24,lo8(14)
 394 0202 90E0      		ldi r25,0
 395               	.LVL35:
 396 0204 0E94 0000 		call _test_assert
 397               	.LVL36:
 398 0208 8111      		cpse r24,__zero_reg__
 399 020a 00C0      		rjmp .L1
 139:../../test/testmbox.c ****   test_assert(15, mb1.mb_buffer == mb1.mb_wrptr, "write pointer not aligned to base");
 400               		.loc 1 139 0
 401 020c 61E0      		ldi r22,lo8(1)
 402 020e 2091 0000 		lds r18,mb1
 403 0212 3091 0000 		lds r19,mb1+1
 404 0216 8091 0000 		lds r24,mb1+4
 405 021a 9091 0000 		lds r25,mb1+4+1
 406 021e 2817      		cp r18,r24
 407 0220 3907      		cpc r19,r25
 408 0222 01F0      		breq .L22
 409 0224 60E0      		ldi r22,0
 410               	.L22:
 411 0226 8FE0      		ldi r24,lo8(15)
 412 0228 90E0      		ldi r25,0
 413 022a 0E94 0000 		call _test_assert
 414               	.LVL37:
 415 022e 8111      		cpse r24,__zero_reg__
 416 0230 00C0      		rjmp .L1
 140:../../test/testmbox.c ****   test_assert(16, mb1.mb_buffer == mb1.mb_rdptr, "read pointer not aligned to base");
 417               		.loc 1 140 0
 418 0232 61E0      		ldi r22,lo8(1)
 419 0234 2091 0000 		lds r18,mb1
 420 0238 3091 0000 		lds r19,mb1+1
 421 023c 8091 0000 		lds r24,mb1+6
 422 0240 9091 0000 		lds r25,mb1+6+1
 423 0244 2817      		cp r18,r24
 424 0246 3907      		cpc r19,r25
 425 0248 01F0      		breq .L23
 426 024a 60E0      		ldi r22,0
 427               	.L23:
 428 024c 80E1      		ldi r24,lo8(16)
 429 024e 90E0      		ldi r25,0
 430 0250 0E94 0000 		call _test_assert
 431               	.LVL38:
 432 0254 8111      		cpse r24,__zero_reg__
 433 0256 00C0      		rjmp .L1
 145:../../test/testmbox.c ****   msg1 = chMBFetch(&mb1, &msg2, 1);
 434               		.loc 1 145 0
 435 0258 41E0      		ldi r20,lo8(1)
 436 025a 50E0      		ldi r21,0
 437 025c BE01      		movw r22,r28
 438 025e 6F5F      		subi r22,-1
 439 0260 7F4F      		sbci r23,-1
 440 0262 80E0      		ldi r24,lo8(mb1)
 441 0264 90E0      		ldi r25,hi8(mb1)
 442 0266 0E94 0000 		call chMBFetch
 443               	.LVL39:
 146:../../test/testmbox.c ****   test_assert(17, msg1 == RDY_TIMEOUT, "wrong wake-up message");
 444               		.loc 1 146 0
 445 026a 61E0      		ldi r22,lo8(1)
 446 026c 0196      		adiw r24,1
 447 026e 01F0      		breq .L24
 448 0270 60E0      		ldi r22,0
 449               	.L24:
 450 0272 81E1      		ldi r24,lo8(17)
 451 0274 90E0      		ldi r25,0
 452               	.LVL40:
 453 0276 0E94 0000 		call _test_assert
 454               	.LVL41:
 455 027a 8111      		cpse r24,__zero_reg__
 456 027c 00C0      		rjmp .L1
 147:../../test/testmbox.c ****   chSysLock();
 457               		.loc 1 147 0
 458               	/* #APP */
 459               	 ;  147 "../../test/testmbox.c" 1
 460 027e F894      		cli
 461               	 ;  0 "" 2
 148:../../test/testmbox.c ****   msg1 = chMBFetchI(&mb1, &msg2);
 462               		.loc 1 148 0
 463               	/* #NOAPP */
 464 0280 BE01      		movw r22,r28
 465 0282 6F5F      		subi r22,-1
 466 0284 7F4F      		sbci r23,-1
 467 0286 80E0      		ldi r24,lo8(mb1)
 468 0288 90E0      		ldi r25,hi8(mb1)
 469 028a 0E94 0000 		call chMBFetchI
 470               	.LVL42:
 149:../../test/testmbox.c ****   chSysUnlock();
 471               		.loc 1 149 0
 472               	/* #APP */
 473               	 ;  149 "../../test/testmbox.c" 1
 474 028e 7894      		sei
 475               	 ;  0 "" 2
 150:../../test/testmbox.c ****   test_assert(18, msg1 == RDY_TIMEOUT, "wrong wake-up message");
 476               		.loc 1 150 0
 477               	/* #NOAPP */
 478 0290 61E0      		ldi r22,lo8(1)
 479 0292 0196      		adiw r24,1
 480 0294 01F0      		breq .L25
 481 0296 60E0      		ldi r22,0
 482               	.L25:
 483 0298 82E1      		ldi r24,lo8(18)
 484 029a 90E0      		ldi r25,0
 485               	.LVL43:
 486 029c 0E94 0000 		call _test_assert
 487               	.LVL44:
 488 02a0 8111      		cpse r24,__zero_reg__
 489 02a2 00C0      		rjmp .L1
 155:../../test/testmbox.c ****   test_assert_lock(19, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 490               		.loc 1 155 0
 491               	/* #APP */
 492               	 ;  155 "../../test/testmbox.c" 1
 493 02a4 F894      		cli
 494               	 ;  0 "" 2
 495               	/* #NOAPP */
 496 02a6 61E0      		ldi r22,lo8(1)
 497 02a8 8091 0000 		lds r24,mb1+17
 498 02ac 8530      		cpi r24,lo8(5)
 499 02ae 01F0      		breq .L26
 500 02b0 60E0      		ldi r22,0
 501               	.L26:
 502 02b2 83E1      		ldi r24,lo8(19)
 503 02b4 90E0      		ldi r25,0
 504 02b6 0E94 0000 		call _test_assert
 505               	.LVL45:
 506               	/* #APP */
 507               	 ;  155 "../../test/testmbox.c" 1
 508 02ba 7894      		sei
 509               	 ;  0 "" 2
 510               	/* #NOAPP */
 511 02bc 8111      		cpse r24,__zero_reg__
 512 02be 00C0      		rjmp .L1
 156:../../test/testmbox.c ****   test_assert_lock(20, chMBGetUsedCountI(&mb1) == 0, "still full");
 513               		.loc 1 156 0 discriminator 2
 514               	/* #APP */
 515               	 ;  156 "../../test/testmbox.c" 1
 516 02c0 F894      		cli
 517               	 ;  0 "" 2
 518               	/* #NOAPP */
 519 02c2 61E0      		ldi r22,lo8(1)
 520 02c4 8091 0000 		lds r24,mb1+12
 521 02c8 8111      		cpse r24,__zero_reg__
 522 02ca 60E0      		ldi r22,0
 523               	.L28:
 524 02cc 84E1      		ldi r24,lo8(20)
 525 02ce 90E0      		ldi r25,0
 526 02d0 0E94 0000 		call _test_assert
 527               	.LVL46:
 528               	/* #APP */
 529               	 ;  156 "../../test/testmbox.c" 1
 530 02d4 7894      		sei
 531               	 ;  0 "" 2
 532               	/* #NOAPP */
 533 02d6 8111      		cpse r24,__zero_reg__
 534 02d8 00C0      		rjmp .L1
 157:../../test/testmbox.c ****   test_assert_lock(21, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 535               		.loc 1 157 0 discriminator 2
 536               	/* #APP */
 537               	 ;  157 "../../test/testmbox.c" 1
 538 02da F894      		cli
 539               	 ;  0 "" 2
 540               	/* #NOAPP */
 541 02dc 61E0      		ldi r22,lo8(1)
 542 02de 2091 0000 		lds r18,mb1+6
 543 02e2 3091 0000 		lds r19,mb1+6+1
 544 02e6 8091 0000 		lds r24,mb1+4
 545 02ea 9091 0000 		lds r25,mb1+4+1
 546 02ee 2817      		cp r18,r24
 547 02f0 3907      		cpc r19,r25
 548 02f2 01F0      		breq .L30
 549 02f4 60E0      		ldi r22,0
 550               	.L30:
 551 02f6 85E1      		ldi r24,lo8(21)
 552 02f8 90E0      		ldi r25,0
 553 02fa 0E94 0000 		call _test_assert
 554               	.LVL47:
 555               	/* #APP */
 556               	 ;  157 "../../test/testmbox.c" 1
 557 02fe 7894      		sei
 558               	 ;  0 "" 2
 559               	/* #NOAPP */
 560 0300 8111      		cpse r24,__zero_reg__
 561 0302 00C0      		rjmp .L1
 162:../../test/testmbox.c ****   chSysLock()
 562               		.loc 1 162 0 discriminator 2
 563               	/* #APP */
 564               	 ;  162 "../../test/testmbox.c" 1
 565 0304 F894      		cli
 566               	 ;  0 "" 2
 163:../../test/testmbox.c ****   msg1 = chMBPostI(&mb1, 'A');
 567               		.loc 1 163 0 discriminator 2
 568               	/* #NOAPP */
 569 0306 61E4      		ldi r22,lo8(65)
 570 0308 70E0      		ldi r23,0
 571 030a 80E0      		ldi r24,lo8(mb1)
 572 030c 90E0      		ldi r25,hi8(mb1)
 573 030e 0E94 0000 		call chMBPostI
 574               	.LVL48:
 164:../../test/testmbox.c ****   test_assert(22, msg1 == RDY_OK, "wrong wake-up message");
 575               		.loc 1 164 0 discriminator 2
 576 0312 61E0      		ldi r22,lo8(1)
 577 0314 892B      		or r24,r25
 578 0316 01F0      		breq .L32
 579 0318 60E0      		ldi r22,0
 580               	.L32:
 581 031a 86E1      		ldi r24,lo8(22)
 582 031c 90E0      		ldi r25,0
 583               	.LVL49:
 584 031e 0E94 0000 		call _test_assert
 585               	.LVL50:
 586 0322 8111      		cpse r24,__zero_reg__
 587 0324 00C0      		rjmp .L1
 165:../../test/testmbox.c ****   msg1 = chMBPostI(&mb1, 'B');
 588               		.loc 1 165 0
 589 0326 62E4      		ldi r22,lo8(66)
 590 0328 70E0      		ldi r23,0
 591 032a 80E0      		ldi r24,lo8(mb1)
 592 032c 90E0      		ldi r25,hi8(mb1)
 593 032e 0E94 0000 		call chMBPostI
 594               	.LVL51:
 166:../../test/testmbox.c ****   test_assert(23, msg1 == RDY_OK, "wrong wake-up message");
 595               		.loc 1 166 0
 596 0332 61E0      		ldi r22,lo8(1)
 597 0334 892B      		or r24,r25
 598 0336 01F0      		breq .L33
 599 0338 60E0      		ldi r22,0
 600               	.L33:
 601 033a 87E1      		ldi r24,lo8(23)
 602 033c 90E0      		ldi r25,0
 603               	.LVL52:
 604 033e 0E94 0000 		call _test_assert
 605               	.LVL53:
 606 0342 8111      		cpse r24,__zero_reg__
 607 0344 00C0      		rjmp .L1
 167:../../test/testmbox.c ****   msg1 = chMBPostI(&mb1, 'C');
 608               		.loc 1 167 0
 609 0346 63E4      		ldi r22,lo8(67)
 610 0348 70E0      		ldi r23,0
 611 034a 80E0      		ldi r24,lo8(mb1)
 612 034c 90E0      		ldi r25,hi8(mb1)
 613 034e 0E94 0000 		call chMBPostI
 614               	.LVL54:
 168:../../test/testmbox.c ****   test_assert(24, msg1 == RDY_OK, "wrong wake-up message");
 615               		.loc 1 168 0
 616 0352 61E0      		ldi r22,lo8(1)
 617 0354 892B      		or r24,r25
 618 0356 01F0      		breq .L34
 619 0358 60E0      		ldi r22,0
 620               	.L34:
 621 035a 88E1      		ldi r24,lo8(24)
 622 035c 90E0      		ldi r25,0
 623               	.LVL55:
 624 035e 0E94 0000 		call _test_assert
 625               	.LVL56:
 626 0362 8111      		cpse r24,__zero_reg__
 627 0364 00C0      		rjmp .L1
 169:../../test/testmbox.c ****   msg1 = chMBPostI(&mb1, 'D');
 628               		.loc 1 169 0
 629 0366 64E4      		ldi r22,lo8(68)
 630 0368 70E0      		ldi r23,0
 631 036a 80E0      		ldi r24,lo8(mb1)
 632 036c 90E0      		ldi r25,hi8(mb1)
 633 036e 0E94 0000 		call chMBPostI
 634               	.LVL57:
 170:../../test/testmbox.c ****   test_assert(25, msg1 == RDY_OK, "wrong wake-up message");
 635               		.loc 1 170 0
 636 0372 61E0      		ldi r22,lo8(1)
 637 0374 892B      		or r24,r25
 638 0376 01F0      		breq .L35
 639 0378 60E0      		ldi r22,0
 640               	.L35:
 641 037a 89E1      		ldi r24,lo8(25)
 642 037c 90E0      		ldi r25,0
 643               	.LVL58:
 644 037e 0E94 0000 		call _test_assert
 645               	.LVL59:
 646 0382 8111      		cpse r24,__zero_reg__
 647 0384 00C0      		rjmp .L1
 171:../../test/testmbox.c ****   msg1 = chMBPostI(&mb1, 'E');
 648               		.loc 1 171 0
 649 0386 65E4      		ldi r22,lo8(69)
 650 0388 70E0      		ldi r23,0
 651 038a 80E0      		ldi r24,lo8(mb1)
 652 038c 90E0      		ldi r25,hi8(mb1)
 653 038e 0E94 0000 		call chMBPostI
 654               	.LVL60:
 172:../../test/testmbox.c ****   chSysUnlock();
 655               		.loc 1 172 0
 656               	/* #APP */
 657               	 ;  172 "../../test/testmbox.c" 1
 658 0392 7894      		sei
 659               	 ;  0 "" 2
 173:../../test/testmbox.c ****   test_assert(26, msg1 == RDY_OK, "wrong wake-up message");
 660               		.loc 1 173 0
 661               	/* #NOAPP */
 662 0394 61E0      		ldi r22,lo8(1)
 663 0396 892B      		or r24,r25
 664 0398 01F0      		breq .L36
 665 039a 60E0      		ldi r22,0
 666               	.L36:
 667 039c 8AE1      		ldi r24,lo8(26)
 668 039e 90E0      		ldi r25,0
 669               	.LVL61:
 670 03a0 0E94 0000 		call _test_assert
 671               	.LVL62:
 672 03a4 8111      		cpse r24,__zero_reg__
 673 03a6 00C0      		rjmp .L1
 174:../../test/testmbox.c ****   test_assert(27, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 674               		.loc 1 174 0
 675 03a8 61E0      		ldi r22,lo8(1)
 676 03aa 2091 0000 		lds r18,mb1+6
 677 03ae 3091 0000 		lds r19,mb1+6+1
 678 03b2 8091 0000 		lds r24,mb1+4
 679 03b6 9091 0000 		lds r25,mb1+4+1
 680 03ba 2817      		cp r18,r24
 681 03bc 3907      		cpc r19,r25
 682 03be 01F0      		breq .L37
 683 03c0 60E0      		ldi r22,0
 684               	.L37:
 685 03c2 8BE1      		ldi r24,lo8(27)
 686 03c4 90E0      		ldi r25,0
 687 03c6 0E94 0000 		call _test_assert
 688               	.LVL63:
 689 03ca 8111      		cpse r24,__zero_reg__
 690 03cc 00C0      		rjmp .L1
 691 03ce 05E0      		ldi r16,lo8(5)
 692 03d0 10E0      		ldi r17,0
 693               	.L39:
 176:../../test/testmbox.c ****     chSysLock();
 694               		.loc 1 176 0
 695               	/* #APP */
 696               	 ;  176 "../../test/testmbox.c" 1
 697 03d2 F894      		cli
 698               	 ;  0 "" 2
 177:../../test/testmbox.c ****     msg1 = chMBFetchI(&mb1, &msg2);
 699               		.loc 1 177 0
 700               	/* #NOAPP */
 701 03d4 BE01      		movw r22,r28
 702 03d6 6F5F      		subi r22,-1
 703 03d8 7F4F      		sbci r23,-1
 704 03da 80E0      		ldi r24,lo8(mb1)
 705 03dc 90E0      		ldi r25,hi8(mb1)
 706 03de 0E94 0000 		call chMBFetchI
 707               	.LVL64:
 178:../../test/testmbox.c ****     chSysUnlock();
 708               		.loc 1 178 0
 709               	/* #APP */
 710               	 ;  178 "../../test/testmbox.c" 1
 711 03e2 7894      		sei
 712               	 ;  0 "" 2
 179:../../test/testmbox.c ****     test_assert(28, msg1 == RDY_OK, "wrong wake-up message");
 713               		.loc 1 179 0
 714               	/* #NOAPP */
 715 03e4 61E0      		ldi r22,lo8(1)
 716 03e6 892B      		or r24,r25
 717 03e8 01F0      		breq .L38
 718 03ea 60E0      		ldi r22,0
 719               	.L38:
 720 03ec 8CE1      		ldi r24,lo8(28)
 721 03ee 90E0      		ldi r25,0
 722               	.LVL65:
 723 03f0 0E94 0000 		call _test_assert
 724               	.LVL66:
 725 03f4 8111      		cpse r24,__zero_reg__
 726 03f6 00C0      		rjmp .L1
 180:../../test/testmbox.c ****     test_emit_token(msg2);
 727               		.loc 1 180 0
 728 03f8 8981      		ldd r24,Y+1
 729 03fa 0E94 0000 		call test_emit_token
 730               	.LVL67:
 731 03fe 0150      		subi r16,1
 732 0400 1109      		sbc r17,__zero_reg__
 175:../../test/testmbox.c ****   for (i = 0; i < MB_SIZE; i++) {
 733               		.loc 1 175 0
 734 0402 01F4      		brne .L39
 182:../../test/testmbox.c ****   test_assert_sequence(29, "ABCDE");
 735               		.loc 1 182 0
 736 0404 60E0      		ldi r22,lo8(.LC0)
 737 0406 70E0      		ldi r23,hi8(.LC0)
 738 0408 8DE1      		ldi r24,lo8(29)
 739 040a 90E0      		ldi r25,0
 740 040c 0E94 0000 		call _test_assert_sequence
 741               	.LVL68:
 742 0410 8111      		cpse r24,__zero_reg__
 743 0412 00C0      		rjmp .L1
 183:../../test/testmbox.c ****   test_assert_lock(30, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 744               		.loc 1 183 0
 745               	/* #APP */
 746               	 ;  183 "../../test/testmbox.c" 1
 747 0414 F894      		cli
 748               	 ;  0 "" 2
 749               	/* #NOAPP */
 750 0416 61E0      		ldi r22,lo8(1)
 751 0418 8091 0000 		lds r24,mb1+17
 752 041c 8530      		cpi r24,lo8(5)
 753 041e 01F0      		breq .L40
 754 0420 60E0      		ldi r22,0
 755               	.L40:
 756 0422 8EE1      		ldi r24,lo8(30)
 757 0424 90E0      		ldi r25,0
 758 0426 0E94 0000 		call _test_assert
 759               	.LVL69:
 760               	/* #APP */
 761               	 ;  183 "../../test/testmbox.c" 1
 762 042a 7894      		sei
 763               	 ;  0 "" 2
 764               	/* #NOAPP */
 765 042c 8111      		cpse r24,__zero_reg__
 766 042e 00C0      		rjmp .L1
 184:../../test/testmbox.c ****   test_assert_lock(31, chMBGetUsedCountI(&mb1) == 0, "still full");
 767               		.loc 1 184 0 discriminator 2
 768               	/* #APP */
 769               	 ;  184 "../../test/testmbox.c" 1
 770 0430 F894      		cli
 771               	 ;  0 "" 2
 772               	/* #NOAPP */
 773 0432 61E0      		ldi r22,lo8(1)
 774 0434 8091 0000 		lds r24,mb1+12
 775 0438 8111      		cpse r24,__zero_reg__
 776 043a 60E0      		ldi r22,0
 777               	.L42:
 778 043c 8FE1      		ldi r24,lo8(31)
 779 043e 90E0      		ldi r25,0
 780 0440 0E94 0000 		call _test_assert
 781               	.LVL70:
 782               	/* #APP */
 783               	 ;  184 "../../test/testmbox.c" 1
 784 0444 7894      		sei
 785               	 ;  0 "" 2
 786               	/* #NOAPP */
 787 0446 8111      		cpse r24,__zero_reg__
 788 0448 00C0      		rjmp .L1
 185:../../test/testmbox.c ****   test_assert(32, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 789               		.loc 1 185 0 discriminator 2
 790 044a 61E0      		ldi r22,lo8(1)
 791 044c 2091 0000 		lds r18,mb1+6
 792 0450 3091 0000 		lds r19,mb1+6+1
 793 0454 8091 0000 		lds r24,mb1+4
 794 0458 9091 0000 		lds r25,mb1+4+1
 795 045c 2817      		cp r18,r24
 796 045e 3907      		cpc r19,r25
 797 0460 01F0      		breq .L44
 798 0462 60E0      		ldi r22,0
 799               	.L44:
 800 0464 80E2      		ldi r24,lo8(32)
 801 0466 90E0      		ldi r25,0
 802 0468 0E94 0000 		call _test_assert
 803               	.LVL71:
 804 046c 8111      		cpse r24,__zero_reg__
 805 046e 00C0      		rjmp .L1
 187:../../test/testmbox.c ****   chSysLock();
 806               		.loc 1 187 0
 807               	/* #APP */
 808               	 ;  187 "../../test/testmbox.c" 1
 809 0470 F894      		cli
 810               	 ;  0 "" 2
 188:../../test/testmbox.c ****   msg1 = chMBPostAheadI(&mb1, 'E');
 811               		.loc 1 188 0
 812               	/* #NOAPP */
 813 0472 65E4      		ldi r22,lo8(69)
 814 0474 70E0      		ldi r23,0
 815 0476 80E0      		ldi r24,lo8(mb1)
 816 0478 90E0      		ldi r25,hi8(mb1)
 817 047a 0E94 0000 		call chMBPostAheadI
 818               	.LVL72:
 189:../../test/testmbox.c ****   test_assert(33, msg1 == RDY_OK, "wrong wake-up message");
 819               		.loc 1 189 0
 820 047e 61E0      		ldi r22,lo8(1)
 821 0480 892B      		or r24,r25
 822 0482 01F0      		breq .L45
 823 0484 60E0      		ldi r22,0
 824               	.L45:
 825 0486 81E2      		ldi r24,lo8(33)
 826 0488 90E0      		ldi r25,0
 827               	.LVL73:
 828 048a 0E94 0000 		call _test_assert
 829               	.LVL74:
 830 048e 8111      		cpse r24,__zero_reg__
 831 0490 00C0      		rjmp .L1
 190:../../test/testmbox.c ****   msg1 = chMBPostAheadI(&mb1, 'D');
 832               		.loc 1 190 0
 833 0492 64E4      		ldi r22,lo8(68)
 834 0494 70E0      		ldi r23,0
 835 0496 80E0      		ldi r24,lo8(mb1)
 836 0498 90E0      		ldi r25,hi8(mb1)
 837 049a 0E94 0000 		call chMBPostAheadI
 838               	.LVL75:
 191:../../test/testmbox.c ****   test_assert(34, msg1 == RDY_OK, "wrong wake-up message");
 839               		.loc 1 191 0
 840 049e 61E0      		ldi r22,lo8(1)
 841 04a0 892B      		or r24,r25
 842 04a2 01F0      		breq .L46
 843 04a4 60E0      		ldi r22,0
 844               	.L46:
 845 04a6 82E2      		ldi r24,lo8(34)
 846 04a8 90E0      		ldi r25,0
 847               	.LVL76:
 848 04aa 0E94 0000 		call _test_assert
 849               	.LVL77:
 850 04ae 8111      		cpse r24,__zero_reg__
 851 04b0 00C0      		rjmp .L1
 192:../../test/testmbox.c ****   msg1 = chMBPostAheadI(&mb1, 'C');
 852               		.loc 1 192 0
 853 04b2 63E4      		ldi r22,lo8(67)
 854 04b4 70E0      		ldi r23,0
 855 04b6 80E0      		ldi r24,lo8(mb1)
 856 04b8 90E0      		ldi r25,hi8(mb1)
 857 04ba 0E94 0000 		call chMBPostAheadI
 858               	.LVL78:
 193:../../test/testmbox.c ****   test_assert(35, msg1 == RDY_OK, "wrong wake-up message");
 859               		.loc 1 193 0
 860 04be 61E0      		ldi r22,lo8(1)
 861 04c0 892B      		or r24,r25
 862 04c2 01F0      		breq .L47
 863 04c4 60E0      		ldi r22,0
 864               	.L47:
 865 04c6 83E2      		ldi r24,lo8(35)
 866 04c8 90E0      		ldi r25,0
 867               	.LVL79:
 868 04ca 0E94 0000 		call _test_assert
 869               	.LVL80:
 870 04ce 8111      		cpse r24,__zero_reg__
 871 04d0 00C0      		rjmp .L1
 194:../../test/testmbox.c ****   msg1 = chMBPostAheadI(&mb1, 'B');
 872               		.loc 1 194 0
 873 04d2 62E4      		ldi r22,lo8(66)
 874 04d4 70E0      		ldi r23,0
 875 04d6 80E0      		ldi r24,lo8(mb1)
 876 04d8 90E0      		ldi r25,hi8(mb1)
 877 04da 0E94 0000 		call chMBPostAheadI
 878               	.LVL81:
 195:../../test/testmbox.c ****   test_assert(36, msg1 == RDY_OK, "wrong wake-up message");
 879               		.loc 1 195 0
 880 04de 61E0      		ldi r22,lo8(1)
 881 04e0 892B      		or r24,r25
 882 04e2 01F0      		breq .L48
 883 04e4 60E0      		ldi r22,0
 884               	.L48:
 885 04e6 84E2      		ldi r24,lo8(36)
 886 04e8 90E0      		ldi r25,0
 887               	.LVL82:
 888 04ea 0E94 0000 		call _test_assert
 889               	.LVL83:
 890 04ee 8111      		cpse r24,__zero_reg__
 891 04f0 00C0      		rjmp .L1
 196:../../test/testmbox.c ****   msg1 = chMBPostAheadI(&mb1, 'A');
 892               		.loc 1 196 0
 893 04f2 61E4      		ldi r22,lo8(65)
 894 04f4 70E0      		ldi r23,0
 895 04f6 80E0      		ldi r24,lo8(mb1)
 896 04f8 90E0      		ldi r25,hi8(mb1)
 897 04fa 0E94 0000 		call chMBPostAheadI
 898               	.LVL84:
 197:../../test/testmbox.c ****   chSysUnlock();
 899               		.loc 1 197 0
 900               	/* #APP */
 901               	 ;  197 "../../test/testmbox.c" 1
 902 04fe 7894      		sei
 903               	 ;  0 "" 2
 198:../../test/testmbox.c ****   test_assert(37, msg1 == RDY_OK, "wrong wake-up message");
 904               		.loc 1 198 0
 905               	/* #NOAPP */
 906 0500 61E0      		ldi r22,lo8(1)
 907 0502 892B      		or r24,r25
 908 0504 01F0      		breq .L49
 909 0506 60E0      		ldi r22,0
 910               	.L49:
 911 0508 85E2      		ldi r24,lo8(37)
 912 050a 90E0      		ldi r25,0
 913               	.LVL85:
 914 050c 0E94 0000 		call _test_assert
 915               	.LVL86:
 916 0510 8111      		cpse r24,__zero_reg__
 917 0512 00C0      		rjmp .L1
 199:../../test/testmbox.c ****   test_assert(38, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 918               		.loc 1 199 0
 919 0514 61E0      		ldi r22,lo8(1)
 920 0516 2091 0000 		lds r18,mb1+6
 921 051a 3091 0000 		lds r19,mb1+6+1
 922 051e 8091 0000 		lds r24,mb1+4
 923 0522 9091 0000 		lds r25,mb1+4+1
 924 0526 2817      		cp r18,r24
 925 0528 3907      		cpc r19,r25
 926 052a 01F0      		breq .L50
 927 052c 60E0      		ldi r22,0
 928               	.L50:
 929 052e 86E2      		ldi r24,lo8(38)
 930 0530 90E0      		ldi r25,0
 931 0532 0E94 0000 		call _test_assert
 932               	.LVL87:
 933 0536 8111      		cpse r24,__zero_reg__
 934 0538 00C0      		rjmp .L1
 935 053a 05E0      		ldi r16,lo8(5)
 936 053c 10E0      		ldi r17,0
 937               	.L52:
 201:../../test/testmbox.c ****     chSysLock();
 938               		.loc 1 201 0
 939               	/* #APP */
 940               	 ;  201 "../../test/testmbox.c" 1
 941 053e F894      		cli
 942               	 ;  0 "" 2
 202:../../test/testmbox.c ****     msg1 = chMBFetchI(&mb1, &msg2);
 943               		.loc 1 202 0
 944               	/* #NOAPP */
 945 0540 BE01      		movw r22,r28
 946 0542 6F5F      		subi r22,-1
 947 0544 7F4F      		sbci r23,-1
 948 0546 80E0      		ldi r24,lo8(mb1)
 949 0548 90E0      		ldi r25,hi8(mb1)
 950 054a 0E94 0000 		call chMBFetchI
 951               	.LVL88:
 203:../../test/testmbox.c ****     chSysUnlock();
 952               		.loc 1 203 0
 953               	/* #APP */
 954               	 ;  203 "../../test/testmbox.c" 1
 955 054e 7894      		sei
 956               	 ;  0 "" 2
 204:../../test/testmbox.c ****     test_assert(39, msg1 == RDY_OK, "wrong wake-up message");
 957               		.loc 1 204 0
 958               	/* #NOAPP */
 959 0550 61E0      		ldi r22,lo8(1)
 960 0552 892B      		or r24,r25
 961 0554 01F0      		breq .L51
 962 0556 60E0      		ldi r22,0
 963               	.L51:
 964 0558 87E2      		ldi r24,lo8(39)
 965 055a 90E0      		ldi r25,0
 966               	.LVL89:
 967 055c 0E94 0000 		call _test_assert
 968               	.LVL90:
 969 0560 8111      		cpse r24,__zero_reg__
 970 0562 00C0      		rjmp .L1
 205:../../test/testmbox.c ****     test_emit_token(msg2);
 971               		.loc 1 205 0
 972 0564 8981      		ldd r24,Y+1
 973 0566 0E94 0000 		call test_emit_token
 974               	.LVL91:
 975 056a 0150      		subi r16,1
 976 056c 1109      		sbc r17,__zero_reg__
 200:../../test/testmbox.c ****   for (i = 0; i < MB_SIZE; i++) {
 977               		.loc 1 200 0
 978 056e 01F4      		brne .L52
 207:../../test/testmbox.c ****   test_assert_sequence(40, "ABCDE");
 979               		.loc 1 207 0
 980 0570 60E0      		ldi r22,lo8(.LC0)
 981 0572 70E0      		ldi r23,hi8(.LC0)
 982 0574 88E2      		ldi r24,lo8(40)
 983 0576 90E0      		ldi r25,0
 984 0578 0E94 0000 		call _test_assert_sequence
 985               	.LVL92:
 986 057c 8111      		cpse r24,__zero_reg__
 987 057e 00C0      		rjmp .L1
 208:../../test/testmbox.c ****   test_assert_lock(41, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 988               		.loc 1 208 0
 989               	/* #APP */
 990               	 ;  208 "../../test/testmbox.c" 1
 991 0580 F894      		cli
 992               	 ;  0 "" 2
 993               	/* #NOAPP */
 994 0582 61E0      		ldi r22,lo8(1)
 995 0584 8091 0000 		lds r24,mb1+17
 996 0588 8530      		cpi r24,lo8(5)
 997 058a 01F0      		breq .L53
 998 058c 60E0      		ldi r22,0
 999               	.L53:
 1000 058e 89E2      		ldi r24,lo8(41)
 1001 0590 90E0      		ldi r25,0
 1002 0592 0E94 0000 		call _test_assert
 1003               	.LVL93:
 1004               	/* #APP */
 1005               	 ;  208 "../../test/testmbox.c" 1
 1006 0596 7894      		sei
 1007               	 ;  0 "" 2
 1008               	/* #NOAPP */
 1009 0598 8111      		cpse r24,__zero_reg__
 1010 059a 00C0      		rjmp .L1
 209:../../test/testmbox.c ****   test_assert_lock(42, chMBGetUsedCountI(&mb1) == 0, "still full");
 1011               		.loc 1 209 0 discriminator 2
 1012               	/* #APP */
 1013               	 ;  209 "../../test/testmbox.c" 1
 1014 059c F894      		cli
 1015               	 ;  0 "" 2
 1016               	/* #NOAPP */
 1017 059e 61E0      		ldi r22,lo8(1)
 1018 05a0 8091 0000 		lds r24,mb1+12
 1019 05a4 8111      		cpse r24,__zero_reg__
 1020 05a6 60E0      		ldi r22,0
 1021               	.L55:
 1022 05a8 8AE2      		ldi r24,lo8(42)
 1023 05aa 90E0      		ldi r25,0
 1024 05ac 0E94 0000 		call _test_assert
 1025               	.LVL94:
 1026               	/* #APP */
 1027               	 ;  209 "../../test/testmbox.c" 1
 1028 05b0 7894      		sei
 1029               	 ;  0 "" 2
 1030               	/* #NOAPP */
 1031 05b2 8111      		cpse r24,__zero_reg__
 1032 05b4 00C0      		rjmp .L1
 210:../../test/testmbox.c ****   test_assert(43, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 1033               		.loc 1 210 0 discriminator 2
 1034 05b6 61E0      		ldi r22,lo8(1)
 1035 05b8 2091 0000 		lds r18,mb1+6
 1036 05bc 3091 0000 		lds r19,mb1+6+1
 1037 05c0 8091 0000 		lds r24,mb1+4
 1038 05c4 9091 0000 		lds r25,mb1+4+1
 1039 05c8 2817      		cp r18,r24
 1040 05ca 3907      		cpc r19,r25
 1041 05cc 01F0      		breq .L57
 1042 05ce 60E0      		ldi r22,0
 1043               	.L57:
 1044 05d0 8BE2      		ldi r24,lo8(43)
 1045 05d2 90E0      		ldi r25,0
 1046 05d4 0E94 0000 		call _test_assert
 1047               	.LVL95:
 1048 05d8 8111      		cpse r24,__zero_reg__
 1049 05da 00C0      		rjmp .L1
 215:../../test/testmbox.c ****   chMBReset(&mb1);
 1050               		.loc 1 215 0
 1051 05dc 80E0      		ldi r24,lo8(mb1)
 1052 05de 90E0      		ldi r25,hi8(mb1)
 1053 05e0 0E94 0000 		call chMBReset
 1054               	.LVL96:
 220:../../test/testmbox.c ****   test_assert_lock(44, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 1055               		.loc 1 220 0
 1056               	/* #APP */
 1057               	 ;  220 "../../test/testmbox.c" 1
 1058 05e4 F894      		cli
 1059               	 ;  0 "" 2
 1060               	/* #NOAPP */
 1061 05e6 61E0      		ldi r22,lo8(1)
 1062 05e8 8091 0000 		lds r24,mb1+17
 1063 05ec 8530      		cpi r24,lo8(5)
 1064 05ee 01F0      		breq .L58
 1065 05f0 60E0      		ldi r22,0
 1066               	.L58:
 1067 05f2 8CE2      		ldi r24,lo8(44)
 1068 05f4 90E0      		ldi r25,0
 1069 05f6 0E94 0000 		call _test_assert
 1070               	.LVL97:
 1071               	/* #APP */
 1072               	 ;  220 "../../test/testmbox.c" 1
 1073 05fa 7894      		sei
 1074               	 ;  0 "" 2
 1075               	/* #NOAPP */
 1076 05fc 8111      		cpse r24,__zero_reg__
 1077 05fe 00C0      		rjmp .L1
 221:../../test/testmbox.c ****   test_assert_lock(45, chMBGetUsedCountI(&mb1) == 0, "still full");
 1078               		.loc 1 221 0 discriminator 2
 1079               	/* #APP */
 1080               	 ;  221 "../../test/testmbox.c" 1
 1081 0600 F894      		cli
 1082               	 ;  0 "" 2
 1083               	/* #NOAPP */
 1084 0602 61E0      		ldi r22,lo8(1)
 1085 0604 8091 0000 		lds r24,mb1+12
 1086 0608 8111      		cpse r24,__zero_reg__
 1087 060a 60E0      		ldi r22,0
 1088               	.L60:
 1089 060c 8DE2      		ldi r24,lo8(45)
 1090 060e 90E0      		ldi r25,0
 1091 0610 0E94 0000 		call _test_assert
 1092               	.LVL98:
 1093               	/* #APP */
 1094               	 ;  221 "../../test/testmbox.c" 1
 1095 0614 7894      		sei
 1096               	 ;  0 "" 2
 1097               	/* #NOAPP */
 1098 0616 8111      		cpse r24,__zero_reg__
 1099 0618 00C0      		rjmp .L1
 222:../../test/testmbox.c ****   test_assert_lock(46, mb1.mb_buffer == mb1.mb_wrptr, "write pointer not aligned to base");
 1100               		.loc 1 222 0 discriminator 2
 1101               	/* #APP */
 1102               	 ;  222 "../../test/testmbox.c" 1
 1103 061a F894      		cli
 1104               	 ;  0 "" 2
 1105               	/* #NOAPP */
 1106 061c 61E0      		ldi r22,lo8(1)
 1107 061e 2091 0000 		lds r18,mb1
 1108 0622 3091 0000 		lds r19,mb1+1
 1109 0626 8091 0000 		lds r24,mb1+4
 1110 062a 9091 0000 		lds r25,mb1+4+1
 1111 062e 2817      		cp r18,r24
 1112 0630 3907      		cpc r19,r25
 1113 0632 01F0      		breq .L62
 1114 0634 60E0      		ldi r22,0
 1115               	.L62:
 1116 0636 8EE2      		ldi r24,lo8(46)
 1117 0638 90E0      		ldi r25,0
 1118 063a 0E94 0000 		call _test_assert
 1119               	.LVL99:
 1120               	/* #APP */
 1121               	 ;  222 "../../test/testmbox.c" 1
 1122 063e 7894      		sei
 1123               	 ;  0 "" 2
 1124               	/* #NOAPP */
 1125 0640 8111      		cpse r24,__zero_reg__
 1126 0642 00C0      		rjmp .L1
 223:../../test/testmbox.c ****   test_assert_lock(47, mb1.mb_buffer == mb1.mb_rdptr, "read pointer not aligned to base");
 1127               		.loc 1 223 0 discriminator 2
 1128               	/* #APP */
 1129               	 ;  223 "../../test/testmbox.c" 1
 1130 0644 F894      		cli
 1131               	 ;  0 "" 2
 1132               	/* #NOAPP */
 1133 0646 61E0      		ldi r22,lo8(1)
 1134 0648 2091 0000 		lds r18,mb1
 1135 064c 3091 0000 		lds r19,mb1+1
 1136 0650 8091 0000 		lds r24,mb1+6
 1137 0654 9091 0000 		lds r25,mb1+6+1
 1138 0658 2817      		cp r18,r24
 1139 065a 3907      		cpc r19,r25
 1140 065c 01F0      		breq .L64
 1141 065e 60E0      		ldi r22,0
 1142               	.L64:
 1143 0660 8FE2      		ldi r24,lo8(47)
 1144 0662 90E0      		ldi r25,0
 1145 0664 0E94 0000 		call _test_assert
 1146               	.LVL100:
 1147               	/* #APP */
 1148               	 ;  223 "../../test/testmbox.c" 1
 1149 0668 7894      		sei
 1150               	 ;  0 "" 2
 1151               	/* #NOAPP */
 1152 066a 00C0      		rjmp .L1
 1153               		.cfi_endproc
 1154               	.LFE8:
 1157               	mbox1_setup:
 1158               	.LFB7:
  75:../../test/testmbox.c **** static void mbox1_setup(void) {
 1159               		.loc 1 75 0
 1160               		.cfi_startproc
 1161               	/* prologue: function */
 1162               	/* frame size = 0 */
 1163               	/* stack size = 0 */
 1164               	.L__stack_usage = 0
  77:../../test/testmbox.c ****   chMBInit(&mb1, (msg_t *)test.wa.T0, MB_SIZE);
 1165               		.loc 1 77 0
 1166 066c 45E0      		ldi r20,lo8(5)
 1167 066e 60E0      		ldi r22,lo8(test)
 1168 0670 70E0      		ldi r23,hi8(test)
 1169 0672 80E0      		ldi r24,lo8(mb1)
 1170 0674 90E0      		ldi r25,hi8(mb1)
 1171 0676 0C94 0000 		jmp chMBInit
 1172               	.LVL101:
 1173               		.cfi_endproc
 1174               	.LFE7:
 1176               	.global	patternmbox
 1177               		.section	.rodata
 1180               	patternmbox:
 1181 0000 0000      		.word	testmbox1
 1182 0002 0000      		.word	0
 1183               	.global	testmbox1
 1184               		.section	.rodata.str1.1
 1185               	.LC1:
 1186 0006 4D61 696C 		.string	"Mailboxes, queuing and timeouts"
 1186      626F 7865 
 1186      732C 2071 
 1186      7565 7569 
 1186      6E67 2061 
 1187               		.section	.rodata
 1190               	testmbox1:
 1191 0004 0000      		.word	.LC1
 1192 0006 0000      		.word	gs(mbox1_setup)
 1193 0008 0000      		.word	0
 1194 000a 0000      		.word	gs(mbox1_execute)
 1195               		.data
 1198               	mb1:
 1199 0000 0000      		.word	test
 1200 0002 0000      		.word	test+10
 1201 0004 0000      		.word	test
 1202 0006 0000      		.word	test
 1203 0008 0000      		.word	mb1+8
 1204 000a 0000      		.word	mb1+8
 1205 000c 00        		.byte	0
 1206 000d 0000      		.word	mb1+13
 1207 000f 0000      		.word	mb1+13
 1208 0011 05        		.byte	5
 1209               		.text
 1210               	.Letext0:
 1211               		.file 2 "/usr/local/cross/lib/gcc/avr/4.7.2/../../../../avr/include/stdint.h"
 1212               		.file 3 "../../os/ports/GCC/AVR/chtypes.h"
 1213               		.file 4 "../../os/kernel/include/chlists.h"
 1214               		.file 5 "../../os/kernel/include/chthreads.h"
 1215               		.file 6 "../../os/ports/GCC/AVR/chcore.h"
 1216               		.file 7 "../../os/kernel/include/chsem.h"
 1217               		.file 8 "../../os/kernel/include/chmtx.h"
 1218               		.file 9 "../../os/kernel/include/chmboxes.h"
 1219               		.file 10 "../../test/test.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 testmbox.c
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//cc7GHkuf.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//cc7GHkuf.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//cc7GHkuf.s:4      *ABS*:000000000000003f __SREG__
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//cc7GHkuf.s:5      *ABS*:000000000000003b __RAMPZ__
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//cc7GHkuf.s:6      *ABS*:0000000000000000 __tmp_reg__
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//cc7GHkuf.s:7      *ABS*:0000000000000001 __zero_reg__
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//cc7GHkuf.s:16     .text:0000000000000000 mbox1_execute
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//cc7GHkuf.s:1198   .data:0000000000000000 mb1
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//cc7GHkuf.s:1157   .text:000000000000066c mbox1_setup
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//cc7GHkuf.s:1180   .rodata:0000000000000000 patternmbox
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//cc7GHkuf.s:1190   .rodata:0000000000000004 testmbox1

UNDEFINED SYMBOLS
_test_assert
chMBPost
chMBPostAhead
chMBPostI
chMBPostAheadI
test_emit_token
chMBFetch
_test_assert_sequence
chMBFetchI
chMBReset
test
chMBInit
__do_copy_data
