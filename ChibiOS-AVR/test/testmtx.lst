   1               		.file	"testmtx.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               		.section	.rodata.str1.1,"aMS",@progbits,1
  12               	.LC0:
  13 0000 4100      		.string	"A"
  14               	.LC1:
  15 0002 4300      		.string	"C"
  16               	.LC2:
  17 0004 4200      		.string	"B"
  18               	.LC3:
  19 0006 4142 4300 		.string	"ABC"
  20               		.text
  22               	mtx8_execute:
  23               	.LFB36:
  24               		.file 1 "../../test/testmtx.c"
   1:../../test/testmtx.c **** /*
   2:../../test/testmtx.c ****     ChibiOS/RT - Copyright (C) 2006,2007,2008,2009,2010,
   3:../../test/testmtx.c ****                  2011,2012 Giovanni Di Sirio.
   4:../../test/testmtx.c **** 
   5:../../test/testmtx.c ****     This file is part of ChibiOS/RT.
   6:../../test/testmtx.c **** 
   7:../../test/testmtx.c ****     ChibiOS/RT is free software; you can redistribute it and/or modify
   8:../../test/testmtx.c ****     it under the terms of the GNU General Public License as published by
   9:../../test/testmtx.c ****     the Free Software Foundation; either version 3 of the License, or
  10:../../test/testmtx.c ****     (at your option) any later version.
  11:../../test/testmtx.c **** 
  12:../../test/testmtx.c ****     ChibiOS/RT is distributed in the hope that it will be useful,
  13:../../test/testmtx.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:../../test/testmtx.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:../../test/testmtx.c ****     GNU General Public License for more details.
  16:../../test/testmtx.c **** 
  17:../../test/testmtx.c ****     You should have received a copy of the GNU General Public License
  18:../../test/testmtx.c ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  19:../../test/testmtx.c **** */
  20:../../test/testmtx.c **** 
  21:../../test/testmtx.c **** #include "ch.h"
  22:../../test/testmtx.c **** #include "test.h"
  23:../../test/testmtx.c **** 
  24:../../test/testmtx.c **** /**
  25:../../test/testmtx.c ****  * @page test_mtx Mutexes test
  26:../../test/testmtx.c ****  *
  27:../../test/testmtx.c ****  * File: @ref testmtx.c
  28:../../test/testmtx.c ****  *
  29:../../test/testmtx.c ****  * <h2>Description</h2>
  30:../../test/testmtx.c ****  * This module implements the test sequence for the @ref mutexes and
  31:../../test/testmtx.c ****  * @ref condvars subsystems.<br>
  32:../../test/testmtx.c ****  * Tests on those subsystems are particularly critical because the system-wide
  33:../../test/testmtx.c ****  * implications of the Priority Inheritance mechanism.
  34:../../test/testmtx.c ****  *
  35:../../test/testmtx.c ****  * <h2>Objective</h2>
  36:../../test/testmtx.c ****  * Objective of the test module is to cover 100% of the subsystems code.
  37:../../test/testmtx.c ****  *
  38:../../test/testmtx.c ****  * <h2>Preconditions</h2>
  39:../../test/testmtx.c ****  * The module requires the following kernel options:
  40:../../test/testmtx.c ****  * - @p CH_USE_MUTEXES
  41:../../test/testmtx.c ****  * - @p CH_USE_CONDVARS
  42:../../test/testmtx.c ****  * - @p CH_DBG_THREADS_PROFILING
  43:../../test/testmtx.c ****  * .
  44:../../test/testmtx.c ****  * In case some of the required options are not enabled then some or all tests
  45:../../test/testmtx.c ****  * may be skipped.
  46:../../test/testmtx.c ****  *
  47:../../test/testmtx.c ****  * <h2>Test Cases</h2>
  48:../../test/testmtx.c ****  * - @subpage test_mtx_001
  49:../../test/testmtx.c ****  * - @subpage test_mtx_002
  50:../../test/testmtx.c ****  * - @subpage test_mtx_003
  51:../../test/testmtx.c ****  * - @subpage test_mtx_004
  52:../../test/testmtx.c ****  * - @subpage test_mtx_005
  53:../../test/testmtx.c ****  * - @subpage test_mtx_006
  54:../../test/testmtx.c ****  * - @subpage test_mtx_007
  55:../../test/testmtx.c ****  * - @subpage test_mtx_008
  56:../../test/testmtx.c ****  * .
  57:../../test/testmtx.c ****  * @file testmtx.c
  58:../../test/testmtx.c ****  * @brief Mutexes and CondVars test source file
  59:../../test/testmtx.c ****  * @file testmtx.h
  60:../../test/testmtx.c ****  * @brief Mutexes and CondVars test header file
  61:../../test/testmtx.c ****  */
  62:../../test/testmtx.c **** 
  63:../../test/testmtx.c **** #if CH_USE_MUTEXES || defined(__DOXYGEN__)
  64:../../test/testmtx.c **** 
  65:../../test/testmtx.c **** #define ALLOWED_DELAY 5
  66:../../test/testmtx.c **** 
  67:../../test/testmtx.c **** /*
  68:../../test/testmtx.c ****  * Note, the static initializers are not really required because the
  69:../../test/testmtx.c ****  * variables are explicitly initialized in each test case. It is done in order
  70:../../test/testmtx.c ****  * to test the macros.
  71:../../test/testmtx.c ****  */
  72:../../test/testmtx.c **** static MUTEX_DECL(m1);
  73:../../test/testmtx.c **** static MUTEX_DECL(m2);
  74:../../test/testmtx.c **** #if CH_USE_CONDVARS || defined(__DOXYGEN__)
  75:../../test/testmtx.c **** static CONDVAR_DECL(c1);
  76:../../test/testmtx.c **** #endif
  77:../../test/testmtx.c **** 
  78:../../test/testmtx.c **** /**
  79:../../test/testmtx.c ****  * @page test_mtx_001 Priority enqueuing test
  80:../../test/testmtx.c ****  *
  81:../../test/testmtx.c ****  * <h2>Description</h2>
  82:../../test/testmtx.c ****  * Five threads, with increasing priority, are enqueued on a locked mutex then
  83:../../test/testmtx.c ****  * the mutex is unlocked.<br>
  84:../../test/testmtx.c ****  * The test expects the threads to perform their operations in increasing
  85:../../test/testmtx.c ****  * priority order regardless of the initial order.
  86:../../test/testmtx.c ****  */
  87:../../test/testmtx.c **** 
  88:../../test/testmtx.c **** static void mtx1_setup(void) {
  89:../../test/testmtx.c **** 
  90:../../test/testmtx.c ****   chMtxInit(&m1);
  91:../../test/testmtx.c **** }
  92:../../test/testmtx.c **** 
  93:../../test/testmtx.c **** static msg_t thread1(void *p) {
  94:../../test/testmtx.c **** 
  95:../../test/testmtx.c ****   chMtxLock(&m1);
  96:../../test/testmtx.c ****   test_emit_token(*(char *)p);
  97:../../test/testmtx.c ****   chMtxUnlock();
  98:../../test/testmtx.c ****   return 0;
  99:../../test/testmtx.c **** }
 100:../../test/testmtx.c **** 
 101:../../test/testmtx.c **** static void mtx1_execute(void) {
 102:../../test/testmtx.c **** 
 103:../../test/testmtx.c ****   tprio_t prio = chThdGetPriority(); /* Because priority inheritance.*/
 104:../../test/testmtx.c ****   chMtxLock(&m1);
 105:../../test/testmtx.c ****   threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 106:../../test/testmtx.c ****   threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 107:../../test/testmtx.c ****   threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 108:../../test/testmtx.c ****   threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 109:../../test/testmtx.c ****   threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 110:../../test/testmtx.c ****   chMtxUnlock();
 111:../../test/testmtx.c ****   test_wait_threads();
 112:../../test/testmtx.c ****   test_assert(1, prio == chThdGetPriority(), "wrong priority level");
 113:../../test/testmtx.c ****   test_assert_sequence(2, "ABCDE");
 114:../../test/testmtx.c **** }
 115:../../test/testmtx.c **** 
 116:../../test/testmtx.c **** ROMCONST struct testcase testmtx1 = {
 117:../../test/testmtx.c ****   "Mutexes, priority enqueuing test",
 118:../../test/testmtx.c ****   mtx1_setup,
 119:../../test/testmtx.c ****   NULL,
 120:../../test/testmtx.c ****   mtx1_execute
 121:../../test/testmtx.c **** };
 122:../../test/testmtx.c **** 
 123:../../test/testmtx.c **** #if CH_DBG_THREADS_PROFILING || defined(__DOXYGEN__)
 124:../../test/testmtx.c **** /**
 125:../../test/testmtx.c ****  * @page test_mtx_002 Priority inheritance, simple case
 126:../../test/testmtx.c ****  *
 127:../../test/testmtx.c ****  * <h2>Description</h2>
 128:../../test/testmtx.c ****  * Three threads are involved in the classic priority inversion scenario, a
 129:../../test/testmtx.c ****  * medium priority thread tries to starve an high priority thread by
 130:../../test/testmtx.c ****  * blocking a low priority thread into a mutex lock zone.<br>
 131:../../test/testmtx.c ****  * The test expects the threads to reach their goal in increasing priority
 132:../../test/testmtx.c ****  * order by rearranging their priorities in order to avoid the priority
 133:../../test/testmtx.c ****  * inversion trap.
 134:../../test/testmtx.c ****  *
 135:../../test/testmtx.c ****  * <h2>Scenario</h2>
 136:../../test/testmtx.c ****  * This weird looking diagram should explain what happens in the test case:
 137:../../test/testmtx.c ****  * @code
 138:../../test/testmtx.c ****  * Time ----> 0     10    20    30    40    50    60    70    80    90    100
 139:../../test/testmtx.c ****  *    0 ......AL++++++++++............2+++++++++++AU0---------------++++++G...
 140:../../test/testmtx.c ****  *    1 ..................++++++++++++------------------++++++++++++G.........
 141:../../test/testmtx.c ****  *    2  .............................AL..........++++++AUG...................
 142:../../test/testmtx.c ****  *                                    ^           ^
 143:../../test/testmtx.c ****  * Legend:
 144:../../test/testmtx.c ****  *   0..2 - Priority levels
 145:../../test/testmtx.c ****  *   +++  - Running
 146:../../test/testmtx.c ****  *   ---  - Ready
 147:../../test/testmtx.c ****  *   ...  - Waiting or Terminated
 148:../../test/testmtx.c ****  *   xL   - Lock operation on mutex 'x'
 149:../../test/testmtx.c ****  *   xUn  - Unlock operation on mutex 'x' with priority returning to level 'n'
 150:../../test/testmtx.c ****  *   G    - Goal
 151:../../test/testmtx.c ****  *   ^    - Priority transition (boost or return).
 152:../../test/testmtx.c ****  * @endcode
 153:../../test/testmtx.c ****  */
 154:../../test/testmtx.c **** 
 155:../../test/testmtx.c **** static void mtx2_setup(void) {
 156:../../test/testmtx.c **** 
 157:../../test/testmtx.c ****   chMtxInit(&m1);
 158:../../test/testmtx.c **** }
 159:../../test/testmtx.c **** 
 160:../../test/testmtx.c **** /* Low priority thread */
 161:../../test/testmtx.c **** static msg_t thread2L(void *p) {
 162:../../test/testmtx.c **** 
 163:../../test/testmtx.c ****   (void)p;
 164:../../test/testmtx.c ****   chMtxLock(&m1);
 165:../../test/testmtx.c ****   test_cpu_pulse(40);
 166:../../test/testmtx.c ****   chMtxUnlock();
 167:../../test/testmtx.c ****   test_cpu_pulse(10);
 168:../../test/testmtx.c ****   test_emit_token('C');
 169:../../test/testmtx.c ****   return 0;
 170:../../test/testmtx.c **** }
 171:../../test/testmtx.c **** 
 172:../../test/testmtx.c **** /* Medium priority thread */
 173:../../test/testmtx.c **** static msg_t thread2M(void *p) {
 174:../../test/testmtx.c **** 
 175:../../test/testmtx.c ****   (void)p;
 176:../../test/testmtx.c ****   chThdSleepMilliseconds(20);
 177:../../test/testmtx.c ****   test_cpu_pulse(40);
 178:../../test/testmtx.c ****   test_emit_token('B');
 179:../../test/testmtx.c ****   return 0;
 180:../../test/testmtx.c **** }
 181:../../test/testmtx.c **** 
 182:../../test/testmtx.c **** /* High priority thread */
 183:../../test/testmtx.c **** static msg_t thread2H(void *p) {
 184:../../test/testmtx.c **** 
 185:../../test/testmtx.c ****   (void)p;
 186:../../test/testmtx.c ****   chThdSleepMilliseconds(40);
 187:../../test/testmtx.c ****   chMtxLock(&m1);
 188:../../test/testmtx.c ****   test_cpu_pulse(10);
 189:../../test/testmtx.c ****   chMtxUnlock();
 190:../../test/testmtx.c ****   test_emit_token('A');
 191:../../test/testmtx.c ****   return 0;
 192:../../test/testmtx.c **** }
 193:../../test/testmtx.c **** 
 194:../../test/testmtx.c **** static void mtx2_execute(void) {
 195:../../test/testmtx.c ****   systime_t time;
 196:../../test/testmtx.c **** 
 197:../../test/testmtx.c ****   test_wait_tick();
 198:../../test/testmtx.c ****   time = chTimeNow();
 199:../../test/testmtx.c ****   threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriority()-1, thread2H, 0);
 200:../../test/testmtx.c ****   threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriority()-2, thread2M, 0);
 201:../../test/testmtx.c ****   threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriority()-3, thread2L, 0);
 202:../../test/testmtx.c ****   test_wait_threads();
 203:../../test/testmtx.c ****   test_assert_sequence(1, "ABC");
 204:../../test/testmtx.c ****   test_assert_time_window(2, time + MS2ST(100), time + MS2ST(100) + ALLOWED_DELAY);
 205:../../test/testmtx.c **** }
 206:../../test/testmtx.c **** 
 207:../../test/testmtx.c **** ROMCONST struct testcase testmtx2 = {
 208:../../test/testmtx.c ****   "Mutexes, priority inheritance, simple case",
 209:../../test/testmtx.c ****   mtx2_setup,
 210:../../test/testmtx.c ****   NULL,
 211:../../test/testmtx.c ****   mtx2_execute
 212:../../test/testmtx.c **** };
 213:../../test/testmtx.c **** 
 214:../../test/testmtx.c **** /**
 215:../../test/testmtx.c ****  * @page test_mtx_003 Priority inheritance, complex case
 216:../../test/testmtx.c ****  *
 217:../../test/testmtx.c ****  * <h2>Description</h2>
 218:../../test/testmtx.c ****  * Five threads are involved in the complex priority inversion scenario,
 219:../../test/testmtx.c ****  * please refer to the diagram below for the complete scenario.<br>
 220:../../test/testmtx.c ****  * The test expects the threads to perform their operations in increasing
 221:../../test/testmtx.c ****  * priority order by rearranging their priorities in order to avoid the
 222:../../test/testmtx.c ****  * priority inversion trap.
 223:../../test/testmtx.c ****  *
 224:../../test/testmtx.c ****  * <h2>Scenario</h2>
 225:../../test/testmtx.c ****  * This weird looking diagram should explain what happens in the test case:
 226:../../test/testmtx.c ****  * @code
 227:../../test/testmtx.c ****  * Time ----> 0     10    20    30    40    50    60    70    80    90    100   110
 228:../../test/testmtx.c ****  *    0 ......BL++++------------2+++++------4+++++BU0---------------------------G.....
 229:../../test/testmtx.c ****  *    1 ............AL++++2+++++BL----------4-----++++++BU4+++AU1---------------G.....
 230:../../test/testmtx.c ****  *    2 ..................AL----------------------------------------------++++++AUG...
 231:../../test/testmtx.c ****  *    3 ..............................+++++++-----------------------++++++G...........
 232:../../test/testmtx.c ****  *    4 ....................................AL................++++++AUG...............
 233:../../test/testmtx.c ****  *                        ^     ^           ^     ^     ^     ^
 234:../../test/testmtx.c ****  * Legend:
 235:../../test/testmtx.c ****  *   0..4 - Priority levels
 236:../../test/testmtx.c ****  *   +++  - Running
 237:../../test/testmtx.c ****  *   ---  - Ready
 238:../../test/testmtx.c ****  *   ...  - Waiting or Terminated
 239:../../test/testmtx.c ****  *   xL   - Lock operation on mutex 'x'
 240:../../test/testmtx.c ****  *   xUn  - Unlock operation on mutex 'x' with priority returning to level 'n'
 241:../../test/testmtx.c ****  *   ^    - Priority transition (boost or return).
 242:../../test/testmtx.c ****  * @endcode
 243:../../test/testmtx.c ****  */
 244:../../test/testmtx.c **** 
 245:../../test/testmtx.c **** static void mtx3_setup(void) {
 246:../../test/testmtx.c **** 
 247:../../test/testmtx.c ****   chMtxInit(&m1); /* Mutex B.*/
 248:../../test/testmtx.c ****   chMtxInit(&m2); /* Mutex A.*/
 249:../../test/testmtx.c **** }
 250:../../test/testmtx.c **** 
 251:../../test/testmtx.c **** /* Lowest priority thread */
 252:../../test/testmtx.c **** static msg_t thread3LL(void *p) {
 253:../../test/testmtx.c **** 
 254:../../test/testmtx.c ****   (void)p;
 255:../../test/testmtx.c ****   chMtxLock(&m1);
 256:../../test/testmtx.c ****   test_cpu_pulse(30);
 257:../../test/testmtx.c ****   chMtxUnlock();
 258:../../test/testmtx.c ****   test_emit_token('E');
 259:../../test/testmtx.c ****   return 0;
 260:../../test/testmtx.c **** }
 261:../../test/testmtx.c **** 
 262:../../test/testmtx.c **** /* Low priority thread */
 263:../../test/testmtx.c **** static msg_t thread3L(void *p) {
 264:../../test/testmtx.c **** 
 265:../../test/testmtx.c ****   (void)p;
 266:../../test/testmtx.c ****   chThdSleepMilliseconds(10);
 267:../../test/testmtx.c ****   chMtxLock(&m2);
 268:../../test/testmtx.c ****   test_cpu_pulse(20);
 269:../../test/testmtx.c ****   chMtxLock(&m1);
 270:../../test/testmtx.c ****   test_cpu_pulse(10);
 271:../../test/testmtx.c ****   chMtxUnlock();
 272:../../test/testmtx.c ****   test_cpu_pulse(10);
 273:../../test/testmtx.c ****   chMtxUnlock();
 274:../../test/testmtx.c ****   test_emit_token('D');
 275:../../test/testmtx.c ****   return 0;
 276:../../test/testmtx.c **** }
 277:../../test/testmtx.c **** 
 278:../../test/testmtx.c **** /* Medium priority thread */
 279:../../test/testmtx.c **** static msg_t thread3M(void *p) {
 280:../../test/testmtx.c **** 
 281:../../test/testmtx.c ****   (void)p;
 282:../../test/testmtx.c ****   chThdSleepMilliseconds(20);
 283:../../test/testmtx.c ****   chMtxLock(&m2);
 284:../../test/testmtx.c ****   test_cpu_pulse(10);
 285:../../test/testmtx.c ****   chMtxUnlock();
 286:../../test/testmtx.c ****   test_emit_token('C');
 287:../../test/testmtx.c ****   return 0;
 288:../../test/testmtx.c **** }
 289:../../test/testmtx.c **** 
 290:../../test/testmtx.c **** /* High priority thread */
 291:../../test/testmtx.c **** static msg_t thread3H(void *p) {
 292:../../test/testmtx.c **** 
 293:../../test/testmtx.c ****   (void)p;
 294:../../test/testmtx.c ****   chThdSleepMilliseconds(40);
 295:../../test/testmtx.c ****   test_cpu_pulse(20);
 296:../../test/testmtx.c ****   test_emit_token('B');
 297:../../test/testmtx.c ****   return 0;
 298:../../test/testmtx.c **** }
 299:../../test/testmtx.c **** 
 300:../../test/testmtx.c **** /* Highest priority thread */
 301:../../test/testmtx.c **** static msg_t thread3HH(void *p) {
 302:../../test/testmtx.c **** 
 303:../../test/testmtx.c ****   (void)p;
 304:../../test/testmtx.c ****   chThdSleepMilliseconds(50);
 305:../../test/testmtx.c ****   chMtxLock(&m2);
 306:../../test/testmtx.c ****   test_cpu_pulse(10);
 307:../../test/testmtx.c ****   chMtxUnlock();
 308:../../test/testmtx.c ****   test_emit_token('A');
 309:../../test/testmtx.c ****   return 0;
 310:../../test/testmtx.c **** }
 311:../../test/testmtx.c **** 
 312:../../test/testmtx.c **** static void mtx3_execute(void) {
 313:../../test/testmtx.c ****   systime_t time;
 314:../../test/testmtx.c **** 
 315:../../test/testmtx.c ****   test_wait_tick();
 316:../../test/testmtx.c ****   time = chTimeNow();
 317:../../test/testmtx.c ****   threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriority()-5, thread3LL, 0);
 318:../../test/testmtx.c ****   threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriority()-4, thread3L, 0);
 319:../../test/testmtx.c ****   threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriority()-3, thread3M, 0);
 320:../../test/testmtx.c ****   threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriority()-2, thread3H, 0);
 321:../../test/testmtx.c ****   threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriority()-1, thread3HH, 0);
 322:../../test/testmtx.c ****   test_wait_threads();
 323:../../test/testmtx.c ****   test_assert_sequence(1, "ABCDE");
 324:../../test/testmtx.c ****   test_assert_time_window(2, time + MS2ST(110), time + MS2ST(110) + ALLOWED_DELAY);
 325:../../test/testmtx.c **** }
 326:../../test/testmtx.c **** 
 327:../../test/testmtx.c **** ROMCONST struct testcase testmtx3 = {
 328:../../test/testmtx.c ****   "Mutexes, priority inheritance, complex case",
 329:../../test/testmtx.c ****   mtx3_setup,
 330:../../test/testmtx.c ****   NULL,
 331:../../test/testmtx.c ****   mtx3_execute
 332:../../test/testmtx.c **** };
 333:../../test/testmtx.c **** #endif /* CH_DBG_THREADS_PROFILING */
 334:../../test/testmtx.c **** 
 335:../../test/testmtx.c **** /**
 336:../../test/testmtx.c ****  * @page test_mtx_004 Priority return verification
 337:../../test/testmtx.c ****  *
 338:../../test/testmtx.c ****  * <h2>Description</h2>
 339:../../test/testmtx.c ****  * Two threads are spawned that try to lock the mutexes locked by the tester
 340:../../test/testmtx.c ****  * thread with precise timing.<br>
 341:../../test/testmtx.c ****  * The test expects that the priority changes caused by the priority
 342:../../test/testmtx.c ****  * inheritance algorithm happen at the right moment and with the right values.
 343:../../test/testmtx.c ****  */
 344:../../test/testmtx.c **** 
 345:../../test/testmtx.c **** static void mtx4_setup(void) {
 346:../../test/testmtx.c **** 
 347:../../test/testmtx.c ****   chMtxInit(&m1);
 348:../../test/testmtx.c ****   chMtxInit(&m2);
 349:../../test/testmtx.c **** }
 350:../../test/testmtx.c **** 
 351:../../test/testmtx.c **** static msg_t thread4a(void *p) {
 352:../../test/testmtx.c **** 
 353:../../test/testmtx.c ****   (void)p;
 354:../../test/testmtx.c ****   chThdSleepMilliseconds(50);
 355:../../test/testmtx.c ****   chMtxLock(&m2);
 356:../../test/testmtx.c ****   chMtxUnlock();
 357:../../test/testmtx.c ****   return 0;
 358:../../test/testmtx.c **** }
 359:../../test/testmtx.c **** 
 360:../../test/testmtx.c **** static msg_t thread4b(void *p) {
 361:../../test/testmtx.c **** 
 362:../../test/testmtx.c ****   (void)p;
 363:../../test/testmtx.c ****   chThdSleepMilliseconds(150);
 364:../../test/testmtx.c ****   chMtxLock(&m1);
 365:../../test/testmtx.c ****   chMtxUnlock();
 366:../../test/testmtx.c ****   return 0;
 367:../../test/testmtx.c **** }
 368:../../test/testmtx.c **** 
 369:../../test/testmtx.c **** static void mtx4_execute(void) {
 370:../../test/testmtx.c ****   tprio_t p, p1, p2;
 371:../../test/testmtx.c **** 
 372:../../test/testmtx.c ****   p = chThdGetPriority();
 373:../../test/testmtx.c ****   p1 = p + 1;
 374:../../test/testmtx.c ****   p2 = p + 2;
 375:../../test/testmtx.c ****   threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "B");
 376:../../test/testmtx.c ****   threads[1] = chThdCreateStatic(wa[1], WA_SIZE, p2, thread4b, "A");
 377:../../test/testmtx.c ****   chMtxLock(&m2);
 378:../../test/testmtx.c ****   test_assert(1, chThdGetPriority() == p, "wrong priority level");
 379:../../test/testmtx.c ****   chThdSleepMilliseconds(100);
 380:../../test/testmtx.c ****   test_assert(2, chThdGetPriority() == p1, "wrong priority level");
 381:../../test/testmtx.c ****   chMtxLock(&m1);
 382:../../test/testmtx.c ****   test_assert(3, chThdGetPriority() == p1, "wrong priority level");
 383:../../test/testmtx.c ****   chThdSleepMilliseconds(100);
 384:../../test/testmtx.c ****   test_assert(4, chThdGetPriority() == p2, "wrong priority level");
 385:../../test/testmtx.c ****   chMtxUnlock();
 386:../../test/testmtx.c ****   test_assert(5, chThdGetPriority() == p1, "wrong priority level");
 387:../../test/testmtx.c ****   chThdSleepMilliseconds(100);
 388:../../test/testmtx.c ****   test_assert(6, chThdGetPriority() == p1, "wrong priority level");
 389:../../test/testmtx.c ****   chMtxUnlockAll();
 390:../../test/testmtx.c ****   test_assert(7, chThdGetPriority() == p, "wrong priority level");
 391:../../test/testmtx.c ****   test_wait_threads();
 392:../../test/testmtx.c **** 
 393:../../test/testmtx.c ****   /* Test repeated in order to cover chMtxUnlockS().*/
 394:../../test/testmtx.c ****   threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "D");
 395:../../test/testmtx.c ****   threads[1] = chThdCreateStatic(wa[1], WA_SIZE, p2, thread4b, "C");
 396:../../test/testmtx.c ****   chMtxLock(&m2);
 397:../../test/testmtx.c ****   test_assert(8, chThdGetPriority() == p, "wrong priority level");
 398:../../test/testmtx.c ****   chThdSleepMilliseconds(100);
 399:../../test/testmtx.c ****   test_assert(9, chThdGetPriority() == p1, "wrong priority level");
 400:../../test/testmtx.c ****   chMtxLock(&m1);
 401:../../test/testmtx.c ****   test_assert(10, chThdGetPriority() == p1, "wrong priority level");
 402:../../test/testmtx.c ****   chThdSleepMilliseconds(100);
 403:../../test/testmtx.c ****   test_assert(11, chThdGetPriority() == p2, "wrong priority level");
 404:../../test/testmtx.c ****   chSysLock();
 405:../../test/testmtx.c ****   chMtxUnlockS();
 406:../../test/testmtx.c ****   chSysUnlock();
 407:../../test/testmtx.c ****   test_assert(12, chThdGetPriority() == p1, "wrong priority level");
 408:../../test/testmtx.c ****   chThdSleepMilliseconds(100);
 409:../../test/testmtx.c ****   test_assert(13, chThdGetPriority() == p1, "wrong priority level");
 410:../../test/testmtx.c ****   chMtxUnlockAll();
 411:../../test/testmtx.c ****   test_assert(14, chThdGetPriority() == p, "wrong priority level");
 412:../../test/testmtx.c ****   test_wait_threads();
 413:../../test/testmtx.c **** }
 414:../../test/testmtx.c **** 
 415:../../test/testmtx.c **** ROMCONST struct testcase testmtx4 = {
 416:../../test/testmtx.c ****   "Mutexes, priority return",
 417:../../test/testmtx.c ****   mtx4_setup,
 418:../../test/testmtx.c ****   NULL,
 419:../../test/testmtx.c ****   mtx4_execute
 420:../../test/testmtx.c **** };
 421:../../test/testmtx.c **** 
 422:../../test/testmtx.c **** /**
 423:../../test/testmtx.c ****  * @page test_mtx_005 Mutex status
 424:../../test/testmtx.c ****  *
 425:../../test/testmtx.c ****  * <h2>Description</h2>
 426:../../test/testmtx.c ****  * Various tests on the mutex structure status after performing some lock and
 427:../../test/testmtx.c ****  * unlock operations.<br>
 428:../../test/testmtx.c ****  * The test expects that the internal mutex status is consistent after each
 429:../../test/testmtx.c ****  * operation.
 430:../../test/testmtx.c ****  */
 431:../../test/testmtx.c **** 
 432:../../test/testmtx.c **** static void mtx5_setup(void) {
 433:../../test/testmtx.c **** 
 434:../../test/testmtx.c ****   chMtxInit(&m1);
 435:../../test/testmtx.c **** }
 436:../../test/testmtx.c **** 
 437:../../test/testmtx.c **** static void mtx5_execute(void) {
 438:../../test/testmtx.c ****   bool_t b;
 439:../../test/testmtx.c ****   tprio_t prio;
 440:../../test/testmtx.c **** 
 441:../../test/testmtx.c ****   prio = chThdGetPriority();
 442:../../test/testmtx.c **** 
 443:../../test/testmtx.c ****   b = chMtxTryLock(&m1);
 444:../../test/testmtx.c ****   test_assert(1, b, "already locked");
 445:../../test/testmtx.c **** 
 446:../../test/testmtx.c ****   b = chMtxTryLock(&m1);
 447:../../test/testmtx.c ****   test_assert(2, !b, "not locked");
 448:../../test/testmtx.c **** 
 449:../../test/testmtx.c ****   chSysLock();
 450:../../test/testmtx.c ****   chMtxUnlockS();
 451:../../test/testmtx.c ****   chSysUnlock();
 452:../../test/testmtx.c **** 
 453:../../test/testmtx.c ****   test_assert(3, isempty(&m1.m_queue), "queue not empty");
 454:../../test/testmtx.c ****   test_assert(4, m1.m_owner == NULL, "still owned");
 455:../../test/testmtx.c ****   test_assert(5, chThdGetPriority() == prio, "wrong priority level");
 456:../../test/testmtx.c ****   
 457:../../test/testmtx.c ****   chMtxLock(&m1);
 458:../../test/testmtx.c ****   chMtxUnlockAll();
 459:../../test/testmtx.c ****   test_assert(6, isempty(&m1.m_queue), "queue not empty");
 460:../../test/testmtx.c ****   test_assert(7, m1.m_owner == NULL, "still owned");
 461:../../test/testmtx.c **** }
 462:../../test/testmtx.c **** 
 463:../../test/testmtx.c **** ROMCONST struct testcase testmtx5 = {
 464:../../test/testmtx.c ****   "Mutexes, status",
 465:../../test/testmtx.c ****   mtx5_setup,
 466:../../test/testmtx.c ****   NULL,
 467:../../test/testmtx.c ****   mtx5_execute
 468:../../test/testmtx.c **** };
 469:../../test/testmtx.c **** 
 470:../../test/testmtx.c **** #if CH_USE_CONDVARS || defined(__DOXYGEN__)
 471:../../test/testmtx.c **** /**
 472:../../test/testmtx.c ****  * @page test_mtx_006 Condition Variable signal test
 473:../../test/testmtx.c ****  *
 474:../../test/testmtx.c ****  * <h2>Description</h2>
 475:../../test/testmtx.c ****  * Five threads take a mutex and then enter a conditional variable queue, the
 476:../../test/testmtx.c ****  * tester thread then proceeds to signal the conditional variable five times
 477:../../test/testmtx.c ****  * atomically.<br>
 478:../../test/testmtx.c ****  * The test expects the threads to reach their goal in increasing priority
 479:../../test/testmtx.c ****  * order regardless of the initial order.
 480:../../test/testmtx.c ****  */
 481:../../test/testmtx.c **** 
 482:../../test/testmtx.c **** static void mtx6_setup(void) {
 483:../../test/testmtx.c **** 
 484:../../test/testmtx.c ****   chCondInit(&c1);
 485:../../test/testmtx.c ****   chMtxInit(&m1);
 486:../../test/testmtx.c **** }
 487:../../test/testmtx.c **** 
 488:../../test/testmtx.c **** static msg_t thread10(void *p) {
 489:../../test/testmtx.c **** 
 490:../../test/testmtx.c ****   chMtxLock(&m1);
 491:../../test/testmtx.c ****   chCondWait(&c1);
 492:../../test/testmtx.c ****   test_emit_token(*(char *)p);
 493:../../test/testmtx.c ****   chMtxUnlock();
 494:../../test/testmtx.c ****   return 0;
 495:../../test/testmtx.c **** }
 496:../../test/testmtx.c **** 
 497:../../test/testmtx.c **** static void mtx6_execute(void) {
 498:../../test/testmtx.c **** 
 499:../../test/testmtx.c ****   tprio_t prio = chThdGetPriority();
 500:../../test/testmtx.c ****   threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 501:../../test/testmtx.c ****   threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 502:../../test/testmtx.c ****   threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 503:../../test/testmtx.c ****   threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 504:../../test/testmtx.c ****   threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread10, "A");
 505:../../test/testmtx.c ****   chSysLock();
 506:../../test/testmtx.c ****   chCondSignalI(&c1);
 507:../../test/testmtx.c ****   chCondSignalI(&c1);
 508:../../test/testmtx.c ****   chCondSignalI(&c1);
 509:../../test/testmtx.c ****   chCondSignalI(&c1);
 510:../../test/testmtx.c ****   chCondSignalI(&c1);
 511:../../test/testmtx.c ****   chSchRescheduleS();
 512:../../test/testmtx.c ****   chSysUnlock();
 513:../../test/testmtx.c ****   test_wait_threads();
 514:../../test/testmtx.c ****   test_assert_sequence(1, "ABCDE");
 515:../../test/testmtx.c **** }
 516:../../test/testmtx.c **** 
 517:../../test/testmtx.c **** ROMCONST struct testcase testmtx6 = {
 518:../../test/testmtx.c ****   "CondVar, signal test",
 519:../../test/testmtx.c ****   mtx6_setup,
 520:../../test/testmtx.c ****   NULL,
 521:../../test/testmtx.c ****   mtx6_execute
 522:../../test/testmtx.c **** };
 523:../../test/testmtx.c **** 
 524:../../test/testmtx.c **** /**
 525:../../test/testmtx.c ****  * @page test_mtx_007 Condition Variable broadcast test
 526:../../test/testmtx.c ****  *
 527:../../test/testmtx.c ****  * <h2>Description</h2>
 528:../../test/testmtx.c ****  * Five threads take a mutex and then enter a conditional variable queue, the
 529:../../test/testmtx.c ****  * tester thread then proceeds to broadcast the conditional variable.<br>
 530:../../test/testmtx.c ****  * The test expects the threads to reach their goal in increasing priority
 531:../../test/testmtx.c ****  * order regardless of the initial order.
 532:../../test/testmtx.c ****  */
 533:../../test/testmtx.c **** 
 534:../../test/testmtx.c **** static void mtx7_setup(void) {
 535:../../test/testmtx.c **** 
 536:../../test/testmtx.c ****   chCondInit(&c1);
 537:../../test/testmtx.c ****   chMtxInit(&m1);
 538:../../test/testmtx.c **** }
 539:../../test/testmtx.c **** 
 540:../../test/testmtx.c **** static void mtx7_execute(void) {
 541:../../test/testmtx.c **** 
 542:../../test/testmtx.c ****   tprio_t prio = chThdGetPriority();
 543:../../test/testmtx.c ****   threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 544:../../test/testmtx.c ****   threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 545:../../test/testmtx.c ****   threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 546:../../test/testmtx.c ****   threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 547:../../test/testmtx.c ****   threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread10, "A");
 548:../../test/testmtx.c ****   chCondBroadcast(&c1);
 549:../../test/testmtx.c ****   test_wait_threads();
 550:../../test/testmtx.c ****   test_assert_sequence(1, "ABCDE");
 551:../../test/testmtx.c **** }
 552:../../test/testmtx.c **** 
 553:../../test/testmtx.c **** ROMCONST struct testcase testmtx7 = {
 554:../../test/testmtx.c ****   "CondVar, broadcast test",
 555:../../test/testmtx.c ****   mtx7_setup,
 556:../../test/testmtx.c ****   NULL,
 557:../../test/testmtx.c ****   mtx7_execute
 558:../../test/testmtx.c **** };
 559:../../test/testmtx.c **** 
 560:../../test/testmtx.c **** /**
 561:../../test/testmtx.c ****  * @page test_mtx_008 Condition Variable priority boost test
 562:../../test/testmtx.c ****  *
 563:../../test/testmtx.c ****  * <h2>Description</h2>
 564:../../test/testmtx.c ****  * This test case verifies the priority boost of a thread waiting on a
 565:../../test/testmtx.c ****  * conditional variable queue. It tests this very specific situation in order
 566:../../test/testmtx.c ****  * to complete the code coverage.
 567:../../test/testmtx.c ****  */
 568:../../test/testmtx.c **** 
 569:../../test/testmtx.c **** static void mtx8_setup(void) {
 570:../../test/testmtx.c **** 
 571:../../test/testmtx.c ****   chCondInit(&c1);
 572:../../test/testmtx.c ****   chMtxInit(&m1);
 573:../../test/testmtx.c ****   chMtxInit(&m2);
 574:../../test/testmtx.c **** }
 575:../../test/testmtx.c **** 
 576:../../test/testmtx.c **** static msg_t thread11(void *p) {
 577:../../test/testmtx.c **** 
 578:../../test/testmtx.c ****   chMtxLock(&m2);
 579:../../test/testmtx.c ****   chMtxLock(&m1);
 580:../../test/testmtx.c **** #if CH_USE_CONDVARS_TIMEOUT || defined(__DOXYGEN__)
 581:../../test/testmtx.c ****   chCondWaitTimeout(&c1, TIME_INFINITE);
 582:../../test/testmtx.c **** #else
 583:../../test/testmtx.c ****   chCondWait(&c1);
 584:../../test/testmtx.c **** #endif
 585:../../test/testmtx.c ****   test_emit_token(*(char *)p);
 586:../../test/testmtx.c ****   chMtxUnlock();
 587:../../test/testmtx.c ****   chMtxUnlock();
 588:../../test/testmtx.c ****   return 0;
 589:../../test/testmtx.c **** }
 590:../../test/testmtx.c **** 
 591:../../test/testmtx.c **** static msg_t thread12(void *p) {
 592:../../test/testmtx.c **** 
 593:../../test/testmtx.c ****   chMtxLock(&m2);
 594:../../test/testmtx.c ****   test_emit_token(*(char *)p);
 595:../../test/testmtx.c ****   chMtxUnlock();
 596:../../test/testmtx.c ****   return 0;
 597:../../test/testmtx.c **** }
 598:../../test/testmtx.c **** 
 599:../../test/testmtx.c **** static void mtx8_execute(void) {
  25               		.loc 1 599 0
  26               		.cfi_startproc
  27 0000 0F93      		push r16
  28               	.LCFI0:
  29               		.cfi_def_cfa_offset 3
  30               		.cfi_offset 16, -2
  31 0002 1F93      		push r17
  32               	.LCFI1:
  33               		.cfi_def_cfa_offset 4
  34               		.cfi_offset 17, -3
  35 0004 CF93      		push r28
  36               	.LCFI2:
  37               		.cfi_def_cfa_offset 5
  38               		.cfi_offset 28, -4
  39               	/* prologue: function */
  40               	/* frame size = 0 */
  41               	/* stack size = 3 */
  42               	.L__stack_usage = 3
 600:../../test/testmtx.c **** 
 601:../../test/testmtx.c ****   tprio_t prio = chThdGetPriority();
  43               		.loc 1 601 0
  44 0006 E091 0000 		lds r30,rlist+11
  45 000a F091 0000 		lds r31,rlist+11+1
  46 000e C481      		ldd r28,Z+4
  47               	.LVL0:
 602:../../test/testmtx.c ****   threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread11, "A");
  48               		.loc 1 602 0
  49 0010 4C2F      		mov r20,r28
  50 0012 4F5F      		subi r20,lo8(-(1))
  51 0014 00E0      		ldi r16,lo8(.LC0)
  52 0016 10E0      		ldi r17,hi8(.LC0)
  53 0018 20E0      		ldi r18,lo8(gs(thread11))
  54 001a 30E0      		ldi r19,hi8(gs(thread11))
  55 001c 67E9      		ldi r22,lo8(-105)
  56 001e 70E0      		ldi r23,0
  57 0020 8091 0000 		lds r24,wa
  58 0024 9091 0000 		lds r25,wa+1
  59 0028 0E94 0000 		call chThdCreateStatic
  60               	.LVL1:
  61 002c 9093 0000 		sts threads+1,r25
  62 0030 8093 0000 		sts threads,r24
 603:../../test/testmtx.c ****   threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "C");
  63               		.loc 1 603 0
  64 0034 4C2F      		mov r20,r28
  65 0036 4E5F      		subi r20,lo8(-(2))
  66 0038 00E0      		ldi r16,lo8(.LC1)
  67 003a 10E0      		ldi r17,hi8(.LC1)
  68 003c 20E0      		ldi r18,lo8(gs(thread10))
  69 003e 30E0      		ldi r19,hi8(gs(thread10))
  70 0040 67E9      		ldi r22,lo8(-105)
  71 0042 70E0      		ldi r23,0
  72 0044 8091 0000 		lds r24,wa+2
  73 0048 9091 0000 		lds r25,wa+2+1
  74 004c 0E94 0000 		call chThdCreateStatic
  75               	.LVL2:
  76 0050 9093 0000 		sts threads+2+1,r25
  77 0054 8093 0000 		sts threads+2,r24
 604:../../test/testmtx.c ****   threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread12, "B");
  78               		.loc 1 604 0
  79 0058 4C2F      		mov r20,r28
  80 005a 4D5F      		subi r20,lo8(-(3))
  81 005c 00E0      		ldi r16,lo8(.LC2)
  82 005e 10E0      		ldi r17,hi8(.LC2)
  83 0060 20E0      		ldi r18,lo8(gs(thread12))
  84 0062 30E0      		ldi r19,hi8(gs(thread12))
  85 0064 67E9      		ldi r22,lo8(-105)
  86 0066 70E0      		ldi r23,0
  87 0068 8091 0000 		lds r24,wa+4
  88 006c 9091 0000 		lds r25,wa+4+1
  89 0070 0E94 0000 		call chThdCreateStatic
  90               	.LVL3:
  91 0074 9093 0000 		sts threads+4+1,r25
  92 0078 8093 0000 		sts threads+4,r24
 605:../../test/testmtx.c ****   chCondSignal(&c1);
  93               		.loc 1 605 0
  94 007c 80E0      		ldi r24,lo8(c1)
  95 007e 90E0      		ldi r25,hi8(c1)
  96 0080 0E94 0000 		call chCondSignal
  97               	.LVL4:
 606:../../test/testmtx.c ****   chCondSignal(&c1);
  98               		.loc 1 606 0
  99 0084 80E0      		ldi r24,lo8(c1)
 100 0086 90E0      		ldi r25,hi8(c1)
 101 0088 0E94 0000 		call chCondSignal
 102               	.LVL5:
 607:../../test/testmtx.c ****   test_wait_threads();
 103               		.loc 1 607 0
 104 008c 0E94 0000 		call test_wait_threads
 105               	.LVL6:
 608:../../test/testmtx.c ****   test_assert_sequence(1, "ABC");
 106               		.loc 1 608 0
 107 0090 60E0      		ldi r22,lo8(.LC3)
 108 0092 70E0      		ldi r23,hi8(.LC3)
 109 0094 81E0      		ldi r24,lo8(1)
 110 0096 90E0      		ldi r25,0
 111               	/* epilogue start */
 609:../../test/testmtx.c **** }
 112               		.loc 1 609 0
 113 0098 CF91      		pop r28
 114               	.LVL7:
 115 009a 1F91      		pop r17
 116 009c 0F91      		pop r16
 608:../../test/testmtx.c ****   test_assert_sequence(1, "ABC");
 117               		.loc 1 608 0
 118 009e 0C94 0000 		jmp _test_assert_sequence
 119               	.LVL8:
 120               		.cfi_endproc
 121               	.LFE36:
 124               	thread12:
 125               	.LFB35:
 591:../../test/testmtx.c **** static msg_t thread12(void *p) {
 126               		.loc 1 591 0
 127               		.cfi_startproc
 128               	.LVL9:
 129 00a2 CF93      		push r28
 130               	.LCFI3:
 131               		.cfi_def_cfa_offset 3
 132               		.cfi_offset 28, -2
 133 00a4 DF93      		push r29
 134               	.LCFI4:
 135               		.cfi_def_cfa_offset 4
 136               		.cfi_offset 29, -3
 137               	/* prologue: function */
 138               	/* frame size = 0 */
 139               	/* stack size = 2 */
 140               	.L__stack_usage = 2
 141 00a6 EC01      		movw r28,r24
 593:../../test/testmtx.c ****   chMtxLock(&m2);
 142               		.loc 1 593 0
 143 00a8 80E0      		ldi r24,lo8(m2)
 144 00aa 90E0      		ldi r25,hi8(m2)
 145               	.LVL10:
 146 00ac 0E94 0000 		call chMtxLock
 147               	.LVL11:
 594:../../test/testmtx.c ****   test_emit_token(*(char *)p);
 148               		.loc 1 594 0
 149 00b0 8881      		ld r24,Y
 150 00b2 0E94 0000 		call test_emit_token
 151               	.LVL12:
 595:../../test/testmtx.c ****   chMtxUnlock();
 152               		.loc 1 595 0
 153 00b6 0E94 0000 		call chMtxUnlock
 154               	.LVL13:
 597:../../test/testmtx.c **** }
 155               		.loc 1 597 0
 156 00ba 80E0      		ldi r24,0
 157 00bc 90E0      		ldi r25,0
 158               	/* epilogue start */
 159 00be DF91      		pop r29
 160 00c0 CF91      		pop r28
 161               	.LVL14:
 162 00c2 0895      		ret
 163               		.cfi_endproc
 164               	.LFE35:
 167               	thread1:
 168               	.LFB8:
  93:../../test/testmtx.c **** static msg_t thread1(void *p) {
 169               		.loc 1 93 0
 170               		.cfi_startproc
 171               	.LVL15:
 172 00c4 CF93      		push r28
 173               	.LCFI5:
 174               		.cfi_def_cfa_offset 3
 175               		.cfi_offset 28, -2
 176 00c6 DF93      		push r29
 177               	.LCFI6:
 178               		.cfi_def_cfa_offset 4
 179               		.cfi_offset 29, -3
 180               	/* prologue: function */
 181               	/* frame size = 0 */
 182               	/* stack size = 2 */
 183               	.L__stack_usage = 2
 184 00c8 EC01      		movw r28,r24
  95:../../test/testmtx.c ****   chMtxLock(&m1);
 185               		.loc 1 95 0
 186 00ca 80E0      		ldi r24,lo8(m1)
 187 00cc 90E0      		ldi r25,hi8(m1)
 188               	.LVL16:
 189 00ce 0E94 0000 		call chMtxLock
 190               	.LVL17:
  96:../../test/testmtx.c ****   test_emit_token(*(char *)p);
 191               		.loc 1 96 0
 192 00d2 8881      		ld r24,Y
 193 00d4 0E94 0000 		call test_emit_token
 194               	.LVL18:
  97:../../test/testmtx.c ****   chMtxUnlock();
 195               		.loc 1 97 0
 196 00d8 0E94 0000 		call chMtxUnlock
 197               	.LVL19:
  99:../../test/testmtx.c **** }
 198               		.loc 1 99 0
 199 00dc 80E0      		ldi r24,0
 200 00de 90E0      		ldi r25,0
 201               	/* epilogue start */
 202 00e0 DF91      		pop r29
 203 00e2 CF91      		pop r28
 204               	.LVL20:
 205 00e4 0895      		ret
 206               		.cfi_endproc
 207               	.LFE8:
 210               	thread10:
 211               	.LFB29:
 488:../../test/testmtx.c **** static msg_t thread10(void *p) {
 212               		.loc 1 488 0
 213               		.cfi_startproc
 214               	.LVL21:
 215 00e6 CF93      		push r28
 216               	.LCFI7:
 217               		.cfi_def_cfa_offset 3
 218               		.cfi_offset 28, -2
 219 00e8 DF93      		push r29
 220               	.LCFI8:
 221               		.cfi_def_cfa_offset 4
 222               		.cfi_offset 29, -3
 223               	/* prologue: function */
 224               	/* frame size = 0 */
 225               	/* stack size = 2 */
 226               	.L__stack_usage = 2
 227 00ea EC01      		movw r28,r24
 490:../../test/testmtx.c ****   chMtxLock(&m1);
 228               		.loc 1 490 0
 229 00ec 80E0      		ldi r24,lo8(m1)
 230 00ee 90E0      		ldi r25,hi8(m1)
 231               	.LVL22:
 232 00f0 0E94 0000 		call chMtxLock
 233               	.LVL23:
 491:../../test/testmtx.c ****   chCondWait(&c1);
 234               		.loc 1 491 0
 235 00f4 80E0      		ldi r24,lo8(c1)
 236 00f6 90E0      		ldi r25,hi8(c1)
 237 00f8 0E94 0000 		call chCondWait
 238               	.LVL24:
 492:../../test/testmtx.c ****   test_emit_token(*(char *)p);
 239               		.loc 1 492 0
 240 00fc 8881      		ld r24,Y
 241 00fe 0E94 0000 		call test_emit_token
 242               	.LVL25:
 493:../../test/testmtx.c ****   chMtxUnlock();
 243               		.loc 1 493 0
 244 0102 0E94 0000 		call chMtxUnlock
 245               	.LVL26:
 495:../../test/testmtx.c **** }
 246               		.loc 1 495 0
 247 0106 80E0      		ldi r24,0
 248 0108 90E0      		ldi r25,0
 249               	/* epilogue start */
 250 010a DF91      		pop r29
 251 010c CF91      		pop r28
 252               	.LVL27:
 253 010e 0895      		ret
 254               		.cfi_endproc
 255               	.LFE29:
 258               	thread11:
 259               	.LFB34:
 576:../../test/testmtx.c **** static msg_t thread11(void *p) {
 260               		.loc 1 576 0
 261               		.cfi_startproc
 262               	.LVL28:
 263 0110 CF93      		push r28
 264               	.LCFI9:
 265               		.cfi_def_cfa_offset 3
 266               		.cfi_offset 28, -2
 267 0112 DF93      		push r29
 268               	.LCFI10:
 269               		.cfi_def_cfa_offset 4
 270               		.cfi_offset 29, -3
 271               	/* prologue: function */
 272               	/* frame size = 0 */
 273               	/* stack size = 2 */
 274               	.L__stack_usage = 2
 275 0114 EC01      		movw r28,r24
 578:../../test/testmtx.c ****   chMtxLock(&m2);
 276               		.loc 1 578 0
 277 0116 80E0      		ldi r24,lo8(m2)
 278 0118 90E0      		ldi r25,hi8(m2)
 279               	.LVL29:
 280 011a 0E94 0000 		call chMtxLock
 281               	.LVL30:
 579:../../test/testmtx.c ****   chMtxLock(&m1);
 282               		.loc 1 579 0
 283 011e 80E0      		ldi r24,lo8(m1)
 284 0120 90E0      		ldi r25,hi8(m1)
 285 0122 0E94 0000 		call chMtxLock
 286               	.LVL31:
 581:../../test/testmtx.c ****   chCondWaitTimeout(&c1, TIME_INFINITE);
 287               		.loc 1 581 0
 288 0126 6FEF      		ldi r22,lo8(-1)
 289 0128 7FEF      		ldi r23,lo8(-1)
 290 012a 80E0      		ldi r24,lo8(c1)
 291 012c 90E0      		ldi r25,hi8(c1)
 292 012e 0E94 0000 		call chCondWaitTimeout
 293               	.LVL32:
 585:../../test/testmtx.c ****   test_emit_token(*(char *)p);
 294               		.loc 1 585 0
 295 0132 8881      		ld r24,Y
 296 0134 0E94 0000 		call test_emit_token
 297               	.LVL33:
 586:../../test/testmtx.c ****   chMtxUnlock();
 298               		.loc 1 586 0
 299 0138 0E94 0000 		call chMtxUnlock
 300               	.LVL34:
 587:../../test/testmtx.c ****   chMtxUnlock();
 301               		.loc 1 587 0
 302 013c 0E94 0000 		call chMtxUnlock
 303               	.LVL35:
 589:../../test/testmtx.c **** }
 304               		.loc 1 589 0
 305 0140 80E0      		ldi r24,0
 306 0142 90E0      		ldi r25,0
 307               	/* epilogue start */
 308 0144 DF91      		pop r29
 309 0146 CF91      		pop r28
 310               	.LVL36:
 311 0148 0895      		ret
 312               		.cfi_endproc
 313               	.LFE34:
 316               	mtx8_setup:
 317               	.LFB33:
 569:../../test/testmtx.c **** static void mtx8_setup(void) {
 318               		.loc 1 569 0
 319               		.cfi_startproc
 320               	/* prologue: function */
 321               	/* frame size = 0 */
 322               	/* stack size = 0 */
 323               	.L__stack_usage = 0
 571:../../test/testmtx.c ****   chCondInit(&c1);
 324               		.loc 1 571 0
 325 014a 80E0      		ldi r24,lo8(c1)
 326 014c 90E0      		ldi r25,hi8(c1)
 327 014e 0E94 0000 		call chCondInit
 328               	.LVL37:
 572:../../test/testmtx.c ****   chMtxInit(&m1);
 329               		.loc 1 572 0
 330 0152 80E0      		ldi r24,lo8(m1)
 331 0154 90E0      		ldi r25,hi8(m1)
 332 0156 0E94 0000 		call chMtxInit
 333               	.LVL38:
 573:../../test/testmtx.c ****   chMtxInit(&m2);
 334               		.loc 1 573 0
 335 015a 80E0      		ldi r24,lo8(m2)
 336 015c 90E0      		ldi r25,hi8(m2)
 337 015e 0C94 0000 		jmp chMtxInit
 338               	.LVL39:
 339               		.cfi_endproc
 340               	.LFE33:
 343               	mtx7_setup:
 344               	.LFB31:
 534:../../test/testmtx.c **** static void mtx7_setup(void) {
 345               		.loc 1 534 0
 346               		.cfi_startproc
 347               	/* prologue: function */
 348               	/* frame size = 0 */
 349               	/* stack size = 0 */
 350               	.L__stack_usage = 0
 536:../../test/testmtx.c ****   chCondInit(&c1);
 351               		.loc 1 536 0
 352 0162 80E0      		ldi r24,lo8(c1)
 353 0164 90E0      		ldi r25,hi8(c1)
 354 0166 0E94 0000 		call chCondInit
 355               	.LVL40:
 537:../../test/testmtx.c ****   chMtxInit(&m1);
 356               		.loc 1 537 0
 357 016a 80E0      		ldi r24,lo8(m1)
 358 016c 90E0      		ldi r25,hi8(m1)
 359 016e 0C94 0000 		jmp chMtxInit
 360               	.LVL41:
 361               		.cfi_endproc
 362               	.LFE31:
 365               	mtx6_setup:
 366               	.LFB28:
 482:../../test/testmtx.c **** static void mtx6_setup(void) {
 367               		.loc 1 482 0
 368               		.cfi_startproc
 369               	/* prologue: function */
 370               	/* frame size = 0 */
 371               	/* stack size = 0 */
 372               	.L__stack_usage = 0
 484:../../test/testmtx.c ****   chCondInit(&c1);
 373               		.loc 1 484 0
 374 0172 80E0      		ldi r24,lo8(c1)
 375 0174 90E0      		ldi r25,hi8(c1)
 376 0176 0E94 0000 		call chCondInit
 377               	.LVL42:
 485:../../test/testmtx.c ****   chMtxInit(&m1);
 378               		.loc 1 485 0
 379 017a 80E0      		ldi r24,lo8(m1)
 380 017c 90E0      		ldi r25,hi8(m1)
 381 017e 0C94 0000 		jmp chMtxInit
 382               	.LVL43:
 383               		.cfi_endproc
 384               	.LFE28:
 387               	mtx5_setup:
 388               	.LFB26:
 432:../../test/testmtx.c **** static void mtx5_setup(void) {
 389               		.loc 1 432 0
 390               		.cfi_startproc
 391               	/* prologue: function */
 392               	/* frame size = 0 */
 393               	/* stack size = 0 */
 394               	.L__stack_usage = 0
 434:../../test/testmtx.c ****   chMtxInit(&m1);
 395               		.loc 1 434 0
 396 0182 80E0      		ldi r24,lo8(m1)
 397 0184 90E0      		ldi r25,hi8(m1)
 398 0186 0C94 0000 		jmp chMtxInit
 399               	.LVL44:
 400               		.cfi_endproc
 401               	.LFE26:
 404               	mtx4_setup:
 405               	.LFB22:
 345:../../test/testmtx.c **** static void mtx4_setup(void) {
 406               		.loc 1 345 0
 407               		.cfi_startproc
 408               	/* prologue: function */
 409               	/* frame size = 0 */
 410               	/* stack size = 0 */
 411               	.L__stack_usage = 0
 347:../../test/testmtx.c ****   chMtxInit(&m1);
 412               		.loc 1 347 0
 413 018a 80E0      		ldi r24,lo8(m1)
 414 018c 90E0      		ldi r25,hi8(m1)
 415 018e 0E94 0000 		call chMtxInit
 416               	.LVL45:
 348:../../test/testmtx.c ****   chMtxInit(&m2);
 417               		.loc 1 348 0
 418 0192 80E0      		ldi r24,lo8(m2)
 419 0194 90E0      		ldi r25,hi8(m2)
 420 0196 0C94 0000 		jmp chMtxInit
 421               	.LVL46:
 422               		.cfi_endproc
 423               	.LFE22:
 426               	mtx3_setup:
 427               	.LFB15:
 245:../../test/testmtx.c **** static void mtx3_setup(void) {
 428               		.loc 1 245 0
 429               		.cfi_startproc
 430               	/* prologue: function */
 431               	/* frame size = 0 */
 432               	/* stack size = 0 */
 433               	.L__stack_usage = 0
 247:../../test/testmtx.c ****   chMtxInit(&m1); /* Mutex B.*/
 434               		.loc 1 247 0
 435 019a 80E0      		ldi r24,lo8(m1)
 436 019c 90E0      		ldi r25,hi8(m1)
 437 019e 0E94 0000 		call chMtxInit
 438               	.LVL47:
 248:../../test/testmtx.c ****   chMtxInit(&m2); /* Mutex A.*/
 439               		.loc 1 248 0
 440 01a2 80E0      		ldi r24,lo8(m2)
 441 01a4 90E0      		ldi r25,hi8(m2)
 442 01a6 0C94 0000 		jmp chMtxInit
 443               	.LVL48:
 444               		.cfi_endproc
 445               	.LFE15:
 448               	mtx2_setup:
 449               	.LFB10:
 155:../../test/testmtx.c **** static void mtx2_setup(void) {
 450               		.loc 1 155 0
 451               		.cfi_startproc
 452               	/* prologue: function */
 453               	/* frame size = 0 */
 454               	/* stack size = 0 */
 455               	.L__stack_usage = 0
 157:../../test/testmtx.c ****   chMtxInit(&m1);
 456               		.loc 1 157 0
 457 01aa 80E0      		ldi r24,lo8(m1)
 458 01ac 90E0      		ldi r25,hi8(m1)
 459 01ae 0C94 0000 		jmp chMtxInit
 460               	.LVL49:
 461               		.cfi_endproc
 462               	.LFE10:
 465               	mtx1_setup:
 466               	.LFB7:
  88:../../test/testmtx.c **** static void mtx1_setup(void) {
 467               		.loc 1 88 0
 468               		.cfi_startproc
 469               	/* prologue: function */
 470               	/* frame size = 0 */
 471               	/* stack size = 0 */
 472               	.L__stack_usage = 0
  90:../../test/testmtx.c ****   chMtxInit(&m1);
 473               		.loc 1 90 0
 474 01b2 80E0      		ldi r24,lo8(m1)
 475 01b4 90E0      		ldi r25,hi8(m1)
 476 01b6 0C94 0000 		jmp chMtxInit
 477               	.LVL50:
 478               		.cfi_endproc
 479               	.LFE7:
 481               		.section	.rodata.str1.1
 482               	.LC4:
 483 000a 4500      		.string	"E"
 484               	.LC5:
 485 000c 4400      		.string	"D"
 486               	.LC6:
 487 000e 4142 4344 		.string	"ABCDE"
 487      4500 
 488               		.text
 490               	mtx7_execute:
 491               	.LFB32:
 540:../../test/testmtx.c **** static void mtx7_execute(void) {
 492               		.loc 1 540 0
 493               		.cfi_startproc
 494 01ba 0F93      		push r16
 495               	.LCFI11:
 496               		.cfi_def_cfa_offset 3
 497               		.cfi_offset 16, -2
 498 01bc 1F93      		push r17
 499               	.LCFI12:
 500               		.cfi_def_cfa_offset 4
 501               		.cfi_offset 17, -3
 502 01be CF93      		push r28
 503               	.LCFI13:
 504               		.cfi_def_cfa_offset 5
 505               		.cfi_offset 28, -4
 506               	/* prologue: function */
 507               	/* frame size = 0 */
 508               	/* stack size = 3 */
 509               	.L__stack_usage = 3
 542:../../test/testmtx.c ****   tprio_t prio = chThdGetPriority();
 510               		.loc 1 542 0
 511 01c0 E091 0000 		lds r30,rlist+11
 512 01c4 F091 0000 		lds r31,rlist+11+1
 513 01c8 C481      		ldd r28,Z+4
 514               	.LVL51:
 543:../../test/testmtx.c ****   threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 515               		.loc 1 543 0
 516 01ca 4C2F      		mov r20,r28
 517 01cc 4F5F      		subi r20,lo8(-(1))
 518 01ce 00E0      		ldi r16,lo8(.LC4)
 519 01d0 10E0      		ldi r17,hi8(.LC4)
 520 01d2 20E0      		ldi r18,lo8(gs(thread10))
 521 01d4 30E0      		ldi r19,hi8(gs(thread10))
 522 01d6 67E9      		ldi r22,lo8(-105)
 523 01d8 70E0      		ldi r23,0
 524 01da 8091 0000 		lds r24,wa
 525 01de 9091 0000 		lds r25,wa+1
 526 01e2 0E94 0000 		call chThdCreateStatic
 527               	.LVL52:
 528 01e6 9093 0000 		sts threads+1,r25
 529 01ea 8093 0000 		sts threads,r24
 544:../../test/testmtx.c ****   threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 530               		.loc 1 544 0
 531 01ee 4C2F      		mov r20,r28
 532 01f0 4E5F      		subi r20,lo8(-(2))
 533 01f2 00E0      		ldi r16,lo8(.LC5)
 534 01f4 10E0      		ldi r17,hi8(.LC5)
 535 01f6 20E0      		ldi r18,lo8(gs(thread10))
 536 01f8 30E0      		ldi r19,hi8(gs(thread10))
 537 01fa 67E9      		ldi r22,lo8(-105)
 538 01fc 70E0      		ldi r23,0
 539 01fe 8091 0000 		lds r24,wa+2
 540 0202 9091 0000 		lds r25,wa+2+1
 541 0206 0E94 0000 		call chThdCreateStatic
 542               	.LVL53:
 543 020a 9093 0000 		sts threads+2+1,r25
 544 020e 8093 0000 		sts threads+2,r24
 545:../../test/testmtx.c ****   threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 545               		.loc 1 545 0
 546 0212 4C2F      		mov r20,r28
 547 0214 4D5F      		subi r20,lo8(-(3))
 548 0216 00E0      		ldi r16,lo8(.LC1)
 549 0218 10E0      		ldi r17,hi8(.LC1)
 550 021a 20E0      		ldi r18,lo8(gs(thread10))
 551 021c 30E0      		ldi r19,hi8(gs(thread10))
 552 021e 67E9      		ldi r22,lo8(-105)
 553 0220 70E0      		ldi r23,0
 554 0222 8091 0000 		lds r24,wa+4
 555 0226 9091 0000 		lds r25,wa+4+1
 556 022a 0E94 0000 		call chThdCreateStatic
 557               	.LVL54:
 558 022e 9093 0000 		sts threads+4+1,r25
 559 0232 8093 0000 		sts threads+4,r24
 546:../../test/testmtx.c ****   threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 560               		.loc 1 546 0
 561 0236 4C2F      		mov r20,r28
 562 0238 4C5F      		subi r20,lo8(-(4))
 563 023a 00E0      		ldi r16,lo8(.LC2)
 564 023c 10E0      		ldi r17,hi8(.LC2)
 565 023e 20E0      		ldi r18,lo8(gs(thread10))
 566 0240 30E0      		ldi r19,hi8(gs(thread10))
 567 0242 67E9      		ldi r22,lo8(-105)
 568 0244 70E0      		ldi r23,0
 569 0246 8091 0000 		lds r24,wa+6
 570 024a 9091 0000 		lds r25,wa+6+1
 571 024e 0E94 0000 		call chThdCreateStatic
 572               	.LVL55:
 573 0252 9093 0000 		sts threads+6+1,r25
 574 0256 8093 0000 		sts threads+6,r24
 547:../../test/testmtx.c ****   threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread10, "A");
 575               		.loc 1 547 0
 576 025a 4C2F      		mov r20,r28
 577 025c 4B5F      		subi r20,lo8(-(5))
 578 025e 00E0      		ldi r16,lo8(.LC0)
 579 0260 10E0      		ldi r17,hi8(.LC0)
 580 0262 20E0      		ldi r18,lo8(gs(thread10))
 581 0264 30E0      		ldi r19,hi8(gs(thread10))
 582 0266 67E9      		ldi r22,lo8(-105)
 583 0268 70E0      		ldi r23,0
 584 026a 8091 0000 		lds r24,wa+8
 585 026e 9091 0000 		lds r25,wa+8+1
 586 0272 0E94 0000 		call chThdCreateStatic
 587               	.LVL56:
 588 0276 9093 0000 		sts threads+8+1,r25
 589 027a 8093 0000 		sts threads+8,r24
 548:../../test/testmtx.c ****   chCondBroadcast(&c1);
 590               		.loc 1 548 0
 591 027e 80E0      		ldi r24,lo8(c1)
 592 0280 90E0      		ldi r25,hi8(c1)
 593 0282 0E94 0000 		call chCondBroadcast
 594               	.LVL57:
 549:../../test/testmtx.c ****   test_wait_threads();
 595               		.loc 1 549 0
 596 0286 0E94 0000 		call test_wait_threads
 597               	.LVL58:
 550:../../test/testmtx.c ****   test_assert_sequence(1, "ABCDE");
 598               		.loc 1 550 0
 599 028a 60E0      		ldi r22,lo8(.LC6)
 600 028c 70E0      		ldi r23,hi8(.LC6)
 601 028e 81E0      		ldi r24,lo8(1)
 602 0290 90E0      		ldi r25,0
 603               	/* epilogue start */
 551:../../test/testmtx.c **** }
 604               		.loc 1 551 0
 605 0292 CF91      		pop r28
 606               	.LVL59:
 607 0294 1F91      		pop r17
 608 0296 0F91      		pop r16
 550:../../test/testmtx.c ****   test_assert_sequence(1, "ABCDE");
 609               		.loc 1 550 0
 610 0298 0C94 0000 		jmp _test_assert_sequence
 611               	.LVL60:
 612               		.cfi_endproc
 613               	.LFE32:
 616               	mtx6_execute:
 617               	.LFB30:
 497:../../test/testmtx.c **** static void mtx6_execute(void) {
 618               		.loc 1 497 0
 619               		.cfi_startproc
 620 029c 0F93      		push r16
 621               	.LCFI14:
 622               		.cfi_def_cfa_offset 3
 623               		.cfi_offset 16, -2
 624 029e 1F93      		push r17
 625               	.LCFI15:
 626               		.cfi_def_cfa_offset 4
 627               		.cfi_offset 17, -3
 628 02a0 CF93      		push r28
 629               	.LCFI16:
 630               		.cfi_def_cfa_offset 5
 631               		.cfi_offset 28, -4
 632               	/* prologue: function */
 633               	/* frame size = 0 */
 634               	/* stack size = 3 */
 635               	.L__stack_usage = 3
 499:../../test/testmtx.c ****   tprio_t prio = chThdGetPriority();
 636               		.loc 1 499 0
 637 02a2 E091 0000 		lds r30,rlist+11
 638 02a6 F091 0000 		lds r31,rlist+11+1
 639 02aa C481      		ldd r28,Z+4
 640               	.LVL61:
 500:../../test/testmtx.c ****   threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 641               		.loc 1 500 0
 642 02ac 4C2F      		mov r20,r28
 643 02ae 4F5F      		subi r20,lo8(-(1))
 644 02b0 00E0      		ldi r16,lo8(.LC4)
 645 02b2 10E0      		ldi r17,hi8(.LC4)
 646 02b4 20E0      		ldi r18,lo8(gs(thread10))
 647 02b6 30E0      		ldi r19,hi8(gs(thread10))
 648 02b8 67E9      		ldi r22,lo8(-105)
 649 02ba 70E0      		ldi r23,0
 650 02bc 8091 0000 		lds r24,wa
 651 02c0 9091 0000 		lds r25,wa+1
 652 02c4 0E94 0000 		call chThdCreateStatic
 653               	.LVL62:
 654 02c8 9093 0000 		sts threads+1,r25
 655 02cc 8093 0000 		sts threads,r24
 501:../../test/testmtx.c ****   threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 656               		.loc 1 501 0
 657 02d0 4C2F      		mov r20,r28
 658 02d2 4E5F      		subi r20,lo8(-(2))
 659 02d4 00E0      		ldi r16,lo8(.LC5)
 660 02d6 10E0      		ldi r17,hi8(.LC5)
 661 02d8 20E0      		ldi r18,lo8(gs(thread10))
 662 02da 30E0      		ldi r19,hi8(gs(thread10))
 663 02dc 67E9      		ldi r22,lo8(-105)
 664 02de 70E0      		ldi r23,0
 665 02e0 8091 0000 		lds r24,wa+2
 666 02e4 9091 0000 		lds r25,wa+2+1
 667 02e8 0E94 0000 		call chThdCreateStatic
 668               	.LVL63:
 669 02ec 9093 0000 		sts threads+2+1,r25
 670 02f0 8093 0000 		sts threads+2,r24
 502:../../test/testmtx.c ****   threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 671               		.loc 1 502 0
 672 02f4 4C2F      		mov r20,r28
 673 02f6 4D5F      		subi r20,lo8(-(3))
 674 02f8 00E0      		ldi r16,lo8(.LC1)
 675 02fa 10E0      		ldi r17,hi8(.LC1)
 676 02fc 20E0      		ldi r18,lo8(gs(thread10))
 677 02fe 30E0      		ldi r19,hi8(gs(thread10))
 678 0300 67E9      		ldi r22,lo8(-105)
 679 0302 70E0      		ldi r23,0
 680 0304 8091 0000 		lds r24,wa+4
 681 0308 9091 0000 		lds r25,wa+4+1
 682 030c 0E94 0000 		call chThdCreateStatic
 683               	.LVL64:
 684 0310 9093 0000 		sts threads+4+1,r25
 685 0314 8093 0000 		sts threads+4,r24
 503:../../test/testmtx.c ****   threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 686               		.loc 1 503 0
 687 0318 4C2F      		mov r20,r28
 688 031a 4C5F      		subi r20,lo8(-(4))
 689 031c 00E0      		ldi r16,lo8(.LC2)
 690 031e 10E0      		ldi r17,hi8(.LC2)
 691 0320 20E0      		ldi r18,lo8(gs(thread10))
 692 0322 30E0      		ldi r19,hi8(gs(thread10))
 693 0324 67E9      		ldi r22,lo8(-105)
 694 0326 70E0      		ldi r23,0
 695 0328 8091 0000 		lds r24,wa+6
 696 032c 9091 0000 		lds r25,wa+6+1
 697 0330 0E94 0000 		call chThdCreateStatic
 698               	.LVL65:
 699 0334 9093 0000 		sts threads+6+1,r25
 700 0338 8093 0000 		sts threads+6,r24
 504:../../test/testmtx.c ****   threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread10, "A");
 701               		.loc 1 504 0
 702 033c 4C2F      		mov r20,r28
 703 033e 4B5F      		subi r20,lo8(-(5))
 704 0340 00E0      		ldi r16,lo8(.LC0)
 705 0342 10E0      		ldi r17,hi8(.LC0)
 706 0344 20E0      		ldi r18,lo8(gs(thread10))
 707 0346 30E0      		ldi r19,hi8(gs(thread10))
 708 0348 67E9      		ldi r22,lo8(-105)
 709 034a 70E0      		ldi r23,0
 710 034c 8091 0000 		lds r24,wa+8
 711 0350 9091 0000 		lds r25,wa+8+1
 712 0354 0E94 0000 		call chThdCreateStatic
 713               	.LVL66:
 714 0358 9093 0000 		sts threads+8+1,r25
 715 035c 8093 0000 		sts threads+8,r24
 505:../../test/testmtx.c ****   chSysLock();
 716               		.loc 1 505 0
 717               	/* #APP */
 718               	 ;  505 "../../test/testmtx.c" 1
 719 0360 F894      		cli
 720               	 ;  0 "" 2
 506:../../test/testmtx.c ****   chCondSignalI(&c1);
 721               		.loc 1 506 0
 722               	/* #NOAPP */
 723 0362 80E0      		ldi r24,lo8(c1)
 724 0364 90E0      		ldi r25,hi8(c1)
 725 0366 0E94 0000 		call chCondSignalI
 726               	.LVL67:
 507:../../test/testmtx.c ****   chCondSignalI(&c1);
 727               		.loc 1 507 0
 728 036a 80E0      		ldi r24,lo8(c1)
 729 036c 90E0      		ldi r25,hi8(c1)
 730 036e 0E94 0000 		call chCondSignalI
 731               	.LVL68:
 508:../../test/testmtx.c ****   chCondSignalI(&c1);
 732               		.loc 1 508 0
 733 0372 80E0      		ldi r24,lo8(c1)
 734 0374 90E0      		ldi r25,hi8(c1)
 735 0376 0E94 0000 		call chCondSignalI
 736               	.LVL69:
 509:../../test/testmtx.c ****   chCondSignalI(&c1);
 737               		.loc 1 509 0
 738 037a 80E0      		ldi r24,lo8(c1)
 739 037c 90E0      		ldi r25,hi8(c1)
 740 037e 0E94 0000 		call chCondSignalI
 741               	.LVL70:
 510:../../test/testmtx.c ****   chCondSignalI(&c1);
 742               		.loc 1 510 0
 743 0382 80E0      		ldi r24,lo8(c1)
 744 0384 90E0      		ldi r25,hi8(c1)
 745 0386 0E94 0000 		call chCondSignalI
 746               	.LVL71:
 511:../../test/testmtx.c ****   chSchRescheduleS();
 747               		.loc 1 511 0
 748 038a 0E94 0000 		call chSchRescheduleS
 749               	.LVL72:
 512:../../test/testmtx.c ****   chSysUnlock();
 750               		.loc 1 512 0
 751               	/* #APP */
 752               	 ;  512 "../../test/testmtx.c" 1
 753 038e 7894      		sei
 754               	 ;  0 "" 2
 513:../../test/testmtx.c ****   test_wait_threads();
 755               		.loc 1 513 0
 756               	/* #NOAPP */
 757 0390 0E94 0000 		call test_wait_threads
 758               	.LVL73:
 514:../../test/testmtx.c ****   test_assert_sequence(1, "ABCDE");
 759               		.loc 1 514 0
 760 0394 60E0      		ldi r22,lo8(.LC6)
 761 0396 70E0      		ldi r23,hi8(.LC6)
 762 0398 81E0      		ldi r24,lo8(1)
 763 039a 90E0      		ldi r25,0
 764               	/* epilogue start */
 515:../../test/testmtx.c **** }
 765               		.loc 1 515 0
 766 039c CF91      		pop r28
 767               	.LVL74:
 768 039e 1F91      		pop r17
 769 03a0 0F91      		pop r16
 514:../../test/testmtx.c ****   test_assert_sequence(1, "ABCDE");
 770               		.loc 1 514 0
 771 03a2 0C94 0000 		jmp _test_assert_sequence
 772               	.LVL75:
 773               		.cfi_endproc
 774               	.LFE30:
 777               	mtx1_execute:
 778               	.LFB9:
 101:../../test/testmtx.c **** static void mtx1_execute(void) {
 779               		.loc 1 101 0
 780               		.cfi_startproc
 781 03a6 0F93      		push r16
 782               	.LCFI17:
 783               		.cfi_def_cfa_offset 3
 784               		.cfi_offset 16, -2
 785 03a8 1F93      		push r17
 786               	.LCFI18:
 787               		.cfi_def_cfa_offset 4
 788               		.cfi_offset 17, -3
 789 03aa CF93      		push r28
 790               	.LCFI19:
 791               		.cfi_def_cfa_offset 5
 792               		.cfi_offset 28, -4
 793               	/* prologue: function */
 794               	/* frame size = 0 */
 795               	/* stack size = 3 */
 796               	.L__stack_usage = 3
 103:../../test/testmtx.c ****   tprio_t prio = chThdGetPriority(); /* Because priority inheritance.*/
 797               		.loc 1 103 0
 798 03ac E091 0000 		lds r30,rlist+11
 799 03b0 F091 0000 		lds r31,rlist+11+1
 800 03b4 C481      		ldd r28,Z+4
 801               	.LVL76:
 104:../../test/testmtx.c ****   chMtxLock(&m1);
 802               		.loc 1 104 0
 803 03b6 80E0      		ldi r24,lo8(m1)
 804 03b8 90E0      		ldi r25,hi8(m1)
 805 03ba 0E94 0000 		call chMtxLock
 806               	.LVL77:
 105:../../test/testmtx.c ****   threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 807               		.loc 1 105 0
 808 03be 4C2F      		mov r20,r28
 809 03c0 4F5F      		subi r20,lo8(-(1))
 810 03c2 00E0      		ldi r16,lo8(.LC4)
 811 03c4 10E0      		ldi r17,hi8(.LC4)
 812 03c6 20E0      		ldi r18,lo8(gs(thread1))
 813 03c8 30E0      		ldi r19,hi8(gs(thread1))
 814 03ca 67E9      		ldi r22,lo8(-105)
 815 03cc 70E0      		ldi r23,0
 816 03ce 8091 0000 		lds r24,wa
 817 03d2 9091 0000 		lds r25,wa+1
 818 03d6 0E94 0000 		call chThdCreateStatic
 819               	.LVL78:
 820 03da 9093 0000 		sts threads+1,r25
 821 03de 8093 0000 		sts threads,r24
 106:../../test/testmtx.c ****   threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 822               		.loc 1 106 0
 823 03e2 4C2F      		mov r20,r28
 824 03e4 4E5F      		subi r20,lo8(-(2))
 825 03e6 00E0      		ldi r16,lo8(.LC5)
 826 03e8 10E0      		ldi r17,hi8(.LC5)
 827 03ea 20E0      		ldi r18,lo8(gs(thread1))
 828 03ec 30E0      		ldi r19,hi8(gs(thread1))
 829 03ee 67E9      		ldi r22,lo8(-105)
 830 03f0 70E0      		ldi r23,0
 831 03f2 8091 0000 		lds r24,wa+2
 832 03f6 9091 0000 		lds r25,wa+2+1
 833 03fa 0E94 0000 		call chThdCreateStatic
 834               	.LVL79:
 835 03fe 9093 0000 		sts threads+2+1,r25
 836 0402 8093 0000 		sts threads+2,r24
 107:../../test/testmtx.c ****   threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 837               		.loc 1 107 0
 838 0406 4C2F      		mov r20,r28
 839 0408 4D5F      		subi r20,lo8(-(3))
 840 040a 00E0      		ldi r16,lo8(.LC1)
 841 040c 10E0      		ldi r17,hi8(.LC1)
 842 040e 20E0      		ldi r18,lo8(gs(thread1))
 843 0410 30E0      		ldi r19,hi8(gs(thread1))
 844 0412 67E9      		ldi r22,lo8(-105)
 845 0414 70E0      		ldi r23,0
 846 0416 8091 0000 		lds r24,wa+4
 847 041a 9091 0000 		lds r25,wa+4+1
 848 041e 0E94 0000 		call chThdCreateStatic
 849               	.LVL80:
 850 0422 9093 0000 		sts threads+4+1,r25
 851 0426 8093 0000 		sts threads+4,r24
 108:../../test/testmtx.c ****   threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 852               		.loc 1 108 0
 853 042a 4C2F      		mov r20,r28
 854 042c 4C5F      		subi r20,lo8(-(4))
 855 042e 00E0      		ldi r16,lo8(.LC2)
 856 0430 10E0      		ldi r17,hi8(.LC2)
 857 0432 20E0      		ldi r18,lo8(gs(thread1))
 858 0434 30E0      		ldi r19,hi8(gs(thread1))
 859 0436 67E9      		ldi r22,lo8(-105)
 860 0438 70E0      		ldi r23,0
 861 043a 8091 0000 		lds r24,wa+6
 862 043e 9091 0000 		lds r25,wa+6+1
 863 0442 0E94 0000 		call chThdCreateStatic
 864               	.LVL81:
 865 0446 9093 0000 		sts threads+6+1,r25
 866 044a 8093 0000 		sts threads+6,r24
 109:../../test/testmtx.c ****   threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 867               		.loc 1 109 0
 868 044e 4C2F      		mov r20,r28
 869 0450 4B5F      		subi r20,lo8(-(5))
 870 0452 00E0      		ldi r16,lo8(.LC0)
 871 0454 10E0      		ldi r17,hi8(.LC0)
 872 0456 20E0      		ldi r18,lo8(gs(thread1))
 873 0458 30E0      		ldi r19,hi8(gs(thread1))
 874 045a 67E9      		ldi r22,lo8(-105)
 875 045c 70E0      		ldi r23,0
 876 045e 8091 0000 		lds r24,wa+8
 877 0462 9091 0000 		lds r25,wa+8+1
 878 0466 0E94 0000 		call chThdCreateStatic
 879               	.LVL82:
 880 046a 9093 0000 		sts threads+8+1,r25
 881 046e 8093 0000 		sts threads+8,r24
 110:../../test/testmtx.c ****   chMtxUnlock();
 882               		.loc 1 110 0
 883 0472 0E94 0000 		call chMtxUnlock
 884               	.LVL83:
 111:../../test/testmtx.c ****   test_wait_threads();
 885               		.loc 1 111 0
 886 0476 0E94 0000 		call test_wait_threads
 887               	.LVL84:
 112:../../test/testmtx.c ****   test_assert(1, prio == chThdGetPriority(), "wrong priority level");
 888               		.loc 1 112 0
 889 047a E091 0000 		lds r30,rlist+11
 890 047e F091 0000 		lds r31,rlist+11+1
 891 0482 61E0      		ldi r22,lo8(1)
 892 0484 8481      		ldd r24,Z+4
 893 0486 8C13      		cpse r24,r28
 894 0488 60E0      		ldi r22,0
 895               	.L17:
 896 048a 81E0      		ldi r24,lo8(1)
 897 048c 90E0      		ldi r25,0
 898 048e 0E94 0000 		call _test_assert
 899               	.LVL85:
 900 0492 8823      		tst r24
 901 0494 01F0      		breq .L20
 902               	/* epilogue start */
 114:../../test/testmtx.c **** }
 903               		.loc 1 114 0
 904 0496 CF91      		pop r28
 905               	.LVL86:
 906 0498 1F91      		pop r17
 907 049a 0F91      		pop r16
 908 049c 0895      		ret
 909               	.LVL87:
 910               	.L20:
 113:../../test/testmtx.c ****   test_assert_sequence(2, "ABCDE");
 911               		.loc 1 113 0
 912 049e 60E0      		ldi r22,lo8(.LC6)
 913 04a0 70E0      		ldi r23,hi8(.LC6)
 914 04a2 82E0      		ldi r24,lo8(2)
 915 04a4 90E0      		ldi r25,0
 916               	/* epilogue start */
 114:../../test/testmtx.c **** }
 917               		.loc 1 114 0
 918 04a6 CF91      		pop r28
 919               	.LVL88:
 920 04a8 1F91      		pop r17
 921 04aa 0F91      		pop r16
 113:../../test/testmtx.c ****   test_assert_sequence(2, "ABCDE");
 922               		.loc 1 113 0
 923 04ac 0C94 0000 		jmp _test_assert_sequence
 924               	.LVL89:
 925               		.cfi_endproc
 926               	.LFE9:
 929               	mtx5_execute:
 930               	.LFB27:
 437:../../test/testmtx.c **** static void mtx5_execute(void) {
 931               		.loc 1 437 0
 932               		.cfi_startproc
 933 04b0 CF93      		push r28
 934               	.LCFI20:
 935               		.cfi_def_cfa_offset 3
 936               		.cfi_offset 28, -2
 937               	/* prologue: function */
 938               	/* frame size = 0 */
 939               	/* stack size = 1 */
 940               	.L__stack_usage = 1
 441:../../test/testmtx.c ****   prio = chThdGetPriority();
 941               		.loc 1 441 0
 942 04b2 E091 0000 		lds r30,rlist+11
 943 04b6 F091 0000 		lds r31,rlist+11+1
 944 04ba C481      		ldd r28,Z+4
 945               	.LVL90:
 443:../../test/testmtx.c ****   b = chMtxTryLock(&m1);
 946               		.loc 1 443 0
 947 04bc 80E0      		ldi r24,lo8(m1)
 948 04be 90E0      		ldi r25,hi8(m1)
 949 04c0 0E94 0000 		call chMtxTryLock
 950               	.LVL91:
 444:../../test/testmtx.c ****   test_assert(1, b, "already locked");
 951               		.loc 1 444 0
 952 04c4 682F      		mov r22,r24
 953 04c6 81E0      		ldi r24,lo8(1)
 954 04c8 90E0      		ldi r25,0
 955               	.LVL92:
 956 04ca 0E94 0000 		call _test_assert
 957               	.LVL93:
 958 04ce 8823      		tst r24
 959 04d0 01F0      		breq .L46
 960               	.L21:
 961               	/* epilogue start */
 461:../../test/testmtx.c **** }
 962               		.loc 1 461 0
 963 04d2 CF91      		pop r28
 964               	.LVL94:
 965 04d4 0895      		ret
 966               	.LVL95:
 967               	.L46:
 446:../../test/testmtx.c ****   b = chMtxTryLock(&m1);
 968               		.loc 1 446 0
 969 04d6 80E0      		ldi r24,lo8(m1)
 970 04d8 90E0      		ldi r25,hi8(m1)
 971 04da 0E94 0000 		call chMtxTryLock
 972               	.LVL96:
 447:../../test/testmtx.c ****   test_assert(2, !b, "not locked");
 973               		.loc 1 447 0
 974 04de 61E0      		ldi r22,lo8(1)
 975 04e0 8111      		cpse r24,__zero_reg__
 976 04e2 00C0      		rjmp .L47
 977 04e4 82E0      		ldi r24,lo8(2)
 978 04e6 90E0      		ldi r25,0
 979               	.LVL97:
 980 04e8 0E94 0000 		call _test_assert
 981               	.LVL98:
 982 04ec 8111      		cpse r24,__zero_reg__
 983 04ee 00C0      		rjmp .L21
 984               	.L49:
 449:../../test/testmtx.c ****   chSysLock();
 985               		.loc 1 449 0
 986               	/* #APP */
 987               	 ;  449 "../../test/testmtx.c" 1
 988 04f0 F894      		cli
 989               	 ;  0 "" 2
 450:../../test/testmtx.c ****   chMtxUnlockS();
 990               		.loc 1 450 0
 991               	/* #NOAPP */
 992 04f2 0E94 0000 		call chMtxUnlockS
 993               	.LVL99:
 451:../../test/testmtx.c ****   chSysUnlock();
 994               		.loc 1 451 0
 995               	/* #APP */
 996               	 ;  451 "../../test/testmtx.c" 1
 997 04f6 7894      		sei
 998               	 ;  0 "" 2
 453:../../test/testmtx.c ****   test_assert(3, isempty(&m1.m_queue), "queue not empty");
 999               		.loc 1 453 0
 1000               	/* #NOAPP */
 1001 04f8 61E0      		ldi r22,lo8(1)
 1002 04fa 8091 0000 		lds r24,m1
 1003 04fe 9091 0000 		lds r25,m1+1
 1004 0502 8050      		subi r24,lo8(m1)
 1005 0504 9040      		sbci r25,hi8(m1)
 1006 0506 01F0      		breq .L26
 1007 0508 60E0      		ldi r22,0
 1008               	.L26:
 1009 050a 83E0      		ldi r24,lo8(3)
 1010 050c 90E0      		ldi r25,0
 1011 050e 0E94 0000 		call _test_assert
 1012               	.LVL100:
 1013 0512 8111      		cpse r24,__zero_reg__
 1014 0514 00C0      		rjmp .L21
 454:../../test/testmtx.c ****   test_assert(4, m1.m_owner == NULL, "still owned");
 1015               		.loc 1 454 0
 1016 0516 61E0      		ldi r22,lo8(1)
 1017 0518 8091 0000 		lds r24,m1+4
 1018 051c 9091 0000 		lds r25,m1+4+1
 1019 0520 892B      		or r24,r25
 1020 0522 01F0      		breq .+2
 1021 0524 00C0      		rjmp .L48
 1022               	.L27:
 1023 0526 84E0      		ldi r24,lo8(4)
 1024 0528 90E0      		ldi r25,0
 1025 052a 0E94 0000 		call _test_assert
 1026               	.LVL101:
 1027 052e 8111      		cpse r24,__zero_reg__
 1028 0530 00C0      		rjmp .L21
 455:../../test/testmtx.c ****   test_assert(5, chThdGetPriority() == prio, "wrong priority level");
 1029               		.loc 1 455 0
 1030 0532 E091 0000 		lds r30,rlist+11
 1031 0536 F091 0000 		lds r31,rlist+11+1
 1032 053a 61E0      		ldi r22,lo8(1)
 1033 053c 8481      		ldd r24,Z+4
 1034 053e 8C13      		cpse r24,r28
 1035 0540 60E0      		ldi r22,0
 1036               	.L28:
 1037 0542 85E0      		ldi r24,lo8(5)
 1038 0544 90E0      		ldi r25,0
 1039 0546 0E94 0000 		call _test_assert
 1040               	.LVL102:
 1041 054a 8111      		cpse r24,__zero_reg__
 1042 054c 00C0      		rjmp .L21
 457:../../test/testmtx.c ****   chMtxLock(&m1);
 1043               		.loc 1 457 0
 1044 054e 80E0      		ldi r24,lo8(m1)
 1045 0550 90E0      		ldi r25,hi8(m1)
 1046 0552 0E94 0000 		call chMtxLock
 1047               	.LVL103:
 458:../../test/testmtx.c ****   chMtxUnlockAll();
 1048               		.loc 1 458 0
 1049 0556 0E94 0000 		call chMtxUnlockAll
 1050               	.LVL104:
 459:../../test/testmtx.c ****   test_assert(6, isempty(&m1.m_queue), "queue not empty");
 1051               		.loc 1 459 0
 1052 055a 61E0      		ldi r22,lo8(1)
 1053 055c 8091 0000 		lds r24,m1
 1054 0560 9091 0000 		lds r25,m1+1
 1055 0564 8050      		subi r24,lo8(m1)
 1056 0566 9040      		sbci r25,hi8(m1)
 1057 0568 01F0      		breq .L29
 1058 056a 60E0      		ldi r22,0
 1059               	.L29:
 1060 056c 86E0      		ldi r24,lo8(6)
 1061 056e 90E0      		ldi r25,0
 1062 0570 0E94 0000 		call _test_assert
 1063               	.LVL105:
 1064 0574 8111      		cpse r24,__zero_reg__
 1065 0576 00C0      		rjmp .L21
 460:../../test/testmtx.c ****   test_assert(7, m1.m_owner == NULL, "still owned");
 1066               		.loc 1 460 0
 1067 0578 61E0      		ldi r22,lo8(1)
 1068 057a 8091 0000 		lds r24,m1+4
 1069 057e 9091 0000 		lds r25,m1+4+1
 1070 0582 892B      		or r24,r25
 1071 0584 01F0      		breq .L30
 1072 0586 60E0      		ldi r22,0
 1073               	.L30:
 1074 0588 87E0      		ldi r24,lo8(7)
 1075 058a 90E0      		ldi r25,0
 1076               	/* epilogue start */
 461:../../test/testmtx.c **** }
 1077               		.loc 1 461 0
 1078 058c CF91      		pop r28
 1079               	.LVL106:
 460:../../test/testmtx.c ****   test_assert(7, m1.m_owner == NULL, "still owned");
 1080               		.loc 1 460 0
 1081 058e 0C94 0000 		jmp _test_assert
 1082               	.LVL107:
 1083               	.L47:
 447:../../test/testmtx.c ****   test_assert(2, !b, "not locked");
 1084               		.loc 1 447 0
 1085 0592 60E0      		ldi r22,0
 1086 0594 82E0      		ldi r24,lo8(2)
 1087 0596 90E0      		ldi r25,0
 1088               	.LVL108:
 1089 0598 0E94 0000 		call _test_assert
 1090               	.LVL109:
 1091 059c 8111      		cpse r24,__zero_reg__
 1092 059e 00C0      		rjmp .L21
 1093 05a0 00C0      		rjmp .L49
 1094               	.L48:
 454:../../test/testmtx.c ****   test_assert(4, m1.m_owner == NULL, "still owned");
 1095               		.loc 1 454 0
 1096 05a2 60E0      		ldi r22,0
 1097 05a4 00C0      		rjmp .L27
 1098               		.cfi_endproc
 1099               	.LFE27:
 1102               	mtx4_execute:
 1103               	.LFB25:
 369:../../test/testmtx.c **** static void mtx4_execute(void) {
 1104               		.loc 1 369 0
 1105               		.cfi_startproc
 1106 05a6 BF92      		push r11
 1107               	.LCFI21:
 1108               		.cfi_def_cfa_offset 3
 1109               		.cfi_offset 11, -2
 1110 05a8 CF92      		push r12
 1111               	.LCFI22:
 1112               		.cfi_def_cfa_offset 4
 1113               		.cfi_offset 12, -3
 1114 05aa DF92      		push r13
 1115               	.LCFI23:
 1116               		.cfi_def_cfa_offset 5
 1117               		.cfi_offset 13, -4
 1118 05ac EF92      		push r14
 1119               	.LCFI24:
 1120               		.cfi_def_cfa_offset 6
 1121               		.cfi_offset 14, -5
 1122 05ae FF92      		push r15
 1123               	.LCFI25:
 1124               		.cfi_def_cfa_offset 7
 1125               		.cfi_offset 15, -6
 1126 05b0 0F93      		push r16
 1127               	.LCFI26:
 1128               		.cfi_def_cfa_offset 8
 1129               		.cfi_offset 16, -7
 1130 05b2 1F93      		push r17
 1131               	.LCFI27:
 1132               		.cfi_def_cfa_offset 9
 1133               		.cfi_offset 17, -8
 1134 05b4 CF93      		push r28
 1135               	.LCFI28:
 1136               		.cfi_def_cfa_offset 10
 1137               		.cfi_offset 28, -9
 1138 05b6 DF93      		push r29
 1139               	.LCFI29:
 1140               		.cfi_def_cfa_offset 11
 1141               		.cfi_offset 29, -10
 1142               	/* prologue: function */
 1143               	/* frame size = 0 */
 1144               	/* stack size = 9 */
 1145               	.L__stack_usage = 9
 372:../../test/testmtx.c ****   p = chThdGetPriority();
 1146               		.loc 1 372 0
 1147 05b8 E091 0000 		lds r30,rlist+11
 1148 05bc F091 0000 		lds r31,rlist+11+1
 1149 05c0 D480      		ldd r13,Z+4
 1150               	.LVL110:
 373:../../test/testmtx.c ****   p1 = p + 1;
 1151               		.loc 1 373 0
 1152 05c2 CD2C      		mov r12,r13
 1153 05c4 C394      		inc r12
 1154               	.LVL111:
 374:../../test/testmtx.c ****   p2 = p + 2;
 1155               		.loc 1 374 0
 1156 05c6 BD2C      		mov r11,r13
 1157 05c8 B394      		inc r11
 1158 05ca B394      		inc r11
 1159               	.LVL112:
 375:../../test/testmtx.c ****   threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "B");
 1160               		.loc 1 375 0
 1161 05cc E090 0000 		lds r14,wa
 1162 05d0 F090 0000 		lds r15,wa+1
 1163 05d4 00E0      		ldi r16,lo8(.LC2)
 1164 05d6 10E0      		ldi r17,hi8(.LC2)
 1165 05d8 20E0      		ldi r18,lo8(gs(thread4a))
 1166 05da 30E0      		ldi r19,hi8(gs(thread4a))
 1167 05dc 4C2D      		mov r20,r12
 1168 05de 67E9      		ldi r22,lo8(-105)
 1169 05e0 70E0      		ldi r23,0
 1170 05e2 C701      		movw r24,r14
 1171 05e4 0E94 0000 		call chThdCreateStatic
 1172               	.LVL113:
 1173 05e8 9093 0000 		sts threads+1,r25
 1174 05ec 8093 0000 		sts threads,r24
 376:../../test/testmtx.c ****   threads[1] = chThdCreateStatic(wa[1], WA_SIZE, p2, thread4b, "A");
 1175               		.loc 1 376 0
 1176 05f0 C091 0000 		lds r28,wa+2
 1177 05f4 D091 0000 		lds r29,wa+2+1
 1178 05f8 00E0      		ldi r16,lo8(.LC0)
 1179 05fa 10E0      		ldi r17,hi8(.LC0)
 1180 05fc 20E0      		ldi r18,lo8(gs(thread4b))
 1181 05fe 30E0      		ldi r19,hi8(gs(thread4b))
 1182 0600 4B2D      		mov r20,r11
 1183 0602 67E9      		ldi r22,lo8(-105)
 1184 0604 70E0      		ldi r23,0
 1185 0606 CE01      		movw r24,r28
 1186 0608 0E94 0000 		call chThdCreateStatic
 1187               	.LVL114:
 1188 060c 9093 0000 		sts threads+2+1,r25
 1189 0610 8093 0000 		sts threads+2,r24
 377:../../test/testmtx.c ****   chMtxLock(&m2);
 1190               		.loc 1 377 0
 1191 0614 80E0      		ldi r24,lo8(m2)
 1192 0616 90E0      		ldi r25,hi8(m2)
 1193 0618 0E94 0000 		call chMtxLock
 1194               	.LVL115:
 378:../../test/testmtx.c ****   test_assert(1, chThdGetPriority() == p, "wrong priority level");
 1195               		.loc 1 378 0
 1196 061c E091 0000 		lds r30,rlist+11
 1197 0620 F091 0000 		lds r31,rlist+11+1
 1198 0624 61E0      		ldi r22,lo8(1)
 1199 0626 8481      		ldd r24,Z+4
 1200 0628 8D11      		cpse r24,r13
 1201 062a 60E0      		ldi r22,0
 1202               	.L51:
 1203 062c 81E0      		ldi r24,lo8(1)
 1204 062e 90E0      		ldi r25,0
 1205 0630 0E94 0000 		call _test_assert
 1206               	.LVL116:
 1207 0634 8823      		tst r24
 1208 0636 01F0      		breq .L68
 1209               	.L50:
 1210               	/* epilogue start */
 413:../../test/testmtx.c **** }
 1211               		.loc 1 413 0
 1212 0638 DF91      		pop r29
 1213 063a CF91      		pop r28
 1214 063c 1F91      		pop r17
 1215 063e 0F91      		pop r16
 1216 0640 FF90      		pop r15
 1217 0642 EF90      		pop r14
 1218 0644 DF90      		pop r13
 1219               	.LVL117:
 1220 0646 CF90      		pop r12
 1221               	.LVL118:
 1222 0648 BF90      		pop r11
 1223               	.LVL119:
 1224 064a 0895      		ret
 1225               	.LVL120:
 1226               	.L68:
 379:../../test/testmtx.c ****   chThdSleepMilliseconds(100);
 1227               		.loc 1 379 0
 1228 064c 84E6      		ldi r24,lo8(100)
 1229 064e 90E0      		ldi r25,0
 1230 0650 0E94 0000 		call chThdSleep
 1231               	.LVL121:
 380:../../test/testmtx.c ****   test_assert(2, chThdGetPriority() == p1, "wrong priority level");
 1232               		.loc 1 380 0
 1233 0654 E091 0000 		lds r30,rlist+11
 1234 0658 F091 0000 		lds r31,rlist+11+1
 1235 065c 61E0      		ldi r22,lo8(1)
 1236 065e 8481      		ldd r24,Z+4
 1237 0660 8C11      		cpse r24,r12
 1238 0662 60E0      		ldi r22,0
 1239               	.L54:
 1240 0664 82E0      		ldi r24,lo8(2)
 1241 0666 90E0      		ldi r25,0
 1242 0668 0E94 0000 		call _test_assert
 1243               	.LVL122:
 1244 066c 8111      		cpse r24,__zero_reg__
 1245 066e 00C0      		rjmp .L50
 381:../../test/testmtx.c ****   chMtxLock(&m1);
 1246               		.loc 1 381 0
 1247 0670 80E0      		ldi r24,lo8(m1)
 1248 0672 90E0      		ldi r25,hi8(m1)
 1249 0674 0E94 0000 		call chMtxLock
 1250               	.LVL123:
 382:../../test/testmtx.c ****   test_assert(3, chThdGetPriority() == p1, "wrong priority level");
 1251               		.loc 1 382 0
 1252 0678 E091 0000 		lds r30,rlist+11
 1253 067c F091 0000 		lds r31,rlist+11+1
 1254 0680 61E0      		ldi r22,lo8(1)
 1255 0682 8481      		ldd r24,Z+4
 1256 0684 8C11      		cpse r24,r12
 1257 0686 60E0      		ldi r22,0
 1258               	.L56:
 1259 0688 83E0      		ldi r24,lo8(3)
 1260 068a 90E0      		ldi r25,0
 1261 068c 0E94 0000 		call _test_assert
 1262               	.LVL124:
 1263 0690 8111      		cpse r24,__zero_reg__
 1264 0692 00C0      		rjmp .L50
 383:../../test/testmtx.c ****   chThdSleepMilliseconds(100);
 1265               		.loc 1 383 0
 1266 0694 84E6      		ldi r24,lo8(100)
 1267 0696 90E0      		ldi r25,0
 1268 0698 0E94 0000 		call chThdSleep
 1269               	.LVL125:
 384:../../test/testmtx.c ****   test_assert(4, chThdGetPriority() == p2, "wrong priority level");
 1270               		.loc 1 384 0
 1271 069c E091 0000 		lds r30,rlist+11
 1272 06a0 F091 0000 		lds r31,rlist+11+1
 1273 06a4 61E0      		ldi r22,lo8(1)
 1274 06a6 8481      		ldd r24,Z+4
 1275 06a8 8B11      		cpse r24,r11
 1276 06aa 60E0      		ldi r22,0
 1277               	.L57:
 1278 06ac 84E0      		ldi r24,lo8(4)
 1279 06ae 90E0      		ldi r25,0
 1280 06b0 0E94 0000 		call _test_assert
 1281               	.LVL126:
 1282 06b4 8111      		cpse r24,__zero_reg__
 1283 06b6 00C0      		rjmp .L50
 385:../../test/testmtx.c ****   chMtxUnlock();
 1284               		.loc 1 385 0
 1285 06b8 0E94 0000 		call chMtxUnlock
 1286               	.LVL127:
 386:../../test/testmtx.c ****   test_assert(5, chThdGetPriority() == p1, "wrong priority level");
 1287               		.loc 1 386 0
 1288 06bc E091 0000 		lds r30,rlist+11
 1289 06c0 F091 0000 		lds r31,rlist+11+1
 1290 06c4 61E0      		ldi r22,lo8(1)
 1291 06c6 8481      		ldd r24,Z+4
 1292 06c8 8C11      		cpse r24,r12
 1293 06ca 60E0      		ldi r22,0
 1294               	.L58:
 1295 06cc 85E0      		ldi r24,lo8(5)
 1296 06ce 90E0      		ldi r25,0
 1297 06d0 0E94 0000 		call _test_assert
 1298               	.LVL128:
 1299 06d4 8111      		cpse r24,__zero_reg__
 1300 06d6 00C0      		rjmp .L50
 387:../../test/testmtx.c ****   chThdSleepMilliseconds(100);
 1301               		.loc 1 387 0
 1302 06d8 84E6      		ldi r24,lo8(100)
 1303 06da 90E0      		ldi r25,0
 1304 06dc 0E94 0000 		call chThdSleep
 1305               	.LVL129:
 388:../../test/testmtx.c ****   test_assert(6, chThdGetPriority() == p1, "wrong priority level");
 1306               		.loc 1 388 0
 1307 06e0 E091 0000 		lds r30,rlist+11
 1308 06e4 F091 0000 		lds r31,rlist+11+1
 1309 06e8 61E0      		ldi r22,lo8(1)
 1310 06ea 8481      		ldd r24,Z+4
 1311 06ec 8C11      		cpse r24,r12
 1312 06ee 60E0      		ldi r22,0
 1313               	.L59:
 1314 06f0 86E0      		ldi r24,lo8(6)
 1315 06f2 90E0      		ldi r25,0
 1316 06f4 0E94 0000 		call _test_assert
 1317               	.LVL130:
 1318 06f8 8111      		cpse r24,__zero_reg__
 1319 06fa 00C0      		rjmp .L50
 389:../../test/testmtx.c ****   chMtxUnlockAll();
 1320               		.loc 1 389 0
 1321 06fc 0E94 0000 		call chMtxUnlockAll
 1322               	.LVL131:
 390:../../test/testmtx.c ****   test_assert(7, chThdGetPriority() == p, "wrong priority level");
 1323               		.loc 1 390 0
 1324 0700 E091 0000 		lds r30,rlist+11
 1325 0704 F091 0000 		lds r31,rlist+11+1
 1326 0708 61E0      		ldi r22,lo8(1)
 1327 070a 8481      		ldd r24,Z+4
 1328 070c 8D11      		cpse r24,r13
 1329 070e 60E0      		ldi r22,0
 1330               	.L60:
 1331 0710 87E0      		ldi r24,lo8(7)
 1332 0712 90E0      		ldi r25,0
 1333 0714 0E94 0000 		call _test_assert
 1334               	.LVL132:
 1335 0718 8111      		cpse r24,__zero_reg__
 1336 071a 00C0      		rjmp .L50
 391:../../test/testmtx.c ****   test_wait_threads();
 1337               		.loc 1 391 0
 1338 071c 0E94 0000 		call test_wait_threads
 1339               	.LVL133:
 394:../../test/testmtx.c ****   threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "D");
 1340               		.loc 1 394 0
 1341 0720 00E0      		ldi r16,lo8(.LC5)
 1342 0722 10E0      		ldi r17,hi8(.LC5)
 1343 0724 20E0      		ldi r18,lo8(gs(thread4a))
 1344 0726 30E0      		ldi r19,hi8(gs(thread4a))
 1345 0728 4C2D      		mov r20,r12
 1346 072a 67E9      		ldi r22,lo8(-105)
 1347 072c 70E0      		ldi r23,0
 1348 072e C701      		movw r24,r14
 1349 0730 0E94 0000 		call chThdCreateStatic
 1350               	.LVL134:
 1351 0734 9093 0000 		sts threads+1,r25
 1352 0738 8093 0000 		sts threads,r24
 395:../../test/testmtx.c ****   threads[1] = chThdCreateStatic(wa[1], WA_SIZE, p2, thread4b, "C");
 1353               		.loc 1 395 0
 1354 073c 00E0      		ldi r16,lo8(.LC1)
 1355 073e 10E0      		ldi r17,hi8(.LC1)
 1356 0740 20E0      		ldi r18,lo8(gs(thread4b))
 1357 0742 30E0      		ldi r19,hi8(gs(thread4b))
 1358 0744 4B2D      		mov r20,r11
 1359 0746 67E9      		ldi r22,lo8(-105)
 1360 0748 70E0      		ldi r23,0
 1361 074a CE01      		movw r24,r28
 1362 074c 0E94 0000 		call chThdCreateStatic
 1363               	.LVL135:
 1364 0750 9093 0000 		sts threads+2+1,r25
 1365 0754 8093 0000 		sts threads+2,r24
 396:../../test/testmtx.c ****   chMtxLock(&m2);
 1366               		.loc 1 396 0
 1367 0758 80E0      		ldi r24,lo8(m2)
 1368 075a 90E0      		ldi r25,hi8(m2)
 1369 075c 0E94 0000 		call chMtxLock
 1370               	.LVL136:
 397:../../test/testmtx.c ****   test_assert(8, chThdGetPriority() == p, "wrong priority level");
 1371               		.loc 1 397 0
 1372 0760 E091 0000 		lds r30,rlist+11
 1373 0764 F091 0000 		lds r31,rlist+11+1
 1374 0768 61E0      		ldi r22,lo8(1)
 1375 076a 8481      		ldd r24,Z+4
 1376 076c 8D11      		cpse r24,r13
 1377 076e 60E0      		ldi r22,0
 1378               	.L61:
 1379 0770 88E0      		ldi r24,lo8(8)
 1380 0772 90E0      		ldi r25,0
 1381 0774 0E94 0000 		call _test_assert
 1382               	.LVL137:
 1383 0778 8111      		cpse r24,__zero_reg__
 1384 077a 00C0      		rjmp .L50
 398:../../test/testmtx.c ****   chThdSleepMilliseconds(100);
 1385               		.loc 1 398 0
 1386 077c 84E6      		ldi r24,lo8(100)
 1387 077e 90E0      		ldi r25,0
 1388 0780 0E94 0000 		call chThdSleep
 1389               	.LVL138:
 399:../../test/testmtx.c ****   test_assert(9, chThdGetPriority() == p1, "wrong priority level");
 1390               		.loc 1 399 0
 1391 0784 E091 0000 		lds r30,rlist+11
 1392 0788 F091 0000 		lds r31,rlist+11+1
 1393 078c 61E0      		ldi r22,lo8(1)
 1394 078e 8481      		ldd r24,Z+4
 1395 0790 8C11      		cpse r24,r12
 1396 0792 60E0      		ldi r22,0
 1397               	.L62:
 1398 0794 89E0      		ldi r24,lo8(9)
 1399 0796 90E0      		ldi r25,0
 1400 0798 0E94 0000 		call _test_assert
 1401               	.LVL139:
 1402 079c 8111      		cpse r24,__zero_reg__
 1403 079e 00C0      		rjmp .L50
 400:../../test/testmtx.c ****   chMtxLock(&m1);
 1404               		.loc 1 400 0
 1405 07a0 80E0      		ldi r24,lo8(m1)
 1406 07a2 90E0      		ldi r25,hi8(m1)
 1407 07a4 0E94 0000 		call chMtxLock
 1408               	.LVL140:
 401:../../test/testmtx.c ****   test_assert(10, chThdGetPriority() == p1, "wrong priority level");
 1409               		.loc 1 401 0
 1410 07a8 E091 0000 		lds r30,rlist+11
 1411 07ac F091 0000 		lds r31,rlist+11+1
 1412 07b0 61E0      		ldi r22,lo8(1)
 1413 07b2 8481      		ldd r24,Z+4
 1414 07b4 8C11      		cpse r24,r12
 1415 07b6 60E0      		ldi r22,0
 1416               	.L63:
 1417 07b8 8AE0      		ldi r24,lo8(10)
 1418 07ba 90E0      		ldi r25,0
 1419 07bc 0E94 0000 		call _test_assert
 1420               	.LVL141:
 1421 07c0 8111      		cpse r24,__zero_reg__
 1422 07c2 00C0      		rjmp .L50
 402:../../test/testmtx.c ****   chThdSleepMilliseconds(100);
 1423               		.loc 1 402 0
 1424 07c4 84E6      		ldi r24,lo8(100)
 1425 07c6 90E0      		ldi r25,0
 1426 07c8 0E94 0000 		call chThdSleep
 1427               	.LVL142:
 403:../../test/testmtx.c ****   test_assert(11, chThdGetPriority() == p2, "wrong priority level");
 1428               		.loc 1 403 0
 1429 07cc E091 0000 		lds r30,rlist+11
 1430 07d0 F091 0000 		lds r31,rlist+11+1
 1431 07d4 61E0      		ldi r22,lo8(1)
 1432 07d6 8481      		ldd r24,Z+4
 1433 07d8 8B11      		cpse r24,r11
 1434 07da 60E0      		ldi r22,0
 1435               	.L64:
 1436 07dc 8BE0      		ldi r24,lo8(11)
 1437 07de 90E0      		ldi r25,0
 1438 07e0 0E94 0000 		call _test_assert
 1439               	.LVL143:
 1440 07e4 8111      		cpse r24,__zero_reg__
 1441 07e6 00C0      		rjmp .L50
 404:../../test/testmtx.c ****   chSysLock();
 1442               		.loc 1 404 0
 1443               	/* #APP */
 1444               	 ;  404 "../../test/testmtx.c" 1
 1445 07e8 F894      		cli
 1446               	 ;  0 "" 2
 405:../../test/testmtx.c ****   chMtxUnlockS();
 1447               		.loc 1 405 0
 1448               	/* #NOAPP */
 1449 07ea 0E94 0000 		call chMtxUnlockS
 1450               	.LVL144:
 406:../../test/testmtx.c ****   chSysUnlock();
 1451               		.loc 1 406 0
 1452               	/* #APP */
 1453               	 ;  406 "../../test/testmtx.c" 1
 1454 07ee 7894      		sei
 1455               	 ;  0 "" 2
 407:../../test/testmtx.c ****   test_assert(12, chThdGetPriority() == p1, "wrong priority level");
 1456               		.loc 1 407 0
 1457               	/* #NOAPP */
 1458 07f0 E091 0000 		lds r30,rlist+11
 1459 07f4 F091 0000 		lds r31,rlist+11+1
 1460 07f8 61E0      		ldi r22,lo8(1)
 1461 07fa 8481      		ldd r24,Z+4
 1462 07fc 8C11      		cpse r24,r12
 1463 07fe 60E0      		ldi r22,0
 1464               	.L65:
 1465 0800 8CE0      		ldi r24,lo8(12)
 1466 0802 90E0      		ldi r25,0
 1467 0804 0E94 0000 		call _test_assert
 1468               	.LVL145:
 1469 0808 8111      		cpse r24,__zero_reg__
 1470 080a 00C0      		rjmp .L50
 408:../../test/testmtx.c ****   chThdSleepMilliseconds(100);
 1471               		.loc 1 408 0
 1472 080c 84E6      		ldi r24,lo8(100)
 1473 080e 90E0      		ldi r25,0
 1474 0810 0E94 0000 		call chThdSleep
 1475               	.LVL146:
 409:../../test/testmtx.c ****   test_assert(13, chThdGetPriority() == p1, "wrong priority level");
 1476               		.loc 1 409 0
 1477 0814 E091 0000 		lds r30,rlist+11
 1478 0818 F091 0000 		lds r31,rlist+11+1
 1479 081c 61E0      		ldi r22,lo8(1)
 1480 081e 8481      		ldd r24,Z+4
 1481 0820 8C11      		cpse r24,r12
 1482 0822 60E0      		ldi r22,0
 1483               	.L66:
 1484 0824 8DE0      		ldi r24,lo8(13)
 1485 0826 90E0      		ldi r25,0
 1486 0828 0E94 0000 		call _test_assert
 1487               	.LVL147:
 1488 082c 8111      		cpse r24,__zero_reg__
 1489 082e 00C0      		rjmp .L50
 410:../../test/testmtx.c ****   chMtxUnlockAll();
 1490               		.loc 1 410 0
 1491 0830 0E94 0000 		call chMtxUnlockAll
 1492               	.LVL148:
 411:../../test/testmtx.c ****   test_assert(14, chThdGetPriority() == p, "wrong priority level");
 1493               		.loc 1 411 0
 1494 0834 E091 0000 		lds r30,rlist+11
 1495 0838 F091 0000 		lds r31,rlist+11+1
 1496 083c 61E0      		ldi r22,lo8(1)
 1497 083e 8481      		ldd r24,Z+4
 1498 0840 8D11      		cpse r24,r13
 1499 0842 60E0      		ldi r22,0
 1500               	.L67:
 1501 0844 8EE0      		ldi r24,lo8(14)
 1502 0846 90E0      		ldi r25,0
 1503 0848 0E94 0000 		call _test_assert
 1504               	.LVL149:
 1505 084c 8111      		cpse r24,__zero_reg__
 1506 084e 00C0      		rjmp .L50
 1507               	/* epilogue start */
 413:../../test/testmtx.c **** }
 1508               		.loc 1 413 0
 1509 0850 DF91      		pop r29
 1510 0852 CF91      		pop r28
 1511 0854 1F91      		pop r17
 1512 0856 0F91      		pop r16
 1513 0858 FF90      		pop r15
 1514 085a EF90      		pop r14
 1515 085c DF90      		pop r13
 1516               	.LVL150:
 1517 085e CF90      		pop r12
 1518               	.LVL151:
 1519 0860 BF90      		pop r11
 1520               	.LVL152:
 412:../../test/testmtx.c ****   test_wait_threads();
 1521               		.loc 1 412 0
 1522 0862 0C94 0000 		jmp test_wait_threads
 1523               	.LVL153:
 1524               		.cfi_endproc
 1525               	.LFE25:
 1528               	thread4b:
 1529               	.LFB24:
 360:../../test/testmtx.c **** static msg_t thread4b(void *p) {
 1530               		.loc 1 360 0
 1531               		.cfi_startproc
 1532               	.LVL154:
 1533               	/* prologue: function */
 1534               	/* frame size = 0 */
 1535               	/* stack size = 0 */
 1536               	.L__stack_usage = 0
 363:../../test/testmtx.c ****   chThdSleepMilliseconds(150);
 1537               		.loc 1 363 0
 1538 0866 86E9      		ldi r24,lo8(-106)
 1539 0868 90E0      		ldi r25,0
 1540               	.LVL155:
 1541 086a 0E94 0000 		call chThdSleep
 1542               	.LVL156:
 364:../../test/testmtx.c ****   chMtxLock(&m1);
 1543               		.loc 1 364 0
 1544 086e 80E0      		ldi r24,lo8(m1)
 1545 0870 90E0      		ldi r25,hi8(m1)
 1546 0872 0E94 0000 		call chMtxLock
 1547               	.LVL157:
 365:../../test/testmtx.c ****   chMtxUnlock();
 1548               		.loc 1 365 0
 1549 0876 0E94 0000 		call chMtxUnlock
 1550               	.LVL158:
 367:../../test/testmtx.c **** }
 1551               		.loc 1 367 0
 1552 087a 80E0      		ldi r24,0
 1553 087c 90E0      		ldi r25,0
 1554 087e 0895      		ret
 1555               		.cfi_endproc
 1556               	.LFE24:
 1559               	thread4a:
 1560               	.LFB23:
 351:../../test/testmtx.c **** static msg_t thread4a(void *p) {
 1561               		.loc 1 351 0
 1562               		.cfi_startproc
 1563               	.LVL159:
 1564               	/* prologue: function */
 1565               	/* frame size = 0 */
 1566               	/* stack size = 0 */
 1567               	.L__stack_usage = 0
 354:../../test/testmtx.c ****   chThdSleepMilliseconds(50);
 1568               		.loc 1 354 0
 1569 0880 82E3      		ldi r24,lo8(50)
 1570 0882 90E0      		ldi r25,0
 1571               	.LVL160:
 1572 0884 0E94 0000 		call chThdSleep
 1573               	.LVL161:
 355:../../test/testmtx.c ****   chMtxLock(&m2);
 1574               		.loc 1 355 0
 1575 0888 80E0      		ldi r24,lo8(m2)
 1576 088a 90E0      		ldi r25,hi8(m2)
 1577 088c 0E94 0000 		call chMtxLock
 1578               	.LVL162:
 356:../../test/testmtx.c ****   chMtxUnlock();
 1579               		.loc 1 356 0
 1580 0890 0E94 0000 		call chMtxUnlock
 1581               	.LVL163:
 358:../../test/testmtx.c **** }
 1582               		.loc 1 358 0
 1583 0894 80E0      		ldi r24,0
 1584 0896 90E0      		ldi r25,0
 1585 0898 0895      		ret
 1586               		.cfi_endproc
 1587               	.LFE23:
 1590               	mtx3_execute:
 1591               	.LFB21:
 312:../../test/testmtx.c **** static void mtx3_execute(void) {
 1592               		.loc 1 312 0
 1593               		.cfi_startproc
 1594 089a 0F93      		push r16
 1595               	.LCFI30:
 1596               		.cfi_def_cfa_offset 3
 1597               		.cfi_offset 16, -2
 1598 089c 1F93      		push r17
 1599               	.LCFI31:
 1600               		.cfi_def_cfa_offset 4
 1601               		.cfi_offset 17, -3
 1602 089e CF93      		push r28
 1603               	.LCFI32:
 1604               		.cfi_def_cfa_offset 5
 1605               		.cfi_offset 28, -4
 1606 08a0 DF93      		push r29
 1607               	.LCFI33:
 1608               		.cfi_def_cfa_offset 6
 1609               		.cfi_offset 29, -5
 1610               	/* prologue: function */
 1611               	/* frame size = 0 */
 1612               	/* stack size = 4 */
 1613               	.L__stack_usage = 4
 315:../../test/testmtx.c ****   test_wait_tick();
 1614               		.loc 1 315 0
 1615 08a2 0E94 0000 		call test_wait_tick
 1616               	.LVL164:
 316:../../test/testmtx.c ****   time = chTimeNow();
 1617               		.loc 1 316 0
 1618 08a6 C091 0000 		lds r28,vtlist+6
 1619 08aa D091 0000 		lds r29,vtlist+6+1
 1620               	.LVL165:
 317:../../test/testmtx.c ****   threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriority()-5, thread3LL, 0);
 1621               		.loc 1 317 0
 1622 08ae E091 0000 		lds r30,rlist+11
 1623 08b2 F091 0000 		lds r31,rlist+11+1
 1624 08b6 4481      		ldd r20,Z+4
 1625 08b8 4550      		subi r20,lo8(-(-5))
 1626 08ba 00E0      		ldi r16,0
 1627 08bc 10E0      		ldi r17,0
 1628 08be 20E0      		ldi r18,lo8(gs(thread3LL))
 1629 08c0 30E0      		ldi r19,hi8(gs(thread3LL))
 1630 08c2 67E9      		ldi r22,lo8(-105)
 1631 08c4 70E0      		ldi r23,0
 1632 08c6 8091 0000 		lds r24,wa
 1633 08ca 9091 0000 		lds r25,wa+1
 1634 08ce 0E94 0000 		call chThdCreateStatic
 1635               	.LVL166:
 1636 08d2 9093 0000 		sts threads+1,r25
 1637 08d6 8093 0000 		sts threads,r24
 318:../../test/testmtx.c ****   threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriority()-4, thread3L, 0);
 1638               		.loc 1 318 0
 1639 08da E091 0000 		lds r30,rlist+11
 1640 08de F091 0000 		lds r31,rlist+11+1
 1641 08e2 4481      		ldd r20,Z+4
 1642 08e4 4450      		subi r20,lo8(-(-4))
 1643 08e6 20E0      		ldi r18,lo8(gs(thread3L))
 1644 08e8 30E0      		ldi r19,hi8(gs(thread3L))
 1645 08ea 67E9      		ldi r22,lo8(-105)
 1646 08ec 70E0      		ldi r23,0
 1647 08ee 8091 0000 		lds r24,wa+2
 1648 08f2 9091 0000 		lds r25,wa+2+1
 1649 08f6 0E94 0000 		call chThdCreateStatic
 1650               	.LVL167:
 1651 08fa 9093 0000 		sts threads+2+1,r25
 1652 08fe 8093 0000 		sts threads+2,r24
 319:../../test/testmtx.c ****   threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriority()-3, thread3M, 0);
 1653               		.loc 1 319 0
 1654 0902 E091 0000 		lds r30,rlist+11
 1655 0906 F091 0000 		lds r31,rlist+11+1
 1656 090a 4481      		ldd r20,Z+4
 1657 090c 4350      		subi r20,lo8(-(-3))
 1658 090e 20E0      		ldi r18,lo8(gs(thread3M))
 1659 0910 30E0      		ldi r19,hi8(gs(thread3M))
 1660 0912 67E9      		ldi r22,lo8(-105)
 1661 0914 70E0      		ldi r23,0
 1662 0916 8091 0000 		lds r24,wa+4
 1663 091a 9091 0000 		lds r25,wa+4+1
 1664 091e 0E94 0000 		call chThdCreateStatic
 1665               	.LVL168:
 1666 0922 9093 0000 		sts threads+4+1,r25
 1667 0926 8093 0000 		sts threads+4,r24
 320:../../test/testmtx.c ****   threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriority()-2, thread3H, 0);
 1668               		.loc 1 320 0
 1669 092a E091 0000 		lds r30,rlist+11
 1670 092e F091 0000 		lds r31,rlist+11+1
 1671 0932 4481      		ldd r20,Z+4
 1672 0934 4250      		subi r20,lo8(-(-2))
 1673 0936 20E0      		ldi r18,lo8(gs(thread3H))
 1674 0938 30E0      		ldi r19,hi8(gs(thread3H))
 1675 093a 67E9      		ldi r22,lo8(-105)
 1676 093c 70E0      		ldi r23,0
 1677 093e 8091 0000 		lds r24,wa+6
 1678 0942 9091 0000 		lds r25,wa+6+1
 1679 0946 0E94 0000 		call chThdCreateStatic
 1680               	.LVL169:
 1681 094a 9093 0000 		sts threads+6+1,r25
 1682 094e 8093 0000 		sts threads+6,r24
 321:../../test/testmtx.c ****   threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriority()-1, thread3HH, 0);
 1683               		.loc 1 321 0
 1684 0952 E091 0000 		lds r30,rlist+11
 1685 0956 F091 0000 		lds r31,rlist+11+1
 1686 095a 4481      		ldd r20,Z+4
 1687 095c 4150      		subi r20,lo8(-(-1))
 1688 095e 20E0      		ldi r18,lo8(gs(thread3HH))
 1689 0960 30E0      		ldi r19,hi8(gs(thread3HH))
 1690 0962 67E9      		ldi r22,lo8(-105)
 1691 0964 70E0      		ldi r23,0
 1692 0966 8091 0000 		lds r24,wa+8
 1693 096a 9091 0000 		lds r25,wa+8+1
 1694 096e 0E94 0000 		call chThdCreateStatic
 1695               	.LVL170:
 1696 0972 9093 0000 		sts threads+8+1,r25
 1697 0976 8093 0000 		sts threads+8,r24
 322:../../test/testmtx.c ****   test_wait_threads();
 1698               		.loc 1 322 0
 1699 097a 0E94 0000 		call test_wait_threads
 1700               	.LVL171:
 323:../../test/testmtx.c ****   test_assert_sequence(1, "ABCDE");
 1701               		.loc 1 323 0
 1702 097e 60E0      		ldi r22,lo8(.LC6)
 1703 0980 70E0      		ldi r23,hi8(.LC6)
 1704 0982 81E0      		ldi r24,lo8(1)
 1705 0984 90E0      		ldi r25,0
 1706 0986 0E94 0000 		call _test_assert_sequence
 1707               	.LVL172:
 1708 098a 8823      		tst r24
 1709 098c 01F0      		breq .L73
 1710               	/* epilogue start */
 325:../../test/testmtx.c **** }
 1711               		.loc 1 325 0
 1712 098e DF91      		pop r29
 1713 0990 CF91      		pop r28
 1714               	.LVL173:
 1715 0992 1F91      		pop r17
 1716 0994 0F91      		pop r16
 1717 0996 0895      		ret
 1718               	.LVL174:
 1719               	.L73:
 324:../../test/testmtx.c ****   test_assert_time_window(2, time + MS2ST(110), time + MS2ST(110) + ALLOWED_DELAY);
 1720               		.loc 1 324 0
 1721 0998 AE01      		movw r20,r28
 1722 099a 4D58      		subi r20,-115
 1723 099c 5F4F      		sbci r21,-1
 1724 099e BE01      		movw r22,r28
 1725 09a0 6259      		subi r22,-110
 1726 09a2 7F4F      		sbci r23,-1
 1727 09a4 82E0      		ldi r24,lo8(2)
 1728 09a6 90E0      		ldi r25,0
 1729               	/* epilogue start */
 325:../../test/testmtx.c **** }
 1730               		.loc 1 325 0
 1731 09a8 DF91      		pop r29
 1732 09aa CF91      		pop r28
 1733               	.LVL175:
 1734 09ac 1F91      		pop r17
 1735 09ae 0F91      		pop r16
 324:../../test/testmtx.c ****   test_assert_time_window(2, time + MS2ST(110), time + MS2ST(110) + ALLOWED_DELAY);
 1736               		.loc 1 324 0
 1737 09b0 0C94 0000 		jmp _test_assert_time_window
 1738               	.LVL176:
 1739               		.cfi_endproc
 1740               	.LFE21:
 1743               	mtx2_execute:
 1744               	.LFB14:
 194:../../test/testmtx.c **** static void mtx2_execute(void) {
 1745               		.loc 1 194 0
 1746               		.cfi_startproc
 1747 09b4 0F93      		push r16
 1748               	.LCFI34:
 1749               		.cfi_def_cfa_offset 3
 1750               		.cfi_offset 16, -2
 1751 09b6 1F93      		push r17
 1752               	.LCFI35:
 1753               		.cfi_def_cfa_offset 4
 1754               		.cfi_offset 17, -3
 1755 09b8 CF93      		push r28
 1756               	.LCFI36:
 1757               		.cfi_def_cfa_offset 5
 1758               		.cfi_offset 28, -4
 1759 09ba DF93      		push r29
 1760               	.LCFI37:
 1761               		.cfi_def_cfa_offset 6
 1762               		.cfi_offset 29, -5
 1763               	/* prologue: function */
 1764               	/* frame size = 0 */
 1765               	/* stack size = 4 */
 1766               	.L__stack_usage = 4
 197:../../test/testmtx.c ****   test_wait_tick();
 1767               		.loc 1 197 0
 1768 09bc 0E94 0000 		call test_wait_tick
 1769               	.LVL177:
 198:../../test/testmtx.c ****   time = chTimeNow();
 1770               		.loc 1 198 0
 1771 09c0 C091 0000 		lds r28,vtlist+6
 1772 09c4 D091 0000 		lds r29,vtlist+6+1
 1773               	.LVL178:
 199:../../test/testmtx.c ****   threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriority()-1, thread2H, 0);
 1774               		.loc 1 199 0
 1775 09c8 E091 0000 		lds r30,rlist+11
 1776 09cc F091 0000 		lds r31,rlist+11+1
 1777 09d0 4481      		ldd r20,Z+4
 1778 09d2 4150      		subi r20,lo8(-(-1))
 1779 09d4 00E0      		ldi r16,0
 1780 09d6 10E0      		ldi r17,0
 1781 09d8 20E0      		ldi r18,lo8(gs(thread2H))
 1782 09da 30E0      		ldi r19,hi8(gs(thread2H))
 1783 09dc 67E9      		ldi r22,lo8(-105)
 1784 09de 70E0      		ldi r23,0
 1785 09e0 8091 0000 		lds r24,wa
 1786 09e4 9091 0000 		lds r25,wa+1
 1787 09e8 0E94 0000 		call chThdCreateStatic
 1788               	.LVL179:
 1789 09ec 9093 0000 		sts threads+1,r25
 1790 09f0 8093 0000 		sts threads,r24
 200:../../test/testmtx.c ****   threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriority()-2, thread2M, 0);
 1791               		.loc 1 200 0
 1792 09f4 E091 0000 		lds r30,rlist+11
 1793 09f8 F091 0000 		lds r31,rlist+11+1
 1794 09fc 4481      		ldd r20,Z+4
 1795 09fe 4250      		subi r20,lo8(-(-2))
 1796 0a00 20E0      		ldi r18,lo8(gs(thread2M))
 1797 0a02 30E0      		ldi r19,hi8(gs(thread2M))
 1798 0a04 67E9      		ldi r22,lo8(-105)
 1799 0a06 70E0      		ldi r23,0
 1800 0a08 8091 0000 		lds r24,wa+2
 1801 0a0c 9091 0000 		lds r25,wa+2+1
 1802 0a10 0E94 0000 		call chThdCreateStatic
 1803               	.LVL180:
 1804 0a14 9093 0000 		sts threads+2+1,r25
 1805 0a18 8093 0000 		sts threads+2,r24
 201:../../test/testmtx.c ****   threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriority()-3, thread2L, 0);
 1806               		.loc 1 201 0
 1807 0a1c E091 0000 		lds r30,rlist+11
 1808 0a20 F091 0000 		lds r31,rlist+11+1
 1809 0a24 4481      		ldd r20,Z+4
 1810 0a26 4350      		subi r20,lo8(-(-3))
 1811 0a28 20E0      		ldi r18,lo8(gs(thread2L))
 1812 0a2a 30E0      		ldi r19,hi8(gs(thread2L))
 1813 0a2c 67E9      		ldi r22,lo8(-105)
 1814 0a2e 70E0      		ldi r23,0
 1815 0a30 8091 0000 		lds r24,wa+4
 1816 0a34 9091 0000 		lds r25,wa+4+1
 1817 0a38 0E94 0000 		call chThdCreateStatic
 1818               	.LVL181:
 1819 0a3c 9093 0000 		sts threads+4+1,r25
 1820 0a40 8093 0000 		sts threads+4,r24
 202:../../test/testmtx.c ****   test_wait_threads();
 1821               		.loc 1 202 0
 1822 0a44 0E94 0000 		call test_wait_threads
 1823               	.LVL182:
 203:../../test/testmtx.c ****   test_assert_sequence(1, "ABC");
 1824               		.loc 1 203 0
 1825 0a48 60E0      		ldi r22,lo8(.LC3)
 1826 0a4a 70E0      		ldi r23,hi8(.LC3)
 1827 0a4c 81E0      		ldi r24,lo8(1)
 1828 0a4e 90E0      		ldi r25,0
 1829 0a50 0E94 0000 		call _test_assert_sequence
 1830               	.LVL183:
 1831 0a54 8823      		tst r24
 1832 0a56 01F0      		breq .L76
 1833               	/* epilogue start */
 205:../../test/testmtx.c **** }
 1834               		.loc 1 205 0
 1835 0a58 DF91      		pop r29
 1836 0a5a CF91      		pop r28
 1837               	.LVL184:
 1838 0a5c 1F91      		pop r17
 1839 0a5e 0F91      		pop r16
 1840 0a60 0895      		ret
 1841               	.LVL185:
 1842               	.L76:
 204:../../test/testmtx.c ****   test_assert_time_window(2, time + MS2ST(100), time + MS2ST(100) + ALLOWED_DELAY);
 1843               		.loc 1 204 0
 1844 0a62 AE01      		movw r20,r28
 1845 0a64 4759      		subi r20,-105
 1846 0a66 5F4F      		sbci r21,-1
 1847 0a68 BE01      		movw r22,r28
 1848 0a6a 6C59      		subi r22,-100
 1849 0a6c 7F4F      		sbci r23,-1
 1850 0a6e 82E0      		ldi r24,lo8(2)
 1851 0a70 90E0      		ldi r25,0
 1852               	/* epilogue start */
 205:../../test/testmtx.c **** }
 1853               		.loc 1 205 0
 1854 0a72 DF91      		pop r29
 1855 0a74 CF91      		pop r28
 1856               	.LVL186:
 1857 0a76 1F91      		pop r17
 1858 0a78 0F91      		pop r16
 204:../../test/testmtx.c ****   test_assert_time_window(2, time + MS2ST(100), time + MS2ST(100) + ALLOWED_DELAY);
 1859               		.loc 1 204 0
 1860 0a7a 0C94 0000 		jmp _test_assert_time_window
 1861               	.LVL187:
 1862               		.cfi_endproc
 1863               	.LFE14:
 1866               	thread3HH:
 1867               	.LFB20:
 301:../../test/testmtx.c **** static msg_t thread3HH(void *p) {
 1868               		.loc 1 301 0
 1869               		.cfi_startproc
 1870               	.LVL188:
 1871               	/* prologue: function */
 1872               	/* frame size = 0 */
 1873               	/* stack size = 0 */
 1874               	.L__stack_usage = 0
 304:../../test/testmtx.c ****   chThdSleepMilliseconds(50);
 1875               		.loc 1 304 0
 1876 0a7e 82E3      		ldi r24,lo8(50)
 1877 0a80 90E0      		ldi r25,0
 1878               	.LVL189:
 1879 0a82 0E94 0000 		call chThdSleep
 1880               	.LVL190:
 305:../../test/testmtx.c ****   chMtxLock(&m2);
 1881               		.loc 1 305 0
 1882 0a86 80E0      		ldi r24,lo8(m2)
 1883 0a88 90E0      		ldi r25,hi8(m2)
 1884 0a8a 0E94 0000 		call chMtxLock
 1885               	.LVL191:
 306:../../test/testmtx.c ****   test_cpu_pulse(10);
 1886               		.loc 1 306 0
 1887 0a8e 8AE0      		ldi r24,lo8(10)
 1888 0a90 90E0      		ldi r25,0
 1889 0a92 0E94 0000 		call test_cpu_pulse
 1890               	.LVL192:
 307:../../test/testmtx.c ****   chMtxUnlock();
 1891               		.loc 1 307 0
 1892 0a96 0E94 0000 		call chMtxUnlock
 1893               	.LVL193:
 308:../../test/testmtx.c ****   test_emit_token('A');
 1894               		.loc 1 308 0
 1895 0a9a 81E4      		ldi r24,lo8(65)
 1896 0a9c 0E94 0000 		call test_emit_token
 1897               	.LVL194:
 310:../../test/testmtx.c **** }
 1898               		.loc 1 310 0
 1899 0aa0 80E0      		ldi r24,0
 1900 0aa2 90E0      		ldi r25,0
 1901 0aa4 0895      		ret
 1902               		.cfi_endproc
 1903               	.LFE20:
 1906               	thread3H:
 1907               	.LFB19:
 291:../../test/testmtx.c **** static msg_t thread3H(void *p) {
 1908               		.loc 1 291 0
 1909               		.cfi_startproc
 1910               	.LVL195:
 1911               	/* prologue: function */
 1912               	/* frame size = 0 */
 1913               	/* stack size = 0 */
 1914               	.L__stack_usage = 0
 294:../../test/testmtx.c ****   chThdSleepMilliseconds(40);
 1915               		.loc 1 294 0
 1916 0aa6 88E2      		ldi r24,lo8(40)
 1917 0aa8 90E0      		ldi r25,0
 1918               	.LVL196:
 1919 0aaa 0E94 0000 		call chThdSleep
 1920               	.LVL197:
 295:../../test/testmtx.c ****   test_cpu_pulse(20);
 1921               		.loc 1 295 0
 1922 0aae 84E1      		ldi r24,lo8(20)
 1923 0ab0 90E0      		ldi r25,0
 1924 0ab2 0E94 0000 		call test_cpu_pulse
 1925               	.LVL198:
 296:../../test/testmtx.c ****   test_emit_token('B');
 1926               		.loc 1 296 0
 1927 0ab6 82E4      		ldi r24,lo8(66)
 1928 0ab8 0E94 0000 		call test_emit_token
 1929               	.LVL199:
 298:../../test/testmtx.c **** }
 1930               		.loc 1 298 0
 1931 0abc 80E0      		ldi r24,0
 1932 0abe 90E0      		ldi r25,0
 1933 0ac0 0895      		ret
 1934               		.cfi_endproc
 1935               	.LFE19:
 1938               	thread3M:
 1939               	.LFB18:
 279:../../test/testmtx.c **** static msg_t thread3M(void *p) {
 1940               		.loc 1 279 0
 1941               		.cfi_startproc
 1942               	.LVL200:
 1943               	/* prologue: function */
 1944               	/* frame size = 0 */
 1945               	/* stack size = 0 */
 1946               	.L__stack_usage = 0
 282:../../test/testmtx.c ****   chThdSleepMilliseconds(20);
 1947               		.loc 1 282 0
 1948 0ac2 84E1      		ldi r24,lo8(20)
 1949 0ac4 90E0      		ldi r25,0
 1950               	.LVL201:
 1951 0ac6 0E94 0000 		call chThdSleep
 1952               	.LVL202:
 283:../../test/testmtx.c ****   chMtxLock(&m2);
 1953               		.loc 1 283 0
 1954 0aca 80E0      		ldi r24,lo8(m2)
 1955 0acc 90E0      		ldi r25,hi8(m2)
 1956 0ace 0E94 0000 		call chMtxLock
 1957               	.LVL203:
 284:../../test/testmtx.c ****   test_cpu_pulse(10);
 1958               		.loc 1 284 0
 1959 0ad2 8AE0      		ldi r24,lo8(10)
 1960 0ad4 90E0      		ldi r25,0
 1961 0ad6 0E94 0000 		call test_cpu_pulse
 1962               	.LVL204:
 285:../../test/testmtx.c ****   chMtxUnlock();
 1963               		.loc 1 285 0
 1964 0ada 0E94 0000 		call chMtxUnlock
 1965               	.LVL205:
 286:../../test/testmtx.c ****   test_emit_token('C');
 1966               		.loc 1 286 0
 1967 0ade 83E4      		ldi r24,lo8(67)
 1968 0ae0 0E94 0000 		call test_emit_token
 1969               	.LVL206:
 288:../../test/testmtx.c **** }
 1970               		.loc 1 288 0
 1971 0ae4 80E0      		ldi r24,0
 1972 0ae6 90E0      		ldi r25,0
 1973 0ae8 0895      		ret
 1974               		.cfi_endproc
 1975               	.LFE18:
 1978               	thread3L:
 1979               	.LFB17:
 263:../../test/testmtx.c **** static msg_t thread3L(void *p) {
 1980               		.loc 1 263 0
 1981               		.cfi_startproc
 1982               	.LVL207:
 1983               	/* prologue: function */
 1984               	/* frame size = 0 */
 1985               	/* stack size = 0 */
 1986               	.L__stack_usage = 0
 266:../../test/testmtx.c ****   chThdSleepMilliseconds(10);
 1987               		.loc 1 266 0
 1988 0aea 8AE0      		ldi r24,lo8(10)
 1989 0aec 90E0      		ldi r25,0
 1990               	.LVL208:
 1991 0aee 0E94 0000 		call chThdSleep
 1992               	.LVL209:
 267:../../test/testmtx.c ****   chMtxLock(&m2);
 1993               		.loc 1 267 0
 1994 0af2 80E0      		ldi r24,lo8(m2)
 1995 0af4 90E0      		ldi r25,hi8(m2)
 1996 0af6 0E94 0000 		call chMtxLock
 1997               	.LVL210:
 268:../../test/testmtx.c ****   test_cpu_pulse(20);
 1998               		.loc 1 268 0
 1999 0afa 84E1      		ldi r24,lo8(20)
 2000 0afc 90E0      		ldi r25,0
 2001 0afe 0E94 0000 		call test_cpu_pulse
 2002               	.LVL211:
 269:../../test/testmtx.c ****   chMtxLock(&m1);
 2003               		.loc 1 269 0
 2004 0b02 80E0      		ldi r24,lo8(m1)
 2005 0b04 90E0      		ldi r25,hi8(m1)
 2006 0b06 0E94 0000 		call chMtxLock
 2007               	.LVL212:
 270:../../test/testmtx.c ****   test_cpu_pulse(10);
 2008               		.loc 1 270 0
 2009 0b0a 8AE0      		ldi r24,lo8(10)
 2010 0b0c 90E0      		ldi r25,0
 2011 0b0e 0E94 0000 		call test_cpu_pulse
 2012               	.LVL213:
 271:../../test/testmtx.c ****   chMtxUnlock();
 2013               		.loc 1 271 0
 2014 0b12 0E94 0000 		call chMtxUnlock
 2015               	.LVL214:
 272:../../test/testmtx.c ****   test_cpu_pulse(10);
 2016               		.loc 1 272 0
 2017 0b16 8AE0      		ldi r24,lo8(10)
 2018 0b18 90E0      		ldi r25,0
 2019 0b1a 0E94 0000 		call test_cpu_pulse
 2020               	.LVL215:
 273:../../test/testmtx.c ****   chMtxUnlock();
 2021               		.loc 1 273 0
 2022 0b1e 0E94 0000 		call chMtxUnlock
 2023               	.LVL216:
 274:../../test/testmtx.c ****   test_emit_token('D');
 2024               		.loc 1 274 0
 2025 0b22 84E4      		ldi r24,lo8(68)
 2026 0b24 0E94 0000 		call test_emit_token
 2027               	.LVL217:
 276:../../test/testmtx.c **** }
 2028               		.loc 1 276 0
 2029 0b28 80E0      		ldi r24,0
 2030 0b2a 90E0      		ldi r25,0
 2031 0b2c 0895      		ret
 2032               		.cfi_endproc
 2033               	.LFE17:
 2036               	thread3LL:
 2037               	.LFB16:
 252:../../test/testmtx.c **** static msg_t thread3LL(void *p) {
 2038               		.loc 1 252 0
 2039               		.cfi_startproc
 2040               	.LVL218:
 2041               	/* prologue: function */
 2042               	/* frame size = 0 */
 2043               	/* stack size = 0 */
 2044               	.L__stack_usage = 0
 255:../../test/testmtx.c ****   chMtxLock(&m1);
 2045               		.loc 1 255 0
 2046 0b2e 80E0      		ldi r24,lo8(m1)
 2047 0b30 90E0      		ldi r25,hi8(m1)
 2048               	.LVL219:
 2049 0b32 0E94 0000 		call chMtxLock
 2050               	.LVL220:
 256:../../test/testmtx.c ****   test_cpu_pulse(30);
 2051               		.loc 1 256 0
 2052 0b36 8EE1      		ldi r24,lo8(30)
 2053 0b38 90E0      		ldi r25,0
 2054 0b3a 0E94 0000 		call test_cpu_pulse
 2055               	.LVL221:
 257:../../test/testmtx.c ****   chMtxUnlock();
 2056               		.loc 1 257 0
 2057 0b3e 0E94 0000 		call chMtxUnlock
 2058               	.LVL222:
 258:../../test/testmtx.c ****   test_emit_token('E');
 2059               		.loc 1 258 0
 2060 0b42 85E4      		ldi r24,lo8(69)
 2061 0b44 0E94 0000 		call test_emit_token
 2062               	.LVL223:
 260:../../test/testmtx.c **** }
 2063               		.loc 1 260 0
 2064 0b48 80E0      		ldi r24,0
 2065 0b4a 90E0      		ldi r25,0
 2066 0b4c 0895      		ret
 2067               		.cfi_endproc
 2068               	.LFE16:
 2071               	thread2L:
 2072               	.LFB11:
 161:../../test/testmtx.c **** static msg_t thread2L(void *p) {
 2073               		.loc 1 161 0
 2074               		.cfi_startproc
 2075               	.LVL224:
 2076               	/* prologue: function */
 2077               	/* frame size = 0 */
 2078               	/* stack size = 0 */
 2079               	.L__stack_usage = 0
 164:../../test/testmtx.c ****   chMtxLock(&m1);
 2080               		.loc 1 164 0
 2081 0b4e 80E0      		ldi r24,lo8(m1)
 2082 0b50 90E0      		ldi r25,hi8(m1)
 2083               	.LVL225:
 2084 0b52 0E94 0000 		call chMtxLock
 2085               	.LVL226:
 165:../../test/testmtx.c ****   test_cpu_pulse(40);
 2086               		.loc 1 165 0
 2087 0b56 88E2      		ldi r24,lo8(40)
 2088 0b58 90E0      		ldi r25,0
 2089 0b5a 0E94 0000 		call test_cpu_pulse
 2090               	.LVL227:
 166:../../test/testmtx.c ****   chMtxUnlock();
 2091               		.loc 1 166 0
 2092 0b5e 0E94 0000 		call chMtxUnlock
 2093               	.LVL228:
 167:../../test/testmtx.c ****   test_cpu_pulse(10);
 2094               		.loc 1 167 0
 2095 0b62 8AE0      		ldi r24,lo8(10)
 2096 0b64 90E0      		ldi r25,0
 2097 0b66 0E94 0000 		call test_cpu_pulse
 2098               	.LVL229:
 168:../../test/testmtx.c ****   test_emit_token('C');
 2099               		.loc 1 168 0
 2100 0b6a 83E4      		ldi r24,lo8(67)
 2101 0b6c 0E94 0000 		call test_emit_token
 2102               	.LVL230:
 170:../../test/testmtx.c **** }
 2103               		.loc 1 170 0
 2104 0b70 80E0      		ldi r24,0
 2105 0b72 90E0      		ldi r25,0
 2106 0b74 0895      		ret
 2107               		.cfi_endproc
 2108               	.LFE11:
 2111               	thread2M:
 2112               	.LFB12:
 173:../../test/testmtx.c **** static msg_t thread2M(void *p) {
 2113               		.loc 1 173 0
 2114               		.cfi_startproc
 2115               	.LVL231:
 2116               	/* prologue: function */
 2117               	/* frame size = 0 */
 2118               	/* stack size = 0 */
 2119               	.L__stack_usage = 0
 176:../../test/testmtx.c ****   chThdSleepMilliseconds(20);
 2120               		.loc 1 176 0
 2121 0b76 84E1      		ldi r24,lo8(20)
 2122 0b78 90E0      		ldi r25,0
 2123               	.LVL232:
 2124 0b7a 0E94 0000 		call chThdSleep
 2125               	.LVL233:
 177:../../test/testmtx.c ****   test_cpu_pulse(40);
 2126               		.loc 1 177 0
 2127 0b7e 88E2      		ldi r24,lo8(40)
 2128 0b80 90E0      		ldi r25,0
 2129 0b82 0E94 0000 		call test_cpu_pulse
 2130               	.LVL234:
 178:../../test/testmtx.c ****   test_emit_token('B');
 2131               		.loc 1 178 0
 2132 0b86 82E4      		ldi r24,lo8(66)
 2133 0b88 0E94 0000 		call test_emit_token
 2134               	.LVL235:
 180:../../test/testmtx.c **** }
 2135               		.loc 1 180 0
 2136 0b8c 80E0      		ldi r24,0
 2137 0b8e 90E0      		ldi r25,0
 2138 0b90 0895      		ret
 2139               		.cfi_endproc
 2140               	.LFE12:
 2143               	thread2H:
 2144               	.LFB13:
 183:../../test/testmtx.c **** static msg_t thread2H(void *p) {
 2145               		.loc 1 183 0
 2146               		.cfi_startproc
 2147               	.LVL236:
 2148               	/* prologue: function */
 2149               	/* frame size = 0 */
 2150               	/* stack size = 0 */
 2151               	.L__stack_usage = 0
 186:../../test/testmtx.c ****   chThdSleepMilliseconds(40);
 2152               		.loc 1 186 0
 2153 0b92 88E2      		ldi r24,lo8(40)
 2154 0b94 90E0      		ldi r25,0
 2155               	.LVL237:
 2156 0b96 0E94 0000 		call chThdSleep
 2157               	.LVL238:
 187:../../test/testmtx.c ****   chMtxLock(&m1);
 2158               		.loc 1 187 0
 2159 0b9a 80E0      		ldi r24,lo8(m1)
 2160 0b9c 90E0      		ldi r25,hi8(m1)
 2161 0b9e 0E94 0000 		call chMtxLock
 2162               	.LVL239:
 188:../../test/testmtx.c ****   test_cpu_pulse(10);
 2163               		.loc 1 188 0
 2164 0ba2 8AE0      		ldi r24,lo8(10)
 2165 0ba4 90E0      		ldi r25,0
 2166 0ba6 0E94 0000 		call test_cpu_pulse
 2167               	.LVL240:
 189:../../test/testmtx.c ****   chMtxUnlock();
 2168               		.loc 1 189 0
 2169 0baa 0E94 0000 		call chMtxUnlock
 2170               	.LVL241:
 190:../../test/testmtx.c ****   test_emit_token('A');
 2171               		.loc 1 190 0
 2172 0bae 81E4      		ldi r24,lo8(65)
 2173 0bb0 0E94 0000 		call test_emit_token
 2174               	.LVL242:
 192:../../test/testmtx.c **** }
 2175               		.loc 1 192 0
 2176 0bb4 80E0      		ldi r24,0
 2177 0bb6 90E0      		ldi r25,0
 2178 0bb8 0895      		ret
 2179               		.cfi_endproc
 2180               	.LFE13:
 2182               	.global	patternmtx
 2183               		.section	.rodata
 2186               	patternmtx:
 2187 0000 0000      		.word	testmtx1
 2188 0002 0000      		.word	testmtx2
 2189 0004 0000      		.word	testmtx3
 2190 0006 0000      		.word	testmtx4
 2191 0008 0000      		.word	testmtx5
 2192 000a 0000      		.word	testmtx6
 2193 000c 0000      		.word	testmtx7
 2194 000e 0000      		.word	testmtx8
 2195 0010 0000      		.word	0
 2196               	.global	testmtx8
 2197               		.section	.rodata.str1.1
 2198               	.LC7:
 2199 0014 436F 6E64 		.string	"CondVar, boost test"
 2199      5661 722C 
 2199      2062 6F6F 
 2199      7374 2074 
 2199      6573 7400 
 2200               		.section	.rodata
 2203               	testmtx8:
 2204 0012 0000      		.word	.LC7
 2205 0014 0000      		.word	gs(mtx8_setup)
 2206 0016 0000      		.word	0
 2207 0018 0000      		.word	gs(mtx8_execute)
 2208               	.global	testmtx7
 2209               		.section	.rodata.str1.1
 2210               	.LC8:
 2211 0028 436F 6E64 		.string	"CondVar, broadcast test"
 2211      5661 722C 
 2211      2062 726F 
 2211      6164 6361 
 2211      7374 2074 
 2212               		.section	.rodata
 2215               	testmtx7:
 2216 001a 0000      		.word	.LC8
 2217 001c 0000      		.word	gs(mtx7_setup)
 2218 001e 0000      		.word	0
 2219 0020 0000      		.word	gs(mtx7_execute)
 2220               	.global	testmtx6
 2221               		.section	.rodata.str1.1
 2222               	.LC9:
 2223 0040 436F 6E64 		.string	"CondVar, signal test"
 2223      5661 722C 
 2223      2073 6967 
 2223      6E61 6C20 
 2223      7465 7374 
 2224               		.section	.rodata
 2227               	testmtx6:
 2228 0022 0000      		.word	.LC9
 2229 0024 0000      		.word	gs(mtx6_setup)
 2230 0026 0000      		.word	0
 2231 0028 0000      		.word	gs(mtx6_execute)
 2232               	.global	testmtx5
 2233               		.section	.rodata.str1.1
 2234               	.LC10:
 2235 0055 4D75 7465 		.string	"Mutexes, status"
 2235      7865 732C 
 2235      2073 7461 
 2235      7475 7300 
 2236               		.section	.rodata
 2239               	testmtx5:
 2240 002a 0000      		.word	.LC10
 2241 002c 0000      		.word	gs(mtx5_setup)
 2242 002e 0000      		.word	0
 2243 0030 0000      		.word	gs(mtx5_execute)
 2244               	.global	testmtx4
 2245               		.section	.rodata.str1.1
 2246               	.LC11:
 2247 0065 4D75 7465 		.string	"Mutexes, priority return"
 2247      7865 732C 
 2247      2070 7269 
 2247      6F72 6974 
 2247      7920 7265 
 2248               		.section	.rodata
 2251               	testmtx4:
 2252 0032 0000      		.word	.LC11
 2253 0034 0000      		.word	gs(mtx4_setup)
 2254 0036 0000      		.word	0
 2255 0038 0000      		.word	gs(mtx4_execute)
 2256               	.global	testmtx3
 2257               		.section	.rodata.str1.1
 2258               	.LC12:
 2259 007e 4D75 7465 		.string	"Mutexes, priority inheritance, complex case"
 2259      7865 732C 
 2259      2070 7269 
 2259      6F72 6974 
 2259      7920 696E 
 2260               		.section	.rodata
 2263               	testmtx3:
 2264 003a 0000      		.word	.LC12
 2265 003c 0000      		.word	gs(mtx3_setup)
 2266 003e 0000      		.word	0
 2267 0040 0000      		.word	gs(mtx3_execute)
 2268               	.global	testmtx2
 2269               		.section	.rodata.str1.1
 2270               	.LC13:
 2271 00aa 4D75 7465 		.string	"Mutexes, priority inheritance, simple case"
 2271      7865 732C 
 2271      2070 7269 
 2271      6F72 6974 
 2271      7920 696E 
 2272               		.section	.rodata
 2275               	testmtx2:
 2276 0042 0000      		.word	.LC13
 2277 0044 0000      		.word	gs(mtx2_setup)
 2278 0046 0000      		.word	0
 2279 0048 0000      		.word	gs(mtx2_execute)
 2280               	.global	testmtx1
 2281               		.section	.rodata.str1.1
 2282               	.LC14:
 2283 00d5 4D75 7465 		.string	"Mutexes, priority enqueuing test"
 2283      7865 732C 
 2283      2070 7269 
 2283      6F72 6974 
 2283      7920 656E 
 2284               		.section	.rodata
 2287               	testmtx1:
 2288 004a 0000      		.word	.LC14
 2289 004c 0000      		.word	gs(mtx1_setup)
 2290 004e 0000      		.word	0
 2291 0050 0000      		.word	gs(mtx1_execute)
 2292               		.data
 2295               	m1:
 2296 0000 0000      		.word	m1
 2297 0002 0000      		.word	m1
 2298 0004 0000      		.word	0
 2299 0006 0000      		.word	0
 2302               	m2:
 2303 0008 0000      		.word	m2
 2304 000a 0000      		.word	m2
 2305 000c 0000      		.word	0
 2306 000e 0000      		.word	0
 2309               	c1:
 2310 0010 0000      		.word	c1
 2311 0012 0000      		.word	c1
 2312               		.text
 2313               	.Letext0:
 2314               		.file 2 "/usr/local/cross/lib/gcc/avr/4.7.2/include/stddef.h"
 2315               		.file 3 "/usr/local/cross/lib/gcc/avr/4.7.2/../../../../avr/include/stdint.h"
 2316               		.file 4 "../../os/ports/GCC/AVR/chtypes.h"
 2317               		.file 5 "../../os/kernel/include/chlists.h"
 2318               		.file 6 "../../os/kernel/include/chthreads.h"
 2319               		.file 7 "../../os/ports/GCC/AVR/chcore.h"
 2320               		.file 8 "../../os/kernel/include/chvt.h"
 2321               		.file 9 "../../os/kernel/include/chschd.h"
 2322               		.file 10 "../../os/kernel/include/chmtx.h"
 2323               		.file 11 "../../os/kernel/include/chcond.h"
 2324               		.file 12 "../../test/test.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 testmtx.c
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccvUyDEN.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccvUyDEN.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccvUyDEN.s:4      *ABS*:000000000000003f __SREG__
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccvUyDEN.s:5      *ABS*:000000000000003b __RAMPZ__
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccvUyDEN.s:6      *ABS*:0000000000000000 __tmp_reg__
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccvUyDEN.s:7      *ABS*:0000000000000001 __zero_reg__
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccvUyDEN.s:22     .text:0000000000000000 mtx8_execute
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccvUyDEN.s:258    .text:0000000000000110 thread11
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccvUyDEN.s:210    .text:00000000000000e6 thread10
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccvUyDEN.s:124    .text:00000000000000a2 thread12
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccvUyDEN.s:2309   .data:0000000000000010 c1
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccvUyDEN.s:2302   .data:0000000000000008 m2
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccvUyDEN.s:167    .text:00000000000000c4 thread1
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccvUyDEN.s:2295   .data:0000000000000000 m1
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccvUyDEN.s:316    .text:000000000000014a mtx8_setup
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccvUyDEN.s:343    .text:0000000000000162 mtx7_setup
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccvUyDEN.s:365    .text:0000000000000172 mtx6_setup
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccvUyDEN.s:387    .text:0000000000000182 mtx5_setup
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccvUyDEN.s:404    .text:000000000000018a mtx4_setup
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccvUyDEN.s:426    .text:000000000000019a mtx3_setup
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccvUyDEN.s:448    .text:00000000000001aa mtx2_setup
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccvUyDEN.s:465    .text:00000000000001b2 mtx1_setup
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccvUyDEN.s:490    .text:00000000000001ba mtx7_execute
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccvUyDEN.s:616    .text:000000000000029c mtx6_execute
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccvUyDEN.s:777    .text:00000000000003a6 mtx1_execute
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccvUyDEN.s:929    .text:00000000000004b0 mtx5_execute
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccvUyDEN.s:1102   .text:00000000000005a6 mtx4_execute
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccvUyDEN.s:1559   .text:0000000000000880 thread4a
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccvUyDEN.s:1528   .text:0000000000000866 thread4b
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccvUyDEN.s:1590   .text:000000000000089a mtx3_execute
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccvUyDEN.s:2036   .text:0000000000000b2e thread3LL
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccvUyDEN.s:1978   .text:0000000000000aea thread3L
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccvUyDEN.s:1938   .text:0000000000000ac2 thread3M
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccvUyDEN.s:1906   .text:0000000000000aa6 thread3H
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccvUyDEN.s:1866   .text:0000000000000a7e thread3HH
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccvUyDEN.s:1743   .text:00000000000009b4 mtx2_execute
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccvUyDEN.s:2143   .text:0000000000000b92 thread2H
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccvUyDEN.s:2111   .text:0000000000000b76 thread2M
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccvUyDEN.s:2071   .text:0000000000000b4e thread2L
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccvUyDEN.s:2186   .rodata:0000000000000000 patternmtx
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccvUyDEN.s:2287   .rodata:000000000000004a testmtx1
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccvUyDEN.s:2275   .rodata:0000000000000042 testmtx2
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccvUyDEN.s:2263   .rodata:000000000000003a testmtx3
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccvUyDEN.s:2251   .rodata:0000000000000032 testmtx4
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccvUyDEN.s:2239   .rodata:000000000000002a testmtx5
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccvUyDEN.s:2227   .rodata:0000000000000022 testmtx6
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccvUyDEN.s:2215   .rodata:000000000000001a testmtx7
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccvUyDEN.s:2203   .rodata:0000000000000012 testmtx8

UNDEFINED SYMBOLS
rlist
wa
chThdCreateStatic
threads
chCondSignal
test_wait_threads
_test_assert_sequence
chMtxLock
test_emit_token
chMtxUnlock
chCondWait
chCondWaitTimeout
chCondInit
chMtxInit
chCondBroadcast
chCondSignalI
chSchRescheduleS
_test_assert
chMtxTryLock
chMtxUnlockS
chMtxUnlockAll
chThdSleep
test_wait_tick
vtlist
_test_assert_time_window
test_cpu_pulse
__do_copy_data
