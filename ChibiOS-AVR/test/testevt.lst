   1               		.file	"testevt.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  12               	evt3_setup:
  13               	.LFB16:
  14               		.file 1 "../../test/testevt.c"
   1:../../test/testevt.c **** /*
   2:../../test/testevt.c ****     ChibiOS/RT - Copyright (C) 2006,2007,2008,2009,2010,
   3:../../test/testevt.c ****                  2011,2012 Giovanni Di Sirio.
   4:../../test/testevt.c **** 
   5:../../test/testevt.c ****     This file is part of ChibiOS/RT.
   6:../../test/testevt.c **** 
   7:../../test/testevt.c ****     ChibiOS/RT is free software; you can redistribute it and/or modify
   8:../../test/testevt.c ****     it under the terms of the GNU General Public License as published by
   9:../../test/testevt.c ****     the Free Software Foundation; either version 3 of the License, or
  10:../../test/testevt.c ****     (at your option) any later version.
  11:../../test/testevt.c **** 
  12:../../test/testevt.c ****     ChibiOS/RT is distributed in the hope that it will be useful,
  13:../../test/testevt.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:../../test/testevt.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:../../test/testevt.c ****     GNU General Public License for more details.
  16:../../test/testevt.c **** 
  17:../../test/testevt.c ****     You should have received a copy of the GNU General Public License
  18:../../test/testevt.c ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  19:../../test/testevt.c **** */
  20:../../test/testevt.c **** 
  21:../../test/testevt.c **** #include "ch.h"
  22:../../test/testevt.c **** #include "test.h"
  23:../../test/testevt.c **** 
  24:../../test/testevt.c **** /**
  25:../../test/testevt.c ****  * @page test_events Events test
  26:../../test/testevt.c ****  *
  27:../../test/testevt.c ****  * File: @ref testevt.c
  28:../../test/testevt.c ****  *
  29:../../test/testevt.c ****  * <h2>Description</h2>
  30:../../test/testevt.c ****  * This module implements the test sequence for the @ref events subsystem.
  31:../../test/testevt.c ****  *
  32:../../test/testevt.c ****  * <h2>Objective</h2>
  33:../../test/testevt.c ****  * Objective of the test module is to cover 100% of the @ref events subsystem.
  34:../../test/testevt.c ****  *
  35:../../test/testevt.c ****  * <h2>Preconditions</h2>
  36:../../test/testevt.c ****  * The module requires the following kernel options:
  37:../../test/testevt.c ****  * - @p CH_USE_EVENTS
  38:../../test/testevt.c ****  * - @p CH_USE_EVENTS_TIMEOUT
  39:../../test/testevt.c ****  * .
  40:../../test/testevt.c ****  * In case some of the required options are not enabled then some or all tests
  41:../../test/testevt.c ****  * may be skipped.
  42:../../test/testevt.c ****  *
  43:../../test/testevt.c ****  * <h2>Test Cases</h2>
  44:../../test/testevt.c ****  * - @subpage test_events_001
  45:../../test/testevt.c ****  * - @subpage test_events_002
  46:../../test/testevt.c ****  * - @subpage test_events_003
  47:../../test/testevt.c ****  * .
  48:../../test/testevt.c ****  * @file testevt.c
  49:../../test/testevt.c ****  * @brief Events test source file
  50:../../test/testevt.c ****  * @file testevt.h
  51:../../test/testevt.c ****  * @brief Events test header file
  52:../../test/testevt.c ****  */
  53:../../test/testevt.c **** 
  54:../../test/testevt.c **** #if CH_USE_EVENTS || defined(__DOXYGEN__)
  55:../../test/testevt.c **** 
  56:../../test/testevt.c **** #define ALLOWED_DELAY MS2ST(5)
  57:../../test/testevt.c **** 
  58:../../test/testevt.c **** /*
  59:../../test/testevt.c ****  * Note, the static initializers are not really required because the
  60:../../test/testevt.c ****  * variables are explicitly initialized in each test case. It is done in order
  61:../../test/testevt.c ****  * to test the macros.
  62:../../test/testevt.c ****  */
  63:../../test/testevt.c **** static EVENTSOURCE_DECL(es1);
  64:../../test/testevt.c **** static EVENTSOURCE_DECL(es2);
  65:../../test/testevt.c **** 
  66:../../test/testevt.c **** /**
  67:../../test/testevt.c ****  * @page test_events_001 Events registration and dispatch
  68:../../test/testevt.c ****  *
  69:../../test/testevt.c ****  * <h2>Description</h2>
  70:../../test/testevt.c ****  * Two event listeners are registered on an event source and then unregistered
  71:../../test/testevt.c ****  * in the same order.<br>
  72:../../test/testevt.c ****  * The test expects that the even source has listeners after the registrations
  73:../../test/testevt.c ****  * and after the first unregistration, then, after the second unegistration,
  74:../../test/testevt.c ****  * the test expects no more listeners.<br>
  75:../../test/testevt.c ****  * In the second part the test dispatches three event flags and verifies that
  76:../../test/testevt.c ****  * the associated event handlers are invoked in LSb-first order.
  77:../../test/testevt.c ****  */
  78:../../test/testevt.c **** 
  79:../../test/testevt.c **** static void evt1_setup(void) {
  80:../../test/testevt.c **** 
  81:../../test/testevt.c ****   chEvtGetAndClearEvents(ALL_EVENTS);
  82:../../test/testevt.c **** }
  83:../../test/testevt.c **** 
  84:../../test/testevt.c **** static void h1(eventid_t id) {(void)id;test_emit_token('A');}
  85:../../test/testevt.c **** static void h2(eventid_t id) {(void)id;test_emit_token('B');}
  86:../../test/testevt.c **** static void h3(eventid_t id) {(void)id;test_emit_token('C');}
  87:../../test/testevt.c **** static ROMCONST evhandler_t evhndl[] = {h1, h2, h3};
  88:../../test/testevt.c **** 
  89:../../test/testevt.c **** static void evt1_execute(void) {
  90:../../test/testevt.c ****   EventListener el1, el2;
  91:../../test/testevt.c **** 
  92:../../test/testevt.c ****   /*
  93:../../test/testevt.c ****    * Testing chEvtRegisterMask() and chEvtUnregister().
  94:../../test/testevt.c ****    */
  95:../../test/testevt.c ****   chEvtInit(&es1);
  96:../../test/testevt.c ****   chEvtRegisterMask(&es1, &el1, 1);
  97:../../test/testevt.c ****   chEvtRegisterMask(&es1, &el2, 2);
  98:../../test/testevt.c ****   test_assert(1, chEvtIsListeningI(&es1), "no listener");
  99:../../test/testevt.c ****   chEvtUnregister(&es1, &el1);
 100:../../test/testevt.c ****   test_assert(2, chEvtIsListeningI(&es1), "no listener");
 101:../../test/testevt.c ****   chEvtUnregister(&es1, &el2);
 102:../../test/testevt.c ****   test_assert(3, !chEvtIsListeningI(&es1), "stuck listener");
 103:../../test/testevt.c **** 
 104:../../test/testevt.c ****   /*
 105:../../test/testevt.c ****    * Testing chEvtDispatch().
 106:../../test/testevt.c ****    */
 107:../../test/testevt.c ****   chEvtDispatch(evhndl, 7);
 108:../../test/testevt.c ****   test_assert_sequence(4, "ABC");
 109:../../test/testevt.c **** }
 110:../../test/testevt.c **** 
 111:../../test/testevt.c **** ROMCONST struct testcase testevt1 = {
 112:../../test/testevt.c ****   "Events, registration and dispatch",
 113:../../test/testevt.c ****   evt1_setup,
 114:../../test/testevt.c ****   NULL,
 115:../../test/testevt.c ****   evt1_execute
 116:../../test/testevt.c **** };
 117:../../test/testevt.c **** 
 118:../../test/testevt.c **** /**
 119:../../test/testevt.c ****  * @page test_events_002 Events wait and broadcast
 120:../../test/testevt.c ****  *
 121:../../test/testevt.c ****  * <h2>Description</h2>
 122:../../test/testevt.c ****  * In this test the following APIs are indipently tested by starting threads
 123:../../test/testevt.c ****  * that signal/broadcast events after fixed delays:
 124:../../test/testevt.c ****  * - @p chEvtWaitOne()
 125:../../test/testevt.c ****  * - @p chEvtWaitAny()
 126:../../test/testevt.c ****  * - @p chEvtWaitAll()
 127:../../test/testevt.c ****  * .
 128:../../test/testevt.c ****  * After each test phase the test verifies that the events have been served at
 129:../../test/testevt.c ****  * the expected time and that there are no stuck event flags.
 130:../../test/testevt.c ****  */
 131:../../test/testevt.c **** 
 132:../../test/testevt.c **** static void evt2_setup(void) {
 133:../../test/testevt.c **** 
 134:../../test/testevt.c ****   chEvtGetAndClearEvents(ALL_EVENTS);
 135:../../test/testevt.c **** }
 136:../../test/testevt.c **** 
 137:../../test/testevt.c **** static msg_t thread1(void *p) {
 138:../../test/testevt.c **** 
 139:../../test/testevt.c ****   chThdSleepMilliseconds(50);
 140:../../test/testevt.c ****   chEvtSignal((Thread *)p, 1);
 141:../../test/testevt.c ****   return 0;
 142:../../test/testevt.c **** }
 143:../../test/testevt.c **** 
 144:../../test/testevt.c **** static msg_t thread2(void *p) {
 145:../../test/testevt.c **** 
 146:../../test/testevt.c ****   (void)p;
 147:../../test/testevt.c ****   chEvtBroadcast(&es1);
 148:../../test/testevt.c ****   chThdSleepMilliseconds(50);
 149:../../test/testevt.c ****   chEvtBroadcast(&es2);
 150:../../test/testevt.c ****   return 0;
 151:../../test/testevt.c **** }
 152:../../test/testevt.c **** 
 153:../../test/testevt.c **** static void evt2_execute(void) {
 154:../../test/testevt.c ****   eventmask_t m;
 155:../../test/testevt.c ****   EventListener el1, el2;
 156:../../test/testevt.c ****   systime_t target_time;
 157:../../test/testevt.c **** 
 158:../../test/testevt.c ****   /*
 159:../../test/testevt.c ****    * Test on chEvtWaitOne() without wait.
 160:../../test/testevt.c ****    */
 161:../../test/testevt.c ****   chEvtAddEvents(5);
 162:../../test/testevt.c ****   m = chEvtWaitOne(ALL_EVENTS);
 163:../../test/testevt.c ****   test_assert(1, m == 1, "single event error");
 164:../../test/testevt.c ****   m = chEvtWaitOne(ALL_EVENTS);
 165:../../test/testevt.c ****   test_assert(2, m == 4, "single event error");
 166:../../test/testevt.c ****   m = chEvtGetAndClearEvents(ALL_EVENTS);
 167:../../test/testevt.c ****   test_assert(3, m == 0, "stuck event");
 168:../../test/testevt.c **** 
 169:../../test/testevt.c ****   /*
 170:../../test/testevt.c ****    * Test on chEvtWaitOne() with wait.
 171:../../test/testevt.c ****    */
 172:../../test/testevt.c ****   test_wait_tick();
 173:../../test/testevt.c ****   target_time = chTimeNow() + MS2ST(50);
 174:../../test/testevt.c ****   threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriority() - 1,
 175:../../test/testevt.c ****                                  thread1, chThdSelf());
 176:../../test/testevt.c ****   m = chEvtWaitOne(ALL_EVENTS);
 177:../../test/testevt.c ****   test_assert_time_window(4, target_time, target_time + ALLOWED_DELAY);
 178:../../test/testevt.c ****   test_assert(5, m == 1, "single event error");
 179:../../test/testevt.c ****   m = chEvtGetAndClearEvents(ALL_EVENTS);
 180:../../test/testevt.c ****   test_assert(6, m == 0, "stuck event");
 181:../../test/testevt.c ****   test_wait_threads();
 182:../../test/testevt.c **** 
 183:../../test/testevt.c ****   /*
 184:../../test/testevt.c ****    * Test on chEvtWaitAny() without wait.
 185:../../test/testevt.c ****    */
 186:../../test/testevt.c ****   chEvtAddEvents(5);
 187:../../test/testevt.c ****   m = chEvtWaitAny(ALL_EVENTS);
 188:../../test/testevt.c ****   test_assert(7, m == 5, "unexpected pending bit");
 189:../../test/testevt.c ****   m = chEvtGetAndClearEvents(ALL_EVENTS);
 190:../../test/testevt.c ****   test_assert(8, m == 0, "stuck event");
 191:../../test/testevt.c **** 
 192:../../test/testevt.c ****   /*
 193:../../test/testevt.c ****    * Test on chEvtWaitAny() with wait.
 194:../../test/testevt.c ****    */
 195:../../test/testevt.c ****   test_wait_tick();
 196:../../test/testevt.c ****   target_time = chTimeNow() + MS2ST(50);
 197:../../test/testevt.c ****   threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriority() - 1,
 198:../../test/testevt.c ****                                  thread1, chThdSelf());
 199:../../test/testevt.c ****   m = chEvtWaitAny(ALL_EVENTS);
 200:../../test/testevt.c ****   test_assert_time_window(9, target_time, target_time + ALLOWED_DELAY);
 201:../../test/testevt.c ****   test_assert(10, m == 1, "single event error");
 202:../../test/testevt.c ****   m = chEvtGetAndClearEvents(ALL_EVENTS);
 203:../../test/testevt.c ****   test_assert(11, m == 0, "stuck event");
 204:../../test/testevt.c ****   test_wait_threads();
 205:../../test/testevt.c **** 
 206:../../test/testevt.c ****   /*
 207:../../test/testevt.c ****    * Test on chEvtWaitAll().
 208:../../test/testevt.c ****    */
 209:../../test/testevt.c ****   chEvtInit(&es1);
 210:../../test/testevt.c ****   chEvtInit(&es2);
 211:../../test/testevt.c ****   chEvtRegisterMask(&es1, &el1, 1);
 212:../../test/testevt.c ****   chEvtRegisterMask(&es2, &el2, 4);
 213:../../test/testevt.c ****   test_wait_tick();
 214:../../test/testevt.c ****   target_time = chTimeNow() + MS2ST(50);
 215:../../test/testevt.c ****   threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriority() - 1,
 216:../../test/testevt.c ****                                  thread2, "A");
 217:../../test/testevt.c ****   m = chEvtWaitAll(5);
 218:../../test/testevt.c ****   test_assert_time_window(12, target_time, target_time + ALLOWED_DELAY);
 219:../../test/testevt.c ****   m = chEvtGetAndClearEvents(ALL_EVENTS);
 220:../../test/testevt.c ****   test_assert(13, m == 0, "stuck event");
 221:../../test/testevt.c ****   test_wait_threads();
 222:../../test/testevt.c ****   chEvtUnregister(&es1, &el1);
 223:../../test/testevt.c ****   chEvtUnregister(&es2, &el2);
 224:../../test/testevt.c ****   test_assert(14, !chEvtIsListeningI(&es1), "stuck listener");
 225:../../test/testevt.c ****   test_assert(15, !chEvtIsListeningI(&es2), "stuck listener");
 226:../../test/testevt.c **** }
 227:../../test/testevt.c **** 
 228:../../test/testevt.c **** ROMCONST struct testcase testevt2 = {
 229:../../test/testevt.c ****   "Events, wait and broadcast",
 230:../../test/testevt.c ****   evt2_setup,
 231:../../test/testevt.c ****   NULL,
 232:../../test/testevt.c ****   evt2_execute
 233:../../test/testevt.c **** };
 234:../../test/testevt.c **** 
 235:../../test/testevt.c **** #if CH_USE_EVENTS_TIMEOUT || defined(__DOXYGEN__)
 236:../../test/testevt.c **** /**
 237:../../test/testevt.c ****  * @page test_events_003 Events timeout
 238:../../test/testevt.c ****  *
 239:../../test/testevt.c ****  * <h2>Description</h2>
 240:../../test/testevt.c ****  * In this test the following APIs are let to timeout twice: immediatly and
 241:../../test/testevt.c ****  * after 10ms:
 242:../../test/testevt.c ****  * In this test the following APIs are indipently tested by starting threads
 243:../../test/testevt.c ****  * that broadcast events after fixed delays:
 244:../../test/testevt.c ****  * - @p chEvtWaitOneTimeout()
 245:../../test/testevt.c ****  * - @p chEvtWaitAnyTimeout()
 246:../../test/testevt.c ****  * - @p chEvtWaitAllTimeout()
 247:../../test/testevt.c ****  * .
 248:../../test/testevt.c ****  * After each test phase the test verifies that there are no stuck event flags.
 249:../../test/testevt.c ****  */
 250:../../test/testevt.c **** 
 251:../../test/testevt.c **** static void evt3_setup(void) {
  15               		.loc 1 251 0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
 252:../../test/testevt.c **** 
 253:../../test/testevt.c ****   chEvtGetAndClearEvents(ALL_EVENTS);
  21               		.loc 1 253 0
  22 0000 8FEF      		ldi r24,lo8(-1)
  23 0002 0C94 0000 		jmp chEvtGetAndClearEvents
  24               	.LVL0:
  25               		.cfi_endproc
  26               	.LFE16:
  29               	evt2_setup:
  30               	.LFB12:
 132:../../test/testevt.c **** static void evt2_setup(void) {
  31               		.loc 1 132 0
  32               		.cfi_startproc
  33               	/* prologue: function */
  34               	/* frame size = 0 */
  35               	/* stack size = 0 */
  36               	.L__stack_usage = 0
 134:../../test/testevt.c ****   chEvtGetAndClearEvents(ALL_EVENTS);
  37               		.loc 1 134 0
  38 0006 8FEF      		ldi r24,lo8(-1)
  39 0008 0C94 0000 		jmp chEvtGetAndClearEvents
  40               	.LVL1:
  41               		.cfi_endproc
  42               	.LFE12:
  45               	evt1_setup:
  46               	.LFB7:
  79:../../test/testevt.c **** static void evt1_setup(void) {
  47               		.loc 1 79 0
  48               		.cfi_startproc
  49               	/* prologue: function */
  50               	/* frame size = 0 */
  51               	/* stack size = 0 */
  52               	.L__stack_usage = 0
  81:../../test/testevt.c ****   chEvtGetAndClearEvents(ALL_EVENTS);
  53               		.loc 1 81 0
  54 000c 8FEF      		ldi r24,lo8(-1)
  55 000e 0C94 0000 		jmp chEvtGetAndClearEvents
  56               	.LVL2:
  57               		.cfi_endproc
  58               	.LFE7:
  60               		.section	.rodata.str1.1,"aMS",@progbits,1
  61               	.LC0:
  62 0000 4100      		.string	"A"
  63               		.text
  65               	evt2_execute:
  66               	.LFB15:
 153:../../test/testevt.c **** static void evt2_execute(void) {
  67               		.loc 1 153 0
  68               		.cfi_startproc
  69 0012 CF92      		push r12
  70               	.LCFI0:
  71               		.cfi_def_cfa_offset 3
  72               		.cfi_offset 12, -2
  73 0014 DF92      		push r13
  74               	.LCFI1:
  75               		.cfi_def_cfa_offset 4
  76               		.cfi_offset 13, -3
  77 0016 EF92      		push r14
  78               	.LCFI2:
  79               		.cfi_def_cfa_offset 5
  80               		.cfi_offset 14, -4
  81 0018 FF92      		push r15
  82               	.LCFI3:
  83               		.cfi_def_cfa_offset 6
  84               		.cfi_offset 15, -5
  85 001a 0F93      		push r16
  86               	.LCFI4:
  87               		.cfi_def_cfa_offset 7
  88               		.cfi_offset 16, -6
  89 001c 1F93      		push r17
  90               	.LCFI5:
  91               		.cfi_def_cfa_offset 8
  92               		.cfi_offset 17, -7
  93 001e CF93      		push r28
  94               	.LCFI6:
  95               		.cfi_def_cfa_offset 9
  96               		.cfi_offset 28, -8
  97 0020 DF93      		push r29
  98               	.LCFI7:
  99               		.cfi_def_cfa_offset 10
 100               		.cfi_offset 29, -9
 101 0022 CDB7      		in r28,__SP_L__
 102 0024 DEB7      		in r29,__SP_H__
 103               	.LCFI8:
 104               		.cfi_def_cfa_register 28
 105 0026 2C97      		sbiw r28,12
 106               	.LCFI9:
 107               		.cfi_def_cfa_offset 22
 108 0028 0FB6      		in __tmp_reg__,__SREG__
 109 002a F894      		cli
 110 002c DEBF      		out __SP_H__,r29
 111 002e 0FBE      		out __SREG__,__tmp_reg__
 112 0030 CDBF      		out __SP_L__,r28
 113               	/* prologue: function */
 114               	/* frame size = 12 */
 115               	/* stack size = 20 */
 116               	.L__stack_usage = 20
 161:../../test/testevt.c ****   chEvtAddEvents(5);
 117               		.loc 1 161 0
 118 0032 85E0      		ldi r24,lo8(5)
 119 0034 0E94 0000 		call chEvtAddEvents
 120               	.LVL3:
 162:../../test/testevt.c ****   m = chEvtWaitOne(ALL_EVENTS);
 121               		.loc 1 162 0
 122 0038 8FEF      		ldi r24,lo8(-1)
 123 003a 0E94 0000 		call chEvtWaitOne
 124               	.LVL4:
 163:../../test/testevt.c ****   test_assert(1, m == 1, "single event error");
 125               		.loc 1 163 0
 126 003e 61E0      		ldi r22,lo8(1)
 127 0040 8130      		cpi r24,lo8(1)
 128 0042 01F0      		breq .L5
 129 0044 60E0      		ldi r22,0
 130               	.L5:
 131 0046 81E0      		ldi r24,lo8(1)
 132 0048 90E0      		ldi r25,0
 133               	.LVL5:
 134 004a 0E94 0000 		call _test_assert
 135               	.LVL6:
 136 004e 8823      		tst r24
 137 0050 01F0      		breq .L56
 138               	.L4:
 139               	/* epilogue start */
 226:../../test/testevt.c **** }
 140               		.loc 1 226 0
 141 0052 2C96      		adiw r28,12
 142 0054 0FB6      		in __tmp_reg__,__SREG__
 143 0056 F894      		cli
 144 0058 DEBF      		out __SP_H__,r29
 145 005a 0FBE      		out __SREG__,__tmp_reg__
 146 005c CDBF      		out __SP_L__,r28
 147 005e DF91      		pop r29
 148 0060 CF91      		pop r28
 149 0062 1F91      		pop r17
 150 0064 0F91      		pop r16
 151 0066 FF90      		pop r15
 152 0068 EF90      		pop r14
 153 006a DF90      		pop r13
 154 006c CF90      		pop r12
 155 006e 0895      		ret
 156               	.L56:
 164:../../test/testevt.c ****   m = chEvtWaitOne(ALL_EVENTS);
 157               		.loc 1 164 0
 158 0070 8FEF      		ldi r24,lo8(-1)
 159 0072 0E94 0000 		call chEvtWaitOne
 160               	.LVL7:
 165:../../test/testevt.c ****   test_assert(2, m == 4, "single event error");
 161               		.loc 1 165 0
 162 0076 61E0      		ldi r22,lo8(1)
 163 0078 8430      		cpi r24,lo8(4)
 164 007a 01F0      		breq .L7
 165 007c 60E0      		ldi r22,0
 166               	.L7:
 167 007e 82E0      		ldi r24,lo8(2)
 168 0080 90E0      		ldi r25,0
 169               	.LVL8:
 170 0082 0E94 0000 		call _test_assert
 171               	.LVL9:
 172 0086 8111      		cpse r24,__zero_reg__
 173 0088 00C0      		rjmp .L4
 166:../../test/testevt.c ****   m = chEvtGetAndClearEvents(ALL_EVENTS);
 174               		.loc 1 166 0
 175 008a 8FEF      		ldi r24,lo8(-1)
 176 008c 0E94 0000 		call chEvtGetAndClearEvents
 177               	.LVL10:
 167:../../test/testevt.c ****   test_assert(3, m == 0, "stuck event");
 178               		.loc 1 167 0
 179 0090 61E0      		ldi r22,lo8(1)
 180 0092 8111      		cpse r24,__zero_reg__
 181 0094 00C0      		rjmp .L57
 182               	.L8:
 183 0096 83E0      		ldi r24,lo8(3)
 184 0098 90E0      		ldi r25,0
 185               	.LVL11:
 186 009a 0E94 0000 		call _test_assert
 187               	.LVL12:
 188 009e 8111      		cpse r24,__zero_reg__
 189 00a0 00C0      		rjmp .L4
 172:../../test/testevt.c ****   test_wait_tick();
 190               		.loc 1 172 0
 191 00a2 0E94 0000 		call test_wait_tick
 192               	.LVL13:
 173:../../test/testevt.c ****   target_time = chTimeNow() + MS2ST(50);
 193               		.loc 1 173 0
 194 00a6 E090 0000 		lds r14,vtlist+6
 195 00aa F090 0000 		lds r15,vtlist+6+1
 196               	.LVL14:
 174:../../test/testevt.c ****   threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriority() - 1,
 197               		.loc 1 174 0
 198 00ae 0091 0000 		lds r16,rlist+11
 199 00b2 1091 0000 		lds r17,rlist+11+1
 200 00b6 C090 0000 		lds r12,wa
 201 00ba D090 0000 		lds r13,wa+1
 202 00be F801      		movw r30,r16
 203 00c0 4481      		ldd r20,Z+4
 204 00c2 4150      		subi r20,lo8(-(-1))
 205 00c4 20E0      		ldi r18,lo8(gs(thread1))
 206 00c6 30E0      		ldi r19,hi8(gs(thread1))
 207 00c8 67E9      		ldi r22,lo8(-105)
 208 00ca 70E0      		ldi r23,0
 209 00cc C601      		movw r24,r12
 210 00ce 0E94 0000 		call chThdCreateStatic
 211               	.LVL15:
 212 00d2 9093 0000 		sts threads+1,r25
 213 00d6 8093 0000 		sts threads,r24
 176:../../test/testevt.c ****   m = chEvtWaitOne(ALL_EVENTS);
 214               		.loc 1 176 0
 215 00da 8FEF      		ldi r24,lo8(-1)
 216 00dc 0E94 0000 		call chEvtWaitOne
 217               	.LVL16:
 218 00e0 182F      		mov r17,r24
 219               	.LVL17:
 177:../../test/testevt.c ****   test_assert_time_window(4, target_time, target_time + ALLOWED_DELAY);
 220               		.loc 1 177 0
 221 00e2 A701      		movw r20,r14
 222 00e4 495C      		subi r20,-55
 223 00e6 5F4F      		sbci r21,-1
 173:../../test/testevt.c ****   target_time = chTimeNow() + MS2ST(50);
 224               		.loc 1 173 0
 225 00e8 B701      		movw r22,r14
 226 00ea 6E5C      		subi r22,-50
 227 00ec 7F4F      		sbci r23,-1
 228               	.LVL18:
 177:../../test/testevt.c ****   test_assert_time_window(4, target_time, target_time + ALLOWED_DELAY);
 229               		.loc 1 177 0
 230 00ee 84E0      		ldi r24,lo8(4)
 231 00f0 90E0      		ldi r25,0
 232 00f2 0E94 0000 		call _test_assert_time_window
 233               	.LVL19:
 234 00f6 8111      		cpse r24,__zero_reg__
 235 00f8 00C0      		rjmp .L4
 178:../../test/testevt.c ****   test_assert(5, m == 1, "single event error");
 236               		.loc 1 178 0
 237 00fa 61E0      		ldi r22,lo8(1)
 238 00fc 1130      		cpi r17,lo8(1)
 239 00fe 01F0      		breq .L9
 240 0100 60E0      		ldi r22,0
 241               	.L9:
 242 0102 85E0      		ldi r24,lo8(5)
 243 0104 90E0      		ldi r25,0
 244 0106 0E94 0000 		call _test_assert
 245               	.LVL20:
 246 010a 8111      		cpse r24,__zero_reg__
 247 010c 00C0      		rjmp .L4
 179:../../test/testevt.c ****   m = chEvtGetAndClearEvents(ALL_EVENTS);
 248               		.loc 1 179 0
 249 010e 8FEF      		ldi r24,lo8(-1)
 250 0110 0E94 0000 		call chEvtGetAndClearEvents
 251               	.LVL21:
 180:../../test/testevt.c ****   test_assert(6, m == 0, "stuck event");
 252               		.loc 1 180 0
 253 0114 61E0      		ldi r22,lo8(1)
 254 0116 8111      		cpse r24,__zero_reg__
 255 0118 60E0      		ldi r22,0
 256               	.L10:
 257 011a 86E0      		ldi r24,lo8(6)
 258 011c 90E0      		ldi r25,0
 259               	.LVL22:
 260 011e 0E94 0000 		call _test_assert
 261               	.LVL23:
 262 0122 8111      		cpse r24,__zero_reg__
 263 0124 00C0      		rjmp .L4
 181:../../test/testevt.c ****   test_wait_threads();
 264               		.loc 1 181 0
 265 0126 0E94 0000 		call test_wait_threads
 266               	.LVL24:
 186:../../test/testevt.c ****   chEvtAddEvents(5);
 267               		.loc 1 186 0
 268 012a 85E0      		ldi r24,lo8(5)
 269 012c 0E94 0000 		call chEvtAddEvents
 270               	.LVL25:
 187:../../test/testevt.c ****   m = chEvtWaitAny(ALL_EVENTS);
 271               		.loc 1 187 0
 272 0130 8FEF      		ldi r24,lo8(-1)
 273 0132 0E94 0000 		call chEvtWaitAny
 274               	.LVL26:
 188:../../test/testevt.c ****   test_assert(7, m == 5, "unexpected pending bit");
 275               		.loc 1 188 0
 276 0136 61E0      		ldi r22,lo8(1)
 277 0138 8530      		cpi r24,lo8(5)
 278 013a 01F0      		breq .L11
 279 013c 60E0      		ldi r22,0
 280               	.L11:
 281 013e 87E0      		ldi r24,lo8(7)
 282 0140 90E0      		ldi r25,0
 283               	.LVL27:
 284 0142 0E94 0000 		call _test_assert
 285               	.LVL28:
 286 0146 8111      		cpse r24,__zero_reg__
 287 0148 00C0      		rjmp .L4
 189:../../test/testevt.c ****   m = chEvtGetAndClearEvents(ALL_EVENTS);
 288               		.loc 1 189 0
 289 014a 8FEF      		ldi r24,lo8(-1)
 290 014c 0E94 0000 		call chEvtGetAndClearEvents
 291               	.LVL29:
 190:../../test/testevt.c ****   test_assert(8, m == 0, "stuck event");
 292               		.loc 1 190 0
 293 0150 61E0      		ldi r22,lo8(1)
 294 0152 8111      		cpse r24,__zero_reg__
 295 0154 60E0      		ldi r22,0
 296               	.L12:
 297 0156 88E0      		ldi r24,lo8(8)
 298 0158 90E0      		ldi r25,0
 299               	.LVL30:
 300 015a 0E94 0000 		call _test_assert
 301               	.LVL31:
 302 015e 8111      		cpse r24,__zero_reg__
 303 0160 00C0      		rjmp .L4
 195:../../test/testevt.c ****   test_wait_tick();
 304               		.loc 1 195 0
 305 0162 0E94 0000 		call test_wait_tick
 306               	.LVL32:
 196:../../test/testevt.c ****   target_time = chTimeNow() + MS2ST(50);
 307               		.loc 1 196 0
 308 0166 E090 0000 		lds r14,vtlist+6
 309 016a F090 0000 		lds r15,vtlist+6+1
 310               	.LVL33:
 197:../../test/testevt.c ****   threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriority() - 1,
 311               		.loc 1 197 0
 312 016e 0091 0000 		lds r16,rlist+11
 313 0172 1091 0000 		lds r17,rlist+11+1
 314 0176 F801      		movw r30,r16
 315 0178 4481      		ldd r20,Z+4
 316 017a 4150      		subi r20,lo8(-(-1))
 317 017c 20E0      		ldi r18,lo8(gs(thread1))
 318 017e 30E0      		ldi r19,hi8(gs(thread1))
 319 0180 67E9      		ldi r22,lo8(-105)
 320 0182 70E0      		ldi r23,0
 321 0184 C601      		movw r24,r12
 322 0186 0E94 0000 		call chThdCreateStatic
 323               	.LVL34:
 324 018a 9093 0000 		sts threads+1,r25
 325 018e 8093 0000 		sts threads,r24
 199:../../test/testevt.c ****   m = chEvtWaitAny(ALL_EVENTS);
 326               		.loc 1 199 0
 327 0192 8FEF      		ldi r24,lo8(-1)
 328 0194 0E94 0000 		call chEvtWaitAny
 329               	.LVL35:
 330 0198 182F      		mov r17,r24
 331               	.LVL36:
 200:../../test/testevt.c ****   test_assert_time_window(9, target_time, target_time + ALLOWED_DELAY);
 332               		.loc 1 200 0
 333 019a A701      		movw r20,r14
 334 019c 495C      		subi r20,-55
 335 019e 5F4F      		sbci r21,-1
 196:../../test/testevt.c ****   target_time = chTimeNow() + MS2ST(50);
 336               		.loc 1 196 0
 337 01a0 B701      		movw r22,r14
 338 01a2 6E5C      		subi r22,-50
 339 01a4 7F4F      		sbci r23,-1
 340               	.LVL37:
 200:../../test/testevt.c ****   test_assert_time_window(9, target_time, target_time + ALLOWED_DELAY);
 341               		.loc 1 200 0
 342 01a6 89E0      		ldi r24,lo8(9)
 343 01a8 90E0      		ldi r25,0
 344 01aa 0E94 0000 		call _test_assert_time_window
 345               	.LVL38:
 346 01ae 8111      		cpse r24,__zero_reg__
 347 01b0 00C0      		rjmp .L4
 201:../../test/testevt.c ****   test_assert(10, m == 1, "single event error");
 348               		.loc 1 201 0
 349 01b2 61E0      		ldi r22,lo8(1)
 350 01b4 1130      		cpi r17,lo8(1)
 351 01b6 01F0      		breq .L13
 352 01b8 60E0      		ldi r22,0
 353               	.L13:
 354 01ba 8AE0      		ldi r24,lo8(10)
 355 01bc 90E0      		ldi r25,0
 356 01be 0E94 0000 		call _test_assert
 357               	.LVL39:
 358 01c2 8111      		cpse r24,__zero_reg__
 359 01c4 00C0      		rjmp .L4
 202:../../test/testevt.c ****   m = chEvtGetAndClearEvents(ALL_EVENTS);
 360               		.loc 1 202 0
 361 01c6 8FEF      		ldi r24,lo8(-1)
 362 01c8 0E94 0000 		call chEvtGetAndClearEvents
 363               	.LVL40:
 203:../../test/testevt.c ****   test_assert(11, m == 0, "stuck event");
 364               		.loc 1 203 0
 365 01cc 61E0      		ldi r22,lo8(1)
 366 01ce 8111      		cpse r24,__zero_reg__
 367 01d0 60E0      		ldi r22,0
 368               	.L14:
 369 01d2 8BE0      		ldi r24,lo8(11)
 370 01d4 90E0      		ldi r25,0
 371               	.LVL41:
 372 01d6 0E94 0000 		call _test_assert
 373               	.LVL42:
 374 01da 8111      		cpse r24,__zero_reg__
 375 01dc 00C0      		rjmp .L4
 204:../../test/testevt.c ****   test_wait_threads();
 376               		.loc 1 204 0
 377 01de 0E94 0000 		call test_wait_threads
 378               	.LVL43:
 209:../../test/testevt.c ****   chEvtInit(&es1);
 379               		.loc 1 209 0
 380 01e2 80E0      		ldi r24,lo8(es1)
 381 01e4 90E0      		ldi r25,hi8(es1)
 382 01e6 9093 0000 		sts es1+1,r25
 383 01ea 8093 0000 		sts es1,r24
 210:../../test/testevt.c ****   chEvtInit(&es2);
 384               		.loc 1 210 0
 385 01ee 80E0      		ldi r24,lo8(es2)
 386 01f0 90E0      		ldi r25,hi8(es2)
 387 01f2 9093 0000 		sts es2+1,r25
 388 01f6 8093 0000 		sts es2,r24
 211:../../test/testevt.c ****   chEvtRegisterMask(&es1, &el1, 1);
 389               		.loc 1 211 0
 390 01fa 41E0      		ldi r20,lo8(1)
 391 01fc BE01      		movw r22,r28
 392 01fe 695F      		subi r22,-7
 393 0200 7F4F      		sbci r23,-1
 394 0202 80E0      		ldi r24,lo8(es1)
 395 0204 90E0      		ldi r25,hi8(es1)
 396 0206 0E94 0000 		call chEvtRegisterMask
 397               	.LVL44:
 212:../../test/testevt.c ****   chEvtRegisterMask(&es2, &el2, 4);
 398               		.loc 1 212 0
 399 020a 44E0      		ldi r20,lo8(4)
 400 020c BE01      		movw r22,r28
 401 020e 6F5F      		subi r22,-1
 402 0210 7F4F      		sbci r23,-1
 403 0212 80E0      		ldi r24,lo8(es2)
 404 0214 90E0      		ldi r25,hi8(es2)
 405 0216 0E94 0000 		call chEvtRegisterMask
 406               	.LVL45:
 213:../../test/testevt.c ****   test_wait_tick();
 407               		.loc 1 213 0
 408 021a 0E94 0000 		call test_wait_tick
 409               	.LVL46:
 214:../../test/testevt.c ****   target_time = chTimeNow() + MS2ST(50);
 410               		.loc 1 214 0
 411 021e E090 0000 		lds r14,vtlist+6
 412 0222 F090 0000 		lds r15,vtlist+6+1
 413               	.LVL47:
 215:../../test/testevt.c ****   threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriority() - 1,
 414               		.loc 1 215 0
 415 0226 E091 0000 		lds r30,rlist+11
 416 022a F091 0000 		lds r31,rlist+11+1
 417 022e 4481      		ldd r20,Z+4
 418 0230 4150      		subi r20,lo8(-(-1))
 419 0232 00E0      		ldi r16,lo8(.LC0)
 420 0234 10E0      		ldi r17,hi8(.LC0)
 421 0236 20E0      		ldi r18,lo8(gs(thread2))
 422 0238 30E0      		ldi r19,hi8(gs(thread2))
 423 023a 67E9      		ldi r22,lo8(-105)
 424 023c 70E0      		ldi r23,0
 425 023e C601      		movw r24,r12
 426 0240 0E94 0000 		call chThdCreateStatic
 427               	.LVL48:
 428 0244 9093 0000 		sts threads+1,r25
 429 0248 8093 0000 		sts threads,r24
 217:../../test/testevt.c ****   m = chEvtWaitAll(5);
 430               		.loc 1 217 0
 431 024c 85E0      		ldi r24,lo8(5)
 432 024e 0E94 0000 		call chEvtWaitAll
 433               	.LVL49:
 218:../../test/testevt.c ****   test_assert_time_window(12, target_time, target_time + ALLOWED_DELAY);
 434               		.loc 1 218 0
 435 0252 A701      		movw r20,r14
 436 0254 495C      		subi r20,-55
 437 0256 5F4F      		sbci r21,-1
 214:../../test/testevt.c ****   target_time = chTimeNow() + MS2ST(50);
 438               		.loc 1 214 0
 439 0258 B701      		movw r22,r14
 440 025a 6E5C      		subi r22,-50
 441 025c 7F4F      		sbci r23,-1
 442               	.LVL50:
 218:../../test/testevt.c ****   test_assert_time_window(12, target_time, target_time + ALLOWED_DELAY);
 443               		.loc 1 218 0
 444 025e 8CE0      		ldi r24,lo8(12)
 445 0260 90E0      		ldi r25,0
 446 0262 0E94 0000 		call _test_assert_time_window
 447               	.LVL51:
 448 0266 8111      		cpse r24,__zero_reg__
 449 0268 00C0      		rjmp .L4
 219:../../test/testevt.c ****   m = chEvtGetAndClearEvents(ALL_EVENTS);
 450               		.loc 1 219 0
 451 026a 8FEF      		ldi r24,lo8(-1)
 452 026c 0E94 0000 		call chEvtGetAndClearEvents
 453               	.LVL52:
 220:../../test/testevt.c ****   test_assert(13, m == 0, "stuck event");
 454               		.loc 1 220 0
 455 0270 61E0      		ldi r22,lo8(1)
 456 0272 8111      		cpse r24,__zero_reg__
 457 0274 60E0      		ldi r22,0
 458               	.L15:
 459 0276 8DE0      		ldi r24,lo8(13)
 460 0278 90E0      		ldi r25,0
 461               	.LVL53:
 462 027a 0E94 0000 		call _test_assert
 463               	.LVL54:
 464 027e 8111      		cpse r24,__zero_reg__
 465 0280 00C0      		rjmp .L4
 221:../../test/testevt.c ****   test_wait_threads();
 466               		.loc 1 221 0
 467 0282 0E94 0000 		call test_wait_threads
 468               	.LVL55:
 222:../../test/testevt.c ****   chEvtUnregister(&es1, &el1);
 469               		.loc 1 222 0
 470 0286 BE01      		movw r22,r28
 471 0288 695F      		subi r22,-7
 472 028a 7F4F      		sbci r23,-1
 473 028c 80E0      		ldi r24,lo8(es1)
 474 028e 90E0      		ldi r25,hi8(es1)
 475 0290 0E94 0000 		call chEvtUnregister
 476               	.LVL56:
 223:../../test/testevt.c ****   chEvtUnregister(&es2, &el2);
 477               		.loc 1 223 0
 478 0294 BE01      		movw r22,r28
 479 0296 6F5F      		subi r22,-1
 480 0298 7F4F      		sbci r23,-1
 481 029a 80E0      		ldi r24,lo8(es2)
 482 029c 90E0      		ldi r25,hi8(es2)
 483 029e 0E94 0000 		call chEvtUnregister
 484               	.LVL57:
 224:../../test/testevt.c ****   test_assert(14, !chEvtIsListeningI(&es1), "stuck listener");
 485               		.loc 1 224 0
 486 02a2 61E0      		ldi r22,lo8(1)
 487 02a4 8091 0000 		lds r24,es1
 488 02a8 9091 0000 		lds r25,es1+1
 489 02ac 8050      		subi r24,lo8(es1)
 490 02ae 9040      		sbci r25,hi8(es1)
 491 02b0 01F0      		breq .L16
 492 02b2 60E0      		ldi r22,0
 493               	.L16:
 494 02b4 8EE0      		ldi r24,lo8(14)
 495 02b6 90E0      		ldi r25,0
 496 02b8 0E94 0000 		call _test_assert
 497               	.LVL58:
 498 02bc 8111      		cpse r24,__zero_reg__
 499 02be 00C0      		rjmp .L4
 225:../../test/testevt.c ****   test_assert(15, !chEvtIsListeningI(&es2), "stuck listener");
 500               		.loc 1 225 0
 501 02c0 61E0      		ldi r22,lo8(1)
 502 02c2 8091 0000 		lds r24,es2
 503 02c6 9091 0000 		lds r25,es2+1
 504 02ca 8050      		subi r24,lo8(es2)
 505 02cc 9040      		sbci r25,hi8(es2)
 506 02ce 01F0      		breq .L17
 507 02d0 60E0      		ldi r22,0
 508               	.L17:
 509 02d2 8FE0      		ldi r24,lo8(15)
 510 02d4 90E0      		ldi r25,0
 511 02d6 0E94 0000 		call _test_assert
 512               	.LVL59:
 513 02da 00C0      		rjmp .L4
 514               	.LVL60:
 515               	.L57:
 167:../../test/testevt.c ****   test_assert(3, m == 0, "stuck event");
 516               		.loc 1 167 0
 517 02dc 60E0      		ldi r22,0
 518 02de 00C0      		rjmp .L8
 519               		.cfi_endproc
 520               	.LFE15:
 523               	thread2:
 524               	.LFB14:
 144:../../test/testevt.c **** static msg_t thread2(void *p) {
 525               		.loc 1 144 0
 526               		.cfi_startproc
 527               	.LVL61:
 528               	/* prologue: function */
 529               	/* frame size = 0 */
 530               	/* stack size = 0 */
 531               	.L__stack_usage = 0
 147:../../test/testevt.c ****   chEvtBroadcast(&es1);
 532               		.loc 1 147 0
 533 02e0 60E0      		ldi r22,0
 534 02e2 80E0      		ldi r24,lo8(es1)
 535 02e4 90E0      		ldi r25,hi8(es1)
 536               	.LVL62:
 537 02e6 0E94 0000 		call chEvtBroadcastFlags
 538               	.LVL63:
 148:../../test/testevt.c ****   chThdSleepMilliseconds(50);
 539               		.loc 1 148 0
 540 02ea 82E3      		ldi r24,lo8(50)
 541 02ec 90E0      		ldi r25,0
 542 02ee 0E94 0000 		call chThdSleep
 543               	.LVL64:
 149:../../test/testevt.c ****   chEvtBroadcast(&es2);
 544               		.loc 1 149 0
 545 02f2 60E0      		ldi r22,0
 546 02f4 80E0      		ldi r24,lo8(es2)
 547 02f6 90E0      		ldi r25,hi8(es2)
 548 02f8 0E94 0000 		call chEvtBroadcastFlags
 549               	.LVL65:
 151:../../test/testevt.c **** }
 550               		.loc 1 151 0
 551 02fc 80E0      		ldi r24,0
 552 02fe 90E0      		ldi r25,0
 553 0300 0895      		ret
 554               		.cfi_endproc
 555               	.LFE14:
 558               	thread1:
 559               	.LFB13:
 137:../../test/testevt.c **** static msg_t thread1(void *p) {
 560               		.loc 1 137 0
 561               		.cfi_startproc
 562               	.LVL66:
 563 0302 CF93      		push r28
 564               	.LCFI10:
 565               		.cfi_def_cfa_offset 3
 566               		.cfi_offset 28, -2
 567 0304 DF93      		push r29
 568               	.LCFI11:
 569               		.cfi_def_cfa_offset 4
 570               		.cfi_offset 29, -3
 571               	/* prologue: function */
 572               	/* frame size = 0 */
 573               	/* stack size = 2 */
 574               	.L__stack_usage = 2
 575 0306 EC01      		movw r28,r24
 139:../../test/testevt.c ****   chThdSleepMilliseconds(50);
 576               		.loc 1 139 0
 577 0308 82E3      		ldi r24,lo8(50)
 578 030a 90E0      		ldi r25,0
 579               	.LVL67:
 580 030c 0E94 0000 		call chThdSleep
 581               	.LVL68:
 140:../../test/testevt.c ****   chEvtSignal((Thread *)p, 1);
 582               		.loc 1 140 0
 583 0310 61E0      		ldi r22,lo8(1)
 584 0312 CE01      		movw r24,r28
 585 0314 0E94 0000 		call chEvtSignal
 586               	.LVL69:
 142:../../test/testevt.c **** }
 587               		.loc 1 142 0
 588 0318 80E0      		ldi r24,0
 589 031a 90E0      		ldi r25,0
 590               	/* epilogue start */
 591 031c DF91      		pop r29
 592 031e CF91      		pop r28
 593               	.LVL70:
 594 0320 0895      		ret
 595               		.cfi_endproc
 596               	.LFE13:
 598               		.section	.rodata.str1.1
 599               	.LC1:
 600 0002 4142 4300 		.string	"ABC"
 601               		.text
 603               	evt1_execute:
 604               	.LFB11:
  89:../../test/testevt.c **** static void evt1_execute(void) {
 605               		.loc 1 89 0
 606               		.cfi_startproc
 607 0322 CF93      		push r28
 608               	.LCFI12:
 609               		.cfi_def_cfa_offset 3
 610               		.cfi_offset 28, -2
 611 0324 DF93      		push r29
 612               	.LCFI13:
 613               		.cfi_def_cfa_offset 4
 614               		.cfi_offset 29, -3
 615 0326 CDB7      		in r28,__SP_L__
 616 0328 DEB7      		in r29,__SP_H__
 617               	.LCFI14:
 618               		.cfi_def_cfa_register 28
 619 032a 2C97      		sbiw r28,12
 620               	.LCFI15:
 621               		.cfi_def_cfa_offset 16
 622 032c 0FB6      		in __tmp_reg__,__SREG__
 623 032e F894      		cli
 624 0330 DEBF      		out __SP_H__,r29
 625 0332 0FBE      		out __SREG__,__tmp_reg__
 626 0334 CDBF      		out __SP_L__,r28
 627               	/* prologue: function */
 628               	/* frame size = 12 */
 629               	/* stack size = 14 */
 630               	.L__stack_usage = 14
  95:../../test/testevt.c ****   chEvtInit(&es1);
 631               		.loc 1 95 0
 632 0336 80E0      		ldi r24,lo8(es1)
 633 0338 90E0      		ldi r25,hi8(es1)
 634 033a 9093 0000 		sts es1+1,r25
 635 033e 8093 0000 		sts es1,r24
  96:../../test/testevt.c ****   chEvtRegisterMask(&es1, &el1, 1);
 636               		.loc 1 96 0
 637 0342 41E0      		ldi r20,lo8(1)
 638 0344 BE01      		movw r22,r28
 639 0346 695F      		subi r22,-7
 640 0348 7F4F      		sbci r23,-1
 641 034a 0E94 0000 		call chEvtRegisterMask
 642               	.LVL71:
  97:../../test/testevt.c ****   chEvtRegisterMask(&es1, &el2, 2);
 643               		.loc 1 97 0
 644 034e 42E0      		ldi r20,lo8(2)
 645 0350 BE01      		movw r22,r28
 646 0352 6F5F      		subi r22,-1
 647 0354 7F4F      		sbci r23,-1
 648 0356 80E0      		ldi r24,lo8(es1)
 649 0358 90E0      		ldi r25,hi8(es1)
 650 035a 0E94 0000 		call chEvtRegisterMask
 651               	.LVL72:
  98:../../test/testevt.c ****   test_assert(1, chEvtIsListeningI(&es1), "no listener");
 652               		.loc 1 98 0
 653 035e 61E0      		ldi r22,lo8(1)
 654 0360 8091 0000 		lds r24,es1
 655 0364 9091 0000 		lds r25,es1+1
 656 0368 8050      		subi r24,lo8(es1)
 657 036a 9040      		sbci r25,hi8(es1)
 658 036c 01F0      		breq .L69
 659 036e 81E0      		ldi r24,lo8(1)
 660 0370 90E0      		ldi r25,0
 661 0372 0E94 0000 		call _test_assert
 662               	.LVL73:
 663 0376 8823      		tst r24
 664 0378 01F0      		breq .L70
 665               	.L60:
 666               	/* epilogue start */
 109:../../test/testevt.c **** }
 667               		.loc 1 109 0
 668 037a 2C96      		adiw r28,12
 669 037c 0FB6      		in __tmp_reg__,__SREG__
 670 037e F894      		cli
 671 0380 DEBF      		out __SP_H__,r29
 672 0382 0FBE      		out __SREG__,__tmp_reg__
 673 0384 CDBF      		out __SP_L__,r28
 674 0386 DF91      		pop r29
 675 0388 CF91      		pop r28
 676 038a 0895      		ret
 677               	.L69:
  98:../../test/testevt.c ****   test_assert(1, chEvtIsListeningI(&es1), "no listener");
 678               		.loc 1 98 0
 679 038c 60E0      		ldi r22,0
 680 038e 81E0      		ldi r24,lo8(1)
 681 0390 90E0      		ldi r25,0
 682 0392 0E94 0000 		call _test_assert
 683               	.LVL74:
 684 0396 8111      		cpse r24,__zero_reg__
 685 0398 00C0      		rjmp .L60
 686               	.L70:
  99:../../test/testevt.c ****   chEvtUnregister(&es1, &el1);
 687               		.loc 1 99 0
 688 039a BE01      		movw r22,r28
 689 039c 695F      		subi r22,-7
 690 039e 7F4F      		sbci r23,-1
 691 03a0 80E0      		ldi r24,lo8(es1)
 692 03a2 90E0      		ldi r25,hi8(es1)
 693 03a4 0E94 0000 		call chEvtUnregister
 694               	.LVL75:
 100:../../test/testevt.c ****   test_assert(2, chEvtIsListeningI(&es1), "no listener");
 695               		.loc 1 100 0
 696 03a8 61E0      		ldi r22,lo8(1)
 697 03aa 8091 0000 		lds r24,es1
 698 03ae 9091 0000 		lds r25,es1+1
 699 03b2 8050      		subi r24,lo8(es1)
 700 03b4 9040      		sbci r25,hi8(es1)
 701 03b6 01F0      		breq .L71
 702               	.L63:
 703 03b8 82E0      		ldi r24,lo8(2)
 704 03ba 90E0      		ldi r25,0
 705 03bc 0E94 0000 		call _test_assert
 706               	.LVL76:
 707 03c0 8111      		cpse r24,__zero_reg__
 708 03c2 00C0      		rjmp .L60
 101:../../test/testevt.c ****   chEvtUnregister(&es1, &el2);
 709               		.loc 1 101 0
 710 03c4 BE01      		movw r22,r28
 711 03c6 6F5F      		subi r22,-1
 712 03c8 7F4F      		sbci r23,-1
 713 03ca 80E0      		ldi r24,lo8(es1)
 714 03cc 90E0      		ldi r25,hi8(es1)
 715 03ce 0E94 0000 		call chEvtUnregister
 716               	.LVL77:
 102:../../test/testevt.c ****   test_assert(3, !chEvtIsListeningI(&es1), "stuck listener");
 717               		.loc 1 102 0
 718 03d2 61E0      		ldi r22,lo8(1)
 719 03d4 8091 0000 		lds r24,es1
 720 03d8 9091 0000 		lds r25,es1+1
 721 03dc 8050      		subi r24,lo8(es1)
 722 03de 9040      		sbci r25,hi8(es1)
 723 03e0 01F0      		breq .L64
 724 03e2 60E0      		ldi r22,0
 725               	.L64:
 726 03e4 83E0      		ldi r24,lo8(3)
 727 03e6 90E0      		ldi r25,0
 728 03e8 0E94 0000 		call _test_assert
 729               	.LVL78:
 730 03ec 8111      		cpse r24,__zero_reg__
 731 03ee 00C0      		rjmp .L60
 107:../../test/testevt.c ****   chEvtDispatch(evhndl, 7);
 732               		.loc 1 107 0
 733 03f0 67E0      		ldi r22,lo8(7)
 734 03f2 80E0      		ldi r24,lo8(evhndl)
 735 03f4 90E0      		ldi r25,hi8(evhndl)
 736 03f6 0E94 0000 		call chEvtDispatch
 737               	.LVL79:
 108:../../test/testevt.c ****   test_assert_sequence(4, "ABC");
 738               		.loc 1 108 0
 739 03fa 60E0      		ldi r22,lo8(.LC1)
 740 03fc 70E0      		ldi r23,hi8(.LC1)
 741 03fe 84E0      		ldi r24,lo8(4)
 742 0400 90E0      		ldi r25,0
 743 0402 0E94 0000 		call _test_assert_sequence
 744               	.LVL80:
 745 0406 00C0      		rjmp .L60
 746               	.L71:
 100:../../test/testevt.c ****   test_assert(2, chEvtIsListeningI(&es1), "no listener");
 747               		.loc 1 100 0
 748 0408 60E0      		ldi r22,0
 749 040a 00C0      		rjmp .L63
 750               		.cfi_endproc
 751               	.LFE11:
 754               	h3:
 755               	.LFB10:
  86:../../test/testevt.c **** static void h3(eventid_t id) {(void)id;test_emit_token('C');}
 756               		.loc 1 86 0
 757               		.cfi_startproc
 758               	.LVL81:
 759               	/* prologue: function */
 760               	/* frame size = 0 */
 761               	/* stack size = 0 */
 762               	.L__stack_usage = 0
  86:../../test/testevt.c **** static void h3(eventid_t id) {(void)id;test_emit_token('C');}
 763               		.loc 1 86 0
 764 040c 83E4      		ldi r24,lo8(67)
 765               	.LVL82:
 766 040e 0C94 0000 		jmp test_emit_token
 767               	.LVL83:
 768               		.cfi_endproc
 769               	.LFE10:
 772               	h2:
 773               	.LFB9:
  85:../../test/testevt.c **** static void h2(eventid_t id) {(void)id;test_emit_token('B');}
 774               		.loc 1 85 0
 775               		.cfi_startproc
 776               	.LVL84:
 777               	/* prologue: function */
 778               	/* frame size = 0 */
 779               	/* stack size = 0 */
 780               	.L__stack_usage = 0
  85:../../test/testevt.c **** static void h2(eventid_t id) {(void)id;test_emit_token('B');}
 781               		.loc 1 85 0
 782 0412 82E4      		ldi r24,lo8(66)
 783               	.LVL85:
 784 0414 0C94 0000 		jmp test_emit_token
 785               	.LVL86:
 786               		.cfi_endproc
 787               	.LFE9:
 790               	h1:
 791               	.LFB8:
  84:../../test/testevt.c **** static void h1(eventid_t id) {(void)id;test_emit_token('A');}
 792               		.loc 1 84 0
 793               		.cfi_startproc
 794               	.LVL87:
 795               	/* prologue: function */
 796               	/* frame size = 0 */
 797               	/* stack size = 0 */
 798               	.L__stack_usage = 0
  84:../../test/testevt.c **** static void h1(eventid_t id) {(void)id;test_emit_token('A');}
 799               		.loc 1 84 0
 800 0418 81E4      		ldi r24,lo8(65)
 801               	.LVL88:
 802 041a 0C94 0000 		jmp test_emit_token
 803               	.LVL89:
 804               		.cfi_endproc
 805               	.LFE8:
 808               	evt3_execute:
 809               	.LFB17:
 254:../../test/testevt.c **** }
 255:../../test/testevt.c **** 
 256:../../test/testevt.c **** static void evt3_execute(void) {
 810               		.loc 1 256 0
 811               		.cfi_startproc
 812               	/* prologue: function */
 813               	/* frame size = 0 */
 814               	/* stack size = 0 */
 815               	.L__stack_usage = 0
 257:../../test/testevt.c ****   eventmask_t m;
 258:../../test/testevt.c **** 
 259:../../test/testevt.c ****   /*
 260:../../test/testevt.c ****    * Tests various timeout situations.
 261:../../test/testevt.c ****    */
 262:../../test/testevt.c ****   m = chEvtWaitOneTimeout(ALL_EVENTS, TIME_IMMEDIATE);
 816               		.loc 1 262 0
 817 041e 60E0      		ldi r22,0
 818 0420 70E0      		ldi r23,0
 819 0422 8FEF      		ldi r24,lo8(-1)
 820 0424 0E94 0000 		call chEvtWaitOneTimeout
 821               	.LVL90:
 263:../../test/testevt.c ****   test_assert(1, m == 0, "spurious event");
 822               		.loc 1 263 0
 823 0428 61E0      		ldi r22,lo8(1)
 824 042a 8111      		cpse r24,__zero_reg__
 825 042c 60E0      		ldi r22,0
 826               	.L76:
 827 042e 81E0      		ldi r24,lo8(1)
 828 0430 90E0      		ldi r25,0
 829               	.LVL91:
 830 0432 0E94 0000 		call _test_assert
 831               	.LVL92:
 832 0436 8111      		cpse r24,__zero_reg__
 833               	.L75:
 834 0438 0895      		ret
 835               	.L103:
 264:../../test/testevt.c ****   m = chEvtWaitAnyTimeout(ALL_EVENTS, TIME_IMMEDIATE);
 836               		.loc 1 264 0
 837 043a 60E0      		ldi r22,0
 838 043c 70E0      		ldi r23,0
 839 043e 8FEF      		ldi r24,lo8(-1)
 840 0440 0E94 0000 		call chEvtWaitAnyTimeout
 841               	.LVL93:
 265:../../test/testevt.c ****   test_assert(2, m == 0, "spurious event");
 842               		.loc 1 265 0
 843 0444 61E0      		ldi r22,lo8(1)
 844 0446 8111      		cpse r24,__zero_reg__
 845 0448 00C0      		rjmp .L104
 846 044a 82E0      		ldi r24,lo8(2)
 847 044c 90E0      		ldi r25,0
 848               	.LVL94:
 849 044e 0E94 0000 		call _test_assert
 850               	.LVL95:
 851 0452 8111      		cpse r24,__zero_reg__
 852 0454 00C0      		rjmp .L75
 853               	.L106:
 266:../../test/testevt.c ****   m = chEvtWaitAllTimeout(ALL_EVENTS, TIME_IMMEDIATE);
 854               		.loc 1 266 0
 855 0456 60E0      		ldi r22,0
 856 0458 70E0      		ldi r23,0
 857 045a 8FEF      		ldi r24,lo8(-1)
 858 045c 0E94 0000 		call chEvtWaitAllTimeout
 859               	.LVL96:
 267:../../test/testevt.c ****   test_assert(3, m == 0, "spurious event");
 860               		.loc 1 267 0
 861 0460 61E0      		ldi r22,lo8(1)
 862 0462 8111      		cpse r24,__zero_reg__
 863 0464 60E0      		ldi r22,0
 864               	.L81:
 865 0466 83E0      		ldi r24,lo8(3)
 866 0468 90E0      		ldi r25,0
 867               	.LVL97:
 868 046a 0E94 0000 		call _test_assert
 869               	.LVL98:
 870 046e 8111      		cpse r24,__zero_reg__
 871 0470 00C0      		rjmp .L75
 872               	.LBB4:
 873               	.LBB5:
 268:../../test/testevt.c ****   m = chEvtWaitOneTimeout(ALL_EVENTS, 10);
 874               		.loc 1 268 0
 875 0472 6AE0      		ldi r22,lo8(10)
 876 0474 70E0      		ldi r23,0
 877 0476 8FEF      		ldi r24,lo8(-1)
 878 0478 0E94 0000 		call chEvtWaitOneTimeout
 879               	.LVL99:
 269:../../test/testevt.c ****   test_assert(4, m == 0, "spurious event");
 880               		.loc 1 269 0
 881 047c 61E0      		ldi r22,lo8(1)
 882 047e 8111      		cpse r24,__zero_reg__
 883 0480 00C0      		rjmp .L105
 884               	.L82:
 885 0482 84E0      		ldi r24,lo8(4)
 886 0484 90E0      		ldi r25,0
 887               	.LVL100:
 888 0486 0E94 0000 		call _test_assert
 889               	.LVL101:
 890 048a 8111      		cpse r24,__zero_reg__
 891 048c 00C0      		rjmp .L75
 270:../../test/testevt.c ****   m = chEvtWaitAnyTimeout(ALL_EVENTS, 10);
 892               		.loc 1 270 0
 893 048e 6AE0      		ldi r22,lo8(10)
 894 0490 70E0      		ldi r23,0
 895 0492 8FEF      		ldi r24,lo8(-1)
 896 0494 0E94 0000 		call chEvtWaitAnyTimeout
 897               	.LVL102:
 271:../../test/testevt.c ****   test_assert(5, m == 0, "spurious event");
 898               		.loc 1 271 0
 899 0498 61E0      		ldi r22,lo8(1)
 900 049a 8111      		cpse r24,__zero_reg__
 901 049c 60E0      		ldi r22,0
 902               	.L83:
 903 049e 85E0      		ldi r24,lo8(5)
 904 04a0 90E0      		ldi r25,0
 905               	.LVL103:
 906 04a2 0E94 0000 		call _test_assert
 907               	.LVL104:
 908 04a6 8111      		cpse r24,__zero_reg__
 909 04a8 00C0      		rjmp .L75
 272:../../test/testevt.c ****   m = chEvtWaitAllTimeout(ALL_EVENTS, 10);
 910               		.loc 1 272 0
 911 04aa 6AE0      		ldi r22,lo8(10)
 912 04ac 70E0      		ldi r23,0
 913 04ae 8FEF      		ldi r24,lo8(-1)
 914 04b0 0E94 0000 		call chEvtWaitAllTimeout
 915               	.LVL105:
 273:../../test/testevt.c ****   test_assert(6, m == 0, "spurious event");
 916               		.loc 1 273 0
 917 04b4 61E0      		ldi r22,lo8(1)
 918 04b6 8111      		cpse r24,__zero_reg__
 919 04b8 60E0      		ldi r22,0
 920               	.L84:
 921 04ba 86E0      		ldi r24,lo8(6)
 922 04bc 90E0      		ldi r25,0
 923               	.LVL106:
 924 04be 0C94 0000 		jmp _test_assert
 925               	.LVL107:
 926               	.L104:
 927               	.LBE5:
 928               	.LBE4:
 265:../../test/testevt.c ****   test_assert(2, m == 0, "spurious event");
 929               		.loc 1 265 0
 930 04c2 60E0      		ldi r22,0
 931 04c4 82E0      		ldi r24,lo8(2)
 932 04c6 90E0      		ldi r25,0
 933               	.LVL108:
 934 04c8 0E94 0000 		call _test_assert
 935               	.LVL109:
 936 04cc 8111      		cpse r24,__zero_reg__
 937 04ce 00C0      		rjmp .L75
 938 04d0 00C0      		rjmp .L106
 939               	.LVL110:
 940               	.L105:
 941               	.LBB7:
 942               	.LBB6:
 269:../../test/testevt.c ****   test_assert(4, m == 0, "spurious event");
 943               		.loc 1 269 0
 944 04d2 60E0      		ldi r22,0
 945 04d4 00C0      		rjmp .L82
 946               	.LBE6:
 947               	.LBE7:
 948               		.cfi_endproc
 949               	.LFE17:
 951               	.global	patternevt
 952               		.section	.rodata
 955               	patternevt:
 956 0000 0000      		.word	testevt1
 957 0002 0000      		.word	testevt2
 958 0004 0000      		.word	testevt3
 959 0006 0000      		.word	0
 960               	.global	testevt3
 961               		.section	.rodata.str1.1
 962               	.LC2:
 963 0006 4576 656E 		.string	"Events, timeouts"
 963      7473 2C20 
 963      7469 6D65 
 963      6F75 7473 
 963      00
 964               		.section	.rodata
 967               	testevt3:
 968 0008 0000      		.word	.LC2
 969 000a 0000      		.word	gs(evt3_setup)
 970 000c 0000      		.word	0
 971 000e 0000      		.word	gs(evt3_execute)
 972               	.global	testevt2
 973               		.section	.rodata.str1.1
 974               	.LC3:
 975 0017 4576 656E 		.string	"Events, wait and broadcast"
 975      7473 2C20 
 975      7761 6974 
 975      2061 6E64 
 975      2062 726F 
 976               		.section	.rodata
 979               	testevt2:
 980 0010 0000      		.word	.LC3
 981 0012 0000      		.word	gs(evt2_setup)
 982 0014 0000      		.word	0
 983 0016 0000      		.word	gs(evt2_execute)
 984               	.global	testevt1
 985               		.section	.rodata.str1.1
 986               	.LC4:
 987 0032 4576 656E 		.string	"Events, registration and dispatch"
 987      7473 2C20 
 987      7265 6769 
 987      7374 7261 
 987      7469 6F6E 
 988               		.section	.rodata
 991               	testevt1:
 992 0018 0000      		.word	.LC4
 993 001a 0000      		.word	gs(evt1_setup)
 994 001c 0000      		.word	0
 995 001e 0000      		.word	gs(evt1_execute)
 996               		.data
 999               	es1:
 1000 0000 0000      		.word	es1
 1001               		.section	.rodata
 1004               	evhndl:
 1005 0020 0000      		.word	gs(h1)
 1006 0022 0000      		.word	gs(h2)
 1007 0024 0000      		.word	gs(h3)
 1008               		.data
 1011               	es2:
 1012 0002 0000      		.word	es2
 1013               		.text
 1014               	.Letext0:
 1015               		.file 2 "/usr/local/cross/lib/gcc/avr/4.7.2/include/stddef.h"
 1016               		.file 3 "/usr/local/cross/lib/gcc/avr/4.7.2/../../../../avr/include/stdint.h"
 1017               		.file 4 "../../os/ports/GCC/AVR/chtypes.h"
 1018               		.file 5 "../../os/kernel/include/chlists.h"
 1019               		.file 6 "../../os/kernel/include/chthreads.h"
 1020               		.file 7 "../../os/ports/GCC/AVR/chcore.h"
 1021               		.file 8 "../../os/kernel/include/chvt.h"
 1022               		.file 9 "../../os/kernel/include/chschd.h"
 1023               		.file 10 "../../os/kernel/include/chmtx.h"
 1024               		.file 11 "../../os/kernel/include/chevents.h"
 1025               		.file 12 "../../test/test.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 testevt.c
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccEBlB9C.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccEBlB9C.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccEBlB9C.s:4      *ABS*:000000000000003f __SREG__
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccEBlB9C.s:5      *ABS*:000000000000003b __RAMPZ__
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccEBlB9C.s:6      *ABS*:0000000000000000 __tmp_reg__
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccEBlB9C.s:7      *ABS*:0000000000000001 __zero_reg__
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccEBlB9C.s:12     .text:0000000000000000 evt3_setup
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccEBlB9C.s:29     .text:0000000000000006 evt2_setup
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccEBlB9C.s:45     .text:000000000000000c evt1_setup
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccEBlB9C.s:65     .text:0000000000000012 evt2_execute
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccEBlB9C.s:558    .text:0000000000000302 thread1
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccEBlB9C.s:999    .data:0000000000000000 es1
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccEBlB9C.s:1011   .data:0000000000000002 es2
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccEBlB9C.s:523    .text:00000000000002e0 thread2
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccEBlB9C.s:603    .text:0000000000000322 evt1_execute
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccEBlB9C.s:1004   .rodata:0000000000000020 evhndl
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccEBlB9C.s:754    .text:000000000000040c h3
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccEBlB9C.s:772    .text:0000000000000412 h2
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccEBlB9C.s:790    .text:0000000000000418 h1
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccEBlB9C.s:808    .text:000000000000041e evt3_execute
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccEBlB9C.s:955    .rodata:0000000000000000 patternevt
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccEBlB9C.s:991    .rodata:0000000000000018 testevt1
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccEBlB9C.s:979    .rodata:0000000000000010 testevt2
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccEBlB9C.s:967    .rodata:0000000000000008 testevt3

UNDEFINED SYMBOLS
chEvtGetAndClearEvents
chEvtAddEvents
chEvtWaitOne
_test_assert
test_wait_tick
vtlist
rlist
wa
chThdCreateStatic
threads
_test_assert_time_window
test_wait_threads
chEvtWaitAny
chEvtRegisterMask
chEvtWaitAll
chEvtUnregister
chEvtBroadcastFlags
chThdSleep
chEvtSignal
chEvtDispatch
_test_assert_sequence
test_emit_token
chEvtWaitOneTimeout
chEvtWaitAnyTimeout
chEvtWaitAllTimeout
__do_copy_data
