   1               		.file	"chevents.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	chEvtRegisterMask
  12               	chEvtRegisterMask:
  13               	.LFB7:
  14               		.file 1 "../../os/kernel/src/chevents.c"
   1:../../os/kernel/src/chevents.c **** /*
   2:../../os/kernel/src/chevents.c ****     ChibiOS/RT - Copyright (C) 2006,2007,2008,2009,2010,
   3:../../os/kernel/src/chevents.c ****                  2011,2012 Giovanni Di Sirio.
   4:../../os/kernel/src/chevents.c **** 
   5:../../os/kernel/src/chevents.c ****     This file is part of ChibiOS/RT.
   6:../../os/kernel/src/chevents.c **** 
   7:../../os/kernel/src/chevents.c ****     ChibiOS/RT is free software; you can redistribute it and/or modify
   8:../../os/kernel/src/chevents.c ****     it under the terms of the GNU General Public License as published by
   9:../../os/kernel/src/chevents.c ****     the Free Software Foundation; either version 3 of the License, or
  10:../../os/kernel/src/chevents.c ****     (at your option) any later version.
  11:../../os/kernel/src/chevents.c **** 
  12:../../os/kernel/src/chevents.c ****     ChibiOS/RT is distributed in the hope that it will be useful,
  13:../../os/kernel/src/chevents.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:../../os/kernel/src/chevents.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:../../os/kernel/src/chevents.c ****     GNU General Public License for more details.
  16:../../os/kernel/src/chevents.c **** 
  17:../../os/kernel/src/chevents.c ****     You should have received a copy of the GNU General Public License
  18:../../os/kernel/src/chevents.c ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  19:../../os/kernel/src/chevents.c **** */
  20:../../os/kernel/src/chevents.c **** /*
  21:../../os/kernel/src/chevents.c ****    Concepts and parts of this file have been contributed by Scott (skute).
  22:../../os/kernel/src/chevents.c ****  */
  23:../../os/kernel/src/chevents.c **** 
  24:../../os/kernel/src/chevents.c **** /**
  25:../../os/kernel/src/chevents.c ****  * @file    chevents.c
  26:../../os/kernel/src/chevents.c ****  * @brief   Events code.
  27:../../os/kernel/src/chevents.c ****  *
  28:../../os/kernel/src/chevents.c ****  * @addtogroup events
  29:../../os/kernel/src/chevents.c ****  * @details Event Flags, Event Sources and Event Listeners.
  30:../../os/kernel/src/chevents.c ****  *          <h2>Operation mode</h2>
  31:../../os/kernel/src/chevents.c ****  *          Each thread has a mask of pending event flags inside its @p Thread
  32:../../os/kernel/src/chevents.c ****  *          structure.
  33:../../os/kernel/src/chevents.c ****  *          Operations defined for event flags:
  34:../../os/kernel/src/chevents.c ****  *          - <b>Wait</b>, the invoking thread goes to sleep until a certain
  35:../../os/kernel/src/chevents.c ****  *            AND/OR combination of event flags becomes pending.
  36:../../os/kernel/src/chevents.c ****  *          - <b>Clear</b>, a mask of event flags is cleared from the pending
  37:../../os/kernel/src/chevents.c ****  *            events mask, the cleared event flags mask is returned (only the
  38:../../os/kernel/src/chevents.c ****  *            flags that were actually pending and then cleared).
  39:../../os/kernel/src/chevents.c ****  *          - <b>Signal</b>, an event mask is directly ORed to the mask of the
  40:../../os/kernel/src/chevents.c ****  *            signaled thread.
  41:../../os/kernel/src/chevents.c ****  *          - <b>Broadcast</b>, each thread registered on an Event Source is
  42:../../os/kernel/src/chevents.c ****  *            signaled with the event flags specified in its Event Listener.
  43:../../os/kernel/src/chevents.c ****  *          - <b>Dispatch</b>, an events mask is scanned and for each bit set
  44:../../os/kernel/src/chevents.c ****  *            to one an associated handler function is invoked. Bit masks are
  45:../../os/kernel/src/chevents.c ****  *            scanned from bit zero upward.
  46:../../os/kernel/src/chevents.c ****  *          .
  47:../../os/kernel/src/chevents.c ****  *          An Event Source is a special object that can be "broadcasted" by
  48:../../os/kernel/src/chevents.c ****  *          a thread or an interrupt service routine. Broadcasting an Event
  49:../../os/kernel/src/chevents.c ****  *          Source has the effect that all the threads registered on the
  50:../../os/kernel/src/chevents.c ****  *          Event Source will be signaled with an events mask.<br>
  51:../../os/kernel/src/chevents.c ****  *          An unlimited number of Event Sources can exists in a system and
  52:../../os/kernel/src/chevents.c ****  *          each thread can be listening on an unlimited number of
  53:../../os/kernel/src/chevents.c ****  *          them.
  54:../../os/kernel/src/chevents.c ****  * @pre     In order to use the Events APIs the @p CH_USE_EVENTS option must be
  55:../../os/kernel/src/chevents.c ****  *          enabled in @p chconf.h.
  56:../../os/kernel/src/chevents.c ****  * @post    Enabling events requires 1-4 (depending on the architecture)
  57:../../os/kernel/src/chevents.c ****  *          extra bytes in the @p Thread structure.
  58:../../os/kernel/src/chevents.c ****  * @{
  59:../../os/kernel/src/chevents.c ****  */
  60:../../os/kernel/src/chevents.c **** 
  61:../../os/kernel/src/chevents.c **** #include "ch.h"
  62:../../os/kernel/src/chevents.c **** 
  63:../../os/kernel/src/chevents.c **** #if CH_USE_EVENTS || defined(__DOXYGEN__)
  64:../../os/kernel/src/chevents.c **** /**
  65:../../os/kernel/src/chevents.c ****  * @brief   Registers an Event Listener on an Event Source.
  66:../../os/kernel/src/chevents.c ****  * @details Once a thread has registered as listener on an event source it
  67:../../os/kernel/src/chevents.c ****  *          will be notified of all events broadcasted there.
  68:../../os/kernel/src/chevents.c ****  * @note    Multiple Event Listeners can specify the same bits to be ORed to
  69:../../os/kernel/src/chevents.c ****  *          different threads.
  70:../../os/kernel/src/chevents.c ****  *
  71:../../os/kernel/src/chevents.c ****  * @param[in] esp       pointer to the  @p EventSource structure
  72:../../os/kernel/src/chevents.c ****  * @param[in] elp       pointer to the @p EventListener structure
  73:../../os/kernel/src/chevents.c ****  * @param[in] mask      the mask of event flags to be ORed to the thread when
  74:../../os/kernel/src/chevents.c ****  *                      the event source is broadcasted
  75:../../os/kernel/src/chevents.c ****  *
  76:../../os/kernel/src/chevents.c ****  * @api
  77:../../os/kernel/src/chevents.c ****  */
  78:../../os/kernel/src/chevents.c **** void chEvtRegisterMask(EventSource *esp, EventListener *elp, eventmask_t mask) {
  15               		.loc 1 78 0
  16               		.cfi_startproc
  17               	.LVL0:
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  22 0000 FB01      		movw r30,r22
  79:../../os/kernel/src/chevents.c **** 
  80:../../os/kernel/src/chevents.c ****   chDbgCheck((esp != NULL) && (elp != NULL), "chEvtRegisterMask");
  81:../../os/kernel/src/chevents.c **** 
  82:../../os/kernel/src/chevents.c ****   chSysLock();
  23               		.loc 1 82 0
  24               	/* #APP */
  25               	 ;  82 "../../os/kernel/src/chevents.c" 1
  26 0002 F894      		cli
  27               	 ;  0 "" 2
  83:../../os/kernel/src/chevents.c ****   elp->el_next     = esp->es_next;
  28               		.loc 1 83 0
  29               	/* #NOAPP */
  30 0004 DC01      		movw r26,r24
  31 0006 2D91      		ld r18,X+
  32 0008 3C91      		ld r19,X
  33 000a 1197      		sbiw r26,1
  34 000c 3183      		std Z+1,r19
  35 000e 2083      		st Z,r18
  84:../../os/kernel/src/chevents.c ****   esp->es_next     = elp;
  36               		.loc 1 84 0
  37 0010 6D93      		st X+,r22
  38 0012 7C93      		st X,r23
  85:../../os/kernel/src/chevents.c ****   elp->el_listener = currp;
  39               		.loc 1 85 0
  40 0014 8091 0000 		lds r24,rlist+11
  41 0018 9091 0000 		lds r25,rlist+11+1
  42               	.LVL1:
  43 001c 9383      		std Z+3,r25
  44 001e 8283      		std Z+2,r24
  86:../../os/kernel/src/chevents.c ****   elp->el_mask     = mask;
  45               		.loc 1 86 0
  46 0020 4483      		std Z+4,r20
  87:../../os/kernel/src/chevents.c ****   elp->el_flags    = 0;
  47               		.loc 1 87 0
  48 0022 1582      		std Z+5,__zero_reg__
  88:../../os/kernel/src/chevents.c ****   chSysUnlock();
  49               		.loc 1 88 0
  50               	/* #APP */
  51               	 ;  88 "../../os/kernel/src/chevents.c" 1
  52 0024 7894      		sei
  53               	 ;  0 "" 2
  54               	/* #NOAPP */
  55 0026 0895      		ret
  56               		.cfi_endproc
  57               	.LFE7:
  59               	.global	chEvtUnregister
  61               	chEvtUnregister:
  62               	.LFB8:
  89:../../os/kernel/src/chevents.c **** }
  90:../../os/kernel/src/chevents.c **** 
  91:../../os/kernel/src/chevents.c **** /**
  92:../../os/kernel/src/chevents.c ****  * @brief   Unregisters an Event Listener from its Event Source.
  93:../../os/kernel/src/chevents.c ****  * @note    If the event listener is not registered on the specified event
  94:../../os/kernel/src/chevents.c ****  *          source then the function does nothing.
  95:../../os/kernel/src/chevents.c ****  * @note    For optimal performance it is better to perform the unregister
  96:../../os/kernel/src/chevents.c ****  *          operations in inverse order of the register operations (elements
  97:../../os/kernel/src/chevents.c ****  *          are found on top of the list).
  98:../../os/kernel/src/chevents.c ****  *
  99:../../os/kernel/src/chevents.c ****  * @param[in] esp       pointer to the  @p EventSource structure
 100:../../os/kernel/src/chevents.c ****  * @param[in] elp       pointer to the @p EventListener structure
 101:../../os/kernel/src/chevents.c ****  *
 102:../../os/kernel/src/chevents.c ****  * @api
 103:../../os/kernel/src/chevents.c ****  */
 104:../../os/kernel/src/chevents.c **** void chEvtUnregister(EventSource *esp, EventListener *elp) {
  63               		.loc 1 104 0
  64               		.cfi_startproc
  65               	.LVL2:
  66               	/* prologue: function */
  67               	/* frame size = 0 */
  68               	/* stack size = 0 */
  69               	.L__stack_usage = 0
 105:../../os/kernel/src/chevents.c ****   EventListener *p;
 106:../../os/kernel/src/chevents.c **** 
 107:../../os/kernel/src/chevents.c ****   chDbgCheck((esp != NULL) && (elp != NULL), "chEvtUnregister");
 108:../../os/kernel/src/chevents.c **** 
 109:../../os/kernel/src/chevents.c ****   p = (EventListener *)esp;
 110:../../os/kernel/src/chevents.c ****   chSysLock();
  70               		.loc 1 110 0
  71               	/* #APP */
  72               	 ;  110 "../../os/kernel/src/chevents.c" 1
  73 0028 F894      		cli
  74               	 ;  0 "" 2
 109:../../os/kernel/src/chevents.c ****   p = (EventListener *)esp;
  75               		.loc 1 109 0
  76               	/* #NOAPP */
  77 002a FC01      		movw r30,r24
 111:../../os/kernel/src/chevents.c ****   while (p->el_next != (EventListener *)esp) {
  78               		.loc 1 111 0
  79 002c 00C0      		rjmp .L3
  80               	.LVL3:
  81               	.L6:
 112:../../os/kernel/src/chevents.c ****     if (p->el_next == elp) {
  82               		.loc 1 112 0
  83 002e F901      		movw r30,r18
  84               	.LVL4:
  85               	.L3:
 111:../../os/kernel/src/chevents.c ****   while (p->el_next != (EventListener *)esp) {
  86               		.loc 1 111 0 discriminator 1
  87 0030 2081      		ld r18,Z
  88 0032 3181      		ldd r19,Z+1
  89 0034 2817      		cp r18,r24
  90 0036 3907      		cpc r19,r25
  91 0038 01F0      		breq .L4
  92               		.loc 1 112 0
  93 003a 6217      		cp r22,r18
  94 003c 7307      		cpc r23,r19
  95 003e 01F4      		brne .L6
 113:../../os/kernel/src/chevents.c ****       p->el_next = elp->el_next;
  96               		.loc 1 113 0
  97 0040 DB01      		movw r26,r22
  98 0042 8D91      		ld r24,X+
  99 0044 9C91      		ld r25,X
 100               	.LVL5:
 101 0046 9183      		std Z+1,r25
 102 0048 8083      		st Z,r24
 103               	.L4:
 114:../../os/kernel/src/chevents.c ****       break;
 115:../../os/kernel/src/chevents.c ****     }
 116:../../os/kernel/src/chevents.c ****     p = p->el_next;
 117:../../os/kernel/src/chevents.c ****   }
 118:../../os/kernel/src/chevents.c ****   chSysUnlock();
 104               		.loc 1 118 0
 105               	/* #APP */
 106               	 ;  118 "../../os/kernel/src/chevents.c" 1
 107 004a 7894      		sei
 108               	 ;  0 "" 2
 109               	/* #NOAPP */
 110 004c 0895      		ret
 111               		.cfi_endproc
 112               	.LFE8:
 114               	.global	chEvtGetAndClearEvents
 116               	chEvtGetAndClearEvents:
 117               	.LFB9:
 119:../../os/kernel/src/chevents.c **** }
 120:../../os/kernel/src/chevents.c **** 
 121:../../os/kernel/src/chevents.c **** /**
 122:../../os/kernel/src/chevents.c ****  * @brief   Clears the pending events specified in the mask.
 123:../../os/kernel/src/chevents.c ****  *
 124:../../os/kernel/src/chevents.c ****  * @param[in] mask      the events to be cleared
 125:../../os/kernel/src/chevents.c ****  * @return              The pending events that were cleared.
 126:../../os/kernel/src/chevents.c ****  *
 127:../../os/kernel/src/chevents.c ****  * @api
 128:../../os/kernel/src/chevents.c ****  */
 129:../../os/kernel/src/chevents.c **** eventmask_t chEvtGetAndClearEvents(eventmask_t mask) {
 118               		.loc 1 129 0
 119               		.cfi_startproc
 120               	.LVL6:
 121               	/* prologue: function */
 122               	/* frame size = 0 */
 123               	/* stack size = 0 */
 124               	.L__stack_usage = 0
 130:../../os/kernel/src/chevents.c ****   eventmask_t m;
 131:../../os/kernel/src/chevents.c **** 
 132:../../os/kernel/src/chevents.c ****   chSysLock();
 125               		.loc 1 132 0
 126               	/* #APP */
 127               	 ;  132 "../../os/kernel/src/chevents.c" 1
 128 004e F894      		cli
 129               	 ;  0 "" 2
 133:../../os/kernel/src/chevents.c **** 
 134:../../os/kernel/src/chevents.c ****   m = currp->p_epending & mask;
 130               		.loc 1 134 0
 131               	/* #NOAPP */
 132 0050 E091 0000 		lds r30,rlist+11
 133 0054 F091 0000 		lds r31,rlist+11+1
 134 0058 248D      		ldd r18,Z+28
 135               	.LVL7:
 135:../../os/kernel/src/chevents.c ****   currp->p_epending &= ~mask;
 136               		.loc 1 135 0
 137 005a 982F      		mov r25,r24
 138 005c 9095      		com r25
 139 005e 9223      		and r25,r18
 140 0060 948F      		std Z+28,r25
 136:../../os/kernel/src/chevents.c **** 
 137:../../os/kernel/src/chevents.c ****   chSysUnlock();
 141               		.loc 1 137 0
 142               	/* #APP */
 143               	 ;  137 "../../os/kernel/src/chevents.c" 1
 144 0062 7894      		sei
 145               	 ;  0 "" 2
 138:../../os/kernel/src/chevents.c ****   return m;
 139:../../os/kernel/src/chevents.c **** }
 146               		.loc 1 139 0
 147               	/* #NOAPP */
 148 0064 8223      		and r24,r18
 149               	.LVL8:
 150 0066 0895      		ret
 151               		.cfi_endproc
 152               	.LFE9:
 154               	.global	chEvtAddEvents
 156               	chEvtAddEvents:
 157               	.LFB10:
 140:../../os/kernel/src/chevents.c **** 
 141:../../os/kernel/src/chevents.c **** /**
 142:../../os/kernel/src/chevents.c ****  * @brief   Adds (OR) a set of event flags on the current thread, this is
 143:../../os/kernel/src/chevents.c ****  *          @b much faster than using @p chEvtBroadcast() or @p chEvtSignal().
 144:../../os/kernel/src/chevents.c ****  *
 145:../../os/kernel/src/chevents.c ****  * @param[in] mask      the event flags to be ORed
 146:../../os/kernel/src/chevents.c ****  * @return              The current pending events mask.
 147:../../os/kernel/src/chevents.c ****  *
 148:../../os/kernel/src/chevents.c ****  * @api
 149:../../os/kernel/src/chevents.c ****  */
 150:../../os/kernel/src/chevents.c **** eventmask_t chEvtAddEvents(eventmask_t mask) {
 158               		.loc 1 150 0
 159               		.cfi_startproc
 160               	.LVL9:
 161               	/* prologue: function */
 162               	/* frame size = 0 */
 163               	/* stack size = 0 */
 164               	.L__stack_usage = 0
 151:../../os/kernel/src/chevents.c **** 
 152:../../os/kernel/src/chevents.c ****   chSysLock();
 165               		.loc 1 152 0
 166               	/* #APP */
 167               	 ;  152 "../../os/kernel/src/chevents.c" 1
 168 0068 F894      		cli
 169               	 ;  0 "" 2
 153:../../os/kernel/src/chevents.c **** 
 154:../../os/kernel/src/chevents.c ****   mask = (currp->p_epending |= mask);
 170               		.loc 1 154 0
 171               	/* #NOAPP */
 172 006a E091 0000 		lds r30,rlist+11
 173 006e F091 0000 		lds r31,rlist+11+1
 174 0072 948D      		ldd r25,Z+28
 175 0074 892B      		or r24,r25
 176               	.LVL10:
 177 0076 848F      		std Z+28,r24
 178               	.LVL11:
 155:../../os/kernel/src/chevents.c **** 
 156:../../os/kernel/src/chevents.c ****   chSysUnlock();
 179               		.loc 1 156 0
 180               	/* #APP */
 181               	 ;  156 "../../os/kernel/src/chevents.c" 1
 182 0078 7894      		sei
 183               	 ;  0 "" 2
 157:../../os/kernel/src/chevents.c ****   return mask;
 158:../../os/kernel/src/chevents.c **** }
 184               		.loc 1 158 0
 185               	/* #NOAPP */
 186 007a 0895      		ret
 187               		.cfi_endproc
 188               	.LFE10:
 190               	.global	chEvtGetAndClearFlags
 192               	chEvtGetAndClearFlags:
 193               	.LFB12:
 159:../../os/kernel/src/chevents.c **** 
 160:../../os/kernel/src/chevents.c **** /**
 161:../../os/kernel/src/chevents.c ****  * @brief   Signals all the Event Listeners registered on the specified Event
 162:../../os/kernel/src/chevents.c ****  *          Source.
 163:../../os/kernel/src/chevents.c ****  * @details This function variants ORs the specified event flags to all the
 164:../../os/kernel/src/chevents.c ****  *          threads registered on the @p EventSource in addition to the event
 165:../../os/kernel/src/chevents.c ****  *          flags specified by the threads themselves in the
 166:../../os/kernel/src/chevents.c ****  *          @p EventListener objects.
 167:../../os/kernel/src/chevents.c ****  * @post    This function does not reschedule so a call to a rescheduling
 168:../../os/kernel/src/chevents.c ****  *          function must be performed before unlocking the kernel. Note that
 169:../../os/kernel/src/chevents.c ****  *          interrupt handlers always reschedule on exit so an explicit
 170:../../os/kernel/src/chevents.c ****  *          reschedule must not be performed in ISRs.
 171:../../os/kernel/src/chevents.c ****  *
 172:../../os/kernel/src/chevents.c ****  * @param[in] esp       pointer to the @p EventSource structure
 173:../../os/kernel/src/chevents.c ****  * @param[in] flags     the flags set to be added to the listener flags mask
 174:../../os/kernel/src/chevents.c ****  *
 175:../../os/kernel/src/chevents.c ****  * @iclass
 176:../../os/kernel/src/chevents.c ****  */
 177:../../os/kernel/src/chevents.c **** void chEvtBroadcastFlagsI(EventSource *esp, flagsmask_t flags) {
 178:../../os/kernel/src/chevents.c ****   EventListener *elp;
 179:../../os/kernel/src/chevents.c **** 
 180:../../os/kernel/src/chevents.c ****   chDbgCheckClassI();
 181:../../os/kernel/src/chevents.c ****   chDbgCheck(esp != NULL, "chEvtBroadcastMaskI");
 182:../../os/kernel/src/chevents.c **** 
 183:../../os/kernel/src/chevents.c ****   elp = esp->es_next;
 184:../../os/kernel/src/chevents.c ****   while (elp != (EventListener *)esp) {
 185:../../os/kernel/src/chevents.c ****     elp->el_flags |= flags;
 186:../../os/kernel/src/chevents.c ****     chEvtSignalI(elp->el_listener, elp->el_mask);
 187:../../os/kernel/src/chevents.c ****     elp = elp->el_next;
 188:../../os/kernel/src/chevents.c ****   }
 189:../../os/kernel/src/chevents.c **** }
 190:../../os/kernel/src/chevents.c **** 
 191:../../os/kernel/src/chevents.c **** /**
 192:../../os/kernel/src/chevents.c ****  * @brief   Returns the flags associated to an @p EventListener.
 193:../../os/kernel/src/chevents.c ****  * @details The flags are returned and the @p EventListener flags mask is
 194:../../os/kernel/src/chevents.c ****  *          cleared.
 195:../../os/kernel/src/chevents.c ****  *
 196:../../os/kernel/src/chevents.c ****  * @param[in] elp       pointer to the @p EventListener structure
 197:../../os/kernel/src/chevents.c ****  * @return              The flags added to the listener by the associated
 198:../../os/kernel/src/chevents.c ****  *                      event source.
 199:../../os/kernel/src/chevents.c ****  *
 200:../../os/kernel/src/chevents.c ****  * @iclass
 201:../../os/kernel/src/chevents.c ****  */
 202:../../os/kernel/src/chevents.c **** flagsmask_t chEvtGetAndClearFlags(EventListener *elp) {
 194               		.loc 1 202 0
 195               		.cfi_startproc
 196               	.LVL12:
 197               	/* prologue: function */
 198               	/* frame size = 0 */
 199               	/* stack size = 0 */
 200               	.L__stack_usage = 0
 201 007c FC01      		movw r30,r24
 203:../../os/kernel/src/chevents.c ****   flagsmask_t flags;
 204:../../os/kernel/src/chevents.c **** 
 205:../../os/kernel/src/chevents.c ****   chSysLock();
 202               		.loc 1 205 0
 203               	/* #APP */
 204               	 ;  205 "../../os/kernel/src/chevents.c" 1
 205 007e F894      		cli
 206               	 ;  0 "" 2
 206:../../os/kernel/src/chevents.c **** 
 207:../../os/kernel/src/chevents.c ****   flags = elp->el_flags;
 207               		.loc 1 207 0
 208               	/* #NOAPP */
 209 0080 8581      		ldd r24,Z+5
 210               	.LVL13:
 208:../../os/kernel/src/chevents.c ****   elp->el_flags = 0;
 211               		.loc 1 208 0
 212 0082 1582      		std Z+5,__zero_reg__
 209:../../os/kernel/src/chevents.c **** 
 210:../../os/kernel/src/chevents.c ****   chSysUnlock();
 213               		.loc 1 210 0
 214               	/* #APP */
 215               	 ;  210 "../../os/kernel/src/chevents.c" 1
 216 0084 7894      		sei
 217               	 ;  0 "" 2
 211:../../os/kernel/src/chevents.c ****   return flags;
 212:../../os/kernel/src/chevents.c **** }
 218               		.loc 1 212 0
 219               	/* #NOAPP */
 220 0086 0895      		ret
 221               		.cfi_endproc
 222               	.LFE12:
 224               	.global	chEvtSignalI
 226               	chEvtSignalI:
 227               	.LFB14:
 213:../../os/kernel/src/chevents.c **** 
 214:../../os/kernel/src/chevents.c **** /**
 215:../../os/kernel/src/chevents.c ****  * @brief   Adds a set of event flags directly to specified @p Thread.
 216:../../os/kernel/src/chevents.c ****  *
 217:../../os/kernel/src/chevents.c ****  * @param[in] tp        the thread to be signaled
 218:../../os/kernel/src/chevents.c ****  * @param[in] mask      the event flags set to be ORed
 219:../../os/kernel/src/chevents.c ****  *
 220:../../os/kernel/src/chevents.c ****  * @api
 221:../../os/kernel/src/chevents.c ****  */
 222:../../os/kernel/src/chevents.c **** void chEvtSignal(Thread *tp, eventmask_t mask) {
 223:../../os/kernel/src/chevents.c **** 
 224:../../os/kernel/src/chevents.c ****   chDbgCheck(tp != NULL, "chEvtSignal");
 225:../../os/kernel/src/chevents.c **** 
 226:../../os/kernel/src/chevents.c ****   chSysLock();
 227:../../os/kernel/src/chevents.c ****   chEvtSignalI(tp, mask);
 228:../../os/kernel/src/chevents.c ****   chSchRescheduleS();
 229:../../os/kernel/src/chevents.c ****   chSysUnlock();
 230:../../os/kernel/src/chevents.c **** }
 231:../../os/kernel/src/chevents.c **** 
 232:../../os/kernel/src/chevents.c **** /**
 233:../../os/kernel/src/chevents.c ****  * @brief   Adds a set of event flags directly to specified @p Thread.
 234:../../os/kernel/src/chevents.c ****  * @post    This function does not reschedule so a call to a rescheduling
 235:../../os/kernel/src/chevents.c ****  *          function must be performed before unlocking the kernel. Note that
 236:../../os/kernel/src/chevents.c ****  *          interrupt handlers always reschedule on exit so an explicit
 237:../../os/kernel/src/chevents.c ****  *          reschedule must not be performed in ISRs.
 238:../../os/kernel/src/chevents.c ****  *
 239:../../os/kernel/src/chevents.c ****  * @param[in] tp        the thread to be signaled
 240:../../os/kernel/src/chevents.c ****  * @param[in] mask      the event flags set to be ORed
 241:../../os/kernel/src/chevents.c ****  *
 242:../../os/kernel/src/chevents.c ****  * @iclass
 243:../../os/kernel/src/chevents.c ****  */
 244:../../os/kernel/src/chevents.c **** void chEvtSignalI(Thread *tp, eventmask_t mask) {
 228               		.loc 1 244 0
 229               		.cfi_startproc
 230               	.LVL14:
 231               	/* prologue: function */
 232               	/* frame size = 0 */
 233               	/* stack size = 0 */
 234               	.L__stack_usage = 0
 235 0088 FC01      		movw r30,r24
 245:../../os/kernel/src/chevents.c **** 
 246:../../os/kernel/src/chevents.c ****   chDbgCheckClassI();
 247:../../os/kernel/src/chevents.c ****   chDbgCheck(tp != NULL, "chEvtSignalI");
 248:../../os/kernel/src/chevents.c **** 
 249:../../os/kernel/src/chevents.c ****   tp->p_epending |= mask;
 236               		.loc 1 249 0
 237 008a 848D      		ldd r24,Z+28
 238               	.LVL15:
 239 008c 682B      		or r22,r24
 240               	.LVL16:
 241 008e 648F      		std Z+28,r22
 250:../../os/kernel/src/chevents.c ****   /* Test on the AND/OR conditions wait states.*/
 251:../../os/kernel/src/chevents.c ****   if (((tp->p_state == THD_STATE_WTOREVT) &&
 242               		.loc 1 251 0
 243 0090 8585      		ldd r24,Z+13
 244 0092 8830      		cpi r24,lo8(8)
 245 0094 01F0      		breq .L15
 252:../../os/kernel/src/chevents.c ****        ((tp->p_epending & tp->p_u.ewmask) != 0)) ||
 246               		.loc 1 252 0
 247 0096 8930      		cpi r24,lo8(9)
 248 0098 01F0      		breq .L16
 249               	.L11:
 250 009a 0895      		ret
 251               	.L16:
 253:../../os/kernel/src/chevents.c ****       ((tp->p_state == THD_STATE_WTANDEVT) &&
 254:../../os/kernel/src/chevents.c ****        ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask)))
 252               		.loc 1 254 0
 253 009c 8289      		ldd r24,Z+18
 254 009e 6823      		and r22,r24
 253:../../os/kernel/src/chevents.c ****       ((tp->p_state == THD_STATE_WTANDEVT) &&
 255               		.loc 1 253 0
 256 00a0 8613      		cpse r24,r22
 257 00a2 00C0      		rjmp .L11
 258               	.L13:
 259               	.LVL17:
 260               	.LBB4:
 261               	.LBB5:
 255:../../os/kernel/src/chevents.c ****     chSchReadyI(tp)->p_u.rdymsg = RDY_OK;
 262               		.loc 1 255 0
 263 00a4 CF01      		movw r24,r30
 264 00a6 0E94 0000 		call chSchReadyI
 265               	.LVL18:
 266 00aa FC01      		movw r30,r24
 267 00ac 138A      		std Z+19,__zero_reg__
 268 00ae 128A      		std Z+18,__zero_reg__
 269 00b0 0895      		ret
 270               	.LVL19:
 271               	.L15:
 272               	.LBE5:
 273               	.LBE4:
 252:../../os/kernel/src/chevents.c ****        ((tp->p_epending & tp->p_u.ewmask) != 0)) ||
 274               		.loc 1 252 0 discriminator 1
 275 00b2 8289      		ldd r24,Z+18
 276 00b4 8623      		and r24,r22
 251:../../os/kernel/src/chevents.c ****   if (((tp->p_state == THD_STATE_WTOREVT) &&
 277               		.loc 1 251 0 discriminator 1
 278 00b6 01F4      		brne .L13
 279 00b8 0895      		ret
 280               		.cfi_endproc
 281               	.LFE14:
 283               	.global	chEvtSignal
 285               	chEvtSignal:
 286               	.LFB13:
 222:../../os/kernel/src/chevents.c **** void chEvtSignal(Thread *tp, eventmask_t mask) {
 287               		.loc 1 222 0
 288               		.cfi_startproc
 289               	.LVL20:
 290               	/* prologue: function */
 291               	/* frame size = 0 */
 292               	/* stack size = 0 */
 293               	.L__stack_usage = 0
 226:../../os/kernel/src/chevents.c ****   chSysLock();
 294               		.loc 1 226 0
 295               	/* #APP */
 296               	 ;  226 "../../os/kernel/src/chevents.c" 1
 297 00ba F894      		cli
 298               	 ;  0 "" 2
 227:../../os/kernel/src/chevents.c ****   chEvtSignalI(tp, mask);
 299               		.loc 1 227 0
 300               	/* #NOAPP */
 301 00bc 0E94 0000 		call chEvtSignalI
 302               	.LVL21:
 228:../../os/kernel/src/chevents.c ****   chSchRescheduleS();
 303               		.loc 1 228 0
 304 00c0 0E94 0000 		call chSchRescheduleS
 305               	.LVL22:
 229:../../os/kernel/src/chevents.c ****   chSysUnlock();
 306               		.loc 1 229 0
 307               	/* #APP */
 308               	 ;  229 "../../os/kernel/src/chevents.c" 1
 309 00c4 7894      		sei
 310               	 ;  0 "" 2
 311               	/* #NOAPP */
 312 00c6 0895      		ret
 313               		.cfi_endproc
 314               	.LFE13:
 316               	.global	chEvtBroadcastFlagsI
 318               	chEvtBroadcastFlagsI:
 319               	.LFB11:
 177:../../os/kernel/src/chevents.c **** void chEvtBroadcastFlagsI(EventSource *esp, flagsmask_t flags) {
 320               		.loc 1 177 0
 321               		.cfi_startproc
 322               	.LVL23:
 323 00c8 FF92      		push r15
 324               	.LCFI0:
 325               		.cfi_def_cfa_offset 3
 326               		.cfi_offset 15, -2
 327 00ca 0F93      		push r16
 328               	.LCFI1:
 329               		.cfi_def_cfa_offset 4
 330               		.cfi_offset 16, -3
 331 00cc 1F93      		push r17
 332               	.LCFI2:
 333               		.cfi_def_cfa_offset 5
 334               		.cfi_offset 17, -4
 335 00ce CF93      		push r28
 336               	.LCFI3:
 337               		.cfi_def_cfa_offset 6
 338               		.cfi_offset 28, -5
 339 00d0 DF93      		push r29
 340               	.LCFI4:
 341               		.cfi_def_cfa_offset 7
 342               		.cfi_offset 29, -6
 343               	/* prologue: function */
 344               	/* frame size = 0 */
 345               	/* stack size = 5 */
 346               	.L__stack_usage = 5
 347 00d2 8C01      		movw r16,r24
 348 00d4 F62E      		mov r15,r22
 183:../../os/kernel/src/chevents.c ****   elp = esp->es_next;
 349               		.loc 1 183 0
 350 00d6 FC01      		movw r30,r24
 351 00d8 C081      		ld r28,Z
 352 00da D181      		ldd r29,Z+1
 353               	.LVL24:
 184:../../os/kernel/src/chevents.c ****   while (elp != (EventListener *)esp) {
 354               		.loc 1 184 0
 355 00dc 8C17      		cp r24,r28
 356 00de 9D07      		cpc r25,r29
 357 00e0 01F0      		breq .L18
 358               	.LVL25:
 359               	.L22:
 185:../../os/kernel/src/chevents.c ****     elp->el_flags |= flags;
 360               		.loc 1 185 0
 361 00e2 8D81      		ldd r24,Y+5
 362 00e4 8F29      		or r24,r15
 363 00e6 8D83      		std Y+5,r24
 186:../../os/kernel/src/chevents.c ****     chEvtSignalI(elp->el_listener, elp->el_mask);
 364               		.loc 1 186 0
 365 00e8 6C81      		ldd r22,Y+4
 366 00ea 8A81      		ldd r24,Y+2
 367 00ec 9B81      		ldd r25,Y+3
 368 00ee 0E94 0000 		call chEvtSignalI
 369               	.LVL26:
 187:../../os/kernel/src/chevents.c ****     elp = elp->el_next;
 370               		.loc 1 187 0
 371 00f2 0990      		ld __tmp_reg__,Y+
 372 00f4 D881      		ld r29,Y
 373 00f6 C02D      		mov r28,__tmp_reg__
 374               	.LVL27:
 184:../../os/kernel/src/chevents.c ****   while (elp != (EventListener *)esp) {
 375               		.loc 1 184 0
 376 00f8 0C17      		cp r16,r28
 377 00fa 1D07      		cpc r17,r29
 378 00fc 01F4      		brne .L22
 379               	.L18:
 380               	/* epilogue start */
 189:../../os/kernel/src/chevents.c **** }
 381               		.loc 1 189 0
 382 00fe DF91      		pop r29
 383 0100 CF91      		pop r28
 384               	.LVL28:
 385 0102 1F91      		pop r17
 386 0104 0F91      		pop r16
 387               	.LVL29:
 388 0106 FF90      		pop r15
 389               	.LVL30:
 390 0108 0895      		ret
 391               		.cfi_endproc
 392               	.LFE11:
 394               	.global	chEvtBroadcastFlags
 396               	chEvtBroadcastFlags:
 397               	.LFB15:
 256:../../os/kernel/src/chevents.c **** }
 257:../../os/kernel/src/chevents.c **** 
 258:../../os/kernel/src/chevents.c **** /**
 259:../../os/kernel/src/chevents.c ****  * @brief   Signals all the Event Listeners registered on the specified Event
 260:../../os/kernel/src/chevents.c ****  *          Source.
 261:../../os/kernel/src/chevents.c ****  * @details This function variants ORs the specified event flags to all the
 262:../../os/kernel/src/chevents.c ****  *          threads registered on the @p EventSource in addition to the event
 263:../../os/kernel/src/chevents.c ****  *          flags specified by the threads themselves in the
 264:../../os/kernel/src/chevents.c ****  *          @p EventListener objects.
 265:../../os/kernel/src/chevents.c ****  *
 266:../../os/kernel/src/chevents.c ****  * @param[in] esp       pointer to the @p EventSource structure
 267:../../os/kernel/src/chevents.c ****  * @param[in] flags     the flags set to be added to the listener flags mask
 268:../../os/kernel/src/chevents.c ****  *
 269:../../os/kernel/src/chevents.c ****  * @api
 270:../../os/kernel/src/chevents.c ****  */
 271:../../os/kernel/src/chevents.c **** void chEvtBroadcastFlags(EventSource *esp, flagsmask_t flags) {
 398               		.loc 1 271 0
 399               		.cfi_startproc
 400               	.LVL31:
 401               	/* prologue: function */
 402               	/* frame size = 0 */
 403               	/* stack size = 0 */
 404               	.L__stack_usage = 0
 272:../../os/kernel/src/chevents.c **** 
 273:../../os/kernel/src/chevents.c ****   chSysLock();
 405               		.loc 1 273 0
 406               	/* #APP */
 407               	 ;  273 "../../os/kernel/src/chevents.c" 1
 408 010a F894      		cli
 409               	 ;  0 "" 2
 274:../../os/kernel/src/chevents.c ****   chEvtBroadcastFlagsI(esp, flags);
 410               		.loc 1 274 0
 411               	/* #NOAPP */
 412 010c 0E94 0000 		call chEvtBroadcastFlagsI
 413               	.LVL32:
 275:../../os/kernel/src/chevents.c ****   chSchRescheduleS();
 414               		.loc 1 275 0
 415 0110 0E94 0000 		call chSchRescheduleS
 416               	.LVL33:
 276:../../os/kernel/src/chevents.c ****   chSysUnlock();
 417               		.loc 1 276 0
 418               	/* #APP */
 419               	 ;  276 "../../os/kernel/src/chevents.c" 1
 420 0114 7894      		sei
 421               	 ;  0 "" 2
 422               	/* #NOAPP */
 423 0116 0895      		ret
 424               		.cfi_endproc
 425               	.LFE15:
 427               	.global	chEvtGetAndClearFlagsI
 429               	chEvtGetAndClearFlagsI:
 430               	.LFB16:
 277:../../os/kernel/src/chevents.c **** }
 278:../../os/kernel/src/chevents.c **** 
 279:../../os/kernel/src/chevents.c **** /**
 280:../../os/kernel/src/chevents.c ****  * @brief   Returns the flags associated to an @p EventListener.
 281:../../os/kernel/src/chevents.c ****  * @details The flags are returned and the @p EventListener flags mask is
 282:../../os/kernel/src/chevents.c ****  *          cleared.
 283:../../os/kernel/src/chevents.c ****  *
 284:../../os/kernel/src/chevents.c ****  * @param[in] elp       pointer to the @p EventListener structure
 285:../../os/kernel/src/chevents.c ****  * @return              The flags added to the listener by the associated
 286:../../os/kernel/src/chevents.c ****  *                      event source.
 287:../../os/kernel/src/chevents.c ****  *
 288:../../os/kernel/src/chevents.c ****  * @iclass
 289:../../os/kernel/src/chevents.c ****  */
 290:../../os/kernel/src/chevents.c **** flagsmask_t chEvtGetAndClearFlagsI(EventListener *elp) {
 431               		.loc 1 290 0
 432               		.cfi_startproc
 433               	.LVL34:
 434               	/* prologue: function */
 435               	/* frame size = 0 */
 436               	/* stack size = 0 */
 437               	.L__stack_usage = 0
 438 0118 FC01      		movw r30,r24
 291:../../os/kernel/src/chevents.c ****   flagsmask_t flags;
 292:../../os/kernel/src/chevents.c **** 
 293:../../os/kernel/src/chevents.c ****   flags = elp->el_flags;
 439               		.loc 1 293 0
 440 011a 8581      		ldd r24,Z+5
 441               	.LVL35:
 294:../../os/kernel/src/chevents.c ****   elp->el_flags = 0;
 442               		.loc 1 294 0
 443 011c 1582      		std Z+5,__zero_reg__
 295:../../os/kernel/src/chevents.c **** 
 296:../../os/kernel/src/chevents.c ****   return flags;
 297:../../os/kernel/src/chevents.c **** }
 444               		.loc 1 297 0
 445 011e 0895      		ret
 446               		.cfi_endproc
 447               	.LFE16:
 449               	.global	chEvtDispatch
 451               	chEvtDispatch:
 452               	.LFB17:
 298:../../os/kernel/src/chevents.c **** 
 299:../../os/kernel/src/chevents.c **** /**
 300:../../os/kernel/src/chevents.c ****  * @brief   Invokes the event handlers associated to an event flags mask.
 301:../../os/kernel/src/chevents.c ****  *
 302:../../os/kernel/src/chevents.c ****  * @param[in] mask      mask of the event flags to be dispatched
 303:../../os/kernel/src/chevents.c ****  * @param[in] handlers  an array of @p evhandler_t. The array must have size
 304:../../os/kernel/src/chevents.c ****  *                      equal to the number of bits in eventmask_t.
 305:../../os/kernel/src/chevents.c ****  *
 306:../../os/kernel/src/chevents.c ****  * @api
 307:../../os/kernel/src/chevents.c ****  */
 308:../../os/kernel/src/chevents.c **** void chEvtDispatch(const evhandler_t *handlers, eventmask_t mask) {
 453               		.loc 1 308 0
 454               		.cfi_startproc
 455               	.LVL36:
 456 0120 EF92      		push r14
 457               	.LCFI5:
 458               		.cfi_def_cfa_offset 3
 459               		.cfi_offset 14, -2
 460 0122 FF92      		push r15
 461               	.LCFI6:
 462               		.cfi_def_cfa_offset 4
 463               		.cfi_offset 15, -3
 464 0124 0F93      		push r16
 465               	.LCFI7:
 466               		.cfi_def_cfa_offset 5
 467               		.cfi_offset 16, -4
 468 0126 1F93      		push r17
 469               	.LCFI8:
 470               		.cfi_def_cfa_offset 6
 471               		.cfi_offset 17, -5
 472 0128 CF93      		push r28
 473               	.LCFI9:
 474               		.cfi_def_cfa_offset 7
 475               		.cfi_offset 28, -6
 476 012a DF93      		push r29
 477               	.LCFI10:
 478               		.cfi_def_cfa_offset 8
 479               		.cfi_offset 29, -7
 480               	/* prologue: function */
 481               	/* frame size = 0 */
 482               	/* stack size = 6 */
 483               	.L__stack_usage = 6
 484 012c 8C01      		movw r16,r24
 485 012e E62E      		mov r14,r22
 486               	.LVL37:
 309:../../os/kernel/src/chevents.c ****   eventid_t eid;
 310:../../os/kernel/src/chevents.c **** 
 311:../../os/kernel/src/chevents.c ****   chDbgCheck(handlers != NULL, "chEvtDispatch");
 312:../../os/kernel/src/chevents.c **** 
 313:../../os/kernel/src/chevents.c ****   eid = 0;
 314:../../os/kernel/src/chevents.c ****   while (mask) {
 487               		.loc 1 314 0
 488 0130 6623      		tst r22
 489 0132 01F0      		breq .L26
 490 0134 F12C      		mov r15,__zero_reg__
 315:../../os/kernel/src/chevents.c ****     if (mask & EVENT_MASK(eid)) {
 491               		.loc 1 315 0
 492 0136 C1E0      		ldi r28,lo8(1)
 493 0138 D0E0      		ldi r29,0
 494 013a 00C0      		rjmp .L27
 495               	.LVL38:
 496               	.L28:
 316:../../os/kernel/src/chevents.c ****       chDbgAssert(handlers[eid] != NULL,
 317:../../os/kernel/src/chevents.c ****                   "chEvtDispatch(), #1",
 318:../../os/kernel/src/chevents.c ****                   "null handler");
 319:../../os/kernel/src/chevents.c ****       mask &= ~EVENT_MASK(eid);
 320:../../os/kernel/src/chevents.c ****       handlers[eid](eid);
 321:../../os/kernel/src/chevents.c ****     }
 322:../../os/kernel/src/chevents.c ****     eid++;
 497               		.loc 1 322 0
 498 013c F394      		inc r15
 499               	.LVL39:
 314:../../os/kernel/src/chevents.c ****   while (mask) {
 500               		.loc 1 314 0
 501 013e EE20      		tst r14
 502 0140 01F0      		breq .L26
 503               	.LVL40:
 504               	.L27:
 315:../../os/kernel/src/chevents.c ****     if (mask & EVENT_MASK(eid)) {
 505               		.loc 1 315 0
 506 0142 9E01      		movw r18,r28
 507 0144 0F2C      		mov r0,r15
 508 0146 00C0      		rjmp 2f
 509               		1:
 510 0148 220F      		lsl r18
 511               		2:
 512 014a 0A94      		dec r0
 513 014c 02F4      		brpl 1b
 514 014e 8E2D      		mov r24,r14
 515 0150 8223      		and r24,r18
 516 0152 01F0      		breq .L28
 319:../../os/kernel/src/chevents.c ****       mask &= ~EVENT_MASK(eid);
 517               		.loc 1 319 0
 518 0154 2095      		com r18
 519 0156 E222      		and r14,r18
 520               	.LVL41:
 320:../../os/kernel/src/chevents.c ****       handlers[eid](eid);
 521               		.loc 1 320 0
 522 0158 EF2D      		mov r30,r15
 523 015a F0E0      		ldi r31,0
 524 015c EE0F      		lsl r30
 525 015e FF1F      		rol r31
 526 0160 E00F      		add r30,r16
 527 0162 F11F      		adc r31,r17
 528 0164 0190      		ld __tmp_reg__,Z+
 529 0166 F081      		ld r31,Z
 530 0168 E02D      		mov r30,__tmp_reg__
 531 016a 8F2D      		mov r24,r15
 532 016c 0995      		icall
 533               	.LVL42:
 534               		.loc 1 322 0
 535 016e F394      		inc r15
 536               	.LVL43:
 314:../../os/kernel/src/chevents.c ****   while (mask) {
 537               		.loc 1 314 0
 538 0170 E110      		cpse r14,__zero_reg__
 539 0172 00C0      		rjmp .L27
 540               	.LVL44:
 541               	.L26:
 542               	/* epilogue start */
 323:../../os/kernel/src/chevents.c ****   }
 324:../../os/kernel/src/chevents.c **** }
 543               		.loc 1 324 0
 544 0174 DF91      		pop r29
 545 0176 CF91      		pop r28
 546 0178 1F91      		pop r17
 547 017a 0F91      		pop r16
 548               	.LVL45:
 549 017c FF90      		pop r15
 550 017e EF90      		pop r14
 551               	.LVL46:
 552 0180 0895      		ret
 553               		.cfi_endproc
 554               	.LFE17:
 556               	.global	chEvtWaitOne
 558               	chEvtWaitOne:
 559               	.LFB18:
 325:../../os/kernel/src/chevents.c **** 
 326:../../os/kernel/src/chevents.c **** #if CH_OPTIMIZE_SPEED || !CH_USE_EVENTS_TIMEOUT || defined(__DOXYGEN__)
 327:../../os/kernel/src/chevents.c **** /**
 328:../../os/kernel/src/chevents.c ****  * @brief   Waits for exactly one of the specified events.
 329:../../os/kernel/src/chevents.c ****  * @details The function waits for one event among those specified in
 330:../../os/kernel/src/chevents.c ****  *          @p mask to become pending then the event is cleared and returned.
 331:../../os/kernel/src/chevents.c ****  * @note    One and only one event is served in the function, the one with the
 332:../../os/kernel/src/chevents.c ****  *          lowest event id. The function is meant to be invoked into a loop in
 333:../../os/kernel/src/chevents.c ****  *          order to serve all the pending events.<br>
 334:../../os/kernel/src/chevents.c ****  *          This means that Event Listeners with a lower event identifier have
 335:../../os/kernel/src/chevents.c ****  *          an higher priority.
 336:../../os/kernel/src/chevents.c ****  *
 337:../../os/kernel/src/chevents.c ****  * @param[in] mask      mask of the event flags that the function should wait
 338:../../os/kernel/src/chevents.c ****  *                      for, @p ALL_EVENTS enables all the events
 339:../../os/kernel/src/chevents.c ****  * @return              The mask of the lowest id served and cleared event.
 340:../../os/kernel/src/chevents.c ****  *
 341:../../os/kernel/src/chevents.c ****  * @api
 342:../../os/kernel/src/chevents.c ****  */
 343:../../os/kernel/src/chevents.c **** eventmask_t chEvtWaitOne(eventmask_t mask) {
 560               		.loc 1 343 0
 561               		.cfi_startproc
 562               	.LVL47:
 563 0182 1F93      		push r17
 564               	.LCFI11:
 565               		.cfi_def_cfa_offset 3
 566               		.cfi_offset 17, -2
 567 0184 CF93      		push r28
 568               	.LCFI12:
 569               		.cfi_def_cfa_offset 4
 570               		.cfi_offset 28, -3
 571 0186 DF93      		push r29
 572               	.LCFI13:
 573               		.cfi_def_cfa_offset 5
 574               		.cfi_offset 29, -4
 575               	/* prologue: function */
 576               	/* frame size = 0 */
 577               	/* stack size = 3 */
 578               	.L__stack_usage = 3
 579 0188 182F      		mov r17,r24
 344:../../os/kernel/src/chevents.c ****   Thread *ctp = currp;
 580               		.loc 1 344 0
 581 018a C091 0000 		lds r28,rlist+11
 582 018e D091 0000 		lds r29,rlist+11+1
 583               	.LVL48:
 345:../../os/kernel/src/chevents.c ****   eventmask_t m;
 346:../../os/kernel/src/chevents.c **** 
 347:../../os/kernel/src/chevents.c ****   chSysLock();
 584               		.loc 1 347 0
 585               	/* #APP */
 586               	 ;  347 "../../os/kernel/src/chevents.c" 1
 587 0192 F894      		cli
 588               	 ;  0 "" 2
 348:../../os/kernel/src/chevents.c **** 
 349:../../os/kernel/src/chevents.c ****   if ((m = (ctp->p_epending & mask)) == 0) {
 589               		.loc 1 349 0
 590               	/* #NOAPP */
 591 0194 2C8D      		ldd r18,Y+28
 592 0196 982F      		mov r25,r24
 593 0198 9223      		and r25,r18
 594               	.LVL49:
 595 019a 01F4      		brne .L36
 350:../../os/kernel/src/chevents.c ****     ctp->p_u.ewmask = mask;
 596               		.loc 1 350 0
 597 019c 8A8B      		std Y+18,r24
 351:../../os/kernel/src/chevents.c ****     chSchGoSleepS(THD_STATE_WTOREVT);
 598               		.loc 1 351 0
 599 019e 88E0      		ldi r24,lo8(8)
 600               	.LVL50:
 601 01a0 0E94 0000 		call chSchGoSleepS
 602               	.LVL51:
 352:../../os/kernel/src/chevents.c ****     m = ctp->p_epending & mask;
 603               		.loc 1 352 0
 604 01a4 2C8D      		ldd r18,Y+28
 605 01a6 912F      		mov r25,r17
 606 01a8 9223      		and r25,r18
 607               	.LVL52:
 608               	.L36:
 353:../../os/kernel/src/chevents.c ****   }
 354:../../os/kernel/src/chevents.c ****   m &= -m;
 609               		.loc 1 354 0
 610 01aa 892F      		mov r24,r25
 611 01ac 8195      		neg r24
 612 01ae 8923      		and r24,r25
 613               	.LVL53:
 355:../../os/kernel/src/chevents.c ****   ctp->p_epending &= ~m;
 614               		.loc 1 355 0
 615 01b0 982F      		mov r25,r24
 616 01b2 9095      		com r25
 617 01b4 9223      		and r25,r18
 618 01b6 9C8F      		std Y+28,r25
 356:../../os/kernel/src/chevents.c **** 
 357:../../os/kernel/src/chevents.c ****   chSysUnlock();
 619               		.loc 1 357 0
 620               	/* #APP */
 621               	 ;  357 "../../os/kernel/src/chevents.c" 1
 622 01b8 7894      		sei
 623               	 ;  0 "" 2
 624               	/* epilogue start */
 358:../../os/kernel/src/chevents.c ****   return m;
 359:../../os/kernel/src/chevents.c **** }
 625               		.loc 1 359 0
 626               	/* #NOAPP */
 627 01ba DF91      		pop r29
 628 01bc CF91      		pop r28
 629               	.LVL54:
 630 01be 1F91      		pop r17
 631               	.LVL55:
 632 01c0 0895      		ret
 633               		.cfi_endproc
 634               	.LFE18:
 636               	.global	chEvtWaitAny
 638               	chEvtWaitAny:
 639               	.LFB19:
 360:../../os/kernel/src/chevents.c **** 
 361:../../os/kernel/src/chevents.c **** /**
 362:../../os/kernel/src/chevents.c ****  * @brief   Waits for any of the specified events.
 363:../../os/kernel/src/chevents.c ****  * @details The function waits for any event among those specified in
 364:../../os/kernel/src/chevents.c ****  *          @p mask to become pending then the events are cleared and returned.
 365:../../os/kernel/src/chevents.c ****  *
 366:../../os/kernel/src/chevents.c ****  * @param[in] mask      mask of the event flags that the function should wait
 367:../../os/kernel/src/chevents.c ****  *                      for, @p ALL_EVENTS enables all the events
 368:../../os/kernel/src/chevents.c ****  * @return              The mask of the served and cleared events.
 369:../../os/kernel/src/chevents.c ****  *
 370:../../os/kernel/src/chevents.c ****  * @api
 371:../../os/kernel/src/chevents.c ****  */
 372:../../os/kernel/src/chevents.c **** eventmask_t chEvtWaitAny(eventmask_t mask) {
 640               		.loc 1 372 0
 641               		.cfi_startproc
 642               	.LVL56:
 643 01c2 1F93      		push r17
 644               	.LCFI14:
 645               		.cfi_def_cfa_offset 3
 646               		.cfi_offset 17, -2
 647 01c4 CF93      		push r28
 648               	.LCFI15:
 649               		.cfi_def_cfa_offset 4
 650               		.cfi_offset 28, -3
 651 01c6 DF93      		push r29
 652               	.LCFI16:
 653               		.cfi_def_cfa_offset 5
 654               		.cfi_offset 29, -4
 655               	/* prologue: function */
 656               	/* frame size = 0 */
 657               	/* stack size = 3 */
 658               	.L__stack_usage = 3
 659 01c8 182F      		mov r17,r24
 373:../../os/kernel/src/chevents.c ****   Thread *ctp = currp;
 660               		.loc 1 373 0
 661 01ca C091 0000 		lds r28,rlist+11
 662 01ce D091 0000 		lds r29,rlist+11+1
 663               	.LVL57:
 374:../../os/kernel/src/chevents.c ****   eventmask_t m;
 375:../../os/kernel/src/chevents.c **** 
 376:../../os/kernel/src/chevents.c ****   chSysLock();
 664               		.loc 1 376 0
 665               	/* #APP */
 666               	 ;  376 "../../os/kernel/src/chevents.c" 1
 667 01d2 F894      		cli
 668               	 ;  0 "" 2
 377:../../os/kernel/src/chevents.c **** 
 378:../../os/kernel/src/chevents.c ****   if ((m = (ctp->p_epending & mask)) == 0) {
 669               		.loc 1 378 0
 670               	/* #NOAPP */
 671 01d4 2C8D      		ldd r18,Y+28
 672 01d6 8223      		and r24,r18
 673               	.LVL58:
 674 01d8 01F4      		brne .L38
 379:../../os/kernel/src/chevents.c ****     ctp->p_u.ewmask = mask;
 675               		.loc 1 379 0
 676 01da 1A8B      		std Y+18,r17
 380:../../os/kernel/src/chevents.c ****     chSchGoSleepS(THD_STATE_WTOREVT);
 677               		.loc 1 380 0
 678 01dc 88E0      		ldi r24,lo8(8)
 679               	.LVL59:
 680 01de 0E94 0000 		call chSchGoSleepS
 681               	.LVL60:
 381:../../os/kernel/src/chevents.c ****     m = ctp->p_epending & mask;
 682               		.loc 1 381 0
 683 01e2 2C8D      		ldd r18,Y+28
 684 01e4 812F      		mov r24,r17
 685 01e6 8223      		and r24,r18
 686               	.LVL61:
 687               	.L38:
 382:../../os/kernel/src/chevents.c ****   }
 383:../../os/kernel/src/chevents.c ****   ctp->p_epending &= ~m;
 688               		.loc 1 383 0
 689 01e8 982F      		mov r25,r24
 690 01ea 9095      		com r25
 691 01ec 9223      		and r25,r18
 692 01ee 9C8F      		std Y+28,r25
 384:../../os/kernel/src/chevents.c **** 
 385:../../os/kernel/src/chevents.c ****   chSysUnlock();
 693               		.loc 1 385 0
 694               	/* #APP */
 695               	 ;  385 "../../os/kernel/src/chevents.c" 1
 696 01f0 7894      		sei
 697               	 ;  0 "" 2
 698               	/* epilogue start */
 386:../../os/kernel/src/chevents.c ****   return m;
 387:../../os/kernel/src/chevents.c **** }
 699               		.loc 1 387 0
 700               	/* #NOAPP */
 701 01f2 DF91      		pop r29
 702 01f4 CF91      		pop r28
 703               	.LVL62:
 704 01f6 1F91      		pop r17
 705               	.LVL63:
 706 01f8 0895      		ret
 707               		.cfi_endproc
 708               	.LFE19:
 710               	.global	chEvtWaitAll
 712               	chEvtWaitAll:
 713               	.LFB20:
 388:../../os/kernel/src/chevents.c **** 
 389:../../os/kernel/src/chevents.c **** /**
 390:../../os/kernel/src/chevents.c ****  * @brief   Waits for all the specified events.
 391:../../os/kernel/src/chevents.c ****  * @details The function waits for all the events specified in @p mask to
 392:../../os/kernel/src/chevents.c ****  *          become pending then the events are cleared and returned.
 393:../../os/kernel/src/chevents.c ****  *
 394:../../os/kernel/src/chevents.c ****  * @param[in] mask      mask of the event flags that the function should wait
 395:../../os/kernel/src/chevents.c ****  *                      for, @p ALL_EVENTS requires all the events
 396:../../os/kernel/src/chevents.c ****  * @return              The mask of the served and cleared events.
 397:../../os/kernel/src/chevents.c ****  *
 398:../../os/kernel/src/chevents.c ****  * @api
 399:../../os/kernel/src/chevents.c ****  */
 400:../../os/kernel/src/chevents.c **** eventmask_t chEvtWaitAll(eventmask_t mask) {
 714               		.loc 1 400 0
 715               		.cfi_startproc
 716               	.LVL64:
 717 01fa 1F93      		push r17
 718               	.LCFI17:
 719               		.cfi_def_cfa_offset 3
 720               		.cfi_offset 17, -2
 721 01fc CF93      		push r28
 722               	.LCFI18:
 723               		.cfi_def_cfa_offset 4
 724               		.cfi_offset 28, -3
 725 01fe DF93      		push r29
 726               	.LCFI19:
 727               		.cfi_def_cfa_offset 5
 728               		.cfi_offset 29, -4
 729               	/* prologue: function */
 730               	/* frame size = 0 */
 731               	/* stack size = 3 */
 732               	.L__stack_usage = 3
 733 0200 182F      		mov r17,r24
 401:../../os/kernel/src/chevents.c ****   Thread *ctp = currp;
 734               		.loc 1 401 0
 735 0202 C091 0000 		lds r28,rlist+11
 736 0206 D091 0000 		lds r29,rlist+11+1
 737               	.LVL65:
 402:../../os/kernel/src/chevents.c **** 
 403:../../os/kernel/src/chevents.c ****   chSysLock();
 738               		.loc 1 403 0
 739               	/* #APP */
 740               	 ;  403 "../../os/kernel/src/chevents.c" 1
 741 020a F894      		cli
 742               	 ;  0 "" 2
 404:../../os/kernel/src/chevents.c **** 
 405:../../os/kernel/src/chevents.c ****   if ((ctp->p_epending & mask) != mask) {
 743               		.loc 1 405 0
 744               	/* #NOAPP */
 745 020c 9C8D      		ldd r25,Y+28
 746 020e 8923      		and r24,r25
 747               	.LVL66:
 748 0210 8117      		cp r24,r17
 749 0212 01F0      		breq .L40
 406:../../os/kernel/src/chevents.c ****     ctp->p_u.ewmask = mask;
 750               		.loc 1 406 0
 751 0214 1A8B      		std Y+18,r17
 407:../../os/kernel/src/chevents.c ****     chSchGoSleepS(THD_STATE_WTANDEVT);
 752               		.loc 1 407 0
 753 0216 89E0      		ldi r24,lo8(9)
 754 0218 0E94 0000 		call chSchGoSleepS
 755               	.LVL67:
 756 021c 9C8D      		ldd r25,Y+28
 757               	.L40:
 408:../../os/kernel/src/chevents.c ****   }
 409:../../os/kernel/src/chevents.c ****   ctp->p_epending &= ~mask;
 758               		.loc 1 409 0
 759 021e 812F      		mov r24,r17
 760 0220 8095      		com r24
 761 0222 8923      		and r24,r25
 762 0224 8C8F      		std Y+28,r24
 410:../../os/kernel/src/chevents.c **** 
 411:../../os/kernel/src/chevents.c ****   chSysUnlock();
 763               		.loc 1 411 0
 764               	/* #APP */
 765               	 ;  411 "../../os/kernel/src/chevents.c" 1
 766 0226 7894      		sei
 767               	 ;  0 "" 2
 412:../../os/kernel/src/chevents.c ****   return mask;
 413:../../os/kernel/src/chevents.c **** }
 768               		.loc 1 413 0
 769               	/* #NOAPP */
 770 0228 812F      		mov r24,r17
 771               	/* epilogue start */
 772 022a DF91      		pop r29
 773 022c CF91      		pop r28
 774               	.LVL68:
 775 022e 1F91      		pop r17
 776               	.LVL69:
 777 0230 0895      		ret
 778               		.cfi_endproc
 779               	.LFE20:
 781               	.global	chEvtWaitOneTimeout
 783               	chEvtWaitOneTimeout:
 784               	.LFB21:
 414:../../os/kernel/src/chevents.c **** #endif /* CH_OPTIMIZE_SPEED || !CH_USE_EVENTS_TIMEOUT */
 415:../../os/kernel/src/chevents.c **** 
 416:../../os/kernel/src/chevents.c **** #if CH_USE_EVENTS_TIMEOUT || defined(__DOXYGEN__)
 417:../../os/kernel/src/chevents.c **** /**
 418:../../os/kernel/src/chevents.c ****  * @brief   Waits for exactly one of the specified events.
 419:../../os/kernel/src/chevents.c ****  * @details The function waits for one event among those specified in
 420:../../os/kernel/src/chevents.c ****  *          @p mask to become pending then the event is cleared and returned.
 421:../../os/kernel/src/chevents.c ****  * @note    One and only one event is served in the function, the one with the
 422:../../os/kernel/src/chevents.c ****  *          lowest event id. The function is meant to be invoked into a loop in
 423:../../os/kernel/src/chevents.c ****  *          order to serve all the pending events.<br>
 424:../../os/kernel/src/chevents.c ****  *          This means that Event Listeners with a lower event identifier have
 425:../../os/kernel/src/chevents.c ****  *          an higher priority.
 426:../../os/kernel/src/chevents.c ****  *
 427:../../os/kernel/src/chevents.c ****  * @param[in] mask      mask of the event flags that the function should wait
 428:../../os/kernel/src/chevents.c ****  *                      for, @p ALL_EVENTS enables all the events
 429:../../os/kernel/src/chevents.c ****  * @param[in] time      the number of ticks before the operation timeouts,
 430:../../os/kernel/src/chevents.c ****  *                      the following special values are allowed:
 431:../../os/kernel/src/chevents.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 432:../../os/kernel/src/chevents.c ****  *                      - @a TIME_INFINITE no timeout.
 433:../../os/kernel/src/chevents.c ****  *                      .
 434:../../os/kernel/src/chevents.c ****  * @return              The mask of the lowest id served and cleared event.
 435:../../os/kernel/src/chevents.c ****  * @retval 0            if the operation has timed out.
 436:../../os/kernel/src/chevents.c ****  *
 437:../../os/kernel/src/chevents.c ****  * @api
 438:../../os/kernel/src/chevents.c ****  */
 439:../../os/kernel/src/chevents.c **** eventmask_t chEvtWaitOneTimeout(eventmask_t mask, systime_t time) {
 785               		.loc 1 439 0
 786               		.cfi_startproc
 787               	.LVL70:
 788 0232 0F93      		push r16
 789               	.LCFI20:
 790               		.cfi_def_cfa_offset 3
 791               		.cfi_offset 16, -2
 792 0234 1F93      		push r17
 793               	.LCFI21:
 794               		.cfi_def_cfa_offset 4
 795               		.cfi_offset 17, -3
 796 0236 CF93      		push r28
 797               	.LCFI22:
 798               		.cfi_def_cfa_offset 5
 799               		.cfi_offset 28, -4
 800 0238 DF93      		push r29
 801               	.LCFI23:
 802               		.cfi_def_cfa_offset 6
 803               		.cfi_offset 29, -5
 804               	/* prologue: function */
 805               	/* frame size = 0 */
 806               	/* stack size = 4 */
 807               	.L__stack_usage = 4
 808 023a 082F      		mov r16,r24
 440:../../os/kernel/src/chevents.c ****   Thread *ctp = currp;
 809               		.loc 1 440 0
 810 023c C091 0000 		lds r28,rlist+11
 811 0240 D091 0000 		lds r29,rlist+11+1
 812               	.LVL71:
 441:../../os/kernel/src/chevents.c ****   eventmask_t m;
 442:../../os/kernel/src/chevents.c **** 
 443:../../os/kernel/src/chevents.c ****   chSysLock();
 813               		.loc 1 443 0
 814               	/* #APP */
 815               	 ;  443 "../../os/kernel/src/chevents.c" 1
 816 0244 F894      		cli
 817               	 ;  0 "" 2
 444:../../os/kernel/src/chevents.c **** 
 445:../../os/kernel/src/chevents.c ****   if ((m = (ctp->p_epending & mask)) == 0) {
 818               		.loc 1 445 0
 819               	/* #NOAPP */
 820 0246 9C8D      		ldd r25,Y+28
 821 0248 182F      		mov r17,r24
 822 024a 1923      		and r17,r25
 823               	.LVL72:
 824 024c 01F4      		brne .L42
 446:../../os/kernel/src/chevents.c ****     if (TIME_IMMEDIATE == time) {
 825               		.loc 1 446 0
 826 024e 6115      		cp r22,__zero_reg__
 827 0250 7105      		cpc r23,__zero_reg__
 828 0252 01F4      		brne .L43
 829               	.LVL73:
 830               	.L46:
 447:../../os/kernel/src/chevents.c ****       chSysUnlock();
 448:../../os/kernel/src/chevents.c ****       return (eventmask_t)0;
 449:../../os/kernel/src/chevents.c ****     }
 450:../../os/kernel/src/chevents.c ****     ctp->p_u.ewmask = mask;
 451:../../os/kernel/src/chevents.c ****     if (chSchGoSleepTimeoutS(THD_STATE_WTOREVT, time) < RDY_OK) {
 452:../../os/kernel/src/chevents.c ****       chSysUnlock();
 453:../../os/kernel/src/chevents.c ****       return (eventmask_t)0;
 454:../../os/kernel/src/chevents.c ****     }
 455:../../os/kernel/src/chevents.c ****     m = ctp->p_epending & mask;
 456:../../os/kernel/src/chevents.c ****   }
 457:../../os/kernel/src/chevents.c ****   m &= -m;
 458:../../os/kernel/src/chevents.c ****   ctp->p_epending &= ~m;
 459:../../os/kernel/src/chevents.c **** 
 460:../../os/kernel/src/chevents.c ****   chSysUnlock();
 831               		.loc 1 460 0
 832               	/* #APP */
 833               	 ;  460 "../../os/kernel/src/chevents.c" 1
 834 0254 7894      		sei
 835               	 ;  0 "" 2
 461:../../os/kernel/src/chevents.c ****   return m;
 462:../../os/kernel/src/chevents.c **** }
 836               		.loc 1 462 0
 837               	/* #NOAPP */
 838 0256 812F      		mov r24,r17
 839               	/* epilogue start */
 840 0258 DF91      		pop r29
 841 025a CF91      		pop r28
 842               	.LVL74:
 843 025c 1F91      		pop r17
 844               	.LVL75:
 845 025e 0F91      		pop r16
 846               	.LVL76:
 847 0260 0895      		ret
 848               	.LVL77:
 849               	.L43:
 450:../../os/kernel/src/chevents.c ****     ctp->p_u.ewmask = mask;
 850               		.loc 1 450 0
 851 0262 8A8B      		std Y+18,r24
 451:../../os/kernel/src/chevents.c ****     if (chSchGoSleepTimeoutS(THD_STATE_WTOREVT, time) < RDY_OK) {
 852               		.loc 1 451 0
 853 0264 88E0      		ldi r24,lo8(8)
 854 0266 0E94 0000 		call chSchGoSleepTimeoutS
 855               	.LVL78:
 856 026a 97FD      		sbrc r25,7
 857 026c 00C0      		rjmp .L46
 455:../../os/kernel/src/chevents.c ****     m = ctp->p_epending & mask;
 858               		.loc 1 455 0
 859 026e 9C8D      		ldd r25,Y+28
 860 0270 102F      		mov r17,r16
 861               	.LVL79:
 862 0272 1923      		and r17,r25
 863               	.LVL80:
 864               	.L42:
 457:../../os/kernel/src/chevents.c ****   m &= -m;
 865               		.loc 1 457 0
 866 0274 812F      		mov r24,r17
 867 0276 8195      		neg r24
 868 0278 1823      		and r17,r24
 869               	.LVL81:
 458:../../os/kernel/src/chevents.c ****   ctp->p_epending &= ~m;
 870               		.loc 1 458 0
 871 027a 812F      		mov r24,r17
 872 027c 8095      		com r24
 873 027e 8923      		and r24,r25
 874 0280 8C8F      		std Y+28,r24
 460:../../os/kernel/src/chevents.c ****   chSysUnlock();
 875               		.loc 1 460 0
 876               	/* #APP */
 877               	 ;  460 "../../os/kernel/src/chevents.c" 1
 878 0282 7894      		sei
 879               	 ;  0 "" 2
 880               		.loc 1 462 0
 881               	/* #NOAPP */
 882 0284 812F      		mov r24,r17
 883               	/* epilogue start */
 884 0286 DF91      		pop r29
 885 0288 CF91      		pop r28
 886               	.LVL82:
 887 028a 1F91      		pop r17
 888               	.LVL83:
 889 028c 0F91      		pop r16
 890               	.LVL84:
 891 028e 0895      		ret
 892               		.cfi_endproc
 893               	.LFE21:
 895               	.global	chEvtWaitAnyTimeout
 897               	chEvtWaitAnyTimeout:
 898               	.LFB22:
 463:../../os/kernel/src/chevents.c **** 
 464:../../os/kernel/src/chevents.c **** /**
 465:../../os/kernel/src/chevents.c ****  * @brief   Waits for any of the specified events.
 466:../../os/kernel/src/chevents.c ****  * @details The function waits for any event among those specified in
 467:../../os/kernel/src/chevents.c ****  *          @p mask to become pending then the events are cleared and
 468:../../os/kernel/src/chevents.c ****  *          returned.
 469:../../os/kernel/src/chevents.c ****  *
 470:../../os/kernel/src/chevents.c ****  * @param[in] mask      mask of the event flags that the function should wait
 471:../../os/kernel/src/chevents.c ****  *                      for, @p ALL_EVENTS enables all the events
 472:../../os/kernel/src/chevents.c ****  * @param[in] time      the number of ticks before the operation timeouts,
 473:../../os/kernel/src/chevents.c ****  *                      the following special values are allowed:
 474:../../os/kernel/src/chevents.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 475:../../os/kernel/src/chevents.c ****  *                      - @a TIME_INFINITE no timeout.
 476:../../os/kernel/src/chevents.c ****  *                      .
 477:../../os/kernel/src/chevents.c ****  * @return              The mask of the served and cleared events.
 478:../../os/kernel/src/chevents.c ****  * @retval 0            if the operation has timed out.
 479:../../os/kernel/src/chevents.c ****  *
 480:../../os/kernel/src/chevents.c ****  * @api
 481:../../os/kernel/src/chevents.c ****  */
 482:../../os/kernel/src/chevents.c **** eventmask_t chEvtWaitAnyTimeout(eventmask_t mask, systime_t time) {
 899               		.loc 1 482 0
 900               		.cfi_startproc
 901               	.LVL85:
 902 0290 0F93      		push r16
 903               	.LCFI24:
 904               		.cfi_def_cfa_offset 3
 905               		.cfi_offset 16, -2
 906 0292 1F93      		push r17
 907               	.LCFI25:
 908               		.cfi_def_cfa_offset 4
 909               		.cfi_offset 17, -3
 910 0294 CF93      		push r28
 911               	.LCFI26:
 912               		.cfi_def_cfa_offset 5
 913               		.cfi_offset 28, -4
 914 0296 DF93      		push r29
 915               	.LCFI27:
 916               		.cfi_def_cfa_offset 6
 917               		.cfi_offset 29, -5
 918               	/* prologue: function */
 919               	/* frame size = 0 */
 920               	/* stack size = 4 */
 921               	.L__stack_usage = 4
 922 0298 082F      		mov r16,r24
 483:../../os/kernel/src/chevents.c ****   Thread *ctp = currp;
 923               		.loc 1 483 0
 924 029a C091 0000 		lds r28,rlist+11
 925 029e D091 0000 		lds r29,rlist+11+1
 926               	.LVL86:
 484:../../os/kernel/src/chevents.c ****   eventmask_t m;
 485:../../os/kernel/src/chevents.c **** 
 486:../../os/kernel/src/chevents.c ****   chSysLock();
 927               		.loc 1 486 0
 928               	/* #APP */
 929               	 ;  486 "../../os/kernel/src/chevents.c" 1
 930 02a2 F894      		cli
 931               	 ;  0 "" 2
 487:../../os/kernel/src/chevents.c **** 
 488:../../os/kernel/src/chevents.c ****   if ((m = (ctp->p_epending & mask)) == 0) {
 932               		.loc 1 488 0
 933               	/* #NOAPP */
 934 02a4 9C8D      		ldd r25,Y+28
 935 02a6 182F      		mov r17,r24
 936 02a8 1923      		and r17,r25
 937               	.LVL87:
 938 02aa 01F4      		brne .L48
 489:../../os/kernel/src/chevents.c ****     if (TIME_IMMEDIATE == time) {
 939               		.loc 1 489 0
 940 02ac 6115      		cp r22,__zero_reg__
 941 02ae 7105      		cpc r23,__zero_reg__
 942 02b0 01F4      		brne .L49
 943               	.LVL88:
 944               	.L52:
 490:../../os/kernel/src/chevents.c ****       chSysUnlock();
 491:../../os/kernel/src/chevents.c ****       return (eventmask_t)0;
 492:../../os/kernel/src/chevents.c ****     }
 493:../../os/kernel/src/chevents.c ****     ctp->p_u.ewmask = mask;
 494:../../os/kernel/src/chevents.c ****     if (chSchGoSleepTimeoutS(THD_STATE_WTOREVT, time) < RDY_OK) {
 495:../../os/kernel/src/chevents.c ****       chSysUnlock();
 496:../../os/kernel/src/chevents.c ****       return (eventmask_t)0;
 497:../../os/kernel/src/chevents.c ****     }
 498:../../os/kernel/src/chevents.c ****     m = ctp->p_epending & mask;
 499:../../os/kernel/src/chevents.c ****   }
 500:../../os/kernel/src/chevents.c ****   ctp->p_epending &= ~m;
 501:../../os/kernel/src/chevents.c **** 
 502:../../os/kernel/src/chevents.c ****   chSysUnlock();
 945               		.loc 1 502 0
 946               	/* #APP */
 947               	 ;  502 "../../os/kernel/src/chevents.c" 1
 948 02b2 7894      		sei
 949               	 ;  0 "" 2
 503:../../os/kernel/src/chevents.c ****   return m;
 504:../../os/kernel/src/chevents.c **** }
 950               		.loc 1 504 0
 951               	/* #NOAPP */
 952 02b4 812F      		mov r24,r17
 953               	/* epilogue start */
 954 02b6 DF91      		pop r29
 955 02b8 CF91      		pop r28
 956               	.LVL89:
 957 02ba 1F91      		pop r17
 958               	.LVL90:
 959 02bc 0F91      		pop r16
 960               	.LVL91:
 961 02be 0895      		ret
 962               	.LVL92:
 963               	.L49:
 493:../../os/kernel/src/chevents.c ****     ctp->p_u.ewmask = mask;
 964               		.loc 1 493 0
 965 02c0 8A8B      		std Y+18,r24
 494:../../os/kernel/src/chevents.c ****     if (chSchGoSleepTimeoutS(THD_STATE_WTOREVT, time) < RDY_OK) {
 966               		.loc 1 494 0
 967 02c2 88E0      		ldi r24,lo8(8)
 968 02c4 0E94 0000 		call chSchGoSleepTimeoutS
 969               	.LVL93:
 970 02c8 97FD      		sbrc r25,7
 971 02ca 00C0      		rjmp .L52
 498:../../os/kernel/src/chevents.c ****     m = ctp->p_epending & mask;
 972               		.loc 1 498 0
 973 02cc 9C8D      		ldd r25,Y+28
 974 02ce 102F      		mov r17,r16
 975               	.LVL94:
 976 02d0 1923      		and r17,r25
 977               	.LVL95:
 978               	.L48:
 500:../../os/kernel/src/chevents.c ****   ctp->p_epending &= ~m;
 979               		.loc 1 500 0
 980 02d2 812F      		mov r24,r17
 981 02d4 8095      		com r24
 982 02d6 8923      		and r24,r25
 983 02d8 8C8F      		std Y+28,r24
 502:../../os/kernel/src/chevents.c ****   chSysUnlock();
 984               		.loc 1 502 0
 985               	/* #APP */
 986               	 ;  502 "../../os/kernel/src/chevents.c" 1
 987 02da 7894      		sei
 988               	 ;  0 "" 2
 989               		.loc 1 504 0
 990               	/* #NOAPP */
 991 02dc 812F      		mov r24,r17
 992               	/* epilogue start */
 993 02de DF91      		pop r29
 994 02e0 CF91      		pop r28
 995               	.LVL96:
 996 02e2 1F91      		pop r17
 997               	.LVL97:
 998 02e4 0F91      		pop r16
 999               	.LVL98:
 1000 02e6 0895      		ret
 1001               		.cfi_endproc
 1002               	.LFE22:
 1004               	.global	chEvtWaitAllTimeout
 1006               	chEvtWaitAllTimeout:
 1007               	.LFB23:
 505:../../os/kernel/src/chevents.c **** 
 506:../../os/kernel/src/chevents.c **** /**
 507:../../os/kernel/src/chevents.c ****  * @brief   Waits for all the specified events.
 508:../../os/kernel/src/chevents.c ****  * @details The function waits for all the events specified in @p mask to
 509:../../os/kernel/src/chevents.c ****  *          become pending then the events are cleared and returned.
 510:../../os/kernel/src/chevents.c ****  *
 511:../../os/kernel/src/chevents.c ****  * @param[in] mask      mask of the event flags that the function should wait
 512:../../os/kernel/src/chevents.c ****  *                      for, @p ALL_EVENTS requires all the events
 513:../../os/kernel/src/chevents.c ****  * @param[in] time      the number of ticks before the operation timeouts,
 514:../../os/kernel/src/chevents.c ****  *                      the following special values are allowed:
 515:../../os/kernel/src/chevents.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 516:../../os/kernel/src/chevents.c ****  *                      - @a TIME_INFINITE no timeout.
 517:../../os/kernel/src/chevents.c ****  *                      .
 518:../../os/kernel/src/chevents.c ****  * @return              The mask of the served and cleared events.
 519:../../os/kernel/src/chevents.c ****  * @retval 0            if the operation has timed out.
 520:../../os/kernel/src/chevents.c ****  *
 521:../../os/kernel/src/chevents.c ****  * @api
 522:../../os/kernel/src/chevents.c ****  */
 523:../../os/kernel/src/chevents.c **** eventmask_t chEvtWaitAllTimeout(eventmask_t mask, systime_t time) {
 1008               		.loc 1 523 0
 1009               		.cfi_startproc
 1010               	.LVL99:
 1011 02e8 1F93      		push r17
 1012               	.LCFI28:
 1013               		.cfi_def_cfa_offset 3
 1014               		.cfi_offset 17, -2
 1015 02ea CF93      		push r28
 1016               	.LCFI29:
 1017               		.cfi_def_cfa_offset 4
 1018               		.cfi_offset 28, -3
 1019 02ec DF93      		push r29
 1020               	.LCFI30:
 1021               		.cfi_def_cfa_offset 5
 1022               		.cfi_offset 29, -4
 1023               	/* prologue: function */
 1024               	/* frame size = 0 */
 1025               	/* stack size = 3 */
 1026               	.L__stack_usage = 3
 1027 02ee 182F      		mov r17,r24
 524:../../os/kernel/src/chevents.c ****   Thread *ctp = currp;
 1028               		.loc 1 524 0
 1029 02f0 C091 0000 		lds r28,rlist+11
 1030 02f4 D091 0000 		lds r29,rlist+11+1
 1031               	.LVL100:
 525:../../os/kernel/src/chevents.c **** 
 526:../../os/kernel/src/chevents.c ****   chSysLock();
 1032               		.loc 1 526 0
 1033               	/* #APP */
 1034               	 ;  526 "../../os/kernel/src/chevents.c" 1
 1035 02f8 F894      		cli
 1036               	 ;  0 "" 2
 527:../../os/kernel/src/chevents.c **** 
 528:../../os/kernel/src/chevents.c ****   if ((ctp->p_epending & mask) != mask) {
 1037               		.loc 1 528 0
 1038               	/* #NOAPP */
 1039 02fa 8C8D      		ldd r24,Y+28
 1040               	.LVL101:
 1041 02fc 912F      		mov r25,r17
 1042 02fe 9823      		and r25,r24
 1043 0300 9117      		cp r25,r17
 1044 0302 01F0      		breq .L54
 529:../../os/kernel/src/chevents.c ****     if (TIME_IMMEDIATE == time) {
 1045               		.loc 1 529 0
 1046 0304 6115      		cp r22,__zero_reg__
 1047 0306 7105      		cpc r23,__zero_reg__
 1048 0308 01F4      		brne .L55
 1049               	.LVL102:
 1050               	.L57:
 530:../../os/kernel/src/chevents.c ****       chSysUnlock();
 531:../../os/kernel/src/chevents.c ****       return (eventmask_t)0;
 532:../../os/kernel/src/chevents.c ****     }
 533:../../os/kernel/src/chevents.c ****     ctp->p_u.ewmask = mask;
 534:../../os/kernel/src/chevents.c ****     if (chSchGoSleepTimeoutS(THD_STATE_WTANDEVT, time) < RDY_OK) {
 535:../../os/kernel/src/chevents.c ****       chSysUnlock();
 1051               		.loc 1 535 0
 1052               	/* #APP */
 1053               	 ;  535 "../../os/kernel/src/chevents.c" 1
 1054 030a 7894      		sei
 1055               	 ;  0 "" 2
 536:../../os/kernel/src/chevents.c ****       return (eventmask_t)0;
 1056               		.loc 1 536 0
 1057               	/* #NOAPP */
 1058 030c 10E0      		ldi r17,0
 1059               	.LVL103:
 537:../../os/kernel/src/chevents.c ****     }
 538:../../os/kernel/src/chevents.c ****   }
 539:../../os/kernel/src/chevents.c ****   ctp->p_epending &= ~mask;
 540:../../os/kernel/src/chevents.c **** 
 541:../../os/kernel/src/chevents.c ****   chSysUnlock();
 542:../../os/kernel/src/chevents.c ****   return mask;
 543:../../os/kernel/src/chevents.c **** }
 1060               		.loc 1 543 0
 1061 030e 812F      		mov r24,r17
 1062               	/* epilogue start */
 1063 0310 DF91      		pop r29
 1064 0312 CF91      		pop r28
 1065               	.LVL104:
 1066 0314 1F91      		pop r17
 1067 0316 0895      		ret
 1068               	.LVL105:
 1069               	.L55:
 533:../../os/kernel/src/chevents.c ****     ctp->p_u.ewmask = mask;
 1070               		.loc 1 533 0
 1071 0318 1A8B      		std Y+18,r17
 534:../../os/kernel/src/chevents.c ****     if (chSchGoSleepTimeoutS(THD_STATE_WTANDEVT, time) < RDY_OK) {
 1072               		.loc 1 534 0
 1073 031a 89E0      		ldi r24,lo8(9)
 1074 031c 0E94 0000 		call chSchGoSleepTimeoutS
 1075               	.LVL106:
 1076 0320 97FD      		sbrc r25,7
 1077 0322 00C0      		rjmp .L57
 1078 0324 8C8D      		ldd r24,Y+28
 1079               	.L54:
 539:../../os/kernel/src/chevents.c ****   ctp->p_epending &= ~mask;
 1080               		.loc 1 539 0
 1081 0326 912F      		mov r25,r17
 1082 0328 9095      		com r25
 1083 032a 9823      		and r25,r24
 1084 032c 9C8F      		std Y+28,r25
 541:../../os/kernel/src/chevents.c ****   chSysUnlock();
 1085               		.loc 1 541 0
 1086               	/* #APP */
 1087               	 ;  541 "../../os/kernel/src/chevents.c" 1
 1088 032e 7894      		sei
 1089               	 ;  0 "" 2
 1090               		.loc 1 543 0
 1091               	/* #NOAPP */
 1092 0330 812F      		mov r24,r17
 1093               	/* epilogue start */
 1094 0332 DF91      		pop r29
 1095 0334 CF91      		pop r28
 1096               	.LVL107:
 1097 0336 1F91      		pop r17
 1098               	.LVL108:
 1099 0338 0895      		ret
 1100               		.cfi_endproc
 1101               	.LFE23:
 1103               	.Letext0:
 1104               		.file 2 "/usr/local/cross/lib/gcc/avr/4.7.2/../../../../avr/include/stdint.h"
 1105               		.file 3 "../../os/ports/GCC/AVR/chtypes.h"
 1106               		.file 4 "../../os/kernel/include/chlists.h"
 1107               		.file 5 "../../os/kernel/include/chthreads.h"
 1108               		.file 6 "../../os/ports/GCC/AVR/chcore.h"
 1109               		.file 7 "../../os/kernel/include/chschd.h"
 1110               		.file 8 "../../os/kernel/include/chmtx.h"
 1111               		.file 9 "../../os/kernel/include/chevents.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 chevents.c
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//cc6MX6gr.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//cc6MX6gr.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//cc6MX6gr.s:4      *ABS*:000000000000003f __SREG__
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//cc6MX6gr.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//cc6MX6gr.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//cc6MX6gr.s:12     .text:0000000000000000 chEvtRegisterMask
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//cc6MX6gr.s:61     .text:0000000000000028 chEvtUnregister
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//cc6MX6gr.s:116    .text:000000000000004e chEvtGetAndClearEvents
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//cc6MX6gr.s:156    .text:0000000000000068 chEvtAddEvents
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//cc6MX6gr.s:192    .text:000000000000007c chEvtGetAndClearFlags
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//cc6MX6gr.s:226    .text:0000000000000088 chEvtSignalI
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//cc6MX6gr.s:285    .text:00000000000000ba chEvtSignal
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//cc6MX6gr.s:318    .text:00000000000000c8 chEvtBroadcastFlagsI
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//cc6MX6gr.s:396    .text:000000000000010a chEvtBroadcastFlags
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//cc6MX6gr.s:429    .text:0000000000000118 chEvtGetAndClearFlagsI
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//cc6MX6gr.s:451    .text:0000000000000120 chEvtDispatch
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//cc6MX6gr.s:558    .text:0000000000000182 chEvtWaitOne
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//cc6MX6gr.s:638    .text:00000000000001c2 chEvtWaitAny
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//cc6MX6gr.s:712    .text:00000000000001fa chEvtWaitAll
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//cc6MX6gr.s:783    .text:0000000000000232 chEvtWaitOneTimeout
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//cc6MX6gr.s:897    .text:0000000000000290 chEvtWaitAnyTimeout
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//cc6MX6gr.s:1006   .text:00000000000002e8 chEvtWaitAllTimeout

UNDEFINED SYMBOLS
rlist
chSchReadyI
chSchRescheduleS
chSchGoSleepS
chSchGoSleepTimeoutS
