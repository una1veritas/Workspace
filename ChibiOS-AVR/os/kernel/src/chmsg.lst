   1               		.file	"chmsg.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	chMsgSend
  12               	chMsgSend:
  13               	.LFB7:
  14               		.file 1 "../../os/kernel/src/chmsg.c"
   1:../../os/kernel/src/chmsg.c **** /*
   2:../../os/kernel/src/chmsg.c ****     ChibiOS/RT - Copyright (C) 2006,2007,2008,2009,2010,
   3:../../os/kernel/src/chmsg.c ****                  2011,2012 Giovanni Di Sirio.
   4:../../os/kernel/src/chmsg.c **** 
   5:../../os/kernel/src/chmsg.c ****     This file is part of ChibiOS/RT.
   6:../../os/kernel/src/chmsg.c **** 
   7:../../os/kernel/src/chmsg.c ****     ChibiOS/RT is free software; you can redistribute it and/or modify
   8:../../os/kernel/src/chmsg.c ****     it under the terms of the GNU General Public License as published by
   9:../../os/kernel/src/chmsg.c ****     the Free Software Foundation; either version 3 of the License, or
  10:../../os/kernel/src/chmsg.c ****     (at your option) any later version.
  11:../../os/kernel/src/chmsg.c **** 
  12:../../os/kernel/src/chmsg.c ****     ChibiOS/RT is distributed in the hope that it will be useful,
  13:../../os/kernel/src/chmsg.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:../../os/kernel/src/chmsg.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:../../os/kernel/src/chmsg.c ****     GNU General Public License for more details.
  16:../../os/kernel/src/chmsg.c **** 
  17:../../os/kernel/src/chmsg.c ****     You should have received a copy of the GNU General Public License
  18:../../os/kernel/src/chmsg.c ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  19:../../os/kernel/src/chmsg.c **** */
  20:../../os/kernel/src/chmsg.c **** 
  21:../../os/kernel/src/chmsg.c **** /**
  22:../../os/kernel/src/chmsg.c ****  * @file    chmsg.c
  23:../../os/kernel/src/chmsg.c ****  * @brief   Messages code.
  24:../../os/kernel/src/chmsg.c ****  *
  25:../../os/kernel/src/chmsg.c ****  * @addtogroup messages
  26:../../os/kernel/src/chmsg.c ****  * @details Synchronous inter-thread messages APIs and services.
  27:../../os/kernel/src/chmsg.c ****  *          <h2>Operation Mode</h2>
  28:../../os/kernel/src/chmsg.c ****  *          Synchronous messages are an easy to use and fast IPC mechanism,
  29:../../os/kernel/src/chmsg.c ****  *          threads can both act as message servers and/or message clients,
  30:../../os/kernel/src/chmsg.c ****  *          the mechanism allows data to be carried in both directions. Note
  31:../../os/kernel/src/chmsg.c ****  *          that messages are not copied between the client and server threads
  32:../../os/kernel/src/chmsg.c ****  *          but just a pointer passed so the exchange is very time
  33:../../os/kernel/src/chmsg.c ****  *          efficient.<br>
  34:../../os/kernel/src/chmsg.c ****  *          Messages are scalar data types of type @p msg_t that are guaranteed
  35:../../os/kernel/src/chmsg.c ****  *          to be size compatible with data pointers. Note that on some
  36:../../os/kernel/src/chmsg.c ****  *          architectures function pointers can be larger that @p msg_t.<br>
  37:../../os/kernel/src/chmsg.c ****  *          Messages are usually processed in FIFO order but it is possible to
  38:../../os/kernel/src/chmsg.c ****  *          process them in priority order by enabling the
  39:../../os/kernel/src/chmsg.c ****  *          @p CH_USE_MESSAGES_PRIORITY option in @p chconf.h.<br>
  40:../../os/kernel/src/chmsg.c ****  * @pre     In order to use the message APIs the @p CH_USE_MESSAGES option
  41:../../os/kernel/src/chmsg.c ****  *          must be enabled in @p chconf.h.
  42:../../os/kernel/src/chmsg.c ****  * @post    Enabling messages requires 6-12 (depending on the architecture)
  43:../../os/kernel/src/chmsg.c ****  *          extra bytes in the @p Thread structure.
  44:../../os/kernel/src/chmsg.c ****  * @{
  45:../../os/kernel/src/chmsg.c ****  */
  46:../../os/kernel/src/chmsg.c **** 
  47:../../os/kernel/src/chmsg.c **** #include "ch.h"
  48:../../os/kernel/src/chmsg.c **** 
  49:../../os/kernel/src/chmsg.c **** #if CH_USE_MESSAGES || defined(__DOXYGEN__)
  50:../../os/kernel/src/chmsg.c **** 
  51:../../os/kernel/src/chmsg.c **** #if CH_USE_MESSAGES_PRIORITY
  52:../../os/kernel/src/chmsg.c **** #define msg_insert(tp, qp) prio_insert(tp, qp)
  53:../../os/kernel/src/chmsg.c **** #else
  54:../../os/kernel/src/chmsg.c **** #define msg_insert(tp, qp) queue_insert(tp, qp)
  55:../../os/kernel/src/chmsg.c **** #endif
  56:../../os/kernel/src/chmsg.c **** 
  57:../../os/kernel/src/chmsg.c **** /**
  58:../../os/kernel/src/chmsg.c ****  * @brief   Sends a message to the specified thread.
  59:../../os/kernel/src/chmsg.c ****  * @details The sender is stopped until the receiver executes a
  60:../../os/kernel/src/chmsg.c ****  *          @p chMsgRelease()after receiving the message.
  61:../../os/kernel/src/chmsg.c ****  *
  62:../../os/kernel/src/chmsg.c ****  * @param[in] tp        the pointer to the thread
  63:../../os/kernel/src/chmsg.c ****  * @param[in] msg       the message
  64:../../os/kernel/src/chmsg.c ****  * @return              The answer message from @p chMsgRelease().
  65:../../os/kernel/src/chmsg.c ****  *
  66:../../os/kernel/src/chmsg.c ****  * @api
  67:../../os/kernel/src/chmsg.c ****  */
  68:../../os/kernel/src/chmsg.c **** msg_t chMsgSend(Thread *tp, msg_t msg) {
  15               		.loc 1 68 0
  16               		.cfi_startproc
  17               	.LVL0:
  18 0000 CF93      		push r28
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 28, -2
  22 0002 DF93      		push r29
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 29, -3
  26               	/* prologue: function */
  27               	/* frame size = 0 */
  28               	/* stack size = 2 */
  29               	.L__stack_usage = 2
  30 0004 FC01      		movw r30,r24
  69:../../os/kernel/src/chmsg.c ****   Thread *ctp = currp;
  31               		.loc 1 69 0
  32 0006 C091 0000 		lds r28,rlist+11
  33 000a D091 0000 		lds r29,rlist+11+1
  34               	.LVL1:
  70:../../os/kernel/src/chmsg.c **** 
  71:../../os/kernel/src/chmsg.c ****   chDbgCheck(tp != NULL, "chMsgSend");
  72:../../os/kernel/src/chmsg.c **** 
  73:../../os/kernel/src/chmsg.c ****   chSysLock();
  35               		.loc 1 73 0
  36               	/* #APP */
  37               	 ;  73 "../../os/kernel/src/chmsg.c" 1
  38 000e F894      		cli
  39               	 ;  0 "" 2
  74:../../os/kernel/src/chmsg.c ****   ctp->p_msg = msg;
  40               		.loc 1 74 0
  41               	/* #NOAPP */
  42 0010 7B8F      		std Y+27,r23
  43 0012 6A8F      		std Y+26,r22
  75:../../os/kernel/src/chmsg.c ****   ctp->p_u.wtobjp = &tp->p_msgqueue;
  44               		.loc 1 75 0
  45 0014 4696      		adiw r24,22
  46               	.LVL2:
  47 0016 9B8B      		std Y+19,r25
  48 0018 8A8B      		std Y+18,r24
  49               	.LVL3:
  50               	.LBB6:
  51               	.LBB7:
  52               		.file 2 "../../os/kernel/include/chinline.h"
   1:../../os/kernel/include/chinline.h **** /*
   2:../../os/kernel/include/chinline.h ****     ChibiOS/RT - Copyright (C) 2006,2007,2008,2009,2010,
   3:../../os/kernel/include/chinline.h ****                  2011,2012 Giovanni Di Sirio.
   4:../../os/kernel/include/chinline.h **** 
   5:../../os/kernel/include/chinline.h ****     This file is part of ChibiOS/RT.
   6:../../os/kernel/include/chinline.h **** 
   7:../../os/kernel/include/chinline.h ****     ChibiOS/RT is free software; you can redistribute it and/or modify
   8:../../os/kernel/include/chinline.h ****     it under the terms of the GNU General Public License as published by
   9:../../os/kernel/include/chinline.h ****     the Free Software Foundation; either version 3 of the License, or
  10:../../os/kernel/include/chinline.h ****     (at your option) any later version.
  11:../../os/kernel/include/chinline.h **** 
  12:../../os/kernel/include/chinline.h ****     ChibiOS/RT is distributed in the hope that it will be useful,
  13:../../os/kernel/include/chinline.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:../../os/kernel/include/chinline.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:../../os/kernel/include/chinline.h ****     GNU General Public License for more details.
  16:../../os/kernel/include/chinline.h **** 
  17:../../os/kernel/include/chinline.h ****     You should have received a copy of the GNU General Public License
  18:../../os/kernel/include/chinline.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  19:../../os/kernel/include/chinline.h **** */
  20:../../os/kernel/include/chinline.h **** 
  21:../../os/kernel/include/chinline.h **** /**
  22:../../os/kernel/include/chinline.h ****  * @file    chinline.h
  23:../../os/kernel/include/chinline.h ****  * @brief   Kernel inlined functions.
  24:../../os/kernel/include/chinline.h ****  * @details In this file there are a set of inlined functions if the
  25:../../os/kernel/include/chinline.h ****  *          @p CH_OPTIMIZE_SPEED is enabled.
  26:../../os/kernel/include/chinline.h ****  */
  27:../../os/kernel/include/chinline.h **** 
  28:../../os/kernel/include/chinline.h **** #ifndef _CHINLINE_H_
  29:../../os/kernel/include/chinline.h **** #define _CHINLINE_H_
  30:../../os/kernel/include/chinline.h **** 
  31:../../os/kernel/include/chinline.h **** /* If the performance code path has been chosen then all the following
  32:../../os/kernel/include/chinline.h ****    functions are inlined into the various kernel modules.*/
  33:../../os/kernel/include/chinline.h **** #if CH_OPTIMIZE_SPEED
  34:../../os/kernel/include/chinline.h **** static INLINE void prio_insert(Thread *tp, ThreadsQueue *tqp) {
  35:../../os/kernel/include/chinline.h **** 
  36:../../os/kernel/include/chinline.h ****   Thread *cp = (Thread *)tqp;
  37:../../os/kernel/include/chinline.h ****   do {
  38:../../os/kernel/include/chinline.h ****     cp = cp->p_next;
  39:../../os/kernel/include/chinline.h ****   } while ((cp != (Thread *)tqp) && (cp->p_prio >= tp->p_prio));
  40:../../os/kernel/include/chinline.h ****   tp->p_next = cp;
  41:../../os/kernel/include/chinline.h ****   tp->p_prev = cp->p_prev;
  42:../../os/kernel/include/chinline.h ****   tp->p_prev->p_next = cp->p_prev = tp;
  43:../../os/kernel/include/chinline.h **** }
  44:../../os/kernel/include/chinline.h **** 
  45:../../os/kernel/include/chinline.h **** static INLINE void queue_insert(Thread *tp, ThreadsQueue *tqp) {
  46:../../os/kernel/include/chinline.h **** 
  47:../../os/kernel/include/chinline.h ****   tp->p_next = (Thread *)tqp;
  53               		.loc 2 47 0
  54 001a 9983      		std Y+1,r25
  55 001c 8883      		st Y,r24
  48:../../os/kernel/include/chinline.h ****   tp->p_prev = tqp->p_prev;
  56               		.loc 2 48 0
  57 001e A08D      		ldd r26,Z+24
  58 0020 B18D      		ldd r27,Z+25
  59 0022 BB83      		std Y+3,r27
  60 0024 AA83      		std Y+2,r26
  49:../../os/kernel/include/chinline.h ****   tp->p_prev->p_next = tqp->p_prev = tp;
  61               		.loc 2 49 0
  62 0026 D18F      		std Z+25,r29
  63 0028 C08F      		std Z+24,r28
  64 002a CD93      		st X+,r28
  65 002c DC93      		st X,r29
  66               	.LBE7:
  67               	.LBE6:
  76:../../os/kernel/src/chmsg.c ****   msg_insert(ctp, &tp->p_msgqueue);
  77:../../os/kernel/src/chmsg.c ****   if (tp->p_state == THD_STATE_WTMSG)
  68               		.loc 1 77 0
  69 002e 8585      		ldd r24,Z+13
  70               	.LVL4:
  71 0030 8C30      		cpi r24,lo8(12)
  72 0032 01F0      		breq .L4
  73               	.LVL5:
  74               	.L2:
  78:../../os/kernel/src/chmsg.c ****     chSchReadyI(tp);
  79:../../os/kernel/src/chmsg.c ****   chSchGoSleepS(THD_STATE_SNDMSGQ);
  75               		.loc 1 79 0
  76 0034 8AE0      		ldi r24,lo8(10)
  77 0036 0E94 0000 		call chSchGoSleepS
  78               	.LVL6:
  80:../../os/kernel/src/chmsg.c ****   msg = ctp->p_u.rdymsg;
  79               		.loc 1 80 0
  80 003a 8A89      		ldd r24,Y+18
  81 003c 9B89      		ldd r25,Y+19
  82               	.LVL7:
  81:../../os/kernel/src/chmsg.c ****   chSysUnlock();
  83               		.loc 1 81 0
  84               	/* #APP */
  85               	 ;  81 "../../os/kernel/src/chmsg.c" 1
  86 003e 7894      		sei
  87               	 ;  0 "" 2
  88               	/* epilogue start */
  82:../../os/kernel/src/chmsg.c ****   return msg;
  83:../../os/kernel/src/chmsg.c **** }
  89               		.loc 1 83 0
  90               	/* #NOAPP */
  91 0040 DF91      		pop r29
  92 0042 CF91      		pop r28
  93               	.LVL8:
  94 0044 0895      		ret
  95               	.LVL9:
  96               	.L4:
  78:../../os/kernel/src/chmsg.c ****     chSchReadyI(tp);
  97               		.loc 1 78 0
  98 0046 CF01      		movw r24,r30
  99 0048 0E94 0000 		call chSchReadyI
 100               	.LVL10:
 101 004c 00C0      		rjmp .L2
 102               		.cfi_endproc
 103               	.LFE7:
 105               	.global	chMsgWait
 107               	chMsgWait:
 108               	.LFB8:
  84:../../os/kernel/src/chmsg.c **** 
  85:../../os/kernel/src/chmsg.c **** /**
  86:../../os/kernel/src/chmsg.c ****  * @brief   Suspends the thread and waits for an incoming message.
  87:../../os/kernel/src/chmsg.c ****  * @post    After receiving a message the function @p chMsgGet() must be
  88:../../os/kernel/src/chmsg.c ****  *          called in order to retrieve the message and then @p chMsgRelease()
  89:../../os/kernel/src/chmsg.c ****  *          must be invoked in order to acknowledge the reception and send
  90:../../os/kernel/src/chmsg.c ****  *          the answer.
  91:../../os/kernel/src/chmsg.c ****  * @note    If the message is a pointer then you can assume that the data
  92:../../os/kernel/src/chmsg.c ****  *          pointed by the message is stable until you invoke @p chMsgRelease()
  93:../../os/kernel/src/chmsg.c ****  *          because the sending thread is suspended until then.
  94:../../os/kernel/src/chmsg.c ****  *
  95:../../os/kernel/src/chmsg.c ****  * @return              A reference to the thread carrying the message.
  96:../../os/kernel/src/chmsg.c ****  *
  97:../../os/kernel/src/chmsg.c ****  * @api
  98:../../os/kernel/src/chmsg.c ****  */
  99:../../os/kernel/src/chmsg.c **** Thread *chMsgWait(void) {
 109               		.loc 1 99 0
 110               		.cfi_startproc
 111 004e CF93      		push r28
 112               	.LCFI2:
 113               		.cfi_def_cfa_offset 3
 114               		.cfi_offset 28, -2
 115 0050 DF93      		push r29
 116               	.LCFI3:
 117               		.cfi_def_cfa_offset 4
 118               		.cfi_offset 29, -3
 119               	/* prologue: function */
 120               	/* frame size = 0 */
 121               	/* stack size = 2 */
 122               	.L__stack_usage = 2
 100:../../os/kernel/src/chmsg.c ****   Thread *tp;
 101:../../os/kernel/src/chmsg.c **** 
 102:../../os/kernel/src/chmsg.c ****   chSysLock();
 123               		.loc 1 102 0
 124               	/* #APP */
 125               	 ;  102 "../../os/kernel/src/chmsg.c" 1
 126 0052 F894      		cli
 127               	 ;  0 "" 2
 103:../../os/kernel/src/chmsg.c ****   if (!chMsgIsPendingI(currp))
 128               		.loc 1 103 0
 129               	/* #NOAPP */
 130 0054 A091 0000 		lds r26,rlist+11
 131 0058 B091 0000 		lds r27,rlist+11+1
 132 005c 5696      		adiw r26,22
 133 005e ED91      		ld r30,X+
 134 0060 FC91      		ld r31,X
 135 0062 5797      		sbiw r26,22+1
 136 0064 CD01      		movw r24,r26
 137 0066 4696      		adiw r24,22
 138 0068 E817      		cp r30,r24
 139 006a F907      		cpc r31,r25
 140 006c 01F0      		breq .L7
 141               	.L6:
 142               	.LVL11:
 143               	.LBB8:
 144               	.LBB9:
  50:../../os/kernel/include/chinline.h **** }
  51:../../os/kernel/include/chinline.h **** 
  52:../../os/kernel/include/chinline.h **** static INLINE Thread *fifo_remove(ThreadsQueue *tqp) {
  53:../../os/kernel/include/chinline.h ****   Thread *tp = tqp->p_next;
  54:../../os/kernel/include/chinline.h **** 
  55:../../os/kernel/include/chinline.h ****   (tqp->p_next = tp->p_next)->p_prev = (Thread *)tqp;
 145               		.loc 2 55 0
 146 006e C081      		ld r28,Z
 147 0070 D181      		ldd r29,Z+1
 148 0072 5796      		adiw r26,22+1
 149 0074 DC93      		st X,r29
 150 0076 CE93      		st -X,r28
 151 0078 5697      		sbiw r26,22
 152 007a 9B83      		std Y+3,r25
 153 007c 8A83      		std Y+2,r24
 154               	.LBE9:
 155               	.LBE8:
 104:../../os/kernel/src/chmsg.c ****     chSchGoSleepS(THD_STATE_WTMSG);
 105:../../os/kernel/src/chmsg.c ****   tp = fifo_remove(&currp->p_msgqueue);
 106:../../os/kernel/src/chmsg.c ****   tp->p_state = THD_STATE_SNDMSG;
 156               		.loc 1 106 0
 157 007e 8BE0      		ldi r24,lo8(11)
 158 0080 8587      		std Z+13,r24
 107:../../os/kernel/src/chmsg.c ****   chSysUnlock();
 159               		.loc 1 107 0
 160               	/* #APP */
 161               	 ;  107 "../../os/kernel/src/chmsg.c" 1
 162 0082 7894      		sei
 163               	 ;  0 "" 2
 108:../../os/kernel/src/chmsg.c ****   return tp;
 109:../../os/kernel/src/chmsg.c **** }
 164               		.loc 1 109 0
 165               	/* #NOAPP */
 166 0084 CF01      		movw r24,r30
 167               	/* epilogue start */
 168 0086 DF91      		pop r29
 169 0088 CF91      		pop r28
 170 008a 0895      		ret
 171               	.LVL12:
 172               	.L7:
 104:../../os/kernel/src/chmsg.c ****     chSchGoSleepS(THD_STATE_WTMSG);
 173               		.loc 1 104 0
 174 008c 8CE0      		ldi r24,lo8(12)
 175 008e 0E94 0000 		call chSchGoSleepS
 176               	.LVL13:
 177 0092 A091 0000 		lds r26,rlist+11
 178 0096 B091 0000 		lds r27,rlist+11+1
 179 009a 5696      		adiw r26,22
 180 009c ED91      		ld r30,X+
 181 009e FC91      		ld r31,X
 182 00a0 5797      		sbiw r26,22+1
 183 00a2 CD01      		movw r24,r26
 184 00a4 4696      		adiw r24,22
 185 00a6 00C0      		rjmp .L6
 186               		.cfi_endproc
 187               	.LFE8:
 189               	.global	chMsgRelease
 191               	chMsgRelease:
 192               	.LFB9:
 110:../../os/kernel/src/chmsg.c **** 
 111:../../os/kernel/src/chmsg.c **** /**
 112:../../os/kernel/src/chmsg.c ****  * @brief   Releases a sender thread specifying a response message.
 113:../../os/kernel/src/chmsg.c ****  * @pre     Invoke this function only after a message has been received
 114:../../os/kernel/src/chmsg.c ****  *          using @p chMsgWait().
 115:../../os/kernel/src/chmsg.c ****  *
 116:../../os/kernel/src/chmsg.c ****  * @param[in] tp        pointer to the thread
 117:../../os/kernel/src/chmsg.c ****  * @param[in] msg       message to be returned to the sender
 118:../../os/kernel/src/chmsg.c ****  *
 119:../../os/kernel/src/chmsg.c ****  * @api
 120:../../os/kernel/src/chmsg.c ****  */
 121:../../os/kernel/src/chmsg.c **** void chMsgRelease(Thread *tp, msg_t msg) {
 193               		.loc 1 121 0
 194               		.cfi_startproc
 195               	.LVL14:
 196               	/* prologue: function */
 197               	/* frame size = 0 */
 198               	/* stack size = 0 */
 199               	.L__stack_usage = 0
 122:../../os/kernel/src/chmsg.c **** 
 123:../../os/kernel/src/chmsg.c ****   chSysLock();
 200               		.loc 1 123 0
 201               	/* #APP */
 202               	 ;  123 "../../os/kernel/src/chmsg.c" 1
 203 00a8 F894      		cli
 204               	 ;  0 "" 2
 124:../../os/kernel/src/chmsg.c ****   chDbgAssert(tp->p_state == THD_STATE_SNDMSG,
 125:../../os/kernel/src/chmsg.c ****               "chMsgRelease(), #1", "invalid state");
 126:../../os/kernel/src/chmsg.c ****   chMsgReleaseS(tp, msg);
 205               		.loc 1 126 0
 206               	/* #NOAPP */
 207 00aa 0E94 0000 		call chSchWakeupS
 208               	.LVL15:
 127:../../os/kernel/src/chmsg.c ****   chSysUnlock();
 209               		.loc 1 127 0
 210               	/* #APP */
 211               	 ;  127 "../../os/kernel/src/chmsg.c" 1
 212 00ae 7894      		sei
 213               	 ;  0 "" 2
 214               	/* #NOAPP */
 215 00b0 0895      		ret
 216               		.cfi_endproc
 217               	.LFE9:
 219               	.Letext0:
 220               		.file 3 "/usr/local/cross/lib/gcc/avr/4.7.2/../../../../avr/include/stdint.h"
 221               		.file 4 "../../os/ports/GCC/AVR/chtypes.h"
 222               		.file 5 "../../os/kernel/include/chlists.h"
 223               		.file 6 "../../os/kernel/include/chthreads.h"
 224               		.file 7 "../../os/ports/GCC/AVR/chcore.h"
 225               		.file 8 "../../os/kernel/include/chschd.h"
 226               		.file 9 "../../os/kernel/include/chmtx.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 chmsg.c
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccSyuCn0.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccSyuCn0.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccSyuCn0.s:4      *ABS*:000000000000003f __SREG__
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccSyuCn0.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccSyuCn0.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccSyuCn0.s:12     .text:0000000000000000 chMsgSend
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccSyuCn0.s:107    .text:000000000000004e chMsgWait
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccSyuCn0.s:191    .text:00000000000000a8 chMsgRelease

UNDEFINED SYMBOLS
rlist
chSchGoSleepS
chSchReadyI
chSchWakeupS
