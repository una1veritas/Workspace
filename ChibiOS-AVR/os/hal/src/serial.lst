   1               		.file	"serial.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  11               	readt:
  12               	.LFB14:
  13               		.file 1 "../../os/hal/src/serial.c"
   1:../../os/hal/src/serial.c **** /*
   2:../../os/hal/src/serial.c ****     ChibiOS/RT - Copyright (C) 2006,2007,2008,2009,2010,
   3:../../os/hal/src/serial.c ****                  2011,2012 Giovanni Di Sirio.
   4:../../os/hal/src/serial.c **** 
   5:../../os/hal/src/serial.c ****     This file is part of ChibiOS/RT.
   6:../../os/hal/src/serial.c **** 
   7:../../os/hal/src/serial.c ****     ChibiOS/RT is free software; you can redistribute it and/or modify
   8:../../os/hal/src/serial.c ****     it under the terms of the GNU General Public License as published by
   9:../../os/hal/src/serial.c ****     the Free Software Foundation; either version 3 of the License, or
  10:../../os/hal/src/serial.c ****     (at your option) any later version.
  11:../../os/hal/src/serial.c **** 
  12:../../os/hal/src/serial.c ****     ChibiOS/RT is distributed in the hope that it will be useful,
  13:../../os/hal/src/serial.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:../../os/hal/src/serial.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:../../os/hal/src/serial.c ****     GNU General Public License for more details.
  16:../../os/hal/src/serial.c **** 
  17:../../os/hal/src/serial.c ****     You should have received a copy of the GNU General Public License
  18:../../os/hal/src/serial.c ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  19:../../os/hal/src/serial.c **** */
  20:../../os/hal/src/serial.c **** 
  21:../../os/hal/src/serial.c **** /**
  22:../../os/hal/src/serial.c ****  * @file    serial.c
  23:../../os/hal/src/serial.c ****  * @brief   Serial Driver code.
  24:../../os/hal/src/serial.c ****  *
  25:../../os/hal/src/serial.c ****  * @addtogroup SERIAL
  26:../../os/hal/src/serial.c ****  * @{
  27:../../os/hal/src/serial.c ****  */
  28:../../os/hal/src/serial.c **** 
  29:../../os/hal/src/serial.c **** #include "ch.h"
  30:../../os/hal/src/serial.c **** #include "hal.h"
  31:../../os/hal/src/serial.c **** 
  32:../../os/hal/src/serial.c **** #if HAL_USE_SERIAL || defined(__DOXYGEN__)
  33:../../os/hal/src/serial.c **** 
  34:../../os/hal/src/serial.c **** /*===========================================================================*/
  35:../../os/hal/src/serial.c **** /* Driver local definitions.                                                 */
  36:../../os/hal/src/serial.c **** /*===========================================================================*/
  37:../../os/hal/src/serial.c **** 
  38:../../os/hal/src/serial.c **** /*===========================================================================*/
  39:../../os/hal/src/serial.c **** /* Driver exported variables.                                                */
  40:../../os/hal/src/serial.c **** /*===========================================================================*/
  41:../../os/hal/src/serial.c **** 
  42:../../os/hal/src/serial.c **** /*===========================================================================*/
  43:../../os/hal/src/serial.c **** /* Driver local variables.                                                   */
  44:../../os/hal/src/serial.c **** /*===========================================================================*/
  45:../../os/hal/src/serial.c **** 
  46:../../os/hal/src/serial.c **** /*===========================================================================*/
  47:../../os/hal/src/serial.c **** /* Driver local functions.                                                   */
  48:../../os/hal/src/serial.c **** /*===========================================================================*/
  49:../../os/hal/src/serial.c **** 
  50:../../os/hal/src/serial.c **** /*
  51:../../os/hal/src/serial.c ****  * Interface implementation, the following functions just invoke the equivalent
  52:../../os/hal/src/serial.c ****  * queue-level function or macro.
  53:../../os/hal/src/serial.c ****  */
  54:../../os/hal/src/serial.c **** 
  55:../../os/hal/src/serial.c **** static size_t write(void *ip, const uint8_t *bp, size_t n) {
  56:../../os/hal/src/serial.c **** 
  57:../../os/hal/src/serial.c ****   return chOQWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
  58:../../os/hal/src/serial.c ****                           n, TIME_INFINITE);
  59:../../os/hal/src/serial.c **** }
  60:../../os/hal/src/serial.c **** 
  61:../../os/hal/src/serial.c **** static size_t read(void *ip, uint8_t *bp, size_t n) {
  62:../../os/hal/src/serial.c **** 
  63:../../os/hal/src/serial.c ****   return chIQReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
  64:../../os/hal/src/serial.c ****                          n, TIME_INFINITE);
  65:../../os/hal/src/serial.c **** }
  66:../../os/hal/src/serial.c **** 
  67:../../os/hal/src/serial.c **** static msg_t put(void *ip, uint8_t b) {
  68:../../os/hal/src/serial.c **** 
  69:../../os/hal/src/serial.c ****   return chOQPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
  70:../../os/hal/src/serial.c **** }
  71:../../os/hal/src/serial.c **** 
  72:../../os/hal/src/serial.c **** static msg_t get(void *ip) {
  73:../../os/hal/src/serial.c **** 
  74:../../os/hal/src/serial.c ****   return chIQGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
  75:../../os/hal/src/serial.c **** }
  76:../../os/hal/src/serial.c **** 
  77:../../os/hal/src/serial.c **** static msg_t putt(void *ip, uint8_t b, systime_t timeout) {
  78:../../os/hal/src/serial.c **** 
  79:../../os/hal/src/serial.c ****   return chOQPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
  80:../../os/hal/src/serial.c **** }
  81:../../os/hal/src/serial.c **** 
  82:../../os/hal/src/serial.c **** static msg_t gett(void *ip, systime_t timeout) {
  83:../../os/hal/src/serial.c **** 
  84:../../os/hal/src/serial.c ****   return chIQGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
  85:../../os/hal/src/serial.c **** }
  86:../../os/hal/src/serial.c **** 
  87:../../os/hal/src/serial.c **** static size_t writet(void *ip, const uint8_t *bp, size_t n, systime_t time) {
  88:../../os/hal/src/serial.c **** 
  89:../../os/hal/src/serial.c ****   return chOQWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, time);
  90:../../os/hal/src/serial.c **** }
  91:../../os/hal/src/serial.c **** 
  92:../../os/hal/src/serial.c **** static size_t readt(void *ip, uint8_t *bp, size_t n, systime_t time) {
  14               		.loc 1 92 0
  15               		.cfi_startproc
  16               	.LVL0:
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
  93:../../os/hal/src/serial.c **** 
  94:../../os/hal/src/serial.c ****   return chIQReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, time);
  21               		.loc 1 94 0
  22 0000 0596      		adiw r24,5
  23               	.LVL1:
  24 0002 0C94 0000 		jmp chIQReadTimeout
  25               	.LVL2:
  26               		.cfi_endproc
  27               	.LFE14:
  30               	read:
  31               	.LFB8:
  61:../../os/hal/src/serial.c **** static size_t read(void *ip, uint8_t *bp, size_t n) {
  32               		.loc 1 61 0
  33               		.cfi_startproc
  34               	.LVL3:
  35               	/* prologue: function */
  36               	/* frame size = 0 */
  37               	/* stack size = 0 */
  38               	.L__stack_usage = 0
  63:../../os/hal/src/serial.c ****   return chIQReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
  39               		.loc 1 63 0
  40 0006 2FEF      		ldi r18,lo8(-1)
  41 0008 3FEF      		ldi r19,lo8(-1)
  42 000a 0596      		adiw r24,5
  43               	.LVL4:
  44 000c 0C94 0000 		jmp chIQReadTimeout
  45               	.LVL5:
  46               		.cfi_endproc
  47               	.LFE8:
  50               	writet:
  51               	.LFB13:
  87:../../os/hal/src/serial.c **** static size_t writet(void *ip, const uint8_t *bp, size_t n, systime_t time) {
  52               		.loc 1 87 0
  53               		.cfi_startproc
  54               	.LVL6:
  55               	/* prologue: function */
  56               	/* frame size = 0 */
  57               	/* stack size = 0 */
  58               	.L__stack_usage = 0
  89:../../os/hal/src/serial.c ****   return chOQWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, time);
  59               		.loc 1 89 0
  60 0010 4796      		adiw r24,23
  61               	.LVL7:
  62 0012 0C94 0000 		jmp chOQWriteTimeout
  63               	.LVL8:
  64               		.cfi_endproc
  65               	.LFE13:
  68               	write:
  69               	.LFB7:
  55:../../os/hal/src/serial.c **** static size_t write(void *ip, const uint8_t *bp, size_t n) {
  70               		.loc 1 55 0
  71               		.cfi_startproc
  72               	.LVL9:
  73               	/* prologue: function */
  74               	/* frame size = 0 */
  75               	/* stack size = 0 */
  76               	.L__stack_usage = 0
  57:../../os/hal/src/serial.c ****   return chOQWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
  77               		.loc 1 57 0
  78 0016 2FEF      		ldi r18,lo8(-1)
  79 0018 3FEF      		ldi r19,lo8(-1)
  80 001a 4796      		adiw r24,23
  81               	.LVL10:
  82 001c 0C94 0000 		jmp chOQWriteTimeout
  83               	.LVL11:
  84               		.cfi_endproc
  85               	.LFE7:
  88               	gett:
  89               	.LFB12:
  82:../../os/hal/src/serial.c **** static msg_t gett(void *ip, systime_t timeout) {
  90               		.loc 1 82 0
  91               		.cfi_startproc
  92               	.LVL12:
  93               	/* prologue: function */
  94               	/* frame size = 0 */
  95               	/* stack size = 0 */
  96               	.L__stack_usage = 0
  84:../../os/hal/src/serial.c ****   return chIQGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
  97               		.loc 1 84 0
  98 0020 0596      		adiw r24,5
  99               	.LVL13:
 100 0022 0C94 0000 		jmp chIQGetTimeout
 101               	.LVL14:
 102               		.cfi_endproc
 103               	.LFE12:
 106               	get:
 107               	.LFB10:
  72:../../os/hal/src/serial.c **** static msg_t get(void *ip) {
 108               		.loc 1 72 0
 109               		.cfi_startproc
 110               	.LVL15:
 111               	/* prologue: function */
 112               	/* frame size = 0 */
 113               	/* stack size = 0 */
 114               	.L__stack_usage = 0
  74:../../os/hal/src/serial.c ****   return chIQGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 115               		.loc 1 74 0
 116 0026 6FEF      		ldi r22,lo8(-1)
 117 0028 7FEF      		ldi r23,lo8(-1)
 118 002a 0596      		adiw r24,5
 119               	.LVL16:
 120 002c 0C94 0000 		jmp chIQGetTimeout
 121               	.LVL17:
 122               		.cfi_endproc
 123               	.LFE10:
 126               	putt:
 127               	.LFB11:
  77:../../os/hal/src/serial.c **** static msg_t putt(void *ip, uint8_t b, systime_t timeout) {
 128               		.loc 1 77 0
 129               		.cfi_startproc
 130               	.LVL18:
 131               	/* prologue: function */
 132               	/* frame size = 0 */
 133               	/* stack size = 0 */
 134               	.L__stack_usage = 0
  79:../../os/hal/src/serial.c ****   return chOQPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 135               		.loc 1 79 0
 136 0030 4796      		adiw r24,23
 137               	.LVL19:
 138 0032 0C94 0000 		jmp chOQPutTimeout
 139               	.LVL20:
 140               		.cfi_endproc
 141               	.LFE11:
 144               	put:
 145               	.LFB9:
  67:../../os/hal/src/serial.c **** static msg_t put(void *ip, uint8_t b) {
 146               		.loc 1 67 0
 147               		.cfi_startproc
 148               	.LVL21:
 149               	/* prologue: function */
 150               	/* frame size = 0 */
 151               	/* stack size = 0 */
 152               	.L__stack_usage = 0
  69:../../os/hal/src/serial.c ****   return chOQPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 153               		.loc 1 69 0
 154 0036 4FEF      		ldi r20,lo8(-1)
 155 0038 5FEF      		ldi r21,lo8(-1)
 156 003a 4796      		adiw r24,23
 157               	.LVL22:
 158 003c 0C94 0000 		jmp chOQPutTimeout
 159               	.LVL23:
 160               		.cfi_endproc
 161               	.LFE9:
 163               	.global	sdInit
 165               	sdInit:
 166               	.LFB15:
  95:../../os/hal/src/serial.c **** }
  96:../../os/hal/src/serial.c **** 
  97:../../os/hal/src/serial.c **** static const struct SerialDriverVMT vmt = {
  98:../../os/hal/src/serial.c ****   write, read, put, get,
  99:../../os/hal/src/serial.c ****   putt, gett, writet, readt
 100:../../os/hal/src/serial.c **** };
 101:../../os/hal/src/serial.c **** 
 102:../../os/hal/src/serial.c **** /*===========================================================================*/
 103:../../os/hal/src/serial.c **** /* Driver exported functions.                                                */
 104:../../os/hal/src/serial.c **** /*===========================================================================*/
 105:../../os/hal/src/serial.c **** 
 106:../../os/hal/src/serial.c **** /**
 107:../../os/hal/src/serial.c ****  * @brief   Serial Driver initialization.
 108:../../os/hal/src/serial.c ****  * @note    This function is implicitly invoked by @p halInit(), there is
 109:../../os/hal/src/serial.c ****  *          no need to explicitly initialize the driver.
 110:../../os/hal/src/serial.c ****  *
 111:../../os/hal/src/serial.c ****  * @init
 112:../../os/hal/src/serial.c ****  */
 113:../../os/hal/src/serial.c **** void sdInit(void) {
 167               		.loc 1 113 0
 168               		.cfi_startproc
 169               	/* prologue: function */
 170               	/* frame size = 0 */
 171               	/* stack size = 0 */
 172               	.L__stack_usage = 0
 114:../../os/hal/src/serial.c **** 
 115:../../os/hal/src/serial.c ****   sd_lld_init();
 173               		.loc 1 115 0
 174 0040 0C94 0000 		jmp sd_lld_init
 175               	.LVL24:
 176               		.cfi_endproc
 177               	.LFE15:
 179               	.global	sdObjectInit
 181               	sdObjectInit:
 182               	.LFB16:
 116:../../os/hal/src/serial.c **** }
 117:../../os/hal/src/serial.c **** 
 118:../../os/hal/src/serial.c **** /**
 119:../../os/hal/src/serial.c ****  * @brief   Initializes a generic full duplex driver object.
 120:../../os/hal/src/serial.c ****  * @details The HW dependent part of the initialization has to be performed
 121:../../os/hal/src/serial.c ****  *          outside, usually in the hardware initialization code.
 122:../../os/hal/src/serial.c ****  *
 123:../../os/hal/src/serial.c ****  * @param[out] sdp      pointer to a @p SerialDriver structure
 124:../../os/hal/src/serial.c ****  * @param[in] inotify   pointer to a callback function that is invoked when
 125:../../os/hal/src/serial.c ****  *                      some data is read from the Queue. The value can be
 126:../../os/hal/src/serial.c ****  *                      @p NULL.
 127:../../os/hal/src/serial.c ****  * @param[in] onotify   pointer to a callback function that is invoked when
 128:../../os/hal/src/serial.c ****  *                      some data is written in the Queue. The value can be
 129:../../os/hal/src/serial.c ****  *                      @p NULL.
 130:../../os/hal/src/serial.c ****  *
 131:../../os/hal/src/serial.c ****  * @init
 132:../../os/hal/src/serial.c ****  */
 133:../../os/hal/src/serial.c **** void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {
 183               		.loc 1 133 0
 184               		.cfi_startproc
 185               	.LVL25:
 186 0044 EF92      		push r14
 187               	.LCFI0:
 188               		.cfi_def_cfa_offset 3
 189               		.cfi_offset 14, -2
 190 0046 FF92      		push r15
 191               	.LCFI1:
 192               		.cfi_def_cfa_offset 4
 193               		.cfi_offset 15, -3
 194 0048 0F93      		push r16
 195               	.LCFI2:
 196               		.cfi_def_cfa_offset 5
 197               		.cfi_offset 16, -4
 198 004a 1F93      		push r17
 199               	.LCFI3:
 200               		.cfi_def_cfa_offset 6
 201               		.cfi_offset 17, -5
 202 004c CF93      		push r28
 203               	.LCFI4:
 204               		.cfi_def_cfa_offset 7
 205               		.cfi_offset 28, -6
 206 004e DF93      		push r29
 207               	.LCFI5:
 208               		.cfi_def_cfa_offset 8
 209               		.cfi_offset 29, -7
 210               	/* prologue: function */
 211               	/* frame size = 0 */
 212               	/* stack size = 6 */
 213               	.L__stack_usage = 6
 214 0050 EC01      		movw r28,r24
 215 0052 9B01      		movw r18,r22
 216 0054 7A01      		movw r14,r20
 134:../../os/hal/src/serial.c **** 
 135:../../os/hal/src/serial.c ****   sdp->vmt = &vmt;
 217               		.loc 1 135 0
 218 0056 FC01      		movw r30,r24
 219 0058 80E0      		ldi r24,lo8(vmt)
 220 005a 90E0      		ldi r25,hi8(vmt)
 221               	.LVL26:
 222 005c 8193      		st Z+,r24
 223 005e 9193      		st Z+,r25
 136:../../os/hal/src/serial.c ****   chEvtInit(&sdp->event);
 224               		.loc 1 136 0
 225 0060 FB83      		std Y+3,r31
 226 0062 EA83      		std Y+2,r30
 137:../../os/hal/src/serial.c ****   sdp->state = SD_STOP;
 227               		.loc 1 137 0
 228 0064 81E0      		ldi r24,lo8(1)
 229 0066 8C83      		std Y+4,r24
 138:../../os/hal/src/serial.c ****   chIQInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
 230               		.loc 1 138 0
 231 0068 BE01      		movw r22,r28
 232               	.LVL27:
 233 006a 675D      		subi r22,-41
 234 006c 7F4F      		sbci r23,-1
 235 006e 8E01      		movw r16,r28
 236 0070 40E1      		ldi r20,lo8(16)
 237 0072 50E0      		ldi r21,0
 238               	.LVL28:
 239 0074 CE01      		movw r24,r28
 240 0076 0596      		adiw r24,5
 241 0078 0E94 0000 		call chIQInit
 242               	.LVL29:
 139:../../os/hal/src/serial.c ****   chOQInit(&sdp->oqueue, sdp->ob, SERIAL_BUFFERS_SIZE, onotify, sdp);
 243               		.loc 1 139 0
 244 007c BE01      		movw r22,r28
 245 007e 675C      		subi r22,-57
 246 0080 7F4F      		sbci r23,-1
 247 0082 9701      		movw r18,r14
 248 0084 40E1      		ldi r20,lo8(16)
 249 0086 50E0      		ldi r21,0
 250 0088 CE01      		movw r24,r28
 251 008a 4796      		adiw r24,23
 252 008c 0E94 0000 		call chOQInit
 253               	.LVL30:
 254               	/* epilogue start */
 140:../../os/hal/src/serial.c **** }
 255               		.loc 1 140 0
 256 0090 DF91      		pop r29
 257 0092 CF91      		pop r28
 258               	.LVL31:
 259 0094 1F91      		pop r17
 260 0096 0F91      		pop r16
 261               	.LVL32:
 262 0098 FF90      		pop r15
 263 009a EF90      		pop r14
 264               	.LVL33:
 265 009c 0895      		ret
 266               		.cfi_endproc
 267               	.LFE16:
 269               	.global	sdStart
 271               	sdStart:
 272               	.LFB17:
 141:../../os/hal/src/serial.c **** 
 142:../../os/hal/src/serial.c **** /**
 143:../../os/hal/src/serial.c ****  * @brief   Configures and starts the driver.
 144:../../os/hal/src/serial.c ****  *
 145:../../os/hal/src/serial.c ****  * @param[in] sdp       pointer to a @p SerialDriver object
 146:../../os/hal/src/serial.c ****  * @param[in] config    the architecture-dependent serial driver configuration.
 147:../../os/hal/src/serial.c ****  *                      If this parameter is set to @p NULL then a default
 148:../../os/hal/src/serial.c ****  *                      configuration is used.
 149:../../os/hal/src/serial.c ****  *
 150:../../os/hal/src/serial.c ****  * @api
 151:../../os/hal/src/serial.c ****  */
 152:../../os/hal/src/serial.c **** void sdStart(SerialDriver *sdp, const SerialConfig *config) {
 273               		.loc 1 152 0
 274               		.cfi_startproc
 275               	.LVL34:
 276 009e CF93      		push r28
 277               	.LCFI6:
 278               		.cfi_def_cfa_offset 3
 279               		.cfi_offset 28, -2
 280 00a0 DF93      		push r29
 281               	.LCFI7:
 282               		.cfi_def_cfa_offset 4
 283               		.cfi_offset 29, -3
 284               	/* prologue: function */
 285               	/* frame size = 0 */
 286               	/* stack size = 2 */
 287               	.L__stack_usage = 2
 288 00a2 EC01      		movw r28,r24
 153:../../os/hal/src/serial.c **** 
 154:../../os/hal/src/serial.c ****   chDbgCheck(sdp != NULL, "sdStart");
 155:../../os/hal/src/serial.c **** 
 156:../../os/hal/src/serial.c ****   chSysLock();
 289               		.loc 1 156 0
 290               	/* #APP */
 291               	 ;  156 "../../os/hal/src/serial.c" 1
 292 00a4 F894      		cli
 293               	 ;  0 "" 2
 157:../../os/hal/src/serial.c ****   chDbgAssert((sdp->state == SD_STOP) || (sdp->state == SD_READY),
 158:../../os/hal/src/serial.c ****               "sdStart(), #1",
 159:../../os/hal/src/serial.c ****               "invalid state");
 160:../../os/hal/src/serial.c ****   sd_lld_start(sdp, config);
 294               		.loc 1 160 0
 295               	/* #NOAPP */
 296 00a6 0E94 0000 		call sd_lld_start
 297               	.LVL35:
 161:../../os/hal/src/serial.c ****   sdp->state = SD_READY;
 298               		.loc 1 161 0
 299 00aa 82E0      		ldi r24,lo8(2)
 300 00ac 8C83      		std Y+4,r24
 162:../../os/hal/src/serial.c ****   chSysUnlock();
 301               		.loc 1 162 0
 302               	/* #APP */
 303               	 ;  162 "../../os/hal/src/serial.c" 1
 304 00ae 7894      		sei
 305               	 ;  0 "" 2
 306               	/* epilogue start */
 163:../../os/hal/src/serial.c **** }
 307               		.loc 1 163 0
 308               	/* #NOAPP */
 309 00b0 DF91      		pop r29
 310 00b2 CF91      		pop r28
 311               	.LVL36:
 312 00b4 0895      		ret
 313               		.cfi_endproc
 314               	.LFE17:
 316               	.global	sdStop
 318               	sdStop:
 319               	.LFB18:
 164:../../os/hal/src/serial.c **** 
 165:../../os/hal/src/serial.c **** /**
 166:../../os/hal/src/serial.c ****  * @brief   Stops the driver.
 167:../../os/hal/src/serial.c ****  * @details Any thread waiting on the driver's queues will be awakened with
 168:../../os/hal/src/serial.c ****  *          the message @p Q_RESET.
 169:../../os/hal/src/serial.c ****  *
 170:../../os/hal/src/serial.c ****  * @param[in] sdp       pointer to a @p SerialDriver object
 171:../../os/hal/src/serial.c ****  *
 172:../../os/hal/src/serial.c ****  * @api
 173:../../os/hal/src/serial.c ****  */
 174:../../os/hal/src/serial.c **** void sdStop(SerialDriver *sdp) {
 320               		.loc 1 174 0
 321               		.cfi_startproc
 322               	.LVL37:
 323 00b6 CF93      		push r28
 324               	.LCFI8:
 325               		.cfi_def_cfa_offset 3
 326               		.cfi_offset 28, -2
 327 00b8 DF93      		push r29
 328               	.LCFI9:
 329               		.cfi_def_cfa_offset 4
 330               		.cfi_offset 29, -3
 331               	/* prologue: function */
 332               	/* frame size = 0 */
 333               	/* stack size = 2 */
 334               	.L__stack_usage = 2
 335 00ba EC01      		movw r28,r24
 175:../../os/hal/src/serial.c **** 
 176:../../os/hal/src/serial.c ****   chDbgCheck(sdp != NULL, "sdStop");
 177:../../os/hal/src/serial.c **** 
 178:../../os/hal/src/serial.c ****   chSysLock();
 336               		.loc 1 178 0
 337               	/* #APP */
 338               	 ;  178 "../../os/hal/src/serial.c" 1
 339 00bc F894      		cli
 340               	 ;  0 "" 2
 179:../../os/hal/src/serial.c ****   chDbgAssert((sdp->state == SD_STOP) || (sdp->state == SD_READY),
 180:../../os/hal/src/serial.c ****               "sdStop(), #1",
 181:../../os/hal/src/serial.c ****               "invalid state");
 182:../../os/hal/src/serial.c ****   sd_lld_stop(sdp);
 341               		.loc 1 182 0
 342               	/* #NOAPP */
 343 00be 0E94 0000 		call sd_lld_stop
 344               	.LVL38:
 183:../../os/hal/src/serial.c ****   sdp->state = SD_STOP;
 345               		.loc 1 183 0
 346 00c2 81E0      		ldi r24,lo8(1)
 347 00c4 8C83      		std Y+4,r24
 184:../../os/hal/src/serial.c ****   chOQResetI(&sdp->oqueue);
 348               		.loc 1 184 0
 349 00c6 CE01      		movw r24,r28
 350 00c8 4796      		adiw r24,23
 351 00ca 0E94 0000 		call chOQResetI
 352               	.LVL39:
 185:../../os/hal/src/serial.c ****   chIQResetI(&sdp->iqueue);
 353               		.loc 1 185 0
 354 00ce CE01      		movw r24,r28
 355 00d0 0596      		adiw r24,5
 356 00d2 0E94 0000 		call chIQResetI
 357               	.LVL40:
 186:../../os/hal/src/serial.c ****   chSchRescheduleS();
 358               		.loc 1 186 0
 359 00d6 0E94 0000 		call chSchRescheduleS
 360               	.LVL41:
 187:../../os/hal/src/serial.c ****   chSysUnlock();
 361               		.loc 1 187 0
 362               	/* #APP */
 363               	 ;  187 "../../os/hal/src/serial.c" 1
 364 00da 7894      		sei
 365               	 ;  0 "" 2
 366               	/* epilogue start */
 188:../../os/hal/src/serial.c **** }
 367               		.loc 1 188 0
 368               	/* #NOAPP */
 369 00dc DF91      		pop r29
 370 00de CF91      		pop r28
 371               	.LVL42:
 372 00e0 0895      		ret
 373               		.cfi_endproc
 374               	.LFE18:
 376               	.global	sdIncomingDataI
 378               	sdIncomingDataI:
 379               	.LFB19:
 189:../../os/hal/src/serial.c **** 
 190:../../os/hal/src/serial.c **** /**
 191:../../os/hal/src/serial.c ****  * @brief   Handles incoming data.
 192:../../os/hal/src/serial.c ****  * @details This function must be called from the input interrupt service
 193:../../os/hal/src/serial.c ****  *          routine in order to enqueue incoming data and generate the
 194:../../os/hal/src/serial.c ****  *          related events.
 195:../../os/hal/src/serial.c ****  * @note    The incoming data event is only generated when the input queue
 196:../../os/hal/src/serial.c ****  *          becomes non-empty.
 197:../../os/hal/src/serial.c ****  * @note    In order to gain some performance it is suggested to not use
 198:../../os/hal/src/serial.c ****  *          this function directly but copy this code directly into the
 199:../../os/hal/src/serial.c ****  *          interrupt service routine.
 200:../../os/hal/src/serial.c ****  *
 201:../../os/hal/src/serial.c ****  * @param[in] sdp       pointer to a @p SerialDriver structure
 202:../../os/hal/src/serial.c ****  * @param[in] b         the byte to be written in the driver's Input Queue
 203:../../os/hal/src/serial.c ****  *
 204:../../os/hal/src/serial.c ****  * @iclass
 205:../../os/hal/src/serial.c ****  */
 206:../../os/hal/src/serial.c **** void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {
 380               		.loc 1 206 0
 381               		.cfi_startproc
 382               	.LVL43:
 383 00e2 1F93      		push r17
 384               	.LCFI10:
 385               		.cfi_def_cfa_offset 3
 386               		.cfi_offset 17, -2
 387 00e4 CF93      		push r28
 388               	.LCFI11:
 389               		.cfi_def_cfa_offset 4
 390               		.cfi_offset 28, -3
 391 00e6 DF93      		push r29
 392               	.LCFI12:
 393               		.cfi_def_cfa_offset 5
 394               		.cfi_offset 29, -4
 395               	/* prologue: function */
 396               	/* frame size = 0 */
 397               	/* stack size = 3 */
 398               	.L__stack_usage = 3
 399 00e8 EC01      		movw r28,r24
 400 00ea 162F      		mov r17,r22
 207:../../os/hal/src/serial.c **** 
 208:../../os/hal/src/serial.c ****   chDbgCheckClassI();
 209:../../os/hal/src/serial.c ****   chDbgCheck(sdp != NULL, "sdIncomingDataI");
 210:../../os/hal/src/serial.c **** 
 211:../../os/hal/src/serial.c ****   if (chIQIsEmptyI(&sdp->iqueue))
 401               		.loc 1 211 0
 402 00ec 8985      		ldd r24,Y+9
 403 00ee 9A85      		ldd r25,Y+10
 404               	.LVL44:
 405 00f0 892B      		or r24,r25
 406 00f2 01F0      		breq .L17
 212:../../os/hal/src/serial.c ****     chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
 213:../../os/hal/src/serial.c ****   if (chIQPutI(&sdp->iqueue, b) < Q_OK)
 407               		.loc 1 213 0
 408 00f4 612F      		mov r22,r17
 409               	.LVL45:
 410 00f6 CE01      		movw r24,r28
 411 00f8 0596      		adiw r24,5
 412 00fa 0E94 0000 		call chIQPutI
 413               	.LVL46:
 414 00fe 97FD      		sbrc r25,7
 415 0100 00C0      		rjmp .L18
 416               	.L13:
 417               	/* epilogue start */
 214:../../os/hal/src/serial.c ****     chnAddFlagsI(sdp, SD_OVERRUN_ERROR);
 215:../../os/hal/src/serial.c **** }
 418               		.loc 1 215 0
 419 0102 DF91      		pop r29
 420 0104 CF91      		pop r28
 421               	.LVL47:
 422 0106 1F91      		pop r17
 423               	.LVL48:
 424 0108 0895      		ret
 425               	.LVL49:
 426               	.L17:
 212:../../os/hal/src/serial.c ****     chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
 427               		.loc 1 212 0
 428 010a 64E0      		ldi r22,lo8(4)
 429 010c CE01      		movw r24,r28
 430 010e 0296      		adiw r24,2
 431 0110 0E94 0000 		call chEvtBroadcastFlagsI
 432               	.LVL50:
 213:../../os/hal/src/serial.c ****   if (chIQPutI(&sdp->iqueue, b) < Q_OK)
 433               		.loc 1 213 0
 434 0114 612F      		mov r22,r17
 435 0116 CE01      		movw r24,r28
 436 0118 0596      		adiw r24,5
 437 011a 0E94 0000 		call chIQPutI
 438               	.LVL51:
 439 011e 97FF      		sbrs r25,7
 440 0120 00C0      		rjmp .L13
 441               	.L18:
 214:../../os/hal/src/serial.c ****     chnAddFlagsI(sdp, SD_OVERRUN_ERROR);
 442               		.loc 1 214 0
 443 0122 60E8      		ldi r22,lo8(-128)
 444 0124 CE01      		movw r24,r28
 445 0126 0296      		adiw r24,2
 446               	/* epilogue start */
 447               		.loc 1 215 0
 448 0128 DF91      		pop r29
 449 012a CF91      		pop r28
 450               	.LVL52:
 451 012c 1F91      		pop r17
 452               	.LVL53:
 214:../../os/hal/src/serial.c ****     chnAddFlagsI(sdp, SD_OVERRUN_ERROR);
 453               		.loc 1 214 0
 454 012e 0C94 0000 		jmp chEvtBroadcastFlagsI
 455               	.LVL54:
 456               		.cfi_endproc
 457               	.LFE19:
 459               	.global	sdRequestDataI
 461               	sdRequestDataI:
 462               	.LFB20:
 216:../../os/hal/src/serial.c **** 
 217:../../os/hal/src/serial.c **** /**
 218:../../os/hal/src/serial.c ****  * @brief   Handles outgoing data.
 219:../../os/hal/src/serial.c ****  * @details Must be called from the output interrupt service routine in order
 220:../../os/hal/src/serial.c ****  *          to get the next byte to be transmitted.
 221:../../os/hal/src/serial.c ****  * @note    In order to gain some performance it is suggested to not use
 222:../../os/hal/src/serial.c ****  *          this function directly but copy this code directly into the
 223:../../os/hal/src/serial.c ****  *          interrupt service routine.
 224:../../os/hal/src/serial.c ****  *
 225:../../os/hal/src/serial.c ****  * @param[in] sdp       pointer to a @p SerialDriver structure
 226:../../os/hal/src/serial.c ****  * @return              The byte value read from the driver's output queue.
 227:../../os/hal/src/serial.c ****  * @retval Q_EMPTY      if the queue is empty (the lower driver usually
 228:../../os/hal/src/serial.c ****  *                      disables the interrupt source when this happens).
 229:../../os/hal/src/serial.c ****  *
 230:../../os/hal/src/serial.c ****  * @iclass
 231:../../os/hal/src/serial.c ****  */
 232:../../os/hal/src/serial.c **** msg_t sdRequestDataI(SerialDriver *sdp) {
 463               		.loc 1 232 0
 464               		.cfi_startproc
 465               	.LVL55:
 466 0132 0F93      		push r16
 467               	.LCFI13:
 468               		.cfi_def_cfa_offset 3
 469               		.cfi_offset 16, -2
 470 0134 1F93      		push r17
 471               	.LCFI14:
 472               		.cfi_def_cfa_offset 4
 473               		.cfi_offset 17, -3
 474 0136 CF93      		push r28
 475               	.LCFI15:
 476               		.cfi_def_cfa_offset 5
 477               		.cfi_offset 28, -4
 478 0138 DF93      		push r29
 479               	.LCFI16:
 480               		.cfi_def_cfa_offset 6
 481               		.cfi_offset 29, -5
 482               	/* prologue: function */
 483               	/* frame size = 0 */
 484               	/* stack size = 4 */
 485               	.L__stack_usage = 4
 486 013a 8C01      		movw r16,r24
 233:../../os/hal/src/serial.c ****   msg_t  b;
 234:../../os/hal/src/serial.c **** 
 235:../../os/hal/src/serial.c ****   chDbgCheckClassI();
 236:../../os/hal/src/serial.c ****   chDbgCheck(sdp != NULL, "sdRequestDataI");
 237:../../os/hal/src/serial.c **** 
 238:../../os/hal/src/serial.c ****   b = chOQGetI(&sdp->oqueue);
 487               		.loc 1 238 0
 488 013c 4796      		adiw r24,23
 489               	.LVL56:
 490 013e 0E94 0000 		call chOQGetI
 491               	.LVL57:
 492 0142 EC01      		movw r28,r24
 493               	.LVL58:
 239:../../os/hal/src/serial.c ****   if (b < Q_OK)
 494               		.loc 1 239 0
 495 0144 97FD      		sbrc r25,7
 496 0146 00C0      		rjmp .L21
 240:../../os/hal/src/serial.c ****     chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
 241:../../os/hal/src/serial.c ****   return b;
 242:../../os/hal/src/serial.c **** }
 497               		.loc 1 242 0
 498 0148 CE01      		movw r24,r28
 499               	/* epilogue start */
 500 014a DF91      		pop r29
 501 014c CF91      		pop r28
 502 014e 1F91      		pop r17
 503 0150 0F91      		pop r16
 504               	.LVL59:
 505 0152 0895      		ret
 506               	.LVL60:
 507               	.L21:
 240:../../os/hal/src/serial.c ****     chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
 508               		.loc 1 240 0
 509 0154 68E0      		ldi r22,lo8(8)
 510 0156 C801      		movw r24,r16
 511               	.LVL61:
 512 0158 0296      		adiw r24,2
 513 015a 0E94 0000 		call chEvtBroadcastFlagsI
 514               	.LVL62:
 515               		.loc 1 242 0
 516 015e CE01      		movw r24,r28
 517               	/* epilogue start */
 518 0160 DF91      		pop r29
 519 0162 CF91      		pop r28
 520               	.LVL63:
 521 0164 1F91      		pop r17
 522 0166 0F91      		pop r16
 523               	.LVL64:
 524 0168 0895      		ret
 525               		.cfi_endproc
 526               	.LFE20:
 528               		.section	.rodata
 531               	vmt:
 532 0000 0000      		.word	gs(write)
 533 0002 0000      		.word	gs(read)
 534 0004 0000      		.word	gs(put)
 535 0006 0000      		.word	gs(get)
 536 0008 0000      		.word	gs(putt)
 537 000a 0000      		.word	gs(gett)
 538 000c 0000      		.word	gs(writet)
 539 000e 0000      		.word	gs(readt)
 540               		.text
 541               	.Letext0:
 542               		.file 2 "/usr/local/cross/lib/gcc/avr/4.7.2/include/stddef.h"
 543               		.file 3 "/usr/local/cross/lib/gcc/avr/4.7.2/../../../../avr/include/stdint.h"
 544               		.file 4 "../../os/ports/GCC/AVR/chtypes.h"
 545               		.file 5 "../../os/kernel/include/chlists.h"
 546               		.file 6 "../../os/kernel/include/chthreads.h"
 547               		.file 7 "../../os/ports/GCC/AVR/chcore.h"
 548               		.file 8 "../../os/kernel/include/chmtx.h"
 549               		.file 9 "../../os/kernel/include/chevents.h"
 550               		.file 10 "../../os/kernel/include/chqueues.h"
 551               		.file 11 "../../os/hal/include/serial.h"
 552               		.file 12 "../../os/hal/platforms/AVR/serial_lld.h"
 553               		.file 13 "../../os/kernel/include/chschd.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 serial.c
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccI5sxaS.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccI5sxaS.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccI5sxaS.s:4      *ABS*:000000000000003f __SREG__
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccI5sxaS.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccI5sxaS.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccI5sxaS.s:11     .text:0000000000000000 readt
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccI5sxaS.s:30     .text:0000000000000006 read
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccI5sxaS.s:50     .text:0000000000000010 writet
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccI5sxaS.s:68     .text:0000000000000016 write
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccI5sxaS.s:88     .text:0000000000000020 gett
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccI5sxaS.s:106    .text:0000000000000026 get
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccI5sxaS.s:126    .text:0000000000000030 putt
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccI5sxaS.s:144    .text:0000000000000036 put
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccI5sxaS.s:165    .text:0000000000000040 sdInit
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccI5sxaS.s:181    .text:0000000000000044 sdObjectInit
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccI5sxaS.s:531    .rodata:0000000000000000 vmt
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccI5sxaS.s:271    .text:000000000000009e sdStart
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccI5sxaS.s:318    .text:00000000000000b6 sdStop
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccI5sxaS.s:378    .text:00000000000000e2 sdIncomingDataI
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccI5sxaS.s:461    .text:0000000000000132 sdRequestDataI

UNDEFINED SYMBOLS
chIQReadTimeout
chOQWriteTimeout
chIQGetTimeout
chOQPutTimeout
sd_lld_init
chIQInit
chOQInit
sd_lld_start
sd_lld_stop
chOQResetI
chIQResetI
chSchRescheduleS
chIQPutI
chEvtBroadcastFlagsI
chOQGetI
__do_copy_data
