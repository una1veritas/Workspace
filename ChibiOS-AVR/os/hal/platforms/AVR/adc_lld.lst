   1               		.file	"adc_lld.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	__vector_21
  12               	__vector_21:
  13               	.LFB15:
  14               		.file 1 "../../os/hal/platforms/AVR/adc_lld.c"
   1:../../os/hal/platforms/AVR/adc_lld.c **** /*
   2:../../os/hal/platforms/AVR/adc_lld.c ****     ChibiOS/RT - Copyright (C) 2006,2007,2008,2009,2010,
   3:../../os/hal/platforms/AVR/adc_lld.c ****                  2011,2012 Giovanni Di Sirio.
   4:../../os/hal/platforms/AVR/adc_lld.c **** 
   5:../../os/hal/platforms/AVR/adc_lld.c ****     This file is part of ChibiOS/RT.
   6:../../os/hal/platforms/AVR/adc_lld.c **** 
   7:../../os/hal/platforms/AVR/adc_lld.c ****     ChibiOS/RT is free software; you can redistribute it and/or modify
   8:../../os/hal/platforms/AVR/adc_lld.c ****     it under the terms of the GNU General Public License as published by
   9:../../os/hal/platforms/AVR/adc_lld.c ****     the Free Software Foundation; either version 3 of the License, or
  10:../../os/hal/platforms/AVR/adc_lld.c ****     (at your option) any later version.
  11:../../os/hal/platforms/AVR/adc_lld.c **** 
  12:../../os/hal/platforms/AVR/adc_lld.c ****     ChibiOS/RT is distributed in the hope that it will be useful,
  13:../../os/hal/platforms/AVR/adc_lld.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:../../os/hal/platforms/AVR/adc_lld.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:../../os/hal/platforms/AVR/adc_lld.c ****     GNU General Public License for more details.
  16:../../os/hal/platforms/AVR/adc_lld.c **** 
  17:../../os/hal/platforms/AVR/adc_lld.c ****     You should have received a copy of the GNU General Public License
  18:../../os/hal/platforms/AVR/adc_lld.c ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  19:../../os/hal/platforms/AVR/adc_lld.c **** */
  20:../../os/hal/platforms/AVR/adc_lld.c **** 
  21:../../os/hal/platforms/AVR/adc_lld.c **** /**
  22:../../os/hal/platforms/AVR/adc_lld.c ****  * @file    templates/adc_lld.c
  23:../../os/hal/platforms/AVR/adc_lld.c ****  * @brief   ADC Driver subsystem low level driver source template.
  24:../../os/hal/platforms/AVR/adc_lld.c ****  *
  25:../../os/hal/platforms/AVR/adc_lld.c ****  * @addtogroup ADC
  26:../../os/hal/platforms/AVR/adc_lld.c ****  * @{
  27:../../os/hal/platforms/AVR/adc_lld.c ****  */
  28:../../os/hal/platforms/AVR/adc_lld.c **** 
  29:../../os/hal/platforms/AVR/adc_lld.c **** #include "ch.h"
  30:../../os/hal/platforms/AVR/adc_lld.c **** #include "hal.h"
  31:../../os/hal/platforms/AVR/adc_lld.c **** 
  32:../../os/hal/platforms/AVR/adc_lld.c **** #if HAL_USE_ADC || defined(__DOXYGEN__)
  33:../../os/hal/platforms/AVR/adc_lld.c **** 
  34:../../os/hal/platforms/AVR/adc_lld.c **** /*===========================================================================*/
  35:../../os/hal/platforms/AVR/adc_lld.c **** /* Driver local definitions.                                                 */
  36:../../os/hal/platforms/AVR/adc_lld.c **** /*===========================================================================*/
  37:../../os/hal/platforms/AVR/adc_lld.c **** 
  38:../../os/hal/platforms/AVR/adc_lld.c **** /*===========================================================================*/
  39:../../os/hal/platforms/AVR/adc_lld.c **** /* Driver exported variables.                                                */
  40:../../os/hal/platforms/AVR/adc_lld.c **** /*===========================================================================*/
  41:../../os/hal/platforms/AVR/adc_lld.c **** /** @brief ADC1 driver identifier.*/
  42:../../os/hal/platforms/AVR/adc_lld.c **** #if AVR_ADC_USE_ADC1 || defined(__DOXYGEN__)
  43:../../os/hal/platforms/AVR/adc_lld.c **** ADCDriver ADCD1;
  44:../../os/hal/platforms/AVR/adc_lld.c **** #endif
  45:../../os/hal/platforms/AVR/adc_lld.c **** /*===========================================================================*/
  46:../../os/hal/platforms/AVR/adc_lld.c **** /* Driver local variables.                                                   */
  47:../../os/hal/platforms/AVR/adc_lld.c **** /*===========================================================================*/
  48:../../os/hal/platforms/AVR/adc_lld.c **** 
  49:../../os/hal/platforms/AVR/adc_lld.c **** /*===========================================================================*/
  50:../../os/hal/platforms/AVR/adc_lld.c **** /* Driver local functions.                                                   */
  51:../../os/hal/platforms/AVR/adc_lld.c **** /*===========================================================================*/
  52:../../os/hal/platforms/AVR/adc_lld.c **** 
  53:../../os/hal/platforms/AVR/adc_lld.c **** static size_t getAdcChannelNumberFromMask(uint8_t mask, uint8_t currentChannel)
  54:../../os/hal/platforms/AVR/adc_lld.c **** {
  55:../../os/hal/platforms/AVR/adc_lld.c ****      for(uint8_t i = 0; mask>0; i++)
  56:../../os/hal/platforms/AVR/adc_lld.c ****      {
  57:../../os/hal/platforms/AVR/adc_lld.c **** 	if(mask & 0x01)
  58:../../os/hal/platforms/AVR/adc_lld.c **** 	  {
  59:../../os/hal/platforms/AVR/adc_lld.c **** 	      if(!currentChannel)
  60:../../os/hal/platforms/AVR/adc_lld.c **** 		return i;
  61:../../os/hal/platforms/AVR/adc_lld.c **** 	      currentChannel--;
  62:../../os/hal/platforms/AVR/adc_lld.c **** 	  }
  63:../../os/hal/platforms/AVR/adc_lld.c ****         mask >>= 1;
  64:../../os/hal/platforms/AVR/adc_lld.c ****     }
  65:../../os/hal/platforms/AVR/adc_lld.c ****      
  66:../../os/hal/platforms/AVR/adc_lld.c ****      /* error, should never reach this line */
  67:../../os/hal/platforms/AVR/adc_lld.c **** }
  68:../../os/hal/platforms/AVR/adc_lld.c **** 
  69:../../os/hal/platforms/AVR/adc_lld.c **** static void setAdcChannel(uint8_t channelNum)
  70:../../os/hal/platforms/AVR/adc_lld.c **** {
  71:../../os/hal/platforms/AVR/adc_lld.c **** 	ADMUX = (ADMUX & 0xf8) | (channelNum & 0x07);
  72:../../os/hal/platforms/AVR/adc_lld.c **** }
  73:../../os/hal/platforms/AVR/adc_lld.c **** /*===========================================================================*/
  74:../../os/hal/platforms/AVR/adc_lld.c **** /* Driver interrupt handlers.                                                */
  75:../../os/hal/platforms/AVR/adc_lld.c **** /*===========================================================================*/
  76:../../os/hal/platforms/AVR/adc_lld.c **** 
  77:../../os/hal/platforms/AVR/adc_lld.c **** #include <util/delay.h>
  78:../../os/hal/platforms/AVR/adc_lld.c **** 
  79:../../os/hal/platforms/AVR/adc_lld.c **** CH_IRQ_HANDLER(ADC_vect) {
  15               		.loc 1 79 0
  16               		.cfi_startproc
  17 0000 1F92      		push r1
  18               	.LCFI0:
  19               		.cfi_def_cfa_offset 3
  20               		.cfi_offset 1, -2
  21 0002 0F92      		push r0
  22               	.LCFI1:
  23               		.cfi_def_cfa_offset 4
  24               		.cfi_offset 0, -3
  25 0004 0FB6      		in r0,__SREG__
  26 0006 0F92      		push r0
  27 0008 1124      		clr __zero_reg__
  28 000a AF92      		push r10
  29               	.LCFI2:
  30               		.cfi_def_cfa_offset 5
  31               		.cfi_offset 10, -4
  32 000c BF92      		push r11
  33               	.LCFI3:
  34               		.cfi_def_cfa_offset 6
  35               		.cfi_offset 11, -5
  36 000e CF92      		push r12
  37               	.LCFI4:
  38               		.cfi_def_cfa_offset 7
  39               		.cfi_offset 12, -6
  40 0010 DF92      		push r13
  41               	.LCFI5:
  42               		.cfi_def_cfa_offset 8
  43               		.cfi_offset 13, -7
  44 0012 EF92      		push r14
  45               	.LCFI6:
  46               		.cfi_def_cfa_offset 9
  47               		.cfi_offset 14, -8
  48 0014 FF92      		push r15
  49               	.LCFI7:
  50               		.cfi_def_cfa_offset 10
  51               		.cfi_offset 15, -9
  52 0016 0F93      		push r16
  53               	.LCFI8:
  54               		.cfi_def_cfa_offset 11
  55               		.cfi_offset 16, -10
  56 0018 1F93      		push r17
  57               	.LCFI9:
  58               		.cfi_def_cfa_offset 12
  59               		.cfi_offset 17, -11
  60 001a 2F93      		push r18
  61               	.LCFI10:
  62               		.cfi_def_cfa_offset 13
  63               		.cfi_offset 18, -12
  64 001c 3F93      		push r19
  65               	.LCFI11:
  66               		.cfi_def_cfa_offset 14
  67               		.cfi_offset 19, -13
  68 001e 4F93      		push r20
  69               	.LCFI12:
  70               		.cfi_def_cfa_offset 15
  71               		.cfi_offset 20, -14
  72 0020 5F93      		push r21
  73               	.LCFI13:
  74               		.cfi_def_cfa_offset 16
  75               		.cfi_offset 21, -15
  76 0022 6F93      		push r22
  77               	.LCFI14:
  78               		.cfi_def_cfa_offset 17
  79               		.cfi_offset 22, -16
  80 0024 7F93      		push r23
  81               	.LCFI15:
  82               		.cfi_def_cfa_offset 18
  83               		.cfi_offset 23, -17
  84 0026 8F93      		push r24
  85               	.LCFI16:
  86               		.cfi_def_cfa_offset 19
  87               		.cfi_offset 24, -18
  88 0028 9F93      		push r25
  89               	.LCFI17:
  90               		.cfi_def_cfa_offset 20
  91               		.cfi_offset 25, -19
  92 002a AF93      		push r26
  93               	.LCFI18:
  94               		.cfi_def_cfa_offset 21
  95               		.cfi_offset 26, -20
  96 002c BF93      		push r27
  97               	.LCFI19:
  98               		.cfi_def_cfa_offset 22
  99               		.cfi_offset 27, -21
 100 002e CF93      		push r28
 101               	.LCFI20:
 102               		.cfi_def_cfa_offset 23
 103               		.cfi_offset 28, -22
 104 0030 DF93      		push r29
 105               	.LCFI21:
 106               		.cfi_def_cfa_offset 24
 107               		.cfi_offset 29, -23
 108 0032 EF93      		push r30
 109               	.LCFI22:
 110               		.cfi_def_cfa_offset 25
 111               		.cfi_offset 30, -24
 112 0034 FF93      		push r31
 113               	.LCFI23:
 114               		.cfi_def_cfa_offset 26
 115               		.cfi_offset 31, -25
 116               	/* prologue: Signal */
 117               	/* frame size = 0 */
 118               	/* stack size = 25 */
 119               	.L__stack_usage = 25
  80:../../os/hal/platforms/AVR/adc_lld.c ****  
  81:../../os/hal/platforms/AVR/adc_lld.c ****   CH_IRQ_PROLOGUE();
 120               		.loc 1 81 0
  82:../../os/hal/platforms/AVR/adc_lld.c **** 	uint8_t low = ADCL;
 121               		.loc 1 82 0
 122 0036 2091 7800 		lds r18,120
 123               	.LVL0:
  83:../../os/hal/platforms/AVR/adc_lld.c **** 	uint8_t high = ADCH;
 124               		.loc 1 83 0
 125 003a 3091 7900 		lds r19,121
 126               	.LVL1:
  84:../../os/hal/platforms/AVR/adc_lld.c **** 	uint16_t result = (high << 8) | low;
  85:../../os/hal/platforms/AVR/adc_lld.c **** 	
  86:../../os/hal/platforms/AVR/adc_lld.c **** 	ADCD1.samples[ADCD1.currentBufferPosition] = result;
 127               		.loc 1 86 0
 128 003e E090 0000 		lds r14,ADCD1+3
 129 0042 F090 0000 		lds r15,ADCD1+3+1
 130 0046 E091 0000 		lds r30,ADCD1+19
 131 004a F091 0000 		lds r31,ADCD1+19+1
 132 004e EE0F      		lsl r30
 133 0050 FF1F      		rol r31
 134 0052 EE0D      		add r30,r14
 135 0054 FF1D      		adc r31,r15
  84:../../os/hal/platforms/AVR/adc_lld.c **** 	uint16_t result = (high << 8) | low;
 136               		.loc 1 84 0
 137 0056 932F      		mov r25,r19
 138 0058 80E0      		ldi r24,0
 139 005a 822B      		or r24,r18
 140               		.loc 1 86 0
 141 005c 9183      		std Z+1,r25
 142 005e 8083      		st Z,r24
  87:../../os/hal/platforms/AVR/adc_lld.c **** 	ADCD1.currentBufferPosition++;
 143               		.loc 1 87 0
 144 0060 2091 0000 		lds r18,ADCD1+19
 145 0064 3091 0000 		lds r19,ADCD1+19+1
 146               	.LVL2:
 147 0068 2F5F      		subi r18,-1
 148 006a 3F4F      		sbci r19,-1
 149 006c 3093 0000 		sts ADCD1+19+1,r19
 150 0070 2093 0000 		sts ADCD1+19,r18
  88:../../os/hal/platforms/AVR/adc_lld.c **** 	
  89:../../os/hal/platforms/AVR/adc_lld.c **** 	size_t bufferSize = ADCD1.depth * ADCD1.grpp->num_channels;
 151               		.loc 1 89 0
 152 0074 E091 0000 		lds r30,ADCD1+5
 153 0078 F091 0000 		lds r31,ADCD1+5+1
 154 007c C091 0000 		lds r28,ADCD1+7
 155 0080 D091 0000 		lds r29,ADCD1+7+1
 156 0084 6981      		ldd r22,Y+1
 157 0086 7A81      		ldd r23,Y+2
 158 0088 6E9F      		mul r22,r30
 159 008a 6001      		movw r12,r0
 160 008c 6F9F      		mul r22,r31
 161 008e D00C      		add r13,r0
 162 0090 7E9F      		mul r23,r30
 163 0092 D00C      		add r13,r0
 164 0094 1124      		clr r1
 165               	.LVL3:
  90:../../os/hal/platforms/AVR/adc_lld.c **** 	size_t currentChannel = ADCD1.currentBufferPosition % ADCD1.grpp->num_channels;
 166               		.loc 1 90 0
 167 0096 C901      		movw r24,r18
 168 0098 0E94 0000 		call __udivmodhi4
 169 009c 5C01      		movw r10,r24
 170               	.LVL4:
  91:../../os/hal/platforms/AVR/adc_lld.c **** 	size_t currentIteration = ADCD1.currentBufferPosition / ADCD1.grpp->num_channels;
  92:../../os/hal/platforms/AVR/adc_lld.c **** 	if(ADCD1.grpp-> circular && currentChannel == 0 && currentIteration == ADCD1.depth/2)
 171               		.loc 1 92 0
 172 009e 8881      		ld r24,Y
 173 00a0 8823      		tst r24
 174 00a2 01F0      		breq .L2
 175               		.loc 1 92 0 is_stmt 0 discriminator 1
 176 00a4 A114      		cp r10,__zero_reg__
 177 00a6 B104      		cpc r11,__zero_reg__
 178 00a8 01F4      		brne .+2
 179 00aa 00C0      		rjmp .L38
 180               	.LVL5:
 181               	.L2:
  93:../../os/hal/platforms/AVR/adc_lld.c **** 	{
  94:../../os/hal/platforms/AVR/adc_lld.c **** 	  _adc_isr_half_code(&ADCD1);
  95:../../os/hal/platforms/AVR/adc_lld.c **** 	  
  96:../../os/hal/platforms/AVR/adc_lld.c **** 	}
  97:../../os/hal/platforms/AVR/adc_lld.c **** 	
  98:../../os/hal/platforms/AVR/adc_lld.c **** 	if(ADCD1.currentBufferPosition == bufferSize)
 182               		.loc 1 98 0 is_stmt 1
 183 00ac C216      		cp r12,r18
 184 00ae D306      		cpc r13,r19
 185 00b0 01F4      		brne .+2
 186 00b2 00C0      		rjmp .L39
  99:../../os/hal/platforms/AVR/adc_lld.c **** 	{
 100:../../os/hal/platforms/AVR/adc_lld.c **** 	  _adc_isr_full_code(&ADCD1);
 101:../../os/hal/platforms/AVR/adc_lld.c **** 	}
 102:../../os/hal/platforms/AVR/adc_lld.c **** 	else
 103:../../os/hal/platforms/AVR/adc_lld.c **** 	{
 104:../../os/hal/platforms/AVR/adc_lld.c **** 	  
 105:../../os/hal/platforms/AVR/adc_lld.c **** 	  setAdcChannel(getAdcChannelNumberFromMask(ADCD1.grpp->channelsMask,currentChannel));
 187               		.loc 1 105 0
 188 00b4 8D81      		ldd r24,Y+5
 189               	.LVL6:
 190               	.LBB17:
 191               	.LBB18:
  55:../../os/hal/platforms/AVR/adc_lld.c ****      for(uint8_t i = 0; mask>0; i++)
 192               		.loc 1 55 0
 193 00b6 8823      		tst r24
 194 00b8 01F0      		breq .L13
 195 00ba 90E0      		ldi r25,0
 196               	.LVL7:
 197               	.L16:
  57:../../os/hal/platforms/AVR/adc_lld.c **** 	if(mask & 0x01)
 198               		.loc 1 57 0
 199 00bc 80FF      		sbrs r24,0
 200 00be 00C0      		rjmp .L14
  59:../../os/hal/platforms/AVR/adc_lld.c **** 	      if(!currentChannel)
 201               		.loc 1 59 0
 202 00c0 AA20      		tst r10
 203 00c2 01F4      		brne .+2
 204 00c4 00C0      		rjmp .L40
  61:../../os/hal/platforms/AVR/adc_lld.c **** 	      currentChannel--;
 205               		.loc 1 61 0
 206 00c6 AA94      		dec r10
 207               	.LVL8:
 208               	.L14:
  63:../../os/hal/platforms/AVR/adc_lld.c ****         mask >>= 1;
 209               		.loc 1 63 0
 210 00c8 8695      		lsr r24
 211               	.LVL9:
  55:../../os/hal/platforms/AVR/adc_lld.c ****      for(uint8_t i = 0; mask>0; i++)
 212               		.loc 1 55 0
 213 00ca 9F5F      		subi r25,lo8(-(1))
 214               	.LVL10:
 215 00cc 8111      		cpse r24,__zero_reg__
 216 00ce 00C0      		rjmp .L16
 217               	.LVL11:
 218               	.L13:
 219               	.LBE18:
 220               	.LBE17:
 221               	.LBB20:
 222               	.LBB21:
  71:../../os/hal/platforms/AVR/adc_lld.c **** 	ADMUX = (ADMUX & 0xf8) | (channelNum & 0x07);
 223               		.loc 1 71 0
 224 00d0 8091 7C00 		lds r24,124
 225               	.LVL12:
 226 00d4 0770      		andi r16,7
 227 00d6 1127      		clr r17
 228               	.LVL13:
 229 00d8 887F      		andi r24,lo8(-8)
 230 00da 802B      		or r24,r16
 231 00dc 8093 7C00 		sts 124,r24
 232               	.LBE21:
 233               	.LBE20:
 106:../../os/hal/platforms/AVR/adc_lld.c **** 	  ADCSRA |= 1<<ADSC;
 234               		.loc 1 106 0
 235 00e0 8091 7A00 		lds r24,122
 236 00e4 8064      		ori r24,lo8(64)
 237 00e6 8093 7A00 		sts 122,r24
 238               	.LVL14:
 239               	.L6:
 107:../../os/hal/platforms/AVR/adc_lld.c **** 	}
 108:../../os/hal/platforms/AVR/adc_lld.c ****  
 109:../../os/hal/platforms/AVR/adc_lld.c ****   CH_IRQ_EPILOGUE();
 240               		.loc 1 109 0
 241 00ea 0E94 0000 		call chSchIsPreemptionRequired
 242               	.LVL15:
 243 00ee 8111      		cpse r24,__zero_reg__
 244               		.loc 1 109 0 is_stmt 0 discriminator 1
 245 00f0 0E94 0000 		call chSchDoReschedule
 246               	.LVL16:
 247               	.L1:
 248               	/* epilogue start */
 110:../../os/hal/platforms/AVR/adc_lld.c **** }
 249               		.loc 1 110 0 is_stmt 1
 250 00f4 FF91      		pop r31
 251 00f6 EF91      		pop r30
 252 00f8 DF91      		pop r29
 253 00fa CF91      		pop r28
 254 00fc BF91      		pop r27
 255 00fe AF91      		pop r26
 256 0100 9F91      		pop r25
 257 0102 8F91      		pop r24
 258 0104 7F91      		pop r23
 259 0106 6F91      		pop r22
 260 0108 5F91      		pop r21
 261 010a 4F91      		pop r20
 262 010c 3F91      		pop r19
 263 010e 2F91      		pop r18
 264 0110 1F91      		pop r17
 265 0112 0F91      		pop r16
 266 0114 FF90      		pop r15
 267 0116 EF90      		pop r14
 268 0118 DF90      		pop r13
 269 011a CF90      		pop r12
 270               	.LVL17:
 271 011c BF90      		pop r11
 272 011e AF90      		pop r10
 273 0120 0F90      		pop r0
 274 0122 0FBE      		out __SREG__,r0
 275 0124 0F90      		pop r0
 276 0126 1F90      		pop r1
 277 0128 1895      		reti
 278               	.LVL18:
 279               	.L38:
  92:../../os/hal/platforms/AVR/adc_lld.c **** 	if(ADCD1.grpp-> circular && currentChannel == 0 && currentIteration == ADCD1.depth/2)
 280               		.loc 1 92 0 discriminator 1
 281 012a AF01      		movw r20,r30
 282 012c 5695      		lsr r21
 283 012e 4795      		ror r20
 284 0130 4617      		cp r20,r22
 285 0132 5707      		cpc r21,r23
 286 0134 01F0      		breq .+2
 287 0136 00C0      		rjmp .L2
  94:../../os/hal/platforms/AVR/adc_lld.c **** 	  _adc_isr_half_code(&ADCD1);
 288               		.loc 1 94 0
 289 0138 EB81      		ldd r30,Y+3
 290 013a FC81      		ldd r31,Y+4
 291 013c 3097      		sbiw r30,0
 292 013e 01F4      		brne .+2
 293 0140 00C0      		rjmp .L2
  94:../../os/hal/platforms/AVR/adc_lld.c **** 	  _adc_isr_half_code(&ADCD1);
 294               		.loc 1 94 0 is_stmt 0 discriminator 1
 295 0142 B701      		movw r22,r14
 296 0144 80E0      		ldi r24,lo8(ADCD1)
 297 0146 90E0      		ldi r25,hi8(ADCD1)
 298 0148 0995      		icall
 299               	.LVL19:
 300 014a 2091 0000 		lds r18,ADCD1+19
 301 014e 3091 0000 		lds r19,ADCD1+19+1
 302 0152 C091 0000 		lds r28,ADCD1+7
 303 0156 D091 0000 		lds r29,ADCD1+7+1
 304 015a 00C0      		rjmp .L2
 305               	.L39:
 100:../../os/hal/platforms/AVR/adc_lld.c **** 	  _adc_isr_full_code(&ADCD1);
 306               		.loc 1 100 0 is_stmt 1
 307 015c 8881      		ld r24,Y
 308 015e 8111      		cpse r24,__zero_reg__
 309 0160 00C0      		rjmp .L41
 310               	.LVL20:
 311               	.LBB22:
 312               	.LBB23:
 111:../../os/hal/platforms/AVR/adc_lld.c **** 
 112:../../os/hal/platforms/AVR/adc_lld.c **** /*===========================================================================*/
 113:../../os/hal/platforms/AVR/adc_lld.c **** /* Driver exported functions.                                                */
 114:../../os/hal/platforms/AVR/adc_lld.c **** /*===========================================================================*/
 115:../../os/hal/platforms/AVR/adc_lld.c **** 
 116:../../os/hal/platforms/AVR/adc_lld.c **** /**
 117:../../os/hal/platforms/AVR/adc_lld.c ****  * @brief   Low level ADC driver initialization.
 118:../../os/hal/platforms/AVR/adc_lld.c ****  *
 119:../../os/hal/platforms/AVR/adc_lld.c ****  * @notapi
 120:../../os/hal/platforms/AVR/adc_lld.c ****  */
 121:../../os/hal/platforms/AVR/adc_lld.c **** void adc_lld_init(void) {
 122:../../os/hal/platforms/AVR/adc_lld.c ****     adcObjectInit(&ADCD1);
 123:../../os/hal/platforms/AVR/adc_lld.c ****     ADCSRA =(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0) |   //prescaler 128, unico valore possibile a 20Mhz
 124:../../os/hal/platforms/AVR/adc_lld.c **** 	     (1<<ADIE) ; 	//interrupt
 125:../../os/hal/platforms/AVR/adc_lld.c **** 
 126:../../os/hal/platforms/AVR/adc_lld.c ****     ADCSRB=0; //single shot
 127:../../os/hal/platforms/AVR/adc_lld.c ****     ADMUX=(0<<REFS1)| (0<<REFS0); //uso aref, vale solo per arduino. arduino ha aref collegato
 128:../../os/hal/platforms/AVR/adc_lld.c **** }
 129:../../os/hal/platforms/AVR/adc_lld.c **** 
 130:../../os/hal/platforms/AVR/adc_lld.c **** /**
 131:../../os/hal/platforms/AVR/adc_lld.c ****  * @brief   Configures and activates the ADC peripheral.
 132:../../os/hal/platforms/AVR/adc_lld.c ****  *
 133:../../os/hal/platforms/AVR/adc_lld.c ****  * @param[in] adcp      pointer to the @p ADCDriver object
 134:../../os/hal/platforms/AVR/adc_lld.c ****  *
 135:../../os/hal/platforms/AVR/adc_lld.c ****  * @notapi
 136:../../os/hal/platforms/AVR/adc_lld.c ****  */
 137:../../os/hal/platforms/AVR/adc_lld.c **** void adc_lld_start(ADCDriver *adcp) {
 138:../../os/hal/platforms/AVR/adc_lld.c **** 
 139:../../os/hal/platforms/AVR/adc_lld.c ****   if (adcp->state == ADC_STOP) {
 140:../../os/hal/platforms/AVR/adc_lld.c ****     /* Clock activation.*/
 141:../../os/hal/platforms/AVR/adc_lld.c ****     ADCSRA |= (1<<ADEN);
 142:../../os/hal/platforms/AVR/adc_lld.c ****   }
 143:../../os/hal/platforms/AVR/adc_lld.c ****   
 144:../../os/hal/platforms/AVR/adc_lld.c ****   if (adcp->config != NULL)    
 145:../../os/hal/platforms/AVR/adc_lld.c ****   {
 146:../../os/hal/platforms/AVR/adc_lld.c ****       ADMUX = (adcp->config->analog_reference << REFS0);
 147:../../os/hal/platforms/AVR/adc_lld.c ****   }
 148:../../os/hal/platforms/AVR/adc_lld.c **** }
 149:../../os/hal/platforms/AVR/adc_lld.c **** 
 150:../../os/hal/platforms/AVR/adc_lld.c **** /**
 151:../../os/hal/platforms/AVR/adc_lld.c ****  * @brief   Deactivates the ADC peripheral.
 152:../../os/hal/platforms/AVR/adc_lld.c ****  *
 153:../../os/hal/platforms/AVR/adc_lld.c ****  * @param[in] adcp      pointer to the @p ADCDriver object
 154:../../os/hal/platforms/AVR/adc_lld.c ****  *
 155:../../os/hal/platforms/AVR/adc_lld.c ****  * @notapi
 156:../../os/hal/platforms/AVR/adc_lld.c ****  */
 157:../../os/hal/platforms/AVR/adc_lld.c **** void adc_lld_stop(ADCDriver *adcp) {
 158:../../os/hal/platforms/AVR/adc_lld.c **** 
 159:../../os/hal/platforms/AVR/adc_lld.c ****   if (adcp->state == ADC_READY) {
 160:../../os/hal/platforms/AVR/adc_lld.c ****     /* Clock de-activation.*/
 161:../../os/hal/platforms/AVR/adc_lld.c ****     ADCSRA &= ~(1<<ADEN);  
 162:../../os/hal/platforms/AVR/adc_lld.c ****   }
 163:../../os/hal/platforms/AVR/adc_lld.c **** }
 164:../../os/hal/platforms/AVR/adc_lld.c **** 
 165:../../os/hal/platforms/AVR/adc_lld.c **** /**
 166:../../os/hal/platforms/AVR/adc_lld.c ****  * @brief   Starts an ADC conversion.
 167:../../os/hal/platforms/AVR/adc_lld.c ****  *
 168:../../os/hal/platforms/AVR/adc_lld.c ****  * @param[in] adcp      pointer to the @p ADCDriver object
 169:../../os/hal/platforms/AVR/adc_lld.c ****  *
 170:../../os/hal/platforms/AVR/adc_lld.c ****  * @notapi
 171:../../os/hal/platforms/AVR/adc_lld.c ****  */
 172:../../os/hal/platforms/AVR/adc_lld.c **** void adc_lld_start_conversion(ADCDriver *adcp) {
 173:../../os/hal/platforms/AVR/adc_lld.c **** 	adcp->currentBufferPosition=0;
 174:../../os/hal/platforms/AVR/adc_lld.c **** 	
 175:../../os/hal/platforms/AVR/adc_lld.c **** 	setAdcChannel(getAdcChannelNumberFromMask(adcp->grpp->channelsMask,0));
 176:../../os/hal/platforms/AVR/adc_lld.c **** 	ADCSRA |= 1<<ADSC;
 177:../../os/hal/platforms/AVR/adc_lld.c **** }
 178:../../os/hal/platforms/AVR/adc_lld.c **** 
 179:../../os/hal/platforms/AVR/adc_lld.c **** /**
 180:../../os/hal/platforms/AVR/adc_lld.c ****  * @brief   Stops an ongoing conversion.
 181:../../os/hal/platforms/AVR/adc_lld.c ****  *
 182:../../os/hal/platforms/AVR/adc_lld.c ****  * @param[in] adcp      pointer to the @p ADCDriver object
 183:../../os/hal/platforms/AVR/adc_lld.c ****  *
 184:../../os/hal/platforms/AVR/adc_lld.c ****  * @notapi
 185:../../os/hal/platforms/AVR/adc_lld.c ****  */
 186:../../os/hal/platforms/AVR/adc_lld.c **** void adc_lld_stop_conversion(ADCDriver *adcp) {
 187:../../os/hal/platforms/AVR/adc_lld.c ****     ADCSRA &= ~(1<<ADSC);
 313               		.loc 1 187 0
 314 0162 8091 7A00 		lds r24,122
 315 0166 8F7B      		andi r24,lo8(-65)
 316 0168 8093 7A00 		sts 122,r24
 317               	.LBE23:
 318               	.LBE22:
 100:../../os/hal/platforms/AVR/adc_lld.c **** 	  _adc_isr_full_code(&ADCD1);
 319               		.loc 1 100 0
 320 016c EB81      		ldd r30,Y+3
 321 016e FC81      		ldd r31,Y+4
 322 0170 3097      		sbiw r30,0
 323 0172 01F4      		brne .+2
 324 0174 00C0      		rjmp .L8
 100:../../os/hal/platforms/AVR/adc_lld.c **** 	  _adc_isr_full_code(&ADCD1);
 325               		.loc 1 100 0 is_stmt 0 discriminator 6
 326 0176 84E0      		ldi r24,lo8(4)
 327 0178 8093 0000 		sts ADCD1,r24
 328 017c 4091 0000 		lds r20,ADCD1+5
 329 0180 5091 0000 		lds r21,ADCD1+5+1
 330 0184 4230      		cpi r20,2
 331 0186 5105      		cpc r21,__zero_reg__
 332 0188 00F4      		brsh .+2
 333 018a 00C0      		rjmp .L9
 334               	.LBB24:
 100:../../os/hal/platforms/AVR/adc_lld.c **** 	  _adc_isr_full_code(&ADCD1);
 335               		.loc 1 100 0 discriminator 8
 336 018c 5695      		lsr r21
 337 018e 4795      		ror r20
 338               	.LVL21:
 339 0190 8981      		ldd r24,Y+1
 340 0192 9A81      		ldd r25,Y+2
 341 0194 880F      		lsl r24
 342 0196 991F      		rol r25
 343 0198 849F      		mul r24,r20
 344 019a 9001      		movw r18,r0
 345 019c 859F      		mul r24,r21
 346 019e 300D      		add r19,r0
 347 01a0 949F      		mul r25,r20
 348 01a2 300D      		add r19,r0
 349 01a4 1124      		clr r1
 350 01a6 6091 0000 		lds r22,ADCD1+3
 351 01aa 7091 0000 		lds r23,ADCD1+3+1
 352 01ae 620F      		add r22,r18
 353 01b0 731F      		adc r23,r19
 354 01b2 80E0      		ldi r24,lo8(ADCD1)
 355 01b4 90E0      		ldi r25,hi8(ADCD1)
 356 01b6 0995      		icall
 357               	.LVL22:
 358               	.L10:
 359               	.LBE24:
 100:../../os/hal/platforms/AVR/adc_lld.c **** 	  _adc_isr_full_code(&ADCD1);
 360               		.loc 1 100 0 discriminator 10
 361 01b8 8091 0000 		lds r24,ADCD1
 362 01bc 8430      		cpi r24,lo8(4)
 363 01be 01F0      		breq .L8
 364               	.L11:
 100:../../os/hal/platforms/AVR/adc_lld.c **** 	  _adc_isr_full_code(&ADCD1);
 365               		.loc 1 100 0 discriminator 12
 366 01c0 1092 0000 		sts ADCD1+7+1,__zero_reg__
 367 01c4 1092 0000 		sts ADCD1+7,__zero_reg__
 368 01c8 8091 0000 		lds r24,ADCD1+9
 369 01cc 9091 0000 		lds r25,ADCD1+9+1
 370 01d0 0097      		sbiw r24,0
 371 01d2 01F4      		brne .+2
 372 01d4 00C0      		rjmp .L6
 373               	.LVL23:
 374               	.LBB25:
 100:../../os/hal/platforms/AVR/adc_lld.c **** 	  _adc_isr_full_code(&ADCD1);
 375               		.loc 1 100 0 discriminator 13
 376 01d6 1092 0000 		sts ADCD1+9+1,__zero_reg__
 377 01da 1092 0000 		sts ADCD1+9,__zero_reg__
 378 01de FC01      		movw r30,r24
 379 01e0 138A      		std Z+19,__zero_reg__
 380 01e2 128A      		std Z+18,__zero_reg__
 381 01e4 0E94 0000 		call chSchReadyI
 382               	.LVL24:
 383 01e8 00C0      		rjmp .L6
 384               	.LVL25:
 385               	.L40:
 386               	.LBE25:
 387               	.LBB26:
 388               	.LBB19:
  60:../../os/hal/platforms/AVR/adc_lld.c **** 		return i;
 389               		.loc 1 60 0 is_stmt 1
 390 01ea 092F      		mov r16,r25
 391 01ec 10E0      		ldi r17,0
 392 01ee 00C0      		rjmp .L13
 393               	.LVL26:
 394               	.L41:
 395               	.LBE19:
 396               	.LBE26:
 100:../../os/hal/platforms/AVR/adc_lld.c **** 	  _adc_isr_full_code(&ADCD1);
 397               		.loc 1 100 0 discriminator 1
 398 01f0 EB81      		ldd r30,Y+3
 399 01f2 FC81      		ldd r31,Y+4
 400 01f4 3097      		sbiw r30,0
 401 01f6 01F4      		brne .+2
 402 01f8 00C0      		rjmp .L6
 100:../../os/hal/platforms/AVR/adc_lld.c **** 	  _adc_isr_full_code(&ADCD1);
 403               		.loc 1 100 0 is_stmt 0 discriminator 3
 404 01fa 4091 0000 		lds r20,ADCD1+5
 405 01fe 5091 0000 		lds r21,ADCD1+5+1
 406 0202 4230      		cpi r20,2
 407 0204 5105      		cpc r21,__zero_reg__
 408 0206 00F0      		brlo .L7
 409               	.LBB27:
 100:../../os/hal/platforms/AVR/adc_lld.c **** 	  _adc_isr_full_code(&ADCD1);
 410               		.loc 1 100 0 discriminator 4
 411 0208 5695      		lsr r21
 412 020a 4795      		ror r20
 413               	.LVL27:
 414 020c 8981      		ldd r24,Y+1
 415 020e 9A81      		ldd r25,Y+2
 416 0210 880F      		lsl r24
 417 0212 991F      		rol r25
 418 0214 849F      		mul r24,r20
 419 0216 9001      		movw r18,r0
 420 0218 859F      		mul r24,r21
 421 021a 300D      		add r19,r0
 422 021c 949F      		mul r25,r20
 423 021e 300D      		add r19,r0
 424 0220 1124      		clr r1
 425 0222 6091 0000 		lds r22,ADCD1+3
 426 0226 7091 0000 		lds r23,ADCD1+3+1
 427 022a 620F      		add r22,r18
 428 022c 731F      		adc r23,r19
 429 022e 80E0      		ldi r24,lo8(ADCD1)
 430 0230 90E0      		ldi r25,hi8(ADCD1)
 431 0232 0995      		icall
 432               	.LVL28:
 433 0234 00C0      		rjmp .L6
 434               	.LVL29:
 435               	.L8:
 436               	.LBE27:
 100:../../os/hal/platforms/AVR/adc_lld.c **** 	  _adc_isr_full_code(&ADCD1);
 437               		.loc 1 100 0 discriminator 7
 438 0236 82E0      		ldi r24,lo8(2)
 439 0238 8093 0000 		sts ADCD1,r24
 440 023c 00C0      		rjmp .L11
 441               	.LVL30:
 442               	.L7:
 100:../../os/hal/platforms/AVR/adc_lld.c **** 	  _adc_isr_full_code(&ADCD1);
 443               		.loc 1 100 0 discriminator 5
 444 023e 6091 0000 		lds r22,ADCD1+3
 445 0242 7091 0000 		lds r23,ADCD1+3+1
 446 0246 80E0      		ldi r24,lo8(ADCD1)
 447 0248 90E0      		ldi r25,hi8(ADCD1)
 448 024a 0995      		icall
 449               	.LVL31:
 450 024c 00C0      		rjmp .L6
 451               	.LVL32:
 452               	.L9:
 100:../../os/hal/platforms/AVR/adc_lld.c **** 	  _adc_isr_full_code(&ADCD1);
 453               		.loc 1 100 0 discriminator 9
 454 024e 6091 0000 		lds r22,ADCD1+3
 455 0252 7091 0000 		lds r23,ADCD1+3+1
 456 0256 80E0      		ldi r24,lo8(ADCD1)
 457 0258 90E0      		ldi r25,hi8(ADCD1)
 458 025a 0995      		icall
 459               	.LVL33:
 460 025c 00C0      		rjmp .L10
 461               		.cfi_endproc
 462               	.LFE15:
 464               	.global	adc_lld_init
 466               	adc_lld_init:
 467               	.LFB16:
 121:../../os/hal/platforms/AVR/adc_lld.c **** void adc_lld_init(void) {
 468               		.loc 1 121 0 is_stmt 1
 469               		.cfi_startproc
 470               	/* prologue: function */
 471               	/* frame size = 0 */
 472               	/* stack size = 0 */
 473               	.L__stack_usage = 0
 122:../../os/hal/platforms/AVR/adc_lld.c ****     adcObjectInit(&ADCD1);
 474               		.loc 1 122 0
 475 025e 80E0      		ldi r24,lo8(ADCD1)
 476 0260 90E0      		ldi r25,hi8(ADCD1)
 477 0262 0E94 0000 		call adcObjectInit
 478               	.LVL34:
 123:../../os/hal/platforms/AVR/adc_lld.c ****     ADCSRA =(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0) |   //prescaler 128, unico valore possibile a 20Mhz
 479               		.loc 1 123 0
 480 0266 8FE0      		ldi r24,lo8(15)
 481 0268 8093 7A00 		sts 122,r24
 126:../../os/hal/platforms/AVR/adc_lld.c ****     ADCSRB=0; //single shot
 482               		.loc 1 126 0
 483 026c 1092 7B00 		sts 123,__zero_reg__
 127:../../os/hal/platforms/AVR/adc_lld.c ****     ADMUX=(0<<REFS1)| (0<<REFS0); //uso aref, vale solo per arduino. arduino ha aref collegato
 484               		.loc 1 127 0
 485 0270 1092 7C00 		sts 124,__zero_reg__
 486 0274 0895      		ret
 487               		.cfi_endproc
 488               	.LFE16:
 490               	.global	adc_lld_start
 492               	adc_lld_start:
 493               	.LFB17:
 137:../../os/hal/platforms/AVR/adc_lld.c **** void adc_lld_start(ADCDriver *adcp) {
 494               		.loc 1 137 0
 495               		.cfi_startproc
 496               	.LVL35:
 497               	/* prologue: function */
 498               	/* frame size = 0 */
 499               	/* stack size = 0 */
 500               	.L__stack_usage = 0
 139:../../os/hal/platforms/AVR/adc_lld.c ****   if (adcp->state == ADC_STOP) {
 501               		.loc 1 139 0
 502 0276 DC01      		movw r26,r24
 503 0278 2C91      		ld r18,X
 504 027a 2130      		cpi r18,lo8(1)
 505 027c 01F0      		breq .L49
 506               	.L44:
 144:../../os/hal/platforms/AVR/adc_lld.c ****   if (adcp->config != NULL)    
 507               		.loc 1 144 0
 508 027e DC01      		movw r26,r24
 509 0280 1196      		adiw r26,1
 510 0282 ED91      		ld r30,X+
 511 0284 FC91      		ld r31,X
 512 0286 1297      		sbiw r26,1+1
 513 0288 3097      		sbiw r30,0
 514 028a 01F0      		breq .L43
 146:../../os/hal/platforms/AVR/adc_lld.c ****       ADMUX = (adcp->config->analog_reference << REFS0);
 515               		.loc 1 146 0
 516 028c 8081      		ld r24,Z
 517               	.LVL36:
 518 028e 8295      		swap r24
 519 0290 880F      		lsl r24
 520 0292 880F      		lsl r24
 521 0294 807C      		andi r24,lo8(-64)
 522 0296 8093 7C00 		sts 124,r24
 523               	.L43:
 524 029a 0895      		ret
 525               	.LVL37:
 526               	.L49:
 141:../../os/hal/platforms/AVR/adc_lld.c ****     ADCSRA |= (1<<ADEN);
 527               		.loc 1 141 0
 528 029c 2091 7A00 		lds r18,122
 529 02a0 2068      		ori r18,lo8(-128)
 530 02a2 2093 7A00 		sts 122,r18
 531 02a6 00C0      		rjmp .L44
 532               		.cfi_endproc
 533               	.LFE17:
 535               	.global	adc_lld_stop
 537               	adc_lld_stop:
 538               	.LFB18:
 157:../../os/hal/platforms/AVR/adc_lld.c **** void adc_lld_stop(ADCDriver *adcp) {
 539               		.loc 1 157 0
 540               		.cfi_startproc
 541               	.LVL38:
 542               	/* prologue: function */
 543               	/* frame size = 0 */
 544               	/* stack size = 0 */
 545               	.L__stack_usage = 0
 159:../../os/hal/platforms/AVR/adc_lld.c ****   if (adcp->state == ADC_READY) {
 546               		.loc 1 159 0
 547 02a8 FC01      		movw r30,r24
 548 02aa 8081      		ld r24,Z
 549               	.LVL39:
 550 02ac 8230      		cpi r24,lo8(2)
 551 02ae 01F0      		breq .L52
 552 02b0 0895      		ret
 553               	.L52:
 161:../../os/hal/platforms/AVR/adc_lld.c ****     ADCSRA &= ~(1<<ADEN);  
 554               		.loc 1 161 0
 555 02b2 8091 7A00 		lds r24,122
 556 02b6 8F77      		andi r24,lo8(127)
 557 02b8 8093 7A00 		sts 122,r24
 558 02bc 0895      		ret
 559               		.cfi_endproc
 560               	.LFE18:
 562               	.global	adc_lld_start_conversion
 564               	adc_lld_start_conversion:
 565               	.LFB19:
 172:../../os/hal/platforms/AVR/adc_lld.c **** void adc_lld_start_conversion(ADCDriver *adcp) {
 566               		.loc 1 172 0
 567               		.cfi_startproc
 568               	.LVL40:
 569               	/* prologue: function */
 570               	/* frame size = 0 */
 571               	/* stack size = 0 */
 572               	.L__stack_usage = 0
 173:../../os/hal/platforms/AVR/adc_lld.c **** 	adcp->currentBufferPosition=0;
 573               		.loc 1 173 0
 574 02be DC01      		movw r26,r24
 575 02c0 5496      		adiw r26,19+1
 576 02c2 1C92      		st X,__zero_reg__
 577 02c4 1E92      		st -X,__zero_reg__
 578 02c6 5397      		sbiw r26,19
 175:../../os/hal/platforms/AVR/adc_lld.c **** 	setAdcChannel(getAdcChannelNumberFromMask(adcp->grpp->channelsMask,0));
 579               		.loc 1 175 0
 580 02c8 1796      		adiw r26,7
 581 02ca ED91      		ld r30,X+
 582 02cc FC91      		ld r31,X
 583 02ce 1897      		sbiw r26,7+1
 584 02d0 8581      		ldd r24,Z+5
 585               	.LVL41:
 586               	.LBB28:
 587               	.LBB29:
  55:../../os/hal/platforms/AVR/adc_lld.c ****      for(uint8_t i = 0; mask>0; i++)
 588               		.loc 1 55 0
 589 02d2 8823      		tst r24
 590 02d4 01F0      		breq .L54
  57:../../os/hal/platforms/AVR/adc_lld.c **** 	if(mask & 0x01)
 591               		.loc 1 57 0
 592 02d6 80FD      		sbrc r24,0
 593 02d8 00C0      		rjmp .L58
 594 02da 90E0      		ldi r25,0
 595 02dc 00C0      		rjmp .L56
 596               	.LVL42:
 597               	.L57:
 598 02de 80FD      		sbrc r24,0
 599 02e0 00C0      		rjmp .L66
 600               	.LVL43:
 601               	.L56:
  63:../../os/hal/platforms/AVR/adc_lld.c ****         mask >>= 1;
 602               		.loc 1 63 0
 603 02e2 8695      		lsr r24
 604               	.LVL44:
  55:../../os/hal/platforms/AVR/adc_lld.c ****      for(uint8_t i = 0; mask>0; i++)
 605               		.loc 1 55 0
 606 02e4 9F5F      		subi r25,lo8(-(1))
 607               	.LVL45:
 608 02e6 8111      		cpse r24,__zero_reg__
 609 02e8 00C0      		rjmp .L57
 610               	.LVL46:
 611               	.L54:
 612               	.LBE29:
 613               	.LBE28:
 614               	.LBB31:
 615               	.LBB32:
  71:../../os/hal/platforms/AVR/adc_lld.c **** 	ADMUX = (ADMUX & 0xf8) | (channelNum & 0x07);
 616               		.loc 1 71 0
 617 02ea 4091 7C00 		lds r20,124
 618 02ee C901      		movw r24,r18
 619               	.LVL47:
 620 02f0 8770      		andi r24,7
 621 02f2 9927      		clr r25
 622 02f4 487F      		andi r20,lo8(-8)
 623 02f6 482B      		or r20,r24
 624 02f8 4093 7C00 		sts 124,r20
 625               	.LBE32:
 626               	.LBE31:
 176:../../os/hal/platforms/AVR/adc_lld.c **** 	ADCSRA |= 1<<ADSC;
 627               		.loc 1 176 0
 628 02fc 8091 7A00 		lds r24,122
 629 0300 8064      		ori r24,lo8(64)
 630 0302 8093 7A00 		sts 122,r24
 631 0306 0895      		ret
 632               	.LVL48:
 633               	.L66:
 634 0308 292F      		mov r18,r25
 635 030a 30E0      		ldi r19,0
 636 030c 00C0      		rjmp .L54
 637               	.LVL49:
 638               	.L58:
 639               	.LBB33:
 640               	.LBB30:
  57:../../os/hal/platforms/AVR/adc_lld.c **** 	if(mask & 0x01)
 641               		.loc 1 57 0
 642 030e 20E0      		ldi r18,0
 643 0310 30E0      		ldi r19,0
 644 0312 00C0      		rjmp .L54
 645               	.LBE30:
 646               	.LBE33:
 647               		.cfi_endproc
 648               	.LFE19:
 650               	.global	adc_lld_stop_conversion
 652               	adc_lld_stop_conversion:
 653               	.LFB20:
 186:../../os/hal/platforms/AVR/adc_lld.c **** void adc_lld_stop_conversion(ADCDriver *adcp) {
 654               		.loc 1 186 0
 655               		.cfi_startproc
 656               	.LVL50:
 657               	/* prologue: function */
 658               	/* frame size = 0 */
 659               	/* stack size = 0 */
 660               	.L__stack_usage = 0
 661               		.loc 1 187 0
 662 0314 EAE7      		ldi r30,lo8(122)
 663 0316 F0E0      		ldi r31,0
 664 0318 8081      		ld r24,Z
 665               	.LVL51:
 666 031a 8F7B      		andi r24,lo8(-65)
 667 031c 8083      		st Z,r24
 668 031e 0895      		ret
 669               		.cfi_endproc
 670               	.LFE20:
 672               		.comm	ADCD1,21,1
 673               	.Letext0:
 674               		.file 2 "/usr/local/cross/lib/gcc/avr/4.7.2/include/stddef.h"
 675               		.file 3 "/usr/local/cross/lib/gcc/avr/4.7.2/../../../../avr/include/stdint.h"
 676               		.file 4 "../../os/ports/GCC/AVR/chtypes.h"
 677               		.file 5 "../../os/kernel/include/chlists.h"
 678               		.file 6 "../../os/kernel/include/chthreads.h"
 679               		.file 7 "../../os/ports/GCC/AVR/chcore.h"
 680               		.file 8 "../../os/kernel/include/chmtx.h"
 681               		.file 9 "../../os/hal/include/adc.h"
 682               		.file 10 "../../os/hal/platforms/AVR/adc_lld.h"
 683               		.file 11 "../../os/kernel/include/chschd.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 adc_lld.c
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccoKXewj.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccoKXewj.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccoKXewj.s:4      *ABS*:000000000000003f __SREG__
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccoKXewj.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccoKXewj.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccoKXewj.s:12     .text:0000000000000000 __vector_21
                            *COM*:0000000000000015 ADCD1
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccoKXewj.s:466    .text:000000000000025e adc_lld_init
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccoKXewj.s:492    .text:0000000000000276 adc_lld_start
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccoKXewj.s:537    .text:00000000000002a8 adc_lld_stop
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccoKXewj.s:564    .text:00000000000002be adc_lld_start_conversion
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccoKXewj.s:652    .text:0000000000000314 adc_lld_stop_conversion

UNDEFINED SYMBOLS
__udivmodhi4
chSchIsPreemptionRequired
chSchDoReschedule
chSchReadyI
adcObjectInit
__do_clear_bss
