   1               		.file	"serial_lld.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  11               	notify1:
  12               	.LFB8:
  13               		.file 1 "../../os/hal/platforms/AVR/serial_lld.c"
   1:../../os/hal/platforms/AVR/serial_lld.c **** /*
   2:../../os/hal/platforms/AVR/serial_lld.c ****     ChibiOS/RT - Copyright (C) 2006,2007,2008,2009,2010,
   3:../../os/hal/platforms/AVR/serial_lld.c ****                  2011,2012 Giovanni Di Sirio.
   4:../../os/hal/platforms/AVR/serial_lld.c **** 
   5:../../os/hal/platforms/AVR/serial_lld.c ****     This file is part of ChibiOS/RT.
   6:../../os/hal/platforms/AVR/serial_lld.c **** 
   7:../../os/hal/platforms/AVR/serial_lld.c ****     ChibiOS/RT is free software; you can redistribute it and/or modify
   8:../../os/hal/platforms/AVR/serial_lld.c ****     it under the terms of the GNU General Public License as published by
   9:../../os/hal/platforms/AVR/serial_lld.c ****     the Free Software Foundation; either version 3 of the License, or
  10:../../os/hal/platforms/AVR/serial_lld.c ****     (at your option) any later version.
  11:../../os/hal/platforms/AVR/serial_lld.c **** 
  12:../../os/hal/platforms/AVR/serial_lld.c ****     ChibiOS/RT is distributed in the hope that it will be useful,
  13:../../os/hal/platforms/AVR/serial_lld.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:../../os/hal/platforms/AVR/serial_lld.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:../../os/hal/platforms/AVR/serial_lld.c ****     GNU General Public License for more details.
  16:../../os/hal/platforms/AVR/serial_lld.c **** 
  17:../../os/hal/platforms/AVR/serial_lld.c ****     You should have received a copy of the GNU General Public License
  18:../../os/hal/platforms/AVR/serial_lld.c ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  19:../../os/hal/platforms/AVR/serial_lld.c **** */
  20:../../os/hal/platforms/AVR/serial_lld.c **** 
  21:../../os/hal/platforms/AVR/serial_lld.c **** /**
  22:../../os/hal/platforms/AVR/serial_lld.c ****  * @file    AVR/serial_lld.c
  23:../../os/hal/platforms/AVR/serial_lld.c ****  * @brief   AVR low level serial driver code.
  24:../../os/hal/platforms/AVR/serial_lld.c ****  *
  25:../../os/hal/platforms/AVR/serial_lld.c ****  * @addtogroup SERIAL
  26:../../os/hal/platforms/AVR/serial_lld.c ****  * @{
  27:../../os/hal/platforms/AVR/serial_lld.c ****  */
  28:../../os/hal/platforms/AVR/serial_lld.c **** 
  29:../../os/hal/platforms/AVR/serial_lld.c **** #include "ch.h"
  30:../../os/hal/platforms/AVR/serial_lld.c **** #include "hal.h"
  31:../../os/hal/platforms/AVR/serial_lld.c **** 
  32:../../os/hal/platforms/AVR/serial_lld.c **** #if HAL_USE_SERIAL || defined(__DOXYGEN__)
  33:../../os/hal/platforms/AVR/serial_lld.c **** 
  34:../../os/hal/platforms/AVR/serial_lld.c **** /*===========================================================================*/
  35:../../os/hal/platforms/AVR/serial_lld.c **** /* Driver exported variables.                                                */
  36:../../os/hal/platforms/AVR/serial_lld.c **** /*===========================================================================*/
  37:../../os/hal/platforms/AVR/serial_lld.c **** 
  38:../../os/hal/platforms/AVR/serial_lld.c **** /**
  39:../../os/hal/platforms/AVR/serial_lld.c ****  * @brief   USART0 serial driver identifier.
  40:../../os/hal/platforms/AVR/serial_lld.c ****  * @note    The name does not follow the convention used in the other ports
  41:../../os/hal/platforms/AVR/serial_lld.c ****  *          (COMn) because a name conflict with the AVR headers.
  42:../../os/hal/platforms/AVR/serial_lld.c ****  */
  43:../../os/hal/platforms/AVR/serial_lld.c **** #if USE_AVR_USART0 || defined(__DOXYGEN__)
  44:../../os/hal/platforms/AVR/serial_lld.c **** SerialDriver SD1;
  45:../../os/hal/platforms/AVR/serial_lld.c **** #endif
  46:../../os/hal/platforms/AVR/serial_lld.c **** 
  47:../../os/hal/platforms/AVR/serial_lld.c **** /**
  48:../../os/hal/platforms/AVR/serial_lld.c ****  * @brief   USART1 serial driver identifier.
  49:../../os/hal/platforms/AVR/serial_lld.c ****  * @note    The name does not follow the convention used in the other ports
  50:../../os/hal/platforms/AVR/serial_lld.c ****  *          (COMn) because a name conflict with the AVR headers.
  51:../../os/hal/platforms/AVR/serial_lld.c ****  */
  52:../../os/hal/platforms/AVR/serial_lld.c **** #if USE_AVR_USART1 || defined(__DOXYGEN__)
  53:../../os/hal/platforms/AVR/serial_lld.c **** SerialDriver SD2;
  54:../../os/hal/platforms/AVR/serial_lld.c **** #endif
  55:../../os/hal/platforms/AVR/serial_lld.c **** 
  56:../../os/hal/platforms/AVR/serial_lld.c **** /*===========================================================================*/
  57:../../os/hal/platforms/AVR/serial_lld.c **** /* Driver local variables.                                                   */
  58:../../os/hal/platforms/AVR/serial_lld.c **** /*===========================================================================*/
  59:../../os/hal/platforms/AVR/serial_lld.c **** 
  60:../../os/hal/platforms/AVR/serial_lld.c **** /**
  61:../../os/hal/platforms/AVR/serial_lld.c ****  * @brief   Driver default configuration.
  62:../../os/hal/platforms/AVR/serial_lld.c ****  */
  63:../../os/hal/platforms/AVR/serial_lld.c **** static const SerialConfig default_config = {
  64:../../os/hal/platforms/AVR/serial_lld.c ****   UBRR(SERIAL_DEFAULT_BITRATE),
  65:../../os/hal/platforms/AVR/serial_lld.c ****   USART_CHAR_SIZE_8
  66:../../os/hal/platforms/AVR/serial_lld.c **** };
  67:../../os/hal/platforms/AVR/serial_lld.c **** 
  68:../../os/hal/platforms/AVR/serial_lld.c **** /*===========================================================================*/
  69:../../os/hal/platforms/AVR/serial_lld.c **** /* Driver local functions.                                                   */
  70:../../os/hal/platforms/AVR/serial_lld.c **** /*===========================================================================*/
  71:../../os/hal/platforms/AVR/serial_lld.c **** 
  72:../../os/hal/platforms/AVR/serial_lld.c **** static void set_error(uint8_t sra, SerialDriver *sdp) {
  73:../../os/hal/platforms/AVR/serial_lld.c ****   flagsmask_t sts = 0;
  74:../../os/hal/platforms/AVR/serial_lld.c ****   uint8_t dor = 0;
  75:../../os/hal/platforms/AVR/serial_lld.c ****   uint8_t upe = 0;
  76:../../os/hal/platforms/AVR/serial_lld.c ****   uint8_t fe = 0;
  77:../../os/hal/platforms/AVR/serial_lld.c **** 
  78:../../os/hal/platforms/AVR/serial_lld.c **** #if USE_AVR_USART0
  79:../../os/hal/platforms/AVR/serial_lld.c ****   if (&SD1 == sdp) {
  80:../../os/hal/platforms/AVR/serial_lld.c ****     dor = (1 << DOR0);
  81:../../os/hal/platforms/AVR/serial_lld.c ****     upe = (1 << UPE0);
  82:../../os/hal/platforms/AVR/serial_lld.c ****     fe = (1 << FE0);
  83:../../os/hal/platforms/AVR/serial_lld.c ****   }
  84:../../os/hal/platforms/AVR/serial_lld.c **** #endif
  85:../../os/hal/platforms/AVR/serial_lld.c **** 
  86:../../os/hal/platforms/AVR/serial_lld.c **** #if USE_AVR_USART1
  87:../../os/hal/platforms/AVR/serial_lld.c ****   if (&SD2 == sdp) {
  88:../../os/hal/platforms/AVR/serial_lld.c ****     dor = (1 << DOR1);
  89:../../os/hal/platforms/AVR/serial_lld.c ****     upe = (1 << UPE1);
  90:../../os/hal/platforms/AVR/serial_lld.c ****     fe = (1 << FE1);
  91:../../os/hal/platforms/AVR/serial_lld.c ****   }
  92:../../os/hal/platforms/AVR/serial_lld.c **** #endif
  93:../../os/hal/platforms/AVR/serial_lld.c **** 
  94:../../os/hal/platforms/AVR/serial_lld.c ****   if (sra & dor)
  95:../../os/hal/platforms/AVR/serial_lld.c ****     sts |= SD_OVERRUN_ERROR;
  96:../../os/hal/platforms/AVR/serial_lld.c ****   if (sra & upe)
  97:../../os/hal/platforms/AVR/serial_lld.c ****     sts |= SD_PARITY_ERROR;
  98:../../os/hal/platforms/AVR/serial_lld.c ****   if (sra & fe)
  99:../../os/hal/platforms/AVR/serial_lld.c ****     sts |= SD_FRAMING_ERROR;
 100:../../os/hal/platforms/AVR/serial_lld.c ****   chSysLockFromIsr();
 101:../../os/hal/platforms/AVR/serial_lld.c ****   chnAddFlagsI(sdp, sts);
 102:../../os/hal/platforms/AVR/serial_lld.c ****   chSysUnlockFromIsr();
 103:../../os/hal/platforms/AVR/serial_lld.c **** }
 104:../../os/hal/platforms/AVR/serial_lld.c **** 
 105:../../os/hal/platforms/AVR/serial_lld.c **** #if USE_AVR_USART0 || defined(__DOXYGEN__)
 106:../../os/hal/platforms/AVR/serial_lld.c **** static void notify1(GenericQueue *qp) {
  14               		.loc 1 106 0
  15               		.cfi_startproc
  16               	.LVL0:
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
 107:../../os/hal/platforms/AVR/serial_lld.c **** 
 108:../../os/hal/platforms/AVR/serial_lld.c ****   (void)qp;
 109:../../os/hal/platforms/AVR/serial_lld.c ****   UCSR0B |= (1 << UDRIE0);
  21               		.loc 1 109 0
  22 0000 E1EC      		ldi r30,lo8(-63)
  23 0002 F0E0      		ldi r31,0
  24 0004 8081      		ld r24,Z
  25               	.LVL1:
  26 0006 8062      		ori r24,lo8(32)
  27 0008 8083      		st Z,r24
  28 000a 0895      		ret
  29               		.cfi_endproc
  30               	.LFE8:
  32               	.global	__vector_18
  34               	__vector_18:
  35               	.LFB11:
 110:../../os/hal/platforms/AVR/serial_lld.c **** }
 111:../../os/hal/platforms/AVR/serial_lld.c **** 
 112:../../os/hal/platforms/AVR/serial_lld.c **** /**
 113:../../os/hal/platforms/AVR/serial_lld.c ****  * @brief   USART0 initialization.
 114:../../os/hal/platforms/AVR/serial_lld.c ****  *
 115:../../os/hal/platforms/AVR/serial_lld.c ****  * @param[in] config    the architecture-dependent serial driver configuration
 116:../../os/hal/platforms/AVR/serial_lld.c ****  */
 117:../../os/hal/platforms/AVR/serial_lld.c **** static void usart0_init(const SerialConfig *config) {
 118:../../os/hal/platforms/AVR/serial_lld.c **** 
 119:../../os/hal/platforms/AVR/serial_lld.c ****   UBRR0L = config->sc_brr;
 120:../../os/hal/platforms/AVR/serial_lld.c ****   UBRR0H = config->sc_brr >> 8;
 121:../../os/hal/platforms/AVR/serial_lld.c ****   UCSR0A = 0;
 122:../../os/hal/platforms/AVR/serial_lld.c ****   UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);
 123:../../os/hal/platforms/AVR/serial_lld.c ****   switch (config->sc_bits_per_char) {
 124:../../os/hal/platforms/AVR/serial_lld.c ****   case USART_CHAR_SIZE_5:
 125:../../os/hal/platforms/AVR/serial_lld.c ****     UCSR0C = 0;
 126:../../os/hal/platforms/AVR/serial_lld.c ****     break;
 127:../../os/hal/platforms/AVR/serial_lld.c ****   case USART_CHAR_SIZE_6:
 128:../../os/hal/platforms/AVR/serial_lld.c ****     UCSR0C = (1 << UCSZ00);
 129:../../os/hal/platforms/AVR/serial_lld.c ****     break;
 130:../../os/hal/platforms/AVR/serial_lld.c ****   case USART_CHAR_SIZE_7:
 131:../../os/hal/platforms/AVR/serial_lld.c ****     UCSR0C = (1 << UCSZ01);
 132:../../os/hal/platforms/AVR/serial_lld.c ****     break;
 133:../../os/hal/platforms/AVR/serial_lld.c ****   case USART_CHAR_SIZE_9:
 134:../../os/hal/platforms/AVR/serial_lld.c ****     UCSR0B |= (1 << UCSZ02);
 135:../../os/hal/platforms/AVR/serial_lld.c ****     UCSR0C = (1 << UCSZ00) | (1 << UCSZ01);
 136:../../os/hal/platforms/AVR/serial_lld.c ****     break;
 137:../../os/hal/platforms/AVR/serial_lld.c ****   case USART_CHAR_SIZE_8:
 138:../../os/hal/platforms/AVR/serial_lld.c ****   default:
 139:../../os/hal/platforms/AVR/serial_lld.c ****     UCSR0C = (1 << UCSZ00) | (1 << UCSZ01);
 140:../../os/hal/platforms/AVR/serial_lld.c ****   }
 141:../../os/hal/platforms/AVR/serial_lld.c **** }
 142:../../os/hal/platforms/AVR/serial_lld.c **** 
 143:../../os/hal/platforms/AVR/serial_lld.c **** /**
 144:../../os/hal/platforms/AVR/serial_lld.c ****  * @brief   USART0 de-initialization.
 145:../../os/hal/platforms/AVR/serial_lld.c ****  */
 146:../../os/hal/platforms/AVR/serial_lld.c **** static void usart0_deinit(void) {
 147:../../os/hal/platforms/AVR/serial_lld.c **** 
 148:../../os/hal/platforms/AVR/serial_lld.c ****   UCSR0A = 0;
 149:../../os/hal/platforms/AVR/serial_lld.c ****   UCSR0B = 0;
 150:../../os/hal/platforms/AVR/serial_lld.c ****   UCSR0C = 0;
 151:../../os/hal/platforms/AVR/serial_lld.c **** }
 152:../../os/hal/platforms/AVR/serial_lld.c **** #endif
 153:../../os/hal/platforms/AVR/serial_lld.c **** 
 154:../../os/hal/platforms/AVR/serial_lld.c **** #if USE_AVR_USART1 || defined(__DOXYGEN__)
 155:../../os/hal/platforms/AVR/serial_lld.c **** static void notify2(GenericQueue *qp) {
 156:../../os/hal/platforms/AVR/serial_lld.c **** 
 157:../../os/hal/platforms/AVR/serial_lld.c ****   (void)qp;
 158:../../os/hal/platforms/AVR/serial_lld.c ****   UCSR1B |= (1 << UDRIE1);
 159:../../os/hal/platforms/AVR/serial_lld.c **** }
 160:../../os/hal/platforms/AVR/serial_lld.c **** 
 161:../../os/hal/platforms/AVR/serial_lld.c **** /**
 162:../../os/hal/platforms/AVR/serial_lld.c ****  * @brief   USART1 initialization.
 163:../../os/hal/platforms/AVR/serial_lld.c ****  *
 164:../../os/hal/platforms/AVR/serial_lld.c ****  * @param[in] config    the architecture-dependent serial driver configuration
 165:../../os/hal/platforms/AVR/serial_lld.c ****  */
 166:../../os/hal/platforms/AVR/serial_lld.c **** static void usart1_init(const SerialConfig *config) {
 167:../../os/hal/platforms/AVR/serial_lld.c **** 
 168:../../os/hal/platforms/AVR/serial_lld.c ****   UBRR1L = config->sc_brr;
 169:../../os/hal/platforms/AVR/serial_lld.c ****   UBRR1H = config->sc_brr >> 8;
 170:../../os/hal/platforms/AVR/serial_lld.c ****   UCSR1A = 0;
 171:../../os/hal/platforms/AVR/serial_lld.c ****   UCSR1B = (1 << RXEN1) | (1 << TXEN1) | (1 << RXCIE1);
 172:../../os/hal/platforms/AVR/serial_lld.c ****   switch (config->sc_bits_per_char) {
 173:../../os/hal/platforms/AVR/serial_lld.c ****   case USART_CHAR_SIZE_5:
 174:../../os/hal/platforms/AVR/serial_lld.c ****     UCSR1C = 0;
 175:../../os/hal/platforms/AVR/serial_lld.c ****     break;
 176:../../os/hal/platforms/AVR/serial_lld.c ****   case USART_CHAR_SIZE_6:
 177:../../os/hal/platforms/AVR/serial_lld.c ****     UCSR1C = (1 << UCSZ10);
 178:../../os/hal/platforms/AVR/serial_lld.c ****     break;
 179:../../os/hal/platforms/AVR/serial_lld.c ****   case USART_CHAR_SIZE_7:
 180:../../os/hal/platforms/AVR/serial_lld.c ****     UCSR1C = (1 << UCSZ11);
 181:../../os/hal/platforms/AVR/serial_lld.c ****     break;
 182:../../os/hal/platforms/AVR/serial_lld.c ****   case USART_CHAR_SIZE_9:
 183:../../os/hal/platforms/AVR/serial_lld.c ****     UCSR1B |= (1 << UCSZ12);
 184:../../os/hal/platforms/AVR/serial_lld.c ****     UCSR1C = (1 << UCSZ10) | (1 << UCSZ11);
 185:../../os/hal/platforms/AVR/serial_lld.c ****     break;
 186:../../os/hal/platforms/AVR/serial_lld.c ****   case USART_CHAR_SIZE_8:
 187:../../os/hal/platforms/AVR/serial_lld.c ****   default:
 188:../../os/hal/platforms/AVR/serial_lld.c ****     UCSR1C = (1 << UCSZ10) | (1 << UCSZ11);
 189:../../os/hal/platforms/AVR/serial_lld.c ****   }
 190:../../os/hal/platforms/AVR/serial_lld.c **** }
 191:../../os/hal/platforms/AVR/serial_lld.c **** 
 192:../../os/hal/platforms/AVR/serial_lld.c **** /**
 193:../../os/hal/platforms/AVR/serial_lld.c ****  * @brief   USART1 de-initialization.
 194:../../os/hal/platforms/AVR/serial_lld.c ****  */
 195:../../os/hal/platforms/AVR/serial_lld.c **** static void usart1_deinit(void) {
 196:../../os/hal/platforms/AVR/serial_lld.c **** 
 197:../../os/hal/platforms/AVR/serial_lld.c ****   UCSR1A = 0;
 198:../../os/hal/platforms/AVR/serial_lld.c ****   UCSR1B = 0;
 199:../../os/hal/platforms/AVR/serial_lld.c ****   UCSR1C = 0;
 200:../../os/hal/platforms/AVR/serial_lld.c **** }
 201:../../os/hal/platforms/AVR/serial_lld.c **** #endif
 202:../../os/hal/platforms/AVR/serial_lld.c **** 
 203:../../os/hal/platforms/AVR/serial_lld.c **** /*===========================================================================*/
 204:../../os/hal/platforms/AVR/serial_lld.c **** /* Driver interrupt handlers.                                                */
 205:../../os/hal/platforms/AVR/serial_lld.c **** /*===========================================================================*/
 206:../../os/hal/platforms/AVR/serial_lld.c **** 
 207:../../os/hal/platforms/AVR/serial_lld.c **** #if USE_AVR_USART0 || defined(__DOXYGEN__)
 208:../../os/hal/platforms/AVR/serial_lld.c **** /**
 209:../../os/hal/platforms/AVR/serial_lld.c ****  * @brief   USART0 RX interrupt handler.
 210:../../os/hal/platforms/AVR/serial_lld.c ****  *
 211:../../os/hal/platforms/AVR/serial_lld.c ****  * @isr
 212:../../os/hal/platforms/AVR/serial_lld.c ****  */
 213:../../os/hal/platforms/AVR/serial_lld.c **** CH_IRQ_HANDLER(USART0_RX_vect) {
  36               		.loc 1 213 0
  37               		.cfi_startproc
  38 000c 1F92      		push r1
  39               	.LCFI0:
  40               		.cfi_def_cfa_offset 3
  41               		.cfi_offset 1, -2
  42 000e 0F92      		push r0
  43               	.LCFI1:
  44               		.cfi_def_cfa_offset 4
  45               		.cfi_offset 0, -3
  46 0010 0FB6      		in r0,__SREG__
  47 0012 0F92      		push r0
  48 0014 1124      		clr __zero_reg__
  49 0016 2F93      		push r18
  50               	.LCFI2:
  51               		.cfi_def_cfa_offset 5
  52               		.cfi_offset 18, -4
  53 0018 3F93      		push r19
  54               	.LCFI3:
  55               		.cfi_def_cfa_offset 6
  56               		.cfi_offset 19, -5
  57 001a 4F93      		push r20
  58               	.LCFI4:
  59               		.cfi_def_cfa_offset 7
  60               		.cfi_offset 20, -6
  61 001c 5F93      		push r21
  62               	.LCFI5:
  63               		.cfi_def_cfa_offset 8
  64               		.cfi_offset 21, -7
  65 001e 6F93      		push r22
  66               	.LCFI6:
  67               		.cfi_def_cfa_offset 9
  68               		.cfi_offset 22, -8
  69 0020 7F93      		push r23
  70               	.LCFI7:
  71               		.cfi_def_cfa_offset 10
  72               		.cfi_offset 23, -9
  73 0022 8F93      		push r24
  74               	.LCFI8:
  75               		.cfi_def_cfa_offset 11
  76               		.cfi_offset 24, -10
  77 0024 9F93      		push r25
  78               	.LCFI9:
  79               		.cfi_def_cfa_offset 12
  80               		.cfi_offset 25, -11
  81 0026 AF93      		push r26
  82               	.LCFI10:
  83               		.cfi_def_cfa_offset 13
  84               		.cfi_offset 26, -12
  85 0028 BF93      		push r27
  86               	.LCFI11:
  87               		.cfi_def_cfa_offset 14
  88               		.cfi_offset 27, -13
  89 002a EF93      		push r30
  90               	.LCFI12:
  91               		.cfi_def_cfa_offset 15
  92               		.cfi_offset 30, -14
  93 002c FF93      		push r31
  94               	.LCFI13:
  95               		.cfi_def_cfa_offset 16
  96               		.cfi_offset 31, -15
  97               	/* prologue: Signal */
  98               	/* frame size = 0 */
  99               	/* stack size = 15 */
 100               	.L__stack_usage = 15
 214:../../os/hal/platforms/AVR/serial_lld.c ****   uint8_t sra;
 215:../../os/hal/platforms/AVR/serial_lld.c **** 
 216:../../os/hal/platforms/AVR/serial_lld.c ****   CH_IRQ_PROLOGUE();
 101               		.loc 1 216 0
 217:../../os/hal/platforms/AVR/serial_lld.c **** 
 218:../../os/hal/platforms/AVR/serial_lld.c ****   sra = UCSR0A;
 102               		.loc 1 218 0
 103 002e 8091 C000 		lds r24,192
 104               	.LVL2:
 219:../../os/hal/platforms/AVR/serial_lld.c ****   if (sra & ((1 << DOR0) | (1 << UPE0) | (1 << FE0)))
 105               		.loc 1 219 0
 106 0032 982F      		mov r25,r24
 107 0034 9C71      		andi r25,lo8(28)
 108 0036 01F4      		brne .L22
 109               	.LVL3:
 110               	.L3:
 220:../../os/hal/platforms/AVR/serial_lld.c ****     set_error(sra, &SD1);
 221:../../os/hal/platforms/AVR/serial_lld.c ****   chSysLockFromIsr();
 222:../../os/hal/platforms/AVR/serial_lld.c ****   sdIncomingDataI(&SD1, UDR0);
 111               		.loc 1 222 0
 112 0038 6091 C600 		lds r22,198
 113 003c 80E0      		ldi r24,lo8(SD1)
 114 003e 90E0      		ldi r25,hi8(SD1)
 115 0040 0E94 0000 		call sdIncomingDataI
 116               	.LVL4:
 223:../../os/hal/platforms/AVR/serial_lld.c ****   chSysUnlockFromIsr();
 224:../../os/hal/platforms/AVR/serial_lld.c **** 
 225:../../os/hal/platforms/AVR/serial_lld.c ****   CH_IRQ_EPILOGUE();
 117               		.loc 1 225 0
 118 0044 0E94 0000 		call chSchIsPreemptionRequired
 119               	.LVL5:
 120 0048 8111      		cpse r24,__zero_reg__
 121               		.loc 1 225 0 is_stmt 0 discriminator 1
 122 004a 0E94 0000 		call chSchDoReschedule
 123               	.LVL6:
 124               	.L2:
 125               	/* epilogue start */
 226:../../os/hal/platforms/AVR/serial_lld.c **** }
 126               		.loc 1 226 0 is_stmt 1
 127 004e FF91      		pop r31
 128 0050 EF91      		pop r30
 129 0052 BF91      		pop r27
 130 0054 AF91      		pop r26
 131 0056 9F91      		pop r25
 132 0058 8F91      		pop r24
 133 005a 7F91      		pop r23
 134 005c 6F91      		pop r22
 135 005e 5F91      		pop r21
 136 0060 4F91      		pop r20
 137 0062 3F91      		pop r19
 138 0064 2F91      		pop r18
 139 0066 0F90      		pop r0
 140 0068 0FBE      		out __SREG__,r0
 141 006a 0F90      		pop r0
 142 006c 1F90      		pop r1
 143 006e 1895      		reti
 144               	.LVL7:
 145               	.L22:
 146               	.LBB6:
 147               	.LBB7:
  94:../../os/hal/platforms/AVR/serial_lld.c ****   if (sra & dor)
 148               		.loc 1 94 0
 149 0070 83FD      		sbrc r24,3
 150 0072 00C0      		rjmp .L23
  73:../../os/hal/platforms/AVR/serial_lld.c ****   flagsmask_t sts = 0;
 151               		.loc 1 73 0
 152 0074 60E0      		ldi r22,0
 153               	.L4:
 154               	.LVL8:
  96:../../os/hal/platforms/AVR/serial_lld.c ****   if (sra & upe)
 155               		.loc 1 96 0
 156 0076 82FD      		sbrc r24,2
  97:../../os/hal/platforms/AVR/serial_lld.c ****     sts |= SD_PARITY_ERROR;
 157               		.loc 1 97 0
 158 0078 6062      		ori r22,lo8(32)
 159               	.LVL9:
 160               	.L5:
  98:../../os/hal/platforms/AVR/serial_lld.c ****   if (sra & fe)
 161               		.loc 1 98 0
 162 007a 84FD      		sbrc r24,4
  99:../../os/hal/platforms/AVR/serial_lld.c ****     sts |= SD_FRAMING_ERROR;
 163               		.loc 1 99 0
 164 007c 6064      		ori r22,lo8(64)
 165               	.LVL10:
 166               	.L6:
 101:../../os/hal/platforms/AVR/serial_lld.c ****   chnAddFlagsI(sdp, sts);
 167               		.loc 1 101 0
 168 007e 80E0      		ldi r24,lo8(SD1+2)
 169 0080 90E0      		ldi r25,hi8(SD1+2)
 170               	.LVL11:
 171 0082 0E94 0000 		call chEvtBroadcastFlagsI
 172               	.LVL12:
 173 0086 00C0      		rjmp .L3
 174               	.LVL13:
 175               	.L23:
  95:../../os/hal/platforms/AVR/serial_lld.c ****     sts |= SD_OVERRUN_ERROR;
 176               		.loc 1 95 0
 177 0088 60E8      		ldi r22,lo8(-128)
 178 008a 00C0      		rjmp .L4
 179               	.LBE7:
 180               	.LBE6:
 181               		.cfi_endproc
 182               	.LFE11:
 184               	.global	__vector_19
 186               	__vector_19:
 187               	.LFB12:
 227:../../os/hal/platforms/AVR/serial_lld.c **** 
 228:../../os/hal/platforms/AVR/serial_lld.c **** /**
 229:../../os/hal/platforms/AVR/serial_lld.c ****  * @brief   USART0 TX interrupt handler.
 230:../../os/hal/platforms/AVR/serial_lld.c ****  *
 231:../../os/hal/platforms/AVR/serial_lld.c ****  * @isr
 232:../../os/hal/platforms/AVR/serial_lld.c ****  */
 233:../../os/hal/platforms/AVR/serial_lld.c **** CH_IRQ_HANDLER(USART0_UDRE_vect) {
 188               		.loc 1 233 0
 189               		.cfi_startproc
 190 008c 1F92      		push r1
 191               	.LCFI14:
 192               		.cfi_def_cfa_offset 3
 193               		.cfi_offset 1, -2
 194 008e 0F92      		push r0
 195               	.LCFI15:
 196               		.cfi_def_cfa_offset 4
 197               		.cfi_offset 0, -3
 198 0090 0FB6      		in r0,__SREG__
 199 0092 0F92      		push r0
 200 0094 1124      		clr __zero_reg__
 201 0096 2F93      		push r18
 202               	.LCFI16:
 203               		.cfi_def_cfa_offset 5
 204               		.cfi_offset 18, -4
 205 0098 3F93      		push r19
 206               	.LCFI17:
 207               		.cfi_def_cfa_offset 6
 208               		.cfi_offset 19, -5
 209 009a 4F93      		push r20
 210               	.LCFI18:
 211               		.cfi_def_cfa_offset 7
 212               		.cfi_offset 20, -6
 213 009c 5F93      		push r21
 214               	.LCFI19:
 215               		.cfi_def_cfa_offset 8
 216               		.cfi_offset 21, -7
 217 009e 6F93      		push r22
 218               	.LCFI20:
 219               		.cfi_def_cfa_offset 9
 220               		.cfi_offset 22, -8
 221 00a0 7F93      		push r23
 222               	.LCFI21:
 223               		.cfi_def_cfa_offset 10
 224               		.cfi_offset 23, -9
 225 00a2 8F93      		push r24
 226               	.LCFI22:
 227               		.cfi_def_cfa_offset 11
 228               		.cfi_offset 24, -10
 229 00a4 9F93      		push r25
 230               	.LCFI23:
 231               		.cfi_def_cfa_offset 12
 232               		.cfi_offset 25, -11
 233 00a6 AF93      		push r26
 234               	.LCFI24:
 235               		.cfi_def_cfa_offset 13
 236               		.cfi_offset 26, -12
 237 00a8 BF93      		push r27
 238               	.LCFI25:
 239               		.cfi_def_cfa_offset 14
 240               		.cfi_offset 27, -13
 241 00aa EF93      		push r30
 242               	.LCFI26:
 243               		.cfi_def_cfa_offset 15
 244               		.cfi_offset 30, -14
 245 00ac FF93      		push r31
 246               	.LCFI27:
 247               		.cfi_def_cfa_offset 16
 248               		.cfi_offset 31, -15
 249               	/* prologue: Signal */
 250               	/* frame size = 0 */
 251               	/* stack size = 15 */
 252               	.L__stack_usage = 15
 234:../../os/hal/platforms/AVR/serial_lld.c ****   msg_t b;
 235:../../os/hal/platforms/AVR/serial_lld.c **** 
 236:../../os/hal/platforms/AVR/serial_lld.c ****   CH_IRQ_PROLOGUE();
 253               		.loc 1 236 0
 237:../../os/hal/platforms/AVR/serial_lld.c **** 
 238:../../os/hal/platforms/AVR/serial_lld.c ****   chSysLockFromIsr();
 239:../../os/hal/platforms/AVR/serial_lld.c ****   b = sdRequestDataI(&SD1);
 254               		.loc 1 239 0
 255 00ae 80E0      		ldi r24,lo8(SD1)
 256 00b0 90E0      		ldi r25,hi8(SD1)
 257 00b2 0E94 0000 		call sdRequestDataI
 258               	.LVL14:
 240:../../os/hal/platforms/AVR/serial_lld.c ****   chSysUnlockFromIsr();
 241:../../os/hal/platforms/AVR/serial_lld.c ****   if (b < Q_OK)
 259               		.loc 1 241 0
 260 00b6 97FD      		sbrc r25,7
 261 00b8 00C0      		rjmp .L31
 242:../../os/hal/platforms/AVR/serial_lld.c ****     UCSR0B &= ~(1 << UDRIE0);
 243:../../os/hal/platforms/AVR/serial_lld.c ****   else
 244:../../os/hal/platforms/AVR/serial_lld.c ****     UDR0 = b;
 262               		.loc 1 244 0
 263 00ba 8093 C600 		sts 198,r24
 264               	.LVL15:
 265               	.L26:
 245:../../os/hal/platforms/AVR/serial_lld.c **** 
 246:../../os/hal/platforms/AVR/serial_lld.c ****   CH_IRQ_EPILOGUE();
 266               		.loc 1 246 0
 267 00be 0E94 0000 		call chSchIsPreemptionRequired
 268               	.LVL16:
 269 00c2 8111      		cpse r24,__zero_reg__
 270               		.loc 1 246 0 is_stmt 0 discriminator 1
 271 00c4 0E94 0000 		call chSchDoReschedule
 272               	.LVL17:
 273               	.L24:
 274               	/* epilogue start */
 247:../../os/hal/platforms/AVR/serial_lld.c **** }
 275               		.loc 1 247 0 is_stmt 1
 276 00c8 FF91      		pop r31
 277 00ca EF91      		pop r30
 278 00cc BF91      		pop r27
 279 00ce AF91      		pop r26
 280 00d0 9F91      		pop r25
 281 00d2 8F91      		pop r24
 282 00d4 7F91      		pop r23
 283 00d6 6F91      		pop r22
 284 00d8 5F91      		pop r21
 285 00da 4F91      		pop r20
 286 00dc 3F91      		pop r19
 287 00de 2F91      		pop r18
 288 00e0 0F90      		pop r0
 289 00e2 0FBE      		out __SREG__,r0
 290 00e4 0F90      		pop r0
 291 00e6 1F90      		pop r1
 292 00e8 1895      		reti
 293               	.LVL18:
 294               	.L31:
 242:../../os/hal/platforms/AVR/serial_lld.c ****     UCSR0B &= ~(1 << UDRIE0);
 295               		.loc 1 242 0
 296 00ea 8091 C100 		lds r24,193
 297               	.LVL19:
 298 00ee 8F7D      		andi r24,lo8(-33)
 299 00f0 8093 C100 		sts 193,r24
 300 00f4 00C0      		rjmp .L26
 301               		.cfi_endproc
 302               	.LFE12:
 304               	.global	sd_lld_init
 306               	sd_lld_init:
 307               	.LFB13:
 248:../../os/hal/platforms/AVR/serial_lld.c **** #endif /* USE_AVR_USART0 */
 249:../../os/hal/platforms/AVR/serial_lld.c **** 
 250:../../os/hal/platforms/AVR/serial_lld.c **** #if USE_AVR_USART1 || defined(__DOXYGEN__)
 251:../../os/hal/platforms/AVR/serial_lld.c **** /**
 252:../../os/hal/platforms/AVR/serial_lld.c ****  * @brief   USART1 RX interrupt handler.
 253:../../os/hal/platforms/AVR/serial_lld.c ****  *
 254:../../os/hal/platforms/AVR/serial_lld.c ****  * @isr
 255:../../os/hal/platforms/AVR/serial_lld.c ****  */
 256:../../os/hal/platforms/AVR/serial_lld.c **** CH_IRQ_HANDLER(USART1_RX_vect) {
 257:../../os/hal/platforms/AVR/serial_lld.c ****   uint8_t sra;
 258:../../os/hal/platforms/AVR/serial_lld.c **** 
 259:../../os/hal/platforms/AVR/serial_lld.c ****   CH_IRQ_PROLOGUE();
 260:../../os/hal/platforms/AVR/serial_lld.c **** 
 261:../../os/hal/platforms/AVR/serial_lld.c ****   sra = UCSR1A;
 262:../../os/hal/platforms/AVR/serial_lld.c ****   if (sra & ((1 << DOR1) | (1 << UPE1) | (1 << FE1)))
 263:../../os/hal/platforms/AVR/serial_lld.c ****     set_error(sra, &SD2);
 264:../../os/hal/platforms/AVR/serial_lld.c ****   chSysLockFromIsr();
 265:../../os/hal/platforms/AVR/serial_lld.c ****   sdIncomingDataI(&SD2, UDR1);
 266:../../os/hal/platforms/AVR/serial_lld.c ****   chSysUnlockFromIsr();
 267:../../os/hal/platforms/AVR/serial_lld.c **** 
 268:../../os/hal/platforms/AVR/serial_lld.c ****   CH_IRQ_EPILOGUE();
 269:../../os/hal/platforms/AVR/serial_lld.c **** }
 270:../../os/hal/platforms/AVR/serial_lld.c **** 
 271:../../os/hal/platforms/AVR/serial_lld.c **** /**
 272:../../os/hal/platforms/AVR/serial_lld.c ****  * @brief   USART1 TX interrupt handler.
 273:../../os/hal/platforms/AVR/serial_lld.c ****  *
 274:../../os/hal/platforms/AVR/serial_lld.c ****  * @isr
 275:../../os/hal/platforms/AVR/serial_lld.c ****  */
 276:../../os/hal/platforms/AVR/serial_lld.c **** CH_IRQ_HANDLER(USART1_UDRE_vect) {
 277:../../os/hal/platforms/AVR/serial_lld.c ****   msg_t b;
 278:../../os/hal/platforms/AVR/serial_lld.c **** 
 279:../../os/hal/platforms/AVR/serial_lld.c ****   CH_IRQ_PROLOGUE();
 280:../../os/hal/platforms/AVR/serial_lld.c **** 
 281:../../os/hal/platforms/AVR/serial_lld.c ****   chSysLockFromIsr();
 282:../../os/hal/platforms/AVR/serial_lld.c ****   b = sdRequestDataI(&SD2);
 283:../../os/hal/platforms/AVR/serial_lld.c ****   chSysUnlockFromIsr();
 284:../../os/hal/platforms/AVR/serial_lld.c ****   if (b < Q_OK)
 285:../../os/hal/platforms/AVR/serial_lld.c ****     UCSR1B &= ~(1 << UDRIE1);
 286:../../os/hal/platforms/AVR/serial_lld.c ****   else
 287:../../os/hal/platforms/AVR/serial_lld.c ****     UDR1 = b;
 288:../../os/hal/platforms/AVR/serial_lld.c **** 
 289:../../os/hal/platforms/AVR/serial_lld.c ****   CH_IRQ_EPILOGUE();
 290:../../os/hal/platforms/AVR/serial_lld.c **** }
 291:../../os/hal/platforms/AVR/serial_lld.c **** #endif /* USE_AVR_USART1 */
 292:../../os/hal/platforms/AVR/serial_lld.c **** 
 293:../../os/hal/platforms/AVR/serial_lld.c **** /*===========================================================================*/
 294:../../os/hal/platforms/AVR/serial_lld.c **** /* Driver exported functions.                                                */
 295:../../os/hal/platforms/AVR/serial_lld.c **** /*===========================================================================*/
 296:../../os/hal/platforms/AVR/serial_lld.c **** 
 297:../../os/hal/platforms/AVR/serial_lld.c **** /**
 298:../../os/hal/platforms/AVR/serial_lld.c ****  * @brief   Low level serial driver initialization.
 299:../../os/hal/platforms/AVR/serial_lld.c ****  *
 300:../../os/hal/platforms/AVR/serial_lld.c ****  * @notapi
 301:../../os/hal/platforms/AVR/serial_lld.c ****  */
 302:../../os/hal/platforms/AVR/serial_lld.c **** void sd_lld_init(void) {
 308               		.loc 1 302 0
 309               		.cfi_startproc
 310               	/* prologue: function */
 311               	/* frame size = 0 */
 312               	/* stack size = 0 */
 313               	.L__stack_usage = 0
 303:../../os/hal/platforms/AVR/serial_lld.c **** 
 304:../../os/hal/platforms/AVR/serial_lld.c **** #if USE_AVR_USART0
 305:../../os/hal/platforms/AVR/serial_lld.c ****   sdObjectInit(&SD1, NULL, notify1);
 314               		.loc 1 305 0
 315 00f6 40E0      		ldi r20,lo8(gs(notify1))
 316 00f8 50E0      		ldi r21,hi8(gs(notify1))
 317 00fa 60E0      		ldi r22,0
 318 00fc 70E0      		ldi r23,0
 319 00fe 80E0      		ldi r24,lo8(SD1)
 320 0100 90E0      		ldi r25,hi8(SD1)
 321 0102 0C94 0000 		jmp sdObjectInit
 322               	.LVL20:
 323               		.cfi_endproc
 324               	.LFE13:
 326               	.global	sd_lld_start
 328               	sd_lld_start:
 329               	.LFB14:
 306:../../os/hal/platforms/AVR/serial_lld.c **** #endif
 307:../../os/hal/platforms/AVR/serial_lld.c **** #if USE_AVR_USART1
 308:../../os/hal/platforms/AVR/serial_lld.c ****   sdObjectInit(&SD2, NULL, notify2);
 309:../../os/hal/platforms/AVR/serial_lld.c **** #endif
 310:../../os/hal/platforms/AVR/serial_lld.c **** }
 311:../../os/hal/platforms/AVR/serial_lld.c **** 
 312:../../os/hal/platforms/AVR/serial_lld.c **** /**
 313:../../os/hal/platforms/AVR/serial_lld.c ****  * @brief   Low level serial driver configuration and (re)start.
 314:../../os/hal/platforms/AVR/serial_lld.c ****  *
 315:../../os/hal/platforms/AVR/serial_lld.c ****  * @param[in] sdp       pointer to a @p SerialDriver object
 316:../../os/hal/platforms/AVR/serial_lld.c ****  * @param[in] config    the architecture-dependent serial driver configuration.
 317:../../os/hal/platforms/AVR/serial_lld.c ****  *                      If this parameter is set to @p NULL then a default
 318:../../os/hal/platforms/AVR/serial_lld.c ****  *                      configuration is used.
 319:../../os/hal/platforms/AVR/serial_lld.c ****  *
 320:../../os/hal/platforms/AVR/serial_lld.c ****  * @notapi
 321:../../os/hal/platforms/AVR/serial_lld.c ****  */
 322:../../os/hal/platforms/AVR/serial_lld.c **** void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {
 330               		.loc 1 322 0
 331               		.cfi_startproc
 332               	.LVL21:
 333               	/* prologue: function */
 334               	/* frame size = 0 */
 335               	/* stack size = 0 */
 336               	.L__stack_usage = 0
 323:../../os/hal/platforms/AVR/serial_lld.c **** 
 324:../../os/hal/platforms/AVR/serial_lld.c ****   if (config == NULL)
 337               		.loc 1 324 0
 338 0106 6115      		cp r22,__zero_reg__
 339 0108 7105      		cpc r23,__zero_reg__
 340 010a 01F0      		breq .L43
 341               	.LVL22:
 342               	.L34:
 325:../../os/hal/platforms/AVR/serial_lld.c ****     config = &default_config;
 326:../../os/hal/platforms/AVR/serial_lld.c **** 
 327:../../os/hal/platforms/AVR/serial_lld.c **** #if USE_AVR_USART0
 328:../../os/hal/platforms/AVR/serial_lld.c ****   if (&SD1 == sdp) {
 343               		.loc 1 328 0
 344 010c 8050      		subi r24,lo8(SD1)
 345 010e 9040      		sbci r25,hi8(SD1)
 346 0110 01F0      		breq .L44
 347 0112 0895      		ret
 348               	.L44:
 349               	.LVL23:
 350               	.LBB10:
 351               	.LBB11:
 119:../../os/hal/platforms/AVR/serial_lld.c ****   UBRR0L = config->sc_brr;
 352               		.loc 1 119 0
 353 0114 FB01      		movw r30,r22
 354 0116 8081      		ld r24,Z
 355               	.LVL24:
 356 0118 8093 C400 		sts 196,r24
 120:../../os/hal/platforms/AVR/serial_lld.c ****   UBRR0H = config->sc_brr >> 8;
 357               		.loc 1 120 0
 358 011c 8181      		ldd r24,Z+1
 359 011e 8093 C500 		sts 197,r24
 121:../../os/hal/platforms/AVR/serial_lld.c ****   UCSR0A = 0;
 360               		.loc 1 121 0
 361 0122 1092 C000 		sts 192,__zero_reg__
 122:../../os/hal/platforms/AVR/serial_lld.c ****   UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);
 362               		.loc 1 122 0
 363 0126 88E9      		ldi r24,lo8(-104)
 364 0128 8093 C100 		sts 193,r24
 123:../../os/hal/platforms/AVR/serial_lld.c ****   switch (config->sc_bits_per_char) {
 365               		.loc 1 123 0
 366 012c 8281      		ldd r24,Z+2
 367 012e 8130      		cpi r24,lo8(1)
 368 0130 01F0      		breq .L38
 369 0132 00F0      		brlo .L37
 370 0134 8230      		cpi r24,lo8(2)
 371 0136 01F0      		breq .L39
 372 0138 8430      		cpi r24,lo8(4)
 373 013a 01F0      		breq .L45
 139:../../os/hal/platforms/AVR/serial_lld.c ****     UCSR0C = (1 << UCSZ00) | (1 << UCSZ01);
 374               		.loc 1 139 0
 375 013c 86E0      		ldi r24,lo8(6)
 376 013e 8093 C200 		sts 194,r24
 377 0142 0895      		ret
 378               	.LVL25:
 379               	.L43:
 380               	.LBE11:
 381               	.LBE10:
 325:../../os/hal/platforms/AVR/serial_lld.c ****     config = &default_config;
 382               		.loc 1 325 0
 383 0144 60E0      		ldi r22,lo8(default_config)
 384 0146 70E0      		ldi r23,hi8(default_config)
 385               	.LVL26:
 386 0148 00C0      		rjmp .L34
 387               	.LVL27:
 388               	.L37:
 389               	.LBB13:
 390               	.LBB12:
 125:../../os/hal/platforms/AVR/serial_lld.c ****     UCSR0C = 0;
 391               		.loc 1 125 0
 392 014a 1092 C200 		sts 194,__zero_reg__
 393 014e 0895      		ret
 394               	.L38:
 128:../../os/hal/platforms/AVR/serial_lld.c ****     UCSR0C = (1 << UCSZ00);
 395               		.loc 1 128 0
 396 0150 82E0      		ldi r24,lo8(2)
 397 0152 8093 C200 		sts 194,r24
 398 0156 0895      		ret
 399               	.L45:
 134:../../os/hal/platforms/AVR/serial_lld.c ****     UCSR0B |= (1 << UCSZ02);
 400               		.loc 1 134 0
 401 0158 8091 C100 		lds r24,193
 402 015c 8460      		ori r24,lo8(4)
 403 015e 8093 C100 		sts 193,r24
 135:../../os/hal/platforms/AVR/serial_lld.c ****     UCSR0C = (1 << UCSZ00) | (1 << UCSZ01);
 404               		.loc 1 135 0
 405 0162 86E0      		ldi r24,lo8(6)
 406 0164 8093 C200 		sts 194,r24
 407 0168 0895      		ret
 408               	.L39:
 131:../../os/hal/platforms/AVR/serial_lld.c ****     UCSR0C = (1 << UCSZ01);
 409               		.loc 1 131 0
 410 016a 84E0      		ldi r24,lo8(4)
 411 016c 8093 C200 		sts 194,r24
 412 0170 0895      		ret
 413               	.LBE12:
 414               	.LBE13:
 415               		.cfi_endproc
 416               	.LFE14:
 418               	.global	sd_lld_stop
 420               	sd_lld_stop:
 421               	.LFB15:
 329:../../os/hal/platforms/AVR/serial_lld.c ****     usart0_init(config);
 330:../../os/hal/platforms/AVR/serial_lld.c ****     return;
 331:../../os/hal/platforms/AVR/serial_lld.c ****   }
 332:../../os/hal/platforms/AVR/serial_lld.c **** #endif
 333:../../os/hal/platforms/AVR/serial_lld.c **** #if USE_AVR_USART1
 334:../../os/hal/platforms/AVR/serial_lld.c ****   if (&SD2 == sdp) {
 335:../../os/hal/platforms/AVR/serial_lld.c ****     usart1_init(config);
 336:../../os/hal/platforms/AVR/serial_lld.c ****     return;
 337:../../os/hal/platforms/AVR/serial_lld.c ****   }
 338:../../os/hal/platforms/AVR/serial_lld.c **** #endif
 339:../../os/hal/platforms/AVR/serial_lld.c **** }
 340:../../os/hal/platforms/AVR/serial_lld.c **** 
 341:../../os/hal/platforms/AVR/serial_lld.c **** /**
 342:../../os/hal/platforms/AVR/serial_lld.c ****  * @brief   Low level serial driver stop.
 343:../../os/hal/platforms/AVR/serial_lld.c ****  * @details De-initializes the USART, stops the associated clock, resets the
 344:../../os/hal/platforms/AVR/serial_lld.c ****  *          interrupt vector.
 345:../../os/hal/platforms/AVR/serial_lld.c ****  *
 346:../../os/hal/platforms/AVR/serial_lld.c ****  * @param[in] sdp       pointer to a @p SerialDriver object
 347:../../os/hal/platforms/AVR/serial_lld.c ****  *
 348:../../os/hal/platforms/AVR/serial_lld.c ****  * @notapi
 349:../../os/hal/platforms/AVR/serial_lld.c ****  */
 350:../../os/hal/platforms/AVR/serial_lld.c **** void sd_lld_stop(SerialDriver *sdp) {
 422               		.loc 1 350 0
 423               		.cfi_startproc
 424               	.LVL28:
 425               	/* prologue: function */
 426               	/* frame size = 0 */
 427               	/* stack size = 0 */
 428               	.L__stack_usage = 0
 351:../../os/hal/platforms/AVR/serial_lld.c **** 
 352:../../os/hal/platforms/AVR/serial_lld.c **** #if USE_AVR_USART0
 353:../../os/hal/platforms/AVR/serial_lld.c ****   if (&SD1 == sdp)
 429               		.loc 1 353 0
 430 0172 8050      		subi r24,lo8(SD1)
 431 0174 9040      		sbci r25,hi8(SD1)
 432 0176 01F0      		breq .L48
 433 0178 0895      		ret
 434               	.L48:
 435               	.LBB14:
 436               	.LBB15:
 148:../../os/hal/platforms/AVR/serial_lld.c ****   UCSR0A = 0;
 437               		.loc 1 148 0
 438 017a 1092 C000 		sts 192,__zero_reg__
 149:../../os/hal/platforms/AVR/serial_lld.c ****   UCSR0B = 0;
 439               		.loc 1 149 0
 440 017e 1092 C100 		sts 193,__zero_reg__
 150:../../os/hal/platforms/AVR/serial_lld.c ****   UCSR0C = 0;
 441               		.loc 1 150 0
 442 0182 1092 C200 		sts 194,__zero_reg__
 443 0186 0895      		ret
 444               	.LBE15:
 445               	.LBE14:
 446               		.cfi_endproc
 447               	.LFE15:
 449               		.comm	SD1,73,1
 450               		.section	.rodata
 453               	default_config:
 454 0000 6700      		.word	103
 455 0002 03        		.byte	3
 456               		.text
 457               	.Letext0:
 458               		.file 2 "/usr/local/cross/lib/gcc/avr/4.7.2/include/stddef.h"
 459               		.file 3 "/usr/local/cross/lib/gcc/avr/4.7.2/../../../../avr/include/stdint.h"
 460               		.file 4 "../../os/ports/GCC/AVR/chtypes.h"
 461               		.file 5 "../../os/kernel/include/chlists.h"
 462               		.file 6 "../../os/kernel/include/chthreads.h"
 463               		.file 7 "../../os/ports/GCC/AVR/chcore.h"
 464               		.file 8 "../../os/kernel/include/chmtx.h"
 465               		.file 9 "../../os/kernel/include/chevents.h"
 466               		.file 10 "../../os/kernel/include/chqueues.h"
 467               		.file 11 "../../os/hal/include/serial.h"
 468               		.file 12 "../../os/hal/platforms/AVR/serial_lld.h"
 469               		.file 13 "../../os/kernel/include/chschd.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 serial_lld.c
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccIuwHyc.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccIuwHyc.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccIuwHyc.s:4      *ABS*:000000000000003f __SREG__
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccIuwHyc.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccIuwHyc.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccIuwHyc.s:11     .text:0000000000000000 notify1
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccIuwHyc.s:34     .text:000000000000000c __vector_18
                            *COM*:0000000000000049 SD1
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccIuwHyc.s:186    .text:000000000000008c __vector_19
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccIuwHyc.s:306    .text:00000000000000f6 sd_lld_init
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccIuwHyc.s:328    .text:0000000000000106 sd_lld_start
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccIuwHyc.s:453    .rodata:0000000000000000 default_config
/var/folders/5n/p_75w94d66l9ssrldxqdhh700000gn/T//ccIuwHyc.s:420    .text:0000000000000172 sd_lld_stop

UNDEFINED SYMBOLS
sdIncomingDataI
chSchIsPreemptionRequired
chSchDoReschedule
chEvtBroadcastFlagsI
sdRequestDataI
sdObjectInit
__do_copy_data
__do_clear_bss
