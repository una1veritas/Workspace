
stm32f4-float-math_test.elf:     file format elf32-littlearm


Disassembly of section .text:

08000188 <GPIOPort_number>:
	uint8 ith;
	for (ith = 0 ; ith < 10 ; ith++ ) {
		if ( GPIOPort[ith] == port )
			return ith;
	}
	return 0;
 8000188:	4b06      	ldr	r3, [pc, #24]	; (80001a4 <GPIOPort_number+0x1c>)
#define NUM_DIGITAL_PINS            32
//#define NUM_ANALOG_INPUTS           8
//#define analogInputToDigitalPin(p)  ((p < 8) ? (p) + 24 : -1)


uint8 GPIOPort_number(GPIO_TypeDef * port) {
 800018a:	4602      	mov	r2, r0
	uint8 ith;
	for (ith = 0 ; ith < 10 ; ith++ ) {
 800018c:	2000      	movs	r0, #0
		if ( GPIOPort[ith] == port )
 800018e:	f853 1f04 	ldr.w	r1, [r3, #4]!
 8000192:	4291      	cmp	r1, r2
 8000194:	d004      	beq.n	80001a0 <GPIOPort_number+0x18>
//#define analogInputToDigitalPin(p)  ((p < 8) ? (p) + 24 : -1)


uint8 GPIOPort_number(GPIO_TypeDef * port) {
	uint8 ith;
	for (ith = 0 ; ith < 10 ; ith++ ) {
 8000196:	3001      	adds	r0, #1
 8000198:	b2c0      	uxtb	r0, r0
 800019a:	280a      	cmp	r0, #10
 800019c:	d1f7      	bne.n	800018e <GPIOPort_number+0x6>
		if ( GPIOPort[ith] == port )
			return ith;
	}
	return 0;
 800019e:	2000      	movs	r0, #0
}
 80001a0:	4770      	bx	lr
 80001a2:	bf00      	nop
 80001a4:	1ffffffc 	.word	0x1ffffffc

080001a8 <GPIOMode>:

void GPIOMode(GPIO_TypeDef * port, uint16 pins,
		GPIOMode_TypeDef mode,
		GPIOSpeed_TypeDef speed,
		GPIOOType_TypeDef otype,
		GPIOPuPd_TypeDef pull) {
 80001a8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80001ac:	f89d 6024 	ldrb.w	r6, [sp, #36]	; 0x24
 80001b0:	460d      	mov	r5, r1
 80001b2:	461f      	mov	r7, r3
	//  GPIO_PuPd_NOPULL = 0x00,
	//  GPIO_PuPd_UP     = 0x01,
	//  GPIO_PuPd_DOWN   = 0x02
	// }GPIOPuPd_TypeDef;

	if ( mode == GPIO_Mode_IN )
 80001b4:	4690      	mov	r8, r2
		pull = GPIO_PuPd_UP;
 80001b6:	2a00      	cmp	r2, #0
 80001b8:	bf08      	it	eq
 80001ba:	2601      	moveq	r6, #1

void GPIOMode(GPIO_TypeDef * port, uint16 pins,
		GPIOMode_TypeDef mode,
		GPIOSpeed_TypeDef speed,
		GPIOOType_TypeDef otype,
		GPIOPuPd_TypeDef pull) {
 80001bc:	4604      	mov	r4, r0
//	  GPIO_Speed_50MHz  = 0x02, /*!< Fast speed */
//	  GPIO_Speed_100MHz = 0x03  /*!< High speed on 30 pF (80 MHz Output max speed on 15 pF) */
//	}GPIOSpeed_TypeDef;

	// wake up the port
	RCC_AHB1PeriphClockCmd(GPIOPeripheral[GPIOPort_number(port)], (FunctionalState)ENABLE);
 80001be:	f7ff ffe3 	bl	8000188 <GPIOPort_number>
 80001c2:	4b0b      	ldr	r3, [pc, #44]	; (80001f0 <GPIOMode+0x48>)
 80001c4:	2101      	movs	r1, #1
 80001c6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80001ca:	f003 fc63 	bl	8003a94 <RCC_AHB1PeriphClockCmd>
	//
	GPIO_InitStructure.GPIO_Pin = pins;
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_Speed = speed;
	GPIO_InitStructure.GPIO_PuPd = pull;
	GPIO_InitStructure.GPIO_OType = otype;
 80001ce:	f89d 3020 	ldrb.w	r3, [sp, #32]
//	}GPIOSpeed_TypeDef;

	// wake up the port
	RCC_AHB1PeriphClockCmd(GPIOPeripheral[GPIOPort_number(port)], (FunctionalState)ENABLE);
	//
	GPIO_InitStructure.GPIO_Pin = pins;
 80001d2:	9500      	str	r5, [sp, #0]
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_Speed = speed;
	GPIO_InitStructure.GPIO_PuPd = pull;
	GPIO_InitStructure.GPIO_OType = otype;
	//
	GPIO_Init(port, &GPIO_InitStructure);
 80001d4:	4620      	mov	r0, r4
 80001d6:	4669      	mov	r1, sp

	// wake up the port
	RCC_AHB1PeriphClockCmd(GPIOPeripheral[GPIOPort_number(port)], (FunctionalState)ENABLE);
	//
	GPIO_InitStructure.GPIO_Pin = pins;
	GPIO_InitStructure.GPIO_Mode = mode;
 80001d8:	f88d 8004 	strb.w	r8, [sp, #4]
	GPIO_InitStructure.GPIO_Speed = speed;
 80001dc:	f88d 7005 	strb.w	r7, [sp, #5]
	GPIO_InitStructure.GPIO_PuPd = pull;
 80001e0:	f88d 6007 	strb.w	r6, [sp, #7]
	GPIO_InitStructure.GPIO_OType = otype;
 80001e4:	f88d 3006 	strb.w	r3, [sp, #6]
	//
	GPIO_Init(port, &GPIO_InitStructure);
 80001e8:	f002 fd4a 	bl	8002c80 <GPIO_Init>
}
 80001ec:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
 80001f0:	08006b5c 	.word	0x08006b5c

080001f4 <pinMode>:
	//  GPIO_PuPd_NOPULL = 0x00,
	//  GPIO_PuPd_UP     = 0x01,
	//  GPIO_PuPd_DOWN   = 0x02
	// }GPIOPuPd_TypeDef;

	if (pin >= NUM_DIGITAL_PINS) {
 80001f4:	281f      	cmp	r0, #31


void pinMode(uint8 pin,
		GPIOMode_TypeDef mode,
		GPIOSpeed_TypeDef clk,
		GPIOPuPd_TypeDef pupd) {
 80001f6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80001fa:	4604      	mov	r4, r0
 80001fc:	460d      	mov	r5, r1
 80001fe:	4616      	mov	r6, r2
 8000200:	4699      	mov	r9, r3
	//  GPIO_PuPd_NOPULL = 0x00,
	//  GPIO_PuPd_UP     = 0x01,
	//  GPIO_PuPd_DOWN   = 0x02
	// }GPIOPuPd_TypeDef;

	if (pin >= NUM_DIGITAL_PINS) {
 8000202:	d91c      	bls.n	800023e <pinMode+0x4a>
		// wake up the port
		RCC_AHB1PeriphClockCmd(digitalPinToGPIOPeriph(pin), (FunctionalState) ENABLE);
 8000204:	f8df 8040 	ldr.w	r8, [pc, #64]	; 8000248 <pinMode+0x54>
 8000208:	0947      	lsrs	r7, r0, #5
		//
		GPIO_InitStructure.GPIO_Pin   = digitalPinToGPIOPin(pin);
 800020a:	f004 041f 	and.w	r4, r4, #31
 800020e:	eb08 0444 	add.w	r4, r8, r4, lsl #1
	//  GPIO_PuPd_DOWN   = 0x02
	// }GPIOPuPd_TypeDef;

	if (pin >= NUM_DIGITAL_PINS) {
		// wake up the port
		RCC_AHB1PeriphClockCmd(digitalPinToGPIOPeriph(pin), (FunctionalState) ENABLE);
 8000212:	f858 0027 	ldr.w	r0, [r8, r7, lsl #2]
 8000216:	2101      	movs	r1, #1
 8000218:	f003 fc3c 	bl	8003a94 <RCC_AHB1PeriphClockCmd>
		//
		GPIO_InitStructure.GPIO_Pin   = digitalPinToGPIOPin(pin);
 800021c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
		GPIO_InitStructure.GPIO_Mode  = mode;
 800021e:	f88d 5004 	strb.w	r5, [sp, #4]

	if (pin >= NUM_DIGITAL_PINS) {
		// wake up the port
		RCC_AHB1PeriphClockCmd(digitalPinToGPIOPeriph(pin), (FunctionalState) ENABLE);
		//
		GPIO_InitStructure.GPIO_Pin   = digitalPinToGPIOPin(pin);
 8000222:	9300      	str	r3, [sp, #0]
		GPIO_InitStructure.GPIO_Mode  = mode;
		GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000224:	2300      	movs	r3, #0
 8000226:	f88d 3006 	strb.w	r3, [sp, #6]
		GPIO_InitStructure.GPIO_PuPd  = pupd;
		GPIO_InitStructure.GPIO_Speed = clk;
		//
		GPIO_Init((GPIO_TypeDef*) digitalPinToGPIOPort(pin), &GPIO_InitStructure);
 800022a:	4b06      	ldr	r3, [pc, #24]	; (8000244 <pinMode+0x50>)
		RCC_AHB1PeriphClockCmd(digitalPinToGPIOPeriph(pin), (FunctionalState) ENABLE);
		//
		GPIO_InitStructure.GPIO_Pin   = digitalPinToGPIOPin(pin);
		GPIO_InitStructure.GPIO_Mode  = mode;
		GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
		GPIO_InitStructure.GPIO_PuPd  = pupd;
 800022c:	f88d 9007 	strb.w	r9, [sp, #7]
		GPIO_InitStructure.GPIO_Speed = clk;
		//
		GPIO_Init((GPIO_TypeDef*) digitalPinToGPIOPort(pin), &GPIO_InitStructure);
 8000230:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
		//
		GPIO_InitStructure.GPIO_Pin   = digitalPinToGPIOPin(pin);
		GPIO_InitStructure.GPIO_Mode  = mode;
		GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
		GPIO_InitStructure.GPIO_PuPd  = pupd;
		GPIO_InitStructure.GPIO_Speed = clk;
 8000234:	f88d 6005 	strb.w	r6, [sp, #5]
		//
		GPIO_Init((GPIO_TypeDef*) digitalPinToGPIOPort(pin), &GPIO_InitStructure);
 8000238:	4669      	mov	r1, sp
 800023a:	f002 fd21 	bl	8002c80 <GPIO_Init>
	} else {
		// mapping from arduino pins to original pins must be implemented.
	}
}
 800023e:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
 8000242:	bf00      	nop
 8000244:	20000000 	.word	0x20000000
 8000248:	08006b5c 	.word	0x08006b5c

0800024c <digitalWrite>:

/*
 static void turnOffPWM(uint8_t timer) {
 }
 */
void digitalWrite(uint8 pin, uint8 val) {
 800024c:	0942      	lsrs	r2, r0, #5
 800024e:	b510      	push	{r4, lr}
 8000250:	4b09      	ldr	r3, [pc, #36]	; (8000278 <digitalWrite+0x2c>)
 8000252:	4c0a      	ldr	r4, [pc, #40]	; (800027c <digitalWrite+0x30>)
	if ( val ) {
		//? Bit_SET : Bit_RESET ));
		GPIO_SetBits((GPIO_TypeDef*) digitalPinToGPIOPort(pin), digitalPinToGPIOPin(pin));
 8000254:	f000 001f 	and.w	r0, r0, #31
 8000258:	eb04 0440 	add.w	r4, r4, r0, lsl #1
 800025c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
/*
 static void turnOffPWM(uint8_t timer) {
 }
 */
void digitalWrite(uint8 pin, uint8 val) {
	if ( val ) {
 8000260:	b121      	cbz	r1, 800026c <digitalWrite+0x20>
		//? Bit_SET : Bit_RESET ));
		GPIO_SetBits((GPIO_TypeDef*) digitalPinToGPIOPort(pin), digitalPinToGPIOPin(pin));
 8000262:	8d21      	ldrh	r1, [r4, #40]	; 0x28
	} else {
		GPIO_ResetBits((GPIO_TypeDef*) digitalPinToGPIOPort(pin), digitalPinToGPIOPin(pin));
	}
}
 8000264:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 }
 */
void digitalWrite(uint8 pin, uint8 val) {
	if ( val ) {
		//? Bit_SET : Bit_RESET ));
		GPIO_SetBits((GPIO_TypeDef*) digitalPinToGPIOPort(pin), digitalPinToGPIOPin(pin));
 8000268:	f002 bd7b 	b.w	8002d62 <GPIO_SetBits>
	} else {
		GPIO_ResetBits((GPIO_TypeDef*) digitalPinToGPIOPort(pin), digitalPinToGPIOPin(pin));
 800026c:	8d21      	ldrh	r1, [r4, #40]	; 0x28
	}
}
 800026e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void digitalWrite(uint8 pin, uint8 val) {
	if ( val ) {
		//? Bit_SET : Bit_RESET ));
		GPIO_SetBits((GPIO_TypeDef*) digitalPinToGPIOPort(pin), digitalPinToGPIOPin(pin));
	} else {
		GPIO_ResetBits((GPIO_TypeDef*) digitalPinToGPIOPort(pin), digitalPinToGPIOPin(pin));
 8000272:	f002 bd78 	b.w	8002d66 <GPIO_ResetBits>
 8000276:	bf00      	nop
 8000278:	20000000 	.word	0x20000000
 800027c:	08006b5c 	.word	0x08006b5c

08000280 <GPIOWrite>:
	}
}

void GPIOWrite(GPIO_TypeDef * port, uint16 portValue) {
	GPIO_Write(port, portValue);
 8000280:	f002 bd78 	b.w	8002d74 <GPIO_Write>

08000284 <digitalRead>:
}

uint16_t digitalRead(uint8 pin) {
	uint8 mode = (digitalPinToGPIOPort(pin)->MODER) >> ((uint16_t)digitalPinToGPIOPin(pin) * 2);
 8000284:	0941      	lsrs	r1, r0, #5
 8000286:	4a0f      	ldr	r2, [pc, #60]	; (80002c4 <digitalRead+0x40>)

void GPIOWrite(GPIO_TypeDef * port, uint16 portValue) {
	GPIO_Write(port, portValue);
}

uint16_t digitalRead(uint8 pin) {
 8000288:	b508      	push	{r3, lr}
 800028a:	4603      	mov	r3, r0
	uint8 mode = (digitalPinToGPIOPort(pin)->MODER) >> ((uint16_t)digitalPinToGPIOPin(pin) * 2);
 800028c:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 8000290:	490d      	ldr	r1, [pc, #52]	; (80002c8 <digitalRead+0x44>)
 8000292:	6802      	ldr	r2, [r0, #0]
 8000294:	f003 031f 	and.w	r3, r3, #31
 8000298:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800029c:	8d19      	ldrh	r1, [r3, #40]	; 0x28
 800029e:	004b      	lsls	r3, r1, #1
 80002a0:	fa32 f303 	lsrs.w	r3, r2, r3
	if ( mode == GPIO_Mode_OUT )
 80002a4:	b2db      	uxtb	r3, r3
 80002a6:	2b01      	cmp	r3, #1
 80002a8:	d105      	bne.n	80002b6 <digitalRead+0x32>
		return (GPIO_ReadOutputDataBit((GPIO_TypeDef*)digitalPinToGPIOPort(pin),
 80002aa:	f002 fd51 	bl	8002d50 <GPIO_ReadOutputDataBit>
 80002ae:	3000      	adds	r0, #0
 80002b0:	bf18      	it	ne
 80002b2:	2001      	movne	r0, #1
 80002b4:	bd08      	pop	{r3, pc}
				(uint16_t) digitalPinToGPIOPin(pin)) ?
				HIGH : LOW );
	return (GPIO_ReadInputDataBit((GPIO_TypeDef*)digitalPinToGPIOPort(pin),
 80002b6:	f002 fd42 	bl	8002d3e <GPIO_ReadInputDataBit>
 80002ba:	3000      	adds	r0, #0
 80002bc:	bf18      	it	ne
 80002be:	2001      	movne	r0, #1
			(uint16_t)digitalPinToGPIOPin(pin)) ?
			HIGH : LOW );
}
 80002c0:	bd08      	pop	{r3, pc}
 80002c2:	bf00      	nop
 80002c4:	20000000 	.word	0x20000000
 80002c8:	08006b5c 	.word	0x08006b5c

080002cc <digitalPin>:

uint8_t digitalPin(const GPIO_TypeDef * port, uint16 pin) {
 80002cc:	b510      	push	{r4, lr}
	uint8_t portNo;
	for(portNo = 0; portNo < 7; portNo++) {
 80002ce:	4a07      	ldr	r2, [pc, #28]	; (80002ec <digitalPin+0x20>)
 80002d0:	2300      	movs	r3, #0
		if ( GPIOPort[portNo] == port )
 80002d2:	f852 4f04 	ldr.w	r4, [r2, #4]!
 80002d6:	4284      	cmp	r4, r0
 80002d8:	d003      	beq.n	80002e2 <digitalPin+0x16>
			HIGH : LOW );
}

uint8_t digitalPin(const GPIO_TypeDef * port, uint16 pin) {
	uint8_t portNo;
	for(portNo = 0; portNo < 7; portNo++) {
 80002da:	3301      	adds	r3, #1
 80002dc:	b2db      	uxtb	r3, r3
 80002de:	2b07      	cmp	r3, #7
 80002e0:	d1f7      	bne.n	80002d2 <digitalPin+0x6>
		if ( GPIOPort[portNo] == port )
			break;
	}
	return ((portNo<<5) + pin);
 80002e2:	eb01 1343 	add.w	r3, r1, r3, lsl #5

}
 80002e6:	b2d8      	uxtb	r0, r3
 80002e8:	bd10      	pop	{r4, pc}
 80002ea:	bf00      	nop
 80002ec:	1ffffffc 	.word	0x1ffffffc

080002f0 <SysTick_Handler>:
 */
//#include "stm32f4xx_it.h"
#include "systick.h"

void SysTick_Handler(void) {
	SysTick_counts++; /* increment timeTicks counter */
 80002f0:	4b02      	ldr	r3, [pc, #8]	; (80002fc <SysTick_Handler+0xc>)
 80002f2:	681a      	ldr	r2, [r3, #0]
 80002f4:	3201      	adds	r2, #1
 80002f6:	601a      	str	r2, [r3, #0]
}
 80002f8:	4770      	bx	lr
 80002fa:	bf00      	nop
 80002fc:	20000480 	.word	0x20000480

08000300 <delay>:

void delay(const uint32_t dlyTicks) {
	uint32_t currTicks = SysTick_counts;
 8000300:	4b03      	ldr	r3, [pc, #12]	; (8000310 <delay+0x10>)
 8000302:	681a      	ldr	r2, [r3, #0]

	while ((SysTick_counts - currTicks) < dlyTicks)
 8000304:	6819      	ldr	r1, [r3, #0]
 8000306:	1a89      	subs	r1, r1, r2
 8000308:	4281      	cmp	r1, r0
 800030a:	d3fb      	bcc.n	8000304 <delay+0x4>
		;
}
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop
 8000310:	20000480 	.word	0x20000480

08000314 <SysTick_Init>:

void SysTick_Start() {
	SysTick_Init(1000);
}

void SysTick_Init(uint32 ticks) {
 8000314:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000316:	4604      	mov	r4, r0
	RCC_ClocksTypeDef RCC_Clocks;
	RCC_GetClocksFreq(&RCC_Clocks);
 8000318:	4668      	mov	r0, sp
 800031a:	f003 fb4b 	bl	80039b4 <RCC_GetClocksFreq>
	SysTick_Config(RCC_Clocks.HCLK_Frequency / ticks);
 800031e:	9b01      	ldr	r3, [sp, #4]
 8000320:	fbb3 f4f4 	udiv	r4, r3, r4
    \return          0  Function succeeded
    \return          1  Function failed
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 8000324:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
 8000328:	d20a      	bcs.n	8000340 <SysTick_Init+0x2c>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 800032a:	4b06      	ldr	r3, [pc, #24]	; (8000344 <SysTick_Init+0x30>)
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 800032c:	4a06      	ldr	r2, [pc, #24]	; (8000348 <SysTick_Init+0x34>)
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 800032e:	3c01      	subs	r4, #1
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000330:	21f0      	movs	r1, #240	; 0xf0
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8000332:	605c      	str	r4, [r3, #4]
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000334:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8000338:	2200      	movs	r2, #0
 800033a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800033c:	2207      	movs	r2, #7
 800033e:	601a      	str	r2, [r3, #0]
}
 8000340:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
 8000342:	bf00      	nop
 8000344:	e000e010 	.word	0xe000e010
 8000348:	e000ed00 	.word	0xe000ed00

0800034c <SysTick_Start>:
	while ((SysTick_counts - currTicks) < dlyTicks)
		;
}

void SysTick_Start() {
	SysTick_Init(1000);
 800034c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000350:	e7e0      	b.n	8000314 <SysTick_Init>

08000352 <systicks>:
	RCC_GetClocksFreq(&RCC_Clocks);
	SysTick_Config(RCC_Clocks.HCLK_Frequency / ticks);
}

uint32 systicks() {
	return SysTick_counts;
 8000352:	4b01      	ldr	r3, [pc, #4]	; (8000358 <systicks+0x6>)
 8000354:	6818      	ldr	r0, [r3, #0]
}
 8000356:	4770      	bx	lr
 8000358:	20000480 	.word	0x20000480

0800035c <usart_begin>:

#include "favorites.h"
#include "gpio_digital.h"
#include "usart.h"

void usart_begin(uint32 baud) {
 800035c:	b5f0      	push	{r4, r5, r6, r7, lr}
//	GPIO_InitTypeDef GPIO_InitStruct; // this is for the GPIO pins used as TX and RX
	USART_InitTypeDef USART_InitStruct; // this is for the USART1 initilization
//	NVIC_InitTypeDef NVIC_InitStructure; // this is used to configure the NVIC (nested vector interrupt controller)

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, (FunctionalState) ENABLE);
 800035e:	2101      	movs	r1, #1

#include "favorites.h"
#include "gpio_digital.h"
#include "usart.h"

void usart_begin(uint32 baud) {
 8000360:	b087      	sub	sp, #28
//	GPIO_InitTypeDef GPIO_InitStruct; // this is for the GPIO pins used as TX and RX
	USART_InitTypeDef USART_InitStruct; // this is for the USART1 initilization
//	NVIC_InitTypeDef NVIC_InitStructure; // this is used to configure the NVIC (nested vector interrupt controller)

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, (FunctionalState) ENABLE);
	GPIOMode(GPIOB, GPIO_Pin_10 | GPIO_Pin_11, ALTFUNC, FASTSPEED, PUSHPULL, PULLUP);
 8000362:	4e1f      	ldr	r6, [pc, #124]	; (80003e0 <usart_begin+0x84>)

#include "favorites.h"
#include "gpio_digital.h"
#include "usart.h"

void usart_begin(uint32 baud) {
 8000364:	4607      	mov	r7, r0
//	GPIO_InitTypeDef GPIO_InitStruct; // this is for the GPIO pins used as TX and RX
	USART_InitTypeDef USART_InitStruct; // this is for the USART1 initilization
//	NVIC_InitTypeDef NVIC_InitStructure; // this is used to configure the NVIC (nested vector interrupt controller)

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, (FunctionalState) ENABLE);
 8000366:	2002      	movs	r0, #2
 8000368:	f003 fb94 	bl	8003a94 <RCC_AHB1PeriphClockCmd>
	GPIOMode(GPIOB, GPIO_Pin_10 | GPIO_Pin_11, ALTFUNC, FASTSPEED, PUSHPULL, PULLUP);
 800036c:	2202      	movs	r2, #2
 800036e:	2400      	movs	r4, #0
 8000370:	4613      	mov	r3, r2
 8000372:	2501      	movs	r5, #1
 8000374:	4630      	mov	r0, r6
 8000376:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 800037a:	e88d 0030 	stmia.w	sp, {r4, r5}
 800037e:	f7ff ff13 	bl	80001a8 <GPIOMode>
	/* USART3 clock enable */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, (FunctionalState) ENABLE);
 8000382:	4629      	mov	r1, r5
 8000384:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000388:	f003 fba8 	bl	8003adc <RCC_APB1PeriphClockCmd>

	digitalWrite(PD12, LOW);
 800038c:	208c      	movs	r0, #140	; 0x8c
 800038e:	4621      	mov	r1, r4
 8000390:	f7ff ff5c 	bl	800024c <digitalWrite>
	digitalWrite(PD15, LOW);
 8000394:	208f      	movs	r0, #143	; 0x8f
 8000396:	4621      	mov	r1, r4
 8000398:	f7ff ff58 	bl	800024c <digitalWrite>

	GPIO_PinAFConfig(GPIOB, GPIO_PinSource10, GPIO_AF_USART3 ); // TX -- PB10
 800039c:	4630      	mov	r0, r6
 800039e:	210a      	movs	r1, #10
 80003a0:	2207      	movs	r2, #7
 80003a2:	f002 fced 	bl	8002d80 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource11, GPIO_AF_USART3 ); // RX -- PB11
 80003a6:	4630      	mov	r0, r6
 80003a8:	210b      	movs	r1, #11
 80003aa:	2207      	movs	r2, #7
 80003ac:	f002 fce8 	bl	8002d80 <GPIO_PinAFConfig>

	USART_InitStruct.USART_BaudRate = baud;	// the baudrate is set to the value we passed into this init function
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
 80003b0:	f8ad 400c 	strh.w	r4, [sp, #12]
	USART_InitStruct.USART_StopBits = USART_StopBits_1;	// we want 1 stop bit (standard)
 80003b4:	f8ad 400e 	strh.w	r4, [sp, #14]
	USART_InitStruct.USART_Parity = USART_Parity_No;// we don't want a parity bit (standard)
 80003b8:	f8ad 4010 	strh.w	r4, [sp, #16]
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
 80003bc:	f8ad 4014 	strh.w	r4, [sp, #20]
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver

	USART_Init(USART3, &USART_InitStruct); // again all the properties are passed to the USART_Init function which takes care of all the bit setting
 80003c0:	4c08      	ldr	r4, [pc, #32]	; (80003e4 <usart_begin+0x88>)
	digitalWrite(PD15, LOW);

	GPIO_PinAFConfig(GPIOB, GPIO_PinSource10, GPIO_AF_USART3 ); // TX -- PB10
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource11, GPIO_AF_USART3 ); // RX -- PB11

	USART_InitStruct.USART_BaudRate = baud;	// the baudrate is set to the value we passed into this init function
 80003c2:	9702      	str	r7, [sp, #8]
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
	USART_InitStruct.USART_StopBits = USART_StopBits_1;	// we want 1 stop bit (standard)
	USART_InitStruct.USART_Parity = USART_Parity_No;// we don't want a parity bit (standard)
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver
 80003c4:	230c      	movs	r3, #12

	USART_Init(USART3, &USART_InitStruct); // again all the properties are passed to the USART_Init function which takes care of all the bit setting
 80003c6:	4620      	mov	r0, r4
 80003c8:	a902      	add	r1, sp, #8
	USART_InitStruct.USART_BaudRate = baud;	// the baudrate is set to the value we passed into this init function
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
	USART_InitStruct.USART_StopBits = USART_StopBits_1;	// we want 1 stop bit (standard)
	USART_InitStruct.USART_Parity = USART_Parity_No;// we don't want a parity bit (standard)
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver
 80003ca:	f8ad 3012 	strh.w	r3, [sp, #18]

	USART_Init(USART3, &USART_InitStruct); // again all the properties are passed to the USART_Init function which takes care of all the bit setting
 80003ce:	f005 faa3 	bl	8005918 <USART_Init>
	 NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;	// the USART1 interrupts are globally enabled
	 NVIC_Init(&NVIC_InitStructure);	// the properties are passed to the NVIC_Init function which takes care of the low level stuff
	 */

	// finally this enables the complete USART1 peripheral
	USART_Cmd(USART3, (FunctionalState) ENABLE);
 80003d2:	4620      	mov	r0, r4
 80003d4:	4629      	mov	r1, r5
 80003d6:	f005 fb1c 	bl	8005a12 <USART_Cmd>

}
 80003da:	b007      	add	sp, #28
 80003dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003de:	bf00      	nop
 80003e0:	40020400 	.word	0x40020400
 80003e4:	40004800 	.word	0x40004800

080003e8 <usart_write>:
 *
 * Note 2: At the moment it takes a volatile char because the received_string variable
 * 		   declared as volatile char --> otherwise the compiler will spit out warnings
 * */

size_t usart_write(uint8 ch) {
 80003e8:	b508      	push	{r3, lr}
	while (!(USART3->SR & 0x00000040))
 80003ea:	4b08      	ldr	r3, [pc, #32]	; (800040c <usart_write+0x24>)
 *
 * Note 2: At the moment it takes a volatile char because the received_string variable
 * 		   declared as volatile char --> otherwise the compiler will spit out warnings
 * */

size_t usart_write(uint8 ch) {
 80003ec:	4601      	mov	r1, r0
	while (!(USART3->SR & 0x00000040))
 80003ee:	881a      	ldrh	r2, [r3, #0]
 80003f0:	0652      	lsls	r2, r2, #25
 80003f2:	d5fc      	bpl.n	80003ee <usart_write+0x6>
	;
	USART_SendData(USART3, (uint16) ch);
 80003f4:	4805      	ldr	r0, [pc, #20]	; (800040c <usart_write+0x24>)
 80003f6:	f005 fb39 	bl	8005a6c <USART_SendData>
	/* Loop until the end of transmission */
	while (USART_GetFlagStatus(USART3, USART_FLAG_TC )
 80003fa:	4804      	ldr	r0, [pc, #16]	; (800040c <usart_write+0x24>)
 80003fc:	2140      	movs	r1, #64	; 0x40
 80003fe:	f005 fbe2 	bl	8005bc6 <USART_GetFlagStatus>
 8000402:	2800      	cmp	r0, #0
 8000404:	d0f9      	beq.n	80003fa <usart_write+0x12>
			== RESET) {
	}
	return 1;
}
 8000406:	2001      	movs	r0, #1
 8000408:	bd08      	pop	{r3, pc}
 800040a:	bf00      	nop
 800040c:	40004800 	.word	0x40004800

08000410 <usart_print>:


size_t usart_print(const char * s) {
 8000410:	b538      	push	{r3, r4, r5, lr}
 8000412:	4605      	mov	r5, r0
	size_t n = 0;
 8000414:	2400      	movs	r4, #0
	while ( *s ) {
 8000416:	e002      	b.n	800041e <usart_print+0xe>
		usart_write(*s);
 8000418:	f7ff ffe6 	bl	80003e8 <usart_write>
		s++;
		n++;
 800041c:	3401      	adds	r4, #1
}


size_t usart_print(const char * s) {
	size_t n = 0;
	while ( *s ) {
 800041e:	5d28      	ldrb	r0, [r5, r4]
 8000420:	2800      	cmp	r0, #0
 8000422:	d1f9      	bne.n	8000418 <usart_print+0x8>
		usart_write(*s);
		s++;
		n++;
	}
	return n;
}
 8000424:	4620      	mov	r0, r4
 8000426:	bd38      	pop	{r3, r4, r5, pc}

08000428 <usart_printNumber>:


size_t usart_printNumber(uint32 val) {
 8000428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t n = 0;
	uint8 base = 10;
	uint32 divider = 1000000000;
	uint8 msd = 0;
 800042c:	2300      	movs	r3, #0
	}
	return n;
}


size_t usart_printNumber(uint32 val) {
 800042e:	240a      	movs	r4, #10
	size_t n = 0;
	uint8 base = 10;
	uint32 divider = 1000000000;
 8000430:	4f0c      	ldr	r7, [pc, #48]	; (8000464 <usart_printNumber+0x3c>)
	}
	return n;
}


size_t usart_printNumber(uint32 val) {
 8000432:	4680      	mov	r8, r0
	size_t n = 0;
 8000434:	461d      	mov	r5, r3
	uint8 base = 10;
	uint32 divider = 1000000000;
	uint8 msd = 0;
	uint8 digit;
	while ( divider > 0 ) {
		digit = val / divider % base;
 8000436:	4626      	mov	r6, r4
 8000438:	fbb8 f2f7 	udiv	r2, r8, r7
 800043c:	fbb2 f0f6 	udiv	r0, r2, r6
 8000440:	fb06 2010 	mls	r0, r6, r0, r2
 8000444:	b2c0      	uxtb	r0, r0
		if ( digit || msd ) {
 8000446:	b900      	cbnz	r0, 800044a <usart_printNumber+0x22>
 8000448:	b12b      	cbz	r3, 8000456 <usart_printNumber+0x2e>
			usart_write('0'+(digit>10 ? digit+7 : digit));
 800044a:	3030      	adds	r0, #48	; 0x30
 800044c:	b2c0      	uxtb	r0, r0
 800044e:	f7ff ffcb 	bl	80003e8 <usart_write>
			msd = 1;
			n++;
 8000452:	3501      	adds	r5, #1
	uint8 digit;
	while ( divider > 0 ) {
		digit = val / divider % base;
		if ( digit || msd ) {
			usart_write('0'+(digit>10 ? digit+7 : digit));
			msd = 1;
 8000454:	2301      	movs	r3, #1
	size_t n = 0;
	uint8 base = 10;
	uint32 divider = 1000000000;
	uint8 msd = 0;
	uint8 digit;
	while ( divider > 0 ) {
 8000456:	3c01      	subs	r4, #1
		if ( digit || msd ) {
			usart_write('0'+(digit>10 ? digit+7 : digit));
			msd = 1;
			n++;
		}
		divider /= base;
 8000458:	fbb7 f7f6 	udiv	r7, r7, r6
	size_t n = 0;
	uint8 base = 10;
	uint32 divider = 1000000000;
	uint8 msd = 0;
	uint8 digit;
	while ( divider > 0 ) {
 800045c:	d1ec      	bne.n	8000438 <usart_printNumber+0x10>
			n++;
		}
		divider /= base;
	}
	return n;
}
 800045e:	4628      	mov	r0, r5
 8000460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000464:	3b9aca00 	.word	0x3b9aca00

08000468 <usart_printFloat>:

size_t usart_printFloat(float val, uint8 prec) {
 8000468:	b570      	push	{r4, r5, r6, lr}
	size_t n = 0;
	if ( val < 0 ) {
 800046a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800046e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		divider /= base;
	}
	return n;
}

size_t usart_printFloat(float val, uint8 prec) {
 8000472:	ed2d 8b04 	vpush	{d8-d9}
 8000476:	4606      	mov	r6, r0
 8000478:	eeb0 8a40 	vmov.f32	s16, s0
	size_t n = 0;
	if ( val < 0 ) {
 800047c:	d506      	bpl.n	800048c <usart_printFloat+0x24>
		usart_write('-');
 800047e:	202d      	movs	r0, #45	; 0x2d
 8000480:	f7ff ffb2 	bl	80003e8 <usart_write>
		val = -val;
 8000484:	eeb1 8a48 	vneg.f32	s16, s16
		n++;
 8000488:	2401      	movs	r4, #1
 800048a:	e000      	b.n	800048e <usart_printFloat+0x26>
	}
	return n;
}

size_t usart_printFloat(float val, uint8 prec) {
	size_t n = 0;
 800048c:	2400      	movs	r4, #0
	if ( val < 0 ) {
		usart_write('-');
		val = -val;
		n++;
	}
	uint32 intpart = (uint32)val;
 800048e:	eefc 7ac8 	vcvt.u32.f32	s15, s16
	val -= intpart;
 8000492:	eef8 8a67 	vcvt.f32.u32	s17, s15
	n += usart_printNumber(intpart);
 8000496:	ee17 0a90 	vmov	r0, s15
		usart_write('-');
		val = -val;
		n++;
	}
	uint32 intpart = (uint32)val;
	val -= intpart;
 800049a:	ee38 8a68 	vsub.f32	s16, s16, s17
	n += usart_printNumber(intpart);
 800049e:	f7ff ffc3 	bl	8000428 <usart_printNumber>
	int i;
	if ( val > 0 ) {
 80004a2:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80004a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		val = -val;
		n++;
	}
	uint32 intpart = (uint32)val;
	val -= intpart;
	n += usart_printNumber(intpart);
 80004aa:	4404      	add	r4, r0
	int i;
	if ( val > 0 ) {
 80004ac:	dd17      	ble.n	80004de <usart_printFloat+0x76>
		usart_write('.');
 80004ae:	202e      	movs	r0, #46	; 0x2e
 80004b0:	f7ff ff9a 	bl	80003e8 <usart_write>
		n++;
		for(i = 0; i < prec; i++) {
 80004b4:	2500      	movs	r5, #0
			val *= 10;
 80004b6:	eeb2 9a04 	vmov.f32	s18, #36	; 0x24
	n += usart_printNumber(intpart);
	int i;
	if ( val > 0 ) {
		usart_write('.');
		n++;
		for(i = 0; i < prec; i++) {
 80004ba:	e00c      	b.n	80004d6 <usart_printFloat+0x6e>
			val *= 10;
 80004bc:	ee68 8a09 	vmul.f32	s17, s16, s18
	n += usart_printNumber(intpart);
	int i;
	if ( val > 0 ) {
		usart_write('.');
		n++;
		for(i = 0; i < prec; i++) {
 80004c0:	3501      	adds	r5, #1
			val *= 10;
			usart_printNumber((uint32)val);
 80004c2:	eebc 8ae8 	vcvt.u32.f32	s16, s17
 80004c6:	ee18 0a10 	vmov	r0, s16
 80004ca:	f7ff ffad 	bl	8000428 <usart_printNumber>
			val -= (uint32)val;
 80004ce:	eeb8 8a48 	vcvt.f32.u32	s16, s16
 80004d2:	ee38 8ac8 	vsub.f32	s16, s17, s16
	n += usart_printNumber(intpart);
	int i;
	if ( val > 0 ) {
		usart_write('.');
		n++;
		for(i = 0; i < prec; i++) {
 80004d6:	42b5      	cmp	r5, r6
 80004d8:	dbf0      	blt.n	80004bc <usart_printFloat+0x54>
	val -= intpart;
	n += usart_printNumber(intpart);
	int i;
	if ( val > 0 ) {
		usart_write('.');
		n++;
 80004da:	3601      	adds	r6, #1
 80004dc:	19a4      	adds	r4, r4, r6
			val -= (uint32)val;
			n++;
		}
	}
	return n;
}
 80004de:	4620      	mov	r0, r4
 80004e0:	ecbd 8b04 	vpop	{d8-d9}
 80004e4:	bd70      	pop	{r4, r5, r6, pc}
 80004e6:	bf00      	nop

080004e8 <NVIC_PriorityGroupConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 80004e8:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 80004ec:	4b02      	ldr	r3, [pc, #8]	; (80004f8 <NVIC_PriorityGroupConfig+0x10>)
 80004ee:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 80004f2:	60d8      	str	r0, [r3, #12]
}
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop
 80004f8:	e000ed00 	.word	0xe000ed00

080004fc <NVIC_Init>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80004fc:	78c3      	ldrb	r3, [r0, #3]
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80004fe:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000500:	b30b      	cbz	r3, 8000546 <NVIC_Init+0x4a>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000502:	4b17      	ldr	r3, [pc, #92]	; (8000560 <NVIC_Init+0x64>)
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000504:	7842      	ldrb	r2, [r0, #1]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000506:	68db      	ldr	r3, [r3, #12]
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000508:	7884      	ldrb	r4, [r0, #2]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800050a:	43db      	mvns	r3, r3
 800050c:	f3c3 2302 	ubfx	r3, r3, #8, #3
    tmppre = (0x4 - tmppriority);
 8000510:	f1c3 0104 	rsb	r1, r3, #4
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000514:	b2c9      	uxtb	r1, r1
 8000516:	fa12 f101 	lsls.w	r1, r2, r1
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
 800051a:	220f      	movs	r2, #15
 800051c:	411a      	asrs	r2, r3
    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800051e:	7803      	ldrb	r3, [r0, #0]
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000520:	b2c9      	uxtb	r1, r1
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000522:	4022      	ands	r2, r4
 8000524:	430a      	orrs	r2, r1
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000526:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800052a:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
        
    tmppriority = tmppriority << 0x04;
 800052e:	0112      	lsls	r2, r2, #4
 8000530:	b2d2      	uxtb	r2, r2
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000532:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000536:	7803      	ldrb	r3, [r0, #0]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000538:	2201      	movs	r2, #1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800053a:	0959      	lsrs	r1, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800053c:	f003 031f 	and.w	r3, r3, #31
 8000540:	fa12 f303 	lsls.w	r3, r2, r3
 8000544:	e007      	b.n	8000556 <NVIC_Init+0x5a>
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000546:	7803      	ldrb	r3, [r0, #0]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000548:	2201      	movs	r2, #1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800054a:	0959      	lsrs	r1, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800054c:	f003 031f 	and.w	r3, r3, #31
 8000550:	fa12 f303 	lsls.w	r3, r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000554:	3120      	adds	r1, #32
 8000556:	4a03      	ldr	r2, [pc, #12]	; (8000564 <NVIC_Init+0x68>)
 8000558:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800055c:	bd10      	pop	{r4, pc}
 800055e:	bf00      	nop
 8000560:	e000ed00 	.word	0xe000ed00
 8000564:	e000e100 	.word	0xe000e100

08000568 <NVIC_SetVectorTable>:
{ 
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 8000568:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
 800056c:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 8000570:	4b01      	ldr	r3, [pc, #4]	; (8000578 <NVIC_SetVectorTable+0x10>)
 8000572:	4301      	orrs	r1, r0
 8000574:	6099      	str	r1, [r3, #8]
}
 8000576:	4770      	bx	lr
 8000578:	e000ed00 	.word	0xe000ed00

0800057c <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT: Low Power Sleep on Exit.
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
 800057c:	4b04      	ldr	r3, [pc, #16]	; (8000590 <NVIC_SystemLPConfig+0x14>)
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
  {
    SCB->SCR |= LowPowerMode;
 800057e:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 8000580:	b109      	cbz	r1, 8000586 <NVIC_SystemLPConfig+0xa>
  {
    SCB->SCR |= LowPowerMode;
 8000582:	4310      	orrs	r0, r2
 8000584:	e001      	b.n	800058a <NVIC_SystemLPConfig+0xe>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 8000586:	ea22 0000 	bic.w	r0, r2, r0
 800058a:	6118      	str	r0, [r3, #16]
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	e000ed00 	.word	0xe000ed00

08000594 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
 8000594:	4b04      	ldr	r3, [pc, #16]	; (80005a8 <SysTick_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8000596:	681a      	ldr	r2, [r3, #0]
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 8000598:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 800059a:	bf0c      	ite	eq
 800059c:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 80005a0:	f022 0204 	bicne.w	r2, r2, #4
 80005a4:	601a      	str	r2, [r3, #0]
 80005a6:	4770      	bx	lr
 80005a8:	e000e010 	.word	0xe000e010

080005ac <ADC_DeInit>:
  *         values.
  * @param  None
  * @retval None
  */
void ADC_DeInit(void)
{
 80005ac:	b508      	push	{r3, lr}
  /* Enable all ADCs reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, ENABLE);
 80005ae:	2101      	movs	r1, #1
 80005b0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80005b4:	f003 fada 	bl	8003b6c <RCC_APB2PeriphResetCmd>
  
  /* Release all ADCs from reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, DISABLE);
 80005b8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80005bc:	2100      	movs	r1, #0
}
 80005be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* Enable all ADCs reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, ENABLE);
  
  /* Release all ADCs from reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, DISABLE);
 80005c2:	f003 bad3 	b.w	8003b6c <RCC_APB2PeriphResetCmd>

080005c6 <ADC_Init>:
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 80005c6:	6843      	ldr	r3, [r0, #4]
  tmpreg1 &= CR1_CLEAR_MASK;
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 80005c8:	680a      	ldr	r2, [r1, #0]
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 80005ca:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80005ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 80005d2:	4313      	orrs	r3, r2
 80005d4:	790a      	ldrb	r2, [r1, #4]
 80005d6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                                   ADC_InitStruct->ADC_Resolution);
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 80005da:	6043      	str	r3, [r0, #4]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 80005dc:	68ca      	ldr	r2, [r1, #12]
 80005de:	690b      	ldr	r3, [r1, #16]
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 80005e0:	b530      	push	{r4, r5, lr}
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 80005e2:	431a      	orrs	r2, r3
                                   ADC_InitStruct->ADC_Resolution);
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 80005e4:	6884      	ldr	r4, [r0, #8]
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 80005e6:	688d      	ldr	r5, [r1, #8]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 80005e8:	4b08      	ldr	r3, [pc, #32]	; (800060c <ADC_Init+0x46>)
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 80005ea:	432a      	orrs	r2, r5
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 80005ec:	4023      	ands	r3, r4
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 80005ee:	4313      	orrs	r3, r2
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 80005f0:	794a      	ldrb	r2, [r1, #5]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 80005f2:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 80005f6:	6083      	str	r3, [r0, #8]
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 80005f8:	7d0b      	ldrb	r3, [r1, #20]
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 80005fa:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 80005fc:	3b01      	subs	r3, #1
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 80005fe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 8000602:	b2db      	uxtb	r3, r3
 8000604:	ea42 5303 	orr.w	r3, r2, r3, lsl #20
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 8000608:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 800060a:	bd30      	pop	{r4, r5, pc}
 800060c:	c0fff7fd 	.word	0xc0fff7fd

08000610 <ADC_StructInit>:
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
  /* Initialize the ADC_Mode member */
  ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;
 8000610:	2300      	movs	r3, #0
 8000612:	6003      	str	r3, [r0, #0]

  /* initialize the ADC_ScanConvMode member */
  ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 8000614:	7103      	strb	r3, [r0, #4]

  /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 8000616:	7143      	strb	r3, [r0, #5]

  /* Initialize the ADC_ExternalTrigConvEdge member */
  ADC_InitStruct->ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 8000618:	6083      	str	r3, [r0, #8]

  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 800061a:	60c3      	str	r3, [r0, #12]

  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 800061c:	6103      	str	r3, [r0, #16]

  /* Initialize the ADC_NbrOfConversion member */
  ADC_InitStruct->ADC_NbrOfConversion = 1;
 800061e:	2301      	movs	r3, #1
 8000620:	7503      	strb	r3, [r0, #20]
}
 8000622:	4770      	bx	lr

08000624 <ADC_CommonInit>:
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 8000624:	4a07      	ldr	r2, [pc, #28]	; (8000644 <ADC_CommonInit+0x20>)
  
  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 8000626:	4b08      	ldr	r3, [pc, #32]	; (8000648 <ADC_CommonInit+0x24>)
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 8000628:	6851      	ldr	r1, [r2, #4]
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
  *         that contains the configuration information for  All ADCs peripherals.
  * @retval None
  */
void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 800062a:	b510      	push	{r4, lr}
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
  
  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 800062c:	400b      	ands	r3, r1
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 800062e:	e890 0012 	ldmia.w	r0, {r1, r4}
 8000632:	4321      	orrs	r1, r4
                        ADC_CommonInitStruct->ADC_Prescaler | 
 8000634:	6884      	ldr	r4, [r0, #8]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8000636:	68c0      	ldr	r0, [r0, #12]
                        ADC_CommonInitStruct->ADC_Prescaler | 
 8000638:	4321      	orrs	r1, r4
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 800063a:	4301      	orrs	r1, r0
 800063c:	430b      	orrs	r3, r1
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
                        
  /* Write to ADC CCR */
  ADC->CCR = tmpreg1;
 800063e:	6053      	str	r3, [r2, #4]
}
 8000640:	bd10      	pop	{r4, pc}
 8000642:	bf00      	nop
 8000644:	40012300 	.word	0x40012300
 8000648:	fffc30e0 	.word	0xfffc30e0

0800064c <ADC_CommonStructInit>:
  * @retval None
  */
void ADC_CommonStructInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
  /* Initialize the ADC_Mode member */
  ADC_CommonInitStruct->ADC_Mode = ADC_Mode_Independent;
 800064c:	2300      	movs	r3, #0
 800064e:	6003      	str	r3, [r0, #0]

  /* initialize the ADC_Prescaler member */
  ADC_CommonInitStruct->ADC_Prescaler = ADC_Prescaler_Div2;
 8000650:	6043      	str	r3, [r0, #4]

  /* Initialize the ADC_DMAAccessMode member */
  ADC_CommonInitStruct->ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 8000652:	6083      	str	r3, [r0, #8]

  /* Initialize the ADC_TwoSamplingDelay member */
  ADC_CommonInitStruct->ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 8000654:	60c3      	str	r3, [r0, #12]
}
 8000656:	4770      	bx	lr

08000658 <ADC_Cmd>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 8000658:	6883      	ldr	r3, [r0, #8]
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800065a:	b111      	cbz	r1, 8000662 <ADC_Cmd+0xa>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 800065c:	f043 0301 	orr.w	r3, r3, #1
 8000660:	e001      	b.n	8000666 <ADC_Cmd+0xe>
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 8000662:	f023 0301 	bic.w	r3, r3, #1
 8000666:	6083      	str	r3, [r0, #8]
 8000668:	4770      	bx	lr

0800066a <ADC_AnalogWatchdogCmd>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_ANALOG_WATCHDOG(ADC_AnalogWatchdog));
  
  /* Get the old register value */
  tmpreg = ADCx->CR1;
 800066a:	6843      	ldr	r3, [r0, #4]
  
  /* Clear AWDEN, JAWDEN and AWDSGL bits */
  tmpreg &= CR1_AWDMode_RESET;
 800066c:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000670:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  
  /* Set the analog watchdog enable mode */
  tmpreg |= ADC_AnalogWatchdog;
 8000674:	430b      	orrs	r3, r1
  
  /* Store the new register value */
  ADCx->CR1 = tmpreg;
 8000676:	6043      	str	r3, [r0, #4]
}
 8000678:	4770      	bx	lr

0800067a <ADC_AnalogWatchdogThresholdsConfig>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_THRESHOLD(HighThreshold));
  assert_param(IS_ADC_THRESHOLD(LowThreshold));
  
  /* Set the ADCx high threshold */
  ADCx->HTR = HighThreshold;
 800067a:	6241      	str	r1, [r0, #36]	; 0x24
  
  /* Set the ADCx low threshold */
  ADCx->LTR = LowThreshold;
 800067c:	6282      	str	r2, [r0, #40]	; 0x28
}
 800067e:	4770      	bx	lr

08000680 <ADC_AnalogWatchdogSingleChannelConfig>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  
  /* Get the old register value */
  tmpreg = ADCx->CR1;
 8000680:	6843      	ldr	r3, [r0, #4]
  
  /* Clear the Analog watchdog channel select bits */
  tmpreg &= CR1_AWDCH_RESET;
 8000682:	f023 031f 	bic.w	r3, r3, #31
  
  /* Set the Analog watchdog channel */
  tmpreg |= ADC_Channel;
 8000686:	430b      	orrs	r3, r1
  
  /* Store the new register value */
  ADCx->CR1 = tmpreg;
 8000688:	6043      	str	r3, [r0, #4]
}
 800068a:	4770      	bx	lr

0800068c <ADC_TempSensorVrefintCmd>:
  * @param  NewState: new state of the temperature sensor and Vrefint channels.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_TempSensorVrefintCmd(FunctionalState NewState)                
{
 800068c:	4b04      	ldr	r3, [pc, #16]	; (80006a0 <ADC_TempSensorVrefintCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the temperature sensor and Vrefint channel*/
    ADC->CCR |= (uint32_t)ADC_CCR_TSVREFE;
 800068e:	685a      	ldr	r2, [r3, #4]
  */
void ADC_TempSensorVrefintCmd(FunctionalState NewState)                
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000690:	b110      	cbz	r0, 8000698 <ADC_TempSensorVrefintCmd+0xc>
  {
    /* Enable the temperature sensor and Vrefint channel*/
    ADC->CCR |= (uint32_t)ADC_CCR_TSVREFE;
 8000692:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000696:	e001      	b.n	800069c <ADC_TempSensorVrefintCmd+0x10>
  }
  else
  {
    /* Disable the temperature sensor and Vrefint channel*/
    ADC->CCR &= (uint32_t)(~ADC_CCR_TSVREFE);
 8000698:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800069c:	605a      	str	r2, [r3, #4]
 800069e:	4770      	bx	lr
 80006a0:	40012300 	.word	0x40012300

080006a4 <ADC_VBATCmd>:
  * @param  NewState: new state of the VBAT channel.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_VBATCmd(FunctionalState NewState)                             
{
 80006a4:	4b04      	ldr	r3, [pc, #16]	; (80006b8 <ADC_VBATCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= (uint32_t)ADC_CCR_VBATE;
 80006a6:	685a      	ldr	r2, [r3, #4]
  */
void ADC_VBATCmd(FunctionalState NewState)                             
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80006a8:	b110      	cbz	r0, 80006b0 <ADC_VBATCmd+0xc>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= (uint32_t)ADC_CCR_VBATE;
 80006aa:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80006ae:	e001      	b.n	80006b4 <ADC_VBATCmd+0x10>
  }
  else
  {
    /* Disable the VBAT channel*/
    ADC->CCR &= (uint32_t)(~ADC_CCR_VBATE);
 80006b0:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	4770      	bx	lr
 80006b8:	40012300 	.word	0x40012300

080006bc <ADC_RegularChannelConfig>:
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 80006bc:	2909      	cmp	r1, #9
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 80006be:	b570      	push	{r4, r5, r6, lr}
 80006c0:	b20c      	sxth	r4, r1
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 80006c2:	d90c      	bls.n	80006de <ADC_RegularChannelConfig+0x22>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 80006c4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80006c8:	3c1e      	subs	r4, #30
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 80006ca:	68c6      	ldr	r6, [r0, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 80006cc:	2507      	movs	r5, #7
 80006ce:	40a5      	lsls	r5, r4
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 80006d0:	ea26 0505 	bic.w	r5, r6, r5
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 80006d4:	40a3      	lsls	r3, r4
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80006d6:	ea45 0403 	orr.w	r4, r5, r3
    
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 80006da:	60c4      	str	r4, [r0, #12]
 80006dc:	e00a      	b.n	80006f4 <ADC_RegularChannelConfig+0x38>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 80006de:	6906      	ldr	r6, [r0, #16]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 80006e0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80006e4:	2507      	movs	r5, #7
 80006e6:	40a5      	lsls	r5, r4
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 80006e8:	ea26 0505 	bic.w	r5, r6, r5
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 80006ec:	fa13 f404 	lsls.w	r4, r3, r4
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80006f0:	432c      	orrs	r4, r5
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 80006f2:	6104      	str	r4, [r0, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 80006f4:	2a06      	cmp	r2, #6
 80006f6:	d80c      	bhi.n	8000712 <ADC_RegularChannelConfig+0x56>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 80006f8:	2305      	movs	r3, #5
 80006fa:	3a01      	subs	r2, #1
 80006fc:	435a      	muls	r2, r3
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 80006fe:	6b44      	ldr	r4, [r0, #52]	; 0x34
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 8000700:	231f      	movs	r3, #31
 8000702:	4093      	lsls	r3, r2
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000704:	ea24 0303 	bic.w	r3, r4, r3
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 8000708:	4091      	lsls	r1, r2
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 800070a:	ea43 0201 	orr.w	r2, r3, r1
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 800070e:	6342      	str	r2, [r0, #52]	; 0x34
 8000710:	bd70      	pop	{r4, r5, r6, pc}
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
 8000712:	2a0c      	cmp	r2, #12
 8000714:	b212      	sxth	r2, r2
 8000716:	d80c      	bhi.n	8000732 <ADC_RegularChannelConfig+0x76>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 8000718:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800071c:	3a23      	subs	r2, #35	; 0x23
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 800071e:	6b04      	ldr	r4, [r0, #48]	; 0x30
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 8000720:	231f      	movs	r3, #31
 8000722:	4093      	lsls	r3, r2
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000724:	ea24 0303 	bic.w	r3, r4, r3
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 8000728:	4091      	lsls	r1, r2
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 800072a:	ea43 0201 	orr.w	r2, r3, r1
    
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 800072e:	6302      	str	r2, [r0, #48]	; 0x30
 8000730:	bd70      	pop	{r4, r5, r6, pc}
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 8000732:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8000736:	3a41      	subs	r2, #65	; 0x41
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 8000738:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 800073a:	231f      	movs	r3, #31
 800073c:	4093      	lsls	r3, r2
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 800073e:	ea24 0303 	bic.w	r3, r4, r3
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 8000742:	4091      	lsls	r1, r2
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000744:	ea43 0201 	orr.w	r2, r3, r1
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 8000748:	62c2      	str	r2, [r0, #44]	; 0x2c
 800074a:	bd70      	pop	{r4, r5, r6, pc}

0800074c <ADC_SoftwareStartConv>:
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Enable the selected ADC conversion for regular group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800074c:	6883      	ldr	r3, [r0, #8]
 800074e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000752:	6083      	str	r3, [r0, #8]
}
 8000754:	4770      	bx	lr

08000756 <ADC_GetSoftwareStartConvStatus>:
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Check the status of SWSTART bit */
  if ((ADCx->CR2 & ADC_CR2_JSWSTART) != (uint32_t)RESET)
 8000756:	6880      	ldr	r0, [r0, #8]
    bitstatus = RESET;
  }
  
  /* Return the SWSTART bit status */
  return  bitstatus;
}
 8000758:	f3c0 5080 	ubfx	r0, r0, #22, #1
 800075c:	4770      	bx	lr

0800075e <ADC_EOCOnEachRegularChannelCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC EOC rising on each regular channel conversion */
    ADCx->CR2 |= (uint32_t)ADC_CR2_EOCS;
 800075e:	6883      	ldr	r3, [r0, #8]
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000760:	b111      	cbz	r1, 8000768 <ADC_EOCOnEachRegularChannelCmd+0xa>
  {
    /* Enable the selected ADC EOC rising on each regular channel conversion */
    ADCx->CR2 |= (uint32_t)ADC_CR2_EOCS;
 8000762:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000766:	e001      	b.n	800076c <ADC_EOCOnEachRegularChannelCmd+0xe>
  }
  else
  {
    /* Disable the selected ADC EOC rising on each regular channel conversion */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_EOCS);
 8000768:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800076c:	6083      	str	r3, [r0, #8]
 800076e:	4770      	bx	lr

08000770 <ADC_ContinuousModeCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC continuous conversion mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_CONT;
 8000770:	6883      	ldr	r3, [r0, #8]
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000772:	b111      	cbz	r1, 800077a <ADC_ContinuousModeCmd+0xa>
  {
    /* Enable the selected ADC continuous conversion mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_CONT;
 8000774:	f043 0302 	orr.w	r3, r3, #2
 8000778:	e001      	b.n	800077e <ADC_ContinuousModeCmd+0xe>
  }
  else
  {
    /* Disable the selected ADC continuous conversion mode */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_CONT);
 800077a:	f023 0302 	bic.w	r3, r3, #2
 800077e:	6083      	str	r3, [r0, #8]
 8000780:	4770      	bx	lr

08000782 <ADC_DiscModeChannelCountConfig>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_REGULAR_DISC_NUMBER(Number));
  
  /* Get the old register value */
  tmpreg1 = ADCx->CR1;
 8000782:	6843      	ldr	r3, [r0, #4]
  
  /* Clear the old discontinuous mode channel count */
  tmpreg1 &= CR1_DISCNUM_RESET;
  
  /* Set the discontinuous mode channel count */
  tmpreg2 = Number - 1;
 8000784:	3901      	subs	r1, #1
  
  /* Get the old register value */
  tmpreg1 = ADCx->CR1;
  
  /* Clear the old discontinuous mode channel count */
  tmpreg1 &= CR1_DISCNUM_RESET;
 8000786:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
  
  /* Set the discontinuous mode channel count */
  tmpreg2 = Number - 1;
  tmpreg1 |= tmpreg2 << 13;
 800078a:	ea43 3341 	orr.w	r3, r3, r1, lsl #13
  
  /* Store the new register value */
  ADCx->CR1 = tmpreg1;
 800078e:	6043      	str	r3, [r0, #4]
}
 8000790:	4770      	bx	lr

08000792 <ADC_DiscModeCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC regular discontinuous mode */
    ADCx->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000792:	6843      	ldr	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000794:	b111      	cbz	r1, 800079c <ADC_DiscModeCmd+0xa>
  {
    /* Enable the selected ADC regular discontinuous mode */
    ADCx->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000796:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800079a:	e001      	b.n	80007a0 <ADC_DiscModeCmd+0xe>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_DISCEN);
 800079c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80007a0:	6043      	str	r3, [r0, #4]
 80007a2:	4770      	bx	lr

080007a4 <ADC_GetConversionValue>:
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 80007a4:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
 80007a6:	b280      	uxth	r0, r0
 80007a8:	4770      	bx	lr

080007aa <ADC_GetMultiModeConversionValue>:
  *           Data[31:16]: these bits contain alternatively the regular data of ADC2, ADC1 and ADC3.           
  */
uint32_t ADC_GetMultiModeConversionValue(void)
{
  /* Return the multi mode conversion value */
  return (*(__IO uint32_t *) CDR_ADDRESS);
 80007aa:	4b01      	ldr	r3, [pc, #4]	; (80007b0 <ADC_GetMultiModeConversionValue+0x6>)
 80007ac:	6818      	ldr	r0, [r3, #0]
}
 80007ae:	4770      	bx	lr
 80007b0:	40012308 	.word	0x40012308

080007b4 <ADC_DMACmd>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
 80007b4:	6883      	ldr	r3, [r0, #8]
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80007b6:	b111      	cbz	r1, 80007be <ADC_DMACmd+0xa>
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
 80007b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007bc:	e001      	b.n	80007c2 <ADC_DMACmd+0xe>
  }
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
 80007be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80007c2:	6083      	str	r3, [r0, #8]
 80007c4:	4770      	bx	lr

080007c6 <ADC_DMARequestAfterLastTransferCmd>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
 80007c6:	6883      	ldr	r3, [r0, #8]
void ADC_DMARequestAfterLastTransferCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80007c8:	b111      	cbz	r1, 80007d0 <ADC_DMARequestAfterLastTransferCmd+0xa>
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
 80007ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007ce:	e001      	b.n	80007d4 <ADC_DMARequestAfterLastTransferCmd+0xe>
  }
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
 80007d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80007d4:	6083      	str	r3, [r0, #8]
 80007d6:	4770      	bx	lr

080007d8 <ADC_MultiModeDMARequestAfterLastTransferCmd>:
  *         by ADC_CommonInitStruct.ADC_DMAAccessMode structure member) is 
  *          ADC_DMAAccessMode_1, ADC_DMAAccessMode_2 or ADC_DMAAccessMode_3.     
  * @retval None
  */
void ADC_MultiModeDMARequestAfterLastTransferCmd(FunctionalState NewState)
{
 80007d8:	4b04      	ldr	r3, [pc, #16]	; (80007ec <ADC_MultiModeDMARequestAfterLastTransferCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADC->CCR |= (uint32_t)ADC_CCR_DDS;
 80007da:	685a      	ldr	r2, [r3, #4]
  */
void ADC_MultiModeDMARequestAfterLastTransferCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80007dc:	b110      	cbz	r0, 80007e4 <ADC_MultiModeDMARequestAfterLastTransferCmd+0xc>
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADC->CCR |= (uint32_t)ADC_CCR_DDS;
 80007de:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80007e2:	e001      	b.n	80007e8 <ADC_MultiModeDMARequestAfterLastTransferCmd+0x10>
  }
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADC->CCR &= (uint32_t)(~ADC_CCR_DDS);
 80007e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80007e8:	605a      	str	r2, [r3, #4]
 80007ea:	4770      	bx	lr
 80007ec:	40012300 	.word	0x40012300

080007f0 <ADC_InjectedChannelConfig>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_INJECTED_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 80007f0:	2909      	cmp	r1, #9
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_InjectedChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 80007f2:	b570      	push	{r4, r5, r6, lr}
 80007f4:	b20c      	sxth	r4, r1
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_INJECTED_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 80007f6:	d90c      	bls.n	8000812 <ADC_InjectedChannelConfig+0x22>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3*(ADC_Channel - 10));
 80007f8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80007fc:	3c1e      	subs	r4, #30
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 80007fe:	68c6      	ldr	r6, [r0, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3*(ADC_Channel - 10));
 8000800:	2507      	movs	r5, #7
 8000802:	40a5      	lsls	r5, r4
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8000804:	ea26 0505 	bic.w	r5, r6, r5
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3*(ADC_Channel - 10));
 8000808:	40a3      	lsls	r3, r4
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 800080a:	ea45 0403 	orr.w	r4, r5, r3
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 800080e:	60c4      	str	r4, [r0, #12]
 8000810:	e00a      	b.n	8000828 <ADC_InjectedChannelConfig+0x38>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8000812:	6906      	ldr	r6, [r0, #16]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 8000814:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8000818:	2507      	movs	r5, #7
 800081a:	40a5      	lsls	r5, r4
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 800081c:	ea26 0505 	bic.w	r5, r6, r5
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 8000820:	fa13 f404 	lsls.w	r4, r3, r4
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8000824:	432c      	orrs	r4, r5
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8000826:	6104      	str	r4, [r0, #16]
  }
  /* Rank configuration */
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
 8000828:	6b83      	ldr	r3, [r0, #56]	; 0x38
  /* Get JL value: Number = JL+1 */
  tmpreg3 =  (tmpreg1 & JSQR_JL_SET)>> 20;
 800082a:	f3c3 5401 	ubfx	r4, r3, #20, #2
  /* Calculate the mask to clear: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = JSQR_JSQ_SET << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 800082e:	1b12      	subs	r2, r2, r4
 8000830:	3202      	adds	r2, #2
 8000832:	b2d2      	uxtb	r2, r2
 8000834:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8000838:	241f      	movs	r4, #31
 800083a:	4094      	lsls	r4, r2
  /* Clear the old JSQx bits for the selected rank */
  tmpreg1 &= ~tmpreg2;
 800083c:	ea23 0304 	bic.w	r3, r3, r4
  /* Calculate the mask to set: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = (uint32_t)ADC_Channel << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 8000840:	4091      	lsls	r1, r2
  /* Set the JSQx bits for the selected rank */
  tmpreg1 |= tmpreg2;
 8000842:	430b      	orrs	r3, r1
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
 8000844:	6383      	str	r3, [r0, #56]	; 0x38
}
 8000846:	bd70      	pop	{r4, r5, r6, pc}

08000848 <ADC_InjectedSequencerLengthConfig>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_LENGTH(Length));
  
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
 8000848:	6b83      	ldr	r3, [r0, #56]	; 0x38
  
  /* Clear the old injected sequence length JL bits */
  tmpreg1 &= JSQR_JL_RESET;
  
  /* Set the injected sequence length JL bits */
  tmpreg2 = Length - 1; 
 800084a:	3901      	subs	r1, #1
  
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
  
  /* Clear the old injected sequence length JL bits */
  tmpreg1 &= JSQR_JL_RESET;
 800084c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
  
  /* Set the injected sequence length JL bits */
  tmpreg2 = Length - 1; 
  tmpreg1 |= tmpreg2 << 20;
 8000850:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
  
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
 8000854:	6383      	str	r3, [r0, #56]	; 0x38
}
 8000856:	4770      	bx	lr

08000858 <ADC_SetInjectedOffset>:
  * @param  Offset: the offset value for the selected ADC injected channel
  *          This parameter must be a 12bit value.
  * @retval None
  */
void ADC_SetInjectedOffset(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel, uint16_t Offset)
{
 8000858:	b082      	sub	sp, #8
    __IO uint32_t tmp = 0;
 800085a:	2300      	movs	r3, #0
 800085c:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
  assert_param(IS_ADC_OFFSET(Offset));
  
  tmp = (uint32_t)ADCx;
 800085e:	9001      	str	r0, [sp, #4]
  tmp += ADC_InjectedChannel;
 8000860:	9b01      	ldr	r3, [sp, #4]
 8000862:	18cb      	adds	r3, r1, r3
 8000864:	9301      	str	r3, [sp, #4]
  
  /* Set the selected injected channel data offset */
 *(__IO uint32_t *) tmp = (uint32_t)Offset;
 8000866:	9b01      	ldr	r3, [sp, #4]
 8000868:	601a      	str	r2, [r3, #0]
}
 800086a:	b002      	add	sp, #8
 800086c:	4770      	bx	lr

0800086e <ADC_ExternalTrigInjectedConvConfig>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_EXT_INJEC_TRIG(ADC_ExternalTrigInjecConv));
  
  /* Get the old register value */
  tmpreg = ADCx->CR2;
 800086e:	6883      	ldr	r3, [r0, #8]
  
  /* Clear the old external event selection for injected group */
  tmpreg &= CR2_JEXTSEL_RESET;
 8000870:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  
  /* Set the external event selection for injected group */
  tmpreg |= ADC_ExternalTrigInjecConv;
 8000874:	430b      	orrs	r3, r1
  
  /* Store the new register value */
  ADCx->CR2 = tmpreg;
 8000876:	6083      	str	r3, [r0, #8]
}
 8000878:	4770      	bx	lr

0800087a <ADC_ExternalTrigInjectedConvEdgeConfig>:
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(ADC_ExternalTrigInjecConvEdge));
  /* Get the old register value */
  tmpreg = ADCx->CR2;
 800087a:	6883      	ldr	r3, [r0, #8]
  /* Clear the old external trigger edge for injected group */
  tmpreg &= CR2_JEXTEN_RESET;
 800087c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
  /* Set the new external trigger edge for injected group */
  tmpreg |= ADC_ExternalTrigInjecConvEdge;
 8000880:	430b      	orrs	r3, r1
  /* Store the new register value */
  ADCx->CR2 = tmpreg;
 8000882:	6083      	str	r3, [r0, #8]
}
 8000884:	4770      	bx	lr

08000886 <ADC_SoftwareStartInjectedConv>:
void ADC_SoftwareStartInjectedConv(ADC_TypeDef* ADCx)
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Enable the selected ADC conversion for injected group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_JSWSTART;
 8000886:	6883      	ldr	r3, [r0, #8]
 8000888:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800088c:	6083      	str	r3, [r0, #8]
}
 800088e:	4770      	bx	lr

08000890 <ADC_GetSoftwareStartInjectedConvCmdStatus>:
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Check the status of JSWSTART bit */
  if ((ADCx->CR2 & ADC_CR2_JSWSTART) != (uint32_t)RESET)
 8000890:	6880      	ldr	r0, [r0, #8]
    /* JSWSTART bit is reset */
    bitstatus = RESET;
  }
  /* Return the JSWSTART bit status */
  return  bitstatus;
}
 8000892:	f3c0 5080 	ubfx	r0, r0, #22, #1
 8000896:	4770      	bx	lr

08000898 <ADC_AutoInjectedConvCmd>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC automatic injected group conversion */
    ADCx->CR1 |= (uint32_t)ADC_CR1_JAUTO;
 8000898:	6843      	ldr	r3, [r0, #4]
void ADC_AutoInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800089a:	b111      	cbz	r1, 80008a2 <ADC_AutoInjectedConvCmd+0xa>
  {
    /* Enable the selected ADC automatic injected group conversion */
    ADCx->CR1 |= (uint32_t)ADC_CR1_JAUTO;
 800089c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008a0:	e001      	b.n	80008a6 <ADC_AutoInjectedConvCmd+0xe>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_JAUTO);
 80008a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80008a6:	6043      	str	r3, [r0, #4]
 80008a8:	4770      	bx	lr

080008aa <ADC_InjectedDiscModeCmd>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC injected discontinuous mode */
    ADCx->CR1 |= (uint32_t)ADC_CR1_JDISCEN;
 80008aa:	6843      	ldr	r3, [r0, #4]
void ADC_InjectedDiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80008ac:	b111      	cbz	r1, 80008b4 <ADC_InjectedDiscModeCmd+0xa>
  {
    /* Enable the selected ADC injected discontinuous mode */
    ADCx->CR1 |= (uint32_t)ADC_CR1_JDISCEN;
 80008ae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008b2:	e001      	b.n	80008b8 <ADC_InjectedDiscModeCmd+0xe>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_JDISCEN);
 80008b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80008b8:	6043      	str	r3, [r0, #4]
 80008ba:	4770      	bx	lr

080008bc <ADC_GetInjectedConversionValue>:
  *            @arg ADC_InjectedChannel_3: Injected Channel3 selected
  *            @arg ADC_InjectedChannel_4: Injected Channel4 selected
  * @retval The Data conversion value.
  */
uint16_t ADC_GetInjectedConversionValue(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel)
{
 80008bc:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	9301      	str	r3, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));

  tmp = (uint32_t)ADCx;
 80008c2:	9001      	str	r0, [sp, #4]
  tmp += ADC_InjectedChannel + JDR_OFFSET;
 80008c4:	9b01      	ldr	r3, [sp, #4]
 80008c6:	3328      	adds	r3, #40	; 0x28
 80008c8:	185b      	adds	r3, r3, r1
 80008ca:	9301      	str	r3, [sp, #4]
  
  /* Returns the selected injected channel conversion data value */
  return (uint16_t) (*(__IO uint32_t*)  tmp); 
 80008cc:	9b01      	ldr	r3, [sp, #4]
 80008ce:	6818      	ldr	r0, [r3, #0]
}
 80008d0:	b280      	uxth	r0, r0
 80008d2:	b002      	add	sp, #8
 80008d4:	4770      	bx	lr

080008d6 <ADC_ITConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_ADC_IT(ADC_IT)); 

  /* Get the ADC IT index */
  itmask = (uint8_t)ADC_IT;
  itmask = (uint32_t)0x01 << itmask;    
 80008d6:	2301      	movs	r3, #1
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_ADC_IT(ADC_IT)); 

  /* Get the ADC IT index */
  itmask = (uint8_t)ADC_IT;
 80008d8:	b2c9      	uxtb	r1, r1
  itmask = (uint32_t)0x01 << itmask;    
 80008da:	fa13 f101 	lsls.w	r1, r3, r1

  if (NewState != DISABLE)
  {
    /* Enable the selected ADC interrupts */
    ADCx->CR1 |= itmask;
 80008de:	6843      	ldr	r3, [r0, #4]

  /* Get the ADC IT index */
  itmask = (uint8_t)ADC_IT;
  itmask = (uint32_t)0x01 << itmask;    

  if (NewState != DISABLE)
 80008e0:	b10a      	cbz	r2, 80008e6 <ADC_ITConfig+0x10>
  {
    /* Enable the selected ADC interrupts */
    ADCx->CR1 |= itmask;
 80008e2:	4319      	orrs	r1, r3
 80008e4:	e001      	b.n	80008ea <ADC_ITConfig+0x14>
  }
  else
  {
    /* Disable the selected ADC interrupts */
    ADCx->CR1 &= (~(uint32_t)itmask);
 80008e6:	ea23 0101 	bic.w	r1, r3, r1
 80008ea:	6041      	str	r1, [r0, #4]
 80008ec:	4770      	bx	lr

080008ee <ADC_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 80008ee:	6803      	ldr	r3, [r0, #0]
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 80008f0:	4219      	tst	r1, r3
    /* ADC_FLAG is reset */
    bitstatus = RESET;
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
}
 80008f2:	bf0c      	ite	eq
 80008f4:	2000      	moveq	r0, #0
 80008f6:	2001      	movne	r0, #1
 80008f8:	4770      	bx	lr

080008fa <ADC_ClearFlag>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CLEAR_FLAG(ADC_FLAG));

  /* Clear the selected ADC flags */
  ADCx->SR = ~(uint32_t)ADC_FLAG;
 80008fa:	43c9      	mvns	r1, r1
 80008fc:	6001      	str	r1, [r0, #0]
}
 80008fe:	4770      	bx	lr

08000900 <ADC_GetITStatus>:

  /* Get the ADC IT index */
  itmask = ADC_IT >> 8;

  /* Get the ADC_IT enable bit status */
  enablestatus = (ADCx->CR1 & ((uint32_t)0x01 << (uint8_t)ADC_IT)) ;
 8000900:	6843      	ldr	r3, [r0, #4]

  /* Check the status of the specified ADC interrupt */
  if (((ADCx->SR & itmask) != (uint32_t)RESET) && enablestatus)
 8000902:	6800      	ldr	r0, [r0, #0]
 8000904:	ea10 2011 	ands.w	r0, r0, r1, lsr #8
 8000908:	d007      	beq.n	800091a <ADC_GetITStatus+0x1a>

  /* Get the ADC IT index */
  itmask = ADC_IT >> 8;

  /* Get the ADC_IT enable bit status */
  enablestatus = (ADCx->CR1 & ((uint32_t)0x01 << (uint8_t)ADC_IT)) ;
 800090a:	2201      	movs	r2, #1
 800090c:	b2c9      	uxtb	r1, r1
 800090e:	fa12 f101 	lsls.w	r1, r2, r1
  *            @arg ADC_IT_AWD: Analog watchdog interrupt mask
  *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
  *            @arg ADC_IT_OVR: Overrun interrupt mask                        
  * @retval The new state of ADC_IT (SET or RESET).
  */
ITStatus ADC_GetITStatus(ADC_TypeDef* ADCx, uint16_t ADC_IT)
 8000912:	4219      	tst	r1, r3

  /* Check the status of the specified ADC interrupt */
  if (((ADCx->SR & itmask) != (uint32_t)RESET) && enablestatus)
  {
    /* ADC_IT is set */
    bitstatus = SET;
 8000914:	bf0c      	ite	eq
 8000916:	2000      	moveq	r0, #0
 8000918:	2001      	movne	r0, #1
    /* ADC_IT is reset */
    bitstatus = RESET;
  }
  /* Return the ADC_IT status */
  return  bitstatus;
}
 800091a:	4770      	bx	lr

0800091c <ADC_ClearITPendingBit>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_IT(ADC_IT)); 
  /* Get the ADC IT index */
  itmask = (uint8_t)(ADC_IT >> 8);
  /* Clear the selected ADC interrupt pending bits */
  ADCx->SR = ~(uint32_t)itmask;
 800091c:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8000920:	6001      	str	r1, [r0, #0]
}                    
 8000922:	4770      	bx	lr

08000924 <CAN_DeInit>:
  * @brief  Deinitializes the CAN peripheral registers to their default reset values.
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @retval None.
  */
void CAN_DeInit(CAN_TypeDef* CANx)
{
 8000924:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
 
  if (CANx == CAN1)
 8000926:	4b0b      	ldr	r3, [pc, #44]	; (8000954 <CAN_DeInit+0x30>)
 8000928:	4298      	cmp	r0, r3
 800092a:	d107      	bne.n	800093c <CAN_DeInit+0x18>
  {
    /* Enable CAN1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, ENABLE);
 800092c:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8000930:	2101      	movs	r1, #1
 8000932:	f003 f90f 	bl	8003b54 <RCC_APB1PeriphResetCmd>
    /* Release CAN1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, DISABLE);
 8000936:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800093a:	e006      	b.n	800094a <CAN_DeInit+0x26>
  }
  else
  {  
    /* Enable CAN2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, ENABLE);
 800093c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000940:	2101      	movs	r1, #1
 8000942:	f003 f907 	bl	8003b54 <RCC_APB1PeriphResetCmd>
    /* Release CAN2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, DISABLE);
 8000946:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800094a:	2100      	movs	r1, #0
  }
}
 800094c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {  
    /* Enable CAN2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, ENABLE);
    /* Release CAN2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, DISABLE);
 8000950:	f003 b900 	b.w	8003b54 <RCC_APB1PeriphResetCmd>
 8000954:	40006400 	.word	0x40006400

08000958 <CAN_Init>:
  assert_param(IS_CAN_BS1(CAN_InitStruct->CAN_BS1));
  assert_param(IS_CAN_BS2(CAN_InitStruct->CAN_BS2));
  assert_param(IS_CAN_PRESCALER(CAN_InitStruct->CAN_Prescaler));

  /* Exit from sleep mode */
  CANx->MCR &= (~(uint32_t)CAN_MCR_SLEEP);
 8000958:	6803      	ldr	r3, [r0, #0]
 800095a:	f023 0302 	bic.w	r3, r3, #2
 800095e:	6003      	str	r3, [r0, #0]

  /* Request initialisation */
  CANx->MCR |= CAN_MCR_INRQ ;
 8000960:	6803      	ldr	r3, [r0, #0]
 8000962:	f043 0301 	orr.w	r3, r3, #1
 8000966:	6003      	str	r3, [r0, #0]

  /* Wait the acknowledge */
  while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 8000968:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800096c:	6842      	ldr	r2, [r0, #4]
 800096e:	07d2      	lsls	r2, r2, #31
 8000970:	d401      	bmi.n	8000976 <CAN_Init+0x1e>
 8000972:	3b01      	subs	r3, #1
 8000974:	d1fa      	bne.n	800096c <CAN_Init+0x14>
  {
    wait_ack++;
  }

  /* Check acknowledge */
  if ((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 8000976:	6843      	ldr	r3, [r0, #4]
 8000978:	f013 0301 	ands.w	r3, r3, #1
 800097c:	d056      	beq.n	8000a2c <CAN_Init+0xd4>
    InitStatus = CAN_InitStatus_Failed;
  }
  else 
  {
    /* Set the time triggered communication mode */
    if (CAN_InitStruct->CAN_TTCM == ENABLE)
 800097e:	798b      	ldrb	r3, [r1, #6]
 8000980:	2b01      	cmp	r3, #1
    {
      CANx->MCR |= CAN_MCR_TTCM;
 8000982:	6803      	ldr	r3, [r0, #0]
 8000984:	bf0c      	ite	eq
 8000986:	f043 0380 	orreq.w	r3, r3, #128	; 0x80
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TTCM;
 800098a:	f023 0380 	bicne.w	r3, r3, #128	; 0x80
 800098e:	6003      	str	r3, [r0, #0]
    }

    /* Set the automatic bus-off management */
    if (CAN_InitStruct->CAN_ABOM == ENABLE)
 8000990:	79cb      	ldrb	r3, [r1, #7]
 8000992:	2b01      	cmp	r3, #1
    {
      CANx->MCR |= CAN_MCR_ABOM;
 8000994:	6803      	ldr	r3, [r0, #0]
 8000996:	bf0c      	ite	eq
 8000998:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_ABOM;
 800099c:	f023 0340 	bicne.w	r3, r3, #64	; 0x40
 80009a0:	6003      	str	r3, [r0, #0]
    }

    /* Set the automatic wake-up mode */
    if (CAN_InitStruct->CAN_AWUM == ENABLE)
 80009a2:	7a0b      	ldrb	r3, [r1, #8]
 80009a4:	2b01      	cmp	r3, #1
    {
      CANx->MCR |= CAN_MCR_AWUM;
 80009a6:	6803      	ldr	r3, [r0, #0]
 80009a8:	bf0c      	ite	eq
 80009aa:	f043 0320 	orreq.w	r3, r3, #32
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_AWUM;
 80009ae:	f023 0320 	bicne.w	r3, r3, #32
 80009b2:	6003      	str	r3, [r0, #0]
    }

    /* Set the no automatic retransmission */
    if (CAN_InitStruct->CAN_NART == ENABLE)
 80009b4:	7a4b      	ldrb	r3, [r1, #9]
 80009b6:	2b01      	cmp	r3, #1
    {
      CANx->MCR |= CAN_MCR_NART;
 80009b8:	6803      	ldr	r3, [r0, #0]
 80009ba:	bf0c      	ite	eq
 80009bc:	f043 0310 	orreq.w	r3, r3, #16
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_NART;
 80009c0:	f023 0310 	bicne.w	r3, r3, #16
 80009c4:	6003      	str	r3, [r0, #0]
    }

    /* Set the receive FIFO locked mode */
    if (CAN_InitStruct->CAN_RFLM == ENABLE)
 80009c6:	7a8b      	ldrb	r3, [r1, #10]
 80009c8:	2b01      	cmp	r3, #1
    {
      CANx->MCR |= CAN_MCR_RFLM;
 80009ca:	6803      	ldr	r3, [r0, #0]
 80009cc:	bf0c      	ite	eq
 80009ce:	f043 0308 	orreq.w	r3, r3, #8
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_RFLM;
 80009d2:	f023 0308 	bicne.w	r3, r3, #8
 80009d6:	6003      	str	r3, [r0, #0]
    }

    /* Set the transmit FIFO priority */
    if (CAN_InitStruct->CAN_TXFP == ENABLE)
 80009d8:	7acb      	ldrb	r3, [r1, #11]
 80009da:	2b01      	cmp	r3, #1
    {
      CANx->MCR |= CAN_MCR_TXFP;
 80009dc:	6803      	ldr	r3, [r0, #0]
 80009de:	bf0c      	ite	eq
 80009e0:	f043 0304 	orreq.w	r3, r3, #4
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
 80009e4:	f023 0304 	bicne.w	r3, r3, #4
 80009e8:	6003      	str	r3, [r0, #0]
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 80009ea:	788b      	ldrb	r3, [r1, #2]
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 80009ec:	78ca      	ldrb	r2, [r1, #3]
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 80009ee:	079b      	lsls	r3, r3, #30
 80009f0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 80009f4:	790a      	ldrb	r2, [r1, #4]
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 80009f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 80009fa:	794a      	ldrb	r2, [r1, #5]
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 80009fc:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
               ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);
 8000a00:	880a      	ldrh	r2, [r1, #0]
 8000a02:	3a01      	subs	r2, #1

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 8000a04:	4313      	orrs	r3, r2
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 8000a06:	61c3      	str	r3, [r0, #28]
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
               ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);

    /* Request leave initialisation */
    CANx->MCR &= ~(uint32_t)CAN_MCR_INRQ;
 8000a08:	6803      	ldr	r3, [r0, #0]
 8000a0a:	f023 0301 	bic.w	r3, r3, #1
 8000a0e:	6003      	str	r3, [r0, #0]

   /* Wait the acknowledge */
   wait_ack = 0;

   while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 8000a10:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a14:	6842      	ldr	r2, [r0, #4]
 8000a16:	07d2      	lsls	r2, r2, #31
 8000a18:	d501      	bpl.n	8000a1e <CAN_Init+0xc6>
 8000a1a:	3b01      	subs	r3, #1
 8000a1c:	d1fa      	bne.n	8000a14 <CAN_Init+0xbc>
   {
     wait_ack++;
   }

    /* ...and check acknowledged */
    if ((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 8000a1e:	6843      	ldr	r3, [r0, #4]
  }

  /* Check acknowledge */
  if ((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
  {
    InitStatus = CAN_InitStatus_Failed;
 8000a20:	f013 0f01 	tst.w	r3, #1
 8000a24:	bf14      	ite	ne
 8000a26:	2000      	movne	r0, #0
 8000a28:	2001      	moveq	r0, #1
 8000a2a:	4770      	bx	lr
 8000a2c:	4618      	mov	r0, r3
    }
  }

  /* At this step, return the status of initialization */
  return InitStatus;
}
 8000a2e:	4770      	bx	lr

08000a30 <CAN_FilterInit>:
  assert_param(IS_CAN_FILTER_MODE(CAN_FilterInitStruct->CAN_FilterMode));
  assert_param(IS_CAN_FILTER_SCALE(CAN_FilterInitStruct->CAN_FilterScale));
  assert_param(IS_CAN_FILTER_FIFO(CAN_FilterInitStruct->CAN_FilterFIFOAssignment));
  assert_param(IS_FUNCTIONAL_STATE(CAN_FilterInitStruct->CAN_FilterActivation));

  filter_number_bit_pos = ((uint32_t)1) << CAN_FilterInitStruct->CAN_FilterNumber;
 8000a30:	7a83      	ldrb	r3, [r0, #10]
 8000a32:	2101      	movs	r1, #1
 8000a34:	4099      	lsls	r1, r3

  /* Initialisation mode for the filter */
  CAN1->FMR |= FMR_FINIT;
 8000a36:	4b35      	ldr	r3, [pc, #212]	; (8000b0c <CAN_FilterInit+0xdc>)
 8000a38:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000a3c:	f042 0201 	orr.w	r2, r2, #1
  * @param  CAN_FilterInitStruct: pointer to a CAN_FilterInitTypeDef structure that
  *         contains the configuration information.
  * @retval None
  */
void CAN_FilterInit(CAN_FilterInitTypeDef* CAN_FilterInitStruct)
{
 8000a40:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_FUNCTIONAL_STATE(CAN_FilterInitStruct->CAN_FilterActivation));

  filter_number_bit_pos = ((uint32_t)1) << CAN_FilterInitStruct->CAN_FilterNumber;

  /* Initialisation mode for the filter */
  CAN1->FMR |= FMR_FINIT;
 8000a42:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  /* Filter Deactivation */
  CAN1->FA1R &= ~(uint32_t)filter_number_bit_pos;
 8000a46:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000a4a:	43cc      	mvns	r4, r1
 8000a4c:	4022      	ands	r2, r4
 8000a4e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

  /* Filter Scale */
  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_16bit)
 8000a52:	7b02      	ldrb	r2, [r0, #12]
 8000a54:	b9aa      	cbnz	r2, 8000a82 <CAN_FilterInit+0x52>
  {
    /* 16-bit scale for the filter */
    CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;
 8000a56:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 8000a5a:	88c6      	ldrh	r6, [r0, #6]
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 8000a5c:	8845      	ldrh	r5, [r0, #2]

  /* Filter Scale */
  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_16bit)
  {
    /* 16-bit scale for the filter */
    CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;
 8000a5e:	4022      	ands	r2, r4
 8000a60:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 8000a64:	7a82      	ldrb	r2, [r0, #10]
 8000a66:	3248      	adds	r2, #72	; 0x48
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 8000a68:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
    /* 16-bit scale for the filter */
    CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 8000a6c:	f843 5032 	str.w	r5, [r3, r2, lsl #3]

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
 8000a70:	8803      	ldrh	r3, [r0, #0]
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 8000a72:	8882      	ldrh	r2, [r0, #4]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 8000a74:	7a85      	ldrb	r5, [r0, #10]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 8000a76:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 8000a7a:	4b25      	ldr	r3, [pc, #148]	; (8000b10 <CAN_FilterInit+0xe0>)
 8000a7c:	00ed      	lsls	r5, r5, #3
 8000a7e:	18eb      	adds	r3, r5, r3
 8000a80:	605a      	str	r2, [r3, #4]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
  }

  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
 8000a82:	7b03      	ldrb	r3, [r0, #12]
 8000a84:	2b01      	cmp	r3, #1
 8000a86:	d116      	bne.n	8000ab6 <CAN_FilterInit+0x86>
  {
    /* 32-bit scale for the filter */
    CAN1->FS1R |= filter_number_bit_pos;
 8000a88:	4b20      	ldr	r3, [pc, #128]	; (8000b0c <CAN_FilterInit+0xdc>)
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 8000a8a:	8806      	ldrh	r6, [r0, #0]
  }

  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
  {
    /* 32-bit scale for the filter */
    CAN1->FS1R |= filter_number_bit_pos;
 8000a8c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 8000a90:	8845      	ldrh	r5, [r0, #2]
  }

  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
  {
    /* 32-bit scale for the filter */
    CAN1->FS1R |= filter_number_bit_pos;
 8000a92:	430a      	orrs	r2, r1
 8000a94:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 8000a98:	7a82      	ldrb	r2, [r0, #10]
 8000a9a:	3248      	adds	r2, #72	; 0x48
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 8000a9c:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
  {
    /* 32-bit scale for the filter */
    CAN1->FS1R |= filter_number_bit_pos;
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 8000aa0:	f843 5032 	str.w	r5, [r3, r2, lsl #3]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
    /* 32-bit mask or Second 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
 8000aa4:	88c3      	ldrh	r3, [r0, #6]
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
    /* 32-bit mask or Second 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 8000aa6:	8882      	ldrh	r2, [r0, #4]
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
    /* 32-bit mask or Second 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 8000aa8:	7a85      	ldrb	r5, [r0, #10]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 8000aaa:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
    /* 32-bit mask or Second 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 8000aae:	4b18      	ldr	r3, [pc, #96]	; (8000b10 <CAN_FilterInit+0xe0>)
 8000ab0:	00ed      	lsls	r5, r5, #3
 8000ab2:	18eb      	adds	r3, r5, r3
 8000ab4:	605a      	str	r2, [r3, #4]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
  }

  /* Filter Mode */
  if (CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdMask)
 8000ab6:	7ac3      	ldrb	r3, [r0, #11]
 8000ab8:	4a14      	ldr	r2, [pc, #80]	; (8000b0c <CAN_FilterInit+0xdc>)
 8000aba:	b91b      	cbnz	r3, 8000ac4 <CAN_FilterInit+0x94>
  {
    /*Id/Mask mode for the filter*/
    CAN1->FM1R &= ~(uint32_t)filter_number_bit_pos;
 8000abc:	f8d2 3204 	ldr.w	r3, [r2, #516]	; 0x204
 8000ac0:	4023      	ands	r3, r4
 8000ac2:	e002      	b.n	8000aca <CAN_FilterInit+0x9a>
  }
  else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
  {
    /*Identifier list mode for the filter*/
    CAN1->FM1R |= (uint32_t)filter_number_bit_pos;
 8000ac4:	f8d2 3204 	ldr.w	r3, [r2, #516]	; 0x204
 8000ac8:	430b      	orrs	r3, r1
  }

  /* Filter FIFO assignment */
  if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO0)
 8000aca:	8905      	ldrh	r5, [r0, #8]
    CAN1->FM1R &= ~(uint32_t)filter_number_bit_pos;
  }
  else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
  {
    /*Identifier list mode for the filter*/
    CAN1->FM1R |= (uint32_t)filter_number_bit_pos;
 8000acc:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
 8000ad0:	4b0e      	ldr	r3, [pc, #56]	; (8000b0c <CAN_FilterInit+0xdc>)
  }

  /* Filter FIFO assignment */
  if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO0)
 8000ad2:	b92d      	cbnz	r5, 8000ae0 <CAN_FilterInit+0xb0>
  {
    /* FIFO 0 assignation for the filter */
    CAN1->FFA1R &= ~(uint32_t)filter_number_bit_pos;
 8000ad4:	f8d2 5214 	ldr.w	r5, [r2, #532]	; 0x214
 8000ad8:	402c      	ands	r4, r5
 8000ada:	f8c2 4214 	str.w	r4, [r2, #532]	; 0x214
 8000ade:	e006      	b.n	8000aee <CAN_FilterInit+0xbe>
  }

  if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO1)
 8000ae0:	2d01      	cmp	r5, #1
 8000ae2:	d104      	bne.n	8000aee <CAN_FilterInit+0xbe>
  {
    /* FIFO 1 assignation for the filter */
    CAN1->FFA1R |= (uint32_t)filter_number_bit_pos;
 8000ae4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000ae8:	430a      	orrs	r2, r1
 8000aea:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }
  
  /* Filter activation */
  if (CAN_FilterInitStruct->CAN_FilterActivation == ENABLE)
 8000aee:	7b42      	ldrb	r2, [r0, #13]
 8000af0:	2a01      	cmp	r2, #1
 8000af2:	d104      	bne.n	8000afe <CAN_FilterInit+0xce>
  {
    CAN1->FA1R |= filter_number_bit_pos;
 8000af4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000af8:	4311      	orrs	r1, r2
 8000afa:	f8c3 121c 	str.w	r1, [r3, #540]	; 0x21c
  }

  /* Leave the initialisation mode for the filter */
  CAN1->FMR &= ~FMR_FINIT;
 8000afe:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000b02:	f022 0201 	bic.w	r2, r2, #1
 8000b06:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8000b0a:	bd70      	pop	{r4, r5, r6, pc}
 8000b0c:	40006400 	.word	0x40006400
 8000b10:	40006640 	.word	0x40006640

08000b14 <CAN_StructInit>:
void CAN_StructInit(CAN_InitTypeDef* CAN_InitStruct)
{
  /* Reset CAN init structure parameters values */
  
  /* Initialize the time triggered communication mode */
  CAN_InitStruct->CAN_TTCM = DISABLE;
 8000b14:	2300      	movs	r3, #0
 8000b16:	7183      	strb	r3, [r0, #6]
  
  /* Initialize the automatic bus-off management */
  CAN_InitStruct->CAN_ABOM = DISABLE;
 8000b18:	71c3      	strb	r3, [r0, #7]
  
  /* Initialize the automatic wake-up mode */
  CAN_InitStruct->CAN_AWUM = DISABLE;
 8000b1a:	7203      	strb	r3, [r0, #8]
  
  /* Initialize the no automatic retransmission */
  CAN_InitStruct->CAN_NART = DISABLE;
 8000b1c:	7243      	strb	r3, [r0, #9]
  
  /* Initialize the receive FIFO locked mode */
  CAN_InitStruct->CAN_RFLM = DISABLE;
 8000b1e:	7283      	strb	r3, [r0, #10]
  
  /* Initialize the transmit FIFO priority */
  CAN_InitStruct->CAN_TXFP = DISABLE;
 8000b20:	72c3      	strb	r3, [r0, #11]
  
  /* Initialize the CAN_Mode member */
  CAN_InitStruct->CAN_Mode = CAN_Mode_Normal;
 8000b22:	7083      	strb	r3, [r0, #2]
  
  /* Initialize the CAN_SJW member */
  CAN_InitStruct->CAN_SJW = CAN_SJW_1tq;
 8000b24:	70c3      	strb	r3, [r0, #3]
  
  /* Initialize the CAN_BS1 member */
  CAN_InitStruct->CAN_BS1 = CAN_BS1_4tq;
 8000b26:	2303      	movs	r3, #3
 8000b28:	7103      	strb	r3, [r0, #4]
  
  /* Initialize the CAN_BS2 member */
  CAN_InitStruct->CAN_BS2 = CAN_BS2_3tq;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	7143      	strb	r3, [r0, #5]
  
  /* Initialize the CAN_Prescaler member */
  CAN_InitStruct->CAN_Prescaler = 1;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	8003      	strh	r3, [r0, #0]
}
 8000b32:	4770      	bx	lr

08000b34 <CAN_SlaveStartBank>:
{
  /* Check the parameters */
  assert_param(IS_CAN_BANKNUMBER(CAN_BankNumber));
  
  /* Enter Initialisation mode for the filter */
  CAN1->FMR |= FMR_FINIT;
 8000b34:	4b0d      	ldr	r3, [pc, #52]	; (8000b6c <CAN_SlaveStartBank+0x38>)
 8000b36:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000b3a:	f042 0201 	orr.w	r2, r2, #1
 8000b3e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  
  /* Select the start slave bank */
  CAN1->FMR &= (uint32_t)0xFFFFC0F1 ;
 8000b42:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000b46:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8000b4a:	f022 020e 	bic.w	r2, r2, #14
 8000b4e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  CAN1->FMR |= (uint32_t)(CAN_BankNumber)<<8;
 8000b52:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000b56:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8000b5a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  
  /* Leave Initialisation mode for the filter */
  CAN1->FMR &= ~FMR_FINIT;
 8000b5e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000b62:	f022 0201 	bic.w	r2, r2, #1
 8000b66:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8000b6a:	4770      	bx	lr
 8000b6c:	40006400 	.word	0x40006400

08000b70 <CAN_DBGFreeze>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable Debug Freeze  */
    CANx->MCR |= MCR_DBF;
 8000b70:	6803      	ldr	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000b72:	b111      	cbz	r1, 8000b7a <CAN_DBGFreeze+0xa>
  {
    /* Enable Debug Freeze  */
    CANx->MCR |= MCR_DBF;
 8000b74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b78:	e001      	b.n	8000b7e <CAN_DBGFreeze+0xe>
  }
  else
  {
    /* Disable Debug Freeze */
    CANx->MCR &= ~MCR_DBF;
 8000b7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b7e:	6003      	str	r3, [r0, #0]
 8000b80:	4770      	bx	lr

08000b82 <CAN_TTComModeCmd>:
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the TTCM mode */
    CANx->MCR |= CAN_MCR_TTCM;
 8000b82:	6803      	ldr	r3, [r0, #0]
void CAN_TTComModeCmd(CAN_TypeDef* CANx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000b84:	b199      	cbz	r1, 8000bae <CAN_TTComModeCmd+0x2c>
  {
    /* Enable the TTCM mode */
    CANx->MCR |= CAN_MCR_TTCM;
 8000b86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b8a:	6003      	str	r3, [r0, #0]

    /* Set TGT bits */
    CANx->sTxMailBox[0].TDTR |= ((uint32_t)CAN_TDT0R_TGT);
 8000b8c:	f8d0 3184 	ldr.w	r3, [r0, #388]	; 0x184
 8000b90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b94:	f8c0 3184 	str.w	r3, [r0, #388]	; 0x184
    CANx->sTxMailBox[1].TDTR |= ((uint32_t)CAN_TDT1R_TGT);
 8000b98:	f8d0 3194 	ldr.w	r3, [r0, #404]	; 0x194
 8000b9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ba0:	f8c0 3194 	str.w	r3, [r0, #404]	; 0x194
    CANx->sTxMailBox[2].TDTR |= ((uint32_t)CAN_TDT2R_TGT);
 8000ba4:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
 8000ba8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bac:	e012      	b.n	8000bd4 <CAN_TTComModeCmd+0x52>
  }
  else
  {
    /* Disable the TTCM mode */
    CANx->MCR &= (uint32_t)(~(uint32_t)CAN_MCR_TTCM);
 8000bae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000bb2:	6003      	str	r3, [r0, #0]

    /* Reset TGT bits */
    CANx->sTxMailBox[0].TDTR &= ((uint32_t)~CAN_TDT0R_TGT);
 8000bb4:	f8d0 3184 	ldr.w	r3, [r0, #388]	; 0x184
 8000bb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000bbc:	f8c0 3184 	str.w	r3, [r0, #388]	; 0x184
    CANx->sTxMailBox[1].TDTR &= ((uint32_t)~CAN_TDT1R_TGT);
 8000bc0:	f8d0 3194 	ldr.w	r3, [r0, #404]	; 0x194
 8000bc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000bc8:	f8c0 3194 	str.w	r3, [r0, #404]	; 0x194
    CANx->sTxMailBox[2].TDTR &= ((uint32_t)~CAN_TDT2R_TGT);
 8000bcc:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
 8000bd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000bd4:	f8c0 31a4 	str.w	r3, [r0, #420]	; 0x1a4
 8000bd8:	4770      	bx	lr

08000bda <CAN_Transmit>:
  assert_param(IS_CAN_IDTYPE(TxMessage->IDE));
  assert_param(IS_CAN_RTR(TxMessage->RTR));
  assert_param(IS_CAN_DLC(TxMessage->DLC));

  /* Select one empty transmit mailbox */
  if ((CANx->TSR&CAN_TSR_TME0) == CAN_TSR_TME0)
 8000bda:	6882      	ldr	r2, [r0, #8]
  * @param  TxMessage: pointer to a structure which contains CAN Id, CAN DLC and CAN data.
  * @retval The number of the mailbox that is used for transmission or
  *         CAN_TxStatus_NoMailBox if there is no empty mailbox.
  */
uint8_t CAN_Transmit(CAN_TypeDef* CANx, CanTxMsg* TxMessage)
{
 8000bdc:	4603      	mov	r3, r0
  assert_param(IS_CAN_IDTYPE(TxMessage->IDE));
  assert_param(IS_CAN_RTR(TxMessage->RTR));
  assert_param(IS_CAN_DLC(TxMessage->DLC));

  /* Select one empty transmit mailbox */
  if ((CANx->TSR&CAN_TSR_TME0) == CAN_TSR_TME0)
 8000bde:	0150      	lsls	r0, r2, #5
  * @param  TxMessage: pointer to a structure which contains CAN Id, CAN DLC and CAN data.
  * @retval The number of the mailbox that is used for transmission or
  *         CAN_TxStatus_NoMailBox if there is no empty mailbox.
  */
uint8_t CAN_Transmit(CAN_TypeDef* CANx, CanTxMsg* TxMessage)
{
 8000be0:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_CAN_IDTYPE(TxMessage->IDE));
  assert_param(IS_CAN_RTR(TxMessage->RTR));
  assert_param(IS_CAN_DLC(TxMessage->DLC));

  /* Select one empty transmit mailbox */
  if ((CANx->TSR&CAN_TSR_TME0) == CAN_TSR_TME0)
 8000be2:	d407      	bmi.n	8000bf4 <CAN_Transmit+0x1a>
  {
    transmit_mailbox = 0;
  }
  else if ((CANx->TSR&CAN_TSR_TME1) == CAN_TSR_TME1)
 8000be4:	689a      	ldr	r2, [r3, #8]
 8000be6:	0112      	lsls	r2, r2, #4
 8000be8:	d406      	bmi.n	8000bf8 <CAN_Transmit+0x1e>
  {
    transmit_mailbox = 1;
  }
  else if ((CANx->TSR&CAN_TSR_TME2) == CAN_TSR_TME2)
 8000bea:	689a      	ldr	r2, [r3, #8]
 8000bec:	00d0      	lsls	r0, r2, #3
 8000bee:	d54a      	bpl.n	8000c86 <CAN_Transmit+0xac>
  {
    transmit_mailbox = 2;
 8000bf0:	2002      	movs	r0, #2
 8000bf2:	e002      	b.n	8000bfa <CAN_Transmit+0x20>
  assert_param(IS_CAN_DLC(TxMessage->DLC));

  /* Select one empty transmit mailbox */
  if ((CANx->TSR&CAN_TSR_TME0) == CAN_TSR_TME0)
  {
    transmit_mailbox = 0;
 8000bf4:	2000      	movs	r0, #0
 8000bf6:	e000      	b.n	8000bfa <CAN_Transmit+0x20>
  }
  else if ((CANx->TSR&CAN_TSR_TME1) == CAN_TSR_TME1)
  {
    transmit_mailbox = 1;
 8000bf8:	2001      	movs	r0, #1
  }

  if (transmit_mailbox != CAN_TxStatus_NoMailBox)
  {
    /* Set up the Id */
    CANx->sTxMailBox[transmit_mailbox].TIR &= TMIDxR_TXRQ;
 8000bfa:	f100 0218 	add.w	r2, r0, #24
 8000bfe:	0112      	lsls	r2, r2, #4
 8000c00:	589c      	ldr	r4, [r3, r2]
 8000c02:	f004 0401 	and.w	r4, r4, #1
 8000c06:	509c      	str	r4, [r3, r2]
    if (TxMessage->IDE == CAN_Id_Standard)
 8000c08:	7a0c      	ldrb	r4, [r1, #8]
    {
      assert_param(IS_CAN_STDID(TxMessage->StdId));  
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
 8000c0a:	589d      	ldr	r5, [r3, r2]

  if (transmit_mailbox != CAN_TxStatus_NoMailBox)
  {
    /* Set up the Id */
    CANx->sTxMailBox[transmit_mailbox].TIR &= TMIDxR_TXRQ;
    if (TxMessage->IDE == CAN_Id_Standard)
 8000c0c:	b924      	cbnz	r4, 8000c18 <CAN_Transmit+0x3e>
    {
      assert_param(IS_CAN_STDID(TxMessage->StdId));  
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
 8000c0e:	680e      	ldr	r6, [r1, #0]
 8000c10:	7a4c      	ldrb	r4, [r1, #9]
 8000c12:	ea44 5446 	orr.w	r4, r4, r6, lsl #21
 8000c16:	e004      	b.n	8000c22 <CAN_Transmit+0x48>
                                                  TxMessage->RTR);
    }
    else
    {
      assert_param(IS_CAN_EXTID(TxMessage->ExtId));
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 8000c18:	684e      	ldr	r6, [r1, #4]
 8000c1a:	ea44 04c6 	orr.w	r4, r4, r6, lsl #3
                                                  TxMessage->IDE | \
 8000c1e:	432c      	orrs	r4, r5
 8000c20:	7a4d      	ldrb	r5, [r1, #9]
                                                  TxMessage->RTR);
    }
    else
    {
      assert_param(IS_CAN_EXTID(TxMessage->ExtId));
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 8000c22:	432c      	orrs	r4, r5
 8000c24:	509c      	str	r4, [r3, r2]
                                                  TxMessage->IDE | \
                                                  TxMessage->RTR);
    }
    
    /* Set up the DLC */
    TxMessage->DLC &= (uint8_t)0x0000000F;
 8000c26:	7a8a      	ldrb	r2, [r1, #10]
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
 8000c28:	f100 0418 	add.w	r4, r0, #24
 8000c2c:	0124      	lsls	r4, r4, #4
                                                  TxMessage->IDE | \
                                                  TxMessage->RTR);
    }
    
    /* Set up the DLC */
    TxMessage->DLC &= (uint8_t)0x0000000F;
 8000c2e:	f002 020f 	and.w	r2, r2, #15
 8000c32:	728a      	strb	r2, [r1, #10]
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
 8000c34:	191a      	adds	r2, r3, r4
 8000c36:	6855      	ldr	r5, [r2, #4]
 8000c38:	f025 050f 	bic.w	r5, r5, #15
 8000c3c:	6055      	str	r5, [r2, #4]
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;
 8000c3e:	6855      	ldr	r5, [r2, #4]
 8000c40:	7a8e      	ldrb	r6, [r1, #10]
 8000c42:	4335      	orrs	r5, r6
 8000c44:	6055      	str	r5, [r2, #4]

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
 8000c46:	7b4e      	ldrb	r6, [r1, #13]
    TxMessage->DLC &= (uint8_t)0x0000000F;
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 8000c48:	7b8a      	ldrb	r2, [r1, #14]
                                             ((uint32_t)TxMessage->Data[2] << 16) |
 8000c4a:	0436      	lsls	r6, r6, #16
    TxMessage->DLC &= (uint8_t)0x0000000F;
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 8000c4c:	ea46 6602 	orr.w	r6, r6, r2, lsl #24
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
 8000c50:	7aca      	ldrb	r2, [r1, #11]
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
 8000c52:	4316      	orrs	r6, r2
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
 8000c54:	7b0a      	ldrb	r2, [r1, #12]
 8000c56:	ea46 2602 	orr.w	r6, r6, r2, lsl #8
    TxMessage->DLC &= (uint8_t)0x0000000F;
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 8000c5a:	eb03 1200 	add.w	r2, r3, r0, lsl #4
 8000c5e:	f502 75c4 	add.w	r5, r2, #392	; 0x188
 8000c62:	f8c2 6188 	str.w	r6, [r2, #392]	; 0x188
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
                                             ((uint32_t)TxMessage->Data[6] << 16) |
 8000c66:	7c4a      	ldrb	r2, [r1, #17]
    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 8000c68:	7c8e      	ldrb	r6, [r1, #18]
                                             ((uint32_t)TxMessage->Data[6] << 16) |
 8000c6a:	0412      	lsls	r2, r2, #16
    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 8000c6c:	ea42 6206 	orr.w	r2, r2, r6, lsl #24
                                             ((uint32_t)TxMessage->Data[6] << 16) |
                                             ((uint32_t)TxMessage->Data[5] << 8) |
                                             ((uint32_t)TxMessage->Data[4]));
 8000c70:	7bce      	ldrb	r6, [r1, #15]
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
                                             ((uint32_t)TxMessage->Data[6] << 16) |
                                             ((uint32_t)TxMessage->Data[5] << 8) |
 8000c72:	7c09      	ldrb	r1, [r1, #16]
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
                                             ((uint32_t)TxMessage->Data[6] << 16) |
 8000c74:	4332      	orrs	r2, r6
                                             ((uint32_t)TxMessage->Data[5] << 8) |
 8000c76:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 8000c7a:	606a      	str	r2, [r5, #4]
                                             ((uint32_t)TxMessage->Data[6] << 16) |
                                             ((uint32_t)TxMessage->Data[5] << 8) |
                                             ((uint32_t)TxMessage->Data[4]));
    /* Request transmission */
    CANx->sTxMailBox[transmit_mailbox].TIR |= TMIDxR_TXRQ;
 8000c7c:	591a      	ldr	r2, [r3, r4]
 8000c7e:	f042 0201 	orr.w	r2, r2, #1
 8000c82:	511a      	str	r2, [r3, r4]
 8000c84:	bd70      	pop	{r4, r5, r6, pc}
  {
    transmit_mailbox = 2;
  }
  else
  {
    transmit_mailbox = CAN_TxStatus_NoMailBox;
 8000c86:	2004      	movs	r0, #4
                                             ((uint32_t)TxMessage->Data[4]));
    /* Request transmission */
    CANx->sTxMailBox[transmit_mailbox].TIR |= TMIDxR_TXRQ;
  }
  return transmit_mailbox;
}
 8000c88:	bd70      	pop	{r4, r5, r6, pc}

08000c8a <CAN_TransmitStatus>:

  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_TRANSMITMAILBOX(TransmitMailbox));
 
  switch (TransmitMailbox)
 8000c8a:	2901      	cmp	r1, #1
 8000c8c:	d006      	beq.n	8000c9c <CAN_TransmitStatus+0x12>
 8000c8e:	d302      	bcc.n	8000c96 <CAN_TransmitStatus+0xc>
 8000c90:	2902      	cmp	r1, #2
 8000c92:	d10a      	bne.n	8000caa <CAN_TransmitStatus+0x20>
 8000c94:	e005      	b.n	8000ca2 <CAN_TransmitStatus+0x18>
  {
    case (CAN_TXMAILBOX_0): 
      state =   CANx->TSR &  (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0);
 8000c96:	6882      	ldr	r2, [r0, #8]
 8000c98:	4b0e      	ldr	r3, [pc, #56]	; (8000cd4 <CAN_TransmitStatus+0x4a>)
 8000c9a:	e004      	b.n	8000ca6 <CAN_TransmitStatus+0x1c>
      break;
    case (CAN_TXMAILBOX_1): 
      state =   CANx->TSR &  (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1);
 8000c9c:	6882      	ldr	r2, [r0, #8]
 8000c9e:	4b0e      	ldr	r3, [pc, #56]	; (8000cd8 <CAN_TransmitStatus+0x4e>)
 8000ca0:	e001      	b.n	8000ca6 <CAN_TransmitStatus+0x1c>
      break;
    case (CAN_TXMAILBOX_2): 
      state =   CANx->TSR &  (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2);
 8000ca2:	6882      	ldr	r2, [r0, #8]
 8000ca4:	4b0d      	ldr	r3, [pc, #52]	; (8000cdc <CAN_TransmitStatus+0x52>)
 8000ca6:	4013      	ands	r3, r2
      break;
 8000ca8:	e000      	b.n	8000cac <CAN_TransmitStatus+0x22>
    default:
      state = CAN_TxStatus_Failed;
 8000caa:	2300      	movs	r3, #0
      break;
  }
  switch (state)
 8000cac:	4a09      	ldr	r2, [pc, #36]	; (8000cd4 <CAN_TransmitStatus+0x4a>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d00b      	beq.n	8000cca <CAN_TransmitStatus+0x40>
 8000cb2:	d801      	bhi.n	8000cb8 <CAN_TransmitStatus+0x2e>
 8000cb4:	b13b      	cbz	r3, 8000cc6 <CAN_TransmitStatus+0x3c>
 8000cb6:	e00a      	b.n	8000cce <CAN_TransmitStatus+0x44>
 8000cb8:	4a07      	ldr	r2, [pc, #28]	; (8000cd8 <CAN_TransmitStatus+0x4e>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d005      	beq.n	8000cca <CAN_TransmitStatus+0x40>
 8000cbe:	4a07      	ldr	r2, [pc, #28]	; (8000cdc <CAN_TransmitStatus+0x52>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d104      	bne.n	8000cce <CAN_TransmitStatus+0x44>
 8000cc4:	e001      	b.n	8000cca <CAN_TransmitStatus+0x40>
  {
      /* transmit pending  */
    case (0x0): state = CAN_TxStatus_Pending;
 8000cc6:	2002      	movs	r0, #2
 8000cc8:	4770      	bx	lr
      /* transmit succeeded  */
    case (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0):state = CAN_TxStatus_Ok;
      break;
    case (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1):state = CAN_TxStatus_Ok;
      break;
    case (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2):state = CAN_TxStatus_Ok;
 8000cca:	2001      	movs	r0, #1
      break;
 8000ccc:	4770      	bx	lr
  {
      /* transmit pending  */
    case (0x0): state = CAN_TxStatus_Pending;
      break;
      /* transmit failed  */
     case (CAN_TSR_RQCP0 | CAN_TSR_TME0): state = CAN_TxStatus_Failed;
 8000cce:	2000      	movs	r0, #0
      break;
    default: state = CAN_TxStatus_Failed;
      break;
  }
  return (uint8_t) state;
}
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	04000003 	.word	0x04000003
 8000cd8:	08000300 	.word	0x08000300
 8000cdc:	10030000 	.word	0x10030000

08000ce0 <CAN_CancelTransmit>:
{
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_TRANSMITMAILBOX(Mailbox));
  /* abort transmission */
  switch (Mailbox)
 8000ce0:	2901      	cmp	r1, #1
 8000ce2:	d007      	beq.n	8000cf4 <CAN_CancelTransmit+0x14>
 8000ce4:	d302      	bcc.n	8000cec <CAN_CancelTransmit+0xc>
 8000ce6:	2902      	cmp	r1, #2
 8000ce8:	d10d      	bne.n	8000d06 <CAN_CancelTransmit+0x26>
 8000cea:	e008      	b.n	8000cfe <CAN_CancelTransmit+0x1e>
  {
    case (CAN_TXMAILBOX_0): CANx->TSR |= CAN_TSR_ABRQ0;
 8000cec:	6883      	ldr	r3, [r0, #8]
 8000cee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cf2:	e002      	b.n	8000cfa <CAN_CancelTransmit+0x1a>
      break;
    case (CAN_TXMAILBOX_1): CANx->TSR |= CAN_TSR_ABRQ1;
 8000cf4:	6883      	ldr	r3, [r0, #8]
 8000cf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cfa:	6083      	str	r3, [r0, #8]
      break;
 8000cfc:	4770      	bx	lr
    case (CAN_TXMAILBOX_2): CANx->TSR |= CAN_TSR_ABRQ2;
 8000cfe:	6883      	ldr	r3, [r0, #8]
 8000d00:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000d04:	6083      	str	r3, [r0, #8]
 8000d06:	4770      	bx	lr

08000d08 <CAN_Receive>:
  * @param  RxMessage: pointer to a structure receive frame which contains CAN Id,
  *         CAN DLC, CAN data and FMI number.
  * @retval None
  */
void CAN_Receive(CAN_TypeDef* CANx, uint8_t FIFONumber, CanRxMsg* RxMessage)
{
 8000d08:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  /* Get the Id */
  RxMessage->IDE = (uint8_t)0x04 & CANx->sFIFOMailBox[FIFONumber].RIR;
 8000d0a:	f101 041b 	add.w	r4, r1, #27
 8000d0e:	0123      	lsls	r3, r4, #4
 8000d10:	58c5      	ldr	r5, [r0, r3]
 8000d12:	f005 0504 	and.w	r5, r5, #4
 8000d16:	b2ed      	uxtb	r5, r5
 8000d18:	7215      	strb	r5, [r2, #8]
  if (RxMessage->IDE == CAN_Id_Standard)
  {
    RxMessage->StdId = (uint32_t)0x000007FF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 21);
 8000d1a:	58c3      	ldr	r3, [r0, r3]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  /* Get the Id */
  RxMessage->IDE = (uint8_t)0x04 & CANx->sFIFOMailBox[FIFONumber].RIR;
  if (RxMessage->IDE == CAN_Id_Standard)
 8000d1c:	b915      	cbnz	r5, 8000d24 <CAN_Receive+0x1c>
  {
    RxMessage->StdId = (uint32_t)0x000007FF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 21);
 8000d1e:	0d5b      	lsrs	r3, r3, #21
 8000d20:	6013      	str	r3, [r2, #0]
 8000d22:	e001      	b.n	8000d28 <CAN_Receive+0x20>
  }
  else
  {
    RxMessage->ExtId = (uint32_t)0x1FFFFFFF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 3);
 8000d24:	08db      	lsrs	r3, r3, #3
 8000d26:	6053      	str	r3, [r2, #4]
  }
  
  RxMessage->RTR = (uint8_t)0x02 & CANx->sFIFOMailBox[FIFONumber].RIR;
 8000d28:	0124      	lsls	r4, r4, #4
 8000d2a:	1903      	adds	r3, r0, r4
 8000d2c:	5904      	ldr	r4, [r0, r4]
 8000d2e:	f004 0402 	and.w	r4, r4, #2
 8000d32:	7254      	strb	r4, [r2, #9]
  /* Get the DLC */
  RxMessage->DLC = (uint8_t)0x0F & CANx->sFIFOMailBox[FIFONumber].RDTR;
 8000d34:	685c      	ldr	r4, [r3, #4]
 8000d36:	f004 040f 	and.w	r4, r4, #15
 8000d3a:	7294      	strb	r4, [r2, #10]
  /* Get the FMI */
  RxMessage->FMI = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDTR >> 8);
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	0a1b      	lsrs	r3, r3, #8
 8000d40:	74d3      	strb	r3, [r2, #19]
  /* Get the data field */
  RxMessage->Data[0] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDLR;
 8000d42:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 8000d46:	f503 74dc 	add.w	r4, r3, #440	; 0x1b8
 8000d4a:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
 8000d4e:	72d5      	strb	r5, [r2, #11]
  RxMessage->Data[1] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 8);
 8000d50:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
 8000d54:	0a2d      	lsrs	r5, r5, #8
 8000d56:	7315      	strb	r5, [r2, #12]
  RxMessage->Data[2] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 16);
 8000d58:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
 8000d5c:	0c2d      	lsrs	r5, r5, #16
 8000d5e:	7355      	strb	r5, [r2, #13]
  RxMessage->Data[3] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 24);
 8000d60:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 8000d64:	0e1b      	lsrs	r3, r3, #24
 8000d66:	7393      	strb	r3, [r2, #14]
  RxMessage->Data[4] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDHR;
 8000d68:	6863      	ldr	r3, [r4, #4]
 8000d6a:	73d3      	strb	r3, [r2, #15]
  RxMessage->Data[5] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 8);
 8000d6c:	6863      	ldr	r3, [r4, #4]
 8000d6e:	0a1b      	lsrs	r3, r3, #8
 8000d70:	7413      	strb	r3, [r2, #16]
  RxMessage->Data[6] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 16);
 8000d72:	6863      	ldr	r3, [r4, #4]
 8000d74:	0c1b      	lsrs	r3, r3, #16
 8000d76:	7453      	strb	r3, [r2, #17]
  RxMessage->Data[7] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 24);
 8000d78:	6863      	ldr	r3, [r4, #4]
 8000d7a:	0e1b      	lsrs	r3, r3, #24
 8000d7c:	7493      	strb	r3, [r2, #18]
  /* Release the FIFO */
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
 8000d7e:	b921      	cbnz	r1, 8000d8a <CAN_Receive+0x82>
  {
    CANx->RF0R |= CAN_RF0R_RFOM0;
 8000d80:	68c3      	ldr	r3, [r0, #12]
 8000d82:	f043 0320 	orr.w	r3, r3, #32
 8000d86:	60c3      	str	r3, [r0, #12]
 8000d88:	bd30      	pop	{r4, r5, pc}
  }
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    CANx->RF1R |= CAN_RF1R_RFOM1;
 8000d8a:	6903      	ldr	r3, [r0, #16]
 8000d8c:	f043 0320 	orr.w	r3, r3, #32
 8000d90:	6103      	str	r3, [r0, #16]
 8000d92:	bd30      	pop	{r4, r5, pc}

08000d94 <CAN_FIFORelease>:
{
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
 8000d94:	b921      	cbnz	r1, 8000da0 <CAN_FIFORelease+0xc>
  {
    CANx->RF0R |= CAN_RF0R_RFOM0;
 8000d96:	68c3      	ldr	r3, [r0, #12]
 8000d98:	f043 0320 	orr.w	r3, r3, #32
 8000d9c:	60c3      	str	r3, [r0, #12]
 8000d9e:	4770      	bx	lr
  }
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    CANx->RF1R |= CAN_RF1R_RFOM1;
 8000da0:	6903      	ldr	r3, [r0, #16]
 8000da2:	f043 0320 	orr.w	r3, r3, #32
 8000da6:	6103      	str	r3, [r0, #16]
 8000da8:	4770      	bx	lr

08000daa <CAN_MessagePending>:
{
  uint8_t message_pending=0;
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  if (FIFONumber == CAN_FIFO0)
 8000daa:	b909      	cbnz	r1, 8000db0 <CAN_MessagePending+0x6>
  {
    message_pending = (uint8_t)(CANx->RF0R&(uint32_t)0x03);
 8000dac:	68c0      	ldr	r0, [r0, #12]
 8000dae:	e002      	b.n	8000db6 <CAN_MessagePending+0xc>
  }
  else if (FIFONumber == CAN_FIFO1)
 8000db0:	2901      	cmp	r1, #1
 8000db2:	d103      	bne.n	8000dbc <CAN_MessagePending+0x12>
  {
    message_pending = (uint8_t)(CANx->RF1R&(uint32_t)0x03);
 8000db4:	6900      	ldr	r0, [r0, #16]
 8000db6:	f000 0003 	and.w	r0, r0, #3
 8000dba:	4770      	bx	lr
  }
  else
  {
    message_pending = 0;
 8000dbc:	2000      	movs	r0, #0
  }
  return message_pending;
}
 8000dbe:	4770      	bx	lr

08000dc0 <CAN_OperatingModeRequest>:

  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_OPERATING_MODE(CAN_OperatingMode));

  if (CAN_OperatingMode == CAN_OperatingMode_Initialization)
 8000dc0:	b999      	cbnz	r1, 8000dea <CAN_OperatingModeRequest+0x2a>
  {
    /* Request initialisation */
    CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_SLEEP)) | CAN_MCR_INRQ);
 8000dc2:	6803      	ldr	r3, [r0, #0]
 8000dc4:	f023 0303 	bic.w	r3, r3, #3
 8000dc8:	f043 0301 	orr.w	r3, r3, #1
 8000dcc:	6003      	str	r3, [r0, #0]

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK) && (timeout != 0))
 8000dce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dd2:	6842      	ldr	r2, [r0, #4]
 8000dd4:	f002 0203 	and.w	r2, r2, #3
 8000dd8:	2a01      	cmp	r2, #1
 8000dda:	d001      	beq.n	8000de0 <CAN_OperatingModeRequest+0x20>
 8000ddc:	3b01      	subs	r3, #1
 8000dde:	d1f8      	bne.n	8000dd2 <CAN_OperatingModeRequest+0x12>
    {
      timeout--;
    }
    if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK)
 8000de0:	6840      	ldr	r0, [r0, #4]
 8000de2:	f000 0003 	and.w	r0, r0, #3
    {
      status = CAN_ModeStatus_Failed;
    }
    else
    {
      status = CAN_ModeStatus_Success;
 8000de6:	2801      	cmp	r0, #1
 8000de8:	e028      	b.n	8000e3c <CAN_OperatingModeRequest+0x7c>
    }
  }
  else  if (CAN_OperatingMode == CAN_OperatingMode_Normal)
 8000dea:	2901      	cmp	r1, #1
 8000dec:	d111      	bne.n	8000e12 <CAN_OperatingModeRequest+0x52>
  {
    /* Request leave initialisation and sleep mode  and enter Normal mode */
    CANx->MCR &= (uint32_t)(~(CAN_MCR_SLEEP|CAN_MCR_INRQ));
 8000dee:	6803      	ldr	r3, [r0, #0]
 8000df0:	f023 0303 	bic.w	r3, r3, #3
 8000df4:	6003      	str	r3, [r0, #0]

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != 0) && (timeout!=0))
 8000df6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dfa:	6842      	ldr	r2, [r0, #4]
 8000dfc:	0792      	lsls	r2, r2, #30
 8000dfe:	d001      	beq.n	8000e04 <CAN_OperatingModeRequest+0x44>
 8000e00:	3b01      	subs	r3, #1
 8000e02:	d1fa      	bne.n	8000dfa <CAN_OperatingModeRequest+0x3a>
    {
      timeout--;
    }
    if ((CANx->MSR & CAN_MODE_MASK) != 0)
 8000e04:	6843      	ldr	r3, [r0, #4]
    {
      status = CAN_ModeStatus_Failed;
    }
    else
    {
      status = CAN_ModeStatus_Success;
 8000e06:	f013 0f03 	tst.w	r3, #3
 8000e0a:	bf14      	ite	ne
 8000e0c:	2000      	movne	r0, #0
 8000e0e:	2001      	moveq	r0, #1
 8000e10:	4770      	bx	lr
    else
    {
      status = CAN_ModeStatus_Success;
    }
  }
  else  if (CAN_OperatingMode == CAN_OperatingMode_Sleep)
 8000e12:	2902      	cmp	r1, #2
 8000e14:	d116      	bne.n	8000e44 <CAN_OperatingModeRequest+0x84>
  {
    /* Request Sleep mode */
    CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
 8000e16:	6803      	ldr	r3, [r0, #0]
 8000e18:	f023 0303 	bic.w	r3, r3, #3
 8000e1c:	f043 0302 	orr.w	r3, r3, #2
 8000e20:	6003      	str	r3, [r0, #0]

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK) && (timeout!=0))
 8000e22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e26:	6842      	ldr	r2, [r0, #4]
 8000e28:	f002 0203 	and.w	r2, r2, #3
 8000e2c:	2a02      	cmp	r2, #2
 8000e2e:	d001      	beq.n	8000e34 <CAN_OperatingModeRequest+0x74>
 8000e30:	3b01      	subs	r3, #1
 8000e32:	d1f8      	bne.n	8000e26 <CAN_OperatingModeRequest+0x66>
    {
      timeout--;
    }
    if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK)
 8000e34:	6840      	ldr	r0, [r0, #4]
 8000e36:	f000 0003 	and.w	r0, r0, #3
    {
      status = CAN_ModeStatus_Failed;
    }
    else
    {
      status = CAN_ModeStatus_Success;
 8000e3a:	2802      	cmp	r0, #2
 8000e3c:	bf14      	ite	ne
 8000e3e:	2000      	movne	r0, #0
 8000e40:	2001      	moveq	r0, #1
 8000e42:	4770      	bx	lr
      status = CAN_ModeStatus_Success;
    }
  }
  else
  {
    status = CAN_ModeStatus_Failed;
 8000e44:	2000      	movs	r0, #0
  }

  return  (uint8_t) status;
}
 8000e46:	4770      	bx	lr

08000e48 <CAN_Sleep>:
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
    
  /* Request Sleep mode */
   CANx->MCR = (((CANx->MCR) & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
 8000e48:	6803      	ldr	r3, [r0, #0]
 8000e4a:	f023 0303 	bic.w	r3, r3, #3
 8000e4e:	f043 0302 	orr.w	r3, r3, #2
 8000e52:	6003      	str	r3, [r0, #0]
   
  /* Sleep mode status */
  if ((CANx->MSR & (CAN_MSR_SLAK|CAN_MSR_INAK)) == CAN_MSR_SLAK)
 8000e54:	6840      	ldr	r0, [r0, #4]
 8000e56:	f000 0003 	and.w	r0, r0, #3
    /* Sleep mode not entered */
    sleepstatus =  CAN_Sleep_Ok;
  }
  /* return sleep mode status */
   return (uint8_t)sleepstatus;
}
 8000e5a:	f1a0 0102 	sub.w	r1, r0, #2
 8000e5e:	4248      	negs	r0, r1
 8000e60:	eb40 0001 	adc.w	r0, r0, r1
 8000e64:	4770      	bx	lr

08000e66 <CAN_WakeUp>:
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
    
  /* Wake up request */
  CANx->MCR &= ~(uint32_t)CAN_MCR_SLEEP;
 8000e66:	6803      	ldr	r3, [r0, #0]
 8000e68:	f023 0302 	bic.w	r3, r3, #2
 8000e6c:	6003      	str	r3, [r0, #0]
    
  /* Sleep mode status */
  while(((CANx->MSR & CAN_MSR_SLAK) == CAN_MSR_SLAK)&&(wait_slak!=0x00))
 8000e6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e72:	6842      	ldr	r2, [r0, #4]
 8000e74:	0792      	lsls	r2, r2, #30
 8000e76:	d501      	bpl.n	8000e7c <CAN_WakeUp+0x16>
 8000e78:	3b01      	subs	r3, #1
 8000e7a:	d1fa      	bne.n	8000e72 <CAN_WakeUp+0xc>
  {
   wait_slak--;
  }
  if((CANx->MSR & CAN_MSR_SLAK) != CAN_MSR_SLAK)
 8000e7c:	6843      	ldr	r3, [r0, #4]
  * @retval CAN_WakeUp_Ok if sleep mode left, CAN_WakeUp_Failed otherwise.
  */
uint8_t CAN_WakeUp(CAN_TypeDef* CANx)
{
  uint32_t wait_slak = SLAK_TIMEOUT;
  uint8_t wakeupstatus = CAN_WakeUp_Failed;
 8000e7e:	f013 0f02 	tst.w	r3, #2
   /* wake up done : Sleep mode exited */
    wakeupstatus = CAN_WakeUp_Ok;
  }
  /* return wakeup status */
  return (uint8_t)wakeupstatus;
}
 8000e82:	bf14      	ite	ne
 8000e84:	2000      	movne	r0, #0
 8000e86:	2001      	moveq	r0, #1
 8000e88:	4770      	bx	lr

08000e8a <CAN_GetLastErrorCode>:
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  
  /* Get the error code*/
  errorcode = (((uint8_t)CANx->ESR) & (uint8_t)CAN_ESR_LEC);
 8000e8a:	6980      	ldr	r0, [r0, #24]
  
  /* Return the error code*/
  return errorcode;
}
 8000e8c:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8000e90:	4770      	bx	lr

08000e92 <CAN_GetReceiveErrorCounter>:
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  
  /* Get the Receive Error Counter*/
  counter = (uint8_t)((CANx->ESR & CAN_ESR_REC)>> 24);
 8000e92:	6980      	ldr	r0, [r0, #24]
  
  /* Return the Receive Error Counter*/
  return counter;
}
 8000e94:	0e00      	lsrs	r0, r0, #24
 8000e96:	4770      	bx	lr

08000e98 <CAN_GetLSBTransmitErrorCounter>:
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  
  /* Get the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
  counter = (uint8_t)((CANx->ESR & CAN_ESR_TEC)>> 16);
 8000e98:	6980      	ldr	r0, [r0, #24]
  
  /* Return the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
  return counter;
}
 8000e9a:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8000e9e:	4770      	bx	lr

08000ea0 <CAN_ITConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected CANx interrupt */
    CANx->IER |= CAN_IT;
 8000ea0:	6943      	ldr	r3, [r0, #20]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_IT(CAN_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000ea2:	b10a      	cbz	r2, 8000ea8 <CAN_ITConfig+0x8>
  {
    /* Enable the selected CANx interrupt */
    CANx->IER |= CAN_IT;
 8000ea4:	4319      	orrs	r1, r3
 8000ea6:	e001      	b.n	8000eac <CAN_ITConfig+0xc>
  }
  else
  {
    /* Disable the selected CANx interrupt */
    CANx->IER &= ~CAN_IT;
 8000ea8:	ea23 0101 	bic.w	r1, r3, r1
 8000eac:	6141      	str	r1, [r0, #20]
 8000eae:	4770      	bx	lr

08000eb0 <CAN_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_GET_FLAG(CAN_FLAG));
  

  if((CAN_FLAG & CAN_FLAGS_ESR) != (uint32_t)RESET)
 8000eb0:	f411 0f70 	tst.w	r1, #15728640	; 0xf00000
 8000eb4:	d001      	beq.n	8000eba <CAN_GetFlagStatus+0xa>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->ESR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 8000eb6:	6983      	ldr	r3, [r0, #24]
 8000eb8:	e00a      	b.n	8000ed0 <CAN_GetFlagStatus+0x20>
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_MSR) != (uint32_t)RESET)
 8000eba:	01cb      	lsls	r3, r1, #7
 8000ebc:	d501      	bpl.n	8000ec2 <CAN_GetFlagStatus+0x12>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->MSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 8000ebe:	6843      	ldr	r3, [r0, #4]
 8000ec0:	e006      	b.n	8000ed0 <CAN_GetFlagStatus+0x20>
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_TSR) != (uint32_t)RESET)
 8000ec2:	010a      	lsls	r2, r1, #4
 8000ec4:	d501      	bpl.n	8000eca <CAN_GetFlagStatus+0x1a>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->TSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 8000ec6:	6883      	ldr	r3, [r0, #8]
 8000ec8:	e002      	b.n	8000ed0 <CAN_GetFlagStatus+0x20>
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_RF0R) != (uint32_t)RESET)
 8000eca:	018b      	lsls	r3, r1, #6
 8000ecc:	d509      	bpl.n	8000ee2 <CAN_GetFlagStatus+0x32>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->RF0R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 8000ece:	68c3      	ldr	r3, [r0, #12]
 8000ed0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000ed4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
      bitstatus = SET;
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 8000ed8:	420b      	tst	r3, r1
 8000eda:	bf0c      	ite	eq
 8000edc:	2000      	moveq	r0, #0
 8000ede:	2001      	movne	r0, #1
 8000ee0:	4770      	bx	lr
    }
  }
  else /* If(CAN_FLAG & CAN_FLAGS_RF1R != (uint32_t)RESET) */
  { 
    /* Check the status of the specified CAN flag */
    if ((uint32_t)(CANx->RF1R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 8000ee2:	6903      	ldr	r3, [r0, #16]
 8000ee4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000ee8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
      bitstatus = SET;
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 8000eec:	420b      	tst	r3, r1
 8000eee:	bf0c      	ite	eq
 8000ef0:	2000      	moveq	r0, #0
 8000ef2:	2001      	movne	r0, #1
      bitstatus = RESET;
    }
  }
  /* Return the CAN_FLAG status */
  return  bitstatus;
}
 8000ef4:	4770      	bx	lr

08000ef6 <CAN_ClearFlag>:
  uint32_t flagtmp=0;
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_CLEAR_FLAG(CAN_FLAG));
  
  if (CAN_FLAG == CAN_FLAG_LEC) /* ESR register */
 8000ef6:	4b0b      	ldr	r3, [pc, #44]	; (8000f24 <CAN_ClearFlag+0x2e>)
 8000ef8:	4299      	cmp	r1, r3
 8000efa:	d102      	bne.n	8000f02 <CAN_ClearFlag+0xc>
  {
    /* Clear the selected CAN flags */
    CANx->ESR = (uint32_t)RESET;
 8000efc:	2300      	movs	r3, #0
 8000efe:	6183      	str	r3, [r0, #24]
 8000f00:	4770      	bx	lr
  }
  else /* MSR or TSR or RF0R or RF1R */
  {
    flagtmp = CAN_FLAG & 0x000FFFFF;
 8000f02:	f021 437f 	bic.w	r3, r1, #4278190080	; 0xff000000

    if ((CAN_FLAG & CAN_FLAGS_RF0R)!=(uint32_t)RESET)
 8000f06:	018a      	lsls	r2, r1, #6
    /* Clear the selected CAN flags */
    CANx->ESR = (uint32_t)RESET;
  }
  else /* MSR or TSR or RF0R or RF1R */
  {
    flagtmp = CAN_FLAG & 0x000FFFFF;
 8000f08:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000

    if ((CAN_FLAG & CAN_FLAGS_RF0R)!=(uint32_t)RESET)
 8000f0c:	d501      	bpl.n	8000f12 <CAN_ClearFlag+0x1c>
    {
      /* Receive Flags */
      CANx->RF0R = (uint32_t)(flagtmp);
 8000f0e:	60c3      	str	r3, [r0, #12]
 8000f10:	4770      	bx	lr
    }
    else if ((CAN_FLAG & CAN_FLAGS_RF1R)!=(uint32_t)RESET)
 8000f12:	014a      	lsls	r2, r1, #5
 8000f14:	d501      	bpl.n	8000f1a <CAN_ClearFlag+0x24>
    {
      /* Receive Flags */
      CANx->RF1R = (uint32_t)(flagtmp);
 8000f16:	6103      	str	r3, [r0, #16]
 8000f18:	4770      	bx	lr
    }
    else if ((CAN_FLAG & CAN_FLAGS_TSR)!=(uint32_t)RESET)
 8000f1a:	010a      	lsls	r2, r1, #4
    {
      /* Transmit Flags */
      CANx->TSR = (uint32_t)(flagtmp);
 8000f1c:	bf4c      	ite	mi
 8000f1e:	6083      	strmi	r3, [r0, #8]
    }
    else /* If((CAN_FLAG & CAN_FLAGS_MSR)!=(uint32_t)RESET) */
    {
      /* Operating mode Flags */
      CANx->MSR = (uint32_t)(flagtmp);
 8000f20:	6043      	strpl	r3, [r0, #4]
 8000f22:	4770      	bx	lr
 8000f24:	30f00070 	.word	0x30f00070

08000f28 <CAN_GetITStatus>:
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_IT(CAN_IT));
  
  /* check the interrupt enable bit */
 if((CANx->IER & CAN_IT) != RESET)
 8000f28:	6943      	ldr	r3, [r0, #20]
 8000f2a:	400b      	ands	r3, r1
 8000f2c:	d05f      	beq.n	8000fee <CAN_GetITStatus+0xc6>
 {
   /* in case the Interrupt is enabled, .... */
    switch (CAN_IT)
 8000f2e:	2940      	cmp	r1, #64	; 0x40
 8000f30:	d03e      	beq.n	8000fb0 <CAN_GetITStatus+0x88>
 8000f32:	d80e      	bhi.n	8000f52 <CAN_GetITStatus+0x2a>
 8000f34:	2904      	cmp	r1, #4
 8000f36:	d02f      	beq.n	8000f98 <CAN_GetITStatus+0x70>
 8000f38:	d804      	bhi.n	8000f44 <CAN_GetITStatus+0x1c>
 8000f3a:	2901      	cmp	r1, #1
 8000f3c:	d021      	beq.n	8000f82 <CAN_GetITStatus+0x5a>
 8000f3e:	2902      	cmp	r1, #2
 8000f40:	d157      	bne.n	8000ff2 <CAN_GetITStatus+0xca>
 8000f42:	e027      	b.n	8000f94 <CAN_GetITStatus+0x6c>
 8000f44:	2910      	cmp	r1, #16
 8000f46:	d02b      	beq.n	8000fa0 <CAN_GetITStatus+0x78>
 8000f48:	2920      	cmp	r1, #32
 8000f4a:	d02f      	beq.n	8000fac <CAN_GetITStatus+0x84>
 8000f4c:	2908      	cmp	r1, #8
 8000f4e:	d150      	bne.n	8000ff2 <CAN_GetITStatus+0xca>
 8000f50:	e024      	b.n	8000f9c <CAN_GetITStatus+0x74>
 8000f52:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8000f56:	d03f      	beq.n	8000fd8 <CAN_GetITStatus+0xb0>
 8000f58:	d809      	bhi.n	8000f6e <CAN_GetITStatus+0x46>
 8000f5a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8000f5e:	d035      	beq.n	8000fcc <CAN_GetITStatus+0xa4>
 8000f60:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8000f64:	d036      	beq.n	8000fd4 <CAN_GetITStatus+0xac>
 8000f66:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8000f6a:	d142      	bne.n	8000ff2 <CAN_GetITStatus+0xca>
 8000f6c:	e02a      	b.n	8000fc4 <CAN_GetITStatus+0x9c>
 8000f6e:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8000f72:	d01f      	beq.n	8000fb4 <CAN_GetITStatus+0x8c>
 8000f74:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8000f78:	d020      	beq.n	8000fbc <CAN_GetITStatus+0x94>
 8000f7a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8000f7e:	d138      	bne.n	8000ff2 <CAN_GetITStatus+0xca>
 8000f80:	e031      	b.n	8000fe6 <CAN_GetITStatus+0xbe>
    {
      case CAN_IT_TME:
        /* Check CAN_TSR_RQCPx bits */
        itstatus = CheckITStatus(CANx->TSR, CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2);  
 8000f82:	6880      	ldr	r0, [r0, #8]
  */
static ITStatus CheckITStatus(uint32_t CAN_Reg, uint32_t It_Bit)
{
  ITStatus pendingbitstatus = RESET;
  
  if ((CAN_Reg & It_Bit) != (uint32_t)RESET)
 8000f84:	f000 3001 	and.w	r0, r0, #16843009	; 0x1010101
 8000f88:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
  {
    /* CAN_IT is set */
    pendingbitstatus = SET;
 8000f8c:	3000      	adds	r0, #0
 8000f8e:	bf18      	it	ne
 8000f90:	2001      	movne	r0, #1
 8000f92:	4770      	bx	lr
        /* Check CAN_TSR_RQCPx bits */
        itstatus = CheckITStatus(CANx->TSR, CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2);  
        break;
      case CAN_IT_FMP0:
        /* Check CAN_RF0R_FMP0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FMP0);  
 8000f94:	68c0      	ldr	r0, [r0, #12]
 8000f96:	e004      	b.n	8000fa2 <CAN_GetITStatus+0x7a>
        break;
      case CAN_IT_FF0:
        /* Check CAN_RF0R_FULL0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FULL0);  
 8000f98:	68c0      	ldr	r0, [r0, #12]
 8000f9a:	e00c      	b.n	8000fb6 <CAN_GetITStatus+0x8e>
        break;
      case CAN_IT_FOV0:
        /* Check CAN_RF0R_FOVR0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FOVR0);  
 8000f9c:	68c0      	ldr	r0, [r0, #12]
 8000f9e:	e00e      	b.n	8000fbe <CAN_GetITStatus+0x96>
        break;
      case CAN_IT_FMP1:
        /* Check CAN_RF1R_FMP1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FMP1);  
 8000fa0:	6900      	ldr	r0, [r0, #16]
    pendingbitstatus = SET;
  }
  else
  {
    /* CAN_IT is reset */
    pendingbitstatus = RESET;
 8000fa2:	f010 0003 	ands.w	r0, r0, #3
 8000fa6:	bf18      	it	ne
 8000fa8:	2001      	movne	r0, #1
 8000faa:	4770      	bx	lr
        /* Check CAN_RF1R_FMP1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FMP1);  
        break;
      case CAN_IT_FF1:
        /* Check CAN_RF1R_FULL1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FULL1);  
 8000fac:	6900      	ldr	r0, [r0, #16]
 8000fae:	e002      	b.n	8000fb6 <CAN_GetITStatus+0x8e>
        break;
      case CAN_IT_FOV1:
        /* Check CAN_RF1R_FOVR1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FOVR1);  
 8000fb0:	6900      	ldr	r0, [r0, #16]
 8000fb2:	e004      	b.n	8000fbe <CAN_GetITStatus+0x96>
        break;
      case CAN_IT_WKU:
        /* Check CAN_MSR_WKUI bit */
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_WKUI);  
 8000fb4:	6840      	ldr	r0, [r0, #4]
    pendingbitstatus = SET;
  }
  else
  {
    /* CAN_IT is reset */
    pendingbitstatus = RESET;
 8000fb6:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 8000fba:	4770      	bx	lr
        /* Check CAN_MSR_WKUI bit */
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_WKUI);  
        break;
      case CAN_IT_SLK:
        /* Check CAN_MSR_SLAKI bit */
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_SLAKI);  
 8000fbc:	6840      	ldr	r0, [r0, #4]
    pendingbitstatus = SET;
  }
  else
  {
    /* CAN_IT is reset */
    pendingbitstatus = RESET;
 8000fbe:	f3c0 1000 	ubfx	r0, r0, #4, #1
 8000fc2:	4770      	bx	lr
        /* Check CAN_MSR_SLAKI bit */
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_SLAKI);  
        break;
      case CAN_IT_EWG:
        /* Check CAN_ESR_EWGF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EWGF);  
 8000fc4:	6980      	ldr	r0, [r0, #24]
    pendingbitstatus = SET;
  }
  else
  {
    /* CAN_IT is reset */
    pendingbitstatus = RESET;
 8000fc6:	f000 0001 	and.w	r0, r0, #1
 8000fca:	4770      	bx	lr
        /* Check CAN_ESR_EWGF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EWGF);  
        break;
      case CAN_IT_EPV:
        /* Check CAN_ESR_EPVF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EPVF);  
 8000fcc:	6980      	ldr	r0, [r0, #24]
    pendingbitstatus = SET;
  }
  else
  {
    /* CAN_IT is reset */
    pendingbitstatus = RESET;
 8000fce:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8000fd2:	4770      	bx	lr
        /* Check CAN_ESR_EPVF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EPVF);  
        break;
      case CAN_IT_BOF:
        /* Check CAN_ESR_BOFF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_BOFF);  
 8000fd4:	6980      	ldr	r0, [r0, #24]
 8000fd6:	e007      	b.n	8000fe8 <CAN_GetITStatus+0xc0>
        break;
      case CAN_IT_LEC:
        /* Check CAN_ESR_LEC bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_LEC);  
 8000fd8:	6983      	ldr	r3, [r0, #24]
    pendingbitstatus = SET;
  }
  else
  {
    /* CAN_IT is reset */
    pendingbitstatus = RESET;
 8000fda:	f013 0f70 	tst.w	r3, #112	; 0x70
 8000fde:	bf0c      	ite	eq
 8000fe0:	2000      	moveq	r0, #0
 8000fe2:	2001      	movne	r0, #1
 8000fe4:	4770      	bx	lr
        /* Check CAN_ESR_LEC bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_LEC);  
        break;
      case CAN_IT_ERR:
        /* Check CAN_MSR_ERRI bit */ 
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_ERRI); 
 8000fe6:	6840      	ldr	r0, [r0, #4]
    pendingbitstatus = SET;
  }
  else
  {
    /* CAN_IT is reset */
    pendingbitstatus = RESET;
 8000fe8:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8000fec:	4770      	bx	lr
    }
  }
  else
  {
   /* in case the Interrupt is not enabled, return RESET */
    itstatus  = RESET;
 8000fee:	4618      	mov	r0, r3
 8000ff0:	4770      	bx	lr
        /* Check CAN_MSR_ERRI bit */ 
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_ERRI); 
        break;
      default:
        /* in case of error, return RESET */
        itstatus = RESET;
 8000ff2:	2000      	movs	r0, #0
    itstatus  = RESET;
  }
  
  /* Return the CAN_IT status */
  return  itstatus;
}
 8000ff4:	4770      	bx	lr

08000ff6 <CAN_ClearITPendingBit>:
{
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_CLEAR_IT(CAN_IT));

  switch (CAN_IT)
 8000ff6:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8000ffa:	d035      	beq.n	8001068 <CAN_ClearITPendingBit+0x72>
 8000ffc:	d80c      	bhi.n	8001018 <CAN_ClearITPendingBit+0x22>
 8000ffe:	2908      	cmp	r1, #8
 8001000:	d024      	beq.n	800104c <CAN_ClearITPendingBit+0x56>
 8001002:	d804      	bhi.n	800100e <CAN_ClearITPendingBit+0x18>
 8001004:	2901      	cmp	r1, #1
 8001006:	d01c      	beq.n	8001042 <CAN_ClearITPendingBit+0x4c>
 8001008:	2904      	cmp	r1, #4
 800100a:	d134      	bne.n	8001076 <CAN_ClearITPendingBit+0x80>
 800100c:	e01c      	b.n	8001048 <CAN_ClearITPendingBit+0x52>
 800100e:	2920      	cmp	r1, #32
 8001010:	d01f      	beq.n	8001052 <CAN_ClearITPendingBit+0x5c>
 8001012:	2940      	cmp	r1, #64	; 0x40
 8001014:	d12f      	bne.n	8001076 <CAN_ClearITPendingBit+0x80>
 8001016:	e01e      	b.n	8001056 <CAN_ClearITPendingBit+0x60>
 8001018:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800101c:	d022      	beq.n	8001064 <CAN_ClearITPendingBit+0x6e>
 800101e:	d806      	bhi.n	800102e <CAN_ClearITPendingBit+0x38>
 8001020:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8001024:	d020      	beq.n	8001068 <CAN_ClearITPendingBit+0x72>
 8001026:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800102a:	d124      	bne.n	8001076 <CAN_ClearITPendingBit+0x80>
 800102c:	e01c      	b.n	8001068 <CAN_ClearITPendingBit+0x72>
 800102e:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8001032:	d013      	beq.n	800105c <CAN_ClearITPendingBit+0x66>
 8001034:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8001038:	d012      	beq.n	8001060 <CAN_ClearITPendingBit+0x6a>
 800103a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800103e:	d11a      	bne.n	8001076 <CAN_ClearITPendingBit+0x80>
 8001040:	e015      	b.n	800106e <CAN_ClearITPendingBit+0x78>
  {
    case CAN_IT_TME:
      /* Clear CAN_TSR_RQCPx (rc_w1)*/
      CANx->TSR = CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2;  
 8001042:	4b0d      	ldr	r3, [pc, #52]	; (8001078 <CAN_ClearITPendingBit+0x82>)
 8001044:	6083      	str	r3, [r0, #8]
      break;
 8001046:	4770      	bx	lr
    case CAN_IT_FF0:
      /* Clear CAN_RF0R_FULL0 (rc_w1)*/
      CANx->RF0R = CAN_RF0R_FULL0; 
 8001048:	2308      	movs	r3, #8
 800104a:	e000      	b.n	800104e <CAN_ClearITPendingBit+0x58>
      break;
    case CAN_IT_FOV0:
      /* Clear CAN_RF0R_FOVR0 (rc_w1)*/
      CANx->RF0R = CAN_RF0R_FOVR0; 
 800104c:	2310      	movs	r3, #16
 800104e:	60c3      	str	r3, [r0, #12]
      break;
 8001050:	4770      	bx	lr
    case CAN_IT_FF1:
      /* Clear CAN_RF1R_FULL1 (rc_w1)*/
      CANx->RF1R = CAN_RF1R_FULL1;  
 8001052:	2308      	movs	r3, #8
 8001054:	e000      	b.n	8001058 <CAN_ClearITPendingBit+0x62>
      break;
    case CAN_IT_FOV1:
      /* Clear CAN_RF1R_FOVR1 (rc_w1)*/
      CANx->RF1R = CAN_RF1R_FOVR1; 
 8001056:	2310      	movs	r3, #16
 8001058:	6103      	str	r3, [r0, #16]
      break;
 800105a:	4770      	bx	lr
    case CAN_IT_WKU:
      /* Clear CAN_MSR_WKUI (rc_w1)*/
      CANx->MSR = CAN_MSR_WKUI;  
 800105c:	2308      	movs	r3, #8
 800105e:	e004      	b.n	800106a <CAN_ClearITPendingBit+0x74>
      break;
    case CAN_IT_SLK:
      /* Clear CAN_MSR_SLAKI (rc_w1)*/ 
      CANx->MSR = CAN_MSR_SLAKI;   
 8001060:	2310      	movs	r3, #16
 8001062:	e002      	b.n	800106a <CAN_ClearITPendingBit+0x74>
      CANx->MSR = CAN_MSR_ERRI; 
       /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/
       break;
    case CAN_IT_LEC:
      /*  Clear LEC bits */
      CANx->ESR = RESET; 
 8001064:	2300      	movs	r3, #0
 8001066:	6183      	str	r3, [r0, #24]
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI; 
 8001068:	2304      	movs	r3, #4
 800106a:	6043      	str	r3, [r0, #4]
      break;
 800106c:	4770      	bx	lr
    case CAN_IT_ERR:
      /*Clear LEC bits */
      CANx->ESR = RESET; 
 800106e:	2300      	movs	r3, #0
 8001070:	6183      	str	r3, [r0, #24]
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI; 
 8001072:	2304      	movs	r3, #4
 8001074:	6043      	str	r3, [r0, #4]
 8001076:	4770      	bx	lr
 8001078:	00010101 	.word	0x00010101

0800107c <CRC_ResetDR>:
  * @retval None
  */
void CRC_ResetDR(void)
{
  /* Reset CRC generator */
  CRC->CR = CRC_CR_RESET;
 800107c:	4b01      	ldr	r3, [pc, #4]	; (8001084 <CRC_ResetDR+0x8>)
 800107e:	2201      	movs	r2, #1
 8001080:	609a      	str	r2, [r3, #8]
}
 8001082:	4770      	bx	lr
 8001084:	40023000 	.word	0x40023000

08001088 <CRC_CalcCRC>:
  * @param  Data: data word(32-bit) to compute its CRC
  * @retval 32-bit CRC
  */
uint32_t CRC_CalcCRC(uint32_t Data)
{
  CRC->DR = Data;
 8001088:	4b01      	ldr	r3, [pc, #4]	; (8001090 <CRC_CalcCRC+0x8>)
 800108a:	6018      	str	r0, [r3, #0]
  
  return (CRC->DR);
 800108c:	6818      	ldr	r0, [r3, #0]
}
 800108e:	4770      	bx	lr
 8001090:	40023000 	.word	0x40023000

08001094 <CRC_CalcBlockCRC>:
  * @param  pBuffer: pointer to the buffer containing the data to be computed
  * @param  BufferLength: length of the buffer to be computed					
  * @retval 32-bit CRC
  */
uint32_t CRC_CalcBlockCRC(uint32_t pBuffer[], uint32_t BufferLength)
{
 8001094:	b510      	push	{r4, lr}
  uint32_t index = 0;
  
  for(index = 0; index < BufferLength; index++)
 8001096:	2300      	movs	r3, #0
 8001098:	4a05      	ldr	r2, [pc, #20]	; (80010b0 <CRC_CalcBlockCRC+0x1c>)
 800109a:	e003      	b.n	80010a4 <CRC_CalcBlockCRC+0x10>
  {
    CRC->DR = pBuffer[index];
 800109c:	f850 4b04 	ldr.w	r4, [r0], #4
  */
uint32_t CRC_CalcBlockCRC(uint32_t pBuffer[], uint32_t BufferLength)
{
  uint32_t index = 0;
  
  for(index = 0; index < BufferLength; index++)
 80010a0:	3301      	adds	r3, #1
  {
    CRC->DR = pBuffer[index];
 80010a2:	6014      	str	r4, [r2, #0]
  */
uint32_t CRC_CalcBlockCRC(uint32_t pBuffer[], uint32_t BufferLength)
{
  uint32_t index = 0;
  
  for(index = 0; index < BufferLength; index++)
 80010a4:	428b      	cmp	r3, r1
 80010a6:	d1f9      	bne.n	800109c <CRC_CalcBlockCRC+0x8>
  {
    CRC->DR = pBuffer[index];
  }
  return (CRC->DR);
 80010a8:	4b01      	ldr	r3, [pc, #4]	; (80010b0 <CRC_CalcBlockCRC+0x1c>)
 80010aa:	6818      	ldr	r0, [r3, #0]
}
 80010ac:	bd10      	pop	{r4, pc}
 80010ae:	bf00      	nop
 80010b0:	40023000 	.word	0x40023000

080010b4 <CRC_GetCRC>:
  * @param  None
  * @retval 32-bit CRC
  */
uint32_t CRC_GetCRC(void)
{
  return (CRC->DR);
 80010b4:	4b01      	ldr	r3, [pc, #4]	; (80010bc <CRC_GetCRC+0x8>)
 80010b6:	6818      	ldr	r0, [r3, #0]
}
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	40023000 	.word	0x40023000

080010c0 <CRC_SetIDRegister>:
  * @param  IDValue: 8-bit value to be stored in the ID register 					
  * @retval None
  */
void CRC_SetIDRegister(uint8_t IDValue)
{
  CRC->IDR = IDValue;
 80010c0:	4b01      	ldr	r3, [pc, #4]	; (80010c8 <CRC_SetIDRegister+0x8>)
 80010c2:	7118      	strb	r0, [r3, #4]
}
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	40023000 	.word	0x40023000

080010cc <CRC_GetIDRegister>:
  * @param  None
  * @retval 8-bit value of the ID register 
  */
uint8_t CRC_GetIDRegister(void)
{
  return (CRC->IDR);
 80010cc:	4b01      	ldr	r3, [pc, #4]	; (80010d4 <CRC_GetIDRegister+0x8>)
 80010ce:	7918      	ldrb	r0, [r3, #4]
}
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	40023000 	.word	0x40023000

080010d8 <CRYP_DeInit>:
  * @brief  Deinitializes the CRYP peripheral registers to their default reset values
  * @param  None
  * @retval None
  */
void CRYP_DeInit(void)
{
 80010d8:	b508      	push	{r3, lr}
  /* Enable CRYP reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_CRYP, ENABLE);
 80010da:	2010      	movs	r0, #16
 80010dc:	2101      	movs	r1, #1
 80010de:	f002 fd21 	bl	8003b24 <RCC_AHB2PeriphResetCmd>

  /* Release CRYP from reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_CRYP, DISABLE);
 80010e2:	2010      	movs	r0, #16
 80010e4:	2100      	movs	r1, #0
}
 80010e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* Enable CRYP reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_CRYP, ENABLE);

  /* Release CRYP from reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_CRYP, DISABLE);
 80010ea:	f002 bd1b 	b.w	8003b24 <RCC_AHB2PeriphResetCmd>

080010ee <CRYP_Init>:
  assert_param(IS_CRYP_ALGOMODE(CRYP_InitStruct->CRYP_AlgoMode));
  assert_param(IS_CRYP_DATATYPE(CRYP_InitStruct->CRYP_DataType));
  assert_param(IS_CRYP_ALGODIR(CRYP_InitStruct->CRYP_AlgoDir));

  /* Select Algorithm mode*/  
  CRYP->CR &= ~CRYP_CR_ALGOMODE;
 80010ee:	4b16      	ldr	r3, [pc, #88]	; (8001148 <CRYP_Init+0x5a>)
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	f022 0238 	bic.w	r2, r2, #56	; 0x38
  * @param  CRYP_InitStruct: pointer to a CRYP_InitTypeDef structure that contains
  *         the configuration information for the CRYP peripheral.
  * @retval None
  */
void CRYP_Init(CRYP_InitTypeDef* CRYP_InitStruct)
{
 80010f6:	b510      	push	{r4, lr}
  assert_param(IS_CRYP_ALGOMODE(CRYP_InitStruct->CRYP_AlgoMode));
  assert_param(IS_CRYP_DATATYPE(CRYP_InitStruct->CRYP_DataType));
  assert_param(IS_CRYP_ALGODIR(CRYP_InitStruct->CRYP_AlgoDir));

  /* Select Algorithm mode*/  
  CRYP->CR &= ~CRYP_CR_ALGOMODE;
 80010f8:	601a      	str	r2, [r3, #0]
  CRYP->CR |= CRYP_InitStruct->CRYP_AlgoMode;
 80010fa:	6819      	ldr	r1, [r3, #0]
 80010fc:	8842      	ldrh	r2, [r0, #2]

  /* Select dataType */ 
  CRYP->CR &= ~CRYP_CR_DATATYPE;
  CRYP->CR |= CRYP_InitStruct->CRYP_DataType;
 80010fe:	8884      	ldrh	r4, [r0, #4]
  assert_param(IS_CRYP_DATATYPE(CRYP_InitStruct->CRYP_DataType));
  assert_param(IS_CRYP_ALGODIR(CRYP_InitStruct->CRYP_AlgoDir));

  /* Select Algorithm mode*/  
  CRYP->CR &= ~CRYP_CR_ALGOMODE;
  CRYP->CR |= CRYP_InitStruct->CRYP_AlgoMode;
 8001100:	4311      	orrs	r1, r2
 8001102:	6019      	str	r1, [r3, #0]

  /* Select dataType */ 
  CRYP->CR &= ~CRYP_CR_DATATYPE;
 8001104:	6819      	ldr	r1, [r3, #0]
 8001106:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 800110a:	6019      	str	r1, [r3, #0]
  CRYP->CR |= CRYP_InitStruct->CRYP_DataType;
 800110c:	6819      	ldr	r1, [r3, #0]

  /* select Key size (used only with AES algorithm) */
  if ((CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_ECB) ||
 800110e:	2a20      	cmp	r2, #32
  CRYP->CR &= ~CRYP_CR_ALGOMODE;
  CRYP->CR |= CRYP_InitStruct->CRYP_AlgoMode;

  /* Select dataType */ 
  CRYP->CR &= ~CRYP_CR_DATATYPE;
  CRYP->CR |= CRYP_InitStruct->CRYP_DataType;
 8001110:	ea44 0101 	orr.w	r1, r4, r1
 8001114:	6019      	str	r1, [r3, #0]

  /* select Key size (used only with AES algorithm) */
  if ((CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_ECB) ||
 8001116:	d005      	beq.n	8001124 <CRYP_Init+0x36>
 8001118:	2a28      	cmp	r2, #40	; 0x28
 800111a:	d003      	beq.n	8001124 <CRYP_Init+0x36>
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_CBC) ||
 800111c:	2a30      	cmp	r2, #48	; 0x30
 800111e:	d001      	beq.n	8001124 <CRYP_Init+0x36>
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_CTR) ||
 8001120:	2a38      	cmp	r2, #56	; 0x38
 8001122:	d107      	bne.n	8001134 <CRYP_Init+0x46>
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_Key))
  {
    assert_param(IS_CRYP_KEYSIZE(CRYP_InitStruct->CRYP_KeySize));
    CRYP->CR &= ~CRYP_CR_KEYSIZE;
 8001124:	681a      	ldr	r2, [r3, #0]
    CRYP->CR |= CRYP_InitStruct->CRYP_KeySize; /* Key size and value must be 
 8001126:	88c1      	ldrh	r1, [r0, #6]
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_CBC) ||
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_CTR) ||
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_Key))
  {
    assert_param(IS_CRYP_KEYSIZE(CRYP_InitStruct->CRYP_KeySize));
    CRYP->CR &= ~CRYP_CR_KEYSIZE;
 8001128:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800112c:	601a      	str	r2, [r3, #0]
    CRYP->CR |= CRYP_InitStruct->CRYP_KeySize; /* Key size and value must be 
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	430a      	orrs	r2, r1
 8001132:	601a      	str	r2, [r3, #0]
                                                  configured once the key has 
                                                  been prepared */
  }

  /* Select data Direction */ 
  CRYP->CR &= ~CRYP_CR_ALGODIR;
 8001134:	4b04      	ldr	r3, [pc, #16]	; (8001148 <CRYP_Init+0x5a>)
  CRYP->CR |= CRYP_InitStruct->CRYP_AlgoDir;
 8001136:	8801      	ldrh	r1, [r0, #0]
                                                  configured once the key has 
                                                  been prepared */
  }

  /* Select data Direction */ 
  CRYP->CR &= ~CRYP_CR_ALGODIR;
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	f022 0204 	bic.w	r2, r2, #4
 800113e:	601a      	str	r2, [r3, #0]
  CRYP->CR |= CRYP_InitStruct->CRYP_AlgoDir;
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	430a      	orrs	r2, r1
 8001144:	601a      	str	r2, [r3, #0]
}
 8001146:	bd10      	pop	{r4, pc}
 8001148:	50060000 	.word	0x50060000

0800114c <CRYP_StructInit>:
  * @retval None
  */
void CRYP_StructInit(CRYP_InitTypeDef* CRYP_InitStruct)
{
  /* Initialize the CRYP_AlgoDir member */
  CRYP_InitStruct->CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 800114c:	2300      	movs	r3, #0
 800114e:	8003      	strh	r3, [r0, #0]

  /* initialize the CRYP_AlgoMode member */
  CRYP_InitStruct->CRYP_AlgoMode = CRYP_AlgoMode_TDES_ECB;
 8001150:	8043      	strh	r3, [r0, #2]

  /* initialize the CRYP_DataType member */
  CRYP_InitStruct->CRYP_DataType = CRYP_DataType_32b;
 8001152:	8083      	strh	r3, [r0, #4]
  
  /* Initialize the CRYP_KeySize member */
  CRYP_InitStruct->CRYP_KeySize = CRYP_KeySize_128b;
 8001154:	80c3      	strh	r3, [r0, #6]
}
 8001156:	4770      	bx	lr

08001158 <CRYP_KeyInit>:
  * @retval None
  */
void CRYP_KeyInit(CRYP_KeyInitTypeDef* CRYP_KeyInitStruct)
{
  /* Key Initialisation */
  CRYP->K0LR = CRYP_KeyInitStruct->CRYP_Key0Left;
 8001158:	6802      	ldr	r2, [r0, #0]
 800115a:	4b08      	ldr	r3, [pc, #32]	; (800117c <CRYP_KeyInit+0x24>)
 800115c:	621a      	str	r2, [r3, #32]
  CRYP->K0RR = CRYP_KeyInitStruct->CRYP_Key0Right;
 800115e:	6842      	ldr	r2, [r0, #4]
 8001160:	625a      	str	r2, [r3, #36]	; 0x24
  CRYP->K1LR = CRYP_KeyInitStruct->CRYP_Key1Left;
 8001162:	6882      	ldr	r2, [r0, #8]
 8001164:	629a      	str	r2, [r3, #40]	; 0x28
  CRYP->K1RR = CRYP_KeyInitStruct->CRYP_Key1Right;
 8001166:	68c2      	ldr	r2, [r0, #12]
 8001168:	62da      	str	r2, [r3, #44]	; 0x2c
  CRYP->K2LR = CRYP_KeyInitStruct->CRYP_Key2Left;
 800116a:	6902      	ldr	r2, [r0, #16]
 800116c:	631a      	str	r2, [r3, #48]	; 0x30
  CRYP->K2RR = CRYP_KeyInitStruct->CRYP_Key2Right;
 800116e:	6942      	ldr	r2, [r0, #20]
 8001170:	635a      	str	r2, [r3, #52]	; 0x34
  CRYP->K3LR = CRYP_KeyInitStruct->CRYP_Key3Left;
 8001172:	6982      	ldr	r2, [r0, #24]
 8001174:	639a      	str	r2, [r3, #56]	; 0x38
  CRYP->K3RR = CRYP_KeyInitStruct->CRYP_Key3Right;
 8001176:	69c2      	ldr	r2, [r0, #28]
 8001178:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800117a:	4770      	bx	lr
 800117c:	50060000 	.word	0x50060000

08001180 <CRYP_KeyStructInit>:
  *         which will be initialized.
  * @retval None
  */
void CRYP_KeyStructInit(CRYP_KeyInitTypeDef* CRYP_KeyInitStruct)
{
  CRYP_KeyInitStruct->CRYP_Key0Left  = 0;
 8001180:	2300      	movs	r3, #0
 8001182:	6003      	str	r3, [r0, #0]
  CRYP_KeyInitStruct->CRYP_Key0Right = 0;
 8001184:	6043      	str	r3, [r0, #4]
  CRYP_KeyInitStruct->CRYP_Key1Left  = 0;
 8001186:	6083      	str	r3, [r0, #8]
  CRYP_KeyInitStruct->CRYP_Key1Right = 0;
 8001188:	60c3      	str	r3, [r0, #12]
  CRYP_KeyInitStruct->CRYP_Key2Left  = 0;
 800118a:	6103      	str	r3, [r0, #16]
  CRYP_KeyInitStruct->CRYP_Key2Right = 0;
 800118c:	6143      	str	r3, [r0, #20]
  CRYP_KeyInitStruct->CRYP_Key3Left  = 0;
 800118e:	6183      	str	r3, [r0, #24]
  CRYP_KeyInitStruct->CRYP_Key3Right = 0;
 8001190:	61c3      	str	r3, [r0, #28]
}
 8001192:	4770      	bx	lr

08001194 <CRYP_IVInit>:
  *         the configuration information for the CRYP Initialization Vectors(IV).
  * @retval None
  */
void CRYP_IVInit(CRYP_IVInitTypeDef* CRYP_IVInitStruct)
{
  CRYP->IV0LR = CRYP_IVInitStruct->CRYP_IV0Left;
 8001194:	6802      	ldr	r2, [r0, #0]
 8001196:	4b04      	ldr	r3, [pc, #16]	; (80011a8 <CRYP_IVInit+0x14>)
 8001198:	641a      	str	r2, [r3, #64]	; 0x40
  CRYP->IV0RR = CRYP_IVInitStruct->CRYP_IV0Right;
 800119a:	6842      	ldr	r2, [r0, #4]
 800119c:	645a      	str	r2, [r3, #68]	; 0x44
  CRYP->IV1LR = CRYP_IVInitStruct->CRYP_IV1Left;
 800119e:	6882      	ldr	r2, [r0, #8]
 80011a0:	649a      	str	r2, [r3, #72]	; 0x48
  CRYP->IV1RR = CRYP_IVInitStruct->CRYP_IV1Right;
 80011a2:	68c2      	ldr	r2, [r0, #12]
 80011a4:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80011a6:	4770      	bx	lr
 80011a8:	50060000 	.word	0x50060000

080011ac <CRYP_IVStructInit>:
  *         Vectors(IV) structure which will be initialized.
  * @retval None
  */
void CRYP_IVStructInit(CRYP_IVInitTypeDef* CRYP_IVInitStruct)
{
  CRYP_IVInitStruct->CRYP_IV0Left  = 0;
 80011ac:	2300      	movs	r3, #0
 80011ae:	6003      	str	r3, [r0, #0]
  CRYP_IVInitStruct->CRYP_IV0Right = 0;
 80011b0:	6043      	str	r3, [r0, #4]
  CRYP_IVInitStruct->CRYP_IV1Left  = 0;
 80011b2:	6083      	str	r3, [r0, #8]
  CRYP_IVInitStruct->CRYP_IV1Right = 0;
 80011b4:	60c3      	str	r3, [r0, #12]
}
 80011b6:	4770      	bx	lr

080011b8 <CRYP_FIFOFlush>:
  * @retval None
  */
void CRYP_FIFOFlush(void)
{
  /* Reset the read and write pointers of the FIFOs */
  CRYP->CR |= CRYP_CR_FFLUSH;
 80011b8:	4b02      	ldr	r3, [pc, #8]	; (80011c4 <CRYP_FIFOFlush+0xc>)
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80011c0:	601a      	str	r2, [r3, #0]
}
 80011c2:	4770      	bx	lr
 80011c4:	50060000 	.word	0x50060000

080011c8 <CRYP_Cmd>:
  * @param  NewState: new state of the CRYP peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void CRYP_Cmd(FunctionalState NewState)
{
 80011c8:	4b04      	ldr	r3, [pc, #16]	; (80011dc <CRYP_Cmd+0x14>)
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the Cryptographic processor */
    CRYP->CR |= CRYP_CR_CRYPEN;
 80011ca:	681a      	ldr	r2, [r3, #0]
void CRYP_Cmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80011cc:	b110      	cbz	r0, 80011d4 <CRYP_Cmd+0xc>
  {
    /* Enable the Cryptographic processor */
    CRYP->CR |= CRYP_CR_CRYPEN;
 80011ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80011d2:	e001      	b.n	80011d8 <CRYP_Cmd+0x10>
  }
  else
  {
    /* Disable the Cryptographic processor */
    CRYP->CR &= ~CRYP_CR_CRYPEN;
 80011d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	4770      	bx	lr
 80011dc:	50060000 	.word	0x50060000

080011e0 <CRYP_DataIn>:
  * @param  Data: data to write in Data Input register
  * @retval None
  */
void CRYP_DataIn(uint32_t Data)
{
  CRYP->DR = Data;
 80011e0:	4b01      	ldr	r3, [pc, #4]	; (80011e8 <CRYP_DataIn+0x8>)
 80011e2:	6098      	str	r0, [r3, #8]
}
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	50060000 	.word	0x50060000

080011ec <CRYP_DataOut>:
  * @param  None
  * @retval Last data entered into the output FIFO.
  */
uint32_t CRYP_DataOut(void)
{
  return CRYP->DOUT;
 80011ec:	4b01      	ldr	r3, [pc, #4]	; (80011f4 <CRYP_DataOut+0x8>)
 80011ee:	68d8      	ldr	r0, [r3, #12]
}
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	50060000 	.word	0x50060000

080011f8 <CRYP_SaveContext>:
  *         contains the configuration information for the CRYP Keys.  
  * @retval None
  */
ErrorStatus CRYP_SaveContext(CRYP_Context* CRYP_ContextSave,
                             CRYP_KeyInitTypeDef* CRYP_KeyInitStruct)
{
 80011f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t timeout = 0;
 80011fa:	2300      	movs	r3, #0
 80011fc:	9301      	str	r3, [sp, #4]
  uint32_t ckeckmask = 0, bitstatus;    
  ErrorStatus status = ERROR;

  /* Stop DMA transfers on the IN FIFO by clearing the DIEN bit in the CRYP_DMACR */
  CRYP->DMACR &= ~(uint32_t)CRYP_DMACR_DIEN;
 80011fe:	4b22      	ldr	r3, [pc, #136]	; (8001288 <CRYP_SaveContext+0x90>)
 8001200:	691a      	ldr	r2, [r3, #16]
 8001202:	f022 0201 	bic.w	r2, r2, #1
 8001206:	611a      	str	r2, [r3, #16]
    
  /* Wait until both the IN and OUT FIFOs are empty  
    (IFEM=1 and OFNE=0 in the CRYP_SR register) and the 
     BUSY bit is cleared. */

  if ((CRYP->CR & (uint32_t)(CRYP_CR_ALGOMODE_TDES_ECB | CRYP_CR_ALGOMODE_TDES_CBC)) != (uint32_t)0 )/* TDES */
 8001208:	681a      	ldr	r2, [r3, #0]
  { 
    ckeckmask =  CRYP_SR_IFEM | CRYP_SR_BUSY ;
 800120a:	f012 0f08 	tst.w	r2, #8
 800120e:	bf0c      	ite	eq
 8001210:	2215      	moveq	r2, #21
 8001212:	2211      	movne	r2, #17
  do 
  {
    bitstatus = CRYP->SR & ckeckmask;
    timeout++;
  }
  while ((timeout != MAX_TIMEOUT) && (bitstatus != CRYP_SR_IFEM));
 8001214:	f64f 74ff 	movw	r4, #65535	; 0xffff
    ckeckmask =  CRYP_SR_IFEM | CRYP_SR_BUSY | CRYP_SR_OFNE;
  }           
   
  do 
  {
    bitstatus = CRYP->SR & ckeckmask;
 8001218:	685d      	ldr	r5, [r3, #4]
    timeout++;
 800121a:	9e01      	ldr	r6, [sp, #4]
 800121c:	3601      	adds	r6, #1
 800121e:	9601      	str	r6, [sp, #4]
  }
  while ((timeout != MAX_TIMEOUT) && (bitstatus != CRYP_SR_IFEM));
 8001220:	9e01      	ldr	r6, [sp, #4]
 8001222:	42a6      	cmp	r6, r4
 8001224:	d002      	beq.n	800122c <CRYP_SaveContext+0x34>
    ckeckmask =  CRYP_SR_IFEM | CRYP_SR_BUSY | CRYP_SR_OFNE;
  }           
   
  do 
  {
    bitstatus = CRYP->SR & ckeckmask;
 8001226:	4015      	ands	r5, r2
    timeout++;
  }
  while ((timeout != MAX_TIMEOUT) && (bitstatus != CRYP_SR_IFEM));
 8001228:	2d01      	cmp	r5, #1
 800122a:	d1f5      	bne.n	8001218 <CRYP_SaveContext+0x20>
     
  if ((CRYP->SR & ckeckmask) != CRYP_SR_IFEM)
 800122c:	4b16      	ldr	r3, [pc, #88]	; (8001288 <CRYP_SaveContext+0x90>)
 800122e:	685c      	ldr	r4, [r3, #4]
 8001230:	4022      	ands	r2, r4
 8001232:	2a01      	cmp	r2, #1
 8001234:	d125      	bne.n	8001282 <CRYP_SaveContext+0x8a>
  {      
    /* Stop DMA transfers on the OUT FIFO by 
       - writing the DOEN bit to 0 in the CRYP_DMACR register 
       - and clear the CRYPEN bit. */

    CRYP->DMACR &= ~(uint32_t)CRYP_DMACR_DOEN;
 8001236:	691c      	ldr	r4, [r3, #16]
 8001238:	f024 0402 	bic.w	r4, r4, #2
 800123c:	611c      	str	r4, [r3, #16]
    CRYP->CR &= ~(uint32_t)CRYP_CR_CRYPEN;
 800123e:	681c      	ldr	r4, [r3, #0]
 8001240:	f424 4400 	bic.w	r4, r4, #32768	; 0x8000
 8001244:	601c      	str	r4, [r3, #0]

    /* Save the current configuration (bits [9:2] in the CRYP_CR register) */
    CRYP_ContextSave->CR_bits9to2  = CRYP->CR & (CRYP_CR_KEYSIZE  | 
 8001246:	681c      	ldr	r4, [r3, #0]
 8001248:	f404 747f 	and.w	r4, r4, #1020	; 0x3fc
 800124c:	6004      	str	r4, [r0, #0]
                                                 CRYP_CR_DATATYPE | 
                                                 CRYP_CR_ALGOMODE |
                                                 CRYP_CR_ALGODIR); 

    /* and, if not in ECB mode, the initialization vectors. */
    CRYP_ContextSave->CRYP_IV0LR = CRYP->IV0LR;
 800124e:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8001250:	6044      	str	r4, [r0, #4]
    CRYP_ContextSave->CRYP_IV0RR = CRYP->IV0RR;
 8001252:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8001254:	6084      	str	r4, [r0, #8]
    CRYP_ContextSave->CRYP_IV1LR = CRYP->IV1LR;
 8001256:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8001258:	60c4      	str	r4, [r0, #12]
    CRYP_ContextSave->CRYP_IV1RR = CRYP->IV1RR;
 800125a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125c:	6103      	str	r3, [r0, #16]

    /* save The key value */
    CRYP_ContextSave->CRYP_K0LR = CRYP_KeyInitStruct->CRYP_Key0Left; 
 800125e:	680b      	ldr	r3, [r1, #0]
 8001260:	6143      	str	r3, [r0, #20]
    CRYP_ContextSave->CRYP_K0RR = CRYP_KeyInitStruct->CRYP_Key0Right; 
 8001262:	684b      	ldr	r3, [r1, #4]
 8001264:	6183      	str	r3, [r0, #24]
    CRYP_ContextSave->CRYP_K1LR = CRYP_KeyInitStruct->CRYP_Key1Left; 
 8001266:	688b      	ldr	r3, [r1, #8]
 8001268:	61c3      	str	r3, [r0, #28]
    CRYP_ContextSave->CRYP_K1RR = CRYP_KeyInitStruct->CRYP_Key1Right; 
 800126a:	68cb      	ldr	r3, [r1, #12]
 800126c:	6203      	str	r3, [r0, #32]
    CRYP_ContextSave->CRYP_K2LR = CRYP_KeyInitStruct->CRYP_Key2Left; 
 800126e:	690b      	ldr	r3, [r1, #16]
 8001270:	6243      	str	r3, [r0, #36]	; 0x24
    CRYP_ContextSave->CRYP_K2RR = CRYP_KeyInitStruct->CRYP_Key2Right; 
 8001272:	694b      	ldr	r3, [r1, #20]
 8001274:	6283      	str	r3, [r0, #40]	; 0x28
    CRYP_ContextSave->CRYP_K3LR = CRYP_KeyInitStruct->CRYP_Key3Left; 
 8001276:	698b      	ldr	r3, [r1, #24]
 8001278:	62c3      	str	r3, [r0, #44]	; 0x2c
    CRYP_ContextSave->CRYP_K3RR = CRYP_KeyInitStruct->CRYP_Key3Right; 
 800127a:	69cb      	ldr	r3, [r1, #28]
 800127c:	6303      	str	r3, [r0, #48]	; 0x30

   /* When needed, save the DMA status (pointers for IN and OUT messages, 
      number of remaining bytes, etc.) */
     
    status = SUCCESS;
 800127e:	4610      	mov	r0, r2
 8001280:	e000      	b.n	8001284 <CRYP_SaveContext+0x8c>
  }
  while ((timeout != MAX_TIMEOUT) && (bitstatus != CRYP_SR_IFEM));
     
  if ((CRYP->SR & ckeckmask) != CRYP_SR_IFEM)
  {
    status = ERROR;
 8001282:	2000      	movs	r0, #0
     
    status = SUCCESS;
  }

   return status;
}
 8001284:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
 8001286:	bf00      	nop
 8001288:	50060000 	.word	0x50060000

0800128c <CRYP_RestoreContext>:
  */
void CRYP_RestoreContext(CRYP_Context* CRYP_ContextRestore)  
{

  /* Configure the processor with the saved configuration */
  CRYP->CR = CRYP_ContextRestore->CR_bits9to2;
 800128c:	6802      	ldr	r2, [r0, #0]
 800128e:	4b0f      	ldr	r3, [pc, #60]	; (80012cc <CRYP_RestoreContext+0x40>)
 8001290:	601a      	str	r2, [r3, #0]

  /* restore The key value */
  CRYP->K0LR = CRYP_ContextRestore->CRYP_K0LR; 
 8001292:	6942      	ldr	r2, [r0, #20]
 8001294:	621a      	str	r2, [r3, #32]
  CRYP->K0RR = CRYP_ContextRestore->CRYP_K0RR;
 8001296:	6982      	ldr	r2, [r0, #24]
 8001298:	625a      	str	r2, [r3, #36]	; 0x24
  CRYP->K1LR = CRYP_ContextRestore->CRYP_K1LR;
 800129a:	69c2      	ldr	r2, [r0, #28]
 800129c:	629a      	str	r2, [r3, #40]	; 0x28
  CRYP->K1RR = CRYP_ContextRestore->CRYP_K1RR;
 800129e:	6a02      	ldr	r2, [r0, #32]
 80012a0:	62da      	str	r2, [r3, #44]	; 0x2c
  CRYP->K2LR = CRYP_ContextRestore->CRYP_K2LR;
 80012a2:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80012a4:	631a      	str	r2, [r3, #48]	; 0x30
  CRYP->K2RR = CRYP_ContextRestore->CRYP_K2RR;
 80012a6:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80012a8:	635a      	str	r2, [r3, #52]	; 0x34
  CRYP->K3LR = CRYP_ContextRestore->CRYP_K3LR;
 80012aa:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80012ac:	639a      	str	r2, [r3, #56]	; 0x38
  CRYP->K3RR = CRYP_ContextRestore->CRYP_K3RR;
 80012ae:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80012b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* and the initialization vectors. */
  CRYP->IV0LR = CRYP_ContextRestore->CRYP_IV0LR;
 80012b2:	6842      	ldr	r2, [r0, #4]
 80012b4:	641a      	str	r2, [r3, #64]	; 0x40
  CRYP->IV0RR = CRYP_ContextRestore->CRYP_IV0RR;
 80012b6:	6882      	ldr	r2, [r0, #8]
 80012b8:	645a      	str	r2, [r3, #68]	; 0x44
  CRYP->IV1LR = CRYP_ContextRestore->CRYP_IV1LR;
 80012ba:	68c2      	ldr	r2, [r0, #12]
 80012bc:	649a      	str	r2, [r3, #72]	; 0x48
  CRYP->IV1RR = CRYP_ContextRestore->CRYP_IV1RR;
 80012be:	6902      	ldr	r2, [r0, #16]
 80012c0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the cryptographic processor */
  CRYP->CR |= CRYP_CR_CRYPEN;
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80012c8:	601a      	str	r2, [r3, #0]
}
 80012ca:	4770      	bx	lr
 80012cc:	50060000 	.word	0x50060000

080012d0 <CRYP_DMACmd>:
  * @param  NewState: new state of the selected CRYP DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void CRYP_DMACmd(uint8_t CRYP_DMAReq, FunctionalState NewState)
{
 80012d0:	4b05      	ldr	r3, [pc, #20]	; (80012e8 <CRYP_DMACmd+0x18>)
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected CRYP DMA request */
    CRYP->DMACR |= CRYP_DMAReq;
 80012d2:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_CRYP_DMAREQ(CRYP_DMAReq));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80012d4:	b109      	cbz	r1, 80012da <CRYP_DMACmd+0xa>
  {
    /* Enable the selected CRYP DMA request */
    CRYP->DMACR |= CRYP_DMAReq;
 80012d6:	4310      	orrs	r0, r2
 80012d8:	e003      	b.n	80012e2 <CRYP_DMACmd+0x12>
  }
  else
  {
    /* Disable the selected CRYP DMA request */
    CRYP->DMACR &= (uint8_t)~CRYP_DMAReq;
 80012da:	ea22 0000 	bic.w	r0, r2, r0
 80012de:	f000 00ff 	and.w	r0, r0, #255	; 0xff
 80012e2:	6118      	str	r0, [r3, #16]
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	50060000 	.word	0x50060000

080012ec <CRYP_ITConfig>:
  * @param  NewState: new state of the specified CRYP interrupt.
  *           This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void CRYP_ITConfig(uint8_t CRYP_IT, FunctionalState NewState)
{
 80012ec:	4b05      	ldr	r3, [pc, #20]	; (8001304 <CRYP_ITConfig+0x18>)
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected CRYP interrupt */
    CRYP->IMSCR |= CRYP_IT;
 80012ee:	695a      	ldr	r2, [r3, #20]
{
  /* Check the parameters */
  assert_param(IS_CRYP_CONFIG_IT(CRYP_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80012f0:	b109      	cbz	r1, 80012f6 <CRYP_ITConfig+0xa>
  {
    /* Enable the selected CRYP interrupt */
    CRYP->IMSCR |= CRYP_IT;
 80012f2:	4310      	orrs	r0, r2
 80012f4:	e003      	b.n	80012fe <CRYP_ITConfig+0x12>
  }
  else
  {
    /* Disable the selected CRYP interrupt */
    CRYP->IMSCR &= (uint8_t)~CRYP_IT;
 80012f6:	ea22 0000 	bic.w	r0, r2, r0
 80012fa:	f000 00ff 	and.w	r0, r0, #255	; 0xff
 80012fe:	6158      	str	r0, [r3, #20]
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	50060000 	.word	0x50060000

08001308 <CRYP_GetITStatus>:
  ITStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_CRYP_GET_IT(CRYP_IT));

  /* Check the status of the specified CRYP interrupt */
  if ((CRYP->MISR &  CRYP_IT) != (uint8_t)RESET)
 8001308:	4b03      	ldr	r3, [pc, #12]	; (8001318 <CRYP_GetITStatus+0x10>)
 800130a:	69db      	ldr	r3, [r3, #28]
  {
    /* CRYP_IT is set */
    bitstatus = SET;
 800130c:	4218      	tst	r0, r3
    /* CRYP_IT is reset */
    bitstatus = RESET;
  }
  /* Return the CRYP_IT status */
  return bitstatus;
}
 800130e:	bf0c      	ite	eq
 8001310:	2000      	moveq	r0, #0
 8001312:	2001      	movne	r0, #1
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	50060000 	.word	0x50060000

0800131c <CRYP_GetFlagStatus>:
  *            @arg CRYP_FLAG_OUTRIS: Output FIFO raw interrupt flag.
  *            @arg CRYP_FLAG_INRIS: Input FIFO raw interrupt flag.
  * @retval The new state of CRYP_FLAG (SET or RESET).
  */
FlagStatus CRYP_GetFlagStatus(uint8_t CRYP_FLAG)
{
 800131c:	4b05      	ldr	r3, [pc, #20]	; (8001334 <CRYP_GetFlagStatus+0x18>)

  /* Check the parameters */
  assert_param(IS_CRYP_GET_FLAG(CRYP_FLAG));

  /* check if the FLAG is in RISR register */
  if ((CRYP_FLAG & FLAG_MASK) != 0x00) 
 800131e:	f010 0f20 	tst.w	r0, #32
  {
    tempreg = CRYP->RISR;
 8001322:	bf14      	ite	ne
 8001324:	699b      	ldrne	r3, [r3, #24]
  }
  else  /* The FLAG is in SR register */
  {
    tempreg = CRYP->SR;
 8001326:	685b      	ldreq	r3, [r3, #4]

  /* Check the status of the specified CRYP flag */
  if ((tempreg & CRYP_FLAG ) != (uint8_t)RESET)
  {
    /* CRYP_FLAG is set */
    bitstatus = SET;
 8001328:	4203      	tst	r3, r0
    bitstatus = RESET;
  }

  /* Return the CRYP_FLAG status */
  return  bitstatus;
}
 800132a:	bf0c      	ite	eq
 800132c:	2000      	moveq	r0, #0
 800132e:	2001      	movne	r0, #1
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	50060000 	.word	0x50060000

08001338 <CRYP_AES_ECB>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_AES_ECB(uint8_t Mode, uint8_t* Key, uint16_t Keysize,
                         uint8_t* Input, uint32_t Ilength, uint8_t* Output)
{
 8001338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800133c:	b08d      	sub	sp, #52	; 0x34
 800133e:	4616      	mov	r6, r2
 8001340:	4604      	mov	r4, r0
  CRYP_InitTypeDef AES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
  __IO uint32_t counter = 0;
 8001342:	f04f 0a00 	mov.w	sl, #0
  uint32_t inputaddr  = (uint32_t)Input;
  uint32_t outputaddr = (uint32_t)Output;
  uint32_t i = 0;

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 8001346:	a801      	add	r0, sp, #4
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_AES_ECB(uint8_t Mode, uint8_t* Key, uint16_t Keysize,
                         uint8_t* Input, uint32_t Ilength, uint8_t* Output)
{
 8001348:	460d      	mov	r5, r1
 800134a:	4699      	mov	r9, r3
 800134c:	f8dd b058 	ldr.w	fp, [sp, #88]	; 0x58
  CRYP_InitTypeDef AES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
  __IO uint32_t counter = 0;
 8001350:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  uint32_t busystatus = 0;
  ErrorStatus status = SUCCESS;
  uint32_t keyaddr    = (uint32_t)Key;
  uint32_t inputaddr  = (uint32_t)Input;
 8001354:	4698      	mov	r8, r3
  uint32_t outputaddr = (uint32_t)Output;
 8001356:	9f17      	ldr	r7, [sp, #92]	; 0x5c
  uint32_t i = 0;

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 8001358:	f7ff ff12 	bl	8001180 <CRYP_KeyStructInit>

  switch(Keysize)
 800135c:	2ec0      	cmp	r6, #192	; 0xc0
 800135e:	d011      	beq.n	8001384 <CRYP_AES_ECB+0x4c>
 8001360:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8001364:	d023      	beq.n	80013ae <CRYP_AES_ECB+0x76>
 8001366:	2e80      	cmp	r6, #128	; 0x80
 8001368:	d13d      	bne.n	80013e6 <CRYP_AES_ECB+0xae>
  {
    case 128:
    AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
 800136a:	f8ad a02a 	strh.w	sl, [sp, #42]	; 0x2a
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800136e:	682b      	ldr	r3, [r5, #0]
 8001370:	ba1b      	rev	r3, r3
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8001372:	9305      	str	r3, [sp, #20]
 8001374:	686b      	ldr	r3, [r5, #4]
 8001376:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8001378:	9306      	str	r3, [sp, #24]
 800137a:	68ab      	ldr	r3, [r5, #8]
 800137c:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 800137e:	9307      	str	r3, [sp, #28]
 8001380:	68eb      	ldr	r3, [r5, #12]
 8001382:	e02e      	b.n	80013e2 <CRYP_AES_ECB+0xaa>
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
    break;
    case 192:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
 8001384:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001388:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 800138c:	682b      	ldr	r3, [r5, #0]
 800138e:	ba1b      	rev	r3, r3
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8001390:	9303      	str	r3, [sp, #12]
 8001392:	686b      	ldr	r3, [r5, #4]
 8001394:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8001396:	9304      	str	r3, [sp, #16]
 8001398:	68ab      	ldr	r3, [r5, #8]
 800139a:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 800139c:	9305      	str	r3, [sp, #20]
 800139e:	68eb      	ldr	r3, [r5, #12]
 80013a0:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 80013a2:	9306      	str	r3, [sp, #24]
 80013a4:	692b      	ldr	r3, [r5, #16]
 80013a6:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 80013a8:	9307      	str	r3, [sp, #28]
 80013aa:	696b      	ldr	r3, [r5, #20]
 80013ac:	e019      	b.n	80013e2 <CRYP_AES_ECB+0xaa>
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
    break;
    case 256:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
 80013ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013b2:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 80013b6:	682b      	ldr	r3, [r5, #0]
 80013b8:	ba1b      	rev	r3, r3
    AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
 80013ba:	9301      	str	r3, [sp, #4]
 80013bc:	686b      	ldr	r3, [r5, #4]
 80013be:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
 80013c0:	9302      	str	r3, [sp, #8]
 80013c2:	68ab      	ldr	r3, [r5, #8]
 80013c4:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 80013c6:	9303      	str	r3, [sp, #12]
 80013c8:	68eb      	ldr	r3, [r5, #12]
 80013ca:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 80013cc:	9304      	str	r3, [sp, #16]
 80013ce:	692b      	ldr	r3, [r5, #16]
 80013d0:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 80013d2:	9305      	str	r3, [sp, #20]
 80013d4:	696b      	ldr	r3, [r5, #20]
 80013d6:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 80013d8:	9306      	str	r3, [sp, #24]
 80013da:	69ab      	ldr	r3, [r5, #24]
 80013dc:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 80013de:	9307      	str	r3, [sp, #28]
 80013e0:	69eb      	ldr	r3, [r5, #28]
 80013e2:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 80013e4:	9308      	str	r3, [sp, #32]
    default:
    break;
  }

  /*------------------ AES Decryption ------------------*/
  if(Mode == MODE_DECRYPT) /* AES decryption */
 80013e6:	bb14      	cbnz	r4, 800142e <CRYP_AES_ECB+0xf6>
  {
    /* Flush IN/OUT FIFOs */
    CRYP_FIFOFlush();
 80013e8:	f7ff fee6 	bl	80011b8 <CRYP_FIFOFlush>

    /* Crypto Init for Key preparation for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 80013ec:	2304      	movs	r3, #4
 80013ee:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_Key;
    AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_32b;
    CRYP_Init(&AES_CRYP_InitStructure);
 80013f2:	a809      	add	r0, sp, #36	; 0x24
    /* Flush IN/OUT FIFOs */
    CRYP_FIFOFlush();

    /* Crypto Init for Key preparation for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
    AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_Key;
 80013f4:	2338      	movs	r3, #56	; 0x38
 80013f6:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_32b;
 80013fa:	f8ad 4028 	strh.w	r4, [sp, #40]	; 0x28
    CRYP_Init(&AES_CRYP_InitStructure);
 80013fe:	f7ff fe76 	bl	80010ee <CRYP_Init>

    /* Key Initialisation */
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 8001402:	a801      	add	r0, sp, #4
 8001404:	f7ff fea8 	bl	8001158 <CRYP_KeyInit>

    /* Enable Crypto processor */
    CRYP_Cmd(ENABLE);
 8001408:	2001      	movs	r0, #1
 800140a:	f7ff fedd 	bl	80011c8 <CRYP_Cmd>

    /* wait until the Busy flag is RESET */
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 800140e:	2010      	movs	r0, #16
 8001410:	f7ff ff84 	bl	800131c <CRYP_GetFlagStatus>
      counter++;
 8001414:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001416:	3301      	adds	r3, #1
 8001418:	930b      	str	r3, [sp, #44]	; 0x2c
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 800141a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800141c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001420:	d002      	beq.n	8001428 <CRYP_AES_ECB+0xf0>
 8001422:	2800      	cmp	r0, #0
 8001424:	d1f3      	bne.n	800140e <CRYP_AES_ECB+0xd6>
 8001426:	e000      	b.n	800142a <CRYP_AES_ECB+0xf2>

    if (busystatus != RESET)
 8001428:	b948      	cbnz	r0, 800143e <CRYP_AES_ECB+0x106>
       status = ERROR;
    }
    else
    {
      /* Crypto Init for decryption process */  
      AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 800142a:	2304      	movs	r3, #4
 800142c:	e003      	b.n	8001436 <CRYP_AES_ECB+0xfe>
  }
  /*------------------ AES Encryption ------------------*/
  else /* AES encryption */
  {

    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 800142e:	a801      	add	r0, sp, #4
 8001430:	f7ff fe92 	bl	8001158 <CRYP_KeyInit>

    /* Crypto Init for Encryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 8001434:	2300      	movs	r3, #0
 8001436:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
{
  CRYP_InitTypeDef AES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
  __IO uint32_t counter = 0;
  uint32_t busystatus = 0;
  ErrorStatus status = SUCCESS;
 800143a:	2401      	movs	r4, #1
 800143c:	e000      	b.n	8001440 <CRYP_AES_ECB+0x108>
      counter++;
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));

    if (busystatus != RESET)
   {
       status = ERROR;
 800143e:	2400      	movs	r4, #0

    /* Crypto Init for Encryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
  }

  AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_ECB;
 8001440:	2320      	movs	r3, #32
  AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
  CRYP_Init(&AES_CRYP_InitStructure);
 8001442:	a809      	add	r0, sp, #36	; 0x24

    /* Crypto Init for Encryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
  }

  AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_ECB;
 8001444:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
  AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8001448:	2380      	movs	r3, #128	; 0x80
 800144a:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
  CRYP_FIFOFlush();

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 800144e:	2500      	movs	r5, #0
    AES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
  }

  AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_ECB;
  AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
  CRYP_Init(&AES_CRYP_InitStructure);
 8001450:	f7ff fe4d 	bl	80010ee <CRYP_Init>

  /* Flush IN/OUT FIFOs */
  CRYP_FIFOFlush();
 8001454:	f7ff feb0 	bl	80011b8 <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 8001458:	2001      	movs	r0, #1
 800145a:	f7ff feb5 	bl	80011c8 <CRYP_Cmd>
    inputaddr+=4;
    CRYP_DataIn(*(uint32_t*)(inputaddr));
    inputaddr+=4;

    /* Wait until the complete message has been processed */
    counter = 0;
 800145e:	462e      	mov	r6, r5
  CRYP_FIFOFlush();

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 8001460:	e031      	b.n	80014c6 <CRYP_AES_ECB+0x18e>
  {

    /* Write the Input block in the IN FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8001462:	f859 0005 	ldr.w	r0, [r9, r5]
 8001466:	f7ff febb 	bl	80011e0 <CRYP_DataIn>
    inputaddr+=4;
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 800146a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800146e:	f7ff feb7 	bl	80011e0 <CRYP_DataIn>
    inputaddr+=4;
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8001472:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8001476:	f7ff feb3 	bl	80011e0 <CRYP_DataIn>
    inputaddr+=4;
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 800147a:	f8d8 000c 	ldr.w	r0, [r8, #12]
 800147e:	f7ff feaf 	bl	80011e0 <CRYP_DataIn>
    inputaddr+=4;
 8001482:	f108 0810 	add.w	r8, r8, #16

    /* Wait until the complete message has been processed */
    counter = 0;
 8001486:	960b      	str	r6, [sp, #44]	; 0x2c
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8001488:	2010      	movs	r0, #16
 800148a:	f7ff ff47 	bl	800131c <CRYP_GetFlagStatus>
      counter++;
 800148e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001490:	3301      	adds	r3, #1
 8001492:	930b      	str	r3, [sp, #44]	; 0x2c
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8001494:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001496:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800149a:	d002      	beq.n	80014a2 <CRYP_AES_ECB+0x16a>
 800149c:	2800      	cmp	r0, #0
 800149e:	d1f3      	bne.n	8001488 <CRYP_AES_ECB+0x150>
 80014a0:	e000      	b.n	80014a4 <CRYP_AES_ECB+0x16c>

    if (busystatus != RESET)
 80014a2:	b970      	cbnz	r0, 80014c2 <CRYP_AES_ECB+0x18a>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 80014a4:	f7ff fea2 	bl	80011ec <CRYP_DataOut>
 80014a8:	6038      	str	r0, [r7, #0]
      outputaddr+=4;
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 80014aa:	f7ff fe9f 	bl	80011ec <CRYP_DataOut>
 80014ae:	6078      	str	r0, [r7, #4]
      outputaddr+=4;
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 80014b0:	f7ff fe9c 	bl	80011ec <CRYP_DataOut>
 80014b4:	60b8      	str	r0, [r7, #8]
      outputaddr+=4;
      *(uint32_t*)(outputaddr) = CRYP_DataOut(); 
 80014b6:	f7ff fe99 	bl	80011ec <CRYP_DataOut>
      outputaddr+=4;
 80014ba:	2401      	movs	r4, #1
      outputaddr+=4;
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
      outputaddr+=4;
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
      outputaddr+=4;
      *(uint32_t*)(outputaddr) = CRYP_DataOut(); 
 80014bc:	60f8      	str	r0, [r7, #12]
      outputaddr+=4;
 80014be:	3710      	adds	r7, #16
 80014c0:	e000      	b.n	80014c4 <CRYP_AES_ECB+0x18c>
      counter++;
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));

    if (busystatus != RESET)
   {
       status = ERROR;
 80014c2:	2400      	movs	r4, #0
  CRYP_FIFOFlush();

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 80014c4:	3510      	adds	r5, #16
 80014c6:	455d      	cmp	r5, fp
 80014c8:	d201      	bcs.n	80014ce <CRYP_AES_ECB+0x196>
 80014ca:	2c00      	cmp	r4, #0
 80014cc:	d1c9      	bne.n	8001462 <CRYP_AES_ECB+0x12a>
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 80014ce:	2000      	movs	r0, #0
 80014d0:	f7ff fe7a 	bl	80011c8 <CRYP_Cmd>

  return status; 
}
 80014d4:	4620      	mov	r0, r4
 80014d6:	b00d      	add	sp, #52	; 0x34
 80014d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080014dc <CRYP_AES_CBC>:
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_AES_CBC(uint8_t Mode, uint8_t InitVectors[16], uint8_t *Key,
                         uint16_t Keysize, uint8_t *Input, uint32_t Ilength,
                         uint8_t *Output)
{
 80014dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014e0:	b093      	sub	sp, #76	; 0x4c
 80014e2:	4699      	mov	r9, r3
 80014e4:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 80014e8:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
  __IO uint32_t counter = 0;
  uint32_t busystatus = 0;
  ErrorStatus status = SUCCESS;
  uint32_t keyaddr    = (uint32_t)Key;
  uint32_t inputaddr  = (uint32_t)Input;
  uint32_t outputaddr = (uint32_t)Output;
 80014ec:	9f1e      	ldr	r7, [sp, #120]	; 0x78
                         uint8_t *Output)
{
  CRYP_InitTypeDef AES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 80014ee:	2300      	movs	r3, #0
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_AES_CBC(uint8_t Mode, uint8_t InitVectors[16], uint8_t *Key,
                         uint16_t Keysize, uint8_t *Input, uint32_t Ilength,
                         uint8_t *Output)
{
 80014f0:	4604      	mov	r4, r0
  uint32_t outputaddr = (uint32_t)Output;
  uint32_t ivaddr     = (uint32_t)InitVectors;
  uint32_t i = 0;

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 80014f2:	a803      	add	r0, sp, #12
                         uint8_t *Output)
{
  CRYP_InitTypeDef AES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 80014f4:	9311      	str	r3, [sp, #68]	; 0x44
  uint32_t outputaddr = (uint32_t)Output;
  uint32_t ivaddr     = (uint32_t)InitVectors;
  uint32_t i = 0;

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 80014f6:	9301      	str	r3, [sp, #4]
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_AES_CBC(uint8_t Mode, uint8_t InitVectors[16], uint8_t *Key,
                         uint16_t Keysize, uint8_t *Input, uint32_t Ilength,
                         uint8_t *Output)
{
 80014f8:	460d      	mov	r5, r1
 80014fa:	4616      	mov	r6, r2
  uint32_t outputaddr = (uint32_t)Output;
  uint32_t ivaddr     = (uint32_t)InitVectors;
  uint32_t i = 0;

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 80014fc:	f7ff fe40 	bl	8001180 <CRYP_KeyStructInit>

  switch(Keysize)
 8001500:	f1b9 0fc0 	cmp.w	r9, #192	; 0xc0
  CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
  uint32_t busystatus = 0;
  ErrorStatus status = SUCCESS;
  uint32_t keyaddr    = (uint32_t)Key;
  uint32_t inputaddr  = (uint32_t)Input;
 8001504:	46d0      	mov	r8, sl
  uint32_t i = 0;

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);

  switch(Keysize)
 8001506:	9b01      	ldr	r3, [sp, #4]
 8001508:	d012      	beq.n	8001530 <CRYP_AES_CBC+0x54>
 800150a:	f5b9 7f80 	cmp.w	r9, #256	; 0x100
 800150e:	d024      	beq.n	800155a <CRYP_AES_CBC+0x7e>
 8001510:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
 8001514:	d13d      	bne.n	8001592 <CRYP_AES_CBC+0xb6>
  {
    case 128:
    AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
 8001516:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 800151a:	6833      	ldr	r3, [r6, #0]
 800151c:	ba1b      	rev	r3, r3
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 800151e:	9307      	str	r3, [sp, #28]
 8001520:	6873      	ldr	r3, [r6, #4]
 8001522:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8001524:	9308      	str	r3, [sp, #32]
 8001526:	68b3      	ldr	r3, [r6, #8]
 8001528:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 800152a:	9309      	str	r3, [sp, #36]	; 0x24
 800152c:	68f3      	ldr	r3, [r6, #12]
 800152e:	e02e      	b.n	800158e <CRYP_AES_CBC+0xb2>
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
    break;
    case 192:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
 8001530:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001534:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8001538:	6833      	ldr	r3, [r6, #0]
 800153a:	ba1b      	rev	r3, r3
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 800153c:	9305      	str	r3, [sp, #20]
 800153e:	6873      	ldr	r3, [r6, #4]
 8001540:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8001542:	9306      	str	r3, [sp, #24]
 8001544:	68b3      	ldr	r3, [r6, #8]
 8001546:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8001548:	9307      	str	r3, [sp, #28]
 800154a:	68f3      	ldr	r3, [r6, #12]
 800154c:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 800154e:	9308      	str	r3, [sp, #32]
 8001550:	6933      	ldr	r3, [r6, #16]
 8001552:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8001554:	9309      	str	r3, [sp, #36]	; 0x24
 8001556:	6973      	ldr	r3, [r6, #20]
 8001558:	e019      	b.n	800158e <CRYP_AES_CBC+0xb2>
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
    break;
    case 256:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
 800155a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800155e:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8001562:	6833      	ldr	r3, [r6, #0]
 8001564:	ba1b      	rev	r3, r3
    AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
 8001566:	9303      	str	r3, [sp, #12]
 8001568:	6873      	ldr	r3, [r6, #4]
 800156a:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
 800156c:	9304      	str	r3, [sp, #16]
 800156e:	68b3      	ldr	r3, [r6, #8]
 8001570:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8001572:	9305      	str	r3, [sp, #20]
 8001574:	68f3      	ldr	r3, [r6, #12]
 8001576:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8001578:	9306      	str	r3, [sp, #24]
 800157a:	6933      	ldr	r3, [r6, #16]
 800157c:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 800157e:	9307      	str	r3, [sp, #28]
 8001580:	6973      	ldr	r3, [r6, #20]
 8001582:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8001584:	9308      	str	r3, [sp, #32]
 8001586:	69b3      	ldr	r3, [r6, #24]
 8001588:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 800158a:	9309      	str	r3, [sp, #36]	; 0x24
 800158c:	69f3      	ldr	r3, [r6, #28]
 800158e:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8001590:	930a      	str	r3, [sp, #40]	; 0x28
 8001592:	682b      	ldr	r3, [r5, #0]
 8001594:	ba1b      	rev	r3, r3
    default:
    break;
  }

  /* CRYP Initialization Vectors */
  AES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 8001596:	930b      	str	r3, [sp, #44]	; 0x2c
 8001598:	686b      	ldr	r3, [r5, #4]
 800159a:	ba1b      	rev	r3, r3
  ivaddr+=4;
  AES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 800159c:	930c      	str	r3, [sp, #48]	; 0x30
 800159e:	68ab      	ldr	r3, [r5, #8]
 80015a0:	ba1b      	rev	r3, r3
  ivaddr+=4;
  AES_CRYP_IVInitStructure.CRYP_IV1Left = __REV(*(uint32_t*)(ivaddr));
 80015a2:	930d      	str	r3, [sp, #52]	; 0x34
 80015a4:	68eb      	ldr	r3, [r5, #12]
 80015a6:	ba1b      	rev	r3, r3
  ivaddr+=4;
  AES_CRYP_IVInitStructure.CRYP_IV1Right= __REV(*(uint32_t*)(ivaddr));
 80015a8:	930e      	str	r3, [sp, #56]	; 0x38


  /*------------------ AES Decryption ------------------*/
  if(Mode == MODE_DECRYPT) /* AES decryption */
 80015aa:	bb14      	cbnz	r4, 80015f2 <CRYP_AES_CBC+0x116>
  {
    /* Flush IN/OUT FIFOs */
    CRYP_FIFOFlush();
 80015ac:	f7ff fe04 	bl	80011b8 <CRYP_FIFOFlush>

    /* Crypto Init for Key preparation for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 80015b0:	2304      	movs	r3, #4
 80015b2:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
    AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_Key;
    AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_32b;

    CRYP_Init(&AES_CRYP_InitStructure);
 80015b6:	a80f      	add	r0, sp, #60	; 0x3c
    /* Flush IN/OUT FIFOs */
    CRYP_FIFOFlush();

    /* Crypto Init for Key preparation for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
    AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_Key;
 80015b8:	2338      	movs	r3, #56	; 0x38
 80015ba:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_32b;
 80015be:	f8ad 4040 	strh.w	r4, [sp, #64]	; 0x40

    CRYP_Init(&AES_CRYP_InitStructure);
 80015c2:	f7ff fd94 	bl	80010ee <CRYP_Init>

    /* Key Initialisation */
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 80015c6:	a803      	add	r0, sp, #12
 80015c8:	f7ff fdc6 	bl	8001158 <CRYP_KeyInit>

    /* Enable Crypto processor */
    CRYP_Cmd(ENABLE);
 80015cc:	2001      	movs	r0, #1
 80015ce:	f7ff fdfb 	bl	80011c8 <CRYP_Cmd>

    /* wait until the Busy flag is RESET */
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 80015d2:	2010      	movs	r0, #16
 80015d4:	f7ff fea2 	bl	800131c <CRYP_GetFlagStatus>
      counter++;
 80015d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80015da:	3301      	adds	r3, #1
 80015dc:	9311      	str	r3, [sp, #68]	; 0x44
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 80015de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80015e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015e4:	d002      	beq.n	80015ec <CRYP_AES_CBC+0x110>
 80015e6:	2800      	cmp	r0, #0
 80015e8:	d1f3      	bne.n	80015d2 <CRYP_AES_CBC+0xf6>
 80015ea:	e000      	b.n	80015ee <CRYP_AES_CBC+0x112>

    if (busystatus != RESET)
 80015ec:	b948      	cbnz	r0, 8001602 <CRYP_AES_CBC+0x126>
       status = ERROR;
    }
    else
    {
      /* Crypto Init for decryption process */  
      AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 80015ee:	2304      	movs	r3, #4
 80015f0:	e003      	b.n	80015fa <CRYP_AES_CBC+0x11e>
    }
  }
  /*------------------ AES Encryption ------------------*/
  else /* AES encryption */
  {
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 80015f2:	a803      	add	r0, sp, #12
 80015f4:	f7ff fdb0 	bl	8001158 <CRYP_KeyInit>

    /* Crypto Init for Encryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 80015f8:	2300      	movs	r3, #0
 80015fa:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
  CRYP_InitTypeDef AES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
  uint32_t busystatus = 0;
  ErrorStatus status = SUCCESS;
 80015fe:	2401      	movs	r4, #1
 8001600:	e000      	b.n	8001604 <CRYP_AES_CBC+0x128>
      counter++;
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));

    if (busystatus != RESET)
   {
       status = ERROR;
 8001602:	2400      	movs	r4, #0
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);

    /* Crypto Init for Encryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
  }
  AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CBC;
 8001604:	2328      	movs	r3, #40	; 0x28
 8001606:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
  AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
  CRYP_Init(&AES_CRYP_InitStructure);
 800160a:	a80f      	add	r0, sp, #60	; 0x3c

    /* Crypto Init for Encryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
  }
  AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CBC;
  AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 800160c:	2380      	movs	r3, #128	; 0x80
 800160e:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
  CRYP_Init(&AES_CRYP_InitStructure);
 8001612:	f7ff fd6c 	bl	80010ee <CRYP_Init>

  /* CRYP Initialization Vectors */
  CRYP_IVInit(&AES_CRYP_IVInitStructure);
 8001616:	a80b      	add	r0, sp, #44	; 0x2c
 8001618:	f7ff fdbc 	bl	8001194 <CRYP_IVInit>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);


  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 800161c:	2500      	movs	r5, #0

  /* CRYP Initialization Vectors */
  CRYP_IVInit(&AES_CRYP_IVInitStructure);

  /* Flush IN/OUT FIFOs */
  CRYP_FIFOFlush();
 800161e:	f7ff fdcb 	bl	80011b8 <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 8001622:	2001      	movs	r0, #1
 8001624:	f7ff fdd0 	bl	80011c8 <CRYP_Cmd>
    CRYP_DataIn(*(uint32_t*)(inputaddr));
    inputaddr+=4;
    CRYP_DataIn(*(uint32_t*)(inputaddr));
    inputaddr+=4;
    /* Wait until the complete message has been processed */
    counter = 0;
 8001628:	462e      	mov	r6, r5

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);


  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 800162a:	e031      	b.n	8001690 <CRYP_AES_CBC+0x1b4>
  {

    /* Write the Input block in the IN FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 800162c:	f85a 0005 	ldr.w	r0, [sl, r5]
 8001630:	f7ff fdd6 	bl	80011e0 <CRYP_DataIn>
    inputaddr+=4;
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8001634:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8001638:	f7ff fdd2 	bl	80011e0 <CRYP_DataIn>
    inputaddr+=4;
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 800163c:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8001640:	f7ff fdce 	bl	80011e0 <CRYP_DataIn>
    inputaddr+=4;
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8001644:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8001648:	f7ff fdca 	bl	80011e0 <CRYP_DataIn>
    inputaddr+=4;
 800164c:	f108 0810 	add.w	r8, r8, #16
    /* Wait until the complete message has been processed */
    counter = 0;
 8001650:	9611      	str	r6, [sp, #68]	; 0x44
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8001652:	2010      	movs	r0, #16
 8001654:	f7ff fe62 	bl	800131c <CRYP_GetFlagStatus>
      counter++;
 8001658:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800165a:	3301      	adds	r3, #1
 800165c:	9311      	str	r3, [sp, #68]	; 0x44
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 800165e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001660:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001664:	d002      	beq.n	800166c <CRYP_AES_CBC+0x190>
 8001666:	2800      	cmp	r0, #0
 8001668:	d1f3      	bne.n	8001652 <CRYP_AES_CBC+0x176>
 800166a:	e000      	b.n	800166e <CRYP_AES_CBC+0x192>

    if (busystatus != RESET)
 800166c:	b970      	cbnz	r0, 800168c <CRYP_AES_CBC+0x1b0>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 800166e:	f7ff fdbd 	bl	80011ec <CRYP_DataOut>
 8001672:	6038      	str	r0, [r7, #0]
      outputaddr+=4;
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8001674:	f7ff fdba 	bl	80011ec <CRYP_DataOut>
 8001678:	6078      	str	r0, [r7, #4]
      outputaddr+=4;
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 800167a:	f7ff fdb7 	bl	80011ec <CRYP_DataOut>
 800167e:	60b8      	str	r0, [r7, #8]
      outputaddr+=4;
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8001680:	f7ff fdb4 	bl	80011ec <CRYP_DataOut>
      outputaddr+=4;
 8001684:	2401      	movs	r4, #1
      outputaddr+=4;
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
      outputaddr+=4;
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
      outputaddr+=4;
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8001686:	60f8      	str	r0, [r7, #12]
      outputaddr+=4;
 8001688:	3710      	adds	r7, #16
 800168a:	e000      	b.n	800168e <CRYP_AES_CBC+0x1b2>
      counter++;
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));

    if (busystatus != RESET)
   {
       status = ERROR;
 800168c:	2400      	movs	r4, #0

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);


  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 800168e:	3510      	adds	r5, #16
 8001690:	455d      	cmp	r5, fp
 8001692:	d201      	bcs.n	8001698 <CRYP_AES_CBC+0x1bc>
 8001694:	2c00      	cmp	r4, #0
 8001696:	d1c9      	bne.n	800162c <CRYP_AES_CBC+0x150>
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 8001698:	2000      	movs	r0, #0
 800169a:	f7ff fd95 	bl	80011c8 <CRYP_Cmd>

  return status;
}
 800169e:	4620      	mov	r0, r4
 80016a0:	b013      	add	sp, #76	; 0x4c
 80016a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080016a6 <CRYP_AES_CTR>:
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_AES_CTR(uint8_t Mode, uint8_t InitVectors[16], uint8_t *Key, 
                         uint16_t Keysize, uint8_t *Input, uint32_t Ilength,
                         uint8_t *Output)
{
 80016a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016aa:	b093      	sub	sp, #76	; 0x4c
 80016ac:	4699      	mov	r9, r3
 80016ae:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 80016b2:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
  __IO uint32_t counter = 0;
  uint32_t busystatus = 0;
  ErrorStatus status = SUCCESS;
  uint32_t keyaddr    = (uint32_t)Key;
  uint32_t inputaddr  = (uint32_t)Input;
  uint32_t outputaddr = (uint32_t)Output;
 80016b6:	9f1e      	ldr	r7, [sp, #120]	; 0x78
                         uint8_t *Output)
{
  CRYP_InitTypeDef AES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 80016b8:	2300      	movs	r3, #0
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_AES_CTR(uint8_t Mode, uint8_t InitVectors[16], uint8_t *Key, 
                         uint16_t Keysize, uint8_t *Input, uint32_t Ilength,
                         uint8_t *Output)
{
 80016ba:	4604      	mov	r4, r0
  uint32_t outputaddr = (uint32_t)Output;
  uint32_t ivaddr     = (uint32_t)InitVectors;
  uint32_t i = 0;

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 80016bc:	a803      	add	r0, sp, #12
                         uint8_t *Output)
{
  CRYP_InitTypeDef AES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 80016be:	9311      	str	r3, [sp, #68]	; 0x44
  uint32_t outputaddr = (uint32_t)Output;
  uint32_t ivaddr     = (uint32_t)InitVectors;
  uint32_t i = 0;

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 80016c0:	9301      	str	r3, [sp, #4]
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_AES_CTR(uint8_t Mode, uint8_t InitVectors[16], uint8_t *Key, 
                         uint16_t Keysize, uint8_t *Input, uint32_t Ilength,
                         uint8_t *Output)
{
 80016c2:	460d      	mov	r5, r1
 80016c4:	4616      	mov	r6, r2
  uint32_t outputaddr = (uint32_t)Output;
  uint32_t ivaddr     = (uint32_t)InitVectors;
  uint32_t i = 0;

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 80016c6:	f7ff fd5b 	bl	8001180 <CRYP_KeyStructInit>

  switch(Keysize)
 80016ca:	f1b9 0fc0 	cmp.w	r9, #192	; 0xc0
  CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
  uint32_t busystatus = 0;
  ErrorStatus status = SUCCESS;
  uint32_t keyaddr    = (uint32_t)Key;
  uint32_t inputaddr  = (uint32_t)Input;
 80016ce:	46d0      	mov	r8, sl
  uint32_t i = 0;

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);

  switch(Keysize)
 80016d0:	9b01      	ldr	r3, [sp, #4]
 80016d2:	d012      	beq.n	80016fa <CRYP_AES_CTR+0x54>
 80016d4:	f5b9 7f80 	cmp.w	r9, #256	; 0x100
 80016d8:	d024      	beq.n	8001724 <CRYP_AES_CTR+0x7e>
 80016da:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
 80016de:	d13d      	bne.n	800175c <CRYP_AES_CTR+0xb6>
  {
    case 128:
    AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
 80016e0:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 80016e4:	6833      	ldr	r3, [r6, #0]
 80016e6:	ba1b      	rev	r3, r3
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 80016e8:	9307      	str	r3, [sp, #28]
 80016ea:	6873      	ldr	r3, [r6, #4]
 80016ec:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 80016ee:	9308      	str	r3, [sp, #32]
 80016f0:	68b3      	ldr	r3, [r6, #8]
 80016f2:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 80016f4:	9309      	str	r3, [sp, #36]	; 0x24
 80016f6:	68f3      	ldr	r3, [r6, #12]
 80016f8:	e02e      	b.n	8001758 <CRYP_AES_CTR+0xb2>
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
    break;
    case 192:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
 80016fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016fe:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8001702:	6833      	ldr	r3, [r6, #0]
 8001704:	ba1b      	rev	r3, r3
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8001706:	9305      	str	r3, [sp, #20]
 8001708:	6873      	ldr	r3, [r6, #4]
 800170a:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 800170c:	9306      	str	r3, [sp, #24]
 800170e:	68b3      	ldr	r3, [r6, #8]
 8001710:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8001712:	9307      	str	r3, [sp, #28]
 8001714:	68f3      	ldr	r3, [r6, #12]
 8001716:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8001718:	9308      	str	r3, [sp, #32]
 800171a:	6933      	ldr	r3, [r6, #16]
 800171c:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 800171e:	9309      	str	r3, [sp, #36]	; 0x24
 8001720:	6973      	ldr	r3, [r6, #20]
 8001722:	e019      	b.n	8001758 <CRYP_AES_CTR+0xb2>
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
    break;
    case 256:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
 8001724:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001728:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 800172c:	6833      	ldr	r3, [r6, #0]
 800172e:	ba1b      	rev	r3, r3
    AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
 8001730:	9303      	str	r3, [sp, #12]
 8001732:	6873      	ldr	r3, [r6, #4]
 8001734:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
 8001736:	9304      	str	r3, [sp, #16]
 8001738:	68b3      	ldr	r3, [r6, #8]
 800173a:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 800173c:	9305      	str	r3, [sp, #20]
 800173e:	68f3      	ldr	r3, [r6, #12]
 8001740:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8001742:	9306      	str	r3, [sp, #24]
 8001744:	6933      	ldr	r3, [r6, #16]
 8001746:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8001748:	9307      	str	r3, [sp, #28]
 800174a:	6973      	ldr	r3, [r6, #20]
 800174c:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 800174e:	9308      	str	r3, [sp, #32]
 8001750:	69b3      	ldr	r3, [r6, #24]
 8001752:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8001754:	9309      	str	r3, [sp, #36]	; 0x24
 8001756:	69f3      	ldr	r3, [r6, #28]
 8001758:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 800175a:	930a      	str	r3, [sp, #40]	; 0x28
 800175c:	682b      	ldr	r3, [r5, #0]
 800175e:	ba1b      	rev	r3, r3
    break;
    default:
    break;
  }
  /* CRYP Initialization Vectors */
  AES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 8001760:	930b      	str	r3, [sp, #44]	; 0x2c
 8001762:	686b      	ldr	r3, [r5, #4]
 8001764:	ba1b      	rev	r3, r3
  ivaddr+=4;
  AES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 8001766:	930c      	str	r3, [sp, #48]	; 0x30
 8001768:	68ab      	ldr	r3, [r5, #8]
 800176a:	ba1b      	rev	r3, r3
  ivaddr+=4;
  AES_CRYP_IVInitStructure.CRYP_IV1Left = __REV(*(uint32_t*)(ivaddr));
 800176c:	930d      	str	r3, [sp, #52]	; 0x34
 800176e:	68eb      	ldr	r3, [r5, #12]
 8001770:	ba1b      	rev	r3, r3
  ivaddr+=4;
  AES_CRYP_IVInitStructure.CRYP_IV1Right= __REV(*(uint32_t*)(ivaddr));

  /* Key Initialisation */
  CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 8001772:	a803      	add	r0, sp, #12
  ivaddr+=4;
  AES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
  ivaddr+=4;
  AES_CRYP_IVInitStructure.CRYP_IV1Left = __REV(*(uint32_t*)(ivaddr));
  ivaddr+=4;
  AES_CRYP_IVInitStructure.CRYP_IV1Right= __REV(*(uint32_t*)(ivaddr));
 8001774:	930e      	str	r3, [sp, #56]	; 0x38

  /* Key Initialisation */
  CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 8001776:	f7ff fcef 	bl	8001158 <CRYP_KeyInit>

  /*------------------ AES Decryption ------------------*/
  if(Mode == MODE_DECRYPT) /* AES decryption */
 800177a:	b90c      	cbnz	r4, 8001780 <CRYP_AES_CTR+0xda>
  {
    /* Crypto Init for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 800177c:	2304      	movs	r3, #4
 800177e:	e000      	b.n	8001782 <CRYP_AES_CTR+0xdc>
  }
  /*------------------ AES Encryption ------------------*/
  else /* AES encryption */
  {
    /* Crypto Init for Encryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 8001780:	2300      	movs	r3, #0
 8001782:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
  }
  AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CTR;
 8001786:	2330      	movs	r3, #48	; 0x30
 8001788:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
  AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
  CRYP_Init(&AES_CRYP_InitStructure);
 800178c:	a80f      	add	r0, sp, #60	; 0x3c
  {
    /* Crypto Init for Encryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
  }
  AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CTR;
  AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 800178e:	2380      	movs	r3, #128	; 0x80
 8001790:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
  CRYP_Init(&AES_CRYP_InitStructure);
 8001794:	f7ff fcab 	bl	80010ee <CRYP_Init>

  /* CRYP Initialization Vectors */
  CRYP_IVInit(&AES_CRYP_IVInitStructure);
 8001798:	a80b      	add	r0, sp, #44	; 0x2c
 800179a:	f7ff fcfb 	bl	8001194 <CRYP_IVInit>
  CRYP_FIFOFlush();

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 800179e:	2400      	movs	r4, #0

  /* CRYP Initialization Vectors */
  CRYP_IVInit(&AES_CRYP_IVInitStructure);

  /* Flush IN/OUT FIFOs */
  CRYP_FIFOFlush();
 80017a0:	f7ff fd0a 	bl	80011b8 <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 80017a4:	2001      	movs	r0, #1
 80017a6:	f7ff fd0f 	bl	80011c8 <CRYP_Cmd>
  CRYP_InitTypeDef AES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
  uint32_t busystatus = 0;
  ErrorStatus status = SUCCESS;
 80017aa:	2501      	movs	r5, #1
    CRYP_DataIn(*(uint32_t*)(inputaddr));
    inputaddr+=4;
    CRYP_DataIn(*(uint32_t*)(inputaddr));
    inputaddr+=4;
    /* Wait until the complete message has been processed */
    counter = 0;
 80017ac:	4626      	mov	r6, r4
  CRYP_FIFOFlush();

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 80017ae:	e031      	b.n	8001814 <CRYP_AES_CTR+0x16e>
  {

    /* Write the Input block in the IN FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80017b0:	f85a 0004 	ldr.w	r0, [sl, r4]
 80017b4:	f7ff fd14 	bl	80011e0 <CRYP_DataIn>
    inputaddr+=4;
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80017b8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80017bc:	f7ff fd10 	bl	80011e0 <CRYP_DataIn>
    inputaddr+=4;
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80017c0:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80017c4:	f7ff fd0c 	bl	80011e0 <CRYP_DataIn>
    inputaddr+=4;
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80017c8:	f8d8 000c 	ldr.w	r0, [r8, #12]
 80017cc:	f7ff fd08 	bl	80011e0 <CRYP_DataIn>
    inputaddr+=4;
 80017d0:	f108 0810 	add.w	r8, r8, #16
    /* Wait until the complete message has been processed */
    counter = 0;
 80017d4:	9611      	str	r6, [sp, #68]	; 0x44
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 80017d6:	2010      	movs	r0, #16
 80017d8:	f7ff fda0 	bl	800131c <CRYP_GetFlagStatus>
      counter++;
 80017dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80017de:	3301      	adds	r3, #1
 80017e0:	9311      	str	r3, [sp, #68]	; 0x44
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 80017e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80017e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017e8:	d002      	beq.n	80017f0 <CRYP_AES_CTR+0x14a>
 80017ea:	2800      	cmp	r0, #0
 80017ec:	d1f3      	bne.n	80017d6 <CRYP_AES_CTR+0x130>
 80017ee:	e000      	b.n	80017f2 <CRYP_AES_CTR+0x14c>

    if (busystatus != RESET)
 80017f0:	b970      	cbnz	r0, 8001810 <CRYP_AES_CTR+0x16a>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 80017f2:	f7ff fcfb 	bl	80011ec <CRYP_DataOut>
 80017f6:	6038      	str	r0, [r7, #0]
      outputaddr+=4;
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 80017f8:	f7ff fcf8 	bl	80011ec <CRYP_DataOut>
 80017fc:	6078      	str	r0, [r7, #4]
      outputaddr+=4;
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 80017fe:	f7ff fcf5 	bl	80011ec <CRYP_DataOut>
 8001802:	60b8      	str	r0, [r7, #8]
      outputaddr+=4;
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8001804:	f7ff fcf2 	bl	80011ec <CRYP_DataOut>
      outputaddr+=4;
 8001808:	2501      	movs	r5, #1
      outputaddr+=4;
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
      outputaddr+=4;
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
      outputaddr+=4;
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 800180a:	60f8      	str	r0, [r7, #12]
      outputaddr+=4;
 800180c:	3710      	adds	r7, #16
 800180e:	e000      	b.n	8001812 <CRYP_AES_CTR+0x16c>
      counter++;
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));

    if (busystatus != RESET)
   {
       status = ERROR;
 8001810:	2500      	movs	r5, #0
  CRYP_FIFOFlush();

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 8001812:	3410      	adds	r4, #16
 8001814:	455c      	cmp	r4, fp
 8001816:	d201      	bcs.n	800181c <CRYP_AES_CTR+0x176>
 8001818:	2d00      	cmp	r5, #0
 800181a:	d1c9      	bne.n	80017b0 <CRYP_AES_CTR+0x10a>
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
      outputaddr+=4;
    }
  }
  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 800181c:	2000      	movs	r0, #0
 800181e:	f7ff fcd3 	bl	80011c8 <CRYP_Cmd>

  return status;
}
 8001822:	4628      	mov	r0, r5
 8001824:	b013      	add	sp, #76	; 0x4c
 8001826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800182a <CRYP_DES_ECB>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_DES_ECB(uint8_t Mode, uint8_t Key[8], uint8_t *Input, 
                         uint32_t Ilength, uint8_t *Output)
{
 800182a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800182e:	b08c      	sub	sp, #48	; 0x30
 8001830:	4604      	mov	r4, r0
  CRYP_InitTypeDef DES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef DES_CRYP_KeyInitStructure;
  __IO uint32_t counter = 0;
 8001832:	f04f 0900 	mov.w	r9, #0
  uint32_t inputaddr  = (uint32_t)Input;
  uint32_t outputaddr = (uint32_t)Output;
  uint32_t i = 0;

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&DES_CRYP_KeyInitStructure);
 8001836:	a801      	add	r0, sp, #4
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_DES_ECB(uint8_t Mode, uint8_t Key[8], uint8_t *Input, 
                         uint32_t Ilength, uint8_t *Output)
{
 8001838:	460d      	mov	r5, r1
 800183a:	4616      	mov	r6, r2
 800183c:	469a      	mov	sl, r3
  CRYP_InitTypeDef DES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef DES_CRYP_KeyInitStructure;
  __IO uint32_t counter = 0;
 800183e:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  uint32_t busystatus = 0;
  ErrorStatus status = SUCCESS;
  uint32_t keyaddr    = (uint32_t)Key;
  uint32_t inputaddr  = (uint32_t)Input;
 8001842:	4690      	mov	r8, r2
  uint32_t outputaddr = (uint32_t)Output;
 8001844:	9f14      	ldr	r7, [sp, #80]	; 0x50
  uint32_t i = 0;

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&DES_CRYP_KeyInitStructure);
 8001846:	f7ff fc9b 	bl	8001180 <CRYP_KeyStructInit>

  /* Crypto Init for Encryption process */
  if( Mode == MODE_ENCRYPT ) /* DES encryption */
 800184a:	2c01      	cmp	r4, #1
 800184c:	d102      	bne.n	8001854 <CRYP_DES_ECB+0x2a>
  {
     DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 800184e:	f8ad 9024 	strh.w	r9, [sp, #36]	; 0x24
 8001852:	e002      	b.n	800185a <CRYP_DES_ECB+0x30>
  }
  else/* if( Mode == MODE_DECRYPT )*/ /* DES decryption */
  {      
     DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Decrypt;
 8001854:	2304      	movs	r3, #4
 8001856:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  }

  DES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_DES_ECB;
 800185a:	2310      	movs	r3, #16
 800185c:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
  DES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
  CRYP_Init(&DES_CRYP_InitStructure);
 8001860:	a809      	add	r0, sp, #36	; 0x24
  {      
     DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Decrypt;
  }

  DES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_DES_ECB;
  DES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8001862:	2380      	movs	r3, #128	; 0x80
 8001864:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
  CRYP_Init(&DES_CRYP_InitStructure);
 8001868:	f7ff fc41 	bl	80010ee <CRYP_Init>
 800186c:	682b      	ldr	r3, [r5, #0]
 800186e:	ba1b      	rev	r3, r3

  /* Key Initialisation */
  DES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8001870:	9303      	str	r3, [sp, #12]
 8001872:	686b      	ldr	r3, [r5, #4]
 8001874:	ba1b      	rev	r3, r3
  keyaddr+=4;
  DES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
  CRYP_KeyInit(& DES_CRYP_KeyInitStructure);
 8001876:	a801      	add	r0, sp, #4
  CRYP_Init(&DES_CRYP_InitStructure);

  /* Key Initialisation */
  DES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
  keyaddr+=4;
  DES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8001878:	9304      	str	r3, [sp, #16]
  CRYP_FIFOFlush();

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 800187a:	2400      	movs	r4, #0

  /* Key Initialisation */
  DES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
  keyaddr+=4;
  DES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
  CRYP_KeyInit(& DES_CRYP_KeyInitStructure);
 800187c:	f7ff fc6c 	bl	8001158 <CRYP_KeyInit>

  /* Flush IN/OUT FIFO */
  CRYP_FIFOFlush();
 8001880:	f7ff fc9a 	bl	80011b8 <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 8001884:	2001      	movs	r0, #1
 8001886:	f7ff fc9f 	bl	80011c8 <CRYP_Cmd>
{
  CRYP_InitTypeDef DES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef DES_CRYP_KeyInitStructure;
  __IO uint32_t counter = 0;
  uint32_t busystatus = 0;
  ErrorStatus status = SUCCESS;
 800188a:	2501      	movs	r5, #1
    inputaddr+=4;
    CRYP_DataIn(*(uint32_t*)(inputaddr));
    inputaddr+=4;

/* Wait until the complete message has been processed */
    counter = 0;
 800188c:	46a1      	mov	r9, r4
  CRYP_FIFOFlush();

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 800188e:	e023      	b.n	80018d8 <CRYP_DES_ECB+0xae>
  {

    /* Write the Input block in the Input FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8001890:	5930      	ldr	r0, [r6, r4]
 8001892:	f7ff fca5 	bl	80011e0 <CRYP_DataIn>
    inputaddr+=4;
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8001896:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800189a:	f7ff fca1 	bl	80011e0 <CRYP_DataIn>
    inputaddr+=4;
 800189e:	f108 0808 	add.w	r8, r8, #8

/* Wait until the complete message has been processed */
    counter = 0;
 80018a2:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 80018a6:	2010      	movs	r0, #16
 80018a8:	f7ff fd38 	bl	800131c <CRYP_GetFlagStatus>
      counter++;
 80018ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80018ae:	3301      	adds	r3, #1
 80018b0:	930b      	str	r3, [sp, #44]	; 0x2c
    }while ((counter != DESBUSY_TIMEOUT) && (busystatus != RESET));
 80018b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80018b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018b8:	d002      	beq.n	80018c0 <CRYP_DES_ECB+0x96>
 80018ba:	2800      	cmp	r0, #0
 80018bc:	d1f3      	bne.n	80018a6 <CRYP_DES_ECB+0x7c>
 80018be:	e000      	b.n	80018c2 <CRYP_DES_ECB+0x98>

    if (busystatus != RESET)
 80018c0:	b940      	cbnz	r0, 80018d4 <CRYP_DES_ECB+0xaa>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 80018c2:	f7ff fc93 	bl	80011ec <CRYP_DataOut>
 80018c6:	6038      	str	r0, [r7, #0]
      outputaddr+=4;
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 80018c8:	f7ff fc90 	bl	80011ec <CRYP_DataOut>
      outputaddr+=4;
 80018cc:	2501      	movs	r5, #1
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
      outputaddr+=4;
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 80018ce:	6078      	str	r0, [r7, #4]
      outputaddr+=4;
 80018d0:	3708      	adds	r7, #8
 80018d2:	e000      	b.n	80018d6 <CRYP_DES_ECB+0xac>
      counter++;
    }while ((counter != DESBUSY_TIMEOUT) && (busystatus != RESET));

    if (busystatus != RESET)
   {
       status = ERROR;
 80018d4:	2500      	movs	r5, #0
  CRYP_FIFOFlush();

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 80018d6:	3408      	adds	r4, #8
 80018d8:	4554      	cmp	r4, sl
 80018da:	d201      	bcs.n	80018e0 <CRYP_DES_ECB+0xb6>
 80018dc:	2d00      	cmp	r5, #0
 80018de:	d1d7      	bne.n	8001890 <CRYP_DES_ECB+0x66>
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 80018e0:	2000      	movs	r0, #0
 80018e2:	f7ff fc71 	bl	80011c8 <CRYP_Cmd>

  return status; 
}
 80018e6:	4628      	mov	r0, r5
 80018e8:	b00c      	add	sp, #48	; 0x30
 80018ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080018ee <CRYP_DES_CBC>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_DES_CBC(uint8_t Mode, uint8_t Key[8], uint8_t InitVectors[8],
                         uint8_t *Input, uint32_t Ilength, uint8_t *Output)
{
 80018ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018f2:	b091      	sub	sp, #68	; 0x44
 80018f4:	4604      	mov	r4, r0
  CRYP_InitTypeDef DES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef DES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef DES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 80018f6:	f04f 0a00 	mov.w	sl, #0
  uint32_t outputaddr = (uint32_t)Output;
  uint32_t ivaddr     = (uint32_t)InitVectors;
  uint32_t i = 0;

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&DES_CRYP_KeyInitStructure);
 80018fa:	a801      	add	r0, sp, #4
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_DES_CBC(uint8_t Mode, uint8_t Key[8], uint8_t InitVectors[8],
                         uint8_t *Input, uint32_t Ilength, uint8_t *Output)
{
 80018fc:	460d      	mov	r5, r1
 80018fe:	4616      	mov	r6, r2
 8001900:	4699      	mov	r9, r3
 8001902:	f8dd b068 	ldr.w	fp, [sp, #104]	; 0x68
  CRYP_InitTypeDef DES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef DES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef DES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 8001906:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  uint32_t busystatus = 0;
  ErrorStatus status = SUCCESS;
  uint32_t keyaddr    = (uint32_t)Key;
  uint32_t inputaddr  = (uint32_t)Input;
 800190a:	4698      	mov	r8, r3
  uint32_t outputaddr = (uint32_t)Output;
 800190c:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
  uint32_t ivaddr     = (uint32_t)InitVectors;
  uint32_t i = 0;

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&DES_CRYP_KeyInitStructure);
 800190e:	f7ff fc37 	bl	8001180 <CRYP_KeyStructInit>

  /* Crypto Init for Encryption process */
  if(Mode == MODE_ENCRYPT) /* DES encryption */
 8001912:	2c01      	cmp	r4, #1
 8001914:	d102      	bne.n	800191c <CRYP_DES_CBC+0x2e>
  {
     DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 8001916:	f8ad a034 	strh.w	sl, [sp, #52]	; 0x34
 800191a:	e002      	b.n	8001922 <CRYP_DES_CBC+0x34>
  }
  else /*if(Mode == MODE_DECRYPT)*/ /* DES decryption */
  {
     DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Decrypt;
 800191c:	2304      	movs	r3, #4
 800191e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
  }

  DES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_DES_CBC;
 8001922:	2318      	movs	r3, #24
 8001924:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
  DES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
  CRYP_Init(&DES_CRYP_InitStructure);
 8001928:	a80d      	add	r0, sp, #52	; 0x34
  {
     DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Decrypt;
  }

  DES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_DES_CBC;
  DES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 800192a:	2380      	movs	r3, #128	; 0x80
 800192c:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
  CRYP_Init(&DES_CRYP_InitStructure);
 8001930:	f7ff fbdd 	bl	80010ee <CRYP_Init>
 8001934:	682b      	ldr	r3, [r5, #0]
 8001936:	ba1b      	rev	r3, r3

  /* Key Initialisation */
  DES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8001938:	9303      	str	r3, [sp, #12]
 800193a:	686b      	ldr	r3, [r5, #4]
 800193c:	ba1b      	rev	r3, r3
  keyaddr+=4;
  DES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
  CRYP_KeyInit(& DES_CRYP_KeyInitStructure);
 800193e:	a801      	add	r0, sp, #4
  CRYP_Init(&DES_CRYP_InitStructure);

  /* Key Initialisation */
  DES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
  keyaddr+=4;
  DES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8001940:	9304      	str	r3, [sp, #16]
  CRYP_KeyInit(& DES_CRYP_KeyInitStructure);
 8001942:	f7ff fc09 	bl	8001158 <CRYP_KeyInit>
 8001946:	6833      	ldr	r3, [r6, #0]
 8001948:	ba1b      	rev	r3, r3

  /* Initialization Vectors */
  DES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 800194a:	9309      	str	r3, [sp, #36]	; 0x24
 800194c:	6873      	ldr	r3, [r6, #4]
 800194e:	ba1b      	rev	r3, r3
  ivaddr+=4;
  DES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
  CRYP_IVInit(&DES_CRYP_IVInitStructure);
 8001950:	a809      	add	r0, sp, #36	; 0x24
  CRYP_KeyInit(& DES_CRYP_KeyInitStructure);

  /* Initialization Vectors */
  DES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
  ivaddr+=4;
  DES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 8001952:	930a      	str	r3, [sp, #40]	; 0x28
  CRYP_FIFOFlush();
  
  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 8001954:	2400      	movs	r4, #0

  /* Initialization Vectors */
  DES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
  ivaddr+=4;
  DES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
  CRYP_IVInit(&DES_CRYP_IVInitStructure);
 8001956:	f7ff fc1d 	bl	8001194 <CRYP_IVInit>

  /* Flush IN/OUT FIFO */
  CRYP_FIFOFlush();
 800195a:	f7ff fc2d 	bl	80011b8 <CRYP_FIFOFlush>
  
  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 800195e:	2001      	movs	r0, #1
 8001960:	f7ff fc32 	bl	80011c8 <CRYP_Cmd>
  CRYP_InitTypeDef DES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef DES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef DES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
  uint32_t busystatus = 0;
  ErrorStatus status = SUCCESS;
 8001964:	2501      	movs	r5, #1
    inputaddr+=4;
    CRYP_DataIn(*(uint32_t*)(inputaddr));
    inputaddr+=4;

    /* Wait until the complete message has been processed */
    counter = 0;
 8001966:	4626      	mov	r6, r4
  CRYP_FIFOFlush();
  
  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 8001968:	e023      	b.n	80019b2 <CRYP_DES_CBC+0xc4>
  {
    /* Write the Input block in the Input FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 800196a:	f859 0004 	ldr.w	r0, [r9, r4]
 800196e:	f7ff fc37 	bl	80011e0 <CRYP_DataIn>
    inputaddr+=4;
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8001972:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8001976:	f7ff fc33 	bl	80011e0 <CRYP_DataIn>
    inputaddr+=4;
 800197a:	f108 0808 	add.w	r8, r8, #8

    /* Wait until the complete message has been processed */
    counter = 0;
 800197e:	960f      	str	r6, [sp, #60]	; 0x3c
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8001980:	2010      	movs	r0, #16
 8001982:	f7ff fccb 	bl	800131c <CRYP_GetFlagStatus>
      counter++;
 8001986:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001988:	3301      	adds	r3, #1
 800198a:	930f      	str	r3, [sp, #60]	; 0x3c
    }while ((counter != DESBUSY_TIMEOUT) && (busystatus != RESET));
 800198c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800198e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001992:	d002      	beq.n	800199a <CRYP_DES_CBC+0xac>
 8001994:	2800      	cmp	r0, #0
 8001996:	d1f3      	bne.n	8001980 <CRYP_DES_CBC+0x92>
 8001998:	e000      	b.n	800199c <CRYP_DES_CBC+0xae>

    if (busystatus != RESET)
 800199a:	b940      	cbnz	r0, 80019ae <CRYP_DES_CBC+0xc0>
       status = ERROR;
    }
    else
    {
      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 800199c:	f7ff fc26 	bl	80011ec <CRYP_DataOut>
 80019a0:	6038      	str	r0, [r7, #0]
      outputaddr+=4;
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 80019a2:	f7ff fc23 	bl	80011ec <CRYP_DataOut>
      outputaddr+=4;
 80019a6:	2501      	movs	r5, #1
    else
    {
      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
      outputaddr+=4;
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 80019a8:	6078      	str	r0, [r7, #4]
      outputaddr+=4;
 80019aa:	3708      	adds	r7, #8
 80019ac:	e000      	b.n	80019b0 <CRYP_DES_CBC+0xc2>
      counter++;
    }while ((counter != DESBUSY_TIMEOUT) && (busystatus != RESET));

    if (busystatus != RESET)
   {
       status = ERROR;
 80019ae:	2500      	movs	r5, #0
  CRYP_FIFOFlush();
  
  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 80019b0:	3408      	adds	r4, #8
 80019b2:	455c      	cmp	r4, fp
 80019b4:	d201      	bcs.n	80019ba <CRYP_DES_CBC+0xcc>
 80019b6:	2d00      	cmp	r5, #0
 80019b8:	d1d7      	bne.n	800196a <CRYP_DES_CBC+0x7c>
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 80019ba:	2000      	movs	r0, #0
 80019bc:	f7ff fc04 	bl	80011c8 <CRYP_Cmd>

  return status; 
}
 80019c0:	4628      	mov	r0, r5
 80019c2:	b011      	add	sp, #68	; 0x44
 80019c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080019c8 <CRYP_TDES_ECB>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_TDES_ECB(uint8_t Mode, uint8_t Key[24], uint8_t *Input, 
                          uint32_t Ilength, uint8_t *Output)
{
 80019c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80019cc:	b08c      	sub	sp, #48	; 0x30
 80019ce:	4604      	mov	r4, r0
  CRYP_InitTypeDef TDES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef TDES_CRYP_KeyInitStructure;
  __IO uint32_t counter = 0;
 80019d0:	f04f 0900 	mov.w	r9, #0
  uint32_t inputaddr  = (uint32_t)Input;
  uint32_t outputaddr = (uint32_t)Output;
  uint32_t i = 0;

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&TDES_CRYP_KeyInitStructure);
 80019d4:	a801      	add	r0, sp, #4
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_TDES_ECB(uint8_t Mode, uint8_t Key[24], uint8_t *Input, 
                          uint32_t Ilength, uint8_t *Output)
{
 80019d6:	460d      	mov	r5, r1
 80019d8:	4616      	mov	r6, r2
 80019da:	469a      	mov	sl, r3
  CRYP_InitTypeDef TDES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef TDES_CRYP_KeyInitStructure;
  __IO uint32_t counter = 0;
 80019dc:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  uint32_t busystatus = 0;
  ErrorStatus status = SUCCESS;
  uint32_t keyaddr    = (uint32_t)Key;
  uint32_t inputaddr  = (uint32_t)Input;
 80019e0:	4690      	mov	r8, r2
  uint32_t outputaddr = (uint32_t)Output;
 80019e2:	9f14      	ldr	r7, [sp, #80]	; 0x50
  uint32_t i = 0;

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&TDES_CRYP_KeyInitStructure);
 80019e4:	f7ff fbcc 	bl	8001180 <CRYP_KeyStructInit>

  /* Crypto Init for Encryption process */
  if(Mode == MODE_ENCRYPT) /* TDES encryption */
 80019e8:	2c01      	cmp	r4, #1
 80019ea:	d102      	bne.n	80019f2 <CRYP_TDES_ECB+0x2a>
  {
     TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 80019ec:	f8ad 9024 	strh.w	r9, [sp, #36]	; 0x24
 80019f0:	e002      	b.n	80019f8 <CRYP_TDES_ECB+0x30>
  }
  else /*if(Mode == MODE_DECRYPT)*/ /* TDES decryption */
  {
     TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 80019f2:	2304      	movs	r3, #4
 80019f4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  }

  TDES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_TDES_ECB;
  TDES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 80019f8:	2380      	movs	r3, #128	; 0x80
  CRYP_Init(&TDES_CRYP_InitStructure);
 80019fa:	a809      	add	r0, sp, #36	; 0x24
  {
     TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
  }

  TDES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_TDES_ECB;
  TDES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 80019fc:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
  else /*if(Mode == MODE_DECRYPT)*/ /* TDES decryption */
  {
     TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
  }

  TDES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_TDES_ECB;
 8001a00:	f8ad 9026 	strh.w	r9, [sp, #38]	; 0x26
  TDES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
  CRYP_Init(&TDES_CRYP_InitStructure);
 8001a04:	f7ff fb73 	bl	80010ee <CRYP_Init>
 8001a08:	682b      	ldr	r3, [r5, #0]
 8001a0a:	ba1b      	rev	r3, r3

  /* Key Initialisation */
  TDES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8001a0c:	9303      	str	r3, [sp, #12]
 8001a0e:	686b      	ldr	r3, [r5, #4]
 8001a10:	ba1b      	rev	r3, r3
  keyaddr+=4;
  TDES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8001a12:	9304      	str	r3, [sp, #16]
 8001a14:	68ab      	ldr	r3, [r5, #8]
 8001a16:	ba1b      	rev	r3, r3
  keyaddr+=4;
  TDES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8001a18:	9305      	str	r3, [sp, #20]
 8001a1a:	68eb      	ldr	r3, [r5, #12]
 8001a1c:	ba1b      	rev	r3, r3
  keyaddr+=4;
  TDES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8001a1e:	9306      	str	r3, [sp, #24]
 8001a20:	692b      	ldr	r3, [r5, #16]
 8001a22:	ba1b      	rev	r3, r3
  keyaddr+=4;
  TDES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8001a24:	9307      	str	r3, [sp, #28]
 8001a26:	696b      	ldr	r3, [r5, #20]
 8001a28:	ba1b      	rev	r3, r3
  keyaddr+=4;
  TDES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
  CRYP_KeyInit(& TDES_CRYP_KeyInitStructure);
 8001a2a:	a801      	add	r0, sp, #4
  keyaddr+=4;
  TDES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
  keyaddr+=4;
  TDES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
  keyaddr+=4;
  TDES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8001a2c:	9308      	str	r3, [sp, #32]
  CRYP_FIFOFlush();

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 8001a2e:	2400      	movs	r4, #0
  TDES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
  keyaddr+=4;
  TDES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
  keyaddr+=4;
  TDES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
  CRYP_KeyInit(& TDES_CRYP_KeyInitStructure);
 8001a30:	f7ff fb92 	bl	8001158 <CRYP_KeyInit>

  /* Flush IN/OUT FIFO */
  CRYP_FIFOFlush();
 8001a34:	f7ff fbc0 	bl	80011b8 <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 8001a38:	2001      	movs	r0, #1
 8001a3a:	f7ff fbc5 	bl	80011c8 <CRYP_Cmd>
{
  CRYP_InitTypeDef TDES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef TDES_CRYP_KeyInitStructure;
  __IO uint32_t counter = 0;
  uint32_t busystatus = 0;
  ErrorStatus status = SUCCESS;
 8001a3e:	2501      	movs	r5, #1
    inputaddr+=4;
    CRYP_DataIn(*(uint32_t*)(inputaddr));
    inputaddr+=4;

    /* Wait until the complete message has been processed */
    counter = 0;
 8001a40:	46a1      	mov	r9, r4
  CRYP_FIFOFlush();

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 8001a42:	e023      	b.n	8001a8c <CRYP_TDES_ECB+0xc4>
  {
    /* Write the Input block in the Input FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8001a44:	5930      	ldr	r0, [r6, r4]
 8001a46:	f7ff fbcb 	bl	80011e0 <CRYP_DataIn>
    inputaddr+=4;
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8001a4a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8001a4e:	f7ff fbc7 	bl	80011e0 <CRYP_DataIn>
    inputaddr+=4;
 8001a52:	f108 0808 	add.w	r8, r8, #8

    /* Wait until the complete message has been processed */
    counter = 0;
 8001a56:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8001a5a:	2010      	movs	r0, #16
 8001a5c:	f7ff fc5e 	bl	800131c <CRYP_GetFlagStatus>
      counter++;
 8001a60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001a62:	3301      	adds	r3, #1
 8001a64:	930b      	str	r3, [sp, #44]	; 0x2c
    }while ((counter != TDESBUSY_TIMEOUT) && (busystatus != RESET));
 8001a66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001a68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a6c:	d002      	beq.n	8001a74 <CRYP_TDES_ECB+0xac>
 8001a6e:	2800      	cmp	r0, #0
 8001a70:	d1f3      	bne.n	8001a5a <CRYP_TDES_ECB+0x92>
 8001a72:	e000      	b.n	8001a76 <CRYP_TDES_ECB+0xae>

    if (busystatus != RESET)
 8001a74:	b940      	cbnz	r0, 8001a88 <CRYP_TDES_ECB+0xc0>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8001a76:	f7ff fbb9 	bl	80011ec <CRYP_DataOut>
 8001a7a:	6038      	str	r0, [r7, #0]
      outputaddr+=4;
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8001a7c:	f7ff fbb6 	bl	80011ec <CRYP_DataOut>
      outputaddr+=4;
 8001a80:	2501      	movs	r5, #1
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
      outputaddr+=4;
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8001a82:	6078      	str	r0, [r7, #4]
      outputaddr+=4;
 8001a84:	3708      	adds	r7, #8
 8001a86:	e000      	b.n	8001a8a <CRYP_TDES_ECB+0xc2>
      counter++;
    }while ((counter != TDESBUSY_TIMEOUT) && (busystatus != RESET));

    if (busystatus != RESET)
    {
       status = ERROR;
 8001a88:	2500      	movs	r5, #0
  CRYP_FIFOFlush();

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 8001a8a:	3408      	adds	r4, #8
 8001a8c:	4554      	cmp	r4, sl
 8001a8e:	d201      	bcs.n	8001a94 <CRYP_TDES_ECB+0xcc>
 8001a90:	2d00      	cmp	r5, #0
 8001a92:	d1d7      	bne.n	8001a44 <CRYP_TDES_ECB+0x7c>
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 8001a94:	2000      	movs	r0, #0
 8001a96:	f7ff fb97 	bl	80011c8 <CRYP_Cmd>

  return status; 
}
 8001a9a:	4628      	mov	r0, r5
 8001a9c:	b00c      	add	sp, #48	; 0x30
 8001a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08001aa2 <CRYP_TDES_CBC>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_TDES_CBC(uint8_t Mode, uint8_t Key[24], uint8_t InitVectors[8],
                          uint8_t *Input, uint32_t Ilength, uint8_t *Output)
{
 8001aa2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001aa6:	b091      	sub	sp, #68	; 0x44
 8001aa8:	4604      	mov	r4, r0
  CRYP_InitTypeDef TDES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef TDES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef TDES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 8001aaa:	f04f 0a00 	mov.w	sl, #0
  uint32_t outputaddr = (uint32_t)Output;
  uint32_t ivaddr     = (uint32_t)InitVectors;
  uint32_t i = 0;

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&TDES_CRYP_KeyInitStructure);
 8001aae:	a801      	add	r0, sp, #4
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_TDES_CBC(uint8_t Mode, uint8_t Key[24], uint8_t InitVectors[8],
                          uint8_t *Input, uint32_t Ilength, uint8_t *Output)
{
 8001ab0:	460d      	mov	r5, r1
 8001ab2:	4616      	mov	r6, r2
 8001ab4:	4699      	mov	r9, r3
 8001ab6:	f8dd b068 	ldr.w	fp, [sp, #104]	; 0x68
  CRYP_InitTypeDef TDES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef TDES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef TDES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 8001aba:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  uint32_t busystatus = 0;
  ErrorStatus status = SUCCESS;
  uint32_t keyaddr    = (uint32_t)Key;
  uint32_t inputaddr  = (uint32_t)Input;
 8001abe:	4698      	mov	r8, r3
  uint32_t outputaddr = (uint32_t)Output;
 8001ac0:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
  uint32_t ivaddr     = (uint32_t)InitVectors;
  uint32_t i = 0;

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&TDES_CRYP_KeyInitStructure);
 8001ac2:	f7ff fb5d 	bl	8001180 <CRYP_KeyStructInit>

  /* Crypto Init for Encryption process */
  if(Mode == MODE_ENCRYPT) /* TDES encryption */
 8001ac6:	2c01      	cmp	r4, #1
 8001ac8:	d102      	bne.n	8001ad0 <CRYP_TDES_CBC+0x2e>
  {
    TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 8001aca:	f8ad a034 	strh.w	sl, [sp, #52]	; 0x34
 8001ace:	e002      	b.n	8001ad6 <CRYP_TDES_CBC+0x34>
  }
  else
  {
    TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 8001ad0:	2304      	movs	r3, #4
 8001ad2:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
  }
  TDES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_TDES_CBC;
 8001ad6:	2308      	movs	r3, #8
 8001ad8:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
  TDES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;

  CRYP_Init(&TDES_CRYP_InitStructure);
 8001adc:	a80d      	add	r0, sp, #52	; 0x34
  else
  {
    TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
  }
  TDES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_TDES_CBC;
  TDES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8001ade:	2380      	movs	r3, #128	; 0x80
 8001ae0:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38

  CRYP_Init(&TDES_CRYP_InitStructure);
 8001ae4:	f7ff fb03 	bl	80010ee <CRYP_Init>
 8001ae8:	682b      	ldr	r3, [r5, #0]
 8001aea:	ba1b      	rev	r3, r3

  /* Key Initialisation */
  TDES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8001aec:	9303      	str	r3, [sp, #12]
 8001aee:	686b      	ldr	r3, [r5, #4]
 8001af0:	ba1b      	rev	r3, r3
  keyaddr+=4;
  TDES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8001af2:	9304      	str	r3, [sp, #16]
 8001af4:	68ab      	ldr	r3, [r5, #8]
 8001af6:	ba1b      	rev	r3, r3
  keyaddr+=4;
  TDES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8001af8:	9305      	str	r3, [sp, #20]
 8001afa:	68eb      	ldr	r3, [r5, #12]
 8001afc:	ba1b      	rev	r3, r3
  keyaddr+=4;
  TDES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8001afe:	9306      	str	r3, [sp, #24]
 8001b00:	692b      	ldr	r3, [r5, #16]
 8001b02:	ba1b      	rev	r3, r3
  keyaddr+=4;
  TDES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8001b04:	9307      	str	r3, [sp, #28]
 8001b06:	696b      	ldr	r3, [r5, #20]
 8001b08:	ba1b      	rev	r3, r3
  keyaddr+=4;
  TDES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
  CRYP_KeyInit(& TDES_CRYP_KeyInitStructure);
 8001b0a:	a801      	add	r0, sp, #4
  keyaddr+=4;
  TDES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
  keyaddr+=4;
  TDES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
  keyaddr+=4;
  TDES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8001b0c:	9308      	str	r3, [sp, #32]
  CRYP_KeyInit(& TDES_CRYP_KeyInitStructure);
 8001b0e:	f7ff fb23 	bl	8001158 <CRYP_KeyInit>
 8001b12:	6833      	ldr	r3, [r6, #0]
 8001b14:	ba1b      	rev	r3, r3

  /* Initialization Vectors */
  TDES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 8001b16:	9309      	str	r3, [sp, #36]	; 0x24
 8001b18:	6873      	ldr	r3, [r6, #4]
 8001b1a:	ba1b      	rev	r3, r3
  ivaddr+=4;
  TDES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
  CRYP_IVInit(&TDES_CRYP_IVInitStructure);
 8001b1c:	a809      	add	r0, sp, #36	; 0x24
  CRYP_KeyInit(& TDES_CRYP_KeyInitStructure);

  /* Initialization Vectors */
  TDES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
  ivaddr+=4;
  TDES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 8001b1e:	930a      	str	r3, [sp, #40]	; 0x28
  CRYP_FIFOFlush();

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 8001b20:	2400      	movs	r4, #0

  /* Initialization Vectors */
  TDES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
  ivaddr+=4;
  TDES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
  CRYP_IVInit(&TDES_CRYP_IVInitStructure);
 8001b22:	f7ff fb37 	bl	8001194 <CRYP_IVInit>

  /* Flush IN/OUT FIFO */
  CRYP_FIFOFlush();
 8001b26:	f7ff fb47 	bl	80011b8 <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 8001b2a:	2001      	movs	r0, #1
 8001b2c:	f7ff fb4c 	bl	80011c8 <CRYP_Cmd>
  CRYP_InitTypeDef TDES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef TDES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef TDES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
  uint32_t busystatus = 0;
  ErrorStatus status = SUCCESS;
 8001b30:	2501      	movs	r5, #1
    inputaddr+=4;
    CRYP_DataIn(*(uint32_t*)(inputaddr));
    inputaddr+=4;

    /* Wait until the complete message has been processed */
    counter = 0;
 8001b32:	4626      	mov	r6, r4
  CRYP_FIFOFlush();

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 8001b34:	e023      	b.n	8001b7e <CRYP_TDES_CBC+0xdc>
  {
    /* Write the Input block in the Input FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8001b36:	f859 0004 	ldr.w	r0, [r9, r4]
 8001b3a:	f7ff fb51 	bl	80011e0 <CRYP_DataIn>
    inputaddr+=4;
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8001b3e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8001b42:	f7ff fb4d 	bl	80011e0 <CRYP_DataIn>
    inputaddr+=4;
 8001b46:	f108 0808 	add.w	r8, r8, #8

    /* Wait until the complete message has been processed */
    counter = 0;
 8001b4a:	960f      	str	r6, [sp, #60]	; 0x3c
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8001b4c:	2010      	movs	r0, #16
 8001b4e:	f7ff fbe5 	bl	800131c <CRYP_GetFlagStatus>
      counter++;
 8001b52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001b54:	3301      	adds	r3, #1
 8001b56:	930f      	str	r3, [sp, #60]	; 0x3c
    }while ((counter != TDESBUSY_TIMEOUT) && (busystatus != RESET));
 8001b58:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001b5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b5e:	d002      	beq.n	8001b66 <CRYP_TDES_CBC+0xc4>
 8001b60:	2800      	cmp	r0, #0
 8001b62:	d1f3      	bne.n	8001b4c <CRYP_TDES_CBC+0xaa>
 8001b64:	e000      	b.n	8001b68 <CRYP_TDES_CBC+0xc6>

    if (busystatus != RESET)
 8001b66:	b940      	cbnz	r0, 8001b7a <CRYP_TDES_CBC+0xd8>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8001b68:	f7ff fb40 	bl	80011ec <CRYP_DataOut>
 8001b6c:	6038      	str	r0, [r7, #0]
      outputaddr+=4;
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8001b6e:	f7ff fb3d 	bl	80011ec <CRYP_DataOut>
      outputaddr+=4;
 8001b72:	2501      	movs	r5, #1
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
      outputaddr+=4;
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8001b74:	6078      	str	r0, [r7, #4]
      outputaddr+=4;
 8001b76:	3708      	adds	r7, #8
 8001b78:	e000      	b.n	8001b7c <CRYP_TDES_CBC+0xda>
      counter++;
    }while ((counter != TDESBUSY_TIMEOUT) && (busystatus != RESET));

    if (busystatus != RESET)
   {
       status = ERROR;
 8001b7a:	2500      	movs	r5, #0
  CRYP_FIFOFlush();

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 8001b7c:	3408      	adds	r4, #8
 8001b7e:	455c      	cmp	r4, fp
 8001b80:	d201      	bcs.n	8001b86 <CRYP_TDES_CBC+0xe4>
 8001b82:	2d00      	cmp	r5, #0
 8001b84:	d1d7      	bne.n	8001b36 <CRYP_TDES_CBC+0x94>
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 8001b86:	2000      	movs	r0, #0
 8001b88:	f7ff fb1e 	bl	80011c8 <CRYP_Cmd>

  return status; 
}
 8001b8c:	4628      	mov	r0, r5
 8001b8e:	b011      	add	sp, #68	; 0x44
 8001b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001b94 <DAC_DeInit>:
  * @brief  Deinitializes the DAC peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void DAC_DeInit(void)
{
 8001b94:	b508      	push	{r3, lr}
  /* Enable DAC reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, ENABLE);
 8001b96:	2101      	movs	r1, #1
 8001b98:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8001b9c:	f001 ffda 	bl	8003b54 <RCC_APB1PeriphResetCmd>
  /* Release DAC from reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, DISABLE);
 8001ba0:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8001ba4:	2100      	movs	r1, #0
}
 8001ba6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void DAC_DeInit(void)
{
  /* Enable DAC reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, ENABLE);
  /* Release DAC from reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, DISABLE);
 8001baa:	f001 bfd3 	b.w	8003b54 <RCC_APB1PeriphResetCmd>

08001bae <DAC_Init>:
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(DAC_InitStruct->DAC_OutputBuffer));

/*---------------------------- DAC CR Configuration --------------------------*/
  /* Get the DAC CR value */
  tmpreg1 = DAC->CR;
 8001bae:	4b0a      	ldr	r3, [pc, #40]	; (8001bd8 <DAC_Init+0x2a>)
  * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure that contains
  *         the configuration information for the  specified DAC channel.
  * @retval None
  */
void DAC_Init(uint32_t DAC_Channel, DAC_InitTypeDef* DAC_InitStruct)
{
 8001bb0:	b530      	push	{r4, r5, lr}

/*---------------------------- DAC CR Configuration --------------------------*/
  /* Get the DAC CR value */
  tmpreg1 = DAC->CR;
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(CR_CLEAR_MASK << DAC_Channel);
 8001bb2:	f640 72fe 	movw	r2, #4094	; 0xffe
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(DAC_InitStruct->DAC_OutputBuffer));

/*---------------------------- DAC CR Configuration --------------------------*/
  /* Get the DAC CR value */
  tmpreg1 = DAC->CR;
 8001bb6:	681c      	ldr	r4, [r3, #0]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(CR_CLEAR_MASK << DAC_Channel);
 8001bb8:	4082      	lsls	r2, r0
 8001bba:	ea24 0202 	bic.w	r2, r4, r2
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8001bbe:	e891 0030 	ldmia.w	r1, {r4, r5}
 8001bc2:	4325      	orrs	r5, r4
 8001bc4:	688c      	ldr	r4, [r1, #8]
 8001bc6:	4325      	orrs	r5, r4
 8001bc8:	68cc      	ldr	r4, [r1, #12]
 8001bca:	ea45 0104 	orr.w	r1, r5, r4
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
             DAC_InitStruct->DAC_OutputBuffer);
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << DAC_Channel;
 8001bce:	fa11 f000 	lsls.w	r0, r1, r0
 8001bd2:	4310      	orrs	r0, r2
  /* Write to DAC CR */
  DAC->CR = tmpreg1;
 8001bd4:	6018      	str	r0, [r3, #0]
}
 8001bd6:	bd30      	pop	{r4, r5, pc}
 8001bd8:	40007400 	.word	0x40007400

08001bdc <DAC_StructInit>:
  */
void DAC_StructInit(DAC_InitTypeDef* DAC_InitStruct)
{
/*--------------- Reset DAC init structure parameters values -----------------*/
  /* Initialize the DAC_Trigger member */
  DAC_InitStruct->DAC_Trigger = DAC_Trigger_None;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	6003      	str	r3, [r0, #0]
  /* Initialize the DAC_WaveGeneration member */
  DAC_InitStruct->DAC_WaveGeneration = DAC_WaveGeneration_None;
 8001be0:	6043      	str	r3, [r0, #4]
  /* Initialize the DAC_LFSRUnmask_TriangleAmplitude member */
  DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude = DAC_LFSRUnmask_Bit0;
 8001be2:	6083      	str	r3, [r0, #8]
  /* Initialize the DAC_OutputBuffer member */
  DAC_InitStruct->DAC_OutputBuffer = DAC_OutputBuffer_Enable;
 8001be4:	60c3      	str	r3, [r0, #12]
}
 8001be6:	4770      	bx	lr

08001be8 <DAC_Cmd>:
  *          This parameter can be: ENABLE or DISABLE.
  * @note   When the DAC channel is enabled the trigger source can no more be modified.
  * @retval None
  */
void DAC_Cmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 8001be8:	4b06      	ldr	r3, [pc, #24]	; (8001c04 <DAC_Cmd+0x1c>)
 8001bea:	2201      	movs	r2, #1
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001bec:	b119      	cbz	r1, 8001bf6 <DAC_Cmd+0xe>
  {
    /* Enable the selected DAC channel */
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
 8001bee:	6819      	ldr	r1, [r3, #0]
 8001bf0:	4082      	lsls	r2, r0
 8001bf2:	430a      	orrs	r2, r1
 8001bf4:	e003      	b.n	8001bfe <DAC_Cmd+0x16>
  }
  else
  {
    /* Disable the selected DAC channel */
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
 8001bf6:	6819      	ldr	r1, [r3, #0]
 8001bf8:	4082      	lsls	r2, r0
 8001bfa:	ea21 0202 	bic.w	r2, r1, r2
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	40007400 	.word	0x40007400

08001c08 <DAC_SoftwareTriggerCmd>:
  * @param  NewState: new state of the selected DAC channel software trigger.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DAC_SoftwareTriggerCmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 8001c08:	4b06      	ldr	r3, [pc, #24]	; (8001c24 <DAC_SoftwareTriggerCmd+0x1c>)
 8001c0a:	0900      	lsrs	r0, r0, #4
 8001c0c:	2201      	movs	r2, #1
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001c0e:	b119      	cbz	r1, 8001c18 <DAC_SoftwareTriggerCmd+0x10>
  {
    /* Enable software trigger for the selected DAC channel */
    DAC->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4);
 8001c10:	6859      	ldr	r1, [r3, #4]
 8001c12:	4082      	lsls	r2, r0
 8001c14:	430a      	orrs	r2, r1
 8001c16:	e003      	b.n	8001c20 <DAC_SoftwareTriggerCmd+0x18>
  }
  else
  {
    /* Disable software trigger for the selected DAC channel */
    DAC->SWTRIGR &= ~((uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4));
 8001c18:	6859      	ldr	r1, [r3, #4]
 8001c1a:	4082      	lsls	r2, r0
 8001c1c:	ea21 0202 	bic.w	r2, r1, r2
 8001c20:	605a      	str	r2, [r3, #4]
 8001c22:	4770      	bx	lr
 8001c24:	40007400 	.word	0x40007400

08001c28 <DAC_DualSoftwareTriggerCmd>:
  * @param  NewState: new state of the DAC channels software triggers.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DAC_DualSoftwareTriggerCmd(FunctionalState NewState)
{
 8001c28:	4b04      	ldr	r3, [pc, #16]	; (8001c3c <DAC_DualSoftwareTriggerCmd+0x14>)
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable software trigger for both DAC channels */
    DAC->SWTRIGR |= DUAL_SWTRIG_SET;
 8001c2a:	685a      	ldr	r2, [r3, #4]
void DAC_DualSoftwareTriggerCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001c2c:	b110      	cbz	r0, 8001c34 <DAC_DualSoftwareTriggerCmd+0xc>
  {
    /* Enable software trigger for both DAC channels */
    DAC->SWTRIGR |= DUAL_SWTRIG_SET;
 8001c2e:	f042 0203 	orr.w	r2, r2, #3
 8001c32:	e001      	b.n	8001c38 <DAC_DualSoftwareTriggerCmd+0x10>
  }
  else
  {
    /* Disable software trigger for both DAC channels */
    DAC->SWTRIGR &= DUAL_SWTRIG_RESET;
 8001c34:	f022 0203 	bic.w	r2, r2, #3
 8001c38:	605a      	str	r2, [r3, #4]
 8001c3a:	4770      	bx	lr
 8001c3c:	40007400 	.word	0x40007400

08001c40 <DAC_WaveGenerationCmd>:
  * @param  NewState: new state of the selected DAC channel wave generation.
  *          This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void DAC_WaveGenerationCmd(uint32_t DAC_Channel, uint32_t DAC_Wave, FunctionalState NewState)
{
 8001c40:	4b05      	ldr	r3, [pc, #20]	; (8001c58 <DAC_WaveGenerationCmd+0x18>)
 8001c42:	4081      	lsls	r1, r0
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_WAVE(DAC_Wave)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001c44:	b112      	cbz	r2, 8001c4c <DAC_WaveGenerationCmd+0xc>
  {
    /* Enable the selected wave generation for the selected DAC channel */
    DAC->CR |= DAC_Wave << DAC_Channel;
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	4311      	orrs	r1, r2
 8001c4a:	e002      	b.n	8001c52 <DAC_WaveGenerationCmd+0x12>
  }
  else
  {
    /* Disable the selected wave generation for the selected DAC channel */
    DAC->CR &= ~(DAC_Wave << DAC_Channel);
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	ea22 0101 	bic.w	r1, r2, r1
 8001c52:	6019      	str	r1, [r3, #0]
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	40007400 	.word	0x40007400

08001c5c <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 8001c5c:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	9301      	str	r3, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 8001c62:	4b05      	ldr	r3, [pc, #20]	; (8001c78 <DAC_SetChannel1Data+0x1c>)
 8001c64:	9301      	str	r3, [sp, #4]
  tmp += DHR12R1_OFFSET + DAC_Align;
 8001c66:	9b01      	ldr	r3, [sp, #4]
 8001c68:	3308      	adds	r3, #8
 8001c6a:	181b      	adds	r3, r3, r0
 8001c6c:	9301      	str	r3, [sp, #4]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001c6e:	9b01      	ldr	r3, [sp, #4]
 8001c70:	6019      	str	r1, [r3, #0]
}
 8001c72:	b002      	add	sp, #8
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	40007400 	.word	0x40007400

08001c7c <DAC_SetChannel2Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel2Data(uint32_t DAC_Align, uint16_t Data)
{
 8001c7c:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE;
 8001c82:	4b05      	ldr	r3, [pc, #20]	; (8001c98 <DAC_SetChannel2Data+0x1c>)
 8001c84:	9301      	str	r3, [sp, #4]
  tmp += DHR12R2_OFFSET + DAC_Align;
 8001c86:	9b01      	ldr	r3, [sp, #4]
 8001c88:	3314      	adds	r3, #20
 8001c8a:	181b      	adds	r3, r3, r0
 8001c8c:	9301      	str	r3, [sp, #4]

  /* Set the DAC channel2 selected data holding register */
  *(__IO uint32_t *)tmp = Data;
 8001c8e:	9b01      	ldr	r3, [sp, #4]
 8001c90:	6019      	str	r1, [r3, #0]
}
 8001c92:	b002      	add	sp, #8
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	40007400 	.word	0x40007400

08001c9c <DAC_SetDualChannelData>:
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data1));
  assert_param(IS_DAC_DATA(Data2));
  
  /* Calculate and set dual DAC data holding register value */
  if (DAC_Align == DAC_Align_8b_R)
 8001c9c:	2808      	cmp	r0, #8
  {
    data = ((uint32_t)Data2 << 16) | Data1;
  }
  
  tmp = (uint32_t)DAC_BASE;
  tmp += DHR12RD_OFFSET + DAC_Align;
 8001c9e:	4b04      	ldr	r3, [pc, #16]	; (8001cb0 <DAC_SetDualChannelData+0x14>)
  assert_param(IS_DAC_DATA(Data2));
  
  /* Calculate and set dual DAC data holding register value */
  if (DAC_Align == DAC_Align_8b_R)
  {
    data = ((uint32_t)Data2 << 8) | Data1; 
 8001ca0:	bf0c      	ite	eq
 8001ca2:	ea42 2101 	orreq.w	r1, r2, r1, lsl #8
  }
  else
  {
    data = ((uint32_t)Data2 << 16) | Data1;
 8001ca6:	ea42 4101 	orrne.w	r1, r2, r1, lsl #16
  
  tmp = (uint32_t)DAC_BASE;
  tmp += DHR12RD_OFFSET + DAC_Align;

  /* Set the dual DAC selected data holding register */
  *(__IO uint32_t *)tmp = data;
 8001caa:	50c1      	str	r1, [r0, r3]
}
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	40007420 	.word	0x40007420

08001cb4 <DAC_GetDataOutputValue>:
  *            @arg DAC_Channel_1: DAC Channel1 selected
  *            @arg DAC_Channel_2: DAC Channel2 selected
  * @retval The selected DAC channel data output value.
  */
uint16_t DAC_GetDataOutputValue(uint32_t DAC_Channel)
{
 8001cb4:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	9301      	str	r3, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  
  tmp = (uint32_t) DAC_BASE ;
 8001cba:	4b06      	ldr	r3, [pc, #24]	; (8001cd4 <DAC_GetDataOutputValue+0x20>)
 8001cbc:	9301      	str	r3, [sp, #4]
  tmp += DOR_OFFSET + ((uint32_t)DAC_Channel >> 2);
 8001cbe:	9b01      	ldr	r3, [sp, #4]
 8001cc0:	332c      	adds	r3, #44	; 0x2c
 8001cc2:	eb03 0390 	add.w	r3, r3, r0, lsr #2
 8001cc6:	9301      	str	r3, [sp, #4]
  
  /* Returns the DAC channel data output register value */
  return (uint16_t) (*(__IO uint32_t*) tmp);
 8001cc8:	9b01      	ldr	r3, [sp, #4]
 8001cca:	6818      	ldr	r0, [r3, #0]
}
 8001ccc:	b280      	uxth	r0, r0
 8001cce:	b002      	add	sp, #8
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	40007400 	.word	0x40007400

08001cd8 <DAC_DMACmd>:
  * @note   The DAC channel2 is mapped on DMA1 Stream 6 channel7 which must be
  *          already configured.    
  * @retval None
  */
void DAC_DMACmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 8001cd8:	4b06      	ldr	r3, [pc, #24]	; (8001cf4 <DAC_DMACmd+0x1c>)
 8001cda:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001cde:	b119      	cbz	r1, 8001ce8 <DAC_DMACmd+0x10>
  {
    /* Enable the selected DAC channel DMA request */
    DAC->CR |= (DAC_CR_DMAEN1 << DAC_Channel);
 8001ce0:	6819      	ldr	r1, [r3, #0]
 8001ce2:	4082      	lsls	r2, r0
 8001ce4:	430a      	orrs	r2, r1
 8001ce6:	e003      	b.n	8001cf0 <DAC_DMACmd+0x18>
  }
  else
  {
    /* Disable the selected DAC channel DMA request */
    DAC->CR &= (~(DAC_CR_DMAEN1 << DAC_Channel));
 8001ce8:	6819      	ldr	r1, [r3, #0]
 8001cea:	4082      	lsls	r2, r0
 8001cec:	ea21 0202 	bic.w	r2, r1, r2
 8001cf0:	601a      	str	r2, [r3, #0]
 8001cf2:	4770      	bx	lr
 8001cf4:	40007400 	.word	0x40007400

08001cf8 <DAC_ITConfig>:
  * @param  NewState: new state of the specified DAC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */ 
void DAC_ITConfig(uint32_t DAC_Channel, uint32_t DAC_IT, FunctionalState NewState)  
{
 8001cf8:	4b05      	ldr	r3, [pc, #20]	; (8001d10 <DAC_ITConfig+0x18>)
 8001cfa:	4081      	lsls	r1, r0
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_DAC_IT(DAC_IT)); 

  if (NewState != DISABLE)
 8001cfc:	b112      	cbz	r2, 8001d04 <DAC_ITConfig+0xc>
  {
    /* Enable the selected DAC interrupts */
    DAC->CR |=  (DAC_IT << DAC_Channel);
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	4311      	orrs	r1, r2
 8001d02:	e002      	b.n	8001d0a <DAC_ITConfig+0x12>
  }
  else
  {
    /* Disable the selected DAC interrupts */
    DAC->CR &= (~(uint32_t)(DAC_IT << DAC_Channel));
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	ea22 0101 	bic.w	r1, r2, r1
 8001d0a:	6019      	str	r1, [r3, #0]
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	40007400 	.word	0x40007400

08001d14 <DAC_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_FLAG(DAC_FLAG));

  /* Check the status of the specified DAC flag */
  if ((DAC->SR & (DAC_FLAG << DAC_Channel)) != (uint8_t)RESET)
 8001d14:	4b03      	ldr	r3, [pc, #12]	; (8001d24 <DAC_GetFlagStatus+0x10>)
 8001d16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d18:	4081      	lsls	r1, r0
  {
    /* DAC_FLAG is set */
    bitstatus = SET;
 8001d1a:	4219      	tst	r1, r3
    /* DAC_FLAG is reset */
    bitstatus = RESET;
  }
  /* Return the DAC_FLAG status */
  return  bitstatus;
}
 8001d1c:	bf0c      	ite	eq
 8001d1e:	2000      	moveq	r0, #0
 8001d20:	2001      	movne	r0, #1
 8001d22:	4770      	bx	lr
 8001d24:	40007400 	.word	0x40007400

08001d28 <DAC_ClearFlag>:
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_FLAG(DAC_FLAG));

  /* Clear the selected DAC flags */
  DAC->SR = (DAC_FLAG << DAC_Channel);
 8001d28:	4b01      	ldr	r3, [pc, #4]	; (8001d30 <DAC_ClearFlag+0x8>)
 8001d2a:	4081      	lsls	r1, r0
 8001d2c:	6359      	str	r1, [r3, #52]	; 0x34
}
 8001d2e:	4770      	bx	lr
 8001d30:	40007400 	.word	0x40007400

08001d34 <DAC_GetITStatus>:
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_IT(DAC_IT));

  /* Get the DAC_IT enable bit status */
  enablestatus = (DAC->CR & (DAC_IT << DAC_Channel)) ;
 8001d34:	4b05      	ldr	r3, [pc, #20]	; (8001d4c <DAC_GetITStatus+0x18>)
 8001d36:	4081      	lsls	r1, r0
 8001d38:	681a      	ldr	r2, [r3, #0]
  
  /* Check the status of the specified DAC interrupt */
  if (((DAC->SR & (DAC_IT << DAC_Channel)) != (uint32_t)RESET) && enablestatus)
 8001d3a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001d3c:	4008      	ands	r0, r1
 8001d3e:	d003      	beq.n	8001d48 <DAC_GetITStatus+0x14>
  {
    /* DAC_IT is set */
    bitstatus = SET;
 8001d40:	4211      	tst	r1, r2
 8001d42:	bf0c      	ite	eq
 8001d44:	2000      	moveq	r0, #0
 8001d46:	2001      	movne	r0, #1
    /* DAC_IT is reset */
    bitstatus = RESET;
  }
  /* Return the DAC_IT status */
  return  bitstatus;
}
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	40007400 	.word	0x40007400

08001d50 <DAC_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_IT(DAC_IT)); 

  /* Clear the selected DAC interrupt pending bits */
  DAC->SR = (DAC_IT << DAC_Channel);
 8001d50:	4b01      	ldr	r3, [pc, #4]	; (8001d58 <DAC_ClearITPendingBit+0x8>)
 8001d52:	4081      	lsls	r1, r0
 8001d54:	6359      	str	r1, [r3, #52]	; 0x34
}
 8001d56:	4770      	bx	lr
 8001d58:	40007400 	.word	0x40007400

08001d5c <DBGMCU_GetREVID>:
  * @param  None
  * @retval Device revision identifier
  */
uint32_t DBGMCU_GetREVID(void)
{
   return(DBGMCU->IDCODE >> 16);
 8001d5c:	4b01      	ldr	r3, [pc, #4]	; (8001d64 <DBGMCU_GetREVID+0x8>)
 8001d5e:	6818      	ldr	r0, [r3, #0]
}
 8001d60:	0c00      	lsrs	r0, r0, #16
 8001d62:	4770      	bx	lr
 8001d64:	e0042000 	.word	0xe0042000

08001d68 <DBGMCU_GetDEVID>:
  * @param  None
  * @retval Device identifier
  */
uint32_t DBGMCU_GetDEVID(void)
{
   return(DBGMCU->IDCODE & IDCODE_DEVID_MASK);
 8001d68:	4b02      	ldr	r3, [pc, #8]	; (8001d74 <DBGMCU_GetDEVID+0xc>)
 8001d6a:	6818      	ldr	r0, [r3, #0]
 8001d6c:	0500      	lsls	r0, r0, #20
}
 8001d6e:	0d00      	lsrs	r0, r0, #20
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	e0042000 	.word	0xe0042000

08001d78 <DBGMCU_Config>:
  * @param  NewState: new state of the specified low power mode in Debug mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DBGMCU_Config(uint32_t DBGMCU_Periph, FunctionalState NewState)
{
 8001d78:	4b04      	ldr	r3, [pc, #16]	; (8001d8c <DBGMCU_Config+0x14>)
  /* Check the parameters */
  assert_param(IS_DBGMCU_PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    DBGMCU->CR |= DBGMCU_Periph;
 8001d7a:	685a      	ldr	r2, [r3, #4]
void DBGMCU_Config(uint32_t DBGMCU_Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_DBGMCU_PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001d7c:	b109      	cbz	r1, 8001d82 <DBGMCU_Config+0xa>
  {
    DBGMCU->CR |= DBGMCU_Periph;
 8001d7e:	4310      	orrs	r0, r2
 8001d80:	e001      	b.n	8001d86 <DBGMCU_Config+0xe>
  }
  else
  {
    DBGMCU->CR &= ~DBGMCU_Periph;
 8001d82:	ea22 0000 	bic.w	r0, r2, r0
 8001d86:	6058      	str	r0, [r3, #4]
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	e0042000 	.word	0xe0042000

08001d90 <DBGMCU_APB1PeriphConfig>:
  *     @arg DBGMCU_CAN1_STOP: Debug CAN2 stopped when Core is halted        
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DBGMCU_APB1PeriphConfig(uint32_t DBGMCU_Periph, FunctionalState NewState)
{
 8001d90:	4b04      	ldr	r3, [pc, #16]	; (8001da4 <DBGMCU_APB1PeriphConfig+0x14>)
  assert_param(IS_DBGMCU_APB1PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    DBGMCU->APB1FZ |= DBGMCU_Periph;
 8001d92:	689a      	ldr	r2, [r3, #8]
{
  /* Check the parameters */
  assert_param(IS_DBGMCU_APB1PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001d94:	b109      	cbz	r1, 8001d9a <DBGMCU_APB1PeriphConfig+0xa>
  {
    DBGMCU->APB1FZ |= DBGMCU_Periph;
 8001d96:	4310      	orrs	r0, r2
 8001d98:	e001      	b.n	8001d9e <DBGMCU_APB1PeriphConfig+0xe>
  }
  else
  {
    DBGMCU->APB1FZ &= ~DBGMCU_Periph;
 8001d9a:	ea22 0000 	bic.w	r0, r2, r0
 8001d9e:	6098      	str	r0, [r3, #8]
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	e0042000 	.word	0xe0042000

08001da8 <DBGMCU_APB2PeriphConfig>:
  * @param  NewState: new state of the specified peripheral in Debug mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DBGMCU_APB2PeriphConfig(uint32_t DBGMCU_Periph, FunctionalState NewState)
{
 8001da8:	4b04      	ldr	r3, [pc, #16]	; (8001dbc <DBGMCU_APB2PeriphConfig+0x14>)
  assert_param(IS_DBGMCU_APB2PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    DBGMCU->APB2FZ |= DBGMCU_Periph;
 8001daa:	68da      	ldr	r2, [r3, #12]
{
  /* Check the parameters */
  assert_param(IS_DBGMCU_APB2PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001dac:	b109      	cbz	r1, 8001db2 <DBGMCU_APB2PeriphConfig+0xa>
  {
    DBGMCU->APB2FZ |= DBGMCU_Periph;
 8001dae:	4310      	orrs	r0, r2
 8001db0:	e001      	b.n	8001db6 <DBGMCU_APB2PeriphConfig+0xe>
  }
  else
  {
    DBGMCU->APB2FZ &= ~DBGMCU_Periph;
 8001db2:	ea22 0000 	bic.w	r0, r2, r0
 8001db6:	60d8      	str	r0, [r3, #12]
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	e0042000 	.word	0xe0042000

08001dc0 <DCMI_DeInit>:
  * @param  None
  * @retval None
  */
void DCMI_DeInit(void)
{
  DCMI->CR = 0x0;
 8001dc0:	4b05      	ldr	r3, [pc, #20]	; (8001dd8 <DCMI_DeInit+0x18>)
 8001dc2:	2200      	movs	r2, #0
  DCMI->IER = 0x0;
  DCMI->ICR = 0x1F;
 8001dc4:	211f      	movs	r1, #31
  * @param  None
  * @retval None
  */
void DCMI_DeInit(void)
{
  DCMI->CR = 0x0;
 8001dc6:	601a      	str	r2, [r3, #0]
  DCMI->IER = 0x0;
 8001dc8:	60da      	str	r2, [r3, #12]
  DCMI->ICR = 0x1F;
 8001dca:	6159      	str	r1, [r3, #20]
  DCMI->ESCR = 0x0;
 8001dcc:	619a      	str	r2, [r3, #24]
  DCMI->ESUR = 0x0;
 8001dce:	61da      	str	r2, [r3, #28]
  DCMI->CWSTRTR = 0x0;
 8001dd0:	621a      	str	r2, [r3, #32]
  DCMI->CWSIZER = 0x0;
 8001dd2:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	50050000 	.word	0x50050000

08001ddc <DCMI_Init>:
  assert_param(IS_DCMI_CAPTURE_RATE(DCMI_InitStruct->DCMI_CaptureRate));
  assert_param(IS_DCMI_EXTENDED_DATA(DCMI_InitStruct->DCMI_ExtendedDataMode));

  /* The DCMI configuration registers should be programmed correctly before 
  enabling the CR_ENABLE Bit and the CR_CAPTURE Bit */
  DCMI->CR &= ~(DCMI_CR_ENABLE | DCMI_CR_CAPTURE);
 8001ddc:	4b0e      	ldr	r3, [pc, #56]	; (8001e18 <DCMI_Init+0x3c>)
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001de4:	f022 0201 	bic.w	r2, r2, #1
  * @param  DCMI_InitStruct: pointer to a DCMI_InitTypeDef structure that contains 
  *         the configuration information for the DCMI.
  * @retval None
  */
void DCMI_Init(DCMI_InitTypeDef* DCMI_InitStruct)
{
 8001de8:	b510      	push	{r4, lr}
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
                     DCMI_InitStruct->DCMI_SynchroMode |
                     DCMI_InitStruct->DCMI_PCKPolarity |
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
 8001dea:	8844      	ldrh	r4, [r0, #2]
  assert_param(IS_DCMI_CAPTURE_RATE(DCMI_InitStruct->DCMI_CaptureRate));
  assert_param(IS_DCMI_EXTENDED_DATA(DCMI_InitStruct->DCMI_ExtendedDataMode));

  /* The DCMI configuration registers should be programmed correctly before 
  enabling the CR_ENABLE Bit and the CR_CAPTURE Bit */
  DCMI->CR &= ~(DCMI_CR_ENABLE | DCMI_CR_CAPTURE);
 8001dec:	601a      	str	r2, [r3, #0]
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
                     DCMI_InitStruct->DCMI_SynchroMode |
                     DCMI_InitStruct->DCMI_PCKPolarity |
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
 8001dee:	8802      	ldrh	r2, [r0, #0]
  /* The DCMI configuration registers should be programmed correctly before 
  enabling the CR_ENABLE Bit and the CR_CAPTURE Bit */
  DCMI->CR &= ~(DCMI_CR_ENABLE | DCMI_CR_CAPTURE);
   
  /* Reset the old DCMI configuration */
  temp = DCMI->CR;
 8001df0:	6819      	ldr	r1, [r3, #0]
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
                     DCMI_InitStruct->DCMI_SynchroMode |
                     DCMI_InitStruct->DCMI_PCKPolarity |
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
 8001df2:	4322      	orrs	r2, r4
 8001df4:	8884      	ldrh	r4, [r0, #4]
 8001df6:	4322      	orrs	r2, r4
 8001df8:	88c4      	ldrh	r4, [r0, #6]
 8001dfa:	4322      	orrs	r2, r4
 8001dfc:	8904      	ldrh	r4, [r0, #8]
 8001dfe:	4322      	orrs	r2, r4
 8001e00:	8944      	ldrh	r4, [r0, #10]
 8001e02:	8980      	ldrh	r0, [r0, #12]
 8001e04:	4322      	orrs	r2, r4
  DCMI->CR &= ~(DCMI_CR_ENABLE | DCMI_CR_CAPTURE);
   
  /* Reset the old DCMI configuration */
  temp = DCMI->CR;
  
  temp &= ~((uint32_t)DCMI_CR_CM     | DCMI_CR_ESS   | DCMI_CR_PCKPOL |
 8001e06:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
                     DCMI_InitStruct->DCMI_SynchroMode |
                     DCMI_InitStruct->DCMI_PCKPolarity |
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
 8001e0a:	4302      	orrs	r2, r0
  DCMI->CR &= ~(DCMI_CR_ENABLE | DCMI_CR_CAPTURE);
   
  /* Reset the old DCMI configuration */
  temp = DCMI->CR;
  
  temp &= ~((uint32_t)DCMI_CR_CM     | DCMI_CR_ESS   | DCMI_CR_PCKPOL |
 8001e0c:	f021 0102 	bic.w	r1, r1, #2
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
                     DCMI_InitStruct->DCMI_SynchroMode |
                     DCMI_InitStruct->DCMI_PCKPolarity |
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
 8001e10:	b292      	uxth	r2, r2
  temp &= ~((uint32_t)DCMI_CR_CM     | DCMI_CR_ESS   | DCMI_CR_PCKPOL |
                      DCMI_CR_HSPOL  | DCMI_CR_VSPOL | DCMI_CR_FCRC_0 | 
                      DCMI_CR_FCRC_1 | DCMI_CR_EDM_0 | DCMI_CR_EDM_1); 
                  
  /* Sets the new configuration of the DCMI peripheral */
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
 8001e12:	430a      	orrs	r2, r1
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
                     DCMI_InitStruct->DCMI_ExtendedDataMode);

  DCMI->CR = temp;                              
 8001e14:	601a      	str	r2, [r3, #0]
}
 8001e16:	bd10      	pop	{r4, pc}
 8001e18:	50050000 	.word	0x50050000

08001e1c <DCMI_StructInit>:
  * @retval None
  */
void DCMI_StructInit(DCMI_InitTypeDef* DCMI_InitStruct)
{
  /* Set the default configuration */
  DCMI_InitStruct->DCMI_CaptureMode = DCMI_CaptureMode_Continuous;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	8003      	strh	r3, [r0, #0]
  DCMI_InitStruct->DCMI_SynchroMode = DCMI_SynchroMode_Hardware;
 8001e20:	8043      	strh	r3, [r0, #2]
  DCMI_InitStruct->DCMI_PCKPolarity = DCMI_PCKPolarity_Falling;
 8001e22:	8083      	strh	r3, [r0, #4]
  DCMI_InitStruct->DCMI_VSPolarity = DCMI_VSPolarity_Low;
 8001e24:	80c3      	strh	r3, [r0, #6]
  DCMI_InitStruct->DCMI_HSPolarity = DCMI_HSPolarity_Low;
 8001e26:	8103      	strh	r3, [r0, #8]
  DCMI_InitStruct->DCMI_CaptureRate = DCMI_CaptureRate_All_Frame;
 8001e28:	8143      	strh	r3, [r0, #10]
  DCMI_InitStruct->DCMI_ExtendedDataMode = DCMI_ExtendedDataMode_8b;
 8001e2a:	8183      	strh	r3, [r0, #12]
}
 8001e2c:	4770      	bx	lr

08001e2e <DCMI_CROPConfig>:
  * @retval None
  */
void DCMI_CROPConfig(DCMI_CROPInitTypeDef* DCMI_CROPInitStruct)
{  
  /* Sets the CROP window coordinates */
  DCMI->CWSTRTR = (uint32_t)((uint32_t)DCMI_CROPInitStruct->DCMI_HorizontalOffsetCount |
 8001e2e:	8843      	ldrh	r3, [r0, #2]
                  ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalStartLine << 16));
 8001e30:	8802      	ldrh	r2, [r0, #0]

  /* Sets the CROP window size */
  DCMI->CWSIZER = (uint32_t)(DCMI_CROPInitStruct->DCMI_CaptureCount |
                  ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalLineCount << 16));
 8001e32:	8881      	ldrh	r1, [r0, #4]
  * @retval None
  */
void DCMI_CROPConfig(DCMI_CROPInitTypeDef* DCMI_CROPInitStruct)
{  
  /* Sets the CROP window coordinates */
  DCMI->CWSTRTR = (uint32_t)((uint32_t)DCMI_CROPInitStruct->DCMI_HorizontalOffsetCount |
 8001e34:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8001e38:	4b03      	ldr	r3, [pc, #12]	; (8001e48 <DCMI_CROPConfig+0x1a>)
 8001e3a:	621a      	str	r2, [r3, #32]
                  ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalStartLine << 16));

  /* Sets the CROP window size */
  DCMI->CWSIZER = (uint32_t)(DCMI_CROPInitStruct->DCMI_CaptureCount |
 8001e3c:	88c2      	ldrh	r2, [r0, #6]
 8001e3e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001e42:	625a      	str	r2, [r3, #36]	; 0x24
                  ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalLineCount << 16));
}
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	50050000 	.word	0x50050000

08001e4c <DCMI_CROPCmd>:
  * @param  NewState: new state of the DCMI Crop feature. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_CROPCmd(FunctionalState NewState)
{
 8001e4c:	4b04      	ldr	r3, [pc, #16]	; (8001e60 <DCMI_CROPCmd+0x14>)
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
  {
    /* Enable the DCMI Crop feature */
    DCMI->CR |= (uint32_t)DCMI_CR_CROP;
 8001e4e:	681a      	ldr	r2, [r3, #0]
void DCMI_CROPCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 8001e50:	b110      	cbz	r0, 8001e58 <DCMI_CROPCmd+0xc>
  {
    /* Enable the DCMI Crop feature */
    DCMI->CR |= (uint32_t)DCMI_CR_CROP;
 8001e52:	f042 0204 	orr.w	r2, r2, #4
 8001e56:	e001      	b.n	8001e5c <DCMI_CROPCmd+0x10>
  }
  else
  {
    /* Disable the DCMI Crop feature */
    DCMI->CR &= ~(uint32_t)DCMI_CR_CROP;
 8001e58:	f022 0204 	bic.w	r2, r2, #4
 8001e5c:	601a      	str	r2, [r3, #0]
 8001e5e:	4770      	bx	lr
 8001e60:	50050000 	.word	0x50050000

08001e64 <DCMI_SetEmbeddedSynchroCodes>:
  */
void DCMI_SetEmbeddedSynchroCodes(DCMI_CodesInitTypeDef* DCMI_CodesInitStruct)
{
  DCMI->ESCR = (uint32_t)(DCMI_CodesInitStruct->DCMI_FrameStartCode |
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineStartCode << 8)|
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineEndCode << 16)|
 8001e64:	7882      	ldrb	r2, [r0, #2]
  * @retval None
  */
void DCMI_SetEmbeddedSynchroCodes(DCMI_CodesInitTypeDef* DCMI_CodesInitStruct)
{
  DCMI->ESCR = (uint32_t)(DCMI_CodesInitStruct->DCMI_FrameStartCode |
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineStartCode << 8)|
 8001e66:	7843      	ldrb	r3, [r0, #1]
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineEndCode << 16)|
 8001e68:	0412      	lsls	r2, r2, #16
  *         contains the embedded synchronization codes for the DCMI peripheral.
  * @retval None
  */
void DCMI_SetEmbeddedSynchroCodes(DCMI_CodesInitTypeDef* DCMI_CodesInitStruct)
{
  DCMI->ESCR = (uint32_t)(DCMI_CodesInitStruct->DCMI_FrameStartCode |
 8001e6a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8001e6e:	7803      	ldrb	r3, [r0, #0]
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineStartCode << 8)|
 8001e70:	431a      	orrs	r2, r3
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineEndCode << 16)|
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_FrameEndCode << 24));
 8001e72:	78c3      	ldrb	r3, [r0, #3]
  *         contains the embedded synchronization codes for the DCMI peripheral.
  * @retval None
  */
void DCMI_SetEmbeddedSynchroCodes(DCMI_CodesInitTypeDef* DCMI_CodesInitStruct)
{
  DCMI->ESCR = (uint32_t)(DCMI_CodesInitStruct->DCMI_FrameStartCode |
 8001e74:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 8001e78:	4b01      	ldr	r3, [pc, #4]	; (8001e80 <DCMI_SetEmbeddedSynchroCodes+0x1c>)
 8001e7a:	619a      	str	r2, [r3, #24]
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineStartCode << 8)|
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineEndCode << 16)|
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_FrameEndCode << 24));
}
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	50050000 	.word	0x50050000

08001e84 <DCMI_JPEGCmd>:
  * @param  NewState: new state of the DCMI JPEG format. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_JPEGCmd(FunctionalState NewState)
{
 8001e84:	4b04      	ldr	r3, [pc, #16]	; (8001e98 <DCMI_JPEGCmd+0x14>)
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 
  if (NewState != DISABLE)
  {
    /* Enable the DCMI JPEG format */
    DCMI->CR |= (uint32_t)DCMI_CR_JPEG;
 8001e86:	681a      	ldr	r2, [r3, #0]
void DCMI_JPEGCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 
  if (NewState != DISABLE)
 8001e88:	b110      	cbz	r0, 8001e90 <DCMI_JPEGCmd+0xc>
  {
    /* Enable the DCMI JPEG format */
    DCMI->CR |= (uint32_t)DCMI_CR_JPEG;
 8001e8a:	f042 0208 	orr.w	r2, r2, #8
 8001e8e:	e001      	b.n	8001e94 <DCMI_JPEGCmd+0x10>
  }
  else
  {
    /* Disable the DCMI JPEG format */
    DCMI->CR &= ~(uint32_t)DCMI_CR_JPEG;
 8001e90:	f022 0208 	bic.w	r2, r2, #8
 8001e94:	601a      	str	r2, [r3, #0]
 8001e96:	4770      	bx	lr
 8001e98:	50050000 	.word	0x50050000

08001e9c <DCMI_Cmd>:
  * @param  NewState: new state of the DCMI interface. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_Cmd(FunctionalState NewState)
{
 8001e9c:	4b04      	ldr	r3, [pc, #16]	; (8001eb0 <DCMI_Cmd+0x14>)
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the DCMI by setting ENABLE bit */
    DCMI->CR |= (uint32_t)DCMI_CR_ENABLE;
 8001e9e:	681a      	ldr	r2, [r3, #0]
void DCMI_Cmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001ea0:	b110      	cbz	r0, 8001ea8 <DCMI_Cmd+0xc>
  {
    /* Enable the DCMI by setting ENABLE bit */
    DCMI->CR |= (uint32_t)DCMI_CR_ENABLE;
 8001ea2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ea6:	e001      	b.n	8001eac <DCMI_Cmd+0x10>
  }
  else
  {
    /* Disable the DCMI by clearing ENABLE bit */
    DCMI->CR &= ~(uint32_t)DCMI_CR_ENABLE;
 8001ea8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001eac:	601a      	str	r2, [r3, #0]
 8001eae:	4770      	bx	lr
 8001eb0:	50050000 	.word	0x50050000

08001eb4 <DCMI_CaptureCmd>:
  * @param  NewState: new state of the DCMI capture. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_CaptureCmd(FunctionalState NewState)
{
 8001eb4:	4b04      	ldr	r3, [pc, #16]	; (8001ec8 <DCMI_CaptureCmd+0x14>)
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
  {
    /* Enable the DCMI Capture */
    DCMI->CR |= (uint32_t)DCMI_CR_CAPTURE;
 8001eb6:	681a      	ldr	r2, [r3, #0]
void DCMI_CaptureCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 8001eb8:	b110      	cbz	r0, 8001ec0 <DCMI_CaptureCmd+0xc>
  {
    /* Enable the DCMI Capture */
    DCMI->CR |= (uint32_t)DCMI_CR_CAPTURE;
 8001eba:	f042 0201 	orr.w	r2, r2, #1
 8001ebe:	e001      	b.n	8001ec4 <DCMI_CaptureCmd+0x10>
  }
  else
  {
    /* Disable the DCMI Capture */
    DCMI->CR &= ~(uint32_t)DCMI_CR_CAPTURE;
 8001ec0:	f022 0201 	bic.w	r2, r2, #1
 8001ec4:	601a      	str	r2, [r3, #0]
 8001ec6:	4770      	bx	lr
 8001ec8:	50050000 	.word	0x50050000

08001ecc <DCMI_ReadData>:
  * @param  None 
  * @retval Data register value
  */
uint32_t DCMI_ReadData(void)
{
  return DCMI->DR;
 8001ecc:	4b01      	ldr	r3, [pc, #4]	; (8001ed4 <DCMI_ReadData+0x8>)
 8001ece:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	50050000 	.word	0x50050000

08001ed8 <DCMI_ITConfig>:
  * @param  NewState: new state of the specified DCMI interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_ITConfig(uint16_t DCMI_IT, FunctionalState NewState)
{
 8001ed8:	4b04      	ldr	r3, [pc, #16]	; (8001eec <DCMI_ITConfig+0x14>)
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Interrupt sources */
    DCMI->IER |= DCMI_IT;
 8001eda:	68da      	ldr	r2, [r3, #12]
{
  /* Check the parameters */
  assert_param(IS_DCMI_CONFIG_IT(DCMI_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001edc:	b109      	cbz	r1, 8001ee2 <DCMI_ITConfig+0xa>
  {
    /* Enable the Interrupt sources */
    DCMI->IER |= DCMI_IT;
 8001ede:	4310      	orrs	r0, r2
 8001ee0:	e002      	b.n	8001ee8 <DCMI_ITConfig+0x10>
  }
  else
  {
    /* Disable the Interrupt sources */
    DCMI->IER &= (uint16_t)(~DCMI_IT);
 8001ee2:	43c0      	mvns	r0, r0
 8001ee4:	b280      	uxth	r0, r0
 8001ee6:	4010      	ands	r0, r2
 8001ee8:	60d8      	str	r0, [r3, #12]
 8001eea:	4770      	bx	lr
 8001eec:	50050000 	.word	0x50050000

08001ef0 <DCMI_GetFlagStatus>:
  assert_param(IS_DCMI_GET_FLAG(DCMI_FLAG));
  
  /* Get the DCMI register index */
  dcmireg = (((uint16_t)DCMI_FLAG) >> 12);
  
  if (dcmireg == 0x00) /* The FLAG is in RISR register */
 8001ef0:	0b02      	lsrs	r2, r0, #12
 8001ef2:	4b06      	ldr	r3, [pc, #24]	; (8001f0c <DCMI_GetFlagStatus+0x1c>)
 8001ef4:	d101      	bne.n	8001efa <DCMI_GetFlagStatus+0xa>
  {
    tempreg= DCMI->RISR;
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	e003      	b.n	8001f02 <DCMI_GetFlagStatus+0x12>
  }
  else if (dcmireg == 0x02) /* The FLAG is in SR register */
 8001efa:	2a02      	cmp	r2, #2
  {
    tempreg = DCMI->SR;
 8001efc:	bf0c      	ite	eq
 8001efe:	685b      	ldreq	r3, [r3, #4]
  }
  else /* The FLAG is in MISR register */
  {
    tempreg = DCMI->MISR;
 8001f00:	691b      	ldrne	r3, [r3, #16]
  }
  
  if ((tempreg & DCMI_FLAG) != (uint16_t)RESET )
  {
    bitstatus = SET;
 8001f02:	4203      	tst	r3, r0
  {
    bitstatus = RESET;
  }
  /* Return the DCMI_FLAG status */
  return  bitstatus;
}
 8001f04:	bf0c      	ite	eq
 8001f06:	2000      	moveq	r0, #0
 8001f08:	2001      	movne	r0, #1
 8001f0a:	4770      	bx	lr
 8001f0c:	50050000 	.word	0x50050000

08001f10 <DCMI_ClearFlag>:
  assert_param(IS_DCMI_CLEAR_FLAG(DCMI_FLAG));
  
  /* Clear the flag by writing in the ICR register 1 in the corresponding 
  Flag position*/
  
  DCMI->ICR = DCMI_FLAG;
 8001f10:	4b01      	ldr	r3, [pc, #4]	; (8001f18 <DCMI_ClearFlag+0x8>)
 8001f12:	6158      	str	r0, [r3, #20]
}
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	50050000 	.word	0x50050000

08001f1c <DCMI_GetITStatus>:
  uint32_t itstatus = 0;
  
  /* Check the parameters */
  assert_param(IS_DCMI_GET_IT(DCMI_IT));
  
  itstatus = DCMI->MISR & DCMI_IT; /* Only masked interrupts are checked */
 8001f1c:	4b03      	ldr	r3, [pc, #12]	; (8001f2c <DCMI_GetITStatus+0x10>)
 8001f1e:	691b      	ldr	r3, [r3, #16]
  
  if ((itstatus != (uint16_t)RESET))
  {
    bitstatus = SET;
 8001f20:	4218      	tst	r0, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8001f22:	bf0c      	ite	eq
 8001f24:	2000      	moveq	r0, #0
 8001f26:	2001      	movne	r0, #1
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	50050000 	.word	0x50050000

08001f30 <DCMI_ClearITPendingBit>:
void DCMI_ClearITPendingBit(uint16_t DCMI_IT)
{
  /* Clear the interrupt pending Bit by writing in the ICR register 1 in the 
  corresponding pending Bit position*/
  
  DCMI->ICR = DCMI_IT;
 8001f30:	4b01      	ldr	r3, [pc, #4]	; (8001f38 <DCMI_ClearITPendingBit+0x8>)
 8001f32:	6158      	str	r0, [r3, #20]
}
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	50050000 	.word	0x50050000

08001f3c <DMA_DeInit>:
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 8001f3c:	6803      	ldr	r3, [r0, #0]
 8001f3e:	f023 0301 	bic.w	r3, r3, #1
 8001f42:	6003      	str	r3, [r0, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 8001f44:	2300      	movs	r3, #0
 8001f46:	6003      	str	r3, [r0, #0]
  
  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 8001f48:	6043      	str	r3, [r0, #4]
  
  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 8001f4a:	6083      	str	r3, [r0, #8]
  
  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 8001f4c:	60c3      	str	r3, [r0, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 8001f4e:	6103      	str	r3, [r0, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 8001f50:	2321      	movs	r3, #33	; 0x21
 8001f52:	6143      	str	r3, [r0, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 8001f54:	4b2c      	ldr	r3, [pc, #176]	; (8002008 <DMA_DeInit+0xcc>)
 8001f56:	4298      	cmp	r0, r3
 8001f58:	d01c      	beq.n	8001f94 <DMA_DeInit+0x58>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream1)
 8001f5a:	4b2c      	ldr	r3, [pc, #176]	; (800200c <DMA_DeInit+0xd0>)
 8001f5c:	4298      	cmp	r0, r3
 8001f5e:	d020      	beq.n	8001fa2 <DMA_DeInit+0x66>
  {
    /* Reset interrupt pending bits for DMA1 Stream1 */
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream2)
 8001f60:	4b2b      	ldr	r3, [pc, #172]	; (8002010 <DMA_DeInit+0xd4>)
 8001f62:	4298      	cmp	r0, r3
 8001f64:	d025      	beq.n	8001fb2 <DMA_DeInit+0x76>
  {
    /* Reset interrupt pending bits for DMA1 Stream2 */
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream3)
 8001f66:	4b2b      	ldr	r3, [pc, #172]	; (8002014 <DMA_DeInit+0xd8>)
 8001f68:	4298      	cmp	r0, r3
 8001f6a:	d02a      	beq.n	8001fc2 <DMA_DeInit+0x86>
  {
    /* Reset interrupt pending bits for DMA1 Stream3 */
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream4)
 8001f6c:	4b2a      	ldr	r3, [pc, #168]	; (8002018 <DMA_DeInit+0xdc>)
 8001f6e:	4298      	cmp	r0, r3
 8001f70:	d02f      	beq.n	8001fd2 <DMA_DeInit+0x96>
  {
    /* Reset interrupt pending bits for DMA1 Stream4 */
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream5)
 8001f72:	4b2a      	ldr	r3, [pc, #168]	; (800201c <DMA_DeInit+0xe0>)
 8001f74:	4298      	cmp	r0, r3
 8001f76:	d033      	beq.n	8001fe0 <DMA_DeInit+0xa4>
  {
    /* Reset interrupt pending bits for DMA1 Stream5 */
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream6)
 8001f78:	4b29      	ldr	r3, [pc, #164]	; (8002020 <DMA_DeInit+0xe4>)
 8001f7a:	4298      	cmp	r0, r3
 8001f7c:	d037      	beq.n	8001fee <DMA_DeInit+0xb2>
  {
    /* Reset interrupt pending bits for DMA1 Stream6 */
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream7)
 8001f7e:	4b29      	ldr	r3, [pc, #164]	; (8002024 <DMA_DeInit+0xe8>)
 8001f80:	4298      	cmp	r0, r3
 8001f82:	d104      	bne.n	8001f8e <DMA_DeInit+0x52>
  {
    /* Reset interrupt pending bits for DMA1 Stream7 */
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
 8001f84:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8001f88:	f843 2cac 	str.w	r2, [r3, #-172]
 8001f8c:	4770      	bx	lr
  }
  else if (DMAy_Streamx == DMA2_Stream0)
 8001f8e:	4b26      	ldr	r3, [pc, #152]	; (8002028 <DMA_DeInit+0xec>)
 8001f90:	4298      	cmp	r0, r3
 8001f92:	d103      	bne.n	8001f9c <DMA_DeInit+0x60>
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 8001f94:	223d      	movs	r2, #61	; 0x3d
 8001f96:	f843 2c08 	str.w	r2, [r3, #-8]
 8001f9a:	4770      	bx	lr
  }
  else if (DMAy_Streamx == DMA2_Stream1)
 8001f9c:	4b23      	ldr	r3, [pc, #140]	; (800202c <DMA_DeInit+0xf0>)
 8001f9e:	4298      	cmp	r0, r3
 8001fa0:	d104      	bne.n	8001fac <DMA_DeInit+0x70>
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 8001fa2:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8001fa6:	f843 2c20 	str.w	r2, [r3, #-32]
 8001faa:	4770      	bx	lr
  }
  else if (DMAy_Streamx == DMA2_Stream2)
 8001fac:	4b20      	ldr	r3, [pc, #128]	; (8002030 <DMA_DeInit+0xf4>)
 8001fae:	4298      	cmp	r0, r3
 8001fb0:	d104      	bne.n	8001fbc <DMA_DeInit+0x80>
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 8001fb2:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8001fb6:	f843 2c38 	str.w	r2, [r3, #-56]
 8001fba:	4770      	bx	lr
  }
  else if (DMAy_Streamx == DMA2_Stream3)
 8001fbc:	4b1d      	ldr	r3, [pc, #116]	; (8002034 <DMA_DeInit+0xf8>)
 8001fbe:	4298      	cmp	r0, r3
 8001fc0:	d104      	bne.n	8001fcc <DMA_DeInit+0x90>
  {
    /* Reset interrupt pending bits for DMA2 Stream3 */
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 8001fc2:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8001fc6:	f843 2c50 	str.w	r2, [r3, #-80]
 8001fca:	4770      	bx	lr
  }
  else if (DMAy_Streamx == DMA2_Stream4)
 8001fcc:	4b1a      	ldr	r3, [pc, #104]	; (8002038 <DMA_DeInit+0xfc>)
 8001fce:	4298      	cmp	r0, r3
 8001fd0:	d103      	bne.n	8001fda <DMA_DeInit+0x9e>
  {
    /* Reset interrupt pending bits for DMA2 Stream4 */
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 8001fd2:	4a1a      	ldr	r2, [pc, #104]	; (800203c <DMA_DeInit+0x100>)
 8001fd4:	f843 2c64 	str.w	r2, [r3, #-100]
 8001fd8:	4770      	bx	lr
  }
  else if (DMAy_Streamx == DMA2_Stream5)
 8001fda:	4b19      	ldr	r3, [pc, #100]	; (8002040 <DMA_DeInit+0x104>)
 8001fdc:	4298      	cmp	r0, r3
 8001fde:	d103      	bne.n	8001fe8 <DMA_DeInit+0xac>
  {
    /* Reset interrupt pending bits for DMA2 Stream5 */
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 8001fe0:	4a18      	ldr	r2, [pc, #96]	; (8002044 <DMA_DeInit+0x108>)
 8001fe2:	f843 2c7c 	str.w	r2, [r3, #-124]
 8001fe6:	4770      	bx	lr
  }
  else if (DMAy_Streamx == DMA2_Stream6)
 8001fe8:	4b17      	ldr	r3, [pc, #92]	; (8002048 <DMA_DeInit+0x10c>)
 8001fea:	4298      	cmp	r0, r3
 8001fec:	d103      	bne.n	8001ff6 <DMA_DeInit+0xba>
  {
    /* Reset interrupt pending bits for DMA2 Stream6 */
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 8001fee:	4a17      	ldr	r2, [pc, #92]	; (800204c <DMA_DeInit+0x110>)
 8001ff0:	f843 2c94 	str.w	r2, [r3, #-148]
 8001ff4:	4770      	bx	lr
  }
  else 
  {
    if (DMAy_Streamx == DMA2_Stream7)
 8001ff6:	4b16      	ldr	r3, [pc, #88]	; (8002050 <DMA_DeInit+0x114>)
 8001ff8:	4298      	cmp	r0, r3
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 8001ffa:	bf04      	itt	eq
 8001ffc:	f04f 523d 	moveq.w	r2, #792723456	; 0x2f400000
 8002000:	f843 2cac 	streq.w	r2, [r3, #-172]
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	40026010 	.word	0x40026010
 800200c:	40026028 	.word	0x40026028
 8002010:	40026040 	.word	0x40026040
 8002014:	40026058 	.word	0x40026058
 8002018:	40026070 	.word	0x40026070
 800201c:	40026088 	.word	0x40026088
 8002020:	400260a0 	.word	0x400260a0
 8002024:	400260b8 	.word	0x400260b8
 8002028:	40026410 	.word	0x40026410
 800202c:	40026428 	.word	0x40026428
 8002030:	40026440 	.word	0x40026440
 8002034:	40026458 	.word	0x40026458
 8002038:	40026470 	.word	0x40026470
 800203c:	2000003d 	.word	0x2000003d
 8002040:	40026488 	.word	0x40026488
 8002044:	20000f40 	.word	0x20000f40
 8002048:	400264a0 	.word	0x400264a0
 800204c:	203d0000 	.word	0x203d0000
 8002050:	400264b8 	.word	0x400264b8

08002054 <DMA_Init>:
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8002054:	6802      	ldr	r2, [r0, #0]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002056:	4b13      	ldr	r3, [pc, #76]	; (80020a4 <DMA_Init+0x50>)
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8002058:	b510      	push	{r4, lr}
  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800205a:	4013      	ands	r3, r2
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800205c:	68cc      	ldr	r4, [r1, #12]
 800205e:	680a      	ldr	r2, [r1, #0]
 8002060:	4322      	orrs	r2, r4
 8002062:	694c      	ldr	r4, [r1, #20]
 8002064:	4322      	orrs	r2, r4
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8002066:	698c      	ldr	r4, [r1, #24]
 8002068:	4322      	orrs	r2, r4
 800206a:	69cc      	ldr	r4, [r1, #28]
 800206c:	4322      	orrs	r2, r4
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800206e:	6a0c      	ldr	r4, [r1, #32]
 8002070:	4322      	orrs	r2, r4
 8002072:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8002074:	4322      	orrs	r2, r4
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8002076:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8002078:	4322      	orrs	r2, r4
 800207a:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 800207c:	4322      	orrs	r2, r4
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 800207e:	6b8c      	ldr	r4, [r1, #56]	; 0x38
 8002080:	4322      	orrs	r2, r4
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8002082:	4313      	orrs	r3, r2
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8002084:	6003      	str	r3, [r0, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8002086:	6942      	ldr	r2, [r0, #20]
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8002088:	6b0c      	ldr	r4, [r1, #48]	; 0x30
 800208a:	6acb      	ldr	r3, [r1, #44]	; 0x2c
  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800208c:	f022 0207 	bic.w	r2, r2, #7

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8002090:	4323      	orrs	r3, r4
 8002092:	4313      	orrs	r3, r2

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8002094:	6143      	str	r3, [r0, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8002096:	690b      	ldr	r3, [r1, #16]
 8002098:	6043      	str	r3, [r0, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 800209a:	684b      	ldr	r3, [r1, #4]
 800209c:	6083      	str	r3, [r0, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 800209e:	688b      	ldr	r3, [r1, #8]
 80020a0:	60c3      	str	r3, [r0, #12]
}
 80020a2:	bd10      	pop	{r4, pc}
 80020a4:	f01c803f 	.word	0xf01c803f

080020a8 <DMA_StructInit>:
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
  /*-------------- Reset DMA init structure parameters values ----------------*/
  /* Initialize the DMA_Channel member */
  DMA_InitStruct->DMA_Channel = 0;
 80020a8:	2300      	movs	r3, #0
 80020aa:	6003      	str	r3, [r0, #0]

  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 80020ac:	6043      	str	r3, [r0, #4]

  /* Initialize the DMA_Memory0BaseAddr member */
  DMA_InitStruct->DMA_Memory0BaseAddr = 0;
 80020ae:	6083      	str	r3, [r0, #8]

  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralToMemory;
 80020b0:	60c3      	str	r3, [r0, #12]

  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
 80020b2:	6103      	str	r3, [r0, #16]

  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 80020b4:	6143      	str	r3, [r0, #20]

  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 80020b6:	6183      	str	r3, [r0, #24]

  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 80020b8:	61c3      	str	r3, [r0, #28]

  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 80020ba:	6203      	str	r3, [r0, #32]

  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 80020bc:	6243      	str	r3, [r0, #36]	; 0x24

  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 80020be:	6283      	str	r3, [r0, #40]	; 0x28

  /* Initialize the DMA_FIFOMode member */
  DMA_InitStruct->DMA_FIFOMode = DMA_FIFOMode_Disable;
 80020c0:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Initialize the DMA_FIFOThreshold member */
  DMA_InitStruct->DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 80020c2:	6303      	str	r3, [r0, #48]	; 0x30

  /* Initialize the DMA_MemoryBurst member */
  DMA_InitStruct->DMA_MemoryBurst = DMA_MemoryBurst_Single;
 80020c4:	6343      	str	r3, [r0, #52]	; 0x34

  /* Initialize the DMA_PeripheralBurst member */
  DMA_InitStruct->DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 80020c6:	6383      	str	r3, [r0, #56]	; 0x38
}
 80020c8:	4770      	bx	lr

080020ca <DMA_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 80020ca:	6803      	ldr	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80020cc:	b111      	cbz	r1, 80020d4 <DMA_Cmd+0xa>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 80020ce:	f043 0301 	orr.w	r3, r3, #1
 80020d2:	e001      	b.n	80020d8 <DMA_Cmd+0xe>
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 80020d4:	f023 0301 	bic.w	r3, r3, #1
 80020d8:	6003      	str	r3, [r0, #0]
 80020da:	4770      	bx	lr

080020dc <DMA_PeriphIncOffsetSizeConfig>:

  /* Check the needed Peripheral increment offset */
  if(DMA_Pincos != DMA_PINCOS_Psize)
  {
    /* Configure DMA_SxCR_PINCOS bit with the input parameter */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PINCOS;     
 80020dc:	6803      	ldr	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_PINCOS_SIZE(DMA_Pincos));

  /* Check the needed Peripheral increment offset */
  if(DMA_Pincos != DMA_PINCOS_Psize)
 80020de:	b111      	cbz	r1, 80020e6 <DMA_PeriphIncOffsetSizeConfig+0xa>
  {
    /* Configure DMA_SxCR_PINCOS bit with the input parameter */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PINCOS;     
 80020e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020e4:	e001      	b.n	80020ea <DMA_PeriphIncOffsetSizeConfig+0xe>
  }
  else
  {
    /* Clear the PINCOS bit: Peripheral address incremented according to PSIZE */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PINCOS;    
 80020e6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80020ea:	6003      	str	r3, [r0, #0]
 80020ec:	4770      	bx	lr

080020ee <DMA_FlowControllerConfig>:

  /* Check the needed flow controller  */
  if(DMA_FlowCtrl != DMA_FlowCtrl_Memory)
  {
    /* Configure DMA_SxCR_PFCTRL bit with the input parameter */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PFCTRL;   
 80020ee:	6803      	ldr	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_FLOW_CTRL(DMA_FlowCtrl));

  /* Check the needed flow controller  */
  if(DMA_FlowCtrl != DMA_FlowCtrl_Memory)
 80020f0:	b111      	cbz	r1, 80020f8 <DMA_FlowControllerConfig+0xa>
  {
    /* Configure DMA_SxCR_PFCTRL bit with the input parameter */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PFCTRL;   
 80020f2:	f043 0320 	orr.w	r3, r3, #32
 80020f6:	e001      	b.n	80020fc <DMA_FlowControllerConfig+0xe>
  }
  else
  {
    /* Clear the PFCTRL bit: Memory is the flow controller */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PFCTRL;    
 80020f8:	f023 0320 	bic.w	r3, r3, #32
 80020fc:	6003      	str	r3, [r0, #0]
 80020fe:	4770      	bx	lr

08002100 <DMA_SetCurrDataCounter>:
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Write the number of data units to be transferred */
  DMAy_Streamx->NDTR = (uint16_t)Counter;
 8002100:	6041      	str	r1, [r0, #4]
}
 8002102:	4770      	bx	lr

08002104 <DMA_GetCurrDataCounter>:
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Return the number of remaining data units for DMAy Streamx */
  return ((uint16_t)(DMAy_Streamx->NDTR));
 8002104:	6840      	ldr	r0, [r0, #4]
}
 8002106:	b280      	uxth	r0, r0
 8002108:	4770      	bx	lr

0800210a <DMA_DoubleBufferModeConfig>:
  assert_param(IS_DMA_CURRENT_MEM(DMA_CurrentMemory));

  if (DMA_CurrentMemory != DMA_Memory_0)
  {
    /* Set Memory 1 as current memory address */
    DMAy_Streamx->CR |= (uint32_t)(DMA_SxCR_CT);    
 800210a:	6803      	ldr	r3, [r0, #0]
{  
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CURRENT_MEM(DMA_CurrentMemory));

  if (DMA_CurrentMemory != DMA_Memory_0)
 800210c:	b112      	cbz	r2, 8002114 <DMA_DoubleBufferModeConfig+0xa>
  {
    /* Set Memory 1 as current memory address */
    DMAy_Streamx->CR |= (uint32_t)(DMA_SxCR_CT);    
 800210e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002112:	e001      	b.n	8002118 <DMA_DoubleBufferModeConfig+0xe>
  }
  else
  {
    /* Set Memory 0 as current memory address */
    DMAy_Streamx->CR &= ~(uint32_t)(DMA_SxCR_CT);    
 8002114:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002118:	6003      	str	r3, [r0, #0]
  }

  /* Write to DMAy Streamx M1AR */
  DMAy_Streamx->M1AR = Memory1BaseAddr;
 800211a:	6101      	str	r1, [r0, #16]
}
 800211c:	4770      	bx	lr

0800211e <DMA_DoubleBufferModeCmd>:

  /* Configure the Double Buffer mode */
  if (NewState != DISABLE)
  {
    /* Enable the Double buffer mode */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_DBM;
 800211e:	6803      	ldr	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Configure the Double Buffer mode */
  if (NewState != DISABLE)
 8002120:	b111      	cbz	r1, 8002128 <DMA_DoubleBufferModeCmd+0xa>
  {
    /* Enable the Double buffer mode */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_DBM;
 8002122:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002126:	e001      	b.n	800212c <DMA_DoubleBufferModeCmd+0xe>
  }
  else
  {
    /* Disable the Double buffer mode */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_DBM;
 8002128:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800212c:	6003      	str	r3, [r0, #0]
 800212e:	4770      	bx	lr

08002130 <DMA_MemoryTargetConfig>:
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CURRENT_MEM(DMA_MemoryTarget));
    
  /* Check the Memory target to be configured */
  if (DMA_MemoryTarget != DMA_Memory_0)
 8002130:	b10a      	cbz	r2, 8002136 <DMA_MemoryTargetConfig+0x6>
  {
    /* Write to DMAy Streamx M1AR */
    DMAy_Streamx->M1AR = MemoryBaseAddr;    
 8002132:	6101      	str	r1, [r0, #16]
 8002134:	4770      	bx	lr
  }  
  else
  {
    /* Write to DMAy Streamx M0AR */
    DMAy_Streamx->M0AR = MemoryBaseAddr;  
 8002136:	60c1      	str	r1, [r0, #12]
 8002138:	4770      	bx	lr

0800213a <DMA_GetCurrentMemoryTarget>:
  
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Get the current memory target */
  if ((DMAy_Streamx->CR & DMA_SxCR_CT) != 0)
 800213a:	6800      	ldr	r0, [r0, #0]
  {
    /* Current memory buffer used is Memory 0 */
    tmp = 0;    
  }
  return tmp;
}
 800213c:	f3c0 40c0 	ubfx	r0, r0, #19, #1
 8002140:	4770      	bx	lr

08002142 <DMA_GetCmdStatus>:
  FunctionalState state = DISABLE;

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 8002142:	6800      	ldr	r0, [r0, #0]
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
  }
  return state;
}
 8002144:	f000 0001 	and.w	r0, r0, #1
 8002148:	4770      	bx	lr

0800214a <DMA_GetFIFOStatus>:
 
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  
  /* Get the FIFO level bits */
  tmpreg = (uint32_t)((DMAy_Streamx->FCR & DMA_SxFCR_FS));
 800214a:	6940      	ldr	r0, [r0, #20]
  
  return tmpreg;
}
 800214c:	f000 0038 	and.w	r0, r0, #56	; 0x38
 8002150:	4770      	bx	lr

08002152 <DMA_GetFlagStatus>:

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8002152:	4a0a      	ldr	r2, [pc, #40]	; (800217c <DMA_GetFlagStatus+0x2a>)
 8002154:	4b0a      	ldr	r3, [pc, #40]	; (8002180 <DMA_GetFlagStatus+0x2e>)
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8002156:	b510      	push	{r4, lr}

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8002158:	4c0a      	ldr	r4, [pc, #40]	; (8002184 <DMA_GetFlagStatus+0x32>)
 800215a:	42a0      	cmp	r0, r4
 800215c:	bf88      	it	hi
 800215e:	4613      	movhi	r3, r2
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8002160:	008a      	lsls	r2, r1, #2
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 8002162:	bf4c      	ite	mi
 8002164:	685b      	ldrmi	r3, [r3, #4]
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 8002166:	681b      	ldrpl	r3, [r3, #0]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8002168:	f021 21f0 	bic.w	r1, r1, #4026593280	; 0xf000f000
 800216c:	f021 1182 	bic.w	r1, r1, #8519810	; 0x820082

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 8002170:	4219      	tst	r1, r3
    bitstatus = RESET;
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
}
 8002172:	bf0c      	ite	eq
 8002174:	2000      	moveq	r0, #0
 8002176:	2001      	movne	r0, #1
 8002178:	bd10      	pop	{r4, pc}
 800217a:	bf00      	nop
 800217c:	40026400 	.word	0x40026400
 8002180:	40026000 	.word	0x40026000
 8002184:	4002640f 	.word	0x4002640f

08002188 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8002188:	b510      	push	{r4, lr}

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800218a:	4b08      	ldr	r3, [pc, #32]	; (80021ac <DMA_ClearFlag+0x24>)
 800218c:	4a08      	ldr	r2, [pc, #32]	; (80021b0 <DMA_ClearFlag+0x28>)
 800218e:	4c09      	ldr	r4, [pc, #36]	; (80021b4 <DMA_ClearFlag+0x2c>)
 8002190:	42a0      	cmp	r0, r4
 8002192:	bf88      	it	hi
 8002194:	4613      	movhi	r3, r2
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8002196:	f011 5f00 	tst.w	r1, #536870912	; 0x20000000
 800219a:	f021 21f0 	bic.w	r1, r1, #4026593280	; 0xf000f000
 800219e:	f021 1182 	bic.w	r1, r1, #8519810	; 0x820082
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80021a2:	bf14      	ite	ne
 80021a4:	60d9      	strne	r1, [r3, #12]
  }
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80021a6:	6099      	streq	r1, [r3, #8]
 80021a8:	bd10      	pop	{r4, pc}
 80021aa:	bf00      	nop
 80021ac:	40026000 	.word	0x40026000
 80021b0:	40026400 	.word	0x40026400
 80021b4:	4002640f 	.word	0x4002640f

080021b8 <DMA_ITConfig>:
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 80021b8:	060b      	lsls	r3, r1, #24
 80021ba:	d507      	bpl.n	80021cc <DMA_ITConfig+0x14>
  {
    if (NewState != DISABLE)
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 80021bc:	6943      	ldr	r3, [r0, #20]
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
  {
    if (NewState != DISABLE)
 80021be:	b112      	cbz	r2, 80021c6 <DMA_ITConfig+0xe>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 80021c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021c4:	e001      	b.n	80021ca <DMA_ITConfig+0x12>
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 80021c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80021ca:	6143      	str	r3, [r0, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 80021cc:	2980      	cmp	r1, #128	; 0x80
 80021ce:	d009      	beq.n	80021e4 <DMA_ITConfig+0x2c>
 80021d0:	f001 011e 	and.w	r1, r1, #30
  {
    if (NewState != DISABLE)
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 80021d4:	6803      	ldr	r3, [r0, #0]
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
  {
    if (NewState != DISABLE)
 80021d6:	b112      	cbz	r2, 80021de <DMA_ITConfig+0x26>
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 80021d8:	4319      	orrs	r1, r3
 80021da:	6001      	str	r1, [r0, #0]
 80021dc:	4770      	bx	lr
    }
    else
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 80021de:	ea23 0101 	bic.w	r1, r3, r1
 80021e2:	6001      	str	r1, [r0, #0]
 80021e4:	4770      	bx	lr

080021e6 <DMA_GetITStatus>:
 
  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80021e6:	4b12      	ldr	r3, [pc, #72]	; (8002230 <DMA_GetITStatus+0x4a>)
 80021e8:	4a12      	ldr	r2, [pc, #72]	; (8002234 <DMA_GetITStatus+0x4e>)
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_IT (SET or RESET).
  */
ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 80021ea:	b510      	push	{r4, lr}
 
  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80021ec:	4c12      	ldr	r4, [pc, #72]	; (8002238 <DMA_GetITStatus+0x52>)
 80021ee:	42a0      	cmp	r0, r4
 80021f0:	bf8c      	ite	hi
 80021f2:	4614      	movhi	r4, r2
 80021f4:	461c      	movls	r4, r3
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
  }

  /* Check if the interrupt enable bit is in the CR or FCR register */
  if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
 80021f6:	f021 23f0 	bic.w	r3, r1, #4026593280	; 0xf000f000
 80021fa:	f023 13c3 	bic.w	r3, r3, #12779715	; 0xc300c3
 80021fe:	b12b      	cbz	r3, 800220c <DMA_GetITStatus+0x26>
  {
    /* Get the interrupt enable position mask in CR register */
    tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
    
    /* Check the enable bit in CR register */
    enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
 8002200:	6802      	ldr	r2, [r0, #0]

  /* Check if the interrupt enable bit is in the CR or FCR register */
  if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
  {
    /* Get the interrupt enable position mask in CR register */
    tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
 8002202:	f002 021e 	and.w	r2, r2, #30
    
    /* Check the enable bit in CR register */
    enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
 8002206:	ea02 22d1 	and.w	r2, r2, r1, lsr #11
 800220a:	e002      	b.n	8002212 <DMA_GetITStatus+0x2c>
  }
  else 
  {
    /* Check the enable bit in FCR register */
    enablestatus = (uint32_t)(DMAy_Streamx->FCR & DMA_IT_FE); 
 800220c:	6942      	ldr	r2, [r0, #20]
 800220e:	f002 0280 	and.w	r2, r2, #128	; 0x80
  }
 
  /* Check if the interrupt pending flag is in LISR or HISR */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 8002212:	0088      	lsls	r0, r1, #2
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR ;
 8002214:	bf4c      	ite	mi
 8002216:	6863      	ldrmi	r3, [r4, #4]
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR ;
 8002218:	6823      	ldrpl	r3, [r4, #0]
  } 

  /* mask all reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 800221a:	f021 21f0 	bic.w	r1, r1, #4026593280	; 0xf000f000
 800221e:	f021 1082 	bic.w	r0, r1, #8519810	; 0x820082

  /* Check the status of the specified DMA interrupt */
  if (((tmpreg & DMA_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8002222:	4018      	ands	r0, r3
 8002224:	d002      	beq.n	800222c <DMA_GetITStatus+0x46>
  {
    /* DMA_IT is set */
    bitstatus = SET;
 8002226:	1c10      	adds	r0, r2, #0
 8002228:	bf18      	it	ne
 800222a:	2001      	movne	r0, #1
    bitstatus = RESET;
  }

  /* Return the DMA_IT status */
  return  bitstatus;
}
 800222c:	bd10      	pop	{r4, pc}
 800222e:	bf00      	nop
 8002230:	40026000 	.word	0x40026000
 8002234:	40026400 	.word	0x40026400
 8002238:	4002640f 	.word	0x4002640f

0800223c <DMA_ClearITPendingBit>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 800223c:	b510      	push	{r4, lr}

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800223e:	4b08      	ldr	r3, [pc, #32]	; (8002260 <DMA_ClearITPendingBit+0x24>)
 8002240:	4a08      	ldr	r2, [pc, #32]	; (8002264 <DMA_ClearITPendingBit+0x28>)
 8002242:	4c09      	ldr	r4, [pc, #36]	; (8002268 <DMA_ClearITPendingBit+0x2c>)
 8002244:	42a0      	cmp	r0, r4
 8002246:	bf88      	it	hi
 8002248:	4613      	movhi	r3, r2
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 800224a:	f011 5f00 	tst.w	r1, #536870912	; 0x20000000
 800224e:	f021 21f0 	bic.w	r1, r1, #4026593280	; 0xf000f000
 8002252:	f021 1182 	bic.w	r1, r1, #8519810	; 0x820082
  {
    /* Set DMAy HIFCR register clear interrupt bits */
    DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 8002256:	bf14      	ite	ne
 8002258:	60d9      	strne	r1, [r3, #12]
  }
  else 
  {
    /* Set DMAy LIFCR register clear interrupt bits */
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 800225a:	6099      	streq	r1, [r3, #8]
 800225c:	bd10      	pop	{r4, pc}
 800225e:	bf00      	nop
 8002260:	40026000 	.word	0x40026000
 8002264:	40026400 	.word	0x40026400
 8002268:	4002640f 	.word	0x4002640f

0800226c <EXTI_DeInit>:
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
  EXTI->IMR = 0x00000000;
 800226c:	4b04      	ldr	r3, [pc, #16]	; (8002280 <EXTI_DeInit+0x14>)
 800226e:	2200      	movs	r2, #0
 8002270:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
 8002272:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000;
 8002274:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000;
 8002276:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x007FFFFF;
 8002278:	4a02      	ldr	r2, [pc, #8]	; (8002284 <EXTI_DeInit+0x18>)
 800227a:	615a      	str	r2, [r3, #20]
}
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	40013c00 	.word	0x40013c00
 8002284:	007fffff 	.word	0x007fffff

08002288 <EXTI_Init>:
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8002288:	7983      	ldrb	r3, [r0, #6]
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 800228a:	b510      	push	{r4, lr}
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 800228c:	2b00      	cmp	r3, #0
 800228e:	d029      	beq.n	80022e4 <EXTI_Init+0x5c>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8002290:	4b1a      	ldr	r3, [pc, #104]	; (80022fc <EXTI_Init+0x74>)
 8002292:	6801      	ldr	r1, [r0, #0]
 8002294:	681c      	ldr	r4, [r3, #0]
 8002296:	43ca      	mvns	r2, r1
 8002298:	4014      	ands	r4, r2
 800229a:	601c      	str	r4, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 800229c:	685c      	ldr	r4, [r3, #4]
 800229e:	4022      	ands	r2, r4
 80022a0:	605a      	str	r2, [r3, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 80022a2:	7902      	ldrb	r2, [r0, #4]
 80022a4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80022a8:	f502 329e 	add.w	r2, r2, #80896	; 0x13c00

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80022ac:	6814      	ldr	r4, [r2, #0]
 80022ae:	4321      	orrs	r1, r4
 80022b0:	6011      	str	r1, [r2, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 80022b2:	6802      	ldr	r2, [r0, #0]
 80022b4:	689c      	ldr	r4, [r3, #8]
 80022b6:	43d1      	mvns	r1, r2
 80022b8:	400c      	ands	r4, r1
 80022ba:	609c      	str	r4, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 80022bc:	68dc      	ldr	r4, [r3, #12]
 80022be:	4021      	ands	r1, r4
 80022c0:	60d9      	str	r1, [r3, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 80022c2:	7941      	ldrb	r1, [r0, #5]
 80022c4:	2910      	cmp	r1, #16
 80022c6:	d106      	bne.n	80022d6 <EXTI_Init+0x4e>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 80022c8:	6899      	ldr	r1, [r3, #8]
 80022ca:	4311      	orrs	r1, r2
 80022cc:	6099      	str	r1, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 80022ce:	68d9      	ldr	r1, [r3, #12]
 80022d0:	430a      	orrs	r2, r1
 80022d2:	60da      	str	r2, [r3, #12]
 80022d4:	bd10      	pop	{r4, pc}
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
      tmp += EXTI_InitStruct->EXTI_Trigger;
 80022d6:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
 80022da:	f503 339e 	add.w	r3, r3, #80896	; 0x13c00

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80022de:	6819      	ldr	r1, [r3, #0]
 80022e0:	430a      	orrs	r2, r1
 80022e2:	e008      	b.n	80022f6 <EXTI_Init+0x6e>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 80022e4:	7903      	ldrb	r3, [r0, #4]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 80022e6:	6801      	ldr	r1, [r0, #0]
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 80022e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80022ec:	f503 339e 	add.w	r3, r3, #80896	; 0x13c00

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	ea22 0201 	bic.w	r2, r2, r1
 80022f6:	601a      	str	r2, [r3, #0]
 80022f8:	bd10      	pop	{r4, pc}
 80022fa:	bf00      	nop
 80022fc:	40013c00 	.word	0x40013c00

08002300 <EXTI_StructInit>:
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
 8002300:	2300      	movs	r3, #0
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
 8002302:	220c      	movs	r2, #12
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
 8002304:	6003      	str	r3, [r0, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
 8002306:	7103      	strb	r3, [r0, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
 8002308:	7142      	strb	r2, [r0, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
 800230a:	7183      	strb	r3, [r0, #6]
}
 800230c:	4770      	bx	lr

0800230e <EXTI_GenerateSWInterrupt>:
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->SWIER |= EXTI_Line;
 800230e:	4b02      	ldr	r3, [pc, #8]	; (8002318 <EXTI_GenerateSWInterrupt+0xa>)
 8002310:	691a      	ldr	r2, [r3, #16]
 8002312:	4302      	orrs	r2, r0
 8002314:	611a      	str	r2, [r3, #16]
}
 8002316:	4770      	bx	lr
 8002318:	40013c00 	.word	0x40013c00

0800231c <EXTI_GetFlagStatus>:
{
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 800231c:	4b03      	ldr	r3, [pc, #12]	; (800232c <EXTI_GetFlagStatus+0x10>)
 800231e:	695b      	ldr	r3, [r3, #20]
  {
    bitstatus = SET;
 8002320:	4218      	tst	r0, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8002322:	bf0c      	ite	eq
 8002324:	2000      	moveq	r0, #0
 8002326:	2001      	movne	r0, #1
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	40013c00 	.word	0x40013c00

08002330 <EXTI_ClearFlag>:
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8002330:	4b01      	ldr	r3, [pc, #4]	; (8002338 <EXTI_ClearFlag+0x8>)
 8002332:	6158      	str	r0, [r3, #20]
}
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	40013c00 	.word	0x40013c00

0800233c <EXTI_GetITStatus>:
  ITStatus bitstatus = RESET;
  uint32_t enablestatus = 0;
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 800233c:	4b05      	ldr	r3, [pc, #20]	; (8002354 <EXTI_GetITStatus+0x18>)
 800233e:	681a      	ldr	r2, [r3, #0]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8002340:	695b      	ldr	r3, [r3, #20]
 8002342:	4003      	ands	r3, r0
 8002344:	d004      	beq.n	8002350 <EXTI_GetITStatus+0x14>
  {
    bitstatus = SET;
 8002346:	4210      	tst	r0, r2
 8002348:	bf0c      	ite	eq
 800234a:	2000      	moveq	r0, #0
 800234c:	2001      	movne	r0, #1
 800234e:	4770      	bx	lr
  }
  else
  {
    bitstatus = RESET;
 8002350:	4618      	mov	r0, r3
  }
  return bitstatus;
}
 8002352:	4770      	bx	lr
 8002354:	40013c00 	.word	0x40013c00

08002358 <EXTI_ClearITPendingBit>:
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8002358:	4b01      	ldr	r3, [pc, #4]	; (8002360 <EXTI_ClearITPendingBit+0x8>)
 800235a:	6158      	str	r0, [r3, #20]
}
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	40013c00 	.word	0x40013c00

08002364 <FLASH_SetLatency>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_LATENCY(FLASH_Latency));
  
  /* Perform Byte access to FLASH_ACR[8:0] to set the Latency value */
  *(__IO uint8_t *)ACR_BYTE0_ADDRESS = (uint8_t)FLASH_Latency;
 8002364:	4b01      	ldr	r3, [pc, #4]	; (800236c <FLASH_SetLatency+0x8>)
 8002366:	b2c0      	uxtb	r0, r0
 8002368:	7018      	strb	r0, [r3, #0]
}
 800236a:	4770      	bx	lr
 800236c:	40023c00 	.word	0x40023c00

08002370 <FLASH_PrefetchBufferCmd>:
  * @param  NewState: new state of the Prefetch Buffer.
  *          This parameter  can be: ENABLE or DISABLE.
  * @retval None
  */
void FLASH_PrefetchBufferCmd(FunctionalState NewState)
{
 8002370:	4b04      	ldr	r3, [pc, #16]	; (8002384 <FLASH_PrefetchBufferCmd+0x14>)
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  /* Enable or disable the Prefetch Buffer */
  if(NewState != DISABLE)
  {
    FLASH->ACR |= FLASH_ACR_PRFTEN;
 8002372:	681a      	ldr	r2, [r3, #0]
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  /* Enable or disable the Prefetch Buffer */
  if(NewState != DISABLE)
 8002374:	b110      	cbz	r0, 800237c <FLASH_PrefetchBufferCmd+0xc>
  {
    FLASH->ACR |= FLASH_ACR_PRFTEN;
 8002376:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800237a:	e001      	b.n	8002380 <FLASH_PrefetchBufferCmd+0x10>
  }
  else
  {
    FLASH->ACR &= (~FLASH_ACR_PRFTEN);
 800237c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002380:	601a      	str	r2, [r3, #0]
 8002382:	4770      	bx	lr
 8002384:	40023c00 	.word	0x40023c00

08002388 <FLASH_InstructionCacheCmd>:
  * @param  NewState: new state of the Instruction Cache.
  *          This parameter  can be: ENABLE or DISABLE.
  * @retval None
  */
void FLASH_InstructionCacheCmd(FunctionalState NewState)
{
 8002388:	4b04      	ldr	r3, [pc, #16]	; (800239c <FLASH_InstructionCacheCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if(NewState != DISABLE)
  {
    FLASH->ACR |= FLASH_ACR_ICEN;
 800238a:	681a      	ldr	r2, [r3, #0]
void FLASH_InstructionCacheCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if(NewState != DISABLE)
 800238c:	b110      	cbz	r0, 8002394 <FLASH_InstructionCacheCmd+0xc>
  {
    FLASH->ACR |= FLASH_ACR_ICEN;
 800238e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002392:	e001      	b.n	8002398 <FLASH_InstructionCacheCmd+0x10>
  }
  else
  {
    FLASH->ACR &= (~FLASH_ACR_ICEN);
 8002394:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002398:	601a      	str	r2, [r3, #0]
 800239a:	4770      	bx	lr
 800239c:	40023c00 	.word	0x40023c00

080023a0 <FLASH_DataCacheCmd>:
  * @param  NewState: new state of the Data Cache.
  *          This parameter  can be: ENABLE or DISABLE.
  * @retval None
  */
void FLASH_DataCacheCmd(FunctionalState NewState)
{
 80023a0:	4b04      	ldr	r3, [pc, #16]	; (80023b4 <FLASH_DataCacheCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if(NewState != DISABLE)
  {
    FLASH->ACR |= FLASH_ACR_DCEN;
 80023a2:	681a      	ldr	r2, [r3, #0]
void FLASH_DataCacheCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if(NewState != DISABLE)
 80023a4:	b110      	cbz	r0, 80023ac <FLASH_DataCacheCmd+0xc>
  {
    FLASH->ACR |= FLASH_ACR_DCEN;
 80023a6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80023aa:	e001      	b.n	80023b0 <FLASH_DataCacheCmd+0x10>
  }
  else
  {
    FLASH->ACR &= (~FLASH_ACR_DCEN);
 80023ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023b0:	601a      	str	r2, [r3, #0]
 80023b2:	4770      	bx	lr
 80023b4:	40023c00 	.word	0x40023c00

080023b8 <FLASH_InstructionCacheReset>:
  * @param  None
  * @retval None
  */
void FLASH_InstructionCacheReset(void)
{
  FLASH->ACR |= FLASH_ACR_ICRST;
 80023b8:	4b02      	ldr	r3, [pc, #8]	; (80023c4 <FLASH_InstructionCacheReset+0xc>)
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023c0:	601a      	str	r2, [r3, #0]
}
 80023c2:	4770      	bx	lr
 80023c4:	40023c00 	.word	0x40023c00

080023c8 <FLASH_DataCacheReset>:
  * @param  None
  * @retval None
  */
void FLASH_DataCacheReset(void)
{
  FLASH->ACR |= FLASH_ACR_DCRST;
 80023c8:	4b02      	ldr	r3, [pc, #8]	; (80023d4 <FLASH_DataCacheReset+0xc>)
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80023d0:	601a      	str	r2, [r3, #0]
}
 80023d2:	4770      	bx	lr
 80023d4:	40023c00 	.word	0x40023c00

080023d8 <FLASH_Unlock>:
  * @param  None
  * @retval None
  */
void FLASH_Unlock(void)
{
  if((FLASH->CR & FLASH_CR_LOCK) != RESET)
 80023d8:	4b04      	ldr	r3, [pc, #16]	; (80023ec <FLASH_Unlock+0x14>)
 80023da:	691a      	ldr	r2, [r3, #16]
 80023dc:	2a00      	cmp	r2, #0
 80023de:	da04      	bge.n	80023ea <FLASH_Unlock+0x12>
  {
    /* Authorize the FLASH Registers access */
    FLASH->KEYR = FLASH_KEY1;
 80023e0:	4a03      	ldr	r2, [pc, #12]	; (80023f0 <FLASH_Unlock+0x18>)
 80023e2:	605a      	str	r2, [r3, #4]
    FLASH->KEYR = FLASH_KEY2;
 80023e4:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 80023e8:	605a      	str	r2, [r3, #4]
 80023ea:	4770      	bx	lr
 80023ec:	40023c00 	.word	0x40023c00
 80023f0:	45670123 	.word	0x45670123

080023f4 <FLASH_Lock>:
  * @retval None
  */
void FLASH_Lock(void)
{
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80023f4:	4b02      	ldr	r3, [pc, #8]	; (8002400 <FLASH_Lock+0xc>)
 80023f6:	691a      	ldr	r2, [r3, #16]
 80023f8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80023fc:	611a      	str	r2, [r3, #16]
}
 80023fe:	4770      	bx	lr
 8002400:	40023c00 	.word	0x40023c00

08002404 <FLASH_OB_Unlock>:
  * @param  None
  * @retval None
  */
void FLASH_OB_Unlock(void)
{
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 8002404:	4b04      	ldr	r3, [pc, #16]	; (8002418 <FLASH_OB_Unlock+0x14>)
 8002406:	695a      	ldr	r2, [r3, #20]
 8002408:	07d2      	lsls	r2, r2, #31
 800240a:	d504      	bpl.n	8002416 <FLASH_OB_Unlock+0x12>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 800240c:	4a03      	ldr	r2, [pc, #12]	; (800241c <FLASH_OB_Unlock+0x18>)
 800240e:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 8002410:	f102 3244 	add.w	r2, r2, #1145324612	; 0x44444444
 8002414:	609a      	str	r2, [r3, #8]
 8002416:	4770      	bx	lr
 8002418:	40023c00 	.word	0x40023c00
 800241c:	08192a3b 	.word	0x08192a3b

08002420 <FLASH_OB_Lock>:
  * @retval None
  */
void FLASH_OB_Lock(void)
{
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8002420:	4b02      	ldr	r3, [pc, #8]	; (800242c <FLASH_OB_Lock+0xc>)
 8002422:	695a      	ldr	r2, [r3, #20]
 8002424:	f042 0201 	orr.w	r2, r2, #1
 8002428:	615a      	str	r2, [r3, #20]
}
 800242a:	4770      	bx	lr
 800242c:	40023c00 	.word	0x40023c00

08002430 <FLASH_OB_BORConfig>:
{
  /* Check the parameters */
  assert_param(IS_OB_BOR(OB_BOR));

  /* Set the BOR Level */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BOR_LEV);
 8002430:	4b04      	ldr	r3, [pc, #16]	; (8002444 <FLASH_OB_BORConfig+0x14>)
 8002432:	781a      	ldrb	r2, [r3, #0]
 8002434:	f002 02f3 	and.w	r2, r2, #243	; 0xf3
 8002438:	701a      	strb	r2, [r3, #0]
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= OB_BOR;
 800243a:	781a      	ldrb	r2, [r3, #0]
 800243c:	4302      	orrs	r2, r0
 800243e:	701a      	strb	r2, [r3, #0]

}
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	40023c14 	.word	0x40023c14

08002448 <FLASH_OB_GetUser>:
  *         and RST_STDBY(Bit2).
  */
uint8_t FLASH_OB_GetUser(void)
{
  /* Return the User Option Byte */
  return (uint8_t)(FLASH->OPTCR >> 5);
 8002448:	4b02      	ldr	r3, [pc, #8]	; (8002454 <FLASH_OB_GetUser+0xc>)
 800244a:	6958      	ldr	r0, [r3, #20]
}
 800244c:	f3c0 1047 	ubfx	r0, r0, #5, #8
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	40023c00 	.word	0x40023c00

08002458 <FLASH_OB_GetWRP>:
  * @retval The FLASH Write Protection  Option Bytes value
  */
uint16_t FLASH_OB_GetWRP(void)
{
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 8002458:	4b01      	ldr	r3, [pc, #4]	; (8002460 <FLASH_OB_GetWRP+0x8>)
 800245a:	8818      	ldrh	r0, [r3, #0]
}
 800245c:	b280      	uxth	r0, r0
 800245e:	4770      	bx	lr
 8002460:	40023c16 	.word	0x40023c16

08002464 <FLASH_OB_GetRDP>:
  */
FlagStatus FLASH_OB_GetRDP(void)
{
  FlagStatus readstatus = RESET;

  if ((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) != (uint8_t)OB_RDP_Level_0))
 8002464:	4b02      	ldr	r3, [pc, #8]	; (8002470 <FLASH_OB_GetRDP+0xc>)
 8002466:	7818      	ldrb	r0, [r3, #0]
  else
  {
    readstatus = RESET;
  }
  return readstatus;
}
 8002468:	38aa      	subs	r0, #170	; 0xaa
 800246a:	bf18      	it	ne
 800246c:	2001      	movne	r0, #1
 800246e:	4770      	bx	lr
 8002470:	40023c15 	.word	0x40023c15

08002474 <FLASH_OB_GetBOR>:
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V  
  */
uint8_t FLASH_OB_GetBOR(void)
{
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 8002474:	4b02      	ldr	r3, [pc, #8]	; (8002480 <FLASH_OB_GetBOR+0xc>)
 8002476:	7818      	ldrb	r0, [r3, #0]
}
 8002478:	f000 000c 	and.w	r0, r0, #12
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	40023c14 	.word	0x40023c14

08002484 <FLASH_ITConfig>:
  *            @arg FLASH_IT_ERR: FLASH Error Interrupt
  *            @arg FLASH_IT_EOP: FLASH end of operation Interrupt
  * @retval None 
  */
void FLASH_ITConfig(uint32_t FLASH_IT, FunctionalState NewState)
{
 8002484:	4b04      	ldr	r3, [pc, #16]	; (8002498 <FLASH_ITConfig+0x14>)
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if(NewState != DISABLE)
  {
    /* Enable the interrupt sources */
    FLASH->CR |= FLASH_IT;
 8002486:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_FLASH_IT(FLASH_IT)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if(NewState != DISABLE)
 8002488:	b109      	cbz	r1, 800248e <FLASH_ITConfig+0xa>
  {
    /* Enable the interrupt sources */
    FLASH->CR |= FLASH_IT;
 800248a:	4310      	orrs	r0, r2
 800248c:	e001      	b.n	8002492 <FLASH_ITConfig+0xe>
  }
  else
  {
    /* Disable the interrupt sources */
    FLASH->CR &= ~(uint32_t)FLASH_IT;
 800248e:	ea22 0000 	bic.w	r0, r2, r0
 8002492:	6118      	str	r0, [r3, #16]
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	40023c00 	.word	0x40023c00

0800249c <FLASH_GetFlagStatus>:
{
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_FLASH_GET_FLAG(FLASH_FLAG));

  if((FLASH->SR & FLASH_FLAG) != (uint32_t)RESET)
 800249c:	4b03      	ldr	r3, [pc, #12]	; (80024ac <FLASH_GetFlagStatus+0x10>)
 800249e:	68db      	ldr	r3, [r3, #12]
  {
    bitstatus = SET;
 80024a0:	4218      	tst	r0, r3
  {
    bitstatus = RESET;
  }
  /* Return the new state of FLASH_FLAG (SET or RESET) */
  return bitstatus; 
}
 80024a2:	bf0c      	ite	eq
 80024a4:	2000      	moveq	r0, #0
 80024a6:	2001      	movne	r0, #1
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	40023c00 	.word	0x40023c00

080024b0 <FLASH_ClearFlag>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG));
  
  /* Clear the flags */
  FLASH->SR = FLASH_FLAG;
 80024b0:	4b01      	ldr	r3, [pc, #4]	; (80024b8 <FLASH_ClearFlag+0x8>)
 80024b2:	60d8      	str	r0, [r3, #12]
}
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	40023c00 	.word	0x40023c00

080024bc <FLASH_GetStatus>:
  */
FLASH_Status FLASH_GetStatus(void)
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 80024bc:	4b0b      	ldr	r3, [pc, #44]	; (80024ec <FLASH_GetStatus+0x30>)
 80024be:	68da      	ldr	r2, [r3, #12]
 80024c0:	03d0      	lsls	r0, r2, #15
 80024c2:	d40d      	bmi.n	80024e0 <FLASH_GetStatus+0x24>
  {
    flashstatus = FLASH_BUSY;
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_WRPERR) != (uint32_t)0x00)
 80024c4:	68da      	ldr	r2, [r3, #12]
 80024c6:	06d1      	lsls	r1, r2, #27
 80024c8:	d40c      	bmi.n	80024e4 <FLASH_GetStatus+0x28>
    { 
      flashstatus = FLASH_ERROR_WRP;
    }
    else 
    {
      if((FLASH->SR & (uint32_t)0xEF) != (uint32_t)0x00)
 80024ca:	68da      	ldr	r2, [r3, #12]
 80024cc:	f012 0fef 	tst.w	r2, #239	; 0xef
 80024d0:	d10a      	bne.n	80024e8 <FLASH_GetStatus+0x2c>
      {
        flashstatus = FLASH_ERROR_PROGRAM; 
      }
      else
      {
        if((FLASH->SR & FLASH_FLAG_OPERR) != (uint32_t)0x00)
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	f013 0f02 	tst.w	r3, #2
        {
          flashstatus = FLASH_ERROR_OPERATION;
 80024d8:	bf0c      	ite	eq
 80024da:	2008      	moveq	r0, #8
 80024dc:	2007      	movne	r0, #7
 80024de:	4770      	bx	lr
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
  {
    flashstatus = FLASH_BUSY;
 80024e0:	2001      	movs	r0, #1
 80024e2:	4770      	bx	lr
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_WRPERR) != (uint32_t)0x00)
    { 
      flashstatus = FLASH_ERROR_WRP;
 80024e4:	2005      	movs	r0, #5
 80024e6:	4770      	bx	lr
    }
    else 
    {
      if((FLASH->SR & (uint32_t)0xEF) != (uint32_t)0x00)
      {
        flashstatus = FLASH_ERROR_PROGRAM; 
 80024e8:	2006      	movs	r0, #6
      }
    }
  }
  /* Return the FLASH Status */
  return flashstatus;
}
 80024ea:	4770      	bx	lr
 80024ec:	40023c00 	.word	0x40023c00

080024f0 <FLASH_WaitForLastOperation>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_WaitForLastOperation(void)
{ 
 80024f0:	b507      	push	{r0, r1, r2, lr}
  __IO FLASH_Status status = FLASH_COMPLETE;
 80024f2:	2308      	movs	r3, #8
 80024f4:	f88d 3007 	strb.w	r3, [sp, #7]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while(status == FLASH_BUSY)
  {
    status = FLASH_GetStatus();
 80024f8:	f7ff ffe0 	bl	80024bc <FLASH_GetStatus>
 80024fc:	f88d 0007 	strb.w	r0, [sp, #7]
  status = FLASH_GetStatus();

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while(status == FLASH_BUSY)
 8002500:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002504:	2b01      	cmp	r3, #1
 8002506:	d0f7      	beq.n	80024f8 <FLASH_WaitForLastOperation+0x8>
  {
    status = FLASH_GetStatus();
  }
  /* Return the operation status */
  return status;
 8002508:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 800250c:	bd0e      	pop	{r1, r2, r3, pc}

0800250e <FLASH_OB_Launch>:
FLASH_Status FLASH_OB_Launch(void)
{
  FLASH_Status status = FLASH_COMPLETE;

  /* Set the OPTSTRT bit in OPTCR register */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
 800250e:	4b03      	ldr	r3, [pc, #12]	; (800251c <FLASH_OB_Launch+0xe>)
 8002510:	781a      	ldrb	r2, [r3, #0]
 8002512:	f042 0202 	orr.w	r2, r2, #2
 8002516:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 8002518:	e7ea      	b.n	80024f0 <FLASH_WaitForLastOperation>
 800251a:	bf00      	nop
 800251c:	40023c14 	.word	0x40023c14

08002520 <FLASH_OB_UserConfig>:
  *            @arg OB_STDBY_NoRST: No reset generated when entering in STANDBY
  *            @arg OB_STDBY_RST: Reset generated when entering in STANDBY
  * @retval None
  */
void FLASH_OB_UserConfig(uint8_t OB_IWDG, uint8_t OB_STOP, uint8_t OB_STDBY)
{
 8002520:	b570      	push	{r4, r5, r6, lr}
 8002522:	4604      	mov	r4, r0
 8002524:	460d      	mov	r5, r1
 8002526:	4616      	mov	r6, r2
  assert_param(IS_OB_IWDG_SOURCE(OB_IWDG));
  assert_param(IS_OB_STOP_SOURCE(OB_STOP));
  assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 8002528:	f7ff ffe2 	bl	80024f0 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 800252c:	2808      	cmp	r0, #8
 800252e:	d107      	bne.n	8002540 <FLASH_OB_UserConfig+0x20>
  { 
    /* Mask OPTLOCK, OPTSTRT and BOR_LEV bits */
    optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0F); 
 8002530:	4b04      	ldr	r3, [pc, #16]	; (8002544 <FLASH_OB_UserConfig+0x24>)
 8002532:	781a      	ldrb	r2, [r3, #0]
 8002534:	f002 020f 	and.w	r2, r2, #15

    /* Update User Option Byte */
    *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS = OB_IWDG | (uint8_t)(OB_STDBY | (uint8_t)(OB_STOP | ((uint8_t)optiontmp))); 
 8002538:	4314      	orrs	r4, r2
 800253a:	4325      	orrs	r5, r4
 800253c:	432e      	orrs	r6, r5
 800253e:	701e      	strb	r6, [r3, #0]
 8002540:	bd70      	pop	{r4, r5, r6, pc}
 8002542:	bf00      	nop
 8002544:	40023c14 	.word	0x40023c14

08002548 <FLASH_OB_RDPConfig>:
  * !!!Warning!!! When enabling OB_RDP level 2 it's no more possible to go back to level 1 or 0
  *    
  * @retval None
  */
void FLASH_OB_RDPConfig(uint8_t OB_RDP)
{
 8002548:	b510      	push	{r4, lr}
 800254a:	4604      	mov	r4, r0
  FLASH_Status status = FLASH_COMPLETE;

  /* Check the parameters */
  assert_param(IS_OB_RDP(OB_RDP));

  status = FLASH_WaitForLastOperation();
 800254c:	f7ff ffd0 	bl	80024f0 <FLASH_WaitForLastOperation>

  if(status == FLASH_COMPLETE)
 8002550:	2808      	cmp	r0, #8
  {
    *(__IO uint8_t*)OPTCR_BYTE1_ADDRESS = OB_RDP;
 8002552:	bf04      	itt	eq
 8002554:	4b01      	ldreq	r3, [pc, #4]	; (800255c <FLASH_OB_RDPConfig+0x14>)
 8002556:	701c      	strbeq	r4, [r3, #0]
 8002558:	bd10      	pop	{r4, pc}
 800255a:	bf00      	nop
 800255c:	40023c15 	.word	0x40023c15

08002560 <FLASH_OB_WRPConfig>:
  * @param  Newstate: new state of the Write Protection.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None  
  */
void FLASH_OB_WRPConfig(uint32_t OB_WRP, FunctionalState NewState)
{ 
 8002560:	b538      	push	{r3, r4, r5, lr}
 8002562:	4604      	mov	r4, r0
 8002564:	460d      	mov	r5, r1
  
  /* Check the parameters */
  assert_param(IS_OB_WRP(OB_WRP));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  status = FLASH_WaitForLastOperation();
 8002566:	f7ff ffc3 	bl	80024f0 <FLASH_WaitForLastOperation>

  if(status == FLASH_COMPLETE)
 800256a:	2808      	cmp	r0, #8
 800256c:	d10a      	bne.n	8002584 <FLASH_OB_WRPConfig+0x24>
 800256e:	4b06      	ldr	r3, [pc, #24]	; (8002588 <FLASH_OB_WRPConfig+0x28>)
  { 
    if(NewState != DISABLE)
    {
      *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS &= (~OB_WRP);
 8002570:	881a      	ldrh	r2, [r3, #0]
    
  status = FLASH_WaitForLastOperation();

  if(status == FLASH_COMPLETE)
  { 
    if(NewState != DISABLE)
 8002572:	b125      	cbz	r5, 800257e <FLASH_OB_WRPConfig+0x1e>
    {
      *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS &= (~OB_WRP);
 8002574:	b292      	uxth	r2, r2
 8002576:	ea22 0404 	bic.w	r4, r2, r4
 800257a:	801c      	strh	r4, [r3, #0]
 800257c:	bd38      	pop	{r3, r4, r5, pc}
    }
    else
    {
      *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS |= (uint16_t)OB_WRP;
 800257e:	4314      	orrs	r4, r2
 8002580:	b2a4      	uxth	r4, r4
 8002582:	801c      	strh	r4, [r3, #0]
 8002584:	bd38      	pop	{r3, r4, r5, pc}
 8002586:	bf00      	nop
 8002588:	40023c16 	.word	0x40023c16

0800258c <FLASH_ProgramByte>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramByte(uint32_t Address, uint8_t Data)
{
 800258c:	b570      	push	{r4, r5, r6, lr}
 800258e:	4604      	mov	r4, r0
 8002590:	460e      	mov	r6, r1

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 8002592:	f7ff ffad 	bl	80024f0 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 8002596:	2808      	cmp	r0, #8
 8002598:	d111      	bne.n	80025be <FLASH_ProgramByte+0x32>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 800259a:	4d09      	ldr	r5, [pc, #36]	; (80025c0 <FLASH_ProgramByte+0x34>)
 800259c:	692b      	ldr	r3, [r5, #16]
 800259e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025a2:	612b      	str	r3, [r5, #16]
    FLASH->CR |= FLASH_PSIZE_BYTE;
 80025a4:	692b      	ldr	r3, [r5, #16]
 80025a6:	612b      	str	r3, [r5, #16]
    FLASH->CR |= FLASH_CR_PG;
 80025a8:	692b      	ldr	r3, [r5, #16]
 80025aa:	f043 0301 	orr.w	r3, r3, #1
 80025ae:	612b      	str	r3, [r5, #16]
  
    *(__IO uint8_t*)Address = Data;
 80025b0:	7026      	strb	r6, [r4, #0]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 80025b2:	f7ff ff9d 	bl	80024f0 <FLASH_WaitForLastOperation>

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 80025b6:	692b      	ldr	r3, [r5, #16]
 80025b8:	f023 0301 	bic.w	r3, r3, #1
 80025bc:	612b      	str	r3, [r5, #16]
  } 

  /* Return the Program Status */
  return status;
}
 80025be:	bd70      	pop	{r4, r5, r6, pc}
 80025c0:	40023c00 	.word	0x40023c00

080025c4 <FLASH_ProgramHalfWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data)
{
 80025c4:	b570      	push	{r4, r5, r6, lr}
 80025c6:	4604      	mov	r4, r0
 80025c8:	460e      	mov	r6, r1

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 80025ca:	f7ff ff91 	bl	80024f0 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 80025ce:	2808      	cmp	r0, #8
 80025d0:	d113      	bne.n	80025fa <FLASH_ProgramHalfWord+0x36>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 80025d2:	4d0a      	ldr	r5, [pc, #40]	; (80025fc <FLASH_ProgramHalfWord+0x38>)
 80025d4:	692b      	ldr	r3, [r5, #16]
 80025d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025da:	612b      	str	r3, [r5, #16]
    FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80025dc:	692b      	ldr	r3, [r5, #16]
 80025de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025e2:	612b      	str	r3, [r5, #16]
    FLASH->CR |= FLASH_CR_PG;
 80025e4:	692b      	ldr	r3, [r5, #16]
 80025e6:	f043 0301 	orr.w	r3, r3, #1
 80025ea:	612b      	str	r3, [r5, #16]
  
    *(__IO uint16_t*)Address = Data;
 80025ec:	8026      	strh	r6, [r4, #0]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 80025ee:	f7ff ff7f 	bl	80024f0 <FLASH_WaitForLastOperation>

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 80025f2:	692b      	ldr	r3, [r5, #16]
 80025f4:	f023 0301 	bic.w	r3, r3, #1
 80025f8:	612b      	str	r3, [r5, #16]
  } 
  /* Return the Program Status */
  return status;
}
 80025fa:	bd70      	pop	{r4, r5, r6, pc}
 80025fc:	40023c00 	.word	0x40023c00

08002600 <FLASH_ProgramWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
{
 8002600:	b570      	push	{r4, r5, r6, lr}
 8002602:	4604      	mov	r4, r0
 8002604:	460e      	mov	r6, r1

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 8002606:	f7ff ff73 	bl	80024f0 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 800260a:	2808      	cmp	r0, #8
 800260c:	d113      	bne.n	8002636 <FLASH_ProgramWord+0x36>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 800260e:	4d0a      	ldr	r5, [pc, #40]	; (8002638 <FLASH_ProgramWord+0x38>)
 8002610:	692b      	ldr	r3, [r5, #16]
 8002612:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002616:	612b      	str	r3, [r5, #16]
    FLASH->CR |= FLASH_PSIZE_WORD;
 8002618:	692b      	ldr	r3, [r5, #16]
 800261a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800261e:	612b      	str	r3, [r5, #16]
    FLASH->CR |= FLASH_CR_PG;
 8002620:	692b      	ldr	r3, [r5, #16]
 8002622:	f043 0301 	orr.w	r3, r3, #1
 8002626:	612b      	str	r3, [r5, #16]
  
    *(__IO uint32_t*)Address = Data;
 8002628:	6026      	str	r6, [r4, #0]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 800262a:	f7ff ff61 	bl	80024f0 <FLASH_WaitForLastOperation>

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 800262e:	692b      	ldr	r3, [r5, #16]
 8002630:	f023 0301 	bic.w	r3, r3, #1
 8002634:	612b      	str	r3, [r5, #16]
  } 
  /* Return the Program Status */
  return status;
}
 8002636:	bd70      	pop	{r4, r5, r6, pc}
 8002638:	40023c00 	.word	0x40023c00

0800263c <FLASH_ProgramDoubleWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramDoubleWord(uint32_t Address, uint64_t Data)
{
 800263c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800263e:	4606      	mov	r6, r0
 8002640:	4614      	mov	r4, r2
 8002642:	461d      	mov	r5, r3

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 8002644:	f7ff ff54 	bl	80024f0 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 8002648:	2808      	cmp	r0, #8
 800264a:	d114      	bne.n	8002676 <FLASH_ProgramDoubleWord+0x3a>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 800264c:	4f0a      	ldr	r7, [pc, #40]	; (8002678 <FLASH_ProgramDoubleWord+0x3c>)
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002654:	613b      	str	r3, [r7, #16]
    FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800265c:	613b      	str	r3, [r7, #16]
    FLASH->CR |= FLASH_CR_PG;
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	f043 0301 	orr.w	r3, r3, #1
 8002664:	613b      	str	r3, [r7, #16]
  
    *(__IO uint64_t*)Address = Data;
 8002666:	e9c6 4500 	strd	r4, r5, [r6]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 800266a:	f7ff ff41 	bl	80024f0 <FLASH_WaitForLastOperation>

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	f023 0301 	bic.w	r3, r3, #1
 8002674:	613b      	str	r3, [r7, #16]
  } 
  /* Return the Program Status */
  return status;
}
 8002676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002678:	40023c00 	.word	0x40023c00

0800267c <FLASH_EraseAllSectors>:
  *       
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_EraseAllSectors(uint8_t VoltageRange)
{
 800267c:	b510      	push	{r4, lr}
 800267e:	4604      	mov	r4, r0
  uint32_t tmp_psize = 0x0;
  FLASH_Status status = FLASH_COMPLETE;
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 8002680:	f7ff ff36 	bl	80024f0 <FLASH_WaitForLastOperation>
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == VoltageRange_1)
 8002684:	b144      	cbz	r4, 8002698 <FLASH_EraseAllSectors+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if(VoltageRange == VoltageRange_2)
 8002686:	2c01      	cmp	r4, #1
 8002688:	d008      	beq.n	800269c <FLASH_EraseAllSectors+0x20>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
  }
  else if(VoltageRange == VoltageRange_3)
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800268a:	2c02      	cmp	r4, #2
 800268c:	bf14      	ite	ne
 800268e:	f44f 7340 	movne.w	r3, #768	; 0x300
 8002692:	f44f 7300 	moveq.w	r3, #512	; 0x200
 8002696:	e003      	b.n	80026a0 <FLASH_EraseAllSectors+0x24>
  status = FLASH_WaitForLastOperation();
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == VoltageRange_1)
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8002698:	4623      	mov	r3, r4
 800269a:	e001      	b.n	80026a0 <FLASH_EraseAllSectors+0x24>
  }
  else if(VoltageRange == VoltageRange_2)
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800269c:	f44f 7380 	mov.w	r3, #256	; 0x100
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
  }  
  if(status == FLASH_COMPLETE)
 80026a0:	2808      	cmp	r0, #8
 80026a2:	d115      	bne.n	80026d0 <FLASH_EraseAllSectors+0x54>
  {
    /* if the previous operation is completed, proceed to erase all sectors */
     FLASH->CR &= CR_PSIZE_MASK;
 80026a4:	4c0b      	ldr	r4, [pc, #44]	; (80026d4 <FLASH_EraseAllSectors+0x58>)
 80026a6:	6922      	ldr	r2, [r4, #16]
 80026a8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80026ac:	6122      	str	r2, [r4, #16]
     FLASH->CR |= tmp_psize;
 80026ae:	6922      	ldr	r2, [r4, #16]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	6123      	str	r3, [r4, #16]
     FLASH->CR |= FLASH_CR_MER;
 80026b4:	6923      	ldr	r3, [r4, #16]
 80026b6:	f043 0304 	orr.w	r3, r3, #4
 80026ba:	6123      	str	r3, [r4, #16]
     FLASH->CR |= FLASH_CR_STRT;
 80026bc:	6923      	ldr	r3, [r4, #16]
 80026be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026c2:	6123      	str	r3, [r4, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 80026c4:	f7ff ff14 	bl	80024f0 <FLASH_WaitForLastOperation>

    /* if the erase operation is completed, disable the MER Bit */
    FLASH->CR &= (~FLASH_CR_MER);
 80026c8:	6923      	ldr	r3, [r4, #16]
 80026ca:	f023 0304 	bic.w	r3, r3, #4
 80026ce:	6123      	str	r3, [r4, #16]

  }   
  /* Return the Erase Status */
  return status;
}
 80026d0:	bd10      	pop	{r4, pc}
 80026d2:	bf00      	nop
 80026d4:	40023c00 	.word	0x40023c00

080026d8 <FLASH_EraseSector>:
  *       
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_EraseSector(uint32_t FLASH_Sector, uint8_t VoltageRange)
{
 80026d8:	b570      	push	{r4, r5, r6, lr}
 80026da:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(FLASH_Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == VoltageRange_1)
 80026dc:	b141      	cbz	r1, 80026f0 <FLASH_EraseSector+0x18>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if(VoltageRange == VoltageRange_2)
 80026de:	2901      	cmp	r1, #1
 80026e0:	d008      	beq.n	80026f4 <FLASH_EraseSector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
  }
  else if(VoltageRange == VoltageRange_3)
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80026e2:	2902      	cmp	r1, #2
 80026e4:	bf14      	ite	ne
 80026e6:	f44f 7640 	movne.w	r6, #768	; 0x300
 80026ea:	f44f 7600 	moveq.w	r6, #512	; 0x200
 80026ee:	e003      	b.n	80026f8 <FLASH_EraseSector+0x20>
  assert_param(IS_FLASH_SECTOR(FLASH_Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == VoltageRange_1)
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 80026f0:	460e      	mov	r6, r1
 80026f2:	e001      	b.n	80026f8 <FLASH_EraseSector+0x20>
  }
  else if(VoltageRange == VoltageRange_2)
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80026f4:	f44f 7680 	mov.w	r6, #256	; 0x100
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
  }
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 80026f8:	f7ff fefa 	bl	80024f0 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 80026fc:	2808      	cmp	r0, #8
 80026fe:	d11e      	bne.n	800273e <FLASH_EraseSector+0x66>
  { 
    /* if the previous operation is completed, proceed to erase the sector */
    FLASH->CR &= CR_PSIZE_MASK;
 8002700:	4d0f      	ldr	r5, [pc, #60]	; (8002740 <FLASH_EraseSector+0x68>)
 8002702:	692b      	ldr	r3, [r5, #16]
 8002704:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002708:	612b      	str	r3, [r5, #16]
    FLASH->CR |= tmp_psize;
 800270a:	692b      	ldr	r3, [r5, #16]
 800270c:	431e      	orrs	r6, r3
 800270e:	612e      	str	r6, [r5, #16]
    FLASH->CR &= SECTOR_MASK;
 8002710:	692b      	ldr	r3, [r5, #16]
 8002712:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002716:	612b      	str	r3, [r5, #16]
    FLASH->CR |= FLASH_CR_SER | FLASH_Sector;
 8002718:	692b      	ldr	r3, [r5, #16]
 800271a:	f043 0302 	orr.w	r3, r3, #2
 800271e:	431c      	orrs	r4, r3
 8002720:	612c      	str	r4, [r5, #16]
    FLASH->CR |= FLASH_CR_STRT;
 8002722:	692b      	ldr	r3, [r5, #16]
 8002724:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002728:	612b      	str	r3, [r5, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 800272a:	f7ff fee1 	bl	80024f0 <FLASH_WaitForLastOperation>
    
    /* if the erase operation is completed, disable the SER Bit */
    FLASH->CR &= (~FLASH_CR_SER);
 800272e:	692b      	ldr	r3, [r5, #16]
 8002730:	f023 0302 	bic.w	r3, r3, #2
 8002734:	612b      	str	r3, [r5, #16]
    FLASH->CR &= SECTOR_MASK; 
 8002736:	692b      	ldr	r3, [r5, #16]
 8002738:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800273c:	612b      	str	r3, [r5, #16]
  }
  /* Return the Erase Status */
  return status;
}
 800273e:	bd70      	pop	{r4, r5, r6, pc}
 8002740:	40023c00 	.word	0x40023c00

08002744 <FSMC_NORSRAMDeInit>:
  *            @arg FSMC_Bank1_NORSRAM3: FSMC Bank1 NOR/SRAM3 
  *            @arg FSMC_Bank1_NORSRAM4: FSMC Bank1 NOR/SRAM4 
  * @retval None
  */
void FSMC_NORSRAMDeInit(uint32_t FSMC_Bank)
{
 8002744:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
  /* Check the parameter */
  assert_param(IS_FSMC_NORSRAM_BANK(FSMC_Bank));
  
  /* FSMC_Bank1_NORSRAM1 */
  if(FSMC_Bank == FSMC_Bank1_NORSRAM1)
 8002748:	b918      	cbnz	r0, 8002752 <FSMC_NORSRAMDeInit+0xe>
  {
    FSMC_Bank1->BTCR[FSMC_Bank] = 0x000030DB;    
 800274a:	f243 02db 	movw	r2, #12507	; 0x30db
 800274e:	601a      	str	r2, [r3, #0]
 8002750:	e003      	b.n	800275a <FSMC_NORSRAMDeInit+0x16>
  }
  /* FSMC_Bank1_NORSRAM2,  FSMC_Bank1_NORSRAM3 or FSMC_Bank1_NORSRAM4 */
  else
  {   
    FSMC_Bank1->BTCR[FSMC_Bank] = 0x000030D2; 
 8002752:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002756:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
  }
  FSMC_Bank1->BTCR[FSMC_Bank + 1] = 0x0FFFFFFF;
 800275a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800275e:	1c41      	adds	r1, r0, #1
 8002760:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8002764:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  FSMC_Bank1E->BWTR[FSMC_Bank] = 0x0FFFFFFF;  
 8002768:	f502 7282 	add.w	r2, r2, #260	; 0x104
 800276c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
 8002770:	4770      	bx	lr

08002772 <FSMC_NORSRAMInit>:
  *         that contains the configuration information for the FSMC NOR/SRAM 
  *         specified Banks.                       
  * @retval None
  */
void FSMC_NORSRAMInit(FSMC_NORSRAMInitTypeDef* FSMC_NORSRAMInitStruct)
{ 
 8002772:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode)); 
  
  /* Bank1 NOR/SRAM control register configuration */ 
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
            FSMC_NORSRAMInitStruct->FSMC_MemoryType |
 8002774:	6884      	ldr	r4, [r0, #8]
  assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode)); 
  
  /* Bank1 NOR/SRAM control register configuration */ 
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
 8002776:	6845      	ldr	r5, [r0, #4]
            FSMC_NORSRAMInitStruct->FSMC_MemoryType |
 8002778:	68c3      	ldr	r3, [r0, #12]
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
            FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
 800277a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision));
  assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode)); 
  
  /* Bank1 NOR/SRAM control register configuration */ 
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
 800277c:	6802      	ldr	r2, [r0, #0]
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
 800277e:	4325      	orrs	r5, r4
            FSMC_NORSRAMInitStruct->FSMC_MemoryType |
 8002780:	431d      	orrs	r5, r3
            FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
 8002782:	6903      	ldr	r3, [r0, #16]
 8002784:	431d      	orrs	r5, r3
            FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
 8002786:	6943      	ldr	r3, [r0, #20]
 8002788:	431d      	orrs	r5, r3
            FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
 800278a:	6983      	ldr	r3, [r0, #24]
 800278c:	431d      	orrs	r5, r3
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
 800278e:	69c3      	ldr	r3, [r0, #28]
 8002790:	431d      	orrs	r5, r3
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
 8002792:	6a03      	ldr	r3, [r0, #32]
 8002794:	431d      	orrs	r5, r3
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
 8002796:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002798:	431d      	orrs	r5, r3
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
 800279a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800279c:	431d      	orrs	r5, r3
            FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
            FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
 800279e:	6b03      	ldr	r3, [r0, #48]	; 0x30
            FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
 80027a0:	430d      	orrs	r5, r1
            FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
 80027a2:	431d      	orrs	r5, r3
  assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision));
  assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode)); 
  
  /* Bank1 NOR/SRAM control register configuration */ 
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
 80027a4:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
            FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
            FSMC_NORSRAMInitStruct->FSMC_WriteBurst;
  if(FSMC_NORSRAMInitStruct->FSMC_MemoryType == FSMC_MemoryType_NOR)
 80027a8:	2c08      	cmp	r4, #8
  assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision));
  assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode)); 
  
  /* Bank1 NOR/SRAM control register configuration */ 
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
 80027aa:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
            FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
            FSMC_NORSRAMInitStruct->FSMC_WriteBurst;
  if(FSMC_NORSRAMInitStruct->FSMC_MemoryType == FSMC_MemoryType_NOR)
 80027ae:	d105      	bne.n	80027bc <FSMC_NORSRAMInit+0x4a>
  {
    FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] |= (uint32_t)BCR_FACCEN_SET;
 80027b0:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 80027b4:	f044 0440 	orr.w	r4, r4, #64	; 0x40
 80027b8:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
  }
  /* Bank1 NOR/SRAM timing register configuration */
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
 80027bc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80027be:	699e      	ldr	r6, [r3, #24]
 80027c0:	681d      	ldr	r5, [r3, #0]
 80027c2:	4335      	orrs	r5, r6
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
 80027c4:	685e      	ldr	r6, [r3, #4]
 80027c6:	ea45 1506 	orr.w	r5, r5, r6, lsl #4
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
 80027ca:	689e      	ldr	r6, [r3, #8]
 80027cc:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration << 16) |
 80027d0:	68de      	ldr	r6, [r3, #12]
 80027d2:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision << 20) |
 80027d6:	691e      	ldr	r6, [r3, #16]
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
 80027d8:	695b      	ldr	r3, [r3, #20]
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration << 16) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision << 20) |
 80027da:	ea45 5506 	orr.w	r5, r5, r6, lsl #20
  if(FSMC_NORSRAMInitStruct->FSMC_MemoryType == FSMC_MemoryType_NOR)
  {
    FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] |= (uint32_t)BCR_FACCEN_SET;
  }
  /* Bank1 NOR/SRAM timing register configuration */
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
 80027de:	1c54      	adds	r4, r2, #1
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration << 16) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision << 20) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
 80027e0:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
  if(FSMC_NORSRAMInitStruct->FSMC_MemoryType == FSMC_MemoryType_NOR)
  {
    FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] |= (uint32_t)BCR_FACCEN_SET;
  }
  /* Bank1 NOR/SRAM timing register configuration */
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
 80027e4:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
             FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode;
            
    
  /* Bank1 NOR/SRAM timing register for write configuration, if extended mode is used */
  if(FSMC_NORSRAMInitStruct->FSMC_ExtendedMode == FSMC_ExtendedMode_Enable)
 80027e8:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
  if(FSMC_NORSRAMInitStruct->FSMC_MemoryType == FSMC_MemoryType_NOR)
  {
    FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] |= (uint32_t)BCR_FACCEN_SET;
  }
  /* Bank1 NOR/SRAM timing register configuration */
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
 80027ec:	f843 5024 	str.w	r5, [r3, r4, lsl #2]
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
             FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode;
            
    
  /* Bank1 NOR/SRAM timing register for write configuration, if extended mode is used */
  if(FSMC_NORSRAMInitStruct->FSMC_ExtendedMode == FSMC_ExtendedMode_Enable)
 80027f0:	d110      	bne.n	8002814 <FSMC_NORSRAMInit+0xa2>
    assert_param(IS_FSMC_DATASETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime));
    assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision));
    assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency));
    assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode));
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
              (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
 80027f2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80027f4:	6998      	ldr	r0, [r3, #24]
 80027f6:	6819      	ldr	r1, [r3, #0]
 80027f8:	4301      	orrs	r1, r0
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
 80027fa:	6858      	ldr	r0, [r3, #4]
 80027fc:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime << 8) |
 8002800:	6898      	ldr	r0, [r3, #8]
 8002802:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision << 20) |
 8002806:	6918      	ldr	r0, [r3, #16]
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency << 24) |
 8002808:	695b      	ldr	r3, [r3, #20]
    assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode));
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
              (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime << 8) |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision << 20) |
 800280a:	ea41 5100 	orr.w	r1, r1, r0, lsl #20
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency << 24) |
 800280e:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
 8002812:	e001      	b.n	8002818 <FSMC_NORSRAMInit+0xa6>
               FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode;
  }
  else
  {
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 0x0FFFFFFF;
 8002814:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8002818:	4b01      	ldr	r3, [pc, #4]	; (8002820 <FSMC_NORSRAMInit+0xae>)
 800281a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800281e:	bd70      	pop	{r4, r5, r6, pc}
 8002820:	a0000104 	.word	0xa0000104

08002824 <FSMC_NORSRAMStructInit>:
  */
void FSMC_NORSRAMStructInit(FSMC_NORSRAMInitTypeDef* FSMC_NORSRAMInitStruct)
{  
  /* Reset NOR/SRAM Init structure parameters values */
  FSMC_NORSRAMInitStruct->FSMC_Bank = FSMC_Bank1_NORSRAM1;
  FSMC_NORSRAMInitStruct->FSMC_DataAddressMux = FSMC_DataAddressMux_Enable;
 8002824:	2202      	movs	r2, #2
 8002826:	6042      	str	r2, [r0, #4]
  FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode = FSMC_BurstAccessMode_Disable;
  FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait = FSMC_AsynchronousWait_Disable;
  FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity = FSMC_WaitSignalPolarity_Low;
  FSMC_NORSRAMInitStruct->FSMC_WrapMode = FSMC_WrapMode_Disable;
  FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
  FSMC_NORSRAMInitStruct->FSMC_WriteOperation = FSMC_WriteOperation_Enable;
 8002828:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800282c:	6242      	str	r2, [r0, #36]	; 0x24
  FSMC_NORSRAMInitStruct->FSMC_WaitSignal = FSMC_WaitSignal_Enable;
  FSMC_NORSRAMInitStruct->FSMC_ExtendedMode = FSMC_ExtendedMode_Disable;
  FSMC_NORSRAMInitStruct->FSMC_WriteBurst = FSMC_WriteBurst_Disable;
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime = 0xF;
 800282e:	6b41      	ldr	r1, [r0, #52]	; 0x34
  FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait = FSMC_AsynchronousWait_Disable;
  FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity = FSMC_WaitSignalPolarity_Low;
  FSMC_NORSRAMInitStruct->FSMC_WrapMode = FSMC_WrapMode_Disable;
  FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
  FSMC_NORSRAMInitStruct->FSMC_WriteOperation = FSMC_WriteOperation_Enable;
  FSMC_NORSRAMInitStruct->FSMC_WaitSignal = FSMC_WaitSignal_Enable;
 8002830:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  * @param  FSMC_NORSRAMInitStruct: pointer to a FSMC_NORSRAMInitTypeDef structure 
  *         which will be initialized.
  * @retval None
  */
void FSMC_NORSRAMStructInit(FSMC_NORSRAMInitTypeDef* FSMC_NORSRAMInitStruct)
{  
 8002834:	b510      	push	{r4, lr}
  FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait = FSMC_AsynchronousWait_Disable;
  FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity = FSMC_WaitSignalPolarity_Low;
  FSMC_NORSRAMInitStruct->FSMC_WrapMode = FSMC_WrapMode_Disable;
  FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
  FSMC_NORSRAMInitStruct->FSMC_WriteOperation = FSMC_WriteOperation_Enable;
  FSMC_NORSRAMInitStruct->FSMC_WaitSignal = FSMC_WaitSignal_Enable;
 8002836:	6282      	str	r2, [r0, #40]	; 0x28
  * @retval None
  */
void FSMC_NORSRAMStructInit(FSMC_NORSRAMInitTypeDef* FSMC_NORSRAMInitStruct)
{  
  /* Reset NOR/SRAM Init structure parameters values */
  FSMC_NORSRAMInitStruct->FSMC_Bank = FSMC_Bank1_NORSRAM1;
 8002838:	2300      	movs	r3, #0
  FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
  FSMC_NORSRAMInitStruct->FSMC_WriteOperation = FSMC_WriteOperation_Enable;
  FSMC_NORSRAMInitStruct->FSMC_WaitSignal = FSMC_WaitSignal_Enable;
  FSMC_NORSRAMInitStruct->FSMC_ExtendedMode = FSMC_ExtendedMode_Disable;
  FSMC_NORSRAMInitStruct->FSMC_WriteBurst = FSMC_WriteBurst_Disable;
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime = 0xF;
 800283a:	220f      	movs	r2, #15
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime = 0xF;
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime = 0xFF;
 800283c:	24ff      	movs	r4, #255	; 0xff
  * @retval None
  */
void FSMC_NORSRAMStructInit(FSMC_NORSRAMInitTypeDef* FSMC_NORSRAMInitStruct)
{  
  /* Reset NOR/SRAM Init structure parameters values */
  FSMC_NORSRAMInitStruct->FSMC_Bank = FSMC_Bank1_NORSRAM1;
 800283e:	6003      	str	r3, [r0, #0]
  FSMC_NORSRAMInitStruct->FSMC_DataAddressMux = FSMC_DataAddressMux_Enable;
  FSMC_NORSRAMInitStruct->FSMC_MemoryType = FSMC_MemoryType_SRAM;
 8002840:	6083      	str	r3, [r0, #8]
  FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_8b;
 8002842:	60c3      	str	r3, [r0, #12]
  FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode = FSMC_BurstAccessMode_Disable;
 8002844:	6103      	str	r3, [r0, #16]
  FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait = FSMC_AsynchronousWait_Disable;
 8002846:	6143      	str	r3, [r0, #20]
  FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity = FSMC_WaitSignalPolarity_Low;
 8002848:	6183      	str	r3, [r0, #24]
  FSMC_NORSRAMInitStruct->FSMC_WrapMode = FSMC_WrapMode_Disable;
 800284a:	61c3      	str	r3, [r0, #28]
  FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
 800284c:	6203      	str	r3, [r0, #32]
  FSMC_NORSRAMInitStruct->FSMC_WriteOperation = FSMC_WriteOperation_Enable;
  FSMC_NORSRAMInitStruct->FSMC_WaitSignal = FSMC_WaitSignal_Enable;
  FSMC_NORSRAMInitStruct->FSMC_ExtendedMode = FSMC_ExtendedMode_Disable;
 800284e:	62c3      	str	r3, [r0, #44]	; 0x2c
  FSMC_NORSRAMInitStruct->FSMC_WriteBurst = FSMC_WriteBurst_Disable;
 8002850:	6303      	str	r3, [r0, #48]	; 0x30
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime = 0xF;
 8002852:	600a      	str	r2, [r1, #0]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime = 0xF;
 8002854:	604a      	str	r2, [r1, #4]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime = 0xFF;
 8002856:	608c      	str	r4, [r1, #8]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration = 0xF;
 8002858:	60ca      	str	r2, [r1, #12]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision = 0xF;
 800285a:	610a      	str	r2, [r1, #16]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency = 0xF;
 800285c:	614a      	str	r2, [r1, #20]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode = FSMC_AccessMode_A; 
 800285e:	618b      	str	r3, [r1, #24]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime = 0xF;
 8002860:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8002862:	600a      	str	r2, [r1, #0]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime = 0xF;
 8002864:	604a      	str	r2, [r1, #4]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime = 0xFF;
 8002866:	608c      	str	r4, [r1, #8]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_BusTurnAroundDuration = 0xF;
 8002868:	60ca      	str	r2, [r1, #12]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision = 0xF;
 800286a:	610a      	str	r2, [r1, #16]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency = 0xF;
 800286c:	614a      	str	r2, [r1, #20]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode = FSMC_AccessMode_A;
 800286e:	618b      	str	r3, [r1, #24]
}
 8002870:	bd10      	pop	{r4, pc}

08002872 <FSMC_NORSRAMCmd>:
  *            @arg FSMC_Bank1_NORSRAM4: FSMC Bank1 NOR/SRAM4 
  * @param  NewState: new state of the FSMC_Bank. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FSMC_NORSRAMCmd(uint32_t FSMC_Bank, FunctionalState NewState)
{
 8002872:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
  assert_param(IS_FSMC_NORSRAM_BANK(FSMC_Bank));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002876:	b121      	cbz	r1, 8002882 <FSMC_NORSRAMCmd+0x10>
  {
    /* Enable the selected NOR/SRAM Bank by setting the PBKEN bit in the BCRx register */
    FSMC_Bank1->BTCR[FSMC_Bank] |= BCR_MBKEN_SET;
 8002878:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 800287c:	f042 0201 	orr.w	r2, r2, #1
 8002880:	e003      	b.n	800288a <FSMC_NORSRAMCmd+0x18>
  }
  else
  {
    /* Disable the selected NOR/SRAM Bank by clearing the PBKEN bit in the BCRx register */
    FSMC_Bank1->BTCR[FSMC_Bank] &= BCR_MBKEN_RESET;
 8002882:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
 8002886:	4a02      	ldr	r2, [pc, #8]	; (8002890 <FSMC_NORSRAMCmd+0x1e>)
 8002888:	400a      	ands	r2, r1
 800288a:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
 800288e:	4770      	bx	lr
 8002890:	000ffffe 	.word	0x000ffffe

08002894 <FSMC_NANDDeInit>:
void FSMC_NANDDeInit(uint32_t FSMC_Bank)
{
  /* Check the parameter */
  assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
  
  if(FSMC_Bank == FSMC_Bank2_NAND)
 8002894:	2810      	cmp	r0, #16
  {
    /* Set the FSMC_Bank2 registers to their reset values */
    FSMC_Bank2->PCR2 = 0x00000018;
 8002896:	bf0c      	ite	eq
 8002898:	4b06      	ldreq	r3, [pc, #24]	; (80028b4 <FSMC_NANDDeInit+0x20>)
  }
  /* FSMC_Bank3_NAND */  
  else
  {
    /* Set the FSMC_Bank3 registers to their reset values */
    FSMC_Bank3->PCR3 = 0x00000018;
 800289a:	4b07      	ldrne	r3, [pc, #28]	; (80028b8 <FSMC_NANDDeInit+0x24>)
 800289c:	f04f 0240 	mov.w	r2, #64	; 0x40
 80028a0:	f04f 0118 	mov.w	r1, #24
 80028a4:	6019      	str	r1, [r3, #0]
    FSMC_Bank3->SR3 = 0x00000040;
 80028a6:	605a      	str	r2, [r3, #4]
    FSMC_Bank3->PMEM3 = 0xFCFCFCFC;
 80028a8:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 80028ac:	609a      	str	r2, [r3, #8]
    FSMC_Bank3->PATT3 = 0xFCFCFCFC; 
 80028ae:	60da      	str	r2, [r3, #12]
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	a0000060 	.word	0xa0000060
 80028b8:	a0000080 	.word	0xa0000080

080028bc <FSMC_NANDInit>:
  * @param  FSMC_NANDInitStruct : pointer to a FSMC_NANDInitTypeDef structure that
  *         contains the configuration information for the FSMC NAND specified Banks.                       
  * @retval None
  */
void FSMC_NANDInit(FSMC_NANDInitTypeDef* FSMC_NANDInitStruct)
{
 80028bc:	b530      	push	{r4, r5, lr}
  assert_param(IS_FSMC_HOLD_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
 80028be:	6883      	ldr	r3, [r0, #8]
 80028c0:	6844      	ldr	r4, [r0, #4]
 80028c2:	431c      	orrs	r4, r3
            FSMC_NANDInitStruct->FSMC_MemoryDataWidth |
            FSMC_NANDInitStruct->FSMC_ECC |
 80028c4:	68c3      	ldr	r3, [r0, #12]
  assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
            FSMC_NANDInitStruct->FSMC_MemoryDataWidth |
 80028c6:	f044 0408 	orr.w	r4, r4, #8
            FSMC_NANDInitStruct->FSMC_ECC |
 80028ca:	431c      	orrs	r4, r3
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
 80028cc:	6903      	ldr	r3, [r0, #16]
 80028ce:	431c      	orrs	r4, r3
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
 80028d0:	6943      	ldr	r3, [r0, #20]
 80028d2:	ea44 2443 	orr.w	r4, r4, r3, lsl #9
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
 80028d6:	6983      	ldr	r3, [r0, #24]
  assert_param(IS_FSMC_WAIT_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
 80028d8:	ea44 3443 	orr.w	r4, r4, r3, lsl #13
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FSMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 80028dc:	69c3      	ldr	r3, [r0, #28]
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 80028de:	6899      	ldr	r1, [r3, #8]
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FSMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 80028e0:	685a      	ldr	r2, [r3, #4]
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 80028e2:	0409      	lsls	r1, r1, #16
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FSMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 80028e4:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 80028e8:	681a      	ldr	r2, [r3, #0]
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
 80028ea:	68db      	ldr	r3, [r3, #12]
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FSMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 80028ec:	4311      	orrs	r1, r2
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FSMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 80028ee:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FSMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 80028f2:	6a03      	ldr	r3, [r0, #32]
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 80028f4:	689a      	ldr	r2, [r3, #8]
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FSMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 80028f6:	685d      	ldr	r5, [r3, #4]
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 80028f8:	0412      	lsls	r2, r2, #16
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FSMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 80028fa:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 80028fe:	681d      	ldr	r5, [r3, #0]
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);
 8002900:	68db      	ldr	r3, [r3, #12]
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FSMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8002902:	432a      	orrs	r2, r5
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FSMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 8002904:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);
  
  if(FSMC_NANDInitStruct->FSMC_Bank == FSMC_Bank2_NAND)
 8002908:	6803      	ldr	r3, [r0, #0]
 800290a:	2b10      	cmp	r3, #16
  {
    /* FSMC_Bank2_NAND registers configuration */
    FSMC_Bank2->PCR2 = tmppcr;
 800290c:	bf0c      	ite	eq
 800290e:	4b03      	ldreq	r3, [pc, #12]	; (800291c <FSMC_NANDInit+0x60>)
    FSMC_Bank2->PATT2 = tmppatt;
  }
  else
  {
    /* FSMC_Bank3_NAND registers configuration */
    FSMC_Bank3->PCR3 = tmppcr;
 8002910:	4b03      	ldrne	r3, [pc, #12]	; (8002920 <FSMC_NANDInit+0x64>)
 8002912:	601c      	str	r4, [r3, #0]
    FSMC_Bank3->PMEM3 = tmppmem;
 8002914:	6099      	str	r1, [r3, #8]
    FSMC_Bank3->PATT3 = tmppatt;
 8002916:	60da      	str	r2, [r3, #12]
 8002918:	bd30      	pop	{r4, r5, pc}
 800291a:	bf00      	nop
 800291c:	a0000060 	.word	0xa0000060
 8002920:	a0000080 	.word	0xa0000080

08002924 <FSMC_NANDStructInit>:
  * @retval None
  */
void FSMC_NANDStructInit(FSMC_NANDInitTypeDef* FSMC_NANDInitStruct)
{ 
  /* Reset NAND Init structure parameters values */
  FSMC_NANDInitStruct->FSMC_Bank = FSMC_Bank2_NAND;
 8002924:	2310      	movs	r3, #16
 8002926:	6003      	str	r3, [r0, #0]
  FSMC_NANDInitStruct->FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_8b;
  FSMC_NANDInitStruct->FSMC_ECC = FSMC_ECC_Disable;
  FSMC_NANDInitStruct->FSMC_ECCPageSize = FSMC_ECCPageSize_256Bytes;
  FSMC_NANDInitStruct->FSMC_TCLRSetupTime = 0x0;
  FSMC_NANDInitStruct->FSMC_TARSetupTime = 0x0;
  FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 8002928:	69c2      	ldr	r2, [r0, #28]
  */
void FSMC_NANDStructInit(FSMC_NANDInitTypeDef* FSMC_NANDInitStruct)
{ 
  /* Reset NAND Init structure parameters values */
  FSMC_NANDInitStruct->FSMC_Bank = FSMC_Bank2_NAND;
  FSMC_NANDInitStruct->FSMC_Waitfeature = FSMC_Waitfeature_Disable;
 800292a:	2300      	movs	r3, #0
 800292c:	6043      	str	r3, [r0, #4]
  FSMC_NANDInitStruct->FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_8b;
 800292e:	6083      	str	r3, [r0, #8]
  FSMC_NANDInitStruct->FSMC_ECC = FSMC_ECC_Disable;
 8002930:	60c3      	str	r3, [r0, #12]
  FSMC_NANDInitStruct->FSMC_ECCPageSize = FSMC_ECCPageSize_256Bytes;
 8002932:	6103      	str	r3, [r0, #16]
  FSMC_NANDInitStruct->FSMC_TCLRSetupTime = 0x0;
 8002934:	6143      	str	r3, [r0, #20]
  FSMC_NANDInitStruct->FSMC_TARSetupTime = 0x0;
 8002936:	6183      	str	r3, [r0, #24]
  FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 8002938:	23fc      	movs	r3, #252	; 0xfc
 800293a:	6013      	str	r3, [r2, #0]
  FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 800293c:	6053      	str	r3, [r2, #4]
  FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 800293e:	6093      	str	r3, [r2, #8]
  FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
 8002940:	60d3      	str	r3, [r2, #12]
  FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 8002942:	6a02      	ldr	r2, [r0, #32]
 8002944:	6013      	str	r3, [r2, #0]
  FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 8002946:	6053      	str	r3, [r2, #4]
  FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 8002948:	6093      	str	r3, [r2, #8]
  FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;	  
 800294a:	60d3      	str	r3, [r2, #12]
}
 800294c:	4770      	bx	lr

0800294e <FSMC_NANDCmd>:
void FSMC_NANDCmd(uint32_t FSMC_Bank, FunctionalState NewState)
{
  assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800294e:	b141      	cbz	r1, 8002962 <FSMC_NANDCmd+0x14>
  {
    /* Enable the selected NAND Bank by setting the PBKEN bit in the PCRx register */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 8002950:	2810      	cmp	r0, #16
    {
      FSMC_Bank2->PCR2 |= PCR_PBKEN_SET;
 8002952:	bf0c      	ite	eq
 8002954:	4b07      	ldreq	r3, [pc, #28]	; (8002974 <FSMC_NANDCmd+0x26>)
    }
    else
    {
      FSMC_Bank3->PCR3 |= PCR_PBKEN_SET;
 8002956:	4b08      	ldrne	r3, [pc, #32]	; (8002978 <FSMC_NANDCmd+0x2a>)
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	f042 0204 	orr.w	r2, r2, #4
 800295e:	601a      	str	r2, [r3, #0]
 8002960:	4770      	bx	lr
    }
  }
  else
  {
    /* Disable the selected NAND Bank by clearing the PBKEN bit in the PCRx register */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 8002962:	2810      	cmp	r0, #16
    {
      FSMC_Bank2->PCR2 &= PCR_PBKEN_RESET;
 8002964:	bf0c      	ite	eq
 8002966:	4a03      	ldreq	r2, [pc, #12]	; (8002974 <FSMC_NANDCmd+0x26>)
    }
    else
    {
      FSMC_Bank3->PCR3 &= PCR_PBKEN_RESET;
 8002968:	4a03      	ldrne	r2, [pc, #12]	; (8002978 <FSMC_NANDCmd+0x2a>)
 800296a:	4b04      	ldr	r3, [pc, #16]	; (800297c <FSMC_NANDCmd+0x2e>)
 800296c:	6811      	ldr	r1, [r2, #0]
 800296e:	400b      	ands	r3, r1
 8002970:	6013      	str	r3, [r2, #0]
 8002972:	4770      	bx	lr
 8002974:	a0000060 	.word	0xa0000060
 8002978:	a0000080 	.word	0xa0000080
 800297c:	000ffffb 	.word	0x000ffffb

08002980 <FSMC_NANDECCCmd>:
void FSMC_NANDECCCmd(uint32_t FSMC_Bank, FunctionalState NewState)
{
  assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002980:	b141      	cbz	r1, 8002994 <FSMC_NANDECCCmd+0x14>
  {
    /* Enable the selected NAND Bank ECC function by setting the ECCEN bit in the PCRx register */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 8002982:	2810      	cmp	r0, #16
    {
      FSMC_Bank2->PCR2 |= PCR_ECCEN_SET;
 8002984:	bf0c      	ite	eq
 8002986:	4b08      	ldreq	r3, [pc, #32]	; (80029a8 <FSMC_NANDECCCmd+0x28>)
    }
    else
    {
      FSMC_Bank3->PCR3 |= PCR_ECCEN_SET;
 8002988:	4b08      	ldrne	r3, [pc, #32]	; (80029ac <FSMC_NANDECCCmd+0x2c>)
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002990:	601a      	str	r2, [r3, #0]
 8002992:	4770      	bx	lr
    }
  }
  else
  {
    /* Disable the selected NAND Bank ECC function by clearing the ECCEN bit in the PCRx register */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 8002994:	2810      	cmp	r0, #16
    {
      FSMC_Bank2->PCR2 &= PCR_ECCEN_RESET;
 8002996:	bf0c      	ite	eq
 8002998:	4a03      	ldreq	r2, [pc, #12]	; (80029a8 <FSMC_NANDECCCmd+0x28>)
    }
    else
    {
      FSMC_Bank3->PCR3 &= PCR_ECCEN_RESET;
 800299a:	4a04      	ldrne	r2, [pc, #16]	; (80029ac <FSMC_NANDECCCmd+0x2c>)
 800299c:	4b04      	ldr	r3, [pc, #16]	; (80029b0 <FSMC_NANDECCCmd+0x30>)
 800299e:	6811      	ldr	r1, [r2, #0]
 80029a0:	400b      	ands	r3, r1
 80029a2:	6013      	str	r3, [r2, #0]
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	a0000060 	.word	0xa0000060
 80029ac:	a0000080 	.word	0xa0000080
 80029b0:	000fffbf 	.word	0x000fffbf

080029b4 <FSMC_GetECC>:
  */
uint32_t FSMC_GetECC(uint32_t FSMC_Bank)
{
  uint32_t eccval = 0x00000000;
  
  if(FSMC_Bank == FSMC_Bank2_NAND)
 80029b4:	2810      	cmp	r0, #16
 80029b6:	d102      	bne.n	80029be <FSMC_GetECC+0xa>
  {
    /* Get the ECCR2 register value */
    eccval = FSMC_Bank2->ECCR2;
 80029b8:	4b02      	ldr	r3, [pc, #8]	; (80029c4 <FSMC_GetECC+0x10>)
 80029ba:	6958      	ldr	r0, [r3, #20]
 80029bc:	4770      	bx	lr
  }
  else
  {
    /* Get the ECCR3 register value */
    eccval = FSMC_Bank3->ECCR3;
 80029be:	4b02      	ldr	r3, [pc, #8]	; (80029c8 <FSMC_GetECC+0x14>)
 80029c0:	6958      	ldr	r0, [r3, #20]
  }
  /* Return the error correction code value */
  return(eccval);
}
 80029c2:	4770      	bx	lr
 80029c4:	a0000060 	.word	0xa0000060
 80029c8:	a0000080 	.word	0xa0000080

080029cc <FSMC_PCCARDDeInit>:
  * @retval None
  */
void FSMC_PCCARDDeInit(void)
{
  /* Set the FSMC_Bank4 registers to their reset values */
  FSMC_Bank4->PCR4 = 0x00000018; 
 80029cc:	4b05      	ldr	r3, [pc, #20]	; (80029e4 <FSMC_PCCARDDeInit+0x18>)
 80029ce:	2218      	movs	r2, #24
 80029d0:	601a      	str	r2, [r3, #0]
  FSMC_Bank4->SR4 = 0x00000000;	
 80029d2:	2200      	movs	r2, #0
 80029d4:	605a      	str	r2, [r3, #4]
  FSMC_Bank4->PMEM4 = 0xFCFCFCFC;
 80029d6:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 80029da:	609a      	str	r2, [r3, #8]
  FSMC_Bank4->PATT4 = 0xFCFCFCFC;
 80029dc:	60da      	str	r2, [r3, #12]
  FSMC_Bank4->PIO4 = 0xFCFCFCFC;
 80029de:	611a      	str	r2, [r3, #16]
}
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	a00000a0 	.word	0xa00000a0

080029e8 <FSMC_PCCARDInit>:
  assert_param(IS_FSMC_HOLD_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FSMC_PCCARDInitStruct parameters */
  FSMC_Bank4->PCR4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_Waitfeature |
                     FSMC_MemoryDataWidth_16b |  
 80029e8:	6802      	ldr	r2, [r0, #0]
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
 80029ea:	6843      	ldr	r3, [r0, #4]
  assert_param(IS_FSMC_HOLD_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FSMC_PCCARDInitStruct parameters */
  FSMC_Bank4->PCR4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_Waitfeature |
                     FSMC_MemoryDataWidth_16b |  
 80029ec:	f042 0210 	orr.w	r2, r2, #16
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
 80029f0:	ea42 2243 	orr.w	r2, r2, r3, lsl #9
                     (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
 80029f4:	6883      	ldr	r3, [r0, #8]
  assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FSMC_PCCARDInitStruct parameters */
  FSMC_Bank4->PCR4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_Waitfeature |
                     FSMC_MemoryDataWidth_16b |  
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
 80029f6:	ea42 3243 	orr.w	r2, r2, r3, lsl #13
  assert_param(IS_FSMC_WAIT_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FSMC_PCCARDInitStruct parameters */
  FSMC_Bank4->PCR4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_Waitfeature |
 80029fa:	4b14      	ldr	r3, [pc, #80]	; (8002a4c <FSMC_PCCARDInit+0x64>)
  * @param  FSMC_PCCARDInitStruct : pointer to a FSMC_PCCARDInitTypeDef structure
  *         that contains the configuration information for the FSMC PCCARD Bank.                       
  * @retval None
  */
void FSMC_PCCARDInit(FSMC_PCCARDInitTypeDef* FSMC_PCCARDInitStruct)
{
 80029fc:	b510      	push	{r4, lr}
  assert_param(IS_FSMC_WAIT_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FSMC_PCCARDInitStruct parameters */
  FSMC_Bank4->PCR4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_Waitfeature |
 80029fe:	601a      	str	r2, [r3, #0]
                     FSMC_MemoryDataWidth_16b |  
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
                     (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FSMC_CommonSpaceTimingStructure parameters */
  FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 8002a00:	68c2      	ldr	r2, [r0, #12]
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 8002a02:	6891      	ldr	r1, [r2, #8]
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
                     (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FSMC_CommonSpaceTimingStructure parameters */
  FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8002a04:	6854      	ldr	r4, [r2, #4]
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 8002a06:	0409      	lsls	r1, r1, #16
                     FSMC_MemoryDataWidth_16b |  
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
                     (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FSMC_CommonSpaceTimingStructure parameters */
  FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 8002a08:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8002a0c:	6814      	ldr	r4, [r2, #0]
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
 8002a0e:	68d2      	ldr	r2, [r2, #12]
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
                     (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FSMC_CommonSpaceTimingStructure parameters */
  FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8002a10:	4321      	orrs	r1, r4
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 8002a12:	ea41 6202 	orr.w	r2, r1, r2, lsl #24
                     FSMC_MemoryDataWidth_16b |  
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
                     (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FSMC_CommonSpaceTimingStructure parameters */
  FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 8002a16:	609a      	str	r2, [r3, #8]
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FSMC_AttributeSpaceTimingStructure parameters */
  FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 8002a18:	6902      	ldr	r2, [r0, #16]
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 8002a1a:	6891      	ldr	r1, [r2, #8]
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FSMC_AttributeSpaceTimingStructure parameters */
  FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8002a1c:	6854      	ldr	r4, [r2, #4]
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 8002a1e:	0409      	lsls	r1, r1, #16
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FSMC_AttributeSpaceTimingStructure parameters */
  FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 8002a20:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8002a24:	6814      	ldr	r4, [r2, #0]
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
 8002a26:	68d2      	ldr	r2, [r2, #12]
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FSMC_AttributeSpaceTimingStructure parameters */
  FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8002a28:	4321      	orrs	r1, r4
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 8002a2a:	ea41 6202 	orr.w	r2, r1, r2, lsl #24
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FSMC_AttributeSpaceTimingStructure parameters */
  FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 8002a2e:	60da      	str	r2, [r3, #12]
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FSMC_IOSpaceTimingStructure parameters */
  FSMC_Bank4->PIO4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime |
 8002a30:	6942      	ldr	r2, [r0, #20]
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 8002a32:	6891      	ldr	r1, [r2, #8]
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FSMC_IOSpaceTimingStructure parameters */
  FSMC_Bank4->PIO4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime |
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8002a34:	6850      	ldr	r0, [r2, #4]
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 8002a36:	0409      	lsls	r1, r1, #16
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FSMC_IOSpaceTimingStructure parameters */
  FSMC_Bank4->PIO4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime |
 8002a38:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8002a3c:	6810      	ldr	r0, [r2, #0]
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime << 24);             
 8002a3e:	68d2      	ldr	r2, [r2, #12]
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FSMC_IOSpaceTimingStructure parameters */
  FSMC_Bank4->PIO4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime |
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8002a40:	4301      	orrs	r1, r0
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 8002a42:	ea41 6202 	orr.w	r2, r1, r2, lsl #24
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FSMC_IOSpaceTimingStructure parameters */
  FSMC_Bank4->PIO4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime |
 8002a46:	611a      	str	r2, [r3, #16]
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime << 24);             
}
 8002a48:	bd10      	pop	{r4, pc}
 8002a4a:	bf00      	nop
 8002a4c:	a00000a0 	.word	0xa00000a0

08002a50 <FSMC_PCCARDStructInit>:
{
  /* Reset PCCARD Init structure parameters values */
  FSMC_PCCARDInitStruct->FSMC_Waitfeature = FSMC_Waitfeature_Disable;
  FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime = 0x0;
  FSMC_PCCARDInitStruct->FSMC_TARSetupTime = 0x0;
  FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 8002a50:	68c2      	ldr	r2, [r0, #12]
  * @retval None
  */
void FSMC_PCCARDStructInit(FSMC_PCCARDInitTypeDef* FSMC_PCCARDInitStruct)
{
  /* Reset PCCARD Init structure parameters values */
  FSMC_PCCARDInitStruct->FSMC_Waitfeature = FSMC_Waitfeature_Disable;
 8002a52:	2300      	movs	r3, #0
 8002a54:	6003      	str	r3, [r0, #0]
  FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime = 0x0;
 8002a56:	6043      	str	r3, [r0, #4]
  FSMC_PCCARDInitStruct->FSMC_TARSetupTime = 0x0;
 8002a58:	6083      	str	r3, [r0, #8]
  FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 8002a5a:	23fc      	movs	r3, #252	; 0xfc
 8002a5c:	6013      	str	r3, [r2, #0]
  FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 8002a5e:	6053      	str	r3, [r2, #4]
  FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 8002a60:	6093      	str	r3, [r2, #8]
  FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
 8002a62:	60d3      	str	r3, [r2, #12]
  FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 8002a64:	6902      	ldr	r2, [r0, #16]
 8002a66:	6013      	str	r3, [r2, #0]
  FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 8002a68:	6053      	str	r3, [r2, #4]
  FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 8002a6a:	6093      	str	r3, [r2, #8]
  FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;	
 8002a6c:	60d3      	str	r3, [r2, #12]
  FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 8002a6e:	6942      	ldr	r2, [r0, #20]
 8002a70:	6013      	str	r3, [r2, #0]
  FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 8002a72:	6053      	str	r3, [r2, #4]
  FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 8002a74:	6093      	str	r3, [r2, #8]
  FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
 8002a76:	60d3      	str	r3, [r2, #12]
}
 8002a78:	4770      	bx	lr

08002a7a <FSMC_PCCARDCmd>:
  * @param  NewState: new state of the PCCARD Memory Bank.  
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FSMC_PCCARDCmd(FunctionalState NewState)
{
 8002a7a:	4b05      	ldr	r3, [pc, #20]	; (8002a90 <FSMC_PCCARDCmd+0x16>)
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002a7c:	b118      	cbz	r0, 8002a86 <FSMC_PCCARDCmd+0xc>
  {
    /* Enable the PCCARD Bank by setting the PBKEN bit in the PCR4 register */
    FSMC_Bank4->PCR4 |= PCR_PBKEN_SET;
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	f042 0204 	orr.w	r2, r2, #4
 8002a84:	e002      	b.n	8002a8c <FSMC_PCCARDCmd+0x12>
  }
  else
  {
    /* Disable the PCCARD Bank by clearing the PBKEN bit in the PCR4 register */
    FSMC_Bank4->PCR4 &= PCR_PBKEN_RESET;
 8002a86:	6819      	ldr	r1, [r3, #0]
 8002a88:	4a02      	ldr	r2, [pc, #8]	; (8002a94 <FSMC_PCCARDCmd+0x1a>)
 8002a8a:	400a      	ands	r2, r1
 8002a8c:	601a      	str	r2, [r3, #0]
 8002a8e:	4770      	bx	lr
 8002a90:	a00000a0 	.word	0xa00000a0
 8002a94:	000ffffb 	.word	0x000ffffb

08002a98 <FSMC_ITConfig>:
{
  assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
  assert_param(IS_FSMC_IT(FSMC_IT));	
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002a98:	b162      	cbz	r2, 8002ab4 <FSMC_ITConfig+0x1c>
  {
    /* Enable the selected FSMC_Bank2 interrupts */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 8002a9a:	2810      	cmp	r0, #16
 8002a9c:	d101      	bne.n	8002aa2 <FSMC_ITConfig+0xa>
    {
      FSMC_Bank2->SR2 |= FSMC_IT;
 8002a9e:	4b0e      	ldr	r3, [pc, #56]	; (8002ad8 <FSMC_ITConfig+0x40>)
 8002aa0:	e003      	b.n	8002aaa <FSMC_ITConfig+0x12>
    }
    /* Enable the selected FSMC_Bank3 interrupts */
    else if (FSMC_Bank == FSMC_Bank3_NAND)
 8002aa2:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8002aa6:	d103      	bne.n	8002ab0 <FSMC_ITConfig+0x18>
    {
      FSMC_Bank3->SR3 |= FSMC_IT;
 8002aa8:	4b0c      	ldr	r3, [pc, #48]	; (8002adc <FSMC_ITConfig+0x44>)
 8002aaa:	685a      	ldr	r2, [r3, #4]
 8002aac:	4311      	orrs	r1, r2
 8002aae:	e011      	b.n	8002ad4 <FSMC_ITConfig+0x3c>
    }
    /* Enable the selected FSMC_Bank4 interrupts */
    else
    {
      FSMC_Bank4->SR4 |= FSMC_IT;    
 8002ab0:	4b0b      	ldr	r3, [pc, #44]	; (8002ae0 <FSMC_ITConfig+0x48>)
 8002ab2:	e7fa      	b.n	8002aaa <FSMC_ITConfig+0x12>
    }
  }
  else
  {
    /* Disable the selected FSMC_Bank2 interrupts */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 8002ab4:	2810      	cmp	r0, #16
 8002ab6:	d104      	bne.n	8002ac2 <FSMC_ITConfig+0x2a>
    {
      
      FSMC_Bank2->SR2 &= (uint32_t)~FSMC_IT;
 8002ab8:	4b07      	ldr	r3, [pc, #28]	; (8002ad8 <FSMC_ITConfig+0x40>)
 8002aba:	685a      	ldr	r2, [r3, #4]
 8002abc:	ea22 0101 	bic.w	r1, r2, r1
 8002ac0:	e008      	b.n	8002ad4 <FSMC_ITConfig+0x3c>
    }
    /* Disable the selected FSMC_Bank3 interrupts */
    else if (FSMC_Bank == FSMC_Bank3_NAND)
 8002ac2:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    {
      FSMC_Bank3->SR3 &= (uint32_t)~FSMC_IT;
 8002ac6:	bf0c      	ite	eq
 8002ac8:	4b04      	ldreq	r3, [pc, #16]	; (8002adc <FSMC_ITConfig+0x44>)
    }
    /* Disable the selected FSMC_Bank4 interrupts */
    else
    {
      FSMC_Bank4->SR4 &= (uint32_t)~FSMC_IT;    
 8002aca:	4b05      	ldrne	r3, [pc, #20]	; (8002ae0 <FSMC_ITConfig+0x48>)
 8002acc:	685a      	ldr	r2, [r3, #4]
 8002ace:	ea6f 0101 	mvn.w	r1, r1
 8002ad2:	4011      	ands	r1, r2
 8002ad4:	6059      	str	r1, [r3, #4]
 8002ad6:	4770      	bx	lr
 8002ad8:	a0000060 	.word	0xa0000060
 8002adc:	a0000080 	.word	0xa0000080
 8002ae0:	a00000a0 	.word	0xa00000a0

08002ae4 <FSMC_GetFlagStatus>:
  
  /* Check the parameters */
  assert_param(IS_FSMC_GETFLAG_BANK(FSMC_Bank));
  assert_param(IS_FSMC_GET_FLAG(FSMC_FLAG));
  
  if(FSMC_Bank == FSMC_Bank2_NAND)
 8002ae4:	2810      	cmp	r0, #16
 8002ae6:	d101      	bne.n	8002aec <FSMC_GetFlagStatus+0x8>
  {
    tmpsr = FSMC_Bank2->SR2;
 8002ae8:	4b06      	ldr	r3, [pc, #24]	; (8002b04 <FSMC_GetFlagStatus+0x20>)
 8002aea:	e004      	b.n	8002af6 <FSMC_GetFlagStatus+0x12>
  }  
  else if(FSMC_Bank == FSMC_Bank3_NAND)
 8002aec:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
  {
    tmpsr = FSMC_Bank3->SR3;
 8002af0:	bf0c      	ite	eq
 8002af2:	4b05      	ldreq	r3, [pc, #20]	; (8002b08 <FSMC_GetFlagStatus+0x24>)
  }
  /* FSMC_Bank4_PCCARD*/
  else
  {
    tmpsr = FSMC_Bank4->SR4;
 8002af4:	4b05      	ldrne	r3, [pc, #20]	; (8002b0c <FSMC_GetFlagStatus+0x28>)
 8002af6:	685b      	ldr	r3, [r3, #4]
  } 
  
  /* Get the flag status */
  if ((tmpsr & FSMC_FLAG) != (uint16_t)RESET )
  {
    bitstatus = SET;
 8002af8:	420b      	tst	r3, r1
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
}
 8002afa:	bf0c      	ite	eq
 8002afc:	2000      	moveq	r0, #0
 8002afe:	2001      	movne	r0, #1
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	a0000060 	.word	0xa0000060
 8002b08:	a0000080 	.word	0xa0000080
 8002b0c:	a00000a0 	.word	0xa00000a0

08002b10 <FSMC_ClearFlag>:
{
 /* Check the parameters */
  assert_param(IS_FSMC_GETFLAG_BANK(FSMC_Bank));
  assert_param(IS_FSMC_CLEAR_FLAG(FSMC_FLAG)) ;
    
  if(FSMC_Bank == FSMC_Bank2_NAND)
 8002b10:	2810      	cmp	r0, #16
 8002b12:	d104      	bne.n	8002b1e <FSMC_ClearFlag+0xe>
  {
    FSMC_Bank2->SR2 &= ~FSMC_FLAG; 
 8002b14:	4b07      	ldr	r3, [pc, #28]	; (8002b34 <FSMC_ClearFlag+0x24>)
 8002b16:	685a      	ldr	r2, [r3, #4]
 8002b18:	ea22 0101 	bic.w	r1, r2, r1
 8002b1c:	e008      	b.n	8002b30 <FSMC_ClearFlag+0x20>
  }  
  else if(FSMC_Bank == FSMC_Bank3_NAND)
 8002b1e:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
  {
    FSMC_Bank3->SR3 &= ~FSMC_FLAG;
 8002b22:	bf0c      	ite	eq
 8002b24:	4b04      	ldreq	r3, [pc, #16]	; (8002b38 <FSMC_ClearFlag+0x28>)
  }
  /* FSMC_Bank4_PCCARD*/
  else
  {
    FSMC_Bank4->SR4 &= ~FSMC_FLAG;
 8002b26:	4b05      	ldrne	r3, [pc, #20]	; (8002b3c <FSMC_ClearFlag+0x2c>)
 8002b28:	685a      	ldr	r2, [r3, #4]
 8002b2a:	ea6f 0101 	mvn.w	r1, r1
 8002b2e:	4011      	ands	r1, r2
 8002b30:	6059      	str	r1, [r3, #4]
 8002b32:	4770      	bx	lr
 8002b34:	a0000060 	.word	0xa0000060
 8002b38:	a0000080 	.word	0xa0000080
 8002b3c:	a00000a0 	.word	0xa00000a0

08002b40 <FSMC_GetITStatus>:
  
  /* Check the parameters */
  assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
  assert_param(IS_FSMC_GET_IT(FSMC_IT));
  
  if(FSMC_Bank == FSMC_Bank2_NAND)
 8002b40:	2810      	cmp	r0, #16
 8002b42:	d101      	bne.n	8002b48 <FSMC_GetITStatus+0x8>
  {
    tmpsr = FSMC_Bank2->SR2;
 8002b44:	4b08      	ldr	r3, [pc, #32]	; (8002b68 <FSMC_GetITStatus+0x28>)
 8002b46:	e004      	b.n	8002b52 <FSMC_GetITStatus+0x12>
  }  
  else if(FSMC_Bank == FSMC_Bank3_NAND)
 8002b48:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
  {
    tmpsr = FSMC_Bank3->SR3;
 8002b4c:	bf0c      	ite	eq
 8002b4e:	4b07      	ldreq	r3, [pc, #28]	; (8002b6c <FSMC_GetITStatus+0x2c>)
  }
  /* FSMC_Bank4_PCCARD*/
  else
  {
    tmpsr = FSMC_Bank4->SR4;
 8002b50:	4b07      	ldrne	r3, [pc, #28]	; (8002b70 <FSMC_GetITStatus+0x30>)
 8002b52:	685b      	ldr	r3, [r3, #4]
  } 
  
  itstatus = tmpsr & FSMC_IT;
  
  itenable = tmpsr & (FSMC_IT >> 3);
  if ((itstatus != (uint32_t)RESET)  && (itenable != (uint32_t)RESET))
 8002b54:	ea13 0001 	ands.w	r0, r3, r1
 8002b58:	d004      	beq.n	8002b64 <FSMC_GetITStatus+0x24>
  {
    bitstatus = SET;
 8002b5a:	ea13 01d1 	ands.w	r1, r3, r1, lsr #3
 8002b5e:	bf0c      	ite	eq
 8002b60:	2000      	moveq	r0, #0
 8002b62:	2001      	movne	r0, #1
  else
  {
    bitstatus = RESET;
  }
  return bitstatus; 
}
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop
 8002b68:	a0000060 	.word	0xa0000060
 8002b6c:	a0000080 	.word	0xa0000080
 8002b70:	a00000a0 	.word	0xa00000a0

08002b74 <FSMC_ClearITPendingBit>:
{
  /* Check the parameters */
  assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
  assert_param(IS_FSMC_IT(FSMC_IT));
    
  if(FSMC_Bank == FSMC_Bank2_NAND)
 8002b74:	2810      	cmp	r0, #16
 8002b76:	d104      	bne.n	8002b82 <FSMC_ClearITPendingBit+0xe>
  {
    FSMC_Bank2->SR2 &= ~(FSMC_IT >> 3); 
 8002b78:	4b08      	ldr	r3, [pc, #32]	; (8002b9c <FSMC_ClearITPendingBit+0x28>)
 8002b7a:	685a      	ldr	r2, [r3, #4]
 8002b7c:	ea22 01d1 	bic.w	r1, r2, r1, lsr #3
 8002b80:	e009      	b.n	8002b96 <FSMC_ClearITPendingBit+0x22>
  }  
  else if(FSMC_Bank == FSMC_Bank3_NAND)
 8002b82:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
  {
    FSMC_Bank3->SR3 &= ~(FSMC_IT >> 3);
 8002b86:	bf0c      	ite	eq
 8002b88:	4b05      	ldreq	r3, [pc, #20]	; (8002ba0 <FSMC_ClearITPendingBit+0x2c>)
  }
  /* FSMC_Bank4_PCCARD*/
  else
  {
    FSMC_Bank4->SR4 &= ~(FSMC_IT >> 3);
 8002b8a:	4b06      	ldrne	r3, [pc, #24]	; (8002ba4 <FSMC_ClearITPendingBit+0x30>)
 8002b8c:	685a      	ldr	r2, [r3, #4]
 8002b8e:	ea4f 01d1 	mov.w	r1, r1, lsr #3
 8002b92:	ea22 0101 	bic.w	r1, r2, r1
 8002b96:	6059      	str	r1, [r3, #4]
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	a0000060 	.word	0xa0000060
 8002ba0:	a0000080 	.word	0xa0000080
 8002ba4:	a00000a0 	.word	0xa00000a0

08002ba8 <GPIO_DeInit>:
  * @note   By default, The GPIO pins are configured in input floating mode (except JTAG pins).
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 8002ba8:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
 8002baa:	4b2c      	ldr	r3, [pc, #176]	; (8002c5c <GPIO_DeInit+0xb4>)
 8002bac:	4298      	cmp	r0, r3
 8002bae:	d105      	bne.n	8002bbc <GPIO_DeInit+0x14>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8002bb0:	2001      	movs	r0, #1
 8002bb2:	4601      	mov	r1, r0
 8002bb4:	f000 ffaa 	bl	8003b0c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 8002bb8:	2001      	movs	r0, #1
 8002bba:	e048      	b.n	8002c4e <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOB)
 8002bbc:	4b28      	ldr	r3, [pc, #160]	; (8002c60 <GPIO_DeInit+0xb8>)
 8002bbe:	4298      	cmp	r0, r3
 8002bc0:	d105      	bne.n	8002bce <GPIO_DeInit+0x26>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8002bc2:	2002      	movs	r0, #2
 8002bc4:	2101      	movs	r1, #1
 8002bc6:	f000 ffa1 	bl	8003b0c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 8002bca:	2002      	movs	r0, #2
 8002bcc:	e03f      	b.n	8002c4e <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOC)
 8002bce:	4b25      	ldr	r3, [pc, #148]	; (8002c64 <GPIO_DeInit+0xbc>)
 8002bd0:	4298      	cmp	r0, r3
 8002bd2:	d105      	bne.n	8002be0 <GPIO_DeInit+0x38>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8002bd4:	2004      	movs	r0, #4
 8002bd6:	2101      	movs	r1, #1
 8002bd8:	f000 ff98 	bl	8003b0c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 8002bdc:	2004      	movs	r0, #4
 8002bde:	e036      	b.n	8002c4e <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOD)
 8002be0:	4b21      	ldr	r3, [pc, #132]	; (8002c68 <GPIO_DeInit+0xc0>)
 8002be2:	4298      	cmp	r0, r3
 8002be4:	d105      	bne.n	8002bf2 <GPIO_DeInit+0x4a>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8002be6:	2008      	movs	r0, #8
 8002be8:	2101      	movs	r1, #1
 8002bea:	f000 ff8f 	bl	8003b0c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 8002bee:	2008      	movs	r0, #8
 8002bf0:	e02d      	b.n	8002c4e <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOE)
 8002bf2:	4b1e      	ldr	r3, [pc, #120]	; (8002c6c <GPIO_DeInit+0xc4>)
 8002bf4:	4298      	cmp	r0, r3
 8002bf6:	d105      	bne.n	8002c04 <GPIO_DeInit+0x5c>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 8002bf8:	2010      	movs	r0, #16
 8002bfa:	2101      	movs	r1, #1
 8002bfc:	f000 ff86 	bl	8003b0c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 8002c00:	2010      	movs	r0, #16
 8002c02:	e024      	b.n	8002c4e <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOF)
 8002c04:	4b1a      	ldr	r3, [pc, #104]	; (8002c70 <GPIO_DeInit+0xc8>)
 8002c06:	4298      	cmp	r0, r3
 8002c08:	d105      	bne.n	8002c16 <GPIO_DeInit+0x6e>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 8002c0a:	2020      	movs	r0, #32
 8002c0c:	2101      	movs	r1, #1
 8002c0e:	f000 ff7d 	bl	8003b0c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 8002c12:	2020      	movs	r0, #32
 8002c14:	e01b      	b.n	8002c4e <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOG)
 8002c16:	4b17      	ldr	r3, [pc, #92]	; (8002c74 <GPIO_DeInit+0xcc>)
 8002c18:	4298      	cmp	r0, r3
 8002c1a:	d105      	bne.n	8002c28 <GPIO_DeInit+0x80>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 8002c1c:	2040      	movs	r0, #64	; 0x40
 8002c1e:	2101      	movs	r1, #1
 8002c20:	f000 ff74 	bl	8003b0c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 8002c24:	2040      	movs	r0, #64	; 0x40
 8002c26:	e012      	b.n	8002c4e <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOH)
 8002c28:	4b13      	ldr	r3, [pc, #76]	; (8002c78 <GPIO_DeInit+0xd0>)
 8002c2a:	4298      	cmp	r0, r3
 8002c2c:	d105      	bne.n	8002c3a <GPIO_DeInit+0x92>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 8002c2e:	2080      	movs	r0, #128	; 0x80
 8002c30:	2101      	movs	r1, #1
 8002c32:	f000 ff6b 	bl	8003b0c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 8002c36:	2080      	movs	r0, #128	; 0x80
 8002c38:	e009      	b.n	8002c4e <GPIO_DeInit+0xa6>
  }
  else
  {
    if (GPIOx == GPIOI)
 8002c3a:	4b10      	ldr	r3, [pc, #64]	; (8002c7c <GPIO_DeInit+0xd4>)
 8002c3c:	4298      	cmp	r0, r3
 8002c3e:	d10b      	bne.n	8002c58 <GPIO_DeInit+0xb0>
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 8002c40:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002c44:	2101      	movs	r1, #1
 8002c46:	f000 ff61 	bl	8003b0c <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 8002c4a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002c4e:	2100      	movs	r1, #0
    }
  }
}
 8002c50:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (GPIOx == GPIOI)
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 8002c54:	f000 bf5a 	b.w	8003b0c <RCC_AHB1PeriphResetCmd>
 8002c58:	bd08      	pop	{r3, pc}
 8002c5a:	bf00      	nop
 8002c5c:	40020000 	.word	0x40020000
 8002c60:	40020400 	.word	0x40020400
 8002c64:	40020800 	.word	0x40020800
 8002c68:	40020c00 	.word	0x40020c00
 8002c6c:	40021000 	.word	0x40021000
 8002c70:	40021400 	.word	0x40021400
 8002c74:	40021800 	.word	0x40021800
 8002c78:	40021c00 	.word	0x40021c00
 8002c7c:	40022000 	.word	0x40022000

08002c80 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8002c80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
  {
    pos = ((uint32_t)0x01) << pinpos;
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8002c84:	2300      	movs	r3, #0
 8002c86:	f8d1 8000 	ldr.w	r8, [r1]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8002c8a:	461a      	mov	r2, r3
  {
    pos = ((uint32_t)0x01) << pinpos;
 8002c8c:	f04f 0c01 	mov.w	ip, #1
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8002c90:	2703      	movs	r7, #3

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
  {
    pos = ((uint32_t)0x01) << pinpos;
 8002c92:	fa0c f402 	lsl.w	r4, ip, r2
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8002c96:	ea04 0508 	and.w	r5, r4, r8

    if (currentpin == pos)
 8002c9a:	42a5      	cmp	r5, r4
 8002c9c:	d12e      	bne.n	8002cfc <GPIO_Init+0x7c>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8002c9e:	6806      	ldr	r6, [r0, #0]
 8002ca0:	fa17 f403 	lsls.w	r4, r7, r3
 8002ca4:	43e4      	mvns	r4, r4
 8002ca6:	4026      	ands	r6, r4
 8002ca8:	6006      	str	r6, [r0, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8002caa:	790e      	ldrb	r6, [r1, #4]
 8002cac:	f8d0 9000 	ldr.w	r9, [r0]
 8002cb0:	fa06 fa03 	lsl.w	sl, r6, r3

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8002cb4:	3e01      	subs	r6, #1
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8002cb6:	ea4a 0909 	orr.w	r9, sl, r9

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8002cba:	2e01      	cmp	r6, #1
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8002cbc:	f8c0 9000 	str.w	r9, [r0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8002cc0:	d814      	bhi.n	8002cec <GPIO_Init+0x6c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8002cc2:	6886      	ldr	r6, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8002cc4:	f891 9005 	ldrb.w	r9, [r1, #5]
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8002cc8:	4026      	ands	r6, r4
 8002cca:	6086      	str	r6, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8002ccc:	6886      	ldr	r6, [r0, #8]
 8002cce:	fa09 f903 	lsl.w	r9, r9, r3
 8002cd2:	ea49 0606 	orr.w	r6, r9, r6
 8002cd6:	6086      	str	r6, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8002cd8:	6846      	ldr	r6, [r0, #4]
 8002cda:	ea26 0505 	bic.w	r5, r6, r5
 8002cde:	6045      	str	r5, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8002ce0:	798d      	ldrb	r5, [r1, #6]
 8002ce2:	6846      	ldr	r6, [r0, #4]
 8002ce4:	4095      	lsls	r5, r2
 8002ce6:	b2ad      	uxth	r5, r5
 8002ce8:	4335      	orrs	r5, r6
 8002cea:	6045      	str	r5, [r0, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8002cec:	68c5      	ldr	r5, [r0, #12]
 8002cee:	402c      	ands	r4, r5
 8002cf0:	60c4      	str	r4, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8002cf2:	79cc      	ldrb	r4, [r1, #7]
 8002cf4:	68c5      	ldr	r5, [r0, #12]
 8002cf6:	409c      	lsls	r4, r3
 8002cf8:	432c      	orrs	r4, r5
 8002cfa:	60c4      	str	r4, [r0, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8002cfc:	3201      	adds	r2, #1
 8002cfe:	3302      	adds	r3, #2
 8002d00:	2a10      	cmp	r2, #16
 8002d02:	d1c6      	bne.n	8002c92 <GPIO_Init+0x12>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8002d04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002d08 <GPIO_StructInit>:
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8002d08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d0c:	6003      	str	r3, [r0, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	7103      	strb	r3, [r0, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8002d12:	7143      	strb	r3, [r0, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 8002d14:	7183      	strb	r3, [r0, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 8002d16:	71c3      	strb	r3, [r0, #7]
}
 8002d18:	4770      	bx	lr

08002d1a <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d1a:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0x00010000;
 8002d1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d20:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
 8002d22:	9b01      	ldr	r3, [sp, #4]
 8002d24:	430b      	orrs	r3, r1
 8002d26:	9301      	str	r3, [sp, #4]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8002d28:	9b01      	ldr	r3, [sp, #4]
 8002d2a:	61c3      	str	r3, [r0, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 8002d2c:	61c1      	str	r1, [r0, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8002d2e:	9b01      	ldr	r3, [sp, #4]
 8002d30:	61c3      	str	r3, [r0, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8002d32:	69c3      	ldr	r3, [r0, #28]
 8002d34:	9301      	str	r3, [sp, #4]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8002d36:	69c3      	ldr	r3, [r0, #28]
 8002d38:	9301      	str	r3, [sp, #4]
}
 8002d3a:	b002      	add	sp, #8
 8002d3c:	4770      	bx	lr

08002d3e <GPIO_ReadInputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8002d3e:	6903      	ldr	r3, [r0, #16]
  {
    bitstatus = (uint8_t)Bit_SET;
 8002d40:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 8002d42:	bf0c      	ite	eq
 8002d44:	2000      	moveq	r0, #0
 8002d46:	2001      	movne	r0, #1
 8002d48:	4770      	bx	lr

08002d4a <GPIO_ReadInputData>:
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 8002d4a:	6900      	ldr	r0, [r0, #16]
}
 8002d4c:	b280      	uxth	r0, r0
 8002d4e:	4770      	bx	lr

08002d50 <GPIO_ReadOutputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8002d50:	6943      	ldr	r3, [r0, #20]
  {
    bitstatus = (uint8_t)Bit_SET;
 8002d52:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 8002d54:	bf0c      	ite	eq
 8002d56:	2000      	moveq	r0, #0
 8002d58:	2001      	movne	r0, #1
 8002d5a:	4770      	bx	lr

08002d5c <GPIO_ReadOutputData>:
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
 8002d5c:	6940      	ldr	r0, [r0, #20]
}
 8002d5e:	b280      	uxth	r0, r0
 8002d60:	4770      	bx	lr

08002d62 <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8002d62:	8301      	strh	r1, [r0, #24]
}
 8002d64:	4770      	bx	lr

08002d66 <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8002d66:	8341      	strh	r1, [r0, #26]
}
 8002d68:	4770      	bx	lr

08002d6a <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 8002d6a:	b10a      	cbz	r2, 8002d70 <GPIO_WriteBit+0x6>
  {
    GPIOx->BSRRL = GPIO_Pin;
 8002d6c:	8301      	strh	r1, [r0, #24]
 8002d6e:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 8002d70:	8341      	strh	r1, [r0, #26]
 8002d72:	4770      	bx	lr

08002d74 <GPIO_Write>:
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 8002d74:	6141      	str	r1, [r0, #20]
}
 8002d76:	4770      	bx	lr

08002d78 <GPIO_ToggleBits>:
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 8002d78:	6943      	ldr	r3, [r0, #20]
 8002d7a:	404b      	eors	r3, r1
 8002d7c:	6143      	str	r3, [r0, #20]
}
 8002d7e:	4770      	bx	lr

08002d80 <GPIO_PinAFConfig>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8002d80:	f001 0307 	and.w	r3, r1, #7
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8002d84:	08c9      	lsrs	r1, r1, #3
 8002d86:	3108      	adds	r1, #8
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8002d88:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8002d8a:	009b      	lsls	r3, r3, #2
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8002d8c:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
 8002d90:	240f      	movs	r4, #15
 8002d92:	409c      	lsls	r4, r3
 8002d94:	ea25 0404 	bic.w	r4, r5, r4
 8002d98:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8002d9c:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8002da0:	fa12 f303 	lsls.w	r3, r2, r3
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8002da4:	431c      	orrs	r4, r3
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8002da6:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
}
 8002daa:	bd30      	pop	{r4, r5, pc}

08002dac <HASH_DeInit>:
  * @brief  Deinitializes the HASH peripheral registers to their default reset values
  * @param  None
  * @retval None
  */
void HASH_DeInit(void)
{
 8002dac:	b508      	push	{r3, lr}
  /* Enable HASH reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_HASH, ENABLE);
 8002dae:	2020      	movs	r0, #32
 8002db0:	2101      	movs	r1, #1
 8002db2:	f000 feb7 	bl	8003b24 <RCC_AHB2PeriphResetCmd>
  /* Release HASH from reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_HASH, DISABLE);
 8002db6:	2020      	movs	r0, #32
 8002db8:	2100      	movs	r1, #0
}
 8002dba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void HASH_DeInit(void)
{
  /* Enable HASH reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_HASH, ENABLE);
  /* Release HASH from reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_HASH, DISABLE);
 8002dbe:	f000 beb1 	b.w	8003b24 <RCC_AHB2PeriphResetCmd>

08002dc2 <HASH_Init>:
  assert_param(IS_HASH_ALGOSELECTION(HASH_InitStruct->HASH_AlgoSelection));
  assert_param(IS_HASH_DATATYPE(HASH_InitStruct->HASH_DataType));
  assert_param(IS_HASH_ALGOMODE(HASH_InitStruct->HASH_AlgoMode));
  
  /* Configure the Algorithm used, algorithm mode and the datatype */
  HASH->CR &= ~ (HASH_CR_ALGO | HASH_CR_DATATYPE | HASH_CR_MODE);
 8002dc2:	4b0e      	ldr	r3, [pc, #56]	; (8002dfc <HASH_Init+0x3a>)
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  * @note   The field HASH_HMACKeyType in HASH_InitTypeDef must be filled only 
  *          if the algorithm mode is HMAC.       
  * @retval None
  */
void HASH_Init(HASH_InitTypeDef* HASH_InitStruct)
{
 8002dca:	b510      	push	{r4, lr}
  assert_param(IS_HASH_ALGOSELECTION(HASH_InitStruct->HASH_AlgoSelection));
  assert_param(IS_HASH_DATATYPE(HASH_InitStruct->HASH_DataType));
  assert_param(IS_HASH_ALGOMODE(HASH_InitStruct->HASH_AlgoMode));
  
  /* Configure the Algorithm used, algorithm mode and the datatype */
  HASH->CR &= ~ (HASH_CR_ALGO | HASH_CR_DATATYPE | HASH_CR_MODE);
 8002dcc:	601a      	str	r2, [r3, #0]
  HASH->CR |= (HASH_InitStruct->HASH_AlgoSelection | \
 8002dce:	e890 0006 	ldmia.w	r0, {r1, r2}
 8002dd2:	681c      	ldr	r4, [r3, #0]
 8002dd4:	4321      	orrs	r1, r4
               HASH_InitStruct->HASH_DataType | \
 8002dd6:	6884      	ldr	r4, [r0, #8]
 8002dd8:	4321      	orrs	r1, r4
  assert_param(IS_HASH_DATATYPE(HASH_InitStruct->HASH_DataType));
  assert_param(IS_HASH_ALGOMODE(HASH_InitStruct->HASH_AlgoMode));
  
  /* Configure the Algorithm used, algorithm mode and the datatype */
  HASH->CR &= ~ (HASH_CR_ALGO | HASH_CR_DATATYPE | HASH_CR_MODE);
  HASH->CR |= (HASH_InitStruct->HASH_AlgoSelection | \
 8002dda:	4311      	orrs	r1, r2
               HASH_InitStruct->HASH_DataType | \
               HASH_InitStruct->HASH_AlgoMode);
  
  /* if algorithm mode is HMAC, set the Key */  
  if(HASH_InitStruct->HASH_AlgoMode == HASH_AlgoMode_HMAC) 
 8002ddc:	2a40      	cmp	r2, #64	; 0x40
  assert_param(IS_HASH_DATATYPE(HASH_InitStruct->HASH_DataType));
  assert_param(IS_HASH_ALGOMODE(HASH_InitStruct->HASH_AlgoMode));
  
  /* Configure the Algorithm used, algorithm mode and the datatype */
  HASH->CR &= ~ (HASH_CR_ALGO | HASH_CR_DATATYPE | HASH_CR_MODE);
  HASH->CR |= (HASH_InitStruct->HASH_AlgoSelection | \
 8002dde:	6019      	str	r1, [r3, #0]
               HASH_InitStruct->HASH_DataType | \
               HASH_InitStruct->HASH_AlgoMode);
  
  /* if algorithm mode is HMAC, set the Key */  
  if(HASH_InitStruct->HASH_AlgoMode == HASH_AlgoMode_HMAC) 
 8002de0:	d107      	bne.n	8002df2 <HASH_Init+0x30>
  {
    assert_param(IS_HASH_HMAC_KEYTYPE(HASH_InitStruct->HASH_HMACKeyType));
    HASH->CR &= ~HASH_CR_LKEY;
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002de8:	601a      	str	r2, [r3, #0]
    HASH->CR |= HASH_InitStruct->HASH_HMACKeyType;
 8002dea:	6819      	ldr	r1, [r3, #0]
 8002dec:	68c2      	ldr	r2, [r0, #12]
 8002dee:	430a      	orrs	r2, r1
 8002df0:	601a      	str	r2, [r3, #0]
  }

  /* Reset the HASH processor core, so that the HASH will be ready to compute 
     the message digest of a new message */
  HASH->CR |= HASH_CR_INIT;  
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	f042 0204 	orr.w	r2, r2, #4
 8002df8:	601a      	str	r2, [r3, #0]
}
 8002dfa:	bd10      	pop	{r4, pc}
 8002dfc:	50060400 	.word	0x50060400

08002e00 <HASH_StructInit>:
  * @retval None
  */
void HASH_StructInit(HASH_InitTypeDef* HASH_InitStruct)
{
  /* Initialize the HASH_AlgoSelection member */
  HASH_InitStruct->HASH_AlgoSelection = HASH_AlgoSelection_SHA1;
 8002e00:	2300      	movs	r3, #0
 8002e02:	6003      	str	r3, [r0, #0]

  /* Initialize the HASH_AlgoMode member */
  HASH_InitStruct->HASH_AlgoMode = HASH_AlgoMode_HASH;
 8002e04:	6043      	str	r3, [r0, #4]

  /* Initialize the HASH_DataType member */
  HASH_InitStruct->HASH_DataType = HASH_DataType_32b;
 8002e06:	6083      	str	r3, [r0, #8]

  /* Initialize the HASH_HMACKeyType member */
  HASH_InitStruct->HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
 8002e08:	60c3      	str	r3, [r0, #12]
}
 8002e0a:	4770      	bx	lr

08002e0c <HASH_Reset>:
  * @retval None
  */
void HASH_Reset(void)
{
  /* Reset the HASH processor core */
  HASH->CR |= HASH_CR_INIT;
 8002e0c:	4b02      	ldr	r3, [pc, #8]	; (8002e18 <HASH_Reset+0xc>)
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	f042 0204 	orr.w	r2, r2, #4
 8002e14:	601a      	str	r2, [r3, #0]
}
 8002e16:	4770      	bx	lr
 8002e18:	50060400 	.word	0x50060400

08002e1c <HASH_SetLastWordValidBitsNbr>:
{
  /* Check the parameters */
  assert_param(IS_HASH_VALIDBITSNUMBER(ValidNumber));
  
  /* Configure the Number of valid bits in last word of the message */
  HASH->STR &= ~(HASH_STR_NBW);
 8002e1c:	4b04      	ldr	r3, [pc, #16]	; (8002e30 <HASH_SetLastWordValidBitsNbr+0x14>)
 8002e1e:	689a      	ldr	r2, [r3, #8]
 8002e20:	f022 021f 	bic.w	r2, r2, #31
 8002e24:	609a      	str	r2, [r3, #8]
  HASH->STR |= ValidNumber;
 8002e26:	689a      	ldr	r2, [r3, #8]
 8002e28:	4302      	orrs	r2, r0
 8002e2a:	609a      	str	r2, [r3, #8]
}
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	50060400 	.word	0x50060400

08002e34 <HASH_DataIn>:
  * @retval None
  */
void HASH_DataIn(uint32_t Data)
{
  /* Write in the DIN register a new data */
  HASH->DIN = Data;
 8002e34:	4b01      	ldr	r3, [pc, #4]	; (8002e3c <HASH_DataIn+0x8>)
 8002e36:	6058      	str	r0, [r3, #4]
}
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	50060400 	.word	0x50060400

08002e40 <HASH_GetInFIFOWordsNbr>:
  * @retval The value of words already pushed into the IN FIFO.
  */
uint8_t HASH_GetInFIFOWordsNbr(void)
{
  /* Return the value of NBW bits */
  return ((HASH->CR & HASH_CR_NBW) >> 8);
 8002e40:	4b02      	ldr	r3, [pc, #8]	; (8002e4c <HASH_GetInFIFOWordsNbr+0xc>)
 8002e42:	6818      	ldr	r0, [r3, #0]
}
 8002e44:	f3c0 2003 	ubfx	r0, r0, #8, #4
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	50060400 	.word	0x50060400

08002e50 <HASH_GetDigest>:
  * @retval None
  */
void HASH_GetDigest(HASH_MsgDigest* HASH_MessageDigest)
{
  /* Get the data field */
  HASH_MessageDigest->Data[0] = HASH->HR[0];
 8002e50:	4b05      	ldr	r3, [pc, #20]	; (8002e68 <HASH_GetDigest+0x18>)
 8002e52:	68da      	ldr	r2, [r3, #12]
 8002e54:	6002      	str	r2, [r0, #0]
  HASH_MessageDigest->Data[1] = HASH->HR[1];
 8002e56:	691a      	ldr	r2, [r3, #16]
 8002e58:	6042      	str	r2, [r0, #4]
  HASH_MessageDigest->Data[2] = HASH->HR[2];
 8002e5a:	695a      	ldr	r2, [r3, #20]
 8002e5c:	6082      	str	r2, [r0, #8]
  HASH_MessageDigest->Data[3] = HASH->HR[3];
 8002e5e:	699a      	ldr	r2, [r3, #24]
 8002e60:	60c2      	str	r2, [r0, #12]
  HASH_MessageDigest->Data[4] = HASH->HR[4];
 8002e62:	69db      	ldr	r3, [r3, #28]
 8002e64:	6103      	str	r3, [r0, #16]
}
 8002e66:	4770      	bx	lr
 8002e68:	50060400 	.word	0x50060400

08002e6c <HASH_StartDigest>:
  * @retval None
  */
void HASH_StartDigest(void)
{
  /* Start the Digest calculation */
  HASH->STR |= HASH_STR_DCAL;
 8002e6c:	4b02      	ldr	r3, [pc, #8]	; (8002e78 <HASH_StartDigest+0xc>)
 8002e6e:	689a      	ldr	r2, [r3, #8]
 8002e70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e74:	609a      	str	r2, [r3, #8]
}
 8002e76:	4770      	bx	lr
 8002e78:	50060400 	.word	0x50060400

08002e7c <HASH_SaveContext>:
void HASH_SaveContext(HASH_Context* HASH_ContextSave)
{
  uint8_t i = 0;
  
  /* save context registers */
  HASH_ContextSave->HASH_IMR = HASH->IMR;  
 8002e7c:	4b08      	ldr	r3, [pc, #32]	; (8002ea0 <HASH_SaveContext+0x24>)
 8002e7e:	6a1a      	ldr	r2, [r3, #32]
 8002e80:	6002      	str	r2, [r0, #0]
  HASH_ContextSave->HASH_STR = HASH->STR;      
 8002e82:	689a      	ldr	r2, [r3, #8]
 8002e84:	6042      	str	r2, [r0, #4]
  HASH_ContextSave->HASH_CR  = HASH->CR;     
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	6082      	str	r2, [r0, #8]
 8002e8a:	2200      	movs	r2, #0
  for(i=0; i<=50;i++)
  {
     HASH_ContextSave->HASH_CSR[i] = HASH->CSR[i];
 8002e8c:	f102 013e 	add.w	r1, r2, #62	; 0x3e
 8002e90:	3201      	adds	r2, #1
 8002e92:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8002e96:	60c1      	str	r1, [r0, #12]
 8002e98:	3004      	adds	r0, #4
  
  /* save context registers */
  HASH_ContextSave->HASH_IMR = HASH->IMR;  
  HASH_ContextSave->HASH_STR = HASH->STR;      
  HASH_ContextSave->HASH_CR  = HASH->CR;     
  for(i=0; i<=50;i++)
 8002e9a:	2a33      	cmp	r2, #51	; 0x33
 8002e9c:	d1f6      	bne.n	8002e8c <HASH_SaveContext+0x10>
  {
     HASH_ContextSave->HASH_CSR[i] = HASH->CSR[i];
  }   
}
 8002e9e:	4770      	bx	lr
 8002ea0:	50060400 	.word	0x50060400

08002ea4 <HASH_RestoreContext>:
void HASH_RestoreContext(HASH_Context* HASH_ContextRestore)  
{
  uint8_t i = 0;
  
  /* restore context registers */
  HASH->IMR = HASH_ContextRestore->HASH_IMR;   
 8002ea4:	6802      	ldr	r2, [r0, #0]
 8002ea6:	4b0b      	ldr	r3, [pc, #44]	; (8002ed4 <HASH_RestoreContext+0x30>)
  * @param  HASH_ContextRestore: pointer to a HASH_Context structure that contains
  *         the repository for saved context.
  * @retval None
  */
void HASH_RestoreContext(HASH_Context* HASH_ContextRestore)  
{
 8002ea8:	b510      	push	{r4, lr}
  uint8_t i = 0;
  
  /* restore context registers */
  HASH->IMR = HASH_ContextRestore->HASH_IMR;   
 8002eaa:	621a      	str	r2, [r3, #32]
  HASH->STR = HASH_ContextRestore->HASH_STR;     
 8002eac:	6842      	ldr	r2, [r0, #4]
 8002eae:	609a      	str	r2, [r3, #8]
  HASH->CR = HASH_ContextRestore->HASH_CR;
 8002eb0:	6882      	ldr	r2, [r0, #8]
 8002eb2:	601a      	str	r2, [r3, #0]
  
  /* Initialize the hash processor */
  HASH->CR |= HASH_CR_INIT; 
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	f042 0204 	orr.w	r2, r2, #4
 8002eba:	601a      	str	r2, [r3, #0]
 8002ebc:	2200      	movs	r2, #0
  
   /* continue restoring context registers */     
  for(i=0; i<=50;i++)
  {
     HASH->CSR[i] = HASH_ContextRestore->HASH_CSR[i];
 8002ebe:	68c4      	ldr	r4, [r0, #12]
 8002ec0:	f102 013e 	add.w	r1, r2, #62	; 0x3e
 8002ec4:	3201      	adds	r2, #1
 8002ec6:	3004      	adds	r0, #4
  
  /* Initialize the hash processor */
  HASH->CR |= HASH_CR_INIT; 
  
   /* continue restoring context registers */     
  for(i=0; i<=50;i++)
 8002ec8:	2a33      	cmp	r2, #51	; 0x33
  {
     HASH->CSR[i] = HASH_ContextRestore->HASH_CSR[i];
 8002eca:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
  
  /* Initialize the hash processor */
  HASH->CR |= HASH_CR_INIT; 
  
   /* continue restoring context registers */     
  for(i=0; i<=50;i++)
 8002ece:	d1f6      	bne.n	8002ebe <HASH_RestoreContext+0x1a>
  {
     HASH->CSR[i] = HASH_ContextRestore->HASH_CSR[i];
  }   
}
 8002ed0:	bd10      	pop	{r4, pc}
 8002ed2:	bf00      	nop
 8002ed4:	50060400 	.word	0x50060400

08002ed8 <HASH_DMACmd>:
  * @param  NewState: new state of the selected HASH DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void HASH_DMACmd(FunctionalState NewState)
{
 8002ed8:	4b04      	ldr	r3, [pc, #16]	; (8002eec <HASH_DMACmd+0x14>)
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the HASH DMA request */
    HASH->CR |= HASH_CR_DMAE;
 8002eda:	681a      	ldr	r2, [r3, #0]
void HASH_DMACmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002edc:	b110      	cbz	r0, 8002ee4 <HASH_DMACmd+0xc>
  {
    /* Enable the HASH DMA request */
    HASH->CR |= HASH_CR_DMAE;
 8002ede:	f042 0208 	orr.w	r2, r2, #8
 8002ee2:	e001      	b.n	8002ee8 <HASH_DMACmd+0x10>
  }
  else
  {
    /* Disable the HASH DMA request */
    HASH->CR &= ~HASH_CR_DMAE;
 8002ee4:	f022 0208 	bic.w	r2, r2, #8
 8002ee8:	601a      	str	r2, [r3, #0]
 8002eea:	4770      	bx	lr
 8002eec:	50060400 	.word	0x50060400

08002ef0 <HASH_ITConfig>:
  * @param  NewState: new state of the specified HASH interrupt.
  *           This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void HASH_ITConfig(uint8_t HASH_IT, FunctionalState NewState)
{
 8002ef0:	4b05      	ldr	r3, [pc, #20]	; (8002f08 <HASH_ITConfig+0x18>)
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected HASH interrupt */
    HASH->IMR |= HASH_IT;
 8002ef2:	6a1a      	ldr	r2, [r3, #32]
{
  /* Check the parameters */
  assert_param(IS_HASH_IT(HASH_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002ef4:	b109      	cbz	r1, 8002efa <HASH_ITConfig+0xa>
  {
    /* Enable the selected HASH interrupt */
    HASH->IMR |= HASH_IT;
 8002ef6:	4310      	orrs	r0, r2
 8002ef8:	e003      	b.n	8002f02 <HASH_ITConfig+0x12>
  }
  else
  {
    /* Disable the selected HASH interrupt */
    HASH->IMR &= (uint8_t) ~HASH_IT;
 8002efa:	ea22 0000 	bic.w	r0, r2, r0
 8002efe:	f000 00ff 	and.w	r0, r0, #255	; 0xff
 8002f02:	6218      	str	r0, [r3, #32]
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop
 8002f08:	50060400 	.word	0x50060400

08002f0c <HASH_GetFlagStatus>:
  *            @arg HASH_FLAG_DMAS: DMAS Status flag
  *            @arg HASH_FLAG_DINNE: Data Input register (DIN) not empty status flag
  * @retval The new state of HASH_FLAG (SET or RESET)
  */
FlagStatus HASH_GetFlagStatus(uint16_t HASH_FLAG)
{
 8002f0c:	4b05      	ldr	r3, [pc, #20]	; (8002f24 <HASH_GetFlagStatus+0x18>)

  /* Check the parameters */
  assert_param(IS_HASH_GET_FLAG(HASH_FLAG));

  /* check if the FLAG is in CR register */
  if ((HASH_FLAG & HASH_FLAG_DINNE) != (uint16_t)RESET ) 
 8002f0e:	f410 5f80 	tst.w	r0, #4096	; 0x1000
  {
    tempreg = HASH->CR;
 8002f12:	bf14      	ite	ne
 8002f14:	681b      	ldrne	r3, [r3, #0]
  }
  else /* The FLAG is in SR register */
  {
    tempreg = HASH->SR;
 8002f16:	6a5b      	ldreq	r3, [r3, #36]	; 0x24

  /* Check the status of the specified HASH flag */
  if ((tempreg & HASH_FLAG) != (uint16_t)RESET)
  {
    /* HASH is set */
    bitstatus = SET;
 8002f18:	4203      	tst	r3, r0
    bitstatus = RESET;
  }

  /* Return the HASH_FLAG status */
  return  bitstatus;
}
 8002f1a:	bf0c      	ite	eq
 8002f1c:	2000      	moveq	r0, #0
 8002f1e:	2001      	movne	r0, #1
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	50060400 	.word	0x50060400

08002f28 <HASH_ClearFlag>:
{
  /* Check the parameters */
  assert_param(IS_HASH_CLEAR_FLAG(HASH_FLAG));
  
  /* Clear the selected HASH flags */
  HASH->SR = ~(uint32_t)HASH_FLAG;
 8002f28:	4b01      	ldr	r3, [pc, #4]	; (8002f30 <HASH_ClearFlag+0x8>)
 8002f2a:	43c0      	mvns	r0, r0
 8002f2c:	6258      	str	r0, [r3, #36]	; 0x24
}
 8002f2e:	4770      	bx	lr
 8002f30:	50060400 	.word	0x50060400

08002f34 <HASH_GetITStatus>:
  /* Check the parameters */
  assert_param(IS_HASH_GET_IT(HASH_IT));  


  /* Check the status of the specified HASH interrupt */
  tmpreg =  HASH->SR;
 8002f34:	4b04      	ldr	r3, [pc, #16]	; (8002f48 <HASH_GetITStatus+0x14>)
 8002f36:	6a5a      	ldr	r2, [r3, #36]	; 0x24

  if (((HASH->IMR & tmpreg) & HASH_IT) != RESET)
 8002f38:	6a1b      	ldr	r3, [r3, #32]
 8002f3a:	4013      	ands	r3, r2
  {
    /* HASH_IT is set */
    bitstatus = SET;
 8002f3c:	4203      	tst	r3, r0
    /* HASH_IT is reset */
    bitstatus = RESET;
  }
  /* Return the HASH_IT status */
  return bitstatus;
}
 8002f3e:	bf0c      	ite	eq
 8002f40:	2000      	moveq	r0, #0
 8002f42:	2001      	movne	r0, #1
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	50060400 	.word	0x50060400

08002f4c <HASH_ClearITPendingBit>:
{
  /* Check the parameters */
  assert_param(IS_HASH_IT(HASH_IT));

  /* Clear the selected HASH interrupt pending bit */
  HASH->SR = (uint8_t)~HASH_IT;
 8002f4c:	43c0      	mvns	r0, r0
 8002f4e:	4b02      	ldr	r3, [pc, #8]	; (8002f58 <HASH_ClearITPendingBit+0xc>)
 8002f50:	b2c0      	uxtb	r0, r0
 8002f52:	6258      	str	r0, [r3, #36]	; 0x24
}
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	50060400 	.word	0x50060400

08002f5c <HASH_MD5>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HASH_MD5(uint8_t *Input, uint32_t Ilen, uint8_t Output[16])
{
 8002f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t inputaddr  = (uint32_t)Input;
  uint32_t outputaddr = (uint32_t)Output;


  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 8002f5e:	f001 0303 	and.w	r3, r1, #3
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HASH_MD5(uint8_t *Input, uint32_t Ilen, uint8_t Output[16])
{
 8002f62:	b08d      	sub	sp, #52	; 0x34
  HASH_InitTypeDef MD5_HASH_InitStructure;
  HASH_MsgDigest MD5_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
 8002f64:	2700      	movs	r7, #0
  uint32_t inputaddr  = (uint32_t)Input;
  uint32_t outputaddr = (uint32_t)Output;


  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 8002f66:	00db      	lsls	r3, r3, #3
  */
ErrorStatus HASH_MD5(uint8_t *Input, uint32_t Ilen, uint8_t Output[16])
{
  HASH_InitTypeDef MD5_HASH_InitStructure;
  HASH_MsgDigest MD5_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
 8002f68:	f8ad 702e 	strh.w	r7, [sp, #46]	; 0x2e
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HASH_MD5(uint8_t *Input, uint32_t Ilen, uint8_t Output[16])
{
 8002f6c:	4604      	mov	r4, r0
 8002f6e:	460d      	mov	r5, r1
 8002f70:	4616      	mov	r6, r2
  HASH_InitTypeDef MD5_HASH_InitStructure;
  HASH_MsgDigest MD5_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
  uint32_t i = 0;
  __IO uint32_t counter = 0;
 8002f72:	970a      	str	r7, [sp, #40]	; 0x28
  uint32_t inputaddr  = (uint32_t)Input;
  uint32_t outputaddr = (uint32_t)Output;


  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 8002f74:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e

  /* HASH peripheral initialization */
  HASH_DeInit();
 8002f78:	f7ff ff18 	bl	8002dac <HASH_DeInit>

  /* HASH Configuration */
  MD5_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_MD5;
 8002f7c:	2380      	movs	r3, #128	; 0x80
 8002f7e:	9306      	str	r3, [sp, #24]
  MD5_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HASH;
  MD5_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
  HASH_Init(&MD5_HASH_InitStructure);
 8002f80:	a806      	add	r0, sp, #24
  HASH_DeInit();

  /* HASH Configuration */
  MD5_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_MD5;
  MD5_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HASH;
  MD5_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 8002f82:	2320      	movs	r3, #32
  /* HASH peripheral initialization */
  HASH_DeInit();

  /* HASH Configuration */
  MD5_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_MD5;
  MD5_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HASH;
 8002f84:	9707      	str	r7, [sp, #28]
  MD5_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 8002f86:	9308      	str	r3, [sp, #32]
  HASH_Init(&MD5_HASH_InitStructure);
 8002f88:	f7ff ff1b 	bl	8002dc2 <HASH_Init>

  /* Configure the number of valid bits in last word of the data */
  HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
 8002f8c:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 8002f90:	b280      	uxth	r0, r0
 8002f92:	f7ff ff43 	bl	8002e1c <HASH_SetLastWordValidBitsNbr>

  /* Write the Input block in the IN FIFO */
  for(i=0; i<Ilen; i+=4)
 8002f96:	e003      	b.n	8002fa0 <HASH_MD5+0x44>
  {
    HASH_DataIn(*(uint32_t*)inputaddr);
 8002f98:	59e0      	ldr	r0, [r4, r7]
 8002f9a:	f7ff ff4b 	bl	8002e34 <HASH_DataIn>

  /* Configure the number of valid bits in last word of the data */
  HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);

  /* Write the Input block in the IN FIFO */
  for(i=0; i<Ilen; i+=4)
 8002f9e:	3704      	adds	r7, #4
 8002fa0:	42af      	cmp	r7, r5
 8002fa2:	d3f9      	bcc.n	8002f98 <HASH_MD5+0x3c>
    HASH_DataIn(*(uint32_t*)inputaddr);
    inputaddr+=4;
  }

  /* Start the HASH processor */
  HASH_StartDigest();
 8002fa4:	f7ff ff62 	bl	8002e6c <HASH_StartDigest>

  /* wait until the Busy flag is RESET */
  do
  {
    busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 8002fa8:	2008      	movs	r0, #8
 8002faa:	f7ff ffaf 	bl	8002f0c <HASH_GetFlagStatus>
    counter++;
 8002fae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	930a      	str	r3, [sp, #40]	; 0x28
  }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 8002fb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002fb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fba:	d002      	beq.n	8002fc2 <HASH_MD5+0x66>
 8002fbc:	2800      	cmp	r0, #0
 8002fbe:	d1f3      	bne.n	8002fa8 <HASH_MD5+0x4c>
 8002fc0:	e000      	b.n	8002fc4 <HASH_MD5+0x68>

  if (busystatus != RESET)
 8002fc2:	b980      	cbnz	r0, 8002fe6 <HASH_MD5+0x8a>
     status = ERROR;
  }
  else
  {
    /* Read the message digest */
    HASH_GetDigest(&MD5_MessageDigest);
 8002fc4:	a801      	add	r0, sp, #4
 8002fc6:	f7ff ff43 	bl	8002e50 <HASH_GetDigest>
 8002fca:	9b01      	ldr	r3, [sp, #4]
 8002fcc:	ba1b      	rev	r3, r3
    *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[0]);
 8002fce:	6033      	str	r3, [r6, #0]
 8002fd0:	9b02      	ldr	r3, [sp, #8]
 8002fd2:	ba1b      	rev	r3, r3
    outputaddr+=4;
    *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[1]);
 8002fd4:	6073      	str	r3, [r6, #4]
 8002fd6:	9b03      	ldr	r3, [sp, #12]
 8002fd8:	ba1b      	rev	r3, r3
    outputaddr+=4;
    *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[2]);
 8002fda:	60b3      	str	r3, [r6, #8]
 8002fdc:	9b04      	ldr	r3, [sp, #16]
 8002fde:	ba1b      	rev	r3, r3
  HASH_MsgDigest MD5_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
  uint32_t i = 0;
  __IO uint32_t counter = 0;
  uint32_t busystatus = 0;
  ErrorStatus status = SUCCESS;
 8002fe0:	2001      	movs	r0, #1
    outputaddr+=4;
    *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[1]);
    outputaddr+=4;
    *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[2]);
    outputaddr+=4;
    *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[3]);
 8002fe2:	60f3      	str	r3, [r6, #12]
 8002fe4:	e000      	b.n	8002fe8 <HASH_MD5+0x8c>
    counter++;
  }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));

  if (busystatus != RESET)
  {
     status = ERROR;
 8002fe6:	2000      	movs	r0, #0
    *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[2]);
    outputaddr+=4;
    *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[3]);
  }
  return status; 
}
 8002fe8:	b00d      	add	sp, #52	; 0x34
 8002fea:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002fec <HMAC_MD5>:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HMAC_MD5(uint8_t *Key, uint32_t Keylen, uint8_t *Input, 
                     uint32_t Ilen, uint8_t Output[16])
{
 8002fec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002ff0:	4699      	mov	r9, r3
 8002ff2:	b08d      	sub	sp, #52	; 0x34
  uint32_t keyaddr    = (uint32_t)Key;
  uint32_t inputaddr  = (uint32_t)Input;
  uint32_t outputaddr = (uint32_t)Output;

  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 8002ff4:	f003 0303 	and.w	r3, r3, #3
ErrorStatus HMAC_MD5(uint8_t *Key, uint32_t Keylen, uint8_t *Input, 
                     uint32_t Ilen, uint8_t Output[16])
{
  HASH_InitTypeDef MD5_HASH_InitStructure;
  HASH_MsgDigest MD5_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
 8002ff8:	f04f 0800 	mov.w	r8, #0
  uint32_t keyaddr    = (uint32_t)Key;
  uint32_t inputaddr  = (uint32_t)Input;
  uint32_t outputaddr = (uint32_t)Output;

  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 8002ffc:	00db      	lsls	r3, r3, #3
ErrorStatus HMAC_MD5(uint8_t *Key, uint32_t Keylen, uint8_t *Input, 
                     uint32_t Ilen, uint8_t Output[16])
{
  HASH_InitTypeDef MD5_HASH_InitStructure;
  HASH_MsgDigest MD5_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
 8002ffe:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
  __IO uint16_t nbvalidbitskey = 0;
 8003002:	f8ad 802e 	strh.w	r8, [sp, #46]	; 0x2e
  uint32_t i = 0;
  __IO uint32_t counter = 0;
 8003006:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  uint32_t keyaddr    = (uint32_t)Key;
  uint32_t inputaddr  = (uint32_t)Input;
  uint32_t outputaddr = (uint32_t)Output;

  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 800300a:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c

  /* Number of valid bits in last word of the Key */
  nbvalidbitskey = 8 * (Keylen % 4);
 800300e:	f001 0303 	and.w	r3, r1, #3
 8003012:	00db      	lsls	r3, r3, #3
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HMAC_MD5(uint8_t *Key, uint32_t Keylen, uint8_t *Input, 
                     uint32_t Ilen, uint8_t Output[16])
{
 8003014:	460d      	mov	r5, r1
 8003016:	4616      	mov	r6, r2
 8003018:	4604      	mov	r4, r0

  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);

  /* Number of valid bits in last word of the Key */
  nbvalidbitskey = 8 * (Keylen % 4);
 800301a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HMAC_MD5(uint8_t *Key, uint32_t Keylen, uint8_t *Input, 
                     uint32_t Ilen, uint8_t Output[16])
{
 800301e:	9f14      	ldr	r7, [sp, #80]	; 0x50

  /* Number of valid bits in last word of the Key */
  nbvalidbitskey = 8 * (Keylen % 4);
   
  /* HASH peripheral initialization */
  HASH_DeInit();
 8003020:	f7ff fec4 	bl	8002dac <HASH_DeInit>

  /* HASH Configuration */
  MD5_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_MD5;
 8003024:	2380      	movs	r3, #128	; 0x80
 8003026:	9306      	str	r3, [sp, #24]
  MD5_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HMAC;
 8003028:	2340      	movs	r3, #64	; 0x40
 800302a:	9307      	str	r3, [sp, #28]
  MD5_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 800302c:	2320      	movs	r3, #32
  if(Keylen > 64)
 800302e:	2d40      	cmp	r5, #64	; 0x40
  HASH_DeInit();

  /* HASH Configuration */
  MD5_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_MD5;
  MD5_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HMAC;
  MD5_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 8003030:	9308      	str	r3, [sp, #32]
  else
  {
    /* HMAC short Key */
    MD5_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
  }
  HASH_Init(&MD5_HASH_InitStructure);
 8003032:	a806      	add	r0, sp, #24
  MD5_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HMAC;
  MD5_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
  if(Keylen > 64)
  {
    /* HMAC long Key */
    MD5_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_LongKey;
 8003034:	bf8a      	itet	hi
 8003036:	f44f 3380 	movhi.w	r3, #65536	; 0x10000
  }
  else
  {
    /* HMAC short Key */
    MD5_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
 800303a:	f8cd 8024 	strls.w	r8, [sp, #36]	; 0x24
  MD5_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HMAC;
  MD5_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
  if(Keylen > 64)
  {
    /* HMAC long Key */
    MD5_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_LongKey;
 800303e:	9309      	strhi	r3, [sp, #36]	; 0x24
  else
  {
    /* HMAC short Key */
    MD5_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
  }
  HASH_Init(&MD5_HASH_InitStructure);
 8003040:	f7ff febf 	bl	8002dc2 <HASH_Init>

  /* Configure the number of valid bits in last word of the Key */
  HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 8003044:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 8003048:	b280      	uxth	r0, r0
 800304a:	f7ff fee7 	bl	8002e1c <HASH_SetLastWordValidBitsNbr>

  /* Write the Key */
  for(i=0; i<Keylen; i+=4)
 800304e:	f04f 0800 	mov.w	r8, #0
 8003052:	e005      	b.n	8003060 <HMAC_MD5+0x74>
  {
    HASH_DataIn(*(uint32_t*)keyaddr);
 8003054:	f854 0008 	ldr.w	r0, [r4, r8]
 8003058:	f7ff feec 	bl	8002e34 <HASH_DataIn>

  /* Configure the number of valid bits in last word of the Key */
  HASH_SetLastWordValidBitsNbr(nbvalidbitskey);

  /* Write the Key */
  for(i=0; i<Keylen; i+=4)
 800305c:	f108 0804 	add.w	r8, r8, #4
 8003060:	45a8      	cmp	r8, r5
 8003062:	d3f7      	bcc.n	8003054 <HMAC_MD5+0x68>
    HASH_DataIn(*(uint32_t*)keyaddr);
    keyaddr+=4;
  }
  
  /* Start the HASH processor */
  HASH_StartDigest();
 8003064:	f7ff ff02 	bl	8002e6c <HASH_StartDigest>

  /* wait until the Busy flag is RESET */
  do
  {
    busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 8003068:	2008      	movs	r0, #8
 800306a:	f7ff ff4f 	bl	8002f0c <HASH_GetFlagStatus>
    counter++;
 800306e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003070:	3301      	adds	r3, #1
 8003072:	930a      	str	r3, [sp, #40]	; 0x28
  }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 8003074:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003076:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800307a:	d002      	beq.n	8003082 <HMAC_MD5+0x96>
 800307c:	2800      	cmp	r0, #0
 800307e:	d1f3      	bne.n	8003068 <HMAC_MD5+0x7c>
 8003080:	e001      	b.n	8003086 <HMAC_MD5+0x9a>

  if (busystatus != RESET)
 8003082:	2800      	cmp	r0, #0
 8003084:	d152      	bne.n	800312c <HMAC_MD5+0x140>
     status = ERROR;
  }
  else
  {
    /* Configure the number of valid bits in last word of the Input data */
    HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
 8003086:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
 800308a:	b280      	uxth	r0, r0
 800308c:	f7ff fec6 	bl	8002e1c <HASH_SetLastWordValidBitsNbr>

    /* Write the Input block in the IN FIFO */
    for(i=0; i<Ilen; i+=4)
 8003090:	f04f 0800 	mov.w	r8, #0
 8003094:	e005      	b.n	80030a2 <HMAC_MD5+0xb6>
    {
      HASH_DataIn(*(uint32_t*)inputaddr);
 8003096:	f856 0008 	ldr.w	r0, [r6, r8]
 800309a:	f7ff fecb 	bl	8002e34 <HASH_DataIn>
  {
    /* Configure the number of valid bits in last word of the Input data */
    HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);

    /* Write the Input block in the IN FIFO */
    for(i=0; i<Ilen; i+=4)
 800309e:	f108 0804 	add.w	r8, r8, #4
 80030a2:	45c8      	cmp	r8, r9
 80030a4:	d3f7      	bcc.n	8003096 <HMAC_MD5+0xaa>
      HASH_DataIn(*(uint32_t*)inputaddr);
      inputaddr+=4;
    }

    /* Start the HASH processor */
    HASH_StartDigest();
 80030a6:	f7ff fee1 	bl	8002e6c <HASH_StartDigest>

    /* wait until the Busy flag is RESET */
    counter =0;
 80030aa:	2300      	movs	r3, #0
 80030ac:	930a      	str	r3, [sp, #40]	; 0x28
    do
    {
       busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 80030ae:	2008      	movs	r0, #8
 80030b0:	f7ff ff2c 	bl	8002f0c <HASH_GetFlagStatus>
       counter++;
 80030b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80030b6:	3301      	adds	r3, #1
 80030b8:	930a      	str	r3, [sp, #40]	; 0x28
    }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 80030ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80030bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030c0:	d002      	beq.n	80030c8 <HMAC_MD5+0xdc>
 80030c2:	2800      	cmp	r0, #0
 80030c4:	d1f3      	bne.n	80030ae <HMAC_MD5+0xc2>
 80030c6:	e001      	b.n	80030cc <HMAC_MD5+0xe0>

    if (busystatus != RESET)
 80030c8:	2800      	cmp	r0, #0
 80030ca:	d12f      	bne.n	800312c <HMAC_MD5+0x140>
      status = ERROR;
    }
    else
    {  
      /* Configure the number of valid bits in last word of the Key */
      HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 80030cc:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 80030d0:	b280      	uxth	r0, r0
 80030d2:	f7ff fea3 	bl	8002e1c <HASH_SetLastWordValidBitsNbr>

      /* Write the Key */
      keyaddr = (uint32_t)Key;
      for(i=0; i<Keylen; i+=4)
 80030d6:	2600      	movs	r6, #0
 80030d8:	e003      	b.n	80030e2 <HMAC_MD5+0xf6>
      {
        HASH_DataIn(*(uint32_t*)keyaddr);
 80030da:	59a0      	ldr	r0, [r4, r6]
 80030dc:	f7ff feaa 	bl	8002e34 <HASH_DataIn>
      /* Configure the number of valid bits in last word of the Key */
      HASH_SetLastWordValidBitsNbr(nbvalidbitskey);

      /* Write the Key */
      keyaddr = (uint32_t)Key;
      for(i=0; i<Keylen; i+=4)
 80030e0:	3604      	adds	r6, #4
 80030e2:	42ae      	cmp	r6, r5
 80030e4:	d3f9      	bcc.n	80030da <HMAC_MD5+0xee>
        HASH_DataIn(*(uint32_t*)keyaddr);
        keyaddr+=4;
      }
  
       /* Start the HASH processor */
       HASH_StartDigest();
 80030e6:	f7ff fec1 	bl	8002e6c <HASH_StartDigest>

       /* wait until the Busy flag is RESET */
       counter =0;
 80030ea:	2300      	movs	r3, #0
 80030ec:	930a      	str	r3, [sp, #40]	; 0x28
       do
       {
          busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 80030ee:	2008      	movs	r0, #8
 80030f0:	f7ff ff0c 	bl	8002f0c <HASH_GetFlagStatus>
          counter++;
 80030f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80030f6:	3301      	adds	r3, #1
 80030f8:	930a      	str	r3, [sp, #40]	; 0x28
      }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 80030fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80030fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003100:	d002      	beq.n	8003108 <HMAC_MD5+0x11c>
 8003102:	2800      	cmp	r0, #0
 8003104:	d1f3      	bne.n	80030ee <HMAC_MD5+0x102>
 8003106:	e000      	b.n	800310a <HMAC_MD5+0x11e>

      if (busystatus != RESET)
 8003108:	b980      	cbnz	r0, 800312c <HMAC_MD5+0x140>
         status = ERROR;
      }
      else
      {
         /* Read the message digest */
         HASH_GetDigest(&MD5_MessageDigest);
 800310a:	a801      	add	r0, sp, #4
 800310c:	f7ff fea0 	bl	8002e50 <HASH_GetDigest>
 8003110:	9b01      	ldr	r3, [sp, #4]
 8003112:	ba1b      	rev	r3, r3
         *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[0]);
 8003114:	603b      	str	r3, [r7, #0]
 8003116:	9b02      	ldr	r3, [sp, #8]
 8003118:	ba1b      	rev	r3, r3
         outputaddr+=4;
         *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[1]);
 800311a:	607b      	str	r3, [r7, #4]
 800311c:	9b03      	ldr	r3, [sp, #12]
 800311e:	ba1b      	rev	r3, r3
         outputaddr+=4;
         *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[2]);
 8003120:	60bb      	str	r3, [r7, #8]
 8003122:	9b04      	ldr	r3, [sp, #16]
 8003124:	ba1b      	rev	r3, r3
  __IO uint16_t nbvalidbitsdata = 0;
  __IO uint16_t nbvalidbitskey = 0;
  uint32_t i = 0;
  __IO uint32_t counter = 0;
  uint32_t busystatus = 0;
  ErrorStatus status = SUCCESS;
 8003126:	2001      	movs	r0, #1
         outputaddr+=4;
         *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[1]);
         outputaddr+=4;
         *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[2]);
         outputaddr+=4;
         *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[3]);
 8003128:	60fb      	str	r3, [r7, #12]
 800312a:	e000      	b.n	800312e <HMAC_MD5+0x142>
          counter++;
      }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));

      if (busystatus != RESET)
      {
         status = ERROR;
 800312c:	2000      	movs	r0, #0
         *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[3]);
      }
    }
  }
  return status;  
}
 800312e:	b00d      	add	sp, #52	; 0x34
 8003130:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08003134 <HASH_SHA1>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HASH_SHA1(uint8_t *Input, uint32_t Ilen, uint8_t Output[20])
{
 8003134:	b5f0      	push	{r4, r5, r6, r7, lr}
  ErrorStatus status = SUCCESS;
  uint32_t inputaddr  = (uint32_t)Input;
  uint32_t outputaddr = (uint32_t)Output;

  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 8003136:	f001 0303 	and.w	r3, r1, #3
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HASH_SHA1(uint8_t *Input, uint32_t Ilen, uint8_t Output[20])
{
 800313a:	b08d      	sub	sp, #52	; 0x34
  HASH_InitTypeDef SHA1_HASH_InitStructure;
  HASH_MsgDigest SHA1_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
 800313c:	2700      	movs	r7, #0
  ErrorStatus status = SUCCESS;
  uint32_t inputaddr  = (uint32_t)Input;
  uint32_t outputaddr = (uint32_t)Output;

  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 800313e:	00db      	lsls	r3, r3, #3
  */
ErrorStatus HASH_SHA1(uint8_t *Input, uint32_t Ilen, uint8_t Output[20])
{
  HASH_InitTypeDef SHA1_HASH_InitStructure;
  HASH_MsgDigest SHA1_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
 8003140:	f8ad 702e 	strh.w	r7, [sp, #46]	; 0x2e
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HASH_SHA1(uint8_t *Input, uint32_t Ilen, uint8_t Output[20])
{
 8003144:	4604      	mov	r4, r0
 8003146:	460d      	mov	r5, r1
 8003148:	4616      	mov	r6, r2
  HASH_InitTypeDef SHA1_HASH_InitStructure;
  HASH_MsgDigest SHA1_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
  uint32_t i = 0;
  __IO uint32_t counter = 0;
 800314a:	970a      	str	r7, [sp, #40]	; 0x28
  ErrorStatus status = SUCCESS;
  uint32_t inputaddr  = (uint32_t)Input;
  uint32_t outputaddr = (uint32_t)Output;

  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 800314c:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e

  /* HASH peripheral initialization */
  HASH_DeInit();
 8003150:	f7ff fe2c 	bl	8002dac <HASH_DeInit>

  /* HASH Configuration */
  SHA1_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_SHA1;
  SHA1_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HASH;
  SHA1_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 8003154:	2320      	movs	r3, #32
  HASH_Init(&SHA1_HASH_InitStructure);
 8003156:	a806      	add	r0, sp, #24

  /* HASH peripheral initialization */
  HASH_DeInit();

  /* HASH Configuration */
  SHA1_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_SHA1;
 8003158:	9706      	str	r7, [sp, #24]
  SHA1_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HASH;
 800315a:	9707      	str	r7, [sp, #28]
  SHA1_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 800315c:	9308      	str	r3, [sp, #32]
  HASH_Init(&SHA1_HASH_InitStructure);
 800315e:	f7ff fe30 	bl	8002dc2 <HASH_Init>

  /* Configure the number of valid bits in last word of the data */
  HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
 8003162:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 8003166:	b280      	uxth	r0, r0
 8003168:	f7ff fe58 	bl	8002e1c <HASH_SetLastWordValidBitsNbr>

  /* Write the Input block in the IN FIFO */
  for(i=0; i<Ilen; i+=4)
 800316c:	e003      	b.n	8003176 <HASH_SHA1+0x42>
  {
    HASH_DataIn(*(uint32_t*)inputaddr);
 800316e:	59e0      	ldr	r0, [r4, r7]
 8003170:	f7ff fe60 	bl	8002e34 <HASH_DataIn>

  /* Configure the number of valid bits in last word of the data */
  HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);

  /* Write the Input block in the IN FIFO */
  for(i=0; i<Ilen; i+=4)
 8003174:	3704      	adds	r7, #4
 8003176:	42af      	cmp	r7, r5
 8003178:	d3f9      	bcc.n	800316e <HASH_SHA1+0x3a>
    HASH_DataIn(*(uint32_t*)inputaddr);
    inputaddr+=4;
  }

  /* Start the HASH processor */
  HASH_StartDigest();
 800317a:	f7ff fe77 	bl	8002e6c <HASH_StartDigest>

  /* wait until the Busy flag is RESET */
  do
  {
    busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 800317e:	2008      	movs	r0, #8
 8003180:	f7ff fec4 	bl	8002f0c <HASH_GetFlagStatus>
    counter++;
 8003184:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003186:	3301      	adds	r3, #1
 8003188:	930a      	str	r3, [sp, #40]	; 0x28
  }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 800318a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800318c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003190:	d002      	beq.n	8003198 <HASH_SHA1+0x64>
 8003192:	2800      	cmp	r0, #0
 8003194:	d1f3      	bne.n	800317e <HASH_SHA1+0x4a>
 8003196:	e000      	b.n	800319a <HASH_SHA1+0x66>

  if (busystatus != RESET)
 8003198:	b998      	cbnz	r0, 80031c2 <HASH_SHA1+0x8e>
     status = ERROR;
  }
  else
  {
    /* Read the message digest */
    HASH_GetDigest(&SHA1_MessageDigest);
 800319a:	a801      	add	r0, sp, #4
 800319c:	f7ff fe58 	bl	8002e50 <HASH_GetDigest>
 80031a0:	9b01      	ldr	r3, [sp, #4]
 80031a2:	ba1b      	rev	r3, r3
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[0]);
 80031a4:	6033      	str	r3, [r6, #0]
 80031a6:	9b02      	ldr	r3, [sp, #8]
 80031a8:	ba1b      	rev	r3, r3
    outputaddr+=4;
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[1]);
 80031aa:	6073      	str	r3, [r6, #4]
 80031ac:	9b03      	ldr	r3, [sp, #12]
 80031ae:	ba1b      	rev	r3, r3
    outputaddr+=4;
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[2]);
 80031b0:	60b3      	str	r3, [r6, #8]
 80031b2:	9b04      	ldr	r3, [sp, #16]
 80031b4:	ba1b      	rev	r3, r3
    outputaddr+=4;
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[3]);
 80031b6:	60f3      	str	r3, [r6, #12]
 80031b8:	9b05      	ldr	r3, [sp, #20]
 80031ba:	ba1b      	rev	r3, r3
  HASH_MsgDigest SHA1_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
  uint32_t i = 0;
  __IO uint32_t counter = 0;
  uint32_t busystatus = 0;
  ErrorStatus status = SUCCESS;
 80031bc:	2001      	movs	r0, #1
    outputaddr+=4;
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[2]);
    outputaddr+=4;
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[3]);
    outputaddr+=4;
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[4]);
 80031be:	6133      	str	r3, [r6, #16]
 80031c0:	e000      	b.n	80031c4 <HASH_SHA1+0x90>
    counter++;
  }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));

  if (busystatus != RESET)
  {
     status = ERROR;
 80031c2:	2000      	movs	r0, #0
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[3]);
    outputaddr+=4;
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[4]);
  }
  return status;
}
 80031c4:	b00d      	add	sp, #52	; 0x34
 80031c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080031c8 <HMAC_SHA1>:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HMAC_SHA1(uint8_t *Key, uint32_t Keylen, uint8_t *Input,
                      uint32_t Ilen, uint8_t Output[20])
{
 80031c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80031cc:	4699      	mov	r9, r3
 80031ce:	b08d      	sub	sp, #52	; 0x34
  uint32_t keyaddr    = (uint32_t)Key;
  uint32_t inputaddr  = (uint32_t)Input;
  uint32_t outputaddr = (uint32_t)Output;

  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 80031d0:	f003 0303 	and.w	r3, r3, #3
ErrorStatus HMAC_SHA1(uint8_t *Key, uint32_t Keylen, uint8_t *Input,
                      uint32_t Ilen, uint8_t Output[20])
{
  HASH_InitTypeDef SHA1_HASH_InitStructure;
  HASH_MsgDigest SHA1_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
 80031d4:	f04f 0800 	mov.w	r8, #0
  uint32_t keyaddr    = (uint32_t)Key;
  uint32_t inputaddr  = (uint32_t)Input;
  uint32_t outputaddr = (uint32_t)Output;

  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 80031d8:	00db      	lsls	r3, r3, #3
ErrorStatus HMAC_SHA1(uint8_t *Key, uint32_t Keylen, uint8_t *Input,
                      uint32_t Ilen, uint8_t Output[20])
{
  HASH_InitTypeDef SHA1_HASH_InitStructure;
  HASH_MsgDigest SHA1_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
 80031da:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
  __IO uint16_t nbvalidbitskey = 0;
 80031de:	f8ad 802e 	strh.w	r8, [sp, #46]	; 0x2e
  uint32_t i = 0;
  __IO uint32_t counter = 0;
 80031e2:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  uint32_t keyaddr    = (uint32_t)Key;
  uint32_t inputaddr  = (uint32_t)Input;
  uint32_t outputaddr = (uint32_t)Output;

  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 80031e6:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c

  /* Number of valid bits in last word of the Key */
  nbvalidbitskey = 8 * (Keylen % 4);
 80031ea:	f001 0303 	and.w	r3, r1, #3
 80031ee:	00db      	lsls	r3, r3, #3
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HMAC_SHA1(uint8_t *Key, uint32_t Keylen, uint8_t *Input,
                      uint32_t Ilen, uint8_t Output[20])
{
 80031f0:	460d      	mov	r5, r1
 80031f2:	4616      	mov	r6, r2
 80031f4:	4604      	mov	r4, r0

  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);

  /* Number of valid bits in last word of the Key */
  nbvalidbitskey = 8 * (Keylen % 4);
 80031f6:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HMAC_SHA1(uint8_t *Key, uint32_t Keylen, uint8_t *Input,
                      uint32_t Ilen, uint8_t Output[20])
{
 80031fa:	9f14      	ldr	r7, [sp, #80]	; 0x50

  /* Number of valid bits in last word of the Key */
  nbvalidbitskey = 8 * (Keylen % 4);

  /* HASH peripheral initialization */
  HASH_DeInit();
 80031fc:	f7ff fdd6 	bl	8002dac <HASH_DeInit>

  /* HASH Configuration */
  SHA1_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_SHA1;
  SHA1_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HMAC;
 8003200:	2340      	movs	r3, #64	; 0x40
 8003202:	9307      	str	r3, [sp, #28]
  SHA1_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 8003204:	2320      	movs	r3, #32
  if(Keylen > 64)
 8003206:	2d40      	cmp	r5, #64	; 0x40
  HASH_DeInit();

  /* HASH Configuration */
  SHA1_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_SHA1;
  SHA1_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HMAC;
  SHA1_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 8003208:	9308      	str	r3, [sp, #32]
  else
  {
    /* HMAC short Key */
    SHA1_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
  }
  HASH_Init(&SHA1_HASH_InitStructure);
 800320a:	a806      	add	r0, sp, #24
  SHA1_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HMAC;
  SHA1_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
  if(Keylen > 64)
  {
    /* HMAC long Key */
    SHA1_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_LongKey;
 800320c:	bf8c      	ite	hi
 800320e:	f44f 3380 	movhi.w	r3, #65536	; 0x10000
  }
  else
  {
    /* HMAC short Key */
    SHA1_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
 8003212:	f8cd 8024 	strls.w	r8, [sp, #36]	; 0x24

  /* HASH peripheral initialization */
  HASH_DeInit();

  /* HASH Configuration */
  SHA1_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_SHA1;
 8003216:	f8cd 8018 	str.w	r8, [sp, #24]
  SHA1_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HMAC;
  SHA1_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
  if(Keylen > 64)
  {
    /* HMAC long Key */
    SHA1_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_LongKey;
 800321a:	bf88      	it	hi
 800321c:	9309      	strhi	r3, [sp, #36]	; 0x24
  else
  {
    /* HMAC short Key */
    SHA1_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
  }
  HASH_Init(&SHA1_HASH_InitStructure);
 800321e:	f7ff fdd0 	bl	8002dc2 <HASH_Init>

  /* Configure the number of valid bits in last word of the Key */
  HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 8003222:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 8003226:	b280      	uxth	r0, r0
 8003228:	f7ff fdf8 	bl	8002e1c <HASH_SetLastWordValidBitsNbr>

  /* Write the Key */
  for(i=0; i<Keylen; i+=4)
 800322c:	f04f 0800 	mov.w	r8, #0
 8003230:	e005      	b.n	800323e <HMAC_SHA1+0x76>
  {
    HASH_DataIn(*(uint32_t*)keyaddr);
 8003232:	f854 0008 	ldr.w	r0, [r4, r8]
 8003236:	f7ff fdfd 	bl	8002e34 <HASH_DataIn>

  /* Configure the number of valid bits in last word of the Key */
  HASH_SetLastWordValidBitsNbr(nbvalidbitskey);

  /* Write the Key */
  for(i=0; i<Keylen; i+=4)
 800323a:	f108 0804 	add.w	r8, r8, #4
 800323e:	45a8      	cmp	r8, r5
 8003240:	d3f7      	bcc.n	8003232 <HMAC_SHA1+0x6a>
    HASH_DataIn(*(uint32_t*)keyaddr);
    keyaddr+=4;
  }

  /* Start the HASH processor */
  HASH_StartDigest();
 8003242:	f7ff fe13 	bl	8002e6c <HASH_StartDigest>

  /* wait until the Busy flag is RESET */
  do
  {
    busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 8003246:	2008      	movs	r0, #8
 8003248:	f7ff fe60 	bl	8002f0c <HASH_GetFlagStatus>
    counter++;
 800324c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800324e:	3301      	adds	r3, #1
 8003250:	930a      	str	r3, [sp, #40]	; 0x28
  }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 8003252:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003254:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003258:	d002      	beq.n	8003260 <HMAC_SHA1+0x98>
 800325a:	2800      	cmp	r0, #0
 800325c:	d1f3      	bne.n	8003246 <HMAC_SHA1+0x7e>
 800325e:	e001      	b.n	8003264 <HMAC_SHA1+0x9c>

  if (busystatus != RESET)
 8003260:	2800      	cmp	r0, #0
 8003262:	d155      	bne.n	8003310 <HMAC_SHA1+0x148>
     status = ERROR;
  }
  else
  {
    /* Configure the number of valid bits in last word of the Input data */
    HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
 8003264:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
 8003268:	b280      	uxth	r0, r0
 800326a:	f7ff fdd7 	bl	8002e1c <HASH_SetLastWordValidBitsNbr>

    /* Write the Input block in the IN FIFO */
    for(i=0; i<Ilen; i+=4)
 800326e:	f04f 0800 	mov.w	r8, #0
 8003272:	e005      	b.n	8003280 <HMAC_SHA1+0xb8>
    {
      HASH_DataIn(*(uint32_t*)inputaddr);
 8003274:	f856 0008 	ldr.w	r0, [r6, r8]
 8003278:	f7ff fddc 	bl	8002e34 <HASH_DataIn>
  {
    /* Configure the number of valid bits in last word of the Input data */
    HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);

    /* Write the Input block in the IN FIFO */
    for(i=0; i<Ilen; i+=4)
 800327c:	f108 0804 	add.w	r8, r8, #4
 8003280:	45c8      	cmp	r8, r9
 8003282:	d3f7      	bcc.n	8003274 <HMAC_SHA1+0xac>
      HASH_DataIn(*(uint32_t*)inputaddr);
      inputaddr+=4;
    }

    /* Start the HASH processor */
    HASH_StartDigest();
 8003284:	f7ff fdf2 	bl	8002e6c <HASH_StartDigest>


    /* wait until the Busy flag is RESET */
    counter =0;
 8003288:	2300      	movs	r3, #0
 800328a:	930a      	str	r3, [sp, #40]	; 0x28
    do
    {
      busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 800328c:	2008      	movs	r0, #8
 800328e:	f7ff fe3d 	bl	8002f0c <HASH_GetFlagStatus>
      counter++;
 8003292:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003294:	3301      	adds	r3, #1
 8003296:	930a      	str	r3, [sp, #40]	; 0x28
    }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 8003298:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800329a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800329e:	d002      	beq.n	80032a6 <HMAC_SHA1+0xde>
 80032a0:	2800      	cmp	r0, #0
 80032a2:	d1f3      	bne.n	800328c <HMAC_SHA1+0xc4>
 80032a4:	e001      	b.n	80032aa <HMAC_SHA1+0xe2>

    if (busystatus != RESET)
 80032a6:	2800      	cmp	r0, #0
 80032a8:	d132      	bne.n	8003310 <HMAC_SHA1+0x148>
      status = ERROR;
    }
    else
    {  
      /* Configure the number of valid bits in last word of the Key */
      HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 80032aa:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 80032ae:	b280      	uxth	r0, r0
 80032b0:	f7ff fdb4 	bl	8002e1c <HASH_SetLastWordValidBitsNbr>

      /* Write the Key */
      keyaddr = (uint32_t)Key;
      for(i=0; i<Keylen; i+=4)
 80032b4:	2600      	movs	r6, #0
 80032b6:	e003      	b.n	80032c0 <HMAC_SHA1+0xf8>
      {
        HASH_DataIn(*(uint32_t*)keyaddr);
 80032b8:	59a0      	ldr	r0, [r4, r6]
 80032ba:	f7ff fdbb 	bl	8002e34 <HASH_DataIn>
      /* Configure the number of valid bits in last word of the Key */
      HASH_SetLastWordValidBitsNbr(nbvalidbitskey);

      /* Write the Key */
      keyaddr = (uint32_t)Key;
      for(i=0; i<Keylen; i+=4)
 80032be:	3604      	adds	r6, #4
 80032c0:	42ae      	cmp	r6, r5
 80032c2:	d3f9      	bcc.n	80032b8 <HMAC_SHA1+0xf0>
        HASH_DataIn(*(uint32_t*)keyaddr);
        keyaddr+=4;
      }

      /* Start the HASH processor */
      HASH_StartDigest();
 80032c4:	f7ff fdd2 	bl	8002e6c <HASH_StartDigest>

      /* wait until the Busy flag is RESET */
      counter =0;
 80032c8:	2300      	movs	r3, #0
 80032ca:	930a      	str	r3, [sp, #40]	; 0x28
      do
      {
        busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 80032cc:	2008      	movs	r0, #8
 80032ce:	f7ff fe1d 	bl	8002f0c <HASH_GetFlagStatus>
        counter++;
 80032d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80032d4:	3301      	adds	r3, #1
 80032d6:	930a      	str	r3, [sp, #40]	; 0x28
      }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 80032d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80032da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032de:	d002      	beq.n	80032e6 <HMAC_SHA1+0x11e>
 80032e0:	2800      	cmp	r0, #0
 80032e2:	d1f3      	bne.n	80032cc <HMAC_SHA1+0x104>
 80032e4:	e000      	b.n	80032e8 <HMAC_SHA1+0x120>

      if (busystatus != RESET)
 80032e6:	b998      	cbnz	r0, 8003310 <HMAC_SHA1+0x148>
        status = ERROR;
      }
      else
      {
        /* Read the message digest */
        HASH_GetDigest(&SHA1_MessageDigest);
 80032e8:	a801      	add	r0, sp, #4
 80032ea:	f7ff fdb1 	bl	8002e50 <HASH_GetDigest>
 80032ee:	9b01      	ldr	r3, [sp, #4]
 80032f0:	ba1b      	rev	r3, r3
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[0]);
 80032f2:	603b      	str	r3, [r7, #0]
 80032f4:	9b02      	ldr	r3, [sp, #8]
 80032f6:	ba1b      	rev	r3, r3
        outputaddr+=4;
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[1]);
 80032f8:	607b      	str	r3, [r7, #4]
 80032fa:	9b03      	ldr	r3, [sp, #12]
 80032fc:	ba1b      	rev	r3, r3
        outputaddr+=4;
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[2]);
 80032fe:	60bb      	str	r3, [r7, #8]
 8003300:	9b04      	ldr	r3, [sp, #16]
 8003302:	ba1b      	rev	r3, r3
        outputaddr+=4;
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[3]);
 8003304:	60fb      	str	r3, [r7, #12]
 8003306:	9b05      	ldr	r3, [sp, #20]
 8003308:	ba1b      	rev	r3, r3
  __IO uint16_t nbvalidbitsdata = 0;
  __IO uint16_t nbvalidbitskey = 0;
  uint32_t i = 0;
  __IO uint32_t counter = 0;
  uint32_t busystatus = 0;
  ErrorStatus status = SUCCESS;
 800330a:	2001      	movs	r0, #1
        outputaddr+=4;
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[2]);
        outputaddr+=4;
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[3]);
        outputaddr+=4;
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[4]);
 800330c:	613b      	str	r3, [r7, #16]
 800330e:	e000      	b.n	8003312 <HMAC_SHA1+0x14a>
        counter++;
      }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));

      if (busystatus != RESET)
      {
        status = ERROR;
 8003310:	2000      	movs	r0, #0
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[4]);
      }
    }  
  }
  return status;  
}
 8003312:	b00d      	add	sp, #52	; 0x34
 8003314:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08003318 <I2C_DeInit>:
  * @brief  Deinitialize the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 8003318:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 800331a:	4b13      	ldr	r3, [pc, #76]	; (8003368 <I2C_DeInit+0x50>)
 800331c:	4298      	cmp	r0, r3
 800331e:	d107      	bne.n	8003330 <I2C_DeInit+0x18>
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 8003320:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8003324:	2101      	movs	r1, #1
 8003326:	f000 fc15 	bl	8003b54 <RCC_APB1PeriphResetCmd>
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
 800332a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800332e:	e014      	b.n	800335a <I2C_DeInit+0x42>
  }
  else if (I2Cx == I2C2)
 8003330:	4b0e      	ldr	r3, [pc, #56]	; (800336c <I2C_DeInit+0x54>)
 8003332:	4298      	cmp	r0, r3
 8003334:	d107      	bne.n	8003346 <I2C_DeInit+0x2e>
  {
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 8003336:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800333a:	2101      	movs	r1, #1
 800333c:	f000 fc0a 	bl	8003b54 <RCC_APB1PeriphResetCmd>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
 8003340:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8003344:	e009      	b.n	800335a <I2C_DeInit+0x42>
  }
  else 
  {
    if (I2Cx == I2C3)
 8003346:	4b0a      	ldr	r3, [pc, #40]	; (8003370 <I2C_DeInit+0x58>)
 8003348:	4298      	cmp	r0, r3
 800334a:	d10b      	bne.n	8003364 <I2C_DeInit+0x4c>
    {
      /* Enable I2C3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
 800334c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8003350:	2101      	movs	r1, #1
 8003352:	f000 fbff 	bl	8003b54 <RCC_APB1PeriphResetCmd>
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 8003356:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800335a:	2100      	movs	r1, #0
    }
  }
}
 800335c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if (I2Cx == I2C3)
    {
      /* Enable I2C3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 8003360:	f000 bbf8 	b.w	8003b54 <RCC_APB1PeriphResetCmd>
 8003364:	bd08      	pop	{r3, pc}
 8003366:	bf00      	nop
 8003368:	40005400 	.word	0x40005400
 800336c:	40005800 	.word	0x40005800
 8003370:	40005c00 	.word	0x40005c00

08003374 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8003374:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8003376:	4604      	mov	r4, r0
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 8003378:	8886      	ldrh	r6, [r0, #4]
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 800337a:	4668      	mov	r0, sp
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 800337c:	460d      	mov	r5, r1
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 800337e:	f000 fb19 	bl	80039b4 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 8003382:	9902      	ldr	r1, [sp, #8]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 8003384:	482c      	ldr	r0, [pc, #176]	; (8003438 <I2C_Init+0xc4>)
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8003386:	682b      	ldr	r3, [r5, #0]

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 8003388:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
 800338c:	0436      	lsls	r6, r6, #16
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
  pclk1 = rcc_clocks.PCLK1_Frequency;
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 800338e:	fbb1 f0f0 	udiv	r0, r1, r0

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 8003392:	0c36      	lsrs	r6, r6, #16
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
  pclk1 = rcc_clocks.PCLK1_Frequency;
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 8003394:	b280      	uxth	r0, r0
  tmpreg |= freqrange;
 8003396:	4306      	orrs	r6, r0
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 8003398:	80a6      	strh	r6, [r4, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 800339a:	8822      	ldrh	r2, [r4, #0]
 800339c:	f022 0201 	bic.w	r2, r2, #1
 80033a0:	0412      	lsls	r2, r2, #16
 80033a2:	0c12      	lsrs	r2, r2, #16
 80033a4:	8022      	strh	r2, [r4, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 80033a6:	4a25      	ldr	r2, [pc, #148]	; (800343c <I2C_Init+0xc8>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d80a      	bhi.n	80033c2 <I2C_Init+0x4e>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	fbb1 f3f3 	udiv	r3, r1, r3
      result = 0x04;  
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 80033b2:	3001      	adds	r0, #1

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 80033b4:	b29b      	uxth	r3, r3
      result = 0x04;  
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 80033b6:	b280      	uxth	r0, r0
 80033b8:	8420      	strh	r0, [r4, #32]
    {
      /* Set minimum allowed value */
      result = 0x04;  
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 80033ba:	2b03      	cmp	r3, #3
 80033bc:	bf98      	it	ls
 80033be:	2304      	movls	r3, #4
 80033c0:	e021      	b.n	8003406 <I2C_Init+0x92>
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 80033c2:	88ee      	ldrh	r6, [r5, #6]
 80033c4:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 80033c8:	4296      	cmp	r6, r2
 80033ca:	d105      	bne.n	80033d8 <I2C_Init+0x64>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 80033cc:	2203      	movs	r2, #3
 80033ce:	4353      	muls	r3, r2
 80033d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	e006      	b.n	80033e6 <I2C_Init+0x72>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 80033d8:	2219      	movs	r2, #25
 80033da:	4353      	muls	r3, r2
 80033dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80033e0:	b29b      	uxth	r3, r3
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 80033e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 80033e6:	051a      	lsls	r2, r3, #20
      result |= (uint16_t)0x0001;  
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 80033e8:	f44f 7296 	mov.w	r2, #300	; 0x12c

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 80033ec:	bf08      	it	eq
 80033ee:	f043 0301 	orreq.w	r3, r3, #1
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 80033f2:	4350      	muls	r0, r2
 80033f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80033f8:	fb90 f0f2 	sdiv	r0, r0, r2
 80033fc:	3001      	adds	r0, #1
 80033fe:	b280      	uxth	r0, r0
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 8003400:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8003404:	8420      	strh	r0, [r4, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 8003406:	83a3      	strh	r3, [r4, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 8003408:	8823      	ldrh	r3, [r4, #0]
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 800340a:	8969      	ldrh	r1, [r5, #10]
 800340c:	88aa      	ldrh	r2, [r5, #4]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 800340e:	b29b      	uxth	r3, r3
 8003410:	f043 0301 	orr.w	r3, r3, #1
 8003414:	8023      	strh	r3, [r4, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 8003416:	8823      	ldrh	r3, [r4, #0]
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 8003418:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 800341c:	f023 0302 	bic.w	r3, r3, #2
 8003420:	041b      	lsls	r3, r3, #16
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8003422:	430a      	orrs	r2, r1

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 8003424:	0c1b      	lsrs	r3, r3, #16
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8003426:	4313      	orrs	r3, r2
 8003428:	b29b      	uxth	r3, r3
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 800342a:	8023      	strh	r3, [r4, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 800342c:	892a      	ldrh	r2, [r5, #8]
 800342e:	89ab      	ldrh	r3, [r5, #12]
 8003430:	4313      	orrs	r3, r2
 8003432:	b29b      	uxth	r3, r3
 8003434:	8123      	strh	r3, [r4, #8]
}
 8003436:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
 8003438:	000f4240 	.word	0x000f4240
 800343c:	000186a0 	.word	0x000186a0

08003440 <I2C_StructInit>:
  */
void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
{
/*---------------- Reset I2C init structure parameters values ----------------*/
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
 8003440:	f241 3388 	movw	r3, #5000	; 0x1388
 8003444:	6003      	str	r3, [r0, #0]
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 8003446:	2300      	movs	r3, #0
 8003448:	8083      	strh	r3, [r0, #4]
  /* Initialize the I2C_DutyCycle member */
  I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 800344a:	f64b 72ff 	movw	r2, #49151	; 0xbfff
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
 800344e:	8103      	strh	r3, [r0, #8]
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
 8003450:	8143      	strh	r3, [r0, #10]
  /* Initialize the I2C_AcknowledgedAddress member */
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8003452:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
  /* Initialize the I2C_DutyCycle member */
  I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 8003456:	80c2      	strh	r2, [r0, #6]
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
  /* Initialize the I2C_AcknowledgedAddress member */
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8003458:	8183      	strh	r3, [r0, #12]
}
 800345a:	4770      	bx	lr

0800345c <I2C_Cmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 800345c:	8803      	ldrh	r3, [r0, #0]
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800345e:	b119      	cbz	r1, 8003468 <I2C_Cmd+0xc>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 8003460:	b29b      	uxth	r3, r3
 8003462:	f043 0301 	orr.w	r3, r3, #1
 8003466:	e003      	b.n	8003470 <I2C_Cmd+0x14>
  }
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8003468:	f023 0301 	bic.w	r3, r3, #1
 800346c:	041b      	lsls	r3, r3, #16
 800346e:	0c1b      	lsrs	r3, r3, #16
 8003470:	8003      	strh	r3, [r0, #0]
 8003472:	4770      	bx	lr

08003474 <I2C_GenerateSTART>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 8003474:	8803      	ldrh	r3, [r0, #0]
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003476:	b119      	cbz	r1, 8003480 <I2C_GenerateSTART+0xc>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 8003478:	b29b      	uxth	r3, r3
 800347a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800347e:	e003      	b.n	8003488 <I2C_GenerateSTART+0x14>
  }
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 8003480:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003484:	041b      	lsls	r3, r3, #16
 8003486:	0c1b      	lsrs	r3, r3, #16
 8003488:	8003      	strh	r3, [r0, #0]
 800348a:	4770      	bx	lr

0800348c <I2C_GenerateSTOP>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 800348c:	8803      	ldrh	r3, [r0, #0]
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800348e:	b119      	cbz	r1, 8003498 <I2C_GenerateSTOP+0xc>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 8003490:	b29b      	uxth	r3, r3
 8003492:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003496:	e003      	b.n	80034a0 <I2C_GenerateSTOP+0x14>
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 8003498:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800349c:	041b      	lsls	r3, r3, #16
 800349e:	0c1b      	lsrs	r3, r3, #16
 80034a0:	8003      	strh	r3, [r0, #0]
 80034a2:	4770      	bx	lr

080034a4 <I2C_Send7bitAddress>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 80034a4:	b112      	cbz	r2, 80034ac <I2C_Send7bitAddress+0x8>
  {
    /* Set the address bit0 for read */
    Address |= I2C_OAR1_ADD0;
 80034a6:	f041 0101 	orr.w	r1, r1, #1
 80034aa:	e001      	b.n	80034b0 <I2C_Send7bitAddress+0xc>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 80034ac:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
  }
  /* Send the address */
  I2Cx->DR = Address;
 80034b0:	8201      	strh	r1, [r0, #16]
}
 80034b2:	4770      	bx	lr

080034b4 <I2C_AcknowledgeConfig>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 80034b4:	8803      	ldrh	r3, [r0, #0]
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80034b6:	b119      	cbz	r1, 80034c0 <I2C_AcknowledgeConfig+0xc>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80034be:	e003      	b.n	80034c8 <I2C_AcknowledgeConfig+0x14>
  }
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 80034c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034c4:	041b      	lsls	r3, r3, #16
 80034c6:	0c1b      	lsrs	r3, r3, #16
 80034c8:	8003      	strh	r3, [r0, #0]
 80034ca:	4770      	bx	lr

080034cc <I2C_OwnAddress2Config>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Get the old register value */
  tmpreg = I2Cx->OAR2;
 80034cc:	8983      	ldrh	r3, [r0, #12]
 80034ce:	b29b      	uxth	r3, r3

  /* Reset I2Cx Own address2 bit [7:1] */
  tmpreg &= (uint16_t)~((uint16_t)I2C_OAR2_ADD2);

  /* Set I2Cx Own address2 */
  tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
 80034d0:	f001 01fe 	and.w	r1, r1, #254	; 0xfe

  /* Get the old register value */
  tmpreg = I2Cx->OAR2;

  /* Reset I2Cx Own address2 bit [7:1] */
  tmpreg &= (uint16_t)~((uint16_t)I2C_OAR2_ADD2);
 80034d4:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe

  /* Set I2Cx Own address2 */
  tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
 80034d8:	430b      	orrs	r3, r1

  /* Store the new register value */
  I2Cx->OAR2 = tmpreg;
 80034da:	8183      	strh	r3, [r0, #12]
}
 80034dc:	4770      	bx	lr

080034de <I2C_DualAddressCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable dual addressing mode */
    I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
 80034de:	8983      	ldrh	r3, [r0, #12]
void I2C_DualAddressCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80034e0:	b119      	cbz	r1, 80034ea <I2C_DualAddressCmd+0xc>
  {
    /* Enable dual addressing mode */
    I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	f043 0301 	orr.w	r3, r3, #1
 80034e8:	e003      	b.n	80034f2 <I2C_DualAddressCmd+0x14>
  }
  else
  {
    /* Disable dual addressing mode */
    I2Cx->OAR2 &= (uint16_t)~((uint16_t)I2C_OAR2_ENDUAL);
 80034ea:	f023 0301 	bic.w	r3, r3, #1
 80034ee:	041b      	lsls	r3, r3, #16
 80034f0:	0c1b      	lsrs	r3, r3, #16
 80034f2:	8183      	strh	r3, [r0, #12]
 80034f4:	4770      	bx	lr

080034f6 <I2C_GeneralCallCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable generall call */
    I2Cx->CR1 |= I2C_CR1_ENGC;
 80034f6:	8803      	ldrh	r3, [r0, #0]
void I2C_GeneralCallCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80034f8:	b119      	cbz	r1, 8003502 <I2C_GeneralCallCmd+0xc>
  {
    /* Enable generall call */
    I2Cx->CR1 |= I2C_CR1_ENGC;
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003500:	e003      	b.n	800350a <I2C_GeneralCallCmd+0x14>
  }
  else
  {
    /* Disable generall call */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENGC);
 8003502:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003506:	041b      	lsls	r3, r3, #16
 8003508:	0c1b      	lsrs	r3, r3, #16
 800350a:	8003      	strh	r3, [r0, #0]
 800350c:	4770      	bx	lr

0800350e <I2C_SoftwareResetCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Peripheral under reset */
    I2Cx->CR1 |= I2C_CR1_SWRST;
 800350e:	8803      	ldrh	r3, [r0, #0]
void I2C_SoftwareResetCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003510:	b129      	cbz	r1, 800351e <I2C_SoftwareResetCmd+0x10>
  {
    /* Peripheral under reset */
    I2Cx->CR1 |= I2C_CR1_SWRST;
 8003512:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003516:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800351a:	b29b      	uxth	r3, r3
 800351c:	e001      	b.n	8003522 <I2C_SoftwareResetCmd+0x14>
  }
  else
  {
    /* Peripheral not under reset */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_SWRST);
 800351e:	045b      	lsls	r3, r3, #17
 8003520:	0c5b      	lsrs	r3, r3, #17
 8003522:	8003      	strh	r3, [r0, #0]
 8003524:	4770      	bx	lr

08003526 <I2C_StretchClockCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState == DISABLE)
  {
    /* Enable the selected I2C Clock stretching */
    I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 8003526:	8803      	ldrh	r3, [r0, #0]
void I2C_StretchClockCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState == DISABLE)
 8003528:	b919      	cbnz	r1, 8003532 <I2C_StretchClockCmd+0xc>
  {
    /* Enable the selected I2C Clock stretching */
    I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 800352a:	b29b      	uxth	r3, r3
 800352c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003530:	e003      	b.n	800353a <I2C_StretchClockCmd+0x14>
  }
  else
  {
    /* Disable the selected I2C Clock stretching */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_NOSTRETCH);
 8003532:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003536:	041b      	lsls	r3, r3, #16
 8003538:	0c1b      	lsrs	r3, r3, #16
 800353a:	8003      	strh	r3, [r0, #0]
 800353c:	4770      	bx	lr

0800353e <I2C_FastModeDutyCycleConfig>:
void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
  if (I2C_DutyCycle != I2C_DutyCycle_16_9)
 800353e:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
  {
    /* I2C fast mode Tlow/Thigh=2 */
    I2Cx->CCR &= I2C_DutyCycle_2;
 8003542:	8b83      	ldrh	r3, [r0, #28]
void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
  if (I2C_DutyCycle != I2C_DutyCycle_16_9)
 8003544:	d004      	beq.n	8003550 <I2C_FastModeDutyCycleConfig+0x12>
  {
    /* I2C fast mode Tlow/Thigh=2 */
    I2Cx->CCR &= I2C_DutyCycle_2;
 8003546:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800354a:	041b      	lsls	r3, r3, #16
 800354c:	0c1b      	lsrs	r3, r3, #16
 800354e:	e002      	b.n	8003556 <I2C_FastModeDutyCycleConfig+0x18>
  }
  else
  {
    /* I2C fast mode Tlow/Thigh=16/9 */
    I2Cx->CCR |= I2C_DutyCycle_16_9;
 8003550:	b29b      	uxth	r3, r3
 8003552:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003556:	8383      	strh	r3, [r0, #28]
 8003558:	4770      	bx	lr

0800355a <I2C_NACKPositionConfig>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_NACK_POSITION(I2C_NACKPosition));
  
  /* Check the input parameter */
  if (I2C_NACKPosition == I2C_NACKPosition_Next)
 800355a:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
  {
    /* Next byte in shift register is the last received byte */
    I2Cx->CR1 |= I2C_NACKPosition_Next;
 800355e:	8803      	ldrh	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_NACK_POSITION(I2C_NACKPosition));
  
  /* Check the input parameter */
  if (I2C_NACKPosition == I2C_NACKPosition_Next)
 8003560:	d103      	bne.n	800356a <I2C_NACKPositionConfig+0x10>
  {
    /* Next byte in shift register is the last received byte */
    I2Cx->CR1 |= I2C_NACKPosition_Next;
 8003562:	b29b      	uxth	r3, r3
 8003564:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003568:	e003      	b.n	8003572 <I2C_NACKPositionConfig+0x18>
  }
  else
  {
    /* Current byte in shift register is the last received byte */
    I2Cx->CR1 &= I2C_NACKPosition_Current;
 800356a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800356e:	041b      	lsls	r3, r3, #16
 8003570:	0c1b      	lsrs	r3, r3, #16
 8003572:	8003      	strh	r3, [r0, #0]
 8003574:	4770      	bx	lr

08003576 <I2C_SMBusAlertConfig>:
void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
 8003576:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
  {
    /* Drive the SMBusAlert pin Low */
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
 800357a:	8803      	ldrh	r3, [r0, #0]
void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
 800357c:	d103      	bne.n	8003586 <I2C_SMBusAlertConfig+0x10>
  {
    /* Drive the SMBusAlert pin Low */
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
 800357e:	b29b      	uxth	r3, r3
 8003580:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003584:	e003      	b.n	800358e <I2C_SMBusAlertConfig+0x18>
  }
  else
  {
    /* Drive the SMBusAlert pin High  */
    I2Cx->CR1 &= I2C_SMBusAlert_High;
 8003586:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800358a:	041b      	lsls	r3, r3, #16
 800358c:	0c1b      	lsrs	r3, r3, #16
 800358e:	8003      	strh	r3, [r0, #0]
 8003590:	4770      	bx	lr

08003592 <I2C_ARPCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C ARP */
    I2Cx->CR1 |= I2C_CR1_ENARP;
 8003592:	8803      	ldrh	r3, [r0, #0]
void I2C_ARPCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003594:	b119      	cbz	r1, 800359e <I2C_ARPCmd+0xc>
  {
    /* Enable the selected I2C ARP */
    I2Cx->CR1 |= I2C_CR1_ENARP;
 8003596:	b29b      	uxth	r3, r3
 8003598:	f043 0310 	orr.w	r3, r3, #16
 800359c:	e003      	b.n	80035a6 <I2C_ARPCmd+0x14>
  }
  else
  {
    /* Disable the selected I2C ARP */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENARP);
 800359e:	f023 0310 	bic.w	r3, r3, #16
 80035a2:	041b      	lsls	r3, r3, #16
 80035a4:	0c1b      	lsrs	r3, r3, #16
 80035a6:	8003      	strh	r3, [r0, #0]
 80035a8:	4770      	bx	lr

080035aa <I2C_SendData>:
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 80035aa:	8201      	strh	r1, [r0, #16]
}
 80035ac:	4770      	bx	lr

080035ae <I2C_ReceiveData>:
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 80035ae:	8a00      	ldrh	r0, [r0, #16]
}
 80035b0:	b2c0      	uxtb	r0, r0
 80035b2:	4770      	bx	lr

080035b4 <I2C_TransmitPEC>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C PEC transmission */
    I2Cx->CR1 |= I2C_CR1_PEC;
 80035b4:	8803      	ldrh	r3, [r0, #0]
void I2C_TransmitPEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80035b6:	b119      	cbz	r1, 80035c0 <I2C_TransmitPEC+0xc>
  {
    /* Enable the selected I2C PEC transmission */
    I2Cx->CR1 |= I2C_CR1_PEC;
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80035be:	e003      	b.n	80035c8 <I2C_TransmitPEC+0x14>
  }
  else
  {
    /* Disable the selected I2C PEC transmission */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PEC);
 80035c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80035c4:	041b      	lsls	r3, r3, #16
 80035c6:	0c1b      	lsrs	r3, r3, #16
 80035c8:	8003      	strh	r3, [r0, #0]
 80035ca:	4770      	bx	lr

080035cc <I2C_PECPositionConfig>:
void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
 80035cc:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
  {
    /* Next byte in shift register is PEC */
    I2Cx->CR1 |= I2C_PECPosition_Next;
 80035d0:	8803      	ldrh	r3, [r0, #0]
void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
 80035d2:	d103      	bne.n	80035dc <I2C_PECPositionConfig+0x10>
  {
    /* Next byte in shift register is PEC */
    I2Cx->CR1 |= I2C_PECPosition_Next;
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80035da:	e003      	b.n	80035e4 <I2C_PECPositionConfig+0x18>
  }
  else
  {
    /* Current byte in shift register is PEC */
    I2Cx->CR1 &= I2C_PECPosition_Current;
 80035dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80035e0:	041b      	lsls	r3, r3, #16
 80035e2:	0c1b      	lsrs	r3, r3, #16
 80035e4:	8003      	strh	r3, [r0, #0]
 80035e6:	4770      	bx	lr

080035e8 <I2C_CalculatePEC>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C PEC calculation */
    I2Cx->CR1 |= I2C_CR1_ENPEC;
 80035e8:	8803      	ldrh	r3, [r0, #0]
void I2C_CalculatePEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80035ea:	b119      	cbz	r1, 80035f4 <I2C_CalculatePEC+0xc>
  {
    /* Enable the selected I2C PEC calculation */
    I2Cx->CR1 |= I2C_CR1_ENPEC;
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	f043 0320 	orr.w	r3, r3, #32
 80035f2:	e003      	b.n	80035fc <I2C_CalculatePEC+0x14>
  }
  else
  {
    /* Disable the selected I2C PEC calculation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENPEC);
 80035f4:	f023 0320 	bic.w	r3, r3, #32
 80035f8:	041b      	lsls	r3, r3, #16
 80035fa:	0c1b      	lsrs	r3, r3, #16
 80035fc:	8003      	strh	r3, [r0, #0]
 80035fe:	4770      	bx	lr

08003600 <I2C_GetPEC>:
uint8_t I2C_GetPEC(I2C_TypeDef* I2Cx)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the selected I2C PEC value */
  return ((I2Cx->SR2) >> 8);
 8003600:	8b00      	ldrh	r0, [r0, #24]
}
 8003602:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8003606:	4770      	bx	lr

08003608 <I2C_DMACmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR2 |= I2C_CR2_DMAEN;
 8003608:	8883      	ldrh	r3, [r0, #4]
void I2C_DMACmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800360a:	b119      	cbz	r1, 8003614 <I2C_DMACmd+0xc>
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR2 |= I2C_CR2_DMAEN;
 800360c:	b29b      	uxth	r3, r3
 800360e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003612:	e003      	b.n	800361c <I2C_DMACmd+0x14>
  }
  else
  {
    /* Disable the selected I2C DMA requests */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_DMAEN);
 8003614:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003618:	041b      	lsls	r3, r3, #16
 800361a:	0c1b      	lsrs	r3, r3, #16
 800361c:	8083      	strh	r3, [r0, #4]
 800361e:	4770      	bx	lr

08003620 <I2C_DMALastTransferCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Next DMA transfer is the last transfer */
    I2Cx->CR2 |= I2C_CR2_LAST;
 8003620:	8883      	ldrh	r3, [r0, #4]
void I2C_DMALastTransferCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003622:	b119      	cbz	r1, 800362c <I2C_DMALastTransferCmd+0xc>
  {
    /* Next DMA transfer is the last transfer */
    I2Cx->CR2 |= I2C_CR2_LAST;
 8003624:	b29b      	uxth	r3, r3
 8003626:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800362a:	e003      	b.n	8003634 <I2C_DMALastTransferCmd+0x14>
  }
  else
  {
    /* Next DMA transfer is not the last transfer */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_LAST);
 800362c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003630:	041b      	lsls	r3, r3, #16
 8003632:	0c1b      	lsrs	r3, r3, #16
 8003634:	8083      	strh	r3, [r0, #4]
 8003636:	4770      	bx	lr

08003638 <I2C_ReadRegister>:
  *            @arg I2C_Register_CCR:   CCR register.
  *            @arg I2C_Register_TRISE: TRISE register.
  * @retval The value of the read register.
  */
uint16_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register)
{
 8003638:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 800363a:	2300      	movs	r3, #0
 800363c:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_REGISTER(I2C_Register));

  tmp = (uint32_t) I2Cx;
 800363e:	9001      	str	r0, [sp, #4]
  tmp += I2C_Register;
 8003640:	9b01      	ldr	r3, [sp, #4]
 8003642:	18cb      	adds	r3, r1, r3
 8003644:	9301      	str	r3, [sp, #4]

  /* Return the selected register value */
  return (*(__IO uint16_t *) tmp);
 8003646:	9b01      	ldr	r3, [sp, #4]
 8003648:	8818      	ldrh	r0, [r3, #0]
}
 800364a:	b280      	uxth	r0, r0
 800364c:	b002      	add	sp, #8
 800364e:	4770      	bx	lr

08003650 <I2C_ITConfig>:
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 8003650:	8883      	ldrh	r3, [r0, #4]
 8003652:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
 8003654:	b10a      	cbz	r2, 800365a <I2C_ITConfig+0xa>
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 8003656:	4319      	orrs	r1, r3
 8003658:	e001      	b.n	800365e <I2C_ITConfig+0xe>
  }
  else
  {
    /* Disable the selected I2C interrupts */
    I2Cx->CR2 &= (uint16_t)~I2C_IT;
 800365a:	ea23 0101 	bic.w	r1, r3, r1
 800365e:	8081      	strh	r1, [r0, #4]
 8003660:	4770      	bx	lr

08003662 <I2C_CheckEvent>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8003662:	8a83      	ldrh	r3, [r0, #20]
  flag2 = I2Cx->SR2;
 8003664:	8b00      	ldrh	r0, [r0, #24]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8003666:	b29b      	uxth	r3, r3
  flag2 = I2Cx->SR2;
  flag2 = flag2 << 16;

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 8003668:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800366c:	4008      	ands	r0, r1

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 800366e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
  }
  /* Return status */
  return status;
}
 8003672:	1a43      	subs	r3, r0, r1
 8003674:	4258      	negs	r0, r3
 8003676:	eb40 0003 	adc.w	r0, r0, r3
 800367a:	4770      	bx	lr

0800367c <I2C_GetLastEvent>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 800367c:	8a83      	ldrh	r3, [r0, #20]
  flag2 = I2Cx->SR2;
 800367e:	8b00      	ldrh	r0, [r0, #24]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8003680:	b29b      	uxth	r3, r3
  flag2 = I2Cx->SR2;
  flag2 = flag2 << 16;

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 8003682:	ea43 4000 	orr.w	r0, r3, r0, lsl #16

  /* Return status */
  return lastevent;
}
 8003686:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800368a:	4770      	bx	lr

0800368c <I2C_GetFlagStatus>:
  *                                Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 800368c:	b082      	sub	sp, #8
  FlagStatus bitstatus = RESET;
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 800368e:	2300      	movs	r3, #0
 8003690:	9300      	str	r3, [sp, #0]
 8003692:	9301      	str	r3, [sp, #4]

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 8003694:	0f0b      	lsrs	r3, r1, #28
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 8003696:	9001      	str	r0, [sp, #4]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 8003698:	9300      	str	r3, [sp, #0]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
  
  if(i2creg != 0)
 800369a:	9b00      	ldr	r3, [sp, #0]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 800369c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
  
  if(i2creg != 0)
 80036a0:	b113      	cbz	r3, 80036a8 <I2C_GetFlagStatus+0x1c>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 80036a2:	9b01      	ldr	r3, [sp, #4]
 80036a4:	3314      	adds	r3, #20
 80036a6:	e002      	b.n	80036ae <I2C_GetFlagStatus+0x22>
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 80036a8:	9b01      	ldr	r3, [sp, #4]
    i2cxbase += 0x14;
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 80036aa:	0c09      	lsrs	r1, r1, #16
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 80036ac:	3318      	adds	r3, #24
 80036ae:	9301      	str	r3, [sp, #4]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 80036b0:	9b01      	ldr	r3, [sp, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 80036b4:	4219      	tst	r1, r3
    bitstatus = RESET;
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
}
 80036b6:	bf0c      	ite	eq
 80036b8:	2000      	moveq	r0, #0
 80036ba:	2001      	movne	r0, #1
 80036bc:	b002      	add	sp, #8
 80036be:	4770      	bx	lr

080036c0 <I2C_ClearFlag>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));
  /* Get the I2C flag position */
  flagpos = I2C_FLAG & FLAG_MASK;
  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 80036c0:	43c9      	mvns	r1, r1
 80036c2:	b289      	uxth	r1, r1
 80036c4:	8281      	strh	r1, [r0, #20]
}
 80036c6:	4770      	bx	lr

080036c8 <I2C_GetITStatus>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 80036c8:	8883      	ldrh	r3, [r0, #4]
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_MASK;

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 80036ca:	8a80      	ldrh	r0, [r0, #20]
 80036cc:	b280      	uxth	r0, r0
 80036ce:	4008      	ands	r0, r1
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 80036d0:	b29b      	uxth	r3, r3
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_MASK;

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 80036d2:	d006      	beq.n	80036e2 <I2C_GetITStatus+0x1a>
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 80036d4:	f001 61e0 	and.w	r1, r1, #117440512	; 0x7000000
  *            @arg I2C_IT_ADDR: Address sent flag (Master mode) "ADSL"
  *                              Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_IT_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_IT (SET or RESET).
  */
ITStatus I2C_GetITStatus(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
 80036d8:	ea13 4111 	ands.w	r1, r3, r1, lsr #16

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
  {
    /* I2C_IT is set */
    bitstatus = SET;
 80036dc:	bf0c      	ite	eq
 80036de:	2000      	moveq	r0, #0
 80036e0:	2001      	movne	r0, #1
    /* I2C_IT is reset */
    bitstatus = RESET;
  }
  /* Return the I2C_IT status */
  return  bitstatus;
}
 80036e2:	4770      	bx	lr

080036e4 <I2C_ClearITPendingBit>:

  /* Get the I2C flag position */
  flagpos = I2C_IT & FLAG_MASK;

  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 80036e4:	43c9      	mvns	r1, r1
 80036e6:	b289      	uxth	r1, r1
 80036e8:	8281      	strh	r1, [r0, #20]
}
 80036ea:	4770      	bx	lr

080036ec <IWDG_WriteAccessCmd>:
  */
void IWDG_WriteAccessCmd(uint16_t IWDG_WriteAccess)
{
  /* Check the parameters */
  assert_param(IS_IWDG_WRITE_ACCESS(IWDG_WriteAccess));
  IWDG->KR = IWDG_WriteAccess;
 80036ec:	4b01      	ldr	r3, [pc, #4]	; (80036f4 <IWDG_WriteAccessCmd+0x8>)
 80036ee:	6018      	str	r0, [r3, #0]
}
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop
 80036f4:	40003000 	.word	0x40003000

080036f8 <IWDG_SetPrescaler>:
  */
void IWDG_SetPrescaler(uint8_t IWDG_Prescaler)
{
  /* Check the parameters */
  assert_param(IS_IWDG_PRESCALER(IWDG_Prescaler));
  IWDG->PR = IWDG_Prescaler;
 80036f8:	4b01      	ldr	r3, [pc, #4]	; (8003700 <IWDG_SetPrescaler+0x8>)
 80036fa:	6058      	str	r0, [r3, #4]
}
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	40003000 	.word	0x40003000

08003704 <IWDG_SetReload>:
  */
void IWDG_SetReload(uint16_t Reload)
{
  /* Check the parameters */
  assert_param(IS_IWDG_RELOAD(Reload));
  IWDG->RLR = Reload;
 8003704:	4b01      	ldr	r3, [pc, #4]	; (800370c <IWDG_SetReload+0x8>)
 8003706:	6098      	str	r0, [r3, #8]
}
 8003708:	4770      	bx	lr
 800370a:	bf00      	nop
 800370c:	40003000 	.word	0x40003000

08003710 <IWDG_ReloadCounter>:
  * @param  None
  * @retval None
  */
void IWDG_ReloadCounter(void)
{
  IWDG->KR = KR_KEY_RELOAD;
 8003710:	4b02      	ldr	r3, [pc, #8]	; (800371c <IWDG_ReloadCounter+0xc>)
 8003712:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003716:	601a      	str	r2, [r3, #0]
}
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop
 800371c:	40003000 	.word	0x40003000

08003720 <IWDG_Enable>:
  * @param  None
  * @retval None
  */
void IWDG_Enable(void)
{
  IWDG->KR = KR_KEY_ENABLE;
 8003720:	4b02      	ldr	r3, [pc, #8]	; (800372c <IWDG_Enable+0xc>)
 8003722:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8003726:	601a      	str	r2, [r3, #0]
}
 8003728:	4770      	bx	lr
 800372a:	bf00      	nop
 800372c:	40003000 	.word	0x40003000

08003730 <IWDG_GetFlagStatus>:
FlagStatus IWDG_GetFlagStatus(uint16_t IWDG_FLAG)
{
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_IWDG_FLAG(IWDG_FLAG));
  if ((IWDG->SR & IWDG_FLAG) != (uint32_t)RESET)
 8003730:	4b03      	ldr	r3, [pc, #12]	; (8003740 <IWDG_GetFlagStatus+0x10>)
 8003732:	68db      	ldr	r3, [r3, #12]
  {
    bitstatus = SET;
 8003734:	4218      	tst	r0, r3
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
}
 8003736:	bf0c      	ite	eq
 8003738:	2000      	moveq	r0, #0
 800373a:	2001      	movne	r0, #1
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop
 8003740:	40003000 	.word	0x40003000

08003744 <PWR_DeInit>:
  * @brief  Deinitializes the PWR peripheral registers to their default reset values.     
  * @param  None
  * @retval None
  */
void PWR_DeInit(void)
{
 8003744:	b508      	push	{r3, lr}
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
 8003746:	2101      	movs	r1, #1
 8003748:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800374c:	f000 fa02 	bl	8003b54 <RCC_APB1PeriphResetCmd>
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
 8003750:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8003754:	2100      	movs	r1, #0
}
 8003756:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  * @retval None
  */
void PWR_DeInit(void)
{
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
 800375a:	f000 b9fb 	b.w	8003b54 <RCC_APB1PeriphResetCmd>

0800375e <PWR_BackupAccessCmd>:
void PWR_BackupAccessCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)NewState;
 800375e:	4b01      	ldr	r3, [pc, #4]	; (8003764 <PWR_BackupAccessCmd+0x6>)
 8003760:	6018      	str	r0, [r3, #0]
}
 8003762:	4770      	bx	lr
 8003764:	420e0020 	.word	0x420e0020

08003768 <PWR_PVDLevelConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(PWR_PVDLevel));
  
  tmpreg = PWR->CR;
 8003768:	4b03      	ldr	r3, [pc, #12]	; (8003778 <PWR_PVDLevelConfig+0x10>)
 800376a:	681a      	ldr	r2, [r3, #0]
  
  /* Clear PLS[7:5] bits */
  tmpreg &= CR_PLS_MASK;
 800376c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
  
  /* Set PLS[7:5] bits according to PWR_PVDLevel value */
  tmpreg |= PWR_PVDLevel;
 8003770:	4302      	orrs	r2, r0
  
  /* Store the new value */
  PWR->CR = tmpreg;
 8003772:	601a      	str	r2, [r3, #0]
}
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	40007000 	.word	0x40007000

0800377c <PWR_PVDCmd>:
void PWR_PVDCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)NewState;
 800377c:	4b01      	ldr	r3, [pc, #4]	; (8003784 <PWR_PVDCmd+0x8>)
 800377e:	6018      	str	r0, [r3, #0]
}
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	420e0010 	.word	0x420e0010

08003788 <PWR_WakeUpPinCmd>:
void PWR_WakeUpPinCmd(FunctionalState NewState)
{
  /* Check the parameters */  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_EWUP_BB = (uint32_t)NewState;
 8003788:	4b01      	ldr	r3, [pc, #4]	; (8003790 <PWR_WakeUpPinCmd+0x8>)
 800378a:	6018      	str	r0, [r3, #0]
}
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	420e00a0 	.word	0x420e00a0

08003794 <PWR_BackupRegulatorCmd>:
void PWR_BackupRegulatorCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)NewState;
 8003794:	4b01      	ldr	r3, [pc, #4]	; (800379c <PWR_BackupRegulatorCmd+0x8>)
 8003796:	6018      	str	r0, [r3, #0]
}
 8003798:	4770      	bx	lr
 800379a:	bf00      	nop
 800379c:	420e00a4 	.word	0x420e00a4

080037a0 <PWR_MainRegulatorModeConfig>:
  *            @arg PWR_Regulator_Voltage_Scale2: Regulator voltage output Scale 2 mode, 
  *                                                System frequency up to 144 MHz.    
  * @retval None
  */
void PWR_MainRegulatorModeConfig(uint32_t PWR_Regulator_Voltage)
{
 80037a0:	4b04      	ldr	r3, [pc, #16]	; (80037b4 <PWR_MainRegulatorModeConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR_VOLTAGE(PWR_Regulator_Voltage));

  if (PWR_Regulator_Voltage == PWR_Regulator_Voltage_Scale2)
  {
    PWR->CR &= ~PWR_Regulator_Voltage_Scale1;
 80037a2:	681a      	ldr	r2, [r3, #0]
void PWR_MainRegulatorModeConfig(uint32_t PWR_Regulator_Voltage)
{
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR_VOLTAGE(PWR_Regulator_Voltage));

  if (PWR_Regulator_Voltage == PWR_Regulator_Voltage_Scale2)
 80037a4:	b910      	cbnz	r0, 80037ac <PWR_MainRegulatorModeConfig+0xc>
  {
    PWR->CR &= ~PWR_Regulator_Voltage_Scale1;
 80037a6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80037aa:	e001      	b.n	80037b0 <PWR_MainRegulatorModeConfig+0x10>
  }
  else
  {    
    PWR->CR |= PWR_Regulator_Voltage_Scale1;
 80037ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037b0:	601a      	str	r2, [r3, #0]
 80037b2:	4770      	bx	lr
 80037b4:	40007000 	.word	0x40007000

080037b8 <PWR_FlashPowerDownCmd>:
void PWR_FlashPowerDownCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)NewState;
 80037b8:	4b01      	ldr	r3, [pc, #4]	; (80037c0 <PWR_FlashPowerDownCmd+0x8>)
 80037ba:	6018      	str	r0, [r3, #0]
}
 80037bc:	4770      	bx	lr
 80037be:	bf00      	nop
 80037c0:	420e0024 	.word	0x420e0024

080037c4 <PWR_EnterSTOPMode>:
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(PWR_Regulator));
  assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
  
  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;
 80037c4:	4b0a      	ldr	r3, [pc, #40]	; (80037f0 <PWR_EnterSTOPMode+0x2c>)
 80037c6:	681a      	ldr	r2, [r3, #0]
  /* Clear PDDS and LPDSR bits */
  tmpreg &= CR_DS_MASK;
 80037c8:	f022 0203 	bic.w	r2, r2, #3
  
  /* Set LPDSR bit according to PWR_Regulator value */
  tmpreg |= PWR_Regulator;
 80037cc:	4302      	orrs	r2, r0
  
  /* Store the new value */
  PWR->CR = tmpreg;
 80037ce:	601a      	str	r2, [r3, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 80037d0:	4b08      	ldr	r3, [pc, #32]	; (80037f4 <PWR_EnterSTOPMode+0x30>)
 80037d2:	691a      	ldr	r2, [r3, #16]
  
  /* Select STOP mode entry --------------------------------------------------*/
  if(PWR_STOPEntry == PWR_STOPEntry_WFI)
 80037d4:	2901      	cmp	r1, #1
  
  /* Store the new value */
  PWR->CR = tmpreg;
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 80037d6:	f042 0204 	orr.w	r2, r2, #4
 80037da:	611a      	str	r2, [r3, #16]
  
  /* Select STOP mode entry --------------------------------------------------*/
  if(PWR_STOPEntry == PWR_STOPEntry_WFI)
 80037dc:	d101      	bne.n	80037e2 <PWR_EnterSTOPMode+0x1e>
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) static __INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 80037de:	bf30      	wfi
 80037e0:	e000      	b.n	80037e4 <PWR_EnterSTOPMode+0x20>
    Wait For Event is a hint instruction that permits the processor to enter
    a low-power state until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) static __INLINE void __WFE(void)
{
  __ASM volatile ("wfe");
 80037e2:	bf20      	wfe
  {
    /* Request Wait For Event */
    __WFE();
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);  
 80037e4:	691a      	ldr	r2, [r3, #16]
 80037e6:	f022 0204 	bic.w	r2, r2, #4
 80037ea:	611a      	str	r2, [r3, #16]
}
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop
 80037f0:	40007000 	.word	0x40007000
 80037f4:	e000ed00 	.word	0xe000ed00

080037f8 <PWR_EnterSTANDBYMode>:
  * @retval None
  */
void PWR_EnterSTANDBYMode(void)
{
  /* Clear Wakeup flag */
  PWR->CR |= PWR_CR_CWUF;
 80037f8:	4b07      	ldr	r3, [pc, #28]	; (8003818 <PWR_EnterSTANDBYMode+0x20>)
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	f042 0204 	orr.w	r2, r2, #4
 8003800:	601a      	str	r2, [r3, #0]
  
  /* Select STANDBY mode */
  PWR->CR |= PWR_CR_PDDS;
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	f042 0202 	orr.w	r2, r2, #2
 8003808:	601a      	str	r2, [r3, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 800380a:	4b04      	ldr	r3, [pc, #16]	; (800381c <PWR_EnterSTANDBYMode+0x24>)
 800380c:	691a      	ldr	r2, [r3, #16]
 800380e:	f042 0204 	orr.w	r2, r2, #4
 8003812:	611a      	str	r2, [r3, #16]
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) static __INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 8003814:	bf30      	wfi
#if defined ( __CC_ARM   )
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
}
 8003816:	4770      	bx	lr
 8003818:	40007000 	.word	0x40007000
 800381c:	e000ed00 	.word	0xe000ed00

08003820 <PWR_GetFlagStatus>:
  FlagStatus bitstatus = RESET;
  
  /* Check the parameters */
  assert_param(IS_PWR_GET_FLAG(PWR_FLAG));
  
  if ((PWR->CSR & PWR_FLAG) != (uint32_t)RESET)
 8003820:	4b03      	ldr	r3, [pc, #12]	; (8003830 <PWR_GetFlagStatus+0x10>)
 8003822:	685b      	ldr	r3, [r3, #4]
  {
    bitstatus = SET;
 8003824:	4218      	tst	r0, r3
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
}
 8003826:	bf0c      	ite	eq
 8003828:	2000      	moveq	r0, #0
 800382a:	2001      	movne	r0, #1
 800382c:	4770      	bx	lr
 800382e:	bf00      	nop
 8003830:	40007000 	.word	0x40007000

08003834 <PWR_ClearFlag>:
void PWR_ClearFlag(uint32_t PWR_FLAG)
{
  /* Check the parameters */
  assert_param(IS_PWR_CLEAR_FLAG(PWR_FLAG));
         
  PWR->CR |=  PWR_FLAG << 2;
 8003834:	4b02      	ldr	r3, [pc, #8]	; (8003840 <PWR_ClearFlag+0xc>)
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	ea42 0280 	orr.w	r2, r2, r0, lsl #2
 800383c:	601a      	str	r2, [r3, #0]
}
 800383e:	4770      	bx	lr
 8003840:	40007000 	.word	0x40007000

08003844 <RCC_DeInit>:
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003844:	4b0a      	ldr	r3, [pc, #40]	; (8003870 <RCC_DeInit+0x2c>)
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	f042 0201 	orr.w	r2, r2, #1
 800384c:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800384e:	2200      	movs	r2, #0
 8003850:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003852:	6819      	ldr	r1, [r3, #0]
 8003854:	f021 7184 	bic.w	r1, r1, #17301504	; 0x1080000
 8003858:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800385c:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800385e:	4905      	ldr	r1, [pc, #20]	; (8003874 <RCC_DeInit+0x30>)
 8003860:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003862:	6819      	ldr	r1, [r3, #0]
 8003864:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8003868:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800386a:	60da      	str	r2, [r3, #12]
}
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop
 8003870:	40023800 	.word	0x40023800
 8003874:	24003010 	.word	0x24003010

08003878 <RCC_HSEConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 8003878:	4b02      	ldr	r3, [pc, #8]	; (8003884 <RCC_HSEConfig+0xc>)
 800387a:	2200      	movs	r2, #0
 800387c:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 800387e:	7018      	strb	r0, [r3, #0]
}
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	40023802 	.word	0x40023802

08003888 <RCC_AdjustHSICalibrationValue>:
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
 8003888:	4b03      	ldr	r3, [pc, #12]	; (8003898 <RCC_AdjustHSICalibrationValue+0x10>)
 800388a:	681a      	ldr	r2, [r3, #0]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 800388c:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 8003890:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3

  /* Store the new value */
  RCC->CR = tmpreg;
 8003894:	601a      	str	r2, [r3, #0]
}
 8003896:	4770      	bx	lr
 8003898:	40023800 	.word	0x40023800

0800389c <RCC_HSICmd>:
void RCC_HSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 800389c:	4b01      	ldr	r3, [pc, #4]	; (80038a4 <RCC_HSICmd+0x8>)
 800389e:	6018      	str	r0, [r3, #0]
}
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	42470000 	.word	0x42470000

080038a8 <RCC_LSEConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 80038a8:	4b06      	ldr	r3, [pc, #24]	; (80038c4 <RCC_LSEConfig+0x1c>)
 80038aa:	2200      	movs	r2, #0

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 80038ac:	2801      	cmp	r0, #1
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 80038ae:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 80038b0:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 80038b2:	d002      	beq.n	80038ba <RCC_LSEConfig+0x12>
 80038b4:	2804      	cmp	r0, #4
 80038b6:	d104      	bne.n	80038c2 <RCC_LSEConfig+0x1a>
 80038b8:	e001      	b.n	80038be <RCC_LSEConfig+0x16>
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 80038ba:	7018      	strb	r0, [r3, #0]
      break;
 80038bc:	4770      	bx	lr
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 80038be:	2205      	movs	r2, #5
 80038c0:	701a      	strb	r2, [r3, #0]
 80038c2:	4770      	bx	lr
 80038c4:	40023870 	.word	0x40023870

080038c8 <RCC_LSICmd>:
void RCC_LSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 80038c8:	4b01      	ldr	r3, [pc, #4]	; (80038d0 <RCC_LSICmd+0x8>)
 80038ca:	6018      	str	r0, [r3, #0]
}
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop
 80038d0:	42470e80 	.word	0x42470e80

080038d4 <RCC_PLLConfig>:
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 80038d4:	4301      	orrs	r1, r0
 80038d6:	ea41 1282 	orr.w	r2, r1, r2, lsl #6
 80038da:	9900      	ldr	r1, [sp, #0]
 80038dc:	085b      	lsrs	r3, r3, #1
 80038de:	3b01      	subs	r3, #1
 80038e0:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80038e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80038e8:	4b01      	ldr	r3, [pc, #4]	; (80038f0 <RCC_PLLConfig+0x1c>)
 80038ea:	6059      	str	r1, [r3, #4]
                 (PLLQ << 24);
}
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop
 80038f0:	40023800 	.word	0x40023800

080038f4 <RCC_PLLCmd>:
  */
void RCC_PLLCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 80038f4:	4b01      	ldr	r3, [pc, #4]	; (80038fc <RCC_PLLCmd+0x8>)
 80038f6:	6018      	str	r0, [r3, #0]
}
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop
 80038fc:	42470060 	.word	0x42470060

08003900 <RCC_PLLI2SConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
 8003900:	0180      	lsls	r0, r0, #6
 8003902:	4b03      	ldr	r3, [pc, #12]	; (8003910 <RCC_PLLI2SConfig+0x10>)
 8003904:	ea40 7101 	orr.w	r1, r0, r1, lsl #28
 8003908:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
}
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop
 8003910:	40023800 	.word	0x40023800

08003914 <RCC_PLLI2SCmd>:
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 8003914:	4b01      	ldr	r3, [pc, #4]	; (800391c <RCC_PLLI2SCmd+0x8>)
 8003916:	6018      	str	r0, [r3, #0]
}
 8003918:	4770      	bx	lr
 800391a:	bf00      	nop
 800391c:	42470068 	.word	0x42470068

08003920 <RCC_ClockSecuritySystemCmd>:
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 8003920:	4b01      	ldr	r3, [pc, #4]	; (8003928 <RCC_ClockSecuritySystemCmd+0x8>)
 8003922:	6018      	str	r0, [r3, #0]
}
 8003924:	4770      	bx	lr
 8003926:	bf00      	nop
 8003928:	4247004c 	.word	0x4247004c

0800392c <RCC_MCO1Config>:
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
 800392c:	4b03      	ldr	r3, [pc, #12]	; (800393c <RCC_MCO1Config+0x10>)
 800392e:	689a      	ldr	r2, [r3, #8]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
 8003930:	f022 62ec 	bic.w	r2, r2, #123731968	; 0x7600000

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 8003934:	4302      	orrs	r2, r0
 8003936:	430a      	orrs	r2, r1

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 8003938:	609a      	str	r2, [r3, #8]
}
 800393a:	4770      	bx	lr
 800393c:	40023800 	.word	0x40023800

08003940 <RCC_MCO2Config>:
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
 8003940:	4b03      	ldr	r3, [pc, #12]	; (8003950 <RCC_MCO2Config+0x10>)
 8003942:	689a      	ldr	r2, [r3, #8]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
 8003944:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 8003948:	4302      	orrs	r2, r0
 800394a:	430a      	orrs	r2, r1

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 800394c:	609a      	str	r2, [r3, #8]
}
 800394e:	4770      	bx	lr
 8003950:	40023800 	.word	0x40023800

08003954 <RCC_SYSCLKConfig>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 8003954:	4b03      	ldr	r3, [pc, #12]	; (8003964 <RCC_SYSCLKConfig+0x10>)
 8003956:	689a      	ldr	r2, [r3, #8]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 8003958:	f022 0203 	bic.w	r2, r2, #3

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 800395c:	4302      	orrs	r2, r0

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800395e:	609a      	str	r2, [r3, #8]
}
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop
 8003964:	40023800 	.word	0x40023800

08003968 <RCC_GetSYSCLKSource>:
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 8003968:	4b02      	ldr	r3, [pc, #8]	; (8003974 <RCC_GetSYSCLKSource+0xc>)
 800396a:	6898      	ldr	r0, [r3, #8]
}
 800396c:	f000 000c 	and.w	r0, r0, #12
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	40023800 	.word	0x40023800

08003978 <RCC_HCLKConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 8003978:	4b03      	ldr	r3, [pc, #12]	; (8003988 <RCC_HCLKConfig+0x10>)
 800397a:	689a      	ldr	r2, [r3, #8]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 800397c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8003980:	4302      	orrs	r2, r0

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8003982:	609a      	str	r2, [r3, #8]
}
 8003984:	4770      	bx	lr
 8003986:	bf00      	nop
 8003988:	40023800 	.word	0x40023800

0800398c <RCC_PCLK1Config>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 800398c:	4b03      	ldr	r3, [pc, #12]	; (800399c <RCC_PCLK1Config+0x10>)
 800398e:	689a      	ldr	r2, [r3, #8]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 8003990:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8003994:	4302      	orrs	r2, r0

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8003996:	609a      	str	r2, [r3, #8]
}
 8003998:	4770      	bx	lr
 800399a:	bf00      	nop
 800399c:	40023800 	.word	0x40023800

080039a0 <RCC_PCLK2Config>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 80039a0:	4b03      	ldr	r3, [pc, #12]	; (80039b0 <RCC_PCLK2Config+0x10>)
 80039a2:	689a      	ldr	r2, [r3, #8]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 80039a4:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 80039a8:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80039ac:	609a      	str	r2, [r3, #8]
}
 80039ae:	4770      	bx	lr
 80039b0:	40023800 	.word	0x40023800

080039b4 <RCC_GetClocksFreq>:
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80039b4:	4b1e      	ldr	r3, [pc, #120]	; (8003a30 <RCC_GetClocksFreq+0x7c>)
 80039b6:	689a      	ldr	r2, [r3, #8]
 80039b8:	f002 020c 	and.w	r2, r2, #12

  switch (tmp)
 80039bc:	2a04      	cmp	r2, #4
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80039be:	b510      	push	{r4, lr}
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;

  switch (tmp)
 80039c0:	d003      	beq.n	80039ca <RCC_GetClocksFreq+0x16>
 80039c2:	2a08      	cmp	r2, #8
 80039c4:	d003      	beq.n	80039ce <RCC_GetClocksFreq+0x1a>
 80039c6:	4b1b      	ldr	r3, [pc, #108]	; (8003a34 <RCC_GetClocksFreq+0x80>)
 80039c8:	e018      	b.n	80039fc <RCC_GetClocksFreq+0x48>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80039ca:	4b1b      	ldr	r3, [pc, #108]	; (8003a38 <RCC_GetClocksFreq+0x84>)
 80039cc:	e016      	b.n	80039fc <RCC_GetClocksFreq+0x48>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80039ce:	6859      	ldr	r1, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039d0:	685a      	ldr	r2, [r3, #4]
      
      if (pllsource != 0)
 80039d2:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80039d6:	6859      	ldr	r1, [r3, #4]
 80039d8:	bf14      	ite	ne
 80039da:	4b17      	ldrne	r3, [pc, #92]	; (8003a38 <RCC_GetClocksFreq+0x84>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80039dc:	4b15      	ldreq	r3, [pc, #84]	; (8003a34 <RCC_GetClocksFreq+0x80>)

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039de:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80039e2:	fbb3 f3f2 	udiv	r3, r3, r2
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80039e6:	4a12      	ldr	r2, [pc, #72]	; (8003a30 <RCC_GetClocksFreq+0x7c>)
 80039e8:	6852      	ldr	r2, [r2, #4]
 80039ea:	f3c2 4201 	ubfx	r2, r2, #16, #2
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80039ee:	f3c1 1188 	ubfx	r1, r1, #6, #9
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80039f2:	3201      	adds	r2, #1
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80039f4:	434b      	muls	r3, r1
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80039f6:	0052      	lsls	r2, r2, #1
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 80039f8:	fbb3 f3f2 	udiv	r3, r3, r2
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80039fc:	490c      	ldr	r1, [pc, #48]	; (8003a30 <RCC_GetClocksFreq+0x7c>)
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 80039fe:	6003      	str	r3, [r0, #0]
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8003a00:	688b      	ldr	r3, [r1, #8]
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];
 8003a02:	4a0e      	ldr	r2, [pc, #56]	; (8003a3c <RCC_GetClocksFreq+0x88>)
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8003a04:	6804      	ldr	r4, [r0, #0]
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
  tmp = tmp >> 4;
 8003a06:	f3c3 1303 	ubfx	r3, r3, #4, #4
  presc = APBAHBPrescTable[tmp];
 8003a0a:	5cd3      	ldrb	r3, [r2, r3]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8003a0c:	fa34 f303 	lsrs.w	r3, r4, r3
 8003a10:	6043      	str	r3, [r0, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8003a12:	688c      	ldr	r4, [r1, #8]
  tmp = tmp >> 10;
 8003a14:	f3c4 2482 	ubfx	r4, r4, #10, #3
  presc = APBAHBPrescTable[tmp];
 8003a18:	5d14      	ldrb	r4, [r2, r4]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8003a1a:	fa33 f404 	lsrs.w	r4, r3, r4
 8003a1e:	6084      	str	r4, [r0, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8003a20:	6889      	ldr	r1, [r1, #8]
  tmp = tmp >> 13;
 8003a22:	f3c1 3142 	ubfx	r1, r1, #13, #3
  presc = APBAHBPrescTable[tmp];
 8003a26:	5c52      	ldrb	r2, [r2, r1]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8003a28:	40d3      	lsrs	r3, r2
 8003a2a:	60c3      	str	r3, [r0, #12]
}
 8003a2c:	bd10      	pop	{r4, pc}
 8003a2e:	bf00      	nop
 8003a30:	40023800 	.word	0x40023800
 8003a34:	00f42400 	.word	0x00f42400
 8003a38:	007a1200 	.word	0x007a1200
 8003a3c:	20000028 	.word	0x20000028

08003a40 <RCC_RTCCLKConfig>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 8003a40:	f400 7340 	and.w	r3, r0, #768	; 0x300
 8003a44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a48:	4b08      	ldr	r3, [pc, #32]	; (8003a6c <RCC_RTCCLKConfig+0x2c>)
 8003a4a:	d108      	bne.n	8003a5e <RCC_RTCCLKConfig+0x1e>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 8003a4c:	6899      	ldr	r1, [r3, #8]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8003a4e:	f020 4270 	bic.w	r2, r0, #4026531840	; 0xf0000000
  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
 8003a52:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8003a56:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003a5a:	430a      	orrs	r2, r1

    /* Store the new value */
    RCC->CFGR = tmpreg;
 8003a5c:	609a      	str	r2, [r3, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 8003a5e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a60:	0500      	lsls	r0, r0, #20
 8003a62:	ea42 5010 	orr.w	r0, r2, r0, lsr #20
 8003a66:	6718      	str	r0, [r3, #112]	; 0x70
}
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop
 8003a6c:	40023800 	.word	0x40023800

08003a70 <RCC_RTCCLKCmd>:
void RCC_RTCCLKCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 8003a70:	4b01      	ldr	r3, [pc, #4]	; (8003a78 <RCC_RTCCLKCmd+0x8>)
 8003a72:	6018      	str	r0, [r3, #0]
}
 8003a74:	4770      	bx	lr
 8003a76:	bf00      	nop
 8003a78:	42470e3c 	.word	0x42470e3c

08003a7c <RCC_BackupResetCmd>:
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 8003a7c:	4b01      	ldr	r3, [pc, #4]	; (8003a84 <RCC_BackupResetCmd+0x8>)
 8003a7e:	6018      	str	r0, [r3, #0]
}
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop
 8003a84:	42470e40 	.word	0x42470e40

08003a88 <RCC_I2SCLKConfig>:
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 8003a88:	4b01      	ldr	r3, [pc, #4]	; (8003a90 <RCC_I2SCLKConfig+0x8>)
 8003a8a:	6018      	str	r0, [r3, #0]
}
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	4247015c 	.word	0x4247015c

08003a94 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8003a94:	4b04      	ldr	r3, [pc, #16]	; (8003aa8 <RCC_AHB1PeriphClockCmd+0x14>)
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8003a96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003a98:	b109      	cbz	r1, 8003a9e <RCC_AHB1PeriphClockCmd+0xa>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8003a9a:	4310      	orrs	r0, r2
 8003a9c:	e001      	b.n	8003aa2 <RCC_AHB1PeriphClockCmd+0xe>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8003a9e:	ea22 0000 	bic.w	r0, r2, r0
 8003aa2:	6318      	str	r0, [r3, #48]	; 0x30
 8003aa4:	4770      	bx	lr
 8003aa6:	bf00      	nop
 8003aa8:	40023800 	.word	0x40023800

08003aac <RCC_AHB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 8003aac:	4b04      	ldr	r3, [pc, #16]	; (8003ac0 <RCC_AHB2PeriphClockCmd+0x14>)
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 8003aae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003ab0:	b109      	cbz	r1, 8003ab6 <RCC_AHB2PeriphClockCmd+0xa>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 8003ab2:	4310      	orrs	r0, r2
 8003ab4:	e001      	b.n	8003aba <RCC_AHB2PeriphClockCmd+0xe>
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
 8003ab6:	ea22 0000 	bic.w	r0, r2, r0
 8003aba:	6358      	str	r0, [r3, #52]	; 0x34
 8003abc:	4770      	bx	lr
 8003abe:	bf00      	nop
 8003ac0:	40023800 	.word	0x40023800

08003ac4 <RCC_AHB3PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 8003ac4:	4b04      	ldr	r3, [pc, #16]	; (8003ad8 <RCC_AHB3PeriphClockCmd+0x14>)
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 8003ac6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003ac8:	b109      	cbz	r1, 8003ace <RCC_AHB3PeriphClockCmd+0xa>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 8003aca:	4310      	orrs	r0, r2
 8003acc:	e001      	b.n	8003ad2 <RCC_AHB3PeriphClockCmd+0xe>
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
 8003ace:	ea22 0000 	bic.w	r0, r2, r0
 8003ad2:	6398      	str	r0, [r3, #56]	; 0x38
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop
 8003ad8:	40023800 	.word	0x40023800

08003adc <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8003adc:	4b04      	ldr	r3, [pc, #16]	; (8003af0 <RCC_APB1PeriphClockCmd+0x14>)
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8003ade:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003ae0:	b109      	cbz	r1, 8003ae6 <RCC_APB1PeriphClockCmd+0xa>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8003ae2:	4310      	orrs	r0, r2
 8003ae4:	e001      	b.n	8003aea <RCC_APB1PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8003ae6:	ea22 0000 	bic.w	r0, r2, r0
 8003aea:	6418      	str	r0, [r3, #64]	; 0x40
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop
 8003af0:	40023800 	.word	0x40023800

08003af4 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8003af4:	4b04      	ldr	r3, [pc, #16]	; (8003b08 <RCC_APB2PeriphClockCmd+0x14>)
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8003af6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003af8:	b109      	cbz	r1, 8003afe <RCC_APB2PeriphClockCmd+0xa>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8003afa:	4310      	orrs	r0, r2
 8003afc:	e001      	b.n	8003b02 <RCC_APB2PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8003afe:	ea22 0000 	bic.w	r0, r2, r0
 8003b02:	6458      	str	r0, [r3, #68]	; 0x44
 8003b04:	4770      	bx	lr
 8003b06:	bf00      	nop
 8003b08:	40023800 	.word	0x40023800

08003b0c <RCC_AHB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8003b0c:	4b04      	ldr	r3, [pc, #16]	; (8003b20 <RCC_AHB1PeriphResetCmd+0x14>)
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 8003b0e:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003b10:	b109      	cbz	r1, 8003b16 <RCC_AHB1PeriphResetCmd+0xa>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 8003b12:	4310      	orrs	r0, r2
 8003b14:	e001      	b.n	8003b1a <RCC_AHB1PeriphResetCmd+0xe>
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 8003b16:	ea22 0000 	bic.w	r0, r2, r0
 8003b1a:	6118      	str	r0, [r3, #16]
 8003b1c:	4770      	bx	lr
 8003b1e:	bf00      	nop
 8003b20:	40023800 	.word	0x40023800

08003b24 <RCC_AHB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 8003b24:	4b04      	ldr	r3, [pc, #16]	; (8003b38 <RCC_AHB2PeriphResetCmd+0x14>)
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 8003b26:	695a      	ldr	r2, [r3, #20]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003b28:	b109      	cbz	r1, 8003b2e <RCC_AHB2PeriphResetCmd+0xa>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 8003b2a:	4310      	orrs	r0, r2
 8003b2c:	e001      	b.n	8003b32 <RCC_AHB2PeriphResetCmd+0xe>
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 8003b2e:	ea22 0000 	bic.w	r0, r2, r0
 8003b32:	6158      	str	r0, [r3, #20]
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop
 8003b38:	40023800 	.word	0x40023800

08003b3c <RCC_AHB3PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 8003b3c:	4b04      	ldr	r3, [pc, #16]	; (8003b50 <RCC_AHB3PeriphResetCmd+0x14>)
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 8003b3e:	699a      	ldr	r2, [r3, #24]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003b40:	b109      	cbz	r1, 8003b46 <RCC_AHB3PeriphResetCmd+0xa>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 8003b42:	4310      	orrs	r0, r2
 8003b44:	e001      	b.n	8003b4a <RCC_AHB3PeriphResetCmd+0xe>
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
 8003b46:	ea22 0000 	bic.w	r0, r2, r0
 8003b4a:	6198      	str	r0, [r3, #24]
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	40023800 	.word	0x40023800

08003b54 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8003b54:	4b04      	ldr	r3, [pc, #16]	; (8003b68 <RCC_APB1PeriphResetCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8003b56:	6a1a      	ldr	r2, [r3, #32]
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003b58:	b109      	cbz	r1, 8003b5e <RCC_APB1PeriphResetCmd+0xa>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8003b5a:	4310      	orrs	r0, r2
 8003b5c:	e001      	b.n	8003b62 <RCC_APB1PeriphResetCmd+0xe>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8003b5e:	ea22 0000 	bic.w	r0, r2, r0
 8003b62:	6218      	str	r0, [r3, #32]
 8003b64:	4770      	bx	lr
 8003b66:	bf00      	nop
 8003b68:	40023800 	.word	0x40023800

08003b6c <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8003b6c:	4b04      	ldr	r3, [pc, #16]	; (8003b80 <RCC_APB2PeriphResetCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8003b6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003b70:	b109      	cbz	r1, 8003b76 <RCC_APB2PeriphResetCmd+0xa>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8003b72:	4310      	orrs	r0, r2
 8003b74:	e001      	b.n	8003b7a <RCC_APB2PeriphResetCmd+0xe>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8003b76:	ea22 0000 	bic.w	r0, r2, r0
 8003b7a:	6258      	str	r0, [r3, #36]	; 0x24
 8003b7c:	4770      	bx	lr
 8003b7e:	bf00      	nop
 8003b80:	40023800 	.word	0x40023800

08003b84 <RCC_AHB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8003b84:	4b04      	ldr	r3, [pc, #16]	; (8003b98 <RCC_AHB1PeriphClockLPModeCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 8003b86:	6d1a      	ldr	r2, [r3, #80]	; 0x50
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003b88:	b109      	cbz	r1, 8003b8e <RCC_AHB1PeriphClockLPModeCmd+0xa>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 8003b8a:	4310      	orrs	r0, r2
 8003b8c:	e001      	b.n	8003b92 <RCC_AHB1PeriphClockLPModeCmd+0xe>
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
 8003b8e:	ea22 0000 	bic.w	r0, r2, r0
 8003b92:	6518      	str	r0, [r3, #80]	; 0x50
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	40023800 	.word	0x40023800

08003b9c <RCC_AHB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 8003b9c:	4b04      	ldr	r3, [pc, #16]	; (8003bb0 <RCC_AHB2PeriphClockLPModeCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 8003b9e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003ba0:	b109      	cbz	r1, 8003ba6 <RCC_AHB2PeriphClockLPModeCmd+0xa>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 8003ba2:	4310      	orrs	r0, r2
 8003ba4:	e001      	b.n	8003baa <RCC_AHB2PeriphClockLPModeCmd+0xe>
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
 8003ba6:	ea22 0000 	bic.w	r0, r2, r0
 8003baa:	6558      	str	r0, [r3, #84]	; 0x54
 8003bac:	4770      	bx	lr
 8003bae:	bf00      	nop
 8003bb0:	40023800 	.word	0x40023800

08003bb4 <RCC_AHB3PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 8003bb4:	4b04      	ldr	r3, [pc, #16]	; (8003bc8 <RCC_AHB3PeriphClockLPModeCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 8003bb6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003bb8:	b109      	cbz	r1, 8003bbe <RCC_AHB3PeriphClockLPModeCmd+0xa>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 8003bba:	4310      	orrs	r0, r2
 8003bbc:	e001      	b.n	8003bc2 <RCC_AHB3PeriphClockLPModeCmd+0xe>
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
 8003bbe:	ea22 0000 	bic.w	r0, r2, r0
 8003bc2:	6598      	str	r0, [r3, #88]	; 0x58
 8003bc4:	4770      	bx	lr
 8003bc6:	bf00      	nop
 8003bc8:	40023800 	.word	0x40023800

08003bcc <RCC_APB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8003bcc:	4b04      	ldr	r3, [pc, #16]	; (8003be0 <RCC_APB1PeriphClockLPModeCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 8003bce:	6e1a      	ldr	r2, [r3, #96]	; 0x60
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003bd0:	b109      	cbz	r1, 8003bd6 <RCC_APB1PeriphClockLPModeCmd+0xa>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 8003bd2:	4310      	orrs	r0, r2
 8003bd4:	e001      	b.n	8003bda <RCC_APB1PeriphClockLPModeCmd+0xe>
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
 8003bd6:	ea22 0000 	bic.w	r0, r2, r0
 8003bda:	6618      	str	r0, [r3, #96]	; 0x60
 8003bdc:	4770      	bx	lr
 8003bde:	bf00      	nop
 8003be0:	40023800 	.word	0x40023800

08003be4 <RCC_APB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8003be4:	4b04      	ldr	r3, [pc, #16]	; (8003bf8 <RCC_APB2PeriphClockLPModeCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 8003be6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003be8:	b109      	cbz	r1, 8003bee <RCC_APB2PeriphClockLPModeCmd+0xa>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 8003bea:	4310      	orrs	r0, r2
 8003bec:	e001      	b.n	8003bf2 <RCC_APB2PeriphClockLPModeCmd+0xe>
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
 8003bee:	ea22 0000 	bic.w	r0, r2, r0
 8003bf2:	6658      	str	r0, [r3, #100]	; 0x64
 8003bf4:	4770      	bx	lr
 8003bf6:	bf00      	nop
 8003bf8:	40023800 	.word	0x40023800

08003bfc <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
 8003bfc:	4b04      	ldr	r3, [pc, #16]	; (8003c10 <RCC_ITConfig+0x14>)
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8003bfe:	781a      	ldrb	r2, [r3, #0]
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003c00:	b109      	cbz	r1, 8003c06 <RCC_ITConfig+0xa>
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8003c02:	4310      	orrs	r0, r2
 8003c04:	e001      	b.n	8003c0a <RCC_ITConfig+0xe>
  }
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 8003c06:	ea22 0000 	bic.w	r0, r2, r0
 8003c0a:	7018      	strb	r0, [r3, #0]
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	4002380d 	.word	0x4002380d

08003c14 <RCC_GetFlagStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8003c14:	0943      	lsrs	r3, r0, #5
  if (tmp == 1)               /* The flag to check is in CR register */
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	4a07      	ldr	r2, [pc, #28]	; (8003c38 <RCC_GetFlagStatus+0x24>)
 8003c1a:	d101      	bne.n	8003c20 <RCC_GetFlagStatus+0xc>
  {
    statusreg = RCC->CR;
 8003c1c:	6813      	ldr	r3, [r2, #0]
 8003c1e:	e003      	b.n	8003c28 <RCC_GetFlagStatus+0x14>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8003c20:	2b02      	cmp	r3, #2
  {
    statusreg = RCC->BDCR;
 8003c22:	bf0c      	ite	eq
 8003c24:	6f13      	ldreq	r3, [r2, #112]	; 0x70
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8003c26:	6f53      	ldrne	r3, [r2, #116]	; 0x74
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 8003c28:	f000 001f 	and.w	r0, r0, #31
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8003c2c:	fa33 f000 	lsrs.w	r0, r3, r0
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
}
 8003c30:	f000 0001 	and.w	r0, r0, #1
 8003c34:	4770      	bx	lr
 8003c36:	bf00      	nop
 8003c38:	40023800 	.word	0x40023800

08003c3c <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8003c3c:	b507      	push	{r0, r1, r2, lr}
  __IO uint32_t startupcounter = 0;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	9301      	str	r3, [sp, #4]
  ErrorStatus status = ERROR;
  FlagStatus hsestatus = RESET;
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 8003c42:	2031      	movs	r0, #49	; 0x31
 8003c44:	f7ff ffe6 	bl	8003c14 <RCC_GetFlagStatus>
    startupcounter++;
 8003c48:	9b01      	ldr	r3, [sp, #4]
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	9301      	str	r3, [sp, #4]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 8003c4e:	9b01      	ldr	r3, [sp, #4]
 8003c50:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003c54:	d001      	beq.n	8003c5a <RCC_WaitForHSEStartUp+0x1e>
 8003c56:	2800      	cmp	r0, #0
 8003c58:	d0f3      	beq.n	8003c42 <RCC_WaitForHSEStartUp+0x6>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 8003c5a:	2031      	movs	r0, #49	; 0x31
 8003c5c:	f7ff ffda 	bl	8003c14 <RCC_GetFlagStatus>
  else
  {
    status = ERROR;
  }
  return (status);
}
 8003c60:	3000      	adds	r0, #0
 8003c62:	bf18      	it	ne
 8003c64:	2001      	movne	r0, #1
 8003c66:	bd0e      	pop	{r1, r2, r3, pc}

08003c68 <RCC_ClearFlag>:
  * @retval None
  */
void RCC_ClearFlag(void)
{
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 8003c68:	4b02      	ldr	r3, [pc, #8]	; (8003c74 <RCC_ClearFlag+0xc>)
 8003c6a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8003c6c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003c70:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003c72:	4770      	bx	lr
 8003c74:	40023800 	.word	0x40023800

08003c78 <RCC_GetITStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 8003c78:	4b03      	ldr	r3, [pc, #12]	; (8003c88 <RCC_GetITStatus+0x10>)
 8003c7a:	68db      	ldr	r3, [r3, #12]
  {
    bitstatus = SET;
 8003c7c:	4218      	tst	r0, r3
  {
    bitstatus = RESET;
  }
  /* Return the RCC_IT status */
  return  bitstatus;
}
 8003c7e:	bf0c      	ite	eq
 8003c80:	2000      	moveq	r0, #0
 8003c82:	2001      	movne	r0, #1
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop
 8003c88:	40023800 	.word	0x40023800

08003c8c <RCC_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 8003c8c:	4b01      	ldr	r3, [pc, #4]	; (8003c94 <RCC_ClearITPendingBit+0x8>)
 8003c8e:	7018      	strb	r0, [r3, #0]
}
 8003c90:	4770      	bx	lr
 8003c92:	bf00      	nop
 8003c94:	4002380e 	.word	0x4002380e

08003c98 <RNG_DeInit>:
  * @brief  Deinitializes the RNG peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void RNG_DeInit(void)
{
 8003c98:	b508      	push	{r3, lr}
  /* Enable RNG reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, ENABLE);
 8003c9a:	2040      	movs	r0, #64	; 0x40
 8003c9c:	2101      	movs	r1, #1
 8003c9e:	f7ff ff41 	bl	8003b24 <RCC_AHB2PeriphResetCmd>

  /* Release RNG from reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, DISABLE);
 8003ca2:	2040      	movs	r0, #64	; 0x40
 8003ca4:	2100      	movs	r1, #0
}
 8003ca6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* Enable RNG reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, ENABLE);

  /* Release RNG from reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, DISABLE);
 8003caa:	f7ff bf3b 	b.w	8003b24 <RCC_AHB2PeriphResetCmd>

08003cae <RNG_Cmd>:
  * @param  NewState: new state of the RNG peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RNG_Cmd(FunctionalState NewState)
{
 8003cae:	4b05      	ldr	r3, [pc, #20]	; (8003cc4 <RNG_Cmd+0x16>)
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the RNG */
    RNG->CR |= RNG_CR_RNGEN;
 8003cb0:	681a      	ldr	r2, [r3, #0]
void RNG_Cmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003cb2:	b110      	cbz	r0, 8003cba <RNG_Cmd+0xc>
  {
    /* Enable the RNG */
    RNG->CR |= RNG_CR_RNGEN;
 8003cb4:	f042 0204 	orr.w	r2, r2, #4
 8003cb8:	e001      	b.n	8003cbe <RNG_Cmd+0x10>
  }
  else
  {
    /* Disable the RNG */
    RNG->CR &= ~RNG_CR_RNGEN;
 8003cba:	f022 0204 	bic.w	r2, r2, #4
 8003cbe:	601a      	str	r2, [r3, #0]
 8003cc0:	4770      	bx	lr
 8003cc2:	bf00      	nop
 8003cc4:	50060800 	.word	0x50060800

08003cc8 <RNG_GetRandomNumber>:
  * @retval 32-bit random number.
  */
uint32_t RNG_GetRandomNumber(void)
{
  /* Return the 32 bit random number from the DR register */
  return RNG->DR;
 8003cc8:	4b01      	ldr	r3, [pc, #4]	; (8003cd0 <RNG_GetRandomNumber+0x8>)
 8003cca:	6898      	ldr	r0, [r3, #8]
}
 8003ccc:	4770      	bx	lr
 8003cce:	bf00      	nop
 8003cd0:	50060800 	.word	0x50060800

08003cd4 <RNG_ITConfig>:
  * @param  NewState: new state of the RNG interrupt.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RNG_ITConfig(FunctionalState NewState)
{
 8003cd4:	4b04      	ldr	r3, [pc, #16]	; (8003ce8 <RNG_ITConfig+0x14>)
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the RNG interrupt */
    RNG->CR |= RNG_CR_IE;
 8003cd6:	681a      	ldr	r2, [r3, #0]
void RNG_ITConfig(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003cd8:	b110      	cbz	r0, 8003ce0 <RNG_ITConfig+0xc>
  {
    /* Enable the RNG interrupt */
    RNG->CR |= RNG_CR_IE;
 8003cda:	f042 0208 	orr.w	r2, r2, #8
 8003cde:	e001      	b.n	8003ce4 <RNG_ITConfig+0x10>
  }
  else
  {
    /* Disable the RNG interrupt */
    RNG->CR &= ~RNG_CR_IE;
 8003ce0:	f022 0208 	bic.w	r2, r2, #8
 8003ce4:	601a      	str	r2, [r3, #0]
 8003ce6:	4770      	bx	lr
 8003ce8:	50060800 	.word	0x50060800

08003cec <RNG_GetFlagStatus>:
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_RNG_GET_FLAG(RNG_FLAG));

  /* Check the status of the specified RNG flag */
  if ((RNG->SR & RNG_FLAG) != (uint8_t)RESET)
 8003cec:	4b03      	ldr	r3, [pc, #12]	; (8003cfc <RNG_GetFlagStatus+0x10>)
 8003cee:	685b      	ldr	r3, [r3, #4]
  {
    /* RNG_FLAG is set */
    bitstatus = SET;
 8003cf0:	4218      	tst	r0, r3
    /* RNG_FLAG is reset */
    bitstatus = RESET;
  }
  /* Return the RNG_FLAG status */
  return  bitstatus;
}
 8003cf2:	bf0c      	ite	eq
 8003cf4:	2000      	moveq	r0, #0
 8003cf6:	2001      	movne	r0, #1
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	50060800 	.word	0x50060800

08003d00 <RNG_ClearFlag>:
void RNG_ClearFlag(uint8_t RNG_FLAG)
{
  /* Check the parameters */
  assert_param(IS_RNG_CLEAR_FLAG(RNG_FLAG));
  /* Clear the selected RNG flags */
  RNG->SR = ~(uint32_t)(((uint32_t)RNG_FLAG) << 4);
 8003d00:	4b02      	ldr	r3, [pc, #8]	; (8003d0c <RNG_ClearFlag+0xc>)
 8003d02:	ea6f 1000 	mvn.w	r0, r0, lsl #4
 8003d06:	6058      	str	r0, [r3, #4]
}
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	50060800 	.word	0x50060800

08003d10 <RNG_GetITStatus>:
  ITStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_RNG_GET_IT(RNG_IT));

  /* Check the status of the specified RNG interrupt */
  if ((RNG->SR & RNG_IT) != (uint8_t)RESET)
 8003d10:	4b03      	ldr	r3, [pc, #12]	; (8003d20 <RNG_GetITStatus+0x10>)
 8003d12:	685b      	ldr	r3, [r3, #4]
  {
    /* RNG_IT is set */
    bitstatus = SET;
 8003d14:	4218      	tst	r0, r3
    /* RNG_IT is reset */
    bitstatus = RESET;
  }
  /* Return the RNG_IT status */
  return bitstatus;
}
 8003d16:	bf0c      	ite	eq
 8003d18:	2000      	moveq	r0, #0
 8003d1a:	2001      	movne	r0, #1
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	50060800 	.word	0x50060800

08003d24 <RNG_ClearITPendingBit>:
{
  /* Check the parameters */
  assert_param(IS_RNG_IT(RNG_IT));

  /* Clear the selected RNG interrupt pending bit */
  RNG->SR = (uint8_t)~RNG_IT;
 8003d24:	43c0      	mvns	r0, r0
 8003d26:	4b02      	ldr	r3, [pc, #8]	; (8003d30 <RNG_ClearITPendingBit+0xc>)
 8003d28:	b2c0      	uxtb	r0, r0
 8003d2a:	6058      	str	r0, [r3, #4]
}
 8003d2c:	4770      	bx	lr
 8003d2e:	bf00      	nop
 8003d30:	50060800 	.word	0x50060800

08003d34 <RTC_ByteToBcd2>:
  * @param  Value: Byte to be converted.
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint8_t bcdhigh = 0;
 8003d34:	2300      	movs	r3, #0
  
  while (Value >= 10)
 8003d36:	e003      	b.n	8003d40 <RTC_ByteToBcd2+0xc>
  {
    bcdhigh++;
 8003d38:	3301      	adds	r3, #1
    Value -= 10;
 8003d3a:	380a      	subs	r0, #10
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
  {
    bcdhigh++;
 8003d3c:	b2db      	uxtb	r3, r3
    Value -= 10;
 8003d3e:	b2c0      	uxtb	r0, r0
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
 8003d40:	2809      	cmp	r0, #9
 8003d42:	d8f9      	bhi.n	8003d38 <RTC_ByteToBcd2+0x4>
  {
    bcdhigh++;
    Value -= 10;
  }
  
  return  ((uint8_t)(bcdhigh << 4) | Value);
 8003d44:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 8003d48:	b2c0      	uxtb	r0, r0
 8003d4a:	4770      	bx	lr

08003d4c <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint8_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8003d4c:	0902      	lsrs	r2, r0, #4
  return (tmp + (Value & (uint8_t)0x0F));
 8003d4e:	f000 030f 	and.w	r3, r0, #15
 8003d52:	200a      	movs	r0, #10
 8003d54:	fb00 3002 	mla	r0, r0, r2, r3
}
 8003d58:	b2c0      	uxtb	r0, r0
 8003d5a:	4770      	bx	lr

08003d5c <RTC_StructInit>:
    
  /* Initialize the RTC_AsynchPrediv member */
  RTC_InitStruct->RTC_AsynchPrediv = (uint32_t)0x7F;

  /* Initialize the RTC_SynchPrediv member */
  RTC_InitStruct->RTC_SynchPrediv = (uint32_t)0xFF; 
 8003d5c:	2100      	movs	r1, #0
 8003d5e:	227f      	movs	r2, #127	; 0x7f
 8003d60:	23ff      	movs	r3, #255	; 0xff
 8003d62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
}
 8003d66:	4770      	bx	lr

08003d68 <RTC_WriteProtectionCmd>:
  * @param  NewState: new state of the write protection.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_WriteProtectionCmd(FunctionalState NewState)
{
 8003d68:	4b04      	ldr	r3, [pc, #16]	; (8003d7c <RTC_WriteProtectionCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 8003d6a:	b108      	cbz	r0, 8003d70 <RTC_WriteProtectionCmd+0x8>
  {
    /* Enable the write protection for RTC registers */
    RTC->WPR = 0xFF;   
 8003d6c:	22ff      	movs	r2, #255	; 0xff
 8003d6e:	e002      	b.n	8003d76 <RTC_WriteProtectionCmd+0xe>
  }
  else
  {
    /* Disable the write protection for RTC registers */
    RTC->WPR = 0xCA;
 8003d70:	22ca      	movs	r2, #202	; 0xca
 8003d72:	625a      	str	r2, [r3, #36]	; 0x24
    RTC->WPR = 0x53;    
 8003d74:	2253      	movs	r2, #83	; 0x53
 8003d76:	625a      	str	r2, [r3, #36]	; 0x24
 8003d78:	4770      	bx	lr
 8003d7a:	bf00      	nop
 8003d7c:	40002800 	.word	0x40002800

08003d80 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode  
  */
ErrorStatus RTC_EnterInitMode(void)
{
 8003d80:	b082      	sub	sp, #8
  __IO uint32_t initcounter = 0x00;
 8003d82:	2300      	movs	r3, #0
 8003d84:	9301      	str	r3, [sp, #4]
  ErrorStatus status = ERROR;
  uint32_t initstatus = 0x00;
     
  /* Check if the Initialization mode is set */
  if ((RTC->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003d86:	4b0c      	ldr	r3, [pc, #48]	; (8003db8 <RTC_EnterInitMode+0x38>)
 8003d88:	68da      	ldr	r2, [r3, #12]
 8003d8a:	0652      	lsls	r2, r2, #25
 8003d8c:	d411      	bmi.n	8003db2 <RTC_EnterInitMode+0x32>
  {
    /* Set the Initialization mode */
    RTC->ISR = (uint32_t)RTC_INIT_MASK;
 8003d8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d92:	60da      	str	r2, [r3, #12]
    
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    do
    {
      initstatus = RTC->ISR & RTC_ISR_INITF;
 8003d94:	68da      	ldr	r2, [r3, #12]
      initcounter++;  
 8003d96:	9901      	ldr	r1, [sp, #4]
 8003d98:	3101      	adds	r1, #1
 8003d9a:	9101      	str	r1, [sp, #4]
    } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 8003d9c:	9901      	ldr	r1, [sp, #4]
 8003d9e:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8003da2:	d001      	beq.n	8003da8 <RTC_EnterInitMode+0x28>
 8003da4:	0650      	lsls	r0, r2, #25
 8003da6:	d5f5      	bpl.n	8003d94 <RTC_EnterInitMode+0x14>
    
    if ((RTC->ISR & RTC_ISR_INITF) != RESET)
 8003da8:	4b03      	ldr	r3, [pc, #12]	; (8003db8 <RTC_EnterInitMode+0x38>)
 8003daa:	68d8      	ldr	r0, [r3, #12]
    {
      status = SUCCESS;
 8003dac:	f3c0 1080 	ubfx	r0, r0, #6, #1
 8003db0:	e000      	b.n	8003db4 <RTC_EnterInitMode+0x34>
      status = ERROR;
    }        
  }
  else
  {
    status = SUCCESS;  
 8003db2:	2001      	movs	r0, #1
  } 
    
  return (status);  
}
 8003db4:	b002      	add	sp, #8
 8003db6:	4770      	bx	lr
 8003db8:	40002800 	.word	0x40002800

08003dbc <RTC_ExitInitMode>:
  * @retval None
  */
void RTC_ExitInitMode(void)
{ 
  /* Exit Initialization mode */
  RTC->ISR &= (uint32_t)~RTC_ISR_INIT;  
 8003dbc:	4b02      	ldr	r3, [pc, #8]	; (8003dc8 <RTC_ExitInitMode+0xc>)
 8003dbe:	68da      	ldr	r2, [r3, #12]
 8003dc0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003dc4:	60da      	str	r2, [r3, #12]
}
 8003dc6:	4770      	bx	lr
 8003dc8:	40002800 	.word	0x40002800

08003dcc <RTC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are initialized
  *          - ERROR: RTC registers are not initialized  
  */
ErrorStatus RTC_Init(RTC_InitTypeDef* RTC_InitStruct)
{
 8003dcc:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_RTC_HOUR_FORMAT(RTC_InitStruct->RTC_HourFormat));
  assert_param(IS_RTC_ASYNCH_PREDIV(RTC_InitStruct->RTC_AsynchPrediv));
  assert_param(IS_RTC_SYNCH_PREDIV(RTC_InitStruct->RTC_SynchPrediv));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8003dce:	4c0f      	ldr	r4, [pc, #60]	; (8003e0c <RTC_Init+0x40>)
 8003dd0:	23ca      	movs	r3, #202	; 0xca
 8003dd2:	6263      	str	r3, [r4, #36]	; 0x24
  RTC->WPR = 0x53;
 8003dd4:	2353      	movs	r3, #83	; 0x53
 8003dd6:	6263      	str	r3, [r4, #36]	; 0x24
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are initialized
  *          - ERROR: RTC registers are not initialized  
  */
ErrorStatus RTC_Init(RTC_InitTypeDef* RTC_InitStruct)
{
 8003dd8:	4605      	mov	r5, r0
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
  RTC->WPR = 0x53;

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 8003dda:	f7ff ffd1 	bl	8003d80 <RTC_EnterInitMode>
 8003dde:	b188      	cbz	r0, 8003e04 <RTC_Init+0x38>
    status = ERROR;
  } 
  else
  {
    /* Clear RTC CR FMT Bit */
    RTC->CR &= ((uint32_t)~(RTC_CR_FMT));
 8003de0:	68a3      	ldr	r3, [r4, #8]
 8003de2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003de6:	60a3      	str	r3, [r4, #8]
    /* Set RTC_CR register */
    RTC->CR |=  ((uint32_t)(RTC_InitStruct->RTC_HourFormat));
 8003de8:	68a2      	ldr	r2, [r4, #8]
 8003dea:	682b      	ldr	r3, [r5, #0]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	60a3      	str	r3, [r4, #8]
  
    /* Configure the RTC PRER */
    RTC->PRER = (uint32_t)(RTC_InitStruct->RTC_SynchPrediv);
 8003df0:	68ab      	ldr	r3, [r5, #8]
 8003df2:	6123      	str	r3, [r4, #16]
    RTC->PRER |= (uint32_t)(RTC_InitStruct->RTC_AsynchPrediv << 16);
 8003df4:	6923      	ldr	r3, [r4, #16]
 8003df6:	686a      	ldr	r2, [r5, #4]
 8003df8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003dfc:	6123      	str	r3, [r4, #16]

    /* Exit Initialization mode */
    RTC_ExitInitMode();
 8003dfe:	f7ff ffdd 	bl	8003dbc <RTC_ExitInitMode>

    status = SUCCESS;    
 8003e02:	2001      	movs	r0, #1
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8003e04:	4b01      	ldr	r3, [pc, #4]	; (8003e0c <RTC_Init+0x40>)
 8003e06:	22ff      	movs	r2, #255	; 0xff
 8003e08:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
}
 8003e0a:	bd38      	pop	{r3, r4, r5, pc}
 8003e0c:	40002800 	.word	0x40002800

08003e10 <RTC_WaitForSynchro>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are synchronised
  *          - ERROR: RTC registers are not synchronised
  */
ErrorStatus RTC_WaitForSynchro(void)
{
 8003e10:	b082      	sub	sp, #8
  __IO uint32_t synchrocounter = 0;
 8003e12:	2300      	movs	r3, #0
 8003e14:	9301      	str	r3, [sp, #4]
  ErrorStatus status = ERROR;
  uint32_t synchrostatus = 0x00;

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8003e16:	4b0d      	ldr	r3, [pc, #52]	; (8003e4c <RTC_WaitForSynchro+0x3c>)
 8003e18:	22ca      	movs	r2, #202	; 0xca
 8003e1a:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8003e1c:	2253      	movs	r2, #83	; 0x53
 8003e1e:	625a      	str	r2, [r3, #36]	; 0x24
    
  /* Clear RSF flag */
  RTC->ISR &= (uint32_t)RTC_RSF_MASK;
 8003e20:	68da      	ldr	r2, [r3, #12]
 8003e22:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e26:	60da      	str	r2, [r3, #12]
    
  /* Wait the registers to be synchronised */
  do
  {
    synchrostatus = RTC->ISR & RTC_ISR_RSF;
 8003e28:	68d9      	ldr	r1, [r3, #12]
    synchrocounter++;  
 8003e2a:	9a01      	ldr	r2, [sp, #4]
 8003e2c:	3201      	adds	r2, #1
 8003e2e:	9201      	str	r2, [sp, #4]
  } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 8003e30:	9a01      	ldr	r2, [sp, #4]
 8003e32:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8003e36:	4a05      	ldr	r2, [pc, #20]	; (8003e4c <RTC_WaitForSynchro+0x3c>)
 8003e38:	d001      	beq.n	8003e3e <RTC_WaitForSynchro+0x2e>
 8003e3a:	0689      	lsls	r1, r1, #26
 8003e3c:	d5f4      	bpl.n	8003e28 <RTC_WaitForSynchro+0x18>
    
  if ((RTC->ISR & RTC_ISR_RSF) != RESET)
 8003e3e:	68d0      	ldr	r0, [r2, #12]
  {
    status = ERROR;
  }        

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8003e40:	23ff      	movs	r3, #255	; 0xff
 8003e42:	6253      	str	r3, [r2, #36]	; 0x24
    
  return (status); 
}
 8003e44:	f3c0 1040 	ubfx	r0, r0, #5, #1
 8003e48:	b002      	add	sp, #8
 8003e4a:	4770      	bx	lr
 8003e4c:	40002800 	.word	0x40002800

08003e50 <RTC_DeInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are deinitialized
  *          - ERROR: RTC registers are not deinitialized
  */
ErrorStatus RTC_DeInit(void)
{
 8003e50:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t wutcounter = 0x00;
  uint32_t wutwfstatus = 0x00;
  ErrorStatus status = ERROR;
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8003e52:	4c1e      	ldr	r4, [pc, #120]	; (8003ecc <RTC_DeInit+0x7c>)
 8003e54:	23ca      	movs	r3, #202	; 0xca
  *          - SUCCESS: RTC registers are deinitialized
  *          - ERROR: RTC registers are not deinitialized
  */
ErrorStatus RTC_DeInit(void)
{
  __IO uint32_t wutcounter = 0x00;
 8003e56:	2500      	movs	r5, #0
 8003e58:	9501      	str	r5, [sp, #4]
  uint32_t wutwfstatus = 0x00;
  ErrorStatus status = ERROR;
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8003e5a:	6263      	str	r3, [r4, #36]	; 0x24
  RTC->WPR = 0x53;
 8003e5c:	2353      	movs	r3, #83	; 0x53
 8003e5e:	6263      	str	r3, [r4, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 8003e60:	f7ff ff8e 	bl	8003d80 <RTC_EnterInitMode>
 8003e64:	2800      	cmp	r0, #0
 8003e66:	d02c      	beq.n	8003ec2 <RTC_DeInit+0x72>
  }  
  else
  {
    /* Reset TR, DR and CR registers */
    RTC->TR = (uint32_t)0x00000000;
    RTC->DR = (uint32_t)0x00002101;
 8003e68:	f242 1301 	movw	r3, #8449	; 0x2101
    status = ERROR;
  }  
  else
  {
    /* Reset TR, DR and CR registers */
    RTC->TR = (uint32_t)0x00000000;
 8003e6c:	6025      	str	r5, [r4, #0]
    RTC->DR = (uint32_t)0x00002101;
 8003e6e:	6063      	str	r3, [r4, #4]
    /* Reset All CR bits except CR[2:0] */
    RTC->CR &= (uint32_t)0x00000007;
 8003e70:	68a3      	ldr	r3, [r4, #8]
 8003e72:	f003 0307 	and.w	r3, r3, #7
 8003e76:	60a3      	str	r3, [r4, #8]
  
    /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
    do
    {
      wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
 8003e78:	68e3      	ldr	r3, [r4, #12]
      wutcounter++;  
 8003e7a:	9a01      	ldr	r2, [sp, #4]
 8003e7c:	3201      	adds	r2, #1
 8003e7e:	9201      	str	r2, [sp, #4]
    } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 8003e80:	9a01      	ldr	r2, [sp, #4]
 8003e82:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8003e86:	d001      	beq.n	8003e8c <RTC_DeInit+0x3c>
 8003e88:	0758      	lsls	r0, r3, #29
 8003e8a:	d5f5      	bpl.n	8003e78 <RTC_DeInit+0x28>
    
    if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 8003e8c:	4b0f      	ldr	r3, [pc, #60]	; (8003ecc <RTC_DeInit+0x7c>)
 8003e8e:	68d8      	ldr	r0, [r3, #12]
 8003e90:	f010 0004 	ands.w	r0, r0, #4
 8003e94:	d015      	beq.n	8003ec2 <RTC_DeInit+0x72>
      status = ERROR;
    }
    else
    {
      /* Reset all RTC CR register bits */
      RTC->CR &= (uint32_t)0x00000000;
 8003e96:	689a      	ldr	r2, [r3, #8]
      RTC->WUTR = (uint32_t)0x0000FFFF;
 8003e98:	f64f 71ff 	movw	r1, #65535	; 0xffff
      status = ERROR;
    }
    else
    {
      /* Reset all RTC CR register bits */
      RTC->CR &= (uint32_t)0x00000000;
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	609a      	str	r2, [r3, #8]
      RTC->WUTR = (uint32_t)0x0000FFFF;
 8003ea0:	6159      	str	r1, [r3, #20]
      RTC->PRER = (uint32_t)0x007F00FF;
 8003ea2:	490b      	ldr	r1, [pc, #44]	; (8003ed0 <RTC_DeInit+0x80>)
 8003ea4:	6119      	str	r1, [r3, #16]
      RTC->CALIBR = (uint32_t)0x00000000;
 8003ea6:	619a      	str	r2, [r3, #24]
      RTC->ALRMAR = (uint32_t)0x00000000;        
 8003ea8:	61da      	str	r2, [r3, #28]
      RTC->ALRMBR = (uint32_t)0x00000000;
 8003eaa:	621a      	str	r2, [r3, #32]
      RTC->SHIFTR = (uint32_t)0x00000000;
 8003eac:	62da      	str	r2, [r3, #44]	; 0x2c
      RTC->CALR = (uint32_t)0x00000000;
 8003eae:	63da      	str	r2, [r3, #60]	; 0x3c
      RTC->ALRMASSR = (uint32_t)0x00000000;
 8003eb0:	645a      	str	r2, [r3, #68]	; 0x44
      RTC->ALRMBSSR = (uint32_t)0x00000000;
 8003eb2:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Reset ISR register and exit initialization mode */
      RTC->ISR = (uint32_t)0x00000000;
 8003eb4:	60da      	str	r2, [r3, #12]
      
      /* Reset Tamper and alternate functions configuration register */
      RTC->TAFCR = 0x00000000;
 8003eb6:	641a      	str	r2, [r3, #64]	; 0x40
  
      if(RTC_WaitForSynchro() == ERROR)
 8003eb8:	f7ff ffaa 	bl	8003e10 <RTC_WaitForSynchro>
      {
        status = ERROR;
 8003ebc:	3000      	adds	r0, #0
 8003ebe:	bf18      	it	ne
 8003ec0:	2001      	movne	r0, #1
      }
    }
  }
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;  
 8003ec2:	4b02      	ldr	r3, [pc, #8]	; (8003ecc <RTC_DeInit+0x7c>)
 8003ec4:	22ff      	movs	r2, #255	; 0xff
 8003ec6:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
}
 8003ec8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8003eca:	bf00      	nop
 8003ecc:	40002800 	.word	0x40002800
 8003ed0:	007f00ff 	.word	0x007f00ff

08003ed4 <RTC_RefClockCmd>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC reference clock detection is enabled
  *          - ERROR: RTC reference clock detection is disabled  
  */
ErrorStatus RTC_RefClockCmd(FunctionalState NewState)
{ 
 8003ed4:	b538      	push	{r3, r4, r5, lr}
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8003ed6:	4c0b      	ldr	r4, [pc, #44]	; (8003f04 <RTC_RefClockCmd+0x30>)
 8003ed8:	23ca      	movs	r3, #202	; 0xca
 8003eda:	6263      	str	r3, [r4, #36]	; 0x24
  RTC->WPR = 0x53;
 8003edc:	2353      	movs	r3, #83	; 0x53
 8003ede:	6263      	str	r3, [r4, #36]	; 0x24
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC reference clock detection is enabled
  *          - ERROR: RTC reference clock detection is disabled  
  */
ErrorStatus RTC_RefClockCmd(FunctionalState NewState)
{ 
 8003ee0:	4605      	mov	r5, r0
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
  RTC->WPR = 0x53;
    
  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 8003ee2:	f7ff ff4d 	bl	8003d80 <RTC_EnterInitMode>
 8003ee6:	b150      	cbz	r0, 8003efe <RTC_RefClockCmd+0x2a>
  else
  {  
    if (NewState != DISABLE)
    {
      /* Enable the RTC reference clock detection */
      RTC->CR |= RTC_CR_REFCKON;   
 8003ee8:	68a3      	ldr	r3, [r4, #8]
  {
    status = ERROR;
  } 
  else
  {  
    if (NewState != DISABLE)
 8003eea:	b115      	cbz	r5, 8003ef2 <RTC_RefClockCmd+0x1e>
    {
      /* Enable the RTC reference clock detection */
      RTC->CR |= RTC_CR_REFCKON;   
 8003eec:	f043 0310 	orr.w	r3, r3, #16
 8003ef0:	e001      	b.n	8003ef6 <RTC_RefClockCmd+0x22>
    }
    else
    {
      /* Disable the RTC reference clock detection */
      RTC->CR &= ~RTC_CR_REFCKON;    
 8003ef2:	f023 0310 	bic.w	r3, r3, #16
 8003ef6:	60a3      	str	r3, [r4, #8]
    }
    /* Exit Initialization mode */
    RTC_ExitInitMode();
 8003ef8:	f7ff ff60 	bl	8003dbc <RTC_ExitInitMode>
    
    status = SUCCESS;
 8003efc:	2001      	movs	r0, #1
  }
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;  
 8003efe:	23ff      	movs	r3, #255	; 0xff
 8003f00:	6263      	str	r3, [r4, #36]	; 0x24
  
  return status; 
}
 8003f02:	bd38      	pop	{r3, r4, r5, pc}
 8003f04:	40002800 	.word	0x40002800

08003f08 <RTC_BypassShadowCmd>:
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8003f08:	4b07      	ldr	r3, [pc, #28]	; (8003f28 <RTC_BypassShadowCmd+0x20>)
 8003f0a:	22ca      	movs	r2, #202	; 0xca
 8003f0c:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8003f0e:	2253      	movs	r2, #83	; 0x53
 8003f10:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (NewState != DISABLE)
  {
    /* Set the BYPSHAD bit */
    RTC->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8003f12:	689a      	ldr	r2, [r3, #8]

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
  RTC->WPR = 0x53;
  
  if (NewState != DISABLE)
 8003f14:	b110      	cbz	r0, 8003f1c <RTC_BypassShadowCmd+0x14>
  {
    /* Set the BYPSHAD bit */
    RTC->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8003f16:	f042 0220 	orr.w	r2, r2, #32
 8003f1a:	e001      	b.n	8003f20 <RTC_BypassShadowCmd+0x18>
  }
  else
  {
    /* Reset the BYPSHAD bit */
    RTC->CR &= (uint8_t)~RTC_CR_BYPSHAD;
 8003f1c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8003f20:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 8003f22:	22ff      	movs	r2, #255	; 0xff
 8003f24:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003f26:	4770      	bx	lr
 8003f28:	40002800 	.word	0x40002800

08003f2c <RTC_SetTime>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Time register is configured
  *          - ERROR: RTC Time register is not configured
  */
ErrorStatus RTC_SetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
{
 8003f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f2e:	4b24      	ldr	r3, [pc, #144]	; (8003fc0 <RTC_SetTime+0x94>)
 8003f30:	460c      	mov	r4, r1
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));
  
  if (RTC_Format == RTC_Format_BIN)
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003f32:	689b      	ldr	r3, [r3, #8]
  ErrorStatus status = ERROR;
    
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));
  
  if (RTC_Format == RTC_Format_BIN)
 8003f34:	b920      	cbnz	r0, 8003f40 <RTC_SetTime+0x14>
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003f36:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8003f3a:	d106      	bne.n	8003f4a <RTC_SetTime+0x1e>
      assert_param(IS_RTC_HOUR12(RTC_TimeStruct->RTC_Hours));
      assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12));
    } 
    else
    {
      RTC_TimeStruct->RTC_H12 = 0x00;
 8003f3c:	70cb      	strb	r3, [r1, #3]
 8003f3e:	e004      	b.n	8003f4a <RTC_SetTime+0x1e>
    assert_param(IS_RTC_MINUTES(RTC_TimeStruct->RTC_Minutes));
    assert_param(IS_RTC_SECONDS(RTC_TimeStruct->RTC_Seconds));
  }
  else
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003f40:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8003f44:	d130      	bne.n	8003fa8 <RTC_SetTime+0x7c>
      assert_param(IS_RTC_HOUR12(tmpreg));
      assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12)); 
    } 
    else
    {
      RTC_TimeStruct->RTC_H12 = 0x00;
 8003f46:	70cb      	strb	r3, [r1, #3]
 8003f48:	e02e      	b.n	8003fa8 <RTC_SetTime+0x7c>
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 8003f4a:	7820      	ldrb	r0, [r4, #0]
 8003f4c:	f7ff fef2 	bl	8003d34 <RTC_ByteToBcd2>
 8003f50:	4607      	mov	r7, r0
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 8003f52:	7860      	ldrb	r0, [r4, #1]
 8003f54:	f7ff feee 	bl	8003d34 <RTC_ByteToBcd2>
 8003f58:	4606      	mov	r6, r0
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
 8003f5a:	78a0      	ldrb	r0, [r4, #2]
 8003f5c:	f7ff feea 	bl	8003d34 <RTC_ByteToBcd2>
                   (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
 8003f60:	78e5      	ldrb	r5, [r4, #3]
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 8003f62:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 8003f66:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 8003f6a:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
                   (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
  }  

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8003f6e:	4c14      	ldr	r4, [pc, #80]	; (8003fc0 <RTC_SetTime+0x94>)
 8003f70:	23ca      	movs	r3, #202	; 0xca
 8003f72:	6263      	str	r3, [r4, #36]	; 0x24
  RTC->WPR = 0x53;
 8003f74:	2353      	movs	r3, #83	; 0x53
 8003f76:	6263      	str	r3, [r4, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 8003f78:	f7ff ff02 	bl	8003d80 <RTC_EnterInitMode>
 8003f7c:	b180      	cbz	r0, 8003fa0 <RTC_SetTime+0x74>
    status = ERROR;
  } 
  else
  {
    /* Set the RTC_TR register */
    RTC->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003f7e:	f005 357f 	and.w	r5, r5, #2139062143	; 0x7f7f7f7f
 8003f82:	f025 45fe 	bic.w	r5, r5, #2130706432	; 0x7f000000
 8003f86:	6025      	str	r5, [r4, #0]

    /* Exit Initialization mode */
    RTC_ExitInitMode(); 
 8003f88:	f7ff ff18 	bl	8003dbc <RTC_ExitInitMode>

    /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((RTC->CR & RTC_CR_BYPSHAD) == RESET)
 8003f8c:	68a3      	ldr	r3, [r4, #8]
 8003f8e:	069b      	lsls	r3, r3, #26
 8003f90:	d405      	bmi.n	8003f9e <RTC_SetTime+0x72>
    {
      if (RTC_WaitForSynchro() == ERROR)
 8003f92:	f7ff ff3d 	bl	8003e10 <RTC_WaitForSynchro>
      {
        status = ERROR;
 8003f96:	3000      	adds	r0, #0
 8003f98:	bf18      	it	ne
 8003f9a:	2001      	movne	r0, #1
 8003f9c:	e000      	b.n	8003fa0 <RTC_SetTime+0x74>
        status = SUCCESS;
      }
    }
    else
    {
      status = SUCCESS;
 8003f9e:	2001      	movs	r0, #1
    }
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8003fa0:	4b07      	ldr	r3, [pc, #28]	; (8003fc0 <RTC_SetTime+0x94>)
 8003fa2:	22ff      	movs	r2, #255	; 0xff
 8003fa4:	625a      	str	r2, [r3, #36]	; 0x24
    
  return status;
}
 8003fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
             ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 8003fa8:	7865      	ldrb	r5, [r4, #1]
  }
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 8003faa:	7823      	ldrb	r3, [r4, #0]
             ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 8003fac:	022d      	lsls	r5, r5, #8
  }
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 8003fae:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
             ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
 8003fb2:	78a3      	ldrb	r3, [r4, #2]
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
             ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 8003fb4:	431d      	orrs	r5, r3
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
 8003fb6:	78e3      	ldrb	r3, [r4, #3]
  }
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 8003fb8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8003fbc:	e7d7      	b.n	8003f6e <RTC_SetTime+0x42>
 8003fbe:	bf00      	nop
 8003fc0:	40002800 	.word	0x40002800

08003fc4 <RTC_TimeStructInit>:
  * @retval None
  */
void RTC_TimeStructInit(RTC_TimeTypeDef* RTC_TimeStruct)
{
  /* Time = 00h:00min:00sec */
  RTC_TimeStruct->RTC_H12 = RTC_H12_AM;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	70c3      	strb	r3, [r0, #3]
  RTC_TimeStruct->RTC_Hours = 0;
 8003fc8:	7003      	strb	r3, [r0, #0]
  RTC_TimeStruct->RTC_Minutes = 0;
 8003fca:	7043      	strb	r3, [r0, #1]
  RTC_TimeStruct->RTC_Seconds = 0; 
 8003fcc:	7083      	strb	r3, [r0, #2]
}
 8003fce:	4770      	bx	lr

08003fd0 <RTC_GetTime>:

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));

  /* Get the RTC_TR register */
  tmpreg = (uint32_t)(RTC->TR & RTC_TR_RESERVED_MASK); 
 8003fd0:	4b0f      	ldr	r3, [pc, #60]	; (8004010 <RTC_GetTime+0x40>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
  * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure that will 
  *                        contain the returned current time configuration.     
  * @retval None
  */
void RTC_GetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
{
 8003fd4:	b570      	push	{r4, r5, r6, lr}

  /* Get the RTC_TR register */
  tmpreg = (uint32_t)(RTC->TR & RTC_TR_RESERVED_MASK); 
  
  /* Fill the structure fields with the read parameters */
  RTC_TimeStruct->RTC_Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8003fd6:	f3c3 4205 	ubfx	r2, r3, #16, #6
  RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8003fda:	f3c3 2606 	ubfx	r6, r3, #8, #7
  RTC_TimeStruct->RTC_Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8003fde:	f003 057f 	and.w	r5, r3, #127	; 0x7f
  RTC_TimeStruct->RTC_H12 = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);  
 8003fe2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fe6:	0c1b      	lsrs	r3, r3, #16
  * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure that will 
  *                        contain the returned current time configuration.     
  * @retval None
  */
void RTC_GetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
{
 8003fe8:	460c      	mov	r4, r1

  /* Get the RTC_TR register */
  tmpreg = (uint32_t)(RTC->TR & RTC_TR_RESERVED_MASK); 
  
  /* Fill the structure fields with the read parameters */
  RTC_TimeStruct->RTC_Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8003fea:	700a      	strb	r2, [r1, #0]
  RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8003fec:	704e      	strb	r6, [r1, #1]
  RTC_TimeStruct->RTC_Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8003fee:	708d      	strb	r5, [r1, #2]
  RTC_TimeStruct->RTC_H12 = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);  
 8003ff0:	70cb      	strb	r3, [r1, #3]

  /* Check the input parameters format */
  if (RTC_Format == RTC_Format_BIN)
 8003ff2:	b958      	cbnz	r0, 800400c <RTC_GetTime+0x3c>
  {
    /* Convert the structure parameters to Binary format */
    RTC_TimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 8003ff4:	4610      	mov	r0, r2
 8003ff6:	f7ff fea9 	bl	8003d4c <RTC_Bcd2ToByte>
 8003ffa:	7020      	strb	r0, [r4, #0]
    RTC_TimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes);
 8003ffc:	4630      	mov	r0, r6
 8003ffe:	f7ff fea5 	bl	8003d4c <RTC_Bcd2ToByte>
 8004002:	7060      	strb	r0, [r4, #1]
    RTC_TimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds);   
 8004004:	4628      	mov	r0, r5
 8004006:	f7ff fea1 	bl	8003d4c <RTC_Bcd2ToByte>
 800400a:	70a0      	strb	r0, [r4, #2]
 800400c:	bd70      	pop	{r4, r5, r6, pc}
 800400e:	bf00      	nop
 8004010:	40002800 	.word	0x40002800

08004014 <RTC_GetSubSecond>:
uint32_t RTC_GetSubSecond(void)
{
  uint32_t tmpreg = 0;
  
  /* Get subseconds values from the correspondent registers*/
  tmpreg = (uint32_t)(RTC->SSR);
 8004014:	4b01      	ldr	r3, [pc, #4]	; (800401c <RTC_GetSubSecond+0x8>)
 8004016:	6a98      	ldr	r0, [r3, #40]	; 0x28
  
  /* Read DR register to unfroze calendar registers */
  (void) (RTC->DR);
 8004018:	685b      	ldr	r3, [r3, #4]
  
  return (tmpreg);
}
 800401a:	4770      	bx	lr
 800401c:	40002800 	.word	0x40002800

08004020 <RTC_SetDate>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Date register is configured
  *          - ERROR: RTC Date register is not configured
  */
ErrorStatus RTC_SetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
{
 8004020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004022:	460c      	mov	r4, r1
 8004024:	784b      	ldrb	r3, [r1, #1]
  ErrorStatus status = ERROR;
  
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));

  if ((RTC_Format == RTC_Format_BIN) && ((RTC_DateStruct->RTC_Month & 0x10) == 0x10))
 8004026:	b930      	cbnz	r0, 8004036 <RTC_SetDate+0x16>
 8004028:	06d9      	lsls	r1, r3, #27
 800402a:	d52a      	bpl.n	8004082 <RTC_SetDate+0x62>
  {
    RTC_DateStruct->RTC_Month = (RTC_DateStruct->RTC_Month & (uint32_t)~(0x10)) + 0x0A;
 800402c:	f023 0310 	bic.w	r3, r3, #16
 8004030:	330a      	adds	r3, #10
 8004032:	7063      	strb	r3, [r4, #1]
 8004034:	e025      	b.n	8004082 <RTC_SetDate+0x62>
  assert_param(IS_RTC_WEEKDAY(RTC_DateStruct->RTC_WeekDay));

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 8004036:	78cd      	ldrb	r5, [r1, #3]
              (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
 8004038:	788a      	ldrb	r2, [r1, #2]

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
              (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 800403a:	021b      	lsls	r3, r3, #8
  assert_param(IS_RTC_WEEKDAY(RTC_DateStruct->RTC_WeekDay));

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 800403c:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
              (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
 8004040:	780b      	ldrb	r3, [r1, #0]

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
              (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 8004042:	4315      	orrs	r5, r2
  assert_param(IS_RTC_WEEKDAY(RTC_DateStruct->RTC_WeekDay));

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 8004044:	ea45 3543 	orr.w	r5, r5, r3, lsl #13
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
              ((uint32_t)RTC_DateStruct->RTC_WeekDay << 13));
  }

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8004048:	4c17      	ldr	r4, [pc, #92]	; (80040a8 <RTC_SetDate+0x88>)
 800404a:	23ca      	movs	r3, #202	; 0xca
 800404c:	6263      	str	r3, [r4, #36]	; 0x24
  RTC->WPR = 0x53;
 800404e:	2353      	movs	r3, #83	; 0x53
 8004050:	6263      	str	r3, [r4, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 8004052:	f7ff fe95 	bl	8003d80 <RTC_EnterInitMode>
 8004056:	b180      	cbz	r0, 800407a <RTC_SetDate+0x5a>
    status = ERROR;
  } 
  else
  {
    /* Set the RTC_DR register */
    RTC->DR = (uint32_t)(tmpreg & RTC_DR_RESERVED_MASK);
 8004058:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 800405c:	f025 05c0 	bic.w	r5, r5, #192	; 0xc0
 8004060:	6065      	str	r5, [r4, #4]

    /* Exit Initialization mode */
    RTC_ExitInitMode(); 
 8004062:	f7ff feab 	bl	8003dbc <RTC_ExitInitMode>

    /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((RTC->CR & RTC_CR_BYPSHAD) == RESET)
 8004066:	68a3      	ldr	r3, [r4, #8]
 8004068:	069a      	lsls	r2, r3, #26
 800406a:	d405      	bmi.n	8004078 <RTC_SetDate+0x58>
    {
      if (RTC_WaitForSynchro() == ERROR)
 800406c:	f7ff fed0 	bl	8003e10 <RTC_WaitForSynchro>
      {
        status = ERROR;
 8004070:	3000      	adds	r0, #0
 8004072:	bf18      	it	ne
 8004074:	2001      	movne	r0, #1
 8004076:	e000      	b.n	800407a <RTC_SetDate+0x5a>
        status = SUCCESS;
      }
    }
    else
    {
      status = SUCCESS;
 8004078:	2001      	movs	r0, #1
    }
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;   
 800407a:	4b0b      	ldr	r3, [pc, #44]	; (80040a8 <RTC_SetDate+0x88>)
 800407c:	22ff      	movs	r2, #255	; 0xff
 800407e:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
}
 8004080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 8004082:	78e0      	ldrb	r0, [r4, #3]
 8004084:	f7ff fe56 	bl	8003d34 <RTC_ByteToBcd2>
 8004088:	4607      	mov	r7, r0
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 800408a:	7860      	ldrb	r0, [r4, #1]
 800408c:	f7ff fe52 	bl	8003d34 <RTC_ByteToBcd2>
 8004090:	4606      	mov	r6, r0
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
 8004092:	78a0      	ldrb	r0, [r4, #2]
 8004094:	f7ff fe4e 	bl	8003d34 <RTC_ByteToBcd2>
              ((uint32_t)RTC_DateStruct->RTC_WeekDay << 13));
 8004098:	7825      	ldrb	r5, [r4, #0]
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 800409a:	ea40 3545 	orr.w	r5, r0, r5, lsl #13
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 800409e:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 80040a2:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
 80040a6:	e7cf      	b.n	8004048 <RTC_SetDate+0x28>
 80040a8:	40002800 	.word	0x40002800

080040ac <RTC_DateStructInit>:
  * @retval None
  */
void RTC_DateStructInit(RTC_DateTypeDef* RTC_DateStruct)
{
  /* Monday, January 01 xx00 */
  RTC_DateStruct->RTC_WeekDay = RTC_Weekday_Monday;
 80040ac:	2301      	movs	r3, #1
 80040ae:	7003      	strb	r3, [r0, #0]
  RTC_DateStruct->RTC_Date = 1;
 80040b0:	7083      	strb	r3, [r0, #2]
  RTC_DateStruct->RTC_Month = RTC_Month_January;
 80040b2:	7043      	strb	r3, [r0, #1]
  RTC_DateStruct->RTC_Year = 0;
 80040b4:	2300      	movs	r3, #0
 80040b6:	70c3      	strb	r3, [r0, #3]
}
 80040b8:	4770      	bx	lr

080040ba <RTC_GetDate>:

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));
  
  /* Get the RTC_TR register */
  tmpreg = (uint32_t)(RTC->DR & RTC_DR_RESERVED_MASK); 
 80040ba:	4b0f      	ldr	r3, [pc, #60]	; (80040f8 <RTC_GetDate+0x3e>)
 80040bc:	685b      	ldr	r3, [r3, #4]
  * @param RTC_DateStruct: pointer to a RTC_DateTypeDef structure that will 
  *                        contain the returned current date configuration.     
  * @retval None
  */
void RTC_GetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
{
 80040be:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the RTC_TR register */
  tmpreg = (uint32_t)(RTC->DR & RTC_DR_RESERVED_MASK); 

  /* Fill the structure fields with the read parameters */
  RTC_DateStruct->RTC_Year = (uint8_t)((tmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 80040c0:	f3c3 4207 	ubfx	r2, r3, #16, #8
  RTC_DateStruct->RTC_Month = (uint8_t)((tmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 80040c4:	f3c3 2604 	ubfx	r6, r3, #8, #5
  RTC_DateStruct->RTC_Date = (uint8_t)(tmpreg & (RTC_DR_DT | RTC_DR_DU));
 80040c8:	f003 053f 	and.w	r5, r3, #63	; 0x3f
  RTC_DateStruct->RTC_WeekDay = (uint8_t)((tmpreg & (RTC_DR_WDU)) >> 13);
 80040cc:	f3c3 3342 	ubfx	r3, r3, #13, #3
  * @param RTC_DateStruct: pointer to a RTC_DateTypeDef structure that will 
  *                        contain the returned current date configuration.     
  * @retval None
  */
void RTC_GetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
{
 80040d0:	460c      	mov	r4, r1
  
  /* Get the RTC_TR register */
  tmpreg = (uint32_t)(RTC->DR & RTC_DR_RESERVED_MASK); 

  /* Fill the structure fields with the read parameters */
  RTC_DateStruct->RTC_Year = (uint8_t)((tmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 80040d2:	70ca      	strb	r2, [r1, #3]
  RTC_DateStruct->RTC_Month = (uint8_t)((tmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 80040d4:	704e      	strb	r6, [r1, #1]
  RTC_DateStruct->RTC_Date = (uint8_t)(tmpreg & (RTC_DR_DT | RTC_DR_DU));
 80040d6:	708d      	strb	r5, [r1, #2]
  RTC_DateStruct->RTC_WeekDay = (uint8_t)((tmpreg & (RTC_DR_WDU)) >> 13);
 80040d8:	700b      	strb	r3, [r1, #0]

  /* Check the input parameters format */
  if (RTC_Format == RTC_Format_BIN)
 80040da:	b958      	cbnz	r0, 80040f4 <RTC_GetDate+0x3a>
  {
    /* Convert the structure parameters to Binary format */
    RTC_DateStruct->RTC_Year = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year);
 80040dc:	4610      	mov	r0, r2
 80040de:	f7ff fe35 	bl	8003d4c <RTC_Bcd2ToByte>
 80040e2:	70e0      	strb	r0, [r4, #3]
    RTC_DateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 80040e4:	4630      	mov	r0, r6
 80040e6:	f7ff fe31 	bl	8003d4c <RTC_Bcd2ToByte>
 80040ea:	7060      	strb	r0, [r4, #1]
    RTC_DateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 80040ec:	4628      	mov	r0, r5
 80040ee:	f7ff fe2d 	bl	8003d4c <RTC_Bcd2ToByte>
 80040f2:	70a0      	strb	r0, [r4, #2]
 80040f4:	bd70      	pop	{r4, r5, r6, pc}
 80040f6:	bf00      	nop
 80040f8:	40002800 	.word	0x40002800

080040fc <RTC_SetAlarm>:
  * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that 
  *                          contains the alarm configuration parameters.     
  * @retval None
  */
void RTC_SetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
{
 80040fc:	4b26      	ldr	r3, [pc, #152]	; (8004198 <RTC_SetAlarm+0x9c>)
 80040fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_ALARM_MASK(RTC_AlarmStruct->RTC_AlarmMask));
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel));

  if (RTC_Format == RTC_Format_BIN)
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004102:	689b      	ldr	r3, [r3, #8]
  * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that 
  *                          contains the alarm configuration parameters.     
  * @retval None
  */
void RTC_SetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
{
 8004104:	460c      	mov	r4, r1
 8004106:	4615      	mov	r5, r2
  assert_param(IS_RTC_FORMAT(RTC_Format));
  assert_param(IS_RTC_ALARM(RTC_Alarm));
  assert_param(IS_ALARM_MASK(RTC_AlarmStruct->RTC_AlarmMask));
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel));

  if (RTC_Format == RTC_Format_BIN)
 8004108:	b920      	cbnz	r0, 8004114 <RTC_SetAlarm+0x18>
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800410a:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 800410e:	d106      	bne.n	800411e <RTC_SetAlarm+0x22>
      assert_param(IS_RTC_HOUR12(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours));
      assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
    } 
    else
    {
      RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
 8004110:	70d3      	strb	r3, [r2, #3]
 8004112:	e004      	b.n	800411e <RTC_SetAlarm+0x22>
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_AlarmStruct->RTC_AlarmDateWeekDay));
    }
  }
  else
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004114:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8004118:	d12c      	bne.n	8004174 <RTC_SetAlarm+0x78>
      assert_param(IS_RTC_HOUR12(tmpreg));
      assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
    } 
    else
    {
      RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
 800411a:	70d3      	strb	r3, [r2, #3]
 800411c:	e02a      	b.n	8004174 <RTC_SetAlarm+0x78>
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 800411e:	7828      	ldrb	r0, [r5, #0]
 8004120:	f7ff fe08 	bl	8003d34 <RTC_ByteToBcd2>
 8004124:	4607      	mov	r7, r0
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 8004126:	7868      	ldrb	r0, [r5, #1]
 8004128:	f7ff fe04 	bl	8003d34 <RTC_ByteToBcd2>
 800412c:	4606      	mov	r6, r0
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 800412e:	78a8      	ldrb	r0, [r5, #2]
 8004130:	f7ff fe00 	bl	8003d34 <RTC_ByteToBcd2>
 8004134:	4680      	mov	r8, r0
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 8004136:	7b28      	ldrb	r0, [r5, #12]
 8004138:	f7ff fdfc 	bl	8003d34 <RTC_ByteToBcd2>
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 800413c:	686a      	ldr	r2, [r5, #4]
 800413e:	68ab      	ldr	r3, [r5, #8]
 8004140:	4313      	orrs	r3, r2
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 8004142:	78ea      	ldrb	r2, [r5, #3]
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 8004144:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 8004148:	ea43 0308 	orr.w	r3, r3, r8
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 800414c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 8004150:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 8004154:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  } 

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8004158:	4a0f      	ldr	r2, [pc, #60]	; (8004198 <RTC_SetAlarm+0x9c>)
 800415a:	21ca      	movs	r1, #202	; 0xca
 800415c:	6251      	str	r1, [r2, #36]	; 0x24
  RTC->WPR = 0x53;
 800415e:	2153      	movs	r1, #83	; 0x53

  /* Configure the Alarm register */
  if (RTC_Alarm == RTC_Alarm_A)
 8004160:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  } 

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
  RTC->WPR = 0x53;
 8004164:	6251      	str	r1, [r2, #36]	; 0x24

  /* Configure the Alarm register */
  if (RTC_Alarm == RTC_Alarm_A)
  {
    RTC->ALRMAR = (uint32_t)tmpreg;
 8004166:	bf0c      	ite	eq
 8004168:	61d3      	streq	r3, [r2, #28]
  }
  else
  {
    RTC->ALRMBR = (uint32_t)tmpreg;
 800416a:	6213      	strne	r3, [r2, #32]
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;   
 800416c:	23ff      	movs	r3, #255	; 0xff
 800416e:	6253      	str	r3, [r2, #36]	; 0x24
}
 8004170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 8004174:	686a      	ldr	r2, [r5, #4]
 8004176:	68ab      	ldr	r3, [r5, #8]
 8004178:	4313      	orrs	r3, r2
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 800417a:	78aa      	ldrb	r2, [r5, #2]

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 800417c:	4313      	orrs	r3, r2
  }

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 800417e:	782a      	ldrb	r2, [r5, #0]
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 8004180:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 8004184:	786a      	ldrb	r2, [r5, #1]
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 8004186:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800418a:	78ea      	ldrb	r2, [r5, #3]
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 800418c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004190:	7b2a      	ldrb	r2, [r5, #12]
  }

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 8004192:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004196:	e7df      	b.n	8004158 <RTC_SetAlarm+0x5c>
 8004198:	40002800 	.word	0x40002800

0800419c <RTC_AlarmStructInit>:
  * @retval None
  */
void RTC_AlarmStructInit(RTC_AlarmTypeDef* RTC_AlarmStruct)
{
  /* Alarm Time Settings : Time = 00h:00mn:00sec */
  RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = RTC_H12_AM;
 800419c:	2300      	movs	r3, #0
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = 0;
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = 0;

  /* Alarm Date Settings : Date = 1st day of the month */
  RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = RTC_AlarmDateWeekDaySel_Date;
  RTC_AlarmStruct->RTC_AlarmDateWeekDay = 1;
 800419e:	2201      	movs	r2, #1
  * @retval None
  */
void RTC_AlarmStructInit(RTC_AlarmTypeDef* RTC_AlarmStruct)
{
  /* Alarm Time Settings : Time = 00h:00mn:00sec */
  RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = RTC_H12_AM;
 80041a0:	70c3      	strb	r3, [r0, #3]
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = 0;
 80041a2:	7003      	strb	r3, [r0, #0]
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = 0;
 80041a4:	7043      	strb	r3, [r0, #1]
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = 0;
 80041a6:	7083      	strb	r3, [r0, #2]

  /* Alarm Date Settings : Date = 1st day of the month */
  RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = RTC_AlarmDateWeekDaySel_Date;
 80041a8:	6083      	str	r3, [r0, #8]
  RTC_AlarmStruct->RTC_AlarmDateWeekDay = 1;
 80041aa:	7302      	strb	r2, [r0, #12]

  /* Alarm Masks Settings : Mask =  all fields are not masked */
  RTC_AlarmStruct->RTC_AlarmMask = RTC_AlarmMask_None;
 80041ac:	6043      	str	r3, [r0, #4]
}
 80041ae:	4770      	bx	lr

080041b0 <RTC_GetAlarm>:
  * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that will 
  *                          contains the output alarm configuration values.     
  * @retval None
  */
void RTC_GetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
{
 80041b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041b2:	4614      	mov	r4, r2
 80041b4:	4a16      	ldr	r2, [pc, #88]	; (8004210 <RTC_GetAlarm+0x60>)
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));
  assert_param(IS_RTC_ALARM(RTC_Alarm)); 

  /* Get the RTC_ALRMxR register */
  if (RTC_Alarm == RTC_Alarm_A)
 80041b6:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
  {
    tmpreg = (uint32_t)(RTC->ALRMAR);
 80041ba:	bf0c      	ite	eq
 80041bc:	69d2      	ldreq	r2, [r2, #28]
  }
  else
  {
    tmpreg = (uint32_t)(RTC->ALRMBR);
 80041be:	6a12      	ldrne	r2, [r2, #32]
                                                     RTC_ALRMAR_HU)) >> 16);
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | \
                                                     RTC_ALRMAR_MNU)) >> 8);
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | \
                                                     RTC_ALRMAR_SU));
  RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16);
 80041c0:	f402 0180 	and.w	r1, r2, #4194304	; 0x400000
 80041c4:	0c09      	lsrs	r1, r1, #16
  }

  /* Fill the structure with the read parameters */
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | \
                                                     RTC_ALRMAR_HU)) >> 16);
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | \
 80041c6:	f3c2 2706 	ubfx	r7, r2, #8, #7
                                                     RTC_ALRMAR_MNU)) >> 8);
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | \
 80041ca:	f002 067f 	and.w	r6, r2, #127	; 0x7f
                                                     RTC_ALRMAR_SU));
  RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16);
  RTC_AlarmStruct->RTC_AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 24);
 80041ce:	f3c2 6505 	ubfx	r5, r2, #24, #6
  * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that will 
  *                          contains the output alarm configuration values.     
  * @retval None
  */
void RTC_GetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
{
 80041d2:	4603      	mov	r3, r0
                                                     RTC_ALRMAR_HU)) >> 16);
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | \
                                                     RTC_ALRMAR_MNU)) >> 8);
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | \
                                                     RTC_ALRMAR_SU));
  RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16);
 80041d4:	70e1      	strb	r1, [r4, #3]
  {
    tmpreg = (uint32_t)(RTC->ALRMBR);
  }

  /* Fill the structure with the read parameters */
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | \
 80041d6:	f3c2 4005 	ubfx	r0, r2, #16, #6
                                                     RTC_ALRMAR_MNU)) >> 8);
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | \
                                                     RTC_ALRMAR_SU));
  RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16);
  RTC_AlarmStruct->RTC_AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 24);
  RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 80041da:	f002 4180 	and.w	r1, r2, #1073741824	; 0x40000000
  RTC_AlarmStruct->RTC_AlarmMask = (uint32_t)(tmpreg & RTC_AlarmMask_All);
 80041de:	f002 3280 	and.w	r2, r2, #2155905152	; 0x80808080
  {
    tmpreg = (uint32_t)(RTC->ALRMBR);
  }

  /* Fill the structure with the read parameters */
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | \
 80041e2:	7020      	strb	r0, [r4, #0]
                                                     RTC_ALRMAR_HU)) >> 16);
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | \
 80041e4:	7067      	strb	r7, [r4, #1]
                                                     RTC_ALRMAR_MNU)) >> 8);
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | \
 80041e6:	70a6      	strb	r6, [r4, #2]
                                                     RTC_ALRMAR_SU));
  RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16);
  RTC_AlarmStruct->RTC_AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 24);
 80041e8:	7325      	strb	r5, [r4, #12]
  RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 80041ea:	60a1      	str	r1, [r4, #8]
  RTC_AlarmStruct->RTC_AlarmMask = (uint32_t)(tmpreg & RTC_AlarmMask_All);
 80041ec:	6062      	str	r2, [r4, #4]

  if (RTC_Format == RTC_Format_BIN)
 80041ee:	b973      	cbnz	r3, 800420e <RTC_GetAlarm+0x5e>
  {
    RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 80041f0:	f7ff fdac 	bl	8003d4c <RTC_Bcd2ToByte>
 80041f4:	7020      	strb	r0, [r4, #0]
                                                        RTC_AlarmTime.RTC_Hours);
    RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 80041f6:	4638      	mov	r0, r7
 80041f8:	f7ff fda8 	bl	8003d4c <RTC_Bcd2ToByte>
 80041fc:	7060      	strb	r0, [r4, #1]
                                                        RTC_AlarmTime.RTC_Minutes);
    RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 80041fe:	4630      	mov	r0, r6
 8004200:	f7ff fda4 	bl	8003d4c <RTC_Bcd2ToByte>
 8004204:	70a0      	strb	r0, [r4, #2]
                                                        RTC_AlarmTime.RTC_Seconds);
    RTC_AlarmStruct->RTC_AlarmDateWeekDay = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 8004206:	4628      	mov	r0, r5
 8004208:	f7ff fda0 	bl	8003d4c <RTC_Bcd2ToByte>
 800420c:	7320      	strb	r0, [r4, #12]
 800420e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004210:	40002800 	.word	0x40002800

08004214 <RTC_AlarmCmd>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Alarm is enabled/disabled
  *          - ERROR: RTC Alarm is not enabled/disabled  
  */
ErrorStatus RTC_AlarmCmd(uint32_t RTC_Alarm, FunctionalState NewState)
{
 8004214:	b082      	sub	sp, #8
  __IO uint32_t alarmcounter = 0x00;
 8004216:	2300      	movs	r3, #0
 8004218:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_RTC_CMD_ALARM(RTC_Alarm));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800421a:	4b11      	ldr	r3, [pc, #68]	; (8004260 <RTC_AlarmCmd+0x4c>)
 800421c:	22ca      	movs	r2, #202	; 0xca
 800421e:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8004220:	2253      	movs	r2, #83	; 0x53
 8004222:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm state */
  if (NewState != DISABLE)
  {
    RTC->CR |= (uint32_t)RTC_Alarm;
 8004224:	689a      	ldr	r2, [r3, #8]
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
  RTC->WPR = 0x53;

  /* Configure the Alarm state */
  if (NewState != DISABLE)
 8004226:	b119      	cbz	r1, 8004230 <RTC_AlarmCmd+0x1c>
  {
    RTC->CR |= (uint32_t)RTC_Alarm;
 8004228:	4310      	orrs	r0, r2
 800422a:	6098      	str	r0, [r3, #8]

    status = SUCCESS;    
 800422c:	2001      	movs	r0, #1
 800422e:	e012      	b.n	8004256 <RTC_AlarmCmd+0x42>
  }
  else
  { 
    /* Disable the Alarm in RTC_CR register */
    RTC->CR &= (uint32_t)~RTC_Alarm;
 8004230:	ea22 0200 	bic.w	r2, r2, r0
 8004234:	609a      	str	r2, [r3, #8]
   
    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    do
    {
      alarmstatus = RTC->ISR & (RTC_Alarm >> 8);
 8004236:	0a00      	lsrs	r0, r0, #8
 8004238:	68da      	ldr	r2, [r3, #12]
      alarmcounter++;  
 800423a:	9901      	ldr	r1, [sp, #4]
 800423c:	3101      	adds	r1, #1
 800423e:	9101      	str	r1, [sp, #4]
    } while((alarmcounter != INITMODE_TIMEOUT) && (alarmstatus == 0x00));
 8004240:	9901      	ldr	r1, [sp, #4]
 8004242:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8004246:	d001      	beq.n	800424c <RTC_AlarmCmd+0x38>
 8004248:	4210      	tst	r0, r2
 800424a:	d0f5      	beq.n	8004238 <RTC_AlarmCmd+0x24>
    
    if ((RTC->ISR & (RTC_Alarm >> 8)) == RESET)
 800424c:	4b04      	ldr	r3, [pc, #16]	; (8004260 <RTC_AlarmCmd+0x4c>)
 800424e:	68db      	ldr	r3, [r3, #12]
    {
      status = ERROR;
 8004250:	4018      	ands	r0, r3
 8004252:	bf18      	it	ne
 8004254:	2001      	movne	r0, #1
      status = SUCCESS;
    }        
  } 

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8004256:	4b02      	ldr	r3, [pc, #8]	; (8004260 <RTC_AlarmCmd+0x4c>)
 8004258:	22ff      	movs	r2, #255	; 0xff
 800425a:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
}
 800425c:	b002      	add	sp, #8
 800425e:	4770      	bx	lr
 8004260:	40002800 	.word	0x40002800

08004264 <RTC_AlarmSubSecondConfig>:
  assert_param(IS_RTC_ALARM(RTC_Alarm));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(RTC_AlarmSubSecondValue));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(RTC_AlarmSubSecondMask));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8004264:	4b07      	ldr	r3, [pc, #28]	; (8004284 <RTC_AlarmSubSecondConfig+0x20>)
  *     @arg RTC_AlarmSubSecondMask_None   : SS[14:0] are compared and must match
  *                                          to activate alarm
  * @retval None
  */
void RTC_AlarmSubSecondConfig(uint32_t RTC_Alarm, uint32_t RTC_AlarmSubSecondValue, uint32_t RTC_AlarmSubSecondMask)
{
 8004266:	b510      	push	{r4, lr}
  assert_param(IS_RTC_ALARM(RTC_Alarm));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(RTC_AlarmSubSecondValue));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(RTC_AlarmSubSecondMask));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8004268:	24ca      	movs	r4, #202	; 0xca
 800426a:	625c      	str	r4, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
  
  /* Configure the Alarm A or Alarm B SubSecond registers */
  tmpreg = (uint32_t) (uint32_t)(RTC_AlarmSubSecondValue) | (uint32_t)(RTC_AlarmSubSecondMask);
 800426c:	430a      	orrs	r2, r1
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(RTC_AlarmSubSecondValue));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(RTC_AlarmSubSecondMask));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
  RTC->WPR = 0x53;
 800426e:	2453      	movs	r4, #83	; 0x53
  
  /* Configure the Alarm A or Alarm B SubSecond registers */
  tmpreg = (uint32_t) (uint32_t)(RTC_AlarmSubSecondValue) | (uint32_t)(RTC_AlarmSubSecondMask);
  
  if (RTC_Alarm == RTC_Alarm_A)
 8004270:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(RTC_AlarmSubSecondValue));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(RTC_AlarmSubSecondMask));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
  RTC->WPR = 0x53;
 8004274:	625c      	str	r4, [r3, #36]	; 0x24
  tmpreg = (uint32_t) (uint32_t)(RTC_AlarmSubSecondValue) | (uint32_t)(RTC_AlarmSubSecondMask);
  
  if (RTC_Alarm == RTC_Alarm_A)
  {
    /* Configure the AlarmA SubSecond register */
    RTC->ALRMASSR = tmpreg;
 8004276:	bf0c      	ite	eq
 8004278:	645a      	streq	r2, [r3, #68]	; 0x44
  }
  else
  {
    /* Configure the Alarm B SubSecond register */
    RTC->ALRMBSSR = tmpreg;
 800427a:	649a      	strne	r2, [r3, #72]	; 0x48
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 800427c:	22ff      	movs	r2, #255	; 0xff
 800427e:	625a      	str	r2, [r3, #36]	; 0x24

}
 8004280:	bd10      	pop	{r4, pc}
 8004282:	bf00      	nop
 8004284:	40002800 	.word	0x40002800

08004288 <RTC_GetAlarmSubSecond>:
uint32_t RTC_GetAlarmSubSecond(uint32_t RTC_Alarm)
{
  uint32_t tmpreg = 0;
  
  /* Get the RTC_ALRMxR register */
  if (RTC_Alarm == RTC_Alarm_A)
 8004288:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800428c:	4b04      	ldr	r3, [pc, #16]	; (80042a0 <RTC_GetAlarmSubSecond+0x18>)
 800428e:	d103      	bne.n	8004298 <RTC_GetAlarmSubSecond+0x10>
  {
    tmpreg = (uint32_t)((RTC->ALRMASSR) & RTC_ALRMASSR_SS);
 8004290:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8004292:	0440      	lsls	r0, r0, #17
 8004294:	0c40      	lsrs	r0, r0, #17
 8004296:	4770      	bx	lr
  }
  else
  {
    tmpreg = (uint32_t)((RTC->ALRMBSSR) & RTC_ALRMBSSR_SS);
 8004298:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800429a:	0440      	lsls	r0, r0, #17
 800429c:	0c40      	lsrs	r0, r0, #17
  } 
  
  return (tmpreg);
}
 800429e:	4770      	bx	lr
 80042a0:	40002800 	.word	0x40002800

080042a4 <RTC_WakeUpClockConfig>:
{
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(RTC_WakeUpClock));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 80042a4:	4b07      	ldr	r3, [pc, #28]	; (80042c4 <RTC_WakeUpClockConfig+0x20>)
 80042a6:	22ca      	movs	r2, #202	; 0xca
 80042a8:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 80042aa:	2253      	movs	r2, #83	; 0x53
 80042ac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear the Wakeup Timer clock source bits in CR register */
  RTC->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80042ae:	689a      	ldr	r2, [r3, #8]
 80042b0:	f022 0207 	bic.w	r2, r2, #7
 80042b4:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  RTC->CR |= (uint32_t)RTC_WakeUpClock;
 80042b6:	689a      	ldr	r2, [r3, #8]
 80042b8:	4302      	orrs	r2, r0
 80042ba:	609a      	str	r2, [r3, #8]
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 80042bc:	22ff      	movs	r2, #255	; 0xff
 80042be:	625a      	str	r2, [r3, #36]	; 0x24
}
 80042c0:	4770      	bx	lr
 80042c2:	bf00      	nop
 80042c4:	40002800 	.word	0x40002800

080042c8 <RTC_SetWakeUpCounter>:
{
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_COUNTER(RTC_WakeUpCounter));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 80042c8:	4b04      	ldr	r3, [pc, #16]	; (80042dc <RTC_SetWakeUpCounter+0x14>)
 80042ca:	22ca      	movs	r2, #202	; 0xca
 80042cc:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 80042ce:	2253      	movs	r2, #83	; 0x53
 80042d0:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Configure the Wakeup Timer counter */
  RTC->WUTR = (uint32_t)RTC_WakeUpCounter;
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 80042d2:	22ff      	movs	r2, #255	; 0xff
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
  RTC->WPR = 0x53;
  
  /* Configure the Wakeup Timer counter */
  RTC->WUTR = (uint32_t)RTC_WakeUpCounter;
 80042d4:	6158      	str	r0, [r3, #20]
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 80042d6:	625a      	str	r2, [r3, #36]	; 0x24
}
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	40002800 	.word	0x40002800

080042e0 <RTC_GetWakeUpCounter>:
  * @retval The RTC WakeUp Counter value.
  */
uint32_t RTC_GetWakeUpCounter(void)
{
  /* Get the counter value */
  return ((uint32_t)(RTC->WUTR & RTC_WUTR_WUT));
 80042e0:	4b01      	ldr	r3, [pc, #4]	; (80042e8 <RTC_GetWakeUpCounter+0x8>)
 80042e2:	6958      	ldr	r0, [r3, #20]
}
 80042e4:	b280      	uxth	r0, r0
 80042e6:	4770      	bx	lr
 80042e8:	40002800 	.word	0x40002800

080042ec <RTC_WakeUpCmd>:
  * @param  NewState: new state of the WakeUp timer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
ErrorStatus RTC_WakeUpCmd(FunctionalState NewState)
{
 80042ec:	b082      	sub	sp, #8
  __IO uint32_t wutcounter = 0x00;
 80042ee:	2300      	movs	r3, #0
 80042f0:	9301      	str	r3, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 80042f2:	4b11      	ldr	r3, [pc, #68]	; (8004338 <RTC_WakeUpCmd+0x4c>)
 80042f4:	22ca      	movs	r2, #202	; 0xca
 80042f6:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 80042f8:	2253      	movs	r2, #83	; 0x53
 80042fa:	625a      	str	r2, [r3, #36]	; 0x24

  if (NewState != DISABLE)
  {
    /* Enable the Wakeup Timer */
    RTC->CR |= (uint32_t)RTC_CR_WUTE;
 80042fc:	689a      	ldr	r2, [r3, #8]

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
  RTC->WPR = 0x53;

  if (NewState != DISABLE)
 80042fe:	b120      	cbz	r0, 800430a <RTC_WakeUpCmd+0x1e>
  {
    /* Enable the Wakeup Timer */
    RTC->CR |= (uint32_t)RTC_CR_WUTE;
 8004300:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004304:	609a      	str	r2, [r3, #8]
    status = SUCCESS;    
 8004306:	2001      	movs	r0, #1
 8004308:	e010      	b.n	800432c <RTC_WakeUpCmd+0x40>
  }
  else
  {
    /* Disable the Wakeup Timer */
    RTC->CR &= (uint32_t)~RTC_CR_WUTE;
 800430a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800430e:	609a      	str	r2, [r3, #8]
    /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
    do
    {
      wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
 8004310:	68da      	ldr	r2, [r3, #12]
      wutcounter++;  
 8004312:	9901      	ldr	r1, [sp, #4]
 8004314:	3101      	adds	r1, #1
 8004316:	9101      	str	r1, [sp, #4]
    } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 8004318:	9901      	ldr	r1, [sp, #4]
 800431a:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800431e:	d001      	beq.n	8004324 <RTC_WakeUpCmd+0x38>
 8004320:	0750      	lsls	r0, r2, #29
 8004322:	d5f5      	bpl.n	8004310 <RTC_WakeUpCmd+0x24>
    
    if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 8004324:	4b04      	ldr	r3, [pc, #16]	; (8004338 <RTC_WakeUpCmd+0x4c>)
 8004326:	68d8      	ldr	r0, [r3, #12]
    {
      status = ERROR;
 8004328:	f3c0 0080 	ubfx	r0, r0, #2, #1
      status = SUCCESS;
    }    
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800432c:	4b02      	ldr	r3, [pc, #8]	; (8004338 <RTC_WakeUpCmd+0x4c>)
 800432e:	22ff      	movs	r2, #255	; 0xff
 8004330:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
}
 8004332:	b002      	add	sp, #8
 8004334:	4770      	bx	lr
 8004336:	bf00      	nop
 8004338:	40002800 	.word	0x40002800

0800433c <RTC_DayLightSavingConfig>:
  /* Check the parameters */
  assert_param(IS_RTC_DAYLIGHT_SAVING(RTC_DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(RTC_StoreOperation));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800433c:	4b07      	ldr	r3, [pc, #28]	; (800435c <RTC_DayLightSavingConfig+0x20>)
 800433e:	22ca      	movs	r2, #202	; 0xca
 8004340:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8004342:	2253      	movs	r2, #83	; 0x53
 8004344:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear the bits to be configured */
  RTC->CR &= (uint32_t)~(RTC_CR_BCK);
 8004346:	689a      	ldr	r2, [r3, #8]
 8004348:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800434c:	609a      	str	r2, [r3, #8]

  /* Configure the RTC_CR register */
  RTC->CR |= (uint32_t)(RTC_DayLightSaving | RTC_StoreOperation);
 800434e:	689a      	ldr	r2, [r3, #8]
 8004350:	4302      	orrs	r2, r0
 8004352:	430a      	orrs	r2, r1
 8004354:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8004356:	22ff      	movs	r2, #255	; 0xff
 8004358:	625a      	str	r2, [r3, #36]	; 0x24
}
 800435a:	4770      	bx	lr
 800435c:	40002800 	.word	0x40002800

08004360 <RTC_GetStoreOperation>:
  *          - RTC_StoreOperation_Reset
  *          - RTC_StoreOperation_Set       
  */
uint32_t RTC_GetStoreOperation(void)
{
  return (RTC->CR & RTC_CR_BCK);
 8004360:	4b02      	ldr	r3, [pc, #8]	; (800436c <RTC_GetStoreOperation+0xc>)
 8004362:	6898      	ldr	r0, [r3, #8]
}
 8004364:	f400 2080 	and.w	r0, r0, #262144	; 0x40000
 8004368:	4770      	bx	lr
 800436a:	bf00      	nop
 800436c:	40002800 	.word	0x40002800

08004370 <RTC_OutputConfig>:
  /* Check the parameters */
  assert_param(IS_RTC_OUTPUT(RTC_Output));
  assert_param(IS_RTC_OUTPUT_POL(RTC_OutputPolarity));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8004370:	4b07      	ldr	r3, [pc, #28]	; (8004390 <RTC_OutputConfig+0x20>)
 8004372:	22ca      	movs	r2, #202	; 0xca
 8004374:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8004376:	2253      	movs	r2, #83	; 0x53
 8004378:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear the bits to be configured */
  RTC->CR &= (uint32_t)~(RTC_CR_OSEL | RTC_CR_POL);
 800437a:	689a      	ldr	r2, [r3, #8]
 800437c:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8004380:	609a      	str	r2, [r3, #8]

  /* Configure the output selection and polarity */
  RTC->CR |= (uint32_t)(RTC_Output | RTC_OutputPolarity);
 8004382:	689a      	ldr	r2, [r3, #8]
 8004384:	4302      	orrs	r2, r0
 8004386:	430a      	orrs	r2, r1
 8004388:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800438a:	22ff      	movs	r2, #255	; 0xff
 800438c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800438e:	4770      	bx	lr
 8004390:	40002800 	.word	0x40002800

08004394 <RTC_CoarseCalibConfig>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Coarse calibration are initialized
  *          - ERROR: RTC Coarse calibration are not initialized     
  */
ErrorStatus RTC_CoarseCalibConfig(uint32_t RTC_CalibSign, uint32_t Value)
{
 8004394:	b570      	push	{r4, r5, r6, lr}
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_SIGN(RTC_CalibSign));
  assert_param(IS_RTC_CALIB_VALUE(Value)); 

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8004396:	4d09      	ldr	r5, [pc, #36]	; (80043bc <RTC_CoarseCalibConfig+0x28>)
 8004398:	23ca      	movs	r3, #202	; 0xca
 800439a:	626b      	str	r3, [r5, #36]	; 0x24
  RTC->WPR = 0x53;
 800439c:	2353      	movs	r3, #83	; 0x53
 800439e:	626b      	str	r3, [r5, #36]	; 0x24
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Coarse calibration are initialized
  *          - ERROR: RTC Coarse calibration are not initialized     
  */
ErrorStatus RTC_CoarseCalibConfig(uint32_t RTC_CalibSign, uint32_t Value)
{
 80043a0:	4604      	mov	r4, r0
 80043a2:	460e      	mov	r6, r1
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
  RTC->WPR = 0x53;

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 80043a4:	f7ff fcec 	bl	8003d80 <RTC_EnterInitMode>
 80043a8:	b120      	cbz	r0, 80043b4 <RTC_CoarseCalibConfig+0x20>
    status = ERROR;
  } 
  else
  {
    /* Set the coarse calibration value */
    RTC->CALIBR = (uint32_t)(RTC_CalibSign | Value);
 80043aa:	4334      	orrs	r4, r6
 80043ac:	61ac      	str	r4, [r5, #24]
    /* Exit Initialization mode */
    RTC_ExitInitMode();
 80043ae:	f7ff fd05 	bl	8003dbc <RTC_ExitInitMode>
    
    status = SUCCESS;
 80043b2:	2001      	movs	r0, #1
  } 

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 80043b4:	23ff      	movs	r3, #255	; 0xff
 80043b6:	626b      	str	r3, [r5, #36]	; 0x24
  
  return status;
}
 80043b8:	bd70      	pop	{r4, r5, r6, pc}
 80043ba:	bf00      	nop
 80043bc:	40002800 	.word	0x40002800

080043c0 <RTC_CoarseCalibCmd>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Coarse calibration are enabled/disabled
  *          - ERROR: RTC Coarse calibration are not enabled/disabled    
  */
ErrorStatus RTC_CoarseCalibCmd(FunctionalState NewState)
{
 80043c0:	b538      	push	{r3, r4, r5, lr}
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 80043c2:	4c0b      	ldr	r4, [pc, #44]	; (80043f0 <RTC_CoarseCalibCmd+0x30>)
 80043c4:	23ca      	movs	r3, #202	; 0xca
 80043c6:	6263      	str	r3, [r4, #36]	; 0x24
  RTC->WPR = 0x53;
 80043c8:	2353      	movs	r3, #83	; 0x53
 80043ca:	6263      	str	r3, [r4, #36]	; 0x24
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Coarse calibration are enabled/disabled
  *          - ERROR: RTC Coarse calibration are not enabled/disabled    
  */
ErrorStatus RTC_CoarseCalibCmd(FunctionalState NewState)
{
 80043cc:	4605      	mov	r5, r0
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
  RTC->WPR = 0x53;
  
  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 80043ce:	f7ff fcd7 	bl	8003d80 <RTC_EnterInitMode>
 80043d2:	b150      	cbz	r0, 80043ea <RTC_CoarseCalibCmd+0x2a>
  else
  {
    if (NewState != DISABLE)
    {
      /* Enable the Coarse Calibration */
      RTC->CR |= (uint32_t)RTC_CR_DCE;
 80043d4:	68a3      	ldr	r3, [r4, #8]
  {
    status =  ERROR;
  }
  else
  {
    if (NewState != DISABLE)
 80043d6:	b115      	cbz	r5, 80043de <RTC_CoarseCalibCmd+0x1e>
    {
      /* Enable the Coarse Calibration */
      RTC->CR |= (uint32_t)RTC_CR_DCE;
 80043d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043dc:	e001      	b.n	80043e2 <RTC_CoarseCalibCmd+0x22>
    }
    else
    { 
      /* Disable the Coarse Calibration */
      RTC->CR &= (uint32_t)~RTC_CR_DCE;
 80043de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043e2:	60a3      	str	r3, [r4, #8]
    }
    /* Exit Initialization mode */
    RTC_ExitInitMode();
 80043e4:	f7ff fcea 	bl	8003dbc <RTC_ExitInitMode>
    
    status = SUCCESS;
 80043e8:	2001      	movs	r0, #1
  } 
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 80043ea:	23ff      	movs	r3, #255	; 0xff
 80043ec:	6263      	str	r3, [r4, #36]	; 0x24
  
  return status;
}
 80043ee:	bd38      	pop	{r3, r4, r5, pc}
 80043f0:	40002800 	.word	0x40002800

080043f4 <RTC_CalibOutputCmd>:
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 80043f4:	4b07      	ldr	r3, [pc, #28]	; (8004414 <RTC_CalibOutputCmd+0x20>)
 80043f6:	22ca      	movs	r2, #202	; 0xca
 80043f8:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 80043fa:	2253      	movs	r2, #83	; 0x53
 80043fc:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (NewState != DISABLE)
  {
    /* Enable the RTC clock output */
    RTC->CR |= (uint32_t)RTC_CR_COE;
 80043fe:	689a      	ldr	r2, [r3, #8]
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
  RTC->WPR = 0x53;
  
  if (NewState != DISABLE)
 8004400:	b110      	cbz	r0, 8004408 <RTC_CalibOutputCmd+0x14>
  {
    /* Enable the RTC clock output */
    RTC->CR |= (uint32_t)RTC_CR_COE;
 8004402:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004406:	e001      	b.n	800440c <RTC_CalibOutputCmd+0x18>
  }
  else
  { 
    /* Disable the RTC clock output */
    RTC->CR &= (uint32_t)~RTC_CR_COE;
 8004408:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800440c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800440e:	22ff      	movs	r2, #255	; 0xff
 8004410:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004412:	4770      	bx	lr
 8004414:	40002800 	.word	0x40002800

08004418 <RTC_CalibOutputConfig>:
{
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(RTC_CalibOutput));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8004418:	4b07      	ldr	r3, [pc, #28]	; (8004438 <RTC_CalibOutputConfig+0x20>)
 800441a:	22ca      	movs	r2, #202	; 0xca
 800441c:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800441e:	2253      	movs	r2, #83	; 0x53
 8004420:	625a      	str	r2, [r3, #36]	; 0x24
  
  /*clear flags before config*/
  RTC->CR &= (uint32_t)~(RTC_CR_COSEL);
 8004422:	689a      	ldr	r2, [r3, #8]
 8004424:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8004428:	609a      	str	r2, [r3, #8]

  /* Configure the RTC_CR register */
  RTC->CR |= (uint32_t)RTC_CalibOutput;
 800442a:	689a      	ldr	r2, [r3, #8]
 800442c:	4302      	orrs	r2, r0
 800442e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 8004430:	22ff      	movs	r2, #255	; 0xff
 8004432:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop
 8004438:	40002800 	.word	0x40002800

0800443c <RTC_SmoothCalibConfig>:
  assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(RTC_SmoothCalibPeriod));
  assert_param(IS_RTC_SMOOTH_CALIB_PLUS(RTC_SmoothCalibPlusPulses));
  assert_param(IS_RTC_SMOOTH_CALIB_MINUS(RTC_SmouthCalibMinusPulsesValue));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800443c:	4b0e      	ldr	r3, [pc, #56]	; (8004478 <RTC_SmoothCalibConfig+0x3c>)
  *          - ERROR: RTC Calib registers are not configured
*/
ErrorStatus RTC_SmoothCalibConfig(uint32_t RTC_SmoothCalibPeriod,
                                  uint32_t RTC_SmoothCalibPlusPulses,
                                  uint32_t RTC_SmouthCalibMinusPulsesValue)
{
 800443e:	b530      	push	{r4, r5, lr}
  assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(RTC_SmoothCalibPeriod));
  assert_param(IS_RTC_SMOOTH_CALIB_PLUS(RTC_SmoothCalibPlusPulses));
  assert_param(IS_RTC_SMOOTH_CALIB_MINUS(RTC_SmouthCalibMinusPulsesValue));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8004440:	24ca      	movs	r4, #202	; 0xca
 8004442:	625c      	str	r4, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8004444:	2453      	movs	r4, #83	; 0x53
 8004446:	625c      	str	r4, [r3, #36]	; 0x24
  
  /* check if a calibration is pending*/
  if ((RTC->ISR & RTC_ISR_RECALPF) != RESET)
 8004448:	68dc      	ldr	r4, [r3, #12]
 800444a:	03e4      	lsls	r4, r4, #15
 800444c:	d506      	bpl.n	800445c <RTC_SmoothCalibConfig+0x20>
 800444e:	4c0b      	ldr	r4, [pc, #44]	; (800447c <RTC_SmoothCalibConfig+0x40>)
  {
    /* wait until the Calibration is completed*/
    while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
 8004450:	68dd      	ldr	r5, [r3, #12]
 8004452:	f415 3f80 	tst.w	r5, #65536	; 0x10000
 8004456:	d001      	beq.n	800445c <RTC_SmoothCalibConfig+0x20>
 8004458:	3c01      	subs	r4, #1
 800445a:	d1f9      	bne.n	8004450 <RTC_SmoothCalibConfig+0x14>
      recalpfcount++;
    }
  }

  /* check if the calibration pending is completed or if there is no calibration operation at all*/
  if ((RTC->ISR & RTC_ISR_RECALPF) == RESET)
 800445c:	4b06      	ldr	r3, [pc, #24]	; (8004478 <RTC_SmoothCalibConfig+0x3c>)
 800445e:	68dc      	ldr	r4, [r3, #12]
 8004460:	f414 3f80 	tst.w	r4, #65536	; 0x10000
 8004464:	d104      	bne.n	8004470 <RTC_SmoothCalibConfig+0x34>
  {
    /* Configure the Smooth calibration settings */
    RTC->CALR = (uint32_t)((uint32_t)RTC_SmoothCalibPeriod | (uint32_t)RTC_SmoothCalibPlusPulses | (uint32_t)RTC_SmouthCalibMinusPulsesValue);
 8004466:	4301      	orrs	r1, r0
 8004468:	4311      	orrs	r1, r2
 800446a:	63d9      	str	r1, [r3, #60]	; 0x3c

    status = SUCCESS;
 800446c:	2001      	movs	r0, #1
 800446e:	e000      	b.n	8004472 <RTC_SmoothCalibConfig+0x36>
  }
  else
  {
    status = ERROR;
 8004470:	2000      	movs	r0, #0
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 8004472:	22ff      	movs	r2, #255	; 0xff
 8004474:	625a      	str	r2, [r3, #36]	; 0x24
  
  return (ErrorStatus)(status);
}
 8004476:	bd30      	pop	{r4, r5, pc}
 8004478:	40002800 	.word	0x40002800
 800447c:	00020001 	.word	0x00020001

08004480 <RTC_TimeStampCmd>:
  /* Check the parameters */
  assert_param(IS_RTC_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(RTC->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8004480:	4b08      	ldr	r3, [pc, #32]	; (80044a4 <RTC_TimeStampCmd+0x24>)
 8004482:	689a      	ldr	r2, [r3, #8]
 8004484:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004488:	f022 0208 	bic.w	r2, r2, #8

  /* Get the new configuration */
  if (NewState != DISABLE)
 800448c:	b109      	cbz	r1, 8004492 <RTC_TimeStampCmd+0x12>
  {
    tmpreg |= (uint32_t)(RTC_TimeStampEdge | RTC_CR_TSE);
 800448e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  }
  else
  {
    tmpreg |= (uint32_t)(RTC_TimeStampEdge);
 8004492:	4310      	orrs	r0, r2
  }

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8004494:	22ca      	movs	r2, #202	; 0xca
 8004496:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8004498:	2253      	movs	r2, #83	; 0x53
 800449a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Time Stamp TSEDGE and Enable bits */
  RTC->CR = (uint32_t)tmpreg;

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800449c:	22ff      	movs	r2, #255	; 0xff
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
  RTC->WPR = 0x53;

  /* Configure the Time Stamp TSEDGE and Enable bits */
  RTC->CR = (uint32_t)tmpreg;
 800449e:	6098      	str	r0, [r3, #8]

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 80044a0:	625a      	str	r2, [r3, #36]	; 0x24
}
 80044a2:	4770      	bx	lr
 80044a4:	40002800 	.word	0x40002800

080044a8 <RTC_GetTimeStamp>:
  *                             contains the TimeStamp date values.     
  * @retval None
  */
void RTC_GetTimeStamp(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_StampTimeStruct, 
                                      RTC_DateTypeDef* RTC_StampDateStruct)
{
 80044a8:	b538      	push	{r3, r4, r5, lr}
 80044aa:	4615      	mov	r5, r2

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));

  /* Get the TimeStamp time and date registers values */
  tmptime = (uint32_t)(RTC->TSTR & RTC_TR_RESERVED_MASK);
 80044ac:	4a1a      	ldr	r2, [pc, #104]	; (8004518 <RTC_GetTimeStamp+0x70>)
 80044ae:	6b13      	ldr	r3, [r2, #48]	; 0x30
  tmpdate = (uint32_t)(RTC->TSDR & RTC_DR_RESERVED_MASK);
 80044b0:	6b52      	ldr	r2, [r2, #52]	; 0x34
  *                             contains the TimeStamp date values.     
  * @retval None
  */
void RTC_GetTimeStamp(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_StampTimeStruct, 
                                      RTC_DateTypeDef* RTC_StampDateStruct)
{
 80044b2:	460c      	mov	r4, r1
  /* Get the TimeStamp time and date registers values */
  tmptime = (uint32_t)(RTC->TSTR & RTC_TR_RESERVED_MASK);
  tmpdate = (uint32_t)(RTC->TSDR & RTC_DR_RESERVED_MASK);

  /* Fill the Time structure fields with the read parameters */
  RTC_StampTimeStruct->RTC_Hours = (uint8_t)((tmptime & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 80044b4:	f3c3 4105 	ubfx	r1, r3, #16, #6
 80044b8:	7021      	strb	r1, [r4, #0]
  RTC_StampTimeStruct->RTC_Minutes = (uint8_t)((tmptime & (RTC_TR_MNT | RTC_TR_MNU)) >> 8);
 80044ba:	f3c3 2106 	ubfx	r1, r3, #8, #7
 80044be:	7061      	strb	r1, [r4, #1]
  RTC_StampTimeStruct->RTC_Seconds = (uint8_t)(tmptime & (RTC_TR_ST | RTC_TR_SU));
 80044c0:	f003 017f 	and.w	r1, r3, #127	; 0x7f
  RTC_StampTimeStruct->RTC_H12 = (uint8_t)((tmptime & (RTC_TR_PM)) >> 16);  
 80044c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044c8:	0c1b      	lsrs	r3, r3, #16
 80044ca:	70e3      	strb	r3, [r4, #3]

  /* Fill the Date structure fields with the read parameters */
  RTC_StampDateStruct->RTC_Year = 0;
 80044cc:	2300      	movs	r3, #0
  tmpdate = (uint32_t)(RTC->TSDR & RTC_DR_RESERVED_MASK);

  /* Fill the Time structure fields with the read parameters */
  RTC_StampTimeStruct->RTC_Hours = (uint8_t)((tmptime & (RTC_TR_HT | RTC_TR_HU)) >> 16);
  RTC_StampTimeStruct->RTC_Minutes = (uint8_t)((tmptime & (RTC_TR_MNT | RTC_TR_MNU)) >> 8);
  RTC_StampTimeStruct->RTC_Seconds = (uint8_t)(tmptime & (RTC_TR_ST | RTC_TR_SU));
 80044ce:	70a1      	strb	r1, [r4, #2]
  RTC_StampTimeStruct->RTC_H12 = (uint8_t)((tmptime & (RTC_TR_PM)) >> 16);  

  /* Fill the Date structure fields with the read parameters */
  RTC_StampDateStruct->RTC_Year = 0;
 80044d0:	70eb      	strb	r3, [r5, #3]
  RTC_StampDateStruct->RTC_Month = (uint8_t)((tmpdate & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 80044d2:	f3c2 2304 	ubfx	r3, r2, #8, #5
 80044d6:	706b      	strb	r3, [r5, #1]
  RTC_StampDateStruct->RTC_Date = (uint8_t)(tmpdate & (RTC_DR_DT | RTC_DR_DU));
 80044d8:	f002 033f 	and.w	r3, r2, #63	; 0x3f
  RTC_StampDateStruct->RTC_WeekDay = (uint8_t)((tmpdate & (RTC_DR_WDU)) >> 13);
 80044dc:	f3c2 3242 	ubfx	r2, r2, #13, #3
  RTC_StampTimeStruct->RTC_H12 = (uint8_t)((tmptime & (RTC_TR_PM)) >> 16);  

  /* Fill the Date structure fields with the read parameters */
  RTC_StampDateStruct->RTC_Year = 0;
  RTC_StampDateStruct->RTC_Month = (uint8_t)((tmpdate & (RTC_DR_MT | RTC_DR_MU)) >> 8);
  RTC_StampDateStruct->RTC_Date = (uint8_t)(tmpdate & (RTC_DR_DT | RTC_DR_DU));
 80044e0:	70ab      	strb	r3, [r5, #2]
  RTC_StampDateStruct->RTC_WeekDay = (uint8_t)((tmpdate & (RTC_DR_WDU)) >> 13);
 80044e2:	702a      	strb	r2, [r5, #0]

  /* Check the input parameters format */
  if (RTC_Format == RTC_Format_BIN)
 80044e4:	b9b8      	cbnz	r0, 8004516 <RTC_GetTimeStamp+0x6e>
  {
    /* Convert the Time structure parameters to Binary format */
    RTC_StampTimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Hours);
 80044e6:	7820      	ldrb	r0, [r4, #0]
 80044e8:	f7ff fc30 	bl	8003d4c <RTC_Bcd2ToByte>
 80044ec:	7020      	strb	r0, [r4, #0]
    RTC_StampTimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Minutes);
 80044ee:	7860      	ldrb	r0, [r4, #1]
 80044f0:	f7ff fc2c 	bl	8003d4c <RTC_Bcd2ToByte>
 80044f4:	7060      	strb	r0, [r4, #1]
    RTC_StampTimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Seconds);
 80044f6:	78a0      	ldrb	r0, [r4, #2]
 80044f8:	f7ff fc28 	bl	8003d4c <RTC_Bcd2ToByte>
 80044fc:	70a0      	strb	r0, [r4, #2]

    /* Convert the Date structure parameters to Binary format */
    RTC_StampDateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Month);
 80044fe:	7868      	ldrb	r0, [r5, #1]
 8004500:	f7ff fc24 	bl	8003d4c <RTC_Bcd2ToByte>
 8004504:	7068      	strb	r0, [r5, #1]
    RTC_StampDateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Date);
 8004506:	78a8      	ldrb	r0, [r5, #2]
 8004508:	f7ff fc20 	bl	8003d4c <RTC_Bcd2ToByte>
 800450c:	70a8      	strb	r0, [r5, #2]
    RTC_StampDateStruct->RTC_WeekDay = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_WeekDay);
 800450e:	7828      	ldrb	r0, [r5, #0]
 8004510:	f7ff fc1c 	bl	8003d4c <RTC_Bcd2ToByte>
 8004514:	7028      	strb	r0, [r5, #0]
 8004516:	bd38      	pop	{r3, r4, r5, pc}
 8004518:	40002800 	.word	0x40002800

0800451c <RTC_GetTimeStampSubSecond>:
  * @retval RTC current timestamp Subseconds value.
  */
uint32_t RTC_GetTimeStampSubSecond(void)
{
  /* Get timestamp subseconds values from the correspondent registers */
  return (uint32_t)(RTC->TSSSR);
 800451c:	4b01      	ldr	r3, [pc, #4]	; (8004524 <RTC_GetTimeStampSubSecond+0x8>)
 800451e:	6b98      	ldr	r0, [r3, #56]	; 0x38
}
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop
 8004524:	40002800 	.word	0x40002800

08004528 <RTC_TamperTriggerConfig>:
  *     @arg RTC_TamperTrigger_LowLevel: Low Level of the tamper pin causes tamper event.
  *     @arg RTC_TamperTrigger_HighLevel: High Level of the tamper pin causes tamper event.
  * @retval None
  */
void RTC_TamperTriggerConfig(uint32_t RTC_Tamper, uint32_t RTC_TamperTrigger)
{
 8004528:	4b04      	ldr	r3, [pc, #16]	; (800453c <RTC_TamperTriggerConfig+0x14>)
 800452a:	0040      	lsls	r0, r0, #1
  assert_param(IS_RTC_TAMPER_TRIGGER(RTC_TamperTrigger));
 
  if (RTC_TamperTrigger == RTC_TamperTrigger_RisingEdge)
  {  
    /* Configure the RTC_TAFCR register */
    RTC->TAFCR &= (uint32_t)((uint32_t)~(RTC_Tamper << 1));	
 800452c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER(RTC_Tamper)); 
  assert_param(IS_RTC_TAMPER_TRIGGER(RTC_TamperTrigger));
 
  if (RTC_TamperTrigger == RTC_TamperTrigger_RisingEdge)
 800452e:	b911      	cbnz	r1, 8004536 <RTC_TamperTriggerConfig+0xe>
  {  
    /* Configure the RTC_TAFCR register */
    RTC->TAFCR &= (uint32_t)((uint32_t)~(RTC_Tamper << 1));	
 8004530:	ea22 0000 	bic.w	r0, r2, r0
 8004534:	e000      	b.n	8004538 <RTC_TamperTriggerConfig+0x10>
  }
  else
  { 
    /* Configure the RTC_TAFCR register */
    RTC->TAFCR |= (uint32_t)(RTC_Tamper << 1);  
 8004536:	4310      	orrs	r0, r2
 8004538:	6418      	str	r0, [r3, #64]	; 0x40
 800453a:	4770      	bx	lr
 800453c:	40002800 	.word	0x40002800

08004540 <RTC_TamperCmd>:
  * @param  NewState: new state of the tamper pin.
  *          This parameter can be: ENABLE or DISABLE.                   
  * @retval None
  */
void RTC_TamperCmd(uint32_t RTC_Tamper, FunctionalState NewState)
{
 8004540:	4b04      	ldr	r3, [pc, #16]	; (8004554 <RTC_TamperCmd+0x14>)
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected Tamper pin */
    RTC->TAFCR |= (uint32_t)RTC_Tamper;
 8004542:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER(RTC_Tamper));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8004544:	b109      	cbz	r1, 800454a <RTC_TamperCmd+0xa>
  {
    /* Enable the selected Tamper pin */
    RTC->TAFCR |= (uint32_t)RTC_Tamper;
 8004546:	4310      	orrs	r0, r2
 8004548:	e001      	b.n	800454e <RTC_TamperCmd+0xe>
  }
  else
  {
    /* Disable the selected Tamper pin */
    RTC->TAFCR &= (uint32_t)~RTC_Tamper;    
 800454a:	ea22 0000 	bic.w	r0, r2, r0
 800454e:	6418      	str	r0, [r3, #64]	; 0x40
 8004550:	4770      	bx	lr
 8004552:	bf00      	nop
 8004554:	40002800 	.word	0x40002800

08004558 <RTC_TamperFilterConfig>:
{
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER_FILTER(RTC_TamperFilter));
   
  /* Clear TAMPFLT[1:0] bits in the RTC_TAFCR register */
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFLT);
 8004558:	4b04      	ldr	r3, [pc, #16]	; (800456c <RTC_TamperFilterConfig+0x14>)
 800455a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800455c:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 8004560:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure the RTC_TAFCR register */
  RTC->TAFCR |= (uint32_t)RTC_TamperFilter;
 8004562:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004564:	4302      	orrs	r2, r0
 8004566:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004568:	4770      	bx	lr
 800456a:	bf00      	nop
 800456c:	40002800 	.word	0x40002800

08004570 <RTC_TamperSamplingFreqConfig>:
{
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER_SAMPLING_FREQ(RTC_TamperSamplingFreq));
 
  /* Clear TAMPFREQ[2:0] bits in the RTC_TAFCR register */
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFREQ);
 8004570:	4b04      	ldr	r3, [pc, #16]	; (8004584 <RTC_TamperSamplingFreqConfig+0x14>)
 8004572:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004574:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004578:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure the RTC_TAFCR register */
  RTC->TAFCR |= (uint32_t)RTC_TamperSamplingFreq;
 800457a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800457c:	4302      	orrs	r2, r0
 800457e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004580:	4770      	bx	lr
 8004582:	bf00      	nop
 8004584:	40002800 	.word	0x40002800

08004588 <RTC_TamperPinsPrechargeDuration>:
{
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER_PRECHARGE_DURATION(RTC_TamperPrechargeDuration));
   
  /* Clear TAMPPRCH[1:0] bits in the RTC_TAFCR register */
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPPRCH);
 8004588:	4b04      	ldr	r3, [pc, #16]	; (800459c <RTC_TamperPinsPrechargeDuration+0x14>)
 800458a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800458c:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8004590:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure the RTC_TAFCR register */
  RTC->TAFCR |= (uint32_t)RTC_TamperPrechargeDuration;
 8004592:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004594:	4302      	orrs	r2, r0
 8004596:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004598:	4770      	bx	lr
 800459a:	bf00      	nop
 800459c:	40002800 	.word	0x40002800

080045a0 <RTC_TimeStampOnTamperDetectionCmd>:
  * @param  NewState: new state of the timestamp on tamper event.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_TimeStampOnTamperDetectionCmd(FunctionalState NewState)
{
 80045a0:	4b04      	ldr	r3, [pc, #16]	; (80045b4 <RTC_TimeStampOnTamperDetectionCmd+0x14>)
  assert_param(IS_FUNCTIONAL_STATE(NewState));
   
  if (NewState != DISABLE)
  {
    /* Save timestamp on tamper detection event */
    RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPTS;
 80045a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
void RTC_TimeStampOnTamperDetectionCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
   
  if (NewState != DISABLE)
 80045a4:	b110      	cbz	r0, 80045ac <RTC_TimeStampOnTamperDetectionCmd+0xc>
  {
    /* Save timestamp on tamper detection event */
    RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPTS;
 80045a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80045aa:	e001      	b.n	80045b0 <RTC_TimeStampOnTamperDetectionCmd+0x10>
  }
  else
  {
    /* Tamper detection does not cause a timestamp to be saved */
    RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPTS;    
 80045ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045b0:	641a      	str	r2, [r3, #64]	; 0x40
 80045b2:	4770      	bx	lr
 80045b4:	40002800 	.word	0x40002800

080045b8 <RTC_TamperPullUpCmd>:
  * @param  NewState: new state of tamper pull up.
  *   This parameter can be: ENABLE or DISABLE.                   
  * @retval None
  */
void RTC_TamperPullUpCmd(FunctionalState NewState)
{
 80045b8:	4b04      	ldr	r3, [pc, #16]	; (80045cc <RTC_TamperPullUpCmd+0x14>)
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
 if (NewState != DISABLE)
  {
    /* Enable precharge of the selected Tamper pin */
    RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPPUDIS; 
 80045ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
void RTC_TamperPullUpCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
 if (NewState != DISABLE)
 80045bc:	b110      	cbz	r0, 80045c4 <RTC_TamperPullUpCmd+0xc>
  {
    /* Enable precharge of the selected Tamper pin */
    RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPPUDIS; 
 80045be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80045c2:	e001      	b.n	80045c8 <RTC_TamperPullUpCmd+0x10>
  }
  else
  {
    /* Disable precharge of the selected Tamper pin */
    RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPPUDIS;    
 80045c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80045c8:	641a      	str	r2, [r3, #64]	; 0x40
 80045ca:	4770      	bx	lr
 80045cc:	40002800 	.word	0x40002800

080045d0 <RTC_WriteBackupRegister>:
  *                          specify the register.
  * @param  Data: Data to be written in the specified RTC Backup data register.                     
  * @retval None
  */
void RTC_WriteBackupRegister(uint32_t RTC_BKP_DR, uint32_t Data)
{
 80045d0:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 80045d2:	2300      	movs	r3, #0
 80045d4:	9301      	str	r3, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_RTC_BKP(RTC_BKP_DR));

  tmp = RTC_BASE + 0x50;
 80045d6:	4b05      	ldr	r3, [pc, #20]	; (80045ec <RTC_WriteBackupRegister+0x1c>)
 80045d8:	9301      	str	r3, [sp, #4]
  tmp += (RTC_BKP_DR * 4);
 80045da:	9b01      	ldr	r3, [sp, #4]
 80045dc:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80045e0:	9301      	str	r3, [sp, #4]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80045e2:	9b01      	ldr	r3, [sp, #4]
 80045e4:	6019      	str	r1, [r3, #0]
}
 80045e6:	b002      	add	sp, #8
 80045e8:	4770      	bx	lr
 80045ea:	bf00      	nop
 80045ec:	40002850 	.word	0x40002850

080045f0 <RTC_ReadBackupRegister>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
  *                          specify the register.                   
  * @retval None
  */
uint32_t RTC_ReadBackupRegister(uint32_t RTC_BKP_DR)
{
 80045f0:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 80045f2:	2300      	movs	r3, #0
 80045f4:	9301      	str	r3, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_RTC_BKP(RTC_BKP_DR));

  tmp = RTC_BASE + 0x50;
 80045f6:	4b05      	ldr	r3, [pc, #20]	; (800460c <RTC_ReadBackupRegister+0x1c>)
 80045f8:	9301      	str	r3, [sp, #4]
  tmp += (RTC_BKP_DR * 4);
 80045fa:	9b01      	ldr	r3, [sp, #4]
 80045fc:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8004600:	9301      	str	r3, [sp, #4]
  
  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8004602:	9b01      	ldr	r3, [sp, #4]
 8004604:	6818      	ldr	r0, [r3, #0]
}
 8004606:	b002      	add	sp, #8
 8004608:	4770      	bx	lr
 800460a:	bf00      	nop
 800460c:	40002850 	.word	0x40002850

08004610 <RTC_TamperPinSelection>:
void RTC_TamperPinSelection(uint32_t RTC_TamperPin)
{
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER_PIN(RTC_TamperPin));
  
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPINSEL);
 8004610:	4b04      	ldr	r3, [pc, #16]	; (8004624 <RTC_TamperPinSelection+0x14>)
 8004612:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004614:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004618:	641a      	str	r2, [r3, #64]	; 0x40
  RTC->TAFCR |= (uint32_t)(RTC_TamperPin);  
 800461a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800461c:	4302      	orrs	r2, r0
 800461e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004620:	4770      	bx	lr
 8004622:	bf00      	nop
 8004624:	40002800 	.word	0x40002800

08004628 <RTC_TimeStampPinSelection>:
void RTC_TimeStampPinSelection(uint32_t RTC_TimeStampPin)
{
  /* Check the parameters */
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));
  
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TSINSEL);
 8004628:	4b04      	ldr	r3, [pc, #16]	; (800463c <RTC_TimeStampPinSelection+0x14>)
 800462a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800462c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8004630:	641a      	str	r2, [r3, #64]	; 0x40
  RTC->TAFCR |= (uint32_t)(RTC_TimeStampPin);  
 8004632:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004634:	4302      	orrs	r2, r0
 8004636:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop
 800463c:	40002800 	.word	0x40002800

08004640 <RTC_OutputTypeConfig>:
void RTC_OutputTypeConfig(uint32_t RTC_OutputType)
{
  /* Check the parameters */
  assert_param(IS_RTC_OUTPUT_TYPE(RTC_OutputType));
  
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_ALARMOUTTYPE);
 8004640:	4b04      	ldr	r3, [pc, #16]	; (8004654 <RTC_OutputTypeConfig+0x14>)
 8004642:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004644:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004648:	641a      	str	r2, [r3, #64]	; 0x40
  RTC->TAFCR |= (uint32_t)(RTC_OutputType);  
 800464a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800464c:	4302      	orrs	r2, r0
 800464e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004650:	4770      	bx	lr
 8004652:	bf00      	nop
 8004654:	40002800 	.word	0x40002800

08004658 <RTC_SynchroShiftConfig>:
  /* Check the parameters */
  assert_param(IS_RTC_SHIFT_ADD1S(RTC_ShiftAdd1S));
  assert_param(IS_RTC_SHIFT_SUBFS(RTC_ShiftSubFS));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8004658:	4b14      	ldr	r3, [pc, #80]	; (80046ac <RTC_SynchroShiftConfig+0x54>)
 800465a:	22ca      	movs	r2, #202	; 0xca
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Shift registers are configured
  *          - ERROR: RTC Shift registers are not configured
*/
ErrorStatus RTC_SynchroShiftConfig(uint32_t RTC_ShiftAdd1S, uint32_t RTC_ShiftSubFS)
{
 800465c:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_RTC_SHIFT_ADD1S(RTC_ShiftAdd1S));
  assert_param(IS_RTC_SHIFT_SUBFS(RTC_ShiftSubFS));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800465e:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8004660:	2253      	movs	r2, #83	; 0x53
 8004662:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Check if a Shift is pending*/
  if ((RTC->ISR & RTC_ISR_SHPF) != RESET)
 8004664:	68da      	ldr	r2, [r3, #12]
 8004666:	0712      	lsls	r2, r2, #28
 8004668:	d507      	bpl.n	800467a <RTC_SynchroShiftConfig+0x22>
 800466a:	f241 0201 	movw	r2, #4097	; 0x1001
  {
    /* Wait until the shift is completed*/
    while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
 800466e:	68dc      	ldr	r4, [r3, #12]
 8004670:	f014 0f08 	tst.w	r4, #8
 8004674:	d001      	beq.n	800467a <RTC_SynchroShiftConfig+0x22>
 8004676:	3a01      	subs	r2, #1
 8004678:	d1f9      	bne.n	800466e <RTC_SynchroShiftConfig+0x16>
      shpfcount++;
    }
  }

  /* Check if the Shift pending is completed or if there is no Shift operation at all*/
  if ((RTC->ISR & RTC_ISR_SHPF) == RESET)
 800467a:	4b0c      	ldr	r3, [pc, #48]	; (80046ac <RTC_SynchroShiftConfig+0x54>)
 800467c:	68da      	ldr	r2, [r3, #12]
 800467e:	f012 0208 	ands.w	r2, r2, #8
 8004682:	d10b      	bne.n	800469c <RTC_SynchroShiftConfig+0x44>
  {
    /* check if the reference clock detection is disabled */
    if((RTC->CR & RTC_CR_REFCKON) == RESET)
 8004684:	689c      	ldr	r4, [r3, #8]
 8004686:	f014 0f10 	tst.w	r4, #16
 800468a:	d109      	bne.n	80046a0 <RTC_SynchroShiftConfig+0x48>
    {
      /* Configure the Shift settings */
      RTC->SHIFTR = (uint32_t)(uint32_t)(RTC_ShiftSubFS) | (uint32_t)(RTC_ShiftAdd1S);
 800468c:	4308      	orrs	r0, r1
 800468e:	62d8      	str	r0, [r3, #44]	; 0x2c
    
      if(RTC_WaitForSynchro() == ERROR)
 8004690:	f7ff fbbe 	bl	8003e10 <RTC_WaitForSynchro>
      {
        status = ERROR;
 8004694:	3000      	adds	r0, #0
 8004696:	bf18      	it	ne
 8004698:	2001      	movne	r0, #1
 800469a:	e002      	b.n	80046a2 <RTC_SynchroShiftConfig+0x4a>
      status = ERROR;
    }
  }
  else
  {
    status = ERROR;
 800469c:	2000      	movs	r0, #0
 800469e:	e000      	b.n	80046a2 <RTC_SynchroShiftConfig+0x4a>
        status = SUCCESS;
      }
    }
    else
    {
      status = ERROR;
 80046a0:	4610      	mov	r0, r2
  {
    status = ERROR;
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 80046a2:	4b02      	ldr	r3, [pc, #8]	; (80046ac <RTC_SynchroShiftConfig+0x54>)
 80046a4:	22ff      	movs	r2, #255	; 0xff
 80046a6:	625a      	str	r2, [r3, #36]	; 0x24
  
  return (ErrorStatus)(status);
}
 80046a8:	bd10      	pop	{r4, pc}
 80046aa:	bf00      	nop
 80046ac:	40002800 	.word	0x40002800

080046b0 <RTC_ITConfig>:
  /* Check the parameters */
  assert_param(IS_RTC_CONFIG_IT(RTC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 80046b0:	4b0e      	ldr	r3, [pc, #56]	; (80046ec <RTC_ITConfig+0x3c>)
 80046b2:	22ca      	movs	r2, #202	; 0xca
 80046b4:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 80046b6:	2253      	movs	r2, #83	; 0x53
 80046b8:	625a      	str	r2, [r3, #36]	; 0x24
 80046ba:	f020 0204 	bic.w	r2, r0, #4

  if (NewState != DISABLE)
 80046be:	b139      	cbz	r1, 80046d0 <RTC_ITConfig+0x20>
  {
    /* Configure the Interrupts in the RTC_CR register */
    RTC->CR |= (uint32_t)(RTC_IT & ~RTC_TAFCR_TAMPIE);
 80046c0:	6899      	ldr	r1, [r3, #8]
 80046c2:	430a      	orrs	r2, r1
 80046c4:	609a      	str	r2, [r3, #8]
    /* Configure the Tamper Interrupt in the RTC_TAFCR */
    RTC->TAFCR |= (uint32_t)(RTC_IT & RTC_TAFCR_TAMPIE);
 80046c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046c8:	f000 0004 	and.w	r0, r0, #4
 80046cc:	4310      	orrs	r0, r2
 80046ce:	e008      	b.n	80046e2 <RTC_ITConfig+0x32>
  }
  else
  {
    /* Configure the Interrupts in the RTC_CR register */
    RTC->CR &= (uint32_t)~(RTC_IT & (uint32_t)~RTC_TAFCR_TAMPIE);
 80046d0:	6899      	ldr	r1, [r3, #8]
 80046d2:	ea21 0202 	bic.w	r2, r1, r2
 80046d6:	609a      	str	r2, [r3, #8]
    /* Configure the Tamper Interrupt in the RTC_TAFCR */
    RTC->TAFCR &= (uint32_t)~(RTC_IT & RTC_TAFCR_TAMPIE);
 80046d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046da:	f000 0004 	and.w	r0, r0, #4
 80046de:	ea22 0000 	bic.w	r0, r2, r0
 80046e2:	6418      	str	r0, [r3, #64]	; 0x40
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 80046e4:	4b01      	ldr	r3, [pc, #4]	; (80046ec <RTC_ITConfig+0x3c>)
 80046e6:	22ff      	movs	r2, #255	; 0xff
 80046e8:	625a      	str	r2, [r3, #36]	; 0x24
}
 80046ea:	4770      	bx	lr
 80046ec:	40002800 	.word	0x40002800

080046f0 <RTC_GetFlagStatus>:
  
  /* Check the parameters */
  assert_param(IS_RTC_GET_FLAG(RTC_FLAG));
  
  /* Get all the flags */
  tmpreg = (uint32_t)(RTC->ISR & RTC_FLAGS_MASK);
 80046f0:	4b04      	ldr	r3, [pc, #16]	; (8004704 <RTC_GetFlagStatus+0x14>)
 80046f2:	68da      	ldr	r2, [r3, #12]
 80046f4:	4b04      	ldr	r3, [pc, #16]	; (8004708 <RTC_GetFlagStatus+0x18>)
 80046f6:	4013      	ands	r3, r2
  
  /* Return the status of the flag */
  if ((tmpreg & RTC_FLAG) != (uint32_t)RESET)
  {
    bitstatus = SET;
 80046f8:	4203      	tst	r3, r0
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 80046fa:	bf0c      	ite	eq
 80046fc:	2000      	moveq	r0, #0
 80046fe:	2001      	movne	r0, #1
 8004700:	4770      	bx	lr
 8004702:	bf00      	nop
 8004704:	40002800 	.word	0x40002800
 8004708:	00013f7f 	.word	0x00013f7f

0800470c <RTC_ClearFlag>:
{
  /* Check the parameters */
  assert_param(IS_RTC_CLEAR_FLAG(RTC_FLAG));

  /* Clear the Flags in the RTC_ISR register */
  RTC->ISR = (uint32_t)((uint32_t)(~((RTC_FLAG | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR & RTC_ISR_INIT)));  
 800470c:	4b05      	ldr	r3, [pc, #20]	; (8004724 <RTC_ClearFlag+0x18>)
 800470e:	68da      	ldr	r2, [r3, #12]
 8004710:	b280      	uxth	r0, r0
 8004712:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8004716:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800471a:	ea62 0200 	orn	r2, r2, r0
 800471e:	60da      	str	r2, [r3, #12]
}
 8004720:	4770      	bx	lr
 8004722:	bf00      	nop
 8004724:	40002800 	.word	0x40002800

08004728 <RTC_GetITStatus>:
 
  /* Check the parameters */
  assert_param(IS_RTC_GET_IT(RTC_IT));
  
  /* Get the TAMPER Interrupt enable bit and pending bit */
  tmpreg = (uint32_t)(RTC->TAFCR & (RTC_TAFCR_TAMPIE));
 8004728:	4b0a      	ldr	r3, [pc, #40]	; (8004754 <RTC_GetITStatus+0x2c>)
 800472a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  *            @arg RTC_IT_ALRA: Alarm A interrupt 
  *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt 
  * @retval The new state of RTC_IT (SET or RESET).
  */
ITStatus RTC_GetITStatus(uint32_t RTC_IT)
{
 800472c:	b510      	push	{r4, lr}
  
  /* Get the TAMPER Interrupt enable bit and pending bit */
  tmpreg = (uint32_t)(RTC->TAFCR & (RTC_TAFCR_TAMPIE));
 
  /* Get the Interrupt enable Status */
  enablestatus = (uint32_t)((RTC->CR & RTC_IT) | (tmpreg & (RTC_IT >> 15)));
 800472e:	689c      	ldr	r4, [r3, #8]
  
  /* Get the Interrupt pending bit */
  tmpreg = (uint32_t)((RTC->ISR & (uint32_t)(RTC_IT >> 4)));
 8004730:	68d9      	ldr	r1, [r3, #12]
 
  /* Check the parameters */
  assert_param(IS_RTC_GET_IT(RTC_IT));
  
  /* Get the TAMPER Interrupt enable bit and pending bit */
  tmpreg = (uint32_t)(RTC->TAFCR & (RTC_TAFCR_TAMPIE));
 8004732:	f002 0204 	and.w	r2, r2, #4
 
  /* Get the Interrupt enable Status */
  enablestatus = (uint32_t)((RTC->CR & RTC_IT) | (tmpreg & (RTC_IT >> 15)));
 8004736:	ea02 32d0 	and.w	r2, r2, r0, lsr #15
 800473a:	ea00 0304 	and.w	r3, r0, r4
  
  /* Get the Interrupt pending bit */
  tmpreg = (uint32_t)((RTC->ISR & (uint32_t)(RTC_IT >> 4)));
  
  /* Get the status of the Interrupt */
  if ((enablestatus != (uint32_t)RESET) && ((tmpreg & 0x0000FFFF) != (uint32_t)RESET))
 800473e:	4313      	orrs	r3, r2
 8004740:	d006      	beq.n	8004750 <RTC_GetITStatus+0x28>
 
  /* Get the Interrupt enable Status */
  enablestatus = (uint32_t)((RTC->CR & RTC_IT) | (tmpreg & (RTC_IT >> 15)));
  
  /* Get the Interrupt pending bit */
  tmpreg = (uint32_t)((RTC->ISR & (uint32_t)(RTC_IT >> 4)));
 8004742:	b28b      	uxth	r3, r1
  *            @arg RTC_IT_ALRB: Alarm B interrupt 
  *            @arg RTC_IT_ALRA: Alarm A interrupt 
  *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt 
  * @retval The new state of RTC_IT (SET or RESET).
  */
ITStatus RTC_GetITStatus(uint32_t RTC_IT)
 8004744:	ea13 1310 	ands.w	r3, r3, r0, lsr #4
  tmpreg = (uint32_t)((RTC->ISR & (uint32_t)(RTC_IT >> 4)));
  
  /* Get the status of the Interrupt */
  if ((enablestatus != (uint32_t)RESET) && ((tmpreg & 0x0000FFFF) != (uint32_t)RESET))
  {
    bitstatus = SET;
 8004748:	bf0c      	ite	eq
 800474a:	2000      	moveq	r0, #0
 800474c:	2001      	movne	r0, #1
 800474e:	bd10      	pop	{r4, pc}
  }
  else
  {
    bitstatus = RESET;
 8004750:	4618      	mov	r0, r3
  }
  return bitstatus;
}
 8004752:	bd10      	pop	{r4, pc}
 8004754:	40002800 	.word	0x40002800

08004758 <RTC_ClearITPendingBit>:

  /* Get the RTC_ISR Interrupt pending bits mask */
  tmpreg = (uint32_t)(RTC_IT >> 4);

  /* Clear the interrupt pending bits in the RTC_ISR register */
  RTC->ISR = (uint32_t)((uint32_t)(~((tmpreg | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR & RTC_ISR_INIT))); 
 8004758:	4b05      	ldr	r3, [pc, #20]	; (8004770 <RTC_ClearITPendingBit+0x18>)
 800475a:	68da      	ldr	r2, [r3, #12]
 800475c:	f3c0 100f 	ubfx	r0, r0, #4, #16
 8004760:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8004764:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8004768:	ea62 0200 	orn	r2, r2, r0
 800476c:	60da      	str	r2, [r3, #12]
}
 800476e:	4770      	bx	lr
 8004770:	40002800 	.word	0x40002800

08004774 <SDIO_DeInit>:
  * @brief  Deinitializes the SDIO peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void SDIO_DeInit(void)
{
 8004774:	b508      	push	{r3, lr}
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_SDIO, ENABLE);
 8004776:	2101      	movs	r1, #1
 8004778:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800477c:	f7ff f9f6 	bl	8003b6c <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_SDIO, DISABLE);
 8004780:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004784:	2100      	movs	r1, #0
}
 8004786:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  * @retval None
  */
void SDIO_DeInit(void)
{
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_SDIO, ENABLE);
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_SDIO, DISABLE);
 800478a:	f7ff b9ef 	b.w	8003b6c <RCC_APB2PeriphResetCmd>

0800478e <SDIO_Init>:
  * @param  SDIO_InitStruct : pointer to a SDIO_InitTypeDef structure 
  *         that contains the configuration information for the SDIO peripheral.
  * @retval None
  */
void SDIO_Init(SDIO_InitTypeDef* SDIO_InitStruct)
{
 800478e:	b510      	push	{r4, lr}
  /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
 8004790:	6881      	ldr	r1, [r0, #8]
 8004792:	6844      	ldr	r4, [r0, #4]
  assert_param(IS_SDIO_BUS_WIDE(SDIO_InitStruct->SDIO_BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(SDIO_InitStruct->SDIO_HardwareFlowControl)); 
   
/*---------------------------- SDIO CLKCR Configuration ------------------------*/  
  /* Get the SDIO CLKCR value */
  tmpreg = SDIO->CLKCR;
 8004794:	4a08      	ldr	r2, [pc, #32]	; (80047b8 <SDIO_Init+0x2a>)
  /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
 8004796:	4321      	orrs	r1, r4
 8004798:	68c4      	ldr	r4, [r0, #12]
  assert_param(IS_SDIO_BUS_WIDE(SDIO_InitStruct->SDIO_BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(SDIO_InitStruct->SDIO_HardwareFlowControl)); 
   
/*---------------------------- SDIO CLKCR Configuration ------------------------*/  
  /* Get the SDIO CLKCR value */
  tmpreg = SDIO->CLKCR;
 800479a:	6853      	ldr	r3, [r2, #4]
  /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
 800479c:	4321      	orrs	r1, r4
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
 800479e:	6804      	ldr	r4, [r0, #0]
 80047a0:	4321      	orrs	r1, r4
 80047a2:	6904      	ldr	r4, [r0, #16]
/*---------------------------- SDIO CLKCR Configuration ------------------------*/  
  /* Get the SDIO CLKCR value */
  tmpreg = SDIO->CLKCR;
  
  /* Clear CLKDIV, PWRSAV, BYPASS, WIDBUS, NEGEDGE, HWFC_EN bits */
  tmpreg &= CLKCR_CLEAR_MASK;
 80047a4:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
 80047a8:	4321      	orrs	r1, r4
/*---------------------------- SDIO CLKCR Configuration ------------------------*/  
  /* Get the SDIO CLKCR value */
  tmpreg = SDIO->CLKCR;
  
  /* Clear CLKDIV, PWRSAV, BYPASS, WIDBUS, NEGEDGE, HWFC_EN bits */
  tmpreg &= CLKCR_CLEAR_MASK;
 80047aa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
             SDIO_InitStruct->SDIO_ClockEdge | SDIO_InitStruct->SDIO_HardwareFlowControl); 
 80047ae:	430b      	orrs	r3, r1
  /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
 80047b0:	7d01      	ldrb	r1, [r0, #20]
 80047b2:	430b      	orrs	r3, r1
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
             SDIO_InitStruct->SDIO_ClockEdge | SDIO_InitStruct->SDIO_HardwareFlowControl); 
  
  /* Write to SDIO CLKCR */
  SDIO->CLKCR = tmpreg;
 80047b4:	6053      	str	r3, [r2, #4]
}
 80047b6:	bd10      	pop	{r4, pc}
 80047b8:	40012c00 	.word	0x40012c00

080047bc <SDIO_StructInit>:
  * @retval None
  */
void SDIO_StructInit(SDIO_InitTypeDef* SDIO_InitStruct)
{
  /* SDIO_InitStruct members default value */
  SDIO_InitStruct->SDIO_ClockDiv = 0x00;
 80047bc:	2300      	movs	r3, #0
 80047be:	7503      	strb	r3, [r0, #20]
  SDIO_InitStruct->SDIO_ClockEdge = SDIO_ClockEdge_Rising;
 80047c0:	6003      	str	r3, [r0, #0]
  SDIO_InitStruct->SDIO_ClockBypass = SDIO_ClockBypass_Disable;
 80047c2:	6043      	str	r3, [r0, #4]
  SDIO_InitStruct->SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
 80047c4:	6083      	str	r3, [r0, #8]
  SDIO_InitStruct->SDIO_BusWide = SDIO_BusWide_1b;
 80047c6:	60c3      	str	r3, [r0, #12]
  SDIO_InitStruct->SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
 80047c8:	6103      	str	r3, [r0, #16]
}
 80047ca:	4770      	bx	lr

080047cc <SDIO_ClockCmd>:
void SDIO_ClockCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CLKCR_CLKEN_BB = (uint32_t)NewState;
 80047cc:	4b01      	ldr	r3, [pc, #4]	; (80047d4 <SDIO_ClockCmd+0x8>)
 80047ce:	6018      	str	r0, [r3, #0]
}
 80047d0:	4770      	bx	lr
 80047d2:	bf00      	nop
 80047d4:	422580a0 	.word	0x422580a0

080047d8 <SDIO_SetPowerState>:
void SDIO_SetPowerState(uint32_t SDIO_PowerState)
{
  /* Check the parameters */
  assert_param(IS_SDIO_POWER_STATE(SDIO_PowerState));
  
  SDIO->POWER = SDIO_PowerState;
 80047d8:	4b01      	ldr	r3, [pc, #4]	; (80047e0 <SDIO_SetPowerState+0x8>)
 80047da:	6018      	str	r0, [r3, #0]
}
 80047dc:	4770      	bx	lr
 80047de:	bf00      	nop
 80047e0:	40012c00 	.word	0x40012c00

080047e4 <SDIO_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(void)
{
  return (SDIO->POWER & (~PWR_PWRCTRL_MASK));
 80047e4:	4b02      	ldr	r3, [pc, #8]	; (80047f0 <SDIO_GetPowerState+0xc>)
 80047e6:	6818      	ldr	r0, [r3, #0]
}
 80047e8:	f000 0003 	and.w	r0, r0, #3
 80047ec:	4770      	bx	lr
 80047ee:	bf00      	nop
 80047f0:	40012c00 	.word	0x40012c00

080047f4 <SDIO_SendCommand>:
  assert_param(IS_SDIO_WAIT(SDIO_CmdInitStruct->SDIO_Wait));
  assert_param(IS_SDIO_CPSM(SDIO_CmdInitStruct->SDIO_CPSM));
  
/*---------------------------- SDIO ARG Configuration ------------------------*/
  /* Set the SDIO Argument value */
  SDIO->ARG = SDIO_CmdInitStruct->SDIO_Argument;
 80047f4:	6802      	ldr	r2, [r0, #0]
 80047f6:	4b09      	ldr	r3, [pc, #36]	; (800481c <SDIO_SendCommand+0x28>)
  *         structure that contains the configuration information for the SDIO 
  *         command.
  * @retval None
  */
void SDIO_SendCommand(SDIO_CmdInitTypeDef *SDIO_CmdInitStruct)
{
 80047f8:	b510      	push	{r4, lr}
  assert_param(IS_SDIO_WAIT(SDIO_CmdInitStruct->SDIO_Wait));
  assert_param(IS_SDIO_CPSM(SDIO_CmdInitStruct->SDIO_CPSM));
  
/*---------------------------- SDIO ARG Configuration ------------------------*/
  /* Set the SDIO Argument value */
  SDIO->ARG = SDIO_CmdInitStruct->SDIO_Argument;
 80047fa:	609a      	str	r2, [r3, #8]
  tmpreg &= CMD_CLEAR_MASK;
  /* Set CMDINDEX bits according to SDIO_CmdIndex value */
  /* Set WAITRESP bits according to SDIO_Response value */
  /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
  /* Set CPSMEN bits according to SDIO_CPSM value */
  tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
 80047fc:	6884      	ldr	r4, [r0, #8]
 80047fe:	6841      	ldr	r1, [r0, #4]
  /* Set the SDIO Argument value */
  SDIO->ARG = SDIO_CmdInitStruct->SDIO_Argument;
  
/*---------------------------- SDIO CMD Configuration ------------------------*/  
  /* Get the SDIO CMD value */
  tmpreg = SDIO->CMD;
 8004800:	68da      	ldr	r2, [r3, #12]
  tmpreg &= CMD_CLEAR_MASK;
  /* Set CMDINDEX bits according to SDIO_CmdIndex value */
  /* Set WAITRESP bits according to SDIO_Response value */
  /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
  /* Set CPSMEN bits according to SDIO_CPSM value */
  tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
 8004802:	4321      	orrs	r1, r4
           | SDIO_CmdInitStruct->SDIO_Wait | SDIO_CmdInitStruct->SDIO_CPSM;
 8004804:	68c4      	ldr	r4, [r0, #12]
 8004806:	6900      	ldr	r0, [r0, #16]
  
/*---------------------------- SDIO CMD Configuration ------------------------*/  
  /* Get the SDIO CMD value */
  tmpreg = SDIO->CMD;
  /* Clear CMDINDEX, WAITRESP, WAITINT, WAITPEND, CPSMEN bits */
  tmpreg &= CMD_CLEAR_MASK;
 8004808:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
  /* Set CMDINDEX bits according to SDIO_CmdIndex value */
  /* Set WAITRESP bits according to SDIO_Response value */
  /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
  /* Set CPSMEN bits according to SDIO_CPSM value */
  tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
           | SDIO_CmdInitStruct->SDIO_Wait | SDIO_CmdInitStruct->SDIO_CPSM;
 800480c:	4321      	orrs	r1, r4
  
/*---------------------------- SDIO CMD Configuration ------------------------*/  
  /* Get the SDIO CMD value */
  tmpreg = SDIO->CMD;
  /* Clear CMDINDEX, WAITRESP, WAITINT, WAITPEND, CPSMEN bits */
  tmpreg &= CMD_CLEAR_MASK;
 800480e:	f022 0207 	bic.w	r2, r2, #7
  /* Set CMDINDEX bits according to SDIO_CmdIndex value */
  /* Set WAITRESP bits according to SDIO_Response value */
  /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
  /* Set CPSMEN bits according to SDIO_CPSM value */
  tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
           | SDIO_CmdInitStruct->SDIO_Wait | SDIO_CmdInitStruct->SDIO_CPSM;
 8004812:	4301      	orrs	r1, r0
  tmpreg &= CMD_CLEAR_MASK;
  /* Set CMDINDEX bits according to SDIO_CmdIndex value */
  /* Set WAITRESP bits according to SDIO_Response value */
  /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
  /* Set CPSMEN bits according to SDIO_CPSM value */
  tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
 8004814:	430a      	orrs	r2, r1
           | SDIO_CmdInitStruct->SDIO_Wait | SDIO_CmdInitStruct->SDIO_CPSM;
  
  /* Write to SDIO CMD */
  SDIO->CMD = tmpreg;
 8004816:	60da      	str	r2, [r3, #12]
}
 8004818:	bd10      	pop	{r4, pc}
 800481a:	bf00      	nop
 800481c:	40012c00 	.word	0x40012c00

08004820 <SDIO_CmdStructInit>:
  * @retval None
  */
void SDIO_CmdStructInit(SDIO_CmdInitTypeDef* SDIO_CmdInitStruct)
{
  /* SDIO_CmdInitStruct members default value */
  SDIO_CmdInitStruct->SDIO_Argument = 0x00;
 8004820:	2300      	movs	r3, #0
 8004822:	6003      	str	r3, [r0, #0]
  SDIO_CmdInitStruct->SDIO_CmdIndex = 0x00;
 8004824:	6043      	str	r3, [r0, #4]
  SDIO_CmdInitStruct->SDIO_Response = SDIO_Response_No;
 8004826:	6083      	str	r3, [r0, #8]
  SDIO_CmdInitStruct->SDIO_Wait = SDIO_Wait_No;
 8004828:	60c3      	str	r3, [r0, #12]
  SDIO_CmdInitStruct->SDIO_CPSM = SDIO_CPSM_Disable;
 800482a:	6103      	str	r3, [r0, #16]
}
 800482c:	4770      	bx	lr

0800482e <SDIO_GetCommandResponse>:
  * @param  None
  * @retval Returns the command index of the last command response received.
  */
uint8_t SDIO_GetCommandResponse(void)
{
  return (uint8_t)(SDIO->RESPCMD);
 800482e:	4b02      	ldr	r3, [pc, #8]	; (8004838 <SDIO_GetCommandResponse+0xa>)
 8004830:	6918      	ldr	r0, [r3, #16]
}
 8004832:	b2c0      	uxtb	r0, r0
 8004834:	4770      	bx	lr
 8004836:	bf00      	nop
 8004838:	40012c00 	.word	0x40012c00

0800483c <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4
  * @retval The Corresponding response register value.
  */
uint32_t SDIO_GetResponse(uint32_t SDIO_RESP)
{
 800483c:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 800483e:	2300      	movs	r3, #0
 8004840:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(SDIO_RESP));

  tmp = SDIO_RESP_ADDR + SDIO_RESP;
 8004842:	4b03      	ldr	r3, [pc, #12]	; (8004850 <SDIO_GetResponse+0x14>)
 8004844:	18c3      	adds	r3, r0, r3
 8004846:	9301      	str	r3, [sp, #4]
  
  return (*(__IO uint32_t *) tmp); 
 8004848:	9b01      	ldr	r3, [sp, #4]
 800484a:	6818      	ldr	r0, [r3, #0]
}
 800484c:	b002      	add	sp, #8
 800484e:	4770      	bx	lr
 8004850:	40012c14 	.word	0x40012c14

08004854 <SDIO_DataConfig>:
  assert_param(IS_SDIO_TRANSFER_MODE(SDIO_DataInitStruct->SDIO_TransferMode));
  assert_param(IS_SDIO_DPSM(SDIO_DataInitStruct->SDIO_DPSM));

/*---------------------------- SDIO DTIMER Configuration ---------------------*/
  /* Set the SDIO Data TimeOut value */
  SDIO->DTIMER = SDIO_DataInitStruct->SDIO_DataTimeOut;
 8004854:	6802      	ldr	r2, [r0, #0]
 8004856:	4b09      	ldr	r3, [pc, #36]	; (800487c <SDIO_DataConfig+0x28>)
  * @param  SDIO_DataInitStruct : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDIO command.
  * @retval None
  */
void SDIO_DataConfig(SDIO_DataInitTypeDef* SDIO_DataInitStruct)
{
 8004858:	b510      	push	{r4, lr}
  assert_param(IS_SDIO_TRANSFER_MODE(SDIO_DataInitStruct->SDIO_TransferMode));
  assert_param(IS_SDIO_DPSM(SDIO_DataInitStruct->SDIO_DPSM));

/*---------------------------- SDIO DTIMER Configuration ---------------------*/
  /* Set the SDIO Data TimeOut value */
  SDIO->DTIMER = SDIO_DataInitStruct->SDIO_DataTimeOut;
 800485a:	625a      	str	r2, [r3, #36]	; 0x24

/*---------------------------- SDIO DLEN Configuration -----------------------*/
  /* Set the SDIO DataLength value */
  SDIO->DLEN = SDIO_DataInitStruct->SDIO_DataLength;
 800485c:	6842      	ldr	r2, [r0, #4]
 800485e:	629a      	str	r2, [r3, #40]	; 0x28
  tmpreg &= DCTRL_CLEAR_MASK;
  /* Set DEN bit according to SDIO_DPSM value */
  /* Set DTMODE bit according to SDIO_TransferMode value */
  /* Set DTDIR bit according to SDIO_TransferDir value */
  /* Set DBCKSIZE bits according to SDIO_DataBlockSize value */
  tmpreg |= (uint32_t)SDIO_DataInitStruct->SDIO_DataBlockSize | SDIO_DataInitStruct->SDIO_TransferDir
 8004860:	68c4      	ldr	r4, [r0, #12]
 8004862:	6882      	ldr	r2, [r0, #8]
  /* Set the SDIO DataLength value */
  SDIO->DLEN = SDIO_DataInitStruct->SDIO_DataLength;

/*---------------------------- SDIO DCTRL Configuration ----------------------*/  
  /* Get the SDIO DCTRL value */
  tmpreg = SDIO->DCTRL;
 8004864:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmpreg &= DCTRL_CLEAR_MASK;
  /* Set DEN bit according to SDIO_DPSM value */
  /* Set DTMODE bit according to SDIO_TransferMode value */
  /* Set DTDIR bit according to SDIO_TransferDir value */
  /* Set DBCKSIZE bits according to SDIO_DataBlockSize value */
  tmpreg |= (uint32_t)SDIO_DataInitStruct->SDIO_DataBlockSize | SDIO_DataInitStruct->SDIO_TransferDir
 8004866:	4322      	orrs	r2, r4
           | SDIO_DataInitStruct->SDIO_TransferMode | SDIO_DataInitStruct->SDIO_DPSM;
 8004868:	6904      	ldr	r4, [r0, #16]
 800486a:	6940      	ldr	r0, [r0, #20]
 800486c:	4322      	orrs	r2, r4

/*---------------------------- SDIO DCTRL Configuration ----------------------*/  
  /* Get the SDIO DCTRL value */
  tmpreg = SDIO->DCTRL;
  /* Clear DEN, DTMODE, DTDIR and DBCKSIZE bits */
  tmpreg &= DCTRL_CLEAR_MASK;
 800486e:	f021 01f7 	bic.w	r1, r1, #247	; 0xf7
  /* Set DEN bit according to SDIO_DPSM value */
  /* Set DTMODE bit according to SDIO_TransferMode value */
  /* Set DTDIR bit according to SDIO_TransferDir value */
  /* Set DBCKSIZE bits according to SDIO_DataBlockSize value */
  tmpreg |= (uint32_t)SDIO_DataInitStruct->SDIO_DataBlockSize | SDIO_DataInitStruct->SDIO_TransferDir
           | SDIO_DataInitStruct->SDIO_TransferMode | SDIO_DataInitStruct->SDIO_DPSM;
 8004872:	4302      	orrs	r2, r0
  tmpreg &= DCTRL_CLEAR_MASK;
  /* Set DEN bit according to SDIO_DPSM value */
  /* Set DTMODE bit according to SDIO_TransferMode value */
  /* Set DTDIR bit according to SDIO_TransferDir value */
  /* Set DBCKSIZE bits according to SDIO_DataBlockSize value */
  tmpreg |= (uint32_t)SDIO_DataInitStruct->SDIO_DataBlockSize | SDIO_DataInitStruct->SDIO_TransferDir
 8004874:	430a      	orrs	r2, r1
           | SDIO_DataInitStruct->SDIO_TransferMode | SDIO_DataInitStruct->SDIO_DPSM;

  /* Write to SDIO DCTRL */
  SDIO->DCTRL = tmpreg;
 8004876:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004878:	bd10      	pop	{r4, pc}
 800487a:	bf00      	nop
 800487c:	40012c00 	.word	0x40012c00

08004880 <SDIO_DataStructInit>:
  * @retval None
  */
void SDIO_DataStructInit(SDIO_DataInitTypeDef* SDIO_DataInitStruct)
{
  /* SDIO_DataInitStruct members default value */
  SDIO_DataInitStruct->SDIO_DataTimeOut = 0xFFFFFFFF;
 8004880:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004884:	6003      	str	r3, [r0, #0]
  SDIO_DataInitStruct->SDIO_DataLength = 0x00;
 8004886:	2300      	movs	r3, #0
 8004888:	6043      	str	r3, [r0, #4]
  SDIO_DataInitStruct->SDIO_DataBlockSize = SDIO_DataBlockSize_1b;
 800488a:	6083      	str	r3, [r0, #8]
  SDIO_DataInitStruct->SDIO_TransferDir = SDIO_TransferDir_ToCard;
 800488c:	60c3      	str	r3, [r0, #12]
  SDIO_DataInitStruct->SDIO_TransferMode = SDIO_TransferMode_Block;  
 800488e:	6103      	str	r3, [r0, #16]
  SDIO_DataInitStruct->SDIO_DPSM = SDIO_DPSM_Disable;
 8004890:	6143      	str	r3, [r0, #20]
}
 8004892:	4770      	bx	lr

08004894 <SDIO_GetDataCounter>:
  * @param  None
  * @retval Number of remaining data bytes to be transferred
  */
uint32_t SDIO_GetDataCounter(void)
{ 
  return SDIO->DCOUNT;
 8004894:	4b01      	ldr	r3, [pc, #4]	; (800489c <SDIO_GetDataCounter+0x8>)
 8004896:	6b18      	ldr	r0, [r3, #48]	; 0x30
}
 8004898:	4770      	bx	lr
 800489a:	bf00      	nop
 800489c:	40012c00 	.word	0x40012c00

080048a0 <SDIO_ReadData>:
  * @param  None
  * @retval Data received
  */
uint32_t SDIO_ReadData(void)
{ 
  return SDIO->FIFO;
 80048a0:	4b01      	ldr	r3, [pc, #4]	; (80048a8 <SDIO_ReadData+0x8>)
 80048a2:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
}
 80048a6:	4770      	bx	lr
 80048a8:	40012c00 	.word	0x40012c00

080048ac <SDIO_WriteData>:
  * @param  Data: 32-bit data word to write.
  * @retval None
  */
void SDIO_WriteData(uint32_t Data)
{ 
  SDIO->FIFO = Data;
 80048ac:	4b01      	ldr	r3, [pc, #4]	; (80048b4 <SDIO_WriteData+0x8>)
 80048ae:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
}
 80048b2:	4770      	bx	lr
 80048b4:	40012c00 	.word	0x40012c00

080048b8 <SDIO_GetFIFOCount>:
  * @param  None
  * @retval Remaining number of words.
  */
uint32_t SDIO_GetFIFOCount(void)
{ 
  return SDIO->FIFOCNT;
 80048b8:	4b01      	ldr	r3, [pc, #4]	; (80048c0 <SDIO_GetFIFOCount+0x8>)
 80048ba:	6c98      	ldr	r0, [r3, #72]	; 0x48
}
 80048bc:	4770      	bx	lr
 80048be:	bf00      	nop
 80048c0:	40012c00 	.word	0x40012c00

080048c4 <SDIO_StartSDIOReadWait>:
void SDIO_StartSDIOReadWait(FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_RWSTART_BB = (uint32_t) NewState;
 80048c4:	4b01      	ldr	r3, [pc, #4]	; (80048cc <SDIO_StartSDIOReadWait+0x8>)
 80048c6:	6018      	str	r0, [r3, #0]
}
 80048c8:	4770      	bx	lr
 80048ca:	bf00      	nop
 80048cc:	422585a0 	.word	0x422585a0

080048d0 <SDIO_StopSDIOReadWait>:
void SDIO_StopSDIOReadWait(FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_RWSTOP_BB = (uint32_t) NewState;
 80048d0:	4b01      	ldr	r3, [pc, #4]	; (80048d8 <SDIO_StopSDIOReadWait+0x8>)
 80048d2:	6018      	str	r0, [r3, #0]
}
 80048d4:	4770      	bx	lr
 80048d6:	bf00      	nop
 80048d8:	422585a4 	.word	0x422585a4

080048dc <SDIO_SetSDIOReadWaitMode>:
void SDIO_SetSDIOReadWaitMode(uint32_t SDIO_ReadWaitMode)
{
  /* Check the parameters */
  assert_param(IS_SDIO_READWAIT_MODE(SDIO_ReadWaitMode));
  
  *(__IO uint32_t *) DCTRL_RWMOD_BB = SDIO_ReadWaitMode;
 80048dc:	4b01      	ldr	r3, [pc, #4]	; (80048e4 <SDIO_SetSDIOReadWaitMode+0x8>)
 80048de:	6018      	str	r0, [r3, #0]
}
 80048e0:	4770      	bx	lr
 80048e2:	bf00      	nop
 80048e4:	422585a8 	.word	0x422585a8

080048e8 <SDIO_SetSDIOOperation>:
void SDIO_SetSDIOOperation(FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_SDIOEN_BB = (uint32_t)NewState;
 80048e8:	4b01      	ldr	r3, [pc, #4]	; (80048f0 <SDIO_SetSDIOOperation+0x8>)
 80048ea:	6018      	str	r0, [r3, #0]
}
 80048ec:	4770      	bx	lr
 80048ee:	bf00      	nop
 80048f0:	422585ac 	.word	0x422585ac

080048f4 <SDIO_SendSDIOSuspendCmd>:
void SDIO_SendSDIOSuspendCmd(FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_SDIOSUSPEND_BB = (uint32_t)NewState;
 80048f4:	4b01      	ldr	r3, [pc, #4]	; (80048fc <SDIO_SendSDIOSuspendCmd+0x8>)
 80048f6:	6018      	str	r0, [r3, #0]
}
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	422581ac 	.word	0x422581ac

08004900 <SDIO_CommandCompletionCmd>:
void SDIO_CommandCompletionCmd(FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_ENCMDCOMPL_BB = (uint32_t)NewState;
 8004900:	4b01      	ldr	r3, [pc, #4]	; (8004908 <SDIO_CommandCompletionCmd+0x8>)
 8004902:	6018      	str	r0, [r3, #0]
}
 8004904:	4770      	bx	lr
 8004906:	bf00      	nop
 8004908:	422581b0 	.word	0x422581b0

0800490c <SDIO_CEATAITCmd>:
void SDIO_CEATAITCmd(FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_NIEN_BB = (uint32_t)((~((uint32_t)NewState)) & ((uint32_t)0x1));
 800490c:	f000 0001 	and.w	r0, r0, #1
 8004910:	4b02      	ldr	r3, [pc, #8]	; (800491c <SDIO_CEATAITCmd+0x10>)
 8004912:	f080 0001 	eor.w	r0, r0, #1
 8004916:	6018      	str	r0, [r3, #0]
}
 8004918:	4770      	bx	lr
 800491a:	bf00      	nop
 800491c:	422581b4 	.word	0x422581b4

08004920 <SDIO_SendCEATACmd>:
void SDIO_SendCEATACmd(FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_ATACMD_BB = (uint32_t)NewState;
 8004920:	4b01      	ldr	r3, [pc, #4]	; (8004928 <SDIO_SendCEATACmd+0x8>)
 8004922:	6018      	str	r0, [r3, #0]
}
 8004924:	4770      	bx	lr
 8004926:	bf00      	nop
 8004928:	422581b8 	.word	0x422581b8

0800492c <SDIO_DMACmd>:
void SDIO_DMACmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_DMAEN_BB = (uint32_t)NewState;
 800492c:	4b01      	ldr	r3, [pc, #4]	; (8004934 <SDIO_DMACmd+0x8>)
 800492e:	6018      	str	r0, [r3, #0]
}
 8004930:	4770      	bx	lr
 8004932:	bf00      	nop
 8004934:	4225858c 	.word	0x4225858c

08004938 <SDIO_ITConfig>:
  * @param  NewState: new state of the specified SDIO interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None 
  */
void SDIO_ITConfig(uint32_t SDIO_IT, FunctionalState NewState)
{
 8004938:	4b04      	ldr	r3, [pc, #16]	; (800494c <SDIO_ITConfig+0x14>)
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the SDIO interrupts */
    SDIO->MASK |= SDIO_IT;
 800493a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
{
  /* Check the parameters */
  assert_param(IS_SDIO_IT(SDIO_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800493c:	b109      	cbz	r1, 8004942 <SDIO_ITConfig+0xa>
  {
    /* Enable the SDIO interrupts */
    SDIO->MASK |= SDIO_IT;
 800493e:	4310      	orrs	r0, r2
 8004940:	e001      	b.n	8004946 <SDIO_ITConfig+0xe>
  }
  else
  {
    /* Disable the SDIO interrupts */
    SDIO->MASK &= ~SDIO_IT;
 8004942:	ea22 0000 	bic.w	r0, r2, r0
 8004946:	63d8      	str	r0, [r3, #60]	; 0x3c
 8004948:	4770      	bx	lr
 800494a:	bf00      	nop
 800494c:	40012c00 	.word	0x40012c00

08004950 <SDIO_GetFlagStatus>:
  FlagStatus bitstatus = RESET;
  
  /* Check the parameters */
  assert_param(IS_SDIO_FLAG(SDIO_FLAG));
  
  if ((SDIO->STA & SDIO_FLAG) != (uint32_t)RESET)
 8004950:	4b03      	ldr	r3, [pc, #12]	; (8004960 <SDIO_GetFlagStatus+0x10>)
 8004952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  {
    bitstatus = SET;
 8004954:	4218      	tst	r0, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8004956:	bf0c      	ite	eq
 8004958:	2000      	moveq	r0, #0
 800495a:	2001      	movne	r0, #1
 800495c:	4770      	bx	lr
 800495e:	bf00      	nop
 8004960:	40012c00 	.word	0x40012c00

08004964 <SDIO_ClearFlag>:
void SDIO_ClearFlag(uint32_t SDIO_FLAG)
{ 
  /* Check the parameters */
  assert_param(IS_SDIO_CLEAR_FLAG(SDIO_FLAG));
   
  SDIO->ICR = SDIO_FLAG;
 8004964:	4b01      	ldr	r3, [pc, #4]	; (800496c <SDIO_ClearFlag+0x8>)
 8004966:	6398      	str	r0, [r3, #56]	; 0x38
}
 8004968:	4770      	bx	lr
 800496a:	bf00      	nop
 800496c:	40012c00 	.word	0x40012c00

08004970 <SDIO_GetITStatus>:
{ 
  ITStatus bitstatus = RESET;
  
  /* Check the parameters */
  assert_param(IS_SDIO_GET_IT(SDIO_IT));
  if ((SDIO->STA & SDIO_IT) != (uint32_t)RESET)  
 8004970:	4b03      	ldr	r3, [pc, #12]	; (8004980 <SDIO_GetITStatus+0x10>)
 8004972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  {
    bitstatus = SET;
 8004974:	4218      	tst	r0, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8004976:	bf0c      	ite	eq
 8004978:	2000      	moveq	r0, #0
 800497a:	2001      	movne	r0, #1
 800497c:	4770      	bx	lr
 800497e:	bf00      	nop
 8004980:	40012c00 	.word	0x40012c00

08004984 <SDIO_ClearITPendingBit>:
void SDIO_ClearITPendingBit(uint32_t SDIO_IT)
{ 
  /* Check the parameters */
  assert_param(IS_SDIO_CLEAR_IT(SDIO_IT));
   
  SDIO->ICR = SDIO_IT;
 8004984:	4b01      	ldr	r3, [pc, #4]	; (800498c <SDIO_ClearITPendingBit+0x8>)
 8004986:	6398      	str	r0, [r3, #56]	; 0x38
}
 8004988:	4770      	bx	lr
 800498a:	bf00      	nop
 800498c:	40012c00 	.word	0x40012c00

08004990 <SPI_I2S_DeInit>:
  *         is managed by the I2S peripheral clock).
  *             
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 8004990:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 8004992:	4b15      	ldr	r3, [pc, #84]	; (80049e8 <SPI_I2S_DeInit+0x58>)
 8004994:	4298      	cmp	r0, r3
 8004996:	d10b      	bne.n	80049b0 <SPI_I2S_DeInit+0x20>
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 8004998:	2101      	movs	r1, #1
 800499a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800499e:	f7ff f8e5 	bl	8003b6c <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 80049a2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80049a6:	2100      	movs	r1, #0
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
    }
  }
}
 80049a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  if (SPIx == SPI1)
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 80049ac:	f7ff b8de 	b.w	8003b6c <RCC_APB2PeriphResetCmd>
  }
  else if (SPIx == SPI2)
 80049b0:	4b0e      	ldr	r3, [pc, #56]	; (80049ec <SPI_I2S_DeInit+0x5c>)
 80049b2:	4298      	cmp	r0, r3
 80049b4:	d107      	bne.n	80049c6 <SPI_I2S_DeInit+0x36>
  {
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 80049b6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80049ba:	2101      	movs	r1, #1
 80049bc:	f7ff f8ca 	bl	8003b54 <RCC_APB1PeriphResetCmd>
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 80049c0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80049c4:	e009      	b.n	80049da <SPI_I2S_DeInit+0x4a>
    }
  else
  {
    if (SPIx == SPI3)
 80049c6:	4b0a      	ldr	r3, [pc, #40]	; (80049f0 <SPI_I2S_DeInit+0x60>)
 80049c8:	4298      	cmp	r0, r3
 80049ca:	d10b      	bne.n	80049e4 <SPI_I2S_DeInit+0x54>
    {
      /* Enable SPI3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 80049cc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80049d0:	2101      	movs	r1, #1
 80049d2:	f7ff f8bf 	bl	8003b54 <RCC_APB1PeriphResetCmd>
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 80049d6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80049da:	2100      	movs	r1, #0
    }
  }
}
 80049dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if (SPIx == SPI3)
    {
      /* Enable SPI3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 80049e0:	f7ff b8b8 	b.w	8003b54 <RCC_APB1PeriphResetCmd>
 80049e4:	bd08      	pop	{r3, pc}
 80049e6:	bf00      	nop
 80049e8:	40013000 	.word	0x40013000
 80049ec:	40003800 	.word	0x40003800
 80049f0:	40003c00 	.word	0x40003c00

080049f4 <SPI_Init>:
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80049f4:	880b      	ldrh	r3, [r1, #0]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 80049f6:	8802      	ldrh	r2, [r0, #0]
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 80049f8:	b510      	push	{r4, lr}
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80049fa:	884c      	ldrh	r4, [r1, #2]
 80049fc:	4323      	orrs	r3, r4
 80049fe:	888c      	ldrh	r4, [r1, #4]
 8004a00:	4323      	orrs	r3, r4
 8004a02:	88cc      	ldrh	r4, [r1, #6]
 8004a04:	4323      	orrs	r3, r4
 8004a06:	890c      	ldrh	r4, [r1, #8]
 8004a08:	4323      	orrs	r3, r4
 8004a0a:	894c      	ldrh	r4, [r1, #10]
 8004a0c:	4323      	orrs	r3, r4
 8004a0e:	898c      	ldrh	r4, [r1, #12]
 8004a10:	4323      	orrs	r3, r4
 8004a12:	89cc      	ldrh	r4, [r1, #14]

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8004a14:	f402 5241 	and.w	r2, r2, #12352	; 0x3040
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8004a18:	4323      	orrs	r3, r4
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	b29b      	uxth	r3, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8004a1e:	8003      	strh	r3, [r0, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 8004a20:	8b83      	ldrh	r3, [r0, #28]
 8004a22:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a26:	041b      	lsls	r3, r3, #16
 8004a28:	0c1b      	lsrs	r3, r3, #16
 8004a2a:	8383      	strh	r3, [r0, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8004a2c:	8a0b      	ldrh	r3, [r1, #16]
 8004a2e:	8203      	strh	r3, [r0, #16]
}
 8004a30:	bd10      	pop	{r4, pc}

08004a32 <I2S_Init>:
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 8004a32:	8b83      	ldrh	r3, [r0, #28]
 8004a34:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004a38:	f023 030f 	bic.w	r3, r3, #15
 8004a3c:	041b      	lsls	r3, r3, #16
 8004a3e:	0c1b      	lsrs	r3, r3, #16
 8004a40:	8383      	strh	r3, [r0, #28]
  SPIx->I2SPR = 0x0002;
 8004a42:	2302      	movs	r3, #2
 8004a44:	8403      	strh	r3, [r0, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 8004a46:	688b      	ldr	r3, [r1, #8]
  *         to the value of the the source clock frequency (in Hz).
  *  
  * @retval None
  */
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
 8004a48:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
  SPIx->I2SPR = 0x0002;
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 8004a4a:	8b85      	ldrh	r5, [r0, #28]
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 8004a4c:	2b02      	cmp	r3, #2
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
  SPIx->I2SPR = 0x0002;
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 8004a4e:	b2ad      	uxth	r5, r5
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 8004a50:	d038      	beq.n	8004ac4 <I2S_Init+0x92>
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 8004a52:	4a29      	ldr	r2, [pc, #164]	; (8004af8 <I2S_Init+0xc6>)
  }
  /* If the requested audio frequency is not the default, compute the prescaler */
  else
  {
    /* Check the frame length (For the Prescaler computing) *******************/
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 8004a54:	888e      	ldrh	r6, [r1, #4]
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 8004a56:	6894      	ldr	r4, [r2, #8]
  {
    /* Check the frame length (For the Prescaler computing) *******************/
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
    {
      /* Packet length is 16 bits */
      packetlength = 1;
 8004a58:	2e00      	cmp	r6, #0
 8004a5a:	bf14      	ite	ne
 8004a5c:	2602      	movne	r6, #2
 8004a5e:	2601      	moveq	r6, #1
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 8004a60:	0224      	lsls	r4, r4, #8
 8004a62:	d503      	bpl.n	8004a6c <I2S_Init+0x3a>
    {
      RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
 8004a64:	6894      	ldr	r4, [r2, #8]
 8004a66:	f424 0400 	bic.w	r4, r4, #8388608	; 0x800000
 8004a6a:	6094      	str	r4, [r2, #8]
    }    
    
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 8004a6c:	f8d2 4084 	ldr.w	r4, [r2, #132]	; 0x84
                      (RCC_PLLI2SCFGR_PLLI2SN >> 6));
    
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
 8004a70:	f8d2 7084 	ldr.w	r7, [r2, #132]	; 0x84
                      (RCC_PLLI2SCFGR_PLLI2SR >> 28));
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
 8004a74:	6852      	ldr	r2, [r2, #4]
    
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 8004a76:	f8df c084 	ldr.w	ip, [pc, #132]	; 8004afc <I2S_Init+0xca>
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
                      (RCC_PLLI2SCFGR_PLLI2SR >> 28));
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
 8004a7a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 8004a7e:	fbbc f2f2 	udiv	r2, ip, r2
    {
      RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
    }    
    
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 8004a82:	f3c4 1488 	ubfx	r4, r4, #6, #9
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
    
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 8004a86:	4354      	muls	r4, r2
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
                      (RCC_PLLI2SCFGR_PLLI2SN >> 6));
    
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
 8004a88:	f3c7 7202 	ubfx	r2, r7, #28, #3
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
    
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 8004a8c:	fbb4 f4f2 	udiv	r4, r4, r2
  #endif /* I2S_EXTERNAL_CLOCK_VAL */
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 8004a90:	88ca      	ldrh	r2, [r1, #6]
 8004a92:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8004a96:	f04f 020a 	mov.w	r2, #10
 8004a9a:	d101      	bne.n	8004aa0 <I2S_Init+0x6e>
    {
      /* MCLK output is enabled */
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8004a9c:	0a24      	lsrs	r4, r4, #8
 8004a9e:	e002      	b.n	8004aa6 <I2S_Init+0x74>
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8004aa0:	0176      	lsls	r6, r6, #5
 8004aa2:	fbb4 f4f6 	udiv	r4, r4, r6
 8004aa6:	4362      	muls	r2, r4
 8004aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aac:	3305      	adds	r3, #5
    }
    
    /* Remove the flatting point */
    tmp = tmp / 10;  
 8004aae:	220a      	movs	r2, #10
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8004ab0:	b29b      	uxth	r3, r3
    }
    
    /* Remove the flatting point */
    tmp = tmp / 10;  
 8004ab2:	fbb3 f3f2 	udiv	r3, r3, r2
      
    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 8004ab6:	f003 0201 	and.w	r2, r3, #1
   
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
 8004aba:	0212      	lsls	r2, r2, #8
      
    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 8004abc:	f3c3 034f 	ubfx	r3, r3, #1, #16
   
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
 8004ac0:	b292      	uxth	r2, r2
 8004ac2:	e000      	b.n	8004ac6 <I2S_Init+0x94>
  tmpreg = SPIx->I2SCFGR;
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
  {
    i2sodd = (uint16_t)0;
 8004ac4:	2200      	movs	r2, #0
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 8004ac6:	1e9c      	subs	r4, r3, #2
 8004ac8:	b2a4      	uxth	r4, r4
  {
    /* Set the default values */
    i2sdiv = 2;
    i2sodd = 0;
 8004aca:	2cfe      	cmp	r4, #254	; 0xfe
 8004acc:	bf28      	it	cs
 8004ace:	2200      	movcs	r2, #0
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 8004ad0:	88cc      	ldrh	r4, [r1, #6]
  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
  {
    /* Set the default values */
    i2sdiv = 2;
    i2sodd = 0;
 8004ad2:	bf28      	it	cs
 8004ad4:	2302      	movcs	r3, #2
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	4323      	orrs	r3, r4
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	8403      	strh	r3, [r0, #32]
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8004ade:	880b      	ldrh	r3, [r1, #0]

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 8004ae0:	884a      	ldrh	r2, [r1, #2]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8004ae2:	432b      	orrs	r3, r5
 8004ae4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	888a      	ldrh	r2, [r1, #4]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	898a      	ldrh	r2, [r1, #12]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	b29b      	uxth	r3, r3
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  SPIx->I2SCFGR = tmpreg;
 8004af4:	8383      	strh	r3, [r0, #28]
}
 8004af6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004af8:	40023800 	.word	0x40023800
 8004afc:	007a1200 	.word	0x007a1200

08004b00 <SPI_StructInit>:
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8004b00:	2300      	movs	r3, #0
 8004b02:	8003      	strh	r3, [r0, #0]
  /* initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 8004b04:	8043      	strh	r3, [r0, #2]
  /* initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 8004b06:	8083      	strh	r3, [r0, #4]
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 8004b08:	80c3      	strh	r3, [r0, #6]
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 8004b0a:	8103      	strh	r3, [r0, #8]
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 8004b0c:	8143      	strh	r3, [r0, #10]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 8004b0e:	8183      	strh	r3, [r0, #12]
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 8004b10:	81c3      	strh	r3, [r0, #14]
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 8004b12:	2307      	movs	r3, #7
 8004b14:	8203      	strh	r3, [r0, #16]
}
 8004b16:	4770      	bx	lr

08004b18 <I2S_StructInit>:
  */
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
{
/*--------------- Reset I2S init structure parameters values -----------------*/
  /* Initialize the I2S_Mode member */
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 8004b18:	2300      	movs	r3, #0
  
  /* Initialize the I2S_MCLKOutput member */
  I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
  
  /* Initialize the I2S_AudioFreq member */
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 8004b1a:	2202      	movs	r2, #2
  */
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
{
/*--------------- Reset I2S init structure parameters values -----------------*/
  /* Initialize the I2S_Mode member */
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 8004b1c:	8003      	strh	r3, [r0, #0]
  
  /* Initialize the I2S_Standard member */
  I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
 8004b1e:	8043      	strh	r3, [r0, #2]
  
  /* Initialize the I2S_DataFormat member */
  I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
 8004b20:	8083      	strh	r3, [r0, #4]
  
  /* Initialize the I2S_MCLKOutput member */
  I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
 8004b22:	80c3      	strh	r3, [r0, #6]
  
  /* Initialize the I2S_AudioFreq member */
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 8004b24:	6082      	str	r2, [r0, #8]
  
  /* Initialize the I2S_CPOL member */
  I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
 8004b26:	8183      	strh	r3, [r0, #12]
}
 8004b28:	4770      	bx	lr

08004b2a <SPI_Cmd>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8004b2a:	8803      	ldrh	r3, [r0, #0]
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004b2c:	b119      	cbz	r1, 8004b36 <SPI_Cmd+0xc>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b34:	e003      	b.n	8004b3e <SPI_Cmd+0x14>
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 8004b36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b3a:	041b      	lsls	r3, r3, #16
 8004b3c:	0c1b      	lsrs	r3, r3, #16
 8004b3e:	8003      	strh	r3, [r0, #0]
 8004b40:	4770      	bx	lr

08004b42 <I2S_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 8004b42:	8b83      	ldrh	r3, [r0, #28]
{
  /* Check the parameters */
  assert_param(IS_SPI_23_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8004b44:	b119      	cbz	r1, 8004b4e <I2S_Cmd+0xc>
  {
    /* Enable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b4c:	e003      	b.n	8004b56 <I2S_Cmd+0x14>
  }
  else
  {
    /* Disable the selected SPI peripheral in I2S mode */
    SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
 8004b4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b52:	041b      	lsls	r3, r3, #16
 8004b54:	0c1b      	lsrs	r3, r3, #16
 8004b56:	8383      	strh	r3, [r0, #28]
 8004b58:	4770      	bx	lr

08004b5a <SPI_DataSizeConfig>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DATASIZE(SPI_DataSize));
  /* Clear DFF bit */
  SPIx->CR1 &= (uint16_t)~SPI_DataSize_16b;
 8004b5a:	8803      	ldrh	r3, [r0, #0]
 8004b5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b60:	041b      	lsls	r3, r3, #16
 8004b62:	0c1b      	lsrs	r3, r3, #16
 8004b64:	8003      	strh	r3, [r0, #0]
  /* Set new DFF bit value */
  SPIx->CR1 |= SPI_DataSize;
 8004b66:	8803      	ldrh	r3, [r0, #0]
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	430b      	orrs	r3, r1
 8004b6c:	8003      	strh	r3, [r0, #0]
}
 8004b6e:	4770      	bx	lr

08004b70 <SPI_BiDirectionalLineConfig>:
void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
 8004b70:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
  {
    /* Set the Tx only mode */
    SPIx->CR1 |= SPI_Direction_Tx;
 8004b74:	8803      	ldrh	r3, [r0, #0]
void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
 8004b76:	d103      	bne.n	8004b80 <SPI_BiDirectionalLineConfig+0x10>
  {
    /* Set the Tx only mode */
    SPIx->CR1 |= SPI_Direction_Tx;
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b7e:	e003      	b.n	8004b88 <SPI_BiDirectionalLineConfig+0x18>
  }
  else
  {
    /* Set the Rx only mode */
    SPIx->CR1 &= SPI_Direction_Rx;
 8004b80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b84:	041b      	lsls	r3, r3, #16
 8004b86:	0c1b      	lsrs	r3, r3, #16
 8004b88:	8003      	strh	r3, [r0, #0]
 8004b8a:	4770      	bx	lr

08004b8c <SPI_NSSInternalSoftwareConfig>:
void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 8004b8c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8004b90:	4299      	cmp	r1, r3
  {
    /* Set NSS pin internally by software */
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 8004b92:	8803      	ldrh	r3, [r0, #0]
void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 8004b94:	d003      	beq.n	8004b9e <SPI_NSSInternalSoftwareConfig+0x12>
  {
    /* Set NSS pin internally by software */
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b9c:	e003      	b.n	8004ba6 <SPI_NSSInternalSoftwareConfig+0x1a>
  }
  else
  {
    /* Reset NSS pin internally by software */
    SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 8004b9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ba2:	041b      	lsls	r3, r3, #16
 8004ba4:	0c1b      	lsrs	r3, r3, #16
 8004ba6:	8003      	strh	r3, [r0, #0]
 8004ba8:	4770      	bx	lr

08004baa <SPI_SSOutputCmd>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
 8004baa:	8883      	ldrh	r3, [r0, #4]
void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004bac:	b119      	cbz	r1, 8004bb6 <SPI_SSOutputCmd+0xc>
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	f043 0304 	orr.w	r3, r3, #4
 8004bb4:	e003      	b.n	8004bbe <SPI_SSOutputCmd+0x14>
  }
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_SSOE);
 8004bb6:	f023 0304 	bic.w	r3, r3, #4
 8004bba:	041b      	lsls	r3, r3, #16
 8004bbc:	0c1b      	lsrs	r3, r3, #16
 8004bbe:	8083      	strh	r3, [r0, #4]
 8004bc0:	4770      	bx	lr

08004bc2 <SPI_TIModeCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TI mode for the selected SPI peripheral */
    SPIx->CR2 |= SPI_CR2_FRF;
 8004bc2:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004bc4:	b119      	cbz	r1, 8004bce <SPI_TIModeCmd+0xc>
  {
    /* Enable the TI mode for the selected SPI peripheral */
    SPIx->CR2 |= SPI_CR2_FRF;
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	f043 0310 	orr.w	r3, r3, #16
 8004bcc:	e003      	b.n	8004bd6 <SPI_TIModeCmd+0x14>
  }
  else
  {
    /* Disable the TI mode for the selected SPI peripheral */
    SPIx->CR2 &= (uint16_t)~SPI_CR2_FRF;
 8004bce:	f023 0310 	bic.w	r3, r3, #16
 8004bd2:	041b      	lsls	r3, r3, #16
 8004bd4:	0c1b      	lsrs	r3, r3, #16
 8004bd6:	8083      	strh	r3, [r0, #4]
 8004bd8:	4770      	bx	lr

08004bda <I2S_FullDuplexConfig>:
  assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 8004bda:	8b83      	ldrh	r3, [r0, #28]
 8004bdc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004be0:	f023 030f 	bic.w	r3, r3, #15
 8004be4:	041b      	lsls	r3, r3, #16
 8004be6:	0c1b      	lsrs	r3, r3, #16
 8004be8:	8383      	strh	r3, [r0, #28]
  I2Sxext->I2SPR = 0x0002;
 8004bea:	2302      	movs	r3, #2
 8004bec:	8403      	strh	r3, [r0, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 8004bee:	880b      	ldrh	r3, [r1, #0]
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
  I2Sxext->I2SPR = 0x0002;
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
 8004bf0:	8b82      	ldrh	r2, [r0, #28]
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 8004bf2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  * @note   The I2S full duplex extension can be configured in slave mode only.    
  *  
  * @retval None
  */
void I2S_FullDuplexConfig(SPI_TypeDef* I2Sxext, I2S_InitTypeDef* I2S_InitStruct)
{
 8004bf6:	b510      	push	{r4, lr}
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
  I2Sxext->I2SPR = 0x0002;
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
 8004bf8:	b292      	uxth	r2, r2
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 8004bfa:	d005      	beq.n	8004c08 <I2S_FullDuplexConfig+0x2e>
  {
    tmp = I2S_Mode_SlaveRx;
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	bf0c      	ite	eq
 8004c00:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8004c04:	2300      	movne	r3, #0
 8004c06:	e001      	b.n	8004c0c <I2S_FullDuplexConfig+0x32>
 8004c08:	f44f 7380 	mov.w	r3, #256	; 0x100
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8004c0c:	884c      	ldrh	r4, [r1, #2]
 8004c0e:	4322      	orrs	r2, r4
    }
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8004c10:	888c      	ldrh	r4, [r1, #4]
 8004c12:	8989      	ldrh	r1, [r1, #12]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8004c14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    }
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8004c18:	4322      	orrs	r2, r4
 8004c1a:	430a      	orrs	r2, r1
 8004c1c:	b292      	uxth	r2, r2
 8004c1e:	4313      	orrs	r3, r2
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  I2Sxext->I2SCFGR = tmpreg;
 8004c20:	8383      	strh	r3, [r0, #28]
}
 8004c22:	bd10      	pop	{r4, pc}

08004c24 <SPI_I2S_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 8004c24:	8980      	ldrh	r0, [r0, #12]
}
 8004c26:	b280      	uxth	r0, r0
 8004c28:	4770      	bx	lr

08004c2a <SPI_I2S_SendData>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8004c2a:	8181      	strh	r1, [r0, #12]
}
 8004c2c:	4770      	bx	lr

08004c2e <SPI_CalculateCRC>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI CRC calculation */
    SPIx->CR1 |= SPI_CR1_CRCEN;
 8004c2e:	8803      	ldrh	r3, [r0, #0]
void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004c30:	b119      	cbz	r1, 8004c3a <SPI_CalculateCRC+0xc>
  {
    /* Enable the selected SPI CRC calculation */
    SPIx->CR1 |= SPI_CR1_CRCEN;
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004c38:	e003      	b.n	8004c42 <SPI_CalculateCRC+0x14>
  }
  else
  {
    /* Disable the selected SPI CRC calculation */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCEN);
 8004c3a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c3e:	041b      	lsls	r3, r3, #16
 8004c40:	0c1b      	lsrs	r3, r3, #16
 8004c42:	8003      	strh	r3, [r0, #0]
 8004c44:	4770      	bx	lr

08004c46 <SPI_TransmitCRC>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Enable the selected SPI CRC transmission */
  SPIx->CR1 |= SPI_CR1_CRCNEXT;
 8004c46:	8803      	ldrh	r3, [r0, #0]
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004c4e:	8003      	strh	r3, [r0, #0]
}
 8004c50:	4770      	bx	lr

08004c52 <SPI_GetCRC>:
{
  uint16_t crcreg = 0;
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_CRC(SPI_CRC));
  if (SPI_CRC != SPI_CRC_Rx)
 8004c52:	2901      	cmp	r1, #1
 8004c54:	d002      	beq.n	8004c5c <SPI_GetCRC+0xa>
  {
    /* Get the Tx CRC register */
    crcreg = SPIx->TXCRCR;
 8004c56:	8b00      	ldrh	r0, [r0, #24]
 8004c58:	b280      	uxth	r0, r0
 8004c5a:	4770      	bx	lr
  }
  else
  {
    /* Get the Rx CRC register */
    crcreg = SPIx->RXCRCR;
 8004c5c:	8a80      	ldrh	r0, [r0, #20]
 8004c5e:	b280      	uxth	r0, r0
  }
  /* Return the selected CRC register */
  return crcreg;
}
 8004c60:	4770      	bx	lr

08004c62 <SPI_GetCRCPolynomial>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the CRC polynomial register */
  return SPIx->CRCPR;
 8004c62:	8a00      	ldrh	r0, [r0, #16]
}
 8004c64:	b280      	uxth	r0, r0
 8004c66:	4770      	bx	lr

08004c68 <SPI_I2S_DMACmd>:
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 8004c68:	8883      	ldrh	r3, [r0, #4]
 8004c6a:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
 8004c6c:	b10a      	cbz	r2, 8004c72 <SPI_I2S_DMACmd+0xa>
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 8004c6e:	4319      	orrs	r1, r3
 8004c70:	e001      	b.n	8004c76 <SPI_I2S_DMACmd+0xe>
  }
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 8004c72:	ea23 0101 	bic.w	r1, r3, r1
 8004c76:	8081      	strh	r1, [r0, #4]
 8004c78:	4770      	bx	lr

08004c7a <SPI_I2S_ITConfig>:

  /* Get the SPI IT index */
  itpos = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 8004c7a:	0909      	lsrs	r1, r1, #4
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	408b      	lsls	r3, r1
 8004c80:	b29b      	uxth	r3, r3

  if (NewState != DISABLE)
 8004c82:	b11a      	cbz	r2, 8004c8c <SPI_I2S_ITConfig+0x12>
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 8004c84:	8882      	ldrh	r2, [r0, #4]
 8004c86:	b292      	uxth	r2, r2
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	e003      	b.n	8004c94 <SPI_I2S_ITConfig+0x1a>
  }
  else
  {
    /* Disable the selected SPI interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
 8004c8c:	8882      	ldrh	r2, [r0, #4]
 8004c8e:	b292      	uxth	r2, r2
 8004c90:	ea22 0303 	bic.w	r3, r2, r3
 8004c94:	8083      	strh	r3, [r0, #4]
 8004c96:	4770      	bx	lr

08004c98 <SPI_I2S_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8004c98:	8903      	ldrh	r3, [r0, #8]
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8004c9a:	4219      	tst	r1, r3
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
}
 8004c9c:	bf0c      	ite	eq
 8004c9e:	2000      	moveq	r0, #0
 8004ca0:	2001      	movne	r0, #1
 8004ca2:	4770      	bx	lr

08004ca4 <SPI_I2S_ClearFlag>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));
    
  /* Clear the selected SPI CRC Error (CRCERR) flag */
  SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
 8004ca4:	43c9      	mvns	r1, r1
 8004ca6:	b289      	uxth	r1, r1
 8004ca8:	8101      	strh	r1, [r0, #8]
}
 8004caa:	4770      	bx	lr

08004cac <SPI_I2S_GetITStatus>:
  *            @arg I2S_IT_UDR: Underrun interrupt.  
  *            @arg SPI_I2S_IT_TIFRFE: Format Error interrupt.  
  * @retval The new state of SPI_I2S_IT (SET or RESET).
  */
ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
{
 8004cac:	b510      	push	{r4, lr}

  /* Set the IT mask */
  itmask = 0x01 << itmask;

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 8004cae:	8884      	ldrh	r4, [r0, #4]

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8004cb0:	8900      	ldrh	r0, [r0, #8]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));

  /* Get the SPI_I2S_IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	f001 020f 	and.w	r2, r1, #15

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8004cb8:	b280      	uxth	r0, r0
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));

  /* Get the SPI_I2S_IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 8004cba:	fa13 f202 	lsls.w	r2, r3, r2

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8004cbe:	4010      	ands	r0, r2

  /* Set the IT mask */
  itmask = 0x01 << itmask;

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 8004cc0:	b2a4      	uxth	r4, r4

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8004cc2:	d005      	beq.n	8004cd0 <SPI_I2S_GetITStatus+0x24>

  /* Get the SPI_I2S_IT IT mask */
  itmask = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = 0x01 << itmask;
 8004cc4:	0909      	lsrs	r1, r1, #4
 8004cc6:	408b      	lsls	r3, r1
  *            @arg SPI_IT_CRCERR: CRC Error interrupt.
  *            @arg I2S_IT_UDR: Underrun interrupt.  
  *            @arg SPI_I2S_IT_TIFRFE: Format Error interrupt.  
  * @retval The new state of SPI_I2S_IT (SET or RESET).
  */
ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
 8004cc8:	421c      	tst	r4, r3

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
  {
    /* SPI_I2S_IT is set */
    bitstatus = SET;
 8004cca:	bf0c      	ite	eq
 8004ccc:	2000      	moveq	r0, #0
 8004cce:	2001      	movne	r0, #1
    /* SPI_I2S_IT is reset */
    bitstatus = RESET;
  }
  /* Return the SPI_I2S_IT status */
  return bitstatus;
}
 8004cd0:	bd10      	pop	{r4, pc}

08004cd2 <SPI_I2S_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_IT(SPI_I2S_IT));

  /* Get the SPI_I2S IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 8004cd2:	f001 010f 	and.w	r1, r1, #15
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	408b      	lsls	r3, r1

  /* Clear the selected SPI CRC Error (CRCERR) interrupt pending bit */
  SPIx->SR = (uint16_t)~itpos;
 8004cda:	43db      	mvns	r3, r3
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	8103      	strh	r3, [r0, #8]
}
 8004ce0:	4770      	bx	lr
 8004ce2:	bf00      	nop

08004ce4 <SYSCFG_DeInit>:
  *   registers to their default reset values.
  * @param  None
  * @retval None
  */
void SYSCFG_DeInit(void)
{
 8004ce4:	b508      	push	{r3, lr}
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8004ce6:	2101      	movs	r1, #1
 8004ce8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004cec:	f7fe ff3e 	bl	8003b6c <RCC_APB2PeriphResetCmd>
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, DISABLE);
 8004cf0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004cf4:	2100      	movs	r1, #0
}
 8004cf6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  * @retval None
  */
void SYSCFG_DeInit(void)
{
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, ENABLE);
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, DISABLE);
 8004cfa:	f7fe bf37 	b.w	8003b6c <RCC_APB2PeriphResetCmd>

08004cfe <SYSCFG_MemoryRemapConfig>:
void SYSCFG_MemoryRemapConfig(uint8_t SYSCFG_MemoryRemap)
{
  /* Check the parameters */
  assert_param(IS_SYSCFG_MEMORY_REMAP_CONFING(SYSCFG_MemoryRemap));

  SYSCFG->MEMRMP = SYSCFG_MemoryRemap;
 8004cfe:	4b01      	ldr	r3, [pc, #4]	; (8004d04 <SYSCFG_MemoryRemapConfig+0x6>)
 8004d00:	6018      	str	r0, [r3, #0]
}
 8004d02:	4770      	bx	lr
 8004d04:	40013800 	.word	0x40013800

08004d08 <SYSCFG_EXTILineConfig>:

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8004d08:	f001 0203 	and.w	r2, r1, #3
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8004d0c:	0889      	lsrs	r1, r1, #2
 8004d0e:	4b0a      	ldr	r3, [pc, #40]	; (8004d38 <SYSCFG_EXTILineConfig+0x30>)
 8004d10:	3102      	adds	r1, #2
  *           This parameter can be EXTI_PinSourcex where x can be (0..15, except
  *           for EXTI_PortSourceGPIOI x can be (0..11).
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 8004d12:	b530      	push	{r4, r5, lr}

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8004d14:	0092      	lsls	r2, r2, #2
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8004d16:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8004d1a:	240f      	movs	r4, #15
 8004d1c:	4094      	lsls	r4, r2
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8004d1e:	ea25 0404 	bic.w	r4, r5, r4
 8004d22:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8004d26:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
 8004d2a:	fa10 f202 	lsls.w	r2, r0, r2
 8004d2e:	4314      	orrs	r4, r2
 8004d30:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
}
 8004d34:	bd30      	pop	{r4, r5, pc}
 8004d36:	bf00      	nop
 8004d38:	40013800 	.word	0x40013800

08004d3c <SYSCFG_ETH_MediaInterfaceConfig>:
  */
void SYSCFG_ETH_MediaInterfaceConfig(uint32_t SYSCFG_ETH_MediaInterface) 
{ 
  assert_param(IS_SYSCFG_ETH_MEDIA_INTERFACE(SYSCFG_ETH_MediaInterface)); 
  /* Configure MII_RMII selection bit */ 
  *(__IO uint32_t *) PMC_MII_RMII_SEL_BB = SYSCFG_ETH_MediaInterface; 
 8004d3c:	4b01      	ldr	r3, [pc, #4]	; (8004d44 <SYSCFG_ETH_MediaInterfaceConfig+0x8>)
 8004d3e:	6018      	str	r0, [r3, #0]
}
 8004d40:	4770      	bx	lr
 8004d42:	bf00      	nop
 8004d44:	422700dc 	.word	0x422700dc

08004d48 <SYSCFG_CompensationCellCmd>:
void SYSCFG_CompensationCellCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CMPCR_CMP_PD_BB = (uint32_t)NewState;
 8004d48:	4b01      	ldr	r3, [pc, #4]	; (8004d50 <SYSCFG_CompensationCellCmd+0x8>)
 8004d4a:	6018      	str	r0, [r3, #0]
}
 8004d4c:	4770      	bx	lr
 8004d4e:	bf00      	nop
 8004d50:	42270400 	.word	0x42270400

08004d54 <SYSCFG_GetCompensationCellStatus>:
  */
FlagStatus SYSCFG_GetCompensationCellStatus(void)
{
  FlagStatus bitstatus = RESET;
    
  if ((SYSCFG->CMPCR & SYSCFG_CMPCR_READY ) != (uint32_t)RESET)
 8004d54:	4b02      	ldr	r3, [pc, #8]	; (8004d60 <SYSCFG_GetCompensationCellStatus+0xc>)
 8004d56:	6a18      	ldr	r0, [r3, #32]
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8004d58:	f3c0 2000 	ubfx	r0, r0, #8, #1
 8004d5c:	4770      	bx	lr
 8004d5e:	bf00      	nop
 8004d60:	40013800 	.word	0x40013800

08004d64 <TI1_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8004d64:	b530      	push	{r4, r5, lr}
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8004d66:	8c04      	ldrh	r4, [r0, #32]
 8004d68:	f024 0401 	bic.w	r4, r4, #1
 8004d6c:	0424      	lsls	r4, r4, #16
 8004d6e:	0c24      	lsrs	r4, r4, #16
 8004d70:	8404      	strh	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d72:	8b05      	ldrh	r5, [r0, #24]
  tmpccer = TIMx->CCER;
 8004d74:	8c04      	ldrh	r4, [r0, #32]
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;
 8004d76:	b2ad      	uxth	r5, r5
  tmpccer = TIMx->CCER;
 8004d78:	b2a4      	uxth	r4, r4

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 8004d7a:	f025 05f3 	bic.w	r5, r5, #243	; 0xf3
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8004d7e:	4315      	orrs	r5, r2

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d80:	f024 040a 	bic.w	r4, r4, #10
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8004d84:	ea45 1503 	orr.w	r5, r5, r3, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8004d88:	f044 0401 	orr.w	r4, r4, #1
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8004d8c:	b2ad      	uxth	r5, r5

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8004d8e:	430c      	orrs	r4, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d90:	8305      	strh	r5, [r0, #24]
  TIMx->CCER = tmpccer;
 8004d92:	8404      	strh	r4, [r0, #32]
}
 8004d94:	bd30      	pop	{r4, r5, pc}

08004d96 <TI2_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8004d96:	b530      	push	{r4, r5, lr}
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8004d98:	8c04      	ldrh	r4, [r0, #32]
 8004d9a:	f024 0410 	bic.w	r4, r4, #16
 8004d9e:	0424      	lsls	r4, r4, #16
 8004da0:	0c24      	lsrs	r4, r4, #16
 8004da2:	8404      	strh	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004da4:	8b04      	ldrh	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8004da6:	8c05      	ldrh	r5, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8004da8:	f424 7440 	bic.w	r4, r4, #768	; 0x300
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
 8004dac:	b2ad      	uxth	r5, r5
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8004dae:	0524      	lsls	r4, r4, #20
 8004db0:	0d24      	lsrs	r4, r4, #20
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004db2:	f025 05a0 	bic.w	r5, r5, #160	; 0xa0
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8004db6:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8004dba:	f045 0510 	orr.w	r5, r5, #16
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8004dbe:	ea44 3403 	orr.w	r4, r4, r3, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8004dc2:	ea45 1501 	orr.w	r5, r5, r1, lsl #4
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8004dc6:	b2a4      	uxth	r4, r4

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8004dc8:	b2ad      	uxth	r5, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004dca:	8304      	strh	r4, [r0, #24]
  TIMx->CCER = tmpccer;
 8004dcc:	8405      	strh	r5, [r0, #32]
}
 8004dce:	bd30      	pop	{r4, r5, pc}

08004dd0 <TIM_DeInit>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval None

  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 8004dd0:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
 8004dd2:	4b47      	ldr	r3, [pc, #284]	; (8004ef0 <TIM_DeInit+0x120>)
 8004dd4:	4298      	cmp	r0, r3
 8004dd6:	d105      	bne.n	8004de4 <TIM_DeInit+0x14>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 8004dd8:	2001      	movs	r0, #1
 8004dda:	4601      	mov	r1, r0
 8004ddc:	f7fe fec6 	bl	8003b6c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 8004de0:	2001      	movs	r0, #1
 8004de2:	e03d      	b.n	8004e60 <TIM_DeInit+0x90>
  } 
  else if (TIMx == TIM2) 
 8004de4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004de8:	d105      	bne.n	8004df6 <TIM_DeInit+0x26>
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 8004dea:	2001      	movs	r0, #1
 8004dec:	4601      	mov	r1, r0
 8004dee:	f7fe feb1 	bl	8003b54 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 8004df2:	2001      	movs	r0, #1
 8004df4:	e076      	b.n	8004ee4 <TIM_DeInit+0x114>
  }  
  else if (TIMx == TIM3)
 8004df6:	4b3f      	ldr	r3, [pc, #252]	; (8004ef4 <TIM_DeInit+0x124>)
 8004df8:	4298      	cmp	r0, r3
 8004dfa:	d105      	bne.n	8004e08 <TIM_DeInit+0x38>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 8004dfc:	2002      	movs	r0, #2
 8004dfe:	2101      	movs	r1, #1
 8004e00:	f7fe fea8 	bl	8003b54 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 8004e04:	2002      	movs	r0, #2
 8004e06:	e06d      	b.n	8004ee4 <TIM_DeInit+0x114>
  }  
  else if (TIMx == TIM4)
 8004e08:	4b3b      	ldr	r3, [pc, #236]	; (8004ef8 <TIM_DeInit+0x128>)
 8004e0a:	4298      	cmp	r0, r3
 8004e0c:	d105      	bne.n	8004e1a <TIM_DeInit+0x4a>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 8004e0e:	2004      	movs	r0, #4
 8004e10:	2101      	movs	r1, #1
 8004e12:	f7fe fe9f 	bl	8003b54 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 8004e16:	2004      	movs	r0, #4
 8004e18:	e064      	b.n	8004ee4 <TIM_DeInit+0x114>
  }  
  else if (TIMx == TIM5)
 8004e1a:	4b38      	ldr	r3, [pc, #224]	; (8004efc <TIM_DeInit+0x12c>)
 8004e1c:	4298      	cmp	r0, r3
 8004e1e:	d105      	bne.n	8004e2c <TIM_DeInit+0x5c>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 8004e20:	2008      	movs	r0, #8
 8004e22:	2101      	movs	r1, #1
 8004e24:	f7fe fe96 	bl	8003b54 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 8004e28:	2008      	movs	r0, #8
 8004e2a:	e05b      	b.n	8004ee4 <TIM_DeInit+0x114>
  }  
  else if (TIMx == TIM6)  
 8004e2c:	4b34      	ldr	r3, [pc, #208]	; (8004f00 <TIM_DeInit+0x130>)
 8004e2e:	4298      	cmp	r0, r3
 8004e30:	d105      	bne.n	8004e3e <TIM_DeInit+0x6e>
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 8004e32:	2010      	movs	r0, #16
 8004e34:	2101      	movs	r1, #1
 8004e36:	f7fe fe8d 	bl	8003b54 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 8004e3a:	2010      	movs	r0, #16
 8004e3c:	e052      	b.n	8004ee4 <TIM_DeInit+0x114>
  }  
  else if (TIMx == TIM7)
 8004e3e:	4b31      	ldr	r3, [pc, #196]	; (8004f04 <TIM_DeInit+0x134>)
 8004e40:	4298      	cmp	r0, r3
 8004e42:	d105      	bne.n	8004e50 <TIM_DeInit+0x80>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 8004e44:	2020      	movs	r0, #32
 8004e46:	2101      	movs	r1, #1
 8004e48:	f7fe fe84 	bl	8003b54 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 8004e4c:	2020      	movs	r0, #32
 8004e4e:	e049      	b.n	8004ee4 <TIM_DeInit+0x114>
  }  
  else if (TIMx == TIM8)
 8004e50:	4b2d      	ldr	r3, [pc, #180]	; (8004f08 <TIM_DeInit+0x138>)
 8004e52:	4298      	cmp	r0, r3
 8004e54:	d109      	bne.n	8004e6a <TIM_DeInit+0x9a>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 8004e56:	2002      	movs	r0, #2
 8004e58:	2101      	movs	r1, #1
 8004e5a:	f7fe fe87 	bl	8003b6c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 8004e5e:	2002      	movs	r0, #2
 8004e60:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8004e62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
  }  
  else if (TIMx == TIM8)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 8004e66:	f7fe be81 	b.w	8003b6c <RCC_APB2PeriphResetCmd>
  }  
  else if (TIMx == TIM9)
 8004e6a:	4b28      	ldr	r3, [pc, #160]	; (8004f0c <TIM_DeInit+0x13c>)
 8004e6c:	4298      	cmp	r0, r3
 8004e6e:	d107      	bne.n	8004e80 <TIM_DeInit+0xb0>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
 8004e70:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8004e74:	2101      	movs	r1, #1
 8004e76:	f7fe fe79 	bl	8003b6c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 8004e7a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8004e7e:	e7ef      	b.n	8004e60 <TIM_DeInit+0x90>
   }  
  else if (TIMx == TIM10)
 8004e80:	4b23      	ldr	r3, [pc, #140]	; (8004f10 <TIM_DeInit+0x140>)
 8004e82:	4298      	cmp	r0, r3
 8004e84:	d107      	bne.n	8004e96 <TIM_DeInit+0xc6>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
 8004e86:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8004e8a:	2101      	movs	r1, #1
 8004e8c:	f7fe fe6e 	bl	8003b6c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 8004e90:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8004e94:	e7e4      	b.n	8004e60 <TIM_DeInit+0x90>
  }  
  else if (TIMx == TIM11) 
 8004e96:	4b1f      	ldr	r3, [pc, #124]	; (8004f14 <TIM_DeInit+0x144>)
 8004e98:	4298      	cmp	r0, r3
 8004e9a:	d107      	bne.n	8004eac <TIM_DeInit+0xdc>
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
 8004e9c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8004ea0:	2101      	movs	r1, #1
 8004ea2:	f7fe fe63 	bl	8003b6c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 8004ea6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8004eaa:	e7d9      	b.n	8004e60 <TIM_DeInit+0x90>
  }  
  else if (TIMx == TIM12)
 8004eac:	4b1a      	ldr	r3, [pc, #104]	; (8004f18 <TIM_DeInit+0x148>)
 8004eae:	4298      	cmp	r0, r3
 8004eb0:	d105      	bne.n	8004ebe <TIM_DeInit+0xee>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
 8004eb2:	2040      	movs	r0, #64	; 0x40
 8004eb4:	2101      	movs	r1, #1
 8004eb6:	f7fe fe4d 	bl	8003b54 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 8004eba:	2040      	movs	r0, #64	; 0x40
 8004ebc:	e012      	b.n	8004ee4 <TIM_DeInit+0x114>
  }  
  else if (TIMx == TIM13) 
 8004ebe:	4b17      	ldr	r3, [pc, #92]	; (8004f1c <TIM_DeInit+0x14c>)
 8004ec0:	4298      	cmp	r0, r3
 8004ec2:	d105      	bne.n	8004ed0 <TIM_DeInit+0x100>
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
 8004ec4:	2080      	movs	r0, #128	; 0x80
 8004ec6:	2101      	movs	r1, #1
 8004ec8:	f7fe fe44 	bl	8003b54 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 8004ecc:	2080      	movs	r0, #128	; 0x80
 8004ece:	e009      	b.n	8004ee4 <TIM_DeInit+0x114>
  }  
  else
  { 
    if (TIMx == TIM14) 
 8004ed0:	4b13      	ldr	r3, [pc, #76]	; (8004f20 <TIM_DeInit+0x150>)
 8004ed2:	4298      	cmp	r0, r3
 8004ed4:	d10b      	bne.n	8004eee <TIM_DeInit+0x11e>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 8004ed6:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004eda:	2101      	movs	r1, #1
 8004edc:	f7fe fe3a 	bl	8003b54 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 8004ee0:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004ee4:	2100      	movs	r1, #0
    }   
  }
}
 8004ee6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  { 
    if (TIMx == TIM14) 
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 8004eea:	f7fe be33 	b.w	8003b54 <RCC_APB1PeriphResetCmd>
 8004eee:	bd08      	pop	{r3, pc}
 8004ef0:	40010000 	.word	0x40010000
 8004ef4:	40000400 	.word	0x40000400
 8004ef8:	40000800 	.word	0x40000800
 8004efc:	40000c00 	.word	0x40000c00
 8004f00:	40001000 	.word	0x40001000
 8004f04:	40001400 	.word	0x40001400
 8004f08:	40010400 	.word	0x40010400
 8004f0c:	40014000 	.word	0x40014000
 8004f10:	40014400 	.word	0x40014400
 8004f14:	40014800 	.word	0x40014800
 8004f18:	40001800 	.word	0x40001800
 8004f1c:	40001c00 	.word	0x40001c00
 8004f20:	40002000 	.word	0x40002000

08004f24 <TIM_TimeBaseInit>:
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8004f24:	4a1c      	ldr	r2, [pc, #112]	; (8004f98 <TIM_TimeBaseInit+0x74>)
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8004f26:	8803      	ldrh	r3, [r0, #0]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8004f28:	4290      	cmp	r0, r2
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8004f2a:	b29b      	uxth	r3, r3

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8004f2c:	d012      	beq.n	8004f54 <TIM_TimeBaseInit+0x30>
 8004f2e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004f32:	4290      	cmp	r0, r2
 8004f34:	d00e      	beq.n	8004f54 <TIM_TimeBaseInit+0x30>
 8004f36:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004f3a:	d00b      	beq.n	8004f54 <TIM_TimeBaseInit+0x30>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8004f3c:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 8004f40:	4290      	cmp	r0, r2
 8004f42:	d007      	beq.n	8004f54 <TIM_TimeBaseInit+0x30>
 8004f44:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004f48:	4290      	cmp	r0, r2
 8004f4a:	d003      	beq.n	8004f54 <TIM_TimeBaseInit+0x30>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8004f4c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004f50:	4290      	cmp	r0, r2
 8004f52:	d103      	bne.n	8004f5c <TIM_TimeBaseInit+0x38>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8004f54:	884a      	ldrh	r2, [r1, #2]
  if((TIMx == TIM1) || (TIMx == TIM8)||
     (TIMx == TIM2) || (TIMx == TIM3)||
     (TIMx == TIM4) || (TIMx == TIM5)) 
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8004f56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8004f5a:	4313      	orrs	r3, r2
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8004f5c:	4a0f      	ldr	r2, [pc, #60]	; (8004f9c <TIM_TimeBaseInit+0x78>)
 8004f5e:	4290      	cmp	r0, r2
 8004f60:	d008      	beq.n	8004f74 <TIM_TimeBaseInit+0x50>
 8004f62:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004f66:	4290      	cmp	r0, r2
 8004f68:	d004      	beq.n	8004f74 <TIM_TimeBaseInit+0x50>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8004f6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8004f6e:	890a      	ldrh	r2, [r1, #8]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8004f70:	b29b      	uxth	r3, r3
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8004f72:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 8004f74:	8003      	strh	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8004f76:	684b      	ldr	r3, [r1, #4]
 8004f78:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8004f7a:	880b      	ldrh	r3, [r1, #0]
 8004f7c:	8503      	strh	r3, [r0, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8004f7e:	4b06      	ldr	r3, [pc, #24]	; (8004f98 <TIM_TimeBaseInit+0x74>)
 8004f80:	4298      	cmp	r0, r3
 8004f82:	d003      	beq.n	8004f8c <TIM_TimeBaseInit+0x68>
 8004f84:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f88:	4298      	cmp	r0, r3
 8004f8a:	d101      	bne.n	8004f90 <TIM_TimeBaseInit+0x6c>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8004f8c:	7a8b      	ldrb	r3, [r1, #10]
 8004f8e:	8603      	strh	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8004f90:	2301      	movs	r3, #1
 8004f92:	8283      	strh	r3, [r0, #20]
}
 8004f94:	4770      	bx	lr
 8004f96:	bf00      	nop
 8004f98:	40010000 	.word	0x40010000
 8004f9c:	40001000 	.word	0x40001000

08004fa0 <TIM_TimeBaseStructInit>:
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 8004fa0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004fa4:	6043      	str	r3, [r0, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	8003      	strh	r3, [r0, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 8004faa:	8103      	strh	r3, [r0, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 8004fac:	8043      	strh	r3, [r0, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 8004fae:	7283      	strb	r3, [r0, #10]
}
 8004fb0:	4770      	bx	lr

08004fb2 <TIM_PrescalerConfig>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
 8004fb2:	8501      	strh	r1, [r0, #40]	; 0x28
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
 8004fb4:	8282      	strh	r2, [r0, #20]
}
 8004fb6:	4770      	bx	lr

08004fb8 <TIM_CounterModeConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));

  tmpcr1 = TIMx->CR1;
 8004fb8:	8803      	ldrh	r3, [r0, #0]

  /* Reset the CMS and DIR Bits */
  tmpcr1 &= (uint16_t)~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fbe:	041b      	lsls	r3, r3, #16
 8004fc0:	0c1b      	lsrs	r3, r3, #16

  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
 8004fc2:	430b      	orrs	r3, r1

  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
 8004fc4:	8003      	strh	r3, [r0, #0]
}
 8004fc6:	4770      	bx	lr

08004fc8 <TIM_SetCounter>:
{
  /* Check the parameters */
   assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 8004fc8:	6241      	str	r1, [r0, #36]	; 0x24
}
 8004fca:	4770      	bx	lr

08004fcc <TIM_SetAutoreload>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 8004fcc:	62c1      	str	r1, [r0, #44]	; 0x2c
}
 8004fce:	4770      	bx	lr

08004fd0 <TIM_GetCounter>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Counter Register value */
  return TIMx->CNT;
 8004fd0:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
 8004fd2:	4770      	bx	lr

08004fd4 <TIM_GetPrescaler>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Prescaler Register value */
  return TIMx->PSC;
 8004fd4:	8d00      	ldrh	r0, [r0, #40]	; 0x28
}
 8004fd6:	b280      	uxth	r0, r0
 8004fd8:	4770      	bx	lr

08004fda <TIM_UpdateDisableConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 8004fda:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004fdc:	b119      	cbz	r1, 8004fe6 <TIM_UpdateDisableConfig+0xc>
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	f043 0302 	orr.w	r3, r3, #2
 8004fe4:	e003      	b.n	8004fee <TIM_UpdateDisableConfig+0x14>
  }
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_UDIS;
 8004fe6:	f023 0302 	bic.w	r3, r3, #2
 8004fea:	041b      	lsls	r3, r3, #16
 8004fec:	0c1b      	lsrs	r3, r3, #16
 8004fee:	8003      	strh	r3, [r0, #0]
 8004ff0:	4770      	bx	lr

08004ff2 <TIM_UpdateRequestConfig>:
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 8004ff2:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
 8004ff4:	b119      	cbz	r1, 8004ffe <TIM_UpdateRequestConfig+0xc>
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	f043 0304 	orr.w	r3, r3, #4
 8004ffc:	e003      	b.n	8005006 <TIM_UpdateRequestConfig+0x14>
  }
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_URS;
 8004ffe:	f023 0304 	bic.w	r3, r3, #4
 8005002:	041b      	lsls	r3, r3, #16
 8005004:	0c1b      	lsrs	r3, r3, #16
 8005006:	8003      	strh	r3, [r0, #0]
 8005008:	4770      	bx	lr

0800500a <TIM_ARRPreloadConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 800500a:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800500c:	b119      	cbz	r1, 8005016 <TIM_ARRPreloadConfig+0xc>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 800500e:	b29b      	uxth	r3, r3
 8005010:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005014:	e003      	b.n	800501e <TIM_ARRPreloadConfig+0x14>
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 8005016:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800501a:	041b      	lsls	r3, r3, #16
 800501c:	0c1b      	lsrs	r3, r3, #16
 800501e:	8003      	strh	r3, [r0, #0]
 8005020:	4770      	bx	lr

08005022 <TIM_SelectOnePulseMode>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));

  /* Reset the OPM Bit */
  TIMx->CR1 &= (uint16_t)~TIM_CR1_OPM;
 8005022:	8803      	ldrh	r3, [r0, #0]
 8005024:	f023 0308 	bic.w	r3, r3, #8
 8005028:	041b      	lsls	r3, r3, #16
 800502a:	0c1b      	lsrs	r3, r3, #16
 800502c:	8003      	strh	r3, [r0, #0]

  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
 800502e:	8803      	ldrh	r3, [r0, #0]
 8005030:	b29b      	uxth	r3, r3
 8005032:	430b      	orrs	r3, r1
 8005034:	8003      	strh	r3, [r0, #0]
}
 8005036:	4770      	bx	lr

08005038 <TIM_SetClockDivision>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));

  /* Reset the CKD Bits */
  TIMx->CR1 &= (uint16_t)(~TIM_CR1_CKD);
 8005038:	8803      	ldrh	r3, [r0, #0]
 800503a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800503e:	041b      	lsls	r3, r3, #16
 8005040:	0c1b      	lsrs	r3, r3, #16
 8005042:	8003      	strh	r3, [r0, #0]

  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
 8005044:	8803      	ldrh	r3, [r0, #0]
 8005046:	b29b      	uxth	r3, r3
 8005048:	430b      	orrs	r3, r1
 800504a:	8003      	strh	r3, [r0, #0]
}
 800504c:	4770      	bx	lr

0800504e <TIM_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 800504e:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005050:	b119      	cbz	r1, 800505a <TIM_Cmd+0xc>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8005052:	b29b      	uxth	r3, r3
 8005054:	f043 0301 	orr.w	r3, r3, #1
 8005058:	e003      	b.n	8005062 <TIM_Cmd+0x14>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 800505a:	f023 0301 	bic.w	r3, r3, #1
 800505e:	041b      	lsls	r3, r3, #16
 8005060:	0c1b      	lsrs	r3, r3, #16
 8005062:	8003      	strh	r3, [r0, #0]
 8005064:	4770      	bx	lr

08005066 <TIM_OC1Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8005066:	8c03      	ldrh	r3, [r0, #32]
 8005068:	f023 0301 	bic.w	r3, r3, #1
 800506c:	041b      	lsls	r3, r3, #16
 800506e:	0c1b      	lsrs	r3, r3, #16
 8005070:	8403      	strh	r3, [r0, #32]
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8005072:	b570      	push	{r4, r5, r6, lr}

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005074:	8c03      	ldrh	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005076:	8884      	ldrh	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005078:	8b02      	ldrh	r2, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 800507a:	880d      	ldrh	r5, [r1, #0]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 800507c:	884e      	ldrh	r6, [r1, #2]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 800507e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8005082:	0412      	lsls	r2, r2, #16
 8005084:	0c12      	lsrs	r2, r2, #16
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8005086:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8005088:	898d      	ldrh	r5, [r1, #12]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 800508a:	f023 0302 	bic.w	r3, r3, #2
 800508e:	041b      	lsls	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8005090:	4335      	orrs	r5, r6
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 8005092:	0c1b      	lsrs	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8005094:	b2ad      	uxth	r5, r5
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8005096:	432b      	orrs	r3, r5
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8005098:	4d0e      	ldr	r5, [pc, #56]	; (80050d4 <TIM_OC1Init+0x6e>)
 800509a:	42a8      	cmp	r0, r5
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800509c:	b2a4      	uxth	r4, r4
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800509e:	d003      	beq.n	80050a8 <TIM_OC1Init+0x42>
 80050a0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80050a4:	42a8      	cmp	r0, r5
 80050a6:	d10e      	bne.n	80050c6 <TIM_OC1Init+0x60>
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 80050a8:	89cd      	ldrh	r5, [r1, #14]
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 80050aa:	8a4e      	ldrh	r6, [r1, #18]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 80050ac:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 80050b0:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 80050b2:	888d      	ldrh	r5, [r1, #4]
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 80050b4:	f023 0304 	bic.w	r3, r3, #4
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 80050b8:	432b      	orrs	r3, r5
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 80050ba:	8a0d      	ldrh	r5, [r1, #16]
 80050bc:	4335      	orrs	r5, r6
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 80050be:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 80050c2:	b2ad      	uxth	r5, r5
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 80050c4:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050c6:	8084      	strh	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050c8:	8302      	strh	r2, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 80050ca:	688a      	ldr	r2, [r1, #8]
 80050cc:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050ce:	8403      	strh	r3, [r0, #32]
}
 80050d0:	bd70      	pop	{r4, r5, r6, pc}
 80050d2:	bf00      	nop
 80050d4:	40010000 	.word	0x40010000

080050d8 <TIM_OC2Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 80050d8:	8c03      	ldrh	r3, [r0, #32]
 80050da:	f023 0310 	bic.w	r3, r3, #16
 80050de:	041b      	lsls	r3, r3, #16
 80050e0:	0c1b      	lsrs	r3, r3, #16
 80050e2:	8403      	strh	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 80050e4:	8c03      	ldrh	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050e6:	8882      	ldrh	r2, [r0, #4]
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80050e8:	b530      	push	{r4, r5, lr}
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050ea:	8b04      	ldrh	r4, [r0, #24]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80050ec:	880d      	ldrh	r5, [r1, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 80050ee:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
 80050f2:	0424      	lsls	r4, r4, #16
 80050f4:	0c24      	lsrs	r4, r4, #16
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 80050f6:	f023 0320 	bic.w	r3, r3, #32
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80050fa:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 80050fe:	041b      	lsls	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 8005100:	898d      	ldrh	r5, [r1, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 8005102:	0c1b      	lsrs	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 8005104:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8005108:	884d      	ldrh	r5, [r1, #2]
 800510a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800510e:	4d13      	ldr	r5, [pc, #76]	; (800515c <TIM_OC2Init+0x84>)
 8005110:	42a8      	cmp	r0, r5
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005112:	b292      	uxth	r2, r2
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8005114:	b2a4      	uxth	r4, r4
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8005116:	b29b      	uxth	r3, r3
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8005118:	d003      	beq.n	8005122 <TIM_OC2Init+0x4a>
 800511a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800511e:	42a8      	cmp	r0, r5
 8005120:	d115      	bne.n	800514e <TIM_OC2Init+0x76>
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 8005122:	89cd      	ldrh	r5, [r1, #14]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 8005124:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005128:	b29b      	uxth	r3, r3
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 800512a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
 800512e:	f64f 75bf 	movw	r5, #65471	; 0xffbf
 8005132:	401d      	ands	r5, r3
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8005134:	888b      	ldrh	r3, [r1, #4]
 8005136:	ea45 1303 	orr.w	r3, r5, r3, lsl #4
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 800513a:	8a0d      	ldrh	r5, [r1, #16]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
 800513c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 8005140:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8005144:	8a4d      	ldrh	r5, [r1, #18]
 8005146:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 800514a:	b29b      	uxth	r3, r3
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 800514c:	b292      	uxth	r2, r2
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800514e:	8082      	strh	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8005150:	688a      	ldr	r2, [r1, #8]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005152:	8304      	strh	r4, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8005154:	6382      	str	r2, [r0, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005156:	8403      	strh	r3, [r0, #32]
}
 8005158:	bd30      	pop	{r4, r5, pc}
 800515a:	bf00      	nop
 800515c:	40010000 	.word	0x40010000

08005160 <TIM_OC3Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8005160:	8c03      	ldrh	r3, [r0, #32]
 8005162:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005166:	041b      	lsls	r3, r3, #16
 8005168:	0c1b      	lsrs	r3, r3, #16
 800516a:	8403      	strh	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800516c:	8c03      	ldrh	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800516e:	8882      	ldrh	r2, [r0, #4]
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8005170:	b530      	push	{r4, r5, lr}
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005172:	8b84      	ldrh	r4, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8005174:	880d      	ldrh	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 8005176:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 800517a:	0424      	lsls	r4, r4, #16
 800517c:	0c24      	lsrs	r4, r4, #16
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 800517e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005182:	041b      	lsls	r3, r3, #16
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8005184:	432c      	orrs	r4, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 8005186:	898d      	ldrh	r5, [r1, #12]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 8005188:	0c1b      	lsrs	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 800518a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 800518e:	884d      	ldrh	r5, [r1, #2]
 8005190:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8005194:	4d12      	ldr	r5, [pc, #72]	; (80051e0 <TIM_OC3Init+0x80>)
 8005196:	42a8      	cmp	r0, r5
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005198:	b292      	uxth	r2, r2
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 800519a:	b29b      	uxth	r3, r3
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800519c:	d003      	beq.n	80051a6 <TIM_OC3Init+0x46>
 800519e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80051a2:	42a8      	cmp	r0, r5
 80051a4:	d115      	bne.n	80051d2 <TIM_OC3Init+0x72>
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 80051a6:	89cd      	ldrh	r5, [r1, #14]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 80051a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80051ac:	b29b      	uxth	r3, r3
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 80051ae:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 80051b2:	f64f 35ff 	movw	r5, #64511	; 0xfbff
 80051b6:	401d      	ands	r5, r3
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 80051b8:	888b      	ldrh	r3, [r1, #4]
 80051ba:	ea45 2303 	orr.w	r3, r5, r3, lsl #8
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 80051be:	8a0d      	ldrh	r5, [r1, #16]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 80051c0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 80051c4:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 80051c8:	8a4d      	ldrh	r5, [r1, #18]
 80051ca:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 80051ce:	b29b      	uxth	r3, r3
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 80051d0:	b292      	uxth	r2, r2
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051d2:	8082      	strh	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 80051d4:	688a      	ldr	r2, [r1, #8]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051d6:	8384      	strh	r4, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 80051d8:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051da:	8403      	strh	r3, [r0, #32]
}
 80051dc:	bd30      	pop	{r4, r5, pc}
 80051de:	bf00      	nop
 80051e0:	40010000 	.word	0x40010000

080051e4 <TIM_OC4Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 80051e4:	8c03      	ldrh	r3, [r0, #32]
 80051e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80051ea:	041b      	lsls	r3, r3, #16
 80051ec:	0c1b      	lsrs	r3, r3, #16
 80051ee:	8403      	strh	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051f0:	8c03      	ldrh	r3, [r0, #32]
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80051f2:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051f4:	8884      	ldrh	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051f6:	8b82      	ldrh	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80051f8:	880d      	ldrh	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 80051fa:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 80051fe:	0412      	lsls	r2, r2, #16
 8005200:	0c12      	lsrs	r2, r2, #16
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 8005202:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8005206:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 800520a:	041b      	lsls	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 800520c:	898d      	ldrh	r5, [r1, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 800520e:	0c1b      	lsrs	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8005210:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8005214:	884d      	ldrh	r5, [r1, #2]
 8005216:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 800521a:	4d0b      	ldr	r5, [pc, #44]	; (8005248 <TIM_OC4Init+0x64>)
 800521c:	42a8      	cmp	r0, r5
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800521e:	b2a4      	uxth	r4, r4
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8005220:	b292      	uxth	r2, r2
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8005222:	b29b      	uxth	r3, r3
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 8005224:	d003      	beq.n	800522e <TIM_OC4Init+0x4a>
 8005226:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800522a:	42a8      	cmp	r0, r5
 800522c:	d105      	bne.n	800523a <TIM_OC4Init+0x56>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 800522e:	8a0d      	ldrh	r5, [r1, #16]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 8005230:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8005234:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8005238:	b2a4      	uxth	r4, r4
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800523a:	8084      	strh	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 800523c:	8382      	strh	r2, [r0, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 800523e:	688a      	ldr	r2, [r1, #8]
 8005240:	6402      	str	r2, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005242:	8403      	strh	r3, [r0, #32]
}
 8005244:	bd30      	pop	{r4, r5, pc}
 8005246:	bf00      	nop
 8005248:	40010000 	.word	0x40010000

0800524c <TIM_OCStructInit>:
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 800524c:	2300      	movs	r3, #0
 800524e:	8003      	strh	r3, [r0, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 8005250:	8043      	strh	r3, [r0, #2]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 8005252:	8083      	strh	r3, [r0, #4]
  TIM_OCInitStruct->TIM_Pulse = 0x00000000;
 8005254:	6083      	str	r3, [r0, #8]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 8005256:	8183      	strh	r3, [r0, #12]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 8005258:	81c3      	strh	r3, [r0, #14]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 800525a:	8203      	strh	r3, [r0, #16]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 800525c:	8243      	strh	r3, [r0, #18]
}
 800525e:	4770      	bx	lr

08005260 <TIM_SelectOCxM>:
  *            @arg TIM_ForcedAction_Active
  *            @arg TIM_ForcedAction_InActive
  * @retval None
  */
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
{
 8005260:	b530      	push	{r4, r5, lr}
  tmp += CCMR_OFFSET;

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 8005262:	8c05      	ldrh	r5, [r0, #32]
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
  tmp += CCMR_OFFSET;

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;
 8005264:	2401      	movs	r4, #1

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 8005266:	b2ad      	uxth	r5, r5
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
  tmp += CCMR_OFFSET;

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;
 8005268:	408c      	lsls	r4, r1

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 800526a:	ea25 0404 	bic.w	r4, r5, r4
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
  tmp += CCMR_OFFSET;
 800526e:	f100 0318 	add.w	r3, r0, #24

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 8005272:	8404      	strh	r4, [r0, #32]

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 8005274:	b109      	cbz	r1, 800527a <TIM_SelectOCxM+0x1a>
 8005276:	2908      	cmp	r1, #8
 8005278:	d107      	bne.n	800528a <TIM_SelectOCxM+0x2a>
  {
    tmp += (TIM_Channel>>1);
 800527a:	0849      	lsrs	r1, r1, #1

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC13M_MASK;
 800527c:	f64f 708f 	movw	r0, #65423	; 0xff8f
 8005280:	58cc      	ldr	r4, [r1, r3]
 8005282:	4020      	ands	r0, r4
 8005284:	50c8      	str	r0, [r1, r3]
   
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
 8005286:	58c8      	ldr	r0, [r1, r3]
 8005288:	e00a      	b.n	80052a0 <TIM_SelectOCxM+0x40>
  }
  else
  {
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
 800528a:	3904      	subs	r1, #4
 800528c:	f3c1 014e 	ubfx	r1, r1, #1, #15

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC24M_MASK;
 8005290:	f648 70ff 	movw	r0, #36863	; 0x8fff
 8005294:	58cc      	ldr	r4, [r1, r3]
 8005296:	4020      	ands	r0, r4
 8005298:	50c8      	str	r0, [r1, r3]
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 800529a:	0212      	lsls	r2, r2, #8
 800529c:	58c8      	ldr	r0, [r1, r3]
 800529e:	b292      	uxth	r2, r2
 80052a0:	4302      	orrs	r2, r0
 80052a2:	50ca      	str	r2, [r1, r3]
 80052a4:	bd30      	pop	{r4, r5, pc}

080052a6 <TIM_SetCompare1>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 80052a6:	6341      	str	r1, [r0, #52]	; 0x34
}
 80052a8:	4770      	bx	lr

080052aa <TIM_SetCompare2>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 80052aa:	6381      	str	r1, [r0, #56]	; 0x38
}
 80052ac:	4770      	bx	lr

080052ae <TIM_SetCompare3>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 80052ae:	63c1      	str	r1, [r0, #60]	; 0x3c
}
 80052b0:	4770      	bx	lr

080052b2 <TIM_SetCompare4>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
 80052b2:	6401      	str	r1, [r0, #64]	; 0x40
}
 80052b4:	4770      	bx	lr

080052b6 <TIM_ForcedOC1Config>:
  uint16_t tmpccmr1 = 0;

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 80052b6:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1M;
 80052b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052bc:	041b      	lsls	r3, r3, #16
 80052be:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
 80052c0:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80052c2:	8303      	strh	r3, [r0, #24]
}
 80052c4:	4770      	bx	lr

080052c6 <TIM_ForcedOC2Config>:
  uint16_t tmpccmr1 = 0;

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 80052c6:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2M;
 80052c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052cc:	041b      	lsls	r3, r3, #16
 80052ce:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
 80052d0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80052d4:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80052d6:	8303      	strh	r3, [r0, #24]
}
 80052d8:	4770      	bx	lr

080052da <TIM_ForcedOC3Config>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));

  tmpccmr2 = TIMx->CCMR2;
 80052da:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC1M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3M;
 80052dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052e0:	041b      	lsls	r3, r3, #16
 80052e2:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
 80052e4:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80052e6:	8383      	strh	r3, [r0, #28]
}
 80052e8:	4770      	bx	lr

080052ea <TIM_ForcedOC4Config>:
  uint16_t tmpccmr2 = 0;

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
 80052ea:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC2M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4M;
 80052ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052f0:	041b      	lsls	r3, r3, #16
 80052f2:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
 80052f4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80052f8:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80052fa:	8383      	strh	r3, [r0, #28]
}
 80052fc:	4770      	bx	lr

080052fe <TIM_OC1PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 80052fe:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC1PE);
 8005300:	f023 0308 	bic.w	r3, r3, #8
 8005304:	041b      	lsls	r3, r3, #16
 8005306:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 8005308:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800530a:	8303      	strh	r3, [r0, #24]
}
 800530c:	4770      	bx	lr

0800530e <TIM_OC2PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 800530e:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2PE);
 8005310:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005314:	041b      	lsls	r3, r3, #16
 8005316:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 8005318:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800531c:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800531e:	8303      	strh	r3, [r0, #24]
}
 8005320:	4770      	bx	lr

08005322 <TIM_OC3PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8005322:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 8005324:	f023 0308 	bic.w	r3, r3, #8
 8005328:	041b      	lsls	r3, r3, #16
 800532a:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 800532c:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800532e:	8383      	strh	r3, [r0, #28]
}
 8005330:	4770      	bx	lr

08005332 <TIM_OC4PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8005332:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
 8005334:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005338:	041b      	lsls	r3, r3, #16
 800533a:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 800533c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005340:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8005342:	8383      	strh	r3, [r0, #28]
}
 8005344:	4770      	bx	lr

08005346 <TIM_OC1FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8005346:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1FE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1FE;
 8005348:	f023 0304 	bic.w	r3, r3, #4
 800534c:	041b      	lsls	r3, r3, #16
 800534e:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
 8005350:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8005352:	8303      	strh	r3, [r0, #24]
}
 8005354:	4770      	bx	lr

08005356 <TIM_OC2FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8005356:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2FE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2FE);
 8005358:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800535c:	041b      	lsls	r3, r3, #16
 800535e:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
 8005360:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005364:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8005366:	8303      	strh	r3, [r0, #24]
}
 8005368:	4770      	bx	lr

0800536a <TIM_OC3FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 800536a:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC3FE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3FE;
 800536c:	f023 0304 	bic.w	r3, r3, #4
 8005370:	041b      	lsls	r3, r3, #16
 8005372:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
 8005374:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 8005376:	8383      	strh	r3, [r0, #28]
}
 8005378:	4770      	bx	lr

0800537a <TIM_OC4FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 800537a:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC4FE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4FE);
 800537c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005380:	041b      	lsls	r3, r3, #16
 8005382:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
 8005384:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005388:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 800538a:	8383      	strh	r3, [r0, #28]
}
 800538c:	4770      	bx	lr

0800538e <TIM_ClearOC1Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 800538e:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1CE;
 8005390:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005394:	041b      	lsls	r3, r3, #16
 8005396:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
 8005398:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800539a:	8303      	strh	r3, [r0, #24]
}
 800539c:	4770      	bx	lr

0800539e <TIM_ClearOC2Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 800539e:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2CE;

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
 80053a0:	0209      	lsls	r1, r1, #8
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;

  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2CE;
 80053a2:	045b      	lsls	r3, r3, #17

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
 80053a4:	ea41 4353 	orr.w	r3, r1, r3, lsr #17
 80053a8:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80053aa:	8303      	strh	r3, [r0, #24]
}
 80053ac:	4770      	bx	lr

080053ae <TIM_ClearOC3Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 80053ae:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC3CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3CE;
 80053b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053b4:	041b      	lsls	r3, r3, #16
 80053b6:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
 80053b8:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80053ba:	8383      	strh	r3, [r0, #28]
}
 80053bc:	4770      	bx	lr

080053be <TIM_ClearOC4Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 80053be:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4CE;

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
 80053c0:	0209      	lsls	r1, r1, #8
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;

  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4CE;
 80053c2:	045b      	lsls	r3, r3, #17

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
 80053c4:	ea41 4353 	orr.w	r3, r1, r3, lsr #17
 80053c8:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80053ca:	8383      	strh	r3, [r0, #28]
}
 80053cc:	4770      	bx	lr

080053ce <TIM_OC1PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 80053ce:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC1P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC1P);
 80053d0:	f023 0302 	bic.w	r3, r3, #2
 80053d4:	041b      	lsls	r3, r3, #16
 80053d6:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= TIM_OCPolarity;
 80053d8:	430b      	orrs	r3, r1

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80053da:	8403      	strh	r3, [r0, #32]
}
 80053dc:	4770      	bx	lr

080053de <TIM_OC1NPolarityConfig>:
  uint16_t tmpccer = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
 80053de:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC1NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 80053e0:	f023 0308 	bic.w	r3, r3, #8
 80053e4:	041b      	lsls	r3, r3, #16
 80053e6:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= TIM_OCNPolarity;
 80053e8:	430b      	orrs	r3, r1

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80053ea:	8403      	strh	r3, [r0, #32]
}
 80053ec:	4770      	bx	lr

080053ee <TIM_OC2PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 80053ee:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC2P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC2P);
 80053f0:	f023 0320 	bic.w	r3, r3, #32
 80053f4:	041b      	lsls	r3, r3, #16
 80053f6:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
 80053f8:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 80053fc:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80053fe:	8403      	strh	r3, [r0, #32]
}
 8005400:	4770      	bx	lr

08005402 <TIM_OC2NPolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
 8005402:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC2NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 8005404:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005408:	041b      	lsls	r3, r3, #16
 800540a:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
 800540c:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8005410:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8005412:	8403      	strh	r3, [r0, #32]
}
 8005414:	4770      	bx	lr

08005416 <TIM_OC3PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8005416:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC3P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 8005418:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800541c:	041b      	lsls	r3, r3, #16
 800541e:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
 8005420:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005424:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8005426:	8403      	strh	r3, [r0, #32]
}
 8005428:	4770      	bx	lr

0800542a <TIM_OC3NPolarityConfig>:
 
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
 800542a:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC3NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 800542c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005430:	041b      	lsls	r3, r3, #16
 8005432:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
 8005434:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005438:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800543a:	8403      	strh	r3, [r0, #32]
}
 800543c:	4770      	bx	lr

0800543e <TIM_OC4PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 800543e:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC4P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 8005440:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005444:	041b      	lsls	r3, r3, #16
 8005446:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
 8005448:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 800544c:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800544e:	8403      	strh	r3, [r0, #32]
}
 8005450:	4770      	bx	lr

08005452 <TIM_CCxCmd>:
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
 8005452:	b510      	push	{r4, lr}
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 8005454:	8c04      	ldrh	r4, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;
 8005456:	2301      	movs	r3, #1
 8005458:	408b      	lsls	r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 800545a:	b2a4      	uxth	r4, r4
 800545c:	ea24 0303 	bic.w	r3, r4, r3
 8005460:	8403      	strh	r3, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
 8005462:	8c03      	ldrh	r3, [r0, #32]
 8005464:	fa12 f101 	lsls.w	r1, r2, r1
 8005468:	430b      	orrs	r3, r1
 800546a:	b29b      	uxth	r3, r3
 800546c:	8403      	strh	r3, [r0, #32]
}
 800546e:	bd10      	pop	{r4, pc}

08005470 <TIM_CCxNCmd>:
  * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
  * @retval None
  */
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
{
 8005470:	b510      	push	{r4, lr}
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_SET << TIM_Channel;

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 8005472:	8c04      	ldrh	r4, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_SET << TIM_Channel;
 8005474:	2304      	movs	r3, #4
 8005476:	408b      	lsls	r3, r1

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 8005478:	b2a4      	uxth	r4, r4
 800547a:	ea24 0303 	bic.w	r3, r4, r3
 800547e:	8403      	strh	r3, [r0, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
 8005480:	8c03      	ldrh	r3, [r0, #32]
 8005482:	fa12 f101 	lsls.w	r1, r2, r1
 8005486:	430b      	orrs	r3, r1
 8005488:	b29b      	uxth	r3, r3
 800548a:	8403      	strh	r3, [r0, #32]
}
 800548c:	bd10      	pop	{r4, pc}

0800548e <TIM_ICStructInit>:
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 800548e:	2300      	movs	r3, #0
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 8005490:	2201      	movs	r2, #1
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 8005492:	8003      	strh	r3, [r0, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 8005494:	8043      	strh	r3, [r0, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 8005496:	8082      	strh	r2, [r0, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 8005498:	80c3      	strh	r3, [r0, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
 800549a:	8103      	strh	r3, [r0, #8]
}
 800549c:	4770      	bx	lr

0800549e <TIM_GetCapture1>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 800549e:	6b40      	ldr	r0, [r0, #52]	; 0x34
}
 80054a0:	4770      	bx	lr

080054a2 <TIM_GetCapture2>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 80054a2:	6b80      	ldr	r0, [r0, #56]	; 0x38
}
 80054a4:	4770      	bx	lr

080054a6 <TIM_GetCapture3>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 

  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
 80054a6:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
}
 80054a8:	4770      	bx	lr

080054aa <TIM_GetCapture4>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
 80054aa:	6c00      	ldr	r0, [r0, #64]	; 0x40
}
 80054ac:	4770      	bx	lr

080054ae <TIM_SetIC1Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
 80054ae:	8b03      	ldrh	r3, [r0, #24]
 80054b0:	f023 030c 	bic.w	r3, r3, #12
 80054b4:	041b      	lsls	r3, r3, #16
 80054b6:	0c1b      	lsrs	r3, r3, #16
 80054b8:	8303      	strh	r3, [r0, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 80054ba:	8b03      	ldrh	r3, [r0, #24]
 80054bc:	b29b      	uxth	r3, r3
 80054be:	430b      	orrs	r3, r1
 80054c0:	8303      	strh	r3, [r0, #24]
}
 80054c2:	4770      	bx	lr

080054c4 <TIM_SetIC2Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
 80054c4:	8b03      	ldrh	r3, [r0, #24]
 80054c6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80054ca:	041b      	lsls	r3, r3, #16
 80054cc:	0c1b      	lsrs	r3, r3, #16
 80054ce:	8303      	strh	r3, [r0, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 80054d0:	8b03      	ldrh	r3, [r0, #24]
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80054d8:	b29b      	uxth	r3, r3
 80054da:	8303      	strh	r3, [r0, #24]
}
 80054dc:	4770      	bx	lr

080054de <TIM_PWMIConfig>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 80054de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054e0:	460c      	mov	r4, r1

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 80054e2:	8849      	ldrh	r1, [r1, #2]
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 80054e4:	88a2      	ldrh	r2, [r4, #4]
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 80054e6:	f8b4 e000 	ldrh.w	lr, [r4]
 80054ea:	8923      	ldrh	r3, [r4, #8]
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 80054ec:	4605      	mov	r5, r0
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
 80054ee:	2900      	cmp	r1, #0
 80054f0:	bf0c      	ite	eq
 80054f2:	2702      	moveq	r7, #2
 80054f4:	2700      	movne	r7, #0
    icoppositepolarity = TIM_ICPolarity_Rising;
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
 80054f6:	2a01      	cmp	r2, #1
 80054f8:	bf14      	ite	ne
 80054fa:	2601      	movne	r6, #1
 80054fc:	2602      	moveq	r6, #2
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 80054fe:	f1be 0f00 	cmp.w	lr, #0
 8005502:	d110      	bne.n	8005526 <TIM_PWMIConfig+0x48>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 8005504:	f7ff fc2e 	bl	8004d64 <TI1_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8005508:	4628      	mov	r0, r5
 800550a:	88e1      	ldrh	r1, [r4, #6]
 800550c:	f7ff ffcf 	bl	80054ae <TIM_SetIC1Prescaler>
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 8005510:	4628      	mov	r0, r5
 8005512:	4639      	mov	r1, r7
 8005514:	4632      	mov	r2, r6
 8005516:	8923      	ldrh	r3, [r4, #8]
 8005518:	f7ff fc3d 	bl	8004d96 <TI2_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800551c:	88e1      	ldrh	r1, [r4, #6]
 800551e:	4628      	mov	r0, r5
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8005520:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8005524:	e7ce      	b.n	80054c4 <TIM_SetIC2Prescaler>
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 8005526:	f7ff fc36 	bl	8004d96 <TI2_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800552a:	4628      	mov	r0, r5
 800552c:	88e1      	ldrh	r1, [r4, #6]
 800552e:	f7ff ffc9 	bl	80054c4 <TIM_SetIC2Prescaler>
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 8005532:	4628      	mov	r0, r5
 8005534:	4639      	mov	r1, r7
 8005536:	4632      	mov	r2, r6
 8005538:	8923      	ldrh	r3, [r4, #8]
 800553a:	f7ff fc13 	bl	8004d64 <TI1_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800553e:	88e1      	ldrh	r1, [r4, #6]
 8005540:	4628      	mov	r0, r5
  }
}
 8005542:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8005546:	e7b2      	b.n	80054ae <TIM_SetIC1Prescaler>

08005548 <TIM_SetIC3Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC3PSC;
 8005548:	8b83      	ldrh	r3, [r0, #28]
 800554a:	f023 030c 	bic.w	r3, r3, #12
 800554e:	041b      	lsls	r3, r3, #16
 8005550:	0c1b      	lsrs	r3, r3, #16
 8005552:	8383      	strh	r3, [r0, #28]

  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 8005554:	8b83      	ldrh	r3, [r0, #28]
 8005556:	b29b      	uxth	r3, r3
 8005558:	430b      	orrs	r3, r1
 800555a:	8383      	strh	r3, [r0, #28]
}
 800555c:	4770      	bx	lr

0800555e <TIM_SetIC4Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC4PSC;
 800555e:	8b83      	ldrh	r3, [r0, #28]
 8005560:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005564:	041b      	lsls	r3, r3, #16
 8005566:	0c1b      	lsrs	r3, r3, #16
 8005568:	8383      	strh	r3, [r0, #28]

  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 800556a:	8b83      	ldrh	r3, [r0, #28]
 800556c:	b29b      	uxth	r3, r3
 800556e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005572:	b29b      	uxth	r3, r3
 8005574:	8383      	strh	r3, [r0, #28]
}
 8005576:	4770      	bx	lr

08005578 <TIM_ICInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8005578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800557a:	460d      	mov	r5, r1
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 800557c:	880b      	ldrh	r3, [r1, #0]
 800557e:	88aa      	ldrh	r2, [r5, #4]
 8005580:	8849      	ldrh	r1, [r1, #2]
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8005582:	4604      	mov	r4, r0
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8005584:	b93b      	cbnz	r3, 8005596 <TIM_ICInit+0x1e>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8005586:	892b      	ldrh	r3, [r5, #8]
 8005588:	f7ff fbec 	bl	8004d64 <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800558c:	88e9      	ldrh	r1, [r5, #6]
 800558e:	4620      	mov	r0, r4
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8005590:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8005594:	e78b      	b.n	80054ae <TIM_SetIC1Prescaler>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 8005596:	2b04      	cmp	r3, #4
 8005598:	d107      	bne.n	80055aa <TIM_ICInit+0x32>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_LIST2_PERIPH(TIMx));
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800559a:	892b      	ldrh	r3, [r5, #8]
 800559c:	f7ff fbfb 	bl	8004d96 <TI2_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80055a0:	88e9      	ldrh	r1, [r5, #6]
 80055a2:	4620      	mov	r0, r4
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 80055a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    assert_param(IS_TIM_LIST2_PERIPH(TIMx));
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80055a8:	e78c      	b.n	80054c4 <TIM_SetIC2Prescaler>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 80055aa:	2b08      	cmp	r3, #8
 80055ac:	f8b5 c008 	ldrh.w	ip, [r5, #8]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 80055b0:	8c07      	ldrh	r7, [r0, #32]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 80055b2:	d11d      	bne.n	80055f0 <TIM_ICInit+0x78>
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 80055b4:	f427 7780 	bic.w	r7, r7, #256	; 0x100
 80055b8:	043f      	lsls	r7, r7, #16
 80055ba:	0c3f      	lsrs	r7, r7, #16
 80055bc:	8407      	strh	r7, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 80055be:	8b86      	ldrh	r6, [r0, #28]
  tmpccer = TIMx->CCER;
 80055c0:	8c03      	ldrh	r3, [r0, #32]
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
  tmpccmr2 = TIMx->CCMR2;
 80055c2:	b2b6      	uxth	r6, r6
  tmpccer = TIMx->CCER;
 80055c4:	b29b      	uxth	r3, r3
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
 80055c6:	f026 06f3 	bic.w	r6, r6, #243	; 0xf3
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80055ca:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 80055ce:	ea46 1c0c 	orr.w	ip, r6, ip, lsl #4

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 80055d2:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 80055d6:	fa1f fc8c 	uxth.w	ip, ip

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 80055da:	b289      	uxth	r1, r1
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 80055dc:	ea4c 0202 	orr.w	r2, ip, r2

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 80055e0:	f441 7180 	orr.w	r1, r1, #256	; 0x100

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80055e4:	8382      	strh	r2, [r0, #28]
  TIMx->CCER = tmpccer;
 80055e6:	8401      	strh	r1, [r0, #32]
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80055e8:	88e9      	ldrh	r1, [r5, #6]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 80055ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80055ee:	e7ab      	b.n	8005548 <TIM_SetIC3Prescaler>
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 80055f0:	f427 5780 	bic.w	r7, r7, #4096	; 0x1000
 80055f4:	043f      	lsls	r7, r7, #16
 80055f6:	0c3f      	lsrs	r7, r7, #16
 80055f8:	8407      	strh	r7, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 80055fa:	8b86      	ldrh	r6, [r0, #28]
  tmpccer = TIMx->CCER;
 80055fc:	8c03      	ldrh	r3, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 80055fe:	f426 7640 	bic.w	r6, r6, #768	; 0x300
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005602:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8005606:	0536      	lsls	r6, r6, #20
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005608:	045b      	lsls	r3, r3, #17
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 800560a:	0d36      	lsrs	r6, r6, #20
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800560c:	0c5b      	lsrs	r3, r3, #17
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 800560e:	ea46 2202 	orr.w	r2, r6, r2, lsl #8
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 8005612:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 8005616:	ea42 320c 	orr.w	r2, r2, ip, lsl #12

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 800561a:	b29b      	uxth	r3, r3
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800561c:	88e9      	ldrh	r1, [r5, #6]
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 800561e:	b292      	uxth	r2, r2

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 8005620:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005624:	8382      	strh	r2, [r0, #28]
  TIMx->CCER = tmpccer ;
 8005626:	8403      	strh	r3, [r0, #32]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8005628:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800562c:	e797      	b.n	800555e <TIM_SetIC4Prescaler>

0800562e <TIM_BDTRConfig>:
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 800562e:	884a      	ldrh	r2, [r1, #2]
 8005630:	880b      	ldrh	r3, [r1, #0]
 8005632:	4313      	orrs	r3, r2
 8005634:	888a      	ldrh	r2, [r1, #4]
 8005636:	4313      	orrs	r3, r2
 8005638:	88ca      	ldrh	r2, [r1, #6]
 800563a:	4313      	orrs	r3, r2
 800563c:	890a      	ldrh	r2, [r1, #8]
 800563e:	4313      	orrs	r3, r2
 8005640:	894a      	ldrh	r2, [r1, #10]
 8005642:	4313      	orrs	r3, r2
 8005644:	898a      	ldrh	r2, [r1, #12]
 8005646:	4313      	orrs	r3, r2
 8005648:	b29b      	uxth	r3, r3
 800564a:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
}
 800564e:	4770      	bx	lr

08005650 <TIM_BDTRStructInit>:
  * @retval None
  */
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
 8005650:	2300      	movs	r3, #0
 8005652:	8003      	strh	r3, [r0, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
 8005654:	8043      	strh	r3, [r0, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 8005656:	8083      	strh	r3, [r0, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
 8005658:	80c3      	strh	r3, [r0, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
 800565a:	8103      	strh	r3, [r0, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
 800565c:	8143      	strh	r3, [r0, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 800565e:	8183      	strh	r3, [r0, #12]
}
 8005660:	4770      	bx	lr

08005662 <TIM_CtrlPWMOutputs>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8005662:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005666:	b129      	cbz	r1, 8005674 <TIM_CtrlPWMOutputs+0x12>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8005668:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800566c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005670:	b29b      	uxth	r3, r3
 8005672:	e001      	b.n	8005678 <TIM_CtrlPWMOutputs+0x16>
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
 8005674:	045b      	lsls	r3, r3, #17
 8005676:	0c5b      	lsrs	r3, r3, #17
 8005678:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 800567c:	4770      	bx	lr

0800567e <TIM_SelectCOM>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 800567e:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005680:	b119      	cbz	r1, 800568a <TIM_SelectCOM+0xc>
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 8005682:	b29b      	uxth	r3, r3
 8005684:	f043 0304 	orr.w	r3, r3, #4
 8005688:	e003      	b.n	8005692 <TIM_SelectCOM+0x14>
  }
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCUS;
 800568a:	f023 0304 	bic.w	r3, r3, #4
 800568e:	041b      	lsls	r3, r3, #16
 8005690:	0c1b      	lsrs	r3, r3, #16
 8005692:	8083      	strh	r3, [r0, #4]
 8005694:	4770      	bx	lr

08005696 <TIM_CCPreloadControl>:
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 8005696:	8883      	ldrh	r3, [r0, #4]
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8005698:	b119      	cbz	r1, 80056a2 <TIM_CCPreloadControl+0xc>
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 800569a:	b29b      	uxth	r3, r3
 800569c:	f043 0301 	orr.w	r3, r3, #1
 80056a0:	e003      	b.n	80056aa <TIM_CCPreloadControl+0x14>
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCPC;
 80056a2:	f023 0301 	bic.w	r3, r3, #1
 80056a6:	041b      	lsls	r3, r3, #16
 80056a8:	0c1b      	lsrs	r3, r3, #16
 80056aa:	8083      	strh	r3, [r0, #4]
 80056ac:	4770      	bx	lr

080056ae <TIM_ITConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 80056ae:	8983      	ldrh	r3, [r0, #12]
 80056b0:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80056b2:	b10a      	cbz	r2, 80056b8 <TIM_ITConfig+0xa>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 80056b4:	4319      	orrs	r1, r3
 80056b6:	e001      	b.n	80056bc <TIM_ITConfig+0xe>
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 80056b8:	ea23 0101 	bic.w	r1, r3, r1
 80056bc:	8181      	strh	r1, [r0, #12]
 80056be:	4770      	bx	lr

080056c0 <TIM_GenerateEvent>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
 
  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
 80056c0:	8281      	strh	r1, [r0, #20]
}
 80056c2:	4770      	bx	lr

080056c4 <TIM_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));

  
  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
 80056c4:	8a03      	ldrh	r3, [r0, #16]
  {
    bitstatus = SET;
 80056c6:	4219      	tst	r1, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 80056c8:	bf0c      	ite	eq
 80056ca:	2000      	moveq	r0, #0
 80056cc:	2001      	movne	r0, #1
 80056ce:	4770      	bx	lr

080056d0 <TIM_ClearFlag>:
{  
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
 80056d0:	43c9      	mvns	r1, r1
 80056d2:	b289      	uxth	r1, r1
 80056d4:	8201      	strh	r1, [r0, #16]
}
 80056d6:	4770      	bx	lr

080056d8 <TIM_GetITStatus>:
  uint16_t itstatus = 0x0, itenable = 0x0;
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 80056d8:	8a03      	ldrh	r3, [r0, #16]
  
  itenable = TIMx->DIER & TIM_IT;
 80056da:	8982      	ldrh	r2, [r0, #12]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 80056dc:	ea11 0003 	ands.w	r0, r1, r3
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
  
  itenable = TIMx->DIER & TIM_IT;
 80056e0:	b292      	uxth	r2, r2
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 80056e2:	d003      	beq.n	80056ec <TIM_GetITStatus+0x14>
  {
    bitstatus = SET;
 80056e4:	4211      	tst	r1, r2
 80056e6:	bf0c      	ite	eq
 80056e8:	2000      	moveq	r0, #0
 80056ea:	2001      	movne	r0, #1
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 80056ec:	4770      	bx	lr

080056ee <TIM_ClearITPendingBit>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 80056ee:	43c9      	mvns	r1, r1
 80056f0:	b289      	uxth	r1, r1
 80056f2:	8201      	strh	r1, [r0, #16]
}
 80056f4:	4770      	bx	lr

080056f6 <TIM_DMAConfig>:
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase)); 
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));

  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
 80056f6:	430a      	orrs	r2, r1
 80056f8:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
}
 80056fc:	4770      	bx	lr

080056fe <TIM_DMACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 80056fe:	8983      	ldrh	r3, [r0, #12]
 8005700:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx)); 
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005702:	b10a      	cbz	r2, 8005708 <TIM_DMACmd+0xa>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 8005704:	4319      	orrs	r1, r3
 8005706:	e001      	b.n	800570c <TIM_DMACmd+0xe>
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 8005708:	ea23 0101 	bic.w	r1, r3, r1
 800570c:	8181      	strh	r1, [r0, #12]
 800570e:	4770      	bx	lr

08005710 <TIM_SelectCCDMA>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 8005710:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005712:	b119      	cbz	r1, 800571c <TIM_SelectCCDMA+0xc>
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 8005714:	b29b      	uxth	r3, r3
 8005716:	f043 0308 	orr.w	r3, r3, #8
 800571a:	e003      	b.n	8005724 <TIM_SelectCCDMA+0x14>
  }
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCDS;
 800571c:	f023 0308 	bic.w	r3, r3, #8
 8005720:	041b      	lsls	r3, r3, #16
 8005722:	0c1b      	lsrs	r3, r3, #16
 8005724:	8083      	strh	r3, [r0, #4]
 8005726:	4770      	bx	lr

08005728 <TIM_InternalClockConfig>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  (uint16_t)~TIM_SMCR_SMS;
 8005728:	8903      	ldrh	r3, [r0, #8]
 800572a:	f023 0307 	bic.w	r3, r3, #7
 800572e:	041b      	lsls	r3, r3, #16
 8005730:	0c1b      	lsrs	r3, r3, #16
 8005732:	8103      	strh	r3, [r0, #8]
}
 8005734:	4770      	bx	lr

08005736 <TIM_ITRxExternalClockConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005736:	8903      	ldrh	r3, [r0, #8]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 8005738:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800573c:	041b      	lsls	r3, r3, #16
 800573e:	0c1b      	lsrs	r3, r3, #16

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 8005740:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005742:	8103      	strh	r3, [r0, #8]

  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);

  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 8005744:	8903      	ldrh	r3, [r0, #8]
 8005746:	b29b      	uxth	r3, r3
 8005748:	f043 0307 	orr.w	r3, r3, #7
 800574c:	8103      	strh	r3, [r0, #8]
}
 800574e:	4770      	bx	lr

08005750 <TIM_TIxExternalClockConfig>:
  *          This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
 8005750:	b538      	push	{r3, r4, r5, lr}
 8005752:	460d      	mov	r5, r1
 8005754:	4611      	mov	r1, r2
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 8005756:	2201      	movs	r2, #1
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 8005758:	2d60      	cmp	r5, #96	; 0x60
  *          This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
 800575a:	4604      	mov	r4, r0
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 800575c:	d102      	bne.n	8005764 <TIM_TIxExternalClockConfig+0x14>
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 800575e:	f7ff fb1a 	bl	8004d96 <TI2_Config>
 8005762:	e001      	b.n	8005768 <TIM_TIxExternalClockConfig+0x18>
  }
  else
  {
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 8005764:	f7ff fafe 	bl	8004d64 <TI1_Config>
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005768:	8923      	ldrh	r3, [r4, #8]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 800576a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800576e:	041b      	lsls	r3, r3, #16
 8005770:	0c1b      	lsrs	r3, r3, #16

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 8005772:	431d      	orrs	r5, r3

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005774:	8125      	strh	r5, [r4, #8]
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
  }
  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 8005776:	8923      	ldrh	r3, [r4, #8]
 8005778:	b29b      	uxth	r3, r3
 800577a:	f043 0307 	orr.w	r3, r3, #7
 800577e:	8123      	strh	r3, [r4, #8]
}
 8005780:	bd38      	pop	{r3, r4, r5, pc}

08005782 <TIM_SelectInputTrigger>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005782:	8903      	ldrh	r3, [r0, #8]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 8005784:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005788:	041b      	lsls	r3, r3, #16
 800578a:	0c1b      	lsrs	r3, r3, #16

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 800578c:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800578e:	8103      	strh	r3, [r0, #8]
}
 8005790:	4770      	bx	lr

08005792 <TIM_SelectOutputTrigger>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
 8005792:	8883      	ldrh	r3, [r0, #4]
 8005794:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005798:	041b      	lsls	r3, r3, #16
 800579a:	0c1b      	lsrs	r3, r3, #16
 800579c:	8083      	strh	r3, [r0, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 800579e:	8883      	ldrh	r3, [r0, #4]
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	430b      	orrs	r3, r1
 80057a4:	8083      	strh	r3, [r0, #4]
}
 80057a6:	4770      	bx	lr

080057a8 <TIM_SelectSlaveMode>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));

  /* Reset the SMS Bits */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_SMS;
 80057a8:	8903      	ldrh	r3, [r0, #8]
 80057aa:	f023 0307 	bic.w	r3, r3, #7
 80057ae:	041b      	lsls	r3, r3, #16
 80057b0:	0c1b      	lsrs	r3, r3, #16
 80057b2:	8103      	strh	r3, [r0, #8]

  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
 80057b4:	8903      	ldrh	r3, [r0, #8]
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	430b      	orrs	r3, r1
 80057ba:	8103      	strh	r3, [r0, #8]
}
 80057bc:	4770      	bx	lr

080057be <TIM_SelectMasterSlaveMode>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));

  /* Reset the MSM Bit */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_MSM;
 80057be:	8903      	ldrh	r3, [r0, #8]
 80057c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057c4:	041b      	lsls	r3, r3, #16
 80057c6:	0c1b      	lsrs	r3, r3, #16
 80057c8:	8103      	strh	r3, [r0, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
 80057ca:	8903      	ldrh	r3, [r0, #8]
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	430b      	orrs	r3, r1
 80057d0:	8103      	strh	r3, [r0, #8]
}
 80057d2:	4770      	bx	lr

080057d4 <TIM_ETRConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                   uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 80057d4:	b510      	push	{r4, lr}
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
 80057d6:	8904      	ldrh	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
 80057d8:	b2e4      	uxtb	r4, r4

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 80057da:	430c      	orrs	r4, r1
 80057dc:	4314      	orrs	r4, r2
 80057de:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80057e2:	b2a4      	uxth	r4, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057e4:	8104      	strh	r4, [r0, #8]
}
 80057e6:	bd10      	pop	{r4, pc}

080057e8 <TIM_ETRClockMode2Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 80057e8:	b510      	push	{r4, lr}
 80057ea:	4604      	mov	r4, r0
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 80057ec:	f7ff fff2 	bl	80057d4 <TIM_ETRConfig>

  /* Enable the External clock mode2 */
  TIMx->SMCR |= TIM_SMCR_ECE;
 80057f0:	8923      	ldrh	r3, [r4, #8]
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80057f8:	8123      	strh	r3, [r4, #8]
}
 80057fa:	bd10      	pop	{r4, pc}

080057fc <TIM_ETRClockMode1Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                            uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 80057fc:	b510      	push	{r4, lr}
 80057fe:	4604      	mov	r4, r0
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 8005800:	f7ff ffe8 	bl	80057d4 <TIM_ETRConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005804:	8923      	ldrh	r3, [r4, #8]

  /* Reset the SMS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;

  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;
 8005806:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800580a:	041b      	lsls	r3, r3, #16
 800580c:	0c1b      	lsrs	r3, r3, #16

  /* Select the Trigger selection : ETRF */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
  tmpsmcr |= TIM_TS_ETRF;
 800580e:	f043 0377 	orr.w	r3, r3, #119	; 0x77

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005812:	8123      	strh	r3, [r4, #8]
}
 8005814:	bd10      	pop	{r4, pc}

08005816 <TIM_EncoderInterfaceConfig>:
  *            @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
 8005816:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005818:	8904      	ldrh	r4, [r0, #8]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 800581a:	8b06      	ldrh	r6, [r0, #24]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800581c:	8c05      	ldrh	r5, [r0, #32]
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 800581e:	f426 7640 	bic.w	r6, r6, #768	; 0x300

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005822:	b2ad      	uxth	r5, r5
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 8005824:	f026 0603 	bic.w	r6, r6, #3

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 8005828:	f024 0407 	bic.w	r4, r4, #7
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 800582c:	0436      	lsls	r6, r6, #16
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
 800582e:	f025 0522 	bic.w	r5, r5, #34	; 0x22

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 8005832:	0424      	lsls	r4, r4, #16
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 8005834:	0c36      	lsrs	r6, r6, #16
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 8005836:	4315      	orrs	r5, r2

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 8005838:	0c24      	lsrs	r4, r4, #16
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 800583a:	f446 7680 	orr.w	r6, r6, #256	; 0x100

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 800583e:	ea45 1503 	orr.w	r5, r5, r3, lsl #4
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
  tmpsmcr |= TIM_EncoderMode;
 8005842:	4321      	orrs	r1, r4

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 8005844:	f046 0601 	orr.w	r6, r6, #1

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 8005848:	b2ad      	uxth	r5, r5

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800584a:	8101      	strh	r1, [r0, #8]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 800584c:	8306      	strh	r6, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800584e:	8405      	strh	r5, [r0, #32]
}
 8005850:	bd70      	pop	{r4, r5, r6, pc}

08005852 <TIM_SelectHallSensor>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 8005852:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005854:	b119      	cbz	r1, 800585e <TIM_SelectHallSensor+0xc>
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 8005856:	b29b      	uxth	r3, r3
 8005858:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800585c:	e003      	b.n	8005866 <TIM_SelectHallSensor+0x14>
  }
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_TI1S;
 800585e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005862:	041b      	lsls	r3, r3, #16
 8005864:	0c1b      	lsrs	r3, r3, #16
 8005866:	8083      	strh	r3, [r0, #4]
 8005868:	4770      	bx	lr

0800586a <TIM_RemapConfig>:
 /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_REMAP(TIM_Remap));

  /* Set the Timer remapping configuration */
  TIMx->OR =  TIM_Remap;
 800586a:	f8a0 1050 	strh.w	r1, [r0, #80]	; 0x50
}
 800586e:	4770      	bx	lr

08005870 <USART_DeInit>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 8005870:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 8005872:	4b23      	ldr	r3, [pc, #140]	; (8005900 <USART_DeInit+0x90>)
 8005874:	4298      	cmp	r0, r3
 8005876:	d105      	bne.n	8005884 <USART_DeInit+0x14>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 8005878:	2010      	movs	r0, #16
 800587a:	2101      	movs	r1, #1
 800587c:	f7fe f976 	bl	8003b6c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 8005880:	2010      	movs	r0, #16
 8005882:	e037      	b.n	80058f4 <USART_DeInit+0x84>
  }
  else if (USARTx == USART2)
 8005884:	4b1f      	ldr	r3, [pc, #124]	; (8005904 <USART_DeInit+0x94>)
 8005886:	4298      	cmp	r0, r3
 8005888:	d107      	bne.n	800589a <USART_DeInit+0x2a>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 800588a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800588e:	2101      	movs	r1, #1
 8005890:	f7fe f960 	bl	8003b54 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 8005894:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8005898:	e009      	b.n	80058ae <USART_DeInit+0x3e>
  }
  else if (USARTx == USART3)
 800589a:	4b1b      	ldr	r3, [pc, #108]	; (8005908 <USART_DeInit+0x98>)
 800589c:	4298      	cmp	r0, r3
 800589e:	d10b      	bne.n	80058b8 <USART_DeInit+0x48>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 80058a0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80058a4:	2101      	movs	r1, #1
 80058a6:	f7fe f955 	bl	8003b54 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 80058aa:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80058ae:	2100      	movs	r1, #0
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
    }
  }
}
 80058b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
  }
  else if (USARTx == USART3)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 80058b4:	f7fe b94e 	b.w	8003b54 <RCC_APB1PeriphResetCmd>
  }    
  else if (USARTx == UART4)
 80058b8:	4b14      	ldr	r3, [pc, #80]	; (800590c <USART_DeInit+0x9c>)
 80058ba:	4298      	cmp	r0, r3
 80058bc:	d107      	bne.n	80058ce <USART_DeInit+0x5e>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 80058be:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80058c2:	2101      	movs	r1, #1
 80058c4:	f7fe f946 	bl	8003b54 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 80058c8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80058cc:	e7ef      	b.n	80058ae <USART_DeInit+0x3e>
  }
  else if (USARTx == UART5)
 80058ce:	4b10      	ldr	r3, [pc, #64]	; (8005910 <USART_DeInit+0xa0>)
 80058d0:	4298      	cmp	r0, r3
 80058d2:	d107      	bne.n	80058e4 <USART_DeInit+0x74>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 80058d4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80058d8:	2101      	movs	r1, #1
 80058da:	f7fe f93b 	bl	8003b54 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 80058de:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80058e2:	e7e4      	b.n	80058ae <USART_DeInit+0x3e>
  }     
  else
  {
    if (USARTx == USART6)
 80058e4:	4b0b      	ldr	r3, [pc, #44]	; (8005914 <USART_DeInit+0xa4>)
 80058e6:	4298      	cmp	r0, r3
 80058e8:	d109      	bne.n	80058fe <USART_DeInit+0x8e>
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
 80058ea:	2020      	movs	r0, #32
 80058ec:	2101      	movs	r1, #1
 80058ee:	f7fe f93d 	bl	8003b6c <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 80058f2:	2020      	movs	r0, #32
 80058f4:	2100      	movs	r1, #0
    }
  }
}
 80058f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (USARTx == USART6)
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 80058fa:	f7fe b937 	b.w	8003b6c <RCC_APB2PeriphResetCmd>
 80058fe:	bd08      	pop	{r3, pc}
 8005900:	40011000 	.word	0x40011000
 8005904:	40004400 	.word	0x40004400
 8005908:	40004800 	.word	0x40004800
 800590c:	40004c00 	.word	0x40004c00
 8005910:	40005000 	.word	0x40005000
 8005914:	40011400 	.word	0x40011400

08005918 <USART_Init>:
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8005918:	8a03      	ldrh	r3, [r0, #16]
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 800591a:	88ca      	ldrh	r2, [r1, #6]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800591c:	b29b      	uxth	r3, r3

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800591e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8005922:	b530      	push	{r4, r5, lr}
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8005924:	4313      	orrs	r3, r2
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8005926:	460d      	mov	r5, r1
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8005928:	8203      	strh	r3, [r0, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 800592a:	8983      	ldrh	r3, [r0, #12]

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800592c:	8909      	ldrh	r1, [r1, #8]
 800592e:	88aa      	ldrh	r2, [r5, #4]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8005930:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8005934:	430a      	orrs	r2, r1
 8005936:	8969      	ldrh	r1, [r5, #10]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8005938:	f023 030c 	bic.w	r3, r3, #12
 800593c:	041b      	lsls	r3, r3, #16

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800593e:	430a      	orrs	r2, r1

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8005940:	0c1b      	lsrs	r3, r3, #16

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8005942:	b292      	uxth	r2, r2
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8005944:	4313      	orrs	r3, r2
 8005946:	8183      	strh	r3, [r0, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8005948:	8a83      	ldrh	r3, [r0, #20]
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 800594a:	89aa      	ldrh	r2, [r5, #12]

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 800594c:	b29b      	uxth	r3, r3

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 800594e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8005952:	4313      	orrs	r3, r2
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8005954:	b085      	sub	sp, #20
  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8005956:	8283      	strh	r3, [r0, #20]
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8005958:	4604      	mov	r4, r0
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 800595a:	4668      	mov	r0, sp
 800595c:	f7fe f82a 	bl	80039b4 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8005960:	4b1a      	ldr	r3, [pc, #104]	; (80059cc <USART_Init+0xb4>)
 8005962:	429c      	cmp	r4, r3
 8005964:	d003      	beq.n	800596e <USART_Init+0x56>
 8005966:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800596a:	429c      	cmp	r4, r3
 800596c:	d101      	bne.n	8005972 <USART_Init+0x5a>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 800596e:	9b03      	ldr	r3, [sp, #12]
 8005970:	e000      	b.n	8005974 <USART_Init+0x5c>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8005972:	9b02      	ldr	r3, [sp, #8]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8005974:	89a2      	ldrh	r2, [r4, #12]
 8005976:	b212      	sxth	r2, r2
 8005978:	2a00      	cmp	r2, #0
 800597a:	f04f 0119 	mov.w	r1, #25
 800597e:	682a      	ldr	r2, [r5, #0]
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8005980:	fb01 f103 	mul.w	r1, r1, r3
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8005984:	da01      	bge.n	800598a <USART_Init+0x72>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8005986:	0052      	lsls	r2, r2, #1
 8005988:	e000      	b.n	800598c <USART_Init+0x74>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 800598a:	0092      	lsls	r2, r2, #2
  }
  tmpreg = (integerdivider / 100) << 4;
 800598c:	2364      	movs	r3, #100	; 0x64
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 800598e:	fbb1 f1f2 	udiv	r1, r1, r2
  }
  tmpreg = (integerdivider / 100) << 4;
 8005992:	fbb1 f2f3 	udiv	r2, r1, r3
 8005996:	0112      	lsls	r2, r2, #4

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8005998:	0910      	lsrs	r0, r2, #4
 800599a:	fb03 1110 	mls	r1, r3, r0, r1

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800599e:	89a0      	ldrh	r0, [r4, #12]
 80059a0:	b200      	sxth	r0, r0
 80059a2:	2800      	cmp	r0, #0
 80059a4:	da06      	bge.n	80059b4 <USART_Init+0x9c>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 80059a6:	00c9      	lsls	r1, r1, #3
 80059a8:	3132      	adds	r1, #50	; 0x32
 80059aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80059ae:	f003 0307 	and.w	r3, r3, #7
 80059b2:	e005      	b.n	80059c0 <USART_Init+0xa8>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 80059b4:	0109      	lsls	r1, r1, #4
 80059b6:	3132      	adds	r1, #50	; 0x32
 80059b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80059bc:	f003 030f 	and.w	r3, r3, #15
 80059c0:	431a      	orrs	r2, r3
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 80059c2:	b292      	uxth	r2, r2
 80059c4:	8122      	strh	r2, [r4, #8]
}
 80059c6:	b005      	add	sp, #20
 80059c8:	bd30      	pop	{r4, r5, pc}
 80059ca:	bf00      	nop
 80059cc:	40011000 	.word	0x40011000

080059d0 <USART_StructInit>:
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 80059d0:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80059d4:	6003      	str	r3, [r0, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
  USART_InitStruct->USART_Parity = USART_Parity_No ;
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 80059d6:	220c      	movs	r2, #12
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 80059d8:	2300      	movs	r3, #0
 80059da:	8083      	strh	r3, [r0, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 80059dc:	80c3      	strh	r3, [r0, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 80059de:	8103      	strh	r3, [r0, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 80059e0:	8142      	strh	r2, [r0, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 80059e2:	8183      	strh	r3, [r0, #12]
}
 80059e4:	4770      	bx	lr

080059e6 <USART_ClockInit>:
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 80059e6:	880b      	ldrh	r3, [r1, #0]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80059e8:	8a02      	ldrh	r2, [r0, #16]
  *         contains the configuration information for the specified  USART peripheral.
  * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 80059ea:	b510      	push	{r4, lr}
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 80059ec:	884c      	ldrh	r4, [r1, #2]
 80059ee:	4323      	orrs	r3, r4
 80059f0:	888c      	ldrh	r4, [r1, #4]
 80059f2:	88c9      	ldrh	r1, [r1, #6]
 80059f4:	4323      	orrs	r3, r4
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80059f6:	b292      	uxth	r2, r2
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 80059f8:	430b      	orrs	r3, r1
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 80059fa:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 80059fe:	b29b      	uxth	r3, r3
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8005a00:	4313      	orrs	r3, r2
 8005a02:	8203      	strh	r3, [r0, #16]
}
 8005a04:	bd10      	pop	{r4, pc}

08005a06 <USART_ClockStructInit>:
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 8005a06:	2300      	movs	r3, #0
 8005a08:	8003      	strh	r3, [r0, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 8005a0a:	8043      	strh	r3, [r0, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 8005a0c:	8083      	strh	r3, [r0, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 8005a0e:	80c3      	strh	r3, [r0, #6]
}
 8005a10:	4770      	bx	lr

08005a12 <USART_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8005a12:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005a14:	b119      	cbz	r1, 8005a1e <USART_Cmd+0xc>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005a1c:	e003      	b.n	8005a26 <USART_Cmd+0x14>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8005a1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a22:	041b      	lsls	r3, r3, #16
 8005a24:	0c1b      	lsrs	r3, r3, #16
 8005a26:	8183      	strh	r3, [r0, #12]
 8005a28:	4770      	bx	lr

08005a2a <USART_SetPrescaler>:
{ 
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= USART_GTPR_GT;
 8005a2a:	8b03      	ldrh	r3, [r0, #24]
 8005a2c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005a30:	8303      	strh	r3, [r0, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 8005a32:	8b03      	ldrh	r3, [r0, #24]
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	430b      	orrs	r3, r1
 8005a38:	8303      	strh	r3, [r0, #24]
}
 8005a3a:	4770      	bx	lr

08005a3c <USART_OverSampling8Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 8005a3c:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005a3e:	b129      	cbz	r1, 8005a4c <USART_OverSampling8Cmd+0x10>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 8005a40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	e001      	b.n	8005a50 <USART_OverSampling8Cmd+0x14>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
 8005a4c:	045b      	lsls	r3, r3, #17
 8005a4e:	0c5b      	lsrs	r3, r3, #17
 8005a50:	8183      	strh	r3, [r0, #12]
 8005a52:	4770      	bx	lr

08005a54 <USART_OneBitMethodCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 8005a54:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005a56:	b119      	cbz	r1, 8005a60 <USART_OneBitMethodCmd+0xc>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005a5e:	e003      	b.n	8005a68 <USART_OneBitMethodCmd+0x14>
  }
  else
  {
    /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
 8005a60:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a64:	041b      	lsls	r3, r3, #16
 8005a66:	0c1b      	lsrs	r3, r3, #16
 8005a68:	8283      	strh	r3, [r0, #20]
 8005a6a:	4770      	bx	lr

08005a6c <USART_SendData>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8005a6c:	05c9      	lsls	r1, r1, #23
 8005a6e:	0dc9      	lsrs	r1, r1, #23
 8005a70:	8081      	strh	r1, [r0, #4]
}
 8005a72:	4770      	bx	lr

08005a74 <USART_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8005a74:	8880      	ldrh	r0, [r0, #4]
 8005a76:	05c0      	lsls	r0, r0, #23
}
 8005a78:	0dc0      	lsrs	r0, r0, #23
 8005a7a:	4770      	bx	lr

08005a7c <USART_SetAddress>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
 8005a7c:	8a03      	ldrh	r3, [r0, #16]
 8005a7e:	f023 030f 	bic.w	r3, r3, #15
 8005a82:	041b      	lsls	r3, r3, #16
 8005a84:	0c1b      	lsrs	r3, r3, #16
 8005a86:	8203      	strh	r3, [r0, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
 8005a88:	8a03      	ldrh	r3, [r0, #16]
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	430b      	orrs	r3, r1
 8005a8e:	8203      	strh	r3, [r0, #16]
}
 8005a90:	4770      	bx	lr

08005a92 <USART_ReceiverWakeUpCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 8005a92:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
 8005a94:	b119      	cbz	r1, 8005a9e <USART_ReceiverWakeUpCmd+0xc>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	f043 0302 	orr.w	r3, r3, #2
 8005a9c:	e003      	b.n	8005aa6 <USART_ReceiverWakeUpCmd+0x14>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
 8005a9e:	f023 0302 	bic.w	r3, r3, #2
 8005aa2:	041b      	lsls	r3, r3, #16
 8005aa4:	0c1b      	lsrs	r3, r3, #16
 8005aa6:	8183      	strh	r3, [r0, #12]
 8005aa8:	4770      	bx	lr

08005aaa <USART_WakeUpConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
 8005aaa:	8983      	ldrh	r3, [r0, #12]
 8005aac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ab0:	041b      	lsls	r3, r3, #16
 8005ab2:	0c1b      	lsrs	r3, r3, #16
 8005ab4:	8183      	strh	r3, [r0, #12]
  USARTx->CR1 |= USART_WakeUp;
 8005ab6:	8983      	ldrh	r3, [r0, #12]
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	430b      	orrs	r3, r1
 8005abc:	8183      	strh	r3, [r0, #12]
}
 8005abe:	4770      	bx	lr

08005ac0 <USART_LINBreakDetectLengthConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
 8005ac0:	8a03      	ldrh	r3, [r0, #16]
 8005ac2:	f023 0320 	bic.w	r3, r3, #32
 8005ac6:	041b      	lsls	r3, r3, #16
 8005ac8:	0c1b      	lsrs	r3, r3, #16
 8005aca:	8203      	strh	r3, [r0, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 8005acc:	8a03      	ldrh	r3, [r0, #16]
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	430b      	orrs	r3, r1
 8005ad2:	8203      	strh	r3, [r0, #16]
}
 8005ad4:	4770      	bx	lr

08005ad6 <USART_LINCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 8005ad6:	8a03      	ldrh	r3, [r0, #16]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005ad8:	b119      	cbz	r1, 8005ae2 <USART_LINCmd+0xc>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005ae0:	e003      	b.n	8005aea <USART_LINCmd+0x14>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
 8005ae2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ae6:	041b      	lsls	r3, r3, #16
 8005ae8:	0c1b      	lsrs	r3, r3, #16
 8005aea:	8203      	strh	r3, [r0, #16]
 8005aec:	4770      	bx	lr

08005aee <USART_SendBreak>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= USART_CR1_SBK;
 8005aee:	8983      	ldrh	r3, [r0, #12]
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	f043 0301 	orr.w	r3, r3, #1
 8005af6:	8183      	strh	r3, [r0, #12]
}
 8005af8:	4770      	bx	lr

08005afa <USART_HalfDuplexCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 8005afa:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005afc:	b119      	cbz	r1, 8005b06 <USART_HalfDuplexCmd+0xc>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	f043 0308 	orr.w	r3, r3, #8
 8005b04:	e003      	b.n	8005b0e <USART_HalfDuplexCmd+0x14>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
 8005b06:	f023 0308 	bic.w	r3, r3, #8
 8005b0a:	041b      	lsls	r3, r3, #16
 8005b0c:	0c1b      	lsrs	r3, r3, #16
 8005b0e:	8283      	strh	r3, [r0, #20]
 8005b10:	4770      	bx	lr

08005b12 <USART_SetGuardTime>:
{    
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= USART_GTPR_PSC;
 8005b12:	8b03      	ldrh	r3, [r0, #24]
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	8303      	strh	r3, [r0, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 8005b18:	8b03      	ldrh	r3, [r0, #24]
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005b20:	8303      	strh	r3, [r0, #24]
}
 8005b22:	4770      	bx	lr

08005b24 <USART_SmartCardCmd>:
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 8005b24:	8a83      	ldrh	r3, [r0, #20]
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8005b26:	b119      	cbz	r1, 8005b30 <USART_SmartCardCmd+0xc>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	f043 0320 	orr.w	r3, r3, #32
 8005b2e:	e003      	b.n	8005b38 <USART_SmartCardCmd+0x14>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
 8005b30:	f023 0320 	bic.w	r3, r3, #32
 8005b34:	041b      	lsls	r3, r3, #16
 8005b36:	0c1b      	lsrs	r3, r3, #16
 8005b38:	8283      	strh	r3, [r0, #20]
 8005b3a:	4770      	bx	lr

08005b3c <USART_SmartCardNACKCmd>:
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 8005b3c:	8a83      	ldrh	r3, [r0, #20]
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8005b3e:	b119      	cbz	r1, 8005b48 <USART_SmartCardNACKCmd+0xc>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	f043 0310 	orr.w	r3, r3, #16
 8005b46:	e003      	b.n	8005b50 <USART_SmartCardNACKCmd+0x14>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
 8005b48:	f023 0310 	bic.w	r3, r3, #16
 8005b4c:	041b      	lsls	r3, r3, #16
 8005b4e:	0c1b      	lsrs	r3, r3, #16
 8005b50:	8283      	strh	r3, [r0, #20]
 8005b52:	4770      	bx	lr

08005b54 <USART_IrDAConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
 8005b54:	8a83      	ldrh	r3, [r0, #20]
 8005b56:	f023 0304 	bic.w	r3, r3, #4
 8005b5a:	041b      	lsls	r3, r3, #16
 8005b5c:	0c1b      	lsrs	r3, r3, #16
 8005b5e:	8283      	strh	r3, [r0, #20]
  USARTx->CR3 |= USART_IrDAMode;
 8005b60:	8a83      	ldrh	r3, [r0, #20]
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	430b      	orrs	r3, r1
 8005b66:	8283      	strh	r3, [r0, #20]
}
 8005b68:	4770      	bx	lr

08005b6a <USART_IrDACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 8005b6a:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 8005b6c:	b119      	cbz	r1, 8005b76 <USART_IrDACmd+0xc>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	f043 0302 	orr.w	r3, r3, #2
 8005b74:	e003      	b.n	8005b7e <USART_IrDACmd+0x14>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
 8005b76:	f023 0302 	bic.w	r3, r3, #2
 8005b7a:	041b      	lsls	r3, r3, #16
 8005b7c:	0c1b      	lsrs	r3, r3, #16
 8005b7e:	8283      	strh	r3, [r0, #20]
 8005b80:	4770      	bx	lr

08005b82 <USART_DMACmd>:

  if (NewState != DISABLE)
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8005b82:	8a83      	ldrh	r3, [r0, #20]
 8005b84:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 8005b86:	b10a      	cbz	r2, 8005b8c <USART_DMACmd+0xa>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8005b88:	4319      	orrs	r1, r3
 8005b8a:	e001      	b.n	8005b90 <USART_DMACmd+0xe>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 8005b8c:	ea23 0101 	bic.w	r1, r3, r1
 8005b90:	8281      	strh	r1, [r0, #20]
 8005b92:	4770      	bx	lr

08005b94 <USART_ITConfig>:
  } 
    
  usartxbase = (uint32_t)USARTx;

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8005b94:	f3c1 1342 	ubfx	r3, r1, #5, #3
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8005b98:	b510      	push	{r4, lr}

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8005b9a:	f001 011f 	and.w	r1, r1, #31
  itmask = (((uint32_t)0x01) << itpos);
 8005b9e:	2401      	movs	r4, #1
 8005ba0:	fa14 f101 	lsls.w	r1, r4, r1
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8005ba4:	42a3      	cmp	r3, r4
 8005ba6:	d101      	bne.n	8005bac <USART_ITConfig+0x18>
  {
    usartxbase += 0x0C;
 8005ba8:	300c      	adds	r0, #12
 8005baa:	e004      	b.n	8005bb6 <USART_ITConfig+0x22>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8005bac:	2b02      	cmp	r3, #2
 8005bae:	d101      	bne.n	8005bb4 <USART_ITConfig+0x20>
  {
    usartxbase += 0x10;
 8005bb0:	3010      	adds	r0, #16
 8005bb2:	e000      	b.n	8005bb6 <USART_ITConfig+0x22>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8005bb4:	3014      	adds	r0, #20
  }
  if (NewState != DISABLE)
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8005bb6:	6803      	ldr	r3, [r0, #0]
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
  }
  if (NewState != DISABLE)
 8005bb8:	b10a      	cbz	r2, 8005bbe <USART_ITConfig+0x2a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8005bba:	4319      	orrs	r1, r3
 8005bbc:	e001      	b.n	8005bc2 <USART_ITConfig+0x2e>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8005bbe:	ea23 0101 	bic.w	r1, r3, r1
 8005bc2:	6001      	str	r1, [r0, #0]
 8005bc4:	bd10      	pop	{r4, pc}

08005bc6 <USART_GetFlagStatus>:
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8005bc6:	8803      	ldrh	r3, [r0, #0]
  {
    bitstatus = SET;
 8005bc8:	4219      	tst	r1, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8005bca:	bf0c      	ite	eq
 8005bcc:	2000      	moveq	r0, #0
 8005bce:	2001      	movne	r0, #1
 8005bd0:	4770      	bx	lr

08005bd2 <USART_ClearFlag>:
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
       
  USARTx->SR = (uint16_t)~USART_FLAG;
 8005bd2:	43c9      	mvns	r1, r1
 8005bd4:	b289      	uxth	r1, r1
 8005bd6:	8001      	strh	r1, [r0, #0]
}
 8005bd8:	4770      	bx	lr

08005bda <USART_GetITStatus>:
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
 8005bda:	2201      	movs	r2, #1
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8005bdc:	b510      	push	{r4, lr}
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8005bde:	f001 031f 	and.w	r3, r1, #31
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8005be2:	f3c1 1442 	ubfx	r4, r1, #5, #3
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
 8005be6:	409a      	lsls	r2, r3
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8005be8:	2c01      	cmp	r4, #1
 8005bea:	d101      	bne.n	8005bf0 <USART_GetITStatus+0x16>
  {
    itmask &= USARTx->CR1;
 8005bec:	8983      	ldrh	r3, [r0, #12]
 8005bee:	e003      	b.n	8005bf8 <USART_GetITStatus+0x1e>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8005bf0:	2c02      	cmp	r4, #2
  {
    itmask &= USARTx->CR2;
 8005bf2:	bf0c      	ite	eq
 8005bf4:	8a03      	ldrheq	r3, [r0, #16]
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8005bf6:	8a83      	ldrhne	r3, [r0, #20]
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	4013      	ands	r3, r2
  }
  
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
  bitpos &= USARTx->SR;
 8005bfc:	8802      	ldrh	r2, [r0, #0]
 8005bfe:	b292      	uxth	r2, r2
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8005c00:	b143      	cbz	r3, 8005c14 <USART_GetITStatus+0x3a>
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
  }
  
  bitpos = USART_IT >> 0x08;
 8005c02:	0a09      	lsrs	r1, r1, #8
  bitpos = (uint32_t)0x01 << bitpos;
 8005c04:	2301      	movs	r3, #1
 8005c06:	fa13 f101 	lsls.w	r1, r3, r1
  *            @arg USART_IT_NE:   Noise Error interrupt
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
 8005c0a:	4211      	tst	r1, r2
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
  bitpos &= USARTx->SR;
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
  {
    bitstatus = SET;
 8005c0c:	bf0c      	ite	eq
 8005c0e:	2000      	moveq	r0, #0
 8005c10:	2001      	movne	r0, #1
 8005c12:	bd10      	pop	{r4, pc}
  }
  else
  {
    bitstatus = RESET;
 8005c14:	4618      	mov	r0, r3
  }
  
  return bitstatus;  
}
 8005c16:	bd10      	pop	{r4, pc}

08005c18 <USART_ClearITPendingBit>:
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 8005c18:	0a09      	lsrs	r1, r1, #8
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	408b      	lsls	r3, r1
  USARTx->SR = (uint16_t)~itmask;
 8005c1e:	43db      	mvns	r3, r3
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	8003      	strh	r3, [r0, #0]
}
 8005c24:	4770      	bx	lr
 8005c26:	bf00      	nop

08005c28 <WWDG_DeInit>:
  * @brief  Deinitializes the WWDG peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void WWDG_DeInit(void)
{
 8005c28:	b508      	push	{r3, lr}
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, ENABLE);
 8005c2a:	2101      	movs	r1, #1
 8005c2c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005c30:	f7fd ff90 	bl	8003b54 <RCC_APB1PeriphResetCmd>
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, DISABLE);
 8005c34:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005c38:	2100      	movs	r1, #0
}
 8005c3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  * @retval None
  */
void WWDG_DeInit(void)
{
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, ENABLE);
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, DISABLE);
 8005c3e:	f7fd bf89 	b.w	8003b54 <RCC_APB1PeriphResetCmd>

08005c42 <WWDG_SetPrescaler>:
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_WWDG_PRESCALER(WWDG_Prescaler));
  /* Clear WDGTB[1:0] bits */
  tmpreg = WWDG->CFR & CFR_WDGTB_MASK;
 8005c42:	4b03      	ldr	r3, [pc, #12]	; (8005c50 <WWDG_SetPrescaler+0xe>)
 8005c44:	685a      	ldr	r2, [r3, #4]
 8005c46:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
  /* Set WDGTB[1:0] bits according to WWDG_Prescaler value */
  tmpreg |= WWDG_Prescaler;
 8005c4a:	4302      	orrs	r2, r0
  /* Store the new value */
  WWDG->CFR = tmpreg;
 8005c4c:	605a      	str	r2, [r3, #4]
}
 8005c4e:	4770      	bx	lr
 8005c50:	40002c00 	.word	0x40002c00

08005c54 <WWDG_SetWindowValue>:
  * @param  WindowValue: specifies the window value to be compared to the downcounter.
  *   This parameter value must be lower than 0x80.
  * @retval None
  */
void WWDG_SetWindowValue(uint8_t WindowValue)
{
 8005c54:	b082      	sub	sp, #8
  __IO uint32_t tmpreg = 0;
 8005c56:	2300      	movs	r3, #0
 8005c58:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_WWDG_WINDOW_VALUE(WindowValue));
  /* Clear W[6:0] bits */

  tmpreg = WWDG->CFR & CFR_W_MASK;
 8005c5a:	4b07      	ldr	r3, [pc, #28]	; (8005c78 <WWDG_SetWindowValue+0x24>)
 8005c5c:	685a      	ldr	r2, [r3, #4]
 8005c5e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8005c62:	9201      	str	r2, [sp, #4]

  /* Set W[6:0] bits according to WindowValue value */
  tmpreg |= WindowValue & (uint32_t) BIT_MASK;
 8005c64:	9a01      	ldr	r2, [sp, #4]
 8005c66:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8005c6a:	4302      	orrs	r2, r0
 8005c6c:	9201      	str	r2, [sp, #4]

  /* Store the new value */
  WWDG->CFR = tmpreg;
 8005c6e:	9a01      	ldr	r2, [sp, #4]
 8005c70:	605a      	str	r2, [r3, #4]
}
 8005c72:	b002      	add	sp, #8
 8005c74:	4770      	bx	lr
 8005c76:	bf00      	nop
 8005c78:	40002c00 	.word	0x40002c00

08005c7c <WWDG_EnableIT>:
  * @param  None
  * @retval None
  */
void WWDG_EnableIT(void)
{
  *(__IO uint32_t *) CFR_EWI_BB = (uint32_t)ENABLE;
 8005c7c:	4b01      	ldr	r3, [pc, #4]	; (8005c84 <WWDG_EnableIT+0x8>)
 8005c7e:	2201      	movs	r2, #1
 8005c80:	601a      	str	r2, [r3, #0]
}
 8005c82:	4770      	bx	lr
 8005c84:	420580a4 	.word	0x420580a4

08005c88 <WWDG_SetCounter>:
{
  /* Check the parameters */
  assert_param(IS_WWDG_COUNTER(Counter));
  /* Write to T[6:0] bits to configure the counter value, no need to do
     a read-modify-write; writing a 0 to WDGA bit does nothing */
  WWDG->CR = Counter & BIT_MASK;
 8005c88:	4b02      	ldr	r3, [pc, #8]	; (8005c94 <WWDG_SetCounter+0xc>)
 8005c8a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8005c8e:	6018      	str	r0, [r3, #0]
}
 8005c90:	4770      	bx	lr
 8005c92:	bf00      	nop
 8005c94:	40002c00 	.word	0x40002c00

08005c98 <WWDG_Enable>:
  */
void WWDG_Enable(uint8_t Counter)
{
  /* Check the parameters */
  assert_param(IS_WWDG_COUNTER(Counter));
  WWDG->CR = WWDG_CR_WDGA | Counter;
 8005c98:	4b02      	ldr	r3, [pc, #8]	; (8005ca4 <WWDG_Enable+0xc>)
 8005c9a:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8005c9e:	6018      	str	r0, [r3, #0]
}
 8005ca0:	4770      	bx	lr
 8005ca2:	bf00      	nop
 8005ca4:	40002c00 	.word	0x40002c00

08005ca8 <WWDG_GetFlagStatus>:
  */
FlagStatus WWDG_GetFlagStatus(void)
{
  FlagStatus bitstatus = RESET;
    
  if ((WWDG->SR) != (uint32_t)RESET)
 8005ca8:	4b02      	ldr	r3, [pc, #8]	; (8005cb4 <WWDG_GetFlagStatus+0xc>)
 8005caa:	6898      	ldr	r0, [r3, #8]
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8005cac:	3000      	adds	r0, #0
 8005cae:	bf18      	it	ne
 8005cb0:	2001      	movne	r0, #1
 8005cb2:	4770      	bx	lr
 8005cb4:	40002c00 	.word	0x40002c00

08005cb8 <WWDG_ClearFlag>:
  * @param  None
  * @retval None
  */
void WWDG_ClearFlag(void)
{
  WWDG->SR = (uint32_t)RESET;
 8005cb8:	4b01      	ldr	r3, [pc, #4]	; (8005cc0 <WWDG_ClearFlag+0x8>)
 8005cba:	2200      	movs	r2, #0
 8005cbc:	609a      	str	r2, [r3, #8]
}
 8005cbe:	4770      	bx	lr
 8005cc0:	40002c00 	.word	0x40002c00

08005cc4 <ComputeMandel_XY>:

// Eval Mandelbrot at x,y in pixel coos. 
int ComputeMandel_XY(const struct MandelContext *c,int px,int py)
{
	// Compute C plane coos. 
	float a = (float)px/(c->width-1)  * c->xs + c->x0;
 8005cc4:	6803      	ldr	r3, [r0, #0]
 8005cc6:	3b01      	subs	r3, #1
 8005cc8:	ee06 3a90 	vmov	s13, r3
 8005ccc:	ee04 1a90 	vmov	s9, r1
 8005cd0:	eef8 7ae6 	vcvt.f32.s32	s15, s13
 8005cd4:	eeb8 7ae4 	vcvt.f32.s32	s14, s9
	float b = (float)py/(c->height-1) * c->ys + c->y0;
 8005cd8:	6843      	ldr	r3, [r0, #4]

// Eval Mandelbrot at x,y in pixel coos. 
int ComputeMandel_XY(const struct MandelContext *c,int px,int py)
{
	// Compute C plane coos. 
	float a = (float)px/(c->width-1)  * c->xs + c->x0;
 8005cda:	ee87 7a27 	vdiv.f32	s14, s14, s15
	float b = (float)py/(c->height-1) * c->ys + c->y0;
 8005cde:	3b01      	subs	r3, #1

// Eval Mandelbrot at x,y in pixel coos. 
int ComputeMandel_XY(const struct MandelContext *c,int px,int py)
{
	// Compute C plane coos. 
	float a = (float)px/(c->width-1)  * c->xs + c->x0;
 8005ce0:	edd0 7a04 	vldr	s15, [r0, #16]
 8005ce4:	ed90 6a02 	vldr	s12, [r0, #8]
	float b = (float)py/(c->height-1) * c->ys + c->y0;
 8005ce8:	ee04 3a90 	vmov	s9, r3

// Eval Mandelbrot at x,y in pixel coos. 
int ComputeMandel_XY(const struct MandelContext *c,int px,int py)
{
	// Compute C plane coos. 
	float a = (float)px/(c->width-1)  * c->xs + c->x0;
 8005cec:	ee07 6a27 	vmla.f32	s12, s14, s15
	float b = (float)py/(c->height-1) * c->ys + c->y0;
 8005cf0:	ee07 2a90 	vmov	s15, r2
 8005cf4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005cf8:	eef8 7ae4 	vcvt.f32.s32	s15, s9
 8005cfc:	edd0 6a03 	vldr	s13, [r0, #12]
 8005d00:	ee87 7a27 	vdiv.f32	s14, s14, s15
	
	int i=0;
	float x=0,y=0;
	while(i<c->maxit)
 8005d04:	6983      	ldr	r3, [r0, #24]
// Eval Mandelbrot at x,y in pixel coos. 
int ComputeMandel_XY(const struct MandelContext *c,int px,int py)
{
	// Compute C plane coos. 
	float a = (float)px/(c->width-1)  * c->xs + c->x0;
	float b = (float)py/(c->height-1) * c->ys + c->y0;
 8005d06:	edd0 7a05 	vldr	s15, [r0, #20]
 8005d0a:	ee47 6a27 	vmla.f32	s13, s14, s15
	
	int i=0;
	float x=0,y=0;
 8005d0e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8005d54 <ComputeMandel_XY+0x90>
{
	// Compute C plane coos. 
	float a = (float)px/(c->width-1)  * c->xs + c->x0;
	float b = (float)py/(c->height-1) * c->ys + c->y0;
	
	int i=0;
 8005d12:	2000      	movs	r0, #0
	float x=0,y=0;
 8005d14:	eef0 7a47 	vmov.f32	s15, s14
	{
		float xx = x*x;
		float yy = y*y;
		x = xx - yy + a;
		y = 2*x*y + b;
		if(xx+yy>4) break;
 8005d18:	eeb1 5a00 	vmov.f32	s10, #16
	float a = (float)px/(c->width-1)  * c->xs + c->x0;
	float b = (float)py/(c->height-1) * c->ys + c->y0;
	
	int i=0;
	float x=0,y=0;
	while(i<c->maxit)
 8005d1c:	e017      	b.n	8005d4e <ComputeMandel_XY+0x8a>
	{
		float xx = x*x;
 8005d1e:	ee67 5aa7 	vmul.f32	s11, s15, s15
		float yy = y*y;
 8005d22:	ee67 7a07 	vmul.f32	s15, s14, s14
		x = xx - yy + a;
		y = 2*x*y + b;
		if(xx+yy>4) break;
 8005d26:	ee75 4aa7 	vadd.f32	s9, s11, s15
 8005d2a:	eef4 4ac5 	vcmpe.f32	s9, s10
 8005d2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d32:	dc0e      	bgt.n	8005d52 <ComputeMandel_XY+0x8e>
	float x=0,y=0;
	while(i<c->maxit)
	{
		float xx = x*x;
		float yy = y*y;
		x = xx - yy + a;
 8005d34:	ee75 7ae7 	vsub.f32	s15, s11, s15
		y = 2*x*y + b;
 8005d38:	eef0 4a66 	vmov.f32	s9, s13
	float x=0,y=0;
	while(i<c->maxit)
	{
		float xx = x*x;
		float yy = y*y;
		x = xx - yy + a;
 8005d3c:	ee77 7a86 	vadd.f32	s15, s15, s12
		y = 2*x*y + b;
		if(xx+yy>4) break;
		++i;
 8005d40:	3001      	adds	r0, #1
	while(i<c->maxit)
	{
		float xx = x*x;
		float yy = y*y;
		x = xx - yy + a;
		y = 2*x*y + b;
 8005d42:	ee77 5aa7 	vadd.f32	s11, s15, s15
 8005d46:	ee45 4a87 	vmla.f32	s9, s11, s14
 8005d4a:	eeb0 7a64 	vmov.f32	s14, s9
	float a = (float)px/(c->width-1)  * c->xs + c->x0;
	float b = (float)py/(c->height-1) * c->ys + c->y0;
	
	int i=0;
	float x=0,y=0;
	while(i<c->maxit)
 8005d4e:	4298      	cmp	r0, r3
 8005d50:	dbe5      	blt.n	8005d1e <ComputeMandel_XY+0x5a>
		if(xx+yy>4) break;
		++i;
	}
	
	return(i);
}
 8005d52:	4770      	bx	lr
 8005d54:	00000000 	.word	0x00000000

08005d58 <ComputeMandelbrot>:


// Returns number of black pixels. 
int ComputeMandelbrot(int w,int h)
{
 8005d58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct MandelContext c;
	c.width=w;
	c.height=h;
	
	// Coordinates for the full apple man. 
	c.x0=-2.5f;
 8005d5c:	4b1c      	ldr	r3, [pc, #112]	; (8005dd0 <ComputeMandelbrot+0x78>)
}


// Returns number of black pixels. 
int ComputeMandelbrot(int w,int h)
{
 8005d5e:	b088      	sub	sp, #32
	c.y0=-1.5f;
	c.xs=4;
	c.ys=3;
	c.maxit=255;
	
	int x,y,sum=0;
 8005d60:	2400      	movs	r4, #0
	struct MandelContext c;
	c.width=w;
	c.height=h;
	
	// Coordinates for the full apple man. 
	c.x0=-2.5f;
 8005d62:	9303      	str	r3, [sp, #12]
	c.y0=-1.5f;
 8005d64:	4b1b      	ldr	r3, [pc, #108]	; (8005dd4 <ComputeMandelbrot+0x7c>)
// Returns number of black pixels. 
int ComputeMandelbrot(int w,int h)
{
	
	struct MandelContext c;
	c.width=w;
 8005d66:	9001      	str	r0, [sp, #4]
	c.height=h;
	
	// Coordinates for the full apple man. 
	c.x0=-2.5f;
	c.y0=-1.5f;
 8005d68:	9304      	str	r3, [sp, #16]
	c.xs=4;
 8005d6a:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 8005d6e:	9305      	str	r3, [sp, #20]
	c.ys=3;
 8005d70:	4b19      	ldr	r3, [pc, #100]	; (8005dd8 <ComputeMandelbrot+0x80>)
int ComputeMandelbrot(int w,int h)
{
	
	struct MandelContext c;
	c.width=w;
	c.height=h;
 8005d72:	9102      	str	r1, [sp, #8]
	
	// Coordinates for the full apple man. 
	c.x0=-2.5f;
	c.y0=-1.5f;
	c.xs=4;
	c.ys=3;
 8005d74:	9306      	str	r3, [sp, #24]
	c.maxit=255;
 8005d76:	23ff      	movs	r3, #255	; 0xff
}


// Returns number of black pixels. 
int ComputeMandelbrot(int w,int h)
{
 8005d78:	4680      	mov	r8, r0
 8005d7a:	460f      	mov	r7, r1
	// Coordinates for the full apple man. 
	c.x0=-2.5f;
	c.y0=-1.5f;
	c.xs=4;
	c.ys=3;
	c.maxit=255;
 8005d7c:	9307      	str	r3, [sp, #28]
	
	int x,y,sum=0;
	for(y=0; y<c.height; y++)
 8005d7e:	4625      	mov	r5, r4
 8005d80:	e020      	b.n	8005dc4 <ComputeMandelbrot+0x6c>
	{
		for(x=0; x<c.width; x++)
		{
			int r=ComputeMandel_XY(&c,x,y);
 8005d82:	4631      	mov	r1, r6
 8005d84:	a801      	add	r0, sp, #4
 8005d86:	462a      	mov	r2, r5
 8005d88:	f7ff ff9c 	bl	8005cc4 <ComputeMandel_XY>
			sum += r>=c.maxit ? 1 : 0;
 8005d8c:	28fe      	cmp	r0, #254	; 0xfe
 8005d8e:	bfc8      	it	gt
 8005d90:	3401      	addgt	r4, #1
#ifdef TEST_ON_HOST
			printf("%c", r>=c.maxit ? '#' : ' ');
#else
			if(r>=c.maxit) GPIO_SetBits(GPIOD, GPIO_Pin_13);
 8005d92:	4812      	ldr	r0, [pc, #72]	; (8005ddc <ComputeMandelbrot+0x84>)
 8005d94:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005d98:	dd07      	ble.n	8005daa <ComputeMandelbrot+0x52>
 8005d9a:	f7fc ffe2 	bl	8002d62 <GPIO_SetBits>
			else           GPIO_ResetBits(GPIOD, GPIO_Pin_13);
			
			if(r>=c.maxit) GPIO_ResetBits(GPIOD, GPIO_Pin_14);
 8005d9e:	480f      	ldr	r0, [pc, #60]	; (8005ddc <ComputeMandelbrot+0x84>)
 8005da0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005da4:	f7fc ffdf 	bl	8002d66 <GPIO_ResetBits>
 8005da8:	e006      	b.n	8005db8 <ComputeMandelbrot+0x60>
			sum += r>=c.maxit ? 1 : 0;
#ifdef TEST_ON_HOST
			printf("%c", r>=c.maxit ? '#' : ' ');
#else
			if(r>=c.maxit) GPIO_SetBits(GPIOD, GPIO_Pin_13);
			else           GPIO_ResetBits(GPIOD, GPIO_Pin_13);
 8005daa:	f7fc ffdc 	bl	8002d66 <GPIO_ResetBits>
			
			if(r>=c.maxit) GPIO_ResetBits(GPIOD, GPIO_Pin_14);
			else           GPIO_SetBits(GPIOD, GPIO_Pin_14);
 8005dae:	480b      	ldr	r0, [pc, #44]	; (8005ddc <ComputeMandelbrot+0x84>)
 8005db0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005db4:	f7fc ffd5 	bl	8002d62 <GPIO_SetBits>
	c.maxit=255;
	
	int x,y,sum=0;
	for(y=0; y<c.height; y++)
	{
		for(x=0; x<c.width; x++)
 8005db8:	3601      	adds	r6, #1
 8005dba:	e000      	b.n	8005dbe <ComputeMandelbrot+0x66>
	c.xs=4;
	c.ys=3;
	c.maxit=255;
	
	int x,y,sum=0;
	for(y=0; y<c.height; y++)
 8005dbc:	2600      	movs	r6, #0
	{
		for(x=0; x<c.width; x++)
 8005dbe:	4546      	cmp	r6, r8
 8005dc0:	dbdf      	blt.n	8005d82 <ComputeMandelbrot+0x2a>
	c.xs=4;
	c.ys=3;
	c.maxit=255;
	
	int x,y,sum=0;
	for(y=0; y<c.height; y++)
 8005dc2:	3501      	adds	r5, #1
 8005dc4:	42bd      	cmp	r5, r7
 8005dc6:	dbf9      	blt.n	8005dbc <ComputeMandelbrot+0x64>
		printf("|\n");
#endif
	}
	
	return(sum);
}
 8005dc8:	4620      	mov	r0, r4
 8005dca:	b008      	add	sp, #32
 8005dcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005dd0:	c0200000 	.word	0xc0200000
 8005dd4:	bfc00000 	.word	0xbfc00000
 8005dd8:	40400000 	.word	0x40400000
 8005ddc:	40020c00 	.word	0x40020c00

08005de0 <SqrtBenchmark>:

#define nop()       __asm__ __volatile__("nop")

int SqrtBenchmark(void)
{
 8005de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005de4:	ed2d 8b02 	vpush	{d8}
	int i,r=0;
	for(i=0; i<1000000; i++)
	{
		float f=i;
		GPIOD->BSRRL = GPIO_Pin_15;  // Take pin HIGH. 
 8005de8:	4c1b      	ldr	r4, [pc, #108]	; (8005e58 <SqrtBenchmark+0x78>)
#define nop()       __asm__ __volatile__("nop")

int SqrtBenchmark(void)
{
	int i,r=0;
	for(i=0; i<1000000; i++)
 8005dea:	4f1c      	ldr	r7, [pc, #112]	; (8005e5c <SqrtBenchmark+0x7c>)
}

#define nop()       __asm__ __volatile__("nop")

int SqrtBenchmark(void)
{
 8005dec:	b082      	sub	sp, #8
	int i,r=0;
	for(i=0; i<1000000; i++)
 8005dee:	2500      	movs	r5, #0
	{
		float f=i;
		GPIOD->BSRRL = GPIO_Pin_15;  // Take pin HIGH. 
 8005df0:	f44f 4600 	mov.w	r6, #32768	; 0x8000
 8005df4:	f248 0800 	movw	r8, #32768	; 0x8000
		nop();
		nop();
		nop();
		nop();
		GPIOD->BSRRH = GPIO_Pin_15;
		if(r>10) ++r;
 8005df8:	eeb2 8a04 	vmov.f32	s16, #36	; 0x24
 8005dfc:	eef7 8a00 	vmov.f32	s17, #112	; 0x70
	int i,r=0;
	for(i=0; i<1000000; i++)
	{
		float f=i;
		GPIOD->BSRRL = GPIO_Pin_15;  // Take pin HIGH. 
		volatile float r=sqrtf(f);   // Compute sqrt. 20 cycles. 
 8005e00:	ee07 5a90 	vmov	s15, r5
{
	int i,r=0;
	for(i=0; i<1000000; i++)
	{
		float f=i;
		GPIOD->BSRRL = GPIO_Pin_15;  // Take pin HIGH. 
 8005e04:	f8a4 8018 	strh.w	r8, [r4, #24]
		volatile float r=sqrtf(f);   // Compute sqrt. 20 cycles. 
 8005e08:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8005e0c:	f000 f8f0 	bl	8005ff0 <sqrtf>
 8005e10:	ed8d 0a01 	vstr	s0, [sp, #4]
		GPIOD->BSRRH = GPIO_Pin_15;  // Take pin LOW. 
 8005e14:	8366      	strh	r6, [r4, #26]
		nop();
 8005e16:	bf00      	nop
		nop();
 8005e18:	bf00      	nop
		nop();
 8005e1a:	bf00      	nop
		nop();    // 4 nops -> 30ns
 8005e1c:	bf00      	nop
		nop();    // 5 nops -> 36ns  -> 168 MHz, single cycle exec
 8005e1e:	bf00      	nop
		GPIOD->BSRRL = GPIO_Pin_15; // Take pin HIGH. 
 8005e20:	8326      	strh	r6, [r4, #24]
		nop();
 8005e22:	bf00      	nop
		nop();
 8005e24:	bf00      	nop
		nop();
 8005e26:	bf00      	nop
		nop();
 8005e28:	bf00      	nop
		GPIOD->BSRRH = GPIO_Pin_15;
 8005e2a:	8366      	strh	r6, [r4, #26]
		if(r>10) ++r;
 8005e2c:	eddd 7a01 	vldr	s15, [sp, #4]
 8005e30:	eef4 7ac8 	vcmpe.f32	s15, s16
 8005e34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e38:	dd05      	ble.n	8005e46 <SqrtBenchmark+0x66>
 8005e3a:	eddd 7a01 	vldr	s15, [sp, #4]
 8005e3e:	ee77 7aa8 	vadd.f32	s15, s15, s17
 8005e42:	edcd 7a01 	vstr	s15, [sp, #4]
#define nop()       __asm__ __volatile__("nop")

int SqrtBenchmark(void)
{
	int i,r=0;
	for(i=0; i<1000000; i++)
 8005e46:	3501      	adds	r5, #1
 8005e48:	42bd      	cmp	r5, r7
 8005e4a:	d1d9      	bne.n	8005e00 <SqrtBenchmark+0x20>
		nop();
		GPIOD->BSRRH = GPIO_Pin_15;
		if(r>10) ++r;
	}
	return(r);
}
 8005e4c:	2000      	movs	r0, #0
 8005e4e:	b002      	add	sp, #8
 8005e50:	ecbd 8b02 	vpop	{d8}
 8005e54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e58:	40020c00 	.word	0x40020c00
 8005e5c:	000f4240 	.word	0x000f4240
 8005e60:	08006bc4 	.word	0x08006bc4
 8005e64:	20000000 	.word	0x20000000
 8005e68:	20000480 	.word	0x20000480
 8005e6c:	20000480 	.word	0x20000480
 8005e70:	20000488 	.word	0x20000488

08005e74 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8005e74:	4770      	bx	lr

08005e76 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8005e76:	e7fe      	b.n	8005e76 <HardFault_Handler>

08005e78 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8005e78:	e7fe      	b.n	8005e78 <MemManage_Handler>

08005e7a <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8005e7a:	e7fe      	b.n	8005e7a <BusFault_Handler>

08005e7c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8005e7c:	e7fe      	b.n	8005e7c <UsageFault_Handler>

08005e7e <SVC_Handler>:
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
}
 8005e7e:	4770      	bx	lr

08005e80 <DebugMon_Handler>:
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
}
 8005e80:	4770      	bx	lr

08005e82 <PendSV_Handler>:
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
}
 8005e82:	4770      	bx	lr

08005e84 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005e84:	4b36      	ldr	r3, [pc, #216]	; (8005f60 <SystemInit+0xdc>)
 8005e86:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005e8a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8005e8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8005e92:	4b34      	ldr	r3, [pc, #208]	; (8005f64 <SystemInit+0xe0>)
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	f042 0201 	orr.w	r2, r2, #1
 8005e9a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8005ea0:	6819      	ldr	r1, [r3, #0]
 8005ea2:	f021 7184 	bic.w	r1, r1, #17301504	; 0x1080000
 8005ea6:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8005eaa:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8005eac:	492e      	ldr	r1, [pc, #184]	; (8005f68 <SystemInit+0xe4>)
 8005eae:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005eb0:	6819      	ldr	r1, [r3, #0]
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005eb2:	b082      	sub	sp, #8

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005eb4:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8005eb8:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8005eba:	60da      	str	r2, [r3, #12]
static void SetSysClock(void)
{
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8005ebc:	9200      	str	r2, [sp, #0]
 8005ebe:	9201      	str	r2, [sp, #4]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8005ec0:	681a      	ldr	r2, [r3, #0]
 8005ec2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005ec6:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8005ece:	9201      	str	r2, [sp, #4]
    StartUpCounter++;
 8005ed0:	9a00      	ldr	r2, [sp, #0]
 8005ed2:	3201      	adds	r2, #1
 8005ed4:	9200      	str	r2, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8005ed6:	9a01      	ldr	r2, [sp, #4]
 8005ed8:	b91a      	cbnz	r2, 8005ee2 <SystemInit+0x5e>
 8005eda:	9a00      	ldr	r2, [sp, #0]
 8005edc:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 8005ee0:	d1f2      	bne.n	8005ec8 <SystemInit+0x44>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8005ee2:	4b20      	ldr	r3, [pc, #128]	; (8005f64 <SystemInit+0xe0>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
 8005eea:	bf18      	it	ne
 8005eec:	2301      	movne	r3, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8005eee:	9301      	str	r3, [sp, #4]
  }

  if (HSEStatus == (uint32_t)0x01)
 8005ef0:	9b01      	ldr	r3, [sp, #4]
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d12e      	bne.n	8005f54 <SystemInit+0xd0>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8005ef6:	4b1b      	ldr	r3, [pc, #108]	; (8005f64 <SystemInit+0xe0>)
 8005ef8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005efa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005efe:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8005f00:	4a1a      	ldr	r2, [pc, #104]	; (8005f6c <SystemInit+0xe8>)
 8005f02:	6811      	ldr	r1, [r2, #0]
 8005f04:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8005f08:	6011      	str	r1, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8005f0a:	689a      	ldr	r2, [r3, #8]
 8005f0c:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8005f0e:	689a      	ldr	r2, [r3, #8]
 8005f10:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f14:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8005f16:	689a      	ldr	r2, [r3, #8]
 8005f18:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 8005f1c:	609a      	str	r2, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8005f1e:	4a14      	ldr	r2, [pc, #80]	; (8005f70 <SystemInit+0xec>)
 8005f20:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8005f28:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8005f2a:	6819      	ldr	r1, [r3, #0]
 8005f2c:	4a0d      	ldr	r2, [pc, #52]	; (8005f64 <SystemInit+0xe0>)
 8005f2e:	0189      	lsls	r1, r1, #6
 8005f30:	d5fb      	bpl.n	8005f2a <SystemInit+0xa6>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8005f32:	4b10      	ldr	r3, [pc, #64]	; (8005f74 <SystemInit+0xf0>)
 8005f34:	f240 6105 	movw	r1, #1541	; 0x605
 8005f38:	6019      	str	r1, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8005f3a:	6893      	ldr	r3, [r2, #8]
 8005f3c:	f023 0303 	bic.w	r3, r3, #3
 8005f40:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8005f42:	6893      	ldr	r3, [r2, #8]
 8005f44:	f043 0302 	orr.w	r3, r3, #2
 8005f48:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8005f4a:	6893      	ldr	r3, [r2, #8]
 8005f4c:	f003 030c 	and.w	r3, r3, #12
 8005f50:	2b08      	cmp	r3, #8
 8005f52:	d1fa      	bne.n	8005f4a <SystemInit+0xc6>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005f54:	4b02      	ldr	r3, [pc, #8]	; (8005f60 <SystemInit+0xdc>)
 8005f56:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005f5a:	609a      	str	r2, [r3, #8]
#endif
}
 8005f5c:	b002      	add	sp, #8
 8005f5e:	4770      	bx	lr
 8005f60:	e000ed00 	.word	0xe000ed00
 8005f64:	40023800 	.word	0x40023800
 8005f68:	24003010 	.word	0x24003010
 8005f6c:	40007000 	.word	0x40007000
 8005f70:	07405419 	.word	0x07405419
 8005f74:	40023c00 	.word	0x40023c00

08005f78 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8005f78:	4b18      	ldr	r3, [pc, #96]	; (8005fdc <SystemCoreClockUpdate+0x64>)
 8005f7a:	4a19      	ldr	r2, [pc, #100]	; (8005fe0 <SystemCoreClockUpdate+0x68>)
 8005f7c:	6899      	ldr	r1, [r3, #8]
 8005f7e:	f001 010c 	and.w	r1, r1, #12

  switch (tmp)
 8005f82:	2904      	cmp	r1, #4
 8005f84:	d003      	beq.n	8005f8e <SystemCoreClockUpdate+0x16>
 8005f86:	2908      	cmp	r1, #8
 8005f88:	d003      	beq.n	8005f92 <SystemCoreClockUpdate+0x1a>
 8005f8a:	4b16      	ldr	r3, [pc, #88]	; (8005fe4 <SystemCoreClockUpdate+0x6c>)
 8005f8c:	e019      	b.n	8005fc2 <SystemCoreClockUpdate+0x4a>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8005f8e:	4b16      	ldr	r3, [pc, #88]	; (8005fe8 <SystemCoreClockUpdate+0x70>)
 8005f90:	e017      	b.n	8005fc2 <SystemCoreClockUpdate+0x4a>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8005f92:	6859      	ldr	r1, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005f94:	685a      	ldr	r2, [r3, #4]
      
      if (pllsource != 0)
 8005f96:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8005f9a:	6859      	ldr	r1, [r3, #4]
 8005f9c:	bf14      	ite	ne
 8005f9e:	4b12      	ldrne	r3, [pc, #72]	; (8005fe8 <SystemCoreClockUpdate+0x70>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8005fa0:	4b10      	ldreq	r3, [pc, #64]	; (8005fe4 <SystemCoreClockUpdate+0x6c>)

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005fa2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8005fa6:	fbb3 f3f2 	udiv	r3, r3, r2
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8005faa:	4a0c      	ldr	r2, [pc, #48]	; (8005fdc <SystemCoreClockUpdate+0x64>)
 8005fac:	6852      	ldr	r2, [r2, #4]
 8005fae:	f3c2 4201 	ubfx	r2, r2, #16, #2
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8005fb2:	f3c1 1188 	ubfx	r1, r1, #6, #9
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8005fb6:	3201      	adds	r2, #1
 8005fb8:	0052      	lsls	r2, r2, #1
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8005fba:	434b      	muls	r3, r1
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
      SystemCoreClock = pllvco/pllp;
 8005fbc:	fbb3 f3f2 	udiv	r3, r3, r2
 8005fc0:	4a07      	ldr	r2, [pc, #28]	; (8005fe0 <SystemCoreClockUpdate+0x68>)
 8005fc2:	6013      	str	r3, [r2, #0]
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8005fc4:	4b05      	ldr	r3, [pc, #20]	; (8005fdc <SystemCoreClockUpdate+0x64>)
 8005fc6:	689a      	ldr	r2, [r3, #8]
 8005fc8:	4b05      	ldr	r3, [pc, #20]	; (8005fe0 <SystemCoreClockUpdate+0x68>)
 8005fca:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8005fce:	189a      	adds	r2, r3, r2
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8005fd0:	6819      	ldr	r1, [r3, #0]
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8005fd2:	7912      	ldrb	r2, [r2, #4]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8005fd4:	fa31 f202 	lsrs.w	r2, r1, r2
 8005fd8:	601a      	str	r2, [r3, #0]
}
 8005fda:	4770      	bx	lr
 8005fdc:	40023800 	.word	0x40023800
 8005fe0:	20000038 	.word	0x20000038
 8005fe4:	00f42400 	.word	0x00f42400
 8005fe8:	007a1200 	.word	0x007a1200
 8005fec:	00000000 	.word	0x00000000

08005ff0 <sqrtf>:
 8005ff0:	b510      	push	{r4, lr}
 8005ff2:	ed2d 8b02 	vpush	{d8}
 8005ff6:	4c2c      	ldr	r4, [pc, #176]	; (80060a8 <sqrtf+0xb8>)
 8005ff8:	b08a      	sub	sp, #40	; 0x28
 8005ffa:	eeb0 8a40 	vmov.f32	s16, s0
 8005ffe:	f000 f857 	bl	80060b0 <__ieee754_sqrtf>
 8006002:	f994 3000 	ldrsb.w	r3, [r4]
 8006006:	3301      	adds	r3, #1
 8006008:	eef0 8a40 	vmov.f32	s17, s0
 800600c:	d031      	beq.n	8006072 <sqrtf+0x82>
 800600e:	eeb0 0a48 	vmov.f32	s0, s16
 8006012:	f000 f89d 	bl	8006150 <__fpclassifyf>
 8006016:	b360      	cbz	r0, 8006072 <sqrtf+0x82>
 8006018:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800601c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006020:	d527      	bpl.n	8006072 <sqrtf+0x82>
 8006022:	2301      	movs	r3, #1
 8006024:	9300      	str	r3, [sp, #0]
 8006026:	4b21      	ldr	r3, [pc, #132]	; (80060ac <sqrtf+0xbc>)
 8006028:	eeb0 0a48 	vmov.f32	s0, s16
 800602c:	9301      	str	r3, [sp, #4]
 800602e:	2300      	movs	r3, #0
 8006030:	9308      	str	r3, [sp, #32]
 8006032:	f000 fa23 	bl	800647c <__aeabi_f2d>
 8006036:	7824      	ldrb	r4, [r4, #0]
 8006038:	ed8d 0b04 	vstr	d0, [sp, #16]
 800603c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006040:	b1ec      	cbz	r4, 800607e <sqrtf+0x8e>
 8006042:	ed9f 0b17 	vldr	d0, [pc, #92]	; 80060a0 <sqrtf+0xb0>
 8006046:	eeb0 1a40 	vmov.f32	s2, s0
 800604a:	eef0 1a60 	vmov.f32	s3, s1
 800604e:	f000 fb93 	bl	8006778 <__aeabi_ddiv>
 8006052:	2c02      	cmp	r4, #2
 8006054:	ed8d 0b06 	vstr	d0, [sp, #24]
 8006058:	d117      	bne.n	800608a <sqrtf+0x9a>
 800605a:	f000 f8a5 	bl	80061a8 <__errno>
 800605e:	2321      	movs	r3, #33	; 0x21
 8006060:	6003      	str	r3, [r0, #0]
 8006062:	9b08      	ldr	r3, [sp, #32]
 8006064:	b9bb      	cbnz	r3, 8006096 <sqrtf+0xa6>
 8006066:	ed9d 0b06 	vldr	d0, [sp, #24]
 800606a:	f000 fc6d 	bl	8006948 <__aeabi_d2f>
 800606e:	eef0 8a40 	vmov.f32	s17, s0
 8006072:	eeb0 0a68 	vmov.f32	s0, s17
 8006076:	b00a      	add	sp, #40	; 0x28
 8006078:	ecbd 8b02 	vpop	{d8}
 800607c:	bd10      	pop	{r4, pc}
 800607e:	2200      	movs	r2, #0
 8006080:	2300      	movs	r3, #0
 8006082:	ec43 2b17 	vmov	d7, r2, r3
 8006086:	ed8d 7b06 	vstr	d7, [sp, #24]
 800608a:	4668      	mov	r0, sp
 800608c:	f000 f85e 	bl	800614c <matherr>
 8006090:	2800      	cmp	r0, #0
 8006092:	d1e6      	bne.n	8006062 <sqrtf+0x72>
 8006094:	e7e1      	b.n	800605a <sqrtf+0x6a>
 8006096:	f000 f887 	bl	80061a8 <__errno>
 800609a:	9b08      	ldr	r3, [sp, #32]
 800609c:	6003      	str	r3, [r0, #0]
 800609e:	e7e2      	b.n	8006066 <sqrtf+0x76>
	...
 80060a8:	2000004c 	.word	0x2000004c
 80060ac:	08006bb8 	.word	0x08006bb8

080060b0 <__ieee754_sqrtf>:
 80060b0:	ee10 3a10 	vmov	r3, s0
 80060b4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80060b8:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80060bc:	b470      	push	{r4, r5, r6}
 80060be:	bf28      	it	cs
 80060c0:	ee00 0a00 	vmlacs.f32	s0, s0, s0
 80060c4:	d23e      	bcs.n	8006144 <__ieee754_sqrtf+0x94>
 80060c6:	2a00      	cmp	r2, #0
 80060c8:	d03c      	beq.n	8006144 <__ieee754_sqrtf+0x94>
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	bfbc      	itt	lt
 80060ce:	ee30 0a40 	vsublt.f32	s0, s0, s0
 80060d2:	ee80 0a00 	vdivlt.f32	s0, s0, s0
 80060d6:	db35      	blt.n	8006144 <__ieee754_sqrtf+0x94>
 80060d8:	15d9      	asrs	r1, r3, #23
 80060da:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 80060de:	d209      	bcs.n	80060f4 <__ieee754_sqrtf+0x44>
 80060e0:	f413 0200 	ands.w	r2, r3, #8388608	; 0x800000
 80060e4:	d130      	bne.n	8006148 <__ieee754_sqrtf+0x98>
 80060e6:	005b      	lsls	r3, r3, #1
 80060e8:	3201      	adds	r2, #1
 80060ea:	0218      	lsls	r0, r3, #8
 80060ec:	d5fb      	bpl.n	80060e6 <__ieee754_sqrtf+0x36>
 80060ee:	f1c2 0201 	rsb	r2, r2, #1
 80060f2:	1889      	adds	r1, r1, r2
 80060f4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80060f8:	f1a1 027f 	sub.w	r2, r1, #127	; 0x7f
 80060fc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006100:	07d1      	lsls	r1, r2, #31
 8006102:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006106:	bf48      	it	mi
 8006108:	005b      	lslmi	r3, r3, #1
 800610a:	2500      	movs	r5, #0
 800610c:	1056      	asrs	r6, r2, #1
 800610e:	005b      	lsls	r3, r3, #1
 8006110:	2119      	movs	r1, #25
 8006112:	462c      	mov	r4, r5
 8006114:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006118:	18a0      	adds	r0, r4, r2
 800611a:	4298      	cmp	r0, r3
 800611c:	bfde      	ittt	le
 800611e:	ebc0 0303 	rsble	r3, r0, r3
 8006122:	1884      	addle	r4, r0, r2
 8006124:	18ad      	addle	r5, r5, r2
 8006126:	005b      	lsls	r3, r3, #1
 8006128:	0852      	lsrs	r2, r2, #1
 800612a:	3901      	subs	r1, #1
 800612c:	d1f4      	bne.n	8006118 <__ieee754_sqrtf+0x68>
 800612e:	b113      	cbz	r3, 8006136 <__ieee754_sqrtf+0x86>
 8006130:	f005 0301 	and.w	r3, r5, #1
 8006134:	195d      	adds	r5, r3, r5
 8006136:	106d      	asrs	r5, r5, #1
 8006138:	f105 557c 	add.w	r5, r5, #1056964608	; 0x3f000000
 800613c:	eb05 55c6 	add.w	r5, r5, r6, lsl #23
 8006140:	ee00 5a10 	vmov	s0, r5
 8006144:	bc70      	pop	{r4, r5, r6}
 8006146:	4770      	bx	lr
 8006148:	2201      	movs	r2, #1
 800614a:	e7d2      	b.n	80060f2 <__ieee754_sqrtf+0x42>

0800614c <matherr>:
 800614c:	2000      	movs	r0, #0
 800614e:	4770      	bx	lr

08006150 <__fpclassifyf>:
 8006150:	ee10 0a10 	vmov	r0, s0
 8006154:	2800      	cmp	r0, #0
 8006156:	bf18      	it	ne
 8006158:	f1b0 4f00 	cmpne.w	r0, #2147483648	; 0x80000000
 800615c:	d101      	bne.n	8006162 <__fpclassifyf+0x12>
 800615e:	2002      	movs	r0, #2
 8006160:	4770      	bx	lr
 8006162:	f100 42ff 	add.w	r2, r0, #2139095040	; 0x7f800000
 8006166:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 800616a:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800616e:	bf28      	it	cs
 8006170:	f1b2 4ffe 	cmpcs.w	r2, #2130706432	; 0x7f000000
 8006174:	d201      	bcs.n	800617a <__fpclassifyf+0x2a>
 8006176:	2004      	movs	r0, #4
 8006178:	4770      	bx	lr
 800617a:	f100 4200 	add.w	r2, r0, #2147483648	; 0x80000000
 800617e:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8006182:	3a01      	subs	r2, #1
 8006184:	f2c0 037f 	movt	r3, #127	; 0x7f
 8006188:	1e41      	subs	r1, r0, #1
 800618a:	4299      	cmp	r1, r3
 800618c:	bf88      	it	hi
 800618e:	429a      	cmphi	r2, r3
 8006190:	d801      	bhi.n	8006196 <__fpclassifyf+0x46>
 8006192:	2003      	movs	r0, #3
 8006194:	4770      	bx	lr
 8006196:	f510 0f00 	cmn.w	r0, #8388608	; 0x800000
 800619a:	bf18      	it	ne
 800619c:	f1b0 4fff 	cmpne.w	r0, #2139095040	; 0x7f800000
 80061a0:	bf14      	ite	ne
 80061a2:	2000      	movne	r0, #0
 80061a4:	2001      	moveq	r0, #1
 80061a6:	4770      	bx	lr

080061a8 <__errno>:
 80061a8:	f240 0350 	movw	r3, #80	; 0x50
 80061ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80061b0:	6818      	ldr	r0, [r3, #0]
 80061b2:	4770      	bx	lr

080061b4 <__aeabi_drsub>:
 80061b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80061b8:	e002      	b.n	80061c0 <__adddf3>
 80061ba:	bf00      	nop

080061bc <__aeabi_dsub>:
 80061bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080061c0 <__adddf3>:
 80061c0:	b530      	push	{r4, r5, lr}
 80061c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80061c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80061ca:	ea94 0f05 	teq	r4, r5
 80061ce:	bf08      	it	eq
 80061d0:	ea90 0f02 	teqeq	r0, r2
 80061d4:	bf1f      	itttt	ne
 80061d6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80061da:	ea55 0c02 	orrsne.w	ip, r5, r2
 80061de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80061e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80061e6:	f000 80e2 	beq.w	80063ae <__adddf3+0x1ee>
 80061ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80061ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80061f2:	bfb8      	it	lt
 80061f4:	426d      	neglt	r5, r5
 80061f6:	dd0c      	ble.n	8006212 <__adddf3+0x52>
 80061f8:	442c      	add	r4, r5
 80061fa:	ea80 0202 	eor.w	r2, r0, r2
 80061fe:	ea81 0303 	eor.w	r3, r1, r3
 8006202:	ea82 0000 	eor.w	r0, r2, r0
 8006206:	ea83 0101 	eor.w	r1, r3, r1
 800620a:	ea80 0202 	eor.w	r2, r0, r2
 800620e:	ea81 0303 	eor.w	r3, r1, r3
 8006212:	2d36      	cmp	r5, #54	; 0x36
 8006214:	bf88      	it	hi
 8006216:	bd30      	pophi	{r4, r5, pc}
 8006218:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800621c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8006220:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8006224:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8006228:	d002      	beq.n	8006230 <__adddf3+0x70>
 800622a:	4240      	negs	r0, r0
 800622c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8006230:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8006234:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8006238:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800623c:	d002      	beq.n	8006244 <__adddf3+0x84>
 800623e:	4252      	negs	r2, r2
 8006240:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8006244:	ea94 0f05 	teq	r4, r5
 8006248:	f000 80a7 	beq.w	800639a <__adddf3+0x1da>
 800624c:	f1a4 0401 	sub.w	r4, r4, #1
 8006250:	f1d5 0e20 	rsbs	lr, r5, #32
 8006254:	db0d      	blt.n	8006272 <__adddf3+0xb2>
 8006256:	fa02 fc0e 	lsl.w	ip, r2, lr
 800625a:	fa22 f205 	lsr.w	r2, r2, r5
 800625e:	1880      	adds	r0, r0, r2
 8006260:	f141 0100 	adc.w	r1, r1, #0
 8006264:	fa03 f20e 	lsl.w	r2, r3, lr
 8006268:	1880      	adds	r0, r0, r2
 800626a:	fa43 f305 	asr.w	r3, r3, r5
 800626e:	4159      	adcs	r1, r3
 8006270:	e00e      	b.n	8006290 <__adddf3+0xd0>
 8006272:	f1a5 0520 	sub.w	r5, r5, #32
 8006276:	f10e 0e20 	add.w	lr, lr, #32
 800627a:	2a01      	cmp	r2, #1
 800627c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8006280:	bf28      	it	cs
 8006282:	f04c 0c02 	orrcs.w	ip, ip, #2
 8006286:	fa43 f305 	asr.w	r3, r3, r5
 800628a:	18c0      	adds	r0, r0, r3
 800628c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8006290:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006294:	d507      	bpl.n	80062a6 <__adddf3+0xe6>
 8006296:	f04f 0e00 	mov.w	lr, #0
 800629a:	f1dc 0c00 	rsbs	ip, ip, #0
 800629e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80062a2:	eb6e 0101 	sbc.w	r1, lr, r1
 80062a6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80062aa:	d31b      	bcc.n	80062e4 <__adddf3+0x124>
 80062ac:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80062b0:	d30c      	bcc.n	80062cc <__adddf3+0x10c>
 80062b2:	0849      	lsrs	r1, r1, #1
 80062b4:	ea5f 0030 	movs.w	r0, r0, rrx
 80062b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80062bc:	f104 0401 	add.w	r4, r4, #1
 80062c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80062c4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80062c8:	f080 809a 	bcs.w	8006400 <__adddf3+0x240>
 80062cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80062d0:	bf08      	it	eq
 80062d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80062d6:	f150 0000 	adcs.w	r0, r0, #0
 80062da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80062de:	ea41 0105 	orr.w	r1, r1, r5
 80062e2:	bd30      	pop	{r4, r5, pc}
 80062e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80062e8:	4140      	adcs	r0, r0
 80062ea:	eb41 0101 	adc.w	r1, r1, r1
 80062ee:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80062f2:	f1a4 0401 	sub.w	r4, r4, #1
 80062f6:	d1e9      	bne.n	80062cc <__adddf3+0x10c>
 80062f8:	f091 0f00 	teq	r1, #0
 80062fc:	bf04      	itt	eq
 80062fe:	4601      	moveq	r1, r0
 8006300:	2000      	moveq	r0, #0
 8006302:	fab1 f381 	clz	r3, r1
 8006306:	bf08      	it	eq
 8006308:	3320      	addeq	r3, #32
 800630a:	f1a3 030b 	sub.w	r3, r3, #11
 800630e:	f1b3 0220 	subs.w	r2, r3, #32
 8006312:	da0c      	bge.n	800632e <__adddf3+0x16e>
 8006314:	320c      	adds	r2, #12
 8006316:	dd08      	ble.n	800632a <__adddf3+0x16a>
 8006318:	f102 0c14 	add.w	ip, r2, #20
 800631c:	f1c2 020c 	rsb	r2, r2, #12
 8006320:	fa01 f00c 	lsl.w	r0, r1, ip
 8006324:	fa21 f102 	lsr.w	r1, r1, r2
 8006328:	e00c      	b.n	8006344 <__adddf3+0x184>
 800632a:	f102 0214 	add.w	r2, r2, #20
 800632e:	bfd8      	it	le
 8006330:	f1c2 0c20 	rsble	ip, r2, #32
 8006334:	fa01 f102 	lsl.w	r1, r1, r2
 8006338:	fa20 fc0c 	lsr.w	ip, r0, ip
 800633c:	bfdc      	itt	le
 800633e:	ea41 010c 	orrle.w	r1, r1, ip
 8006342:	4090      	lslle	r0, r2
 8006344:	1ae4      	subs	r4, r4, r3
 8006346:	bfa2      	ittt	ge
 8006348:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800634c:	4329      	orrge	r1, r5
 800634e:	bd30      	popge	{r4, r5, pc}
 8006350:	ea6f 0404 	mvn.w	r4, r4
 8006354:	3c1f      	subs	r4, #31
 8006356:	da1c      	bge.n	8006392 <__adddf3+0x1d2>
 8006358:	340c      	adds	r4, #12
 800635a:	dc0e      	bgt.n	800637a <__adddf3+0x1ba>
 800635c:	f104 0414 	add.w	r4, r4, #20
 8006360:	f1c4 0220 	rsb	r2, r4, #32
 8006364:	fa20 f004 	lsr.w	r0, r0, r4
 8006368:	fa01 f302 	lsl.w	r3, r1, r2
 800636c:	ea40 0003 	orr.w	r0, r0, r3
 8006370:	fa21 f304 	lsr.w	r3, r1, r4
 8006374:	ea45 0103 	orr.w	r1, r5, r3
 8006378:	bd30      	pop	{r4, r5, pc}
 800637a:	f1c4 040c 	rsb	r4, r4, #12
 800637e:	f1c4 0220 	rsb	r2, r4, #32
 8006382:	fa20 f002 	lsr.w	r0, r0, r2
 8006386:	fa01 f304 	lsl.w	r3, r1, r4
 800638a:	ea40 0003 	orr.w	r0, r0, r3
 800638e:	4629      	mov	r1, r5
 8006390:	bd30      	pop	{r4, r5, pc}
 8006392:	fa21 f004 	lsr.w	r0, r1, r4
 8006396:	4629      	mov	r1, r5
 8006398:	bd30      	pop	{r4, r5, pc}
 800639a:	f094 0f00 	teq	r4, #0
 800639e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80063a2:	bf06      	itte	eq
 80063a4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80063a8:	3401      	addeq	r4, #1
 80063aa:	3d01      	subne	r5, #1
 80063ac:	e74e      	b.n	800624c <__adddf3+0x8c>
 80063ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80063b2:	bf18      	it	ne
 80063b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80063b8:	d029      	beq.n	800640e <__adddf3+0x24e>
 80063ba:	ea94 0f05 	teq	r4, r5
 80063be:	bf08      	it	eq
 80063c0:	ea90 0f02 	teqeq	r0, r2
 80063c4:	d005      	beq.n	80063d2 <__adddf3+0x212>
 80063c6:	ea54 0c00 	orrs.w	ip, r4, r0
 80063ca:	bf04      	itt	eq
 80063cc:	4619      	moveq	r1, r3
 80063ce:	4610      	moveq	r0, r2
 80063d0:	bd30      	pop	{r4, r5, pc}
 80063d2:	ea91 0f03 	teq	r1, r3
 80063d6:	bf1e      	ittt	ne
 80063d8:	2100      	movne	r1, #0
 80063da:	2000      	movne	r0, #0
 80063dc:	bd30      	popne	{r4, r5, pc}
 80063de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80063e2:	d105      	bne.n	80063f0 <__adddf3+0x230>
 80063e4:	0040      	lsls	r0, r0, #1
 80063e6:	4149      	adcs	r1, r1
 80063e8:	bf28      	it	cs
 80063ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80063ee:	bd30      	pop	{r4, r5, pc}
 80063f0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80063f4:	bf3c      	itt	cc
 80063f6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80063fa:	bd30      	popcc	{r4, r5, pc}
 80063fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006400:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8006404:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006408:	f04f 0000 	mov.w	r0, #0
 800640c:	bd30      	pop	{r4, r5, pc}
 800640e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8006412:	bf1a      	itte	ne
 8006414:	4619      	movne	r1, r3
 8006416:	4610      	movne	r0, r2
 8006418:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800641c:	bf1c      	itt	ne
 800641e:	460b      	movne	r3, r1
 8006420:	4602      	movne	r2, r0
 8006422:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8006426:	bf06      	itte	eq
 8006428:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800642c:	ea91 0f03 	teqeq	r1, r3
 8006430:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8006434:	bd30      	pop	{r4, r5, pc}
 8006436:	bf00      	nop

08006438 <__aeabi_ui2d>:
 8006438:	f090 0f00 	teq	r0, #0
 800643c:	bf04      	itt	eq
 800643e:	2100      	moveq	r1, #0
 8006440:	4770      	bxeq	lr
 8006442:	b530      	push	{r4, r5, lr}
 8006444:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8006448:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800644c:	f04f 0500 	mov.w	r5, #0
 8006450:	f04f 0100 	mov.w	r1, #0
 8006454:	e750      	b.n	80062f8 <__adddf3+0x138>
 8006456:	bf00      	nop

08006458 <__aeabi_i2d>:
 8006458:	f090 0f00 	teq	r0, #0
 800645c:	bf04      	itt	eq
 800645e:	2100      	moveq	r1, #0
 8006460:	4770      	bxeq	lr
 8006462:	b530      	push	{r4, r5, lr}
 8006464:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8006468:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800646c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8006470:	bf48      	it	mi
 8006472:	4240      	negmi	r0, r0
 8006474:	f04f 0100 	mov.w	r1, #0
 8006478:	e73e      	b.n	80062f8 <__adddf3+0x138>
 800647a:	bf00      	nop

0800647c <__aeabi_f2d>:
 800647c:	0042      	lsls	r2, r0, #1
 800647e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8006482:	ea4f 0131 	mov.w	r1, r1, rrx
 8006486:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800648a:	bf1f      	itttt	ne
 800648c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8006490:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8006494:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8006498:	4770      	bxne	lr
 800649a:	f092 0f00 	teq	r2, #0
 800649e:	bf14      	ite	ne
 80064a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80064a4:	4770      	bxeq	lr
 80064a6:	b530      	push	{r4, r5, lr}
 80064a8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80064ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80064b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80064b4:	e720      	b.n	80062f8 <__adddf3+0x138>
 80064b6:	bf00      	nop

080064b8 <__aeabi_ul2d>:
 80064b8:	ea50 0201 	orrs.w	r2, r0, r1
 80064bc:	bf08      	it	eq
 80064be:	4770      	bxeq	lr
 80064c0:	b530      	push	{r4, r5, lr}
 80064c2:	f04f 0500 	mov.w	r5, #0
 80064c6:	e00a      	b.n	80064de <__aeabi_l2d+0x16>

080064c8 <__aeabi_l2d>:
 80064c8:	ea50 0201 	orrs.w	r2, r0, r1
 80064cc:	bf08      	it	eq
 80064ce:	4770      	bxeq	lr
 80064d0:	b530      	push	{r4, r5, lr}
 80064d2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80064d6:	d502      	bpl.n	80064de <__aeabi_l2d+0x16>
 80064d8:	4240      	negs	r0, r0
 80064da:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80064de:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80064e2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80064e6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80064ea:	f43f aedc 	beq.w	80062a6 <__adddf3+0xe6>
 80064ee:	f04f 0203 	mov.w	r2, #3
 80064f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80064f6:	bf18      	it	ne
 80064f8:	3203      	addne	r2, #3
 80064fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80064fe:	bf18      	it	ne
 8006500:	3203      	addne	r2, #3
 8006502:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8006506:	f1c2 0320 	rsb	r3, r2, #32
 800650a:	fa00 fc03 	lsl.w	ip, r0, r3
 800650e:	fa20 f002 	lsr.w	r0, r0, r2
 8006512:	fa01 fe03 	lsl.w	lr, r1, r3
 8006516:	ea40 000e 	orr.w	r0, r0, lr
 800651a:	fa21 f102 	lsr.w	r1, r1, r2
 800651e:	4414      	add	r4, r2
 8006520:	e6c1      	b.n	80062a6 <__adddf3+0xe6>
 8006522:	bf00      	nop

08006524 <__aeabi_dmul>:
 8006524:	b570      	push	{r4, r5, r6, lr}
 8006526:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800652a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800652e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8006532:	bf1d      	ittte	ne
 8006534:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8006538:	ea94 0f0c 	teqne	r4, ip
 800653c:	ea95 0f0c 	teqne	r5, ip
 8006540:	f000 f8de 	bleq	8006700 <__aeabi_dmul+0x1dc>
 8006544:	442c      	add	r4, r5
 8006546:	ea81 0603 	eor.w	r6, r1, r3
 800654a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800654e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8006552:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8006556:	bf18      	it	ne
 8006558:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800655c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006560:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006564:	d038      	beq.n	80065d8 <__aeabi_dmul+0xb4>
 8006566:	fba0 ce02 	umull	ip, lr, r0, r2
 800656a:	f04f 0500 	mov.w	r5, #0
 800656e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8006572:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8006576:	fbe0 e503 	umlal	lr, r5, r0, r3
 800657a:	f04f 0600 	mov.w	r6, #0
 800657e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8006582:	f09c 0f00 	teq	ip, #0
 8006586:	bf18      	it	ne
 8006588:	f04e 0e01 	orrne.w	lr, lr, #1
 800658c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8006590:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8006594:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8006598:	d204      	bcs.n	80065a4 <__aeabi_dmul+0x80>
 800659a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800659e:	416d      	adcs	r5, r5
 80065a0:	eb46 0606 	adc.w	r6, r6, r6
 80065a4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80065a8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80065ac:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80065b0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80065b4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80065b8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80065bc:	bf88      	it	hi
 80065be:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80065c2:	d81e      	bhi.n	8006602 <__aeabi_dmul+0xde>
 80065c4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80065c8:	bf08      	it	eq
 80065ca:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80065ce:	f150 0000 	adcs.w	r0, r0, #0
 80065d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80065d6:	bd70      	pop	{r4, r5, r6, pc}
 80065d8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80065dc:	ea46 0101 	orr.w	r1, r6, r1
 80065e0:	ea40 0002 	orr.w	r0, r0, r2
 80065e4:	ea81 0103 	eor.w	r1, r1, r3
 80065e8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80065ec:	bfc2      	ittt	gt
 80065ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80065f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80065f6:	bd70      	popgt	{r4, r5, r6, pc}
 80065f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80065fc:	f04f 0e00 	mov.w	lr, #0
 8006600:	3c01      	subs	r4, #1
 8006602:	f300 80ab 	bgt.w	800675c <__aeabi_dmul+0x238>
 8006606:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800660a:	bfde      	ittt	le
 800660c:	2000      	movle	r0, #0
 800660e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8006612:	bd70      	pople	{r4, r5, r6, pc}
 8006614:	f1c4 0400 	rsb	r4, r4, #0
 8006618:	3c20      	subs	r4, #32
 800661a:	da35      	bge.n	8006688 <__aeabi_dmul+0x164>
 800661c:	340c      	adds	r4, #12
 800661e:	dc1b      	bgt.n	8006658 <__aeabi_dmul+0x134>
 8006620:	f104 0414 	add.w	r4, r4, #20
 8006624:	f1c4 0520 	rsb	r5, r4, #32
 8006628:	fa00 f305 	lsl.w	r3, r0, r5
 800662c:	fa20 f004 	lsr.w	r0, r0, r4
 8006630:	fa01 f205 	lsl.w	r2, r1, r5
 8006634:	ea40 0002 	orr.w	r0, r0, r2
 8006638:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800663c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006640:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8006644:	fa21 f604 	lsr.w	r6, r1, r4
 8006648:	eb42 0106 	adc.w	r1, r2, r6
 800664c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8006650:	bf08      	it	eq
 8006652:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8006656:	bd70      	pop	{r4, r5, r6, pc}
 8006658:	f1c4 040c 	rsb	r4, r4, #12
 800665c:	f1c4 0520 	rsb	r5, r4, #32
 8006660:	fa00 f304 	lsl.w	r3, r0, r4
 8006664:	fa20 f005 	lsr.w	r0, r0, r5
 8006668:	fa01 f204 	lsl.w	r2, r1, r4
 800666c:	ea40 0002 	orr.w	r0, r0, r2
 8006670:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8006678:	f141 0100 	adc.w	r1, r1, #0
 800667c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8006680:	bf08      	it	eq
 8006682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8006686:	bd70      	pop	{r4, r5, r6, pc}
 8006688:	f1c4 0520 	rsb	r5, r4, #32
 800668c:	fa00 f205 	lsl.w	r2, r0, r5
 8006690:	ea4e 0e02 	orr.w	lr, lr, r2
 8006694:	fa20 f304 	lsr.w	r3, r0, r4
 8006698:	fa01 f205 	lsl.w	r2, r1, r5
 800669c:	ea43 0302 	orr.w	r3, r3, r2
 80066a0:	fa21 f004 	lsr.w	r0, r1, r4
 80066a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80066a8:	fa21 f204 	lsr.w	r2, r1, r4
 80066ac:	ea20 0002 	bic.w	r0, r0, r2
 80066b0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80066b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80066b8:	bf08      	it	eq
 80066ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80066be:	bd70      	pop	{r4, r5, r6, pc}
 80066c0:	f094 0f00 	teq	r4, #0
 80066c4:	d10f      	bne.n	80066e6 <__aeabi_dmul+0x1c2>
 80066c6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80066ca:	0040      	lsls	r0, r0, #1
 80066cc:	eb41 0101 	adc.w	r1, r1, r1
 80066d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80066d4:	bf08      	it	eq
 80066d6:	3c01      	subeq	r4, #1
 80066d8:	d0f7      	beq.n	80066ca <__aeabi_dmul+0x1a6>
 80066da:	ea41 0106 	orr.w	r1, r1, r6
 80066de:	f095 0f00 	teq	r5, #0
 80066e2:	bf18      	it	ne
 80066e4:	4770      	bxne	lr
 80066e6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80066ea:	0052      	lsls	r2, r2, #1
 80066ec:	eb43 0303 	adc.w	r3, r3, r3
 80066f0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80066f4:	bf08      	it	eq
 80066f6:	3d01      	subeq	r5, #1
 80066f8:	d0f7      	beq.n	80066ea <__aeabi_dmul+0x1c6>
 80066fa:	ea43 0306 	orr.w	r3, r3, r6
 80066fe:	4770      	bx	lr
 8006700:	ea94 0f0c 	teq	r4, ip
 8006704:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8006708:	bf18      	it	ne
 800670a:	ea95 0f0c 	teqne	r5, ip
 800670e:	d00c      	beq.n	800672a <__aeabi_dmul+0x206>
 8006710:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8006714:	bf18      	it	ne
 8006716:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800671a:	d1d1      	bne.n	80066c0 <__aeabi_dmul+0x19c>
 800671c:	ea81 0103 	eor.w	r1, r1, r3
 8006720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006724:	f04f 0000 	mov.w	r0, #0
 8006728:	bd70      	pop	{r4, r5, r6, pc}
 800672a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800672e:	bf06      	itte	eq
 8006730:	4610      	moveq	r0, r2
 8006732:	4619      	moveq	r1, r3
 8006734:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8006738:	d019      	beq.n	800676e <__aeabi_dmul+0x24a>
 800673a:	ea94 0f0c 	teq	r4, ip
 800673e:	d102      	bne.n	8006746 <__aeabi_dmul+0x222>
 8006740:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8006744:	d113      	bne.n	800676e <__aeabi_dmul+0x24a>
 8006746:	ea95 0f0c 	teq	r5, ip
 800674a:	d105      	bne.n	8006758 <__aeabi_dmul+0x234>
 800674c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8006750:	bf1c      	itt	ne
 8006752:	4610      	movne	r0, r2
 8006754:	4619      	movne	r1, r3
 8006756:	d10a      	bne.n	800676e <__aeabi_dmul+0x24a>
 8006758:	ea81 0103 	eor.w	r1, r1, r3
 800675c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006760:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8006764:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006768:	f04f 0000 	mov.w	r0, #0
 800676c:	bd70      	pop	{r4, r5, r6, pc}
 800676e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8006772:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8006776:	bd70      	pop	{r4, r5, r6, pc}

08006778 <__aeabi_ddiv>:
 8006778:	b570      	push	{r4, r5, r6, lr}
 800677a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800677e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8006782:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8006786:	bf1d      	ittte	ne
 8006788:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800678c:	ea94 0f0c 	teqne	r4, ip
 8006790:	ea95 0f0c 	teqne	r5, ip
 8006794:	f000 f8a7 	bleq	80068e6 <__aeabi_ddiv+0x16e>
 8006798:	eba4 0405 	sub.w	r4, r4, r5
 800679c:	ea81 0e03 	eor.w	lr, r1, r3
 80067a0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80067a4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80067a8:	f000 8088 	beq.w	80068bc <__aeabi_ddiv+0x144>
 80067ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80067b0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80067b4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80067b8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80067bc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80067c0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80067c4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80067c8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80067cc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80067d0:	429d      	cmp	r5, r3
 80067d2:	bf08      	it	eq
 80067d4:	4296      	cmpeq	r6, r2
 80067d6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80067da:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80067de:	d202      	bcs.n	80067e6 <__aeabi_ddiv+0x6e>
 80067e0:	085b      	lsrs	r3, r3, #1
 80067e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80067e6:	1ab6      	subs	r6, r6, r2
 80067e8:	eb65 0503 	sbc.w	r5, r5, r3
 80067ec:	085b      	lsrs	r3, r3, #1
 80067ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80067f2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80067f6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80067fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80067fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8006802:	bf22      	ittt	cs
 8006804:	1ab6      	subcs	r6, r6, r2
 8006806:	4675      	movcs	r5, lr
 8006808:	ea40 000c 	orrcs.w	r0, r0, ip
 800680c:	085b      	lsrs	r3, r3, #1
 800680e:	ea4f 0232 	mov.w	r2, r2, rrx
 8006812:	ebb6 0e02 	subs.w	lr, r6, r2
 8006816:	eb75 0e03 	sbcs.w	lr, r5, r3
 800681a:	bf22      	ittt	cs
 800681c:	1ab6      	subcs	r6, r6, r2
 800681e:	4675      	movcs	r5, lr
 8006820:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8006824:	085b      	lsrs	r3, r3, #1
 8006826:	ea4f 0232 	mov.w	r2, r2, rrx
 800682a:	ebb6 0e02 	subs.w	lr, r6, r2
 800682e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8006832:	bf22      	ittt	cs
 8006834:	1ab6      	subcs	r6, r6, r2
 8006836:	4675      	movcs	r5, lr
 8006838:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800683c:	085b      	lsrs	r3, r3, #1
 800683e:	ea4f 0232 	mov.w	r2, r2, rrx
 8006842:	ebb6 0e02 	subs.w	lr, r6, r2
 8006846:	eb75 0e03 	sbcs.w	lr, r5, r3
 800684a:	bf22      	ittt	cs
 800684c:	1ab6      	subcs	r6, r6, r2
 800684e:	4675      	movcs	r5, lr
 8006850:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8006854:	ea55 0e06 	orrs.w	lr, r5, r6
 8006858:	d018      	beq.n	800688c <__aeabi_ddiv+0x114>
 800685a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800685e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8006862:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8006866:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800686a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800686e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8006872:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8006876:	d1c0      	bne.n	80067fa <__aeabi_ddiv+0x82>
 8006878:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800687c:	d10b      	bne.n	8006896 <__aeabi_ddiv+0x11e>
 800687e:	ea41 0100 	orr.w	r1, r1, r0
 8006882:	f04f 0000 	mov.w	r0, #0
 8006886:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800688a:	e7b6      	b.n	80067fa <__aeabi_ddiv+0x82>
 800688c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006890:	bf04      	itt	eq
 8006892:	4301      	orreq	r1, r0
 8006894:	2000      	moveq	r0, #0
 8006896:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800689a:	bf88      	it	hi
 800689c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80068a0:	f63f aeaf 	bhi.w	8006602 <__aeabi_dmul+0xde>
 80068a4:	ebb5 0c03 	subs.w	ip, r5, r3
 80068a8:	bf04      	itt	eq
 80068aa:	ebb6 0c02 	subseq.w	ip, r6, r2
 80068ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80068b2:	f150 0000 	adcs.w	r0, r0, #0
 80068b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80068ba:	bd70      	pop	{r4, r5, r6, pc}
 80068bc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80068c0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80068c4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80068c8:	bfc2      	ittt	gt
 80068ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80068ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80068d2:	bd70      	popgt	{r4, r5, r6, pc}
 80068d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80068d8:	f04f 0e00 	mov.w	lr, #0
 80068dc:	3c01      	subs	r4, #1
 80068de:	e690      	b.n	8006602 <__aeabi_dmul+0xde>
 80068e0:	ea45 0e06 	orr.w	lr, r5, r6
 80068e4:	e68d      	b.n	8006602 <__aeabi_dmul+0xde>
 80068e6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80068ea:	ea94 0f0c 	teq	r4, ip
 80068ee:	bf08      	it	eq
 80068f0:	ea95 0f0c 	teqeq	r5, ip
 80068f4:	f43f af3b 	beq.w	800676e <__aeabi_dmul+0x24a>
 80068f8:	ea94 0f0c 	teq	r4, ip
 80068fc:	d10a      	bne.n	8006914 <__aeabi_ddiv+0x19c>
 80068fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8006902:	f47f af34 	bne.w	800676e <__aeabi_dmul+0x24a>
 8006906:	ea95 0f0c 	teq	r5, ip
 800690a:	f47f af25 	bne.w	8006758 <__aeabi_dmul+0x234>
 800690e:	4610      	mov	r0, r2
 8006910:	4619      	mov	r1, r3
 8006912:	e72c      	b.n	800676e <__aeabi_dmul+0x24a>
 8006914:	ea95 0f0c 	teq	r5, ip
 8006918:	d106      	bne.n	8006928 <__aeabi_ddiv+0x1b0>
 800691a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800691e:	f43f aefd 	beq.w	800671c <__aeabi_dmul+0x1f8>
 8006922:	4610      	mov	r0, r2
 8006924:	4619      	mov	r1, r3
 8006926:	e722      	b.n	800676e <__aeabi_dmul+0x24a>
 8006928:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800692c:	bf18      	it	ne
 800692e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8006932:	f47f aec5 	bne.w	80066c0 <__aeabi_dmul+0x19c>
 8006936:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800693a:	f47f af0d 	bne.w	8006758 <__aeabi_dmul+0x234>
 800693e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8006942:	f47f aeeb 	bne.w	800671c <__aeabi_dmul+0x1f8>
 8006946:	e712      	b.n	800676e <__aeabi_dmul+0x24a>

08006948 <__aeabi_d2f>:
 8006948:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800694c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8006950:	bf24      	itt	cs
 8006952:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8006956:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800695a:	d90d      	bls.n	8006978 <__aeabi_d2f+0x30>
 800695c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8006960:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8006964:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8006968:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800696c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8006970:	bf08      	it	eq
 8006972:	f020 0001 	biceq.w	r0, r0, #1
 8006976:	4770      	bx	lr
 8006978:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800697c:	d121      	bne.n	80069c2 <__aeabi_d2f+0x7a>
 800697e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8006982:	bfbc      	itt	lt
 8006984:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8006988:	4770      	bxlt	lr
 800698a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800698e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8006992:	f1c2 0218 	rsb	r2, r2, #24
 8006996:	f1c2 0c20 	rsb	ip, r2, #32
 800699a:	fa10 f30c 	lsls.w	r3, r0, ip
 800699e:	fa20 f002 	lsr.w	r0, r0, r2
 80069a2:	bf18      	it	ne
 80069a4:	f040 0001 	orrne.w	r0, r0, #1
 80069a8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80069ac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80069b0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80069b4:	ea40 000c 	orr.w	r0, r0, ip
 80069b8:	fa23 f302 	lsr.w	r3, r3, r2
 80069bc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80069c0:	e7cc      	b.n	800695c <__aeabi_d2f+0x14>
 80069c2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80069c6:	d107      	bne.n	80069d8 <__aeabi_d2f+0x90>
 80069c8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80069cc:	bf1e      	ittt	ne
 80069ce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80069d2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80069d6:	4770      	bxne	lr
 80069d8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80069dc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80069e0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80069e4:	4770      	bx	lr
 80069e6:	bf00      	nop

080069e8 <main>:


#define nop()       __asm__ __volatile__("nop")


int main(void) {
 80069e8:	b530      	push	{r4, r5, lr}
 80069ea:	ed2d 8b02 	vpush	{d8}
 80069ee:	b083      	sub	sp, #12

	SysTick_Start();
 80069f0:	f7f9 fcac 	bl	800034c <SysTick_Start>

	GPIOMode(GPIOD, GPIO_Pin_12 | GPIO_Pin_13| GPIO_Pin_14| GPIO_Pin_15,
 80069f4:	2300      	movs	r3, #0
 80069f6:	2201      	movs	r2, #1
 80069f8:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80069fc:	9300      	str	r3, [sp, #0]
 80069fe:	9301      	str	r3, [sp, #4]
 8006a00:	483f      	ldr	r0, [pc, #252]	; (8006b00 <main+0x118>)

  while (1)
  {

	int bits = GPIO_Pin_12|GPIO_Pin_13|GPIO_Pin_14|GPIO_Pin_15;
	GPIOD->BSRRL = bits;  // Set bits
 8006a02:	4d3f      	ldr	r5, [pc, #252]	; (8006b00 <main+0x118>)

int main(void) {

	SysTick_Start();

	GPIOMode(GPIOD, GPIO_Pin_12 | GPIO_Pin_13| GPIO_Pin_14| GPIO_Pin_15,
 8006a04:	2302      	movs	r3, #2
 8006a06:	f7f9 fbcf 	bl	80001a8 <GPIOMode>
			GPIO_Mode_OUT, GPIO_Speed_50MHz, GPIO_OType_PP, GPIO_PuPd_NOPULL);

	usart_begin(19200);
 8006a0a:	f44f 4096 	mov.w	r0, #19200	; 0x4b00
 8006a0e:	f7f9 fca5 	bl	800035c <usart_begin>
	usart_print("Hello!\n");
 8006a12:	483c      	ldr	r0, [pc, #240]	; (8006b04 <main+0x11c>)
 8006a14:	f7f9 fcfc 	bl	8000410 <usart_print>

  // NOTE: Important: Enable full access to FPU: 
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006a18:	4b3b      	ldr	r3, [pc, #236]	; (8006b08 <main+0x120>)
 8006a1a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    /* Insert delay */
    delay(200); //(0xFFFFFF);
#endif
	
	ComputeMandelbrot(4000,50);
	usart_printFloat(systicks()/1000.0f, 3);
 8006a1e:	ed9f 8a3b 	vldr	s16, [pc, #236]	; 8006b0c <main+0x124>

	usart_begin(19200);
	usart_print("Hello!\n");

  // NOTE: Important: Enable full access to FPU: 
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006a22:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8006a26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  while (1)
  {

	int bits = GPIO_Pin_12|GPIO_Pin_13|GPIO_Pin_14|GPIO_Pin_15;
	GPIOD->BSRRL = bits;  // Set bits
 8006a2a:	f24f 0400 	movw	r4, #61440	; 0xf000
 8006a2e:	832c      	strh	r4, [r5, #24]
    nop();nop();nop();nop();nop();nop();nop();nop();nop();
 8006a30:	bf00      	nop
 8006a32:	bf00      	nop
 8006a34:	bf00      	nop
 8006a36:	bf00      	nop
 8006a38:	bf00      	nop
 8006a3a:	bf00      	nop
 8006a3c:	bf00      	nop
 8006a3e:	bf00      	nop
 8006a40:	bf00      	nop
	GPIOD->BSRRH = bits;  // Reset bits
 8006a42:	836c      	strh	r4, [r5, #26]
    nop();nop();nop();nop();nop();nop();nop();nop();nop();
 8006a44:	bf00      	nop
 8006a46:	bf00      	nop
 8006a48:	bf00      	nop
 8006a4a:	bf00      	nop
 8006a4c:	bf00      	nop
 8006a4e:	bf00      	nop
 8006a50:	bf00      	nop
 8006a52:	bf00      	nop
 8006a54:	bf00      	nop
	nop();
 8006a56:	bf00      	nop
	GPIOD->BSRRL = bits;  // Set bits
 8006a58:	832c      	strh	r4, [r5, #24]
    nop();nop();nop();nop();nop();nop();nop();nop();nop();
 8006a5a:	bf00      	nop
 8006a5c:	bf00      	nop
 8006a5e:	bf00      	nop
 8006a60:	bf00      	nop
 8006a62:	bf00      	nop
 8006a64:	bf00      	nop
 8006a66:	bf00      	nop
 8006a68:	bf00      	nop
 8006a6a:	bf00      	nop
	GPIOD->BSRRH = bits;  // Reset bits

	delay(100);
 8006a6c:	2064      	movs	r0, #100	; 0x64
	GPIOD->BSRRH = bits;  // Reset bits
    nop();nop();nop();nop();nop();nop();nop();nop();nop();
	nop();
	GPIOD->BSRRL = bits;  // Set bits
    nop();nop();nop();nop();nop();nop();nop();nop();nop();
	GPIOD->BSRRH = bits;  // Reset bits
 8006a6e:	836c      	strh	r4, [r5, #26]

	delay(100);
 8006a70:	f7f9 fc46 	bl	8000300 <delay>
	
#if 1
    /* PD12 to be toggled */
    //GPIO_SetBits(GPIOD, GPIO_Pin_12);
    digitalWrite(PD12, HIGH);
 8006a74:	2101      	movs	r1, #1
 8006a76:	208c      	movs	r0, #140	; 0x8c
 8006a78:	f7f9 fbe8 	bl	800024c <digitalWrite>
    
    /* Insert delay */
    delay(20); //(0x1FFFFF);
 8006a7c:	2014      	movs	r0, #20
 8006a7e:	f7f9 fc3f 	bl	8000300 <delay>
    
    /* PD13 to be toggled */
//    GPIO_SetBits(GPIOD, GPIO_Pin_13);
    digitalWrite(PD13, HIGH);
 8006a82:	2101      	movs	r1, #1
 8006a84:	208d      	movs	r0, #141	; 0x8d
 8006a86:	f7f9 fbe1 	bl	800024c <digitalWrite>

    /* Insert delay */
    delay(20); //(0x1FFFFF);
 8006a8a:	2014      	movs	r0, #20
 8006a8c:	f7f9 fc38 	bl	8000300 <delay>
  
    /* PD14 to be toggled */
//    GPIO_SetBits(GPIOD, GPIO_Pin_14);
    digitalWrite(PD14, HIGH);
 8006a90:	2101      	movs	r1, #1
 8006a92:	208e      	movs	r0, #142	; 0x8e
 8006a94:	f7f9 fbda 	bl	800024c <digitalWrite>
    
    /* Insert delay */
    delay(20); //(0x1FFFFF);
 8006a98:	2014      	movs	r0, #20
 8006a9a:	f7f9 fc31 	bl	8000300 <delay>
    
    /* PD15 to be toggled */
//    GPIO_SetBits(GPIOD, GPIO_Pin_15);
    digitalWrite(PD15, HIGH);
 8006a9e:	2101      	movs	r1, #1
 8006aa0:	208f      	movs	r0, #143	; 0x8f
 8006aa2:	f7f9 fbd3 	bl	800024c <digitalWrite>

    /* Insert delay */
    delay(40); //(0x3FFFFF);
 8006aa6:	2028      	movs	r0, #40	; 0x28
 8006aa8:	f7f9 fc2a 	bl	8000300 <delay>
    
   // GPIO_ResetBits(GPIOD, GPIO_Pin_12|GPIO_Pin_13|GPIO_Pin_14|GPIO_Pin_15);
    digitalWrite(PD12, LOW);
 8006aac:	208c      	movs	r0, #140	; 0x8c
 8006aae:	2100      	movs	r1, #0
 8006ab0:	f7f9 fbcc 	bl	800024c <digitalWrite>
    digitalWrite(PD13, LOW);
 8006ab4:	208d      	movs	r0, #141	; 0x8d
 8006ab6:	2100      	movs	r1, #0
 8006ab8:	f7f9 fbc8 	bl	800024c <digitalWrite>
    digitalWrite(PD14, LOW);
 8006abc:	208e      	movs	r0, #142	; 0x8e
 8006abe:	2100      	movs	r1, #0
 8006ac0:	f7f9 fbc4 	bl	800024c <digitalWrite>
    digitalWrite(PD15, LOW);
 8006ac4:	2100      	movs	r1, #0
 8006ac6:	208f      	movs	r0, #143	; 0x8f
 8006ac8:	f7f9 fbc0 	bl	800024c <digitalWrite>
    
    /* Insert delay */
    delay(200); //(0xFFFFFF);
 8006acc:	20c8      	movs	r0, #200	; 0xc8
 8006ace:	f7f9 fc17 	bl	8000300 <delay>
#endif
	
	ComputeMandelbrot(4000,50);
 8006ad2:	2132      	movs	r1, #50	; 0x32
 8006ad4:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8006ad8:	f7ff f93e 	bl	8005d58 <ComputeMandelbrot>
	usart_printFloat(systicks()/1000.0f, 3);
 8006adc:	f7f9 fc39 	bl	8000352 <systicks>
 8006ae0:	ee07 0a10 	vmov	s14, r0
 8006ae4:	eef8 7a47 	vcvt.f32.u32	s15, s14
 8006ae8:	2003      	movs	r0, #3
 8006aea:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8006aee:	f7f9 fcbb 	bl	8000468 <usart_printFloat>
	usart_print(".\n");
 8006af2:	4807      	ldr	r0, [pc, #28]	; (8006b10 <main+0x128>)
 8006af4:	f7f9 fc8c 	bl	8000410 <usart_print>

	SqrtBenchmark();
 8006af8:	f7ff f972 	bl	8005de0 <SqrtBenchmark>
 8006afc:	e797      	b.n	8006a2e <main+0x46>
 8006afe:	bf00      	nop
 8006b00:	40020c00 	.word	0x40020c00
 8006b04:	08006bac 	.word	0x08006bac
 8006b08:	e000ed00 	.word	0xe000ed00
 8006b0c:	447a0000 	.word	0x447a0000
 8006b10:	08006bb4 	.word	0x08006bb4

08006b14 <Reset_Handler>:
 8006b14:	2100      	movs	r1, #0
 8006b16:	e003      	b.n	8006b20 <LoopCopyDataInit>

08006b18 <CopyDataInit>:
 8006b18:	4b0a      	ldr	r3, [pc, #40]	; (8006b44 <LoopFillZerobss+0x10>)
 8006b1a:	585b      	ldr	r3, [r3, r1]
 8006b1c:	5043      	str	r3, [r0, r1]
 8006b1e:	3104      	adds	r1, #4

08006b20 <LoopCopyDataInit>:
 8006b20:	4809      	ldr	r0, [pc, #36]	; (8006b48 <LoopFillZerobss+0x14>)
 8006b22:	4b0a      	ldr	r3, [pc, #40]	; (8006b4c <LoopFillZerobss+0x18>)
 8006b24:	1842      	adds	r2, r0, r1
 8006b26:	429a      	cmp	r2, r3
 8006b28:	d3f6      	bcc.n	8006b18 <CopyDataInit>
 8006b2a:	4a09      	ldr	r2, [pc, #36]	; (8006b50 <LoopFillZerobss+0x1c>)
 8006b2c:	e002      	b.n	8006b34 <LoopFillZerobss>

08006b2e <FillZerobss>:
 8006b2e:	2300      	movs	r3, #0
 8006b30:	f842 3b04 	str.w	r3, [r2], #4

08006b34 <LoopFillZerobss>:
 8006b34:	4b07      	ldr	r3, [pc, #28]	; (8006b54 <LoopFillZerobss+0x20>)
 8006b36:	429a      	cmp	r2, r3
 8006b38:	d3f9      	bcc.n	8006b2e <FillZerobss>
 8006b3a:	f7ff f9a3 	bl	8005e84 <SystemInit>
 8006b3e:	f7ff ff53 	bl	80069e8 <main>
 8006b42:	4770      	bx	lr
 8006b44:	08006bc4 	.word	0x08006bc4
 8006b48:	20000000 	.word	0x20000000
 8006b4c:	20000480 	.word	0x20000480
 8006b50:	20000480 	.word	0x20000480
 8006b54:	20000488 	.word	0x20000488

08006b58 <ADC_IRQHandler>:
 8006b58:	e7fe      	b.n	8006b58 <ADC_IRQHandler>
	...

08006b5c <GPIOPeripheral>:
 8006b5c:	0000 0000 0001 0000 0002 0000 0004 0000     ................
 8006b6c:	0008 0000 0010 0000 0020 0000 0040 0000     ........ ...@...
 8006b7c:	0080 0000 0100 0000                         ........

08006b84 <GPIOPin>:
 8006b84:	0001 0002 0004 0008 0010 0020 0040 0080     .......... .@...
 8006b94:	0100 0200 0400 0800 1000 2000 4000 8000     ........... .@..
 8006ba4:	ffff 0000                                   ....

08006ba8 <_global_impure_ptr>:
 8006ba8:	0058 2000 6548 6c6c 216f 000a 0a2e 0000     X.. Hello!......
 8006bb8:	7173 7472 0066 0000 0043 0000               sqrtf...C...
