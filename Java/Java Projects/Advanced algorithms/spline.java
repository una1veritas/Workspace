import java.awt.*;import java.lang.Math;public class spline {    public  int N;    public  double X[] = new double[100];    public  double Y[] = new double[100];    public  double R[] = new double[2];    private double P[] = new double[100];    private double A[] = new double[100];    private double B[] = new double[100];    private void maketable1(double x[], double y[], double z[], int n) {	double t;	double h[] = new double[100];	double d[] = new double[100];	z[0] = 0; z[n-1] = 0;	for (int i = 0; i < n-1; i++) {	  h[i  ] = x[i+1] - x[i];	  d[i+1] = (y[i+1] - y[i]) / h[i];	}	z[1] = d[2] - d[1] - h[0]*z[0];	d[1] = 2*(x[2]-x[0]);	for (int i = 1; i < n-2; i++) {	  t = h[i] / d[i];	  z[i+1] = d[i+2] - d[i+1] - z[i]*t;	  d[i+1] = 2*(x[i+2]-x[i]) - h[i]*t;	}	z[n-2] -= h[n-2]*z[n-1];	for (int i = n-2; i > 0; i--) {	  z[i] = (z[i] - h[i] * z[i+1]) / d[i];	}    }    private double spline1(double t, double x[], double y[], double z[], int n)    {	int i, j, k;	double d, h;	i = 0; j = n - 1;	while (i < j) {	  k = (i+j)/2;	  if (x[k] < t) i = k + 1; else j = k;	}	if (i > 0) i--;	h = x[i+1] - x[i]; d = t - x[i];	return (((z[i+1] - z[i])*d/h + z[i]*3)*d		+ ((y[i+1] - y[i]) / h		- (z[i]*2 + z[i+1])*h))*d + y[i];    }    private void maketable2(double p[], double x[], double y[], 		double a[], double b[], int n)    {	double t1, t2;	p[0] = 0;	for (int i=1; i < n; i++) {	  t1 = x[i] - x[i-1];	  t2 = y[i] - y[i-1];	  p[i] = p[i-1] + Math.sqrt(t1*t1 + t2*t2);	}	for (int i=1; i < n; i++) p[i] /= p[n-1];	maketable1(p, x, a, n);	maketable1(p, y, b, n);    }    public void spline(double t)     {        maketable2(P, X, Y, A, B, N);	R[0] = spline1(t, P, X, A, N);	R[1] = spline1(t, P, Y, B, N);//	System.out.println("===>"+R[0]+", "+R[1]);    }}