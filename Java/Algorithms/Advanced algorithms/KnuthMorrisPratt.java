// package algorithm.stringmatching;class KnuthMorrisPratt extends StringMatching {	public int next[];		public KnuthMorrisPratt(String pattern) {		super(pattern);		preprocess(pattern.length());	}		public void preprocess(int m) {		int j, t;		next = new int[m+1];		for (j = 0, t = -1, next[0] = -1; j < m; ) {			while (t >= 0 && (pattern.charAt(j) != pattern.charAt(t)) ) {				t = next[t];			}			t++;			j++;			if (j < m && (pattern.charAt(j) == pattern.charAt(t)) ) {				next[j] = next[t]; 		        	} else {		        		next[j] = t;		        	}		}		for (j=0; j <= m; j++) {			System.out.println("next[" + j + "] = " + next[j]);		}	}		public int findIn(String text) {		int     i, j, cnt = 0;		boolean trivial[] = new boolean[pattern.length()];		for (i = 0; i < trivial.length; i++) {			trivial[i] = false;		}		//pause(0, trivial, -1, false, false, cnt);      		 		for (j = 0, i = 0;  i < text.length();  i++) {			while (j == pattern.length()				 	|| (j >= 0 && pattern.charAt(j) != text.charAt(i))) {				if (j < pattern.length()) {					cnt++;				}				//if (stopRequested) return;				//if (j < m) pause(i-j, trivial, j, true, false, cnt);				j = next[j];				for (int k = 0; k < pattern.length(); k++) {					trivial[k] = (k < j);				}				//pause(i-j, trivial, -1, false, false, cnt);			}			if (j >= 0) {				cnt++;				//pause(i-j, trivial, j, false, (j+1==m), cnt);			}			j++;		}		for (i=0; i < trivial.length; i++) {			System.out.println(i+": "+ trivial[i]);		}		return i;	}		public static void main() {		String pat = "abb";		String text = "ababbababbabababbabaaba";		KnuthMorrisPratt kmp = new KnuthMorrisPratt(pat);		kmp.findIn(text);	}}