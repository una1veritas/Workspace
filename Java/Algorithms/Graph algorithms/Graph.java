class Graph {	int size;	int[][] weight;		Graph(int sz) {		size = sz;		weight = new int[sz][sz];		for (int i = 0; i < sz; i++) 			for (int j = 0; j < sz; j++) 				weight[i][j] = 0;	}		void addEdge(int i, int j, int w) {		weight[i][j] = w;		weight[j][i] = w;	}		void shortestPath(int start, int goal) {		int[] distance = new int[size];		int[] trace = new int[size];		int reachedCount = 1;				for(int i = 0; i < size; i++) {			distance[i] = -1;	/* -1 : not reached, >= 0 : reached */		}		distance[goal] = 0;		trace[goal] = goal;				while (reachedCount < size) {			for (int v = 0; v < size; v++) {				//if (reached[v]) continue;				for (int u = 0; u < size; u++) {					if ( distance[u] == -1 | u == v ) continue;					if (weight[u][v] > 0) {						if (distance[v] >= 0) {							if (distance[u]+weight[u][v] < distance[v] ) {								distance[v] = distance[u]+weight[u][v];								trace[v] = u;							}						} else {							distance[v] = distance[u]+weight[u][v];							trace[v] = u;							reachedCount++;						}					}				}			}		}		int tally = 0;		System.out.print("The shortest path: "+start);		for (int i = start; i != goal; i = trace[i]) {			System.out.print(" -> "+trace[i]);			tally += weight[i][trace[i]];		}		System.out.println("\nPath length: "+tally);	}		public static void main(String args[]) {		Graph g = new Graph(9);				g.addEdge(0,2,3);		g.addEdge(1,2,2);		g.addEdge(1,3,2);		g.addEdge(1,6,5);		g.addEdge(1,7,2);		g.addEdge(2,5,2);		g.addEdge(3,4,4);		g.addEdge(3,5,1);		g.addEdge(4,7,3);		g.addEdge(4,8,5);		g.addEdge(6,7,3);		g.addEdge(6,8,1);				g.shortestPath(3,8);	}}