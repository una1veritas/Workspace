#include <stdio.h>
#include <stdlib.h>
#include <string.h>

/* datatype 型の定義 */
typedef char * datatype;

int equals(datatype x, datatype y) {
  return strcmp(x,y) == 0;
}

int hash(datatype x) {
  int i, h = 0;
  for (i = 0; i < strlen(x) && i < 4; i++) 
    h = h * 31 + x[i];
  return h;
}

/* HashSet の定義 */
typedef struct HashSet {
  datatype * elements;
  int capacity;
  int tally;
} HashSet;

void initialize_HashSet(HashSet * set, int maxsize) {
  int i;
  set->elements = (datatype *) malloc(sizeof(datatype) * maxsize);
  for (i = 0; i < maxsize; i++) 
    set->elements[i] = NULL;
  set->capacity = maxsize;
  set->tally = 0;
}

void dispose_HashSet(HashSet * set) {
  free(set->elements);
}

int find(HashSet * set, datatype x) {
  int p = find_position(set, x);
  if ( p == -1 )
    return -1;
  if ( set->elements[p] == NULL )
    return -1;
  return p;
}

int find_position(HashSet * set, datatype x) {
  int i, p, h = hash(x);
  for (i = 0; i < set->capacity; i++) {
    p = (i + h) % set->capacity;
    if ( set->elements[p] == NULL )
      return p;
    if ( equals(set->elements[p], x) ) 
      return p;
  }
  return -1;
}

int add(HashSet * set, datatype x) {
  int i, j, p = find_position(set, x);
  if ( p == -1 )
    return -1;
  if (! (set->tally < set->capacity) )
    return -1;
  if ( set->elements[p] == NULL ) {
    set->elements[p] = x;
    set->tally++;
    return p;
  } 
}

int delete(HashSet * set, datatype x) {
  int i, j, p = find_position(set, x);
  if ( (p == -1) || (set->elements[p] == NULL) ) 
    return -1;
  i = 0;
  while (i < set->capacity) {
    if ( equals(set->elements[(p + i) % set->capacity], x) ) {
      set->elements[(p + i) % set->capacity] = NULL;
      set->tally--;
      j = (p + i) % set->capacity;
      i++;
      while ( (set->elements[(p + i) % set->capacity] != NULL) &&
	      (i < set->capacity) ) {
	if ( hash(set->elements[(p + i) % set->capacity]) == hash(x) ) {
	  set->elements[j] = set->elements[(p + i) % set->capacity];
	  set->elements[(p + i) % set->capacity] = NULL;
	  j = (p + i) % set->capacity;
	}
	i++;
      }
      return j;
    }
    i++;
  }
  return -1;
}

int size(HashSet * set) {
  return set->tally;
}

datatype element(HashSet * set, int pos) {
  return set->elements[pos];
}

/* テスト用プログラム */
int main(int argc, char * argv[]) {
  HashSet s;
  int i;

  initialize_HashSet(&s, 11);
  for (i = 1; i < argc; i++) {
    add( &s, argv[i] );
    printf("%s [%d],\n", argv[i], hash(argv[i]) ); 
  }

  printf("The number of elements = %d.\n", size(&s));

  for ( i = 0; i < s.capacity; i++) {
    printf("%s, ", element(&s, i));
  }
  printf("\n\n");

  delete(&s, "123457");

  printf("The number of elements = %d.\n", size(&s));
  for (i = 1; i < argc; i++) {
    if ( find(&s, argv[i]) != -1 )
      printf("%s, ", element( &s, find(&s, argv[i]) ));
  }

  dispose_HashSet(&s);
}
