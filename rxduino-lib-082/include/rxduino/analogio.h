/*******************************************************************************
* RXduinoライブラリ & 特電HAL
* 
* このソフトウェアは特殊電子回路株式会社によって開発されたものであり、当社製品の
* サポートとして提供されます。このライブラリは当社製品および当社がライセンスした
* 製品に対して使用することができます。
* このソフトウェアはあるがままの状態で提供され、内容および動作についての保障はあ
* りません。弊社はファイルの内容および実行結果についていかなる責任も負いません。
* お客様は、お客様の製品開発のために当ソフトウェアのソースコードを自由に参照し、
* 引用していただくことができます。
* このファイルを単体で第三者へ開示・再配布・貸与・譲渡することはできません。
* コンパイル・リンク後のオブジェクトファイル(ELF ファイルまたはMOT,SRECファイル)
* であって、デバッグ情報が削除されている場合は第三者に再配布することができます。
* (C) Copyright 2011-2012 TokushuDenshiKairo Inc. 特殊電子回路株式会社
* http://rx.tokudenkairo.co.jp/
*******************************************************************************/

#ifndef	__H_RXDUINO_ANALOGIO
#define	__H_RXDUINO_ANALOGIO
/**************************************************************************//**
 * @file    analogio.h
 * @brief   Renesas RX62N/63N Arduino Library produced by Tokushu Denshi Kairo Inc.
 * @version	V0.50
 * @date	1. August 2011.
 * @author	Tokushu Denshi Kairo Inc.
 * @note	Copyright &copy; 2011 - 2012 Tokushu Denshi Kairo Inc. All rights reserved.
 ******************************************************************************/
#include "rxduino.h"

#ifdef __cplusplus
	extern "C" {
#endif


/*! @enum  AnalogRefType
	@brief analogReferenceで使用する引数
	@note  ArduinoではDEFAULT,INTERNAL,EXTERNALを使用しているがRXduinoでは以下の引数となる
*/
typedef enum
{
	AREF_DEFAULT  = 0, /*!< AREF=3.3V(デフォルト) */
	AREF_INTERNAL = 1, /*!< AREF=1.1Vとしてエミュレート */
	AREF_EXTERNAL = 2, /*!< AREF=3.3V計測値をそのまま10bitにして出力 */
	AREF_RAW      = 3, /*!< 計測値を加工せずにそのまま出力 */
} AnalogRefType;

//------------------------------------------------------------------
// アナログ入出力
//------------------------------------------------------------------

// ch0～ch7のアナログ値を読む
// 10bit ADを使う
// AREF_INTERNALの場合,1.1V以上の計測値は上限値1023に貼り付く
/*********************************************************************//**
 * @brief		指定されたポートからアナログ値を読み込む
 * @param[in]	analog_portnum アナログ値を読み込むピン番号
 * @return		読み込んだアナログ値
 **********************************************************************/
RXDUINO_API
int analogRead(int analog_portnum);

/*********************************************************************//**
 * @brief		指定したピンからアナログ値(PWM波)を出力します.LEDの明るさを変えたいときや,
 * 				モータの回転スピードを調整したいときに使えます.PWM信号の周波数は約490Hzです.
 * @param[in]	analog_portnum arduino互換ピンから任意のピンを最大6ピンまで指定できます.
 * 				ここでピン番号を指定すると,関数内部で使用するピンの登録がされるのでpinModeなどでの初期化は
 * 				必要ありません.
 * @param[in]	val 出力するPWMのデューティ(0~255)
 * @return		なし
 * @warning		analogWriteを一旦実行したピンにdigitalWriteを実行してもデジタル入出力ピンには戻りません
 **********************************************************************/
RXDUINO_API
void analogWrite(int analog_portnum,int val8bit);

// DACを使って10bitアナログ値の出力
// dac_portnumは0か1を指定すること
/*********************************************************************//**
 * @brief		指定ポートからアナログ変換値を出力する
 * @param[in]	analog_portnum	アナログ値を出力するピン番号
 * 				0か1を出力すること
 * @param[in]	val10bit		変換値(10bit整数値)
 * @return		なし
 **********************************************************************/
RXDUINO_API
void analogWriteDAC(int dac_portnum,int val10bit);

/*********************************************************************//**
 * @brief		アナログ入力で使われる基準電圧を設定する．
 * 				analogRead関数は入力が基準電圧と同じとき1023を返します.
 * @param[in]	mode 次のうち一つを指定します
 *				- AREF_DEFAULT  : 電源電圧(3.3V)
 *				- AREF_INTERNAL : 内蔵基準電圧(1.1V)
 *				- AREF_EXTERNAL : AREFピンに供給される電圧を基準電圧とする
 *
 * @return		なし
 **********************************************************************/
RXDUINO_API
void analogReference(AnalogRefType mode);


// アナログ出力の周期を設定する.単位はHz.
// 引数に指定できるのは12～184999 [Hz]
// すべての範囲で動作するかは未検証
// ※ この関数はanalogWriteよりも先に呼び出さなければならない
// 使用できるのは1回だけ.2度目以降の呼び出しは効果を持たない
/*********************************************************************//**
 * @brief		アナログ出力の周期を設定する.
 * 				すべての範囲で動作するかは未検証
 * @param[in]	Hz 設定する周波数.単位はHz.引数に指定できるのは12～184999 [Hz]
 *
 * @return		なし
 * @warning		この関数はanalogWriteよりも先に呼び出さなければならない.
 * 				使用できるのは1回だけ.2度目以降の呼び出しは効果を持たない
 **********************************************************************/
RXDUINO_API
void analogWriteFrequency(int Hz);

#ifdef __cplusplus
	}
#endif

#endif // __H_RXDUINO_ANALOGIO

