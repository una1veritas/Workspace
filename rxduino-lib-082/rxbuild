#!/bin/bash 

#--------------------------------------------------------------------
#基本的な定数を設定
#--------------------------------------------------------------------

# ベースディレクトリ
BASEDIR=$RXDUINO_ROOT

# RAM実行時のリンカスクリプトファイル
RAMSCRIPT="${BASEDIR}/common/rx62n_ram_standalone.ld"

# ROM実行時のリンカスクリプトファイル
ROMSCRIPT="${BASEDIR}/common/rx62n_rom_standalone.ld"

# デフォルトのターゲットタイプ
#  (次の中から選択可能 "RAM" "ROM" "SDRAM")
FLAG_TGTTYPE="ROM" 

# デフォルトのスタートアップファイル
STARTUP="${BASEDIR}/lib/start.o"

#最適化オプション
FLAG_OPTIM="-O2"

#その他のコンパイラオプション
CFLAGS={"-g","-Wall"}

#その他のリンカオプション
LFLAGS=""

#ライブラリ
LIBS="-leeprom -lspi -lservo -lliquidcrystal -lsdmmc -lrxduino -lstdc++ -lsupc++ -lc -lsim -lgcc -lm -ltkdnhal"

CC="rx-elf-gcc"
LNK="rx-elf-ld"
CNV="rx-elf-objcopy"
DUMP="rx-elf-objdump"

#--------------------------------------------------------------------
#これ以降カスタマイズするべき場所はない
#--------------------------------------------------------------------

FLAG_REBUILD="FALSE"
FLAG_GENLIST="FALSE"
FLAG_USE_LOWLEVEL="TRUE"
extension=""

#引数がなければヘルプを表示して終了
if [ $# == 0 ]
then
	echo "RXduino build script  (C)2012 Tokushu Denshi Kairo Inc."
	echo "Usage : ml [-ram | -rom | -sdram] file1 [file2] [file3] ..."
	exit
fi

#オプション解析
TARGET=""
i=1
optim=2
while [ "$1" != "" ];
do
	path=$1

	basename=${path##*/}
	filename=${basename%.*}
	extension=${basename##*.}

	if [ $1 == "-ram" ] ; then
		FLAG_TGTTYPE="RAM"
		echo "build as RAM application"
	elif [ $1 == "-rom" ] ; then
		FLAG_TGTTYPE="ROM"
		echo "build as ROM application"
	elif [ $1 == "-O0" ] ; then
		FLAG_OPTIM="-O0"
	elif [ $1 == "-O1" ] ; then
		FLAG_OPTIM="-O1"
	elif [ $1 == "-O2" ] ; then
		FLAG_OPTIM="-O2"
	elif [ $1 == "-list" ] ; then
		FLAG_GENLIST="TRUE"
	elif [ $1 == "-nolowlevel" ] ; then
		FLAG_USE_LOWLEVEL="FALSE"
	elif [ $1 == "-rebuild" ] ; then
		FLAG_REBUILD="TRUE"
	elif [ $1 == "-o" ] ; then
		shift 1
		if [ $1 == "" ] ; then
			echo "Missing filename for -o option"
			exit
		else
			TARGET=$1
		fi
	elif [ $extension = "c" ] ; then
		files[$filenum]=$1
		filenum=`expr $filenum + 1`
	elif [ $extension = "cpp" ] ; then
		files[$filenum]=$1
		filenum=`expr $filenum + 1`
	else
		echo "Error: Unknown parameter \"$1\""
		exit
	fi
	shift 1
	i=`expr $i + 1`
done

# 共通ファイルの追加
if [ $FLAG_USE_LOWLEVEL = "TRUE" ] ; then
	files[$filenum]="${BASEDIR}/common/lowlevel.c"
	filenum=`expr $filenum + 1`
fi
files[$filenum]="${BASEDIR}/common/intvect.c"
filenum=`expr $filenum + 1`

#--------------------------------------------------------------------
#ファイルを1つずつコンパイルする
#--------------------------------------------------------------------

echo ""
echo "コンパイルを開始します"

i=0
while [ $i -lt ${filenum} ] ;
do
	path=${files[$i]}
	basename=${path##*/}
	filename=${basename%.*}
	extension=${basename##*.}

	if test -z ${TARGET} # 文字列長が0ならば
	then
		if [ `expr index $path "/"` -ne 0 ] ; then
			pathname=${path%/*}"/";
		else
			pathname="";
		fi
		TARGET="${pathname}${filename}"
	fi

	if [ `expr index $path "/"` -ne 0 ] ; then
		pathname=${path%/*}"/";
	else
		pathname="";
	fi

	cmd=""

	compile="FALSE"

	# $FLAG_REBUILDオプションが指定されていればすべてのファイルをコンパイルする
	if [ $FLAG_REBUILD = "TRUE" ] ; then
		compile="TRUE"
	fi

	if [ ${extension} == "c" ] ; then
		cmd="${CC} ${FLAG_OPTIM} -Wall -g -I${BASEDIR}/include/tkdnhal -I${BASEDIR}/include/lib/ -c ${pathname}${filename}.c -o ${pathname}${filename}.o"
		# ソースが新しければコンパイルする
		if [ -e ${pathname}${filename}.o ] ; then # ファイルが存在するか
			if [ ${pathname}${filename}.c -nt ${pathname}${filename}.o ] ; then
				compile="TRUE"
			fi
		else
			compile="TRUE"
		fi
	fi
	if [ ${extension} == "cpp" ] ; then
		cmd="${CC} ${FLAG_OPTIM} -Wall -g -I${BASEDIR}/include/rxduino -I${BASEDIR}/include/tkdnhal -I${BASEDIR}/include/lib/ -c ${pathname}${filename}.cpp -o ${pathname}${filename}.o"
		# ソースが新しければコンパイルする
		if [ -e ${pathname}${filename}.o ] ; then # ファイルが存在するか
			if [ ${pathname}${filename}.cpp -nt ${pathname}${filename}.o ] ; then
				compile="TRUE"
			fi
		else
			compile="TRUE"
		fi
	fi

	if [ $compile = "TRUE" ] ; then
		echo ${cmd}
		${cmd}
		if [ $? -ne 0 ] ; then
			echo "RXduino application build error!"
			exit
		fi
	fi

	i=`expr $i + 1`
done

#--------------------------------------------------------------------
#リンクする
#--------------------------------------------------------------------

echo ""
echo "リンクを開始します"

#メモリマップ(リンカスクリプト)
if [ ${FLAG_TGTTYPE} == "RAM" ] ; then
	LSCRIPT="-T ${RAMSCRIPT}"
elif [ ${FLAG_TGTTYPE} == "ROM" ] ; then
	LSCRIPT="-T ${ROMSCRIPT}"
elif [ ${FLAG_TGTTYPE} == "SDRAM" ] ; then
	LSCRIPT="-T ${SDRAMSCRIPT}"
fi

#リンカフラグ
LFLAGS=""

#メモリマップ出力
MAP="-Map ${TARGET}.map"

#ライブラリパス
LIBPATH="-L${BASEDIR}/lib/gcc -L${BASEDIR}/lib"

#その他
LMISC="-nostartfiles"

#スタートアップ

#オブジェクト
i=0
while [ $i -lt ${filenum} ] ;
do

	path=${files[$i]}
	basename=${path##*/}
	filename=${basename%.*}
	extension=${basename##*.}

	if [ `expr index $path "/"` -ne 0 ] ; then
		pathname=${path%/*}"/";
	else
		pathname="";
	fi

	OBJS=$OBJS" $pathname${filename}.o"
	i=`expr $i + 1`
done

cmd="${LNK} ${MAP} ${LFLAGS} ${LSCRIPT} ${OBJS} ${STARTUP} ${LIBPATH} ${LIBS} ${LMISC} -o ${TARGET}.elf"
echo ${cmd}
$cmd
if [ $? -ne 0 ] ; then
	echo "RXduino application build error!"
	exit
fi

#--------------------------------------------------------------------
# MOTファイル作成
#--------------------------------------------------------------------

echo ""
echo "MOTファイルを生成します"

cmd="${CNV} --srec-forceS3 --srec-len 32 -O srec ${TARGET}.elf ${TARGET}.mot"
echo ${cmd}
$cmd
if [ $? -ne 0 ] ; then
	echo "RXduino application build error!"
	exit
fi

#--------------------------------------------------------------------
# BINファイル作成
#--------------------------------------------------------------------

if [ ${FLAG_TGTTYPE} = "BIN" ] ; then
	echo ""
	echo "BINファイルを生成します"

	cmd="${CNV} -O binary ${TARGET}.elf ${TARGET}.bin"
	echo ${cmd}
	$cmd > ${TARGET}.bin
	if [ $? -ne 0 ] ; then
		echo "RXduino application build error!"
		exit
	fi
fi

#--------------------------------------------------------------------
# LISTファイル作成
#--------------------------------------------------------------------

if [ ${FLAG_GENLIST} = "TRUE" ] ; then
	echo "LISTファイルを生成します"

	cmd="${DUMP} -S ${TARGET}.elf"
	echo "${cmd} > ${TARGET}.lst"
	$cmd > ${TARGET}.lst
	if [ $? -ne 0 ] ; then
		echo "RXduino application build error!"
		exit
	fi
	
	cmd="${DUMP} -s ${TARGET}.elf"
	echo "${cmd} > ${TARGET}.txt"
	$cmd > ${TARGET}.txt
	if [ $? -ne 0 ] ; then
		echo "RXduino application build error!"
		exit
	fi
fi
