#include <rxduino.h>
#include "nokia_lcd.h"

#ifdef __GNUC__
  #ifdef CPU_IS_RX62N
    #include "iodefine_gcc62n.h"
  #endif
  #ifdef CPU_IS_RX63N
    #include "iodefine_gcc63n.h"
  #endif
#endif
#ifdef __RENESAS__
  #include "iodefine.h"
#endif

// (C) Copyright 2011 Tokushu Denshi Kairo Inc.

typedef enum {LCD6610, LCD6100,PCF8833}LCDtype;
LCDtype _type=LCD6610;
// S1D15G10‚ÉƒRƒ}ƒ“ƒh‚ð‘—‚é

int _rows, _columns, _width, _height;
int	_row = 0;
int	_column = 0;
int	_foreground = 0x00FFFFFF;
int	_background = 0x00000000;

extern CSPI SPI;

static void	_window(int x, int y, int width, int height);		// Call this by "LCD_window" function
static void	_putp(int colour);		// Call this by "_putp" function

static void	NokiaLCD_command(int value);
static void	NokiaLCD_data(int value);

const unsigned char FONT8x8[97][8] = {
	{0x08,0x08,0x08,0x00,0x00,0x00,0x00,0x00,}, // columns, rows, num_bytes_per_char
	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,}, // space 0x20
	{0x30,0x78,0x78,0x30,0x30,0x00,0x30,0x00,}, // !
	{0x6C,0x6C,0x6C,0x00,0x00,0x00,0x00,0x00,}, // "
	{0x6C,0x6C,0xFE,0x6C,0xFE,0x6C,0x6C,0x00,}, // #
	{0x18,0x3E,0x60,0x3C,0x06,0x7C,0x18,0x00,}, // $
	{0x00,0x63,0x66,0x0C,0x18,0x33,0x63,0x00,}, // %
	{0x1C,0x36,0x1C,0x3B,0x6E,0x66,0x3B,0x00,}, // &
	{0x30,0x30,0x60,0x00,0x00,0x00,0x00,0x00,}, // '
	{0x0C,0x18,0x30,0x30,0x30,0x18,0x0C,0x00,}, // (
	{0x30,0x18,0x0C,0x0C,0x0C,0x18,0x30,0x00,}, // )
	{0x00,0x66,0x3C,0xFF,0x3C,0x66,0x00,0x00,}, // *
	{0x00,0x30,0x30,0xFC,0x30,0x30,0x00,0x00,}, // +
	{0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x30,}, // ,
	{0x00,0x00,0x00,0x7E,0x00,0x00,0x00,0x00,}, // -
	{0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x00,}, // .
	{0x03,0x06,0x0C,0x18,0x30,0x60,0x40,0x00,}, // / (forward slash)
	{0x3E,0x63,0x63,0x6B,0x63,0x63,0x3E,0x00,}, // 0 0x30
	{0x18,0x38,0x58,0x18,0x18,0x18,0x7E,0x00,}, // 1
	{0x3C,0x66,0x06,0x1C,0x30,0x66,0x7E,0x00,}, // 2
	{0x3C,0x66,0x06,0x1C,0x06,0x66,0x3C,0x00,}, // 3
	{0x0E,0x1E,0x36,0x66,0x7F,0x06,0x0F,0x00,}, // 4
	{0x7E,0x60,0x7C,0x06,0x06,0x66,0x3C,0x00,}, // 5
	{0x1C,0x30,0x60,0x7C,0x66,0x66,0x3C,0x00,}, // 6
	{0x7E,0x66,0x06,0x0C,0x18,0x18,0x18,0x00,}, // 7
	{0x3C,0x66,0x66,0x3C,0x66,0x66,0x3C,0x00,}, // 8
	{0x3C,0x66,0x66,0x3E,0x06,0x0C,0x38,0x00,}, // 9
	{0x00,0x18,0x18,0x00,0x00,0x18,0x18,0x00,}, // :
	{0x00,0x18,0x18,0x00,0x00,0x18,0x18,0x30,}, // ;
	{0x0C,0x18,0x30,0x60,0x30,0x18,0x0C,0x00,}, // <
	{0x00,0x00,0x7E,0x00,0x00,0x7E,0x00,0x00,}, // =
	{0x30,0x18,0x0C,0x06,0x0C,0x18,0x30,0x00,}, // >
	{0x3C,0x66,0x06,0x0C,0x18,0x00,0x18,0x00,}, // ?
	{0x3E,0x63,0x6F,0x69,0x6F,0x60,0x3E,0x00,}, // @ 0x40
	{0x18,0x3C,0x66,0x66,0x7E,0x66,0x66,0x00,}, // A
	{0x7E,0x33,0x33,0x3E,0x33,0x33,0x7E,0x00,}, // B
	{0x1E,0x33,0x60,0x60,0x60,0x33,0x1E,0x00,}, // C
	{0x7C,0x36,0x33,0x33,0x33,0x36,0x7C,0x00,}, // D
	{0x7F,0x31,0x34,0x3C,0x34,0x31,0x7F,0x00,}, // E
	{0x7F,0x31,0x34,0x3C,0x34,0x30,0x78,0x00,}, // F
	{0x1E,0x33,0x60,0x60,0x67,0x33,0x1F,0x00,}, // G
	{0x66,0x66,0x66,0x7E,0x66,0x66,0x66,0x00,}, // H
	{0x3C,0x18,0x18,0x18,0x18,0x18,0x3C,0x00,}, // I
	{0x0F,0x06,0x06,0x06,0x66,0x66,0x3C,0x00,}, // J
	{0x73,0x33,0x36,0x3C,0x36,0x33,0x73,0x00,}, // K
	{0x78,0x30,0x30,0x30,0x31,0x33,0x7F,0x00,}, // L
	{0x63,0x77,0x7F,0x7F,0x6B,0x63,0x63,0x00,}, // M
	{0x63,0x73,0x7B,0x6F,0x67,0x63,0x63,0x00,}, // N
	{0x3E,0x63,0x63,0x63,0x63,0x63,0x3E,0x00,}, // O
	{0x7E,0x33,0x33,0x3E,0x30,0x30,0x78,0x00,}, // P 0x50
	{0x3C,0x66,0x66,0x66,0x6E,0x3C,0x0E,0x00,}, // Q
	{0x7E,0x33,0x33,0x3E,0x36,0x33,0x73,0x00,}, // R
	{0x3C,0x66,0x30,0x18,0x0C,0x66,0x3C,0x00,}, // S
	{0x7E,0x5A,0x18,0x18,0x18,0x18,0x3C,0x00,}, // T
	{0x66,0x66,0x66,0x66,0x66,0x66,0x7E,0x00,}, // U
	{0x66,0x66,0x66,0x66,0x66,0x3C,0x18,0x00,}, // V
	{0x63,0x63,0x63,0x6B,0x7F,0x77,0x63,0x00,}, // W
	{0x63,0x63,0x36,0x1C,0x1C,0x36,0x63,0x00,}, // X
	{0x66,0x66,0x66,0x3C,0x18,0x18,0x3C,0x00,}, // Y
	{0x7F,0x63,0x46,0x0C,0x19,0x33,0x7F,0x00,}, // Z
	{0x3C,0x30,0x30,0x30,0x30,0x30,0x3C,0x00,}, // [
	{0x60,0x30,0x18,0x0C,0x06,0x03,0x01,0x00,}, // \ (back slash)
	{0x3C,0x0C,0x0C,0x0C,0x0C,0x0C,0x3C,0x00,}, // ]
	{0x08,0x1C,0x36,0x63,0x00,0x00,0x00,0x00,}, // ^
	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,}, // _
	{0x18,0x18,0x0C,0x00,0x00,0x00,0x00,0x00,}, // ` 0x60
	{0x00,0x00,0x3C,0x06,0x3E,0x66,0x3B,0x00,}, // a
	{0x70,0x30,0x3E,0x33,0x33,0x33,0x6E,0x00,}, // b
	{0x00,0x00,0x3C,0x66,0x60,0x66,0x3C,0x00,}, // c
	{0x0E,0x06,0x3E,0x66,0x66,0x66,0x3B,0x00,}, // d
	{0x00,0x00,0x3C,0x66,0x7E,0x60,0x3C,0x00,}, // e
	{0x1C,0x36,0x30,0x78,0x30,0x30,0x78,0x00,}, // f
	{0x00,0x00,0x3B,0x66,0x66,0x3E,0x06,0x7C,}, // g
	{0x70,0x30,0x36,0x3B,0x33,0x33,0x73,0x00,}, // h
	{0x18,0x00,0x38,0x18,0x18,0x18,0x3C,0x00,}, // i
	{0x06,0x00,0x06,0x06,0x06,0x66,0x66,0x3C,}, // j
	{0x70,0x30,0x33,0x36,0x3C,0x36,0x73,0x00,}, // k
	{0x38,0x18,0x18,0x18,0x18,0x18,0x3C,0x00,}, // l
	{0x00,0x00,0x66,0x7F,0x7F,0x6B,0x63,0x00,}, // m
	{0x00,0x00,0x7C,0x66,0x66,0x66,0x66,0x00,}, // n
	{0x00,0x00,0x3C,0x66,0x66,0x66,0x3C,0x00,}, // o
	{0x00,0x00,0x6E,0x33,0x33,0x3E,0x30,0x78,}, // p
	{0x00,0x00,0x3B,0x66,0x66,0x3E,0x06,0x0F,}, // q
	{0x00,0x00,0x6E,0x3B,0x33,0x30,0x78,0x00,}, // r
	{0x00,0x00,0x3E,0x60,0x3C,0x06,0x7C,0x00,}, // s
	{0x08,0x18,0x3E,0x18,0x18,0x1A,0x0C,0x00,}, // t
	{0x00,0x00,0x66,0x66,0x66,0x66,0x3B,0x00,}, // u
	{0x00,0x00,0x66,0x66,0x66,0x3C,0x18,0x00,}, // v
	{0x00,0x00,0x63,0x6B,0x7F,0x7F,0x36,0x00,}, // w
	{0x00,0x00,0x63,0x36,0x1C,0x36,0x63,0x00,}, // x
	{0x00,0x00,0x66,0x66,0x66,0x3E,0x06,0x7C,}, // y
	{0x00,0x00,0x7E,0x4C,0x18,0x32,0x7E,0x00,}, // z
	{0x0E,0x18,0x18,0x70,0x18,0x18,0x0E,0x00,}, // {
	{0x0C,0x0C,0x0C,0x00,0x0C,0x0C,0x0C,0x00,}, // |
	{0x70,0x18,0x18,0x0E,0x18,0x18,0x70,0x00,}, // }
	{0x3B,0x6E,0x00,0x00,0x00,0x00,0x00,0x00,}, // ~
	{0x1C,0x36,0x36,0x1C,0x00,0x00,0x00,0x00,},
}; // DEL

static inline void NokiaLCD_CS_OUT()
{
#ifdef CPU_IS_RX62N
	PORT5.DDR.BYTE |= (1U << 1);
#endif
}

static inline void NokiaLCD_CS_H()
{
#ifdef CPU_IS_RX62N
	PORT5.DR.BYTE |= (1U << 1);
#endif
}

static inline void NokiaLCD_CS_L()
{
#ifdef CPU_IS_RX62N
	PORT5.DR.BYTE &= ~(1U << 1);
#endif
}

static inline void NokiaLCD_RES_OUT()
{
#ifdef CPU_IS_RX62N
	PORT5.DDR.BYTE |= (1U << 0);
#endif
}

static inline void NokiaLCD_RES_H()
{
#ifdef CPU_IS_RX62N
	PORT5.DR.BYTE |= (1U << 0);
#endif
}

static inline void NokiaLCD_RES_L()
{
#ifdef CPU_IS_RX62N
	PORT5.DR.BYTE &= ~(1U << 0);
#endif
}

void NokiaLCD_command(int value) {
	NokiaLCD_CS_L();
	SPI.transfer(value & 0xFF);
	NokiaLCD_CS_H();
}

void NokiaLCD_data(int value) {
	NokiaLCD_CS_L();
	SPI.transfer((value | 0x100));
	NokiaLCD_CS_H();
}

void NokiaLCD_reset(void) {
    NokiaLCD_CS_H();
    NokiaLCD_CS_OUT();
    NokiaLCD_CS_L();
    NokiaLCD_RES_H();
    NokiaLCD_RES_OUT();
    NokiaLCD_RES_H();
 
	// setup the SPI interface and bring display out of reset
	NokiaLCD_CS_H();		//_cs = 1;
	NokiaLCD_RES_L();		//_rst = 0;


	SPI.begin();
	SPI.port = SPI_PORT_CS0_DUINO;
	SPI.setBitLength(9);		//_spi.format(9);
	SPI.setClockDivider(SPI_CLOCK_DIV16);
	SPI.setBitOrder(MSBFIRST);		//_spi.format(9);
					//_spi.frequency(LCD_FREQUENCY);

	RSPI0.SPCMD0.WORD = 0x0800;	/* LSBF=0, SPB=7, BRDV=0, CPOL=1, CPHA=0 */
	RSPI0.SPBR.BYTE = 48000000UL/* =PCLK */ /2/21168000UL/* =SPI_CLK */-1;

	delay(1);	//wait_ms(1);
	NokiaLCD_RES_H();		//_rst = 1;
	delay(1);	//wait_ms(1);
	NokiaLCD_CS_L();		//_cs = 0;

    switch (_type) {
		case LCD6100:
			NokiaLCD_command(0xCA);	// display control
			NokiaLCD_data(0);
			NokiaLCD_data(32);
			NokiaLCD_data(0);
			NokiaLCD_command(0xBB);
			NokiaLCD_data(1);
			NokiaLCD_command(0xD1);	// oscillator on
			NokiaLCD_command(0x94);	// sleep out
			NokiaLCD_command(0x20);	// power control
			NokiaLCD_data(0x0F);
			NokiaLCD_command(0xA7);	// invert display
			NokiaLCD_command(0x81);	// Voltage control
			NokiaLCD_data(39);			// contrast setting: 0..63
			NokiaLCD_data(3);			// resistance ratio
			delay(1);		//wait_ms(1);
			NokiaLCD_command(0xBC);
			NokiaLCD_data(0);
			NokiaLCD_data(1);
			NokiaLCD_data(4);
			NokiaLCD_command(0xAF);	// turn on the display
			break;

		case LCD6610:
			NokiaLCD_command(0xCA);	// display control
			NokiaLCD_data(0);
			NokiaLCD_data(31);
			NokiaLCD_data(0);
			NokiaLCD_command(0xBB);
			NokiaLCD_data(1);
			NokiaLCD_command(0xD1);	// oscillator on
			NokiaLCD_command(0x94);	// sleep out
			NokiaLCD_command(0x20);	// power control
			NokiaLCD_data(0x0F);
			NokiaLCD_command(0xA7);	// invert display
			NokiaLCD_command(0x81);	// Voltage control
			NokiaLCD_data(39);			// contrast setting: 0..63
			NokiaLCD_data(3);			// resistance ratio
			delay(1);		//delay_ms(1);	//wait_ms(1);
			NokiaLCD_command(0xBC);
			NokiaLCD_data(0);
			NokiaLCD_data(0);
			NokiaLCD_data(2);
			NokiaLCD_command(0xAF);	// turn on the display
			break;
		case PCF8833:
			NokiaLCD_command(0x11);	// sleep out
			NokiaLCD_command(0x3A);	// column mode
			NokiaLCD_data(0x05);
			NokiaLCD_command(0x36);	// madctl
			NokiaLCD_data(0x60);		// vertical RAM, flip x
			NokiaLCD_command(0x25);	// setcon
			NokiaLCD_data(0x30);		// contrast 0x30
			delay(2);		//wait_ms(2);
			NokiaLCD_command(0x29);	//DISPON
			NokiaLCD_command(0x03);	//BSTRON
			break;
    }
    NokiaLCD_CS_H();	// _cs = 1;

    NokiaLCD_cls();
}


void _window(int x, int y, int width, int height) {
	int x1 = x + 2;
	int y1 = y + 0;
	int x2 = x1 + width - 1;
	int y2 = y1 + height - 1;

	switch (_type) {
		case LCD6100:
		case LCD6610:
			NokiaLCD_command(0x15); // column
			NokiaLCD_data(x1);
			NokiaLCD_data(x2);
			NokiaLCD_command(0x75); // row
			NokiaLCD_data(y1);
			NokiaLCD_data(y2);
			NokiaLCD_command(0x5C); // start write to ram
			break;
		case PCF8833:
			NokiaLCD_command(0x2A);  // column
			NokiaLCD_data(x1);
			NokiaLCD_data(x2);
			NokiaLCD_command(0x2B); // row
			NokiaLCD_data(y1);
			NokiaLCD_data(y2);
			NokiaLCD_command(0x2C); // start write to ram
			break;
	}
}

void _putp(int colour) {
	int gr = ((colour >> 20) & 0x0F)
			 | ((colour >> 8 ) & 0xF0);
	int nb = ((colour >> 4 ) & 0x0F);
	NokiaLCD_data(nb);
	NokiaLCD_data(gr);
}

void LCD_locate(int column, int row) {
	_column = column;
	_row = row;
}

void LCD_newline(void) {
	_column = 0;
	_row++;
	if (_row >= NokiaLCD_rows()) {
		_row = 0;
	}
}

int LCD_putc(int value) {
	int x = _column * 8;  // FIXME: Char sizes
	int y = _row * 8;

	NokiaLCD_bitblit(x + 1, y + 1, 8, 8, (char*)&(FONT8x8[value - 0x1F][0]));

	_column++;

	if (_column >= LCD_COLS) {
		_row++;
		_column = 0;
	}

	if (_row >= LCD_ROWS) {
		_row = 0;
	}

	return value;
}

void NokiaLCD_cls(void) {
	//TODO:
	//FIXME:
	NokiaLCD_fill(0, 0, LCD_WIDTH, LCD_HEIGHT, _background);
    _row = 0;
    _column = 0;
}


void NokiaLCD_window(int x, int y, int width, int height) {
    NokiaLCD_CS_L();	//_cs = 0;
    _window(x, y, width, height);
    NokiaLCD_CS_H();	// _cs = 1;
}

void NokiaLCD_putp(int colour) {
    NokiaLCD_CS_L();	//_cs = 0;
    _putp(colour);
    NokiaLCD_CS_H();	//_cs = 1;
}

void NokiaLCD_pixel(int x, int y, int colour) {
    NokiaLCD_CS_L();	// _cs = 0;
    _window(x, y, 1, 1);
    _putp(colour);
    NokiaLCD_CS_H();	// _cs = 1;
}

void NokiaLCD_fill(int x, int y, int width, int height, int colour) {
    NokiaLCD_CS_L();	//_cs = 0;
    _window(x, y, width, height);
    int i;
    switch (_type) {
        case LCD6100:
        case PCF8833:
            for (i=0; i<width*height; i++) {
                _putp(colour);
            }
            break;
        case LCD6610:
            for (i=0; i<width*height/2; i++) {
                int r4 = (colour >> (16 + 4)) & 0xF;
                int g4 = (colour >> (8 + 4)) & 0xF;
                int b4 = (colour >> (0 + 4)) & 0xF;
                int d1 = (r4 << 4) | g4;
                int d2 = (b4 << 4) | r4;
                int d3 = (g4 << 4) | b4;
                NokiaLCD_data(d1);
                NokiaLCD_data(d2);
                NokiaLCD_data(d3);
            }
            break;
    }
    _window(0, 0, LCD_WIDTH, LCD_HEIGHT);
    NokiaLCD_CS_L();	//_cs = 1;
}

void NokiaLCD_blit(int x, int y, int width, int height, const int* colour)
{
	int i;
	NokiaLCD_CS_L();	//_cs = 0;
	_window(x, y, width, height);

	switch (_type) {
	case LCD6100:
	case PCF8833:
		for (i=0; i<width*height; i++) {
			 _putp(colour[i]);
		 }
		 break;
	case LCD6610:
		for (i=0; i<width*height/2; i++) {
			int r41 = (colour[i*2] >> (16 + 4)) & 0xF;
			int g41 = (colour[i*2] >> (8 + 4)) & 0xF;
			int b41 = (colour[i*2] >> (0 + 4)) & 0xF;

			int r42 = (colour[i*2+1] >> (16 + 4)) & 0xF;
			int g42 = (colour[i*2+1] >> (8 + 4)) & 0xF;
			int b42 = (colour[i*2+1] >> (0 + 4)) & 0xF;
			int d1 = (r41 << 4) | g41;
			int d2 = (b41 << 4) | r42;
			int d3 = (g42 << 4) | b42;
			NokiaLCD_data(d1);
			NokiaLCD_data(d2);
			NokiaLCD_data(d3);
		}
		break;
	 }
	_window(0, 0, LCD_WIDTH, LCD_HEIGHT);
	NokiaLCD_CS_H();	//_cs = 1;
}

void NokiaLCD_bitblit(int x, int y, int width, int height, const char* bitstream)
{
	int i;
	NokiaLCD_CS_L();	//_cs = 0;
	_window(x, y, width, height);

	switch (_type) {
		case LCD6100:
		case PCF8833:
			for (i=0; i<height*width; i++) {
				int byte = i / 8;
				int bit = i % 8;
				int colour = ((bitstream[byte] << bit) & 0x80) ? _foreground : _background;
				_putp(colour);
			}
			break;
		case LCD6610:
			for(i=0; i<height*width/2; i++) {
				int byte1 = (i*2) / 8;
				int bit1 = (i*2) % 8;
				int colour1 = ((bitstream[byte1] << bit1) & 0x80) ? _foreground : _background;
				int byte2 = (i*2+1) / 8;
				int bit2 = (i*2+1) % 8;
				int colour2 = ((bitstream[byte2] << bit2) & 0x80) ? _foreground : _background;

				int r41 = (colour1 >> (16 + 4)) & 0xF;
				int g41 = (colour1 >> (8 + 4)) & 0xF;
				int b41 = (colour1 >> (0 + 4)) & 0xF;

				int r42 = (colour2 >> (16 + 4)) & 0xF;
				int g42 = (colour2 >> (8 + 4)) & 0xF;
				int b42 = (colour2 >> (0 + 4)) & 0xF;
				int d1 = (r41 << 4) | g41;
				int d2 = (b41 << 4) | r42;
				int d3 = (g42 << 4) | b42;
				NokiaLCD_data(d1);
				NokiaLCD_data(d2);
				NokiaLCD_data(d3);
			}
			break;
	 }
	_window(0, 0, _width, _height);
	NokiaLCD_CS_H();	//_cs = 1;
}

void NokiaLCD_foreground(int c) {
    _foreground = c;
}

void NokiaLCD_background(int c) {
    _background = c;
}

int NokiaLCD_width() {
    return LCD_WIDTH;
}

int NokiaLCD_height() {
    return LCD_HEIGHT;
}

int NokiaLCD_columns() {
    return LCD_COLS;
}

int NokiaLCD_rows() {
    return LCD_ROWS;
}
