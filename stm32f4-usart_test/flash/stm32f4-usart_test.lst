
stm32f4-usart_test.elf:     file format elf32-littlearm


Disassembly of section .text:

08000188 <pinMode>:
 static const uint8_t MISO = 12;
 static const uint8_t SCK  = 13; // PB7
 static const uint8_t LED_BUILTIN = 14;
 */

void pinMode(uint32_t portpin, GPIOMode_TypeDef mode) {
 8000188:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(GPIOPeriph[portpin>>16 & 0xf], ENABLE);
 800018a:	f3c0 4503 	ubfx	r5, r0, #16, #4
 800018e:	4c0d      	ldr	r4, [pc, #52]	; (80001c4 <pinMode+0x3c>)
 static const uint8_t MISO = 12;
 static const uint8_t SCK  = 13; // PB7
 static const uint8_t LED_BUILTIN = 14;
 */

void pinMode(uint32_t portpin, GPIOMode_TypeDef mode) {
 8000190:	460f      	mov	r7, r1
 8000192:	4606      	mov	r6, r0

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(GPIOPeriph[portpin>>16 & 0xf], ENABLE);
 8000194:	2101      	movs	r1, #1
 8000196:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	//
	GPIO_Init(GPIOPort[portpin >>16 & 0x0f], &GPIO_InitStructure);
 800019a:	eb04 0485 	add.w	r4, r4, r5, lsl #2

void pinMode(uint32_t portpin, GPIOMode_TypeDef mode) {

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(GPIOPeriph[portpin>>16 & 0xf], ENABLE);
 800019e:	f000 fb75 	bl	800088c <RCC_AHB1PeriphClockCmd>

	GPIO_InitStructure.GPIO_Pin = portpin & 0xffff;
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80001a2:	2300      	movs	r3, #0

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(GPIOPeriph[portpin>>16 & 0xf], ENABLE);

	GPIO_InitStructure.GPIO_Pin = portpin & 0xffff;
 80001a4:	b2b6      	uxth	r6, r6
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80001a6:	f88d 3006 	strb.w	r3, [sp, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80001aa:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	//
	GPIO_Init(GPIOPort[portpin >>16 & 0x0f], &GPIO_InitStructure);
 80001ae:	6aa0      	ldr	r0, [r4, #40]	; 0x28

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(GPIOPeriph[portpin>>16 & 0xf], ENABLE);

	GPIO_InitStructure.GPIO_Pin = portpin & 0xffff;
 80001b0:	9600      	str	r6, [sp, #0]
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80001b2:	2302      	movs	r3, #2
	//
	GPIO_Init(GPIOPort[portpin >>16 & 0x0f], &GPIO_InitStructure);
 80001b4:	4669      	mov	r1, sp
	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(GPIOPeriph[portpin>>16 & 0xf], ENABLE);

	GPIO_InitStructure.GPIO_Pin = portpin & 0xffff;
	GPIO_InitStructure.GPIO_Mode = mode;
 80001b6:	f88d 7004 	strb.w	r7, [sp, #4]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80001ba:	f88d 3005 	strb.w	r3, [sp, #5]
	//
	GPIO_Init(GPIOPort[portpin >>16 & 0x0f], &GPIO_InitStructure);
 80001be:	f000 f9a7 	bl	8000510 <GPIO_Init>
}
 80001c2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80001c4:	20000000 	.word	0x20000000

080001c8 <GPIOMode>:


void GPIOMode(uint32_t periph, GPIO_TypeDef * port, uint16_t pins,
		GPIOMode_TypeDef mode, GPIOSpeed_TypeDef clk, GPIOOType_TypeDef otype,
		GPIOPuPd_TypeDef pupd) {
 80001c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80001ca:	460c      	mov	r4, r1

	GPIO_InitTypeDef GPIO_InitStructure;
	// wake up the port
	RCC_AHB1PeriphClockCmd(periph, ENABLE);
 80001cc:	2101      	movs	r1, #1
}


void GPIOMode(uint32_t periph, GPIO_TypeDef * port, uint16_t pins,
		GPIOMode_TypeDef mode, GPIOSpeed_TypeDef clk, GPIOOType_TypeDef otype,
		GPIOPuPd_TypeDef pupd) {
 80001ce:	461e      	mov	r6, r3
 80001d0:	4615      	mov	r5, r2

	GPIO_InitTypeDef GPIO_InitStructure;
	// wake up the port
	RCC_AHB1PeriphClockCmd(periph, ENABLE);
 80001d2:	f000 fb5b 	bl	800088c <RCC_AHB1PeriphClockCmd>
	//
	GPIO_InitStructure.GPIO_Pin = pins;
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = otype;
 80001d6:	f89d 301c 	ldrb.w	r3, [sp, #28]

	GPIO_InitTypeDef GPIO_InitStructure;
	// wake up the port
	RCC_AHB1PeriphClockCmd(periph, ENABLE);
	//
	GPIO_InitStructure.GPIO_Pin = pins;
 80001da:	9500      	str	r5, [sp, #0]
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = otype;
 80001dc:	f88d 3006 	strb.w	r3, [sp, #6]
	GPIO_InitStructure.GPIO_PuPd = pupd;
 80001e0:	f89d 3020 	ldrb.w	r3, [sp, #32]
	GPIO_InitTypeDef GPIO_InitStructure;
	// wake up the port
	RCC_AHB1PeriphClockCmd(periph, ENABLE);
	//
	GPIO_InitStructure.GPIO_Pin = pins;
	GPIO_InitStructure.GPIO_Mode = mode;
 80001e4:	f88d 6004 	strb.w	r6, [sp, #4]
	GPIO_InitStructure.GPIO_OType = otype;
	GPIO_InitStructure.GPIO_PuPd = pupd;
 80001e8:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_InitStructure.GPIO_Speed = clk;
 80001ec:	f89d 3018 	ldrb.w	r3, [sp, #24]
	//
	GPIO_Init(port, &GPIO_InitStructure);
 80001f0:	4620      	mov	r0, r4
 80001f2:	4669      	mov	r1, sp
	//
	GPIO_InitStructure.GPIO_Pin = pins;
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = otype;
	GPIO_InitStructure.GPIO_PuPd = pupd;
	GPIO_InitStructure.GPIO_Speed = clk;
 80001f4:	f88d 3005 	strb.w	r3, [sp, #5]
	//
	GPIO_Init(port, &GPIO_InitStructure);
 80001f8:	f000 f98a 	bl	8000510 <GPIO_Init>
}
 80001fc:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

080001fe <digitalWrite>:

/*
 static void turnOffPWM(uint8_t timer) {
 }
 */
void digitalWrite(uint32_t portpin, uint8_t bit) {
 80001fe:	4603      	mov	r3, r0
 8000200:	4a06      	ldr	r2, [pc, #24]	; (800021c <digitalWrite+0x1e>)
 8000202:	0c00      	lsrs	r0, r0, #16
	if (bit) {
		//? Bit_SET : Bit_RESET ));
		GPIO_SetBits(GPIOPort[portpin >>16 & 0x0f], portpin & 0xffff);
 8000204:	f000 000f 	and.w	r0, r0, #15
 8000208:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800020c:	6a90      	ldr	r0, [r2, #40]	; 0x28
/*
 static void turnOffPWM(uint8_t timer) {
 }
 */
void digitalWrite(uint32_t portpin, uint8_t bit) {
	if (bit) {
 800020e:	b111      	cbz	r1, 8000216 <digitalWrite+0x18>
		//? Bit_SET : Bit_RESET ));
		GPIO_SetBits(GPIOPort[portpin >>16 & 0x0f], portpin & 0xffff);
 8000210:	b299      	uxth	r1, r3
 8000212:	f000 b9ee 	b.w	80005f2 <GPIO_SetBits>
	} else {
		GPIO_ResetBits(GPIOPort[portpin >>16 & 0x0f], portpin & 0xffff);
 8000216:	b299      	uxth	r1, r3
 8000218:	f000 b9ed 	b.w	80005f6 <GPIO_ResetBits>
 800021c:	20000000 	.word	0x20000000

08000220 <portWrite>:
	}
}

void portWrite(GPIO_TypeDef * port, uint16_t bits) {
	GPIO_Write(port, bits);
 8000220:	f000 b9f0 	b.w	8000604 <GPIO_Write>

08000224 <digitalRead>:
}

uint8_t digitalRead(GPIO_TypeDef * port, uint16_t pin) {
	uint8_t mode = (port->MODER) >> (pin * 2);
 8000224:	6802      	ldr	r2, [r0, #0]

void portWrite(GPIO_TypeDef * port, uint16_t bits) {
	GPIO_Write(port, bits);
}

uint8_t digitalRead(GPIO_TypeDef * port, uint16_t pin) {
 8000226:	b508      	push	{r3, lr}
	uint8_t mode = (port->MODER) >> (pin * 2);
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	fa32 f303 	lsrs.w	r3, r2, r3
	if (mode == GPIO_Mode_OUT)
 800022e:	b2db      	uxtb	r3, r3
 8000230:	2b01      	cmp	r3, #1
 8000232:	d105      	bne.n	8000240 <digitalRead+0x1c>
		return (GPIO_ReadOutputDataBit(port, pin) ? SET : RESET);
 8000234:	f000 f9d4 	bl	80005e0 <GPIO_ReadOutputDataBit>
 8000238:	3000      	adds	r0, #0
 800023a:	bf18      	it	ne
 800023c:	2001      	movne	r0, #1
 800023e:	bd08      	pop	{r3, pc}
	return (GPIO_ReadInputDataBit(port, pin) ? SET : RESET);
 8000240:	f000 f9c5 	bl	80005ce <GPIO_ReadInputDataBit>
 8000244:	3000      	adds	r0, #0
 8000246:	bf18      	it	ne
 8000248:	2001      	movne	r0, #1
}
 800024a:	bd08      	pop	{r3, pc}

0800024c <_ZN11USARTSerial5beginEm>:
#include <stm32f4xx_rcc.h>
#include <stm32f4xx_usart.h> // under Libraries/STM32F4xx_StdPeriph_Driver/inc and src

#include "usart.h"

void USARTSerial::begin(uint32_t baud) {
 800024c:	b5f0      	push	{r4, r5, r6, r7, lr}
	USART_InitTypeDef USART_InitStruct; // this is for the USART1 initilization
//	NVIC_InitTypeDef NVIC_InitStructure; // this is used to configure the NVIC (nested vector interrupt controller)

//	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, (FunctionalState) ENABLE);
	GPIOMode(RCC_AHB1Periph_GPIOB, GPIOB, GPIO_Pin_10 | GPIO_Pin_11,
			GPIO_Mode_AF, GPIO_Speed_50MHz, GPIO_OType_PP, GPIO_PuPd_UP);
 800024e:	4e1a      	ldr	r6, [pc, #104]	; (80002b8 <_ZN11USARTSerial5beginEm+0x6c>)
 8000250:	2002      	movs	r0, #2
#include <stm32f4xx_rcc.h>
#include <stm32f4xx_usart.h> // under Libraries/STM32F4xx_StdPeriph_Driver/inc and src

#include "usart.h"

void USARTSerial::begin(uint32_t baud) {
 8000252:	b089      	sub	sp, #36	; 0x24
	USART_InitTypeDef USART_InitStruct; // this is for the USART1 initilization
//	NVIC_InitTypeDef NVIC_InitStructure; // this is used to configure the NVIC (nested vector interrupt controller)

//	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, (FunctionalState) ENABLE);
	GPIOMode(RCC_AHB1Periph_GPIOB, GPIOB, GPIO_Pin_10 | GPIO_Pin_11,
			GPIO_Mode_AF, GPIO_Speed_50MHz, GPIO_OType_PP, GPIO_PuPd_UP);
 8000254:	2400      	movs	r4, #0
 8000256:	4603      	mov	r3, r0
 8000258:	2501      	movs	r5, #1
#include <stm32f4xx_rcc.h>
#include <stm32f4xx_usart.h> // under Libraries/STM32F4xx_StdPeriph_Driver/inc and src

#include "usart.h"

void USARTSerial::begin(uint32_t baud) {
 800025a:	460f      	mov	r7, r1
	USART_InitTypeDef USART_InitStruct; // this is for the USART1 initilization
//	NVIC_InitTypeDef NVIC_InitStructure; // this is used to configure the NVIC (nested vector interrupt controller)

//	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, (FunctionalState) ENABLE);
	GPIOMode(RCC_AHB1Periph_GPIOB, GPIOB, GPIO_Pin_10 | GPIO_Pin_11,
			GPIO_Mode_AF, GPIO_Speed_50MHz, GPIO_OType_PP, GPIO_PuPd_UP);
 800025c:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8000260:	4631      	mov	r1, r6
 8000262:	e88d 0031 	stmia.w	sp, {r0, r4, r5}
 8000266:	f7ff ffaf 	bl	80001c8 <GPIOMode>
	/* USART3 clock enable */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, (FunctionalState) ENABLE);
 800026a:	4629      	mov	r1, r5
 800026c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000270:	f000 fb30 	bl	80008d4 <RCC_APB1PeriphClockCmd>

	GPIO_PinAFConfig(GPIOB, GPIO_PinSource10, GPIO_AF_USART3 ); // TX -- PB10
 8000274:	4630      	mov	r0, r6
 8000276:	210a      	movs	r1, #10
 8000278:	2207      	movs	r2, #7
 800027a:	f000 f9c9 	bl	8000610 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource11, GPIO_AF_USART3 ); // RX -- PB11
 800027e:	4630      	mov	r0, r6
 8000280:	210b      	movs	r1, #11
 8000282:	2207      	movs	r2, #7
 8000284:	f000 f9c4 	bl	8000610 <GPIO_PinAFConfig>

	USART_InitStruct.USART_BaudRate = baud;	// the baudrate is set to the value we passed into this init function
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
 8000288:	f8ad 4014 	strh.w	r4, [sp, #20]
	USART_InitStruct.USART_StopBits = USART_StopBits_1;	// we want 1 stop bit (standard)
 800028c:	f8ad 4016 	strh.w	r4, [sp, #22]
	USART_InitStruct.USART_Parity = USART_Parity_No;// we don't want a parity bit (standard)
 8000290:	f8ad 4018 	strh.w	r4, [sp, #24]
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
 8000294:	f8ad 401c 	strh.w	r4, [sp, #28]
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver

	USART_Init(USART3, &USART_InitStruct); // again all the properties are passed to the USART_Init function which takes care of all the bit setting
 8000298:	4c08      	ldr	r4, [pc, #32]	; (80002bc <_ZN11USARTSerial5beginEm+0x70>)
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, (FunctionalState) ENABLE);

	GPIO_PinAFConfig(GPIOB, GPIO_PinSource10, GPIO_AF_USART3 ); // TX -- PB10
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource11, GPIO_AF_USART3 ); // RX -- PB11

	USART_InitStruct.USART_BaudRate = baud;	// the baudrate is set to the value we passed into this init function
 800029a:	9704      	str	r7, [sp, #16]
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
	USART_InitStruct.USART_StopBits = USART_StopBits_1;	// we want 1 stop bit (standard)
	USART_InitStruct.USART_Parity = USART_Parity_No;// we don't want a parity bit (standard)
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver
 800029c:	230c      	movs	r3, #12

	USART_Init(USART3, &USART_InitStruct); // again all the properties are passed to the USART_Init function which takes care of all the bit setting
 800029e:	4620      	mov	r0, r4
 80002a0:	a904      	add	r1, sp, #16
	USART_InitStruct.USART_BaudRate = baud;	// the baudrate is set to the value we passed into this init function
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
	USART_InitStruct.USART_StopBits = USART_StopBits_1;	// we want 1 stop bit (standard)
	USART_InitStruct.USART_Parity = USART_Parity_No;// we don't want a parity bit (standard)
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver
 80002a2:	f8ad 301a 	strh.w	r3, [sp, #26]

	USART_Init(USART3, &USART_InitStruct); // again all the properties are passed to the USART_Init function which takes care of all the bit setting
 80002a6:	f000 fc47 	bl	8000b38 <USART_Init>
	 NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;	// the USART1 interrupts are globally enabled
	 NVIC_Init(&NVIC_InitStructure);	// the properties are passed to the NVIC_Init function which takes care of the low level stuff
	 */

	// finally this enables the complete USART1 peripheral
	USART_Cmd(USART3, (FunctionalState) ENABLE);
 80002aa:	4620      	mov	r0, r4
 80002ac:	4629      	mov	r1, r5
 80002ae:	f000 fcc0 	bl	8000c32 <USART_Cmd>

}
 80002b2:	b009      	add	sp, #36	; 0x24
 80002b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002b6:	bf00      	nop
 80002b8:	40020400 	.word	0x40020400
 80002bc:	40004800 	.word	0x40004800

080002c0 <_ZN11USARTSerial5writeEh>:
 *
 * Note 2: At the moment it takes a volatile char because the received_string variable
 * 		   declared as volatile char --> otherwise the compiler will spit out warnings
 * */

uint16_t USARTSerial::write(uint8_t ch) {
 80002c0:	b508      	push	{r3, lr}
	while (!(USART3->SR & 0x00000040))
 80002c2:	4b07      	ldr	r3, [pc, #28]	; (80002e0 <_ZN11USARTSerial5writeEh+0x20>)
 80002c4:	881a      	ldrh	r2, [r3, #0]
 80002c6:	0652      	lsls	r2, r2, #25
 80002c8:	d5fc      	bpl.n	80002c4 <_ZN11USARTSerial5writeEh+0x4>
	;
	USART_SendData(USART3, (uint16_t) ch);
 80002ca:	4805      	ldr	r0, [pc, #20]	; (80002e0 <_ZN11USARTSerial5writeEh+0x20>)
 80002cc:	f000 fcde 	bl	8000c8c <USART_SendData>
	/* Loop until the end of transmission */
	while (USART_GetFlagStatus(USART3, USART_FLAG_TC )
 80002d0:	4803      	ldr	r0, [pc, #12]	; (80002e0 <_ZN11USARTSerial5writeEh+0x20>)
 80002d2:	2140      	movs	r1, #64	; 0x40
 80002d4:	f000 fd87 	bl	8000de6 <USART_GetFlagStatus>
 80002d8:	2800      	cmp	r0, #0
 80002da:	d0f9      	beq.n	80002d0 <_ZN11USARTSerial5writeEh+0x10>
			== RESET) {
	}
	return 1;
}
 80002dc:	2001      	movs	r0, #1
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	40004800 	.word	0x40004800

080002e4 <_ZN11USARTSerial5writeEPht>:

uint16_t USARTSerial::write(uint8_t * p, uint16_t length) {
 80002e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002e6:	4605      	mov	r5, r0
 80002e8:	460c      	mov	r4, r1
 80002ea:	4617      	mov	r7, r2
	uint16_t n = 0;
	while (n++ < length)
 80002ec:	2600      	movs	r6, #0
 80002ee:	e004      	b.n	80002fa <_ZN11USARTSerial5writeEPht+0x16>
		write(*p++);
 80002f0:	5da1      	ldrb	r1, [r4, r6]
 80002f2:	4628      	mov	r0, r5
 80002f4:	f7ff ffe4 	bl	80002c0 <_ZN11USARTSerial5writeEh>
 80002f8:	3601      	adds	r6, #1
	return 1;
}

uint16_t USARTSerial::write(uint8_t * p, uint16_t length) {
	uint16_t n = 0;
	while (n++ < length)
 80002fa:	b2b3      	uxth	r3, r6
 80002fc:	42bb      	cmp	r3, r7
 80002fe:	d3f7      	bcc.n	80002f0 <_ZN11USARTSerial5writeEPht+0xc>
		write(*p++);
	return n;
 8000300:	1c78      	adds	r0, r7, #1
}
 8000302:	b280      	uxth	r0, r0
 8000304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000306 <_ZN11USARTSerial5printEPKc>:


uint16_t USARTSerial::print(const char * s) {
 8000306:	b570      	push	{r4, r5, r6, lr}
 8000308:	4606      	mov	r6, r0
 800030a:	460d      	mov	r5, r1
	uint16_t n = 0;
	while ( *s ) {
 800030c:	2400      	movs	r4, #0
 800030e:	e002      	b.n	8000316 <_ZN11USARTSerial5printEPKc+0x10>
		write(*s);
 8000310:	4630      	mov	r0, r6
 8000312:	f7ff ffd5 	bl	80002c0 <_ZN11USARTSerial5writeEh>
 8000316:	b2a0      	uxth	r0, r4
 8000318:	3401      	adds	r4, #1
		write(*p++);
	return n;
}


uint16_t USARTSerial::print(const char * s) {
 800031a:	192b      	adds	r3, r5, r4
	uint16_t n = 0;
	while ( *s ) {
 800031c:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8000320:	2900      	cmp	r1, #0
 8000322:	d1f5      	bne.n	8000310 <_ZN11USARTSerial5printEPKc+0xa>
		write(*s);
		s++;
		n++;
	}
	return n;
}
 8000324:	bd70      	pop	{r4, r5, r6, pc}

08000326 <_ZN11USARTSerial11printNumberEmh>:

uint16_t USARTSerial::printNumber(uint32_t val, const uint8_t base) {
	uint16_t n = 0;
	bool msd = false;
	uint32_t divider = ( base == 2 ? 1<<31 :
		( base == 16 ? 0x10000000L : 1000000000L ) );
 8000326:	2a02      	cmp	r2, #2
	}
	return n;
}


uint16_t USARTSerial::printNumber(uint32_t val, const uint8_t base) {
 8000328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800032c:	4604      	mov	r4, r0
 800032e:	460d      	mov	r5, r1
 8000330:	4617      	mov	r7, r2
	uint16_t n = 0;
	bool msd = false;
	uint32_t divider = ( base == 2 ? 1<<31 :
		( base == 16 ? 0x10000000L : 1000000000L ) );
 8000332:	d005      	beq.n	8000340 <_ZN11USARTSerial11printNumberEmh+0x1a>
 8000334:	4e16      	ldr	r6, [pc, #88]	; (8000390 <_ZN11USARTSerial11printNumberEmh+0x6a>)
 8000336:	2a10      	cmp	r2, #16
 8000338:	bf08      	it	eq
 800033a:	f04f 5680 	moveq.w	r6, #268435456	; 0x10000000
 800033e:	e001      	b.n	8000344 <_ZN11USARTSerial11printNumberEmh+0x1e>
 8000340:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8000344:	2300      	movs	r3, #0
 8000346:	4698      	mov	r8, r3

	uint8_t digit;
	while ( divider > 0 ) {
		digit = (val / divider) % base;
 8000348:	fbb5 f2f6 	udiv	r2, r5, r6
 800034c:	fbb2 f1f7 	udiv	r1, r2, r7
 8000350:	fb07 2111 	mls	r1, r7, r1, r2
 8000354:	b2c9      	uxtb	r1, r1
		if ( digit || msd || (!msd && (divider%base)) ) {
 8000356:	b931      	cbnz	r1, 8000366 <_ZN11USARTSerial11printNumberEmh+0x40>
 8000358:	b94b      	cbnz	r3, 800036e <_ZN11USARTSerial11printNumberEmh+0x48>
 800035a:	fbb6 f2f7 	udiv	r2, r6, r7
 800035e:	fb07 6212 	mls	r2, r7, r2, r6
 8000362:	b922      	cbnz	r2, 800036e <_ZN11USARTSerial11printNumberEmh+0x48>
 8000364:	e00d      	b.n	8000382 <_ZN11USARTSerial11printNumberEmh+0x5c>
			write('0' + ( digit > 9 ? digit + 7 : digit));
 8000366:	2909      	cmp	r1, #9
 8000368:	d901      	bls.n	800036e <_ZN11USARTSerial11printNumberEmh+0x48>
 800036a:	3137      	adds	r1, #55	; 0x37
 800036c:	e000      	b.n	8000370 <_ZN11USARTSerial11printNumberEmh+0x4a>
 800036e:	3130      	adds	r1, #48	; 0x30
 8000370:	b2c9      	uxtb	r1, r1
 8000372:	4620      	mov	r0, r4
			msd = true;
			n++;
 8000374:	f108 0801 	add.w	r8, r8, #1

	uint8_t digit;
	while ( divider > 0 ) {
		digit = (val / divider) % base;
		if ( digit || msd || (!msd && (divider%base)) ) {
			write('0' + ( digit > 9 ? digit + 7 : digit));
 8000378:	f7ff ffa2 	bl	80002c0 <_ZN11USARTSerial5writeEh>
			msd = true;
			n++;
 800037c:	fa1f f888 	uxth.w	r8, r8
	uint8_t digit;
	while ( divider > 0 ) {
		digit = (val / divider) % base;
		if ( digit || msd || (!msd && (divider%base)) ) {
			write('0' + ( digit > 9 ? digit + 7 : digit));
			msd = true;
 8000380:	2301      	movs	r3, #1
			n++;
		}
		divider /= base;
 8000382:	fbb6 f6f7 	udiv	r6, r6, r7
	bool msd = false;
	uint32_t divider = ( base == 2 ? 1<<31 :
		( base == 16 ? 0x10000000L : 1000000000L ) );

	uint8_t digit;
	while ( divider > 0 ) {
 8000386:	2e00      	cmp	r6, #0
 8000388:	d1de      	bne.n	8000348 <_ZN11USARTSerial11printNumberEmh+0x22>
			n++;
		}
		divider /= base;
	}
	return n;
}
 800038a:	4640      	mov	r0, r8
 800038c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000390:	3b9aca00 	.word	0x3b9aca00

08000394 <_ZN11USARTSerial10printFloatEfh>:

uint16_t USARTSerial::printFloat(float val, uint8_t prec) {
 8000394:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000398:	4605      	mov	r5, r0
 800039a:	460c      	mov	r4, r1
	uint16_t n = 0;
	if ( val < 0 ) {
 800039c:	4608      	mov	r0, r1
 800039e:	2100      	movs	r1, #0
		divider /= base;
	}
	return n;
}

uint16_t USARTSerial::printFloat(float val, uint8_t prec) {
 80003a0:	4690      	mov	r8, r2
	uint16_t n = 0;
	if ( val < 0 ) {
 80003a2:	f001 f8bd 	bl	8001520 <__aeabi_fcmplt>
 80003a6:	b138      	cbz	r0, 80003b8 <_ZN11USARTSerial10printFloatEfh+0x24>
		write('-');
 80003a8:	4628      	mov	r0, r5
 80003aa:	212d      	movs	r1, #45	; 0x2d
 80003ac:	f7ff ff88 	bl	80002c0 <_ZN11USARTSerial5writeEh>
		val = -val;
 80003b0:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
		n++;
 80003b4:	2601      	movs	r6, #1
 80003b6:	e000      	b.n	80003ba <_ZN11USARTSerial10printFloatEfh+0x26>
	}
	return n;
}

uint16_t USARTSerial::printFloat(float val, uint8_t prec) {
	uint16_t n = 0;
 80003b8:	2600      	movs	r6, #0
	if ( val < 0 ) {
		write('-');
		val = -val;
		n++;
	}
	uint32_t intpart = (uint32_t) val;
 80003ba:	4620      	mov	r0, r4
 80003bc:	f001 f8d8 	bl	8001570 <__aeabi_f2uiz>
 80003c0:	4681      	mov	r9, r0
	val -= intpart;
 80003c2:	f000 feb7 	bl	8001134 <__aeabi_ui2f>
 80003c6:	4601      	mov	r1, r0
 80003c8:	4620      	mov	r0, r4
 80003ca:	f000 fe01 	bl	8000fd0 <__aeabi_fsub>
	n += printNumber(intpart, DEC);
 80003ce:	4649      	mov	r1, r9
		write('-');
		val = -val;
		n++;
	}
	uint32_t intpart = (uint32_t) val;
	val -= intpart;
 80003d0:	4607      	mov	r7, r0
	n += printNumber(intpart, DEC);
 80003d2:	220a      	movs	r2, #10
 80003d4:	4628      	mov	r0, r5
 80003d6:	f7ff ffa6 	bl	8000326 <_ZN11USARTSerial11printNumberEmh>
	int i;
	if ( val > 0 ) {
 80003da:	2100      	movs	r1, #0
		val = -val;
		n++;
	}
	uint32_t intpart = (uint32_t) val;
	val -= intpart;
	n += printNumber(intpart, DEC);
 80003dc:	1984      	adds	r4, r0, r6
	int i;
	if ( val > 0 ) {
 80003de:	4638      	mov	r0, r7
		val = -val;
		n++;
	}
	uint32_t intpart = (uint32_t) val;
	val -= intpart;
	n += printNumber(intpart, DEC);
 80003e0:	b2a4      	uxth	r4, r4
	int i;
	if ( val > 0 ) {
 80003e2:	f001 f8bb 	bl	800155c <__aeabi_fcmpgt>
 80003e6:	b308      	cbz	r0, 800042c <_ZN11USARTSerial10printFloatEfh+0x98>
		write('.');
 80003e8:	4628      	mov	r0, r5
 80003ea:	212e      	movs	r1, #46	; 0x2e
 80003ec:	f7ff ff68 	bl	80002c0 <_ZN11USARTSerial5writeEh>
		n++;
		for(i = 0; i < prec; i++) {
 80003f0:	2600      	movs	r6, #0
 80003f2:	e015      	b.n	8000420 <_ZN11USARTSerial10printFloatEfh+0x8c>
			val *= 10;
 80003f4:	490f      	ldr	r1, [pc, #60]	; (8000434 <_ZN11USARTSerial10printFloatEfh+0xa0>)
 80003f6:	4638      	mov	r0, r7
 80003f8:	f000 fef4 	bl	80011e4 <__aeabi_fmul>
 80003fc:	4681      	mov	r9, r0
			printNumber((uint32_t)val, DEC);
 80003fe:	f001 f8b7 	bl	8001570 <__aeabi_f2uiz>
 8000402:	4607      	mov	r7, r0
 8000404:	4639      	mov	r1, r7
 8000406:	220a      	movs	r2, #10
 8000408:	4628      	mov	r0, r5
 800040a:	f7ff ff8c 	bl	8000326 <_ZN11USARTSerial11printNumberEmh>
			val -= (uint32_t)val;
 800040e:	4638      	mov	r0, r7
 8000410:	f000 fe90 	bl	8001134 <__aeabi_ui2f>
 8000414:	4601      	mov	r1, r0
 8000416:	4648      	mov	r0, r9
 8000418:	f000 fdda 	bl	8000fd0 <__aeabi_fsub>
	n += printNumber(intpart, DEC);
	int i;
	if ( val > 0 ) {
		write('.');
		n++;
		for(i = 0; i < prec; i++) {
 800041c:	3601      	adds	r6, #1
			val *= 10;
			printNumber((uint32_t)val, DEC);
			val -= (uint32_t)val;
 800041e:	4607      	mov	r7, r0
	n += printNumber(intpart, DEC);
	int i;
	if ( val > 0 ) {
		write('.');
		n++;
		for(i = 0; i < prec; i++) {
 8000420:	4546      	cmp	r6, r8
 8000422:	dbe7      	blt.n	80003f4 <_ZN11USARTSerial10printFloatEfh+0x60>
	val -= intpart;
	n += printNumber(intpart, DEC);
	int i;
	if ( val > 0 ) {
		write('.');
		n++;
 8000424:	f108 0801 	add.w	r8, r8, #1
 8000428:	4444      	add	r4, r8
 800042a:	b2a4      	uxth	r4, r4
			val -= (uint32_t)val;
			n++;
		}
	}
	return n;
}
 800042c:	4620      	mov	r0, r4
 800042e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000432:	bf00      	nop
 8000434:	41200000 	.word	0x41200000

08000438 <GPIO_DeInit>:
  * @note   By default, The GPIO pins are configured in input floating mode (except JTAG pins).
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 8000438:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
 800043a:	4b2c      	ldr	r3, [pc, #176]	; (80004ec <GPIO_DeInit+0xb4>)
 800043c:	4298      	cmp	r0, r3
 800043e:	d105      	bne.n	800044c <GPIO_DeInit+0x14>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8000440:	2001      	movs	r0, #1
 8000442:	4601      	mov	r1, r0
 8000444:	f000 fa5e 	bl	8000904 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 8000448:	2001      	movs	r0, #1
 800044a:	e048      	b.n	80004de <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOB)
 800044c:	4b28      	ldr	r3, [pc, #160]	; (80004f0 <GPIO_DeInit+0xb8>)
 800044e:	4298      	cmp	r0, r3
 8000450:	d105      	bne.n	800045e <GPIO_DeInit+0x26>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8000452:	2002      	movs	r0, #2
 8000454:	2101      	movs	r1, #1
 8000456:	f000 fa55 	bl	8000904 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 800045a:	2002      	movs	r0, #2
 800045c:	e03f      	b.n	80004de <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOC)
 800045e:	4b25      	ldr	r3, [pc, #148]	; (80004f4 <GPIO_DeInit+0xbc>)
 8000460:	4298      	cmp	r0, r3
 8000462:	d105      	bne.n	8000470 <GPIO_DeInit+0x38>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8000464:	2004      	movs	r0, #4
 8000466:	2101      	movs	r1, #1
 8000468:	f000 fa4c 	bl	8000904 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 800046c:	2004      	movs	r0, #4
 800046e:	e036      	b.n	80004de <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOD)
 8000470:	4b21      	ldr	r3, [pc, #132]	; (80004f8 <GPIO_DeInit+0xc0>)
 8000472:	4298      	cmp	r0, r3
 8000474:	d105      	bne.n	8000482 <GPIO_DeInit+0x4a>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8000476:	2008      	movs	r0, #8
 8000478:	2101      	movs	r1, #1
 800047a:	f000 fa43 	bl	8000904 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 800047e:	2008      	movs	r0, #8
 8000480:	e02d      	b.n	80004de <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOE)
 8000482:	4b1e      	ldr	r3, [pc, #120]	; (80004fc <GPIO_DeInit+0xc4>)
 8000484:	4298      	cmp	r0, r3
 8000486:	d105      	bne.n	8000494 <GPIO_DeInit+0x5c>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 8000488:	2010      	movs	r0, #16
 800048a:	2101      	movs	r1, #1
 800048c:	f000 fa3a 	bl	8000904 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 8000490:	2010      	movs	r0, #16
 8000492:	e024      	b.n	80004de <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOF)
 8000494:	4b1a      	ldr	r3, [pc, #104]	; (8000500 <GPIO_DeInit+0xc8>)
 8000496:	4298      	cmp	r0, r3
 8000498:	d105      	bne.n	80004a6 <GPIO_DeInit+0x6e>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 800049a:	2020      	movs	r0, #32
 800049c:	2101      	movs	r1, #1
 800049e:	f000 fa31 	bl	8000904 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 80004a2:	2020      	movs	r0, #32
 80004a4:	e01b      	b.n	80004de <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOG)
 80004a6:	4b17      	ldr	r3, [pc, #92]	; (8000504 <GPIO_DeInit+0xcc>)
 80004a8:	4298      	cmp	r0, r3
 80004aa:	d105      	bne.n	80004b8 <GPIO_DeInit+0x80>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 80004ac:	2040      	movs	r0, #64	; 0x40
 80004ae:	2101      	movs	r1, #1
 80004b0:	f000 fa28 	bl	8000904 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 80004b4:	2040      	movs	r0, #64	; 0x40
 80004b6:	e012      	b.n	80004de <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOH)
 80004b8:	4b13      	ldr	r3, [pc, #76]	; (8000508 <GPIO_DeInit+0xd0>)
 80004ba:	4298      	cmp	r0, r3
 80004bc:	d105      	bne.n	80004ca <GPIO_DeInit+0x92>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 80004be:	2080      	movs	r0, #128	; 0x80
 80004c0:	2101      	movs	r1, #1
 80004c2:	f000 fa1f 	bl	8000904 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 80004c6:	2080      	movs	r0, #128	; 0x80
 80004c8:	e009      	b.n	80004de <GPIO_DeInit+0xa6>
  }
  else
  {
    if (GPIOx == GPIOI)
 80004ca:	4b10      	ldr	r3, [pc, #64]	; (800050c <GPIO_DeInit+0xd4>)
 80004cc:	4298      	cmp	r0, r3
 80004ce:	d10b      	bne.n	80004e8 <GPIO_DeInit+0xb0>
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 80004d0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80004d4:	2101      	movs	r1, #1
 80004d6:	f000 fa15 	bl	8000904 <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 80004da:	f44f 7080 	mov.w	r0, #256	; 0x100
 80004de:	2100      	movs	r1, #0
    }
  }
}
 80004e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (GPIOx == GPIOI)
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 80004e4:	f000 ba0e 	b.w	8000904 <RCC_AHB1PeriphResetCmd>
 80004e8:	bd08      	pop	{r3, pc}
 80004ea:	bf00      	nop
 80004ec:	40020000 	.word	0x40020000
 80004f0:	40020400 	.word	0x40020400
 80004f4:	40020800 	.word	0x40020800
 80004f8:	40020c00 	.word	0x40020c00
 80004fc:	40021000 	.word	0x40021000
 8000500:	40021400 	.word	0x40021400
 8000504:	40021800 	.word	0x40021800
 8000508:	40021c00 	.word	0x40021c00
 800050c:	40022000 	.word	0x40022000

08000510 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
  {
    pos = ((uint32_t)0x01) << pinpos;
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000514:	2300      	movs	r3, #0
 8000516:	f8d1 8000 	ldr.w	r8, [r1]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800051a:	461a      	mov	r2, r3
  {
    pos = ((uint32_t)0x01) << pinpos;
 800051c:	f04f 0c01 	mov.w	ip, #1
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000520:	2703      	movs	r7, #3

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000522:	fa0c f402 	lsl.w	r4, ip, r2
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000526:	ea04 0508 	and.w	r5, r4, r8

    if (currentpin == pos)
 800052a:	42a5      	cmp	r5, r4
 800052c:	d12e      	bne.n	800058c <GPIO_Init+0x7c>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800052e:	6806      	ldr	r6, [r0, #0]
 8000530:	fa17 f403 	lsls.w	r4, r7, r3
 8000534:	43e4      	mvns	r4, r4
 8000536:	4026      	ands	r6, r4
 8000538:	6006      	str	r6, [r0, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800053a:	790e      	ldrb	r6, [r1, #4]
 800053c:	f8d0 9000 	ldr.w	r9, [r0]
 8000540:	fa06 fa03 	lsl.w	sl, r6, r3

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000544:	3e01      	subs	r6, #1
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000546:	ea4a 0909 	orr.w	r9, sl, r9

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800054a:	2e01      	cmp	r6, #1
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800054c:	f8c0 9000 	str.w	r9, [r0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000550:	d814      	bhi.n	800057c <GPIO_Init+0x6c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000552:	6886      	ldr	r6, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000554:	f891 9005 	ldrb.w	r9, [r1, #5]
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000558:	4026      	ands	r6, r4
 800055a:	6086      	str	r6, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800055c:	6886      	ldr	r6, [r0, #8]
 800055e:	fa09 f903 	lsl.w	r9, r9, r3
 8000562:	ea49 0606 	orr.w	r6, r9, r6
 8000566:	6086      	str	r6, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000568:	6846      	ldr	r6, [r0, #4]
 800056a:	ea26 0505 	bic.w	r5, r6, r5
 800056e:	6045      	str	r5, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000570:	798d      	ldrb	r5, [r1, #6]
 8000572:	6846      	ldr	r6, [r0, #4]
 8000574:	4095      	lsls	r5, r2
 8000576:	b2ad      	uxth	r5, r5
 8000578:	4335      	orrs	r5, r6
 800057a:	6045      	str	r5, [r0, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 800057c:	68c5      	ldr	r5, [r0, #12]
 800057e:	402c      	ands	r4, r5
 8000580:	60c4      	str	r4, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000582:	79cc      	ldrb	r4, [r1, #7]
 8000584:	68c5      	ldr	r5, [r0, #12]
 8000586:	409c      	lsls	r4, r3
 8000588:	432c      	orrs	r4, r5
 800058a:	60c4      	str	r4, [r0, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800058c:	3201      	adds	r2, #1
 800058e:	3302      	adds	r3, #2
 8000590:	2a10      	cmp	r2, #16
 8000592:	d1c6      	bne.n	8000522 <GPIO_Init+0x12>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8000594:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08000598 <GPIO_StructInit>:
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8000598:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800059c:	6003      	str	r3, [r0, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 800059e:	2300      	movs	r3, #0
 80005a0:	7103      	strb	r3, [r0, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 80005a2:	7143      	strb	r3, [r0, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 80005a4:	7183      	strb	r3, [r0, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 80005a6:	71c3      	strb	r3, [r0, #7]
}
 80005a8:	4770      	bx	lr

080005aa <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80005aa:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0x00010000;
 80005ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005b0:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
 80005b2:	9b01      	ldr	r3, [sp, #4]
 80005b4:	430b      	orrs	r3, r1
 80005b6:	9301      	str	r3, [sp, #4]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 80005b8:	9b01      	ldr	r3, [sp, #4]
 80005ba:	61c3      	str	r3, [r0, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 80005bc:	61c1      	str	r1, [r0, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 80005be:	9b01      	ldr	r3, [sp, #4]
 80005c0:	61c3      	str	r3, [r0, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 80005c2:	69c3      	ldr	r3, [r0, #28]
 80005c4:	9301      	str	r3, [sp, #4]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 80005c6:	69c3      	ldr	r3, [r0, #28]
 80005c8:	9301      	str	r3, [sp, #4]
}
 80005ca:	b002      	add	sp, #8
 80005cc:	4770      	bx	lr

080005ce <GPIO_ReadInputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80005ce:	6903      	ldr	r3, [r0, #16]
  {
    bitstatus = (uint8_t)Bit_SET;
 80005d0:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 80005d2:	bf0c      	ite	eq
 80005d4:	2000      	moveq	r0, #0
 80005d6:	2001      	movne	r0, #1
 80005d8:	4770      	bx	lr

080005da <GPIO_ReadInputData>:
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 80005da:	6900      	ldr	r0, [r0, #16]
}
 80005dc:	b280      	uxth	r0, r0
 80005de:	4770      	bx	lr

080005e0 <GPIO_ReadOutputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80005e0:	6943      	ldr	r3, [r0, #20]
  {
    bitstatus = (uint8_t)Bit_SET;
 80005e2:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 80005e4:	bf0c      	ite	eq
 80005e6:	2000      	moveq	r0, #0
 80005e8:	2001      	movne	r0, #1
 80005ea:	4770      	bx	lr

080005ec <GPIO_ReadOutputData>:
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
 80005ec:	6940      	ldr	r0, [r0, #20]
}
 80005ee:	b280      	uxth	r0, r0
 80005f0:	4770      	bx	lr

080005f2 <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 80005f2:	8301      	strh	r1, [r0, #24]
}
 80005f4:	4770      	bx	lr

080005f6 <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 80005f6:	8341      	strh	r1, [r0, #26]
}
 80005f8:	4770      	bx	lr

080005fa <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 80005fa:	b10a      	cbz	r2, 8000600 <GPIO_WriteBit+0x6>
  {
    GPIOx->BSRRL = GPIO_Pin;
 80005fc:	8301      	strh	r1, [r0, #24]
 80005fe:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 8000600:	8341      	strh	r1, [r0, #26]
 8000602:	4770      	bx	lr

08000604 <GPIO_Write>:
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 8000604:	6141      	str	r1, [r0, #20]
}
 8000606:	4770      	bx	lr

08000608 <GPIO_ToggleBits>:
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 8000608:	6943      	ldr	r3, [r0, #20]
 800060a:	404b      	eors	r3, r1
 800060c:	6143      	str	r3, [r0, #20]
}
 800060e:	4770      	bx	lr

08000610 <GPIO_PinAFConfig>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000610:	f001 0307 	and.w	r3, r1, #7
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000614:	08c9      	lsrs	r1, r1, #3
 8000616:	3108      	adds	r1, #8
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000618:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800061a:	009b      	lsls	r3, r3, #2
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800061c:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
 8000620:	240f      	movs	r4, #15
 8000622:	409c      	lsls	r4, r3
 8000624:	ea25 0404 	bic.w	r4, r5, r4
 8000628:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800062c:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000630:	fa12 f303 	lsls.w	r3, r2, r3
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000634:	431c      	orrs	r4, r3
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000636:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
}
 800063a:	bd30      	pop	{r4, r5, pc}

0800063c <RCC_DeInit>:
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800063c:	4b0a      	ldr	r3, [pc, #40]	; (8000668 <RCC_DeInit+0x2c>)
 800063e:	681a      	ldr	r2, [r3, #0]
 8000640:	f042 0201 	orr.w	r2, r2, #1
 8000644:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000646:	2200      	movs	r2, #0
 8000648:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800064a:	6819      	ldr	r1, [r3, #0]
 800064c:	f021 7184 	bic.w	r1, r1, #17301504	; 0x1080000
 8000650:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8000654:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000656:	4905      	ldr	r1, [pc, #20]	; (800066c <RCC_DeInit+0x30>)
 8000658:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800065a:	6819      	ldr	r1, [r3, #0]
 800065c:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8000660:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000662:	60da      	str	r2, [r3, #12]
}
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	40023800 	.word	0x40023800
 800066c:	24003010 	.word	0x24003010

08000670 <RCC_HSEConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 8000670:	4b02      	ldr	r3, [pc, #8]	; (800067c <RCC_HSEConfig+0xc>)
 8000672:	2200      	movs	r2, #0
 8000674:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 8000676:	7018      	strb	r0, [r3, #0]
}
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	40023802 	.word	0x40023802

08000680 <RCC_AdjustHSICalibrationValue>:
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
 8000680:	4b03      	ldr	r3, [pc, #12]	; (8000690 <RCC_AdjustHSICalibrationValue+0x10>)
 8000682:	681a      	ldr	r2, [r3, #0]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 8000684:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 8000688:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3

  /* Store the new value */
  RCC->CR = tmpreg;
 800068c:	601a      	str	r2, [r3, #0]
}
 800068e:	4770      	bx	lr
 8000690:	40023800 	.word	0x40023800

08000694 <RCC_HSICmd>:
void RCC_HSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 8000694:	4b01      	ldr	r3, [pc, #4]	; (800069c <RCC_HSICmd+0x8>)
 8000696:	6018      	str	r0, [r3, #0]
}
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	42470000 	.word	0x42470000

080006a0 <RCC_LSEConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 80006a0:	4b06      	ldr	r3, [pc, #24]	; (80006bc <RCC_LSEConfig+0x1c>)
 80006a2:	2200      	movs	r2, #0

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 80006a4:	2801      	cmp	r0, #1
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 80006a6:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 80006a8:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 80006aa:	d002      	beq.n	80006b2 <RCC_LSEConfig+0x12>
 80006ac:	2804      	cmp	r0, #4
 80006ae:	d104      	bne.n	80006ba <RCC_LSEConfig+0x1a>
 80006b0:	e001      	b.n	80006b6 <RCC_LSEConfig+0x16>
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 80006b2:	7018      	strb	r0, [r3, #0]
      break;
 80006b4:	4770      	bx	lr
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 80006b6:	2205      	movs	r2, #5
 80006b8:	701a      	strb	r2, [r3, #0]
 80006ba:	4770      	bx	lr
 80006bc:	40023870 	.word	0x40023870

080006c0 <RCC_LSICmd>:
void RCC_LSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 80006c0:	4b01      	ldr	r3, [pc, #4]	; (80006c8 <RCC_LSICmd+0x8>)
 80006c2:	6018      	str	r0, [r3, #0]
}
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	42470e80 	.word	0x42470e80

080006cc <RCC_PLLConfig>:
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 80006cc:	4301      	orrs	r1, r0
 80006ce:	ea41 1282 	orr.w	r2, r1, r2, lsl #6
 80006d2:	9900      	ldr	r1, [sp, #0]
 80006d4:	085b      	lsrs	r3, r3, #1
 80006d6:	3b01      	subs	r3, #1
 80006d8:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80006dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80006e0:	4b01      	ldr	r3, [pc, #4]	; (80006e8 <RCC_PLLConfig+0x1c>)
 80006e2:	6059      	str	r1, [r3, #4]
                 (PLLQ << 24);
}
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	40023800 	.word	0x40023800

080006ec <RCC_PLLCmd>:
  */
void RCC_PLLCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 80006ec:	4b01      	ldr	r3, [pc, #4]	; (80006f4 <RCC_PLLCmd+0x8>)
 80006ee:	6018      	str	r0, [r3, #0]
}
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	42470060 	.word	0x42470060

080006f8 <RCC_PLLI2SConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
 80006f8:	0180      	lsls	r0, r0, #6
 80006fa:	4b03      	ldr	r3, [pc, #12]	; (8000708 <RCC_PLLI2SConfig+0x10>)
 80006fc:	ea40 7101 	orr.w	r1, r0, r1, lsl #28
 8000700:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
}
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	40023800 	.word	0x40023800

0800070c <RCC_PLLI2SCmd>:
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 800070c:	4b01      	ldr	r3, [pc, #4]	; (8000714 <RCC_PLLI2SCmd+0x8>)
 800070e:	6018      	str	r0, [r3, #0]
}
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	42470068 	.word	0x42470068

08000718 <RCC_ClockSecuritySystemCmd>:
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 8000718:	4b01      	ldr	r3, [pc, #4]	; (8000720 <RCC_ClockSecuritySystemCmd+0x8>)
 800071a:	6018      	str	r0, [r3, #0]
}
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	4247004c 	.word	0x4247004c

08000724 <RCC_MCO1Config>:
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
 8000724:	4b03      	ldr	r3, [pc, #12]	; (8000734 <RCC_MCO1Config+0x10>)
 8000726:	689a      	ldr	r2, [r3, #8]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
 8000728:	f022 62ec 	bic.w	r2, r2, #123731968	; 0x7600000

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 800072c:	4302      	orrs	r2, r0
 800072e:	430a      	orrs	r2, r1

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 8000730:	609a      	str	r2, [r3, #8]
}
 8000732:	4770      	bx	lr
 8000734:	40023800 	.word	0x40023800

08000738 <RCC_MCO2Config>:
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
 8000738:	4b03      	ldr	r3, [pc, #12]	; (8000748 <RCC_MCO2Config+0x10>)
 800073a:	689a      	ldr	r2, [r3, #8]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
 800073c:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 8000740:	4302      	orrs	r2, r0
 8000742:	430a      	orrs	r2, r1

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 8000744:	609a      	str	r2, [r3, #8]
}
 8000746:	4770      	bx	lr
 8000748:	40023800 	.word	0x40023800

0800074c <RCC_SYSCLKConfig>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 800074c:	4b03      	ldr	r3, [pc, #12]	; (800075c <RCC_SYSCLKConfig+0x10>)
 800074e:	689a      	ldr	r2, [r3, #8]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 8000750:	f022 0203 	bic.w	r2, r2, #3

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8000754:	4302      	orrs	r2, r0

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000756:	609a      	str	r2, [r3, #8]
}
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	40023800 	.word	0x40023800

08000760 <RCC_GetSYSCLKSource>:
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 8000760:	4b02      	ldr	r3, [pc, #8]	; (800076c <RCC_GetSYSCLKSource+0xc>)
 8000762:	6898      	ldr	r0, [r3, #8]
}
 8000764:	f000 000c 	and.w	r0, r0, #12
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	40023800 	.word	0x40023800

08000770 <RCC_HCLKConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 8000770:	4b03      	ldr	r3, [pc, #12]	; (8000780 <RCC_HCLKConfig+0x10>)
 8000772:	689a      	ldr	r2, [r3, #8]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 8000774:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8000778:	4302      	orrs	r2, r0

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800077a:	609a      	str	r2, [r3, #8]
}
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop
 8000780:	40023800 	.word	0x40023800

08000784 <RCC_PCLK1Config>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8000784:	4b03      	ldr	r3, [pc, #12]	; (8000794 <RCC_PCLK1Config+0x10>)
 8000786:	689a      	ldr	r2, [r3, #8]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 8000788:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 800078c:	4302      	orrs	r2, r0

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800078e:	609a      	str	r2, [r3, #8]
}
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	40023800 	.word	0x40023800

08000798 <RCC_PCLK2Config>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8000798:	4b03      	ldr	r3, [pc, #12]	; (80007a8 <RCC_PCLK2Config+0x10>)
 800079a:	689a      	ldr	r2, [r3, #8]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 800079c:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 80007a0:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80007a4:	609a      	str	r2, [r3, #8]
}
 80007a6:	4770      	bx	lr
 80007a8:	40023800 	.word	0x40023800

080007ac <RCC_GetClocksFreq>:
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80007ac:	4b1e      	ldr	r3, [pc, #120]	; (8000828 <RCC_GetClocksFreq+0x7c>)
 80007ae:	689a      	ldr	r2, [r3, #8]
 80007b0:	f002 020c 	and.w	r2, r2, #12

  switch (tmp)
 80007b4:	2a04      	cmp	r2, #4
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80007b6:	b510      	push	{r4, lr}
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;

  switch (tmp)
 80007b8:	d003      	beq.n	80007c2 <RCC_GetClocksFreq+0x16>
 80007ba:	2a08      	cmp	r2, #8
 80007bc:	d003      	beq.n	80007c6 <RCC_GetClocksFreq+0x1a>
 80007be:	4b1b      	ldr	r3, [pc, #108]	; (800082c <RCC_GetClocksFreq+0x80>)
 80007c0:	e018      	b.n	80007f4 <RCC_GetClocksFreq+0x48>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80007c2:	4b1b      	ldr	r3, [pc, #108]	; (8000830 <RCC_GetClocksFreq+0x84>)
 80007c4:	e016      	b.n	80007f4 <RCC_GetClocksFreq+0x48>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80007c6:	6859      	ldr	r1, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80007c8:	685a      	ldr	r2, [r3, #4]
      
      if (pllsource != 0)
 80007ca:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80007ce:	6859      	ldr	r1, [r3, #4]
 80007d0:	bf14      	ite	ne
 80007d2:	4b17      	ldrne	r3, [pc, #92]	; (8000830 <RCC_GetClocksFreq+0x84>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80007d4:	4b15      	ldreq	r3, [pc, #84]	; (800082c <RCC_GetClocksFreq+0x80>)

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80007d6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80007da:	fbb3 f3f2 	udiv	r3, r3, r2
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80007de:	4a12      	ldr	r2, [pc, #72]	; (8000828 <RCC_GetClocksFreq+0x7c>)
 80007e0:	6852      	ldr	r2, [r2, #4]
 80007e2:	f3c2 4201 	ubfx	r2, r2, #16, #2
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80007e6:	f3c1 1188 	ubfx	r1, r1, #6, #9
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80007ea:	3201      	adds	r2, #1
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80007ec:	434b      	muls	r3, r1
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80007ee:	0052      	lsls	r2, r2, #1
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 80007f0:	fbb3 f3f2 	udiv	r3, r3, r2
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80007f4:	490c      	ldr	r1, [pc, #48]	; (8000828 <RCC_GetClocksFreq+0x7c>)
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 80007f6:	6003      	str	r3, [r0, #0]
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80007f8:	688b      	ldr	r3, [r1, #8]
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];
 80007fa:	4a0e      	ldr	r2, [pc, #56]	; (8000834 <RCC_GetClocksFreq+0x88>)
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80007fc:	6804      	ldr	r4, [r0, #0]
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
  tmp = tmp >> 4;
 80007fe:	f3c3 1303 	ubfx	r3, r3, #4, #4
  presc = APBAHBPrescTable[tmp];
 8000802:	5cd3      	ldrb	r3, [r2, r3]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000804:	fa34 f303 	lsrs.w	r3, r4, r3
 8000808:	6043      	str	r3, [r0, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 800080a:	688c      	ldr	r4, [r1, #8]
  tmp = tmp >> 10;
 800080c:	f3c4 2482 	ubfx	r4, r4, #10, #3
  presc = APBAHBPrescTable[tmp];
 8000810:	5d14      	ldrb	r4, [r2, r4]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000812:	fa33 f404 	lsrs.w	r4, r3, r4
 8000816:	6084      	str	r4, [r0, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000818:	6889      	ldr	r1, [r1, #8]
  tmp = tmp >> 13;
 800081a:	f3c1 3142 	ubfx	r1, r1, #13, #3
  presc = APBAHBPrescTable[tmp];
 800081e:	5c52      	ldrb	r2, [r2, r1]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000820:	40d3      	lsrs	r3, r2
 8000822:	60c3      	str	r3, [r0, #12]
}
 8000824:	bd10      	pop	{r4, pc}
 8000826:	bf00      	nop
 8000828:	40023800 	.word	0x40023800
 800082c:	00f42400 	.word	0x00f42400
 8000830:	007a1200 	.word	0x007a1200
 8000834:	20000074 	.word	0x20000074

08000838 <RCC_RTCCLKConfig>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 8000838:	f400 7340 	and.w	r3, r0, #768	; 0x300
 800083c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000840:	4b08      	ldr	r3, [pc, #32]	; (8000864 <RCC_RTCCLKConfig+0x2c>)
 8000842:	d108      	bne.n	8000856 <RCC_RTCCLKConfig+0x1e>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 8000844:	6899      	ldr	r1, [r3, #8]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8000846:	f020 4270 	bic.w	r2, r0, #4026531840	; 0xf0000000
  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
 800084a:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 800084e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000852:	430a      	orrs	r2, r1

    /* Store the new value */
    RCC->CFGR = tmpreg;
 8000854:	609a      	str	r2, [r3, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 8000856:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000858:	0500      	lsls	r0, r0, #20
 800085a:	ea42 5010 	orr.w	r0, r2, r0, lsr #20
 800085e:	6718      	str	r0, [r3, #112]	; 0x70
}
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	40023800 	.word	0x40023800

08000868 <RCC_RTCCLKCmd>:
void RCC_RTCCLKCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 8000868:	4b01      	ldr	r3, [pc, #4]	; (8000870 <RCC_RTCCLKCmd+0x8>)
 800086a:	6018      	str	r0, [r3, #0]
}
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	42470e3c 	.word	0x42470e3c

08000874 <RCC_BackupResetCmd>:
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 8000874:	4b01      	ldr	r3, [pc, #4]	; (800087c <RCC_BackupResetCmd+0x8>)
 8000876:	6018      	str	r0, [r3, #0]
}
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	42470e40 	.word	0x42470e40

08000880 <RCC_I2SCLKConfig>:
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 8000880:	4b01      	ldr	r3, [pc, #4]	; (8000888 <RCC_I2SCLKConfig+0x8>)
 8000882:	6018      	str	r0, [r3, #0]
}
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	4247015c 	.word	0x4247015c

0800088c <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 800088c:	4b04      	ldr	r3, [pc, #16]	; (80008a0 <RCC_AHB1PeriphClockCmd+0x14>)
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800088e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000890:	b109      	cbz	r1, 8000896 <RCC_AHB1PeriphClockCmd+0xa>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000892:	4310      	orrs	r0, r2
 8000894:	e001      	b.n	800089a <RCC_AHB1PeriphClockCmd+0xe>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000896:	ea22 0000 	bic.w	r0, r2, r0
 800089a:	6318      	str	r0, [r3, #48]	; 0x30
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	40023800 	.word	0x40023800

080008a4 <RCC_AHB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 80008a4:	4b04      	ldr	r3, [pc, #16]	; (80008b8 <RCC_AHB2PeriphClockCmd+0x14>)
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 80008a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80008a8:	b109      	cbz	r1, 80008ae <RCC_AHB2PeriphClockCmd+0xa>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 80008aa:	4310      	orrs	r0, r2
 80008ac:	e001      	b.n	80008b2 <RCC_AHB2PeriphClockCmd+0xe>
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
 80008ae:	ea22 0000 	bic.w	r0, r2, r0
 80008b2:	6358      	str	r0, [r3, #52]	; 0x34
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	40023800 	.word	0x40023800

080008bc <RCC_AHB3PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 80008bc:	4b04      	ldr	r3, [pc, #16]	; (80008d0 <RCC_AHB3PeriphClockCmd+0x14>)
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 80008be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80008c0:	b109      	cbz	r1, 80008c6 <RCC_AHB3PeriphClockCmd+0xa>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 80008c2:	4310      	orrs	r0, r2
 80008c4:	e001      	b.n	80008ca <RCC_AHB3PeriphClockCmd+0xe>
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
 80008c6:	ea22 0000 	bic.w	r0, r2, r0
 80008ca:	6398      	str	r0, [r3, #56]	; 0x38
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	40023800 	.word	0x40023800

080008d4 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80008d4:	4b04      	ldr	r3, [pc, #16]	; (80008e8 <RCC_APB1PeriphClockCmd+0x14>)
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80008d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80008d8:	b109      	cbz	r1, 80008de <RCC_APB1PeriphClockCmd+0xa>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80008da:	4310      	orrs	r0, r2
 80008dc:	e001      	b.n	80008e2 <RCC_APB1PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80008de:	ea22 0000 	bic.w	r0, r2, r0
 80008e2:	6418      	str	r0, [r3, #64]	; 0x40
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	40023800 	.word	0x40023800

080008ec <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80008ec:	4b04      	ldr	r3, [pc, #16]	; (8000900 <RCC_APB2PeriphClockCmd+0x14>)
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80008ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80008f0:	b109      	cbz	r1, 80008f6 <RCC_APB2PeriphClockCmd+0xa>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80008f2:	4310      	orrs	r0, r2
 80008f4:	e001      	b.n	80008fa <RCC_APB2PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80008f6:	ea22 0000 	bic.w	r0, r2, r0
 80008fa:	6458      	str	r0, [r3, #68]	; 0x44
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	40023800 	.word	0x40023800

08000904 <RCC_AHB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000904:	4b04      	ldr	r3, [pc, #16]	; (8000918 <RCC_AHB1PeriphResetCmd+0x14>)
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 8000906:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000908:	b109      	cbz	r1, 800090e <RCC_AHB1PeriphResetCmd+0xa>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 800090a:	4310      	orrs	r0, r2
 800090c:	e001      	b.n	8000912 <RCC_AHB1PeriphResetCmd+0xe>
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 800090e:	ea22 0000 	bic.w	r0, r2, r0
 8000912:	6118      	str	r0, [r3, #16]
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	40023800 	.word	0x40023800

0800091c <RCC_AHB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 800091c:	4b04      	ldr	r3, [pc, #16]	; (8000930 <RCC_AHB2PeriphResetCmd+0x14>)
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 800091e:	695a      	ldr	r2, [r3, #20]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000920:	b109      	cbz	r1, 8000926 <RCC_AHB2PeriphResetCmd+0xa>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 8000922:	4310      	orrs	r0, r2
 8000924:	e001      	b.n	800092a <RCC_AHB2PeriphResetCmd+0xe>
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 8000926:	ea22 0000 	bic.w	r0, r2, r0
 800092a:	6158      	str	r0, [r3, #20]
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	40023800 	.word	0x40023800

08000934 <RCC_AHB3PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 8000934:	4b04      	ldr	r3, [pc, #16]	; (8000948 <RCC_AHB3PeriphResetCmd+0x14>)
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 8000936:	699a      	ldr	r2, [r3, #24]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000938:	b109      	cbz	r1, 800093e <RCC_AHB3PeriphResetCmd+0xa>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 800093a:	4310      	orrs	r0, r2
 800093c:	e001      	b.n	8000942 <RCC_AHB3PeriphResetCmd+0xe>
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
 800093e:	ea22 0000 	bic.w	r0, r2, r0
 8000942:	6198      	str	r0, [r3, #24]
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	40023800 	.word	0x40023800

0800094c <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800094c:	4b04      	ldr	r3, [pc, #16]	; (8000960 <RCC_APB1PeriphResetCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 800094e:	6a1a      	ldr	r2, [r3, #32]
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000950:	b109      	cbz	r1, 8000956 <RCC_APB1PeriphResetCmd+0xa>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8000952:	4310      	orrs	r0, r2
 8000954:	e001      	b.n	800095a <RCC_APB1PeriphResetCmd+0xe>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8000956:	ea22 0000 	bic.w	r0, r2, r0
 800095a:	6218      	str	r0, [r3, #32]
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	40023800 	.word	0x40023800

08000964 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000964:	4b04      	ldr	r3, [pc, #16]	; (8000978 <RCC_APB2PeriphResetCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8000966:	6a5a      	ldr	r2, [r3, #36]	; 0x24
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000968:	b109      	cbz	r1, 800096e <RCC_APB2PeriphResetCmd+0xa>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 800096a:	4310      	orrs	r0, r2
 800096c:	e001      	b.n	8000972 <RCC_APB2PeriphResetCmd+0xe>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 800096e:	ea22 0000 	bic.w	r0, r2, r0
 8000972:	6258      	str	r0, [r3, #36]	; 0x24
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	40023800 	.word	0x40023800

0800097c <RCC_AHB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 800097c:	4b04      	ldr	r3, [pc, #16]	; (8000990 <RCC_AHB1PeriphClockLPModeCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 800097e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000980:	b109      	cbz	r1, 8000986 <RCC_AHB1PeriphClockLPModeCmd+0xa>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 8000982:	4310      	orrs	r0, r2
 8000984:	e001      	b.n	800098a <RCC_AHB1PeriphClockLPModeCmd+0xe>
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
 8000986:	ea22 0000 	bic.w	r0, r2, r0
 800098a:	6518      	str	r0, [r3, #80]	; 0x50
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	40023800 	.word	0x40023800

08000994 <RCC_AHB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 8000994:	4b04      	ldr	r3, [pc, #16]	; (80009a8 <RCC_AHB2PeriphClockLPModeCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 8000996:	6d5a      	ldr	r2, [r3, #84]	; 0x54
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000998:	b109      	cbz	r1, 800099e <RCC_AHB2PeriphClockLPModeCmd+0xa>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 800099a:	4310      	orrs	r0, r2
 800099c:	e001      	b.n	80009a2 <RCC_AHB2PeriphClockLPModeCmd+0xe>
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
 800099e:	ea22 0000 	bic.w	r0, r2, r0
 80009a2:	6558      	str	r0, [r3, #84]	; 0x54
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	40023800 	.word	0x40023800

080009ac <RCC_AHB3PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 80009ac:	4b04      	ldr	r3, [pc, #16]	; (80009c0 <RCC_AHB3PeriphClockLPModeCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 80009ae:	6d9a      	ldr	r2, [r3, #88]	; 0x58
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80009b0:	b109      	cbz	r1, 80009b6 <RCC_AHB3PeriphClockLPModeCmd+0xa>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 80009b2:	4310      	orrs	r0, r2
 80009b4:	e001      	b.n	80009ba <RCC_AHB3PeriphClockLPModeCmd+0xe>
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
 80009b6:	ea22 0000 	bic.w	r0, r2, r0
 80009ba:	6598      	str	r0, [r3, #88]	; 0x58
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	40023800 	.word	0x40023800

080009c4 <RCC_APB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80009c4:	4b04      	ldr	r3, [pc, #16]	; (80009d8 <RCC_APB1PeriphClockLPModeCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 80009c6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80009c8:	b109      	cbz	r1, 80009ce <RCC_APB1PeriphClockLPModeCmd+0xa>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 80009ca:	4310      	orrs	r0, r2
 80009cc:	e001      	b.n	80009d2 <RCC_APB1PeriphClockLPModeCmd+0xe>
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
 80009ce:	ea22 0000 	bic.w	r0, r2, r0
 80009d2:	6618      	str	r0, [r3, #96]	; 0x60
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	40023800 	.word	0x40023800

080009dc <RCC_APB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80009dc:	4b04      	ldr	r3, [pc, #16]	; (80009f0 <RCC_APB2PeriphClockLPModeCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 80009de:	6e5a      	ldr	r2, [r3, #100]	; 0x64
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80009e0:	b109      	cbz	r1, 80009e6 <RCC_APB2PeriphClockLPModeCmd+0xa>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 80009e2:	4310      	orrs	r0, r2
 80009e4:	e001      	b.n	80009ea <RCC_APB2PeriphClockLPModeCmd+0xe>
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
 80009e6:	ea22 0000 	bic.w	r0, r2, r0
 80009ea:	6658      	str	r0, [r3, #100]	; 0x64
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	40023800 	.word	0x40023800

080009f4 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
 80009f4:	4b04      	ldr	r3, [pc, #16]	; (8000a08 <RCC_ITConfig+0x14>)
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 80009f6:	781a      	ldrb	r2, [r3, #0]
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80009f8:	b109      	cbz	r1, 80009fe <RCC_ITConfig+0xa>
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 80009fa:	4310      	orrs	r0, r2
 80009fc:	e001      	b.n	8000a02 <RCC_ITConfig+0xe>
  }
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 80009fe:	ea22 0000 	bic.w	r0, r2, r0
 8000a02:	7018      	strb	r0, [r3, #0]
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	4002380d 	.word	0x4002380d

08000a0c <RCC_GetFlagStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8000a0c:	0943      	lsrs	r3, r0, #5
  if (tmp == 1)               /* The flag to check is in CR register */
 8000a0e:	2b01      	cmp	r3, #1
 8000a10:	4a07      	ldr	r2, [pc, #28]	; (8000a30 <RCC_GetFlagStatus+0x24>)
 8000a12:	d101      	bne.n	8000a18 <RCC_GetFlagStatus+0xc>
  {
    statusreg = RCC->CR;
 8000a14:	6813      	ldr	r3, [r2, #0]
 8000a16:	e003      	b.n	8000a20 <RCC_GetFlagStatus+0x14>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8000a18:	2b02      	cmp	r3, #2
  {
    statusreg = RCC->BDCR;
 8000a1a:	bf0c      	ite	eq
 8000a1c:	6f13      	ldreq	r3, [r2, #112]	; 0x70
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8000a1e:	6f53      	ldrne	r3, [r2, #116]	; 0x74
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 8000a20:	f000 001f 	and.w	r0, r0, #31
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8000a24:	fa33 f000 	lsrs.w	r0, r3, r0
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
}
 8000a28:	f000 0001 	and.w	r0, r0, #1
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	40023800 	.word	0x40023800

08000a34 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8000a34:	b507      	push	{r0, r1, r2, lr}
  __IO uint32_t startupcounter = 0;
 8000a36:	2300      	movs	r3, #0
 8000a38:	9301      	str	r3, [sp, #4]
  ErrorStatus status = ERROR;
  FlagStatus hsestatus = RESET;
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 8000a3a:	2031      	movs	r0, #49	; 0x31
 8000a3c:	f7ff ffe6 	bl	8000a0c <RCC_GetFlagStatus>
    startupcounter++;
 8000a40:	9b01      	ldr	r3, [sp, #4]
 8000a42:	3301      	adds	r3, #1
 8000a44:	9301      	str	r3, [sp, #4]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 8000a46:	9b01      	ldr	r3, [sp, #4]
 8000a48:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000a4c:	d001      	beq.n	8000a52 <RCC_WaitForHSEStartUp+0x1e>
 8000a4e:	2800      	cmp	r0, #0
 8000a50:	d0f3      	beq.n	8000a3a <RCC_WaitForHSEStartUp+0x6>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 8000a52:	2031      	movs	r0, #49	; 0x31
 8000a54:	f7ff ffda 	bl	8000a0c <RCC_GetFlagStatus>
  else
  {
    status = ERROR;
  }
  return (status);
}
 8000a58:	3000      	adds	r0, #0
 8000a5a:	bf18      	it	ne
 8000a5c:	2001      	movne	r0, #1
 8000a5e:	bd0e      	pop	{r1, r2, r3, pc}

08000a60 <RCC_ClearFlag>:
  * @retval None
  */
void RCC_ClearFlag(void)
{
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 8000a60:	4b02      	ldr	r3, [pc, #8]	; (8000a6c <RCC_ClearFlag+0xc>)
 8000a62:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8000a64:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000a68:	675a      	str	r2, [r3, #116]	; 0x74
}
 8000a6a:	4770      	bx	lr
 8000a6c:	40023800 	.word	0x40023800

08000a70 <RCC_GetITStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 8000a70:	4b03      	ldr	r3, [pc, #12]	; (8000a80 <RCC_GetITStatus+0x10>)
 8000a72:	68db      	ldr	r3, [r3, #12]
  {
    bitstatus = SET;
 8000a74:	4218      	tst	r0, r3
  {
    bitstatus = RESET;
  }
  /* Return the RCC_IT status */
  return  bitstatus;
}
 8000a76:	bf0c      	ite	eq
 8000a78:	2000      	moveq	r0, #0
 8000a7a:	2001      	movne	r0, #1
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	40023800 	.word	0x40023800

08000a84 <RCC_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 8000a84:	4b01      	ldr	r3, [pc, #4]	; (8000a8c <RCC_ClearITPendingBit+0x8>)
 8000a86:	7018      	strb	r0, [r3, #0]
}
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	4002380e 	.word	0x4002380e

08000a90 <USART_DeInit>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 8000a90:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 8000a92:	4b23      	ldr	r3, [pc, #140]	; (8000b20 <USART_DeInit+0x90>)
 8000a94:	4298      	cmp	r0, r3
 8000a96:	d105      	bne.n	8000aa4 <USART_DeInit+0x14>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 8000a98:	2010      	movs	r0, #16
 8000a9a:	2101      	movs	r1, #1
 8000a9c:	f7ff ff62 	bl	8000964 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 8000aa0:	2010      	movs	r0, #16
 8000aa2:	e037      	b.n	8000b14 <USART_DeInit+0x84>
  }
  else if (USARTx == USART2)
 8000aa4:	4b1f      	ldr	r3, [pc, #124]	; (8000b24 <USART_DeInit+0x94>)
 8000aa6:	4298      	cmp	r0, r3
 8000aa8:	d107      	bne.n	8000aba <USART_DeInit+0x2a>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 8000aaa:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000aae:	2101      	movs	r1, #1
 8000ab0:	f7ff ff4c 	bl	800094c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 8000ab4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000ab8:	e009      	b.n	8000ace <USART_DeInit+0x3e>
  }
  else if (USARTx == USART3)
 8000aba:	4b1b      	ldr	r3, [pc, #108]	; (8000b28 <USART_DeInit+0x98>)
 8000abc:	4298      	cmp	r0, r3
 8000abe:	d10b      	bne.n	8000ad8 <USART_DeInit+0x48>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 8000ac0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000ac4:	2101      	movs	r1, #1
 8000ac6:	f7ff ff41 	bl	800094c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 8000aca:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000ace:	2100      	movs	r1, #0
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
    }
  }
}
 8000ad0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
  }
  else if (USARTx == USART3)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 8000ad4:	f7ff bf3a 	b.w	800094c <RCC_APB1PeriphResetCmd>
  }    
  else if (USARTx == UART4)
 8000ad8:	4b14      	ldr	r3, [pc, #80]	; (8000b2c <USART_DeInit+0x9c>)
 8000ada:	4298      	cmp	r0, r3
 8000adc:	d107      	bne.n	8000aee <USART_DeInit+0x5e>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 8000ade:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000ae2:	2101      	movs	r1, #1
 8000ae4:	f7ff ff32 	bl	800094c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 8000ae8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000aec:	e7ef      	b.n	8000ace <USART_DeInit+0x3e>
  }
  else if (USARTx == UART5)
 8000aee:	4b10      	ldr	r3, [pc, #64]	; (8000b30 <USART_DeInit+0xa0>)
 8000af0:	4298      	cmp	r0, r3
 8000af2:	d107      	bne.n	8000b04 <USART_DeInit+0x74>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 8000af4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000af8:	2101      	movs	r1, #1
 8000afa:	f7ff ff27 	bl	800094c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 8000afe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000b02:	e7e4      	b.n	8000ace <USART_DeInit+0x3e>
  }     
  else
  {
    if (USARTx == USART6)
 8000b04:	4b0b      	ldr	r3, [pc, #44]	; (8000b34 <USART_DeInit+0xa4>)
 8000b06:	4298      	cmp	r0, r3
 8000b08:	d109      	bne.n	8000b1e <USART_DeInit+0x8e>
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
 8000b0a:	2020      	movs	r0, #32
 8000b0c:	2101      	movs	r1, #1
 8000b0e:	f7ff ff29 	bl	8000964 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 8000b12:	2020      	movs	r0, #32
 8000b14:	2100      	movs	r1, #0
    }
  }
}
 8000b16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (USARTx == USART6)
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 8000b1a:	f7ff bf23 	b.w	8000964 <RCC_APB2PeriphResetCmd>
 8000b1e:	bd08      	pop	{r3, pc}
 8000b20:	40011000 	.word	0x40011000
 8000b24:	40004400 	.word	0x40004400
 8000b28:	40004800 	.word	0x40004800
 8000b2c:	40004c00 	.word	0x40004c00
 8000b30:	40005000 	.word	0x40005000
 8000b34:	40011400 	.word	0x40011400

08000b38 <USART_Init>:
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000b38:	8a03      	ldrh	r3, [r0, #16]
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8000b3a:	88ca      	ldrh	r2, [r1, #6]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000b3c:	b29b      	uxth	r3, r3

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8000b3e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000b42:	b530      	push	{r4, r5, lr}
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000b44:	4313      	orrs	r3, r2
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000b46:	460d      	mov	r5, r1
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000b48:	8203      	strh	r3, [r0, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8000b4a:	8983      	ldrh	r3, [r0, #12]

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000b4c:	8909      	ldrh	r1, [r1, #8]
 8000b4e:	88aa      	ldrh	r2, [r5, #4]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8000b50:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000b54:	430a      	orrs	r2, r1
 8000b56:	8969      	ldrh	r1, [r5, #10]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8000b58:	f023 030c 	bic.w	r3, r3, #12
 8000b5c:	041b      	lsls	r3, r3, #16

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000b5e:	430a      	orrs	r2, r1

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8000b60:	0c1b      	lsrs	r3, r3, #16

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000b62:	b292      	uxth	r2, r2
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8000b64:	4313      	orrs	r3, r2
 8000b66:	8183      	strh	r3, [r0, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000b68:	8a83      	ldrh	r3, [r0, #20]
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8000b6a:	89aa      	ldrh	r2, [r5, #12]

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000b6c:	b29b      	uxth	r3, r3

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8000b6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8000b72:	4313      	orrs	r3, r2
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000b74:	b085      	sub	sp, #20
  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8000b76:	8283      	strh	r3, [r0, #20]
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000b78:	4604      	mov	r4, r0
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8000b7a:	4668      	mov	r0, sp
 8000b7c:	f7ff fe16 	bl	80007ac <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8000b80:	4b1a      	ldr	r3, [pc, #104]	; (8000bec <USART_Init+0xb4>)
 8000b82:	429c      	cmp	r4, r3
 8000b84:	d003      	beq.n	8000b8e <USART_Init+0x56>
 8000b86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000b8a:	429c      	cmp	r4, r3
 8000b8c:	d101      	bne.n	8000b92 <USART_Init+0x5a>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8000b8e:	9b03      	ldr	r3, [sp, #12]
 8000b90:	e000      	b.n	8000b94 <USART_Init+0x5c>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8000b92:	9b02      	ldr	r3, [sp, #8]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000b94:	89a2      	ldrh	r2, [r4, #12]
 8000b96:	b212      	sxth	r2, r2
 8000b98:	2a00      	cmp	r2, #0
 8000b9a:	f04f 0119 	mov.w	r1, #25
 8000b9e:	682a      	ldr	r2, [r5, #0]
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000ba0:	fb01 f103 	mul.w	r1, r1, r3
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000ba4:	da01      	bge.n	8000baa <USART_Init+0x72>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000ba6:	0052      	lsls	r2, r2, #1
 8000ba8:	e000      	b.n	8000bac <USART_Init+0x74>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8000baa:	0092      	lsls	r2, r2, #2
  }
  tmpreg = (integerdivider / 100) << 4;
 8000bac:	2364      	movs	r3, #100	; 0x64
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8000bae:	fbb1 f1f2 	udiv	r1, r1, r2
  }
  tmpreg = (integerdivider / 100) << 4;
 8000bb2:	fbb1 f2f3 	udiv	r2, r1, r3
 8000bb6:	0112      	lsls	r2, r2, #4

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000bb8:	0910      	lsrs	r0, r2, #4
 8000bba:	fb03 1110 	mls	r1, r3, r0, r1

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000bbe:	89a0      	ldrh	r0, [r4, #12]
 8000bc0:	b200      	sxth	r0, r0
 8000bc2:	2800      	cmp	r0, #0
 8000bc4:	da06      	bge.n	8000bd4 <USART_Init+0x9c>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8000bc6:	00c9      	lsls	r1, r1, #3
 8000bc8:	3132      	adds	r1, #50	; 0x32
 8000bca:	fbb1 f3f3 	udiv	r3, r1, r3
 8000bce:	f003 0307 	and.w	r3, r3, #7
 8000bd2:	e005      	b.n	8000be0 <USART_Init+0xa8>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8000bd4:	0109      	lsls	r1, r1, #4
 8000bd6:	3132      	adds	r1, #50	; 0x32
 8000bd8:	fbb1 f3f3 	udiv	r3, r1, r3
 8000bdc:	f003 030f 	and.w	r3, r3, #15
 8000be0:	431a      	orrs	r2, r3
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8000be2:	b292      	uxth	r2, r2
 8000be4:	8122      	strh	r2, [r4, #8]
}
 8000be6:	b005      	add	sp, #20
 8000be8:	bd30      	pop	{r4, r5, pc}
 8000bea:	bf00      	nop
 8000bec:	40011000 	.word	0x40011000

08000bf0 <USART_StructInit>:
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 8000bf0:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000bf4:	6003      	str	r3, [r0, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
  USART_InitStruct->USART_Parity = USART_Parity_No ;
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8000bf6:	220c      	movs	r2, #12
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	8083      	strh	r3, [r0, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 8000bfc:	80c3      	strh	r3, [r0, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 8000bfe:	8103      	strh	r3, [r0, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8000c00:	8142      	strh	r2, [r0, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 8000c02:	8183      	strh	r3, [r0, #12]
}
 8000c04:	4770      	bx	lr

08000c06 <USART_ClockInit>:
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8000c06:	880b      	ldrh	r3, [r1, #0]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000c08:	8a02      	ldrh	r2, [r0, #16]
  *         contains the configuration information for the specified  USART peripheral.
  * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 8000c0a:	b510      	push	{r4, lr}
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8000c0c:	884c      	ldrh	r4, [r1, #2]
 8000c0e:	4323      	orrs	r3, r4
 8000c10:	888c      	ldrh	r4, [r1, #4]
 8000c12:	88c9      	ldrh	r1, [r1, #6]
 8000c14:	4323      	orrs	r3, r4
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000c16:	b292      	uxth	r2, r2
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8000c18:	430b      	orrs	r3, r1
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 8000c1a:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8000c1e:	b29b      	uxth	r3, r3
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000c20:	4313      	orrs	r3, r2
 8000c22:	8203      	strh	r3, [r0, #16]
}
 8000c24:	bd10      	pop	{r4, pc}

08000c26 <USART_ClockStructInit>:
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 8000c26:	2300      	movs	r3, #0
 8000c28:	8003      	strh	r3, [r0, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 8000c2a:	8043      	strh	r3, [r0, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 8000c2c:	8083      	strh	r3, [r0, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 8000c2e:	80c3      	strh	r3, [r0, #6]
}
 8000c30:	4770      	bx	lr

08000c32 <USART_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8000c32:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000c34:	b119      	cbz	r1, 8000c3e <USART_Cmd+0xc>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8000c36:	b29b      	uxth	r3, r3
 8000c38:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c3c:	e003      	b.n	8000c46 <USART_Cmd+0x14>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8000c3e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000c42:	041b      	lsls	r3, r3, #16
 8000c44:	0c1b      	lsrs	r3, r3, #16
 8000c46:	8183      	strh	r3, [r0, #12]
 8000c48:	4770      	bx	lr

08000c4a <USART_SetPrescaler>:
{ 
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= USART_GTPR_GT;
 8000c4a:	8b03      	ldrh	r3, [r0, #24]
 8000c4c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000c50:	8303      	strh	r3, [r0, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 8000c52:	8b03      	ldrh	r3, [r0, #24]
 8000c54:	b29b      	uxth	r3, r3
 8000c56:	430b      	orrs	r3, r1
 8000c58:	8303      	strh	r3, [r0, #24]
}
 8000c5a:	4770      	bx	lr

08000c5c <USART_OverSampling8Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 8000c5c:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000c5e:	b129      	cbz	r1, 8000c6c <USART_OverSampling8Cmd+0x10>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 8000c60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000c64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000c68:	b29b      	uxth	r3, r3
 8000c6a:	e001      	b.n	8000c70 <USART_OverSampling8Cmd+0x14>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
 8000c6c:	045b      	lsls	r3, r3, #17
 8000c6e:	0c5b      	lsrs	r3, r3, #17
 8000c70:	8183      	strh	r3, [r0, #12]
 8000c72:	4770      	bx	lr

08000c74 <USART_OneBitMethodCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 8000c74:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000c76:	b119      	cbz	r1, 8000c80 <USART_OneBitMethodCmd+0xc>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 8000c78:	b29b      	uxth	r3, r3
 8000c7a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c7e:	e003      	b.n	8000c88 <USART_OneBitMethodCmd+0x14>
  }
  else
  {
    /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
 8000c80:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000c84:	041b      	lsls	r3, r3, #16
 8000c86:	0c1b      	lsrs	r3, r3, #16
 8000c88:	8283      	strh	r3, [r0, #20]
 8000c8a:	4770      	bx	lr

08000c8c <USART_SendData>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8000c8c:	05c9      	lsls	r1, r1, #23
 8000c8e:	0dc9      	lsrs	r1, r1, #23
 8000c90:	8081      	strh	r1, [r0, #4]
}
 8000c92:	4770      	bx	lr

08000c94 <USART_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8000c94:	8880      	ldrh	r0, [r0, #4]
 8000c96:	05c0      	lsls	r0, r0, #23
}
 8000c98:	0dc0      	lsrs	r0, r0, #23
 8000c9a:	4770      	bx	lr

08000c9c <USART_SetAddress>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
 8000c9c:	8a03      	ldrh	r3, [r0, #16]
 8000c9e:	f023 030f 	bic.w	r3, r3, #15
 8000ca2:	041b      	lsls	r3, r3, #16
 8000ca4:	0c1b      	lsrs	r3, r3, #16
 8000ca6:	8203      	strh	r3, [r0, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
 8000ca8:	8a03      	ldrh	r3, [r0, #16]
 8000caa:	b29b      	uxth	r3, r3
 8000cac:	430b      	orrs	r3, r1
 8000cae:	8203      	strh	r3, [r0, #16]
}
 8000cb0:	4770      	bx	lr

08000cb2 <USART_ReceiverWakeUpCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 8000cb2:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
 8000cb4:	b119      	cbz	r1, 8000cbe <USART_ReceiverWakeUpCmd+0xc>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 8000cb6:	b29b      	uxth	r3, r3
 8000cb8:	f043 0302 	orr.w	r3, r3, #2
 8000cbc:	e003      	b.n	8000cc6 <USART_ReceiverWakeUpCmd+0x14>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
 8000cbe:	f023 0302 	bic.w	r3, r3, #2
 8000cc2:	041b      	lsls	r3, r3, #16
 8000cc4:	0c1b      	lsrs	r3, r3, #16
 8000cc6:	8183      	strh	r3, [r0, #12]
 8000cc8:	4770      	bx	lr

08000cca <USART_WakeUpConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
 8000cca:	8983      	ldrh	r3, [r0, #12]
 8000ccc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000cd0:	041b      	lsls	r3, r3, #16
 8000cd2:	0c1b      	lsrs	r3, r3, #16
 8000cd4:	8183      	strh	r3, [r0, #12]
  USARTx->CR1 |= USART_WakeUp;
 8000cd6:	8983      	ldrh	r3, [r0, #12]
 8000cd8:	b29b      	uxth	r3, r3
 8000cda:	430b      	orrs	r3, r1
 8000cdc:	8183      	strh	r3, [r0, #12]
}
 8000cde:	4770      	bx	lr

08000ce0 <USART_LINBreakDetectLengthConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
 8000ce0:	8a03      	ldrh	r3, [r0, #16]
 8000ce2:	f023 0320 	bic.w	r3, r3, #32
 8000ce6:	041b      	lsls	r3, r3, #16
 8000ce8:	0c1b      	lsrs	r3, r3, #16
 8000cea:	8203      	strh	r3, [r0, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 8000cec:	8a03      	ldrh	r3, [r0, #16]
 8000cee:	b29b      	uxth	r3, r3
 8000cf0:	430b      	orrs	r3, r1
 8000cf2:	8203      	strh	r3, [r0, #16]
}
 8000cf4:	4770      	bx	lr

08000cf6 <USART_LINCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 8000cf6:	8a03      	ldrh	r3, [r0, #16]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000cf8:	b119      	cbz	r1, 8000d02 <USART_LINCmd+0xc>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 8000cfa:	b29b      	uxth	r3, r3
 8000cfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d00:	e003      	b.n	8000d0a <USART_LINCmd+0x14>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
 8000d02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000d06:	041b      	lsls	r3, r3, #16
 8000d08:	0c1b      	lsrs	r3, r3, #16
 8000d0a:	8203      	strh	r3, [r0, #16]
 8000d0c:	4770      	bx	lr

08000d0e <USART_SendBreak>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= USART_CR1_SBK;
 8000d0e:	8983      	ldrh	r3, [r0, #12]
 8000d10:	b29b      	uxth	r3, r3
 8000d12:	f043 0301 	orr.w	r3, r3, #1
 8000d16:	8183      	strh	r3, [r0, #12]
}
 8000d18:	4770      	bx	lr

08000d1a <USART_HalfDuplexCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 8000d1a:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000d1c:	b119      	cbz	r1, 8000d26 <USART_HalfDuplexCmd+0xc>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 8000d1e:	b29b      	uxth	r3, r3
 8000d20:	f043 0308 	orr.w	r3, r3, #8
 8000d24:	e003      	b.n	8000d2e <USART_HalfDuplexCmd+0x14>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
 8000d26:	f023 0308 	bic.w	r3, r3, #8
 8000d2a:	041b      	lsls	r3, r3, #16
 8000d2c:	0c1b      	lsrs	r3, r3, #16
 8000d2e:	8283      	strh	r3, [r0, #20]
 8000d30:	4770      	bx	lr

08000d32 <USART_SetGuardTime>:
{    
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= USART_GTPR_PSC;
 8000d32:	8b03      	ldrh	r3, [r0, #24]
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	8303      	strh	r3, [r0, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 8000d38:	8b03      	ldrh	r3, [r0, #24]
 8000d3a:	b29b      	uxth	r3, r3
 8000d3c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8000d40:	8303      	strh	r3, [r0, #24]
}
 8000d42:	4770      	bx	lr

08000d44 <USART_SmartCardCmd>:
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 8000d44:	8a83      	ldrh	r3, [r0, #20]
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000d46:	b119      	cbz	r1, 8000d50 <USART_SmartCardCmd+0xc>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 8000d48:	b29b      	uxth	r3, r3
 8000d4a:	f043 0320 	orr.w	r3, r3, #32
 8000d4e:	e003      	b.n	8000d58 <USART_SmartCardCmd+0x14>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
 8000d50:	f023 0320 	bic.w	r3, r3, #32
 8000d54:	041b      	lsls	r3, r3, #16
 8000d56:	0c1b      	lsrs	r3, r3, #16
 8000d58:	8283      	strh	r3, [r0, #20]
 8000d5a:	4770      	bx	lr

08000d5c <USART_SmartCardNACKCmd>:
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 8000d5c:	8a83      	ldrh	r3, [r0, #20]
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000d5e:	b119      	cbz	r1, 8000d68 <USART_SmartCardNACKCmd+0xc>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 8000d60:	b29b      	uxth	r3, r3
 8000d62:	f043 0310 	orr.w	r3, r3, #16
 8000d66:	e003      	b.n	8000d70 <USART_SmartCardNACKCmd+0x14>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
 8000d68:	f023 0310 	bic.w	r3, r3, #16
 8000d6c:	041b      	lsls	r3, r3, #16
 8000d6e:	0c1b      	lsrs	r3, r3, #16
 8000d70:	8283      	strh	r3, [r0, #20]
 8000d72:	4770      	bx	lr

08000d74 <USART_IrDAConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
 8000d74:	8a83      	ldrh	r3, [r0, #20]
 8000d76:	f023 0304 	bic.w	r3, r3, #4
 8000d7a:	041b      	lsls	r3, r3, #16
 8000d7c:	0c1b      	lsrs	r3, r3, #16
 8000d7e:	8283      	strh	r3, [r0, #20]
  USARTx->CR3 |= USART_IrDAMode;
 8000d80:	8a83      	ldrh	r3, [r0, #20]
 8000d82:	b29b      	uxth	r3, r3
 8000d84:	430b      	orrs	r3, r1
 8000d86:	8283      	strh	r3, [r0, #20]
}
 8000d88:	4770      	bx	lr

08000d8a <USART_IrDACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 8000d8a:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 8000d8c:	b119      	cbz	r1, 8000d96 <USART_IrDACmd+0xc>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 8000d8e:	b29b      	uxth	r3, r3
 8000d90:	f043 0302 	orr.w	r3, r3, #2
 8000d94:	e003      	b.n	8000d9e <USART_IrDACmd+0x14>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
 8000d96:	f023 0302 	bic.w	r3, r3, #2
 8000d9a:	041b      	lsls	r3, r3, #16
 8000d9c:	0c1b      	lsrs	r3, r3, #16
 8000d9e:	8283      	strh	r3, [r0, #20]
 8000da0:	4770      	bx	lr

08000da2 <USART_DMACmd>:

  if (NewState != DISABLE)
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8000da2:	8a83      	ldrh	r3, [r0, #20]
 8000da4:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 8000da6:	b10a      	cbz	r2, 8000dac <USART_DMACmd+0xa>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8000da8:	4319      	orrs	r1, r3
 8000daa:	e001      	b.n	8000db0 <USART_DMACmd+0xe>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 8000dac:	ea23 0101 	bic.w	r1, r3, r1
 8000db0:	8281      	strh	r1, [r0, #20]
 8000db2:	4770      	bx	lr

08000db4 <USART_ITConfig>:
  } 
    
  usartxbase = (uint32_t)USARTx;

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000db4:	f3c1 1342 	ubfx	r3, r1, #5, #3
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8000db8:	b510      	push	{r4, lr}

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8000dba:	f001 011f 	and.w	r1, r1, #31
  itmask = (((uint32_t)0x01) << itpos);
 8000dbe:	2401      	movs	r4, #1
 8000dc0:	fa14 f101 	lsls.w	r1, r4, r1
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8000dc4:	42a3      	cmp	r3, r4
 8000dc6:	d101      	bne.n	8000dcc <USART_ITConfig+0x18>
  {
    usartxbase += 0x0C;
 8000dc8:	300c      	adds	r0, #12
 8000dca:	e004      	b.n	8000dd6 <USART_ITConfig+0x22>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8000dcc:	2b02      	cmp	r3, #2
 8000dce:	d101      	bne.n	8000dd4 <USART_ITConfig+0x20>
  {
    usartxbase += 0x10;
 8000dd0:	3010      	adds	r0, #16
 8000dd2:	e000      	b.n	8000dd6 <USART_ITConfig+0x22>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8000dd4:	3014      	adds	r0, #20
  }
  if (NewState != DISABLE)
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000dd6:	6803      	ldr	r3, [r0, #0]
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
  }
  if (NewState != DISABLE)
 8000dd8:	b10a      	cbz	r2, 8000dde <USART_ITConfig+0x2a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000dda:	4319      	orrs	r1, r3
 8000ddc:	e001      	b.n	8000de2 <USART_ITConfig+0x2e>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8000dde:	ea23 0101 	bic.w	r1, r3, r1
 8000de2:	6001      	str	r1, [r0, #0]
 8000de4:	bd10      	pop	{r4, pc}

08000de6 <USART_GetFlagStatus>:
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8000de6:	8803      	ldrh	r3, [r0, #0]
  {
    bitstatus = SET;
 8000de8:	4219      	tst	r1, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8000dea:	bf0c      	ite	eq
 8000dec:	2000      	moveq	r0, #0
 8000dee:	2001      	movne	r0, #1
 8000df0:	4770      	bx	lr

08000df2 <USART_ClearFlag>:
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
       
  USARTx->SR = (uint16_t)~USART_FLAG;
 8000df2:	43c9      	mvns	r1, r1
 8000df4:	b289      	uxth	r1, r1
 8000df6:	8001      	strh	r1, [r0, #0]
}
 8000df8:	4770      	bx	lr

08000dfa <USART_GetITStatus>:
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
 8000dfa:	2201      	movs	r2, #1
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8000dfc:	b510      	push	{r4, lr}
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8000dfe:	f001 031f 	and.w	r3, r1, #31
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000e02:	f3c1 1442 	ubfx	r4, r1, #5, #3
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
 8000e06:	409a      	lsls	r2, r3
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8000e08:	2c01      	cmp	r4, #1
 8000e0a:	d101      	bne.n	8000e10 <USART_GetITStatus+0x16>
  {
    itmask &= USARTx->CR1;
 8000e0c:	8983      	ldrh	r3, [r0, #12]
 8000e0e:	e003      	b.n	8000e18 <USART_GetITStatus+0x1e>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8000e10:	2c02      	cmp	r4, #2
  {
    itmask &= USARTx->CR2;
 8000e12:	bf0c      	ite	eq
 8000e14:	8a03      	ldrheq	r3, [r0, #16]
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8000e16:	8a83      	ldrhne	r3, [r0, #20]
 8000e18:	b29b      	uxth	r3, r3
 8000e1a:	4013      	ands	r3, r2
  }
  
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
  bitpos &= USARTx->SR;
 8000e1c:	8802      	ldrh	r2, [r0, #0]
 8000e1e:	b292      	uxth	r2, r2
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8000e20:	b143      	cbz	r3, 8000e34 <USART_GetITStatus+0x3a>
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
  }
  
  bitpos = USART_IT >> 0x08;
 8000e22:	0a09      	lsrs	r1, r1, #8
  bitpos = (uint32_t)0x01 << bitpos;
 8000e24:	2301      	movs	r3, #1
 8000e26:	fa13 f101 	lsls.w	r1, r3, r1
  *            @arg USART_IT_NE:   Noise Error interrupt
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
 8000e2a:	4211      	tst	r1, r2
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
  bitpos &= USARTx->SR;
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
  {
    bitstatus = SET;
 8000e2c:	bf0c      	ite	eq
 8000e2e:	2000      	moveq	r0, #0
 8000e30:	2001      	movne	r0, #1
 8000e32:	bd10      	pop	{r4, pc}
  }
  else
  {
    bitstatus = RESET;
 8000e34:	4618      	mov	r0, r3
  }
  
  return bitstatus;  
}
 8000e36:	bd10      	pop	{r4, pc}

08000e38 <USART_ClearITPendingBit>:
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 8000e38:	0a09      	lsrs	r1, r1, #8
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	408b      	lsls	r3, r1
  USARTx->SR = (uint16_t)~itmask;
 8000e3e:	43db      	mvns	r3, r3
 8000e40:	b29b      	uxth	r3, r3
 8000e42:	8003      	strh	r3, [r0, #0]
}
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	08001728 	.word	0x08001728
 8000e4c:	20000000 	.word	0x20000000
 8000e50:	20000098 	.word	0x20000098
 8000e54:	20000098 	.word	0x20000098
 8000e58:	20000098 	.word	0x20000098

08000e5c <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8000e5c:	4770      	bx	lr

08000e5e <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000e5e:	e7fe      	b.n	8000e5e <HardFault_Handler>

08000e60 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000e60:	e7fe      	b.n	8000e60 <MemManage_Handler>

08000e62 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000e62:	e7fe      	b.n	8000e62 <BusFault_Handler>

08000e64 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000e64:	e7fe      	b.n	8000e64 <UsageFault_Handler>

08000e66 <SVC_Handler>:
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
}
 8000e66:	4770      	bx	lr

08000e68 <DebugMon_Handler>:
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
}
 8000e68:	4770      	bx	lr

08000e6a <PendSV_Handler>:
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
}
 8000e6a:	4770      	bx	lr

08000e6c <SystemInit>:
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000e6c:	4b33      	ldr	r3, [pc, #204]	; (8000f3c <SystemInit+0xd0>)
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	f042 0201 	orr.w	r2, r2, #1
 8000e74:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000e76:	2200      	movs	r2, #0
 8000e78:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000e7a:	6819      	ldr	r1, [r3, #0]
 8000e7c:	f021 7184 	bic.w	r1, r1, #17301504	; 0x1080000
 8000e80:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8000e84:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000e86:	492e      	ldr	r1, [pc, #184]	; (8000f40 <SystemInit+0xd4>)
 8000e88:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000e8a:	6819      	ldr	r1, [r3, #0]
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e8c:	b082      	sub	sp, #8

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000e8e:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8000e92:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000e94:	60da      	str	r2, [r3, #12]
static void SetSysClock(void)
{
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000e96:	9200      	str	r2, [sp, #0]
 8000e98:	9201      	str	r2, [sp, #4]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000ea0:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000ea8:	9201      	str	r2, [sp, #4]
    StartUpCounter++;
 8000eaa:	9a00      	ldr	r2, [sp, #0]
 8000eac:	3201      	adds	r2, #1
 8000eae:	9200      	str	r2, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000eb0:	9a01      	ldr	r2, [sp, #4]
 8000eb2:	b91a      	cbnz	r2, 8000ebc <SystemInit+0x50>
 8000eb4:	9a00      	ldr	r2, [sp, #0]
 8000eb6:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 8000eba:	d1f2      	bne.n	8000ea2 <SystemInit+0x36>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000ebc:	4b1f      	ldr	r3, [pc, #124]	; (8000f3c <SystemInit+0xd0>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
 8000ec4:	bf18      	it	ne
 8000ec6:	2301      	movne	r3, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000ec8:	9301      	str	r3, [sp, #4]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000eca:	9b01      	ldr	r3, [sp, #4]
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d12e      	bne.n	8000f2e <SystemInit+0xc2>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000ed0:	4b1a      	ldr	r3, [pc, #104]	; (8000f3c <SystemInit+0xd0>)
 8000ed2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ed4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000ed8:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8000eda:	4a1a      	ldr	r2, [pc, #104]	; (8000f44 <SystemInit+0xd8>)
 8000edc:	6811      	ldr	r1, [r2, #0]
 8000ede:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8000ee2:	6011      	str	r1, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000ee4:	689a      	ldr	r2, [r3, #8]
 8000ee6:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000ee8:	689a      	ldr	r2, [r3, #8]
 8000eea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000eee:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000ef0:	689a      	ldr	r2, [r3, #8]
 8000ef2:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 8000ef6:	609a      	str	r2, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000ef8:	4a13      	ldr	r2, [pc, #76]	; (8000f48 <SystemInit+0xdc>)
 8000efa:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000f02:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000f04:	6819      	ldr	r1, [r3, #0]
 8000f06:	4a0d      	ldr	r2, [pc, #52]	; (8000f3c <SystemInit+0xd0>)
 8000f08:	0189      	lsls	r1, r1, #6
 8000f0a:	d5fb      	bpl.n	8000f04 <SystemInit+0x98>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000f0c:	4b0f      	ldr	r3, [pc, #60]	; (8000f4c <SystemInit+0xe0>)
 8000f0e:	f240 6105 	movw	r1, #1541	; 0x605
 8000f12:	6019      	str	r1, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000f14:	6893      	ldr	r3, [r2, #8]
 8000f16:	f023 0303 	bic.w	r3, r3, #3
 8000f1a:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000f1c:	6893      	ldr	r3, [r2, #8]
 8000f1e:	f043 0302 	orr.w	r3, r3, #2
 8000f22:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000f24:	6893      	ldr	r3, [r2, #8]
 8000f26:	f003 030c 	and.w	r3, r3, #12
 8000f2a:	2b08      	cmp	r3, #8
 8000f2c:	d1fa      	bne.n	8000f24 <SystemInit+0xb8>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f2e:	4b08      	ldr	r3, [pc, #32]	; (8000f50 <SystemInit+0xe4>)
 8000f30:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f34:	609a      	str	r2, [r3, #8]
#endif
}
 8000f36:	b002      	add	sp, #8
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	40023800 	.word	0x40023800
 8000f40:	24003010 	.word	0x24003010
 8000f44:	40007000 	.word	0x40007000
 8000f48:	07405419 	.word	0x07405419
 8000f4c:	40023c00 	.word	0x40023c00
 8000f50:	e000ed00 	.word	0xe000ed00

08000f54 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000f54:	4b18      	ldr	r3, [pc, #96]	; (8000fb8 <SystemCoreClockUpdate+0x64>)
 8000f56:	4a19      	ldr	r2, [pc, #100]	; (8000fbc <SystemCoreClockUpdate+0x68>)
 8000f58:	6899      	ldr	r1, [r3, #8]
 8000f5a:	f001 010c 	and.w	r1, r1, #12

  switch (tmp)
 8000f5e:	2904      	cmp	r1, #4
 8000f60:	d003      	beq.n	8000f6a <SystemCoreClockUpdate+0x16>
 8000f62:	2908      	cmp	r1, #8
 8000f64:	d003      	beq.n	8000f6e <SystemCoreClockUpdate+0x1a>
 8000f66:	4b16      	ldr	r3, [pc, #88]	; (8000fc0 <SystemCoreClockUpdate+0x6c>)
 8000f68:	e019      	b.n	8000f9e <SystemCoreClockUpdate+0x4a>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000f6a:	4b16      	ldr	r3, [pc, #88]	; (8000fc4 <SystemCoreClockUpdate+0x70>)
 8000f6c:	e017      	b.n	8000f9e <SystemCoreClockUpdate+0x4a>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000f6e:	6859      	ldr	r1, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000f70:	685a      	ldr	r2, [r3, #4]
      
      if (pllsource != 0)
 8000f72:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000f76:	6859      	ldr	r1, [r3, #4]
 8000f78:	bf14      	ite	ne
 8000f7a:	4b12      	ldrne	r3, [pc, #72]	; (8000fc4 <SystemCoreClockUpdate+0x70>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000f7c:	4b10      	ldreq	r3, [pc, #64]	; (8000fc0 <SystemCoreClockUpdate+0x6c>)

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000f7e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000f82:	fbb3 f3f2 	udiv	r3, r3, r2
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000f86:	4a0c      	ldr	r2, [pc, #48]	; (8000fb8 <SystemCoreClockUpdate+0x64>)
 8000f88:	6852      	ldr	r2, [r2, #4]
 8000f8a:	f3c2 4201 	ubfx	r2, r2, #16, #2
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000f8e:	f3c1 1188 	ubfx	r1, r1, #6, #9
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000f92:	3201      	adds	r2, #1
 8000f94:	0052      	lsls	r2, r2, #1
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000f96:	434b      	muls	r3, r1
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
      SystemCoreClock = pllvco/pllp;
 8000f98:	fbb3 f3f2 	udiv	r3, r3, r2
 8000f9c:	4a07      	ldr	r2, [pc, #28]	; (8000fbc <SystemCoreClockUpdate+0x68>)
 8000f9e:	6013      	str	r3, [r2, #0]
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000fa0:	4b05      	ldr	r3, [pc, #20]	; (8000fb8 <SystemCoreClockUpdate+0x64>)
 8000fa2:	689a      	ldr	r2, [r3, #8]
 8000fa4:	4b05      	ldr	r3, [pc, #20]	; (8000fbc <SystemCoreClockUpdate+0x68>)
 8000fa6:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8000faa:	189a      	adds	r2, r3, r2
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000fac:	6819      	ldr	r1, [r3, #0]
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000fae:	7912      	ldrb	r2, [r2, #4]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000fb0:	fa31 f202 	lsrs.w	r2, r1, r2
 8000fb4:	601a      	str	r2, [r3, #0]
}
 8000fb6:	4770      	bx	lr
 8000fb8:	40023800 	.word	0x40023800
 8000fbc:	20000084 	.word	0x20000084
 8000fc0:	00f42400 	.word	0x00f42400
 8000fc4:	007a1200 	.word	0x007a1200

08000fc8 <__aeabi_frsub>:
 8000fc8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000fcc:	e002      	b.n	8000fd4 <__addsf3>
 8000fce:	bf00      	nop

08000fd0 <__aeabi_fsub>:
 8000fd0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000fd4 <__addsf3>:
 8000fd4:	0042      	lsls	r2, r0, #1
 8000fd6:	bf1f      	itttt	ne
 8000fd8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000fdc:	ea92 0f03 	teqne	r2, r3
 8000fe0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000fe4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fe8:	d06a      	beq.n	80010c0 <__addsf3+0xec>
 8000fea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000fee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ff2:	bfc1      	itttt	gt
 8000ff4:	18d2      	addgt	r2, r2, r3
 8000ff6:	4041      	eorgt	r1, r0
 8000ff8:	4048      	eorgt	r0, r1
 8000ffa:	4041      	eorgt	r1, r0
 8000ffc:	bfb8      	it	lt
 8000ffe:	425b      	neglt	r3, r3
 8001000:	2b19      	cmp	r3, #25
 8001002:	bf88      	it	hi
 8001004:	4770      	bxhi	lr
 8001006:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800100a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800100e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8001012:	bf18      	it	ne
 8001014:	4240      	negne	r0, r0
 8001016:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800101a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800101e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8001022:	bf18      	it	ne
 8001024:	4249      	negne	r1, r1
 8001026:	ea92 0f03 	teq	r2, r3
 800102a:	d03f      	beq.n	80010ac <__addsf3+0xd8>
 800102c:	f1a2 0201 	sub.w	r2, r2, #1
 8001030:	fa41 fc03 	asr.w	ip, r1, r3
 8001034:	eb10 000c 	adds.w	r0, r0, ip
 8001038:	f1c3 0320 	rsb	r3, r3, #32
 800103c:	fa01 f103 	lsl.w	r1, r1, r3
 8001040:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8001044:	d502      	bpl.n	800104c <__addsf3+0x78>
 8001046:	4249      	negs	r1, r1
 8001048:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800104c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8001050:	d313      	bcc.n	800107a <__addsf3+0xa6>
 8001052:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001056:	d306      	bcc.n	8001066 <__addsf3+0x92>
 8001058:	0840      	lsrs	r0, r0, #1
 800105a:	ea4f 0131 	mov.w	r1, r1, rrx
 800105e:	f102 0201 	add.w	r2, r2, #1
 8001062:	2afe      	cmp	r2, #254	; 0xfe
 8001064:	d251      	bcs.n	800110a <__addsf3+0x136>
 8001066:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800106a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800106e:	bf08      	it	eq
 8001070:	f020 0001 	biceq.w	r0, r0, #1
 8001074:	ea40 0003 	orr.w	r0, r0, r3
 8001078:	4770      	bx	lr
 800107a:	0049      	lsls	r1, r1, #1
 800107c:	eb40 0000 	adc.w	r0, r0, r0
 8001080:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8001084:	f1a2 0201 	sub.w	r2, r2, #1
 8001088:	d1ed      	bne.n	8001066 <__addsf3+0x92>
 800108a:	fab0 fc80 	clz	ip, r0
 800108e:	f1ac 0c08 	sub.w	ip, ip, #8
 8001092:	ebb2 020c 	subs.w	r2, r2, ip
 8001096:	fa00 f00c 	lsl.w	r0, r0, ip
 800109a:	bfaa      	itet	ge
 800109c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80010a0:	4252      	neglt	r2, r2
 80010a2:	4318      	orrge	r0, r3
 80010a4:	bfbc      	itt	lt
 80010a6:	40d0      	lsrlt	r0, r2
 80010a8:	4318      	orrlt	r0, r3
 80010aa:	4770      	bx	lr
 80010ac:	f092 0f00 	teq	r2, #0
 80010b0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80010b4:	bf06      	itte	eq
 80010b6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80010ba:	3201      	addeq	r2, #1
 80010bc:	3b01      	subne	r3, #1
 80010be:	e7b5      	b.n	800102c <__addsf3+0x58>
 80010c0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010c4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010c8:	bf18      	it	ne
 80010ca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80010ce:	d021      	beq.n	8001114 <__addsf3+0x140>
 80010d0:	ea92 0f03 	teq	r2, r3
 80010d4:	d004      	beq.n	80010e0 <__addsf3+0x10c>
 80010d6:	f092 0f00 	teq	r2, #0
 80010da:	bf08      	it	eq
 80010dc:	4608      	moveq	r0, r1
 80010de:	4770      	bx	lr
 80010e0:	ea90 0f01 	teq	r0, r1
 80010e4:	bf1c      	itt	ne
 80010e6:	2000      	movne	r0, #0
 80010e8:	4770      	bxne	lr
 80010ea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80010ee:	d104      	bne.n	80010fa <__addsf3+0x126>
 80010f0:	0040      	lsls	r0, r0, #1
 80010f2:	bf28      	it	cs
 80010f4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80010f8:	4770      	bx	lr
 80010fa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80010fe:	bf3c      	itt	cc
 8001100:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8001104:	4770      	bxcc	lr
 8001106:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800110a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800110e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001112:	4770      	bx	lr
 8001114:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8001118:	bf16      	itet	ne
 800111a:	4608      	movne	r0, r1
 800111c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8001120:	4601      	movne	r1, r0
 8001122:	0242      	lsls	r2, r0, #9
 8001124:	bf06      	itte	eq
 8001126:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800112a:	ea90 0f01 	teqeq	r0, r1
 800112e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8001132:	4770      	bx	lr

08001134 <__aeabi_ui2f>:
 8001134:	f04f 0300 	mov.w	r3, #0
 8001138:	e004      	b.n	8001144 <__aeabi_i2f+0x8>
 800113a:	bf00      	nop

0800113c <__aeabi_i2f>:
 800113c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8001140:	bf48      	it	mi
 8001142:	4240      	negmi	r0, r0
 8001144:	ea5f 0c00 	movs.w	ip, r0
 8001148:	bf08      	it	eq
 800114a:	4770      	bxeq	lr
 800114c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8001150:	4601      	mov	r1, r0
 8001152:	f04f 0000 	mov.w	r0, #0
 8001156:	e01c      	b.n	8001192 <__aeabi_l2f+0x2a>

08001158 <__aeabi_ul2f>:
 8001158:	ea50 0201 	orrs.w	r2, r0, r1
 800115c:	bf08      	it	eq
 800115e:	4770      	bxeq	lr
 8001160:	f04f 0300 	mov.w	r3, #0
 8001164:	e00a      	b.n	800117c <__aeabi_l2f+0x14>
 8001166:	bf00      	nop

08001168 <__aeabi_l2f>:
 8001168:	ea50 0201 	orrs.w	r2, r0, r1
 800116c:	bf08      	it	eq
 800116e:	4770      	bxeq	lr
 8001170:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8001174:	d502      	bpl.n	800117c <__aeabi_l2f+0x14>
 8001176:	4240      	negs	r0, r0
 8001178:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800117c:	ea5f 0c01 	movs.w	ip, r1
 8001180:	bf02      	ittt	eq
 8001182:	4684      	moveq	ip, r0
 8001184:	4601      	moveq	r1, r0
 8001186:	2000      	moveq	r0, #0
 8001188:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800118c:	bf08      	it	eq
 800118e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8001192:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8001196:	fabc f28c 	clz	r2, ip
 800119a:	3a08      	subs	r2, #8
 800119c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80011a0:	db10      	blt.n	80011c4 <__aeabi_l2f+0x5c>
 80011a2:	fa01 fc02 	lsl.w	ip, r1, r2
 80011a6:	4463      	add	r3, ip
 80011a8:	fa00 fc02 	lsl.w	ip, r0, r2
 80011ac:	f1c2 0220 	rsb	r2, r2, #32
 80011b0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80011b4:	fa20 f202 	lsr.w	r2, r0, r2
 80011b8:	eb43 0002 	adc.w	r0, r3, r2
 80011bc:	bf08      	it	eq
 80011be:	f020 0001 	biceq.w	r0, r0, #1
 80011c2:	4770      	bx	lr
 80011c4:	f102 0220 	add.w	r2, r2, #32
 80011c8:	fa01 fc02 	lsl.w	ip, r1, r2
 80011cc:	f1c2 0220 	rsb	r2, r2, #32
 80011d0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80011d4:	fa21 f202 	lsr.w	r2, r1, r2
 80011d8:	eb43 0002 	adc.w	r0, r3, r2
 80011dc:	bf08      	it	eq
 80011de:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80011e2:	4770      	bx	lr

080011e4 <__aeabi_fmul>:
 80011e4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80011e8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80011ec:	bf1e      	ittt	ne
 80011ee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80011f2:	ea92 0f0c 	teqne	r2, ip
 80011f6:	ea93 0f0c 	teqne	r3, ip
 80011fa:	d06f      	beq.n	80012dc <__aeabi_fmul+0xf8>
 80011fc:	441a      	add	r2, r3
 80011fe:	ea80 0c01 	eor.w	ip, r0, r1
 8001202:	0240      	lsls	r0, r0, #9
 8001204:	bf18      	it	ne
 8001206:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800120a:	d01e      	beq.n	800124a <__aeabi_fmul+0x66>
 800120c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001210:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8001214:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8001218:	fba0 3101 	umull	r3, r1, r0, r1
 800121c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8001220:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8001224:	bf3e      	ittt	cc
 8001226:	0049      	lslcc	r1, r1, #1
 8001228:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 800122c:	005b      	lslcc	r3, r3, #1
 800122e:	ea40 0001 	orr.w	r0, r0, r1
 8001232:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8001236:	2afd      	cmp	r2, #253	; 0xfd
 8001238:	d81d      	bhi.n	8001276 <__aeabi_fmul+0x92>
 800123a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800123e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001242:	bf08      	it	eq
 8001244:	f020 0001 	biceq.w	r0, r0, #1
 8001248:	4770      	bx	lr
 800124a:	f090 0f00 	teq	r0, #0
 800124e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001252:	bf08      	it	eq
 8001254:	0249      	lsleq	r1, r1, #9
 8001256:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800125a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800125e:	3a7f      	subs	r2, #127	; 0x7f
 8001260:	bfc2      	ittt	gt
 8001262:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8001266:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800126a:	4770      	bxgt	lr
 800126c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001270:	f04f 0300 	mov.w	r3, #0
 8001274:	3a01      	subs	r2, #1
 8001276:	dc5d      	bgt.n	8001334 <__aeabi_fmul+0x150>
 8001278:	f112 0f19 	cmn.w	r2, #25
 800127c:	bfdc      	itt	le
 800127e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8001282:	4770      	bxle	lr
 8001284:	f1c2 0200 	rsb	r2, r2, #0
 8001288:	0041      	lsls	r1, r0, #1
 800128a:	fa21 f102 	lsr.w	r1, r1, r2
 800128e:	f1c2 0220 	rsb	r2, r2, #32
 8001292:	fa00 fc02 	lsl.w	ip, r0, r2
 8001296:	ea5f 0031 	movs.w	r0, r1, rrx
 800129a:	f140 0000 	adc.w	r0, r0, #0
 800129e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80012a2:	bf08      	it	eq
 80012a4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80012a8:	4770      	bx	lr
 80012aa:	f092 0f00 	teq	r2, #0
 80012ae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80012b2:	bf02      	ittt	eq
 80012b4:	0040      	lsleq	r0, r0, #1
 80012b6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80012ba:	3a01      	subeq	r2, #1
 80012bc:	d0f9      	beq.n	80012b2 <__aeabi_fmul+0xce>
 80012be:	ea40 000c 	orr.w	r0, r0, ip
 80012c2:	f093 0f00 	teq	r3, #0
 80012c6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80012ca:	bf02      	ittt	eq
 80012cc:	0049      	lsleq	r1, r1, #1
 80012ce:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80012d2:	3b01      	subeq	r3, #1
 80012d4:	d0f9      	beq.n	80012ca <__aeabi_fmul+0xe6>
 80012d6:	ea41 010c 	orr.w	r1, r1, ip
 80012da:	e78f      	b.n	80011fc <__aeabi_fmul+0x18>
 80012dc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80012e0:	ea92 0f0c 	teq	r2, ip
 80012e4:	bf18      	it	ne
 80012e6:	ea93 0f0c 	teqne	r3, ip
 80012ea:	d00a      	beq.n	8001302 <__aeabi_fmul+0x11e>
 80012ec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80012f0:	bf18      	it	ne
 80012f2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80012f6:	d1d8      	bne.n	80012aa <__aeabi_fmul+0xc6>
 80012f8:	ea80 0001 	eor.w	r0, r0, r1
 80012fc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8001300:	4770      	bx	lr
 8001302:	f090 0f00 	teq	r0, #0
 8001306:	bf17      	itett	ne
 8001308:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 800130c:	4608      	moveq	r0, r1
 800130e:	f091 0f00 	teqne	r1, #0
 8001312:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8001316:	d014      	beq.n	8001342 <__aeabi_fmul+0x15e>
 8001318:	ea92 0f0c 	teq	r2, ip
 800131c:	d101      	bne.n	8001322 <__aeabi_fmul+0x13e>
 800131e:	0242      	lsls	r2, r0, #9
 8001320:	d10f      	bne.n	8001342 <__aeabi_fmul+0x15e>
 8001322:	ea93 0f0c 	teq	r3, ip
 8001326:	d103      	bne.n	8001330 <__aeabi_fmul+0x14c>
 8001328:	024b      	lsls	r3, r1, #9
 800132a:	bf18      	it	ne
 800132c:	4608      	movne	r0, r1
 800132e:	d108      	bne.n	8001342 <__aeabi_fmul+0x15e>
 8001330:	ea80 0001 	eor.w	r0, r0, r1
 8001334:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8001338:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800133c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001340:	4770      	bx	lr
 8001342:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8001346:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800134a:	4770      	bx	lr

0800134c <__aeabi_fdiv>:
 800134c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8001350:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8001354:	bf1e      	ittt	ne
 8001356:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800135a:	ea92 0f0c 	teqne	r2, ip
 800135e:	ea93 0f0c 	teqne	r3, ip
 8001362:	d069      	beq.n	8001438 <__aeabi_fdiv+0xec>
 8001364:	eba2 0203 	sub.w	r2, r2, r3
 8001368:	ea80 0c01 	eor.w	ip, r0, r1
 800136c:	0249      	lsls	r1, r1, #9
 800136e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8001372:	d037      	beq.n	80013e4 <__aeabi_fdiv+0x98>
 8001374:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001378:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 800137c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8001380:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8001384:	428b      	cmp	r3, r1
 8001386:	bf38      	it	cc
 8001388:	005b      	lslcc	r3, r3, #1
 800138a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800138e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8001392:	428b      	cmp	r3, r1
 8001394:	bf24      	itt	cs
 8001396:	1a5b      	subcs	r3, r3, r1
 8001398:	ea40 000c 	orrcs.w	r0, r0, ip
 800139c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80013a0:	bf24      	itt	cs
 80013a2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80013a6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80013aa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80013ae:	bf24      	itt	cs
 80013b0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80013b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80013b8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80013bc:	bf24      	itt	cs
 80013be:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80013c2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80013c6:	011b      	lsls	r3, r3, #4
 80013c8:	bf18      	it	ne
 80013ca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80013ce:	d1e0      	bne.n	8001392 <__aeabi_fdiv+0x46>
 80013d0:	2afd      	cmp	r2, #253	; 0xfd
 80013d2:	f63f af50 	bhi.w	8001276 <__aeabi_fmul+0x92>
 80013d6:	428b      	cmp	r3, r1
 80013d8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80013dc:	bf08      	it	eq
 80013de:	f020 0001 	biceq.w	r0, r0, #1
 80013e2:	4770      	bx	lr
 80013e4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80013e8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80013ec:	327f      	adds	r2, #127	; 0x7f
 80013ee:	bfc2      	ittt	gt
 80013f0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80013f4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80013f8:	4770      	bxgt	lr
 80013fa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80013fe:	f04f 0300 	mov.w	r3, #0
 8001402:	3a01      	subs	r2, #1
 8001404:	e737      	b.n	8001276 <__aeabi_fmul+0x92>
 8001406:	f092 0f00 	teq	r2, #0
 800140a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800140e:	bf02      	ittt	eq
 8001410:	0040      	lsleq	r0, r0, #1
 8001412:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8001416:	3a01      	subeq	r2, #1
 8001418:	d0f9      	beq.n	800140e <__aeabi_fdiv+0xc2>
 800141a:	ea40 000c 	orr.w	r0, r0, ip
 800141e:	f093 0f00 	teq	r3, #0
 8001422:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8001426:	bf02      	ittt	eq
 8001428:	0049      	lsleq	r1, r1, #1
 800142a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800142e:	3b01      	subeq	r3, #1
 8001430:	d0f9      	beq.n	8001426 <__aeabi_fdiv+0xda>
 8001432:	ea41 010c 	orr.w	r1, r1, ip
 8001436:	e795      	b.n	8001364 <__aeabi_fdiv+0x18>
 8001438:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800143c:	ea92 0f0c 	teq	r2, ip
 8001440:	d108      	bne.n	8001454 <__aeabi_fdiv+0x108>
 8001442:	0242      	lsls	r2, r0, #9
 8001444:	f47f af7d 	bne.w	8001342 <__aeabi_fmul+0x15e>
 8001448:	ea93 0f0c 	teq	r3, ip
 800144c:	f47f af70 	bne.w	8001330 <__aeabi_fmul+0x14c>
 8001450:	4608      	mov	r0, r1
 8001452:	e776      	b.n	8001342 <__aeabi_fmul+0x15e>
 8001454:	ea93 0f0c 	teq	r3, ip
 8001458:	d104      	bne.n	8001464 <__aeabi_fdiv+0x118>
 800145a:	024b      	lsls	r3, r1, #9
 800145c:	f43f af4c 	beq.w	80012f8 <__aeabi_fmul+0x114>
 8001460:	4608      	mov	r0, r1
 8001462:	e76e      	b.n	8001342 <__aeabi_fmul+0x15e>
 8001464:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001468:	bf18      	it	ne
 800146a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800146e:	d1ca      	bne.n	8001406 <__aeabi_fdiv+0xba>
 8001470:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001474:	f47f af5c 	bne.w	8001330 <__aeabi_fmul+0x14c>
 8001478:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800147c:	f47f af3c 	bne.w	80012f8 <__aeabi_fmul+0x114>
 8001480:	e75f      	b.n	8001342 <__aeabi_fmul+0x15e>
 8001482:	bf00      	nop

08001484 <__gesf2>:
 8001484:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8001488:	e006      	b.n	8001498 <__cmpsf2+0x4>
 800148a:	bf00      	nop

0800148c <__lesf2>:
 800148c:	f04f 0c01 	mov.w	ip, #1
 8001490:	e002      	b.n	8001498 <__cmpsf2+0x4>
 8001492:	bf00      	nop

08001494 <__cmpsf2>:
 8001494:	f04f 0c01 	mov.w	ip, #1
 8001498:	f84d cd04 	str.w	ip, [sp, #-4]!
 800149c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80014a0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80014a4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80014a8:	bf18      	it	ne
 80014aa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80014ae:	d011      	beq.n	80014d4 <__cmpsf2+0x40>
 80014b0:	b001      	add	sp, #4
 80014b2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80014b6:	bf18      	it	ne
 80014b8:	ea90 0f01 	teqne	r0, r1
 80014bc:	bf58      	it	pl
 80014be:	ebb2 0003 	subspl.w	r0, r2, r3
 80014c2:	bf88      	it	hi
 80014c4:	17c8      	asrhi	r0, r1, #31
 80014c6:	bf38      	it	cc
 80014c8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80014cc:	bf18      	it	ne
 80014ce:	f040 0001 	orrne.w	r0, r0, #1
 80014d2:	4770      	bx	lr
 80014d4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80014d8:	d102      	bne.n	80014e0 <__cmpsf2+0x4c>
 80014da:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80014de:	d105      	bne.n	80014ec <__cmpsf2+0x58>
 80014e0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80014e4:	d1e4      	bne.n	80014b0 <__cmpsf2+0x1c>
 80014e6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80014ea:	d0e1      	beq.n	80014b0 <__cmpsf2+0x1c>
 80014ec:	f85d 0b04 	ldr.w	r0, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop

080014f4 <__aeabi_cfrcmple>:
 80014f4:	4684      	mov	ip, r0
 80014f6:	4608      	mov	r0, r1
 80014f8:	4661      	mov	r1, ip
 80014fa:	e7ff      	b.n	80014fc <__aeabi_cfcmpeq>

080014fc <__aeabi_cfcmpeq>:
 80014fc:	b50f      	push	{r0, r1, r2, r3, lr}
 80014fe:	f7ff ffc9 	bl	8001494 <__cmpsf2>
 8001502:	2800      	cmp	r0, #0
 8001504:	bf48      	it	mi
 8001506:	f110 0f00 	cmnmi.w	r0, #0
 800150a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800150c <__aeabi_fcmpeq>:
 800150c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001510:	f7ff fff4 	bl	80014fc <__aeabi_cfcmpeq>
 8001514:	bf0c      	ite	eq
 8001516:	2001      	moveq	r0, #1
 8001518:	2000      	movne	r0, #0
 800151a:	f85d fb08 	ldr.w	pc, [sp], #8
 800151e:	bf00      	nop

08001520 <__aeabi_fcmplt>:
 8001520:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001524:	f7ff ffea 	bl	80014fc <__aeabi_cfcmpeq>
 8001528:	bf34      	ite	cc
 800152a:	2001      	movcc	r0, #1
 800152c:	2000      	movcs	r0, #0
 800152e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001532:	bf00      	nop

08001534 <__aeabi_fcmple>:
 8001534:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001538:	f7ff ffe0 	bl	80014fc <__aeabi_cfcmpeq>
 800153c:	bf94      	ite	ls
 800153e:	2001      	movls	r0, #1
 8001540:	2000      	movhi	r0, #0
 8001542:	f85d fb08 	ldr.w	pc, [sp], #8
 8001546:	bf00      	nop

08001548 <__aeabi_fcmpge>:
 8001548:	f84d ed08 	str.w	lr, [sp, #-8]!
 800154c:	f7ff ffd2 	bl	80014f4 <__aeabi_cfrcmple>
 8001550:	bf94      	ite	ls
 8001552:	2001      	movls	r0, #1
 8001554:	2000      	movhi	r0, #0
 8001556:	f85d fb08 	ldr.w	pc, [sp], #8
 800155a:	bf00      	nop

0800155c <__aeabi_fcmpgt>:
 800155c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001560:	f7ff ffc8 	bl	80014f4 <__aeabi_cfrcmple>
 8001564:	bf34      	ite	cc
 8001566:	2001      	movcc	r0, #1
 8001568:	2000      	movcs	r0, #0
 800156a:	f85d fb08 	ldr.w	pc, [sp], #8
 800156e:	bf00      	nop

08001570 <__aeabi_f2uiz>:
 8001570:	0042      	lsls	r2, r0, #1
 8001572:	d20e      	bcs.n	8001592 <__aeabi_f2uiz+0x22>
 8001574:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001578:	d30b      	bcc.n	8001592 <__aeabi_f2uiz+0x22>
 800157a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800157e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001582:	d409      	bmi.n	8001598 <__aeabi_f2uiz+0x28>
 8001584:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001588:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800158c:	fa23 f002 	lsr.w	r0, r3, r2
 8001590:	4770      	bx	lr
 8001592:	f04f 0000 	mov.w	r0, #0
 8001596:	4770      	bx	lr
 8001598:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800159c:	d101      	bne.n	80015a2 <__aeabi_f2uiz+0x32>
 800159e:	0242      	lsls	r2, r0, #9
 80015a0:	d102      	bne.n	80015a8 <__aeabi_f2uiz+0x38>
 80015a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015a6:	4770      	bx	lr
 80015a8:	f04f 0000 	mov.w	r0, #0
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop

080015b0 <_Z9_delay_msm>:
  volatile uint32_t i;				\
  for (i = 0; i < 10000; ++i)				\
    __asm__ __volatile__ ("nop\n\t":::"memory");	\
} while (0)

inline void _delay_ms(uint32_t t) {
 80015b0:	b082      	sub	sp, #8
	while (t-- > 0) {
		__delay();
 80015b2:	2200      	movs	r2, #0
 80015b4:	f242 730f 	movw	r3, #9999	; 0x270f
  for (i = 0; i < 10000; ++i)				\
    __asm__ __volatile__ ("nop\n\t":::"memory");	\
} while (0)

inline void _delay_ms(uint32_t t) {
	while (t-- > 0) {
 80015b8:	e009      	b.n	80015ce <_Z9_delay_msm+0x1e>
		__delay();
 80015ba:	9201      	str	r2, [sp, #4]
 80015bc:	e003      	b.n	80015c6 <_Z9_delay_msm+0x16>
 80015be:	bf00      	nop
 80015c0:	9901      	ldr	r1, [sp, #4]
 80015c2:	3101      	adds	r1, #1
 80015c4:	9101      	str	r1, [sp, #4]
 80015c6:	9901      	ldr	r1, [sp, #4]
 80015c8:	4299      	cmp	r1, r3
 80015ca:	d9f8      	bls.n	80015be <_Z9_delay_msm+0xe>
 80015cc:	3801      	subs	r0, #1
  for (i = 0; i < 10000; ++i)				\
    __asm__ __volatile__ ("nop\n\t":::"memory");	\
} while (0)

inline void _delay_ms(uint32_t t) {
	while (t-- > 0) {
 80015ce:	2800      	cmp	r0, #0
 80015d0:	d1f3      	bne.n	80015ba <_Z9_delay_msm+0xa>
		__delay();
	}
}
 80015d2:	b002      	add	sp, #8
 80015d4:	4770      	bx	lr
	...

080015d8 <main>:
#include <stm32f4xx_conf.h>

#include "armduino.h"
#include "usart.h"

int main(void) {
 80015d8:	b573      	push	{r0, r1, r4, r5, r6, lr}

	USARTSerial usart3;
	usart3.begin(19200);
 80015da:	ac01      	add	r4, sp, #4
 80015dc:	4620      	mov	r0, r4
 80015de:	f44f 4196 	mov.w	r1, #19200	; 0x4b00
 80015e2:	f7fe fe33 	bl	800024c <_ZN11USARTSerial5beginEm>
	uint16_t print(const float val, uint8_t prec = 2) {
		return printFloat(val, prec);
	}

	uint16_t println() { return print(nl); }
	uint16_t println(const char * s) { return print(s) + println(); }
 80015e6:	493a      	ldr	r1, [pc, #232]	; (80016d0 <main+0xf8>)
 80015e8:	4620      	mov	r0, r4
 80015ea:	f7fe fe8c 	bl	8000306 <_ZN11USARTSerial5printEPKc>
	void begin(uint32_t baud);

	uint16_t write(uint8_t ch);
	uint16_t write(uint8_t * p, uint16_t length);

	uint16_t print(const char c) { return write(c); }
 80015ee:	210a      	movs	r1, #10
 80015f0:	4620      	mov	r0, r4
 80015f2:	f7fe fe65 	bl	80002c0 <_ZN11USARTSerial5writeEh>
 80015f6:	210a      	movs	r1, #10
 80015f8:	4620      	mov	r0, r4
 80015fa:	f7fe fe61 	bl	80002c0 <_ZN11USARTSerial5writeEh>
	usart3.println("Hi.");
	usart3.println();

	pinMode(PD12 | PD13 | PD14 | PD15, GPIO_Mode_OUT);
 80015fe:	f44f 209e 	mov.w	r0, #323584	; 0x4f000
 8001602:	2101      	movs	r1, #1
 8001604:	f7fe fdc0 	bl	8000188 <pinMode>
		//GPIO_Speed_50MHz, GPIO_OType_PP, GPIO_PuPd_NOPULL);

	uint16_t count = 0;
 8001608:	2500      	movs	r5, #0

	while (1) {
		digitalWrite(PD12, SET);
 800160a:	2101      	movs	r1, #1
 800160c:	f44f 2082 	mov.w	r0, #266240	; 0x41000
 8001610:	f7fe fdf5 	bl	80001fe <digitalWrite>
		digitalWrite(PD13 | PD14 | PD15, RESET);
 8001614:	2100      	movs	r1, #0
 8001616:	f44f 209c 	mov.w	r0, #319488	; 0x4e000
 800161a:	f7fe fdf0 	bl	80001fe <digitalWrite>
		_delay_ms(50);
 800161e:	2032      	movs	r0, #50	; 0x32
 8001620:	f7ff ffc6 	bl	80015b0 <_Z9_delay_msm>
		digitalWrite(PD13, SET);
 8001624:	2101      	movs	r1, #1
 8001626:	f44f 2084 	mov.w	r0, #270336	; 0x42000
 800162a:	f7fe fde8 	bl	80001fe <digitalWrite>
		digitalWrite(PD12 | PD14 | PD15, RESET);
 800162e:	2100      	movs	r1, #0
 8001630:	f44f 209a 	mov.w	r0, #315392	; 0x4d000
 8001634:	f7fe fde3 	bl	80001fe <digitalWrite>
		_delay_ms(50);
 8001638:	2032      	movs	r0, #50	; 0x32
 800163a:	f7ff ffb9 	bl	80015b0 <_Z9_delay_msm>
		digitalWrite(PD14, SET);
 800163e:	2101      	movs	r1, #1
 8001640:	f44f 2088 	mov.w	r0, #278528	; 0x44000
 8001644:	f7fe fddb 	bl	80001fe <digitalWrite>
		digitalWrite(PD12 | PD13 | PD15, RESET);
 8001648:	2100      	movs	r1, #0
 800164a:	f44f 2096 	mov.w	r0, #307200	; 0x4b000
 800164e:	f7fe fdd6 	bl	80001fe <digitalWrite>
		_delay_ms(50);
 8001652:	2032      	movs	r0, #50	; 0x32
 8001654:	f7ff ffac 	bl	80015b0 <_Z9_delay_msm>
		digitalWrite(PD15, SET);
 8001658:	2101      	movs	r1, #1
 800165a:	f44f 2090 	mov.w	r0, #294912	; 0x48000
 800165e:	f7fe fdce 	bl	80001fe <digitalWrite>
		digitalWrite(PD12 | PD13 | PD14, RESET);
 8001662:	2100      	movs	r1, #0
 8001664:	f44f 208e 	mov.w	r0, #290816	; 0x47000
 8001668:	f7fe fdc9 	bl	80001fe <digitalWrite>
		_delay_ms(50);
 800166c:	2032      	movs	r0, #50	; 0x32
 800166e:	f7ff ff9f 	bl	80015b0 <_Z9_delay_msm>
		usart3.println((uint32_t) count++ / 100.0f, 3);
 8001672:	4628      	mov	r0, r5
 8001674:	f7ff fd5e 	bl	8001134 <__aeabi_ui2f>
 8001678:	4916      	ldr	r1, [pc, #88]	; (80016d4 <main+0xfc>)
 800167a:	f7ff fe67 	bl	800134c <__aeabi_fdiv>
 800167e:	3501      	adds	r5, #1
 8001680:	4601      	mov	r1, r0
	}
	uint16_t print(const int32_t val, const uint8_t base = DEC) {
		return ( val < 0 ? print('-') : 0) + printNumber(abs(val), base);
	}
	uint16_t print(const float val, uint8_t prec = 2) {
		return printFloat(val, prec);
 8001682:	2203      	movs	r2, #3
 8001684:	4620      	mov	r0, r4
 8001686:	f7fe fe85 	bl	8000394 <_ZN11USARTSerial10printFloatEfh>
 800168a:	b2ad      	uxth	r5, r5
	void begin(uint32_t baud);

	uint16_t write(uint8_t ch);
	uint16_t write(uint8_t * p, uint16_t length);

	uint16_t print(const char c) { return write(c); }
 800168c:	210a      	movs	r1, #10
 800168e:	4620      	mov	r0, r4
 8001690:	f7fe fe16 	bl	80002c0 <_ZN11USARTSerial5writeEh>
	uint16_t print(const char * s);
	uint16_t print(const uint32_t val, const uint8_t base = DEC) {
		return printNumber(val, base);
	}
	uint16_t print(const int32_t val, const uint8_t base = DEC) {
		return ( val < 0 ? print('-') : 0) + printNumber(abs(val), base);
 8001694:	f1b5 0664 	subs.w	r6, r5, #100	; 0x64
 8001698:	d503      	bpl.n	80016a2 <main+0xca>
	void begin(uint32_t baud);

	uint16_t write(uint8_t ch);
	uint16_t write(uint8_t * p, uint16_t length);

	uint16_t print(const char c) { return write(c); }
 800169a:	4620      	mov	r0, r4
 800169c:	212d      	movs	r1, #45	; 0x2d
 800169e:	f7fe fe0f 	bl	80002c0 <_ZN11USARTSerial5writeEh>
	uint16_t print(const char * s);
	uint16_t print(const uint32_t val, const uint8_t base = DEC) {
		return printNumber(val, base);
	}
	uint16_t print(const int32_t val, const uint8_t base = DEC) {
		return ( val < 0 ? print('-') : 0) + printNumber(abs(val), base);
 80016a2:	220a      	movs	r2, #10
 80016a4:	ea86 71e6 	eor.w	r1, r6, r6, asr #31
 80016a8:	eba1 71e6 	sub.w	r1, r1, r6, asr #31
 80016ac:	4620      	mov	r0, r4
 80016ae:	f7fe fe3a 	bl	8000326 <_ZN11USARTSerial11printNumberEmh>
	void begin(uint32_t baud);

	uint16_t write(uint8_t ch);
	uint16_t write(uint8_t * p, uint16_t length);

	uint16_t print(const char c) { return write(c); }
 80016b2:	210a      	movs	r1, #10
 80016b4:	4620      	mov	r0, r4
 80016b6:	f7fe fe03 	bl	80002c0 <_ZN11USARTSerial5writeEh>
	}
	uint16_t print(const int32_t val, const uint8_t base = DEC) {
		return ( val < 0 ? print('-') : 0) + printNumber(abs(val), base);
	}
	uint16_t print(const float val, uint8_t prec = 2) {
		return printFloat(val, prec);
 80016ba:	4620      	mov	r0, r4
 80016bc:	4906      	ldr	r1, [pc, #24]	; (80016d8 <main+0x100>)
 80016be:	2202      	movs	r2, #2
 80016c0:	f7fe fe68 	bl	8000394 <_ZN11USARTSerial10printFloatEfh>
	void begin(uint32_t baud);

	uint16_t write(uint8_t ch);
	uint16_t write(uint8_t * p, uint16_t length);

	uint16_t print(const char c) { return write(c); }
 80016c4:	4620      	mov	r0, r4
 80016c6:	210a      	movs	r1, #10
 80016c8:	f7fe fdfa 	bl	80002c0 <_ZN11USARTSerial5writeEh>
 80016cc:	e79d      	b.n	800160a <main+0x32>
 80016ce:	bf00      	nop
 80016d0:	08001722 	.word	0x08001722
 80016d4:	42c80000 	.word	0x42c80000
 80016d8:	3f8ccccd 	.word	0x3f8ccccd

080016dc <Reset_Handler>:
 80016dc:	2100      	movs	r1, #0
 80016de:	e003      	b.n	80016e8 <LoopCopyDataInit>

080016e0 <CopyDataInit>:
 80016e0:	4b0a      	ldr	r3, [pc, #40]	; (800170c <LoopFillZerobss+0x10>)
 80016e2:	585b      	ldr	r3, [r3, r1]
 80016e4:	5043      	str	r3, [r0, r1]
 80016e6:	3104      	adds	r1, #4

080016e8 <LoopCopyDataInit>:
 80016e8:	4809      	ldr	r0, [pc, #36]	; (8001710 <LoopFillZerobss+0x14>)
 80016ea:	4b0a      	ldr	r3, [pc, #40]	; (8001714 <LoopFillZerobss+0x18>)
 80016ec:	1842      	adds	r2, r0, r1
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d3f6      	bcc.n	80016e0 <CopyDataInit>
 80016f2:	4a09      	ldr	r2, [pc, #36]	; (8001718 <LoopFillZerobss+0x1c>)
 80016f4:	e002      	b.n	80016fc <LoopFillZerobss>

080016f6 <FillZerobss>:
 80016f6:	2300      	movs	r3, #0
 80016f8:	f842 3b04 	str.w	r3, [r2], #4

080016fc <LoopFillZerobss>:
 80016fc:	4b07      	ldr	r3, [pc, #28]	; (800171c <LoopFillZerobss+0x20>)
 80016fe:	429a      	cmp	r2, r3
 8001700:	d3f9      	bcc.n	80016f6 <FillZerobss>
 8001702:	f7ff fbb3 	bl	8000e6c <SystemInit>
 8001706:	f7ff ff67 	bl	80015d8 <main>
 800170a:	4770      	bx	lr
 800170c:	08001728 	.word	0x08001728
 8001710:	20000000 	.word	0x20000000
 8001714:	20000098 	.word	0x20000098
 8001718:	20000098 	.word	0x20000098
 800171c:	20000098 	.word	0x20000098

08001720 <ADC_IRQHandler>:
 8001720:	e7fe      	b.n	8001720 <ADC_IRQHandler>
 8001722:	6948      	.short	0x6948
 8001724:	0000002e 	.word	0x0000002e
