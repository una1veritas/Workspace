
stm32f4-usart_test.elf:     file format elf32-littlearm


Disassembly of section .text:

08000188 <_ZN11USARTSerial5beginEm>:
#include "USARTSerial.h"

ring rx3, tx3;
USARTSerial usart3(USART3, rx3, tx3);

void USARTSerial::begin(uint32_t baud) {
 8000188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
//	GPIO_InitTypeDef GPIO_InitStruct; // this is for the GPIO pins used as TX and RX
	USART_InitTypeDef USART_InitStruct; // this is for the USART1 initilization
	NVIC_InitTypeDef NVIC_InitStructure; // this is used to configure the NVIC (nested vector interrupt controller)
if( USARTx == USART3 ) {
 800018c:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8000190:	6885      	ldr	r5, [r0, #8]
 8000192:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000196:	429d      	cmp	r5, r3
#include "USARTSerial.h"

ring rx3, tx3;
USARTSerial usart3(USART3, rx3, tx3);

void USARTSerial::begin(uint32_t baud) {
 8000198:	b08a      	sub	sp, #40	; 0x28
 800019a:	4604      	mov	r4, r0
 800019c:	460e      	mov	r6, r1
//	GPIO_InitTypeDef GPIO_InitStruct; // this is for the GPIO pins used as TX and RX
	USART_InitTypeDef USART_InitStruct; // this is for the USART1 initilization
	NVIC_InitTypeDef NVIC_InitStructure; // this is used to configure the NVIC (nested vector interrupt controller)
if( USARTx == USART3 ) {
 800019e:	d011      	beq.n	80001c4 <_ZN11USARTSerial5beginEm+0x3c>

	// finally this enables the complete USART3 peripheral
	USART_Cmd(USART3, (FunctionalState) ENABLE);
}
	rx.init();
	tx.init();
 80001a0:	e894 0006 	ldmia.w	r4, {r1, r2}
	uint16 buffer[RINGBUFFER_SIZE];
	uint16 head, tail;
	uint16 count;

	void init() {
		head = 0;
 80001a4:	2300      	movs	r3, #0
 80001a6:	f8a1 3100 	strh.w	r3, [r1, #256]	; 0x100
		tail = 0;
 80001aa:	f8a1 3102 	strh.w	r3, [r1, #258]	; 0x102
		count = 0;
 80001ae:	f8a1 3104 	strh.w	r3, [r1, #260]	; 0x104
	uint16 buffer[RINGBUFFER_SIZE];
	uint16 head, tail;
	uint16 count;

	void init() {
		head = 0;
 80001b2:	f8a2 3100 	strh.w	r3, [r2, #256]	; 0x100
		tail = 0;
 80001b6:	f8a2 3102 	strh.w	r3, [r2, #258]	; 0x102
		count = 0;
 80001ba:	f8a2 3104 	strh.w	r3, [r2, #260]	; 0x104
}
 80001be:	b00a      	add	sp, #40	; 0x28
 80001c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	USART_InitTypeDef USART_InitStruct; // this is for the USART1 initilization
	NVIC_InitTypeDef NVIC_InitStructure; // this is used to configure the NVIC (nested vector interrupt controller)
if( USARTx == USART3 ) {
//	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, (FunctionalState) ENABLE);
	GPIOMode(RCC_AHB1Periph_GPIOB, GPIOB, GPIO_Pin_10 | GPIO_Pin_11,
			GPIO_Mode_AF, GPIO_Speed_50MHz, GPIO_OType_PP, GPIO_PuPd_UP);
 80001c4:	f04f 0e02 	mov.w	lr, #2
 80001c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001cc:	4670      	mov	r0, lr
 80001ce:	4673      	mov	r3, lr
 80001d0:	2700      	movs	r7, #0
 80001d2:	f04f 0801 	mov.w	r8, #1
 80001d6:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 80001da:	f2c4 0102 	movt	r1, #16386	; 0x4002
 80001de:	f8cd e000 	str.w	lr, [sp]
 80001e2:	9701      	str	r7, [sp, #4]
 80001e4:	f8cd 8008 	str.w	r8, [sp, #8]
 80001e8:	f000 f9cc 	bl	8000584 <GPIOMode>
	/* USART3 clock enable */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, (FunctionalState) ENABLE);
 80001ec:	4641      	mov	r1, r8
 80001ee:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80001f2:	f000 fd4f 	bl	8000c94 <RCC_APB1PeriphClockCmd>

	GPIO_PinAFConfig(GPIOB, GPIO_PinSource10, GPIO_AF_USART3 ); // TX -- PB10
 80001f6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80001fa:	210a      	movs	r1, #10
 80001fc:	2207      	movs	r2, #7
 80001fe:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000202:	f000 fba5 	bl	8000950 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource11, GPIO_AF_USART3 ); // RX -- PB11
 8000206:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800020a:	2207      	movs	r2, #7
 800020c:	210b      	movs	r1, #11
 800020e:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000212:	f000 fb9d 	bl	8000950 <GPIO_PinAFConfig>
	USART_InitStruct.USART_BaudRate = baud;	// the baudrate is set to the value we passed into this init function
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
	USART_InitStruct.USART_StopBits = USART_StopBits_1;	// we want 1 stop bit (standard)
	USART_InitStruct.USART_Parity = USART_Parity_No;// we don't want a parity bit (standard)
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver
 8000216:	230c      	movs	r3, #12

	USART_Init(USART3, &USART_InitStruct); // again all the properties are passed to the USART_Init function which takes care of all the bit setting
 8000218:	a905      	add	r1, sp, #20
 800021a:	4628      	mov	r0, r5
	USART_InitStruct.USART_BaudRate = baud;	// the baudrate is set to the value we passed into this init function
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
	USART_InitStruct.USART_StopBits = USART_StopBits_1;	// we want 1 stop bit (standard)
	USART_InitStruct.USART_Parity = USART_Parity_No;// we don't want a parity bit (standard)
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver
 800021c:	f8ad 301e 	strh.w	r3, [sp, #30]
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, (FunctionalState) ENABLE);

	GPIO_PinAFConfig(GPIOB, GPIO_PinSource10, GPIO_AF_USART3 ); // TX -- PB10
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource11, GPIO_AF_USART3 ); // RX -- PB11

	USART_InitStruct.USART_BaudRate = baud;	// the baudrate is set to the value we passed into this init function
 8000220:	9605      	str	r6, [sp, #20]
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
 8000222:	f8ad 7018 	strh.w	r7, [sp, #24]
	USART_InitStruct.USART_StopBits = USART_StopBits_1;	// we want 1 stop bit (standard)
 8000226:	f8ad 701a 	strh.w	r7, [sp, #26]
	USART_InitStruct.USART_Parity = USART_Parity_No;// we don't want a parity bit (standard)
 800022a:	f8ad 701c 	strh.w	r7, [sp, #28]
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
 800022e:	f8ad 7020 	strh.w	r7, [sp, #32]
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver

	USART_Init(USART3, &USART_InitStruct); // again all the properties are passed to the USART_Init function which takes care of all the bit setting
 8000232:	f000 fe81 	bl	8000f38 <USART_Init>

	USART_ITConfig(USART3, USART_IT_RXNE, (FunctionalState) ENABLE); // enable the USART3 receive interrupt
 8000236:	4628      	mov	r0, r5
 8000238:	4642      	mov	r2, r8
 800023a:	f240 5125 	movw	r1, #1317	; 0x525
 800023e:	f000 ffe5 	bl	800120c <USART_ITConfig>
	USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) DISABLE);
 8000242:	4628      	mov	r0, r5
 8000244:	f240 7127 	movw	r1, #1831	; 0x727
 8000248:	463a      	mov	r2, r7
 800024a:	f000 ffdf 	bl	800120c <USART_ITConfig>
	 NVIC_InitStructure.NVIC_IRQChannel = USART3_IRQn;
	 // we want to configure the USART3 interrupts
	 NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;// this sets the priority group of the USART3 interrupts
	 NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;// this sets the subpriority inside the group
	 NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;	// the USART3 interrupts are globally enabled
	 NVIC_Init(&NVIC_InitStructure);	// the properties are passed to the NVIC_Init function which takes care of the low level stuff
 800024e:	a809      	add	r0, sp, #36	; 0x24

NewState	説明
ENABLE	有効にします
DISABLE	無効にします
*/
	 NVIC_InitStructure.NVIC_IRQChannel = USART3_IRQn;
 8000250:	2327      	movs	r3, #39	; 0x27
 8000252:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	 // we want to configure the USART3 interrupts
	 NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;// this sets the priority group of the USART3 interrupts
 8000256:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
	 NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;// this sets the subpriority inside the group
 800025a:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
	 NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;	// the USART3 interrupts are globally enabled
 800025e:	f88d 8027 	strb.w	r8, [sp, #39]	; 0x27
	 NVIC_Init(&NVIC_InitStructure);	// the properties are passed to the NVIC_Init function which takes care of the low level stuff
 8000262:	f000 f9dd 	bl	8000620 <NVIC_Init>

	// finally this enables the complete USART3 peripheral
	USART_Cmd(USART3, (FunctionalState) ENABLE);
 8000266:	4628      	mov	r0, r5
 8000268:	4641      	mov	r1, r8
 800026a:	f000 fef5 	bl	8001058 <USART_Cmd>
 800026e:	e797      	b.n	80001a0 <_ZN11USARTSerial5beginEm+0x18>

08000270 <_ZN11USARTSerial5writeEt>:
	tx3.ringin(ch);
	USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) ENABLE);
}
*/

uint16_t USARTSerial::write(const uint16_t ch) {
 8000270:	b538      	push	{r3, r4, r5, lr}
 8000272:	4604      	mov	r4, r0
 8000274:	460d      	mov	r5, r1
	// write3(ch);
	while (USART_GetFlagStatus(USARTx, USART_FLAG_TC )
 8000276:	68a0      	ldr	r0, [r4, #8]
 8000278:	2140      	movs	r1, #64	; 0x40
 800027a:	f000 ffe3 	bl	8001244 <USART_GetFlagStatus>
 800027e:	2800      	cmp	r0, #0
 8000280:	d0f9      	beq.n	8000276 <_ZN11USARTSerial5writeEt+0x6>
				== RESET);
	tx.ringin(ch);
 8000282:	6863      	ldr	r3, [r4, #4]
			return 0;
		return buffer[head];
	}

	bool is_full() {
		return (count > 0) && head == tail;
 8000284:	f8b3 1104 	ldrh.w	r1, [r3, #260]	; 0x104
 8000288:	b999      	cbnz	r1, 80002b2 <_ZN11USARTSerial5writeEt+0x42>
 800028a:	f8b3 2102 	ldrh.w	r2, [r3, #258]	; 0x102
	uint16 ringin(uint16 c) {
		if ( is_full() ) {
			head++;  head %= RINGBUFFER_SIZE;
			// buffer over run occurred!
		} else
			count++;
 800028e:	3101      	adds	r1, #1
 8000290:	f8a3 1104 	strh.w	r1, [r3, #260]	; 0x104
		buffer[tail++] = c;
 8000294:	1c51      	adds	r1, r2, #1
		tail %= RINGBUFFER_SIZE;
 8000296:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	USART_ITConfig(USARTx, USART_IT_TXE, (FunctionalState) ENABLE);
 800029a:	68a0      	ldr	r0, [r4, #8]
		if ( is_full() ) {
			head++;  head %= RINGBUFFER_SIZE;
			// buffer over run occurred!
		} else
			count++;
		buffer[tail++] = c;
 800029c:	f823 5012 	strh.w	r5, [r3, r2, lsl #1]
		tail %= RINGBUFFER_SIZE;
 80002a0:	f8a3 1102 	strh.w	r1, [r3, #258]	; 0x102
 80002a4:	2201      	movs	r2, #1
 80002a6:	f240 7127 	movw	r1, #1831	; 0x727
 80002aa:	f000 ffaf 	bl	800120c <USART_ITConfig>
	return 1;
}
 80002ae:	2001      	movs	r0, #1
 80002b0:	bd38      	pop	{r3, r4, r5, pc}
			return 0;
		return buffer[head];
	}

	bool is_full() {
		return (count > 0) && head == tail;
 80002b2:	f8b3 0100 	ldrh.w	r0, [r3, #256]	; 0x100
 80002b6:	f8b3 2102 	ldrh.w	r2, [r3, #258]	; 0x102
 80002ba:	4282      	cmp	r2, r0
 80002bc:	d1e7      	bne.n	800028e <_ZN11USARTSerial5writeEt+0x1e>
		count = 0;
	}

	uint16 ringin(uint16 c) {
		if ( is_full() ) {
			head++;  head %= RINGBUFFER_SIZE;
 80002be:	1c51      	adds	r1, r2, #1
 80002c0:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80002c4:	f8a3 1100 	strh.w	r1, [r3, #256]	; 0x100
 80002c8:	e7e4      	b.n	8000294 <_ZN11USARTSerial5writeEt+0x24>
 80002ca:	bf00      	nop

080002cc <_ZN11USARTSerial5writeEPtt>:
	return 1;
	return buffered_write(ch);
}
*/

uint16_t USARTSerial::write(uint16_t * p, uint16_t length) {
 80002cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint16_t n = 0;
	while (n++ < length)
 80002d0:	4690      	mov	r8, r2
	return 1;
	return buffered_write(ch);
}
*/

uint16_t USARTSerial::write(uint16_t * p, uint16_t length) {
 80002d2:	4606      	mov	r6, r0
 80002d4:	460d      	mov	r5, r1
	uint16_t n = 0;
	while (n++ < length)
 80002d6:	b1a2      	cbz	r2, 8000302 <_ZN11USARTSerial5writeEPtt+0x36>
	return 1;
	return buffered_write(ch);
}
*/

uint16_t USARTSerial::write(uint16_t * p, uint16_t length) {
 80002d8:	f102 37ff 	add.w	r7, r2, #4294967295	; 0xffffffff
 80002dc:	1c8c      	adds	r4, r1, #2
 80002de:	b2bf      	uxth	r7, r7
 80002e0:	eb04 0747 	add.w	r7, r4, r7, lsl #1
 80002e4:	e000      	b.n	80002e8 <_ZN11USARTSerial5writeEPtt+0x1c>
 80002e6:	3402      	adds	r4, #2
	uint16_t n = 0;
	while (n++ < length)
		write(*p++);
 80002e8:	8829      	ldrh	r1, [r5, #0]
 80002ea:	4630      	mov	r0, r6
 80002ec:	f7ff ffc0 	bl	8000270 <_ZN11USARTSerial5writeEt>
}
*/

uint16_t USARTSerial::write(uint16_t * p, uint16_t length) {
	uint16_t n = 0;
	while (n++ < length)
 80002f0:	42bc      	cmp	r4, r7
		write(*p++);
 80002f2:	4625      	mov	r5, r4
}
*/

uint16_t USARTSerial::write(uint16_t * p, uint16_t length) {
	uint16_t n = 0;
	while (n++ < length)
 80002f4:	d1f7      	bne.n	80002e6 <_ZN11USARTSerial5writeEPtt+0x1a>
 80002f6:	f108 0801 	add.w	r8, r8, #1
 80002fa:	fa1f f088 	uxth.w	r0, r8
 80002fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000302:	2001      	movs	r0, #1
		write(*p++);
	return n;
}
 8000304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000308 <_ZN11USARTSerial5printEPKc>:


uint16_t USARTSerial::print(const char * s) {
 8000308:	b570      	push	{r4, r5, r6, lr}
 800030a:	460d      	mov	r5, r1
	uint16_t n = 0;
	while ( *s ) {
 800030c:	7809      	ldrb	r1, [r1, #0]
		write(*p++);
	return n;
}


uint16_t USARTSerial::print(const char * s) {
 800030e:	4606      	mov	r6, r0
	uint16_t n = 0;
 8000310:	460c      	mov	r4, r1
	while ( *s ) {
 8000312:	b149      	cbz	r1, 8000328 <_ZN11USARTSerial5printEPKc+0x20>
	return n;
}


uint16_t USARTSerial::print(const char * s) {
	uint16_t n = 0;
 8000314:	2400      	movs	r4, #0
	while ( *s ) {
		write(*s);
 8000316:	4630      	mov	r0, r6
 8000318:	f7ff ffaa 	bl	8000270 <_ZN11USARTSerial5writeEt>
}


uint16_t USARTSerial::print(const char * s) {
	uint16_t n = 0;
	while ( *s ) {
 800031c:	f815 1f01 	ldrb.w	r1, [r5, #1]!
		write(*s);
		s++;
		n++;
 8000320:	3401      	adds	r4, #1
 8000322:	b2a4      	uxth	r4, r4
}


uint16_t USARTSerial::print(const char * s) {
	uint16_t n = 0;
	while ( *s ) {
 8000324:	2900      	cmp	r1, #0
 8000326:	d1f6      	bne.n	8000316 <_ZN11USARTSerial5printEPKc+0xe>
		write(*s);
		s++;
		n++;
	}
	return n;
}
 8000328:	4620      	mov	r0, r4
 800032a:	bd70      	pop	{r4, r5, r6, pc}

0800032c <_ZN11USARTSerial11printNumberEmh>:

uint16_t USARTSerial::printNumber(uint32_t val, const uint8_t base) {
	uint16_t n = 0;
	bool msd = false;
	uint32_t divider = ( base == 2 ? 1<<31 :
		( base == 16 ? 0x10000000L : 1000000000L ) );
 800032c:	2a02      	cmp	r2, #2
	}
	return n;
}


uint16_t USARTSerial::printNumber(uint32_t val, const uint8_t base) {
 800032e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint16_t n = 0;
	bool msd = false;
	uint32_t divider = ( base == 2 ? 1<<31 :
		( base == 16 ? 0x10000000L : 1000000000L ) );
 8000332:	bf08      	it	eq
 8000334:	f04f 4300 	moveq.w	r3, #2147483648	; 0x80000000
	}
	return n;
}


uint16_t USARTSerial::printNumber(uint32_t val, const uint8_t base) {
 8000338:	4614      	mov	r4, r2
 800033a:	4680      	mov	r8, r0
 800033c:	460f      	mov	r7, r1
	uint16_t n = 0;
	bool msd = false;
	uint32_t divider = ( base == 2 ? 1<<31 :
		( base == 16 ? 0x10000000L : 1000000000L ) );
 800033e:	d007      	beq.n	8000350 <_ZN11USARTSerial11printNumberEmh+0x24>
 8000340:	f44f 434a 	mov.w	r3, #51712	; 0xca00
 8000344:	f6c3 339a 	movt	r3, #15258	; 0x3b9a
 8000348:	2a10      	cmp	r2, #16
 800034a:	bf08      	it	eq
 800034c:	f04f 5380 	moveq.w	r3, #268435456	; 0x10000000
 8000350:	2000      	movs	r0, #0
 8000352:	4606      	mov	r6, r0

	uint8_t digit;
	while ( divider > 0 ) {
		digit = (val / divider) % base;
 8000354:	fbb7 f2f3 	udiv	r2, r7, r3
 8000358:	fbb2 f1f4 	udiv	r1, r2, r4
 800035c:	fb04 2111 	mls	r1, r4, r1, r2
 8000360:	b2c9      	uxtb	r1, r1
		if ( digit || msd || (!msd && (divider%base)) ) {
 8000362:	b991      	cbnz	r1, 800038a <_ZN11USARTSerial11printNumberEmh+0x5e>
 8000364:	fbb3 f5f4 	udiv	r5, r3, r4
 8000368:	b910      	cbnz	r0, 8000370 <_ZN11USARTSerial11printNumberEmh+0x44>
 800036a:	fb04 3315 	mls	r3, r4, r5, r3
 800036e:	b133      	cbz	r3, 800037e <_ZN11USARTSerial11printNumberEmh+0x52>
			write('0' + ( digit > 9 ? digit + 7 : digit));
 8000370:	3130      	adds	r1, #48	; 0x30
 8000372:	4640      	mov	r0, r8
			msd = true;
			n++;
 8000374:	3601      	adds	r6, #1

	uint8_t digit;
	while ( divider > 0 ) {
		digit = (val / divider) % base;
		if ( digit || msd || (!msd && (divider%base)) ) {
			write('0' + ( digit > 9 ? digit + 7 : digit));
 8000376:	f7ff ff7b 	bl	8000270 <_ZN11USARTSerial5writeEt>
			msd = true;
			n++;
 800037a:	b2b6      	uxth	r6, r6
	uint8_t digit;
	while ( divider > 0 ) {
		digit = (val / divider) % base;
		if ( digit || msd || (!msd && (divider%base)) ) {
			write('0' + ( digit > 9 ? digit + 7 : digit));
			msd = true;
 800037c:	2001      	movs	r0, #1
			n++;
		}
		divider /= base;
 800037e:	462b      	mov	r3, r5
	bool msd = false;
	uint32_t divider = ( base == 2 ? 1<<31 :
		( base == 16 ? 0x10000000L : 1000000000L ) );

	uint8_t digit;
	while ( divider > 0 ) {
 8000380:	2d00      	cmp	r5, #0
 8000382:	d1e7      	bne.n	8000354 <_ZN11USARTSerial11printNumberEmh+0x28>
			n++;
		}
		divider /= base;
	}
	return n;
}
 8000384:	4630      	mov	r0, r6
 8000386:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	uint8_t digit;
	while ( divider > 0 ) {
		digit = (val / divider) % base;
		if ( digit || msd || (!msd && (divider%base)) ) {
			write('0' + ( digit > 9 ? digit + 7 : digit));
 800038a:	2909      	cmp	r1, #9
 800038c:	d903      	bls.n	8000396 <_ZN11USARTSerial11printNumberEmh+0x6a>
 800038e:	3137      	adds	r1, #55	; 0x37
 8000390:	fbb3 f5f4 	udiv	r5, r3, r4
 8000394:	e7ed      	b.n	8000372 <_ZN11USARTSerial11printNumberEmh+0x46>
 8000396:	fbb3 f5f4 	udiv	r5, r3, r4
 800039a:	e7e9      	b.n	8000370 <_ZN11USARTSerial11printNumberEmh+0x44>

0800039c <_ZN11USARTSerial10printFloatEfh>:
		divider /= base;
	}
	return n;
}

uint16_t USARTSerial::printFloat(float val, uint8_t prec) {
 800039c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t n = 0;
	if ( val < 0 ) {
 800039e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80003a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		divider /= base;
	}
	return n;
}

uint16_t USARTSerial::printFloat(float val, uint8_t prec) {
 80003a6:	ed2d 8b04 	vpush	{d8-d9}
 80003aa:	4605      	mov	r5, r0
 80003ac:	eeb0 8a40 	vmov.f32	s16, s0
 80003b0:	460e      	mov	r6, r1
	uint16_t n = 0;
	if ( val < 0 ) {
 80003b2:	d436      	bmi.n	8000422 <_ZN11USARTSerial10printFloatEfh+0x86>
	}
	return n;
}

uint16_t USARTSerial::printFloat(float val, uint8_t prec) {
	uint16_t n = 0;
 80003b4:	2700      	movs	r7, #0
	if ( val < 0 ) {
		write('-');
		val = -val;
		n++;
	}
	uint32_t intpart = (uint32_t) val;
 80003b6:	eefc 7ac8 	vcvt.u32.f32	s15, s16
	val -= intpart;
	n += printNumber(intpart, DEC);
 80003ba:	220a      	movs	r2, #10
		write('-');
		val = -val;
		n++;
	}
	uint32_t intpart = (uint32_t) val;
	val -= intpart;
 80003bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
	n += printNumber(intpart, DEC);
 80003c0:	4628      	mov	r0, r5
 80003c2:	ee17 1a90 	vmov	r1, s15
		write('-');
		val = -val;
		n++;
	}
	uint32_t intpart = (uint32_t) val;
	val -= intpart;
 80003c6:	ee38 8a47 	vsub.f32	s16, s16, s14
	n += printNumber(intpart, DEC);
 80003ca:	f7ff ffaf 	bl	800032c <_ZN11USARTSerial11printNumberEmh>
	int i;
	if ( val > 0 ) {
 80003ce:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
		val = -val;
		n++;
	}
	uint32_t intpart = (uint32_t) val;
	val -= intpart;
	n += printNumber(intpart, DEC);
 80003d2:	19c7      	adds	r7, r0, r7
	int i;
	if ( val > 0 ) {
 80003d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		val = -val;
		n++;
	}
	uint32_t intpart = (uint32_t) val;
	val -= intpart;
	n += printNumber(intpart, DEC);
 80003d8:	b2bf      	uxth	r7, r7
	int i;
	if ( val > 0 ) {
 80003da:	dc03      	bgt.n	80003e4 <_ZN11USARTSerial10printFloatEfh+0x48>
			val -= (uint32_t)val;
			n++;
		}
	}
	return n;
}
 80003dc:	4638      	mov	r0, r7
 80003de:	ecbd 8b04 	vpop	{d8-d9}
 80003e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t intpart = (uint32_t) val;
	val -= intpart;
	n += printNumber(intpart, DEC);
	int i;
	if ( val > 0 ) {
		write('.');
 80003e4:	4628      	mov	r0, r5
 80003e6:	212e      	movs	r1, #46	; 0x2e
		n++;
 80003e8:	3701      	adds	r7, #1
	uint32_t intpart = (uint32_t) val;
	val -= intpart;
	n += printNumber(intpart, DEC);
	int i;
	if ( val > 0 ) {
		write('.');
 80003ea:	f7ff ff41 	bl	8000270 <_ZN11USARTSerial5writeEt>
		n++;
 80003ee:	b2bf      	uxth	r7, r7
		for(i = 0; i < prec; i++) {
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d0f3      	beq.n	80003dc <_ZN11USARTSerial10printFloatEfh+0x40>
 80003f4:	2400      	movs	r4, #0
			val *= 10;
 80003f6:	eeb2 9a04 	vmov.f32	s18, #36	; 0x24
 80003fa:	ee68 8a09 	vmul.f32	s17, s16, s18
			printNumber((uint32_t)val, DEC);
 80003fe:	220a      	movs	r2, #10
 8000400:	eebc 8ae8 	vcvt.u32.f32	s16, s17
 8000404:	4628      	mov	r0, r5
 8000406:	ee18 1a10 	vmov	r1, s16
 800040a:	f7ff ff8f 	bl	800032c <_ZN11USARTSerial11printNumberEmh>
	n += printNumber(intpart, DEC);
	int i;
	if ( val > 0 ) {
		write('.');
		n++;
		for(i = 0; i < prec; i++) {
 800040e:	3401      	adds	r4, #1
			val *= 10;
			printNumber((uint32_t)val, DEC);
			val -= (uint32_t)val;
 8000410:	eeb8 8a48 	vcvt.f32.u32	s16, s16
	n += printNumber(intpart, DEC);
	int i;
	if ( val > 0 ) {
		write('.');
		n++;
		for(i = 0; i < prec; i++) {
 8000414:	42b4      	cmp	r4, r6
			val *= 10;
			printNumber((uint32_t)val, DEC);
			val -= (uint32_t)val;
 8000416:	ee38 8ac8 	vsub.f32	s16, s17, s16
	n += printNumber(intpart, DEC);
	int i;
	if ( val > 0 ) {
		write('.');
		n++;
		for(i = 0; i < prec; i++) {
 800041a:	dbee      	blt.n	80003fa <_ZN11USARTSerial10printFloatEfh+0x5e>
 800041c:	19bf      	adds	r7, r7, r6
 800041e:	b2bf      	uxth	r7, r7
 8000420:	e7dc      	b.n	80003dc <_ZN11USARTSerial10printFloatEfh+0x40>
}

uint16_t USARTSerial::printFloat(float val, uint8_t prec) {
	uint16_t n = 0;
	if ( val < 0 ) {
		write('-');
 8000422:	212d      	movs	r1, #45	; 0x2d
 8000424:	f7ff ff24 	bl	8000270 <_ZN11USARTSerial5writeEt>
		val = -val;
 8000428:	eeb1 8a48 	vneg.f32	s16, s16
		n++;
 800042c:	2701      	movs	r7, #1
 800042e:	e7c2      	b.n	80003b6 <_ZN11USARTSerial10printFloatEfh+0x1a>

08000430 <_ZN11USARTSerial9availableEv>:
 * @param  none
 * @retval char
 */

uint16_t USARTSerial::available() {
	return rx.count;
 8000430:	6803      	ldr	r3, [r0, #0]
	//if (USART_GetFlagStatus(USART3, USART_FLAG_RXNE) == SET)
	//	return 1;
	//return 0;
}
 8000432:	f8b3 0104 	ldrh.w	r0, [r3, #260]	; 0x104
 8000436:	4770      	bx	lr

08000438 <_ZN11USARTSerial4readEv>:
	return rx3.ringout();
}
*/
uint16_t USARTSerial::read() {
//	return read3();
	return rx.ringout();
 8000438:	6803      	ldr	r3, [r0, #0]
	bool is_full() {
		return (count > 0) && head == tail;
	}

	bool is_empty() {
		return (count == 0) && head == tail;
 800043a:	f8b3 0104 	ldrh.w	r0, [r3, #260]	; 0x104
 800043e:	f8b3 2100 	ldrh.w	r2, [r3, #256]	; 0x100
uint16_t read3() {
	//return USART_ReceiveData(USART3);
	return rx3.ringout();
}
*/
uint16_t USARTSerial::read() {
 8000442:	b410      	push	{r4}
 8000444:	b918      	cbnz	r0, 800044e <_ZN11USARTSerial4readEv+0x16>
 8000446:	f8b3 1102 	ldrh.w	r1, [r3, #258]	; 0x102
 800044a:	4291      	cmp	r1, r2
 800044c:	d009      	beq.n	8000462 <_ZN11USARTSerial4readEv+0x2a>
	}

	uint16 ringout() {
		if ( is_empty() )
			return 0;
		uint16 c = buffer[head++];
 800044e:	1c54      	adds	r4, r2, #1
		head %= RINGBUFFER_SIZE;
		count--;
 8000450:	1e41      	subs	r1, r0, #1

	uint16 ringout() {
		if ( is_empty() )
			return 0;
		uint16 c = buffer[head++];
		head %= RINGBUFFER_SIZE;
 8000452:	f004 047f 	and.w	r4, r4, #127	; 0x7f
	}

	uint16 ringout() {
		if ( is_empty() )
			return 0;
		uint16 c = buffer[head++];
 8000456:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
		head %= RINGBUFFER_SIZE;
 800045a:	f8a3 4100 	strh.w	r4, [r3, #256]	; 0x100
		count--;
 800045e:	f8a3 1104 	strh.w	r1, [r3, #260]	; 0x104
//	return read3();
	return rx.ringout();
}
 8000462:	bc10      	pop	{r4}
 8000464:	4770      	bx	lr
 8000466:	bf00      	nop

08000468 <USART3_IRQHandler>:

// this is the interrupt request handler (IRQ) for ALL USART3 interrupts

void USART3_IRQHandler(void) {
	// check if the USART1 receive interrupt flag was set
	if (USART_GetITStatus(USART3, USART_IT_RXNE)) {
 8000468:	f44f 4090 	mov.w	r0, #18432	; 0x4800
	return rx.ringout();
}

// this is the interrupt request handler (IRQ) for ALL USART3 interrupts

void USART3_IRQHandler(void) {
 800046c:	b510      	push	{r4, lr}
	// check if the USART1 receive interrupt flag was set
	if (USART_GetITStatus(USART3, USART_IT_RXNE)) {
 800046e:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000472:	f240 5125 	movw	r1, #1317	; 0x525
 8000476:	f000 feef 	bl	8001258 <USART_GetITStatus>
 800047a:	2800      	cmp	r0, #0
 800047c:	d127      	bne.n	80004ce <USART3_IRQHandler+0x66>
		rx3.ringin(USART_ReceiveData(USART3));
	}
	if (USART_GetITStatus(USART3, USART_IT_TXE)) {
 800047e:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 8000482:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000486:	f240 7127 	movw	r1, #1831	; 0x727
 800048a:	f000 fee5 	bl	8001258 <USART_GetITStatus>
 800048e:	b1e8      	cbz	r0, 80004cc <USART3_IRQHandler+0x64>
	bool is_full() {
		return (count > 0) && head == tail;
	}

	bool is_empty() {
		return (count == 0) && head == tail;
 8000490:	4b29      	ldr	r3, [pc, #164]	; (8000538 <USART3_IRQHandler+0xd0>)
 8000492:	f8b3 220c 	ldrh.w	r2, [r3, #524]	; 0x20c
 8000496:	f8b3 4208 	ldrh.w	r4, [r3, #520]	; 0x208
 800049a:	b91a      	cbnz	r2, 80004a4 <USART3_IRQHandler+0x3c>
 800049c:	f8b3 120a 	ldrh.w	r1, [r3, #522]	; 0x20a
 80004a0:	42a1      	cmp	r1, r4
 80004a2:	d037      	beq.n	8000514 <USART3_IRQHandler+0xac>
	}

	uint16 ringout() {
		if ( is_empty() )
			return 0;
		uint16 c = buffer[head++];
 80004a4:	eb03 0144 	add.w	r1, r3, r4, lsl #1
		if ( tx3.is_empty() ) {
			USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART3, USART_IT_TXE);
		} else {
			USART_SendData(USART3, tx3.ringout());
 80004a8:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 80004ac:	3401      	adds	r4, #1
 80004ae:	f8b1 1108 	ldrh.w	r1, [r1, #264]	; 0x108
		head %= RINGBUFFER_SIZE;
 80004b2:	f004 047f 	and.w	r4, r4, #127	; 0x7f
		count--;
 80004b6:	3a01      	subs	r2, #1
 80004b8:	f2c4 0000 	movt	r0, #16384	; 0x4000

	uint16 ringout() {
		if ( is_empty() )
			return 0;
		uint16 c = buffer[head++];
		head %= RINGBUFFER_SIZE;
 80004bc:	f8a3 4208 	strh.w	r4, [r3, #520]	; 0x208
		count--;
 80004c0:	f8a3 220c 	strh.w	r2, [r3, #524]	; 0x20c
		}
	}
}
 80004c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (USART_GetITStatus(USART3, USART_IT_TXE)) {
		if ( tx3.is_empty() ) {
			USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART3, USART_IT_TXE);
		} else {
			USART_SendData(USART3, tx3.ringout());
 80004c8:	f000 bdfa 	b.w	80010c0 <USART_SendData>
 80004cc:	bd10      	pop	{r4, pc}
// this is the interrupt request handler (IRQ) for ALL USART3 interrupts

void USART3_IRQHandler(void) {
	// check if the USART1 receive interrupt flag was set
	if (USART_GetITStatus(USART3, USART_IT_RXNE)) {
		rx3.ringin(USART_ReceiveData(USART3));
 80004ce:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 80004d2:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80004d6:	f000 fdf7 	bl	80010c8 <USART_ReceiveData>
			return 0;
		return buffer[head];
	}

	bool is_full() {
		return (count > 0) && head == tail;
 80004da:	4b17      	ldr	r3, [pc, #92]	; (8000538 <USART3_IRQHandler+0xd0>)
 80004dc:	f8b3 2104 	ldrh.w	r2, [r3, #260]	; 0x104
 80004e0:	b962      	cbnz	r2, 80004fc <USART3_IRQHandler+0x94>
	uint16 ringin(uint16 c) {
		if ( is_full() ) {
			head++;  head %= RINGBUFFER_SIZE;
			// buffer over run occurred!
		} else
			count++;
 80004e2:	3201      	adds	r2, #1
 80004e4:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
		buffer[tail++] = c;
 80004e8:	f8b3 2102 	ldrh.w	r2, [r3, #258]	; 0x102
 80004ec:	1c51      	adds	r1, r2, #1
		tail %= RINGBUFFER_SIZE;
 80004ee:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		if ( is_full() ) {
			head++;  head %= RINGBUFFER_SIZE;
			// buffer over run occurred!
		} else
			count++;
		buffer[tail++] = c;
 80004f2:	f823 0012 	strh.w	r0, [r3, r2, lsl #1]
		tail %= RINGBUFFER_SIZE;
 80004f6:	f8a3 1102 	strh.w	r1, [r3, #258]	; 0x102
 80004fa:	e7c0      	b.n	800047e <USART3_IRQHandler+0x16>
			return 0;
		return buffer[head];
	}

	bool is_full() {
		return (count > 0) && head == tail;
 80004fc:	f8b3 4100 	ldrh.w	r4, [r3, #256]	; 0x100
 8000500:	f8b3 1102 	ldrh.w	r1, [r3, #258]	; 0x102
 8000504:	42a1      	cmp	r1, r4
 8000506:	d1ec      	bne.n	80004e2 <USART3_IRQHandler+0x7a>
		count = 0;
	}

	uint16 ringin(uint16 c) {
		if ( is_full() ) {
			head++;  head %= RINGBUFFER_SIZE;
 8000508:	3101      	adds	r1, #1
 800050a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800050e:	f8a3 1100 	strh.w	r1, [r3, #256]	; 0x100
 8000512:	e7e9      	b.n	80004e8 <USART3_IRQHandler+0x80>
	}
	if (USART_GetITStatus(USART3, USART_IT_TXE)) {
		if ( tx3.is_empty() ) {
			USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) DISABLE);
 8000514:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 8000518:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800051c:	f240 7127 	movw	r1, #1831	; 0x727
 8000520:	f000 fe74 	bl	800120c <USART_ITConfig>
			USART_ClearITPendingBit(USART3, USART_IT_TXE);
 8000524:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 8000528:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800052c:	f240 7127 	movw	r1, #1831	; 0x727
		} else {
			USART_SendData(USART3, tx3.ringout());
		}
	}
}
 8000530:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		rx3.ringin(USART_ReceiveData(USART3));
	}
	if (USART_GetITStatus(USART3, USART_IT_TXE)) {
		if ( tx3.is_empty() ) {
			USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART3, USART_IT_TXE);
 8000534:	f000 beb4 	b.w	80012a0 <USART_ClearITPendingBit>
 8000538:	20000098 	.word	0x20000098

0800053c <pinMode>:
 static const uint8_t MISO = 12;
 static const uint8_t SCK  = 13; // PB7
 static const uint8_t LED_BUILTIN = 14;
 */

void pinMode(uint32_t portpin, GPIOMode_TypeDef mode) {
 800053c:	b5f0      	push	{r4, r5, r6, r7, lr}

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(GPIOPeriph[portpin>>16 & 0xf], ENABLE);
 800053e:	f240 0400 	movw	r4, #0
 8000542:	f3c0 4603 	ubfx	r6, r0, #16, #4
 8000546:	f2c2 0400 	movt	r4, #8192	; 0x2000
 static const uint8_t MISO = 12;
 static const uint8_t SCK  = 13; // PB7
 static const uint8_t LED_BUILTIN = 14;
 */

void pinMode(uint32_t portpin, GPIOMode_TypeDef mode) {
 800054a:	b083      	sub	sp, #12
 800054c:	460f      	mov	r7, r1
 800054e:	4605      	mov	r5, r0

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(GPIOPeriph[portpin>>16 & 0xf], ENABLE);
 8000550:	2101      	movs	r1, #1
 8000552:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	//
	GPIO_Init(GPIOPort[portpin >>16 & 0x0f], &GPIO_InitStructure);
 8000556:	eb04 0486 	add.w	r4, r4, r6, lsl #2

void pinMode(uint32_t portpin, GPIOMode_TypeDef mode) {

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(GPIOPeriph[portpin>>16 & 0xf], ENABLE);
 800055a:	f000 fb71 	bl	8000c40 <RCC_AHB1PeriphClockCmd>

	GPIO_InitStructure.GPIO_Pin = portpin & 0xffff;
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800055e:	2300      	movs	r3, #0

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(GPIOPeriph[portpin>>16 & 0xf], ENABLE);

	GPIO_InitStructure.GPIO_Pin = portpin & 0xffff;
 8000560:	b2ad      	uxth	r5, r5
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000562:	f88d 3006 	strb.w	r3, [sp, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000566:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	//
	GPIO_Init(GPIOPort[portpin >>16 & 0x0f], &GPIO_InitStructure);
 800056a:	6aa0      	ldr	r0, [r4, #40]	; 0x28

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(GPIOPeriph[portpin>>16 & 0xf], ENABLE);

	GPIO_InitStructure.GPIO_Pin = portpin & 0xffff;
 800056c:	9500      	str	r5, [sp, #0]
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800056e:	2302      	movs	r3, #2
	//
	GPIO_Init(GPIOPort[portpin >>16 & 0x0f], &GPIO_InitStructure);
 8000570:	4669      	mov	r1, sp
	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(GPIOPeriph[portpin>>16 & 0xf], ENABLE);

	GPIO_InitStructure.GPIO_Pin = portpin & 0xffff;
	GPIO_InitStructure.GPIO_Mode = mode;
 8000572:	f88d 7004 	strb.w	r7, [sp, #4]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000576:	f88d 3005 	strb.w	r3, [sp, #5]
	//
	GPIO_Init(GPIOPort[portpin >>16 & 0x0f], &GPIO_InitStructure);
 800057a:	f000 f94d 	bl	8000818 <GPIO_Init>
}
 800057e:	b003      	add	sp, #12
 8000580:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000582:	bf00      	nop

08000584 <GPIOMode>:


void GPIOMode(uint32_t periph, GPIO_TypeDef * port, uint16_t pins,
		GPIOMode_TypeDef mode, GPIOSpeed_TypeDef clk, GPIOOType_TypeDef otype,
		GPIOPuPd_TypeDef pupd) {
 8000584:	b570      	push	{r4, r5, r6, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	460c      	mov	r4, r1

	GPIO_InitTypeDef GPIO_InitStructure;
	// wake up the port
	RCC_AHB1PeriphClockCmd(periph, ENABLE);
 800058a:	2101      	movs	r1, #1
}


void GPIOMode(uint32_t periph, GPIO_TypeDef * port, uint16_t pins,
		GPIOMode_TypeDef mode, GPIOSpeed_TypeDef clk, GPIOOType_TypeDef otype,
		GPIOPuPd_TypeDef pupd) {
 800058c:	461e      	mov	r6, r3
 800058e:	4615      	mov	r5, r2

	GPIO_InitTypeDef GPIO_InitStructure;
	// wake up the port
	RCC_AHB1PeriphClockCmd(periph, ENABLE);
 8000590:	f000 fb56 	bl	8000c40 <RCC_AHB1PeriphClockCmd>
	//
	GPIO_InitStructure.GPIO_Pin = pins;
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = otype;
 8000594:	f89d 301c 	ldrb.w	r3, [sp, #28]

	GPIO_InitTypeDef GPIO_InitStructure;
	// wake up the port
	RCC_AHB1PeriphClockCmd(periph, ENABLE);
	//
	GPIO_InitStructure.GPIO_Pin = pins;
 8000598:	9500      	str	r5, [sp, #0]
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = otype;
 800059a:	f88d 3006 	strb.w	r3, [sp, #6]
	GPIO_InitStructure.GPIO_PuPd = pupd;
 800059e:	f89d 3020 	ldrb.w	r3, [sp, #32]
	GPIO_InitTypeDef GPIO_InitStructure;
	// wake up the port
	RCC_AHB1PeriphClockCmd(periph, ENABLE);
	//
	GPIO_InitStructure.GPIO_Pin = pins;
	GPIO_InitStructure.GPIO_Mode = mode;
 80005a2:	f88d 6004 	strb.w	r6, [sp, #4]
	GPIO_InitStructure.GPIO_OType = otype;
	GPIO_InitStructure.GPIO_PuPd = pupd;
 80005a6:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_InitStructure.GPIO_Speed = clk;
 80005aa:	f89d 3018 	ldrb.w	r3, [sp, #24]
	//
	GPIO_Init(port, &GPIO_InitStructure);
 80005ae:	4620      	mov	r0, r4
 80005b0:	4669      	mov	r1, sp
	//
	GPIO_InitStructure.GPIO_Pin = pins;
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = otype;
	GPIO_InitStructure.GPIO_PuPd = pupd;
	GPIO_InitStructure.GPIO_Speed = clk;
 80005b2:	f88d 3005 	strb.w	r3, [sp, #5]
	//
	GPIO_Init(port, &GPIO_InitStructure);
 80005b6:	f000 f92f 	bl	8000818 <GPIO_Init>
}
 80005ba:	b002      	add	sp, #8
 80005bc:	bd70      	pop	{r4, r5, r6, pc}
 80005be:	bf00      	nop

080005c0 <digitalWrite>:
 }
 */
void digitalWrite(uint32_t portpin, uint8_t bit) {
	if (bit) {
		//? Bit_SET : Bit_RESET ));
		GPIO_SetBits(GPIOPort[portpin >>16 & 0x0f], portpin & 0xffff);
 80005c0:	4b06      	ldr	r3, [pc, #24]	; (80005dc <digitalWrite+0x1c>)
 80005c2:	f3c0 4203 	ubfx	r2, r0, #16, #4
 80005c6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
/*
 static void turnOffPWM(uint8_t timer) {
 }
 */
void digitalWrite(uint32_t portpin, uint8_t bit) {
	if (bit) {
 80005ca:	b919      	cbnz	r1, 80005d4 <digitalWrite+0x14>
		//? Bit_SET : Bit_RESET ));
		GPIO_SetBits(GPIOPort[portpin >>16 & 0x0f], portpin & 0xffff);
	} else {
		GPIO_ResetBits(GPIOPort[portpin >>16 & 0x0f], portpin & 0xffff);
 80005cc:	b281      	uxth	r1, r0
 80005ce:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80005d0:	f000 b9b0 	b.w	8000934 <GPIO_ResetBits>
 }
 */
void digitalWrite(uint32_t portpin, uint8_t bit) {
	if (bit) {
		//? Bit_SET : Bit_RESET ));
		GPIO_SetBits(GPIOPort[portpin >>16 & 0x0f], portpin & 0xffff);
 80005d4:	b281      	uxth	r1, r0
 80005d6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80005d8:	f000 b9aa 	b.w	8000930 <GPIO_SetBits>
 80005dc:	20000000 	.word	0x20000000

080005e0 <portWrite>:
		GPIO_ResetBits(GPIOPort[portpin >>16 & 0x0f], portpin & 0xffff);
	}
}

void portWrite(GPIO_TypeDef * port, uint16_t bits) {
	GPIO_Write(port, bits);
 80005e0:	f000 b9b0 	b.w	8000944 <GPIO_Write>

080005e4 <digitalRead>:
}

uint8_t digitalRead(GPIO_TypeDef * port, uint16_t pin) {
	uint8_t mode = (port->MODER) >> (pin * 2);
 80005e4:	6802      	ldr	r2, [r0, #0]

void portWrite(GPIO_TypeDef * port, uint16_t bits) {
	GPIO_Write(port, bits);
}

uint8_t digitalRead(GPIO_TypeDef * port, uint16_t pin) {
 80005e6:	b508      	push	{r3, lr}
	uint8_t mode = (port->MODER) >> (pin * 2);
 80005e8:	004b      	lsls	r3, r1, #1
 80005ea:	fa32 f303 	lsrs.w	r3, r2, r3
	if (mode == GPIO_Mode_OUT)
 80005ee:	b2db      	uxtb	r3, r3
 80005f0:	2b01      	cmp	r3, #1
 80005f2:	d005      	beq.n	8000600 <digitalRead+0x1c>
		return (GPIO_ReadOutputDataBit(port, pin) ? SET : RESET);
	return (GPIO_ReadInputDataBit(port, pin) ? SET : RESET);
 80005f4:	f000 f988 	bl	8000908 <GPIO_ReadInputDataBit>
 80005f8:	3000      	adds	r0, #0
 80005fa:	bf18      	it	ne
 80005fc:	2001      	movne	r0, #1
}
 80005fe:	bd08      	pop	{r3, pc}
}

uint8_t digitalRead(GPIO_TypeDef * port, uint16_t pin) {
	uint8_t mode = (port->MODER) >> (pin * 2);
	if (mode == GPIO_Mode_OUT)
		return (GPIO_ReadOutputDataBit(port, pin) ? SET : RESET);
 8000600:	f000 f98c 	bl	800091c <GPIO_ReadOutputDataBit>
 8000604:	3000      	adds	r0, #0
 8000606:	bf18      	it	ne
 8000608:	2001      	movne	r0, #1
 800060a:	bd08      	pop	{r3, pc}

0800060c <NVIC_PriorityGroupConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 800060c:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8000610:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8000614:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000618:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 800061c:	60d8      	str	r0, [r3, #12]
}
 800061e:	4770      	bx	lr

08000620 <NVIC_Init>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000620:	78c3      	ldrb	r3, [r0, #3]
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000622:	b430      	push	{r4, r5}
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000624:	b97b      	cbnz	r3, 8000646 <NVIC_Init+0x26>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000626:	7802      	ldrb	r2, [r0, #0]
 8000628:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 800062c:	0951      	lsrs	r1, r2, #5
 800062e:	f2ce 0300 	movt	r3, #57344	; 0xe000
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000632:	f002 021f 	and.w	r2, r2, #31
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000636:	3120      	adds	r1, #32
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000638:	2001      	movs	r0, #1
 800063a:	fa10 f202 	lsls.w	r2, r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800063e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000642:	bc30      	pop	{r4, r5}
 8000644:	4770      	bx	lr
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000646:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800064a:	f2ce 0300 	movt	r3, #57344	; 0xe000
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800064e:	7845      	ldrb	r5, [r0, #1]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000650:	68da      	ldr	r2, [r3, #12]
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000652:	7884      	ldrb	r4, [r0, #2]
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000654:	7803      	ldrb	r3, [r0, #0]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000656:	43d2      	mvns	r2, r2
 8000658:	f3c2 2202 	ubfx	r2, r2, #8, #3
    tmppre = (0x4 - tmppriority);
 800065c:	f1c2 0104 	rsb	r1, r2, #4
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000660:	b2c9      	uxtb	r1, r1
 8000662:	fa15 f101 	lsls.w	r1, r5, r1
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
 8000666:	250f      	movs	r5, #15
 8000668:	fa55 f202 	asrs.w	r2, r5, r2

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800066c:	b2c9      	uxtb	r1, r1
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 800066e:	4022      	ands	r2, r4
 8000670:	430a      	orrs	r2, r1
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000672:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000676:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
        
    tmppriority = tmppriority << 0x04;
 800067a:	0112      	lsls	r2, r2, #4
 800067c:	b2d2      	uxtb	r2, r2
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800067e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000682:	7802      	ldrb	r2, [r0, #0]
    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000684:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000688:	0951      	lsrs	r1, r2, #5
    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800068a:	f2ce 0300 	movt	r3, #57344	; 0xe000
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800068e:	f002 021f 	and.w	r2, r2, #31
 8000692:	2001      	movs	r0, #1
 8000694:	fa10 f202 	lsls.w	r2, r0, r2
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000698:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800069c:	e7d1      	b.n	8000642 <NVIC_Init+0x22>
 800069e:	bf00      	nop

080006a0 <NVIC_SetVectorTable>:
{ 
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 80006a0:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
 80006a4:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 80006a8:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 80006ac:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80006b0:	4301      	orrs	r1, r0
 80006b2:	6099      	str	r1, [r3, #8]
}
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop

080006b8 <NVIC_SystemLPConfig>:
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
  {
    SCB->SCR |= LowPowerMode;
 80006b8:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 80006bc:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80006c0:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 80006c2:	b919      	cbnz	r1, 80006cc <NVIC_SystemLPConfig+0x14>
  {
    SCB->SCR |= LowPowerMode;
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 80006c4:	ea22 0000 	bic.w	r0, r2, r0
 80006c8:	6118      	str	r0, [r3, #16]
 80006ca:	4770      	bx	lr
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
  {
    SCB->SCR |= LowPowerMode;
 80006cc:	4310      	orrs	r0, r2
 80006ce:	6118      	str	r0, [r3, #16]
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop

080006d4 <SysTick_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 80006d4:	f24e 0310 	movw	r3, #57360	; 0xe010
 80006d8:	f2ce 0300 	movt	r3, #57344	; 0xe000
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 80006dc:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 80006de:	681a      	ldr	r2, [r3, #0]
 80006e0:	bf0c      	ite	eq
 80006e2:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 80006e6:	f022 0204 	bicne.w	r2, r2, #4
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop

080006f0 <GPIO_DeInit>:
  * @note   By default, The GPIO pins are configured in input floating mode (except JTAG pins).
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 80006f0:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
 80006f2:	2300      	movs	r3, #0
 80006f4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80006f8:	4298      	cmp	r0, r3
 80006fa:	d03c      	beq.n	8000776 <GPIO_DeInit+0x86>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
  }
  else if (GPIOx == GPIOB)
 80006fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000700:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000704:	4298      	cmp	r0, r3
 8000706:	d040      	beq.n	800078a <GPIO_DeInit+0x9a>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
  }
  else if (GPIOx == GPIOC)
 8000708:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800070c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000710:	4298      	cmp	r0, r3
 8000712:	d044      	beq.n	800079e <GPIO_DeInit+0xae>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
  }
  else if (GPIOx == GPIOD)
 8000714:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000718:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800071c:	4298      	cmp	r0, r3
 800071e:	d048      	beq.n	80007b2 <GPIO_DeInit+0xc2>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
  }
  else if (GPIOx == GPIOE)
 8000720:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000724:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000728:	4298      	cmp	r0, r3
 800072a:	d04c      	beq.n	80007c6 <GPIO_DeInit+0xd6>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
  }
  else if (GPIOx == GPIOF)
 800072c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000730:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000734:	4298      	cmp	r0, r3
 8000736:	d050      	beq.n	80007da <GPIO_DeInit+0xea>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
  }
  else if (GPIOx == GPIOG)
 8000738:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800073c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000740:	4298      	cmp	r0, r3
 8000742:	d054      	beq.n	80007ee <GPIO_DeInit+0xfe>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
  }
  else if (GPIOx == GPIOH)
 8000744:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000748:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800074c:	4298      	cmp	r0, r3
 800074e:	d058      	beq.n	8000802 <GPIO_DeInit+0x112>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
  }
  else
  {
    if (GPIOx == GPIOI)
 8000750:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000754:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000758:	4298      	cmp	r0, r3
 800075a:	d000      	beq.n	800075e <GPIO_DeInit+0x6e>
 800075c:	bd08      	pop	{r3, pc}
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 800075e:	2101      	movs	r1, #1
 8000760:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000764:	f000 fab2 	bl	8000ccc <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 8000768:	f44f 7080 	mov.w	r0, #256	; 0x100
 800076c:	2100      	movs	r1, #0
    }
  }
}
 800076e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (GPIOx == GPIOI)
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 8000772:	f000 baab 	b.w	8000ccc <RCC_AHB1PeriphResetCmd>
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8000776:	2001      	movs	r0, #1
 8000778:	4601      	mov	r1, r0
 800077a:	f000 faa7 	bl	8000ccc <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 800077e:	2001      	movs	r0, #1
 8000780:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 8000782:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 8000786:	f000 baa1 	b.w	8000ccc <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOB)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 800078a:	2002      	movs	r0, #2
 800078c:	2101      	movs	r1, #1
 800078e:	f000 fa9d 	bl	8000ccc <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 8000792:	2002      	movs	r0, #2
 8000794:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 8000796:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
  }
  else if (GPIOx == GPIOB)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 800079a:	f000 ba97 	b.w	8000ccc <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOC)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 800079e:	2004      	movs	r0, #4
 80007a0:	2101      	movs	r1, #1
 80007a2:	f000 fa93 	bl	8000ccc <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 80007a6:	2004      	movs	r0, #4
 80007a8:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 80007aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
  }
  else if (GPIOx == GPIOC)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 80007ae:	f000 ba8d 	b.w	8000ccc <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOD)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 80007b2:	2008      	movs	r0, #8
 80007b4:	2101      	movs	r1, #1
 80007b6:	f000 fa89 	bl	8000ccc <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 80007ba:	2008      	movs	r0, #8
 80007bc:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 80007be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
  }
  else if (GPIOx == GPIOD)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 80007c2:	f000 ba83 	b.w	8000ccc <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOE)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 80007c6:	2010      	movs	r0, #16
 80007c8:	2101      	movs	r1, #1
 80007ca:	f000 fa7f 	bl	8000ccc <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 80007ce:	2010      	movs	r0, #16
 80007d0:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 80007d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
  }
  else if (GPIOx == GPIOE)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 80007d6:	f000 ba79 	b.w	8000ccc <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOF)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 80007da:	2020      	movs	r0, #32
 80007dc:	2101      	movs	r1, #1
 80007de:	f000 fa75 	bl	8000ccc <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 80007e2:	2020      	movs	r0, #32
 80007e4:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 80007e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
  }
  else if (GPIOx == GPIOF)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 80007ea:	f000 ba6f 	b.w	8000ccc <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOG)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 80007ee:	2040      	movs	r0, #64	; 0x40
 80007f0:	2101      	movs	r1, #1
 80007f2:	f000 fa6b 	bl	8000ccc <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 80007f6:	2040      	movs	r0, #64	; 0x40
 80007f8:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 80007fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
  }
  else if (GPIOx == GPIOG)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 80007fe:	f000 ba65 	b.w	8000ccc <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOH)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 8000802:	2080      	movs	r0, #128	; 0x80
 8000804:	2101      	movs	r1, #1
 8000806:	f000 fa61 	bl	8000ccc <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 800080a:	2080      	movs	r0, #128	; 0x80
 800080c:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 800080e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
  }
  else if (GPIOx == GPIOH)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 8000812:	f000 ba5b 	b.w	8000ccc <RCC_AHB1PeriphResetCmd>
 8000816:	bf00      	nop

08000818 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000818:	2300      	movs	r3, #0
 800081a:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800081e:	680a      	ldr	r2, [r1, #0]
 8000820:	461c      	mov	r4, r3
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000822:	2701      	movs	r7, #1
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000824:	f04f 0803 	mov.w	r8, #3
 8000828:	e003      	b.n	8000832 <GPIO_Init+0x1a>
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800082a:	3401      	adds	r4, #1
 800082c:	3302      	adds	r3, #2
 800082e:	2c10      	cmp	r4, #16
 8000830:	d02b      	beq.n	800088a <GPIO_Init+0x72>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000832:	fa17 f504 	lsls.w	r5, r7, r4
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000836:	ea05 0602 	and.w	r6, r5, r2

    if (currentpin == pos)
 800083a:	42ae      	cmp	r6, r5
 800083c:	d1f5      	bne.n	800082a <GPIO_Init+0x12>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800083e:	f8d0 9000 	ldr.w	r9, [r0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000842:	f891 c004 	ldrb.w	ip, [r1, #4]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000846:	fa08 f503 	lsl.w	r5, r8, r3
 800084a:	43ed      	mvns	r5, r5
 800084c:	ea05 0909 	and.w	r9, r5, r9
 8000850:	f8c0 9000 	str.w	r9, [r0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000854:	f8d0 9000 	ldr.w	r9, [r0]
 8000858:	fa0c fa03 	lsl.w	sl, ip, r3

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800085c:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000860:	ea4a 0909 	orr.w	r9, sl, r9

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000864:	f1bc 0f01 	cmp.w	ip, #1
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000868:	f8c0 9000 	str.w	r9, [r0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800086c:	d910      	bls.n	8000890 <GPIO_Init+0x78>
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 800086e:	68c6      	ldr	r6, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000870:	f891 c007 	ldrb.w	ip, [r1, #7]
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000874:	4035      	ands	r5, r6
 8000876:	60c5      	str	r5, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000878:	68c6      	ldr	r6, [r0, #12]
 800087a:	fa0c f503 	lsl.w	r5, ip, r3
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800087e:	3401      	adds	r4, #1
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000880:	4335      	orrs	r5, r6
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000882:	3302      	adds	r3, #2
 8000884:	2c10      	cmp	r4, #16
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000886:	60c5      	str	r5, [r0, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000888:	d1d3      	bne.n	8000832 <GPIO_Init+0x1a>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 800088a:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 800088e:	4770      	bx	lr
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000890:	f8d0 a008 	ldr.w	sl, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000894:	f891 9005 	ldrb.w	r9, [r1, #5]
        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000898:	f891 c006 	ldrb.w	ip, [r1, #6]
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800089c:	ea05 0a0a 	and.w	sl, r5, sl
 80008a0:	f8c0 a008 	str.w	sl, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80008a4:	f8d0 a008 	ldr.w	sl, [r0, #8]
 80008a8:	fa09 f903 	lsl.w	r9, r9, r3
 80008ac:	ea49 090a 	orr.w	r9, r9, sl
 80008b0:	f8c0 9008 	str.w	r9, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80008b4:	f8d0 9004 	ldr.w	r9, [r0, #4]
 80008b8:	ea29 0606 	bic.w	r6, r9, r6
 80008bc:	6046      	str	r6, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80008be:	6846      	ldr	r6, [r0, #4]
 80008c0:	fa0c fc04 	lsl.w	ip, ip, r4
 80008c4:	fa1f fc8c 	uxth.w	ip, ip
 80008c8:	ea4c 0606 	orr.w	r6, ip, r6
 80008cc:	6046      	str	r6, [r0, #4]
 80008ce:	e7ce      	b.n	800086e <GPIO_Init+0x56>

080008d0 <GPIO_StructInit>:
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 80008d0:	2300      	movs	r3, #0
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 80008d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008d6:	6002      	str	r2, [r0, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 80008d8:	7103      	strb	r3, [r0, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 80008da:	7143      	strb	r3, [r0, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 80008dc:	7183      	strb	r3, [r0, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 80008de:	71c3      	strb	r3, [r0, #7]
}
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop

080008e4 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80008e4:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0x00010000;
 80008e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008ea:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
 80008ec:	9b01      	ldr	r3, [sp, #4]
 80008ee:	430b      	orrs	r3, r1
 80008f0:	9301      	str	r3, [sp, #4]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 80008f2:	9b01      	ldr	r3, [sp, #4]
 80008f4:	61c3      	str	r3, [r0, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 80008f6:	61c1      	str	r1, [r0, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 80008f8:	9b01      	ldr	r3, [sp, #4]
 80008fa:	61c3      	str	r3, [r0, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 80008fc:	69c3      	ldr	r3, [r0, #28]
 80008fe:	9301      	str	r3, [sp, #4]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8000900:	69c3      	ldr	r3, [r0, #28]
 8000902:	9301      	str	r3, [sp, #4]
}
 8000904:	b002      	add	sp, #8
 8000906:	4770      	bx	lr

08000908 <GPIO_ReadInputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000908:	6903      	ldr	r3, [r0, #16]
  {
    bitstatus = (uint8_t)Bit_SET;
 800090a:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 800090c:	bf0c      	ite	eq
 800090e:	2000      	moveq	r0, #0
 8000910:	2001      	movne	r0, #1
 8000912:	4770      	bx	lr

08000914 <GPIO_ReadInputData>:
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 8000914:	6900      	ldr	r0, [r0, #16]
}
 8000916:	b280      	uxth	r0, r0
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop

0800091c <GPIO_ReadOutputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 800091c:	6943      	ldr	r3, [r0, #20]
  {
    bitstatus = (uint8_t)Bit_SET;
 800091e:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 8000920:	bf0c      	ite	eq
 8000922:	2000      	moveq	r0, #0
 8000924:	2001      	movne	r0, #1
 8000926:	4770      	bx	lr

08000928 <GPIO_ReadOutputData>:
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
 8000928:	6940      	ldr	r0, [r0, #20]
}
 800092a:	b280      	uxth	r0, r0
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop

08000930 <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8000930:	8301      	strh	r1, [r0, #24]
}
 8000932:	4770      	bx	lr

08000934 <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8000934:	8341      	strh	r1, [r0, #26]
}
 8000936:	4770      	bx	lr

08000938 <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 8000938:	b90a      	cbnz	r2, 800093e <GPIO_WriteBit+0x6>
  {
    GPIOx->BSRRL = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 800093a:	8341      	strh	r1, [r0, #26]
 800093c:	4770      	bx	lr
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
  {
    GPIOx->BSRRL = GPIO_Pin;
 800093e:	8301      	strh	r1, [r0, #24]
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop

08000944 <GPIO_Write>:
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 8000944:	6141      	str	r1, [r0, #20]
}
 8000946:	4770      	bx	lr

08000948 <GPIO_ToggleBits>:
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 8000948:	6943      	ldr	r3, [r0, #20]
 800094a:	404b      	eors	r3, r1
 800094c:	6143      	str	r3, [r0, #20]
}
 800094e:	4770      	bx	lr

08000950 <GPIO_PinAFConfig>:
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000950:	08cb      	lsrs	r3, r1, #3
 8000952:	3308      	adds	r3, #8
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000954:	f001 0107 	and.w	r1, r1, #7
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000958:	b430      	push	{r4, r5}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800095a:	0089      	lsls	r1, r1, #2
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800095c:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
 8000960:	240f      	movs	r4, #15
 8000962:	408c      	lsls	r4, r1
 8000964:	ea25 0404 	bic.w	r4, r5, r4
 8000968:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800096c:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000970:	fa12 f101 	lsls.w	r1, r2, r1
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000974:	430c      	orrs	r4, r1
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000976:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
}
 800097a:	bc30      	pop	{r4, r5}
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop

08000980 <RCC_DeInit>:
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000980:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000984:	f2c4 0302 	movt	r3, #16386	; 0x4002

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000988:	2200      	movs	r2, #0
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800098a:	6819      	ldr	r1, [r3, #0]
 800098c:	f041 0101 	orr.w	r1, r1, #1
 8000990:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000992:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000994:	6818      	ldr	r0, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000996:	f243 0110 	movw	r1, #12304	; 0x3010

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800099a:	f020 7084 	bic.w	r0, r0, #17301504	; 0x1080000

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800099e:	f2c2 4100 	movt	r1, #9216	; 0x2400

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80009a2:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 80009a6:	6018      	str	r0, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80009a8:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80009aa:	6819      	ldr	r1, [r3, #0]
 80009ac:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 80009b0:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80009b2:	60da      	str	r2, [r3, #12]
}
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <RCC_HSEConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 80009b8:	f643 0302 	movw	r3, #14338	; 0x3802
 80009bc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80009c0:	2200      	movs	r2, #0
 80009c2:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 80009c4:	7018      	strb	r0, [r3, #0]
}
 80009c6:	4770      	bx	lr

080009c8 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 80009c8:	b082      	sub	sp, #8

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 80009ca:	f44f 5160 	mov.w	r1, #14336	; 0x3800
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
  __IO uint32_t startupcounter = 0;
 80009ce:	2300      	movs	r3, #0
 80009d0:	9301      	str	r3, [sp, #4]

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 80009d2:	f2c4 0102 	movt	r1, #16386	; 0x4002
 80009d6:	680a      	ldr	r2, [r1, #0]
  FlagStatus hsestatus = RESET;
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    startupcounter++;
 80009d8:	9b01      	ldr	r3, [sp, #4]
 80009da:	3301      	adds	r3, #1
 80009dc:	9301      	str	r3, [sp, #4]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 80009de:	9b01      	ldr	r3, [sp, #4]
 80009e0:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80009e4:	d001      	beq.n	80009ea <RCC_WaitForHSEStartUp+0x22>
 80009e6:	0393      	lsls	r3, r2, #14
 80009e8:	d5f5      	bpl.n	80009d6 <RCC_WaitForHSEStartUp+0xe>

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 80009ea:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80009ee:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80009f2:	6818      	ldr	r0, [r3, #0]
  else
  {
    status = ERROR;
  }
  return (status);
}
 80009f4:	f3c0 4040 	ubfx	r0, r0, #17, #1
 80009f8:	b002      	add	sp, #8
 80009fa:	4770      	bx	lr

080009fc <RCC_AdjustHSICalibrationValue>:
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
 80009fc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000a00:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000a04:	681a      	ldr	r2, [r3, #0]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 8000a06:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 8000a0a:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3

  /* Store the new value */
  RCC->CR = tmpreg;
 8000a0e:	601a      	str	r2, [r3, #0]
}
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <RCC_HSICmd>:
void RCC_HSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 8000a14:	2300      	movs	r3, #0
 8000a16:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8000a1a:	6018      	str	r0, [r3, #0]
}
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop

08000a20 <RCC_LSEConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8000a20:	f643 0370 	movw	r3, #14448	; 0x3870
 8000a24:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000a28:	2200      	movs	r2, #0

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 8000a2a:	2801      	cmp	r0, #1
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8000a2c:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8000a2e:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 8000a30:	d004      	beq.n	8000a3c <RCC_LSEConfig+0x1c>
 8000a32:	2804      	cmp	r0, #4
 8000a34:	d101      	bne.n	8000a3a <RCC_LSEConfig+0x1a>
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
      break;
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 8000a36:	2205      	movs	r2, #5
 8000a38:	701a      	strb	r2, [r3, #0]
 8000a3a:	4770      	bx	lr
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 8000a3c:	7018      	strb	r0, [r3, #0]
      break;
 8000a3e:	4770      	bx	lr

08000a40 <RCC_LSICmd>:
void RCC_LSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 8000a40:	f44f 6368 	mov.w	r3, #3712	; 0xe80
 8000a44:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8000a48:	6018      	str	r0, [r3, #0]
}
 8000a4a:	4770      	bx	lr

08000a4c <RCC_PLLConfig>:
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 8000a4c:	4301      	orrs	r1, r0
 8000a4e:	ea41 1282 	orr.w	r2, r1, r2, lsl #6
 8000a52:	9900      	ldr	r1, [sp, #0]
 8000a54:	085b      	lsrs	r3, r3, #1
 8000a56:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 8000a5a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000a5e:	3b01      	subs	r3, #1
 8000a60:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000a64:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8000a68:	6042      	str	r2, [r0, #4]
                 (PLLQ << 24);
}
 8000a6a:	4770      	bx	lr

08000a6c <RCC_PLLCmd>:
  */
void RCC_PLLCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 8000a6c:	2360      	movs	r3, #96	; 0x60
 8000a6e:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8000a72:	6018      	str	r0, [r3, #0]
}
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <RCC_PLLI2SConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
 8000a78:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000a7c:	0180      	lsls	r0, r0, #6
 8000a7e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000a82:	ea40 7101 	orr.w	r1, r0, r1, lsl #28
 8000a86:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
}
 8000a8a:	4770      	bx	lr

08000a8c <RCC_PLLI2SCmd>:
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 8000a8c:	2368      	movs	r3, #104	; 0x68
 8000a8e:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8000a92:	6018      	str	r0, [r3, #0]
}
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <RCC_ClockSecuritySystemCmd>:
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 8000a98:	234c      	movs	r3, #76	; 0x4c
 8000a9a:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8000a9e:	6018      	str	r0, [r3, #0]
}
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop

08000aa4 <RCC_MCO1Config>:
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
 8000aa4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000aa8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000aac:	689a      	ldr	r2, [r3, #8]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
 8000aae:	f022 62ec 	bic.w	r2, r2, #123731968	; 0x7600000

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 8000ab2:	4302      	orrs	r2, r0
 8000ab4:	430a      	orrs	r2, r1

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 8000ab6:	609a      	str	r2, [r3, #8]
}
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <RCC_MCO2Config>:
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
 8000abc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000ac0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000ac4:	689a      	ldr	r2, [r3, #8]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
 8000ac6:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 8000aca:	4302      	orrs	r2, r0
 8000acc:	430a      	orrs	r2, r1

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 8000ace:	609a      	str	r2, [r3, #8]
}
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <RCC_SYSCLKConfig>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 8000ad4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000ad8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000adc:	689a      	ldr	r2, [r3, #8]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 8000ade:	f022 0203 	bic.w	r2, r2, #3

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8000ae2:	4302      	orrs	r2, r0

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000ae4:	609a      	str	r2, [r3, #8]
}
 8000ae6:	4770      	bx	lr

08000ae8 <RCC_GetSYSCLKSource>:
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 8000ae8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000aec:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000af0:	6898      	ldr	r0, [r3, #8]
}
 8000af2:	f000 000c 	and.w	r0, r0, #12
 8000af6:	4770      	bx	lr

08000af8 <RCC_HCLKConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 8000af8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000afc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000b00:	689a      	ldr	r2, [r3, #8]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 8000b02:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8000b06:	4302      	orrs	r2, r0

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000b08:	609a      	str	r2, [r3, #8]
}
 8000b0a:	4770      	bx	lr

08000b0c <RCC_PCLK1Config>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8000b0c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000b10:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000b14:	689a      	ldr	r2, [r3, #8]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 8000b16:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8000b1a:	4302      	orrs	r2, r0

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000b1c:	609a      	str	r2, [r3, #8]
}
 8000b1e:	4770      	bx	lr

08000b20 <RCC_PCLK2Config>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8000b20:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000b24:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000b28:	689a      	ldr	r2, [r3, #8]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 8000b2a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 8000b2e:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000b32:	609a      	str	r2, [r3, #8]
}
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop

08000b38 <RCC_GetClocksFreq>:
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000b38:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000b3c:	f2c4 0302 	movt	r3, #16386	; 0x4002
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000b40:	b410      	push	{r4}
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000b42:	689a      	ldr	r2, [r3, #8]
 8000b44:	f002 020c 	and.w	r2, r2, #12

  switch (tmp)
 8000b48:	2a04      	cmp	r2, #4
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000b4a:	bf02      	ittt	eq
 8000b4c:	f44f 5290 	moveq.w	r2, #4608	; 0x1200
 8000b50:	f2c0 027a 	movteq	r2, #122	; 0x7a
 8000b54:	6002      	streq	r2, [r0, #0]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;

  switch (tmp)
 8000b56:	d006      	beq.n	8000b66 <RCC_GetClocksFreq+0x2e>
 8000b58:	2a08      	cmp	r2, #8
 8000b5a:	d01e      	beq.n	8000b9a <RCC_GetClocksFreq+0x62>

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
      break;
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000b5c:	f44f 5210 	mov.w	r2, #9216	; 0x2400
 8000b60:	f2c0 02f4 	movt	r2, #244	; 0xf4
 8000b64:	6002      	str	r2, [r0, #0]
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000b66:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000b6a:	f2c4 0302 	movt	r3, #16386	; 0x4002
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];
 8000b6e:	491c      	ldr	r1, [pc, #112]	; (8000be0 <RCC_GetClocksFreq+0xa8>)
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000b70:	689c      	ldr	r4, [r3, #8]
  tmp = tmp >> 4;
 8000b72:	f3c4 1403 	ubfx	r4, r4, #4, #4
  presc = APBAHBPrescTable[tmp];
 8000b76:	5d0c      	ldrb	r4, [r1, r4]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000b78:	40e2      	lsrs	r2, r4
 8000b7a:	6042      	str	r2, [r0, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000b7c:	689c      	ldr	r4, [r3, #8]
  tmp = tmp >> 10;
 8000b7e:	f3c4 2482 	ubfx	r4, r4, #10, #3
  presc = APBAHBPrescTable[tmp];
 8000b82:	5d0c      	ldrb	r4, [r1, r4]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000b84:	fa32 f404 	lsrs.w	r4, r2, r4
 8000b88:	6084      	str	r4, [r0, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000b8a:	689b      	ldr	r3, [r3, #8]
  tmp = tmp >> 13;
 8000b8c:	f3c3 3342 	ubfx	r3, r3, #13, #3
  presc = APBAHBPrescTable[tmp];
 8000b90:	5ccb      	ldrb	r3, [r1, r3]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000b92:	40da      	lsrs	r2, r3
 8000b94:	60c2      	str	r2, [r0, #12]
}
 8000b96:	bc10      	pop	{r4}
 8000b98:	4770      	bx	lr
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000b9a:	685c      	ldr	r4, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000b9c:	6859      	ldr	r1, [r3, #4]
      
      if (pllsource != 0)
 8000b9e:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000ba2:	685c      	ldr	r4, [r3, #4]
 8000ba4:	bf15      	itete	ne
 8000ba6:	f44f 5390 	movne.w	r3, #4608	; 0x1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000baa:	f44f 5310 	moveq.w	r3, #9216	; 0x2400
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000bae:	f2c0 037a 	movtne	r3, #122	; 0x7a
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000bb2:	f2c0 03f4 	movteq	r3, #244	; 0xf4

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000bb6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000bba:	fbb3 f2f1 	udiv	r2, r3, r1
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000bbe:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000bc2:	f2c4 0302 	movt	r3, #16386	; 0x4002
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000bc6:	f3c4 1488 	ubfx	r4, r4, #6, #9
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000bd0:	3301      	adds	r3, #1
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000bd2:	fb02 f204 	mul.w	r2, r2, r4
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000bd6:	005b      	lsls	r3, r3, #1
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8000bd8:	fbb2 f2f3 	udiv	r2, r2, r3
 8000bdc:	6002      	str	r2, [r0, #0]
      break;
 8000bde:	e7c2      	b.n	8000b66 <RCC_GetClocksFreq+0x2e>
 8000be0:	20000074 	.word	0x20000074

08000be4 <RCC_RTCCLKConfig>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 8000be4:	f400 7340 	and.w	r3, r0, #768	; 0x300
 8000be8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000bec:	d10c      	bne.n	8000c08 <RCC_RTCCLKConfig+0x24>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 8000bee:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000bf2:	f2c4 0302 	movt	r3, #16386	; 0x4002

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8000bf6:	f020 4170 	bic.w	r1, r0, #4026531840	; 0xf0000000
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 8000bfa:	689a      	ldr	r2, [r3, #8]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8000bfc:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
 8000c00:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8000c04:	430a      	orrs	r2, r1

    /* Store the new value */
    RCC->CFGR = tmpreg;
 8000c06:	609a      	str	r2, [r3, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 8000c08:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000c0c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000c10:	0500      	lsls	r0, r0, #20
 8000c12:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000c14:	0d00      	lsrs	r0, r0, #20
 8000c16:	4310      	orrs	r0, r2
 8000c18:	6718      	str	r0, [r3, #112]	; 0x70
}
 8000c1a:	4770      	bx	lr

08000c1c <RCC_RTCCLKCmd>:
void RCC_RTCCLKCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 8000c1c:	f640 633c 	movw	r3, #3644	; 0xe3c
 8000c20:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8000c24:	6018      	str	r0, [r3, #0]
}
 8000c26:	4770      	bx	lr

08000c28 <RCC_BackupResetCmd>:
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 8000c28:	f44f 6364 	mov.w	r3, #3648	; 0xe40
 8000c2c:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8000c30:	6018      	str	r0, [r3, #0]
}
 8000c32:	4770      	bx	lr

08000c34 <RCC_I2SCLKConfig>:
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 8000c34:	f44f 73ae 	mov.w	r3, #348	; 0x15c
 8000c38:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8000c3c:	6018      	str	r0, [r3, #0]
}
 8000c3e:	4770      	bx	lr

08000c40 <RCC_AHB1PeriphClockCmd>:
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000c40:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000c44:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000c48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000c4a:	b919      	cbnz	r1, 8000c54 <RCC_AHB1PeriphClockCmd+0x14>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000c4c:	ea22 0000 	bic.w	r0, r2, r0
 8000c50:	6318      	str	r0, [r3, #48]	; 0x30
 8000c52:	4770      	bx	lr
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000c54:	4310      	orrs	r0, r2
 8000c56:	6318      	str	r0, [r3, #48]	; 0x30
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop

08000c5c <RCC_AHB2PeriphClockCmd>:
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 8000c5c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000c60:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000c64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000c66:	b919      	cbnz	r1, 8000c70 <RCC_AHB2PeriphClockCmd+0x14>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
 8000c68:	ea22 0000 	bic.w	r0, r2, r0
 8000c6c:	6358      	str	r0, [r3, #52]	; 0x34
 8000c6e:	4770      	bx	lr
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 8000c70:	4310      	orrs	r0, r2
 8000c72:	6358      	str	r0, [r3, #52]	; 0x34
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <RCC_AHB3PeriphClockCmd>:
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 8000c78:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000c7c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000c80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000c82:	b919      	cbnz	r1, 8000c8c <RCC_AHB3PeriphClockCmd+0x14>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
 8000c84:	ea22 0000 	bic.w	r0, r2, r0
 8000c88:	6398      	str	r0, [r3, #56]	; 0x38
 8000c8a:	4770      	bx	lr
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 8000c8c:	4310      	orrs	r0, r2
 8000c8e:	6398      	str	r0, [r3, #56]	; 0x38
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop

08000c94 <RCC_APB1PeriphClockCmd>:
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000c94:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000c98:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000c9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000c9e:	b919      	cbnz	r1, 8000ca8 <RCC_APB1PeriphClockCmd+0x14>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000ca0:	ea22 0000 	bic.w	r0, r2, r0
 8000ca4:	6418      	str	r0, [r3, #64]	; 0x40
 8000ca6:	4770      	bx	lr
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000ca8:	4310      	orrs	r0, r2
 8000caa:	6418      	str	r0, [r3, #64]	; 0x40
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop

08000cb0 <RCC_APB2PeriphClockCmd>:
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000cb0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000cb4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000cb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000cba:	b919      	cbnz	r1, 8000cc4 <RCC_APB2PeriphClockCmd+0x14>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000cbc:	ea22 0000 	bic.w	r0, r2, r0
 8000cc0:	6458      	str	r0, [r3, #68]	; 0x44
 8000cc2:	4770      	bx	lr
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000cc4:	4310      	orrs	r0, r2
 8000cc6:	6458      	str	r0, [r3, #68]	; 0x44
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop

08000ccc <RCC_AHB1PeriphResetCmd>:
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 8000ccc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000cd0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000cd4:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000cd6:	b919      	cbnz	r1, 8000ce0 <RCC_AHB1PeriphResetCmd+0x14>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 8000cd8:	ea22 0000 	bic.w	r0, r2, r0
 8000cdc:	6118      	str	r0, [r3, #16]
 8000cde:	4770      	bx	lr
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 8000ce0:	4310      	orrs	r0, r2
 8000ce2:	6118      	str	r0, [r3, #16]
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <RCC_AHB2PeriphResetCmd>:
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 8000ce8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000cec:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000cf0:	695a      	ldr	r2, [r3, #20]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000cf2:	b919      	cbnz	r1, 8000cfc <RCC_AHB2PeriphResetCmd+0x14>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 8000cf4:	ea22 0000 	bic.w	r0, r2, r0
 8000cf8:	6158      	str	r0, [r3, #20]
 8000cfa:	4770      	bx	lr
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 8000cfc:	4310      	orrs	r0, r2
 8000cfe:	6158      	str	r0, [r3, #20]
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop

08000d04 <RCC_AHB3PeriphResetCmd>:
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 8000d04:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000d08:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000d0c:	699a      	ldr	r2, [r3, #24]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000d0e:	b919      	cbnz	r1, 8000d18 <RCC_AHB3PeriphResetCmd+0x14>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
 8000d10:	ea22 0000 	bic.w	r0, r2, r0
 8000d14:	6198      	str	r0, [r3, #24]
 8000d16:	4770      	bx	lr
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 8000d18:	4310      	orrs	r0, r2
 8000d1a:	6198      	str	r0, [r3, #24]
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop

08000d20 <RCC_APB1PeriphResetCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8000d20:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000d24:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000d28:	6a1a      	ldr	r2, [r3, #32]
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000d2a:	b919      	cbnz	r1, 8000d34 <RCC_APB1PeriphResetCmd+0x14>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8000d2c:	ea22 0000 	bic.w	r0, r2, r0
 8000d30:	6218      	str	r0, [r3, #32]
 8000d32:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8000d34:	4310      	orrs	r0, r2
 8000d36:	6218      	str	r0, [r3, #32]
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop

08000d3c <RCC_APB2PeriphResetCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8000d3c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000d40:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000d44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000d46:	b919      	cbnz	r1, 8000d50 <RCC_APB2PeriphResetCmd+0x14>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8000d48:	ea22 0000 	bic.w	r0, r2, r0
 8000d4c:	6258      	str	r0, [r3, #36]	; 0x24
 8000d4e:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8000d50:	4310      	orrs	r0, r2
 8000d52:	6258      	str	r0, [r3, #36]	; 0x24
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop

08000d58 <RCC_AHB1PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 8000d58:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000d5c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000d60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000d62:	b919      	cbnz	r1, 8000d6c <RCC_AHB1PeriphClockLPModeCmd+0x14>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
 8000d64:	ea22 0000 	bic.w	r0, r2, r0
 8000d68:	6518      	str	r0, [r3, #80]	; 0x50
 8000d6a:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 8000d6c:	4310      	orrs	r0, r2
 8000d6e:	6518      	str	r0, [r3, #80]	; 0x50
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop

08000d74 <RCC_AHB2PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 8000d74:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000d78:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000d7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000d7e:	b919      	cbnz	r1, 8000d88 <RCC_AHB2PeriphClockLPModeCmd+0x14>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
 8000d80:	ea22 0000 	bic.w	r0, r2, r0
 8000d84:	6558      	str	r0, [r3, #84]	; 0x54
 8000d86:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 8000d88:	4310      	orrs	r0, r2
 8000d8a:	6558      	str	r0, [r3, #84]	; 0x54
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop

08000d90 <RCC_AHB3PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 8000d90:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000d94:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000d98:	6d9a      	ldr	r2, [r3, #88]	; 0x58
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000d9a:	b919      	cbnz	r1, 8000da4 <RCC_AHB3PeriphClockLPModeCmd+0x14>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
 8000d9c:	ea22 0000 	bic.w	r0, r2, r0
 8000da0:	6598      	str	r0, [r3, #88]	; 0x58
 8000da2:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 8000da4:	4310      	orrs	r0, r2
 8000da6:	6598      	str	r0, [r3, #88]	; 0x58
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop

08000dac <RCC_APB1PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 8000dac:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000db0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000db4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000db6:	b919      	cbnz	r1, 8000dc0 <RCC_APB1PeriphClockLPModeCmd+0x14>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
 8000db8:	ea22 0000 	bic.w	r0, r2, r0
 8000dbc:	6618      	str	r0, [r3, #96]	; 0x60
 8000dbe:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 8000dc0:	4310      	orrs	r0, r2
 8000dc2:	6618      	str	r0, [r3, #96]	; 0x60
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop

08000dc8 <RCC_APB2PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 8000dc8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000dcc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000dd0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000dd2:	b919      	cbnz	r1, 8000ddc <RCC_APB2PeriphClockLPModeCmd+0x14>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
 8000dd4:	ea22 0000 	bic.w	r0, r2, r0
 8000dd8:	6658      	str	r0, [r3, #100]	; 0x64
 8000dda:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 8000ddc:	4310      	orrs	r0, r2
 8000dde:	6658      	str	r0, [r3, #100]	; 0x64
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop

08000de4 <RCC_ITConfig>:
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8000de4:	f643 030d 	movw	r3, #14349	; 0x380d
 8000de8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000dec:	781a      	ldrb	r2, [r3, #0]
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000dee:	b919      	cbnz	r1, 8000df8 <RCC_ITConfig+0x14>
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
  }
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 8000df0:	ea22 0000 	bic.w	r0, r2, r0
 8000df4:	7018      	strb	r0, [r3, #0]
 8000df6:	4770      	bx	lr
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8000df8:	4310      	orrs	r0, r2
 8000dfa:	7018      	strb	r0, [r3, #0]
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop

08000e00 <RCC_GetFlagStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8000e00:	0943      	lsrs	r3, r0, #5
  if (tmp == 1)               /* The flag to check is in CR register */
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d00e      	beq.n	8000e24 <RCC_GetFlagStatus+0x24>
  {
    statusreg = RCC->CR;
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8000e06:	2b02      	cmp	r3, #2
  {
    statusreg = RCC->BDCR;
 8000e08:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000e0c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000e10:	bf0c      	ite	eq
 8000e12:	6f1b      	ldreq	r3, [r3, #112]	; 0x70
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8000e14:	6f5b      	ldrne	r3, [r3, #116]	; 0x74
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 8000e16:	f000 001f 	and.w	r0, r0, #31
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8000e1a:	fa33 f000 	lsrs.w	r0, r3, r0
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
}
 8000e1e:	f000 0001 	and.w	r0, r0, #1
 8000e22:	4770      	bx	lr

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 8000e24:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000e28:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	e7f2      	b.n	8000e16 <RCC_GetFlagStatus+0x16>

08000e30 <RCC_ClearFlag>:
  * @retval None
  */
void RCC_ClearFlag(void)
{
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 8000e30:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000e34:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000e38:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8000e3a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000e3e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop

08000e44 <RCC_GetITStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 8000e44:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000e48:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000e4c:	68db      	ldr	r3, [r3, #12]
  {
    bitstatus = SET;
 8000e4e:	4218      	tst	r0, r3
  {
    bitstatus = RESET;
  }
  /* Return the RCC_IT status */
  return  bitstatus;
}
 8000e50:	bf0c      	ite	eq
 8000e52:	2000      	moveq	r0, #0
 8000e54:	2001      	movne	r0, #1
 8000e56:	4770      	bx	lr

08000e58 <RCC_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 8000e58:	f643 030e 	movw	r3, #14350	; 0x380e
 8000e5c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000e60:	7018      	strb	r0, [r3, #0]
}
 8000e62:	4770      	bx	lr

08000e64 <USART_DeInit>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 8000e64:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 8000e66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e6a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000e6e:	4298      	cmp	r0, r3
 8000e70:	d028      	beq.n	8000ec4 <USART_DeInit+0x60>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
  }
  else if (USARTx == USART2)
 8000e72:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8000e76:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d02c      	beq.n	8000ed8 <USART_DeInit+0x74>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
  }
  else if (USARTx == USART3)
 8000e7e:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8000e82:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000e86:	4298      	cmp	r0, r3
 8000e88:	d032      	beq.n	8000ef0 <USART_DeInit+0x8c>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
  }    
  else if (USARTx == UART4)
 8000e8a:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
 8000e8e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000e92:	4298      	cmp	r0, r3
 8000e94:	d038      	beq.n	8000f08 <USART_DeInit+0xa4>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
  }
  else if (USARTx == UART5)
 8000e96:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8000e9a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000e9e:	4298      	cmp	r0, r3
 8000ea0:	d03e      	beq.n	8000f20 <USART_DeInit+0xbc>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
  }     
  else
  {
    if (USARTx == USART6)
 8000ea2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ea6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000eaa:	4298      	cmp	r0, r3
 8000eac:	d000      	beq.n	8000eb0 <USART_DeInit+0x4c>
 8000eae:	bd08      	pop	{r3, pc}
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
 8000eb0:	2020      	movs	r0, #32
 8000eb2:	2101      	movs	r1, #1
 8000eb4:	f7ff ff42 	bl	8000d3c <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 8000eb8:	2020      	movs	r0, #32
 8000eba:	2100      	movs	r1, #0
    }
  }
}
 8000ebc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (USARTx == USART6)
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 8000ec0:	f7ff bf3c 	b.w	8000d3c <RCC_APB2PeriphResetCmd>
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 8000ec4:	2010      	movs	r0, #16
 8000ec6:	2101      	movs	r1, #1
 8000ec8:	f7ff ff38 	bl	8000d3c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 8000ecc:	2010      	movs	r0, #16
 8000ece:	2100      	movs	r1, #0
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
    }
  }
}
 8000ed0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 8000ed4:	f7ff bf32 	b.w	8000d3c <RCC_APB2PeriphResetCmd>
  }
  else if (USARTx == USART2)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 8000ed8:	2101      	movs	r1, #1
 8000eda:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000ede:	f7ff ff1f 	bl	8000d20 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 8000ee2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000ee6:	2100      	movs	r1, #0
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
    }
  }
}
 8000ee8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
  }
  else if (USARTx == USART2)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 8000eec:	f7ff bf18 	b.w	8000d20 <RCC_APB1PeriphResetCmd>
  }
  else if (USARTx == USART3)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 8000ef0:	2101      	movs	r1, #1
 8000ef2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000ef6:	f7ff ff13 	bl	8000d20 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 8000efa:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000efe:	2100      	movs	r1, #0
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
    }
  }
}
 8000f00:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
  }
  else if (USARTx == USART3)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 8000f04:	f7ff bf0c 	b.w	8000d20 <RCC_APB1PeriphResetCmd>
  }    
  else if (USARTx == UART4)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 8000f08:	2101      	movs	r1, #1
 8000f0a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000f0e:	f7ff ff07 	bl	8000d20 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 8000f12:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000f16:	2100      	movs	r1, #0
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
    }
  }
}
 8000f18:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
  }    
  else if (USARTx == UART4)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 8000f1c:	f7ff bf00 	b.w	8000d20 <RCC_APB1PeriphResetCmd>
  }
  else if (USARTx == UART5)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 8000f20:	2101      	movs	r1, #1
 8000f22:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000f26:	f7ff fefb 	bl	8000d20 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 8000f2a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000f2e:	2100      	movs	r1, #0
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
    }
  }
}
 8000f30:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
  }
  else if (USARTx == UART5)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 8000f34:	f7ff bef4 	b.w	8000d20 <RCC_APB1PeriphResetCmd>

08000f38 <USART_Init>:
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000f38:	8a02      	ldrh	r2, [r0, #16]
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8000f3a:	88cb      	ldrh	r3, [r1, #6]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8000f3c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000f40:	0412      	lsls	r2, r2, #16
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000f42:	b5f0      	push	{r4, r5, r6, r7, lr}

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8000f44:	0c12      	lsrs	r2, r2, #16
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000f46:	4604      	mov	r4, r0
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000f48:	431a      	orrs	r2, r3

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000f4a:	8948      	ldrh	r0, [r1, #10]
 8000f4c:	890f      	ldrh	r7, [r1, #8]
 8000f4e:	888e      	ldrh	r6, [r1, #4]
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000f50:	460d      	mov	r5, r1
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8000f52:	8989      	ldrh	r1, [r1, #12]
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000f54:	8222      	strh	r2, [r4, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8000f56:	89a3      	ldrh	r3, [r4, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8000f58:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8000f5c:	f023 030c 	bic.w	r3, r3, #12

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000f60:	ea47 0206 	orr.w	r2, r7, r6

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8000f64:	041b      	lsls	r3, r3, #16

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000f66:	4302      	orrs	r2, r0
 8000f68:	b292      	uxth	r2, r2

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8000f6a:	0c1b      	lsrs	r3, r3, #16
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	81a3      	strh	r3, [r4, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000f70:	8aa3      	ldrh	r3, [r4, #20]

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8000f72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000f76:	041b      	lsls	r3, r3, #16
 8000f78:	0c1b      	lsrs	r3, r3, #16
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000f7a:	b085      	sub	sp, #20
  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8000f7c:	430b      	orrs	r3, r1
 8000f7e:	82a3      	strh	r3, [r4, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8000f80:	4668      	mov	r0, sp
 8000f82:	f7ff fdd9 	bl	8000b38 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8000f86:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8000f8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f8e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000f92:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8000f96:	429c      	cmp	r4, r3
 8000f98:	bf18      	it	ne
 8000f9a:	4294      	cmpne	r4, r2
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000f9c:	89a2      	ldrh	r2, [r4, #12]
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);

  if ((USARTx == USART1) || (USARTx == USART6))
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8000f9e:	bf0c      	ite	eq
 8000fa0:	9b03      	ldreq	r3, [sp, #12]
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8000fa2:	9b02      	ldrne	r3, [sp, #8]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000fa4:	b212      	sxth	r2, r2
 8000fa6:	2a00      	cmp	r2, #0
 8000fa8:	db21      	blt.n	8000fee <USART_Init+0xb6>
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8000faa:	6828      	ldr	r0, [r5, #0]
 8000fac:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000fb0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000fb4:	0080      	lsls	r0, r0, #2
 8000fb6:	fbb3 f1f0 	udiv	r1, r3, r0
  }
  tmpreg = (integerdivider / 100) << 4;
 8000fba:	f248 531f 	movw	r3, #34079	; 0x851f

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000fbe:	89a0      	ldrh	r0, [r4, #12]
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
  }
  tmpreg = (integerdivider / 100) << 4;
 8000fc0:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 8000fc4:	fba3 5201 	umull	r5, r2, r3, r1
 8000fc8:	0952      	lsrs	r2, r2, #5

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000fca:	b200      	sxth	r0, r0
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
  }
  tmpreg = (integerdivider / 100) << 4;

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000fcc:	0116      	lsls	r6, r2, #4
 8000fce:	2564      	movs	r5, #100	; 0x64

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000fd0:	2800      	cmp	r0, #0
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
  }
  tmpreg = (integerdivider / 100) << 4;

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000fd2:	fb02 1215 	mls	r2, r2, r5, r1

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000fd6:	db13      	blt.n	8001000 <USART_Init+0xc8>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8000fd8:	0112      	lsls	r2, r2, #4
 8000fda:	3232      	adds	r2, #50	; 0x32
 8000fdc:	fba3 5302 	umull	r5, r3, r3, r2
 8000fe0:	f3c3 1343 	ubfx	r3, r3, #5, #4
 8000fe4:	4333      	orrs	r3, r6
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8000fe6:	b29b      	uxth	r3, r3
 8000fe8:	8123      	strh	r3, [r4, #8]
}
 8000fea:	b005      	add	sp, #20
 8000fec:	bdf0      	pop	{r4, r5, r6, r7, pc}
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000fee:	682a      	ldr	r2, [r5, #0]
 8000ff0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000ff4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000ff8:	0052      	lsls	r2, r2, #1
 8000ffa:	fbb3 f1f2 	udiv	r1, r3, r2
 8000ffe:	e7dc      	b.n	8000fba <USART_Init+0x82>
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8001000:	00d2      	lsls	r2, r2, #3
 8001002:	3232      	adds	r2, #50	; 0x32
 8001004:	fba3 1302 	umull	r1, r3, r3, r2
 8001008:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800100c:	4333      	orrs	r3, r6
 800100e:	e7ea      	b.n	8000fe6 <USART_Init+0xae>

08001010 <USART_StructInit>:
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 8001010:	f44f 5216 	mov.w	r2, #9600	; 0x2580
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 8001014:	2300      	movs	r3, #0
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 8001016:	6002      	str	r2, [r0, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
  USART_InitStruct->USART_Parity = USART_Parity_No ;
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8001018:	220c      	movs	r2, #12
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 800101a:	8083      	strh	r3, [r0, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 800101c:	80c3      	strh	r3, [r0, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 800101e:	8103      	strh	r3, [r0, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8001020:	8142      	strh	r2, [r0, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 8001022:	8183      	strh	r3, [r0, #12]
}
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop

08001028 <USART_ClockInit>:
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8001028:	880a      	ldrh	r2, [r1, #0]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800102a:	8a03      	ldrh	r3, [r0, #16]
  *         contains the configuration information for the specified  USART peripheral.
  * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 800102c:	b430      	push	{r4, r5}
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 800102e:	884d      	ldrh	r5, [r1, #2]
 8001030:	888c      	ldrh	r4, [r1, #4]
 8001032:	88c9      	ldrh	r1, [r1, #6]
 8001034:	432a      	orrs	r2, r5
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 8001036:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 800103a:	4322      	orrs	r2, r4
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 800103c:	041b      	lsls	r3, r3, #16
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 800103e:	430a      	orrs	r2, r1
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 8001040:	0c1b      	lsrs	r3, r3, #16
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8001042:	b292      	uxth	r2, r2
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8001044:	4313      	orrs	r3, r2
 8001046:	8203      	strh	r3, [r0, #16]
}
 8001048:	bc30      	pop	{r4, r5}
 800104a:	4770      	bx	lr

0800104c <USART_ClockStructInit>:
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 800104c:	2300      	movs	r3, #0
 800104e:	8003      	strh	r3, [r0, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 8001050:	8043      	strh	r3, [r0, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 8001052:	8083      	strh	r3, [r0, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 8001054:	80c3      	strh	r3, [r0, #6]
}
 8001056:	4770      	bx	lr

08001058 <USART_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8001058:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800105a:	b929      	cbnz	r1, 8001068 <USART_Cmd+0x10>
    USARTx->CR1 |= USART_CR1_UE;
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 800105c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001060:	041b      	lsls	r3, r3, #16
 8001062:	0c1b      	lsrs	r3, r3, #16
 8001064:	8183      	strh	r3, [r0, #12]
 8001066:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8001068:	b29b      	uxth	r3, r3
 800106a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800106e:	8183      	strh	r3, [r0, #12]
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop

08001074 <USART_SetPrescaler>:
{ 
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= USART_GTPR_GT;
 8001074:	8b03      	ldrh	r3, [r0, #24]
 8001076:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800107a:	8303      	strh	r3, [r0, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 800107c:	8b03      	ldrh	r3, [r0, #24]
 800107e:	b29b      	uxth	r3, r3
 8001080:	430b      	orrs	r3, r1
 8001082:	8303      	strh	r3, [r0, #24]
}
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop

08001088 <USART_OverSampling8Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 8001088:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800108a:	b919      	cbnz	r1, 8001094 <USART_OverSampling8Cmd+0xc>
    USARTx->CR1 |= USART_CR1_OVER8;
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
 800108c:	045b      	lsls	r3, r3, #17
 800108e:	0c5b      	lsrs	r3, r3, #17
 8001090:	8183      	strh	r3, [r0, #12]
 8001092:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 8001094:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001098:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800109c:	b29b      	uxth	r3, r3
 800109e:	8183      	strh	r3, [r0, #12]
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop

080010a4 <USART_OneBitMethodCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 80010a4:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80010a6:	b929      	cbnz	r1, 80010b4 <USART_OneBitMethodCmd+0x10>
    USARTx->CR3 |= USART_CR3_ONEBIT;
  }
  else
  {
    /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
 80010a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80010ac:	041b      	lsls	r3, r3, #16
 80010ae:	0c1b      	lsrs	r3, r3, #16
 80010b0:	8283      	strh	r3, [r0, #20]
 80010b2:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 80010b4:	b29b      	uxth	r3, r3
 80010b6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010ba:	8283      	strh	r3, [r0, #20]
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop

080010c0 <USART_SendData>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 80010c0:	05c9      	lsls	r1, r1, #23
 80010c2:	0dc9      	lsrs	r1, r1, #23
 80010c4:	8081      	strh	r1, [r0, #4]
}
 80010c6:	4770      	bx	lr

080010c8 <USART_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 80010c8:	8880      	ldrh	r0, [r0, #4]
}
 80010ca:	05c0      	lsls	r0, r0, #23
 80010cc:	0dc0      	lsrs	r0, r0, #23
 80010ce:	4770      	bx	lr

080010d0 <USART_SetAddress>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
 80010d0:	8a03      	ldrh	r3, [r0, #16]
 80010d2:	f023 030f 	bic.w	r3, r3, #15
 80010d6:	041b      	lsls	r3, r3, #16
 80010d8:	0c1b      	lsrs	r3, r3, #16
 80010da:	8203      	strh	r3, [r0, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
 80010dc:	8a03      	ldrh	r3, [r0, #16]
 80010de:	b29b      	uxth	r3, r3
 80010e0:	430b      	orrs	r3, r1
 80010e2:	8203      	strh	r3, [r0, #16]
}
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop

080010e8 <USART_ReceiverWakeUpCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 80010e8:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
 80010ea:	b929      	cbnz	r1, 80010f8 <USART_ReceiverWakeUpCmd+0x10>
    USARTx->CR1 |= USART_CR1_RWU;
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
 80010ec:	f023 0302 	bic.w	r3, r3, #2
 80010f0:	041b      	lsls	r3, r3, #16
 80010f2:	0c1b      	lsrs	r3, r3, #16
 80010f4:	8183      	strh	r3, [r0, #12]
 80010f6:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	f043 0302 	orr.w	r3, r3, #2
 80010fe:	8183      	strh	r3, [r0, #12]
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop

08001104 <USART_WakeUpConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
 8001104:	8983      	ldrh	r3, [r0, #12]
 8001106:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800110a:	041b      	lsls	r3, r3, #16
 800110c:	0c1b      	lsrs	r3, r3, #16
 800110e:	8183      	strh	r3, [r0, #12]
  USARTx->CR1 |= USART_WakeUp;
 8001110:	8983      	ldrh	r3, [r0, #12]
 8001112:	b29b      	uxth	r3, r3
 8001114:	430b      	orrs	r3, r1
 8001116:	8183      	strh	r3, [r0, #12]
}
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop

0800111c <USART_LINBreakDetectLengthConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
 800111c:	8a03      	ldrh	r3, [r0, #16]
 800111e:	f023 0320 	bic.w	r3, r3, #32
 8001122:	041b      	lsls	r3, r3, #16
 8001124:	0c1b      	lsrs	r3, r3, #16
 8001126:	8203      	strh	r3, [r0, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 8001128:	8a03      	ldrh	r3, [r0, #16]
 800112a:	b29b      	uxth	r3, r3
 800112c:	430b      	orrs	r3, r1
 800112e:	8203      	strh	r3, [r0, #16]
}
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop

08001134 <USART_LINCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 8001134:	8a03      	ldrh	r3, [r0, #16]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001136:	b929      	cbnz	r1, 8001144 <USART_LINCmd+0x10>
    USARTx->CR2 |= USART_CR2_LINEN;
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
 8001138:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800113c:	041b      	lsls	r3, r3, #16
 800113e:	0c1b      	lsrs	r3, r3, #16
 8001140:	8203      	strh	r3, [r0, #16]
 8001142:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 8001144:	b29b      	uxth	r3, r3
 8001146:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800114a:	8203      	strh	r3, [r0, #16]
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop

08001150 <USART_SendBreak>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= USART_CR1_SBK;
 8001150:	8983      	ldrh	r3, [r0, #12]
 8001152:	b29b      	uxth	r3, r3
 8001154:	f043 0301 	orr.w	r3, r3, #1
 8001158:	8183      	strh	r3, [r0, #12]
}
 800115a:	4770      	bx	lr

0800115c <USART_HalfDuplexCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 800115c:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800115e:	b929      	cbnz	r1, 800116c <USART_HalfDuplexCmd+0x10>
    USARTx->CR3 |= USART_CR3_HDSEL;
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
 8001160:	f023 0308 	bic.w	r3, r3, #8
 8001164:	041b      	lsls	r3, r3, #16
 8001166:	0c1b      	lsrs	r3, r3, #16
 8001168:	8283      	strh	r3, [r0, #20]
 800116a:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 800116c:	b29b      	uxth	r3, r3
 800116e:	f043 0308 	orr.w	r3, r3, #8
 8001172:	8283      	strh	r3, [r0, #20]
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop

08001178 <USART_SetGuardTime>:
{    
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= USART_GTPR_PSC;
 8001178:	8b03      	ldrh	r3, [r0, #24]
 800117a:	b2db      	uxtb	r3, r3
 800117c:	8303      	strh	r3, [r0, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 800117e:	8b03      	ldrh	r3, [r0, #24]
 8001180:	b29b      	uxth	r3, r3
 8001182:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001186:	8303      	strh	r3, [r0, #24]
}
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop

0800118c <USART_SmartCardCmd>:
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 800118c:	8a83      	ldrh	r3, [r0, #20]
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800118e:	b929      	cbnz	r1, 800119c <USART_SmartCardCmd+0x10>
    USARTx->CR3 |= USART_CR3_SCEN;
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
 8001190:	f023 0320 	bic.w	r3, r3, #32
 8001194:	041b      	lsls	r3, r3, #16
 8001196:	0c1b      	lsrs	r3, r3, #16
 8001198:	8283      	strh	r3, [r0, #20]
 800119a:	4770      	bx	lr
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 800119c:	b29b      	uxth	r3, r3
 800119e:	f043 0320 	orr.w	r3, r3, #32
 80011a2:	8283      	strh	r3, [r0, #20]
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop

080011a8 <USART_SmartCardNACKCmd>:
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 80011a8:	8a83      	ldrh	r3, [r0, #20]
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80011aa:	b929      	cbnz	r1, 80011b8 <USART_SmartCardNACKCmd+0x10>
    USARTx->CR3 |= USART_CR3_NACK;
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
 80011ac:	f023 0310 	bic.w	r3, r3, #16
 80011b0:	041b      	lsls	r3, r3, #16
 80011b2:	0c1b      	lsrs	r3, r3, #16
 80011b4:	8283      	strh	r3, [r0, #20]
 80011b6:	4770      	bx	lr
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 80011b8:	b29b      	uxth	r3, r3
 80011ba:	f043 0310 	orr.w	r3, r3, #16
 80011be:	8283      	strh	r3, [r0, #20]
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop

080011c4 <USART_IrDAConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
 80011c4:	8a83      	ldrh	r3, [r0, #20]
 80011c6:	f023 0304 	bic.w	r3, r3, #4
 80011ca:	041b      	lsls	r3, r3, #16
 80011cc:	0c1b      	lsrs	r3, r3, #16
 80011ce:	8283      	strh	r3, [r0, #20]
  USARTx->CR3 |= USART_IrDAMode;
 80011d0:	8a83      	ldrh	r3, [r0, #20]
 80011d2:	b29b      	uxth	r3, r3
 80011d4:	430b      	orrs	r3, r1
 80011d6:	8283      	strh	r3, [r0, #20]
}
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop

080011dc <USART_IrDACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 80011dc:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 80011de:	b929      	cbnz	r1, 80011ec <USART_IrDACmd+0x10>
    USARTx->CR3 |= USART_CR3_IREN;
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
 80011e0:	f023 0302 	bic.w	r3, r3, #2
 80011e4:	041b      	lsls	r3, r3, #16
 80011e6:	0c1b      	lsrs	r3, r3, #16
 80011e8:	8283      	strh	r3, [r0, #20]
 80011ea:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 80011ec:	b29b      	uxth	r3, r3
 80011ee:	f043 0302 	orr.w	r3, r3, #2
 80011f2:	8283      	strh	r3, [r0, #20]
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop

080011f8 <USART_DMACmd>:

  if (NewState != DISABLE)
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 80011f8:	8a83      	ldrh	r3, [r0, #20]
 80011fa:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 80011fc:	b91a      	cbnz	r2, 8001206 <USART_DMACmd+0xe>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 80011fe:	ea23 0101 	bic.w	r1, r3, r1
 8001202:	8281      	strh	r1, [r0, #20]
 8001204:	4770      	bx	lr

  if (NewState != DISABLE)
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8001206:	4319      	orrs	r1, r3
 8001208:	8281      	strh	r1, [r0, #20]
 800120a:	4770      	bx	lr

0800120c <USART_ITConfig>:

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 800120c:	f001 031f 	and.w	r3, r1, #31
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8001210:	b410      	push	{r4}
  } 
    
  usartxbase = (uint32_t)USARTx;

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8001212:	f3c1 1142 	ubfx	r1, r1, #5, #3

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
 8001216:	2401      	movs	r4, #1
 8001218:	fa14 f303 	lsls.w	r3, r4, r3
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 800121c:	42a1      	cmp	r1, r4
 800121e:	d00d      	beq.n	800123c <USART_ITConfig+0x30>
  {
    usartxbase += 0x0C;
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8001220:	2902      	cmp	r1, #2
 8001222:	d00d      	beq.n	8001240 <USART_ITConfig+0x34>
  {
    usartxbase += 0x10;
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8001224:	3014      	adds	r0, #20
  }
  if (NewState != DISABLE)
 8001226:	b92a      	cbnz	r2, 8001234 <USART_ITConfig+0x28>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8001228:	6802      	ldr	r2, [r0, #0]
 800122a:	ea22 0303 	bic.w	r3, r2, r3
 800122e:	6003      	str	r3, [r0, #0]
  }
}
 8001230:	bc10      	pop	{r4}
 8001232:	4770      	bx	lr
  {
    usartxbase += 0x14; 
  }
  if (NewState != DISABLE)
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8001234:	6802      	ldr	r2, [r0, #0]
 8001236:	4313      	orrs	r3, r2
 8001238:	6003      	str	r3, [r0, #0]
 800123a:	e7f9      	b.n	8001230 <USART_ITConfig+0x24>
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
  {
    usartxbase += 0x0C;
 800123c:	300c      	adds	r0, #12
 800123e:	e7f2      	b.n	8001226 <USART_ITConfig+0x1a>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
  {
    usartxbase += 0x10;
 8001240:	3010      	adds	r0, #16
 8001242:	e7f0      	b.n	8001226 <USART_ITConfig+0x1a>

08001244 <USART_GetFlagStatus>:
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8001244:	8803      	ldrh	r3, [r0, #0]
  {
    bitstatus = SET;
 8001246:	4219      	tst	r1, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8001248:	bf0c      	ite	eq
 800124a:	2000      	moveq	r0, #0
 800124c:	2001      	movne	r0, #1
 800124e:	4770      	bx	lr

08001250 <USART_ClearFlag>:
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
       
  USARTx->SR = (uint16_t)~USART_FLAG;
 8001250:	43c9      	mvns	r1, r1
 8001252:	b289      	uxth	r1, r1
 8001254:	8001      	strh	r1, [r0, #0]
}
 8001256:	4770      	bx	lr

08001258 <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8001258:	b410      	push	{r4}
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 800125a:	f001 021f 	and.w	r2, r1, #31
  itmask = (uint32_t)0x01 << itmask;
 800125e:	2401      	movs	r4, #1
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8001260:	f3c1 1342 	ubfx	r3, r1, #5, #3
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
 8001264:	4094      	lsls	r4, r2
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8001266:	2b01      	cmp	r3, #1
 8001268:	d016      	beq.n	8001298 <USART_GetITStatus+0x40>
  {
    itmask &= USARTx->CR1;
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 800126a:	2b02      	cmp	r3, #2
  {
    itmask &= USARTx->CR2;
 800126c:	bf0c      	ite	eq
 800126e:	8a02      	ldrheq	r2, [r0, #16]
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8001270:	8a82      	ldrhne	r2, [r0, #20]
 8001272:	b292      	uxth	r2, r2
 8001274:	4022      	ands	r2, r4
  }
  
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
  bitpos &= USARTx->SR;
 8001276:	8803      	ldrh	r3, [r0, #0]
  {
    itmask &= USARTx->CR3;
  }
  
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
 8001278:	2401      	movs	r4, #1
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
  }
  
  bitpos = USART_IT >> 0x08;
 800127a:	0a09      	lsrs	r1, r1, #8
  bitpos = (uint32_t)0x01 << bitpos;
 800127c:	fa14 f101 	lsls.w	r1, r4, r1
  bitpos &= USARTx->SR;
 8001280:	b29b      	uxth	r3, r3
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8001282:	4219      	tst	r1, r3
 8001284:	bf0c      	ite	eq
 8001286:	2300      	moveq	r3, #0
 8001288:	2301      	movne	r3, #1
  {
    bitstatus = RESET;
  }
  
  return bitstatus;  
}
 800128a:	2a00      	cmp	r2, #0
 800128c:	bf0c      	ite	eq
 800128e:	2000      	moveq	r0, #0
 8001290:	f003 0001 	andne.w	r0, r3, #1
 8001294:	bc10      	pop	{r4}
 8001296:	4770      	bx	lr
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
  {
    itmask &= USARTx->CR1;
 8001298:	8982      	ldrh	r2, [r0, #12]
 800129a:	b292      	uxth	r2, r2
 800129c:	4022      	ands	r2, r4
 800129e:	e7ea      	b.n	8001276 <USART_GetITStatus+0x1e>

080012a0 <USART_ClearITPendingBit>:
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 80012a0:	0a09      	lsrs	r1, r1, #8
 80012a2:	2301      	movs	r3, #1
 80012a4:	fa13 f101 	lsls.w	r1, r3, r1
  USARTx->SR = (uint16_t)~itmask;
 80012a8:	43c9      	mvns	r1, r1
 80012aa:	b289      	uxth	r1, r1
 80012ac:	8001      	strh	r1, [r0, #0]
}
 80012ae:	4770      	bx	lr
 80012b0:	08002704 	.word	0x08002704
 80012b4:	20000000 	.word	0x20000000
 80012b8:	20000098 	.word	0x20000098
 80012bc:	20000098 	.word	0x20000098
 80012c0:	200002b4 	.word	0x200002b4

080012c4 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop

080012c8 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80012c8:	e7fe      	b.n	80012c8 <HardFault_Handler>
 80012ca:	bf00      	nop

080012cc <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80012cc:	e7fe      	b.n	80012cc <MemManage_Handler>
 80012ce:	bf00      	nop

080012d0 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80012d0:	e7fe      	b.n	80012d0 <BusFault_Handler>
 80012d2:	bf00      	nop

080012d4 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80012d4:	e7fe      	b.n	80012d4 <UsageFault_Handler>
 80012d6:	bf00      	nop

080012d8 <SVC_Handler>:
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
}
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop

080012dc <DebugMon_Handler>:
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
}
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop

080012e0 <PendSV_Handler>:
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
}
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop

080012e4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012e4:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 80012e8:	f2ce 0200 	movt	r2, #57344	; 0xe000
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80012ec:	f44f 5360 	mov.w	r3, #14336	; 0x3800
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012f0:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80012f4:	f2c4 0302 	movt	r3, #16386	; 0x4002
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80012fc:	f8c2 1088 	str.w	r1, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001300:	6819      	ldr	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001302:	2200      	movs	r2, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001304:	f041 0101 	orr.w	r1, r1, #1
 8001308:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800130a:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800130c:	6818      	ldr	r0, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800130e:	f243 0110 	movw	r1, #12304	; 0x3010

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001312:	f020 7084 	bic.w	r0, r0, #17301504	; 0x1080000

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001316:	f2c2 4100 	movt	r1, #9216	; 0x2400

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800131a:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 800131e:	6018      	str	r0, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001320:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001322:	6819      	ldr	r1, [r3, #0]
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001324:	b082      	sub	sp, #8

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001326:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800132a:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800132c:	60da      	str	r2, [r3, #12]
static void SetSysClock(void)
{
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800132e:	9200      	str	r2, [sp, #0]
 8001330:	9201      	str	r2, [sp, #4]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001338:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800133a:	461a      	mov	r2, r3
 800133c:	e003      	b.n	8001346 <SystemInit+0x62>
    StartUpCounter++;
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800133e:	9b00      	ldr	r3, [sp, #0]
 8001340:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001344:	d009      	beq.n	800135a <SystemInit+0x76>
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001346:	6813      	ldr	r3, [r2, #0]
 8001348:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800134c:	9301      	str	r3, [sp, #4]
    StartUpCounter++;
 800134e:	9b00      	ldr	r3, [sp, #0]
 8001350:	3301      	adds	r3, #1
 8001352:	9300      	str	r3, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001354:	9b01      	ldr	r3, [sp, #4]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d0f1      	beq.n	800133e <SystemInit+0x5a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800135a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800135e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8001368:	bf08      	it	eq
 800136a:	9301      	streq	r3, [sp, #4]
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
    StartUpCounter++;
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800136c:	d001      	beq.n	8001372 <SystemInit+0x8e>
  {
    HSEStatus = (uint32_t)0x01;
 800136e:	2301      	movs	r3, #1
 8001370:	9301      	str	r3, [sp, #4]
  else
  {
    HSEStatus = (uint32_t)0x00;
  }

  if (HSEStatus == (uint32_t)0x01)
 8001372:	9b01      	ldr	r3, [sp, #4]
 8001374:	2b01      	cmp	r3, #1
 8001376:	d008      	beq.n	800138a <SystemInit+0xa6>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001378:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800137c:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001380:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001384:	609a      	str	r2, [r3, #8]
#endif
}
 8001386:	b002      	add	sp, #8
 8001388:	4770      	bx	lr
  }

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800138a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800138e:	f2c4 0302 	movt	r3, #16386	; 0x4002
    PWR->CR |= PWR_CR_VOS;
 8001392:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
  }

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001396:	6c19      	ldr	r1, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8001398:	f2c4 0200 	movt	r2, #16384	; 0x4000
  }

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800139c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80013a0:	6419      	str	r1, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80013a2:	6811      	ldr	r1, [r2, #0]
 80013a4:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80013a8:	6011      	str	r1, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80013aa:	689a      	ldr	r2, [r3, #8]
 80013ac:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80013ae:	689a      	ldr	r2, [r3, #8]
 80013b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80013b4:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80013b6:	6899      	ldr	r1, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80013b8:	f245 4219 	movw	r2, #21529	; 0x5419
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80013bc:	f441 51a0 	orr.w	r1, r1, #5120	; 0x1400

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80013c0:	f2c0 7240 	movt	r2, #1856	; 0x740
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80013c4:	6099      	str	r1, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80013c6:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80013ce:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80013d0:	4619      	mov	r1, r3
 80013d2:	680a      	ldr	r2, [r1, #0]
 80013d4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80013d8:	0192      	lsls	r2, r2, #6
 80013da:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80013de:	d5f8      	bpl.n	80013d2 <SystemInit+0xee>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80013e0:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80013e4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80013e8:	f240 6105 	movw	r1, #1541	; 0x605
 80013ec:	6011      	str	r1, [r2, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80013ee:	689a      	ldr	r2, [r3, #8]
 80013f0:	f022 0203 	bic.w	r2, r2, #3
 80013f4:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80013f6:	689a      	ldr	r2, [r3, #8]
 80013f8:	f042 0202 	orr.w	r2, r2, #2
 80013fc:	609a      	str	r2, [r3, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80013fe:	689a      	ldr	r2, [r3, #8]
 8001400:	f002 020c 	and.w	r2, r2, #12
 8001404:	2a08      	cmp	r2, #8
 8001406:	d1fa      	bne.n	80013fe <SystemInit+0x11a>
 8001408:	e7b6      	b.n	8001378 <SystemInit+0x94>
 800140a:	bf00      	nop

0800140c <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800140c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001410:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001414:	689a      	ldr	r2, [r3, #8]
 8001416:	f002 020c 	and.w	r2, r2, #12

  switch (tmp)
 800141a:	2a04      	cmp	r2, #4
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
      break;
 800141c:	bf04      	itt	eq
 800141e:	f44f 5190 	moveq.w	r1, #4608	; 0x1200
 8001422:	f2c0 017a 	movteq	r1, #122	; 0x7a
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;

  switch (tmp)
 8001426:	d006      	beq.n	8001436 <SystemCoreClockUpdate+0x2a>
 8001428:	2a08      	cmp	r2, #8
 800142a:	bf1c      	itt	ne
 800142c:	f44f 5110 	movne.w	r1, #9216	; 0x2400
 8001430:	f2c0 01f4 	movtne	r1, #244	; 0xf4
 8001434:	d00b      	beq.n	800144e <SystemCoreClockUpdate+0x42>
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8001436:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800143a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800143e:	4b15      	ldr	r3, [pc, #84]	; (8001494 <SystemCoreClockUpdate+0x88>)
 8001440:	6892      	ldr	r2, [r2, #8]
 8001442:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8001446:	5c9a      	ldrb	r2, [r3, r2]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8001448:	40d1      	lsrs	r1, r2
 800144a:	6119      	str	r1, [r3, #16]
}
 800144c:	4770      	bx	lr
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800144e:	6858      	ldr	r0, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001450:	685a      	ldr	r2, [r3, #4]
      
      if (pllsource != 0)
 8001452:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001456:	6858      	ldr	r0, [r3, #4]
 8001458:	bf15      	itete	ne
 800145a:	f44f 5390 	movne.w	r3, #4608	; 0x1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800145e:	f44f 5310 	moveq.w	r3, #9216	; 0x2400
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001462:	f2c0 037a 	movtne	r3, #122	; 0x7a
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8001466:	f2c0 03f4 	movteq	r3, #244	; 0xf4

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800146a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800146e:	fbb3 f1f2 	udiv	r1, r3, r2
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001472:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001476:	f2c4 0302 	movt	r3, #16386	; 0x4002
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800147a:	f3c0 1088 	ubfx	r0, r0, #6, #9
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001484:	3301      	adds	r3, #1
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8001486:	fb01 f100 	mul.w	r1, r1, r0
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800148a:	005b      	lsls	r3, r3, #1
      SystemCoreClock = pllvco/pllp;
 800148c:	fbb1 f1f3 	udiv	r1, r1, r3
      break;
 8001490:	e7d1      	b.n	8001436 <SystemCoreClockUpdate+0x2a>
 8001492:	bf00      	nop
 8001494:	20000084 	.word	0x20000084

08001498 <sinf>:
 8001498:	b500      	push	{lr}
 800149a:	ee10 2a10 	vmov	r2, s0
 800149e:	f640 73d8 	movw	r3, #4056	; 0xfd8
 80014a2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80014a6:	f6c3 7349 	movt	r3, #16201	; 0x3f49
 80014aa:	429a      	cmp	r2, r3
 80014ac:	b083      	sub	sp, #12
 80014ae:	dd19      	ble.n	80014e4 <sinf+0x4c>
 80014b0:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80014b4:	bfa8      	it	ge
 80014b6:	ee30 0a40 	vsubge.f32	s0, s0, s0
 80014ba:	db01      	blt.n	80014c0 <sinf+0x28>
 80014bc:	b003      	add	sp, #12
 80014be:	bd00      	pop	{pc}
 80014c0:	4668      	mov	r0, sp
 80014c2:	f000 f825 	bl	8001510 <__ieee754_rem_pio2f>
 80014c6:	f000 0003 	and.w	r0, r0, #3
 80014ca:	2801      	cmp	r0, #1
 80014cc:	ed9d 0a00 	vldr	s0, [sp]
 80014d0:	eddd 0a01 	vldr	s1, [sp, #4]
 80014d4:	d012      	beq.n	80014fc <sinf+0x64>
 80014d6:	2802      	cmp	r0, #2
 80014d8:	d00a      	beq.n	80014f0 <sinf+0x58>
 80014da:	b990      	cbnz	r0, 8001502 <sinf+0x6a>
 80014dc:	2001      	movs	r0, #1
 80014de:	f000 fce7 	bl	8001eb0 <__kernel_sinf>
 80014e2:	e7eb      	b.n	80014bc <sinf+0x24>
 80014e4:	eddf 0a09 	vldr	s1, [pc, #36]	; 800150c <sinf+0x74>
 80014e8:	2000      	movs	r0, #0
 80014ea:	f000 fce1 	bl	8001eb0 <__kernel_sinf>
 80014ee:	e7e5      	b.n	80014bc <sinf+0x24>
 80014f0:	2001      	movs	r0, #1
 80014f2:	f000 fcdd 	bl	8001eb0 <__kernel_sinf>
 80014f6:	eeb1 0a40 	vneg.f32	s0, s0
 80014fa:	e7df      	b.n	80014bc <sinf+0x24>
 80014fc:	f000 f956 	bl	80017ac <__kernel_cosf>
 8001500:	e7dc      	b.n	80014bc <sinf+0x24>
 8001502:	f000 f953 	bl	80017ac <__kernel_cosf>
 8001506:	eeb1 0a40 	vneg.f32	s0, s0
 800150a:	e7d7      	b.n	80014bc <sinf+0x24>
 800150c:	00000000 	.word	0x00000000

08001510 <__ieee754_rem_pio2f>:
 8001510:	b570      	push	{r4, r5, r6, lr}
 8001512:	ee10 2a10 	vmov	r2, s0
 8001516:	f640 73d8 	movw	r3, #4056	; 0xfd8
 800151a:	f022 4600 	bic.w	r6, r2, #2147483648	; 0x80000000
 800151e:	f6c3 7349 	movt	r3, #16201	; 0x3f49
 8001522:	429e      	cmp	r6, r3
 8001524:	b086      	sub	sp, #24
 8001526:	ee10 5a10 	vmov	r5, s0
 800152a:	4604      	mov	r4, r0
 800152c:	dd77      	ble.n	800161e <__ieee754_rem_pio2f+0x10e>
 800152e:	f64c 33e3 	movw	r3, #52195	; 0xcbe3
 8001532:	f2c4 0316 	movt	r3, #16406	; 0x4016
 8001536:	429e      	cmp	r6, r3
 8001538:	dc1c      	bgt.n	8001574 <__ieee754_rem_pio2f+0x64>
 800153a:	f44f 637d 	mov.w	r3, #4048	; 0xfd0
 800153e:	2a00      	cmp	r2, #0
 8001540:	f026 060f 	bic.w	r6, r6, #15
 8001544:	f6c3 73c9 	movt	r3, #16329	; 0x3fc9
 8001548:	eddf 7a8e 	vldr	s15, [pc, #568]	; 8001784 <__ieee754_rem_pio2f+0x274>
 800154c:	f340 80f5 	ble.w	800173a <__ieee754_rem_pio2f+0x22a>
 8001550:	429e      	cmp	r6, r3
 8001552:	ee70 7a67 	vsub.f32	s15, s0, s15
 8001556:	d071      	beq.n	800163c <__ieee754_rem_pio2f+0x12c>
 8001558:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8001788 <__ieee754_rem_pio2f+0x278>
 800155c:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8001560:	2001      	movs	r0, #1
 8001562:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001566:	edc4 6a00 	vstr	s13, [r4]
 800156a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800156e:	ed84 7a01 	vstr	s14, [r4, #4]
 8001572:	e059      	b.n	8001628 <__ieee754_rem_pio2f+0x118>
 8001574:	f44f 6378 	mov.w	r3, #3968	; 0xf80
 8001578:	f2c4 3349 	movt	r3, #17225	; 0x4349
 800157c:	429e      	cmp	r6, r3
 800157e:	dd6f      	ble.n	8001660 <__ieee754_rem_pio2f+0x150>
 8001580:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8001584:	da52      	bge.n	800162c <__ieee754_rem_pio2f+0x11c>
 8001586:	15f2      	asrs	r2, r6, #23
 8001588:	3a86      	subs	r2, #134	; 0x86
 800158a:	eba6 56c2 	sub.w	r6, r6, r2, lsl #23
 800158e:	ee06 6a90 	vmov	s13, r6
 8001592:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8001596:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800178c <__ieee754_rem_pio2f+0x27c>
 800159a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800159e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80015a2:	edcd 7a03 	vstr	s15, [sp, #12]
 80015a6:	ee66 6a87 	vmul.f32	s13, s13, s14
 80015aa:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 80015ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015b2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80015b6:	edcd 7a04 	vstr	s15, [sp, #16]
 80015ba:	ee26 7a87 	vmul.f32	s14, s13, s14
 80015be:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80015c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015c6:	ed8d 7a05 	vstr	s14, [sp, #20]
 80015ca:	f040 80d8 	bne.w	800177e <__ieee754_rem_pio2f+0x26e>
 80015ce:	2303      	movs	r3, #3
 80015d0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80015d4:	3b01      	subs	r3, #1
 80015d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015da:	a904      	add	r1, sp, #16
 80015dc:	d107      	bne.n	80015ee <__ieee754_rem_pio2f+0xde>
 80015de:	ed71 7a01 	vldmdb	r1!, {s15}
 80015e2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80015e6:	3b01      	subs	r3, #1
 80015e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ec:	d0f7      	beq.n	80015de <__ieee754_rem_pio2f+0xce>
 80015ee:	2602      	movs	r6, #2
 80015f0:	9600      	str	r6, [sp, #0]
 80015f2:	4e67      	ldr	r6, [pc, #412]	; (8001790 <__ieee754_rem_pio2f+0x280>)
 80015f4:	a803      	add	r0, sp, #12
 80015f6:	4621      	mov	r1, r4
 80015f8:	9601      	str	r6, [sp, #4]
 80015fa:	f000 f95b 	bl	80018b4 <__kernel_rem_pio2f>
 80015fe:	2d00      	cmp	r5, #0
 8001600:	da12      	bge.n	8001628 <__ieee754_rem_pio2f+0x118>
 8001602:	ed94 7a00 	vldr	s14, [r4]
 8001606:	edd4 7a01 	vldr	s15, [r4, #4]
 800160a:	eeb1 7a47 	vneg.f32	s14, s14
 800160e:	eef1 7a67 	vneg.f32	s15, s15
 8001612:	ed84 7a00 	vstr	s14, [r4]
 8001616:	edc4 7a01 	vstr	s15, [r4, #4]
 800161a:	4240      	negs	r0, r0
 800161c:	e004      	b.n	8001628 <__ieee754_rem_pio2f+0x118>
 800161e:	2300      	movs	r3, #0
 8001620:	ed84 0a00 	vstr	s0, [r4]
 8001624:	6043      	str	r3, [r0, #4]
 8001626:	2000      	movs	r0, #0
 8001628:	b006      	add	sp, #24
 800162a:	bd70      	pop	{r4, r5, r6, pc}
 800162c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8001630:	2000      	movs	r0, #0
 8001632:	edc4 7a01 	vstr	s15, [r4, #4]
 8001636:	edc4 7a00 	vstr	s15, [r4]
 800163a:	e7f5      	b.n	8001628 <__ieee754_rem_pio2f+0x118>
 800163c:	eddf 6a55 	vldr	s13, [pc, #340]	; 8001794 <__ieee754_rem_pio2f+0x284>
 8001640:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8001798 <__ieee754_rem_pio2f+0x288>
 8001644:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001648:	2001      	movs	r0, #1
 800164a:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800164e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001652:	edc4 6a00 	vstr	s13, [r4]
 8001656:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800165a:	ed84 7a01 	vstr	s14, [r4, #4]
 800165e:	e7e3      	b.n	8001628 <__ieee754_rem_pio2f+0x118>
 8001660:	f000 fc6c 	bl	8001f3c <fabsf>
 8001664:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800179c <__ieee754_rem_pio2f+0x28c>
 8001668:	eef6 7a00 	vmov.f32	s15, #96	; 0x60
 800166c:	ee40 7a07 	vmla.f32	s15, s0, s14
 8001670:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001674:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001678:	ee17 0a90 	vmov	r0, s15
 800167c:	eddf 7a41 	vldr	s15, [pc, #260]	; 8001784 <__ieee754_rem_pio2f+0x274>
 8001680:	ee06 0ae7 	vmls.f32	s0, s13, s15
 8001684:	eddf 7a40 	vldr	s15, [pc, #256]	; 8001788 <__ieee754_rem_pio2f+0x278>
 8001688:	281f      	cmp	r0, #31
 800168a:	ee26 7aa7 	vmul.f32	s14, s13, s15
 800168e:	dc1d      	bgt.n	80016cc <__ieee754_rem_pio2f+0x1bc>
 8001690:	1e41      	subs	r1, r0, #1
 8001692:	4b43      	ldr	r3, [pc, #268]	; (80017a0 <__ieee754_rem_pio2f+0x290>)
 8001694:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001698:	f026 02ff 	bic.w	r2, r6, #255	; 0xff
 800169c:	429a      	cmp	r2, r3
 800169e:	d015      	beq.n	80016cc <__ieee754_rem_pio2f+0x1bc>
 80016a0:	ee70 7a47 	vsub.f32	s15, s0, s14
 80016a4:	edc4 7a00 	vstr	s15, [r4]
 80016a8:	ee30 0a67 	vsub.f32	s0, s0, s15
 80016ac:	2d00      	cmp	r5, #0
 80016ae:	ee30 7a47 	vsub.f32	s14, s0, s14
 80016b2:	ed84 7a01 	vstr	s14, [r4, #4]
 80016b6:	dab7      	bge.n	8001628 <__ieee754_rem_pio2f+0x118>
 80016b8:	eef1 7a67 	vneg.f32	s15, s15
 80016bc:	eeb1 7a47 	vneg.f32	s14, s14
 80016c0:	edc4 7a00 	vstr	s15, [r4]
 80016c4:	ed84 7a01 	vstr	s14, [r4, #4]
 80016c8:	4240      	negs	r0, r0
 80016ca:	e7ad      	b.n	8001628 <__ieee754_rem_pio2f+0x118>
 80016cc:	ee70 7a47 	vsub.f32	s15, s0, s14
 80016d0:	15f6      	asrs	r6, r6, #23
 80016d2:	ee17 2a90 	vmov	r2, s15
 80016d6:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 80016da:	1af3      	subs	r3, r6, r3
 80016dc:	2b08      	cmp	r3, #8
 80016de:	edc4 7a00 	vstr	s15, [r4]
 80016e2:	dde1      	ble.n	80016a8 <__ieee754_rem_pio2f+0x198>
 80016e4:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8001794 <__ieee754_rem_pio2f+0x284>
 80016e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016ec:	ee30 6a67 	vsub.f32	s12, s0, s15
 80016f0:	ee30 7a46 	vsub.f32	s14, s0, s12
 80016f4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016f8:	eddf 7a27 	vldr	s15, [pc, #156]	; 8001798 <__ieee754_rem_pio2f+0x288>
 80016fc:	ee16 7aa7 	vnmls.f32	s14, s13, s15
 8001700:	ee76 7a47 	vsub.f32	s15, s12, s14
 8001704:	ee17 2a90 	vmov	r2, s15
 8001708:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 800170c:	1af6      	subs	r6, r6, r3
 800170e:	2e19      	cmp	r6, #25
 8001710:	edc4 7a00 	vstr	s15, [r4]
 8001714:	bfd8      	it	le
 8001716:	eeb0 0a46 	vmovle.f32	s0, s12
 800171a:	ddc5      	ble.n	80016a8 <__ieee754_rem_pio2f+0x198>
 800171c:	eddf 7a21 	vldr	s15, [pc, #132]	; 80017a4 <__ieee754_rem_pio2f+0x294>
 8001720:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001724:	ee36 0a67 	vsub.f32	s0, s12, s15
 8001728:	ee36 7a40 	vsub.f32	s14, s12, s0
 800172c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001730:	eddf 7a1d 	vldr	s15, [pc, #116]	; 80017a8 <__ieee754_rem_pio2f+0x298>
 8001734:	ee16 7aa7 	vnmls.f32	s14, s13, s15
 8001738:	e7b2      	b.n	80016a0 <__ieee754_rem_pio2f+0x190>
 800173a:	429e      	cmp	r6, r3
 800173c:	ee70 7a27 	vadd.f32	s15, s0, s15
 8001740:	bf08      	it	eq
 8001742:	eddf 6a14 	vldreq	s13, [pc, #80]	; 8001794 <__ieee754_rem_pio2f+0x284>
 8001746:	eeb0 7a40 	vmov.f32	s14, s0
 800174a:	bf0b      	itete	eq
 800174c:	ee77 7aa6 	vaddeq.f32	s15, s15, s13
 8001750:	ed9f 7a0d 	vldrne	s14, [pc, #52]	; 8001788 <__ieee754_rem_pio2f+0x278>
 8001754:	ed9f 7a10 	vldreq	s14, [pc, #64]	; 8001798 <__ieee754_rem_pio2f+0x288>
 8001758:	ee77 6a87 	vaddne.f32	s13, s15, s14
 800175c:	bf0c      	ite	eq
 800175e:	ee77 6a87 	vaddeq.f32	s13, s15, s14
 8001762:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8001766:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800176a:	bf08      	it	eq
 800176c:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
 8001770:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001774:	edc4 6a00 	vstr	s13, [r4]
 8001778:	ed84 7a01 	vstr	s14, [r4, #4]
 800177c:	e754      	b.n	8001628 <__ieee754_rem_pio2f+0x118>
 800177e:	2303      	movs	r3, #3
 8001780:	e735      	b.n	80015ee <__ieee754_rem_pio2f+0xde>
 8001782:	bf00      	nop
 8001784:	3fc90f80 	.word	0x3fc90f80
 8001788:	37354443 	.word	0x37354443
 800178c:	43800000 	.word	0x43800000
 8001790:	080023a8 	.word	0x080023a8
 8001794:	37354400 	.word	0x37354400
 8001798:	2e85a308 	.word	0x2e85a308
 800179c:	3f22f984 	.word	0x3f22f984
 80017a0:	08002328 	.word	0x08002328
 80017a4:	2e85a300 	.word	0x2e85a300
 80017a8:	248d3132 	.word	0x248d3132

080017ac <__kernel_cosf>:
 80017ac:	ee10 3a10 	vmov	r3, s0
 80017b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80017b4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80017b8:	da2c      	bge.n	8001814 <__kernel_cosf+0x68>
 80017ba:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80017be:	ee17 3a90 	vmov	r3, s15
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d067      	beq.n	8001896 <__kernel_cosf+0xea>
 80017c6:	ee60 7a00 	vmul.f32	s15, s0, s0
 80017ca:	eddf 6a34 	vldr	s13, [pc, #208]	; 800189c <__kernel_cosf+0xf0>
 80017ce:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80018a0 <__kernel_cosf+0xf4>
 80017d2:	ee07 7aa6 	vmla.f32	s14, s15, s13
 80017d6:	eddf 6a33 	vldr	s13, [pc, #204]	; 80018a4 <__kernel_cosf+0xf8>
 80017da:	ee57 6a27 	vnmls.f32	s13, s14, s15
 80017de:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80018a8 <__kernel_cosf+0xfc>
 80017e2:	ee06 7aa7 	vmla.f32	s14, s13, s15
 80017e6:	eddf 6a31 	vldr	s13, [pc, #196]	; 80018ac <__kernel_cosf+0x100>
 80017ea:	ee57 6a27 	vnmls.f32	s13, s14, s15
 80017ee:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80018b0 <__kernel_cosf+0x104>
 80017f2:	ee06 7aa7 	vmla.f32	s14, s13, s15
 80017f6:	ee67 6a27 	vmul.f32	s13, s14, s15
 80017fa:	ee20 7a20 	vmul.f32	s14, s0, s1
 80017fe:	ee17 7aa6 	vnmls.f32	s14, s15, s13
 8001802:	eef6 6a00 	vmov.f32	s13, #96	; 0x60
 8001806:	ee17 7aa6 	vnmls.f32	s14, s15, s13
 800180a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x70
 800180e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8001812:	4770      	bx	lr
 8001814:	ee60 7a00 	vmul.f32	s15, s0, s0
 8001818:	eddf 6a20 	vldr	s13, [pc, #128]	; 800189c <__kernel_cosf+0xf0>
 800181c:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80018a0 <__kernel_cosf+0xf4>
 8001820:	ee07 7aa6 	vmla.f32	s14, s15, s13
 8001824:	eddf 6a1f 	vldr	s13, [pc, #124]	; 80018a4 <__kernel_cosf+0xf8>
 8001828:	ee57 6a27 	vnmls.f32	s13, s14, s15
 800182c:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80018a8 <__kernel_cosf+0xfc>
 8001830:	ee06 7aa7 	vmla.f32	s14, s13, s15
 8001834:	eddf 6a1d 	vldr	s13, [pc, #116]	; 80018ac <__kernel_cosf+0x100>
 8001838:	ee57 6a27 	vnmls.f32	s13, s14, s15
 800183c:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80018b0 <__kernel_cosf+0x104>
 8001840:	ee06 7aa7 	vmla.f32	s14, s13, s15
 8001844:	f649 1299 	movw	r2, #39321	; 0x9999
 8001848:	f6c3 6299 	movt	r2, #16025	; 0x3e99
 800184c:	4293      	cmp	r3, r2
 800184e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001852:	ddd2      	ble.n	80017fa <__kernel_cosf+0x4e>
 8001854:	2200      	movs	r2, #0
 8001856:	f6c3 7248 	movt	r2, #16200	; 0x3f48
 800185a:	4293      	cmp	r3, r2
 800185c:	bfde      	ittt	le
 800185e:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8001862:	ee06 3a10 	vmovle	s12, r3
 8001866:	eeb7 5a00 	vmovle.f32	s10, #112	; 0x70
 800186a:	ee20 7a20 	vmul.f32	s14, s0, s1
 800186e:	bfc8      	it	gt
 8001870:	eeb5 6a02 	vmovgt.f32	s12, #82	; 0x52
 8001874:	eef6 5a00 	vmov.f32	s11, #96	; 0x60
 8001878:	bfd8      	it	le
 800187a:	ee35 5a46 	vsuble.f32	s10, s10, s12
 800187e:	ee17 7aa6 	vnmls.f32	s14, s15, s13
 8001882:	ee17 6aa5 	vnmls.f32	s12, s15, s11
 8001886:	bfc8      	it	gt
 8001888:	eeb6 5a07 	vmovgt.f32	s10, #103	; 0x67
 800188c:	ee36 7a47 	vsub.f32	s14, s12, s14
 8001890:	ee35 0a47 	vsub.f32	s0, s10, s14
 8001894:	4770      	bx	lr
 8001896:	eeb7 0a00 	vmov.f32	s0, #112	; 0x70
 800189a:	4770      	bx	lr
 800189c:	ad47d74e 	.word	0xad47d74e
 80018a0:	310f74f6 	.word	0x310f74f6
 80018a4:	3493f27c 	.word	0x3493f27c
 80018a8:	37d00d01 	.word	0x37d00d01
 80018ac:	3ab60b61 	.word	0x3ab60b61
 80018b0:	3d2aaaab 	.word	0x3d2aaaab

080018b4 <__kernel_rem_pio2f>:
 80018b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018b8:	ed2d 8b04 	vpush	{d8-d9}
 80018bc:	b0d7      	sub	sp, #348	; 0x15c
 80018be:	1d16      	adds	r6, r2, #4
 80018c0:	1ed5      	subs	r5, r2, #3
 80018c2:	bf58      	it	pl
 80018c4:	462e      	movpl	r6, r5
 80018c6:	9f64      	ldr	r7, [sp, #400]	; 0x190
 80018c8:	4cb0      	ldr	r4, [pc, #704]	; (8001b8c <__kernel_rem_pio2f+0x2d8>)
 80018ca:	10f6      	asrs	r6, r6, #3
 80018cc:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 80018d0:	f854 4027 	ldr.w	r4, [r4, r7, lsl #2]
 80018d4:	9602      	str	r6, [sp, #8]
 80018d6:	ea6f 0806 	mvn.w	r8, r6
 80018da:	1e5e      	subs	r6, r3, #1
 80018dc:	4607      	mov	r7, r0
 80018de:	1930      	adds	r0, r6, r4
 80018e0:	461d      	mov	r5, r3
 80018e2:	468a      	mov	sl, r1
 80018e4:	eb02 08c8 	add.w	r8, r2, r8, lsl #3
 80018e8:	d421      	bmi.n	800192e <__kernel_rem_pio2f+0x7a>
 80018ea:	f8dd 9008 	ldr.w	r9, [sp, #8]
 80018ee:	9a65      	ldr	r2, [sp, #404]	; 0x194
 80018f0:	ebc6 0309 	rsb	r3, r6, r9
 80018f4:	a91a      	add	r1, sp, #104	; 0x68
 80018f6:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
 80018fa:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 80018fe:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 8001902:	2100      	movs	r1, #0
 8001904:	46a1      	mov	r9, r4
 8001906:	4662      	mov	r2, ip
 8001908:	2b00      	cmp	r3, #0
 800190a:	bfa5      	ittet	ge
 800190c:	f85e 4001 	ldrge.w	r4, [lr, r1]
 8001910:	ee06 4a90 	vmovge	s13, r4
 8001914:	eddf 7a9e 	vldrlt	s15, [pc, #632]	; 8001b90 <__kernel_rem_pio2f+0x2dc>
 8001918:	eef8 7ae6 	vcvtge.f32.s32	s15, s13
 800191c:	3301      	adds	r3, #1
 800191e:	ee17 4a90 	vmov	r4, s15
 8001922:	f842 4f04 	str.w	r4, [r2, #4]!
 8001926:	3104      	adds	r1, #4
 8001928:	4282      	cmp	r2, r0
 800192a:	d1ed      	bne.n	8001908 <__kernel_rem_pio2f+0x54>
 800192c:	464c      	mov	r4, r9
 800192e:	2c00      	cmp	r4, #0
 8001930:	db21      	blt.n	8001976 <__kernel_rem_pio2f+0xc2>
 8001932:	f50d 7984 	add.w	r9, sp, #264	; 0x108
 8001936:	f50d 7e82 	add.w	lr, sp, #260	; 0x104
 800193a:	4628      	mov	r0, r5
 800193c:	eb09 0c84 	add.w	ip, r9, r4, lsl #2
 8001940:	2e00      	cmp	r6, #0
 8001942:	f2c0 81d7 	blt.w	8001cf4 <__kernel_rem_pio2f+0x440>
 8001946:	ab1a      	add	r3, sp, #104	; 0x68
 8001948:	eddf 7a91 	vldr	s15, [pc, #580]	; 8001b90 <__kernel_rem_pio2f+0x2dc>
 800194c:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8001950:	1f39      	subs	r1, r7, #4
 8001952:	2300      	movs	r3, #0
 8001954:	3104      	adds	r1, #4
 8001956:	edd1 6a00 	vldr	s13, [r1]
 800195a:	ed32 7a01 	vldmdb	r2!, {s14}
 800195e:	3301      	adds	r3, #1
 8001960:	42ab      	cmp	r3, r5
 8001962:	ee46 7a87 	vmla.f32	s15, s13, s14
 8001966:	d1f5      	bne.n	8001954 <__kernel_rem_pio2f+0xa0>
 8001968:	ee17 1a90 	vmov	r1, s15
 800196c:	f84e 1f04 	str.w	r1, [lr, #4]!
 8001970:	3001      	adds	r0, #1
 8001972:	45e6      	cmp	lr, ip
 8001974:	d1e4      	bne.n	8001940 <__kernel_rem_pio2f+0x8c>
 8001976:	1e62      	subs	r2, r4, #1
 8001978:	ab06      	add	r3, sp, #24
 800197a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800197e:	ed9f 8a86 	vldr	s16, [pc, #536]	; 8001b98 <__kernel_rem_pio2f+0x2e4>
 8001982:	eddf 8a84 	vldr	s17, [pc, #528]	; 8001b94 <__kernel_rem_pio2f+0x2e0>
 8001986:	9203      	str	r2, [sp, #12]
 8001988:	46a3      	mov	fp, r4
 800198a:	9304      	str	r3, [sp, #16]
 800198c:	f8cd a014 	str.w	sl, [sp, #20]
 8001990:	ea4f 098b 	mov.w	r9, fp, lsl #2
 8001994:	a856      	add	r0, sp, #344	; 0x158
 8001996:	eb00 0309 	add.w	r3, r0, r9
 800199a:	f1bb 0f00 	cmp.w	fp, #0
 800199e:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 80019a2:	dd1b      	ble.n	80019dc <__kernel_rem_pio2f+0x128>
 80019a4:	ab05      	add	r3, sp, #20
 80019a6:	a942      	add	r1, sp, #264	; 0x108
 80019a8:	eb01 0209 	add.w	r2, r1, r9
 80019ac:	eb03 0009 	add.w	r0, r3, r9
 80019b0:	ee60 7a08 	vmul.f32	s15, s0, s16
 80019b4:	eeb0 7a40 	vmov.f32	s14, s0
 80019b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019bc:	ed72 6a01 	vldmdb	r2!, {s13}
 80019c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019c4:	ee07 7ae8 	vmls.f32	s14, s15, s17
 80019c8:	ee36 0aa7 	vadd.f32	s0, s13, s15
 80019cc:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80019d0:	ee17 1a10 	vmov	r1, s14
 80019d4:	f843 1f04 	str.w	r1, [r3, #4]!
 80019d8:	4283      	cmp	r3, r0
 80019da:	d1e9      	bne.n	80019b0 <__kernel_rem_pio2f+0xfc>
 80019dc:	4640      	mov	r0, r8
 80019de:	f000 fafd 	bl	8001fdc <scalbnf>
 80019e2:	eef4 7a00 	vmov.f32	s15, #64	; 0x40
 80019e6:	eeb0 9a40 	vmov.f32	s18, s0
 80019ea:	ee20 0a27 	vmul.f32	s0, s0, s15
 80019ee:	f000 faad 	bl	8001f4c <floorf>
 80019f2:	eef2 7a00 	vmov.f32	s15, #32
 80019f6:	ee00 9a67 	vmls.f32	s18, s0, s15
 80019fa:	f1b8 0f00 	cmp.w	r8, #0
 80019fe:	eefd 6ac9 	vcvt.s32.f32	s13, s18
 8001a02:	eef8 7ae6 	vcvt.f32.s32	s15, s13
 8001a06:	edcd 6a01 	vstr	s13, [sp, #4]
 8001a0a:	ee39 9a67 	vsub.f32	s18, s18, s15
 8001a0e:	f340 80b3 	ble.w	8001b78 <__kernel_rem_pio2f+0x2c4>
 8001a12:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8001a16:	a906      	add	r1, sp, #24
 8001a18:	f1c8 0008 	rsb	r0, r8, #8
 8001a1c:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 8001a20:	fa53 f100 	asrs.w	r1, r3, r0
 8001a24:	fa11 f000 	lsls.w	r0, r1, r0
 8001a28:	1a1b      	subs	r3, r3, r0
 8001a2a:	ee16 0a90 	vmov	r0, s13
 8001a2e:	1840      	adds	r0, r0, r1
 8001a30:	a906      	add	r1, sp, #24
 8001a32:	f1c8 0a07 	rsb	sl, r8, #7
 8001a36:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8001a3a:	9001      	str	r0, [sp, #4]
 8001a3c:	fa43 fa0a 	asr.w	sl, r3, sl
 8001a40:	f1ba 0f00 	cmp.w	sl, #0
 8001a44:	dd2d      	ble.n	8001aa2 <__kernel_rem_pio2f+0x1ee>
 8001a46:	9b01      	ldr	r3, [sp, #4]
 8001a48:	2100      	movs	r1, #0
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	f1bb 0f00 	cmp.w	fp, #0
 8001a50:	9301      	str	r3, [sp, #4]
 8001a52:	dd10      	ble.n	8001a76 <__kernel_rem_pio2f+0x1c2>
 8001a54:	ab06      	add	r3, sp, #24
 8001a56:	eb03 0e09 	add.w	lr, r3, r9
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8001a60:	f1c2 00ff 	rsb	r0, r2, #255	; 0xff
 8001a64:	b911      	cbnz	r1, 8001a6c <__kernel_rem_pio2f+0x1b8>
 8001a66:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 8001a6a:	b112      	cbz	r2, 8001a72 <__kernel_rem_pio2f+0x1be>
 8001a6c:	f843 0c04 	str.w	r0, [r3, #-4]
 8001a70:	2101      	movs	r1, #1
 8001a72:	4573      	cmp	r3, lr
 8001a74:	d1f2      	bne.n	8001a5c <__kernel_rem_pio2f+0x1a8>
 8001a76:	f1b8 0f00 	cmp.w	r8, #0
 8001a7a:	dd0f      	ble.n	8001a9c <__kernel_rem_pio2f+0x1e8>
 8001a7c:	f1b8 0f01 	cmp.w	r8, #1
 8001a80:	f000 8120 	beq.w	8001cc4 <__kernel_rem_pio2f+0x410>
 8001a84:	f1b8 0f02 	cmp.w	r8, #2
 8001a88:	d108      	bne.n	8001a9c <__kernel_rem_pio2f+0x1e8>
 8001a8a:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8001a8e:	a806      	add	r0, sp, #24
 8001a90:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 8001a94:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001a98:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8001a9c:	f1ba 0f02 	cmp.w	sl, #2
 8001aa0:	d07c      	beq.n	8001b9c <__kernel_rem_pio2f+0x2e8>
 8001aa2:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8001aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aaa:	f040 8089 	bne.w	8001bc0 <__kernel_rem_pio2f+0x30c>
 8001aae:	f10b 3cff 	add.w	ip, fp, #4294967295	; 0xffffffff
 8001ab2:	4564      	cmp	r4, ip
 8001ab4:	dc0e      	bgt.n	8001ad4 <__kernel_rem_pio2f+0x220>
 8001ab6:	a906      	add	r1, sp, #24
 8001ab8:	eb01 0309 	add.w	r3, r1, r9
 8001abc:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8001ac6:	4283      	cmp	r3, r0
 8001ac8:	ea42 0201 	orr.w	r2, r2, r1
 8001acc:	d1f9      	bne.n	8001ac2 <__kernel_rem_pio2f+0x20e>
 8001ace:	2a00      	cmp	r2, #0
 8001ad0:	f040 811b 	bne.w	8001d0a <__kernel_rem_pio2f+0x456>
 8001ad4:	a806      	add	r0, sp, #24
 8001ad6:	9a03      	ldr	r2, [sp, #12]
 8001ad8:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 8001adc:	f04f 0a01 	mov.w	sl, #1
 8001ae0:	b943      	cbnz	r3, 8001af4 <__kernel_rem_pio2f+0x240>
 8001ae2:	9b04      	ldr	r3, [sp, #16]
 8001ae4:	f04f 0a01 	mov.w	sl, #1
 8001ae8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8001aec:	f10a 0a01 	add.w	sl, sl, #1
 8001af0:	2a00      	cmp	r2, #0
 8001af2:	d0f9      	beq.n	8001ae8 <__kernel_rem_pio2f+0x234>
 8001af4:	f10b 0001 	add.w	r0, fp, #1
 8001af8:	44da      	add	sl, fp
 8001afa:	4550      	cmp	r0, sl
 8001afc:	dc37      	bgt.n	8001b6e <__kernel_rem_pio2f+0x2ba>
 8001afe:	9a02      	ldr	r2, [sp, #8]
 8001b00:	eb06 0e00 	add.w	lr, r6, r0
 8001b04:	eb0b 0c02 	add.w	ip, fp, r2
 8001b08:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8001b0a:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 8001b0e:	ab1a      	add	r3, sp, #104	; 0x68
 8001b10:	a942      	add	r1, sp, #264	; 0x108
 8001b12:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8001b16:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
 8001b1a:	4489      	add	r9, r1
 8001b1c:	f10a 0b01 	add.w	fp, sl, #1
 8001b20:	f85c 3f04 	ldr.w	r3, [ip, #4]!
 8001b24:	ee06 3a90 	vmov	s13, r3
 8001b28:	eef8 7ae6 	vcvt.f32.s32	s15, s13
 8001b2c:	2e00      	cmp	r6, #0
 8001b2e:	ee17 1a90 	vmov	r1, s15
 8001b32:	f84e 1f04 	str.w	r1, [lr, #4]!
 8001b36:	db1c      	blt.n	8001b72 <__kernel_rem_pio2f+0x2be>
 8001b38:	ab1a      	add	r3, sp, #104	; 0x68
 8001b3a:	1942      	adds	r2, r0, r5
 8001b3c:	eddf 7a14 	vldr	s15, [pc, #80]	; 8001b90 <__kernel_rem_pio2f+0x2dc>
 8001b40:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8001b44:	1f39      	subs	r1, r7, #4
 8001b46:	2300      	movs	r3, #0
 8001b48:	9001      	str	r0, [sp, #4]
 8001b4a:	3104      	adds	r1, #4
 8001b4c:	edd1 6a00 	vldr	s13, [r1]
 8001b50:	ed32 7a01 	vldmdb	r2!, {s14}
 8001b54:	3301      	adds	r3, #1
 8001b56:	42ab      	cmp	r3, r5
 8001b58:	ee46 7a87 	vmla.f32	s15, s13, s14
 8001b5c:	d1f5      	bne.n	8001b4a <__kernel_rem_pio2f+0x296>
 8001b5e:	9801      	ldr	r0, [sp, #4]
 8001b60:	3001      	adds	r0, #1
 8001b62:	ee17 1a90 	vmov	r1, s15
 8001b66:	4558      	cmp	r0, fp
 8001b68:	f849 1f04 	str.w	r1, [r9, #4]!
 8001b6c:	d1d8      	bne.n	8001b20 <__kernel_rem_pio2f+0x26c>
 8001b6e:	46d3      	mov	fp, sl
 8001b70:	e70e      	b.n	8001990 <__kernel_rem_pio2f+0xdc>
 8001b72:	eddf 7a07 	vldr	s15, [pc, #28]	; 8001b90 <__kernel_rem_pio2f+0x2dc>
 8001b76:	e7f3      	b.n	8001b60 <__kernel_rem_pio2f+0x2ac>
 8001b78:	f040 80ae 	bne.w	8001cd8 <__kernel_rem_pio2f+0x424>
 8001b7c:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8001b80:	aa06      	add	r2, sp, #24
 8001b82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b86:	ea4f 2a23 	mov.w	sl, r3, asr #8
 8001b8a:	e759      	b.n	8001a40 <__kernel_rem_pio2f+0x18c>
 8001b8c:	080026c0 	.word	0x080026c0
 8001b90:	00000000 	.word	0x00000000
 8001b94:	43800000 	.word	0x43800000
 8001b98:	3b800000 	.word	0x3b800000
 8001b9c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x70
 8001ba0:	ee30 9a49 	vsub.f32	s18, s0, s18
 8001ba4:	2900      	cmp	r1, #0
 8001ba6:	f43f af7c 	beq.w	8001aa2 <__kernel_rem_pio2f+0x1ee>
 8001baa:	4640      	mov	r0, r8
 8001bac:	f000 fa16 	bl	8001fdc <scalbnf>
 8001bb0:	ee39 9a40 	vsub.f32	s18, s18, s0
 8001bb4:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8001bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bbc:	f43f af77 	beq.w	8001aae <__kernel_rem_pio2f+0x1fa>
 8001bc0:	4653      	mov	r3, sl
 8001bc2:	eeb0 0a49 	vmov.f32	s0, s18
 8001bc6:	f1c8 0000 	rsb	r0, r8, #0
 8001bca:	9300      	str	r3, [sp, #0]
 8001bcc:	f8dd a014 	ldr.w	sl, [sp, #20]
 8001bd0:	f000 fa04 	bl	8001fdc <scalbnf>
 8001bd4:	ed1f 7a11 	vldr	s14, [pc, #-68]	; 8001b94 <__kernel_rem_pio2f+0x2e0>
 8001bd8:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8001bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001be0:	9b00      	ldr	r3, [sp, #0]
 8001be2:	f2c0 8153 	blt.w	8001e8c <__kernel_rem_pio2f+0x5d8>
 8001be6:	ed5f 7a14 	vldr	s15, [pc, #-80]	; 8001b98 <__kernel_rem_pio2f+0x2e4>
 8001bea:	ee60 7a27 	vmul.f32	s15, s0, s15
 8001bee:	f10d 0918 	add.w	r9, sp, #24
 8001bf2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bf6:	f108 0808 	add.w	r8, r8, #8
 8001bfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bfe:	ee07 0ac7 	vmls.f32	s0, s15, s14
 8001c02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c06:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8001c0a:	ee17 2a90 	vmov	r2, s15
 8001c0e:	ee10 1a10 	vmov	r1, s0
 8001c12:	f849 102b 	str.w	r1, [r9, fp, lsl #2]
 8001c16:	f10b 0b01 	add.w	fp, fp, #1
 8001c1a:	f849 202b 	str.w	r2, [r9, fp, lsl #2]
 8001c1e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x70
 8001c22:	4640      	mov	r0, r8
 8001c24:	9300      	str	r3, [sp, #0]
 8001c26:	f000 f9d9 	bl	8001fdc <scalbnf>
 8001c2a:	f1bb 0f00 	cmp.w	fp, #0
 8001c2e:	9b00      	ldr	r3, [sp, #0]
 8001c30:	db41      	blt.n	8001cb6 <__kernel_rem_pio2f+0x402>
 8001c32:	f10b 0701 	add.w	r7, fp, #1
 8001c36:	00ba      	lsls	r2, r7, #2
 8001c38:	ae42      	add	r6, sp, #264	; 0x108
 8001c3a:	f10d 0818 	add.w	r8, sp, #24
 8001c3e:	ed1f 7a2a 	vldr	s14, [pc, #-168]	; 8001b98 <__kernel_rem_pio2f+0x2e4>
 8001c42:	eb08 0102 	add.w	r1, r8, r2
 8001c46:	18b2      	adds	r2, r6, r2
 8001c48:	f851 0d04 	ldr.w	r0, [r1, #-4]!
 8001c4c:	ee06 0a90 	vmov	s13, r0
 8001c50:	eef8 7ae6 	vcvt.f32.s32	s15, s13
 8001c54:	ee67 7a80 	vmul.f32	s15, s15, s0
 8001c58:	ee20 0a07 	vmul.f32	s0, s0, s14
 8001c5c:	ed62 7a01 	vstmdb	r2!, {s15}
 8001c60:	42b2      	cmp	r2, r6
 8001c62:	d1f1      	bne.n	8001c48 <__kernel_rem_pio2f+0x394>
 8001c64:	2500      	movs	r5, #0
 8001c66:	f10b 3cff 	add.w	ip, fp, #4294967295	; 0xffffffff
 8001c6a:	2c00      	cmp	r4, #0
 8001c6c:	f2c0 810b 	blt.w	8001e86 <__kernel_rem_pio2f+0x5d2>
 8001c70:	2d00      	cmp	r5, #0
 8001c72:	f2c0 8108 	blt.w	8001e86 <__kernel_rem_pio2f+0x5d2>
 8001c76:	ebc5 010c 	rsb	r1, r5, ip
 8001c7a:	488b      	ldr	r0, [pc, #556]	; (8001ea8 <__kernel_rem_pio2f+0x5f4>)
 8001c7c:	eb06 0181 	add.w	r1, r6, r1, lsl #2
 8001c80:	eddf 7a8a 	vldr	s15, [pc, #552]	; 8001eac <__kernel_rem_pio2f+0x5f8>
 8001c84:	2200      	movs	r2, #0
 8001c86:	e001      	b.n	8001c8c <__kernel_rem_pio2f+0x3d8>
 8001c88:	42aa      	cmp	r2, r5
 8001c8a:	dc0c      	bgt.n	8001ca6 <__kernel_rem_pio2f+0x3f2>
 8001c8c:	3004      	adds	r0, #4
 8001c8e:	3104      	adds	r1, #4
 8001c90:	edd0 6a00 	vldr	s13, [r0]
 8001c94:	ed91 7a00 	vldr	s14, [r1]
 8001c98:	3201      	adds	r2, #1
 8001c9a:	4294      	cmp	r4, r2
 8001c9c:	4680      	mov	r8, r0
 8001c9e:	4689      	mov	r9, r1
 8001ca0:	ee46 7a87 	vmla.f32	s15, s13, s14
 8001ca4:	daf0      	bge.n	8001c88 <__kernel_rem_pio2f+0x3d4>
 8001ca6:	a856      	add	r0, sp, #344	; 0x158
 8001ca8:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8001cac:	3501      	adds	r5, #1
 8001cae:	42bd      	cmp	r5, r7
 8001cb0:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 8001cb4:	d1d9      	bne.n	8001c6a <__kernel_rem_pio2f+0x3b6>
 8001cb6:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8001cb8:	2a03      	cmp	r2, #3
 8001cba:	d852      	bhi.n	8001d62 <__kernel_rem_pio2f+0x4ae>
 8001cbc:	e8df f002 	tbb	[pc, r2]
 8001cc0:	599e9ecd 	.word	0x599e9ecd
 8001cc4:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8001cc8:	a806      	add	r0, sp, #24
 8001cca:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 8001cce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001cd2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8001cd6:	e6e1      	b.n	8001a9c <__kernel_rem_pio2f+0x1e8>
 8001cd8:	eef6 7a00 	vmov.f32	s15, #96	; 0x60
 8001cdc:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8001ce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ce4:	bfb8      	it	lt
 8001ce6:	f04f 0a00 	movlt.w	sl, #0
 8001cea:	f6ff aeda 	blt.w	8001aa2 <__kernel_rem_pio2f+0x1ee>
 8001cee:	f04f 0a02 	mov.w	sl, #2
 8001cf2:	e6a8      	b.n	8001a46 <__kernel_rem_pio2f+0x192>
 8001cf4:	eddf 7a6d 	vldr	s15, [pc, #436]	; 8001eac <__kernel_rem_pio2f+0x5f8>
 8001cf8:	ee17 1a90 	vmov	r1, s15
 8001cfc:	f84e 1f04 	str.w	r1, [lr, #4]!
 8001d00:	3001      	adds	r0, #1
 8001d02:	45e6      	cmp	lr, ip
 8001d04:	f47f ae1c 	bne.w	8001940 <__kernel_rem_pio2f+0x8c>
 8001d08:	e635      	b.n	8001976 <__kernel_rem_pio2f+0xc2>
 8001d0a:	af06      	add	r7, sp, #24
 8001d0c:	4653      	mov	r3, sl
 8001d0e:	f857 202c 	ldr.w	r2, [r7, ip, lsl #2]
 8001d12:	f8dd a014 	ldr.w	sl, [sp, #20]
 8001d16:	f1a8 0808 	sub.w	r8, r8, #8
 8001d1a:	46e3      	mov	fp, ip
 8001d1c:	2a00      	cmp	r2, #0
 8001d1e:	f47f af7e 	bne.w	8001c1e <__kernel_rem_pio2f+0x36a>
 8001d22:	eb07 028c 	add.w	r2, r7, ip, lsl #2
 8001d26:	46e3      	mov	fp, ip
 8001d28:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8001d2c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8001d30:	f1a8 0808 	sub.w	r8, r8, #8
 8001d34:	2900      	cmp	r1, #0
 8001d36:	d0f7      	beq.n	8001d28 <__kernel_rem_pio2f+0x474>
 8001d38:	e771      	b.n	8001c1e <__kernel_rem_pio2f+0x36a>
 8001d3a:	eddf 7a5c 	vldr	s15, [pc, #368]	; 8001eac <__kernel_rem_pio2f+0x5f8>
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d053      	beq.n	8001dea <__kernel_rem_pio2f+0x536>
 8001d42:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8001d46:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 8001d4a:	eef1 6a66 	vneg.f32	s13, s13
 8001d4e:	eeb1 7a47 	vneg.f32	s14, s14
 8001d52:	eef1 7a67 	vneg.f32	s15, s15
 8001d56:	edca 6a00 	vstr	s13, [sl]
 8001d5a:	ed8a 7a01 	vstr	s14, [sl, #4]
 8001d5e:	edca 7a02 	vstr	s15, [sl, #8]
 8001d62:	9901      	ldr	r1, [sp, #4]
 8001d64:	f001 0007 	and.w	r0, r1, #7
 8001d68:	b057      	add	sp, #348	; 0x15c
 8001d6a:	ecbd 8b04 	vpop	{d8-d9}
 8001d6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d72:	f1bb 0f00 	cmp.w	fp, #0
 8001d76:	dde0      	ble.n	8001d3a <__kernel_rem_pio2f+0x486>
 8001d78:	f10b 0101 	add.w	r1, fp, #1
 8001d7c:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 8001d80:	eb08 0181 	add.w	r1, r8, r1, lsl #2
 8001d84:	a82f      	add	r0, sp, #188	; 0xbc
 8001d86:	460a      	mov	r2, r1
 8001d88:	ed12 7a01 	vldr	s14, [r2, #-4]
 8001d8c:	ed52 6a02 	vldr	s13, [r2, #-8]
 8001d90:	ee76 7a87 	vadd.f32	s15, s13, s14
 8001d94:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001d98:	ee37 7a26 	vadd.f32	s14, s14, s13
 8001d9c:	ed22 7a01 	vstmdb	r2!, {s14}
 8001da0:	4282      	cmp	r2, r0
 8001da2:	ed42 7a01 	vstr	s15, [r2, #-4]
 8001da6:	d1ef      	bne.n	8001d88 <__kernel_rem_pio2f+0x4d4>
 8001da8:	f1bb 0f01 	cmp.w	fp, #1
 8001dac:	ddc5      	ble.n	8001d3a <__kernel_rem_pio2f+0x486>
 8001dae:	f10d 09b8 	add.w	r9, sp, #184	; 0xb8
 8001db2:	a830      	add	r0, sp, #192	; 0xc0
 8001db4:	460a      	mov	r2, r1
 8001db6:	ed12 7a01 	vldr	s14, [r2, #-4]
 8001dba:	ed52 6a02 	vldr	s13, [r2, #-8]
 8001dbe:	ee76 7a87 	vadd.f32	s15, s13, s14
 8001dc2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001dc6:	ee37 7a26 	vadd.f32	s14, s14, s13
 8001dca:	ed22 7a01 	vstmdb	r2!, {s14}
 8001dce:	4282      	cmp	r2, r0
 8001dd0:	ed42 7a01 	vstr	s15, [r2, #-4]
 8001dd4:	d1ef      	bne.n	8001db6 <__kernel_rem_pio2f+0x502>
 8001dd6:	eddf 7a35 	vldr	s15, [pc, #212]	; 8001eac <__kernel_rem_pio2f+0x5f8>
 8001dda:	ed31 7a01 	vldmdb	r1!, {s14}
 8001dde:	4281      	cmp	r1, r0
 8001de0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001de4:	d1f9      	bne.n	8001dda <__kernel_rem_pio2f+0x526>
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d1ab      	bne.n	8001d42 <__kernel_rem_pio2f+0x48e>
 8001dea:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8001dec:	f8ca 3000 	str.w	r3, [sl]
 8001df0:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8001df2:	edca 7a02 	vstr	s15, [sl, #8]
 8001df6:	f8ca 3004 	str.w	r3, [sl, #4]
 8001dfa:	e7b2      	b.n	8001d62 <__kernel_rem_pio2f+0x4ae>
 8001dfc:	f1bb 0f00 	cmp.w	fp, #0
 8001e00:	db4f      	blt.n	8001ea2 <__kernel_rem_pio2f+0x5ee>
 8001e02:	a92e      	add	r1, sp, #184	; 0xb8
 8001e04:	f10b 0201 	add.w	r2, fp, #1
 8001e08:	eddf 7a28 	vldr	s15, [pc, #160]	; 8001eac <__kernel_rem_pio2f+0x5f8>
 8001e0c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8001e10:	ed32 7a01 	vldmdb	r2!, {s14}
 8001e14:	428a      	cmp	r2, r1
 8001e16:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e1a:	d1f9      	bne.n	8001e10 <__kernel_rem_pio2f+0x55c>
 8001e1c:	eeb1 7a67 	vneg.f32	s14, s15
 8001e20:	b90b      	cbnz	r3, 8001e26 <__kernel_rem_pio2f+0x572>
 8001e22:	eeb0 7a67 	vmov.f32	s14, s15
 8001e26:	ed8a 7a00 	vstr	s14, [sl]
 8001e2a:	ed9d 7a2e 	vldr	s14, [sp, #184]	; 0xb8
 8001e2e:	f1bb 0f00 	cmp.w	fp, #0
 8001e32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e36:	dd0a      	ble.n	8001e4e <__kernel_rem_pio2f+0x59a>
 8001e38:	aa2e      	add	r2, sp, #184	; 0xb8
 8001e3a:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 8001e3e:	3204      	adds	r2, #4
 8001e40:	ed92 7a00 	vldr	s14, [r2]
 8001e44:	455a      	cmp	r2, fp
 8001e46:	4617      	mov	r7, r2
 8001e48:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e4c:	d1f7      	bne.n	8001e3e <__kernel_rem_pio2f+0x58a>
 8001e4e:	b10b      	cbz	r3, 8001e54 <__kernel_rem_pio2f+0x5a0>
 8001e50:	eef1 7a67 	vneg.f32	s15, s15
 8001e54:	edca 7a01 	vstr	s15, [sl, #4]
 8001e58:	e783      	b.n	8001d62 <__kernel_rem_pio2f+0x4ae>
 8001e5a:	f1bb 0f00 	cmp.w	fp, #0
 8001e5e:	db1d      	blt.n	8001e9c <__kernel_rem_pio2f+0x5e8>
 8001e60:	a92e      	add	r1, sp, #184	; 0xb8
 8001e62:	f10b 0201 	add.w	r2, fp, #1
 8001e66:	eddf 7a11 	vldr	s15, [pc, #68]	; 8001eac <__kernel_rem_pio2f+0x5f8>
 8001e6a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8001e6e:	ed32 7a01 	vldmdb	r2!, {s14}
 8001e72:	428a      	cmp	r2, r1
 8001e74:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e78:	d1f9      	bne.n	8001e6e <__kernel_rem_pio2f+0x5ba>
 8001e7a:	b10b      	cbz	r3, 8001e80 <__kernel_rem_pio2f+0x5cc>
 8001e7c:	eef1 7a67 	vneg.f32	s15, s15
 8001e80:	edca 7a00 	vstr	s15, [sl]
 8001e84:	e76d      	b.n	8001d62 <__kernel_rem_pio2f+0x4ae>
 8001e86:	eddf 7a09 	vldr	s15, [pc, #36]	; 8001eac <__kernel_rem_pio2f+0x5f8>
 8001e8a:	e70c      	b.n	8001ca6 <__kernel_rem_pio2f+0x3f2>
 8001e8c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8001e90:	a806      	add	r0, sp, #24
 8001e92:	ee10 2a10 	vmov	r2, s0
 8001e96:	f840 202b 	str.w	r2, [r0, fp, lsl #2]
 8001e9a:	e6c0      	b.n	8001c1e <__kernel_rem_pio2f+0x36a>
 8001e9c:	eddf 7a03 	vldr	s15, [pc, #12]	; 8001eac <__kernel_rem_pio2f+0x5f8>
 8001ea0:	e7eb      	b.n	8001e7a <__kernel_rem_pio2f+0x5c6>
 8001ea2:	eddf 7a02 	vldr	s15, [pc, #8]	; 8001eac <__kernel_rem_pio2f+0x5f8>
 8001ea6:	e7b9      	b.n	8001e1c <__kernel_rem_pio2f+0x568>
 8001ea8:	080026c8 	.word	0x080026c8
 8001eac:	00000000 	.word	0x00000000

08001eb0 <__kernel_sinf>:
 8001eb0:	ee10 3a10 	vmov	r3, s0
 8001eb4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001eb8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8001ebc:	da04      	bge.n	8001ec8 <__kernel_sinf+0x18>
 8001ebe:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8001ec2:	ee17 3a90 	vmov	r3, s15
 8001ec6:	b323      	cbz	r3, 8001f12 <__kernel_sinf+0x62>
 8001ec8:	ee60 7a00 	vmul.f32	s15, s0, s0
 8001ecc:	eddf 6a15 	vldr	s13, [pc, #84]	; 8001f24 <__kernel_sinf+0x74>
 8001ed0:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001f28 <__kernel_sinf+0x78>
 8001ed4:	ee17 7aa6 	vnmls.f32	s14, s15, s13
 8001ed8:	eddf 6a14 	vldr	s13, [pc, #80]	; 8001f2c <__kernel_sinf+0x7c>
 8001edc:	ee47 6a27 	vmla.f32	s13, s14, s15
 8001ee0:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001f30 <__kernel_sinf+0x80>
 8001ee4:	ee16 7aa7 	vnmls.f32	s14, s13, s15
 8001ee8:	eddf 6a12 	vldr	s13, [pc, #72]	; 8001f34 <__kernel_sinf+0x84>
 8001eec:	ee27 6a80 	vmul.f32	s12, s15, s0
 8001ef0:	ee47 6a27 	vmla.f32	s13, s14, s15
 8001ef4:	b170      	cbz	r0, 8001f14 <__kernel_sinf+0x64>
 8001ef6:	ee26 7a26 	vmul.f32	s14, s12, s13
 8001efa:	eef6 6a00 	vmov.f32	s13, #96	; 0x60
 8001efe:	ee10 7aa6 	vnmls.f32	s14, s1, s13
 8001f02:	ee57 0a27 	vnmls.f32	s1, s14, s15
 8001f06:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8001f38 <__kernel_sinf+0x88>
 8001f0a:	ee46 0a27 	vmla.f32	s1, s12, s15
 8001f0e:	ee30 0a60 	vsub.f32	s0, s0, s1
 8001f12:	4770      	bx	lr
 8001f14:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001f38 <__kernel_sinf+0x88>
 8001f18:	ee17 7aa6 	vnmls.f32	s14, s15, s13
 8001f1c:	ee07 0a06 	vmla.f32	s0, s14, s12
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	2f2ec9d3 	.word	0x2f2ec9d3
 8001f28:	32d72f34 	.word	0x32d72f34
 8001f2c:	3638ef1b 	.word	0x3638ef1b
 8001f30:	39500d01 	.word	0x39500d01
 8001f34:	3c088889 	.word	0x3c088889
 8001f38:	3e2aaaab 	.word	0x3e2aaaab

08001f3c <fabsf>:
 8001f3c:	ee10 2a10 	vmov	r2, s0
 8001f40:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8001f44:	ee00 3a10 	vmov	s0, r3
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop

08001f4c <floorf>:
 8001f4c:	ee10 3a10 	vmov	r3, s0
 8001f50:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8001f54:	0dca      	lsrs	r2, r1, #23
 8001f56:	3a7f      	subs	r2, #127	; 0x7f
 8001f58:	2a16      	cmp	r2, #22
 8001f5a:	b410      	push	{r4}
 8001f5c:	dc1a      	bgt.n	8001f94 <floorf+0x48>
 8001f5e:	2a00      	cmp	r2, #0
 8001f60:	ee10 4a10 	vmov	r4, s0
 8001f64:	db1d      	blt.n	8001fa2 <floorf+0x56>
 8001f66:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001f6a:	f2c0 007f 	movt	r0, #127	; 0x7f
 8001f6e:	4110      	asrs	r0, r2
 8001f70:	4218      	tst	r0, r3
 8001f72:	d014      	beq.n	8001f9e <floorf+0x52>
 8001f74:	eddf 7a18 	vldr	s15, [pc, #96]	; 8001fd8 <floorf+0x8c>
 8001f78:	ee30 0a27 	vadd.f32	s0, s0, s15
 8001f7c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8001f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f84:	dd03      	ble.n	8001f8e <floorf+0x42>
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	db1f      	blt.n	8001fca <floorf+0x7e>
 8001f8a:	ea24 0300 	bic.w	r3, r4, r0
 8001f8e:	ee00 3a10 	vmov	s0, r3
 8001f92:	e004      	b.n	8001f9e <floorf+0x52>
 8001f94:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8001f98:	bf28      	it	cs
 8001f9a:	ee30 0a00 	vaddcs.f32	s0, s0, s0
 8001f9e:	bc10      	pop	{r4}
 8001fa0:	4770      	bx	lr
 8001fa2:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8001fd8 <floorf+0x8c>
 8001fa6:	ee30 0a27 	vadd.f32	s0, s0, s15
 8001faa:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8001fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fb2:	ddec      	ble.n	8001f8e <floorf+0x42>
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	db01      	blt.n	8001fbc <floorf+0x70>
 8001fb8:	2300      	movs	r3, #0
 8001fba:	e7e8      	b.n	8001f8e <floorf+0x42>
 8001fbc:	2000      	movs	r0, #0
 8001fbe:	f6cb 7080 	movt	r0, #49024	; 0xbf80
 8001fc2:	2900      	cmp	r1, #0
 8001fc4:	bf18      	it	ne
 8001fc6:	4603      	movne	r3, r0
 8001fc8:	e7e1      	b.n	8001f8e <floorf+0x42>
 8001fca:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001fce:	fa53 f202 	asrs.w	r2, r3, r2
 8001fd2:	18a4      	adds	r4, r4, r2
 8001fd4:	e7d9      	b.n	8001f8a <floorf+0x3e>
 8001fd6:	bf00      	nop
 8001fd8:	7149f2ca 	.word	0x7149f2ca

08001fdc <scalbnf>:
 8001fdc:	b508      	push	{r3, lr}
 8001fde:	ee10 3a10 	vmov	r3, s0
 8001fe2:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8001fe6:	ed2d 8b02 	vpush	{d8}
 8001fea:	d026      	beq.n	800203a <scalbnf+0x5e>
 8001fec:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8001ff0:	bf28      	it	cs
 8001ff2:	ee30 0a00 	vaddcs.f32	s0, s0, s0
 8001ff6:	d220      	bcs.n	800203a <scalbnf+0x5e>
 8001ff8:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8001ffc:	d320      	bcc.n	8002040 <scalbnf+0x64>
 8001ffe:	0dd2      	lsrs	r2, r2, #23
 8002000:	1812      	adds	r2, r2, r0
 8002002:	2afe      	cmp	r2, #254	; 0xfe
 8002004:	dc2c      	bgt.n	8002060 <scalbnf+0x84>
 8002006:	2a00      	cmp	r2, #0
 8002008:	bfc2      	ittt	gt
 800200a:	f023 43ff 	bicgt.w	r3, r3, #2139095040	; 0x7f800000
 800200e:	ea43 53c2 	orrgt.w	r3, r3, r2, lsl #23
 8002012:	ee00 3a10 	vmovgt	s0, r3
 8002016:	dc10      	bgt.n	800203a <scalbnf+0x5e>
 8002018:	f112 0f16 	cmn.w	r2, #22
 800201c:	da30      	bge.n	8002080 <scalbnf+0xa4>
 800201e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8002022:	4298      	cmp	r0, r3
 8002024:	dc1c      	bgt.n	8002060 <scalbnf+0x84>
 8002026:	ed9f 8a1c 	vldr	s16, [pc, #112]	; 8002098 <scalbnf+0xbc>
 800202a:	eef0 0a40 	vmov.f32	s1, s0
 800202e:	eeb0 0a48 	vmov.f32	s0, s16
 8002032:	f000 f839 	bl	80020a8 <copysignf>
 8002036:	ee20 0a08 	vmul.f32	s0, s0, s16
 800203a:	ecbd 8b02 	vpop	{d8}
 800203e:	bd08      	pop	{r3, pc}
 8002040:	f643 43b0 	movw	r3, #15536	; 0x3cb0
 8002044:	f6cf 73ff 	movt	r3, #65535	; 0xffff
 8002048:	eddf 7a14 	vldr	s15, [pc, #80]	; 800209c <scalbnf+0xc0>
 800204c:	4298      	cmp	r0, r3
 800204e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8002052:	db10      	blt.n	8002076 <scalbnf+0x9a>
 8002054:	ee10 3a10 	vmov	r3, s0
 8002058:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800205c:	3a19      	subs	r2, #25
 800205e:	e7cf      	b.n	8002000 <scalbnf+0x24>
 8002060:	ed9f 8a0f 	vldr	s16, [pc, #60]	; 80020a0 <scalbnf+0xc4>
 8002064:	eef0 0a40 	vmov.f32	s1, s0
 8002068:	eeb0 0a48 	vmov.f32	s0, s16
 800206c:	f000 f81c 	bl	80020a8 <copysignf>
 8002070:	ee20 0a08 	vmul.f32	s0, s0, s16
 8002074:	e7e1      	b.n	800203a <scalbnf+0x5e>
 8002076:	eddf 7a08 	vldr	s15, [pc, #32]	; 8002098 <scalbnf+0xbc>
 800207a:	ee20 0a27 	vmul.f32	s0, s0, s15
 800207e:	e7dc      	b.n	800203a <scalbnf+0x5e>
 8002080:	3219      	adds	r2, #25
 8002082:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8002086:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800208a:	eddf 7a06 	vldr	s15, [pc, #24]	; 80020a4 <scalbnf+0xc8>
 800208e:	ee07 3a10 	vmov	s14, r3
 8002092:	ee27 0a27 	vmul.f32	s0, s14, s15
 8002096:	e7d0      	b.n	800203a <scalbnf+0x5e>
 8002098:	0da24260 	.word	0x0da24260
 800209c:	4c000000 	.word	0x4c000000
 80020a0:	7149f2ca 	.word	0x7149f2ca
 80020a4:	33000000 	.word	0x33000000

080020a8 <copysignf>:
 80020a8:	ee10 1a10 	vmov	r1, s0
 80020ac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80020b0:	ee10 1a90 	vmov	r1, s1
 80020b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80020b8:	4313      	orrs	r3, r2
 80020ba:	ee00 3a10 	vmov	s0, r3
 80020be:	4770      	bx	lr

080020c0 <_GLOBAL__sub_I_rx3>:

	// instance variables
	ring & rx, & tx;
	USART_TypeDef * USARTx;
public:
	USARTSerial(USART_TypeDef * usartx, ring & rxbuf, ring & txbuf) : rx(rxbuf), tx(txbuf) {
 80020c0:	f240 0398 	movw	r3, #152	; 0x98
 80020c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
		USARTx = usartx;
 80020c8:	f44f 4290 	mov.w	r2, #18432	; 0x4800

	// instance variables
	ring & rx, & tx;
	USART_TypeDef * USARTx;
public:
	USARTSerial(USART_TypeDef * usartx, ring & rxbuf, ring & txbuf) : rx(rxbuf), tx(txbuf) {
 80020cc:	f503 7184 	add.w	r1, r3, #264	; 0x108
		USARTx = usartx;
 80020d0:	f2c4 0200 	movt	r2, #16384	; 0x4000

	// instance variables
	ring & rx, & tx;
	USART_TypeDef * USARTx;
public:
	USARTSerial(USART_TypeDef * usartx, ring & rxbuf, ring & txbuf) : rx(rxbuf), tx(txbuf) {
 80020d4:	f8c3 3210 	str.w	r3, [r3, #528]	; 0x210
 80020d8:	f8c3 1214 	str.w	r1, [r3, #532]	; 0x214
		USARTx = usartx;
 80020dc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		} else {
			USART_SendData(USART3, tx3.ringout());
		}
	}
}
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop

080020e4 <main>:
#include <stm32f4xx_conf.h>

#include "armduino.h"
#include "USARTSerial.h"

int main(void) {
 80020e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020e8:	ed2d 8b04 	vpush	{d8-d9}

	usart3.begin(38400);
 80020ec:	4876      	ldr	r0, [pc, #472]	; (80022c8 <main+0x1e4>)
#include <stm32f4xx_conf.h>

#include "armduino.h"
#include "USARTSerial.h"

int main(void) {
 80020ee:	b082      	sub	sp, #8

	usart3.begin(38400);
 80020f0:	f44f 4116 	mov.w	r1, #38400	; 0x9600
 80020f4:	f7fe f848 	bl	8000188 <_ZN11USARTSerial5beginEm>
	uint16_t print(const float val, uint8_t prec = 2) {
		return printFloat(val, prec);
	}

	uint16_t println() { return print(nl); }
	uint16_t println(const char * s) { return print(s) + println(); }
 80020f8:	4974      	ldr	r1, [pc, #464]	; (80022cc <main+0x1e8>)
 80020fa:	4873      	ldr	r0, [pc, #460]	; (80022c8 <main+0x1e4>)
 80020fc:	f7fe f904 	bl	8000308 <_ZN11USARTSerial5printEPKc>
	uint16_t write(const uint16_t ch);
	uint16_t write(uint16_t * p, uint16_t length);
	uint16_t read();
	uint16_t available();

	uint16_t print(const char c) { return write((uint16_t)c); }
 8002100:	210a      	movs	r1, #10
 8002102:	4871      	ldr	r0, [pc, #452]	; (80022c8 <main+0x1e4>)
 8002104:	f7fe f8b4 	bl	8000270 <_ZN11USARTSerial5writeEt>
 8002108:	210a      	movs	r1, #10
 800210a:	486f      	ldr	r0, [pc, #444]	; (80022c8 <main+0x1e4>)
 800210c:	f7fe f8b0 	bl	8000270 <_ZN11USARTSerial5writeEt>
	usart3.println("Hi.");
	usart3.println();

	pinMode(PD12 | PD13 | PD14 | PD15, GPIO_Mode_OUT);
 8002110:	f44f 209e 	mov.w	r0, #323584	; 0x4f000
 8002114:	2101      	movs	r1, #1
 8002116:	f7fe fa11 	bl	800053c <pinMode>
		digitalWrite(PD12 | PD13 | PD14, RESET);
		_delay_ms(dval);

		usart3.print((float)(count++ / 32.0f), 3);
		usart3.print(", ");
		dval = (uint32) (92.0f + 36*sinf( (count % (uint32)(3.14159 * 2 * 32))/32.0f));
 800211a:	f641 1679 	movw	r6, #6521	; 0x1979
		_delay_ms(dval);
		digitalWrite(PD15, SET);
		digitalWrite(PD12 | PD13 | PD14, RESET);
		_delay_ms(dval);

		usart3.print((float)(count++ / 32.0f), 3);
 800211e:	ed9f 8a6c 	vldr	s16, [pc, #432]	; 80022d0 <main+0x1ec>
		usart3.print(", ");
		dval = (uint32) (92.0f + 36*sinf( (count % (uint32)(3.14159 * 2 * 32))/32.0f));
 8002122:	eddf 8a6c 	vldr	s17, [pc, #432]	; 80022d4 <main+0x1f0>
 8002126:	ed9f 9a6c 	vldr	s18, [pc, #432]	; 80022d8 <main+0x1f4>

	pinMode(PD12 | PD13 | PD14 | PD15, GPIO_Mode_OUT);
		//GPIO_Speed_50MHz, GPIO_OType_PP, GPIO_PuPd_NOPULL);

	uint16_t count = 0;
	uint32_t dval = 50;
 800212a:	2432      	movs	r4, #50	; 0x32
	usart3.println();

	pinMode(PD12 | PD13 | PD14 | PD15, GPIO_Mode_OUT);
		//GPIO_Speed_50MHz, GPIO_OType_PP, GPIO_PuPd_NOPULL);

	uint16_t count = 0;
 800212c:	2500      	movs	r5, #0
		digitalWrite(PD12 | PD13 | PD14, RESET);
		_delay_ms(dval);

		usart3.print((float)(count++ / 32.0f), 3);
		usart3.print(", ");
		dval = (uint32) (92.0f + 36*sinf( (count % (uint32)(3.14159 * 2 * 32))/32.0f));
 800212e:	f2c0 268c 	movt	r6, #652	; 0x28c

	uint16_t count = 0;
	uint32_t dval = 50;

	while (1) {
		digitalWrite(PD12, SET);
 8002132:	f44f 2082 	mov.w	r0, #266240	; 0x41000
 8002136:	2101      	movs	r1, #1
 8002138:	f7fe fa42 	bl	80005c0 <digitalWrite>
		digitalWrite(PD13 | PD14 | PD15, RESET);
 800213c:	4627      	mov	r7, r4
 800213e:	2100      	movs	r1, #0
 8002140:	f44f 209c 	mov.w	r0, #319488	; 0x4e000
 8002144:	f7fe fa3c 	bl	80005c0 <digitalWrite>
    __asm__ __volatile__ ("nop\n\t":::"memory");	\
} while (0)

inline void _delay_ms(uint32_t t) {
	while (t-- > 0) {
		__delay();
 8002148:	2100      	movs	r1, #0
 800214a:	f242 720f 	movw	r2, #9999	; 0x270f
  for (i = 0; i < 10000; ++i)				\
    __asm__ __volatile__ ("nop\n\t":::"memory");	\
} while (0)

inline void _delay_ms(uint32_t t) {
	while (t-- > 0) {
 800214e:	b13f      	cbz	r7, 8002160 <main+0x7c>
		__delay();
 8002150:	9101      	str	r1, [sp, #4]
 8002152:	9b01      	ldr	r3, [sp, #4]
 8002154:	4293      	cmp	r3, r2
 8002156:	f240 8092 	bls.w	800227e <main+0x19a>
 800215a:	3f01      	subs	r7, #1
  for (i = 0; i < 10000; ++i)				\
    __asm__ __volatile__ ("nop\n\t":::"memory");	\
} while (0)

inline void _delay_ms(uint32_t t) {
	while (t-- > 0) {
 800215c:	2f00      	cmp	r7, #0
 800215e:	d1f7      	bne.n	8002150 <main+0x6c>
		_delay_ms(dval);
		digitalWrite(PD13, SET);
 8002160:	f44f 2084 	mov.w	r0, #270336	; 0x42000
 8002164:	2101      	movs	r1, #1
 8002166:	f7fe fa2b 	bl	80005c0 <digitalWrite>
		digitalWrite(PD12 | PD14 | PD15, RESET);
 800216a:	46a0      	mov	r8, r4
 800216c:	f44f 209a 	mov.w	r0, #315392	; 0x4d000
 8002170:	4639      	mov	r1, r7
 8002172:	f7fe fa25 	bl	80005c0 <digitalWrite>
		__delay();
 8002176:	f242 720f 	movw	r2, #9999	; 0x270f
  for (i = 0; i < 10000; ++i)				\
    __asm__ __volatile__ ("nop\n\t":::"memory");	\
} while (0)

inline void _delay_ms(uint32_t t) {
	while (t-- > 0) {
 800217a:	f1b8 0f00 	cmp.w	r8, #0
 800217e:	d009      	beq.n	8002194 <main+0xb0>
		__delay();
 8002180:	9701      	str	r7, [sp, #4]
 8002182:	9b01      	ldr	r3, [sp, #4]
 8002184:	4293      	cmp	r3, r2
 8002186:	f240 8083 	bls.w	8002290 <main+0x1ac>
 800218a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
  for (i = 0; i < 10000; ++i)				\
    __asm__ __volatile__ ("nop\n\t":::"memory");	\
} while (0)

inline void _delay_ms(uint32_t t) {
	while (t-- > 0) {
 800218e:	f1b8 0f00 	cmp.w	r8, #0
 8002192:	d1f5      	bne.n	8002180 <main+0x9c>
		_delay_ms(dval);
		digitalWrite(PD14, SET);
 8002194:	f44f 2088 	mov.w	r0, #278528	; 0x44000
 8002198:	2101      	movs	r1, #1
 800219a:	f7fe fa11 	bl	80005c0 <digitalWrite>
		digitalWrite(PD12 | PD13 | PD15, RESET);
 800219e:	4627      	mov	r7, r4
 80021a0:	4641      	mov	r1, r8
 80021a2:	f44f 2096 	mov.w	r0, #307200	; 0x4b000
 80021a6:	f7fe fa0b 	bl	80005c0 <digitalWrite>
		__delay();
 80021aa:	4641      	mov	r1, r8
 80021ac:	f242 720f 	movw	r2, #9999	; 0x270f
  for (i = 0; i < 10000; ++i)				\
    __asm__ __volatile__ ("nop\n\t":::"memory");	\
} while (0)

inline void _delay_ms(uint32_t t) {
	while (t-- > 0) {
 80021b0:	b137      	cbz	r7, 80021c0 <main+0xdc>
		__delay();
 80021b2:	9101      	str	r1, [sp, #4]
 80021b4:	9b01      	ldr	r3, [sp, #4]
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d973      	bls.n	80022a2 <main+0x1be>
 80021ba:	3f01      	subs	r7, #1
  for (i = 0; i < 10000; ++i)				\
    __asm__ __volatile__ ("nop\n\t":::"memory");	\
} while (0)

inline void _delay_ms(uint32_t t) {
	while (t-- > 0) {
 80021bc:	2f00      	cmp	r7, #0
 80021be:	d1f8      	bne.n	80021b2 <main+0xce>
		_delay_ms(dval);
		digitalWrite(PD15, SET);
 80021c0:	f44f 2090 	mov.w	r0, #294912	; 0x48000
 80021c4:	2101      	movs	r1, #1
 80021c6:	f7fe f9fb 	bl	80005c0 <digitalWrite>
		digitalWrite(PD12 | PD13 | PD14, RESET);
 80021ca:	f44f 208e 	mov.w	r0, #290816	; 0x47000
 80021ce:	4639      	mov	r1, r7
 80021d0:	f7fe f9f6 	bl	80005c0 <digitalWrite>
		__delay();
 80021d4:	f242 720f 	movw	r2, #9999	; 0x270f
  for (i = 0; i < 10000; ++i)				\
    __asm__ __volatile__ ("nop\n\t":::"memory");	\
} while (0)

inline void _delay_ms(uint32_t t) {
	while (t-- > 0) {
 80021d8:	b134      	cbz	r4, 80021e8 <main+0x104>
		__delay();
 80021da:	9701      	str	r7, [sp, #4]
 80021dc:	9b01      	ldr	r3, [sp, #4]
 80021de:	4293      	cmp	r3, r2
 80021e0:	d968      	bls.n	80022b4 <main+0x1d0>
 80021e2:	3c01      	subs	r4, #1
  for (i = 0; i < 10000; ++i)				\
    __asm__ __volatile__ ("nop\n\t":::"memory");	\
} while (0)

inline void _delay_ms(uint32_t t) {
	while (t-- > 0) {
 80021e4:	2c00      	cmp	r4, #0
 80021e6:	d1f8      	bne.n	80021da <main+0xf6>
		_delay_ms(dval);

		usart3.print((float)(count++ / 32.0f), 3);
 80021e8:	ee07 5a10 	vmov	s14, r5
 80021ec:	eef8 7ac7 	vcvt.f32.s32	s15, s14
	}
	uint16_t print(const int32_t val, const uint8_t base = DEC) {
		return ( val < 0 ? print('-') : 0) + printNumber(abs(val), base);
	}
	uint16_t print(const float val, uint8_t prec = 2) {
		return printFloat(val, prec);
 80021f0:	2103      	movs	r1, #3
 80021f2:	ee27 0a88 	vmul.f32	s0, s15, s16
 80021f6:	3501      	adds	r5, #1
 80021f8:	4833      	ldr	r0, [pc, #204]	; (80022c8 <main+0x1e4>)
 80021fa:	f7fe f8cf 	bl	800039c <_ZN11USARTSerial10printFloatEfh>
 80021fe:	b2ad      	uxth	r5, r5
		usart3.print(", ");
 8002200:	4936      	ldr	r1, [pc, #216]	; (80022dc <main+0x1f8>)
 8002202:	4831      	ldr	r0, [pc, #196]	; (80022c8 <main+0x1e4>)
 8002204:	f7fe f880 	bl	8000308 <_ZN11USARTSerial5printEPKc>
		dval = (uint32) (92.0f + 36*sinf( (count % (uint32)(3.14159 * 2 * 32))/32.0f));
 8002208:	fba6 2305 	umull	r2, r3, r6, r5
 800220c:	085b      	lsrs	r3, r3, #1
 800220e:	22c9      	movs	r2, #201	; 0xc9
 8002210:	fb02 5313 	mls	r3, r2, r3, r5
 8002214:	b29b      	uxth	r3, r3
 8002216:	ee07 3a10 	vmov	s14, r3
 800221a:	eef8 7a47 	vcvt.f32.u32	s15, s14
 800221e:	ee27 0a88 	vmul.f32	s0, s15, s16
 8002222:	f7ff f939 	bl	8001498 <sinf>
 8002226:	eef0 7a49 	vmov.f32	s15, s18
 800222a:	ee40 7a28 	vmla.f32	s15, s0, s17
	uint16_t println(const char * s) { return print(s) + println(); }
	uint16_t println(const float val, uint8_t prec = 2) {
		return print(val, prec) + println();
	}
	uint16_t println(const uint32_t val, const uint8_t base = DEC) {
		return printNumber(val, base) + println();
 800222e:	220a      	movs	r2, #10
 8002230:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002234:	4824      	ldr	r0, [pc, #144]	; (80022c8 <main+0x1e4>)
 8002236:	ee17 1a90 	vmov	r1, s15
 800223a:	ee17 4a90 	vmov	r4, s15
 800223e:	f7fe f875 	bl	800032c <_ZN11USARTSerial11printNumberEmh>
	uint16_t write(const uint16_t ch);
	uint16_t write(uint16_t * p, uint16_t length);
	uint16_t read();
	uint16_t available();

	uint16_t print(const char c) { return write((uint16_t)c); }
 8002242:	4821      	ldr	r0, [pc, #132]	; (80022c8 <main+0x1e4>)
 8002244:	210a      	movs	r1, #10
 8002246:	f7fe f813 	bl	8000270 <_ZN11USARTSerial5writeEt>
		usart3.println(dval);
		if ( usart3.available() > 0 ) {
 800224a:	481f      	ldr	r0, [pc, #124]	; (80022c8 <main+0x1e4>)
 800224c:	f7fe f8f0 	bl	8000430 <_ZN11USARTSerial9availableEv>
 8002250:	b958      	cbnz	r0, 800226a <main+0x186>
 8002252:	e76e      	b.n	8002132 <main+0x4e>
			while ( usart3.available() > 0 ) {
				usart3.print((char) usart3.read());
 8002254:	481c      	ldr	r0, [pc, #112]	; (80022c8 <main+0x1e4>)
 8002256:	f7fe f8ef 	bl	8000438 <_ZN11USARTSerial4readEv>
 800225a:	b2c1      	uxtb	r1, r0
 800225c:	481a      	ldr	r0, [pc, #104]	; (80022c8 <main+0x1e4>)
 800225e:	f7fe f807 	bl	8000270 <_ZN11USARTSerial5writeEt>
 8002262:	4819      	ldr	r0, [pc, #100]	; (80022c8 <main+0x1e4>)
 8002264:	2120      	movs	r1, #32
 8002266:	f7fe f803 	bl	8000270 <_ZN11USARTSerial5writeEt>
		usart3.print((float)(count++ / 32.0f), 3);
		usart3.print(", ");
		dval = (uint32) (92.0f + 36*sinf( (count % (uint32)(3.14159 * 2 * 32))/32.0f));
		usart3.println(dval);
		if ( usart3.available() > 0 ) {
			while ( usart3.available() > 0 ) {
 800226a:	4817      	ldr	r0, [pc, #92]	; (80022c8 <main+0x1e4>)
 800226c:	f7fe f8e0 	bl	8000430 <_ZN11USARTSerial9availableEv>
 8002270:	2800      	cmp	r0, #0
 8002272:	d1ef      	bne.n	8002254 <main+0x170>
 8002274:	210a      	movs	r1, #10
 8002276:	4814      	ldr	r0, [pc, #80]	; (80022c8 <main+0x1e4>)
 8002278:	f7fd fffa 	bl	8000270 <_ZN11USARTSerial5writeEt>
 800227c:	e759      	b.n	8002132 <main+0x4e>
		__delay();
 800227e:	bf00      	nop
 8002280:	9b01      	ldr	r3, [sp, #4]
 8002282:	3301      	adds	r3, #1
 8002284:	9301      	str	r3, [sp, #4]
 8002286:	9b01      	ldr	r3, [sp, #4]
 8002288:	4293      	cmp	r3, r2
 800228a:	d9f8      	bls.n	800227e <main+0x19a>
 800228c:	3f01      	subs	r7, #1
 800228e:	e765      	b.n	800215c <main+0x78>
 8002290:	bf00      	nop
 8002292:	9b01      	ldr	r3, [sp, #4]
 8002294:	3301      	adds	r3, #1
 8002296:	9301      	str	r3, [sp, #4]
 8002298:	9b01      	ldr	r3, [sp, #4]
 800229a:	4293      	cmp	r3, r2
 800229c:	f63f af75 	bhi.w	800218a <main+0xa6>
 80022a0:	e7f6      	b.n	8002290 <main+0x1ac>
 80022a2:	bf00      	nop
 80022a4:	9b01      	ldr	r3, [sp, #4]
 80022a6:	3301      	adds	r3, #1
 80022a8:	9301      	str	r3, [sp, #4]
 80022aa:	9b01      	ldr	r3, [sp, #4]
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d9f8      	bls.n	80022a2 <main+0x1be>
 80022b0:	3f01      	subs	r7, #1
 80022b2:	e783      	b.n	80021bc <main+0xd8>
 80022b4:	bf00      	nop
 80022b6:	9b01      	ldr	r3, [sp, #4]
 80022b8:	3301      	adds	r3, #1
 80022ba:	9301      	str	r3, [sp, #4]
 80022bc:	9b01      	ldr	r3, [sp, #4]
 80022be:	4293      	cmp	r3, r2
 80022c0:	d9f8      	bls.n	80022b4 <main+0x1d0>
 80022c2:	3c01      	subs	r4, #1
 80022c4:	e78e      	b.n	80021e4 <main+0x100>
 80022c6:	bf00      	nop
 80022c8:	200002a8 	.word	0x200002a8
 80022cc:	080026f8 	.word	0x080026f8
 80022d0:	3d000000 	.word	0x3d000000
 80022d4:	42100000 	.word	0x42100000
 80022d8:	42b80000 	.word	0x42b80000
 80022dc:	080026fc 	.word	0x080026fc

080022e0 <Reset_Handler>:
 80022e0:	2100      	movs	r1, #0
 80022e2:	e003      	b.n	80022ec <LoopCopyDataInit>

080022e4 <CopyDataInit>:
 80022e4:	4b0a      	ldr	r3, [pc, #40]	; (8002310 <LoopFillZerobss+0x10>)
 80022e6:	585b      	ldr	r3, [r3, r1]
 80022e8:	5043      	str	r3, [r0, r1]
 80022ea:	3104      	adds	r1, #4

080022ec <LoopCopyDataInit>:
 80022ec:	4809      	ldr	r0, [pc, #36]	; (8002314 <LoopFillZerobss+0x14>)
 80022ee:	4b0a      	ldr	r3, [pc, #40]	; (8002318 <LoopFillZerobss+0x18>)
 80022f0:	1842      	adds	r2, r0, r1
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d3f6      	bcc.n	80022e4 <CopyDataInit>
 80022f6:	4a09      	ldr	r2, [pc, #36]	; (800231c <LoopFillZerobss+0x1c>)
 80022f8:	e002      	b.n	8002300 <LoopFillZerobss>

080022fa <FillZerobss>:
 80022fa:	2300      	movs	r3, #0
 80022fc:	f842 3b04 	str.w	r3, [r2], #4

08002300 <LoopFillZerobss>:
 8002300:	4b07      	ldr	r3, [pc, #28]	; (8002320 <LoopFillZerobss+0x20>)
 8002302:	429a      	cmp	r2, r3
 8002304:	d3f9      	bcc.n	80022fa <FillZerobss>
 8002306:	f7fe ffed 	bl	80012e4 <SystemInit>
 800230a:	f7ff feeb 	bl	80020e4 <main>
 800230e:	4770      	bx	lr
 8002310:	08002704 	.word	0x08002704
 8002314:	20000000 	.word	0x20000000
 8002318:	20000098 	.word	0x20000098
 800231c:	20000098 	.word	0x20000098
 8002320:	200002b4 	.word	0x200002b4

08002324 <ADC_IRQHandler>:
 8002324:	e7fe      	b.n	8002324 <ADC_IRQHandler>
	...

08002328 <npio2_hw>:
 8002328:	0f00 3fc9 0f00 4049 cb00 4096 0f00 40c9     ...?..I@...@...@
 8002338:	5300 40fb cb00 4116 ed00 412f 0f00 4149     .S.@...A../A..IA
 8002348:	3100 4162 5300 417b 3a00 418a cb00 4196     .1bA.S{A.:.A...A
 8002358:	5c00 41a3 ed00 41af 7e00 41bc 0f00 41c9     .\.A...A.~.A...A
 8002368:	a000 41d5 3100 41e2 c200 41ee 5300 41fb     ...A.1.A...A.S.A
 8002378:	f200 4203 3a00 420a 8300 4210 cb00 4216     ...B.:.B...B...B
 8002388:	1400 421d 5c00 4223 a500 4229 ed00 422f     ...B.\#B..)B../B
 8002398:	3600 4236 7e00 423c c700 4242 0f00 4249     .66B.~<B..BB..IB

080023a8 <two_over_pi>:
 80023a8:	00a2 0000 00f9 0000 0083 0000 006e 0000     ............n...
 80023b8:	004e 0000 0044 0000 0015 0000 0029 0000     N...D.......)...
 80023c8:	00fc 0000 0027 0000 0057 0000 00d1 0000     ....'...W.......
 80023d8:	00f5 0000 0034 0000 00dd 0000 00c0 0000     ....4...........
 80023e8:	00db 0000 0062 0000 0095 0000 0099 0000     ....b...........
 80023f8:	003c 0000 0043 0000 0090 0000 0041 0000     <...C.......A...
 8002408:	00fe 0000 0051 0000 0063 0000 00ab 0000     ....Q...c.......
 8002418:	00de 0000 00bb 0000 00c5 0000 0061 0000     ............a...
 8002428:	00b7 0000 0024 0000 006e 0000 003a 0000     ....$...n...:...
 8002438:	0042 0000 004d 0000 00d2 0000 00e0 0000     B...M...........
 8002448:	0006 0000 0049 0000 002e 0000 00ea 0000     ....I...........
 8002458:	0009 0000 00d1 0000 0092 0000 001c 0000     ................
 8002468:	00fe 0000 001d 0000 00eb 0000 001c 0000     ................
 8002478:	00b1 0000 0029 0000 00a7 0000 003e 0000     ....).......>...
 8002488:	00e8 0000 0082 0000 0035 0000 00f5 0000     ........5.......
 8002498:	002e 0000 00bb 0000 0044 0000 0084 0000     ........D.......
 80024a8:	00e9 0000 009c 0000 0070 0000 0026 0000     ........p...&...
 80024b8:	00b4 0000 005f 0000 007e 0000 0041 0000     ...._...~...A...
 80024c8:	0039 0000 0091 0000 00d6 0000 0039 0000     9...........9...
 80024d8:	0083 0000 0053 0000 0039 0000 00f4 0000     ....S...9.......
 80024e8:	009c 0000 0084 0000 005f 0000 008b 0000     ........_.......
 80024f8:	00bd 0000 00f9 0000 0028 0000 003b 0000     ........(...;...
 8002508:	001f 0000 00f8 0000 0097 0000 00ff 0000     ................
 8002518:	00de 0000 0005 0000 0098 0000 000f 0000     ................
 8002528:	00ef 0000 002f 0000 0011 0000 008b 0000     ..../...........
 8002538:	005a 0000 000a 0000 006d 0000 001f 0000     Z.......m.......
 8002548:	006d 0000 0036 0000 007e 0000 00cf 0000     m...6...~.......
 8002558:	0027 0000 00cb 0000 0009 0000 00b7 0000     '...............
 8002568:	004f 0000 0046 0000 003f 0000 0066 0000     O...F...?...f...
 8002578:	009e 0000 005f 0000 00ea 0000 002d 0000     ...._.......-...
 8002588:	0075 0000 0027 0000 00ba 0000 00c7 0000     u...'...........
 8002598:	00eb 0000 00e5 0000 00f1 0000 007b 0000     ............{...
 80025a8:	003d 0000 0007 0000 0039 0000 00f7 0000     =.......9.......
 80025b8:	008a 0000 0052 0000 0092 0000 00ea 0000     ....R...........
 80025c8:	006b 0000 00fb 0000 005f 0000 00b1 0000     k......._.......
 80025d8:	001f 0000 008d 0000 005d 0000 0008 0000     ........].......
 80025e8:	0056 0000 0003 0000 0030 0000 0046 0000     V.......0...F...
 80025f8:	00fc 0000 007b 0000 006b 0000 00ab 0000     ....{...k.......
 8002608:	00f0 0000 00cf 0000 00bc 0000 0020 0000     ............ ...
 8002618:	009a 0000 00f4 0000 0036 0000 001d 0000     ........6.......
 8002628:	00a9 0000 00e3 0000 0091 0000 0061 0000     ............a...
 8002638:	005e 0000 00e6 0000 001b 0000 0008 0000     ^...............
 8002648:	0065 0000 0099 0000 0085 0000 005f 0000     e..........._...
 8002658:	0014 0000 00a0 0000 0068 0000 0040 0000     ........h...@...
 8002668:	008d 0000 00ff 0000 00d8 0000 0080 0000     ................
 8002678:	004d 0000 0073 0000 0027 0000 0031 0000     M...s...'...1...
 8002688:	0006 0000 0006 0000 0015 0000 0056 0000     ............V...
 8002698:	00ca 0000 0073 0000 00a8 0000 00c9 0000     ....s...........
 80026a8:	0060 0000 00e2 0000 007b 0000 00c0 0000     `.......{.......
 80026b8:	008c 0000 006b 0000                         ....k...

080026c0 <init_jk>:
 80026c0:	0004 0000 0007 0000 0009 0000               ............

080026cc <PIo2>:
 80026cc:	0000 3fc9 0000 39f0 0000 37da 0000 33a2     ...?...9...7...3
 80026dc:	0000 2e84 0000 2b50 0000 27c2 0000 22d0     ......P+...'..."
 80026ec:	0000 1fc4 0000 1bc6 0000 1744 6948 002e     ..........D.Hi..
 80026fc:	202c 0000                                   , ..
