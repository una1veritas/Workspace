
stm32f4-usart_test.elf:     file format elf32-littlearm


Disassembly of section .text:

08000188 <_ZN11USARTSerial5beginEm>:

ring rx1, tx1, rx3, tx3;
USARTSerial usart1(USART1, rx1, tx1);
USARTSerial usart3(USART3, rx3, tx3);

void USARTSerial::begin(uint32_t baud) {
 8000188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
//	GPIO_InitTypeDef GPIO_InitStruct; // this is for the GPIO pins used as TX and RX
	USART_InitTypeDef USART_InitStruct; // this is for the USART1 initilization
	NVIC_InitTypeDef NVIC_InitStructure; // this is used to configure the NVIC (nested vector interrupt controller)
	if (USARTx == USART1 ) {
 800018c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000190:	6885      	ldr	r5, [r0, #8]
 8000192:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000196:	429d      	cmp	r5, r3

ring rx1, tx1, rx3, tx3;
USARTSerial usart1(USART1, rx1, tx1);
USARTSerial usart3(USART3, rx3, tx3);

void USARTSerial::begin(uint32_t baud) {
 8000198:	b08a      	sub	sp, #40	; 0x28
 800019a:	4604      	mov	r4, r0
 800019c:	460e      	mov	r6, r1
//	GPIO_InitTypeDef GPIO_InitStruct; // this is for the GPIO pins used as TX and RX
	USART_InitTypeDef USART_InitStruct; // this is for the USART1 initilization
	NVIC_InitTypeDef NVIC_InitStructure; // this is used to configure the NVIC (nested vector interrupt controller)
	if (USARTx == USART1 ) {
 800019e:	d06d      	beq.n	800027c <_ZN11USARTSerial5beginEm+0xf4>
		NVIC_Init(&NVIC_InitStructure);	// the properties are passed to the NVIC_Init function which takes care of the low level stuff

		// finally this enables the complete USART1 peripheral
		USART_Cmd(USART1, (FunctionalState) ENABLE);

	} else if (USARTx == USART3 ) {
 80001a0:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 80001a4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80001a8:	429d      	cmp	r5, r3
 80001aa:	d011      	beq.n	80001d0 <_ZN11USARTSerial5beginEm+0x48>

		// finally this enables the complete USART3 peripheral
		USART_Cmd(USART3, (FunctionalState) ENABLE);
	}
	rx.init();
	tx.init();
 80001ac:	e894 0006 	ldmia.w	r4, {r1, r2}
	uint16 buffer[RINGBUFFER_SIZE];
	uint16 head, tail;
	uint16 count;

	void init() {
		head = 0;
 80001b0:	2300      	movs	r3, #0
 80001b2:	f8a1 3100 	strh.w	r3, [r1, #256]	; 0x100
		tail = 0;
 80001b6:	f8a1 3102 	strh.w	r3, [r1, #258]	; 0x102
		count = 0;
 80001ba:	f8a1 3104 	strh.w	r3, [r1, #260]	; 0x104
	uint16 buffer[RINGBUFFER_SIZE];
	uint16 head, tail;
	uint16 count;

	void init() {
		head = 0;
 80001be:	f8a2 3100 	strh.w	r3, [r2, #256]	; 0x100
		tail = 0;
 80001c2:	f8a2 3102 	strh.w	r3, [r2, #258]	; 0x102
		count = 0;
 80001c6:	f8a2 3104 	strh.w	r3, [r2, #260]	; 0x104
}
 80001ca:	b00a      	add	sp, #40	; 0x28
 80001cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		USART_Cmd(USART1, (FunctionalState) ENABLE);

	} else if (USARTx == USART3 ) {

		GPIOMode(RCC_AHB1Periph_GPIOB, GPIOB, GPIO_Pin_10 | GPIO_Pin_11,
				GPIO_Mode_AF, GPIO_Speed_50MHz, GPIO_OType_PP, GPIO_PuPd_UP);
 80001d0:	f04f 0e02 	mov.w	lr, #2
 80001d4:	2700      	movs	r7, #0
 80001d6:	f04f 0801 	mov.w	r8, #1
 80001da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001de:	4670      	mov	r0, lr
 80001e0:	4673      	mov	r3, lr
 80001e2:	f8cd e000 	str.w	lr, [sp]
 80001e6:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 80001ea:	f2c4 0102 	movt	r1, #16386	; 0x4002
 80001ee:	9701      	str	r7, [sp, #4]
 80001f0:	f8cd 8008 	str.w	r8, [sp, #8]
 80001f4:	f000 faca 	bl	800078c <GPIOMode>
		/* USART3 clock enable */
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, (FunctionalState) ENABLE);
 80001f8:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80001fc:	4641      	mov	r1, r8
 80001fe:	f000 fe57 	bl	8000eb0 <RCC_APB1PeriphClockCmd>

		GPIO_PinAFConfig(GPIOB, GPIO_PinSource10, GPIO_AF_USART3 ); // TX -- PB10
 8000202:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000206:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800020a:	210a      	movs	r1, #10
 800020c:	2207      	movs	r2, #7
 800020e:	f000 fca3 	bl	8000b58 <GPIO_PinAFConfig>
		GPIO_PinAFConfig(GPIOB, GPIO_PinSource11, GPIO_AF_USART3 ); // RX -- PB11
 8000212:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000216:	2207      	movs	r2, #7
 8000218:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800021c:	210b      	movs	r1, #11
 800021e:	f000 fc9b 	bl	8000b58 <GPIO_PinAFConfig>
		USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
		USART_InitStruct.USART_StopBits = USART_StopBits_1;	// we want 1 stop bit (standard)
		USART_InitStruct.USART_Parity = USART_Parity_No;// we don't want a parity bit (standard)
		USART_InitStruct.USART_HardwareFlowControl =
				USART_HardwareFlowControl_None; // we don't want flow control (standard)
		USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver
 8000222:	230c      	movs	r3, #12

		USART_Init(USART3, &USART_InitStruct); // again all the properties are passed to the USART_Init function which takes care of all the bit setting
 8000224:	a906      	add	r1, sp, #24
 8000226:	4628      	mov	r0, r5
		USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
		USART_InitStruct.USART_StopBits = USART_StopBits_1;	// we want 1 stop bit (standard)
		USART_InitStruct.USART_Parity = USART_Parity_No;// we don't want a parity bit (standard)
		USART_InitStruct.USART_HardwareFlowControl =
				USART_HardwareFlowControl_None; // we don't want flow control (standard)
		USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver
 8000228:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, (FunctionalState) ENABLE);

		GPIO_PinAFConfig(GPIOB, GPIO_PinSource10, GPIO_AF_USART3 ); // TX -- PB10
		GPIO_PinAFConfig(GPIOB, GPIO_PinSource11, GPIO_AF_USART3 ); // RX -- PB11

		USART_InitStruct.USART_BaudRate = baud;	// the baudrate is set to the value we passed into this init function
 800022c:	9606      	str	r6, [sp, #24]
		USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
 800022e:	f8ad 701c 	strh.w	r7, [sp, #28]
		USART_InitStruct.USART_StopBits = USART_StopBits_1;	// we want 1 stop bit (standard)
 8000232:	f8ad 701e 	strh.w	r7, [sp, #30]
		USART_InitStruct.USART_Parity = USART_Parity_No;// we don't want a parity bit (standard)
 8000236:	f8ad 7020 	strh.w	r7, [sp, #32]
		USART_InitStruct.USART_HardwareFlowControl =
				USART_HardwareFlowControl_None; // we don't want flow control (standard)
 800023a:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
		USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver

		USART_Init(USART3, &USART_InitStruct); // again all the properties are passed to the USART_Init function which takes care of all the bit setting
 800023e:	f000 ff89 	bl	8001154 <USART_Init>

		USART_ITConfig(USART3, USART_IT_RXNE, (FunctionalState) ENABLE); // enable the USART3 receive interrupt
 8000242:	4628      	mov	r0, r5
 8000244:	f240 5125 	movw	r1, #1317	; 0x525
 8000248:	4642      	mov	r2, r8
 800024a:	f001 f8ed 	bl	8001428 <USART_ITConfig>
		USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) DISABLE);
 800024e:	4628      	mov	r0, r5
 8000250:	f240 7127 	movw	r1, #1831	; 0x727
 8000254:	463a      	mov	r2, r7
 8000256:	f001 f8e7 	bl	8001428 <USART_ITConfig>
		NVIC_InitStructure.NVIC_IRQChannel = USART3_IRQn;
		// we want to configure the USART3 interrupts
		NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0; // this sets the priority group of the USART3 interrupts
		NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0; // this sets the subpriority inside the group
		NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;	// the USART3 interrupts are globally enabled
		NVIC_Init(&NVIC_InitStructure);	// the properties are passed to the NVIC_Init function which takes care of the low level stuff
 800025a:	a805      	add	r0, sp, #20

		 NewState	説明
		 ENABLE	有効にします
		 DISABLE	無効にします
		 */
		NVIC_InitStructure.NVIC_IRQChannel = USART3_IRQn;
 800025c:	2327      	movs	r3, #39	; 0x27
 800025e:	f88d 3014 	strb.w	r3, [sp, #20]
		// we want to configure the USART3 interrupts
		NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0; // this sets the priority group of the USART3 interrupts
 8000262:	f88d 7015 	strb.w	r7, [sp, #21]
		NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0; // this sets the subpriority inside the group
 8000266:	f88d 7016 	strb.w	r7, [sp, #22]
		NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;	// the USART3 interrupts are globally enabled
 800026a:	f88d 8017 	strb.w	r8, [sp, #23]
		NVIC_Init(&NVIC_InitStructure);	// the properties are passed to the NVIC_Init function which takes care of the low level stuff
 800026e:	f000 fadb 	bl	8000828 <NVIC_Init>

		// finally this enables the complete USART3 peripheral
		USART_Cmd(USART3, (FunctionalState) ENABLE);
 8000272:	4628      	mov	r0, r5
 8000274:	4641      	mov	r1, r8
 8000276:	f000 fffd 	bl	8001274 <USART_Cmd>
 800027a:	e797      	b.n	80001ac <_ZN11USARTSerial5beginEm+0x24>
void USARTSerial::begin(uint32_t baud) {
//	GPIO_InitTypeDef GPIO_InitStruct; // this is for the GPIO pins used as TX and RX
	USART_InitTypeDef USART_InitStruct; // this is for the USART1 initilization
	NVIC_InitTypeDef NVIC_InitStructure; // this is used to configure the NVIC (nested vector interrupt controller)
	if (USARTx == USART1 ) {
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, (FunctionalState) ENABLE);
 800027c:	2010      	movs	r0, #16
 800027e:	2101      	movs	r1, #1
 8000280:	f000 fe24 	bl	8000ecc <RCC_APB2PeriphClockCmd>
//		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
		GPIOMode(RCC_AHB1Periph_GPIOB, GPIOB, GPIO_Pin_6 | GPIO_Pin_7,
				GPIO_Mode_AF, GPIO_Speed_50MHz, GPIO_OType_PP, GPIO_PuPd_UP);
 8000284:	2700      	movs	r7, #0
 8000286:	2202      	movs	r2, #2
 8000288:	f04f 0801 	mov.w	r8, #1
 800028c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000290:	4613      	mov	r3, r2
 8000292:	4610      	mov	r0, r2
 8000294:	e88d 0184 	stmia.w	sp, {r2, r7, r8}
 8000298:	f2c4 0102 	movt	r1, #16386	; 0x4002
 800029c:	22c0      	movs	r2, #192	; 0xc0
 800029e:	f000 fa75 	bl	800078c <GPIOMode>

		GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_USART1 ); //
 80002a2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80002a6:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80002aa:	2106      	movs	r1, #6
 80002ac:	2207      	movs	r2, #7
 80002ae:	f000 fc53 	bl	8000b58 <GPIO_PinAFConfig>
		GPIO_PinAFConfig(GPIOB, GPIO_PinSource7, GPIO_AF_USART1 );
 80002b2:	2107      	movs	r1, #7
 80002b4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80002b8:	460a      	mov	r2, r1
 80002ba:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80002be:	f000 fc4b 	bl	8000b58 <GPIO_PinAFConfig>
		USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
		USART_InitStruct.USART_StopBits = USART_StopBits_1;	// we want 1 stop bit (standard)
		USART_InitStruct.USART_Parity = USART_Parity_No;// we don't want a parity bit (standard)
		USART_InitStruct.USART_HardwareFlowControl =
				USART_HardwareFlowControl_None; // we don't want flow control (standard)
		USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver
 80002c2:	230c      	movs	r3, #12
		USART_Init(USART1, &USART_InitStruct); // again all the properties are passed to the USART_Init function which takes care of all the bit setting
 80002c4:	a906      	add	r1, sp, #24
 80002c6:	4628      	mov	r0, r5
		USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
		USART_InitStruct.USART_StopBits = USART_StopBits_1;	// we want 1 stop bit (standard)
		USART_InitStruct.USART_Parity = USART_Parity_No;// we don't want a parity bit (standard)
		USART_InitStruct.USART_HardwareFlowControl =
				USART_HardwareFlowControl_None; // we don't want flow control (standard)
		USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver
 80002c8:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
				GPIO_Mode_AF, GPIO_Speed_50MHz, GPIO_OType_PP, GPIO_PuPd_UP);

		GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_USART1 ); //
		GPIO_PinAFConfig(GPIOB, GPIO_PinSource7, GPIO_AF_USART1 );

		USART_InitStruct.USART_BaudRate = baud;	// the baudrate is set to the value we passed into this init function
 80002cc:	9606      	str	r6, [sp, #24]
		USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
 80002ce:	f8ad 701c 	strh.w	r7, [sp, #28]
		USART_InitStruct.USART_StopBits = USART_StopBits_1;	// we want 1 stop bit (standard)
 80002d2:	f8ad 701e 	strh.w	r7, [sp, #30]
		USART_InitStruct.USART_Parity = USART_Parity_No;// we don't want a parity bit (standard)
 80002d6:	f8ad 7020 	strh.w	r7, [sp, #32]
		USART_InitStruct.USART_HardwareFlowControl =
				USART_HardwareFlowControl_None; // we don't want flow control (standard)
 80002da:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
		USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver
		USART_Init(USART1, &USART_InitStruct); // again all the properties are passed to the USART_Init function which takes care of all the bit setting
 80002de:	f000 ff39 	bl	8001154 <USART_Init>

		USART_ITConfig(USART1, USART_IT_RXNE, (FunctionalState) ENABLE); // enable the USART1 receive interrupt
 80002e2:	4628      	mov	r0, r5
 80002e4:	4642      	mov	r2, r8
 80002e6:	f240 5125 	movw	r1, #1317	; 0x525
 80002ea:	f001 f89d 	bl	8001428 <USART_ITConfig>
		USART_ITConfig(USART1, USART_IT_TXE, (FunctionalState) ENABLE); // enable the USART1 receive interrupt
 80002ee:	4628      	mov	r0, r5
 80002f0:	4642      	mov	r2, r8
 80002f2:	f240 7127 	movw	r1, #1831	; 0x727
 80002f6:	f001 f897 	bl	8001428 <USART_ITConfig>

		NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn; // we want to configure the USART1 interrupts
		NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0; // this sets the priority group of the USART1 interrupts
		NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0; // this sets the subpriority inside the group
		NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;	// the USART1 interrupts are globally enabled
		NVIC_Init(&NVIC_InitStructure);	// the properties are passed to the NVIC_Init function which takes care of the low level stuff
 80002fa:	a805      	add	r0, sp, #20
		USART_Init(USART1, &USART_InitStruct); // again all the properties are passed to the USART_Init function which takes care of all the bit setting

		USART_ITConfig(USART1, USART_IT_RXNE, (FunctionalState) ENABLE); // enable the USART1 receive interrupt
		USART_ITConfig(USART1, USART_IT_TXE, (FunctionalState) ENABLE); // enable the USART1 receive interrupt

		NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn; // we want to configure the USART1 interrupts
 80002fc:	2325      	movs	r3, #37	; 0x25
 80002fe:	e7ae      	b.n	800025e <_ZN11USARTSerial5beginEm+0xd6>

08000300 <_ZN11USARTSerial3endEv>:
	}
	rx.init();
	tx.init();
}

void USARTSerial::end() {
 8000300:	b508      	push	{r3, lr}
	USART_DeInit(USART3);
 8000302:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 8000306:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800030a:	f000 feb9 	bl	8001080 <USART_DeInit>
	/* USART3 clock */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, (FunctionalState) DISABLE);
 800030e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000312:	2100      	movs	r1, #0
}
 8000314:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

void USARTSerial::end() {
	USART_DeInit(USART3);
	/* USART3 clock */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, (FunctionalState) DISABLE);
 8000318:	f000 bdca 	b.w	8000eb0 <RCC_APB1PeriphClockCmd>

0800031c <_ZN11USARTSerial5writeEt>:
 tx3.ringin(ch);
 USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) ENABLE);
 }
 */

uint16_t USARTSerial::write(const uint16_t ch) {
 800031c:	b538      	push	{r3, r4, r5, lr}
 800031e:	4604      	mov	r4, r0
 8000320:	460d      	mov	r5, r1
	// write3(ch);
	while (USART_GetFlagStatus(USARTx, USART_FLAG_TC ) == RESET)
 8000322:	68a0      	ldr	r0, [r4, #8]
 8000324:	2140      	movs	r1, #64	; 0x40
 8000326:	f001 f89b 	bl	8001460 <USART_GetFlagStatus>
 800032a:	2800      	cmp	r0, #0
 800032c:	d0f9      	beq.n	8000322 <_ZN11USARTSerial5writeEt+0x6>
		;
	tx.ringin(ch);
 800032e:	6863      	ldr	r3, [r4, #4]
			return 0;
		return buffer[head];
	}

	bool is_full() {
		return (count > 0) && head == tail;
 8000330:	f8b3 0104 	ldrh.w	r0, [r3, #260]	; 0x104
 8000334:	b998      	cbnz	r0, 800035e <_ZN11USARTSerial5writeEt+0x42>
 8000336:	f8b3 2102 	ldrh.w	r2, [r3, #258]	; 0x102
	uint16 ringin(uint16 c) {
		if ( is_full() ) {
			head++;  head %= RINGBUFFER_SIZE;
			// buffer over run occurred!
		} else
			count++;
 800033a:	3001      	adds	r0, #1
 800033c:	f8a3 0104 	strh.w	r0, [r3, #260]	; 0x104
		buffer[tail++] = c;
 8000340:	1c51      	adds	r1, r2, #1
		tail %= RINGBUFFER_SIZE;
 8000342:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		if ( is_full() ) {
			head++;  head %= RINGBUFFER_SIZE;
			// buffer over run occurred!
		} else
			count++;
		buffer[tail++] = c;
 8000346:	f823 5012 	strh.w	r5, [r3, r2, lsl #1]
		tail %= RINGBUFFER_SIZE;
 800034a:	f8a3 1102 	strh.w	r1, [r3, #258]	; 0x102
	USART_ITConfig(USARTx, USART_IT_TXE, (FunctionalState) ENABLE);
 800034e:	68a0      	ldr	r0, [r4, #8]
 8000350:	f240 7127 	movw	r1, #1831	; 0x727
 8000354:	2201      	movs	r2, #1
 8000356:	f001 f867 	bl	8001428 <USART_ITConfig>
	return 1;
}
 800035a:	2001      	movs	r0, #1
 800035c:	bd38      	pop	{r3, r4, r5, pc}
			return 0;
		return buffer[head];
	}

	bool is_full() {
		return (count > 0) && head == tail;
 800035e:	f8b3 1100 	ldrh.w	r1, [r3, #256]	; 0x100
 8000362:	f8b3 2102 	ldrh.w	r2, [r3, #258]	; 0x102
 8000366:	428a      	cmp	r2, r1
 8000368:	d1e7      	bne.n	800033a <_ZN11USARTSerial5writeEt+0x1e>
		count = 0;
	}

	uint16 ringin(uint16 c) {
		if ( is_full() ) {
			head++;  head %= RINGBUFFER_SIZE;
 800036a:	1c51      	adds	r1, r2, #1
 800036c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8000370:	f8a3 1100 	strh.w	r1, [r3, #256]	; 0x100
 8000374:	e7e4      	b.n	8000340 <_ZN11USARTSerial5writeEt+0x24>
 8000376:	bf00      	nop

08000378 <_ZN11USARTSerial5writeEPtt>:
 return 1;
 return buffered_write(ch);
 }
 */

uint16_t USARTSerial::write(uint16_t * p, uint16_t length) {
 8000378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t n = 0;
	while (n++ < length)
 800037a:	4617      	mov	r7, r2
 return 1;
 return buffered_write(ch);
 }
 */

uint16_t USARTSerial::write(uint16_t * p, uint16_t length) {
 800037c:	4605      	mov	r5, r0
 800037e:	460c      	mov	r4, r1
	uint16_t n = 0;
	while (n++ < length)
 8000380:	b172      	cbz	r2, 80003a0 <_ZN11USARTSerial5writeEPtt+0x28>
 return 1;
 return buffered_write(ch);
 }
 */

uint16_t USARTSerial::write(uint16_t * p, uint16_t length) {
 8000382:	1e56      	subs	r6, r2, #1
 8000384:	b2b6      	uxth	r6, r6
 8000386:	3601      	adds	r6, #1
 8000388:	eb01 0646 	add.w	r6, r1, r6, lsl #1
	uint16_t n = 0;
	while (n++ < length)
		write(*p++);
 800038c:	f834 1b02 	ldrh.w	r1, [r4], #2
 8000390:	4628      	mov	r0, r5
 8000392:	f7ff ffc3 	bl	800031c <_ZN11USARTSerial5writeEt>
 }
 */

uint16_t USARTSerial::write(uint16_t * p, uint16_t length) {
	uint16_t n = 0;
	while (n++ < length)
 8000396:	42b4      	cmp	r4, r6
 8000398:	d1f8      	bne.n	800038c <_ZN11USARTSerial5writeEPtt+0x14>
 800039a:	3701      	adds	r7, #1
 800039c:	b2b8      	uxth	r0, r7
 800039e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80003a0:	2001      	movs	r0, #1
		write(*p++);
	return n;
}
 80003a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080003a4 <_ZN11USARTSerial5printEPKc>:

uint16_t USARTSerial::print(const char * s) {
 80003a4:	b570      	push	{r4, r5, r6, lr}
 80003a6:	460d      	mov	r5, r1
	uint16_t n = 0;
	while (*s) {
 80003a8:	7809      	ldrb	r1, [r1, #0]
	while (n++ < length)
		write(*p++);
	return n;
}

uint16_t USARTSerial::print(const char * s) {
 80003aa:	4606      	mov	r6, r0
	uint16_t n = 0;
	while (*s) {
 80003ac:	b159      	cbz	r1, 80003c6 <_ZN11USARTSerial5printEPKc+0x22>
		write(*p++);
	return n;
}

uint16_t USARTSerial::print(const char * s) {
	uint16_t n = 0;
 80003ae:	2400      	movs	r4, #0
	while (*s) {
		write(*s);
 80003b0:	4630      	mov	r0, r6
 80003b2:	f7ff ffb3 	bl	800031c <_ZN11USARTSerial5writeEt>
	return n;
}

uint16_t USARTSerial::print(const char * s) {
	uint16_t n = 0;
	while (*s) {
 80003b6:	f815 1f01 	ldrb.w	r1, [r5, #1]!
		write(*s);
		s++;
		n++;
 80003ba:	3401      	adds	r4, #1
 80003bc:	b2a4      	uxth	r4, r4
	return n;
}

uint16_t USARTSerial::print(const char * s) {
	uint16_t n = 0;
	while (*s) {
 80003be:	2900      	cmp	r1, #0
 80003c0:	d1f6      	bne.n	80003b0 <_ZN11USARTSerial5printEPKc+0xc>
		write(*s);
		s++;
		n++;
	}
	return n;
}
 80003c2:	4620      	mov	r0, r4
 80003c4:	bd70      	pop	{r4, r5, r6, pc}
		write(*p++);
	return n;
}

uint16_t USARTSerial::print(const char * s) {
	uint16_t n = 0;
 80003c6:	460c      	mov	r4, r1
 80003c8:	e7fb      	b.n	80003c2 <_ZN11USARTSerial5printEPKc+0x1e>
 80003ca:	bf00      	nop

080003cc <_ZN11USARTSerial11printNumberEmh>:

uint16_t USARTSerial::printNumber(uint32_t val, const uint8_t base) {
	uint16_t n = 0;
	bool msd = false;
	uint32_t divider = (
			base == 2 ? 1 << 31 : (base == 16 ? 0x10000000L : 1000000000L));
 80003cc:	2a02      	cmp	r2, #2
		n++;
	}
	return n;
}

uint16_t USARTSerial::printNumber(uint32_t val, const uint8_t base) {
 80003ce:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80003d2:	4614      	mov	r4, r2
 80003d4:	4607      	mov	r7, r0
 80003d6:	460e      	mov	r6, r1
	uint16_t n = 0;
	bool msd = false;
	uint32_t divider = (
			base == 2 ? 1 << 31 : (base == 16 ? 0x10000000L : 1000000000L));
 80003d8:	bf08      	it	eq
 80003da:	f04f 4300 	moveq.w	r3, #2147483648	; 0x80000000
 80003de:	d007      	beq.n	80003f0 <_ZN11USARTSerial11printNumberEmh+0x24>
 80003e0:	f44f 434a 	mov.w	r3, #51712	; 0xca00
 80003e4:	f6c3 339a 	movt	r3, #15258	; 0x3b9a
 80003e8:	2a10      	cmp	r2, #16
 80003ea:	bf08      	it	eq
 80003ec:	f04f 5380 	moveq.w	r3, #268435456	; 0x10000000
 80003f0:	2500      	movs	r5, #0
 80003f2:	46a9      	mov	r9, r5
 80003f4:	e010      	b.n	8000418 <_ZN11USARTSerial11printNumberEmh+0x4c>

	uint8_t digit;
	while (divider > 0) {
		digit = (val / divider) % base;
		if (digit || msd || (!msd && (divider % base))) {
 80003f6:	fbb3 f8f4 	udiv	r8, r3, r4
 80003fa:	fb04 3518 	mls	r5, r4, r8, r3
 80003fe:	b14d      	cbz	r5, 8000414 <_ZN11USARTSerial11printNumberEmh+0x48>
			write('0' + (digit > 9 ? digit + 7 : digit));
 8000400:	f102 0130 	add.w	r1, r2, #48	; 0x30
 8000404:	4638      	mov	r0, r7
 8000406:	f7ff ff89 	bl	800031c <_ZN11USARTSerial5writeEt>
			msd = true;
			n++;
 800040a:	f109 0901 	add.w	r9, r9, #1
 800040e:	fa1f f989 	uxth.w	r9, r9
	uint8_t digit;
	while (divider > 0) {
		digit = (val / divider) % base;
		if (digit || msd || (!msd && (divider % base))) {
			write('0' + (digit > 9 ? digit + 7 : digit));
			msd = true;
 8000412:	2501      	movs	r5, #1
			n++;
		}
		divider /= base;
 8000414:	4643      	mov	r3, r8
	bool msd = false;
	uint32_t divider = (
			base == 2 ? 1 << 31 : (base == 16 ? 0x10000000L : 1000000000L));

	uint8_t digit;
	while (divider > 0) {
 8000416:	b1bb      	cbz	r3, 8000448 <_ZN11USARTSerial11printNumberEmh+0x7c>
		digit = (val / divider) % base;
 8000418:	fbb6 f2f3 	udiv	r2, r6, r3
 800041c:	fbb2 f1f4 	udiv	r1, r2, r4
 8000420:	fb04 2211 	mls	r2, r4, r1, r2
		if (digit || msd || (!msd && (divider % base))) {
 8000424:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 8000428:	bf18      	it	ne
 800042a:	f045 0501 	orrne.w	r5, r5, #1
 800042e:	f015 0fff 	tst.w	r5, #255	; 0xff
 8000432:	d0e0      	beq.n	80003f6 <_ZN11USARTSerial11printNumberEmh+0x2a>
			write('0' + (digit > 9 ? digit + 7 : digit));
 8000434:	2a09      	cmp	r2, #9
 8000436:	d904      	bls.n	8000442 <_ZN11USARTSerial11printNumberEmh+0x76>
 8000438:	f102 0137 	add.w	r1, r2, #55	; 0x37
 800043c:	fbb3 f8f4 	udiv	r8, r3, r4
 8000440:	e7e0      	b.n	8000404 <_ZN11USARTSerial11printNumberEmh+0x38>
 8000442:	fbb3 f8f4 	udiv	r8, r3, r4
 8000446:	e7db      	b.n	8000400 <_ZN11USARTSerial11printNumberEmh+0x34>
			n++;
		}
		divider /= base;
	}
	return n;
}
 8000448:	4648      	mov	r0, r9
 800044a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800044e:	bf00      	nop

08000450 <_ZN11USARTSerial10printFloatEfh>:

uint16_t USARTSerial::printFloat(float val, uint8_t prec) {
 8000450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000454:	460c      	mov	r4, r1
 8000456:	4607      	mov	r7, r0
	uint16_t n = 0;
	if (val < 0) {
 8000458:	2100      	movs	r1, #0
 800045a:	4620      	mov	r0, r4
		divider /= base;
	}
	return n;
}

uint16_t USARTSerial::printFloat(float val, uint8_t prec) {
 800045c:	4690      	mov	r8, r2
	uint16_t n = 0;
	if (val < 0) {
 800045e:	f002 eb6a 	blx	8002b34 <__aeabi_fcmplt>
 8000462:	f04f 0900 	mov.w	r9, #0
 8000466:	2800      	cmp	r0, #0
 8000468:	d143      	bne.n	80004f2 <_ZN11USARTSerial10printFloatEfh+0xa2>
		write('-');
		val = -val;
		n++;
	}
	uint32_t intpart = (uint32_t) val;
 800046a:	4620      	mov	r0, r4
 800046c:	f002 ebc0 	blx	8002bf0 <__aeabi_f2uiz>
 8000470:	4606      	mov	r6, r0
	val -= intpart;
 8000472:	f002 e918 	blx	80026a4 <__aeabi_ui2f>
 8000476:	4601      	mov	r1, r0
 8000478:	4620      	mov	r0, r4
 800047a:	f002 e834 	blx	80024e4 <__aeabi_fsub>
	n += printNumber(intpart, DEC);
 800047e:	4631      	mov	r1, r6
		write('-');
		val = -val;
		n++;
	}
	uint32_t intpart = (uint32_t) val;
	val -= intpart;
 8000480:	4605      	mov	r5, r0
	n += printNumber(intpart, DEC);
 8000482:	220a      	movs	r2, #10
 8000484:	4638      	mov	r0, r7
 8000486:	f7ff ffa1 	bl	80003cc <_ZN11USARTSerial11printNumberEmh>
	int i;
	if (val > 0) {
 800048a:	2100      	movs	r1, #0
		val = -val;
		n++;
	}
	uint32_t intpart = (uint32_t) val;
	val -= intpart;
	n += printNumber(intpart, DEC);
 800048c:	4481      	add	r9, r0
	int i;
	if (val > 0) {
 800048e:	4628      	mov	r0, r5
		val = -val;
		n++;
	}
	uint32_t intpart = (uint32_t) val;
	val -= intpart;
	n += printNumber(intpart, DEC);
 8000490:	fa1f f989 	uxth.w	r9, r9
	int i;
	if (val > 0) {
 8000494:	f002 eb72 	blx	8002b7c <__aeabi_fcmpgt>
 8000498:	b340      	cbz	r0, 80004ec <_ZN11USARTSerial10printFloatEfh+0x9c>
		write('.');
 800049a:	4638      	mov	r0, r7
 800049c:	212e      	movs	r1, #46	; 0x2e
		n++;
 800049e:	f109 0901 	add.w	r9, r9, #1
	uint32_t intpart = (uint32_t) val;
	val -= intpart;
	n += printNumber(intpart, DEC);
	int i;
	if (val > 0) {
		write('.');
 80004a2:	f7ff ff3b 	bl	800031c <_ZN11USARTSerial5writeEt>
		n++;
 80004a6:	fa1f f989 	uxth.w	r9, r9
		for (i = 0; i < prec; i++) {
 80004aa:	f1b8 0f00 	cmp.w	r8, #0
 80004ae:	d01d      	beq.n	80004ec <_ZN11USARTSerial10printFloatEfh+0x9c>
 80004b0:	2400      	movs	r4, #0
			val *= 10;
 80004b2:	2100      	movs	r1, #0
 80004b4:	f2c4 1120 	movt	r1, #16672	; 0x4120
 80004b8:	4628      	mov	r0, r5
 80004ba:	f002 e966 	blx	8002788 <__aeabi_fmul>
 80004be:	4606      	mov	r6, r0
			printNumber((uint32_t) val, DEC);
 80004c0:	f002 eb96 	blx	8002bf0 <__aeabi_f2uiz>
 80004c4:	4605      	mov	r5, r0
 80004c6:	4629      	mov	r1, r5
 80004c8:	220a      	movs	r2, #10
 80004ca:	4638      	mov	r0, r7
 80004cc:	f7ff ff7e 	bl	80003cc <_ZN11USARTSerial11printNumberEmh>
			val -= (uint32_t) val;
 80004d0:	4628      	mov	r0, r5
 80004d2:	f002 e8e8 	blx	80026a4 <__aeabi_ui2f>
 80004d6:	4601      	mov	r1, r0
 80004d8:	4630      	mov	r0, r6
 80004da:	f002 e804 	blx	80024e4 <__aeabi_fsub>
	n += printNumber(intpart, DEC);
	int i;
	if (val > 0) {
		write('.');
		n++;
		for (i = 0; i < prec; i++) {
 80004de:	3401      	adds	r4, #1
 80004e0:	4544      	cmp	r4, r8
			val *= 10;
			printNumber((uint32_t) val, DEC);
			val -= (uint32_t) val;
 80004e2:	4605      	mov	r5, r0
	n += printNumber(intpart, DEC);
	int i;
	if (val > 0) {
		write('.');
		n++;
		for (i = 0; i < prec; i++) {
 80004e4:	dbe5      	blt.n	80004b2 <_ZN11USARTSerial10printFloatEfh+0x62>
 80004e6:	44c1      	add	r9, r8
 80004e8:	fa1f f989 	uxth.w	r9, r9
			val -= (uint32_t) val;
			n++;
		}
	}
	return n;
}
 80004ec:	4648      	mov	r0, r9
 80004ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
}

uint16_t USARTSerial::printFloat(float val, uint8_t prec) {
	uint16_t n = 0;
	if (val < 0) {
		write('-');
 80004f2:	4638      	mov	r0, r7
 80004f4:	212d      	movs	r1, #45	; 0x2d
 80004f6:	f7ff ff11 	bl	800031c <_ZN11USARTSerial5writeEt>
		val = -val;
 80004fa:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
 80004fe:	f04f 0901 	mov.w	r9, #1
 8000502:	e7b2      	b.n	800046a <_ZN11USARTSerial10printFloatEfh+0x1a>

08000504 <_ZN11USARTSerial9availableEv>:
 * @param  none
 * @retval char
 */

uint16_t USARTSerial::available() {
	return rx.count;
 8000504:	6803      	ldr	r3, [r0, #0]
	//if (USART_GetFlagStatus(USART3, USART_FLAG_RXNE) == SET)
	//	return 1;
	//return 0;
}
 8000506:	f8b3 0104 	ldrh.w	r0, [r3, #260]	; 0x104
 800050a:	4770      	bx	lr

0800050c <_ZN11USARTSerial5flushEv>:
 //return USART_ReceiveData(USART3);
 return rx3.ringout();
 }
 */

void USARTSerial::flush() {
 800050c:	b570      	push	{r4, r5, r6, lr}
	while (!tx.is_empty()
 800050e:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 8000512:	f44f 4690 	mov.w	r6, #18432	; 0x4800
 //return USART_ReceiveData(USART3);
 return rx3.ringout();
 }
 */

void USARTSerial::flush() {
 8000516:	4604      	mov	r4, r0
	while (!tx.is_empty()
 8000518:	f2c4 0501 	movt	r5, #16385	; 0x4001
 800051c:	f2c4 0600 	movt	r6, #16384	; 0x4000
 8000520:	e004      	b.n	800052c <_ZN11USARTSerial5flushEv+0x20>
			&& (!(USARTx == USART1 )|| USART_GetFlagStatus(USART1, USART_IT_TXE) )&& ( !(USARTx == USART3) || USART_GetFlagStatus(USART3, USART_IT_TXE) )
 8000522:	68a3      	ldr	r3, [r4, #8]
 return rx3.ringout();
 }
 */

void USARTSerial::flush() {
	while (!tx.is_empty()
 8000524:	42ab      	cmp	r3, r5
 8000526:	d00d      	beq.n	8000544 <_ZN11USARTSerial5flushEv+0x38>
 8000528:	42b3      	cmp	r3, r6
 800052a:	d014      	beq.n	8000556 <_ZN11USARTSerial5flushEv+0x4a>
 800052c:	6863      	ldr	r3, [r4, #4]
	bool is_full() {
		return (count > 0) && head == tail;
	}

	bool is_empty() {
		return (count == 0) && head == tail;
 800052e:	f8b3 2104 	ldrh.w	r2, [r3, #260]	; 0x104
 8000532:	2a00      	cmp	r2, #0
 8000534:	d1f5      	bne.n	8000522 <_ZN11USARTSerial5flushEv+0x16>
 8000536:	f8b3 2100 	ldrh.w	r2, [r3, #256]	; 0x100
 800053a:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 800053e:	429a      	cmp	r2, r3
 8000540:	d1ef      	bne.n	8000522 <_ZN11USARTSerial5flushEv+0x16>
 8000542:	bd70      	pop	{r4, r5, r6, pc}
			&& (!(USARTx == USART1 )|| USART_GetFlagStatus(USART1, USART_IT_TXE) )&& ( !(USARTx == USART3) || USART_GetFlagStatus(USART3, USART_IT_TXE) )
 8000544:	f240 7127 	movw	r1, #1831	; 0x727
 8000548:	4628      	mov	r0, r5
 800054a:	f000 ff89 	bl	8001460 <USART_GetFlagStatus>
 return rx3.ringout();
 }
 */

void USARTSerial::flush() {
	while (!tx.is_empty()
 800054e:	b150      	cbz	r0, 8000566 <_ZN11USARTSerial5flushEv+0x5a>
 8000550:	68a3      	ldr	r3, [r4, #8]
 8000552:	42b3      	cmp	r3, r6
 8000554:	d1ea      	bne.n	800052c <_ZN11USARTSerial5flushEv+0x20>
			&& (!(USARTx == USART1 )|| USART_GetFlagStatus(USART1, USART_IT_TXE) )&& ( !(USARTx == USART3) || USART_GetFlagStatus(USART3, USART_IT_TXE) )
 8000556:	4630      	mov	r0, r6
 8000558:	f240 7127 	movw	r1, #1831	; 0x727
 800055c:	f000 ff80 	bl	8001460 <USART_GetFlagStatus>
 return rx3.ringout();
 }
 */

void USARTSerial::flush() {
	while (!tx.is_empty()
 8000560:	2800      	cmp	r0, #0
 8000562:	d1e3      	bne.n	800052c <_ZN11USARTSerial5flushEv+0x20>
 8000564:	bd70      	pop	{r4, r5, r6, pc}
 8000566:	bd70      	pop	{r4, r5, r6, pc}

08000568 <_ZN11USARTSerial4readEv>:
			);
		}

uint16_t USARTSerial::read() {
//	return read3();
	return rx.ringout();
 8000568:	6803      	ldr	r3, [r0, #0]
 800056a:	f8b3 0104 	ldrh.w	r0, [r3, #260]	; 0x104
 800056e:	f8b3 2100 	ldrh.w	r2, [r3, #256]	; 0x100
	while (!tx.is_empty()
			&& (!(USARTx == USART1 )|| USART_GetFlagStatus(USART1, USART_IT_TXE) )&& ( !(USARTx == USART3) || USART_GetFlagStatus(USART3, USART_IT_TXE) )
			);
		}

uint16_t USARTSerial::read() {
 8000572:	b410      	push	{r4}
 8000574:	b918      	cbnz	r0, 800057e <_ZN11USARTSerial4readEv+0x16>
 8000576:	f8b3 1102 	ldrh.w	r1, [r3, #258]	; 0x102
 800057a:	4291      	cmp	r1, r2
 800057c:	d009      	beq.n	8000592 <_ZN11USARTSerial4readEv+0x2a>
	}

	uint16 ringout() {
		if ( is_empty() )
			return 0;
		uint16 c = buffer[head++];
 800057e:	1c54      	adds	r4, r2, #1
		head %= RINGBUFFER_SIZE;
		count--;
 8000580:	1e41      	subs	r1, r0, #1

	uint16 ringout() {
		if ( is_empty() )
			return 0;
		uint16 c = buffer[head++];
		head %= RINGBUFFER_SIZE;
 8000582:	f004 047f 	and.w	r4, r4, #127	; 0x7f
	}

	uint16 ringout() {
		if ( is_empty() )
			return 0;
		uint16 c = buffer[head++];
 8000586:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
		head %= RINGBUFFER_SIZE;
 800058a:	f8a3 4100 	strh.w	r4, [r3, #256]	; 0x100
		count--;
 800058e:	f8a3 1104 	strh.w	r1, [r3, #260]	; 0x104
//	return read3();
	return rx.ringout();
}
 8000592:	bc10      	pop	{r4}
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <_Z17USART1_IRQHandlerv>:

// this is the interrupt request handler (IRQ) for ALL USART3 interrupts

void USART1_IRQHandler(void) {
	// check if the USART1 receive interrupt flag was set
	if (USART_GetITStatus(USART1, USART_IT_RXNE )) {
 8000598:	f44f 5080 	mov.w	r0, #4096	; 0x1000
	return rx.ringout();
}

// this is the interrupt request handler (IRQ) for ALL USART3 interrupts

void USART1_IRQHandler(void) {
 800059c:	b510      	push	{r4, lr}
	// check if the USART1 receive interrupt flag was set
	if (USART_GetITStatus(USART1, USART_IT_RXNE )) {
 800059e:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80005a2:	f240 5125 	movw	r1, #1317	; 0x525
 80005a6:	f000 ff65 	bl	8001474 <USART_GetITStatus>
 80005aa:	2800      	cmp	r0, #0
 80005ac:	d127      	bne.n	80005fe <_Z17USART1_IRQHandlerv+0x66>
		rx1.ringin(USART_ReceiveData(USART1 ));
	}
	if (USART_GetITStatus(USART1, USART_IT_TXE )) {
 80005ae:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80005b2:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80005b6:	f240 7127 	movw	r1, #1831	; 0x727
 80005ba:	f000 ff5b 	bl	8001474 <USART_GetITStatus>
 80005be:	b1e8      	cbz	r0, 80005fc <_Z17USART1_IRQHandlerv+0x64>
	bool is_full() {
		return (count > 0) && head == tail;
	}

	bool is_empty() {
		return (count == 0) && head == tail;
 80005c0:	4b29      	ldr	r3, [pc, #164]	; (8000668 <_Z17USART1_IRQHandlerv+0xd0>)
 80005c2:	f8b3 220c 	ldrh.w	r2, [r3, #524]	; 0x20c
 80005c6:	f8b3 1208 	ldrh.w	r1, [r3, #520]	; 0x208
 80005ca:	b91a      	cbnz	r2, 80005d4 <_Z17USART1_IRQHandlerv+0x3c>
 80005cc:	f8b3 020a 	ldrh.w	r0, [r3, #522]	; 0x20a
 80005d0:	4288      	cmp	r0, r1
 80005d2:	d037      	beq.n	8000644 <_Z17USART1_IRQHandlerv+0xac>
	}

	uint16 ringout() {
		if ( is_empty() )
			return 0;
		uint16 c = buffer[head++];
 80005d4:	eb03 0041 	add.w	r0, r3, r1, lsl #1
 80005d8:	1c4c      	adds	r4, r1, #1
 80005da:	f8b0 1108 	ldrh.w	r1, [r0, #264]	; 0x108
		if (tx1.is_empty()) {
			USART_ITConfig(USART1, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART1, USART_IT_TXE );
		} else {
			USART_SendData(USART1, tx1.ringout());
 80005de:	f44f 5080 	mov.w	r0, #4096	; 0x1000
		head %= RINGBUFFER_SIZE;
 80005e2:	f004 047f 	and.w	r4, r4, #127	; 0x7f
		count--;
 80005e6:	3a01      	subs	r2, #1
 80005e8:	f2c4 0001 	movt	r0, #16385	; 0x4001

	uint16 ringout() {
		if ( is_empty() )
			return 0;
		uint16 c = buffer[head++];
		head %= RINGBUFFER_SIZE;
 80005ec:	f8a3 4208 	strh.w	r4, [r3, #520]	; 0x208
		count--;
 80005f0:	f8a3 220c 	strh.w	r2, [r3, #524]	; 0x20c
		}
	}
}
 80005f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (USART_GetITStatus(USART1, USART_IT_TXE )) {
		if (tx1.is_empty()) {
			USART_ITConfig(USART1, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART1, USART_IT_TXE );
		} else {
			USART_SendData(USART1, tx1.ringout());
 80005f8:	f000 be70 	b.w	80012dc <USART_SendData>
 80005fc:	bd10      	pop	{r4, pc}
// this is the interrupt request handler (IRQ) for ALL USART3 interrupts

void USART1_IRQHandler(void) {
	// check if the USART1 receive interrupt flag was set
	if (USART_GetITStatus(USART1, USART_IT_RXNE )) {
		rx1.ringin(USART_ReceiveData(USART1 ));
 80005fe:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000602:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000606:	f000 fe6d 	bl	80012e4 <USART_ReceiveData>
			return 0;
		return buffer[head];
	}

	bool is_full() {
		return (count > 0) && head == tail;
 800060a:	4b17      	ldr	r3, [pc, #92]	; (8000668 <_Z17USART1_IRQHandlerv+0xd0>)
 800060c:	f8b3 2104 	ldrh.w	r2, [r3, #260]	; 0x104
 8000610:	b962      	cbnz	r2, 800062c <_Z17USART1_IRQHandlerv+0x94>
	uint16 ringin(uint16 c) {
		if ( is_full() ) {
			head++;  head %= RINGBUFFER_SIZE;
			// buffer over run occurred!
		} else
			count++;
 8000612:	3201      	adds	r2, #1
 8000614:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
		buffer[tail++] = c;
 8000618:	f8b3 2102 	ldrh.w	r2, [r3, #258]	; 0x102
 800061c:	1c51      	adds	r1, r2, #1
		tail %= RINGBUFFER_SIZE;
 800061e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		if ( is_full() ) {
			head++;  head %= RINGBUFFER_SIZE;
			// buffer over run occurred!
		} else
			count++;
		buffer[tail++] = c;
 8000622:	f823 0012 	strh.w	r0, [r3, r2, lsl #1]
		tail %= RINGBUFFER_SIZE;
 8000626:	f8a3 1102 	strh.w	r1, [r3, #258]	; 0x102
 800062a:	e7c0      	b.n	80005ae <_Z17USART1_IRQHandlerv+0x16>
			return 0;
		return buffer[head];
	}

	bool is_full() {
		return (count > 0) && head == tail;
 800062c:	f8b3 4100 	ldrh.w	r4, [r3, #256]	; 0x100
 8000630:	f8b3 1102 	ldrh.w	r1, [r3, #258]	; 0x102
 8000634:	42a1      	cmp	r1, r4
 8000636:	d1ec      	bne.n	8000612 <_Z17USART1_IRQHandlerv+0x7a>
		count = 0;
	}

	uint16 ringin(uint16 c) {
		if ( is_full() ) {
			head++;  head %= RINGBUFFER_SIZE;
 8000638:	3101      	adds	r1, #1
 800063a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800063e:	f8a3 1100 	strh.w	r1, [r3, #256]	; 0x100
 8000642:	e7e9      	b.n	8000618 <_Z17USART1_IRQHandlerv+0x80>
	}
	if (USART_GetITStatus(USART1, USART_IT_TXE )) {
		if (tx1.is_empty()) {
			USART_ITConfig(USART1, USART_IT_TXE, (FunctionalState) DISABLE);
 8000644:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000648:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800064c:	f240 7127 	movw	r1, #1831	; 0x727
 8000650:	f000 feea 	bl	8001428 <USART_ITConfig>
			USART_ClearITPendingBit(USART1, USART_IT_TXE );
 8000654:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000658:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800065c:	f240 7127 	movw	r1, #1831	; 0x727
		} else {
			USART_SendData(USART1, tx1.ringout());
		}
	}
}
 8000660:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		rx1.ringin(USART_ReceiveData(USART1 ));
	}
	if (USART_GetITStatus(USART1, USART_IT_TXE )) {
		if (tx1.is_empty()) {
			USART_ITConfig(USART1, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART1, USART_IT_TXE );
 8000664:	f000 bf2c 	b.w	80014c0 <USART_ClearITPendingBit>
 8000668:	20000098 	.word	0x20000098

0800066c <USART3_IRQHandler>:
	}
}

void USART3_IRQHandler(void) {
	// check if the USART1 receive interrupt flag was set
	if (USART_GetITStatus(USART3, USART_IT_RXNE )) {
 800066c:	f44f 4090 	mov.w	r0, #18432	; 0x4800
			USART_SendData(USART1, tx1.ringout());
		}
	}
}

void USART3_IRQHandler(void) {
 8000670:	b510      	push	{r4, lr}
	// check if the USART1 receive interrupt flag was set
	if (USART_GetITStatus(USART3, USART_IT_RXNE )) {
 8000672:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000676:	f240 5125 	movw	r1, #1317	; 0x525
 800067a:	f000 fefb 	bl	8001474 <USART_GetITStatus>
 800067e:	2800      	cmp	r0, #0
 8000680:	d127      	bne.n	80006d2 <USART3_IRQHandler+0x66>
		rx3.ringin(USART_ReceiveData(USART3 ));
	}
	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
 8000682:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 8000686:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800068a:	f240 7127 	movw	r1, #1831	; 0x727
 800068e:	f000 fef1 	bl	8001474 <USART_GetITStatus>
 8000692:	b1e8      	cbz	r0, 80006d0 <USART3_IRQHandler+0x64>
	bool is_full() {
		return (count > 0) && head == tail;
	}

	bool is_empty() {
		return (count == 0) && head == tail;
 8000694:	4b2a      	ldr	r3, [pc, #168]	; (8000740 <USART3_IRQHandler+0xd4>)
 8000696:	f8b3 241c 	ldrh.w	r2, [r3, #1052]	; 0x41c
 800069a:	f8b3 1418 	ldrh.w	r1, [r3, #1048]	; 0x418
 800069e:	b91a      	cbnz	r2, 80006a8 <USART3_IRQHandler+0x3c>
 80006a0:	f8b3 041a 	ldrh.w	r0, [r3, #1050]	; 0x41a
 80006a4:	4288      	cmp	r0, r1
 80006a6:	d039      	beq.n	800071c <USART3_IRQHandler+0xb0>
	}

	uint16 ringout() {
		if ( is_empty() )
			return 0;
		uint16 c = buffer[head++];
 80006a8:	eb03 0041 	add.w	r0, r3, r1, lsl #1
 80006ac:	1c4c      	adds	r4, r1, #1
 80006ae:	f8b0 1318 	ldrh.w	r1, [r0, #792]	; 0x318
		if (tx3.is_empty()) {
			USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART3, USART_IT_TXE );
		} else {
			USART_SendData(USART3, tx3.ringout());
 80006b2:	f44f 4090 	mov.w	r0, #18432	; 0x4800
		head %= RINGBUFFER_SIZE;
 80006b6:	f004 047f 	and.w	r4, r4, #127	; 0x7f
		count--;
 80006ba:	3a01      	subs	r2, #1
 80006bc:	f2c4 0000 	movt	r0, #16384	; 0x4000

	uint16 ringout() {
		if ( is_empty() )
			return 0;
		uint16 c = buffer[head++];
		head %= RINGBUFFER_SIZE;
 80006c0:	f8a3 4418 	strh.w	r4, [r3, #1048]	; 0x418
		count--;
 80006c4:	f8a3 241c 	strh.w	r2, [r3, #1052]	; 0x41c
		}
	}
}
 80006c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
		if (tx3.is_empty()) {
			USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART3, USART_IT_TXE );
		} else {
			USART_SendData(USART3, tx3.ringout());
 80006cc:	f000 be06 	b.w	80012dc <USART_SendData>
 80006d0:	bd10      	pop	{r4, pc}
}

void USART3_IRQHandler(void) {
	// check if the USART1 receive interrupt flag was set
	if (USART_GetITStatus(USART3, USART_IT_RXNE )) {
		rx3.ringin(USART_ReceiveData(USART3 ));
 80006d2:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 80006d6:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80006da:	f000 fe03 	bl	80012e4 <USART_ReceiveData>
			return 0;
		return buffer[head];
	}

	bool is_full() {
		return (count > 0) && head == tail;
 80006de:	4b18      	ldr	r3, [pc, #96]	; (8000740 <USART3_IRQHandler+0xd4>)
 80006e0:	f8b3 2314 	ldrh.w	r2, [r3, #788]	; 0x314
 80006e4:	b972      	cbnz	r2, 8000704 <USART3_IRQHandler+0x98>
	uint16 ringin(uint16 c) {
		if ( is_full() ) {
			head++;  head %= RINGBUFFER_SIZE;
			// buffer over run occurred!
		} else
			count++;
 80006e6:	3201      	adds	r2, #1
 80006e8:	f8a3 2314 	strh.w	r2, [r3, #788]	; 0x314
		buffer[tail++] = c;
 80006ec:	f8b3 2312 	ldrh.w	r2, [r3, #786]	; 0x312
 80006f0:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 80006f4:	3201      	adds	r2, #1
		tail %= RINGBUFFER_SIZE;
 80006f6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
		if ( is_full() ) {
			head++;  head %= RINGBUFFER_SIZE;
			// buffer over run occurred!
		} else
			count++;
		buffer[tail++] = c;
 80006fa:	f8a1 0210 	strh.w	r0, [r1, #528]	; 0x210
		tail %= RINGBUFFER_SIZE;
 80006fe:	f8a3 2312 	strh.w	r2, [r3, #786]	; 0x312
 8000702:	e7be      	b.n	8000682 <USART3_IRQHandler+0x16>
			return 0;
		return buffer[head];
	}

	bool is_full() {
		return (count > 0) && head == tail;
 8000704:	f8b3 4310 	ldrh.w	r4, [r3, #784]	; 0x310
 8000708:	f8b3 1312 	ldrh.w	r1, [r3, #786]	; 0x312
 800070c:	42a1      	cmp	r1, r4
 800070e:	d1ea      	bne.n	80006e6 <USART3_IRQHandler+0x7a>
		count = 0;
	}

	uint16 ringin(uint16 c) {
		if ( is_full() ) {
			head++;  head %= RINGBUFFER_SIZE;
 8000710:	3101      	adds	r1, #1
 8000712:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8000716:	f8a3 1310 	strh.w	r1, [r3, #784]	; 0x310
 800071a:	e7e7      	b.n	80006ec <USART3_IRQHandler+0x80>
	}
	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
		if (tx3.is_empty()) {
			USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) DISABLE);
 800071c:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 8000720:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000724:	f240 7127 	movw	r1, #1831	; 0x727
 8000728:	f000 fe7e 	bl	8001428 <USART_ITConfig>
			USART_ClearITPendingBit(USART3, USART_IT_TXE );
 800072c:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 8000730:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000734:	f240 7127 	movw	r1, #1831	; 0x727
		} else {
			USART_SendData(USART3, tx3.ringout());
		}
	}
}
 8000738:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		rx3.ringin(USART_ReceiveData(USART3 ));
	}
	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
		if (tx3.is_empty()) {
			USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART3, USART_IT_TXE );
 800073c:	f000 bec0 	b.w	80014c0 <USART_ClearITPendingBit>
 8000740:	20000098 	.word	0x20000098

08000744 <pinMode>:
 static const uint8_t MISO = 12;
 static const uint8_t SCK  = 13; // PB7
 static const uint8_t LED_BUILTIN = 14;
 */

void pinMode(uint32_t portpin, GPIOMode_TypeDef mode) {
 8000744:	b5f0      	push	{r4, r5, r6, r7, lr}

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(GPIOPeriph[portpin>>16 & 0xf], ENABLE);
 8000746:	f240 0400 	movw	r4, #0
 800074a:	f3c0 4603 	ubfx	r6, r0, #16, #4
 800074e:	f2c2 0400 	movt	r4, #8192	; 0x2000
 static const uint8_t MISO = 12;
 static const uint8_t SCK  = 13; // PB7
 static const uint8_t LED_BUILTIN = 14;
 */

void pinMode(uint32_t portpin, GPIOMode_TypeDef mode) {
 8000752:	b083      	sub	sp, #12
 8000754:	460f      	mov	r7, r1
 8000756:	4605      	mov	r5, r0

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(GPIOPeriph[portpin>>16 & 0xf], ENABLE);
 8000758:	2101      	movs	r1, #1
 800075a:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	//
	GPIO_Init(GPIOPort[portpin >>16 & 0x0f], &GPIO_InitStructure);
 800075e:	eb04 0486 	add.w	r4, r4, r6, lsl #2

void pinMode(uint32_t portpin, GPIOMode_TypeDef mode) {

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(GPIOPeriph[portpin>>16 & 0xf], ENABLE);
 8000762:	f000 fb7b 	bl	8000e5c <RCC_AHB1PeriphClockCmd>

	GPIO_InitStructure.GPIO_Pin = portpin & 0xffff;
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000766:	2300      	movs	r3, #0

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(GPIOPeriph[portpin>>16 & 0xf], ENABLE);

	GPIO_InitStructure.GPIO_Pin = portpin & 0xffff;
 8000768:	b2ad      	uxth	r5, r5
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800076a:	f88d 3006 	strb.w	r3, [sp, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800076e:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	//
	GPIO_Init(GPIOPort[portpin >>16 & 0x0f], &GPIO_InitStructure);
 8000772:	6aa0      	ldr	r0, [r4, #40]	; 0x28

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(GPIOPeriph[portpin>>16 & 0xf], ENABLE);

	GPIO_InitStructure.GPIO_Pin = portpin & 0xffff;
 8000774:	9500      	str	r5, [sp, #0]
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000776:	2302      	movs	r3, #2
	//
	GPIO_Init(GPIOPort[portpin >>16 & 0x0f], &GPIO_InitStructure);
 8000778:	4669      	mov	r1, sp
	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(GPIOPeriph[portpin>>16 & 0xf], ENABLE);

	GPIO_InitStructure.GPIO_Pin = portpin & 0xffff;
	GPIO_InitStructure.GPIO_Mode = mode;
 800077a:	f88d 7004 	strb.w	r7, [sp, #4]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800077e:	f88d 3005 	strb.w	r3, [sp, #5]
	//
	GPIO_Init(GPIOPort[portpin >>16 & 0x0f], &GPIO_InitStructure);
 8000782:	f000 f94d 	bl	8000a20 <GPIO_Init>
}
 8000786:	b003      	add	sp, #12
 8000788:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800078a:	bf00      	nop

0800078c <GPIOMode>:


void GPIOMode(uint32_t periph, GPIO_TypeDef * port, uint16_t pins,
		GPIOMode_TypeDef mode, GPIOSpeed_TypeDef clk, GPIOOType_TypeDef otype,
		GPIOPuPd_TypeDef pupd) {
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	460d      	mov	r5, r1

	GPIO_InitTypeDef GPIO_InitStructure;
	// wake up the port
	RCC_AHB1PeriphClockCmd(periph, ENABLE);
 8000792:	2101      	movs	r1, #1
}


void GPIOMode(uint32_t periph, GPIO_TypeDef * port, uint16_t pins,
		GPIOMode_TypeDef mode, GPIOSpeed_TypeDef clk, GPIOOType_TypeDef otype,
		GPIOPuPd_TypeDef pupd) {
 8000794:	461e      	mov	r6, r3
 8000796:	4614      	mov	r4, r2

	GPIO_InitTypeDef GPIO_InitStructure;
	// wake up the port
	RCC_AHB1PeriphClockCmd(periph, ENABLE);
 8000798:	f000 fb60 	bl	8000e5c <RCC_AHB1PeriphClockCmd>
	//
	GPIO_InitStructure.GPIO_Pin = pins;
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = otype;
 800079c:	f89d 301c 	ldrb.w	r3, [sp, #28]

	GPIO_InitTypeDef GPIO_InitStructure;
	// wake up the port
	RCC_AHB1PeriphClockCmd(periph, ENABLE);
	//
	GPIO_InitStructure.GPIO_Pin = pins;
 80007a0:	9400      	str	r4, [sp, #0]
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = otype;
 80007a2:	f88d 3006 	strb.w	r3, [sp, #6]
	GPIO_InitStructure.GPIO_PuPd = pupd;
 80007a6:	f89d 3020 	ldrb.w	r3, [sp, #32]
	GPIO_InitTypeDef GPIO_InitStructure;
	// wake up the port
	RCC_AHB1PeriphClockCmd(periph, ENABLE);
	//
	GPIO_InitStructure.GPIO_Pin = pins;
	GPIO_InitStructure.GPIO_Mode = mode;
 80007aa:	f88d 6004 	strb.w	r6, [sp, #4]
	GPIO_InitStructure.GPIO_OType = otype;
	GPIO_InitStructure.GPIO_PuPd = pupd;
 80007ae:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_InitStructure.GPIO_Speed = clk;
 80007b2:	f89d 3018 	ldrb.w	r3, [sp, #24]
	//
	GPIO_Init(port, &GPIO_InitStructure);
 80007b6:	4628      	mov	r0, r5
 80007b8:	4669      	mov	r1, sp
	//
	GPIO_InitStructure.GPIO_Pin = pins;
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = otype;
	GPIO_InitStructure.GPIO_PuPd = pupd;
	GPIO_InitStructure.GPIO_Speed = clk;
 80007ba:	f88d 3005 	strb.w	r3, [sp, #5]
	//
	GPIO_Init(port, &GPIO_InitStructure);
 80007be:	f000 f92f 	bl	8000a20 <GPIO_Init>
}
 80007c2:	b002      	add	sp, #8
 80007c4:	bd70      	pop	{r4, r5, r6, pc}
 80007c6:	bf00      	nop

080007c8 <digitalWrite>:
 }
 */
void digitalWrite(uint32_t portpin, uint8_t bit) {
	if (bit) {
		//? Bit_SET : Bit_RESET ));
		GPIO_SetBits(GPIOPort[portpin >>16 & 0x0f], portpin & 0xffff);
 80007c8:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <digitalWrite+0x1c>)
 80007ca:	f3c0 4203 	ubfx	r2, r0, #16, #4
 80007ce:	eb03 0382 	add.w	r3, r3, r2, lsl #2
/*
 static void turnOffPWM(uint8_t timer) {
 }
 */
void digitalWrite(uint32_t portpin, uint8_t bit) {
	if (bit) {
 80007d2:	b919      	cbnz	r1, 80007dc <digitalWrite+0x14>
		//? Bit_SET : Bit_RESET ));
		GPIO_SetBits(GPIOPort[portpin >>16 & 0x0f], portpin & 0xffff);
	} else {
		GPIO_ResetBits(GPIOPort[portpin >>16 & 0x0f], portpin & 0xffff);
 80007d4:	b281      	uxth	r1, r0
 80007d6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80007d8:	f000 b9b0 	b.w	8000b3c <GPIO_ResetBits>
 }
 */
void digitalWrite(uint32_t portpin, uint8_t bit) {
	if (bit) {
		//? Bit_SET : Bit_RESET ));
		GPIO_SetBits(GPIOPort[portpin >>16 & 0x0f], portpin & 0xffff);
 80007dc:	b281      	uxth	r1, r0
 80007de:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80007e0:	f000 b9aa 	b.w	8000b38 <GPIO_SetBits>
 80007e4:	20000000 	.word	0x20000000

080007e8 <portWrite>:
		GPIO_ResetBits(GPIOPort[portpin >>16 & 0x0f], portpin & 0xffff);
	}
}

void portWrite(GPIO_TypeDef * port, uint16_t bits) {
	GPIO_Write(port, bits);
 80007e8:	f000 b9b0 	b.w	8000b4c <GPIO_Write>

080007ec <digitalRead>:
}

uint8_t digitalRead(GPIO_TypeDef * port, uint16_t pin) {
	uint8_t mode = (port->MODER) >> (pin * 2);
 80007ec:	6802      	ldr	r2, [r0, #0]

void portWrite(GPIO_TypeDef * port, uint16_t bits) {
	GPIO_Write(port, bits);
}

uint8_t digitalRead(GPIO_TypeDef * port, uint16_t pin) {
 80007ee:	b508      	push	{r3, lr}
	uint8_t mode = (port->MODER) >> (pin * 2);
 80007f0:	004b      	lsls	r3, r1, #1
 80007f2:	fa22 f303 	lsr.w	r3, r2, r3
	if (mode == GPIO_Mode_OUT)
 80007f6:	b2db      	uxtb	r3, r3
 80007f8:	2b01      	cmp	r3, #1
 80007fa:	d005      	beq.n	8000808 <digitalRead+0x1c>
		return (GPIO_ReadOutputDataBit(port, pin) ? SET : RESET);
	return (GPIO_ReadInputDataBit(port, pin) ? SET : RESET);
 80007fc:	f000 f988 	bl	8000b10 <GPIO_ReadInputDataBit>
 8000800:	3000      	adds	r0, #0
 8000802:	bf18      	it	ne
 8000804:	2001      	movne	r0, #1
}
 8000806:	bd08      	pop	{r3, pc}
}

uint8_t digitalRead(GPIO_TypeDef * port, uint16_t pin) {
	uint8_t mode = (port->MODER) >> (pin * 2);
	if (mode == GPIO_Mode_OUT)
		return (GPIO_ReadOutputDataBit(port, pin) ? SET : RESET);
 8000808:	f000 f98c 	bl	8000b24 <GPIO_ReadOutputDataBit>
 800080c:	3000      	adds	r0, #0
 800080e:	bf18      	it	ne
 8000810:	2001      	movne	r0, #1
 8000812:	bd08      	pop	{r3, pc}

08000814 <NVIC_PriorityGroupConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8000814:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8000818:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 800081c:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000820:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8000824:	60d8      	str	r0, [r3, #12]
 8000826:	4770      	bx	lr

08000828 <NVIC_Init>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000828:	78c3      	ldrb	r3, [r0, #3]
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 800082a:	b430      	push	{r4, r5}
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 800082c:	b97b      	cbnz	r3, 800084e <NVIC_Init+0x26>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800082e:	7802      	ldrb	r2, [r0, #0]
 8000830:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8000834:	0951      	lsrs	r1, r2, #5
 8000836:	f2ce 0300 	movt	r3, #57344	; 0xe000
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800083a:	f002 021f 	and.w	r2, r2, #31
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800083e:	3120      	adds	r1, #32
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000840:	2001      	movs	r0, #1
 8000842:	fa00 f202 	lsl.w	r2, r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000846:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800084a:	bc30      	pop	{r4, r5}
 800084c:	4770      	bx	lr
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800084e:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8000852:	f2ce 0300 	movt	r3, #57344	; 0xe000
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000856:	7845      	ldrb	r5, [r0, #1]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000858:	68da      	ldr	r2, [r3, #12]
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 800085a:	7884      	ldrb	r4, [r0, #2]
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800085c:	7803      	ldrb	r3, [r0, #0]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800085e:	43d2      	mvns	r2, r2
 8000860:	f3c2 2202 	ubfx	r2, r2, #8, #3
    tmppre = (0x4 - tmppriority);
 8000864:	f1c2 0104 	rsb	r1, r2, #4
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000868:	b2c9      	uxtb	r1, r1
 800086a:	fa05 f101 	lsl.w	r1, r5, r1
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
 800086e:	250f      	movs	r5, #15
 8000870:	fa45 f202 	asr.w	r2, r5, r2

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000874:	b2c9      	uxtb	r1, r1
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000876:	4022      	ands	r2, r4
 8000878:	430a      	orrs	r2, r1
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800087a:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800087e:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
        
    tmppriority = tmppriority << 0x04;
 8000882:	0112      	lsls	r2, r2, #4
 8000884:	b2d2      	uxtb	r2, r2
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000886:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800088a:	7802      	ldrb	r2, [r0, #0]
    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800088c:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000890:	0951      	lsrs	r1, r2, #5
    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000892:	f2ce 0300 	movt	r3, #57344	; 0xe000
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000896:	f002 021f 	and.w	r2, r2, #31
 800089a:	2001      	movs	r0, #1
 800089c:	fa00 f202 	lsl.w	r2, r0, r2
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80008a0:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 80008a4:	e7d1      	b.n	800084a <NVIC_Init+0x22>
 80008a6:	bf00      	nop

080008a8 <NVIC_SetVectorTable>:
{ 
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 80008a8:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
 80008ac:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 80008b0:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 80008b4:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80008b8:	4308      	orrs	r0, r1
 80008ba:	6098      	str	r0, [r3, #8]
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop

080008c0 <NVIC_SystemLPConfig>:
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
  {
    SCB->SCR |= LowPowerMode;
 80008c0:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 80008c4:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80008c8:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 80008ca:	b919      	cbnz	r1, 80008d4 <NVIC_SystemLPConfig+0x14>
  {
    SCB->SCR |= LowPowerMode;
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 80008cc:	ea22 0000 	bic.w	r0, r2, r0
 80008d0:	6118      	str	r0, [r3, #16]
 80008d2:	4770      	bx	lr
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
  {
    SCB->SCR |= LowPowerMode;
 80008d4:	4310      	orrs	r0, r2
 80008d6:	6118      	str	r0, [r3, #16]
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop

080008dc <SysTick_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 80008dc:	f24e 0310 	movw	r3, #57360	; 0xe010
 80008e0:	f2ce 0300 	movt	r3, #57344	; 0xe000
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 80008e4:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 80008e6:	681a      	ldr	r2, [r3, #0]
 80008e8:	bf0c      	ite	eq
 80008ea:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 80008ee:	f022 0204 	bicne.w	r2, r2, #4
 80008f2:	601a      	str	r2, [r3, #0]
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop

080008f8 <GPIO_DeInit>:
  * @note   By default, The GPIO pins are configured in input floating mode (except JTAG pins).
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 80008f8:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
 80008fa:	2300      	movs	r3, #0
 80008fc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000900:	4298      	cmp	r0, r3
 8000902:	d03c      	beq.n	800097e <GPIO_DeInit+0x86>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
  }
  else if (GPIOx == GPIOB)
 8000904:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000908:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800090c:	4298      	cmp	r0, r3
 800090e:	d040      	beq.n	8000992 <GPIO_DeInit+0x9a>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
  }
  else if (GPIOx == GPIOC)
 8000910:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000914:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000918:	4298      	cmp	r0, r3
 800091a:	d044      	beq.n	80009a6 <GPIO_DeInit+0xae>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
  }
  else if (GPIOx == GPIOD)
 800091c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000920:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000924:	4298      	cmp	r0, r3
 8000926:	d048      	beq.n	80009ba <GPIO_DeInit+0xc2>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
  }
  else if (GPIOx == GPIOE)
 8000928:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800092c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000930:	4298      	cmp	r0, r3
 8000932:	d04c      	beq.n	80009ce <GPIO_DeInit+0xd6>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
  }
  else if (GPIOx == GPIOF)
 8000934:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000938:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800093c:	4298      	cmp	r0, r3
 800093e:	d050      	beq.n	80009e2 <GPIO_DeInit+0xea>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
  }
  else if (GPIOx == GPIOG)
 8000940:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000944:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000948:	4298      	cmp	r0, r3
 800094a:	d054      	beq.n	80009f6 <GPIO_DeInit+0xfe>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
  }
  else if (GPIOx == GPIOH)
 800094c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000950:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000954:	4298      	cmp	r0, r3
 8000956:	d058      	beq.n	8000a0a <GPIO_DeInit+0x112>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
  }
  else
  {
    if (GPIOx == GPIOI)
 8000958:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800095c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000960:	4298      	cmp	r0, r3
 8000962:	d000      	beq.n	8000966 <GPIO_DeInit+0x6e>
 8000964:	bd08      	pop	{r3, pc}
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 8000966:	2101      	movs	r1, #1
 8000968:	f44f 7080 	mov.w	r0, #256	; 0x100
 800096c:	f000 fabc 	bl	8000ee8 <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 8000970:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000974:	2100      	movs	r1, #0
    }
  }
}
 8000976:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (GPIOx == GPIOI)
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 800097a:	f000 bab5 	b.w	8000ee8 <RCC_AHB1PeriphResetCmd>
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 800097e:	2001      	movs	r0, #1
 8000980:	4601      	mov	r1, r0
 8000982:	f000 fab1 	bl	8000ee8 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 8000986:	2001      	movs	r0, #1
 8000988:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 800098a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 800098e:	f000 baab 	b.w	8000ee8 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOB)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8000992:	2002      	movs	r0, #2
 8000994:	2101      	movs	r1, #1
 8000996:	f000 faa7 	bl	8000ee8 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 800099a:	2002      	movs	r0, #2
 800099c:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 800099e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
  }
  else if (GPIOx == GPIOB)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 80009a2:	f000 baa1 	b.w	8000ee8 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOC)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 80009a6:	2004      	movs	r0, #4
 80009a8:	2101      	movs	r1, #1
 80009aa:	f000 fa9d 	bl	8000ee8 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 80009ae:	2004      	movs	r0, #4
 80009b0:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 80009b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
  }
  else if (GPIOx == GPIOC)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 80009b6:	f000 ba97 	b.w	8000ee8 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOD)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 80009ba:	2008      	movs	r0, #8
 80009bc:	2101      	movs	r1, #1
 80009be:	f000 fa93 	bl	8000ee8 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 80009c2:	2008      	movs	r0, #8
 80009c4:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 80009c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
  }
  else if (GPIOx == GPIOD)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 80009ca:	f000 ba8d 	b.w	8000ee8 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOE)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 80009ce:	2010      	movs	r0, #16
 80009d0:	2101      	movs	r1, #1
 80009d2:	f000 fa89 	bl	8000ee8 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 80009d6:	2010      	movs	r0, #16
 80009d8:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 80009da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
  }
  else if (GPIOx == GPIOE)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 80009de:	f000 ba83 	b.w	8000ee8 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOF)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 80009e2:	2020      	movs	r0, #32
 80009e4:	2101      	movs	r1, #1
 80009e6:	f000 fa7f 	bl	8000ee8 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 80009ea:	2020      	movs	r0, #32
 80009ec:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 80009ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
  }
  else if (GPIOx == GPIOF)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 80009f2:	f000 ba79 	b.w	8000ee8 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOG)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 80009f6:	2040      	movs	r0, #64	; 0x40
 80009f8:	2101      	movs	r1, #1
 80009fa:	f000 fa75 	bl	8000ee8 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 80009fe:	2040      	movs	r0, #64	; 0x40
 8000a00:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 8000a02:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
  }
  else if (GPIOx == GPIOG)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 8000a06:	f000 ba6f 	b.w	8000ee8 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOH)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 8000a0a:	2080      	movs	r0, #128	; 0x80
 8000a0c:	2101      	movs	r1, #1
 8000a0e:	f000 fa6b 	bl	8000ee8 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 8000a12:	2080      	movs	r0, #128	; 0x80
 8000a14:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 8000a16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
  }
  else if (GPIOx == GPIOH)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 8000a1a:	f000 ba65 	b.w	8000ee8 <RCC_AHB1PeriphResetCmd>
 8000a1e:	bf00      	nop

08000a20 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000a20:	2200      	movs	r2, #0
 8000a22:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000a26:	4613      	mov	r3, r2
 8000a28:	680e      	ldr	r6, [r1, #0]
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000a2a:	2701      	movs	r7, #1
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000a2c:	f04f 0803 	mov.w	r8, #3
 8000a30:	e003      	b.n	8000a3a <GPIO_Init+0x1a>
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000a32:	3301      	adds	r3, #1
 8000a34:	3202      	adds	r2, #2
 8000a36:	2b10      	cmp	r3, #16
 8000a38:	d02b      	beq.n	8000a92 <GPIO_Init+0x72>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000a3a:	fa07 f403 	lsl.w	r4, r7, r3
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000a3e:	ea04 0506 	and.w	r5, r4, r6

    if (currentpin == pos)
 8000a42:	42a5      	cmp	r5, r4
 8000a44:	d1f5      	bne.n	8000a32 <GPIO_Init+0x12>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000a46:	f8d0 9000 	ldr.w	r9, [r0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000a4a:	f891 c004 	ldrb.w	ip, [r1, #4]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000a4e:	fa08 f402 	lsl.w	r4, r8, r2
 8000a52:	43e4      	mvns	r4, r4
 8000a54:	ea04 0909 	and.w	r9, r4, r9
 8000a58:	f8c0 9000 	str.w	r9, [r0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000a5c:	f8d0 9000 	ldr.w	r9, [r0]
 8000a60:	fa0c fa02 	lsl.w	sl, ip, r2

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000a64:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000a68:	ea4a 0909 	orr.w	r9, sl, r9

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000a6c:	f1bc 0f01 	cmp.w	ip, #1
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000a70:	f8c0 9000 	str.w	r9, [r0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000a74:	d910      	bls.n	8000a98 <GPIO_Init+0x78>
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000a76:	68c5      	ldr	r5, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000a78:	f891 c007 	ldrb.w	ip, [r1, #7]
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000a7c:	402c      	ands	r4, r5
 8000a7e:	60c4      	str	r4, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000a80:	68c5      	ldr	r5, [r0, #12]
 8000a82:	fa0c f402 	lsl.w	r4, ip, r2
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000a86:	3301      	adds	r3, #1
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000a88:	432c      	orrs	r4, r5
 8000a8a:	3202      	adds	r2, #2
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000a8c:	2b10      	cmp	r3, #16
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000a8e:	60c4      	str	r4, [r0, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000a90:	d1d3      	bne.n	8000a3a <GPIO_Init+0x1a>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8000a92:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 8000a96:	4770      	bx	lr
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000a98:	f8d0 a008 	ldr.w	sl, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000a9c:	f891 9005 	ldrb.w	r9, [r1, #5]
        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000aa0:	f891 c006 	ldrb.w	ip, [r1, #6]
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000aa4:	ea04 0a0a 	and.w	sl, r4, sl
 8000aa8:	f8c0 a008 	str.w	sl, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000aac:	f8d0 a008 	ldr.w	sl, [r0, #8]
 8000ab0:	fa09 f902 	lsl.w	r9, r9, r2
 8000ab4:	ea49 090a 	orr.w	r9, r9, sl
 8000ab8:	f8c0 9008 	str.w	r9, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000abc:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8000ac0:	ea29 0505 	bic.w	r5, r9, r5
 8000ac4:	6045      	str	r5, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000ac6:	6845      	ldr	r5, [r0, #4]
 8000ac8:	fa0c fc03 	lsl.w	ip, ip, r3
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
}
 8000acc:	fa1f fc8c 	uxth.w	ip, ip
        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000ad0:	ea4c 0505 	orr.w	r5, ip, r5
 8000ad4:	6045      	str	r5, [r0, #4]
 8000ad6:	e7ce      	b.n	8000a76 <GPIO_Init+0x56>

08000ad8 <GPIO_StructInit>:
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8000ad8:	2300      	movs	r3, #0
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8000ada:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ade:	6002      	str	r2, [r0, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8000ae0:	7103      	strb	r3, [r0, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8000ae2:	7143      	strb	r3, [r0, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 8000ae4:	7183      	strb	r3, [r0, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000ae6:	71c3      	strb	r3, [r0, #7]
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000aec:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0x00010000;
 8000aee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000af2:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
 8000af4:	9b01      	ldr	r3, [sp, #4]
 8000af6:	430b      	orrs	r3, r1
 8000af8:	9301      	str	r3, [sp, #4]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8000afa:	9b01      	ldr	r3, [sp, #4]
 8000afc:	61c3      	str	r3, [r0, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 8000afe:	61c1      	str	r1, [r0, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8000b00:	9b01      	ldr	r3, [sp, #4]
 8000b02:	61c3      	str	r3, [r0, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8000b04:	69c3      	ldr	r3, [r0, #28]
 8000b06:	9301      	str	r3, [sp, #4]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8000b08:	69c3      	ldr	r3, [r0, #28]
 8000b0a:	9301      	str	r3, [sp, #4]
}
 8000b0c:	b002      	add	sp, #8
 8000b0e:	4770      	bx	lr

08000b10 <GPIO_ReadInputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000b10:	6903      	ldr	r3, [r0, #16]
 8000b12:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 8000b14:	bf0c      	ite	eq
 8000b16:	2000      	moveq	r0, #0
 8000b18:	2001      	movne	r0, #1
 8000b1a:	4770      	bx	lr

08000b1c <GPIO_ReadInputData>:
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 8000b1c:	6900      	ldr	r0, [r0, #16]
}
 8000b1e:	b280      	uxth	r0, r0
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <GPIO_ReadOutputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000b24:	6943      	ldr	r3, [r0, #20]
 8000b26:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 8000b28:	bf0c      	ite	eq
 8000b2a:	2000      	moveq	r0, #0
 8000b2c:	2001      	movne	r0, #1
 8000b2e:	4770      	bx	lr

08000b30 <GPIO_ReadOutputData>:
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
 8000b30:	6940      	ldr	r0, [r0, #20]
}
 8000b32:	b280      	uxth	r0, r0
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop

08000b38 <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8000b38:	8301      	strh	r1, [r0, #24]
 8000b3a:	4770      	bx	lr

08000b3c <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8000b3c:	8341      	strh	r1, [r0, #26]
 8000b3e:	4770      	bx	lr

08000b40 <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 8000b40:	b90a      	cbnz	r2, 8000b46 <GPIO_WriteBit+0x6>
  {
    GPIOx->BSRRL = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 8000b42:	8341      	strh	r1, [r0, #26]
 8000b44:	4770      	bx	lr
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
  {
    GPIOx->BSRRL = GPIO_Pin;
 8000b46:	8301      	strh	r1, [r0, #24]
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop

08000b4c <GPIO_Write>:
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 8000b4c:	6141      	str	r1, [r0, #20]
 8000b4e:	4770      	bx	lr

08000b50 <GPIO_ToggleBits>:
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 8000b50:	6943      	ldr	r3, [r0, #20]
 8000b52:	4059      	eors	r1, r3
 8000b54:	6141      	str	r1, [r0, #20]
 8000b56:	4770      	bx	lr

08000b58 <GPIO_PinAFConfig>:
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000b58:	08cb      	lsrs	r3, r1, #3
 8000b5a:	3308      	adds	r3, #8
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000b5c:	f001 0107 	and.w	r1, r1, #7
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000b60:	b430      	push	{r4, r5}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000b62:	0089      	lsls	r1, r1, #2
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000b64:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
 8000b68:	240f      	movs	r4, #15
 8000b6a:	fa04 f401 	lsl.w	r4, r4, r1
 8000b6e:	ea25 0404 	bic.w	r4, r5, r4
 8000b72:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000b76:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000b7a:	fa02 f201 	lsl.w	r2, r2, r1
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000b7e:	4314      	orrs	r4, r2
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000b80:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
}
 8000b84:	bc30      	pop	{r4, r5}
 8000b86:	4770      	bx	lr

08000b88 <RCC_DeInit>:
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000b88:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000b8c:	f2c4 0302 	movt	r3, #16386	; 0x4002

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000b90:	2200      	movs	r2, #0
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000b92:	6819      	ldr	r1, [r3, #0]
 8000b94:	f041 0101 	orr.w	r1, r1, #1
 8000b98:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000b9a:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000b9c:	6818      	ldr	r0, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000b9e:	f243 0110 	movw	r1, #12304	; 0x3010

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000ba2:	f020 7084 	bic.w	r0, r0, #17301504	; 0x1080000

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000ba6:	f2c2 4100 	movt	r1, #9216	; 0x2400

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000baa:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8000bae:	6018      	str	r0, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000bb0:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000bb2:	6819      	ldr	r1, [r3, #0]
 8000bb4:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8000bb8:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000bba:	60da      	str	r2, [r3, #12]
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop

08000bc0 <RCC_HSEConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 8000bc0:	f643 0302 	movw	r3, #14338	; 0x3802
 8000bc4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000bc8:	2200      	movs	r2, #0
 8000bca:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 8000bcc:	7018      	strb	r0, [r3, #0]
 8000bce:	4770      	bx	lr

08000bd0 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8000bd0:	b082      	sub	sp, #8

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 8000bd2:	f44f 5260 	mov.w	r2, #14336	; 0x3800
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
  __IO uint32_t startupcounter = 0;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	9301      	str	r3, [sp, #4]

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 8000bda:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000bde:	6813      	ldr	r3, [r2, #0]
    statusreg = RCC->CSR;
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8000be0:	039b      	lsls	r3, r3, #14
 8000be2:	d50c      	bpl.n	8000bfe <RCC_WaitForHSEStartUp+0x2e>
  FlagStatus hsestatus = RESET;
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    startupcounter++;
 8000be4:	9b01      	ldr	r3, [sp, #4]
 8000be6:	3301      	adds	r3, #1
 8000be8:	9301      	str	r3, [sp, #4]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 8000bea:	9b01      	ldr	r3, [sp, #4]

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 8000bec:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000bf0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000bf4:	6818      	ldr	r0, [r3, #0]
  }
  else
  {
    status = ERROR;
  }
  return (status);
 8000bf6:	f3c0 4040 	ubfx	r0, r0, #17, #1
}
 8000bfa:	b002      	add	sp, #8
 8000bfc:	4770      	bx	lr
  FlagStatus hsestatus = RESET;
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    startupcounter++;
 8000bfe:	9b01      	ldr	r3, [sp, #4]
 8000c00:	3301      	adds	r3, #1
 8000c02:	9301      	str	r3, [sp, #4]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 8000c04:	9b01      	ldr	r3, [sp, #4]
 8000c06:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000c0a:	d1e8      	bne.n	8000bde <RCC_WaitForHSEStartUp+0xe>
 8000c0c:	e7ee      	b.n	8000bec <RCC_WaitForHSEStartUp+0x1c>
 8000c0e:	bf00      	nop

08000c10 <RCC_AdjustHSICalibrationValue>:
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
 8000c10:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000c14:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000c18:	681a      	ldr	r2, [r3, #0]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 8000c1a:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 8000c1e:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3

  /* Store the new value */
  RCC->CR = tmpreg;
 8000c22:	6018      	str	r0, [r3, #0]
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop

08000c28 <RCC_HSICmd>:
void RCC_HSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8000c2e:	6018      	str	r0, [r3, #0]
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop

08000c34 <RCC_LSEConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8000c34:	f643 0370 	movw	r3, #14448	; 0x3870
 8000c38:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000c3c:	2200      	movs	r2, #0

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 8000c3e:	2801      	cmp	r0, #1
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8000c40:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8000c42:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 8000c44:	d004      	beq.n	8000c50 <RCC_LSEConfig+0x1c>
 8000c46:	2804      	cmp	r0, #4
 8000c48:	d101      	bne.n	8000c4e <RCC_LSEConfig+0x1a>
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
      break;
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 8000c4a:	2205      	movs	r2, #5
 8000c4c:	701a      	strb	r2, [r3, #0]
 8000c4e:	4770      	bx	lr
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 8000c50:	7018      	strb	r0, [r3, #0]
      break;
 8000c52:	4770      	bx	lr

08000c54 <RCC_LSICmd>:
void RCC_LSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 8000c54:	f44f 6368 	mov.w	r3, #3712	; 0xe80
 8000c58:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8000c5c:	6018      	str	r0, [r3, #0]
 8000c5e:	4770      	bx	lr

08000c60 <RCC_PLLConfig>:
  *         correctly.
  *   
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
{
 8000c60:	b430      	push	{r4, r5}
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 8000c62:	4301      	orrs	r1, r0
 8000c64:	9d02      	ldr	r5, [sp, #8]
 8000c66:	ea41 1282 	orr.w	r2, r1, r2, lsl #6
 8000c6a:	085b      	lsrs	r3, r3, #1
 8000c6c:	f44f 5460 	mov.w	r4, #14336	; 0x3800
 8000c70:	ea42 6505 	orr.w	r5, r2, r5, lsl #24
 8000c74:	1e59      	subs	r1, r3, #1
 8000c76:	f2c4 0402 	movt	r4, #16386	; 0x4002
 8000c7a:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
 8000c7e:	6061      	str	r1, [r4, #4]
                 (PLLQ << 24);
}
 8000c80:	bc30      	pop	{r4, r5}
 8000c82:	4770      	bx	lr

08000c84 <RCC_PLLCmd>:
  */
void RCC_PLLCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 8000c84:	2360      	movs	r3, #96	; 0x60
 8000c86:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8000c8a:	6018      	str	r0, [r3, #0]
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop

08000c90 <RCC_PLLI2SConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
 8000c90:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000c94:	0180      	lsls	r0, r0, #6
 8000c96:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000c9a:	ea40 7101 	orr.w	r1, r0, r1, lsl #28
 8000c9e:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
 8000ca2:	4770      	bx	lr

08000ca4 <RCC_PLLI2SCmd>:
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 8000ca4:	2368      	movs	r3, #104	; 0x68
 8000ca6:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8000caa:	6018      	str	r0, [r3, #0]
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop

08000cb0 <RCC_ClockSecuritySystemCmd>:
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 8000cb0:	234c      	movs	r3, #76	; 0x4c
 8000cb2:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8000cb6:	6018      	str	r0, [r3, #0]
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop

08000cbc <RCC_MCO1Config>:
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
 8000cbc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000cc0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000cc4:	689a      	ldr	r2, [r3, #8]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
 8000cc6:	f022 62ec 	bic.w	r2, r2, #123731968	; 0x7600000

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 8000cca:	4310      	orrs	r0, r2
 8000ccc:	4301      	orrs	r1, r0

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 8000cce:	6099      	str	r1, [r3, #8]
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop

08000cd4 <RCC_MCO2Config>:
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
 8000cd4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000cd8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000cdc:	689a      	ldr	r2, [r3, #8]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
 8000cde:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 8000ce2:	4310      	orrs	r0, r2
 8000ce4:	4301      	orrs	r1, r0

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 8000ce6:	6099      	str	r1, [r3, #8]
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop

08000cec <RCC_SYSCLKConfig>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 8000cec:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000cf0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000cf4:	689a      	ldr	r2, [r3, #8]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 8000cf6:	f022 0203 	bic.w	r2, r2, #3

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8000cfa:	4310      	orrs	r0, r2

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000cfc:	6098      	str	r0, [r3, #8]
 8000cfe:	4770      	bx	lr

08000d00 <RCC_GetSYSCLKSource>:
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 8000d00:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000d04:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000d08:	6898      	ldr	r0, [r3, #8]
}
 8000d0a:	f000 000c 	and.w	r0, r0, #12
 8000d0e:	4770      	bx	lr

08000d10 <RCC_HCLKConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 8000d10:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000d14:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000d18:	689a      	ldr	r2, [r3, #8]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 8000d1a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8000d1e:	4310      	orrs	r0, r2

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000d20:	6098      	str	r0, [r3, #8]
 8000d22:	4770      	bx	lr

08000d24 <RCC_PCLK1Config>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8000d24:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000d28:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000d2c:	689a      	ldr	r2, [r3, #8]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 8000d2e:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8000d32:	4310      	orrs	r0, r2

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000d34:	6098      	str	r0, [r3, #8]
 8000d36:	4770      	bx	lr

08000d38 <RCC_PCLK2Config>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8000d38:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000d3c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000d40:	689a      	ldr	r2, [r3, #8]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 8000d42:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 8000d46:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000d4a:	6098      	str	r0, [r3, #8]
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop

08000d50 <RCC_GetClocksFreq>:
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000d50:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000d54:	f2c4 0302 	movt	r3, #16386	; 0x4002
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000d58:	b410      	push	{r4}
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000d5a:	689a      	ldr	r2, [r3, #8]
 8000d5c:	f002 020c 	and.w	r2, r2, #12

  switch (tmp)
 8000d60:	2a04      	cmp	r2, #4
 8000d62:	d022      	beq.n	8000daa <RCC_GetClocksFreq+0x5a>
 8000d64:	2a08      	cmp	r2, #8
 8000d66:	d026      	beq.n	8000db6 <RCC_GetClocksFreq+0x66>

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
      break;
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000d68:	f44f 5210 	mov.w	r2, #9216	; 0x2400
 8000d6c:	f2c0 02f4 	movt	r2, #244	; 0xf4
 8000d70:	6002      	str	r2, [r0, #0]
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000d72:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000d76:	f2c4 0302 	movt	r3, #16386	; 0x4002
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];
 8000d7a:	4920      	ldr	r1, [pc, #128]	; (8000dfc <RCC_GetClocksFreq+0xac>)
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000d7c:	689c      	ldr	r4, [r3, #8]
  tmp = tmp >> 4;
 8000d7e:	f3c4 1403 	ubfx	r4, r4, #4, #4
  presc = APBAHBPrescTable[tmp];
 8000d82:	5d0c      	ldrb	r4, [r1, r4]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000d84:	fa22 f204 	lsr.w	r2, r2, r4
 8000d88:	6042      	str	r2, [r0, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000d8a:	689c      	ldr	r4, [r3, #8]
  tmp = tmp >> 10;
 8000d8c:	f3c4 2482 	ubfx	r4, r4, #10, #3
  presc = APBAHBPrescTable[tmp];
 8000d90:	5d0c      	ldrb	r4, [r1, r4]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000d92:	fa22 f404 	lsr.w	r4, r2, r4
 8000d96:	6084      	str	r4, [r0, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000d98:	689b      	ldr	r3, [r3, #8]
  tmp = tmp >> 13;
 8000d9a:	f3c3 3342 	ubfx	r3, r3, #13, #3
  presc = APBAHBPrescTable[tmp];
 8000d9e:	5ccb      	ldrb	r3, [r1, r3]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000da0:	fa22 f203 	lsr.w	r2, r2, r3
 8000da4:	60c2      	str	r2, [r0, #12]
}
 8000da6:	bc10      	pop	{r4}
 8000da8:	4770      	bx	lr
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000daa:	f44f 5290 	mov.w	r2, #4608	; 0x1200
 8000dae:	f2c0 027a 	movt	r2, #122	; 0x7a
 8000db2:	6002      	str	r2, [r0, #0]
      break;
 8000db4:	e7dd      	b.n	8000d72 <RCC_GetClocksFreq+0x22>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000db6:	685c      	ldr	r4, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000db8:	6859      	ldr	r1, [r3, #4]
      
      if (pllsource != 0)
 8000dba:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000dbe:	685c      	ldr	r4, [r3, #4]
 8000dc0:	bf15      	itete	ne
 8000dc2:	f44f 5390 	movne.w	r3, #4608	; 0x1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000dc6:	f44f 5310 	moveq.w	r3, #9216	; 0x2400
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000dca:	f2c0 037a 	movtne	r3, #122	; 0x7a
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000dce:	f2c0 03f4 	movteq	r3, #244	; 0xf4

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000dd2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000dd6:	fbb3 f2f1 	udiv	r2, r3, r1
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000dda:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000dde:	f2c4 0302 	movt	r3, #16386	; 0x4002
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000de2:	f3c4 1488 	ubfx	r4, r4, #6, #9
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000dec:	3301      	adds	r3, #1
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000dee:	fb02 f204 	mul.w	r2, r2, r4
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000df2:	005b      	lsls	r3, r3, #1
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8000df4:	fbb2 f2f3 	udiv	r2, r2, r3
 8000df8:	6002      	str	r2, [r0, #0]
      break;
 8000dfa:	e7ba      	b.n	8000d72 <RCC_GetClocksFreq+0x22>
 8000dfc:	20000074 	.word	0x20000074

08000e00 <RCC_RTCCLKConfig>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 8000e00:	f400 7340 	and.w	r3, r0, #768	; 0x300
 8000e04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000e08:	d10c      	bne.n	8000e24 <RCC_RTCCLKConfig+0x24>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 8000e0a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000e0e:	f2c4 0302 	movt	r3, #16386	; 0x4002

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8000e12:	f020 4170 	bic.w	r1, r0, #4026531840	; 0xf0000000
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 8000e16:	689a      	ldr	r2, [r3, #8]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8000e18:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
 8000e1c:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8000e20:	430a      	orrs	r2, r1

    /* Store the new value */
    RCC->CFGR = tmpreg;
 8000e22:	609a      	str	r2, [r3, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 8000e24:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000e28:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000e2c:	0500      	lsls	r0, r0, #20
 8000e2e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000e30:	0d00      	lsrs	r0, r0, #20
 8000e32:	4310      	orrs	r0, r2
 8000e34:	6718      	str	r0, [r3, #112]	; 0x70
 8000e36:	4770      	bx	lr

08000e38 <RCC_RTCCLKCmd>:
void RCC_RTCCLKCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 8000e38:	f640 633c 	movw	r3, #3644	; 0xe3c
 8000e3c:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8000e40:	6018      	str	r0, [r3, #0]
 8000e42:	4770      	bx	lr

08000e44 <RCC_BackupResetCmd>:
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 8000e44:	f44f 6364 	mov.w	r3, #3648	; 0xe40
 8000e48:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8000e4c:	6018      	str	r0, [r3, #0]
 8000e4e:	4770      	bx	lr

08000e50 <RCC_I2SCLKConfig>:
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 8000e50:	f44f 73ae 	mov.w	r3, #348	; 0x15c
 8000e54:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8000e58:	6018      	str	r0, [r3, #0]
 8000e5a:	4770      	bx	lr

08000e5c <RCC_AHB1PeriphClockCmd>:
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000e5c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000e60:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000e64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000e66:	b919      	cbnz	r1, 8000e70 <RCC_AHB1PeriphClockCmd+0x14>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000e68:	ea22 0000 	bic.w	r0, r2, r0
 8000e6c:	6318      	str	r0, [r3, #48]	; 0x30
 8000e6e:	4770      	bx	lr
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000e70:	4310      	orrs	r0, r2
 8000e72:	6318      	str	r0, [r3, #48]	; 0x30
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop

08000e78 <RCC_AHB2PeriphClockCmd>:
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 8000e78:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000e7c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000e80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000e82:	b919      	cbnz	r1, 8000e8c <RCC_AHB2PeriphClockCmd+0x14>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
 8000e84:	ea22 0000 	bic.w	r0, r2, r0
 8000e88:	6358      	str	r0, [r3, #52]	; 0x34
 8000e8a:	4770      	bx	lr
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 8000e8c:	4310      	orrs	r0, r2
 8000e8e:	6358      	str	r0, [r3, #52]	; 0x34
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop

08000e94 <RCC_AHB3PeriphClockCmd>:
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 8000e94:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000e98:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000e9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000e9e:	b919      	cbnz	r1, 8000ea8 <RCC_AHB3PeriphClockCmd+0x14>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
 8000ea0:	ea22 0000 	bic.w	r0, r2, r0
 8000ea4:	6398      	str	r0, [r3, #56]	; 0x38
 8000ea6:	4770      	bx	lr
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 8000ea8:	4310      	orrs	r0, r2
 8000eaa:	6398      	str	r0, [r3, #56]	; 0x38
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <RCC_APB1PeriphClockCmd>:
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000eb0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000eb4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000eb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000eba:	b919      	cbnz	r1, 8000ec4 <RCC_APB1PeriphClockCmd+0x14>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000ebc:	ea22 0000 	bic.w	r0, r2, r0
 8000ec0:	6418      	str	r0, [r3, #64]	; 0x40
 8000ec2:	4770      	bx	lr
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000ec4:	4310      	orrs	r0, r2
 8000ec6:	6418      	str	r0, [r3, #64]	; 0x40
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop

08000ecc <RCC_APB2PeriphClockCmd>:
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000ecc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000ed0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000ed4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000ed6:	b919      	cbnz	r1, 8000ee0 <RCC_APB2PeriphClockCmd+0x14>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000ed8:	ea22 0000 	bic.w	r0, r2, r0
 8000edc:	6458      	str	r0, [r3, #68]	; 0x44
 8000ede:	4770      	bx	lr
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000ee0:	4310      	orrs	r0, r2
 8000ee2:	6458      	str	r0, [r3, #68]	; 0x44
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <RCC_AHB1PeriphResetCmd>:
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 8000ee8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000eec:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000ef0:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000ef2:	b919      	cbnz	r1, 8000efc <RCC_AHB1PeriphResetCmd+0x14>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 8000ef4:	ea22 0000 	bic.w	r0, r2, r0
 8000ef8:	6118      	str	r0, [r3, #16]
 8000efa:	4770      	bx	lr
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 8000efc:	4310      	orrs	r0, r2
 8000efe:	6118      	str	r0, [r3, #16]
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop

08000f04 <RCC_AHB2PeriphResetCmd>:
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 8000f04:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000f08:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000f0c:	695a      	ldr	r2, [r3, #20]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000f0e:	b919      	cbnz	r1, 8000f18 <RCC_AHB2PeriphResetCmd+0x14>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 8000f10:	ea22 0000 	bic.w	r0, r2, r0
 8000f14:	6158      	str	r0, [r3, #20]
 8000f16:	4770      	bx	lr
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 8000f18:	4310      	orrs	r0, r2
 8000f1a:	6158      	str	r0, [r3, #20]
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop

08000f20 <RCC_AHB3PeriphResetCmd>:
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 8000f20:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000f24:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000f28:	699a      	ldr	r2, [r3, #24]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000f2a:	b919      	cbnz	r1, 8000f34 <RCC_AHB3PeriphResetCmd+0x14>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
 8000f2c:	ea22 0000 	bic.w	r0, r2, r0
 8000f30:	6198      	str	r0, [r3, #24]
 8000f32:	4770      	bx	lr
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 8000f34:	4310      	orrs	r0, r2
 8000f36:	6198      	str	r0, [r3, #24]
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop

08000f3c <RCC_APB1PeriphResetCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8000f3c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000f40:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000f44:	6a1a      	ldr	r2, [r3, #32]
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000f46:	b919      	cbnz	r1, 8000f50 <RCC_APB1PeriphResetCmd+0x14>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8000f48:	ea22 0000 	bic.w	r0, r2, r0
 8000f4c:	6218      	str	r0, [r3, #32]
 8000f4e:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8000f50:	4310      	orrs	r0, r2
 8000f52:	6218      	str	r0, [r3, #32]
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop

08000f58 <RCC_APB2PeriphResetCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8000f58:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000f5c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000f60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000f62:	b919      	cbnz	r1, 8000f6c <RCC_APB2PeriphResetCmd+0x14>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8000f64:	ea22 0000 	bic.w	r0, r2, r0
 8000f68:	6258      	str	r0, [r3, #36]	; 0x24
 8000f6a:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8000f6c:	4310      	orrs	r0, r2
 8000f6e:	6258      	str	r0, [r3, #36]	; 0x24
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <RCC_AHB1PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 8000f74:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000f78:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000f7c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000f7e:	b919      	cbnz	r1, 8000f88 <RCC_AHB1PeriphClockLPModeCmd+0x14>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
 8000f80:	ea22 0000 	bic.w	r0, r2, r0
 8000f84:	6518      	str	r0, [r3, #80]	; 0x50
 8000f86:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 8000f88:	4310      	orrs	r0, r2
 8000f8a:	6518      	str	r0, [r3, #80]	; 0x50
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop

08000f90 <RCC_AHB2PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 8000f90:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000f94:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000f98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000f9a:	b919      	cbnz	r1, 8000fa4 <RCC_AHB2PeriphClockLPModeCmd+0x14>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
 8000f9c:	ea22 0000 	bic.w	r0, r2, r0
 8000fa0:	6558      	str	r0, [r3, #84]	; 0x54
 8000fa2:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 8000fa4:	4310      	orrs	r0, r2
 8000fa6:	6558      	str	r0, [r3, #84]	; 0x54
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop

08000fac <RCC_AHB3PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 8000fac:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000fb0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000fb4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000fb6:	b919      	cbnz	r1, 8000fc0 <RCC_AHB3PeriphClockLPModeCmd+0x14>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
 8000fb8:	ea22 0000 	bic.w	r0, r2, r0
 8000fbc:	6598      	str	r0, [r3, #88]	; 0x58
 8000fbe:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 8000fc0:	4310      	orrs	r0, r2
 8000fc2:	6598      	str	r0, [r3, #88]	; 0x58
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop

08000fc8 <RCC_APB1PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 8000fc8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000fcc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000fd0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000fd2:	b919      	cbnz	r1, 8000fdc <RCC_APB1PeriphClockLPModeCmd+0x14>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
 8000fd4:	ea22 0000 	bic.w	r0, r2, r0
 8000fd8:	6618      	str	r0, [r3, #96]	; 0x60
 8000fda:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 8000fdc:	4310      	orrs	r0, r2
 8000fde:	6618      	str	r0, [r3, #96]	; 0x60
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <RCC_APB2PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 8000fe4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000fe8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000fec:	6e5a      	ldr	r2, [r3, #100]	; 0x64
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000fee:	b919      	cbnz	r1, 8000ff8 <RCC_APB2PeriphClockLPModeCmd+0x14>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
 8000ff0:	ea22 0000 	bic.w	r0, r2, r0
 8000ff4:	6658      	str	r0, [r3, #100]	; 0x64
 8000ff6:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 8000ff8:	4310      	orrs	r0, r2
 8000ffa:	6658      	str	r0, [r3, #100]	; 0x64
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop

08001000 <RCC_ITConfig>:
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8001000:	f643 030d 	movw	r3, #14349	; 0x380d
 8001004:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001008:	781a      	ldrb	r2, [r3, #0]
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800100a:	b919      	cbnz	r1, 8001014 <RCC_ITConfig+0x14>
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
  }
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 800100c:	ea22 0000 	bic.w	r0, r2, r0
 8001010:	7018      	strb	r0, [r3, #0]
 8001012:	4770      	bx	lr
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8001014:	4310      	orrs	r0, r2
 8001016:	7018      	strb	r0, [r3, #0]
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop

0800101c <RCC_GetFlagStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 800101c:	0943      	lsrs	r3, r0, #5
  if (tmp == 1)               /* The flag to check is in CR register */
 800101e:	2b01      	cmp	r3, #1
 8001020:	d00e      	beq.n	8001040 <RCC_GetFlagStatus+0x24>
  {
    statusreg = RCC->CR;
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8001022:	2b02      	cmp	r3, #2
  {
    statusreg = RCC->BDCR;
 8001024:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001028:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800102c:	bf0c      	ite	eq
 800102e:	6f1b      	ldreq	r3, [r3, #112]	; 0x70
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8001030:	6f5b      	ldrne	r3, [r3, #116]	; 0x74
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8001032:	f000 001f 	and.w	r0, r0, #31
 8001036:	fa23 f000 	lsr.w	r0, r3, r0
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
}
 800103a:	f000 0001 	and.w	r0, r0, #1
 800103e:	4770      	bx	lr

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 8001040:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001044:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	e7f2      	b.n	8001032 <RCC_GetFlagStatus+0x16>

0800104c <RCC_ClearFlag>:
  * @retval None
  */
void RCC_ClearFlag(void)
{
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 800104c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001050:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001054:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001056:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800105a:	675a      	str	r2, [r3, #116]	; 0x74
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop

08001060 <RCC_GetITStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 8001060:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001064:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001068:	68db      	ldr	r3, [r3, #12]
 800106a:	4218      	tst	r0, r3
  {
    bitstatus = RESET;
  }
  /* Return the RCC_IT status */
  return  bitstatus;
}
 800106c:	bf0c      	ite	eq
 800106e:	2000      	moveq	r0, #0
 8001070:	2001      	movne	r0, #1
 8001072:	4770      	bx	lr

08001074 <RCC_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 8001074:	f643 030e 	movw	r3, #14350	; 0x380e
 8001078:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800107c:	7018      	strb	r0, [r3, #0]
 800107e:	4770      	bx	lr

08001080 <USART_DeInit>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 8001080:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 8001082:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001086:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800108a:	4298      	cmp	r0, r3
 800108c:	d028      	beq.n	80010e0 <USART_DeInit+0x60>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
  }
  else if (USARTx == USART2)
 800108e:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8001092:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001096:	4298      	cmp	r0, r3
 8001098:	d02c      	beq.n	80010f4 <USART_DeInit+0x74>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
  }
  else if (USARTx == USART3)
 800109a:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 800109e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80010a2:	4298      	cmp	r0, r3
 80010a4:	d032      	beq.n	800110c <USART_DeInit+0x8c>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
  }    
  else if (USARTx == UART4)
 80010a6:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
 80010aa:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80010ae:	4298      	cmp	r0, r3
 80010b0:	d038      	beq.n	8001124 <USART_DeInit+0xa4>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
  }
  else if (USARTx == UART5)
 80010b2:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80010b6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80010ba:	4298      	cmp	r0, r3
 80010bc:	d03e      	beq.n	800113c <USART_DeInit+0xbc>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
  }     
  else
  {
    if (USARTx == USART6)
 80010be:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010c2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80010c6:	4298      	cmp	r0, r3
 80010c8:	d000      	beq.n	80010cc <USART_DeInit+0x4c>
 80010ca:	bd08      	pop	{r3, pc}
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
 80010cc:	2020      	movs	r0, #32
 80010ce:	2101      	movs	r1, #1
 80010d0:	f7ff ff42 	bl	8000f58 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 80010d4:	2020      	movs	r0, #32
 80010d6:	2100      	movs	r1, #0
    }
  }
}
 80010d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (USARTx == USART6)
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 80010dc:	f7ff bf3c 	b.w	8000f58 <RCC_APB2PeriphResetCmd>
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 80010e0:	2010      	movs	r0, #16
 80010e2:	2101      	movs	r1, #1
 80010e4:	f7ff ff38 	bl	8000f58 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 80010e8:	2010      	movs	r0, #16
 80010ea:	2100      	movs	r1, #0
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
    }
  }
}
 80010ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 80010f0:	f7ff bf32 	b.w	8000f58 <RCC_APB2PeriphResetCmd>
  }
  else if (USARTx == USART2)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 80010f4:	2101      	movs	r1, #1
 80010f6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80010fa:	f7ff ff1f 	bl	8000f3c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 80010fe:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001102:	2100      	movs	r1, #0
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
    }
  }
}
 8001104:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
  }
  else if (USARTx == USART2)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 8001108:	f7ff bf18 	b.w	8000f3c <RCC_APB1PeriphResetCmd>
  }
  else if (USARTx == USART3)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 800110c:	2101      	movs	r1, #1
 800110e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001112:	f7ff ff13 	bl	8000f3c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 8001116:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800111a:	2100      	movs	r1, #0
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
    }
  }
}
 800111c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
  }
  else if (USARTx == USART3)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 8001120:	f7ff bf0c 	b.w	8000f3c <RCC_APB1PeriphResetCmd>
  }    
  else if (USARTx == UART4)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 8001124:	2101      	movs	r1, #1
 8001126:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800112a:	f7ff ff07 	bl	8000f3c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 800112e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001132:	2100      	movs	r1, #0
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
    }
  }
}
 8001134:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
  }    
  else if (USARTx == UART4)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 8001138:	f7ff bf00 	b.w	8000f3c <RCC_APB1PeriphResetCmd>
  }
  else if (USARTx == UART5)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 800113c:	2101      	movs	r1, #1
 800113e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001142:	f7ff fefb 	bl	8000f3c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 8001146:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800114a:	2100      	movs	r1, #0
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
    }
  }
}
 800114c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
  }
  else if (USARTx == UART5)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 8001150:	f7ff bef4 	b.w	8000f3c <RCC_APB1PeriphResetCmd>

08001154 <USART_Init>:
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8001154:	8a02      	ldrh	r2, [r0, #16]
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8001156:	88cb      	ldrh	r3, [r1, #6]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8001158:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800115c:	0412      	lsls	r2, r2, #16
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 800115e:	b5f0      	push	{r4, r5, r6, r7, lr}

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8001160:	0c12      	lsrs	r2, r2, #16
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8001162:	4604      	mov	r4, r0
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8001164:	431a      	orrs	r2, r3

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8001166:	8948      	ldrh	r0, [r1, #10]
 8001168:	890f      	ldrh	r7, [r1, #8]
 800116a:	888e      	ldrh	r6, [r1, #4]
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 800116c:	460d      	mov	r5, r1
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 800116e:	8989      	ldrh	r1, [r1, #12]
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8001170:	8222      	strh	r2, [r4, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8001172:	89a3      	ldrh	r3, [r4, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8001174:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001178:	f023 030c 	bic.w	r3, r3, #12

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800117c:	ea47 0206 	orr.w	r2, r7, r6

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8001180:	041b      	lsls	r3, r3, #16

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8001182:	4302      	orrs	r2, r0
 8001184:	b292      	uxth	r2, r2

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8001186:	0c1b      	lsrs	r3, r3, #16
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8001188:	4313      	orrs	r3, r2
 800118a:	81a3      	strh	r3, [r4, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 800118c:	8aa3      	ldrh	r3, [r4, #20]

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 800118e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001192:	041b      	lsls	r3, r3, #16
 8001194:	0c1b      	lsrs	r3, r3, #16
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8001196:	b085      	sub	sp, #20
  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8001198:	430b      	orrs	r3, r1
 800119a:	82a3      	strh	r3, [r4, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 800119c:	4668      	mov	r0, sp
 800119e:	f7ff fdd7 	bl	8000d50 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 80011a2:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 80011a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011aa:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80011ae:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80011b2:	429c      	cmp	r4, r3
 80011b4:	bf18      	it	ne
 80011b6:	4294      	cmpne	r4, r2
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80011b8:	89a2      	ldrh	r2, [r4, #12]
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);

  if ((USARTx == USART1) || (USARTx == USART6))
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 80011ba:	bf0c      	ite	eq
 80011bc:	9b03      	ldreq	r3, [sp, #12]
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 80011be:	9b02      	ldrne	r3, [sp, #8]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80011c0:	b212      	sxth	r2, r2
 80011c2:	2a00      	cmp	r2, #0
 80011c4:	db21      	blt.n	800120a <USART_Init+0xb6>
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 80011c6:	6828      	ldr	r0, [r5, #0]
 80011c8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80011cc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80011d0:	0080      	lsls	r0, r0, #2
 80011d2:	fbb3 f1f0 	udiv	r1, r3, r0
  }
  tmpreg = (integerdivider / 100) << 4;
 80011d6:	f248 531f 	movw	r3, #34079	; 0x851f

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80011da:	89a0      	ldrh	r0, [r4, #12]
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
  }
  tmpreg = (integerdivider / 100) << 4;
 80011dc:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 80011e0:	fba3 5201 	umull	r5, r2, r3, r1
 80011e4:	0952      	lsrs	r2, r2, #5

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80011e6:	b200      	sxth	r0, r0
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
  }
  tmpreg = (integerdivider / 100) << 4;

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 80011e8:	0116      	lsls	r6, r2, #4
 80011ea:	2564      	movs	r5, #100	; 0x64

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80011ec:	2800      	cmp	r0, #0
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
  }
  tmpreg = (integerdivider / 100) << 4;

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 80011ee:	fb02 1215 	mls	r2, r2, r5, r1

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80011f2:	db13      	blt.n	800121c <USART_Init+0xc8>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 80011f4:	0112      	lsls	r2, r2, #4
 80011f6:	3232      	adds	r2, #50	; 0x32
 80011f8:	fba3 5302 	umull	r5, r3, r3, r2
 80011fc:	f3c3 1343 	ubfx	r3, r3, #5, #4
 8001200:	4333      	orrs	r3, r6
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8001202:	b29b      	uxth	r3, r3
 8001204:	8123      	strh	r3, [r4, #8]
}
 8001206:	b005      	add	sp, #20
 8001208:	bdf0      	pop	{r4, r5, r6, r7, pc}
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 800120a:	682a      	ldr	r2, [r5, #0]
 800120c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001210:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001214:	0052      	lsls	r2, r2, #1
 8001216:	fbb3 f1f2 	udiv	r1, r3, r2
 800121a:	e7dc      	b.n	80011d6 <USART_Init+0x82>
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 800121c:	00d2      	lsls	r2, r2, #3
 800121e:	3232      	adds	r2, #50	; 0x32
 8001220:	fba3 1302 	umull	r1, r3, r3, r2
 8001224:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8001228:	4333      	orrs	r3, r6
 800122a:	e7ea      	b.n	8001202 <USART_Init+0xae>

0800122c <USART_StructInit>:
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 800122c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 8001230:	2300      	movs	r3, #0
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 8001232:	6002      	str	r2, [r0, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
  USART_InitStruct->USART_Parity = USART_Parity_No ;
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8001234:	220c      	movs	r2, #12
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 8001236:	8083      	strh	r3, [r0, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 8001238:	80c3      	strh	r3, [r0, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 800123a:	8103      	strh	r3, [r0, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800123c:	8142      	strh	r2, [r0, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 800123e:	8183      	strh	r3, [r0, #12]
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop

08001244 <USART_ClockInit>:
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8001244:	880a      	ldrh	r2, [r1, #0]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8001246:	8a03      	ldrh	r3, [r0, #16]
  *         contains the configuration information for the specified  USART peripheral.
  * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 8001248:	b430      	push	{r4, r5}
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 800124a:	884d      	ldrh	r5, [r1, #2]
 800124c:	888c      	ldrh	r4, [r1, #4]
 800124e:	88c9      	ldrh	r1, [r1, #6]
 8001250:	432a      	orrs	r2, r5
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 8001252:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8001256:	4322      	orrs	r2, r4
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 8001258:	041b      	lsls	r3, r3, #16
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 800125a:	430a      	orrs	r2, r1
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 800125c:	0c1b      	lsrs	r3, r3, #16
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 800125e:	b292      	uxth	r2, r2
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8001260:	4313      	orrs	r3, r2
 8001262:	8203      	strh	r3, [r0, #16]
}
 8001264:	bc30      	pop	{r4, r5}
 8001266:	4770      	bx	lr

08001268 <USART_ClockStructInit>:
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 8001268:	2300      	movs	r3, #0
 800126a:	8003      	strh	r3, [r0, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 800126c:	8043      	strh	r3, [r0, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 800126e:	8083      	strh	r3, [r0, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 8001270:	80c3      	strh	r3, [r0, #6]
 8001272:	4770      	bx	lr

08001274 <USART_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8001274:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001276:	b929      	cbnz	r1, 8001284 <USART_Cmd+0x10>
    USARTx->CR1 |= USART_CR1_UE;
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8001278:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800127c:	041b      	lsls	r3, r3, #16
 800127e:	0c1b      	lsrs	r3, r3, #16
 8001280:	8183      	strh	r3, [r0, #12]
 8001282:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8001284:	b29b      	uxth	r3, r3
 8001286:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800128a:	8183      	strh	r3, [r0, #12]
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop

08001290 <USART_SetPrescaler>:
{ 
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= USART_GTPR_GT;
 8001290:	8b03      	ldrh	r3, [r0, #24]
 8001292:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001296:	8303      	strh	r3, [r0, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 8001298:	8b03      	ldrh	r3, [r0, #24]
 800129a:	b29b      	uxth	r3, r3
 800129c:	4319      	orrs	r1, r3
 800129e:	8301      	strh	r1, [r0, #24]
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop

080012a4 <USART_OverSampling8Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 80012a4:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80012a6:	b919      	cbnz	r1, 80012b0 <USART_OverSampling8Cmd+0xc>
    USARTx->CR1 |= USART_CR1_OVER8;
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
 80012a8:	045b      	lsls	r3, r3, #17
 80012aa:	0c5b      	lsrs	r3, r3, #17
 80012ac:	8183      	strh	r3, [r0, #12]
 80012ae:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 80012b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80012b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	8183      	strh	r3, [r0, #12]
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop

080012c0 <USART_OneBitMethodCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 80012c0:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80012c2:	b929      	cbnz	r1, 80012d0 <USART_OneBitMethodCmd+0x10>
    USARTx->CR3 |= USART_CR3_ONEBIT;
  }
  else
  {
    /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
 80012c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80012c8:	041b      	lsls	r3, r3, #16
 80012ca:	0c1b      	lsrs	r3, r3, #16
 80012cc:	8283      	strh	r3, [r0, #20]
 80012ce:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80012d6:	8283      	strh	r3, [r0, #20]
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop

080012dc <USART_SendData>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 80012dc:	05c9      	lsls	r1, r1, #23
 80012de:	0dc9      	lsrs	r1, r1, #23
 80012e0:	8081      	strh	r1, [r0, #4]
 80012e2:	4770      	bx	lr

080012e4 <USART_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 80012e4:	8880      	ldrh	r0, [r0, #4]
}
 80012e6:	05c0      	lsls	r0, r0, #23
 80012e8:	0dc0      	lsrs	r0, r0, #23
 80012ea:	4770      	bx	lr

080012ec <USART_SetAddress>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
 80012ec:	8a03      	ldrh	r3, [r0, #16]
 80012ee:	f023 030f 	bic.w	r3, r3, #15
 80012f2:	041b      	lsls	r3, r3, #16
 80012f4:	0c1b      	lsrs	r3, r3, #16
 80012f6:	8203      	strh	r3, [r0, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
 80012f8:	8a03      	ldrh	r3, [r0, #16]
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	4319      	orrs	r1, r3
 80012fe:	8201      	strh	r1, [r0, #16]
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop

08001304 <USART_ReceiverWakeUpCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 8001304:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
 8001306:	b929      	cbnz	r1, 8001314 <USART_ReceiverWakeUpCmd+0x10>
    USARTx->CR1 |= USART_CR1_RWU;
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
 8001308:	f023 0302 	bic.w	r3, r3, #2
 800130c:	041b      	lsls	r3, r3, #16
 800130e:	0c1b      	lsrs	r3, r3, #16
 8001310:	8183      	strh	r3, [r0, #12]
 8001312:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 8001314:	b29b      	uxth	r3, r3
 8001316:	f043 0302 	orr.w	r3, r3, #2
 800131a:	8183      	strh	r3, [r0, #12]
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop

08001320 <USART_WakeUpConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
 8001320:	8983      	ldrh	r3, [r0, #12]
 8001322:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001326:	041b      	lsls	r3, r3, #16
 8001328:	0c1b      	lsrs	r3, r3, #16
 800132a:	8183      	strh	r3, [r0, #12]
  USARTx->CR1 |= USART_WakeUp;
 800132c:	8983      	ldrh	r3, [r0, #12]
 800132e:	b29b      	uxth	r3, r3
 8001330:	4319      	orrs	r1, r3
 8001332:	8181      	strh	r1, [r0, #12]
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop

08001338 <USART_LINBreakDetectLengthConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
 8001338:	8a03      	ldrh	r3, [r0, #16]
 800133a:	f023 0320 	bic.w	r3, r3, #32
 800133e:	041b      	lsls	r3, r3, #16
 8001340:	0c1b      	lsrs	r3, r3, #16
 8001342:	8203      	strh	r3, [r0, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 8001344:	8a03      	ldrh	r3, [r0, #16]
 8001346:	b29b      	uxth	r3, r3
 8001348:	4319      	orrs	r1, r3
 800134a:	8201      	strh	r1, [r0, #16]
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop

08001350 <USART_LINCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 8001350:	8a03      	ldrh	r3, [r0, #16]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001352:	b929      	cbnz	r1, 8001360 <USART_LINCmd+0x10>
    USARTx->CR2 |= USART_CR2_LINEN;
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
 8001354:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001358:	041b      	lsls	r3, r3, #16
 800135a:	0c1b      	lsrs	r3, r3, #16
 800135c:	8203      	strh	r3, [r0, #16]
 800135e:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 8001360:	b29b      	uxth	r3, r3
 8001362:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001366:	8203      	strh	r3, [r0, #16]
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop

0800136c <USART_SendBreak>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= USART_CR1_SBK;
 800136c:	8983      	ldrh	r3, [r0, #12]
 800136e:	b29b      	uxth	r3, r3
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	8183      	strh	r3, [r0, #12]
 8001376:	4770      	bx	lr

08001378 <USART_HalfDuplexCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 8001378:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800137a:	b929      	cbnz	r1, 8001388 <USART_HalfDuplexCmd+0x10>
    USARTx->CR3 |= USART_CR3_HDSEL;
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
 800137c:	f023 0308 	bic.w	r3, r3, #8
 8001380:	041b      	lsls	r3, r3, #16
 8001382:	0c1b      	lsrs	r3, r3, #16
 8001384:	8283      	strh	r3, [r0, #20]
 8001386:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 8001388:	b29b      	uxth	r3, r3
 800138a:	f043 0308 	orr.w	r3, r3, #8
 800138e:	8283      	strh	r3, [r0, #20]
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop

08001394 <USART_SetGuardTime>:
{    
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= USART_GTPR_PSC;
 8001394:	8b03      	ldrh	r3, [r0, #24]
 8001396:	b2db      	uxtb	r3, r3
 8001398:	8303      	strh	r3, [r0, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 800139a:	8b03      	ldrh	r3, [r0, #24]
 800139c:	b29b      	uxth	r3, r3
 800139e:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 80013a2:	8301      	strh	r1, [r0, #24]
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop

080013a8 <USART_SmartCardCmd>:
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 80013a8:	8a83      	ldrh	r3, [r0, #20]
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80013aa:	b929      	cbnz	r1, 80013b8 <USART_SmartCardCmd+0x10>
    USARTx->CR3 |= USART_CR3_SCEN;
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
 80013ac:	f023 0320 	bic.w	r3, r3, #32
 80013b0:	041b      	lsls	r3, r3, #16
 80013b2:	0c1b      	lsrs	r3, r3, #16
 80013b4:	8283      	strh	r3, [r0, #20]
 80013b6:	4770      	bx	lr
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	f043 0320 	orr.w	r3, r3, #32
 80013be:	8283      	strh	r3, [r0, #20]
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop

080013c4 <USART_SmartCardNACKCmd>:
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 80013c4:	8a83      	ldrh	r3, [r0, #20]
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80013c6:	b929      	cbnz	r1, 80013d4 <USART_SmartCardNACKCmd+0x10>
    USARTx->CR3 |= USART_CR3_NACK;
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
 80013c8:	f023 0310 	bic.w	r3, r3, #16
 80013cc:	041b      	lsls	r3, r3, #16
 80013ce:	0c1b      	lsrs	r3, r3, #16
 80013d0:	8283      	strh	r3, [r0, #20]
 80013d2:	4770      	bx	lr
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 80013d4:	b29b      	uxth	r3, r3
 80013d6:	f043 0310 	orr.w	r3, r3, #16
 80013da:	8283      	strh	r3, [r0, #20]
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop

080013e0 <USART_IrDAConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
 80013e0:	8a83      	ldrh	r3, [r0, #20]
 80013e2:	f023 0304 	bic.w	r3, r3, #4
 80013e6:	041b      	lsls	r3, r3, #16
 80013e8:	0c1b      	lsrs	r3, r3, #16
 80013ea:	8283      	strh	r3, [r0, #20]
  USARTx->CR3 |= USART_IrDAMode;
 80013ec:	8a83      	ldrh	r3, [r0, #20]
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	4319      	orrs	r1, r3
 80013f2:	8281      	strh	r1, [r0, #20]
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop

080013f8 <USART_IrDACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 80013f8:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 80013fa:	b929      	cbnz	r1, 8001408 <USART_IrDACmd+0x10>
    USARTx->CR3 |= USART_CR3_IREN;
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
 80013fc:	f023 0302 	bic.w	r3, r3, #2
 8001400:	041b      	lsls	r3, r3, #16
 8001402:	0c1b      	lsrs	r3, r3, #16
 8001404:	8283      	strh	r3, [r0, #20]
 8001406:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 8001408:	b29b      	uxth	r3, r3
 800140a:	f043 0302 	orr.w	r3, r3, #2
 800140e:	8283      	strh	r3, [r0, #20]
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop

08001414 <USART_DMACmd>:

  if (NewState != DISABLE)
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8001414:	8a83      	ldrh	r3, [r0, #20]
 8001416:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 8001418:	b91a      	cbnz	r2, 8001422 <USART_DMACmd+0xe>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 800141a:	ea23 0101 	bic.w	r1, r3, r1
 800141e:	8281      	strh	r1, [r0, #20]
 8001420:	4770      	bx	lr

  if (NewState != DISABLE)
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8001422:	4319      	orrs	r1, r3
 8001424:	8281      	strh	r1, [r0, #20]
 8001426:	4770      	bx	lr

08001428 <USART_ITConfig>:
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
 8001428:	f001 031f 	and.w	r3, r1, #31
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 800142c:	b410      	push	{r4}
  } 
    
  usartxbase = (uint32_t)USARTx;

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 800142e:	f3c1 1142 	ubfx	r1, r1, #5, #3

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
 8001432:	2401      	movs	r4, #1
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8001434:	42a1      	cmp	r1, r4
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
 8001436:	fa04 f303 	lsl.w	r3, r4, r3
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 800143a:	d00d      	beq.n	8001458 <USART_ITConfig+0x30>
  {
    usartxbase += 0x0C;
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 800143c:	2902      	cmp	r1, #2
 800143e:	d00d      	beq.n	800145c <USART_ITConfig+0x34>
  {
    usartxbase += 0x10;
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8001440:	3014      	adds	r0, #20
  }
  if (NewState != DISABLE)
 8001442:	b92a      	cbnz	r2, 8001450 <USART_ITConfig+0x28>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8001444:	6802      	ldr	r2, [r0, #0]
 8001446:	ea22 0303 	bic.w	r3, r2, r3
 800144a:	6003      	str	r3, [r0, #0]
  }
}
 800144c:	bc10      	pop	{r4}
 800144e:	4770      	bx	lr
  {
    usartxbase += 0x14; 
  }
  if (NewState != DISABLE)
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8001450:	6802      	ldr	r2, [r0, #0]
 8001452:	4313      	orrs	r3, r2
 8001454:	6003      	str	r3, [r0, #0]
 8001456:	e7f9      	b.n	800144c <USART_ITConfig+0x24>
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
  {
    usartxbase += 0x0C;
 8001458:	300c      	adds	r0, #12
 800145a:	e7f2      	b.n	8001442 <USART_ITConfig+0x1a>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
  {
    usartxbase += 0x10;
 800145c:	3010      	adds	r0, #16
 800145e:	e7f0      	b.n	8001442 <USART_ITConfig+0x1a>

08001460 <USART_GetFlagStatus>:
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8001460:	8803      	ldrh	r3, [r0, #0]
 8001462:	4219      	tst	r1, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8001464:	bf0c      	ite	eq
 8001466:	2000      	moveq	r0, #0
 8001468:	2001      	movne	r0, #1
 800146a:	4770      	bx	lr

0800146c <USART_ClearFlag>:
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
       
  USARTx->SR = (uint16_t)~USART_FLAG;
 800146c:	43c9      	mvns	r1, r1
 800146e:	b289      	uxth	r1, r1
 8001470:	8001      	strh	r1, [r0, #0]
 8001472:	4770      	bx	lr

08001474 <USART_GetITStatus>:
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8001474:	f3c1 1342 	ubfx	r3, r1, #5, #3
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8001478:	b410      	push	{r4}
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
 800147a:	f001 021f 	and.w	r2, r1, #31
 800147e:	2401      	movs	r4, #1
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8001480:	2b01      	cmp	r3, #1
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
 8001482:	fa04 f402 	lsl.w	r4, r4, r2
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8001486:	d016      	beq.n	80014b6 <USART_GetITStatus+0x42>
  {
    itmask &= USARTx->CR1;
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8001488:	2b02      	cmp	r3, #2
  {
    itmask &= USARTx->CR2;
 800148a:	bf0c      	ite	eq
 800148c:	8a02      	ldrheq	r2, [r0, #16]
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 800148e:	8a82      	ldrhne	r2, [r0, #20]
 8001490:	b292      	uxth	r2, r2
 8001492:	4022      	ands	r2, r4
  }
  
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
  bitpos &= USARTx->SR;
 8001494:	8803      	ldrh	r3, [r0, #0]
  {
    itmask &= USARTx->CR3;
  }
  
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
 8001496:	2401      	movs	r4, #1
 8001498:	0a09      	lsrs	r1, r1, #8
 800149a:	fa04 f101 	lsl.w	r1, r4, r1
  bitpos &= USARTx->SR;
 800149e:	b29b      	uxth	r3, r3
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 80014a0:	4219      	tst	r1, r3
 80014a2:	bf0c      	ite	eq
 80014a4:	2000      	moveq	r0, #0
 80014a6:	2001      	movne	r0, #1
  {
    bitstatus = RESET;
  }
  
  return bitstatus;  
}
 80014a8:	2a00      	cmp	r2, #0
 80014aa:	bf0c      	ite	eq
 80014ac:	2000      	moveq	r0, #0
 80014ae:	f000 0001 	andne.w	r0, r0, #1
 80014b2:	bc10      	pop	{r4}
 80014b4:	4770      	bx	lr
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
  {
    itmask &= USARTx->CR1;
 80014b6:	8982      	ldrh	r2, [r0, #12]
 80014b8:	b292      	uxth	r2, r2
 80014ba:	4022      	ands	r2, r4
 80014bc:	e7ea      	b.n	8001494 <USART_GetITStatus+0x20>
 80014be:	bf00      	nop

080014c0 <USART_ClearITPendingBit>:
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 80014c0:	0a09      	lsrs	r1, r1, #8
 80014c2:	2301      	movs	r3, #1
 80014c4:	fa03 f101 	lsl.w	r1, r3, r1
  USARTx->SR = (uint16_t)~itmask;
 80014c8:	43c9      	mvns	r1, r1
 80014ca:	b289      	uxth	r1, r1
 80014cc:	8001      	strh	r1, [r0, #0]
 80014ce:	4770      	bx	lr
 80014d0:	08003294 	.word	0x08003294
 80014d4:	20000000 	.word	0x20000000
 80014d8:	20000098 	.word	0x20000098
 80014dc:	20000098 	.word	0x20000098
 80014e0:	200004d0 	.word	0x200004d0

080014e4 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop

080014e8 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80014e8:	e7fe      	b.n	80014e8 <HardFault_Handler>
 80014ea:	bf00      	nop

080014ec <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80014ec:	e7fe      	b.n	80014ec <MemManage_Handler>
 80014ee:	bf00      	nop

080014f0 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80014f0:	e7fe      	b.n	80014f0 <BusFault_Handler>
 80014f2:	bf00      	nop

080014f4 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80014f4:	e7fe      	b.n	80014f4 <UsageFault_Handler>
 80014f6:	bf00      	nop

080014f8 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop

080014fc <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop

08001500 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop

08001504 <SystemInit>:
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001504:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001508:	f2c4 0302 	movt	r3, #16386	; 0x4002

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800150c:	2200      	movs	r2, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800150e:	6819      	ldr	r1, [r3, #0]
 8001510:	f041 0101 	orr.w	r1, r1, #1
 8001514:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001516:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001518:	6818      	ldr	r0, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800151a:	f243 0110 	movw	r1, #12304	; 0x3010

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800151e:	f020 7084 	bic.w	r0, r0, #17301504	; 0x1080000

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001522:	f2c2 4100 	movt	r1, #9216	; 0x2400

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001526:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 800152a:	6018      	str	r0, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800152c:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800152e:	6819      	ldr	r1, [r3, #0]
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001530:	b082      	sub	sp, #8

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001532:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8001536:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001538:	60da      	str	r2, [r3, #12]
static void SetSysClock(void)
{
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800153a:	9200      	str	r2, [sp, #0]
 800153c:	9201      	str	r2, [sp, #4]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001544:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001546:	461a      	mov	r2, r3
 8001548:	e003      	b.n	8001552 <SystemInit+0x4e>
    StartUpCounter++;
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800154a:	9b00      	ldr	r3, [sp, #0]
 800154c:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001550:	d009      	beq.n	8001566 <SystemInit+0x62>
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001552:	6813      	ldr	r3, [r2, #0]
 8001554:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001558:	9301      	str	r3, [sp, #4]
    StartUpCounter++;
 800155a:	9b00      	ldr	r3, [sp, #0]
 800155c:	3301      	adds	r3, #1
 800155e:	9300      	str	r3, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001560:	9b01      	ldr	r3, [sp, #4]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d0f1      	beq.n	800154a <SystemInit+0x46>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001566:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800156a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8001574:	bf08      	it	eq
 8001576:	9301      	streq	r3, [sp, #4]
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
    StartUpCounter++;
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001578:	d001      	beq.n	800157e <SystemInit+0x7a>
  {
    HSEStatus = (uint32_t)0x01;
 800157a:	2301      	movs	r3, #1
 800157c:	9301      	str	r3, [sp, #4]
  else
  {
    HSEStatus = (uint32_t)0x00;
  }

  if (HSEStatus == (uint32_t)0x01)
 800157e:	9b01      	ldr	r3, [sp, #4]
 8001580:	2b01      	cmp	r3, #1
 8001582:	d008      	beq.n	8001596 <SystemInit+0x92>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001584:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8001588:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800158c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001590:	609a      	str	r2, [r3, #8]
#endif
}
 8001592:	b002      	add	sp, #8
 8001594:	4770      	bx	lr
  }

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001596:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800159a:	f2c4 0302 	movt	r3, #16386	; 0x4002
    PWR->CR |= PWR_CR_VOS;
 800159e:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
  }

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80015a2:	6c19      	ldr	r1, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80015a4:	f2c4 0200 	movt	r2, #16384	; 0x4000
  }

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80015a8:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80015ac:	6419      	str	r1, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80015ae:	6811      	ldr	r1, [r2, #0]
 80015b0:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80015b4:	6011      	str	r1, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80015b6:	689a      	ldr	r2, [r3, #8]
 80015b8:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80015ba:	689a      	ldr	r2, [r3, #8]
 80015bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80015c0:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80015c2:	6899      	ldr	r1, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80015c4:	f245 4219 	movw	r2, #21529	; 0x5419
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80015c8:	f441 51a0 	orr.w	r1, r1, #5120	; 0x1400

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80015cc:	f2c0 7240 	movt	r2, #1856	; 0x740
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80015d0:	6099      	str	r1, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80015d2:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80015da:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80015dc:	4619      	mov	r1, r3
 80015de:	680a      	ldr	r2, [r1, #0]
 80015e0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80015e4:	0192      	lsls	r2, r2, #6
 80015e6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80015ea:	d5f8      	bpl.n	80015de <SystemInit+0xda>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80015ec:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80015f0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80015f4:	f240 6105 	movw	r1, #1541	; 0x605
 80015f8:	6011      	str	r1, [r2, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80015fa:	689a      	ldr	r2, [r3, #8]
 80015fc:	f022 0203 	bic.w	r2, r2, #3
 8001600:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8001602:	689a      	ldr	r2, [r3, #8]
 8001604:	f042 0202 	orr.w	r2, r2, #2
 8001608:	609a      	str	r2, [r3, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 800160a:	689a      	ldr	r2, [r3, #8]
 800160c:	f002 020c 	and.w	r2, r2, #12
 8001610:	2a08      	cmp	r2, #8
 8001612:	d1fa      	bne.n	800160a <SystemInit+0x106>
 8001614:	e7b6      	b.n	8001584 <SystemInit+0x80>
 8001616:	bf00      	nop

08001618 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001618:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800161c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001620:	689a      	ldr	r2, [r3, #8]
 8001622:	f002 020c 	and.w	r2, r2, #12

  switch (tmp)
 8001626:	2a04      	cmp	r2, #4
 8001628:	d013      	beq.n	8001652 <SystemCoreClockUpdate+0x3a>
 800162a:	2a08      	cmp	r2, #8
 800162c:	bf1c      	itt	ne
 800162e:	f44f 5110 	movne.w	r1, #9216	; 0x2400
 8001632:	f2c0 01f4 	movtne	r1, #244	; 0xf4
 8001636:	d011      	beq.n	800165c <SystemCoreClockUpdate+0x44>
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8001638:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800163c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001640:	4b17      	ldr	r3, [pc, #92]	; (80016a0 <SystemCoreClockUpdate+0x88>)
 8001642:	6892      	ldr	r2, [r2, #8]
 8001644:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8001648:	5c9a      	ldrb	r2, [r3, r2]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 800164a:	fa21 f102 	lsr.w	r1, r1, r2
 800164e:	6119      	str	r1, [r3, #16]
 8001650:	4770      	bx	lr
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
      break;
 8001652:	f44f 5190 	mov.w	r1, #4608	; 0x1200
 8001656:	f2c0 017a 	movt	r1, #122	; 0x7a
 800165a:	e7ed      	b.n	8001638 <SystemCoreClockUpdate+0x20>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800165c:	6858      	ldr	r0, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800165e:	685a      	ldr	r2, [r3, #4]
      
      if (pllsource != 0)
 8001660:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001664:	6858      	ldr	r0, [r3, #4]
 8001666:	bf15      	itete	ne
 8001668:	f44f 5390 	movne.w	r3, #4608	; 0x1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800166c:	f44f 5310 	moveq.w	r3, #9216	; 0x2400
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001670:	f2c0 037a 	movtne	r3, #122	; 0x7a
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8001674:	f2c0 03f4 	movteq	r3, #244	; 0xf4

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001678:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800167c:	fbb3 f1f2 	udiv	r1, r3, r2
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001680:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001684:	f2c4 0302 	movt	r3, #16386	; 0x4002
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8001688:	f3c0 1088 	ubfx	r0, r0, #6, #9
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001692:	3301      	adds	r3, #1
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8001694:	fb01 f100 	mul.w	r1, r1, r0
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001698:	005b      	lsls	r3, r3, #1
      SystemCoreClock = pllvco/pllp;
 800169a:	fbb1 f1f3 	udiv	r1, r1, r3
      break;
 800169e:	e7cb      	b.n	8001638 <SystemCoreClockUpdate+0x20>
 80016a0:	20000084 	.word	0x20000084

080016a4 <sinf>:
	float sinf(float x)
#else
	float sinf(x)
	float x;
#endif
{
 80016a4:	b500      	push	{lr}

	GET_FLOAT_WORD(ix,x);

    /* |x| ~< pi/4 */
	ix &= 0x7fffffff;
	if(ix <= 0x3f490fd8) return __kernel_sinf(x,z,0);
 80016a6:	4a1d      	ldr	r2, [pc, #116]	; (800171c <sinf+0x78>)
	__int32_t n,ix;

	GET_FLOAT_WORD(ix,x);

    /* |x| ~< pi/4 */
	ix &= 0x7fffffff;
 80016a8:	0043      	lsls	r3, r0, #1
	float sinf(float x)
#else
	float sinf(x)
	float x;
#endif
{
 80016aa:	b083      	sub	sp, #12
 80016ac:	1c01      	adds	r1, r0, #0
	__int32_t n,ix;

	GET_FLOAT_WORD(ix,x);

    /* |x| ~< pi/4 */
	ix &= 0x7fffffff;
 80016ae:	085b      	lsrs	r3, r3, #1
	if(ix <= 0x3f490fd8) return __kernel_sinf(x,z,0);
 80016b0:	4293      	cmp	r3, r2
 80016b2:	dd18      	ble.n	80016e6 <sinf+0x42>

    /* sin(Inf or NaN) is NaN */
	else if (!FLT_UWORD_IS_FINITE(ix)) return x-x;
 80016b4:	4a1a      	ldr	r2, [pc, #104]	; (8001720 <sinf+0x7c>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	dd04      	ble.n	80016c4 <sinf+0x20>
 80016ba:	f000 ef14 	blx	80024e4 <__aeabi_fsub>
		case 2: return -__kernel_sinf(y[0],y[1],1);
		default:
			return -__kernel_cosf(y[0],y[1]);
	    }
	}
}
 80016be:	b003      	add	sp, #12
 80016c0:	bc02      	pop	{r1}
 80016c2:	4708      	bx	r1
    /* sin(Inf or NaN) is NaN */
	else if (!FLT_UWORD_IS_FINITE(ix)) return x-x;

    /* argument reduction needed */
	else {
	    n = __ieee754_rem_pio2f(x,y);
 80016c4:	4669      	mov	r1, sp
 80016c6:	f000 f82d 	bl	8001724 <__ieee754_rem_pio2f>
	    switch(n&3) {
 80016ca:	2303      	movs	r3, #3
 80016cc:	4018      	ands	r0, r3
 80016ce:	2801      	cmp	r0, #1
 80016d0:	d017      	beq.n	8001702 <sinf+0x5e>
 80016d2:	2802      	cmp	r0, #2
 80016d4:	d00c      	beq.n	80016f0 <sinf+0x4c>
 80016d6:	2800      	cmp	r0, #0
 80016d8:	d118      	bne.n	800170c <sinf+0x68>
		case 0: return  __kernel_sinf(y[0],y[1],1);
 80016da:	9800      	ldr	r0, [sp, #0]
 80016dc:	9901      	ldr	r1, [sp, #4]
 80016de:	2201      	movs	r2, #1
 80016e0:	f000 fdc8 	bl	8002274 <__kernel_sinf>
 80016e4:	e7eb      	b.n	80016be <sinf+0x1a>

	GET_FLOAT_WORD(ix,x);

    /* |x| ~< pi/4 */
	ix &= 0x7fffffff;
	if(ix <= 0x3f490fd8) return __kernel_sinf(x,z,0);
 80016e6:	2100      	movs	r1, #0
 80016e8:	2200      	movs	r2, #0
 80016ea:	f000 fdc3 	bl	8002274 <__kernel_sinf>
 80016ee:	e7e6      	b.n	80016be <sinf+0x1a>
	else {
	    n = __ieee754_rem_pio2f(x,y);
	    switch(n&3) {
		case 0: return  __kernel_sinf(y[0],y[1],1);
		case 1: return  __kernel_cosf(y[0],y[1]);
		case 2: return -__kernel_sinf(y[0],y[1],1);
 80016f0:	9800      	ldr	r0, [sp, #0]
 80016f2:	9901      	ldr	r1, [sp, #4]
 80016f4:	2201      	movs	r2, #1
 80016f6:	f000 fdbd 	bl	8002274 <__kernel_sinf>
 80016fa:	2380      	movs	r3, #128	; 0x80
 80016fc:	061b      	lsls	r3, r3, #24
 80016fe:	18c0      	adds	r0, r0, r3
 8001700:	e7dd      	b.n	80016be <sinf+0x1a>
    /* argument reduction needed */
	else {
	    n = __ieee754_rem_pio2f(x,y);
	    switch(n&3) {
		case 0: return  __kernel_sinf(y[0],y[1],1);
		case 1: return  __kernel_cosf(y[0],y[1]);
 8001702:	9901      	ldr	r1, [sp, #4]
 8001704:	9800      	ldr	r0, [sp, #0]
 8001706:	f000 f999 	bl	8001a3c <__kernel_cosf>
 800170a:	e7d8      	b.n	80016be <sinf+0x1a>
		case 2: return -__kernel_sinf(y[0],y[1],1);
		default:
			return -__kernel_cosf(y[0],y[1]);
 800170c:	9800      	ldr	r0, [sp, #0]
 800170e:	9901      	ldr	r1, [sp, #4]
 8001710:	f000 f994 	bl	8001a3c <__kernel_cosf>
 8001714:	2380      	movs	r3, #128	; 0x80
 8001716:	061b      	lsls	r3, r3, #24
 8001718:	18c0      	adds	r0, r0, r3
 800171a:	e7d0      	b.n	80016be <sinf+0x1a>
 800171c:	3f490fd8 	.word	0x3f490fd8
 8001720:	7f7fffff 	.word	0x7f7fffff

08001724 <__ieee754_rem_pio2f>:
	__int32_t __ieee754_rem_pio2f(float x, float *y)
#else
	__int32_t __ieee754_rem_pio2f(x,y)
	float x,y[];
#endif
{
 8001724:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001726:	465f      	mov	r7, fp
 8001728:	464d      	mov	r5, r9
 800172a:	4644      	mov	r4, r8
 800172c:	4656      	mov	r6, sl
 800172e:	b4f0      	push	{r4, r5, r6, r7}
	float tx[3];
	__int32_t i,j,n,ix,hx;
	int e0,nx;

	GET_FLOAT_WORD(hx,x);
	ix = hx&0x7fffffff;
 8001730:	0042      	lsls	r2, r0, #1
 8001732:	0857      	lsrs	r7, r2, #1
	if(ix<=0x3f490fd8)   /* |x| ~<= pi/4 , no need for reduction */
 8001734:	4ab1      	ldr	r2, [pc, #708]	; (80019fc <__ieee754_rem_pio2f+0x2d8>)
	__int32_t __ieee754_rem_pio2f(float x, float *y)
#else
	__int32_t __ieee754_rem_pio2f(x,y)
	float x,y[];
#endif
{
 8001736:	b089      	sub	sp, #36	; 0x24
 8001738:	1c03      	adds	r3, r0, #0
 800173a:	1c0c      	adds	r4, r1, #0
	float z,w,t,r,fn;
	float tx[3];
	__int32_t i,j,n,ix,hx;
	int e0,nx;

	GET_FLOAT_WORD(hx,x);
 800173c:	1c05      	adds	r5, r0, #0
	ix = hx&0x7fffffff;
	if(ix<=0x3f490fd8)   /* |x| ~<= pi/4 , no need for reduction */
 800173e:	4297      	cmp	r7, r2
 8001740:	dd77      	ble.n	8001832 <__ieee754_rem_pio2f+0x10e>
	    {y[0] = x; y[1] = 0; return 0;}
	if(ix<0x4016cbe4) {  /* |x| < 3pi/4, special case with n=+-1 */
 8001742:	4aaf      	ldr	r2, [pc, #700]	; (8001a00 <__ieee754_rem_pio2f+0x2dc>)
 8001744:	4297      	cmp	r7, r2
 8001746:	dc1a      	bgt.n	800177e <__ieee754_rem_pio2f+0x5a>
	    if(hx>0) { 
		z = x - pio2_1;
 8001748:	49ae      	ldr	r1, [pc, #696]	; (8001a04 <__ieee754_rem_pio2f+0x2e0>)
	GET_FLOAT_WORD(hx,x);
	ix = hx&0x7fffffff;
	if(ix<=0x3f490fd8)   /* |x| ~<= pi/4 , no need for reduction */
	    {y[0] = x; y[1] = 0; return 0;}
	if(ix<0x4016cbe4) {  /* |x| < 3pi/4, special case with n=+-1 */
	    if(hx>0) { 
 800174a:	2b00      	cmp	r3, #0
 800174c:	dc00      	bgt.n	8001750 <__ieee754_rem_pio2f+0x2c>
 800174e:	e10d      	b.n	800196c <__ieee754_rem_pio2f+0x248>
		z = x - pio2_1;
 8001750:	f000 eec8 	blx	80024e4 <__aeabi_fsub>
		if((ix&0xfffffff0)!=0x3fc90fd0) { /* 24+24 bit pi OK */
 8001754:	4bac      	ldr	r3, [pc, #688]	; (8001a08 <__ieee754_rem_pio2f+0x2e4>)
 8001756:	401d      	ands	r5, r3
 8001758:	4bac      	ldr	r3, [pc, #688]	; (8001a0c <__ieee754_rem_pio2f+0x2e8>)
	ix = hx&0x7fffffff;
	if(ix<=0x3f490fd8)   /* |x| ~<= pi/4 , no need for reduction */
	    {y[0] = x; y[1] = 0; return 0;}
	if(ix<0x4016cbe4) {  /* |x| < 3pi/4, special case with n=+-1 */
	    if(hx>0) { 
		z = x - pio2_1;
 800175a:	1c06      	adds	r6, r0, #0
		if((ix&0xfffffff0)!=0x3fc90fd0) { /* 24+24 bit pi OK */
 800175c:	429d      	cmp	r5, r3
 800175e:	d100      	bne.n	8001762 <__ieee754_rem_pio2f+0x3e>
 8001760:	e07c      	b.n	800185c <__ieee754_rem_pio2f+0x138>
		    y[0] = z - pio2_1t;
 8001762:	49ab      	ldr	r1, [pc, #684]	; (8001a10 <__ieee754_rem_pio2f+0x2ec>)
 8001764:	f000 eebe 	blx	80024e4 <__aeabi_fsub>
 8001768:	1c01      	adds	r1, r0, #0
 800176a:	6020      	str	r0, [r4, #0]
		    y[1] = (z-y[0])-pio2_1t;
 800176c:	1c30      	adds	r0, r6, #0
 800176e:	f000 eeba 	blx	80024e4 <__aeabi_fsub>
 8001772:	49a7      	ldr	r1, [pc, #668]	; (8001a10 <__ieee754_rem_pio2f+0x2ec>)
 8001774:	f000 eeb6 	blx	80024e4 <__aeabi_fsub>
		} else {		/* near pi/2, use 24+24+24 bit pi */
		    z -= pio2_2;
		    y[0] = z - pio2_2t;
		    y[1] = (z-y[0])-pio2_2t;
		}
		return 1;
 8001778:	2601      	movs	r6, #1
	if(ix<0x4016cbe4) {  /* |x| < 3pi/4, special case with n=+-1 */
	    if(hx>0) { 
		z = x - pio2_1;
		if((ix&0xfffffff0)!=0x3fc90fd0) { /* 24+24 bit pi OK */
		    y[0] = z - pio2_1t;
		    y[1] = (z-y[0])-pio2_1t;
 800177a:	6060      	str	r0, [r4, #4]
 800177c:	e05d      	b.n	800183a <__ieee754_rem_pio2f+0x116>
		    y[1] = (z-y[0])+pio2_2t;
		}
		return -1;
	    }
	}
	if(ix<=0x43490f80) { /* |x| ~<= 2^7*(pi/2), medium size */
 800177e:	4aa5      	ldr	r2, [pc, #660]	; (8001a14 <__ieee754_rem_pio2f+0x2f0>)
 8001780:	4297      	cmp	r7, r2
 8001782:	dc00      	bgt.n	8001786 <__ieee754_rem_pio2f+0x62>
 8001784:	e07c      	b.n	8001880 <__ieee754_rem_pio2f+0x15c>
	    else	 return n;
	}
    /* 
     * all other (large) arguments
     */
	if(!FLT_UWORD_IS_FINITE(ix)) {
 8001786:	4aa4      	ldr	r2, [pc, #656]	; (8001a18 <__ieee754_rem_pio2f+0x2f4>)
 8001788:	4297      	cmp	r7, r2
 800178a:	dc60      	bgt.n	800184e <__ieee754_rem_pio2f+0x12a>
	    y[0]=y[1]=x-x; return 0;
	}
    /* set z = scalbn(|x|,ilogb(x)-7) */
	e0 	= (int)((ix>>23)-134);	/* e0 = ilogb(z)-7; */
 800178c:	15fb      	asrs	r3, r7, #23
 800178e:	3b86      	subs	r3, #134	; 0x86
	SET_FLOAT_WORD(z, ix - ((__int32_t)e0<<23));
 8001790:	05de      	lsls	r6, r3, #23
 8001792:	1bbe      	subs	r6, r7, r6
	for(i=0;i<2;i++) {
		tx[i] = (float)((__int32_t)(z));
 8001794:	1c30      	adds	r0, r6, #0
     */
	if(!FLT_UWORD_IS_FINITE(ix)) {
	    y[0]=y[1]=x-x; return 0;
	}
    /* set z = scalbn(|x|,ilogb(x)-7) */
	e0 	= (int)((ix>>23)-134);	/* e0 = ilogb(z)-7; */
 8001796:	4698      	mov	r8, r3
	SET_FLOAT_WORD(z, ix - ((__int32_t)e0<<23));
	for(i=0;i<2;i++) {
		tx[i] = (float)((__int32_t)(z));
 8001798:	f001 e9fc 	blx	8002b94 <__aeabi_f2iz>
 800179c:	f000 ef86 	blx	80026ac <__aeabi_i2f>
 80017a0:	1c01      	adds	r1, r0, #0
 80017a2:	9005      	str	r0, [sp, #20]
		z     = (z-tx[i])*two8;
 80017a4:	1c30      	adds	r0, r6, #0
 80017a6:	f000 ee9e 	blx	80024e4 <__aeabi_fsub>
 80017aa:	2187      	movs	r1, #135	; 0x87
 80017ac:	05c9      	lsls	r1, r1, #23
 80017ae:	f000 efec 	blx	8002788 <__aeabi_fmul>
 80017b2:	1c06      	adds	r6, r0, #0
	}
    /* set z = scalbn(|x|,ilogb(x)-7) */
	e0 	= (int)((ix>>23)-134);	/* e0 = ilogb(z)-7; */
	SET_FLOAT_WORD(z, ix - ((__int32_t)e0<<23));
	for(i=0;i<2;i++) {
		tx[i] = (float)((__int32_t)(z));
 80017b4:	f001 e9ee 	blx	8002b94 <__aeabi_f2iz>
 80017b8:	f000 ef78 	blx	80026ac <__aeabi_i2f>
 80017bc:	1c07      	adds	r7, r0, #0
 80017be:	9006      	str	r0, [sp, #24]
		z     = (z-tx[i])*two8;
 80017c0:	1c39      	adds	r1, r7, #0
 80017c2:	1c30      	adds	r0, r6, #0
 80017c4:	f000 ee8e 	blx	80024e4 <__aeabi_fsub>
 80017c8:	2187      	movs	r1, #135	; 0x87
 80017ca:	05c9      	lsls	r1, r1, #23
 80017cc:	f000 efdc 	blx	8002788 <__aeabi_fmul>
	}
	tx[2] = z;
	nx = 3;
	while(tx[nx-1]==zero) nx--;	/* skip zero term */
 80017d0:	2100      	movs	r1, #0
	SET_FLOAT_WORD(z, ix - ((__int32_t)e0<<23));
	for(i=0;i<2;i++) {
		tx[i] = (float)((__int32_t)(z));
		z     = (z-tx[i])*two8;
	}
	tx[2] = z;
 80017d2:	9007      	str	r0, [sp, #28]
	nx = 3;
	while(tx[nx-1]==zero) nx--;	/* skip zero term */
 80017d4:	f001 e9a2 	blx	8002b1c <__aeabi_fcmpeq>
 80017d8:	2603      	movs	r6, #3
 80017da:	2800      	cmp	r0, #0
 80017dc:	d012      	beq.n	8001804 <__ieee754_rem_pio2f+0xe0>
 80017de:	1c38      	adds	r0, r7, #0
 80017e0:	2100      	movs	r1, #0
 80017e2:	3e01      	subs	r6, #1
 80017e4:	f001 e99a 	blx	8002b1c <__aeabi_fcmpeq>
 80017e8:	2800      	cmp	r0, #0
 80017ea:	d00b      	beq.n	8001804 <__ieee754_rem_pio2f+0xe0>
pio2_2t =  6.0770999344e-11, /* 0x2e85a308 */
pio2_3  =  6.0770943833e-11, /* 0x2e85a300 */
pio2_3t =  6.1232342629e-17; /* 0x248d3132 */

#ifdef __STDC__
	__int32_t __ieee754_rem_pio2f(float x, float *y)
 80017ec:	00b3      	lsls	r3, r6, #2
 80017ee:	aa05      	add	r2, sp, #20
 80017f0:	18d3      	adds	r3, r2, r3
 80017f2:	3b08      	subs	r3, #8
 80017f4:	681f      	ldr	r7, [r3, #0]
		tx[i] = (float)((__int32_t)(z));
		z     = (z-tx[i])*two8;
	}
	tx[2] = z;
	nx = 3;
	while(tx[nx-1]==zero) nx--;	/* skip zero term */
 80017f6:	2100      	movs	r1, #0
 80017f8:	1c38      	adds	r0, r7, #0
 80017fa:	3e01      	subs	r6, #1
 80017fc:	f001 e98e 	blx	8002b1c <__aeabi_fcmpeq>
 8001800:	2800      	cmp	r0, #0
 8001802:	d1f3      	bne.n	80017ec <__ieee754_rem_pio2f+0xc8>
	n  =  __kernel_rem_pio2f(tx,y,e0,nx,2,two_over_pi);
 8001804:	2302      	movs	r3, #2
 8001806:	9300      	str	r3, [sp, #0]
 8001808:	4b84      	ldr	r3, [pc, #528]	; (8001a1c <__ieee754_rem_pio2f+0x2f8>)
 800180a:	a805      	add	r0, sp, #20
 800180c:	9301      	str	r3, [sp, #4]
 800180e:	1c21      	adds	r1, r4, #0
 8001810:	1c33      	adds	r3, r6, #0
 8001812:	4642      	mov	r2, r8
 8001814:	f000 f9dc 	bl	8001bd0 <__kernel_rem_pio2f>
 8001818:	1c06      	adds	r6, r0, #0
	if(hx<0) {y[0] = -y[0]; y[1] = -y[1]; return -n;}
 800181a:	2d00      	cmp	r5, #0
 800181c:	da0d      	bge.n	800183a <__ieee754_rem_pio2f+0x116>
 800181e:	6821      	ldr	r1, [r4, #0]
 8001820:	2280      	movs	r2, #128	; 0x80
 8001822:	0612      	lsls	r2, r2, #24
 8001824:	188b      	adds	r3, r1, r2
 8001826:	6861      	ldr	r1, [r4, #4]
 8001828:	6023      	str	r3, [r4, #0]
 800182a:	188b      	adds	r3, r1, r2
 800182c:	6063      	str	r3, [r4, #4]
 800182e:	4246      	negs	r6, r0
 8001830:	e003      	b.n	800183a <__ieee754_rem_pio2f+0x116>
	int e0,nx;

	GET_FLOAT_WORD(hx,x);
	ix = hx&0x7fffffff;
	if(ix<=0x3f490fd8)   /* |x| ~<= pi/4 , no need for reduction */
	    {y[0] = x; y[1] = 0; return 0;}
 8001832:	2300      	movs	r3, #0
 8001834:	6020      	str	r0, [r4, #0]
 8001836:	604b      	str	r3, [r1, #4]
 8001838:	2600      	movs	r6, #0
	nx = 3;
	while(tx[nx-1]==zero) nx--;	/* skip zero term */
	n  =  __kernel_rem_pio2f(tx,y,e0,nx,2,two_over_pi);
	if(hx<0) {y[0] = -y[0]; y[1] = -y[1]; return -n;}
	return n;
}
 800183a:	1c30      	adds	r0, r6, #0
 800183c:	b009      	add	sp, #36	; 0x24
 800183e:	bc3c      	pop	{r2, r3, r4, r5}
 8001840:	4690      	mov	r8, r2
 8001842:	4699      	mov	r9, r3
 8001844:	46a2      	mov	sl, r4
 8001846:	46ab      	mov	fp, r5
 8001848:	bcf0      	pop	{r4, r5, r6, r7}
 800184a:	bc02      	pop	{r1}
 800184c:	4708      	bx	r1
	}
    /* 
     * all other (large) arguments
     */
	if(!FLT_UWORD_IS_FINITE(ix)) {
	    y[0]=y[1]=x-x; return 0;
 800184e:	1c19      	adds	r1, r3, #0
 8001850:	f000 ee48 	blx	80024e4 <__aeabi_fsub>
 8001854:	2600      	movs	r6, #0
 8001856:	6060      	str	r0, [r4, #4]
 8001858:	6020      	str	r0, [r4, #0]
 800185a:	e7ee      	b.n	800183a <__ieee754_rem_pio2f+0x116>
		z = x - pio2_1;
		if((ix&0xfffffff0)!=0x3fc90fd0) { /* 24+24 bit pi OK */
		    y[0] = z - pio2_1t;
		    y[1] = (z-y[0])-pio2_1t;
		} else {		/* near pi/2, use 24+24+24 bit pi */
		    z -= pio2_2;
 800185c:	4970      	ldr	r1, [pc, #448]	; (8001a20 <__ieee754_rem_pio2f+0x2fc>)
 800185e:	f000 ee42 	blx	80024e4 <__aeabi_fsub>
		    y[0] = z - pio2_2t;
 8001862:	4970      	ldr	r1, [pc, #448]	; (8001a24 <__ieee754_rem_pio2f+0x300>)
		z = x - pio2_1;
		if((ix&0xfffffff0)!=0x3fc90fd0) { /* 24+24 bit pi OK */
		    y[0] = z - pio2_1t;
		    y[1] = (z-y[0])-pio2_1t;
		} else {		/* near pi/2, use 24+24+24 bit pi */
		    z -= pio2_2;
 8001864:	1c05      	adds	r5, r0, #0
		    y[0] = z - pio2_2t;
 8001866:	f000 ee3e 	blx	80024e4 <__aeabi_fsub>
 800186a:	1c01      	adds	r1, r0, #0
 800186c:	6020      	str	r0, [r4, #0]
		    y[1] = (z-y[0])-pio2_2t;
 800186e:	1c28      	adds	r0, r5, #0
 8001870:	f000 ee38 	blx	80024e4 <__aeabi_fsub>
 8001874:	496b      	ldr	r1, [pc, #428]	; (8001a24 <__ieee754_rem_pio2f+0x300>)
 8001876:	f000 ee36 	blx	80024e4 <__aeabi_fsub>
		}
		return 1;
 800187a:	2601      	movs	r6, #1
		    y[0] = z - pio2_1t;
		    y[1] = (z-y[0])-pio2_1t;
		} else {		/* near pi/2, use 24+24+24 bit pi */
		    z -= pio2_2;
		    y[0] = z - pio2_2t;
		    y[1] = (z-y[0])-pio2_2t;
 800187c:	6060      	str	r0, [r4, #4]
 800187e:	e7dc      	b.n	800183a <__ieee754_rem_pio2f+0x116>
		}
		return -1;
	    }
	}
	if(ix<=0x43490f80) { /* |x| ~<= 2^7*(pi/2), medium size */
	    t  = fabsf(x);
 8001880:	f000 fd76 	bl	8002370 <fabsf>
	    n  = (__int32_t) (t*invpio2+half);
 8001884:	4968      	ldr	r1, [pc, #416]	; (8001a28 <__ieee754_rem_pio2f+0x304>)
		}
		return -1;
	    }
	}
	if(ix<=0x43490f80) { /* |x| ~<= 2^7*(pi/2), medium size */
	    t  = fabsf(x);
 8001886:	4680      	mov	r8, r0
	    n  = (__int32_t) (t*invpio2+half);
 8001888:	f000 ef7e 	blx	8002788 <__aeabi_fmul>
 800188c:	21fc      	movs	r1, #252	; 0xfc
 800188e:	0589      	lsls	r1, r1, #22
 8001890:	f000 ee2a 	blx	80024e8 <__addsf3>
 8001894:	f001 e97e 	blx	8002b94 <__aeabi_f2iz>
 8001898:	1c06      	adds	r6, r0, #0
	    fn = (float)n;
 800189a:	f000 ef08 	blx	80026ac <__aeabi_i2f>
	    r  = t-fn*pio2_1;
 800189e:	4959      	ldr	r1, [pc, #356]	; (8001a04 <__ieee754_rem_pio2f+0x2e0>)
	    }
	}
	if(ix<=0x43490f80) { /* |x| ~<= 2^7*(pi/2), medium size */
	    t  = fabsf(x);
	    n  = (__int32_t) (t*invpio2+half);
	    fn = (float)n;
 80018a0:	4681      	mov	r9, r0
	    r  = t-fn*pio2_1;
 80018a2:	f000 ef72 	blx	8002788 <__aeabi_fmul>
 80018a6:	1c01      	adds	r1, r0, #0
 80018a8:	4640      	mov	r0, r8
 80018aa:	f000 ee1c 	blx	80024e4 <__aeabi_fsub>
	    w  = fn*pio2_1t;	/* 1st round good to 40 bit */
 80018ae:	4958      	ldr	r1, [pc, #352]	; (8001a10 <__ieee754_rem_pio2f+0x2ec>)
	}
	if(ix<=0x43490f80) { /* |x| ~<= 2^7*(pi/2), medium size */
	    t  = fabsf(x);
	    n  = (__int32_t) (t*invpio2+half);
	    fn = (float)n;
	    r  = t-fn*pio2_1;
 80018b0:	4680      	mov	r8, r0
	    w  = fn*pio2_1t;	/* 1st round good to 40 bit */
 80018b2:	4648      	mov	r0, r9
 80018b4:	f000 ef68 	blx	8002788 <__aeabi_fmul>
 80018b8:	4682      	mov	sl, r0
	    if(n<32&&(ix&0xffffff00)!=npio2_hw[n-1]) {	
		y[0] = r-w;	/* quick check no cancellation */
 80018ba:	4640      	mov	r0, r8
	    t  = fabsf(x);
	    n  = (__int32_t) (t*invpio2+half);
	    fn = (float)n;
	    r  = t-fn*pio2_1;
	    w  = fn*pio2_1t;	/* 1st round good to 40 bit */
	    if(n<32&&(ix&0xffffff00)!=npio2_hw[n-1]) {	
 80018bc:	2e1f      	cmp	r6, #31
 80018be:	dc1f      	bgt.n	8001900 <__ieee754_rem_pio2f+0x1dc>
 80018c0:	1e71      	subs	r1, r6, #1
 80018c2:	4b5a      	ldr	r3, [pc, #360]	; (8001a2c <__ieee754_rem_pio2f+0x308>)
 80018c4:	0089      	lsls	r1, r1, #2
 80018c6:	4a5a      	ldr	r2, [pc, #360]	; (8001a30 <__ieee754_rem_pio2f+0x30c>)
 80018c8:	58cb      	ldr	r3, [r1, r3]
 80018ca:	402a      	ands	r2, r5
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d017      	beq.n	8001900 <__ieee754_rem_pio2f+0x1dc>
		    if(i>25)  {	/* 3rd iteration need, 74 bits acc */
		    	t  = r;	/* will cover all possible cases */
		    	w  = fn*pio2_3;	
		    	r  = t-w;
		    	w  = fn*pio2_3t-((t-r)-w);	
		    	y[0] = r-w;
 80018d0:	4651      	mov	r1, sl
 80018d2:	f000 ee08 	blx	80024e4 <__aeabi_fsub>
 80018d6:	6020      	str	r0, [r4, #0]
 80018d8:	4683      	mov	fp, r0
		    }
		}
	    }
	    y[1] = (r-y[0])-w;
 80018da:	4659      	mov	r1, fp
 80018dc:	4640      	mov	r0, r8
 80018de:	f000 ee02 	blx	80024e4 <__aeabi_fsub>
 80018e2:	4651      	mov	r1, sl
 80018e4:	f000 edfe 	blx	80024e4 <__aeabi_fsub>
 80018e8:	6060      	str	r0, [r4, #4]
	    if(hx<0) 	{y[0] = -y[0]; y[1] = -y[1]; return -n;}
 80018ea:	2d00      	cmp	r5, #0
 80018ec:	daa5      	bge.n	800183a <__ieee754_rem_pio2f+0x116>
 80018ee:	2180      	movs	r1, #128	; 0x80
 80018f0:	0609      	lsls	r1, r1, #24
 80018f2:	1c0f      	adds	r7, r1, #0
 80018f4:	445f      	add	r7, fp
 80018f6:	1840      	adds	r0, r0, r1
 80018f8:	6027      	str	r7, [r4, #0]
 80018fa:	6060      	str	r0, [r4, #4]
 80018fc:	4276      	negs	r6, r6
 80018fe:	e79c      	b.n	800183a <__ieee754_rem_pio2f+0x116>
	    if(n<32&&(ix&0xffffff00)!=npio2_hw[n-1]) {	
		y[0] = r-w;	/* quick check no cancellation */
	    } else {
	        __uint32_t high;
	        j  = ix>>23;
	        y[0] = r-w; 
 8001900:	4651      	mov	r1, sl
 8001902:	f000 edf0 	blx	80024e4 <__aeabi_fsub>
		GET_FLOAT_WORD(high,y[0]);
	        i = j-((high>>23)&0xff);
 8001906:	22ff      	movs	r2, #255	; 0xff
 8001908:	0dc3      	lsrs	r3, r0, #23
	    w  = fn*pio2_1t;	/* 1st round good to 40 bit */
	    if(n<32&&(ix&0xffffff00)!=npio2_hw[n-1]) {	
		y[0] = r-w;	/* quick check no cancellation */
	    } else {
	        __uint32_t high;
	        j  = ix>>23;
 800190a:	15ff      	asrs	r7, r7, #23
	        y[0] = r-w; 
		GET_FLOAT_WORD(high,y[0]);
	        i = j-((high>>23)&0xff);
 800190c:	4013      	ands	r3, r2
	    if(n<32&&(ix&0xffffff00)!=npio2_hw[n-1]) {	
		y[0] = r-w;	/* quick check no cancellation */
	    } else {
	        __uint32_t high;
	        j  = ix>>23;
	        y[0] = r-w; 
 800190e:	4683      	mov	fp, r0
	    w  = fn*pio2_1t;	/* 1st round good to 40 bit */
	    if(n<32&&(ix&0xffffff00)!=npio2_hw[n-1]) {	
		y[0] = r-w;	/* quick check no cancellation */
	    } else {
	        __uint32_t high;
	        j  = ix>>23;
 8001910:	9702      	str	r7, [sp, #8]
	        y[0] = r-w; 
		GET_FLOAT_WORD(high,y[0]);
	        i = j-((high>>23)&0xff);
 8001912:	1afb      	subs	r3, r7, r3
	        if(i>8) {  /* 2nd iteration needed, good to 57 */
 8001914:	2b08      	cmp	r3, #8
 8001916:	dd40      	ble.n	800199a <__ieee754_rem_pio2f+0x276>
		    t  = r;
		    w  = fn*pio2_2;	
 8001918:	4941      	ldr	r1, [pc, #260]	; (8001a20 <__ieee754_rem_pio2f+0x2fc>)
 800191a:	4648      	mov	r0, r9
 800191c:	f000 ef34 	blx	8002788 <__aeabi_fmul>
 8001920:	1c07      	adds	r7, r0, #0
		    r  = t-w;
 8001922:	1c39      	adds	r1, r7, #0
 8001924:	4640      	mov	r0, r8
 8001926:	f000 edde 	blx	80024e4 <__aeabi_fsub>
 800192a:	9003      	str	r0, [sp, #12]
		    w  = fn*pio2_2t-((t-r)-w);	
 800192c:	9903      	ldr	r1, [sp, #12]
 800192e:	4640      	mov	r0, r8
 8001930:	f000 edd8 	blx	80024e4 <__aeabi_fsub>
 8001934:	1c39      	adds	r1, r7, #0
 8001936:	f000 edd6 	blx	80024e4 <__aeabi_fsub>
 800193a:	493a      	ldr	r1, [pc, #232]	; (8001a24 <__ieee754_rem_pio2f+0x300>)
 800193c:	1c07      	adds	r7, r0, #0
 800193e:	4648      	mov	r0, r9
 8001940:	f000 ef22 	blx	8002788 <__aeabi_fmul>
 8001944:	1c39      	adds	r1, r7, #0
 8001946:	f000 edce 	blx	80024e4 <__aeabi_fsub>
 800194a:	4682      	mov	sl, r0
		    y[0] = r-w;
 800194c:	4651      	mov	r1, sl
 800194e:	9803      	ldr	r0, [sp, #12]
 8001950:	f000 edc8 	blx	80024e4 <__aeabi_fsub>
		    GET_FLOAT_WORD(high,y[0]);
		    i = j-((high>>23)&0xff);
 8001954:	22ff      	movs	r2, #255	; 0xff
 8001956:	0dc3      	lsrs	r3, r0, #23
 8001958:	9902      	ldr	r1, [sp, #8]
 800195a:	4013      	ands	r3, r2
	        if(i>8) {  /* 2nd iteration needed, good to 57 */
		    t  = r;
		    w  = fn*pio2_2;	
		    r  = t-w;
		    w  = fn*pio2_2t-((t-r)-w);	
		    y[0] = r-w;
 800195c:	4683      	mov	fp, r0
		    GET_FLOAT_WORD(high,y[0]);
		    i = j-((high>>23)&0xff);
 800195e:	1acb      	subs	r3, r1, r3
		    if(i>25)  {	/* 3rd iteration need, 74 bits acc */
 8001960:	2b19      	cmp	r3, #25
 8001962:	dc2f      	bgt.n	80019c4 <__ieee754_rem_pio2f+0x2a0>
		GET_FLOAT_WORD(high,y[0]);
	        i = j-((high>>23)&0xff);
	        if(i>8) {  /* 2nd iteration needed, good to 57 */
		    t  = r;
		    w  = fn*pio2_2;	
		    r  = t-w;
 8001964:	9b03      	ldr	r3, [sp, #12]
		    w  = fn*pio2_2t-((t-r)-w);	
		    y[0] = r-w;
 8001966:	6020      	str	r0, [r4, #0]
		GET_FLOAT_WORD(high,y[0]);
	        i = j-((high>>23)&0xff);
	        if(i>8) {  /* 2nd iteration needed, good to 57 */
		    t  = r;
		    w  = fn*pio2_2;	
		    r  = t-w;
 8001968:	4698      	mov	r8, r3
 800196a:	e7b6      	b.n	80018da <__ieee754_rem_pio2f+0x1b6>
		    y[0] = z - pio2_2t;
		    y[1] = (z-y[0])-pio2_2t;
		}
		return 1;
	    } else {	/* negative x */
		z = x + pio2_1;
 800196c:	f000 edbc 	blx	80024e8 <__addsf3>
		if((ix&0xfffffff0)!=0x3fc90fd0) { /* 24+24 bit pi OK */
 8001970:	4b25      	ldr	r3, [pc, #148]	; (8001a08 <__ieee754_rem_pio2f+0x2e4>)
 8001972:	401d      	ands	r5, r3
 8001974:	4b25      	ldr	r3, [pc, #148]	; (8001a0c <__ieee754_rem_pio2f+0x2e8>)
		    y[0] = z - pio2_2t;
		    y[1] = (z-y[0])-pio2_2t;
		}
		return 1;
	    } else {	/* negative x */
		z = x + pio2_1;
 8001976:	1c06      	adds	r6, r0, #0
		if((ix&0xfffffff0)!=0x3fc90fd0) { /* 24+24 bit pi OK */
 8001978:	429d      	cmp	r5, r3
 800197a:	d010      	beq.n	800199e <__ieee754_rem_pio2f+0x27a>
		    y[0] = z + pio2_1t;
 800197c:	4924      	ldr	r1, [pc, #144]	; (8001a10 <__ieee754_rem_pio2f+0x2ec>)
 800197e:	f000 edb4 	blx	80024e8 <__addsf3>
 8001982:	1c01      	adds	r1, r0, #0
 8001984:	6020      	str	r0, [r4, #0]
		    y[1] = (z-y[0])+pio2_1t;
 8001986:	1c30      	adds	r0, r6, #0
 8001988:	f000 edac 	blx	80024e4 <__aeabi_fsub>
 800198c:	4920      	ldr	r1, [pc, #128]	; (8001a10 <__ieee754_rem_pio2f+0x2ec>)
 800198e:	f000 edac 	blx	80024e8 <__addsf3>
		} else {		/* near pi/2, use 24+24+24 bit pi */
		    z += pio2_2;
		    y[0] = z + pio2_2t;
		    y[1] = (z-y[0])+pio2_2t;
		}
		return -1;
 8001992:	2601      	movs	r6, #1
		return 1;
	    } else {	/* negative x */
		z = x + pio2_1;
		if((ix&0xfffffff0)!=0x3fc90fd0) { /* 24+24 bit pi OK */
		    y[0] = z + pio2_1t;
		    y[1] = (z-y[0])+pio2_1t;
 8001994:	6060      	str	r0, [r4, #4]
		} else {		/* near pi/2, use 24+24+24 bit pi */
		    z += pio2_2;
		    y[0] = z + pio2_2t;
		    y[1] = (z-y[0])+pio2_2t;
		}
		return -1;
 8001996:	4276      	negs	r6, r6
 8001998:	e74f      	b.n	800183a <__ieee754_rem_pio2f+0x116>
	    if(n<32&&(ix&0xffffff00)!=npio2_hw[n-1]) {	
		y[0] = r-w;	/* quick check no cancellation */
	    } else {
	        __uint32_t high;
	        j  = ix>>23;
	        y[0] = r-w; 
 800199a:	6020      	str	r0, [r4, #0]
 800199c:	e79d      	b.n	80018da <__ieee754_rem_pio2f+0x1b6>
		z = x + pio2_1;
		if((ix&0xfffffff0)!=0x3fc90fd0) { /* 24+24 bit pi OK */
		    y[0] = z + pio2_1t;
		    y[1] = (z-y[0])+pio2_1t;
		} else {		/* near pi/2, use 24+24+24 bit pi */
		    z += pio2_2;
 800199e:	4920      	ldr	r1, [pc, #128]	; (8001a20 <__ieee754_rem_pio2f+0x2fc>)
 80019a0:	f000 eda2 	blx	80024e8 <__addsf3>
		    y[0] = z + pio2_2t;
 80019a4:	491f      	ldr	r1, [pc, #124]	; (8001a24 <__ieee754_rem_pio2f+0x300>)
		z = x + pio2_1;
		if((ix&0xfffffff0)!=0x3fc90fd0) { /* 24+24 bit pi OK */
		    y[0] = z + pio2_1t;
		    y[1] = (z-y[0])+pio2_1t;
		} else {		/* near pi/2, use 24+24+24 bit pi */
		    z += pio2_2;
 80019a6:	1c05      	adds	r5, r0, #0
		    y[0] = z + pio2_2t;
 80019a8:	f000 ed9e 	blx	80024e8 <__addsf3>
 80019ac:	1c01      	adds	r1, r0, #0
 80019ae:	6020      	str	r0, [r4, #0]
		    y[1] = (z-y[0])+pio2_2t;
 80019b0:	1c28      	adds	r0, r5, #0
 80019b2:	f000 ed98 	blx	80024e4 <__aeabi_fsub>
 80019b6:	491b      	ldr	r1, [pc, #108]	; (8001a24 <__ieee754_rem_pio2f+0x300>)
 80019b8:	f000 ed96 	blx	80024e8 <__addsf3>
		}
		return -1;
 80019bc:	2601      	movs	r6, #1
		    y[0] = z + pio2_1t;
		    y[1] = (z-y[0])+pio2_1t;
		} else {		/* near pi/2, use 24+24+24 bit pi */
		    z += pio2_2;
		    y[0] = z + pio2_2t;
		    y[1] = (z-y[0])+pio2_2t;
 80019be:	6060      	str	r0, [r4, #4]
		}
		return -1;
 80019c0:	4276      	negs	r6, r6
 80019c2:	e73a      	b.n	800183a <__ieee754_rem_pio2f+0x116>
		    y[0] = r-w;
		    GET_FLOAT_WORD(high,y[0]);
		    i = j-((high>>23)&0xff);
		    if(i>25)  {	/* 3rd iteration need, 74 bits acc */
		    	t  = r;	/* will cover all possible cases */
		    	w  = fn*pio2_3;	
 80019c4:	491b      	ldr	r1, [pc, #108]	; (8001a34 <__ieee754_rem_pio2f+0x310>)
 80019c6:	4648      	mov	r0, r9
 80019c8:	f000 eede 	blx	8002788 <__aeabi_fmul>
 80019cc:	1c07      	adds	r7, r0, #0
		    	r  = t-w;
 80019ce:	1c39      	adds	r1, r7, #0
 80019d0:	9803      	ldr	r0, [sp, #12]
 80019d2:	f000 ed88 	blx	80024e4 <__aeabi_fsub>
 80019d6:	4680      	mov	r8, r0
		    	w  = fn*pio2_3t-((t-r)-w);	
 80019d8:	4641      	mov	r1, r8
 80019da:	9803      	ldr	r0, [sp, #12]
 80019dc:	f000 ed82 	blx	80024e4 <__aeabi_fsub>
 80019e0:	1c39      	adds	r1, r7, #0
 80019e2:	f000 ed80 	blx	80024e4 <__aeabi_fsub>
 80019e6:	4914      	ldr	r1, [pc, #80]	; (8001a38 <__ieee754_rem_pio2f+0x314>)
 80019e8:	1c07      	adds	r7, r0, #0
 80019ea:	4648      	mov	r0, r9
 80019ec:	f000 eecc 	blx	8002788 <__aeabi_fmul>
 80019f0:	1c39      	adds	r1, r7, #0
 80019f2:	f000 ed78 	blx	80024e4 <__aeabi_fsub>
 80019f6:	4682      	mov	sl, r0
		    	y[0] = r-w;
 80019f8:	4640      	mov	r0, r8
 80019fa:	e769      	b.n	80018d0 <__ieee754_rem_pio2f+0x1ac>
 80019fc:	3f490fd8 	.word	0x3f490fd8
 8001a00:	4016cbe3 	.word	0x4016cbe3
 8001a04:	3fc90f80 	.word	0x3fc90f80
 8001a08:	7ffffff0 	.word	0x7ffffff0
 8001a0c:	3fc90fd0 	.word	0x3fc90fd0
 8001a10:	37354443 	.word	0x37354443
 8001a14:	43490f80 	.word	0x43490f80
 8001a18:	7f7fffff 	.word	0x7f7fffff
 8001a1c:	08002f38 	.word	0x08002f38
 8001a20:	37354400 	.word	0x37354400
 8001a24:	2e85a308 	.word	0x2e85a308
 8001a28:	3f22f984 	.word	0x3f22f984
 8001a2c:	08002eb8 	.word	0x08002eb8
 8001a30:	7fffff00 	.word	0x7fffff00
 8001a34:	2e85a300 	.word	0x2e85a300
 8001a38:	248d3132 	.word	0x248d3132

08001a3c <__kernel_cosf>:
	float __kernel_cosf(float x, float y)
#else
	float __kernel_cosf(x, y)
	float x,y;
#endif
{
 8001a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a3e:	464f      	mov	r7, r9
 8001a40:	4646      	mov	r6, r8
	float a,hz,z,r,qx;
	__int32_t ix;
	GET_FLOAT_WORD(ix,x);
	ix &= 0x7fffffff;			/* ix = |x|'s high word*/
	if(ix<0x32000000) {			/* if x < 2**27 */
 8001a42:	4b58      	ldr	r3, [pc, #352]	; (8001ba4 <__kernel_cosf+0x168>)
	float __kernel_cosf(float x, float y)
#else
	float __kernel_cosf(x, y)
	float x,y;
#endif
{
 8001a44:	b4c0      	push	{r6, r7}
	float a,hz,z,r,qx;
	__int32_t ix;
	GET_FLOAT_WORD(ix,x);
	ix &= 0x7fffffff;			/* ix = |x|'s high word*/
 8001a46:	0046      	lsls	r6, r0, #1
	float __kernel_cosf(float x, float y)
#else
	float __kernel_cosf(x, y)
	float x,y;
#endif
{
 8001a48:	1c05      	adds	r5, r0, #0
 8001a4a:	1c0f      	adds	r7, r1, #0
	float a,hz,z,r,qx;
	__int32_t ix;
	GET_FLOAT_WORD(ix,x);
	ix &= 0x7fffffff;			/* ix = |x|'s high word*/
 8001a4c:	0876      	lsrs	r6, r6, #1
	if(ix<0x32000000) {			/* if x < 2**27 */
 8001a4e:	429e      	cmp	r6, r3
 8001a50:	dc48      	bgt.n	8001ae4 <__kernel_cosf+0xa8>
	    if(((int)x)==0) return one;		/* generate inexact */
 8001a52:	f001 e8a0 	blx	8002b94 <__aeabi_f2iz>
 8001a56:	2800      	cmp	r0, #0
 8001a58:	d100      	bne.n	8001a5c <__kernel_cosf+0x20>
 8001a5a:	e0a0      	b.n	8001b9e <__kernel_cosf+0x162>
	}
	z  = x*x;
 8001a5c:	1c29      	adds	r1, r5, #0
 8001a5e:	1c28      	adds	r0, r5, #0
 8001a60:	f000 ee92 	blx	8002788 <__aeabi_fmul>
	r  = z*(C1+z*(C2+z*(C3+z*(C4+z*(C5+z*C6)))));
 8001a64:	4950      	ldr	r1, [pc, #320]	; (8001ba8 <__kernel_cosf+0x16c>)
	GET_FLOAT_WORD(ix,x);
	ix &= 0x7fffffff;			/* ix = |x|'s high word*/
	if(ix<0x32000000) {			/* if x < 2**27 */
	    if(((int)x)==0) return one;		/* generate inexact */
	}
	z  = x*x;
 8001a66:	1c04      	adds	r4, r0, #0
	r  = z*(C1+z*(C2+z*(C3+z*(C4+z*(C5+z*C6)))));
 8001a68:	f000 ee8e 	blx	8002788 <__aeabi_fmul>
 8001a6c:	494f      	ldr	r1, [pc, #316]	; (8001bac <__kernel_cosf+0x170>)
 8001a6e:	f000 ed3c 	blx	80024e8 <__addsf3>
 8001a72:	1c21      	adds	r1, r4, #0
 8001a74:	f000 ee88 	blx	8002788 <__aeabi_fmul>
 8001a78:	494d      	ldr	r1, [pc, #308]	; (8001bb0 <__kernel_cosf+0x174>)
 8001a7a:	f000 ed34 	blx	80024e4 <__aeabi_fsub>
 8001a7e:	1c21      	adds	r1, r4, #0
 8001a80:	f000 ee82 	blx	8002788 <__aeabi_fmul>
 8001a84:	494b      	ldr	r1, [pc, #300]	; (8001bb4 <__kernel_cosf+0x178>)
 8001a86:	f000 ed30 	blx	80024e8 <__addsf3>
 8001a8a:	1c21      	adds	r1, r4, #0
 8001a8c:	f000 ee7c 	blx	8002788 <__aeabi_fmul>
 8001a90:	4949      	ldr	r1, [pc, #292]	; (8001bb8 <__kernel_cosf+0x17c>)
 8001a92:	f000 ed28 	blx	80024e4 <__aeabi_fsub>
 8001a96:	1c21      	adds	r1, r4, #0
 8001a98:	f000 ee76 	blx	8002788 <__aeabi_fmul>
 8001a9c:	4947      	ldr	r1, [pc, #284]	; (8001bbc <__kernel_cosf+0x180>)
 8001a9e:	f000 ed24 	blx	80024e8 <__addsf3>
 8001aa2:	1c21      	adds	r1, r4, #0
 8001aa4:	f000 ee70 	blx	8002788 <__aeabi_fmul>
 8001aa8:	4680      	mov	r8, r0
	if(ix < 0x3e99999a) 			/* if |x| < 0.3 */ 
	    return one - ((float)0.5*z - (z*r - x*y));
 8001aaa:	21fc      	movs	r1, #252	; 0xfc
 8001aac:	1c20      	adds	r0, r4, #0
 8001aae:	0589      	lsls	r1, r1, #22
 8001ab0:	f000 ee6a 	blx	8002788 <__aeabi_fmul>
 8001ab4:	4641      	mov	r1, r8
 8001ab6:	1c06      	adds	r6, r0, #0
 8001ab8:	1c20      	adds	r0, r4, #0
 8001aba:	f000 ee66 	blx	8002788 <__aeabi_fmul>
 8001abe:	1c39      	adds	r1, r7, #0
 8001ac0:	1c04      	adds	r4, r0, #0
 8001ac2:	1c28      	adds	r0, r5, #0
 8001ac4:	f000 ee60 	blx	8002788 <__aeabi_fmul>
 8001ac8:	1c01      	adds	r1, r0, #0
 8001aca:	1c20      	adds	r0, r4, #0
 8001acc:	f000 ed0a 	blx	80024e4 <__aeabi_fsub>
 8001ad0:	1c01      	adds	r1, r0, #0
 8001ad2:	1c30      	adds	r0, r6, #0
 8001ad4:	f000 ed06 	blx	80024e4 <__aeabi_fsub>
 8001ad8:	1c01      	adds	r1, r0, #0
 8001ada:	20fe      	movs	r0, #254	; 0xfe
 8001adc:	0580      	lsls	r0, r0, #22
 8001ade:	f000 ed02 	blx	80024e4 <__aeabi_fsub>
 8001ae2:	e052      	b.n	8001b8a <__kernel_cosf+0x14e>
	GET_FLOAT_WORD(ix,x);
	ix &= 0x7fffffff;			/* ix = |x|'s high word*/
	if(ix<0x32000000) {			/* if x < 2**27 */
	    if(((int)x)==0) return one;		/* generate inexact */
	}
	z  = x*x;
 8001ae4:	1c29      	adds	r1, r5, #0
 8001ae6:	f000 ee50 	blx	8002788 <__aeabi_fmul>
	r  = z*(C1+z*(C2+z*(C3+z*(C4+z*(C5+z*C6)))));
 8001aea:	492f      	ldr	r1, [pc, #188]	; (8001ba8 <__kernel_cosf+0x16c>)
	GET_FLOAT_WORD(ix,x);
	ix &= 0x7fffffff;			/* ix = |x|'s high word*/
	if(ix<0x32000000) {			/* if x < 2**27 */
	    if(((int)x)==0) return one;		/* generate inexact */
	}
	z  = x*x;
 8001aec:	1c04      	adds	r4, r0, #0
	r  = z*(C1+z*(C2+z*(C3+z*(C4+z*(C5+z*C6)))));
 8001aee:	f000 ee4c 	blx	8002788 <__aeabi_fmul>
 8001af2:	492e      	ldr	r1, [pc, #184]	; (8001bac <__kernel_cosf+0x170>)
 8001af4:	f000 ecf8 	blx	80024e8 <__addsf3>
 8001af8:	1c21      	adds	r1, r4, #0
 8001afa:	f000 ee46 	blx	8002788 <__aeabi_fmul>
 8001afe:	492c      	ldr	r1, [pc, #176]	; (8001bb0 <__kernel_cosf+0x174>)
 8001b00:	f000 ecf0 	blx	80024e4 <__aeabi_fsub>
 8001b04:	1c21      	adds	r1, r4, #0
 8001b06:	f000 ee40 	blx	8002788 <__aeabi_fmul>
 8001b0a:	492a      	ldr	r1, [pc, #168]	; (8001bb4 <__kernel_cosf+0x178>)
 8001b0c:	f000 ecec 	blx	80024e8 <__addsf3>
 8001b10:	1c21      	adds	r1, r4, #0
 8001b12:	f000 ee3a 	blx	8002788 <__aeabi_fmul>
 8001b16:	4928      	ldr	r1, [pc, #160]	; (8001bb8 <__kernel_cosf+0x17c>)
 8001b18:	f000 ece4 	blx	80024e4 <__aeabi_fsub>
 8001b1c:	1c21      	adds	r1, r4, #0
 8001b1e:	f000 ee34 	blx	8002788 <__aeabi_fmul>
 8001b22:	4926      	ldr	r1, [pc, #152]	; (8001bbc <__kernel_cosf+0x180>)
 8001b24:	f000 ece0 	blx	80024e8 <__addsf3>
 8001b28:	1c21      	adds	r1, r4, #0
 8001b2a:	f000 ee2e 	blx	8002788 <__aeabi_fmul>
	if(ix < 0x3e99999a) 			/* if |x| < 0.3 */ 
 8001b2e:	4b24      	ldr	r3, [pc, #144]	; (8001bc0 <__kernel_cosf+0x184>)
	ix &= 0x7fffffff;			/* ix = |x|'s high word*/
	if(ix<0x32000000) {			/* if x < 2**27 */
	    if(((int)x)==0) return one;		/* generate inexact */
	}
	z  = x*x;
	r  = z*(C1+z*(C2+z*(C3+z*(C4+z*(C5+z*C6)))));
 8001b30:	4680      	mov	r8, r0
	if(ix < 0x3e99999a) 			/* if |x| < 0.3 */ 
 8001b32:	429e      	cmp	r6, r3
 8001b34:	ddb9      	ble.n	8001aaa <__kernel_cosf+0x6e>
	    return one - ((float)0.5*z - (z*r - x*y));
	else {
	    if(ix > 0x3f480000) {		/* x > 0.78125 */
 8001b36:	4b23      	ldr	r3, [pc, #140]	; (8001bc4 <__kernel_cosf+0x188>)
 8001b38:	429e      	cmp	r6, r3
 8001b3a:	dc2c      	bgt.n	8001b96 <__kernel_cosf+0x15a>
		qx = (float)0.28125;
	    } else {
	        SET_FLOAT_WORD(qx,ix-0x01000000);	/* x/4 */
 8001b3c:	23ff      	movs	r3, #255	; 0xff
 8001b3e:	061b      	lsls	r3, r3, #24
 8001b40:	18f6      	adds	r6, r6, r3
 8001b42:	20fe      	movs	r0, #254	; 0xfe
 8001b44:	0580      	lsls	r0, r0, #22
 8001b46:	1c31      	adds	r1, r6, #0
 8001b48:	f000 eccc 	blx	80024e4 <__aeabi_fsub>
 8001b4c:	4681      	mov	r9, r0
	    }
	    hz = (float)0.5*z-qx;
 8001b4e:	21fc      	movs	r1, #252	; 0xfc
 8001b50:	1c20      	adds	r0, r4, #0
 8001b52:	0589      	lsls	r1, r1, #22
 8001b54:	f000 ee18 	blx	8002788 <__aeabi_fmul>
 8001b58:	1c31      	adds	r1, r6, #0
 8001b5a:	f000 ecc4 	blx	80024e4 <__aeabi_fsub>
	    a  = one-qx;
	    return a - (hz - (z*r-x*y));
 8001b5e:	4641      	mov	r1, r8
	    if(ix > 0x3f480000) {		/* x > 0.78125 */
		qx = (float)0.28125;
	    } else {
	        SET_FLOAT_WORD(qx,ix-0x01000000);	/* x/4 */
	    }
	    hz = (float)0.5*z-qx;
 8001b60:	1c06      	adds	r6, r0, #0
	    a  = one-qx;
	    return a - (hz - (z*r-x*y));
 8001b62:	1c20      	adds	r0, r4, #0
 8001b64:	f000 ee10 	blx	8002788 <__aeabi_fmul>
 8001b68:	1c39      	adds	r1, r7, #0
 8001b6a:	1c04      	adds	r4, r0, #0
 8001b6c:	1c28      	adds	r0, r5, #0
 8001b6e:	f000 ee0c 	blx	8002788 <__aeabi_fmul>
 8001b72:	1c01      	adds	r1, r0, #0
 8001b74:	1c20      	adds	r0, r4, #0
 8001b76:	f000 ecb6 	blx	80024e4 <__aeabi_fsub>
 8001b7a:	1c01      	adds	r1, r0, #0
 8001b7c:	1c30      	adds	r0, r6, #0
 8001b7e:	f000 ecb2 	blx	80024e4 <__aeabi_fsub>
 8001b82:	1c01      	adds	r1, r0, #0
 8001b84:	4648      	mov	r0, r9
 8001b86:	f000 ecae 	blx	80024e4 <__aeabi_fsub>
	}
}
 8001b8a:	bc0c      	pop	{r2, r3}
 8001b8c:	4690      	mov	r8, r2
 8001b8e:	4699      	mov	r9, r3
 8001b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b92:	bc02      	pop	{r1}
 8001b94:	4708      	bx	r1
	z  = x*x;
	r  = z*(C1+z*(C2+z*(C3+z*(C4+z*(C5+z*C6)))));
	if(ix < 0x3e99999a) 			/* if |x| < 0.3 */ 
	    return one - ((float)0.5*z - (z*r - x*y));
	else {
	    if(ix > 0x3f480000) {		/* x > 0.78125 */
 8001b96:	4b0c      	ldr	r3, [pc, #48]	; (8001bc8 <__kernel_cosf+0x18c>)
		qx = (float)0.28125;
 8001b98:	4e0c      	ldr	r6, [pc, #48]	; (8001bcc <__kernel_cosf+0x190>)
	z  = x*x;
	r  = z*(C1+z*(C2+z*(C3+z*(C4+z*(C5+z*C6)))));
	if(ix < 0x3e99999a) 			/* if |x| < 0.3 */ 
	    return one - ((float)0.5*z - (z*r - x*y));
	else {
	    if(ix > 0x3f480000) {		/* x > 0.78125 */
 8001b9a:	4699      	mov	r9, r3
 8001b9c:	e7d7      	b.n	8001b4e <__kernel_cosf+0x112>
	float a,hz,z,r,qx;
	__int32_t ix;
	GET_FLOAT_WORD(ix,x);
	ix &= 0x7fffffff;			/* ix = |x|'s high word*/
	if(ix<0x32000000) {			/* if x < 2**27 */
	    if(((int)x)==0) return one;		/* generate inexact */
 8001b9e:	20fe      	movs	r0, #254	; 0xfe
 8001ba0:	0580      	lsls	r0, r0, #22
 8001ba2:	e7f2      	b.n	8001b8a <__kernel_cosf+0x14e>
 8001ba4:	31ffffff 	.word	0x31ffffff
 8001ba8:	ad47d74e 	.word	0xad47d74e
 8001bac:	310f74f6 	.word	0x310f74f6
 8001bb0:	3493f27c 	.word	0x3493f27c
 8001bb4:	37d00d01 	.word	0x37d00d01
 8001bb8:	3ab60b61 	.word	0x3ab60b61
 8001bbc:	3d2aaaab 	.word	0x3d2aaaab
 8001bc0:	3e999999 	.word	0x3e999999
 8001bc4:	3f480000 	.word	0x3f480000
 8001bc8:	3f380000 	.word	0x3f380000
 8001bcc:	3e900000 	.word	0x3e900000

08001bd0 <__kernel_rem_pio2f>:
	int __kernel_rem_pio2f(float *x, float *y, int e0, int nx, int prec, const __int32_t *ipio2) 
#else
	int __kernel_rem_pio2f(x,y,e0,nx,prec,ipio2) 	
	float x[], y[]; int e0,nx,prec; __int32_t ipio2[];
#endif
{
 8001bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bd2:	464d      	mov	r5, r9
 8001bd4:	4644      	mov	r4, r8
 8001bd6:	465f      	mov	r7, fp
 8001bd8:	4656      	mov	r6, sl
 8001bda:	b4f0      	push	{r4, r5, r6, r7}
 8001bdc:	b0e1      	sub	sp, #388	; 0x184
	__int32_t jz,jx,jv,jp,jk,carry,n,iq[20],i,j,k,m,q0,ih;
	float z,fw,f[20],fq[20],q[20];

    /* initialize jk*/
	jk = init_jk[prec];
 8001bde:	9d6a      	ldr	r5, [sp, #424]	; 0x1a8
	int __kernel_rem_pio2f(float *x, float *y, int e0, int nx, int prec, const __int32_t *ipio2) 
#else
	int __kernel_rem_pio2f(x,y,e0,nx,prec,ipio2) 	
	float x[], y[]; int e0,nx,prec; __int32_t ipio2[];
#endif
{
 8001be0:	930d      	str	r3, [sp, #52]	; 0x34
	__int32_t jz,jx,jv,jp,jk,carry,n,iq[20],i,j,k,m,q0,ih;
	float z,fw,f[20],fq[20],q[20];

    /* initialize jk*/
	jk = init_jk[prec];
 8001be2:	00ab      	lsls	r3, r5, #2
 8001be4:	4dbe      	ldr	r5, [pc, #760]	; (8001ee0 <__kernel_rem_pio2f+0x310>)
 8001be6:	58eb      	ldr	r3, [r5, r3]
 8001be8:	930a      	str	r3, [sp, #40]	; 0x28
	jp = jk;

    /* determine jx,jv,q0, note that 3>q0 */
	jx =  nx-1;
	jv = (e0-3)/8; if(jv<0) jv=0;
 8001bea:	1ed3      	subs	r3, r2, #3
	int __kernel_rem_pio2f(float *x, float *y, int e0, int nx, int prec, const __int32_t *ipio2) 
#else
	int __kernel_rem_pio2f(x,y,e0,nx,prec,ipio2) 	
	float x[], y[]; int e0,nx,prec; __int32_t ipio2[];
#endif
{
 8001bec:	910c      	str	r1, [sp, #48]	; 0x30
	jk = init_jk[prec];
	jp = jk;

    /* determine jx,jv,q0, note that 3>q0 */
	jx =  nx-1;
	jv = (e0-3)/8; if(jv<0) jv=0;
 8001bee:	17d9      	asrs	r1, r3, #31
 8001bf0:	0f49      	lsrs	r1, r1, #29
    /* initialize jk*/
	jk = init_jk[prec];
	jp = jk;

    /* determine jx,jv,q0, note that 3>q0 */
	jx =  nx-1;
 8001bf2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
	jv = (e0-3)/8; if(jv<0) jv=0;
 8001bf4:	18cb      	adds	r3, r1, r3
 8001bf6:	10db      	asrs	r3, r3, #3
 8001bf8:	930e      	str	r3, [sp, #56]	; 0x38
    /* initialize jk*/
	jk = init_jk[prec];
	jp = jk;

    /* determine jx,jv,q0, note that 3>q0 */
	jx =  nx-1;
 8001bfa:	3d01      	subs	r5, #1
 8001bfc:	9505      	str	r5, [sp, #20]
 8001bfe:	43db      	mvns	r3, r3
 8001c00:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8001c02:	17db      	asrs	r3, r3, #31
 8001c04:	401d      	ands	r5, r3
	int __kernel_rem_pio2f(float *x, float *y, int e0, int nx, int prec, const __int32_t *ipio2) 
#else
	int __kernel_rem_pio2f(x,y,e0,nx,prec,ipio2) 	
	float x[], y[]; int e0,nx,prec; __int32_t ipio2[];
#endif
{
 8001c06:	9006      	str	r0, [sp, #24]
	jx =  nx-1;
	jv = (e0-3)/8; if(jv<0) jv=0;
	q0 =  e0-8*(jv+1);

    /* set up f[0] to f[jx+jk] where f[jx+jk] = ipio2[jv+jk] */
	j = jv-jx; m = jx+jk;
 8001c08:	9805      	ldr	r0, [sp, #20]
	jp = jk;

    /* determine jx,jv,q0, note that 3>q0 */
	jx =  nx-1;
	jv = (e0-3)/8; if(jv<0) jv=0;
	q0 =  e0-8*(jv+1);
 8001c0a:	43eb      	mvns	r3, r5
 8001c0c:	950e      	str	r5, [sp, #56]	; 0x38
 8001c0e:	00db      	lsls	r3, r3, #3

    /* set up f[0] to f[jx+jk] where f[jx+jk] = ipio2[jv+jk] */
	j = jv-jx; m = jx+jk;
 8001c10:	1a2c      	subs	r4, r5, r0
	for(i=0;i<=m;i++,j++) f[i] = (j<0)? zero : (float) ipio2[j];
 8001c12:	9d0a      	ldr	r5, [sp, #40]	; 0x28
	jp = jk;

    /* determine jx,jv,q0, note that 3>q0 */
	jx =  nx-1;
	jv = (e0-3)/8; if(jv<0) jv=0;
	q0 =  e0-8*(jv+1);
 8001c14:	189b      	adds	r3, r3, r2
 8001c16:	9308      	str	r3, [sp, #32]

    /* set up f[0] to f[jx+jk] where f[jx+jk] = ipio2[jv+jk] */
	j = jv-jx; m = jx+jk;
	for(i=0;i<=m;i++,j++) f[i] = (j<0)? zero : (float) ipio2[j];
 8001c18:	1947      	adds	r7, r0, r5
 8001c1a:	d416      	bmi.n	8001c4a <__kernel_rem_pio2f+0x7a>
one    = 1.0,
two8   =  2.5600000000e+02, /* 0x43800000 */
twon8  =  3.9062500000e-03; /* 0x3b800000 */

#ifdef __STDC__
	int __kernel_rem_pio2f(float *x, float *y, int e0, int nx, int prec, const __int32_t *ipio2) 
 8001c1c:	986b      	ldr	r0, [sp, #428]	; 0x1ac
 8001c1e:	00a5      	lsls	r5, r4, #2
 8001c20:	19e7      	adds	r7, r4, r7
 8001c22:	ae24      	add	r6, sp, #144	; 0x90
 8001c24:	1945      	adds	r5, r0, r5
 8001c26:	3701      	adds	r7, #1
 8001c28:	e007      	b.n	8001c3a <__kernel_rem_pio2f+0x6a>
	jv = (e0-3)/8; if(jv<0) jv=0;
	q0 =  e0-8*(jv+1);

    /* set up f[0] to f[jx+jk] where f[jx+jk] = ipio2[jv+jk] */
	j = jv-jx; m = jx+jk;
	for(i=0;i<=m;i++,j++) f[i] = (j<0)? zero : (float) ipio2[j];
 8001c2a:	6828      	ldr	r0, [r5, #0]
 8001c2c:	f000 ed3e 	blx	80026ac <__aeabi_i2f>
 8001c30:	3401      	adds	r4, #1
 8001c32:	c601      	stmia	r6!, {r0}
 8001c34:	3504      	adds	r5, #4
 8001c36:	42bc      	cmp	r4, r7
 8001c38:	d007      	beq.n	8001c4a <__kernel_rem_pio2f+0x7a>
 8001c3a:	2c00      	cmp	r4, #0
 8001c3c:	daf5      	bge.n	8001c2a <__kernel_rem_pio2f+0x5a>
 8001c3e:	2000      	movs	r0, #0
 8001c40:	3401      	adds	r4, #1
 8001c42:	c601      	stmia	r6!, {r0}
 8001c44:	3504      	adds	r5, #4
 8001c46:	42bc      	cmp	r4, r7
 8001c48:	d1f7      	bne.n	8001c3a <__kernel_rem_pio2f+0x6a>

    /* compute q[0],q[1],...q[jk] */
	for (i=0;i<=jk;i++) {
 8001c4a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8001c4c:	2d00      	cmp	r5, #0
 8001c4e:	da00      	bge.n	8001c52 <__kernel_rem_pio2f+0x82>
 8001c50:	e2d5      	b.n	80021fe <__kernel_rem_pio2f+0x62e>
one    = 1.0,
two8   =  2.5600000000e+02, /* 0x43800000 */
twon8  =  3.9062500000e-03; /* 0x3b800000 */

#ifdef __STDC__
	int __kernel_rem_pio2f(float *x, float *y, int e0, int nx, int prec, const __int32_t *ipio2) 
 8001c52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001c54:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8001c56:	980d      	ldr	r0, [sp, #52]	; 0x34
 8001c58:	3301      	adds	r3, #1
 8001c5a:	07ad      	lsls	r5, r5, #30
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	469a      	mov	sl, r3
 8001c60:	1a2b      	subs	r3, r5, r0
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	4698      	mov	r8, r3
 8001c66:	a960      	add	r1, sp, #384	; 0x180
 8001c68:	0083      	lsls	r3, r0, #2
 8001c6a:	9504      	str	r5, [sp, #16]
 8001c6c:	18cb      	adds	r3, r1, r3
 8001c6e:	ad4c      	add	r5, sp, #304	; 0x130
 8001c70:	2200      	movs	r2, #0
 8001c72:	3bf4      	subs	r3, #244	; 0xf4
 8001c74:	9509      	str	r5, [sp, #36]	; 0x24
 8001c76:	4691      	mov	r9, r2
 8001c78:	469b      	mov	fp, r3
	j = jv-jx; m = jx+jk;
	for(i=0;i<=m;i++,j++) f[i] = (j<0)? zero : (float) ipio2[j];

    /* compute q[0],q[1],...q[jk] */
	for (i=0;i<=jk;i++) {
	    for(j=0,fw=0.0;j<=jx;j++) fw += x[j]*f[jx+i-j]; q[i] = fw;
 8001c7a:	9d05      	ldr	r5, [sp, #20]
 8001c7c:	2d00      	cmp	r5, #0
 8001c7e:	da00      	bge.n	8001c82 <__kernel_rem_pio2f+0xb2>
 8001c80:	e221      	b.n	80020c6 <__kernel_rem_pio2f+0x4f6>
one    = 1.0,
two8   =  2.5600000000e+02, /* 0x43800000 */
twon8  =  3.9062500000e-03; /* 0x3b800000 */

#ifdef __STDC__
	int __kernel_rem_pio2f(float *x, float *y, int e0, int nx, int prec, const __int32_t *ipio2) 
 8001c82:	465f      	mov	r7, fp
 8001c84:	9e06      	ldr	r6, [sp, #24]
 8001c86:	444f      	add	r7, r9
 8001c88:	2400      	movs	r4, #0
 8001c8a:	2500      	movs	r5, #0
	j = jv-jx; m = jx+jk;
	for(i=0;i<=m;i++,j++) f[i] = (j<0)? zero : (float) ipio2[j];

    /* compute q[0],q[1],...q[jk] */
	for (i=0;i<=jk;i++) {
	    for(j=0,fw=0.0;j<=jx;j++) fw += x[j]*f[jx+i-j]; q[i] = fw;
 8001c8c:	5939      	ldr	r1, [r7, r4]
 8001c8e:	ce01      	ldmia	r6!, {r0}
 8001c90:	f000 ed7a 	blx	8002788 <__aeabi_fmul>
 8001c94:	1c01      	adds	r1, r0, #0
 8001c96:	1c28      	adds	r0, r5, #0
 8001c98:	f000 ec26 	blx	80024e8 <__addsf3>
 8001c9c:	3c04      	subs	r4, #4
 8001c9e:	1c05      	adds	r5, r0, #0
 8001ca0:	4544      	cmp	r4, r8
 8001ca2:	d1f3      	bne.n	8001c8c <__kernel_rem_pio2f+0xbc>
 8001ca4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001ca6:	2204      	movs	r2, #4
 8001ca8:	4649      	mov	r1, r9
 8001caa:	4491      	add	r9, r2
 8001cac:	5045      	str	r5, [r0, r1]
    /* set up f[0] to f[jx+jk] where f[jx+jk] = ipio2[jv+jk] */
	j = jv-jx; m = jx+jk;
	for(i=0;i<=m;i++,j++) f[i] = (j<0)? zero : (float) ipio2[j];

    /* compute q[0],q[1],...q[jk] */
	for (i=0;i<=jk;i++) {
 8001cae:	45d1      	cmp	r9, sl
 8001cb0:	d1e3      	bne.n	8001c7a <__kernel_rem_pio2f+0xaa>
one    = 1.0,
two8   =  2.5600000000e+02, /* 0x43800000 */
twon8  =  3.9062500000e-03; /* 0x3b800000 */

#ifdef __STDC__
	int __kernel_rem_pio2f(float *x, float *y, int e0, int nx, int prec, const __int32_t *ipio2) 
 8001cb2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8001cb4:	00ab      	lsls	r3, r5, #2
 8001cb6:	ad0f      	add	r5, sp, #60	; 0x3c
 8001cb8:	18ed      	adds	r5, r5, r3
 8001cba:	950f      	str	r5, [sp, #60]	; 0x3c
 8001cbc:	980d      	ldr	r0, [sp, #52]	; 0x34
 8001cbe:	9d04      	ldr	r5, [sp, #16]
 8001cc0:	1a2b      	subs	r3, r5, r0
{
	__int32_t jz,jx,jv,jp,jk,carry,n,iq[20],i,j,k,m,q0,ih;
	float z,fw,f[20],fq[20],q[20];

    /* initialize jk*/
	jk = init_jk[prec];
 8001cc2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
one    = 1.0,
two8   =  2.5600000000e+02, /* 0x43800000 */
twon8  =  3.9062500000e-03; /* 0x3b800000 */

#ifdef __STDC__
	int __kernel_rem_pio2f(float *x, float *y, int e0, int nx, int prec, const __int32_t *ipio2) 
 8001cc4:	009b      	lsls	r3, r3, #2
{
	__int32_t jz,jx,jv,jp,jk,carry,n,iq[20],i,j,k,m,q0,ih;
	float z,fw,f[20],fq[20],q[20];

    /* initialize jk*/
	jk = init_jk[prec];
 8001cc6:	9507      	str	r5, [sp, #28]
one    = 1.0,
two8   =  2.5600000000e+02, /* 0x43800000 */
twon8  =  3.9062500000e-03; /* 0x3b800000 */

#ifdef __STDC__
	int __kernel_rem_pio2f(float *x, float *y, int e0, int nx, int prec, const __int32_t *ipio2) 
 8001cc8:	469b      	mov	fp, r3
	}

	jz = jk;
recompute:
    /* distill q[] into iq[] reversingly */
	for(i=0,j=jz,z=q[jz];j>0;i++,j--) {
 8001cca:	9d07      	ldr	r5, [sp, #28]
 8001ccc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001cce:	00ad      	lsls	r5, r5, #2
 8001cd0:	46a9      	mov	r9, r5
 8001cd2:	5944      	ldr	r4, [r0, r5]
 8001cd4:	9d07      	ldr	r5, [sp, #28]
 8001cd6:	2d00      	cmp	r5, #0
 8001cd8:	dd22      	ble.n	8001d20 <__kernel_rem_pio2f+0x150>
 8001cda:	ae10      	add	r6, sp, #64	; 0x40
	    fw    =  (float)((__int32_t)(twon8* z));
	    iq[i] =  (__int32_t)(z-two8*fw);
	    z     =  q[j-1]+fw;
 8001cdc:	3d01      	subs	r5, #1
one    = 1.0,
two8   =  2.5600000000e+02, /* 0x43800000 */
twon8  =  3.9062500000e-03; /* 0x3b800000 */

#ifdef __STDC__
	int __kernel_rem_pio2f(float *x, float *y, int e0, int nx, int prec, const __int32_t *ipio2) 
 8001cde:	00ad      	lsls	r5, r5, #2
 8001ce0:	46b0      	mov	r8, r6
 8001ce2:	1945      	adds	r5, r0, r5
 8001ce4:	44c8      	add	r8, r9

	jz = jk;
recompute:
    /* distill q[] into iq[] reversingly */
	for(i=0,j=jz,z=q[jz];j>0;i++,j--) {
	    fw    =  (float)((__int32_t)(twon8* z));
 8001ce6:	21ee      	movs	r1, #238	; 0xee
 8001ce8:	0589      	lsls	r1, r1, #22
 8001cea:	1c20      	adds	r0, r4, #0
 8001cec:	f000 ed4c 	blx	8002788 <__aeabi_fmul>
 8001cf0:	f000 ef50 	blx	8002b94 <__aeabi_f2iz>
 8001cf4:	f000 ecda 	blx	80026ac <__aeabi_i2f>
	    iq[i] =  (__int32_t)(z-two8*fw);
 8001cf8:	2187      	movs	r1, #135	; 0x87
 8001cfa:	05c9      	lsls	r1, r1, #23

	jz = jk;
recompute:
    /* distill q[] into iq[] reversingly */
	for(i=0,j=jz,z=q[jz];j>0;i++,j--) {
	    fw    =  (float)((__int32_t)(twon8* z));
 8001cfc:	1c07      	adds	r7, r0, #0
	    iq[i] =  (__int32_t)(z-two8*fw);
 8001cfe:	f000 ed44 	blx	8002788 <__aeabi_fmul>
 8001d02:	1c01      	adds	r1, r0, #0
 8001d04:	1c20      	adds	r0, r4, #0
 8001d06:	f000 ebee 	blx	80024e4 <__aeabi_fsub>
 8001d0a:	f000 ef44 	blx	8002b94 <__aeabi_f2iz>
	    z     =  q[j-1]+fw;
 8001d0e:	6829      	ldr	r1, [r5, #0]
	jz = jk;
recompute:
    /* distill q[] into iq[] reversingly */
	for(i=0,j=jz,z=q[jz];j>0;i++,j--) {
	    fw    =  (float)((__int32_t)(twon8* z));
	    iq[i] =  (__int32_t)(z-two8*fw);
 8001d10:	c601      	stmia	r6!, {r0}
	    z     =  q[j-1]+fw;
 8001d12:	1c38      	adds	r0, r7, #0
 8001d14:	f000 ebe8 	blx	80024e8 <__addsf3>
 8001d18:	3d04      	subs	r5, #4
 8001d1a:	1c04      	adds	r4, r0, #0
	}

	jz = jk;
recompute:
    /* distill q[] into iq[] reversingly */
	for(i=0,j=jz,z=q[jz];j>0;i++,j--) {
 8001d1c:	4546      	cmp	r6, r8
 8001d1e:	d1e2      	bne.n	8001ce6 <__kernel_rem_pio2f+0x116>
	    iq[i] =  (__int32_t)(z-two8*fw);
	    z     =  q[j-1]+fw;
	}

    /* compute n */
	z  = scalbnf(z,(int)q0);	/* actual value of z */
 8001d20:	1c20      	adds	r0, r4, #0
 8001d22:	9908      	ldr	r1, [sp, #32]
 8001d24:	f000 fb70 	bl	8002408 <scalbnf>
	z -= (float)8.0*floorf(z*(float)0.125);	/* trim off integer >= 8 */
 8001d28:	21f8      	movs	r1, #248	; 0xf8
 8001d2a:	0589      	lsls	r1, r1, #22
	    iq[i] =  (__int32_t)(z-two8*fw);
	    z     =  q[j-1]+fw;
	}

    /* compute n */
	z  = scalbnf(z,(int)q0);	/* actual value of z */
 8001d2c:	1c04      	adds	r4, r0, #0
	z -= (float)8.0*floorf(z*(float)0.125);	/* trim off integer >= 8 */
 8001d2e:	f000 ed2c 	blx	8002788 <__aeabi_fmul>
 8001d32:	f000 fb21 	bl	8002378 <floorf>
 8001d36:	2182      	movs	r1, #130	; 0x82
 8001d38:	05c9      	lsls	r1, r1, #23
 8001d3a:	f000 ed26 	blx	8002788 <__aeabi_fmul>
 8001d3e:	1c01      	adds	r1, r0, #0
 8001d40:	1c20      	adds	r0, r4, #0
 8001d42:	f000 ebd0 	blx	80024e4 <__aeabi_fsub>
 8001d46:	1c04      	adds	r4, r0, #0
	n  = (__int32_t) z;
 8001d48:	f000 ef24 	blx	8002b94 <__aeabi_f2iz>
 8001d4c:	1c06      	adds	r6, r0, #0
	z -= (float)n;
 8001d4e:	f000 ecae 	blx	80026ac <__aeabi_i2f>
 8001d52:	1c01      	adds	r1, r0, #0
 8001d54:	1c20      	adds	r0, r4, #0
 8001d56:	f000 ebc6 	blx	80024e4 <__aeabi_fsub>
	ih = 0;
	if(q0>0) {	/* need iq[jz-1] to determine n */
 8001d5a:	9908      	ldr	r1, [sp, #32]

    /* compute n */
	z  = scalbnf(z,(int)q0);	/* actual value of z */
	z -= (float)8.0*floorf(z*(float)0.125);	/* trim off integer >= 8 */
	n  = (__int32_t) z;
	z -= (float)n;
 8001d5c:	1c05      	adds	r5, r0, #0
	ih = 0;
	if(q0>0) {	/* need iq[jz-1] to determine n */
 8001d5e:	2900      	cmp	r1, #0
 8001d60:	dc00      	bgt.n	8001d64 <__kernel_rem_pio2f+0x194>
 8001d62:	e192      	b.n	800208a <__kernel_rem_pio2f+0x4ba>
	    i  = (iq[jz-1]>>(8-q0)); n += i;
 8001d64:	9a07      	ldr	r2, [sp, #28]
 8001d66:	3a01      	subs	r2, #1
 8001d68:	0092      	lsls	r2, r2, #2
 8001d6a:	a810      	add	r0, sp, #64	; 0x40
 8001d6c:	5883      	ldr	r3, [r0, r2]
 8001d6e:	9808      	ldr	r0, [sp, #32]
 8001d70:	2108      	movs	r1, #8
 8001d72:	1a09      	subs	r1, r1, r0
 8001d74:	1c18      	adds	r0, r3, #0
 8001d76:	4108      	asrs	r0, r1
 8001d78:	1836      	adds	r6, r6, r0
	    iq[jz-1] -= i<<(8-q0);
 8001d7a:	4088      	lsls	r0, r1
 8001d7c:	1a1b      	subs	r3, r3, r0
 8001d7e:	a910      	add	r1, sp, #64	; 0x40
 8001d80:	508b      	str	r3, [r1, r2]
	    ih = iq[jz-1]>>(7-q0);
 8001d82:	9a08      	ldr	r2, [sp, #32]
 8001d84:	2707      	movs	r7, #7
 8001d86:	1abf      	subs	r7, r7, r2
 8001d88:	413b      	asrs	r3, r7
 8001d8a:	930b      	str	r3, [sp, #44]	; 0x2c
	} 
	else if(q0==0) ih = iq[jz-1]>>8;
	else if(z>=(float)0.5) ih=2;

	if(ih>0) {	/* q > 0.5 */
 8001d8c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001d8e:	2a00      	cmp	r2, #0
 8001d90:	dd33      	ble.n	8001dfa <__kernel_rem_pio2f+0x22a>
	    n += 1; carry = 0;
	    for(i=0;i<jz ;i++) {	/* compute 1-q */
 8001d92:	9807      	ldr	r0, [sp, #28]
	} 
	else if(q0==0) ih = iq[jz-1]>>8;
	else if(z>=(float)0.5) ih=2;

	if(ih>0) {	/* q > 0.5 */
	    n += 1; carry = 0;
 8001d94:	3601      	adds	r6, #1
	    for(i=0;i<jz ;i++) {	/* compute 1-q */
 8001d96:	2800      	cmp	r0, #0
 8001d98:	dc00      	bgt.n	8001d9c <__kernel_rem_pio2f+0x1cc>
 8001d9a:	e1a5      	b.n	80020e8 <__kernel_rem_pio2f+0x518>
 8001d9c:	ab10      	add	r3, sp, #64	; 0x40
one    = 1.0,
two8   =  2.5600000000e+02, /* 0x43800000 */
twon8  =  3.9062500000e-03; /* 0x3b800000 */

#ifdef __STDC__
	int __kernel_rem_pio2f(float *x, float *y, int e0, int nx, int prec, const __int32_t *ipio2) 
 8001d9e:	1c19      	adds	r1, r3, #0
	    n += 1; carry = 0;
	    for(i=0;i<jz ;i++) {	/* compute 1-q */
		j = iq[i];
		if(carry==0) {
		    if(j!=0) {
			carry = 1; iq[i] = 0x100- j;
 8001da0:	2280      	movs	r2, #128	; 0x80
one    = 1.0,
two8   =  2.5600000000e+02, /* 0x43800000 */
twon8  =  3.9062500000e-03; /* 0x3b800000 */

#ifdef __STDC__
	int __kernel_rem_pio2f(float *x, float *y, int e0, int nx, int prec, const __int32_t *ipio2) 
 8001da2:	4449      	add	r1, r9
	} 
	else if(q0==0) ih = iq[jz-1]>>8;
	else if(z>=(float)0.5) ih=2;

	if(ih>0) {	/* q > 0.5 */
	    n += 1; carry = 0;
 8001da4:	2400      	movs	r4, #0
		j = iq[i];
		if(carry==0) {
		    if(j!=0) {
			carry = 1; iq[i] = 0x100- j;
		    }
		} else  iq[i] = 0xff - j;
 8001da6:	20ff      	movs	r0, #255	; 0xff
	    n += 1; carry = 0;
	    for(i=0;i<jz ;i++) {	/* compute 1-q */
		j = iq[i];
		if(carry==0) {
		    if(j!=0) {
			carry = 1; iq[i] = 0x100- j;
 8001da8:	0057      	lsls	r7, r2, #1
 8001daa:	e007      	b.n	8001dbc <__kernel_rem_pio2f+0x1ec>
	if(ih>0) {	/* q > 0.5 */
	    n += 1; carry = 0;
	    for(i=0;i<jz ;i++) {	/* compute 1-q */
		j = iq[i];
		if(carry==0) {
		    if(j!=0) {
 8001dac:	2a00      	cmp	r2, #0
 8001dae:	d002      	beq.n	8001db6 <__kernel_rem_pio2f+0x1e6>
			carry = 1; iq[i] = 0x100- j;
 8001db0:	1aba      	subs	r2, r7, r2
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	2401      	movs	r4, #1
 8001db6:	3304      	adds	r3, #4
	else if(q0==0) ih = iq[jz-1]>>8;
	else if(z>=(float)0.5) ih=2;

	if(ih>0) {	/* q > 0.5 */
	    n += 1; carry = 0;
	    for(i=0;i<jz ;i++) {	/* compute 1-q */
 8001db8:	428b      	cmp	r3, r1
 8001dba:	d008      	beq.n	8001dce <__kernel_rem_pio2f+0x1fe>
		j = iq[i];
 8001dbc:	681a      	ldr	r2, [r3, #0]
		if(carry==0) {
 8001dbe:	2c00      	cmp	r4, #0
 8001dc0:	d0f4      	beq.n	8001dac <__kernel_rem_pio2f+0x1dc>
		    if(j!=0) {
			carry = 1; iq[i] = 0x100- j;
		    }
		} else  iq[i] = 0xff - j;
 8001dc2:	1a82      	subs	r2, r0, r2
 8001dc4:	601a      	str	r2, [r3, #0]
 8001dc6:	3304      	adds	r3, #4
 8001dc8:	2401      	movs	r4, #1
	else if(q0==0) ih = iq[jz-1]>>8;
	else if(z>=(float)0.5) ih=2;

	if(ih>0) {	/* q > 0.5 */
	    n += 1; carry = 0;
	    for(i=0;i<jz ;i++) {	/* compute 1-q */
 8001dca:	428b      	cmp	r3, r1
 8001dcc:	d1f6      	bne.n	8001dbc <__kernel_rem_pio2f+0x1ec>
		    if(j!=0) {
			carry = 1; iq[i] = 0x100- j;
		    }
		} else  iq[i] = 0xff - j;
	    }
	    if(q0>0) {		/* rare case: chance is 1 in 12 */
 8001dce:	9b08      	ldr	r3, [sp, #32]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	dd0f      	ble.n	8001df4 <__kernel_rem_pio2f+0x224>
	        switch(q0) {
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d100      	bne.n	8001dda <__kernel_rem_pio2f+0x20a>
 8001dd8:	e162      	b.n	80020a0 <__kernel_rem_pio2f+0x4d0>
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d10a      	bne.n	8001df4 <__kernel_rem_pio2f+0x224>
	        case 1:
	    	   iq[jz-1] &= 0x7f; break;
	    	case 2:
	    	   iq[jz-1] &= 0x3f; break;
 8001dde:	9b07      	ldr	r3, [sp, #28]
 8001de0:	3b01      	subs	r3, #1
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	aa10      	add	r2, sp, #64	; 0x40
 8001de6:	58d2      	ldr	r2, [r2, r3]
 8001de8:	9202      	str	r2, [sp, #8]
 8001dea:	9802      	ldr	r0, [sp, #8]
 8001dec:	223f      	movs	r2, #63	; 0x3f
 8001dee:	4002      	ands	r2, r0
 8001df0:	a910      	add	r1, sp, #64	; 0x40
 8001df2:	50ca      	str	r2, [r1, r3]
	        }
	    }
	    if(ih==2) {
 8001df4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001df6:	2a02      	cmp	r2, #2
 8001df8:	d074      	beq.n	8001ee4 <__kernel_rem_pio2f+0x314>
		if(carry!=0) z -= scalbnf(one,(int)q0);
	    }
	}

    /* check if recomputation is needed */
	if(z==zero) {
 8001dfa:	1c28      	adds	r0, r5, #0
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	f000 ee8e 	blx	8002b1c <__aeabi_fcmpeq>
 8001e02:	2800      	cmp	r0, #0
 8001e04:	d100      	bne.n	8001e08 <__kernel_rem_pio2f+0x238>
 8001e06:	e087      	b.n	8001f18 <__kernel_rem_pio2f+0x348>
	    j = 0;
	    for (i=jz-1;i>=jk;i--) j |= iq[i];
 8001e08:	9907      	ldr	r1, [sp, #28]
 8001e0a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8001e0c:	3901      	subs	r1, #1
 8001e0e:	428d      	cmp	r5, r1
 8001e10:	dc0c      	bgt.n	8001e2c <__kernel_rem_pio2f+0x25c>
one    = 1.0,
two8   =  2.5600000000e+02, /* 0x43800000 */
twon8  =  3.9062500000e-03; /* 0x3b800000 */

#ifdef __STDC__
	int __kernel_rem_pio2f(float *x, float *y, int e0, int nx, int prec, const __int32_t *ipio2) 
 8001e12:	aa10      	add	r2, sp, #64	; 0x40
 8001e14:	0088      	lsls	r0, r1, #2
	    }
	}

    /* check if recomputation is needed */
	if(z==zero) {
	    j = 0;
 8001e16:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
one    = 1.0,
two8   =  2.5600000000e+02, /* 0x43800000 */
twon8  =  3.9062500000e-03; /* 0x3b800000 */

#ifdef __STDC__
	int __kernel_rem_pio2f(float *x, float *y, int e0, int nx, int prec, const __int32_t *ipio2) 
 8001e18:	1813      	adds	r3, r2, r0
	    }
	}

    /* check if recomputation is needed */
	if(z==zero) {
	    j = 0;
 8001e1a:	2200      	movs	r2, #0
	    for (i=jz-1;i>=jk;i--) j |= iq[i];
 8001e1c:	681d      	ldr	r5, [r3, #0]
 8001e1e:	3b04      	subs	r3, #4
 8001e20:	432a      	orrs	r2, r5
 8001e22:	42a3      	cmp	r3, r4
 8001e24:	d1fa      	bne.n	8001e1c <__kernel_rem_pio2f+0x24c>
	    if(j==0) { /* need recomputation */
 8001e26:	2a00      	cmp	r2, #0
 8001e28:	d000      	beq.n	8001e2c <__kernel_rem_pio2f+0x25c>
 8001e2a:	e1cf      	b.n	80021cc <__kernel_rem_pio2f+0x5fc>
		for(k=1;iq[jk-k]==0;k++);   /* k = no. of terms needed */
 8001e2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001e2e:	3b01      	subs	r3, #1
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	a810      	add	r0, sp, #64	; 0x40
 8001e34:	58c3      	ldr	r3, [r0, r3]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d000      	beq.n	8001e3c <__kernel_rem_pio2f+0x26c>
 8001e3a:	e1de      	b.n	80021fa <__kernel_rem_pio2f+0x62a>
 8001e3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001e3e:	3b02      	subs	r3, #2
one    = 1.0,
two8   =  2.5600000000e+02, /* 0x43800000 */
twon8  =  3.9062500000e-03; /* 0x3b800000 */

#ifdef __STDC__
	int __kernel_rem_pio2f(float *x, float *y, int e0, int nx, int prec, const __int32_t *ipio2) 
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	18c3      	adds	r3, r0, r3
 8001e44:	2201      	movs	r2, #1
 8001e46:	3b04      	subs	r3, #4
    /* check if recomputation is needed */
	if(z==zero) {
	    j = 0;
	    for (i=jz-1;i>=jk;i--) j |= iq[i];
	    if(j==0) { /* need recomputation */
		for(k=1;iq[jk-k]==0;k++);   /* k = no. of terms needed */
 8001e48:	6859      	ldr	r1, [r3, #4]
 8001e4a:	3201      	adds	r2, #1
 8001e4c:	2900      	cmp	r1, #0
 8001e4e:	d0fa      	beq.n	8001e46 <__kernel_rem_pio2f+0x276>

		for(i=jz+1;i<=jz+k;i++) {   /* add q[jz+1] to q[jz+k] */
 8001e50:	9b07      	ldr	r3, [sp, #28]
 8001e52:	9d07      	ldr	r5, [sp, #28]
 8001e54:	3301      	adds	r3, #1
 8001e56:	18ad      	adds	r5, r5, r2
 8001e58:	9507      	str	r5, [sp, #28]
 8001e5a:	42ab      	cmp	r3, r5
 8001e5c:	dd00      	ble.n	8001e60 <__kernel_rem_pio2f+0x290>
 8001e5e:	e734      	b.n	8001cca <__kernel_rem_pio2f+0xfa>
one    = 1.0,
two8   =  2.5600000000e+02, /* 0x43800000 */
twon8  =  3.9062500000e-03; /* 0x3b800000 */

#ifdef __STDC__
	int __kernel_rem_pio2f(float *x, float *y, int e0, int nx, int prec, const __int32_t *ipio2) 
 8001e60:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8001e62:	195a      	adds	r2, r3, r5
 8001e64:	9d6b      	ldr	r5, [sp, #428]	; 0x1ac
 8001e66:	0092      	lsls	r2, r2, #2
 8001e68:	18ad      	adds	r5, r5, r2
 8001e6a:	46aa      	mov	sl, r5
	    for (i=jz-1;i>=jk;i--) j |= iq[i];
	    if(j==0) { /* need recomputation */
		for(k=1;iq[jk-k]==0;k++);   /* k = no. of terms needed */

		for(i=jz+1;i<=jz+k;i++) {   /* add q[jz+1] to q[jz+k] */
		    f[jx+i] = (float) ipio2[jv+i];
 8001e6c:	9d05      	ldr	r5, [sp, #20]
 8001e6e:	18ef      	adds	r7, r5, r3
one    = 1.0,
two8   =  2.5600000000e+02, /* 0x43800000 */
twon8  =  3.9062500000e-03; /* 0x3b800000 */

#ifdef __STDC__
	int __kernel_rem_pio2f(float *x, float *y, int e0, int nx, int prec, const __int32_t *ipio2) 
 8001e70:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	18ed      	adds	r5, r5, r3
 8001e76:	a824      	add	r0, sp, #144	; 0x90
 8001e78:	00bf      	lsls	r7, r7, #2
 8001e7a:	19c7      	adds	r7, r0, r7
 8001e7c:	46a9      	mov	r9, r5
 8001e7e:	9807      	ldr	r0, [sp, #28]
 8001e80:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8001e82:	182b      	adds	r3, r5, r0
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	ad24      	add	r5, sp, #144	; 0x90
 8001e88:	195d      	adds	r5, r3, r5
 8001e8a:	9504      	str	r5, [sp, #16]
	    for (i=jz-1;i>=jk;i--) j |= iq[i];
	    if(j==0) { /* need recomputation */
		for(k=1;iq[jk-k]==0;k++);   /* k = no. of terms needed */

		for(i=jz+1;i<=jz+k;i++) {   /* add q[jz+1] to q[jz+k] */
		    f[jx+i] = (float) ipio2[jv+i];
 8001e8c:	4651      	mov	r1, sl
 8001e8e:	3104      	adds	r1, #4
 8001e90:	468a      	mov	sl, r1
 8001e92:	3904      	subs	r1, #4
 8001e94:	c901      	ldmia	r1!, {r0}
 8001e96:	f000 ec0a 	blx	80026ac <__aeabi_i2f>
 8001e9a:	1c3a      	adds	r2, r7, #0
 8001e9c:	3204      	adds	r2, #4
		    for(j=0,fw=0.0;j<=jx;j++) fw += x[j]*f[jx+i-j];
 8001e9e:	9d05      	ldr	r5, [sp, #20]
	    for (i=jz-1;i>=jk;i--) j |= iq[i];
	    if(j==0) { /* need recomputation */
		for(k=1;iq[jk-k]==0;k++);   /* k = no. of terms needed */

		for(i=jz+1;i<=jz+k;i++) {   /* add q[jz+1] to q[jz+k] */
		    f[jx+i] = (float) ipio2[jv+i];
 8001ea0:	4690      	mov	r8, r2
 8001ea2:	3a04      	subs	r2, #4
 8001ea4:	c201      	stmia	r2!, {r0}
		    for(j=0,fw=0.0;j<=jx;j++) fw += x[j]*f[jx+i-j];
 8001ea6:	2d00      	cmp	r5, #0
 8001ea8:	db18      	blt.n	8001edc <__kernel_rem_pio2f+0x30c>
 8001eaa:	9e06      	ldr	r6, [sp, #24]
 8001eac:	2400      	movs	r4, #0
 8001eae:	2500      	movs	r5, #0
 8001eb0:	5939      	ldr	r1, [r7, r4]
 8001eb2:	ce01      	ldmia	r6!, {r0}
 8001eb4:	f000 ec68 	blx	8002788 <__aeabi_fmul>
 8001eb8:	1c01      	adds	r1, r0, #0
 8001eba:	1c28      	adds	r0, r5, #0
 8001ebc:	f000 eb14 	blx	80024e8 <__addsf3>
 8001ec0:	3c04      	subs	r4, #4
 8001ec2:	1c05      	adds	r5, r0, #0
 8001ec4:	455c      	cmp	r4, fp
 8001ec6:	d1f3      	bne.n	8001eb0 <__kernel_rem_pio2f+0x2e0>
		    q[i] = fw;
 8001ec8:	4648      	mov	r0, r9
 8001eca:	3004      	adds	r0, #4
 8001ecc:	4681      	mov	r9, r0
 8001ece:	3804      	subs	r0, #4
 8001ed0:	c020      	stmia	r0!, {r5}
	    j = 0;
	    for (i=jz-1;i>=jk;i--) j |= iq[i];
	    if(j==0) { /* need recomputation */
		for(k=1;iq[jk-k]==0;k++);   /* k = no. of terms needed */

		for(i=jz+1;i<=jz+k;i++) {   /* add q[jz+1] to q[jz+k] */
 8001ed2:	9d04      	ldr	r5, [sp, #16]
 8001ed4:	4647      	mov	r7, r8
 8001ed6:	42af      	cmp	r7, r5
 8001ed8:	d1d8      	bne.n	8001e8c <__kernel_rem_pio2f+0x2bc>
 8001eda:	e6f6      	b.n	8001cca <__kernel_rem_pio2f+0xfa>
		    f[jx+i] = (float) ipio2[jv+i];
		    for(j=0,fw=0.0;j<=jx;j++) fw += x[j]*f[jx+i-j];
 8001edc:	2500      	movs	r5, #0
 8001ede:	e7f3      	b.n	8001ec8 <__kernel_rem_pio2f+0x2f8>
 8001ee0:	08003250 	.word	0x08003250
	    	case 2:
	    	   iq[jz-1] &= 0x3f; break;
	        }
	    }
	    if(ih==2) {
		z = one - z;
 8001ee4:	20fe      	movs	r0, #254	; 0xfe
 8001ee6:	1c29      	adds	r1, r5, #0
 8001ee8:	0580      	lsls	r0, r0, #22
 8001eea:	f000 eafc 	blx	80024e4 <__aeabi_fsub>
 8001eee:	1c05      	adds	r5, r0, #0
		if(carry!=0) z -= scalbnf(one,(int)q0);
 8001ef0:	2c00      	cmp	r4, #0
 8001ef2:	d100      	bne.n	8001ef6 <__kernel_rem_pio2f+0x326>
 8001ef4:	e781      	b.n	8001dfa <__kernel_rem_pio2f+0x22a>
 8001ef6:	20fe      	movs	r0, #254	; 0xfe
 8001ef8:	9908      	ldr	r1, [sp, #32]
 8001efa:	0580      	lsls	r0, r0, #22
 8001efc:	f000 fa84 	bl	8002408 <scalbnf>
 8001f00:	1c01      	adds	r1, r0, #0
 8001f02:	1c28      	adds	r0, r5, #0
 8001f04:	f000 eaee 	blx	80024e4 <__aeabi_fsub>
 8001f08:	1c05      	adds	r5, r0, #0
	    }
	}

    /* check if recomputation is needed */
	if(z==zero) {
 8001f0a:	1c28      	adds	r0, r5, #0
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	f000 ee06 	blx	8002b1c <__aeabi_fcmpeq>
 8001f12:	2800      	cmp	r0, #0
 8001f14:	d000      	beq.n	8001f18 <__kernel_rem_pio2f+0x348>
 8001f16:	e777      	b.n	8001e08 <__kernel_rem_pio2f+0x238>
    /* chop off zero terms */
	if(z==(float)0.0) {
	    jz -= 1; q0 -= 8;
	    while(iq[jz]==0) { jz--; q0-=8;}
	} else { /* break z into 8-bit if necessary */
	    z = scalbnf(z,-(int)q0);
 8001f18:	9b08      	ldr	r3, [sp, #32]
 8001f1a:	1c28      	adds	r0, r5, #0
 8001f1c:	4259      	negs	r1, r3
 8001f1e:	9605      	str	r6, [sp, #20]
 8001f20:	f000 fa72 	bl	8002408 <scalbnf>
	    if(z>=two8) { 
 8001f24:	2187      	movs	r1, #135	; 0x87
 8001f26:	05c9      	lsls	r1, r1, #23
    /* chop off zero terms */
	if(z==(float)0.0) {
	    jz -= 1; q0 -= 8;
	    while(iq[jz]==0) { jz--; q0-=8;}
	} else { /* break z into 8-bit if necessary */
	    z = scalbnf(z,-(int)q0);
 8001f28:	1c04      	adds	r4, r0, #0
	    if(z>=two8) { 
 8001f2a:	f000 ee1c 	blx	8002b64 <__aeabi_fcmpge>
 8001f2e:	2800      	cmp	r0, #0
 8001f30:	d100      	bne.n	8001f34 <__kernel_rem_pio2f+0x364>
 8001f32:	e16a      	b.n	800220a <__kernel_rem_pio2f+0x63a>
		fw = (float)((__int32_t)(twon8*z));
 8001f34:	21ee      	movs	r1, #238	; 0xee
 8001f36:	0589      	lsls	r1, r1, #22
 8001f38:	1c20      	adds	r0, r4, #0
 8001f3a:	f000 ec26 	blx	8002788 <__aeabi_fmul>
 8001f3e:	f000 ee2a 	blx	8002b94 <__aeabi_f2iz>
 8001f42:	f000 ebb4 	blx	80026ac <__aeabi_i2f>
		iq[jz] = (__int32_t)(z-two8*fw);
 8001f46:	2187      	movs	r1, #135	; 0x87
 8001f48:	05c9      	lsls	r1, r1, #23
	    jz -= 1; q0 -= 8;
	    while(iq[jz]==0) { jz--; q0-=8;}
	} else { /* break z into 8-bit if necessary */
	    z = scalbnf(z,-(int)q0);
	    if(z>=two8) { 
		fw = (float)((__int32_t)(twon8*z));
 8001f4a:	1c05      	adds	r5, r0, #0
		iq[jz] = (__int32_t)(z-two8*fw);
 8001f4c:	f000 ec1c 	blx	8002788 <__aeabi_fmul>
 8001f50:	1c01      	adds	r1, r0, #0
 8001f52:	1c20      	adds	r0, r4, #0
 8001f54:	f000 eac6 	blx	80024e4 <__aeabi_fsub>
 8001f58:	f000 ee1c 	blx	8002b94 <__aeabi_f2iz>
 8001f5c:	a910      	add	r1, sp, #64	; 0x40
 8001f5e:	464a      	mov	r2, r9
 8001f60:	5088      	str	r0, [r1, r2]
		jz += 1; q0 += 8;
 8001f62:	9808      	ldr	r0, [sp, #32]
 8001f64:	9b07      	ldr	r3, [sp, #28]
 8001f66:	3008      	adds	r0, #8
 8001f68:	3301      	adds	r3, #1
 8001f6a:	9008      	str	r0, [sp, #32]
		iq[jz] = (__int32_t) fw;
 8001f6c:	1c28      	adds	r0, r5, #0
 8001f6e:	009c      	lsls	r4, r3, #2
	} else { /* break z into 8-bit if necessary */
	    z = scalbnf(z,-(int)q0);
	    if(z>=two8) { 
		fw = (float)((__int32_t)(twon8*z));
		iq[jz] = (__int32_t)(z-two8*fw);
		jz += 1; q0 += 8;
 8001f70:	9307      	str	r3, [sp, #28]
		iq[jz] = (__int32_t) fw;
 8001f72:	f000 ee10 	blx	8002b94 <__aeabi_f2iz>
 8001f76:	a910      	add	r1, sp, #64	; 0x40
 8001f78:	5108      	str	r0, [r1, r4]
	    } else iq[jz] = (__int32_t) z ;
	}

    /* convert integer "bit" chunk to floating-point value */
	fw = scalbnf(one,(int)q0);
 8001f7a:	20fe      	movs	r0, #254	; 0xfe
 8001f7c:	0580      	lsls	r0, r0, #22
 8001f7e:	9908      	ldr	r1, [sp, #32]
 8001f80:	f000 fa42 	bl	8002408 <scalbnf>
 8001f84:	1c05      	adds	r5, r0, #0
	for(i=jz;i>=0;i--) {
 8001f86:	9807      	ldr	r0, [sp, #28]
 8001f88:	2800      	cmp	r0, #0
 8001f8a:	db46      	blt.n	800201a <__kernel_rem_pio2f+0x44a>
one    = 1.0,
two8   =  2.5600000000e+02, /* 0x43800000 */
twon8  =  3.9062500000e-03; /* 0x3b800000 */

#ifdef __STDC__
	int __kernel_rem_pio2f(float *x, float *y, int e0, int nx, int prec, const __int32_t *ipio2) 
 8001f8c:	0083      	lsls	r3, r0, #2
 8001f8e:	425b      	negs	r3, r3
 8001f90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001f92:	0086      	lsls	r6, r0, #2
 8001f94:	3b04      	subs	r3, #4
 8001f96:	a910      	add	r1, sp, #64	; 0x40
 8001f98:	198f      	adds	r7, r1, r6
 8001f9a:	4698      	mov	r8, r3
 8001f9c:	1996      	adds	r6, r2, r6
 8001f9e:	2400      	movs	r4, #0
	}

    /* convert integer "bit" chunk to floating-point value */
	fw = scalbnf(one,(int)q0);
	for(i=jz;i>=0;i--) {
	    q[i] = fw*(float)iq[i]; fw*=twon8;
 8001fa0:	5938      	ldr	r0, [r7, r4]
 8001fa2:	f000 eb84 	blx	80026ac <__aeabi_i2f>
 8001fa6:	1c29      	adds	r1, r5, #0
 8001fa8:	f000 ebee 	blx	8002788 <__aeabi_fmul>
 8001fac:	21ee      	movs	r1, #238	; 0xee
 8001fae:	5130      	str	r0, [r6, r4]
 8001fb0:	0589      	lsls	r1, r1, #22
 8001fb2:	1c28      	adds	r0, r5, #0
 8001fb4:	f000 ebe8 	blx	8002788 <__aeabi_fmul>
 8001fb8:	3c04      	subs	r4, #4
 8001fba:	1c05      	adds	r5, r0, #0
	    } else iq[jz] = (__int32_t) z ;
	}

    /* convert integer "bit" chunk to floating-point value */
	fw = scalbnf(one,(int)q0);
	for(i=jz;i>=0;i--) {
 8001fbc:	4544      	cmp	r4, r8
 8001fbe:	d1ef      	bne.n	8001fa0 <__kernel_rem_pio2f+0x3d0>
 8001fc0:	9b07      	ldr	r3, [sp, #28]
 8001fc2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8001fc4:	2400      	movs	r4, #0
 8001fc6:	ad38      	add	r5, sp, #224	; 0xe0
 8001fc8:	469a      	mov	sl, r3
 8001fca:	46ab      	mov	fp, r5
 8001fcc:	4681      	mov	r9, r0
 8001fce:	46a0      	mov	r8, r4
	    q[i] = fw*(float)iq[i]; fw*=twon8;
	}

    /* compute PIo2[0,...,jp]*q[jz,...,0] */
	for(i=jz;i>=0;i--) {
	    for(fw=0.0,k=0;k<=jp&&k<=jz-i;k++) fw += PIo2[k]*q[i+k];
 8001fd0:	4648      	mov	r0, r9
 8001fd2:	2600      	movs	r6, #0
 8001fd4:	2800      	cmp	r0, #0
 8001fd6:	db16      	blt.n	8002006 <__kernel_rem_pio2f+0x436>
one    = 1.0,
two8   =  2.5600000000e+02, /* 0x43800000 */
twon8  =  3.9062500000e-03; /* 0x3b800000 */

#ifdef __STDC__
	int __kernel_rem_pio2f(float *x, float *y, int e0, int nx, int prec, const __int32_t *ipio2) 
 8001fd8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8001fda:	4ca5      	ldr	r4, [pc, #660]	; (8002270 <__kernel_rem_pio2f+0x6a0>)
 8001fdc:	4651      	mov	r1, sl
 8001fde:	008f      	lsls	r7, r1, #2
 8001fe0:	19ef      	adds	r7, r5, r7
 8001fe2:	340c      	adds	r4, #12
 8001fe4:	2600      	movs	r6, #0
 8001fe6:	2500      	movs	r5, #0
 8001fe8:	e001      	b.n	8001fee <__kernel_rem_pio2f+0x41e>
	    q[i] = fw*(float)iq[i]; fw*=twon8;
	}

    /* compute PIo2[0,...,jp]*q[jz,...,0] */
	for(i=jz;i>=0;i--) {
	    for(fw=0.0,k=0;k<=jp&&k<=jz-i;k++) fw += PIo2[k]*q[i+k];
 8001fea:	4545      	cmp	r5, r8
 8001fec:	dc0b      	bgt.n	8002006 <__kernel_rem_pio2f+0x436>
 8001fee:	cf02      	ldmia	r7!, {r1}
 8001ff0:	cc01      	ldmia	r4!, {r0}
 8001ff2:	f000 ebca 	blx	8002788 <__aeabi_fmul>
 8001ff6:	1c01      	adds	r1, r0, #0
 8001ff8:	1c30      	adds	r0, r6, #0
 8001ffa:	f000 ea76 	blx	80024e8 <__addsf3>
 8001ffe:	3501      	adds	r5, #1
 8002000:	1c06      	adds	r6, r0, #0
 8002002:	45a9      	cmp	r9, r5
 8002004:	daf1      	bge.n	8001fea <__kernel_rem_pio2f+0x41a>
	    fq[jz-i] = fw;
 8002006:	4641      	mov	r1, r8
 8002008:	008b      	lsls	r3, r1, #2
 800200a:	465a      	mov	r2, fp
 800200c:	50d6      	str	r6, [r2, r3]
	for(i=jz;i>=0;i--) {
	    q[i] = fw*(float)iq[i]; fw*=twon8;
	}

    /* compute PIo2[0,...,jp]*q[jz,...,0] */
	for(i=jz;i>=0;i--) {
 800200e:	4655      	mov	r5, sl
 8002010:	2301      	movs	r3, #1
 8002012:	4498      	add	r8, r3
 8002014:	3d01      	subs	r5, #1
 8002016:	46aa      	mov	sl, r5
 8002018:	d2da      	bcs.n	8001fd0 <__kernel_rem_pio2f+0x400>
	    for(fw=0.0,k=0;k<=jp&&k<=jz-i;k++) fw += PIo2[k]*q[i+k];
	    fq[jz-i] = fw;
	}

    /* compress fq[] into y[] */
	switch(prec) {
 800201a:	9d6a      	ldr	r5, [sp, #424]	; 0x1a8
 800201c:	2d02      	cmp	r5, #2
 800201e:	dc65      	bgt.n	80020ec <__kernel_rem_pio2f+0x51c>
 8002020:	2d00      	cmp	r5, #0
 8002022:	dc00      	bgt.n	8002026 <__kernel_rem_pio2f+0x456>
 8002024:	e108      	b.n	8002238 <__kernel_rem_pio2f+0x668>
		y[0] = (ih==0)? fw: -fw; 
		break;
	    case 1:
	    case 2:
		fw = 0.0;
		for (i=jz;i>=0;i--) fw += fq[i]; 
 8002026:	9d07      	ldr	r5, [sp, #28]
 8002028:	2100      	movs	r1, #0
 800202a:	2d00      	cmp	r5, #0
 800202c:	db0d      	blt.n	800204a <__kernel_rem_pio2f+0x47a>
one    = 1.0,
two8   =  2.5600000000e+02, /* 0x43800000 */
twon8  =  3.9062500000e-03; /* 0x3b800000 */

#ifdef __STDC__
	int __kernel_rem_pio2f(float *x, float *y, int e0, int nx, int prec, const __int32_t *ipio2) 
 800202e:	9d07      	ldr	r5, [sp, #28]
 8002030:	a838      	add	r0, sp, #224	; 0xe0
 8002032:	00ac      	lsls	r4, r5, #2
 8002034:	2100      	movs	r1, #0
 8002036:	1904      	adds	r4, r0, r4
 8002038:	ad37      	add	r5, sp, #220	; 0xdc
 800203a:	1c08      	adds	r0, r1, #0
		y[0] = (ih==0)? fw: -fw; 
		break;
	    case 1:
	    case 2:
		fw = 0.0;
		for (i=jz;i>=0;i--) fw += fq[i]; 
 800203c:	6821      	ldr	r1, [r4, #0]
 800203e:	3c04      	subs	r4, #4
 8002040:	f000 ea52 	blx	80024e8 <__addsf3>
 8002044:	42ac      	cmp	r4, r5
 8002046:	d1f9      	bne.n	800203c <__kernel_rem_pio2f+0x46c>
 8002048:	1c01      	adds	r1, r0, #0
		y[0] = (ih==0)? fw: -fw; 
 800204a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800204c:	1c0b      	adds	r3, r1, #0
 800204e:	2d00      	cmp	r5, #0
 8002050:	d002      	beq.n	8002058 <__kernel_rem_pio2f+0x488>
 8002052:	2080      	movs	r0, #128	; 0x80
 8002054:	0600      	lsls	r0, r0, #24
 8002056:	180b      	adds	r3, r1, r0
 8002058:	9d0c      	ldr	r5, [sp, #48]	; 0x30
		fw = fq[0]-fw;
 800205a:	9838      	ldr	r0, [sp, #224]	; 0xe0
		break;
	    case 1:
	    case 2:
		fw = 0.0;
		for (i=jz;i>=0;i--) fw += fq[i]; 
		y[0] = (ih==0)? fw: -fw; 
 800205c:	602b      	str	r3, [r5, #0]
		fw = fq[0]-fw;
 800205e:	f000 ea42 	blx	80024e4 <__aeabi_fsub>
		for (i=1;i<=jz;i++) fw += fq[i];
 8002062:	9d07      	ldr	r5, [sp, #28]
 8002064:	2d00      	cmp	r5, #0
 8002066:	dd07      	ble.n	8002078 <__kernel_rem_pio2f+0x4a8>
 8002068:	ac39      	add	r4, sp, #228	; 0xe4
one    = 1.0,
two8   =  2.5600000000e+02, /* 0x43800000 */
twon8  =  3.9062500000e-03; /* 0x3b800000 */

#ifdef __STDC__
	int __kernel_rem_pio2f(float *x, float *y, int e0, int nx, int prec, const __int32_t *ipio2) 
 800206a:	00ad      	lsls	r5, r5, #2
 800206c:	1965      	adds	r5, r4, r5
	    case 2:
		fw = 0.0;
		for (i=jz;i>=0;i--) fw += fq[i]; 
		y[0] = (ih==0)? fw: -fw; 
		fw = fq[0]-fw;
		for (i=1;i<=jz;i++) fw += fq[i];
 800206e:	cc02      	ldmia	r4!, {r1}
 8002070:	f000 ea3a 	blx	80024e8 <__addsf3>
 8002074:	42ac      	cmp	r4, r5
 8002076:	d1fa      	bne.n	800206e <__kernel_rem_pio2f+0x49e>
		y[1] = (ih==0)? fw: -fw; 
 8002078:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800207a:	2d00      	cmp	r5, #0
 800207c:	d002      	beq.n	8002084 <__kernel_rem_pio2f+0x4b4>
 800207e:	2180      	movs	r1, #128	; 0x80
 8002080:	0609      	lsls	r1, r1, #24
 8002082:	1840      	adds	r0, r0, r1
 8002084:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002086:	6068      	str	r0, [r5, #4]
		break;
 8002088:	e033      	b.n	80020f2 <__kernel_rem_pio2f+0x522>
	if(q0>0) {	/* need iq[jz-1] to determine n */
	    i  = (iq[jz-1]>>(8-q0)); n += i;
	    iq[jz-1] -= i<<(8-q0);
	    ih = iq[jz-1]>>(7-q0);
	} 
	else if(q0==0) ih = iq[jz-1]>>8;
 800208a:	9b08      	ldr	r3, [sp, #32]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d111      	bne.n	80020b4 <__kernel_rem_pio2f+0x4e4>
 8002090:	9b07      	ldr	r3, [sp, #28]
 8002092:	3b01      	subs	r3, #1
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	a810      	add	r0, sp, #64	; 0x40
 8002098:	58c7      	ldr	r7, [r0, r3]
 800209a:	123f      	asrs	r7, r7, #8
 800209c:	970b      	str	r7, [sp, #44]	; 0x2c
 800209e:	e675      	b.n	8001d8c <__kernel_rem_pio2f+0x1bc>
		} else  iq[i] = 0xff - j;
	    }
	    if(q0>0) {		/* rare case: chance is 1 in 12 */
	        switch(q0) {
	        case 1:
	    	   iq[jz-1] &= 0x7f; break;
 80020a0:	9b07      	ldr	r3, [sp, #28]
 80020a2:	3b01      	subs	r3, #1
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	a810      	add	r0, sp, #64	; 0x40
 80020a8:	58c0      	ldr	r0, [r0, r3]
 80020aa:	227f      	movs	r2, #127	; 0x7f
 80020ac:	4002      	ands	r2, r0
 80020ae:	a910      	add	r1, sp, #64	; 0x40
 80020b0:	50ca      	str	r2, [r1, r3]
 80020b2:	e69f      	b.n	8001df4 <__kernel_rem_pio2f+0x224>
	    i  = (iq[jz-1]>>(8-q0)); n += i;
	    iq[jz-1] -= i<<(8-q0);
	    ih = iq[jz-1]>>(7-q0);
	} 
	else if(q0==0) ih = iq[jz-1]>>8;
	else if(z>=(float)0.5) ih=2;
 80020b4:	21fc      	movs	r1, #252	; 0xfc
 80020b6:	0589      	lsls	r1, r1, #22
 80020b8:	f000 ed54 	blx	8002b64 <__aeabi_fcmpge>
 80020bc:	2800      	cmp	r0, #0
 80020be:	d10c      	bne.n	80020da <__kernel_rem_pio2f+0x50a>
    /* compute n */
	z  = scalbnf(z,(int)q0);	/* actual value of z */
	z -= (float)8.0*floorf(z*(float)0.125);	/* trim off integer >= 8 */
	n  = (__int32_t) z;
	z -= (float)n;
	ih = 0;
 80020c0:	2100      	movs	r1, #0
 80020c2:	910b      	str	r1, [sp, #44]	; 0x2c
 80020c4:	e699      	b.n	8001dfa <__kernel_rem_pio2f+0x22a>
	j = jv-jx; m = jx+jk;
	for(i=0;i<=m;i++,j++) f[i] = (j<0)? zero : (float) ipio2[j];

    /* compute q[0],q[1],...q[jk] */
	for (i=0;i<=jk;i++) {
	    for(j=0,fw=0.0;j<=jx;j++) fw += x[j]*f[jx+i-j]; q[i] = fw;
 80020c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80020c8:	2204      	movs	r2, #4
 80020ca:	4649      	mov	r1, r9
 80020cc:	2500      	movs	r5, #0
 80020ce:	4491      	add	r9, r2
 80020d0:	5045      	str	r5, [r0, r1]
    /* set up f[0] to f[jx+jk] where f[jx+jk] = ipio2[jv+jk] */
	j = jv-jx; m = jx+jk;
	for(i=0;i<=m;i++,j++) f[i] = (j<0)? zero : (float) ipio2[j];

    /* compute q[0],q[1],...q[jk] */
	for (i=0;i<=jk;i++) {
 80020d2:	45d1      	cmp	r9, sl
 80020d4:	d000      	beq.n	80020d8 <__kernel_rem_pio2f+0x508>
 80020d6:	e5d0      	b.n	8001c7a <__kernel_rem_pio2f+0xaa>
 80020d8:	e5eb      	b.n	8001cb2 <__kernel_rem_pio2f+0xe2>
	else if(q0==0) ih = iq[jz-1]>>8;
	else if(z>=(float)0.5) ih=2;

	if(ih>0) {	/* q > 0.5 */
	    n += 1; carry = 0;
	    for(i=0;i<jz ;i++) {	/* compute 1-q */
 80020da:	9807      	ldr	r0, [sp, #28]
	    i  = (iq[jz-1]>>(8-q0)); n += i;
	    iq[jz-1] -= i<<(8-q0);
	    ih = iq[jz-1]>>(7-q0);
	} 
	else if(q0==0) ih = iq[jz-1]>>8;
	else if(z>=(float)0.5) ih=2;
 80020dc:	2302      	movs	r3, #2
 80020de:	930b      	str	r3, [sp, #44]	; 0x2c

	if(ih>0) {	/* q > 0.5 */
	    n += 1; carry = 0;
 80020e0:	3601      	adds	r6, #1
	    for(i=0;i<jz ;i++) {	/* compute 1-q */
 80020e2:	2800      	cmp	r0, #0
 80020e4:	dd00      	ble.n	80020e8 <__kernel_rem_pio2f+0x518>
 80020e6:	e659      	b.n	8001d9c <__kernel_rem_pio2f+0x1cc>
	} 
	else if(q0==0) ih = iq[jz-1]>>8;
	else if(z>=(float)0.5) ih=2;

	if(ih>0) {	/* q > 0.5 */
	    n += 1; carry = 0;
 80020e8:	2400      	movs	r4, #0
 80020ea:	e670      	b.n	8001dce <__kernel_rem_pio2f+0x1fe>
	    for(fw=0.0,k=0;k<=jp&&k<=jz-i;k++) fw += PIo2[k]*q[i+k];
	    fq[jz-i] = fw;
	}

    /* compress fq[] into y[] */
	switch(prec) {
 80020ec:	9d6a      	ldr	r5, [sp, #424]	; 0x1a8
 80020ee:	2d03      	cmp	r5, #3
 80020f0:	d00b      	beq.n	800210a <__kernel_rem_pio2f+0x53a>
		    y[0] =  fq[0]; y[1] =  fq[1]; y[2] =  fw;
		} else {
		    y[0] = -fq[0]; y[1] = -fq[1]; y[2] = -fw;
		}
	}
	return n&7;
 80020f2:	9d05      	ldr	r5, [sp, #20]
 80020f4:	2007      	movs	r0, #7
 80020f6:	4028      	ands	r0, r5
}
 80020f8:	b061      	add	sp, #388	; 0x184
 80020fa:	bc3c      	pop	{r2, r3, r4, r5}
 80020fc:	4690      	mov	r8, r2
 80020fe:	4699      	mov	r9, r3
 8002100:	46a2      	mov	sl, r4
 8002102:	46ab      	mov	fp, r5
 8002104:	bcf0      	pop	{r4, r5, r6, r7}
 8002106:	bc02      	pop	{r1}
 8002108:	4708      	bx	r1
		fw = fq[0]-fw;
		for (i=1;i<=jz;i++) fw += fq[i];
		y[1] = (ih==0)? fw: -fw; 
		break;
	    case 3:	/* painful */
		for (i=jz;i>0;i--) {
 800210a:	9d07      	ldr	r5, [sp, #28]
 800210c:	2d00      	cmp	r5, #0
 800210e:	dc00      	bgt.n	8002112 <__kernel_rem_pio2f+0x542>
 8002110:	e08e      	b.n	8002230 <__kernel_rem_pio2f+0x660>
		    fw      = fq[i-1]+fq[i]; 
 8002112:	9e07      	ldr	r6, [sp, #28]
one    = 1.0,
two8   =  2.5600000000e+02, /* 0x43800000 */
twon8  =  3.9062500000e-03; /* 0x3b800000 */

#ifdef __STDC__
	int __kernel_rem_pio2f(float *x, float *y, int e0, int nx, int prec, const __int32_t *ipio2) 
 8002114:	9907      	ldr	r1, [sp, #28]
 8002116:	a838      	add	r0, sp, #224	; 0xe0
		for (i=1;i<=jz;i++) fw += fq[i];
		y[1] = (ih==0)? fw: -fw; 
		break;
	    case 3:	/* painful */
		for (i=jz;i>0;i--) {
		    fw      = fq[i-1]+fq[i]; 
 8002118:	3e01      	subs	r6, #1
one    = 1.0,
two8   =  2.5600000000e+02, /* 0x43800000 */
twon8  =  3.9062500000e-03; /* 0x3b800000 */

#ifdef __STDC__
	int __kernel_rem_pio2f(float *x, float *y, int e0, int nx, int prec, const __int32_t *ipio2) 
 800211a:	4683      	mov	fp, r0
 800211c:	00b6      	lsls	r6, r6, #2
 800211e:	008d      	lsls	r5, r1, #2
 8002120:	aa37      	add	r2, sp, #220	; 0xdc
 8002122:	445e      	add	r6, fp
 8002124:	445d      	add	r5, fp
 8002126:	9204      	str	r2, [sp, #16]
 8002128:	1c37      	adds	r7, r6, #0
 800212a:	46a9      	mov	r9, r5
 800212c:	46b2      	mov	sl, r6
 800212e:	1c2c      	adds	r4, r5, #0
		for (i=1;i<=jz;i++) fw += fq[i];
		y[1] = (ih==0)? fw: -fw; 
		break;
	    case 3:	/* painful */
		for (i=jz;i>0;i--) {
		    fw      = fq[i-1]+fq[i]; 
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	6826      	ldr	r6, [r4, #0]
 8002134:	1c18      	adds	r0, r3, #0
 8002136:	1c31      	adds	r1, r6, #0
 8002138:	4698      	mov	r8, r3
 800213a:	f000 e9d6 	blx	80024e8 <__addsf3>
 800213e:	1c05      	adds	r5, r0, #0
		    fq[i]  += fq[i-1]-fw;
 8002140:	1c29      	adds	r1, r5, #0
 8002142:	4640      	mov	r0, r8
 8002144:	f000 e9ce 	blx	80024e4 <__aeabi_fsub>
 8002148:	1c01      	adds	r1, r0, #0
 800214a:	1c30      	adds	r0, r6, #0
 800214c:	f000 e9cc 	blx	80024e8 <__addsf3>
 8002150:	6020      	str	r0, [r4, #0]
		    fq[i-1] = fw;
 8002152:	603d      	str	r5, [r7, #0]
		fw = fq[0]-fw;
		for (i=1;i<=jz;i++) fw += fq[i];
		y[1] = (ih==0)? fw: -fw; 
		break;
	    case 3:	/* painful */
		for (i=jz;i>0;i--) {
 8002154:	9d04      	ldr	r5, [sp, #16]
 8002156:	3f04      	subs	r7, #4
 8002158:	3c04      	subs	r4, #4
 800215a:	42af      	cmp	r7, r5
 800215c:	d1e8      	bne.n	8002130 <__kernel_rem_pio2f+0x560>
		    fw      = fq[i-1]+fq[i]; 
		    fq[i]  += fq[i-1]-fw;
		    fq[i-1] = fw;
		}
		for (i=jz;i>1;i--) {
 800215e:	9807      	ldr	r0, [sp, #28]
 8002160:	4656      	mov	r6, sl
 8002162:	2801      	cmp	r0, #1
 8002164:	dd62      	ble.n	800222c <__kernel_rem_pio2f+0x65c>
 8002166:	464f      	mov	r7, r9
		    fw      = fq[i-1]+fq[i]; 
 8002168:	6831      	ldr	r1, [r6, #0]
 800216a:	683d      	ldr	r5, [r7, #0]
 800216c:	4688      	mov	r8, r1
 800216e:	1c08      	adds	r0, r1, #0
 8002170:	1c29      	adds	r1, r5, #0
 8002172:	f000 e9ba 	blx	80024e8 <__addsf3>
 8002176:	1c04      	adds	r4, r0, #0
		    fq[i]  += fq[i-1]-fw;
 8002178:	1c21      	adds	r1, r4, #0
 800217a:	4640      	mov	r0, r8
 800217c:	f000 e9b2 	blx	80024e4 <__aeabi_fsub>
 8002180:	1c01      	adds	r1, r0, #0
 8002182:	1c28      	adds	r0, r5, #0
 8002184:	f000 e9b0 	blx	80024e8 <__addsf3>
 8002188:	6038      	str	r0, [r7, #0]
		    fq[i-1] = fw;
 800218a:	6034      	str	r4, [r6, #0]
 800218c:	3e04      	subs	r6, #4
 800218e:	3f04      	subs	r7, #4
		for (i=jz;i>0;i--) {
		    fw      = fq[i-1]+fq[i]; 
		    fq[i]  += fq[i-1]-fw;
		    fq[i-1] = fw;
		}
		for (i=jz;i>1;i--) {
 8002190:	45b3      	cmp	fp, r6
 8002192:	d1e9      	bne.n	8002168 <__kernel_rem_pio2f+0x598>
one    = 1.0,
two8   =  2.5600000000e+02, /* 0x43800000 */
twon8  =  3.9062500000e-03; /* 0x3b800000 */

#ifdef __STDC__
	int __kernel_rem_pio2f(float *x, float *y, int e0, int nx, int prec, const __int32_t *ipio2) 
 8002194:	465e      	mov	r6, fp
 8002196:	464d      	mov	r5, r9
 8002198:	3604      	adds	r6, #4
 800219a:	2000      	movs	r0, #0
		for (i=jz;i>1;i--) {
		    fw      = fq[i-1]+fq[i]; 
		    fq[i]  += fq[i-1]-fw;
		    fq[i-1] = fw;
		}
		for (fw=0.0,i=jz;i>=2;i--) fw += fq[i]; 
 800219c:	6829      	ldr	r1, [r5, #0]
 800219e:	3d04      	subs	r5, #4
 80021a0:	f000 e9a2 	blx	80024e8 <__addsf3>
 80021a4:	42b5      	cmp	r5, r6
 80021a6:	d1f9      	bne.n	800219c <__kernel_rem_pio2f+0x5cc>
		if(ih==0) {
 80021a8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80021aa:	2d00      	cmp	r5, #0
 80021ac:	d036      	beq.n	800221c <__kernel_rem_pio2f+0x64c>
		    y[0] =  fq[0]; y[1] =  fq[1]; y[2] =  fw;
		} else {
		    y[0] = -fq[0]; y[1] = -fq[1]; y[2] = -fw;
 80021ae:	9d38      	ldr	r5, [sp, #224]	; 0xe0
 80021b0:	2180      	movs	r1, #128	; 0x80
 80021b2:	0609      	lsls	r1, r1, #24
 80021b4:	186b      	adds	r3, r5, r1
 80021b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80021b8:	4659      	mov	r1, fp
 80021ba:	602b      	str	r3, [r5, #0]
 80021bc:	2280      	movs	r2, #128	; 0x80
 80021be:	684b      	ldr	r3, [r1, #4]
 80021c0:	0612      	lsls	r2, r2, #24
 80021c2:	189b      	adds	r3, r3, r2
 80021c4:	1880      	adds	r0, r0, r2
 80021c6:	606b      	str	r3, [r5, #4]
 80021c8:	60a8      	str	r0, [r5, #8]
 80021ca:	e792      	b.n	80020f2 <__kernel_rem_pio2f+0x522>
	    }
	}

    /* chop off zero terms */
	if(z==(float)0.0) {
	    jz -= 1; q0 -= 8;
 80021cc:	9d08      	ldr	r5, [sp, #32]
	    while(iq[jz]==0) { jz--; q0-=8;}
 80021ce:	aa10      	add	r2, sp, #64	; 0x40
 80021d0:	5813      	ldr	r3, [r2, r0]
	    }
	}

    /* chop off zero terms */
	if(z==(float)0.0) {
	    jz -= 1; q0 -= 8;
 80021d2:	3d08      	subs	r5, #8
 80021d4:	9605      	str	r6, [sp, #20]
 80021d6:	9508      	str	r5, [sp, #32]
	    while(iq[jz]==0) { jz--; q0-=8;}
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d11d      	bne.n	8002218 <__kernel_rem_pio2f+0x648>
 80021dc:	1e4b      	subs	r3, r1, #1
one    = 1.0,
two8   =  2.5600000000e+02, /* 0x43800000 */
twon8  =  3.9062500000e-03; /* 0x3b800000 */

#ifdef __STDC__
	int __kernel_rem_pio2f(float *x, float *y, int e0, int nx, int prec, const __int32_t *ipio2) 
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	18d3      	adds	r3, r2, r3
	    }
	}

    /* chop off zero terms */
	if(z==(float)0.0) {
	    jz -= 1; q0 -= 8;
 80021e2:	9107      	str	r1, [sp, #28]
 80021e4:	1c0a      	adds	r2, r1, #0
 80021e6:	1c29      	adds	r1, r5, #0
 80021e8:	3b04      	subs	r3, #4
	    while(iq[jz]==0) { jz--; q0-=8;}
 80021ea:	6858      	ldr	r0, [r3, #4]
 80021ec:	3a01      	subs	r2, #1
 80021ee:	3908      	subs	r1, #8
 80021f0:	2800      	cmp	r0, #0
 80021f2:	d0f9      	beq.n	80021e8 <__kernel_rem_pio2f+0x618>
 80021f4:	9207      	str	r2, [sp, #28]
 80021f6:	9108      	str	r1, [sp, #32]
 80021f8:	e6bf      	b.n	8001f7a <__kernel_rem_pio2f+0x3aa>
    /* check if recomputation is needed */
	if(z==zero) {
	    j = 0;
	    for (i=jz-1;i>=jk;i--) j |= iq[i];
	    if(j==0) { /* need recomputation */
		for(k=1;iq[jk-k]==0;k++);   /* k = no. of terms needed */
 80021fa:	2201      	movs	r2, #1
 80021fc:	e628      	b.n	8001e50 <__kernel_rem_pio2f+0x280>
 80021fe:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8002200:	07ad      	lsls	r5, r5, #30
 8002202:	9504      	str	r5, [sp, #16]
 8002204:	ad4c      	add	r5, sp, #304	; 0x130
 8002206:	9509      	str	r5, [sp, #36]	; 0x24
 8002208:	e553      	b.n	8001cb2 <__kernel_rem_pio2f+0xe2>
	    if(z>=two8) { 
		fw = (float)((__int32_t)(twon8*z));
		iq[jz] = (__int32_t)(z-two8*fw);
		jz += 1; q0 += 8;
		iq[jz] = (__int32_t) fw;
	    } else iq[jz] = (__int32_t) z ;
 800220a:	1c20      	adds	r0, r4, #0
 800220c:	f000 ecc2 	blx	8002b94 <__aeabi_f2iz>
 8002210:	aa10      	add	r2, sp, #64	; 0x40
 8002212:	464b      	mov	r3, r9
 8002214:	50d0      	str	r0, [r2, r3]
 8002216:	e6b0      	b.n	8001f7a <__kernel_rem_pio2f+0x3aa>
	    }
	}

    /* chop off zero terms */
	if(z==(float)0.0) {
	    jz -= 1; q0 -= 8;
 8002218:	9107      	str	r1, [sp, #28]
 800221a:	e6ae      	b.n	8001f7a <__kernel_rem_pio2f+0x3aa>
		    fq[i]  += fq[i-1]-fw;
		    fq[i-1] = fw;
		}
		for (fw=0.0,i=jz;i>=2;i--) fw += fq[i]; 
		if(ih==0) {
		    y[0] =  fq[0]; y[1] =  fq[1]; y[2] =  fw;
 800221c:	465a      	mov	r2, fp
 800221e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002220:	9938      	ldr	r1, [sp, #224]	; 0xe0
 8002222:	6852      	ldr	r2, [r2, #4]
 8002224:	6029      	str	r1, [r5, #0]
 8002226:	606a      	str	r2, [r5, #4]
 8002228:	60a8      	str	r0, [r5, #8]
 800222a:	e762      	b.n	80020f2 <__kernel_rem_pio2f+0x522>
		for (i=jz;i>0;i--) {
		    fw      = fq[i-1]+fq[i]; 
		    fq[i]  += fq[i-1]-fw;
		    fq[i-1] = fw;
		}
		for (i=jz;i>1;i--) {
 800222c:	2000      	movs	r0, #0
 800222e:	e7bb      	b.n	80021a8 <__kernel_rem_pio2f+0x5d8>
 8002230:	a938      	add	r1, sp, #224	; 0xe0
		fw = fq[0]-fw;
		for (i=1;i<=jz;i++) fw += fq[i];
		y[1] = (ih==0)? fw: -fw; 
		break;
	    case 3:	/* painful */
		for (i=jz;i>0;i--) {
 8002232:	2000      	movs	r0, #0
 8002234:	468b      	mov	fp, r1
 8002236:	e7b7      	b.n	80021a8 <__kernel_rem_pio2f+0x5d8>
	    for(fw=0.0,k=0;k<=jp&&k<=jz-i;k++) fw += PIo2[k]*q[i+k];
	    fq[jz-i] = fw;
	}

    /* compress fq[] into y[] */
	switch(prec) {
 8002238:	2d00      	cmp	r5, #0
 800223a:	d000      	beq.n	800223e <__kernel_rem_pio2f+0x66e>
 800223c:	e759      	b.n	80020f2 <__kernel_rem_pio2f+0x522>
	    case 0:
		fw = 0.0;
		for (i=jz;i>=0;i--) fw += fq[i];
 800223e:	9d07      	ldr	r5, [sp, #28]
 8002240:	2d00      	cmp	r5, #0
 8002242:	db13      	blt.n	800226c <__kernel_rem_pio2f+0x69c>
one    = 1.0,
two8   =  2.5600000000e+02, /* 0x43800000 */
twon8  =  3.9062500000e-03; /* 0x3b800000 */

#ifdef __STDC__
	int __kernel_rem_pio2f(float *x, float *y, int e0, int nx, int prec, const __int32_t *ipio2) 
 8002244:	00ac      	lsls	r4, r5, #2
 8002246:	a838      	add	r0, sp, #224	; 0xe0
 8002248:	1904      	adds	r4, r0, r4
 800224a:	ad37      	add	r5, sp, #220	; 0xdc
 800224c:	2000      	movs	r0, #0

    /* compress fq[] into y[] */
	switch(prec) {
	    case 0:
		fw = 0.0;
		for (i=jz;i>=0;i--) fw += fq[i];
 800224e:	6821      	ldr	r1, [r4, #0]
 8002250:	3c04      	subs	r4, #4
 8002252:	f000 e94a 	blx	80024e8 <__addsf3>
 8002256:	42ac      	cmp	r4, r5
 8002258:	d1f9      	bne.n	800224e <__kernel_rem_pio2f+0x67e>
		y[0] = (ih==0)? fw: -fw; 
 800225a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800225c:	2d00      	cmp	r5, #0
 800225e:	d002      	beq.n	8002266 <__kernel_rem_pio2f+0x696>
 8002260:	2180      	movs	r1, #128	; 0x80
 8002262:	0609      	lsls	r1, r1, #24
 8002264:	1840      	adds	r0, r0, r1
 8002266:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002268:	6028      	str	r0, [r5, #0]
		break;
 800226a:	e742      	b.n	80020f2 <__kernel_rem_pio2f+0x522>

    /* compress fq[] into y[] */
	switch(prec) {
	    case 0:
		fw = 0.0;
		for (i=jz;i>=0;i--) fw += fq[i];
 800226c:	2000      	movs	r0, #0
 800226e:	e7f4      	b.n	800225a <__kernel_rem_pio2f+0x68a>
 8002270:	08003250 	.word	0x08003250

08002274 <__kernel_sinf>:
	float __kernel_sinf(float x, float y, int iy)
#else
	float __kernel_sinf(x, y, iy)
	float x,y; int iy;		/* iy=0 if y is zero */
#endif
{
 8002274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	float z,r,v;
	__int32_t ix;
	GET_FLOAT_WORD(ix,x);
	ix &= 0x7fffffff;			/* high word of x */
	if(ix<0x32000000)			/* |x| < 2**-27 */
 8002276:	4b37      	ldr	r3, [pc, #220]	; (8002354 <__kernel_sinf+0xe0>)
	float __kernel_sinf(float x, float y, int iy)
#else
	float __kernel_sinf(x, y, iy)
	float x,y; int iy;		/* iy=0 if y is zero */
#endif
{
 8002278:	464f      	mov	r7, r9
 800227a:	4646      	mov	r6, r8
	float z,r,v;
	__int32_t ix;
	GET_FLOAT_WORD(ix,x);
	ix &= 0x7fffffff;			/* high word of x */
 800227c:	0045      	lsls	r5, r0, #1
	float __kernel_sinf(float x, float y, int iy)
#else
	float __kernel_sinf(x, y, iy)
	float x,y; int iy;		/* iy=0 if y is zero */
#endif
{
 800227e:	b4c0      	push	{r6, r7}
 8002280:	1c04      	adds	r4, r0, #0
 8002282:	1c0f      	adds	r7, r1, #0
 8002284:	4690      	mov	r8, r2
	float z,r,v;
	__int32_t ix;
	GET_FLOAT_WORD(ix,x);
	ix &= 0x7fffffff;			/* high word of x */
 8002286:	086d      	lsrs	r5, r5, #1
	if(ix<0x32000000)			/* |x| < 2**-27 */
 8002288:	429d      	cmp	r5, r3
 800228a:	dc03      	bgt.n	8002294 <__kernel_sinf+0x20>
	   {if((int)x==0) return x;}		/* generate inexact */
 800228c:	f000 ec82 	blx	8002b94 <__aeabi_f2iz>
 8002290:	2800      	cmp	r0, #0
 8002292:	d047      	beq.n	8002324 <__kernel_sinf+0xb0>
	z	=  x*x;
 8002294:	1c21      	adds	r1, r4, #0
 8002296:	1c20      	adds	r0, r4, #0
 8002298:	f000 ea76 	blx	8002788 <__aeabi_fmul>
	v	=  z*x;
 800229c:	1c21      	adds	r1, r4, #0
	__int32_t ix;
	GET_FLOAT_WORD(ix,x);
	ix &= 0x7fffffff;			/* high word of x */
	if(ix<0x32000000)			/* |x| < 2**-27 */
	   {if((int)x==0) return x;}		/* generate inexact */
	z	=  x*x;
 800229e:	1c05      	adds	r5, r0, #0
	v	=  z*x;
 80022a0:	f000 ea72 	blx	8002788 <__aeabi_fmul>
	r	=  S2+z*(S3+z*(S4+z*(S5+z*S6)));
 80022a4:	492c      	ldr	r1, [pc, #176]	; (8002358 <__kernel_sinf+0xe4>)
	GET_FLOAT_WORD(ix,x);
	ix &= 0x7fffffff;			/* high word of x */
	if(ix<0x32000000)			/* |x| < 2**-27 */
	   {if((int)x==0) return x;}		/* generate inexact */
	z	=  x*x;
	v	=  z*x;
 80022a6:	1c06      	adds	r6, r0, #0
	r	=  S2+z*(S3+z*(S4+z*(S5+z*S6)));
 80022a8:	1c28      	adds	r0, r5, #0
 80022aa:	f000 ea6e 	blx	8002788 <__aeabi_fmul>
 80022ae:	492b      	ldr	r1, [pc, #172]	; (800235c <__kernel_sinf+0xe8>)
 80022b0:	f000 e918 	blx	80024e4 <__aeabi_fsub>
 80022b4:	1c29      	adds	r1, r5, #0
 80022b6:	f000 ea68 	blx	8002788 <__aeabi_fmul>
 80022ba:	4929      	ldr	r1, [pc, #164]	; (8002360 <__kernel_sinf+0xec>)
 80022bc:	f000 e914 	blx	80024e8 <__addsf3>
 80022c0:	1c29      	adds	r1, r5, #0
 80022c2:	f000 ea62 	blx	8002788 <__aeabi_fmul>
 80022c6:	4927      	ldr	r1, [pc, #156]	; (8002364 <__kernel_sinf+0xf0>)
 80022c8:	f000 e90c 	blx	80024e4 <__aeabi_fsub>
 80022cc:	1c29      	adds	r1, r5, #0
 80022ce:	f000 ea5c 	blx	8002788 <__aeabi_fmul>
 80022d2:	4925      	ldr	r1, [pc, #148]	; (8002368 <__kernel_sinf+0xf4>)
 80022d4:	f000 e908 	blx	80024e8 <__addsf3>
	if(iy==0) return x+v*(S1+z*r);
 80022d8:	4643      	mov	r3, r8
	ix &= 0x7fffffff;			/* high word of x */
	if(ix<0x32000000)			/* |x| < 2**-27 */
	   {if((int)x==0) return x;}		/* generate inexact */
	z	=  x*x;
	v	=  z*x;
	r	=  S2+z*(S3+z*(S4+z*(S5+z*S6)));
 80022da:	4681      	mov	r9, r0
	if(iy==0) return x+v*(S1+z*r);
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d028      	beq.n	8002332 <__kernel_sinf+0xbe>
	else      return x-((z*(half*y-v*r)-y)-v*S1);
 80022e0:	21fc      	movs	r1, #252	; 0xfc
 80022e2:	0589      	lsls	r1, r1, #22
 80022e4:	1c38      	adds	r0, r7, #0
 80022e6:	f000 ea50 	blx	8002788 <__aeabi_fmul>
 80022ea:	4649      	mov	r1, r9
 80022ec:	4680      	mov	r8, r0
 80022ee:	1c30      	adds	r0, r6, #0
 80022f0:	f000 ea4a 	blx	8002788 <__aeabi_fmul>
 80022f4:	1c01      	adds	r1, r0, #0
 80022f6:	4640      	mov	r0, r8
 80022f8:	f000 e8f4 	blx	80024e4 <__aeabi_fsub>
 80022fc:	1c29      	adds	r1, r5, #0
 80022fe:	f000 ea44 	blx	8002788 <__aeabi_fmul>
 8002302:	1c39      	adds	r1, r7, #0
 8002304:	f000 e8ee 	blx	80024e4 <__aeabi_fsub>
 8002308:	4918      	ldr	r1, [pc, #96]	; (800236c <__kernel_sinf+0xf8>)
 800230a:	1c05      	adds	r5, r0, #0
 800230c:	1c30      	adds	r0, r6, #0
 800230e:	f000 ea3c 	blx	8002788 <__aeabi_fmul>
 8002312:	1c01      	adds	r1, r0, #0
 8002314:	1c28      	adds	r0, r5, #0
 8002316:	f000 e8e8 	blx	80024e8 <__addsf3>
 800231a:	1c01      	adds	r1, r0, #0
 800231c:	1c20      	adds	r0, r4, #0
 800231e:	f000 e8e2 	blx	80024e4 <__aeabi_fsub>
 8002322:	1c04      	adds	r4, r0, #0
}
 8002324:	1c20      	adds	r0, r4, #0
 8002326:	bc0c      	pop	{r2, r3}
 8002328:	4690      	mov	r8, r2
 800232a:	4699      	mov	r9, r3
 800232c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800232e:	bc02      	pop	{r1}
 8002330:	4708      	bx	r1
	if(ix<0x32000000)			/* |x| < 2**-27 */
	   {if((int)x==0) return x;}		/* generate inexact */
	z	=  x*x;
	v	=  z*x;
	r	=  S2+z*(S3+z*(S4+z*(S5+z*S6)));
	if(iy==0) return x+v*(S1+z*r);
 8002332:	4649      	mov	r1, r9
 8002334:	1c28      	adds	r0, r5, #0
 8002336:	f000 ea28 	blx	8002788 <__aeabi_fmul>
 800233a:	490c      	ldr	r1, [pc, #48]	; (800236c <__kernel_sinf+0xf8>)
 800233c:	f000 e8d2 	blx	80024e4 <__aeabi_fsub>
 8002340:	1c31      	adds	r1, r6, #0
 8002342:	f000 ea22 	blx	8002788 <__aeabi_fmul>
 8002346:	1c01      	adds	r1, r0, #0
 8002348:	1c20      	adds	r0, r4, #0
 800234a:	f000 e8ce 	blx	80024e8 <__addsf3>
 800234e:	1c04      	adds	r4, r0, #0
 8002350:	e7e8      	b.n	8002324 <__kernel_sinf+0xb0>
 8002352:	46c0      	nop			; (mov r8, r8)
 8002354:	31ffffff 	.word	0x31ffffff
 8002358:	2f2ec9d3 	.word	0x2f2ec9d3
 800235c:	32d72f34 	.word	0x32d72f34
 8002360:	3638ef1b 	.word	0x3638ef1b
 8002364:	39500d01 	.word	0x39500d01
 8002368:	3c088889 	.word	0x3c088889
 800236c:	3e2aaaab 	.word	0x3e2aaaab

08002370 <fabsf>:
	float x;
#endif
{
	__uint32_t ix;
	GET_FLOAT_WORD(ix,x);
	SET_FLOAT_WORD(x,ix&0x7fffffff);
 8002370:	0040      	lsls	r0, r0, #1
        return x;
 8002372:	0840      	lsrs	r0, r0, #1
}
 8002374:	4770      	bx	lr
 8002376:	46c0      	nop			; (mov r8, r8)

08002378 <floorf>:
	float floorf(float x)
#else
	float floorf(x)
	float x;
#endif
{
 8002378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__int32_t i0,j0;
	__uint32_t i,ix;
	GET_FLOAT_WORD(i0,x);
	ix = (i0&0x7fffffff);
 800237a:	0043      	lsls	r3, r0, #1
 800237c:	085e      	lsrs	r6, r3, #1
	j0 = (ix>>23)-0x7f;
 800237e:	0e1b      	lsrs	r3, r3, #24
 8002380:	1c1d      	adds	r5, r3, #0
 8002382:	3d7f      	subs	r5, #127	; 0x7f
	float floorf(float x)
#else
	float floorf(x)
	float x;
#endif
{
 8002384:	1c01      	adds	r1, r0, #0
	__int32_t i0,j0;
	__uint32_t i,ix;
	GET_FLOAT_WORD(i0,x);
 8002386:	1c04      	adds	r4, r0, #0
	ix = (i0&0x7fffffff);
	j0 = (ix>>23)-0x7f;
	if(j0<23) {
 8002388:	2d16      	cmp	r5, #22
 800238a:	dc17      	bgt.n	80023bc <floorf+0x44>
	float x;
#endif
{
	__int32_t i0,j0;
	__uint32_t i,ix;
	GET_FLOAT_WORD(i0,x);
 800238c:	1c07      	adds	r7, r0, #0
	ix = (i0&0x7fffffff);
	j0 = (ix>>23)-0x7f;
	if(j0<23) {
	    if(j0<0) { 	/* raise inexact if x != 0 */
 800238e:	2d00      	cmp	r5, #0
 8002390:	db1b      	blt.n	80023ca <floorf+0x52>
		    if(i0>=0) {i0=0;} 
		    else if(!FLT_UWORD_IS_ZERO(ix))
			{ i0=0xbf800000;}
		}
	    } else {
		i = (0x007fffff)>>j0;
 8002392:	4e19      	ldr	r6, [pc, #100]	; (80023f8 <floorf+0x80>)
 8002394:	412e      	asrs	r6, r5
		if((i0&i)==0) return x; /* x is integral */
 8002396:	4230      	tst	r0, r6
 8002398:	d00c      	beq.n	80023b4 <floorf+0x3c>
		if(huge+x>(float)0.0) {	/* raise inexact flag */
 800239a:	4918      	ldr	r1, [pc, #96]	; (80023fc <floorf+0x84>)
 800239c:	f000 e8a4 	blx	80024e8 <__addsf3>
 80023a0:	2100      	movs	r1, #0
 80023a2:	f000 ebec 	blx	8002b7c <__aeabi_fcmpgt>
 80023a6:	2800      	cmp	r0, #0
 80023a8:	d003      	beq.n	80023b2 <floorf+0x3a>
		    if(i0<0) i0 += (0x00800000)>>j0;
 80023aa:	2c00      	cmp	r4, #0
 80023ac:	db1a      	blt.n	80023e4 <floorf+0x6c>
		    i0 &= (~i);
 80023ae:	1c3c      	adds	r4, r7, #0
 80023b0:	43b4      	bics	r4, r6
	    }
	} else {
	    if(!FLT_UWORD_IS_FINITE(ix)) return x+x;	/* inf or NaN */
	    else return x;		/* x is integral */
	}
	SET_FLOAT_WORD(x,i0);
 80023b2:	1c21      	adds	r1, r4, #0
	return x;
}
 80023b4:	1c08      	adds	r0, r1, #0
 80023b6:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023b8:	bc02      	pop	{r1}
 80023ba:	4708      	bx	r1
		    if(i0<0) i0 += (0x00800000)>>j0;
		    i0 &= (~i);
		}
	    }
	} else {
	    if(!FLT_UWORD_IS_FINITE(ix)) return x+x;	/* inf or NaN */
 80023bc:	4b10      	ldr	r3, [pc, #64]	; (8002400 <floorf+0x88>)
 80023be:	429e      	cmp	r6, r3
 80023c0:	d9f8      	bls.n	80023b4 <floorf+0x3c>
 80023c2:	f000 e892 	blx	80024e8 <__addsf3>
 80023c6:	1c01      	adds	r1, r0, #0
 80023c8:	e7f4      	b.n	80023b4 <floorf+0x3c>
	GET_FLOAT_WORD(i0,x);
	ix = (i0&0x7fffffff);
	j0 = (ix>>23)-0x7f;
	if(j0<23) {
	    if(j0<0) { 	/* raise inexact if x != 0 */
		if(huge+x>(float)0.0) {/* return 0*sign(x) if |x|<1 */
 80023ca:	490c      	ldr	r1, [pc, #48]	; (80023fc <floorf+0x84>)
 80023cc:	f000 e88c 	blx	80024e8 <__addsf3>
 80023d0:	2100      	movs	r1, #0
 80023d2:	f000 ebd4 	blx	8002b7c <__aeabi_fcmpgt>
 80023d6:	2800      	cmp	r0, #0
 80023d8:	d0eb      	beq.n	80023b2 <floorf+0x3a>
		    if(i0>=0) {i0=0;} 
 80023da:	2c00      	cmp	r4, #0
 80023dc:	db07      	blt.n	80023ee <floorf+0x76>
 80023de:	2400      	movs	r4, #0
	    }
	} else {
	    if(!FLT_UWORD_IS_FINITE(ix)) return x+x;	/* inf or NaN */
	    else return x;		/* x is integral */
	}
	SET_FLOAT_WORD(x,i0);
 80023e0:	1c21      	adds	r1, r4, #0
 80023e2:	e7e7      	b.n	80023b4 <floorf+0x3c>
		}
	    } else {
		i = (0x007fffff)>>j0;
		if((i0&i)==0) return x; /* x is integral */
		if(huge+x>(float)0.0) {	/* raise inexact flag */
		    if(i0<0) i0 += (0x00800000)>>j0;
 80023e4:	2380      	movs	r3, #128	; 0x80
 80023e6:	041b      	lsls	r3, r3, #16
 80023e8:	412b      	asrs	r3, r5
 80023ea:	18e7      	adds	r7, r4, r3
 80023ec:	e7df      	b.n	80023ae <floorf+0x36>
	j0 = (ix>>23)-0x7f;
	if(j0<23) {
	    if(j0<0) { 	/* raise inexact if x != 0 */
		if(huge+x>(float)0.0) {/* return 0*sign(x) if |x|<1 */
		    if(i0>=0) {i0=0;} 
		    else if(!FLT_UWORD_IS_ZERO(ix))
 80023ee:	2e00      	cmp	r6, #0
 80023f0:	d0df      	beq.n	80023b2 <floorf+0x3a>
 80023f2:	4c04      	ldr	r4, [pc, #16]	; (8002404 <floorf+0x8c>)
	    }
	} else {
	    if(!FLT_UWORD_IS_FINITE(ix)) return x+x;	/* inf or NaN */
	    else return x;		/* x is integral */
	}
	SET_FLOAT_WORD(x,i0);
 80023f4:	1c21      	adds	r1, r4, #0
 80023f6:	e7dd      	b.n	80023b4 <floorf+0x3c>
 80023f8:	007fffff 	.word	0x007fffff
 80023fc:	7149f2ca 	.word	0x7149f2ca
 8002400:	7f7fffff 	.word	0x7f7fffff
 8002404:	bf800000 	.word	0xbf800000

08002408 <scalbnf>:
	float scalbnf (float x, int n)
#else
	float scalbnf (x,n)
	float x; int n;
#endif
{
 8002408:	b538      	push	{r3, r4, r5, lr}
	__int32_t  k,ix;
	__uint32_t hx;

	GET_FLOAT_WORD(ix,x);
	hx = ix&0x7fffffff;
 800240a:	0044      	lsls	r4, r0, #1
	float scalbnf (float x, int n)
#else
	float scalbnf (x,n)
	float x; int n;
#endif
{
 800240c:	1c03      	adds	r3, r0, #0
 800240e:	1c0d      	adds	r5, r1, #0
	__int32_t  k,ix;
	__uint32_t hx;

	GET_FLOAT_WORD(ix,x);
	hx = ix&0x7fffffff;
 8002410:	0862      	lsrs	r2, r4, #1
        k = hx>>23;		/* extract exponent */
	if (FLT_UWORD_IS_ZERO(hx))
 8002412:	d00f      	beq.n	8002434 <scalbnf+0x2c>
	    return x;
        if (!FLT_UWORD_IS_FINITE(hx))
 8002414:	4927      	ldr	r1, [pc, #156]	; (80024b4 <scalbnf+0xac>)
 8002416:	428a      	cmp	r2, r1
 8002418:	d810      	bhi.n	800243c <scalbnf+0x34>
	    return x+x;		/* NaN or Inf */
        if (FLT_UWORD_IS_SUBNORMAL(hx)) {
 800241a:	4927      	ldr	r1, [pc, #156]	; (80024b8 <scalbnf+0xb0>)
 800241c:	428a      	cmp	r2, r1
 800241e:	d913      	bls.n	8002448 <scalbnf+0x40>
	__int32_t  k,ix;
	__uint32_t hx;

	GET_FLOAT_WORD(ix,x);
	hx = ix&0x7fffffff;
        k = hx>>23;		/* extract exponent */
 8002420:	0e24      	lsrs	r4, r4, #24
	    x *= two25;
	    GET_FLOAT_WORD(ix,x);
	    k = ((ix&0x7f800000)>>23) - 25; 
            if (n< -50000) return tiny*x; 	/*underflow*/
        }
        k = k+n; 
 8002422:	1964      	adds	r4, r4, r5
        if (k > FLT_LARGEST_EXP) return huge*copysignf(huge,x); /* overflow  */
 8002424:	2cfe      	cmp	r4, #254	; 0xfe
 8002426:	dc2b      	bgt.n	8002480 <scalbnf+0x78>
        if (k > 0) 				/* normal result */
 8002428:	2c00      	cmp	r4, #0
 800242a:	dd1a      	ble.n	8002462 <scalbnf+0x5a>
	    {SET_FLOAT_WORD(x,(ix&0x807fffff)|(k<<23)); return x;}
 800242c:	4a23      	ldr	r2, [pc, #140]	; (80024bc <scalbnf+0xb4>)
 800242e:	05e3      	lsls	r3, r4, #23
 8002430:	4010      	ands	r0, r2
 8002432:	4303      	orrs	r3, r0
	    else return tiny*copysignf(tiny,x);	/*underflow*/
        }
        k += 25;				/* subnormal result */
	SET_FLOAT_WORD(x,(ix&0x807fffff)|(k<<23));
        return x*twom25;
}
 8002434:	1c18      	adds	r0, r3, #0
 8002436:	bc38      	pop	{r3, r4, r5}
 8002438:	bc02      	pop	{r1}
 800243a:	4708      	bx	r1
	hx = ix&0x7fffffff;
        k = hx>>23;		/* extract exponent */
	if (FLT_UWORD_IS_ZERO(hx))
	    return x;
        if (!FLT_UWORD_IS_FINITE(hx))
	    return x+x;		/* NaN or Inf */
 800243c:	1c18      	adds	r0, r3, #0
 800243e:	1c19      	adds	r1, r3, #0
 8002440:	f000 e852 	blx	80024e8 <__addsf3>
 8002444:	1c03      	adds	r3, r0, #0
 8002446:	e7f5      	b.n	8002434 <scalbnf+0x2c>
        if (FLT_UWORD_IS_SUBNORMAL(hx)) {
	    x *= two25;
 8002448:	2198      	movs	r1, #152	; 0x98
 800244a:	1c18      	adds	r0, r3, #0
 800244c:	05c9      	lsls	r1, r1, #23
 800244e:	f000 e99c 	blx	8002788 <__aeabi_fmul>
	    GET_FLOAT_WORD(ix,x);
	    k = ((ix&0x7f800000)>>23) - 25; 
            if (n< -50000) return tiny*x; 	/*underflow*/
 8002452:	4a1b      	ldr	r2, [pc, #108]	; (80024c0 <scalbnf+0xb8>)
	if (FLT_UWORD_IS_ZERO(hx))
	    return x;
        if (!FLT_UWORD_IS_FINITE(hx))
	    return x+x;		/* NaN or Inf */
        if (FLT_UWORD_IS_SUBNORMAL(hx)) {
	    x *= two25;
 8002454:	1c03      	adds	r3, r0, #0
	    GET_FLOAT_WORD(ix,x);
	    k = ((ix&0x7f800000)>>23) - 25; 
            if (n< -50000) return tiny*x; 	/*underflow*/
 8002456:	4295      	cmp	r5, r2
 8002458:	db1b      	blt.n	8002492 <scalbnf+0x8a>
        if (!FLT_UWORD_IS_FINITE(hx))
	    return x+x;		/* NaN or Inf */
        if (FLT_UWORD_IS_SUBNORMAL(hx)) {
	    x *= two25;
	    GET_FLOAT_WORD(ix,x);
	    k = ((ix&0x7f800000)>>23) - 25; 
 800245a:	0044      	lsls	r4, r0, #1
 800245c:	0e24      	lsrs	r4, r4, #24
 800245e:	3c19      	subs	r4, #25
 8002460:	e7df      	b.n	8002422 <scalbnf+0x1a>
        }
        k = k+n; 
        if (k > FLT_LARGEST_EXP) return huge*copysignf(huge,x); /* overflow  */
        if (k > 0) 				/* normal result */
	    {SET_FLOAT_WORD(x,(ix&0x807fffff)|(k<<23)); return x;}
        if (k < FLT_SMALLEST_EXP) {
 8002462:	1c22      	adds	r2, r4, #0
 8002464:	3216      	adds	r2, #22
 8002466:	da19      	bge.n	800249c <scalbnf+0x94>
            if (n > OVERFLOW_INT) 	/* in case integer overflow in n+k */
 8002468:	4a16      	ldr	r2, [pc, #88]	; (80024c4 <scalbnf+0xbc>)
 800246a:	4295      	cmp	r5, r2
 800246c:	dc08      	bgt.n	8002480 <scalbnf+0x78>
		return huge*copysignf(huge,x);	/*overflow*/
	    else return tiny*copysignf(tiny,x);	/*underflow*/
 800246e:	1c19      	adds	r1, r3, #0
 8002470:	4815      	ldr	r0, [pc, #84]	; (80024c8 <scalbnf+0xc0>)
 8002472:	f000 f82d 	bl	80024d0 <copysignf>
 8002476:	4914      	ldr	r1, [pc, #80]	; (80024c8 <scalbnf+0xc0>)
 8002478:	f000 e986 	blx	8002788 <__aeabi_fmul>
 800247c:	1c03      	adds	r3, r0, #0
 800247e:	e7d9      	b.n	8002434 <scalbnf+0x2c>
        if (k > FLT_LARGEST_EXP) return huge*copysignf(huge,x); /* overflow  */
        if (k > 0) 				/* normal result */
	    {SET_FLOAT_WORD(x,(ix&0x807fffff)|(k<<23)); return x;}
        if (k < FLT_SMALLEST_EXP) {
            if (n > OVERFLOW_INT) 	/* in case integer overflow in n+k */
		return huge*copysignf(huge,x);	/*overflow*/
 8002480:	1c19      	adds	r1, r3, #0
 8002482:	4812      	ldr	r0, [pc, #72]	; (80024cc <scalbnf+0xc4>)
 8002484:	f000 f824 	bl	80024d0 <copysignf>
 8002488:	4910      	ldr	r1, [pc, #64]	; (80024cc <scalbnf+0xc4>)
 800248a:	f000 e97e 	blx	8002788 <__aeabi_fmul>
 800248e:	1c03      	adds	r3, r0, #0
 8002490:	e7d0      	b.n	8002434 <scalbnf+0x2c>
	    return x+x;		/* NaN or Inf */
        if (FLT_UWORD_IS_SUBNORMAL(hx)) {
	    x *= two25;
	    GET_FLOAT_WORD(ix,x);
	    k = ((ix&0x7f800000)>>23) - 25; 
            if (n< -50000) return tiny*x; 	/*underflow*/
 8002492:	490d      	ldr	r1, [pc, #52]	; (80024c8 <scalbnf+0xc0>)
 8002494:	f000 e978 	blx	8002788 <__aeabi_fmul>
 8002498:	1c03      	adds	r3, r0, #0
 800249a:	e7cb      	b.n	8002434 <scalbnf+0x2c>
            if (n > OVERFLOW_INT) 	/* in case integer overflow in n+k */
		return huge*copysignf(huge,x);	/*overflow*/
	    else return tiny*copysignf(tiny,x);	/*underflow*/
        }
        k += 25;				/* subnormal result */
	SET_FLOAT_WORD(x,(ix&0x807fffff)|(k<<23));
 800249c:	4b07      	ldr	r3, [pc, #28]	; (80024bc <scalbnf+0xb4>)
        if (k < FLT_SMALLEST_EXP) {
            if (n > OVERFLOW_INT) 	/* in case integer overflow in n+k */
		return huge*copysignf(huge,x);	/*overflow*/
	    else return tiny*copysignf(tiny,x);	/*underflow*/
        }
        k += 25;				/* subnormal result */
 800249e:	3419      	adds	r4, #25
	SET_FLOAT_WORD(x,(ix&0x807fffff)|(k<<23));
 80024a0:	4018      	ands	r0, r3
 80024a2:	05e4      	lsls	r4, r4, #23
        return x*twom25;
 80024a4:	21cc      	movs	r1, #204	; 0xcc
            if (n > OVERFLOW_INT) 	/* in case integer overflow in n+k */
		return huge*copysignf(huge,x);	/*overflow*/
	    else return tiny*copysignf(tiny,x);	/*underflow*/
        }
        k += 25;				/* subnormal result */
	SET_FLOAT_WORD(x,(ix&0x807fffff)|(k<<23));
 80024a6:	4320      	orrs	r0, r4
        return x*twom25;
 80024a8:	0589      	lsls	r1, r1, #22
 80024aa:	f000 e96e 	blx	8002788 <__aeabi_fmul>
 80024ae:	1c03      	adds	r3, r0, #0
 80024b0:	e7c0      	b.n	8002434 <scalbnf+0x2c>
 80024b2:	46c0      	nop			; (mov r8, r8)
 80024b4:	7f7fffff 	.word	0x7f7fffff
 80024b8:	007fffff 	.word	0x007fffff
 80024bc:	807fffff 	.word	0x807fffff
 80024c0:	ffff3cb0 	.word	0xffff3cb0
 80024c4:	0000c350 	.word	0x0000c350
 80024c8:	0da24260 	.word	0x0da24260
 80024cc:	7149f2ca 	.word	0x7149f2ca

080024d0 <copysignf>:
#endif
{
	__uint32_t ix,iy;
	GET_FLOAT_WORD(ix,x);
	GET_FLOAT_WORD(iy,y);
	SET_FLOAT_WORD(x,(ix&0x7fffffff)|(iy&0x80000000));
 80024d0:	0fc9      	lsrs	r1, r1, #31
 80024d2:	0040      	lsls	r0, r0, #1
 80024d4:	07c9      	lsls	r1, r1, #31
 80024d6:	0840      	lsrs	r0, r0, #1
        return x;
 80024d8:	4308      	orrs	r0, r1
}
 80024da:	4770      	bx	lr

080024dc <__aeabi_frsub>:

#ifdef L_arm_addsubsf3

ARM_FUNC_START aeabi_frsub

	eor	r0, r0, #0x80000000	@ flip sign bit of first arg
 80024dc:	e2200102 	eor	r0, r0, #-2147483648	; 0x80000000
	b	1f
 80024e0:	ea000000 	b	80024e8 <__addsf3>

080024e4 <__aeabi_fsub>:

ARM_FUNC_START subsf3
ARM_FUNC_ALIAS aeabi_fsub subsf3

	eor	r1, r1, #0x80000000	@ flip sign bit of second arg
 80024e4:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000

080024e8 <__addsf3>:

ARM_FUNC_START addsf3
ARM_FUNC_ALIAS aeabi_fadd addsf3

1:	@ Look for zeroes, equal values, INF, or NAN.
	movs	r2, r0, lsl #1
 80024e8:	e1b02080 	lsls	r2, r0, #1
	do_it	ne, ttt
	COND(mov,s,ne)	r3, r1, lsl #1
 80024ec:	11b03081 	lslsne	r3, r1, #1
	teqne	r2, r3
 80024f0:	11320003 	teqne	r2, r3
	COND(mvn,s,ne)	ip, r2, asr #24
 80024f4:	11f0cc42 	mvnsne	ip, r2, asr #24
	COND(mvn,s,ne)	ip, r3, asr #24
 80024f8:	11f0cc43 	mvnsne	ip, r3, asr #24
	beq	LSYM(Lad_s)
 80024fc:	0a000047 	beq	8002620 <__addsf3+0x138>

	@ Compute exponent difference.  Make largest exponent in r2,
	@ corresponding arg in r0, and positive exponent difference in r3.
	mov	r2, r2, lsr #24
 8002500:	e1a02c22 	lsr	r2, r2, #24
	rsbs	r3, r2, r3, lsr #24
 8002504:	e0723c23 	rsbs	r3, r2, r3, lsr #24
	do_it	gt, ttt
	addgt	r2, r2, r3
 8002508:	c0822003 	addgt	r2, r2, r3
	eorgt	r1, r0, r1
 800250c:	c0201001 	eorgt	r1, r0, r1
	eorgt	r0, r1, r0
 8002510:	c0210000 	eorgt	r0, r1, r0
	eorgt	r1, r0, r1
 8002514:	c0201001 	eorgt	r1, r0, r1
	do_it	lt
	rsblt	r3, r3, #0
 8002518:	b2633000 	rsblt	r3, r3, #0

	@ If exponent difference is too large, return largest argument
	@ already in r0.  We need up to 25 bit to handle proper rounding
	@ of 0x1p25 - 1.1.
	cmp	r3, #25
 800251c:	e3530019 	cmp	r3, #25
	do_it	hi
	RETc(hi)
 8002520:	812fff1e 	bxhi	lr

	@ Convert mantissa to signed integer.
	tst	r0, #0x80000000
 8002524:	e3100102 	tst	r0, #-2147483648	; 0x80000000
	orr	r0, r0, #0x00800000
 8002528:	e3800502 	orr	r0, r0, #8388608	; 0x800000
	bic	r0, r0, #0xff000000
 800252c:	e3c004ff 	bic	r0, r0, #-16777216	; 0xff000000
	do_it	ne
	rsbne	r0, r0, #0
 8002530:	12600000 	rsbne	r0, r0, #0
	tst	r1, #0x80000000
 8002534:	e3110102 	tst	r1, #-2147483648	; 0x80000000
	orr	r1, r1, #0x00800000
 8002538:	e3811502 	orr	r1, r1, #8388608	; 0x800000
	bic	r1, r1, #0xff000000
 800253c:	e3c114ff 	bic	r1, r1, #-16777216	; 0xff000000
	do_it	ne
	rsbne	r1, r1, #0
 8002540:	12611000 	rsbne	r1, r1, #0

	@ If exponent == difference, one or both args were denormalized.
	@ Since this is not common case, rescale them off line.
	teq	r2, r3
 8002544:	e1320003 	teq	r2, r3
	beq	LSYM(Lad_d)
 8002548:	0a00002e 	beq	8002608 <__addsf3+0x120>
LSYM(Lad_x):

	@ Compensate for the exponent overlapping the mantissa MSB added later
	sub	r2, r2, #1
 800254c:	e2422001 	sub	r2, r2, #1

	@ Shift and add second arg to first arg in r0.
	@ Keep leftover bits into r1.
	shiftop adds r0 r0 r1 asr r3 ip
 8002550:	e0900351 	adds	r0, r0, r1, asr r3
	rsb	r3, r3, #32
 8002554:	e2633020 	rsb	r3, r3, #32
	shift1	lsl, r1, r1, r3
 8002558:	e1a01311 	lsl	r1, r1, r3

	@ Keep absolute value in r0-r1, sign in r3 (the n bit was set above)
	and	r3, r0, #0x80000000
 800255c:	e2003102 	and	r3, r0, #-2147483648	; 0x80000000
	bpl	LSYM(Lad_p)
 8002560:	5a000001 	bpl	800256c <__addsf3+0x84>
#if defined(__thumb2__)
	negs	r1, r1
	sbc	r0, r0, r0, lsl #1
#else
	rsbs	r1, r1, #0
 8002564:	e2711000 	rsbs	r1, r1, #0
	rsc	r0, r0, #0
 8002568:	e2e00000 	rsc	r0, r0, #0
#endif

	@ Determine how to normalize the result.
LSYM(Lad_p):
	cmp	r0, #0x00800000
 800256c:	e3500502 	cmp	r0, #8388608	; 0x800000
	bcc	LSYM(Lad_a)
 8002570:	3a00000b 	bcc	80025a4 <__addsf3+0xbc>
	cmp	r0, #0x01000000
 8002574:	e3500401 	cmp	r0, #16777216	; 0x1000000
	bcc	LSYM(Lad_e)
 8002578:	3a000004 	bcc	8002590 <__addsf3+0xa8>

	@ Result needs to be shifted right.
	movs	r0, r0, lsr #1
 800257c:	e1b000a0 	lsrs	r0, r0, #1
	mov	r1, r1, rrx
 8002580:	e1a01061 	rrx	r1, r1
	add	r2, r2, #1
 8002584:	e2822001 	add	r2, r2, #1

	@ Make sure we did not bust our exponent.
	cmp	r2, #254
 8002588:	e35200fe 	cmp	r2, #254	; 0xfe
	bhs	LSYM(Lad_o)
 800258c:	2a000038 	bcs	8002674 <__addsf3+0x18c>
	@ Our result is now properly aligned into r0, remaining bits in r1.
	@ Pack final result together.
	@ Round with MSB of r1. If halfway between two numbers, round towards
	@ LSB of r0 = 0. 
LSYM(Lad_e):
	cmp	r1, #0x80000000
 8002590:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
	adc	r0, r0, r2, lsl #23
 8002594:	e0a00b82 	adc	r0, r0, r2, lsl #23
	do_it	eq
	biceq	r0, r0, #1
 8002598:	03c00001 	biceq	r0, r0, #1
	orr	r0, r0, r3
 800259c:	e1800003 	orr	r0, r0, r3
	RET
 80025a0:	e12fff1e 	bx	lr

	@ Result must be shifted left and exponent adjusted.
LSYM(Lad_a):
	movs	r1, r1, lsl #1
 80025a4:	e1b01081 	lsls	r1, r1, #1
	adc	r0, r0, r0
 80025a8:	e0a00000 	adc	r0, r0, r0
	tst	r0, #0x00800000
 80025ac:	e3100502 	tst	r0, #8388608	; 0x800000
	sub	r2, r2, #1
 80025b0:	e2422001 	sub	r2, r2, #1
	bne	LSYM(Lad_e)
 80025b4:	1afffff5 	bne	8002590 <__addsf3+0xa8>
	@ No rounding necessary since r1 will always be 0 at this point.
LSYM(Lad_l):

#if __ARM_ARCH__ < 5

	movs	ip, r0, lsr #12
 80025b8:	e1b0c620 	lsrs	ip, r0, #12
	moveq	r0, r0, lsl #12
 80025bc:	01a00600 	lsleq	r0, r0, #12
	subeq	r2, r2, #12
 80025c0:	0242200c 	subeq	r2, r2, #12
	tst	r0, #0x00ff0000
 80025c4:	e31008ff 	tst	r0, #16711680	; 0xff0000
	moveq	r0, r0, lsl #8
 80025c8:	01a00400 	lsleq	r0, r0, #8
	subeq	r2, r2, #8
 80025cc:	02422008 	subeq	r2, r2, #8
	tst	r0, #0x00f00000
 80025d0:	e310060f 	tst	r0, #15728640	; 0xf00000
	moveq	r0, r0, lsl #4
 80025d4:	01a00200 	lsleq	r0, r0, #4
	subeq	r2, r2, #4
 80025d8:	02422004 	subeq	r2, r2, #4
	tst	r0, #0x00c00000
 80025dc:	e3100503 	tst	r0, #12582912	; 0xc00000
	moveq	r0, r0, lsl #2
 80025e0:	01a00100 	lsleq	r0, r0, #2
	subeq	r2, r2, #2
 80025e4:	02422002 	subeq	r2, r2, #2
	cmp	r0, #0x00800000
 80025e8:	e3500502 	cmp	r0, #8388608	; 0x800000
	movcc	r0, r0, lsl #1
 80025ec:	31a00080 	lslcc	r0, r0, #1
	sbcs	r2, r2, #0
 80025f0:	e2d22000 	sbcs	r2, r2, #0
#endif

	@ Final result with sign
	@ If exponent negative, denormalize result.
	do_it	ge, et
	addge	r0, r0, r2, lsl #23
 80025f4:	a0800b82 	addge	r0, r0, r2, lsl #23
	rsblt	r2, r2, #0
 80025f8:	b2622000 	rsblt	r2, r2, #0
	orrge	r0, r0, r3
 80025fc:	a1800003 	orrge	r0, r0, r3
#if defined(__thumb2__)
	do_it	lt, t
	lsrlt	r0, r0, r2
	orrlt	r0, r3, r0
#else
	orrlt	r0, r3, r0, lsr r2
 8002600:	b1830230 	orrlt	r0, r3, r0, lsr r2
#endif
	RET
 8002604:	e12fff1e 	bx	lr

	@ Fixup and adjust bit position for denormalized arguments.
	@ Note that r2 must not remain equal to 0.
LSYM(Lad_d):
	teq	r2, #0
 8002608:	e3320000 	teq	r2, #0
	eor	r1, r1, #0x00800000
 800260c:	e2211502 	eor	r1, r1, #8388608	; 0x800000
	do_it	eq, te
	eoreq	r0, r0, #0x00800000
 8002610:	02200502 	eoreq	r0, r0, #8388608	; 0x800000
	addeq	r2, r2, #1
 8002614:	02822001 	addeq	r2, r2, #1
	subne	r3, r3, #1
 8002618:	12433001 	subne	r3, r3, #1
	b	LSYM(Lad_x)
 800261c:	eaffffca 	b	800254c <__addsf3+0x64>

LSYM(Lad_s):
	mov	r3, r1, lsl #1
 8002620:	e1a03081 	lsl	r3, r1, #1

	mvns	ip, r2, asr #24
 8002624:	e1f0cc42 	mvns	ip, r2, asr #24
	do_it	ne
	COND(mvn,s,ne)	ip, r3, asr #24
 8002628:	11f0cc43 	mvnsne	ip, r3, asr #24
	beq	LSYM(Lad_i)
 800262c:	0a000013 	beq	8002680 <__addsf3+0x198>

	teq	r2, r3
 8002630:	e1320003 	teq	r2, r3
	beq	1f
 8002634:	0a000002 	beq	8002644 <__addsf3+0x15c>

	@ Result is x + 0.0 = x or 0.0 + y = y.
	teq	r2, #0
 8002638:	e3320000 	teq	r2, #0
	do_it	eq
	moveq	r0, r1
 800263c:	01a00001 	moveq	r0, r1
	RET
 8002640:	e12fff1e 	bx	lr

1:	teq	r0, r1
 8002644:	e1300001 	teq	r0, r1

	@ Result is x - x = 0.
	do_it	ne, t
	movne	r0, #0
 8002648:	13a00000 	movne	r0, #0
	RETc(ne)
 800264c:	112fff1e 	bxne	lr

	@ Result is x + x = 2x.
	tst	r2, #0xff000000
 8002650:	e31204ff 	tst	r2, #-16777216	; 0xff000000
	bne	2f
 8002654:	1a000002 	bne	8002664 <__addsf3+0x17c>
	movs	r0, r0, lsl #1
 8002658:	e1b00080 	lsls	r0, r0, #1
	do_it	cs
	orrcs	r0, r0, #0x80000000
 800265c:	23800102 	orrcs	r0, r0, #-2147483648	; 0x80000000
	RET
 8002660:	e12fff1e 	bx	lr
2:	adds	r2, r2, #(2 << 24)
 8002664:	e2922402 	adds	r2, r2, #33554432	; 0x2000000
	do_it	cc, t
	addcc	r0, r0, #(1 << 23)
 8002668:	32800502 	addcc	r0, r0, #8388608	; 0x800000
	RETc(cc)
 800266c:	312fff1e 	bxcc	lr
	and	r3, r0, #0x80000000
 8002670:	e2003102 	and	r3, r0, #-2147483648	; 0x80000000

	@ Overflow: return INF.
LSYM(Lad_o):
	orr	r0, r3, #0x7f000000
 8002674:	e383047f 	orr	r0, r3, #2130706432	; 0x7f000000
	orr	r0, r0, #0x00800000
 8002678:	e3800502 	orr	r0, r0, #8388608	; 0x800000
	RET
 800267c:	e12fff1e 	bx	lr
	@   if r1 != INF/NAN: return r0 (which is INF/NAN)
	@   if r0 or r1 is NAN: return NAN
	@   if opposite sign: return NAN
	@   otherwise return r0 (which is INF or -INF)
LSYM(Lad_i):
	mvns	r2, r2, asr #24
 8002680:	e1f02c42 	mvns	r2, r2, asr #24
	do_it	ne, et
	movne	r0, r1
 8002684:	11a00001 	movne	r0, r1
	COND(mvn,s,eq)	r3, r3, asr #24
 8002688:	01f03c43 	mvnseq	r3, r3, asr #24
	movne	r1, r0
 800268c:	11a01000 	movne	r1, r0
	movs	r2, r0, lsl #9
 8002690:	e1b02480 	lsls	r2, r0, #9
	do_it	eq, te
	COND(mov,s,eq)	r3, r1, lsl #9
 8002694:	01b03481 	lslseq	r3, r1, #9
	teqeq	r0, r1
 8002698:	01300001 	teqeq	r0, r1
	orrne	r0, r0, #0x00400000	@ quiet NAN
 800269c:	13800501 	orrne	r0, r0, #4194304	; 0x400000
	RET
 80026a0:	e12fff1e 	bx	lr

080026a4 <__aeabi_ui2f>:
	FUNC_END subsf3

ARM_FUNC_START floatunsisf
ARM_FUNC_ALIAS aeabi_ui2f floatunsisf
		
	mov	r3, #0
 80026a4:	e3a03000 	mov	r3, #0
	b	1f
 80026a8:	ea000001 	b	80026b4 <__aeabi_i2f+0x8>

080026ac <__aeabi_i2f>:

ARM_FUNC_START floatsisf
ARM_FUNC_ALIAS aeabi_i2f floatsisf
	
	ands	r3, r0, #0x80000000
 80026ac:	e2103102 	ands	r3, r0, #-2147483648	; 0x80000000
	do_it	mi
	rsbmi	r0, r0, #0
 80026b0:	42600000 	rsbmi	r0, r0, #0

1:	movs	ip, r0
 80026b4:	e1b0c000 	movs	ip, r0
	do_it	eq
	RETc(eq)
 80026b8:	012fff1e 	bxeq	lr

	@ Add initial exponent to sign
	orr	r3, r3, #((127 + 23) << 23)
 80026bc:	e383344b 	orr	r3, r3, #1258291200	; 0x4b000000

	.ifnc	ah, r0
	mov	ah, r0
 80026c0:	e1a01000 	mov	r1, r0
	.endif
	mov	al, #0
 80026c4:	e3a00000 	mov	r0, #0
	b	2f
 80026c8:	ea00000f 	b	800270c <__aeabi_l2f+0x30>

080026cc <__aeabi_ul2f>:
	FUNC_END floatunsisf

ARM_FUNC_START floatundisf
ARM_FUNC_ALIAS aeabi_ul2f floatundisf

	orrs	r2, r0, r1
 80026cc:	e1902001 	orrs	r2, r0, r1
	do_it	eq, t
	mvfeqs	f0, #0.0
#else
	do_it	eq
#endif
	RETc(eq)
 80026d0:	012fff1e 	bxeq	lr

	mov	r3, #0
 80026d4:	e3a03000 	mov	r3, #0
	b	1f
 80026d8:	ea000005 	b	80026f4 <__aeabi_l2f+0x18>

080026dc <__aeabi_l2f>:

ARM_FUNC_START floatdisf
ARM_FUNC_ALIAS aeabi_l2f floatdisf

	orrs	r2, r0, r1
 80026dc:	e1902001 	orrs	r2, r0, r1
	do_it	eq, t
	mvfeqs	f0, #0.0
#else
	do_it	eq
#endif
	RETc(eq)
 80026e0:	012fff1e 	bxeq	lr

	ands	r3, ah, #0x80000000	@ sign bit in r3
 80026e4:	e2113102 	ands	r3, r1, #-2147483648	; 0x80000000
	bpl	1f
 80026e8:	5a000001 	bpl	80026f4 <__aeabi_l2f+0x18>
#if defined(__thumb2__)
	negs	al, al
	sbc	ah, ah, ah, lsl #1
#else
	rsbs	al, al, #0
 80026ec:	e2700000 	rsbs	r0, r0, #0
	rsc	ah, ah, #0
 80026f0:	e2e11000 	rsc	r1, r1, #0
	@ compatibility.
	str	lr, [sp, #-8]!
	adr	lr, LSYM(f0_ret)
#endif

	movs	ip, ah
 80026f4:	e1b0c001 	movs	ip, r1
	do_it	eq, tt
	moveq	ip, al
 80026f8:	01a0c000 	moveq	ip, r0
	moveq	ah, al
 80026fc:	01a01000 	moveq	r1, r0
	moveq	al, #0
 8002700:	03a00000 	moveq	r0, #0

	@ Add initial exponent to sign
	orr	r3, r3, #((127 + 23 + 32) << 23)
 8002704:	e383345b 	orr	r3, r3, #1526726656	; 0x5b000000
	do_it	eq
	subeq	r3, r3, #(32 << 23)
 8002708:	02433201 	subeq	r3, r3, #268435456	; 0x10000000
2:	sub	r3, r3, #(1 << 23)
 800270c:	e2433502 	sub	r3, r3, #8388608	; 0x800000

#if __ARM_ARCH__ < 5

	mov	r2, #23
 8002710:	e3a02017 	mov	r2, #23
	cmp	ip, #(1 << 16)
 8002714:	e35c0801 	cmp	ip, #65536	; 0x10000
	do_it	hs, t
	movhs	ip, ip, lsr #16
 8002718:	21a0c82c 	lsrcs	ip, ip, #16
	subhs	r2, r2, #16
 800271c:	22422010 	subcs	r2, r2, #16
	cmp	ip, #(1 << 8)
 8002720:	e35c0c01 	cmp	ip, #256	; 0x100
	do_it	hs, t
	movhs	ip, ip, lsr #8
 8002724:	21a0c42c 	lsrcs	ip, ip, #8
	subhs	r2, r2, #8
 8002728:	22422008 	subcs	r2, r2, #8
	cmp	ip, #(1 << 4)
 800272c:	e35c0010 	cmp	ip, #16
	do_it	hs, t
	movhs	ip, ip, lsr #4
 8002730:	21a0c22c 	lsrcs	ip, ip, #4
	subhs	r2, r2, #4
 8002734:	22422004 	subcs	r2, r2, #4
	cmp	ip, #(1 << 2)
 8002738:	e35c0004 	cmp	ip, #4
	do_it	hs, e
	subhs	r2, r2, #2
 800273c:	22422002 	subcs	r2, r2, #2
	sublo	r2, r2, ip, lsr #1
 8002740:	304220ac 	subcc	r2, r2, ip, lsr #1
	subs	r2, r2, ip, lsr #3
 8002744:	e05221ac 	subs	r2, r2, ip, lsr #3
	clz	r2, ip
	subs	r2, r2, #8

#endif

	sub	r3, r3, r2, lsl #23
 8002748:	e0433b82 	sub	r3, r3, r2, lsl #23
	blt	3f
 800274c:	ba000006 	blt	800276c <__aeabi_l2f+0x90>

	shiftop add r3 r3 ah lsl r2 ip
 8002750:	e0833211 	add	r3, r3, r1, lsl r2
	shift1	lsl, ip, al, r2
 8002754:	e1a0c210 	lsl	ip, r0, r2
	rsb	r2, r2, #32
 8002758:	e2622020 	rsb	r2, r2, #32
	cmp	ip, #0x80000000
 800275c:	e35c0102 	cmp	ip, #-2147483648	; 0x80000000
	shiftop adc r0 r3 al lsr r2 r2
 8002760:	e0a30230 	adc	r0, r3, r0, lsr r2
	do_it	eq
	biceq	r0, r0, #1
 8002764:	03c00001 	biceq	r0, r0, #1
	RET
 8002768:	e12fff1e 	bx	lr

3:	add	r2, r2, #32
 800276c:	e2822020 	add	r2, r2, #32
	shift1	lsl, ip, ah, r2
 8002770:	e1a0c211 	lsl	ip, r1, r2
	rsb	r2, r2, #32
 8002774:	e2622020 	rsb	r2, r2, #32
	orrs	al, al, ip, lsl #1
 8002778:	e190008c 	orrs	r0, r0, ip, lsl #1
	shiftop adc r0 r3 ah lsr r2 r2
 800277c:	e0a30231 	adc	r0, r3, r1, lsr r2
	do_it	eq
	biceq	r0, r0, ip, lsr #31
 8002780:	01c00fac 	biceq	r0, r0, ip, lsr #31
	RET
 8002784:	e12fff1e 	bx	lr

08002788 <__aeabi_fmul>:

ARM_FUNC_START mulsf3
ARM_FUNC_ALIAS aeabi_fmul mulsf3

	@ Mask out exponents, trap any zero/denormal/INF/NAN.
	mov	ip, #0xff
 8002788:	e3a0c0ff 	mov	ip, #255	; 0xff
	ands	r2, ip, r0, lsr #23
 800278c:	e01c2ba0 	ands	r2, ip, r0, lsr #23
	do_it	ne, tt
	COND(and,s,ne)	r3, ip, r1, lsr #23
 8002790:	101c3ba1 	andsne	r3, ip, r1, lsr #23
	teqne	r2, ip
 8002794:	1132000c 	teqne	r2, ip
	teqne	r3, ip
 8002798:	1133000c 	teqne	r3, ip
	beq	LSYM(Lml_s)
 800279c:	0a00003e 	beq	800289c <__aeabi_fmul+0x114>
LSYM(Lml_x):

	@ Add exponents together
	add	r2, r2, r3
 80027a0:	e0822003 	add	r2, r2, r3

	@ Determine final sign.
	eor	ip, r0, r1
 80027a4:	e020c001 	eor	ip, r0, r1

	@ Convert mantissa to unsigned integer.
	@ If power of two, branch to a separate path.
	@ Make up for final alignment.
	movs	r0, r0, lsl #9
 80027a8:	e1b00480 	lsls	r0, r0, #9
	do_it	ne
	COND(mov,s,ne)	r1, r1, lsl #9
 80027ac:	11b01481 	lslsne	r1, r1, #9
	beq	LSYM(Lml_1)
 80027b0:	0a000010 	beq	80027f8 <__aeabi_fmul+0x70>
	mov	r3, #0x08000000
 80027b4:	e3a03302 	mov	r3, #134217728	; 0x8000000
	orr	r0, r3, r0, lsr #5
 80027b8:	e18302a0 	orr	r0, r3, r0, lsr #5
	orr	r1, r3, r1, lsr #5
 80027bc:	e18312a1 	orr	r1, r3, r1, lsr #5
	do_pop	{r0, r4, r5}

#else

	@ The actual multiplication.
	umull	r3, r1, r0, r1
 80027c0:	e0813190 	umull	r3, r1, r0, r1

	@ Put final sign in r0.
	and	r0, ip, #0x80000000
 80027c4:	e20c0102 	and	r0, ip, #-2147483648	; 0x80000000

#endif

	@ Adjust result upon the MSB position.
	cmp	r1, #(1 << 23)
 80027c8:	e3510502 	cmp	r1, #8388608	; 0x800000
	do_it	cc, tt
	movcc	r1, r1, lsl #1
 80027cc:	31a01081 	lslcc	r1, r1, #1
	orrcc	r1, r1, r3, lsr #31
 80027d0:	31811fa3 	orrcc	r1, r1, r3, lsr #31
	movcc	r3, r3, lsl #1
 80027d4:	31a03083 	lslcc	r3, r3, #1

	@ Add sign to result.
	orr	r0, r0, r1
 80027d8:	e1800001 	orr	r0, r0, r1

	@ Apply exponent bias, check for under/overflow.
	sbc	r2, r2, #127
 80027dc:	e2c2207f 	sbc	r2, r2, #127	; 0x7f
	cmp	r2, #(254 - 1)
 80027e0:	e35200fd 	cmp	r2, #253	; 0xfd
	bhi	LSYM(Lml_u)
 80027e4:	8a00000f 	bhi	8002828 <__aeabi_fmul+0xa0>

	@ Round the result, merge final exponent.
	cmp	r3, #0x80000000
 80027e8:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
	adc	r0, r0, r2, lsl #23
 80027ec:	e0a00b82 	adc	r0, r0, r2, lsl #23
	do_it	eq
	biceq	r0, r0, #1
 80027f0:	03c00001 	biceq	r0, r0, #1
	RET
 80027f4:	e12fff1e 	bx	lr

	@ Multiplication by 0x1p*: let''s shortcut a lot of code.
LSYM(Lml_1):
	teq	r0, #0
 80027f8:	e3300000 	teq	r0, #0
	and	ip, ip, #0x80000000
 80027fc:	e20cc102 	and	ip, ip, #-2147483648	; 0x80000000
	do_it	eq
	moveq	r1, r1, lsl #9
 8002800:	01a01481 	lsleq	r1, r1, #9
	orr	r0, ip, r0, lsr #9
 8002804:	e18c04a0 	orr	r0, ip, r0, lsr #9
	orr	r0, r0, r1, lsr #9
 8002808:	e18004a1 	orr	r0, r0, r1, lsr #9
	subs	r2, r2, #127
 800280c:	e252207f 	subs	r2, r2, #127	; 0x7f
	do_it	gt, tt
	COND(rsb,s,gt)	r3, r2, #255
 8002810:	c27230ff 	rsbsgt	r3, r2, #255	; 0xff
	orrgt	r0, r0, r2, lsl #23
 8002814:	c1800b82 	orrgt	r0, r0, r2, lsl #23
	RETc(gt)
 8002818:	c12fff1e 	bxgt	lr

	@ Under/overflow: fix things up for the code below.
	orr	r0, r0, #0x00800000
 800281c:	e3800502 	orr	r0, r0, #8388608	; 0x800000
	mov	r3, #0
 8002820:	e3a03000 	mov	r3, #0
	subs	r2, r2, #1
 8002824:	e2522001 	subs	r2, r2, #1

LSYM(Lml_u):
	@ Overflow?
	bgt	LSYM(Lml_o)
 8002828:	ca000035 	bgt	8002904 <__aeabi_fmul+0x17c>

	@ Check if denormalized result is possible, otherwise return signed 0.
	cmn	r2, #(24 + 1)
 800282c:	e3720019 	cmn	r2, #25
	do_it	le, t
	bicle	r0, r0, #0x7fffffff
 8002830:	d2000102 	andle	r0, r0, #-2147483648	; 0x80000000
	RETc(le)
 8002834:	d12fff1e 	bxle	lr

	@ Shift value right, round, etc.
	rsb	r2, r2, #0
 8002838:	e2622000 	rsb	r2, r2, #0
	movs	r1, r0, lsl #1
 800283c:	e1b01080 	lsls	r1, r0, #1
	shift1	lsr, r1, r1, r2
 8002840:	e1a01231 	lsr	r1, r1, r2
	rsb	r2, r2, #32
 8002844:	e2622020 	rsb	r2, r2, #32
	shift1	lsl, ip, r0, r2
 8002848:	e1a0c210 	lsl	ip, r0, r2
	movs	r0, r1, rrx
 800284c:	e1b00061 	rrxs	r0, r1
	adc	r0, r0, #0
 8002850:	e2a00000 	adc	r0, r0, #0
	orrs	r3, r3, ip, lsl #1
 8002854:	e193308c 	orrs	r3, r3, ip, lsl #1
	do_it	eq
	biceq	r0, r0, ip, lsr #31
 8002858:	01c00fac 	biceq	r0, r0, ip, lsr #31
	RET
 800285c:	e12fff1e 	bx	lr

	@ One or both arguments are denormalized.
	@ Scale them leftwards and preserve sign bit.
LSYM(Lml_d):
	teq	r2, #0
 8002860:	e3320000 	teq	r2, #0
	and	ip, r0, #0x80000000
 8002864:	e200c102 	and	ip, r0, #-2147483648	; 0x80000000
1:	do_it	eq, tt
	moveq	r0, r0, lsl #1
 8002868:	01a00080 	lsleq	r0, r0, #1
	tsteq	r0, #0x00800000
 800286c:	03100502 	tsteq	r0, #8388608	; 0x800000
	subeq	r2, r2, #1
 8002870:	02422001 	subeq	r2, r2, #1
	beq	1b
 8002874:	0afffffb 	beq	8002868 <__aeabi_fmul+0xe0>
	orr	r0, r0, ip
 8002878:	e180000c 	orr	r0, r0, ip
	teq	r3, #0
 800287c:	e3330000 	teq	r3, #0
	and	ip, r1, #0x80000000
 8002880:	e201c102 	and	ip, r1, #-2147483648	; 0x80000000
2:	do_it	eq, tt
	moveq	r1, r1, lsl #1
 8002884:	01a01081 	lsleq	r1, r1, #1
	tsteq	r1, #0x00800000
 8002888:	03110502 	tsteq	r1, #8388608	; 0x800000
	subeq	r3, r3, #1
 800288c:	02433001 	subeq	r3, r3, #1
	beq	2b
 8002890:	0afffffb 	beq	8002884 <__aeabi_fmul+0xfc>
	orr	r1, r1, ip
 8002894:	e181100c 	orr	r1, r1, ip
	b	LSYM(Lml_x)
 8002898:	eaffffc0 	b	80027a0 <__aeabi_fmul+0x18>

LSYM(Lml_s):
	@ Isolate the INF and NAN cases away
	and	r3, ip, r1, lsr #23
 800289c:	e00c3ba1 	and	r3, ip, r1, lsr #23
	teq	r2, ip
 80028a0:	e132000c 	teq	r2, ip
	do_it	ne
	teqne	r3, ip
 80028a4:	1133000c 	teqne	r3, ip
	beq	1f
 80028a8:	0a000005 	beq	80028c4 <__aeabi_fmul+0x13c>

	@ Here, one or more arguments are either denormalized or zero.
	bics	ip, r0, #0x80000000
 80028ac:	e3d0c102 	bics	ip, r0, #-2147483648	; 0x80000000
	do_it	ne
	COND(bic,s,ne)	ip, r1, #0x80000000
 80028b0:	13d1c102 	bicsne	ip, r1, #-2147483648	; 0x80000000
	bne	LSYM(Lml_d)
 80028b4:	1affffe9 	bne	8002860 <__aeabi_fmul+0xd8>

	@ Result is 0, but determine sign anyway.
LSYM(Lml_z):
	eor	r0, r0, r1
 80028b8:	e0200001 	eor	r0, r0, r1
	bic	r0, r0, #0x7fffffff
 80028bc:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
	RET
 80028c0:	e12fff1e 	bx	lr

1:	@ One or both args are INF or NAN.
	teq	r0, #0x0
 80028c4:	e3300000 	teq	r0, #0
	do_it	ne, ett
	teqne	r0, #0x80000000
 80028c8:	13300102 	teqne	r0, #-2147483648	; 0x80000000
	moveq	r0, r1
 80028cc:	01a00001 	moveq	r0, r1
	teqne	r1, #0x0
 80028d0:	13310000 	teqne	r1, #0
	teqne	r1, #0x80000000
 80028d4:	13310102 	teqne	r1, #-2147483648	; 0x80000000
	beq	LSYM(Lml_n)		@ 0 * INF or INF * 0 -> NAN
 80028d8:	0a00000d 	beq	8002914 <__aeabi_fmul+0x18c>
	teq	r2, ip
 80028dc:	e132000c 	teq	r2, ip
	bne	1f
 80028e0:	1a000001 	bne	80028ec <__aeabi_fmul+0x164>
	movs	r2, r0, lsl #9
 80028e4:	e1b02480 	lsls	r2, r0, #9
	bne	LSYM(Lml_n)		@ NAN * <anything> -> NAN
 80028e8:	1a000009 	bne	8002914 <__aeabi_fmul+0x18c>
1:	teq	r3, ip
 80028ec:	e133000c 	teq	r3, ip
	bne	LSYM(Lml_i)
 80028f0:	1a000002 	bne	8002900 <__aeabi_fmul+0x178>
	movs	r3, r1, lsl #9
 80028f4:	e1b03481 	lsls	r3, r1, #9
	do_it	ne
	movne	r0, r1
 80028f8:	11a00001 	movne	r0, r1
	bne	LSYM(Lml_n)		@ <anything> * NAN -> NAN
 80028fc:	1a000004 	bne	8002914 <__aeabi_fmul+0x18c>

	@ Result is INF, but we need to determine its sign.
LSYM(Lml_i):
	eor	r0, r0, r1
 8002900:	e0200001 	eor	r0, r0, r1

	@ Overflow: return INF (sign already in r0).
LSYM(Lml_o):
	and	r0, r0, #0x80000000
 8002904:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
	orr	r0, r0, #0x7f000000
 8002908:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
	orr	r0, r0, #0x00800000
 800290c:	e3800502 	orr	r0, r0, #8388608	; 0x800000
	RET
 8002910:	e12fff1e 	bx	lr

	@ Return a quiet NAN.
LSYM(Lml_n):
	orr	r0, r0, #0x7f000000
 8002914:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
	orr	r0, r0, #0x00c00000
 8002918:	e3800503 	orr	r0, r0, #12582912	; 0xc00000
	RET
 800291c:	e12fff1e 	bx	lr

08002920 <__aeabi_fdiv>:

ARM_FUNC_START divsf3
ARM_FUNC_ALIAS aeabi_fdiv divsf3

	@ Mask out exponents, trap any zero/denormal/INF/NAN.
	mov	ip, #0xff
 8002920:	e3a0c0ff 	mov	ip, #255	; 0xff
	ands	r2, ip, r0, lsr #23
 8002924:	e01c2ba0 	ands	r2, ip, r0, lsr #23
	do_it	ne, tt
	COND(and,s,ne)	r3, ip, r1, lsr #23
 8002928:	101c3ba1 	andsne	r3, ip, r1, lsr #23
	teqne	r2, ip
 800292c:	1132000c 	teqne	r2, ip
	teqne	r3, ip
 8002930:	1133000c 	teqne	r3, ip
	beq	LSYM(Ldv_s)
 8002934:	0a00003a 	beq	8002a24 <__aeabi_fdiv+0x104>
LSYM(Ldv_x):

	@ Substract divisor exponent from dividend''s
	sub	r2, r2, r3
 8002938:	e0422003 	sub	r2, r2, r3

	@ Preserve final sign into ip.
	eor	ip, r0, r1
 800293c:	e020c001 	eor	ip, r0, r1

	@ Convert mantissa to unsigned integer.
	@ Dividend -> r3, divisor -> r1.
	movs	r1, r1, lsl #9
 8002940:	e1b01481 	lsls	r1, r1, #9
	mov	r0, r0, lsl #9
 8002944:	e1a00480 	lsl	r0, r0, #9
	beq	LSYM(Ldv_1)
 8002948:	0a00001c 	beq	80029c0 <__aeabi_fdiv+0xa0>
	mov	r3, #0x10000000
 800294c:	e3a03201 	mov	r3, #268435456	; 0x10000000
	orr	r1, r3, r1, lsr #4
 8002950:	e1831221 	orr	r1, r3, r1, lsr #4
	orr	r3, r3, r0, lsr #4
 8002954:	e1833220 	orr	r3, r3, r0, lsr #4

	@ Initialize r0 (result) with final sign bit.
	and	r0, ip, #0x80000000
 8002958:	e20c0102 	and	r0, ip, #-2147483648	; 0x80000000

	@ Ensure result will land to known bit position.
	@ Apply exponent bias accordingly.
	cmp	r3, r1
 800295c:	e1530001 	cmp	r3, r1
	do_it	cc
	movcc	r3, r3, lsl #1
 8002960:	31a03083 	lslcc	r3, r3, #1
	adc	r2, r2, #(127 - 2)
 8002964:	e2a2207d 	adc	r2, r2, #125	; 0x7d

	@ The actual division loop.
	mov	ip, #0x00800000
 8002968:	e3a0c502 	mov	ip, #8388608	; 0x800000
1:	cmp	r3, r1
 800296c:	e1530001 	cmp	r3, r1
	do_it	cs, t
	subcs	r3, r3, r1
 8002970:	20433001 	subcs	r3, r3, r1
	orrcs	r0, r0, ip
 8002974:	2180000c 	orrcs	r0, r0, ip
	cmp	r3, r1, lsr #1
 8002978:	e15300a1 	cmp	r3, r1, lsr #1
	do_it	cs, t
	subcs	r3, r3, r1, lsr #1
 800297c:	204330a1 	subcs	r3, r3, r1, lsr #1
	orrcs	r0, r0, ip, lsr #1
 8002980:	218000ac 	orrcs	r0, r0, ip, lsr #1
	cmp	r3, r1, lsr #2
 8002984:	e1530121 	cmp	r3, r1, lsr #2
	do_it	cs, t
	subcs	r3, r3, r1, lsr #2
 8002988:	20433121 	subcs	r3, r3, r1, lsr #2
	orrcs	r0, r0, ip, lsr #2
 800298c:	2180012c 	orrcs	r0, r0, ip, lsr #2
	cmp	r3, r1, lsr #3
 8002990:	e15301a1 	cmp	r3, r1, lsr #3
	do_it	cs, t
	subcs	r3, r3, r1, lsr #3
 8002994:	204331a1 	subcs	r3, r3, r1, lsr #3
	orrcs	r0, r0, ip, lsr #3
 8002998:	218001ac 	orrcs	r0, r0, ip, lsr #3
	movs	r3, r3, lsl #4
 800299c:	e1b03203 	lsls	r3, r3, #4
	do_it	ne
	COND(mov,s,ne)	ip, ip, lsr #4
 80029a0:	11b0c22c 	lsrsne	ip, ip, #4
	bne	1b
 80029a4:	1afffff0 	bne	800296c <__aeabi_fdiv+0x4c>

	@ Check exponent for under/overflow.
	cmp	r2, #(254 - 1)
 80029a8:	e35200fd 	cmp	r2, #253	; 0xfd
	bhi	LSYM(Lml_u)
 80029ac:	8affff9d 	bhi	8002828 <__aeabi_fmul+0xa0>

	@ Round the result, merge final exponent.
	cmp	r3, r1
 80029b0:	e1530001 	cmp	r3, r1
	adc	r0, r0, r2, lsl #23
 80029b4:	e0a00b82 	adc	r0, r0, r2, lsl #23
	do_it	eq
	biceq	r0, r0, #1
 80029b8:	03c00001 	biceq	r0, r0, #1
	RET
 80029bc:	e12fff1e 	bx	lr

	@ Division by 0x1p*: let''s shortcut a lot of code.
LSYM(Ldv_1):
	and	ip, ip, #0x80000000
 80029c0:	e20cc102 	and	ip, ip, #-2147483648	; 0x80000000
	orr	r0, ip, r0, lsr #9
 80029c4:	e18c04a0 	orr	r0, ip, r0, lsr #9
	adds	r2, r2, #127
 80029c8:	e292207f 	adds	r2, r2, #127	; 0x7f
	do_it	gt, tt
	COND(rsb,s,gt)	r3, r2, #255
 80029cc:	c27230ff 	rsbsgt	r3, r2, #255	; 0xff
	orrgt	r0, r0, r2, lsl #23
 80029d0:	c1800b82 	orrgt	r0, r0, r2, lsl #23
	RETc(gt)
 80029d4:	c12fff1e 	bxgt	lr

	orr	r0, r0, #0x00800000
 80029d8:	e3800502 	orr	r0, r0, #8388608	; 0x800000
	mov	r3, #0
 80029dc:	e3a03000 	mov	r3, #0
	subs	r2, r2, #1
 80029e0:	e2522001 	subs	r2, r2, #1
	b	LSYM(Lml_u)
 80029e4:	eaffff8f 	b	8002828 <__aeabi_fmul+0xa0>

	@ One or both arguments are denormalized.
	@ Scale them leftwards and preserve sign bit.
LSYM(Ldv_d):
	teq	r2, #0
 80029e8:	e3320000 	teq	r2, #0
	and	ip, r0, #0x80000000
 80029ec:	e200c102 	and	ip, r0, #-2147483648	; 0x80000000
1:	do_it	eq, tt
	moveq	r0, r0, lsl #1
 80029f0:	01a00080 	lsleq	r0, r0, #1
	tsteq	r0, #0x00800000
 80029f4:	03100502 	tsteq	r0, #8388608	; 0x800000
	subeq	r2, r2, #1
 80029f8:	02422001 	subeq	r2, r2, #1
	beq	1b
 80029fc:	0afffffb 	beq	80029f0 <__aeabi_fdiv+0xd0>
	orr	r0, r0, ip
 8002a00:	e180000c 	orr	r0, r0, ip
	teq	r3, #0
 8002a04:	e3330000 	teq	r3, #0
	and	ip, r1, #0x80000000
 8002a08:	e201c102 	and	ip, r1, #-2147483648	; 0x80000000
2:	do_it	eq, tt
	moveq	r1, r1, lsl #1
 8002a0c:	01a01081 	lsleq	r1, r1, #1
	tsteq	r1, #0x00800000
 8002a10:	03110502 	tsteq	r1, #8388608	; 0x800000
	subeq	r3, r3, #1
 8002a14:	02433001 	subeq	r3, r3, #1
	beq	2b
 8002a18:	0afffffb 	beq	8002a0c <__aeabi_fdiv+0xec>
	orr	r1, r1, ip
 8002a1c:	e181100c 	orr	r1, r1, ip
	b	LSYM(Ldv_x)
 8002a20:	eaffffc4 	b	8002938 <__aeabi_fdiv+0x18>

	@ One or both arguments are either INF, NAN, zero or denormalized.
LSYM(Ldv_s):
	and	r3, ip, r1, lsr #23
 8002a24:	e00c3ba1 	and	r3, ip, r1, lsr #23
	teq	r2, ip
 8002a28:	e132000c 	teq	r2, ip
	bne	1f
 8002a2c:	1a000005 	bne	8002a48 <__aeabi_fdiv+0x128>
	movs	r2, r0, lsl #9
 8002a30:	e1b02480 	lsls	r2, r0, #9
	bne	LSYM(Lml_n)		@ NAN / <anything> -> NAN
 8002a34:	1affffb6 	bne	8002914 <__aeabi_fmul+0x18c>
	teq	r3, ip
 8002a38:	e133000c 	teq	r3, ip
	bne	LSYM(Lml_i)		@ INF / <anything> -> INF
 8002a3c:	1affffaf 	bne	8002900 <__aeabi_fmul+0x178>
	mov	r0, r1
 8002a40:	e1a00001 	mov	r0, r1
	b	LSYM(Lml_n)		@ INF / (INF or NAN) -> NAN
 8002a44:	eaffffb2 	b	8002914 <__aeabi_fmul+0x18c>
1:	teq	r3, ip
 8002a48:	e133000c 	teq	r3, ip
	bne	2f
 8002a4c:	1a000003 	bne	8002a60 <__aeabi_fdiv+0x140>
	movs	r3, r1, lsl #9
 8002a50:	e1b03481 	lsls	r3, r1, #9
	beq	LSYM(Lml_z)		@ <anything> / INF -> 0
 8002a54:	0affff97 	beq	80028b8 <__aeabi_fmul+0x130>
	mov	r0, r1
 8002a58:	e1a00001 	mov	r0, r1
	b	LSYM(Lml_n)		@ <anything> / NAN -> NAN
 8002a5c:	eaffffac 	b	8002914 <__aeabi_fmul+0x18c>
2:	@ If both are nonzero, we need to normalize and resume above.
	bics	ip, r0, #0x80000000
 8002a60:	e3d0c102 	bics	ip, r0, #-2147483648	; 0x80000000
	do_it	ne
	COND(bic,s,ne)	ip, r1, #0x80000000
 8002a64:	13d1c102 	bicsne	ip, r1, #-2147483648	; 0x80000000
	bne	LSYM(Ldv_d)
 8002a68:	1affffde 	bne	80029e8 <__aeabi_fdiv+0xc8>
	@ One or both arguments are zero.
	bics	r2, r0, #0x80000000
 8002a6c:	e3d02102 	bics	r2, r0, #-2147483648	; 0x80000000
	bne	LSYM(Lml_i)		@ <non_zero> / 0 -> INF
 8002a70:	1affffa2 	bne	8002900 <__aeabi_fmul+0x178>
	bics	r3, r1, #0x80000000
 8002a74:	e3d13102 	bics	r3, r1, #-2147483648	; 0x80000000
	bne	LSYM(Lml_z)		@ 0 / <non_zero> -> 0
 8002a78:	1affff8e 	bne	80028b8 <__aeabi_fmul+0x130>
	b	LSYM(Lml_n)		@ 0 / 0 -> NAN
 8002a7c:	eaffffa4 	b	8002914 <__aeabi_fmul+0x18c>

08002a80 <__gesf2>:
	@ The following registers are clobbered by this function:
	@   ip, r0, r1, r2, r3

ARM_FUNC_START gtsf2
ARM_FUNC_ALIAS gesf2 gtsf2
	mov	ip, #-1
 8002a80:	e3e0c000 	mvn	ip, #0
	b	1f
 8002a84:	ea000002 	b	8002a94 <__cmpsf2+0x4>

08002a88 <__lesf2>:

ARM_FUNC_START ltsf2
ARM_FUNC_ALIAS lesf2 ltsf2
	mov	ip, #1
 8002a88:	e3a0c001 	mov	ip, #1
	b	1f
 8002a8c:	ea000000 	b	8002a94 <__cmpsf2+0x4>

08002a90 <__cmpsf2>:

ARM_FUNC_START cmpsf2
ARM_FUNC_ALIAS nesf2 cmpsf2
ARM_FUNC_ALIAS eqsf2 cmpsf2
	mov	ip, #1			@ how should we specify unordered here?
 8002a90:	e3a0c001 	mov	ip, #1

1:	str	ip, [sp, #-4]!
 8002a94:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)

	@ Trap any INF/NAN first.
	mov	r2, r0, lsl #1
 8002a98:	e1a02080 	lsl	r2, r0, #1
	mov	r3, r1, lsl #1
 8002a9c:	e1a03081 	lsl	r3, r1, #1
	mvns	ip, r2, asr #24
 8002aa0:	e1f0cc42 	mvns	ip, r2, asr #24
	do_it	ne
	COND(mvn,s,ne)	ip, r3, asr #24
 8002aa4:	11f0cc43 	mvnsne	ip, r3, asr #24
	beq	3f
 8002aa8:	0a000007 	beq	8002acc <__cmpsf2+0x3c>

	@ Compare values.
	@ Note that 0.0 is equal to -0.0.
2:	add	sp, sp, #4
 8002aac:	e28dd004 	add	sp, sp, #4
	orrs	ip, r2, r3, lsr #1	@ test if both are 0, clear C flag
 8002ab0:	e192c0a3 	orrs	ip, r2, r3, lsr #1
	do_it	ne
	teqne	r0, r1			@ if not 0 compare sign
 8002ab4:	11300001 	teqne	r0, r1
	do_it	pl
	COND(sub,s,pl)	r0, r2, r3		@ if same sign compare values, set r0
 8002ab8:	50520003 	subspl	r0, r2, r3

	@ Result:
	do_it	hi
	movhi	r0, r1, asr #31
 8002abc:	81a00fc1 	asrhi	r0, r1, #31
	do_it	lo
	mvnlo	r0, r1, asr #31
 8002ac0:	31e00fc1 	mvncc	r0, r1, asr #31
	do_it	ne
	orrne	r0, r0, #1
 8002ac4:	13800001 	orrne	r0, r0, #1
	RET
 8002ac8:	e12fff1e 	bx	lr

	@ Look for a NAN. 
3:	mvns	ip, r2, asr #24
 8002acc:	e1f0cc42 	mvns	ip, r2, asr #24
	bne	4f
 8002ad0:	1a000001 	bne	8002adc <__cmpsf2+0x4c>
	movs	ip, r0, lsl #9
 8002ad4:	e1b0c480 	lsls	ip, r0, #9
	bne	5f			@ r0 is NAN
 8002ad8:	1a000003 	bne	8002aec <__cmpsf2+0x5c>
4:	mvns	ip, r3, asr #24
 8002adc:	e1f0cc43 	mvns	ip, r3, asr #24
	bne	2b
 8002ae0:	1afffff1 	bne	8002aac <__cmpsf2+0x1c>
	movs	ip, r1, lsl #9
 8002ae4:	e1b0c481 	lsls	ip, r1, #9
	beq	2b			@ r1 is not NAN
 8002ae8:	0affffef 	beq	8002aac <__cmpsf2+0x1c>
5:	ldr	r0, [sp], #4		@ return unordered code.
 8002aec:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
	RET
 8002af0:	e12fff1e 	bx	lr

08002af4 <__aeabi_cfrcmple>:
	FUNC_END eqsf2
	FUNC_END cmpsf2

ARM_FUNC_START aeabi_cfrcmple

	mov	ip, r0
 8002af4:	e1a0c000 	mov	ip, r0
	mov	r0, r1
 8002af8:	e1a00001 	mov	r0, r1
	mov	r1, ip
 8002afc:	e1a0100c 	mov	r1, ip
	b	6f
 8002b00:	eaffffff 	b	8002b04 <__aeabi_cfcmpeq>

08002b04 <__aeabi_cfcmpeq>:
ARM_FUNC_START aeabi_cfcmpeq
ARM_FUNC_ALIAS aeabi_cfcmple aeabi_cfcmpeq

	@ The status-returning routines are required to preserve all
	@ registers except ip, lr, and cpsr.
6:	do_push	{r0, r1, r2, r3, lr}
 8002b04:	e92d400f 	push	{r0, r1, r2, r3, lr}
	ARM_CALL cmpsf2
 8002b08:	ebffffe0 	bl	8002a90 <__cmpsf2>
	@ Set the Z flag correctly, and the C flag unconditionally.
	cmp	r0, #0
 8002b0c:	e3500000 	cmp	r0, #0
	@ Clear the C flag if the return value was -1, indicating
	@ that the first operand was smaller than the second.
	do_it	mi
	cmnmi	r0, #0
 8002b10:	43700000 	cmnmi	r0, #0
	RETLDM	"r0, r1, r2, r3"
 8002b14:	e8bd400f 	pop	{r0, r1, r2, r3, lr}
 8002b18:	e12fff1e 	bx	lr

08002b1c <__aeabi_fcmpeq>:
	FUNC_END aeabi_cfcmpeq
	FUNC_END aeabi_cfrcmple

ARM_FUNC_START	aeabi_fcmpeq

	str	lr, [sp, #-8]!
 8002b1c:	e52de008 	str	lr, [sp, #-8]!
	ARM_CALL aeabi_cfcmple
 8002b20:	ebfffff7 	bl	8002b04 <__aeabi_cfcmpeq>
	do_it	eq, e
	moveq	r0, #1	@ Equal to.
 8002b24:	03a00001 	moveq	r0, #1
	movne	r0, #0	@ Less than, greater than, or unordered.
 8002b28:	13a00000 	movne	r0, #0
	RETLDM
 8002b2c:	e49de008 	ldr	lr, [sp], #8
 8002b30:	e12fff1e 	bx	lr

08002b34 <__aeabi_fcmplt>:

	FUNC_END aeabi_fcmpeq

ARM_FUNC_START	aeabi_fcmplt

	str	lr, [sp, #-8]!
 8002b34:	e52de008 	str	lr, [sp, #-8]!
	ARM_CALL aeabi_cfcmple
 8002b38:	ebfffff1 	bl	8002b04 <__aeabi_cfcmpeq>
	do_it	cc, e
	movcc	r0, #1	@ Less than.
 8002b3c:	33a00001 	movcc	r0, #1
	movcs	r0, #0	@ Equal to, greater than, or unordered.
 8002b40:	23a00000 	movcs	r0, #0
	RETLDM
 8002b44:	e49de008 	ldr	lr, [sp], #8
 8002b48:	e12fff1e 	bx	lr

08002b4c <__aeabi_fcmple>:

	FUNC_END aeabi_fcmplt

ARM_FUNC_START	aeabi_fcmple

	str	lr, [sp, #-8]!
 8002b4c:	e52de008 	str	lr, [sp, #-8]!
	ARM_CALL aeabi_cfcmple
 8002b50:	ebffffeb 	bl	8002b04 <__aeabi_cfcmpeq>
	do_it	ls, e
	movls	r0, #1  @ Less than or equal to.
 8002b54:	93a00001 	movls	r0, #1
	movhi	r0, #0	@ Greater than or unordered.
 8002b58:	83a00000 	movhi	r0, #0
	RETLDM
 8002b5c:	e49de008 	ldr	lr, [sp], #8
 8002b60:	e12fff1e 	bx	lr

08002b64 <__aeabi_fcmpge>:

	FUNC_END aeabi_fcmple

ARM_FUNC_START	aeabi_fcmpge

	str	lr, [sp, #-8]!
 8002b64:	e52de008 	str	lr, [sp, #-8]!
	ARM_CALL aeabi_cfrcmple
 8002b68:	ebffffe1 	bl	8002af4 <__aeabi_cfrcmple>
	do_it	ls, e
	movls	r0, #1	@ Operand 2 is less than or equal to operand 1.
 8002b6c:	93a00001 	movls	r0, #1
	movhi	r0, #0	@ Operand 2 greater than operand 1, or unordered.
 8002b70:	83a00000 	movhi	r0, #0
	RETLDM
 8002b74:	e49de008 	ldr	lr, [sp], #8
 8002b78:	e12fff1e 	bx	lr

08002b7c <__aeabi_fcmpgt>:

	FUNC_END aeabi_fcmpge

ARM_FUNC_START	aeabi_fcmpgt

	str	lr, [sp, #-8]!
 8002b7c:	e52de008 	str	lr, [sp, #-8]!
	ARM_CALL aeabi_cfrcmple
 8002b80:	ebffffdb 	bl	8002af4 <__aeabi_cfrcmple>
	do_it	cc, e
	movcc	r0, #1	@ Operand 2 is less than operand 1.
 8002b84:	33a00001 	movcc	r0, #1
	movcs	r0, #0  @ Operand 2 is greater than or equal to operand 1,
 8002b88:	23a00000 	movcs	r0, #0
			@ or they are unordered.
	RETLDM
 8002b8c:	e49de008 	ldr	lr, [sp], #8
 8002b90:	e12fff1e 	bx	lr

08002b94 <__aeabi_f2iz>:

ARM_FUNC_START fixsfsi
ARM_FUNC_ALIAS aeabi_f2iz fixsfsi

	@ check exponent range.
	mov	r2, r0, lsl #1
 8002b94:	e1a02080 	lsl	r2, r0, #1
	cmp	r2, #(127 << 24)
 8002b98:	e352047f 	cmp	r2, #2130706432	; 0x7f000000
	bcc	1f			@ value is too small
 8002b9c:	3a000008 	bcc	8002bc4 <__aeabi_f2iz+0x30>
	mov	r3, #(127 + 31)
 8002ba0:	e3a0309e 	mov	r3, #158	; 0x9e
	subs	r2, r3, r2, lsr #24
 8002ba4:	e0532c22 	subs	r2, r3, r2, lsr #24
	bls	2f			@ value is too large
 8002ba8:	9a000007 	bls	8002bcc <__aeabi_f2iz+0x38>

	@ scale value
	mov	r3, r0, lsl #8
 8002bac:	e1a03400 	lsl	r3, r0, #8
	orr	r3, r3, #0x80000000
 8002bb0:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
	tst	r0, #0x80000000		@ the sign bit
 8002bb4:	e3100102 	tst	r0, #-2147483648	; 0x80000000
	shift1	lsr, r0, r3, r2
 8002bb8:	e1a00233 	lsr	r0, r3, r2
	do_it	ne
	rsbne	r0, r0, #0
 8002bbc:	12600000 	rsbne	r0, r0, #0
	RET
 8002bc0:	e12fff1e 	bx	lr

1:	mov	r0, #0
 8002bc4:	e3a00000 	mov	r0, #0
	RET
 8002bc8:	e12fff1e 	bx	lr

2:	cmp	r2, #(127 + 31 - 0xff)
 8002bcc:	e3720061 	cmn	r2, #97	; 0x61
	bne	3f
 8002bd0:	1a000001 	bne	8002bdc <__aeabi_f2iz+0x48>
	movs	r2, r0, lsl #9
 8002bd4:	e1b02480 	lsls	r2, r0, #9
	bne	4f			@ r0 is NAN.
 8002bd8:	1a000002 	bne	8002be8 <__aeabi_f2iz+0x54>
3:	ands	r0, r0, #0x80000000	@ the sign bit
 8002bdc:	e2100102 	ands	r0, r0, #-2147483648	; 0x80000000
	do_it	eq
	moveq	r0, #0x7fffffff		@ the maximum signed positive si
 8002be0:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
	RET
 8002be4:	e12fff1e 	bx	lr

4:	mov	r0, #0			@ What should we convert NAN to?
 8002be8:	e3a00000 	mov	r0, #0
	RET
 8002bec:	e12fff1e 	bx	lr

08002bf0 <__aeabi_f2uiz>:

ARM_FUNC_START fixunssfsi
ARM_FUNC_ALIAS aeabi_f2uiz fixunssfsi

	@ check exponent range.
	movs	r2, r0, lsl #1
 8002bf0:	e1b02080 	lsls	r2, r0, #1
	bcs	1f			@ value is negative
 8002bf4:	2a000008 	bcs	8002c1c <__aeabi_f2uiz+0x2c>
	cmp	r2, #(127 << 24)
 8002bf8:	e352047f 	cmp	r2, #2130706432	; 0x7f000000
	bcc	1f			@ value is too small
 8002bfc:	3a000006 	bcc	8002c1c <__aeabi_f2uiz+0x2c>
	mov	r3, #(127 + 31)
 8002c00:	e3a0309e 	mov	r3, #158	; 0x9e
	subs	r2, r3, r2, lsr #24
 8002c04:	e0532c22 	subs	r2, r3, r2, lsr #24
	bmi	2f			@ value is too large
 8002c08:	4a000005 	bmi	8002c24 <__aeabi_f2uiz+0x34>

	@ scale the value
	mov	r3, r0, lsl #8
 8002c0c:	e1a03400 	lsl	r3, r0, #8
	orr	r3, r3, #0x80000000
 8002c10:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
	shift1	lsr, r0, r3, r2
 8002c14:	e1a00233 	lsr	r0, r3, r2
	RET
 8002c18:	e12fff1e 	bx	lr

1:	mov	r0, #0
 8002c1c:	e3a00000 	mov	r0, #0
	RET
 8002c20:	e12fff1e 	bx	lr

2:	cmp	r2, #(127 + 31 - 0xff)
 8002c24:	e3720061 	cmn	r2, #97	; 0x61
	bne	3f
 8002c28:	1a000001 	bne	8002c34 <__aeabi_f2uiz+0x44>
	movs	r2, r0, lsl #9
 8002c2c:	e1b02480 	lsls	r2, r0, #9
	bne	4f			@ r0 is NAN.
 8002c30:	1a000001 	bne	8002c3c <__aeabi_f2uiz+0x4c>
3:	mov	r0, #0xffffffff		@ maximum unsigned si
 8002c34:	e3e00000 	mvn	r0, #0
	RET
 8002c38:	e12fff1e 	bx	lr

4:	mov	r0, #0			@ What should we convert NAN to?
 8002c3c:	e3a00000 	mov	r0, #0
	RET
 8002c40:	e12fff1e 	bx	lr

08002c44 <_GLOBAL__sub_I_rx1>:

	// instance variables
	ring & rx, & tx;
	USART_TypeDef * USARTx;
public:
	USARTSerial(USART_TypeDef * usartx, ring & rxbuf, ring & txbuf) : rx(rxbuf), tx(txbuf) {
 8002c44:	f240 0398 	movw	r3, #152	; 0x98
 8002c48:	f2c2 0300 	movt	r3, #8192	; 0x2000
		USARTx = usartx;
 8002c4c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002c50:	f44f 4290 	mov.w	r2, #18432	; 0x4800
		} else {
			USART_SendData(USART3, tx3.ringout());
		}
	}
}
 8002c54:	b430      	push	{r4, r5}
 8002c56:	f2c4 0101 	movt	r1, #16385	; 0x4001

	// instance variables
	ring & rx, & tx;
	USART_TypeDef * USARTx;
public:
	USARTSerial(USART_TypeDef * usartx, ring & rxbuf, ring & txbuf) : rx(rxbuf), tx(txbuf) {
 8002c5a:	f503 7584 	add.w	r5, r3, #264	; 0x108
 8002c5e:	f503 7404 	add.w	r4, r3, #528	; 0x210
 8002c62:	f503 7046 	add.w	r0, r3, #792	; 0x318
		USARTx = usartx;
 8002c66:	f2c4 0200 	movt	r2, #16384	; 0x4000

	// instance variables
	ring & rx, & tx;
	USART_TypeDef * USARTx;
public:
	USARTSerial(USART_TypeDef * usartx, ring & rxbuf, ring & txbuf) : rx(rxbuf), tx(txbuf) {
 8002c6a:	f8c3 3420 	str.w	r3, [r3, #1056]	; 0x420
 8002c6e:	f8c3 5424 	str.w	r5, [r3, #1060]	; 0x424
		USARTx = usartx;
 8002c72:	f8c3 1428 	str.w	r1, [r3, #1064]	; 0x428

	// instance variables
	ring & rx, & tx;
	USART_TypeDef * USARTx;
public:
	USARTSerial(USART_TypeDef * usartx, ring & rxbuf, ring & txbuf) : rx(rxbuf), tx(txbuf) {
 8002c76:	f8c3 442c 	str.w	r4, [r3, #1068]	; 0x42c
 8002c7a:	f8c3 0430 	str.w	r0, [r3, #1072]	; 0x430
		USARTx = usartx;
 8002c7e:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
 8002c82:	bc30      	pop	{r4, r5}
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop

08002c88 <main>:
#include <stm32f4xx_conf.h>

#include "armduino.h"
#include "USARTSerial.h"

int main(void) {
 8002c88:	b570      	push	{r4, r5, r6, lr}

	usart3.begin(38400);
 8002c8a:	4874      	ldr	r0, [pc, #464]	; (8002e5c <main+0x1d4>)
#include <stm32f4xx_conf.h>

#include "armduino.h"
#include "USARTSerial.h"

int main(void) {
 8002c8c:	b084      	sub	sp, #16

	usart3.begin(38400);
 8002c8e:	f44f 4116 	mov.w	r1, #38400	; 0x9600
 8002c92:	f7fd fa79 	bl	8000188 <_ZN11USARTSerial5beginEm>
	uint16_t print(const float val, uint8_t prec = 2) {
		return printFloat(val, prec);
	}

	uint16_t println() { return print(nl); }
	uint16_t println(const char * s) { return print(s) + println(); }
 8002c96:	4972      	ldr	r1, [pc, #456]	; (8002e60 <main+0x1d8>)
 8002c98:	4870      	ldr	r0, [pc, #448]	; (8002e5c <main+0x1d4>)
 8002c9a:	f7fd fb83 	bl	80003a4 <_ZN11USARTSerial5printEPKc>
	uint16_t write(uint16_t * p, uint16_t length);
	uint16_t read();
	uint16_t available();
	void flush();

	uint16_t print(const char c) { return write((uint16_t)c); }
 8002c9e:	210a      	movs	r1, #10
 8002ca0:	486e      	ldr	r0, [pc, #440]	; (8002e5c <main+0x1d4>)
 8002ca2:	f7fd fb3b 	bl	800031c <_ZN11USARTSerial5writeEt>
 8002ca6:	210a      	movs	r1, #10
 8002ca8:	486c      	ldr	r0, [pc, #432]	; (8002e5c <main+0x1d4>)
 8002caa:	f7fd fb37 	bl	800031c <_ZN11USARTSerial5writeEt>
	usart3.println("Hi.");
	usart3.println();

	pinMode(PD12 | PD13 | PD14 | PD15, GPIO_Mode_OUT);
 8002cae:	f44f 209e 	mov.w	r0, #323584	; 0x4f000
 8002cb2:	2101      	movs	r1, #1
 8002cb4:	f7fd fd46 	bl	8000744 <pinMode>
		digitalWrite(PD12 | PD13 | PD14, RESET);
		_delay_ms(dval);

		usart3.print((float)(count++ / 32.0f), 3);
		usart3.print(", ");
		dval = (uint32) (92.0f + 36*sinf( (count % (uint32)(3.14159 * 2 * 32))/32.0f));
 8002cb8:	f641 1679 	movw	r6, #6521	; 0x1979

	pinMode(PD12 | PD13 | PD14 | PD15, GPIO_Mode_OUT);
		//GPIO_Speed_50MHz, GPIO_OType_PP, GPIO_PuPd_NOPULL);

	uint16_t count = 0;
	uint32_t dval = 50;
 8002cbc:	2432      	movs	r4, #50	; 0x32
	usart3.println();

	pinMode(PD12 | PD13 | PD14 | PD15, GPIO_Mode_OUT);
		//GPIO_Speed_50MHz, GPIO_OType_PP, GPIO_PuPd_NOPULL);

	uint16_t count = 0;
 8002cbe:	2500      	movs	r5, #0
		digitalWrite(PD12 | PD13 | PD14, RESET);
		_delay_ms(dval);

		usart3.print((float)(count++ / 32.0f), 3);
		usart3.print(", ");
		dval = (uint32) (92.0f + 36*sinf( (count % (uint32)(3.14159 * 2 * 32))/32.0f));
 8002cc0:	f2c0 268c 	movt	r6, #652	; 0x28c

	uint16_t count = 0;
	uint32_t dval = 50;

	while (1) {
		digitalWrite(PD12, SET);
 8002cc4:	f44f 2082 	mov.w	r0, #266240	; 0x41000
 8002cc8:	2101      	movs	r1, #1
 8002cca:	f7fd fd7d 	bl	80007c8 <digitalWrite>
		digitalWrite(PD13 | PD14 | PD15, RESET);
 8002cce:	f44f 209c 	mov.w	r0, #319488	; 0x4e000
 8002cd2:	2100      	movs	r1, #0
 8002cd4:	f7fd fd78 	bl	80007c8 <digitalWrite>
 8002cd8:	4623      	mov	r3, r4
    __asm__ __volatile__ ("nop\n\t":::"memory");	\
} while (0)

inline void _delay_ms(uint32_t t) {
	while (t-- > 0) {
		__delay();
 8002cda:	2000      	movs	r0, #0
 8002cdc:	f242 710f 	movw	r1, #9999	; 0x270f
  for (i = 0; i < 10000; ++i)				\
    __asm__ __volatile__ ("nop\n\t":::"memory");	\
} while (0)

inline void _delay_ms(uint32_t t) {
	while (t-- > 0) {
 8002ce0:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8002ce4:	d30d      	bcc.n	8002d02 <main+0x7a>
		__delay();
 8002ce6:	9000      	str	r0, [sp, #0]
 8002ce8:	9a00      	ldr	r2, [sp, #0]
 8002cea:	428a      	cmp	r2, r1
 8002cec:	d8f8      	bhi.n	8002ce0 <main+0x58>
 8002cee:	bf00      	nop
 8002cf0:	9a00      	ldr	r2, [sp, #0]
 8002cf2:	3201      	adds	r2, #1
 8002cf4:	9200      	str	r2, [sp, #0]
 8002cf6:	9a00      	ldr	r2, [sp, #0]
 8002cf8:	428a      	cmp	r2, r1
 8002cfa:	d9f8      	bls.n	8002cee <main+0x66>
  for (i = 0; i < 10000; ++i)				\
    __asm__ __volatile__ ("nop\n\t":::"memory");	\
} while (0)

inline void _delay_ms(uint32_t t) {
	while (t-- > 0) {
 8002cfc:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8002d00:	d2f1      	bcs.n	8002ce6 <main+0x5e>
		_delay_ms(dval);
		digitalWrite(PD13, SET);
 8002d02:	f44f 2084 	mov.w	r0, #270336	; 0x42000
 8002d06:	2101      	movs	r1, #1
 8002d08:	f7fd fd5e 	bl	80007c8 <digitalWrite>
		digitalWrite(PD12 | PD14 | PD15, RESET);
 8002d0c:	f44f 209a 	mov.w	r0, #315392	; 0x4d000
 8002d10:	2100      	movs	r1, #0
 8002d12:	f7fd fd59 	bl	80007c8 <digitalWrite>
 8002d16:	4623      	mov	r3, r4
		__delay();
 8002d18:	2000      	movs	r0, #0
 8002d1a:	f242 710f 	movw	r1, #9999	; 0x270f
  for (i = 0; i < 10000; ++i)				\
    __asm__ __volatile__ ("nop\n\t":::"memory");	\
} while (0)

inline void _delay_ms(uint32_t t) {
	while (t-- > 0) {
 8002d1e:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8002d22:	d30d      	bcc.n	8002d40 <main+0xb8>
		__delay();
 8002d24:	9001      	str	r0, [sp, #4]
 8002d26:	9a01      	ldr	r2, [sp, #4]
 8002d28:	428a      	cmp	r2, r1
 8002d2a:	d8f8      	bhi.n	8002d1e <main+0x96>
 8002d2c:	bf00      	nop
 8002d2e:	9a01      	ldr	r2, [sp, #4]
 8002d30:	3201      	adds	r2, #1
 8002d32:	9201      	str	r2, [sp, #4]
 8002d34:	9a01      	ldr	r2, [sp, #4]
 8002d36:	428a      	cmp	r2, r1
 8002d38:	d9f8      	bls.n	8002d2c <main+0xa4>
  for (i = 0; i < 10000; ++i)				\
    __asm__ __volatile__ ("nop\n\t":::"memory");	\
} while (0)

inline void _delay_ms(uint32_t t) {
	while (t-- > 0) {
 8002d3a:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8002d3e:	d2f1      	bcs.n	8002d24 <main+0x9c>
		_delay_ms(dval);
		digitalWrite(PD14, SET);
 8002d40:	f44f 2088 	mov.w	r0, #278528	; 0x44000
 8002d44:	2101      	movs	r1, #1
 8002d46:	f7fd fd3f 	bl	80007c8 <digitalWrite>
		digitalWrite(PD12 | PD13 | PD15, RESET);
 8002d4a:	f44f 2096 	mov.w	r0, #307200	; 0x4b000
 8002d4e:	2100      	movs	r1, #0
 8002d50:	f7fd fd3a 	bl	80007c8 <digitalWrite>
 8002d54:	4623      	mov	r3, r4
		__delay();
 8002d56:	2000      	movs	r0, #0
 8002d58:	f242 710f 	movw	r1, #9999	; 0x270f
  for (i = 0; i < 10000; ++i)				\
    __asm__ __volatile__ ("nop\n\t":::"memory");	\
} while (0)

inline void _delay_ms(uint32_t t) {
	while (t-- > 0) {
 8002d5c:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8002d60:	d30d      	bcc.n	8002d7e <main+0xf6>
		__delay();
 8002d62:	9002      	str	r0, [sp, #8]
 8002d64:	9a02      	ldr	r2, [sp, #8]
 8002d66:	428a      	cmp	r2, r1
 8002d68:	d8f8      	bhi.n	8002d5c <main+0xd4>
 8002d6a:	bf00      	nop
 8002d6c:	9a02      	ldr	r2, [sp, #8]
 8002d6e:	3201      	adds	r2, #1
 8002d70:	9202      	str	r2, [sp, #8]
 8002d72:	9a02      	ldr	r2, [sp, #8]
 8002d74:	428a      	cmp	r2, r1
 8002d76:	d9f8      	bls.n	8002d6a <main+0xe2>
  for (i = 0; i < 10000; ++i)				\
    __asm__ __volatile__ ("nop\n\t":::"memory");	\
} while (0)

inline void _delay_ms(uint32_t t) {
	while (t-- > 0) {
 8002d78:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8002d7c:	d2f1      	bcs.n	8002d62 <main+0xda>
		_delay_ms(dval);
		digitalWrite(PD15, SET);
 8002d7e:	f44f 2090 	mov.w	r0, #294912	; 0x48000
 8002d82:	2101      	movs	r1, #1
 8002d84:	f7fd fd20 	bl	80007c8 <digitalWrite>
		digitalWrite(PD12 | PD13 | PD14, RESET);
 8002d88:	2100      	movs	r1, #0
 8002d8a:	f44f 208e 	mov.w	r0, #290816	; 0x47000
 8002d8e:	f7fd fd1b 	bl	80007c8 <digitalWrite>
		__delay();
 8002d92:	2100      	movs	r1, #0
 8002d94:	f242 720f 	movw	r2, #9999	; 0x270f
  for (i = 0; i < 10000; ++i)				\
    __asm__ __volatile__ ("nop\n\t":::"memory");	\
} while (0)

inline void _delay_ms(uint32_t t) {
	while (t-- > 0) {
 8002d98:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
 8002d9c:	d30d      	bcc.n	8002dba <main+0x132>
		__delay();
 8002d9e:	9103      	str	r1, [sp, #12]
 8002da0:	9b03      	ldr	r3, [sp, #12]
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d8f8      	bhi.n	8002d98 <main+0x110>
 8002da6:	bf00      	nop
 8002da8:	9b03      	ldr	r3, [sp, #12]
 8002daa:	3301      	adds	r3, #1
 8002dac:	9303      	str	r3, [sp, #12]
 8002dae:	9b03      	ldr	r3, [sp, #12]
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d9f8      	bls.n	8002da6 <main+0x11e>
  for (i = 0; i < 10000; ++i)				\
    __asm__ __volatile__ ("nop\n\t":::"memory");	\
} while (0)

inline void _delay_ms(uint32_t t) {
	while (t-- > 0) {
 8002db4:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
 8002db8:	d2f1      	bcs.n	8002d9e <main+0x116>
		_delay_ms(dval);

		usart3.print((float)(count++ / 32.0f), 3);
 8002dba:	4628      	mov	r0, r5
 8002dbc:	f7ff ec76 	blx	80026ac <__aeabi_i2f>
 8002dc0:	f04f 5174 	mov.w	r1, #1023410176	; 0x3d000000
 8002dc4:	f7ff ece0 	blx	8002788 <__aeabi_fmul>
 8002dc8:	3501      	adds	r5, #1
	}
	uint16_t print(const int32_t val, const uint8_t base = DEC) {
		return ( val < 0 ? print('-') : 0) + printNumber(abs(val), base);
	}
	uint16_t print(const float val, uint8_t prec = 2) {
		return printFloat(val, prec);
 8002dca:	2203      	movs	r2, #3
 8002dcc:	4601      	mov	r1, r0
 8002dce:	4823      	ldr	r0, [pc, #140]	; (8002e5c <main+0x1d4>)
 8002dd0:	f7fd fb3e 	bl	8000450 <_ZN11USARTSerial10printFloatEfh>
 8002dd4:	b2ad      	uxth	r5, r5
		usart3.print(", ");
 8002dd6:	4923      	ldr	r1, [pc, #140]	; (8002e64 <main+0x1dc>)
 8002dd8:	4820      	ldr	r0, [pc, #128]	; (8002e5c <main+0x1d4>)
 8002dda:	f7fd fae3 	bl	80003a4 <_ZN11USARTSerial5printEPKc>
		dval = (uint32) (92.0f + 36*sinf( (count % (uint32)(3.14159 * 2 * 32))/32.0f));
 8002dde:	fba6 3005 	umull	r3, r0, r6, r5
 8002de2:	0840      	lsrs	r0, r0, #1
 8002de4:	23c9      	movs	r3, #201	; 0xc9
 8002de6:	fb03 5010 	mls	r0, r3, r0, r5
 8002dea:	b280      	uxth	r0, r0
 8002dec:	f7ff ec5a 	blx	80026a4 <__aeabi_ui2f>
 8002df0:	f04f 5174 	mov.w	r1, #1023410176	; 0x3d000000
 8002df4:	f7ff ecc8 	blx	8002788 <__aeabi_fmul>
 8002df8:	f7fe fc54 	bl	80016a4 <sinf>
 8002dfc:	2100      	movs	r1, #0
 8002dfe:	f2c4 2110 	movt	r1, #16912	; 0x4210
 8002e02:	f7ff ecc2 	blx	8002788 <__aeabi_fmul>
 8002e06:	2100      	movs	r1, #0
 8002e08:	f2c4 21b8 	movt	r1, #17080	; 0x42b8
 8002e0c:	f7ff eb6c 	blx	80024e8 <__addsf3>
 8002e10:	f7ff eeee 	blx	8002bf0 <__aeabi_f2uiz>
	uint16_t println(const char * s) { return print(s) + println(); }
	uint16_t println(const float val, uint8_t prec = 2) {
		return print(val, prec) + println();
	}
	uint16_t println(const uint32_t val, const uint8_t base = DEC) {
		return printNumber(val, base) + println();
 8002e14:	220a      	movs	r2, #10
 8002e16:	4601      	mov	r1, r0
 8002e18:	4604      	mov	r4, r0
 8002e1a:	4810      	ldr	r0, [pc, #64]	; (8002e5c <main+0x1d4>)
 8002e1c:	f7fd fad6 	bl	80003cc <_ZN11USARTSerial11printNumberEmh>
	uint16_t write(uint16_t * p, uint16_t length);
	uint16_t read();
	uint16_t available();
	void flush();

	uint16_t print(const char c) { return write((uint16_t)c); }
 8002e20:	480e      	ldr	r0, [pc, #56]	; (8002e5c <main+0x1d4>)
 8002e22:	210a      	movs	r1, #10
 8002e24:	f7fd fa7a 	bl	800031c <_ZN11USARTSerial5writeEt>
		usart3.println(dval);
		if ( usart3.available() > 0 ) {
 8002e28:	480c      	ldr	r0, [pc, #48]	; (8002e5c <main+0x1d4>)
 8002e2a:	f7fd fb6b 	bl	8000504 <_ZN11USARTSerial9availableEv>
 8002e2e:	b958      	cbnz	r0, 8002e48 <main+0x1c0>
 8002e30:	e748      	b.n	8002cc4 <main+0x3c>
			while ( usart3.available() > 0 ) {
				usart3.print((char) usart3.read());
 8002e32:	480a      	ldr	r0, [pc, #40]	; (8002e5c <main+0x1d4>)
 8002e34:	f7fd fb98 	bl	8000568 <_ZN11USARTSerial4readEv>
 8002e38:	b2c1      	uxtb	r1, r0
 8002e3a:	4808      	ldr	r0, [pc, #32]	; (8002e5c <main+0x1d4>)
 8002e3c:	f7fd fa6e 	bl	800031c <_ZN11USARTSerial5writeEt>
 8002e40:	4806      	ldr	r0, [pc, #24]	; (8002e5c <main+0x1d4>)
 8002e42:	2120      	movs	r1, #32
 8002e44:	f7fd fa6a 	bl	800031c <_ZN11USARTSerial5writeEt>
		usart3.print((float)(count++ / 32.0f), 3);
		usart3.print(", ");
		dval = (uint32) (92.0f + 36*sinf( (count % (uint32)(3.14159 * 2 * 32))/32.0f));
		usart3.println(dval);
		if ( usart3.available() > 0 ) {
			while ( usart3.available() > 0 ) {
 8002e48:	4804      	ldr	r0, [pc, #16]	; (8002e5c <main+0x1d4>)
 8002e4a:	f7fd fb5b 	bl	8000504 <_ZN11USARTSerial9availableEv>
 8002e4e:	2800      	cmp	r0, #0
 8002e50:	d1ef      	bne.n	8002e32 <main+0x1aa>
 8002e52:	210a      	movs	r1, #10
 8002e54:	4801      	ldr	r0, [pc, #4]	; (8002e5c <main+0x1d4>)
 8002e56:	f7fd fa61 	bl	800031c <_ZN11USARTSerial5writeEt>
 8002e5a:	e733      	b.n	8002cc4 <main+0x3c>
 8002e5c:	200004c4 	.word	0x200004c4
 8002e60:	08003288 	.word	0x08003288
 8002e64:	0800328c 	.word	0x0800328c

08002e68 <Reset_Handler>:
 8002e68:	2100      	movs	r1, #0
 8002e6a:	f000 b804 	b.w	8002e76 <LoopCopyDataInit>

08002e6e <CopyDataInit>:
 8002e6e:	4b0c      	ldr	r3, [pc, #48]	; (8002ea0 <LoopFillZerobss+0x12>)
 8002e70:	585b      	ldr	r3, [r3, r1]
 8002e72:	5043      	str	r3, [r0, r1]
 8002e74:	3104      	adds	r1, #4

08002e76 <LoopCopyDataInit>:
 8002e76:	480b      	ldr	r0, [pc, #44]	; (8002ea4 <LoopFillZerobss+0x16>)
 8002e78:	4b0b      	ldr	r3, [pc, #44]	; (8002ea8 <LoopFillZerobss+0x1a>)
 8002e7a:	1842      	adds	r2, r0, r1
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	f4ff aff6 	bcc.w	8002e6e <CopyDataInit>
 8002e82:	4a0a      	ldr	r2, [pc, #40]	; (8002eac <LoopFillZerobss+0x1e>)
 8002e84:	f000 b803 	b.w	8002e8e <LoopFillZerobss>

08002e88 <FillZerobss>:
 8002e88:	2300      	movs	r3, #0
 8002e8a:	f842 3b04 	str.w	r3, [r2], #4

08002e8e <LoopFillZerobss>:
 8002e8e:	4b08      	ldr	r3, [pc, #32]	; (8002eb0 <LoopFillZerobss+0x22>)
 8002e90:	429a      	cmp	r2, r3
 8002e92:	f4ff aff9 	bcc.w	8002e88 <FillZerobss>
 8002e96:	f7fe fb35 	bl	8001504 <SystemInit>
 8002e9a:	f7ff fef5 	bl	8002c88 <main>
 8002e9e:	4770      	bx	lr
 8002ea0:	08003294 	.word	0x08003294
 8002ea4:	20000000 	.word	0x20000000
 8002ea8:	20000098 	.word	0x20000098
 8002eac:	20000098 	.word	0x20000098
 8002eb0:	200004d0 	.word	0x200004d0

08002eb4 <ADC_IRQHandler>:
 8002eb4:	f7ff bffe 	b.w	8002eb4 <ADC_IRQHandler>

08002eb8 <npio2_hw>:
 8002eb8:	0f00 3fc9 0f00 4049 cb00 4096 0f00 40c9     ...?..I@...@...@
 8002ec8:	5300 40fb cb00 4116 ed00 412f 0f00 4149     .S.@...A../A..IA
 8002ed8:	3100 4162 5300 417b 3a00 418a cb00 4196     .1bA.S{A.:.A...A
 8002ee8:	5c00 41a3 ed00 41af 7e00 41bc 0f00 41c9     .\.A...A.~.A...A
 8002ef8:	a000 41d5 3100 41e2 c200 41ee 5300 41fb     ...A.1.A...A.S.A
 8002f08:	f200 4203 3a00 420a 8300 4210 cb00 4216     ...B.:.B...B...B
 8002f18:	1400 421d 5c00 4223 a500 4229 ed00 422f     ...B.\#B..)B../B
 8002f28:	3600 4236 7e00 423c c700 4242 0f00 4249     .66B.~<B..BB..IB

08002f38 <two_over_pi>:
 8002f38:	00a2 0000 00f9 0000 0083 0000 006e 0000     ............n...
 8002f48:	004e 0000 0044 0000 0015 0000 0029 0000     N...D.......)...
 8002f58:	00fc 0000 0027 0000 0057 0000 00d1 0000     ....'...W.......
 8002f68:	00f5 0000 0034 0000 00dd 0000 00c0 0000     ....4...........
 8002f78:	00db 0000 0062 0000 0095 0000 0099 0000     ....b...........
 8002f88:	003c 0000 0043 0000 0090 0000 0041 0000     <...C.......A...
 8002f98:	00fe 0000 0051 0000 0063 0000 00ab 0000     ....Q...c.......
 8002fa8:	00de 0000 00bb 0000 00c5 0000 0061 0000     ............a...
 8002fb8:	00b7 0000 0024 0000 006e 0000 003a 0000     ....$...n...:...
 8002fc8:	0042 0000 004d 0000 00d2 0000 00e0 0000     B...M...........
 8002fd8:	0006 0000 0049 0000 002e 0000 00ea 0000     ....I...........
 8002fe8:	0009 0000 00d1 0000 0092 0000 001c 0000     ................
 8002ff8:	00fe 0000 001d 0000 00eb 0000 001c 0000     ................
 8003008:	00b1 0000 0029 0000 00a7 0000 003e 0000     ....).......>...
 8003018:	00e8 0000 0082 0000 0035 0000 00f5 0000     ........5.......
 8003028:	002e 0000 00bb 0000 0044 0000 0084 0000     ........D.......
 8003038:	00e9 0000 009c 0000 0070 0000 0026 0000     ........p...&...
 8003048:	00b4 0000 005f 0000 007e 0000 0041 0000     ...._...~...A...
 8003058:	0039 0000 0091 0000 00d6 0000 0039 0000     9...........9...
 8003068:	0083 0000 0053 0000 0039 0000 00f4 0000     ....S...9.......
 8003078:	009c 0000 0084 0000 005f 0000 008b 0000     ........_.......
 8003088:	00bd 0000 00f9 0000 0028 0000 003b 0000     ........(...;...
 8003098:	001f 0000 00f8 0000 0097 0000 00ff 0000     ................
 80030a8:	00de 0000 0005 0000 0098 0000 000f 0000     ................
 80030b8:	00ef 0000 002f 0000 0011 0000 008b 0000     ..../...........
 80030c8:	005a 0000 000a 0000 006d 0000 001f 0000     Z.......m.......
 80030d8:	006d 0000 0036 0000 007e 0000 00cf 0000     m...6...~.......
 80030e8:	0027 0000 00cb 0000 0009 0000 00b7 0000     '...............
 80030f8:	004f 0000 0046 0000 003f 0000 0066 0000     O...F...?...f...
 8003108:	009e 0000 005f 0000 00ea 0000 002d 0000     ...._.......-...
 8003118:	0075 0000 0027 0000 00ba 0000 00c7 0000     u...'...........
 8003128:	00eb 0000 00e5 0000 00f1 0000 007b 0000     ............{...
 8003138:	003d 0000 0007 0000 0039 0000 00f7 0000     =.......9.......
 8003148:	008a 0000 0052 0000 0092 0000 00ea 0000     ....R...........
 8003158:	006b 0000 00fb 0000 005f 0000 00b1 0000     k......._.......
 8003168:	001f 0000 008d 0000 005d 0000 0008 0000     ........].......
 8003178:	0056 0000 0003 0000 0030 0000 0046 0000     V.......0...F...
 8003188:	00fc 0000 007b 0000 006b 0000 00ab 0000     ....{...k.......
 8003198:	00f0 0000 00cf 0000 00bc 0000 0020 0000     ............ ...
 80031a8:	009a 0000 00f4 0000 0036 0000 001d 0000     ........6.......
 80031b8:	00a9 0000 00e3 0000 0091 0000 0061 0000     ............a...
 80031c8:	005e 0000 00e6 0000 001b 0000 0008 0000     ^...............
 80031d8:	0065 0000 0099 0000 0085 0000 005f 0000     e..........._...
 80031e8:	0014 0000 00a0 0000 0068 0000 0040 0000     ........h...@...
 80031f8:	008d 0000 00ff 0000 00d8 0000 0080 0000     ................
 8003208:	004d 0000 0073 0000 0027 0000 0031 0000     M...s...'...1...
 8003218:	0006 0000 0006 0000 0015 0000 0056 0000     ............V...
 8003228:	00ca 0000 0073 0000 00a8 0000 00c9 0000     ....s...........
 8003238:	0060 0000 00e2 0000 007b 0000 00c0 0000     `.......{.......
 8003248:	008c 0000 006b 0000                         ....k...

08003250 <init_jk>:
 8003250:	0004 0000 0007 0000 0009 0000               ............

0800325c <PIo2>:
 800325c:	0000 3fc9 0000 39f0 0000 37da 0000 33a2     ...?...9...7...3
 800326c:	0000 2e84 0000 2b50 0000 27c2 0000 22d0     ......P+...'..."
 800327c:	0000 1fc4 0000 1bc6 0000 1744 6948 002e     ..........D.Hi..
 800328c:	202c 0000                                   , ..
