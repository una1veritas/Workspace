
stm32f4-usart_test.elf:     file format elf32-littlearm


Disassembly of section .text:

08000188 <pinMode>:
 static const uint8_t MISO = 12;
 static const uint8_t SCK  = 13; // PB7
 static const uint8_t LED_BUILTIN = 14;
 */

void pinMode(uint32_t portpin, GPIOMode_TypeDef mode) {
 8000188:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(GPIOPeriph[portpin>>16 & 0xf], ENABLE);
 800018a:	f3c0 4503 	ubfx	r5, r0, #16, #4
 800018e:	4c0d      	ldr	r4, [pc, #52]	; (80001c4 <pinMode+0x3c>)
 static const uint8_t MISO = 12;
 static const uint8_t SCK  = 13; // PB7
 static const uint8_t LED_BUILTIN = 14;
 */

void pinMode(uint32_t portpin, GPIOMode_TypeDef mode) {
 8000190:	460f      	mov	r7, r1
 8000192:	4606      	mov	r6, r0

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(GPIOPeriph[portpin>>16 & 0xf], ENABLE);
 8000194:	2101      	movs	r1, #1
 8000196:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	//
	GPIO_Init(GPIOPort[portpin >>16 & 0x0f], &GPIO_InitStructure);
 800019a:	eb04 0485 	add.w	r4, r4, r5, lsl #2

void pinMode(uint32_t portpin, GPIOMode_TypeDef mode) {

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(GPIOPeriph[portpin>>16 & 0xf], ENABLE);
 800019e:	f000 fccd 	bl	8000b3c <RCC_AHB1PeriphClockCmd>

	GPIO_InitStructure.GPIO_Pin = portpin & 0xffff;
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80001a2:	2300      	movs	r3, #0

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(GPIOPeriph[portpin>>16 & 0xf], ENABLE);

	GPIO_InitStructure.GPIO_Pin = portpin & 0xffff;
 80001a4:	b2b6      	uxth	r6, r6
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80001a6:	f88d 3006 	strb.w	r3, [sp, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80001aa:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	//
	GPIO_Init(GPIOPort[portpin >>16 & 0x0f], &GPIO_InitStructure);
 80001ae:	6aa0      	ldr	r0, [r4, #40]	; 0x28

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(GPIOPeriph[portpin>>16 & 0xf], ENABLE);

	GPIO_InitStructure.GPIO_Pin = portpin & 0xffff;
 80001b0:	9600      	str	r6, [sp, #0]
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80001b2:	2302      	movs	r3, #2
	//
	GPIO_Init(GPIOPort[portpin >>16 & 0x0f], &GPIO_InitStructure);
 80001b4:	4669      	mov	r1, sp
	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(GPIOPeriph[portpin>>16 & 0xf], ENABLE);

	GPIO_InitStructure.GPIO_Pin = portpin & 0xffff;
	GPIO_InitStructure.GPIO_Mode = mode;
 80001b6:	f88d 7004 	strb.w	r7, [sp, #4]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80001ba:	f88d 3005 	strb.w	r3, [sp, #5]
	//
	GPIO_Init(GPIOPort[portpin >>16 & 0x0f], &GPIO_InitStructure);
 80001be:	f000 faff 	bl	80007c0 <GPIO_Init>
}
 80001c2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80001c4:	20000000 	.word	0x20000000

080001c8 <GPIOMode>:


void GPIOMode(uint32_t portpin, GPIOMode_TypeDef mode,
		GPIOSpeed_TypeDef clk, GPIOOType_TypeDef otype, GPIOPuPd_TypeDef pupd) {
 80001c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}

	GPIO_InitTypeDef GPIO_InitStructure;
	// wake up the port
	RCC_AHB1PeriphClockCmd(GPIOPeriph[portpin>>16 & 0xf], ENABLE);
 80001cc:	f3c0 4803 	ubfx	r8, r0, #16, #4
 80001d0:	4f0e      	ldr	r7, [pc, #56]	; (800020c <GPIOMode+0x44>)
	GPIO_Init(GPIOPort[portpin >>16 & 0x0f], &GPIO_InitStructure);
}


void GPIOMode(uint32_t portpin, GPIOMode_TypeDef mode,
		GPIOSpeed_TypeDef clk, GPIOOType_TypeDef otype, GPIOPuPd_TypeDef pupd) {
 80001d2:	460d      	mov	r5, r1
 80001d4:	4604      	mov	r4, r0

	GPIO_InitTypeDef GPIO_InitStructure;
	// wake up the port
	RCC_AHB1PeriphClockCmd(GPIOPeriph[portpin>>16 & 0xf], ENABLE);
 80001d6:	2101      	movs	r1, #1
 80001d8:	f857 0028 	ldr.w	r0, [r7, r8, lsl #2]
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = otype;
	GPIO_InitStructure.GPIO_PuPd = pupd;
	GPIO_InitStructure.GPIO_Speed = clk;
	//
	GPIO_Init(GPIOPort[portpin >>16 & 0x0f], &GPIO_InitStructure);
 80001dc:	eb07 0788 	add.w	r7, r7, r8, lsl #2
	GPIO_Init(GPIOPort[portpin >>16 & 0x0f], &GPIO_InitStructure);
}


void GPIOMode(uint32_t portpin, GPIOMode_TypeDef mode,
		GPIOSpeed_TypeDef clk, GPIOOType_TypeDef otype, GPIOPuPd_TypeDef pupd) {
 80001e0:	4699      	mov	r9, r3
 80001e2:	4616      	mov	r6, r2

	GPIO_InitTypeDef GPIO_InitStructure;
	// wake up the port
	RCC_AHB1PeriphClockCmd(GPIOPeriph[portpin>>16 & 0xf], ENABLE);
 80001e4:	f000 fcaa 	bl	8000b3c <RCC_AHB1PeriphClockCmd>
	//
	GPIO_InitStructure.GPIO_Pin = portpin & 0xffff;;
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = otype;
	GPIO_InitStructure.GPIO_PuPd = pupd;
 80001e8:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
	GPIO_InitStructure.GPIO_Speed = clk;
	//
	GPIO_Init(GPIOPort[portpin >>16 & 0x0f], &GPIO_InitStructure);
 80001ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
	GPIO_InitTypeDef GPIO_InitStructure;
	// wake up the port
	RCC_AHB1PeriphClockCmd(GPIOPeriph[portpin>>16 & 0xf], ENABLE);
	//
	GPIO_InitStructure.GPIO_Pin = portpin & 0xffff;;
	GPIO_InitStructure.GPIO_Mode = mode;
 80001ee:	f88d 5004 	strb.w	r5, [sp, #4]

	GPIO_InitTypeDef GPIO_InitStructure;
	// wake up the port
	RCC_AHB1PeriphClockCmd(GPIOPeriph[portpin>>16 & 0xf], ENABLE);
	//
	GPIO_InitStructure.GPIO_Pin = portpin & 0xffff;;
 80001f2:	b2a4      	uxth	r4, r4
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = otype;
	GPIO_InitStructure.GPIO_PuPd = pupd;
	GPIO_InitStructure.GPIO_Speed = clk;
	//
	GPIO_Init(GPIOPort[portpin >>16 & 0x0f], &GPIO_InitStructure);
 80001f4:	4669      	mov	r1, sp

	GPIO_InitTypeDef GPIO_InitStructure;
	// wake up the port
	RCC_AHB1PeriphClockCmd(GPIOPeriph[portpin>>16 & 0xf], ENABLE);
	//
	GPIO_InitStructure.GPIO_Pin = portpin & 0xffff;;
 80001f6:	9400      	str	r4, [sp, #0]
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = otype;
 80001f8:	f88d 9006 	strb.w	r9, [sp, #6]
	GPIO_InitStructure.GPIO_PuPd = pupd;
 80001fc:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_InitStructure.GPIO_Speed = clk;
 8000200:	f88d 6005 	strb.w	r6, [sp, #5]
	//
	GPIO_Init(GPIOPort[portpin >>16 & 0x0f], &GPIO_InitStructure);
 8000204:	f000 fadc 	bl	80007c0 <GPIO_Init>
}
 8000208:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
 800020c:	20000000 	.word	0x20000000

08000210 <digitalWrite>:

/*
 static void turnOffPWM(uint8_t timer) {
 }
 */
void digitalWrite(uint32_t portpin, uint8_t bit) {
 8000210:	4603      	mov	r3, r0
 8000212:	4a07      	ldr	r2, [pc, #28]	; (8000230 <digitalWrite+0x20>)
 8000214:	0c00      	lsrs	r0, r0, #16
	if (bit) {
		//? Bit_SET : Bit_RESET ));
		GPIO_SetBits(GPIOPort[portpin >>16 & 0x0f], portpin & 0xffff);
 8000216:	f000 000f 	and.w	r0, r0, #15
 800021a:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800021e:	6a90      	ldr	r0, [r2, #40]	; 0x28
/*
 static void turnOffPWM(uint8_t timer) {
 }
 */
void digitalWrite(uint32_t portpin, uint8_t bit) {
	if (bit) {
 8000220:	b111      	cbz	r1, 8000228 <digitalWrite+0x18>
		//? Bit_SET : Bit_RESET ));
		GPIO_SetBits(GPIOPort[portpin >>16 & 0x0f], portpin & 0xffff);
 8000222:	b299      	uxth	r1, r3
 8000224:	f000 bb3d 	b.w	80008a2 <GPIO_SetBits>
	} else {
		GPIO_ResetBits(GPIOPort[portpin >>16 & 0x0f], portpin & 0xffff);
 8000228:	b299      	uxth	r1, r3
 800022a:	f000 bb3c 	b.w	80008a6 <GPIO_ResetBits>
 800022e:	bf00      	nop
 8000230:	20000000 	.word	0x20000000

08000234 <portWrite>:
	}
}

void portWrite(GPIO_TypeDef * port, uint16_t bits) {
	GPIO_Write(port, bits);
 8000234:	f000 bb3e 	b.w	80008b4 <GPIO_Write>

08000238 <digitalRead>:
}

uint8_t digitalRead(GPIO_TypeDef * port, uint16_t pin) {
	uint8_t mode = (port->MODER) >> (pin * 2);
 8000238:	6802      	ldr	r2, [r0, #0]

void portWrite(GPIO_TypeDef * port, uint16_t bits) {
	GPIO_Write(port, bits);
}

uint8_t digitalRead(GPIO_TypeDef * port, uint16_t pin) {
 800023a:	b508      	push	{r3, lr}
	uint8_t mode = (port->MODER) >> (pin * 2);
 800023c:	004b      	lsls	r3, r1, #1
 800023e:	fa32 f303 	lsrs.w	r3, r2, r3
	if (mode == GPIO_Mode_OUT)
 8000242:	b2db      	uxtb	r3, r3
 8000244:	2b01      	cmp	r3, #1
 8000246:	d105      	bne.n	8000254 <digitalRead+0x1c>
		return (GPIO_ReadOutputDataBit(port, pin) ? SET : RESET);
 8000248:	f000 fb22 	bl	8000890 <GPIO_ReadOutputDataBit>
 800024c:	3000      	adds	r0, #0
 800024e:	bf18      	it	ne
 8000250:	2001      	movne	r0, #1
 8000252:	bd08      	pop	{r3, pc}
	return (GPIO_ReadInputDataBit(port, pin) ? SET : RESET);
 8000254:	f000 fb13 	bl	800087e <GPIO_ReadInputDataBit>
 8000258:	3000      	adds	r0, #0
 800025a:	bf18      	it	ne
 800025c:	2001      	movne	r0, #1
}
 800025e:	bd08      	pop	{r3, pc}

08000260 <SysTick_Handler>:
#include "systick.h"

static volatile uint32_t _systick_counter;

void SysTick_Handler(void) {
	_systick_counter++; /* increment timeTicks counter */
 8000260:	4b02      	ldr	r3, [pc, #8]	; (800026c <SysTick_Handler+0xc>)
 8000262:	681a      	ldr	r2, [r3, #0]
 8000264:	3201      	adds	r2, #1
 8000266:	601a      	str	r2, [r3, #0]
}
 8000268:	4770      	bx	lr
 800026a:	bf00      	nop
 800026c:	2000095c 	.word	0x2000095c

08000270 <SysTick_delay>:

void SysTick_delay(const uint32_t dlyTicks) {
	uint32_t currTicks = _systick_counter;
 8000270:	4b03      	ldr	r3, [pc, #12]	; (8000280 <SysTick_delay+0x10>)
 8000272:	681a      	ldr	r2, [r3, #0]

	while ((_systick_counter - currTicks) < dlyTicks)
 8000274:	6819      	ldr	r1, [r3, #0]
 8000276:	1a89      	subs	r1, r1, r2
 8000278:	4281      	cmp	r1, r0
 800027a:	d3fb      	bcc.n	8000274 <SysTick_delay+0x4>
		;
}
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop
 8000280:	2000095c 	.word	0x2000095c

08000284 <SysTick_Start>:

void SysTick_Start(const uint32_t ticks) {
	if ( SysTick_Config(SystemCoreClock / ticks) ) {
 8000284:	4b09      	ldr	r3, [pc, #36]	; (80002ac <SysTick_Start+0x28>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	fbb3 f3f0 	udiv	r3, r3, r0
    \return          0  Function succeeded
    \return          1  Function failed
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 800028c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000290:	d20b      	bcs.n	80002aa <SysTick_Start+0x26>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8000292:	4a07      	ldr	r2, [pc, #28]	; (80002b0 <SysTick_Start+0x2c>)
 8000294:	3b01      	subs	r3, #1
 8000296:	6053      	str	r3, [r2, #4]
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000298:	4b06      	ldr	r3, [pc, #24]	; (80002b4 <SysTick_Start+0x30>)
 800029a:	21f0      	movs	r1, #240	; 0xf0
 800029c:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80002a0:	2300      	movs	r3, #0
 80002a2:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002a4:	2307      	movs	r3, #7
 80002a6:	6013      	str	r3, [r2, #0]
		/* Setup SysTick for 1 msec interrupts */
		/* Handle Error */
		while (1)
			;
	}
}
 80002a8:	4770      	bx	lr
 80002aa:	e7fe      	b.n	80002aa <SysTick_Start+0x26>
 80002ac:	20000088 	.word	0x20000088
 80002b0:	e000e010 	.word	0xe000e010
 80002b4:	e000ed00 	.word	0xe000ed00

080002b8 <SysTick_count>:

uint32_t SysTick_count() {
	return _systick_counter;
 80002b8:	4b01      	ldr	r3, [pc, #4]	; (80002c0 <SysTick_count+0x8>)
 80002ba:	6818      	ldr	r0, [r3, #0]
}
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop
 80002c0:	2000095c 	.word	0x2000095c

080002c4 <buffer_clear>:
	uint16_t count;
} USARTBuffer;
USARTBuffer rx3, tx3;

void buffer_clear(USARTBuffer * b) {
	b->head = 0;
 80002c4:	2300      	movs	r3, #0
 80002c6:	f8a0 3100 	strh.w	r3, [r0, #256]	; 0x100
	b->tail = 0;
 80002ca:	f8a0 3102 	strh.w	r3, [r0, #258]	; 0x102
	b->count = 0;
 80002ce:	f8a0 3104 	strh.w	r3, [r0, #260]	; 0x104
}
 80002d2:	4770      	bx	lr

080002d4 <buffer_remainder>:

uint16_t buffer_remainder(USARTBuffer * b) {
	return b->count;
}
 80002d4:	f8b0 0104 	ldrh.w	r0, [r0, #260]	; 0x104
 80002d8:	4770      	bx	lr

080002da <buffer_is_full>:

uint8_t buffer_is_full(USARTBuffer * b) {
	if ( (b->head == b->tail) && (b->count > 0) ) {
 80002da:	f9b0 2100 	ldrsh.w	r2, [r0, #256]	; 0x100
 80002de:	f9b0 3102 	ldrsh.w	r3, [r0, #258]	; 0x102
 80002e2:	429a      	cmp	r2, r3
 80002e4:	d105      	bne.n	80002f2 <buffer_is_full+0x18>

uint16_t buffer_remainder(USARTBuffer * b) {
	return b->count;
}

uint8_t buffer_is_full(USARTBuffer * b) {
 80002e6:	f8b0 0104 	ldrh.w	r0, [r0, #260]	; 0x104
	if ( (b->head == b->tail) && (b->count > 0) ) {
		return 1;
 80002ea:	3000      	adds	r0, #0
 80002ec:	bf18      	it	ne
 80002ee:	2001      	movne	r0, #1
 80002f0:	4770      	bx	lr
	}
	return 0;
 80002f2:	2000      	movs	r0, #0
}
 80002f4:	4770      	bx	lr

080002f6 <buffer_is_empty>:

uint8_t buffer_is_empty(USARTBuffer * b) {
	if ( (b->count == 0) /*&& (b->head == b->tail) */) {
		return 1;
 80002f6:	f8b0 0104 	ldrh.w	r0, [r0, #260]	; 0x104
	}
	return 0;
}
 80002fa:	f1d0 0001 	rsbs	r0, r0, #1
 80002fe:	bf38      	it	cc
 8000300:	2000      	movcc	r0, #0
 8000302:	4770      	bx	lr

08000304 <buffer_enq>:

uint16_t buffer_enq(USARTBuffer * b, volatile uint16_t w) {
 8000304:	b513      	push	{r0, r1, r4, lr}
 8000306:	4604      	mov	r4, r0
 8000308:	f8ad 1006 	strh.w	r1, [sp, #6]
	if ( buffer_is_full(b) )
 800030c:	f7ff ffe5 	bl	80002da <buffer_is_full>
 8000310:	b9d8      	cbnz	r0, 800034a <buffer_enq+0x46>
		return 0xffff;
	b->buf[b->head++] = w;
 8000312:	f8b4 3100 	ldrh.w	r3, [r4, #256]	; 0x100
 8000316:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 800031a:	b21a      	sxth	r2, r3
 800031c:	3301      	adds	r3, #1
 800031e:	f824 1012 	strh.w	r1, [r4, r2, lsl #1]
	b->count++;
 8000322:	f8b4 2104 	ldrh.w	r2, [r4, #260]	; 0x104
 8000326:	3201      	adds	r2, #1
 8000328:	f8a4 2104 	strh.w	r2, [r4, #260]	; 0x104
	b->head %= USART_BUFFER_SIZE;
 800032c:	b21a      	sxth	r2, r3
 800032e:	4b08      	ldr	r3, [pc, #32]	; (8000350 <buffer_enq+0x4c>)
 8000330:	4013      	ands	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	da03      	bge.n	800033e <buffer_enq+0x3a>
 8000336:	3b01      	subs	r3, #1
 8000338:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800033c:	3301      	adds	r3, #1
	return w;
 800033e:	f8bd 0006 	ldrh.w	r0, [sp, #6]
uint16_t buffer_enq(USARTBuffer * b, volatile uint16_t w) {
	if ( buffer_is_full(b) )
		return 0xffff;
	b->buf[b->head++] = w;
	b->count++;
	b->head %= USART_BUFFER_SIZE;
 8000342:	f8a4 3100 	strh.w	r3, [r4, #256]	; 0x100
	return w;
 8000346:	b280      	uxth	r0, r0
 8000348:	e001      	b.n	800034e <buffer_enq+0x4a>
	return 0;
}

uint16_t buffer_enq(USARTBuffer * b, volatile uint16_t w) {
	if ( buffer_is_full(b) )
		return 0xffff;
 800034a:	f64f 70ff 	movw	r0, #65535	; 0xffff
	b->buf[b->head++] = w;
	b->count++;
	b->head %= USART_BUFFER_SIZE;
	return w;
}
 800034e:	bd1c      	pop	{r2, r3, r4, pc}
 8000350:	8000007f 	.word	0x8000007f

08000354 <buffer_deq>:
	}
	return 0;
}

uint8_t buffer_is_empty(USARTBuffer * b) {
	if ( (b->count == 0) /*&& (b->head == b->tail) */) {
 8000354:	f8b0 1104 	ldrh.w	r1, [r0, #260]	; 0x104
	b->count++;
	b->head %= USART_BUFFER_SIZE;
	return w;
}

uint16_t buffer_deq(USARTBuffer * b) {
 8000358:	4602      	mov	r2, r0
	}
	return 0;
}

uint8_t buffer_is_empty(USARTBuffer * b) {
	if ( (b->count == 0) /*&& (b->head == b->tail) */) {
 800035a:	b911      	cbnz	r1, 8000362 <buffer_deq+0xe>
	return w;
}

uint16_t buffer_deq(USARTBuffer * b) {
	if ( buffer_is_empty(b) )
		return 0xffff;
 800035c:	f64f 70ff 	movw	r0, #65535	; 0xffff
	uint16_t w = b->buf[b->tail++];
	b->count--;
	b->tail %= USART_BUFFER_SIZE;
	return w;
}
 8000360:	4770      	bx	lr
}

uint16_t buffer_deq(USARTBuffer * b) {
	if ( buffer_is_empty(b) )
		return 0xffff;
	uint16_t w = b->buf[b->tail++];
 8000362:	f8b0 3102 	ldrh.w	r3, [r0, #258]	; 0x102
	b->count--;
 8000366:	3901      	subs	r1, #1
}

uint16_t buffer_deq(USARTBuffer * b) {
	if ( buffer_is_empty(b) )
		return 0xffff;
	uint16_t w = b->buf[b->tail++];
 8000368:	b218      	sxth	r0, r3
 800036a:	3301      	adds	r3, #1
	b->count--;
 800036c:	f8a2 1104 	strh.w	r1, [r2, #260]	; 0x104
	b->tail %= USART_BUFFER_SIZE;
 8000370:	b219      	sxth	r1, r3
 8000372:	4b06      	ldr	r3, [pc, #24]	; (800038c <buffer_deq+0x38>)
}

uint16_t buffer_deq(USARTBuffer * b) {
	if ( buffer_is_empty(b) )
		return 0xffff;
	uint16_t w = b->buf[b->tail++];
 8000374:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
	b->count--;
	b->tail %= USART_BUFFER_SIZE;
 8000378:	400b      	ands	r3, r1
 800037a:	2b00      	cmp	r3, #0
 800037c:	da03      	bge.n	8000386 <buffer_deq+0x32>
 800037e:	3b01      	subs	r3, #1
 8000380:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000384:	3301      	adds	r3, #1
 8000386:	f8a2 3102 	strh.w	r3, [r2, #258]	; 0x102
 800038a:	4770      	bx	lr
 800038c:	8000007f 	.word	0x8000007f

08000390 <usart3_begin>:
	return w;
}


void usart3_begin(uint32_t baud) {
 8000390:	b5f0      	push	{r4, r5, r6, r7, lr}
	//	GPIO_InitTypeDef GPIO_InitStruct; // this is for the GPIO pins used as TX and RX
	USART_InitTypeDef USART_InitStruct; // this is for the USART1 initilization
	NVIC_InitTypeDef NVIC_InitStructure; // this is used to configure the NVIC (nested vector interrupt controller)

	//	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, (FunctionalState) ENABLE);
	GPIOMode(PB10 | PB11, GPIO_Mode_AF, GPIO_Speed_50MHz, GPIO_OType_PP,
 8000392:	2102      	movs	r1, #2
	b->tail %= USART_BUFFER_SIZE;
	return w;
}


void usart3_begin(uint32_t baud) {
 8000394:	b089      	sub	sp, #36	; 0x24
	//	GPIO_InitTypeDef GPIO_InitStruct; // this is for the GPIO pins used as TX and RX
	USART_InitTypeDef USART_InitStruct; // this is for the USART1 initilization
	NVIC_InitTypeDef NVIC_InitStructure; // this is used to configure the NVIC (nested vector interrupt controller)

	//	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, (FunctionalState) ENABLE);
	GPIOMode(PB10 | PB11, GPIO_Mode_AF, GPIO_Speed_50MHz, GPIO_OType_PP,
 8000396:	2401      	movs	r4, #1
 8000398:	2300      	movs	r3, #0
 800039a:	460a      	mov	r2, r1
	b->tail %= USART_BUFFER_SIZE;
	return w;
}


void usart3_begin(uint32_t baud) {
 800039c:	4605      	mov	r5, r0
	GPIOMode(PB10 | PB11, GPIO_Mode_AF, GPIO_Speed_50MHz, GPIO_OType_PP,
			GPIO_PuPd_UP);
	/* USART3 clock enable */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);

	GPIO_PinAFConfig(GPIOB, GPIO_PinSource10, GPIO_AF_USART3 ); // TX -- PB10
 800039e:	4e2b      	ldr	r6, [pc, #172]	; (800044c <usart3_begin+0xbc>)
	//	GPIO_InitTypeDef GPIO_InitStruct; // this is for the GPIO pins used as TX and RX
	USART_InitTypeDef USART_InitStruct; // this is for the USART1 initilization
	NVIC_InitTypeDef NVIC_InitStructure; // this is used to configure the NVIC (nested vector interrupt controller)

	//	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, (FunctionalState) ENABLE);
	GPIOMode(PB10 | PB11, GPIO_Mode_AF, GPIO_Speed_50MHz, GPIO_OType_PP,
 80003a0:	9400      	str	r4, [sp, #0]
 80003a2:	f44f 3003 	mov.w	r0, #134144	; 0x20c00
 80003a6:	f7ff ff0f 	bl	80001c8 <GPIOMode>
			GPIO_PuPd_UP);
	/* USART3 clock enable */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
 80003aa:	4621      	mov	r1, r4
 80003ac:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80003b0:	f000 fbe8 	bl	8000b84 <RCC_APB1PeriphClockCmd>

	GPIO_PinAFConfig(GPIOB, GPIO_PinSource10, GPIO_AF_USART3 ); // TX -- PB10
 80003b4:	4630      	mov	r0, r6
 80003b6:	210a      	movs	r1, #10
 80003b8:	2207      	movs	r2, #7
 80003ba:	f000 fa81 	bl	80008c0 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource11, GPIO_AF_USART3 ); // RX -- PB11
 80003be:	2207      	movs	r2, #7
 80003c0:	4630      	mov	r0, r6
 80003c2:	210b      	movs	r1, #11
 80003c4:	f000 fa7c 	bl	80008c0 <GPIO_PinAFConfig>
	USART_InitStruct.USART_StopBits = USART_StopBits_1;	// we want 1 stop bit (standard)
	USART_InitStruct.USART_Parity = USART_Parity_No;// we don't want a parity bit (standard)
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver

	USART_Init(USART3, &USART_InitStruct); // again all the properties are passed to the USART_Init function which takes care of all the bit setting
 80003c8:	f5a6 36de 	sub.w	r6, r6, #113664	; 0x1bc00
	USART_InitStruct.USART_BaudRate = baud;	// the baudrate is set to the value we passed into this init function
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
	USART_InitStruct.USART_StopBits = USART_StopBits_1;	// we want 1 stop bit (standard)
	USART_InitStruct.USART_Parity = USART_Parity_No;// we don't want a parity bit (standard)
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver
 80003cc:	230c      	movs	r3, #12

	USART_Init(USART3, &USART_InitStruct); // again all the properties are passed to the USART_Init function which takes care of all the bit setting
 80003ce:	eb0d 0103 	add.w	r1, sp, r3
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);

	GPIO_PinAFConfig(GPIOB, GPIO_PinSource10, GPIO_AF_USART3 ); // TX -- PB10
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource11, GPIO_AF_USART3 ); // RX -- PB11

	USART_InitStruct.USART_BaudRate = baud;	// the baudrate is set to the value we passed into this init function
 80003d2:	9503      	str	r5, [sp, #12]
	USART_InitStruct.USART_StopBits = USART_StopBits_1;	// we want 1 stop bit (standard)
	USART_InitStruct.USART_Parity = USART_Parity_No;// we don't want a parity bit (standard)
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver

	USART_Init(USART3, &USART_InitStruct); // again all the properties are passed to the USART_Init function which takes care of all the bit setting
 80003d4:	4630      	mov	r0, r6

	GPIO_PinAFConfig(GPIOB, GPIO_PinSource10, GPIO_AF_USART3 ); // TX -- PB10
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource11, GPIO_AF_USART3 ); // RX -- PB11

	USART_InitStruct.USART_BaudRate = baud;	// the baudrate is set to the value we passed into this init function
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
 80003d6:	2500      	movs	r5, #0
	USART_InitStruct.USART_StopBits = USART_StopBits_1;	// we want 1 stop bit (standard)
	USART_InitStruct.USART_Parity = USART_Parity_No;// we don't want a parity bit (standard)
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver
 80003d8:	f8ad 3016 	strh.w	r3, [sp, #22]

	GPIO_PinAFConfig(GPIOB, GPIO_PinSource10, GPIO_AF_USART3 ); // TX -- PB10
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource11, GPIO_AF_USART3 ); // RX -- PB11

	USART_InitStruct.USART_BaudRate = baud;	// the baudrate is set to the value we passed into this init function
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
 80003dc:	f8ad 5010 	strh.w	r5, [sp, #16]
	USART_InitStruct.USART_StopBits = USART_StopBits_1;	// we want 1 stop bit (standard)
 80003e0:	f8ad 5012 	strh.w	r5, [sp, #18]
	USART_InitStruct.USART_Parity = USART_Parity_No;// we don't want a parity bit (standard)
 80003e4:	f8ad 5014 	strh.w	r5, [sp, #20]
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
 80003e8:	f8ad 5018 	strh.w	r5, [sp, #24]
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver

	USART_Init(USART3, &USART_InitStruct); // again all the properties are passed to the USART_Init function which takes care of all the bit setting
 80003ec:	f000 fcfc 	bl	8000de8 <USART_Init>

	USART_ITConfig(USART3, USART_IT_RXNE, (FunctionalState) ENABLE); // enable the USART3 receive interrupt
 80003f0:	4630      	mov	r0, r6
 80003f2:	4622      	mov	r2, r4
 80003f4:	f240 5125 	movw	r1, #1317	; 0x525
 80003f8:	f000 fe34 	bl	8001064 <USART_ITConfig>
	USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) DISABLE);
 80003fc:	4630      	mov	r0, r6
 80003fe:	f240 7127 	movw	r1, #1831	; 0x727
 8000402:	462a      	mov	r2, r5
 8000404:	f000 fe2e 	bl	8001064 <USART_ITConfig>

	NVIC_InitStructure.NVIC_IRQChannel = USART3_IRQn;
 8000408:	2327      	movs	r3, #39	; 0x27
	// we want to configure the USART3 interrupts
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0; // this sets the priority group of the USART3 interrupts
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0; // this sets the subpriority inside the group
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;	// the USART3 interrupts are globally enabled
	NVIC_Init(&NVIC_InitStructure);	// the properties are passed to the NVIC_Init function which takes care of the low level stuff
 800040a:	a807      	add	r0, sp, #28
	USART_Init(USART3, &USART_InitStruct); // again all the properties are passed to the USART_Init function which takes care of all the bit setting

	USART_ITConfig(USART3, USART_IT_RXNE, (FunctionalState) ENABLE); // enable the USART3 receive interrupt
	USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) DISABLE);

	NVIC_InitStructure.NVIC_IRQChannel = USART3_IRQn;
 800040c:	f88d 301c 	strb.w	r3, [sp, #28]
	// we want to configure the USART3 interrupts
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0; // this sets the priority group of the USART3 interrupts
 8000410:	f88d 501d 	strb.w	r5, [sp, #29]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0; // this sets the subpriority inside the group
 8000414:	f88d 501e 	strb.w	r5, [sp, #30]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;	// the USART3 interrupts are globally enabled
 8000418:	f88d 401f 	strb.w	r4, [sp, #31]
	NVIC_Init(&NVIC_InitStructure);	// the properties are passed to the NVIC_Init function which takes care of the low level stuff
 800041c:	f000 f90c 	bl	8000638 <NVIC_Init>
	uint16_t count;
} USARTBuffer;
USARTBuffer rx3, tx3;

void buffer_clear(USARTBuffer * b) {
	b->head = 0;
 8000420:	4b0b      	ldr	r3, [pc, #44]	; (8000450 <usart3_begin+0xc0>)
 8000422:	f8a3 5100 	strh.w	r5, [r3, #256]	; 0x100
	b->tail = 0;
 8000426:	f8a3 5102 	strh.w	r5, [r3, #258]	; 0x102
	b->count = 0;
 800042a:	f8a3 5104 	strh.w	r5, [r3, #260]	; 0x104
	uint16_t count;
} USARTBuffer;
USARTBuffer rx3, tx3;

void buffer_clear(USARTBuffer * b) {
	b->head = 0;
 800042e:	4b09      	ldr	r3, [pc, #36]	; (8000454 <usart3_begin+0xc4>)

	buffer_clear(&rx3);
	buffer_clear(&tx3);

	// finally this enables the complete USART3 peripheral
	USART_Cmd(USART3, (FunctionalState) ENABLE);
 8000430:	4630      	mov	r0, r6
	uint16_t count;
} USARTBuffer;
USARTBuffer rx3, tx3;

void buffer_clear(USARTBuffer * b) {
	b->head = 0;
 8000432:	f8a3 5100 	strh.w	r5, [r3, #256]	; 0x100
	b->tail = 0;
 8000436:	f8a3 5102 	strh.w	r5, [r3, #258]	; 0x102
	b->count = 0;
 800043a:	f8a3 5104 	strh.w	r5, [r3, #260]	; 0x104

	buffer_clear(&rx3);
	buffer_clear(&tx3);

	// finally this enables the complete USART3 peripheral
	USART_Cmd(USART3, (FunctionalState) ENABLE);
 800043e:	4621      	mov	r1, r4

	GPIO_PinAFConfig(GPIOB, GPIO_PinSource10, GPIO_AF_USART3 ); // TX -- PB10
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource11, GPIO_AF_USART3 ); // RX -- PB11

	USART_InitStruct.USART_BaudRate = baud;	// the baudrate is set to the value we passed into this init function
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
 8000440:	462f      	mov	r7, r5

	buffer_clear(&rx3);
	buffer_clear(&tx3);

	// finally this enables the complete USART3 peripheral
	USART_Cmd(USART3, (FunctionalState) ENABLE);
 8000442:	f000 fd4e 	bl	8000ee2 <USART_Cmd>
}
 8000446:	b009      	add	sp, #36	; 0x24
 8000448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800044a:	bf00      	nop
 800044c:	40020400 	.word	0x40020400
 8000450:	200009ac 	.word	0x200009ac
 8000454:	20000ab2 	.word	0x20000ab2

08000458 <usart3_bare_write>:

void usart3_bare_write(uint16_t w) {
 8000458:	b510      	push	{r4, lr}
 800045a:	4604      	mov	r4, r0
	while (USART_GetFlagStatus(USART3, USART_FLAG_TXE ) == RESET)
 800045c:	4805      	ldr	r0, [pc, #20]	; (8000474 <usart3_bare_write+0x1c>)
 800045e:	2180      	movs	r1, #128	; 0x80
 8000460:	f000 fe19 	bl	8001096 <USART_GetFlagStatus>
 8000464:	2800      	cmp	r0, #0
 8000466:	d0f9      	beq.n	800045c <usart3_bare_write+0x4>
		;
	USART_SendData(USART3, w);
 8000468:	4802      	ldr	r0, [pc, #8]	; (8000474 <usart3_bare_write+0x1c>)
 800046a:	4621      	mov	r1, r4
//	while (USART_GetFlagStatus(USART3, USART_FLAG_TC ) == RESET);
}
 800046c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

void usart3_bare_write(uint16_t w) {
	while (USART_GetFlagStatus(USART3, USART_FLAG_TXE ) == RESET)
		;
	USART_SendData(USART3, w);
 8000470:	f000 bd64 	b.w	8000f3c <USART_SendData>
 8000474:	40004800 	.word	0x40004800

08000478 <usart3_write>:
//	while (USART_GetFlagStatus(USART3, USART_FLAG_TC ) == RESET);
}

void usart3_write(uint16_t w) {
 8000478:	b570      	push	{r4, r5, r6, lr}
	USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) DISABLE);
 800047a:	4d0a      	ldr	r5, [pc, #40]	; (80004a4 <usart3_write+0x2c>)
 800047c:	f240 7427 	movw	r4, #1831	; 0x727
 8000480:	2200      	movs	r2, #0
		;
	USART_SendData(USART3, w);
//	while (USART_GetFlagStatus(USART3, USART_FLAG_TC ) == RESET);
}

void usart3_write(uint16_t w) {
 8000482:	4606      	mov	r6, r0
	USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) DISABLE);
 8000484:	4621      	mov	r1, r4
 8000486:	4628      	mov	r0, r5
 8000488:	f000 fdec 	bl	8001064 <USART_ITConfig>
	buffer_enq(&tx3, w);
 800048c:	4631      	mov	r1, r6
 800048e:	4806      	ldr	r0, [pc, #24]	; (80004a8 <usart3_write+0x30>)
 8000490:	f7ff ff38 	bl	8000304 <buffer_enq>
	USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) ENABLE);
 8000494:	4628      	mov	r0, r5
 8000496:	4621      	mov	r1, r4
 8000498:	2201      	movs	r2, #1
}
 800049a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
}

void usart3_write(uint16_t w) {
	USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) DISABLE);
	buffer_enq(&tx3, w);
	USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) ENABLE);
 800049e:	f000 bde1 	b.w	8001064 <USART_ITConfig>
 80004a2:	bf00      	nop
 80004a4:	40004800 	.word	0x40004800
 80004a8:	20000ab2 	.word	0x20000ab2

080004ac <usart3_print>:
}

void usart3_print(char * s) {
 80004ac:	b510      	push	{r4, lr}
 80004ae:	4604      	mov	r4, r0
	while (*s)
 80004b0:	e001      	b.n	80004b6 <usart3_print+0xa>
		usart3_write((uint16_t) *s++);
 80004b2:	f7ff ffe1 	bl	8000478 <usart3_write>
	buffer_enq(&tx3, w);
	USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) ENABLE);
}

void usart3_print(char * s) {
	while (*s)
 80004b6:	f814 0b01 	ldrb.w	r0, [r4], #1
 80004ba:	2800      	cmp	r0, #0
 80004bc:	d1f9      	bne.n	80004b2 <usart3_print+0x6>
		usart3_write((uint16_t) *s++);
}
 80004be:	bd10      	pop	{r4, pc}

080004c0 <usart3_bare_read>:

uint16_t usart3_bare_read() {
	return USART_ReceiveData(USART3 );
 80004c0:	4801      	ldr	r0, [pc, #4]	; (80004c8 <usart3_bare_read+0x8>)
 80004c2:	f000 bd3f 	b.w	8000f44 <USART_ReceiveData>
 80004c6:	bf00      	nop
 80004c8:	40004800 	.word	0x40004800

080004cc <usart3_read>:
}

uint16_t usart3_read() {
 80004cc:	b508      	push	{r3, lr}
	uint16_t w = buffer_deq(&rx3);
 80004ce:	4804      	ldr	r0, [pc, #16]	; (80004e0 <usart3_read+0x14>)
 80004d0:	f7ff ff40 	bl	8000354 <buffer_deq>
	if ( w == 0xffff ) return 0; // buffer is empty
	return w;
}
 80004d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004d8:	4298      	cmp	r0, r3
 80004da:	bf08      	it	eq
 80004dc:	2000      	moveq	r0, #0
 80004de:	bd08      	pop	{r3, pc}
 80004e0:	200009ac 	.word	0x200009ac

080004e4 <usart3_flush>:

void usart3_flush() {
 80004e4:	b570      	push	{r4, r5, r6, lr}
	USART_ITConfig(USART3, USART_IT_RXNE, (FunctionalState) DISABLE); // enable the USART3 receive interrupt
 80004e6:	4822      	ldr	r0, [pc, #136]	; (8000570 <usart3_flush+0x8c>)
	}
	return 0;
}

uint8_t buffer_is_empty(USARTBuffer * b) {
	if ( (b->count == 0) /*&& (b->head == b->tail) */) {
 80004e8:	4e22      	ldr	r6, [pc, #136]	; (8000574 <usart3_flush+0x90>)
	if ( w == 0xffff ) return 0; // buffer is empty
	return w;
}

void usart3_flush() {
	USART_ITConfig(USART3, USART_IT_RXNE, (FunctionalState) DISABLE); // enable the USART3 receive interrupt
 80004ea:	f240 5125 	movw	r1, #1317	; 0x525
 80004ee:	2200      	movs	r2, #0
 80004f0:	f000 fdb8 	bl	8001064 <USART_ITConfig>
	uint16_t count;
} USARTBuffer;
USARTBuffer rx3, tx3;

void buffer_clear(USARTBuffer * b) {
	b->head = 0;
 80004f4:	4b20      	ldr	r3, [pc, #128]	; (8000578 <usart3_flush+0x94>)
}

void usart3_flush() {
	USART_ITConfig(USART3, USART_IT_RXNE, (FunctionalState) DISABLE); // enable the USART3 receive interrupt
	buffer_clear(&rx3);
	USART_ITConfig(USART3, USART_IT_RXNE, (FunctionalState) ENABLE); // enable the USART3 receive interrupt
 80004f6:	481e      	ldr	r0, [pc, #120]	; (8000570 <usart3_flush+0x8c>)
	uint16_t count;
} USARTBuffer;
USARTBuffer rx3, tx3;

void buffer_clear(USARTBuffer * b) {
	b->head = 0;
 80004f8:	2400      	movs	r4, #0
 80004fa:	f8a3 4100 	strh.w	r4, [r3, #256]	; 0x100
	b->tail = 0;
 80004fe:	f8a3 4102 	strh.w	r4, [r3, #258]	; 0x102
	b->count = 0;
 8000502:	f8a3 4104 	strh.w	r4, [r3, #260]	; 0x104
}

void usart3_flush() {
	USART_ITConfig(USART3, USART_IT_RXNE, (FunctionalState) DISABLE); // enable the USART3 receive interrupt
	buffer_clear(&rx3);
	USART_ITConfig(USART3, USART_IT_RXNE, (FunctionalState) ENABLE); // enable the USART3 receive interrupt
 8000506:	2201      	movs	r2, #1
 8000508:	f240 5125 	movw	r1, #1317	; 0x525
 800050c:	f000 fdaa 	bl	8001064 <USART_ITConfig>
	USART_ClearITPendingBit(USART3, USART_IT_RXNE );
 8000510:	4817      	ldr	r0, [pc, #92]	; (8000570 <usart3_flush+0x8c>)
 8000512:	f240 5125 	movw	r1, #1317	; 0x525
 8000516:	f000 fde7 	bl	80010e8 <USART_ClearITPendingBit>
	USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) DISABLE);
 800051a:	4815      	ldr	r0, [pc, #84]	; (8000570 <usart3_flush+0x8c>)
 800051c:	f240 7127 	movw	r1, #1831	; 0x727
 8000520:	4622      	mov	r2, r4
 8000522:	f000 fd9f 	bl	8001064 <USART_ITConfig>
	while ( !buffer_is_empty(&tx3) ) {
 8000526:	e012      	b.n	800054e <usart3_flush+0x6a>
		while (USART_GetFlagStatus(USART3, USART_FLAG_TXE ) == RESET);
 8000528:	4811      	ldr	r0, [pc, #68]	; (8000570 <usart3_flush+0x8c>)
 800052a:	2180      	movs	r1, #128	; 0x80
 800052c:	f000 fdb3 	bl	8001096 <USART_GetFlagStatus>
 8000530:	2800      	cmp	r0, #0
 8000532:	d0f9      	beq.n	8000528 <usart3_flush+0x44>
		USART_SendData(USART3, buffer_deq(&tx3));
 8000534:	480f      	ldr	r0, [pc, #60]	; (8000574 <usart3_flush+0x90>)
 8000536:	f7ff ff0d 	bl	8000354 <buffer_deq>
 800053a:	4601      	mov	r1, r0
 800053c:	480c      	ldr	r0, [pc, #48]	; (8000570 <usart3_flush+0x8c>)
 800053e:	f000 fcfd 	bl	8000f3c <USART_SendData>
		while (USART_GetFlagStatus(USART3, USART_FLAG_TC ) == RESET);
 8000542:	480b      	ldr	r0, [pc, #44]	; (8000570 <usart3_flush+0x8c>)
 8000544:	2140      	movs	r1, #64	; 0x40
 8000546:	f000 fda6 	bl	8001096 <USART_GetFlagStatus>
 800054a:	2800      	cmp	r0, #0
 800054c:	d0f9      	beq.n	8000542 <usart3_flush+0x5e>
	}
	return 0;
}

uint8_t buffer_is_empty(USARTBuffer * b) {
	if ( (b->count == 0) /*&& (b->head == b->tail) */) {
 800054e:	f8b6 4104 	ldrh.w	r4, [r6, #260]	; 0x104
 8000552:	4d08      	ldr	r5, [pc, #32]	; (8000574 <usart3_flush+0x90>)
 8000554:	2c00      	cmp	r4, #0
 8000556:	d1e7      	bne.n	8000528 <usart3_flush+0x44>
	while ( !buffer_is_empty(&tx3) ) {
		while (USART_GetFlagStatus(USART3, USART_FLAG_TXE ) == RESET);
		USART_SendData(USART3, buffer_deq(&tx3));
		while (USART_GetFlagStatus(USART3, USART_FLAG_TC ) == RESET);
	}
	USART_ClearITPendingBit(USART3, USART_IT_TXE );
 8000558:	4805      	ldr	r0, [pc, #20]	; (8000570 <usart3_flush+0x8c>)
 800055a:	f240 7127 	movw	r1, #1831	; 0x727
 800055e:	f000 fdc3 	bl	80010e8 <USART_ClearITPendingBit>
	uint16_t count;
} USARTBuffer;
USARTBuffer rx3, tx3;

void buffer_clear(USARTBuffer * b) {
	b->head = 0;
 8000562:	f8a5 4100 	strh.w	r4, [r5, #256]	; 0x100
	b->tail = 0;
 8000566:	f8a5 4102 	strh.w	r4, [r5, #258]	; 0x102
	b->count = 0;
 800056a:	f8a5 4104 	strh.w	r4, [r5, #260]	; 0x104
		USART_SendData(USART3, buffer_deq(&tx3));
		while (USART_GetFlagStatus(USART3, USART_FLAG_TC ) == RESET);
	}
	USART_ClearITPendingBit(USART3, USART_IT_TXE );
	buffer_clear(&tx3);
}
 800056e:	bd70      	pop	{r4, r5, r6, pc}
 8000570:	40004800 	.word	0x40004800
 8000574:	20000ab2 	.word	0x20000ab2
 8000578:	200009ac 	.word	0x200009ac

0800057c <usart3_peek>:
	}
	return 0;
}

uint8_t buffer_is_empty(USARTBuffer * b) {
	if ( (b->count == 0) /*&& (b->head == b->tail) */) {
 800057c:	4b05      	ldr	r3, [pc, #20]	; (8000594 <usart3_peek+0x18>)
 800057e:	f8b3 2104 	ldrh.w	r2, [r3, #260]	; 0x104
 8000582:	b912      	cbnz	r2, 800058a <usart3_peek+0xe>
}

uint16_t usart3_peek() {
	if ( !buffer_is_empty(&rx3) )
		return rx3.buf[rx3.tail];
	return 0xffff;
 8000584:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 8000588:	4770      	bx	lr
	buffer_clear(&tx3);
}

uint16_t usart3_peek() {
	if ( !buffer_is_empty(&rx3) )
		return rx3.buf[rx3.tail];
 800058a:	f9b3 2102 	ldrsh.w	r2, [r3, #258]	; 0x102
 800058e:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8000592:	4770      	bx	lr
 8000594:	200009ac 	.word	0x200009ac

08000598 <usart3_available>:
	return 0xffff;
}

uint16_t usart3_available() {
	return buffer_remainder(&rx3);
}
 8000598:	4b01      	ldr	r3, [pc, #4]	; (80005a0 <usart3_available+0x8>)
 800059a:	f8b3 0104 	ldrh.w	r0, [r3, #260]	; 0x104
 800059e:	4770      	bx	lr
 80005a0:	200009ac 	.word	0x200009ac

080005a4 <tx_head>:

uint16_t tx_head() {
	return tx3.head;
}
 80005a4:	4b01      	ldr	r3, [pc, #4]	; (80005ac <tx_head+0x8>)
 80005a6:	f8b3 0100 	ldrh.w	r0, [r3, #256]	; 0x100
 80005aa:	4770      	bx	lr
 80005ac:	20000ab2 	.word	0x20000ab2

080005b0 <tx_tail>:

uint16_t tx_tail() {
	return tx3.tail;
}
 80005b0:	4b01      	ldr	r3, [pc, #4]	; (80005b8 <tx_tail+0x8>)
 80005b2:	f8b3 0102 	ldrh.w	r0, [r3, #258]	; 0x102
 80005b6:	4770      	bx	lr
 80005b8:	20000ab2 	.word	0x20000ab2

080005bc <USART3_IRQHandler>:
// this is the interrupt request handler (IRQ) for ALL USART3 interrupts

void USART3_IRQHandler(void) {
 80005bc:	b508      	push	{r3, lr}
	if (USART_GetITStatus(USART3, USART_IT_RXNE )) {
 80005be:	4816      	ldr	r0, [pc, #88]	; (8000618 <USART3_IRQHandler+0x5c>)
 80005c0:	f240 5125 	movw	r1, #1317	; 0x525
 80005c4:	f000 fd71 	bl	80010aa <USART_GetITStatus>
 80005c8:	b130      	cbz	r0, 80005d8 <USART3_IRQHandler+0x1c>
		buffer_enq(&rx3, USART_ReceiveData(USART3) );
 80005ca:	4813      	ldr	r0, [pc, #76]	; (8000618 <USART3_IRQHandler+0x5c>)
 80005cc:	f000 fcba 	bl	8000f44 <USART_ReceiveData>
 80005d0:	4601      	mov	r1, r0
 80005d2:	4812      	ldr	r0, [pc, #72]	; (800061c <USART3_IRQHandler+0x60>)
 80005d4:	f7ff fe96 	bl	8000304 <buffer_enq>
	}

	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
 80005d8:	480f      	ldr	r0, [pc, #60]	; (8000618 <USART3_IRQHandler+0x5c>)
 80005da:	f240 7127 	movw	r1, #1831	; 0x727
 80005de:	f000 fd64 	bl	80010aa <USART_GetITStatus>
 80005e2:	2800      	cmp	r0, #0
 80005e4:	d017      	beq.n	8000616 <USART3_IRQHandler+0x5a>
		if (tx3.count == 0) {
 80005e6:	480e      	ldr	r0, [pc, #56]	; (8000620 <USART3_IRQHandler+0x64>)
 80005e8:	f8b0 2104 	ldrh.w	r2, [r0, #260]	; 0x104
 80005ec:	b95a      	cbnz	r2, 8000606 <USART3_IRQHandler+0x4a>
			USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) DISABLE);
 80005ee:	480a      	ldr	r0, [pc, #40]	; (8000618 <USART3_IRQHandler+0x5c>)
 80005f0:	f240 7127 	movw	r1, #1831	; 0x727
 80005f4:	f000 fd36 	bl	8001064 <USART_ITConfig>
			USART_ClearITPendingBit(USART3, USART_IT_TXE );
 80005f8:	4807      	ldr	r0, [pc, #28]	; (8000618 <USART3_IRQHandler+0x5c>)
 80005fa:	f240 7127 	movw	r1, #1831	; 0x727
		} else {
			USART_SendData(USART3, buffer_deq(&tx3));
		}
	}
}
 80005fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	}

	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
		if (tx3.count == 0) {
			USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART3, USART_IT_TXE );
 8000602:	f000 bd71 	b.w	80010e8 <USART_ClearITPendingBit>
		} else {
			USART_SendData(USART3, buffer_deq(&tx3));
 8000606:	f7ff fea5 	bl	8000354 <buffer_deq>
 800060a:	4601      	mov	r1, r0
 800060c:	4802      	ldr	r0, [pc, #8]	; (8000618 <USART3_IRQHandler+0x5c>)
		}
	}
}
 800060e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
		if (tx3.count == 0) {
			USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART3, USART_IT_TXE );
		} else {
			USART_SendData(USART3, buffer_deq(&tx3));
 8000612:	f000 bc93 	b.w	8000f3c <USART_SendData>
 8000616:	bd08      	pop	{r3, pc}
 8000618:	40004800 	.word	0x40004800
 800061c:	200009ac 	.word	0x200009ac
 8000620:	20000ab2 	.word	0x20000ab2

08000624 <NVIC_PriorityGroupConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8000624:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8000628:	4b02      	ldr	r3, [pc, #8]	; (8000634 <NVIC_PriorityGroupConfig+0x10>)
 800062a:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 800062e:	60d8      	str	r0, [r3, #12]
}
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	e000ed00 	.word	0xe000ed00

08000638 <NVIC_Init>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000638:	78c3      	ldrb	r3, [r0, #3]
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 800063a:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 800063c:	b30b      	cbz	r3, 8000682 <NVIC_Init+0x4a>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800063e:	4b17      	ldr	r3, [pc, #92]	; (800069c <NVIC_Init+0x64>)
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000640:	7842      	ldrb	r2, [r0, #1]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000642:	68db      	ldr	r3, [r3, #12]
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000644:	7884      	ldrb	r4, [r0, #2]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000646:	43db      	mvns	r3, r3
 8000648:	f3c3 2302 	ubfx	r3, r3, #8, #3
    tmppre = (0x4 - tmppriority);
 800064c:	f1c3 0104 	rsb	r1, r3, #4
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000650:	b2c9      	uxtb	r1, r1
 8000652:	fa12 f101 	lsls.w	r1, r2, r1
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
 8000656:	220f      	movs	r2, #15
 8000658:	411a      	asrs	r2, r3
    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800065a:	7803      	ldrb	r3, [r0, #0]
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800065c:	b2c9      	uxtb	r1, r1
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 800065e:	4022      	ands	r2, r4
 8000660:	430a      	orrs	r2, r1
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000662:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000666:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
        
    tmppriority = tmppriority << 0x04;
 800066a:	0112      	lsls	r2, r2, #4
 800066c:	b2d2      	uxtb	r2, r2
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800066e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000672:	7803      	ldrb	r3, [r0, #0]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000674:	2201      	movs	r2, #1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000676:	0959      	lsrs	r1, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000678:	f003 031f 	and.w	r3, r3, #31
 800067c:	fa12 f303 	lsls.w	r3, r2, r3
 8000680:	e007      	b.n	8000692 <NVIC_Init+0x5a>
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000682:	7803      	ldrb	r3, [r0, #0]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000684:	2201      	movs	r2, #1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000686:	0959      	lsrs	r1, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000688:	f003 031f 	and.w	r3, r3, #31
 800068c:	fa12 f303 	lsls.w	r3, r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000690:	3120      	adds	r1, #32
 8000692:	4a03      	ldr	r2, [pc, #12]	; (80006a0 <NVIC_Init+0x68>)
 8000694:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8000698:	bd10      	pop	{r4, pc}
 800069a:	bf00      	nop
 800069c:	e000ed00 	.word	0xe000ed00
 80006a0:	e000e100 	.word	0xe000e100

080006a4 <NVIC_SetVectorTable>:
{ 
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 80006a4:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
 80006a8:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 80006ac:	4b01      	ldr	r3, [pc, #4]	; (80006b4 <NVIC_SetVectorTable+0x10>)
 80006ae:	4301      	orrs	r1, r0
 80006b0:	6099      	str	r1, [r3, #8]
}
 80006b2:	4770      	bx	lr
 80006b4:	e000ed00 	.word	0xe000ed00

080006b8 <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT: Low Power Sleep on Exit.
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
 80006b8:	4b04      	ldr	r3, [pc, #16]	; (80006cc <NVIC_SystemLPConfig+0x14>)
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
  {
    SCB->SCR |= LowPowerMode;
 80006ba:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 80006bc:	b109      	cbz	r1, 80006c2 <NVIC_SystemLPConfig+0xa>
  {
    SCB->SCR |= LowPowerMode;
 80006be:	4310      	orrs	r0, r2
 80006c0:	e001      	b.n	80006c6 <NVIC_SystemLPConfig+0xe>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 80006c2:	ea22 0000 	bic.w	r0, r2, r0
 80006c6:	6118      	str	r0, [r3, #16]
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	e000ed00 	.word	0xe000ed00

080006d0 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
 80006d0:	4b04      	ldr	r3, [pc, #16]	; (80006e4 <SysTick_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 80006d2:	681a      	ldr	r2, [r3, #0]
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 80006d4:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 80006d6:	bf0c      	ite	eq
 80006d8:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 80006dc:	f022 0204 	bicne.w	r2, r2, #4
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	4770      	bx	lr
 80006e4:	e000e010 	.word	0xe000e010

080006e8 <GPIO_DeInit>:
  * @note   By default, The GPIO pins are configured in input floating mode (except JTAG pins).
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 80006e8:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
 80006ea:	4b2c      	ldr	r3, [pc, #176]	; (800079c <GPIO_DeInit+0xb4>)
 80006ec:	4298      	cmp	r0, r3
 80006ee:	d105      	bne.n	80006fc <GPIO_DeInit+0x14>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 80006f0:	2001      	movs	r0, #1
 80006f2:	4601      	mov	r1, r0
 80006f4:	f000 fa5e 	bl	8000bb4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 80006f8:	2001      	movs	r0, #1
 80006fa:	e048      	b.n	800078e <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOB)
 80006fc:	4b28      	ldr	r3, [pc, #160]	; (80007a0 <GPIO_DeInit+0xb8>)
 80006fe:	4298      	cmp	r0, r3
 8000700:	d105      	bne.n	800070e <GPIO_DeInit+0x26>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8000702:	2002      	movs	r0, #2
 8000704:	2101      	movs	r1, #1
 8000706:	f000 fa55 	bl	8000bb4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 800070a:	2002      	movs	r0, #2
 800070c:	e03f      	b.n	800078e <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOC)
 800070e:	4b25      	ldr	r3, [pc, #148]	; (80007a4 <GPIO_DeInit+0xbc>)
 8000710:	4298      	cmp	r0, r3
 8000712:	d105      	bne.n	8000720 <GPIO_DeInit+0x38>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8000714:	2004      	movs	r0, #4
 8000716:	2101      	movs	r1, #1
 8000718:	f000 fa4c 	bl	8000bb4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 800071c:	2004      	movs	r0, #4
 800071e:	e036      	b.n	800078e <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOD)
 8000720:	4b21      	ldr	r3, [pc, #132]	; (80007a8 <GPIO_DeInit+0xc0>)
 8000722:	4298      	cmp	r0, r3
 8000724:	d105      	bne.n	8000732 <GPIO_DeInit+0x4a>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8000726:	2008      	movs	r0, #8
 8000728:	2101      	movs	r1, #1
 800072a:	f000 fa43 	bl	8000bb4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 800072e:	2008      	movs	r0, #8
 8000730:	e02d      	b.n	800078e <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOE)
 8000732:	4b1e      	ldr	r3, [pc, #120]	; (80007ac <GPIO_DeInit+0xc4>)
 8000734:	4298      	cmp	r0, r3
 8000736:	d105      	bne.n	8000744 <GPIO_DeInit+0x5c>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 8000738:	2010      	movs	r0, #16
 800073a:	2101      	movs	r1, #1
 800073c:	f000 fa3a 	bl	8000bb4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 8000740:	2010      	movs	r0, #16
 8000742:	e024      	b.n	800078e <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOF)
 8000744:	4b1a      	ldr	r3, [pc, #104]	; (80007b0 <GPIO_DeInit+0xc8>)
 8000746:	4298      	cmp	r0, r3
 8000748:	d105      	bne.n	8000756 <GPIO_DeInit+0x6e>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 800074a:	2020      	movs	r0, #32
 800074c:	2101      	movs	r1, #1
 800074e:	f000 fa31 	bl	8000bb4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 8000752:	2020      	movs	r0, #32
 8000754:	e01b      	b.n	800078e <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOG)
 8000756:	4b17      	ldr	r3, [pc, #92]	; (80007b4 <GPIO_DeInit+0xcc>)
 8000758:	4298      	cmp	r0, r3
 800075a:	d105      	bne.n	8000768 <GPIO_DeInit+0x80>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 800075c:	2040      	movs	r0, #64	; 0x40
 800075e:	2101      	movs	r1, #1
 8000760:	f000 fa28 	bl	8000bb4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 8000764:	2040      	movs	r0, #64	; 0x40
 8000766:	e012      	b.n	800078e <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOH)
 8000768:	4b13      	ldr	r3, [pc, #76]	; (80007b8 <GPIO_DeInit+0xd0>)
 800076a:	4298      	cmp	r0, r3
 800076c:	d105      	bne.n	800077a <GPIO_DeInit+0x92>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 800076e:	2080      	movs	r0, #128	; 0x80
 8000770:	2101      	movs	r1, #1
 8000772:	f000 fa1f 	bl	8000bb4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 8000776:	2080      	movs	r0, #128	; 0x80
 8000778:	e009      	b.n	800078e <GPIO_DeInit+0xa6>
  }
  else
  {
    if (GPIOx == GPIOI)
 800077a:	4b10      	ldr	r3, [pc, #64]	; (80007bc <GPIO_DeInit+0xd4>)
 800077c:	4298      	cmp	r0, r3
 800077e:	d10b      	bne.n	8000798 <GPIO_DeInit+0xb0>
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 8000780:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000784:	2101      	movs	r1, #1
 8000786:	f000 fa15 	bl	8000bb4 <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 800078a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800078e:	2100      	movs	r1, #0
    }
  }
}
 8000790:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (GPIOx == GPIOI)
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 8000794:	f000 ba0e 	b.w	8000bb4 <RCC_AHB1PeriphResetCmd>
 8000798:	bd08      	pop	{r3, pc}
 800079a:	bf00      	nop
 800079c:	40020000 	.word	0x40020000
 80007a0:	40020400 	.word	0x40020400
 80007a4:	40020800 	.word	0x40020800
 80007a8:	40020c00 	.word	0x40020c00
 80007ac:	40021000 	.word	0x40021000
 80007b0:	40021400 	.word	0x40021400
 80007b4:	40021800 	.word	0x40021800
 80007b8:	40021c00 	.word	0x40021c00
 80007bc:	40022000 	.word	0x40022000

080007c0 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80007c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
  {
    pos = ((uint32_t)0x01) << pinpos;
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80007c4:	2300      	movs	r3, #0
 80007c6:	f8d1 8000 	ldr.w	r8, [r1]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80007ca:	461a      	mov	r2, r3
  {
    pos = ((uint32_t)0x01) << pinpos;
 80007cc:	f04f 0c01 	mov.w	ip, #1
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80007d0:	2703      	movs	r7, #3

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
  {
    pos = ((uint32_t)0x01) << pinpos;
 80007d2:	fa0c f402 	lsl.w	r4, ip, r2
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80007d6:	ea04 0508 	and.w	r5, r4, r8

    if (currentpin == pos)
 80007da:	42a5      	cmp	r5, r4
 80007dc:	d12e      	bne.n	800083c <GPIO_Init+0x7c>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80007de:	6806      	ldr	r6, [r0, #0]
 80007e0:	fa17 f403 	lsls.w	r4, r7, r3
 80007e4:	43e4      	mvns	r4, r4
 80007e6:	4026      	ands	r6, r4
 80007e8:	6006      	str	r6, [r0, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80007ea:	790e      	ldrb	r6, [r1, #4]
 80007ec:	f8d0 9000 	ldr.w	r9, [r0]
 80007f0:	fa06 fa03 	lsl.w	sl, r6, r3

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80007f4:	3e01      	subs	r6, #1
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80007f6:	ea4a 0909 	orr.w	r9, sl, r9

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80007fa:	2e01      	cmp	r6, #1
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80007fc:	f8c0 9000 	str.w	r9, [r0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000800:	d814      	bhi.n	800082c <GPIO_Init+0x6c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000802:	6886      	ldr	r6, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000804:	f891 9005 	ldrb.w	r9, [r1, #5]
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000808:	4026      	ands	r6, r4
 800080a:	6086      	str	r6, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800080c:	6886      	ldr	r6, [r0, #8]
 800080e:	fa09 f903 	lsl.w	r9, r9, r3
 8000812:	ea49 0606 	orr.w	r6, r9, r6
 8000816:	6086      	str	r6, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000818:	6846      	ldr	r6, [r0, #4]
 800081a:	ea26 0505 	bic.w	r5, r6, r5
 800081e:	6045      	str	r5, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000820:	798d      	ldrb	r5, [r1, #6]
 8000822:	6846      	ldr	r6, [r0, #4]
 8000824:	4095      	lsls	r5, r2
 8000826:	b2ad      	uxth	r5, r5
 8000828:	4335      	orrs	r5, r6
 800082a:	6045      	str	r5, [r0, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 800082c:	68c5      	ldr	r5, [r0, #12]
 800082e:	402c      	ands	r4, r5
 8000830:	60c4      	str	r4, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000832:	79cc      	ldrb	r4, [r1, #7]
 8000834:	68c5      	ldr	r5, [r0, #12]
 8000836:	409c      	lsls	r4, r3
 8000838:	432c      	orrs	r4, r5
 800083a:	60c4      	str	r4, [r0, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800083c:	3201      	adds	r2, #1
 800083e:	3302      	adds	r3, #2
 8000840:	2a10      	cmp	r2, #16
 8000842:	d1c6      	bne.n	80007d2 <GPIO_Init+0x12>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8000844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08000848 <GPIO_StructInit>:
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8000848:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800084c:	6003      	str	r3, [r0, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 800084e:	2300      	movs	r3, #0
 8000850:	7103      	strb	r3, [r0, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8000852:	7143      	strb	r3, [r0, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 8000854:	7183      	strb	r3, [r0, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000856:	71c3      	strb	r3, [r0, #7]
}
 8000858:	4770      	bx	lr

0800085a <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800085a:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0x00010000;
 800085c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000860:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
 8000862:	9b01      	ldr	r3, [sp, #4]
 8000864:	430b      	orrs	r3, r1
 8000866:	9301      	str	r3, [sp, #4]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8000868:	9b01      	ldr	r3, [sp, #4]
 800086a:	61c3      	str	r3, [r0, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 800086c:	61c1      	str	r1, [r0, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 800086e:	9b01      	ldr	r3, [sp, #4]
 8000870:	61c3      	str	r3, [r0, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8000872:	69c3      	ldr	r3, [r0, #28]
 8000874:	9301      	str	r3, [sp, #4]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8000876:	69c3      	ldr	r3, [r0, #28]
 8000878:	9301      	str	r3, [sp, #4]
}
 800087a:	b002      	add	sp, #8
 800087c:	4770      	bx	lr

0800087e <GPIO_ReadInputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 800087e:	6903      	ldr	r3, [r0, #16]
  {
    bitstatus = (uint8_t)Bit_SET;
 8000880:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 8000882:	bf0c      	ite	eq
 8000884:	2000      	moveq	r0, #0
 8000886:	2001      	movne	r0, #1
 8000888:	4770      	bx	lr

0800088a <GPIO_ReadInputData>:
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 800088a:	6900      	ldr	r0, [r0, #16]
}
 800088c:	b280      	uxth	r0, r0
 800088e:	4770      	bx	lr

08000890 <GPIO_ReadOutputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000890:	6943      	ldr	r3, [r0, #20]
  {
    bitstatus = (uint8_t)Bit_SET;
 8000892:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 8000894:	bf0c      	ite	eq
 8000896:	2000      	moveq	r0, #0
 8000898:	2001      	movne	r0, #1
 800089a:	4770      	bx	lr

0800089c <GPIO_ReadOutputData>:
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
 800089c:	6940      	ldr	r0, [r0, #20]
}
 800089e:	b280      	uxth	r0, r0
 80008a0:	4770      	bx	lr

080008a2 <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 80008a2:	8301      	strh	r1, [r0, #24]
}
 80008a4:	4770      	bx	lr

080008a6 <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 80008a6:	8341      	strh	r1, [r0, #26]
}
 80008a8:	4770      	bx	lr

080008aa <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 80008aa:	b10a      	cbz	r2, 80008b0 <GPIO_WriteBit+0x6>
  {
    GPIOx->BSRRL = GPIO_Pin;
 80008ac:	8301      	strh	r1, [r0, #24]
 80008ae:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 80008b0:	8341      	strh	r1, [r0, #26]
 80008b2:	4770      	bx	lr

080008b4 <GPIO_Write>:
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 80008b4:	6141      	str	r1, [r0, #20]
}
 80008b6:	4770      	bx	lr

080008b8 <GPIO_ToggleBits>:
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 80008b8:	6943      	ldr	r3, [r0, #20]
 80008ba:	404b      	eors	r3, r1
 80008bc:	6143      	str	r3, [r0, #20]
}
 80008be:	4770      	bx	lr

080008c0 <GPIO_PinAFConfig>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80008c0:	f001 0307 	and.w	r3, r1, #7
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80008c4:	08c9      	lsrs	r1, r1, #3
 80008c6:	3108      	adds	r1, #8
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80008c8:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80008ca:	009b      	lsls	r3, r3, #2
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80008cc:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
 80008d0:	240f      	movs	r4, #15
 80008d2:	409c      	lsls	r4, r3
 80008d4:	ea25 0404 	bic.w	r4, r5, r4
 80008d8:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80008dc:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80008e0:	fa12 f303 	lsls.w	r3, r2, r3
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80008e4:	431c      	orrs	r4, r3
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80008e6:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
}
 80008ea:	bd30      	pop	{r4, r5, pc}

080008ec <RCC_DeInit>:
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80008ec:	4b0a      	ldr	r3, [pc, #40]	; (8000918 <RCC_DeInit+0x2c>)
 80008ee:	681a      	ldr	r2, [r3, #0]
 80008f0:	f042 0201 	orr.w	r2, r2, #1
 80008f4:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80008f6:	2200      	movs	r2, #0
 80008f8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80008fa:	6819      	ldr	r1, [r3, #0]
 80008fc:	f021 7184 	bic.w	r1, r1, #17301504	; 0x1080000
 8000900:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8000904:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000906:	4905      	ldr	r1, [pc, #20]	; (800091c <RCC_DeInit+0x30>)
 8000908:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800090a:	6819      	ldr	r1, [r3, #0]
 800090c:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8000910:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000912:	60da      	str	r2, [r3, #12]
}
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	40023800 	.word	0x40023800
 800091c:	24003010 	.word	0x24003010

08000920 <RCC_HSEConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 8000920:	4b02      	ldr	r3, [pc, #8]	; (800092c <RCC_HSEConfig+0xc>)
 8000922:	2200      	movs	r2, #0
 8000924:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 8000926:	7018      	strb	r0, [r3, #0]
}
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	40023802 	.word	0x40023802

08000930 <RCC_AdjustHSICalibrationValue>:
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
 8000930:	4b03      	ldr	r3, [pc, #12]	; (8000940 <RCC_AdjustHSICalibrationValue+0x10>)
 8000932:	681a      	ldr	r2, [r3, #0]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 8000934:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 8000938:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3

  /* Store the new value */
  RCC->CR = tmpreg;
 800093c:	601a      	str	r2, [r3, #0]
}
 800093e:	4770      	bx	lr
 8000940:	40023800 	.word	0x40023800

08000944 <RCC_HSICmd>:
void RCC_HSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 8000944:	4b01      	ldr	r3, [pc, #4]	; (800094c <RCC_HSICmd+0x8>)
 8000946:	6018      	str	r0, [r3, #0]
}
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	42470000 	.word	0x42470000

08000950 <RCC_LSEConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8000950:	4b06      	ldr	r3, [pc, #24]	; (800096c <RCC_LSEConfig+0x1c>)
 8000952:	2200      	movs	r2, #0

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 8000954:	2801      	cmp	r0, #1
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8000956:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8000958:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 800095a:	d002      	beq.n	8000962 <RCC_LSEConfig+0x12>
 800095c:	2804      	cmp	r0, #4
 800095e:	d104      	bne.n	800096a <RCC_LSEConfig+0x1a>
 8000960:	e001      	b.n	8000966 <RCC_LSEConfig+0x16>
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 8000962:	7018      	strb	r0, [r3, #0]
      break;
 8000964:	4770      	bx	lr
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 8000966:	2205      	movs	r2, #5
 8000968:	701a      	strb	r2, [r3, #0]
 800096a:	4770      	bx	lr
 800096c:	40023870 	.word	0x40023870

08000970 <RCC_LSICmd>:
void RCC_LSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 8000970:	4b01      	ldr	r3, [pc, #4]	; (8000978 <RCC_LSICmd+0x8>)
 8000972:	6018      	str	r0, [r3, #0]
}
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	42470e80 	.word	0x42470e80

0800097c <RCC_PLLConfig>:
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 800097c:	4301      	orrs	r1, r0
 800097e:	ea41 1282 	orr.w	r2, r1, r2, lsl #6
 8000982:	9900      	ldr	r1, [sp, #0]
 8000984:	085b      	lsrs	r3, r3, #1
 8000986:	3b01      	subs	r3, #1
 8000988:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 800098c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000990:	4b01      	ldr	r3, [pc, #4]	; (8000998 <RCC_PLLConfig+0x1c>)
 8000992:	6059      	str	r1, [r3, #4]
                 (PLLQ << 24);
}
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	40023800 	.word	0x40023800

0800099c <RCC_PLLCmd>:
  */
void RCC_PLLCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 800099c:	4b01      	ldr	r3, [pc, #4]	; (80009a4 <RCC_PLLCmd+0x8>)
 800099e:	6018      	str	r0, [r3, #0]
}
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	42470060 	.word	0x42470060

080009a8 <RCC_PLLI2SConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
 80009a8:	0180      	lsls	r0, r0, #6
 80009aa:	4b03      	ldr	r3, [pc, #12]	; (80009b8 <RCC_PLLI2SConfig+0x10>)
 80009ac:	ea40 7101 	orr.w	r1, r0, r1, lsl #28
 80009b0:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
}
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	40023800 	.word	0x40023800

080009bc <RCC_PLLI2SCmd>:
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 80009bc:	4b01      	ldr	r3, [pc, #4]	; (80009c4 <RCC_PLLI2SCmd+0x8>)
 80009be:	6018      	str	r0, [r3, #0]
}
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	42470068 	.word	0x42470068

080009c8 <RCC_ClockSecuritySystemCmd>:
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 80009c8:	4b01      	ldr	r3, [pc, #4]	; (80009d0 <RCC_ClockSecuritySystemCmd+0x8>)
 80009ca:	6018      	str	r0, [r3, #0]
}
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	4247004c 	.word	0x4247004c

080009d4 <RCC_MCO1Config>:
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
 80009d4:	4b03      	ldr	r3, [pc, #12]	; (80009e4 <RCC_MCO1Config+0x10>)
 80009d6:	689a      	ldr	r2, [r3, #8]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
 80009d8:	f022 62ec 	bic.w	r2, r2, #123731968	; 0x7600000

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 80009dc:	4302      	orrs	r2, r0
 80009de:	430a      	orrs	r2, r1

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 80009e0:	609a      	str	r2, [r3, #8]
}
 80009e2:	4770      	bx	lr
 80009e4:	40023800 	.word	0x40023800

080009e8 <RCC_MCO2Config>:
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
 80009e8:	4b03      	ldr	r3, [pc, #12]	; (80009f8 <RCC_MCO2Config+0x10>)
 80009ea:	689a      	ldr	r2, [r3, #8]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
 80009ec:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 80009f0:	4302      	orrs	r2, r0
 80009f2:	430a      	orrs	r2, r1

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 80009f4:	609a      	str	r2, [r3, #8]
}
 80009f6:	4770      	bx	lr
 80009f8:	40023800 	.word	0x40023800

080009fc <RCC_SYSCLKConfig>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 80009fc:	4b03      	ldr	r3, [pc, #12]	; (8000a0c <RCC_SYSCLKConfig+0x10>)
 80009fe:	689a      	ldr	r2, [r3, #8]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 8000a00:	f022 0203 	bic.w	r2, r2, #3

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8000a04:	4302      	orrs	r2, r0

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000a06:	609a      	str	r2, [r3, #8]
}
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	40023800 	.word	0x40023800

08000a10 <RCC_GetSYSCLKSource>:
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 8000a10:	4b02      	ldr	r3, [pc, #8]	; (8000a1c <RCC_GetSYSCLKSource+0xc>)
 8000a12:	6898      	ldr	r0, [r3, #8]
}
 8000a14:	f000 000c 	and.w	r0, r0, #12
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	40023800 	.word	0x40023800

08000a20 <RCC_HCLKConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 8000a20:	4b03      	ldr	r3, [pc, #12]	; (8000a30 <RCC_HCLKConfig+0x10>)
 8000a22:	689a      	ldr	r2, [r3, #8]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 8000a24:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8000a28:	4302      	orrs	r2, r0

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000a2a:	609a      	str	r2, [r3, #8]
}
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	40023800 	.word	0x40023800

08000a34 <RCC_PCLK1Config>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8000a34:	4b03      	ldr	r3, [pc, #12]	; (8000a44 <RCC_PCLK1Config+0x10>)
 8000a36:	689a      	ldr	r2, [r3, #8]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 8000a38:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8000a3c:	4302      	orrs	r2, r0

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000a3e:	609a      	str	r2, [r3, #8]
}
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	40023800 	.word	0x40023800

08000a48 <RCC_PCLK2Config>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8000a48:	4b03      	ldr	r3, [pc, #12]	; (8000a58 <RCC_PCLK2Config+0x10>)
 8000a4a:	689a      	ldr	r2, [r3, #8]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 8000a4c:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 8000a50:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000a54:	609a      	str	r2, [r3, #8]
}
 8000a56:	4770      	bx	lr
 8000a58:	40023800 	.word	0x40023800

08000a5c <RCC_GetClocksFreq>:
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000a5c:	4b1e      	ldr	r3, [pc, #120]	; (8000ad8 <RCC_GetClocksFreq+0x7c>)
 8000a5e:	689a      	ldr	r2, [r3, #8]
 8000a60:	f002 020c 	and.w	r2, r2, #12

  switch (tmp)
 8000a64:	2a04      	cmp	r2, #4
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000a66:	b510      	push	{r4, lr}
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;

  switch (tmp)
 8000a68:	d003      	beq.n	8000a72 <RCC_GetClocksFreq+0x16>
 8000a6a:	2a08      	cmp	r2, #8
 8000a6c:	d003      	beq.n	8000a76 <RCC_GetClocksFreq+0x1a>
 8000a6e:	4b1b      	ldr	r3, [pc, #108]	; (8000adc <RCC_GetClocksFreq+0x80>)
 8000a70:	e018      	b.n	8000aa4 <RCC_GetClocksFreq+0x48>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000a72:	4b1b      	ldr	r3, [pc, #108]	; (8000ae0 <RCC_GetClocksFreq+0x84>)
 8000a74:	e016      	b.n	8000aa4 <RCC_GetClocksFreq+0x48>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000a76:	6859      	ldr	r1, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000a78:	685a      	ldr	r2, [r3, #4]
      
      if (pllsource != 0)
 8000a7a:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000a7e:	6859      	ldr	r1, [r3, #4]
 8000a80:	bf14      	ite	ne
 8000a82:	4b17      	ldrne	r3, [pc, #92]	; (8000ae0 <RCC_GetClocksFreq+0x84>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000a84:	4b15      	ldreq	r3, [pc, #84]	; (8000adc <RCC_GetClocksFreq+0x80>)

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000a86:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000a8a:	fbb3 f3f2 	udiv	r3, r3, r2
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000a8e:	4a12      	ldr	r2, [pc, #72]	; (8000ad8 <RCC_GetClocksFreq+0x7c>)
 8000a90:	6852      	ldr	r2, [r2, #4]
 8000a92:	f3c2 4201 	ubfx	r2, r2, #16, #2
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000a96:	f3c1 1188 	ubfx	r1, r1, #6, #9
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000a9a:	3201      	adds	r2, #1
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000a9c:	434b      	muls	r3, r1
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000a9e:	0052      	lsls	r2, r2, #1
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8000aa0:	fbb3 f3f2 	udiv	r3, r3, r2
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000aa4:	490c      	ldr	r1, [pc, #48]	; (8000ad8 <RCC_GetClocksFreq+0x7c>)
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8000aa6:	6003      	str	r3, [r0, #0]
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000aa8:	688b      	ldr	r3, [r1, #8]
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];
 8000aaa:	4a0e      	ldr	r2, [pc, #56]	; (8000ae4 <RCC_GetClocksFreq+0x88>)
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000aac:	6804      	ldr	r4, [r0, #0]
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
  tmp = tmp >> 4;
 8000aae:	f3c3 1303 	ubfx	r3, r3, #4, #4
  presc = APBAHBPrescTable[tmp];
 8000ab2:	5cd3      	ldrb	r3, [r2, r3]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000ab4:	fa34 f303 	lsrs.w	r3, r4, r3
 8000ab8:	6043      	str	r3, [r0, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000aba:	688c      	ldr	r4, [r1, #8]
  tmp = tmp >> 10;
 8000abc:	f3c4 2482 	ubfx	r4, r4, #10, #3
  presc = APBAHBPrescTable[tmp];
 8000ac0:	5d14      	ldrb	r4, [r2, r4]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000ac2:	fa33 f404 	lsrs.w	r4, r3, r4
 8000ac6:	6084      	str	r4, [r0, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000ac8:	6889      	ldr	r1, [r1, #8]
  tmp = tmp >> 13;
 8000aca:	f3c1 3142 	ubfx	r1, r1, #13, #3
  presc = APBAHBPrescTable[tmp];
 8000ace:	5c52      	ldrb	r2, [r2, r1]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000ad0:	40d3      	lsrs	r3, r2
 8000ad2:	60c3      	str	r3, [r0, #12]
}
 8000ad4:	bd10      	pop	{r4, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40023800 	.word	0x40023800
 8000adc:	00f42400 	.word	0x00f42400
 8000ae0:	007a1200 	.word	0x007a1200
 8000ae4:	20000074 	.word	0x20000074

08000ae8 <RCC_RTCCLKConfig>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 8000ae8:	f400 7340 	and.w	r3, r0, #768	; 0x300
 8000aec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000af0:	4b08      	ldr	r3, [pc, #32]	; (8000b14 <RCC_RTCCLKConfig+0x2c>)
 8000af2:	d108      	bne.n	8000b06 <RCC_RTCCLKConfig+0x1e>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 8000af4:	6899      	ldr	r1, [r3, #8]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8000af6:	f020 4270 	bic.w	r2, r0, #4026531840	; 0xf0000000
  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
 8000afa:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8000afe:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000b02:	430a      	orrs	r2, r1

    /* Store the new value */
    RCC->CFGR = tmpreg;
 8000b04:	609a      	str	r2, [r3, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 8000b06:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000b08:	0500      	lsls	r0, r0, #20
 8000b0a:	ea42 5010 	orr.w	r0, r2, r0, lsr #20
 8000b0e:	6718      	str	r0, [r3, #112]	; 0x70
}
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	40023800 	.word	0x40023800

08000b18 <RCC_RTCCLKCmd>:
void RCC_RTCCLKCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 8000b18:	4b01      	ldr	r3, [pc, #4]	; (8000b20 <RCC_RTCCLKCmd+0x8>)
 8000b1a:	6018      	str	r0, [r3, #0]
}
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	42470e3c 	.word	0x42470e3c

08000b24 <RCC_BackupResetCmd>:
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 8000b24:	4b01      	ldr	r3, [pc, #4]	; (8000b2c <RCC_BackupResetCmd+0x8>)
 8000b26:	6018      	str	r0, [r3, #0]
}
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	42470e40 	.word	0x42470e40

08000b30 <RCC_I2SCLKConfig>:
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 8000b30:	4b01      	ldr	r3, [pc, #4]	; (8000b38 <RCC_I2SCLKConfig+0x8>)
 8000b32:	6018      	str	r0, [r3, #0]
}
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	4247015c 	.word	0x4247015c

08000b3c <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000b3c:	4b04      	ldr	r3, [pc, #16]	; (8000b50 <RCC_AHB1PeriphClockCmd+0x14>)
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000b3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000b40:	b109      	cbz	r1, 8000b46 <RCC_AHB1PeriphClockCmd+0xa>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000b42:	4310      	orrs	r0, r2
 8000b44:	e001      	b.n	8000b4a <RCC_AHB1PeriphClockCmd+0xe>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000b46:	ea22 0000 	bic.w	r0, r2, r0
 8000b4a:	6318      	str	r0, [r3, #48]	; 0x30
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	40023800 	.word	0x40023800

08000b54 <RCC_AHB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 8000b54:	4b04      	ldr	r3, [pc, #16]	; (8000b68 <RCC_AHB2PeriphClockCmd+0x14>)
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 8000b56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000b58:	b109      	cbz	r1, 8000b5e <RCC_AHB2PeriphClockCmd+0xa>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 8000b5a:	4310      	orrs	r0, r2
 8000b5c:	e001      	b.n	8000b62 <RCC_AHB2PeriphClockCmd+0xe>
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
 8000b5e:	ea22 0000 	bic.w	r0, r2, r0
 8000b62:	6358      	str	r0, [r3, #52]	; 0x34
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	40023800 	.word	0x40023800

08000b6c <RCC_AHB3PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 8000b6c:	4b04      	ldr	r3, [pc, #16]	; (8000b80 <RCC_AHB3PeriphClockCmd+0x14>)
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 8000b6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000b70:	b109      	cbz	r1, 8000b76 <RCC_AHB3PeriphClockCmd+0xa>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 8000b72:	4310      	orrs	r0, r2
 8000b74:	e001      	b.n	8000b7a <RCC_AHB3PeriphClockCmd+0xe>
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
 8000b76:	ea22 0000 	bic.w	r0, r2, r0
 8000b7a:	6398      	str	r0, [r3, #56]	; 0x38
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	40023800 	.word	0x40023800

08000b84 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000b84:	4b04      	ldr	r3, [pc, #16]	; (8000b98 <RCC_APB1PeriphClockCmd+0x14>)
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000b86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000b88:	b109      	cbz	r1, 8000b8e <RCC_APB1PeriphClockCmd+0xa>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000b8a:	4310      	orrs	r0, r2
 8000b8c:	e001      	b.n	8000b92 <RCC_APB1PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000b8e:	ea22 0000 	bic.w	r0, r2, r0
 8000b92:	6418      	str	r0, [r3, #64]	; 0x40
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	40023800 	.word	0x40023800

08000b9c <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000b9c:	4b04      	ldr	r3, [pc, #16]	; (8000bb0 <RCC_APB2PeriphClockCmd+0x14>)
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000b9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000ba0:	b109      	cbz	r1, 8000ba6 <RCC_APB2PeriphClockCmd+0xa>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000ba2:	4310      	orrs	r0, r2
 8000ba4:	e001      	b.n	8000baa <RCC_APB2PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000ba6:	ea22 0000 	bic.w	r0, r2, r0
 8000baa:	6458      	str	r0, [r3, #68]	; 0x44
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	40023800 	.word	0x40023800

08000bb4 <RCC_AHB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000bb4:	4b04      	ldr	r3, [pc, #16]	; (8000bc8 <RCC_AHB1PeriphResetCmd+0x14>)
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 8000bb6:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000bb8:	b109      	cbz	r1, 8000bbe <RCC_AHB1PeriphResetCmd+0xa>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 8000bba:	4310      	orrs	r0, r2
 8000bbc:	e001      	b.n	8000bc2 <RCC_AHB1PeriphResetCmd+0xe>
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 8000bbe:	ea22 0000 	bic.w	r0, r2, r0
 8000bc2:	6118      	str	r0, [r3, #16]
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	40023800 	.word	0x40023800

08000bcc <RCC_AHB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 8000bcc:	4b04      	ldr	r3, [pc, #16]	; (8000be0 <RCC_AHB2PeriphResetCmd+0x14>)
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 8000bce:	695a      	ldr	r2, [r3, #20]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000bd0:	b109      	cbz	r1, 8000bd6 <RCC_AHB2PeriphResetCmd+0xa>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 8000bd2:	4310      	orrs	r0, r2
 8000bd4:	e001      	b.n	8000bda <RCC_AHB2PeriphResetCmd+0xe>
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 8000bd6:	ea22 0000 	bic.w	r0, r2, r0
 8000bda:	6158      	str	r0, [r3, #20]
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	40023800 	.word	0x40023800

08000be4 <RCC_AHB3PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 8000be4:	4b04      	ldr	r3, [pc, #16]	; (8000bf8 <RCC_AHB3PeriphResetCmd+0x14>)
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 8000be6:	699a      	ldr	r2, [r3, #24]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000be8:	b109      	cbz	r1, 8000bee <RCC_AHB3PeriphResetCmd+0xa>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 8000bea:	4310      	orrs	r0, r2
 8000bec:	e001      	b.n	8000bf2 <RCC_AHB3PeriphResetCmd+0xe>
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
 8000bee:	ea22 0000 	bic.w	r0, r2, r0
 8000bf2:	6198      	str	r0, [r3, #24]
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	40023800 	.word	0x40023800

08000bfc <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000bfc:	4b04      	ldr	r3, [pc, #16]	; (8000c10 <RCC_APB1PeriphResetCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8000bfe:	6a1a      	ldr	r2, [r3, #32]
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000c00:	b109      	cbz	r1, 8000c06 <RCC_APB1PeriphResetCmd+0xa>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8000c02:	4310      	orrs	r0, r2
 8000c04:	e001      	b.n	8000c0a <RCC_APB1PeriphResetCmd+0xe>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8000c06:	ea22 0000 	bic.w	r0, r2, r0
 8000c0a:	6218      	str	r0, [r3, #32]
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	40023800 	.word	0x40023800

08000c14 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000c14:	4b04      	ldr	r3, [pc, #16]	; (8000c28 <RCC_APB2PeriphResetCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8000c16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000c18:	b109      	cbz	r1, 8000c1e <RCC_APB2PeriphResetCmd+0xa>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8000c1a:	4310      	orrs	r0, r2
 8000c1c:	e001      	b.n	8000c22 <RCC_APB2PeriphResetCmd+0xe>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8000c1e:	ea22 0000 	bic.w	r0, r2, r0
 8000c22:	6258      	str	r0, [r3, #36]	; 0x24
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	40023800 	.word	0x40023800

08000c2c <RCC_AHB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000c2c:	4b04      	ldr	r3, [pc, #16]	; (8000c40 <RCC_AHB1PeriphClockLPModeCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 8000c2e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000c30:	b109      	cbz	r1, 8000c36 <RCC_AHB1PeriphClockLPModeCmd+0xa>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 8000c32:	4310      	orrs	r0, r2
 8000c34:	e001      	b.n	8000c3a <RCC_AHB1PeriphClockLPModeCmd+0xe>
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
 8000c36:	ea22 0000 	bic.w	r0, r2, r0
 8000c3a:	6518      	str	r0, [r3, #80]	; 0x50
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	40023800 	.word	0x40023800

08000c44 <RCC_AHB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 8000c44:	4b04      	ldr	r3, [pc, #16]	; (8000c58 <RCC_AHB2PeriphClockLPModeCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 8000c46:	6d5a      	ldr	r2, [r3, #84]	; 0x54
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000c48:	b109      	cbz	r1, 8000c4e <RCC_AHB2PeriphClockLPModeCmd+0xa>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 8000c4a:	4310      	orrs	r0, r2
 8000c4c:	e001      	b.n	8000c52 <RCC_AHB2PeriphClockLPModeCmd+0xe>
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
 8000c4e:	ea22 0000 	bic.w	r0, r2, r0
 8000c52:	6558      	str	r0, [r3, #84]	; 0x54
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	40023800 	.word	0x40023800

08000c5c <RCC_AHB3PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 8000c5c:	4b04      	ldr	r3, [pc, #16]	; (8000c70 <RCC_AHB3PeriphClockLPModeCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 8000c5e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000c60:	b109      	cbz	r1, 8000c66 <RCC_AHB3PeriphClockLPModeCmd+0xa>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 8000c62:	4310      	orrs	r0, r2
 8000c64:	e001      	b.n	8000c6a <RCC_AHB3PeriphClockLPModeCmd+0xe>
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
 8000c66:	ea22 0000 	bic.w	r0, r2, r0
 8000c6a:	6598      	str	r0, [r3, #88]	; 0x58
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	40023800 	.word	0x40023800

08000c74 <RCC_APB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000c74:	4b04      	ldr	r3, [pc, #16]	; (8000c88 <RCC_APB1PeriphClockLPModeCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 8000c76:	6e1a      	ldr	r2, [r3, #96]	; 0x60
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000c78:	b109      	cbz	r1, 8000c7e <RCC_APB1PeriphClockLPModeCmd+0xa>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 8000c7a:	4310      	orrs	r0, r2
 8000c7c:	e001      	b.n	8000c82 <RCC_APB1PeriphClockLPModeCmd+0xe>
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
 8000c7e:	ea22 0000 	bic.w	r0, r2, r0
 8000c82:	6618      	str	r0, [r3, #96]	; 0x60
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	40023800 	.word	0x40023800

08000c8c <RCC_APB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000c8c:	4b04      	ldr	r3, [pc, #16]	; (8000ca0 <RCC_APB2PeriphClockLPModeCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 8000c8e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000c90:	b109      	cbz	r1, 8000c96 <RCC_APB2PeriphClockLPModeCmd+0xa>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 8000c92:	4310      	orrs	r0, r2
 8000c94:	e001      	b.n	8000c9a <RCC_APB2PeriphClockLPModeCmd+0xe>
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
 8000c96:	ea22 0000 	bic.w	r0, r2, r0
 8000c9a:	6658      	str	r0, [r3, #100]	; 0x64
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	40023800 	.word	0x40023800

08000ca4 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
 8000ca4:	4b04      	ldr	r3, [pc, #16]	; (8000cb8 <RCC_ITConfig+0x14>)
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8000ca6:	781a      	ldrb	r2, [r3, #0]
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000ca8:	b109      	cbz	r1, 8000cae <RCC_ITConfig+0xa>
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8000caa:	4310      	orrs	r0, r2
 8000cac:	e001      	b.n	8000cb2 <RCC_ITConfig+0xe>
  }
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 8000cae:	ea22 0000 	bic.w	r0, r2, r0
 8000cb2:	7018      	strb	r0, [r3, #0]
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	4002380d 	.word	0x4002380d

08000cbc <RCC_GetFlagStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8000cbc:	0943      	lsrs	r3, r0, #5
  if (tmp == 1)               /* The flag to check is in CR register */
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	4a07      	ldr	r2, [pc, #28]	; (8000ce0 <RCC_GetFlagStatus+0x24>)
 8000cc2:	d101      	bne.n	8000cc8 <RCC_GetFlagStatus+0xc>
  {
    statusreg = RCC->CR;
 8000cc4:	6813      	ldr	r3, [r2, #0]
 8000cc6:	e003      	b.n	8000cd0 <RCC_GetFlagStatus+0x14>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8000cc8:	2b02      	cmp	r3, #2
  {
    statusreg = RCC->BDCR;
 8000cca:	bf0c      	ite	eq
 8000ccc:	6f13      	ldreq	r3, [r2, #112]	; 0x70
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8000cce:	6f53      	ldrne	r3, [r2, #116]	; 0x74
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 8000cd0:	f000 001f 	and.w	r0, r0, #31
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8000cd4:	fa33 f000 	lsrs.w	r0, r3, r0
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
}
 8000cd8:	f000 0001 	and.w	r0, r0, #1
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	40023800 	.word	0x40023800

08000ce4 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8000ce4:	b507      	push	{r0, r1, r2, lr}
  __IO uint32_t startupcounter = 0;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	9301      	str	r3, [sp, #4]
  ErrorStatus status = ERROR;
  FlagStatus hsestatus = RESET;
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 8000cea:	2031      	movs	r0, #49	; 0x31
 8000cec:	f7ff ffe6 	bl	8000cbc <RCC_GetFlagStatus>
    startupcounter++;
 8000cf0:	9b01      	ldr	r3, [sp, #4]
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	9301      	str	r3, [sp, #4]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 8000cf6:	9b01      	ldr	r3, [sp, #4]
 8000cf8:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000cfc:	d001      	beq.n	8000d02 <RCC_WaitForHSEStartUp+0x1e>
 8000cfe:	2800      	cmp	r0, #0
 8000d00:	d0f3      	beq.n	8000cea <RCC_WaitForHSEStartUp+0x6>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 8000d02:	2031      	movs	r0, #49	; 0x31
 8000d04:	f7ff ffda 	bl	8000cbc <RCC_GetFlagStatus>
  else
  {
    status = ERROR;
  }
  return (status);
}
 8000d08:	3000      	adds	r0, #0
 8000d0a:	bf18      	it	ne
 8000d0c:	2001      	movne	r0, #1
 8000d0e:	bd0e      	pop	{r1, r2, r3, pc}

08000d10 <RCC_ClearFlag>:
  * @retval None
  */
void RCC_ClearFlag(void)
{
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 8000d10:	4b02      	ldr	r3, [pc, #8]	; (8000d1c <RCC_ClearFlag+0xc>)
 8000d12:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8000d14:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000d18:	675a      	str	r2, [r3, #116]	; 0x74
}
 8000d1a:	4770      	bx	lr
 8000d1c:	40023800 	.word	0x40023800

08000d20 <RCC_GetITStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 8000d20:	4b03      	ldr	r3, [pc, #12]	; (8000d30 <RCC_GetITStatus+0x10>)
 8000d22:	68db      	ldr	r3, [r3, #12]
  {
    bitstatus = SET;
 8000d24:	4218      	tst	r0, r3
  {
    bitstatus = RESET;
  }
  /* Return the RCC_IT status */
  return  bitstatus;
}
 8000d26:	bf0c      	ite	eq
 8000d28:	2000      	moveq	r0, #0
 8000d2a:	2001      	movne	r0, #1
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	40023800 	.word	0x40023800

08000d34 <RCC_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 8000d34:	4b01      	ldr	r3, [pc, #4]	; (8000d3c <RCC_ClearITPendingBit+0x8>)
 8000d36:	7018      	strb	r0, [r3, #0]
}
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	4002380e 	.word	0x4002380e

08000d40 <USART_DeInit>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 8000d40:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 8000d42:	4b23      	ldr	r3, [pc, #140]	; (8000dd0 <USART_DeInit+0x90>)
 8000d44:	4298      	cmp	r0, r3
 8000d46:	d105      	bne.n	8000d54 <USART_DeInit+0x14>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 8000d48:	2010      	movs	r0, #16
 8000d4a:	2101      	movs	r1, #1
 8000d4c:	f7ff ff62 	bl	8000c14 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 8000d50:	2010      	movs	r0, #16
 8000d52:	e037      	b.n	8000dc4 <USART_DeInit+0x84>
  }
  else if (USARTx == USART2)
 8000d54:	4b1f      	ldr	r3, [pc, #124]	; (8000dd4 <USART_DeInit+0x94>)
 8000d56:	4298      	cmp	r0, r3
 8000d58:	d107      	bne.n	8000d6a <USART_DeInit+0x2a>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 8000d5a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000d5e:	2101      	movs	r1, #1
 8000d60:	f7ff ff4c 	bl	8000bfc <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 8000d64:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000d68:	e009      	b.n	8000d7e <USART_DeInit+0x3e>
  }
  else if (USARTx == USART3)
 8000d6a:	4b1b      	ldr	r3, [pc, #108]	; (8000dd8 <USART_DeInit+0x98>)
 8000d6c:	4298      	cmp	r0, r3
 8000d6e:	d10b      	bne.n	8000d88 <USART_DeInit+0x48>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 8000d70:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000d74:	2101      	movs	r1, #1
 8000d76:	f7ff ff41 	bl	8000bfc <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 8000d7a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000d7e:	2100      	movs	r1, #0
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
    }
  }
}
 8000d80:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
  }
  else if (USARTx == USART3)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 8000d84:	f7ff bf3a 	b.w	8000bfc <RCC_APB1PeriphResetCmd>
  }    
  else if (USARTx == UART4)
 8000d88:	4b14      	ldr	r3, [pc, #80]	; (8000ddc <USART_DeInit+0x9c>)
 8000d8a:	4298      	cmp	r0, r3
 8000d8c:	d107      	bne.n	8000d9e <USART_DeInit+0x5e>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 8000d8e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000d92:	2101      	movs	r1, #1
 8000d94:	f7ff ff32 	bl	8000bfc <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 8000d98:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000d9c:	e7ef      	b.n	8000d7e <USART_DeInit+0x3e>
  }
  else if (USARTx == UART5)
 8000d9e:	4b10      	ldr	r3, [pc, #64]	; (8000de0 <USART_DeInit+0xa0>)
 8000da0:	4298      	cmp	r0, r3
 8000da2:	d107      	bne.n	8000db4 <USART_DeInit+0x74>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 8000da4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000da8:	2101      	movs	r1, #1
 8000daa:	f7ff ff27 	bl	8000bfc <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 8000dae:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000db2:	e7e4      	b.n	8000d7e <USART_DeInit+0x3e>
  }     
  else
  {
    if (USARTx == USART6)
 8000db4:	4b0b      	ldr	r3, [pc, #44]	; (8000de4 <USART_DeInit+0xa4>)
 8000db6:	4298      	cmp	r0, r3
 8000db8:	d109      	bne.n	8000dce <USART_DeInit+0x8e>
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
 8000dba:	2020      	movs	r0, #32
 8000dbc:	2101      	movs	r1, #1
 8000dbe:	f7ff ff29 	bl	8000c14 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 8000dc2:	2020      	movs	r0, #32
 8000dc4:	2100      	movs	r1, #0
    }
  }
}
 8000dc6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (USARTx == USART6)
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 8000dca:	f7ff bf23 	b.w	8000c14 <RCC_APB2PeriphResetCmd>
 8000dce:	bd08      	pop	{r3, pc}
 8000dd0:	40011000 	.word	0x40011000
 8000dd4:	40004400 	.word	0x40004400
 8000dd8:	40004800 	.word	0x40004800
 8000ddc:	40004c00 	.word	0x40004c00
 8000de0:	40005000 	.word	0x40005000
 8000de4:	40011400 	.word	0x40011400

08000de8 <USART_Init>:
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000de8:	8a03      	ldrh	r3, [r0, #16]
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8000dea:	88ca      	ldrh	r2, [r1, #6]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000dec:	b29b      	uxth	r3, r3

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8000dee:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000df2:	b530      	push	{r4, r5, lr}
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000df4:	4313      	orrs	r3, r2
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000df6:	460d      	mov	r5, r1
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000df8:	8203      	strh	r3, [r0, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8000dfa:	8983      	ldrh	r3, [r0, #12]

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000dfc:	8909      	ldrh	r1, [r1, #8]
 8000dfe:	88aa      	ldrh	r2, [r5, #4]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8000e00:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000e04:	430a      	orrs	r2, r1
 8000e06:	8969      	ldrh	r1, [r5, #10]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8000e08:	f023 030c 	bic.w	r3, r3, #12
 8000e0c:	041b      	lsls	r3, r3, #16

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000e0e:	430a      	orrs	r2, r1

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8000e10:	0c1b      	lsrs	r3, r3, #16

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000e12:	b292      	uxth	r2, r2
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8000e14:	4313      	orrs	r3, r2
 8000e16:	8183      	strh	r3, [r0, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000e18:	8a83      	ldrh	r3, [r0, #20]
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8000e1a:	89aa      	ldrh	r2, [r5, #12]

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000e1c:	b29b      	uxth	r3, r3

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8000e1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8000e22:	4313      	orrs	r3, r2
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000e24:	b085      	sub	sp, #20
  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8000e26:	8283      	strh	r3, [r0, #20]
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000e28:	4604      	mov	r4, r0
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8000e2a:	4668      	mov	r0, sp
 8000e2c:	f7ff fe16 	bl	8000a5c <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8000e30:	4b1a      	ldr	r3, [pc, #104]	; (8000e9c <USART_Init+0xb4>)
 8000e32:	429c      	cmp	r4, r3
 8000e34:	d003      	beq.n	8000e3e <USART_Init+0x56>
 8000e36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000e3a:	429c      	cmp	r4, r3
 8000e3c:	d101      	bne.n	8000e42 <USART_Init+0x5a>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8000e3e:	9b03      	ldr	r3, [sp, #12]
 8000e40:	e000      	b.n	8000e44 <USART_Init+0x5c>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8000e42:	9b02      	ldr	r3, [sp, #8]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000e44:	89a2      	ldrh	r2, [r4, #12]
 8000e46:	b212      	sxth	r2, r2
 8000e48:	2a00      	cmp	r2, #0
 8000e4a:	f04f 0119 	mov.w	r1, #25
 8000e4e:	682a      	ldr	r2, [r5, #0]
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000e50:	fb01 f103 	mul.w	r1, r1, r3
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000e54:	da01      	bge.n	8000e5a <USART_Init+0x72>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000e56:	0052      	lsls	r2, r2, #1
 8000e58:	e000      	b.n	8000e5c <USART_Init+0x74>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8000e5a:	0092      	lsls	r2, r2, #2
  }
  tmpreg = (integerdivider / 100) << 4;
 8000e5c:	2364      	movs	r3, #100	; 0x64
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8000e5e:	fbb1 f1f2 	udiv	r1, r1, r2
  }
  tmpreg = (integerdivider / 100) << 4;
 8000e62:	fbb1 f2f3 	udiv	r2, r1, r3
 8000e66:	0112      	lsls	r2, r2, #4

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000e68:	0910      	lsrs	r0, r2, #4
 8000e6a:	fb03 1110 	mls	r1, r3, r0, r1

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000e6e:	89a0      	ldrh	r0, [r4, #12]
 8000e70:	b200      	sxth	r0, r0
 8000e72:	2800      	cmp	r0, #0
 8000e74:	da06      	bge.n	8000e84 <USART_Init+0x9c>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8000e76:	00c9      	lsls	r1, r1, #3
 8000e78:	3132      	adds	r1, #50	; 0x32
 8000e7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e7e:	f003 0307 	and.w	r3, r3, #7
 8000e82:	e005      	b.n	8000e90 <USART_Init+0xa8>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8000e84:	0109      	lsls	r1, r1, #4
 8000e86:	3132      	adds	r1, #50	; 0x32
 8000e88:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e8c:	f003 030f 	and.w	r3, r3, #15
 8000e90:	431a      	orrs	r2, r3
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8000e92:	b292      	uxth	r2, r2
 8000e94:	8122      	strh	r2, [r4, #8]
}
 8000e96:	b005      	add	sp, #20
 8000e98:	bd30      	pop	{r4, r5, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40011000 	.word	0x40011000

08000ea0 <USART_StructInit>:
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 8000ea0:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000ea4:	6003      	str	r3, [r0, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
  USART_InitStruct->USART_Parity = USART_Parity_No ;
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8000ea6:	220c      	movs	r2, #12
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	8083      	strh	r3, [r0, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 8000eac:	80c3      	strh	r3, [r0, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 8000eae:	8103      	strh	r3, [r0, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8000eb0:	8142      	strh	r2, [r0, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 8000eb2:	8183      	strh	r3, [r0, #12]
}
 8000eb4:	4770      	bx	lr

08000eb6 <USART_ClockInit>:
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8000eb6:	880b      	ldrh	r3, [r1, #0]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000eb8:	8a02      	ldrh	r2, [r0, #16]
  *         contains the configuration information for the specified  USART peripheral.
  * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 8000eba:	b510      	push	{r4, lr}
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8000ebc:	884c      	ldrh	r4, [r1, #2]
 8000ebe:	4323      	orrs	r3, r4
 8000ec0:	888c      	ldrh	r4, [r1, #4]
 8000ec2:	88c9      	ldrh	r1, [r1, #6]
 8000ec4:	4323      	orrs	r3, r4
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000ec6:	b292      	uxth	r2, r2
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8000ec8:	430b      	orrs	r3, r1
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 8000eca:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8000ece:	b29b      	uxth	r3, r3
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	8203      	strh	r3, [r0, #16]
}
 8000ed4:	bd10      	pop	{r4, pc}

08000ed6 <USART_ClockStructInit>:
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	8003      	strh	r3, [r0, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 8000eda:	8043      	strh	r3, [r0, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 8000edc:	8083      	strh	r3, [r0, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 8000ede:	80c3      	strh	r3, [r0, #6]
}
 8000ee0:	4770      	bx	lr

08000ee2 <USART_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8000ee2:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000ee4:	b119      	cbz	r1, 8000eee <USART_Cmd+0xc>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8000ee6:	b29b      	uxth	r3, r3
 8000ee8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000eec:	e003      	b.n	8000ef6 <USART_Cmd+0x14>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8000eee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000ef2:	041b      	lsls	r3, r3, #16
 8000ef4:	0c1b      	lsrs	r3, r3, #16
 8000ef6:	8183      	strh	r3, [r0, #12]
 8000ef8:	4770      	bx	lr

08000efa <USART_SetPrescaler>:
{ 
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= USART_GTPR_GT;
 8000efa:	8b03      	ldrh	r3, [r0, #24]
 8000efc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000f00:	8303      	strh	r3, [r0, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 8000f02:	8b03      	ldrh	r3, [r0, #24]
 8000f04:	b29b      	uxth	r3, r3
 8000f06:	430b      	orrs	r3, r1
 8000f08:	8303      	strh	r3, [r0, #24]
}
 8000f0a:	4770      	bx	lr

08000f0c <USART_OverSampling8Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 8000f0c:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000f0e:	b129      	cbz	r1, 8000f1c <USART_OverSampling8Cmd+0x10>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 8000f10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000f14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000f18:	b29b      	uxth	r3, r3
 8000f1a:	e001      	b.n	8000f20 <USART_OverSampling8Cmd+0x14>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
 8000f1c:	045b      	lsls	r3, r3, #17
 8000f1e:	0c5b      	lsrs	r3, r3, #17
 8000f20:	8183      	strh	r3, [r0, #12]
 8000f22:	4770      	bx	lr

08000f24 <USART_OneBitMethodCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 8000f24:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000f26:	b119      	cbz	r1, 8000f30 <USART_OneBitMethodCmd+0xc>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 8000f28:	b29b      	uxth	r3, r3
 8000f2a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f2e:	e003      	b.n	8000f38 <USART_OneBitMethodCmd+0x14>
  }
  else
  {
    /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
 8000f30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000f34:	041b      	lsls	r3, r3, #16
 8000f36:	0c1b      	lsrs	r3, r3, #16
 8000f38:	8283      	strh	r3, [r0, #20]
 8000f3a:	4770      	bx	lr

08000f3c <USART_SendData>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8000f3c:	05c9      	lsls	r1, r1, #23
 8000f3e:	0dc9      	lsrs	r1, r1, #23
 8000f40:	8081      	strh	r1, [r0, #4]
}
 8000f42:	4770      	bx	lr

08000f44 <USART_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8000f44:	8880      	ldrh	r0, [r0, #4]
 8000f46:	05c0      	lsls	r0, r0, #23
}
 8000f48:	0dc0      	lsrs	r0, r0, #23
 8000f4a:	4770      	bx	lr

08000f4c <USART_SetAddress>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
 8000f4c:	8a03      	ldrh	r3, [r0, #16]
 8000f4e:	f023 030f 	bic.w	r3, r3, #15
 8000f52:	041b      	lsls	r3, r3, #16
 8000f54:	0c1b      	lsrs	r3, r3, #16
 8000f56:	8203      	strh	r3, [r0, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
 8000f58:	8a03      	ldrh	r3, [r0, #16]
 8000f5a:	b29b      	uxth	r3, r3
 8000f5c:	430b      	orrs	r3, r1
 8000f5e:	8203      	strh	r3, [r0, #16]
}
 8000f60:	4770      	bx	lr

08000f62 <USART_ReceiverWakeUpCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 8000f62:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
 8000f64:	b119      	cbz	r1, 8000f6e <USART_ReceiverWakeUpCmd+0xc>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 8000f66:	b29b      	uxth	r3, r3
 8000f68:	f043 0302 	orr.w	r3, r3, #2
 8000f6c:	e003      	b.n	8000f76 <USART_ReceiverWakeUpCmd+0x14>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
 8000f6e:	f023 0302 	bic.w	r3, r3, #2
 8000f72:	041b      	lsls	r3, r3, #16
 8000f74:	0c1b      	lsrs	r3, r3, #16
 8000f76:	8183      	strh	r3, [r0, #12]
 8000f78:	4770      	bx	lr

08000f7a <USART_WakeUpConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
 8000f7a:	8983      	ldrh	r3, [r0, #12]
 8000f7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000f80:	041b      	lsls	r3, r3, #16
 8000f82:	0c1b      	lsrs	r3, r3, #16
 8000f84:	8183      	strh	r3, [r0, #12]
  USARTx->CR1 |= USART_WakeUp;
 8000f86:	8983      	ldrh	r3, [r0, #12]
 8000f88:	b29b      	uxth	r3, r3
 8000f8a:	430b      	orrs	r3, r1
 8000f8c:	8183      	strh	r3, [r0, #12]
}
 8000f8e:	4770      	bx	lr

08000f90 <USART_LINBreakDetectLengthConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
 8000f90:	8a03      	ldrh	r3, [r0, #16]
 8000f92:	f023 0320 	bic.w	r3, r3, #32
 8000f96:	041b      	lsls	r3, r3, #16
 8000f98:	0c1b      	lsrs	r3, r3, #16
 8000f9a:	8203      	strh	r3, [r0, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 8000f9c:	8a03      	ldrh	r3, [r0, #16]
 8000f9e:	b29b      	uxth	r3, r3
 8000fa0:	430b      	orrs	r3, r1
 8000fa2:	8203      	strh	r3, [r0, #16]
}
 8000fa4:	4770      	bx	lr

08000fa6 <USART_LINCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 8000fa6:	8a03      	ldrh	r3, [r0, #16]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000fa8:	b119      	cbz	r1, 8000fb2 <USART_LINCmd+0xc>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 8000faa:	b29b      	uxth	r3, r3
 8000fac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fb0:	e003      	b.n	8000fba <USART_LINCmd+0x14>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
 8000fb2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000fb6:	041b      	lsls	r3, r3, #16
 8000fb8:	0c1b      	lsrs	r3, r3, #16
 8000fba:	8203      	strh	r3, [r0, #16]
 8000fbc:	4770      	bx	lr

08000fbe <USART_SendBreak>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= USART_CR1_SBK;
 8000fbe:	8983      	ldrh	r3, [r0, #12]
 8000fc0:	b29b      	uxth	r3, r3
 8000fc2:	f043 0301 	orr.w	r3, r3, #1
 8000fc6:	8183      	strh	r3, [r0, #12]
}
 8000fc8:	4770      	bx	lr

08000fca <USART_HalfDuplexCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 8000fca:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000fcc:	b119      	cbz	r1, 8000fd6 <USART_HalfDuplexCmd+0xc>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 8000fce:	b29b      	uxth	r3, r3
 8000fd0:	f043 0308 	orr.w	r3, r3, #8
 8000fd4:	e003      	b.n	8000fde <USART_HalfDuplexCmd+0x14>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
 8000fd6:	f023 0308 	bic.w	r3, r3, #8
 8000fda:	041b      	lsls	r3, r3, #16
 8000fdc:	0c1b      	lsrs	r3, r3, #16
 8000fde:	8283      	strh	r3, [r0, #20]
 8000fe0:	4770      	bx	lr

08000fe2 <USART_SetGuardTime>:
{    
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= USART_GTPR_PSC;
 8000fe2:	8b03      	ldrh	r3, [r0, #24]
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	8303      	strh	r3, [r0, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 8000fe8:	8b03      	ldrh	r3, [r0, #24]
 8000fea:	b29b      	uxth	r3, r3
 8000fec:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8000ff0:	8303      	strh	r3, [r0, #24]
}
 8000ff2:	4770      	bx	lr

08000ff4 <USART_SmartCardCmd>:
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 8000ff4:	8a83      	ldrh	r3, [r0, #20]
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000ff6:	b119      	cbz	r1, 8001000 <USART_SmartCardCmd+0xc>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 8000ff8:	b29b      	uxth	r3, r3
 8000ffa:	f043 0320 	orr.w	r3, r3, #32
 8000ffe:	e003      	b.n	8001008 <USART_SmartCardCmd+0x14>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
 8001000:	f023 0320 	bic.w	r3, r3, #32
 8001004:	041b      	lsls	r3, r3, #16
 8001006:	0c1b      	lsrs	r3, r3, #16
 8001008:	8283      	strh	r3, [r0, #20]
 800100a:	4770      	bx	lr

0800100c <USART_SmartCardNACKCmd>:
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 800100c:	8a83      	ldrh	r3, [r0, #20]
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800100e:	b119      	cbz	r1, 8001018 <USART_SmartCardNACKCmd+0xc>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 8001010:	b29b      	uxth	r3, r3
 8001012:	f043 0310 	orr.w	r3, r3, #16
 8001016:	e003      	b.n	8001020 <USART_SmartCardNACKCmd+0x14>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
 8001018:	f023 0310 	bic.w	r3, r3, #16
 800101c:	041b      	lsls	r3, r3, #16
 800101e:	0c1b      	lsrs	r3, r3, #16
 8001020:	8283      	strh	r3, [r0, #20]
 8001022:	4770      	bx	lr

08001024 <USART_IrDAConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
 8001024:	8a83      	ldrh	r3, [r0, #20]
 8001026:	f023 0304 	bic.w	r3, r3, #4
 800102a:	041b      	lsls	r3, r3, #16
 800102c:	0c1b      	lsrs	r3, r3, #16
 800102e:	8283      	strh	r3, [r0, #20]
  USARTx->CR3 |= USART_IrDAMode;
 8001030:	8a83      	ldrh	r3, [r0, #20]
 8001032:	b29b      	uxth	r3, r3
 8001034:	430b      	orrs	r3, r1
 8001036:	8283      	strh	r3, [r0, #20]
}
 8001038:	4770      	bx	lr

0800103a <USART_IrDACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 800103a:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 800103c:	b119      	cbz	r1, 8001046 <USART_IrDACmd+0xc>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 800103e:	b29b      	uxth	r3, r3
 8001040:	f043 0302 	orr.w	r3, r3, #2
 8001044:	e003      	b.n	800104e <USART_IrDACmd+0x14>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
 8001046:	f023 0302 	bic.w	r3, r3, #2
 800104a:	041b      	lsls	r3, r3, #16
 800104c:	0c1b      	lsrs	r3, r3, #16
 800104e:	8283      	strh	r3, [r0, #20]
 8001050:	4770      	bx	lr

08001052 <USART_DMACmd>:

  if (NewState != DISABLE)
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8001052:	8a83      	ldrh	r3, [r0, #20]
 8001054:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 8001056:	b10a      	cbz	r2, 800105c <USART_DMACmd+0xa>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8001058:	4319      	orrs	r1, r3
 800105a:	e001      	b.n	8001060 <USART_DMACmd+0xe>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 800105c:	ea23 0101 	bic.w	r1, r3, r1
 8001060:	8281      	strh	r1, [r0, #20]
 8001062:	4770      	bx	lr

08001064 <USART_ITConfig>:
  } 
    
  usartxbase = (uint32_t)USARTx;

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8001064:	f3c1 1342 	ubfx	r3, r1, #5, #3
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8001068:	b510      	push	{r4, lr}

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 800106a:	f001 011f 	and.w	r1, r1, #31
  itmask = (((uint32_t)0x01) << itpos);
 800106e:	2401      	movs	r4, #1
 8001070:	fa14 f101 	lsls.w	r1, r4, r1
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8001074:	42a3      	cmp	r3, r4
 8001076:	d101      	bne.n	800107c <USART_ITConfig+0x18>
  {
    usartxbase += 0x0C;
 8001078:	300c      	adds	r0, #12
 800107a:	e004      	b.n	8001086 <USART_ITConfig+0x22>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 800107c:	2b02      	cmp	r3, #2
 800107e:	d101      	bne.n	8001084 <USART_ITConfig+0x20>
  {
    usartxbase += 0x10;
 8001080:	3010      	adds	r0, #16
 8001082:	e000      	b.n	8001086 <USART_ITConfig+0x22>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8001084:	3014      	adds	r0, #20
  }
  if (NewState != DISABLE)
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8001086:	6803      	ldr	r3, [r0, #0]
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
  }
  if (NewState != DISABLE)
 8001088:	b10a      	cbz	r2, 800108e <USART_ITConfig+0x2a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 800108a:	4319      	orrs	r1, r3
 800108c:	e001      	b.n	8001092 <USART_ITConfig+0x2e>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 800108e:	ea23 0101 	bic.w	r1, r3, r1
 8001092:	6001      	str	r1, [r0, #0]
 8001094:	bd10      	pop	{r4, pc}

08001096 <USART_GetFlagStatus>:
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8001096:	8803      	ldrh	r3, [r0, #0]
  {
    bitstatus = SET;
 8001098:	4219      	tst	r1, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 800109a:	bf0c      	ite	eq
 800109c:	2000      	moveq	r0, #0
 800109e:	2001      	movne	r0, #1
 80010a0:	4770      	bx	lr

080010a2 <USART_ClearFlag>:
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
       
  USARTx->SR = (uint16_t)~USART_FLAG;
 80010a2:	43c9      	mvns	r1, r1
 80010a4:	b289      	uxth	r1, r1
 80010a6:	8001      	strh	r1, [r0, #0]
}
 80010a8:	4770      	bx	lr

080010aa <USART_GetITStatus>:
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
 80010aa:	2201      	movs	r2, #1
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 80010ac:	b510      	push	{r4, lr}
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 80010ae:	f001 031f 	and.w	r3, r1, #31
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 80010b2:	f3c1 1442 	ubfx	r4, r1, #5, #3
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
 80010b6:	409a      	lsls	r2, r3
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 80010b8:	2c01      	cmp	r4, #1
 80010ba:	d101      	bne.n	80010c0 <USART_GetITStatus+0x16>
  {
    itmask &= USARTx->CR1;
 80010bc:	8983      	ldrh	r3, [r0, #12]
 80010be:	e003      	b.n	80010c8 <USART_GetITStatus+0x1e>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 80010c0:	2c02      	cmp	r4, #2
  {
    itmask &= USARTx->CR2;
 80010c2:	bf0c      	ite	eq
 80010c4:	8a03      	ldrheq	r3, [r0, #16]
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 80010c6:	8a83      	ldrhne	r3, [r0, #20]
 80010c8:	b29b      	uxth	r3, r3
 80010ca:	4013      	ands	r3, r2
  }
  
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
  bitpos &= USARTx->SR;
 80010cc:	8802      	ldrh	r2, [r0, #0]
 80010ce:	b292      	uxth	r2, r2
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 80010d0:	b143      	cbz	r3, 80010e4 <USART_GetITStatus+0x3a>
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
  }
  
  bitpos = USART_IT >> 0x08;
 80010d2:	0a09      	lsrs	r1, r1, #8
  bitpos = (uint32_t)0x01 << bitpos;
 80010d4:	2301      	movs	r3, #1
 80010d6:	fa13 f101 	lsls.w	r1, r3, r1
  *            @arg USART_IT_NE:   Noise Error interrupt
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
 80010da:	4211      	tst	r1, r2
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
  bitpos &= USARTx->SR;
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
  {
    bitstatus = SET;
 80010dc:	bf0c      	ite	eq
 80010de:	2000      	moveq	r0, #0
 80010e0:	2001      	movne	r0, #1
 80010e2:	bd10      	pop	{r4, pc}
  }
  else
  {
    bitstatus = RESET;
 80010e4:	4618      	mov	r0, r3
  }
  
  return bitstatus;  
}
 80010e6:	bd10      	pop	{r4, pc}

080010e8 <USART_ClearITPendingBit>:
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 80010e8:	0a09      	lsrs	r1, r1, #8
 80010ea:	2301      	movs	r3, #1
 80010ec:	408b      	lsls	r3, r1
  USARTx->SR = (uint16_t)~itmask;
 80010ee:	43db      	mvns	r3, r3
 80010f0:	b29b      	uxth	r3, r3
 80010f2:	8003      	strh	r3, [r0, #0]
}
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop

080010f8 <_delay_ms>:
  volatile uint32_t i;				\
  for (i = 0; i < 10000; ++i)				\
    __asm__ __volatile__ ("nop\n\t":::"memory");	\
} while (0)

inline void _delay_ms(uint32_t t) {
 80010f8:	b082      	sub	sp, #8
	while (t-- > 0) {
		__delay();
 80010fa:	2200      	movs	r2, #0
 80010fc:	f242 730f 	movw	r3, #9999	; 0x270f
  for (i = 0; i < 10000; ++i)				\
    __asm__ __volatile__ ("nop\n\t":::"memory");	\
} while (0)

inline void _delay_ms(uint32_t t) {
	while (t-- > 0) {
 8001100:	e009      	b.n	8001116 <_delay_ms+0x1e>
		__delay();
 8001102:	9201      	str	r2, [sp, #4]
 8001104:	e003      	b.n	800110e <_delay_ms+0x16>
 8001106:	bf00      	nop
 8001108:	9901      	ldr	r1, [sp, #4]
 800110a:	3101      	adds	r1, #1
 800110c:	9101      	str	r1, [sp, #4]
 800110e:	9901      	ldr	r1, [sp, #4]
 8001110:	4299      	cmp	r1, r3
 8001112:	d9f8      	bls.n	8001106 <_delay_ms+0xe>
 8001114:	3801      	subs	r0, #1
  for (i = 0; i < 10000; ++i)				\
    __asm__ __volatile__ ("nop\n\t":::"memory");	\
} while (0)

inline void _delay_ms(uint32_t t) {
	while (t-- > 0) {
 8001116:	2800      	cmp	r0, #0
 8001118:	d1f3      	bne.n	8001102 <_delay_ms+0xa>
		__delay();
	}
}
 800111a:	b002      	add	sp, #8
 800111c:	4770      	bx	lr
	...

08001120 <_close>:
	}
}

int _close(int file) {
	return -1;
}
 8001120:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001124:	4770      	bx	lr

08001126 <_execve>:
/*
 execve
 Transfer control to a new process. Minimal implementation (for a system without processes):
 */
int _execve(char *name, char **argv, char **env) {
	errno = ENOMEM;
 8001126:	4b03      	ldr	r3, [pc, #12]	; (8001134 <_execve+0xe>)
 8001128:	220c      	movs	r2, #12
 800112a:	601a      	str	r2, [r3, #0]
	return -1;
}
 800112c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	20000bb8 	.word	0x20000bb8

08001138 <_fork>:
 fork
 Create a new process. Minimal implementation (for a system without processes):
 */

int _fork() {
	errno = EAGAIN;
 8001138:	4b02      	ldr	r3, [pc, #8]	; (8001144 <_fork+0xc>)
 800113a:	220b      	movs	r2, #11
 800113c:	601a      	str	r2, [r3, #0]
	return -1;
}
 800113e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001142:	4770      	bx	lr
 8001144:	20000bb8 	.word	0x20000bb8

08001148 <_fstat>:
 Status of an open file. For consistency with other minimal implementations in these examples,
 all files are regarded as character special devices.
 The `sys/stat.h' header file required is distributed in the `include' subdirectory for this C library.
 */
int _fstat(int file, struct stat *st) {
	st->st_mode = S_IFCHR;
 8001148:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800114c:	604b      	str	r3, [r1, #4]
	return 0;
}
 800114e:	2000      	movs	r0, #0
 8001150:	4770      	bx	lr

08001152 <_getpid>:
 Process-ID; this is sometimes used to generate strings unlikely to conflict with other processes. Minimal implementation, for a system without processes:
 */

int _getpid() {
	return 1;
}
 8001152:	2001      	movs	r0, #1
 8001154:	4770      	bx	lr

08001156 <_isatty>:
/*
 isatty
 Query whether output stream is a terminal. For consistency with the other minimal implementations,
 */
int _isatty(int file) {
	switch (file) {
 8001156:	2802      	cmp	r0, #2
 8001158:	d904      	bls.n	8001164 <_isatty+0xe>
	case STDERR_FILENO:
	case STDIN_FILENO:
		return 1;
	default:
		//errno = ENOTTY;
		errno = EBADF;
 800115a:	4b03      	ldr	r3, [pc, #12]	; (8001168 <_isatty+0x12>)
 800115c:	2209      	movs	r2, #9
 800115e:	601a      	str	r2, [r3, #0]
		return 0;
 8001160:	2000      	movs	r0, #0
 8001162:	4770      	bx	lr
int _isatty(int file) {
	switch (file) {
	case STDOUT_FILENO:
	case STDERR_FILENO:
	case STDIN_FILENO:
		return 1;
 8001164:	2001      	movs	r0, #1
	default:
		//errno = ENOTTY;
		errno = EBADF;
		return 0;
	}
}
 8001166:	4770      	bx	lr
 8001168:	20000bb8 	.word	0x20000bb8

0800116c <_kill>:
/*
 kill
 Send a signal. Minimal implementation:
 */
int _kill(int pid, int sig) {
	errno = EINVAL;
 800116c:	4b02      	ldr	r3, [pc, #8]	; (8001178 <_kill+0xc>)
 800116e:	2216      	movs	r2, #22
 8001170:	601a      	str	r2, [r3, #0]
	return (-1);
}
 8001172:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001176:	4770      	bx	lr
 8001178:	20000bb8 	.word	0x20000bb8

0800117c <_link>:
 link
 Establish a new name for an existing file. Minimal implementation:
 */

int _link(char *old, char *new) {
	errno = EMLINK;
 800117c:	4b02      	ldr	r3, [pc, #8]	; (8001188 <_link+0xc>)
 800117e:	221f      	movs	r2, #31
 8001180:	601a      	str	r2, [r3, #0]
	return -1;
}
 8001182:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001186:	4770      	bx	lr
 8001188:	20000bb8 	.word	0x20000bb8

0800118c <_lseek>:
 lseek
 Set position in a file. Minimal implementation:
 */
int _lseek(int file, int ptr, int dir) {
	return 0;
}
 800118c:	2000      	movs	r0, #0
 800118e:	4770      	bx	lr

08001190 <_read>:
 read
 Read a character to a file. `libc' subroutines will use this system routine for input from all files, including stdin
 Returns -1 on error or blocks until the number of characters have been read.
 */

int _read(int file, char *ptr, int len) {
 8001190:	b530      	push	{r4, r5, lr}
	int n;
	int num = 0;
	switch (file) {
 8001192:	b138      	cbz	r0, 80011a4 <_read+0x14>
 8001194:	e00d      	b.n	80011b2 <_read+0x22>
	case STDIN_FILENO:
		for (n = 0; n < len; n++) {
#if   STDIN_USART == 1
			while ((USART1->SR & USART_FLAG_RXNE) == (uint16_t)RESET) {}
 8001196:	881d      	ldrh	r5, [r3, #0]
 8001198:	06ad      	lsls	r5, r5, #26
 800119a:	d5fc      	bpl.n	8001196 <_read+0x6>
			char c = (char)(USART1->DR & (uint16_t)0x01FF);
 800119c:	88a5      	ldrh	r5, [r4, #4]
 800119e:	540d      	strb	r5, [r1, r0]
int _read(int file, char *ptr, int len) {
	int n;
	int num = 0;
	switch (file) {
	case STDIN_FILENO:
		for (n = 0; n < len; n++) {
 80011a0:	3001      	adds	r0, #1
 80011a2:	e001      	b.n	80011a8 <_read+0x18>
#if   STDIN_USART == 1
			while ((USART1->SR & USART_FLAG_RXNE) == (uint16_t)RESET) {}
 80011a4:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <_read+0x30>)
 80011a6:	461c      	mov	r4, r3
int _read(int file, char *ptr, int len) {
	int n;
	int num = 0;
	switch (file) {
	case STDIN_FILENO:
		for (n = 0; n < len; n++) {
 80011a8:	4290      	cmp	r0, r2
 80011aa:	dbf4      	blt.n	8001196 <_read+0x6>
 80011ac:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 80011b0:	bd30      	pop	{r4, r5, pc}
					*ptr++ = c;
					num++;
				}
				break;
				default:
				errno = EBADF;
 80011b2:	4b04      	ldr	r3, [pc, #16]	; (80011c4 <_read+0x34>)
 80011b4:	2209      	movs	r2, #9
 80011b6:	601a      	str	r2, [r3, #0]
				return -1;
 80011b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			}
	return num;
}
 80011bc:	bd30      	pop	{r4, r5, pc}
 80011be:	bf00      	nop
 80011c0:	40011000 	.word	0x40011000
 80011c4:	20000bb8 	.word	0x20000bb8

080011c8 <_stat>:
 Status of a file (by name). Minimal implementation:
 int    _EXFUN(stat,( const char *__path, struct stat *__sbuf ));
 */

int _stat(const char *filepath, struct stat *st) {
	st->st_mode = S_IFCHR;
 80011c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011cc:	604b      	str	r3, [r1, #4]
	return 0;
}
 80011ce:	2000      	movs	r0, #0
 80011d0:	4770      	bx	lr

080011d2 <_times>:
 Timing information for current process. Minimal implementation:
 */

clock_t _times(struct tms *buf) {
	return -1;
}
 80011d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011d6:	4770      	bx	lr

080011d8 <_unlink>:
/*
 unlink
 Remove a file's directory entry. Minimal implementation:
 */
int _unlink(char *name) {
	errno = ENOENT;
 80011d8:	4b02      	ldr	r3, [pc, #8]	; (80011e4 <_unlink+0xc>)
 80011da:	2202      	movs	r2, #2
 80011dc:	601a      	str	r2, [r3, #0]
	return -1;
}
 80011de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011e2:	4770      	bx	lr
 80011e4:	20000bb8 	.word	0x20000bb8

080011e8 <_wait>:
/*
 wait
 Wait for a child process. Minimal implementation:
 */
int _wait(int *status) {
	errno = ECHILD;
 80011e8:	4b02      	ldr	r3, [pc, #8]	; (80011f4 <_wait+0xc>)
 80011ea:	220a      	movs	r2, #10
 80011ec:	601a      	str	r2, [r3, #0]
	return -1;
}
 80011ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011f2:	4770      	bx	lr
 80011f4:	20000bb8 	.word	0x20000bb8

080011f8 <_write>:
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
 80011f8:	2801      	cmp	r0, #1
/*
 write
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
 80011fa:	b530      	push	{r4, r5, lr}
	int n;
	switch (file) {
 80011fc:	d009      	beq.n	8001212 <_write+0x1a>
 80011fe:	2802      	cmp	r0, #2
 8001200:	d11a      	bne.n	8001238 <_write+0x40>
 8001202:	e013      	b.n	800122c <_write+0x34>
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
#if STDOUT_USART == 1
			while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 8001204:	8805      	ldrh	r5, [r0, #0]
 8001206:	066d      	lsls	r5, r5, #25
 8001208:	d5fc      	bpl.n	8001204 <_write+0xc>
			USART1->DR = (*ptr++ & (uint16_t)0x01FF);
 800120a:	5ccd      	ldrb	r5, [r1, r3]
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
 800120c:	3301      	adds	r3, #1
#if STDOUT_USART == 1
			while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
			USART1->DR = (*ptr++ & (uint16_t)0x01FF);
 800120e:	80a5      	strh	r5, [r4, #4]
 8001210:	e002      	b.n	8001218 <_write+0x20>
	int n;
	switch (file) {
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
#if STDOUT_USART == 1
			while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 8001212:	480d      	ldr	r0, [pc, #52]	; (8001248 <_write+0x50>)
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
 8001214:	2300      	movs	r3, #0
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
#if STDOUT_USART == 1
			while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 8001216:	4604      	mov	r4, r0
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
 8001218:	4293      	cmp	r3, r2
 800121a:	dbf3      	blt.n	8001204 <_write+0xc>
 800121c:	e011      	b.n	8001242 <_write+0x4a>
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
#if STDERR_USART == 1
					while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 800121e:	8805      	ldrh	r5, [r0, #0]
 8001220:	066d      	lsls	r5, r5, #25
 8001222:	d5fc      	bpl.n	800121e <_write+0x26>
					USART1->DR = (*ptr++ & (uint16_t)0x01FF);
 8001224:	5ccd      	ldrb	r5, [r1, r3]
					USART3->DR = (*ptr++ & (uint16_t)0x01FF);
#endif
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
 8001226:	3301      	adds	r3, #1
#if STDERR_USART == 1
					while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
					USART1->DR = (*ptr++ & (uint16_t)0x01FF);
 8001228:	80a5      	strh	r5, [r4, #4]
 800122a:	e002      	b.n	8001232 <_write+0x3a>
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
#if STDERR_USART == 1
					while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 800122c:	4806      	ldr	r0, [pc, #24]	; (8001248 <_write+0x50>)
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
 800122e:	2300      	movs	r3, #0
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
#if STDERR_USART == 1
					while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 8001230:	4604      	mov	r4, r0
					USART3->DR = (*ptr++ & (uint16_t)0x01FF);
#endif
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
 8001232:	4293      	cmp	r3, r2
 8001234:	dbf3      	blt.n	800121e <_write+0x26>
 8001236:	e004      	b.n	8001242 <_write+0x4a>
					USART3->DR = (*ptr++ & (uint16_t)0x01FF);
#endif
				}
				break;
				default:
				errno = EBADF;
 8001238:	4b04      	ldr	r3, [pc, #16]	; (800124c <_write+0x54>)
 800123a:	2209      	movs	r2, #9
 800123c:	601a      	str	r2, [r3, #0]
				return -1;
 800123e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
			}
	return len;
}
 8001242:	4610      	mov	r0, r2
 8001244:	bd30      	pop	{r4, r5, pc}
 8001246:	bf00      	nop
 8001248:	40011000 	.word	0x40011000
 800124c:	20000bb8 	.word	0x20000bb8

08001250 <_sbrk>:
/*
 sbrk
 Increase program data space.
 Malloc and related functions depend on this
 */
caddr_t _sbrk(int incr) {
 8001250:	b508      	push	{r3, lr}

	extern char _ebss; // Defined by the linker
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0) {
 8001252:	4b0d      	ldr	r3, [pc, #52]	; (8001288 <_sbrk+0x38>)
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	b90a      	cbnz	r2, 800125c <_sbrk+0xc>
		heap_end = &_ebss;
 8001258:	4a0c      	ldr	r2, [pc, #48]	; (800128c <_sbrk+0x3c>)
 800125a:	601a      	str	r2, [r3, #0]
	}
	prev_heap_end = heap_end;
 800125c:	681b      	ldr	r3, [r3, #0]
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __get_MSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 800125e:	f3ef 8208 	mrs	r2, MSP

	char * stack = (char*) __get_MSP();
	if (heap_end + incr > stack) {
 8001262:	1818      	adds	r0, r3, r0
 8001264:	4290      	cmp	r0, r2
 8001266:	d90a      	bls.n	800127e <_sbrk+0x2e>
		_write(STDERR_FILENO, "Heap and stack collision\n", 25);
 8001268:	2219      	movs	r2, #25
 800126a:	2002      	movs	r0, #2
 800126c:	4908      	ldr	r1, [pc, #32]	; (8001290 <_sbrk+0x40>)
 800126e:	f7ff ffc3 	bl	80011f8 <_write>
		errno = ENOMEM;
 8001272:	4b08      	ldr	r3, [pc, #32]	; (8001294 <_sbrk+0x44>)
 8001274:	220c      	movs	r2, #12
 8001276:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8001278:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800127c:	e001      	b.n	8001282 <_sbrk+0x32>
		//abort ();
	}

	heap_end += incr;
 800127e:	4a02      	ldr	r2, [pc, #8]	; (8001288 <_sbrk+0x38>)
 8001280:	6010      	str	r0, [r2, #0]
	return (caddr_t) prev_heap_end;

}
 8001282:	4618      	mov	r0, r3
 8001284:	bd08      	pop	{r3, pc}
 8001286:	bf00      	nop
 8001288:	20000964 	.word	0x20000964
 800128c:	20000bbc 	.word	0x20000bbc
 8001290:	0800686c 	.word	0x0800686c
 8001294:	20000bb8 	.word	0x20000bb8

08001298 <_exit>:
char *__env[1] = { 0 };
char **environ = __env;

int _write(int file, char *ptr, int len);

void _exit(int status) {
 8001298:	b508      	push	{r3, lr}
	_write(1, "exit", 4);
 800129a:	2001      	movs	r0, #1
 800129c:	4902      	ldr	r1, [pc, #8]	; (80012a8 <_exit+0x10>)
 800129e:	2204      	movs	r2, #4
 80012a0:	f7ff ffaa 	bl	80011f8 <_write>
 80012a4:	e7fe      	b.n	80012a4 <_exit+0xc>
 80012a6:	bf00      	nop
 80012a8:	08006886 	.word	0x08006886
 80012ac:	080068f0 	.word	0x080068f0
 80012b0:	20000000 	.word	0x20000000
 80012b4:	2000095c 	.word	0x2000095c
 80012b8:	2000095c 	.word	0x2000095c
 80012bc:	20000bbc 	.word	0x20000bbc

080012c0 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 80012c0:	4770      	bx	lr

080012c2 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80012c2:	e7fe      	b.n	80012c2 <HardFault_Handler>

080012c4 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80012c4:	e7fe      	b.n	80012c4 <MemManage_Handler>

080012c6 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80012c6:	e7fe      	b.n	80012c6 <BusFault_Handler>

080012c8 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80012c8:	e7fe      	b.n	80012c8 <UsageFault_Handler>

080012ca <SVC_Handler>:
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
}
 80012ca:	4770      	bx	lr

080012cc <DebugMon_Handler>:
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
}
 80012cc:	4770      	bx	lr

080012ce <PendSV_Handler>:
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
}
 80012ce:	4770      	bx	lr

080012d0 <SystemInit>:
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80012d0:	4b33      	ldr	r3, [pc, #204]	; (80013a0 <SystemInit+0xd0>)
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	f042 0201 	orr.w	r2, r2, #1
 80012d8:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80012da:	2200      	movs	r2, #0
 80012dc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80012de:	6819      	ldr	r1, [r3, #0]
 80012e0:	f021 7184 	bic.w	r1, r1, #17301504	; 0x1080000
 80012e4:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80012e8:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80012ea:	492e      	ldr	r1, [pc, #184]	; (80013a4 <SystemInit+0xd4>)
 80012ec:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80012ee:	6819      	ldr	r1, [r3, #0]
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012f0:	b082      	sub	sp, #8

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80012f2:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 80012f6:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80012f8:	60da      	str	r2, [r3, #12]
static void SetSysClock(void)
{
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80012fa:	9200      	str	r2, [sp, #0]
 80012fc:	9201      	str	r2, [sp, #4]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001304:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800130c:	9201      	str	r2, [sp, #4]
    StartUpCounter++;
 800130e:	9a00      	ldr	r2, [sp, #0]
 8001310:	3201      	adds	r2, #1
 8001312:	9200      	str	r2, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001314:	9a01      	ldr	r2, [sp, #4]
 8001316:	b91a      	cbnz	r2, 8001320 <SystemInit+0x50>
 8001318:	9a00      	ldr	r2, [sp, #0]
 800131a:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 800131e:	d1f2      	bne.n	8001306 <SystemInit+0x36>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001320:	4b1f      	ldr	r3, [pc, #124]	; (80013a0 <SystemInit+0xd0>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
 8001328:	bf18      	it	ne
 800132a:	2301      	movne	r3, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800132c:	9301      	str	r3, [sp, #4]
  }

  if (HSEStatus == (uint32_t)0x01)
 800132e:	9b01      	ldr	r3, [sp, #4]
 8001330:	2b01      	cmp	r3, #1
 8001332:	d12e      	bne.n	8001392 <SystemInit+0xc2>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001334:	4b1a      	ldr	r3, [pc, #104]	; (80013a0 <SystemInit+0xd0>)
 8001336:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001338:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800133c:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 800133e:	4a1a      	ldr	r2, [pc, #104]	; (80013a8 <SystemInit+0xd8>)
 8001340:	6811      	ldr	r1, [r2, #0]
 8001342:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8001346:	6011      	str	r1, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8001348:	689a      	ldr	r2, [r3, #8]
 800134a:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 800134c:	689a      	ldr	r2, [r3, #8]
 800134e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001352:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8001354:	689a      	ldr	r2, [r3, #8]
 8001356:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 800135a:	609a      	str	r2, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 800135c:	4a13      	ldr	r2, [pc, #76]	; (80013ac <SystemInit+0xdc>)
 800135e:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001366:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001368:	6819      	ldr	r1, [r3, #0]
 800136a:	4a0d      	ldr	r2, [pc, #52]	; (80013a0 <SystemInit+0xd0>)
 800136c:	0189      	lsls	r1, r1, #6
 800136e:	d5fb      	bpl.n	8001368 <SystemInit+0x98>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8001370:	4b0f      	ldr	r3, [pc, #60]	; (80013b0 <SystemInit+0xe0>)
 8001372:	f240 6105 	movw	r1, #1541	; 0x605
 8001376:	6019      	str	r1, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001378:	6893      	ldr	r3, [r2, #8]
 800137a:	f023 0303 	bic.w	r3, r3, #3
 800137e:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8001380:	6893      	ldr	r3, [r2, #8]
 8001382:	f043 0302 	orr.w	r3, r3, #2
 8001386:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8001388:	6893      	ldr	r3, [r2, #8]
 800138a:	f003 030c 	and.w	r3, r3, #12
 800138e:	2b08      	cmp	r3, #8
 8001390:	d1fa      	bne.n	8001388 <SystemInit+0xb8>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001392:	4b08      	ldr	r3, [pc, #32]	; (80013b4 <SystemInit+0xe4>)
 8001394:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001398:	609a      	str	r2, [r3, #8]
#endif
}
 800139a:	b002      	add	sp, #8
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	40023800 	.word	0x40023800
 80013a4:	24003010 	.word	0x24003010
 80013a8:	40007000 	.word	0x40007000
 80013ac:	07405419 	.word	0x07405419
 80013b0:	40023c00 	.word	0x40023c00
 80013b4:	e000ed00 	.word	0xe000ed00

080013b8 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80013b8:	4b18      	ldr	r3, [pc, #96]	; (800141c <SystemCoreClockUpdate+0x64>)
 80013ba:	4a19      	ldr	r2, [pc, #100]	; (8001420 <SystemCoreClockUpdate+0x68>)
 80013bc:	6899      	ldr	r1, [r3, #8]
 80013be:	f001 010c 	and.w	r1, r1, #12

  switch (tmp)
 80013c2:	2904      	cmp	r1, #4
 80013c4:	d003      	beq.n	80013ce <SystemCoreClockUpdate+0x16>
 80013c6:	2908      	cmp	r1, #8
 80013c8:	d003      	beq.n	80013d2 <SystemCoreClockUpdate+0x1a>
 80013ca:	4b16      	ldr	r3, [pc, #88]	; (8001424 <SystemCoreClockUpdate+0x6c>)
 80013cc:	e019      	b.n	8001402 <SystemCoreClockUpdate+0x4a>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80013ce:	4b16      	ldr	r3, [pc, #88]	; (8001428 <SystemCoreClockUpdate+0x70>)
 80013d0:	e017      	b.n	8001402 <SystemCoreClockUpdate+0x4a>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80013d2:	6859      	ldr	r1, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80013d4:	685a      	ldr	r2, [r3, #4]
      
      if (pllsource != 0)
 80013d6:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80013da:	6859      	ldr	r1, [r3, #4]
 80013dc:	bf14      	ite	ne
 80013de:	4b12      	ldrne	r3, [pc, #72]	; (8001428 <SystemCoreClockUpdate+0x70>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80013e0:	4b10      	ldreq	r3, [pc, #64]	; (8001424 <SystemCoreClockUpdate+0x6c>)

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80013e2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80013e6:	fbb3 f3f2 	udiv	r3, r3, r2
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80013ea:	4a0c      	ldr	r2, [pc, #48]	; (800141c <SystemCoreClockUpdate+0x64>)
 80013ec:	6852      	ldr	r2, [r2, #4]
 80013ee:	f3c2 4201 	ubfx	r2, r2, #16, #2
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80013f2:	f3c1 1188 	ubfx	r1, r1, #6, #9
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80013f6:	3201      	adds	r2, #1
 80013f8:	0052      	lsls	r2, r2, #1
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80013fa:	434b      	muls	r3, r1
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
      SystemCoreClock = pllvco/pllp;
 80013fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8001400:	4a07      	ldr	r2, [pc, #28]	; (8001420 <SystemCoreClockUpdate+0x68>)
 8001402:	6013      	str	r3, [r2, #0]
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8001404:	4b05      	ldr	r3, [pc, #20]	; (800141c <SystemCoreClockUpdate+0x64>)
 8001406:	689a      	ldr	r2, [r3, #8]
 8001408:	4b05      	ldr	r3, [pc, #20]	; (8001420 <SystemCoreClockUpdate+0x68>)
 800140a:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800140e:	189a      	adds	r2, r3, r2
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8001410:	6819      	ldr	r1, [r3, #0]
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8001412:	7912      	ldrb	r2, [r2, #4]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8001414:	fa31 f202 	lsrs.w	r2, r1, r2
 8001418:	601a      	str	r2, [r3, #0]
}
 800141a:	4770      	bx	lr
 800141c:	40023800 	.word	0x40023800
 8001420:	20000088 	.word	0x20000088
 8001424:	00f42400 	.word	0x00f42400
 8001428:	007a1200 	.word	0x007a1200

0800142c <cleanup_glue>:
 800142c:	b538      	push	{r3, r4, r5, lr}
 800142e:	460c      	mov	r4, r1
 8001430:	6809      	ldr	r1, [r1, #0]
 8001432:	4605      	mov	r5, r0
 8001434:	b109      	cbz	r1, 800143a <cleanup_glue+0xe>
 8001436:	f7ff fff9 	bl	800142c <cleanup_glue>
 800143a:	4628      	mov	r0, r5
 800143c:	4621      	mov	r1, r4
 800143e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001442:	f002 ba21 	b.w	8003888 <_free_r>
 8001446:	bf00      	nop

08001448 <_reclaim_reent>:
 8001448:	4b22      	ldr	r3, [pc, #136]	; (80014d4 <_reclaim_reent+0x8c>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4298      	cmp	r0, r3
 800144e:	b570      	push	{r4, r5, r6, lr}
 8001450:	4605      	mov	r5, r0
 8001452:	d032      	beq.n	80014ba <_reclaim_reent+0x72>
 8001454:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001456:	b1ab      	cbz	r3, 8001484 <_reclaim_reent+0x3c>
 8001458:	2200      	movs	r2, #0
 800145a:	4616      	mov	r6, r2
 800145c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001460:	b909      	cbnz	r1, 8001466 <_reclaim_reent+0x1e>
 8001462:	e007      	b.n	8001474 <_reclaim_reent+0x2c>
 8001464:	4621      	mov	r1, r4
 8001466:	680c      	ldr	r4, [r1, #0]
 8001468:	4628      	mov	r0, r5
 800146a:	f002 fa0d 	bl	8003888 <_free_r>
 800146e:	2c00      	cmp	r4, #0
 8001470:	d1f8      	bne.n	8001464 <_reclaim_reent+0x1c>
 8001472:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8001474:	3601      	adds	r6, #1
 8001476:	2e20      	cmp	r6, #32
 8001478:	4632      	mov	r2, r6
 800147a:	d1ef      	bne.n	800145c <_reclaim_reent+0x14>
 800147c:	4628      	mov	r0, r5
 800147e:	4619      	mov	r1, r3
 8001480:	f002 fa02 	bl	8003888 <_free_r>
 8001484:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8001486:	b111      	cbz	r1, 800148e <_reclaim_reent+0x46>
 8001488:	4628      	mov	r0, r5
 800148a:	f002 f9fd 	bl	8003888 <_free_r>
 800148e:	f8d5 1148 	ldr.w	r1, [r5, #328]	; 0x148
 8001492:	b159      	cbz	r1, 80014ac <_reclaim_reent+0x64>
 8001494:	f505 76a6 	add.w	r6, r5, #332	; 0x14c
 8001498:	42b1      	cmp	r1, r6
 800149a:	d101      	bne.n	80014a0 <_reclaim_reent+0x58>
 800149c:	e006      	b.n	80014ac <_reclaim_reent+0x64>
 800149e:	4621      	mov	r1, r4
 80014a0:	680c      	ldr	r4, [r1, #0]
 80014a2:	4628      	mov	r0, r5
 80014a4:	f002 f9f0 	bl	8003888 <_free_r>
 80014a8:	42a6      	cmp	r6, r4
 80014aa:	d1f8      	bne.n	800149e <_reclaim_reent+0x56>
 80014ac:	6d69      	ldr	r1, [r5, #84]	; 0x54
 80014ae:	b111      	cbz	r1, 80014b6 <_reclaim_reent+0x6e>
 80014b0:	4628      	mov	r0, r5
 80014b2:	f002 f9e9 	bl	8003888 <_free_r>
 80014b6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80014b8:	b903      	cbnz	r3, 80014bc <_reclaim_reent+0x74>
 80014ba:	bd70      	pop	{r4, r5, r6, pc}
 80014bc:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80014be:	4628      	mov	r0, r5
 80014c0:	4798      	blx	r3
 80014c2:	f8d5 12e0 	ldr.w	r1, [r5, #736]	; 0x2e0
 80014c6:	2900      	cmp	r1, #0
 80014c8:	d0f7      	beq.n	80014ba <_reclaim_reent+0x72>
 80014ca:	4628      	mov	r0, r5
 80014cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80014d0:	e7ac      	b.n	800142c <cleanup_glue>
 80014d2:	bf00      	nop
 80014d4:	200000a0 	.word	0x200000a0

080014d8 <_wrapup_reent>:
 80014d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014da:	4607      	mov	r7, r0
 80014dc:	b1b0      	cbz	r0, 800150c <_wrapup_reent+0x34>
 80014de:	f8d7 6148 	ldr.w	r6, [r7, #328]	; 0x148
 80014e2:	b176      	cbz	r6, 8001502 <_wrapup_reent+0x2a>
 80014e4:	6875      	ldr	r5, [r6, #4]
 80014e6:	1e6c      	subs	r4, r5, #1
 80014e8:	d408      	bmi.n	80014fc <_wrapup_reent+0x24>
 80014ea:	3502      	adds	r5, #2
 80014ec:	eb06 0585 	add.w	r5, r6, r5, lsl #2
 80014f0:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80014f4:	3c01      	subs	r4, #1
 80014f6:	4798      	blx	r3
 80014f8:	1c63      	adds	r3, r4, #1
 80014fa:	d1f9      	bne.n	80014f0 <_wrapup_reent+0x18>
 80014fc:	6836      	ldr	r6, [r6, #0]
 80014fe:	2e00      	cmp	r6, #0
 8001500:	d1f0      	bne.n	80014e4 <_wrapup_reent+0xc>
 8001502:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001504:	b10b      	cbz	r3, 800150a <_wrapup_reent+0x32>
 8001506:	4638      	mov	r0, r7
 8001508:	4798      	blx	r3
 800150a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800150c:	4b01      	ldr	r3, [pc, #4]	; (8001514 <_wrapup_reent+0x3c>)
 800150e:	681f      	ldr	r7, [r3, #0]
 8001510:	e7e5      	b.n	80014de <_wrapup_reent+0x6>
 8001512:	bf00      	nop
 8001514:	200000a0 	.word	0x200000a0

08001518 <_sprintf_r>:
 8001518:	b40c      	push	{r2, r3}
 800151a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800151c:	b09d      	sub	sp, #116	; 0x74
 800151e:	ac22      	add	r4, sp, #136	; 0x88
 8001520:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 8001524:	f854 2b04 	ldr.w	r2, [r4], #4
 8001528:	9101      	str	r1, [sp, #4]
 800152a:	460e      	mov	r6, r1
 800152c:	4623      	mov	r3, r4
 800152e:	9503      	str	r5, [sp, #12]
 8001530:	9506      	str	r5, [sp, #24]
 8001532:	a901      	add	r1, sp, #4
 8001534:	f44f 7702 	mov.w	r7, #520	; 0x208
 8001538:	f64f 75ff 	movw	r5, #65535	; 0xffff
 800153c:	f8ad 7010 	strh.w	r7, [sp, #16]
 8001540:	9605      	str	r6, [sp, #20]
 8001542:	f8ad 5012 	strh.w	r5, [sp, #18]
 8001546:	941b      	str	r4, [sp, #108]	; 0x6c
 8001548:	f000 f830 	bl	80015ac <_svfprintf_r>
 800154c:	9b01      	ldr	r3, [sp, #4]
 800154e:	2200      	movs	r2, #0
 8001550:	701a      	strb	r2, [r3, #0]
 8001552:	b01d      	add	sp, #116	; 0x74
 8001554:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8001558:	b002      	add	sp, #8
 800155a:	4770      	bx	lr

0800155c <sprintf>:
 800155c:	b40e      	push	{r1, r2, r3}
 800155e:	b570      	push	{r4, r5, r6, lr}
 8001560:	b09d      	sub	sp, #116	; 0x74
 8001562:	ac21      	add	r4, sp, #132	; 0x84
 8001564:	f240 03a0 	movw	r3, #160	; 0xa0
 8001568:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800156c:	f854 2b04 	ldr.w	r2, [r4], #4
 8001570:	4606      	mov	r6, r0
 8001572:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 8001576:	6818      	ldr	r0, [r3, #0]
 8001578:	9503      	str	r5, [sp, #12]
 800157a:	f44f 7302 	mov.w	r3, #520	; 0x208
 800157e:	f8ad 3010 	strh.w	r3, [sp, #16]
 8001582:	9506      	str	r5, [sp, #24]
 8001584:	4623      	mov	r3, r4
 8001586:	a901      	add	r1, sp, #4
 8001588:	f64f 75ff 	movw	r5, #65535	; 0xffff
 800158c:	9601      	str	r6, [sp, #4]
 800158e:	9605      	str	r6, [sp, #20]
 8001590:	f8ad 5012 	strh.w	r5, [sp, #18]
 8001594:	941b      	str	r4, [sp, #108]	; 0x6c
 8001596:	f000 f809 	bl	80015ac <_svfprintf_r>
 800159a:	9b01      	ldr	r3, [sp, #4]
 800159c:	2200      	movs	r2, #0
 800159e:	701a      	strb	r2, [r3, #0]
 80015a0:	b01d      	add	sp, #116	; 0x74
 80015a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80015a6:	b003      	add	sp, #12
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop

080015ac <_svfprintf_r>:
 80015ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015b0:	b0c5      	sub	sp, #276	; 0x114
 80015b2:	468a      	mov	sl, r1
 80015b4:	4614      	mov	r4, r2
 80015b6:	930e      	str	r3, [sp, #56]	; 0x38
 80015b8:	900f      	str	r0, [sp, #60]	; 0x3c
 80015ba:	f002 fa5d 	bl	8003a78 <_localeconv_r>
 80015be:	6800      	ldr	r0, [r0, #0]
 80015c0:	9017      	str	r0, [sp, #92]	; 0x5c
 80015c2:	f003 fb33 	bl	8004c2c <strlen>
 80015c6:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 80015ca:	901a      	str	r0, [sp, #104]	; 0x68
 80015cc:	2100      	movs	r1, #0
 80015ce:	2000      	movs	r0, #0
 80015d0:	061a      	lsls	r2, r3, #24
 80015d2:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
 80015d6:	d504      	bpl.n	80015e2 <_svfprintf_r+0x36>
 80015d8:	f8da 3010 	ldr.w	r3, [sl, #16]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	f001 8004 	beq.w	80025ea <_svfprintf_r+0x103e>
 80015e2:	2300      	movs	r3, #0
 80015e4:	f10d 00e3 	add.w	r0, sp, #227	; 0xe3
 80015e8:	f10d 0be4 	add.w	fp, sp, #228	; 0xe4
 80015ec:	a91f      	add	r1, sp, #124	; 0x7c
 80015ee:	9310      	str	r3, [sp, #64]	; 0x40
 80015f0:	933b      	str	r3, [sp, #236]	; 0xec
 80015f2:	933a      	str	r3, [sp, #232]	; 0xe8
 80015f4:	931c      	str	r3, [sp, #112]	; 0x70
 80015f6:	931b      	str	r3, [sp, #108]	; 0x6c
 80015f8:	930c      	str	r3, [sp, #48]	; 0x30
 80015fa:	ebc0 030b 	rsb	r3, r0, fp
 80015fe:	9007      	str	r0, [sp, #28]
 8001600:	9139      	str	r1, [sp, #228]	; 0xe4
 8001602:	9409      	str	r4, [sp, #36]	; 0x24
 8001604:	460e      	mov	r6, r1
 8001606:	931d      	str	r3, [sp, #116]	; 0x74
 8001608:	9809      	ldr	r0, [sp, #36]	; 0x24
 800160a:	7803      	ldrb	r3, [r0, #0]
 800160c:	2b00      	cmp	r3, #0
 800160e:	bf18      	it	ne
 8001610:	2b25      	cmpne	r3, #37	; 0x25
 8001612:	f000 80af 	beq.w	8001774 <_svfprintf_r+0x1c8>
 8001616:	4607      	mov	r7, r0
 8001618:	f817 3f01 	ldrb.w	r3, [r7, #1]!
 800161c:	2b25      	cmp	r3, #37	; 0x25
 800161e:	bf18      	it	ne
 8001620:	2b00      	cmpne	r3, #0
 8001622:	d1f9      	bne.n	8001618 <_svfprintf_r+0x6c>
 8001624:	9909      	ldr	r1, [sp, #36]	; 0x24
 8001626:	ebb7 0801 	subs.w	r8, r7, r1
 800162a:	d00e      	beq.n	800164a <_svfprintf_r+0x9e>
 800162c:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 800162e:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8001630:	6031      	str	r1, [r6, #0]
 8001632:	3401      	adds	r4, #1
 8001634:	4445      	add	r5, r8
 8001636:	2c07      	cmp	r4, #7
 8001638:	f8c6 8004 	str.w	r8, [r6, #4]
 800163c:	953b      	str	r5, [sp, #236]	; 0xec
 800163e:	943a      	str	r4, [sp, #232]	; 0xe8
 8001640:	dc7c      	bgt.n	800173c <_svfprintf_r+0x190>
 8001642:	3608      	adds	r6, #8
 8001644:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001646:	4442      	add	r2, r8
 8001648:	920c      	str	r2, [sp, #48]	; 0x30
 800164a:	783b      	ldrb	r3, [r7, #0]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d07d      	beq.n	800174c <_svfprintf_r+0x1a0>
 8001650:	3701      	adds	r7, #1
 8001652:	9709      	str	r7, [sp, #36]	; 0x24
 8001654:	2300      	movs	r3, #0
 8001656:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001658:	930b      	str	r3, [sp, #44]	; 0x2c
 800165a:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
 800165e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001662:	9308      	str	r3, [sp, #32]
 8001664:	2720      	movs	r7, #32
 8001666:	252b      	movs	r5, #43	; 0x2b
 8001668:	f810 3b01 	ldrb.w	r3, [r0], #1
 800166c:	f1a3 0220 	sub.w	r2, r3, #32
 8001670:	2a58      	cmp	r2, #88	; 0x58
 8001672:	f200 823b 	bhi.w	8001aec <_svfprintf_r+0x540>
 8001676:	e8df f012 	tbh	[pc, r2, lsl #1]
 800167a:	024c      	.short	0x024c
 800167c:	02390239 	.word	0x02390239
 8001680:	02390254 	.word	0x02390254
 8001684:	02390239 	.word	0x02390239
 8001688:	02390239 	.word	0x02390239
 800168c:	02590239 	.word	0x02590239
 8001690:	0239007f 	.word	0x0239007f
 8001694:	0082005c 	.word	0x0082005c
 8001698:	009d0239 	.word	0x009d0239
 800169c:	00a200a2 	.word	0x00a200a2
 80016a0:	00a200a2 	.word	0x00a200a2
 80016a4:	00a200a2 	.word	0x00a200a2
 80016a8:	00a200a2 	.word	0x00a200a2
 80016ac:	023900a2 	.word	0x023900a2
 80016b0:	02390239 	.word	0x02390239
 80016b4:	02390239 	.word	0x02390239
 80016b8:	02390239 	.word	0x02390239
 80016bc:	02390239 	.word	0x02390239
 80016c0:	00b50239 	.word	0x00b50239
 80016c4:	02390154 	.word	0x02390154
 80016c8:	02390154 	.word	0x02390154
 80016cc:	02390239 	.word	0x02390239
 80016d0:	018b0239 	.word	0x018b0239
 80016d4:	02390239 	.word	0x02390239
 80016d8:	02390190 	.word	0x02390190
 80016dc:	02390239 	.word	0x02390239
 80016e0:	02390239 	.word	0x02390239
 80016e4:	023901a7 	.word	0x023901a7
 80016e8:	01ba0239 	.word	0x01ba0239
 80016ec:	02390239 	.word	0x02390239
 80016f0:	02390239 	.word	0x02390239
 80016f4:	02390239 	.word	0x02390239
 80016f8:	02390239 	.word	0x02390239
 80016fc:	02390239 	.word	0x02390239
 8001700:	02780293 	.word	0x02780293
 8001704:	01540154 	.word	0x01540154
 8001708:	028e0154 	.word	0x028e0154
 800170c:	02390278 	.word	0x02390278
 8001710:	02130239 	.word	0x02130239
 8001714:	02180239 	.word	0x02180239
 8001718:	02a50224 	.word	0x02a50224
 800171c:	023901de 	.word	0x023901de
 8001720:	023901e3 	.word	0x023901e3
 8001724:	02390264 	.word	0x02390264
 8001728:	02c70239 	.word	0x02c70239
 800172c:	4252      	negs	r2, r2
 800172e:	920b      	str	r2, [sp, #44]	; 0x2c
 8001730:	930e      	str	r3, [sp, #56]	; 0x38
 8001732:	9b08      	ldr	r3, [sp, #32]
 8001734:	f043 0304 	orr.w	r3, r3, #4
 8001738:	9308      	str	r3, [sp, #32]
 800173a:	e795      	b.n	8001668 <_svfprintf_r+0xbc>
 800173c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800173e:	4651      	mov	r1, sl
 8001740:	465a      	mov	r2, fp
 8001742:	f003 faa3 	bl	8004c8c <__ssprint_r>
 8001746:	b940      	cbnz	r0, 800175a <_svfprintf_r+0x1ae>
 8001748:	ae1f      	add	r6, sp, #124	; 0x7c
 800174a:	e77b      	b.n	8001644 <_svfprintf_r+0x98>
 800174c:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 800174e:	b123      	cbz	r3, 800175a <_svfprintf_r+0x1ae>
 8001750:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8001752:	4651      	mov	r1, sl
 8001754:	aa39      	add	r2, sp, #228	; 0xe4
 8001756:	f003 fa99 	bl	8004c8c <__ssprint_r>
 800175a:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800175e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001762:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001764:	bf18      	it	ne
 8001766:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 800176a:	930c      	str	r3, [sp, #48]	; 0x30
 800176c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800176e:	b045      	add	sp, #276	; 0x114
 8001770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001774:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8001776:	e768      	b.n	800164a <_svfprintf_r+0x9e>
 8001778:	f88d 510f 	strb.w	r5, [sp, #271]	; 0x10f
 800177c:	e774      	b.n	8001668 <_svfprintf_r+0xbc>
 800177e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001782:	2b2a      	cmp	r3, #42	; 0x2a
 8001784:	f001 804c 	beq.w	8002820 <_svfprintf_r+0x1274>
 8001788:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800178c:	2400      	movs	r4, #0
 800178e:	2a09      	cmp	r2, #9
 8001790:	f63f af6c 	bhi.w	800166c <_svfprintf_r+0xc0>
 8001794:	4601      	mov	r1, r0
 8001796:	2400      	movs	r4, #0
 8001798:	f811 3b01 	ldrb.w	r3, [r1], #1
 800179c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80017a0:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80017a4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80017a8:	2a09      	cmp	r2, #9
 80017aa:	4608      	mov	r0, r1
 80017ac:	d9f4      	bls.n	8001798 <_svfprintf_r+0x1ec>
 80017ae:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
 80017b2:	e75b      	b.n	800166c <_svfprintf_r+0xc0>
 80017b4:	9a08      	ldr	r2, [sp, #32]
 80017b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80017ba:	9208      	str	r2, [sp, #32]
 80017bc:	e754      	b.n	8001668 <_svfprintf_r+0xbc>
 80017be:	4601      	mov	r1, r0
 80017c0:	2200      	movs	r2, #0
 80017c2:	46b4      	mov	ip, r6
 80017c4:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 80017c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80017cc:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80017d0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80017d4:	2e09      	cmp	r6, #9
 80017d6:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80017da:	4608      	mov	r0, r1
 80017dc:	d9f2      	bls.n	80017c4 <_svfprintf_r+0x218>
 80017de:	4666      	mov	r6, ip
 80017e0:	920b      	str	r2, [sp, #44]	; 0x2c
 80017e2:	e743      	b.n	800166c <_svfprintf_r+0xc0>
 80017e4:	9315      	str	r3, [sp, #84]	; 0x54
 80017e6:	9b08      	ldr	r3, [sp, #32]
 80017e8:	9009      	str	r0, [sp, #36]	; 0x24
 80017ea:	f043 0310 	orr.w	r3, r3, #16
 80017ee:	9308      	str	r3, [sp, #32]
 80017f0:	9808      	ldr	r0, [sp, #32]
 80017f2:	06c3      	lsls	r3, r0, #27
 80017f4:	f100 81bf 	bmi.w	8001b76 <_svfprintf_r+0x5ca>
 80017f8:	9a08      	ldr	r2, [sp, #32]
 80017fa:	0655      	lsls	r5, r2, #25
 80017fc:	f140 81bb 	bpl.w	8001b76 <_svfprintf_r+0x5ca>
 8001800:	980e      	ldr	r0, [sp, #56]	; 0x38
 8001802:	f9b0 3000 	ldrsh.w	r3, [r0]
 8001806:	3004      	adds	r0, #4
 8001808:	2b00      	cmp	r3, #0
 800180a:	900e      	str	r0, [sp, #56]	; 0x38
 800180c:	f2c0 81ba 	blt.w	8001b84 <_svfprintf_r+0x5d8>
 8001810:	bf0c      	ite	eq
 8001812:	2100      	moveq	r1, #0
 8001814:	2101      	movne	r1, #1
 8001816:	2201      	movs	r2, #1
 8001818:	2c00      	cmp	r4, #0
 800181a:	bfa2      	ittt	ge
 800181c:	9808      	ldrge	r0, [sp, #32]
 800181e:	f020 0080 	bicge.w	r0, r0, #128	; 0x80
 8001822:	9008      	strge	r0, [sp, #32]
 8001824:	2c00      	cmp	r4, #0
 8001826:	bf18      	it	ne
 8001828:	f041 0101 	orrne.w	r1, r1, #1
 800182c:	2900      	cmp	r1, #0
 800182e:	f000 8323 	beq.w	8001e78 <_svfprintf_r+0x8cc>
 8001832:	2a01      	cmp	r2, #1
 8001834:	f000 845f 	beq.w	80020f6 <_svfprintf_r+0xb4a>
 8001838:	2a02      	cmp	r2, #2
 800183a:	bf18      	it	ne
 800183c:	465a      	movne	r2, fp
 800183e:	d102      	bne.n	8001846 <_svfprintf_r+0x29a>
 8001840:	f000 bc48 	b.w	80020d4 <_svfprintf_r+0xb28>
 8001844:	4602      	mov	r2, r0
 8001846:	f003 0107 	and.w	r1, r3, #7
 800184a:	3130      	adds	r1, #48	; 0x30
 800184c:	1e50      	subs	r0, r2, #1
 800184e:	08db      	lsrs	r3, r3, #3
 8001850:	f802 1c01 	strb.w	r1, [r2, #-1]
 8001854:	d1f6      	bne.n	8001844 <_svfprintf_r+0x298>
 8001856:	9b08      	ldr	r3, [sp, #32]
 8001858:	9011      	str	r0, [sp, #68]	; 0x44
 800185a:	07dd      	lsls	r5, r3, #31
 800185c:	d507      	bpl.n	800186e <_svfprintf_r+0x2c2>
 800185e:	2930      	cmp	r1, #48	; 0x30
 8001860:	f000 8733 	beq.w	80026ca <_svfprintf_r+0x111e>
 8001864:	1e90      	subs	r0, r2, #2
 8001866:	2330      	movs	r3, #48	; 0x30
 8001868:	9011      	str	r0, [sp, #68]	; 0x44
 800186a:	f802 3c02 	strb.w	r3, [r2, #-2]
 800186e:	ebc0 030b 	rsb	r3, r0, fp
 8001872:	930d      	str	r3, [sp, #52]	; 0x34
 8001874:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001876:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 800187a:	9412      	str	r4, [sp, #72]	; 0x48
 800187c:	42a3      	cmp	r3, r4
 800187e:	bfb8      	it	lt
 8001880:	4623      	movlt	r3, r4
 8001882:	2000      	movs	r0, #0
 8001884:	930a      	str	r3, [sp, #40]	; 0x28
 8001886:	9016      	str	r0, [sp, #88]	; 0x58
 8001888:	b111      	cbz	r1, 8001890 <_svfprintf_r+0x2e4>
 800188a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800188c:	3301      	adds	r3, #1
 800188e:	930a      	str	r3, [sp, #40]	; 0x28
 8001890:	9b08      	ldr	r3, [sp, #32]
 8001892:	f013 0302 	ands.w	r3, r3, #2
 8001896:	9313      	str	r3, [sp, #76]	; 0x4c
 8001898:	d002      	beq.n	80018a0 <_svfprintf_r+0x2f4>
 800189a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800189c:	3002      	adds	r0, #2
 800189e:	900a      	str	r0, [sp, #40]	; 0x28
 80018a0:	9b08      	ldr	r3, [sp, #32]
 80018a2:	f013 0384 	ands.w	r3, r3, #132	; 0x84
 80018a6:	9314      	str	r3, [sp, #80]	; 0x50
 80018a8:	f040 81bb 	bne.w	8001c22 <_svfprintf_r+0x676>
 80018ac:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80018ae:	990a      	ldr	r1, [sp, #40]	; 0x28
 80018b0:	1a47      	subs	r7, r0, r1
 80018b2:	2f00      	cmp	r7, #0
 80018b4:	f340 81b5 	ble.w	8001c22 <_svfprintf_r+0x676>
 80018b8:	2f10      	cmp	r7, #16
 80018ba:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80018bc:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80018be:	f8df 8344 	ldr.w	r8, [pc, #836]	; 8001c04 <_svfprintf_r+0x658>
 80018c2:	dd22      	ble.n	800190a <_svfprintf_r+0x35e>
 80018c4:	4623      	mov	r3, r4
 80018c6:	f04f 0910 	mov.w	r9, #16
 80018ca:	4644      	mov	r4, r8
 80018cc:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 80018d0:	e003      	b.n	80018da <_svfprintf_r+0x32e>
 80018d2:	3f10      	subs	r7, #16
 80018d4:	3608      	adds	r6, #8
 80018d6:	2f10      	cmp	r7, #16
 80018d8:	dd15      	ble.n	8001906 <_svfprintf_r+0x35a>
 80018da:	3301      	adds	r3, #1
 80018dc:	3510      	adds	r5, #16
 80018de:	2b07      	cmp	r3, #7
 80018e0:	e886 0210 	stmia.w	r6, {r4, r9}
 80018e4:	953b      	str	r5, [sp, #236]	; 0xec
 80018e6:	933a      	str	r3, [sp, #232]	; 0xe8
 80018e8:	ddf3      	ble.n	80018d2 <_svfprintf_r+0x326>
 80018ea:	4640      	mov	r0, r8
 80018ec:	4651      	mov	r1, sl
 80018ee:	465a      	mov	r2, fp
 80018f0:	f003 f9cc 	bl	8004c8c <__ssprint_r>
 80018f4:	2800      	cmp	r0, #0
 80018f6:	f47f af30 	bne.w	800175a <_svfprintf_r+0x1ae>
 80018fa:	3f10      	subs	r7, #16
 80018fc:	2f10      	cmp	r7, #16
 80018fe:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8001900:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8001902:	ae1f      	add	r6, sp, #124	; 0x7c
 8001904:	dce9      	bgt.n	80018da <_svfprintf_r+0x32e>
 8001906:	46a0      	mov	r8, r4
 8001908:	461c      	mov	r4, r3
 800190a:	3401      	adds	r4, #1
 800190c:	19ed      	adds	r5, r5, r7
 800190e:	2c07      	cmp	r4, #7
 8001910:	f8c6 8000 	str.w	r8, [r6]
 8001914:	6077      	str	r7, [r6, #4]
 8001916:	953b      	str	r5, [sp, #236]	; 0xec
 8001918:	943a      	str	r4, [sp, #232]	; 0xe8
 800191a:	f300 8414 	bgt.w	8002146 <_svfprintf_r+0xb9a>
 800191e:	3608      	adds	r6, #8
 8001920:	e180      	b.n	8001c24 <_svfprintf_r+0x678>
 8001922:	9009      	str	r0, [sp, #36]	; 0x24
 8001924:	980e      	ldr	r0, [sp, #56]	; 0x38
 8001926:	9315      	str	r3, [sp, #84]	; 0x54
 8001928:	1dc3      	adds	r3, r0, #7
 800192a:	f023 0307 	bic.w	r3, r3, #7
 800192e:	f103 0108 	add.w	r1, r3, #8
 8001932:	910e      	str	r1, [sp, #56]	; 0x38
 8001934:	f8d3 8000 	ldr.w	r8, [r3]
 8001938:	685d      	ldr	r5, [r3, #4]
 800193a:	4642      	mov	r2, r8
 800193c:	462b      	mov	r3, r5
 800193e:	4629      	mov	r1, r5
 8001940:	4640      	mov	r0, r8
 8001942:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
 8001946:	f003 f839 	bl	80049bc <__fpclassifyd>
 800194a:	2801      	cmp	r0, #1
 800194c:	4629      	mov	r1, r5
 800194e:	4640      	mov	r0, r8
 8001950:	f040 84d0 	bne.w	80022f4 <_svfprintf_r+0xd48>
 8001954:	2200      	movs	r2, #0
 8001956:	2300      	movs	r3, #0
 8001958:	f004 fd60 	bl	800641c <__aeabi_dcmplt>
 800195c:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 8001960:	b110      	cbz	r0, 8001968 <_svfprintf_r+0x3bc>
 8001962:	212d      	movs	r1, #45	; 0x2d
 8001964:	f88d 110f 	strb.w	r1, [sp, #271]	; 0x10f
 8001968:	2303      	movs	r3, #3
 800196a:	930a      	str	r3, [sp, #40]	; 0x28
 800196c:	2300      	movs	r3, #0
 800196e:	9312      	str	r3, [sp, #72]	; 0x48
 8001970:	4aa0      	ldr	r2, [pc, #640]	; (8001bf4 <_svfprintf_r+0x648>)
 8001972:	4ba1      	ldr	r3, [pc, #644]	; (8001bf8 <_svfprintf_r+0x64c>)
 8001974:	9815      	ldr	r0, [sp, #84]	; 0x54
 8001976:	2847      	cmp	r0, #71	; 0x47
 8001978:	bfd8      	it	le
 800197a:	461a      	movle	r2, r3
 800197c:	9211      	str	r2, [sp, #68]	; 0x44
 800197e:	9a08      	ldr	r2, [sp, #32]
 8001980:	2303      	movs	r3, #3
 8001982:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001986:	930d      	str	r3, [sp, #52]	; 0x34
 8001988:	2300      	movs	r3, #0
 800198a:	9208      	str	r2, [sp, #32]
 800198c:	9316      	str	r3, [sp, #88]	; 0x58
 800198e:	e77b      	b.n	8001888 <_svfprintf_r+0x2dc>
 8001990:	9b08      	ldr	r3, [sp, #32]
 8001992:	f043 0308 	orr.w	r3, r3, #8
 8001996:	9308      	str	r3, [sp, #32]
 8001998:	e666      	b.n	8001668 <_svfprintf_r+0xbc>
 800199a:	9908      	ldr	r1, [sp, #32]
 800199c:	9009      	str	r0, [sp, #36]	; 0x24
 800199e:	f041 0110 	orr.w	r1, r1, #16
 80019a2:	9108      	str	r1, [sp, #32]
 80019a4:	9a08      	ldr	r2, [sp, #32]
 80019a6:	9315      	str	r3, [sp, #84]	; 0x54
 80019a8:	f012 0110 	ands.w	r1, r2, #16
 80019ac:	f000 8090 	beq.w	8001ad0 <_svfprintf_r+0x524>
 80019b0:	980e      	ldr	r0, [sp, #56]	; 0x38
 80019b2:	6803      	ldr	r3, [r0, #0]
 80019b4:	2200      	movs	r2, #0
 80019b6:	1a99      	subs	r1, r3, r2
 80019b8:	bf18      	it	ne
 80019ba:	2101      	movne	r1, #1
 80019bc:	3004      	adds	r0, #4
 80019be:	900e      	str	r0, [sp, #56]	; 0x38
 80019c0:	2000      	movs	r0, #0
 80019c2:	f88d 010f 	strb.w	r0, [sp, #271]	; 0x10f
 80019c6:	e727      	b.n	8001818 <_svfprintf_r+0x26c>
 80019c8:	9908      	ldr	r1, [sp, #32]
 80019ca:	9009      	str	r0, [sp, #36]	; 0x24
 80019cc:	f041 0110 	orr.w	r1, r1, #16
 80019d0:	9108      	str	r1, [sp, #32]
 80019d2:	9a08      	ldr	r2, [sp, #32]
 80019d4:	9315      	str	r3, [sp, #84]	; 0x54
 80019d6:	06d0      	lsls	r0, r2, #27
 80019d8:	f140 80b9 	bpl.w	8001b4e <_svfprintf_r+0x5a2>
 80019dc:	980e      	ldr	r0, [sp, #56]	; 0x38
 80019de:	6803      	ldr	r3, [r0, #0]
 80019e0:	2201      	movs	r2, #1
 80019e2:	1c19      	adds	r1, r3, #0
 80019e4:	bf18      	it	ne
 80019e6:	2101      	movne	r1, #1
 80019e8:	3004      	adds	r0, #4
 80019ea:	900e      	str	r0, [sp, #56]	; 0x38
 80019ec:	e7e8      	b.n	80019c0 <_svfprintf_r+0x414>
 80019ee:	4a83      	ldr	r2, [pc, #524]	; (8001bfc <_svfprintf_r+0x650>)
 80019f0:	9315      	str	r3, [sp, #84]	; 0x54
 80019f2:	9b08      	ldr	r3, [sp, #32]
 80019f4:	921c      	str	r2, [sp, #112]	; 0x70
 80019f6:	06da      	lsls	r2, r3, #27
 80019f8:	9009      	str	r0, [sp, #36]	; 0x24
 80019fa:	f100 810d 	bmi.w	8001c18 <_svfprintf_r+0x66c>
 80019fe:	9908      	ldr	r1, [sp, #32]
 8001a00:	064b      	lsls	r3, r1, #25
 8001a02:	f140 8109 	bpl.w	8001c18 <_svfprintf_r+0x66c>
 8001a06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001a08:	8813      	ldrh	r3, [r2, #0]
 8001a0a:	3204      	adds	r2, #4
 8001a0c:	920e      	str	r2, [sp, #56]	; 0x38
 8001a0e:	1c19      	adds	r1, r3, #0
 8001a10:	9a08      	ldr	r2, [sp, #32]
 8001a12:	bf18      	it	ne
 8001a14:	2101      	movne	r1, #1
 8001a16:	420a      	tst	r2, r1
 8001a18:	f000 83ca 	beq.w	80021b0 <_svfprintf_r+0xc04>
 8001a1c:	9908      	ldr	r1, [sp, #32]
 8001a1e:	9815      	ldr	r0, [sp, #84]	; 0x54
 8001a20:	2230      	movs	r2, #48	; 0x30
 8001a22:	f041 0102 	orr.w	r1, r1, #2
 8001a26:	f88d 210c 	strb.w	r2, [sp, #268]	; 0x10c
 8001a2a:	9108      	str	r1, [sp, #32]
 8001a2c:	f88d 010d 	strb.w	r0, [sp, #269]	; 0x10d
 8001a30:	2101      	movs	r1, #1
 8001a32:	2202      	movs	r2, #2
 8001a34:	e7c4      	b.n	80019c0 <_svfprintf_r+0x414>
 8001a36:	9b08      	ldr	r3, [sp, #32]
 8001a38:	f043 0310 	orr.w	r3, r3, #16
 8001a3c:	9308      	str	r3, [sp, #32]
 8001a3e:	e613      	b.n	8001668 <_svfprintf_r+0xbc>
 8001a40:	2500      	movs	r5, #0
 8001a42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001a44:	f88d 510f 	strb.w	r5, [sp, #271]	; 0x10f
 8001a48:	9315      	str	r3, [sp, #84]	; 0x54
 8001a4a:	6812      	ldr	r2, [r2, #0]
 8001a4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001a4e:	9009      	str	r0, [sp, #36]	; 0x24
 8001a50:	9211      	str	r2, [sp, #68]	; 0x44
 8001a52:	1d1f      	adds	r7, r3, #4
 8001a54:	2a00      	cmp	r2, #0
 8001a56:	f000 864b 	beq.w	80026f0 <_svfprintf_r+0x1144>
 8001a5a:	2c00      	cmp	r4, #0
 8001a5c:	9811      	ldr	r0, [sp, #68]	; 0x44
 8001a5e:	f2c0 8602 	blt.w	8002666 <_svfprintf_r+0x10ba>
 8001a62:	4629      	mov	r1, r5
 8001a64:	4622      	mov	r2, r4
 8001a66:	f002 facf 	bl	8004008 <memchr>
 8001a6a:	2800      	cmp	r0, #0
 8001a6c:	f000 866f 	beq.w	800274e <_svfprintf_r+0x11a2>
 8001a70:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001a72:	9512      	str	r5, [sp, #72]	; 0x48
 8001a74:	1ac0      	subs	r0, r0, r3
 8001a76:	42a0      	cmp	r0, r4
 8001a78:	900d      	str	r0, [sp, #52]	; 0x34
 8001a7a:	bfd1      	iteee	le
 8001a7c:	9b0d      	ldrle	r3, [sp, #52]	; 0x34
 8001a7e:	f89d 110f 	ldrbgt.w	r1, [sp, #271]	; 0x10f
 8001a82:	970e      	strgt	r7, [sp, #56]	; 0x38
 8001a84:	ea24 70e4 	bicgt.w	r0, r4, r4, asr #31
 8001a88:	bfd3      	iteet	le
 8001a8a:	ea23 73e3 	bicle.w	r3, r3, r3, asr #31
 8001a8e:	900a      	strgt	r0, [sp, #40]	; 0x28
 8001a90:	940d      	strgt	r4, [sp, #52]	; 0x34
 8001a92:	930a      	strle	r3, [sp, #40]	; 0x28
 8001a94:	bfdc      	itt	le
 8001a96:	f89d 110f 	ldrble.w	r1, [sp, #271]	; 0x10f
 8001a9a:	970e      	strle	r7, [sp, #56]	; 0x38
 8001a9c:	9516      	str	r5, [sp, #88]	; 0x58
 8001a9e:	e6f3      	b.n	8001888 <_svfprintf_r+0x2dc>
 8001aa0:	9a08      	ldr	r2, [sp, #32]
 8001aa2:	f042 0210 	orr.w	r2, r2, #16
 8001aa6:	9208      	str	r2, [sp, #32]
 8001aa8:	e5de      	b.n	8001668 <_svfprintf_r+0xbc>
 8001aaa:	9009      	str	r0, [sp, #36]	; 0x24
 8001aac:	9808      	ldr	r0, [sp, #32]
 8001aae:	06c3      	lsls	r3, r0, #27
 8001ab0:	f140 843f 	bpl.w	8002332 <_svfprintf_r+0xd86>
 8001ab4:	990e      	ldr	r1, [sp, #56]	; 0x38
 8001ab6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001ab8:	680b      	ldr	r3, [r1, #0]
 8001aba:	3104      	adds	r1, #4
 8001abc:	910e      	str	r1, [sp, #56]	; 0x38
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	e5a2      	b.n	8001608 <_svfprintf_r+0x5c>
 8001ac2:	9a08      	ldr	r2, [sp, #32]
 8001ac4:	9009      	str	r0, [sp, #36]	; 0x24
 8001ac6:	f012 0110 	ands.w	r1, r2, #16
 8001aca:	9315      	str	r3, [sp, #84]	; 0x54
 8001acc:	f47f af70 	bne.w	80019b0 <_svfprintf_r+0x404>
 8001ad0:	9b08      	ldr	r3, [sp, #32]
 8001ad2:	f013 0240 	ands.w	r2, r3, #64	; 0x40
 8001ad6:	f000 8437 	beq.w	8002348 <_svfprintf_r+0xd9c>
 8001ada:	980e      	ldr	r0, [sp, #56]	; 0x38
 8001adc:	8803      	ldrh	r3, [r0, #0]
 8001ade:	460a      	mov	r2, r1
 8001ae0:	1c19      	adds	r1, r3, #0
 8001ae2:	bf18      	it	ne
 8001ae4:	2101      	movne	r1, #1
 8001ae6:	3004      	adds	r0, #4
 8001ae8:	900e      	str	r0, [sp, #56]	; 0x38
 8001aea:	e769      	b.n	80019c0 <_svfprintf_r+0x414>
 8001aec:	9009      	str	r0, [sp, #36]	; 0x24
 8001aee:	9315      	str	r3, [sp, #84]	; 0x54
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	f43f ae2b 	beq.w	800174c <_svfprintf_r+0x1a0>
 8001af6:	2101      	movs	r1, #1
 8001af8:	f88d 30bc 	strb.w	r3, [sp, #188]	; 0xbc
 8001afc:	aa2f      	add	r2, sp, #188	; 0xbc
 8001afe:	2300      	movs	r3, #0
 8001b00:	910a      	str	r1, [sp, #40]	; 0x28
 8001b02:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
 8001b06:	910d      	str	r1, [sp, #52]	; 0x34
 8001b08:	9211      	str	r2, [sp, #68]	; 0x44
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	9312      	str	r3, [sp, #72]	; 0x48
 8001b0e:	9316      	str	r3, [sp, #88]	; 0x58
 8001b10:	e6be      	b.n	8001890 <_svfprintf_r+0x2e4>
 8001b12:	f89d 310f 	ldrb.w	r3, [sp, #271]	; 0x10f
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	f47f ada6 	bne.w	8001668 <_svfprintf_r+0xbc>
 8001b1c:	f88d 710f 	strb.w	r7, [sp, #271]	; 0x10f
 8001b20:	e5a2      	b.n	8001668 <_svfprintf_r+0xbc>
 8001b22:	9a08      	ldr	r2, [sp, #32]
 8001b24:	f042 0201 	orr.w	r2, r2, #1
 8001b28:	9208      	str	r2, [sp, #32]
 8001b2a:	e59d      	b.n	8001668 <_svfprintf_r+0xbc>
 8001b2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001b2e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	930b      	str	r3, [sp, #44]	; 0x2c
 8001b34:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001b36:	1d0b      	adds	r3, r1, #4
 8001b38:	2a00      	cmp	r2, #0
 8001b3a:	f6ff adf7 	blt.w	800172c <_svfprintf_r+0x180>
 8001b3e:	930e      	str	r3, [sp, #56]	; 0x38
 8001b40:	e592      	b.n	8001668 <_svfprintf_r+0xbc>
 8001b42:	9a08      	ldr	r2, [sp, #32]
 8001b44:	9009      	str	r0, [sp, #36]	; 0x24
 8001b46:	06d0      	lsls	r0, r2, #27
 8001b48:	9315      	str	r3, [sp, #84]	; 0x54
 8001b4a:	f53f af47 	bmi.w	80019dc <_svfprintf_r+0x430>
 8001b4e:	9908      	ldr	r1, [sp, #32]
 8001b50:	0649      	lsls	r1, r1, #25
 8001b52:	f140 83ea 	bpl.w	800232a <_svfprintf_r+0xd7e>
 8001b56:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001b58:	8813      	ldrh	r3, [r2, #0]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8001b5e:	1c19      	adds	r1, r3, #0
 8001b60:	bf18      	it	ne
 8001b62:	2101      	movne	r1, #1
 8001b64:	3004      	adds	r0, #4
 8001b66:	900e      	str	r0, [sp, #56]	; 0x38
 8001b68:	e72a      	b.n	80019c0 <_svfprintf_r+0x414>
 8001b6a:	9009      	str	r0, [sp, #36]	; 0x24
 8001b6c:	9808      	ldr	r0, [sp, #32]
 8001b6e:	9315      	str	r3, [sp, #84]	; 0x54
 8001b70:	06c3      	lsls	r3, r0, #27
 8001b72:	f57f ae41 	bpl.w	80017f8 <_svfprintf_r+0x24c>
 8001b76:	990e      	ldr	r1, [sp, #56]	; 0x38
 8001b78:	680b      	ldr	r3, [r1, #0]
 8001b7a:	3104      	adds	r1, #4
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	910e      	str	r1, [sp, #56]	; 0x38
 8001b80:	f6bf ae46 	bge.w	8001810 <_svfprintf_r+0x264>
 8001b84:	425b      	negs	r3, r3
 8001b86:	222d      	movs	r2, #45	; 0x2d
 8001b88:	1c19      	adds	r1, r3, #0
 8001b8a:	f88d 210f 	strb.w	r2, [sp, #271]	; 0x10f
 8001b8e:	bf18      	it	ne
 8001b90:	2101      	movne	r1, #1
 8001b92:	2201      	movs	r2, #1
 8001b94:	e640      	b.n	8001818 <_svfprintf_r+0x26c>
 8001b96:	9908      	ldr	r1, [sp, #32]
 8001b98:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8001b9c:	9108      	str	r1, [sp, #32]
 8001b9e:	e563      	b.n	8001668 <_svfprintf_r+0xbc>
 8001ba0:	9315      	str	r3, [sp, #84]	; 0x54
 8001ba2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001ba4:	990e      	ldr	r1, [sp, #56]	; 0x38
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	9009      	str	r0, [sp, #36]	; 0x24
 8001baa:	2200      	movs	r2, #0
 8001bac:	2001      	movs	r0, #1
 8001bae:	f88d 210f 	strb.w	r2, [sp, #271]	; 0x10f
 8001bb2:	3104      	adds	r1, #4
 8001bb4:	aa2f      	add	r2, sp, #188	; 0xbc
 8001bb6:	900a      	str	r0, [sp, #40]	; 0x28
 8001bb8:	910e      	str	r1, [sp, #56]	; 0x38
 8001bba:	f88d 30bc 	strb.w	r3, [sp, #188]	; 0xbc
 8001bbe:	900d      	str	r0, [sp, #52]	; 0x34
 8001bc0:	9211      	str	r2, [sp, #68]	; 0x44
 8001bc2:	e7a2      	b.n	8001b0a <_svfprintf_r+0x55e>
 8001bc4:	490e      	ldr	r1, [pc, #56]	; (8001c00 <_svfprintf_r+0x654>)
 8001bc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001bc8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001bca:	911c      	str	r1, [sp, #112]	; 0x70
 8001bcc:	9908      	ldr	r1, [sp, #32]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	9009      	str	r0, [sp, #36]	; 0x24
 8001bd2:	3204      	adds	r2, #4
 8001bd4:	f041 0102 	orr.w	r1, r1, #2
 8001bd8:	2078      	movs	r0, #120	; 0x78
 8001bda:	920e      	str	r2, [sp, #56]	; 0x38
 8001bdc:	9108      	str	r1, [sp, #32]
 8001bde:	2230      	movs	r2, #48	; 0x30
 8001be0:	1c19      	adds	r1, r3, #0
 8001be2:	f88d 210c 	strb.w	r2, [sp, #268]	; 0x10c
 8001be6:	bf18      	it	ne
 8001be8:	2101      	movne	r1, #1
 8001bea:	f88d 010d 	strb.w	r0, [sp, #269]	; 0x10d
 8001bee:	2202      	movs	r2, #2
 8001bf0:	9015      	str	r0, [sp, #84]	; 0x54
 8001bf2:	e6e5      	b.n	80019c0 <_svfprintf_r+0x414>
 8001bf4:	08006890 	.word	0x08006890
 8001bf8:	0800688c 	.word	0x0800688c
 8001bfc:	0800689c 	.word	0x0800689c
 8001c00:	080068b0 	.word	0x080068b0
 8001c04:	08006660 	.word	0x08006660
 8001c08:	9315      	str	r3, [sp, #84]	; 0x54
 8001c0a:	9b08      	ldr	r3, [sp, #32]
 8001c0c:	49a4      	ldr	r1, [pc, #656]	; (8001ea0 <_svfprintf_r+0x8f4>)
 8001c0e:	9009      	str	r0, [sp, #36]	; 0x24
 8001c10:	06da      	lsls	r2, r3, #27
 8001c12:	911c      	str	r1, [sp, #112]	; 0x70
 8001c14:	f57f aef3 	bpl.w	80019fe <_svfprintf_r+0x452>
 8001c18:	980e      	ldr	r0, [sp, #56]	; 0x38
 8001c1a:	6803      	ldr	r3, [r0, #0]
 8001c1c:	3004      	adds	r0, #4
 8001c1e:	900e      	str	r0, [sp, #56]	; 0x38
 8001c20:	e6f5      	b.n	8001a0e <_svfprintf_r+0x462>
 8001c22:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8001c24:	f89d 310f 	ldrb.w	r3, [sp, #271]	; 0x10f
 8001c28:	b16b      	cbz	r3, 8001c46 <_svfprintf_r+0x69a>
 8001c2a:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8001c2c:	f20d 130f 	addw	r3, sp, #271	; 0x10f
 8001c30:	3401      	adds	r4, #1
 8001c32:	6033      	str	r3, [r6, #0]
 8001c34:	3501      	adds	r5, #1
 8001c36:	2301      	movs	r3, #1
 8001c38:	2c07      	cmp	r4, #7
 8001c3a:	6073      	str	r3, [r6, #4]
 8001c3c:	953b      	str	r5, [sp, #236]	; 0xec
 8001c3e:	943a      	str	r4, [sp, #232]	; 0xe8
 8001c40:	f300 81f5 	bgt.w	800202e <_svfprintf_r+0xa82>
 8001c44:	3608      	adds	r6, #8
 8001c46:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8001c48:	b163      	cbz	r3, 8001c64 <_svfprintf_r+0x6b8>
 8001c4a:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8001c4c:	ab43      	add	r3, sp, #268	; 0x10c
 8001c4e:	3401      	adds	r4, #1
 8001c50:	6033      	str	r3, [r6, #0]
 8001c52:	3502      	adds	r5, #2
 8001c54:	2302      	movs	r3, #2
 8001c56:	2c07      	cmp	r4, #7
 8001c58:	6073      	str	r3, [r6, #4]
 8001c5a:	953b      	str	r5, [sp, #236]	; 0xec
 8001c5c:	943a      	str	r4, [sp, #232]	; 0xe8
 8001c5e:	f300 81db 	bgt.w	8002018 <_svfprintf_r+0xa6c>
 8001c62:	3608      	adds	r6, #8
 8001c64:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8001c66:	2b80      	cmp	r3, #128	; 0x80
 8001c68:	f000 8122 	beq.w	8001eb0 <_svfprintf_r+0x904>
 8001c6c:	9812      	ldr	r0, [sp, #72]	; 0x48
 8001c6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001c70:	1ac7      	subs	r7, r0, r3
 8001c72:	2f00      	cmp	r7, #0
 8001c74:	dd32      	ble.n	8001cdc <_svfprintf_r+0x730>
 8001c76:	2f10      	cmp	r7, #16
 8001c78:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8001c7a:	f8df 822c 	ldr.w	r8, [pc, #556]	; 8001ea8 <_svfprintf_r+0x8fc>
 8001c7e:	dd22      	ble.n	8001cc6 <_svfprintf_r+0x71a>
 8001c80:	4623      	mov	r3, r4
 8001c82:	f04f 0910 	mov.w	r9, #16
 8001c86:	4644      	mov	r4, r8
 8001c88:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8001c8c:	e003      	b.n	8001c96 <_svfprintf_r+0x6ea>
 8001c8e:	3f10      	subs	r7, #16
 8001c90:	3608      	adds	r6, #8
 8001c92:	2f10      	cmp	r7, #16
 8001c94:	dd15      	ble.n	8001cc2 <_svfprintf_r+0x716>
 8001c96:	3301      	adds	r3, #1
 8001c98:	3510      	adds	r5, #16
 8001c9a:	2b07      	cmp	r3, #7
 8001c9c:	e886 0210 	stmia.w	r6, {r4, r9}
 8001ca0:	953b      	str	r5, [sp, #236]	; 0xec
 8001ca2:	933a      	str	r3, [sp, #232]	; 0xe8
 8001ca4:	ddf3      	ble.n	8001c8e <_svfprintf_r+0x6e2>
 8001ca6:	4640      	mov	r0, r8
 8001ca8:	4651      	mov	r1, sl
 8001caa:	465a      	mov	r2, fp
 8001cac:	f002 ffee 	bl	8004c8c <__ssprint_r>
 8001cb0:	2800      	cmp	r0, #0
 8001cb2:	f47f ad52 	bne.w	800175a <_svfprintf_r+0x1ae>
 8001cb6:	3f10      	subs	r7, #16
 8001cb8:	2f10      	cmp	r7, #16
 8001cba:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8001cbc:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8001cbe:	ae1f      	add	r6, sp, #124	; 0x7c
 8001cc0:	dce9      	bgt.n	8001c96 <_svfprintf_r+0x6ea>
 8001cc2:	46a0      	mov	r8, r4
 8001cc4:	461c      	mov	r4, r3
 8001cc6:	3401      	adds	r4, #1
 8001cc8:	19ed      	adds	r5, r5, r7
 8001cca:	2c07      	cmp	r4, #7
 8001ccc:	f8c6 8000 	str.w	r8, [r6]
 8001cd0:	6077      	str	r7, [r6, #4]
 8001cd2:	953b      	str	r5, [sp, #236]	; 0xec
 8001cd4:	943a      	str	r4, [sp, #232]	; 0xe8
 8001cd6:	f300 8194 	bgt.w	8002002 <_svfprintf_r+0xa56>
 8001cda:	3608      	adds	r6, #8
 8001cdc:	9908      	ldr	r1, [sp, #32]
 8001cde:	05ca      	lsls	r2, r1, #23
 8001ce0:	d472      	bmi.n	8001dc8 <_svfprintf_r+0x81c>
 8001ce2:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8001ce4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001ce6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8001ce8:	6073      	str	r3, [r6, #4]
 8001cea:	3401      	adds	r4, #1
 8001cec:	18ed      	adds	r5, r5, r3
 8001cee:	2c07      	cmp	r4, #7
 8001cf0:	6032      	str	r2, [r6, #0]
 8001cf2:	953b      	str	r5, [sp, #236]	; 0xec
 8001cf4:	943a      	str	r4, [sp, #232]	; 0xe8
 8001cf6:	dc5c      	bgt.n	8001db2 <_svfprintf_r+0x806>
 8001cf8:	3608      	adds	r6, #8
 8001cfa:	9908      	ldr	r1, [sp, #32]
 8001cfc:	074b      	lsls	r3, r1, #29
 8001cfe:	d53e      	bpl.n	8001d7e <_svfprintf_r+0x7d2>
 8001d00:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001d02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001d04:	1ad7      	subs	r7, r2, r3
 8001d06:	2f00      	cmp	r7, #0
 8001d08:	dd39      	ble.n	8001d7e <_svfprintf_r+0x7d2>
 8001d0a:	2f10      	cmp	r7, #16
 8001d0c:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8001d0e:	f8df 819c 	ldr.w	r8, [pc, #412]	; 8001eac <_svfprintf_r+0x900>
 8001d12:	dd22      	ble.n	8001d5a <_svfprintf_r+0x7ae>
 8001d14:	4623      	mov	r3, r4
 8001d16:	f04f 0910 	mov.w	r9, #16
 8001d1a:	4644      	mov	r4, r8
 8001d1c:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8001d20:	e003      	b.n	8001d2a <_svfprintf_r+0x77e>
 8001d22:	3f10      	subs	r7, #16
 8001d24:	3608      	adds	r6, #8
 8001d26:	2f10      	cmp	r7, #16
 8001d28:	dd15      	ble.n	8001d56 <_svfprintf_r+0x7aa>
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	3510      	adds	r5, #16
 8001d2e:	2b07      	cmp	r3, #7
 8001d30:	e886 0210 	stmia.w	r6, {r4, r9}
 8001d34:	953b      	str	r5, [sp, #236]	; 0xec
 8001d36:	933a      	str	r3, [sp, #232]	; 0xe8
 8001d38:	ddf3      	ble.n	8001d22 <_svfprintf_r+0x776>
 8001d3a:	4640      	mov	r0, r8
 8001d3c:	4651      	mov	r1, sl
 8001d3e:	465a      	mov	r2, fp
 8001d40:	f002 ffa4 	bl	8004c8c <__ssprint_r>
 8001d44:	2800      	cmp	r0, #0
 8001d46:	f47f ad08 	bne.w	800175a <_svfprintf_r+0x1ae>
 8001d4a:	3f10      	subs	r7, #16
 8001d4c:	2f10      	cmp	r7, #16
 8001d4e:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8001d50:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8001d52:	ae1f      	add	r6, sp, #124	; 0x7c
 8001d54:	dce9      	bgt.n	8001d2a <_svfprintf_r+0x77e>
 8001d56:	46a0      	mov	r8, r4
 8001d58:	461c      	mov	r4, r3
 8001d5a:	3401      	adds	r4, #1
 8001d5c:	197d      	adds	r5, r7, r5
 8001d5e:	2c07      	cmp	r4, #7
 8001d60:	f8c6 8000 	str.w	r8, [r6]
 8001d64:	6077      	str	r7, [r6, #4]
 8001d66:	953b      	str	r5, [sp, #236]	; 0xec
 8001d68:	943a      	str	r4, [sp, #232]	; 0xe8
 8001d6a:	dd08      	ble.n	8001d7e <_svfprintf_r+0x7d2>
 8001d6c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8001d6e:	4651      	mov	r1, sl
 8001d70:	465a      	mov	r2, fp
 8001d72:	f002 ff8b 	bl	8004c8c <__ssprint_r>
 8001d76:	2800      	cmp	r0, #0
 8001d78:	f47f acef 	bne.w	800175a <_svfprintf_r+0x1ae>
 8001d7c:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8001d7e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001d80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001d82:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8001d84:	428a      	cmp	r2, r1
 8001d86:	bfac      	ite	ge
 8001d88:	1880      	addge	r0, r0, r2
 8001d8a:	1840      	addlt	r0, r0, r1
 8001d8c:	900c      	str	r0, [sp, #48]	; 0x30
 8001d8e:	2d00      	cmp	r5, #0
 8001d90:	f040 8129 	bne.w	8001fe6 <_svfprintf_r+0xa3a>
 8001d94:	2300      	movs	r3, #0
 8001d96:	933a      	str	r3, [sp, #232]	; 0xe8
 8001d98:	ae1f      	add	r6, sp, #124	; 0x7c
 8001d9a:	e435      	b.n	8001608 <_svfprintf_r+0x5c>
 8001d9c:	46a0      	mov	r8, r4
 8001d9e:	461c      	mov	r4, r3
 8001da0:	3401      	adds	r4, #1
 8001da2:	19ed      	adds	r5, r5, r7
 8001da4:	2c07      	cmp	r4, #7
 8001da6:	f8c6 8000 	str.w	r8, [r6]
 8001daa:	6077      	str	r7, [r6, #4]
 8001dac:	953b      	str	r5, [sp, #236]	; 0xec
 8001dae:	943a      	str	r4, [sp, #232]	; 0xe8
 8001db0:	dda2      	ble.n	8001cf8 <_svfprintf_r+0x74c>
 8001db2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8001db4:	4651      	mov	r1, sl
 8001db6:	465a      	mov	r2, fp
 8001db8:	f002 ff68 	bl	8004c8c <__ssprint_r>
 8001dbc:	2800      	cmp	r0, #0
 8001dbe:	f47f accc 	bne.w	800175a <_svfprintf_r+0x1ae>
 8001dc2:	ae1f      	add	r6, sp, #124	; 0x7c
 8001dc4:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8001dc6:	e798      	b.n	8001cfa <_svfprintf_r+0x74e>
 8001dc8:	9815      	ldr	r0, [sp, #84]	; 0x54
 8001dca:	2865      	cmp	r0, #101	; 0x65
 8001dcc:	f340 80aa 	ble.w	8001f24 <_svfprintf_r+0x978>
 8001dd0:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	f004 fb16 	bl	8006408 <__aeabi_dcmpeq>
 8001ddc:	2800      	cmp	r0, #0
 8001dde:	f000 8131 	beq.w	8002044 <_svfprintf_r+0xa98>
 8001de2:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8001de4:	4b2f      	ldr	r3, [pc, #188]	; (8001ea4 <_svfprintf_r+0x8f8>)
 8001de6:	3401      	adds	r4, #1
 8001de8:	6033      	str	r3, [r6, #0]
 8001dea:	3501      	adds	r5, #1
 8001dec:	2301      	movs	r3, #1
 8001dee:	2c07      	cmp	r4, #7
 8001df0:	6073      	str	r3, [r6, #4]
 8001df2:	953b      	str	r5, [sp, #236]	; 0xec
 8001df4:	943a      	str	r4, [sp, #232]	; 0xe8
 8001df6:	f300 82b8 	bgt.w	800236a <_svfprintf_r+0xdbe>
 8001dfa:	3608      	adds	r6, #8
 8001dfc:	9b40      	ldr	r3, [sp, #256]	; 0x100
 8001dfe:	9910      	ldr	r1, [sp, #64]	; 0x40
 8001e00:	4299      	cmp	r1, r3
 8001e02:	dc03      	bgt.n	8001e0c <_svfprintf_r+0x860>
 8001e04:	9a08      	ldr	r2, [sp, #32]
 8001e06:	07d3      	lsls	r3, r2, #31
 8001e08:	f57f af77 	bpl.w	8001cfa <_svfprintf_r+0x74e>
 8001e0c:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8001e0e:	981a      	ldr	r0, [sp, #104]	; 0x68
 8001e10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8001e12:	6070      	str	r0, [r6, #4]
 8001e14:	3401      	adds	r4, #1
 8001e16:	182d      	adds	r5, r5, r0
 8001e18:	2c07      	cmp	r4, #7
 8001e1a:	6033      	str	r3, [r6, #0]
 8001e1c:	953b      	str	r5, [sp, #236]	; 0xec
 8001e1e:	943a      	str	r4, [sp, #232]	; 0xe8
 8001e20:	f300 8300 	bgt.w	8002424 <_svfprintf_r+0xe78>
 8001e24:	3608      	adds	r6, #8
 8001e26:	9910      	ldr	r1, [sp, #64]	; 0x40
 8001e28:	1e4f      	subs	r7, r1, #1
 8001e2a:	2f00      	cmp	r7, #0
 8001e2c:	f77f af65 	ble.w	8001cfa <_svfprintf_r+0x74e>
 8001e30:	2f10      	cmp	r7, #16
 8001e32:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8001e34:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8001ea8 <_svfprintf_r+0x8fc>
 8001e38:	ddb2      	ble.n	8001da0 <_svfprintf_r+0x7f4>
 8001e3a:	4623      	mov	r3, r4
 8001e3c:	f04f 0910 	mov.w	r9, #16
 8001e40:	4644      	mov	r4, r8
 8001e42:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8001e46:	e003      	b.n	8001e50 <_svfprintf_r+0x8a4>
 8001e48:	3608      	adds	r6, #8
 8001e4a:	3f10      	subs	r7, #16
 8001e4c:	2f10      	cmp	r7, #16
 8001e4e:	dda5      	ble.n	8001d9c <_svfprintf_r+0x7f0>
 8001e50:	3301      	adds	r3, #1
 8001e52:	3510      	adds	r5, #16
 8001e54:	2b07      	cmp	r3, #7
 8001e56:	e886 0210 	stmia.w	r6, {r4, r9}
 8001e5a:	953b      	str	r5, [sp, #236]	; 0xec
 8001e5c:	933a      	str	r3, [sp, #232]	; 0xe8
 8001e5e:	ddf3      	ble.n	8001e48 <_svfprintf_r+0x89c>
 8001e60:	4640      	mov	r0, r8
 8001e62:	4651      	mov	r1, sl
 8001e64:	465a      	mov	r2, fp
 8001e66:	f002 ff11 	bl	8004c8c <__ssprint_r>
 8001e6a:	2800      	cmp	r0, #0
 8001e6c:	f47f ac75 	bne.w	800175a <_svfprintf_r+0x1ae>
 8001e70:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8001e72:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8001e74:	ae1f      	add	r6, sp, #124	; 0x7c
 8001e76:	e7e8      	b.n	8001e4a <_svfprintf_r+0x89e>
 8001e78:	2a00      	cmp	r2, #0
 8001e7a:	f040 80be 	bne.w	8001ffa <_svfprintf_r+0xa4e>
 8001e7e:	9808      	ldr	r0, [sp, #32]
 8001e80:	07c1      	lsls	r1, r0, #31
 8001e82:	bf5c      	itt	pl
 8001e84:	920d      	strpl	r2, [sp, #52]	; 0x34
 8001e86:	f8cd b044 	strpl.w	fp, [sp, #68]	; 0x44
 8001e8a:	f57f acf3 	bpl.w	8001874 <_svfprintf_r+0x2c8>
 8001e8e:	991d      	ldr	r1, [sp, #116]	; 0x74
 8001e90:	2330      	movs	r3, #48	; 0x30
 8001e92:	f10d 02e3 	add.w	r2, sp, #227	; 0xe3
 8001e96:	f88d 30e3 	strb.w	r3, [sp, #227]	; 0xe3
 8001e9a:	910d      	str	r1, [sp, #52]	; 0x34
 8001e9c:	9211      	str	r2, [sp, #68]	; 0x44
 8001e9e:	e4e9      	b.n	8001874 <_svfprintf_r+0x2c8>
 8001ea0:	080068b0 	.word	0x080068b0
 8001ea4:	080068cc 	.word	0x080068cc
 8001ea8:	08006670 	.word	0x08006670
 8001eac:	08006660 	.word	0x08006660
 8001eb0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8001eb2:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001eb4:	1a47      	subs	r7, r0, r1
 8001eb6:	2f00      	cmp	r7, #0
 8001eb8:	f77f aed8 	ble.w	8001c6c <_svfprintf_r+0x6c0>
 8001ebc:	2f10      	cmp	r7, #16
 8001ebe:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8001ec0:	f8df 86d8 	ldr.w	r8, [pc, #1752]	; 800259c <_svfprintf_r+0xff0>
 8001ec4:	dd22      	ble.n	8001f0c <_svfprintf_r+0x960>
 8001ec6:	4623      	mov	r3, r4
 8001ec8:	f04f 0910 	mov.w	r9, #16
 8001ecc:	4644      	mov	r4, r8
 8001ece:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8001ed2:	e003      	b.n	8001edc <_svfprintf_r+0x930>
 8001ed4:	3f10      	subs	r7, #16
 8001ed6:	3608      	adds	r6, #8
 8001ed8:	2f10      	cmp	r7, #16
 8001eda:	dd15      	ble.n	8001f08 <_svfprintf_r+0x95c>
 8001edc:	3301      	adds	r3, #1
 8001ede:	3510      	adds	r5, #16
 8001ee0:	2b07      	cmp	r3, #7
 8001ee2:	e886 0210 	stmia.w	r6, {r4, r9}
 8001ee6:	953b      	str	r5, [sp, #236]	; 0xec
 8001ee8:	933a      	str	r3, [sp, #232]	; 0xe8
 8001eea:	ddf3      	ble.n	8001ed4 <_svfprintf_r+0x928>
 8001eec:	4640      	mov	r0, r8
 8001eee:	4651      	mov	r1, sl
 8001ef0:	465a      	mov	r2, fp
 8001ef2:	f002 fecb 	bl	8004c8c <__ssprint_r>
 8001ef6:	2800      	cmp	r0, #0
 8001ef8:	f47f ac2f 	bne.w	800175a <_svfprintf_r+0x1ae>
 8001efc:	3f10      	subs	r7, #16
 8001efe:	2f10      	cmp	r7, #16
 8001f00:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8001f02:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8001f04:	ae1f      	add	r6, sp, #124	; 0x7c
 8001f06:	dce9      	bgt.n	8001edc <_svfprintf_r+0x930>
 8001f08:	46a0      	mov	r8, r4
 8001f0a:	461c      	mov	r4, r3
 8001f0c:	3401      	adds	r4, #1
 8001f0e:	19ed      	adds	r5, r5, r7
 8001f10:	2c07      	cmp	r4, #7
 8001f12:	f8c6 8000 	str.w	r8, [r6]
 8001f16:	6077      	str	r7, [r6, #4]
 8001f18:	953b      	str	r5, [sp, #236]	; 0xec
 8001f1a:	943a      	str	r4, [sp, #232]	; 0xe8
 8001f1c:	f300 81df 	bgt.w	80022de <_svfprintf_r+0xd32>
 8001f20:	3608      	adds	r6, #8
 8001f22:	e6a3      	b.n	8001c6c <_svfprintf_r+0x6c0>
 8001f24:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8001f26:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8001f28:	2a01      	cmp	r2, #1
 8001f2a:	f340 81a5 	ble.w	8002278 <_svfprintf_r+0xccc>
 8001f2e:	3401      	adds	r4, #1
 8001f30:	9811      	ldr	r0, [sp, #68]	; 0x44
 8001f32:	3501      	adds	r5, #1
 8001f34:	2301      	movs	r3, #1
 8001f36:	2c07      	cmp	r4, #7
 8001f38:	6030      	str	r0, [r6, #0]
 8001f3a:	6073      	str	r3, [r6, #4]
 8001f3c:	953b      	str	r5, [sp, #236]	; 0xec
 8001f3e:	943a      	str	r4, [sp, #232]	; 0xe8
 8001f40:	f300 81c1 	bgt.w	80022c6 <_svfprintf_r+0xd1a>
 8001f44:	3608      	adds	r6, #8
 8001f46:	991a      	ldr	r1, [sp, #104]	; 0x68
 8001f48:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8001f4a:	6071      	str	r1, [r6, #4]
 8001f4c:	3401      	adds	r4, #1
 8001f4e:	186d      	adds	r5, r5, r1
 8001f50:	2c07      	cmp	r4, #7
 8001f52:	6032      	str	r2, [r6, #0]
 8001f54:	953b      	str	r5, [sp, #236]	; 0xec
 8001f56:	943a      	str	r4, [sp, #232]	; 0xe8
 8001f58:	f300 81a9 	bgt.w	80022ae <_svfprintf_r+0xd02>
 8001f5c:	3608      	adds	r6, #8
 8001f5e:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 8001f62:	2200      	movs	r2, #0
 8001f64:	2300      	movs	r3, #0
 8001f66:	f004 fa4f 	bl	8006408 <__aeabi_dcmpeq>
 8001f6a:	2800      	cmp	r0, #0
 8001f6c:	f040 80f6 	bne.w	800215c <_svfprintf_r+0xbb0>
 8001f70:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001f72:	9811      	ldr	r0, [sp, #68]	; 0x44
 8001f74:	1e5a      	subs	r2, r3, #1
 8001f76:	3401      	adds	r4, #1
 8001f78:	1c43      	adds	r3, r0, #1
 8001f7a:	18ad      	adds	r5, r5, r2
 8001f7c:	2c07      	cmp	r4, #7
 8001f7e:	6033      	str	r3, [r6, #0]
 8001f80:	6072      	str	r2, [r6, #4]
 8001f82:	953b      	str	r5, [sp, #236]	; 0xec
 8001f84:	943a      	str	r4, [sp, #232]	; 0xe8
 8001f86:	dc22      	bgt.n	8001fce <_svfprintf_r+0xa22>
 8001f88:	3608      	adds	r6, #8
 8001f8a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8001f8c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8001f8e:	3401      	adds	r4, #1
 8001f90:	18ed      	adds	r5, r5, r3
 8001f92:	2c07      	cmp	r4, #7
 8001f94:	ab3c      	add	r3, sp, #240	; 0xf0
 8001f96:	6033      	str	r3, [r6, #0]
 8001f98:	6070      	str	r0, [r6, #4]
 8001f9a:	953b      	str	r5, [sp, #236]	; 0xec
 8001f9c:	943a      	str	r4, [sp, #232]	; 0xe8
 8001f9e:	f77f aeab 	ble.w	8001cf8 <_svfprintf_r+0x74c>
 8001fa2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8001fa4:	4651      	mov	r1, sl
 8001fa6:	465a      	mov	r2, fp
 8001fa8:	f002 fe70 	bl	8004c8c <__ssprint_r>
 8001fac:	2800      	cmp	r0, #0
 8001fae:	f47f abd4 	bne.w	800175a <_svfprintf_r+0x1ae>
 8001fb2:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8001fb4:	ae1f      	add	r6, sp, #124	; 0x7c
 8001fb6:	e6a0      	b.n	8001cfa <_svfprintf_r+0x74e>
 8001fb8:	46a0      	mov	r8, r4
 8001fba:	461c      	mov	r4, r3
 8001fbc:	3401      	adds	r4, #1
 8001fbe:	19ed      	adds	r5, r5, r7
 8001fc0:	2c07      	cmp	r4, #7
 8001fc2:	f8c6 8000 	str.w	r8, [r6]
 8001fc6:	6077      	str	r7, [r6, #4]
 8001fc8:	953b      	str	r5, [sp, #236]	; 0xec
 8001fca:	943a      	str	r4, [sp, #232]	; 0xe8
 8001fcc:	dddc      	ble.n	8001f88 <_svfprintf_r+0x9dc>
 8001fce:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8001fd0:	4651      	mov	r1, sl
 8001fd2:	465a      	mov	r2, fp
 8001fd4:	f002 fe5a 	bl	8004c8c <__ssprint_r>
 8001fd8:	2800      	cmp	r0, #0
 8001fda:	f47f abbe 	bne.w	800175a <_svfprintf_r+0x1ae>
 8001fde:	ae1f      	add	r6, sp, #124	; 0x7c
 8001fe0:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8001fe2:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8001fe4:	e7d1      	b.n	8001f8a <_svfprintf_r+0x9de>
 8001fe6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8001fe8:	4651      	mov	r1, sl
 8001fea:	465a      	mov	r2, fp
 8001fec:	f002 fe4e 	bl	8004c8c <__ssprint_r>
 8001ff0:	2800      	cmp	r0, #0
 8001ff2:	f43f aecf 	beq.w	8001d94 <_svfprintf_r+0x7e8>
 8001ff6:	f7ff bbb0 	b.w	800175a <_svfprintf_r+0x1ae>
 8001ffa:	910d      	str	r1, [sp, #52]	; 0x34
 8001ffc:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8002000:	e438      	b.n	8001874 <_svfprintf_r+0x2c8>
 8002002:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8002004:	4651      	mov	r1, sl
 8002006:	465a      	mov	r2, fp
 8002008:	f002 fe40 	bl	8004c8c <__ssprint_r>
 800200c:	2800      	cmp	r0, #0
 800200e:	f47f aba4 	bne.w	800175a <_svfprintf_r+0x1ae>
 8002012:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8002014:	ae1f      	add	r6, sp, #124	; 0x7c
 8002016:	e661      	b.n	8001cdc <_svfprintf_r+0x730>
 8002018:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800201a:	4651      	mov	r1, sl
 800201c:	465a      	mov	r2, fp
 800201e:	f002 fe35 	bl	8004c8c <__ssprint_r>
 8002022:	2800      	cmp	r0, #0
 8002024:	f47f ab99 	bne.w	800175a <_svfprintf_r+0x1ae>
 8002028:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 800202a:	ae1f      	add	r6, sp, #124	; 0x7c
 800202c:	e61a      	b.n	8001c64 <_svfprintf_r+0x6b8>
 800202e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8002030:	4651      	mov	r1, sl
 8002032:	465a      	mov	r2, fp
 8002034:	f002 fe2a 	bl	8004c8c <__ssprint_r>
 8002038:	2800      	cmp	r0, #0
 800203a:	f47f ab8e 	bne.w	800175a <_svfprintf_r+0x1ae>
 800203e:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8002040:	ae1f      	add	r6, sp, #124	; 0x7c
 8002042:	e600      	b.n	8001c46 <_svfprintf_r+0x69a>
 8002044:	9f40      	ldr	r7, [sp, #256]	; 0x100
 8002046:	2f00      	cmp	r7, #0
 8002048:	f340 819a 	ble.w	8002380 <_svfprintf_r+0xdd4>
 800204c:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800204e:	9816      	ldr	r0, [sp, #88]	; 0x58
 8002050:	9911      	ldr	r1, [sp, #68]	; 0x44
 8002052:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002054:	4287      	cmp	r7, r0
 8002056:	bfa8      	it	ge
 8002058:	4607      	movge	r7, r0
 800205a:	1889      	adds	r1, r1, r2
 800205c:	2f00      	cmp	r7, #0
 800205e:	910d      	str	r1, [sp, #52]	; 0x34
 8002060:	dd0b      	ble.n	800207a <_svfprintf_r+0xace>
 8002062:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8002064:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8002066:	6077      	str	r7, [r6, #4]
 8002068:	3401      	adds	r4, #1
 800206a:	19ed      	adds	r5, r5, r7
 800206c:	2c07      	cmp	r4, #7
 800206e:	6032      	str	r2, [r6, #0]
 8002070:	953b      	str	r5, [sp, #236]	; 0xec
 8002072:	943a      	str	r4, [sp, #232]	; 0xe8
 8002074:	f300 8304 	bgt.w	8002680 <_svfprintf_r+0x10d4>
 8002078:	3608      	adds	r6, #8
 800207a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800207c:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
 8002080:	1bdf      	subs	r7, r3, r7
 8002082:	2f00      	cmp	r7, #0
 8002084:	f340 80a0 	ble.w	80021c8 <_svfprintf_r+0xc1c>
 8002088:	2f10      	cmp	r7, #16
 800208a:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 800208c:	f8df 850c 	ldr.w	r8, [pc, #1292]	; 800259c <_svfprintf_r+0xff0>
 8002090:	f340 815f 	ble.w	8002352 <_svfprintf_r+0xda6>
 8002094:	4623      	mov	r3, r4
 8002096:	f04f 0910 	mov.w	r9, #16
 800209a:	4644      	mov	r4, r8
 800209c:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 80020a0:	e004      	b.n	80020ac <_svfprintf_r+0xb00>
 80020a2:	3608      	adds	r6, #8
 80020a4:	3f10      	subs	r7, #16
 80020a6:	2f10      	cmp	r7, #16
 80020a8:	f340 8151 	ble.w	800234e <_svfprintf_r+0xda2>
 80020ac:	3301      	adds	r3, #1
 80020ae:	3510      	adds	r5, #16
 80020b0:	2b07      	cmp	r3, #7
 80020b2:	e886 0210 	stmia.w	r6, {r4, r9}
 80020b6:	953b      	str	r5, [sp, #236]	; 0xec
 80020b8:	933a      	str	r3, [sp, #232]	; 0xe8
 80020ba:	ddf2      	ble.n	80020a2 <_svfprintf_r+0xaf6>
 80020bc:	4640      	mov	r0, r8
 80020be:	4651      	mov	r1, sl
 80020c0:	465a      	mov	r2, fp
 80020c2:	f002 fde3 	bl	8004c8c <__ssprint_r>
 80020c6:	2800      	cmp	r0, #0
 80020c8:	f47f ab47 	bne.w	800175a <_svfprintf_r+0x1ae>
 80020cc:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80020ce:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 80020d0:	ae1f      	add	r6, sp, #124	; 0x7c
 80020d2:	e7e7      	b.n	80020a4 <_svfprintf_r+0xaf8>
 80020d4:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 80020d6:	f10d 01e3 	add.w	r1, sp, #227	; 0xe3
 80020da:	f003 000f 	and.w	r0, r3, #15
 80020de:	460a      	mov	r2, r1
 80020e0:	5c28      	ldrb	r0, [r5, r0]
 80020e2:	3901      	subs	r1, #1
 80020e4:	091b      	lsrs	r3, r3, #4
 80020e6:	7010      	strb	r0, [r2, #0]
 80020e8:	d1f7      	bne.n	80020da <_svfprintf_r+0xb2e>
 80020ea:	ebc2 030b 	rsb	r3, r2, fp
 80020ee:	9211      	str	r2, [sp, #68]	; 0x44
 80020f0:	930d      	str	r3, [sp, #52]	; 0x34
 80020f2:	f7ff bbbf 	b.w	8001874 <_svfprintf_r+0x2c8>
 80020f6:	2b09      	cmp	r3, #9
 80020f8:	bf82      	ittt	hi
 80020fa:	f64c 45cd 	movwhi	r5, #52429	; 0xcccd
 80020fe:	f10d 01e3 	addhi.w	r1, sp, #227	; 0xe3
 8002102:	f6cc 45cc 	movthi	r5, #52428	; 0xcccc
 8002106:	d809      	bhi.n	800211c <_svfprintf_r+0xb70>
 8002108:	981d      	ldr	r0, [sp, #116]	; 0x74
 800210a:	3330      	adds	r3, #48	; 0x30
 800210c:	f10d 01e3 	add.w	r1, sp, #227	; 0xe3
 8002110:	f88d 30e3 	strb.w	r3, [sp, #227]	; 0xe3
 8002114:	900d      	str	r0, [sp, #52]	; 0x34
 8002116:	9111      	str	r1, [sp, #68]	; 0x44
 8002118:	f7ff bbac 	b.w	8001874 <_svfprintf_r+0x2c8>
 800211c:	fba5 0203 	umull	r0, r2, r5, r3
 8002120:	08d2      	lsrs	r2, r2, #3
 8002122:	eb02 0782 	add.w	r7, r2, r2, lsl #2
 8002126:	4608      	mov	r0, r1
 8002128:	eba3 0347 	sub.w	r3, r3, r7, lsl #1
 800212c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8002130:	7001      	strb	r1, [r0, #0]
 8002132:	4613      	mov	r3, r2
 8002134:	1e41      	subs	r1, r0, #1
 8002136:	2a00      	cmp	r2, #0
 8002138:	d1f0      	bne.n	800211c <_svfprintf_r+0xb70>
 800213a:	ebc0 030b 	rsb	r3, r0, fp
 800213e:	9011      	str	r0, [sp, #68]	; 0x44
 8002140:	930d      	str	r3, [sp, #52]	; 0x34
 8002142:	f7ff bb97 	b.w	8001874 <_svfprintf_r+0x2c8>
 8002146:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8002148:	4651      	mov	r1, sl
 800214a:	465a      	mov	r2, fp
 800214c:	f002 fd9e 	bl	8004c8c <__ssprint_r>
 8002150:	2800      	cmp	r0, #0
 8002152:	f47f ab02 	bne.w	800175a <_svfprintf_r+0x1ae>
 8002156:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8002158:	ae1f      	add	r6, sp, #124	; 0x7c
 800215a:	e563      	b.n	8001c24 <_svfprintf_r+0x678>
 800215c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800215e:	1e4f      	subs	r7, r1, #1
 8002160:	2f00      	cmp	r7, #0
 8002162:	f77f af12 	ble.w	8001f8a <_svfprintf_r+0x9de>
 8002166:	2f10      	cmp	r7, #16
 8002168:	f8df 8430 	ldr.w	r8, [pc, #1072]	; 800259c <_svfprintf_r+0xff0>
 800216c:	f77f af26 	ble.w	8001fbc <_svfprintf_r+0xa10>
 8002170:	4623      	mov	r3, r4
 8002172:	f04f 0910 	mov.w	r9, #16
 8002176:	4644      	mov	r4, r8
 8002178:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 800217c:	e004      	b.n	8002188 <_svfprintf_r+0xbdc>
 800217e:	3608      	adds	r6, #8
 8002180:	3f10      	subs	r7, #16
 8002182:	2f10      	cmp	r7, #16
 8002184:	f77f af18 	ble.w	8001fb8 <_svfprintf_r+0xa0c>
 8002188:	3301      	adds	r3, #1
 800218a:	3510      	adds	r5, #16
 800218c:	2b07      	cmp	r3, #7
 800218e:	e886 0210 	stmia.w	r6, {r4, r9}
 8002192:	953b      	str	r5, [sp, #236]	; 0xec
 8002194:	933a      	str	r3, [sp, #232]	; 0xe8
 8002196:	ddf2      	ble.n	800217e <_svfprintf_r+0xbd2>
 8002198:	4640      	mov	r0, r8
 800219a:	4651      	mov	r1, sl
 800219c:	465a      	mov	r2, fp
 800219e:	f002 fd75 	bl	8004c8c <__ssprint_r>
 80021a2:	2800      	cmp	r0, #0
 80021a4:	f47f aad9 	bne.w	800175a <_svfprintf_r+0x1ae>
 80021a8:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80021aa:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 80021ac:	ae1f      	add	r6, sp, #124	; 0x7c
 80021ae:	e7e7      	b.n	8002180 <_svfprintf_r+0xbd4>
 80021b0:	2202      	movs	r2, #2
 80021b2:	e405      	b.n	80019c0 <_svfprintf_r+0x414>
 80021b4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80021b6:	4651      	mov	r1, sl
 80021b8:	465a      	mov	r2, fp
 80021ba:	f002 fd67 	bl	8004c8c <__ssprint_r>
 80021be:	2800      	cmp	r0, #0
 80021c0:	f47f aacb 	bne.w	800175a <_svfprintf_r+0x1ae>
 80021c4:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80021c6:	ae1f      	add	r6, sp, #124	; 0x7c
 80021c8:	9b40      	ldr	r3, [sp, #256]	; 0x100
 80021ca:	9810      	ldr	r0, [sp, #64]	; 0x40
 80021cc:	4298      	cmp	r0, r3
 80021ce:	dc45      	bgt.n	800225c <_svfprintf_r+0xcb0>
 80021d0:	9908      	ldr	r1, [sp, #32]
 80021d2:	07c9      	lsls	r1, r1, #31
 80021d4:	d442      	bmi.n	800225c <_svfprintf_r+0xcb0>
 80021d6:	9911      	ldr	r1, [sp, #68]	; 0x44
 80021d8:	9816      	ldr	r0, [sp, #88]	; 0x58
 80021da:	180a      	adds	r2, r1, r0
 80021dc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80021de:	9810      	ldr	r0, [sp, #64]	; 0x40
 80021e0:	1a8f      	subs	r7, r1, r2
 80021e2:	1ac3      	subs	r3, r0, r3
 80021e4:	42bb      	cmp	r3, r7
 80021e6:	bfb8      	it	lt
 80021e8:	461f      	movlt	r7, r3
 80021ea:	2f00      	cmp	r7, #0
 80021ec:	dd0a      	ble.n	8002204 <_svfprintf_r+0xc58>
 80021ee:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80021f0:	6032      	str	r2, [r6, #0]
 80021f2:	3401      	adds	r4, #1
 80021f4:	19ed      	adds	r5, r5, r7
 80021f6:	2c07      	cmp	r4, #7
 80021f8:	6077      	str	r7, [r6, #4]
 80021fa:	953b      	str	r5, [sp, #236]	; 0xec
 80021fc:	943a      	str	r4, [sp, #232]	; 0xe8
 80021fe:	f300 8256 	bgt.w	80026ae <_svfprintf_r+0x1102>
 8002202:	3608      	adds	r6, #8
 8002204:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
 8002208:	1bdf      	subs	r7, r3, r7
 800220a:	2f00      	cmp	r7, #0
 800220c:	f77f ad75 	ble.w	8001cfa <_svfprintf_r+0x74e>
 8002210:	2f10      	cmp	r7, #16
 8002212:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8002214:	f8df 8384 	ldr.w	r8, [pc, #900]	; 800259c <_svfprintf_r+0xff0>
 8002218:	f77f adc2 	ble.w	8001da0 <_svfprintf_r+0x7f4>
 800221c:	4623      	mov	r3, r4
 800221e:	f04f 0910 	mov.w	r9, #16
 8002222:	4644      	mov	r4, r8
 8002224:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8002228:	e004      	b.n	8002234 <_svfprintf_r+0xc88>
 800222a:	3608      	adds	r6, #8
 800222c:	3f10      	subs	r7, #16
 800222e:	2f10      	cmp	r7, #16
 8002230:	f77f adb4 	ble.w	8001d9c <_svfprintf_r+0x7f0>
 8002234:	3301      	adds	r3, #1
 8002236:	3510      	adds	r5, #16
 8002238:	2b07      	cmp	r3, #7
 800223a:	e886 0210 	stmia.w	r6, {r4, r9}
 800223e:	953b      	str	r5, [sp, #236]	; 0xec
 8002240:	933a      	str	r3, [sp, #232]	; 0xe8
 8002242:	ddf2      	ble.n	800222a <_svfprintf_r+0xc7e>
 8002244:	4640      	mov	r0, r8
 8002246:	4651      	mov	r1, sl
 8002248:	465a      	mov	r2, fp
 800224a:	f002 fd1f 	bl	8004c8c <__ssprint_r>
 800224e:	2800      	cmp	r0, #0
 8002250:	f47f aa83 	bne.w	800175a <_svfprintf_r+0x1ae>
 8002254:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8002256:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8002258:	ae1f      	add	r6, sp, #124	; 0x7c
 800225a:	e7e7      	b.n	800222c <_svfprintf_r+0xc80>
 800225c:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 800225e:	981a      	ldr	r0, [sp, #104]	; 0x68
 8002260:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8002262:	6070      	str	r0, [r6, #4]
 8002264:	3401      	adds	r4, #1
 8002266:	182d      	adds	r5, r5, r0
 8002268:	2c07      	cmp	r4, #7
 800226a:	6032      	str	r2, [r6, #0]
 800226c:	953b      	str	r5, [sp, #236]	; 0xec
 800226e:	943a      	str	r4, [sp, #232]	; 0xe8
 8002270:	f300 8211 	bgt.w	8002696 <_svfprintf_r+0x10ea>
 8002274:	3608      	adds	r6, #8
 8002276:	e7ae      	b.n	80021d6 <_svfprintf_r+0xc2a>
 8002278:	9b08      	ldr	r3, [sp, #32]
 800227a:	07da      	lsls	r2, r3, #31
 800227c:	f53f ae57 	bmi.w	8001f2e <_svfprintf_r+0x982>
 8002280:	3401      	adds	r4, #1
 8002282:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8002284:	3501      	adds	r5, #1
 8002286:	2301      	movs	r3, #1
 8002288:	2c07      	cmp	r4, #7
 800228a:	6032      	str	r2, [r6, #0]
 800228c:	6073      	str	r3, [r6, #4]
 800228e:	953b      	str	r5, [sp, #236]	; 0xec
 8002290:	943a      	str	r4, [sp, #232]	; 0xe8
 8002292:	f77f ae79 	ble.w	8001f88 <_svfprintf_r+0x9dc>
 8002296:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8002298:	4651      	mov	r1, sl
 800229a:	465a      	mov	r2, fp
 800229c:	f002 fcf6 	bl	8004c8c <__ssprint_r>
 80022a0:	2800      	cmp	r0, #0
 80022a2:	f47f aa5a 	bne.w	800175a <_svfprintf_r+0x1ae>
 80022a6:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80022a8:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80022aa:	ae1f      	add	r6, sp, #124	; 0x7c
 80022ac:	e66d      	b.n	8001f8a <_svfprintf_r+0x9de>
 80022ae:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80022b0:	4651      	mov	r1, sl
 80022b2:	465a      	mov	r2, fp
 80022b4:	f002 fcea 	bl	8004c8c <__ssprint_r>
 80022b8:	2800      	cmp	r0, #0
 80022ba:	f47f aa4e 	bne.w	800175a <_svfprintf_r+0x1ae>
 80022be:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80022c0:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80022c2:	ae1f      	add	r6, sp, #124	; 0x7c
 80022c4:	e64b      	b.n	8001f5e <_svfprintf_r+0x9b2>
 80022c6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80022c8:	4651      	mov	r1, sl
 80022ca:	465a      	mov	r2, fp
 80022cc:	f002 fcde 	bl	8004c8c <__ssprint_r>
 80022d0:	2800      	cmp	r0, #0
 80022d2:	f47f aa42 	bne.w	800175a <_svfprintf_r+0x1ae>
 80022d6:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80022d8:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80022da:	ae1f      	add	r6, sp, #124	; 0x7c
 80022dc:	e633      	b.n	8001f46 <_svfprintf_r+0x99a>
 80022de:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80022e0:	4651      	mov	r1, sl
 80022e2:	465a      	mov	r2, fp
 80022e4:	f002 fcd2 	bl	8004c8c <__ssprint_r>
 80022e8:	2800      	cmp	r0, #0
 80022ea:	f47f aa36 	bne.w	800175a <_svfprintf_r+0x1ae>
 80022ee:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80022f0:	ae1f      	add	r6, sp, #124	; 0x7c
 80022f2:	e4bb      	b.n	8001c6c <_svfprintf_r+0x6c0>
 80022f4:	f002 fb62 	bl	80049bc <__fpclassifyd>
 80022f8:	2800      	cmp	r0, #0
 80022fa:	f040 809e 	bne.w	800243a <_svfprintf_r+0xe8e>
 80022fe:	2203      	movs	r2, #3
 8002300:	9012      	str	r0, [sp, #72]	; 0x48
 8002302:	4ba3      	ldr	r3, [pc, #652]	; (8002590 <_svfprintf_r+0xfe4>)
 8002304:	920a      	str	r2, [sp, #40]	; 0x28
 8002306:	9815      	ldr	r0, [sp, #84]	; 0x54
 8002308:	4aa2      	ldr	r2, [pc, #648]	; (8002594 <_svfprintf_r+0xfe8>)
 800230a:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 800230e:	2847      	cmp	r0, #71	; 0x47
 8002310:	bfd8      	it	le
 8002312:	461a      	movle	r2, r3
 8002314:	9211      	str	r2, [sp, #68]	; 0x44
 8002316:	2303      	movs	r3, #3
 8002318:	9a08      	ldr	r2, [sp, #32]
 800231a:	930d      	str	r3, [sp, #52]	; 0x34
 800231c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800231e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002322:	9208      	str	r2, [sp, #32]
 8002324:	9316      	str	r3, [sp, #88]	; 0x58
 8002326:	f7ff baaf 	b.w	8001888 <_svfprintf_r+0x2dc>
 800232a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800232c:	2201      	movs	r2, #1
 800232e:	680b      	ldr	r3, [r1, #0]
 8002330:	e414      	b.n	8001b5c <_svfprintf_r+0x5b0>
 8002332:	9b08      	ldr	r3, [sp, #32]
 8002334:	065f      	lsls	r7, r3, #25
 8002336:	d56d      	bpl.n	8002414 <_svfprintf_r+0xe68>
 8002338:	980e      	ldr	r0, [sp, #56]	; 0x38
 800233a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800233c:	6803      	ldr	r3, [r0, #0]
 800233e:	3004      	adds	r0, #4
 8002340:	900e      	str	r0, [sp, #56]	; 0x38
 8002342:	8019      	strh	r1, [r3, #0]
 8002344:	f7ff b960 	b.w	8001608 <_svfprintf_r+0x5c>
 8002348:	990e      	ldr	r1, [sp, #56]	; 0x38
 800234a:	680b      	ldr	r3, [r1, #0]
 800234c:	e406      	b.n	8001b5c <_svfprintf_r+0x5b0>
 800234e:	46a0      	mov	r8, r4
 8002350:	461c      	mov	r4, r3
 8002352:	3401      	adds	r4, #1
 8002354:	19ed      	adds	r5, r5, r7
 8002356:	2c07      	cmp	r4, #7
 8002358:	f8c6 8000 	str.w	r8, [r6]
 800235c:	6077      	str	r7, [r6, #4]
 800235e:	953b      	str	r5, [sp, #236]	; 0xec
 8002360:	943a      	str	r4, [sp, #232]	; 0xe8
 8002362:	f73f af27 	bgt.w	80021b4 <_svfprintf_r+0xc08>
 8002366:	3608      	adds	r6, #8
 8002368:	e72e      	b.n	80021c8 <_svfprintf_r+0xc1c>
 800236a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800236c:	4651      	mov	r1, sl
 800236e:	465a      	mov	r2, fp
 8002370:	f002 fc8c 	bl	8004c8c <__ssprint_r>
 8002374:	2800      	cmp	r0, #0
 8002376:	f47f a9f0 	bne.w	800175a <_svfprintf_r+0x1ae>
 800237a:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 800237c:	ae1f      	add	r6, sp, #124	; 0x7c
 800237e:	e53d      	b.n	8001dfc <_svfprintf_r+0x850>
 8002380:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8002382:	4b85      	ldr	r3, [pc, #532]	; (8002598 <_svfprintf_r+0xfec>)
 8002384:	3401      	adds	r4, #1
 8002386:	6033      	str	r3, [r6, #0]
 8002388:	3501      	adds	r5, #1
 800238a:	2301      	movs	r3, #1
 800238c:	2c07      	cmp	r4, #7
 800238e:	6073      	str	r3, [r6, #4]
 8002390:	953b      	str	r5, [sp, #236]	; 0xec
 8002392:	943a      	str	r4, [sp, #232]	; 0xe8
 8002394:	f300 8139 	bgt.w	800260a <_svfprintf_r+0x105e>
 8002398:	3608      	adds	r6, #8
 800239a:	b92f      	cbnz	r7, 80023a8 <_svfprintf_r+0xdfc>
 800239c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800239e:	b91a      	cbnz	r2, 80023a8 <_svfprintf_r+0xdfc>
 80023a0:	9b08      	ldr	r3, [sp, #32]
 80023a2:	07d8      	lsls	r0, r3, #31
 80023a4:	f57f aca9 	bpl.w	8001cfa <_svfprintf_r+0x74e>
 80023a8:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80023aa:	991a      	ldr	r1, [sp, #104]	; 0x68
 80023ac:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80023ae:	6071      	str	r1, [r6, #4]
 80023b0:	3401      	adds	r4, #1
 80023b2:	186d      	adds	r5, r5, r1
 80023b4:	2c07      	cmp	r4, #7
 80023b6:	6030      	str	r0, [r6, #0]
 80023b8:	953b      	str	r5, [sp, #236]	; 0xec
 80023ba:	943a      	str	r4, [sp, #232]	; 0xe8
 80023bc:	f300 81d2 	bgt.w	8002764 <_svfprintf_r+0x11b8>
 80023c0:	3608      	adds	r6, #8
 80023c2:	427f      	negs	r7, r7
 80023c4:	2f00      	cmp	r7, #0
 80023c6:	f340 8141 	ble.w	800264c <_svfprintf_r+0x10a0>
 80023ca:	2f10      	cmp	r7, #16
 80023cc:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 800259c <_svfprintf_r+0xff0>
 80023d0:	f340 8183 	ble.w	80026da <_svfprintf_r+0x112e>
 80023d4:	4623      	mov	r3, r4
 80023d6:	f04f 0910 	mov.w	r9, #16
 80023da:	4644      	mov	r4, r8
 80023dc:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 80023e0:	e004      	b.n	80023ec <_svfprintf_r+0xe40>
 80023e2:	3608      	adds	r6, #8
 80023e4:	3f10      	subs	r7, #16
 80023e6:	2f10      	cmp	r7, #16
 80023e8:	f340 8175 	ble.w	80026d6 <_svfprintf_r+0x112a>
 80023ec:	3301      	adds	r3, #1
 80023ee:	3510      	adds	r5, #16
 80023f0:	2b07      	cmp	r3, #7
 80023f2:	e886 0210 	stmia.w	r6, {r4, r9}
 80023f6:	953b      	str	r5, [sp, #236]	; 0xec
 80023f8:	933a      	str	r3, [sp, #232]	; 0xe8
 80023fa:	ddf2      	ble.n	80023e2 <_svfprintf_r+0xe36>
 80023fc:	4640      	mov	r0, r8
 80023fe:	4651      	mov	r1, sl
 8002400:	465a      	mov	r2, fp
 8002402:	f002 fc43 	bl	8004c8c <__ssprint_r>
 8002406:	2800      	cmp	r0, #0
 8002408:	f47f a9a7 	bne.w	800175a <_svfprintf_r+0x1ae>
 800240c:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 800240e:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8002410:	ae1f      	add	r6, sp, #124	; 0x7c
 8002412:	e7e7      	b.n	80023e4 <_svfprintf_r+0xe38>
 8002414:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002416:	980c      	ldr	r0, [sp, #48]	; 0x30
 8002418:	6813      	ldr	r3, [r2, #0]
 800241a:	3204      	adds	r2, #4
 800241c:	920e      	str	r2, [sp, #56]	; 0x38
 800241e:	6018      	str	r0, [r3, #0]
 8002420:	f7ff b8f2 	b.w	8001608 <_svfprintf_r+0x5c>
 8002424:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8002426:	4651      	mov	r1, sl
 8002428:	465a      	mov	r2, fp
 800242a:	f002 fc2f 	bl	8004c8c <__ssprint_r>
 800242e:	2800      	cmp	r0, #0
 8002430:	f47f a993 	bne.w	800175a <_svfprintf_r+0x1ae>
 8002434:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8002436:	ae1f      	add	r6, sp, #124	; 0x7c
 8002438:	e4f5      	b.n	8001e26 <_svfprintf_r+0x87a>
 800243a:	1c60      	adds	r0, r4, #1
 800243c:	f000 80f1 	beq.w	8002622 <_svfprintf_r+0x1076>
 8002440:	9915      	ldr	r1, [sp, #84]	; 0x54
 8002442:	2967      	cmp	r1, #103	; 0x67
 8002444:	bf18      	it	ne
 8002446:	2947      	cmpne	r1, #71	; 0x47
 8002448:	bf14      	ite	ne
 800244a:	2300      	movne	r3, #0
 800244c:	2301      	moveq	r3, #1
 800244e:	bf18      	it	ne
 8002450:	930a      	strne	r3, [sp, #40]	; 0x28
 8002452:	d104      	bne.n	800245e <_svfprintf_r+0xeb2>
 8002454:	2c00      	cmp	r4, #0
 8002456:	f000 81ad 	beq.w	80027b4 <_svfprintf_r+0x1208>
 800245a:	2201      	movs	r2, #1
 800245c:	920a      	str	r2, [sp, #40]	; 0x28
 800245e:	9808      	ldr	r0, [sp, #32]
 8002460:	2d00      	cmp	r5, #0
 8002462:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8002466:	9008      	str	r0, [sp, #32]
 8002468:	f2c0 8189 	blt.w	800277e <_svfprintf_r+0x11d2>
 800246c:	2200      	movs	r2, #0
 800246e:	9212      	str	r2, [sp, #72]	; 0x48
 8002470:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8002472:	9815      	ldr	r0, [sp, #84]	; 0x54
 8002474:	f1a3 0166 	sub.w	r1, r3, #102	; 0x66
 8002478:	424b      	negs	r3, r1
 800247a:	eb43 0301 	adc.w	r3, r3, r1
 800247e:	469c      	mov	ip, r3
 8002480:	2846      	cmp	r0, #70	; 0x46
 8002482:	bf08      	it	eq
 8002484:	f04c 0c01 	orreq.w	ip, ip, #1
 8002488:	930d      	str	r3, [sp, #52]	; 0x34
 800248a:	46a1      	mov	r9, r4
 800248c:	2103      	movs	r1, #3
 800248e:	f1bc 0f00 	cmp.w	ip, #0
 8002492:	d107      	bne.n	80024a4 <_svfprintf_r+0xef8>
 8002494:	2865      	cmp	r0, #101	; 0x65
 8002496:	bf18      	it	ne
 8002498:	2845      	cmpne	r0, #69	; 0x45
 800249a:	bf0c      	ite	eq
 800249c:	f104 0901 	addeq.w	r9, r4, #1
 80024a0:	46a1      	movne	r9, r4
 80024a2:	2102      	movs	r1, #2
 80024a4:	e88d 0202 	stmia.w	sp, {r1, r9}
 80024a8:	a940      	add	r1, sp, #256	; 0x100
 80024aa:	9102      	str	r1, [sp, #8]
 80024ac:	a941      	add	r1, sp, #260	; 0x104
 80024ae:	9103      	str	r1, [sp, #12]
 80024b0:	4642      	mov	r2, r8
 80024b2:	a942      	add	r1, sp, #264	; 0x108
 80024b4:	462b      	mov	r3, r5
 80024b6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80024b8:	9104      	str	r1, [sp, #16]
 80024ba:	f8cd c018 	str.w	ip, [sp, #24]
 80024be:	f000 fa6b 	bl	8002998 <_dtoa_r>
 80024c2:	9915      	ldr	r1, [sp, #84]	; 0x54
 80024c4:	9011      	str	r0, [sp, #68]	; 0x44
 80024c6:	2947      	cmp	r1, #71	; 0x47
 80024c8:	bf18      	it	ne
 80024ca:	2967      	cmpne	r1, #103	; 0x67
 80024cc:	f8dd c018 	ldr.w	ip, [sp, #24]
 80024d0:	d104      	bne.n	80024dc <_svfprintf_r+0xf30>
 80024d2:	9a08      	ldr	r2, [sp, #32]
 80024d4:	07d2      	lsls	r2, r2, #31
 80024d6:	bf58      	it	pl
 80024d8:	9f42      	ldrpl	r7, [sp, #264]	; 0x108
 80024da:	d515      	bpl.n	8002508 <_svfprintf_r+0xf5c>
 80024dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80024de:	eb03 0709 	add.w	r7, r3, r9
 80024e2:	f1bc 0f00 	cmp.w	ip, #0
 80024e6:	d005      	beq.n	80024f4 <_svfprintf_r+0xf48>
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	2b30      	cmp	r3, #48	; 0x30
 80024ec:	f000 8165 	beq.w	80027ba <_svfprintf_r+0x120e>
 80024f0:	9b40      	ldr	r3, [sp, #256]	; 0x100
 80024f2:	18ff      	adds	r7, r7, r3
 80024f4:	4640      	mov	r0, r8
 80024f6:	4629      	mov	r1, r5
 80024f8:	2200      	movs	r2, #0
 80024fa:	2300      	movs	r3, #0
 80024fc:	f003 ff84 	bl	8006408 <__aeabi_dcmpeq>
 8002500:	2800      	cmp	r0, #0
 8002502:	f000 8117 	beq.w	8002734 <_svfprintf_r+0x1188>
 8002506:	9742      	str	r7, [sp, #264]	; 0x108
 8002508:	9811      	ldr	r0, [sp, #68]	; 0x44
 800250a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800250c:	1a3f      	subs	r7, r7, r0
 800250e:	9710      	str	r7, [sp, #64]	; 0x40
 8002510:	2900      	cmp	r1, #0
 8002512:	f000 80f9 	beq.w	8002708 <_svfprintf_r+0x115c>
 8002516:	9940      	ldr	r1, [sp, #256]	; 0x100
 8002518:	1ccb      	adds	r3, r1, #3
 800251a:	db02      	blt.n	8002522 <_svfprintf_r+0xf76>
 800251c:	428c      	cmp	r4, r1
 800251e:	f280 80fa 	bge.w	8002716 <_svfprintf_r+0x116a>
 8002522:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8002524:	3a02      	subs	r2, #2
 8002526:	9215      	str	r2, [sp, #84]	; 0x54
 8002528:	3901      	subs	r1, #1
 800252a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800252c:	9140      	str	r1, [sp, #256]	; 0x100
 800252e:	2900      	cmp	r1, #0
 8002530:	f88d 00f0 	strb.w	r0, [sp, #240]	; 0xf0
 8002534:	f2c0 815d 	blt.w	80027f2 <_svfprintf_r+0x1246>
 8002538:	232b      	movs	r3, #43	; 0x2b
 800253a:	f88d 30f1 	strb.w	r3, [sp, #241]	; 0xf1
 800253e:	2909      	cmp	r1, #9
 8002540:	f340 8122 	ble.w	8002788 <_svfprintf_r+0x11dc>
 8002544:	f10d 07ff 	add.w	r7, sp, #255	; 0xff
 8002548:	f246 6467 	movw	r4, #26215	; 0x6667
 800254c:	4638      	mov	r0, r7
 800254e:	f2c6 6466 	movt	r4, #26214	; 0x6666
 8002552:	fb84 3201 	smull	r3, r2, r4, r1
 8002556:	17cb      	asrs	r3, r1, #31
 8002558:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 800255c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8002560:	eba1 0242 	sub.w	r2, r1, r2, lsl #1
 8002564:	3230      	adds	r2, #48	; 0x30
 8002566:	2b09      	cmp	r3, #9
 8002568:	4605      	mov	r5, r0
 800256a:	4619      	mov	r1, r3
 800256c:	f800 2d01 	strb.w	r2, [r0, #-1]!
 8002570:	dcef      	bgt.n	8002552 <_svfprintf_r+0xfa6>
 8002572:	3130      	adds	r1, #48	; 0x30
 8002574:	1eaa      	subs	r2, r5, #2
 8002576:	b2c9      	uxtb	r1, r1
 8002578:	42ba      	cmp	r2, r7
 800257a:	f805 1c02 	strb.w	r1, [r5, #-2]
 800257e:	bf28      	it	cs
 8002580:	f10d 01f2 	addcs.w	r1, sp, #242	; 0xf2
 8002584:	d213      	bcs.n	80025ae <_svfprintf_r+0x1002>
 8002586:	f10d 03f2 	add.w	r3, sp, #242	; 0xf2
 800258a:	f10d 00fe 	add.w	r0, sp, #254	; 0xfe
 800258e:	e009      	b.n	80025a4 <_svfprintf_r+0xff8>
 8002590:	08006894 	.word	0x08006894
 8002594:	08006898 	.word	0x08006898
 8002598:	080068cc 	.word	0x080068cc
 800259c:	08006670 	.word	0x08006670
 80025a0:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 80025a4:	f803 1b01 	strb.w	r1, [r3], #1
 80025a8:	4282      	cmp	r2, r0
 80025aa:	4619      	mov	r1, r3
 80025ac:	d1f8      	bne.n	80025a0 <_svfprintf_r+0xff4>
 80025ae:	9810      	ldr	r0, [sp, #64]	; 0x40
 80025b0:	ab3c      	add	r3, sp, #240	; 0xf0
 80025b2:	1acb      	subs	r3, r1, r3
 80025b4:	931b      	str	r3, [sp, #108]	; 0x6c
 80025b6:	2801      	cmp	r0, #1
 80025b8:	4403      	add	r3, r0
 80025ba:	930d      	str	r3, [sp, #52]	; 0x34
 80025bc:	f340 8125 	ble.w	800280a <_svfprintf_r+0x125e>
 80025c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80025c2:	3301      	adds	r3, #1
 80025c4:	ea23 70e3 	bic.w	r0, r3, r3, asr #31
 80025c8:	2100      	movs	r1, #0
 80025ca:	930d      	str	r3, [sp, #52]	; 0x34
 80025cc:	900a      	str	r0, [sp, #40]	; 0x28
 80025ce:	9116      	str	r1, [sp, #88]	; 0x58
 80025d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80025d2:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	f43f a956 	beq.w	8001888 <_svfprintf_r+0x2dc>
 80025dc:	232d      	movs	r3, #45	; 0x2d
 80025de:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
 80025e2:	2300      	movs	r3, #0
 80025e4:	9312      	str	r3, [sp, #72]	; 0x48
 80025e6:	f7ff b950 	b.w	800188a <_svfprintf_r+0x2de>
 80025ea:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80025ec:	2140      	movs	r1, #64	; 0x40
 80025ee:	f001 fa57 	bl	8003aa0 <_malloc_r>
 80025f2:	f8ca 0000 	str.w	r0, [sl]
 80025f6:	f8ca 0010 	str.w	r0, [sl, #16]
 80025fa:	2800      	cmp	r0, #0
 80025fc:	f000 812b 	beq.w	8002856 <_svfprintf_r+0x12aa>
 8002600:	2340      	movs	r3, #64	; 0x40
 8002602:	f8ca 3014 	str.w	r3, [sl, #20]
 8002606:	f7fe bfec 	b.w	80015e2 <_svfprintf_r+0x36>
 800260a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800260c:	4651      	mov	r1, sl
 800260e:	465a      	mov	r2, fp
 8002610:	f002 fb3c 	bl	8004c8c <__ssprint_r>
 8002614:	2800      	cmp	r0, #0
 8002616:	f47f a8a0 	bne.w	800175a <_svfprintf_r+0x1ae>
 800261a:	9f40      	ldr	r7, [sp, #256]	; 0x100
 800261c:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 800261e:	ae1f      	add	r6, sp, #124	; 0x7c
 8002620:	e6bb      	b.n	800239a <_svfprintf_r+0xdee>
 8002622:	9815      	ldr	r0, [sp, #84]	; 0x54
 8002624:	2847      	cmp	r0, #71	; 0x47
 8002626:	bf18      	it	ne
 8002628:	2867      	cmpne	r0, #103	; 0x67
 800262a:	bf14      	ite	ne
 800262c:	2000      	movne	r0, #0
 800262e:	2001      	moveq	r0, #1
 8002630:	900a      	str	r0, [sp, #40]	; 0x28
 8002632:	2406      	movs	r4, #6
 8002634:	e713      	b.n	800245e <_svfprintf_r+0xeb2>
 8002636:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8002638:	4651      	mov	r1, sl
 800263a:	465a      	mov	r2, fp
 800263c:	f002 fb26 	bl	8004c8c <__ssprint_r>
 8002640:	2800      	cmp	r0, #0
 8002642:	f47f a88a 	bne.w	800175a <_svfprintf_r+0x1ae>
 8002646:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8002648:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 800264a:	ae1f      	add	r6, sp, #124	; 0x7c
 800264c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800264e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002650:	6072      	str	r2, [r6, #4]
 8002652:	3401      	adds	r4, #1
 8002654:	18ad      	adds	r5, r5, r2
 8002656:	2c07      	cmp	r4, #7
 8002658:	6033      	str	r3, [r6, #0]
 800265a:	953b      	str	r5, [sp, #236]	; 0xec
 800265c:	943a      	str	r4, [sp, #232]	; 0xe8
 800265e:	f77f ab4b 	ble.w	8001cf8 <_svfprintf_r+0x74c>
 8002662:	f7ff bba6 	b.w	8001db2 <_svfprintf_r+0x806>
 8002666:	f002 fae1 	bl	8004c2c <strlen>
 800266a:	900d      	str	r0, [sp, #52]	; 0x34
 800266c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8002670:	9512      	str	r5, [sp, #72]	; 0x48
 8002672:	900a      	str	r0, [sp, #40]	; 0x28
 8002674:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 8002678:	970e      	str	r7, [sp, #56]	; 0x38
 800267a:	9516      	str	r5, [sp, #88]	; 0x58
 800267c:	f7ff b904 	b.w	8001888 <_svfprintf_r+0x2dc>
 8002680:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8002682:	4651      	mov	r1, sl
 8002684:	465a      	mov	r2, fp
 8002686:	f002 fb01 	bl	8004c8c <__ssprint_r>
 800268a:	2800      	cmp	r0, #0
 800268c:	f47f a865 	bne.w	800175a <_svfprintf_r+0x1ae>
 8002690:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8002692:	ae1f      	add	r6, sp, #124	; 0x7c
 8002694:	e4f1      	b.n	800207a <_svfprintf_r+0xace>
 8002696:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8002698:	4651      	mov	r1, sl
 800269a:	465a      	mov	r2, fp
 800269c:	f002 faf6 	bl	8004c8c <__ssprint_r>
 80026a0:	2800      	cmp	r0, #0
 80026a2:	f47f a85a 	bne.w	800175a <_svfprintf_r+0x1ae>
 80026a6:	9b40      	ldr	r3, [sp, #256]	; 0x100
 80026a8:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80026aa:	ae1f      	add	r6, sp, #124	; 0x7c
 80026ac:	e593      	b.n	80021d6 <_svfprintf_r+0xc2a>
 80026ae:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80026b0:	4651      	mov	r1, sl
 80026b2:	465a      	mov	r2, fp
 80026b4:	f002 faea 	bl	8004c8c <__ssprint_r>
 80026b8:	2800      	cmp	r0, #0
 80026ba:	f47f a84e 	bne.w	800175a <_svfprintf_r+0x1ae>
 80026be:	9b40      	ldr	r3, [sp, #256]	; 0x100
 80026c0:	9910      	ldr	r1, [sp, #64]	; 0x40
 80026c2:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80026c4:	1acb      	subs	r3, r1, r3
 80026c6:	ae1f      	add	r6, sp, #124	; 0x7c
 80026c8:	e59c      	b.n	8002204 <_svfprintf_r+0xc58>
 80026ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80026cc:	ebc3 030b 	rsb	r3, r3, fp
 80026d0:	930d      	str	r3, [sp, #52]	; 0x34
 80026d2:	f7ff b8cf 	b.w	8001874 <_svfprintf_r+0x2c8>
 80026d6:	46a0      	mov	r8, r4
 80026d8:	461c      	mov	r4, r3
 80026da:	3401      	adds	r4, #1
 80026dc:	19ed      	adds	r5, r5, r7
 80026de:	2c07      	cmp	r4, #7
 80026e0:	f8c6 8000 	str.w	r8, [r6]
 80026e4:	6077      	str	r7, [r6, #4]
 80026e6:	953b      	str	r5, [sp, #236]	; 0xec
 80026e8:	943a      	str	r4, [sp, #232]	; 0xe8
 80026ea:	dca4      	bgt.n	8002636 <_svfprintf_r+0x108a>
 80026ec:	3608      	adds	r6, #8
 80026ee:	e7ad      	b.n	800264c <_svfprintf_r+0x10a0>
 80026f0:	2c06      	cmp	r4, #6
 80026f2:	bf28      	it	cs
 80026f4:	2406      	movcs	r4, #6
 80026f6:	495f      	ldr	r1, [pc, #380]	; (8002874 <_svfprintf_r+0x12c8>)
 80026f8:	940d      	str	r4, [sp, #52]	; 0x34
 80026fa:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
 80026fe:	900a      	str	r0, [sp, #40]	; 0x28
 8002700:	970e      	str	r7, [sp, #56]	; 0x38
 8002702:	9111      	str	r1, [sp, #68]	; 0x44
 8002704:	f7ff ba01 	b.w	8001b0a <_svfprintf_r+0x55e>
 8002708:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800270a:	2b65      	cmp	r3, #101	; 0x65
 800270c:	dd6f      	ble.n	80027ee <_svfprintf_r+0x1242>
 800270e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002710:	9940      	ldr	r1, [sp, #256]	; 0x100
 8002712:	2a00      	cmp	r2, #0
 8002714:	d15e      	bne.n	80027d4 <_svfprintf_r+0x1228>
 8002716:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002718:	428a      	cmp	r2, r1
 800271a:	dc3d      	bgt.n	8002798 <_svfprintf_r+0x11ec>
 800271c:	9b08      	ldr	r3, [sp, #32]
 800271e:	07da      	lsls	r2, r3, #31
 8002720:	d56c      	bpl.n	80027fc <_svfprintf_r+0x1250>
 8002722:	1c4b      	adds	r3, r1, #1
 8002724:	ea23 70e3 	bic.w	r0, r3, r3, asr #31
 8002728:	2267      	movs	r2, #103	; 0x67
 800272a:	930d      	str	r3, [sp, #52]	; 0x34
 800272c:	900a      	str	r0, [sp, #40]	; 0x28
 800272e:	9215      	str	r2, [sp, #84]	; 0x54
 8002730:	9116      	str	r1, [sp, #88]	; 0x58
 8002732:	e74d      	b.n	80025d0 <_svfprintf_r+0x1024>
 8002734:	9b42      	ldr	r3, [sp, #264]	; 0x108
 8002736:	429f      	cmp	r7, r3
 8002738:	bf98      	it	ls
 800273a:	461f      	movls	r7, r3
 800273c:	f67f aee4 	bls.w	8002508 <_svfprintf_r+0xf5c>
 8002740:	2230      	movs	r2, #48	; 0x30
 8002742:	f803 2b01 	strb.w	r2, [r3], #1
 8002746:	42bb      	cmp	r3, r7
 8002748:	9342      	str	r3, [sp, #264]	; 0x108
 800274a:	d1fa      	bne.n	8002742 <_svfprintf_r+0x1196>
 800274c:	e6dc      	b.n	8002508 <_svfprintf_r+0xf5c>
 800274e:	ea24 72e4 	bic.w	r2, r4, r4, asr #31
 8002752:	9012      	str	r0, [sp, #72]	; 0x48
 8002754:	920a      	str	r2, [sp, #40]	; 0x28
 8002756:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 800275a:	970e      	str	r7, [sp, #56]	; 0x38
 800275c:	940d      	str	r4, [sp, #52]	; 0x34
 800275e:	9016      	str	r0, [sp, #88]	; 0x58
 8002760:	f7ff b892 	b.w	8001888 <_svfprintf_r+0x2dc>
 8002764:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8002766:	4651      	mov	r1, sl
 8002768:	465a      	mov	r2, fp
 800276a:	f002 fa8f 	bl	8004c8c <__ssprint_r>
 800276e:	2800      	cmp	r0, #0
 8002770:	f47e aff3 	bne.w	800175a <_svfprintf_r+0x1ae>
 8002774:	9f40      	ldr	r7, [sp, #256]	; 0x100
 8002776:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8002778:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 800277a:	ae1f      	add	r6, sp, #124	; 0x7c
 800277c:	e621      	b.n	80023c2 <_svfprintf_r+0xe16>
 800277e:	212d      	movs	r1, #45	; 0x2d
 8002780:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8002784:	9112      	str	r1, [sp, #72]	; 0x48
 8002786:	e673      	b.n	8002470 <_svfprintf_r+0xec4>
 8002788:	3130      	adds	r1, #48	; 0x30
 800278a:	2330      	movs	r3, #48	; 0x30
 800278c:	f88d 10f3 	strb.w	r1, [sp, #243]	; 0xf3
 8002790:	f88d 30f2 	strb.w	r3, [sp, #242]	; 0xf2
 8002794:	a93d      	add	r1, sp, #244	; 0xf4
 8002796:	e70a      	b.n	80025ae <_svfprintf_r+0x1002>
 8002798:	2900      	cmp	r1, #0
 800279a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800279c:	bfd4      	ite	le
 800279e:	f1c1 0302 	rsble	r3, r1, #2
 80027a2:	2301      	movgt	r3, #1
 80027a4:	181b      	adds	r3, r3, r0
 80027a6:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 80027aa:	930d      	str	r3, [sp, #52]	; 0x34
 80027ac:	2367      	movs	r3, #103	; 0x67
 80027ae:	920a      	str	r2, [sp, #40]	; 0x28
 80027b0:	9315      	str	r3, [sp, #84]	; 0x54
 80027b2:	e7bd      	b.n	8002730 <_svfprintf_r+0x1184>
 80027b4:	2401      	movs	r4, #1
 80027b6:	940a      	str	r4, [sp, #40]	; 0x28
 80027b8:	e651      	b.n	800245e <_svfprintf_r+0xeb2>
 80027ba:	4640      	mov	r0, r8
 80027bc:	4629      	mov	r1, r5
 80027be:	2200      	movs	r2, #0
 80027c0:	2300      	movs	r3, #0
 80027c2:	f003 fe21 	bl	8006408 <__aeabi_dcmpeq>
 80027c6:	2800      	cmp	r0, #0
 80027c8:	f47f ae92 	bne.w	80024f0 <_svfprintf_r+0xf44>
 80027cc:	f1c9 0301 	rsb	r3, r9, #1
 80027d0:	9340      	str	r3, [sp, #256]	; 0x100
 80027d2:	e68e      	b.n	80024f2 <_svfprintf_r+0xf46>
 80027d4:	2900      	cmp	r1, #0
 80027d6:	dd38      	ble.n	800284a <_svfprintf_r+0x129e>
 80027d8:	bb74      	cbnz	r4, 8002838 <_svfprintf_r+0x128c>
 80027da:	9b08      	ldr	r3, [sp, #32]
 80027dc:	07dd      	lsls	r5, r3, #31
 80027de:	d42b      	bmi.n	8002838 <_svfprintf_r+0x128c>
 80027e0:	ea21 70e1 	bic.w	r0, r1, r1, asr #31
 80027e4:	2266      	movs	r2, #102	; 0x66
 80027e6:	900a      	str	r0, [sp, #40]	; 0x28
 80027e8:	910d      	str	r1, [sp, #52]	; 0x34
 80027ea:	9215      	str	r2, [sp, #84]	; 0x54
 80027ec:	e7a0      	b.n	8002730 <_svfprintf_r+0x1184>
 80027ee:	9940      	ldr	r1, [sp, #256]	; 0x100
 80027f0:	e69a      	b.n	8002528 <_svfprintf_r+0xf7c>
 80027f2:	232d      	movs	r3, #45	; 0x2d
 80027f4:	4249      	negs	r1, r1
 80027f6:	f88d 30f1 	strb.w	r3, [sp, #241]	; 0xf1
 80027fa:	e6a0      	b.n	800253e <_svfprintf_r+0xf92>
 80027fc:	ea21 70e1 	bic.w	r0, r1, r1, asr #31
 8002800:	2267      	movs	r2, #103	; 0x67
 8002802:	900a      	str	r0, [sp, #40]	; 0x28
 8002804:	910d      	str	r1, [sp, #52]	; 0x34
 8002806:	9215      	str	r2, [sp, #84]	; 0x54
 8002808:	e792      	b.n	8002730 <_svfprintf_r+0x1184>
 800280a:	9908      	ldr	r1, [sp, #32]
 800280c:	f011 0301 	ands.w	r3, r1, #1
 8002810:	f47f aed6 	bne.w	80025c0 <_svfprintf_r+0x1014>
 8002814:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002816:	9316      	str	r3, [sp, #88]	; 0x58
 8002818:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 800281c:	920a      	str	r2, [sp, #40]	; 0x28
 800281e:	e6d7      	b.n	80025d0 <_svfprintf_r+0x1024>
 8002820:	990e      	ldr	r1, [sp, #56]	; 0x38
 8002822:	680c      	ldr	r4, [r1, #0]
 8002824:	1d0b      	adds	r3, r1, #4
 8002826:	2c00      	cmp	r4, #0
 8002828:	bfbc      	itt	lt
 800282a:	930e      	strlt	r3, [sp, #56]	; 0x38
 800282c:	f04f 34ff 	movlt.w	r4, #4294967295	; 0xffffffff
 8002830:	f6bf a985 	bge.w	8001b3e <_svfprintf_r+0x592>
 8002834:	f7fe bf18 	b.w	8001668 <_svfprintf_r+0xbc>
 8002838:	3401      	adds	r4, #1
 800283a:	190c      	adds	r4, r1, r4
 800283c:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
 8002840:	2066      	movs	r0, #102	; 0x66
 8002842:	940d      	str	r4, [sp, #52]	; 0x34
 8002844:	930a      	str	r3, [sp, #40]	; 0x28
 8002846:	9015      	str	r0, [sp, #84]	; 0x54
 8002848:	e772      	b.n	8002730 <_svfprintf_r+0x1184>
 800284a:	b914      	cbnz	r4, 8002852 <_svfprintf_r+0x12a6>
 800284c:	9a08      	ldr	r2, [sp, #32]
 800284e:	07d0      	lsls	r0, r2, #31
 8002850:	d509      	bpl.n	8002866 <_svfprintf_r+0x12ba>
 8002852:	3402      	adds	r4, #2
 8002854:	e7f2      	b.n	800283c <_svfprintf_r+0x1290>
 8002856:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8002858:	230c      	movs	r3, #12
 800285a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800285e:	600b      	str	r3, [r1, #0]
 8002860:	920c      	str	r2, [sp, #48]	; 0x30
 8002862:	f7fe bf83 	b.w	800176c <_svfprintf_r+0x1c0>
 8002866:	2001      	movs	r0, #1
 8002868:	2266      	movs	r2, #102	; 0x66
 800286a:	900a      	str	r0, [sp, #40]	; 0x28
 800286c:	9215      	str	r2, [sp, #84]	; 0x54
 800286e:	900d      	str	r0, [sp, #52]	; 0x34
 8002870:	e75e      	b.n	8002730 <_svfprintf_r+0x1184>
 8002872:	bf00      	nop
 8002874:	080068c4 	.word	0x080068c4

08002878 <quorem>:
 8002878:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800287c:	6903      	ldr	r3, [r0, #16]
 800287e:	690d      	ldr	r5, [r1, #16]
 8002880:	429d      	cmp	r5, r3
 8002882:	4681      	mov	r9, r0
 8002884:	f300 8084 	bgt.w	8002990 <quorem+0x118>
 8002888:	1ceb      	adds	r3, r5, #3
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	18cf      	adds	r7, r1, r3
 800288e:	18c3      	adds	r3, r0, r3
 8002890:	687e      	ldr	r6, [r7, #4]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	3601      	adds	r6, #1
 8002896:	fbb3 f6f6 	udiv	r6, r3, r6
 800289a:	f101 0414 	add.w	r4, r1, #20
 800289e:	3d01      	subs	r5, #1
 80028a0:	3704      	adds	r7, #4
 80028a2:	f100 0814 	add.w	r8, r0, #20
 80028a6:	2e00      	cmp	r6, #0
 80028a8:	d03c      	beq.n	8002924 <quorem+0xac>
 80028aa:	f04f 0e00 	mov.w	lr, #0
 80028ae:	4642      	mov	r2, r8
 80028b0:	4623      	mov	r3, r4
 80028b2:	46f4      	mov	ip, lr
 80028b4:	f853 bb04 	ldr.w	fp, [r3], #4
 80028b8:	6810      	ldr	r0, [r2, #0]
 80028ba:	fa1f fa8b 	uxth.w	sl, fp
 80028be:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
 80028c2:	fb06 ea0a 	mla	sl, r6, sl, lr
 80028c6:	fb06 fe0b 	mul.w	lr, r6, fp
 80028ca:	eb0e 4e1a 	add.w	lr, lr, sl, lsr #16
 80028ce:	fa1c fc80 	uxtah	ip, ip, r0
 80028d2:	fa1f fb8e 	uxth.w	fp, lr
 80028d6:	fa1f fa8a 	uxth.w	sl, sl
 80028da:	ebca 0c0c 	rsb	ip, sl, ip
 80028de:	ebcb 4010 	rsb	r0, fp, r0, lsr #16
 80028e2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80028e6:	fa1f fc8c 	uxth.w	ip, ip
 80028ea:	ea4c 4c00 	orr.w	ip, ip, r0, lsl #16
 80028ee:	429f      	cmp	r7, r3
 80028f0:	f842 cb04 	str.w	ip, [r2], #4
 80028f4:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 80028f8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80028fc:	d2da      	bcs.n	80028b4 <quorem+0x3c>
 80028fe:	1d2a      	adds	r2, r5, #4
 8002900:	eb09 0382 	add.w	r3, r9, r2, lsl #2
 8002904:	6858      	ldr	r0, [r3, #4]
 8002906:	b968      	cbnz	r0, 8002924 <quorem+0xac>
 8002908:	4598      	cmp	r8, r3
 800290a:	d209      	bcs.n	8002920 <quorem+0xa8>
 800290c:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 8002910:	b112      	cbz	r2, 8002918 <quorem+0xa0>
 8002912:	e005      	b.n	8002920 <quorem+0xa8>
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	b91a      	cbnz	r2, 8002920 <quorem+0xa8>
 8002918:	3b04      	subs	r3, #4
 800291a:	3d01      	subs	r5, #1
 800291c:	4598      	cmp	r8, r3
 800291e:	d3f9      	bcc.n	8002914 <quorem+0x9c>
 8002920:	f8c9 5010 	str.w	r5, [r9, #16]
 8002924:	4648      	mov	r0, r9
 8002926:	f001 fe4f 	bl	80045c8 <__mcmp>
 800292a:	2800      	cmp	r0, #0
 800292c:	db2d      	blt.n	800298a <quorem+0x112>
 800292e:	3601      	adds	r6, #1
 8002930:	4643      	mov	r3, r8
 8002932:	f04f 0c00 	mov.w	ip, #0
 8002936:	f854 2b04 	ldr.w	r2, [r4], #4
 800293a:	6818      	ldr	r0, [r3, #0]
 800293c:	b291      	uxth	r1, r2
 800293e:	fa1f fa80 	uxth.w	sl, r0
 8002942:	0c12      	lsrs	r2, r2, #16
 8002944:	ebc1 010a 	rsb	r1, r1, sl
 8002948:	4461      	add	r1, ip
 800294a:	ebc2 4210 	rsb	r2, r2, r0, lsr #16
 800294e:	eb02 4221 	add.w	r2, r2, r1, asr #16
 8002952:	b289      	uxth	r1, r1
 8002954:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8002958:	42a7      	cmp	r7, r4
 800295a:	f843 1b04 	str.w	r1, [r3], #4
 800295e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8002962:	d2e8      	bcs.n	8002936 <quorem+0xbe>
 8002964:	1d2a      	adds	r2, r5, #4
 8002966:	eb09 0382 	add.w	r3, r9, r2, lsl #2
 800296a:	6859      	ldr	r1, [r3, #4]
 800296c:	b969      	cbnz	r1, 800298a <quorem+0x112>
 800296e:	4598      	cmp	r8, r3
 8002970:	d209      	bcs.n	8002986 <quorem+0x10e>
 8002972:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 8002976:	b112      	cbz	r2, 800297e <quorem+0x106>
 8002978:	e005      	b.n	8002986 <quorem+0x10e>
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	b91a      	cbnz	r2, 8002986 <quorem+0x10e>
 800297e:	3b04      	subs	r3, #4
 8002980:	3d01      	subs	r5, #1
 8002982:	4598      	cmp	r8, r3
 8002984:	d3f9      	bcc.n	800297a <quorem+0x102>
 8002986:	f8c9 5010 	str.w	r5, [r9, #16]
 800298a:	4630      	mov	r0, r6
 800298c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002990:	2000      	movs	r0, #0
 8002992:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002996:	bf00      	nop

08002998 <_dtoa_r>:
 8002998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800299c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800299e:	b09d      	sub	sp, #116	; 0x74
 80029a0:	4607      	mov	r7, r0
 80029a2:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80029a4:	4692      	mov	sl, r2
 80029a6:	469b      	mov	fp, r3
 80029a8:	b141      	cbz	r1, 80029bc <_dtoa_r+0x24>
 80029aa:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80029ac:	2201      	movs	r2, #1
 80029ae:	409a      	lsls	r2, r3
 80029b0:	604b      	str	r3, [r1, #4]
 80029b2:	608a      	str	r2, [r1, #8]
 80029b4:	f001 fbd4 	bl	8004160 <_Bfree>
 80029b8:	2300      	movs	r3, #0
 80029ba:	643b      	str	r3, [r7, #64]	; 0x40
 80029bc:	f1bb 0500 	subs.w	r5, fp, #0
 80029c0:	f2c0 80df 	blt.w	8002b82 <_dtoa_r+0x1ea>
 80029c4:	2300      	movs	r3, #0
 80029c6:	6023      	str	r3, [r4, #0]
 80029c8:	2300      	movs	r3, #0
 80029ca:	461a      	mov	r2, r3
 80029cc:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 80029d0:	f6c7 72f0 	movt	r2, #32752	; 0x7ff0
 80029d4:	402b      	ands	r3, r5
 80029d6:	4293      	cmp	r3, r2
 80029d8:	f000 80be 	beq.w	8002b58 <_dtoa_r+0x1c0>
 80029dc:	4650      	mov	r0, sl
 80029de:	4659      	mov	r1, fp
 80029e0:	2200      	movs	r2, #0
 80029e2:	2300      	movs	r3, #0
 80029e4:	46d0      	mov	r8, sl
 80029e6:	46d9      	mov	r9, fp
 80029e8:	2401      	movs	r4, #1
 80029ea:	f003 fd0d 	bl	8006408 <__aeabi_dcmpeq>
 80029ee:	b978      	cbnz	r0, 8002a10 <_dtoa_r+0x78>
 80029f0:	f014 0fff 	tst.w	r4, #255	; 0xff
 80029f4:	d110      	bne.n	8002a18 <_dtoa_r+0x80>
 80029f6:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 80029f8:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 80029fa:	2301      	movs	r3, #1
 80029fc:	602b      	str	r3, [r5, #0]
 80029fe:	4d78      	ldr	r5, [pc, #480]	; (8002be0 <_dtoa_r+0x248>)
 8002a00:	b114      	cbz	r4, 8002a08 <_dtoa_r+0x70>
 8002a02:	4d78      	ldr	r5, [pc, #480]	; (8002be4 <_dtoa_r+0x24c>)
 8002a04:	6025      	str	r5, [r4, #0]
 8002a06:	3d01      	subs	r5, #1
 8002a08:	4628      	mov	r0, r5
 8002a0a:	b01d      	add	sp, #116	; 0x74
 8002a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a10:	2400      	movs	r4, #0
 8002a12:	f014 0fff 	tst.w	r4, #255	; 0xff
 8002a16:	d0ee      	beq.n	80029f6 <_dtoa_r+0x5e>
 8002a18:	a91b      	add	r1, sp, #108	; 0x6c
 8002a1a:	9100      	str	r1, [sp, #0]
 8002a1c:	4638      	mov	r0, r7
 8002a1e:	a91a      	add	r1, sp, #104	; 0x68
 8002a20:	4642      	mov	r2, r8
 8002a22:	464b      	mov	r3, r9
 8002a24:	9101      	str	r1, [sp, #4]
 8002a26:	f001 fed1 	bl	80047cc <__d2b>
 8002a2a:	f3c5 540a 	ubfx	r4, r5, #20, #11
 8002a2e:	900a      	str	r0, [sp, #40]	; 0x28
 8002a30:	2c00      	cmp	r4, #0
 8002a32:	f040 80b5 	bne.w	8002ba0 <_dtoa_r+0x208>
 8002a36:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8002a38:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8002a3a:	f46f 6382 	mvn.w	r3, #1040	; 0x410
 8002a3e:	1934      	adds	r4, r6, r4
 8002a40:	429c      	cmp	r4, r3
 8002a42:	f2c0 8281 	blt.w	8002f48 <_dtoa_r+0x5b0>
 8002a46:	f64f 430e 	movw	r3, #64526	; 0xfc0e
 8002a4a:	f6cf 73ff 	movt	r3, #65535	; 0xffff
 8002a4e:	1b1b      	subs	r3, r3, r4
 8002a50:	f204 4212 	addw	r2, r4, #1042	; 0x412
 8002a54:	fa15 f303 	lsls.w	r3, r5, r3
 8002a58:	fa2a f002 	lsr.w	r0, sl, r2
 8002a5c:	4318      	orrs	r0, r3
 8002a5e:	f003 f9f5 	bl	8005e4c <__aeabi_ui2d>
 8002a62:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8002a66:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002a68:	2501      	movs	r5, #1
 8002a6a:	f1a0 70f8 	sub.w	r0, r0, #32505856	; 0x1f00000
 8002a6e:	900d      	str	r0, [sp, #52]	; 0x34
 8002a70:	3c01      	subs	r4, #1
 8002a72:	9516      	str	r5, [sp, #88]	; 0x58
 8002a74:	2300      	movs	r3, #0
 8002a76:	2200      	movs	r2, #0
 8002a78:	f6c3 73f8 	movt	r3, #16376	; 0x3ff8
 8002a7c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8002a80:	f003 f8a6 	bl	8005bd0 <__aeabi_dsub>
 8002a84:	a350      	add	r3, pc, #320	; (adr r3, 8002bc8 <_dtoa_r+0x230>)
 8002a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a8a:	f003 fa55 	bl	8005f38 <__aeabi_dmul>
 8002a8e:	a350      	add	r3, pc, #320	; (adr r3, 8002bd0 <_dtoa_r+0x238>)
 8002a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a94:	f003 f89e 	bl	8005bd4 <__adddf3>
 8002a98:	4680      	mov	r8, r0
 8002a9a:	4620      	mov	r0, r4
 8002a9c:	4689      	mov	r9, r1
 8002a9e:	f003 f9e5 	bl	8005e6c <__aeabi_i2d>
 8002aa2:	a34d      	add	r3, pc, #308	; (adr r3, 8002bd8 <_dtoa_r+0x240>)
 8002aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aa8:	f003 fa46 	bl	8005f38 <__aeabi_dmul>
 8002aac:	4602      	mov	r2, r0
 8002aae:	460b      	mov	r3, r1
 8002ab0:	4640      	mov	r0, r8
 8002ab2:	4649      	mov	r1, r9
 8002ab4:	f003 f88e 	bl	8005bd4 <__adddf3>
 8002ab8:	4680      	mov	r8, r0
 8002aba:	4689      	mov	r9, r1
 8002abc:	f003 fcd6 	bl	800646c <__aeabi_d2iz>
 8002ac0:	4649      	mov	r1, r9
 8002ac2:	9005      	str	r0, [sp, #20]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	4640      	mov	r0, r8
 8002ac8:	2300      	movs	r3, #0
 8002aca:	f003 fca7 	bl	800641c <__aeabi_dcmplt>
 8002ace:	b150      	cbz	r0, 8002ae6 <_dtoa_r+0x14e>
 8002ad0:	9805      	ldr	r0, [sp, #20]
 8002ad2:	f003 f9cb 	bl	8005e6c <__aeabi_i2d>
 8002ad6:	4642      	mov	r2, r8
 8002ad8:	464b      	mov	r3, r9
 8002ada:	f003 fc95 	bl	8006408 <__aeabi_dcmpeq>
 8002ade:	b910      	cbnz	r0, 8002ae6 <_dtoa_r+0x14e>
 8002ae0:	9d05      	ldr	r5, [sp, #20]
 8002ae2:	3d01      	subs	r5, #1
 8002ae4:	9505      	str	r5, [sp, #20]
 8002ae6:	9d05      	ldr	r5, [sp, #20]
 8002ae8:	2d16      	cmp	r5, #22
 8002aea:	f200 815e 	bhi.w	8002daa <_dtoa_r+0x412>
 8002aee:	4b3e      	ldr	r3, [pc, #248]	; (8002be8 <_dtoa_r+0x250>)
 8002af0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8002af4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002af8:	4652      	mov	r2, sl
 8002afa:	465b      	mov	r3, fp
 8002afc:	f003 fcac 	bl	8006458 <__aeabi_dcmpgt>
 8002b00:	2800      	cmp	r0, #0
 8002b02:	f000 8229 	beq.w	8002f58 <_dtoa_r+0x5c0>
 8002b06:	9d05      	ldr	r5, [sp, #20]
 8002b08:	3d01      	subs	r5, #1
 8002b0a:	9505      	str	r5, [sp, #20]
 8002b0c:	2500      	movs	r5, #0
 8002b0e:	9514      	str	r5, [sp, #80]	; 0x50
 8002b10:	1b34      	subs	r4, r6, r4
 8002b12:	3c01      	subs	r4, #1
 8002b14:	f100 8213 	bmi.w	8002f3e <_dtoa_r+0x5a6>
 8002b18:	2500      	movs	r5, #0
 8002b1a:	940b      	str	r4, [sp, #44]	; 0x2c
 8002b1c:	950f      	str	r5, [sp, #60]	; 0x3c
 8002b1e:	9c05      	ldr	r4, [sp, #20]
 8002b20:	2c00      	cmp	r4, #0
 8002b22:	f2c0 8203 	blt.w	8002f2c <_dtoa_r+0x594>
 8002b26:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8002b28:	9413      	str	r4, [sp, #76]	; 0x4c
 8002b2a:	192d      	adds	r5, r5, r4
 8002b2c:	2400      	movs	r4, #0
 8002b2e:	950b      	str	r5, [sp, #44]	; 0x2c
 8002b30:	9410      	str	r4, [sp, #64]	; 0x40
 8002b32:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8002b34:	2d09      	cmp	r5, #9
 8002b36:	d85d      	bhi.n	8002bf4 <_dtoa_r+0x25c>
 8002b38:	2401      	movs	r4, #1
 8002b3a:	2d05      	cmp	r5, #5
 8002b3c:	dd02      	ble.n	8002b44 <_dtoa_r+0x1ac>
 8002b3e:	3d04      	subs	r5, #4
 8002b40:	9526      	str	r5, [sp, #152]	; 0x98
 8002b42:	2400      	movs	r4, #0
 8002b44:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8002b46:	1eab      	subs	r3, r5, #2
 8002b48:	2b03      	cmp	r3, #3
 8002b4a:	d855      	bhi.n	8002bf8 <_dtoa_r+0x260>
 8002b4c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002b50:	036d0382 	.word	0x036d0382
 8002b54:	03850246 	.word	0x03850246
 8002b58:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 8002b5a:	f242 730f 	movw	r3, #9999	; 0x270f
 8002b5e:	6023      	str	r3, [r4, #0]
 8002b60:	f1ba 0f00 	cmp.w	sl, #0
 8002b64:	d013      	beq.n	8002b8e <_dtoa_r+0x1f6>
 8002b66:	4d21      	ldr	r5, [pc, #132]	; (8002bec <_dtoa_r+0x254>)
 8002b68:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8002b6a:	2c00      	cmp	r4, #0
 8002b6c:	f43f af4c 	beq.w	8002a08 <_dtoa_r+0x70>
 8002b70:	78eb      	ldrb	r3, [r5, #3]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	f000 8117 	beq.w	8002da6 <_dtoa_r+0x40e>
 8002b78:	f105 0308 	add.w	r3, r5, #8
 8002b7c:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8002b7e:	6023      	str	r3, [r4, #0]
 8002b80:	e742      	b.n	8002a08 <_dtoa_r+0x70>
 8002b82:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
 8002b86:	2301      	movs	r3, #1
 8002b88:	6023      	str	r3, [r4, #0]
 8002b8a:	46ab      	mov	fp, r5
 8002b8c:	e71c      	b.n	80029c8 <_dtoa_r+0x30>
 8002b8e:	4b17      	ldr	r3, [pc, #92]	; (8002bec <_dtoa_r+0x254>)
 8002b90:	4a17      	ldr	r2, [pc, #92]	; (8002bf0 <_dtoa_r+0x258>)
 8002b92:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8002b96:	2d00      	cmp	r5, #0
 8002b98:	bf0c      	ite	eq
 8002b9a:	4615      	moveq	r5, r2
 8002b9c:	461d      	movne	r5, r3
 8002b9e:	e7e3      	b.n	8002b68 <_dtoa_r+0x1d0>
 8002ba0:	4649      	mov	r1, r9
 8002ba2:	4640      	mov	r0, r8
 8002ba4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8002ba8:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002baa:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8002bac:	f021 437f 	bic.w	r3, r1, #4278190080	; 0xff000000
 8002bb0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002bb4:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8002bb8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8002bbc:	2500      	movs	r5, #0
 8002bbe:	930d      	str	r3, [sp, #52]	; 0x34
 8002bc0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8002bc4:	9516      	str	r5, [sp, #88]	; 0x58
 8002bc6:	e755      	b.n	8002a74 <_dtoa_r+0xdc>
 8002bc8:	636f4361 	.word	0x636f4361
 8002bcc:	3fd287a7 	.word	0x3fd287a7
 8002bd0:	8b60c8b3 	.word	0x8b60c8b3
 8002bd4:	3fc68a28 	.word	0x3fc68a28
 8002bd8:	509f79fb 	.word	0x509f79fb
 8002bdc:	3fd34413 	.word	0x3fd34413
 8002be0:	080068cc 	.word	0x080068cc
 8002be4:	080068cd 	.word	0x080068cd
 8002be8:	08006698 	.word	0x08006698
 8002bec:	080068dc 	.word	0x080068dc
 8002bf0:	080068d0 	.word	0x080068d0
 8002bf4:	2400      	movs	r4, #0
 8002bf6:	9426      	str	r4, [sp, #152]	; 0x98
 8002bf8:	2400      	movs	r4, #0
 8002bfa:	647c      	str	r4, [r7, #68]	; 0x44
 8002bfc:	4638      	mov	r0, r7
 8002bfe:	4621      	mov	r1, r4
 8002c00:	f001 fa88 	bl	8004114 <_Balloc>
 8002c04:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8002c08:	950e      	str	r5, [sp, #56]	; 0x38
 8002c0a:	2501      	movs	r5, #1
 8002c0c:	9512      	str	r5, [sp, #72]	; 0x48
 8002c0e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8002c12:	9009      	str	r0, [sp, #36]	; 0x24
 8002c14:	6438      	str	r0, [r7, #64]	; 0x40
 8002c16:	9515      	str	r5, [sp, #84]	; 0x54
 8002c18:	9427      	str	r4, [sp, #156]	; 0x9c
 8002c1a:	9c05      	ldr	r4, [sp, #20]
 8002c1c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8002c1e:	2c0e      	cmp	r4, #14
 8002c20:	bfcc      	ite	gt
 8002c22:	2500      	movgt	r5, #0
 8002c24:	2501      	movle	r5, #1
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	bfb8      	it	lt
 8002c2a:	2500      	movlt	r5, #0
 8002c2c:	2d00      	cmp	r5, #0
 8002c2e:	f000 80c1 	beq.w	8002db4 <_dtoa_r+0x41c>
 8002c32:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8002c34:	4b5e      	ldr	r3, [pc, #376]	; (8002db0 <_dtoa_r+0x418>)
 8002c36:	0fe5      	lsrs	r5, r4, #31
 8002c38:	9c05      	ldr	r4, [sp, #20]
 8002c3a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8002c3e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c42:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8002c44:	2c00      	cmp	r4, #0
 8002c46:	bfcc      	ite	gt
 8002c48:	2500      	movgt	r5, #0
 8002c4a:	f005 0501 	andle.w	r5, r5, #1
 8002c4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002c52:	2d00      	cmp	r5, #0
 8002c54:	f040 81a8 	bne.w	8002fa8 <_dtoa_r+0x610>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	460b      	mov	r3, r1
 8002c5c:	4650      	mov	r0, sl
 8002c5e:	4659      	mov	r1, fp
 8002c60:	f003 fa94 	bl	800618c <__aeabi_ddiv>
 8002c64:	f003 fc02 	bl	800646c <__aeabi_d2iz>
 8002c68:	4606      	mov	r6, r0
 8002c6a:	f003 f8ff 	bl	8005e6c <__aeabi_i2d>
 8002c6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002c72:	f003 f961 	bl	8005f38 <__aeabi_dmul>
 8002c76:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8002c78:	460b      	mov	r3, r1
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	4659      	mov	r1, fp
 8002c7e:	4650      	mov	r0, sl
 8002c80:	f002 ffa6 	bl	8005bd0 <__aeabi_dsub>
 8002c84:	f106 0330 	add.w	r3, r6, #48	; 0x30
 8002c88:	f804 3b01 	strb.w	r3, [r4], #1
 8002c8c:	9411      	str	r4, [sp, #68]	; 0x44
 8002c8e:	46a0      	mov	r8, r4
 8002c90:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8002c92:	2c01      	cmp	r4, #1
 8002c94:	4682      	mov	sl, r0
 8002c96:	468b      	mov	fp, r1
 8002c98:	d04c      	beq.n	8002d34 <_dtoa_r+0x39c>
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8002ca2:	f003 f949 	bl	8005f38 <__aeabi_dmul>
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	2300      	movs	r3, #0
 8002caa:	4682      	mov	sl, r0
 8002cac:	468b      	mov	fp, r1
 8002cae:	2401      	movs	r4, #1
 8002cb0:	f003 fbaa 	bl	8006408 <__aeabi_dcmpeq>
 8002cb4:	b100      	cbz	r0, 8002cb8 <_dtoa_r+0x320>
 8002cb6:	462c      	mov	r4, r5
 8002cb8:	f014 0fff 	tst.w	r4, #255	; 0xff
 8002cbc:	f000 8575 	beq.w	80037aa <_dtoa_r+0xe12>
 8002cc0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8002cc2:	980e      	ldr	r0, [sp, #56]	; 0x38
 8002cc4:	1ca5      	adds	r5, r4, #2
 8002cc6:	eb04 0900 	add.w	r9, r4, r0
 8002cca:	e00d      	b.n	8002ce8 <_dtoa_r+0x350>
 8002ccc:	f003 f934 	bl	8005f38 <__aeabi_dmul>
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	4682      	mov	sl, r0
 8002cd6:	468b      	mov	fp, r1
 8002cd8:	f003 fb96 	bl	8006408 <__aeabi_dcmpeq>
 8002cdc:	b100      	cbz	r0, 8002ce0 <_dtoa_r+0x348>
 8002cde:	2400      	movs	r4, #0
 8002ce0:	f014 0fff 	tst.w	r4, #255	; 0xff
 8002ce4:	f000 8423 	beq.w	800352e <_dtoa_r+0xb96>
 8002ce8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002cec:	4650      	mov	r0, sl
 8002cee:	4659      	mov	r1, fp
 8002cf0:	f003 fa4c 	bl	800618c <__aeabi_ddiv>
 8002cf4:	f003 fbba 	bl	800646c <__aeabi_d2iz>
 8002cf8:	4606      	mov	r6, r0
 8002cfa:	f003 f8b7 	bl	8005e6c <__aeabi_i2d>
 8002cfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002d02:	f003 f919 	bl	8005f38 <__aeabi_dmul>
 8002d06:	4602      	mov	r2, r0
 8002d08:	460b      	mov	r3, r1
 8002d0a:	4650      	mov	r0, sl
 8002d0c:	4659      	mov	r1, fp
 8002d0e:	f002 ff5f 	bl	8005bd0 <__aeabi_dsub>
 8002d12:	f106 0430 	add.w	r4, r6, #48	; 0x30
 8002d16:	2300      	movs	r3, #0
 8002d18:	2200      	movs	r2, #0
 8002d1a:	454d      	cmp	r5, r9
 8002d1c:	f805 4c01 	strb.w	r4, [r5, #-1]
 8002d20:	46a8      	mov	r8, r5
 8002d22:	4682      	mov	sl, r0
 8002d24:	468b      	mov	fp, r1
 8002d26:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8002d2a:	f04f 0401 	mov.w	r4, #1
 8002d2e:	f105 0501 	add.w	r5, r5, #1
 8002d32:	d1cb      	bne.n	8002ccc <_dtoa_r+0x334>
 8002d34:	4652      	mov	r2, sl
 8002d36:	465b      	mov	r3, fp
 8002d38:	4650      	mov	r0, sl
 8002d3a:	4659      	mov	r1, fp
 8002d3c:	f002 ff4a 	bl	8005bd4 <__adddf3>
 8002d40:	4604      	mov	r4, r0
 8002d42:	460d      	mov	r5, r1
 8002d44:	4622      	mov	r2, r4
 8002d46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002d4a:	462b      	mov	r3, r5
 8002d4c:	f003 fb66 	bl	800641c <__aeabi_dcmplt>
 8002d50:	b958      	cbnz	r0, 8002d6a <_dtoa_r+0x3d2>
 8002d52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002d56:	4622      	mov	r2, r4
 8002d58:	462b      	mov	r3, r5
 8002d5a:	f003 fb55 	bl	8006408 <__aeabi_dcmpeq>
 8002d5e:	2800      	cmp	r0, #0
 8002d60:	f000 83e5 	beq.w	800352e <_dtoa_r+0xb96>
 8002d64:	07f3      	lsls	r3, r6, #31
 8002d66:	f140 83e2 	bpl.w	800352e <_dtoa_r+0xb96>
 8002d6a:	9c05      	ldr	r4, [sp, #20]
 8002d6c:	f818 6c01 	ldrb.w	r6, [r8, #-1]
 8002d70:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8002d72:	9417      	str	r4, [sp, #92]	; 0x5c
 8002d74:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8002d76:	e003      	b.n	8002d80 <_dtoa_r+0x3e8>
 8002d78:	f818 6c02 	ldrb.w	r6, [r8, #-2]
 8002d7c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8002d80:	2e39      	cmp	r6, #57	; 0x39
 8002d82:	4643      	mov	r3, r8
 8002d84:	f040 8489 	bne.w	800369a <_dtoa_r+0xd02>
 8002d88:	4590      	cmp	r8, r2
 8002d8a:	d1f5      	bne.n	8002d78 <_dtoa_r+0x3e0>
 8002d8c:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8002d8e:	9309      	str	r3, [sp, #36]	; 0x24
 8002d90:	3401      	adds	r4, #1
 8002d92:	9405      	str	r4, [sp, #20]
 8002d94:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8002d96:	2330      	movs	r3, #48	; 0x30
 8002d98:	f804 3c01 	strb.w	r3, [r4, #-1]
 8002d9c:	2231      	movs	r2, #49	; 0x31
 8002d9e:	4623      	mov	r3, r4
 8002da0:	f803 2c01 	strb.w	r2, [r3, #-1]
 8002da4:	e0b0      	b.n	8002f08 <_dtoa_r+0x570>
 8002da6:	1ceb      	adds	r3, r5, #3
 8002da8:	e6e8      	b.n	8002b7c <_dtoa_r+0x1e4>
 8002daa:	2501      	movs	r5, #1
 8002dac:	9514      	str	r5, [sp, #80]	; 0x50
 8002dae:	e6af      	b.n	8002b10 <_dtoa_r+0x178>
 8002db0:	08006698 	.word	0x08006698
 8002db4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8002db6:	2c00      	cmp	r4, #0
 8002db8:	f040 80d1 	bne.w	8002f5e <_dtoa_r+0x5c6>
 8002dbc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002dbe:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8002dc0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8002dc2:	9306      	str	r3, [sp, #24]
 8002dc4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8002dc6:	2800      	cmp	r0, #0
 8002dc8:	bfc8      	it	gt
 8002dca:	2c00      	cmpgt	r4, #0
 8002dcc:	dd09      	ble.n	8002de2 <_dtoa_r+0x44a>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8002dd2:	42a3      	cmp	r3, r4
 8002dd4:	bfa8      	it	ge
 8002dd6:	4623      	movge	r3, r4
 8002dd8:	1ac9      	subs	r1, r1, r3
 8002dda:	1ac0      	subs	r0, r0, r3
 8002ddc:	910f      	str	r1, [sp, #60]	; 0x3c
 8002dde:	1ae4      	subs	r4, r4, r3
 8002de0:	900b      	str	r0, [sp, #44]	; 0x2c
 8002de2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002de4:	2a00      	cmp	r2, #0
 8002de6:	dd1a      	ble.n	8002e1e <_dtoa_r+0x486>
 8002de8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	f000 841d 	beq.w	800362a <_dtoa_r+0xc92>
 8002df0:	2d00      	cmp	r5, #0
 8002df2:	dd10      	ble.n	8002e16 <_dtoa_r+0x47e>
 8002df4:	9906      	ldr	r1, [sp, #24]
 8002df6:	462a      	mov	r2, r5
 8002df8:	4638      	mov	r0, r7
 8002dfa:	f001 fb39 	bl	8004470 <__pow5mult>
 8002dfe:	9006      	str	r0, [sp, #24]
 8002e00:	9906      	ldr	r1, [sp, #24]
 8002e02:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002e04:	4638      	mov	r0, r7
 8002e06:	f001 fa9b 	bl	8004340 <__multiply>
 8002e0a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002e0c:	4606      	mov	r6, r0
 8002e0e:	4638      	mov	r0, r7
 8002e10:	f001 f9a6 	bl	8004160 <_Bfree>
 8002e14:	960a      	str	r6, [sp, #40]	; 0x28
 8002e16:	9810      	ldr	r0, [sp, #64]	; 0x40
 8002e18:	1b42      	subs	r2, r0, r5
 8002e1a:	f040 8429 	bne.w	8003670 <_dtoa_r+0xcd8>
 8002e1e:	2101      	movs	r1, #1
 8002e20:	4638      	mov	r0, r7
 8002e22:	f001 fa83 	bl	800432c <__i2b>
 8002e26:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8002e28:	2d00      	cmp	r5, #0
 8002e2a:	4606      	mov	r6, r0
 8002e2c:	dd05      	ble.n	8002e3a <_dtoa_r+0x4a2>
 8002e2e:	4631      	mov	r1, r6
 8002e30:	4638      	mov	r0, r7
 8002e32:	462a      	mov	r2, r5
 8002e34:	f001 fb1c 	bl	8004470 <__pow5mult>
 8002e38:	4606      	mov	r6, r0
 8002e3a:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8002e3c:	2d01      	cmp	r5, #1
 8002e3e:	f340 820f 	ble.w	8003260 <_dtoa_r+0x8c8>
 8002e42:	2500      	movs	r5, #0
 8002e44:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8002e46:	2301      	movs	r3, #1
 8002e48:	2800      	cmp	r0, #0
 8002e4a:	f040 838c 	bne.w	8003566 <_dtoa_r+0xbce>
 8002e4e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002e50:	185b      	adds	r3, r3, r1
 8002e52:	f013 031f 	ands.w	r3, r3, #31
 8002e56:	f000 82cb 	beq.w	80033f0 <_dtoa_r+0xa58>
 8002e5a:	f1c3 0220 	rsb	r2, r3, #32
 8002e5e:	2a04      	cmp	r2, #4
 8002e60:	f340 84bf 	ble.w	80037e2 <_dtoa_r+0xe4a>
 8002e64:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002e66:	f1c3 031c 	rsb	r3, r3, #28
 8002e6a:	18d2      	adds	r2, r2, r3
 8002e6c:	18c9      	adds	r1, r1, r3
 8002e6e:	920f      	str	r2, [sp, #60]	; 0x3c
 8002e70:	18e4      	adds	r4, r4, r3
 8002e72:	910b      	str	r1, [sp, #44]	; 0x2c
 8002e74:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002e76:	2a00      	cmp	r2, #0
 8002e78:	dd04      	ble.n	8002e84 <_dtoa_r+0x4ec>
 8002e7a:	4638      	mov	r0, r7
 8002e7c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002e7e:	f001 fb43 	bl	8004508 <__lshift>
 8002e82:	900a      	str	r0, [sp, #40]	; 0x28
 8002e84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	dd05      	ble.n	8002e96 <_dtoa_r+0x4fe>
 8002e8a:	4631      	mov	r1, r6
 8002e8c:	4638      	mov	r0, r7
 8002e8e:	461a      	mov	r2, r3
 8002e90:	f001 fb3a 	bl	8004508 <__lshift>
 8002e94:	4606      	mov	r6, r0
 8002e96:	9814      	ldr	r0, [sp, #80]	; 0x50
 8002e98:	2800      	cmp	r0, #0
 8002e9a:	f040 834c 	bne.w	8003536 <_dtoa_r+0xb9e>
 8002e9e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8002ea0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8002ea2:	2900      	cmp	r1, #0
 8002ea4:	bfcc      	ite	gt
 8002ea6:	2300      	movgt	r3, #0
 8002ea8:	2301      	movle	r3, #1
 8002eaa:	2a02      	cmp	r2, #2
 8002eac:	bfd8      	it	le
 8002eae:	2300      	movle	r3, #0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	f000 8226 	beq.w	8003302 <_dtoa_r+0x96a>
 8002eb6:	2900      	cmp	r1, #0
 8002eb8:	f040 808a 	bne.w	8002fd0 <_dtoa_r+0x638>
 8002ebc:	4631      	mov	r1, r6
 8002ebe:	2205      	movs	r2, #5
 8002ec0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002ec2:	4638      	mov	r0, r7
 8002ec4:	f001 f956 	bl	8004174 <__multadd>
 8002ec8:	4606      	mov	r6, r0
 8002eca:	4631      	mov	r1, r6
 8002ecc:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002ece:	f001 fb7b 	bl	80045c8 <__mcmp>
 8002ed2:	2800      	cmp	r0, #0
 8002ed4:	dd7c      	ble.n	8002fd0 <_dtoa_r+0x638>
 8002ed6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ed8:	9c05      	ldr	r4, [sp, #20]
 8002eda:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8002edc:	2231      	movs	r2, #49	; 0x31
 8002ede:	f803 2b01 	strb.w	r2, [r3], #1
 8002ee2:	3401      	adds	r4, #1
 8002ee4:	9405      	str	r4, [sp, #20]
 8002ee6:	9309      	str	r3, [sp, #36]	; 0x24
 8002ee8:	2400      	movs	r4, #0
 8002eea:	4638      	mov	r0, r7
 8002eec:	4631      	mov	r1, r6
 8002eee:	f001 f937 	bl	8004160 <_Bfree>
 8002ef2:	9806      	ldr	r0, [sp, #24]
 8002ef4:	b140      	cbz	r0, 8002f08 <_dtoa_r+0x570>
 8002ef6:	4284      	cmp	r4, r0
 8002ef8:	bf18      	it	ne
 8002efa:	2c00      	cmpne	r4, #0
 8002efc:	f040 8273 	bne.w	80033e6 <_dtoa_r+0xa4e>
 8002f00:	4638      	mov	r0, r7
 8002f02:	9906      	ldr	r1, [sp, #24]
 8002f04:	f001 f92c 	bl	8004160 <_Bfree>
 8002f08:	4638      	mov	r0, r7
 8002f0a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002f0c:	f001 f928 	bl	8004160 <_Bfree>
 8002f10:	9c05      	ldr	r4, [sp, #20]
 8002f12:	1c63      	adds	r3, r4, #1
 8002f14:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8002f16:	2200      	movs	r2, #0
 8002f18:	7022      	strb	r2, [r4, #0]
 8002f1a:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 8002f1c:	6023      	str	r3, [r4, #0]
 8002f1e:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8002f20:	2c00      	cmp	r4, #0
 8002f22:	f43f ad71 	beq.w	8002a08 <_dtoa_r+0x70>
 8002f26:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002f28:	6020      	str	r0, [r4, #0]
 8002f2a:	e56d      	b.n	8002a08 <_dtoa_r+0x70>
 8002f2c:	9c05      	ldr	r4, [sp, #20]
 8002f2e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8002f30:	1b2d      	subs	r5, r5, r4
 8002f32:	950f      	str	r5, [sp, #60]	; 0x3c
 8002f34:	4265      	negs	r5, r4
 8002f36:	2400      	movs	r4, #0
 8002f38:	9510      	str	r5, [sp, #64]	; 0x40
 8002f3a:	9413      	str	r4, [sp, #76]	; 0x4c
 8002f3c:	e5f9      	b.n	8002b32 <_dtoa_r+0x19a>
 8002f3e:	4264      	negs	r4, r4
 8002f40:	940f      	str	r4, [sp, #60]	; 0x3c
 8002f42:	2400      	movs	r4, #0
 8002f44:	940b      	str	r4, [sp, #44]	; 0x2c
 8002f46:	e5ea      	b.n	8002b1e <_dtoa_r+0x186>
 8002f48:	f64f 30ee 	movw	r0, #64494	; 0xfbee
 8002f4c:	f6cf 70ff 	movt	r0, #65535	; 0xffff
 8002f50:	1b00      	subs	r0, r0, r4
 8002f52:	fa0a f000 	lsl.w	r0, sl, r0
 8002f56:	e582      	b.n	8002a5e <_dtoa_r+0xc6>
 8002f58:	2500      	movs	r5, #0
 8002f5a:	9514      	str	r5, [sp, #80]	; 0x50
 8002f5c:	e5d8      	b.n	8002b10 <_dtoa_r+0x178>
 8002f5e:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8002f60:	2c01      	cmp	r4, #1
 8002f62:	f340 838f 	ble.w	8003684 <_dtoa_r+0xcec>
 8002f66:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8002f68:	1e62      	subs	r2, r4, #1
 8002f6a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8002f6c:	4294      	cmp	r4, r2
 8002f6e:	bfbf      	itttt	lt
 8002f70:	9c10      	ldrlt	r4, [sp, #64]	; 0x40
 8002f72:	9210      	strlt	r2, [sp, #64]	; 0x40
 8002f74:	ebc4 0302 	rsblt	r3, r4, r2
 8002f78:	9c13      	ldrlt	r4, [sp, #76]	; 0x4c
 8002f7a:	bfb6      	itet	lt
 8002f7c:	18e4      	addlt	r4, r4, r3
 8002f7e:	ebc2 0504 	rsbge	r5, r2, r4
 8002f82:	9413      	strlt	r4, [sp, #76]	; 0x4c
 8002f84:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8002f86:	2c00      	cmp	r4, #0
 8002f88:	f2c0 838f 	blt.w	80036aa <_dtoa_r+0xd12>
 8002f8c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8002f8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002f90:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002f92:	18d2      	adds	r2, r2, r3
 8002f94:	920f      	str	r2, [sp, #60]	; 0x3c
 8002f96:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002f98:	4638      	mov	r0, r7
 8002f9a:	18d2      	adds	r2, r2, r3
 8002f9c:	2101      	movs	r1, #1
 8002f9e:	920b      	str	r2, [sp, #44]	; 0x2c
 8002fa0:	f001 f9c4 	bl	800432c <__i2b>
 8002fa4:	9006      	str	r0, [sp, #24]
 8002fa6:	e70d      	b.n	8002dc4 <_dtoa_r+0x42c>
 8002fa8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8002faa:	2d00      	cmp	r5, #0
 8002fac:	f040 8367 	bne.w	800367e <_dtoa_r+0xce6>
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f2c4 0314 	movt	r3, #16404	; 0x4014
 8002fb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002fbc:	f002 ffbc 	bl	8005f38 <__aeabi_dmul>
 8002fc0:	4652      	mov	r2, sl
 8002fc2:	465b      	mov	r3, fp
 8002fc4:	f003 fa3e 	bl	8006444 <__aeabi_dcmpge>
 8002fc8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8002fca:	9606      	str	r6, [sp, #24]
 8002fcc:	2800      	cmp	r0, #0
 8002fce:	d082      	beq.n	8002ed6 <_dtoa_r+0x53e>
 8002fd0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8002fd2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8002fd4:	43e4      	mvns	r4, r4
 8002fd6:	9405      	str	r4, [sp, #20]
 8002fd8:	2400      	movs	r4, #0
 8002fda:	e786      	b.n	8002eea <_dtoa_r+0x552>
 8002fdc:	2501      	movs	r5, #1
 8002fde:	9512      	str	r5, [sp, #72]	; 0x48
 8002fe0:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 8002fe2:	2d00      	cmp	r5, #0
 8002fe4:	f340 82d3 	ble.w	800358e <_dtoa_r+0xbf6>
 8002fe8:	46a9      	mov	r9, r5
 8002fea:	2d0e      	cmp	r5, #14
 8002fec:	bf8c      	ite	hi
 8002fee:	2400      	movhi	r4, #0
 8002ff0:	f004 0401 	andls.w	r4, r4, #1
 8002ff4:	9515      	str	r5, [sp, #84]	; 0x54
 8002ff6:	950e      	str	r5, [sp, #56]	; 0x38
 8002ff8:	2100      	movs	r1, #0
 8002ffa:	f1b9 0f17 	cmp.w	r9, #23
 8002ffe:	6479      	str	r1, [r7, #68]	; 0x44
 8003000:	d909      	bls.n	8003016 <_dtoa_r+0x67e>
 8003002:	2201      	movs	r2, #1
 8003004:	2304      	movs	r3, #4
 8003006:	005b      	lsls	r3, r3, #1
 8003008:	f103 0014 	add.w	r0, r3, #20
 800300c:	4611      	mov	r1, r2
 800300e:	3201      	adds	r2, #1
 8003010:	4548      	cmp	r0, r9
 8003012:	d9f8      	bls.n	8003006 <_dtoa_r+0x66e>
 8003014:	6479      	str	r1, [r7, #68]	; 0x44
 8003016:	4638      	mov	r0, r7
 8003018:	f001 f87c 	bl	8004114 <_Balloc>
 800301c:	9009      	str	r0, [sp, #36]	; 0x24
 800301e:	6438      	str	r0, [r7, #64]	; 0x40
 8003020:	2c00      	cmp	r4, #0
 8003022:	f43f adfa 	beq.w	8002c1a <_dtoa_r+0x282>
 8003026:	9c05      	ldr	r4, [sp, #20]
 8003028:	4652      	mov	r2, sl
 800302a:	465b      	mov	r3, fp
 800302c:	2c00      	cmp	r4, #0
 800302e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8003032:	f340 81f8 	ble.w	8003426 <_dtoa_r+0xa8e>
 8003036:	4b97      	ldr	r3, [pc, #604]	; (8003294 <_dtoa_r+0x8fc>)
 8003038:	f004 020f 	and.w	r2, r4, #15
 800303c:	1124      	asrs	r4, r4, #4
 800303e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003042:	2602      	movs	r6, #2
 8003044:	06e2      	lsls	r2, r4, #27
 8003046:	e9d3 8900 	ldrd	r8, r9, [r3]
 800304a:	d50b      	bpl.n	8003064 <_dtoa_r+0x6cc>
 800304c:	4b92      	ldr	r3, [pc, #584]	; (8003298 <_dtoa_r+0x900>)
 800304e:	4650      	mov	r0, sl
 8003050:	4659      	mov	r1, fp
 8003052:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003056:	f003 f899 	bl	800618c <__aeabi_ddiv>
 800305a:	f004 040f 	and.w	r4, r4, #15
 800305e:	4682      	mov	sl, r0
 8003060:	468b      	mov	fp, r1
 8003062:	2603      	movs	r6, #3
 8003064:	b174      	cbz	r4, 8003084 <_dtoa_r+0x6ec>
 8003066:	4d8c      	ldr	r5, [pc, #560]	; (8003298 <_dtoa_r+0x900>)
 8003068:	4640      	mov	r0, r8
 800306a:	4649      	mov	r1, r9
 800306c:	07e3      	lsls	r3, r4, #31
 800306e:	d504      	bpl.n	800307a <_dtoa_r+0x6e2>
 8003070:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003074:	f002 ff60 	bl	8005f38 <__aeabi_dmul>
 8003078:	3601      	adds	r6, #1
 800307a:	3508      	adds	r5, #8
 800307c:	1064      	asrs	r4, r4, #1
 800307e:	d1f5      	bne.n	800306c <_dtoa_r+0x6d4>
 8003080:	4680      	mov	r8, r0
 8003082:	4689      	mov	r9, r1
 8003084:	4650      	mov	r0, sl
 8003086:	4659      	mov	r1, fp
 8003088:	4642      	mov	r2, r8
 800308a:	464b      	mov	r3, r9
 800308c:	f003 f87e 	bl	800618c <__aeabi_ddiv>
 8003090:	4682      	mov	sl, r0
 8003092:	468b      	mov	fp, r1
 8003094:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8003096:	2c00      	cmp	r4, #0
 8003098:	f000 8100 	beq.w	800329c <_dtoa_r+0x904>
 800309c:	2300      	movs	r3, #0
 800309e:	4650      	mov	r0, sl
 80030a0:	4659      	mov	r1, fp
 80030a2:	2200      	movs	r2, #0
 80030a4:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 80030a8:	2401      	movs	r4, #1
 80030aa:	f003 f9b7 	bl	800641c <__aeabi_dcmplt>
 80030ae:	b900      	cbnz	r0, 80030b2 <_dtoa_r+0x71a>
 80030b0:	2400      	movs	r4, #0
 80030b2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80030b4:	2d00      	cmp	r5, #0
 80030b6:	bfd4      	ite	le
 80030b8:	2400      	movle	r4, #0
 80030ba:	f004 0401 	andgt.w	r4, r4, #1
 80030be:	2c00      	cmp	r4, #0
 80030c0:	f000 80ec 	beq.w	800329c <_dtoa_r+0x904>
 80030c4:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80030c6:	2c00      	cmp	r4, #0
 80030c8:	f340 819b 	ble.w	8003402 <_dtoa_r+0xa6a>
 80030cc:	2300      	movs	r3, #0
 80030ce:	2200      	movs	r2, #0
 80030d0:	f2c4 0324 	movt	r3, #16420	; 0x4024
 80030d4:	4650      	mov	r0, sl
 80030d6:	4659      	mov	r1, fp
 80030d8:	f002 ff2e 	bl	8005f38 <__aeabi_dmul>
 80030dc:	4682      	mov	sl, r0
 80030de:	1c70      	adds	r0, r6, #1
 80030e0:	468b      	mov	fp, r1
 80030e2:	f002 fec3 	bl	8005e6c <__aeabi_i2d>
 80030e6:	4602      	mov	r2, r0
 80030e8:	460b      	mov	r3, r1
 80030ea:	4650      	mov	r0, sl
 80030ec:	4659      	mov	r1, fp
 80030ee:	f002 ff23 	bl	8005f38 <__aeabi_dmul>
 80030f2:	2300      	movs	r3, #0
 80030f4:	2200      	movs	r2, #0
 80030f6:	f2c4 031c 	movt	r3, #16412	; 0x401c
 80030fa:	f002 fd6b 	bl	8005bd4 <__adddf3>
 80030fe:	9d05      	ldr	r5, [sp, #20]
 8003100:	3d01      	subs	r5, #1
 8003102:	9517      	str	r5, [sp, #92]	; 0x5c
 8003104:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8003106:	4680      	mov	r8, r0
 8003108:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 800310c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800310e:	2c00      	cmp	r4, #0
 8003110:	f000 81b0 	beq.w	8003474 <_dtoa_r+0xadc>
 8003114:	4b5f      	ldr	r3, [pc, #380]	; (8003294 <_dtoa_r+0x8fc>)
 8003116:	2100      	movs	r1, #0
 8003118:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800311c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003120:	2000      	movs	r0, #0
 8003122:	f6c3 71e0 	movt	r1, #16352	; 0x3fe0
 8003126:	f003 f831 	bl	800618c <__aeabi_ddiv>
 800312a:	4642      	mov	r2, r8
 800312c:	464b      	mov	r3, r9
 800312e:	f002 fd4f 	bl	8005bd0 <__aeabi_dsub>
 8003132:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003136:	4659      	mov	r1, fp
 8003138:	4650      	mov	r0, sl
 800313a:	f003 f997 	bl	800646c <__aeabi_d2iz>
 800313e:	4606      	mov	r6, r0
 8003140:	f002 fe94 	bl	8005e6c <__aeabi_i2d>
 8003144:	4602      	mov	r2, r0
 8003146:	460b      	mov	r3, r1
 8003148:	4650      	mov	r0, sl
 800314a:	4659      	mov	r1, fp
 800314c:	f002 fd40 	bl	8005bd0 <__aeabi_dsub>
 8003150:	3630      	adds	r6, #48	; 0x30
 8003152:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8003154:	b2f6      	uxtb	r6, r6
 8003156:	4682      	mov	sl, r0
 8003158:	468b      	mov	fp, r1
 800315a:	f804 6b01 	strb.w	r6, [r4], #1
 800315e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003162:	4652      	mov	r2, sl
 8003164:	465b      	mov	r3, fp
 8003166:	9411      	str	r4, [sp, #68]	; 0x44
 8003168:	46a0      	mov	r8, r4
 800316a:	f003 f975 	bl	8006458 <__aeabi_dcmpgt>
 800316e:	2800      	cmp	r0, #0
 8003170:	f040 8325 	bne.w	80037be <_dtoa_r+0xe26>
 8003174:	2100      	movs	r1, #0
 8003176:	4652      	mov	r2, sl
 8003178:	465b      	mov	r3, fp
 800317a:	2000      	movs	r0, #0
 800317c:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 8003180:	f002 fd26 	bl	8005bd0 <__aeabi_dsub>
 8003184:	4602      	mov	r2, r0
 8003186:	460b      	mov	r3, r1
 8003188:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800318c:	f003 f964 	bl	8006458 <__aeabi_dcmpgt>
 8003190:	2800      	cmp	r0, #0
 8003192:	f040 827f 	bne.w	8003694 <_dtoa_r+0xcfc>
 8003196:	2d01      	cmp	r5, #1
 8003198:	f340 8133 	ble.w	8003402 <_dtoa_r+0xa6a>
 800319c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800319e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80031a0:	1945      	adds	r5, r0, r5
 80031a2:	e00f      	b.n	80031c4 <_dtoa_r+0x82c>
 80031a4:	2100      	movs	r1, #0
 80031a6:	2000      	movs	r0, #0
 80031a8:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 80031ac:	f002 fd10 	bl	8005bd0 <__aeabi_dsub>
 80031b0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80031b4:	f003 f932 	bl	800641c <__aeabi_dcmplt>
 80031b8:	2800      	cmp	r0, #0
 80031ba:	f040 826b 	bne.w	8003694 <_dtoa_r+0xcfc>
 80031be:	42ac      	cmp	r4, r5
 80031c0:	f000 811f 	beq.w	8003402 <_dtoa_r+0xa6a>
 80031c4:	2300      	movs	r3, #0
 80031c6:	2200      	movs	r2, #0
 80031c8:	f2c4 0324 	movt	r3, #16420	; 0x4024
 80031cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80031d0:	f002 feb2 	bl	8005f38 <__aeabi_dmul>
 80031d4:	2300      	movs	r3, #0
 80031d6:	2200      	movs	r2, #0
 80031d8:	f2c4 0324 	movt	r3, #16420	; 0x4024
 80031dc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80031e0:	4650      	mov	r0, sl
 80031e2:	4659      	mov	r1, fp
 80031e4:	f002 fea8 	bl	8005f38 <__aeabi_dmul>
 80031e8:	4680      	mov	r8, r0
 80031ea:	4689      	mov	r9, r1
 80031ec:	f003 f93e 	bl	800646c <__aeabi_d2iz>
 80031f0:	4606      	mov	r6, r0
 80031f2:	f002 fe3b 	bl	8005e6c <__aeabi_i2d>
 80031f6:	4602      	mov	r2, r0
 80031f8:	460b      	mov	r3, r1
 80031fa:	4640      	mov	r0, r8
 80031fc:	4649      	mov	r1, r9
 80031fe:	f002 fce7 	bl	8005bd0 <__aeabi_dsub>
 8003202:	3630      	adds	r6, #48	; 0x30
 8003204:	b2f6      	uxtb	r6, r6
 8003206:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800320a:	f804 6b01 	strb.w	r6, [r4], #1
 800320e:	4682      	mov	sl, r0
 8003210:	468b      	mov	fp, r1
 8003212:	f003 f903 	bl	800641c <__aeabi_dcmplt>
 8003216:	46a0      	mov	r8, r4
 8003218:	4652      	mov	r2, sl
 800321a:	465b      	mov	r3, fp
 800321c:	2800      	cmp	r0, #0
 800321e:	d0c1      	beq.n	80031a4 <_dtoa_r+0x80c>
 8003220:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8003222:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8003224:	9005      	str	r0, [sp, #20]
 8003226:	9409      	str	r4, [sp, #36]	; 0x24
 8003228:	e66e      	b.n	8002f08 <_dtoa_r+0x570>
 800322a:	2500      	movs	r5, #0
 800322c:	9512      	str	r5, [sp, #72]	; 0x48
 800322e:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 8003230:	9805      	ldr	r0, [sp, #20]
 8003232:	182d      	adds	r5, r5, r0
 8003234:	f105 0901 	add.w	r9, r5, #1
 8003238:	f1b9 0f00 	cmp.w	r9, #0
 800323c:	9515      	str	r5, [sp, #84]	; 0x54
 800323e:	f340 819b 	ble.w	8003578 <_dtoa_r+0xbe0>
 8003242:	f1b9 0f0e 	cmp.w	r9, #14
 8003246:	bf8c      	ite	hi
 8003248:	2400      	movhi	r4, #0
 800324a:	f004 0401 	andls.w	r4, r4, #1
 800324e:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8003252:	e6d1      	b.n	8002ff8 <_dtoa_r+0x660>
 8003254:	2500      	movs	r5, #0
 8003256:	9512      	str	r5, [sp, #72]	; 0x48
 8003258:	e6c2      	b.n	8002fe0 <_dtoa_r+0x648>
 800325a:	2501      	movs	r5, #1
 800325c:	9512      	str	r5, [sp, #72]	; 0x48
 800325e:	e7e6      	b.n	800322e <_dtoa_r+0x896>
 8003260:	f1ba 0f00 	cmp.w	sl, #0
 8003264:	f47f aded 	bne.w	8002e42 <_dtoa_r+0x4aa>
 8003268:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800326c:	4655      	mov	r5, sl
 800326e:	2b00      	cmp	r3, #0
 8003270:	f47f ade8 	bne.w	8002e44 <_dtoa_r+0x4ac>
 8003274:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 8003278:	ea0b 0303 	and.w	r3, fp, r3
 800327c:	461d      	mov	r5, r3
 800327e:	2b00      	cmp	r3, #0
 8003280:	f43f ade0 	beq.w	8002e44 <_dtoa_r+0x4ac>
 8003284:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8003286:	3501      	adds	r5, #1
 8003288:	950f      	str	r5, [sp, #60]	; 0x3c
 800328a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800328c:	3501      	adds	r5, #1
 800328e:	950b      	str	r5, [sp, #44]	; 0x2c
 8003290:	2501      	movs	r5, #1
 8003292:	e5d7      	b.n	8002e44 <_dtoa_r+0x4ac>
 8003294:	08006698 	.word	0x08006698
 8003298:	08006788 	.word	0x08006788
 800329c:	4630      	mov	r0, r6
 800329e:	f002 fde5 	bl	8005e6c <__aeabi_i2d>
 80032a2:	4652      	mov	r2, sl
 80032a4:	465b      	mov	r3, fp
 80032a6:	f002 fe47 	bl	8005f38 <__aeabi_dmul>
 80032aa:	2300      	movs	r3, #0
 80032ac:	2200      	movs	r2, #0
 80032ae:	f2c4 031c 	movt	r3, #16412	; 0x401c
 80032b2:	f002 fc8f 	bl	8005bd4 <__adddf3>
 80032b6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80032b8:	f1a1 7450 	sub.w	r4, r1, #54525952	; 0x3400000
 80032bc:	4680      	mov	r8, r0
 80032be:	46a1      	mov	r9, r4
 80032c0:	2d00      	cmp	r5, #0
 80032c2:	f040 80ac 	bne.w	800341e <_dtoa_r+0xa86>
 80032c6:	2300      	movs	r3, #0
 80032c8:	2200      	movs	r2, #0
 80032ca:	f2c4 0314 	movt	r3, #16404	; 0x4014
 80032ce:	4650      	mov	r0, sl
 80032d0:	4659      	mov	r1, fp
 80032d2:	f002 fc7d 	bl	8005bd0 <__aeabi_dsub>
 80032d6:	4642      	mov	r2, r8
 80032d8:	4623      	mov	r3, r4
 80032da:	4682      	mov	sl, r0
 80032dc:	468b      	mov	fp, r1
 80032de:	f003 f8bb 	bl	8006458 <__aeabi_dcmpgt>
 80032e2:	2800      	cmp	r0, #0
 80032e4:	f040 80c3 	bne.w	800346e <_dtoa_r+0xad6>
 80032e8:	4642      	mov	r2, r8
 80032ea:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
 80032ee:	4650      	mov	r0, sl
 80032f0:	4659      	mov	r1, fp
 80032f2:	f003 f893 	bl	800641c <__aeabi_dcmplt>
 80032f6:	2800      	cmp	r0, #0
 80032f8:	f000 8083 	beq.w	8003402 <_dtoa_r+0xa6a>
 80032fc:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80032fe:	9606      	str	r6, [sp, #24]
 8003300:	e666      	b.n	8002fd0 <_dtoa_r+0x638>
 8003302:	9812      	ldr	r0, [sp, #72]	; 0x48
 8003304:	2800      	cmp	r0, #0
 8003306:	f000 8147 	beq.w	8003598 <_dtoa_r+0xc00>
 800330a:	2c00      	cmp	r4, #0
 800330c:	dd05      	ble.n	800331a <_dtoa_r+0x982>
 800330e:	4638      	mov	r0, r7
 8003310:	9906      	ldr	r1, [sp, #24]
 8003312:	4622      	mov	r2, r4
 8003314:	f001 f8f8 	bl	8004508 <__lshift>
 8003318:	9006      	str	r0, [sp, #24]
 800331a:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800331e:	2d00      	cmp	r5, #0
 8003320:	f040 8201 	bne.w	8003726 <_dtoa_r+0xd8e>
 8003324:	f00a 0001 	and.w	r0, sl, #1
 8003328:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800332a:	9c06      	ldr	r4, [sp, #24]
 800332c:	900b      	str	r0, [sp, #44]	; 0x2c
 800332e:	4631      	mov	r1, r6
 8003330:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003332:	f7ff faa1 	bl	8002878 <quorem>
 8003336:	4621      	mov	r1, r4
 8003338:	9008      	str	r0, [sp, #32]
 800333a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800333c:	f001 f944 	bl	80045c8 <__mcmp>
 8003340:	4642      	mov	r2, r8
 8003342:	4681      	mov	r9, r0
 8003344:	4631      	mov	r1, r6
 8003346:	4638      	mov	r0, r7
 8003348:	f001 f95e 	bl	8004608 <__mdiff>
 800334c:	9a08      	ldr	r2, [sp, #32]
 800334e:	68c3      	ldr	r3, [r0, #12]
 8003350:	3230      	adds	r2, #48	; 0x30
 8003352:	4682      	mov	sl, r0
 8003354:	9206      	str	r2, [sp, #24]
 8003356:	f04f 0b01 	mov.w	fp, #1
 800335a:	2b00      	cmp	r3, #0
 800335c:	d03d      	beq.n	80033da <_dtoa_r+0xa42>
 800335e:	4638      	mov	r0, r7
 8003360:	4651      	mov	r1, sl
 8003362:	f000 fefd 	bl	8004160 <_Bfree>
 8003366:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003368:	ea5b 0303 	orrs.w	r3, fp, r3
 800336c:	d103      	bne.n	8003376 <_dtoa_r+0x9de>
 800336e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003370:	2800      	cmp	r0, #0
 8003372:	f000 8211 	beq.w	8003798 <_dtoa_r+0xe00>
 8003376:	f1b9 0f00 	cmp.w	r9, #0
 800337a:	f2c0 819f 	blt.w	80036bc <_dtoa_r+0xd24>
 800337e:	9826      	ldr	r0, [sp, #152]	; 0x98
 8003380:	ea59 0000 	orrs.w	r0, r9, r0
 8003384:	d103      	bne.n	800338e <_dtoa_r+0x9f6>
 8003386:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003388:	2900      	cmp	r1, #0
 800338a:	f000 8197 	beq.w	80036bc <_dtoa_r+0xd24>
 800338e:	f1bb 0f00 	cmp.w	fp, #0
 8003392:	f300 81ea 	bgt.w	800376a <_dtoa_r+0xdd2>
 8003396:	9a06      	ldr	r2, [sp, #24]
 8003398:	9809      	ldr	r0, [sp, #36]	; 0x24
 800339a:	f805 2b01 	strb.w	r2, [r5], #1
 800339e:	990e      	ldr	r1, [sp, #56]	; 0x38
 80033a0:	1a2b      	subs	r3, r5, r0
 80033a2:	428b      	cmp	r3, r1
 80033a4:	46aa      	mov	sl, r5
 80033a6:	f000 81db 	beq.w	8003760 <_dtoa_r+0xdc8>
 80033aa:	220a      	movs	r2, #10
 80033ac:	2300      	movs	r3, #0
 80033ae:	4638      	mov	r0, r7
 80033b0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80033b2:	f000 fedf 	bl	8004174 <__multadd>
 80033b6:	4544      	cmp	r4, r8
 80033b8:	900a      	str	r0, [sp, #40]	; 0x28
 80033ba:	d027      	beq.n	800340c <_dtoa_r+0xa74>
 80033bc:	4621      	mov	r1, r4
 80033be:	220a      	movs	r2, #10
 80033c0:	2300      	movs	r3, #0
 80033c2:	4638      	mov	r0, r7
 80033c4:	f000 fed6 	bl	8004174 <__multadd>
 80033c8:	4641      	mov	r1, r8
 80033ca:	4604      	mov	r4, r0
 80033cc:	220a      	movs	r2, #10
 80033ce:	4638      	mov	r0, r7
 80033d0:	2300      	movs	r3, #0
 80033d2:	f000 fecf 	bl	8004174 <__multadd>
 80033d6:	4680      	mov	r8, r0
 80033d8:	e7a9      	b.n	800332e <_dtoa_r+0x996>
 80033da:	980a      	ldr	r0, [sp, #40]	; 0x28
 80033dc:	4651      	mov	r1, sl
 80033de:	f001 f8f3 	bl	80045c8 <__mcmp>
 80033e2:	4683      	mov	fp, r0
 80033e4:	e7bb      	b.n	800335e <_dtoa_r+0x9c6>
 80033e6:	4638      	mov	r0, r7
 80033e8:	4621      	mov	r1, r4
 80033ea:	f000 feb9 	bl	8004160 <_Bfree>
 80033ee:	e587      	b.n	8002f00 <_dtoa_r+0x568>
 80033f0:	231c      	movs	r3, #28
 80033f2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80033f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80033f6:	18c0      	adds	r0, r0, r3
 80033f8:	18c9      	adds	r1, r1, r3
 80033fa:	900f      	str	r0, [sp, #60]	; 0x3c
 80033fc:	18e4      	adds	r4, r4, r3
 80033fe:	910b      	str	r1, [sp, #44]	; 0x2c
 8003400:	e538      	b.n	8002e74 <_dtoa_r+0x4dc>
 8003402:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003406:	4682      	mov	sl, r0
 8003408:	468b      	mov	fp, r1
 800340a:	e406      	b.n	8002c1a <_dtoa_r+0x282>
 800340c:	4621      	mov	r1, r4
 800340e:	4638      	mov	r0, r7
 8003410:	220a      	movs	r2, #10
 8003412:	2300      	movs	r3, #0
 8003414:	f000 feae 	bl	8004174 <__multadd>
 8003418:	4604      	mov	r4, r0
 800341a:	4680      	mov	r8, r0
 800341c:	e787      	b.n	800332e <_dtoa_r+0x996>
 800341e:	9c05      	ldr	r4, [sp, #20]
 8003420:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8003422:	9417      	str	r4, [sp, #92]	; 0x5c
 8003424:	e672      	b.n	800310c <_dtoa_r+0x774>
 8003426:	9d05      	ldr	r5, [sp, #20]
 8003428:	426c      	negs	r4, r5
 800342a:	2c00      	cmp	r4, #0
 800342c:	f000 80fb 	beq.w	8003626 <_dtoa_r+0xc8e>
 8003430:	4ba0      	ldr	r3, [pc, #640]	; (80036b4 <_dtoa_r+0xd1c>)
 8003432:	f004 020f 	and.w	r2, r4, #15
 8003436:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800343a:	4650      	mov	r0, sl
 800343c:	4659      	mov	r1, fp
 800343e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003442:	f002 fd79 	bl	8005f38 <__aeabi_dmul>
 8003446:	1124      	asrs	r4, r4, #4
 8003448:	4682      	mov	sl, r0
 800344a:	468b      	mov	fp, r1
 800344c:	f000 80eb 	beq.w	8003626 <_dtoa_r+0xc8e>
 8003450:	4d99      	ldr	r5, [pc, #612]	; (80036b8 <_dtoa_r+0xd20>)
 8003452:	2602      	movs	r6, #2
 8003454:	07e2      	lsls	r2, r4, #31
 8003456:	d504      	bpl.n	8003462 <_dtoa_r+0xaca>
 8003458:	e9d5 2300 	ldrd	r2, r3, [r5]
 800345c:	f002 fd6c 	bl	8005f38 <__aeabi_dmul>
 8003460:	3601      	adds	r6, #1
 8003462:	3508      	adds	r5, #8
 8003464:	1064      	asrs	r4, r4, #1
 8003466:	d1f5      	bne.n	8003454 <_dtoa_r+0xabc>
 8003468:	4682      	mov	sl, r0
 800346a:	468b      	mov	fp, r1
 800346c:	e612      	b.n	8003094 <_dtoa_r+0x6fc>
 800346e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8003470:	9606      	str	r6, [sp, #24]
 8003472:	e530      	b.n	8002ed6 <_dtoa_r+0x53e>
 8003474:	498f      	ldr	r1, [pc, #572]	; (80036b4 <_dtoa_r+0xd1c>)
 8003476:	1e6c      	subs	r4, r5, #1
 8003478:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 800347c:	4642      	mov	r2, r8
 800347e:	464b      	mov	r3, r9
 8003480:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003484:	9406      	str	r4, [sp, #24]
 8003486:	f002 fd57 	bl	8005f38 <__aeabi_dmul>
 800348a:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
 800348e:	4659      	mov	r1, fp
 8003490:	4650      	mov	r0, sl
 8003492:	f002 ffeb 	bl	800646c <__aeabi_d2iz>
 8003496:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003498:	4604      	mov	r4, r0
 800349a:	9111      	str	r1, [sp, #68]	; 0x44
 800349c:	f002 fce6 	bl	8005e6c <__aeabi_i2d>
 80034a0:	460b      	mov	r3, r1
 80034a2:	4602      	mov	r2, r0
 80034a4:	4659      	mov	r1, fp
 80034a6:	4650      	mov	r0, sl
 80034a8:	f002 fb92 	bl	8005bd0 <__aeabi_dsub>
 80034ac:	f104 0330 	add.w	r3, r4, #48	; 0x30
 80034b0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80034b2:	f804 3b01 	strb.w	r3, [r4], #1
 80034b6:	2d01      	cmp	r5, #1
 80034b8:	4682      	mov	sl, r0
 80034ba:	468b      	mov	fp, r1
 80034bc:	9411      	str	r4, [sp, #68]	; 0x44
 80034be:	46a0      	mov	r8, r4
 80034c0:	d020      	beq.n	8003504 <_dtoa_r+0xb6c>
 80034c2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80034c4:	1e66      	subs	r6, r4, #1
 80034c6:	1976      	adds	r6, r6, r5
 80034c8:	2300      	movs	r3, #0
 80034ca:	2200      	movs	r2, #0
 80034cc:	f2c4 0324 	movt	r3, #16420	; 0x4024
 80034d0:	f002 fd32 	bl	8005f38 <__aeabi_dmul>
 80034d4:	4689      	mov	r9, r1
 80034d6:	4680      	mov	r8, r0
 80034d8:	f002 ffc8 	bl	800646c <__aeabi_d2iz>
 80034dc:	4605      	mov	r5, r0
 80034de:	f002 fcc5 	bl	8005e6c <__aeabi_i2d>
 80034e2:	3530      	adds	r5, #48	; 0x30
 80034e4:	4602      	mov	r2, r0
 80034e6:	460b      	mov	r3, r1
 80034e8:	4640      	mov	r0, r8
 80034ea:	4649      	mov	r1, r9
 80034ec:	f002 fb70 	bl	8005bd0 <__aeabi_dsub>
 80034f0:	f804 5f01 	strb.w	r5, [r4, #1]!
 80034f4:	42b4      	cmp	r4, r6
 80034f6:	d1e7      	bne.n	80034c8 <_dtoa_r+0xb30>
 80034f8:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80034fa:	9c06      	ldr	r4, [sp, #24]
 80034fc:	4682      	mov	sl, r0
 80034fe:	468b      	mov	fp, r1
 8003500:	eb05 0804 	add.w	r8, r5, r4
 8003504:	2300      	movs	r3, #0
 8003506:	2200      	movs	r2, #0
 8003508:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
 800350c:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 8003510:	f002 fb60 	bl	8005bd4 <__adddf3>
 8003514:	4602      	mov	r2, r0
 8003516:	460b      	mov	r3, r1
 8003518:	4650      	mov	r0, sl
 800351a:	4659      	mov	r1, fp
 800351c:	f002 ff9c 	bl	8006458 <__aeabi_dcmpgt>
 8003520:	2800      	cmp	r0, #0
 8003522:	f000 808a 	beq.w	800363a <_dtoa_r+0xca2>
 8003526:	f818 6c01 	ldrb.w	r6, [r8, #-1]
 800352a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800352c:	e422      	b.n	8002d74 <_dtoa_r+0x3dc>
 800352e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8003530:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8003534:	e4e8      	b.n	8002f08 <_dtoa_r+0x570>
 8003536:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003538:	4631      	mov	r1, r6
 800353a:	f001 f845 	bl	80045c8 <__mcmp>
 800353e:	2800      	cmp	r0, #0
 8003540:	f6bf acad 	bge.w	8002e9e <_dtoa_r+0x506>
 8003544:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003546:	220a      	movs	r2, #10
 8003548:	4638      	mov	r0, r7
 800354a:	2300      	movs	r3, #0
 800354c:	f000 fe12 	bl	8004174 <__multadd>
 8003550:	9905      	ldr	r1, [sp, #20]
 8003552:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003554:	900a      	str	r0, [sp, #40]	; 0x28
 8003556:	3901      	subs	r1, #1
 8003558:	9105      	str	r1, [sp, #20]
 800355a:	2a00      	cmp	r2, #0
 800355c:	f040 8136 	bne.w	80037cc <_dtoa_r+0xe34>
 8003560:	9815      	ldr	r0, [sp, #84]	; 0x54
 8003562:	900e      	str	r0, [sp, #56]	; 0x38
 8003564:	e49b      	b.n	8002e9e <_dtoa_r+0x506>
 8003566:	6933      	ldr	r3, [r6, #16]
 8003568:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800356c:	6918      	ldr	r0, [r3, #16]
 800356e:	f000 fe91 	bl	8004294 <__hi0bits>
 8003572:	f1c0 0320 	rsb	r3, r0, #32
 8003576:	e46a      	b.n	8002e4e <_dtoa_r+0x4b6>
 8003578:	f1b9 0f0e 	cmp.w	r9, #14
 800357c:	bf8c      	ite	hi
 800357e:	2300      	movhi	r3, #0
 8003580:	2301      	movls	r3, #1
 8003582:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8003586:	2100      	movs	r1, #0
 8003588:	6479      	str	r1, [r7, #68]	; 0x44
 800358a:	401c      	ands	r4, r3
 800358c:	e543      	b.n	8003016 <_dtoa_r+0x67e>
 800358e:	2301      	movs	r3, #1
 8003590:	9315      	str	r3, [sp, #84]	; 0x54
 8003592:	930e      	str	r3, [sp, #56]	; 0x38
 8003594:	9327      	str	r3, [sp, #156]	; 0x9c
 8003596:	e7f6      	b.n	8003586 <_dtoa_r+0xbee>
 8003598:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800359a:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 800359e:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80035a2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80035a4:	e006      	b.n	80035b4 <_dtoa_r+0xc1c>
 80035a6:	4651      	mov	r1, sl
 80035a8:	4638      	mov	r0, r7
 80035aa:	220a      	movs	r2, #10
 80035ac:	2300      	movs	r3, #0
 80035ae:	f000 fde1 	bl	8004174 <__multadd>
 80035b2:	4682      	mov	sl, r0
 80035b4:	4631      	mov	r1, r6
 80035b6:	4650      	mov	r0, sl
 80035b8:	f7ff f95e 	bl	8002878 <quorem>
 80035bc:	3030      	adds	r0, #48	; 0x30
 80035be:	5528      	strb	r0, [r5, r4]
 80035c0:	3401      	adds	r4, #1
 80035c2:	45a0      	cmp	r8, r4
 80035c4:	dcef      	bgt.n	80035a6 <_dtoa_r+0xc0e>
 80035c6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80035c8:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 80035cc:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 80035d0:	4681      	mov	r9, r0
 80035d2:	2c01      	cmp	r4, #1
 80035d4:	bfac      	ite	ge
 80035d6:	44a2      	addge	sl, r4
 80035d8:	f10a 0a01 	addlt.w	sl, sl, #1
 80035dc:	2400      	movs	r4, #0
 80035de:	2201      	movs	r2, #1
 80035e0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80035e2:	4638      	mov	r0, r7
 80035e4:	f000 ff90 	bl	8004508 <__lshift>
 80035e8:	4631      	mov	r1, r6
 80035ea:	900a      	str	r0, [sp, #40]	; 0x28
 80035ec:	f000 ffec 	bl	80045c8 <__mcmp>
 80035f0:	2800      	cmp	r0, #0
 80035f2:	f340 8082 	ble.w	80036fa <_dtoa_r+0xd62>
 80035f6:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
 80035fa:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80035fc:	1c6a      	adds	r2, r5, #1
 80035fe:	e003      	b.n	8003608 <_dtoa_r+0xc70>
 8003600:	f81a 3c02 	ldrb.w	r3, [sl, #-2]
 8003604:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8003608:	2b39      	cmp	r3, #57	; 0x39
 800360a:	f040 8084 	bne.w	8003716 <_dtoa_r+0xd7e>
 800360e:	4592      	cmp	sl, r2
 8003610:	d1f6      	bne.n	8003600 <_dtoa_r+0xc68>
 8003612:	9805      	ldr	r0, [sp, #20]
 8003614:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8003616:	3001      	adds	r0, #1
 8003618:	2331      	movs	r3, #49	; 0x31
 800361a:	9005      	str	r0, [sp, #20]
 800361c:	f80a 3c01 	strb.w	r3, [sl, #-1]
 8003620:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8003624:	e461      	b.n	8002eea <_dtoa_r+0x552>
 8003626:	2602      	movs	r6, #2
 8003628:	e534      	b.n	8003094 <_dtoa_r+0x6fc>
 800362a:	4638      	mov	r0, r7
 800362c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800362e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003630:	f000 ff1e 	bl	8004470 <__pow5mult>
 8003634:	900a      	str	r0, [sp, #40]	; 0x28
 8003636:	f7ff bbf2 	b.w	8002e1e <_dtoa_r+0x486>
 800363a:	2100      	movs	r1, #0
 800363c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8003640:	2000      	movs	r0, #0
 8003642:	f6c3 71e0 	movt	r1, #16352	; 0x3fe0
 8003646:	f002 fac3 	bl	8005bd0 <__aeabi_dsub>
 800364a:	4602      	mov	r2, r0
 800364c:	460b      	mov	r3, r1
 800364e:	4650      	mov	r0, sl
 8003650:	4659      	mov	r1, fp
 8003652:	f002 fee3 	bl	800641c <__aeabi_dcmplt>
 8003656:	2800      	cmp	r0, #0
 8003658:	f43f aed3 	beq.w	8003402 <_dtoa_r+0xa6a>
 800365c:	4642      	mov	r2, r8
 800365e:	f818 3d01 	ldrb.w	r3, [r8, #-1]!
 8003662:	2b30      	cmp	r3, #48	; 0x30
 8003664:	d0fa      	beq.n	800365c <_dtoa_r+0xcc4>
 8003666:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8003668:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800366a:	9405      	str	r4, [sp, #20]
 800366c:	9209      	str	r2, [sp, #36]	; 0x24
 800366e:	e44b      	b.n	8002f08 <_dtoa_r+0x570>
 8003670:	4638      	mov	r0, r7
 8003672:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003674:	f000 fefc 	bl	8004470 <__pow5mult>
 8003678:	900a      	str	r0, [sp, #40]	; 0x28
 800367a:	f7ff bbd0 	b.w	8002e1e <_dtoa_r+0x486>
 800367e:	2600      	movs	r6, #0
 8003680:	9606      	str	r6, [sp, #24]
 8003682:	e4a5      	b.n	8002fd0 <_dtoa_r+0x638>
 8003684:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8003686:	2d00      	cmp	r5, #0
 8003688:	d064      	beq.n	8003754 <_dtoa_r+0xdbc>
 800368a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800368e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003690:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8003692:	e47d      	b.n	8002f90 <_dtoa_r+0x5f8>
 8003694:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8003696:	f7ff bb6d 	b.w	8002d74 <_dtoa_r+0x3dc>
 800369a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 800369c:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 80036a0:	1c72      	adds	r2, r6, #1
 80036a2:	b2d2      	uxtb	r2, r2
 80036a4:	9405      	str	r4, [sp, #20]
 80036a6:	f7ff bb7b 	b.w	8002da0 <_dtoa_r+0x408>
 80036aa:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80036ac:	2300      	movs	r3, #0
 80036ae:	1b04      	subs	r4, r0, r4
 80036b0:	e46e      	b.n	8002f90 <_dtoa_r+0x5f8>
 80036b2:	bf00      	nop
 80036b4:	08006698 	.word	0x08006698
 80036b8:	08006788 	.word	0x08006788
 80036bc:	f1bb 0f00 	cmp.w	fp, #0
 80036c0:	f8dd 9018 	ldr.w	r9, [sp, #24]
 80036c4:	dd10      	ble.n	80036e8 <_dtoa_r+0xd50>
 80036c6:	2201      	movs	r2, #1
 80036c8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80036ca:	4638      	mov	r0, r7
 80036cc:	f000 ff1c 	bl	8004508 <__lshift>
 80036d0:	4631      	mov	r1, r6
 80036d2:	900a      	str	r0, [sp, #40]	; 0x28
 80036d4:	f000 ff78 	bl	80045c8 <__mcmp>
 80036d8:	2800      	cmp	r0, #0
 80036da:	dd6b      	ble.n	80037b4 <_dtoa_r+0xe1c>
 80036dc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80036e0:	d053      	beq.n	800378a <_dtoa_r+0xdf2>
 80036e2:	9b08      	ldr	r3, [sp, #32]
 80036e4:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80036e8:	462b      	mov	r3, r5
 80036ea:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80036ec:	f803 9b01 	strb.w	r9, [r3], #1
 80036f0:	f8cd 8018 	str.w	r8, [sp, #24]
 80036f4:	9309      	str	r3, [sp, #36]	; 0x24
 80036f6:	f7ff bbf8 	b.w	8002eea <_dtoa_r+0x552>
 80036fa:	d103      	bne.n	8003704 <_dtoa_r+0xd6c>
 80036fc:	f019 0f01 	tst.w	r9, #1
 8003700:	f47f af79 	bne.w	80035f6 <_dtoa_r+0xc5e>
 8003704:	4652      	mov	r2, sl
 8003706:	f81a 3d01 	ldrb.w	r3, [sl, #-1]!
 800370a:	2b30      	cmp	r3, #48	; 0x30
 800370c:	d0fa      	beq.n	8003704 <_dtoa_r+0xd6c>
 800370e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8003710:	9209      	str	r2, [sp, #36]	; 0x24
 8003712:	f7ff bbea 	b.w	8002eea <_dtoa_r+0x552>
 8003716:	3301      	adds	r3, #1
 8003718:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800371a:	f80a 3c01 	strb.w	r3, [sl, #-1]
 800371e:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8003722:	f7ff bbe2 	b.w	8002eea <_dtoa_r+0x552>
 8003726:	9c06      	ldr	r4, [sp, #24]
 8003728:	4638      	mov	r0, r7
 800372a:	6861      	ldr	r1, [r4, #4]
 800372c:	f000 fcf2 	bl	8004114 <_Balloc>
 8003730:	9d06      	ldr	r5, [sp, #24]
 8003732:	692a      	ldr	r2, [r5, #16]
 8003734:	3202      	adds	r2, #2
 8003736:	4604      	mov	r4, r0
 8003738:	0092      	lsls	r2, r2, #2
 800373a:	f105 010c 	add.w	r1, r5, #12
 800373e:	f100 000c 	add.w	r0, r0, #12
 8003742:	f000 fc9f 	bl	8004084 <memcpy>
 8003746:	4638      	mov	r0, r7
 8003748:	4621      	mov	r1, r4
 800374a:	2201      	movs	r2, #1
 800374c:	f000 fedc 	bl	8004508 <__lshift>
 8003750:	4680      	mov	r8, r0
 8003752:	e5e7      	b.n	8003324 <_dtoa_r+0x98c>
 8003754:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8003756:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003758:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800375a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800375e:	e417      	b.n	8002f90 <_dtoa_r+0x5f8>
 8003760:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8003764:	f8cd 8018 	str.w	r8, [sp, #24]
 8003768:	e739      	b.n	80035de <_dtoa_r+0xc46>
 800376a:	f8dd 9018 	ldr.w	r9, [sp, #24]
 800376e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8003772:	d00a      	beq.n	800378a <_dtoa_r+0xdf2>
 8003774:	462b      	mov	r3, r5
 8003776:	f109 0901 	add.w	r9, r9, #1
 800377a:	f803 9b01 	strb.w	r9, [r3], #1
 800377e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8003780:	f8cd 8018 	str.w	r8, [sp, #24]
 8003784:	9309      	str	r3, [sp, #36]	; 0x24
 8003786:	f7ff bbb0 	b.w	8002eea <_dtoa_r+0x552>
 800378a:	46aa      	mov	sl, r5
 800378c:	2339      	movs	r3, #57	; 0x39
 800378e:	f80a 3b01 	strb.w	r3, [sl], #1
 8003792:	f8cd 8018 	str.w	r8, [sp, #24]
 8003796:	e730      	b.n	80035fa <_dtoa_r+0xc62>
 8003798:	464b      	mov	r3, r9
 800379a:	f8dd 9018 	ldr.w	r9, [sp, #24]
 800379e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80037a2:	d0f2      	beq.n	800378a <_dtoa_r+0xdf2>
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	dc9c      	bgt.n	80036e2 <_dtoa_r+0xd4a>
 80037a8:	e79e      	b.n	80036e8 <_dtoa_r+0xd50>
 80037aa:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80037ac:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80037ae:	9409      	str	r4, [sp, #36]	; 0x24
 80037b0:	f7ff bbaa 	b.w	8002f08 <_dtoa_r+0x570>
 80037b4:	d198      	bne.n	80036e8 <_dtoa_r+0xd50>
 80037b6:	f019 0f01 	tst.w	r9, #1
 80037ba:	d095      	beq.n	80036e8 <_dtoa_r+0xd50>
 80037bc:	e78e      	b.n	80036dc <_dtoa_r+0xd44>
 80037be:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80037c0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80037c2:	9405      	str	r4, [sp, #20]
 80037c4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80037c6:	9409      	str	r4, [sp, #36]	; 0x24
 80037c8:	f7ff bb9e 	b.w	8002f08 <_dtoa_r+0x570>
 80037cc:	2300      	movs	r3, #0
 80037ce:	4638      	mov	r0, r7
 80037d0:	9906      	ldr	r1, [sp, #24]
 80037d2:	220a      	movs	r2, #10
 80037d4:	f000 fcce 	bl	8004174 <__multadd>
 80037d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80037da:	9006      	str	r0, [sp, #24]
 80037dc:	930e      	str	r3, [sp, #56]	; 0x38
 80037de:	f7ff bb5e 	b.w	8002e9e <_dtoa_r+0x506>
 80037e2:	f43f ab47 	beq.w	8002e74 <_dtoa_r+0x4dc>
 80037e6:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
 80037ea:	e602      	b.n	80033f2 <_dtoa_r+0xa5a>
 80037ec:	f3af 8000 	nop.w

080037f0 <_malloc_trim_r>:
 80037f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037f2:	4d22      	ldr	r5, [pc, #136]	; (800387c <_malloc_trim_r+0x8c>)
 80037f4:	460f      	mov	r7, r1
 80037f6:	4604      	mov	r4, r0
 80037f8:	f000 fc88 	bl	800410c <__malloc_lock>
 80037fc:	68ab      	ldr	r3, [r5, #8]
 80037fe:	685e      	ldr	r6, [r3, #4]
 8003800:	f026 0603 	bic.w	r6, r6, #3
 8003804:	f606 73ef 	addw	r3, r6, #4079	; 0xfef
 8003808:	1bdf      	subs	r7, r3, r7
 800380a:	0b3f      	lsrs	r7, r7, #12
 800380c:	3f01      	subs	r7, #1
 800380e:	033f      	lsls	r7, r7, #12
 8003810:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
 8003814:	4620      	mov	r0, r4
 8003816:	db07      	blt.n	8003828 <_malloc_trim_r+0x38>
 8003818:	2100      	movs	r1, #0
 800381a:	f001 f907 	bl	8004a2c <_sbrk_r>
 800381e:	68ab      	ldr	r3, [r5, #8]
 8003820:	199b      	adds	r3, r3, r6
 8003822:	4298      	cmp	r0, r3
 8003824:	4620      	mov	r0, r4
 8003826:	d003      	beq.n	8003830 <_malloc_trim_r+0x40>
 8003828:	f000 fc72 	bl	8004110 <__malloc_unlock>
 800382c:	2000      	movs	r0, #0
 800382e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003830:	4279      	negs	r1, r7
 8003832:	f001 f8fb 	bl	8004a2c <_sbrk_r>
 8003836:	3001      	adds	r0, #1
 8003838:	d00d      	beq.n	8003856 <_malloc_trim_r+0x66>
 800383a:	4b11      	ldr	r3, [pc, #68]	; (8003880 <_malloc_trim_r+0x90>)
 800383c:	68aa      	ldr	r2, [r5, #8]
 800383e:	6819      	ldr	r1, [r3, #0]
 8003840:	1bf6      	subs	r6, r6, r7
 8003842:	f046 0601 	orr.w	r6, r6, #1
 8003846:	1bcf      	subs	r7, r1, r7
 8003848:	4620      	mov	r0, r4
 800384a:	6056      	str	r6, [r2, #4]
 800384c:	601f      	str	r7, [r3, #0]
 800384e:	f000 fc5f 	bl	8004110 <__malloc_unlock>
 8003852:	2001      	movs	r0, #1
 8003854:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003856:	2100      	movs	r1, #0
 8003858:	4620      	mov	r0, r4
 800385a:	f001 f8e7 	bl	8004a2c <_sbrk_r>
 800385e:	68ab      	ldr	r3, [r5, #8]
 8003860:	1ac2      	subs	r2, r0, r3
 8003862:	2a0f      	cmp	r2, #15
 8003864:	dd07      	ble.n	8003876 <_malloc_trim_r+0x86>
 8003866:	4907      	ldr	r1, [pc, #28]	; (8003884 <_malloc_trim_r+0x94>)
 8003868:	6809      	ldr	r1, [r1, #0]
 800386a:	1a40      	subs	r0, r0, r1
 800386c:	4904      	ldr	r1, [pc, #16]	; (8003880 <_malloc_trim_r+0x90>)
 800386e:	f042 0201 	orr.w	r2, r2, #1
 8003872:	6008      	str	r0, [r1, #0]
 8003874:	605a      	str	r2, [r3, #4]
 8003876:	4620      	mov	r0, r4
 8003878:	e7d6      	b.n	8003828 <_malloc_trim_r+0x38>
 800387a:	bf00      	nop
 800387c:	2000054c 	.word	0x2000054c
 8003880:	2000097c 	.word	0x2000097c
 8003884:	20000954 	.word	0x20000954

08003888 <_free_r>:
 8003888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800388c:	460d      	mov	r5, r1
 800388e:	4604      	mov	r4, r0
 8003890:	2900      	cmp	r1, #0
 8003892:	d06f      	beq.n	8003974 <_free_r+0xec>
 8003894:	f000 fc3a 	bl	800410c <__malloc_lock>
 8003898:	f855 0c04 	ldr.w	r0, [r5, #-4]
 800389c:	4e58      	ldr	r6, [pc, #352]	; (8003a00 <_free_r+0x178>)
 800389e:	f1a5 0108 	sub.w	r1, r5, #8
 80038a2:	f020 0301 	bic.w	r3, r0, #1
 80038a6:	18ca      	adds	r2, r1, r3
 80038a8:	f8d6 c008 	ldr.w	ip, [r6, #8]
 80038ac:	6857      	ldr	r7, [r2, #4]
 80038ae:	4594      	cmp	ip, r2
 80038b0:	f027 0703 	bic.w	r7, r7, #3
 80038b4:	d07c      	beq.n	80039b0 <_free_r+0x128>
 80038b6:	f010 0001 	ands.w	r0, r0, #1
 80038ba:	6057      	str	r7, [r2, #4]
 80038bc:	d049      	beq.n	8003952 <_free_r+0xca>
 80038be:	2000      	movs	r0, #0
 80038c0:	19d5      	adds	r5, r2, r7
 80038c2:	686d      	ldr	r5, [r5, #4]
 80038c4:	f015 0f01 	tst.w	r5, #1
 80038c8:	d106      	bne.n	80038d8 <_free_r+0x50>
 80038ca:	19db      	adds	r3, r3, r7
 80038cc:	6895      	ldr	r5, [r2, #8]
 80038ce:	2800      	cmp	r0, #0
 80038d0:	d062      	beq.n	8003998 <_free_r+0x110>
 80038d2:	68d2      	ldr	r2, [r2, #12]
 80038d4:	60ea      	str	r2, [r5, #12]
 80038d6:	6095      	str	r5, [r2, #8]
 80038d8:	f043 0201 	orr.w	r2, r3, #1
 80038dc:	604a      	str	r2, [r1, #4]
 80038de:	50cb      	str	r3, [r1, r3]
 80038e0:	bb90      	cbnz	r0, 8003948 <_free_r+0xc0>
 80038e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038e6:	d347      	bcc.n	8003978 <_free_r+0xf0>
 80038e8:	099d      	lsrs	r5, r3, #6
 80038ea:	3538      	adds	r5, #56	; 0x38
 80038ec:	0a5a      	lsrs	r2, r3, #9
 80038ee:	00e8      	lsls	r0, r5, #3
 80038f0:	2a04      	cmp	r2, #4
 80038f2:	d916      	bls.n	8003922 <_free_r+0x9a>
 80038f4:	f102 055b 	add.w	r5, r2, #91	; 0x5b
 80038f8:	00e8      	lsls	r0, r5, #3
 80038fa:	2a14      	cmp	r2, #20
 80038fc:	d911      	bls.n	8003922 <_free_r+0x9a>
 80038fe:	0b1d      	lsrs	r5, r3, #12
 8003900:	356e      	adds	r5, #110	; 0x6e
 8003902:	00e8      	lsls	r0, r5, #3
 8003904:	2a54      	cmp	r2, #84	; 0x54
 8003906:	d90c      	bls.n	8003922 <_free_r+0x9a>
 8003908:	0bdd      	lsrs	r5, r3, #15
 800390a:	3577      	adds	r5, #119	; 0x77
 800390c:	00e8      	lsls	r0, r5, #3
 800390e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8003912:	d906      	bls.n	8003922 <_free_r+0x9a>
 8003914:	f240 5054 	movw	r0, #1364	; 0x554
 8003918:	4282      	cmp	r2, r0
 800391a:	d86d      	bhi.n	80039f8 <_free_r+0x170>
 800391c:	0c9d      	lsrs	r5, r3, #18
 800391e:	357c      	adds	r5, #124	; 0x7c
 8003920:	00e8      	lsls	r0, r5, #3
 8003922:	1986      	adds	r6, r0, r6
 8003924:	4836      	ldr	r0, [pc, #216]	; (8003a00 <_free_r+0x178>)
 8003926:	68b2      	ldr	r2, [r6, #8]
 8003928:	42b2      	cmp	r2, r6
 800392a:	d103      	bne.n	8003934 <_free_r+0xac>
 800392c:	e05b      	b.n	80039e6 <_free_r+0x15e>
 800392e:	6892      	ldr	r2, [r2, #8]
 8003930:	4296      	cmp	r6, r2
 8003932:	d004      	beq.n	800393e <_free_r+0xb6>
 8003934:	6850      	ldr	r0, [r2, #4]
 8003936:	f020 0003 	bic.w	r0, r0, #3
 800393a:	4283      	cmp	r3, r0
 800393c:	d3f7      	bcc.n	800392e <_free_r+0xa6>
 800393e:	68d3      	ldr	r3, [r2, #12]
 8003940:	60cb      	str	r3, [r1, #12]
 8003942:	608a      	str	r2, [r1, #8]
 8003944:	60d1      	str	r1, [r2, #12]
 8003946:	6099      	str	r1, [r3, #8]
 8003948:	4620      	mov	r0, r4
 800394a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800394e:	f000 bbdf 	b.w	8004110 <__malloc_unlock>
 8003952:	f855 cc08 	ldr.w	ip, [r5, #-8]
 8003956:	ebcc 0101 	rsb	r1, ip, r1
 800395a:	f106 0808 	add.w	r8, r6, #8
 800395e:	688d      	ldr	r5, [r1, #8]
 8003960:	4545      	cmp	r5, r8
 8003962:	4463      	add	r3, ip
 8003964:	d03d      	beq.n	80039e2 <_free_r+0x15a>
 8003966:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 800396a:	f8c5 c00c 	str.w	ip, [r5, #12]
 800396e:	f8cc 5008 	str.w	r5, [ip, #8]
 8003972:	e7a5      	b.n	80038c0 <_free_r+0x38>
 8003974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003978:	08db      	lsrs	r3, r3, #3
 800397a:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 800397e:	6875      	ldr	r5, [r6, #4]
 8003980:	6890      	ldr	r0, [r2, #8]
 8003982:	60ca      	str	r2, [r1, #12]
 8003984:	109b      	asrs	r3, r3, #2
 8003986:	2701      	movs	r7, #1
 8003988:	fa17 f303 	lsls.w	r3, r7, r3
 800398c:	432b      	orrs	r3, r5
 800398e:	6088      	str	r0, [r1, #8]
 8003990:	6073      	str	r3, [r6, #4]
 8003992:	6091      	str	r1, [r2, #8]
 8003994:	60c1      	str	r1, [r0, #12]
 8003996:	e7d7      	b.n	8003948 <_free_r+0xc0>
 8003998:	4f1a      	ldr	r7, [pc, #104]	; (8003a04 <_free_r+0x17c>)
 800399a:	42bd      	cmp	r5, r7
 800399c:	d199      	bne.n	80038d2 <_free_r+0x4a>
 800399e:	f043 0201 	orr.w	r2, r3, #1
 80039a2:	6171      	str	r1, [r6, #20]
 80039a4:	6131      	str	r1, [r6, #16]
 80039a6:	60cd      	str	r5, [r1, #12]
 80039a8:	608d      	str	r5, [r1, #8]
 80039aa:	604a      	str	r2, [r1, #4]
 80039ac:	50cb      	str	r3, [r1, r3]
 80039ae:	e7cb      	b.n	8003948 <_free_r+0xc0>
 80039b0:	07c2      	lsls	r2, r0, #31
 80039b2:	443b      	add	r3, r7
 80039b4:	d407      	bmi.n	80039c6 <_free_r+0x13e>
 80039b6:	f855 2c08 	ldr.w	r2, [r5, #-8]
 80039ba:	1a89      	subs	r1, r1, r2
 80039bc:	189b      	adds	r3, r3, r2
 80039be:	6888      	ldr	r0, [r1, #8]
 80039c0:	68ca      	ldr	r2, [r1, #12]
 80039c2:	60c2      	str	r2, [r0, #12]
 80039c4:	6090      	str	r0, [r2, #8]
 80039c6:	4a10      	ldr	r2, [pc, #64]	; (8003a08 <_free_r+0x180>)
 80039c8:	60b1      	str	r1, [r6, #8]
 80039ca:	6812      	ldr	r2, [r2, #0]
 80039cc:	f043 0001 	orr.w	r0, r3, #1
 80039d0:	4293      	cmp	r3, r2
 80039d2:	6048      	str	r0, [r1, #4]
 80039d4:	d3b8      	bcc.n	8003948 <_free_r+0xc0>
 80039d6:	4b0d      	ldr	r3, [pc, #52]	; (8003a0c <_free_r+0x184>)
 80039d8:	4620      	mov	r0, r4
 80039da:	6819      	ldr	r1, [r3, #0]
 80039dc:	f7ff ff08 	bl	80037f0 <_malloc_trim_r>
 80039e0:	e7b2      	b.n	8003948 <_free_r+0xc0>
 80039e2:	2001      	movs	r0, #1
 80039e4:	e76c      	b.n	80038c0 <_free_r+0x38>
 80039e6:	6843      	ldr	r3, [r0, #4]
 80039e8:	10ad      	asrs	r5, r5, #2
 80039ea:	2601      	movs	r6, #1
 80039ec:	fa16 f505 	lsls.w	r5, r6, r5
 80039f0:	432b      	orrs	r3, r5
 80039f2:	6043      	str	r3, [r0, #4]
 80039f4:	4613      	mov	r3, r2
 80039f6:	e7a3      	b.n	8003940 <_free_r+0xb8>
 80039f8:	f44f 707c 	mov.w	r0, #1008	; 0x3f0
 80039fc:	257e      	movs	r5, #126	; 0x7e
 80039fe:	e790      	b.n	8003922 <_free_r+0x9a>
 8003a00:	2000054c 	.word	0x2000054c
 8003a04:	20000554 	.word	0x20000554
 8003a08:	20000958 	.word	0x20000958
 8003a0c:	20000978 	.word	0x20000978

08003a10 <_setlocale_r>:
 8003a10:	b510      	push	{r4, lr}
 8003a12:	4614      	mov	r4, r2
 8003a14:	b122      	cbz	r2, 8003a20 <_setlocale_r+0x10>
 8003a16:	4610      	mov	r0, r2
 8003a18:	490b      	ldr	r1, [pc, #44]	; (8003a48 <_setlocale_r+0x38>)
 8003a1a:	f001 f819 	bl	8004a50 <strcmp>
 8003a1e:	b908      	cbnz	r0, 8003a24 <_setlocale_r+0x14>
 8003a20:	480a      	ldr	r0, [pc, #40]	; (8003a4c <_setlocale_r+0x3c>)
 8003a22:	bd10      	pop	{r4, pc}
 8003a24:	4620      	mov	r0, r4
 8003a26:	4909      	ldr	r1, [pc, #36]	; (8003a4c <_setlocale_r+0x3c>)
 8003a28:	f001 f812 	bl	8004a50 <strcmp>
 8003a2c:	b908      	cbnz	r0, 8003a32 <_setlocale_r+0x22>
 8003a2e:	4807      	ldr	r0, [pc, #28]	; (8003a4c <_setlocale_r+0x3c>)
 8003a30:	bd10      	pop	{r4, pc}
 8003a32:	4620      	mov	r0, r4
 8003a34:	4906      	ldr	r1, [pc, #24]	; (8003a50 <_setlocale_r+0x40>)
 8003a36:	f001 f80b 	bl	8004a50 <strcmp>
 8003a3a:	4b04      	ldr	r3, [pc, #16]	; (8003a4c <_setlocale_r+0x3c>)
 8003a3c:	2800      	cmp	r0, #0
 8003a3e:	bf0c      	ite	eq
 8003a40:	4618      	moveq	r0, r3
 8003a42:	2000      	movne	r0, #0
 8003a44:	bd10      	pop	{r4, pc}
 8003a46:	bf00      	nop
 8003a48:	080068e4 	.word	0x080068e4
 8003a4c:	080068e0 	.word	0x080068e0
 8003a50:	080068ac 	.word	0x080068ac

08003a54 <__locale_charset>:
 8003a54:	f240 40d0 	movw	r0, #1232	; 0x4d0
 8003a58:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003a5c:	4770      	bx	lr
 8003a5e:	bf00      	nop

08003a60 <__locale_mb_cur_max>:
 8003a60:	f240 43d0 	movw	r3, #1232	; 0x4d0
 8003a64:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003a68:	6a18      	ldr	r0, [r3, #32]
 8003a6a:	4770      	bx	lr

08003a6c <__locale_msgcharset>:
 8003a6c:	4800      	ldr	r0, [pc, #0]	; (8003a70 <__locale_msgcharset+0x4>)
 8003a6e:	4770      	bx	lr
 8003a70:	200004f4 	.word	0x200004f4

08003a74 <__locale_cjk_lang>:
 8003a74:	2000      	movs	r0, #0
 8003a76:	4770      	bx	lr

08003a78 <_localeconv_r>:
 8003a78:	4800      	ldr	r0, [pc, #0]	; (8003a7c <_localeconv_r+0x4>)
 8003a7a:	4770      	bx	lr
 8003a7c:	20000514 	.word	0x20000514

08003a80 <setlocale>:
 8003a80:	b410      	push	{r4}
 8003a82:	f240 03a0 	movw	r3, #160	; 0xa0
 8003a86:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003a8a:	4604      	mov	r4, r0
 8003a8c:	6818      	ldr	r0, [r3, #0]
 8003a8e:	460a      	mov	r2, r1
 8003a90:	4621      	mov	r1, r4
 8003a92:	bc10      	pop	{r4}
 8003a94:	e7bc      	b.n	8003a10 <_setlocale_r>
 8003a96:	bf00      	nop

08003a98 <localeconv>:
 8003a98:	4800      	ldr	r0, [pc, #0]	; (8003a9c <localeconv+0x4>)
 8003a9a:	4770      	bx	lr
 8003a9c:	20000514 	.word	0x20000514

08003aa0 <_malloc_r>:
 8003aa0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003aa4:	f101 040b 	add.w	r4, r1, #11
 8003aa8:	2c16      	cmp	r4, #22
 8003aaa:	4605      	mov	r5, r0
 8003aac:	d92a      	bls.n	8003b04 <_malloc_r+0x64>
 8003aae:	f024 0407 	bic.w	r4, r4, #7
 8003ab2:	0fe3      	lsrs	r3, r4, #31
 8003ab4:	428c      	cmp	r4, r1
 8003ab6:	bf2c      	ite	cs
 8003ab8:	4619      	movcs	r1, r3
 8003aba:	f043 0101 	orrcc.w	r1, r3, #1
 8003abe:	bb51      	cbnz	r1, 8003b16 <_malloc_r+0x76>
 8003ac0:	4628      	mov	r0, r5
 8003ac2:	f000 fb23 	bl	800410c <__malloc_lock>
 8003ac6:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8003aca:	d22a      	bcs.n	8003b22 <_malloc_r+0x82>
 8003acc:	4e7d      	ldr	r6, [pc, #500]	; (8003cc4 <_malloc_r+0x224>)
 8003ace:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
 8003ad2:	eb06 03ce 	add.w	r3, r6, lr, lsl #3
 8003ad6:	68df      	ldr	r7, [r3, #12]
 8003ad8:	429f      	cmp	r7, r3
 8003ada:	f000 8235 	beq.w	8003f48 <_malloc_r+0x4a8>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	68fa      	ldr	r2, [r7, #12]
 8003ae2:	68b9      	ldr	r1, [r7, #8]
 8003ae4:	f023 0303 	bic.w	r3, r3, #3
 8003ae8:	18fb      	adds	r3, r7, r3
 8003aea:	60ca      	str	r2, [r1, #12]
 8003aec:	6858      	ldr	r0, [r3, #4]
 8003aee:	6091      	str	r1, [r2, #8]
 8003af0:	f040 0201 	orr.w	r2, r0, #1
 8003af4:	605a      	str	r2, [r3, #4]
 8003af6:	4628      	mov	r0, r5
 8003af8:	f000 fb0a 	bl	8004110 <__malloc_unlock>
 8003afc:	3708      	adds	r7, #8
 8003afe:	4638      	mov	r0, r7
 8003b00:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b04:	2300      	movs	r3, #0
 8003b06:	2410      	movs	r4, #16
 8003b08:	428c      	cmp	r4, r1
 8003b0a:	bf2c      	ite	cs
 8003b0c:	4619      	movcs	r1, r3
 8003b0e:	f043 0101 	orrcc.w	r1, r3, #1
 8003b12:	2900      	cmp	r1, #0
 8003b14:	d0d4      	beq.n	8003ac0 <_malloc_r+0x20>
 8003b16:	230c      	movs	r3, #12
 8003b18:	2700      	movs	r7, #0
 8003b1a:	602b      	str	r3, [r5, #0]
 8003b1c:	4638      	mov	r0, r7
 8003b1e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b22:	ea5f 2e54 	movs.w	lr, r4, lsr #9
 8003b26:	bf04      	itt	eq
 8003b28:	ea4f 0ed4 	moveq.w	lr, r4, lsr #3
 8003b2c:	ea4f 01ce 	moveq.w	r1, lr, lsl #3
 8003b30:	f040 8081 	bne.w	8003c36 <_malloc_r+0x196>
 8003b34:	4e63      	ldr	r6, [pc, #396]	; (8003cc4 <_malloc_r+0x224>)
 8003b36:	1871      	adds	r1, r6, r1
 8003b38:	68cf      	ldr	r7, [r1, #12]
 8003b3a:	42b9      	cmp	r1, r7
 8003b3c:	d106      	bne.n	8003b4c <_malloc_r+0xac>
 8003b3e:	e00d      	b.n	8003b5c <_malloc_r+0xbc>
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	f280 8169 	bge.w	8003e18 <_malloc_r+0x378>
 8003b46:	68ff      	ldr	r7, [r7, #12]
 8003b48:	42b9      	cmp	r1, r7
 8003b4a:	d007      	beq.n	8003b5c <_malloc_r+0xbc>
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	f022 0203 	bic.w	r2, r2, #3
 8003b52:	1b13      	subs	r3, r2, r4
 8003b54:	2b0f      	cmp	r3, #15
 8003b56:	ddf3      	ble.n	8003b40 <_malloc_r+0xa0>
 8003b58:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 8003b5c:	f10e 0e01 	add.w	lr, lr, #1
 8003b60:	4a58      	ldr	r2, [pc, #352]	; (8003cc4 <_malloc_r+0x224>)
 8003b62:	6937      	ldr	r7, [r6, #16]
 8003b64:	f102 0c08 	add.w	ip, r2, #8
 8003b68:	4567      	cmp	r7, ip
 8003b6a:	bf08      	it	eq
 8003b6c:	6853      	ldreq	r3, [r2, #4]
 8003b6e:	d023      	beq.n	8003bb8 <_malloc_r+0x118>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f023 0303 	bic.w	r3, r3, #3
 8003b76:	1b19      	subs	r1, r3, r4
 8003b78:	290f      	cmp	r1, #15
 8003b7a:	f300 81b4 	bgt.w	8003ee6 <_malloc_r+0x446>
 8003b7e:	2900      	cmp	r1, #0
 8003b80:	f8c2 c014 	str.w	ip, [r2, #20]
 8003b84:	f8c2 c010 	str.w	ip, [r2, #16]
 8003b88:	f280 808f 	bge.w	8003caa <_malloc_r+0x20a>
 8003b8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b90:	f080 8161 	bcs.w	8003e56 <_malloc_r+0x3b6>
 8003b94:	08db      	lsrs	r3, r3, #3
 8003b96:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8003b9a:	f8d2 8004 	ldr.w	r8, [r2, #4]
 8003b9e:	6888      	ldr	r0, [r1, #8]
 8003ba0:	60f9      	str	r1, [r7, #12]
 8003ba2:	109b      	asrs	r3, r3, #2
 8003ba4:	f04f 0901 	mov.w	r9, #1
 8003ba8:	fa09 f303 	lsl.w	r3, r9, r3
 8003bac:	ea43 0308 	orr.w	r3, r3, r8
 8003bb0:	60b8      	str	r0, [r7, #8]
 8003bb2:	6053      	str	r3, [r2, #4]
 8003bb4:	608f      	str	r7, [r1, #8]
 8003bb6:	60c7      	str	r7, [r0, #12]
 8003bb8:	2001      	movs	r0, #1
 8003bba:	ea4f 02ae 	mov.w	r2, lr, asr #2
 8003bbe:	4090      	lsls	r0, r2
 8003bc0:	4298      	cmp	r0, r3
 8003bc2:	f200 8081 	bhi.w	8003cc8 <_malloc_r+0x228>
 8003bc6:	4203      	tst	r3, r0
 8003bc8:	d106      	bne.n	8003bd8 <_malloc_r+0x138>
 8003bca:	f02e 0e03 	bic.w	lr, lr, #3
 8003bce:	0040      	lsls	r0, r0, #1
 8003bd0:	4203      	tst	r3, r0
 8003bd2:	f10e 0e04 	add.w	lr, lr, #4
 8003bd6:	d0fa      	beq.n	8003bce <_malloc_r+0x12e>
 8003bd8:	eb06 09ce 	add.w	r9, r6, lr, lsl #3
 8003bdc:	464f      	mov	r7, r9
 8003bde:	46f0      	mov	r8, lr
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	429f      	cmp	r7, r3
 8003be4:	d107      	bne.n	8003bf6 <_malloc_r+0x156>
 8003be6:	e191      	b.n	8003f0c <_malloc_r+0x46c>
 8003be8:	2a00      	cmp	r2, #0
 8003bea:	f280 81b7 	bge.w	8003f5c <_malloc_r+0x4bc>
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	429f      	cmp	r7, r3
 8003bf2:	f000 818b 	beq.w	8003f0c <_malloc_r+0x46c>
 8003bf6:	6859      	ldr	r1, [r3, #4]
 8003bf8:	f021 0103 	bic.w	r1, r1, #3
 8003bfc:	1b0a      	subs	r2, r1, r4
 8003bfe:	2a0f      	cmp	r2, #15
 8003c00:	ddf2      	ble.n	8003be8 <_malloc_r+0x148>
 8003c02:	461f      	mov	r7, r3
 8003c04:	1919      	adds	r1, r3, r4
 8003c06:	68d8      	ldr	r0, [r3, #12]
 8003c08:	f857 ef08 	ldr.w	lr, [r7, #8]!
 8003c0c:	508a      	str	r2, [r1, r2]
 8003c0e:	f044 0401 	orr.w	r4, r4, #1
 8003c12:	f042 0201 	orr.w	r2, r2, #1
 8003c16:	f8ce 000c 	str.w	r0, [lr, #12]
 8003c1a:	f8c0 e008 	str.w	lr, [r0, #8]
 8003c1e:	605c      	str	r4, [r3, #4]
 8003c20:	6171      	str	r1, [r6, #20]
 8003c22:	6131      	str	r1, [r6, #16]
 8003c24:	f8c1 c00c 	str.w	ip, [r1, #12]
 8003c28:	f8c1 c008 	str.w	ip, [r1, #8]
 8003c2c:	604a      	str	r2, [r1, #4]
 8003c2e:	4628      	mov	r0, r5
 8003c30:	f000 fa6e 	bl	8004110 <__malloc_unlock>
 8003c34:	e763      	b.n	8003afe <_malloc_r+0x5e>
 8003c36:	f1be 0f04 	cmp.w	lr, #4
 8003c3a:	bf9e      	ittt	ls
 8003c3c:	ea4f 1e94 	movls.w	lr, r4, lsr #6
 8003c40:	f10e 0e38 	addls.w	lr, lr, #56	; 0x38
 8003c44:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 8003c48:	f67f af74 	bls.w	8003b34 <_malloc_r+0x94>
 8003c4c:	f1be 0f14 	cmp.w	lr, #20
 8003c50:	bf9c      	itt	ls
 8003c52:	f10e 0e5b 	addls.w	lr, lr, #91	; 0x5b
 8003c56:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 8003c5a:	f67f af6b 	bls.w	8003b34 <_malloc_r+0x94>
 8003c5e:	f1be 0f54 	cmp.w	lr, #84	; 0x54
 8003c62:	bf9e      	ittt	ls
 8003c64:	ea4f 3e14 	movls.w	lr, r4, lsr #12
 8003c68:	f10e 0e6e 	addls.w	lr, lr, #110	; 0x6e
 8003c6c:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 8003c70:	f67f af60 	bls.w	8003b34 <_malloc_r+0x94>
 8003c74:	f5be 7faa 	cmp.w	lr, #340	; 0x154
 8003c78:	bf9e      	ittt	ls
 8003c7a:	ea4f 3ed4 	movls.w	lr, r4, lsr #15
 8003c7e:	f10e 0e77 	addls.w	lr, lr, #119	; 0x77
 8003c82:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 8003c86:	f67f af55 	bls.w	8003b34 <_malloc_r+0x94>
 8003c8a:	f240 5354 	movw	r3, #1364	; 0x554
 8003c8e:	459e      	cmp	lr, r3
 8003c90:	bf9d      	ittte	ls
 8003c92:	ea4f 4e94 	movls.w	lr, r4, lsr #18
 8003c96:	f10e 0e7c 	addls.w	lr, lr, #124	; 0x7c
 8003c9a:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 8003c9e:	f44f 717c 	movhi.w	r1, #1008	; 0x3f0
 8003ca2:	bf88      	it	hi
 8003ca4:	f04f 0e7e 	movhi.w	lr, #126	; 0x7e
 8003ca8:	e744      	b.n	8003b34 <_malloc_r+0x94>
 8003caa:	18fb      	adds	r3, r7, r3
 8003cac:	4628      	mov	r0, r5
 8003cae:	685a      	ldr	r2, [r3, #4]
 8003cb0:	f042 0201 	orr.w	r2, r2, #1
 8003cb4:	605a      	str	r2, [r3, #4]
 8003cb6:	3708      	adds	r7, #8
 8003cb8:	f000 fa2a 	bl	8004110 <__malloc_unlock>
 8003cbc:	4638      	mov	r0, r7
 8003cbe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cc2:	bf00      	nop
 8003cc4:	2000054c 	.word	0x2000054c
 8003cc8:	68b7      	ldr	r7, [r6, #8]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f023 0803 	bic.w	r8, r3, #3
 8003cd0:	4544      	cmp	r4, r8
 8003cd2:	ebc4 0208 	rsb	r2, r4, r8
 8003cd6:	bf94      	ite	ls
 8003cd8:	2300      	movls	r3, #0
 8003cda:	2301      	movhi	r3, #1
 8003cdc:	2a0f      	cmp	r2, #15
 8003cde:	bfd8      	it	le
 8003ce0:	f043 0301 	orrle.w	r3, r3, #1
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	f000 80a7 	beq.w	8003e38 <_malloc_r+0x398>
 8003cea:	4bb3      	ldr	r3, [pc, #716]	; (8003fb8 <_malloc_r+0x518>)
 8003cec:	f8df a2cc 	ldr.w	sl, [pc, #716]	; 8003fbc <_malloc_r+0x51c>
 8003cf0:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8003cf4:	f8da 3000 	ldr.w	r3, [sl]
 8003cf8:	3201      	adds	r2, #1
 8003cfa:	4423      	add	r3, r4
 8003cfc:	bf08      	it	eq
 8003cfe:	f103 0b10 	addeq.w	fp, r3, #16
 8003d02:	d006      	beq.n	8003d12 <_malloc_r+0x272>
 8003d04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d08:	330f      	adds	r3, #15
 8003d0a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003d0e:	f023 0b0f 	bic.w	fp, r3, #15
 8003d12:	4628      	mov	r0, r5
 8003d14:	4659      	mov	r1, fp
 8003d16:	f000 fe89 	bl	8004a2c <_sbrk_r>
 8003d1a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8003d1e:	4681      	mov	r9, r0
 8003d20:	f000 8144 	beq.w	8003fac <_malloc_r+0x50c>
 8003d24:	eb07 0208 	add.w	r2, r7, r8
 8003d28:	4282      	cmp	r2, r0
 8003d2a:	f200 8126 	bhi.w	8003f7a <_malloc_r+0x4da>
 8003d2e:	f8da 3004 	ldr.w	r3, [sl, #4]
 8003d32:	454a      	cmp	r2, r9
 8003d34:	445b      	add	r3, fp
 8003d36:	f8ca 3004 	str.w	r3, [sl, #4]
 8003d3a:	f000 8141 	beq.w	8003fc0 <_malloc_r+0x520>
 8003d3e:	f8d6 1408 	ldr.w	r1, [r6, #1032]	; 0x408
 8003d42:	3101      	adds	r1, #1
 8003d44:	bf15      	itete	ne
 8003d46:	ebc2 0209 	rsbne	r2, r2, r9
 8003d4a:	4b9b      	ldreq	r3, [pc, #620]	; (8003fb8 <_malloc_r+0x518>)
 8003d4c:	189b      	addne	r3, r3, r2
 8003d4e:	f8c3 9408 	streq.w	r9, [r3, #1032]	; 0x408
 8003d52:	bf18      	it	ne
 8003d54:	f8ca 3004 	strne.w	r3, [sl, #4]
 8003d58:	f019 0307 	ands.w	r3, r9, #7
 8003d5c:	bf1f      	itttt	ne
 8003d5e:	f1c3 0208 	rsbne	r2, r3, #8
 8003d62:	4491      	addne	r9, r2
 8003d64:	f5c3 5380 	rsbne	r3, r3, #4096	; 0x1000
 8003d68:	f103 0208 	addne.w	r2, r3, #8
 8003d6c:	eb09 030b 	add.w	r3, r9, fp
 8003d70:	bf08      	it	eq
 8003d72:	f44f 5280 	moveq.w	r2, #4096	; 0x1000
 8003d76:	051b      	lsls	r3, r3, #20
 8003d78:	0d1b      	lsrs	r3, r3, #20
 8003d7a:	ebc3 0b02 	rsb	fp, r3, r2
 8003d7e:	4628      	mov	r0, r5
 8003d80:	4659      	mov	r1, fp
 8003d82:	f000 fe53 	bl	8004a2c <_sbrk_r>
 8003d86:	1c43      	adds	r3, r0, #1
 8003d88:	f000 8126 	beq.w	8003fd8 <_malloc_r+0x538>
 8003d8c:	ebc9 0200 	rsb	r2, r9, r0
 8003d90:	445a      	add	r2, fp
 8003d92:	f042 0201 	orr.w	r2, r2, #1
 8003d96:	f8da 3004 	ldr.w	r3, [sl, #4]
 8003d9a:	f8c6 9008 	str.w	r9, [r6, #8]
 8003d9e:	445b      	add	r3, fp
 8003da0:	42b7      	cmp	r7, r6
 8003da2:	f8ca 3004 	str.w	r3, [sl, #4]
 8003da6:	f8c9 2004 	str.w	r2, [r9, #4]
 8003daa:	d015      	beq.n	8003dd8 <_malloc_r+0x338>
 8003dac:	f1b8 0f0f 	cmp.w	r8, #15
 8003db0:	f240 80f6 	bls.w	8003fa0 <_malloc_r+0x500>
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f1a8 020c 	sub.w	r2, r8, #12
 8003dba:	f022 0207 	bic.w	r2, r2, #7
 8003dbe:	18b9      	adds	r1, r7, r2
 8003dc0:	f000 0e01 	and.w	lr, r0, #1
 8003dc4:	ea42 0e0e 	orr.w	lr, r2, lr
 8003dc8:	2005      	movs	r0, #5
 8003dca:	2a0f      	cmp	r2, #15
 8003dcc:	f8c7 e004 	str.w	lr, [r7, #4]
 8003dd0:	6048      	str	r0, [r1, #4]
 8003dd2:	6088      	str	r0, [r1, #8]
 8003dd4:	f200 8104 	bhi.w	8003fe0 <_malloc_r+0x540>
 8003dd8:	f8da 202c 	ldr.w	r2, [sl, #44]	; 0x2c
 8003ddc:	68b7      	ldr	r7, [r6, #8]
 8003dde:	4293      	cmp	r3, r2
 8003de0:	bf84      	itt	hi
 8003de2:	4a76      	ldrhi	r2, [pc, #472]	; (8003fbc <_malloc_r+0x51c>)
 8003de4:	62d3      	strhi	r3, [r2, #44]	; 0x2c
 8003de6:	f8da 2030 	ldr.w	r2, [sl, #48]	; 0x30
 8003dea:	4293      	cmp	r3, r2
 8003dec:	bf84      	itt	hi
 8003dee:	4a73      	ldrhi	r2, [pc, #460]	; (8003fbc <_malloc_r+0x51c>)
 8003df0:	6313      	strhi	r3, [r2, #48]	; 0x30
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f023 0303 	bic.w	r3, r3, #3
 8003df8:	429c      	cmp	r4, r3
 8003dfa:	ebc4 0203 	rsb	r2, r4, r3
 8003dfe:	bf94      	ite	ls
 8003e00:	2300      	movls	r3, #0
 8003e02:	2301      	movhi	r3, #1
 8003e04:	2a0f      	cmp	r2, #15
 8003e06:	bfd8      	it	le
 8003e08:	f043 0301 	orrle.w	r3, r3, #1
 8003e0c:	b1a3      	cbz	r3, 8003e38 <_malloc_r+0x398>
 8003e0e:	4628      	mov	r0, r5
 8003e10:	f000 f97e 	bl	8004110 <__malloc_unlock>
 8003e14:	2700      	movs	r7, #0
 8003e16:	e672      	b.n	8003afe <_malloc_r+0x5e>
 8003e18:	18ba      	adds	r2, r7, r2
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6850      	ldr	r0, [r2, #4]
 8003e1e:	68b9      	ldr	r1, [r7, #8]
 8003e20:	f040 0001 	orr.w	r0, r0, #1
 8003e24:	6050      	str	r0, [r2, #4]
 8003e26:	60cb      	str	r3, [r1, #12]
 8003e28:	4628      	mov	r0, r5
 8003e2a:	6099      	str	r1, [r3, #8]
 8003e2c:	3708      	adds	r7, #8
 8003e2e:	f000 f96f 	bl	8004110 <__malloc_unlock>
 8003e32:	4638      	mov	r0, r7
 8003e34:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e38:	193b      	adds	r3, r7, r4
 8003e3a:	f042 0201 	orr.w	r2, r2, #1
 8003e3e:	f044 0401 	orr.w	r4, r4, #1
 8003e42:	607c      	str	r4, [r7, #4]
 8003e44:	4628      	mov	r0, r5
 8003e46:	605a      	str	r2, [r3, #4]
 8003e48:	3708      	adds	r7, #8
 8003e4a:	60b3      	str	r3, [r6, #8]
 8003e4c:	f000 f960 	bl	8004110 <__malloc_unlock>
 8003e50:	4638      	mov	r0, r7
 8003e52:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e56:	0a5a      	lsrs	r2, r3, #9
 8003e58:	2a04      	cmp	r2, #4
 8003e5a:	bf9e      	ittt	ls
 8003e5c:	ea4f 1893 	movls.w	r8, r3, lsr #6
 8003e60:	f108 0838 	addls.w	r8, r8, #56	; 0x38
 8003e64:	ea4f 00c8 	movls.w	r0, r8, lsl #3
 8003e68:	d928      	bls.n	8003ebc <_malloc_r+0x41c>
 8003e6a:	2a14      	cmp	r2, #20
 8003e6c:	bf9c      	itt	ls
 8003e6e:	f102 085b 	addls.w	r8, r2, #91	; 0x5b
 8003e72:	ea4f 00c8 	movls.w	r0, r8, lsl #3
 8003e76:	d921      	bls.n	8003ebc <_malloc_r+0x41c>
 8003e78:	2a54      	cmp	r2, #84	; 0x54
 8003e7a:	bf9e      	ittt	ls
 8003e7c:	ea4f 3813 	movls.w	r8, r3, lsr #12
 8003e80:	f108 086e 	addls.w	r8, r8, #110	; 0x6e
 8003e84:	ea4f 00c8 	movls.w	r0, r8, lsl #3
 8003e88:	d918      	bls.n	8003ebc <_malloc_r+0x41c>
 8003e8a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8003e8e:	bf9e      	ittt	ls
 8003e90:	ea4f 38d3 	movls.w	r8, r3, lsr #15
 8003e94:	f108 0877 	addls.w	r8, r8, #119	; 0x77
 8003e98:	ea4f 00c8 	movls.w	r0, r8, lsl #3
 8003e9c:	d90e      	bls.n	8003ebc <_malloc_r+0x41c>
 8003e9e:	f240 5154 	movw	r1, #1364	; 0x554
 8003ea2:	428a      	cmp	r2, r1
 8003ea4:	bf9d      	ittte	ls
 8003ea6:	ea4f 4893 	movls.w	r8, r3, lsr #18
 8003eaa:	f108 087c 	addls.w	r8, r8, #124	; 0x7c
 8003eae:	ea4f 00c8 	movls.w	r0, r8, lsl #3
 8003eb2:	f44f 707c 	movhi.w	r0, #1008	; 0x3f0
 8003eb6:	bf88      	it	hi
 8003eb8:	f04f 087e 	movhi.w	r8, #126	; 0x7e
 8003ebc:	1830      	adds	r0, r6, r0
 8003ebe:	493e      	ldr	r1, [pc, #248]	; (8003fb8 <_malloc_r+0x518>)
 8003ec0:	6882      	ldr	r2, [r0, #8]
 8003ec2:	4282      	cmp	r2, r0
 8003ec4:	d103      	bne.n	8003ece <_malloc_r+0x42e>
 8003ec6:	e061      	b.n	8003f8c <_malloc_r+0x4ec>
 8003ec8:	6892      	ldr	r2, [r2, #8]
 8003eca:	4290      	cmp	r0, r2
 8003ecc:	d004      	beq.n	8003ed8 <_malloc_r+0x438>
 8003ece:	6851      	ldr	r1, [r2, #4]
 8003ed0:	f021 0103 	bic.w	r1, r1, #3
 8003ed4:	428b      	cmp	r3, r1
 8003ed6:	d3f7      	bcc.n	8003ec8 <_malloc_r+0x428>
 8003ed8:	68d1      	ldr	r1, [r2, #12]
 8003eda:	6873      	ldr	r3, [r6, #4]
 8003edc:	60f9      	str	r1, [r7, #12]
 8003ede:	60ba      	str	r2, [r7, #8]
 8003ee0:	60d7      	str	r7, [r2, #12]
 8003ee2:	608f      	str	r7, [r1, #8]
 8003ee4:	e668      	b.n	8003bb8 <_malloc_r+0x118>
 8003ee6:	193b      	adds	r3, r7, r4
 8003ee8:	f041 0001 	orr.w	r0, r1, #1
 8003eec:	f044 0401 	orr.w	r4, r4, #1
 8003ef0:	607c      	str	r4, [r7, #4]
 8003ef2:	6153      	str	r3, [r2, #20]
 8003ef4:	6113      	str	r3, [r2, #16]
 8003ef6:	6058      	str	r0, [r3, #4]
 8003ef8:	f8c3 c00c 	str.w	ip, [r3, #12]
 8003efc:	f8c3 c008 	str.w	ip, [r3, #8]
 8003f00:	5059      	str	r1, [r3, r1]
 8003f02:	4628      	mov	r0, r5
 8003f04:	f000 f904 	bl	8004110 <__malloc_unlock>
 8003f08:	3708      	adds	r7, #8
 8003f0a:	e5f8      	b.n	8003afe <_malloc_r+0x5e>
 8003f0c:	f108 0801 	add.w	r8, r8, #1
 8003f10:	3708      	adds	r7, #8
 8003f12:	f018 0f03 	tst.w	r8, #3
 8003f16:	f47f ae63 	bne.w	8003be0 <_malloc_r+0x140>
 8003f1a:	464b      	mov	r3, r9
 8003f1c:	f01e 0f03 	tst.w	lr, #3
 8003f20:	f1a3 0208 	sub.w	r2, r3, #8
 8003f24:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 8003f28:	d062      	beq.n	8003ff0 <_malloc_r+0x550>
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d0f5      	beq.n	8003f1c <_malloc_r+0x47c>
 8003f30:	6873      	ldr	r3, [r6, #4]
 8003f32:	0040      	lsls	r0, r0, #1
 8003f34:	4298      	cmp	r0, r3
 8003f36:	f63f aec7 	bhi.w	8003cc8 <_malloc_r+0x228>
 8003f3a:	2800      	cmp	r0, #0
 8003f3c:	f43f aec4 	beq.w	8003cc8 <_malloc_r+0x228>
 8003f40:	4218      	tst	r0, r3
 8003f42:	d05a      	beq.n	8003ffa <_malloc_r+0x55a>
 8003f44:	46c6      	mov	lr, r8
 8003f46:	e647      	b.n	8003bd8 <_malloc_r+0x138>
 8003f48:	f107 0308 	add.w	r3, r7, #8
 8003f4c:	697f      	ldr	r7, [r7, #20]
 8003f4e:	42bb      	cmp	r3, r7
 8003f50:	bf08      	it	eq
 8003f52:	f10e 0e02 	addeq.w	lr, lr, #2
 8003f56:	f43f ae03 	beq.w	8003b60 <_malloc_r+0xc0>
 8003f5a:	e5c0      	b.n	8003ade <_malloc_r+0x3e>
 8003f5c:	1859      	adds	r1, r3, r1
 8003f5e:	461f      	mov	r7, r3
 8003f60:	6848      	ldr	r0, [r1, #4]
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	f857 2f08 	ldr.w	r2, [r7, #8]!
 8003f68:	f040 0001 	orr.w	r0, r0, #1
 8003f6c:	6048      	str	r0, [r1, #4]
 8003f6e:	60d3      	str	r3, [r2, #12]
 8003f70:	609a      	str	r2, [r3, #8]
 8003f72:	4628      	mov	r0, r5
 8003f74:	f000 f8cc 	bl	8004110 <__malloc_unlock>
 8003f78:	e5c1      	b.n	8003afe <_malloc_r+0x5e>
 8003f7a:	42b7      	cmp	r7, r6
 8003f7c:	f43f aed7 	beq.w	8003d2e <_malloc_r+0x28e>
 8003f80:	4b0d      	ldr	r3, [pc, #52]	; (8003fb8 <_malloc_r+0x518>)
 8003f82:	689f      	ldr	r7, [r3, #8]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f023 0303 	bic.w	r3, r3, #3
 8003f8a:	e735      	b.n	8003df8 <_malloc_r+0x358>
 8003f8c:	684b      	ldr	r3, [r1, #4]
 8003f8e:	ea4f 08a8 	mov.w	r8, r8, asr #2
 8003f92:	2001      	movs	r0, #1
 8003f94:	fa00 f008 	lsl.w	r0, r0, r8
 8003f98:	4303      	orrs	r3, r0
 8003f9a:	604b      	str	r3, [r1, #4]
 8003f9c:	4611      	mov	r1, r2
 8003f9e:	e79d      	b.n	8003edc <_malloc_r+0x43c>
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	f8c9 3004 	str.w	r3, [r9, #4]
 8003fa6:	464f      	mov	r7, r9
 8003fa8:	2300      	movs	r3, #0
 8003faa:	e725      	b.n	8003df8 <_malloc_r+0x358>
 8003fac:	68b7      	ldr	r7, [r6, #8]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f023 0303 	bic.w	r3, r3, #3
 8003fb4:	e720      	b.n	8003df8 <_malloc_r+0x358>
 8003fb6:	bf00      	nop
 8003fb8:	2000054c 	.word	0x2000054c
 8003fbc:	20000978 	.word	0x20000978
 8003fc0:	0511      	lsls	r1, r2, #20
 8003fc2:	0d09      	lsrs	r1, r1, #20
 8003fc4:	2900      	cmp	r1, #0
 8003fc6:	f47f aeba 	bne.w	8003d3e <_malloc_r+0x29e>
 8003fca:	68b2      	ldr	r2, [r6, #8]
 8003fcc:	eb0b 0108 	add.w	r1, fp, r8
 8003fd0:	f041 0101 	orr.w	r1, r1, #1
 8003fd4:	6051      	str	r1, [r2, #4]
 8003fd6:	e6ff      	b.n	8003dd8 <_malloc_r+0x338>
 8003fd8:	2201      	movs	r2, #1
 8003fda:	f04f 0b00 	mov.w	fp, #0
 8003fde:	e6da      	b.n	8003d96 <_malloc_r+0x2f6>
 8003fe0:	4628      	mov	r0, r5
 8003fe2:	f107 0108 	add.w	r1, r7, #8
 8003fe6:	f7ff fc4f 	bl	8003888 <_free_r>
 8003fea:	4b06      	ldr	r3, [pc, #24]	; (8004004 <_malloc_r+0x564>)
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	e6f3      	b.n	8003dd8 <_malloc_r+0x338>
 8003ff0:	6873      	ldr	r3, [r6, #4]
 8003ff2:	ea23 0300 	bic.w	r3, r3, r0
 8003ff6:	6073      	str	r3, [r6, #4]
 8003ff8:	e79b      	b.n	8003f32 <_malloc_r+0x492>
 8003ffa:	0040      	lsls	r0, r0, #1
 8003ffc:	f108 0804 	add.w	r8, r8, #4
 8004000:	e79e      	b.n	8003f40 <_malloc_r+0x4a0>
 8004002:	bf00      	nop
 8004004:	20000978 	.word	0x20000978

08004008 <memchr>:
 8004008:	0783      	lsls	r3, r0, #30
 800400a:	b470      	push	{r4, r5, r6}
 800400c:	b2c9      	uxtb	r1, r1
 800400e:	d00f      	beq.n	8004030 <memchr+0x28>
 8004010:	2a00      	cmp	r2, #0
 8004012:	d033      	beq.n	800407c <memchr+0x74>
 8004014:	7803      	ldrb	r3, [r0, #0]
 8004016:	3a01      	subs	r2, #1
 8004018:	428b      	cmp	r3, r1
 800401a:	d106      	bne.n	800402a <memchr+0x22>
 800401c:	e01d      	b.n	800405a <memchr+0x52>
 800401e:	2a00      	cmp	r2, #0
 8004020:	d02c      	beq.n	800407c <memchr+0x74>
 8004022:	7803      	ldrb	r3, [r0, #0]
 8004024:	3a01      	subs	r2, #1
 8004026:	428b      	cmp	r3, r1
 8004028:	d017      	beq.n	800405a <memchr+0x52>
 800402a:	3001      	adds	r0, #1
 800402c:	0783      	lsls	r3, r0, #30
 800402e:	d1f6      	bne.n	800401e <memchr+0x16>
 8004030:	2a03      	cmp	r2, #3
 8004032:	bf84      	itt	hi
 8004034:	ea41 2601 	orrhi.w	r6, r1, r1, lsl #8
 8004038:	ea46 4606 	orrhi.w	r6, r6, r6, lsl #16
 800403c:	d80f      	bhi.n	800405e <memchr+0x56>
 800403e:	b1ea      	cbz	r2, 800407c <memchr+0x74>
 8004040:	7803      	ldrb	r3, [r0, #0]
 8004042:	3a01      	subs	r2, #1
 8004044:	428b      	cmp	r3, r1
 8004046:	4402      	add	r2, r0
 8004048:	d104      	bne.n	8004054 <memchr+0x4c>
 800404a:	e006      	b.n	800405a <memchr+0x52>
 800404c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8004050:	428b      	cmp	r3, r1
 8004052:	d002      	beq.n	800405a <memchr+0x52>
 8004054:	4290      	cmp	r0, r2
 8004056:	d1f9      	bne.n	800404c <memchr+0x44>
 8004058:	2000      	movs	r0, #0
 800405a:	bc70      	pop	{r4, r5, r6}
 800405c:	4770      	bx	lr
 800405e:	4604      	mov	r4, r0
 8004060:	3004      	adds	r0, #4
 8004062:	6823      	ldr	r3, [r4, #0]
 8004064:	4073      	eors	r3, r6
 8004066:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
 800406a:	ea25 0303 	bic.w	r3, r5, r3
 800406e:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 8004072:	d105      	bne.n	8004080 <memchr+0x78>
 8004074:	3a04      	subs	r2, #4
 8004076:	2a03      	cmp	r2, #3
 8004078:	d8f1      	bhi.n	800405e <memchr+0x56>
 800407a:	e7e0      	b.n	800403e <memchr+0x36>
 800407c:	4610      	mov	r0, r2
 800407e:	e7ec      	b.n	800405a <memchr+0x52>
 8004080:	4620      	mov	r0, r4
 8004082:	e7dc      	b.n	800403e <memchr+0x36>

08004084 <memcpy>:
 8004084:	2a0f      	cmp	r2, #15
 8004086:	b4f0      	push	{r4, r5, r6, r7}
 8004088:	bf98      	it	ls
 800408a:	4603      	movls	r3, r0
 800408c:	d931      	bls.n	80040f2 <memcpy+0x6e>
 800408e:	ea41 0300 	orr.w	r3, r1, r0
 8004092:	079b      	lsls	r3, r3, #30
 8004094:	d137      	bne.n	8004106 <memcpy+0x82>
 8004096:	460c      	mov	r4, r1
 8004098:	4603      	mov	r3, r0
 800409a:	4615      	mov	r5, r2
 800409c:	6826      	ldr	r6, [r4, #0]
 800409e:	601e      	str	r6, [r3, #0]
 80040a0:	6866      	ldr	r6, [r4, #4]
 80040a2:	605e      	str	r6, [r3, #4]
 80040a4:	68a6      	ldr	r6, [r4, #8]
 80040a6:	609e      	str	r6, [r3, #8]
 80040a8:	68e6      	ldr	r6, [r4, #12]
 80040aa:	3d10      	subs	r5, #16
 80040ac:	60de      	str	r6, [r3, #12]
 80040ae:	3410      	adds	r4, #16
 80040b0:	3310      	adds	r3, #16
 80040b2:	2d0f      	cmp	r5, #15
 80040b4:	d8f2      	bhi.n	800409c <memcpy+0x18>
 80040b6:	f1a2 0410 	sub.w	r4, r2, #16
 80040ba:	f024 040f 	bic.w	r4, r4, #15
 80040be:	f002 020f 	and.w	r2, r2, #15
 80040c2:	3410      	adds	r4, #16
 80040c4:	2a03      	cmp	r2, #3
 80040c6:	eb00 0304 	add.w	r3, r0, r4
 80040ca:	4421      	add	r1, r4
 80040cc:	d911      	bls.n	80040f2 <memcpy+0x6e>
 80040ce:	1f0e      	subs	r6, r1, #4
 80040d0:	461d      	mov	r5, r3
 80040d2:	4614      	mov	r4, r2
 80040d4:	f856 7f04 	ldr.w	r7, [r6, #4]!
 80040d8:	3c04      	subs	r4, #4
 80040da:	2c03      	cmp	r4, #3
 80040dc:	f845 7b04 	str.w	r7, [r5], #4
 80040e0:	d8f8      	bhi.n	80040d4 <memcpy+0x50>
 80040e2:	1f14      	subs	r4, r2, #4
 80040e4:	f024 0403 	bic.w	r4, r4, #3
 80040e8:	3404      	adds	r4, #4
 80040ea:	f002 0203 	and.w	r2, r2, #3
 80040ee:	1909      	adds	r1, r1, r4
 80040f0:	191b      	adds	r3, r3, r4
 80040f2:	b132      	cbz	r2, 8004102 <memcpy+0x7e>
 80040f4:	3901      	subs	r1, #1
 80040f6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80040fa:	3a01      	subs	r2, #1
 80040fc:	f803 4b01 	strb.w	r4, [r3], #1
 8004100:	d1f9      	bne.n	80040f6 <memcpy+0x72>
 8004102:	bcf0      	pop	{r4, r5, r6, r7}
 8004104:	4770      	bx	lr
 8004106:	4603      	mov	r3, r0
 8004108:	e7f4      	b.n	80040f4 <memcpy+0x70>
 800410a:	bf00      	nop

0800410c <__malloc_lock>:
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop

08004110 <__malloc_unlock>:
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop

08004114 <_Balloc>:
 8004114:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8004116:	b570      	push	{r4, r5, r6, lr}
 8004118:	4605      	mov	r5, r0
 800411a:	460c      	mov	r4, r1
 800411c:	b14b      	cbz	r3, 8004132 <_Balloc+0x1e>
 800411e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004122:	b178      	cbz	r0, 8004144 <_Balloc+0x30>
 8004124:	6802      	ldr	r2, [r0, #0]
 8004126:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800412a:	2300      	movs	r3, #0
 800412c:	6103      	str	r3, [r0, #16]
 800412e:	60c3      	str	r3, [r0, #12]
 8004130:	bd70      	pop	{r4, r5, r6, pc}
 8004132:	2104      	movs	r1, #4
 8004134:	2221      	movs	r2, #33	; 0x21
 8004136:	f001 fa7f 	bl	8005638 <_calloc_r>
 800413a:	4603      	mov	r3, r0
 800413c:	64e8      	str	r0, [r5, #76]	; 0x4c
 800413e:	2800      	cmp	r0, #0
 8004140:	d1ed      	bne.n	800411e <_Balloc+0xa>
 8004142:	bd70      	pop	{r4, r5, r6, pc}
 8004144:	2101      	movs	r1, #1
 8004146:	fa11 f604 	lsls.w	r6, r1, r4
 800414a:	1d72      	adds	r2, r6, #5
 800414c:	4628      	mov	r0, r5
 800414e:	0092      	lsls	r2, r2, #2
 8004150:	f001 fa72 	bl	8005638 <_calloc_r>
 8004154:	2800      	cmp	r0, #0
 8004156:	d0f4      	beq.n	8004142 <_Balloc+0x2e>
 8004158:	6044      	str	r4, [r0, #4]
 800415a:	6086      	str	r6, [r0, #8]
 800415c:	e7e5      	b.n	800412a <_Balloc+0x16>
 800415e:	bf00      	nop

08004160 <_Bfree>:
 8004160:	b131      	cbz	r1, 8004170 <_Bfree+0x10>
 8004162:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8004164:	684a      	ldr	r2, [r1, #4]
 8004166:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800416a:	6008      	str	r0, [r1, #0]
 800416c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004170:	4770      	bx	lr
 8004172:	bf00      	nop

08004174 <__multadd>:
 8004174:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004176:	460d      	mov	r5, r1
 8004178:	4606      	mov	r6, r0
 800417a:	690c      	ldr	r4, [r1, #16]
 800417c:	f101 0014 	add.w	r0, r1, #20
 8004180:	b083      	sub	sp, #12
 8004182:	2100      	movs	r1, #0
 8004184:	6807      	ldr	r7, [r0, #0]
 8004186:	fa1f fc87 	uxth.w	ip, r7
 800418a:	0c3f      	lsrs	r7, r7, #16
 800418c:	fb02 330c 	mla	r3, r2, ip, r3
 8004190:	fb02 f707 	mul.w	r7, r2, r7
 8004194:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8004198:	b29b      	uxth	r3, r3
 800419a:	eb03 4307 	add.w	r3, r3, r7, lsl #16
 800419e:	3101      	adds	r1, #1
 80041a0:	f840 3b04 	str.w	r3, [r0], #4
 80041a4:	0c3b      	lsrs	r3, r7, #16
 80041a6:	428c      	cmp	r4, r1
 80041a8:	dcec      	bgt.n	8004184 <__multadd+0x10>
 80041aa:	b13b      	cbz	r3, 80041bc <__multadd+0x48>
 80041ac:	68aa      	ldr	r2, [r5, #8]
 80041ae:	4294      	cmp	r4, r2
 80041b0:	da07      	bge.n	80041c2 <__multadd+0x4e>
 80041b2:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 80041b6:	3401      	adds	r4, #1
 80041b8:	6153      	str	r3, [r2, #20]
 80041ba:	612c      	str	r4, [r5, #16]
 80041bc:	4628      	mov	r0, r5
 80041be:	b003      	add	sp, #12
 80041c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041c2:	6869      	ldr	r1, [r5, #4]
 80041c4:	9301      	str	r3, [sp, #4]
 80041c6:	3101      	adds	r1, #1
 80041c8:	4630      	mov	r0, r6
 80041ca:	f7ff ffa3 	bl	8004114 <_Balloc>
 80041ce:	692a      	ldr	r2, [r5, #16]
 80041d0:	3202      	adds	r2, #2
 80041d2:	f105 010c 	add.w	r1, r5, #12
 80041d6:	4607      	mov	r7, r0
 80041d8:	0092      	lsls	r2, r2, #2
 80041da:	f100 000c 	add.w	r0, r0, #12
 80041de:	f7ff ff51 	bl	8004084 <memcpy>
 80041e2:	6869      	ldr	r1, [r5, #4]
 80041e4:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 80041e6:	9b01      	ldr	r3, [sp, #4]
 80041e8:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 80041ec:	6028      	str	r0, [r5, #0]
 80041ee:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 80041f2:	463d      	mov	r5, r7
 80041f4:	e7dd      	b.n	80041b2 <__multadd+0x3e>
 80041f6:	bf00      	nop

080041f8 <__s2b>:
 80041f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80041fc:	461e      	mov	r6, r3
 80041fe:	f648 6339 	movw	r3, #36409	; 0x8e39
 8004202:	f106 0408 	add.w	r4, r6, #8
 8004206:	f6c3 03e3 	movt	r3, #14563	; 0x38e3
 800420a:	fb83 5304 	smull	r5, r3, r3, r4
 800420e:	17e4      	asrs	r4, r4, #31
 8004210:	ebc4 0363 	rsb	r3, r4, r3, asr #1
 8004214:	460f      	mov	r7, r1
 8004216:	2100      	movs	r1, #0
 8004218:	2b01      	cmp	r3, #1
 800421a:	4604      	mov	r4, r0
 800421c:	4690      	mov	r8, r2
 800421e:	dd05      	ble.n	800422c <__s2b+0x34>
 8004220:	2201      	movs	r2, #1
 8004222:	2100      	movs	r1, #0
 8004224:	0052      	lsls	r2, r2, #1
 8004226:	3101      	adds	r1, #1
 8004228:	4293      	cmp	r3, r2
 800422a:	dcfb      	bgt.n	8004224 <__s2b+0x2c>
 800422c:	4620      	mov	r0, r4
 800422e:	f7ff ff71 	bl	8004114 <_Balloc>
 8004232:	9b08      	ldr	r3, [sp, #32]
 8004234:	6143      	str	r3, [r0, #20]
 8004236:	2301      	movs	r3, #1
 8004238:	f1b8 0f09 	cmp.w	r8, #9
 800423c:	4601      	mov	r1, r0
 800423e:	6103      	str	r3, [r0, #16]
 8004240:	dd23      	ble.n	800428a <__s2b+0x92>
 8004242:	f107 0909 	add.w	r9, r7, #9
 8004246:	464d      	mov	r5, r9
 8004248:	4447      	add	r7, r8
 800424a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800424e:	220a      	movs	r2, #10
 8004250:	3b30      	subs	r3, #48	; 0x30
 8004252:	4620      	mov	r0, r4
 8004254:	f7ff ff8e 	bl	8004174 <__multadd>
 8004258:	42bd      	cmp	r5, r7
 800425a:	4601      	mov	r1, r0
 800425c:	d1f5      	bne.n	800424a <__s2b+0x52>
 800425e:	eb09 0708 	add.w	r7, r9, r8
 8004262:	3f08      	subs	r7, #8
 8004264:	4546      	cmp	r6, r8
 8004266:	dd0d      	ble.n	8004284 <__s2b+0x8c>
 8004268:	ebc8 0707 	rsb	r7, r8, r7
 800426c:	f817 3008 	ldrb.w	r3, [r7, r8]
 8004270:	220a      	movs	r2, #10
 8004272:	3b30      	subs	r3, #48	; 0x30
 8004274:	4620      	mov	r0, r4
 8004276:	f7ff ff7d 	bl	8004174 <__multadd>
 800427a:	f108 0801 	add.w	r8, r8, #1
 800427e:	45b0      	cmp	r8, r6
 8004280:	4601      	mov	r1, r0
 8004282:	d1f3      	bne.n	800426c <__s2b+0x74>
 8004284:	4608      	mov	r0, r1
 8004286:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800428a:	370a      	adds	r7, #10
 800428c:	f04f 0809 	mov.w	r8, #9
 8004290:	e7e8      	b.n	8004264 <__s2b+0x6c>
 8004292:	bf00      	nop

08004294 <__hi0bits>:
 8004294:	4603      	mov	r3, r0
 8004296:	2000      	movs	r0, #0
 8004298:	0c1a      	lsrs	r2, r3, #16
 800429a:	d101      	bne.n	80042a0 <__hi0bits+0xc>
 800429c:	041b      	lsls	r3, r3, #16
 800429e:	2010      	movs	r0, #16
 80042a0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80042a4:	d101      	bne.n	80042aa <__hi0bits+0x16>
 80042a6:	3008      	adds	r0, #8
 80042a8:	021b      	lsls	r3, r3, #8
 80042aa:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80042ae:	d101      	bne.n	80042b4 <__hi0bits+0x20>
 80042b0:	3004      	adds	r0, #4
 80042b2:	011b      	lsls	r3, r3, #4
 80042b4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80042b8:	d101      	bne.n	80042be <__hi0bits+0x2a>
 80042ba:	3002      	adds	r0, #2
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	2b00      	cmp	r3, #0
 80042c0:	db02      	blt.n	80042c8 <__hi0bits+0x34>
 80042c2:	005b      	lsls	r3, r3, #1
 80042c4:	d401      	bmi.n	80042ca <__hi0bits+0x36>
 80042c6:	2020      	movs	r0, #32
 80042c8:	4770      	bx	lr
 80042ca:	3001      	adds	r0, #1
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop

080042d0 <__lo0bits>:
 80042d0:	6803      	ldr	r3, [r0, #0]
 80042d2:	4602      	mov	r2, r0
 80042d4:	f013 0007 	ands.w	r0, r3, #7
 80042d8:	d007      	beq.n	80042ea <__lo0bits+0x1a>
 80042da:	07d9      	lsls	r1, r3, #31
 80042dc:	d41f      	bmi.n	800431e <__lo0bits+0x4e>
 80042de:	0798      	lsls	r0, r3, #30
 80042e0:	d41f      	bmi.n	8004322 <__lo0bits+0x52>
 80042e2:	089b      	lsrs	r3, r3, #2
 80042e4:	6013      	str	r3, [r2, #0]
 80042e6:	2002      	movs	r0, #2
 80042e8:	4770      	bx	lr
 80042ea:	b299      	uxth	r1, r3
 80042ec:	b909      	cbnz	r1, 80042f2 <__lo0bits+0x22>
 80042ee:	0c1b      	lsrs	r3, r3, #16
 80042f0:	2010      	movs	r0, #16
 80042f2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80042f6:	d101      	bne.n	80042fc <__lo0bits+0x2c>
 80042f8:	3008      	adds	r0, #8
 80042fa:	0a1b      	lsrs	r3, r3, #8
 80042fc:	0719      	lsls	r1, r3, #28
 80042fe:	d101      	bne.n	8004304 <__lo0bits+0x34>
 8004300:	3004      	adds	r0, #4
 8004302:	091b      	lsrs	r3, r3, #4
 8004304:	0799      	lsls	r1, r3, #30
 8004306:	d101      	bne.n	800430c <__lo0bits+0x3c>
 8004308:	3002      	adds	r0, #2
 800430a:	089b      	lsrs	r3, r3, #2
 800430c:	07d9      	lsls	r1, r3, #31
 800430e:	d404      	bmi.n	800431a <__lo0bits+0x4a>
 8004310:	085b      	lsrs	r3, r3, #1
 8004312:	d101      	bne.n	8004318 <__lo0bits+0x48>
 8004314:	2020      	movs	r0, #32
 8004316:	4770      	bx	lr
 8004318:	3001      	adds	r0, #1
 800431a:	6013      	str	r3, [r2, #0]
 800431c:	4770      	bx	lr
 800431e:	2000      	movs	r0, #0
 8004320:	4770      	bx	lr
 8004322:	085b      	lsrs	r3, r3, #1
 8004324:	6013      	str	r3, [r2, #0]
 8004326:	2001      	movs	r0, #1
 8004328:	4770      	bx	lr
 800432a:	bf00      	nop

0800432c <__i2b>:
 800432c:	b510      	push	{r4, lr}
 800432e:	460c      	mov	r4, r1
 8004330:	2101      	movs	r1, #1
 8004332:	f7ff feef 	bl	8004114 <_Balloc>
 8004336:	2201      	movs	r2, #1
 8004338:	6144      	str	r4, [r0, #20]
 800433a:	6102      	str	r2, [r0, #16]
 800433c:	bd10      	pop	{r4, pc}
 800433e:	bf00      	nop

08004340 <__multiply>:
 8004340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004344:	690f      	ldr	r7, [r1, #16]
 8004346:	6916      	ldr	r6, [r2, #16]
 8004348:	42b7      	cmp	r7, r6
 800434a:	b085      	sub	sp, #20
 800434c:	460d      	mov	r5, r1
 800434e:	4692      	mov	sl, r2
 8004350:	da04      	bge.n	800435c <__multiply+0x1c>
 8004352:	463a      	mov	r2, r7
 8004354:	4655      	mov	r5, sl
 8004356:	4637      	mov	r7, r6
 8004358:	468a      	mov	sl, r1
 800435a:	4616      	mov	r6, r2
 800435c:	68ab      	ldr	r3, [r5, #8]
 800435e:	6869      	ldr	r1, [r5, #4]
 8004360:	19bc      	adds	r4, r7, r6
 8004362:	429c      	cmp	r4, r3
 8004364:	bfc8      	it	gt
 8004366:	3101      	addgt	r1, #1
 8004368:	f7ff fed4 	bl	8004114 <_Balloc>
 800436c:	1d21      	adds	r1, r4, #4
 800436e:	eb00 0b81 	add.w	fp, r0, r1, lsl #2
 8004372:	f100 0914 	add.w	r9, r0, #20
 8004376:	f10b 0b04 	add.w	fp, fp, #4
 800437a:	45d9      	cmp	r9, fp
 800437c:	9000      	str	r0, [sp, #0]
 800437e:	9101      	str	r1, [sp, #4]
 8004380:	d205      	bcs.n	800438e <__multiply+0x4e>
 8004382:	464b      	mov	r3, r9
 8004384:	2200      	movs	r2, #0
 8004386:	f843 2b04 	str.w	r2, [r3], #4
 800438a:	459b      	cmp	fp, r3
 800438c:	d8fb      	bhi.n	8004386 <__multiply+0x46>
 800438e:	eb0a 0686 	add.w	r6, sl, r6, lsl #2
 8004392:	eb05 0787 	add.w	r7, r5, r7, lsl #2
 8004396:	f10a 0a14 	add.w	sl, sl, #20
 800439a:	f106 0814 	add.w	r8, r6, #20
 800439e:	3514      	adds	r5, #20
 80043a0:	3714      	adds	r7, #20
 80043a2:	45c2      	cmp	sl, r8
 80043a4:	d24f      	bcs.n	8004446 <__multiply+0x106>
 80043a6:	f8cd b008 	str.w	fp, [sp, #8]
 80043aa:	9403      	str	r4, [sp, #12]
 80043ac:	46ab      	mov	fp, r5
 80043ae:	f85a 5b04 	ldr.w	r5, [sl], #4
 80043b2:	b2ac      	uxth	r4, r5
 80043b4:	b1e4      	cbz	r4, 80043f0 <__multiply+0xb0>
 80043b6:	465a      	mov	r2, fp
 80043b8:	464b      	mov	r3, r9
 80043ba:	2100      	movs	r1, #0
 80043bc:	f852 6b04 	ldr.w	r6, [r2], #4
 80043c0:	681d      	ldr	r5, [r3, #0]
 80043c2:	b2b0      	uxth	r0, r6
 80043c4:	fa11 f185 	uxtah	r1, r1, r5
 80043c8:	0c36      	lsrs	r6, r6, #16
 80043ca:	0c2d      	lsrs	r5, r5, #16
 80043cc:	fb04 1000 	mla	r0, r4, r0, r1
 80043d0:	fb04 5106 	mla	r1, r4, r6, r5
 80043d4:	eb01 4110 	add.w	r1, r1, r0, lsr #16
 80043d8:	b280      	uxth	r0, r0
 80043da:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80043de:	0c09      	lsrs	r1, r1, #16
 80043e0:	4297      	cmp	r7, r2
 80043e2:	461d      	mov	r5, r3
 80043e4:	f843 0b04 	str.w	r0, [r3], #4
 80043e8:	d8e8      	bhi.n	80043bc <__multiply+0x7c>
 80043ea:	6069      	str	r1, [r5, #4]
 80043ec:	f85a 5c04 	ldr.w	r5, [sl, #-4]
 80043f0:	0c2d      	lsrs	r5, r5, #16
 80043f2:	d021      	beq.n	8004438 <__multiply+0xf8>
 80043f4:	f8d9 6000 	ldr.w	r6, [r9]
 80043f8:	465b      	mov	r3, fp
 80043fa:	4630      	mov	r0, r6
 80043fc:	4649      	mov	r1, r9
 80043fe:	f04f 0c00 	mov.w	ip, #0
 8004402:	e000      	b.n	8004406 <__multiply+0xc6>
 8004404:	4611      	mov	r1, r2
 8004406:	881a      	ldrh	r2, [r3, #0]
 8004408:	eb0c 4c10 	add.w	ip, ip, r0, lsr #16
 800440c:	fb05 cc02 	mla	ip, r5, r2, ip
 8004410:	b2b6      	uxth	r6, r6
 8004412:	460a      	mov	r2, r1
 8004414:	ea46 460c 	orr.w	r6, r6, ip, lsl #16
 8004418:	f842 6b04 	str.w	r6, [r2], #4
 800441c:	f853 6b04 	ldr.w	r6, [r3], #4
 8004420:	6848      	ldr	r0, [r1, #4]
 8004422:	0c36      	lsrs	r6, r6, #16
 8004424:	b284      	uxth	r4, r0
 8004426:	fb05 4606 	mla	r6, r5, r6, r4
 800442a:	eb06 461c 	add.w	r6, r6, ip, lsr #16
 800442e:	429f      	cmp	r7, r3
 8004430:	ea4f 4c16 	mov.w	ip, r6, lsr #16
 8004434:	d8e6      	bhi.n	8004404 <__multiply+0xc4>
 8004436:	604e      	str	r6, [r1, #4]
 8004438:	45d0      	cmp	r8, sl
 800443a:	f109 0904 	add.w	r9, r9, #4
 800443e:	d8b6      	bhi.n	80043ae <__multiply+0x6e>
 8004440:	f8dd b008 	ldr.w	fp, [sp, #8]
 8004444:	9c03      	ldr	r4, [sp, #12]
 8004446:	2c00      	cmp	r4, #0
 8004448:	dd0c      	ble.n	8004464 <__multiply+0x124>
 800444a:	e89d 0006 	ldmia.w	sp, {r1, r2}
 800444e:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 8004452:	b93b      	cbnz	r3, 8004464 <__multiply+0x124>
 8004454:	f1ab 0b04 	sub.w	fp, fp, #4
 8004458:	e002      	b.n	8004460 <__multiply+0x120>
 800445a:	f85b 3d04 	ldr.w	r3, [fp, #-4]!
 800445e:	b90b      	cbnz	r3, 8004464 <__multiply+0x124>
 8004460:	3c01      	subs	r4, #1
 8004462:	d1fa      	bne.n	800445a <__multiply+0x11a>
 8004464:	9a00      	ldr	r2, [sp, #0]
 8004466:	6114      	str	r4, [r2, #16]
 8004468:	4610      	mov	r0, r2
 800446a:	b005      	add	sp, #20
 800446c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004470 <__pow5mult>:
 8004470:	f012 0303 	ands.w	r3, r2, #3
 8004474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004478:	4615      	mov	r5, r2
 800447a:	4604      	mov	r4, r0
 800447c:	4688      	mov	r8, r1
 800447e:	d12d      	bne.n	80044dc <__pow5mult+0x6c>
 8004480:	10ad      	asrs	r5, r5, #2
 8004482:	d01d      	beq.n	80044c0 <__pow5mult+0x50>
 8004484:	6ca7      	ldr	r7, [r4, #72]	; 0x48
 8004486:	b92f      	cbnz	r7, 8004494 <__pow5mult+0x24>
 8004488:	e031      	b.n	80044ee <__pow5mult+0x7e>
 800448a:	106d      	asrs	r5, r5, #1
 800448c:	d018      	beq.n	80044c0 <__pow5mult+0x50>
 800448e:	683e      	ldr	r6, [r7, #0]
 8004490:	b1ce      	cbz	r6, 80044c6 <__pow5mult+0x56>
 8004492:	4637      	mov	r7, r6
 8004494:	07e8      	lsls	r0, r5, #31
 8004496:	d5f8      	bpl.n	800448a <__pow5mult+0x1a>
 8004498:	4641      	mov	r1, r8
 800449a:	463a      	mov	r2, r7
 800449c:	4620      	mov	r0, r4
 800449e:	f7ff ff4f 	bl	8004340 <__multiply>
 80044a2:	f1b8 0f00 	cmp.w	r8, #0
 80044a6:	d017      	beq.n	80044d8 <__pow5mult+0x68>
 80044a8:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80044ac:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80044ae:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80044b2:	106d      	asrs	r5, r5, #1
 80044b4:	f8c8 1000 	str.w	r1, [r8]
 80044b8:	f843 8022 	str.w	r8, [r3, r2, lsl #2]
 80044bc:	4680      	mov	r8, r0
 80044be:	d1e6      	bne.n	800448e <__pow5mult+0x1e>
 80044c0:	4640      	mov	r0, r8
 80044c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044c6:	4639      	mov	r1, r7
 80044c8:	463a      	mov	r2, r7
 80044ca:	4620      	mov	r0, r4
 80044cc:	f7ff ff38 	bl	8004340 <__multiply>
 80044d0:	6038      	str	r0, [r7, #0]
 80044d2:	6006      	str	r6, [r0, #0]
 80044d4:	4607      	mov	r7, r0
 80044d6:	e7dd      	b.n	8004494 <__pow5mult+0x24>
 80044d8:	4680      	mov	r8, r0
 80044da:	e7d6      	b.n	800448a <__pow5mult+0x1a>
 80044dc:	1e5e      	subs	r6, r3, #1
 80044de:	4a09      	ldr	r2, [pc, #36]	; (8004504 <__pow5mult+0x94>)
 80044e0:	2300      	movs	r3, #0
 80044e2:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 80044e6:	f7ff fe45 	bl	8004174 <__multadd>
 80044ea:	4680      	mov	r8, r0
 80044ec:	e7c8      	b.n	8004480 <__pow5mult+0x10>
 80044ee:	4620      	mov	r0, r4
 80044f0:	f240 2171 	movw	r1, #625	; 0x271
 80044f4:	f7ff ff1a 	bl	800432c <__i2b>
 80044f8:	2300      	movs	r3, #0
 80044fa:	64a0      	str	r0, [r4, #72]	; 0x48
 80044fc:	4607      	mov	r7, r0
 80044fe:	6003      	str	r3, [r0, #0]
 8004500:	e7c8      	b.n	8004494 <__pow5mult+0x24>
 8004502:	bf00      	nop
 8004504:	08006688 	.word	0x08006688

08004508 <__lshift>:
 8004508:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800450c:	4691      	mov	r9, r2
 800450e:	690a      	ldr	r2, [r1, #16]
 8004510:	688b      	ldr	r3, [r1, #8]
 8004512:	ea4f 1769 	mov.w	r7, r9, asr #5
 8004516:	eb07 0b02 	add.w	fp, r7, r2
 800451a:	f10b 0501 	add.w	r5, fp, #1
 800451e:	429d      	cmp	r5, r3
 8004520:	460c      	mov	r4, r1
 8004522:	4606      	mov	r6, r0
 8004524:	6849      	ldr	r1, [r1, #4]
 8004526:	dd03      	ble.n	8004530 <__lshift+0x28>
 8004528:	005b      	lsls	r3, r3, #1
 800452a:	3101      	adds	r1, #1
 800452c:	429d      	cmp	r5, r3
 800452e:	dcfb      	bgt.n	8004528 <__lshift+0x20>
 8004530:	4630      	mov	r0, r6
 8004532:	f7ff fdef 	bl	8004114 <_Balloc>
 8004536:	2f00      	cmp	r7, #0
 8004538:	f100 0314 	add.w	r3, r0, #20
 800453c:	dd09      	ble.n	8004552 <__lshift+0x4a>
 800453e:	2200      	movs	r2, #0
 8004540:	4611      	mov	r1, r2
 8004542:	3201      	adds	r2, #1
 8004544:	42ba      	cmp	r2, r7
 8004546:	f843 1b04 	str.w	r1, [r3], #4
 800454a:	d1fa      	bne.n	8004542 <__lshift+0x3a>
 800454c:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 8004550:	3314      	adds	r3, #20
 8004552:	6922      	ldr	r2, [r4, #16]
 8004554:	f019 091f 	ands.w	r9, r9, #31
 8004558:	eb04 0c82 	add.w	ip, r4, r2, lsl #2
 800455c:	f104 0114 	add.w	r1, r4, #20
 8004560:	f10c 0c14 	add.w	ip, ip, #20
 8004564:	d022      	beq.n	80045ac <__lshift+0xa4>
 8004566:	f1c9 0a20 	rsb	sl, r9, #32
 800456a:	2200      	movs	r2, #0
 800456c:	e000      	b.n	8004570 <__lshift+0x68>
 800456e:	463b      	mov	r3, r7
 8004570:	f8d1 8000 	ldr.w	r8, [r1]
 8004574:	461f      	mov	r7, r3
 8004576:	fa08 f809 	lsl.w	r8, r8, r9
 800457a:	ea48 0202 	orr.w	r2, r8, r2
 800457e:	f847 2b04 	str.w	r2, [r7], #4
 8004582:	f851 2b04 	ldr.w	r2, [r1], #4
 8004586:	458c      	cmp	ip, r1
 8004588:	fa22 f20a 	lsr.w	r2, r2, sl
 800458c:	d8ef      	bhi.n	800456e <__lshift+0x66>
 800458e:	605a      	str	r2, [r3, #4]
 8004590:	b10a      	cbz	r2, 8004596 <__lshift+0x8e>
 8004592:	f10b 0502 	add.w	r5, fp, #2
 8004596:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 8004598:	6862      	ldr	r2, [r4, #4]
 800459a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800459e:	3d01      	subs	r5, #1
 80045a0:	6105      	str	r5, [r0, #16]
 80045a2:	6021      	str	r1, [r4, #0]
 80045a4:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80045a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045ac:	f851 2b04 	ldr.w	r2, [r1], #4
 80045b0:	458c      	cmp	ip, r1
 80045b2:	f843 2b04 	str.w	r2, [r3], #4
 80045b6:	d9ee      	bls.n	8004596 <__lshift+0x8e>
 80045b8:	f851 2b04 	ldr.w	r2, [r1], #4
 80045bc:	458c      	cmp	ip, r1
 80045be:	f843 2b04 	str.w	r2, [r3], #4
 80045c2:	d8f3      	bhi.n	80045ac <__lshift+0xa4>
 80045c4:	e7e7      	b.n	8004596 <__lshift+0x8e>
 80045c6:	bf00      	nop

080045c8 <__mcmp>:
 80045c8:	4603      	mov	r3, r0
 80045ca:	690a      	ldr	r2, [r1, #16]
 80045cc:	6900      	ldr	r0, [r0, #16]
 80045ce:	1a80      	subs	r0, r0, r2
 80045d0:	b430      	push	{r4, r5}
 80045d2:	d111      	bne.n	80045f8 <__mcmp+0x30>
 80045d4:	3204      	adds	r2, #4
 80045d6:	0094      	lsls	r4, r2, #2
 80045d8:	191a      	adds	r2, r3, r4
 80045da:	1909      	adds	r1, r1, r4
 80045dc:	3314      	adds	r3, #20
 80045de:	3204      	adds	r2, #4
 80045e0:	3104      	adds	r1, #4
 80045e2:	f852 5c04 	ldr.w	r5, [r2, #-4]
 80045e6:	f851 4c04 	ldr.w	r4, [r1, #-4]
 80045ea:	3a04      	subs	r2, #4
 80045ec:	42a5      	cmp	r5, r4
 80045ee:	f1a1 0104 	sub.w	r1, r1, #4
 80045f2:	d103      	bne.n	80045fc <__mcmp+0x34>
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d3f4      	bcc.n	80045e2 <__mcmp+0x1a>
 80045f8:	bc30      	pop	{r4, r5}
 80045fa:	4770      	bx	lr
 80045fc:	bf38      	it	cc
 80045fe:	f04f 30ff 	movcc.w	r0, #4294967295	; 0xffffffff
 8004602:	d3f9      	bcc.n	80045f8 <__mcmp+0x30>
 8004604:	2001      	movs	r0, #1
 8004606:	e7f7      	b.n	80045f8 <__mcmp+0x30>

08004608 <__mdiff>:
 8004608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800460c:	460c      	mov	r4, r1
 800460e:	4606      	mov	r6, r0
 8004610:	4611      	mov	r1, r2
 8004612:	4620      	mov	r0, r4
 8004614:	4615      	mov	r5, r2
 8004616:	f7ff ffd7 	bl	80045c8 <__mcmp>
 800461a:	1e07      	subs	r7, r0, #0
 800461c:	d058      	beq.n	80046d0 <__mdiff+0xc8>
 800461e:	db52      	blt.n	80046c6 <__mdiff+0xbe>
 8004620:	2700      	movs	r7, #0
 8004622:	4630      	mov	r0, r6
 8004624:	6861      	ldr	r1, [r4, #4]
 8004626:	f7ff fd75 	bl	8004114 <_Balloc>
 800462a:	f8d4 c010 	ldr.w	ip, [r4, #16]
 800462e:	692b      	ldr	r3, [r5, #16]
 8004630:	60c7      	str	r7, [r0, #12]
 8004632:	eb05 0883 	add.w	r8, r5, r3, lsl #2
 8004636:	eb04 078c 	add.w	r7, r4, ip, lsl #2
 800463a:	3714      	adds	r7, #20
 800463c:	f108 0814 	add.w	r8, r8, #20
 8004640:	3414      	adds	r4, #20
 8004642:	3514      	adds	r5, #20
 8004644:	f100 0914 	add.w	r9, r0, #20
 8004648:	2600      	movs	r6, #0
 800464a:	f854 3b04 	ldr.w	r3, [r4], #4
 800464e:	f855 2b04 	ldr.w	r2, [r5], #4
 8004652:	fa16 f183 	uxtah	r1, r6, r3
 8004656:	fa1f fa82 	uxth.w	sl, r2
 800465a:	0c12      	lsrs	r2, r2, #16
 800465c:	ebc2 4613 	rsb	r6, r2, r3, lsr #16
 8004660:	ebca 0101 	rsb	r1, sl, r1
 8004664:	eb06 4621 	add.w	r6, r6, r1, asr #16
 8004668:	464b      	mov	r3, r9
 800466a:	b289      	uxth	r1, r1
 800466c:	ea41 4106 	orr.w	r1, r1, r6, lsl #16
 8004670:	f843 1b04 	str.w	r1, [r3], #4
 8004674:	1436      	asrs	r6, r6, #16
 8004676:	45a8      	cmp	r8, r5
 8004678:	4622      	mov	r2, r4
 800467a:	4699      	mov	r9, r3
 800467c:	d8e5      	bhi.n	800464a <__mdiff+0x42>
 800467e:	42a7      	cmp	r7, r4
 8004680:	4698      	mov	r8, r3
 8004682:	d914      	bls.n	80046ae <__mdiff+0xa6>
 8004684:	f852 5b04 	ldr.w	r5, [r2], #4
 8004688:	fa16 f685 	uxtah	r6, r6, r5
 800468c:	0c2d      	lsrs	r5, r5, #16
 800468e:	eb05 4526 	add.w	r5, r5, r6, asr #16
 8004692:	b2b6      	uxth	r6, r6
 8004694:	ea46 4105 	orr.w	r1, r6, r5, lsl #16
 8004698:	142e      	asrs	r6, r5, #16
 800469a:	4297      	cmp	r7, r2
 800469c:	f843 1b04 	str.w	r1, [r3], #4
 80046a0:	d8f0      	bhi.n	8004684 <__mdiff+0x7c>
 80046a2:	43e3      	mvns	r3, r4
 80046a4:	19db      	adds	r3, r3, r7
 80046a6:	f023 0303 	bic.w	r3, r3, #3
 80046aa:	3304      	adds	r3, #4
 80046ac:	4443      	add	r3, r8
 80046ae:	b931      	cbnz	r1, 80046be <__mdiff+0xb6>
 80046b0:	3b04      	subs	r3, #4
 80046b2:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80046b6:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 80046ba:	2a00      	cmp	r2, #0
 80046bc:	d0f9      	beq.n	80046b2 <__mdiff+0xaa>
 80046be:	f8c0 c010 	str.w	ip, [r0, #16]
 80046c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046c6:	4623      	mov	r3, r4
 80046c8:	2701      	movs	r7, #1
 80046ca:	462c      	mov	r4, r5
 80046cc:	461d      	mov	r5, r3
 80046ce:	e7a8      	b.n	8004622 <__mdiff+0x1a>
 80046d0:	4630      	mov	r0, r6
 80046d2:	4639      	mov	r1, r7
 80046d4:	f7ff fd1e 	bl	8004114 <_Balloc>
 80046d8:	2301      	movs	r3, #1
 80046da:	6103      	str	r3, [r0, #16]
 80046dc:	6147      	str	r7, [r0, #20]
 80046de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046e2:	bf00      	nop

080046e4 <__ulp>:
 80046e4:	2300      	movs	r3, #0
 80046e6:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 80046ea:	400b      	ands	r3, r1
 80046ec:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	dd02      	ble.n	80046fa <__ulp+0x16>
 80046f4:	4619      	mov	r1, r3
 80046f6:	2000      	movs	r0, #0
 80046f8:	4770      	bx	lr
 80046fa:	425b      	negs	r3, r3
 80046fc:	151b      	asrs	r3, r3, #20
 80046fe:	2100      	movs	r1, #0
 8004700:	2b13      	cmp	r3, #19
 8004702:	dd0b      	ble.n	800471c <__ulp+0x38>
 8004704:	2b32      	cmp	r3, #50	; 0x32
 8004706:	dd02      	ble.n	800470e <__ulp+0x2a>
 8004708:	2301      	movs	r3, #1
 800470a:	4618      	mov	r0, r3
 800470c:	4770      	bx	lr
 800470e:	2201      	movs	r2, #1
 8004710:	f1c3 0333 	rsb	r3, r3, #51	; 0x33
 8004714:	fa12 f303 	lsls.w	r3, r2, r3
 8004718:	4618      	mov	r0, r3
 800471a:	4770      	bx	lr
 800471c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004720:	fa52 f103 	asrs.w	r1, r2, r3
 8004724:	2000      	movs	r0, #0
 8004726:	4770      	bx	lr

08004728 <__b2d>:
 8004728:	6902      	ldr	r2, [r0, #16]
 800472a:	3204      	adds	r2, #4
 800472c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800472e:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 8004732:	4603      	mov	r3, r0
 8004734:	eb00 0482 	add.w	r4, r0, r2, lsl #2
 8004738:	4628      	mov	r0, r5
 800473a:	460f      	mov	r7, r1
 800473c:	f103 0614 	add.w	r6, r3, #20
 8004740:	f7ff fda8 	bl	8004294 <__hi0bits>
 8004744:	f1c0 0320 	rsb	r3, r0, #32
 8004748:	280a      	cmp	r0, #10
 800474a:	603b      	str	r3, [r7, #0]
 800474c:	4623      	mov	r3, r4
 800474e:	dc14      	bgt.n	800477a <__b2d+0x52>
 8004750:	f1c0 010b 	rsb	r1, r0, #11
 8004754:	fa35 f701 	lsrs.w	r7, r5, r1
 8004758:	f047 577f 	orr.w	r7, r7, #1069547520	; 0x3fc00000
 800475c:	42a6      	cmp	r6, r4
 800475e:	f447 1340 	orr.w	r3, r7, #3145728	; 0x300000
 8004762:	d22e      	bcs.n	80047c2 <__b2d+0x9a>
 8004764:	f854 4c04 	ldr.w	r4, [r4, #-4]
 8004768:	fa34 f101 	lsrs.w	r1, r4, r1
 800476c:	3015      	adds	r0, #21
 800476e:	4085      	lsls	r5, r0
 8004770:	ea41 0205 	orr.w	r2, r1, r5
 8004774:	4610      	mov	r0, r2
 8004776:	4619      	mov	r1, r3
 8004778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800477a:	2100      	movs	r1, #0
 800477c:	42a6      	cmp	r6, r4
 800477e:	d202      	bcs.n	8004786 <__b2d+0x5e>
 8004780:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8004784:	3c04      	subs	r4, #4
 8004786:	f1b0 070b 	subs.w	r7, r0, #11
 800478a:	bf02      	ittt	eq
 800478c:	f045 557f 	orreq.w	r5, r5, #1069547520	; 0x3fc00000
 8004790:	f445 1340 	orreq.w	r3, r5, #3145728	; 0x300000
 8004794:	460a      	moveq	r2, r1
 8004796:	d0ed      	beq.n	8004774 <__b2d+0x4c>
 8004798:	40bd      	lsls	r5, r7
 800479a:	f1c0 002b 	rsb	r0, r0, #43	; 0x2b
 800479e:	f045 557f 	orr.w	r5, r5, #1069547520	; 0x3fc00000
 80047a2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80047a6:	fa21 fc00 	lsr.w	ip, r1, r0
 80047aa:	42b4      	cmp	r4, r6
 80047ac:	ea45 030c 	orr.w	r3, r5, ip
 80047b0:	d909      	bls.n	80047c6 <__b2d+0x9e>
 80047b2:	f854 4c04 	ldr.w	r4, [r4, #-4]
 80047b6:	fa34 f000 	lsrs.w	r0, r4, r0
 80047ba:	40b9      	lsls	r1, r7
 80047bc:	ea40 0201 	orr.w	r2, r0, r1
 80047c0:	e7d8      	b.n	8004774 <__b2d+0x4c>
 80047c2:	2100      	movs	r1, #0
 80047c4:	e7d2      	b.n	800476c <__b2d+0x44>
 80047c6:	2000      	movs	r0, #0
 80047c8:	e7f7      	b.n	80047ba <__b2d+0x92>
 80047ca:	bf00      	nop

080047cc <__d2b>:
 80047cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80047d0:	b083      	sub	sp, #12
 80047d2:	2101      	movs	r1, #1
 80047d4:	461d      	mov	r5, r3
 80047d6:	4614      	mov	r4, r2
 80047d8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80047da:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80047dc:	f7ff fc9a 	bl	8004114 <_Balloc>
 80047e0:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
 80047e4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80047e8:	f3c5 590a 	ubfx	r9, r5, #20, #11
 80047ec:	4680      	mov	r8, r0
 80047ee:	9301      	str	r3, [sp, #4]
 80047f0:	f1b9 0f00 	cmp.w	r9, #0
 80047f4:	d002      	beq.n	80047fc <__d2b+0x30>
 80047f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047fa:	9301      	str	r3, [sp, #4]
 80047fc:	2c00      	cmp	r4, #0
 80047fe:	d025      	beq.n	800484c <__d2b+0x80>
 8004800:	a802      	add	r0, sp, #8
 8004802:	f840 4d08 	str.w	r4, [r0, #-8]!
 8004806:	4668      	mov	r0, sp
 8004808:	f7ff fd62 	bl	80042d0 <__lo0bits>
 800480c:	9b01      	ldr	r3, [sp, #4]
 800480e:	2800      	cmp	r0, #0
 8004810:	d132      	bne.n	8004878 <__d2b+0xac>
 8004812:	9a00      	ldr	r2, [sp, #0]
 8004814:	f8c8 2014 	str.w	r2, [r8, #20]
 8004818:	2b00      	cmp	r3, #0
 800481a:	bf0c      	ite	eq
 800481c:	2401      	moveq	r4, #1
 800481e:	2402      	movne	r4, #2
 8004820:	f8c8 3018 	str.w	r3, [r8, #24]
 8004824:	f8c8 4010 	str.w	r4, [r8, #16]
 8004828:	f1b9 0f00 	cmp.w	r9, #0
 800482c:	d11b      	bne.n	8004866 <__d2b+0x9a>
 800482e:	eb08 0284 	add.w	r2, r8, r4, lsl #2
 8004832:	f2a0 4332 	subw	r3, r0, #1074	; 0x432
 8004836:	6910      	ldr	r0, [r2, #16]
 8004838:	603b      	str	r3, [r7, #0]
 800483a:	f7ff fd2b 	bl	8004294 <__hi0bits>
 800483e:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 8004842:	6030      	str	r0, [r6, #0]
 8004844:	4640      	mov	r0, r8
 8004846:	b003      	add	sp, #12
 8004848:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800484c:	a801      	add	r0, sp, #4
 800484e:	f7ff fd3f 	bl	80042d0 <__lo0bits>
 8004852:	9b01      	ldr	r3, [sp, #4]
 8004854:	2401      	movs	r4, #1
 8004856:	f8c8 3014 	str.w	r3, [r8, #20]
 800485a:	f8c8 4010 	str.w	r4, [r8, #16]
 800485e:	3020      	adds	r0, #32
 8004860:	f1b9 0f00 	cmp.w	r9, #0
 8004864:	d0e3      	beq.n	800482e <__d2b+0x62>
 8004866:	f2a9 4933 	subw	r9, r9, #1075	; 0x433
 800486a:	eb09 0300 	add.w	r3, r9, r0
 800486e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004872:	603b      	str	r3, [r7, #0]
 8004874:	6030      	str	r0, [r6, #0]
 8004876:	e7e5      	b.n	8004844 <__d2b+0x78>
 8004878:	f1c0 0220 	rsb	r2, r0, #32
 800487c:	9900      	ldr	r1, [sp, #0]
 800487e:	fa13 f202 	lsls.w	r2, r3, r2
 8004882:	430a      	orrs	r2, r1
 8004884:	40c3      	lsrs	r3, r0
 8004886:	f8c8 2014 	str.w	r2, [r8, #20]
 800488a:	9301      	str	r3, [sp, #4]
 800488c:	e7c4      	b.n	8004818 <__d2b+0x4c>
 800488e:	bf00      	nop

08004890 <__ratio>:
 8004890:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004894:	b083      	sub	sp, #12
 8004896:	460d      	mov	r5, r1
 8004898:	4669      	mov	r1, sp
 800489a:	4604      	mov	r4, r0
 800489c:	f7ff ff44 	bl	8004728 <__b2d>
 80048a0:	4689      	mov	r9, r1
 80048a2:	4680      	mov	r8, r0
 80048a4:	a901      	add	r1, sp, #4
 80048a6:	4628      	mov	r0, r5
 80048a8:	f7ff ff3e 	bl	8004728 <__b2d>
 80048ac:	460f      	mov	r7, r1
 80048ae:	e89d 000a 	ldmia.w	sp, {r1, r3}
 80048b2:	692a      	ldr	r2, [r5, #16]
 80048b4:	6924      	ldr	r4, [r4, #16]
 80048b6:	1acb      	subs	r3, r1, r3
 80048b8:	1aa4      	subs	r4, r4, r2
 80048ba:	eb03 1444 	add.w	r4, r3, r4, lsl #5
 80048be:	2c00      	cmp	r4, #0
 80048c0:	4606      	mov	r6, r0
 80048c2:	464b      	mov	r3, r9
 80048c4:	4639      	mov	r1, r7
 80048c6:	bfcb      	itete	gt
 80048c8:	eb09 5304 	addgt.w	r3, r9, r4, lsl #20
 80048cc:	eba7 5104 	suble.w	r1, r7, r4, lsl #20
 80048d0:	4699      	movgt	r9, r3
 80048d2:	460f      	movle	r7, r1
 80048d4:	bfcc      	ite	gt
 80048d6:	46c0      	nopgt			; (mov r8, r8)
 80048d8:	4636      	movle	r6, r6
 80048da:	4640      	mov	r0, r8
 80048dc:	4649      	mov	r1, r9
 80048de:	4632      	mov	r2, r6
 80048e0:	463b      	mov	r3, r7
 80048e2:	f001 fc53 	bl	800618c <__aeabi_ddiv>
 80048e6:	b003      	add	sp, #12
 80048e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080048ec <_mprec_log10>:
 80048ec:	b510      	push	{r4, lr}
 80048ee:	4604      	mov	r4, r0
 80048f0:	2100      	movs	r1, #0
 80048f2:	2000      	movs	r0, #0
 80048f4:	2c17      	cmp	r4, #23
 80048f6:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 80048fa:	dd08      	ble.n	800490e <_mprec_log10+0x22>
 80048fc:	2300      	movs	r3, #0
 80048fe:	2200      	movs	r2, #0
 8004900:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8004904:	f001 fb18 	bl	8005f38 <__aeabi_dmul>
 8004908:	3c01      	subs	r4, #1
 800490a:	d1f7      	bne.n	80048fc <_mprec_log10+0x10>
 800490c:	bd10      	pop	{r4, pc}
 800490e:	4b03      	ldr	r3, [pc, #12]	; (800491c <_mprec_log10+0x30>)
 8004910:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8004914:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 8004918:	bd10      	pop	{r4, pc}
 800491a:	bf00      	nop
 800491c:	08006688 	.word	0x08006688

08004920 <__copybits>:
 8004920:	6913      	ldr	r3, [r2, #16]
 8004922:	3901      	subs	r1, #1
 8004924:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004928:	1149      	asrs	r1, r1, #5
 800492a:	b470      	push	{r4, r5, r6}
 800492c:	3314      	adds	r3, #20
 800492e:	f102 0414 	add.w	r4, r2, #20
 8004932:	3101      	adds	r1, #1
 8004934:	429c      	cmp	r4, r3
 8004936:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800493a:	d20c      	bcs.n	8004956 <__copybits+0x36>
 800493c:	4605      	mov	r5, r0
 800493e:	f854 6b04 	ldr.w	r6, [r4], #4
 8004942:	42a3      	cmp	r3, r4
 8004944:	f845 6b04 	str.w	r6, [r5], #4
 8004948:	d8f9      	bhi.n	800493e <__copybits+0x1e>
 800494a:	1a9b      	subs	r3, r3, r2
 800494c:	3b15      	subs	r3, #21
 800494e:	f023 0303 	bic.w	r3, r3, #3
 8004952:	3304      	adds	r3, #4
 8004954:	18c0      	adds	r0, r0, r3
 8004956:	4281      	cmp	r1, r0
 8004958:	d904      	bls.n	8004964 <__copybits+0x44>
 800495a:	2300      	movs	r3, #0
 800495c:	f840 3b04 	str.w	r3, [r0], #4
 8004960:	4281      	cmp	r1, r0
 8004962:	d8fb      	bhi.n	800495c <__copybits+0x3c>
 8004964:	bc70      	pop	{r4, r5, r6}
 8004966:	4770      	bx	lr

08004968 <__any_on>:
 8004968:	6902      	ldr	r2, [r0, #16]
 800496a:	114b      	asrs	r3, r1, #5
 800496c:	429a      	cmp	r2, r3
 800496e:	b410      	push	{r4}
 8004970:	db01      	blt.n	8004976 <__any_on+0xe>
 8004972:	461a      	mov	r2, r3
 8004974:	dc13      	bgt.n	800499e <__any_on+0x36>
 8004976:	3204      	adds	r2, #4
 8004978:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 800497c:	f100 0114 	add.w	r1, r0, #20
 8004980:	1d1c      	adds	r4, r3, #4
 8004982:	42a1      	cmp	r1, r4
 8004984:	d218      	bcs.n	80049b8 <__any_on+0x50>
 8004986:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800498a:	b92a      	cbnz	r2, 8004998 <__any_on+0x30>
 800498c:	4299      	cmp	r1, r3
 800498e:	d213      	bcs.n	80049b8 <__any_on+0x50>
 8004990:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8004994:	2a00      	cmp	r2, #0
 8004996:	d0f9      	beq.n	800498c <__any_on+0x24>
 8004998:	2001      	movs	r0, #1
 800499a:	bc10      	pop	{r4}
 800499c:	4770      	bx	lr
 800499e:	f011 011f 	ands.w	r1, r1, #31
 80049a2:	d0e8      	beq.n	8004976 <__any_on+0xe>
 80049a4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80049a8:	695b      	ldr	r3, [r3, #20]
 80049aa:	fa33 f401 	lsrs.w	r4, r3, r1
 80049ae:	fa14 f101 	lsls.w	r1, r4, r1
 80049b2:	4299      	cmp	r1, r3
 80049b4:	d1f0      	bne.n	8004998 <__any_on+0x30>
 80049b6:	e7de      	b.n	8004976 <__any_on+0xe>
 80049b8:	2000      	movs	r0, #0
 80049ba:	e7ee      	b.n	800499a <__any_on+0x32>

080049bc <__fpclassifyd>:
 80049bc:	ea50 0201 	orrs.w	r2, r0, r1
 80049c0:	b410      	push	{r4}
 80049c2:	460b      	mov	r3, r1
 80049c4:	d102      	bne.n	80049cc <__fpclassifyd+0x10>
 80049c6:	2002      	movs	r0, #2
 80049c8:	bc10      	pop	{r4}
 80049ca:	4770      	bx	lr
 80049cc:	f1d0 0101 	rsbs	r1, r0, #1
 80049d0:	bf38      	it	cc
 80049d2:	2100      	movcc	r1, #0
 80049d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049d8:	bf08      	it	eq
 80049da:	2800      	cmpeq	r0, #0
 80049dc:	d0f3      	beq.n	80049c6 <__fpclassifyd+0xa>
 80049de:	f103 44ff 	add.w	r4, r3, #2139095040	; 0x7f800000
 80049e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80049e6:	f504 04e0 	add.w	r4, r4, #7340032	; 0x700000
 80049ea:	f6c7 72df 	movt	r2, #32735	; 0x7fdf
 80049ee:	f5a3 1080 	sub.w	r0, r3, #1048576	; 0x100000
 80049f2:	4290      	cmp	r0, r2
 80049f4:	bf88      	it	hi
 80049f6:	4294      	cmphi	r4, r2
 80049f8:	d801      	bhi.n	80049fe <__fpclassifyd+0x42>
 80049fa:	2004      	movs	r0, #4
 80049fc:	e7e4      	b.n	80049c8 <__fpclassifyd+0xc>
 80049fe:	f103 4200 	add.w	r2, r3, #2147483648	; 0x80000000
 8004a02:	2003      	movs	r0, #3
 8004a04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a08:	bf28      	it	cs
 8004a0a:	f5b2 1f80 	cmpcs.w	r2, #1048576	; 0x100000
 8004a0e:	d3db      	bcc.n	80049c8 <__fpclassifyd+0xc>
 8004a10:	2200      	movs	r2, #0
 8004a12:	f6c7 72f0 	movt	r2, #32752	; 0x7ff0
 8004a16:	f513 1f80 	cmn.w	r3, #1048576	; 0x100000
 8004a1a:	bf18      	it	ne
 8004a1c:	4293      	cmpne	r3, r2
 8004a1e:	bf14      	ite	ne
 8004a20:	2300      	movne	r3, #0
 8004a22:	2301      	moveq	r3, #1
 8004a24:	ea01 0003 	and.w	r0, r1, r3
 8004a28:	e7ce      	b.n	80049c8 <__fpclassifyd+0xc>
 8004a2a:	bf00      	nop

08004a2c <_sbrk_r>:
 8004a2c:	b538      	push	{r3, r4, r5, lr}
 8004a2e:	4c07      	ldr	r4, [pc, #28]	; (8004a4c <_sbrk_r+0x20>)
 8004a30:	2300      	movs	r3, #0
 8004a32:	4605      	mov	r5, r0
 8004a34:	4608      	mov	r0, r1
 8004a36:	6023      	str	r3, [r4, #0]
 8004a38:	f7fc fc0a 	bl	8001250 <_sbrk>
 8004a3c:	1c43      	adds	r3, r0, #1
 8004a3e:	d000      	beq.n	8004a42 <_sbrk_r+0x16>
 8004a40:	bd38      	pop	{r3, r4, r5, pc}
 8004a42:	6823      	ldr	r3, [r4, #0]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d0fb      	beq.n	8004a40 <_sbrk_r+0x14>
 8004a48:	602b      	str	r3, [r5, #0]
 8004a4a:	bd38      	pop	{r3, r4, r5, pc}
 8004a4c:	20000bb8 	.word	0x20000bb8

08004a50 <strcmp>:
 8004a50:	ea80 0201 	eor.w	r2, r0, r1
 8004a54:	f012 0f03 	tst.w	r2, #3
 8004a58:	d13a      	bne.n	8004ad0 <strcmp_unaligned>
 8004a5a:	f010 0203 	ands.w	r2, r0, #3
 8004a5e:	f020 0003 	bic.w	r0, r0, #3
 8004a62:	f021 0103 	bic.w	r1, r1, #3
 8004a66:	f850 cb04 	ldr.w	ip, [r0], #4
 8004a6a:	bf08      	it	eq
 8004a6c:	f851 3b04 	ldreq.w	r3, [r1], #4
 8004a70:	d00d      	beq.n	8004a8e <strcmp+0x3e>
 8004a72:	f082 0203 	eor.w	r2, r2, #3
 8004a76:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8004a7a:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8004a7e:	fa23 f202 	lsr.w	r2, r3, r2
 8004a82:	f851 3b04 	ldr.w	r3, [r1], #4
 8004a86:	ea4c 0c02 	orr.w	ip, ip, r2
 8004a8a:	ea43 0302 	orr.w	r3, r3, r2
 8004a8e:	bf00      	nop
 8004a90:	f1ac 3201 	sub.w	r2, ip, #16843009	; 0x1010101
 8004a94:	459c      	cmp	ip, r3
 8004a96:	bf01      	itttt	eq
 8004a98:	ea22 020c 	biceq.w	r2, r2, ip
 8004a9c:	f012 3f80 	tsteq.w	r2, #2155905152	; 0x80808080
 8004aa0:	f850 cb04 	ldreq.w	ip, [r0], #4
 8004aa4:	f851 3b04 	ldreq.w	r3, [r1], #4
 8004aa8:	d0f2      	beq.n	8004a90 <strcmp+0x40>
 8004aaa:	ea4f 600c 	mov.w	r0, ip, lsl #24
 8004aae:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8004ab2:	2801      	cmp	r0, #1
 8004ab4:	bf28      	it	cs
 8004ab6:	ebb0 6f03 	cmpcs.w	r0, r3, lsl #24
 8004aba:	bf08      	it	eq
 8004abc:	0a1b      	lsreq	r3, r3, #8
 8004abe:	d0f4      	beq.n	8004aaa <strcmp+0x5a>
 8004ac0:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8004ac4:	ea4f 6010 	mov.w	r0, r0, lsr #24
 8004ac8:	eba0 0003 	sub.w	r0, r0, r3
 8004acc:	4770      	bx	lr
 8004ace:	bf00      	nop

08004ad0 <strcmp_unaligned>:
 8004ad0:	f010 0f03 	tst.w	r0, #3
 8004ad4:	d00a      	beq.n	8004aec <strcmp_unaligned+0x1c>
 8004ad6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ada:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ade:	2a01      	cmp	r2, #1
 8004ae0:	bf28      	it	cs
 8004ae2:	429a      	cmpcs	r2, r3
 8004ae4:	d0f4      	beq.n	8004ad0 <strcmp_unaligned>
 8004ae6:	eba2 0003 	sub.w	r0, r2, r3
 8004aea:	4770      	bx	lr
 8004aec:	f84d 5d04 	str.w	r5, [sp, #-4]!
 8004af0:	f84d 4d04 	str.w	r4, [sp, #-4]!
 8004af4:	f04f 0201 	mov.w	r2, #1
 8004af8:	ea42 2202 	orr.w	r2, r2, r2, lsl #8
 8004afc:	ea42 4202 	orr.w	r2, r2, r2, lsl #16
 8004b00:	f001 0c03 	and.w	ip, r1, #3
 8004b04:	f021 0103 	bic.w	r1, r1, #3
 8004b08:	f850 4b04 	ldr.w	r4, [r0], #4
 8004b0c:	f851 5b04 	ldr.w	r5, [r1], #4
 8004b10:	f1bc 0f02 	cmp.w	ip, #2
 8004b14:	d026      	beq.n	8004b64 <strcmp_unaligned+0x94>
 8004b16:	d84b      	bhi.n	8004bb0 <strcmp_unaligned+0xe0>
 8004b18:	f024 4c7f 	bic.w	ip, r4, #4278190080	; 0xff000000
 8004b1c:	ebbc 2f15 	cmp.w	ip, r5, lsr #8
 8004b20:	eba4 0302 	sub.w	r3, r4, r2
 8004b24:	ea23 0304 	bic.w	r3, r3, r4
 8004b28:	d10d      	bne.n	8004b46 <strcmp_unaligned+0x76>
 8004b2a:	ea13 13c2 	ands.w	r3, r3, r2, lsl #7
 8004b2e:	bf08      	it	eq
 8004b30:	f851 5b04 	ldreq.w	r5, [r1], #4
 8004b34:	d10a      	bne.n	8004b4c <strcmp_unaligned+0x7c>
 8004b36:	ea8c 0c04 	eor.w	ip, ip, r4
 8004b3a:	ebbc 6f05 	cmp.w	ip, r5, lsl #24
 8004b3e:	d10c      	bne.n	8004b5a <strcmp_unaligned+0x8a>
 8004b40:	f850 4b04 	ldr.w	r4, [r0], #4
 8004b44:	e7e8      	b.n	8004b18 <strcmp_unaligned+0x48>
 8004b46:	ea4f 2515 	mov.w	r5, r5, lsr #8
 8004b4a:	e05c      	b.n	8004c06 <strcmp_unaligned+0x136>
 8004b4c:	f033 437f 	bics.w	r3, r3, #4278190080	; 0xff000000
 8004b50:	d152      	bne.n	8004bf8 <strcmp_unaligned+0x128>
 8004b52:	780d      	ldrb	r5, [r1, #0]
 8004b54:	ea4f 6c14 	mov.w	ip, r4, lsr #24
 8004b58:	e055      	b.n	8004c06 <strcmp_unaligned+0x136>
 8004b5a:	ea4f 6c14 	mov.w	ip, r4, lsr #24
 8004b5e:	f005 05ff 	and.w	r5, r5, #255	; 0xff
 8004b62:	e050      	b.n	8004c06 <strcmp_unaligned+0x136>
 8004b64:	ea4f 4c04 	mov.w	ip, r4, lsl #16
 8004b68:	eba4 0302 	sub.w	r3, r4, r2
 8004b6c:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8004b70:	ea23 0304 	bic.w	r3, r3, r4
 8004b74:	ebbc 4f15 	cmp.w	ip, r5, lsr #16
 8004b78:	d117      	bne.n	8004baa <strcmp_unaligned+0xda>
 8004b7a:	ea13 13c2 	ands.w	r3, r3, r2, lsl #7
 8004b7e:	bf08      	it	eq
 8004b80:	f851 5b04 	ldreq.w	r5, [r1], #4
 8004b84:	d107      	bne.n	8004b96 <strcmp_unaligned+0xc6>
 8004b86:	ea8c 0c04 	eor.w	ip, ip, r4
 8004b8a:	ebbc 4f05 	cmp.w	ip, r5, lsl #16
 8004b8e:	d108      	bne.n	8004ba2 <strcmp_unaligned+0xd2>
 8004b90:	f850 4b04 	ldr.w	r4, [r0], #4
 8004b94:	e7e6      	b.n	8004b64 <strcmp_unaligned+0x94>
 8004b96:	041b      	lsls	r3, r3, #16
 8004b98:	d12e      	bne.n	8004bf8 <strcmp_unaligned+0x128>
 8004b9a:	880d      	ldrh	r5, [r1, #0]
 8004b9c:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8004ba0:	e031      	b.n	8004c06 <strcmp_unaligned+0x136>
 8004ba2:	ea4f 4505 	mov.w	r5, r5, lsl #16
 8004ba6:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8004baa:	ea4f 4515 	mov.w	r5, r5, lsr #16
 8004bae:	e02a      	b.n	8004c06 <strcmp_unaligned+0x136>
 8004bb0:	f004 0cff 	and.w	ip, r4, #255	; 0xff
 8004bb4:	ebbc 6f15 	cmp.w	ip, r5, lsr #24
 8004bb8:	eba4 0302 	sub.w	r3, r4, r2
 8004bbc:	ea23 0304 	bic.w	r3, r3, r4
 8004bc0:	d10d      	bne.n	8004bde <strcmp_unaligned+0x10e>
 8004bc2:	ea13 13c2 	ands.w	r3, r3, r2, lsl #7
 8004bc6:	bf08      	it	eq
 8004bc8:	f851 5b04 	ldreq.w	r5, [r1], #4
 8004bcc:	d10a      	bne.n	8004be4 <strcmp_unaligned+0x114>
 8004bce:	ea8c 0c04 	eor.w	ip, ip, r4
 8004bd2:	ebbc 2f05 	cmp.w	ip, r5, lsl #8
 8004bd6:	d10a      	bne.n	8004bee <strcmp_unaligned+0x11e>
 8004bd8:	f850 4b04 	ldr.w	r4, [r0], #4
 8004bdc:	e7e8      	b.n	8004bb0 <strcmp_unaligned+0xe0>
 8004bde:	ea4f 6515 	mov.w	r5, r5, lsr #24
 8004be2:	e010      	b.n	8004c06 <strcmp_unaligned+0x136>
 8004be4:	f014 0fff 	tst.w	r4, #255	; 0xff
 8004be8:	d006      	beq.n	8004bf8 <strcmp_unaligned+0x128>
 8004bea:	f851 5b04 	ldr.w	r5, [r1], #4
 8004bee:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 8004bf2:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 8004bf6:	e006      	b.n	8004c06 <strcmp_unaligned+0x136>
 8004bf8:	f04f 0000 	mov.w	r0, #0
 8004bfc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004c00:	f85d 5b04 	ldr.w	r5, [sp], #4
 8004c04:	4770      	bx	lr
 8004c06:	f00c 02ff 	and.w	r2, ip, #255	; 0xff
 8004c0a:	f005 00ff 	and.w	r0, r5, #255	; 0xff
 8004c0e:	2801      	cmp	r0, #1
 8004c10:	bf28      	it	cs
 8004c12:	4290      	cmpcs	r0, r2
 8004c14:	bf04      	itt	eq
 8004c16:	ea4f 2c1c 	moveq.w	ip, ip, lsr #8
 8004c1a:	0a2d      	lsreq	r5, r5, #8
 8004c1c:	d0f3      	beq.n	8004c06 <strcmp_unaligned+0x136>
 8004c1e:	eba2 0000 	sub.w	r0, r2, r0
 8004c22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004c26:	f85d 5b04 	ldr.w	r5, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <strlen>:
 8004c2c:	f020 0103 	bic.w	r1, r0, #3
 8004c30:	f010 0003 	ands.w	r0, r0, #3
 8004c34:	f1c0 0000 	rsb	r0, r0, #0
 8004c38:	f851 3b04 	ldr.w	r3, [r1], #4
 8004c3c:	f100 0c04 	add.w	ip, r0, #4
 8004c40:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8004c44:	f06f 0200 	mvn.w	r2, #0
 8004c48:	bf1c      	itt	ne
 8004c4a:	fa22 f20c 	lsrne.w	r2, r2, ip
 8004c4e:	4313      	orrne	r3, r2
 8004c50:	f04f 0c01 	mov.w	ip, #1
 8004c54:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 8004c58:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 8004c5c:	eba3 020c 	sub.w	r2, r3, ip
 8004c60:	ea22 0203 	bic.w	r2, r2, r3
 8004c64:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 8004c68:	bf04      	itt	eq
 8004c6a:	f851 3b04 	ldreq.w	r3, [r1], #4
 8004c6e:	3004      	addeq	r0, #4
 8004c70:	d0f4      	beq.n	8004c5c <strlen+0x30>
 8004c72:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004c76:	bf1f      	itttt	ne
 8004c78:	3001      	addne	r0, #1
 8004c7a:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
 8004c7e:	3001      	addne	r0, #1
 8004c80:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
 8004c84:	bf18      	it	ne
 8004c86:	3001      	addne	r0, #1
 8004c88:	4770      	bx	lr
 8004c8a:	bf00      	nop

08004c8c <__ssprint_r>:
 8004c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c90:	b083      	sub	sp, #12
 8004c92:	4691      	mov	r9, r2
 8004c94:	9001      	str	r0, [sp, #4]
 8004c96:	6890      	ldr	r0, [r2, #8]
 8004c98:	6817      	ldr	r7, [r2, #0]
 8004c9a:	460d      	mov	r5, r1
 8004c9c:	2800      	cmp	r0, #0
 8004c9e:	d072      	beq.n	8004d86 <__ssprint_r+0xfa>
 8004ca0:	f04f 0a00 	mov.w	sl, #0
 8004ca4:	6808      	ldr	r0, [r1, #0]
 8004ca6:	688b      	ldr	r3, [r1, #8]
 8004ca8:	4654      	mov	r4, sl
 8004caa:	2c00      	cmp	r4, #0
 8004cac:	d048      	beq.n	8004d40 <__ssprint_r+0xb4>
 8004cae:	429c      	cmp	r4, r3
 8004cb0:	461e      	mov	r6, r3
 8004cb2:	4698      	mov	r8, r3
 8004cb4:	bf3c      	itt	cc
 8004cb6:	4626      	movcc	r6, r4
 8004cb8:	46a0      	movcc	r8, r4
 8004cba:	d331      	bcc.n	8004d20 <__ssprint_r+0x94>
 8004cbc:	89ab      	ldrh	r3, [r5, #12]
 8004cbe:	f413 6f90 	tst.w	r3, #1152	; 0x480
 8004cc2:	d02d      	beq.n	8004d20 <__ssprint_r+0x94>
 8004cc4:	696e      	ldr	r6, [r5, #20]
 8004cc6:	6929      	ldr	r1, [r5, #16]
 8004cc8:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8004ccc:	ebc1 0800 	rsb	r8, r1, r0
 8004cd0:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 8004cd4:	1c60      	adds	r0, r4, #1
 8004cd6:	1076      	asrs	r6, r6, #1
 8004cd8:	4440      	add	r0, r8
 8004cda:	4286      	cmp	r6, r0
 8004cdc:	4632      	mov	r2, r6
 8004cde:	bf3c      	itt	cc
 8004ce0:	4606      	movcc	r6, r0
 8004ce2:	4632      	movcc	r2, r6
 8004ce4:	055b      	lsls	r3, r3, #21
 8004ce6:	9801      	ldr	r0, [sp, #4]
 8004ce8:	d52f      	bpl.n	8004d4a <__ssprint_r+0xbe>
 8004cea:	4611      	mov	r1, r2
 8004cec:	f7fe fed8 	bl	8003aa0 <_malloc_r>
 8004cf0:	4683      	mov	fp, r0
 8004cf2:	2800      	cmp	r0, #0
 8004cf4:	d032      	beq.n	8004d5c <__ssprint_r+0xd0>
 8004cf6:	6929      	ldr	r1, [r5, #16]
 8004cf8:	4642      	mov	r2, r8
 8004cfa:	f7ff f9c3 	bl	8004084 <memcpy>
 8004cfe:	89ab      	ldrh	r3, [r5, #12]
 8004d00:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004d04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d08:	81ab      	strh	r3, [r5, #12]
 8004d0a:	ebc8 0306 	rsb	r3, r8, r6
 8004d0e:	eb0b 0008 	add.w	r0, fp, r8
 8004d12:	616e      	str	r6, [r5, #20]
 8004d14:	f8c5 b010 	str.w	fp, [r5, #16]
 8004d18:	6028      	str	r0, [r5, #0]
 8004d1a:	4626      	mov	r6, r4
 8004d1c:	60ab      	str	r3, [r5, #8]
 8004d1e:	46a0      	mov	r8, r4
 8004d20:	4642      	mov	r2, r8
 8004d22:	4651      	mov	r1, sl
 8004d24:	f000 fcb8 	bl	8005698 <memmove>
 8004d28:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8004d2c:	68ab      	ldr	r3, [r5, #8]
 8004d2e:	6828      	ldr	r0, [r5, #0]
 8004d30:	1b9b      	subs	r3, r3, r6
 8004d32:	4440      	add	r0, r8
 8004d34:	1b14      	subs	r4, r2, r4
 8004d36:	60ab      	str	r3, [r5, #8]
 8004d38:	6028      	str	r0, [r5, #0]
 8004d3a:	f8c9 4008 	str.w	r4, [r9, #8]
 8004d3e:	b1e4      	cbz	r4, 8004d7a <__ssprint_r+0xee>
 8004d40:	f8d7 a000 	ldr.w	sl, [r7]
 8004d44:	687c      	ldr	r4, [r7, #4]
 8004d46:	3708      	adds	r7, #8
 8004d48:	e7af      	b.n	8004caa <__ssprint_r+0x1e>
 8004d4a:	f000 fd47 	bl	80057dc <_realloc_r>
 8004d4e:	4683      	mov	fp, r0
 8004d50:	2800      	cmp	r0, #0
 8004d52:	d1da      	bne.n	8004d0a <__ssprint_r+0x7e>
 8004d54:	9801      	ldr	r0, [sp, #4]
 8004d56:	6929      	ldr	r1, [r5, #16]
 8004d58:	f7fe fd96 	bl	8003888 <_free_r>
 8004d5c:	9a01      	ldr	r2, [sp, #4]
 8004d5e:	230c      	movs	r3, #12
 8004d60:	6013      	str	r3, [r2, #0]
 8004d62:	89aa      	ldrh	r2, [r5, #12]
 8004d64:	2300      	movs	r3, #0
 8004d66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d6a:	81aa      	strh	r2, [r5, #12]
 8004d6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d70:	f8c9 3008 	str.w	r3, [r9, #8]
 8004d74:	f8c9 3004 	str.w	r3, [r9, #4]
 8004d78:	e002      	b.n	8004d80 <__ssprint_r+0xf4>
 8004d7a:	f8c9 4004 	str.w	r4, [r9, #4]
 8004d7e:	4620      	mov	r0, r4
 8004d80:	b003      	add	sp, #12
 8004d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d86:	6050      	str	r0, [r2, #4]
 8004d88:	e7fa      	b.n	8004d80 <__ssprint_r+0xf4>
 8004d8a:	bf00      	nop

08004d8c <_svfiprintf_r>:
 8004d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d90:	468a      	mov	sl, r1
 8004d92:	8989      	ldrh	r1, [r1, #12]
 8004d94:	b0ad      	sub	sp, #180	; 0xb4
 8004d96:	0609      	lsls	r1, r1, #24
 8004d98:	9007      	str	r0, [sp, #28]
 8004d9a:	9305      	str	r3, [sp, #20]
 8004d9c:	d504      	bpl.n	8004da8 <_svfiprintf_r+0x1c>
 8004d9e:	f8da 3010 	ldr.w	r3, [sl, #16]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	f000 8422 	beq.w	80055ec <_svfiprintf_r+0x860>
 8004da8:	2300      	movs	r3, #0
 8004daa:	f10d 009f 	add.w	r0, sp, #159	; 0x9f
 8004dae:	f10d 08a0 	add.w	r8, sp, #160	; 0xa0
 8004db2:	a90e      	add	r1, sp, #56	; 0x38
 8004db4:	930c      	str	r3, [sp, #48]	; 0x30
 8004db6:	932a      	str	r3, [sp, #168]	; 0xa8
 8004db8:	9329      	str	r3, [sp, #164]	; 0xa4
 8004dba:	9304      	str	r3, [sp, #16]
 8004dbc:	ebc0 0308 	rsb	r3, r0, r8
 8004dc0:	9001      	str	r0, [sp, #4]
 8004dc2:	9128      	str	r1, [sp, #160]	; 0xa0
 8004dc4:	4617      	mov	r7, r2
 8004dc6:	460c      	mov	r4, r1
 8004dc8:	930d      	str	r3, [sp, #52]	; 0x34
 8004dca:	783b      	ldrb	r3, [r7, #0]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	bf18      	it	ne
 8004dd0:	2b25      	cmpne	r3, #37	; 0x25
 8004dd2:	463d      	mov	r5, r7
 8004dd4:	d016      	beq.n	8004e04 <_svfiprintf_r+0x78>
 8004dd6:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8004dda:	2b25      	cmp	r3, #37	; 0x25
 8004ddc:	bf18      	it	ne
 8004dde:	2b00      	cmpne	r3, #0
 8004de0:	d1f9      	bne.n	8004dd6 <_svfiprintf_r+0x4a>
 8004de2:	1bee      	subs	r6, r5, r7
 8004de4:	d00e      	beq.n	8004e04 <_svfiprintf_r+0x78>
 8004de6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8004de8:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8004dea:	6027      	str	r7, [r4, #0]
 8004dec:	3301      	adds	r3, #1
 8004dee:	1992      	adds	r2, r2, r6
 8004df0:	2b07      	cmp	r3, #7
 8004df2:	6066      	str	r6, [r4, #4]
 8004df4:	922a      	str	r2, [sp, #168]	; 0xa8
 8004df6:	9329      	str	r3, [sp, #164]	; 0xa4
 8004df8:	f300 832a 	bgt.w	8005450 <_svfiprintf_r+0x6c4>
 8004dfc:	3408      	adds	r4, #8
 8004dfe:	9b04      	ldr	r3, [sp, #16]
 8004e00:	199b      	adds	r3, r3, r6
 8004e02:	9304      	str	r3, [sp, #16]
 8004e04:	782b      	ldrb	r3, [r5, #0]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	f000 82c5 	beq.w	8005396 <_svfiprintf_r+0x60a>
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	1c6f      	adds	r7, r5, #1
 8004e10:	4613      	mov	r3, r2
 8004e12:	f88d 20af 	strb.w	r2, [sp, #175]	; 0xaf
 8004e16:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004e1a:	9206      	str	r2, [sp, #24]
 8004e1c:	4693      	mov	fp, r2
 8004e1e:	f817 2b01 	ldrb.w	r2, [r7], #1
 8004e22:	f1a2 0120 	sub.w	r1, r2, #32
 8004e26:	2958      	cmp	r1, #88	; 0x58
 8004e28:	f200 8178 	bhi.w	800511c <_svfiprintf_r+0x390>
 8004e2c:	e8df f011 	tbh	[pc, r1, lsl #1]
 8004e30:	01760172 	.word	0x01760172
 8004e34:	016f0176 	.word	0x016f0176
 8004e38:	01760176 	.word	0x01760176
 8004e3c:	01760176 	.word	0x01760176
 8004e40:	01760176 	.word	0x01760176
 8004e44:	01d800af 	.word	0x01d800af
 8004e48:	00ba0176 	.word	0x00ba0176
 8004e4c:	017601da 	.word	0x017601da
 8004e50:	01c401d5 	.word	0x01c401d5
 8004e54:	01c401c4 	.word	0x01c401c4
 8004e58:	01c401c4 	.word	0x01c401c4
 8004e5c:	01c401c4 	.word	0x01c401c4
 8004e60:	01c401c4 	.word	0x01c401c4
 8004e64:	01760176 	.word	0x01760176
 8004e68:	01760176 	.word	0x01760176
 8004e6c:	01760176 	.word	0x01760176
 8004e70:	01760176 	.word	0x01760176
 8004e74:	01760176 	.word	0x01760176
 8004e78:	017601a7 	.word	0x017601a7
 8004e7c:	01760176 	.word	0x01760176
 8004e80:	01760176 	.word	0x01760176
 8004e84:	01760176 	.word	0x01760176
 8004e88:	01760176 	.word	0x01760176
 8004e8c:	005c0176 	.word	0x005c0176
 8004e90:	01760176 	.word	0x01760176
 8004e94:	01760176 	.word	0x01760176
 8004e98:	00a00176 	.word	0x00a00176
 8004e9c:	01760176 	.word	0x01760176
 8004ea0:	0176016a 	.word	0x0176016a
 8004ea4:	01760176 	.word	0x01760176
 8004ea8:	01760176 	.word	0x01760176
 8004eac:	01760176 	.word	0x01760176
 8004eb0:	01760176 	.word	0x01760176
 8004eb4:	01170176 	.word	0x01170176
 8004eb8:	01760105 	.word	0x01760105
 8004ebc:	01760176 	.word	0x01760176
 8004ec0:	01050102 	.word	0x01050102
 8004ec4:	01760176 	.word	0x01760176
 8004ec8:	01760059 	.word	0x01760059
 8004ecc:	005e00d1 	.word	0x005e00d1
 8004ed0:	005900bd 	.word	0x005900bd
 8004ed4:	01870176 	.word	0x01870176
 8004ed8:	00a20176 	.word	0x00a20176
 8004edc:	01760176 	.word	0x01760176
 8004ee0:	00e2      	.short	0x00e2
 8004ee2:	f04b 0b10 	orr.w	fp, fp, #16
 8004ee6:	e79a      	b.n	8004e1e <_svfiprintf_r+0x92>
 8004ee8:	f04b 0b10 	orr.w	fp, fp, #16
 8004eec:	f01b 0210 	ands.w	r2, fp, #16
 8004ef0:	f000 8313 	beq.w	800551a <_svfiprintf_r+0x78e>
 8004ef4:	9805      	ldr	r0, [sp, #20]
 8004ef6:	6803      	ldr	r3, [r0, #0]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	1a99      	subs	r1, r3, r2
 8004efc:	bf18      	it	ne
 8004efe:	2101      	movne	r1, #1
 8004f00:	3004      	adds	r0, #4
 8004f02:	9005      	str	r0, [sp, #20]
 8004f04:	2000      	movs	r0, #0
 8004f06:	f88d 00af 	strb.w	r0, [sp, #175]	; 0xaf
 8004f0a:	2d00      	cmp	r5, #0
 8004f0c:	bfa8      	it	ge
 8004f0e:	f02b 0b80 	bicge.w	fp, fp, #128	; 0x80
 8004f12:	2d00      	cmp	r5, #0
 8004f14:	bf18      	it	ne
 8004f16:	f041 0101 	orrne.w	r1, r1, #1
 8004f1a:	2900      	cmp	r1, #0
 8004f1c:	f000 8228 	beq.w	8005370 <_svfiprintf_r+0x5e4>
 8004f20:	2a01      	cmp	r2, #1
 8004f22:	f000 82cf 	beq.w	80054c4 <_svfiprintf_r+0x738>
 8004f26:	2a02      	cmp	r2, #2
 8004f28:	bf18      	it	ne
 8004f2a:	4642      	movne	r2, r8
 8004f2c:	d101      	bne.n	8004f32 <_svfiprintf_r+0x1a6>
 8004f2e:	e2b9      	b.n	80054a4 <_svfiprintf_r+0x718>
 8004f30:	4602      	mov	r2, r0
 8004f32:	f003 0107 	and.w	r1, r3, #7
 8004f36:	3130      	adds	r1, #48	; 0x30
 8004f38:	1e50      	subs	r0, r2, #1
 8004f3a:	08db      	lsrs	r3, r3, #3
 8004f3c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004f40:	d1f6      	bne.n	8004f30 <_svfiprintf_r+0x1a4>
 8004f42:	f01b 0f01 	tst.w	fp, #1
 8004f46:	9009      	str	r0, [sp, #36]	; 0x24
 8004f48:	f040 831a 	bne.w	8005580 <_svfiprintf_r+0x7f4>
 8004f4c:	ebc0 0308 	rsb	r3, r0, r8
 8004f50:	9303      	str	r3, [sp, #12]
 8004f52:	9508      	str	r5, [sp, #32]
 8004f54:	9803      	ldr	r0, [sp, #12]
 8004f56:	9908      	ldr	r1, [sp, #32]
 8004f58:	f89d 30af 	ldrb.w	r3, [sp, #175]	; 0xaf
 8004f5c:	4288      	cmp	r0, r1
 8004f5e:	bfb8      	it	lt
 8004f60:	4608      	movlt	r0, r1
 8004f62:	9002      	str	r0, [sp, #8]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	f000 808b 	beq.w	8005080 <_svfiprintf_r+0x2f4>
 8004f6a:	3001      	adds	r0, #1
 8004f6c:	9002      	str	r0, [sp, #8]
 8004f6e:	e087      	b.n	8005080 <_svfiprintf_r+0x2f4>
 8004f70:	f04b 0b10 	orr.w	fp, fp, #16
 8004f74:	f01b 0f10 	tst.w	fp, #16
 8004f78:	f000 82c1 	beq.w	80054fe <_svfiprintf_r+0x772>
 8004f7c:	9805      	ldr	r0, [sp, #20]
 8004f7e:	6803      	ldr	r3, [r0, #0]
 8004f80:	2201      	movs	r2, #1
 8004f82:	1c19      	adds	r1, r3, #0
 8004f84:	bf18      	it	ne
 8004f86:	2101      	movne	r1, #1
 8004f88:	3004      	adds	r0, #4
 8004f8a:	9005      	str	r0, [sp, #20]
 8004f8c:	e7ba      	b.n	8004f04 <_svfiprintf_r+0x178>
 8004f8e:	9805      	ldr	r0, [sp, #20]
 8004f90:	9905      	ldr	r1, [sp, #20]
 8004f92:	6800      	ldr	r0, [r0, #0]
 8004f94:	1d0a      	adds	r2, r1, #4
 8004f96:	2800      	cmp	r0, #0
 8004f98:	9006      	str	r0, [sp, #24]
 8004f9a:	f280 82e0 	bge.w	800555e <_svfiprintf_r+0x7d2>
 8004f9e:	4240      	negs	r0, r0
 8004fa0:	9006      	str	r0, [sp, #24]
 8004fa2:	9205      	str	r2, [sp, #20]
 8004fa4:	f04b 0b04 	orr.w	fp, fp, #4
 8004fa8:	e739      	b.n	8004e1e <_svfiprintf_r+0x92>
 8004faa:	9b05      	ldr	r3, [sp, #20]
 8004fac:	9905      	ldr	r1, [sp, #20]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2230      	movs	r2, #48	; 0x30
 8004fb2:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
 8004fb6:	2278      	movs	r2, #120	; 0x78
 8004fb8:	3104      	adds	r1, #4
 8004fba:	f88d 20ad 	strb.w	r2, [sp, #173]	; 0xad
 8004fbe:	4aaf      	ldr	r2, [pc, #700]	; (800527c <_svfiprintf_r+0x4f0>)
 8004fc0:	9105      	str	r1, [sp, #20]
 8004fc2:	1c19      	adds	r1, r3, #0
 8004fc4:	bf18      	it	ne
 8004fc6:	2101      	movne	r1, #1
 8004fc8:	920c      	str	r2, [sp, #48]	; 0x30
 8004fca:	f04b 0b02 	orr.w	fp, fp, #2
 8004fce:	2202      	movs	r2, #2
 8004fd0:	e798      	b.n	8004f04 <_svfiprintf_r+0x178>
 8004fd2:	f01b 0f10 	tst.w	fp, #16
 8004fd6:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 8004fda:	f040 82dd 	bne.w	8005598 <_svfiprintf_r+0x80c>
 8004fde:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8004fe2:	f000 82fb 	beq.w	80055dc <_svfiprintf_r+0x850>
 8004fe6:	9a05      	ldr	r2, [sp, #20]
 8004fe8:	9804      	ldr	r0, [sp, #16]
 8004fea:	6813      	ldr	r3, [r2, #0]
 8004fec:	3204      	adds	r2, #4
 8004fee:	9205      	str	r2, [sp, #20]
 8004ff0:	8018      	strh	r0, [r3, #0]
 8004ff2:	e6ea      	b.n	8004dca <_svfiprintf_r+0x3e>
 8004ff4:	49a1      	ldr	r1, [pc, #644]	; (800527c <_svfiprintf_r+0x4f0>)
 8004ff6:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 8004ffa:	910c      	str	r1, [sp, #48]	; 0x30
 8004ffc:	f01b 0f10 	tst.w	fp, #16
 8005000:	d103      	bne.n	800500a <_svfiprintf_r+0x27e>
 8005002:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8005006:	f040 82d3 	bne.w	80055b0 <_svfiprintf_r+0x824>
 800500a:	9805      	ldr	r0, [sp, #20]
 800500c:	6803      	ldr	r3, [r0, #0]
 800500e:	3004      	adds	r0, #4
 8005010:	9005      	str	r0, [sp, #20]
 8005012:	1c19      	adds	r1, r3, #0
 8005014:	bf18      	it	ne
 8005016:	2101      	movne	r1, #1
 8005018:	ea1b 0f01 	tst.w	fp, r1
 800501c:	f000 8287 	beq.w	800552e <_svfiprintf_r+0x7a2>
 8005020:	2130      	movs	r1, #48	; 0x30
 8005022:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
 8005026:	f88d 20ad 	strb.w	r2, [sp, #173]	; 0xad
 800502a:	f04b 0b02 	orr.w	fp, fp, #2
 800502e:	2101      	movs	r1, #1
 8005030:	2202      	movs	r2, #2
 8005032:	e767      	b.n	8004f04 <_svfiprintf_r+0x178>
 8005034:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
 8005038:	e6f1      	b.n	8004e1e <_svfiprintf_r+0x92>
 800503a:	f01b 0f10 	tst.w	fp, #16
 800503e:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 8005042:	f000 80a4 	beq.w	800518e <_svfiprintf_r+0x402>
 8005046:	9805      	ldr	r0, [sp, #20]
 8005048:	6803      	ldr	r3, [r0, #0]
 800504a:	3004      	adds	r0, #4
 800504c:	9005      	str	r0, [sp, #20]
 800504e:	2b00      	cmp	r3, #0
 8005050:	f2c0 80a9 	blt.w	80051a6 <_svfiprintf_r+0x41a>
 8005054:	bf0c      	ite	eq
 8005056:	2100      	moveq	r1, #0
 8005058:	2101      	movne	r1, #1
 800505a:	2201      	movs	r2, #1
 800505c:	e755      	b.n	8004f0a <_svfiprintf_r+0x17e>
 800505e:	9b05      	ldr	r3, [sp, #20]
 8005060:	9905      	ldr	r1, [sp, #20]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	2001      	movs	r0, #1
 8005066:	2200      	movs	r2, #0
 8005068:	3104      	adds	r1, #4
 800506a:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
 800506e:	ab1e      	add	r3, sp, #120	; 0x78
 8005070:	f88d 20af 	strb.w	r2, [sp, #175]	; 0xaf
 8005074:	9002      	str	r0, [sp, #8]
 8005076:	9105      	str	r1, [sp, #20]
 8005078:	9003      	str	r0, [sp, #12]
 800507a:	9309      	str	r3, [sp, #36]	; 0x24
 800507c:	2300      	movs	r3, #0
 800507e:	9308      	str	r3, [sp, #32]
 8005080:	f01b 0302 	ands.w	r3, fp, #2
 8005084:	930a      	str	r3, [sp, #40]	; 0x28
 8005086:	d002      	beq.n	800508e <_svfiprintf_r+0x302>
 8005088:	9b02      	ldr	r3, [sp, #8]
 800508a:	3302      	adds	r3, #2
 800508c:	9302      	str	r3, [sp, #8]
 800508e:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
 8005092:	930b      	str	r3, [sp, #44]	; 0x2c
 8005094:	f040 80c1 	bne.w	800521a <_svfiprintf_r+0x48e>
 8005098:	9b06      	ldr	r3, [sp, #24]
 800509a:	9802      	ldr	r0, [sp, #8]
 800509c:	1a1d      	subs	r5, r3, r0
 800509e:	2d00      	cmp	r5, #0
 80050a0:	f340 80bb 	ble.w	800521a <_svfiprintf_r+0x48e>
 80050a4:	2d10      	cmp	r5, #16
 80050a6:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80050a8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80050aa:	4e75      	ldr	r6, [pc, #468]	; (8005280 <_svfiprintf_r+0x4f4>)
 80050ac:	dd1f      	ble.n	80050ee <_svfiprintf_r+0x362>
 80050ae:	4621      	mov	r1, r4
 80050b0:	f04f 0910 	mov.w	r9, #16
 80050b4:	9c07      	ldr	r4, [sp, #28]
 80050b6:	e002      	b.n	80050be <_svfiprintf_r+0x332>
 80050b8:	3d10      	subs	r5, #16
 80050ba:	2d10      	cmp	r5, #16
 80050bc:	dd16      	ble.n	80050ec <_svfiprintf_r+0x360>
 80050be:	3301      	adds	r3, #1
 80050c0:	3210      	adds	r2, #16
 80050c2:	e881 0240 	stmia.w	r1, {r6, r9}
 80050c6:	3108      	adds	r1, #8
 80050c8:	2b07      	cmp	r3, #7
 80050ca:	922a      	str	r2, [sp, #168]	; 0xa8
 80050cc:	9329      	str	r3, [sp, #164]	; 0xa4
 80050ce:	ddf3      	ble.n	80050b8 <_svfiprintf_r+0x32c>
 80050d0:	4620      	mov	r0, r4
 80050d2:	4651      	mov	r1, sl
 80050d4:	4642      	mov	r2, r8
 80050d6:	f7ff fdd9 	bl	8004c8c <__ssprint_r>
 80050da:	2800      	cmp	r0, #0
 80050dc:	f040 8162 	bne.w	80053a4 <_svfiprintf_r+0x618>
 80050e0:	3d10      	subs	r5, #16
 80050e2:	2d10      	cmp	r5, #16
 80050e4:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80050e6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80050e8:	a90e      	add	r1, sp, #56	; 0x38
 80050ea:	dce8      	bgt.n	80050be <_svfiprintf_r+0x332>
 80050ec:	460c      	mov	r4, r1
 80050ee:	3301      	adds	r3, #1
 80050f0:	1952      	adds	r2, r2, r5
 80050f2:	2b07      	cmp	r3, #7
 80050f4:	6026      	str	r6, [r4, #0]
 80050f6:	6065      	str	r5, [r4, #4]
 80050f8:	922a      	str	r2, [sp, #168]	; 0xa8
 80050fa:	9329      	str	r3, [sp, #164]	; 0xa4
 80050fc:	f300 8219 	bgt.w	8005532 <_svfiprintf_r+0x7a6>
 8005100:	3408      	adds	r4, #8
 8005102:	e08c      	b.n	800521e <_svfiprintf_r+0x492>
 8005104:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 8005108:	4b5e      	ldr	r3, [pc, #376]	; (8005284 <_svfiprintf_r+0x4f8>)
 800510a:	930c      	str	r3, [sp, #48]	; 0x30
 800510c:	e776      	b.n	8004ffc <_svfiprintf_r+0x270>
 800510e:	f04b 0b01 	orr.w	fp, fp, #1
 8005112:	e684      	b.n	8004e1e <_svfiprintf_r+0x92>
 8005114:	2b00      	cmp	r3, #0
 8005116:	bf08      	it	eq
 8005118:	2320      	moveq	r3, #32
 800511a:	e680      	b.n	8004e1e <_svfiprintf_r+0x92>
 800511c:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 8005120:	2a00      	cmp	r2, #0
 8005122:	f000 8138 	beq.w	8005396 <_svfiprintf_r+0x60a>
 8005126:	2301      	movs	r3, #1
 8005128:	9302      	str	r3, [sp, #8]
 800512a:	2300      	movs	r3, #0
 800512c:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 8005130:	2301      	movs	r3, #1
 8005132:	9303      	str	r3, [sp, #12]
 8005134:	ab1e      	add	r3, sp, #120	; 0x78
 8005136:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 800513a:	9309      	str	r3, [sp, #36]	; 0x24
 800513c:	e79e      	b.n	800507c <_svfiprintf_r+0x2f0>
 800513e:	9b05      	ldr	r3, [sp, #20]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	9309      	str	r3, [sp, #36]	; 0x24
 8005144:	9b05      	ldr	r3, [sp, #20]
 8005146:	3304      	adds	r3, #4
 8005148:	9305      	str	r3, [sp, #20]
 800514a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800514c:	2600      	movs	r6, #0
 800514e:	f88d 60af 	strb.w	r6, [sp, #175]	; 0xaf
 8005152:	2b00      	cmp	r3, #0
 8005154:	f000 8259 	beq.w	800560a <_svfiprintf_r+0x87e>
 8005158:	2d00      	cmp	r5, #0
 800515a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800515c:	f2c0 822d 	blt.w	80055ba <_svfiprintf_r+0x82e>
 8005160:	4631      	mov	r1, r6
 8005162:	462a      	mov	r2, r5
 8005164:	f7fe ff50 	bl	8004008 <memchr>
 8005168:	2800      	cmp	r0, #0
 800516a:	f000 8258 	beq.w	800561e <_svfiprintf_r+0x892>
 800516e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005170:	9608      	str	r6, [sp, #32]
 8005172:	1ac0      	subs	r0, r0, r3
 8005174:	42a8      	cmp	r0, r5
 8005176:	9003      	str	r0, [sp, #12]
 8005178:	bfc8      	it	gt
 800517a:	9503      	strgt	r5, [sp, #12]
 800517c:	e6ea      	b.n	8004f54 <_svfiprintf_r+0x1c8>
 800517e:	f04b 0b10 	orr.w	fp, fp, #16
 8005182:	f01b 0f10 	tst.w	fp, #16
 8005186:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 800518a:	f47f af5c 	bne.w	8005046 <_svfiprintf_r+0x2ba>
 800518e:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8005192:	f000 8208 	beq.w	80055a6 <_svfiprintf_r+0x81a>
 8005196:	9905      	ldr	r1, [sp, #20]
 8005198:	f9b1 3000 	ldrsh.w	r3, [r1]
 800519c:	3104      	adds	r1, #4
 800519e:	2b00      	cmp	r3, #0
 80051a0:	9105      	str	r1, [sp, #20]
 80051a2:	f6bf af57 	bge.w	8005054 <_svfiprintf_r+0x2c8>
 80051a6:	425b      	negs	r3, r3
 80051a8:	222d      	movs	r2, #45	; 0x2d
 80051aa:	1c19      	adds	r1, r3, #0
 80051ac:	f88d 20af 	strb.w	r2, [sp, #175]	; 0xaf
 80051b0:	bf18      	it	ne
 80051b2:	2101      	movne	r1, #1
 80051b4:	2201      	movs	r2, #1
 80051b6:	e6a8      	b.n	8004f0a <_svfiprintf_r+0x17e>
 80051b8:	4638      	mov	r0, r7
 80051ba:	2100      	movs	r1, #0
 80051bc:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 80051c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80051c4:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80051c8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80051cc:	2e09      	cmp	r6, #9
 80051ce:	eb07 0141 	add.w	r1, r7, r1, lsl #1
 80051d2:	4607      	mov	r7, r0
 80051d4:	d9f2      	bls.n	80051bc <_svfiprintf_r+0x430>
 80051d6:	9106      	str	r1, [sp, #24]
 80051d8:	e623      	b.n	8004e22 <_svfiprintf_r+0x96>
 80051da:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 80051de:	e61e      	b.n	8004e1e <_svfiprintf_r+0x92>
 80051e0:	232b      	movs	r3, #43	; 0x2b
 80051e2:	e61c      	b.n	8004e1e <_svfiprintf_r+0x92>
 80051e4:	f817 2b01 	ldrb.w	r2, [r7], #1
 80051e8:	2a2a      	cmp	r2, #42	; 0x2a
 80051ea:	f000 81ae 	beq.w	800554a <_svfiprintf_r+0x7be>
 80051ee:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80051f2:	2500      	movs	r5, #0
 80051f4:	2909      	cmp	r1, #9
 80051f6:	f63f ae14 	bhi.w	8004e22 <_svfiprintf_r+0x96>
 80051fa:	4638      	mov	r0, r7
 80051fc:	2500      	movs	r5, #0
 80051fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005202:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8005206:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 800520a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800520e:	2909      	cmp	r1, #9
 8005210:	4607      	mov	r7, r0
 8005212:	d9f4      	bls.n	80051fe <_svfiprintf_r+0x472>
 8005214:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 8005218:	e603      	b.n	8004e22 <_svfiprintf_r+0x96>
 800521a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800521c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800521e:	f89d 10af 	ldrb.w	r1, [sp, #175]	; 0xaf
 8005222:	b161      	cbz	r1, 800523e <_svfiprintf_r+0x4b2>
 8005224:	3301      	adds	r3, #1
 8005226:	f10d 01af 	add.w	r1, sp, #175	; 0xaf
 800522a:	3201      	adds	r2, #1
 800522c:	6021      	str	r1, [r4, #0]
 800522e:	2101      	movs	r1, #1
 8005230:	2b07      	cmp	r3, #7
 8005232:	6061      	str	r1, [r4, #4]
 8005234:	922a      	str	r2, [sp, #168]	; 0xa8
 8005236:	9329      	str	r3, [sp, #164]	; 0xa4
 8005238:	f300 811e 	bgt.w	8005478 <_svfiprintf_r+0x6ec>
 800523c:	3408      	adds	r4, #8
 800523e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005240:	b159      	cbz	r1, 800525a <_svfiprintf_r+0x4ce>
 8005242:	3301      	adds	r3, #1
 8005244:	a92b      	add	r1, sp, #172	; 0xac
 8005246:	3202      	adds	r2, #2
 8005248:	6021      	str	r1, [r4, #0]
 800524a:	2102      	movs	r1, #2
 800524c:	2b07      	cmp	r3, #7
 800524e:	6061      	str	r1, [r4, #4]
 8005250:	922a      	str	r2, [sp, #168]	; 0xa8
 8005252:	9329      	str	r3, [sp, #164]	; 0xa4
 8005254:	f300 811b 	bgt.w	800548e <_svfiprintf_r+0x702>
 8005258:	3408      	adds	r4, #8
 800525a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800525c:	2880      	cmp	r0, #128	; 0x80
 800525e:	f000 80ae 	beq.w	80053be <_svfiprintf_r+0x632>
 8005262:	9808      	ldr	r0, [sp, #32]
 8005264:	9903      	ldr	r1, [sp, #12]
 8005266:	1a45      	subs	r5, r0, r1
 8005268:	2d00      	cmp	r5, #0
 800526a:	dd33      	ble.n	80052d4 <_svfiprintf_r+0x548>
 800526c:	2d10      	cmp	r5, #16
 800526e:	4e06      	ldr	r6, [pc, #24]	; (8005288 <_svfiprintf_r+0x4fc>)
 8005270:	dd26      	ble.n	80052c0 <_svfiprintf_r+0x534>
 8005272:	4621      	mov	r1, r4
 8005274:	f04f 0910 	mov.w	r9, #16
 8005278:	9c07      	ldr	r4, [sp, #28]
 800527a:	e00a      	b.n	8005292 <_svfiprintf_r+0x506>
 800527c:	080068b0 	.word	0x080068b0
 8005280:	080067b0 	.word	0x080067b0
 8005284:	0800689c 	.word	0x0800689c
 8005288:	080067c0 	.word	0x080067c0
 800528c:	3d10      	subs	r5, #16
 800528e:	2d10      	cmp	r5, #16
 8005290:	dd15      	ble.n	80052be <_svfiprintf_r+0x532>
 8005292:	3301      	adds	r3, #1
 8005294:	3210      	adds	r2, #16
 8005296:	e881 0240 	stmia.w	r1, {r6, r9}
 800529a:	3108      	adds	r1, #8
 800529c:	2b07      	cmp	r3, #7
 800529e:	922a      	str	r2, [sp, #168]	; 0xa8
 80052a0:	9329      	str	r3, [sp, #164]	; 0xa4
 80052a2:	ddf3      	ble.n	800528c <_svfiprintf_r+0x500>
 80052a4:	4620      	mov	r0, r4
 80052a6:	4651      	mov	r1, sl
 80052a8:	4642      	mov	r2, r8
 80052aa:	f7ff fcef 	bl	8004c8c <__ssprint_r>
 80052ae:	2800      	cmp	r0, #0
 80052b0:	d178      	bne.n	80053a4 <_svfiprintf_r+0x618>
 80052b2:	3d10      	subs	r5, #16
 80052b4:	2d10      	cmp	r5, #16
 80052b6:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80052b8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80052ba:	a90e      	add	r1, sp, #56	; 0x38
 80052bc:	dce9      	bgt.n	8005292 <_svfiprintf_r+0x506>
 80052be:	460c      	mov	r4, r1
 80052c0:	3301      	adds	r3, #1
 80052c2:	1952      	adds	r2, r2, r5
 80052c4:	2b07      	cmp	r3, #7
 80052c6:	6026      	str	r6, [r4, #0]
 80052c8:	6065      	str	r5, [r4, #4]
 80052ca:	922a      	str	r2, [sp, #168]	; 0xa8
 80052cc:	9329      	str	r3, [sp, #164]	; 0xa4
 80052ce:	f300 80c8 	bgt.w	8005462 <_svfiprintf_r+0x6d6>
 80052d2:	3408      	adds	r4, #8
 80052d4:	9903      	ldr	r1, [sp, #12]
 80052d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80052d8:	3301      	adds	r3, #1
 80052da:	1852      	adds	r2, r2, r1
 80052dc:	2b07      	cmp	r3, #7
 80052de:	e884 0003 	stmia.w	r4, {r0, r1}
 80052e2:	922a      	str	r2, [sp, #168]	; 0xa8
 80052e4:	9329      	str	r3, [sp, #164]	; 0xa4
 80052e6:	bfd8      	it	le
 80052e8:	f104 0108 	addle.w	r1, r4, #8
 80052ec:	f300 809a 	bgt.w	8005424 <_svfiprintf_r+0x698>
 80052f0:	f01b 0f04 	tst.w	fp, #4
 80052f4:	d02e      	beq.n	8005354 <_svfiprintf_r+0x5c8>
 80052f6:	9b06      	ldr	r3, [sp, #24]
 80052f8:	9802      	ldr	r0, [sp, #8]
 80052fa:	1a1d      	subs	r5, r3, r0
 80052fc:	2d00      	cmp	r5, #0
 80052fe:	dd29      	ble.n	8005354 <_svfiprintf_r+0x5c8>
 8005300:	2d10      	cmp	r5, #16
 8005302:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8005304:	4e97      	ldr	r6, [pc, #604]	; (8005564 <_svfiprintf_r+0x7d8>)
 8005306:	dd1c      	ble.n	8005342 <_svfiprintf_r+0x5b6>
 8005308:	2410      	movs	r4, #16
 800530a:	f8dd 901c 	ldr.w	r9, [sp, #28]
 800530e:	e002      	b.n	8005316 <_svfiprintf_r+0x58a>
 8005310:	3d10      	subs	r5, #16
 8005312:	2d10      	cmp	r5, #16
 8005314:	dd15      	ble.n	8005342 <_svfiprintf_r+0x5b6>
 8005316:	3301      	adds	r3, #1
 8005318:	3210      	adds	r2, #16
 800531a:	600e      	str	r6, [r1, #0]
 800531c:	604c      	str	r4, [r1, #4]
 800531e:	3108      	adds	r1, #8
 8005320:	2b07      	cmp	r3, #7
 8005322:	922a      	str	r2, [sp, #168]	; 0xa8
 8005324:	9329      	str	r3, [sp, #164]	; 0xa4
 8005326:	ddf3      	ble.n	8005310 <_svfiprintf_r+0x584>
 8005328:	4648      	mov	r0, r9
 800532a:	4651      	mov	r1, sl
 800532c:	4642      	mov	r2, r8
 800532e:	f7ff fcad 	bl	8004c8c <__ssprint_r>
 8005332:	2800      	cmp	r0, #0
 8005334:	d136      	bne.n	80053a4 <_svfiprintf_r+0x618>
 8005336:	3d10      	subs	r5, #16
 8005338:	2d10      	cmp	r5, #16
 800533a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800533c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800533e:	a90e      	add	r1, sp, #56	; 0x38
 8005340:	dce9      	bgt.n	8005316 <_svfiprintf_r+0x58a>
 8005342:	3301      	adds	r3, #1
 8005344:	18aa      	adds	r2, r5, r2
 8005346:	2b07      	cmp	r3, #7
 8005348:	600e      	str	r6, [r1, #0]
 800534a:	604d      	str	r5, [r1, #4]
 800534c:	922a      	str	r2, [sp, #168]	; 0xa8
 800534e:	9329      	str	r3, [sp, #164]	; 0xa4
 8005350:	f300 810c 	bgt.w	800556c <_svfiprintf_r+0x7e0>
 8005354:	9b04      	ldr	r3, [sp, #16]
 8005356:	9902      	ldr	r1, [sp, #8]
 8005358:	9806      	ldr	r0, [sp, #24]
 800535a:	4281      	cmp	r1, r0
 800535c:	bfac      	ite	ge
 800535e:	185b      	addge	r3, r3, r1
 8005360:	181b      	addlt	r3, r3, r0
 8005362:	9304      	str	r3, [sp, #16]
 8005364:	2a00      	cmp	r2, #0
 8005366:	d167      	bne.n	8005438 <_svfiprintf_r+0x6ac>
 8005368:	2300      	movs	r3, #0
 800536a:	9329      	str	r3, [sp, #164]	; 0xa4
 800536c:	ac0e      	add	r4, sp, #56	; 0x38
 800536e:	e52c      	b.n	8004dca <_svfiprintf_r+0x3e>
 8005370:	2a00      	cmp	r2, #0
 8005372:	d169      	bne.n	8005448 <_svfiprintf_r+0x6bc>
 8005374:	f01b 0f01 	tst.w	fp, #1
 8005378:	bf04      	itt	eq
 800537a:	9203      	streq	r2, [sp, #12]
 800537c:	f8cd 8024 	streq.w	r8, [sp, #36]	; 0x24
 8005380:	f43f ade7 	beq.w	8004f52 <_svfiprintf_r+0x1c6>
 8005384:	2330      	movs	r3, #48	; 0x30
 8005386:	f88d 309f 	strb.w	r3, [sp, #159]	; 0x9f
 800538a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800538c:	9303      	str	r3, [sp, #12]
 800538e:	f10d 039f 	add.w	r3, sp, #159	; 0x9f
 8005392:	9309      	str	r3, [sp, #36]	; 0x24
 8005394:	e5dd      	b.n	8004f52 <_svfiprintf_r+0x1c6>
 8005396:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8005398:	b123      	cbz	r3, 80053a4 <_svfiprintf_r+0x618>
 800539a:	9807      	ldr	r0, [sp, #28]
 800539c:	4651      	mov	r1, sl
 800539e:	aa28      	add	r2, sp, #160	; 0xa0
 80053a0:	f7ff fc74 	bl	8004c8c <__ssprint_r>
 80053a4:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 80053a8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80053ac:	9b04      	ldr	r3, [sp, #16]
 80053ae:	bf18      	it	ne
 80053b0:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 80053b4:	9304      	str	r3, [sp, #16]
 80053b6:	9804      	ldr	r0, [sp, #16]
 80053b8:	b02d      	add	sp, #180	; 0xb4
 80053ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053be:	9906      	ldr	r1, [sp, #24]
 80053c0:	9802      	ldr	r0, [sp, #8]
 80053c2:	1a0d      	subs	r5, r1, r0
 80053c4:	2d00      	cmp	r5, #0
 80053c6:	f77f af4c 	ble.w	8005262 <_svfiprintf_r+0x4d6>
 80053ca:	2d10      	cmp	r5, #16
 80053cc:	4e66      	ldr	r6, [pc, #408]	; (8005568 <_svfiprintf_r+0x7dc>)
 80053ce:	dd1e      	ble.n	800540e <_svfiprintf_r+0x682>
 80053d0:	4621      	mov	r1, r4
 80053d2:	f04f 0910 	mov.w	r9, #16
 80053d6:	9c07      	ldr	r4, [sp, #28]
 80053d8:	e002      	b.n	80053e0 <_svfiprintf_r+0x654>
 80053da:	3d10      	subs	r5, #16
 80053dc:	2d10      	cmp	r5, #16
 80053de:	dd15      	ble.n	800540c <_svfiprintf_r+0x680>
 80053e0:	3301      	adds	r3, #1
 80053e2:	3210      	adds	r2, #16
 80053e4:	e881 0240 	stmia.w	r1, {r6, r9}
 80053e8:	3108      	adds	r1, #8
 80053ea:	2b07      	cmp	r3, #7
 80053ec:	922a      	str	r2, [sp, #168]	; 0xa8
 80053ee:	9329      	str	r3, [sp, #164]	; 0xa4
 80053f0:	ddf3      	ble.n	80053da <_svfiprintf_r+0x64e>
 80053f2:	4620      	mov	r0, r4
 80053f4:	4651      	mov	r1, sl
 80053f6:	4642      	mov	r2, r8
 80053f8:	f7ff fc48 	bl	8004c8c <__ssprint_r>
 80053fc:	2800      	cmp	r0, #0
 80053fe:	d1d1      	bne.n	80053a4 <_svfiprintf_r+0x618>
 8005400:	3d10      	subs	r5, #16
 8005402:	2d10      	cmp	r5, #16
 8005404:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8005406:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8005408:	a90e      	add	r1, sp, #56	; 0x38
 800540a:	dce9      	bgt.n	80053e0 <_svfiprintf_r+0x654>
 800540c:	460c      	mov	r4, r1
 800540e:	3301      	adds	r3, #1
 8005410:	1952      	adds	r2, r2, r5
 8005412:	2b07      	cmp	r3, #7
 8005414:	6026      	str	r6, [r4, #0]
 8005416:	6065      	str	r5, [r4, #4]
 8005418:	922a      	str	r2, [sp, #168]	; 0xa8
 800541a:	9329      	str	r3, [sp, #164]	; 0xa4
 800541c:	f300 80d2 	bgt.w	80055c4 <_svfiprintf_r+0x838>
 8005420:	3408      	adds	r4, #8
 8005422:	e71e      	b.n	8005262 <_svfiprintf_r+0x4d6>
 8005424:	9807      	ldr	r0, [sp, #28]
 8005426:	4651      	mov	r1, sl
 8005428:	4642      	mov	r2, r8
 800542a:	f7ff fc2f 	bl	8004c8c <__ssprint_r>
 800542e:	2800      	cmp	r0, #0
 8005430:	d1b8      	bne.n	80053a4 <_svfiprintf_r+0x618>
 8005432:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8005434:	a90e      	add	r1, sp, #56	; 0x38
 8005436:	e75b      	b.n	80052f0 <_svfiprintf_r+0x564>
 8005438:	9807      	ldr	r0, [sp, #28]
 800543a:	4651      	mov	r1, sl
 800543c:	4642      	mov	r2, r8
 800543e:	f7ff fc25 	bl	8004c8c <__ssprint_r>
 8005442:	2800      	cmp	r0, #0
 8005444:	d090      	beq.n	8005368 <_svfiprintf_r+0x5dc>
 8005446:	e7ad      	b.n	80053a4 <_svfiprintf_r+0x618>
 8005448:	9103      	str	r1, [sp, #12]
 800544a:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 800544e:	e580      	b.n	8004f52 <_svfiprintf_r+0x1c6>
 8005450:	9807      	ldr	r0, [sp, #28]
 8005452:	4651      	mov	r1, sl
 8005454:	4642      	mov	r2, r8
 8005456:	f7ff fc19 	bl	8004c8c <__ssprint_r>
 800545a:	2800      	cmp	r0, #0
 800545c:	d1a2      	bne.n	80053a4 <_svfiprintf_r+0x618>
 800545e:	ac0e      	add	r4, sp, #56	; 0x38
 8005460:	e4cd      	b.n	8004dfe <_svfiprintf_r+0x72>
 8005462:	9807      	ldr	r0, [sp, #28]
 8005464:	4651      	mov	r1, sl
 8005466:	4642      	mov	r2, r8
 8005468:	f7ff fc10 	bl	8004c8c <__ssprint_r>
 800546c:	2800      	cmp	r0, #0
 800546e:	d199      	bne.n	80053a4 <_svfiprintf_r+0x618>
 8005470:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8005472:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8005474:	ac0e      	add	r4, sp, #56	; 0x38
 8005476:	e72d      	b.n	80052d4 <_svfiprintf_r+0x548>
 8005478:	9807      	ldr	r0, [sp, #28]
 800547a:	4651      	mov	r1, sl
 800547c:	4642      	mov	r2, r8
 800547e:	f7ff fc05 	bl	8004c8c <__ssprint_r>
 8005482:	2800      	cmp	r0, #0
 8005484:	d18e      	bne.n	80053a4 <_svfiprintf_r+0x618>
 8005486:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8005488:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800548a:	ac0e      	add	r4, sp, #56	; 0x38
 800548c:	e6d7      	b.n	800523e <_svfiprintf_r+0x4b2>
 800548e:	9807      	ldr	r0, [sp, #28]
 8005490:	4651      	mov	r1, sl
 8005492:	4642      	mov	r2, r8
 8005494:	f7ff fbfa 	bl	8004c8c <__ssprint_r>
 8005498:	2800      	cmp	r0, #0
 800549a:	d183      	bne.n	80053a4 <_svfiprintf_r+0x618>
 800549c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800549e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80054a0:	ac0e      	add	r4, sp, #56	; 0x38
 80054a2:	e6da      	b.n	800525a <_svfiprintf_r+0x4ce>
 80054a4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80054a6:	f10d 029f 	add.w	r2, sp, #159	; 0x9f
 80054aa:	f003 000f 	and.w	r0, r3, #15
 80054ae:	4611      	mov	r1, r2
 80054b0:	5c30      	ldrb	r0, [r6, r0]
 80054b2:	3a01      	subs	r2, #1
 80054b4:	091b      	lsrs	r3, r3, #4
 80054b6:	7008      	strb	r0, [r1, #0]
 80054b8:	d1f7      	bne.n	80054aa <_svfiprintf_r+0x71e>
 80054ba:	ebc1 0308 	rsb	r3, r1, r8
 80054be:	9109      	str	r1, [sp, #36]	; 0x24
 80054c0:	9303      	str	r3, [sp, #12]
 80054c2:	e546      	b.n	8004f52 <_svfiprintf_r+0x1c6>
 80054c4:	2b09      	cmp	r3, #9
 80054c6:	bf82      	ittt	hi
 80054c8:	f64c 46cd 	movwhi	r6, #52429	; 0xcccd
 80054cc:	f10d 019f 	addhi.w	r1, sp, #159	; 0x9f
 80054d0:	f6cc 46cc 	movthi	r6, #52428	; 0xcccc
 80054d4:	d801      	bhi.n	80054da <_svfiprintf_r+0x74e>
 80054d6:	3330      	adds	r3, #48	; 0x30
 80054d8:	e755      	b.n	8005386 <_svfiprintf_r+0x5fa>
 80054da:	fba6 0203 	umull	r0, r2, r6, r3
 80054de:	08d2      	lsrs	r2, r2, #3
 80054e0:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
 80054e4:	eba3 0c4c 	sub.w	ip, r3, ip, lsl #1
 80054e8:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 80054ec:	4608      	mov	r0, r1
 80054ee:	f881 c000 	strb.w	ip, [r1]
 80054f2:	4613      	mov	r3, r2
 80054f4:	3901      	subs	r1, #1
 80054f6:	2a00      	cmp	r2, #0
 80054f8:	d1ef      	bne.n	80054da <_svfiprintf_r+0x74e>
 80054fa:	9009      	str	r0, [sp, #36]	; 0x24
 80054fc:	e526      	b.n	8004f4c <_svfiprintf_r+0x1c0>
 80054fe:	9905      	ldr	r1, [sp, #20]
 8005500:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8005504:	bf14      	ite	ne
 8005506:	880b      	ldrhne	r3, [r1, #0]
 8005508:	680b      	ldreq	r3, [r1, #0]
 800550a:	2201      	movs	r2, #1
 800550c:	9805      	ldr	r0, [sp, #20]
 800550e:	1c19      	adds	r1, r3, #0
 8005510:	bf18      	it	ne
 8005512:	2101      	movne	r1, #1
 8005514:	3004      	adds	r0, #4
 8005516:	9005      	str	r0, [sp, #20]
 8005518:	e4f4      	b.n	8004f04 <_svfiprintf_r+0x178>
 800551a:	f01b 0140 	ands.w	r1, fp, #64	; 0x40
 800551e:	bf0b      	itete	eq
 8005520:	9a05      	ldreq	r2, [sp, #20]
 8005522:	9905      	ldrne	r1, [sp, #20]
 8005524:	6813      	ldreq	r3, [r2, #0]
 8005526:	880b      	ldrhne	r3, [r1, #0]
 8005528:	bf08      	it	eq
 800552a:	460a      	moveq	r2, r1
 800552c:	e7ee      	b.n	800550c <_svfiprintf_r+0x780>
 800552e:	2202      	movs	r2, #2
 8005530:	e4e8      	b.n	8004f04 <_svfiprintf_r+0x178>
 8005532:	9807      	ldr	r0, [sp, #28]
 8005534:	4651      	mov	r1, sl
 8005536:	4642      	mov	r2, r8
 8005538:	f7ff fba8 	bl	8004c8c <__ssprint_r>
 800553c:	2800      	cmp	r0, #0
 800553e:	f47f af31 	bne.w	80053a4 <_svfiprintf_r+0x618>
 8005542:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8005544:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8005546:	ac0e      	add	r4, sp, #56	; 0x38
 8005548:	e669      	b.n	800521e <_svfiprintf_r+0x492>
 800554a:	9a05      	ldr	r2, [sp, #20]
 800554c:	6815      	ldr	r5, [r2, #0]
 800554e:	3204      	adds	r2, #4
 8005550:	2d00      	cmp	r5, #0
 8005552:	bfbc      	itt	lt
 8005554:	9205      	strlt	r2, [sp, #20]
 8005556:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
 800555a:	f6ff ac60 	blt.w	8004e1e <_svfiprintf_r+0x92>
 800555e:	9205      	str	r2, [sp, #20]
 8005560:	e45d      	b.n	8004e1e <_svfiprintf_r+0x92>
 8005562:	bf00      	nop
 8005564:	080067b0 	.word	0x080067b0
 8005568:	080067c0 	.word	0x080067c0
 800556c:	9807      	ldr	r0, [sp, #28]
 800556e:	4651      	mov	r1, sl
 8005570:	4642      	mov	r2, r8
 8005572:	f7ff fb8b 	bl	8004c8c <__ssprint_r>
 8005576:	2800      	cmp	r0, #0
 8005578:	f47f af14 	bne.w	80053a4 <_svfiprintf_r+0x618>
 800557c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800557e:	e6e9      	b.n	8005354 <_svfiprintf_r+0x5c8>
 8005580:	2930      	cmp	r1, #48	; 0x30
 8005582:	d004      	beq.n	800558e <_svfiprintf_r+0x802>
 8005584:	1e93      	subs	r3, r2, #2
 8005586:	9309      	str	r3, [sp, #36]	; 0x24
 8005588:	2330      	movs	r3, #48	; 0x30
 800558a:	f802 3c02 	strb.w	r3, [r2, #-2]
 800558e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005590:	ebc3 0308 	rsb	r3, r3, r8
 8005594:	9303      	str	r3, [sp, #12]
 8005596:	e4dc      	b.n	8004f52 <_svfiprintf_r+0x1c6>
 8005598:	9805      	ldr	r0, [sp, #20]
 800559a:	9904      	ldr	r1, [sp, #16]
 800559c:	6803      	ldr	r3, [r0, #0]
 800559e:	3004      	adds	r0, #4
 80055a0:	9005      	str	r0, [sp, #20]
 80055a2:	6019      	str	r1, [r3, #0]
 80055a4:	e411      	b.n	8004dca <_svfiprintf_r+0x3e>
 80055a6:	9a05      	ldr	r2, [sp, #20]
 80055a8:	6813      	ldr	r3, [r2, #0]
 80055aa:	3204      	adds	r2, #4
 80055ac:	9205      	str	r2, [sp, #20]
 80055ae:	e54e      	b.n	800504e <_svfiprintf_r+0x2c2>
 80055b0:	9905      	ldr	r1, [sp, #20]
 80055b2:	880b      	ldrh	r3, [r1, #0]
 80055b4:	3104      	adds	r1, #4
 80055b6:	9105      	str	r1, [sp, #20]
 80055b8:	e52b      	b.n	8005012 <_svfiprintf_r+0x286>
 80055ba:	f7ff fb37 	bl	8004c2c <strlen>
 80055be:	9608      	str	r6, [sp, #32]
 80055c0:	9003      	str	r0, [sp, #12]
 80055c2:	e4c7      	b.n	8004f54 <_svfiprintf_r+0x1c8>
 80055c4:	9807      	ldr	r0, [sp, #28]
 80055c6:	4651      	mov	r1, sl
 80055c8:	4642      	mov	r2, r8
 80055ca:	f7ff fb5f 	bl	8004c8c <__ssprint_r>
 80055ce:	2800      	cmp	r0, #0
 80055d0:	f47f aee8 	bne.w	80053a4 <_svfiprintf_r+0x618>
 80055d4:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80055d6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80055d8:	ac0e      	add	r4, sp, #56	; 0x38
 80055da:	e642      	b.n	8005262 <_svfiprintf_r+0x4d6>
 80055dc:	9905      	ldr	r1, [sp, #20]
 80055de:	9a04      	ldr	r2, [sp, #16]
 80055e0:	680b      	ldr	r3, [r1, #0]
 80055e2:	3104      	adds	r1, #4
 80055e4:	9105      	str	r1, [sp, #20]
 80055e6:	601a      	str	r2, [r3, #0]
 80055e8:	f7ff bbef 	b.w	8004dca <_svfiprintf_r+0x3e>
 80055ec:	2140      	movs	r1, #64	; 0x40
 80055ee:	9200      	str	r2, [sp, #0]
 80055f0:	f7fe fa56 	bl	8003aa0 <_malloc_r>
 80055f4:	9a00      	ldr	r2, [sp, #0]
 80055f6:	f8ca 0000 	str.w	r0, [sl]
 80055fa:	f8ca 0010 	str.w	r0, [sl, #16]
 80055fe:	b188      	cbz	r0, 8005624 <_svfiprintf_r+0x898>
 8005600:	2340      	movs	r3, #64	; 0x40
 8005602:	f8ca 3014 	str.w	r3, [sl, #20]
 8005606:	f7ff bbcf 	b.w	8004da8 <_svfiprintf_r+0x1c>
 800560a:	2d06      	cmp	r5, #6
 800560c:	bf28      	it	cs
 800560e:	2506      	movcs	r5, #6
 8005610:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 8005614:	9302      	str	r3, [sp, #8]
 8005616:	4b07      	ldr	r3, [pc, #28]	; (8005634 <_svfiprintf_r+0x8a8>)
 8005618:	9503      	str	r5, [sp, #12]
 800561a:	9309      	str	r3, [sp, #36]	; 0x24
 800561c:	e52e      	b.n	800507c <_svfiprintf_r+0x2f0>
 800561e:	9503      	str	r5, [sp, #12]
 8005620:	9008      	str	r0, [sp, #32]
 8005622:	e497      	b.n	8004f54 <_svfiprintf_r+0x1c8>
 8005624:	9807      	ldr	r0, [sp, #28]
 8005626:	230c      	movs	r3, #12
 8005628:	6003      	str	r3, [r0, #0]
 800562a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800562e:	9304      	str	r3, [sp, #16]
 8005630:	e6c1      	b.n	80053b6 <_svfiprintf_r+0x62a>
 8005632:	bf00      	nop
 8005634:	080068c4 	.word	0x080068c4

08005638 <_calloc_r>:
 8005638:	b510      	push	{r4, lr}
 800563a:	fb01 f102 	mul.w	r1, r1, r2
 800563e:	f7fe fa2f 	bl	8003aa0 <_malloc_r>
 8005642:	4604      	mov	r4, r0
 8005644:	b300      	cbz	r0, 8005688 <_calloc_r+0x50>
 8005646:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800564a:	f022 0203 	bic.w	r2, r2, #3
 800564e:	3a04      	subs	r2, #4
 8005650:	2a24      	cmp	r2, #36	; 0x24
 8005652:	d81b      	bhi.n	800568c <_calloc_r+0x54>
 8005654:	2a13      	cmp	r2, #19
 8005656:	bf98      	it	ls
 8005658:	4602      	movls	r2, r0
 800565a:	d911      	bls.n	8005680 <_calloc_r+0x48>
 800565c:	2300      	movs	r3, #0
 800565e:	2a1b      	cmp	r2, #27
 8005660:	6003      	str	r3, [r0, #0]
 8005662:	6043      	str	r3, [r0, #4]
 8005664:	bf98      	it	ls
 8005666:	f100 0208 	addls.w	r2, r0, #8
 800566a:	d909      	bls.n	8005680 <_calloc_r+0x48>
 800566c:	2a24      	cmp	r2, #36	; 0x24
 800566e:	6083      	str	r3, [r0, #8]
 8005670:	60c3      	str	r3, [r0, #12]
 8005672:	bf11      	iteee	ne
 8005674:	f100 0210 	addne.w	r2, r0, #16
 8005678:	6103      	streq	r3, [r0, #16]
 800567a:	6143      	streq	r3, [r0, #20]
 800567c:	f100 0218 	addeq.w	r2, r0, #24
 8005680:	2300      	movs	r3, #0
 8005682:	6013      	str	r3, [r2, #0]
 8005684:	6053      	str	r3, [r2, #4]
 8005686:	6093      	str	r3, [r2, #8]
 8005688:	4620      	mov	r0, r4
 800568a:	bd10      	pop	{r4, pc}
 800568c:	2100      	movs	r1, #0
 800568e:	f000 f85b 	bl	8005748 <memset>
 8005692:	4620      	mov	r0, r4
 8005694:	bd10      	pop	{r4, pc}
 8005696:	bf00      	nop

08005698 <memmove>:
 8005698:	4288      	cmp	r0, r1
 800569a:	b4f0      	push	{r4, r5, r6, r7}
 800569c:	d912      	bls.n	80056c4 <memmove+0x2c>
 800569e:	188d      	adds	r5, r1, r2
 80056a0:	42a8      	cmp	r0, r5
 80056a2:	d20f      	bcs.n	80056c4 <memmove+0x2c>
 80056a4:	b162      	cbz	r2, 80056c0 <memmove+0x28>
 80056a6:	4251      	negs	r1, r2
 80056a8:	4613      	mov	r3, r2
 80056aa:	1882      	adds	r2, r0, r2
 80056ac:	186d      	adds	r5, r5, r1
 80056ae:	1852      	adds	r2, r2, r1
 80056b0:	18ec      	adds	r4, r5, r3
 80056b2:	18d1      	adds	r1, r2, r3
 80056b4:	f814 4c01 	ldrb.w	r4, [r4, #-1]
 80056b8:	3b01      	subs	r3, #1
 80056ba:	f801 4c01 	strb.w	r4, [r1, #-1]
 80056be:	d1f7      	bne.n	80056b0 <memmove+0x18>
 80056c0:	bcf0      	pop	{r4, r5, r6, r7}
 80056c2:	4770      	bx	lr
 80056c4:	2a0f      	cmp	r2, #15
 80056c6:	bf98      	it	ls
 80056c8:	4603      	movls	r3, r0
 80056ca:	d931      	bls.n	8005730 <memmove+0x98>
 80056cc:	ea41 0300 	orr.w	r3, r1, r0
 80056d0:	079b      	lsls	r3, r3, #30
 80056d2:	d137      	bne.n	8005744 <memmove+0xac>
 80056d4:	460c      	mov	r4, r1
 80056d6:	4603      	mov	r3, r0
 80056d8:	4615      	mov	r5, r2
 80056da:	6826      	ldr	r6, [r4, #0]
 80056dc:	601e      	str	r6, [r3, #0]
 80056de:	6866      	ldr	r6, [r4, #4]
 80056e0:	605e      	str	r6, [r3, #4]
 80056e2:	68a6      	ldr	r6, [r4, #8]
 80056e4:	609e      	str	r6, [r3, #8]
 80056e6:	68e6      	ldr	r6, [r4, #12]
 80056e8:	3d10      	subs	r5, #16
 80056ea:	60de      	str	r6, [r3, #12]
 80056ec:	3410      	adds	r4, #16
 80056ee:	3310      	adds	r3, #16
 80056f0:	2d0f      	cmp	r5, #15
 80056f2:	d8f2      	bhi.n	80056da <memmove+0x42>
 80056f4:	f1a2 0410 	sub.w	r4, r2, #16
 80056f8:	f024 040f 	bic.w	r4, r4, #15
 80056fc:	f002 020f 	and.w	r2, r2, #15
 8005700:	3410      	adds	r4, #16
 8005702:	2a03      	cmp	r2, #3
 8005704:	eb00 0304 	add.w	r3, r0, r4
 8005708:	4421      	add	r1, r4
 800570a:	d911      	bls.n	8005730 <memmove+0x98>
 800570c:	1f0e      	subs	r6, r1, #4
 800570e:	461d      	mov	r5, r3
 8005710:	4614      	mov	r4, r2
 8005712:	f856 7f04 	ldr.w	r7, [r6, #4]!
 8005716:	3c04      	subs	r4, #4
 8005718:	2c03      	cmp	r4, #3
 800571a:	f845 7b04 	str.w	r7, [r5], #4
 800571e:	d8f8      	bhi.n	8005712 <memmove+0x7a>
 8005720:	1f14      	subs	r4, r2, #4
 8005722:	f024 0403 	bic.w	r4, r4, #3
 8005726:	3404      	adds	r4, #4
 8005728:	f002 0203 	and.w	r2, r2, #3
 800572c:	1909      	adds	r1, r1, r4
 800572e:	191b      	adds	r3, r3, r4
 8005730:	2a00      	cmp	r2, #0
 8005732:	d0c5      	beq.n	80056c0 <memmove+0x28>
 8005734:	3901      	subs	r1, #1
 8005736:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800573a:	3a01      	subs	r2, #1
 800573c:	f803 4b01 	strb.w	r4, [r3], #1
 8005740:	d1f9      	bne.n	8005736 <memmove+0x9e>
 8005742:	e7bd      	b.n	80056c0 <memmove+0x28>
 8005744:	4603      	mov	r3, r0
 8005746:	e7f5      	b.n	8005734 <memmove+0x9c>

08005748 <memset>:
 8005748:	f010 0f03 	tst.w	r0, #3
 800574c:	b470      	push	{r4, r5, r6}
 800574e:	4603      	mov	r3, r0
 8005750:	d042      	beq.n	80057d8 <memset+0x90>
 8005752:	2a00      	cmp	r2, #0
 8005754:	d03e      	beq.n	80057d4 <memset+0x8c>
 8005756:	3a01      	subs	r2, #1
 8005758:	b2cd      	uxtb	r5, r1
 800575a:	e003      	b.n	8005764 <memset+0x1c>
 800575c:	1e54      	subs	r4, r2, #1
 800575e:	2a00      	cmp	r2, #0
 8005760:	d038      	beq.n	80057d4 <memset+0x8c>
 8005762:	4622      	mov	r2, r4
 8005764:	f803 5b01 	strb.w	r5, [r3], #1
 8005768:	f013 0f03 	tst.w	r3, #3
 800576c:	461c      	mov	r4, r3
 800576e:	d1f5      	bne.n	800575c <memset+0x14>
 8005770:	2a03      	cmp	r2, #3
 8005772:	d929      	bls.n	80057c8 <memset+0x80>
 8005774:	b2cd      	uxtb	r5, r1
 8005776:	2a0f      	cmp	r2, #15
 8005778:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 800577c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8005780:	bf84      	itt	hi
 8005782:	4623      	movhi	r3, r4
 8005784:	4616      	movhi	r6, r2
 8005786:	d911      	bls.n	80057ac <memset+0x64>
 8005788:	3e10      	subs	r6, #16
 800578a:	601d      	str	r5, [r3, #0]
 800578c:	605d      	str	r5, [r3, #4]
 800578e:	609d      	str	r5, [r3, #8]
 8005790:	60dd      	str	r5, [r3, #12]
 8005792:	3310      	adds	r3, #16
 8005794:	2e0f      	cmp	r6, #15
 8005796:	d8f7      	bhi.n	8005788 <memset+0x40>
 8005798:	f1a2 0310 	sub.w	r3, r2, #16
 800579c:	f023 030f 	bic.w	r3, r3, #15
 80057a0:	f002 020f 	and.w	r2, r2, #15
 80057a4:	3310      	adds	r3, #16
 80057a6:	2a03      	cmp	r2, #3
 80057a8:	441c      	add	r4, r3
 80057aa:	d90d      	bls.n	80057c8 <memset+0x80>
 80057ac:	4626      	mov	r6, r4
 80057ae:	4613      	mov	r3, r2
 80057b0:	3b04      	subs	r3, #4
 80057b2:	2b03      	cmp	r3, #3
 80057b4:	f846 5b04 	str.w	r5, [r6], #4
 80057b8:	d8fa      	bhi.n	80057b0 <memset+0x68>
 80057ba:	1f13      	subs	r3, r2, #4
 80057bc:	f023 0303 	bic.w	r3, r3, #3
 80057c0:	3304      	adds	r3, #4
 80057c2:	f002 0203 	and.w	r2, r2, #3
 80057c6:	18e4      	adds	r4, r4, r3
 80057c8:	b2c9      	uxtb	r1, r1
 80057ca:	b11a      	cbz	r2, 80057d4 <memset+0x8c>
 80057cc:	3a01      	subs	r2, #1
 80057ce:	f804 1b01 	strb.w	r1, [r4], #1
 80057d2:	d1fb      	bne.n	80057cc <memset+0x84>
 80057d4:	bc70      	pop	{r4, r5, r6}
 80057d6:	4770      	bx	lr
 80057d8:	4604      	mov	r4, r0
 80057da:	e7c9      	b.n	8005770 <memset+0x28>

080057dc <_realloc_r>:
 80057dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057e0:	460c      	mov	r4, r1
 80057e2:	b083      	sub	sp, #12
 80057e4:	4607      	mov	r7, r0
 80057e6:	4690      	mov	r8, r2
 80057e8:	2900      	cmp	r1, #0
 80057ea:	f000 80fe 	beq.w	80059ea <_realloc_r+0x20e>
 80057ee:	f108 050b 	add.w	r5, r8, #11
 80057f2:	f7fe fc8b 	bl	800410c <__malloc_lock>
 80057f6:	2d16      	cmp	r5, #22
 80057f8:	f854 1c04 	ldr.w	r1, [r4, #-4]
 80057fc:	d87d      	bhi.n	80058fa <_realloc_r+0x11e>
 80057fe:	2210      	movs	r2, #16
 8005800:	2600      	movs	r6, #0
 8005802:	4615      	mov	r5, r2
 8005804:	4545      	cmp	r5, r8
 8005806:	bf38      	it	cc
 8005808:	f046 0601 	orrcc.w	r6, r6, #1
 800580c:	2e00      	cmp	r6, #0
 800580e:	f040 80f2 	bne.w	80059f6 <_realloc_r+0x21a>
 8005812:	f021 0a03 	bic.w	sl, r1, #3
 8005816:	4592      	cmp	sl, r2
 8005818:	f1a4 0b08 	sub.w	fp, r4, #8
 800581c:	bfa8      	it	ge
 800581e:	4656      	movge	r6, sl
 8005820:	da55      	bge.n	80058ce <_realloc_r+0xf2>
 8005822:	4ba0      	ldr	r3, [pc, #640]	; (8005aa4 <_realloc_r+0x2c8>)
 8005824:	f8d3 c008 	ldr.w	ip, [r3, #8]
 8005828:	eb0b 000a 	add.w	r0, fp, sl
 800582c:	4584      	cmp	ip, r0
 800582e:	f000 80e7 	beq.w	8005a00 <_realloc_r+0x224>
 8005832:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8005836:	f02e 0901 	bic.w	r9, lr, #1
 800583a:	4481      	add	r9, r0
 800583c:	f8d9 9004 	ldr.w	r9, [r9, #4]
 8005840:	f019 0f01 	tst.w	r9, #1
 8005844:	bf1c      	itt	ne
 8005846:	46b6      	movne	lr, r6
 8005848:	4670      	movne	r0, lr
 800584a:	d05b      	beq.n	8005904 <_realloc_r+0x128>
 800584c:	07c9      	lsls	r1, r1, #31
 800584e:	d479      	bmi.n	8005944 <_realloc_r+0x168>
 8005850:	f854 1c08 	ldr.w	r1, [r4, #-8]
 8005854:	ebc1 090b 	rsb	r9, r1, fp
 8005858:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800585c:	f021 0103 	bic.w	r1, r1, #3
 8005860:	2800      	cmp	r0, #0
 8005862:	f000 8097 	beq.w	8005994 <_realloc_r+0x1b8>
 8005866:	4560      	cmp	r0, ip
 8005868:	eb01 0c0a 	add.w	ip, r1, sl
 800586c:	eb0e 060c 	add.w	r6, lr, ip
 8005870:	f000 811a 	beq.w	8005aa8 <_realloc_r+0x2cc>
 8005874:	42b2      	cmp	r2, r6
 8005876:	f300 808f 	bgt.w	8005998 <_realloc_r+0x1bc>
 800587a:	68c3      	ldr	r3, [r0, #12]
 800587c:	6882      	ldr	r2, [r0, #8]
 800587e:	46c8      	mov	r8, r9
 8005880:	609a      	str	r2, [r3, #8]
 8005882:	60d3      	str	r3, [r2, #12]
 8005884:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8005888:	f858 1f08 	ldr.w	r1, [r8, #8]!
 800588c:	f1aa 0204 	sub.w	r2, sl, #4
 8005890:	2a24      	cmp	r2, #36	; 0x24
 8005892:	60cb      	str	r3, [r1, #12]
 8005894:	6099      	str	r1, [r3, #8]
 8005896:	f200 8144 	bhi.w	8005b22 <_realloc_r+0x346>
 800589a:	2a13      	cmp	r2, #19
 800589c:	bf98      	it	ls
 800589e:	4643      	movls	r3, r8
 80058a0:	d90b      	bls.n	80058ba <_realloc_r+0xde>
 80058a2:	6823      	ldr	r3, [r4, #0]
 80058a4:	f8c9 3008 	str.w	r3, [r9, #8]
 80058a8:	6863      	ldr	r3, [r4, #4]
 80058aa:	2a1b      	cmp	r2, #27
 80058ac:	f8c9 300c 	str.w	r3, [r9, #12]
 80058b0:	f200 8140 	bhi.w	8005b34 <_realloc_r+0x358>
 80058b4:	f109 0310 	add.w	r3, r9, #16
 80058b8:	3408      	adds	r4, #8
 80058ba:	6822      	ldr	r2, [r4, #0]
 80058bc:	601a      	str	r2, [r3, #0]
 80058be:	6862      	ldr	r2, [r4, #4]
 80058c0:	605a      	str	r2, [r3, #4]
 80058c2:	68a2      	ldr	r2, [r4, #8]
 80058c4:	609a      	str	r2, [r3, #8]
 80058c6:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80058ca:	4644      	mov	r4, r8
 80058cc:	46cb      	mov	fp, r9
 80058ce:	1b72      	subs	r2, r6, r5
 80058d0:	2a0f      	cmp	r2, #15
 80058d2:	d822      	bhi.n	800591a <_realloc_r+0x13e>
 80058d4:	f001 0101 	and.w	r1, r1, #1
 80058d8:	eb0b 0306 	add.w	r3, fp, r6
 80058dc:	430e      	orrs	r6, r1
 80058de:	f8cb 6004 	str.w	r6, [fp, #4]
 80058e2:	685a      	ldr	r2, [r3, #4]
 80058e4:	f042 0201 	orr.w	r2, r2, #1
 80058e8:	605a      	str	r2, [r3, #4]
 80058ea:	4638      	mov	r0, r7
 80058ec:	f7fe fc10 	bl	8004110 <__malloc_unlock>
 80058f0:	46a0      	mov	r8, r4
 80058f2:	4640      	mov	r0, r8
 80058f4:	b003      	add	sp, #12
 80058f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058fa:	f025 0507 	bic.w	r5, r5, #7
 80058fe:	462a      	mov	r2, r5
 8005900:	0fee      	lsrs	r6, r5, #31
 8005902:	e77f      	b.n	8005804 <_realloc_r+0x28>
 8005904:	f02e 0e03 	bic.w	lr, lr, #3
 8005908:	eb0e 060a 	add.w	r6, lr, sl
 800590c:	42b2      	cmp	r2, r6
 800590e:	dc9d      	bgt.n	800584c <_realloc_r+0x70>
 8005910:	68c3      	ldr	r3, [r0, #12]
 8005912:	6882      	ldr	r2, [r0, #8]
 8005914:	60d3      	str	r3, [r2, #12]
 8005916:	609a      	str	r2, [r3, #8]
 8005918:	e7d9      	b.n	80058ce <_realloc_r+0xf2>
 800591a:	eb0b 0305 	add.w	r3, fp, r5
 800591e:	f001 0101 	and.w	r1, r1, #1
 8005922:	1898      	adds	r0, r3, r2
 8005924:	430d      	orrs	r5, r1
 8005926:	f042 0201 	orr.w	r2, r2, #1
 800592a:	f8cb 5004 	str.w	r5, [fp, #4]
 800592e:	605a      	str	r2, [r3, #4]
 8005930:	6842      	ldr	r2, [r0, #4]
 8005932:	f042 0201 	orr.w	r2, r2, #1
 8005936:	6042      	str	r2, [r0, #4]
 8005938:	f103 0108 	add.w	r1, r3, #8
 800593c:	4638      	mov	r0, r7
 800593e:	f7fd ffa3 	bl	8003888 <_free_r>
 8005942:	e7d2      	b.n	80058ea <_realloc_r+0x10e>
 8005944:	4641      	mov	r1, r8
 8005946:	4638      	mov	r0, r7
 8005948:	f7fe f8aa 	bl	8003aa0 <_malloc_r>
 800594c:	4680      	mov	r8, r0
 800594e:	b1e8      	cbz	r0, 800598c <_realloc_r+0x1b0>
 8005950:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8005954:	f021 0301 	bic.w	r3, r1, #1
 8005958:	f1a0 0208 	sub.w	r2, r0, #8
 800595c:	445b      	add	r3, fp
 800595e:	429a      	cmp	r2, r3
 8005960:	f000 80d9 	beq.w	8005b16 <_realloc_r+0x33a>
 8005964:	f1aa 0204 	sub.w	r2, sl, #4
 8005968:	2a24      	cmp	r2, #36	; 0x24
 800596a:	f200 8096 	bhi.w	8005a9a <_realloc_r+0x2be>
 800596e:	2a13      	cmp	r2, #19
 8005970:	bf9c      	itt	ls
 8005972:	4603      	movls	r3, r0
 8005974:	4622      	movls	r2, r4
 8005976:	d863      	bhi.n	8005a40 <_realloc_r+0x264>
 8005978:	6811      	ldr	r1, [r2, #0]
 800597a:	6019      	str	r1, [r3, #0]
 800597c:	6851      	ldr	r1, [r2, #4]
 800597e:	6059      	str	r1, [r3, #4]
 8005980:	6892      	ldr	r2, [r2, #8]
 8005982:	609a      	str	r2, [r3, #8]
 8005984:	4638      	mov	r0, r7
 8005986:	4621      	mov	r1, r4
 8005988:	f7fd ff7e 	bl	8003888 <_free_r>
 800598c:	4638      	mov	r0, r7
 800598e:	f7fe fbbf 	bl	8004110 <__malloc_unlock>
 8005992:	e7ae      	b.n	80058f2 <_realloc_r+0x116>
 8005994:	eb01 0c0a 	add.w	ip, r1, sl
 8005998:	4562      	cmp	r2, ip
 800599a:	dcd3      	bgt.n	8005944 <_realloc_r+0x168>
 800599c:	464e      	mov	r6, r9
 800599e:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80059a2:	f856 1f08 	ldr.w	r1, [r6, #8]!
 80059a6:	f1aa 0204 	sub.w	r2, sl, #4
 80059aa:	2a24      	cmp	r2, #36	; 0x24
 80059ac:	60cb      	str	r3, [r1, #12]
 80059ae:	6099      	str	r1, [r3, #8]
 80059b0:	d865      	bhi.n	8005a7e <_realloc_r+0x2a2>
 80059b2:	2a13      	cmp	r2, #19
 80059b4:	bf98      	it	ls
 80059b6:	4633      	movls	r3, r6
 80059b8:	d90b      	bls.n	80059d2 <_realloc_r+0x1f6>
 80059ba:	6823      	ldr	r3, [r4, #0]
 80059bc:	f8c9 3008 	str.w	r3, [r9, #8]
 80059c0:	6863      	ldr	r3, [r4, #4]
 80059c2:	2a1b      	cmp	r2, #27
 80059c4:	f8c9 300c 	str.w	r3, [r9, #12]
 80059c8:	f200 80c0 	bhi.w	8005b4c <_realloc_r+0x370>
 80059cc:	f109 0310 	add.w	r3, r9, #16
 80059d0:	3408      	adds	r4, #8
 80059d2:	6822      	ldr	r2, [r4, #0]
 80059d4:	601a      	str	r2, [r3, #0]
 80059d6:	6862      	ldr	r2, [r4, #4]
 80059d8:	605a      	str	r2, [r3, #4]
 80059da:	68a2      	ldr	r2, [r4, #8]
 80059dc:	609a      	str	r2, [r3, #8]
 80059de:	4634      	mov	r4, r6
 80059e0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80059e4:	4666      	mov	r6, ip
 80059e6:	46cb      	mov	fp, r9
 80059e8:	e771      	b.n	80058ce <_realloc_r+0xf2>
 80059ea:	4611      	mov	r1, r2
 80059ec:	b003      	add	sp, #12
 80059ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059f2:	f7fe b855 	b.w	8003aa0 <_malloc_r>
 80059f6:	230c      	movs	r3, #12
 80059f8:	603b      	str	r3, [r7, #0]
 80059fa:	f04f 0800 	mov.w	r8, #0
 80059fe:	e778      	b.n	80058f2 <_realloc_r+0x116>
 8005a00:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8005a04:	f026 0e03 	bic.w	lr, r6, #3
 8005a08:	eb0e 000a 	add.w	r0, lr, sl
 8005a0c:	f105 0610 	add.w	r6, r5, #16
 8005a10:	42b0      	cmp	r0, r6
 8005a12:	bfb8      	it	lt
 8005a14:	4660      	movlt	r0, ip
 8005a16:	f6ff af19 	blt.w	800584c <_realloc_r+0x70>
 8005a1a:	eb0b 0205 	add.w	r2, fp, r5
 8005a1e:	1b41      	subs	r1, r0, r5
 8005a20:	f041 0101 	orr.w	r1, r1, #1
 8005a24:	6051      	str	r1, [r2, #4]
 8005a26:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8005a2a:	609a      	str	r2, [r3, #8]
 8005a2c:	f001 0301 	and.w	r3, r1, #1
 8005a30:	431d      	orrs	r5, r3
 8005a32:	f844 5c04 	str.w	r5, [r4, #-4]
 8005a36:	4638      	mov	r0, r7
 8005a38:	f7fe fb6a 	bl	8004110 <__malloc_unlock>
 8005a3c:	46a0      	mov	r8, r4
 8005a3e:	e758      	b.n	80058f2 <_realloc_r+0x116>
 8005a40:	6823      	ldr	r3, [r4, #0]
 8005a42:	6003      	str	r3, [r0, #0]
 8005a44:	6863      	ldr	r3, [r4, #4]
 8005a46:	2a1b      	cmp	r2, #27
 8005a48:	6043      	str	r3, [r0, #4]
 8005a4a:	bf9c      	itt	ls
 8005a4c:	f104 0208 	addls.w	r2, r4, #8
 8005a50:	f100 0308 	addls.w	r3, r0, #8
 8005a54:	d990      	bls.n	8005978 <_realloc_r+0x19c>
 8005a56:	68a3      	ldr	r3, [r4, #8]
 8005a58:	6083      	str	r3, [r0, #8]
 8005a5a:	68e3      	ldr	r3, [r4, #12]
 8005a5c:	2a24      	cmp	r2, #36	; 0x24
 8005a5e:	60c3      	str	r3, [r0, #12]
 8005a60:	bf03      	ittte	eq
 8005a62:	6923      	ldreq	r3, [r4, #16]
 8005a64:	6103      	streq	r3, [r0, #16]
 8005a66:	6962      	ldreq	r2, [r4, #20]
 8005a68:	f100 0310 	addne.w	r3, r0, #16
 8005a6c:	bf09      	itett	eq
 8005a6e:	6142      	streq	r2, [r0, #20]
 8005a70:	f104 0210 	addne.w	r2, r4, #16
 8005a74:	f100 0318 	addeq.w	r3, r0, #24
 8005a78:	f104 0218 	addeq.w	r2, r4, #24
 8005a7c:	e77c      	b.n	8005978 <_realloc_r+0x19c>
 8005a7e:	4621      	mov	r1, r4
 8005a80:	4630      	mov	r0, r6
 8005a82:	f8cd c004 	str.w	ip, [sp, #4]
 8005a86:	f7ff fe07 	bl	8005698 <memmove>
 8005a8a:	f8dd c004 	ldr.w	ip, [sp, #4]
 8005a8e:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005a92:	4634      	mov	r4, r6
 8005a94:	46cb      	mov	fp, r9
 8005a96:	4666      	mov	r6, ip
 8005a98:	e719      	b.n	80058ce <_realloc_r+0xf2>
 8005a9a:	4621      	mov	r1, r4
 8005a9c:	f7ff fdfc 	bl	8005698 <memmove>
 8005aa0:	e770      	b.n	8005984 <_realloc_r+0x1a8>
 8005aa2:	bf00      	nop
 8005aa4:	2000054c 	.word	0x2000054c
 8005aa8:	f105 0110 	add.w	r1, r5, #16
 8005aac:	428e      	cmp	r6, r1
 8005aae:	f6ff af73 	blt.w	8005998 <_realloc_r+0x1bc>
 8005ab2:	46c8      	mov	r8, r9
 8005ab4:	f8d9 100c 	ldr.w	r1, [r9, #12]
 8005ab8:	f858 0f08 	ldr.w	r0, [r8, #8]!
 8005abc:	f1aa 0204 	sub.w	r2, sl, #4
 8005ac0:	2a24      	cmp	r2, #36	; 0x24
 8005ac2:	60c1      	str	r1, [r0, #12]
 8005ac4:	6088      	str	r0, [r1, #8]
 8005ac6:	d861      	bhi.n	8005b8c <_realloc_r+0x3b0>
 8005ac8:	2a13      	cmp	r2, #19
 8005aca:	bf98      	it	ls
 8005acc:	4642      	movls	r2, r8
 8005ace:	d90a      	bls.n	8005ae6 <_realloc_r+0x30a>
 8005ad0:	6821      	ldr	r1, [r4, #0]
 8005ad2:	f8c9 1008 	str.w	r1, [r9, #8]
 8005ad6:	6861      	ldr	r1, [r4, #4]
 8005ad8:	2a1b      	cmp	r2, #27
 8005ada:	f8c9 100c 	str.w	r1, [r9, #12]
 8005ade:	d85c      	bhi.n	8005b9a <_realloc_r+0x3be>
 8005ae0:	f109 0210 	add.w	r2, r9, #16
 8005ae4:	3408      	adds	r4, #8
 8005ae6:	6821      	ldr	r1, [r4, #0]
 8005ae8:	6011      	str	r1, [r2, #0]
 8005aea:	6861      	ldr	r1, [r4, #4]
 8005aec:	6051      	str	r1, [r2, #4]
 8005aee:	68a1      	ldr	r1, [r4, #8]
 8005af0:	6091      	str	r1, [r2, #8]
 8005af2:	eb09 0205 	add.w	r2, r9, r5
 8005af6:	1b71      	subs	r1, r6, r5
 8005af8:	f041 0101 	orr.w	r1, r1, #1
 8005afc:	6051      	str	r1, [r2, #4]
 8005afe:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005b02:	609a      	str	r2, [r3, #8]
 8005b04:	f001 0301 	and.w	r3, r1, #1
 8005b08:	431d      	orrs	r5, r3
 8005b0a:	f8c9 5004 	str.w	r5, [r9, #4]
 8005b0e:	4638      	mov	r0, r7
 8005b10:	f7fe fafe 	bl	8004110 <__malloc_unlock>
 8005b14:	e6ed      	b.n	80058f2 <_realloc_r+0x116>
 8005b16:	f850 6c04 	ldr.w	r6, [r0, #-4]
 8005b1a:	f026 0603 	bic.w	r6, r6, #3
 8005b1e:	4456      	add	r6, sl
 8005b20:	e6d5      	b.n	80058ce <_realloc_r+0xf2>
 8005b22:	4621      	mov	r1, r4
 8005b24:	4640      	mov	r0, r8
 8005b26:	f7ff fdb7 	bl	8005698 <memmove>
 8005b2a:	4644      	mov	r4, r8
 8005b2c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005b30:	46cb      	mov	fp, r9
 8005b32:	e6cc      	b.n	80058ce <_realloc_r+0xf2>
 8005b34:	68a3      	ldr	r3, [r4, #8]
 8005b36:	f8c9 3010 	str.w	r3, [r9, #16]
 8005b3a:	68e3      	ldr	r3, [r4, #12]
 8005b3c:	2a24      	cmp	r2, #36	; 0x24
 8005b3e:	f8c9 3014 	str.w	r3, [r9, #20]
 8005b42:	d00f      	beq.n	8005b64 <_realloc_r+0x388>
 8005b44:	f109 0318 	add.w	r3, r9, #24
 8005b48:	3410      	adds	r4, #16
 8005b4a:	e6b6      	b.n	80058ba <_realloc_r+0xde>
 8005b4c:	68a3      	ldr	r3, [r4, #8]
 8005b4e:	f8c9 3010 	str.w	r3, [r9, #16]
 8005b52:	68e3      	ldr	r3, [r4, #12]
 8005b54:	2a24      	cmp	r2, #36	; 0x24
 8005b56:	f8c9 3014 	str.w	r3, [r9, #20]
 8005b5a:	d00d      	beq.n	8005b78 <_realloc_r+0x39c>
 8005b5c:	f109 0318 	add.w	r3, r9, #24
 8005b60:	3410      	adds	r4, #16
 8005b62:	e736      	b.n	80059d2 <_realloc_r+0x1f6>
 8005b64:	6923      	ldr	r3, [r4, #16]
 8005b66:	f8c9 3018 	str.w	r3, [r9, #24]
 8005b6a:	6962      	ldr	r2, [r4, #20]
 8005b6c:	f109 0320 	add.w	r3, r9, #32
 8005b70:	f8c9 201c 	str.w	r2, [r9, #28]
 8005b74:	3418      	adds	r4, #24
 8005b76:	e6a0      	b.n	80058ba <_realloc_r+0xde>
 8005b78:	6923      	ldr	r3, [r4, #16]
 8005b7a:	f8c9 3018 	str.w	r3, [r9, #24]
 8005b7e:	6962      	ldr	r2, [r4, #20]
 8005b80:	f109 0320 	add.w	r3, r9, #32
 8005b84:	f8c9 201c 	str.w	r2, [r9, #28]
 8005b88:	3418      	adds	r4, #24
 8005b8a:	e722      	b.n	80059d2 <_realloc_r+0x1f6>
 8005b8c:	4640      	mov	r0, r8
 8005b8e:	4621      	mov	r1, r4
 8005b90:	9301      	str	r3, [sp, #4]
 8005b92:	f7ff fd81 	bl	8005698 <memmove>
 8005b96:	9b01      	ldr	r3, [sp, #4]
 8005b98:	e7ab      	b.n	8005af2 <_realloc_r+0x316>
 8005b9a:	68a1      	ldr	r1, [r4, #8]
 8005b9c:	f8c9 1010 	str.w	r1, [r9, #16]
 8005ba0:	68e1      	ldr	r1, [r4, #12]
 8005ba2:	2a24      	cmp	r2, #36	; 0x24
 8005ba4:	f8c9 1014 	str.w	r1, [r9, #20]
 8005ba8:	d003      	beq.n	8005bb2 <_realloc_r+0x3d6>
 8005baa:	f109 0218 	add.w	r2, r9, #24
 8005bae:	3410      	adds	r4, #16
 8005bb0:	e799      	b.n	8005ae6 <_realloc_r+0x30a>
 8005bb2:	6922      	ldr	r2, [r4, #16]
 8005bb4:	f8c9 2018 	str.w	r2, [r9, #24]
 8005bb8:	6961      	ldr	r1, [r4, #20]
 8005bba:	f109 0220 	add.w	r2, r9, #32
 8005bbe:	f8c9 101c 	str.w	r1, [r9, #28]
 8005bc2:	3418      	adds	r4, #24
 8005bc4:	e78f      	b.n	8005ae6 <_realloc_r+0x30a>
 8005bc6:	bf00      	nop

08005bc8 <__aeabi_drsub>:
 8005bc8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8005bcc:	e002      	b.n	8005bd4 <__adddf3>
 8005bce:	bf00      	nop

08005bd0 <__aeabi_dsub>:
 8005bd0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08005bd4 <__adddf3>:
 8005bd4:	b530      	push	{r4, r5, lr}
 8005bd6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8005bda:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8005bde:	ea94 0f05 	teq	r4, r5
 8005be2:	bf08      	it	eq
 8005be4:	ea90 0f02 	teqeq	r0, r2
 8005be8:	bf1f      	itttt	ne
 8005bea:	ea54 0c00 	orrsne.w	ip, r4, r0
 8005bee:	ea55 0c02 	orrsne.w	ip, r5, r2
 8005bf2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8005bf6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8005bfa:	f000 80e2 	beq.w	8005dc2 <__adddf3+0x1ee>
 8005bfe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8005c02:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8005c06:	bfb8      	it	lt
 8005c08:	426d      	neglt	r5, r5
 8005c0a:	dd0c      	ble.n	8005c26 <__adddf3+0x52>
 8005c0c:	442c      	add	r4, r5
 8005c0e:	ea80 0202 	eor.w	r2, r0, r2
 8005c12:	ea81 0303 	eor.w	r3, r1, r3
 8005c16:	ea82 0000 	eor.w	r0, r2, r0
 8005c1a:	ea83 0101 	eor.w	r1, r3, r1
 8005c1e:	ea80 0202 	eor.w	r2, r0, r2
 8005c22:	ea81 0303 	eor.w	r3, r1, r3
 8005c26:	2d36      	cmp	r5, #54	; 0x36
 8005c28:	bf88      	it	hi
 8005c2a:	bd30      	pophi	{r4, r5, pc}
 8005c2c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8005c30:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8005c34:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8005c38:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8005c3c:	d002      	beq.n	8005c44 <__adddf3+0x70>
 8005c3e:	4240      	negs	r0, r0
 8005c40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8005c44:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8005c48:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8005c4c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8005c50:	d002      	beq.n	8005c58 <__adddf3+0x84>
 8005c52:	4252      	negs	r2, r2
 8005c54:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8005c58:	ea94 0f05 	teq	r4, r5
 8005c5c:	f000 80a7 	beq.w	8005dae <__adddf3+0x1da>
 8005c60:	f1a4 0401 	sub.w	r4, r4, #1
 8005c64:	f1d5 0e20 	rsbs	lr, r5, #32
 8005c68:	db0d      	blt.n	8005c86 <__adddf3+0xb2>
 8005c6a:	fa02 fc0e 	lsl.w	ip, r2, lr
 8005c6e:	fa22 f205 	lsr.w	r2, r2, r5
 8005c72:	1880      	adds	r0, r0, r2
 8005c74:	f141 0100 	adc.w	r1, r1, #0
 8005c78:	fa03 f20e 	lsl.w	r2, r3, lr
 8005c7c:	1880      	adds	r0, r0, r2
 8005c7e:	fa43 f305 	asr.w	r3, r3, r5
 8005c82:	4159      	adcs	r1, r3
 8005c84:	e00e      	b.n	8005ca4 <__adddf3+0xd0>
 8005c86:	f1a5 0520 	sub.w	r5, r5, #32
 8005c8a:	f10e 0e20 	add.w	lr, lr, #32
 8005c8e:	2a01      	cmp	r2, #1
 8005c90:	fa03 fc0e 	lsl.w	ip, r3, lr
 8005c94:	bf28      	it	cs
 8005c96:	f04c 0c02 	orrcs.w	ip, ip, #2
 8005c9a:	fa43 f305 	asr.w	r3, r3, r5
 8005c9e:	18c0      	adds	r0, r0, r3
 8005ca0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8005ca4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8005ca8:	d507      	bpl.n	8005cba <__adddf3+0xe6>
 8005caa:	f04f 0e00 	mov.w	lr, #0
 8005cae:	f1dc 0c00 	rsbs	ip, ip, #0
 8005cb2:	eb7e 0000 	sbcs.w	r0, lr, r0
 8005cb6:	eb6e 0101 	sbc.w	r1, lr, r1
 8005cba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8005cbe:	d31b      	bcc.n	8005cf8 <__adddf3+0x124>
 8005cc0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8005cc4:	d30c      	bcc.n	8005ce0 <__adddf3+0x10c>
 8005cc6:	0849      	lsrs	r1, r1, #1
 8005cc8:	ea5f 0030 	movs.w	r0, r0, rrx
 8005ccc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8005cd0:	f104 0401 	add.w	r4, r4, #1
 8005cd4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8005cd8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8005cdc:	f080 809a 	bcs.w	8005e14 <__adddf3+0x240>
 8005ce0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8005ce4:	bf08      	it	eq
 8005ce6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8005cea:	f150 0000 	adcs.w	r0, r0, #0
 8005cee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8005cf2:	ea41 0105 	orr.w	r1, r1, r5
 8005cf6:	bd30      	pop	{r4, r5, pc}
 8005cf8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8005cfc:	4140      	adcs	r0, r0
 8005cfe:	eb41 0101 	adc.w	r1, r1, r1
 8005d02:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8005d06:	f1a4 0401 	sub.w	r4, r4, #1
 8005d0a:	d1e9      	bne.n	8005ce0 <__adddf3+0x10c>
 8005d0c:	f091 0f00 	teq	r1, #0
 8005d10:	bf04      	itt	eq
 8005d12:	4601      	moveq	r1, r0
 8005d14:	2000      	moveq	r0, #0
 8005d16:	fab1 f381 	clz	r3, r1
 8005d1a:	bf08      	it	eq
 8005d1c:	3320      	addeq	r3, #32
 8005d1e:	f1a3 030b 	sub.w	r3, r3, #11
 8005d22:	f1b3 0220 	subs.w	r2, r3, #32
 8005d26:	da0c      	bge.n	8005d42 <__adddf3+0x16e>
 8005d28:	320c      	adds	r2, #12
 8005d2a:	dd08      	ble.n	8005d3e <__adddf3+0x16a>
 8005d2c:	f102 0c14 	add.w	ip, r2, #20
 8005d30:	f1c2 020c 	rsb	r2, r2, #12
 8005d34:	fa01 f00c 	lsl.w	r0, r1, ip
 8005d38:	fa21 f102 	lsr.w	r1, r1, r2
 8005d3c:	e00c      	b.n	8005d58 <__adddf3+0x184>
 8005d3e:	f102 0214 	add.w	r2, r2, #20
 8005d42:	bfd8      	it	le
 8005d44:	f1c2 0c20 	rsble	ip, r2, #32
 8005d48:	fa01 f102 	lsl.w	r1, r1, r2
 8005d4c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8005d50:	bfdc      	itt	le
 8005d52:	ea41 010c 	orrle.w	r1, r1, ip
 8005d56:	4090      	lslle	r0, r2
 8005d58:	1ae4      	subs	r4, r4, r3
 8005d5a:	bfa2      	ittt	ge
 8005d5c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8005d60:	4329      	orrge	r1, r5
 8005d62:	bd30      	popge	{r4, r5, pc}
 8005d64:	ea6f 0404 	mvn.w	r4, r4
 8005d68:	3c1f      	subs	r4, #31
 8005d6a:	da1c      	bge.n	8005da6 <__adddf3+0x1d2>
 8005d6c:	340c      	adds	r4, #12
 8005d6e:	dc0e      	bgt.n	8005d8e <__adddf3+0x1ba>
 8005d70:	f104 0414 	add.w	r4, r4, #20
 8005d74:	f1c4 0220 	rsb	r2, r4, #32
 8005d78:	fa20 f004 	lsr.w	r0, r0, r4
 8005d7c:	fa01 f302 	lsl.w	r3, r1, r2
 8005d80:	ea40 0003 	orr.w	r0, r0, r3
 8005d84:	fa21 f304 	lsr.w	r3, r1, r4
 8005d88:	ea45 0103 	orr.w	r1, r5, r3
 8005d8c:	bd30      	pop	{r4, r5, pc}
 8005d8e:	f1c4 040c 	rsb	r4, r4, #12
 8005d92:	f1c4 0220 	rsb	r2, r4, #32
 8005d96:	fa20 f002 	lsr.w	r0, r0, r2
 8005d9a:	fa01 f304 	lsl.w	r3, r1, r4
 8005d9e:	ea40 0003 	orr.w	r0, r0, r3
 8005da2:	4629      	mov	r1, r5
 8005da4:	bd30      	pop	{r4, r5, pc}
 8005da6:	fa21 f004 	lsr.w	r0, r1, r4
 8005daa:	4629      	mov	r1, r5
 8005dac:	bd30      	pop	{r4, r5, pc}
 8005dae:	f094 0f00 	teq	r4, #0
 8005db2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8005db6:	bf06      	itte	eq
 8005db8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8005dbc:	3401      	addeq	r4, #1
 8005dbe:	3d01      	subne	r5, #1
 8005dc0:	e74e      	b.n	8005c60 <__adddf3+0x8c>
 8005dc2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8005dc6:	bf18      	it	ne
 8005dc8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8005dcc:	d029      	beq.n	8005e22 <__adddf3+0x24e>
 8005dce:	ea94 0f05 	teq	r4, r5
 8005dd2:	bf08      	it	eq
 8005dd4:	ea90 0f02 	teqeq	r0, r2
 8005dd8:	d005      	beq.n	8005de6 <__adddf3+0x212>
 8005dda:	ea54 0c00 	orrs.w	ip, r4, r0
 8005dde:	bf04      	itt	eq
 8005de0:	4619      	moveq	r1, r3
 8005de2:	4610      	moveq	r0, r2
 8005de4:	bd30      	pop	{r4, r5, pc}
 8005de6:	ea91 0f03 	teq	r1, r3
 8005dea:	bf1e      	ittt	ne
 8005dec:	2100      	movne	r1, #0
 8005dee:	2000      	movne	r0, #0
 8005df0:	bd30      	popne	{r4, r5, pc}
 8005df2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8005df6:	d105      	bne.n	8005e04 <__adddf3+0x230>
 8005df8:	0040      	lsls	r0, r0, #1
 8005dfa:	4149      	adcs	r1, r1
 8005dfc:	bf28      	it	cs
 8005dfe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8005e02:	bd30      	pop	{r4, r5, pc}
 8005e04:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8005e08:	bf3c      	itt	cc
 8005e0a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8005e0e:	bd30      	popcc	{r4, r5, pc}
 8005e10:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8005e14:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8005e18:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005e1c:	f04f 0000 	mov.w	r0, #0
 8005e20:	bd30      	pop	{r4, r5, pc}
 8005e22:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8005e26:	bf1a      	itte	ne
 8005e28:	4619      	movne	r1, r3
 8005e2a:	4610      	movne	r0, r2
 8005e2c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8005e30:	bf1c      	itt	ne
 8005e32:	460b      	movne	r3, r1
 8005e34:	4602      	movne	r2, r0
 8005e36:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8005e3a:	bf06      	itte	eq
 8005e3c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8005e40:	ea91 0f03 	teqeq	r1, r3
 8005e44:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8005e48:	bd30      	pop	{r4, r5, pc}
 8005e4a:	bf00      	nop

08005e4c <__aeabi_ui2d>:
 8005e4c:	f090 0f00 	teq	r0, #0
 8005e50:	bf04      	itt	eq
 8005e52:	2100      	moveq	r1, #0
 8005e54:	4770      	bxeq	lr
 8005e56:	b530      	push	{r4, r5, lr}
 8005e58:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8005e5c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8005e60:	f04f 0500 	mov.w	r5, #0
 8005e64:	f04f 0100 	mov.w	r1, #0
 8005e68:	e750      	b.n	8005d0c <__adddf3+0x138>
 8005e6a:	bf00      	nop

08005e6c <__aeabi_i2d>:
 8005e6c:	f090 0f00 	teq	r0, #0
 8005e70:	bf04      	itt	eq
 8005e72:	2100      	moveq	r1, #0
 8005e74:	4770      	bxeq	lr
 8005e76:	b530      	push	{r4, r5, lr}
 8005e78:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8005e7c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8005e80:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8005e84:	bf48      	it	mi
 8005e86:	4240      	negmi	r0, r0
 8005e88:	f04f 0100 	mov.w	r1, #0
 8005e8c:	e73e      	b.n	8005d0c <__adddf3+0x138>
 8005e8e:	bf00      	nop

08005e90 <__aeabi_f2d>:
 8005e90:	0042      	lsls	r2, r0, #1
 8005e92:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8005e96:	ea4f 0131 	mov.w	r1, r1, rrx
 8005e9a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8005e9e:	bf1f      	itttt	ne
 8005ea0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8005ea4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8005ea8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8005eac:	4770      	bxne	lr
 8005eae:	f092 0f00 	teq	r2, #0
 8005eb2:	bf14      	ite	ne
 8005eb4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8005eb8:	4770      	bxeq	lr
 8005eba:	b530      	push	{r4, r5, lr}
 8005ebc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8005ec0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8005ec4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005ec8:	e720      	b.n	8005d0c <__adddf3+0x138>
 8005eca:	bf00      	nop

08005ecc <__aeabi_ul2d>:
 8005ecc:	ea50 0201 	orrs.w	r2, r0, r1
 8005ed0:	bf08      	it	eq
 8005ed2:	4770      	bxeq	lr
 8005ed4:	b530      	push	{r4, r5, lr}
 8005ed6:	f04f 0500 	mov.w	r5, #0
 8005eda:	e00a      	b.n	8005ef2 <__aeabi_l2d+0x16>

08005edc <__aeabi_l2d>:
 8005edc:	ea50 0201 	orrs.w	r2, r0, r1
 8005ee0:	bf08      	it	eq
 8005ee2:	4770      	bxeq	lr
 8005ee4:	b530      	push	{r4, r5, lr}
 8005ee6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8005eea:	d502      	bpl.n	8005ef2 <__aeabi_l2d+0x16>
 8005eec:	4240      	negs	r0, r0
 8005eee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8005ef2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8005ef6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8005efa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8005efe:	f43f aedc 	beq.w	8005cba <__adddf3+0xe6>
 8005f02:	f04f 0203 	mov.w	r2, #3
 8005f06:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8005f0a:	bf18      	it	ne
 8005f0c:	3203      	addne	r2, #3
 8005f0e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8005f12:	bf18      	it	ne
 8005f14:	3203      	addne	r2, #3
 8005f16:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8005f1a:	f1c2 0320 	rsb	r3, r2, #32
 8005f1e:	fa00 fc03 	lsl.w	ip, r0, r3
 8005f22:	fa20 f002 	lsr.w	r0, r0, r2
 8005f26:	fa01 fe03 	lsl.w	lr, r1, r3
 8005f2a:	ea40 000e 	orr.w	r0, r0, lr
 8005f2e:	fa21 f102 	lsr.w	r1, r1, r2
 8005f32:	4414      	add	r4, r2
 8005f34:	e6c1      	b.n	8005cba <__adddf3+0xe6>
 8005f36:	bf00      	nop

08005f38 <__aeabi_dmul>:
 8005f38:	b570      	push	{r4, r5, r6, lr}
 8005f3a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8005f3e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8005f42:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8005f46:	bf1d      	ittte	ne
 8005f48:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8005f4c:	ea94 0f0c 	teqne	r4, ip
 8005f50:	ea95 0f0c 	teqne	r5, ip
 8005f54:	f000 f8de 	bleq	8006114 <__aeabi_dmul+0x1dc>
 8005f58:	442c      	add	r4, r5
 8005f5a:	ea81 0603 	eor.w	r6, r1, r3
 8005f5e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8005f62:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8005f66:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8005f6a:	bf18      	it	ne
 8005f6c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8005f70:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005f74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f78:	d038      	beq.n	8005fec <__aeabi_dmul+0xb4>
 8005f7a:	fba0 ce02 	umull	ip, lr, r0, r2
 8005f7e:	f04f 0500 	mov.w	r5, #0
 8005f82:	fbe1 e502 	umlal	lr, r5, r1, r2
 8005f86:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8005f8a:	fbe0 e503 	umlal	lr, r5, r0, r3
 8005f8e:	f04f 0600 	mov.w	r6, #0
 8005f92:	fbe1 5603 	umlal	r5, r6, r1, r3
 8005f96:	f09c 0f00 	teq	ip, #0
 8005f9a:	bf18      	it	ne
 8005f9c:	f04e 0e01 	orrne.w	lr, lr, #1
 8005fa0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8005fa4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8005fa8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8005fac:	d204      	bcs.n	8005fb8 <__aeabi_dmul+0x80>
 8005fae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8005fb2:	416d      	adcs	r5, r5
 8005fb4:	eb46 0606 	adc.w	r6, r6, r6
 8005fb8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8005fbc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8005fc0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8005fc4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8005fc8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8005fcc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8005fd0:	bf88      	it	hi
 8005fd2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8005fd6:	d81e      	bhi.n	8006016 <__aeabi_dmul+0xde>
 8005fd8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8005fdc:	bf08      	it	eq
 8005fde:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8005fe2:	f150 0000 	adcs.w	r0, r0, #0
 8005fe6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8005fea:	bd70      	pop	{r4, r5, r6, pc}
 8005fec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8005ff0:	ea46 0101 	orr.w	r1, r6, r1
 8005ff4:	ea40 0002 	orr.w	r0, r0, r2
 8005ff8:	ea81 0103 	eor.w	r1, r1, r3
 8005ffc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8006000:	bfc2      	ittt	gt
 8006002:	ebd4 050c 	rsbsgt	r5, r4, ip
 8006006:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800600a:	bd70      	popgt	{r4, r5, r6, pc}
 800600c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006010:	f04f 0e00 	mov.w	lr, #0
 8006014:	3c01      	subs	r4, #1
 8006016:	f300 80ab 	bgt.w	8006170 <__aeabi_dmul+0x238>
 800601a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800601e:	bfde      	ittt	le
 8006020:	2000      	movle	r0, #0
 8006022:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8006026:	bd70      	pople	{r4, r5, r6, pc}
 8006028:	f1c4 0400 	rsb	r4, r4, #0
 800602c:	3c20      	subs	r4, #32
 800602e:	da35      	bge.n	800609c <__aeabi_dmul+0x164>
 8006030:	340c      	adds	r4, #12
 8006032:	dc1b      	bgt.n	800606c <__aeabi_dmul+0x134>
 8006034:	f104 0414 	add.w	r4, r4, #20
 8006038:	f1c4 0520 	rsb	r5, r4, #32
 800603c:	fa00 f305 	lsl.w	r3, r0, r5
 8006040:	fa20 f004 	lsr.w	r0, r0, r4
 8006044:	fa01 f205 	lsl.w	r2, r1, r5
 8006048:	ea40 0002 	orr.w	r0, r0, r2
 800604c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8006050:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006054:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8006058:	fa21 f604 	lsr.w	r6, r1, r4
 800605c:	eb42 0106 	adc.w	r1, r2, r6
 8006060:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8006064:	bf08      	it	eq
 8006066:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800606a:	bd70      	pop	{r4, r5, r6, pc}
 800606c:	f1c4 040c 	rsb	r4, r4, #12
 8006070:	f1c4 0520 	rsb	r5, r4, #32
 8006074:	fa00 f304 	lsl.w	r3, r0, r4
 8006078:	fa20 f005 	lsr.w	r0, r0, r5
 800607c:	fa01 f204 	lsl.w	r2, r1, r4
 8006080:	ea40 0002 	orr.w	r0, r0, r2
 8006084:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006088:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800608c:	f141 0100 	adc.w	r1, r1, #0
 8006090:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8006094:	bf08      	it	eq
 8006096:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800609a:	bd70      	pop	{r4, r5, r6, pc}
 800609c:	f1c4 0520 	rsb	r5, r4, #32
 80060a0:	fa00 f205 	lsl.w	r2, r0, r5
 80060a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80060a8:	fa20 f304 	lsr.w	r3, r0, r4
 80060ac:	fa01 f205 	lsl.w	r2, r1, r5
 80060b0:	ea43 0302 	orr.w	r3, r3, r2
 80060b4:	fa21 f004 	lsr.w	r0, r1, r4
 80060b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80060bc:	fa21 f204 	lsr.w	r2, r1, r4
 80060c0:	ea20 0002 	bic.w	r0, r0, r2
 80060c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80060c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80060cc:	bf08      	it	eq
 80060ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80060d2:	bd70      	pop	{r4, r5, r6, pc}
 80060d4:	f094 0f00 	teq	r4, #0
 80060d8:	d10f      	bne.n	80060fa <__aeabi_dmul+0x1c2>
 80060da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80060de:	0040      	lsls	r0, r0, #1
 80060e0:	eb41 0101 	adc.w	r1, r1, r1
 80060e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80060e8:	bf08      	it	eq
 80060ea:	3c01      	subeq	r4, #1
 80060ec:	d0f7      	beq.n	80060de <__aeabi_dmul+0x1a6>
 80060ee:	ea41 0106 	orr.w	r1, r1, r6
 80060f2:	f095 0f00 	teq	r5, #0
 80060f6:	bf18      	it	ne
 80060f8:	4770      	bxne	lr
 80060fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80060fe:	0052      	lsls	r2, r2, #1
 8006100:	eb43 0303 	adc.w	r3, r3, r3
 8006104:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8006108:	bf08      	it	eq
 800610a:	3d01      	subeq	r5, #1
 800610c:	d0f7      	beq.n	80060fe <__aeabi_dmul+0x1c6>
 800610e:	ea43 0306 	orr.w	r3, r3, r6
 8006112:	4770      	bx	lr
 8006114:	ea94 0f0c 	teq	r4, ip
 8006118:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800611c:	bf18      	it	ne
 800611e:	ea95 0f0c 	teqne	r5, ip
 8006122:	d00c      	beq.n	800613e <__aeabi_dmul+0x206>
 8006124:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8006128:	bf18      	it	ne
 800612a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800612e:	d1d1      	bne.n	80060d4 <__aeabi_dmul+0x19c>
 8006130:	ea81 0103 	eor.w	r1, r1, r3
 8006134:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006138:	f04f 0000 	mov.w	r0, #0
 800613c:	bd70      	pop	{r4, r5, r6, pc}
 800613e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8006142:	bf06      	itte	eq
 8006144:	4610      	moveq	r0, r2
 8006146:	4619      	moveq	r1, r3
 8006148:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800614c:	d019      	beq.n	8006182 <__aeabi_dmul+0x24a>
 800614e:	ea94 0f0c 	teq	r4, ip
 8006152:	d102      	bne.n	800615a <__aeabi_dmul+0x222>
 8006154:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8006158:	d113      	bne.n	8006182 <__aeabi_dmul+0x24a>
 800615a:	ea95 0f0c 	teq	r5, ip
 800615e:	d105      	bne.n	800616c <__aeabi_dmul+0x234>
 8006160:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8006164:	bf1c      	itt	ne
 8006166:	4610      	movne	r0, r2
 8006168:	4619      	movne	r1, r3
 800616a:	d10a      	bne.n	8006182 <__aeabi_dmul+0x24a>
 800616c:	ea81 0103 	eor.w	r1, r1, r3
 8006170:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006174:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8006178:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800617c:	f04f 0000 	mov.w	r0, #0
 8006180:	bd70      	pop	{r4, r5, r6, pc}
 8006182:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8006186:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800618a:	bd70      	pop	{r4, r5, r6, pc}

0800618c <__aeabi_ddiv>:
 800618c:	b570      	push	{r4, r5, r6, lr}
 800618e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8006192:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8006196:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800619a:	bf1d      	ittte	ne
 800619c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80061a0:	ea94 0f0c 	teqne	r4, ip
 80061a4:	ea95 0f0c 	teqne	r5, ip
 80061a8:	f000 f8a7 	bleq	80062fa <__aeabi_ddiv+0x16e>
 80061ac:	eba4 0405 	sub.w	r4, r4, r5
 80061b0:	ea81 0e03 	eor.w	lr, r1, r3
 80061b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80061b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80061bc:	f000 8088 	beq.w	80062d0 <__aeabi_ddiv+0x144>
 80061c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80061c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80061c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80061cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80061d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80061d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80061d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80061dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80061e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80061e4:	429d      	cmp	r5, r3
 80061e6:	bf08      	it	eq
 80061e8:	4296      	cmpeq	r6, r2
 80061ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80061ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80061f2:	d202      	bcs.n	80061fa <__aeabi_ddiv+0x6e>
 80061f4:	085b      	lsrs	r3, r3, #1
 80061f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80061fa:	1ab6      	subs	r6, r6, r2
 80061fc:	eb65 0503 	sbc.w	r5, r5, r3
 8006200:	085b      	lsrs	r3, r3, #1
 8006202:	ea4f 0232 	mov.w	r2, r2, rrx
 8006206:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800620a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800620e:	ebb6 0e02 	subs.w	lr, r6, r2
 8006212:	eb75 0e03 	sbcs.w	lr, r5, r3
 8006216:	bf22      	ittt	cs
 8006218:	1ab6      	subcs	r6, r6, r2
 800621a:	4675      	movcs	r5, lr
 800621c:	ea40 000c 	orrcs.w	r0, r0, ip
 8006220:	085b      	lsrs	r3, r3, #1
 8006222:	ea4f 0232 	mov.w	r2, r2, rrx
 8006226:	ebb6 0e02 	subs.w	lr, r6, r2
 800622a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800622e:	bf22      	ittt	cs
 8006230:	1ab6      	subcs	r6, r6, r2
 8006232:	4675      	movcs	r5, lr
 8006234:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8006238:	085b      	lsrs	r3, r3, #1
 800623a:	ea4f 0232 	mov.w	r2, r2, rrx
 800623e:	ebb6 0e02 	subs.w	lr, r6, r2
 8006242:	eb75 0e03 	sbcs.w	lr, r5, r3
 8006246:	bf22      	ittt	cs
 8006248:	1ab6      	subcs	r6, r6, r2
 800624a:	4675      	movcs	r5, lr
 800624c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8006250:	085b      	lsrs	r3, r3, #1
 8006252:	ea4f 0232 	mov.w	r2, r2, rrx
 8006256:	ebb6 0e02 	subs.w	lr, r6, r2
 800625a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800625e:	bf22      	ittt	cs
 8006260:	1ab6      	subcs	r6, r6, r2
 8006262:	4675      	movcs	r5, lr
 8006264:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8006268:	ea55 0e06 	orrs.w	lr, r5, r6
 800626c:	d018      	beq.n	80062a0 <__aeabi_ddiv+0x114>
 800626e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8006272:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8006276:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800627a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800627e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8006282:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8006286:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800628a:	d1c0      	bne.n	800620e <__aeabi_ddiv+0x82>
 800628c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006290:	d10b      	bne.n	80062aa <__aeabi_ddiv+0x11e>
 8006292:	ea41 0100 	orr.w	r1, r1, r0
 8006296:	f04f 0000 	mov.w	r0, #0
 800629a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800629e:	e7b6      	b.n	800620e <__aeabi_ddiv+0x82>
 80062a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80062a4:	bf04      	itt	eq
 80062a6:	4301      	orreq	r1, r0
 80062a8:	2000      	moveq	r0, #0
 80062aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80062ae:	bf88      	it	hi
 80062b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80062b4:	f63f aeaf 	bhi.w	8006016 <__aeabi_dmul+0xde>
 80062b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80062bc:	bf04      	itt	eq
 80062be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80062c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80062c6:	f150 0000 	adcs.w	r0, r0, #0
 80062ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80062ce:	bd70      	pop	{r4, r5, r6, pc}
 80062d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80062d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80062d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80062dc:	bfc2      	ittt	gt
 80062de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80062e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80062e6:	bd70      	popgt	{r4, r5, r6, pc}
 80062e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80062ec:	f04f 0e00 	mov.w	lr, #0
 80062f0:	3c01      	subs	r4, #1
 80062f2:	e690      	b.n	8006016 <__aeabi_dmul+0xde>
 80062f4:	ea45 0e06 	orr.w	lr, r5, r6
 80062f8:	e68d      	b.n	8006016 <__aeabi_dmul+0xde>
 80062fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80062fe:	ea94 0f0c 	teq	r4, ip
 8006302:	bf08      	it	eq
 8006304:	ea95 0f0c 	teqeq	r5, ip
 8006308:	f43f af3b 	beq.w	8006182 <__aeabi_dmul+0x24a>
 800630c:	ea94 0f0c 	teq	r4, ip
 8006310:	d10a      	bne.n	8006328 <__aeabi_ddiv+0x19c>
 8006312:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8006316:	f47f af34 	bne.w	8006182 <__aeabi_dmul+0x24a>
 800631a:	ea95 0f0c 	teq	r5, ip
 800631e:	f47f af25 	bne.w	800616c <__aeabi_dmul+0x234>
 8006322:	4610      	mov	r0, r2
 8006324:	4619      	mov	r1, r3
 8006326:	e72c      	b.n	8006182 <__aeabi_dmul+0x24a>
 8006328:	ea95 0f0c 	teq	r5, ip
 800632c:	d106      	bne.n	800633c <__aeabi_ddiv+0x1b0>
 800632e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8006332:	f43f aefd 	beq.w	8006130 <__aeabi_dmul+0x1f8>
 8006336:	4610      	mov	r0, r2
 8006338:	4619      	mov	r1, r3
 800633a:	e722      	b.n	8006182 <__aeabi_dmul+0x24a>
 800633c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8006340:	bf18      	it	ne
 8006342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8006346:	f47f aec5 	bne.w	80060d4 <__aeabi_dmul+0x19c>
 800634a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800634e:	f47f af0d 	bne.w	800616c <__aeabi_dmul+0x234>
 8006352:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8006356:	f47f aeeb 	bne.w	8006130 <__aeabi_dmul+0x1f8>
 800635a:	e712      	b.n	8006182 <__aeabi_dmul+0x24a>

0800635c <__gedf2>:
 800635c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8006360:	e006      	b.n	8006370 <__cmpdf2+0x4>
 8006362:	bf00      	nop

08006364 <__ledf2>:
 8006364:	f04f 0c01 	mov.w	ip, #1
 8006368:	e002      	b.n	8006370 <__cmpdf2+0x4>
 800636a:	bf00      	nop

0800636c <__cmpdf2>:
 800636c:	f04f 0c01 	mov.w	ip, #1
 8006370:	f84d cd04 	str.w	ip, [sp, #-4]!
 8006374:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8006378:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800637c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8006380:	bf18      	it	ne
 8006382:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8006386:	d01b      	beq.n	80063c0 <__cmpdf2+0x54>
 8006388:	b001      	add	sp, #4
 800638a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800638e:	bf0c      	ite	eq
 8006390:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8006394:	ea91 0f03 	teqne	r1, r3
 8006398:	bf02      	ittt	eq
 800639a:	ea90 0f02 	teqeq	r0, r2
 800639e:	2000      	moveq	r0, #0
 80063a0:	4770      	bxeq	lr
 80063a2:	f110 0f00 	cmn.w	r0, #0
 80063a6:	ea91 0f03 	teq	r1, r3
 80063aa:	bf58      	it	pl
 80063ac:	4299      	cmppl	r1, r3
 80063ae:	bf08      	it	eq
 80063b0:	4290      	cmpeq	r0, r2
 80063b2:	bf2c      	ite	cs
 80063b4:	17d8      	asrcs	r0, r3, #31
 80063b6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80063ba:	f040 0001 	orr.w	r0, r0, #1
 80063be:	4770      	bx	lr
 80063c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80063c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80063c8:	d102      	bne.n	80063d0 <__cmpdf2+0x64>
 80063ca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80063ce:	d107      	bne.n	80063e0 <__cmpdf2+0x74>
 80063d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80063d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80063d8:	d1d6      	bne.n	8006388 <__cmpdf2+0x1c>
 80063da:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80063de:	d0d3      	beq.n	8006388 <__cmpdf2+0x1c>
 80063e0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80063e4:	4770      	bx	lr
 80063e6:	bf00      	nop

080063e8 <__aeabi_cdrcmple>:
 80063e8:	4684      	mov	ip, r0
 80063ea:	4610      	mov	r0, r2
 80063ec:	4662      	mov	r2, ip
 80063ee:	468c      	mov	ip, r1
 80063f0:	4619      	mov	r1, r3
 80063f2:	4663      	mov	r3, ip
 80063f4:	e000      	b.n	80063f8 <__aeabi_cdcmpeq>
 80063f6:	bf00      	nop

080063f8 <__aeabi_cdcmpeq>:
 80063f8:	b501      	push	{r0, lr}
 80063fa:	f7ff ffb7 	bl	800636c <__cmpdf2>
 80063fe:	2800      	cmp	r0, #0
 8006400:	bf48      	it	mi
 8006402:	f110 0f00 	cmnmi.w	r0, #0
 8006406:	bd01      	pop	{r0, pc}

08006408 <__aeabi_dcmpeq>:
 8006408:	f84d ed08 	str.w	lr, [sp, #-8]!
 800640c:	f7ff fff4 	bl	80063f8 <__aeabi_cdcmpeq>
 8006410:	bf0c      	ite	eq
 8006412:	2001      	moveq	r0, #1
 8006414:	2000      	movne	r0, #0
 8006416:	f85d fb08 	ldr.w	pc, [sp], #8
 800641a:	bf00      	nop

0800641c <__aeabi_dcmplt>:
 800641c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006420:	f7ff ffea 	bl	80063f8 <__aeabi_cdcmpeq>
 8006424:	bf34      	ite	cc
 8006426:	2001      	movcc	r0, #1
 8006428:	2000      	movcs	r0, #0
 800642a:	f85d fb08 	ldr.w	pc, [sp], #8
 800642e:	bf00      	nop

08006430 <__aeabi_dcmple>:
 8006430:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006434:	f7ff ffe0 	bl	80063f8 <__aeabi_cdcmpeq>
 8006438:	bf94      	ite	ls
 800643a:	2001      	movls	r0, #1
 800643c:	2000      	movhi	r0, #0
 800643e:	f85d fb08 	ldr.w	pc, [sp], #8
 8006442:	bf00      	nop

08006444 <__aeabi_dcmpge>:
 8006444:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006448:	f7ff ffce 	bl	80063e8 <__aeabi_cdrcmple>
 800644c:	bf94      	ite	ls
 800644e:	2001      	movls	r0, #1
 8006450:	2000      	movhi	r0, #0
 8006452:	f85d fb08 	ldr.w	pc, [sp], #8
 8006456:	bf00      	nop

08006458 <__aeabi_dcmpgt>:
 8006458:	f84d ed08 	str.w	lr, [sp, #-8]!
 800645c:	f7ff ffc4 	bl	80063e8 <__aeabi_cdrcmple>
 8006460:	bf34      	ite	cc
 8006462:	2001      	movcc	r0, #1
 8006464:	2000      	movcs	r0, #0
 8006466:	f85d fb08 	ldr.w	pc, [sp], #8
 800646a:	bf00      	nop

0800646c <__aeabi_d2iz>:
 800646c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8006470:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8006474:	d215      	bcs.n	80064a2 <__aeabi_d2iz+0x36>
 8006476:	d511      	bpl.n	800649c <__aeabi_d2iz+0x30>
 8006478:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800647c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8006480:	d912      	bls.n	80064a8 <__aeabi_d2iz+0x3c>
 8006482:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8006486:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800648a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800648e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8006492:	fa23 f002 	lsr.w	r0, r3, r2
 8006496:	bf18      	it	ne
 8006498:	4240      	negne	r0, r0
 800649a:	4770      	bx	lr
 800649c:	f04f 0000 	mov.w	r0, #0
 80064a0:	4770      	bx	lr
 80064a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80064a6:	d105      	bne.n	80064b4 <__aeabi_d2iz+0x48>
 80064a8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80064ac:	bf08      	it	eq
 80064ae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80064b2:	4770      	bx	lr
 80064b4:	f04f 0000 	mov.w	r0, #0
 80064b8:	4770      	bx	lr
 80064ba:	bf00      	nop

080064bc <main>:

#include "usart3.h"

int main(void) {

	SysTick_Config(SystemCoreClock/1000);
 80064bc:	4b4d      	ldr	r3, [pc, #308]	; (80065f4 <main+0x138>)
 80064be:	681a      	ldr	r2, [r3, #0]
 80064c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
#include "delay.h"
#include "systick.h"

#include "usart3.h"

int main(void) {
 80064c4:	b570      	push	{r4, r5, r6, lr}

	SysTick_Config(SystemCoreClock/1000);
 80064c6:	fbb2 f2f3 	udiv	r2, r2, r3
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 80064ca:	4b4b      	ldr	r3, [pc, #300]	; (80065f8 <main+0x13c>)
 80064cc:	3a01      	subs	r2, #1
 80064ce:	605a      	str	r2, [r3, #4]
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80064d0:	4a4a      	ldr	r2, [pc, #296]	; (80065fc <main+0x140>)
 80064d2:	21f0      	movs	r1, #240	; 0xf0
 80064d4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80064d8:	2400      	movs	r4, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80064da:	2207      	movs	r2, #7
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80064dc:	609c      	str	r4, [r3, #8]
#include "delay.h"
#include "systick.h"

#include "usart3.h"

int main(void) {
 80064de:	b09a      	sub	sp, #104	; 0x68
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80064e0:	601a      	str	r2, [r3, #0]

	SysTick_Config(SystemCoreClock/1000);

	usart3_begin(19200);
 80064e2:	f44f 4096 	mov.w	r0, #19200	; 0x4b00
 80064e6:	f7f9 ff53 	bl	8000390 <usart3_begin>
	usart3_print("Hi! friends!\n\n");
 80064ea:	4845      	ldr	r0, [pc, #276]	; (8006600 <main+0x144>)
 80064ec:	f7f9 ffde 	bl	80004ac <usart3_print>
	usart3_print("Happy are those who know they are spiritually poor; \n");
 80064f0:	4844      	ldr	r0, [pc, #272]	; (8006604 <main+0x148>)
 80064f2:	f7f9 ffdb 	bl	80004ac <usart3_print>
	usart3_print("The kingdom of heaven belongs to them!\n");
 80064f6:	4844      	ldr	r0, [pc, #272]	; (8006608 <main+0x14c>)
 80064f8:	f7f9 ffd8 	bl	80004ac <usart3_print>
	usart3_flush();
 80064fc:	f7f9 fff2 	bl	80004e4 <usart3_flush>

	pinMode(PD12 | PD13 | PD14 | PD15, GPIO_Mode_OUT);
 8006500:	f44f 209e 	mov.w	r0, #323584	; 0x4f000
 8006504:	2101      	movs	r1, #1
 8006506:	f7f9 fe3f 	bl	8000188 <pinMode>
	uint32_t dval = 230;
	uint32_t intval = 16;
	char tmp[92];

	while (1) {
		digitalWrite(PD15, SET);
 800650a:	2101      	movs	r1, #1
 800650c:	f44f 2090 	mov.w	r0, #294912	; 0x48000
 8006510:	f7f9 fe7e 	bl	8000210 <digitalWrite>
		digitalWrite(PD12 | PD13 | PD14, RESET);
 8006514:	2100      	movs	r1, #0
 8006516:	f44f 208e 	mov.w	r0, #290816	; 0x47000
 800651a:	f7f9 fe79 	bl	8000210 <digitalWrite>
		SysTick_delay(intval);
 800651e:	2010      	movs	r0, #16
 8006520:	f7f9 fea6 	bl	8000270 <SysTick_delay>
		digitalWrite(PD12, SET);
 8006524:	2101      	movs	r1, #1
 8006526:	f44f 2082 	mov.w	r0, #266240	; 0x41000
 800652a:	f7f9 fe71 	bl	8000210 <digitalWrite>
		digitalWrite(PD13 | PD14 | PD15, RESET);
 800652e:	2100      	movs	r1, #0
 8006530:	f44f 209c 	mov.w	r0, #319488	; 0x4e000
 8006534:	f7f9 fe6c 	bl	8000210 <digitalWrite>
		SysTick_delay(intval);
 8006538:	2010      	movs	r0, #16
 800653a:	f7f9 fe99 	bl	8000270 <SysTick_delay>
		digitalWrite(PD13, SET);
 800653e:	2101      	movs	r1, #1
 8006540:	f44f 2084 	mov.w	r0, #270336	; 0x42000
 8006544:	f7f9 fe64 	bl	8000210 <digitalWrite>
		digitalWrite(PD12 | PD14 | PD15, RESET);
 8006548:	2100      	movs	r1, #0
 800654a:	f44f 209a 	mov.w	r0, #315392	; 0x4d000
 800654e:	f7f9 fe5f 	bl	8000210 <digitalWrite>
		SysTick_delay(intval);
 8006552:	2010      	movs	r0, #16
 8006554:	f7f9 fe8c 	bl	8000270 <SysTick_delay>
		digitalWrite(PD14, SET);
 8006558:	2101      	movs	r1, #1
 800655a:	f44f 2088 	mov.w	r0, #278528	; 0x44000
 800655e:	f7f9 fe57 	bl	8000210 <digitalWrite>
		digitalWrite(PD12 | PD13 | PD15, RESET);
 8006562:	2100      	movs	r1, #0
 8006564:	f44f 2096 	mov.w	r0, #307200	; 0x4b000
 8006568:	f7f9 fe52 	bl	8000210 <digitalWrite>
		SysTick_delay(intval);
 800656c:	2010      	movs	r0, #16
 800656e:	f7f9 fe7f 	bl	8000270 <SysTick_delay>
		//
		digitalWrite(PD15, SET);
 8006572:	2101      	movs	r1, #1
 8006574:	f44f 2090 	mov.w	r0, #294912	; 0x48000
 8006578:	f7f9 fe4a 	bl	8000210 <digitalWrite>
		digitalWrite(PD12 | PD13 | PD14, RESET);
 800657c:	2100      	movs	r1, #0
 800657e:	f44f 208e 	mov.w	r0, #290816	; 0x47000
 8006582:	f7f9 fe45 	bl	8000210 <digitalWrite>
		SysTick_delay(dval);
 8006586:	20e6      	movs	r0, #230	; 0xe6
 8006588:	f7f9 fe72 	bl	8000270 <SysTick_delay>
/*
		usart3.print((float)(count++ / 32.0f), 3);
		*/
		count++;
		uint16_t h, t;
		h = tx_head();
 800658c:	f7fa f80a 	bl	80005a4 <tx_head>
 8006590:	4605      	mov	r5, r0
		t = tx_tail();
 8006592:	f7fa f80d 	bl	80005b0 <tx_tail>
		digitalWrite(PD12 | PD13 | PD14, RESET);
		SysTick_delay(dval);
/*
		usart3.print((float)(count++ / 32.0f), 3);
		*/
		count++;
 8006596:	3401      	adds	r4, #1
		uint16_t h, t;
		h = tx_head();
		t = tx_tail();
 8006598:	4603      	mov	r3, r0
		sprintf(tmp, "head =% 4d, tail =% 4d, count = %04X\n", h, t, count);
 800659a:	491c      	ldr	r1, [pc, #112]	; (800660c <main+0x150>)
 800659c:	462a      	mov	r2, r5
		digitalWrite(PD12 | PD13 | PD14, RESET);
		SysTick_delay(dval);
/*
		usart3.print((float)(count++ / 32.0f), 3);
		*/
		count++;
 800659e:	b2a4      	uxth	r4, r4
		uint16_t h, t;
		h = tx_head();
		t = tx_tail();
		sprintf(tmp, "head =% 4d, tail =% 4d, count = %04X\n", h, t, count);
 80065a0:	a803      	add	r0, sp, #12
 80065a2:	9400      	str	r4, [sp, #0]
 80065a4:	f7fa ffda 	bl	800155c <sprintf>
		usart3_print(tmp);
 80065a8:	a803      	add	r0, sp, #12
 80065aa:	f7f9 ff7f 	bl	80004ac <usart3_print>
		/*
		dval = (uint32) (100.0f + 64*sinf( (count % (uint32)(3.14159 * 2 * 32))/32.0f));
		usart3.println(dval);
		*/
		uint16_t i;
		if ( usart3_available() > 0 ) {
 80065ae:	f7f9 fff3 	bl	8000598 <usart3_available>
 80065b2:	2800      	cmp	r0, #0
 80065b4:	d0a9      	beq.n	800650a <main+0x4e>
			usart3_write(usart3_peek());
 80065b6:	f7f9 ffe1 	bl	800057c <usart3_peek>
 80065ba:	f7f9 ff5d 	bl	8000478 <usart3_write>
			i = 0;
 80065be:	2500      	movs	r5, #0
			while ( usart3_available() > 0 ) {
 80065c0:	e005      	b.n	80065ce <main+0x112>
				tmp[i++] = (char) usart3_read();
 80065c2:	f7f9 ff83 	bl	80004cc <usart3_read>
 80065c6:	3501      	adds	r5, #1
 80065c8:	f806 0c5c 	strb.w	r0, [r6, #-92]
 80065cc:	b2ad      	uxth	r5, r5
		*/
		uint16_t i;
		if ( usart3_available() > 0 ) {
			usart3_write(usart3_peek());
			i = 0;
			while ( usart3_available() > 0 ) {
 80065ce:	f7f9 ffe3 	bl	8000598 <usart3_available>
 80065d2:	ab1a      	add	r3, sp, #104	; 0x68
 80065d4:	195e      	adds	r6, r3, r5
 80065d6:	2800      	cmp	r0, #0
 80065d8:	d1f3      	bne.n	80065c2 <main+0x106>
				tmp[i++] = (char) usart3_read();
			}
			tmp[i] = 0;
 80065da:	f806 0c5c 	strb.w	r0, [r6, #-92]
			usart3_print(": read: ");
 80065de:	480c      	ldr	r0, [pc, #48]	; (8006610 <main+0x154>)
 80065e0:	f7f9 ff64 	bl	80004ac <usart3_print>
			usart3_print(tmp);
 80065e4:	a803      	add	r0, sp, #12
 80065e6:	f7f9 ff61 	bl	80004ac <usart3_print>
			usart3_print("\n");
 80065ea:	480a      	ldr	r0, [pc, #40]	; (8006614 <main+0x158>)
 80065ec:	f7f9 ff5e 	bl	80004ac <usart3_print>
 80065f0:	e78b      	b.n	800650a <main+0x4e>
 80065f2:	bf00      	nop
 80065f4:	20000088 	.word	0x20000088
 80065f8:	e000e010 	.word	0xe000e010
 80065fc:	e000ed00 	.word	0xe000ed00
 8006600:	080067d0 	.word	0x080067d0
 8006604:	080067df 	.word	0x080067df
 8006608:	08006815 	.word	0x08006815
 800660c:	0800683d 	.word	0x0800683d
 8006610:	08006863 	.word	0x08006863
 8006614:	080067dd 	.word	0x080067dd

08006618 <Reset_Handler>:
 8006618:	2100      	movs	r1, #0
 800661a:	e003      	b.n	8006624 <LoopCopyDataInit>

0800661c <CopyDataInit>:
 800661c:	4b0a      	ldr	r3, [pc, #40]	; (8006648 <LoopFillZerobss+0x10>)
 800661e:	585b      	ldr	r3, [r3, r1]
 8006620:	5043      	str	r3, [r0, r1]
 8006622:	3104      	adds	r1, #4

08006624 <LoopCopyDataInit>:
 8006624:	4809      	ldr	r0, [pc, #36]	; (800664c <LoopFillZerobss+0x14>)
 8006626:	4b0a      	ldr	r3, [pc, #40]	; (8006650 <LoopFillZerobss+0x18>)
 8006628:	1842      	adds	r2, r0, r1
 800662a:	429a      	cmp	r2, r3
 800662c:	d3f6      	bcc.n	800661c <CopyDataInit>
 800662e:	4a09      	ldr	r2, [pc, #36]	; (8006654 <LoopFillZerobss+0x1c>)
 8006630:	e002      	b.n	8006638 <LoopFillZerobss>

08006632 <FillZerobss>:
 8006632:	2300      	movs	r3, #0
 8006634:	f842 3b04 	str.w	r3, [r2], #4

08006638 <LoopFillZerobss>:
 8006638:	4b07      	ldr	r3, [pc, #28]	; (8006658 <LoopFillZerobss+0x20>)
 800663a:	429a      	cmp	r2, r3
 800663c:	d3f9      	bcc.n	8006632 <FillZerobss>
 800663e:	f7fa fe47 	bl	80012d0 <SystemInit>
 8006642:	f7ff ff3b 	bl	80064bc <main>
 8006646:	4770      	bx	lr
 8006648:	080068f0 	.word	0x080068f0
 800664c:	20000000 	.word	0x20000000
 8006650:	2000095c 	.word	0x2000095c
 8006654:	2000095c 	.word	0x2000095c
 8006658:	20000bbc 	.word	0x20000bbc

0800665c <ADC_IRQHandler>:
 800665c:	e7fe      	b.n	800665c <ADC_IRQHandler>
	...

08006660 <blanks.3927>:
 8006660:	2020 2020 2020 2020 2020 2020 2020 2020                     

08006670 <zeroes.3928>:
 8006670:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000

08006680 <_global_impure_ptr>:
 8006680:	00a8 2000 0000 0000                         ... ....

08006688 <p05.2449>:
 8006688:	0005 0000 0019 0000 007d 0000 0000 0000     ........}.......

08006698 <__mprec_tens>:
 8006698:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
 80066a8:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
 80066b8:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
 80066c8:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
 80066d8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
 80066e8:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
 80066f8:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
 8006708:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
 8006718:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
 8006728:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
 8006738:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
 8006748:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
 8006758:	9db4 79d9 7843 44ea                         ...yCx.D

08006760 <__mprec_tinytens>:
 8006760:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
 8006770:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
 8006780:	6f43 64ac 0628 0ac8                         Co.d(...

08006788 <__mprec_bigtens>:
 8006788:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
 8006798:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
 80067a8:	bf3c 7f73 4fdd 7515                         <.s..O.u

080067b0 <blanks.3871>:
 80067b0:	2020 2020 2020 2020 2020 2020 2020 2020                     

080067c0 <zeroes.3872>:
 80067c0:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
 80067d0:	6948 2021 7266 6569 646e 2173 0a0a 4800     Hi! friends!...H
 80067e0:	7061 7970 6120 6572 7420 6f68 6573 7720     appy are those w
 80067f0:	6f68 6b20 6f6e 2077 6874 7965 6120 6572     ho know they are
 8006800:	7320 6970 6972 7574 6c61 796c 7020 6f6f      spiritually poo
 8006810:	3b72 0a20 5400 6568 6b20 6e69 6467 6d6f     r; ..The kingdom
 8006820:	6f20 2066 6568 7661 6e65 6220 6c65 6e6f      of heaven belon
 8006830:	7367 7420 206f 6874 6d65 0a21 6800 6165     gs to them!..hea
 8006840:	2064 253d 3420 2c64 7420 6961 206c 253d     d =% 4d, tail =%
 8006850:	3420 2c64 6320 756f 746e 3d20 2520 3430      4d, count = %04
 8006860:	0a58 3a00 7220 6165 3a64 0020 6548 7061     X..: read: .Heap
 8006870:	6120 646e 7320 6174 6b63 6320 6c6f 696c      and stack colli
 8006880:	6973 6e6f 000a 7865 7469 0000 4e49 0046     sion..exit..INF.
 8006890:	6e69 0066 414e 004e 616e 006e 3130 3332     inf.NAN.nan.0123
 80068a0:	3534 3736 3938 4241 4443 4645 0000 0000     456789ABCDEF....
 80068b0:	3130 3332 3534 3736 3938 6261 6463 6665     0123456789abcdef
 80068c0:	0000 0000 6e28 6c75 296c 0000 0030 0000     ....(null)..0...
 80068d0:	6e49 6966 696e 7974 0000 0000 614e 004e     Infinity....NaN.
 80068e0:	0043 0000 4f50 4953 0058 0000 002e 0000     C...POSIX.......
