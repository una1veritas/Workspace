
stm32f4-usart_test.elf:     file format elf32-littlearm


Disassembly of section .text:

08000188 <GPIOMode>:
 */


void GPIOMode(uint32_t periph, GPIO_TypeDef * port, uint16_t pins,
		GPIOMode_TypeDef mode, GPIOSpeed_TypeDef clk, GPIOOType_TypeDef otype,
		GPIOPuPd_TypeDef pupd) {
 8000188:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800018a:	460c      	mov	r4, r1

	GPIO_InitTypeDef GPIO_InitStructure;

	// wake up the port
	RCC_AHB1PeriphClockCmd(periph, ENABLE);
 800018c:	2101      	movs	r1, #1
 */


void GPIOMode(uint32_t periph, GPIO_TypeDef * port, uint16_t pins,
		GPIOMode_TypeDef mode, GPIOSpeed_TypeDef clk, GPIOOType_TypeDef otype,
		GPIOPuPd_TypeDef pupd) {
 800018e:	461e      	mov	r6, r3
 8000190:	4615      	mov	r5, r2

	GPIO_InitTypeDef GPIO_InitStructure;

	// wake up the port
	RCC_AHB1PeriphClockCmd(periph, ENABLE);
 8000192:	f000 fa59 	bl	8000648 <RCC_AHB1PeriphClockCmd>
	//
	GPIO_InitStructure.GPIO_Pin = pins;
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = otype;
 8000196:	f89d 301c 	ldrb.w	r3, [sp, #28]
	GPIO_InitTypeDef GPIO_InitStructure;

	// wake up the port
	RCC_AHB1PeriphClockCmd(periph, ENABLE);
	//
	GPIO_InitStructure.GPIO_Pin = pins;
 800019a:	9500      	str	r5, [sp, #0]
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = otype;
 800019c:	f88d 3006 	strb.w	r3, [sp, #6]
	GPIO_InitStructure.GPIO_PuPd = pupd;
 80001a0:	f89d 3020 	ldrb.w	r3, [sp, #32]

	// wake up the port
	RCC_AHB1PeriphClockCmd(periph, ENABLE);
	//
	GPIO_InitStructure.GPIO_Pin = pins;
	GPIO_InitStructure.GPIO_Mode = mode;
 80001a4:	f88d 6004 	strb.w	r6, [sp, #4]
	GPIO_InitStructure.GPIO_OType = otype;
	GPIO_InitStructure.GPIO_PuPd = pupd;
 80001a8:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_InitStructure.GPIO_Speed = clk;
 80001ac:	f89d 3018 	ldrb.w	r3, [sp, #24]
	//
	GPIO_Init(port, &GPIO_InitStructure);
 80001b0:	4620      	mov	r0, r4
 80001b2:	4669      	mov	r1, sp
	//
	GPIO_InitStructure.GPIO_Pin = pins;
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = otype;
	GPIO_InitStructure.GPIO_PuPd = pupd;
	GPIO_InitStructure.GPIO_Speed = clk;
 80001b4:	f88d 3005 	strb.w	r3, [sp, #5]
	//
	GPIO_Init(port, &GPIO_InitStructure);
 80001b8:	f000 f888 	bl	80002cc <GPIO_Init>
}
 80001bc:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

080001be <digitalWrite>:
/*
 static void turnOffPWM(uint8_t timer) {
 }
 */
void digitalWrite(GPIO_TypeDef * port, uint16_t pins, uint8_t val) {
	if (val) {
 80001be:	b10a      	cbz	r2, 80001c4 <digitalWrite+0x6>
		//? Bit_SET : Bit_RESET ));
		GPIO_SetBits(port, pins);
 80001c0:	f000 b8f5 	b.w	80003ae <GPIO_SetBits>
	} else {
		GPIO_ResetBits(port, pins);
 80001c4:	f000 b8f5 	b.w	80003b2 <GPIO_ResetBits>

080001c8 <portWrite>:
	}
}

void portWrite(GPIO_TypeDef * port, uint16_t bits) {
	GPIO_Write(port, bits);
 80001c8:	f000 b8fa 	b.w	80003c0 <GPIO_Write>

080001cc <digitalRead>:
}

uint8_t digitalRead(GPIO_TypeDef * port, uint16_t pin) {
	uint8_t mode = (port->MODER) >> (pin * 2);
 80001cc:	6802      	ldr	r2, [r0, #0]

void portWrite(GPIO_TypeDef * port, uint16_t bits) {
	GPIO_Write(port, bits);
}

uint8_t digitalRead(GPIO_TypeDef * port, uint16_t pin) {
 80001ce:	b508      	push	{r3, lr}
	uint8_t mode = (port->MODER) >> (pin * 2);
 80001d0:	004b      	lsls	r3, r1, #1
 80001d2:	fa32 f303 	lsrs.w	r3, r2, r3
	if (mode == GPIO_Mode_OUT)
 80001d6:	b2db      	uxtb	r3, r3
 80001d8:	2b01      	cmp	r3, #1
 80001da:	d105      	bne.n	80001e8 <digitalRead+0x1c>
		return (GPIO_ReadOutputDataBit(port, pin) ? SET : RESET);
 80001dc:	f000 f8de 	bl	800039c <GPIO_ReadOutputDataBit>
 80001e0:	3000      	adds	r0, #0
 80001e2:	bf18      	it	ne
 80001e4:	2001      	movne	r0, #1
 80001e6:	bd08      	pop	{r3, pc}
	return (GPIO_ReadInputDataBit(port, pin) ? SET : RESET);
 80001e8:	f000 f8cf 	bl	800038a <GPIO_ReadInputDataBit>
 80001ec:	3000      	adds	r0, #0
 80001ee:	bf18      	it	ne
 80001f0:	2001      	movne	r0, #1
}
 80001f2:	bd08      	pop	{r3, pc}

080001f4 <GPIO_DeInit>:
  * @note   By default, The GPIO pins are configured in input floating mode (except JTAG pins).
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 80001f4:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
 80001f6:	4b2c      	ldr	r3, [pc, #176]	; (80002a8 <GPIO_DeInit+0xb4>)
 80001f8:	4298      	cmp	r0, r3
 80001fa:	d105      	bne.n	8000208 <GPIO_DeInit+0x14>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 80001fc:	2001      	movs	r0, #1
 80001fe:	4601      	mov	r1, r0
 8000200:	f000 fa5e 	bl	80006c0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 8000204:	2001      	movs	r0, #1
 8000206:	e048      	b.n	800029a <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOB)
 8000208:	4b28      	ldr	r3, [pc, #160]	; (80002ac <GPIO_DeInit+0xb8>)
 800020a:	4298      	cmp	r0, r3
 800020c:	d105      	bne.n	800021a <GPIO_DeInit+0x26>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 800020e:	2002      	movs	r0, #2
 8000210:	2101      	movs	r1, #1
 8000212:	f000 fa55 	bl	80006c0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 8000216:	2002      	movs	r0, #2
 8000218:	e03f      	b.n	800029a <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOC)
 800021a:	4b25      	ldr	r3, [pc, #148]	; (80002b0 <GPIO_DeInit+0xbc>)
 800021c:	4298      	cmp	r0, r3
 800021e:	d105      	bne.n	800022c <GPIO_DeInit+0x38>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8000220:	2004      	movs	r0, #4
 8000222:	2101      	movs	r1, #1
 8000224:	f000 fa4c 	bl	80006c0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 8000228:	2004      	movs	r0, #4
 800022a:	e036      	b.n	800029a <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOD)
 800022c:	4b21      	ldr	r3, [pc, #132]	; (80002b4 <GPIO_DeInit+0xc0>)
 800022e:	4298      	cmp	r0, r3
 8000230:	d105      	bne.n	800023e <GPIO_DeInit+0x4a>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8000232:	2008      	movs	r0, #8
 8000234:	2101      	movs	r1, #1
 8000236:	f000 fa43 	bl	80006c0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 800023a:	2008      	movs	r0, #8
 800023c:	e02d      	b.n	800029a <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOE)
 800023e:	4b1e      	ldr	r3, [pc, #120]	; (80002b8 <GPIO_DeInit+0xc4>)
 8000240:	4298      	cmp	r0, r3
 8000242:	d105      	bne.n	8000250 <GPIO_DeInit+0x5c>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 8000244:	2010      	movs	r0, #16
 8000246:	2101      	movs	r1, #1
 8000248:	f000 fa3a 	bl	80006c0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 800024c:	2010      	movs	r0, #16
 800024e:	e024      	b.n	800029a <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOF)
 8000250:	4b1a      	ldr	r3, [pc, #104]	; (80002bc <GPIO_DeInit+0xc8>)
 8000252:	4298      	cmp	r0, r3
 8000254:	d105      	bne.n	8000262 <GPIO_DeInit+0x6e>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 8000256:	2020      	movs	r0, #32
 8000258:	2101      	movs	r1, #1
 800025a:	f000 fa31 	bl	80006c0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 800025e:	2020      	movs	r0, #32
 8000260:	e01b      	b.n	800029a <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOG)
 8000262:	4b17      	ldr	r3, [pc, #92]	; (80002c0 <GPIO_DeInit+0xcc>)
 8000264:	4298      	cmp	r0, r3
 8000266:	d105      	bne.n	8000274 <GPIO_DeInit+0x80>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 8000268:	2040      	movs	r0, #64	; 0x40
 800026a:	2101      	movs	r1, #1
 800026c:	f000 fa28 	bl	80006c0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 8000270:	2040      	movs	r0, #64	; 0x40
 8000272:	e012      	b.n	800029a <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOH)
 8000274:	4b13      	ldr	r3, [pc, #76]	; (80002c4 <GPIO_DeInit+0xd0>)
 8000276:	4298      	cmp	r0, r3
 8000278:	d105      	bne.n	8000286 <GPIO_DeInit+0x92>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 800027a:	2080      	movs	r0, #128	; 0x80
 800027c:	2101      	movs	r1, #1
 800027e:	f000 fa1f 	bl	80006c0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 8000282:	2080      	movs	r0, #128	; 0x80
 8000284:	e009      	b.n	800029a <GPIO_DeInit+0xa6>
  }
  else
  {
    if (GPIOx == GPIOI)
 8000286:	4b10      	ldr	r3, [pc, #64]	; (80002c8 <GPIO_DeInit+0xd4>)
 8000288:	4298      	cmp	r0, r3
 800028a:	d10b      	bne.n	80002a4 <GPIO_DeInit+0xb0>
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 800028c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000290:	2101      	movs	r1, #1
 8000292:	f000 fa15 	bl	80006c0 <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 8000296:	f44f 7080 	mov.w	r0, #256	; 0x100
 800029a:	2100      	movs	r1, #0
    }
  }
}
 800029c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (GPIOx == GPIOI)
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 80002a0:	f000 ba0e 	b.w	80006c0 <RCC_AHB1PeriphResetCmd>
 80002a4:	bd08      	pop	{r3, pc}
 80002a6:	bf00      	nop
 80002a8:	40020000 	.word	0x40020000
 80002ac:	40020400 	.word	0x40020400
 80002b0:	40020800 	.word	0x40020800
 80002b4:	40020c00 	.word	0x40020c00
 80002b8:	40021000 	.word	0x40021000
 80002bc:	40021400 	.word	0x40021400
 80002c0:	40021800 	.word	0x40021800
 80002c4:	40021c00 	.word	0x40021c00
 80002c8:	40022000 	.word	0x40022000

080002cc <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80002cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
  {
    pos = ((uint32_t)0x01) << pinpos;
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80002d0:	2300      	movs	r3, #0
 80002d2:	f8d1 8000 	ldr.w	r8, [r1]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80002d6:	461a      	mov	r2, r3
  {
    pos = ((uint32_t)0x01) << pinpos;
 80002d8:	f04f 0c01 	mov.w	ip, #1
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80002dc:	2703      	movs	r7, #3

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
  {
    pos = ((uint32_t)0x01) << pinpos;
 80002de:	fa0c f402 	lsl.w	r4, ip, r2
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80002e2:	ea04 0508 	and.w	r5, r4, r8

    if (currentpin == pos)
 80002e6:	42a5      	cmp	r5, r4
 80002e8:	d12e      	bne.n	8000348 <GPIO_Init+0x7c>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80002ea:	6806      	ldr	r6, [r0, #0]
 80002ec:	fa17 f403 	lsls.w	r4, r7, r3
 80002f0:	43e4      	mvns	r4, r4
 80002f2:	4026      	ands	r6, r4
 80002f4:	6006      	str	r6, [r0, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80002f6:	790e      	ldrb	r6, [r1, #4]
 80002f8:	f8d0 9000 	ldr.w	r9, [r0]
 80002fc:	fa06 fa03 	lsl.w	sl, r6, r3

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000300:	3e01      	subs	r6, #1
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000302:	ea4a 0909 	orr.w	r9, sl, r9

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000306:	2e01      	cmp	r6, #1
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000308:	f8c0 9000 	str.w	r9, [r0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800030c:	d814      	bhi.n	8000338 <GPIO_Init+0x6c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800030e:	6886      	ldr	r6, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000310:	f891 9005 	ldrb.w	r9, [r1, #5]
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000314:	4026      	ands	r6, r4
 8000316:	6086      	str	r6, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000318:	6886      	ldr	r6, [r0, #8]
 800031a:	fa09 f903 	lsl.w	r9, r9, r3
 800031e:	ea49 0606 	orr.w	r6, r9, r6
 8000322:	6086      	str	r6, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000324:	6846      	ldr	r6, [r0, #4]
 8000326:	ea26 0505 	bic.w	r5, r6, r5
 800032a:	6045      	str	r5, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800032c:	798d      	ldrb	r5, [r1, #6]
 800032e:	6846      	ldr	r6, [r0, #4]
 8000330:	4095      	lsls	r5, r2
 8000332:	b2ad      	uxth	r5, r5
 8000334:	4335      	orrs	r5, r6
 8000336:	6045      	str	r5, [r0, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000338:	68c5      	ldr	r5, [r0, #12]
 800033a:	402c      	ands	r4, r5
 800033c:	60c4      	str	r4, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800033e:	79cc      	ldrb	r4, [r1, #7]
 8000340:	68c5      	ldr	r5, [r0, #12]
 8000342:	409c      	lsls	r4, r3
 8000344:	432c      	orrs	r4, r5
 8000346:	60c4      	str	r4, [r0, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000348:	3201      	adds	r2, #1
 800034a:	3302      	adds	r3, #2
 800034c:	2a10      	cmp	r2, #16
 800034e:	d1c6      	bne.n	80002de <GPIO_Init+0x12>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8000350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08000354 <GPIO_StructInit>:
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8000354:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000358:	6003      	str	r3, [r0, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 800035a:	2300      	movs	r3, #0
 800035c:	7103      	strb	r3, [r0, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 800035e:	7143      	strb	r3, [r0, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 8000360:	7183      	strb	r3, [r0, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000362:	71c3      	strb	r3, [r0, #7]
}
 8000364:	4770      	bx	lr

08000366 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000366:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0x00010000;
 8000368:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800036c:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
 800036e:	9b01      	ldr	r3, [sp, #4]
 8000370:	430b      	orrs	r3, r1
 8000372:	9301      	str	r3, [sp, #4]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8000374:	9b01      	ldr	r3, [sp, #4]
 8000376:	61c3      	str	r3, [r0, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 8000378:	61c1      	str	r1, [r0, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 800037a:	9b01      	ldr	r3, [sp, #4]
 800037c:	61c3      	str	r3, [r0, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 800037e:	69c3      	ldr	r3, [r0, #28]
 8000380:	9301      	str	r3, [sp, #4]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8000382:	69c3      	ldr	r3, [r0, #28]
 8000384:	9301      	str	r3, [sp, #4]
}
 8000386:	b002      	add	sp, #8
 8000388:	4770      	bx	lr

0800038a <GPIO_ReadInputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 800038a:	6903      	ldr	r3, [r0, #16]
  {
    bitstatus = (uint8_t)Bit_SET;
 800038c:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 800038e:	bf0c      	ite	eq
 8000390:	2000      	moveq	r0, #0
 8000392:	2001      	movne	r0, #1
 8000394:	4770      	bx	lr

08000396 <GPIO_ReadInputData>:
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 8000396:	6900      	ldr	r0, [r0, #16]
}
 8000398:	b280      	uxth	r0, r0
 800039a:	4770      	bx	lr

0800039c <GPIO_ReadOutputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 800039c:	6943      	ldr	r3, [r0, #20]
  {
    bitstatus = (uint8_t)Bit_SET;
 800039e:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 80003a0:	bf0c      	ite	eq
 80003a2:	2000      	moveq	r0, #0
 80003a4:	2001      	movne	r0, #1
 80003a6:	4770      	bx	lr

080003a8 <GPIO_ReadOutputData>:
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
 80003a8:	6940      	ldr	r0, [r0, #20]
}
 80003aa:	b280      	uxth	r0, r0
 80003ac:	4770      	bx	lr

080003ae <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 80003ae:	8301      	strh	r1, [r0, #24]
}
 80003b0:	4770      	bx	lr

080003b2 <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 80003b2:	8341      	strh	r1, [r0, #26]
}
 80003b4:	4770      	bx	lr

080003b6 <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 80003b6:	b10a      	cbz	r2, 80003bc <GPIO_WriteBit+0x6>
  {
    GPIOx->BSRRL = GPIO_Pin;
 80003b8:	8301      	strh	r1, [r0, #24]
 80003ba:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 80003bc:	8341      	strh	r1, [r0, #26]
 80003be:	4770      	bx	lr

080003c0 <GPIO_Write>:
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 80003c0:	6141      	str	r1, [r0, #20]
}
 80003c2:	4770      	bx	lr

080003c4 <GPIO_ToggleBits>:
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 80003c4:	6943      	ldr	r3, [r0, #20]
 80003c6:	404b      	eors	r3, r1
 80003c8:	6143      	str	r3, [r0, #20]
}
 80003ca:	4770      	bx	lr

080003cc <GPIO_PinAFConfig>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80003cc:	f001 0307 	and.w	r3, r1, #7
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80003d0:	08c9      	lsrs	r1, r1, #3
 80003d2:	3108      	adds	r1, #8
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80003d4:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80003d6:	009b      	lsls	r3, r3, #2
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80003d8:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
 80003dc:	240f      	movs	r4, #15
 80003de:	409c      	lsls	r4, r3
 80003e0:	ea25 0404 	bic.w	r4, r5, r4
 80003e4:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80003e8:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80003ec:	fa12 f303 	lsls.w	r3, r2, r3
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80003f0:	431c      	orrs	r4, r3
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80003f2:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
}
 80003f6:	bd30      	pop	{r4, r5, pc}

080003f8 <RCC_DeInit>:
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80003f8:	4b0a      	ldr	r3, [pc, #40]	; (8000424 <RCC_DeInit+0x2c>)
 80003fa:	681a      	ldr	r2, [r3, #0]
 80003fc:	f042 0201 	orr.w	r2, r2, #1
 8000400:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000402:	2200      	movs	r2, #0
 8000404:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000406:	6819      	ldr	r1, [r3, #0]
 8000408:	f021 7184 	bic.w	r1, r1, #17301504	; 0x1080000
 800040c:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8000410:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000412:	4905      	ldr	r1, [pc, #20]	; (8000428 <RCC_DeInit+0x30>)
 8000414:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000416:	6819      	ldr	r1, [r3, #0]
 8000418:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800041c:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800041e:	60da      	str	r2, [r3, #12]
}
 8000420:	4770      	bx	lr
 8000422:	bf00      	nop
 8000424:	40023800 	.word	0x40023800
 8000428:	24003010 	.word	0x24003010

0800042c <RCC_HSEConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 800042c:	4b02      	ldr	r3, [pc, #8]	; (8000438 <RCC_HSEConfig+0xc>)
 800042e:	2200      	movs	r2, #0
 8000430:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 8000432:	7018      	strb	r0, [r3, #0]
}
 8000434:	4770      	bx	lr
 8000436:	bf00      	nop
 8000438:	40023802 	.word	0x40023802

0800043c <RCC_AdjustHSICalibrationValue>:
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
 800043c:	4b03      	ldr	r3, [pc, #12]	; (800044c <RCC_AdjustHSICalibrationValue+0x10>)
 800043e:	681a      	ldr	r2, [r3, #0]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 8000440:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 8000444:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3

  /* Store the new value */
  RCC->CR = tmpreg;
 8000448:	601a      	str	r2, [r3, #0]
}
 800044a:	4770      	bx	lr
 800044c:	40023800 	.word	0x40023800

08000450 <RCC_HSICmd>:
void RCC_HSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 8000450:	4b01      	ldr	r3, [pc, #4]	; (8000458 <RCC_HSICmd+0x8>)
 8000452:	6018      	str	r0, [r3, #0]
}
 8000454:	4770      	bx	lr
 8000456:	bf00      	nop
 8000458:	42470000 	.word	0x42470000

0800045c <RCC_LSEConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 800045c:	4b06      	ldr	r3, [pc, #24]	; (8000478 <RCC_LSEConfig+0x1c>)
 800045e:	2200      	movs	r2, #0

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 8000460:	2801      	cmp	r0, #1
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8000462:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8000464:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 8000466:	d002      	beq.n	800046e <RCC_LSEConfig+0x12>
 8000468:	2804      	cmp	r0, #4
 800046a:	d104      	bne.n	8000476 <RCC_LSEConfig+0x1a>
 800046c:	e001      	b.n	8000472 <RCC_LSEConfig+0x16>
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 800046e:	7018      	strb	r0, [r3, #0]
      break;
 8000470:	4770      	bx	lr
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 8000472:	2205      	movs	r2, #5
 8000474:	701a      	strb	r2, [r3, #0]
 8000476:	4770      	bx	lr
 8000478:	40023870 	.word	0x40023870

0800047c <RCC_LSICmd>:
void RCC_LSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 800047c:	4b01      	ldr	r3, [pc, #4]	; (8000484 <RCC_LSICmd+0x8>)
 800047e:	6018      	str	r0, [r3, #0]
}
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop
 8000484:	42470e80 	.word	0x42470e80

08000488 <RCC_PLLConfig>:
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 8000488:	4301      	orrs	r1, r0
 800048a:	ea41 1282 	orr.w	r2, r1, r2, lsl #6
 800048e:	9900      	ldr	r1, [sp, #0]
 8000490:	085b      	lsrs	r3, r3, #1
 8000492:	3b01      	subs	r3, #1
 8000494:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	4b01      	ldr	r3, [pc, #4]	; (80004a4 <RCC_PLLConfig+0x1c>)
 800049e:	6059      	str	r1, [r3, #4]
                 (PLLQ << 24);
}
 80004a0:	4770      	bx	lr
 80004a2:	bf00      	nop
 80004a4:	40023800 	.word	0x40023800

080004a8 <RCC_PLLCmd>:
  */
void RCC_PLLCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 80004a8:	4b01      	ldr	r3, [pc, #4]	; (80004b0 <RCC_PLLCmd+0x8>)
 80004aa:	6018      	str	r0, [r3, #0]
}
 80004ac:	4770      	bx	lr
 80004ae:	bf00      	nop
 80004b0:	42470060 	.word	0x42470060

080004b4 <RCC_PLLI2SConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
 80004b4:	0180      	lsls	r0, r0, #6
 80004b6:	4b03      	ldr	r3, [pc, #12]	; (80004c4 <RCC_PLLI2SConfig+0x10>)
 80004b8:	ea40 7101 	orr.w	r1, r0, r1, lsl #28
 80004bc:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
}
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop
 80004c4:	40023800 	.word	0x40023800

080004c8 <RCC_PLLI2SCmd>:
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 80004c8:	4b01      	ldr	r3, [pc, #4]	; (80004d0 <RCC_PLLI2SCmd+0x8>)
 80004ca:	6018      	str	r0, [r3, #0]
}
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop
 80004d0:	42470068 	.word	0x42470068

080004d4 <RCC_ClockSecuritySystemCmd>:
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 80004d4:	4b01      	ldr	r3, [pc, #4]	; (80004dc <RCC_ClockSecuritySystemCmd+0x8>)
 80004d6:	6018      	str	r0, [r3, #0]
}
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop
 80004dc:	4247004c 	.word	0x4247004c

080004e0 <RCC_MCO1Config>:
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
 80004e0:	4b03      	ldr	r3, [pc, #12]	; (80004f0 <RCC_MCO1Config+0x10>)
 80004e2:	689a      	ldr	r2, [r3, #8]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
 80004e4:	f022 62ec 	bic.w	r2, r2, #123731968	; 0x7600000

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 80004e8:	4302      	orrs	r2, r0
 80004ea:	430a      	orrs	r2, r1

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 80004ec:	609a      	str	r2, [r3, #8]
}
 80004ee:	4770      	bx	lr
 80004f0:	40023800 	.word	0x40023800

080004f4 <RCC_MCO2Config>:
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
 80004f4:	4b03      	ldr	r3, [pc, #12]	; (8000504 <RCC_MCO2Config+0x10>)
 80004f6:	689a      	ldr	r2, [r3, #8]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
 80004f8:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 80004fc:	4302      	orrs	r2, r0
 80004fe:	430a      	orrs	r2, r1

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 8000500:	609a      	str	r2, [r3, #8]
}
 8000502:	4770      	bx	lr
 8000504:	40023800 	.word	0x40023800

08000508 <RCC_SYSCLKConfig>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 8000508:	4b03      	ldr	r3, [pc, #12]	; (8000518 <RCC_SYSCLKConfig+0x10>)
 800050a:	689a      	ldr	r2, [r3, #8]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 800050c:	f022 0203 	bic.w	r2, r2, #3

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8000510:	4302      	orrs	r2, r0

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000512:	609a      	str	r2, [r3, #8]
}
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop
 8000518:	40023800 	.word	0x40023800

0800051c <RCC_GetSYSCLKSource>:
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 800051c:	4b02      	ldr	r3, [pc, #8]	; (8000528 <RCC_GetSYSCLKSource+0xc>)
 800051e:	6898      	ldr	r0, [r3, #8]
}
 8000520:	f000 000c 	and.w	r0, r0, #12
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop
 8000528:	40023800 	.word	0x40023800

0800052c <RCC_HCLKConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 800052c:	4b03      	ldr	r3, [pc, #12]	; (800053c <RCC_HCLKConfig+0x10>)
 800052e:	689a      	ldr	r2, [r3, #8]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 8000530:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8000534:	4302      	orrs	r2, r0

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000536:	609a      	str	r2, [r3, #8]
}
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	40023800 	.word	0x40023800

08000540 <RCC_PCLK1Config>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8000540:	4b03      	ldr	r3, [pc, #12]	; (8000550 <RCC_PCLK1Config+0x10>)
 8000542:	689a      	ldr	r2, [r3, #8]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 8000544:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8000548:	4302      	orrs	r2, r0

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800054a:	609a      	str	r2, [r3, #8]
}
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	40023800 	.word	0x40023800

08000554 <RCC_PCLK2Config>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8000554:	4b03      	ldr	r3, [pc, #12]	; (8000564 <RCC_PCLK2Config+0x10>)
 8000556:	689a      	ldr	r2, [r3, #8]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 8000558:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 800055c:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000560:	609a      	str	r2, [r3, #8]
}
 8000562:	4770      	bx	lr
 8000564:	40023800 	.word	0x40023800

08000568 <RCC_GetClocksFreq>:
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000568:	4b1e      	ldr	r3, [pc, #120]	; (80005e4 <RCC_GetClocksFreq+0x7c>)
 800056a:	689a      	ldr	r2, [r3, #8]
 800056c:	f002 020c 	and.w	r2, r2, #12

  switch (tmp)
 8000570:	2a04      	cmp	r2, #4
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000572:	b510      	push	{r4, lr}
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;

  switch (tmp)
 8000574:	d003      	beq.n	800057e <RCC_GetClocksFreq+0x16>
 8000576:	2a08      	cmp	r2, #8
 8000578:	d003      	beq.n	8000582 <RCC_GetClocksFreq+0x1a>
 800057a:	4b1b      	ldr	r3, [pc, #108]	; (80005e8 <RCC_GetClocksFreq+0x80>)
 800057c:	e018      	b.n	80005b0 <RCC_GetClocksFreq+0x48>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 800057e:	4b1b      	ldr	r3, [pc, #108]	; (80005ec <RCC_GetClocksFreq+0x84>)
 8000580:	e016      	b.n	80005b0 <RCC_GetClocksFreq+0x48>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000582:	6859      	ldr	r1, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000584:	685a      	ldr	r2, [r3, #4]
      
      if (pllsource != 0)
 8000586:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800058a:	6859      	ldr	r1, [r3, #4]
 800058c:	bf14      	ite	ne
 800058e:	4b17      	ldrne	r3, [pc, #92]	; (80005ec <RCC_GetClocksFreq+0x84>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000590:	4b15      	ldreq	r3, [pc, #84]	; (80005e8 <RCC_GetClocksFreq+0x80>)

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000592:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000596:	fbb3 f3f2 	udiv	r3, r3, r2
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800059a:	4a12      	ldr	r2, [pc, #72]	; (80005e4 <RCC_GetClocksFreq+0x7c>)
 800059c:	6852      	ldr	r2, [r2, #4]
 800059e:	f3c2 4201 	ubfx	r2, r2, #16, #2
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80005a2:	f3c1 1188 	ubfx	r1, r1, #6, #9
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80005a6:	3201      	adds	r2, #1
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80005a8:	434b      	muls	r3, r1
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80005aa:	0052      	lsls	r2, r2, #1
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 80005ac:	fbb3 f3f2 	udiv	r3, r3, r2
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80005b0:	490c      	ldr	r1, [pc, #48]	; (80005e4 <RCC_GetClocksFreq+0x7c>)
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 80005b2:	6003      	str	r3, [r0, #0]
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80005b4:	688b      	ldr	r3, [r1, #8]
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];
 80005b6:	4a0e      	ldr	r2, [pc, #56]	; (80005f0 <RCC_GetClocksFreq+0x88>)
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80005b8:	6804      	ldr	r4, [r0, #0]
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
  tmp = tmp >> 4;
 80005ba:	f3c3 1303 	ubfx	r3, r3, #4, #4
  presc = APBAHBPrescTable[tmp];
 80005be:	5cd3      	ldrb	r3, [r2, r3]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80005c0:	fa34 f303 	lsrs.w	r3, r4, r3
 80005c4:	6043      	str	r3, [r0, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80005c6:	688c      	ldr	r4, [r1, #8]
  tmp = tmp >> 10;
 80005c8:	f3c4 2482 	ubfx	r4, r4, #10, #3
  presc = APBAHBPrescTable[tmp];
 80005cc:	5d14      	ldrb	r4, [r2, r4]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80005ce:	fa33 f404 	lsrs.w	r4, r3, r4
 80005d2:	6084      	str	r4, [r0, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 80005d4:	6889      	ldr	r1, [r1, #8]
  tmp = tmp >> 13;
 80005d6:	f3c1 3142 	ubfx	r1, r1, #13, #3
  presc = APBAHBPrescTable[tmp];
 80005da:	5c52      	ldrb	r2, [r2, r1]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80005dc:	40d3      	lsrs	r3, r2
 80005de:	60c3      	str	r3, [r0, #12]
}
 80005e0:	bd10      	pop	{r4, pc}
 80005e2:	bf00      	nop
 80005e4:	40023800 	.word	0x40023800
 80005e8:	00f42400 	.word	0x00f42400
 80005ec:	007a1200 	.word	0x007a1200
 80005f0:	20000000 	.word	0x20000000

080005f4 <RCC_RTCCLKConfig>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 80005f4:	f400 7340 	and.w	r3, r0, #768	; 0x300
 80005f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80005fc:	4b08      	ldr	r3, [pc, #32]	; (8000620 <RCC_RTCCLKConfig+0x2c>)
 80005fe:	d108      	bne.n	8000612 <RCC_RTCCLKConfig+0x1e>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 8000600:	6899      	ldr	r1, [r3, #8]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8000602:	f020 4270 	bic.w	r2, r0, #4026531840	; 0xf0000000
  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
 8000606:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 800060a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800060e:	430a      	orrs	r2, r1

    /* Store the new value */
    RCC->CFGR = tmpreg;
 8000610:	609a      	str	r2, [r3, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 8000612:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000614:	0500      	lsls	r0, r0, #20
 8000616:	ea42 5010 	orr.w	r0, r2, r0, lsr #20
 800061a:	6718      	str	r0, [r3, #112]	; 0x70
}
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	40023800 	.word	0x40023800

08000624 <RCC_RTCCLKCmd>:
void RCC_RTCCLKCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 8000624:	4b01      	ldr	r3, [pc, #4]	; (800062c <RCC_RTCCLKCmd+0x8>)
 8000626:	6018      	str	r0, [r3, #0]
}
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	42470e3c 	.word	0x42470e3c

08000630 <RCC_BackupResetCmd>:
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 8000630:	4b01      	ldr	r3, [pc, #4]	; (8000638 <RCC_BackupResetCmd+0x8>)
 8000632:	6018      	str	r0, [r3, #0]
}
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	42470e40 	.word	0x42470e40

0800063c <RCC_I2SCLKConfig>:
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 800063c:	4b01      	ldr	r3, [pc, #4]	; (8000644 <RCC_I2SCLKConfig+0x8>)
 800063e:	6018      	str	r0, [r3, #0]
}
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	4247015c 	.word	0x4247015c

08000648 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000648:	4b04      	ldr	r3, [pc, #16]	; (800065c <RCC_AHB1PeriphClockCmd+0x14>)
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800064a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800064c:	b109      	cbz	r1, 8000652 <RCC_AHB1PeriphClockCmd+0xa>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800064e:	4310      	orrs	r0, r2
 8000650:	e001      	b.n	8000656 <RCC_AHB1PeriphClockCmd+0xe>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000652:	ea22 0000 	bic.w	r0, r2, r0
 8000656:	6318      	str	r0, [r3, #48]	; 0x30
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	40023800 	.word	0x40023800

08000660 <RCC_AHB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 8000660:	4b04      	ldr	r3, [pc, #16]	; (8000674 <RCC_AHB2PeriphClockCmd+0x14>)
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 8000662:	6b5a      	ldr	r2, [r3, #52]	; 0x34
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000664:	b109      	cbz	r1, 800066a <RCC_AHB2PeriphClockCmd+0xa>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 8000666:	4310      	orrs	r0, r2
 8000668:	e001      	b.n	800066e <RCC_AHB2PeriphClockCmd+0xe>
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
 800066a:	ea22 0000 	bic.w	r0, r2, r0
 800066e:	6358      	str	r0, [r3, #52]	; 0x34
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	40023800 	.word	0x40023800

08000678 <RCC_AHB3PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 8000678:	4b04      	ldr	r3, [pc, #16]	; (800068c <RCC_AHB3PeriphClockCmd+0x14>)
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 800067a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800067c:	b109      	cbz	r1, 8000682 <RCC_AHB3PeriphClockCmd+0xa>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 800067e:	4310      	orrs	r0, r2
 8000680:	e001      	b.n	8000686 <RCC_AHB3PeriphClockCmd+0xe>
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
 8000682:	ea22 0000 	bic.w	r0, r2, r0
 8000686:	6398      	str	r0, [r3, #56]	; 0x38
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	40023800 	.word	0x40023800

08000690 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000690:	4b04      	ldr	r3, [pc, #16]	; (80006a4 <RCC_APB1PeriphClockCmd+0x14>)
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000692:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000694:	b109      	cbz	r1, 800069a <RCC_APB1PeriphClockCmd+0xa>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000696:	4310      	orrs	r0, r2
 8000698:	e001      	b.n	800069e <RCC_APB1PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 800069a:	ea22 0000 	bic.w	r0, r2, r0
 800069e:	6418      	str	r0, [r3, #64]	; 0x40
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	40023800 	.word	0x40023800

080006a8 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80006a8:	4b04      	ldr	r3, [pc, #16]	; (80006bc <RCC_APB2PeriphClockCmd+0x14>)
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80006aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80006ac:	b109      	cbz	r1, 80006b2 <RCC_APB2PeriphClockCmd+0xa>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80006ae:	4310      	orrs	r0, r2
 80006b0:	e001      	b.n	80006b6 <RCC_APB2PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80006b2:	ea22 0000 	bic.w	r0, r2, r0
 80006b6:	6458      	str	r0, [r3, #68]	; 0x44
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	40023800 	.word	0x40023800

080006c0 <RCC_AHB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80006c0:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <RCC_AHB1PeriphResetCmd+0x14>)
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 80006c2:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80006c4:	b109      	cbz	r1, 80006ca <RCC_AHB1PeriphResetCmd+0xa>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 80006c6:	4310      	orrs	r0, r2
 80006c8:	e001      	b.n	80006ce <RCC_AHB1PeriphResetCmd+0xe>
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 80006ca:	ea22 0000 	bic.w	r0, r2, r0
 80006ce:	6118      	str	r0, [r3, #16]
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	40023800 	.word	0x40023800

080006d8 <RCC_AHB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 80006d8:	4b04      	ldr	r3, [pc, #16]	; (80006ec <RCC_AHB2PeriphResetCmd+0x14>)
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 80006da:	695a      	ldr	r2, [r3, #20]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80006dc:	b109      	cbz	r1, 80006e2 <RCC_AHB2PeriphResetCmd+0xa>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 80006de:	4310      	orrs	r0, r2
 80006e0:	e001      	b.n	80006e6 <RCC_AHB2PeriphResetCmd+0xe>
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 80006e2:	ea22 0000 	bic.w	r0, r2, r0
 80006e6:	6158      	str	r0, [r3, #20]
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	40023800 	.word	0x40023800

080006f0 <RCC_AHB3PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 80006f0:	4b04      	ldr	r3, [pc, #16]	; (8000704 <RCC_AHB3PeriphResetCmd+0x14>)
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 80006f2:	699a      	ldr	r2, [r3, #24]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80006f4:	b109      	cbz	r1, 80006fa <RCC_AHB3PeriphResetCmd+0xa>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 80006f6:	4310      	orrs	r0, r2
 80006f8:	e001      	b.n	80006fe <RCC_AHB3PeriphResetCmd+0xe>
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
 80006fa:	ea22 0000 	bic.w	r0, r2, r0
 80006fe:	6198      	str	r0, [r3, #24]
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	40023800 	.word	0x40023800

08000708 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000708:	4b04      	ldr	r3, [pc, #16]	; (800071c <RCC_APB1PeriphResetCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 800070a:	6a1a      	ldr	r2, [r3, #32]
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800070c:	b109      	cbz	r1, 8000712 <RCC_APB1PeriphResetCmd+0xa>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 800070e:	4310      	orrs	r0, r2
 8000710:	e001      	b.n	8000716 <RCC_APB1PeriphResetCmd+0xe>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8000712:	ea22 0000 	bic.w	r0, r2, r0
 8000716:	6218      	str	r0, [r3, #32]
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	40023800 	.word	0x40023800

08000720 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000720:	4b04      	ldr	r3, [pc, #16]	; (8000734 <RCC_APB2PeriphResetCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8000722:	6a5a      	ldr	r2, [r3, #36]	; 0x24
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000724:	b109      	cbz	r1, 800072a <RCC_APB2PeriphResetCmd+0xa>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8000726:	4310      	orrs	r0, r2
 8000728:	e001      	b.n	800072e <RCC_APB2PeriphResetCmd+0xe>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 800072a:	ea22 0000 	bic.w	r0, r2, r0
 800072e:	6258      	str	r0, [r3, #36]	; 0x24
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	40023800 	.word	0x40023800

08000738 <RCC_AHB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000738:	4b04      	ldr	r3, [pc, #16]	; (800074c <RCC_AHB1PeriphClockLPModeCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 800073a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800073c:	b109      	cbz	r1, 8000742 <RCC_AHB1PeriphClockLPModeCmd+0xa>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 800073e:	4310      	orrs	r0, r2
 8000740:	e001      	b.n	8000746 <RCC_AHB1PeriphClockLPModeCmd+0xe>
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
 8000742:	ea22 0000 	bic.w	r0, r2, r0
 8000746:	6518      	str	r0, [r3, #80]	; 0x50
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	40023800 	.word	0x40023800

08000750 <RCC_AHB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 8000750:	4b04      	ldr	r3, [pc, #16]	; (8000764 <RCC_AHB2PeriphClockLPModeCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 8000752:	6d5a      	ldr	r2, [r3, #84]	; 0x54
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000754:	b109      	cbz	r1, 800075a <RCC_AHB2PeriphClockLPModeCmd+0xa>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 8000756:	4310      	orrs	r0, r2
 8000758:	e001      	b.n	800075e <RCC_AHB2PeriphClockLPModeCmd+0xe>
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
 800075a:	ea22 0000 	bic.w	r0, r2, r0
 800075e:	6558      	str	r0, [r3, #84]	; 0x54
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	40023800 	.word	0x40023800

08000768 <RCC_AHB3PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 8000768:	4b04      	ldr	r3, [pc, #16]	; (800077c <RCC_AHB3PeriphClockLPModeCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 800076a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800076c:	b109      	cbz	r1, 8000772 <RCC_AHB3PeriphClockLPModeCmd+0xa>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 800076e:	4310      	orrs	r0, r2
 8000770:	e001      	b.n	8000776 <RCC_AHB3PeriphClockLPModeCmd+0xe>
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
 8000772:	ea22 0000 	bic.w	r0, r2, r0
 8000776:	6598      	str	r0, [r3, #88]	; 0x58
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	40023800 	.word	0x40023800

08000780 <RCC_APB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000780:	4b04      	ldr	r3, [pc, #16]	; (8000794 <RCC_APB1PeriphClockLPModeCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 8000782:	6e1a      	ldr	r2, [r3, #96]	; 0x60
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000784:	b109      	cbz	r1, 800078a <RCC_APB1PeriphClockLPModeCmd+0xa>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 8000786:	4310      	orrs	r0, r2
 8000788:	e001      	b.n	800078e <RCC_APB1PeriphClockLPModeCmd+0xe>
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
 800078a:	ea22 0000 	bic.w	r0, r2, r0
 800078e:	6618      	str	r0, [r3, #96]	; 0x60
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	40023800 	.word	0x40023800

08000798 <RCC_APB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000798:	4b04      	ldr	r3, [pc, #16]	; (80007ac <RCC_APB2PeriphClockLPModeCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 800079a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800079c:	b109      	cbz	r1, 80007a2 <RCC_APB2PeriphClockLPModeCmd+0xa>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 800079e:	4310      	orrs	r0, r2
 80007a0:	e001      	b.n	80007a6 <RCC_APB2PeriphClockLPModeCmd+0xe>
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
 80007a2:	ea22 0000 	bic.w	r0, r2, r0
 80007a6:	6658      	str	r0, [r3, #100]	; 0x64
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	40023800 	.word	0x40023800

080007b0 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
 80007b0:	4b04      	ldr	r3, [pc, #16]	; (80007c4 <RCC_ITConfig+0x14>)
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 80007b2:	781a      	ldrb	r2, [r3, #0]
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80007b4:	b109      	cbz	r1, 80007ba <RCC_ITConfig+0xa>
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 80007b6:	4310      	orrs	r0, r2
 80007b8:	e001      	b.n	80007be <RCC_ITConfig+0xe>
  }
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 80007ba:	ea22 0000 	bic.w	r0, r2, r0
 80007be:	7018      	strb	r0, [r3, #0]
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	4002380d 	.word	0x4002380d

080007c8 <RCC_GetFlagStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 80007c8:	0943      	lsrs	r3, r0, #5
  if (tmp == 1)               /* The flag to check is in CR register */
 80007ca:	2b01      	cmp	r3, #1
 80007cc:	4a07      	ldr	r2, [pc, #28]	; (80007ec <RCC_GetFlagStatus+0x24>)
 80007ce:	d101      	bne.n	80007d4 <RCC_GetFlagStatus+0xc>
  {
    statusreg = RCC->CR;
 80007d0:	6813      	ldr	r3, [r2, #0]
 80007d2:	e003      	b.n	80007dc <RCC_GetFlagStatus+0x14>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 80007d4:	2b02      	cmp	r3, #2
  {
    statusreg = RCC->BDCR;
 80007d6:	bf0c      	ite	eq
 80007d8:	6f13      	ldreq	r3, [r2, #112]	; 0x70
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 80007da:	6f53      	ldrne	r3, [r2, #116]	; 0x74
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 80007dc:	f000 001f 	and.w	r0, r0, #31
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 80007e0:	fa33 f000 	lsrs.w	r0, r3, r0
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
}
 80007e4:	f000 0001 	and.w	r0, r0, #1
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	40023800 	.word	0x40023800

080007f0 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 80007f0:	b507      	push	{r0, r1, r2, lr}
  __IO uint32_t startupcounter = 0;
 80007f2:	2300      	movs	r3, #0
 80007f4:	9301      	str	r3, [sp, #4]
  ErrorStatus status = ERROR;
  FlagStatus hsestatus = RESET;
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 80007f6:	2031      	movs	r0, #49	; 0x31
 80007f8:	f7ff ffe6 	bl	80007c8 <RCC_GetFlagStatus>
    startupcounter++;
 80007fc:	9b01      	ldr	r3, [sp, #4]
 80007fe:	3301      	adds	r3, #1
 8000800:	9301      	str	r3, [sp, #4]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 8000802:	9b01      	ldr	r3, [sp, #4]
 8000804:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000808:	d001      	beq.n	800080e <RCC_WaitForHSEStartUp+0x1e>
 800080a:	2800      	cmp	r0, #0
 800080c:	d0f3      	beq.n	80007f6 <RCC_WaitForHSEStartUp+0x6>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 800080e:	2031      	movs	r0, #49	; 0x31
 8000810:	f7ff ffda 	bl	80007c8 <RCC_GetFlagStatus>
  else
  {
    status = ERROR;
  }
  return (status);
}
 8000814:	3000      	adds	r0, #0
 8000816:	bf18      	it	ne
 8000818:	2001      	movne	r0, #1
 800081a:	bd0e      	pop	{r1, r2, r3, pc}

0800081c <RCC_ClearFlag>:
  * @retval None
  */
void RCC_ClearFlag(void)
{
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 800081c:	4b02      	ldr	r3, [pc, #8]	; (8000828 <RCC_ClearFlag+0xc>)
 800081e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8000820:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000824:	675a      	str	r2, [r3, #116]	; 0x74
}
 8000826:	4770      	bx	lr
 8000828:	40023800 	.word	0x40023800

0800082c <RCC_GetITStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 800082c:	4b03      	ldr	r3, [pc, #12]	; (800083c <RCC_GetITStatus+0x10>)
 800082e:	68db      	ldr	r3, [r3, #12]
  {
    bitstatus = SET;
 8000830:	4218      	tst	r0, r3
  {
    bitstatus = RESET;
  }
  /* Return the RCC_IT status */
  return  bitstatus;
}
 8000832:	bf0c      	ite	eq
 8000834:	2000      	moveq	r0, #0
 8000836:	2001      	movne	r0, #1
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	40023800 	.word	0x40023800

08000840 <RCC_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 8000840:	4b01      	ldr	r3, [pc, #4]	; (8000848 <RCC_ClearITPendingBit+0x8>)
 8000842:	7018      	strb	r0, [r3, #0]
}
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	4002380e 	.word	0x4002380e

0800084c <USART_DeInit>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 800084c:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 800084e:	4b23      	ldr	r3, [pc, #140]	; (80008dc <USART_DeInit+0x90>)
 8000850:	4298      	cmp	r0, r3
 8000852:	d105      	bne.n	8000860 <USART_DeInit+0x14>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 8000854:	2010      	movs	r0, #16
 8000856:	2101      	movs	r1, #1
 8000858:	f7ff ff62 	bl	8000720 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 800085c:	2010      	movs	r0, #16
 800085e:	e037      	b.n	80008d0 <USART_DeInit+0x84>
  }
  else if (USARTx == USART2)
 8000860:	4b1f      	ldr	r3, [pc, #124]	; (80008e0 <USART_DeInit+0x94>)
 8000862:	4298      	cmp	r0, r3
 8000864:	d107      	bne.n	8000876 <USART_DeInit+0x2a>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 8000866:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800086a:	2101      	movs	r1, #1
 800086c:	f7ff ff4c 	bl	8000708 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 8000870:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000874:	e009      	b.n	800088a <USART_DeInit+0x3e>
  }
  else if (USARTx == USART3)
 8000876:	4b1b      	ldr	r3, [pc, #108]	; (80008e4 <USART_DeInit+0x98>)
 8000878:	4298      	cmp	r0, r3
 800087a:	d10b      	bne.n	8000894 <USART_DeInit+0x48>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 800087c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000880:	2101      	movs	r1, #1
 8000882:	f7ff ff41 	bl	8000708 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 8000886:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800088a:	2100      	movs	r1, #0
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
    }
  }
}
 800088c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
  }
  else if (USARTx == USART3)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 8000890:	f7ff bf3a 	b.w	8000708 <RCC_APB1PeriphResetCmd>
  }    
  else if (USARTx == UART4)
 8000894:	4b14      	ldr	r3, [pc, #80]	; (80008e8 <USART_DeInit+0x9c>)
 8000896:	4298      	cmp	r0, r3
 8000898:	d107      	bne.n	80008aa <USART_DeInit+0x5e>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 800089a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800089e:	2101      	movs	r1, #1
 80008a0:	f7ff ff32 	bl	8000708 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 80008a4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80008a8:	e7ef      	b.n	800088a <USART_DeInit+0x3e>
  }
  else if (USARTx == UART5)
 80008aa:	4b10      	ldr	r3, [pc, #64]	; (80008ec <USART_DeInit+0xa0>)
 80008ac:	4298      	cmp	r0, r3
 80008ae:	d107      	bne.n	80008c0 <USART_DeInit+0x74>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 80008b0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008b4:	2101      	movs	r1, #1
 80008b6:	f7ff ff27 	bl	8000708 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 80008ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008be:	e7e4      	b.n	800088a <USART_DeInit+0x3e>
  }     
  else
  {
    if (USARTx == USART6)
 80008c0:	4b0b      	ldr	r3, [pc, #44]	; (80008f0 <USART_DeInit+0xa4>)
 80008c2:	4298      	cmp	r0, r3
 80008c4:	d109      	bne.n	80008da <USART_DeInit+0x8e>
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
 80008c6:	2020      	movs	r0, #32
 80008c8:	2101      	movs	r1, #1
 80008ca:	f7ff ff29 	bl	8000720 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 80008ce:	2020      	movs	r0, #32
 80008d0:	2100      	movs	r1, #0
    }
  }
}
 80008d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (USARTx == USART6)
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 80008d6:	f7ff bf23 	b.w	8000720 <RCC_APB2PeriphResetCmd>
 80008da:	bd08      	pop	{r3, pc}
 80008dc:	40011000 	.word	0x40011000
 80008e0:	40004400 	.word	0x40004400
 80008e4:	40004800 	.word	0x40004800
 80008e8:	40004c00 	.word	0x40004c00
 80008ec:	40005000 	.word	0x40005000
 80008f0:	40011400 	.word	0x40011400

080008f4 <USART_Init>:
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80008f4:	8a03      	ldrh	r3, [r0, #16]
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80008f6:	88ca      	ldrh	r2, [r1, #6]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80008f8:	b29b      	uxth	r3, r3

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80008fa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80008fe:	b530      	push	{r4, r5, lr}
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000900:	4313      	orrs	r3, r2
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000902:	460d      	mov	r5, r1
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000904:	8203      	strh	r3, [r0, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8000906:	8983      	ldrh	r3, [r0, #12]

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000908:	8909      	ldrh	r1, [r1, #8]
 800090a:	88aa      	ldrh	r2, [r5, #4]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 800090c:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000910:	430a      	orrs	r2, r1
 8000912:	8969      	ldrh	r1, [r5, #10]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8000914:	f023 030c 	bic.w	r3, r3, #12
 8000918:	041b      	lsls	r3, r3, #16

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800091a:	430a      	orrs	r2, r1

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 800091c:	0c1b      	lsrs	r3, r3, #16

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800091e:	b292      	uxth	r2, r2
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8000920:	4313      	orrs	r3, r2
 8000922:	8183      	strh	r3, [r0, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000924:	8a83      	ldrh	r3, [r0, #20]
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8000926:	89aa      	ldrh	r2, [r5, #12]

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000928:	b29b      	uxth	r3, r3

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 800092a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 800092e:	4313      	orrs	r3, r2
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000930:	b085      	sub	sp, #20
  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8000932:	8283      	strh	r3, [r0, #20]
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000934:	4604      	mov	r4, r0
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8000936:	4668      	mov	r0, sp
 8000938:	f7ff fe16 	bl	8000568 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 800093c:	4b1a      	ldr	r3, [pc, #104]	; (80009a8 <USART_Init+0xb4>)
 800093e:	429c      	cmp	r4, r3
 8000940:	d003      	beq.n	800094a <USART_Init+0x56>
 8000942:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000946:	429c      	cmp	r4, r3
 8000948:	d101      	bne.n	800094e <USART_Init+0x5a>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 800094a:	9b03      	ldr	r3, [sp, #12]
 800094c:	e000      	b.n	8000950 <USART_Init+0x5c>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 800094e:	9b02      	ldr	r3, [sp, #8]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000950:	89a2      	ldrh	r2, [r4, #12]
 8000952:	b212      	sxth	r2, r2
 8000954:	2a00      	cmp	r2, #0
 8000956:	f04f 0119 	mov.w	r1, #25
 800095a:	682a      	ldr	r2, [r5, #0]
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 800095c:	fb01 f103 	mul.w	r1, r1, r3
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000960:	da01      	bge.n	8000966 <USART_Init+0x72>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000962:	0052      	lsls	r2, r2, #1
 8000964:	e000      	b.n	8000968 <USART_Init+0x74>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8000966:	0092      	lsls	r2, r2, #2
  }
  tmpreg = (integerdivider / 100) << 4;
 8000968:	2364      	movs	r3, #100	; 0x64
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 800096a:	fbb1 f1f2 	udiv	r1, r1, r2
  }
  tmpreg = (integerdivider / 100) << 4;
 800096e:	fbb1 f2f3 	udiv	r2, r1, r3
 8000972:	0112      	lsls	r2, r2, #4

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000974:	0910      	lsrs	r0, r2, #4
 8000976:	fb03 1110 	mls	r1, r3, r0, r1

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800097a:	89a0      	ldrh	r0, [r4, #12]
 800097c:	b200      	sxth	r0, r0
 800097e:	2800      	cmp	r0, #0
 8000980:	da06      	bge.n	8000990 <USART_Init+0x9c>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8000982:	00c9      	lsls	r1, r1, #3
 8000984:	3132      	adds	r1, #50	; 0x32
 8000986:	fbb1 f3f3 	udiv	r3, r1, r3
 800098a:	f003 0307 	and.w	r3, r3, #7
 800098e:	e005      	b.n	800099c <USART_Init+0xa8>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8000990:	0109      	lsls	r1, r1, #4
 8000992:	3132      	adds	r1, #50	; 0x32
 8000994:	fbb1 f3f3 	udiv	r3, r1, r3
 8000998:	f003 030f 	and.w	r3, r3, #15
 800099c:	431a      	orrs	r2, r3
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 800099e:	b292      	uxth	r2, r2
 80009a0:	8122      	strh	r2, [r4, #8]
}
 80009a2:	b005      	add	sp, #20
 80009a4:	bd30      	pop	{r4, r5, pc}
 80009a6:	bf00      	nop
 80009a8:	40011000 	.word	0x40011000

080009ac <USART_StructInit>:
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 80009ac:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80009b0:	6003      	str	r3, [r0, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
  USART_InitStruct->USART_Parity = USART_Parity_No ;
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 80009b2:	220c      	movs	r2, #12
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 80009b4:	2300      	movs	r3, #0
 80009b6:	8083      	strh	r3, [r0, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 80009b8:	80c3      	strh	r3, [r0, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 80009ba:	8103      	strh	r3, [r0, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 80009bc:	8142      	strh	r2, [r0, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 80009be:	8183      	strh	r3, [r0, #12]
}
 80009c0:	4770      	bx	lr

080009c2 <USART_ClockInit>:
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 80009c2:	880b      	ldrh	r3, [r1, #0]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80009c4:	8a02      	ldrh	r2, [r0, #16]
  *         contains the configuration information for the specified  USART peripheral.
  * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 80009c6:	b510      	push	{r4, lr}
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 80009c8:	884c      	ldrh	r4, [r1, #2]
 80009ca:	4323      	orrs	r3, r4
 80009cc:	888c      	ldrh	r4, [r1, #4]
 80009ce:	88c9      	ldrh	r1, [r1, #6]
 80009d0:	4323      	orrs	r3, r4
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80009d2:	b292      	uxth	r2, r2
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 80009d4:	430b      	orrs	r3, r1
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 80009d6:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 80009da:	b29b      	uxth	r3, r3
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80009dc:	4313      	orrs	r3, r2
 80009de:	8203      	strh	r3, [r0, #16]
}
 80009e0:	bd10      	pop	{r4, pc}

080009e2 <USART_ClockStructInit>:
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 80009e2:	2300      	movs	r3, #0
 80009e4:	8003      	strh	r3, [r0, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 80009e6:	8043      	strh	r3, [r0, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 80009e8:	8083      	strh	r3, [r0, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 80009ea:	80c3      	strh	r3, [r0, #6]
}
 80009ec:	4770      	bx	lr

080009ee <USART_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 80009ee:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80009f0:	b119      	cbz	r1, 80009fa <USART_Cmd+0xc>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 80009f2:	b29b      	uxth	r3, r3
 80009f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80009f8:	e003      	b.n	8000a02 <USART_Cmd+0x14>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 80009fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80009fe:	041b      	lsls	r3, r3, #16
 8000a00:	0c1b      	lsrs	r3, r3, #16
 8000a02:	8183      	strh	r3, [r0, #12]
 8000a04:	4770      	bx	lr

08000a06 <USART_SetPrescaler>:
{ 
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= USART_GTPR_GT;
 8000a06:	8b03      	ldrh	r3, [r0, #24]
 8000a08:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000a0c:	8303      	strh	r3, [r0, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 8000a0e:	8b03      	ldrh	r3, [r0, #24]
 8000a10:	b29b      	uxth	r3, r3
 8000a12:	430b      	orrs	r3, r1
 8000a14:	8303      	strh	r3, [r0, #24]
}
 8000a16:	4770      	bx	lr

08000a18 <USART_OverSampling8Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 8000a18:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000a1a:	b129      	cbz	r1, 8000a28 <USART_OverSampling8Cmd+0x10>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 8000a1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000a20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000a24:	b29b      	uxth	r3, r3
 8000a26:	e001      	b.n	8000a2c <USART_OverSampling8Cmd+0x14>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
 8000a28:	045b      	lsls	r3, r3, #17
 8000a2a:	0c5b      	lsrs	r3, r3, #17
 8000a2c:	8183      	strh	r3, [r0, #12]
 8000a2e:	4770      	bx	lr

08000a30 <USART_OneBitMethodCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 8000a30:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000a32:	b119      	cbz	r1, 8000a3c <USART_OneBitMethodCmd+0xc>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 8000a34:	b29b      	uxth	r3, r3
 8000a36:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a3a:	e003      	b.n	8000a44 <USART_OneBitMethodCmd+0x14>
  }
  else
  {
    /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
 8000a3c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000a40:	041b      	lsls	r3, r3, #16
 8000a42:	0c1b      	lsrs	r3, r3, #16
 8000a44:	8283      	strh	r3, [r0, #20]
 8000a46:	4770      	bx	lr

08000a48 <USART_SendData>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8000a48:	05c9      	lsls	r1, r1, #23
 8000a4a:	0dc9      	lsrs	r1, r1, #23
 8000a4c:	8081      	strh	r1, [r0, #4]
}
 8000a4e:	4770      	bx	lr

08000a50 <USART_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8000a50:	8880      	ldrh	r0, [r0, #4]
 8000a52:	05c0      	lsls	r0, r0, #23
}
 8000a54:	0dc0      	lsrs	r0, r0, #23
 8000a56:	4770      	bx	lr

08000a58 <USART_SetAddress>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
 8000a58:	8a03      	ldrh	r3, [r0, #16]
 8000a5a:	f023 030f 	bic.w	r3, r3, #15
 8000a5e:	041b      	lsls	r3, r3, #16
 8000a60:	0c1b      	lsrs	r3, r3, #16
 8000a62:	8203      	strh	r3, [r0, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
 8000a64:	8a03      	ldrh	r3, [r0, #16]
 8000a66:	b29b      	uxth	r3, r3
 8000a68:	430b      	orrs	r3, r1
 8000a6a:	8203      	strh	r3, [r0, #16]
}
 8000a6c:	4770      	bx	lr

08000a6e <USART_ReceiverWakeUpCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 8000a6e:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
 8000a70:	b119      	cbz	r1, 8000a7a <USART_ReceiverWakeUpCmd+0xc>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 8000a72:	b29b      	uxth	r3, r3
 8000a74:	f043 0302 	orr.w	r3, r3, #2
 8000a78:	e003      	b.n	8000a82 <USART_ReceiverWakeUpCmd+0x14>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
 8000a7a:	f023 0302 	bic.w	r3, r3, #2
 8000a7e:	041b      	lsls	r3, r3, #16
 8000a80:	0c1b      	lsrs	r3, r3, #16
 8000a82:	8183      	strh	r3, [r0, #12]
 8000a84:	4770      	bx	lr

08000a86 <USART_WakeUpConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
 8000a86:	8983      	ldrh	r3, [r0, #12]
 8000a88:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000a8c:	041b      	lsls	r3, r3, #16
 8000a8e:	0c1b      	lsrs	r3, r3, #16
 8000a90:	8183      	strh	r3, [r0, #12]
  USARTx->CR1 |= USART_WakeUp;
 8000a92:	8983      	ldrh	r3, [r0, #12]
 8000a94:	b29b      	uxth	r3, r3
 8000a96:	430b      	orrs	r3, r1
 8000a98:	8183      	strh	r3, [r0, #12]
}
 8000a9a:	4770      	bx	lr

08000a9c <USART_LINBreakDetectLengthConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
 8000a9c:	8a03      	ldrh	r3, [r0, #16]
 8000a9e:	f023 0320 	bic.w	r3, r3, #32
 8000aa2:	041b      	lsls	r3, r3, #16
 8000aa4:	0c1b      	lsrs	r3, r3, #16
 8000aa6:	8203      	strh	r3, [r0, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 8000aa8:	8a03      	ldrh	r3, [r0, #16]
 8000aaa:	b29b      	uxth	r3, r3
 8000aac:	430b      	orrs	r3, r1
 8000aae:	8203      	strh	r3, [r0, #16]
}
 8000ab0:	4770      	bx	lr

08000ab2 <USART_LINCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 8000ab2:	8a03      	ldrh	r3, [r0, #16]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000ab4:	b119      	cbz	r1, 8000abe <USART_LINCmd+0xc>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 8000ab6:	b29b      	uxth	r3, r3
 8000ab8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000abc:	e003      	b.n	8000ac6 <USART_LINCmd+0x14>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
 8000abe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000ac2:	041b      	lsls	r3, r3, #16
 8000ac4:	0c1b      	lsrs	r3, r3, #16
 8000ac6:	8203      	strh	r3, [r0, #16]
 8000ac8:	4770      	bx	lr

08000aca <USART_SendBreak>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= USART_CR1_SBK;
 8000aca:	8983      	ldrh	r3, [r0, #12]
 8000acc:	b29b      	uxth	r3, r3
 8000ace:	f043 0301 	orr.w	r3, r3, #1
 8000ad2:	8183      	strh	r3, [r0, #12]
}
 8000ad4:	4770      	bx	lr

08000ad6 <USART_HalfDuplexCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 8000ad6:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000ad8:	b119      	cbz	r1, 8000ae2 <USART_HalfDuplexCmd+0xc>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 8000ada:	b29b      	uxth	r3, r3
 8000adc:	f043 0308 	orr.w	r3, r3, #8
 8000ae0:	e003      	b.n	8000aea <USART_HalfDuplexCmd+0x14>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
 8000ae2:	f023 0308 	bic.w	r3, r3, #8
 8000ae6:	041b      	lsls	r3, r3, #16
 8000ae8:	0c1b      	lsrs	r3, r3, #16
 8000aea:	8283      	strh	r3, [r0, #20]
 8000aec:	4770      	bx	lr

08000aee <USART_SetGuardTime>:
{    
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= USART_GTPR_PSC;
 8000aee:	8b03      	ldrh	r3, [r0, #24]
 8000af0:	b2db      	uxtb	r3, r3
 8000af2:	8303      	strh	r3, [r0, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 8000af4:	8b03      	ldrh	r3, [r0, #24]
 8000af6:	b29b      	uxth	r3, r3
 8000af8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8000afc:	8303      	strh	r3, [r0, #24]
}
 8000afe:	4770      	bx	lr

08000b00 <USART_SmartCardCmd>:
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 8000b00:	8a83      	ldrh	r3, [r0, #20]
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000b02:	b119      	cbz	r1, 8000b0c <USART_SmartCardCmd+0xc>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 8000b04:	b29b      	uxth	r3, r3
 8000b06:	f043 0320 	orr.w	r3, r3, #32
 8000b0a:	e003      	b.n	8000b14 <USART_SmartCardCmd+0x14>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
 8000b0c:	f023 0320 	bic.w	r3, r3, #32
 8000b10:	041b      	lsls	r3, r3, #16
 8000b12:	0c1b      	lsrs	r3, r3, #16
 8000b14:	8283      	strh	r3, [r0, #20]
 8000b16:	4770      	bx	lr

08000b18 <USART_SmartCardNACKCmd>:
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 8000b18:	8a83      	ldrh	r3, [r0, #20]
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000b1a:	b119      	cbz	r1, 8000b24 <USART_SmartCardNACKCmd+0xc>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 8000b1c:	b29b      	uxth	r3, r3
 8000b1e:	f043 0310 	orr.w	r3, r3, #16
 8000b22:	e003      	b.n	8000b2c <USART_SmartCardNACKCmd+0x14>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
 8000b24:	f023 0310 	bic.w	r3, r3, #16
 8000b28:	041b      	lsls	r3, r3, #16
 8000b2a:	0c1b      	lsrs	r3, r3, #16
 8000b2c:	8283      	strh	r3, [r0, #20]
 8000b2e:	4770      	bx	lr

08000b30 <USART_IrDAConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
 8000b30:	8a83      	ldrh	r3, [r0, #20]
 8000b32:	f023 0304 	bic.w	r3, r3, #4
 8000b36:	041b      	lsls	r3, r3, #16
 8000b38:	0c1b      	lsrs	r3, r3, #16
 8000b3a:	8283      	strh	r3, [r0, #20]
  USARTx->CR3 |= USART_IrDAMode;
 8000b3c:	8a83      	ldrh	r3, [r0, #20]
 8000b3e:	b29b      	uxth	r3, r3
 8000b40:	430b      	orrs	r3, r1
 8000b42:	8283      	strh	r3, [r0, #20]
}
 8000b44:	4770      	bx	lr

08000b46 <USART_IrDACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 8000b46:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 8000b48:	b119      	cbz	r1, 8000b52 <USART_IrDACmd+0xc>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 8000b4a:	b29b      	uxth	r3, r3
 8000b4c:	f043 0302 	orr.w	r3, r3, #2
 8000b50:	e003      	b.n	8000b5a <USART_IrDACmd+0x14>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
 8000b52:	f023 0302 	bic.w	r3, r3, #2
 8000b56:	041b      	lsls	r3, r3, #16
 8000b58:	0c1b      	lsrs	r3, r3, #16
 8000b5a:	8283      	strh	r3, [r0, #20]
 8000b5c:	4770      	bx	lr

08000b5e <USART_DMACmd>:

  if (NewState != DISABLE)
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8000b5e:	8a83      	ldrh	r3, [r0, #20]
 8000b60:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 8000b62:	b10a      	cbz	r2, 8000b68 <USART_DMACmd+0xa>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8000b64:	4319      	orrs	r1, r3
 8000b66:	e001      	b.n	8000b6c <USART_DMACmd+0xe>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 8000b68:	ea23 0101 	bic.w	r1, r3, r1
 8000b6c:	8281      	strh	r1, [r0, #20]
 8000b6e:	4770      	bx	lr

08000b70 <USART_ITConfig>:
  } 
    
  usartxbase = (uint32_t)USARTx;

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000b70:	f3c1 1342 	ubfx	r3, r1, #5, #3
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8000b74:	b510      	push	{r4, lr}

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8000b76:	f001 011f 	and.w	r1, r1, #31
  itmask = (((uint32_t)0x01) << itpos);
 8000b7a:	2401      	movs	r4, #1
 8000b7c:	fa14 f101 	lsls.w	r1, r4, r1
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8000b80:	42a3      	cmp	r3, r4
 8000b82:	d101      	bne.n	8000b88 <USART_ITConfig+0x18>
  {
    usartxbase += 0x0C;
 8000b84:	300c      	adds	r0, #12
 8000b86:	e004      	b.n	8000b92 <USART_ITConfig+0x22>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8000b88:	2b02      	cmp	r3, #2
 8000b8a:	d101      	bne.n	8000b90 <USART_ITConfig+0x20>
  {
    usartxbase += 0x10;
 8000b8c:	3010      	adds	r0, #16
 8000b8e:	e000      	b.n	8000b92 <USART_ITConfig+0x22>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8000b90:	3014      	adds	r0, #20
  }
  if (NewState != DISABLE)
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000b92:	6803      	ldr	r3, [r0, #0]
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
  }
  if (NewState != DISABLE)
 8000b94:	b10a      	cbz	r2, 8000b9a <USART_ITConfig+0x2a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000b96:	4319      	orrs	r1, r3
 8000b98:	e001      	b.n	8000b9e <USART_ITConfig+0x2e>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8000b9a:	ea23 0101 	bic.w	r1, r3, r1
 8000b9e:	6001      	str	r1, [r0, #0]
 8000ba0:	bd10      	pop	{r4, pc}

08000ba2 <USART_GetFlagStatus>:
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8000ba2:	8803      	ldrh	r3, [r0, #0]
  {
    bitstatus = SET;
 8000ba4:	4219      	tst	r1, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8000ba6:	bf0c      	ite	eq
 8000ba8:	2000      	moveq	r0, #0
 8000baa:	2001      	movne	r0, #1
 8000bac:	4770      	bx	lr

08000bae <USART_ClearFlag>:
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
       
  USARTx->SR = (uint16_t)~USART_FLAG;
 8000bae:	43c9      	mvns	r1, r1
 8000bb0:	b289      	uxth	r1, r1
 8000bb2:	8001      	strh	r1, [r0, #0]
}
 8000bb4:	4770      	bx	lr

08000bb6 <USART_GetITStatus>:
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
 8000bb6:	2201      	movs	r2, #1
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8000bb8:	b510      	push	{r4, lr}
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8000bba:	f001 031f 	and.w	r3, r1, #31
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000bbe:	f3c1 1442 	ubfx	r4, r1, #5, #3
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
 8000bc2:	409a      	lsls	r2, r3
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8000bc4:	2c01      	cmp	r4, #1
 8000bc6:	d101      	bne.n	8000bcc <USART_GetITStatus+0x16>
  {
    itmask &= USARTx->CR1;
 8000bc8:	8983      	ldrh	r3, [r0, #12]
 8000bca:	e003      	b.n	8000bd4 <USART_GetITStatus+0x1e>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8000bcc:	2c02      	cmp	r4, #2
  {
    itmask &= USARTx->CR2;
 8000bce:	bf0c      	ite	eq
 8000bd0:	8a03      	ldrheq	r3, [r0, #16]
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8000bd2:	8a83      	ldrhne	r3, [r0, #20]
 8000bd4:	b29b      	uxth	r3, r3
 8000bd6:	4013      	ands	r3, r2
  }
  
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
  bitpos &= USARTx->SR;
 8000bd8:	8802      	ldrh	r2, [r0, #0]
 8000bda:	b292      	uxth	r2, r2
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8000bdc:	b143      	cbz	r3, 8000bf0 <USART_GetITStatus+0x3a>
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
  }
  
  bitpos = USART_IT >> 0x08;
 8000bde:	0a09      	lsrs	r1, r1, #8
  bitpos = (uint32_t)0x01 << bitpos;
 8000be0:	2301      	movs	r3, #1
 8000be2:	fa13 f101 	lsls.w	r1, r3, r1
  *            @arg USART_IT_NE:   Noise Error interrupt
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
 8000be6:	4211      	tst	r1, r2
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
  bitpos &= USARTx->SR;
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
  {
    bitstatus = SET;
 8000be8:	bf0c      	ite	eq
 8000bea:	2000      	moveq	r0, #0
 8000bec:	2001      	movne	r0, #1
 8000bee:	bd10      	pop	{r4, pc}
  }
  else
  {
    bitstatus = RESET;
 8000bf0:	4618      	mov	r0, r3
  }
  
  return bitstatus;  
}
 8000bf2:	bd10      	pop	{r4, pc}

08000bf4 <USART_ClearITPendingBit>:
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 8000bf4:	0a09      	lsrs	r1, r1, #8
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	408b      	lsls	r3, r1
  USARTx->SR = (uint16_t)~itmask;
 8000bfa:	43db      	mvns	r3, r3
 8000bfc:	b29b      	uxth	r3, r3
 8000bfe:	8003      	strh	r3, [r0, #0]
}
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	08000ef4 	.word	0x08000ef4
 8000c08:	20000000 	.word	0x20000000
 8000c0c:	20000024 	.word	0x20000024
 8000c10:	20000024 	.word	0x20000024
 8000c14:	20000024 	.word	0x20000024

08000c18 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8000c18:	4770      	bx	lr

08000c1a <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000c1a:	e7fe      	b.n	8000c1a <HardFault_Handler>

08000c1c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000c1c:	e7fe      	b.n	8000c1c <MemManage_Handler>

08000c1e <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000c1e:	e7fe      	b.n	8000c1e <BusFault_Handler>

08000c20 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000c20:	e7fe      	b.n	8000c20 <UsageFault_Handler>

08000c22 <SVC_Handler>:
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
}
 8000c22:	4770      	bx	lr

08000c24 <DebugMon_Handler>:
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
}
 8000c24:	4770      	bx	lr

08000c26 <PendSV_Handler>:
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
}
 8000c26:	4770      	bx	lr

08000c28 <SystemInit>:
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000c28:	4b33      	ldr	r3, [pc, #204]	; (8000cf8 <SystemInit+0xd0>)
 8000c2a:	681a      	ldr	r2, [r3, #0]
 8000c2c:	f042 0201 	orr.w	r2, r2, #1
 8000c30:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000c32:	2200      	movs	r2, #0
 8000c34:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000c36:	6819      	ldr	r1, [r3, #0]
 8000c38:	f021 7184 	bic.w	r1, r1, #17301504	; 0x1080000
 8000c3c:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8000c40:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000c42:	492e      	ldr	r1, [pc, #184]	; (8000cfc <SystemInit+0xd4>)
 8000c44:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000c46:	6819      	ldr	r1, [r3, #0]
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c48:	b082      	sub	sp, #8

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000c4a:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8000c4e:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000c50:	60da      	str	r2, [r3, #12]
static void SetSysClock(void)
{
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000c52:	9200      	str	r2, [sp, #0]
 8000c54:	9201      	str	r2, [sp, #4]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000c5c:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000c64:	9201      	str	r2, [sp, #4]
    StartUpCounter++;
 8000c66:	9a00      	ldr	r2, [sp, #0]
 8000c68:	3201      	adds	r2, #1
 8000c6a:	9200      	str	r2, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000c6c:	9a01      	ldr	r2, [sp, #4]
 8000c6e:	b91a      	cbnz	r2, 8000c78 <SystemInit+0x50>
 8000c70:	9a00      	ldr	r2, [sp, #0]
 8000c72:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 8000c76:	d1f2      	bne.n	8000c5e <SystemInit+0x36>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000c78:	4b1f      	ldr	r3, [pc, #124]	; (8000cf8 <SystemInit+0xd0>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
 8000c80:	bf18      	it	ne
 8000c82:	2301      	movne	r3, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000c84:	9301      	str	r3, [sp, #4]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000c86:	9b01      	ldr	r3, [sp, #4]
 8000c88:	2b01      	cmp	r3, #1
 8000c8a:	d12e      	bne.n	8000cea <SystemInit+0xc2>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000c8c:	4b1a      	ldr	r3, [pc, #104]	; (8000cf8 <SystemInit+0xd0>)
 8000c8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c90:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000c94:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8000c96:	4a1a      	ldr	r2, [pc, #104]	; (8000d00 <SystemInit+0xd8>)
 8000c98:	6811      	ldr	r1, [r2, #0]
 8000c9a:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8000c9e:	6011      	str	r1, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000ca0:	689a      	ldr	r2, [r3, #8]
 8000ca2:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000ca4:	689a      	ldr	r2, [r3, #8]
 8000ca6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000caa:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000cac:	689a      	ldr	r2, [r3, #8]
 8000cae:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 8000cb2:	609a      	str	r2, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000cb4:	4a13      	ldr	r2, [pc, #76]	; (8000d04 <SystemInit+0xdc>)
 8000cb6:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000cbe:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000cc0:	6819      	ldr	r1, [r3, #0]
 8000cc2:	4a0d      	ldr	r2, [pc, #52]	; (8000cf8 <SystemInit+0xd0>)
 8000cc4:	0189      	lsls	r1, r1, #6
 8000cc6:	d5fb      	bpl.n	8000cc0 <SystemInit+0x98>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000cc8:	4b0f      	ldr	r3, [pc, #60]	; (8000d08 <SystemInit+0xe0>)
 8000cca:	f240 6105 	movw	r1, #1541	; 0x605
 8000cce:	6019      	str	r1, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000cd0:	6893      	ldr	r3, [r2, #8]
 8000cd2:	f023 0303 	bic.w	r3, r3, #3
 8000cd6:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000cd8:	6893      	ldr	r3, [r2, #8]
 8000cda:	f043 0302 	orr.w	r3, r3, #2
 8000cde:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000ce0:	6893      	ldr	r3, [r2, #8]
 8000ce2:	f003 030c 	and.w	r3, r3, #12
 8000ce6:	2b08      	cmp	r3, #8
 8000ce8:	d1fa      	bne.n	8000ce0 <SystemInit+0xb8>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000cea:	4b08      	ldr	r3, [pc, #32]	; (8000d0c <SystemInit+0xe4>)
 8000cec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cf0:	609a      	str	r2, [r3, #8]
#endif
}
 8000cf2:	b002      	add	sp, #8
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	40023800 	.word	0x40023800
 8000cfc:	24003010 	.word	0x24003010
 8000d00:	40007000 	.word	0x40007000
 8000d04:	07405419 	.word	0x07405419
 8000d08:	40023c00 	.word	0x40023c00
 8000d0c:	e000ed00 	.word	0xe000ed00

08000d10 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000d10:	4b18      	ldr	r3, [pc, #96]	; (8000d74 <SystemCoreClockUpdate+0x64>)
 8000d12:	4a19      	ldr	r2, [pc, #100]	; (8000d78 <SystemCoreClockUpdate+0x68>)
 8000d14:	6899      	ldr	r1, [r3, #8]
 8000d16:	f001 010c 	and.w	r1, r1, #12

  switch (tmp)
 8000d1a:	2904      	cmp	r1, #4
 8000d1c:	d003      	beq.n	8000d26 <SystemCoreClockUpdate+0x16>
 8000d1e:	2908      	cmp	r1, #8
 8000d20:	d003      	beq.n	8000d2a <SystemCoreClockUpdate+0x1a>
 8000d22:	4b16      	ldr	r3, [pc, #88]	; (8000d7c <SystemCoreClockUpdate+0x6c>)
 8000d24:	e019      	b.n	8000d5a <SystemCoreClockUpdate+0x4a>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000d26:	4b16      	ldr	r3, [pc, #88]	; (8000d80 <SystemCoreClockUpdate+0x70>)
 8000d28:	e017      	b.n	8000d5a <SystemCoreClockUpdate+0x4a>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000d2a:	6859      	ldr	r1, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000d2c:	685a      	ldr	r2, [r3, #4]
      
      if (pllsource != 0)
 8000d2e:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000d32:	6859      	ldr	r1, [r3, #4]
 8000d34:	bf14      	ite	ne
 8000d36:	4b12      	ldrne	r3, [pc, #72]	; (8000d80 <SystemCoreClockUpdate+0x70>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000d38:	4b10      	ldreq	r3, [pc, #64]	; (8000d7c <SystemCoreClockUpdate+0x6c>)

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000d3a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000d3e:	fbb3 f3f2 	udiv	r3, r3, r2
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000d42:	4a0c      	ldr	r2, [pc, #48]	; (8000d74 <SystemCoreClockUpdate+0x64>)
 8000d44:	6852      	ldr	r2, [r2, #4]
 8000d46:	f3c2 4201 	ubfx	r2, r2, #16, #2
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000d4a:	f3c1 1188 	ubfx	r1, r1, #6, #9
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000d4e:	3201      	adds	r2, #1
 8000d50:	0052      	lsls	r2, r2, #1
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000d52:	434b      	muls	r3, r1
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
      SystemCoreClock = pllvco/pllp;
 8000d54:	fbb3 f3f2 	udiv	r3, r3, r2
 8000d58:	4a07      	ldr	r2, [pc, #28]	; (8000d78 <SystemCoreClockUpdate+0x68>)
 8000d5a:	6013      	str	r3, [r2, #0]
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000d5c:	4b05      	ldr	r3, [pc, #20]	; (8000d74 <SystemCoreClockUpdate+0x64>)
 8000d5e:	689a      	ldr	r2, [r3, #8]
 8000d60:	4b05      	ldr	r3, [pc, #20]	; (8000d78 <SystemCoreClockUpdate+0x68>)
 8000d62:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8000d66:	189a      	adds	r2, r3, r2
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000d68:	6819      	ldr	r1, [r3, #0]
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000d6a:	7912      	ldrb	r2, [r2, #4]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000d6c:	fa31 f202 	lsrs.w	r2, r1, r2
 8000d70:	601a      	str	r2, [r3, #0]
}
 8000d72:	4770      	bx	lr
 8000d74:	40023800 	.word	0x40023800
 8000d78:	20000010 	.word	0x20000010
 8000d7c:	00f42400 	.word	0x00f42400
 8000d80:	007a1200 	.word	0x007a1200

08000d84 <_Z9_delay_msm>:
  volatile uint32_t i;				\
  for (i = 0; i < 10000; ++i)				\
    __asm__ __volatile__ ("nop\n\t":::"memory");	\
} while (0)

inline void _delay_ms(uint32_t t) {
 8000d84:	b082      	sub	sp, #8
	while (t-- > 0) {
		__delay();
 8000d86:	2200      	movs	r2, #0
 8000d88:	f242 730f 	movw	r3, #9999	; 0x270f
  for (i = 0; i < 10000; ++i)				\
    __asm__ __volatile__ ("nop\n\t":::"memory");	\
} while (0)

inline void _delay_ms(uint32_t t) {
	while (t-- > 0) {
 8000d8c:	e009      	b.n	8000da2 <_Z9_delay_msm+0x1e>
		__delay();
 8000d8e:	9201      	str	r2, [sp, #4]
 8000d90:	e003      	b.n	8000d9a <_Z9_delay_msm+0x16>
 8000d92:	bf00      	nop
 8000d94:	9901      	ldr	r1, [sp, #4]
 8000d96:	3101      	adds	r1, #1
 8000d98:	9101      	str	r1, [sp, #4]
 8000d9a:	9901      	ldr	r1, [sp, #4]
 8000d9c:	4299      	cmp	r1, r3
 8000d9e:	d9f8      	bls.n	8000d92 <_Z9_delay_msm+0xe>
 8000da0:	3801      	subs	r0, #1
  for (i = 0; i < 10000; ++i)				\
    __asm__ __volatile__ ("nop\n\t":::"memory");	\
} while (0)

inline void _delay_ms(uint32_t t) {
	while (t-- > 0) {
 8000da2:	2800      	cmp	r0, #0
 8000da4:	d1f3      	bne.n	8000d8e <_Z9_delay_msm+0xa>
		__delay();
	}
}
 8000da6:	b002      	add	sp, #8
 8000da8:	4770      	bx	lr
	...

08000dac <main>:
 *      Author: sin
 */

#include "armduino.h"

int main(void) {
 8000dac:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	GPIOMode(RCC_AHB1Periph_GPIOD, GPIOD,
			GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15,
			GPIO_Mode_OUT, GPIO_Speed_50MHz, GPIO_OType_PP, GPIO_PuPd_NOPULL);
 8000dae:	2302      	movs	r3, #2
 8000db0:	9300      	str	r3, [sp, #0]
 8000db2:	2300      	movs	r3, #0
 8000db4:	9301      	str	r3, [sp, #4]
 8000db6:	9302      	str	r3, [sp, #8]
 8000db8:	2008      	movs	r0, #8
 8000dba:	493b      	ldr	r1, [pc, #236]	; (8000ea8 <main+0xfc>)
 8000dbc:	f44f 4270 	mov.w	r2, #61440	; 0xf000
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	f7ff f9e1 	bl	8000188 <GPIOMode>

	while (1) {
		digitalWrite(GPIOD, GPIO_Pin_12, SET);
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	4837      	ldr	r0, [pc, #220]	; (8000ea8 <main+0xfc>)
 8000dca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dce:	f7ff f9f6 	bl	80001be <digitalWrite>
		digitalWrite(GPIOD, GPIO_Pin_13, RESET);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	4834      	ldr	r0, [pc, #208]	; (8000ea8 <main+0xfc>)
 8000dd6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dda:	f7ff f9f0 	bl	80001be <digitalWrite>
		digitalWrite(GPIOD, GPIO_Pin_14, RESET);
 8000dde:	2200      	movs	r2, #0
 8000de0:	4831      	ldr	r0, [pc, #196]	; (8000ea8 <main+0xfc>)
 8000de2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000de6:	f7ff f9ea 	bl	80001be <digitalWrite>
		digitalWrite(GPIOD, GPIO_Pin_15, RESET);
 8000dea:	2200      	movs	r2, #0
 8000dec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000df0:	482d      	ldr	r0, [pc, #180]	; (8000ea8 <main+0xfc>)
 8000df2:	f7ff f9e4 	bl	80001be <digitalWrite>
		_delay_ms(500);
 8000df6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000dfa:	f7ff ffc3 	bl	8000d84 <_Z9_delay_msm>
		digitalWrite(GPIOD, GPIO_Pin_12, RESET);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	4829      	ldr	r0, [pc, #164]	; (8000ea8 <main+0xfc>)
 8000e02:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e06:	f7ff f9da 	bl	80001be <digitalWrite>
		digitalWrite(GPIOD, GPIO_Pin_13, SET);
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	4826      	ldr	r0, [pc, #152]	; (8000ea8 <main+0xfc>)
 8000e0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e12:	f7ff f9d4 	bl	80001be <digitalWrite>
		digitalWrite(GPIOD, GPIO_Pin_14, RESET);
 8000e16:	2200      	movs	r2, #0
 8000e18:	4823      	ldr	r0, [pc, #140]	; (8000ea8 <main+0xfc>)
 8000e1a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e1e:	f7ff f9ce 	bl	80001be <digitalWrite>
		digitalWrite(GPIOD, GPIO_Pin_15, RESET);
 8000e22:	2200      	movs	r2, #0
 8000e24:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e28:	481f      	ldr	r0, [pc, #124]	; (8000ea8 <main+0xfc>)
 8000e2a:	f7ff f9c8 	bl	80001be <digitalWrite>
		_delay_ms(500);
 8000e2e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e32:	f7ff ffa7 	bl	8000d84 <_Z9_delay_msm>
		digitalWrite(GPIOD, GPIO_Pin_12, RESET);
 8000e36:	2200      	movs	r2, #0
 8000e38:	481b      	ldr	r0, [pc, #108]	; (8000ea8 <main+0xfc>)
 8000e3a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e3e:	f7ff f9be 	bl	80001be <digitalWrite>
		digitalWrite(GPIOD, GPIO_Pin_13, RESET);
 8000e42:	2200      	movs	r2, #0
 8000e44:	4818      	ldr	r0, [pc, #96]	; (8000ea8 <main+0xfc>)
 8000e46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e4a:	f7ff f9b8 	bl	80001be <digitalWrite>
		digitalWrite(GPIOD, GPIO_Pin_14, SET);
 8000e4e:	2201      	movs	r2, #1
 8000e50:	4815      	ldr	r0, [pc, #84]	; (8000ea8 <main+0xfc>)
 8000e52:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e56:	f7ff f9b2 	bl	80001be <digitalWrite>
		digitalWrite(GPIOD, GPIO_Pin_15, RESET);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e60:	4811      	ldr	r0, [pc, #68]	; (8000ea8 <main+0xfc>)
 8000e62:	f7ff f9ac 	bl	80001be <digitalWrite>
		_delay_ms(500);
 8000e66:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e6a:	f7ff ff8b 	bl	8000d84 <_Z9_delay_msm>
		digitalWrite(GPIOD, GPIO_Pin_12, RESET);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	480d      	ldr	r0, [pc, #52]	; (8000ea8 <main+0xfc>)
 8000e72:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e76:	f7ff f9a2 	bl	80001be <digitalWrite>
		digitalWrite(GPIOD, GPIO_Pin_13, RESET);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	480a      	ldr	r0, [pc, #40]	; (8000ea8 <main+0xfc>)
 8000e7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e82:	f7ff f99c 	bl	80001be <digitalWrite>
		digitalWrite(GPIOD, GPIO_Pin_14, RESET);
 8000e86:	4808      	ldr	r0, [pc, #32]	; (8000ea8 <main+0xfc>)
 8000e88:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	f7ff f996 	bl	80001be <digitalWrite>
		digitalWrite(GPIOD, GPIO_Pin_15, SET);
 8000e92:	4805      	ldr	r0, [pc, #20]	; (8000ea8 <main+0xfc>)
 8000e94:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e98:	2201      	movs	r2, #1
 8000e9a:	f7ff f990 	bl	80001be <digitalWrite>
		_delay_ms(500);
 8000e9e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ea2:	f7ff ff6f 	bl	8000d84 <_Z9_delay_msm>
 8000ea6:	e78e      	b.n	8000dc6 <main+0x1a>
 8000ea8:	40020c00 	.word	0x40020c00

08000eac <Reset_Handler>:
 8000eac:	2100      	movs	r1, #0
 8000eae:	e003      	b.n	8000eb8 <LoopCopyDataInit>

08000eb0 <CopyDataInit>:
 8000eb0:	4b0a      	ldr	r3, [pc, #40]	; (8000edc <LoopFillZerobss+0x10>)
 8000eb2:	585b      	ldr	r3, [r3, r1]
 8000eb4:	5043      	str	r3, [r0, r1]
 8000eb6:	3104      	adds	r1, #4

08000eb8 <LoopCopyDataInit>:
 8000eb8:	4809      	ldr	r0, [pc, #36]	; (8000ee0 <LoopFillZerobss+0x14>)
 8000eba:	4b0a      	ldr	r3, [pc, #40]	; (8000ee4 <LoopFillZerobss+0x18>)
 8000ebc:	1842      	adds	r2, r0, r1
 8000ebe:	429a      	cmp	r2, r3
 8000ec0:	d3f6      	bcc.n	8000eb0 <CopyDataInit>
 8000ec2:	4a09      	ldr	r2, [pc, #36]	; (8000ee8 <LoopFillZerobss+0x1c>)
 8000ec4:	e002      	b.n	8000ecc <LoopFillZerobss>

08000ec6 <FillZerobss>:
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	f842 3b04 	str.w	r3, [r2], #4

08000ecc <LoopFillZerobss>:
 8000ecc:	4b07      	ldr	r3, [pc, #28]	; (8000eec <LoopFillZerobss+0x20>)
 8000ece:	429a      	cmp	r2, r3
 8000ed0:	d3f9      	bcc.n	8000ec6 <FillZerobss>
 8000ed2:	f7ff fea9 	bl	8000c28 <SystemInit>
 8000ed6:	f7ff ff69 	bl	8000dac <main>
 8000eda:	4770      	bx	lr
 8000edc:	08000ef4 	.word	0x08000ef4
 8000ee0:	20000000 	.word	0x20000000
 8000ee4:	20000024 	.word	0x20000024
 8000ee8:	20000024 	.word	0x20000024
 8000eec:	20000024 	.word	0x20000024

08000ef0 <ADC_IRQHandler>:
 8000ef0:	e7fe      	b.n	8000ef0 <ADC_IRQHandler>
	...
